
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000135d0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000135d0  000135d0  000235d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  000135d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00007ab4  2000060c  00013be4  0003060c  2**2
                  ALLOC
  6 .stack        00010000  200080c0  0001b698  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000a03a1  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000dcf3  00000000  00000000  000d0a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002180d  00000000  00000000  000de727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003b08  00000000  00000000  000fff34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000036e0  00000000  00000000  00103a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000599fd  00000000  00000000  0010711c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004d35e  00000000  00000000  00160b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00147201  00000000  00000000  001ade77  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000efb8  00000000  00000000  002f5078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 80 01 20 49 04 00 00 45 04 00 00 45 04 00 00     ... I...E...E...
      10:	45 04 00 00 45 04 00 00 45 04 00 00 00 00 00 00     E...E...E.......
	...
      2c:	45 04 00 00 45 04 00 00 00 00 00 00 45 04 00 00     E...E.......E...
      3c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      4c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      5c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      6c:	dd 62 00 00 f9 50 00 00 09 51 00 00 45 04 00 00     .b...P...Q..E...
      7c:	19 51 00 00 29 51 00 00 39 51 00 00 49 51 00 00     .Q..)Q..9Q..IQ..
      8c:	59 51 00 00 69 51 00 00 79 51 00 00 45 04 00 00     YQ..iQ..yQ..E...
      9c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      ac:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      bc:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      cc:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      dc:	45 04 00 00 45 04 00 00 45 04 00 00 00 00 00 00     E...E...E.......
	...
      f4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     104:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     114:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     124:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     134:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     144:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     154:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     164:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     174:	45 04 00 00 45 04 00 00 3d 45 00 00 bd b2 00 00     E...E...=E......
     184:	cd b2 00 00 dd b2 00 00 ed b2 00 00 45 04 00 00     ............E...
     194:	19 7d 00 00 45 04 00 00 45 04 00 00 45 04 00 00     .}..E...E...E...
     1a4:	45 04 00 00 45 04 00 00 45 04 00 00 35 7d 00 00     E...E...E...5}..
     1b4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     1c4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     1d4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     1e4:	45 04 00 00 45 04 00 00 b9 89 00 00 45 04 00 00     E...E.......E...
     1f4:	d5 89 00 00 45 04 00 00 f1 89 00 00 0d 8a 00 00     ....E...........
     204:	29 8a 00 00 45 8a 00 00 45 04 00 00 45 04 00 00     )...E...E...E...
     214:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     224:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     234:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     244:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     254:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	000135d8 	.word	0x000135d8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000135d8 	.word	0x000135d8
     2c4:	20000610 	.word	0x20000610
     2c8:	000135d8 	.word	0x000135d8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
#include "string.h"
#include "EvaporatorAndCondesatorFans_Class.h"
#include "CDC_Class.h"

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	680a      	ldr	r2, [r1, #0]
     2d2:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d4:	2264      	movs	r2, #100	; 0x64
     2d6:	7102      	strb	r2, [r0, #4]
     2d8:	2263      	movs	r2, #99	; 0x63
     2da:	7142      	strb	r2, [r0, #5]
     2dc:	2262      	movs	r2, #98	; 0x62
     2de:	7182      	strb	r2, [r0, #6]
     2e0:	2261      	movs	r2, #97	; 0x61
     2e2:	71c2      	strb	r2, [r0, #7]
     2e4:	2200      	movs	r2, #0
     2e6:	7242      	strb	r2, [r0, #9]
{
	
} //Commands_Handler
     2e8:	4770      	bx	lr

000002ea <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     2ea:	680b      	ldr	r3, [r1, #0]
     2ec:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     2ee:	4770      	bx	lr

000002f0 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     2f0:	60c1      	str	r1, [r0, #12]
     2f2:	4770      	bx	lr

000002f4 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     2f4:	b510      	push	{r4, lr}
     2f6:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     2f8:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     2fc:	bf14      	ite	ne
     2fe:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     300:	2100      	moveq	r1, #0
     302:	4b03      	ldr	r3, [pc, #12]	; (310 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     304:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     306:	4b03      	ldr	r3, [pc, #12]	; (314 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     308:	4798      	blx	r3
	}
	return data;
}
     30a:	4620      	mov	r0, r4
     30c:	bd10      	pop	{r4, pc}
     30e:	bf00      	nop
     310:	20001200 	.word	0x20001200
     314:	0000ec21 	.word	0x0000ec21

00000318 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     318:	b538      	push	{r3, r4, r5, lr}
     31a:	4605      	mov	r5, r0
     31c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     31e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     322:	bf14      	ite	ne
     324:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     326:	2100      	moveq	r1, #0
     328:	4b04      	ldr	r3, [pc, #16]	; (33c <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     32a:	6e18      	ldr	r0, [r3, #96]	; 0x60
     32c:	4b04      	ldr	r3, [pc, #16]	; (340 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     32e:	4798      	blx	r3
	return SetEnableFan1(data);
     330:	4621      	mov	r1, r4
     332:	4628      	mov	r0, r5
     334:	4b03      	ldr	r3, [pc, #12]	; (344 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     336:	4798      	blx	r3
}
     338:	bd38      	pop	{r3, r4, r5, pc}
     33a:	bf00      	nop
     33c:	20001200 	.word	0x20001200
     340:	0000ec21 	.word	0x0000ec21
     344:	000002f5 	.word	0x000002f5

00000348 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     348:	b538      	push	{r3, r4, r5, lr}
     34a:	4605      	mov	r5, r0
     34c:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     34e:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     352:	bf14      	ite	ne
     354:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     356:	2100      	moveq	r1, #0
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     35a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     35c:	4b04      	ldr	r3, [pc, #16]	; (370 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     35e:	4798      	blx	r3
	return SetEnableFan2(data);
     360:	4621      	mov	r1, r4
     362:	4628      	mov	r0, r5
     364:	4b03      	ldr	r3, [pc, #12]	; (374 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     366:	4798      	blx	r3
}
     368:	bd38      	pop	{r3, r4, r5, pc}
     36a:	bf00      	nop
     36c:	20001200 	.word	0x20001200
     370:	0000e939 	.word	0x0000e939
     374:	00000319 	.word	0x00000319

00000378 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     378:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     37a:	68c3      	ldr	r3, [r0, #12]
     37c:	6819      	ldr	r1, [r3, #0]
     37e:	6041      	str	r1, [r0, #4]
     380:	8899      	ldrh	r1, [r3, #4]
     382:	799b      	ldrb	r3, [r3, #6]
     384:	8101      	strh	r1, [r0, #8]
     386:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     388:	7a43      	ldrb	r3, [r0, #9]
     38a:	2b4b      	cmp	r3, #75	; 0x4b
     38c:	bf0c      	ite	eq
     38e:	2401      	moveq	r4, #1
     390:	2400      	movne	r4, #0
	if (result){
     392:	d001      	beq.n	398 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     394:	4620      	mov	r0, r4
     396:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     398:	7a81      	ldrb	r1, [r0, #10]
     39a:	4b01      	ldr	r3, [pc, #4]	; (3a0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     39c:	4798      	blx	r3
     39e:	e7f9      	b.n	394 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3a0:	00000349 	.word	0x00000349

000003a4 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     3a6:	68c3      	ldr	r3, [r0, #12]
     3a8:	6819      	ldr	r1, [r3, #0]
     3aa:	6041      	str	r1, [r0, #4]
     3ac:	8899      	ldrh	r1, [r3, #4]
     3ae:	799b      	ldrb	r3, [r3, #6]
     3b0:	8101      	strh	r1, [r0, #8]
     3b2:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == 	kHVACCommandSetPWMFans);
     3b4:	7a43      	ldrb	r3, [r0, #9]
     3b6:	2b4c      	cmp	r3, #76	; 0x4c
     3b8:	bf0c      	ite	eq
     3ba:	2401      	moveq	r4, #1
     3bc:	2400      	movne	r4, #0
	if (result){
     3be:	d001      	beq.n	3c4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x20>
		}else{

	}
	
	return result;
}
     3c0:	4620      	mov	r0, r4
     3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
     3c4:	7a85      	ldrb	r5, [r0, #10]
		if (data>0)
     3c6:	2d00      	cmp	r5, #0
     3c8:	d0fa      	beq.n	3c0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
			fans.evaporator[0]->SetPWM(data);
     3ca:	4e06      	ldr	r6, [pc, #24]	; (3e4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x40>)
     3cc:	4629      	mov	r1, r5
     3ce:	6df0      	ldr	r0, [r6, #92]	; 0x5c
     3d0:	4f05      	ldr	r7, [pc, #20]	; (3e8 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x44>)
     3d2:	47b8      	blx	r7
			fans.evaporator[1]->SetPWM(data);
     3d4:	4629      	mov	r1, r5
     3d6:	6e30      	ldr	r0, [r6, #96]	; 0x60
     3d8:	47b8      	blx	r7
			fans.condesator->SetPWM(data);
     3da:	4629      	mov	r1, r5
     3dc:	6e70      	ldr	r0, [r6, #100]	; 0x64
     3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <_ZN16Commands_Handler17CommandSetPWMFansEv+0x48>)
     3e0:	4798      	blx	r3
     3e2:	e7ed      	b.n	3c0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
     3e4:	20001200 	.word	0x20001200
     3e8:	0000ec45 	.word	0x0000ec45
     3ec:	0000e951 	.word	0x0000e951

000003f0 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     3f0:	b530      	push	{r4, r5, lr}
     3f2:	b083      	sub	sp, #12
	uint8_t gpios[2];
	SingleTaskMessage	singleTask;
	memcpy(&singleTask,usbMessageBuffer,sizeof(SingleTaskMessage));
     3f4:	68c3      	ldr	r3, [r0, #12]
     3f6:	795b      	ldrb	r3, [r3, #5]
	bool	result(singleTask.header.task == kHVACCommandRedStatusFans);
     3f8:	2b51      	cmp	r3, #81	; 0x51
     3fa:	bf0c      	ite	eq
     3fc:	2501      	moveq	r5, #1
     3fe:	2500      	movne	r5, #0
	if (result){
     400:	d002      	beq.n	408 <_ZN16Commands_Handler17CommandFansStatusEv+0x18>

		
	}
	
	return result;
     402:	4628      	mov	r0, r5
     404:	b003      	add	sp, #12
     406:	bd30      	pop	{r4, r5, pc}
     408:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     40a:	a901      	add	r1, sp, #4
     40c:	4808      	ldr	r0, [pc, #32]	; (430 <_ZN16Commands_Handler17CommandFansStatusEv+0x40>)
     40e:	4b09      	ldr	r3, [pc, #36]	; (434 <_ZN16Commands_Handler17CommandFansStatusEv+0x44>)
     410:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     412:	6823      	ldr	r3, [r4, #0]
     414:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     418:	aa01      	add	r2, sp, #4
     41a:	68e1      	ldr	r1, [r4, #12]
     41c:	4420      	add	r0, r4
     41e:	4b06      	ldr	r3, [pc, #24]	; (438 <_ZN16Commands_Handler17CommandFansStatusEv+0x48>)
     420:	4798      	blx	r3
			usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     422:	2240      	movs	r2, #64	; 0x40
     424:	68e1      	ldr	r1, [r4, #12]
     426:	4805      	ldr	r0, [pc, #20]	; (43c <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     428:	4b05      	ldr	r3, [pc, #20]	; (440 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     42a:	4798      	blx	r3
     42c:	e7e9      	b.n	402 <_ZN16Commands_Handler17CommandFansStatusEv+0x12>
     42e:	bf00      	nop
     430:	20001200 	.word	0x20001200
     434:	0000eabd 	.word	0x0000eabd
     438:	000007c1 	.word	0x000007c1
     43c:	20000fa8 	.word	0x20000fa8
     440:	0000e0f5 	.word	0x0000e0f5

00000444 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     444:	e7fe      	b.n	444 <Dummy_Handler>
	...

00000448 <Reset_Handler>:
{
     448:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     44a:	4b17      	ldr	r3, [pc, #92]	; (4a8 <Reset_Handler+0x60>)
     44c:	4a17      	ldr	r2, [pc, #92]	; (4ac <Reset_Handler+0x64>)
     44e:	429a      	cmp	r2, r3
     450:	d010      	beq.n	474 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <Reset_Handler+0x68>)
     454:	4a14      	ldr	r2, [pc, #80]	; (4a8 <Reset_Handler+0x60>)
     456:	429a      	cmp	r2, r3
     458:	d20c      	bcs.n	474 <Reset_Handler+0x2c>
     45a:	3b01      	subs	r3, #1
     45c:	1a9b      	subs	r3, r3, r2
     45e:	f023 0303 	bic.w	r3, r3, #3
     462:	3304      	adds	r3, #4
     464:	4413      	add	r3, r2
     466:	4911      	ldr	r1, [pc, #68]	; (4ac <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     468:	f851 0b04 	ldr.w	r0, [r1], #4
     46c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     470:	429a      	cmp	r2, r3
     472:	d1f9      	bne.n	468 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     474:	4b0f      	ldr	r3, [pc, #60]	; (4b4 <Reset_Handler+0x6c>)
     476:	4a10      	ldr	r2, [pc, #64]	; (4b8 <Reset_Handler+0x70>)
     478:	429a      	cmp	r2, r3
     47a:	d20a      	bcs.n	492 <Reset_Handler+0x4a>
     47c:	3b01      	subs	r3, #1
     47e:	1a9b      	subs	r3, r3, r2
     480:	f023 0303 	bic.w	r3, r3, #3
     484:	3304      	adds	r3, #4
     486:	4413      	add	r3, r2
                *pDest++ = 0;
     488:	2100      	movs	r1, #0
     48a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     48e:	4293      	cmp	r3, r2
     490:	d1fb      	bne.n	48a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     492:	4a0a      	ldr	r2, [pc, #40]	; (4bc <Reset_Handler+0x74>)
     494:	4b0a      	ldr	r3, [pc, #40]	; (4c0 <Reset_Handler+0x78>)
     496:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     49a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     49c:	4b09      	ldr	r3, [pc, #36]	; (4c4 <Reset_Handler+0x7c>)
     49e:	4798      	blx	r3
        main();
     4a0:	4b09      	ldr	r3, [pc, #36]	; (4c8 <Reset_Handler+0x80>)
     4a2:	4798      	blx	r3
     4a4:	e7fe      	b.n	4a4 <Reset_Handler+0x5c>
     4a6:	bf00      	nop
     4a8:	20000000 	.word	0x20000000
     4ac:	000135d8 	.word	0x000135d8
     4b0:	2000060c 	.word	0x2000060c
     4b4:	200080c0 	.word	0x200080c0
     4b8:	2000060c 	.word	0x2000060c
     4bc:	e000ed00 	.word	0xe000ed00
     4c0:	00000000 	.word	0x00000000
     4c4:	00012bfd 	.word	0x00012bfd
     4c8:	000004e5 	.word	0x000004e5

000004cc <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4cc:	2280      	movs	r2, #128	; 0x80
     4ce:	4b03      	ldr	r3, [pc, #12]	; (4dc <_ZL15FirmwareIsAlivePK10timer_task+0x10>)
     4d0:	619a      	str	r2, [r3, #24]
bool localtimeout=false;
uint32_t	errorCounter=0;
static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	localtimeout=true;
     4d2:	2201      	movs	r2, #1
     4d4:	4b02      	ldr	r3, [pc, #8]	; (4e0 <_ZL15FirmwareIsAlivePK10timer_task+0x14>)
     4d6:	701a      	strb	r2, [r3, #0]
     4d8:	4770      	bx	lr
     4da:	bf00      	nop
     4dc:	41008000 	.word	0x41008000
     4e0:	20000628 	.word	0x20000628

000004e4 <main>:




int main(void)		
{
     4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     4e8:	4b85      	ldr	r3, [pc, #532]	; (700 <main+0x21c>)
     4ea:	4798      	blx	r3
	usb.Init();
     4ec:	4885      	ldr	r0, [pc, #532]	; (704 <main+0x220>)
     4ee:	4b86      	ldr	r3, [pc, #536]	; (708 <main+0x224>)
     4f0:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     4f2:	20c8      	movs	r0, #200	; 0xc8
     4f4:	4b85      	ldr	r3, [pc, #532]	; (70c <main+0x228>)
     4f6:	4798      	blx	r3
	bool isOK=temperatures.Init();
     4f8:	4885      	ldr	r0, [pc, #532]	; (710 <main+0x22c>)
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <main+0x230>)
     4fc:	4798      	blx	r3
	if (isOK)
     4fe:	b110      	cbz	r0, 506 <main+0x22>
	{
		temperatures.StartOneConversion();
     500:	4883      	ldr	r0, [pc, #524]	; (710 <main+0x22c>)
     502:	4b85      	ldr	r3, [pc, #532]	; (718 <main+0x234>)
     504:	4798      	blx	r3
     506:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     50a:	4b84      	ldr	r3, [pc, #528]	; (71c <main+0x238>)
     50c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	gpio_set_pin_level(LED0,true);
	while (!fvc.InitController())
     510:	4e83      	ldr	r6, [pc, #524]	; (720 <main+0x23c>)
     512:	4d84      	ldr	r5, [pc, #528]	; (724 <main+0x240>)
	{
		delay_ms(200);
     514:	4c7d      	ldr	r4, [pc, #500]	; (70c <main+0x228>)
	while (!fvc.InitController())
     516:	4630      	mov	r0, r6
     518:	47a8      	blx	r5
     51a:	b938      	cbnz	r0, 52c <main+0x48>
		delay_ms(200);
     51c:	20c8      	movs	r0, #200	; 0xc8
     51e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     520:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     524:	4b7d      	ldr	r3, [pc, #500]	; (71c <main+0x238>)
     526:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     52a:	e7f4      	b.n	516 <main+0x32>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     52c:	4e7e      	ldr	r6, [pc, #504]	; (728 <main+0x244>)
     52e:	4d7f      	ldr	r5, [pc, #508]	; (72c <main+0x248>)
		delay_ms(200);
     530:	4c76      	ldr	r4, [pc, #472]	; (70c <main+0x228>)
	while(!fans.Init()){
     532:	4630      	mov	r0, r6
     534:	47a8      	blx	r5
     536:	b938      	cbnz	r0, 548 <main+0x64>
		delay_ms(200);
     538:	20c8      	movs	r0, #200	; 0xc8
     53a:	47a0      	blx	r4
     53c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     540:	4b76      	ldr	r3, [pc, #472]	; (71c <main+0x238>)
     542:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     546:	e7f4      	b.n	532 <main+0x4e>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     548:	4c77      	ldr	r4, [pc, #476]	; (728 <main+0x244>)
     54a:	2100      	movs	r1, #0
     54c:	6e60      	ldr	r0, [r4, #100]	; 0x64
     54e:	4b78      	ldr	r3, [pc, #480]	; (730 <main+0x24c>)
     550:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     552:	2100      	movs	r1, #0
     554:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     556:	4d77      	ldr	r5, [pc, #476]	; (734 <main+0x250>)
     558:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     55a:	2100      	movs	r1, #0
     55c:	6e20      	ldr	r0, [r4, #96]	; 0x60
     55e:	47a8      	blx	r5
	
	while(!heater.Init()){
     560:	4e75      	ldr	r6, [pc, #468]	; (738 <main+0x254>)
     562:	4d76      	ldr	r5, [pc, #472]	; (73c <main+0x258>)
		delay_ms(200);
     564:	4c69      	ldr	r4, [pc, #420]	; (70c <main+0x228>)
	while(!heater.Init()){
     566:	4630      	mov	r0, r6
     568:	47a8      	blx	r5
     56a:	b938      	cbnz	r0, 57c <main+0x98>
		delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	47a0      	blx	r4
     570:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     574:	4b69      	ldr	r3, [pc, #420]	; (71c <main+0x238>)
     576:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     57a:	e7f4      	b.n	566 <main+0x82>
		gpio_toggle_pin_level(LED0);
	}
	heater.Disable(0);
     57c:	4d6e      	ldr	r5, [pc, #440]	; (738 <main+0x254>)
     57e:	2100      	movs	r1, #0
     580:	4628      	mov	r0, r5
     582:	4c6f      	ldr	r4, [pc, #444]	; (740 <main+0x25c>)
     584:	47a0      	blx	r4
	heater.Disable(1);
     586:	2101      	movs	r1, #1
     588:	4628      	mov	r0, r5
     58a:	47a0      	blx	r4
	heater.Disable(2);
     58c:	2102      	movs	r1, #2
     58e:	4628      	mov	r0, r5
     590:	47a0      	blx	r4
	heater.Disable(3);
     592:	2103      	movs	r1, #3
     594:	4628      	mov	r0, r5
     596:	47a0      	blx	r4
	//hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),2500);
	uint8_t localSetpoint=210;
	uint8_t localPosition;

	
	toolApp.Init();
     598:	486a      	ldr	r0, [pc, #424]	; (744 <main+0x260>)
     59a:	4b6b      	ldr	r3, [pc, #428]	; (748 <main+0x264>)
     59c:	4798      	blx	r3
	memory.Init();
     59e:	4c6b      	ldr	r4, [pc, #428]	; (74c <main+0x268>)
     5a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     5a4:	4620      	mov	r0, r4
     5a6:	4b6a      	ldr	r3, [pc, #424]	; (750 <main+0x26c>)
     5a8:	4798      	blx	r3
	memory.WriteDefaultParameters();
     5aa:	4620      	mov	r0, r4
     5ac:	4b69      	ldr	r3, [pc, #420]	; (754 <main+0x270>)
     5ae:	4798      	blx	r3

	fvc.UpdateFlapperValveData();
     5b0:	4c5b      	ldr	r4, [pc, #364]	; (720 <main+0x23c>)
     5b2:	4620      	mov	r0, r4
     5b4:	4b68      	ldr	r3, [pc, #416]	; (758 <main+0x274>)
     5b6:	4798      	blx	r3
	fvc.fv->SetEnable(false);
     5b8:	2100      	movs	r1, #0
     5ba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     5bc:	4b67      	ldr	r3, [pc, #412]	; (75c <main+0x278>)
     5be:	4798      	blx	r3
	fvc.fv->SetInvalidPosition(false);
     5c0:	2100      	movs	r1, #0
     5c2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     5c4:	4d66      	ldr	r5, [pc, #408]	; (760 <main+0x27c>)
     5c6:	47a8      	blx	r5
	fvc.fv->ClearMoveFault(false);
     5c8:	2100      	movs	r1, #0
     5ca:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     5cc:	4b65      	ldr	r3, [pc, #404]	; (764 <main+0x280>)
     5ce:	4798      	blx	r3
	delay_ms(100);
     5d0:	2064      	movs	r0, #100	; 0x64
     5d2:	4b4e      	ldr	r3, [pc, #312]	; (70c <main+0x228>)
     5d4:	4798      	blx	r3
	fvc.fv->SetInvalidPosition(true);
     5d6:	2101      	movs	r1, #1
     5d8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     5da:	47a8      	blx	r5
	if (fvc.dataStruct.controlOutputs.niAlcFvMotorEnable)
     5dc:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
     5e0:	b11b      	cbz	r3, 5ea <main+0x106>
	{
		fvc.fv->SetEnable(false);
     5e2:	2100      	movs	r1, #0
     5e4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     5e6:	4b5d      	ldr	r3, [pc, #372]	; (75c <main+0x278>)
     5e8:	4798      	blx	r3
	}
	
	fvc.fv->ClearMoveFault(true);
     5ea:	4c4d      	ldr	r4, [pc, #308]	; (720 <main+0x23c>)
     5ec:	2101      	movs	r1, #1
     5ee:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     5f0:	4b5c      	ldr	r3, [pc, #368]	; (764 <main+0x280>)
     5f2:	4798      	blx	r3
	fvc.fv->WriteSetpoint(localSetpoint);
     5f4:	21d2      	movs	r1, #210	; 0xd2
     5f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     5f8:	4b5b      	ldr	r3, [pc, #364]	; (768 <main+0x284>)
     5fa:	4798      	blx	r3
	fvc.fv->SetDirection(false);
     5fc:	2100      	movs	r1, #0
     5fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     600:	4b5a      	ldr	r3, [pc, #360]	; (76c <main+0x288>)
     602:	4798      	blx	r3
	if (fvc.fv->ReadActualPosition()>localSetpoint)
     604:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     606:	4b5a      	ldr	r3, [pc, #360]	; (770 <main+0x28c>)
     608:	4798      	blx	r3
     60a:	28d2      	cmp	r0, #210	; 0xd2
	{
		fvc.fv->SetDirection(true);
     60c:	bfc7      	ittee	gt
     60e:	2101      	movgt	r1, #1
     610:	4623      	movgt	r3, r4
	} 
	else
	{
		fvc.fv->SetDirection(false);
     612:	2100      	movle	r1, #0
     614:	4b42      	ldrle	r3, [pc, #264]	; (720 <main+0x23c>)
     616:	6f98      	ldr	r0, [r3, #120]	; 0x78
     618:	4b54      	ldr	r3, [pc, #336]	; (76c <main+0x288>)
     61a:	4798      	blx	r3
	}
		hvacTimer.Start_oneShot_task(FUNC_PTR(FirmwareIsAlive),5000);
     61c:	f241 3288 	movw	r2, #5000	; 0x1388
     620:	4954      	ldr	r1, [pc, #336]	; (774 <main+0x290>)
     622:	4855      	ldr	r0, [pc, #340]	; (778 <main+0x294>)
     624:	4b55      	ldr	r3, [pc, #340]	; (77c <main+0x298>)
     626:	4798      	blx	r3
			fvc.fv->SetEnable(true);
     628:	4c3d      	ldr	r4, [pc, #244]	; (720 <main+0x23c>)
     62a:	2101      	movs	r1, #1
     62c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     62e:	4b4b      	ldr	r3, [pc, #300]	; (75c <main+0x278>)
     630:	4798      	blx	r3

	localPosition=fvc.fv->ReadActualPosition();
     632:	6fa0      	ldr	r0, [r4, #120]	; 0x78
     634:	4b4e      	ldr	r3, [pc, #312]	; (770 <main+0x28c>)
     636:	4798      	blx	r3

	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     638:	f1a0 03d2 	sub.w	r3, r0, #210	; 0xd2
     63c:	2b00      	cmp	r3, #0
     63e:	bfb8      	it	lt
     640:	425b      	neglt	r3, r3
     642:	2b06      	cmp	r3, #6
     644:	dd12      	ble.n	66c <main+0x188>
     646:	4b4e      	ldr	r3, [pc, #312]	; (780 <main+0x29c>)
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	2b01      	cmp	r3, #1
     64c:	d00e      	beq.n	66c <main+0x188>

	{

		localPosition=fvc.fv->ReadActualPosition();
     64e:	4626      	mov	r6, r4
     650:	4d47      	ldr	r5, [pc, #284]	; (770 <main+0x28c>)
	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     652:	4c4b      	ldr	r4, [pc, #300]	; (780 <main+0x29c>)
		localPosition=fvc.fv->ReadActualPosition();
     654:	6fb0      	ldr	r0, [r6, #120]	; 0x78
     656:	47a8      	blx	r5
	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     658:	f1a0 03d2 	sub.w	r3, r0, #210	; 0xd2
     65c:	2b00      	cmp	r3, #0
     65e:	bfb8      	it	lt
     660:	425b      	neglt	r3, r3
     662:	2b06      	cmp	r3, #6
     664:	dd02      	ble.n	66c <main+0x188>
     666:	7823      	ldrb	r3, [r4, #0]
     668:	2b01      	cmp	r3, #1
     66a:	d1f3      	bne.n	654 <main+0x170>

	}
	fvc.fv->SetEnable(false);
     66c:	2100      	movs	r1, #0
     66e:	4b2c      	ldr	r3, [pc, #176]	; (720 <main+0x23c>)
     670:	6f98      	ldr	r0, [r3, #120]	; 0x78
     672:	4b3a      	ldr	r3, [pc, #232]	; (75c <main+0x278>)
     674:	4798      	blx	r3
			toolApp.handleCommunication();			
			
		}
		else
		{
			toolApp.setConnected(false);
     676:	f8df 8124 	ldr.w	r8, [pc, #292]	; 79c <main+0x2b8>
		} 
		else
		{
			fvc.Control_NBC_StandAlone_Reset();
		}
		if (temperatures.IsConversionFinished())
     67a:	4e25      	ldr	r6, [pc, #148]	; (710 <main+0x22c>)
     67c:	e037      	b.n	6ee <main+0x20a>
			toolApp.setConnected(false);
     67e:	2100      	movs	r1, #0
     680:	4628      	mov	r0, r5
     682:	47c0      	blx	r8
     684:	e010      	b.n	6a8 <main+0x1c4>
				fvc.InitController();
     686:	4826      	ldr	r0, [pc, #152]	; (720 <main+0x23c>)
     688:	4b26      	ldr	r3, [pc, #152]	; (724 <main+0x240>)
     68a:	4798      	blx	r3
				errorCounter=0;
     68c:	2200      	movs	r2, #0
     68e:	4b3c      	ldr	r3, [pc, #240]	; (780 <main+0x29c>)
     690:	605a      	str	r2, [r3, #4]
		if (temperatures.IsConversionFinished())
     692:	4630      	mov	r0, r6
     694:	4b3b      	ldr	r3, [pc, #236]	; (784 <main+0x2a0>)
     696:	4798      	blx	r3
     698:	b9f0      	cbnz	r0, 6d8 <main+0x1f4>
		if (toolApp.IsAppConnected())
     69a:	4628      	mov	r0, r5
     69c:	47b8      	blx	r7
     69e:	2800      	cmp	r0, #0
     6a0:	d0ed      	beq.n	67e <main+0x19a>
			toolApp.handleCommunication();			
     6a2:	4628      	mov	r0, r5
     6a4:	4b38      	ldr	r3, [pc, #224]	; (788 <main+0x2a4>)
     6a6:	4798      	blx	r3
		if ((fvc.IsInvalidPosition())&(!fvc.flapperValveIsMoving))
     6a8:	4c1d      	ldr	r4, [pc, #116]	; (720 <main+0x23c>)
     6aa:	4620      	mov	r0, r4
     6ac:	4b37      	ldr	r3, [pc, #220]	; (78c <main+0x2a8>)
     6ae:	4798      	blx	r3
     6b0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
     6b4:	2b01      	cmp	r3, #1
     6b6:	d00b      	beq.n	6d0 <main+0x1ec>
     6b8:	b150      	cbz	r0, 6d0 <main+0x1ec>
			if (errorCounter<10)
     6ba:	4b31      	ldr	r3, [pc, #196]	; (780 <main+0x29c>)
     6bc:	685b      	ldr	r3, [r3, #4]
     6be:	2b09      	cmp	r3, #9
     6c0:	d8e1      	bhi.n	686 <main+0x1a2>
				errorCounter++;
     6c2:	3301      	adds	r3, #1
     6c4:	4a2e      	ldr	r2, [pc, #184]	; (780 <main+0x29c>)
     6c6:	6053      	str	r3, [r2, #4]
				fvc.Control_NBC_StandAlone_Reset();
     6c8:	4620      	mov	r0, r4
     6ca:	4b31      	ldr	r3, [pc, #196]	; (790 <main+0x2ac>)
     6cc:	4798      	blx	r3
     6ce:	e7e0      	b.n	692 <main+0x1ae>
			fvc.Control_NBC_StandAlone_Reset();
     6d0:	4813      	ldr	r0, [pc, #76]	; (720 <main+0x23c>)
     6d2:	4b2f      	ldr	r3, [pc, #188]	; (790 <main+0x2ac>)
     6d4:	4798      	blx	r3
     6d6:	e7dc      	b.n	692 <main+0x1ae>
		{
			
			temperatures.GetConversionResult();
     6d8:	4630      	mov	r0, r6
     6da:	4b2e      	ldr	r3, [pc, #184]	; (794 <main+0x2b0>)
     6dc:	4798      	blx	r3
			if (temperatures.faultData==VALID_TEMPERATURE)
     6de:	f896 309c 	ldrb.w	r3, [r6, #156]	; 0x9c
     6e2:	2b01      	cmp	r3, #1
     6e4:	d006      	beq.n	6f4 <main+0x210>
					gotNewTemperature=true;
					
				}
				
			}
			temperatures.StartOneConversion();
     6e6:	4630      	mov	r0, r6
     6e8:	4b0b      	ldr	r3, [pc, #44]	; (718 <main+0x234>)
     6ea:	4798      	blx	r3
			asm("nop");
     6ec:	bf00      	nop
		if (toolApp.IsAppConnected())
     6ee:	4d15      	ldr	r5, [pc, #84]	; (744 <main+0x260>)
     6f0:	4f29      	ldr	r7, [pc, #164]	; (798 <main+0x2b4>)
     6f2:	e7d2      	b.n	69a <main+0x1b6>
				currentTemperature=temperatures.lastValue;
     6f4:	f8d6 20a0 	ldr.w	r2, [r6, #160]	; 0xa0
     6f8:	4b21      	ldr	r3, [pc, #132]	; (780 <main+0x29c>)
     6fa:	609a      	str	r2, [r3, #8]
     6fc:	e7f3      	b.n	6e6 <main+0x202>
     6fe:	bf00      	nop
     700:	0000106d 	.word	0x0000106d
     704:	20000fa8 	.word	0x20000fa8
     708:	0000de25 	.word	0x0000de25
     70c:	000027b9 	.word	0x000027b9
     710:	20007904 	.word	0x20007904
     714:	00010881 	.word	0x00010881
     718:	000108fd 	.word	0x000108fd
     71c:	41008000 	.word	0x41008000
     720:	20001308 	.word	0x20001308
     724:	0000efd9 	.word	0x0000efd9
     728:	20001200 	.word	0x20001200
     72c:	0000ea45 	.word	0x0000ea45
     730:	0000e939 	.word	0x0000e939
     734:	0000ec21 	.word	0x0000ec21
     738:	20001514 	.word	0x20001514
     73c:	000102ed 	.word	0x000102ed
     740:	0001047d 	.word	0x0001047d
     744:	20000678 	.word	0x20000678
     748:	00000b81 	.word	0x00000b81
     74c:	20002534 	.word	0x20002534
     750:	00010689 	.word	0x00010689
     754:	000105e5 	.word	0x000105e5
     758:	0000fb89 	.word	0x0000fb89
     75c:	0000ff49 	.word	0x0000ff49
     760:	000100b9 	.word	0x000100b9
     764:	00010041 	.word	0x00010041
     768:	00010131 	.word	0x00010131
     76c:	0000ffc9 	.word	0x0000ffc9
     770:	00010169 	.word	0x00010169
     774:	000004cd 	.word	0x000004cd
     778:	20000f50 	.word	0x20000f50
     77c:	0000da75 	.word	0x0000da75
     780:	20000628 	.word	0x20000628
     784:	000109d9 	.word	0x000109d9
     788:	00000f95 	.word	0x00000f95
     78c:	0000f141 	.word	0x0000f141
     790:	0000f1c1 	.word	0x0000f1c1
     794:	00010945 	.word	0x00010945
     798:	0000090d 	.word	0x0000090d
     79c:	000008dd 	.word	0x000008dd

000007a0 <_ZN22MaintenanceDataHandlerC1Ev>:
     7a0:	2264      	movs	r2, #100	; 0x64
     7a2:	7002      	strb	r2, [r0, #0]
     7a4:	2263      	movs	r2, #99	; 0x63
     7a6:	7042      	strb	r2, [r0, #1]
     7a8:	2262      	movs	r2, #98	; 0x62
     7aa:	7082      	strb	r2, [r0, #2]
     7ac:	2261      	movs	r2, #97	; 0x61
     7ae:	70c2      	strb	r2, [r0, #3]
     7b0:	2200      	movs	r2, #0
     7b2:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     7b4:	223a      	movs	r2, #58	; 0x3a
     7b6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     7ba:	4770      	bx	lr

000007bc <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     7bc:	4770      	bx	lr
	...

000007c0 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4605      	mov	r5, r0
     7c4:	460c      	mov	r4, r1
     7c6:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
     7c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
     7cc:	3006      	adds	r0, #6
     7ce:	4b09      	ldr	r3, [pc, #36]	; (7f4 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
     7d0:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
     7d2:	462b      	mov	r3, r5
     7d4:	4621      	mov	r1, r4
     7d6:	3540      	adds	r5, #64	; 0x40
     7d8:	681e      	ldr	r6, [r3, #0]
     7da:	685c      	ldr	r4, [r3, #4]
     7dc:	6898      	ldr	r0, [r3, #8]
     7de:	68da      	ldr	r2, [r3, #12]
     7e0:	600e      	str	r6, [r1, #0]
     7e2:	604c      	str	r4, [r1, #4]
     7e4:	6088      	str	r0, [r1, #8]
     7e6:	60ca      	str	r2, [r1, #12]
     7e8:	3310      	adds	r3, #16
     7ea:	3110      	adds	r1, #16
     7ec:	42ab      	cmp	r3, r5
     7ee:	d1f3      	bne.n	7d8 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
     7f0:	2000      	movs	r0, #0
     7f2:	bd70      	pop	{r4, r5, r6, pc}
     7f4:	00012c4d 	.word	0x00012c4d

000007f8 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     7f8:	4b02      	ldr	r3, [pc, #8]	; (804 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     7fa:	681a      	ldr	r2, [r3, #0]
     7fc:	6913      	ldr	r3, [r2, #16]
     7fe:	3301      	adds	r3, #1
     800:	6113      	str	r3, [r2, #16]
     802:	4770      	bx	lr
     804:	20000634 	.word	0x20000634

00000808 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     808:	4b02      	ldr	r3, [pc, #8]	; (814 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	2200      	movs	r2, #0
     80e:	751a      	strb	r2, [r3, #20]
     810:	4770      	bx	lr
     812:	bf00      	nop
     814:	20000634 	.word	0x20000634

00000818 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     818:	b538      	push	{r3, r4, r5, lr}
     81a:	4604      	mov	r4, r0
     81c:	4b0a      	ldr	r3, [pc, #40]	; (848 <_ZN16Maintenance_ToolD1Ev+0x30>)
     81e:	6003      	str	r3, [r0, #0]
{
	ticks=0;
     820:	2300      	movs	r3, #0
     822:	6103      	str	r3, [r0, #16]
	interfaceTimer.Stop();
     824:	4d09      	ldr	r5, [pc, #36]	; (84c <_ZN16Maintenance_ToolD1Ev+0x34>)
     826:	4628      	mov	r0, r5
     828:	4b09      	ldr	r3, [pc, #36]	; (850 <_ZN16Maintenance_ToolD1Ev+0x38>)
     82a:	4798      	blx	r3
	interfaceTimer.Remove_task();
     82c:	4628      	mov	r0, r5
     82e:	4b09      	ldr	r3, [pc, #36]	; (854 <_ZN16Maintenance_ToolD1Ev+0x3c>)
     830:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
     832:	4909      	ldr	r1, [pc, #36]	; (858 <_ZN16Maintenance_ToolD1Ev+0x40>)
     834:	4620      	mov	r0, r4
     836:	4b09      	ldr	r3, [pc, #36]	; (85c <_ZN16Maintenance_ToolD1Ev+0x44>)
     838:	4798      	blx	r3
     83a:	f504 7080 	add.w	r0, r4, #256	; 0x100
     83e:	4b08      	ldr	r3, [pc, #32]	; (860 <_ZN16Maintenance_ToolD1Ev+0x48>)
     840:	4798      	blx	r3
	
} //~Maintenance_Tool
     842:	4620      	mov	r0, r4
     844:	bd38      	pop	{r3, r4, r5, pc}
     846:	bf00      	nop
     848:	0001305c 	.word	0x0001305c
     84c:	20001080 	.word	0x20001080
     850:	0000e611 	.word	0x0000e611
     854:	0000e729 	.word	0x0000e729
     858:	0001304c 	.word	0x0001304c
     85c:	000002eb 	.word	0x000002eb
     860:	000007bd 	.word	0x000007bd

00000864 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     864:	b538      	push	{r3, r4, r5, lr}
     866:	4604      	mov	r4, r0
     868:	f500 7080 	add.w	r0, r0, #256	; 0x100
     86c:	4b16      	ldr	r3, [pc, #88]	; (8c8 <_ZN16Maintenance_ToolC1Ev+0x64>)
     86e:	4798      	blx	r3
     870:	4916      	ldr	r1, [pc, #88]	; (8cc <_ZN16Maintenance_ToolC1Ev+0x68>)
     872:	4620      	mov	r0, r4
     874:	4b16      	ldr	r3, [pc, #88]	; (8d0 <_ZN16Maintenance_ToolC1Ev+0x6c>)
     876:	4798      	blx	r3
     878:	4b16      	ldr	r3, [pc, #88]	; (8d4 <_ZN16Maintenance_ToolC1Ev+0x70>)
     87a:	6023      	str	r3, [r4, #0]
     87c:	2300      	movs	r3, #0
     87e:	2564      	movs	r5, #100	; 0x64
     880:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
     884:	2063      	movs	r0, #99	; 0x63
     886:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
     88a:	2162      	movs	r1, #98	; 0x62
     88c:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
     890:	2261      	movs	r2, #97	; 0x61
     892:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
     896:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
     89a:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
     89e:	f884 00f3 	strb.w	r0, [r4, #243]	; 0xf3
     8a2:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
     8a6:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
     8aa:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
	ptrMaintenanceTool=this;
     8ae:	4a0a      	ldr	r2, [pc, #40]	; (8d8 <_ZN16Maintenance_ToolC1Ev+0x74>)
     8b0:	f842 4b04 	str.w	r4, [r2], #4
	maintenanceIsConnected = false;
     8b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	nextMaintenanceSyncTime = 0;
     8b8:	61a3      	str	r3, [r4, #24]
	nextMaintenanceUsageTimerSyncTime = 0;
     8ba:	61e3      	str	r3, [r4, #28]
	ticks=0;
     8bc:	6123      	str	r3, [r4, #16]
	localBuffer=staticBuffer;
     8be:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
} //Maintenance_Tool
     8c2:	4620      	mov	r0, r4
     8c4:	bd38      	pop	{r3, r4, r5, pc}
     8c6:	bf00      	nop
     8c8:	000007a1 	.word	0x000007a1
     8cc:	0001304c 	.word	0x0001304c
     8d0:	000002d1 	.word	0x000002d1
     8d4:	0001305c 	.word	0x0001305c
     8d8:	20000634 	.word	0x20000634

000008dc <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     8dc:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     8de:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
		if (isConnected)
     8e2:	b919      	cbnz	r1, 8ec <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     8e4:	4805      	ldr	r0, [pc, #20]	; (8fc <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     8e8:	4798      	blx	r3
     8ea:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     8ec:	f64e 2260 	movw	r2, #60000	; 0xea60
     8f0:	4904      	ldr	r1, [pc, #16]	; (904 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     8f2:	4802      	ldr	r0, [pc, #8]	; (8fc <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     8f4:	4b04      	ldr	r3, [pc, #16]	; (908 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     8f6:	4798      	blx	r3
     8f8:	bd08      	pop	{r3, pc}
     8fa:	bf00      	nop
     8fc:	20001080 	.word	0x20001080
     900:	0000e611 	.word	0x0000e611
     904:	00000809 	.word	0x00000809
     908:	0000e6f1 	.word	0x0000e6f1

0000090c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     90c:	b510      	push	{r4, lr}
     90e:	4604      	mov	r4, r0
	result=false;
     910:	2300      	movs	r3, #0
     912:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	magic=0;
     916:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	if (gotAccess==true)
     91a:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
     91e:	b12b      	cbz	r3, 92c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     920:	2301      	movs	r3, #1
     922:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	return	result;
     926:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
}
     92a:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     92c:	4b16      	ldr	r3, [pc, #88]	; (988 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     92e:	7d5b      	ldrb	r3, [r3, #21]
     930:	b1b3      	cbz	r3, 960 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
     932:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
     936:	1e41      	subs	r1, r0, #1
     938:	3003      	adds	r0, #3
				magic=magic<<8;
     93a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
     93e:	021b      	lsls	r3, r3, #8
     940:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				magic|= localBuffer[i];
     944:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     948:	4313      	orrs	r3, r2
     94a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			for (int i = 0; i < 4; i++)
     94e:	4281      	cmp	r1, r0
     950:	d1f3      	bne.n	93a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     952:	4a0e      	ldr	r2, [pc, #56]	; (98c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
     954:	ea83 0102 	eor.w	r1, r3, r2
     958:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
			if (xorResult==0)
     95c:	4293      	cmp	r3, r2
     95e:	d006      	beq.n	96e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     960:	2240      	movs	r2, #64	; 0x40
     962:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     966:	4808      	ldr	r0, [pc, #32]	; (988 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     968:	4b09      	ldr	r3, [pc, #36]	; (990 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
     96a:	4798      	blx	r3
     96c:	e7db      	b.n	926 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     96e:	2101      	movs	r1, #1
     970:	f884 10cd 	strb.w	r1, [r4, #205]	; 0xcd
				result=true;
     974:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
				is_MTPC_Beaming=true;
     978:	7521      	strb	r1, [r4, #20]
				setConnected(true);
     97a:	4620      	mov	r0, r4
     97c:	4b05      	ldr	r3, [pc, #20]	; (994 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
     97e:	4798      	blx	r3
				return	result;
     980:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     984:	bd10      	pop	{r4, pc}
     986:	bf00      	nop
     988:	20000fa8 	.word	0x20000fa8
     98c:	61626364 	.word	0x61626364
     990:	0000df71 	.word	0x0000df71
     994:	000008dd 	.word	0x000008dd

00000998 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     998:	b410      	push	{r4}
     99a:	4604      	mov	r4, r0
     99c:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     99e:	4619      	mov	r1, r3
     9a0:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
     9a4:	54d1      	strb	r1, [r2, r3]
     9a6:	1c58      	adds	r0, r3, #1
     9a8:	b2c0      	uxtb	r0, r0
     9aa:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     9ac:	2b40      	cmp	r3, #64	; 0x40
     9ae:	d1f7      	bne.n	9a0 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
     9b0:	bc10      	pop	{r4}
     9b2:	4770      	bx	lr

000009b4 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     9b4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
     9b8:	b92b      	cbnz	r3, 9c6 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     9ba:	6183      	str	r3, [r0, #24]
		maintenanceIsConnected = true;
     9bc:	2301      	movs	r3, #1
     9be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		bSendNotifications = true;
     9c2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     9c6:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
     9ca:	4770      	bx	lr

000009cc <_ZN16Maintenance_Tool22CommandWriteParametersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandWriteParameters(void)	{
     9cc:	b508      	push	{r3, lr}
	uint32_t	w,r;
		int n=sizeof(HVACMessageHeader);
		HVACMessageHeader hm;
	
	bool	result(header.task == kGAINCommandWriteParameters);
	if (result){
     9ce:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     9d2:	2b47      	cmp	r3, #71	; 0x47
     9d4:	d001      	beq.n	9da <_ZN16Maintenance_Tool22CommandWriteParametersEv+0xe>
	bool	result(header.task == kGAINCommandWriteParameters);
     9d6:	2000      	movs	r0, #0
	}else{

	}
	
	return result;
}
     9d8:	bd08      	pop	{r3, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n],sizeof(UserParameters));
     9da:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     9de:	88db      	ldrh	r3, [r3, #6]
     9e0:	4601      	mov	r1, r0
     9e2:	f821 3fd4 	strh.w	r3, [r1, #212]!
		r=memory.SaveParameters(parameters);
     9e6:	4803      	ldr	r0, [pc, #12]	; (9f4 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x28>)
     9e8:	4b03      	ldr	r3, [pc, #12]	; (9f8 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x2c>)
     9ea:	4798      	blx	r3
			result=(bool)(r==0);
     9ec:	fab0 f080 	clz	r0, r0
     9f0:	0940      	lsrs	r0, r0, #5
     9f2:	bd08      	pop	{r3, pc}
     9f4:	20002534 	.word	0x20002534
     9f8:	000106d5 	.word	0x000106d5

000009fc <_ZN16Maintenance_Tool17CommandSetHeatersEv>:

bool Maintenance_Tool::CommandSetHeaters(void)	{
     9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     a00:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     a04:	6819      	ldr	r1, [r3, #0]
     a06:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
     a0a:	8899      	ldrh	r1, [r3, #4]
     a0c:	799b      	ldrb	r3, [r3, #6]
     a0e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
     a12:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     a16:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     a1a:	2b49      	cmp	r3, #73	; 0x49
     a1c:	bf0c      	ite	eq
     a1e:	f04f 0801 	moveq.w	r8, #1
     a22:	f04f 0800 	movne.w	r8, #0
	if (result){
     a26:	d002      	beq.n	a2e <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     a28:	4640      	mov	r0, r8
     a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     a2e:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
     a32:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
		enableHeaters=singleTaskMessage.description;
     a36:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
     a3a:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
		if (enableHeaters!=lastEnableHeaters)
     a3e:	429a      	cmp	r2, r3
     a40:	d0f2      	beq.n	a28 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     a42:	4605      	mov	r5, r0
     a44:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     a46:	4f07      	ldr	r7, [pc, #28]	; (a64 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     a48:	4e07      	ldr	r6, [pc, #28]	; (a68 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     a4a:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
     a4e:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     a50:	f002 0201 	and.w	r2, r2, #1
     a54:	b2e1      	uxtb	r1, r4
     a56:	4638      	mov	r0, r7
     a58:	47b0      	blx	r6
     a5a:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     a5c:	2c04      	cmp	r4, #4
     a5e:	d1f4      	bne.n	a4a <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     a60:	e7e2      	b.n	a28 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     a62:	bf00      	nop
     a64:	20001514 	.word	0x20001514
     a68:	00010441 	.word	0x00010441

00000a6c <_ZN16Maintenance_Tool22CommandSetFlapperValveEv>:


	

bool Maintenance_Tool::CommandSetFlapperValve(void){
     a6c:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     a6e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     a72:	6819      	ldr	r1, [r3, #0]
     a74:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
     a78:	8899      	ldrh	r1, [r3, #4]
     a7a:	799b      	ldrb	r3, [r3, #6]
     a7c:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
     a80:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandFlapperValve);
     a84:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     a88:	2b4f      	cmp	r3, #79	; 0x4f
     a8a:	bf0c      	ite	eq
     a8c:	2401      	moveq	r4, #1
     a8e:	2400      	movne	r4, #0
	if (result){
     a90:	d001      	beq.n	a96 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x2a>
	}else{

	}
	
	return result;
}
     a92:	4620      	mov	r0, r4
     a94:	bd10      	pop	{r4, pc}
		if ((data&(0x01))>0)
     a96:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
     a9a:	f013 0f01 	tst.w	r3, #1
			fvc.StartControlling();
     a9e:	4803      	ldr	r0, [pc, #12]	; (aac <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x40>)
     aa0:	bf14      	ite	ne
     aa2:	4b03      	ldrne	r3, [pc, #12]	; (ab0 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x44>)
			fvc.StopControlling();
     aa4:	4b03      	ldreq	r3, [pc, #12]	; (ab4 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x48>)
     aa6:	4798      	blx	r3
     aa8:	e7f3      	b.n	a92 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x26>
     aaa:	bf00      	nop
     aac:	20001308 	.word	0x20001308
     ab0:	0000fb2d 	.word	0x0000fb2d
     ab4:	0000f965 	.word	0x0000f965

00000ab8 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv>:


bool Maintenance_Tool::CommandSetFlapperPosition(void){
     ab8:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     aba:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     abe:	6819      	ldr	r1, [r3, #0]
     ac0:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
     ac4:	8899      	ldrh	r1, [r3, #4]
     ac6:	799b      	ldrb	r3, [r3, #6]
     ac8:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
     acc:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACWriteSetpointFlapperValve);
     ad0:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     ad4:	2b50      	cmp	r3, #80	; 0x50
     ad6:	bf0c      	ite	eq
     ad8:	2401      	moveq	r4, #1
     ada:	2400      	movne	r4, #0
	if (result){
     adc:	d001      	beq.n	ae2 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x2a>
		}else{

	}
	
	return result;
}
     ade:	4620      	mov	r0, r4
     ae0:	bd10      	pop	{r4, pc}
		if (fvc.controllerEnabled)
     ae2:	4b07      	ldr	r3, [pc, #28]	; (b00 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     ae4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
     ae8:	b923      	cbnz	r3, af4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x3c>
		fvc.doPeriodicTask=false;
     aea:	2200      	movs	r2, #0
     aec:	4b04      	ldr	r3, [pc, #16]	; (b00 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     aee:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
     af2:	e7f4      	b.n	ade <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x26>
			fvc.StartControlling(data);
     af4:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
     af8:	4801      	ldr	r0, [pc, #4]	; (b00 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     afa:	4b02      	ldr	r3, [pc, #8]	; (b04 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x4c>)
     afc:	4798      	blx	r3
     afe:	e7f4      	b.n	aea <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x32>
     b00:	20001308 	.word	0x20001308
     b04:	0000f9a9 	.word	0x0000f9a9

00000b08 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     b08:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     b0a:	0855      	lsrs	r5, r2, #1
     b0c:	d007      	beq.n	b1e <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     b0e:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     b10:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     b14:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     b16:	3401      	adds	r4, #1
     b18:	b2a4      	uxth	r4, r4
     b1a:	42ac      	cmp	r4, r5
     b1c:	dbf8      	blt.n	b10 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     b1e:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     b22:	bf1d      	ittte	ne
     b24:	189b      	addne	r3, r3, r2
     b26:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     b2a:	4048      	eorne	r0, r1
     b2c:	4608      	moveq	r0, r1

	return checksum;
	}
     b2e:	bc30      	pop	{r4, r5}
     b30:	4770      	bx	lr
	...

00000b34 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     b34:	b538      	push	{r3, r4, r5, lr}
     b36:	4604      	mov	r4, r0
	checksum=0;
     b38:	2500      	movs	r5, #0
     b3a:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
	checksum = calculateChecksum(0, sizeof(header), &header);
     b3e:	460b      	mov	r3, r1
     b40:	2206      	movs	r2, #6
     b42:	4629      	mov	r1, r5
     b44:	4d02      	ldr	r5, [pc, #8]	; (b50 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     b46:	47a8      	blx	r5
     b48:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
	}
     b4c:	bd38      	pop	{r3, r4, r5, pc}
     b4e:	bf00      	nop
     b50:	00000b09 	.word	0x00000b09

00000b54 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     b54:	4b06      	ldr	r3, [pc, #24]	; (b70 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	600b      	str	r3, [r1, #0]
     b5a:	4b06      	ldr	r3, [pc, #24]	; (b74 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	604b      	str	r3, [r1, #4]
     b60:	4b05      	ldr	r3, [pc, #20]	; (b78 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	608b      	str	r3, [r1, #8]
     b66:	4b05      	ldr	r3, [pc, #20]	; (b7c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	60cb      	str	r3, [r1, #12]
     b6c:	4770      	bx	lr
     b6e:	bf00      	nop
     b70:	41002018 	.word	0x41002018
     b74:	4100201c 	.word	0x4100201c
     b78:	41002020 	.word	0x41002020
     b7c:	41002024 	.word	0x41002024

00000b80 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b82:	4604      	mov	r4, r0
	ticks=0;
     b84:	2600      	movs	r6, #0
     b86:	6106      	str	r6, [r0, #16]
	interfaceTimer.Init();
     b88:	4d13      	ldr	r5, [pc, #76]	; (bd8 <_ZN16Maintenance_Tool4InitEv+0x58>)
     b8a:	4628      	mov	r0, r5
     b8c:	4b13      	ldr	r3, [pc, #76]	; (bdc <_ZN16Maintenance_Tool4InitEv+0x5c>)
     b8e:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b94:	4912      	ldr	r1, [pc, #72]	; (be0 <_ZN16Maintenance_Tool4InitEv+0x60>)
     b96:	4628      	mov	r0, r5
     b98:	4b12      	ldr	r3, [pc, #72]	; (be4 <_ZN16Maintenance_Tool4InitEv+0x64>)
     b9a:	4798      	blx	r3
	InitCommandHandler(localBuffer);
     b9c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     ba0:	4620      	mov	r0, r4
     ba2:	4b11      	ldr	r3, [pc, #68]	; (be8 <_ZN16Maintenance_Tool4InitEv+0x68>)
     ba4:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     ba6:	f104 05d7 	add.w	r5, r4, #215	; 0xd7
     baa:	4629      	mov	r1, r5
     bac:	4620      	mov	r0, r4
     bae:	4b0f      	ldr	r3, [pc, #60]	; (bec <_ZN16Maintenance_Tool4InitEv+0x6c>)
     bb0:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     bb2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     bb6:	f8d4 70d7 	ldr.w	r7, [r4, #215]	; 0xd7
     bba:	f8d4 00db 	ldr.w	r0, [r4, #219]	; 0xdb
     bbe:	f8d4 10df 	ldr.w	r1, [r4, #223]	; 0xdf
     bc2:	f8d4 20e3 	ldr.w	r2, [r4, #227]	; 0xe3
     bc6:	601f      	str	r7, [r3, #0]
     bc8:	6058      	str	r0, [r3, #4]
     bca:	6099      	str	r1, [r3, #8]
     bcc:	60da      	str	r2, [r3, #12]
	gotAccess=false;
     bce:	f884 60cd 	strb.w	r6, [r4, #205]	; 0xcd
}
     bd2:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bd8:	20001080 	.word	0x20001080
     bdc:	0000e5b5 	.word	0x0000e5b5
     be0:	000007f9 	.word	0x000007f9
     be4:	0000e6a1 	.word	0x0000e6a1
     be8:	000002f1 	.word	0x000002f1
     bec:	00000b55 	.word	0x00000b55

00000bf0 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     bf0:	b510      	push	{r4, lr}
     bf2:	4c05      	ldr	r4, [pc, #20]	; (c08 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     bf4:	4620      	mov	r0, r4
     bf6:	4b05      	ldr	r3, [pc, #20]	; (c0c <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     bf8:	4798      	blx	r3
     bfa:	4a05      	ldr	r2, [pc, #20]	; (c10 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     bfc:	4905      	ldr	r1, [pc, #20]	; (c14 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     bfe:	4620      	mov	r0, r4
     c00:	4b05      	ldr	r3, [pc, #20]	; (c18 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     c02:	4798      	blx	r3
     c04:	bd10      	pop	{r4, pc}
     c06:	bf00      	nop
     c08:	20000678 	.word	0x20000678
     c0c:	00000865 	.word	0x00000865
     c10:	20000000 	.word	0x20000000
     c14:	00000819 	.word	0x00000819
     c18:	000126cd 	.word	0x000126cd

00000c1c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     c1c:	b538      	push	{r3, r4, r5, lr}
     c1e:	4605      	mov	r5, r0
     c20:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     c22:	4b05      	ldr	r3, [pc, #20]	; (c38 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     c24:	4798      	blx	r3
     c26:	f8a5 00d0 	strh.w	r0, [r5, #208]	; 0xd0
	usb.writeData(&header, sizeof(header));
     c2a:	2206      	movs	r2, #6
     c2c:	4621      	mov	r1, r4
     c2e:	4803      	ldr	r0, [pc, #12]	; (c3c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     c30:	4b03      	ldr	r3, [pc, #12]	; (c40 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     c32:	4798      	blx	r3
     c34:	bd38      	pop	{r3, r4, r5, pc}
     c36:	bf00      	nop
     c38:	00000b35 	.word	0x00000b35
     c3c:	20000fa8 	.word	0x20000fa8
     c40:	0000e05d 	.word	0x0000e05d

00000c44 <_ZN16Maintenance_Tool21CommandReadParametersEv>:
bool Maintenance_Tool::CommandReadParameters(){
     c44:	b538      	push	{r3, r4, r5, lr}
	 	bool	result(header.task == kGAINCommandReadParameters);
     c46:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     c4a:	2b48      	cmp	r3, #72	; 0x48
     c4c:	bf0c      	ite	eq
     c4e:	2501      	moveq	r5, #1
     c50:	2500      	movne	r5, #0
		if (result){
     c52:	d001      	beq.n	c58 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x14>
}
     c54:	4628      	mov	r0, r5
     c56:	bd38      	pop	{r3, r4, r5, pc}
     c58:	4604      	mov	r4, r0
			r=memory.ReadParameters(parameters);
     c5a:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
     c5e:	4812      	ldr	r0, [pc, #72]	; (ca8 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x64>)
     c60:	4b12      	ldr	r3, [pc, #72]	; (cac <_ZN16Maintenance_Tool21CommandReadParametersEv+0x68>)
     c62:	4798      	blx	r3
			 memcpy(localBuffer,(void*)&hm,n);
     c64:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     c68:	4a11      	ldr	r2, [pc, #68]	; (cb0 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x6c>)
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	2200      	movs	r2, #0
     c6e:	711a      	strb	r2, [r3, #4]
     c70:	715a      	strb	r2, [r3, #5]
			memcpy((uint8_t*)&localBuffer[n],(void*)&parameters,sizeof(UserParameters));
     c72:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     c76:	f8b4 20d4 	ldrh.w	r2, [r4, #212]	; 0xd4
     c7a:	80da      	strh	r2, [r3, #6]
			if (fvc.dataStruct.controlOutputs.iAlcFvStandAloneOut)
     c7c:	4b0d      	ldr	r3, [pc, #52]	; (cb4 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x70>)
     c7e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
     c82:	b15b      	cbz	r3, c9c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x58>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     c84:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     c88:	f894 20d5 	ldrb.w	r2, [r4, #213]	; 0xd5
     c8c:	721a      	strb	r2, [r3, #8]
			w=usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     c8e:	2240      	movs	r2, #64	; 0x40
     c90:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     c94:	4808      	ldr	r0, [pc, #32]	; (cb8 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x74>)
     c96:	4b09      	ldr	r3, [pc, #36]	; (cbc <_ZN16Maintenance_Tool21CommandReadParametersEv+0x78>)
     c98:	4798      	blx	r3
     c9a:	e7db      	b.n	c54 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x10>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     c9c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     ca0:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
     ca4:	721a      	strb	r2, [r3, #8]
     ca6:	e7f2      	b.n	c8e <_ZN16Maintenance_Tool21CommandReadParametersEv+0x4a>
     ca8:	20002534 	.word	0x20002534
     cac:	000105b9 	.word	0x000105b9
     cb0:	61626364 	.word	0x61626364
     cb4:	20001308 	.word	0x20001308
     cb8:	20000fa8 	.word	0x20000fa8
     cbc:	0000e0f5 	.word	0x0000e0f5

00000cc0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     cc2:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     cc6:	2b4a      	cmp	r3, #74	; 0x4a
     cc8:	bf0c      	ite	eq
     cca:	2501      	moveq	r5, #1
     ccc:	2500      	movne	r5, #0
	if (result){
     cce:	d001      	beq.n	cd4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     cd0:	4628      	mov	r0, r5
     cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cd4:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     cd6:	4f11      	ldr	r7, [pc, #68]	; (d1c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5c>)
     cd8:	4638      	mov	r0, r7
     cda:	4b11      	ldr	r3, [pc, #68]	; (d20 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     cdc:	4798      	blx	r3
     cde:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     ce0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     ce4:	4a0f      	ldr	r2, [pc, #60]	; (d24 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
     ce6:	601a      	str	r2, [r3, #0]
     ce8:	2200      	movs	r2, #0
     cea:	711a      	strb	r2, [r3, #4]
     cec:	224a      	movs	r2, #74	; 0x4a
     cee:	715a      	strb	r2, [r3, #5]
     cf0:	7198      	strb	r0, [r3, #6]
			if (!heater.heaterStatusChanged)
     cf2:	787b      	ldrb	r3, [r7, #1]
     cf4:	b15b      	cbz	r3, d0e <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4e>
			singleTaskMessage=singleTask;
     cf6:	4b0b      	ldr	r3, [pc, #44]	; (d24 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
     cf8:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
     cfc:	2200      	movs	r2, #0
     cfe:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
     d02:	234a      	movs	r3, #74	; 0x4a
     d04:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
     d08:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
     d0c:	e7e0      	b.n	cd0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d0e:	2240      	movs	r2, #64	; 0x40
     d10:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     d14:	4804      	ldr	r0, [pc, #16]	; (d28 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     d16:	4b05      	ldr	r3, [pc, #20]	; (d2c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
     d18:	4798      	blx	r3
     d1a:	e7ec      	b.n	cf6 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x36>
     d1c:	20001514 	.word	0x20001514
     d20:	000103d5 	.word	0x000103d5
     d24:	61626364 	.word	0x61626364
     d28:	20000fa8 	.word	0x20000fa8
     d2c:	0000e0f5 	.word	0x0000e0f5

00000d30 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv>:
bool Maintenance_Tool::CommandReadFlapperData(){
     d30:	b570      	push	{r4, r5, r6, lr}
	bool	result(header.task == kHVACReadPositionFlapperValve);
     d32:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     d36:	2b4e      	cmp	r3, #78	; 0x4e
     d38:	bf0c      	ite	eq
     d3a:	2501      	moveq	r5, #1
     d3c:	2500      	movne	r5, #0
	if (result){
     d3e:	d001      	beq.n	d44 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x14>
}
     d40:	4628      	mov	r0, r5
     d42:	bd70      	pop	{r4, r5, r6, pc}
     d44:	4604      	mov	r4, r0
		fvc.UpdateFlapperValveData();
     d46:	4e0f      	ldr	r6, [pc, #60]	; (d84 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x54>)
     d48:	4630      	mov	r0, r6
     d4a:	4b0f      	ldr	r3, [pc, #60]	; (d88 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x58>)
     d4c:	4798      	blx	r3
		CreateFullBufferMessage(localBuffer,(uint8_t*)&fvc.dataStruct);
     d4e:	6823      	ldr	r3, [r4, #0]
     d50:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     d54:	f106 027c 	add.w	r2, r6, #124	; 0x7c
     d58:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     d5c:	4420      	add	r0, r4
     d5e:	4b0b      	ldr	r3, [pc, #44]	; (d8c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x5c>)
     d60:	4798      	blx	r3
			usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d62:	2240      	movs	r2, #64	; 0x40
     d64:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     d68:	4809      	ldr	r0, [pc, #36]	; (d90 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x60>)
     d6a:	4b0a      	ldr	r3, [pc, #40]	; (d94 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x64>)
     d6c:	4798      	blx	r3
		singleTaskMessage=singleTask;
     d6e:	4b0a      	ldr	r3, [pc, #40]	; (d98 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x68>)
     d70:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
     d74:	2300      	movs	r3, #0
     d76:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
     d7a:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
     d7e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
     d82:	e7dd      	b.n	d40 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x10>
     d84:	20001308 	.word	0x20001308
     d88:	0000fb89 	.word	0x0000fb89
     d8c:	000007c1 	.word	0x000007c1
     d90:	20000fa8 	.word	0x20000fa8
     d94:	0000e0f5 	.word	0x0000e0f5
     d98:	61626364 	.word	0x61626364

00000d9c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     da0:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     da4:	2b4d      	cmp	r3, #77	; 0x4d
     da6:	bf0c      	ite	eq
     da8:	2501      	moveq	r5, #1
     daa:	2500      	movne	r5, #0
	if (result){
     dac:	d002      	beq.n	db4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
     dae:	4628      	mov	r0, r5
     db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
     db4:	4b18      	ldr	r3, [pc, #96]	; (e18 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     db6:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     dba:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     dbe:	4a17      	ldr	r2, [pc, #92]	; (e1c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     dc0:	601a      	str	r2, [r3, #0]
     dc2:	2200      	movs	r2, #0
     dc4:	711a      	strb	r2, [r3, #4]
     dc6:	224d      	movs	r2, #77	; 0x4d
     dc8:	715a      	strb	r2, [r3, #5]
     dca:	f883 8006 	strb.w	r8, [r3, #6]
     dce:	2307      	movs	r3, #7
     dd0:	4911      	ldr	r1, [pc, #68]	; (e18 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     dd2:	f103 0261 	add.w	r2, r3, #97	; 0x61
     dd6:	440a      	add	r2, r1
     dd8:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
     ddc:	f852 4f04 	ldr.w	r4, [r2, #4]!
     de0:	f8d0 60fc 	ldr.w	r6, [r0, #252]	; 0xfc
     de4:	50f4      	str	r4, [r6, r3]
     de6:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
     de8:	42bb      	cmp	r3, r7
     dea:	d1f7      	bne.n	ddc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
     dec:	2b37      	cmp	r3, #55	; 0x37
     dee:	d1f0      	bne.n	dd2 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
     df0:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     df2:	2240      	movs	r2, #64	; 0x40
     df4:	f8d0 10fc 	ldr.w	r1, [r0, #252]	; 0xfc
     df8:	4809      	ldr	r0, [pc, #36]	; (e20 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
     dfa:	4b0a      	ldr	r3, [pc, #40]	; (e24 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
     dfc:	4798      	blx	r3
		singleTaskMessage=singleTask;
     dfe:	4b07      	ldr	r3, [pc, #28]	; (e1c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     e00:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
     e04:	2200      	movs	r2, #0
     e06:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
     e0a:	234d      	movs	r3, #77	; 0x4d
     e0c:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
     e10:	f884 80f8 	strb.w	r8, [r4, #248]	; 0xf8
     e14:	e7cb      	b.n	dae <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
     e16:	bf00      	nop
     e18:	20007904 	.word	0x20007904
     e1c:	61626364 	.word	0x61626364
     e20:	20000fa8 	.word	0x20000fa8
     e24:	0000e0f5 	.word	0x0000e0f5

00000e28 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     e28:	b570      	push	{r4, r5, r6, lr}
     e2a:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     e2c:	f100 0568 	add.w	r5, r0, #104	; 0x68
     e30:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     e34:	681a      	ldr	r2, [r3, #0]
     e36:	6682      	str	r2, [r0, #104]	; 0x68
     e38:	889b      	ldrh	r3, [r3, #4]
     e3a:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
     e3c:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     e40:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     e42:	b2db      	uxtb	r3, r3
     e44:	2b16      	cmp	r3, #22
     e46:	d817      	bhi.n	e78 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x50>
		gotTask=true;
     e48:	2301      	movs	r3, #1
     e4a:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
		result=gotTask;
     e4e:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
		switch (header.task)
     e52:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
     e56:	3b41      	subs	r3, #65	; 0x41
     e58:	2b16      	cmp	r3, #22
     e5a:	d878      	bhi.n	f4e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x126>
     e5c:	e8df f003 	tbb	[pc, r3]
     e60:	2c1c261f 	.word	0x2c1c261f
     e64:	3b351c1c 	.word	0x3b351c1c
     e68:	534d4741 	.word	0x534d4741
     e6c:	716b655f 	.word	0x716b655f
     e70:	1c1c1c59 	.word	0x1c1c1c59
     e74:	7777      	.short	0x7777
     e76:	1c          	.byte	0x1c
     e77:	00          	.byte	0x00
		gotTask=false;
     e78:	2300      	movs	r3, #0
     e7a:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     e7e:	4e36      	ldr	r6, [pc, #216]	; (f58 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
     e80:	2240      	movs	r2, #64	; 0x40
     e82:	f100 01fc 	add.w	r1, r0, #252	; 0xfc
     e86:	4630      	mov	r0, r6
     e88:	4b34      	ldr	r3, [pc, #208]	; (f5c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
     e8a:	4798      	blx	r3
		result=usb.rxReady;
     e8c:	7d73      	ldrb	r3, [r6, #21]
     e8e:	b2db      	uxtb	r3, r3
     e90:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (result)
     e94:	2b00      	cmp	r3, #0
     e96:	d1dc      	bne.n	e52 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2a>
	}
     e98:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     e9c:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     e9e:	4629      	mov	r1, r5
     ea0:	4620      	mov	r0, r4
     ea2:	4b2f      	ldr	r3, [pc, #188]	; (f60 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
     ea4:	4798      	blx	r3
     ea6:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     eaa:	e7f5      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
	maintenanceIsConnected = false;
     eac:	2300      	movs	r3, #0
     eae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	bSendNotifications = false;
     eb2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
				break;
     eb6:	e7ef      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				notifyGAINCommandReceived( header, result);
     eb8:	2201      	movs	r2, #1
     eba:	4629      	mov	r1, r5
     ebc:	4620      	mov	r0, r4
     ebe:	4b29      	ldr	r3, [pc, #164]	; (f64 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
     ec0:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     ec2:	2301      	movs	r3, #1
     ec4:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
     ec8:	e7e6      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandWriteParameters();
     eca:	4620      	mov	r0, r4
     ecc:	4b26      	ldr	r3, [pc, #152]	; (f68 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
     ece:	4798      	blx	r3
     ed0:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     ed4:	e7e0      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadParameters();
     ed6:	4620      	mov	r0, r4
     ed8:	4b24      	ldr	r3, [pc, #144]	; (f6c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
     eda:	4798      	blx	r3
     edc:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     ee0:	e7da      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetHeaters();
     ee2:	4620      	mov	r0, r4
     ee4:	4b22      	ldr	r3, [pc, #136]	; (f70 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
     ee6:	4798      	blx	r3
     ee8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     eec:	e7d4      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadHeaterStatus();
     eee:	4620      	mov	r0, r4
     ef0:	4b20      	ldr	r3, [pc, #128]	; (f74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
     ef2:	4798      	blx	r3
     ef4:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     ef8:	e7ce      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetEnableFans();
     efa:	4620      	mov	r0, r4
     efc:	4b1e      	ldr	r3, [pc, #120]	; (f78 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
     efe:	4798      	blx	r3
     f00:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f04:	e7c8      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetPWMFans();
     f06:	4620      	mov	r0, r4
     f08:	4b1c      	ldr	r3, [pc, #112]	; (f7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
     f0a:	4798      	blx	r3
     f0c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f10:	e7c2      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandFansStatus();
     f12:	4620      	mov	r0, r4
     f14:	4b1a      	ldr	r3, [pc, #104]	; (f80 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
     f16:	4798      	blx	r3
     f18:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f1c:	e7bc      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadTemmperatures();
     f1e:	4620      	mov	r0, r4
     f20:	4b18      	ldr	r3, [pc, #96]	; (f84 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
     f22:	4798      	blx	r3
     f24:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f28:	e7b6      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadFlapperData();
     f2a:	4620      	mov	r0, r4
     f2c:	4b16      	ldr	r3, [pc, #88]	; (f88 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
     f2e:	4798      	blx	r3
     f30:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f34:	e7b0      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperValve();
     f36:	4620      	mov	r0, r4
     f38:	4b14      	ldr	r3, [pc, #80]	; (f8c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
     f3a:	4798      	blx	r3
     f3c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f40:	e7aa      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperPosition();
     f42:	4620      	mov	r0, r4
     f44:	4b12      	ldr	r3, [pc, #72]	; (f90 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
     f46:	4798      	blx	r3
     f48:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f4c:	e7a4      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = false;
     f4e:	2300      	movs	r3, #0
     f50:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
     f54:	e7a0      	b.n	e98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
     f56:	bf00      	nop
     f58:	20000fa8 	.word	0x20000fa8
     f5c:	0000df71 	.word	0x0000df71
     f60:	000009b5 	.word	0x000009b5
     f64:	00000c1d 	.word	0x00000c1d
     f68:	000009cd 	.word	0x000009cd
     f6c:	00000c45 	.word	0x00000c45
     f70:	000009fd 	.word	0x000009fd
     f74:	00000cc1 	.word	0x00000cc1
     f78:	00000379 	.word	0x00000379
     f7c:	000003a5 	.word	0x000003a5
     f80:	000003f1 	.word	0x000003f1
     f84:	00000d9d 	.word	0x00000d9d
     f88:	00000d31 	.word	0x00000d31
     f8c:	00000a6d 	.word	0x00000a6d
     f90:	00000ab9 	.word	0x00000ab9

00000f94 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f96:	4604      	mov	r4, r0
	result=false;
     f98:	2300      	movs	r3, #0
     f9a:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	if (gotAccess)
     f9e:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
     fa2:	2b00      	cmp	r3, #0
     fa4:	d04c      	beq.n	1040 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     fa6:	4b28      	ldr	r3, [pc, #160]	; (1048 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     fa8:	7d5b      	ldrb	r3, [r3, #21]
     faa:	b95b      	cbnz	r3, fc4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
     fac:	2300      	movs	r3, #0
     fae:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     fb2:	2240      	movs	r2, #64	; 0x40
     fb4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     fb8:	4823      	ldr	r0, [pc, #140]	; (1048 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     fba:	4b24      	ldr	r3, [pc, #144]	; (104c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     fbc:	4798      	blx	r3
	}
     fbe:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     fc4:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     fc8:	681a      	ldr	r2, [r3, #0]
     fca:	6682      	str	r2, [r0, #104]	; 0x68
     fcc:	889b      	ldrh	r3, [r3, #4]
     fce:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
			switch (input){
     fd2:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
     fd6:	2b3d      	cmp	r3, #61	; 0x3d
     fd8:	d017      	beq.n	100a <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     fda:	2b3e      	cmp	r3, #62	; 0x3e
     fdc:	d010      	beq.n	1000 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     fde:	2b3c      	cmp	r3, #60	; 0x3c
     fe0:	d003      	beq.n	fea <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     fe2:	2300      	movs	r3, #0
     fe4:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
				break;
     fe8:	e006      	b.n	ff8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     fea:	2301      	movs	r3, #1
     fec:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
					result = handleHVACTask();
     ff0:	4b17      	ldr	r3, [pc, #92]	; (1050 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     ff2:	4798      	blx	r3
     ff4:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
			ClearLocalBuffer();
     ff8:	4620      	mov	r0, r4
     ffa:	4b16      	ldr	r3, [pc, #88]	; (1054 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     ffc:	4798      	blx	r3
     ffe:	e7d8      	b.n	fb2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    1000:	4b13      	ldr	r3, [pc, #76]	; (1050 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    1002:	4798      	blx	r3
    1004:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
    1008:	e7f6      	b.n	ff8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
    100a:	2501      	movs	r5, #1
    100c:	7505      	strb	r5, [r0, #20]
					interfaceTimer.Stop();
    100e:	4e12      	ldr	r6, [pc, #72]	; (1058 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1010:	4630      	mov	r0, r6
    1012:	4b12      	ldr	r3, [pc, #72]	; (105c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    1014:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    1016:	4f12      	ldr	r7, [pc, #72]	; (1060 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    1018:	4639      	mov	r1, r7
    101a:	4630      	mov	r0, r6
    101c:	4b11      	ldr	r3, [pc, #68]	; (1064 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    101e:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    1020:	f242 7210 	movw	r2, #10000	; 0x2710
    1024:	4639      	mov	r1, r7
    1026:	4630      	mov	r0, r6
    1028:	4b0f      	ldr	r3, [pc, #60]	; (1068 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    102a:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    102c:	2300      	movs	r3, #0
    102e:	61a3      	str	r3, [r4, #24]
					maintenanceIsConnected = true;
    1030:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
					bSendNotifications = true;
    1034:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
					result=is_MTPC_Beaming;
    1038:	7d23      	ldrb	r3, [r4, #20]
    103a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
    103e:	e7db      	b.n	ff8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
    1040:	2300      	movs	r3, #0
    1042:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
    1046:	e7ba      	b.n	fbe <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    1048:	20000fa8 	.word	0x20000fa8
    104c:	0000df71 	.word	0x0000df71
    1050:	00000e29 	.word	0x00000e29
    1054:	00000999 	.word	0x00000999
    1058:	20001080 	.word	0x20001080
    105c:	0000e611 	.word	0x0000e611
    1060:	00000809 	.word	0x00000809
    1064:	0000e755 	.word	0x0000e755
    1068:	0000e6f1 	.word	0x0000e6f1

0000106c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    106c:	b580      	push	{r7, lr}
    106e:	af00      	add	r7, sp, #0
	system_init();
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <atmel_start_init+0x14>)
    1072:	4798      	blx	r3
	usb_init();
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <atmel_start_init+0x18>)
    1076:	4798      	blx	r3
	spi_nor_flash_init();
    1078:	4b03      	ldr	r3, [pc, #12]	; (1088 <atmel_start_init+0x1c>)
    107a:	4798      	blx	r3
}
    107c:	bf00      	nop
    107e:	bd80      	pop	{r7, pc}
    1080:	000023f5 	.word	0x000023f5
    1084:	0000b9c1 	.word	0x0000b9c1
    1088:	0000b955 	.word	0x0000b955

0000108c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    108c:	b480      	push	{r7}
    108e:	b085      	sub	sp, #20
    1090:	af00      	add	r7, sp, #0
    1092:	60f8      	str	r0, [r7, #12]
    1094:	460b      	mov	r3, r1
    1096:	607a      	str	r2, [r7, #4]
    1098:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    109a:	7afa      	ldrb	r2, [r7, #11]
    109c:	68fb      	ldr	r3, [r7, #12]
    109e:	3220      	adds	r2, #32
    10a0:	6879      	ldr	r1, [r7, #4]
    10a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    10a6:	bf00      	nop
    10a8:	3714      	adds	r7, #20
    10aa:	46bd      	mov	sp, r7
    10ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    10b0:	4770      	bx	lr

000010b2 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    10b2:	b480      	push	{r7}
    10b4:	b083      	sub	sp, #12
    10b6:	af00      	add	r7, sp, #0
    10b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	691b      	ldr	r3, [r3, #16]
    10be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    10c2:	687b      	ldr	r3, [r7, #4]
    10c4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10c6:	bf00      	nop
    10c8:	370c      	adds	r7, #12
    10ca:	46bd      	mov	sp, r7
    10cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10d0:	4770      	bx	lr

000010d2 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    10d2:	b480      	push	{r7}
    10d4:	b083      	sub	sp, #12
    10d6:	af00      	add	r7, sp, #0
    10d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	691b      	ldr	r3, [r3, #16]
    10de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10e6:	bf00      	nop
    10e8:	370c      	adds	r7, #12
    10ea:	46bd      	mov	sp, r7
    10ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    10f0:	4770      	bx	lr

000010f2 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    10f2:	b480      	push	{r7}
    10f4:	b083      	sub	sp, #12
    10f6:	af00      	add	r7, sp, #0
    10f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	691b      	ldr	r3, [r3, #16]
    10fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1106:	bf00      	nop
    1108:	370c      	adds	r7, #12
    110a:	46bd      	mov	sp, r7
    110c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1110:	4770      	bx	lr

00001112 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    1112:	b480      	push	{r7}
    1114:	b083      	sub	sp, #12
    1116:	af00      	add	r7, sp, #0
    1118:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    111a:	687b      	ldr	r3, [r7, #4]
    111c:	691b      	ldr	r3, [r3, #16]
    111e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1126:	bf00      	nop
    1128:	370c      	adds	r7, #12
    112a:	46bd      	mov	sp, r7
    112c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1130:	4770      	bx	lr

00001132 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    1132:	b480      	push	{r7}
    1134:	b083      	sub	sp, #12
    1136:	af00      	add	r7, sp, #0
    1138:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	695b      	ldr	r3, [r3, #20]
    113e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    1142:	687b      	ldr	r3, [r7, #4]
    1144:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1146:	bf00      	nop
    1148:	370c      	adds	r7, #12
    114a:	46bd      	mov	sp, r7
    114c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1150:	4770      	bx	lr

00001152 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    1152:	b480      	push	{r7}
    1154:	b083      	sub	sp, #12
    1156:	af00      	add	r7, sp, #0
    1158:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    115a:	687b      	ldr	r3, [r7, #4]
    115c:	695b      	ldr	r3, [r3, #20]
    115e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    1162:	687b      	ldr	r3, [r7, #4]
    1164:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1166:	bf00      	nop
    1168:	370c      	adds	r7, #12
    116a:	46bd      	mov	sp, r7
    116c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1170:	4770      	bx	lr

00001172 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    1172:	b480      	push	{r7}
    1174:	b083      	sub	sp, #12
    1176:	af00      	add	r7, sp, #0
    1178:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    117a:	687b      	ldr	r3, [r7, #4]
    117c:	695b      	ldr	r3, [r3, #20]
    117e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1182:	687b      	ldr	r3, [r7, #4]
    1184:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1186:	bf00      	nop
    1188:	370c      	adds	r7, #12
    118a:	46bd      	mov	sp, r7
    118c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1190:	4770      	bx	lr

00001192 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    1192:	b480      	push	{r7}
    1194:	b083      	sub	sp, #12
    1196:	af00      	add	r7, sp, #0
    1198:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    119a:	687b      	ldr	r3, [r7, #4]
    119c:	695b      	ldr	r3, [r3, #20]
    119e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11a6:	bf00      	nop
    11a8:	370c      	adds	r7, #12
    11aa:	46bd      	mov	sp, r7
    11ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    11b0:	4770      	bx	lr

000011b2 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    11b2:	b480      	push	{r7}
    11b4:	b083      	sub	sp, #12
    11b6:	af00      	add	r7, sp, #0
    11b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    11ba:	687b      	ldr	r3, [r7, #4]
    11bc:	695b      	ldr	r3, [r3, #20]
    11be:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11c6:	bf00      	nop
    11c8:	370c      	adds	r7, #12
    11ca:	46bd      	mov	sp, r7
    11cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    11d0:	4770      	bx	lr

000011d2 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    11d2:	b480      	push	{r7}
    11d4:	b083      	sub	sp, #12
    11d6:	af00      	add	r7, sp, #0
    11d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	699b      	ldr	r3, [r3, #24]
    11de:	f043 0201 	orr.w	r2, r3, #1
    11e2:	687b      	ldr	r3, [r7, #4]
    11e4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11e6:	bf00      	nop
    11e8:	370c      	adds	r7, #12
    11ea:	46bd      	mov	sp, r7
    11ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    11f0:	4770      	bx	lr

000011f2 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    11f2:	b480      	push	{r7}
    11f4:	b083      	sub	sp, #12
    11f6:	af00      	add	r7, sp, #0
    11f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    11fa:	687b      	ldr	r3, [r7, #4]
    11fc:	699b      	ldr	r3, [r3, #24]
    11fe:	f043 0202 	orr.w	r2, r3, #2
    1202:	687b      	ldr	r3, [r7, #4]
    1204:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1206:	bf00      	nop
    1208:	370c      	adds	r7, #12
    120a:	46bd      	mov	sp, r7
    120c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1210:	4770      	bx	lr

00001212 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    1212:	b480      	push	{r7}
    1214:	b083      	sub	sp, #12
    1216:	af00      	add	r7, sp, #0
    1218:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    121a:	687b      	ldr	r3, [r7, #4]
    121c:	699b      	ldr	r3, [r3, #24]
    121e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    1222:	687b      	ldr	r3, [r7, #4]
    1224:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1226:	bf00      	nop
    1228:	370c      	adds	r7, #12
    122a:	46bd      	mov	sp, r7
    122c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1230:	4770      	bx	lr

00001232 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    1232:	b480      	push	{r7}
    1234:	b083      	sub	sp, #12
    1236:	af00      	add	r7, sp, #0
    1238:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	699b      	ldr	r3, [r3, #24]
    123e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    1242:	687b      	ldr	r3, [r7, #4]
    1244:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1246:	bf00      	nop
    1248:	370c      	adds	r7, #12
    124a:	46bd      	mov	sp, r7
    124c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1250:	4770      	bx	lr

00001252 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    1252:	b480      	push	{r7}
    1254:	b083      	sub	sp, #12
    1256:	af00      	add	r7, sp, #0
    1258:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	699b      	ldr	r3, [r3, #24]
    125e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    1262:	687b      	ldr	r3, [r7, #4]
    1264:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1266:	bf00      	nop
    1268:	370c      	adds	r7, #12
    126a:	46bd      	mov	sp, r7
    126c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1270:	4770      	bx	lr

00001272 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    1272:	b480      	push	{r7}
    1274:	b083      	sub	sp, #12
    1276:	af00      	add	r7, sp, #0
    1278:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    127a:	687b      	ldr	r3, [r7, #4]
    127c:	699b      	ldr	r3, [r3, #24]
    127e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1282:	687b      	ldr	r3, [r7, #4]
    1284:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1286:	bf00      	nop
    1288:	370c      	adds	r7, #12
    128a:	46bd      	mov	sp, r7
    128c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1290:	4770      	bx	lr

00001292 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1292:	b480      	push	{r7}
    1294:	b083      	sub	sp, #12
    1296:	af00      	add	r7, sp, #0
    1298:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	69db      	ldr	r3, [r3, #28]
    129e:	f043 0220 	orr.w	r2, r3, #32
    12a2:	687b      	ldr	r3, [r7, #4]
    12a4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12a6:	bf00      	nop
    12a8:	370c      	adds	r7, #12
    12aa:	46bd      	mov	sp, r7
    12ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b0:	4770      	bx	lr

000012b2 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    12b2:	b480      	push	{r7}
    12b4:	b083      	sub	sp, #12
    12b6:	af00      	add	r7, sp, #0
    12b8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    12ba:	687b      	ldr	r3, [r7, #4]
    12bc:	69db      	ldr	r3, [r3, #28]
    12be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12c6:	bf00      	nop
    12c8:	370c      	adds	r7, #12
    12ca:	46bd      	mov	sp, r7
    12cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    12d0:	4770      	bx	lr

000012d2 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    12d2:	b480      	push	{r7}
    12d4:	b083      	sub	sp, #12
    12d6:	af00      	add	r7, sp, #0
    12d8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	69db      	ldr	r3, [r3, #28]
    12de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12e6:	bf00      	nop
    12e8:	370c      	adds	r7, #12
    12ea:	46bd      	mov	sp, r7
    12ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    12f0:	4770      	bx	lr

000012f2 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    12f2:	b480      	push	{r7}
    12f4:	b083      	sub	sp, #12
    12f6:	af00      	add	r7, sp, #0
    12f8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	6a1b      	ldr	r3, [r3, #32]
    12fe:	f043 0201 	orr.w	r2, r3, #1
    1302:	687b      	ldr	r3, [r7, #4]
    1304:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1306:	bf00      	nop
    1308:	370c      	adds	r7, #12
    130a:	46bd      	mov	sp, r7
    130c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1310:	4770      	bx	lr

00001312 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1312:	b480      	push	{r7}
    1314:	b083      	sub	sp, #12
    1316:	af00      	add	r7, sp, #0
    1318:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    131a:	687b      	ldr	r3, [r7, #4]
    131c:	6a1b      	ldr	r3, [r3, #32]
    131e:	f043 0202 	orr.w	r2, r3, #2
    1322:	687b      	ldr	r3, [r7, #4]
    1324:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1326:	bf00      	nop
    1328:	370c      	adds	r7, #12
    132a:	46bd      	mov	sp, r7
    132c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1330:	4770      	bx	lr

00001332 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1332:	b480      	push	{r7}
    1334:	b083      	sub	sp, #12
    1336:	af00      	add	r7, sp, #0
    1338:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    133a:	687b      	ldr	r3, [r7, #4]
    133c:	6a1b      	ldr	r3, [r3, #32]
    133e:	f043 0204 	orr.w	r2, r3, #4
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1346:	bf00      	nop
    1348:	370c      	adds	r7, #12
    134a:	46bd      	mov	sp, r7
    134c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1350:	4770      	bx	lr

00001352 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    1352:	b480      	push	{r7}
    1354:	b083      	sub	sp, #12
    1356:	af00      	add	r7, sp, #0
    1358:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	6a1b      	ldr	r3, [r3, #32]
    135e:	f043 0208 	orr.w	r2, r3, #8
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1366:	bf00      	nop
    1368:	370c      	adds	r7, #12
    136a:	46bd      	mov	sp, r7
    136c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1370:	4770      	bx	lr

00001372 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    1372:	b480      	push	{r7}
    1374:	b083      	sub	sp, #12
    1376:	af00      	add	r7, sp, #0
    1378:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	6a1b      	ldr	r3, [r3, #32]
    137e:	f043 0220 	orr.w	r2, r3, #32
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1386:	bf00      	nop
    1388:	370c      	adds	r7, #12
    138a:	46bd      	mov	sp, r7
    138c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1390:	4770      	bx	lr

00001392 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    1392:	b480      	push	{r7}
    1394:	b083      	sub	sp, #12
    1396:	af00      	add	r7, sp, #0
    1398:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	6a1b      	ldr	r3, [r3, #32]
    139e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13a6:	bf00      	nop
    13a8:	370c      	adds	r7, #12
    13aa:	46bd      	mov	sp, r7
    13ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    13b0:	4770      	bx	lr

000013b2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    13b2:	b480      	push	{r7}
    13b4:	b085      	sub	sp, #20
    13b6:	af00      	add	r7, sp, #0
    13b8:	60f8      	str	r0, [r7, #12]
    13ba:	460b      	mov	r3, r1
    13bc:	607a      	str	r2, [r7, #4]
    13be:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13c0:	7afb      	ldrb	r3, [r7, #11]
    13c2:	68fa      	ldr	r2, [r7, #12]
    13c4:	01db      	lsls	r3, r3, #7
    13c6:	4413      	add	r3, r2
    13c8:	3308      	adds	r3, #8
    13ca:	687a      	ldr	r2, [r7, #4]
    13cc:	601a      	str	r2, [r3, #0]
}
    13ce:	bf00      	nop
    13d0:	3714      	adds	r7, #20
    13d2:	46bd      	mov	sp, r7
    13d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13d8:	4770      	bx	lr

000013da <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    13da:	b480      	push	{r7}
    13dc:	b085      	sub	sp, #20
    13de:	af00      	add	r7, sp, #0
    13e0:	60f8      	str	r0, [r7, #12]
    13e2:	460b      	mov	r3, r1
    13e4:	607a      	str	r2, [r7, #4]
    13e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13e8:	7afb      	ldrb	r3, [r7, #11]
    13ea:	68fa      	ldr	r2, [r7, #12]
    13ec:	01db      	lsls	r3, r3, #7
    13ee:	4413      	add	r3, r2
    13f0:	3304      	adds	r3, #4
    13f2:	687a      	ldr	r2, [r7, #4]
    13f4:	601a      	str	r2, [r3, #0]
}
    13f6:	bf00      	nop
    13f8:	3714      	adds	r7, #20
    13fa:	46bd      	mov	sp, r7
    13fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1400:	4770      	bx	lr

00001402 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1402:	b480      	push	{r7}
    1404:	b085      	sub	sp, #20
    1406:	af00      	add	r7, sp, #0
    1408:	60f8      	str	r0, [r7, #12]
    140a:	460b      	mov	r3, r1
    140c:	607a      	str	r2, [r7, #4]
    140e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1410:	7afb      	ldrb	r3, [r7, #11]
    1412:	68fa      	ldr	r2, [r7, #12]
    1414:	01db      	lsls	r3, r3, #7
    1416:	4413      	add	r3, r2
    1418:	3318      	adds	r3, #24
    141a:	687a      	ldr	r2, [r7, #4]
    141c:	601a      	str	r2, [r3, #0]
}
    141e:	bf00      	nop
    1420:	3714      	adds	r7, #20
    1422:	46bd      	mov	sp, r7
    1424:	f85d 7b04 	ldr.w	r7, [sp], #4
    1428:	4770      	bx	lr

0000142a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    142a:	b480      	push	{r7}
    142c:	b085      	sub	sp, #20
    142e:	af00      	add	r7, sp, #0
    1430:	60f8      	str	r0, [r7, #12]
    1432:	460b      	mov	r3, r1
    1434:	607a      	str	r2, [r7, #4]
    1436:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1438:	7afb      	ldrb	r3, [r7, #11]
    143a:	68fa      	ldr	r2, [r7, #12]
    143c:	01db      	lsls	r3, r3, #7
    143e:	4413      	add	r3, r2
    1440:	3314      	adds	r3, #20
    1442:	687a      	ldr	r2, [r7, #4]
    1444:	601a      	str	r2, [r3, #0]
}
    1446:	bf00      	nop
    1448:	3714      	adds	r7, #20
    144a:	46bd      	mov	sp, r7
    144c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1450:	4770      	bx	lr

00001452 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1452:	b480      	push	{r7}
    1454:	b085      	sub	sp, #20
    1456:	af00      	add	r7, sp, #0
    1458:	6078      	str	r0, [r7, #4]
    145a:	4608      	mov	r0, r1
    145c:	4611      	mov	r1, r2
    145e:	461a      	mov	r2, r3
    1460:	4603      	mov	r3, r0
    1462:	70fb      	strb	r3, [r7, #3]
    1464:	460b      	mov	r3, r1
    1466:	70bb      	strb	r3, [r7, #2]
    1468:	4613      	mov	r3, r2
    146a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    146c:	78fa      	ldrb	r2, [r7, #3]
    146e:	78bb      	ldrb	r3, [r7, #2]
    1470:	6879      	ldr	r1, [r7, #4]
    1472:	01d2      	lsls	r2, r2, #7
    1474:	440a      	add	r2, r1
    1476:	4413      	add	r3, r2
    1478:	3330      	adds	r3, #48	; 0x30
    147a:	781b      	ldrb	r3, [r3, #0]
    147c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    147e:	7bfb      	ldrb	r3, [r7, #15]
    1480:	f023 030f 	bic.w	r3, r3, #15
    1484:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1486:	787b      	ldrb	r3, [r7, #1]
    1488:	f003 030f 	and.w	r3, r3, #15
    148c:	b2da      	uxtb	r2, r3
    148e:	7bfb      	ldrb	r3, [r7, #15]
    1490:	4313      	orrs	r3, r2
    1492:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1494:	78fa      	ldrb	r2, [r7, #3]
    1496:	78bb      	ldrb	r3, [r7, #2]
    1498:	6879      	ldr	r1, [r7, #4]
    149a:	01d2      	lsls	r2, r2, #7
    149c:	440a      	add	r2, r1
    149e:	4413      	add	r3, r2
    14a0:	3330      	adds	r3, #48	; 0x30
    14a2:	7bfa      	ldrb	r2, [r7, #15]
    14a4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    14a6:	bf00      	nop
    14a8:	3714      	adds	r7, #20
    14aa:	46bd      	mov	sp, r7
    14ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b0:	4770      	bx	lr

000014b2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    14b2:	b480      	push	{r7}
    14b4:	b085      	sub	sp, #20
    14b6:	af00      	add	r7, sp, #0
    14b8:	6078      	str	r0, [r7, #4]
    14ba:	4608      	mov	r0, r1
    14bc:	4611      	mov	r1, r2
    14be:	461a      	mov	r2, r3
    14c0:	4603      	mov	r3, r0
    14c2:	70fb      	strb	r3, [r7, #3]
    14c4:	460b      	mov	r3, r1
    14c6:	70bb      	strb	r3, [r7, #2]
    14c8:	4613      	mov	r3, r2
    14ca:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    14cc:	78fa      	ldrb	r2, [r7, #3]
    14ce:	78bb      	ldrb	r3, [r7, #2]
    14d0:	6879      	ldr	r1, [r7, #4]
    14d2:	01d2      	lsls	r2, r2, #7
    14d4:	440a      	add	r2, r1
    14d6:	4413      	add	r3, r2
    14d8:	3330      	adds	r3, #48	; 0x30
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    14de:	7bfb      	ldrb	r3, [r7, #15]
    14e0:	f003 030f 	and.w	r3, r3, #15
    14e4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    14e6:	787b      	ldrb	r3, [r7, #1]
    14e8:	011b      	lsls	r3, r3, #4
    14ea:	b2da      	uxtb	r2, r3
    14ec:	7bfb      	ldrb	r3, [r7, #15]
    14ee:	4313      	orrs	r3, r2
    14f0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14f2:	78fa      	ldrb	r2, [r7, #3]
    14f4:	78bb      	ldrb	r3, [r7, #2]
    14f6:	6879      	ldr	r1, [r7, #4]
    14f8:	01d2      	lsls	r2, r2, #7
    14fa:	440a      	add	r2, r1
    14fc:	4413      	add	r3, r2
    14fe:	3330      	adds	r3, #48	; 0x30
    1500:	7bfa      	ldrb	r2, [r7, #15]
    1502:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1504:	bf00      	nop
    1506:	3714      	adds	r7, #20
    1508:	46bd      	mov	sp, r7
    150a:	f85d 7b04 	ldr.w	r7, [sp], #4
    150e:	4770      	bx	lr

00001510 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1510:	b480      	push	{r7}
    1512:	b085      	sub	sp, #20
    1514:	af00      	add	r7, sp, #0
    1516:	6078      	str	r0, [r7, #4]
    1518:	4608      	mov	r0, r1
    151a:	4611      	mov	r1, r2
    151c:	461a      	mov	r2, r3
    151e:	4603      	mov	r3, r0
    1520:	70fb      	strb	r3, [r7, #3]
    1522:	460b      	mov	r3, r1
    1524:	70bb      	strb	r3, [r7, #2]
    1526:	4613      	mov	r3, r2
    1528:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    152a:	78fa      	ldrb	r2, [r7, #3]
    152c:	78bb      	ldrb	r3, [r7, #2]
    152e:	6879      	ldr	r1, [r7, #4]
    1530:	01d2      	lsls	r2, r2, #7
    1532:	440a      	add	r2, r1
    1534:	4413      	add	r3, r2
    1536:	3340      	adds	r3, #64	; 0x40
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    153c:	7bfb      	ldrb	r3, [r7, #15]
    153e:	f023 0301 	bic.w	r3, r3, #1
    1542:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1544:	787a      	ldrb	r2, [r7, #1]
    1546:	7bfb      	ldrb	r3, [r7, #15]
    1548:	4313      	orrs	r3, r2
    154a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    154c:	78fa      	ldrb	r2, [r7, #3]
    154e:	78bb      	ldrb	r3, [r7, #2]
    1550:	6879      	ldr	r1, [r7, #4]
    1552:	01d2      	lsls	r2, r2, #7
    1554:	440a      	add	r2, r1
    1556:	4413      	add	r3, r2
    1558:	3340      	adds	r3, #64	; 0x40
    155a:	7bfa      	ldrb	r2, [r7, #15]
    155c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    155e:	bf00      	nop
    1560:	3714      	adds	r7, #20
    1562:	46bd      	mov	sp, r7
    1564:	f85d 7b04 	ldr.w	r7, [sp], #4
    1568:	4770      	bx	lr

0000156a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    156a:	b490      	push	{r4, r7}
    156c:	b082      	sub	sp, #8
    156e:	af00      	add	r7, sp, #0
    1570:	6078      	str	r0, [r7, #4]
    1572:	460b      	mov	r3, r1
    1574:	70fb      	strb	r3, [r7, #3]
    1576:	4613      	mov	r3, r2
    1578:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    157a:	78fa      	ldrb	r2, [r7, #3]
    157c:	78bb      	ldrb	r3, [r7, #2]
    157e:	78f8      	ldrb	r0, [r7, #3]
    1580:	78b9      	ldrb	r1, [r7, #2]
    1582:	687c      	ldr	r4, [r7, #4]
    1584:	01c0      	lsls	r0, r0, #7
    1586:	4420      	add	r0, r4
    1588:	4401      	add	r1, r0
    158a:	3140      	adds	r1, #64	; 0x40
    158c:	7809      	ldrb	r1, [r1, #0]
    158e:	b2c9      	uxtb	r1, r1
    1590:	f041 0104 	orr.w	r1, r1, #4
    1594:	b2c8      	uxtb	r0, r1
    1596:	6879      	ldr	r1, [r7, #4]
    1598:	01d2      	lsls	r2, r2, #7
    159a:	440a      	add	r2, r1
    159c:	4413      	add	r3, r2
    159e:	3340      	adds	r3, #64	; 0x40
    15a0:	4602      	mov	r2, r0
    15a2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    15a4:	bf00      	nop
    15a6:	3708      	adds	r7, #8
    15a8:	46bd      	mov	sp, r7
    15aa:	bc90      	pop	{r4, r7}
    15ac:	4770      	bx	lr

000015ae <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    15ae:	b490      	push	{r4, r7}
    15b0:	b082      	sub	sp, #8
    15b2:	af00      	add	r7, sp, #0
    15b4:	6078      	str	r0, [r7, #4]
    15b6:	460b      	mov	r3, r1
    15b8:	70fb      	strb	r3, [r7, #3]
    15ba:	4613      	mov	r3, r2
    15bc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    15be:	78fa      	ldrb	r2, [r7, #3]
    15c0:	78bb      	ldrb	r3, [r7, #2]
    15c2:	78f8      	ldrb	r0, [r7, #3]
    15c4:	78b9      	ldrb	r1, [r7, #2]
    15c6:	687c      	ldr	r4, [r7, #4]
    15c8:	01c0      	lsls	r0, r0, #7
    15ca:	4420      	add	r0, r4
    15cc:	4401      	add	r1, r0
    15ce:	3140      	adds	r1, #64	; 0x40
    15d0:	7809      	ldrb	r1, [r1, #0]
    15d2:	b2c9      	uxtb	r1, r1
    15d4:	f021 0104 	bic.w	r1, r1, #4
    15d8:	b2c8      	uxtb	r0, r1
    15da:	6879      	ldr	r1, [r7, #4]
    15dc:	01d2      	lsls	r2, r2, #7
    15de:	440a      	add	r2, r1
    15e0:	4413      	add	r3, r2
    15e2:	3340      	adds	r3, #64	; 0x40
    15e4:	4602      	mov	r2, r0
    15e6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    15e8:	bf00      	nop
    15ea:	3708      	adds	r7, #8
    15ec:	46bd      	mov	sp, r7
    15ee:	bc90      	pop	{r4, r7}
    15f0:	4770      	bx	lr

000015f2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    15f2:	b480      	push	{r7}
    15f4:	b085      	sub	sp, #20
    15f6:	af00      	add	r7, sp, #0
    15f8:	60f8      	str	r0, [r7, #12]
    15fa:	460b      	mov	r3, r1
    15fc:	607a      	str	r2, [r7, #4]
    15fe:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1600:	7afb      	ldrb	r3, [r7, #11]
    1602:	68fa      	ldr	r2, [r7, #12]
    1604:	01db      	lsls	r3, r3, #7
    1606:	4413      	add	r3, r2
    1608:	3328      	adds	r3, #40	; 0x28
    160a:	687a      	ldr	r2, [r7, #4]
    160c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    160e:	bf00      	nop
    1610:	3714      	adds	r7, #20
    1612:	46bd      	mov	sp, r7
    1614:	f85d 7b04 	ldr.w	r7, [sp], #4
    1618:	4770      	bx	lr
	...

0000161c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    161c:	b580      	push	{r7, lr}
    161e:	b082      	sub	sp, #8
    1620:	af00      	add	r7, sp, #0
    1622:	4603      	mov	r3, r0
    1624:	6039      	str	r1, [r7, #0]
    1626:	71fb      	strb	r3, [r7, #7]
    1628:	4613      	mov	r3, r2
    162a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    162c:	79bb      	ldrb	r3, [r7, #6]
    162e:	2b01      	cmp	r3, #1
    1630:	d01c      	beq.n	166c <_gpio_set_direction+0x50>
    1632:	2b02      	cmp	r3, #2
    1634:	d037      	beq.n	16a6 <_gpio_set_direction+0x8a>
    1636:	2b00      	cmp	r3, #0
    1638:	d14e      	bne.n	16d8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    163a:	79fb      	ldrb	r3, [r7, #7]
    163c:	683a      	ldr	r2, [r7, #0]
    163e:	4619      	mov	r1, r3
    1640:	482a      	ldr	r0, [pc, #168]	; (16ec <_gpio_set_direction+0xd0>)
    1642:	4b2b      	ldr	r3, [pc, #172]	; (16f0 <_gpio_set_direction+0xd4>)
    1644:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1646:	683b      	ldr	r3, [r7, #0]
    1648:	b29b      	uxth	r3, r3
    164a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    164e:	79fb      	ldrb	r3, [r7, #7]
    1650:	4619      	mov	r1, r3
    1652:	4826      	ldr	r0, [pc, #152]	; (16ec <_gpio_set_direction+0xd0>)
    1654:	4b27      	ldr	r3, [pc, #156]	; (16f4 <_gpio_set_direction+0xd8>)
    1656:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1658:	683b      	ldr	r3, [r7, #0]
    165a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    165c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1660:	79fb      	ldrb	r3, [r7, #7]
    1662:	4619      	mov	r1, r3
    1664:	4821      	ldr	r0, [pc, #132]	; (16ec <_gpio_set_direction+0xd0>)
    1666:	4b23      	ldr	r3, [pc, #140]	; (16f4 <_gpio_set_direction+0xd8>)
    1668:	4798      	blx	r3
		break;
    166a:	e03a      	b.n	16e2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    166c:	79fb      	ldrb	r3, [r7, #7]
    166e:	683a      	ldr	r2, [r7, #0]
    1670:	4619      	mov	r1, r3
    1672:	481e      	ldr	r0, [pc, #120]	; (16ec <_gpio_set_direction+0xd0>)
    1674:	4b1e      	ldr	r3, [pc, #120]	; (16f0 <_gpio_set_direction+0xd4>)
    1676:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1678:	683b      	ldr	r3, [r7, #0]
    167a:	b29b      	uxth	r3, r3
    167c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1684:	79f9      	ldrb	r1, [r7, #7]
    1686:	461a      	mov	r2, r3
    1688:	4818      	ldr	r0, [pc, #96]	; (16ec <_gpio_set_direction+0xd0>)
    168a:	4b1a      	ldr	r3, [pc, #104]	; (16f4 <_gpio_set_direction+0xd8>)
    168c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    168e:	683b      	ldr	r3, [r7, #0]
    1690:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    169a:	79f9      	ldrb	r1, [r7, #7]
    169c:	461a      	mov	r2, r3
    169e:	4813      	ldr	r0, [pc, #76]	; (16ec <_gpio_set_direction+0xd0>)
    16a0:	4b14      	ldr	r3, [pc, #80]	; (16f4 <_gpio_set_direction+0xd8>)
    16a2:	4798      	blx	r3
		break;
    16a4:	e01d      	b.n	16e2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    16a6:	79fb      	ldrb	r3, [r7, #7]
    16a8:	683a      	ldr	r2, [r7, #0]
    16aa:	4619      	mov	r1, r3
    16ac:	480f      	ldr	r0, [pc, #60]	; (16ec <_gpio_set_direction+0xd0>)
    16ae:	4b12      	ldr	r3, [pc, #72]	; (16f8 <_gpio_set_direction+0xdc>)
    16b0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    16b2:	683b      	ldr	r3, [r7, #0]
    16b4:	b29b      	uxth	r3, r3
    16b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    16ba:	79fb      	ldrb	r3, [r7, #7]
    16bc:	4619      	mov	r1, r3
    16be:	480b      	ldr	r0, [pc, #44]	; (16ec <_gpio_set_direction+0xd0>)
    16c0:	4b0c      	ldr	r3, [pc, #48]	; (16f4 <_gpio_set_direction+0xd8>)
    16c2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    16c4:	683b      	ldr	r3, [r7, #0]
    16c6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    16c8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    16cc:	79fb      	ldrb	r3, [r7, #7]
    16ce:	4619      	mov	r1, r3
    16d0:	4806      	ldr	r0, [pc, #24]	; (16ec <_gpio_set_direction+0xd0>)
    16d2:	4b08      	ldr	r3, [pc, #32]	; (16f4 <_gpio_set_direction+0xd8>)
    16d4:	4798      	blx	r3
		break;
    16d6:	e004      	b.n	16e2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    16d8:	2246      	movs	r2, #70	; 0x46
    16da:	4908      	ldr	r1, [pc, #32]	; (16fc <_gpio_set_direction+0xe0>)
    16dc:	2000      	movs	r0, #0
    16de:	4b08      	ldr	r3, [pc, #32]	; (1700 <_gpio_set_direction+0xe4>)
    16e0:	4798      	blx	r3
	}
}
    16e2:	bf00      	nop
    16e4:	3708      	adds	r7, #8
    16e6:	46bd      	mov	sp, r7
    16e8:	bd80      	pop	{r7, pc}
    16ea:	bf00      	nop
    16ec:	41008000 	.word	0x41008000
    16f0:	000013db 	.word	0x000013db
    16f4:	000015f3 	.word	0x000015f3
    16f8:	000013b3 	.word	0x000013b3
    16fc:	0001305c 	.word	0x0001305c
    1700:	00003df5 	.word	0x00003df5

00001704 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1704:	b580      	push	{r7, lr}
    1706:	b082      	sub	sp, #8
    1708:	af00      	add	r7, sp, #0
    170a:	4603      	mov	r3, r0
    170c:	6039      	str	r1, [r7, #0]
    170e:	71fb      	strb	r3, [r7, #7]
    1710:	4613      	mov	r3, r2
    1712:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1714:	79bb      	ldrb	r3, [r7, #6]
    1716:	2b00      	cmp	r3, #0
    1718:	d006      	beq.n	1728 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    171a:	79fb      	ldrb	r3, [r7, #7]
    171c:	683a      	ldr	r2, [r7, #0]
    171e:	4619      	mov	r1, r3
    1720:	4806      	ldr	r0, [pc, #24]	; (173c <_gpio_set_level+0x38>)
    1722:	4b07      	ldr	r3, [pc, #28]	; (1740 <_gpio_set_level+0x3c>)
    1724:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1726:	e005      	b.n	1734 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1728:	79fb      	ldrb	r3, [r7, #7]
    172a:	683a      	ldr	r2, [r7, #0]
    172c:	4619      	mov	r1, r3
    172e:	4803      	ldr	r0, [pc, #12]	; (173c <_gpio_set_level+0x38>)
    1730:	4b04      	ldr	r3, [pc, #16]	; (1744 <_gpio_set_level+0x40>)
    1732:	4798      	blx	r3
}
    1734:	bf00      	nop
    1736:	3708      	adds	r7, #8
    1738:	46bd      	mov	sp, r7
    173a:	bd80      	pop	{r7, pc}
    173c:	41008000 	.word	0x41008000
    1740:	00001403 	.word	0x00001403
    1744:	0000142b 	.word	0x0000142b

00001748 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1748:	b580      	push	{r7, lr}
    174a:	b082      	sub	sp, #8
    174c:	af00      	add	r7, sp, #0
    174e:	4603      	mov	r3, r0
    1750:	71fb      	strb	r3, [r7, #7]
    1752:	460b      	mov	r3, r1
    1754:	71bb      	strb	r3, [r7, #6]
    1756:	4613      	mov	r3, r2
    1758:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    175a:	797b      	ldrb	r3, [r7, #5]
    175c:	2b01      	cmp	r3, #1
    175e:	d00a      	beq.n	1776 <_gpio_set_pin_pull_mode+0x2e>
    1760:	2b02      	cmp	r3, #2
    1762:	d01f      	beq.n	17a4 <_gpio_set_pin_pull_mode+0x5c>
    1764:	2b00      	cmp	r3, #0
    1766:	d134      	bne.n	17d2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1768:	79ba      	ldrb	r2, [r7, #6]
    176a:	79fb      	ldrb	r3, [r7, #7]
    176c:	4619      	mov	r1, r3
    176e:	481e      	ldr	r0, [pc, #120]	; (17e8 <_gpio_set_pin_pull_mode+0xa0>)
    1770:	4b1e      	ldr	r3, [pc, #120]	; (17ec <_gpio_set_pin_pull_mode+0xa4>)
    1772:	4798      	blx	r3
		break;
    1774:	e033      	b.n	17de <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1776:	79bb      	ldrb	r3, [r7, #6]
    1778:	2201      	movs	r2, #1
    177a:	409a      	lsls	r2, r3
    177c:	79fb      	ldrb	r3, [r7, #7]
    177e:	4619      	mov	r1, r3
    1780:	4819      	ldr	r0, [pc, #100]	; (17e8 <_gpio_set_pin_pull_mode+0xa0>)
    1782:	4b1b      	ldr	r3, [pc, #108]	; (17f0 <_gpio_set_pin_pull_mode+0xa8>)
    1784:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1786:	79ba      	ldrb	r2, [r7, #6]
    1788:	79fb      	ldrb	r3, [r7, #7]
    178a:	4619      	mov	r1, r3
    178c:	4816      	ldr	r0, [pc, #88]	; (17e8 <_gpio_set_pin_pull_mode+0xa0>)
    178e:	4b19      	ldr	r3, [pc, #100]	; (17f4 <_gpio_set_pin_pull_mode+0xac>)
    1790:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1792:	79bb      	ldrb	r3, [r7, #6]
    1794:	2201      	movs	r2, #1
    1796:	409a      	lsls	r2, r3
    1798:	79fb      	ldrb	r3, [r7, #7]
    179a:	4619      	mov	r1, r3
    179c:	4812      	ldr	r0, [pc, #72]	; (17e8 <_gpio_set_pin_pull_mode+0xa0>)
    179e:	4b16      	ldr	r3, [pc, #88]	; (17f8 <_gpio_set_pin_pull_mode+0xb0>)
    17a0:	4798      	blx	r3
		break;
    17a2:	e01c      	b.n	17de <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    17a4:	79bb      	ldrb	r3, [r7, #6]
    17a6:	2201      	movs	r2, #1
    17a8:	409a      	lsls	r2, r3
    17aa:	79fb      	ldrb	r3, [r7, #7]
    17ac:	4619      	mov	r1, r3
    17ae:	480e      	ldr	r0, [pc, #56]	; (17e8 <_gpio_set_pin_pull_mode+0xa0>)
    17b0:	4b0f      	ldr	r3, [pc, #60]	; (17f0 <_gpio_set_pin_pull_mode+0xa8>)
    17b2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    17b4:	79ba      	ldrb	r2, [r7, #6]
    17b6:	79fb      	ldrb	r3, [r7, #7]
    17b8:	4619      	mov	r1, r3
    17ba:	480b      	ldr	r0, [pc, #44]	; (17e8 <_gpio_set_pin_pull_mode+0xa0>)
    17bc:	4b0d      	ldr	r3, [pc, #52]	; (17f4 <_gpio_set_pin_pull_mode+0xac>)
    17be:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    17c0:	79bb      	ldrb	r3, [r7, #6]
    17c2:	2201      	movs	r2, #1
    17c4:	409a      	lsls	r2, r3
    17c6:	79fb      	ldrb	r3, [r7, #7]
    17c8:	4619      	mov	r1, r3
    17ca:	4807      	ldr	r0, [pc, #28]	; (17e8 <_gpio_set_pin_pull_mode+0xa0>)
    17cc:	4b0b      	ldr	r3, [pc, #44]	; (17fc <_gpio_set_pin_pull_mode+0xb4>)
    17ce:	4798      	blx	r3
		break;
    17d0:	e005      	b.n	17de <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    17d2:	2289      	movs	r2, #137	; 0x89
    17d4:	490a      	ldr	r1, [pc, #40]	; (1800 <_gpio_set_pin_pull_mode+0xb8>)
    17d6:	2000      	movs	r0, #0
    17d8:	4b0a      	ldr	r3, [pc, #40]	; (1804 <_gpio_set_pin_pull_mode+0xbc>)
    17da:	4798      	blx	r3
		break;
    17dc:	bf00      	nop
	}
}
    17de:	bf00      	nop
    17e0:	3708      	adds	r7, #8
    17e2:	46bd      	mov	sp, r7
    17e4:	bd80      	pop	{r7, pc}
    17e6:	bf00      	nop
    17e8:	41008000 	.word	0x41008000
    17ec:	000015af 	.word	0x000015af
    17f0:	000013db 	.word	0x000013db
    17f4:	0000156b 	.word	0x0000156b
    17f8:	00001403 	.word	0x00001403
    17fc:	0000142b 	.word	0x0000142b
    1800:	0001305c 	.word	0x0001305c
    1804:	00003df5 	.word	0x00003df5

00001808 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1808:	b590      	push	{r4, r7, lr}
    180a:	b085      	sub	sp, #20
    180c:	af00      	add	r7, sp, #0
    180e:	6078      	str	r0, [r7, #4]
    1810:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	095b      	lsrs	r3, r3, #5
    1816:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	b2db      	uxtb	r3, r3
    181c:	f003 031f 	and.w	r3, r3, #31
    1820:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1822:	683b      	ldr	r3, [r7, #0]
    1824:	f1b3 3fff 	cmp.w	r3, #4294967295
    1828:	d106      	bne.n	1838 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    182a:	7bba      	ldrb	r2, [r7, #14]
    182c:	7bf9      	ldrb	r1, [r7, #15]
    182e:	2300      	movs	r3, #0
    1830:	4812      	ldr	r0, [pc, #72]	; (187c <_gpio_set_pin_function+0x74>)
    1832:	4c13      	ldr	r4, [pc, #76]	; (1880 <_gpio_set_pin_function+0x78>)
    1834:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1836:	e01d      	b.n	1874 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1838:	7bba      	ldrb	r2, [r7, #14]
    183a:	7bf9      	ldrb	r1, [r7, #15]
    183c:	2301      	movs	r3, #1
    183e:	480f      	ldr	r0, [pc, #60]	; (187c <_gpio_set_pin_function+0x74>)
    1840:	4c0f      	ldr	r4, [pc, #60]	; (1880 <_gpio_set_pin_function+0x78>)
    1842:	47a0      	blx	r4
		if (pin & 1) {
    1844:	7bbb      	ldrb	r3, [r7, #14]
    1846:	f003 0301 	and.w	r3, r3, #1
    184a:	2b00      	cmp	r3, #0
    184c:	d009      	beq.n	1862 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    184e:	7bbb      	ldrb	r3, [r7, #14]
    1850:	085b      	lsrs	r3, r3, #1
    1852:	b2da      	uxtb	r2, r3
    1854:	683b      	ldr	r3, [r7, #0]
    1856:	b2db      	uxtb	r3, r3
    1858:	7bf9      	ldrb	r1, [r7, #15]
    185a:	4808      	ldr	r0, [pc, #32]	; (187c <_gpio_set_pin_function+0x74>)
    185c:	4c09      	ldr	r4, [pc, #36]	; (1884 <_gpio_set_pin_function+0x7c>)
    185e:	47a0      	blx	r4
}
    1860:	e008      	b.n	1874 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1862:	7bbb      	ldrb	r3, [r7, #14]
    1864:	085b      	lsrs	r3, r3, #1
    1866:	b2da      	uxtb	r2, r3
    1868:	683b      	ldr	r3, [r7, #0]
    186a:	b2db      	uxtb	r3, r3
    186c:	7bf9      	ldrb	r1, [r7, #15]
    186e:	4803      	ldr	r0, [pc, #12]	; (187c <_gpio_set_pin_function+0x74>)
    1870:	4c05      	ldr	r4, [pc, #20]	; (1888 <_gpio_set_pin_function+0x80>)
    1872:	47a0      	blx	r4
}
    1874:	bf00      	nop
    1876:	3714      	adds	r7, #20
    1878:	46bd      	mov	sp, r7
    187a:	bd90      	pop	{r4, r7, pc}
    187c:	41008000 	.word	0x41008000
    1880:	00001511 	.word	0x00001511
    1884:	000014b3 	.word	0x000014b3
    1888:	00001453 	.word	0x00001453

0000188c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    188c:	b580      	push	{r7, lr}
    188e:	b082      	sub	sp, #8
    1890:	af00      	add	r7, sp, #0
    1892:	4603      	mov	r3, r0
    1894:	460a      	mov	r2, r1
    1896:	71fb      	strb	r3, [r7, #7]
    1898:	4613      	mov	r3, r2
    189a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    189c:	79fb      	ldrb	r3, [r7, #7]
    189e:	095b      	lsrs	r3, r3, #5
    18a0:	b2d8      	uxtb	r0, r3
    18a2:	79fb      	ldrb	r3, [r7, #7]
    18a4:	f003 031f 	and.w	r3, r3, #31
    18a8:	b2db      	uxtb	r3, r3
    18aa:	79ba      	ldrb	r2, [r7, #6]
    18ac:	4619      	mov	r1, r3
    18ae:	4b03      	ldr	r3, [pc, #12]	; (18bc <gpio_set_pin_pull_mode+0x30>)
    18b0:	4798      	blx	r3
}
    18b2:	bf00      	nop
    18b4:	3708      	adds	r7, #8
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop
    18bc:	00001749 	.word	0x00001749

000018c0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	b082      	sub	sp, #8
    18c4:	af00      	add	r7, sp, #0
    18c6:	6078      	str	r0, [r7, #4]
    18c8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    18ca:	6839      	ldr	r1, [r7, #0]
    18cc:	6878      	ldr	r0, [r7, #4]
    18ce:	4b03      	ldr	r3, [pc, #12]	; (18dc <gpio_set_pin_function+0x1c>)
    18d0:	4798      	blx	r3
}
    18d2:	bf00      	nop
    18d4:	3708      	adds	r7, #8
    18d6:	46bd      	mov	sp, r7
    18d8:	bd80      	pop	{r7, pc}
    18da:	bf00      	nop
    18dc:	00001809 	.word	0x00001809

000018e0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	4603      	mov	r3, r0
    18e8:	460a      	mov	r2, r1
    18ea:	71fb      	strb	r3, [r7, #7]
    18ec:	4613      	mov	r3, r2
    18ee:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    18f0:	79fb      	ldrb	r3, [r7, #7]
    18f2:	095b      	lsrs	r3, r3, #5
    18f4:	b2d8      	uxtb	r0, r3
    18f6:	79fb      	ldrb	r3, [r7, #7]
    18f8:	f003 031f 	and.w	r3, r3, #31
    18fc:	2201      	movs	r2, #1
    18fe:	fa02 f303 	lsl.w	r3, r2, r3
    1902:	79ba      	ldrb	r2, [r7, #6]
    1904:	4619      	mov	r1, r3
    1906:	4b03      	ldr	r3, [pc, #12]	; (1914 <gpio_set_pin_direction+0x34>)
    1908:	4798      	blx	r3
}
    190a:	bf00      	nop
    190c:	3708      	adds	r7, #8
    190e:	46bd      	mov	sp, r7
    1910:	bd80      	pop	{r7, pc}
    1912:	bf00      	nop
    1914:	0000161d 	.word	0x0000161d

00001918 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1918:	b580      	push	{r7, lr}
    191a:	b082      	sub	sp, #8
    191c:	af00      	add	r7, sp, #0
    191e:	4603      	mov	r3, r0
    1920:	460a      	mov	r2, r1
    1922:	71fb      	strb	r3, [r7, #7]
    1924:	4613      	mov	r3, r2
    1926:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1928:	79fb      	ldrb	r3, [r7, #7]
    192a:	095b      	lsrs	r3, r3, #5
    192c:	b2d8      	uxtb	r0, r3
    192e:	79fb      	ldrb	r3, [r7, #7]
    1930:	f003 031f 	and.w	r3, r3, #31
    1934:	2201      	movs	r2, #1
    1936:	fa02 f303 	lsl.w	r3, r2, r3
    193a:	79ba      	ldrb	r2, [r7, #6]
    193c:	4619      	mov	r1, r3
    193e:	4b03      	ldr	r3, [pc, #12]	; (194c <gpio_set_pin_level+0x34>)
    1940:	4798      	blx	r3
}
    1942:	bf00      	nop
    1944:	3708      	adds	r7, #8
    1946:	46bd      	mov	sp, r7
    1948:	bd80      	pop	{r7, pc}
    194a:	bf00      	nop
    194c:	00001705 	.word	0x00001705

00001950 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1950:	b580      	push	{r7, lr}
    1952:	af00      	add	r7, sp, #0
	_init_chip();
    1954:	4b01      	ldr	r3, [pc, #4]	; (195c <init_mcu+0xc>)
    1956:	4798      	blx	r3
}
    1958:	bf00      	nop
    195a:	bd80      	pop	{r7, pc}
    195c:	00004a05 	.word	0x00004a05

00001960 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1960:	b580      	push	{r7, lr}
    1962:	b082      	sub	sp, #8
    1964:	af00      	add	r7, sp, #0
    1966:	6078      	str	r0, [r7, #4]
    1968:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	2b00      	cmp	r3, #0
    196e:	d004      	beq.n	197a <wdt_init+0x1a>
    1970:	683b      	ldr	r3, [r7, #0]
    1972:	2b00      	cmp	r3, #0
    1974:	d001      	beq.n	197a <wdt_init+0x1a>
    1976:	2301      	movs	r3, #1
    1978:	e000      	b.n	197c <wdt_init+0x1c>
    197a:	2300      	movs	r3, #0
    197c:	f003 0301 	and.w	r3, r3, #1
    1980:	b2db      	uxtb	r3, r3
    1982:	2248      	movs	r2, #72	; 0x48
    1984:	4907      	ldr	r1, [pc, #28]	; (19a4 <wdt_init+0x44>)
    1986:	4618      	mov	r0, r3
    1988:	4b07      	ldr	r3, [pc, #28]	; (19a8 <wdt_init+0x48>)
    198a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	683a      	ldr	r2, [r7, #0]
    1990:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	4618      	mov	r0, r3
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <wdt_init+0x4c>)
    1998:	4798      	blx	r3
    199a:	4603      	mov	r3, r0
}
    199c:	4618      	mov	r0, r3
    199e:	3708      	adds	r7, #8
    19a0:	46bd      	mov	sp, r7
    19a2:	bd80      	pop	{r7, pc}
    19a4:	00013078 	.word	0x00013078
    19a8:	00003df5 	.word	0x00003df5
    19ac:	0000b3f9 	.word	0x0000b3f9

000019b0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    19b4:	4804      	ldr	r0, [pc, #16]	; (19c8 <CRC_CALC_init+0x18>)
    19b6:	4b05      	ldr	r3, [pc, #20]	; (19cc <CRC_CALC_init+0x1c>)
    19b8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    19ba:	4905      	ldr	r1, [pc, #20]	; (19d0 <CRC_CALC_init+0x20>)
    19bc:	4805      	ldr	r0, [pc, #20]	; (19d4 <CRC_CALC_init+0x24>)
    19be:	4b06      	ldr	r3, [pc, #24]	; (19d8 <CRC_CALC_init+0x28>)
    19c0:	4798      	blx	r3
}
    19c2:	bf00      	nop
    19c4:	bd80      	pop	{r7, pc}
    19c6:	bf00      	nop
    19c8:	40000800 	.word	0x40000800
    19cc:	000011f3 	.word	0x000011f3
    19d0:	41002000 	.word	0x41002000
    19d4:	20008004 	.word	0x20008004
    19d8:	00002739 	.word	0x00002739

000019dc <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    19dc:	b580      	push	{r7, lr}
    19de:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19e0:	2244      	movs	r2, #68	; 0x44
    19e2:	2104      	movs	r1, #4
    19e4:	483f      	ldr	r0, [pc, #252]	; (1ae4 <EXTERNAL_IRQ_0_init+0x108>)
    19e6:	4b40      	ldr	r3, [pc, #256]	; (1ae8 <EXTERNAL_IRQ_0_init+0x10c>)
    19e8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    19ea:	4840      	ldr	r0, [pc, #256]	; (1aec <EXTERNAL_IRQ_0_init+0x110>)
    19ec:	4b40      	ldr	r3, [pc, #256]	; (1af0 <EXTERNAL_IRQ_0_init+0x114>)
    19ee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    19f0:	2101      	movs	r1, #1
    19f2:	2040      	movs	r0, #64	; 0x40
    19f4:	4b3f      	ldr	r3, [pc, #252]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    19f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    19f8:	2100      	movs	r1, #0
    19fa:	2040      	movs	r0, #64	; 0x40
    19fc:	4b3e      	ldr	r3, [pc, #248]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    19fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1a00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1a04:	2040      	movs	r0, #64	; 0x40
    1a06:	4b3d      	ldr	r3, [pc, #244]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1a08:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1a0a:	2101      	movs	r1, #1
    1a0c:	2021      	movs	r0, #33	; 0x21
    1a0e:	4b39      	ldr	r3, [pc, #228]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1a10:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1a12:	2100      	movs	r1, #0
    1a14:	2021      	movs	r0, #33	; 0x21
    1a16:	4b38      	ldr	r3, [pc, #224]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1a18:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1a1a:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1a1e:	2021      	movs	r0, #33	; 0x21
    1a20:	4b36      	ldr	r3, [pc, #216]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1a22:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1a24:	2101      	movs	r1, #1
    1a26:	2003      	movs	r0, #3
    1a28:	4b32      	ldr	r3, [pc, #200]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1a2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1a2c:	2102      	movs	r1, #2
    1a2e:	2003      	movs	r0, #3
    1a30:	4b31      	ldr	r3, [pc, #196]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1a32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1a34:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1a38:	2003      	movs	r0, #3
    1a3a:	4b30      	ldr	r3, [pc, #192]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1a3c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1a3e:	2101      	movs	r1, #1
    1a40:	2004      	movs	r0, #4
    1a42:	4b2c      	ldr	r3, [pc, #176]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1a44:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1a46:	2102      	movs	r1, #2
    1a48:	2004      	movs	r0, #4
    1a4a:	4b2b      	ldr	r3, [pc, #172]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1a4c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1a4e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1a52:	2004      	movs	r0, #4
    1a54:	4b29      	ldr	r3, [pc, #164]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1a56:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1a58:	2101      	movs	r1, #1
    1a5a:	2005      	movs	r0, #5
    1a5c:	4b25      	ldr	r3, [pc, #148]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1a5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1a60:	2102      	movs	r1, #2
    1a62:	2005      	movs	r0, #5
    1a64:	4b24      	ldr	r3, [pc, #144]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1a66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1a68:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1a6c:	2005      	movs	r0, #5
    1a6e:	4b23      	ldr	r3, [pc, #140]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1a70:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1a72:	2101      	movs	r1, #1
    1a74:	2056      	movs	r0, #86	; 0x56
    1a76:	4b1f      	ldr	r3, [pc, #124]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1a78:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1a7a:	2102      	movs	r1, #2
    1a7c:	2056      	movs	r0, #86	; 0x56
    1a7e:	4b1e      	ldr	r3, [pc, #120]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1a80:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1a82:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1a86:	2056      	movs	r0, #86	; 0x56
    1a88:	4b1c      	ldr	r3, [pc, #112]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1a8a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1a8c:	2101      	movs	r1, #1
    1a8e:	2057      	movs	r0, #87	; 0x57
    1a90:	4b18      	ldr	r3, [pc, #96]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1a92:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1a94:	2102      	movs	r1, #2
    1a96:	2057      	movs	r0, #87	; 0x57
    1a98:	4b17      	ldr	r3, [pc, #92]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1a9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1a9c:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1aa0:	2057      	movs	r0, #87	; 0x57
    1aa2:	4b16      	ldr	r3, [pc, #88]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1aa4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1aa6:	2101      	movs	r1, #1
    1aa8:	2028      	movs	r0, #40	; 0x28
    1aaa:	4b12      	ldr	r3, [pc, #72]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1aac:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1aae:	2100      	movs	r1, #0
    1ab0:	2028      	movs	r0, #40	; 0x28
    1ab2:	4b11      	ldr	r3, [pc, #68]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1ab4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1ab6:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1aba:	2028      	movs	r0, #40	; 0x28
    1abc:	4b0f      	ldr	r3, [pc, #60]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1abe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1ac0:	2101      	movs	r1, #1
    1ac2:	2029      	movs	r0, #41	; 0x29
    1ac4:	4b0b      	ldr	r3, [pc, #44]	; (1af4 <EXTERNAL_IRQ_0_init+0x118>)
    1ac6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1ac8:	2100      	movs	r1, #0
    1aca:	2029      	movs	r0, #41	; 0x29
    1acc:	4b0a      	ldr	r3, [pc, #40]	; (1af8 <EXTERNAL_IRQ_0_init+0x11c>)
    1ace:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1ad0:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1ad4:	2029      	movs	r0, #41	; 0x29
    1ad6:	4b09      	ldr	r3, [pc, #36]	; (1afc <EXTERNAL_IRQ_0_init+0x120>)
    1ad8:	4798      	blx	r3

	ext_irq_init();
    1ada:	4b09      	ldr	r3, [pc, #36]	; (1b00 <EXTERNAL_IRQ_0_init+0x124>)
    1adc:	4798      	blx	r3
}
    1ade:	bf00      	nop
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	bf00      	nop
    1ae4:	40001c00 	.word	0x40001c00
    1ae8:	0000108d 	.word	0x0000108d
    1aec:	40000800 	.word	0x40000800
    1af0:	00001173 	.word	0x00001173
    1af4:	000018e1 	.word	0x000018e1
    1af8:	0000188d 	.word	0x0000188d
    1afc:	000018c1 	.word	0x000018c1
    1b00:	00002801 	.word	0x00002801

00001b04 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1b04:	b580      	push	{r7, lr}
    1b06:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b08:	2244      	movs	r2, #68	; 0x44
    1b0a:	210b      	movs	r1, #11
    1b0c:	4807      	ldr	r0, [pc, #28]	; (1b2c <EVENT_SYSTEM_0_init+0x28>)
    1b0e:	4b08      	ldr	r3, [pc, #32]	; (1b30 <EVENT_SYSTEM_0_init+0x2c>)
    1b10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b12:	2244      	movs	r2, #68	; 0x44
    1b14:	210c      	movs	r1, #12
    1b16:	4805      	ldr	r0, [pc, #20]	; (1b2c <EVENT_SYSTEM_0_init+0x28>)
    1b18:	4b05      	ldr	r3, [pc, #20]	; (1b30 <EVENT_SYSTEM_0_init+0x2c>)
    1b1a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1b1c:	4805      	ldr	r0, [pc, #20]	; (1b34 <EVENT_SYSTEM_0_init+0x30>)
    1b1e:	4b06      	ldr	r3, [pc, #24]	; (1b38 <EVENT_SYSTEM_0_init+0x34>)
    1b20:	4798      	blx	r3

	event_system_init();
    1b22:	4b06      	ldr	r3, [pc, #24]	; (1b3c <EVENT_SYSTEM_0_init+0x38>)
    1b24:	4798      	blx	r3
}
    1b26:	bf00      	nop
    1b28:	bd80      	pop	{r7, pc}
    1b2a:	bf00      	nop
    1b2c:	40001c00 	.word	0x40001c00
    1b30:	0000108d 	.word	0x0000108d
    1b34:	40000800 	.word	0x40000800
    1b38:	00001213 	.word	0x00001213
    1b3c:	000027ed 	.word	0x000027ed

00001b40 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1b44:	2101      	movs	r1, #1
    1b46:	202b      	movs	r0, #43	; 0x2b
    1b48:	4b2b      	ldr	r3, [pc, #172]	; (1bf8 <QSPI_N25Q256_PORT_init+0xb8>)
    1b4a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1b4c:	2100      	movs	r1, #0
    1b4e:	202b      	movs	r0, #43	; 0x2b
    1b50:	4b2a      	ldr	r3, [pc, #168]	; (1bfc <QSPI_N25Q256_PORT_init+0xbc>)
    1b52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1b54:	492a      	ldr	r1, [pc, #168]	; (1c00 <QSPI_N25Q256_PORT_init+0xc0>)
    1b56:	202b      	movs	r0, #43	; 0x2b
    1b58:	4b2a      	ldr	r3, [pc, #168]	; (1c04 <QSPI_N25Q256_PORT_init+0xc4>)
    1b5a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1b5c:	2102      	movs	r1, #2
    1b5e:	2008      	movs	r0, #8
    1b60:	4b25      	ldr	r3, [pc, #148]	; (1bf8 <QSPI_N25Q256_PORT_init+0xb8>)
    1b62:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1b64:	2100      	movs	r1, #0
    1b66:	2008      	movs	r0, #8
    1b68:	4b27      	ldr	r3, [pc, #156]	; (1c08 <QSPI_N25Q256_PORT_init+0xc8>)
    1b6a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1b6c:	2100      	movs	r1, #0
    1b6e:	2008      	movs	r0, #8
    1b70:	4b22      	ldr	r3, [pc, #136]	; (1bfc <QSPI_N25Q256_PORT_init+0xbc>)
    1b72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1b74:	4925      	ldr	r1, [pc, #148]	; (1c0c <QSPI_N25Q256_PORT_init+0xcc>)
    1b76:	2008      	movs	r0, #8
    1b78:	4b22      	ldr	r3, [pc, #136]	; (1c04 <QSPI_N25Q256_PORT_init+0xc4>)
    1b7a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1b7c:	2102      	movs	r1, #2
    1b7e:	2009      	movs	r0, #9
    1b80:	4b1d      	ldr	r3, [pc, #116]	; (1bf8 <QSPI_N25Q256_PORT_init+0xb8>)
    1b82:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1b84:	2100      	movs	r1, #0
    1b86:	2009      	movs	r0, #9
    1b88:	4b1f      	ldr	r3, [pc, #124]	; (1c08 <QSPI_N25Q256_PORT_init+0xc8>)
    1b8a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1b8c:	2100      	movs	r1, #0
    1b8e:	2009      	movs	r0, #9
    1b90:	4b1a      	ldr	r3, [pc, #104]	; (1bfc <QSPI_N25Q256_PORT_init+0xbc>)
    1b92:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1b94:	491e      	ldr	r1, [pc, #120]	; (1c10 <QSPI_N25Q256_PORT_init+0xd0>)
    1b96:	2009      	movs	r0, #9
    1b98:	4b1a      	ldr	r3, [pc, #104]	; (1c04 <QSPI_N25Q256_PORT_init+0xc4>)
    1b9a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1b9c:	2102      	movs	r1, #2
    1b9e:	200a      	movs	r0, #10
    1ba0:	4b15      	ldr	r3, [pc, #84]	; (1bf8 <QSPI_N25Q256_PORT_init+0xb8>)
    1ba2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1ba4:	2100      	movs	r1, #0
    1ba6:	200a      	movs	r0, #10
    1ba8:	4b17      	ldr	r3, [pc, #92]	; (1c08 <QSPI_N25Q256_PORT_init+0xc8>)
    1baa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1bac:	2100      	movs	r1, #0
    1bae:	200a      	movs	r0, #10
    1bb0:	4b12      	ldr	r3, [pc, #72]	; (1bfc <QSPI_N25Q256_PORT_init+0xbc>)
    1bb2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1bb4:	4917      	ldr	r1, [pc, #92]	; (1c14 <QSPI_N25Q256_PORT_init+0xd4>)
    1bb6:	200a      	movs	r0, #10
    1bb8:	4b12      	ldr	r3, [pc, #72]	; (1c04 <QSPI_N25Q256_PORT_init+0xc4>)
    1bba:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1bbc:	2102      	movs	r1, #2
    1bbe:	200b      	movs	r0, #11
    1bc0:	4b0d      	ldr	r3, [pc, #52]	; (1bf8 <QSPI_N25Q256_PORT_init+0xb8>)
    1bc2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1bc4:	2100      	movs	r1, #0
    1bc6:	200b      	movs	r0, #11
    1bc8:	4b0f      	ldr	r3, [pc, #60]	; (1c08 <QSPI_N25Q256_PORT_init+0xc8>)
    1bca:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1bcc:	2100      	movs	r1, #0
    1bce:	200b      	movs	r0, #11
    1bd0:	4b0a      	ldr	r3, [pc, #40]	; (1bfc <QSPI_N25Q256_PORT_init+0xbc>)
    1bd2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1bd4:	4910      	ldr	r1, [pc, #64]	; (1c18 <QSPI_N25Q256_PORT_init+0xd8>)
    1bd6:	200b      	movs	r0, #11
    1bd8:	4b0a      	ldr	r3, [pc, #40]	; (1c04 <QSPI_N25Q256_PORT_init+0xc4>)
    1bda:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1bdc:	2101      	movs	r1, #1
    1bde:	202a      	movs	r0, #42	; 0x2a
    1be0:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <QSPI_N25Q256_PORT_init+0xb8>)
    1be2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1be4:	2100      	movs	r1, #0
    1be6:	202a      	movs	r0, #42	; 0x2a
    1be8:	4b04      	ldr	r3, [pc, #16]	; (1bfc <QSPI_N25Q256_PORT_init+0xbc>)
    1bea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1bec:	490b      	ldr	r1, [pc, #44]	; (1c1c <QSPI_N25Q256_PORT_init+0xdc>)
    1bee:	202a      	movs	r0, #42	; 0x2a
    1bf0:	4b04      	ldr	r3, [pc, #16]	; (1c04 <QSPI_N25Q256_PORT_init+0xc4>)
    1bf2:	4798      	blx	r3
}
    1bf4:	bf00      	nop
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	000018e1 	.word	0x000018e1
    1bfc:	0000188d 	.word	0x0000188d
    1c00:	002b0007 	.word	0x002b0007
    1c04:	000018c1 	.word	0x000018c1
    1c08:	00001919 	.word	0x00001919
    1c0c:	00080007 	.word	0x00080007
    1c10:	00090007 	.word	0x00090007
    1c14:	000a0007 	.word	0x000a0007
    1c18:	000b0007 	.word	0x000b0007
    1c1c:	002a0007 	.word	0x002a0007

00001c20 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1c20:	b580      	push	{r7, lr}
    1c22:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1c24:	4805      	ldr	r0, [pc, #20]	; (1c3c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1c26:	4b06      	ldr	r3, [pc, #24]	; (1c40 <QSPI_N25Q256_CLOCK_init+0x20>)
    1c28:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1c2a:	4804      	ldr	r0, [pc, #16]	; (1c3c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1c2c:	4b05      	ldr	r3, [pc, #20]	; (1c44 <QSPI_N25Q256_CLOCK_init+0x24>)
    1c2e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1c30:	4802      	ldr	r0, [pc, #8]	; (1c3c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1c32:	4b05      	ldr	r3, [pc, #20]	; (1c48 <QSPI_N25Q256_CLOCK_init+0x28>)
    1c34:	4798      	blx	r3
}
    1c36:	bf00      	nop
    1c38:	bd80      	pop	{r7, pc}
    1c3a:	bf00      	nop
    1c3c:	40000800 	.word	0x40000800
    1c40:	000010d3 	.word	0x000010d3
    1c44:	00001113 	.word	0x00001113
    1c48:	000012d3 	.word	0x000012d3

00001c4c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1c4c:	b580      	push	{r7, lr}
    1c4e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1c50:	4b04      	ldr	r3, [pc, #16]	; (1c64 <QSPI_N25Q256_init+0x18>)
    1c52:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1c54:	4904      	ldr	r1, [pc, #16]	; (1c68 <QSPI_N25Q256_init+0x1c>)
    1c56:	4805      	ldr	r0, [pc, #20]	; (1c6c <QSPI_N25Q256_init+0x20>)
    1c58:	4b05      	ldr	r3, [pc, #20]	; (1c70 <QSPI_N25Q256_init+0x24>)
    1c5a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1c5c:	4b05      	ldr	r3, [pc, #20]	; (1c74 <QSPI_N25Q256_init+0x28>)
    1c5e:	4798      	blx	r3
}
    1c60:	bf00      	nop
    1c62:	bd80      	pop	{r7, pc}
    1c64:	00001c21 	.word	0x00001c21
    1c68:	42003400 	.word	0x42003400
    1c6c:	20007eb8 	.word	0x20007eb8
    1c70:	00002c51 	.word	0x00002c51
    1c74:	00001b41 	.word	0x00001b41

00001c78 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1c7c:	4802      	ldr	r0, [pc, #8]	; (1c88 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1c7e:	4b03      	ldr	r3, [pc, #12]	; (1c8c <DATETIME_CLOCK_CLOCK_init+0x14>)
    1c80:	4798      	blx	r3
}
    1c82:	bf00      	nop
    1c84:	bd80      	pop	{r7, pc}
    1c86:	bf00      	nop
    1c88:	40000800 	.word	0x40000800
    1c8c:	00001153 	.word	0x00001153

00001c90 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1c90:	b580      	push	{r7, lr}
    1c92:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1c94:	4b03      	ldr	r3, [pc, #12]	; (1ca4 <DATETIME_CLOCK_init+0x14>)
    1c96:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1c98:	4903      	ldr	r1, [pc, #12]	; (1ca8 <DATETIME_CLOCK_init+0x18>)
    1c9a:	4804      	ldr	r0, [pc, #16]	; (1cac <DATETIME_CLOCK_init+0x1c>)
    1c9c:	4b04      	ldr	r3, [pc, #16]	; (1cb0 <DATETIME_CLOCK_init+0x20>)
    1c9e:	4798      	blx	r3
}
    1ca0:	bf00      	nop
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	00001c79 	.word	0x00001c79
    1ca8:	40002400 	.word	0x40002400
    1cac:	20007fe0 	.word	0x20007fe0
    1cb0:	000025dd 	.word	0x000025dd

00001cb4 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1cb8:	2101      	movs	r1, #1
    1cba:	2010      	movs	r0, #16
    1cbc:	4b07      	ldr	r3, [pc, #28]	; (1cdc <I2C_HEATERS_PORT_init+0x28>)
    1cbe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1cc0:	4907      	ldr	r1, [pc, #28]	; (1ce0 <I2C_HEATERS_PORT_init+0x2c>)
    1cc2:	2010      	movs	r0, #16
    1cc4:	4b07      	ldr	r3, [pc, #28]	; (1ce4 <I2C_HEATERS_PORT_init+0x30>)
    1cc6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1cc8:	2101      	movs	r1, #1
    1cca:	2011      	movs	r0, #17
    1ccc:	4b03      	ldr	r3, [pc, #12]	; (1cdc <I2C_HEATERS_PORT_init+0x28>)
    1cce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1cd0:	4905      	ldr	r1, [pc, #20]	; (1ce8 <I2C_HEATERS_PORT_init+0x34>)
    1cd2:	2011      	movs	r0, #17
    1cd4:	4b03      	ldr	r3, [pc, #12]	; (1ce4 <I2C_HEATERS_PORT_init+0x30>)
    1cd6:	4798      	blx	r3
}
    1cd8:	bf00      	nop
    1cda:	bd80      	pop	{r7, pc}
    1cdc:	0000188d 	.word	0x0000188d
    1ce0:	00100002 	.word	0x00100002
    1ce4:	000018c1 	.word	0x000018c1
    1ce8:	00110002 	.word	0x00110002

00001cec <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cf0:	2242      	movs	r2, #66	; 0x42
    1cf2:	2108      	movs	r1, #8
    1cf4:	4806      	ldr	r0, [pc, #24]	; (1d10 <I2C_HEATERS_CLOCK_init+0x24>)
    1cf6:	4b07      	ldr	r3, [pc, #28]	; (1d14 <I2C_HEATERS_CLOCK_init+0x28>)
    1cf8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cfa:	224a      	movs	r2, #74	; 0x4a
    1cfc:	2103      	movs	r1, #3
    1cfe:	4804      	ldr	r0, [pc, #16]	; (1d10 <I2C_HEATERS_CLOCK_init+0x24>)
    1d00:	4b04      	ldr	r3, [pc, #16]	; (1d14 <I2C_HEATERS_CLOCK_init+0x28>)
    1d02:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1d04:	4804      	ldr	r0, [pc, #16]	; (1d18 <I2C_HEATERS_CLOCK_init+0x2c>)
    1d06:	4b05      	ldr	r3, [pc, #20]	; (1d1c <I2C_HEATERS_CLOCK_init+0x30>)
    1d08:	4798      	blx	r3
}
    1d0a:	bf00      	nop
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	bf00      	nop
    1d10:	40001c00 	.word	0x40001c00
    1d14:	0000108d 	.word	0x0000108d
    1d18:	40000800 	.word	0x40000800
    1d1c:	00001193 	.word	0x00001193

00001d20 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1d24:	4b04      	ldr	r3, [pc, #16]	; (1d38 <I2C_HEATERS_init+0x18>)
    1d26:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1d28:	4904      	ldr	r1, [pc, #16]	; (1d3c <I2C_HEATERS_init+0x1c>)
    1d2a:	4805      	ldr	r0, [pc, #20]	; (1d40 <I2C_HEATERS_init+0x20>)
    1d2c:	4b05      	ldr	r3, [pc, #20]	; (1d44 <I2C_HEATERS_init+0x24>)
    1d2e:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1d30:	4b05      	ldr	r3, [pc, #20]	; (1d48 <I2C_HEATERS_init+0x28>)
    1d32:	4798      	blx	r3
}
    1d34:	bf00      	nop
    1d36:	bd80      	pop	{r7, pc}
    1d38:	00001ced 	.word	0x00001ced
    1d3c:	40003400 	.word	0x40003400
    1d40:	20007f38 	.word	0x20007f38
    1d44:	00002ac9 	.word	0x00002ac9
    1d48:	00001cb5 	.word	0x00001cb5

00001d4c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1d50:	2100      	movs	r1, #0
    1d52:	203b      	movs	r0, #59	; 0x3b
    1d54:	4b11      	ldr	r3, [pc, #68]	; (1d9c <SPI_TEMP_PORT_init+0x50>)
    1d56:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1d58:	2102      	movs	r1, #2
    1d5a:	203b      	movs	r0, #59	; 0x3b
    1d5c:	4b10      	ldr	r3, [pc, #64]	; (1da0 <SPI_TEMP_PORT_init+0x54>)
    1d5e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1d60:	4910      	ldr	r1, [pc, #64]	; (1da4 <SPI_TEMP_PORT_init+0x58>)
    1d62:	203b      	movs	r0, #59	; 0x3b
    1d64:	4b10      	ldr	r3, [pc, #64]	; (1da8 <SPI_TEMP_PORT_init+0x5c>)
    1d66:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1d68:	2100      	movs	r1, #0
    1d6a:	203a      	movs	r0, #58	; 0x3a
    1d6c:	4b0b      	ldr	r3, [pc, #44]	; (1d9c <SPI_TEMP_PORT_init+0x50>)
    1d6e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1d70:	2102      	movs	r1, #2
    1d72:	203a      	movs	r0, #58	; 0x3a
    1d74:	4b0a      	ldr	r3, [pc, #40]	; (1da0 <SPI_TEMP_PORT_init+0x54>)
    1d76:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1d78:	490c      	ldr	r1, [pc, #48]	; (1dac <SPI_TEMP_PORT_init+0x60>)
    1d7a:	203a      	movs	r0, #58	; 0x3a
    1d7c:	4b0a      	ldr	r3, [pc, #40]	; (1da8 <SPI_TEMP_PORT_init+0x5c>)
    1d7e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1d80:	2101      	movs	r1, #1
    1d82:	203c      	movs	r0, #60	; 0x3c
    1d84:	4b06      	ldr	r3, [pc, #24]	; (1da0 <SPI_TEMP_PORT_init+0x54>)
    1d86:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1d88:	2100      	movs	r1, #0
    1d8a:	203c      	movs	r0, #60	; 0x3c
    1d8c:	4b08      	ldr	r3, [pc, #32]	; (1db0 <SPI_TEMP_PORT_init+0x64>)
    1d8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1d90:	4908      	ldr	r1, [pc, #32]	; (1db4 <SPI_TEMP_PORT_init+0x68>)
    1d92:	203c      	movs	r0, #60	; 0x3c
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <SPI_TEMP_PORT_init+0x5c>)
    1d96:	4798      	blx	r3
}
    1d98:	bf00      	nop
    1d9a:	bd80      	pop	{r7, pc}
    1d9c:	00001919 	.word	0x00001919
    1da0:	000018e1 	.word	0x000018e1
    1da4:	003b0003 	.word	0x003b0003
    1da8:	000018c1 	.word	0x000018c1
    1dac:	003a0003 	.word	0x003a0003
    1db0:	0000188d 	.word	0x0000188d
    1db4:	003c0003 	.word	0x003c0003

00001db8 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1db8:	b580      	push	{r7, lr}
    1dba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dbc:	2245      	movs	r2, #69	; 0x45
    1dbe:	2122      	movs	r1, #34	; 0x22
    1dc0:	4806      	ldr	r0, [pc, #24]	; (1ddc <SPI_TEMP_CLOCK_init+0x24>)
    1dc2:	4b07      	ldr	r3, [pc, #28]	; (1de0 <SPI_TEMP_CLOCK_init+0x28>)
    1dc4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dc6:	224a      	movs	r2, #74	; 0x4a
    1dc8:	2103      	movs	r1, #3
    1dca:	4804      	ldr	r0, [pc, #16]	; (1ddc <SPI_TEMP_CLOCK_init+0x24>)
    1dcc:	4b04      	ldr	r3, [pc, #16]	; (1de0 <SPI_TEMP_CLOCK_init+0x28>)
    1dce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1dd0:	4804      	ldr	r0, [pc, #16]	; (1de4 <SPI_TEMP_CLOCK_init+0x2c>)
    1dd2:	4b05      	ldr	r3, [pc, #20]	; (1de8 <SPI_TEMP_CLOCK_init+0x30>)
    1dd4:	4798      	blx	r3
}
    1dd6:	bf00      	nop
    1dd8:	bd80      	pop	{r7, pc}
    1dda:	bf00      	nop
    1ddc:	40001c00 	.word	0x40001c00
    1de0:	0000108d 	.word	0x0000108d
    1de4:	40000800 	.word	0x40000800
    1de8:	000012f3 	.word	0x000012f3

00001dec <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1dec:	b580      	push	{r7, lr}
    1dee:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1df0:	4b05      	ldr	r3, [pc, #20]	; (1e08 <SPI_TEMP_init+0x1c>)
    1df2:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1df4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1df8:	4804      	ldr	r0, [pc, #16]	; (1e0c <SPI_TEMP_init+0x20>)
    1dfa:	4b05      	ldr	r3, [pc, #20]	; (1e10 <SPI_TEMP_init+0x24>)
    1dfc:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1dfe:	4b05      	ldr	r3, [pc, #20]	; (1e14 <SPI_TEMP_init+0x28>)
    1e00:	4798      	blx	r3
}
    1e02:	bf00      	nop
    1e04:	bd80      	pop	{r7, pc}
    1e06:	bf00      	nop
    1e08:	00001db9 	.word	0x00001db9
    1e0c:	20007e60 	.word	0x20007e60
    1e10:	00002d61 	.word	0x00002d61
    1e14:	00001d4d 	.word	0x00001d4d

00001e18 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1e18:	b580      	push	{r7, lr}
    1e1a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1e1c:	2100      	movs	r1, #0
    1e1e:	2017      	movs	r0, #23
    1e20:	4b07      	ldr	r3, [pc, #28]	; (1e40 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1e22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1e24:	4907      	ldr	r1, [pc, #28]	; (1e44 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    1e26:	2017      	movs	r0, #23
    1e28:	4b07      	ldr	r3, [pc, #28]	; (1e48 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1e2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1e2c:	2100      	movs	r1, #0
    1e2e:	2016      	movs	r0, #22
    1e30:	4b03      	ldr	r3, [pc, #12]	; (1e40 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1e34:	4905      	ldr	r1, [pc, #20]	; (1e4c <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    1e36:	2016      	movs	r0, #22
    1e38:	4b03      	ldr	r3, [pc, #12]	; (1e48 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1e3a:	4798      	blx	r3
}
    1e3c:	bf00      	nop
    1e3e:	bd80      	pop	{r7, pc}
    1e40:	0000188d 	.word	0x0000188d
    1e44:	00170003 	.word	0x00170003
    1e48:	000018c1 	.word	0x000018c1
    1e4c:	00160003 	.word	0x00160003

00001e50 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1e50:	b580      	push	{r7, lr}
    1e52:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e54:	2244      	movs	r2, #68	; 0x44
    1e56:	2123      	movs	r1, #35	; 0x23
    1e58:	4806      	ldr	r0, [pc, #24]	; (1e74 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1e5a:	4b07      	ldr	r3, [pc, #28]	; (1e78 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1e5c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e5e:	224a      	movs	r2, #74	; 0x4a
    1e60:	2103      	movs	r1, #3
    1e62:	4804      	ldr	r0, [pc, #16]	; (1e74 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1e64:	4b04      	ldr	r3, [pc, #16]	; (1e78 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1e66:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1e68:	4804      	ldr	r0, [pc, #16]	; (1e7c <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1e6a:	4b05      	ldr	r3, [pc, #20]	; (1e80 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1e6c:	4798      	blx	r3
}
    1e6e:	bf00      	nop
    1e70:	bd80      	pop	{r7, pc}
    1e72:	bf00      	nop
    1e74:	40001c00 	.word	0x40001c00
    1e78:	0000108d 	.word	0x0000108d
    1e7c:	40000800 	.word	0x40000800
    1e80:	00001313 	.word	0x00001313

00001e84 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1e88:	4b04      	ldr	r3, [pc, #16]	; (1e9c <I2C_FLAPPER_VALVE_init+0x18>)
    1e8a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1e8c:	4904      	ldr	r1, [pc, #16]	; (1ea0 <I2C_FLAPPER_VALVE_init+0x1c>)
    1e8e:	4805      	ldr	r0, [pc, #20]	; (1ea4 <I2C_FLAPPER_VALVE_init+0x20>)
    1e90:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <I2C_FLAPPER_VALVE_init+0x24>)
    1e92:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1e94:	4b05      	ldr	r3, [pc, #20]	; (1eac <I2C_FLAPPER_VALVE_init+0x28>)
    1e96:	4798      	blx	r3
}
    1e98:	bf00      	nop
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	00001e51 	.word	0x00001e51
    1ea0:	43000400 	.word	0x43000400
    1ea4:	20007efc 	.word	0x20007efc
    1ea8:	00002ac9 	.word	0x00002ac9
    1eac:	00001e19 	.word	0x00001e19

00001eb0 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1eb0:	b580      	push	{r7, lr}
    1eb2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1eb4:	2100      	movs	r1, #0
    1eb6:	2044      	movs	r0, #68	; 0x44
    1eb8:	4b11      	ldr	r3, [pc, #68]	; (1f00 <SPI_HI3593_PORT_init+0x50>)
    1eba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1ebc:	2102      	movs	r1, #2
    1ebe:	2044      	movs	r0, #68	; 0x44
    1ec0:	4b10      	ldr	r3, [pc, #64]	; (1f04 <SPI_HI3593_PORT_init+0x54>)
    1ec2:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1ec4:	4910      	ldr	r1, [pc, #64]	; (1f08 <SPI_HI3593_PORT_init+0x58>)
    1ec6:	2044      	movs	r0, #68	; 0x44
    1ec8:	4b10      	ldr	r3, [pc, #64]	; (1f0c <SPI_HI3593_PORT_init+0x5c>)
    1eca:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1ecc:	2100      	movs	r1, #0
    1ece:	2045      	movs	r0, #69	; 0x45
    1ed0:	4b0b      	ldr	r3, [pc, #44]	; (1f00 <SPI_HI3593_PORT_init+0x50>)
    1ed2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1ed4:	2102      	movs	r1, #2
    1ed6:	2045      	movs	r0, #69	; 0x45
    1ed8:	4b0a      	ldr	r3, [pc, #40]	; (1f04 <SPI_HI3593_PORT_init+0x54>)
    1eda:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1edc:	490c      	ldr	r1, [pc, #48]	; (1f10 <SPI_HI3593_PORT_init+0x60>)
    1ede:	2045      	movs	r0, #69	; 0x45
    1ee0:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <SPI_HI3593_PORT_init+0x5c>)
    1ee2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1ee4:	2101      	movs	r1, #1
    1ee6:	2047      	movs	r0, #71	; 0x47
    1ee8:	4b06      	ldr	r3, [pc, #24]	; (1f04 <SPI_HI3593_PORT_init+0x54>)
    1eea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1eec:	2100      	movs	r1, #0
    1eee:	2047      	movs	r0, #71	; 0x47
    1ef0:	4b08      	ldr	r3, [pc, #32]	; (1f14 <SPI_HI3593_PORT_init+0x64>)
    1ef2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1ef4:	4908      	ldr	r1, [pc, #32]	; (1f18 <SPI_HI3593_PORT_init+0x68>)
    1ef6:	2047      	movs	r0, #71	; 0x47
    1ef8:	4b04      	ldr	r3, [pc, #16]	; (1f0c <SPI_HI3593_PORT_init+0x5c>)
    1efa:	4798      	blx	r3
}
    1efc:	bf00      	nop
    1efe:	bd80      	pop	{r7, pc}
    1f00:	00001919 	.word	0x00001919
    1f04:	000018e1 	.word	0x000018e1
    1f08:	00440002 	.word	0x00440002
    1f0c:	000018c1 	.word	0x000018c1
    1f10:	00450002 	.word	0x00450002
    1f14:	0000188d 	.word	0x0000188d
    1f18:	00470002 	.word	0x00470002

00001f1c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f20:	2242      	movs	r2, #66	; 0x42
    1f22:	2124      	movs	r1, #36	; 0x24
    1f24:	4806      	ldr	r0, [pc, #24]	; (1f40 <SPI_HI3593_CLOCK_init+0x24>)
    1f26:	4b07      	ldr	r3, [pc, #28]	; (1f44 <SPI_HI3593_CLOCK_init+0x28>)
    1f28:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f2a:	224a      	movs	r2, #74	; 0x4a
    1f2c:	2103      	movs	r1, #3
    1f2e:	4804      	ldr	r0, [pc, #16]	; (1f40 <SPI_HI3593_CLOCK_init+0x24>)
    1f30:	4b04      	ldr	r3, [pc, #16]	; (1f44 <SPI_HI3593_CLOCK_init+0x28>)
    1f32:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1f34:	4804      	ldr	r0, [pc, #16]	; (1f48 <SPI_HI3593_CLOCK_init+0x2c>)
    1f36:	4b05      	ldr	r3, [pc, #20]	; (1f4c <SPI_HI3593_CLOCK_init+0x30>)
    1f38:	4798      	blx	r3
}
    1f3a:	bf00      	nop
    1f3c:	bd80      	pop	{r7, pc}
    1f3e:	bf00      	nop
    1f40:	40001c00 	.word	0x40001c00
    1f44:	0000108d 	.word	0x0000108d
    1f48:	40000800 	.word	0x40000800
    1f4c:	00001333 	.word	0x00001333

00001f50 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1f54:	4b04      	ldr	r3, [pc, #16]	; (1f68 <SPI_HI3593_init+0x18>)
    1f56:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1f58:	4904      	ldr	r1, [pc, #16]	; (1f6c <SPI_HI3593_init+0x1c>)
    1f5a:	4805      	ldr	r0, [pc, #20]	; (1f70 <SPI_HI3593_init+0x20>)
    1f5c:	4b05      	ldr	r3, [pc, #20]	; (1f74 <SPI_HI3593_init+0x24>)
    1f5e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1f60:	4b05      	ldr	r3, [pc, #20]	; (1f78 <SPI_HI3593_init+0x28>)
    1f62:	4798      	blx	r3
}
    1f64:	bf00      	nop
    1f66:	bd80      	pop	{r7, pc}
    1f68:	00001f1d 	.word	0x00001f1d
    1f6c:	43000800 	.word	0x43000800
    1f70:	20007e48 	.word	0x20007e48
    1f74:	00002d61 	.word	0x00002d61
    1f78:	00001eb1 	.word	0x00001eb1

00001f7c <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1f80:	2100      	movs	r1, #0
    1f82:	2068      	movs	r0, #104	; 0x68
    1f84:	4b07      	ldr	r3, [pc, #28]	; (1fa4 <I2C_FANS_PORT_init+0x28>)
    1f86:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1f88:	4907      	ldr	r1, [pc, #28]	; (1fa8 <I2C_FANS_PORT_init+0x2c>)
    1f8a:	2068      	movs	r0, #104	; 0x68
    1f8c:	4b07      	ldr	r3, [pc, #28]	; (1fac <I2C_FANS_PORT_init+0x30>)
    1f8e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1f90:	2100      	movs	r1, #0
    1f92:	2069      	movs	r0, #105	; 0x69
    1f94:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <I2C_FANS_PORT_init+0x28>)
    1f96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1f98:	4905      	ldr	r1, [pc, #20]	; (1fb0 <I2C_FANS_PORT_init+0x34>)
    1f9a:	2069      	movs	r0, #105	; 0x69
    1f9c:	4b03      	ldr	r3, [pc, #12]	; (1fac <I2C_FANS_PORT_init+0x30>)
    1f9e:	4798      	blx	r3
}
    1fa0:	bf00      	nop
    1fa2:	bd80      	pop	{r7, pc}
    1fa4:	0000188d 	.word	0x0000188d
    1fa8:	00680002 	.word	0x00680002
    1fac:	000018c1 	.word	0x000018c1
    1fb0:	00690002 	.word	0x00690002

00001fb4 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fb8:	2244      	movs	r2, #68	; 0x44
    1fba:	2125      	movs	r1, #37	; 0x25
    1fbc:	4806      	ldr	r0, [pc, #24]	; (1fd8 <I2C_FANS_CLOCK_init+0x24>)
    1fbe:	4b07      	ldr	r3, [pc, #28]	; (1fdc <I2C_FANS_CLOCK_init+0x28>)
    1fc0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fc2:	224a      	movs	r2, #74	; 0x4a
    1fc4:	2103      	movs	r1, #3
    1fc6:	4804      	ldr	r0, [pc, #16]	; (1fd8 <I2C_FANS_CLOCK_init+0x24>)
    1fc8:	4b04      	ldr	r3, [pc, #16]	; (1fdc <I2C_FANS_CLOCK_init+0x28>)
    1fca:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1fcc:	4804      	ldr	r0, [pc, #16]	; (1fe0 <I2C_FANS_CLOCK_init+0x2c>)
    1fce:	4b05      	ldr	r3, [pc, #20]	; (1fe4 <I2C_FANS_CLOCK_init+0x30>)
    1fd0:	4798      	blx	r3
}
    1fd2:	bf00      	nop
    1fd4:	bd80      	pop	{r7, pc}
    1fd6:	bf00      	nop
    1fd8:	40001c00 	.word	0x40001c00
    1fdc:	0000108d 	.word	0x0000108d
    1fe0:	40000800 	.word	0x40000800
    1fe4:	00001353 	.word	0x00001353

00001fe8 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1fec:	4b04      	ldr	r3, [pc, #16]	; (2000 <I2C_FANS_init+0x18>)
    1fee:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1ff0:	4904      	ldr	r1, [pc, #16]	; (2004 <I2C_FANS_init+0x1c>)
    1ff2:	4805      	ldr	r0, [pc, #20]	; (2008 <I2C_FANS_init+0x20>)
    1ff4:	4b05      	ldr	r3, [pc, #20]	; (200c <I2C_FANS_init+0x24>)
    1ff6:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1ff8:	4b05      	ldr	r3, [pc, #20]	; (2010 <I2C_FANS_init+0x28>)
    1ffa:	4798      	blx	r3
}
    1ffc:	bf00      	nop
    1ffe:	bd80      	pop	{r7, pc}
    2000:	00001fb5 	.word	0x00001fb5
    2004:	43000c00 	.word	0x43000c00
    2008:	20007e78 	.word	0x20007e78
    200c:	00002ac9 	.word	0x00002ac9
    2010:	00001f7d 	.word	0x00001f7d

00002014 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    2014:	b580      	push	{r7, lr}
    2016:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2018:	4808      	ldr	r0, [pc, #32]	; (203c <TIMER_USB_init+0x28>)
    201a:	4b09      	ldr	r3, [pc, #36]	; (2040 <TIMER_USB_init+0x2c>)
    201c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    201e:	2243      	movs	r2, #67	; 0x43
    2020:	2109      	movs	r1, #9
    2022:	4808      	ldr	r0, [pc, #32]	; (2044 <TIMER_USB_init+0x30>)
    2024:	4b08      	ldr	r3, [pc, #32]	; (2048 <TIMER_USB_init+0x34>)
    2026:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    2028:	4b08      	ldr	r3, [pc, #32]	; (204c <TIMER_USB_init+0x38>)
    202a:	4798      	blx	r3
    202c:	4603      	mov	r3, r0
    202e:	461a      	mov	r2, r3
    2030:	4907      	ldr	r1, [pc, #28]	; (2050 <TIMER_USB_init+0x3c>)
    2032:	4808      	ldr	r0, [pc, #32]	; (2054 <TIMER_USB_init+0x40>)
    2034:	4b08      	ldr	r3, [pc, #32]	; (2058 <TIMER_USB_init+0x44>)
    2036:	4798      	blx	r3
}
    2038:	bf00      	nop
    203a:	bd80      	pop	{r7, pc}
    203c:	40000800 	.word	0x40000800
    2040:	000011b3 	.word	0x000011b3
    2044:	40001c00 	.word	0x40001c00
    2048:	0000108d 	.word	0x0000108d
    204c:	00008891 	.word	0x00008891
    2050:	40003800 	.word	0x40003800
    2054:	20007fa0 	.word	0x20007fa0
    2058:	00002ff1 	.word	0x00002ff1

0000205c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    205c:	b580      	push	{r7, lr}
    205e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2060:	4808      	ldr	r0, [pc, #32]	; (2084 <TIMER_ARINC_init+0x28>)
    2062:	4b09      	ldr	r3, [pc, #36]	; (2088 <TIMER_ARINC_init+0x2c>)
    2064:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2066:	2244      	movs	r2, #68	; 0x44
    2068:	211a      	movs	r1, #26
    206a:	4808      	ldr	r0, [pc, #32]	; (208c <TIMER_ARINC_init+0x30>)
    206c:	4b08      	ldr	r3, [pc, #32]	; (2090 <TIMER_ARINC_init+0x34>)
    206e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2070:	4b08      	ldr	r3, [pc, #32]	; (2094 <TIMER_ARINC_init+0x38>)
    2072:	4798      	blx	r3
    2074:	4603      	mov	r3, r0
    2076:	461a      	mov	r2, r3
    2078:	4907      	ldr	r1, [pc, #28]	; (2098 <TIMER_ARINC_init+0x3c>)
    207a:	4808      	ldr	r0, [pc, #32]	; (209c <TIMER_ARINC_init+0x40>)
    207c:	4b08      	ldr	r3, [pc, #32]	; (20a0 <TIMER_ARINC_init+0x44>)
    207e:	4798      	blx	r3
}
    2080:	bf00      	nop
    2082:	bd80      	pop	{r7, pc}
    2084:	40000800 	.word	0x40000800
    2088:	00001273 	.word	0x00001273
    208c:	40001c00 	.word	0x40001c00
    2090:	0000108d 	.word	0x0000108d
    2094:	00008891 	.word	0x00008891
    2098:	4101a000 	.word	0x4101a000
    209c:	20007f80 	.word	0x20007f80
    20a0:	00002ff1 	.word	0x00002ff1

000020a4 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    20a4:	b580      	push	{r7, lr}
    20a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    20a8:	4808      	ldr	r0, [pc, #32]	; (20cc <TIMER_MAINTENANCE_init+0x28>)
    20aa:	4b09      	ldr	r3, [pc, #36]	; (20d0 <TIMER_MAINTENANCE_init+0x2c>)
    20ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20ae:	2246      	movs	r2, #70	; 0x46
    20b0:	211e      	movs	r1, #30
    20b2:	4808      	ldr	r0, [pc, #32]	; (20d4 <TIMER_MAINTENANCE_init+0x30>)
    20b4:	4b08      	ldr	r3, [pc, #32]	; (20d8 <TIMER_MAINTENANCE_init+0x34>)
    20b6:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    20b8:	4b08      	ldr	r3, [pc, #32]	; (20dc <TIMER_MAINTENANCE_init+0x38>)
    20ba:	4798      	blx	r3
    20bc:	4603      	mov	r3, r0
    20be:	461a      	mov	r2, r3
    20c0:	4907      	ldr	r1, [pc, #28]	; (20e0 <TIMER_MAINTENANCE_init+0x3c>)
    20c2:	4808      	ldr	r0, [pc, #32]	; (20e4 <TIMER_MAINTENANCE_init+0x40>)
    20c4:	4b08      	ldr	r3, [pc, #32]	; (20e8 <TIMER_MAINTENANCE_init+0x44>)
    20c6:	4798      	blx	r3
}
    20c8:	bf00      	nop
    20ca:	bd80      	pop	{r7, pc}
    20cc:	40000800 	.word	0x40000800
    20d0:	00001293 	.word	0x00001293
    20d4:	40001c00 	.word	0x40001c00
    20d8:	0000108d 	.word	0x0000108d
    20dc:	00008891 	.word	0x00008891
    20e0:	42001400 	.word	0x42001400
    20e4:	20007e98 	.word	0x20007e98
    20e8:	00002ff1 	.word	0x00002ff1

000020ec <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    20f0:	4808      	ldr	r0, [pc, #32]	; (2114 <TIMER_INTERFACE_init+0x28>)
    20f2:	4b09      	ldr	r3, [pc, #36]	; (2118 <TIMER_INTERFACE_init+0x2c>)
    20f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20f6:	2246      	movs	r2, #70	; 0x46
    20f8:	211e      	movs	r1, #30
    20fa:	4808      	ldr	r0, [pc, #32]	; (211c <TIMER_INTERFACE_init+0x30>)
    20fc:	4b08      	ldr	r3, [pc, #32]	; (2120 <TIMER_INTERFACE_init+0x34>)
    20fe:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    2100:	4b08      	ldr	r3, [pc, #32]	; (2124 <TIMER_INTERFACE_init+0x38>)
    2102:	4798      	blx	r3
    2104:	4603      	mov	r3, r0
    2106:	461a      	mov	r2, r3
    2108:	4907      	ldr	r1, [pc, #28]	; (2128 <TIMER_INTERFACE_init+0x3c>)
    210a:	4808      	ldr	r0, [pc, #32]	; (212c <TIMER_INTERFACE_init+0x40>)
    210c:	4b08      	ldr	r3, [pc, #32]	; (2130 <TIMER_INTERFACE_init+0x44>)
    210e:	4798      	blx	r3
}
    2110:	bf00      	nop
    2112:	bd80      	pop	{r7, pc}
    2114:	40000800 	.word	0x40000800
    2118:	000012b3 	.word	0x000012b3
    211c:	40001c00 	.word	0x40001c00
    2120:	0000108d 	.word	0x0000108d
    2124:	00008891 	.word	0x00008891
    2128:	42001800 	.word	0x42001800
    212c:	20007edc 	.word	0x20007edc
    2130:	00002ff1 	.word	0x00002ff1

00002134 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    2134:	b580      	push	{r7, lr}
    2136:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    2138:	4808      	ldr	r0, [pc, #32]	; (215c <TIMER_EVENT_init+0x28>)
    213a:	4b09      	ldr	r3, [pc, #36]	; (2160 <TIMER_EVENT_init+0x2c>)
    213c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    213e:	2246      	movs	r2, #70	; 0x46
    2140:	2127      	movs	r1, #39	; 0x27
    2142:	4808      	ldr	r0, [pc, #32]	; (2164 <TIMER_EVENT_init+0x30>)
    2144:	4b08      	ldr	r3, [pc, #32]	; (2168 <TIMER_EVENT_init+0x34>)
    2146:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2148:	4b08      	ldr	r3, [pc, #32]	; (216c <TIMER_EVENT_init+0x38>)
    214a:	4798      	blx	r3
    214c:	4603      	mov	r3, r0
    214e:	461a      	mov	r2, r3
    2150:	4907      	ldr	r1, [pc, #28]	; (2170 <TIMER_EVENT_init+0x3c>)
    2152:	4808      	ldr	r0, [pc, #32]	; (2174 <TIMER_EVENT_init+0x40>)
    2154:	4b08      	ldr	r3, [pc, #32]	; (2178 <TIMER_EVENT_init+0x44>)
    2156:	4798      	blx	r3
}
    2158:	bf00      	nop
    215a:	bd80      	pop	{r7, pc}
    215c:	40000800 	.word	0x40000800
    2160:	00001373 	.word	0x00001373
    2164:	40001c00 	.word	0x40001c00
    2168:	0000108d 	.word	0x0000108d
    216c:	00008891 	.word	0x00008891
    2170:	43001400 	.word	0x43001400
    2174:	20007ebc 	.word	0x20007ebc
    2178:	00002ff1 	.word	0x00002ff1

0000217c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    217c:	b480      	push	{r7}
    217e:	af00      	add	r7, sp, #0
}
    2180:	bf00      	nop
    2182:	46bd      	mov	sp, r7
    2184:	f85d 7b04 	ldr.w	r7, [sp], #4
    2188:	4770      	bx	lr
	...

0000218c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    218c:	b580      	push	{r7, lr}
    218e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2190:	4804      	ldr	r0, [pc, #16]	; (21a4 <LIVE_PULSE_CLOCK_init+0x18>)
    2192:	4b05      	ldr	r3, [pc, #20]	; (21a8 <LIVE_PULSE_CLOCK_init+0x1c>)
    2194:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2196:	2240      	movs	r2, #64	; 0x40
    2198:	2127      	movs	r1, #39	; 0x27
    219a:	4804      	ldr	r0, [pc, #16]	; (21ac <LIVE_PULSE_CLOCK_init+0x20>)
    219c:	4b04      	ldr	r3, [pc, #16]	; (21b0 <LIVE_PULSE_CLOCK_init+0x24>)
    219e:	4798      	blx	r3
}
    21a0:	bf00      	nop
    21a2:	bd80      	pop	{r7, pc}
    21a4:	40000800 	.word	0x40000800
    21a8:	00001393 	.word	0x00001393
    21ac:	40001c00 	.word	0x40001c00
    21b0:	0000108d 	.word	0x0000108d

000021b4 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    21b4:	b580      	push	{r7, lr}
    21b6:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    21b8:	4b06      	ldr	r3, [pc, #24]	; (21d4 <LIVE_PULSE_init+0x20>)
    21ba:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    21bc:	4b06      	ldr	r3, [pc, #24]	; (21d8 <LIVE_PULSE_init+0x24>)
    21be:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    21c0:	4b06      	ldr	r3, [pc, #24]	; (21dc <LIVE_PULSE_init+0x28>)
    21c2:	4798      	blx	r3
    21c4:	4603      	mov	r3, r0
    21c6:	461a      	mov	r2, r3
    21c8:	4905      	ldr	r1, [pc, #20]	; (21e0 <LIVE_PULSE_init+0x2c>)
    21ca:	4806      	ldr	r0, [pc, #24]	; (21e4 <LIVE_PULSE_init+0x30>)
    21cc:	4b06      	ldr	r3, [pc, #24]	; (21e8 <LIVE_PULSE_init+0x34>)
    21ce:	4798      	blx	r3
}
    21d0:	bf00      	nop
    21d2:	bd80      	pop	{r7, pc}
    21d4:	0000218d 	.word	0x0000218d
    21d8:	0000217d 	.word	0x0000217d
    21dc:	000088a5 	.word	0x000088a5
    21e0:	43001800 	.word	0x43001800
    21e4:	20007f1c 	.word	0x20007f1c
    21e8:	00002ba5 	.word	0x00002ba5

000021ec <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    21f0:	4804      	ldr	r0, [pc, #16]	; (2204 <TIMER_HVAC_CLOCK_init+0x18>)
    21f2:	4b05      	ldr	r3, [pc, #20]	; (2208 <TIMER_HVAC_CLOCK_init+0x1c>)
    21f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21f6:	2244      	movs	r2, #68	; 0x44
    21f8:	2119      	movs	r1, #25
    21fa:	4804      	ldr	r0, [pc, #16]	; (220c <TIMER_HVAC_CLOCK_init+0x20>)
    21fc:	4b04      	ldr	r3, [pc, #16]	; (2210 <TIMER_HVAC_CLOCK_init+0x24>)
    21fe:	4798      	blx	r3
}
    2200:	bf00      	nop
    2202:	bd80      	pop	{r7, pc}
    2204:	40000800 	.word	0x40000800
    2208:	00001233 	.word	0x00001233
    220c:	40001c00 	.word	0x40001c00
    2210:	0000108d 	.word	0x0000108d

00002214 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    2214:	b580      	push	{r7, lr}
    2216:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2218:	4b05      	ldr	r3, [pc, #20]	; (2230 <TIMER_HVAC_init+0x1c>)
    221a:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    221c:	4b05      	ldr	r3, [pc, #20]	; (2234 <TIMER_HVAC_init+0x20>)
    221e:	4798      	blx	r3
    2220:	4603      	mov	r3, r0
    2222:	461a      	mov	r2, r3
    2224:	4904      	ldr	r1, [pc, #16]	; (2238 <TIMER_HVAC_init+0x24>)
    2226:	4805      	ldr	r0, [pc, #20]	; (223c <TIMER_HVAC_init+0x28>)
    2228:	4b05      	ldr	r3, [pc, #20]	; (2240 <TIMER_HVAC_init+0x2c>)
    222a:	4798      	blx	r3
}
    222c:	bf00      	nop
    222e:	bd80      	pop	{r7, pc}
    2230:	000021ed 	.word	0x000021ed
    2234:	00007c91 	.word	0x00007c91
    2238:	41016000 	.word	0x41016000
    223c:	20007fc0 	.word	0x20007fc0
    2240:	00002ff1 	.word	0x00002ff1

00002244 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2244:	b580      	push	{r7, lr}
    2246:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2248:	4804      	ldr	r0, [pc, #16]	; (225c <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    224a:	4b05      	ldr	r3, [pc, #20]	; (2260 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    224c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    224e:	2244      	movs	r2, #68	; 0x44
    2250:	2119      	movs	r1, #25
    2252:	4804      	ldr	r0, [pc, #16]	; (2264 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    2254:	4b04      	ldr	r3, [pc, #16]	; (2268 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    2256:	4798      	blx	r3
}
    2258:	bf00      	nop
    225a:	bd80      	pop	{r7, pc}
    225c:	40000800 	.word	0x40000800
    2260:	00001253 	.word	0x00001253
    2264:	40001c00 	.word	0x40001c00
    2268:	0000108d 	.word	0x0000108d

0000226c <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    226c:	b580      	push	{r7, lr}
    226e:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2270:	4b05      	ldr	r3, [pc, #20]	; (2288 <TIMER_TEMPERATURES_init+0x1c>)
    2272:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2274:	4b05      	ldr	r3, [pc, #20]	; (228c <TIMER_TEMPERATURES_init+0x20>)
    2276:	4798      	blx	r3
    2278:	4603      	mov	r3, r0
    227a:	461a      	mov	r2, r3
    227c:	4904      	ldr	r1, [pc, #16]	; (2290 <TIMER_TEMPERATURES_init+0x24>)
    227e:	4805      	ldr	r0, [pc, #20]	; (2294 <TIMER_TEMPERATURES_init+0x28>)
    2280:	4b05      	ldr	r3, [pc, #20]	; (2298 <TIMER_TEMPERATURES_init+0x2c>)
    2282:	4798      	blx	r3
}
    2284:	bf00      	nop
    2286:	bd80      	pop	{r7, pc}
    2288:	00002245 	.word	0x00002245
    228c:	00007c91 	.word	0x00007c91
    2290:	41018000 	.word	0x41018000
    2294:	20007e28 	.word	0x20007e28
    2298:	00002ff1 	.word	0x00002ff1

0000229c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    229c:	b580      	push	{r7, lr}
    229e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    22a0:	2102      	movs	r1, #2
    22a2:	2018      	movs	r0, #24
    22a4:	4b0f      	ldr	r3, [pc, #60]	; (22e4 <CDCUSB_PORT_init+0x48>)
    22a6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    22a8:	2100      	movs	r1, #0
    22aa:	2018      	movs	r0, #24
    22ac:	4b0e      	ldr	r3, [pc, #56]	; (22e8 <CDCUSB_PORT_init+0x4c>)
    22ae:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    22b0:	2100      	movs	r1, #0
    22b2:	2018      	movs	r0, #24
    22b4:	4b0d      	ldr	r3, [pc, #52]	; (22ec <CDCUSB_PORT_init+0x50>)
    22b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    22b8:	490d      	ldr	r1, [pc, #52]	; (22f0 <CDCUSB_PORT_init+0x54>)
    22ba:	2018      	movs	r0, #24
    22bc:	4b0d      	ldr	r3, [pc, #52]	; (22f4 <CDCUSB_PORT_init+0x58>)
    22be:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    22c0:	2102      	movs	r1, #2
    22c2:	2019      	movs	r0, #25
    22c4:	4b07      	ldr	r3, [pc, #28]	; (22e4 <CDCUSB_PORT_init+0x48>)
    22c6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    22c8:	2100      	movs	r1, #0
    22ca:	2019      	movs	r0, #25
    22cc:	4b06      	ldr	r3, [pc, #24]	; (22e8 <CDCUSB_PORT_init+0x4c>)
    22ce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    22d0:	2100      	movs	r1, #0
    22d2:	2019      	movs	r0, #25
    22d4:	4b05      	ldr	r3, [pc, #20]	; (22ec <CDCUSB_PORT_init+0x50>)
    22d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    22d8:	4907      	ldr	r1, [pc, #28]	; (22f8 <CDCUSB_PORT_init+0x5c>)
    22da:	2019      	movs	r0, #25
    22dc:	4b05      	ldr	r3, [pc, #20]	; (22f4 <CDCUSB_PORT_init+0x58>)
    22de:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    22e0:	bf00      	nop
    22e2:	bd80      	pop	{r7, pc}
    22e4:	000018e1 	.word	0x000018e1
    22e8:	00001919 	.word	0x00001919
    22ec:	0000188d 	.word	0x0000188d
    22f0:	00180007 	.word	0x00180007
    22f4:	000018c1 	.word	0x000018c1
    22f8:	00190007 	.word	0x00190007

000022fc <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    22fc:	b580      	push	{r7, lr}
    22fe:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2300:	2242      	movs	r2, #66	; 0x42
    2302:	210a      	movs	r1, #10
    2304:	4805      	ldr	r0, [pc, #20]	; (231c <CDCUSB_CLOCK_init+0x20>)
    2306:	4b06      	ldr	r3, [pc, #24]	; (2320 <CDCUSB_CLOCK_init+0x24>)
    2308:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    230a:	4806      	ldr	r0, [pc, #24]	; (2324 <CDCUSB_CLOCK_init+0x28>)
    230c:	4b06      	ldr	r3, [pc, #24]	; (2328 <CDCUSB_CLOCK_init+0x2c>)
    230e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2310:	4804      	ldr	r0, [pc, #16]	; (2324 <CDCUSB_CLOCK_init+0x28>)
    2312:	4b06      	ldr	r3, [pc, #24]	; (232c <CDCUSB_CLOCK_init+0x30>)
    2314:	4798      	blx	r3
}
    2316:	bf00      	nop
    2318:	bd80      	pop	{r7, pc}
    231a:	bf00      	nop
    231c:	40001c00 	.word	0x40001c00
    2320:	0000108d 	.word	0x0000108d
    2324:	40000800 	.word	0x40000800
    2328:	000010b3 	.word	0x000010b3
    232c:	000011d3 	.word	0x000011d3

00002330 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2330:	b580      	push	{r7, lr}
    2332:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2334:	4b03      	ldr	r3, [pc, #12]	; (2344 <CDCUSB_init+0x14>)
    2336:	4798      	blx	r3
	usb_d_init();
    2338:	4b03      	ldr	r3, [pc, #12]	; (2348 <CDCUSB_init+0x18>)
    233a:	4798      	blx	r3
	CDCUSB_PORT_init();
    233c:	4b03      	ldr	r3, [pc, #12]	; (234c <CDCUSB_init+0x1c>)
    233e:	4798      	blx	r3
}
    2340:	bf00      	nop
    2342:	bd80      	pop	{r7, pc}
    2344:	000022fd 	.word	0x000022fd
    2348:	0000384d 	.word	0x0000384d
    234c:	0000229d 	.word	0x0000229d

00002350 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2350:	b580      	push	{r7, lr}
    2352:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2354:	4802      	ldr	r0, [pc, #8]	; (2360 <WATCHDOG_CLOCK_init+0x10>)
    2356:	4b03      	ldr	r3, [pc, #12]	; (2364 <WATCHDOG_CLOCK_init+0x14>)
    2358:	4798      	blx	r3
}
    235a:	bf00      	nop
    235c:	bd80      	pop	{r7, pc}
    235e:	bf00      	nop
    2360:	40000800 	.word	0x40000800
    2364:	00001133 	.word	0x00001133

00002368 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2368:	b580      	push	{r7, lr}
    236a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    236c:	4b03      	ldr	r3, [pc, #12]	; (237c <WATCHDOG_init+0x14>)
    236e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2370:	4903      	ldr	r1, [pc, #12]	; (2380 <WATCHDOG_init+0x18>)
    2372:	4804      	ldr	r0, [pc, #16]	; (2384 <WATCHDOG_init+0x1c>)
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <WATCHDOG_init+0x20>)
    2376:	4798      	blx	r3
}
    2378:	bf00      	nop
    237a:	bd80      	pop	{r7, pc}
    237c:	00002351 	.word	0x00002351
    2380:	40002000 	.word	0x40002000
    2384:	20008000 	.word	0x20008000
    2388:	00001961 	.word	0x00001961

0000238c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    238c:	b580      	push	{r7, lr}
    238e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2390:	4904      	ldr	r1, [pc, #16]	; (23a4 <CAN_CCU_PORT_init+0x18>)
    2392:	202d      	movs	r0, #45	; 0x2d
    2394:	4b04      	ldr	r3, [pc, #16]	; (23a8 <CAN_CCU_PORT_init+0x1c>)
    2396:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2398:	4904      	ldr	r1, [pc, #16]	; (23ac <CAN_CCU_PORT_init+0x20>)
    239a:	202c      	movs	r0, #44	; 0x2c
    239c:	4b02      	ldr	r3, [pc, #8]	; (23a8 <CAN_CCU_PORT_init+0x1c>)
    239e:	4798      	blx	r3
}
    23a0:	bf00      	nop
    23a2:	bd80      	pop	{r7, pc}
    23a4:	002d0007 	.word	0x002d0007
    23a8:	000018c1 	.word	0x000018c1
    23ac:	002c0007 	.word	0x002c0007

000023b0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    23b4:	4807      	ldr	r0, [pc, #28]	; (23d4 <CAN_CCU_init+0x24>)
    23b6:	4b08      	ldr	r3, [pc, #32]	; (23d8 <CAN_CCU_init+0x28>)
    23b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23ba:	2243      	movs	r2, #67	; 0x43
    23bc:	211c      	movs	r1, #28
    23be:	4807      	ldr	r0, [pc, #28]	; (23dc <CAN_CCU_init+0x2c>)
    23c0:	4b07      	ldr	r3, [pc, #28]	; (23e0 <CAN_CCU_init+0x30>)
    23c2:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    23c4:	4907      	ldr	r1, [pc, #28]	; (23e4 <CAN_CCU_init+0x34>)
    23c6:	4808      	ldr	r0, [pc, #32]	; (23e8 <CAN_CCU_init+0x38>)
    23c8:	4b08      	ldr	r3, [pc, #32]	; (23ec <CAN_CCU_init+0x3c>)
    23ca:	4798      	blx	r3
	CAN_CCU_PORT_init();
    23cc:	4b08      	ldr	r3, [pc, #32]	; (23f0 <CAN_CCU_init+0x40>)
    23ce:	4798      	blx	r3
}
    23d0:	bf00      	nop
    23d2:	bd80      	pop	{r7, pc}
    23d4:	40000800 	.word	0x40000800
    23d8:	000010f3 	.word	0x000010f3
    23dc:	40001c00 	.word	0x40001c00
    23e0:	0000108d 	.word	0x0000108d
    23e4:	42000400 	.word	0x42000400
    23e8:	20007f58 	.word	0x20007f58
    23ec:	0000264d 	.word	0x0000264d
    23f0:	0000238d 	.word	0x0000238d

000023f4 <system_init>:

void system_init(void)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	af00      	add	r7, sp, #0
	init_mcu();
    23f8:	4b5e      	ldr	r3, [pc, #376]	; (2574 <system_init+0x180>)
    23fa:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    23fc:	2100      	movs	r1, #0
    23fe:	2007      	movs	r0, #7
    2400:	4b5d      	ldr	r3, [pc, #372]	; (2578 <system_init+0x184>)
    2402:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2404:	2102      	movs	r1, #2
    2406:	2007      	movs	r0, #7
    2408:	4b5c      	ldr	r3, [pc, #368]	; (257c <system_init+0x188>)
    240a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    240c:	f04f 31ff 	mov.w	r1, #4294967295
    2410:	2007      	movs	r0, #7
    2412:	4b5b      	ldr	r3, [pc, #364]	; (2580 <system_init+0x18c>)
    2414:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2416:	2101      	movs	r1, #1
    2418:	200f      	movs	r0, #15
    241a:	4b57      	ldr	r3, [pc, #348]	; (2578 <system_init+0x184>)
    241c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    241e:	2102      	movs	r1, #2
    2420:	200f      	movs	r0, #15
    2422:	4b56      	ldr	r3, [pc, #344]	; (257c <system_init+0x188>)
    2424:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2426:	f04f 31ff 	mov.w	r1, #4294967295
    242a:	200f      	movs	r0, #15
    242c:	4b54      	ldr	r3, [pc, #336]	; (2580 <system_init+0x18c>)
    242e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2430:	2101      	movs	r1, #1
    2432:	2013      	movs	r0, #19
    2434:	4b50      	ldr	r3, [pc, #320]	; (2578 <system_init+0x184>)
    2436:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2438:	2102      	movs	r1, #2
    243a:	2013      	movs	r0, #19
    243c:	4b4f      	ldr	r3, [pc, #316]	; (257c <system_init+0x188>)
    243e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2440:	f04f 31ff 	mov.w	r1, #4294967295
    2444:	2013      	movs	r0, #19
    2446:	4b4e      	ldr	r3, [pc, #312]	; (2580 <system_init+0x18c>)
    2448:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    244a:	2101      	movs	r1, #1
    244c:	201b      	movs	r0, #27
    244e:	4b4a      	ldr	r3, [pc, #296]	; (2578 <system_init+0x184>)
    2450:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2452:	2102      	movs	r1, #2
    2454:	201b      	movs	r0, #27
    2456:	4b49      	ldr	r3, [pc, #292]	; (257c <system_init+0x188>)
    2458:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    245a:	f04f 31ff 	mov.w	r1, #4294967295
    245e:	201b      	movs	r0, #27
    2460:	4b47      	ldr	r3, [pc, #284]	; (2580 <system_init+0x18c>)
    2462:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2464:	2101      	movs	r1, #1
    2466:	2027      	movs	r0, #39	; 0x27
    2468:	4b43      	ldr	r3, [pc, #268]	; (2578 <system_init+0x184>)
    246a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    246c:	2102      	movs	r1, #2
    246e:	2027      	movs	r0, #39	; 0x27
    2470:	4b42      	ldr	r3, [pc, #264]	; (257c <system_init+0x188>)
    2472:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2474:	f04f 31ff 	mov.w	r1, #4294967295
    2478:	2027      	movs	r0, #39	; 0x27
    247a:	4b41      	ldr	r3, [pc, #260]	; (2580 <system_init+0x18c>)
    247c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    247e:	2101      	movs	r1, #1
    2480:	203d      	movs	r0, #61	; 0x3d
    2482:	4b3d      	ldr	r3, [pc, #244]	; (2578 <system_init+0x184>)
    2484:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2486:	2102      	movs	r1, #2
    2488:	203d      	movs	r0, #61	; 0x3d
    248a:	4b3c      	ldr	r3, [pc, #240]	; (257c <system_init+0x188>)
    248c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    248e:	f04f 31ff 	mov.w	r1, #4294967295
    2492:	203d      	movs	r0, #61	; 0x3d
    2494:	4b3a      	ldr	r3, [pc, #232]	; (2580 <system_init+0x18c>)
    2496:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2498:	2101      	movs	r1, #1
    249a:	203f      	movs	r0, #63	; 0x3f
    249c:	4b37      	ldr	r3, [pc, #220]	; (257c <system_init+0x188>)
    249e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    24a0:	2101      	movs	r1, #1
    24a2:	203f      	movs	r0, #63	; 0x3f
    24a4:	4b37      	ldr	r3, [pc, #220]	; (2584 <system_init+0x190>)
    24a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    24a8:	f04f 31ff 	mov.w	r1, #4294967295
    24ac:	203f      	movs	r0, #63	; 0x3f
    24ae:	4b34      	ldr	r3, [pc, #208]	; (2580 <system_init+0x18c>)
    24b0:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    24b2:	2100      	movs	r1, #0
    24b4:	204d      	movs	r0, #77	; 0x4d
    24b6:	4b30      	ldr	r3, [pc, #192]	; (2578 <system_init+0x184>)
    24b8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    24ba:	2102      	movs	r1, #2
    24bc:	204d      	movs	r0, #77	; 0x4d
    24be:	4b2f      	ldr	r3, [pc, #188]	; (257c <system_init+0x188>)
    24c0:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    24c2:	f04f 31ff 	mov.w	r1, #4294967295
    24c6:	204d      	movs	r0, #77	; 0x4d
    24c8:	4b2d      	ldr	r3, [pc, #180]	; (2580 <system_init+0x18c>)
    24ca:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    24cc:	2101      	movs	r1, #1
    24ce:	204e      	movs	r0, #78	; 0x4e
    24d0:	4b29      	ldr	r3, [pc, #164]	; (2578 <system_init+0x184>)
    24d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    24d4:	2102      	movs	r1, #2
    24d6:	204e      	movs	r0, #78	; 0x4e
    24d8:	4b28      	ldr	r3, [pc, #160]	; (257c <system_init+0x188>)
    24da:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    24dc:	f04f 31ff 	mov.w	r1, #4294967295
    24e0:	204e      	movs	r0, #78	; 0x4e
    24e2:	4b27      	ldr	r3, [pc, #156]	; (2580 <system_init+0x18c>)
    24e4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    24e6:	2100      	movs	r1, #0
    24e8:	204f      	movs	r0, #79	; 0x4f
    24ea:	4b23      	ldr	r3, [pc, #140]	; (2578 <system_init+0x184>)
    24ec:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    24ee:	2102      	movs	r1, #2
    24f0:	204f      	movs	r0, #79	; 0x4f
    24f2:	4b22      	ldr	r3, [pc, #136]	; (257c <system_init+0x188>)
    24f4:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    24f6:	f04f 31ff 	mov.w	r1, #4294967295
    24fa:	204f      	movs	r0, #79	; 0x4f
    24fc:	4b20      	ldr	r3, [pc, #128]	; (2580 <system_init+0x18c>)
    24fe:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2500:	2100      	movs	r1, #0
    2502:	2052      	movs	r0, #82	; 0x52
    2504:	4b1c      	ldr	r3, [pc, #112]	; (2578 <system_init+0x184>)
    2506:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2508:	2102      	movs	r1, #2
    250a:	2052      	movs	r0, #82	; 0x52
    250c:	4b1b      	ldr	r3, [pc, #108]	; (257c <system_init+0x188>)
    250e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2510:	f04f 31ff 	mov.w	r1, #4294967295
    2514:	2052      	movs	r0, #82	; 0x52
    2516:	4b1a      	ldr	r3, [pc, #104]	; (2580 <system_init+0x18c>)
    2518:	4798      	blx	r3

	CRC_CALC_init();
    251a:	4b1b      	ldr	r3, [pc, #108]	; (2588 <system_init+0x194>)
    251c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    251e:	4b1b      	ldr	r3, [pc, #108]	; (258c <system_init+0x198>)
    2520:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2522:	4b1b      	ldr	r3, [pc, #108]	; (2590 <system_init+0x19c>)
    2524:	4798      	blx	r3

	QSPI_N25Q256_init();
    2526:	4b1b      	ldr	r3, [pc, #108]	; (2594 <system_init+0x1a0>)
    2528:	4798      	blx	r3

	DATETIME_CLOCK_init();
    252a:	4b1b      	ldr	r3, [pc, #108]	; (2598 <system_init+0x1a4>)
    252c:	4798      	blx	r3

	I2C_HEATERS_init();
    252e:	4b1b      	ldr	r3, [pc, #108]	; (259c <system_init+0x1a8>)
    2530:	4798      	blx	r3

	SPI_TEMP_init();
    2532:	4b1b      	ldr	r3, [pc, #108]	; (25a0 <system_init+0x1ac>)
    2534:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2536:	4b1b      	ldr	r3, [pc, #108]	; (25a4 <system_init+0x1b0>)
    2538:	4798      	blx	r3

	SPI_HI3593_init();
    253a:	4b1b      	ldr	r3, [pc, #108]	; (25a8 <system_init+0x1b4>)
    253c:	4798      	blx	r3

	I2C_FANS_init();
    253e:	4b1b      	ldr	r3, [pc, #108]	; (25ac <system_init+0x1b8>)
    2540:	4798      	blx	r3

	TIMER_USB_init();
    2542:	4b1b      	ldr	r3, [pc, #108]	; (25b0 <system_init+0x1bc>)
    2544:	4798      	blx	r3
	TIMER_ARINC_init();
    2546:	4b1b      	ldr	r3, [pc, #108]	; (25b4 <system_init+0x1c0>)
    2548:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    254a:	4b1b      	ldr	r3, [pc, #108]	; (25b8 <system_init+0x1c4>)
    254c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    254e:	4b1b      	ldr	r3, [pc, #108]	; (25bc <system_init+0x1c8>)
    2550:	4798      	blx	r3
	TIMER_EVENT_init();
    2552:	4b1b      	ldr	r3, [pc, #108]	; (25c0 <system_init+0x1cc>)
    2554:	4798      	blx	r3
	LIVE_PULSE_init();
    2556:	4b1b      	ldr	r3, [pc, #108]	; (25c4 <system_init+0x1d0>)
    2558:	4798      	blx	r3

	TIMER_HVAC_init();
    255a:	4b1b      	ldr	r3, [pc, #108]	; (25c8 <system_init+0x1d4>)
    255c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    255e:	4b1b      	ldr	r3, [pc, #108]	; (25cc <system_init+0x1d8>)
    2560:	4798      	blx	r3

	CDCUSB_init();
    2562:	4b1b      	ldr	r3, [pc, #108]	; (25d0 <system_init+0x1dc>)
    2564:	4798      	blx	r3

	WATCHDOG_init();
    2566:	4b1b      	ldr	r3, [pc, #108]	; (25d4 <system_init+0x1e0>)
    2568:	4798      	blx	r3
	CAN_CCU_init();
    256a:	4b1b      	ldr	r3, [pc, #108]	; (25d8 <system_init+0x1e4>)
    256c:	4798      	blx	r3
}
    256e:	bf00      	nop
    2570:	bd80      	pop	{r7, pc}
    2572:	bf00      	nop
    2574:	00001951 	.word	0x00001951
    2578:	00001919 	.word	0x00001919
    257c:	000018e1 	.word	0x000018e1
    2580:	000018c1 	.word	0x000018c1
    2584:	0000188d 	.word	0x0000188d
    2588:	000019b1 	.word	0x000019b1
    258c:	000019dd 	.word	0x000019dd
    2590:	00001b05 	.word	0x00001b05
    2594:	00001c4d 	.word	0x00001c4d
    2598:	00001c91 	.word	0x00001c91
    259c:	00001d21 	.word	0x00001d21
    25a0:	00001ded 	.word	0x00001ded
    25a4:	00001e85 	.word	0x00001e85
    25a8:	00001f51 	.word	0x00001f51
    25ac:	00001fe9 	.word	0x00001fe9
    25b0:	00002015 	.word	0x00002015
    25b4:	0000205d 	.word	0x0000205d
    25b8:	000020a5 	.word	0x000020a5
    25bc:	000020ed 	.word	0x000020ed
    25c0:	00002135 	.word	0x00002135
    25c4:	000021b5 	.word	0x000021b5
    25c8:	00002215 	.word	0x00002215
    25cc:	0000226d 	.word	0x0000226d
    25d0:	00002331 	.word	0x00002331
    25d4:	00002369 	.word	0x00002369
    25d8:	000023b1 	.word	0x000023b1

000025dc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    25dc:	b580      	push	{r7, lr}
    25de:	b084      	sub	sp, #16
    25e0:	af00      	add	r7, sp, #0
    25e2:	6078      	str	r0, [r7, #4]
    25e4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    25e6:	2300      	movs	r3, #0
    25e8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	2b00      	cmp	r3, #0
    25ee:	bf14      	ite	ne
    25f0:	2301      	movne	r3, #1
    25f2:	2300      	moveq	r3, #0
    25f4:	b2db      	uxtb	r3, r3
    25f6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    25fa:	4911      	ldr	r1, [pc, #68]	; (2640 <calendar_init+0x64>)
    25fc:	4618      	mov	r0, r3
    25fe:	4b11      	ldr	r3, [pc, #68]	; (2644 <calendar_init+0x68>)
    2600:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	681a      	ldr	r2, [r3, #0]
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	429a      	cmp	r2, r3
    260a:	d101      	bne.n	2610 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    260c:	2300      	movs	r3, #0
    260e:	e013      	b.n	2638 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	681b      	ldr	r3, [r3, #0]
    2614:	2b00      	cmp	r3, #0
    2616:	d002      	beq.n	261e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2618:	f06f 0311 	mvn.w	r3, #17
    261c:	e00c      	b.n	2638 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	683a      	ldr	r2, [r7, #0]
    2622:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	4618      	mov	r0, r3
    2628:	4b07      	ldr	r3, [pc, #28]	; (2648 <calendar_init+0x6c>)
    262a:	4798      	blx	r3
    262c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2634:	619a      	str	r2, [r3, #24]

	return ret;
    2636:	68fb      	ldr	r3, [r7, #12]
}
    2638:	4618      	mov	r0, r3
    263a:	3710      	adds	r7, #16
    263c:	46bd      	mov	sp, r7
    263e:	bd80      	pop	{r7, pc}
    2640:	00013094 	.word	0x00013094
    2644:	00003df5 	.word	0x00003df5
    2648:	000061a1 	.word	0x000061a1

0000264c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    264c:	b580      	push	{r7, lr}
    264e:	b084      	sub	sp, #16
    2650:	af00      	add	r7, sp, #0
    2652:	6078      	str	r0, [r7, #4]
    2654:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	2b00      	cmp	r3, #0
    265a:	d004      	beq.n	2666 <can_async_init+0x1a>
    265c:	683b      	ldr	r3, [r7, #0]
    265e:	2b00      	cmp	r3, #0
    2660:	d001      	beq.n	2666 <can_async_init+0x1a>
    2662:	2301      	movs	r3, #1
    2664:	e000      	b.n	2668 <can_async_init+0x1c>
    2666:	2300      	movs	r3, #0
    2668:	f003 0301 	and.w	r3, r3, #1
    266c:	b2db      	uxtb	r3, r3
    266e:	2241      	movs	r2, #65	; 0x41
    2670:	490e      	ldr	r1, [pc, #56]	; (26ac <can_async_init+0x60>)
    2672:	4618      	mov	r0, r3
    2674:	4b0e      	ldr	r3, [pc, #56]	; (26b0 <can_async_init+0x64>)
    2676:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	6839      	ldr	r1, [r7, #0]
    267c:	4618      	mov	r0, r3
    267e:	4b0d      	ldr	r3, [pc, #52]	; (26b4 <can_async_init+0x68>)
    2680:	4798      	blx	r3
    2682:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2684:	68fb      	ldr	r3, [r7, #12]
    2686:	2b00      	cmp	r3, #0
    2688:	d001      	beq.n	268e <can_async_init+0x42>
		return rc;
    268a:	68fb      	ldr	r3, [r7, #12]
    268c:	e009      	b.n	26a2 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    268e:	687b      	ldr	r3, [r7, #4]
    2690:	4a09      	ldr	r2, [pc, #36]	; (26b8 <can_async_init+0x6c>)
    2692:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	4a09      	ldr	r2, [pc, #36]	; (26bc <can_async_init+0x70>)
    2698:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    269a:	687b      	ldr	r3, [r7, #4]
    269c:	4a08      	ldr	r2, [pc, #32]	; (26c0 <can_async_init+0x74>)
    269e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    26a0:	2300      	movs	r3, #0
}
    26a2:	4618      	mov	r0, r3
    26a4:	3710      	adds	r7, #16
    26a6:	46bd      	mov	sp, r7
    26a8:	bd80      	pop	{r7, pc}
    26aa:	bf00      	nop
    26ac:	000130b0 	.word	0x000130b0
    26b0:	00003df5 	.word	0x00003df5
    26b4:	00004351 	.word	0x00004351
    26b8:	000026c5 	.word	0x000026c5
    26bc:	000026e9 	.word	0x000026e9
    26c0:	0000270d 	.word	0x0000270d

000026c4 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    26c4:	b580      	push	{r7, lr}
    26c6:	b084      	sub	sp, #16
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    26d0:	68fb      	ldr	r3, [r7, #12]
    26d2:	69db      	ldr	r3, [r3, #28]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d003      	beq.n	26e0 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    26d8:	68fb      	ldr	r3, [r7, #12]
    26da:	69db      	ldr	r3, [r3, #28]
    26dc:	68f8      	ldr	r0, [r7, #12]
    26de:	4798      	blx	r3
	}
}
    26e0:	bf00      	nop
    26e2:	3710      	adds	r7, #16
    26e4:	46bd      	mov	sp, r7
    26e6:	bd80      	pop	{r7, pc}

000026e8 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b084      	sub	sp, #16
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    26f4:	68fb      	ldr	r3, [r7, #12]
    26f6:	6a1b      	ldr	r3, [r3, #32]
    26f8:	2b00      	cmp	r3, #0
    26fa:	d003      	beq.n	2704 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    26fc:	68fb      	ldr	r3, [r7, #12]
    26fe:	6a1b      	ldr	r3, [r3, #32]
    2700:	68f8      	ldr	r0, [r7, #12]
    2702:	4798      	blx	r3
	}
}
    2704:	bf00      	nop
    2706:	3710      	adds	r7, #16
    2708:	46bd      	mov	sp, r7
    270a:	bd80      	pop	{r7, pc}

0000270c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    270c:	b580      	push	{r7, lr}
    270e:	b084      	sub	sp, #16
    2710:	af00      	add	r7, sp, #0
    2712:	6078      	str	r0, [r7, #4]
    2714:	460b      	mov	r3, r1
    2716:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    271c:	68fb      	ldr	r3, [r7, #12]
    271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2720:	2b00      	cmp	r3, #0
    2722:	d005      	beq.n	2730 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2724:	68fb      	ldr	r3, [r7, #12]
    2726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2728:	78fa      	ldrb	r2, [r7, #3]
    272a:	4611      	mov	r1, r2
    272c:	68f8      	ldr	r0, [r7, #12]
    272e:	4798      	blx	r3
	}
}
    2730:	bf00      	nop
    2732:	3710      	adds	r7, #16
    2734:	46bd      	mov	sp, r7
    2736:	bd80      	pop	{r7, pc}

00002738 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2738:	b580      	push	{r7, lr}
    273a:	b082      	sub	sp, #8
    273c:	af00      	add	r7, sp, #0
    273e:	6078      	str	r0, [r7, #4]
    2740:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	2b00      	cmp	r3, #0
    2746:	d004      	beq.n	2752 <crc_sync_init+0x1a>
    2748:	683b      	ldr	r3, [r7, #0]
    274a:	2b00      	cmp	r3, #0
    274c:	d001      	beq.n	2752 <crc_sync_init+0x1a>
    274e:	2301      	movs	r3, #1
    2750:	e000      	b.n	2754 <crc_sync_init+0x1c>
    2752:	2300      	movs	r3, #0
    2754:	f003 0301 	and.w	r3, r3, #1
    2758:	b2db      	uxtb	r3, r3
    275a:	222b      	movs	r2, #43	; 0x2b
    275c:	4906      	ldr	r1, [pc, #24]	; (2778 <crc_sync_init+0x40>)
    275e:	4618      	mov	r0, r3
    2760:	4b06      	ldr	r3, [pc, #24]	; (277c <crc_sync_init+0x44>)
    2762:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	6839      	ldr	r1, [r7, #0]
    2768:	4618      	mov	r0, r3
    276a:	4b05      	ldr	r3, [pc, #20]	; (2780 <crc_sync_init+0x48>)
    276c:	4798      	blx	r3
    276e:	4603      	mov	r3, r0
}
    2770:	4618      	mov	r0, r3
    2772:	3708      	adds	r7, #8
    2774:	46bd      	mov	sp, r7
    2776:	bd80      	pop	{r7, pc}
    2778:	000130cc 	.word	0x000130cc
    277c:	00003df5 	.word	0x00003df5
    2780:	00004a59 	.word	0x00004a59

00002784 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2784:	b590      	push	{r4, r7, lr}
    2786:	b083      	sub	sp, #12
    2788:	af00      	add	r7, sp, #0
    278a:	4603      	mov	r3, r0
    278c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    278e:	4b07      	ldr	r3, [pc, #28]	; (27ac <delay_us+0x28>)
    2790:	681c      	ldr	r4, [r3, #0]
    2792:	88fb      	ldrh	r3, [r7, #6]
    2794:	4618      	mov	r0, r3
    2796:	4b06      	ldr	r3, [pc, #24]	; (27b0 <delay_us+0x2c>)
    2798:	4798      	blx	r3
    279a:	4603      	mov	r3, r0
    279c:	4619      	mov	r1, r3
    279e:	4620      	mov	r0, r4
    27a0:	4b04      	ldr	r3, [pc, #16]	; (27b4 <delay_us+0x30>)
    27a2:	4798      	blx	r3
}
    27a4:	bf00      	nop
    27a6:	370c      	adds	r7, #12
    27a8:	46bd      	mov	sp, r7
    27aa:	bd90      	pop	{r4, r7, pc}
    27ac:	200007bc 	.word	0x200007bc
    27b0:	000047a9 	.word	0x000047a9
    27b4:	00004941 	.word	0x00004941

000027b8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    27b8:	b590      	push	{r4, r7, lr}
    27ba:	b083      	sub	sp, #12
    27bc:	af00      	add	r7, sp, #0
    27be:	4603      	mov	r3, r0
    27c0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    27c2:	4b07      	ldr	r3, [pc, #28]	; (27e0 <delay_ms+0x28>)
    27c4:	681c      	ldr	r4, [r3, #0]
    27c6:	88fb      	ldrh	r3, [r7, #6]
    27c8:	4618      	mov	r0, r3
    27ca:	4b06      	ldr	r3, [pc, #24]	; (27e4 <delay_ms+0x2c>)
    27cc:	4798      	blx	r3
    27ce:	4603      	mov	r3, r0
    27d0:	4619      	mov	r1, r3
    27d2:	4620      	mov	r0, r4
    27d4:	4b04      	ldr	r3, [pc, #16]	; (27e8 <delay_ms+0x30>)
    27d6:	4798      	blx	r3
}
    27d8:	bf00      	nop
    27da:	370c      	adds	r7, #12
    27dc:	46bd      	mov	sp, r7
    27de:	bd90      	pop	{r4, r7, pc}
    27e0:	200007bc 	.word	0x200007bc
    27e4:	00004915 	.word	0x00004915
    27e8:	00004941 	.word	0x00004941

000027ec <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	af00      	add	r7, sp, #0
	return _event_system_init();
    27f0:	4b02      	ldr	r3, [pc, #8]	; (27fc <event_system_init+0x10>)
    27f2:	4798      	blx	r3
    27f4:	4603      	mov	r3, r0
}
    27f6:	4618      	mov	r0, r3
    27f8:	bd80      	pop	{r7, pc}
    27fa:	bf00      	nop
    27fc:	00005215 	.word	0x00005215

00002800 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2800:	b580      	push	{r7, lr}
    2802:	b082      	sub	sp, #8
    2804:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2806:	2300      	movs	r3, #0
    2808:	80fb      	strh	r3, [r7, #6]
    280a:	e00e      	b.n	282a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    280c:	88fb      	ldrh	r3, [r7, #6]
    280e:	4a0c      	ldr	r2, [pc, #48]	; (2840 <ext_irq_init+0x40>)
    2810:	00db      	lsls	r3, r3, #3
    2812:	4413      	add	r3, r2
    2814:	f04f 32ff 	mov.w	r2, #4294967295
    2818:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    281a:	88fb      	ldrh	r3, [r7, #6]
    281c:	4a08      	ldr	r2, [pc, #32]	; (2840 <ext_irq_init+0x40>)
    281e:	2100      	movs	r1, #0
    2820:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2824:	88fb      	ldrh	r3, [r7, #6]
    2826:	3301      	adds	r3, #1
    2828:	80fb      	strh	r3, [r7, #6]
    282a:	88fb      	ldrh	r3, [r7, #6]
    282c:	2b08      	cmp	r3, #8
    282e:	d9ed      	bls.n	280c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2830:	4804      	ldr	r0, [pc, #16]	; (2844 <ext_irq_init+0x44>)
    2832:	4b05      	ldr	r3, [pc, #20]	; (2848 <ext_irq_init+0x48>)
    2834:	4798      	blx	r3
    2836:	4603      	mov	r3, r0
}
    2838:	4618      	mov	r0, r3
    283a:	3708      	adds	r7, #8
    283c:	46bd      	mov	sp, r7
    283e:	bd80      	pop	{r7, pc}
    2840:	200007c0 	.word	0x200007c0
    2844:	000029a5 	.word	0x000029a5
    2848:	00004d99 	.word	0x00004d99

0000284c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    284c:	b580      	push	{r7, lr}
    284e:	b086      	sub	sp, #24
    2850:	af00      	add	r7, sp, #0
    2852:	6078      	str	r0, [r7, #4]
    2854:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2856:	2300      	movs	r3, #0
    2858:	75fb      	strb	r3, [r7, #23]
    285a:	2300      	movs	r3, #0
    285c:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    285e:	2300      	movs	r3, #0
    2860:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2862:	e012      	b.n	288a <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2864:	7dfb      	ldrb	r3, [r7, #23]
    2866:	4a4d      	ldr	r2, [pc, #308]	; (299c <ext_irq_register+0x150>)
    2868:	00db      	lsls	r3, r3, #3
    286a:	4413      	add	r3, r2
    286c:	685a      	ldr	r2, [r3, #4]
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	429a      	cmp	r2, r3
    2872:	d107      	bne.n	2884 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2874:	7dfb      	ldrb	r3, [r7, #23]
    2876:	4949      	ldr	r1, [pc, #292]	; (299c <ext_irq_register+0x150>)
    2878:	683a      	ldr	r2, [r7, #0]
    287a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    287e:	2301      	movs	r3, #1
    2880:	757b      	strb	r3, [r7, #21]
			break;
    2882:	e005      	b.n	2890 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2884:	7dfb      	ldrb	r3, [r7, #23]
    2886:	3301      	adds	r3, #1
    2888:	75fb      	strb	r3, [r7, #23]
    288a:	7dfb      	ldrb	r3, [r7, #23]
    288c:	2b08      	cmp	r3, #8
    288e:	d9e9      	bls.n	2864 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2890:	683b      	ldr	r3, [r7, #0]
    2892:	2b00      	cmp	r3, #0
    2894:	d10e      	bne.n	28b4 <ext_irq_register+0x68>
		if (!found) {
    2896:	7d7b      	ldrb	r3, [r7, #21]
    2898:	f083 0301 	eor.w	r3, r3, #1
    289c:	b2db      	uxtb	r3, r3
    289e:	2b00      	cmp	r3, #0
    28a0:	d002      	beq.n	28a8 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    28a2:	f06f 030c 	mvn.w	r3, #12
    28a6:	e074      	b.n	2992 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    28a8:	2100      	movs	r1, #0
    28aa:	6878      	ldr	r0, [r7, #4]
    28ac:	4b3c      	ldr	r3, [pc, #240]	; (29a0 <ext_irq_register+0x154>)
    28ae:	4798      	blx	r3
    28b0:	4603      	mov	r3, r0
    28b2:	e06e      	b.n	2992 <ext_irq_register+0x146>
	}

	if (!found) {
    28b4:	7d7b      	ldrb	r3, [r7, #21]
    28b6:	f083 0301 	eor.w	r3, r3, #1
    28ba:	b2db      	uxtb	r3, r3
    28bc:	2b00      	cmp	r3, #0
    28be:	d05a      	beq.n	2976 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    28c0:	2300      	movs	r3, #0
    28c2:	75fb      	strb	r3, [r7, #23]
    28c4:	e016      	b.n	28f4 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    28c6:	7dfb      	ldrb	r3, [r7, #23]
    28c8:	4a34      	ldr	r2, [pc, #208]	; (299c <ext_irq_register+0x150>)
    28ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d10d      	bne.n	28ee <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    28d2:	7dfb      	ldrb	r3, [r7, #23]
    28d4:	4931      	ldr	r1, [pc, #196]	; (299c <ext_irq_register+0x150>)
    28d6:	683a      	ldr	r2, [r7, #0]
    28d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    28dc:	7dfb      	ldrb	r3, [r7, #23]
    28de:	4a2f      	ldr	r2, [pc, #188]	; (299c <ext_irq_register+0x150>)
    28e0:	00db      	lsls	r3, r3, #3
    28e2:	4413      	add	r3, r2
    28e4:	687a      	ldr	r2, [r7, #4]
    28e6:	605a      	str	r2, [r3, #4]
				found           = true;
    28e8:	2301      	movs	r3, #1
    28ea:	757b      	strb	r3, [r7, #21]
				break;
    28ec:	e005      	b.n	28fa <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    28ee:	7dfb      	ldrb	r3, [r7, #23]
    28f0:	3301      	adds	r3, #1
    28f2:	75fb      	strb	r3, [r7, #23]
    28f4:	7dfb      	ldrb	r3, [r7, #23]
    28f6:	2b08      	cmp	r3, #8
    28f8:	d9e5      	bls.n	28c6 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    28fa:	e036      	b.n	296a <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    28fc:	7dfb      	ldrb	r3, [r7, #23]
    28fe:	4a27      	ldr	r2, [pc, #156]	; (299c <ext_irq_register+0x150>)
    2900:	00db      	lsls	r3, r3, #3
    2902:	4413      	add	r3, r2
    2904:	685a      	ldr	r2, [r3, #4]
    2906:	7dbb      	ldrb	r3, [r7, #22]
    2908:	4924      	ldr	r1, [pc, #144]	; (299c <ext_irq_register+0x150>)
    290a:	00db      	lsls	r3, r3, #3
    290c:	440b      	add	r3, r1
    290e:	685b      	ldr	r3, [r3, #4]
    2910:	429a      	cmp	r2, r3
    2912:	d227      	bcs.n	2964 <ext_irq_register+0x118>
    2914:	7dbb      	ldrb	r3, [r7, #22]
    2916:	4a21      	ldr	r2, [pc, #132]	; (299c <ext_irq_register+0x150>)
    2918:	00db      	lsls	r3, r3, #3
    291a:	4413      	add	r3, r2
    291c:	685b      	ldr	r3, [r3, #4]
    291e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2922:	d01f      	beq.n	2964 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2924:	7dbb      	ldrb	r3, [r7, #22]
    2926:	491d      	ldr	r1, [pc, #116]	; (299c <ext_irq_register+0x150>)
    2928:	f107 020c 	add.w	r2, r7, #12
    292c:	00db      	lsls	r3, r3, #3
    292e:	440b      	add	r3, r1
    2930:	e893 0003 	ldmia.w	r3, {r0, r1}
    2934:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2938:	7dbb      	ldrb	r3, [r7, #22]
    293a:	7dfa      	ldrb	r2, [r7, #23]
    293c:	4817      	ldr	r0, [pc, #92]	; (299c <ext_irq_register+0x150>)
    293e:	4917      	ldr	r1, [pc, #92]	; (299c <ext_irq_register+0x150>)
    2940:	00db      	lsls	r3, r3, #3
    2942:	4403      	add	r3, r0
    2944:	00d2      	lsls	r2, r2, #3
    2946:	440a      	add	r2, r1
    2948:	e892 0003 	ldmia.w	r2, {r0, r1}
    294c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2950:	7dfb      	ldrb	r3, [r7, #23]
    2952:	4a12      	ldr	r2, [pc, #72]	; (299c <ext_irq_register+0x150>)
    2954:	00db      	lsls	r3, r3, #3
    2956:	4413      	add	r3, r2
    2958:	f107 020c 	add.w	r2, r7, #12
    295c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2960:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2964:	7dbb      	ldrb	r3, [r7, #22]
    2966:	3301      	adds	r3, #1
    2968:	75bb      	strb	r3, [r7, #22]
    296a:	7dbb      	ldrb	r3, [r7, #22]
    296c:	2b08      	cmp	r3, #8
    296e:	d802      	bhi.n	2976 <ext_irq_register+0x12a>
    2970:	7dfb      	ldrb	r3, [r7, #23]
    2972:	2b08      	cmp	r3, #8
    2974:	d9c2      	bls.n	28fc <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2976:	7d7b      	ldrb	r3, [r7, #21]
    2978:	f083 0301 	eor.w	r3, r3, #1
    297c:	b2db      	uxtb	r3, r3
    297e:	2b00      	cmp	r3, #0
    2980:	d002      	beq.n	2988 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2982:	f06f 030c 	mvn.w	r3, #12
    2986:	e004      	b.n	2992 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2988:	2101      	movs	r1, #1
    298a:	6878      	ldr	r0, [r7, #4]
    298c:	4b04      	ldr	r3, [pc, #16]	; (29a0 <ext_irq_register+0x154>)
    298e:	4798      	blx	r3
    2990:	4603      	mov	r3, r0
}
    2992:	4618      	mov	r0, r3
    2994:	3718      	adds	r7, #24
    2996:	46bd      	mov	sp, r7
    2998:	bd80      	pop	{r7, pc}
    299a:	bf00      	nop
    299c:	200007c0 	.word	0x200007c0
    29a0:	00004f2d 	.word	0x00004f2d

000029a4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    29a4:	b580      	push	{r7, lr}
    29a6:	b084      	sub	sp, #16
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    29ac:	2300      	movs	r3, #0
    29ae:	73fb      	strb	r3, [r7, #15]
    29b0:	2309      	movs	r3, #9
    29b2:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    29b4:	e02a      	b.n	2a0c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    29b6:	7bba      	ldrb	r2, [r7, #14]
    29b8:	7bfb      	ldrb	r3, [r7, #15]
    29ba:	4413      	add	r3, r2
    29bc:	105b      	asrs	r3, r3, #1
    29be:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    29c0:	7b7b      	ldrb	r3, [r7, #13]
    29c2:	2b08      	cmp	r3, #8
    29c4:	d827      	bhi.n	2a16 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    29c6:	7b7b      	ldrb	r3, [r7, #13]
    29c8:	4a16      	ldr	r2, [pc, #88]	; (2a24 <process_ext_irq+0x80>)
    29ca:	00db      	lsls	r3, r3, #3
    29cc:	4413      	add	r3, r2
    29ce:	685a      	ldr	r2, [r3, #4]
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	429a      	cmp	r2, r3
    29d4:	d10b      	bne.n	29ee <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    29d6:	7b7b      	ldrb	r3, [r7, #13]
    29d8:	4a12      	ldr	r2, [pc, #72]	; (2a24 <process_ext_irq+0x80>)
    29da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29de:	2b00      	cmp	r3, #0
    29e0:	d01b      	beq.n	2a1a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    29e2:	7b7b      	ldrb	r3, [r7, #13]
    29e4:	4a0f      	ldr	r2, [pc, #60]	; (2a24 <process_ext_irq+0x80>)
    29e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29ea:	4798      	blx	r3
			}
			return;
    29ec:	e015      	b.n	2a1a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    29ee:	7b7b      	ldrb	r3, [r7, #13]
    29f0:	4a0c      	ldr	r2, [pc, #48]	; (2a24 <process_ext_irq+0x80>)
    29f2:	00db      	lsls	r3, r3, #3
    29f4:	4413      	add	r3, r2
    29f6:	685a      	ldr	r2, [r3, #4]
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	429a      	cmp	r2, r3
    29fc:	d203      	bcs.n	2a06 <process_ext_irq+0x62>
			lower = middle + 1;
    29fe:	7b7b      	ldrb	r3, [r7, #13]
    2a00:	3301      	adds	r3, #1
    2a02:	73fb      	strb	r3, [r7, #15]
    2a04:	e002      	b.n	2a0c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2a06:	7b7b      	ldrb	r3, [r7, #13]
    2a08:	3b01      	subs	r3, #1
    2a0a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2a0c:	7bba      	ldrb	r2, [r7, #14]
    2a0e:	7bfb      	ldrb	r3, [r7, #15]
    2a10:	429a      	cmp	r2, r3
    2a12:	d2d0      	bcs.n	29b6 <process_ext_irq+0x12>
    2a14:	e002      	b.n	2a1c <process_ext_irq+0x78>
			return;
    2a16:	bf00      	nop
    2a18:	e000      	b.n	2a1c <process_ext_irq+0x78>
			return;
    2a1a:	bf00      	nop
		}
	}
}
    2a1c:	3710      	adds	r7, #16
    2a1e:	46bd      	mov	sp, r7
    2a20:	bd80      	pop	{r7, pc}
    2a22:	bf00      	nop
    2a24:	200007c0 	.word	0x200007c0

00002a28 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2a28:	b580      	push	{r7, lr}
    2a2a:	b08a      	sub	sp, #40	; 0x28
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	60f8      	str	r0, [r7, #12]
    2a30:	60b9      	str	r1, [r7, #8]
    2a32:	4613      	mov	r3, r2
    2a34:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2a36:	68fb      	ldr	r3, [r7, #12]
    2a38:	3b14      	subs	r3, #20
    2a3a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a3e:	8b9b      	ldrh	r3, [r3, #28]
    2a40:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2a42:	88fb      	ldrh	r3, [r7, #6]
    2a44:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2a46:	f248 0301 	movw	r3, #32769	; 0x8001
    2a4a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2a4c:	68bb      	ldr	r3, [r7, #8]
    2a4e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a52:	f107 0214 	add.w	r2, r7, #20
    2a56:	4611      	mov	r1, r2
    2a58:	4618      	mov	r0, r3
    2a5a:	4b06      	ldr	r3, [pc, #24]	; (2a74 <i2c_m_sync_read+0x4c>)
    2a5c:	4798      	blx	r3
    2a5e:	6238      	str	r0, [r7, #32]

	if (ret) {
    2a60:	6a3b      	ldr	r3, [r7, #32]
    2a62:	2b00      	cmp	r3, #0
    2a64:	d001      	beq.n	2a6a <i2c_m_sync_read+0x42>
		return ret;
    2a66:	6a3b      	ldr	r3, [r7, #32]
    2a68:	e000      	b.n	2a6c <i2c_m_sync_read+0x44>
	}

	return n;
    2a6a:	88fb      	ldrh	r3, [r7, #6]
}
    2a6c:	4618      	mov	r0, r3
    2a6e:	3728      	adds	r7, #40	; 0x28
    2a70:	46bd      	mov	sp, r7
    2a72:	bd80      	pop	{r7, pc}
    2a74:	00006e29 	.word	0x00006e29

00002a78 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b08a      	sub	sp, #40	; 0x28
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	60f8      	str	r0, [r7, #12]
    2a80:	60b9      	str	r1, [r7, #8]
    2a82:	4613      	mov	r3, r2
    2a84:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2a86:	68fb      	ldr	r3, [r7, #12]
    2a88:	3b14      	subs	r3, #20
    2a8a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a8e:	8b9b      	ldrh	r3, [r3, #28]
    2a90:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2a92:	88fb      	ldrh	r3, [r7, #6]
    2a94:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2a9a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2a9c:	68bb      	ldr	r3, [r7, #8]
    2a9e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2aa2:	f107 0214 	add.w	r2, r7, #20
    2aa6:	4611      	mov	r1, r2
    2aa8:	4618      	mov	r0, r3
    2aaa:	4b06      	ldr	r3, [pc, #24]	; (2ac4 <i2c_m_sync_write+0x4c>)
    2aac:	4798      	blx	r3
    2aae:	6238      	str	r0, [r7, #32]

	if (ret) {
    2ab0:	6a3b      	ldr	r3, [r7, #32]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d001      	beq.n	2aba <i2c_m_sync_write+0x42>
		return ret;
    2ab6:	6a3b      	ldr	r3, [r7, #32]
    2ab8:	e000      	b.n	2abc <i2c_m_sync_write+0x44>
	}

	return n;
    2aba:	88fb      	ldrh	r3, [r7, #6]
}
    2abc:	4618      	mov	r0, r3
    2abe:	3728      	adds	r7, #40	; 0x28
    2ac0:	46bd      	mov	sp, r7
    2ac2:	bd80      	pop	{r7, pc}
    2ac4:	00006e29 	.word	0x00006e29

00002ac8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	b084      	sub	sp, #16
    2acc:	af00      	add	r7, sp, #0
    2ace:	6078      	str	r0, [r7, #4]
    2ad0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	bf14      	ite	ne
    2ad8:	2301      	movne	r3, #1
    2ada:	2300      	moveq	r3, #0
    2adc:	b2db      	uxtb	r3, r3
    2ade:	225e      	movs	r2, #94	; 0x5e
    2ae0:	490c      	ldr	r1, [pc, #48]	; (2b14 <i2c_m_sync_init+0x4c>)
    2ae2:	4618      	mov	r0, r3
    2ae4:	4b0c      	ldr	r3, [pc, #48]	; (2b18 <i2c_m_sync_init+0x50>)
    2ae6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	6839      	ldr	r1, [r7, #0]
    2aec:	4618      	mov	r0, r3
    2aee:	4b0b      	ldr	r3, [pc, #44]	; (2b1c <i2c_m_sync_init+0x54>)
    2af0:	4798      	blx	r3
    2af2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	2b00      	cmp	r3, #0
    2af8:	d001      	beq.n	2afe <i2c_m_sync_init+0x36>
		return init_status;
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	e006      	b.n	2b0c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	4a07      	ldr	r2, [pc, #28]	; (2b20 <i2c_m_sync_init+0x58>)
    2b02:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	4a07      	ldr	r2, [pc, #28]	; (2b24 <i2c_m_sync_init+0x5c>)
    2b08:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2b0a:	2300      	movs	r3, #0
}
    2b0c:	4618      	mov	r0, r3
    2b0e:	3710      	adds	r7, #16
    2b10:	46bd      	mov	sp, r7
    2b12:	bd80      	pop	{r7, pc}
    2b14:	000130e8 	.word	0x000130e8
    2b18:	00003df5 	.word	0x00003df5
    2b1c:	00006c25 	.word	0x00006c25
    2b20:	00002a29 	.word	0x00002a29
    2b24:	00002a79 	.word	0x00002a79

00002b28 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	b082      	sub	sp, #8
    2b2c:	af00      	add	r7, sp, #0
    2b2e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	4618      	mov	r0, r3
    2b34:	4b03      	ldr	r3, [pc, #12]	; (2b44 <i2c_m_sync_enable+0x1c>)
    2b36:	4798      	blx	r3
    2b38:	4603      	mov	r3, r0
}
    2b3a:	4618      	mov	r0, r3
    2b3c:	3708      	adds	r7, #8
    2b3e:	46bd      	mov	sp, r7
    2b40:	bd80      	pop	{r7, pc}
    2b42:	bf00      	nop
    2b44:	00006c6d 	.word	0x00006c6d

00002b48 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2b48:	b480      	push	{r7}
    2b4a:	b085      	sub	sp, #20
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	60f8      	str	r0, [r7, #12]
    2b50:	460b      	mov	r3, r1
    2b52:	607a      	str	r2, [r7, #4]
    2b54:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2b56:	897b      	ldrh	r3, [r7, #10]
    2b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2b5c:	b21a      	sxth	r2, r3
    2b5e:	687b      	ldr	r3, [r7, #4]
    2b60:	b21b      	sxth	r3, r3
    2b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2b66:	b21b      	sxth	r3, r3
    2b68:	4313      	orrs	r3, r2
    2b6a:	b21b      	sxth	r3, r3
    2b6c:	b29a      	uxth	r2, r3
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	839a      	strh	r2, [r3, #28]
    2b72:	68fb      	ldr	r3, [r7, #12]
    2b74:	8b9b      	ldrh	r3, [r3, #28]
}
    2b76:	4618      	mov	r0, r3
    2b78:	3714      	adds	r7, #20
    2b7a:	46bd      	mov	sp, r7
    2b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b80:	4770      	bx	lr

00002b82 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2b82:	b480      	push	{r7}
    2b84:	b083      	sub	sp, #12
    2b86:	af00      	add	r7, sp, #0
    2b88:	6078      	str	r0, [r7, #4]
    2b8a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	f103 0214 	add.w	r2, r3, #20
    2b92:	683b      	ldr	r3, [r7, #0]
    2b94:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2b96:	2300      	movs	r3, #0
}
    2b98:	4618      	mov	r0, r3
    2b9a:	370c      	adds	r7, #12
    2b9c:	46bd      	mov	sp, r7
    2b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ba2:	4770      	bx	lr

00002ba4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b084      	sub	sp, #16
    2ba8:	af00      	add	r7, sp, #0
    2baa:	60f8      	str	r0, [r7, #12]
    2bac:	60b9      	str	r1, [r7, #8]
    2bae:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2bb0:	68fb      	ldr	r3, [r7, #12]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d004      	beq.n	2bc0 <pwm_init+0x1c>
    2bb6:	68bb      	ldr	r3, [r7, #8]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d001      	beq.n	2bc0 <pwm_init+0x1c>
    2bbc:	2301      	movs	r3, #1
    2bbe:	e000      	b.n	2bc2 <pwm_init+0x1e>
    2bc0:	2300      	movs	r3, #0
    2bc2:	f003 0301 	and.w	r3, r3, #1
    2bc6:	b2db      	uxtb	r3, r3
    2bc8:	2233      	movs	r2, #51	; 0x33
    2bca:	490a      	ldr	r1, [pc, #40]	; (2bf4 <pwm_init+0x50>)
    2bcc:	4618      	mov	r0, r3
    2bce:	4b0a      	ldr	r3, [pc, #40]	; (2bf8 <pwm_init+0x54>)
    2bd0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2bd2:	68fb      	ldr	r3, [r7, #12]
    2bd4:	68b9      	ldr	r1, [r7, #8]
    2bd6:	4618      	mov	r0, r3
    2bd8:	4b08      	ldr	r3, [pc, #32]	; (2bfc <pwm_init+0x58>)
    2bda:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2bdc:	68fb      	ldr	r3, [r7, #12]
    2bde:	4a08      	ldr	r2, [pc, #32]	; (2c00 <pwm_init+0x5c>)
    2be0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2be2:	68fb      	ldr	r3, [r7, #12]
    2be4:	4a07      	ldr	r2, [pc, #28]	; (2c04 <pwm_init+0x60>)
    2be6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2be8:	2300      	movs	r3, #0
}
    2bea:	4618      	mov	r0, r3
    2bec:	3710      	adds	r7, #16
    2bee:	46bd      	mov	sp, r7
    2bf0:	bd80      	pop	{r7, pc}
    2bf2:	bf00      	nop
    2bf4:	00013104 	.word	0x00013104
    2bf8:	00003df5 	.word	0x00003df5
    2bfc:	000084c1 	.word	0x000084c1
    2c00:	00002c09 	.word	0x00002c09
    2c04:	00002c2d 	.word	0x00002c2d

00002c08 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2c08:	b580      	push	{r7, lr}
    2c0a:	b084      	sub	sp, #16
    2c0c:	af00      	add	r7, sp, #0
    2c0e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2c14:	68fb      	ldr	r3, [r7, #12]
    2c16:	695b      	ldr	r3, [r3, #20]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d003      	beq.n	2c24 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2c1c:	68fb      	ldr	r3, [r7, #12]
    2c1e:	695b      	ldr	r3, [r3, #20]
    2c20:	68f8      	ldr	r0, [r7, #12]
    2c22:	4798      	blx	r3
	}
}
    2c24:	bf00      	nop
    2c26:	3710      	adds	r7, #16
    2c28:	46bd      	mov	sp, r7
    2c2a:	bd80      	pop	{r7, pc}

00002c2c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b084      	sub	sp, #16
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2c38:	68fb      	ldr	r3, [r7, #12]
    2c3a:	699b      	ldr	r3, [r3, #24]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d003      	beq.n	2c48 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2c40:	68fb      	ldr	r3, [r7, #12]
    2c42:	699b      	ldr	r3, [r3, #24]
    2c44:	68f8      	ldr	r0, [r7, #12]
    2c46:	4798      	blx	r3
	}
}
    2c48:	bf00      	nop
    2c4a:	3710      	adds	r7, #16
    2c4c:	46bd      	mov	sp, r7
    2c4e:	bd80      	pop	{r7, pc}

00002c50 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2c50:	b580      	push	{r7, lr}
    2c52:	b082      	sub	sp, #8
    2c54:	af00      	add	r7, sp, #0
    2c56:	6078      	str	r0, [r7, #4]
    2c58:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d004      	beq.n	2c6a <qspi_sync_init+0x1a>
    2c60:	683b      	ldr	r3, [r7, #0]
    2c62:	2b00      	cmp	r3, #0
    2c64:	d001      	beq.n	2c6a <qspi_sync_init+0x1a>
    2c66:	2301      	movs	r3, #1
    2c68:	e000      	b.n	2c6c <qspi_sync_init+0x1c>
    2c6a:	2300      	movs	r3, #0
    2c6c:	f003 0301 	and.w	r3, r3, #1
    2c70:	b2db      	uxtb	r3, r3
    2c72:	2231      	movs	r2, #49	; 0x31
    2c74:	4906      	ldr	r1, [pc, #24]	; (2c90 <qspi_sync_init+0x40>)
    2c76:	4618      	mov	r0, r3
    2c78:	4b06      	ldr	r3, [pc, #24]	; (2c94 <qspi_sync_init+0x44>)
    2c7a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2c7c:	687b      	ldr	r3, [r7, #4]
    2c7e:	6839      	ldr	r1, [r7, #0]
    2c80:	4618      	mov	r0, r3
    2c82:	4b05      	ldr	r3, [pc, #20]	; (2c98 <qspi_sync_init+0x48>)
    2c84:	4798      	blx	r3
    2c86:	4603      	mov	r3, r0
}
    2c88:	4618      	mov	r0, r3
    2c8a:	3708      	adds	r7, #8
    2c8c:	46bd      	mov	sp, r7
    2c8e:	bd80      	pop	{r7, pc}
    2c90:	0001311c 	.word	0x0001311c
    2c94:	00003df5 	.word	0x00003df5
    2c98:	00005ddd 	.word	0x00005ddd

00002c9c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2c9c:	b580      	push	{r7, lr}
    2c9e:	b082      	sub	sp, #8
    2ca0:	af00      	add	r7, sp, #0
    2ca2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	bf14      	ite	ne
    2caa:	2301      	movne	r3, #1
    2cac:	2300      	moveq	r3, #0
    2cae:	b2db      	uxtb	r3, r3
    2cb0:	223f      	movs	r2, #63	; 0x3f
    2cb2:	4906      	ldr	r1, [pc, #24]	; (2ccc <qspi_sync_enable+0x30>)
    2cb4:	4618      	mov	r0, r3
    2cb6:	4b06      	ldr	r3, [pc, #24]	; (2cd0 <qspi_sync_enable+0x34>)
    2cb8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	4618      	mov	r0, r3
    2cbe:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <qspi_sync_enable+0x38>)
    2cc0:	4798      	blx	r3
    2cc2:	4603      	mov	r3, r0
}
    2cc4:	4618      	mov	r0, r3
    2cc6:	3708      	adds	r7, #8
    2cc8:	46bd      	mov	sp, r7
    2cca:	bd80      	pop	{r7, pc}
    2ccc:	0001311c 	.word	0x0001311c
    2cd0:	00003df5 	.word	0x00003df5
    2cd4:	00005e51 	.word	0x00005e51

00002cd8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b082      	sub	sp, #8
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	bf14      	ite	ne
    2ce6:	2301      	movne	r3, #1
    2ce8:	2300      	moveq	r3, #0
    2cea:	b2db      	uxtb	r3, r3
    2cec:	2246      	movs	r2, #70	; 0x46
    2cee:	4906      	ldr	r1, [pc, #24]	; (2d08 <qspi_sync_disable+0x30>)
    2cf0:	4618      	mov	r0, r3
    2cf2:	4b06      	ldr	r3, [pc, #24]	; (2d0c <qspi_sync_disable+0x34>)
    2cf4:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	4618      	mov	r0, r3
    2cfa:	4b05      	ldr	r3, [pc, #20]	; (2d10 <qspi_sync_disable+0x38>)
    2cfc:	4798      	blx	r3
    2cfe:	4603      	mov	r3, r0
}
    2d00:	4618      	mov	r0, r3
    2d02:	3708      	adds	r7, #8
    2d04:	46bd      	mov	sp, r7
    2d06:	bd80      	pop	{r7, pc}
    2d08:	0001311c 	.word	0x0001311c
    2d0c:	00003df5 	.word	0x00003df5
    2d10:	00005e75 	.word	0x00005e75

00002d14 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b082      	sub	sp, #8
    2d18:	af00      	add	r7, sp, #0
    2d1a:	6078      	str	r0, [r7, #4]
    2d1c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	2b00      	cmp	r3, #0
    2d22:	d004      	beq.n	2d2e <qspi_sync_serial_run_command+0x1a>
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	2b00      	cmp	r3, #0
    2d28:	d001      	beq.n	2d2e <qspi_sync_serial_run_command+0x1a>
    2d2a:	2301      	movs	r3, #1
    2d2c:	e000      	b.n	2d30 <qspi_sync_serial_run_command+0x1c>
    2d2e:	2300      	movs	r3, #0
    2d30:	f003 0301 	and.w	r3, r3, #1
    2d34:	b2db      	uxtb	r3, r3
    2d36:	224d      	movs	r2, #77	; 0x4d
    2d38:	4906      	ldr	r1, [pc, #24]	; (2d54 <qspi_sync_serial_run_command+0x40>)
    2d3a:	4618      	mov	r0, r3
    2d3c:	4b06      	ldr	r3, [pc, #24]	; (2d58 <qspi_sync_serial_run_command+0x44>)
    2d3e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	6839      	ldr	r1, [r7, #0]
    2d44:	4618      	mov	r0, r3
    2d46:	4b05      	ldr	r3, [pc, #20]	; (2d5c <qspi_sync_serial_run_command+0x48>)
    2d48:	4798      	blx	r3
    2d4a:	4603      	mov	r3, r0
}
    2d4c:	4618      	mov	r0, r3
    2d4e:	3708      	adds	r7, #8
    2d50:	46bd      	mov	sp, r7
    2d52:	bd80      	pop	{r7, pc}
    2d54:	0001311c 	.word	0x0001311c
    2d58:	00003df5 	.word	0x00003df5
    2d5c:	00005fc1 	.word	0x00005fc1

00002d60 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b084      	sub	sp, #16
    2d64:	af00      	add	r7, sp, #0
    2d66:	6078      	str	r0, [r7, #4]
    2d68:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2d6a:	2300      	movs	r3, #0
    2d6c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	2b00      	cmp	r3, #0
    2d72:	d004      	beq.n	2d7e <spi_m_sync_init+0x1e>
    2d74:	683b      	ldr	r3, [r7, #0]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d001      	beq.n	2d7e <spi_m_sync_init+0x1e>
    2d7a:	2301      	movs	r3, #1
    2d7c:	e000      	b.n	2d80 <spi_m_sync_init+0x20>
    2d7e:	2300      	movs	r3, #0
    2d80:	f003 0301 	and.w	r3, r3, #1
    2d84:	b2db      	uxtb	r3, r3
    2d86:	2240      	movs	r2, #64	; 0x40
    2d88:	4910      	ldr	r1, [pc, #64]	; (2dcc <spi_m_sync_init+0x6c>)
    2d8a:	4618      	mov	r0, r3
    2d8c:	4b10      	ldr	r3, [pc, #64]	; (2dd0 <spi_m_sync_init+0x70>)
    2d8e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2d90:	687b      	ldr	r3, [r7, #4]
    2d92:	683a      	ldr	r2, [r7, #0]
    2d94:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	3304      	adds	r3, #4
    2d9a:	6839      	ldr	r1, [r7, #0]
    2d9c:	4618      	mov	r0, r3
    2d9e:	4b0d      	ldr	r3, [pc, #52]	; (2dd4 <spi_m_sync_init+0x74>)
    2da0:	4798      	blx	r3
    2da2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	2b00      	cmp	r3, #0
    2da8:	da01      	bge.n	2dae <spi_m_sync_init+0x4e>
		return rc;
    2daa:	68fb      	ldr	r3, [r7, #12]
    2dac:	e00a      	b.n	2dc4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2db4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	4a07      	ldr	r2, [pc, #28]	; (2dd8 <spi_m_sync_init+0x78>)
    2dba:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	4a07      	ldr	r2, [pc, #28]	; (2ddc <spi_m_sync_init+0x7c>)
    2dc0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2dc2:	2300      	movs	r3, #0
}
    2dc4:	4618      	mov	r0, r3
    2dc6:	3710      	adds	r7, #16
    2dc8:	46bd      	mov	sp, r7
    2dca:	bd80      	pop	{r7, pc}
    2dcc:	00013138 	.word	0x00013138
    2dd0:	00003df5 	.word	0x00003df5
    2dd4:	00007325 	.word	0x00007325
    2dd8:	00002e59 	.word	0x00002e59
    2ddc:	00002eb1 	.word	0x00002eb1

00002de0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2de0:	b580      	push	{r7, lr}
    2de2:	b082      	sub	sp, #8
    2de4:	af00      	add	r7, sp, #0
    2de6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	2b00      	cmp	r3, #0
    2dec:	bf14      	ite	ne
    2dee:	2301      	movne	r3, #1
    2df0:	2300      	moveq	r3, #0
    2df2:	b2db      	uxtb	r3, r3
    2df4:	2257      	movs	r2, #87	; 0x57
    2df6:	4906      	ldr	r1, [pc, #24]	; (2e10 <spi_m_sync_enable+0x30>)
    2df8:	4618      	mov	r0, r3
    2dfa:	4b06      	ldr	r3, [pc, #24]	; (2e14 <spi_m_sync_enable+0x34>)
    2dfc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	3304      	adds	r3, #4
    2e02:	4618      	mov	r0, r3
    2e04:	4b04      	ldr	r3, [pc, #16]	; (2e18 <spi_m_sync_enable+0x38>)
    2e06:	4798      	blx	r3
}
    2e08:	bf00      	nop
    2e0a:	3708      	adds	r7, #8
    2e0c:	46bd      	mov	sp, r7
    2e0e:	bd80      	pop	{r7, pc}
    2e10:	00013138 	.word	0x00013138
    2e14:	00003df5 	.word	0x00003df5
    2e18:	00007431 	.word	0x00007431

00002e1c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b082      	sub	sp, #8
    2e20:	af00      	add	r7, sp, #0
    2e22:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	2b00      	cmp	r3, #0
    2e28:	bf14      	ite	ne
    2e2a:	2301      	movne	r3, #1
    2e2c:	2300      	moveq	r3, #0
    2e2e:	b2db      	uxtb	r3, r3
    2e30:	225d      	movs	r2, #93	; 0x5d
    2e32:	4906      	ldr	r1, [pc, #24]	; (2e4c <spi_m_sync_disable+0x30>)
    2e34:	4618      	mov	r0, r3
    2e36:	4b06      	ldr	r3, [pc, #24]	; (2e50 <spi_m_sync_disable+0x34>)
    2e38:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	3304      	adds	r3, #4
    2e3e:	4618      	mov	r0, r3
    2e40:	4b04      	ldr	r3, [pc, #16]	; (2e54 <spi_m_sync_disable+0x38>)
    2e42:	4798      	blx	r3
}
    2e44:	bf00      	nop
    2e46:	3708      	adds	r7, #8
    2e48:	46bd      	mov	sp, r7
    2e4a:	bd80      	pop	{r7, pc}
    2e4c:	00013138 	.word	0x00013138
    2e50:	00003df5 	.word	0x00003df5
    2e54:	00007481 	.word	0x00007481

00002e58 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2e58:	b580      	push	{r7, lr}
    2e5a:	b088      	sub	sp, #32
    2e5c:	af00      	add	r7, sp, #0
    2e5e:	60f8      	str	r0, [r7, #12]
    2e60:	60b9      	str	r1, [r7, #8]
    2e62:	4613      	mov	r3, r2
    2e64:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2e66:	68fb      	ldr	r3, [r7, #12]
    2e68:	2b00      	cmp	r3, #0
    2e6a:	bf14      	ite	ne
    2e6c:	2301      	movne	r3, #1
    2e6e:	2300      	moveq	r3, #0
    2e70:	b2db      	uxtb	r3, r3
    2e72:	2287      	movs	r2, #135	; 0x87
    2e74:	490b      	ldr	r1, [pc, #44]	; (2ea4 <_spi_m_sync_io_read+0x4c>)
    2e76:	4618      	mov	r0, r3
    2e78:	4b0b      	ldr	r3, [pc, #44]	; (2ea8 <_spi_m_sync_io_read+0x50>)
    2e7a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2e7c:	68fb      	ldr	r3, [r7, #12]
    2e7e:	3b0c      	subs	r3, #12
    2e80:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2e82:	68bb      	ldr	r3, [r7, #8]
    2e84:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2e86:	2300      	movs	r3, #0
    2e88:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2e8a:	88fb      	ldrh	r3, [r7, #6]
    2e8c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2e8e:	f107 0310 	add.w	r3, r7, #16
    2e92:	4619      	mov	r1, r3
    2e94:	69f8      	ldr	r0, [r7, #28]
    2e96:	4b05      	ldr	r3, [pc, #20]	; (2eac <_spi_m_sync_io_read+0x54>)
    2e98:	4798      	blx	r3
    2e9a:	4603      	mov	r3, r0
}
    2e9c:	4618      	mov	r0, r3
    2e9e:	3720      	adds	r7, #32
    2ea0:	46bd      	mov	sp, r7
    2ea2:	bd80      	pop	{r7, pc}
    2ea4:	00013138 	.word	0x00013138
    2ea8:	00003df5 	.word	0x00003df5
    2eac:	00002f09 	.word	0x00002f09

00002eb0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b088      	sub	sp, #32
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	60f8      	str	r0, [r7, #12]
    2eb8:	60b9      	str	r1, [r7, #8]
    2eba:	4613      	mov	r3, r2
    2ebc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2ebe:	68fb      	ldr	r3, [r7, #12]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	bf14      	ite	ne
    2ec4:	2301      	movne	r3, #1
    2ec6:	2300      	moveq	r3, #0
    2ec8:	b2db      	uxtb	r3, r3
    2eca:	22a3      	movs	r2, #163	; 0xa3
    2ecc:	490b      	ldr	r1, [pc, #44]	; (2efc <_spi_m_sync_io_write+0x4c>)
    2ece:	4618      	mov	r0, r3
    2ed0:	4b0b      	ldr	r3, [pc, #44]	; (2f00 <_spi_m_sync_io_write+0x50>)
    2ed2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2ed4:	68fb      	ldr	r3, [r7, #12]
    2ed6:	3b0c      	subs	r3, #12
    2ed8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2eda:	2300      	movs	r3, #0
    2edc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2ede:	68bb      	ldr	r3, [r7, #8]
    2ee0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2ee2:	88fb      	ldrh	r3, [r7, #6]
    2ee4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2ee6:	f107 0310 	add.w	r3, r7, #16
    2eea:	4619      	mov	r1, r3
    2eec:	69f8      	ldr	r0, [r7, #28]
    2eee:	4b05      	ldr	r3, [pc, #20]	; (2f04 <_spi_m_sync_io_write+0x54>)
    2ef0:	4798      	blx	r3
    2ef2:	4603      	mov	r3, r0
}
    2ef4:	4618      	mov	r0, r3
    2ef6:	3720      	adds	r7, #32
    2ef8:	46bd      	mov	sp, r7
    2efa:	bd80      	pop	{r7, pc}
    2efc:	00013138 	.word	0x00013138
    2f00:	00003df5 	.word	0x00003df5
    2f04:	00002f09 	.word	0x00002f09

00002f08 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2f08:	b580      	push	{r7, lr}
    2f0a:	b086      	sub	sp, #24
    2f0c:	af00      	add	r7, sp, #0
    2f0e:	6078      	str	r0, [r7, #4]
    2f10:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2f12:	687b      	ldr	r3, [r7, #4]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d004      	beq.n	2f22 <spi_m_sync_transfer+0x1a>
    2f18:	683b      	ldr	r3, [r7, #0]
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	d001      	beq.n	2f22 <spi_m_sync_transfer+0x1a>
    2f1e:	2301      	movs	r3, #1
    2f20:	e000      	b.n	2f24 <spi_m_sync_transfer+0x1c>
    2f22:	2300      	movs	r3, #0
    2f24:	f003 0301 	and.w	r3, r3, #1
    2f28:	b2db      	uxtb	r3, r3
    2f2a:	22b3      	movs	r2, #179	; 0xb3
    2f2c:	490c      	ldr	r1, [pc, #48]	; (2f60 <spi_m_sync_transfer+0x58>)
    2f2e:	4618      	mov	r0, r3
    2f30:	4b0c      	ldr	r3, [pc, #48]	; (2f64 <spi_m_sync_transfer+0x5c>)
    2f32:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2f34:	683b      	ldr	r3, [r7, #0]
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2f3a:	683b      	ldr	r3, [r7, #0]
    2f3c:	685b      	ldr	r3, [r3, #4]
    2f3e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2f40:	683b      	ldr	r3, [r7, #0]
    2f42:	689b      	ldr	r3, [r3, #8]
    2f44:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	3304      	adds	r3, #4
    2f4a:	f107 020c 	add.w	r2, r7, #12
    2f4e:	4611      	mov	r1, r2
    2f50:	4618      	mov	r0, r3
    2f52:	4b05      	ldr	r3, [pc, #20]	; (2f68 <spi_m_sync_transfer+0x60>)
    2f54:	4798      	blx	r3
    2f56:	4603      	mov	r3, r0
}
    2f58:	4618      	mov	r0, r3
    2f5a:	3718      	adds	r7, #24
    2f5c:	46bd      	mov	sp, r7
    2f5e:	bd80      	pop	{r7, pc}
    2f60:	00013138 	.word	0x00013138
    2f64:	00003df5 	.word	0x00003df5
    2f68:	00007625 	.word	0x00007625

00002f6c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b082      	sub	sp, #8
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
    2f74:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d004      	beq.n	2f86 <spi_m_sync_get_io_descriptor+0x1a>
    2f7c:	683b      	ldr	r3, [r7, #0]
    2f7e:	2b00      	cmp	r3, #0
    2f80:	d001      	beq.n	2f86 <spi_m_sync_get_io_descriptor+0x1a>
    2f82:	2301      	movs	r3, #1
    2f84:	e000      	b.n	2f88 <spi_m_sync_get_io_descriptor+0x1c>
    2f86:	2300      	movs	r3, #0
    2f88:	f003 0301 	and.w	r3, r3, #1
    2f8c:	b2db      	uxtb	r3, r3
    2f8e:	22bd      	movs	r2, #189	; 0xbd
    2f90:	4906      	ldr	r1, [pc, #24]	; (2fac <spi_m_sync_get_io_descriptor+0x40>)
    2f92:	4618      	mov	r0, r3
    2f94:	4b06      	ldr	r3, [pc, #24]	; (2fb0 <spi_m_sync_get_io_descriptor+0x44>)
    2f96:	4798      	blx	r3
	*io = &spi->io;
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	f103 020c 	add.w	r2, r3, #12
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	601a      	str	r2, [r3, #0]
	return 0;
    2fa2:	2300      	movs	r3, #0
}
    2fa4:	4618      	mov	r0, r3
    2fa6:	3708      	adds	r7, #8
    2fa8:	46bd      	mov	sp, r7
    2faa:	bd80      	pop	{r7, pc}
    2fac:	00013138 	.word	0x00013138
    2fb0:	00003df5 	.word	0x00003df5

00002fb4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2fb4:	b480      	push	{r7}
    2fb6:	b083      	sub	sp, #12
    2fb8:	af00      	add	r7, sp, #0
    2fba:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	681b      	ldr	r3, [r3, #0]
}
    2fc0:	4618      	mov	r0, r3
    2fc2:	370c      	adds	r7, #12
    2fc4:	46bd      	mov	sp, r7
    2fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fca:	4770      	bx	lr

00002fcc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2fcc:	b480      	push	{r7}
    2fce:	b083      	sub	sp, #12
    2fd0:	af00      	add	r7, sp, #0
    2fd2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d002      	beq.n	2fe0 <list_get_next_element+0x14>
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	681b      	ldr	r3, [r3, #0]
    2fde:	e000      	b.n	2fe2 <list_get_next_element+0x16>
    2fe0:	2300      	movs	r3, #0
}
    2fe2:	4618      	mov	r0, r3
    2fe4:	370c      	adds	r7, #12
    2fe6:	46bd      	mov	sp, r7
    2fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fec:	4770      	bx	lr
	...

00002ff0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b084      	sub	sp, #16
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	60f8      	str	r0, [r7, #12]
    2ff8:	60b9      	str	r1, [r7, #8]
    2ffa:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2ffc:	68fb      	ldr	r3, [r7, #12]
    2ffe:	2b00      	cmp	r3, #0
    3000:	d007      	beq.n	3012 <timer_init+0x22>
    3002:	68bb      	ldr	r3, [r7, #8]
    3004:	2b00      	cmp	r3, #0
    3006:	d004      	beq.n	3012 <timer_init+0x22>
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	2b00      	cmp	r3, #0
    300c:	d001      	beq.n	3012 <timer_init+0x22>
    300e:	2301      	movs	r3, #1
    3010:	e000      	b.n	3014 <timer_init+0x24>
    3012:	2300      	movs	r3, #0
    3014:	f003 0301 	and.w	r3, r3, #1
    3018:	b2db      	uxtb	r3, r3
    301a:	223b      	movs	r2, #59	; 0x3b
    301c:	490c      	ldr	r1, [pc, #48]	; (3050 <timer_init+0x60>)
    301e:	4618      	mov	r0, r3
    3020:	4b0c      	ldr	r3, [pc, #48]	; (3054 <timer_init+0x64>)
    3022:	4798      	blx	r3
	descr->func = func;
    3024:	68fb      	ldr	r3, [r7, #12]
    3026:	687a      	ldr	r2, [r7, #4]
    3028:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    302a:	68fb      	ldr	r3, [r7, #12]
    302c:	681b      	ldr	r3, [r3, #0]
    302e:	681b      	ldr	r3, [r3, #0]
    3030:	68fa      	ldr	r2, [r7, #12]
    3032:	3204      	adds	r2, #4
    3034:	68b9      	ldr	r1, [r7, #8]
    3036:	4610      	mov	r0, r2
    3038:	4798      	blx	r3
	descr->time                           = 0;
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	2200      	movs	r2, #0
    303e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3040:	68fb      	ldr	r3, [r7, #12]
    3042:	4a05      	ldr	r2, [pc, #20]	; (3058 <timer_init+0x68>)
    3044:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3046:	2300      	movs	r3, #0
}
    3048:	4618      	mov	r0, r3
    304a:	3710      	adds	r7, #16
    304c:	46bd      	mov	sp, r7
    304e:	bd80      	pop	{r7, pc}
    3050:	00013154 	.word	0x00013154
    3054:	00003df5 	.word	0x00003df5
    3058:	000033e1 	.word	0x000033e1

0000305c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    305c:	b580      	push	{r7, lr}
    305e:	b082      	sub	sp, #8
    3060:	af00      	add	r7, sp, #0
    3062:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	2b00      	cmp	r3, #0
    3068:	d005      	beq.n	3076 <timer_start+0x1a>
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	681b      	ldr	r3, [r3, #0]
    306e:	2b00      	cmp	r3, #0
    3070:	d001      	beq.n	3076 <timer_start+0x1a>
    3072:	2301      	movs	r3, #1
    3074:	e000      	b.n	3078 <timer_start+0x1c>
    3076:	2300      	movs	r3, #0
    3078:	f003 0301 	and.w	r3, r3, #1
    307c:	b2db      	uxtb	r3, r3
    307e:	2254      	movs	r2, #84	; 0x54
    3080:	490e      	ldr	r1, [pc, #56]	; (30bc <timer_start+0x60>)
    3082:	4618      	mov	r0, r3
    3084:	4b0e      	ldr	r3, [pc, #56]	; (30c0 <timer_start+0x64>)
    3086:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	681b      	ldr	r3, [r3, #0]
    308c:	699b      	ldr	r3, [r3, #24]
    308e:	687a      	ldr	r2, [r7, #4]
    3090:	3204      	adds	r2, #4
    3092:	4610      	mov	r0, r2
    3094:	4798      	blx	r3
    3096:	4603      	mov	r3, r0
    3098:	2b00      	cmp	r3, #0
    309a:	d002      	beq.n	30a2 <timer_start+0x46>
		return ERR_DENIED;
    309c:	f06f 0310 	mvn.w	r3, #16
    30a0:	e007      	b.n	30b2 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	681b      	ldr	r3, [r3, #0]
    30a6:	689b      	ldr	r3, [r3, #8]
    30a8:	687a      	ldr	r2, [r7, #4]
    30aa:	3204      	adds	r2, #4
    30ac:	4610      	mov	r0, r2
    30ae:	4798      	blx	r3

	return ERR_NONE;
    30b0:	2300      	movs	r3, #0
}
    30b2:	4618      	mov	r0, r3
    30b4:	3708      	adds	r7, #8
    30b6:	46bd      	mov	sp, r7
    30b8:	bd80      	pop	{r7, pc}
    30ba:	bf00      	nop
    30bc:	00013154 	.word	0x00013154
    30c0:	00003df5 	.word	0x00003df5

000030c4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b082      	sub	sp, #8
    30c8:	af00      	add	r7, sp, #0
    30ca:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d005      	beq.n	30de <timer_stop+0x1a>
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	681b      	ldr	r3, [r3, #0]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d001      	beq.n	30de <timer_stop+0x1a>
    30da:	2301      	movs	r3, #1
    30dc:	e000      	b.n	30e0 <timer_stop+0x1c>
    30de:	2300      	movs	r3, #0
    30e0:	f003 0301 	and.w	r3, r3, #1
    30e4:	b2db      	uxtb	r3, r3
    30e6:	2262      	movs	r2, #98	; 0x62
    30e8:	490f      	ldr	r1, [pc, #60]	; (3128 <timer_stop+0x64>)
    30ea:	4618      	mov	r0, r3
    30ec:	4b0f      	ldr	r3, [pc, #60]	; (312c <timer_stop+0x68>)
    30ee:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	681b      	ldr	r3, [r3, #0]
    30f4:	699b      	ldr	r3, [r3, #24]
    30f6:	687a      	ldr	r2, [r7, #4]
    30f8:	3204      	adds	r2, #4
    30fa:	4610      	mov	r0, r2
    30fc:	4798      	blx	r3
    30fe:	4603      	mov	r3, r0
    3100:	f083 0301 	eor.w	r3, r3, #1
    3104:	b2db      	uxtb	r3, r3
    3106:	2b00      	cmp	r3, #0
    3108:	d002      	beq.n	3110 <timer_stop+0x4c>
		return ERR_DENIED;
    310a:	f06f 0310 	mvn.w	r3, #16
    310e:	e007      	b.n	3120 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	681b      	ldr	r3, [r3, #0]
    3114:	68db      	ldr	r3, [r3, #12]
    3116:	687a      	ldr	r2, [r7, #4]
    3118:	3204      	adds	r2, #4
    311a:	4610      	mov	r0, r2
    311c:	4798      	blx	r3

	return ERR_NONE;
    311e:	2300      	movs	r3, #0
}
    3120:	4618      	mov	r0, r3
    3122:	3708      	adds	r7, #8
    3124:	46bd      	mov	sp, r7
    3126:	bd80      	pop	{r7, pc}
    3128:	00013154 	.word	0x00013154
    312c:	00003df5 	.word	0x00003df5

00003130 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3130:	b580      	push	{r7, lr}
    3132:	b084      	sub	sp, #16
    3134:	af00      	add	r7, sp, #0
    3136:	6078      	str	r0, [r7, #4]
    3138:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	2b00      	cmp	r3, #0
    313e:	d008      	beq.n	3152 <timer_add_task+0x22>
    3140:	683b      	ldr	r3, [r7, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d005      	beq.n	3152 <timer_add_task+0x22>
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	d001      	beq.n	3152 <timer_add_task+0x22>
    314e:	2301      	movs	r3, #1
    3150:	e000      	b.n	3154 <timer_add_task+0x24>
    3152:	2300      	movs	r3, #0
    3154:	f003 0301 	and.w	r3, r3, #1
    3158:	b2db      	uxtb	r3, r3
    315a:	227b      	movs	r2, #123	; 0x7b
    315c:	492f      	ldr	r1, [pc, #188]	; (321c <timer_add_task+0xec>)
    315e:	4618      	mov	r0, r3
    3160:	4b2f      	ldr	r3, [pc, #188]	; (3220 <timer_add_task+0xf0>)
    3162:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	7f1b      	ldrb	r3, [r3, #28]
    3168:	b2db      	uxtb	r3, r3
    316a:	f043 0301 	orr.w	r3, r3, #1
    316e:	b2da      	uxtb	r2, r3
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	3318      	adds	r3, #24
    3178:	6839      	ldr	r1, [r7, #0]
    317a:	4618      	mov	r0, r3
    317c:	4b29      	ldr	r3, [pc, #164]	; (3224 <timer_add_task+0xf4>)
    317e:	4798      	blx	r3
    3180:	4603      	mov	r3, r0
    3182:	2b00      	cmp	r3, #0
    3184:	d00f      	beq.n	31a6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3186:	687b      	ldr	r3, [r7, #4]
    3188:	7f1b      	ldrb	r3, [r3, #28]
    318a:	b2db      	uxtb	r3, r3
    318c:	f023 0301 	bic.w	r3, r3, #1
    3190:	b2da      	uxtb	r2, r3
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3196:	2280      	movs	r2, #128	; 0x80
    3198:	4920      	ldr	r1, [pc, #128]	; (321c <timer_add_task+0xec>)
    319a:	2000      	movs	r0, #0
    319c:	4b20      	ldr	r3, [pc, #128]	; (3220 <timer_add_task+0xf0>)
    319e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    31a0:	f06f 0311 	mvn.w	r3, #17
    31a4:	e035      	b.n	3212 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	695a      	ldr	r2, [r3, #20]
    31aa:	683b      	ldr	r3, [r7, #0]
    31ac:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	f103 0018 	add.w	r0, r3, #24
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	695b      	ldr	r3, [r3, #20]
    31b8:	461a      	mov	r2, r3
    31ba:	6839      	ldr	r1, [r7, #0]
    31bc:	4b1a      	ldr	r3, [pc, #104]	; (3228 <timer_add_task+0xf8>)
    31be:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	7f1b      	ldrb	r3, [r3, #28]
    31c4:	b2db      	uxtb	r3, r3
    31c6:	f023 0301 	bic.w	r3, r3, #1
    31ca:	b2da      	uxtb	r2, r3
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	7f1b      	ldrb	r3, [r3, #28]
    31d4:	b2db      	uxtb	r3, r3
    31d6:	f003 0302 	and.w	r3, r3, #2
    31da:	2b00      	cmp	r3, #0
    31dc:	d018      	beq.n	3210 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    31de:	f107 030c 	add.w	r3, r7, #12
    31e2:	4618      	mov	r0, r3
    31e4:	4b11      	ldr	r3, [pc, #68]	; (322c <timer_add_task+0xfc>)
    31e6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	7f1b      	ldrb	r3, [r3, #28]
    31ec:	b2db      	uxtb	r3, r3
    31ee:	f023 0302 	bic.w	r3, r3, #2
    31f2:	b2da      	uxtb	r2, r3
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	681b      	ldr	r3, [r3, #0]
    31fc:	69db      	ldr	r3, [r3, #28]
    31fe:	687a      	ldr	r2, [r7, #4]
    3200:	3204      	adds	r2, #4
    3202:	4610      	mov	r0, r2
    3204:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3206:	f107 030c 	add.w	r3, r7, #12
    320a:	4618      	mov	r0, r3
    320c:	4b08      	ldr	r3, [pc, #32]	; (3230 <timer_add_task+0x100>)
    320e:	4798      	blx	r3
	}

	return ERR_NONE;
    3210:	2300      	movs	r3, #0
}
    3212:	4618      	mov	r0, r3
    3214:	3710      	adds	r7, #16
    3216:	46bd      	mov	sp, r7
    3218:	bd80      	pop	{r7, pc}
    321a:	bf00      	nop
    321c:	00013154 	.word	0x00013154
    3220:	00003df5 	.word	0x00003df5
    3224:	00003e1d 	.word	0x00003e1d
    3228:	00003331 	.word	0x00003331
    322c:	0000b9d1 	.word	0x0000b9d1
    3230:	0000b9f7 	.word	0x0000b9f7

00003234 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3234:	b580      	push	{r7, lr}
    3236:	b084      	sub	sp, #16
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
    323c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	2b00      	cmp	r3, #0
    3242:	d008      	beq.n	3256 <timer_remove_task+0x22>
    3244:	683b      	ldr	r3, [r7, #0]
    3246:	2b00      	cmp	r3, #0
    3248:	d005      	beq.n	3256 <timer_remove_task+0x22>
    324a:	687b      	ldr	r3, [r7, #4]
    324c:	681b      	ldr	r3, [r3, #0]
    324e:	2b00      	cmp	r3, #0
    3250:	d001      	beq.n	3256 <timer_remove_task+0x22>
    3252:	2301      	movs	r3, #1
    3254:	e000      	b.n	3258 <timer_remove_task+0x24>
    3256:	2300      	movs	r3, #0
    3258:	f003 0301 	and.w	r3, r3, #1
    325c:	b2db      	uxtb	r3, r3
    325e:	2296      	movs	r2, #150	; 0x96
    3260:	492d      	ldr	r1, [pc, #180]	; (3318 <timer_remove_task+0xe4>)
    3262:	4618      	mov	r0, r3
    3264:	4b2d      	ldr	r3, [pc, #180]	; (331c <timer_remove_task+0xe8>)
    3266:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	7f1b      	ldrb	r3, [r3, #28]
    326c:	b2db      	uxtb	r3, r3
    326e:	f043 0301 	orr.w	r3, r3, #1
    3272:	b2da      	uxtb	r2, r3
    3274:	687b      	ldr	r3, [r7, #4]
    3276:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	3318      	adds	r3, #24
    327c:	6839      	ldr	r1, [r7, #0]
    327e:	4618      	mov	r0, r3
    3280:	4b27      	ldr	r3, [pc, #156]	; (3320 <timer_remove_task+0xec>)
    3282:	4798      	blx	r3
    3284:	4603      	mov	r3, r0
    3286:	f083 0301 	eor.w	r3, r3, #1
    328a:	b2db      	uxtb	r3, r3
    328c:	2b00      	cmp	r3, #0
    328e:	d00f      	beq.n	32b0 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	7f1b      	ldrb	r3, [r3, #28]
    3294:	b2db      	uxtb	r3, r3
    3296:	f023 0301 	bic.w	r3, r3, #1
    329a:	b2da      	uxtb	r2, r3
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    32a0:	229b      	movs	r2, #155	; 0x9b
    32a2:	491d      	ldr	r1, [pc, #116]	; (3318 <timer_remove_task+0xe4>)
    32a4:	2000      	movs	r0, #0
    32a6:	4b1d      	ldr	r3, [pc, #116]	; (331c <timer_remove_task+0xe8>)
    32a8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    32aa:	f06f 0309 	mvn.w	r3, #9
    32ae:	e02e      	b.n	330e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    32b0:	687b      	ldr	r3, [r7, #4]
    32b2:	3318      	adds	r3, #24
    32b4:	6839      	ldr	r1, [r7, #0]
    32b6:	4618      	mov	r0, r3
    32b8:	4b1a      	ldr	r3, [pc, #104]	; (3324 <timer_remove_task+0xf0>)
    32ba:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	7f1b      	ldrb	r3, [r3, #28]
    32c0:	b2db      	uxtb	r3, r3
    32c2:	f023 0301 	bic.w	r3, r3, #1
    32c6:	b2da      	uxtb	r2, r3
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	7f1b      	ldrb	r3, [r3, #28]
    32d0:	b2db      	uxtb	r3, r3
    32d2:	f003 0302 	and.w	r3, r3, #2
    32d6:	2b00      	cmp	r3, #0
    32d8:	d018      	beq.n	330c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    32da:	f107 030c 	add.w	r3, r7, #12
    32de:	4618      	mov	r0, r3
    32e0:	4b11      	ldr	r3, [pc, #68]	; (3328 <timer_remove_task+0xf4>)
    32e2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	7f1b      	ldrb	r3, [r3, #28]
    32e8:	b2db      	uxtb	r3, r3
    32ea:	f023 0302 	bic.w	r3, r3, #2
    32ee:	b2da      	uxtb	r2, r3
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	681b      	ldr	r3, [r3, #0]
    32f8:	69db      	ldr	r3, [r3, #28]
    32fa:	687a      	ldr	r2, [r7, #4]
    32fc:	3204      	adds	r2, #4
    32fe:	4610      	mov	r0, r2
    3300:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3302:	f107 030c 	add.w	r3, r7, #12
    3306:	4618      	mov	r0, r3
    3308:	4b08      	ldr	r3, [pc, #32]	; (332c <timer_remove_task+0xf8>)
    330a:	4798      	blx	r3
	}

	return ERR_NONE;
    330c:	2300      	movs	r3, #0
}
    330e:	4618      	mov	r0, r3
    3310:	3710      	adds	r7, #16
    3312:	46bd      	mov	sp, r7
    3314:	bd80      	pop	{r7, pc}
    3316:	bf00      	nop
    3318:	00013154 	.word	0x00013154
    331c:	00003df5 	.word	0x00003df5
    3320:	00003e1d 	.word	0x00003e1d
    3324:	00003f7f 	.word	0x00003f7f
    3328:	0000b9d1 	.word	0x0000b9d1
    332c:	0000b9f7 	.word	0x0000b9f7

00003330 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3330:	b580      	push	{r7, lr}
    3332:	b088      	sub	sp, #32
    3334:	af00      	add	r7, sp, #0
    3336:	60f8      	str	r0, [r7, #12]
    3338:	60b9      	str	r1, [r7, #8]
    333a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    333c:	2300      	movs	r3, #0
    333e:	61bb      	str	r3, [r7, #24]
    3340:	68f8      	ldr	r0, [r7, #12]
    3342:	4b23      	ldr	r3, [pc, #140]	; (33d0 <timer_add_timer_task+0xa0>)
    3344:	4798      	blx	r3
    3346:	6138      	str	r0, [r7, #16]

	if (!head) {
    3348:	693b      	ldr	r3, [r7, #16]
    334a:	2b00      	cmp	r3, #0
    334c:	d104      	bne.n	3358 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    334e:	68b9      	ldr	r1, [r7, #8]
    3350:	68f8      	ldr	r0, [r7, #12]
    3352:	4b20      	ldr	r3, [pc, #128]	; (33d4 <timer_add_timer_task+0xa4>)
    3354:	4798      	blx	r3
		return;
    3356:	e037      	b.n	33c8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3358:	693b      	ldr	r3, [r7, #16]
    335a:	61fb      	str	r3, [r7, #28]
    335c:	e022      	b.n	33a4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    335e:	69fb      	ldr	r3, [r7, #28]
    3360:	685a      	ldr	r2, [r3, #4]
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	429a      	cmp	r2, r3
    3366:	d808      	bhi.n	337a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3368:	69fb      	ldr	r3, [r7, #28]
    336a:	689a      	ldr	r2, [r3, #8]
    336c:	69fb      	ldr	r3, [r7, #28]
    336e:	6859      	ldr	r1, [r3, #4]
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	1acb      	subs	r3, r1, r3
    3374:	4413      	add	r3, r2
    3376:	617b      	str	r3, [r7, #20]
    3378:	e009      	b.n	338e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    337a:	69fb      	ldr	r3, [r7, #28]
    337c:	689a      	ldr	r2, [r3, #8]
    337e:	69fb      	ldr	r3, [r7, #28]
    3380:	685b      	ldr	r3, [r3, #4]
    3382:	441a      	add	r2, r3
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	425b      	negs	r3, r3
    3388:	4413      	add	r3, r2
    338a:	3301      	adds	r3, #1
    338c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    338e:	68bb      	ldr	r3, [r7, #8]
    3390:	689a      	ldr	r2, [r3, #8]
    3392:	697b      	ldr	r3, [r7, #20]
    3394:	429a      	cmp	r2, r3
    3396:	d909      	bls.n	33ac <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3398:	69fb      	ldr	r3, [r7, #28]
    339a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    339c:	69f8      	ldr	r0, [r7, #28]
    339e:	4b0e      	ldr	r3, [pc, #56]	; (33d8 <timer_add_timer_task+0xa8>)
    33a0:	4798      	blx	r3
    33a2:	61f8      	str	r0, [r7, #28]
    33a4:	69fb      	ldr	r3, [r7, #28]
    33a6:	2b00      	cmp	r3, #0
    33a8:	d1d9      	bne.n	335e <timer_add_timer_task+0x2e>
    33aa:	e000      	b.n	33ae <timer_add_timer_task+0x7e>
			break;
    33ac:	bf00      	nop
	}

	if (it == head) {
    33ae:	69fa      	ldr	r2, [r7, #28]
    33b0:	693b      	ldr	r3, [r7, #16]
    33b2:	429a      	cmp	r2, r3
    33b4:	d104      	bne.n	33c0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    33b6:	68b9      	ldr	r1, [r7, #8]
    33b8:	68f8      	ldr	r0, [r7, #12]
    33ba:	4b06      	ldr	r3, [pc, #24]	; (33d4 <timer_add_timer_task+0xa4>)
    33bc:	4798      	blx	r3
    33be:	e003      	b.n	33c8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    33c0:	68b9      	ldr	r1, [r7, #8]
    33c2:	69b8      	ldr	r0, [r7, #24]
    33c4:	4b05      	ldr	r3, [pc, #20]	; (33dc <timer_add_timer_task+0xac>)
    33c6:	4798      	blx	r3
	}
}
    33c8:	3720      	adds	r7, #32
    33ca:	46bd      	mov	sp, r7
    33cc:	bd80      	pop	{r7, pc}
    33ce:	bf00      	nop
    33d0:	00002fb5 	.word	0x00002fb5
    33d4:	00003e55 	.word	0x00003e55
    33d8:	00002fcd 	.word	0x00002fcd
    33dc:	00003ead 	.word	0x00003ead

000033e0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	b086      	sub	sp, #24
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	3b04      	subs	r3, #4
    33ec:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    33ee:	693b      	ldr	r3, [r7, #16]
    33f0:	3318      	adds	r3, #24
    33f2:	4618      	mov	r0, r3
    33f4:	4b27      	ldr	r3, [pc, #156]	; (3494 <timer_process_counted+0xb4>)
    33f6:	4798      	blx	r3
    33f8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    33fa:	693b      	ldr	r3, [r7, #16]
    33fc:	695b      	ldr	r3, [r3, #20]
    33fe:	1c5a      	adds	r2, r3, #1
    3400:	693b      	ldr	r3, [r7, #16]
    3402:	615a      	str	r2, [r3, #20]
    3404:	693b      	ldr	r3, [r7, #16]
    3406:	695b      	ldr	r3, [r3, #20]
    3408:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    340a:	693b      	ldr	r3, [r7, #16]
    340c:	7f1b      	ldrb	r3, [r3, #28]
    340e:	b2db      	uxtb	r3, r3
    3410:	f003 0301 	and.w	r3, r3, #1
    3414:	2b00      	cmp	r3, #0
    3416:	d106      	bne.n	3426 <timer_process_counted+0x46>
    3418:	693b      	ldr	r3, [r7, #16]
    341a:	7f1b      	ldrb	r3, [r3, #28]
    341c:	b2db      	uxtb	r3, r3
    341e:	f003 0302 	and.w	r3, r3, #2
    3422:	2b00      	cmp	r3, #0
    3424:	d027      	beq.n	3476 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3426:	693b      	ldr	r3, [r7, #16]
    3428:	7f1b      	ldrb	r3, [r3, #28]
    342a:	b2db      	uxtb	r3, r3
    342c:	f043 0302 	orr.w	r3, r3, #2
    3430:	b2da      	uxtb	r2, r3
    3432:	693b      	ldr	r3, [r7, #16]
    3434:	771a      	strb	r2, [r3, #28]
		return;
    3436:	e029      	b.n	348c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3438:	697b      	ldr	r3, [r7, #20]
    343a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    343c:	693b      	ldr	r3, [r7, #16]
    343e:	3318      	adds	r3, #24
    3440:	4618      	mov	r0, r3
    3442:	4b15      	ldr	r3, [pc, #84]	; (3498 <timer_process_counted+0xb8>)
    3444:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	7c1b      	ldrb	r3, [r3, #16]
    344a:	2b01      	cmp	r3, #1
    344c:	d109      	bne.n	3462 <timer_process_counted+0x82>
			tmp->time_label = time;
    344e:	68bb      	ldr	r3, [r7, #8]
    3450:	68fa      	ldr	r2, [r7, #12]
    3452:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3454:	693b      	ldr	r3, [r7, #16]
    3456:	3318      	adds	r3, #24
    3458:	68fa      	ldr	r2, [r7, #12]
    345a:	68b9      	ldr	r1, [r7, #8]
    345c:	4618      	mov	r0, r3
    345e:	4b0f      	ldr	r3, [pc, #60]	; (349c <timer_process_counted+0xbc>)
    3460:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3462:	693b      	ldr	r3, [r7, #16]
    3464:	3318      	adds	r3, #24
    3466:	4618      	mov	r0, r3
    3468:	4b0a      	ldr	r3, [pc, #40]	; (3494 <timer_process_counted+0xb4>)
    346a:	4798      	blx	r3
    346c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    346e:	68bb      	ldr	r3, [r7, #8]
    3470:	68db      	ldr	r3, [r3, #12]
    3472:	68b8      	ldr	r0, [r7, #8]
    3474:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3476:	697b      	ldr	r3, [r7, #20]
    3478:	2b00      	cmp	r3, #0
    347a:	d007      	beq.n	348c <timer_process_counted+0xac>
    347c:	697b      	ldr	r3, [r7, #20]
    347e:	685b      	ldr	r3, [r3, #4]
    3480:	68fa      	ldr	r2, [r7, #12]
    3482:	1ad2      	subs	r2, r2, r3
    3484:	697b      	ldr	r3, [r7, #20]
    3486:	689b      	ldr	r3, [r3, #8]
    3488:	429a      	cmp	r2, r3
    348a:	d2d5      	bcs.n	3438 <timer_process_counted+0x58>
	}
}
    348c:	3718      	adds	r7, #24
    348e:	46bd      	mov	sp, r7
    3490:	bd80      	pop	{r7, pc}
    3492:	bf00      	nop
    3494:	00002fb5 	.word	0x00002fb5
    3498:	00003f4d 	.word	0x00003f4d
    349c:	00003331 	.word	0x00003331

000034a0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    34a0:	b480      	push	{r7}
    34a2:	b085      	sub	sp, #20
    34a4:	af00      	add	r7, sp, #0
    34a6:	4603      	mov	r3, r0
    34a8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    34aa:	2300      	movs	r3, #0
    34ac:	73fb      	strb	r3, [r7, #15]
    34ae:	e029      	b.n	3504 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    34b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34b4:	4a19      	ldr	r2, [pc, #100]	; (351c <_usb_d_find_ep+0x7c>)
    34b6:	015b      	lsls	r3, r3, #5
    34b8:	4413      	add	r3, r2
    34ba:	3301      	adds	r3, #1
    34bc:	781b      	ldrb	r3, [r3, #0]
    34be:	79fa      	ldrb	r2, [r7, #7]
    34c0:	429a      	cmp	r2, r3
    34c2:	d102      	bne.n	34ca <_usb_d_find_ep+0x2a>
			return i;
    34c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34c8:	e022      	b.n	3510 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    34ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34ce:	4a13      	ldr	r2, [pc, #76]	; (351c <_usb_d_find_ep+0x7c>)
    34d0:	015b      	lsls	r3, r3, #5
    34d2:	4413      	add	r3, r2
    34d4:	781b      	ldrb	r3, [r3, #0]
    34d6:	2b00      	cmp	r3, #0
    34d8:	d10e      	bne.n	34f8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    34da:	79fb      	ldrb	r3, [r7, #7]
    34dc:	f003 030f 	and.w	r3, r3, #15
    34e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34e4:	490d      	ldr	r1, [pc, #52]	; (351c <_usb_d_find_ep+0x7c>)
    34e6:	0152      	lsls	r2, r2, #5
    34e8:	440a      	add	r2, r1
    34ea:	3201      	adds	r2, #1
    34ec:	7812      	ldrb	r2, [r2, #0]
    34ee:	4293      	cmp	r3, r2
    34f0:	d102      	bne.n	34f8 <_usb_d_find_ep+0x58>
			return i;
    34f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34f6:	e00b      	b.n	3510 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    34f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34fc:	b2db      	uxtb	r3, r3
    34fe:	3301      	adds	r3, #1
    3500:	b2db      	uxtb	r3, r3
    3502:	73fb      	strb	r3, [r7, #15]
    3504:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3508:	2b03      	cmp	r3, #3
    350a:	ddd1      	ble.n	34b0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    350c:	f04f 33ff 	mov.w	r3, #4294967295
}
    3510:	4618      	mov	r0, r3
    3512:	3714      	adds	r7, #20
    3514:	46bd      	mov	sp, r7
    3516:	f85d 7b04 	ldr.w	r7, [sp], #4
    351a:	4770      	bx	lr
    351c:	20000808 	.word	0x20000808

00003520 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3520:	b580      	push	{r7, lr}
    3522:	b088      	sub	sp, #32
    3524:	af00      	add	r7, sp, #0
    3526:	60ba      	str	r2, [r7, #8]
    3528:	607b      	str	r3, [r7, #4]
    352a:	4603      	mov	r3, r0
    352c:	73fb      	strb	r3, [r7, #15]
    352e:	460b      	mov	r3, r1
    3530:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    3532:	68bb      	ldr	r3, [r7, #8]
    3534:	617b      	str	r3, [r7, #20]
    3536:	687b      	ldr	r3, [r7, #4]
    3538:	61bb      	str	r3, [r7, #24]
    353a:	7bbb      	ldrb	r3, [r7, #14]
    353c:	2b00      	cmp	r3, #0
    353e:	d004      	beq.n	354a <_usb_d_trans+0x2a>
    3540:	7bfb      	ldrb	r3, [r7, #15]
    3542:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3546:	b2db      	uxtb	r3, r3
    3548:	e003      	b.n	3552 <_usb_d_trans+0x32>
    354a:	7bfb      	ldrb	r3, [r7, #15]
    354c:	f003 030f 	and.w	r3, r3, #15
    3550:	b2db      	uxtb	r3, r3
    3552:	773b      	strb	r3, [r7, #28]
    3554:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3558:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    355a:	f107 0314 	add.w	r3, r7, #20
    355e:	4618      	mov	r0, r3
    3560:	4b03      	ldr	r3, [pc, #12]	; (3570 <_usb_d_trans+0x50>)
    3562:	4798      	blx	r3
    3564:	4603      	mov	r3, r0
}
    3566:	4618      	mov	r0, r3
    3568:	3720      	adds	r7, #32
    356a:	46bd      	mov	sp, r7
    356c:	bd80      	pop	{r7, pc}
    356e:	bf00      	nop
    3570:	0000b005 	.word	0x0000b005

00003574 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    357a:	60f8      	str	r0, [r7, #12]
    357c:	60b9      	str	r1, [r7, #8]
    357e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3580:	2300      	movs	r3, #0
}
    3582:	4618      	mov	r0, r3
    3584:	3714      	adds	r7, #20
    3586:	46bd      	mov	sp, r7
    3588:	f85d 7b04 	ldr.w	r7, [sp], #4
    358c:	4770      	bx	lr
	...

00003590 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3590:	b580      	push	{r7, lr}
    3592:	b086      	sub	sp, #24
    3594:	af00      	add	r7, sp, #0
    3596:	4603      	mov	r3, r0
    3598:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    359a:	79fb      	ldrb	r3, [r7, #7]
    359c:	4618      	mov	r0, r3
    359e:	4b2a      	ldr	r3, [pc, #168]	; (3648 <usb_d_cb_trans_setup+0xb8>)
    35a0:	4798      	blx	r3
    35a2:	4603      	mov	r3, r0
    35a4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35aa:	015b      	lsls	r3, r3, #5
    35ac:	4a27      	ldr	r2, [pc, #156]	; (364c <usb_d_cb_trans_setup+0xbc>)
    35ae:	4413      	add	r3, r2
    35b0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    35b2:	693b      	ldr	r3, [r7, #16]
    35b4:	330c      	adds	r3, #12
    35b6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    35b8:	79fb      	ldrb	r3, [r7, #7]
    35ba:	68f9      	ldr	r1, [r7, #12]
    35bc:	4618      	mov	r0, r3
    35be:	4b24      	ldr	r3, [pc, #144]	; (3650 <usb_d_cb_trans_setup+0xc0>)
    35c0:	4798      	blx	r3
    35c2:	4603      	mov	r3, r0
    35c4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    35c6:	7afb      	ldrb	r3, [r7, #11]
    35c8:	2b08      	cmp	r3, #8
    35ca:	d00d      	beq.n	35e8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    35cc:	79fb      	ldrb	r3, [r7, #7]
    35ce:	2101      	movs	r1, #1
    35d0:	4618      	mov	r0, r3
    35d2:	4b20      	ldr	r3, [pc, #128]	; (3654 <usb_d_cb_trans_setup+0xc4>)
    35d4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    35d6:	79fb      	ldrb	r3, [r7, #7]
    35d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35dc:	b2db      	uxtb	r3, r3
    35de:	2101      	movs	r1, #1
    35e0:	4618      	mov	r0, r3
    35e2:	4b1c      	ldr	r3, [pc, #112]	; (3654 <usb_d_cb_trans_setup+0xc4>)
    35e4:	4798      	blx	r3
		return;
    35e6:	e02b      	b.n	3640 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    35e8:	79fb      	ldrb	r3, [r7, #7]
    35ea:	2100      	movs	r1, #0
    35ec:	4618      	mov	r0, r3
    35ee:	4b19      	ldr	r3, [pc, #100]	; (3654 <usb_d_cb_trans_setup+0xc4>)
    35f0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    35f2:	79fb      	ldrb	r3, [r7, #7]
    35f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35f8:	b2db      	uxtb	r3, r3
    35fa:	2100      	movs	r1, #0
    35fc:	4618      	mov	r0, r3
    35fe:	4b15      	ldr	r3, [pc, #84]	; (3654 <usb_d_cb_trans_setup+0xc4>)
    3600:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3602:	693b      	ldr	r3, [r7, #16]
    3604:	2201      	movs	r2, #1
    3606:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3608:	693b      	ldr	r3, [r7, #16]
    360a:	695b      	ldr	r3, [r3, #20]
    360c:	79fa      	ldrb	r2, [r7, #7]
    360e:	68f9      	ldr	r1, [r7, #12]
    3610:	4610      	mov	r0, r2
    3612:	4798      	blx	r3
    3614:	4603      	mov	r3, r0
    3616:	f083 0301 	eor.w	r3, r3, #1
    361a:	b2db      	uxtb	r3, r3
    361c:	2b00      	cmp	r3, #0
    361e:	d00f      	beq.n	3640 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3620:	693b      	ldr	r3, [r7, #16]
    3622:	2205      	movs	r2, #5
    3624:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3626:	79fb      	ldrb	r3, [r7, #7]
    3628:	2101      	movs	r1, #1
    362a:	4618      	mov	r0, r3
    362c:	4b09      	ldr	r3, [pc, #36]	; (3654 <usb_d_cb_trans_setup+0xc4>)
    362e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3630:	79fb      	ldrb	r3, [r7, #7]
    3632:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3636:	b2db      	uxtb	r3, r3
    3638:	2101      	movs	r1, #1
    363a:	4618      	mov	r0, r3
    363c:	4b05      	ldr	r3, [pc, #20]	; (3654 <usb_d_cb_trans_setup+0xc4>)
    363e:	4798      	blx	r3
	}
}
    3640:	3718      	adds	r7, #24
    3642:	46bd      	mov	sp, r7
    3644:	bd80      	pop	{r7, pc}
    3646:	bf00      	nop
    3648:	000034a1 	.word	0x000034a1
    364c:	20000808 	.word	0x20000808
    3650:	0000af5d 	.word	0x0000af5d
    3654:	0000add5 	.word	0x0000add5

00003658 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3658:	b580      	push	{r7, lr}
    365a:	b084      	sub	sp, #16
    365c:	af00      	add	r7, sp, #0
    365e:	4603      	mov	r3, r0
    3660:	6039      	str	r1, [r7, #0]
    3662:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3664:	79fb      	ldrb	r3, [r7, #7]
    3666:	4618      	mov	r0, r3
    3668:	4b0d      	ldr	r3, [pc, #52]	; (36a0 <usb_d_cb_trans_more+0x48>)
    366a:	4798      	blx	r3
    366c:	4603      	mov	r3, r0
    366e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3670:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3674:	015b      	lsls	r3, r3, #5
    3676:	4a0b      	ldr	r2, [pc, #44]	; (36a4 <usb_d_cb_trans_more+0x4c>)
    3678:	4413      	add	r3, r2
    367a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    367c:	68bb      	ldr	r3, [r7, #8]
    367e:	789b      	ldrb	r3, [r3, #2]
    3680:	2b03      	cmp	r3, #3
    3682:	d107      	bne.n	3694 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3684:	68bb      	ldr	r3, [r7, #8]
    3686:	699b      	ldr	r3, [r3, #24]
    3688:	79fa      	ldrb	r2, [r7, #7]
    368a:	6839      	ldr	r1, [r7, #0]
    368c:	4610      	mov	r0, r2
    368e:	4798      	blx	r3
    3690:	4603      	mov	r3, r0
    3692:	e000      	b.n	3696 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3694:	2300      	movs	r3, #0
}
    3696:	4618      	mov	r0, r3
    3698:	3710      	adds	r7, #16
    369a:	46bd      	mov	sp, r7
    369c:	bd80      	pop	{r7, pc}
    369e:	bf00      	nop
    36a0:	000034a1 	.word	0x000034a1
    36a4:	20000808 	.word	0x20000808

000036a8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    36a8:	b590      	push	{r4, r7, lr}
    36aa:	b087      	sub	sp, #28
    36ac:	af02      	add	r7, sp, #8
    36ae:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	789b      	ldrb	r3, [r3, #2]
    36b4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	7b1b      	ldrb	r3, [r3, #12]
    36ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    36be:	2b00      	cmp	r3, #0
    36c0:	bf14      	ite	ne
    36c2:	2301      	movne	r3, #1
    36c4:	2300      	moveq	r3, #0
    36c6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    36c8:	7bfb      	ldrb	r3, [r7, #15]
    36ca:	2b03      	cmp	r3, #3
    36cc:	d13a      	bne.n	3744 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	69db      	ldr	r3, [r3, #28]
    36d2:	687a      	ldr	r2, [r7, #4]
    36d4:	7850      	ldrb	r0, [r2, #1]
    36d6:	687a      	ldr	r2, [r7, #4]
    36d8:	320c      	adds	r2, #12
    36da:	2101      	movs	r1, #1
    36dc:	4798      	blx	r3
    36de:	4603      	mov	r3, r0
    36e0:	737b      	strb	r3, [r7, #13]
		if (err) {
    36e2:	7b7b      	ldrb	r3, [r7, #13]
    36e4:	2b00      	cmp	r3, #0
    36e6:	d015      	beq.n	3714 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	2205      	movs	r2, #5
    36ec:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    36ee:	687b      	ldr	r3, [r7, #4]
    36f0:	2202      	movs	r2, #2
    36f2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    36f4:	7bbb      	ldrb	r3, [r7, #14]
    36f6:	2b00      	cmp	r3, #0
    36f8:	d002      	beq.n	3700 <usb_d_ctrl_trans_done+0x58>
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	785b      	ldrb	r3, [r3, #1]
    36fe:	e004      	b.n	370a <usb_d_ctrl_trans_done+0x62>
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	785b      	ldrb	r3, [r3, #1]
    3704:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3708:	b2db      	uxtb	r3, r3
    370a:	2101      	movs	r1, #1
    370c:	4618      	mov	r0, r3
    370e:	4b15      	ldr	r3, [pc, #84]	; (3764 <usb_d_ctrl_trans_done+0xbc>)
    3710:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3712:	e022      	b.n	375a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	2204      	movs	r2, #4
    3718:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	7858      	ldrb	r0, [r3, #1]
    371e:	7bbb      	ldrb	r3, [r7, #14]
    3720:	2b00      	cmp	r3, #0
    3722:	bf14      	ite	ne
    3724:	2301      	movne	r3, #1
    3726:	2300      	moveq	r3, #0
    3728:	b2db      	uxtb	r3, r3
    372a:	f083 0301 	eor.w	r3, r3, #1
    372e:	b2db      	uxtb	r3, r3
    3730:	f003 0301 	and.w	r3, r3, #1
    3734:	b2d9      	uxtb	r1, r3
    3736:	2301      	movs	r3, #1
    3738:	9300      	str	r3, [sp, #0]
    373a:	2300      	movs	r3, #0
    373c:	2200      	movs	r2, #0
    373e:	4c0a      	ldr	r4, [pc, #40]	; (3768 <usb_d_ctrl_trans_done+0xc0>)
    3740:	47a0      	blx	r4
}
    3742:	e00a      	b.n	375a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3744:	687b      	ldr	r3, [r7, #4]
    3746:	69db      	ldr	r3, [r3, #28]
    3748:	687a      	ldr	r2, [r7, #4]
    374a:	7850      	ldrb	r0, [r2, #1]
    374c:	687a      	ldr	r2, [r7, #4]
    374e:	320c      	adds	r2, #12
    3750:	2100      	movs	r1, #0
    3752:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	2202      	movs	r2, #2
    3758:	709a      	strb	r2, [r3, #2]
}
    375a:	bf00      	nop
    375c:	3714      	adds	r7, #20
    375e:	46bd      	mov	sp, r7
    3760:	bd90      	pop	{r4, r7, pc}
    3762:	bf00      	nop
    3764:	0000add5 	.word	0x0000add5
    3768:	00003521 	.word	0x00003521

0000376c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    376c:	b580      	push	{r7, lr}
    376e:	b086      	sub	sp, #24
    3770:	af00      	add	r7, sp, #0
    3772:	4603      	mov	r3, r0
    3774:	60b9      	str	r1, [r7, #8]
    3776:	607a      	str	r2, [r7, #4]
    3778:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    377a:	7bfb      	ldrb	r3, [r7, #15]
    377c:	4618      	mov	r0, r3
    377e:	4b2f      	ldr	r3, [pc, #188]	; (383c <_usb_d_cb_trans_done+0xd0>)
    3780:	4798      	blx	r3
    3782:	4603      	mov	r3, r0
    3784:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3786:	f997 3017 	ldrsb.w	r3, [r7, #23]
    378a:	015b      	lsls	r3, r3, #5
    378c:	4a2c      	ldr	r2, [pc, #176]	; (3840 <_usb_d_cb_trans_done+0xd4>)
    378e:	4413      	add	r3, r2
    3790:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3792:	68bb      	ldr	r3, [r7, #8]
    3794:	2b00      	cmp	r3, #0
    3796:	d10e      	bne.n	37b6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3798:	693b      	ldr	r3, [r7, #16]
    379a:	2200      	movs	r2, #0
    379c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    379e:	693b      	ldr	r3, [r7, #16]
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	2b00      	cmp	r3, #0
    37a4:	d103      	bne.n	37ae <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    37a6:	6938      	ldr	r0, [r7, #16]
    37a8:	4b26      	ldr	r3, [pc, #152]	; (3844 <_usb_d_cb_trans_done+0xd8>)
    37aa:	4798      	blx	r3
			return;
    37ac:	e043      	b.n	3836 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    37ae:	693b      	ldr	r3, [r7, #16]
    37b0:	2201      	movs	r2, #1
    37b2:	709a      	strb	r2, [r3, #2]
    37b4:	e038      	b.n	3828 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    37b6:	68bb      	ldr	r3, [r7, #8]
    37b8:	2b01      	cmp	r3, #1
    37ba:	d113      	bne.n	37e4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    37bc:	693b      	ldr	r3, [r7, #16]
    37be:	2202      	movs	r2, #2
    37c0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    37c2:	693b      	ldr	r3, [r7, #16]
    37c4:	781b      	ldrb	r3, [r3, #0]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d108      	bne.n	37dc <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    37ca:	693b      	ldr	r3, [r7, #16]
    37cc:	2202      	movs	r2, #2
    37ce:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    37d0:	7bfb      	ldrb	r3, [r7, #15]
    37d2:	2100      	movs	r1, #0
    37d4:	4618      	mov	r0, r3
    37d6:	4b1c      	ldr	r3, [pc, #112]	; (3848 <_usb_d_cb_trans_done+0xdc>)
    37d8:	4798      	blx	r3
    37da:	e025      	b.n	3828 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    37dc:	693b      	ldr	r3, [r7, #16]
    37de:	2205      	movs	r2, #5
    37e0:	709a      	strb	r2, [r3, #2]
    37e2:	e021      	b.n	3828 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    37e4:	68bb      	ldr	r3, [r7, #8]
    37e6:	2b02      	cmp	r3, #2
    37e8:	d10e      	bne.n	3808 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    37ea:	693b      	ldr	r3, [r7, #16]
    37ec:	2204      	movs	r2, #4
    37ee:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    37f0:	693b      	ldr	r3, [r7, #16]
    37f2:	781b      	ldrb	r3, [r3, #0]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d103      	bne.n	3800 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    37f8:	693b      	ldr	r3, [r7, #16]
    37fa:	2202      	movs	r2, #2
    37fc:	709a      	strb	r2, [r3, #2]
			return;
    37fe:	e01a      	b.n	3836 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3800:	693b      	ldr	r3, [r7, #16]
    3802:	2201      	movs	r2, #1
    3804:	709a      	strb	r2, [r3, #2]
    3806:	e00f      	b.n	3828 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3808:	68bb      	ldr	r3, [r7, #8]
    380a:	2b03      	cmp	r3, #3
    380c:	d106      	bne.n	381c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    380e:	693b      	ldr	r3, [r7, #16]
    3810:	2200      	movs	r2, #0
    3812:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3814:	693b      	ldr	r3, [r7, #16]
    3816:	2205      	movs	r2, #5
    3818:	70da      	strb	r2, [r3, #3]
    381a:	e005      	b.n	3828 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    381c:	693b      	ldr	r3, [r7, #16]
    381e:	2206      	movs	r2, #6
    3820:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3822:	693b      	ldr	r3, [r7, #16]
    3824:	2206      	movs	r2, #6
    3826:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3828:	693b      	ldr	r3, [r7, #16]
    382a:	69db      	ldr	r3, [r3, #28]
    382c:	693a      	ldr	r2, [r7, #16]
    382e:	78d1      	ldrb	r1, [r2, #3]
    3830:	687a      	ldr	r2, [r7, #4]
    3832:	7bf8      	ldrb	r0, [r7, #15]
    3834:	4798      	blx	r3
}
    3836:	3718      	adds	r7, #24
    3838:	46bd      	mov	sp, r7
    383a:	bd80      	pop	{r7, pc}
    383c:	000034a1 	.word	0x000034a1
    3840:	20000808 	.word	0x20000808
    3844:	000036a9 	.word	0x000036a9
    3848:	0000add5 	.word	0x0000add5

0000384c <usb_d_init>:

int32_t usb_d_init(void)
{
    384c:	b580      	push	{r7, lr}
    384e:	b082      	sub	sp, #8
    3850:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3852:	4b21      	ldr	r3, [pc, #132]	; (38d8 <usb_d_init+0x8c>)
    3854:	4798      	blx	r3
    3856:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3858:	683b      	ldr	r3, [r7, #0]
    385a:	2b00      	cmp	r3, #0
    385c:	da01      	bge.n	3862 <usb_d_init+0x16>
		return rc;
    385e:	683b      	ldr	r3, [r7, #0]
    3860:	e036      	b.n	38d0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3862:	2280      	movs	r2, #128	; 0x80
    3864:	2100      	movs	r1, #0
    3866:	481d      	ldr	r0, [pc, #116]	; (38dc <usb_d_init+0x90>)
    3868:	4b1d      	ldr	r3, [pc, #116]	; (38e0 <usb_d_init+0x94>)
    386a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    386c:	2300      	movs	r3, #0
    386e:	71fb      	strb	r3, [r7, #7]
    3870:	e01e      	b.n	38b0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3872:	79fb      	ldrb	r3, [r7, #7]
    3874:	4a19      	ldr	r2, [pc, #100]	; (38dc <usb_d_init+0x90>)
    3876:	015b      	lsls	r3, r3, #5
    3878:	4413      	add	r3, r2
    387a:	3301      	adds	r3, #1
    387c:	22ff      	movs	r2, #255	; 0xff
    387e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3880:	79fb      	ldrb	r3, [r7, #7]
    3882:	4a16      	ldr	r2, [pc, #88]	; (38dc <usb_d_init+0x90>)
    3884:	015b      	lsls	r3, r3, #5
    3886:	4413      	add	r3, r2
    3888:	3314      	adds	r3, #20
    388a:	4a16      	ldr	r2, [pc, #88]	; (38e4 <usb_d_init+0x98>)
    388c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    388e:	79fb      	ldrb	r3, [r7, #7]
    3890:	4a12      	ldr	r2, [pc, #72]	; (38dc <usb_d_init+0x90>)
    3892:	015b      	lsls	r3, r3, #5
    3894:	4413      	add	r3, r2
    3896:	3318      	adds	r3, #24
    3898:	4a12      	ldr	r2, [pc, #72]	; (38e4 <usb_d_init+0x98>)
    389a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    389c:	79fb      	ldrb	r3, [r7, #7]
    389e:	4a0f      	ldr	r2, [pc, #60]	; (38dc <usb_d_init+0x90>)
    38a0:	015b      	lsls	r3, r3, #5
    38a2:	4413      	add	r3, r2
    38a4:	331c      	adds	r3, #28
    38a6:	4a0f      	ldr	r2, [pc, #60]	; (38e4 <usb_d_init+0x98>)
    38a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    38aa:	79fb      	ldrb	r3, [r7, #7]
    38ac:	3301      	adds	r3, #1
    38ae:	71fb      	strb	r3, [r7, #7]
    38b0:	79fb      	ldrb	r3, [r7, #7]
    38b2:	2b03      	cmp	r3, #3
    38b4:	d9dd      	bls.n	3872 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    38b6:	490c      	ldr	r1, [pc, #48]	; (38e8 <usb_d_init+0x9c>)
    38b8:	2000      	movs	r0, #0
    38ba:	4b0c      	ldr	r3, [pc, #48]	; (38ec <usb_d_init+0xa0>)
    38bc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    38be:	490c      	ldr	r1, [pc, #48]	; (38f0 <usb_d_init+0xa4>)
    38c0:	2001      	movs	r0, #1
    38c2:	4b0a      	ldr	r3, [pc, #40]	; (38ec <usb_d_init+0xa0>)
    38c4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    38c6:	490b      	ldr	r1, [pc, #44]	; (38f4 <usb_d_init+0xa8>)
    38c8:	2002      	movs	r0, #2
    38ca:	4b08      	ldr	r3, [pc, #32]	; (38ec <usb_d_init+0xa0>)
    38cc:	4798      	blx	r3
	return ERR_NONE;
    38ce:	2300      	movs	r3, #0
}
    38d0:	4618      	mov	r0, r3
    38d2:	3708      	adds	r7, #8
    38d4:	46bd      	mov	sp, r7
    38d6:	bd80      	pop	{r7, pc}
    38d8:	0000a61d 	.word	0x0000a61d
    38dc:	20000808 	.word	0x20000808
    38e0:	00012d81 	.word	0x00012d81
    38e4:	00003575 	.word	0x00003575
    38e8:	00003591 	.word	0x00003591
    38ec:	0000b265 	.word	0x0000b265
    38f0:	00003659 	.word	0x00003659
    38f4:	0000376d 	.word	0x0000376d

000038f8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    38f8:	b580      	push	{r7, lr}
    38fa:	b082      	sub	sp, #8
    38fc:	af00      	add	r7, sp, #0
    38fe:	4603      	mov	r3, r0
    3900:	6039      	str	r1, [r7, #0]
    3902:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3904:	79fb      	ldrb	r3, [r7, #7]
    3906:	6839      	ldr	r1, [r7, #0]
    3908:	4618      	mov	r0, r3
    390a:	4b03      	ldr	r3, [pc, #12]	; (3918 <usb_d_register_callback+0x20>)
    390c:	4798      	blx	r3
}
    390e:	bf00      	nop
    3910:	3708      	adds	r7, #8
    3912:	46bd      	mov	sp, r7
    3914:	bd80      	pop	{r7, pc}
    3916:	bf00      	nop
    3918:	0000b21d 	.word	0x0000b21d

0000391c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    391c:	b580      	push	{r7, lr}
    391e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3920:	4b02      	ldr	r3, [pc, #8]	; (392c <usb_d_enable+0x10>)
    3922:	4798      	blx	r3
    3924:	4603      	mov	r3, r0
}
    3926:	4618      	mov	r0, r3
    3928:	bd80      	pop	{r7, pc}
    392a:	bf00      	nop
    392c:	0000a70d 	.word	0x0000a70d

00003930 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3930:	b580      	push	{r7, lr}
    3932:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3934:	4b01      	ldr	r3, [pc, #4]	; (393c <usb_d_attach+0xc>)
    3936:	4798      	blx	r3
}
    3938:	bf00      	nop
    393a:	bd80      	pop	{r7, pc}
    393c:	0000a791 	.word	0x0000a791

00003940 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3940:	b580      	push	{r7, lr}
    3942:	b082      	sub	sp, #8
    3944:	af00      	add	r7, sp, #0
    3946:	4603      	mov	r3, r0
    3948:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    394a:	79fb      	ldrb	r3, [r7, #7]
    394c:	4618      	mov	r0, r3
    394e:	4b03      	ldr	r3, [pc, #12]	; (395c <usb_d_set_address+0x1c>)
    3950:	4798      	blx	r3
}
    3952:	bf00      	nop
    3954:	3708      	adds	r7, #8
    3956:	46bd      	mov	sp, r7
    3958:	bd80      	pop	{r7, pc}
    395a:	bf00      	nop
    395c:	0000a7a5 	.word	0x0000a7a5

00003960 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3960:	b580      	push	{r7, lr}
    3962:	b082      	sub	sp, #8
    3964:	af00      	add	r7, sp, #0
    3966:	4603      	mov	r3, r0
    3968:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    396a:	79fb      	ldrb	r3, [r7, #7]
    396c:	b29b      	uxth	r3, r3
    396e:	461a      	mov	r2, r3
    3970:	2100      	movs	r1, #0
    3972:	2000      	movs	r0, #0
    3974:	4b03      	ldr	r3, [pc, #12]	; (3984 <usb_d_ep0_init+0x24>)
    3976:	4798      	blx	r3
    3978:	4603      	mov	r3, r0
}
    397a:	4618      	mov	r0, r3
    397c:	3708      	adds	r7, #8
    397e:	46bd      	mov	sp, r7
    3980:	bd80      	pop	{r7, pc}
    3982:	bf00      	nop
    3984:	00003989 	.word	0x00003989

00003988 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3988:	b580      	push	{r7, lr}
    398a:	b086      	sub	sp, #24
    398c:	af00      	add	r7, sp, #0
    398e:	4603      	mov	r3, r0
    3990:	71fb      	strb	r3, [r7, #7]
    3992:	460b      	mov	r3, r1
    3994:	71bb      	strb	r3, [r7, #6]
    3996:	4613      	mov	r3, r2
    3998:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    399a:	79fb      	ldrb	r3, [r7, #7]
    399c:	4618      	mov	r0, r3
    399e:	4b1e      	ldr	r3, [pc, #120]	; (3a18 <usb_d_ep_init+0x90>)
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
    39a4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    39a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39aa:	015b      	lsls	r3, r3, #5
    39ac:	4a1b      	ldr	r2, [pc, #108]	; (3a1c <usb_d_ep_init+0x94>)
    39ae:	4413      	add	r3, r2
    39b0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    39b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39b6:	2b00      	cmp	r3, #0
    39b8:	db02      	blt.n	39c0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    39ba:	f06f 0313 	mvn.w	r3, #19
    39be:	e027      	b.n	3a10 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    39c0:	20ff      	movs	r0, #255	; 0xff
    39c2:	4b15      	ldr	r3, [pc, #84]	; (3a18 <usb_d_ep_init+0x90>)
    39c4:	4798      	blx	r3
    39c6:	4603      	mov	r3, r0
    39c8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    39ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39ce:	2b00      	cmp	r3, #0
    39d0:	da02      	bge.n	39d8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    39d2:	f06f 0314 	mvn.w	r3, #20
    39d6:	e01b      	b.n	3a10 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    39d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39dc:	015b      	lsls	r3, r3, #5
    39de:	4a0f      	ldr	r2, [pc, #60]	; (3a1c <usb_d_ep_init+0x94>)
    39e0:	4413      	add	r3, r2
    39e2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    39e4:	88ba      	ldrh	r2, [r7, #4]
    39e6:	79b9      	ldrb	r1, [r7, #6]
    39e8:	79fb      	ldrb	r3, [r7, #7]
    39ea:	4618      	mov	r0, r3
    39ec:	4b0c      	ldr	r3, [pc, #48]	; (3a20 <usb_d_ep_init+0x98>)
    39ee:	4798      	blx	r3
    39f0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    39f2:	68fb      	ldr	r3, [r7, #12]
    39f4:	2b00      	cmp	r3, #0
    39f6:	da01      	bge.n	39fc <usb_d_ep_init+0x74>
		return rc;
    39f8:	68fb      	ldr	r3, [r7, #12]
    39fa:	e009      	b.n	3a10 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    39fc:	693b      	ldr	r3, [r7, #16]
    39fe:	79fa      	ldrb	r2, [r7, #7]
    3a00:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3a02:	79bb      	ldrb	r3, [r7, #6]
    3a04:	f003 0303 	and.w	r3, r3, #3
    3a08:	b2da      	uxtb	r2, r3
    3a0a:	693b      	ldr	r3, [r7, #16]
    3a0c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3a0e:	2300      	movs	r3, #0
}
    3a10:	4618      	mov	r0, r3
    3a12:	3718      	adds	r7, #24
    3a14:	46bd      	mov	sp, r7
    3a16:	bd80      	pop	{r7, pc}
    3a18:	000034a1 	.word	0x000034a1
    3a1c:	20000808 	.word	0x20000808
    3a20:	0000a845 	.word	0x0000a845

00003a24 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3a24:	b580      	push	{r7, lr}
    3a26:	b084      	sub	sp, #16
    3a28:	af00      	add	r7, sp, #0
    3a2a:	4603      	mov	r3, r0
    3a2c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a2e:	79fb      	ldrb	r3, [r7, #7]
    3a30:	4618      	mov	r0, r3
    3a32:	4b0d      	ldr	r3, [pc, #52]	; (3a68 <usb_d_ep_deinit+0x44>)
    3a34:	4798      	blx	r3
    3a36:	4603      	mov	r3, r0
    3a38:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3a3e:	015b      	lsls	r3, r3, #5
    3a40:	4a0a      	ldr	r2, [pc, #40]	; (3a6c <usb_d_ep_deinit+0x48>)
    3a42:	4413      	add	r3, r2
    3a44:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	db07      	blt.n	3a5e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3a4e:	79fb      	ldrb	r3, [r7, #7]
    3a50:	4618      	mov	r0, r3
    3a52:	4b07      	ldr	r3, [pc, #28]	; (3a70 <usb_d_ep_deinit+0x4c>)
    3a54:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3a56:	68bb      	ldr	r3, [r7, #8]
    3a58:	22ff      	movs	r2, #255	; 0xff
    3a5a:	705a      	strb	r2, [r3, #1]
    3a5c:	e000      	b.n	3a60 <usb_d_ep_deinit+0x3c>
		return;
    3a5e:	bf00      	nop
}
    3a60:	3710      	adds	r7, #16
    3a62:	46bd      	mov	sp, r7
    3a64:	bd80      	pop	{r7, pc}
    3a66:	bf00      	nop
    3a68:	000034a1 	.word	0x000034a1
    3a6c:	20000808 	.word	0x20000808
    3a70:	0000a979 	.word	0x0000a979

00003a74 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b086      	sub	sp, #24
    3a78:	af00      	add	r7, sp, #0
    3a7a:	4603      	mov	r3, r0
    3a7c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a7e:	79fb      	ldrb	r3, [r7, #7]
    3a80:	4618      	mov	r0, r3
    3a82:	4b15      	ldr	r3, [pc, #84]	; (3ad8 <usb_d_ep_enable+0x64>)
    3a84:	4798      	blx	r3
    3a86:	4603      	mov	r3, r0
    3a88:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a8e:	015b      	lsls	r3, r3, #5
    3a90:	4a12      	ldr	r2, [pc, #72]	; (3adc <usb_d_ep_enable+0x68>)
    3a92:	4413      	add	r3, r2
    3a94:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	da02      	bge.n	3aa4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3a9e:	f06f 0311 	mvn.w	r3, #17
    3aa2:	e014      	b.n	3ace <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3aa4:	693b      	ldr	r3, [r7, #16]
    3aa6:	781b      	ldrb	r3, [r3, #0]
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	d101      	bne.n	3ab0 <usb_d_ep_enable+0x3c>
    3aac:	2202      	movs	r2, #2
    3aae:	e000      	b.n	3ab2 <usb_d_ep_enable+0x3e>
    3ab0:	2201      	movs	r2, #1
    3ab2:	693b      	ldr	r3, [r7, #16]
    3ab4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3ab6:	79fb      	ldrb	r3, [r7, #7]
    3ab8:	4618      	mov	r0, r3
    3aba:	4b09      	ldr	r3, [pc, #36]	; (3ae0 <usb_d_ep_enable+0x6c>)
    3abc:	4798      	blx	r3
    3abe:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3ac0:	68fb      	ldr	r3, [r7, #12]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	da02      	bge.n	3acc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3ac6:	693b      	ldr	r3, [r7, #16]
    3ac8:	2200      	movs	r2, #0
    3aca:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3acc:	68fb      	ldr	r3, [r7, #12]
}
    3ace:	4618      	mov	r0, r3
    3ad0:	3718      	adds	r7, #24
    3ad2:	46bd      	mov	sp, r7
    3ad4:	bd80      	pop	{r7, pc}
    3ad6:	bf00      	nop
    3ad8:	000034a1 	.word	0x000034a1
    3adc:	20000808 	.word	0x20000808
    3ae0:	0000aa5d 	.word	0x0000aa5d

00003ae4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3ae4:	b590      	push	{r4, r7, lr}
    3ae6:	b08d      	sub	sp, #52	; 0x34
    3ae8:	af02      	add	r7, sp, #8
    3aea:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3aec:	687b      	ldr	r3, [r7, #4]
    3aee:	7a1b      	ldrb	r3, [r3, #8]
    3af0:	4618      	mov	r0, r3
    3af2:	4b51      	ldr	r3, [pc, #324]	; (3c38 <usb_d_ep_transfer+0x154>)
    3af4:	4798      	blx	r3
    3af6:	4603      	mov	r3, r0
    3af8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3afe:	015b      	lsls	r3, r3, #5
    3b00:	4a4e      	ldr	r2, [pc, #312]	; (3c3c <usb_d_ep_transfer+0x158>)
    3b02:	4413      	add	r3, r2
    3b04:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	7a1b      	ldrb	r3, [r3, #8]
    3b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3b0e:	2b00      	cmp	r3, #0
    3b10:	bf14      	ite	ne
    3b12:	2301      	movne	r3, #1
    3b14:	2300      	moveq	r3, #0
    3b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	7a5b      	ldrb	r3, [r3, #9]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	bf14      	ite	ne
    3b22:	2301      	movne	r3, #1
    3b24:	2300      	moveq	r3, #0
    3b26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	685b      	ldr	r3, [r3, #4]
    3b2e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3b30:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3b34:	2b00      	cmp	r3, #0
    3b36:	da02      	bge.n	3b3e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3b38:	f06f 0311 	mvn.w	r3, #17
    3b3c:	e077      	b.n	3c2e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3b3e:	f107 0308 	add.w	r3, r7, #8
    3b42:	4618      	mov	r0, r3
    3b44:	4b3e      	ldr	r3, [pc, #248]	; (3c40 <usb_d_ep_transfer+0x15c>)
    3b46:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3b48:	69bb      	ldr	r3, [r7, #24]
    3b4a:	789b      	ldrb	r3, [r3, #2]
    3b4c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3b4e:	7bfb      	ldrb	r3, [r7, #15]
    3b50:	b2db      	uxtb	r3, r3
    3b52:	2b01      	cmp	r3, #1
    3b54:	d10c      	bne.n	3b70 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3b56:	69bb      	ldr	r3, [r7, #24]
    3b58:	2203      	movs	r2, #3
    3b5a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3b5c:	f107 0308 	add.w	r3, r7, #8
    3b60:	4618      	mov	r0, r3
    3b62:	4b38      	ldr	r3, [pc, #224]	; (3c44 <usb_d_ep_transfer+0x160>)
    3b64:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3b66:	69bb      	ldr	r3, [r7, #24]
    3b68:	781b      	ldrb	r3, [r3, #0]
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d151      	bne.n	3c12 <usb_d_ep_transfer+0x12e>
    3b6e:	e017      	b.n	3ba0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3b70:	f107 0308 	add.w	r3, r7, #8
    3b74:	4618      	mov	r0, r3
    3b76:	4b33      	ldr	r3, [pc, #204]	; (3c44 <usb_d_ep_transfer+0x160>)
    3b78:	4798      	blx	r3
		switch (state) {
    3b7a:	7bfb      	ldrb	r3, [r7, #15]
    3b7c:	b2db      	uxtb	r3, r3
    3b7e:	2b05      	cmp	r3, #5
    3b80:	d004      	beq.n	3b8c <usb_d_ep_transfer+0xa8>
    3b82:	2b06      	cmp	r3, #6
    3b84:	d004      	beq.n	3b90 <usb_d_ep_transfer+0xac>
    3b86:	2b00      	cmp	r3, #0
    3b88:	d005      	beq.n	3b96 <usb_d_ep_transfer+0xb2>
    3b8a:	e007      	b.n	3b9c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3b8c:	2302      	movs	r3, #2
    3b8e:	e04e      	b.n	3c2e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3b90:	f06f 030f 	mvn.w	r3, #15
    3b94:	e04b      	b.n	3c2e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3b96:	f06f 0312 	mvn.w	r3, #18
    3b9a:	e048      	b.n	3c2e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3b9c:	2301      	movs	r3, #1
    3b9e:	e046      	b.n	3c2e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3ba0:	69bb      	ldr	r3, [r7, #24]
    3ba2:	7c9b      	ldrb	r3, [r3, #18]
    3ba4:	b29a      	uxth	r2, r3
    3ba6:	69bb      	ldr	r3, [r7, #24]
    3ba8:	7cdb      	ldrb	r3, [r3, #19]
    3baa:	b29b      	uxth	r3, r3
    3bac:	021b      	lsls	r3, r3, #8
    3bae:	b29b      	uxth	r3, r3
    3bb0:	4413      	add	r3, r2
    3bb2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3bb4:	8afb      	ldrh	r3, [r7, #22]
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d10b      	bne.n	3bd2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    3bba:	2301      	movs	r3, #1
    3bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3bc0:	2300      	movs	r3, #0
    3bc2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3bc4:	2301      	movs	r3, #1
    3bc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3bca:	69bb      	ldr	r3, [r7, #24]
    3bcc:	2204      	movs	r2, #4
    3bce:	709a      	strb	r2, [r3, #2]
    3bd0:	e01f      	b.n	3c12 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3bd2:	69bb      	ldr	r3, [r7, #24]
    3bd4:	7b1b      	ldrb	r3, [r3, #12]
    3bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3bda:	2b00      	cmp	r3, #0
    3bdc:	bf14      	ite	ne
    3bde:	2301      	movne	r3, #1
    3be0:	2300      	moveq	r3, #0
    3be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3be6:	8afa      	ldrh	r2, [r7, #22]
    3be8:	6a3b      	ldr	r3, [r7, #32]
    3bea:	429a      	cmp	r2, r3
    3bec:	d201      	bcs.n	3bf2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3bee:	8afb      	ldrh	r3, [r7, #22]
    3bf0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d008      	beq.n	3c0c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3bfa:	8afa      	ldrh	r2, [r7, #22]
    3bfc:	6a3b      	ldr	r3, [r7, #32]
    3bfe:	429a      	cmp	r2, r3
    3c00:	bf8c      	ite	hi
    3c02:	2301      	movhi	r3, #1
    3c04:	2300      	movls	r3, #0
    3c06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3c0a:	e002      	b.n	3c12 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3c0c:	2300      	movs	r3, #0
    3c0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	7a18      	ldrb	r0, [r3, #8]
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	681a      	ldr	r2, [r3, #0]
    3c1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3c1e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3c22:	9300      	str	r3, [sp, #0]
    3c24:	6a3b      	ldr	r3, [r7, #32]
    3c26:	4c08      	ldr	r4, [pc, #32]	; (3c48 <usb_d_ep_transfer+0x164>)
    3c28:	47a0      	blx	r4
    3c2a:	6138      	str	r0, [r7, #16]
	return rc;
    3c2c:	693b      	ldr	r3, [r7, #16]
}
    3c2e:	4618      	mov	r0, r3
    3c30:	372c      	adds	r7, #44	; 0x2c
    3c32:	46bd      	mov	sp, r7
    3c34:	bd90      	pop	{r4, r7, pc}
    3c36:	bf00      	nop
    3c38:	000034a1 	.word	0x000034a1
    3c3c:	20000808 	.word	0x20000808
    3c40:	0000b9d1 	.word	0x0000b9d1
    3c44:	0000b9f7 	.word	0x0000b9f7
    3c48:	00003521 	.word	0x00003521

00003c4c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b084      	sub	sp, #16
    3c50:	af00      	add	r7, sp, #0
    3c52:	4603      	mov	r3, r0
    3c54:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c56:	79fb      	ldrb	r3, [r7, #7]
    3c58:	4618      	mov	r0, r3
    3c5a:	4b0e      	ldr	r3, [pc, #56]	; (3c94 <usb_d_ep_abort+0x48>)
    3c5c:	4798      	blx	r3
    3c5e:	4603      	mov	r3, r0
    3c60:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3c66:	015b      	lsls	r3, r3, #5
    3c68:	4a0b      	ldr	r2, [pc, #44]	; (3c98 <usb_d_ep_abort+0x4c>)
    3c6a:	4413      	add	r3, r2
    3c6c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3c72:	2b00      	cmp	r3, #0
    3c74:	db0a      	blt.n	3c8c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3c76:	79fb      	ldrb	r3, [r7, #7]
    3c78:	4618      	mov	r0, r3
    3c7a:	4b08      	ldr	r3, [pc, #32]	; (3c9c <usb_d_ep_abort+0x50>)
    3c7c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3c7e:	68bb      	ldr	r3, [r7, #8]
    3c80:	2201      	movs	r2, #1
    3c82:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3c84:	68bb      	ldr	r3, [r7, #8]
    3c86:	2204      	movs	r2, #4
    3c88:	70da      	strb	r2, [r3, #3]
    3c8a:	e000      	b.n	3c8e <usb_d_ep_abort+0x42>
		return;
    3c8c:	bf00      	nop
}
    3c8e:	3710      	adds	r7, #16
    3c90:	46bd      	mov	sp, r7
    3c92:	bd80      	pop	{r7, pc}
    3c94:	000034a1 	.word	0x000034a1
    3c98:	20000808 	.word	0x20000808
    3c9c:	0000b1c9 	.word	0x0000b1c9

00003ca0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b086      	sub	sp, #24
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	4603      	mov	r3, r0
    3ca8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3caa:	79fb      	ldrb	r3, [r7, #7]
    3cac:	4618      	mov	r0, r3
    3cae:	4b1a      	ldr	r3, [pc, #104]	; (3d18 <_usb_d_ep_halt_clr+0x78>)
    3cb0:	4798      	blx	r3
    3cb2:	4603      	mov	r3, r0
    3cb4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cba:	015b      	lsls	r3, r3, #5
    3cbc:	4a17      	ldr	r2, [pc, #92]	; (3d1c <_usb_d_ep_halt_clr+0x7c>)
    3cbe:	4413      	add	r3, r2
    3cc0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	da02      	bge.n	3cd0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3cca:	f06f 0311 	mvn.w	r3, #17
    3cce:	e01f      	b.n	3d10 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3cd0:	79fb      	ldrb	r3, [r7, #7]
    3cd2:	2102      	movs	r1, #2
    3cd4:	4618      	mov	r0, r3
    3cd6:	4b12      	ldr	r3, [pc, #72]	; (3d20 <_usb_d_ep_halt_clr+0x80>)
    3cd8:	4798      	blx	r3
    3cda:	4603      	mov	r3, r0
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d016      	beq.n	3d0e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3ce0:	79fb      	ldrb	r3, [r7, #7]
    3ce2:	2100      	movs	r1, #0
    3ce4:	4618      	mov	r0, r3
    3ce6:	4b0e      	ldr	r3, [pc, #56]	; (3d20 <_usb_d_ep_halt_clr+0x80>)
    3ce8:	4798      	blx	r3
    3cea:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3cec:	68fb      	ldr	r3, [r7, #12]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	da01      	bge.n	3cf6 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3cf2:	68fb      	ldr	r3, [r7, #12]
    3cf4:	e00c      	b.n	3d10 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3cf6:	693b      	ldr	r3, [r7, #16]
    3cf8:	2201      	movs	r2, #1
    3cfa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3cfc:	693b      	ldr	r3, [r7, #16]
    3cfe:	2203      	movs	r2, #3
    3d00:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3d02:	693b      	ldr	r3, [r7, #16]
    3d04:	69db      	ldr	r3, [r3, #28]
    3d06:	79f8      	ldrb	r0, [r7, #7]
    3d08:	2200      	movs	r2, #0
    3d0a:	2103      	movs	r1, #3
    3d0c:	4798      	blx	r3
	}
	return ERR_NONE;
    3d0e:	2300      	movs	r3, #0
}
    3d10:	4618      	mov	r0, r3
    3d12:	3718      	adds	r7, #24
    3d14:	46bd      	mov	sp, r7
    3d16:	bd80      	pop	{r7, pc}
    3d18:	000034a1 	.word	0x000034a1
    3d1c:	20000808 	.word	0x20000808
    3d20:	0000add5 	.word	0x0000add5

00003d24 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b082      	sub	sp, #8
    3d28:	af00      	add	r7, sp, #0
    3d2a:	4603      	mov	r3, r0
    3d2c:	460a      	mov	r2, r1
    3d2e:	71fb      	strb	r3, [r7, #7]
    3d30:	4613      	mov	r3, r2
    3d32:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3d34:	79bb      	ldrb	r3, [r7, #6]
    3d36:	2b00      	cmp	r3, #0
    3d38:	d105      	bne.n	3d46 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3d3a:	79fb      	ldrb	r3, [r7, #7]
    3d3c:	4618      	mov	r0, r3
    3d3e:	4b0c      	ldr	r3, [pc, #48]	; (3d70 <usb_d_ep_halt+0x4c>)
    3d40:	4798      	blx	r3
    3d42:	4603      	mov	r3, r0
    3d44:	e00f      	b.n	3d66 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3d46:	79bb      	ldrb	r3, [r7, #6]
    3d48:	2b01      	cmp	r3, #1
    3d4a:	d106      	bne.n	3d5a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3d4c:	79fb      	ldrb	r3, [r7, #7]
    3d4e:	2101      	movs	r1, #1
    3d50:	4618      	mov	r0, r3
    3d52:	4b08      	ldr	r3, [pc, #32]	; (3d74 <usb_d_ep_halt+0x50>)
    3d54:	4798      	blx	r3
    3d56:	4603      	mov	r3, r0
    3d58:	e005      	b.n	3d66 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3d5a:	79fb      	ldrb	r3, [r7, #7]
    3d5c:	2102      	movs	r1, #2
    3d5e:	4618      	mov	r0, r3
    3d60:	4b04      	ldr	r3, [pc, #16]	; (3d74 <usb_d_ep_halt+0x50>)
    3d62:	4798      	blx	r3
    3d64:	4603      	mov	r3, r0
	}
}
    3d66:	4618      	mov	r0, r3
    3d68:	3708      	adds	r7, #8
    3d6a:	46bd      	mov	sp, r7
    3d6c:	bd80      	pop	{r7, pc}
    3d6e:	bf00      	nop
    3d70:	00003ca1 	.word	0x00003ca1
    3d74:	0000add5 	.word	0x0000add5

00003d78 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3d78:	b580      	push	{r7, lr}
    3d7a:	b086      	sub	sp, #24
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	4603      	mov	r3, r0
    3d80:	603a      	str	r2, [r7, #0]
    3d82:	71fb      	strb	r3, [r7, #7]
    3d84:	460b      	mov	r3, r1
    3d86:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d88:	79fb      	ldrb	r3, [r7, #7]
    3d8a:	4618      	mov	r0, r3
    3d8c:	4b16      	ldr	r3, [pc, #88]	; (3de8 <usb_d_ep_register_callback+0x70>)
    3d8e:	4798      	blx	r3
    3d90:	4603      	mov	r3, r0
    3d92:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d98:	015b      	lsls	r3, r3, #5
    3d9a:	4a14      	ldr	r2, [pc, #80]	; (3dec <usb_d_ep_register_callback+0x74>)
    3d9c:	4413      	add	r3, r2
    3d9e:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3da0:	683b      	ldr	r3, [r7, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d001      	beq.n	3daa <usb_d_ep_register_callback+0x32>
    3da6:	683b      	ldr	r3, [r7, #0]
    3da8:	e000      	b.n	3dac <usb_d_ep_register_callback+0x34>
    3daa:	4b11      	ldr	r3, [pc, #68]	; (3df0 <usb_d_ep_register_callback+0x78>)
    3dac:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3db2:	2b00      	cmp	r3, #0
    3db4:	db13      	blt.n	3dde <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3db6:	79bb      	ldrb	r3, [r7, #6]
    3db8:	2b01      	cmp	r3, #1
    3dba:	d008      	beq.n	3dce <usb_d_ep_register_callback+0x56>
    3dbc:	2b02      	cmp	r3, #2
    3dbe:	d00a      	beq.n	3dd6 <usb_d_ep_register_callback+0x5e>
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d000      	beq.n	3dc6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3dc4:	e00c      	b.n	3de0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3dc6:	693b      	ldr	r3, [r7, #16]
    3dc8:	68fa      	ldr	r2, [r7, #12]
    3dca:	615a      	str	r2, [r3, #20]
		break;
    3dcc:	e008      	b.n	3de0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3dce:	693b      	ldr	r3, [r7, #16]
    3dd0:	68fa      	ldr	r2, [r7, #12]
    3dd2:	619a      	str	r2, [r3, #24]
		break;
    3dd4:	e004      	b.n	3de0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3dd6:	693b      	ldr	r3, [r7, #16]
    3dd8:	68fa      	ldr	r2, [r7, #12]
    3dda:	61da      	str	r2, [r3, #28]
		break;
    3ddc:	e000      	b.n	3de0 <usb_d_ep_register_callback+0x68>
		return;
    3dde:	bf00      	nop
	}
}
    3de0:	3718      	adds	r7, #24
    3de2:	46bd      	mov	sp, r7
    3de4:	bd80      	pop	{r7, pc}
    3de6:	bf00      	nop
    3de8:	000034a1 	.word	0x000034a1
    3dec:	20000808 	.word	0x20000808
    3df0:	00003575 	.word	0x00003575

00003df4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3df4:	b480      	push	{r7}
    3df6:	b085      	sub	sp, #20
    3df8:	af00      	add	r7, sp, #0
    3dfa:	4603      	mov	r3, r0
    3dfc:	60b9      	str	r1, [r7, #8]
    3dfe:	607a      	str	r2, [r7, #4]
    3e00:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3e02:	7bfb      	ldrb	r3, [r7, #15]
    3e04:	f083 0301 	eor.w	r3, r3, #1
    3e08:	b2db      	uxtb	r3, r3
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d000      	beq.n	3e10 <assert+0x1c>
		__asm("BKPT #0");
    3e0e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3e10:	bf00      	nop
    3e12:	3714      	adds	r7, #20
    3e14:	46bd      	mov	sp, r7
    3e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e1a:	4770      	bx	lr

00003e1c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3e1c:	b480      	push	{r7}
    3e1e:	b085      	sub	sp, #20
    3e20:	af00      	add	r7, sp, #0
    3e22:	6078      	str	r0, [r7, #4]
    3e24:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	681b      	ldr	r3, [r3, #0]
    3e2a:	60fb      	str	r3, [r7, #12]
    3e2c:	e008      	b.n	3e40 <is_list_element+0x24>
		if (it == element) {
    3e2e:	68fa      	ldr	r2, [r7, #12]
    3e30:	683b      	ldr	r3, [r7, #0]
    3e32:	429a      	cmp	r2, r3
    3e34:	d101      	bne.n	3e3a <is_list_element+0x1e>
			return true;
    3e36:	2301      	movs	r3, #1
    3e38:	e006      	b.n	3e48 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3e3a:	68fb      	ldr	r3, [r7, #12]
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	60fb      	str	r3, [r7, #12]
    3e40:	68fb      	ldr	r3, [r7, #12]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d1f3      	bne.n	3e2e <is_list_element+0x12>
		}
	}

	return false;
    3e46:	2300      	movs	r3, #0
}
    3e48:	4618      	mov	r0, r3
    3e4a:	3714      	adds	r7, #20
    3e4c:	46bd      	mov	sp, r7
    3e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e52:	4770      	bx	lr

00003e54 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3e54:	b580      	push	{r7, lr}
    3e56:	b082      	sub	sp, #8
    3e58:	af00      	add	r7, sp, #0
    3e5a:	6078      	str	r0, [r7, #4]
    3e5c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3e5e:	6839      	ldr	r1, [r7, #0]
    3e60:	6878      	ldr	r0, [r7, #4]
    3e62:	4b0f      	ldr	r3, [pc, #60]	; (3ea0 <list_insert_as_head+0x4c>)
    3e64:	4798      	blx	r3
    3e66:	4603      	mov	r3, r0
    3e68:	2b00      	cmp	r3, #0
    3e6a:	bf14      	ite	ne
    3e6c:	2301      	movne	r3, #1
    3e6e:	2300      	moveq	r3, #0
    3e70:	b2db      	uxtb	r3, r3
    3e72:	f083 0301 	eor.w	r3, r3, #1
    3e76:	b2db      	uxtb	r3, r3
    3e78:	f003 0301 	and.w	r3, r3, #1
    3e7c:	b2db      	uxtb	r3, r3
    3e7e:	2239      	movs	r2, #57	; 0x39
    3e80:	4908      	ldr	r1, [pc, #32]	; (3ea4 <list_insert_as_head+0x50>)
    3e82:	4618      	mov	r0, r3
    3e84:	4b08      	ldr	r3, [pc, #32]	; (3ea8 <list_insert_as_head+0x54>)
    3e86:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	681a      	ldr	r2, [r3, #0]
    3e8c:	683b      	ldr	r3, [r7, #0]
    3e8e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3e90:	687b      	ldr	r3, [r7, #4]
    3e92:	683a      	ldr	r2, [r7, #0]
    3e94:	601a      	str	r2, [r3, #0]
}
    3e96:	bf00      	nop
    3e98:	3708      	adds	r7, #8
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd80      	pop	{r7, pc}
    3e9e:	bf00      	nop
    3ea0:	00003e1d 	.word	0x00003e1d
    3ea4:	0001316c 	.word	0x0001316c
    3ea8:	00003df5 	.word	0x00003df5

00003eac <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3eac:	b480      	push	{r7}
    3eae:	b083      	sub	sp, #12
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	681a      	ldr	r2, [r3, #0]
    3eba:	683b      	ldr	r3, [r7, #0]
    3ebc:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3ebe:	687b      	ldr	r3, [r7, #4]
    3ec0:	683a      	ldr	r2, [r7, #0]
    3ec2:	601a      	str	r2, [r3, #0]
}
    3ec4:	bf00      	nop
    3ec6:	370c      	adds	r7, #12
    3ec8:	46bd      	mov	sp, r7
    3eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ece:	4770      	bx	lr

00003ed0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3ed0:	b580      	push	{r7, lr}
    3ed2:	b084      	sub	sp, #16
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
    3ed8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	681b      	ldr	r3, [r3, #0]
    3ede:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3ee0:	6839      	ldr	r1, [r7, #0]
    3ee2:	6878      	ldr	r0, [r7, #4]
    3ee4:	4b16      	ldr	r3, [pc, #88]	; (3f40 <list_insert_at_end+0x70>)
    3ee6:	4798      	blx	r3
    3ee8:	4603      	mov	r3, r0
    3eea:	2b00      	cmp	r3, #0
    3eec:	bf14      	ite	ne
    3eee:	2301      	movne	r3, #1
    3ef0:	2300      	moveq	r3, #0
    3ef2:	b2db      	uxtb	r3, r3
    3ef4:	f083 0301 	eor.w	r3, r3, #1
    3ef8:	b2db      	uxtb	r3, r3
    3efa:	f003 0301 	and.w	r3, r3, #1
    3efe:	b2db      	uxtb	r3, r3
    3f00:	224f      	movs	r2, #79	; 0x4f
    3f02:	4910      	ldr	r1, [pc, #64]	; (3f44 <list_insert_at_end+0x74>)
    3f04:	4618      	mov	r0, r3
    3f06:	4b10      	ldr	r3, [pc, #64]	; (3f48 <list_insert_at_end+0x78>)
    3f08:	4798      	blx	r3

	if (!list->head) {
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	681b      	ldr	r3, [r3, #0]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d109      	bne.n	3f26 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	683a      	ldr	r2, [r7, #0]
    3f16:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3f18:	683b      	ldr	r3, [r7, #0]
    3f1a:	2200      	movs	r2, #0
    3f1c:	601a      	str	r2, [r3, #0]
		return;
    3f1e:	e00c      	b.n	3f3a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3f20:	68fb      	ldr	r3, [r7, #12]
    3f22:	681b      	ldr	r3, [r3, #0]
    3f24:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3f26:	68fb      	ldr	r3, [r7, #12]
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d1f8      	bne.n	3f20 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3f2e:	68fb      	ldr	r3, [r7, #12]
    3f30:	683a      	ldr	r2, [r7, #0]
    3f32:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3f34:	683b      	ldr	r3, [r7, #0]
    3f36:	2200      	movs	r2, #0
    3f38:	601a      	str	r2, [r3, #0]
}
    3f3a:	3710      	adds	r7, #16
    3f3c:	46bd      	mov	sp, r7
    3f3e:	bd80      	pop	{r7, pc}
    3f40:	00003e1d 	.word	0x00003e1d
    3f44:	0001316c 	.word	0x0001316c
    3f48:	00003df5 	.word	0x00003df5

00003f4c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3f4c:	b480      	push	{r7}
    3f4e:	b085      	sub	sp, #20
    3f50:	af00      	add	r7, sp, #0
    3f52:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d009      	beq.n	3f70 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	681b      	ldr	r3, [r3, #0]
    3f66:	681a      	ldr	r2, [r3, #0]
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3f6c:	68fb      	ldr	r3, [r7, #12]
    3f6e:	e000      	b.n	3f72 <list_remove_head+0x26>
	}

	return NULL;
    3f70:	2300      	movs	r3, #0
}
    3f72:	4618      	mov	r0, r3
    3f74:	3714      	adds	r7, #20
    3f76:	46bd      	mov	sp, r7
    3f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f7c:	4770      	bx	lr

00003f7e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3f7e:	b480      	push	{r7}
    3f80:	b085      	sub	sp, #20
    3f82:	af00      	add	r7, sp, #0
    3f84:	6078      	str	r0, [r7, #4]
    3f86:	6039      	str	r1, [r7, #0]
	if (!element) {
    3f88:	683b      	ldr	r3, [r7, #0]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d101      	bne.n	3f92 <list_delete_element+0x14>
		return false;
    3f8e:	2300      	movs	r3, #0
    3f90:	e024      	b.n	3fdc <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	681a      	ldr	r2, [r3, #0]
    3f96:	683b      	ldr	r3, [r7, #0]
    3f98:	429a      	cmp	r2, r3
    3f9a:	d106      	bne.n	3faa <list_delete_element+0x2c>
		list->head = list->head->next;
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	681a      	ldr	r2, [r3, #0]
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	601a      	str	r2, [r3, #0]
		return true;
    3fa6:	2301      	movs	r3, #1
    3fa8:	e018      	b.n	3fdc <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	681b      	ldr	r3, [r3, #0]
    3fae:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3fb0:	e002      	b.n	3fb8 <list_delete_element+0x3a>
			it = it->next;
    3fb2:	68fb      	ldr	r3, [r7, #12]
    3fb4:	681b      	ldr	r3, [r3, #0]
    3fb6:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3fb8:	68fb      	ldr	r3, [r7, #12]
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d004      	beq.n	3fc8 <list_delete_element+0x4a>
    3fbe:	68fb      	ldr	r3, [r7, #12]
    3fc0:	681a      	ldr	r2, [r3, #0]
    3fc2:	683b      	ldr	r3, [r7, #0]
    3fc4:	429a      	cmp	r2, r3
    3fc6:	d1f4      	bne.n	3fb2 <list_delete_element+0x34>
		}
		if (it) {
    3fc8:	68fb      	ldr	r3, [r7, #12]
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d005      	beq.n	3fda <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3fce:	683b      	ldr	r3, [r7, #0]
    3fd0:	681a      	ldr	r2, [r3, #0]
    3fd2:	68fb      	ldr	r3, [r7, #12]
    3fd4:	601a      	str	r2, [r3, #0]
			return true;
    3fd6:	2301      	movs	r3, #1
    3fd8:	e000      	b.n	3fdc <list_delete_element+0x5e>
		}
	}

	return false;
    3fda:	2300      	movs	r3, #0
}
    3fdc:	4618      	mov	r0, r3
    3fde:	3714      	adds	r7, #20
    3fe0:	46bd      	mov	sp, r7
    3fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe6:	4770      	bx	lr

00003fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	4603      	mov	r3, r0
    3ff0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	db0b      	blt.n	4012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ffa:	4909      	ldr	r1, [pc, #36]	; (4020 <__NVIC_EnableIRQ+0x38>)
    3ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4000:	095b      	lsrs	r3, r3, #5
    4002:	88fa      	ldrh	r2, [r7, #6]
    4004:	f002 021f 	and.w	r2, r2, #31
    4008:	2001      	movs	r0, #1
    400a:	fa00 f202 	lsl.w	r2, r0, r2
    400e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4012:	bf00      	nop
    4014:	370c      	adds	r7, #12
    4016:	46bd      	mov	sp, r7
    4018:	f85d 7b04 	ldr.w	r7, [sp], #4
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	e000e100 	.word	0xe000e100

00004024 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4024:	b480      	push	{r7}
    4026:	b083      	sub	sp, #12
    4028:	af00      	add	r7, sp, #0
    402a:	4603      	mov	r3, r0
    402c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    402e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4032:	2b00      	cmp	r3, #0
    4034:	db10      	blt.n	4058 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4036:	490b      	ldr	r1, [pc, #44]	; (4064 <__NVIC_DisableIRQ+0x40>)
    4038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    403c:	095b      	lsrs	r3, r3, #5
    403e:	88fa      	ldrh	r2, [r7, #6]
    4040:	f002 021f 	and.w	r2, r2, #31
    4044:	2001      	movs	r0, #1
    4046:	fa00 f202 	lsl.w	r2, r0, r2
    404a:	3320      	adds	r3, #32
    404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4050:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4054:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4058:	bf00      	nop
    405a:	370c      	adds	r7, #12
    405c:	46bd      	mov	sp, r7
    405e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4062:	4770      	bx	lr
    4064:	e000e100 	.word	0xe000e100

00004068 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4068:	b480      	push	{r7}
    406a:	b083      	sub	sp, #12
    406c:	af00      	add	r7, sp, #0
    406e:	4603      	mov	r3, r0
    4070:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4076:	2b00      	cmp	r3, #0
    4078:	db0c      	blt.n	4094 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    407a:	4909      	ldr	r1, [pc, #36]	; (40a0 <__NVIC_ClearPendingIRQ+0x38>)
    407c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4080:	095b      	lsrs	r3, r3, #5
    4082:	88fa      	ldrh	r2, [r7, #6]
    4084:	f002 021f 	and.w	r2, r2, #31
    4088:	2001      	movs	r0, #1
    408a:	fa00 f202 	lsl.w	r2, r0, r2
    408e:	3360      	adds	r3, #96	; 0x60
    4090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4094:	bf00      	nop
    4096:	370c      	adds	r7, #12
    4098:	46bd      	mov	sp, r7
    409a:	f85d 7b04 	ldr.w	r7, [sp], #4
    409e:	4770      	bx	lr
    40a0:	e000e100 	.word	0xe000e100

000040a4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    40a4:	b480      	push	{r7}
    40a6:	b083      	sub	sp, #12
    40a8:	af00      	add	r7, sp, #0
    40aa:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    40b0:	095b      	lsrs	r3, r3, #5
    40b2:	f003 0301 	and.w	r3, r3, #1
    40b6:	2b00      	cmp	r3, #0
    40b8:	bf14      	ite	ne
    40ba:	2301      	movne	r3, #1
    40bc:	2300      	moveq	r3, #0
    40be:	b2db      	uxtb	r3, r3
}
    40c0:	4618      	mov	r0, r3
    40c2:	370c      	adds	r7, #12
    40c4:	46bd      	mov	sp, r7
    40c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ca:	4770      	bx	lr

000040cc <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    40cc:	b480      	push	{r7}
    40ce:	b083      	sub	sp, #12
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
    40d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	683a      	ldr	r2, [r7, #0]
    40da:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    40dc:	bf00      	nop
    40de:	370c      	adds	r7, #12
    40e0:	46bd      	mov	sp, r7
    40e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e6:	4770      	bx	lr

000040e8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    40e8:	b480      	push	{r7}
    40ea:	b083      	sub	sp, #12
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
    40f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	683a      	ldr	r2, [r7, #0]
    40f6:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    40f8:	bf00      	nop
    40fa:	370c      	adds	r7, #12
    40fc:	46bd      	mov	sp, r7
    40fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4102:	4770      	bx	lr

00004104 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4104:	b480      	push	{r7}
    4106:	b083      	sub	sp, #12
    4108:	af00      	add	r7, sp, #0
    410a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	699b      	ldr	r3, [r3, #24]
    4110:	f043 0201 	orr.w	r2, r3, #1
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4118:	bf00      	nop
    411a:	370c      	adds	r7, #12
    411c:	46bd      	mov	sp, r7
    411e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4122:	4770      	bx	lr

00004124 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4124:	b480      	push	{r7}
    4126:	b085      	sub	sp, #20
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	699b      	ldr	r3, [r3, #24]
    4130:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4132:	68fb      	ldr	r3, [r7, #12]
    4134:	f003 0301 	and.w	r3, r3, #1
    4138:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    413a:	68fb      	ldr	r3, [r7, #12]
    413c:	2b00      	cmp	r3, #0
    413e:	bf14      	ite	ne
    4140:	2301      	movne	r3, #1
    4142:	2300      	moveq	r3, #0
    4144:	b2db      	uxtb	r3, r3
}
    4146:	4618      	mov	r0, r3
    4148:	3714      	adds	r7, #20
    414a:	46bd      	mov	sp, r7
    414c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4150:	4770      	bx	lr

00004152 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4152:	b480      	push	{r7}
    4154:	b083      	sub	sp, #12
    4156:	af00      	add	r7, sp, #0
    4158:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	699b      	ldr	r3, [r3, #24]
    415e:	f023 0201 	bic.w	r2, r3, #1
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4166:	bf00      	nop
    4168:	370c      	adds	r7, #12
    416a:	46bd      	mov	sp, r7
    416c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4170:	4770      	bx	lr

00004172 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4172:	b480      	push	{r7}
    4174:	b083      	sub	sp, #12
    4176:	af00      	add	r7, sp, #0
    4178:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	699b      	ldr	r3, [r3, #24]
    417e:	f043 0202 	orr.w	r2, r3, #2
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4186:	bf00      	nop
    4188:	370c      	adds	r7, #12
    418a:	46bd      	mov	sp, r7
    418c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4190:	4770      	bx	lr

00004192 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4192:	b480      	push	{r7}
    4194:	b083      	sub	sp, #12
    4196:	af00      	add	r7, sp, #0
    4198:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	699b      	ldr	r3, [r3, #24]
    419e:	f023 0202 	bic.w	r2, r3, #2
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41a6:	bf00      	nop
    41a8:	370c      	adds	r7, #12
    41aa:	46bd      	mov	sp, r7
    41ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    41b0:	4770      	bx	lr

000041b2 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    41b2:	b480      	push	{r7}
    41b4:	b083      	sub	sp, #12
    41b6:	af00      	add	r7, sp, #0
    41b8:	6078      	str	r0, [r7, #4]
    41ba:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	699a      	ldr	r2, [r3, #24]
    41c0:	683b      	ldr	r3, [r7, #0]
    41c2:	431a      	orrs	r2, r3
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41c8:	bf00      	nop
    41ca:	370c      	adds	r7, #12
    41cc:	46bd      	mov	sp, r7
    41ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d2:	4770      	bx	lr

000041d4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    41d4:	b480      	push	{r7}
    41d6:	b083      	sub	sp, #12
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
    41dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	683a      	ldr	r2, [r7, #0]
    41e2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41e4:	bf00      	nop
    41e6:	370c      	adds	r7, #12
    41e8:	46bd      	mov	sp, r7
    41ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ee:	4770      	bx	lr

000041f0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    41f0:	b480      	push	{r7}
    41f2:	b083      	sub	sp, #12
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
    41f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	683a      	ldr	r2, [r7, #0]
    41fe:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4200:	bf00      	nop
    4202:	370c      	adds	r7, #12
    4204:	46bd      	mov	sp, r7
    4206:	f85d 7b04 	ldr.w	r7, [sp], #4
    420a:	4770      	bx	lr

0000420c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    420c:	b480      	push	{r7}
    420e:	b083      	sub	sp, #12
    4210:	af00      	add	r7, sp, #0
    4212:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4218:	4618      	mov	r0, r3
    421a:	370c      	adds	r7, #12
    421c:	46bd      	mov	sp, r7
    421e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4222:	4770      	bx	lr

00004224 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4224:	b480      	push	{r7}
    4226:	b083      	sub	sp, #12
    4228:	af00      	add	r7, sp, #0
    422a:	6078      	str	r0, [r7, #4]
    422c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    422e:	687b      	ldr	r3, [r7, #4]
    4230:	683a      	ldr	r2, [r7, #0]
    4232:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4234:	bf00      	nop
    4236:	370c      	adds	r7, #12
    4238:	46bd      	mov	sp, r7
    423a:	f85d 7b04 	ldr.w	r7, [sp], #4
    423e:	4770      	bx	lr

00004240 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4240:	b480      	push	{r7}
    4242:	b083      	sub	sp, #12
    4244:	af00      	add	r7, sp, #0
    4246:	6078      	str	r0, [r7, #4]
    4248:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	683a      	ldr	r2, [r7, #0]
    424e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    4252:	bf00      	nop
    4254:	370c      	adds	r7, #12
    4256:	46bd      	mov	sp, r7
    4258:	f85d 7b04 	ldr.w	r7, [sp], #4
    425c:	4770      	bx	lr

0000425e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    425e:	b480      	push	{r7}
    4260:	b083      	sub	sp, #12
    4262:	af00      	add	r7, sp, #0
    4264:	6078      	str	r0, [r7, #4]
    4266:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	683a      	ldr	r2, [r7, #0]
    426c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4270:	bf00      	nop
    4272:	370c      	adds	r7, #12
    4274:	46bd      	mov	sp, r7
    4276:	f85d 7b04 	ldr.w	r7, [sp], #4
    427a:	4770      	bx	lr

0000427c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    427c:	b480      	push	{r7}
    427e:	b083      	sub	sp, #12
    4280:	af00      	add	r7, sp, #0
    4282:	6078      	str	r0, [r7, #4]
    4284:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	683a      	ldr	r2, [r7, #0]
    428a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    428e:	bf00      	nop
    4290:	370c      	adds	r7, #12
    4292:	46bd      	mov	sp, r7
    4294:	f85d 7b04 	ldr.w	r7, [sp], #4
    4298:	4770      	bx	lr

0000429a <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    429a:	b480      	push	{r7}
    429c:	b083      	sub	sp, #12
    429e:	af00      	add	r7, sp, #0
    42a0:	6078      	str	r0, [r7, #4]
    42a2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	683a      	ldr	r2, [r7, #0]
    42a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    42ac:	bf00      	nop
    42ae:	370c      	adds	r7, #12
    42b0:	46bd      	mov	sp, r7
    42b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b6:	4770      	bx	lr

000042b8 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    42b8:	b480      	push	{r7}
    42ba:	b083      	sub	sp, #12
    42bc:	af00      	add	r7, sp, #0
    42be:	6078      	str	r0, [r7, #4]
    42c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	683a      	ldr	r2, [r7, #0]
    42c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    42ca:	bf00      	nop
    42cc:	370c      	adds	r7, #12
    42ce:	46bd      	mov	sp, r7
    42d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42d4:	4770      	bx	lr

000042d6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    42d6:	b480      	push	{r7}
    42d8:	b083      	sub	sp, #12
    42da:	af00      	add	r7, sp, #0
    42dc:	6078      	str	r0, [r7, #4]
    42de:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	683a      	ldr	r2, [r7, #0]
    42e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    42e8:	bf00      	nop
    42ea:	370c      	adds	r7, #12
    42ec:	46bd      	mov	sp, r7
    42ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f2:	4770      	bx	lr

000042f4 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    42f4:	b480      	push	{r7}
    42f6:	b083      	sub	sp, #12
    42f8:	af00      	add	r7, sp, #0
    42fa:	6078      	str	r0, [r7, #4]
    42fc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    42fe:	687b      	ldr	r3, [r7, #4]
    4300:	683a      	ldr	r2, [r7, #0]
    4302:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4306:	bf00      	nop
    4308:	370c      	adds	r7, #12
    430a:	46bd      	mov	sp, r7
    430c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4310:	4770      	bx	lr

00004312 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    4312:	b480      	push	{r7}
    4314:	b083      	sub	sp, #12
    4316:	af00      	add	r7, sp, #0
    4318:	6078      	str	r0, [r7, #4]
    431a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	683a      	ldr	r2, [r7, #0]
    4320:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4324:	bf00      	nop
    4326:	370c      	adds	r7, #12
    4328:	46bd      	mov	sp, r7
    432a:	f85d 7b04 	ldr.w	r7, [sp], #4
    432e:	4770      	bx	lr

00004330 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4330:	b480      	push	{r7}
    4332:	b083      	sub	sp, #12
    4334:	af00      	add	r7, sp, #0
    4336:	6078      	str	r0, [r7, #4]
    4338:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    433a:	687b      	ldr	r3, [r7, #4]
    433c:	683a      	ldr	r2, [r7, #0]
    433e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4342:	bf00      	nop
    4344:	370c      	adds	r7, #12
    4346:	46bd      	mov	sp, r7
    4348:	f85d 7b04 	ldr.w	r7, [sp], #4
    434c:	4770      	bx	lr
	...

00004350 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4350:	b580      	push	{r7, lr}
    4352:	b082      	sub	sp, #8
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	683a      	ldr	r2, [r7, #0]
    435e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	4618      	mov	r0, r3
    4366:	4b55      	ldr	r3, [pc, #340]	; (44bc <_can_async_init+0x16c>)
    4368:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    436a:	bf00      	nop
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	681b      	ldr	r3, [r3, #0]
    4370:	4618      	mov	r0, r3
    4372:	4b53      	ldr	r3, [pc, #332]	; (44c0 <_can_async_init+0x170>)
    4374:	4798      	blx	r3
    4376:	4603      	mov	r3, r0
    4378:	f083 0301 	eor.w	r3, r3, #1
    437c:	b2db      	uxtb	r3, r3
    437e:	2b00      	cmp	r3, #0
    4380:	d1f4      	bne.n	436c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	681b      	ldr	r3, [r3, #0]
    4386:	4618      	mov	r0, r3
    4388:	4b4e      	ldr	r3, [pc, #312]	; (44c4 <_can_async_init+0x174>)
    438a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    438c:	683b      	ldr	r3, [r7, #0]
    438e:	4a4e      	ldr	r2, [pc, #312]	; (44c8 <_can_async_init+0x178>)
    4390:	4293      	cmp	r3, r2
    4392:	d17a      	bne.n	448a <_can_async_init+0x13a>
		_can1_dev    = dev;
    4394:	4a4d      	ldr	r2, [pc, #308]	; (44cc <_can_async_init+0x17c>)
    4396:	687b      	ldr	r3, [r7, #4]
    4398:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	4a4c      	ldr	r2, [pc, #304]	; (44d0 <_can_async_init+0x180>)
    439e:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	681b      	ldr	r3, [r3, #0]
    43a4:	f44f 7140 	mov.w	r1, #768	; 0x300
    43a8:	4618      	mov	r0, r3
    43aa:	4b4a      	ldr	r3, [pc, #296]	; (44d4 <_can_async_init+0x184>)
    43ac:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	2102      	movs	r1, #2
    43b4:	4618      	mov	r0, r3
    43b6:	4b48      	ldr	r3, [pc, #288]	; (44d8 <_can_async_init+0x188>)
    43b8:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	681b      	ldr	r3, [r3, #0]
    43be:	4947      	ldr	r1, [pc, #284]	; (44dc <_can_async_init+0x18c>)
    43c0:	4618      	mov	r0, r3
    43c2:	4b47      	ldr	r3, [pc, #284]	; (44e0 <_can_async_init+0x190>)
    43c4:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	681b      	ldr	r3, [r3, #0]
    43ca:	4946      	ldr	r1, [pc, #280]	; (44e4 <_can_async_init+0x194>)
    43cc:	4618      	mov	r0, r3
    43ce:	4b46      	ldr	r3, [pc, #280]	; (44e8 <_can_async_init+0x198>)
    43d0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	681a      	ldr	r2, [r3, #0]
    43d6:	4b45      	ldr	r3, [pc, #276]	; (44ec <_can_async_init+0x19c>)
    43d8:	b29b      	uxth	r3, r3
    43da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    43de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    43e2:	4619      	mov	r1, r3
    43e4:	4610      	mov	r0, r2
    43e6:	4b42      	ldr	r3, [pc, #264]	; (44f0 <_can_async_init+0x1a0>)
    43e8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	681b      	ldr	r3, [r3, #0]
    43ee:	2107      	movs	r1, #7
    43f0:	4618      	mov	r0, r3
    43f2:	4b40      	ldr	r3, [pc, #256]	; (44f4 <_can_async_init+0x1a4>)
    43f4:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	2107      	movs	r1, #7
    43fc:	4618      	mov	r0, r3
    43fe:	4b3e      	ldr	r3, [pc, #248]	; (44f8 <_can_async_init+0x1a8>)
    4400:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	681a      	ldr	r2, [r3, #0]
    4406:	4b3d      	ldr	r3, [pc, #244]	; (44fc <_can_async_init+0x1ac>)
    4408:	b29b      	uxth	r3, r3
    440a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    440e:	4619      	mov	r1, r3
    4410:	4610      	mov	r0, r2
    4412:	4b3b      	ldr	r3, [pc, #236]	; (4500 <_can_async_init+0x1b0>)
    4414:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	681a      	ldr	r2, [r3, #0]
    441a:	4b3a      	ldr	r3, [pc, #232]	; (4504 <_can_async_init+0x1b4>)
    441c:	b29b      	uxth	r3, r3
    441e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4422:	4619      	mov	r1, r3
    4424:	4610      	mov	r0, r2
    4426:	4b38      	ldr	r3, [pc, #224]	; (4508 <_can_async_init+0x1b8>)
    4428:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	2108      	movs	r1, #8
    4430:	4618      	mov	r0, r3
    4432:	4b36      	ldr	r3, [pc, #216]	; (450c <_can_async_init+0x1bc>)
    4434:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4436:	687b      	ldr	r3, [r7, #4]
    4438:	681a      	ldr	r2, [r3, #0]
    443a:	4b35      	ldr	r3, [pc, #212]	; (4510 <_can_async_init+0x1c0>)
    443c:	b29b      	uxth	r3, r3
    443e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4442:	4619      	mov	r1, r3
    4444:	4610      	mov	r0, r2
    4446:	4b33      	ldr	r3, [pc, #204]	; (4514 <_can_async_init+0x1c4>)
    4448:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	681a      	ldr	r2, [r3, #0]
    444e:	4b32      	ldr	r3, [pc, #200]	; (4518 <_can_async_init+0x1c8>)
    4450:	b29b      	uxth	r3, r3
    4452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4456:	4619      	mov	r1, r3
    4458:	4610      	mov	r0, r2
    445a:	4b30      	ldr	r3, [pc, #192]	; (451c <_can_async_init+0x1cc>)
    445c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	681b      	ldr	r3, [r3, #0]
    4462:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4466:	4618      	mov	r0, r3
    4468:	4b2d      	ldr	r3, [pc, #180]	; (4520 <_can_async_init+0x1d0>)
    446a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    446c:	204f      	movs	r0, #79	; 0x4f
    446e:	4b2d      	ldr	r3, [pc, #180]	; (4524 <_can_async_init+0x1d4>)
    4470:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4472:	204f      	movs	r0, #79	; 0x4f
    4474:	4b2c      	ldr	r3, [pc, #176]	; (4528 <_can_async_init+0x1d8>)
    4476:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4478:	204f      	movs	r0, #79	; 0x4f
    447a:	4b2c      	ldr	r3, [pc, #176]	; (452c <_can_async_init+0x1dc>)
    447c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	681b      	ldr	r3, [r3, #0]
    4482:	2101      	movs	r1, #1
    4484:	4618      	mov	r0, r3
    4486:	4b2a      	ldr	r3, [pc, #168]	; (4530 <_can_async_init+0x1e0>)
    4488:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	681b      	ldr	r3, [r3, #0]
    448e:	4618      	mov	r0, r3
    4490:	4b28      	ldr	r3, [pc, #160]	; (4534 <_can_async_init+0x1e4>)
    4492:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	681b      	ldr	r3, [r3, #0]
    4498:	4618      	mov	r0, r3
    449a:	4b27      	ldr	r3, [pc, #156]	; (4538 <_can_async_init+0x1e8>)
    449c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    449e:	bf00      	nop
    44a0:	687b      	ldr	r3, [r7, #4]
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	4618      	mov	r0, r3
    44a6:	4b06      	ldr	r3, [pc, #24]	; (44c0 <_can_async_init+0x170>)
    44a8:	4798      	blx	r3
    44aa:	4603      	mov	r3, r0
    44ac:	2b00      	cmp	r3, #0
    44ae:	d1f7      	bne.n	44a0 <_can_async_init+0x150>
	};

	return ERR_NONE;
    44b0:	2300      	movs	r3, #0
}
    44b2:	4618      	mov	r0, r3
    44b4:	3708      	adds	r7, #8
    44b6:	46bd      	mov	sp, r7
    44b8:	bd80      	pop	{r7, pc}
    44ba:	bf00      	nop
    44bc:	00004105 	.word	0x00004105
    44c0:	00004125 	.word	0x00004125
    44c4:	00004173 	.word	0x00004173
    44c8:	42000400 	.word	0x42000400
    44cc:	20000928 	.word	0x20000928
    44d0:	20000004 	.word	0x20000004
    44d4:	000041b3 	.word	0x000041b3
    44d8:	000040cd 	.word	0x000040cd
    44dc:	00010c01 	.word	0x00010c01
    44e0:	000041d5 	.word	0x000041d5
    44e4:	00010c10 	.word	0x00010c10
    44e8:	000040e9 	.word	0x000040e9
    44ec:	20008050 	.word	0x20008050
    44f0:	000042b9 	.word	0x000042b9
    44f4:	000042d7 	.word	0x000042d7
    44f8:	00004313 	.word	0x00004313
    44fc:	20008008 	.word	0x20008008
    4500:	000042f5 	.word	0x000042f5
    4504:	20000888 	.word	0x20000888
    4508:	00004331 	.word	0x00004331
    450c:	00004241 	.word	0x00004241
    4510:	20000898 	.word	0x20000898
    4514:	0000425f 	.word	0x0000425f
    4518:	20000918 	.word	0x20000918
    451c:	0000427d 	.word	0x0000427d
    4520:	0000429b 	.word	0x0000429b
    4524:	00004025 	.word	0x00004025
    4528:	00004069 	.word	0x00004069
    452c:	00003fe9 	.word	0x00003fe9
    4530:	00004225 	.word	0x00004225
    4534:	00004193 	.word	0x00004193
    4538:	00004153 	.word	0x00004153

0000453c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    453c:	b590      	push	{r4, r7, lr}
    453e:	b083      	sub	sp, #12
    4540:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4542:	4b2c      	ldr	r3, [pc, #176]	; (45f4 <CAN1_Handler+0xb8>)
    4544:	681b      	ldr	r3, [r3, #0]
    4546:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	681b      	ldr	r3, [r3, #0]
    454c:	4618      	mov	r0, r3
    454e:	4b2a      	ldr	r3, [pc, #168]	; (45f8 <CAN1_Handler+0xbc>)
    4550:	4798      	blx	r3
    4552:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4554:	683b      	ldr	r3, [r7, #0]
    4556:	f003 0301 	and.w	r3, r3, #1
    455a:	2b00      	cmp	r3, #0
    455c:	d003      	beq.n	4566 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    455e:	687b      	ldr	r3, [r7, #4]
    4560:	689b      	ldr	r3, [r3, #8]
    4562:	6878      	ldr	r0, [r7, #4]
    4564:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4566:	683b      	ldr	r3, [r7, #0]
    4568:	f403 7300 	and.w	r3, r3, #512	; 0x200
    456c:	2b00      	cmp	r3, #0
    456e:	d003      	beq.n	4578 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	685b      	ldr	r3, [r3, #4]
    4574:	6878      	ldr	r0, [r7, #4]
    4576:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4578:	683b      	ldr	r3, [r7, #0]
    457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    457e:	2b00      	cmp	r3, #0
    4580:	d004      	beq.n	458c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	68db      	ldr	r3, [r3, #12]
    4586:	2103      	movs	r1, #3
    4588:	6878      	ldr	r0, [r7, #4]
    458a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    458c:	683b      	ldr	r3, [r7, #0]
    458e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4592:	2b00      	cmp	r3, #0
    4594:	d004      	beq.n	45a0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	68db      	ldr	r3, [r3, #12]
    459a:	2100      	movs	r1, #0
    459c:	6878      	ldr	r0, [r7, #4]
    459e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    45a0:	683b      	ldr	r3, [r7, #0]
    45a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    45a6:	2b00      	cmp	r3, #0
    45a8:	d00f      	beq.n	45ca <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	68dc      	ldr	r4, [r3, #12]
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	4618      	mov	r0, r3
    45b4:	4b11      	ldr	r3, [pc, #68]	; (45fc <CAN1_Handler+0xc0>)
    45b6:	4798      	blx	r3
    45b8:	4603      	mov	r3, r0
    45ba:	2b00      	cmp	r3, #0
    45bc:	d001      	beq.n	45c2 <CAN1_Handler+0x86>
    45be:	2302      	movs	r3, #2
    45c0:	e000      	b.n	45c4 <CAN1_Handler+0x88>
    45c2:	2301      	movs	r3, #1
    45c4:	4619      	mov	r1, r3
    45c6:	6878      	ldr	r0, [r7, #4]
    45c8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    45ca:	683b      	ldr	r3, [r7, #0]
    45cc:	f003 0308 	and.w	r3, r3, #8
    45d0:	2b00      	cmp	r3, #0
    45d2:	d004      	beq.n	45de <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    45d4:	687b      	ldr	r3, [r7, #4]
    45d6:	68db      	ldr	r3, [r3, #12]
    45d8:	2104      	movs	r1, #4
    45da:	6878      	ldr	r0, [r7, #4]
    45dc:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    45de:	687b      	ldr	r3, [r7, #4]
    45e0:	681b      	ldr	r3, [r3, #0]
    45e2:	6839      	ldr	r1, [r7, #0]
    45e4:	4618      	mov	r0, r3
    45e6:	4b06      	ldr	r3, [pc, #24]	; (4600 <CAN1_Handler+0xc4>)
    45e8:	4798      	blx	r3
}
    45ea:	bf00      	nop
    45ec:	370c      	adds	r7, #12
    45ee:	46bd      	mov	sp, r7
    45f0:	bd90      	pop	{r4, r7, pc}
    45f2:	bf00      	nop
    45f4:	20000928 	.word	0x20000928
    45f8:	0000420d 	.word	0x0000420d
    45fc:	000040a5 	.word	0x000040a5
    4600:	000041f1 	.word	0x000041f1

00004604 <__NVIC_SetPendingIRQ>:
{
    4604:	b480      	push	{r7}
    4606:	b083      	sub	sp, #12
    4608:	af00      	add	r7, sp, #0
    460a:	4603      	mov	r3, r0
    460c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    460e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4612:	2b00      	cmp	r3, #0
    4614:	db0c      	blt.n	4630 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4616:	4909      	ldr	r1, [pc, #36]	; (463c <__NVIC_SetPendingIRQ+0x38>)
    4618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    461c:	095b      	lsrs	r3, r3, #5
    461e:	88fa      	ldrh	r2, [r7, #6]
    4620:	f002 021f 	and.w	r2, r2, #31
    4624:	2001      	movs	r0, #1
    4626:	fa00 f202 	lsl.w	r2, r0, r2
    462a:	3340      	adds	r3, #64	; 0x40
    462c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4630:	bf00      	nop
    4632:	370c      	adds	r7, #12
    4634:	46bd      	mov	sp, r7
    4636:	f85d 7b04 	ldr.w	r7, [sp], #4
    463a:	4770      	bx	lr
    463c:	e000e100 	.word	0xe000e100

00004640 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4640:	b580      	push	{r7, lr}
    4642:	b082      	sub	sp, #8
    4644:	af00      	add	r7, sp, #0
    4646:	4603      	mov	r3, r0
    4648:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    464a:	79fb      	ldrb	r3, [r7, #7]
    464c:	b21b      	sxth	r3, r3
    464e:	4618      	mov	r0, r3
    4650:	4b02      	ldr	r3, [pc, #8]	; (465c <_irq_set+0x1c>)
    4652:	4798      	blx	r3
}
    4654:	bf00      	nop
    4656:	3708      	adds	r7, #8
    4658:	46bd      	mov	sp, r7
    465a:	bd80      	pop	{r7, pc}
    465c:	00004605 	.word	0x00004605

00004660 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4660:	b480      	push	{r7}
    4662:	b083      	sub	sp, #12
    4664:	af00      	add	r7, sp, #0
    4666:	4603      	mov	r3, r0
    4668:	6039      	str	r1, [r7, #0]
    466a:	80fb      	strh	r3, [r7, #6]
    466c:	4613      	mov	r3, r2
    466e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4670:	797b      	ldrb	r3, [r7, #5]
    4672:	3b04      	subs	r3, #4
    4674:	2b05      	cmp	r3, #5
    4676:	d86b      	bhi.n	4750 <_get_cycles_for_us_internal+0xf0>
    4678:	a201      	add	r2, pc, #4	; (adr r2, 4680 <_get_cycles_for_us_internal+0x20>)
    467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    467e:	bf00      	nop
    4680:	0000472f 	.word	0x0000472f
    4684:	0000470f 	.word	0x0000470f
    4688:	000046f1 	.word	0x000046f1
    468c:	000046d3 	.word	0x000046d3
    4690:	000046b5 	.word	0x000046b5
    4694:	00004699 	.word	0x00004699
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4698:	88fb      	ldrh	r3, [r7, #6]
    469a:	683a      	ldr	r2, [r7, #0]
    469c:	4935      	ldr	r1, [pc, #212]	; (4774 <_get_cycles_for_us_internal+0x114>)
    469e:	fba1 1202 	umull	r1, r2, r1, r2
    46a2:	0c92      	lsrs	r2, r2, #18
    46a4:	fb02 f303 	mul.w	r3, r2, r3
    46a8:	3302      	adds	r3, #2
    46aa:	4a33      	ldr	r2, [pc, #204]	; (4778 <_get_cycles_for_us_internal+0x118>)
    46ac:	fba2 2303 	umull	r2, r3, r2, r3
    46b0:	085b      	lsrs	r3, r3, #1
    46b2:	e059      	b.n	4768 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    46b4:	88fb      	ldrh	r3, [r7, #6]
    46b6:	683a      	ldr	r2, [r7, #0]
    46b8:	0952      	lsrs	r2, r2, #5
    46ba:	4930      	ldr	r1, [pc, #192]	; (477c <_get_cycles_for_us_internal+0x11c>)
    46bc:	fba1 1202 	umull	r1, r2, r1, r2
    46c0:	09d2      	lsrs	r2, r2, #7
    46c2:	fb02 f303 	mul.w	r3, r2, r3
    46c6:	331d      	adds	r3, #29
    46c8:	4a2d      	ldr	r2, [pc, #180]	; (4780 <_get_cycles_for_us_internal+0x120>)
    46ca:	fba2 2303 	umull	r2, r3, r2, r3
    46ce:	091b      	lsrs	r3, r3, #4
    46d0:	e04a      	b.n	4768 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    46d2:	88fb      	ldrh	r3, [r7, #6]
    46d4:	683a      	ldr	r2, [r7, #0]
    46d6:	492b      	ldr	r1, [pc, #172]	; (4784 <_get_cycles_for_us_internal+0x124>)
    46d8:	fba1 1202 	umull	r1, r2, r1, r2
    46dc:	0b52      	lsrs	r2, r2, #13
    46de:	fb02 f303 	mul.w	r3, r2, r3
    46e2:	f203 132b 	addw	r3, r3, #299	; 0x12b
    46e6:	4a28      	ldr	r2, [pc, #160]	; (4788 <_get_cycles_for_us_internal+0x128>)
    46e8:	fba2 2303 	umull	r2, r3, r2, r3
    46ec:	095b      	lsrs	r3, r3, #5
    46ee:	e03b      	b.n	4768 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    46f0:	88fb      	ldrh	r3, [r7, #6]
    46f2:	683a      	ldr	r2, [r7, #0]
    46f4:	4925      	ldr	r1, [pc, #148]	; (478c <_get_cycles_for_us_internal+0x12c>)
    46f6:	fba1 1202 	umull	r1, r2, r1, r2
    46fa:	0992      	lsrs	r2, r2, #6
    46fc:	fb02 f303 	mul.w	r3, r2, r3
    4700:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4704:	4a22      	ldr	r2, [pc, #136]	; (4790 <_get_cycles_for_us_internal+0x130>)
    4706:	fba2 2303 	umull	r2, r3, r2, r3
    470a:	099b      	lsrs	r3, r3, #6
    470c:	e02c      	b.n	4768 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    470e:	88fb      	ldrh	r3, [r7, #6]
    4710:	683a      	ldr	r2, [r7, #0]
    4712:	4920      	ldr	r1, [pc, #128]	; (4794 <_get_cycles_for_us_internal+0x134>)
    4714:	fba1 1202 	umull	r1, r2, r1, r2
    4718:	0952      	lsrs	r2, r2, #5
    471a:	fb02 f303 	mul.w	r3, r2, r3
    471e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4722:	332f      	adds	r3, #47	; 0x2f
    4724:	4a1c      	ldr	r2, [pc, #112]	; (4798 <_get_cycles_for_us_internal+0x138>)
    4726:	fba2 2303 	umull	r2, r3, r2, r3
    472a:	0b5b      	lsrs	r3, r3, #13
    472c:	e01c      	b.n	4768 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    472e:	88fb      	ldrh	r3, [r7, #6]
    4730:	683a      	ldr	r2, [r7, #0]
    4732:	491a      	ldr	r1, [pc, #104]	; (479c <_get_cycles_for_us_internal+0x13c>)
    4734:	fba1 1202 	umull	r1, r2, r1, r2
    4738:	08d2      	lsrs	r2, r2, #3
    473a:	fb02 f303 	mul.w	r3, r2, r3
    473e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4742:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4746:	4a16      	ldr	r2, [pc, #88]	; (47a0 <_get_cycles_for_us_internal+0x140>)
    4748:	fba2 2303 	umull	r2, r3, r2, r3
    474c:	0c5b      	lsrs	r3, r3, #17
    474e:	e00b      	b.n	4768 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4750:	88fb      	ldrh	r3, [r7, #6]
    4752:	683a      	ldr	r2, [r7, #0]
    4754:	fb02 f303 	mul.w	r3, r2, r3
    4758:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    475c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4760:	4a10      	ldr	r2, [pc, #64]	; (47a4 <_get_cycles_for_us_internal+0x144>)
    4762:	fba2 2303 	umull	r2, r3, r2, r3
    4766:	0c9b      	lsrs	r3, r3, #18
	}
}
    4768:	4618      	mov	r0, r3
    476a:	370c      	adds	r7, #12
    476c:	46bd      	mov	sp, r7
    476e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4772:	4770      	bx	lr
    4774:	431bde83 	.word	0x431bde83
    4778:	aaaaaaab 	.word	0xaaaaaaab
    477c:	0a7c5ac5 	.word	0x0a7c5ac5
    4780:	88888889 	.word	0x88888889
    4784:	d1b71759 	.word	0xd1b71759
    4788:	1b4e81b5 	.word	0x1b4e81b5
    478c:	10624dd3 	.word	0x10624dd3
    4790:	057619f1 	.word	0x057619f1
    4794:	51eb851f 	.word	0x51eb851f
    4798:	45e7b273 	.word	0x45e7b273
    479c:	cccccccd 	.word	0xcccccccd
    47a0:	6fd91d85 	.word	0x6fd91d85
    47a4:	165e9f81 	.word	0x165e9f81

000047a8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    47a8:	b580      	push	{r7, lr}
    47aa:	b082      	sub	sp, #8
    47ac:	af00      	add	r7, sp, #0
    47ae:	4603      	mov	r3, r0
    47b0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    47b2:	88fb      	ldrh	r3, [r7, #6]
    47b4:	2209      	movs	r2, #9
    47b6:	4904      	ldr	r1, [pc, #16]	; (47c8 <_get_cycles_for_us+0x20>)
    47b8:	4618      	mov	r0, r3
    47ba:	4b04      	ldr	r3, [pc, #16]	; (47cc <_get_cycles_for_us+0x24>)
    47bc:	4798      	blx	r3
    47be:	4603      	mov	r3, r0
}
    47c0:	4618      	mov	r0, r3
    47c2:	3708      	adds	r7, #8
    47c4:	46bd      	mov	sp, r7
    47c6:	bd80      	pop	{r7, pc}
    47c8:	07270e00 	.word	0x07270e00
    47cc:	00004661 	.word	0x00004661

000047d0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    47d0:	b480      	push	{r7}
    47d2:	b083      	sub	sp, #12
    47d4:	af00      	add	r7, sp, #0
    47d6:	4603      	mov	r3, r0
    47d8:	6039      	str	r1, [r7, #0]
    47da:	80fb      	strh	r3, [r7, #6]
    47dc:	4613      	mov	r3, r2
    47de:	717b      	strb	r3, [r7, #5]
	switch (power) {
    47e0:	797b      	ldrb	r3, [r7, #5]
    47e2:	3b04      	subs	r3, #4
    47e4:	2b05      	cmp	r3, #5
    47e6:	d870      	bhi.n	48ca <_get_cycles_for_ms_internal+0xfa>
    47e8:	a201      	add	r2, pc, #4	; (adr r2, 47f0 <_get_cycles_for_ms_internal+0x20>)
    47ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    47ee:	bf00      	nop
    47f0:	000048ad 	.word	0x000048ad
    47f4:	00004891 	.word	0x00004891
    47f8:	00004875 	.word	0x00004875
    47fc:	00004851 	.word	0x00004851
    4800:	0000482d 	.word	0x0000482d
    4804:	00004809 	.word	0x00004809
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4808:	88fb      	ldrh	r3, [r7, #6]
    480a:	683a      	ldr	r2, [r7, #0]
    480c:	4937      	ldr	r1, [pc, #220]	; (48ec <_get_cycles_for_ms_internal+0x11c>)
    480e:	fba1 1202 	umull	r1, r2, r1, r2
    4812:	0c92      	lsrs	r2, r2, #18
    4814:	fb02 f303 	mul.w	r3, r2, r3
    4818:	3302      	adds	r3, #2
    481a:	4a35      	ldr	r2, [pc, #212]	; (48f0 <_get_cycles_for_ms_internal+0x120>)
    481c:	fba2 2303 	umull	r2, r3, r2, r3
    4820:	085b      	lsrs	r3, r3, #1
    4822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4826:	fb02 f303 	mul.w	r3, r2, r3
    482a:	e058      	b.n	48de <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    482c:	88fb      	ldrh	r3, [r7, #6]
    482e:	683a      	ldr	r2, [r7, #0]
    4830:	0952      	lsrs	r2, r2, #5
    4832:	4930      	ldr	r1, [pc, #192]	; (48f4 <_get_cycles_for_ms_internal+0x124>)
    4834:	fba1 1202 	umull	r1, r2, r1, r2
    4838:	09d2      	lsrs	r2, r2, #7
    483a:	fb02 f303 	mul.w	r3, r2, r3
    483e:	3302      	adds	r3, #2
    4840:	4a2b      	ldr	r2, [pc, #172]	; (48f0 <_get_cycles_for_ms_internal+0x120>)
    4842:	fba2 2303 	umull	r2, r3, r2, r3
    4846:	085b      	lsrs	r3, r3, #1
    4848:	2264      	movs	r2, #100	; 0x64
    484a:	fb02 f303 	mul.w	r3, r2, r3
    484e:	e046      	b.n	48de <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4850:	88fb      	ldrh	r3, [r7, #6]
    4852:	683a      	ldr	r2, [r7, #0]
    4854:	4928      	ldr	r1, [pc, #160]	; (48f8 <_get_cycles_for_ms_internal+0x128>)
    4856:	fba1 1202 	umull	r1, r2, r1, r2
    485a:	0b52      	lsrs	r2, r2, #13
    485c:	fb02 f303 	mul.w	r3, r2, r3
    4860:	3302      	adds	r3, #2
    4862:	4a23      	ldr	r2, [pc, #140]	; (48f0 <_get_cycles_for_ms_internal+0x120>)
    4864:	fba2 2303 	umull	r2, r3, r2, r3
    4868:	085a      	lsrs	r2, r3, #1
    486a:	4613      	mov	r3, r2
    486c:	009b      	lsls	r3, r3, #2
    486e:	4413      	add	r3, r2
    4870:	005b      	lsls	r3, r3, #1
    4872:	e034      	b.n	48de <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4874:	88fb      	ldrh	r3, [r7, #6]
    4876:	683a      	ldr	r2, [r7, #0]
    4878:	4920      	ldr	r1, [pc, #128]	; (48fc <_get_cycles_for_ms_internal+0x12c>)
    487a:	fba1 1202 	umull	r1, r2, r1, r2
    487e:	0992      	lsrs	r2, r2, #6
    4880:	fb02 f303 	mul.w	r3, r2, r3
    4884:	3302      	adds	r3, #2
    4886:	4a1a      	ldr	r2, [pc, #104]	; (48f0 <_get_cycles_for_ms_internal+0x120>)
    4888:	fba2 2303 	umull	r2, r3, r2, r3
    488c:	085b      	lsrs	r3, r3, #1
    488e:	e026      	b.n	48de <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4890:	88fb      	ldrh	r3, [r7, #6]
    4892:	683a      	ldr	r2, [r7, #0]
    4894:	491a      	ldr	r1, [pc, #104]	; (4900 <_get_cycles_for_ms_internal+0x130>)
    4896:	fba1 1202 	umull	r1, r2, r1, r2
    489a:	0952      	lsrs	r2, r2, #5
    489c:	fb02 f303 	mul.w	r3, r2, r3
    48a0:	331d      	adds	r3, #29
    48a2:	4a18      	ldr	r2, [pc, #96]	; (4904 <_get_cycles_for_ms_internal+0x134>)
    48a4:	fba2 2303 	umull	r2, r3, r2, r3
    48a8:	091b      	lsrs	r3, r3, #4
    48aa:	e018      	b.n	48de <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    48ac:	88fb      	ldrh	r3, [r7, #6]
    48ae:	683a      	ldr	r2, [r7, #0]
    48b0:	4915      	ldr	r1, [pc, #84]	; (4908 <_get_cycles_for_ms_internal+0x138>)
    48b2:	fba1 1202 	umull	r1, r2, r1, r2
    48b6:	08d2      	lsrs	r2, r2, #3
    48b8:	fb02 f303 	mul.w	r3, r2, r3
    48bc:	f203 132b 	addw	r3, r3, #299	; 0x12b
    48c0:	4a12      	ldr	r2, [pc, #72]	; (490c <_get_cycles_for_ms_internal+0x13c>)
    48c2:	fba2 2303 	umull	r2, r3, r2, r3
    48c6:	095b      	lsrs	r3, r3, #5
    48c8:	e009      	b.n	48de <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    48ca:	88fb      	ldrh	r3, [r7, #6]
    48cc:	683a      	ldr	r2, [r7, #0]
    48ce:	fb02 f303 	mul.w	r3, r2, r3
    48d2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    48d6:	4a0e      	ldr	r2, [pc, #56]	; (4910 <_get_cycles_for_ms_internal+0x140>)
    48d8:	fba2 2303 	umull	r2, r3, r2, r3
    48dc:	099b      	lsrs	r3, r3, #6
	}
}
    48de:	4618      	mov	r0, r3
    48e0:	370c      	adds	r7, #12
    48e2:	46bd      	mov	sp, r7
    48e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e8:	4770      	bx	lr
    48ea:	bf00      	nop
    48ec:	431bde83 	.word	0x431bde83
    48f0:	aaaaaaab 	.word	0xaaaaaaab
    48f4:	0a7c5ac5 	.word	0x0a7c5ac5
    48f8:	d1b71759 	.word	0xd1b71759
    48fc:	10624dd3 	.word	0x10624dd3
    4900:	51eb851f 	.word	0x51eb851f
    4904:	88888889 	.word	0x88888889
    4908:	cccccccd 	.word	0xcccccccd
    490c:	1b4e81b5 	.word	0x1b4e81b5
    4910:	057619f1 	.word	0x057619f1

00004914 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4914:	b580      	push	{r7, lr}
    4916:	b082      	sub	sp, #8
    4918:	af00      	add	r7, sp, #0
    491a:	4603      	mov	r3, r0
    491c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    491e:	88fb      	ldrh	r3, [r7, #6]
    4920:	2209      	movs	r2, #9
    4922:	4904      	ldr	r1, [pc, #16]	; (4934 <_get_cycles_for_ms+0x20>)
    4924:	4618      	mov	r0, r3
    4926:	4b04      	ldr	r3, [pc, #16]	; (4938 <_get_cycles_for_ms+0x24>)
    4928:	4798      	blx	r3
    492a:	4603      	mov	r3, r0
}
    492c:	4618      	mov	r0, r3
    492e:	3708      	adds	r7, #8
    4930:	46bd      	mov	sp, r7
    4932:	bd80      	pop	{r7, pc}
    4934:	07270e00 	.word	0x07270e00
    4938:	000047d1 	.word	0x000047d1
    493c:	00000000 	.word	0x00000000

00004940 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4940:	b480      	push	{r7}
    4942:	b083      	sub	sp, #12
    4944:	af00      	add	r7, sp, #0
    4946:	6078      	str	r0, [r7, #4]
    4948:	6039      	str	r1, [r7, #0]
    494a:	bf00      	nop
    494c:	f3af 8000 	nop.w

00004950 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4950:	3901      	subs	r1, #1
    4952:	d8fd      	bhi.n	4950 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4954:	bf00      	nop
    4956:	370c      	adds	r7, #12
    4958:	46bd      	mov	sp, r7
    495a:	f85d 7b04 	ldr.w	r7, [sp], #4
    495e:	4770      	bx	lr

00004960 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4960:	b480      	push	{r7}
    4962:	b083      	sub	sp, #12
    4964:	af00      	add	r7, sp, #0
    4966:	6078      	str	r0, [r7, #4]
    4968:	460b      	mov	r3, r1
    496a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	881b      	ldrh	r3, [r3, #0]
    4970:	b29a      	uxth	r2, r3
    4972:	887b      	ldrh	r3, [r7, #2]
    4974:	021b      	lsls	r3, r3, #8
    4976:	b29b      	uxth	r3, r3
    4978:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    497c:	b29b      	uxth	r3, r3
    497e:	4313      	orrs	r3, r2
    4980:	b29a      	uxth	r2, r3
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4986:	bf00      	nop
    4988:	370c      	adds	r7, #12
    498a:	46bd      	mov	sp, r7
    498c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4990:	4770      	bx	lr

00004992 <hri_port_set_EVCTRL_reg>:
{
    4992:	b480      	push	{r7}
    4994:	b085      	sub	sp, #20
    4996:	af00      	add	r7, sp, #0
    4998:	60f8      	str	r0, [r7, #12]
    499a:	460b      	mov	r3, r1
    499c:	607a      	str	r2, [r7, #4]
    499e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    49a0:	7afb      	ldrb	r3, [r7, #11]
    49a2:	7afa      	ldrb	r2, [r7, #11]
    49a4:	68f9      	ldr	r1, [r7, #12]
    49a6:	01d2      	lsls	r2, r2, #7
    49a8:	440a      	add	r2, r1
    49aa:	322c      	adds	r2, #44	; 0x2c
    49ac:	6811      	ldr	r1, [r2, #0]
    49ae:	687a      	ldr	r2, [r7, #4]
    49b0:	430a      	orrs	r2, r1
    49b2:	68f9      	ldr	r1, [r7, #12]
    49b4:	01db      	lsls	r3, r3, #7
    49b6:	440b      	add	r3, r1
    49b8:	332c      	adds	r3, #44	; 0x2c
    49ba:	601a      	str	r2, [r3, #0]
}
    49bc:	bf00      	nop
    49be:	3714      	adds	r7, #20
    49c0:	46bd      	mov	sp, r7
    49c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49c6:	4770      	bx	lr

000049c8 <_port_event_init>:

static inline void _port_event_init()
{
    49c8:	b580      	push	{r7, lr}
    49ca:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    49cc:	2200      	movs	r2, #0
    49ce:	2100      	movs	r1, #0
    49d0:	480a      	ldr	r0, [pc, #40]	; (49fc <_port_event_init+0x34>)
    49d2:	4b0b      	ldr	r3, [pc, #44]	; (4a00 <_port_event_init+0x38>)
    49d4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    49d6:	2200      	movs	r2, #0
    49d8:	2101      	movs	r1, #1
    49da:	4808      	ldr	r0, [pc, #32]	; (49fc <_port_event_init+0x34>)
    49dc:	4b08      	ldr	r3, [pc, #32]	; (4a00 <_port_event_init+0x38>)
    49de:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    49e0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    49e4:	2102      	movs	r1, #2
    49e6:	4805      	ldr	r0, [pc, #20]	; (49fc <_port_event_init+0x34>)
    49e8:	4b05      	ldr	r3, [pc, #20]	; (4a00 <_port_event_init+0x38>)
    49ea:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    49ec:	2200      	movs	r2, #0
    49ee:	2103      	movs	r1, #3
    49f0:	4802      	ldr	r0, [pc, #8]	; (49fc <_port_event_init+0x34>)
    49f2:	4b03      	ldr	r3, [pc, #12]	; (4a00 <_port_event_init+0x38>)
    49f4:	4798      	blx	r3
}
    49f6:	bf00      	nop
    49f8:	bd80      	pop	{r7, pc}
    49fa:	bf00      	nop
    49fc:	41008000 	.word	0x41008000
    4a00:	00004993 	.word	0x00004993

00004a04 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4a04:	b580      	push	{r7, lr}
    4a06:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4a08:	2104      	movs	r1, #4
    4a0a:	480b      	ldr	r0, [pc, #44]	; (4a38 <_init_chip+0x34>)
    4a0c:	4b0b      	ldr	r3, [pc, #44]	; (4a3c <_init_chip+0x38>)
    4a0e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4a10:	4b0b      	ldr	r3, [pc, #44]	; (4a40 <_init_chip+0x3c>)
    4a12:	4798      	blx	r3
	_oscctrl_init_sources();
    4a14:	4b0b      	ldr	r3, [pc, #44]	; (4a44 <_init_chip+0x40>)
    4a16:	4798      	blx	r3
	_mclk_init();
    4a18:	4b0b      	ldr	r3, [pc, #44]	; (4a48 <_init_chip+0x44>)
    4a1a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4a1c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4a20:	4b0a      	ldr	r3, [pc, #40]	; (4a4c <_init_chip+0x48>)
    4a22:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4a24:	4b0a      	ldr	r3, [pc, #40]	; (4a50 <_init_chip+0x4c>)
    4a26:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4a28:	f640 30df 	movw	r0, #3039	; 0xbdf
    4a2c:	4b07      	ldr	r3, [pc, #28]	; (4a4c <_init_chip+0x48>)
    4a2e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4a30:	4b08      	ldr	r3, [pc, #32]	; (4a54 <_init_chip+0x50>)
    4a32:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4a34:	bf00      	nop
    4a36:	bd80      	pop	{r7, pc}
    4a38:	41004000 	.word	0x41004000
    4a3c:	00004961 	.word	0x00004961
    4a40:	00005515 	.word	0x00005515
    4a44:	000059dd 	.word	0x000059dd
    4a48:	00005435 	.word	0x00005435
    4a4c:	000052f5 	.word	0x000052f5
    4a50:	00005a1d 	.word	0x00005a1d
    4a54:	000049c9 	.word	0x000049c9

00004a58 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4a58:	b480      	push	{r7}
    4a5a:	b083      	sub	sp, #12
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	6078      	str	r0, [r7, #4]
    4a60:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	683a      	ldr	r2, [r7, #0]
    4a66:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4a68:	2300      	movs	r3, #0
}
    4a6a:	4618      	mov	r0, r3
    4a6c:	370c      	adds	r7, #12
    4a6e:	46bd      	mov	sp, r7
    4a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a74:	4770      	bx	lr
	...

00004a78 <__NVIC_EnableIRQ>:
{
    4a78:	b480      	push	{r7}
    4a7a:	b083      	sub	sp, #12
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	4603      	mov	r3, r0
    4a80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a86:	2b00      	cmp	r3, #0
    4a88:	db0b      	blt.n	4aa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a8a:	4909      	ldr	r1, [pc, #36]	; (4ab0 <__NVIC_EnableIRQ+0x38>)
    4a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a90:	095b      	lsrs	r3, r3, #5
    4a92:	88fa      	ldrh	r2, [r7, #6]
    4a94:	f002 021f 	and.w	r2, r2, #31
    4a98:	2001      	movs	r0, #1
    4a9a:	fa00 f202 	lsl.w	r2, r0, r2
    4a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4aa2:	bf00      	nop
    4aa4:	370c      	adds	r7, #12
    4aa6:	46bd      	mov	sp, r7
    4aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aac:	4770      	bx	lr
    4aae:	bf00      	nop
    4ab0:	e000e100 	.word	0xe000e100

00004ab4 <__NVIC_DisableIRQ>:
{
    4ab4:	b480      	push	{r7}
    4ab6:	b083      	sub	sp, #12
    4ab8:	af00      	add	r7, sp, #0
    4aba:	4603      	mov	r3, r0
    4abc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	db10      	blt.n	4ae8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ac6:	490b      	ldr	r1, [pc, #44]	; (4af4 <__NVIC_DisableIRQ+0x40>)
    4ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4acc:	095b      	lsrs	r3, r3, #5
    4ace:	88fa      	ldrh	r2, [r7, #6]
    4ad0:	f002 021f 	and.w	r2, r2, #31
    4ad4:	2001      	movs	r0, #1
    4ad6:	fa00 f202 	lsl.w	r2, r0, r2
    4ada:	3320      	adds	r3, #32
    4adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4ae0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ae4:	f3bf 8f6f 	isb	sy
}
    4ae8:	bf00      	nop
    4aea:	370c      	adds	r7, #12
    4aec:	46bd      	mov	sp, r7
    4aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4af2:	4770      	bx	lr
    4af4:	e000e100 	.word	0xe000e100

00004af8 <__NVIC_ClearPendingIRQ>:
{
    4af8:	b480      	push	{r7}
    4afa:	b083      	sub	sp, #12
    4afc:	af00      	add	r7, sp, #0
    4afe:	4603      	mov	r3, r0
    4b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b06:	2b00      	cmp	r3, #0
    4b08:	db0c      	blt.n	4b24 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b0a:	4909      	ldr	r1, [pc, #36]	; (4b30 <__NVIC_ClearPendingIRQ+0x38>)
    4b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b10:	095b      	lsrs	r3, r3, #5
    4b12:	88fa      	ldrh	r2, [r7, #6]
    4b14:	f002 021f 	and.w	r2, r2, #31
    4b18:	2001      	movs	r0, #1
    4b1a:	fa00 f202 	lsl.w	r2, r0, r2
    4b1e:	3360      	adds	r3, #96	; 0x60
    4b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b24:	bf00      	nop
    4b26:	370c      	adds	r7, #12
    4b28:	46bd      	mov	sp, r7
    4b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2e:	4770      	bx	lr
    4b30:	e000e100 	.word	0xe000e100

00004b34 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4b34:	b480      	push	{r7}
    4b36:	b083      	sub	sp, #12
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
    4b3c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4b3e:	bf00      	nop
    4b40:	687b      	ldr	r3, [r7, #4]
    4b42:	685a      	ldr	r2, [r3, #4]
    4b44:	683b      	ldr	r3, [r7, #0]
    4b46:	4013      	ands	r3, r2
    4b48:	2b00      	cmp	r3, #0
    4b4a:	d1f9      	bne.n	4b40 <hri_eic_wait_for_sync+0xc>
	};
}
    4b4c:	bf00      	nop
    4b4e:	370c      	adds	r7, #12
    4b50:	46bd      	mov	sp, r7
    4b52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b56:	4770      	bx	lr

00004b58 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4b58:	b480      	push	{r7}
    4b5a:	b083      	sub	sp, #12
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
    4b60:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	685a      	ldr	r2, [r3, #4]
    4b66:	683b      	ldr	r3, [r7, #0]
    4b68:	4013      	ands	r3, r2
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	bf14      	ite	ne
    4b6e:	2301      	movne	r3, #1
    4b70:	2300      	moveq	r3, #0
    4b72:	b2db      	uxtb	r3, r3
}
    4b74:	4618      	mov	r0, r3
    4b76:	370c      	adds	r7, #12
    4b78:	46bd      	mov	sp, r7
    4b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b7e:	4770      	bx	lr

00004b80 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4b80:	b480      	push	{r7}
    4b82:	b083      	sub	sp, #12
    4b84:	af00      	add	r7, sp, #0
    4b86:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	695b      	ldr	r3, [r3, #20]
}
    4b8c:	4618      	mov	r0, r3
    4b8e:	370c      	adds	r7, #12
    4b90:	46bd      	mov	sp, r7
    4b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b96:	4770      	bx	lr

00004b98 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4b98:	b480      	push	{r7}
    4b9a:	b083      	sub	sp, #12
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	683a      	ldr	r2, [r7, #0]
    4ba6:	615a      	str	r2, [r3, #20]
}
    4ba8:	bf00      	nop
    4baa:	370c      	adds	r7, #12
    4bac:	46bd      	mov	sp, r7
    4bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bb2:	4770      	bx	lr

00004bb4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4bb4:	b480      	push	{r7}
    4bb6:	b083      	sub	sp, #12
    4bb8:	af00      	add	r7, sp, #0
    4bba:	6078      	str	r0, [r7, #4]
    4bbc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	683a      	ldr	r2, [r7, #0]
    4bc2:	611a      	str	r2, [r3, #16]
}
    4bc4:	bf00      	nop
    4bc6:	370c      	adds	r7, #12
    4bc8:	46bd      	mov	sp, r7
    4bca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bce:	4770      	bx	lr

00004bd0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4bd0:	b480      	push	{r7}
    4bd2:	b083      	sub	sp, #12
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	6078      	str	r0, [r7, #4]
    4bd8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	683a      	ldr	r2, [r7, #0]
    4bde:	60da      	str	r2, [r3, #12]
}
    4be0:	bf00      	nop
    4be2:	370c      	adds	r7, #12
    4be4:	46bd      	mov	sp, r7
    4be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bea:	4770      	bx	lr

00004bec <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b082      	sub	sp, #8
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	781b      	ldrb	r3, [r3, #0]
    4bf8:	b2db      	uxtb	r3, r3
    4bfa:	f043 0302 	orr.w	r3, r3, #2
    4bfe:	b2da      	uxtb	r2, r3
    4c00:	687b      	ldr	r3, [r7, #4]
    4c02:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4c04:	2103      	movs	r1, #3
    4c06:	6878      	ldr	r0, [r7, #4]
    4c08:	4b02      	ldr	r3, [pc, #8]	; (4c14 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4c0a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c0c:	bf00      	nop
    4c0e:	3708      	adds	r7, #8
    4c10:	46bd      	mov	sp, r7
    4c12:	bd80      	pop	{r7, pc}
    4c14:	00004b35 	.word	0x00004b35

00004c18 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4c18:	b580      	push	{r7, lr}
    4c1a:	b082      	sub	sp, #8
    4c1c:	af00      	add	r7, sp, #0
    4c1e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	b2db      	uxtb	r3, r3
    4c26:	f023 0302 	bic.w	r3, r3, #2
    4c2a:	b2da      	uxtb	r2, r3
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4c30:	2103      	movs	r1, #3
    4c32:	6878      	ldr	r0, [r7, #4]
    4c34:	4b02      	ldr	r3, [pc, #8]	; (4c40 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4c36:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c38:	bf00      	nop
    4c3a:	3708      	adds	r7, #8
    4c3c:	46bd      	mov	sp, r7
    4c3e:	bd80      	pop	{r7, pc}
    4c40:	00004b35 	.word	0x00004b35

00004c44 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4c44:	b580      	push	{r7, lr}
    4c46:	b084      	sub	sp, #16
    4c48:	af00      	add	r7, sp, #0
    4c4a:	6078      	str	r0, [r7, #4]
    4c4c:	460b      	mov	r3, r1
    4c4e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4c50:	687b      	ldr	r3, [r7, #4]
    4c52:	781b      	ldrb	r3, [r3, #0]
    4c54:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4c56:	7bfb      	ldrb	r3, [r7, #15]
    4c58:	f023 0310 	bic.w	r3, r3, #16
    4c5c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4c5e:	78fb      	ldrb	r3, [r7, #3]
    4c60:	011b      	lsls	r3, r3, #4
    4c62:	b25a      	sxtb	r2, r3
    4c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c68:	4313      	orrs	r3, r2
    4c6a:	b25b      	sxtb	r3, r3
    4c6c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	7bfa      	ldrb	r2, [r7, #15]
    4c72:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4c74:	2103      	movs	r1, #3
    4c76:	6878      	ldr	r0, [r7, #4]
    4c78:	4b02      	ldr	r3, [pc, #8]	; (4c84 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4c7a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c7c:	bf00      	nop
    4c7e:	3710      	adds	r7, #16
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	00004b35 	.word	0x00004b35

00004c88 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	b084      	sub	sp, #16
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	6078      	str	r0, [r7, #4]
    4c90:	460b      	mov	r3, r1
    4c92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4c94:	2103      	movs	r1, #3
    4c96:	6878      	ldr	r0, [r7, #4]
    4c98:	4b06      	ldr	r3, [pc, #24]	; (4cb4 <hri_eic_get_CTRLA_reg+0x2c>)
    4c9a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4ca2:	7bfa      	ldrb	r2, [r7, #15]
    4ca4:	78fb      	ldrb	r3, [r7, #3]
    4ca6:	4013      	ands	r3, r2
    4ca8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4caa:	7bfb      	ldrb	r3, [r7, #15]
}
    4cac:	4618      	mov	r0, r3
    4cae:	3710      	adds	r7, #16
    4cb0:	46bd      	mov	sp, r7
    4cb2:	bd80      	pop	{r7, pc}
    4cb4:	00004b35 	.word	0x00004b35

00004cb8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	b082      	sub	sp, #8
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	6078      	str	r0, [r7, #4]
    4cc0:	460b      	mov	r3, r1
    4cc2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	78fa      	ldrb	r2, [r7, #3]
    4cc8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4cca:	2103      	movs	r1, #3
    4ccc:	6878      	ldr	r0, [r7, #4]
    4cce:	4b03      	ldr	r3, [pc, #12]	; (4cdc <hri_eic_write_CTRLA_reg+0x24>)
    4cd0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4cd2:	bf00      	nop
    4cd4:	3708      	adds	r7, #8
    4cd6:	46bd      	mov	sp, r7
    4cd8:	bd80      	pop	{r7, pc}
    4cda:	bf00      	nop
    4cdc:	00004b35 	.word	0x00004b35

00004ce0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4ce0:	b480      	push	{r7}
    4ce2:	b083      	sub	sp, #12
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	6078      	str	r0, [r7, #4]
    4ce8:	460b      	mov	r3, r1
    4cea:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	78fa      	ldrb	r2, [r7, #3]
    4cf0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4cf2:	bf00      	nop
    4cf4:	370c      	adds	r7, #12
    4cf6:	46bd      	mov	sp, r7
    4cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cfc:	4770      	bx	lr

00004cfe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4cfe:	b480      	push	{r7}
    4d00:	b083      	sub	sp, #12
    4d02:	af00      	add	r7, sp, #0
    4d04:	6078      	str	r0, [r7, #4]
    4d06:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	683a      	ldr	r2, [r7, #0]
    4d0c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d0e:	bf00      	nop
    4d10:	370c      	adds	r7, #12
    4d12:	46bd      	mov	sp, r7
    4d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d18:	4770      	bx	lr

00004d1a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4d1a:	b480      	push	{r7}
    4d1c:	b083      	sub	sp, #12
    4d1e:	af00      	add	r7, sp, #0
    4d20:	6078      	str	r0, [r7, #4]
    4d22:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	683a      	ldr	r2, [r7, #0]
    4d28:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d2a:	bf00      	nop
    4d2c:	370c      	adds	r7, #12
    4d2e:	46bd      	mov	sp, r7
    4d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d34:	4770      	bx	lr

00004d36 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4d36:	b480      	push	{r7}
    4d38:	b085      	sub	sp, #20
    4d3a:	af00      	add	r7, sp, #0
    4d3c:	60f8      	str	r0, [r7, #12]
    4d3e:	460b      	mov	r3, r1
    4d40:	607a      	str	r2, [r7, #4]
    4d42:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4d44:	7afb      	ldrb	r3, [r7, #11]
    4d46:	68fa      	ldr	r2, [r7, #12]
    4d48:	3306      	adds	r3, #6
    4d4a:	009b      	lsls	r3, r3, #2
    4d4c:	4413      	add	r3, r2
    4d4e:	687a      	ldr	r2, [r7, #4]
    4d50:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d52:	bf00      	nop
    4d54:	3714      	adds	r7, #20
    4d56:	46bd      	mov	sp, r7
    4d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d5c:	4770      	bx	lr

00004d5e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4d5e:	b480      	push	{r7}
    4d60:	b083      	sub	sp, #12
    4d62:	af00      	add	r7, sp, #0
    4d64:	6078      	str	r0, [r7, #4]
    4d66:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	683a      	ldr	r2, [r7, #0]
    4d6c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d6e:	bf00      	nop
    4d70:	370c      	adds	r7, #12
    4d72:	46bd      	mov	sp, r7
    4d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d78:	4770      	bx	lr

00004d7a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4d7a:	b480      	push	{r7}
    4d7c:	b083      	sub	sp, #12
    4d7e:	af00      	add	r7, sp, #0
    4d80:	6078      	str	r0, [r7, #4]
    4d82:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	683a      	ldr	r2, [r7, #0]
    4d88:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d8a:	bf00      	nop
    4d8c:	370c      	adds	r7, #12
    4d8e:	46bd      	mov	sp, r7
    4d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d94:	4770      	bx	lr
	...

00004d98 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4d98:	b580      	push	{r7, lr}
    4d9a:	b082      	sub	sp, #8
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4da0:	2101      	movs	r1, #1
    4da2:	484f      	ldr	r0, [pc, #316]	; (4ee0 <_ext_irq_init+0x148>)
    4da4:	4b4f      	ldr	r3, [pc, #316]	; (4ee4 <_ext_irq_init+0x14c>)
    4da6:	4798      	blx	r3
    4da8:	4603      	mov	r3, r0
    4daa:	f083 0301 	eor.w	r3, r3, #1
    4dae:	b2db      	uxtb	r3, r3
    4db0:	2b00      	cmp	r3, #0
    4db2:	d011      	beq.n	4dd8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4db4:	2102      	movs	r1, #2
    4db6:	484a      	ldr	r0, [pc, #296]	; (4ee0 <_ext_irq_init+0x148>)
    4db8:	4b4b      	ldr	r3, [pc, #300]	; (4ee8 <_ext_irq_init+0x150>)
    4dba:	4798      	blx	r3
    4dbc:	4603      	mov	r3, r0
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d006      	beq.n	4dd0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4dc2:	4847      	ldr	r0, [pc, #284]	; (4ee0 <_ext_irq_init+0x148>)
    4dc4:	4b49      	ldr	r3, [pc, #292]	; (4eec <_ext_irq_init+0x154>)
    4dc6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4dc8:	2102      	movs	r1, #2
    4dca:	4845      	ldr	r0, [pc, #276]	; (4ee0 <_ext_irq_init+0x148>)
    4dcc:	4b48      	ldr	r3, [pc, #288]	; (4ef0 <_ext_irq_init+0x158>)
    4dce:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4dd0:	2101      	movs	r1, #1
    4dd2:	4843      	ldr	r0, [pc, #268]	; (4ee0 <_ext_irq_init+0x148>)
    4dd4:	4b47      	ldr	r3, [pc, #284]	; (4ef4 <_ext_irq_init+0x15c>)
    4dd6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4dd8:	2101      	movs	r1, #1
    4dda:	4841      	ldr	r0, [pc, #260]	; (4ee0 <_ext_irq_init+0x148>)
    4ddc:	4b44      	ldr	r3, [pc, #272]	; (4ef0 <_ext_irq_init+0x158>)
    4dde:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4de0:	2100      	movs	r1, #0
    4de2:	483f      	ldr	r0, [pc, #252]	; (4ee0 <_ext_irq_init+0x148>)
    4de4:	4b44      	ldr	r3, [pc, #272]	; (4ef8 <_ext_irq_init+0x160>)
    4de6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4de8:	2100      	movs	r1, #0
    4dea:	483d      	ldr	r0, [pc, #244]	; (4ee0 <_ext_irq_init+0x148>)
    4dec:	4b43      	ldr	r3, [pc, #268]	; (4efc <_ext_irq_init+0x164>)
    4dee:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4df0:	2100      	movs	r1, #0
    4df2:	483b      	ldr	r0, [pc, #236]	; (4ee0 <_ext_irq_init+0x148>)
    4df4:	4b42      	ldr	r3, [pc, #264]	; (4f00 <_ext_irq_init+0x168>)
    4df6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4df8:	f240 31bb 	movw	r1, #955	; 0x3bb
    4dfc:	4838      	ldr	r0, [pc, #224]	; (4ee0 <_ext_irq_init+0x148>)
    4dfe:	4b41      	ldr	r3, [pc, #260]	; (4f04 <_ext_irq_init+0x16c>)
    4e00:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4e02:	f240 313b 	movw	r1, #827	; 0x33b
    4e06:	4836      	ldr	r0, [pc, #216]	; (4ee0 <_ext_irq_init+0x148>)
    4e08:	4b3f      	ldr	r3, [pc, #252]	; (4f08 <_ext_irq_init+0x170>)
    4e0a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4e0c:	2100      	movs	r1, #0
    4e0e:	4834      	ldr	r0, [pc, #208]	; (4ee0 <_ext_irq_init+0x148>)
    4e10:	4b3e      	ldr	r3, [pc, #248]	; (4f0c <_ext_irq_init+0x174>)
    4e12:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4e14:	4a3e      	ldr	r2, [pc, #248]	; (4f10 <_ext_irq_init+0x178>)
    4e16:	2100      	movs	r1, #0
    4e18:	4831      	ldr	r0, [pc, #196]	; (4ee0 <_ext_irq_init+0x148>)
    4e1a:	4b3e      	ldr	r3, [pc, #248]	; (4f14 <_ext_irq_init+0x17c>)
    4e1c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4e1e:	2211      	movs	r2, #17
    4e20:	2101      	movs	r1, #1
    4e22:	482f      	ldr	r0, [pc, #188]	; (4ee0 <_ext_irq_init+0x148>)
    4e24:	4b3b      	ldr	r3, [pc, #236]	; (4f14 <_ext_irq_init+0x17c>)
    4e26:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4e28:	482d      	ldr	r0, [pc, #180]	; (4ee0 <_ext_irq_init+0x148>)
    4e2a:	4b3b      	ldr	r3, [pc, #236]	; (4f18 <_ext_irq_init+0x180>)
    4e2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4e2e:	200c      	movs	r0, #12
    4e30:	4b3a      	ldr	r3, [pc, #232]	; (4f1c <_ext_irq_init+0x184>)
    4e32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4e34:	200c      	movs	r0, #12
    4e36:	4b3a      	ldr	r3, [pc, #232]	; (4f20 <_ext_irq_init+0x188>)
    4e38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4e3a:	200c      	movs	r0, #12
    4e3c:	4b39      	ldr	r3, [pc, #228]	; (4f24 <_ext_irq_init+0x18c>)
    4e3e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4e40:	200d      	movs	r0, #13
    4e42:	4b36      	ldr	r3, [pc, #216]	; (4f1c <_ext_irq_init+0x184>)
    4e44:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4e46:	200d      	movs	r0, #13
    4e48:	4b35      	ldr	r3, [pc, #212]	; (4f20 <_ext_irq_init+0x188>)
    4e4a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    4e4c:	200d      	movs	r0, #13
    4e4e:	4b35      	ldr	r3, [pc, #212]	; (4f24 <_ext_irq_init+0x18c>)
    4e50:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4e52:	200f      	movs	r0, #15
    4e54:	4b31      	ldr	r3, [pc, #196]	; (4f1c <_ext_irq_init+0x184>)
    4e56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4e58:	200f      	movs	r0, #15
    4e5a:	4b31      	ldr	r3, [pc, #196]	; (4f20 <_ext_irq_init+0x188>)
    4e5c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4e5e:	200f      	movs	r0, #15
    4e60:	4b30      	ldr	r3, [pc, #192]	; (4f24 <_ext_irq_init+0x18c>)
    4e62:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4e64:	2010      	movs	r0, #16
    4e66:	4b2d      	ldr	r3, [pc, #180]	; (4f1c <_ext_irq_init+0x184>)
    4e68:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4e6a:	2010      	movs	r0, #16
    4e6c:	4b2c      	ldr	r3, [pc, #176]	; (4f20 <_ext_irq_init+0x188>)
    4e6e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4e70:	2010      	movs	r0, #16
    4e72:	4b2c      	ldr	r3, [pc, #176]	; (4f24 <_ext_irq_init+0x18c>)
    4e74:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4e76:	2011      	movs	r0, #17
    4e78:	4b28      	ldr	r3, [pc, #160]	; (4f1c <_ext_irq_init+0x184>)
    4e7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4e7c:	2011      	movs	r0, #17
    4e7e:	4b28      	ldr	r3, [pc, #160]	; (4f20 <_ext_irq_init+0x188>)
    4e80:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4e82:	2011      	movs	r0, #17
    4e84:	4b27      	ldr	r3, [pc, #156]	; (4f24 <_ext_irq_init+0x18c>)
    4e86:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4e88:	2012      	movs	r0, #18
    4e8a:	4b24      	ldr	r3, [pc, #144]	; (4f1c <_ext_irq_init+0x184>)
    4e8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4e8e:	2012      	movs	r0, #18
    4e90:	4b23      	ldr	r3, [pc, #140]	; (4f20 <_ext_irq_init+0x188>)
    4e92:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4e94:	2012      	movs	r0, #18
    4e96:	4b23      	ldr	r3, [pc, #140]	; (4f24 <_ext_irq_init+0x18c>)
    4e98:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4e9a:	2013      	movs	r0, #19
    4e9c:	4b1f      	ldr	r3, [pc, #124]	; (4f1c <_ext_irq_init+0x184>)
    4e9e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4ea0:	2013      	movs	r0, #19
    4ea2:	4b1f      	ldr	r3, [pc, #124]	; (4f20 <_ext_irq_init+0x188>)
    4ea4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4ea6:	2013      	movs	r0, #19
    4ea8:	4b1e      	ldr	r3, [pc, #120]	; (4f24 <_ext_irq_init+0x18c>)
    4eaa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4eac:	2014      	movs	r0, #20
    4eae:	4b1b      	ldr	r3, [pc, #108]	; (4f1c <_ext_irq_init+0x184>)
    4eb0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4eb2:	2014      	movs	r0, #20
    4eb4:	4b1a      	ldr	r3, [pc, #104]	; (4f20 <_ext_irq_init+0x188>)
    4eb6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4eb8:	2014      	movs	r0, #20
    4eba:	4b1a      	ldr	r3, [pc, #104]	; (4f24 <_ext_irq_init+0x18c>)
    4ebc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4ebe:	2015      	movs	r0, #21
    4ec0:	4b16      	ldr	r3, [pc, #88]	; (4f1c <_ext_irq_init+0x184>)
    4ec2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4ec4:	2015      	movs	r0, #21
    4ec6:	4b16      	ldr	r3, [pc, #88]	; (4f20 <_ext_irq_init+0x188>)
    4ec8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4eca:	2015      	movs	r0, #21
    4ecc:	4b15      	ldr	r3, [pc, #84]	; (4f24 <_ext_irq_init+0x18c>)
    4ece:	4798      	blx	r3

	callback = cb;
    4ed0:	4a15      	ldr	r2, [pc, #84]	; (4f28 <_ext_irq_init+0x190>)
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4ed6:	2300      	movs	r3, #0
}
    4ed8:	4618      	mov	r0, r3
    4eda:	3708      	adds	r7, #8
    4edc:	46bd      	mov	sp, r7
    4ede:	bd80      	pop	{r7, pc}
    4ee0:	40002800 	.word	0x40002800
    4ee4:	00004b59 	.word	0x00004b59
    4ee8:	00004c89 	.word	0x00004c89
    4eec:	00004c19 	.word	0x00004c19
    4ef0:	00004b35 	.word	0x00004b35
    4ef4:	00004cb9 	.word	0x00004cb9
    4ef8:	00004c45 	.word	0x00004c45
    4efc:	00004ce1 	.word	0x00004ce1
    4f00:	00004cff 	.word	0x00004cff
    4f04:	00004d1b 	.word	0x00004d1b
    4f08:	00004d5f 	.word	0x00004d5f
    4f0c:	00004d7b 	.word	0x00004d7b
    4f10:	90999013 	.word	0x90999013
    4f14:	00004d37 	.word	0x00004d37
    4f18:	00004bed 	.word	0x00004bed
    4f1c:	00004ab5 	.word	0x00004ab5
    4f20:	00004af9 	.word	0x00004af9
    4f24:	00004a79 	.word	0x00004a79
    4f28:	2000092c 	.word	0x2000092c

00004f2c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4f2c:	b580      	push	{r7, lr}
    4f2e:	b084      	sub	sp, #16
    4f30:	af00      	add	r7, sp, #0
    4f32:	6078      	str	r0, [r7, #4]
    4f34:	460b      	mov	r3, r1
    4f36:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4f38:	23ff      	movs	r3, #255	; 0xff
    4f3a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4f3c:	2300      	movs	r3, #0
    4f3e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4f40:	e010      	b.n	4f64 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4f42:	7bbb      	ldrb	r3, [r7, #14]
    4f44:	4a1c      	ldr	r2, [pc, #112]	; (4fb8 <_ext_irq_enable+0x8c>)
    4f46:	00db      	lsls	r3, r3, #3
    4f48:	4413      	add	r3, r2
    4f4a:	685a      	ldr	r2, [r3, #4]
    4f4c:	687b      	ldr	r3, [r7, #4]
    4f4e:	429a      	cmp	r2, r3
    4f50:	d105      	bne.n	4f5e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4f52:	7bbb      	ldrb	r3, [r7, #14]
    4f54:	4a18      	ldr	r2, [pc, #96]	; (4fb8 <_ext_irq_enable+0x8c>)
    4f56:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4f5a:	73fb      	strb	r3, [r7, #15]
			break;
    4f5c:	e005      	b.n	4f6a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4f5e:	7bbb      	ldrb	r3, [r7, #14]
    4f60:	3301      	adds	r3, #1
    4f62:	73bb      	strb	r3, [r7, #14]
    4f64:	7bbb      	ldrb	r3, [r7, #14]
    4f66:	2b08      	cmp	r3, #8
    4f68:	d9eb      	bls.n	4f42 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4f6a:	7bfb      	ldrb	r3, [r7, #15]
    4f6c:	2bff      	cmp	r3, #255	; 0xff
    4f6e:	d102      	bne.n	4f76 <_ext_irq_enable+0x4a>
		return -1;
    4f70:	f04f 33ff 	mov.w	r3, #4294967295
    4f74:	e01c      	b.n	4fb0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4f76:	78fb      	ldrb	r3, [r7, #3]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d008      	beq.n	4f8e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4f7c:	7bfb      	ldrb	r3, [r7, #15]
    4f7e:	2201      	movs	r2, #1
    4f80:	fa02 f303 	lsl.w	r3, r2, r3
    4f84:	4619      	mov	r1, r3
    4f86:	480d      	ldr	r0, [pc, #52]	; (4fbc <_ext_irq_enable+0x90>)
    4f88:	4b0d      	ldr	r3, [pc, #52]	; (4fc0 <_ext_irq_enable+0x94>)
    4f8a:	4798      	blx	r3
    4f8c:	e00f      	b.n	4fae <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4f8e:	7bfb      	ldrb	r3, [r7, #15]
    4f90:	2201      	movs	r2, #1
    4f92:	fa02 f303 	lsl.w	r3, r2, r3
    4f96:	4619      	mov	r1, r3
    4f98:	4808      	ldr	r0, [pc, #32]	; (4fbc <_ext_irq_enable+0x90>)
    4f9a:	4b0a      	ldr	r3, [pc, #40]	; (4fc4 <_ext_irq_enable+0x98>)
    4f9c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4f9e:	7bfb      	ldrb	r3, [r7, #15]
    4fa0:	2201      	movs	r2, #1
    4fa2:	fa02 f303 	lsl.w	r3, r2, r3
    4fa6:	4619      	mov	r1, r3
    4fa8:	4804      	ldr	r0, [pc, #16]	; (4fbc <_ext_irq_enable+0x90>)
    4faa:	4b07      	ldr	r3, [pc, #28]	; (4fc8 <_ext_irq_enable+0x9c>)
    4fac:	4798      	blx	r3
	}

	return ERR_NONE;
    4fae:	2300      	movs	r3, #0
}
    4fb0:	4618      	mov	r0, r3
    4fb2:	3710      	adds	r7, #16
    4fb4:	46bd      	mov	sp, r7
    4fb6:	bd80      	pop	{r7, pc}
    4fb8:	0001318c 	.word	0x0001318c
    4fbc:	40002800 	.word	0x40002800
    4fc0:	00004bb5 	.word	0x00004bb5
    4fc4:	00004bd1 	.word	0x00004bd1
    4fc8:	00004b99 	.word	0x00004b99

00004fcc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b084      	sub	sp, #16
    4fd0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4fd2:	4841      	ldr	r0, [pc, #260]	; (50d8 <_ext_irq_handler+0x10c>)
    4fd4:	4b41      	ldr	r3, [pc, #260]	; (50dc <_ext_irq_handler+0x110>)
    4fd6:	4798      	blx	r3
    4fd8:	4603      	mov	r3, r0
    4fda:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4fdc:	f04f 33ff 	mov.w	r3, #4294967295
    4fe0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4fe2:	683b      	ldr	r3, [r7, #0]
    4fe4:	4619      	mov	r1, r3
    4fe6:	483c      	ldr	r0, [pc, #240]	; (50d8 <_ext_irq_handler+0x10c>)
    4fe8:	4b3d      	ldr	r3, [pc, #244]	; (50e0 <_ext_irq_handler+0x114>)
    4fea:	4798      	blx	r3

	ASSERT(callback);
    4fec:	4b3d      	ldr	r3, [pc, #244]	; (50e4 <_ext_irq_handler+0x118>)
    4fee:	681b      	ldr	r3, [r3, #0]
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	bf14      	ite	ne
    4ff4:	2301      	movne	r3, #1
    4ff6:	2300      	moveq	r3, #0
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	f44f 7284 	mov.w	r2, #264	; 0x108
    4ffe:	493a      	ldr	r1, [pc, #232]	; (50e8 <_ext_irq_handler+0x11c>)
    5000:	4618      	mov	r0, r3
    5002:	4b3a      	ldr	r3, [pc, #232]	; (50ec <_ext_irq_handler+0x120>)
    5004:	4798      	blx	r3

	while (flags) {
    5006:	e060      	b.n	50ca <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5008:	683b      	ldr	r3, [r7, #0]
    500a:	4618      	mov	r0, r3
    500c:	4b38      	ldr	r3, [pc, #224]	; (50f0 <_ext_irq_handler+0x124>)
    500e:	4798      	blx	r3
    5010:	4603      	mov	r3, r0
    5012:	b2db      	uxtb	r3, r3
    5014:	3b01      	subs	r3, #1
    5016:	b2db      	uxtb	r3, r3
    5018:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    501a:	e047      	b.n	50ac <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    501c:	2300      	movs	r3, #0
    501e:	71fb      	strb	r3, [r7, #7]
    5020:	2309      	movs	r3, #9
    5022:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5024:	e024      	b.n	5070 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5026:	79ba      	ldrb	r2, [r7, #6]
    5028:	79fb      	ldrb	r3, [r7, #7]
    502a:	4413      	add	r3, r2
    502c:	105b      	asrs	r3, r3, #1
    502e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5030:	797b      	ldrb	r3, [r7, #5]
    5032:	4a30      	ldr	r2, [pc, #192]	; (50f4 <_ext_irq_handler+0x128>)
    5034:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5038:	461a      	mov	r2, r3
    503a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    503e:	429a      	cmp	r2, r3
    5040:	d106      	bne.n	5050 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    5042:	797b      	ldrb	r3, [r7, #5]
    5044:	4a2b      	ldr	r2, [pc, #172]	; (50f4 <_ext_irq_handler+0x128>)
    5046:	00db      	lsls	r3, r3, #3
    5048:	4413      	add	r3, r2
    504a:	685b      	ldr	r3, [r3, #4]
    504c:	60bb      	str	r3, [r7, #8]
					break;
    504e:	e013      	b.n	5078 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5050:	797b      	ldrb	r3, [r7, #5]
    5052:	4a28      	ldr	r2, [pc, #160]	; (50f4 <_ext_irq_handler+0x128>)
    5054:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5058:	461a      	mov	r2, r3
    505a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    505e:	429a      	cmp	r2, r3
    5060:	da03      	bge.n	506a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    5062:	797b      	ldrb	r3, [r7, #5]
    5064:	3301      	adds	r3, #1
    5066:	71fb      	strb	r3, [r7, #7]
    5068:	e002      	b.n	5070 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    506a:	797b      	ldrb	r3, [r7, #5]
    506c:	3b01      	subs	r3, #1
    506e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5070:	79ba      	ldrb	r2, [r7, #6]
    5072:	79fb      	ldrb	r3, [r7, #7]
    5074:	429a      	cmp	r2, r3
    5076:	d2d6      	bcs.n	5026 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5078:	68bb      	ldr	r3, [r7, #8]
    507a:	f1b3 3fff 	cmp.w	r3, #4294967295
    507e:	d003      	beq.n	5088 <_ext_irq_handler+0xbc>
				callback(pin);
    5080:	4b18      	ldr	r3, [pc, #96]	; (50e4 <_ext_irq_handler+0x118>)
    5082:	681b      	ldr	r3, [r3, #0]
    5084:	68b8      	ldr	r0, [r7, #8]
    5086:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    5088:	f997 300f 	ldrsb.w	r3, [r7, #15]
    508c:	2201      	movs	r2, #1
    508e:	fa02 f303 	lsl.w	r3, r2, r3
    5092:	43da      	mvns	r2, r3
    5094:	683b      	ldr	r3, [r7, #0]
    5096:	4013      	ands	r3, r2
    5098:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    509a:	683b      	ldr	r3, [r7, #0]
    509c:	4618      	mov	r0, r3
    509e:	4b14      	ldr	r3, [pc, #80]	; (50f0 <_ext_irq_handler+0x124>)
    50a0:	4798      	blx	r3
    50a2:	4603      	mov	r3, r0
    50a4:	b2db      	uxtb	r3, r3
    50a6:	3b01      	subs	r3, #1
    50a8:	b2db      	uxtb	r3, r3
    50aa:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    50ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    50b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    50b4:	d1b2      	bne.n	501c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    50b6:	4808      	ldr	r0, [pc, #32]	; (50d8 <_ext_irq_handler+0x10c>)
    50b8:	4b08      	ldr	r3, [pc, #32]	; (50dc <_ext_irq_handler+0x110>)
    50ba:	4798      	blx	r3
    50bc:	4603      	mov	r3, r0
    50be:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    50c0:	683b      	ldr	r3, [r7, #0]
    50c2:	4619      	mov	r1, r3
    50c4:	4804      	ldr	r0, [pc, #16]	; (50d8 <_ext_irq_handler+0x10c>)
    50c6:	4b06      	ldr	r3, [pc, #24]	; (50e0 <_ext_irq_handler+0x114>)
    50c8:	4798      	blx	r3
	while (flags) {
    50ca:	683b      	ldr	r3, [r7, #0]
    50cc:	2b00      	cmp	r3, #0
    50ce:	d19b      	bne.n	5008 <_ext_irq_handler+0x3c>
	}
}
    50d0:	bf00      	nop
    50d2:	3710      	adds	r7, #16
    50d4:	46bd      	mov	sp, r7
    50d6:	bd80      	pop	{r7, pc}
    50d8:	40002800 	.word	0x40002800
    50dc:	00004b81 	.word	0x00004b81
    50e0:	00004b99 	.word	0x00004b99
    50e4:	2000092c 	.word	0x2000092c
    50e8:	000131d4 	.word	0x000131d4
    50ec:	00003df5 	.word	0x00003df5
    50f0:	00012be1 	.word	0x00012be1
    50f4:	0001318c 	.word	0x0001318c

000050f8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    50f8:	b580      	push	{r7, lr}
    50fa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    50fc:	4b01      	ldr	r3, [pc, #4]	; (5104 <EIC_0_Handler+0xc>)
    50fe:	4798      	blx	r3
} /**
    5100:	bf00      	nop
    5102:	bd80      	pop	{r7, pc}
    5104:	00004fcd 	.word	0x00004fcd

00005108 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5108:	b580      	push	{r7, lr}
    510a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    510c:	4b01      	ldr	r3, [pc, #4]	; (5114 <EIC_1_Handler+0xc>)
    510e:	4798      	blx	r3
} /**
    5110:	bf00      	nop
    5112:	bd80      	pop	{r7, pc}
    5114:	00004fcd 	.word	0x00004fcd

00005118 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5118:	b580      	push	{r7, lr}
    511a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    511c:	4b01      	ldr	r3, [pc, #4]	; (5124 <EIC_3_Handler+0xc>)
    511e:	4798      	blx	r3
} /**
    5120:	bf00      	nop
    5122:	bd80      	pop	{r7, pc}
    5124:	00004fcd 	.word	0x00004fcd

00005128 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5128:	b580      	push	{r7, lr}
    512a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    512c:	4b01      	ldr	r3, [pc, #4]	; (5134 <EIC_4_Handler+0xc>)
    512e:	4798      	blx	r3
} /**
    5130:	bf00      	nop
    5132:	bd80      	pop	{r7, pc}
    5134:	00004fcd 	.word	0x00004fcd

00005138 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5138:	b580      	push	{r7, lr}
    513a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    513c:	4b01      	ldr	r3, [pc, #4]	; (5144 <EIC_5_Handler+0xc>)
    513e:	4798      	blx	r3
} /**
    5140:	bf00      	nop
    5142:	bd80      	pop	{r7, pc}
    5144:	00004fcd 	.word	0x00004fcd

00005148 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5148:	b580      	push	{r7, lr}
    514a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    514c:	4b01      	ldr	r3, [pc, #4]	; (5154 <EIC_6_Handler+0xc>)
    514e:	4798      	blx	r3
} /**
    5150:	bf00      	nop
    5152:	bd80      	pop	{r7, pc}
    5154:	00004fcd 	.word	0x00004fcd

00005158 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5158:	b580      	push	{r7, lr}
    515a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    515c:	4b01      	ldr	r3, [pc, #4]	; (5164 <EIC_7_Handler+0xc>)
    515e:	4798      	blx	r3
} /**
    5160:	bf00      	nop
    5162:	bd80      	pop	{r7, pc}
    5164:	00004fcd 	.word	0x00004fcd

00005168 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5168:	b580      	push	{r7, lr}
    516a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    516c:	4b01      	ldr	r3, [pc, #4]	; (5174 <EIC_8_Handler+0xc>)
    516e:	4798      	blx	r3
} /**
    5170:	bf00      	nop
    5172:	bd80      	pop	{r7, pc}
    5174:	00004fcd 	.word	0x00004fcd

00005178 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5178:	b580      	push	{r7, lr}
    517a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    517c:	4b01      	ldr	r3, [pc, #4]	; (5184 <EIC_9_Handler+0xc>)
    517e:	4798      	blx	r3
}
    5180:	bf00      	nop
    5182:	bd80      	pop	{r7, pc}
    5184:	00004fcd 	.word	0x00004fcd

00005188 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5188:	b480      	push	{r7}
    518a:	b085      	sub	sp, #20
    518c:	af00      	add	r7, sp, #0
    518e:	60f8      	str	r0, [r7, #12]
    5190:	460b      	mov	r3, r1
    5192:	607a      	str	r2, [r7, #4]
    5194:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5196:	7afa      	ldrb	r2, [r7, #11]
    5198:	68fb      	ldr	r3, [r7, #12]
    519a:	3248      	adds	r2, #72	; 0x48
    519c:	6879      	ldr	r1, [r7, #4]
    519e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    51a2:	bf00      	nop
    51a4:	3714      	adds	r7, #20
    51a6:	46bd      	mov	sp, r7
    51a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ac:	4770      	bx	lr

000051ae <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    51ae:	b480      	push	{r7}
    51b0:	b083      	sub	sp, #12
    51b2:	af00      	add	r7, sp, #0
    51b4:	6078      	str	r0, [r7, #4]
    51b6:	460b      	mov	r3, r1
    51b8:	70fb      	strb	r3, [r7, #3]
    51ba:	4613      	mov	r3, r2
    51bc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    51be:	78fb      	ldrb	r3, [r7, #3]
    51c0:	687a      	ldr	r2, [r7, #4]
    51c2:	3304      	adds	r3, #4
    51c4:	00db      	lsls	r3, r3, #3
    51c6:	4413      	add	r3, r2
    51c8:	78ba      	ldrb	r2, [r7, #2]
    51ca:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    51cc:	78fb      	ldrb	r3, [r7, #3]
    51ce:	78ba      	ldrb	r2, [r7, #2]
    51d0:	43d2      	mvns	r2, r2
    51d2:	b2d1      	uxtb	r1, r2
    51d4:	687a      	ldr	r2, [r7, #4]
    51d6:	3304      	adds	r3, #4
    51d8:	00db      	lsls	r3, r3, #3
    51da:	4413      	add	r3, r2
    51dc:	460a      	mov	r2, r1
    51de:	711a      	strb	r2, [r3, #4]
}
    51e0:	bf00      	nop
    51e2:	370c      	adds	r7, #12
    51e4:	46bd      	mov	sp, r7
    51e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ea:	4770      	bx	lr

000051ec <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    51ec:	b480      	push	{r7}
    51ee:	b085      	sub	sp, #20
    51f0:	af00      	add	r7, sp, #0
    51f2:	60f8      	str	r0, [r7, #12]
    51f4:	460b      	mov	r3, r1
    51f6:	607a      	str	r2, [r7, #4]
    51f8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    51fa:	7afa      	ldrb	r2, [r7, #11]
    51fc:	68fb      	ldr	r3, [r7, #12]
    51fe:	3204      	adds	r2, #4
    5200:	6879      	ldr	r1, [r7, #4]
    5202:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5206:	bf00      	nop
    5208:	3714      	adds	r7, #20
    520a:	46bd      	mov	sp, r7
    520c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5210:	4770      	bx	lr
	...

00005214 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5214:	b580      	push	{r7, lr}
    5216:	b082      	sub	sp, #8
    5218:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    521a:	2300      	movs	r3, #0
    521c:	71fb      	strb	r3, [r7, #7]
    521e:	e00b      	b.n	5238 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5220:	79fb      	ldrb	r3, [r7, #7]
    5222:	4a18      	ldr	r2, [pc, #96]	; (5284 <_event_system_init+0x70>)
    5224:	5cd3      	ldrb	r3, [r2, r3]
    5226:	461a      	mov	r2, r3
    5228:	79fb      	ldrb	r3, [r7, #7]
    522a:	4619      	mov	r1, r3
    522c:	4816      	ldr	r0, [pc, #88]	; (5288 <_event_system_init+0x74>)
    522e:	4b17      	ldr	r3, [pc, #92]	; (528c <_event_system_init+0x78>)
    5230:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5232:	79fb      	ldrb	r3, [r7, #7]
    5234:	3301      	adds	r3, #1
    5236:	71fb      	strb	r3, [r7, #7]
    5238:	79fb      	ldrb	r3, [r7, #7]
    523a:	2b42      	cmp	r3, #66	; 0x42
    523c:	d9f0      	bls.n	5220 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    523e:	2300      	movs	r3, #0
    5240:	71fb      	strb	r3, [r7, #7]
    5242:	e016      	b.n	5272 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5244:	79fb      	ldrb	r3, [r7, #7]
    5246:	4a12      	ldr	r2, [pc, #72]	; (5290 <_event_system_init+0x7c>)
    5248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    524c:	461a      	mov	r2, r3
    524e:	79fb      	ldrb	r3, [r7, #7]
    5250:	4619      	mov	r1, r3
    5252:	480d      	ldr	r0, [pc, #52]	; (5288 <_event_system_init+0x74>)
    5254:	4b0f      	ldr	r3, [pc, #60]	; (5294 <_event_system_init+0x80>)
    5256:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5258:	79fb      	ldrb	r3, [r7, #7]
    525a:	4a0f      	ldr	r2, [pc, #60]	; (5298 <_event_system_init+0x84>)
    525c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5260:	b2da      	uxtb	r2, r3
    5262:	79fb      	ldrb	r3, [r7, #7]
    5264:	4619      	mov	r1, r3
    5266:	4808      	ldr	r0, [pc, #32]	; (5288 <_event_system_init+0x74>)
    5268:	4b0c      	ldr	r3, [pc, #48]	; (529c <_event_system_init+0x88>)
    526a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    526c:	79fb      	ldrb	r3, [r7, #7]
    526e:	3301      	adds	r3, #1
    5270:	71fb      	strb	r3, [r7, #7]
    5272:	79fb      	ldrb	r3, [r7, #7]
    5274:	2b1f      	cmp	r3, #31
    5276:	d9e5      	bls.n	5244 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5278:	2300      	movs	r3, #0
}
    527a:	4618      	mov	r0, r3
    527c:	3708      	adds	r7, #8
    527e:	46bd      	mov	sp, r7
    5280:	bd80      	pop	{r7, pc}
    5282:	bf00      	nop
    5284:	000131ec 	.word	0x000131ec
    5288:	4100e000 	.word	0x4100e000
    528c:	00005189 	.word	0x00005189
    5290:	00013230 	.word	0x00013230
    5294:	000051ed 	.word	0x000051ed
    5298:	00013270 	.word	0x00013270
    529c:	000051af 	.word	0x000051af

000052a0 <hri_gclk_wait_for_sync>:
{
    52a0:	b480      	push	{r7}
    52a2:	b083      	sub	sp, #12
    52a4:	af00      	add	r7, sp, #0
    52a6:	6078      	str	r0, [r7, #4]
    52a8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    52aa:	bf00      	nop
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	685a      	ldr	r2, [r3, #4]
    52b0:	683b      	ldr	r3, [r7, #0]
    52b2:	4013      	ands	r3, r2
    52b4:	2b00      	cmp	r3, #0
    52b6:	d1f9      	bne.n	52ac <hri_gclk_wait_for_sync+0xc>
}
    52b8:	bf00      	nop
    52ba:	370c      	adds	r7, #12
    52bc:	46bd      	mov	sp, r7
    52be:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c2:	4770      	bx	lr

000052c4 <hri_gclk_write_GENCTRL_reg>:
{
    52c4:	b580      	push	{r7, lr}
    52c6:	b084      	sub	sp, #16
    52c8:	af00      	add	r7, sp, #0
    52ca:	60f8      	str	r0, [r7, #12]
    52cc:	460b      	mov	r3, r1
    52ce:	607a      	str	r2, [r7, #4]
    52d0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    52d2:	7afa      	ldrb	r2, [r7, #11]
    52d4:	68fb      	ldr	r3, [r7, #12]
    52d6:	3208      	adds	r2, #8
    52d8:	6879      	ldr	r1, [r7, #4]
    52da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    52de:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    52e2:	68f8      	ldr	r0, [r7, #12]
    52e4:	4b02      	ldr	r3, [pc, #8]	; (52f0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    52e6:	4798      	blx	r3
}
    52e8:	bf00      	nop
    52ea:	3710      	adds	r7, #16
    52ec:	46bd      	mov	sp, r7
    52ee:	bd80      	pop	{r7, pc}
    52f0:	000052a1 	.word	0x000052a1

000052f4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    52f4:	b580      	push	{r7, lr}
    52f6:	b082      	sub	sp, #8
    52f8:	af00      	add	r7, sp, #0
    52fa:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	f003 0301 	and.w	r3, r3, #1
    5302:	2b00      	cmp	r3, #0
    5304:	d004      	beq.n	5310 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    5306:	4a36      	ldr	r2, [pc, #216]	; (53e0 <_gclk_init_generators_by_fref+0xec>)
    5308:	2100      	movs	r1, #0
    530a:	4836      	ldr	r0, [pc, #216]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    530c:	4b36      	ldr	r3, [pc, #216]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    530e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	f003 0302 	and.w	r3, r3, #2
    5316:	2b00      	cmp	r3, #0
    5318:	d004      	beq.n	5324 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    531a:	4a34      	ldr	r2, [pc, #208]	; (53ec <_gclk_init_generators_by_fref+0xf8>)
    531c:	2101      	movs	r1, #1
    531e:	4831      	ldr	r0, [pc, #196]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    5320:	4b31      	ldr	r3, [pc, #196]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    5322:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	f003 0304 	and.w	r3, r3, #4
    532a:	2b00      	cmp	r3, #0
    532c:	d004      	beq.n	5338 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    532e:	4a30      	ldr	r2, [pc, #192]	; (53f0 <_gclk_init_generators_by_fref+0xfc>)
    5330:	2102      	movs	r1, #2
    5332:	482c      	ldr	r0, [pc, #176]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    5334:	4b2c      	ldr	r3, [pc, #176]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    5336:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5338:	687b      	ldr	r3, [r7, #4]
    533a:	f003 0308 	and.w	r3, r3, #8
    533e:	2b00      	cmp	r3, #0
    5340:	d004      	beq.n	534c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5342:	4a2c      	ldr	r2, [pc, #176]	; (53f4 <_gclk_init_generators_by_fref+0x100>)
    5344:	2103      	movs	r1, #3
    5346:	4827      	ldr	r0, [pc, #156]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    5348:	4b27      	ldr	r3, [pc, #156]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    534a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	f003 0310 	and.w	r3, r3, #16
    5352:	2b00      	cmp	r3, #0
    5354:	d004      	beq.n	5360 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5356:	4a28      	ldr	r2, [pc, #160]	; (53f8 <_gclk_init_generators_by_fref+0x104>)
    5358:	2104      	movs	r1, #4
    535a:	4822      	ldr	r0, [pc, #136]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    535c:	4b22      	ldr	r3, [pc, #136]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    535e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	f003 0320 	and.w	r3, r3, #32
    5366:	2b00      	cmp	r3, #0
    5368:	d004      	beq.n	5374 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    536a:	4a24      	ldr	r2, [pc, #144]	; (53fc <_gclk_init_generators_by_fref+0x108>)
    536c:	2105      	movs	r1, #5
    536e:	481d      	ldr	r0, [pc, #116]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    5370:	4b1d      	ldr	r3, [pc, #116]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    5372:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	f003 0340 	and.w	r3, r3, #64	; 0x40
    537a:	2b00      	cmp	r3, #0
    537c:	d004      	beq.n	5388 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    537e:	4a20      	ldr	r2, [pc, #128]	; (5400 <_gclk_init_generators_by_fref+0x10c>)
    5380:	2106      	movs	r1, #6
    5382:	4818      	ldr	r0, [pc, #96]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    5384:	4b18      	ldr	r3, [pc, #96]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    5386:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5388:	687b      	ldr	r3, [r7, #4]
    538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    538e:	2b00      	cmp	r3, #0
    5390:	d004      	beq.n	539c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    5392:	4a1c      	ldr	r2, [pc, #112]	; (5404 <_gclk_init_generators_by_fref+0x110>)
    5394:	2107      	movs	r1, #7
    5396:	4813      	ldr	r0, [pc, #76]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    5398:	4b13      	ldr	r3, [pc, #76]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    539a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    53a2:	2b00      	cmp	r3, #0
    53a4:	d004      	beq.n	53b0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    53a6:	4a18      	ldr	r2, [pc, #96]	; (5408 <_gclk_init_generators_by_fref+0x114>)
    53a8:	2108      	movs	r1, #8
    53aa:	480e      	ldr	r0, [pc, #56]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    53ac:	4b0e      	ldr	r3, [pc, #56]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    53ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    53b6:	2b00      	cmp	r3, #0
    53b8:	d004      	beq.n	53c4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    53ba:	4a14      	ldr	r2, [pc, #80]	; (540c <_gclk_init_generators_by_fref+0x118>)
    53bc:	210a      	movs	r1, #10
    53be:	4809      	ldr	r0, [pc, #36]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    53c0:	4b09      	ldr	r3, [pc, #36]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    53c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    53ca:	2b00      	cmp	r3, #0
    53cc:	d004      	beq.n	53d8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    53ce:	4a10      	ldr	r2, [pc, #64]	; (5410 <_gclk_init_generators_by_fref+0x11c>)
    53d0:	210b      	movs	r1, #11
    53d2:	4804      	ldr	r0, [pc, #16]	; (53e4 <_gclk_init_generators_by_fref+0xf0>)
    53d4:	4b04      	ldr	r3, [pc, #16]	; (53e8 <_gclk_init_generators_by_fref+0xf4>)
    53d6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    53d8:	bf00      	nop
    53da:	3708      	adds	r7, #8
    53dc:	46bd      	mov	sp, r7
    53de:	bd80      	pop	{r7, pc}
    53e0:	00010107 	.word	0x00010107
    53e4:	40001c00 	.word	0x40001c00
    53e8:	000052c5 	.word	0x000052c5
    53ec:	00010907 	.word	0x00010907
    53f0:	00010906 	.word	0x00010906
    53f4:	00020908 	.word	0x00020908
    53f8:	00010901 	.word	0x00010901
    53fc:	00062901 	.word	0x00062901
    5400:	000c2901 	.word	0x000c2901
    5404:	00082908 	.word	0x00082908
    5408:	00032901 	.word	0x00032901
    540c:	00010905 	.word	0x00010905
    5410:	00041905 	.word	0x00041905

00005414 <hri_mclk_write_CPUDIV_reg>:
{
    5414:	b480      	push	{r7}
    5416:	b083      	sub	sp, #12
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
    541c:	460b      	mov	r3, r1
    541e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	78fa      	ldrb	r2, [r7, #3]
    5424:	715a      	strb	r2, [r3, #5]
}
    5426:	bf00      	nop
    5428:	370c      	adds	r7, #12
    542a:	46bd      	mov	sp, r7
    542c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5430:	4770      	bx	lr
	...

00005434 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5434:	b580      	push	{r7, lr}
    5436:	b082      	sub	sp, #8
    5438:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    543a:	4b05      	ldr	r3, [pc, #20]	; (5450 <_mclk_init+0x1c>)
    543c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    543e:	2101      	movs	r1, #1
    5440:	6878      	ldr	r0, [r7, #4]
    5442:	4b04      	ldr	r3, [pc, #16]	; (5454 <_mclk_init+0x20>)
    5444:	4798      	blx	r3
}
    5446:	bf00      	nop
    5448:	3708      	adds	r7, #8
    544a:	46bd      	mov	sp, r7
    544c:	bd80      	pop	{r7, pc}
    544e:	bf00      	nop
    5450:	40000800 	.word	0x40000800
    5454:	00005415 	.word	0x00005415

00005458 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5458:	b480      	push	{r7}
    545a:	b083      	sub	sp, #12
    545c:	af00      	add	r7, sp, #0
    545e:	6078      	str	r0, [r7, #4]
    5460:	460b      	mov	r3, r1
    5462:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5464:	687b      	ldr	r3, [r7, #4]
    5466:	78fa      	ldrb	r2, [r7, #3]
    5468:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    546a:	bf00      	nop
    546c:	370c      	adds	r7, #12
    546e:	46bd      	mov	sp, r7
    5470:	f85d 7b04 	ldr.w	r7, [sp], #4
    5474:	4770      	bx	lr

00005476 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5476:	b480      	push	{r7}
    5478:	b083      	sub	sp, #12
    547a:	af00      	add	r7, sp, #0
    547c:	6078      	str	r0, [r7, #4]
    547e:	460b      	mov	r3, r1
    5480:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5482:	687b      	ldr	r3, [r7, #4]
    5484:	887a      	ldrh	r2, [r7, #2]
    5486:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5488:	bf00      	nop
    548a:	370c      	adds	r7, #12
    548c:	46bd      	mov	sp, r7
    548e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5492:	4770      	bx	lr

00005494 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    5494:	b480      	push	{r7}
    5496:	b083      	sub	sp, #12
    5498:	af00      	add	r7, sp, #0
    549a:	6078      	str	r0, [r7, #4]
    549c:	460b      	mov	r3, r1
    549e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	78fa      	ldrb	r2, [r7, #3]
    54a4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    54a6:	bf00      	nop
    54a8:	370c      	adds	r7, #12
    54aa:	46bd      	mov	sp, r7
    54ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b0:	4770      	bx	lr

000054b2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    54b2:	b480      	push	{r7}
    54b4:	b083      	sub	sp, #12
    54b6:	af00      	add	r7, sp, #0
    54b8:	6078      	str	r0, [r7, #4]
    54ba:	460b      	mov	r3, r1
    54bc:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	78fa      	ldrb	r2, [r7, #3]
    54c2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    54c4:	bf00      	nop
    54c6:	370c      	adds	r7, #12
    54c8:	46bd      	mov	sp, r7
    54ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ce:	4770      	bx	lr

000054d0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    54d0:	b480      	push	{r7}
    54d2:	b085      	sub	sp, #20
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	69db      	ldr	r3, [r3, #28]
    54dc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    54de:	68fb      	ldr	r3, [r7, #12]
    54e0:	0a1b      	lsrs	r3, r3, #8
    54e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    54e6:	60fb      	str	r3, [r7, #12]
	return tmp;
    54e8:	68fb      	ldr	r3, [r7, #12]
}
    54ea:	4618      	mov	r0, r3
    54ec:	3714      	adds	r7, #20
    54ee:	46bd      	mov	sp, r7
    54f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f4:	4770      	bx	lr

000054f6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    54f6:	b480      	push	{r7}
    54f8:	b083      	sub	sp, #12
    54fa:	af00      	add	r7, sp, #0
    54fc:	6078      	str	r0, [r7, #4]
    54fe:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5500:	687b      	ldr	r3, [r7, #4]
    5502:	683a      	ldr	r2, [r7, #0]
    5504:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5506:	bf00      	nop
    5508:	370c      	adds	r7, #12
    550a:	46bd      	mov	sp, r7
    550c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5510:	4770      	bx	lr
	...

00005514 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5514:	b580      	push	{r7, lr}
    5516:	b082      	sub	sp, #8
    5518:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    551a:	4b13      	ldr	r3, [pc, #76]	; (5568 <_osc32kctrl_init_sources+0x54>)
    551c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    551e:	2300      	movs	r3, #0
    5520:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5522:	f242 018e 	movw	r1, #8334	; 0x208e
    5526:	6878      	ldr	r0, [r7, #4]
    5528:	4b10      	ldr	r3, [pc, #64]	; (556c <_osc32kctrl_init_sources+0x58>)
    552a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    552c:	2100      	movs	r1, #0
    552e:	6878      	ldr	r0, [r7, #4]
    5530:	4b0f      	ldr	r3, [pc, #60]	; (5570 <_osc32kctrl_init_sources+0x5c>)
    5532:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5534:	2100      	movs	r1, #0
    5536:	6878      	ldr	r0, [r7, #4]
    5538:	4b0e      	ldr	r3, [pc, #56]	; (5574 <_osc32kctrl_init_sources+0x60>)
    553a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    553c:	6878      	ldr	r0, [r7, #4]
    553e:	4b0e      	ldr	r3, [pc, #56]	; (5578 <_osc32kctrl_init_sources+0x64>)
    5540:	4798      	blx	r3
    5542:	4603      	mov	r3, r0
    5544:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5546:	887b      	ldrh	r3, [r7, #2]
    5548:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    554a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    554e:	4619      	mov	r1, r3
    5550:	6878      	ldr	r0, [r7, #4]
    5552:	4b0a      	ldr	r3, [pc, #40]	; (557c <_osc32kctrl_init_sources+0x68>)
    5554:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5556:	2100      	movs	r1, #0
    5558:	6878      	ldr	r0, [r7, #4]
    555a:	4b09      	ldr	r3, [pc, #36]	; (5580 <_osc32kctrl_init_sources+0x6c>)
    555c:	4798      	blx	r3
	(void)calib;
}
    555e:	bf00      	nop
    5560:	3708      	adds	r7, #8
    5562:	46bd      	mov	sp, r7
    5564:	bd80      	pop	{r7, pc}
    5566:	bf00      	nop
    5568:	40001400 	.word	0x40001400
    556c:	00005477 	.word	0x00005477
    5570:	00005495 	.word	0x00005495
    5574:	000054b3 	.word	0x000054b3
    5578:	000054d1 	.word	0x000054d1
    557c:	000054f7 	.word	0x000054f7
    5580:	00005459 	.word	0x00005459

00005584 <hri_gclk_wait_for_sync>:
{
    5584:	b480      	push	{r7}
    5586:	b083      	sub	sp, #12
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
    558c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    558e:	bf00      	nop
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	685a      	ldr	r2, [r3, #4]
    5594:	683b      	ldr	r3, [r7, #0]
    5596:	4013      	ands	r3, r2
    5598:	2b00      	cmp	r3, #0
    559a:	d1f9      	bne.n	5590 <hri_gclk_wait_for_sync+0xc>
}
    559c:	bf00      	nop
    559e:	370c      	adds	r7, #12
    55a0:	46bd      	mov	sp, r7
    55a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a6:	4770      	bx	lr

000055a8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    55a8:	b480      	push	{r7}
    55aa:	b083      	sub	sp, #12
    55ac:	af00      	add	r7, sp, #0
    55ae:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	685b      	ldr	r3, [r3, #4]
    55b4:	089b      	lsrs	r3, r3, #2
    55b6:	f003 0301 	and.w	r3, r3, #1
    55ba:	2b00      	cmp	r3, #0
    55bc:	bf14      	ite	ne
    55be:	2301      	movne	r3, #1
    55c0:	2300      	moveq	r3, #0
    55c2:	b2db      	uxtb	r3, r3
}
    55c4:	4618      	mov	r0, r3
    55c6:	370c      	adds	r7, #12
    55c8:	46bd      	mov	sp, r7
    55ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ce:	4770      	bx	lr

000055d0 <hri_gclk_read_SYNCBUSY_reg>:
{
    55d0:	b480      	push	{r7}
    55d2:	b083      	sub	sp, #12
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	685b      	ldr	r3, [r3, #4]
}
    55dc:	4618      	mov	r0, r3
    55de:	370c      	adds	r7, #12
    55e0:	46bd      	mov	sp, r7
    55e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55e6:	4770      	bx	lr

000055e8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    55e8:	b580      	push	{r7, lr}
    55ea:	b086      	sub	sp, #24
    55ec:	af00      	add	r7, sp, #0
    55ee:	60f8      	str	r0, [r7, #12]
    55f0:	460b      	mov	r3, r1
    55f2:	607a      	str	r2, [r7, #4]
    55f4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    55f6:	7afa      	ldrb	r2, [r7, #11]
    55f8:	68fb      	ldr	r3, [r7, #12]
    55fa:	3208      	adds	r2, #8
    55fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5600:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5602:	697b      	ldr	r3, [r7, #20]
    5604:	f023 030f 	bic.w	r3, r3, #15
    5608:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    560a:	687b      	ldr	r3, [r7, #4]
    560c:	f003 030f 	and.w	r3, r3, #15
    5610:	697a      	ldr	r2, [r7, #20]
    5612:	4313      	orrs	r3, r2
    5614:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5616:	7afa      	ldrb	r2, [r7, #11]
    5618:	68fb      	ldr	r3, [r7, #12]
    561a:	3208      	adds	r2, #8
    561c:	6979      	ldr	r1, [r7, #20]
    561e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5622:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5626:	68f8      	ldr	r0, [r7, #12]
    5628:	4b02      	ldr	r3, [pc, #8]	; (5634 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    562a:	4798      	blx	r3
}
    562c:	bf00      	nop
    562e:	3718      	adds	r7, #24
    5630:	46bd      	mov	sp, r7
    5632:	bd80      	pop	{r7, pc}
    5634:	00005585 	.word	0x00005585

00005638 <hri_gclk_write_PCHCTRL_reg>:
{
    5638:	b480      	push	{r7}
    563a:	b085      	sub	sp, #20
    563c:	af00      	add	r7, sp, #0
    563e:	60f8      	str	r0, [r7, #12]
    5640:	460b      	mov	r3, r1
    5642:	607a      	str	r2, [r7, #4]
    5644:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5646:	7afa      	ldrb	r2, [r7, #11]
    5648:	68fb      	ldr	r3, [r7, #12]
    564a:	3220      	adds	r2, #32
    564c:	6879      	ldr	r1, [r7, #4]
    564e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5652:	bf00      	nop
    5654:	3714      	adds	r7, #20
    5656:	46bd      	mov	sp, r7
    5658:	f85d 7b04 	ldr.w	r7, [sp], #4
    565c:	4770      	bx	lr

0000565e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    565e:	b480      	push	{r7}
    5660:	b085      	sub	sp, #20
    5662:	af00      	add	r7, sp, #0
    5664:	60f8      	str	r0, [r7, #12]
    5666:	460b      	mov	r3, r1
    5668:	607a      	str	r2, [r7, #4]
    566a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    566c:	bf00      	nop
    566e:	7afa      	ldrb	r2, [r7, #11]
    5670:	68f9      	ldr	r1, [r7, #12]
    5672:	4613      	mov	r3, r2
    5674:	009b      	lsls	r3, r3, #2
    5676:	4413      	add	r3, r2
    5678:	009b      	lsls	r3, r3, #2
    567a:	440b      	add	r3, r1
    567c:	333c      	adds	r3, #60	; 0x3c
    567e:	681a      	ldr	r2, [r3, #0]
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	4013      	ands	r3, r2
    5684:	2b00      	cmp	r3, #0
    5686:	d1f2      	bne.n	566e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5688:	bf00      	nop
    568a:	3714      	adds	r7, #20
    568c:	46bd      	mov	sp, r7
    568e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5692:	4770      	bx	lr

00005694 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5694:	b480      	push	{r7}
    5696:	b083      	sub	sp, #12
    5698:	af00      	add	r7, sp, #0
    569a:	6078      	str	r0, [r7, #4]
    569c:	460b      	mov	r3, r1
    569e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    56a0:	78fa      	ldrb	r2, [r7, #3]
    56a2:	6879      	ldr	r1, [r7, #4]
    56a4:	4613      	mov	r3, r2
    56a6:	009b      	lsls	r3, r3, #2
    56a8:	4413      	add	r3, r2
    56aa:	009b      	lsls	r3, r3, #2
    56ac:	440b      	add	r3, r1
    56ae:	3340      	adds	r3, #64	; 0x40
    56b0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    56b2:	f003 0301 	and.w	r3, r3, #1
    56b6:	2b00      	cmp	r3, #0
    56b8:	bf14      	ite	ne
    56ba:	2301      	movne	r3, #1
    56bc:	2300      	moveq	r3, #0
    56be:	b2db      	uxtb	r3, r3
}
    56c0:	4618      	mov	r0, r3
    56c2:	370c      	adds	r7, #12
    56c4:	46bd      	mov	sp, r7
    56c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ca:	4770      	bx	lr

000056cc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    56cc:	b480      	push	{r7}
    56ce:	b083      	sub	sp, #12
    56d0:	af00      	add	r7, sp, #0
    56d2:	6078      	str	r0, [r7, #4]
    56d4:	460b      	mov	r3, r1
    56d6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    56d8:	78fa      	ldrb	r2, [r7, #3]
    56da:	6879      	ldr	r1, [r7, #4]
    56dc:	4613      	mov	r3, r2
    56de:	009b      	lsls	r3, r3, #2
    56e0:	4413      	add	r3, r2
    56e2:	009b      	lsls	r3, r3, #2
    56e4:	440b      	add	r3, r1
    56e6:	3340      	adds	r3, #64	; 0x40
    56e8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    56ea:	085b      	lsrs	r3, r3, #1
    56ec:	f003 0301 	and.w	r3, r3, #1
    56f0:	2b00      	cmp	r3, #0
    56f2:	bf14      	ite	ne
    56f4:	2301      	movne	r3, #1
    56f6:	2300      	moveq	r3, #0
    56f8:	b2db      	uxtb	r3, r3
}
    56fa:	4618      	mov	r0, r3
    56fc:	370c      	adds	r7, #12
    56fe:	46bd      	mov	sp, r7
    5700:	f85d 7b04 	ldr.w	r7, [sp], #4
    5704:	4770      	bx	lr
	...

00005708 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5708:	b580      	push	{r7, lr}
    570a:	b082      	sub	sp, #8
    570c:	af00      	add	r7, sp, #0
    570e:	6078      	str	r0, [r7, #4]
    5710:	460b      	mov	r3, r1
    5712:	70fb      	strb	r3, [r7, #3]
    5714:	4613      	mov	r3, r2
    5716:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5718:	78fa      	ldrb	r2, [r7, #3]
    571a:	6879      	ldr	r1, [r7, #4]
    571c:	4613      	mov	r3, r2
    571e:	009b      	lsls	r3, r3, #2
    5720:	4413      	add	r3, r2
    5722:	009b      	lsls	r3, r3, #2
    5724:	440b      	add	r3, r1
    5726:	3330      	adds	r3, #48	; 0x30
    5728:	78ba      	ldrb	r2, [r7, #2]
    572a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    572c:	78fb      	ldrb	r3, [r7, #3]
    572e:	2202      	movs	r2, #2
    5730:	4619      	mov	r1, r3
    5732:	6878      	ldr	r0, [r7, #4]
    5734:	4b02      	ldr	r3, [pc, #8]	; (5740 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5736:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5738:	bf00      	nop
    573a:	3708      	adds	r7, #8
    573c:	46bd      	mov	sp, r7
    573e:	bd80      	pop	{r7, pc}
    5740:	0000565f 	.word	0x0000565f

00005744 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5744:	b580      	push	{r7, lr}
    5746:	b084      	sub	sp, #16
    5748:	af00      	add	r7, sp, #0
    574a:	60f8      	str	r0, [r7, #12]
    574c:	460b      	mov	r3, r1
    574e:	607a      	str	r2, [r7, #4]
    5750:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5752:	7afa      	ldrb	r2, [r7, #11]
    5754:	68f9      	ldr	r1, [r7, #12]
    5756:	4613      	mov	r3, r2
    5758:	009b      	lsls	r3, r3, #2
    575a:	4413      	add	r3, r2
    575c:	009b      	lsls	r3, r3, #2
    575e:	440b      	add	r3, r1
    5760:	3334      	adds	r3, #52	; 0x34
    5762:	687a      	ldr	r2, [r7, #4]
    5764:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5766:	7afb      	ldrb	r3, [r7, #11]
    5768:	2206      	movs	r2, #6
    576a:	4619      	mov	r1, r3
    576c:	68f8      	ldr	r0, [r7, #12]
    576e:	4b03      	ldr	r3, [pc, #12]	; (577c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5770:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5772:	bf00      	nop
    5774:	3710      	adds	r7, #16
    5776:	46bd      	mov	sp, r7
    5778:	bd80      	pop	{r7, pc}
    577a:	bf00      	nop
    577c:	0000565f 	.word	0x0000565f

00005780 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5780:	b480      	push	{r7}
    5782:	b085      	sub	sp, #20
    5784:	af00      	add	r7, sp, #0
    5786:	60f8      	str	r0, [r7, #12]
    5788:	460b      	mov	r3, r1
    578a:	607a      	str	r2, [r7, #4]
    578c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    578e:	7afa      	ldrb	r2, [r7, #11]
    5790:	68f9      	ldr	r1, [r7, #12]
    5792:	4613      	mov	r3, r2
    5794:	009b      	lsls	r3, r3, #2
    5796:	4413      	add	r3, r2
    5798:	009b      	lsls	r3, r3, #2
    579a:	440b      	add	r3, r1
    579c:	3338      	adds	r3, #56	; 0x38
    579e:	687a      	ldr	r2, [r7, #4]
    57a0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57a2:	bf00      	nop
    57a4:	3714      	adds	r7, #20
    57a6:	46bd      	mov	sp, r7
    57a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ac:	4770      	bx	lr

000057ae <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    57ae:	b480      	push	{r7}
    57b0:	b083      	sub	sp, #12
    57b2:	af00      	add	r7, sp, #0
    57b4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    57b6:	687b      	ldr	r3, [r7, #4]
    57b8:	691b      	ldr	r3, [r3, #16]
    57ba:	085b      	lsrs	r3, r3, #1
    57bc:	f003 0301 	and.w	r3, r3, #1
    57c0:	2b00      	cmp	r3, #0
    57c2:	bf14      	ite	ne
    57c4:	2301      	movne	r3, #1
    57c6:	2300      	moveq	r3, #0
    57c8:	b2db      	uxtb	r3, r3
}
    57ca:	4618      	mov	r0, r3
    57cc:	370c      	adds	r7, #12
    57ce:	46bd      	mov	sp, r7
    57d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d4:	4770      	bx	lr

000057d6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    57d6:	b480      	push	{r7}
    57d8:	b083      	sub	sp, #12
    57da:	af00      	add	r7, sp, #0
    57dc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	691b      	ldr	r3, [r3, #16]
    57e2:	0a1b      	lsrs	r3, r3, #8
    57e4:	f003 0301 	and.w	r3, r3, #1
    57e8:	2b00      	cmp	r3, #0
    57ea:	bf14      	ite	ne
    57ec:	2301      	movne	r3, #1
    57ee:	2300      	moveq	r3, #0
    57f0:	b2db      	uxtb	r3, r3
}
    57f2:	4618      	mov	r0, r3
    57f4:	370c      	adds	r7, #12
    57f6:	46bd      	mov	sp, r7
    57f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fc:	4770      	bx	lr

000057fe <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    57fe:	b480      	push	{r7}
    5800:	b085      	sub	sp, #20
    5802:	af00      	add	r7, sp, #0
    5804:	6078      	str	r0, [r7, #4]
    5806:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	691b      	ldr	r3, [r3, #16]
    580c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    580e:	68fa      	ldr	r2, [r7, #12]
    5810:	683b      	ldr	r3, [r7, #0]
    5812:	4013      	ands	r3, r2
    5814:	60fb      	str	r3, [r7, #12]
	return tmp;
    5816:	68fb      	ldr	r3, [r7, #12]
}
    5818:	4618      	mov	r0, r3
    581a:	3714      	adds	r7, #20
    581c:	46bd      	mov	sp, r7
    581e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5822:	4770      	bx	lr

00005824 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5824:	b480      	push	{r7}
    5826:	b085      	sub	sp, #20
    5828:	af00      	add	r7, sp, #0
    582a:	60f8      	str	r0, [r7, #12]
    582c:	460b      	mov	r3, r1
    582e:	607a      	str	r2, [r7, #4]
    5830:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5832:	7afb      	ldrb	r3, [r7, #11]
    5834:	68fa      	ldr	r2, [r7, #12]
    5836:	3304      	adds	r3, #4
    5838:	009b      	lsls	r3, r3, #2
    583a:	4413      	add	r3, r2
    583c:	687a      	ldr	r2, [r7, #4]
    583e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5840:	bf00      	nop
    5842:	3714      	adds	r7, #20
    5844:	46bd      	mov	sp, r7
    5846:	f85d 7b04 	ldr.w	r7, [sp], #4
    584a:	4770      	bx	lr

0000584c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    584c:	b480      	push	{r7}
    584e:	b083      	sub	sp, #12
    5850:	af00      	add	r7, sp, #0
    5852:	6078      	str	r0, [r7, #4]
    5854:	460b      	mov	r3, r1
    5856:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	78fa      	ldrb	r2, [r7, #3]
    585c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    585e:	bf00      	nop
    5860:	370c      	adds	r7, #12
    5862:	46bd      	mov	sp, r7
    5864:	f85d 7b04 	ldr.w	r7, [sp], #4
    5868:	4770      	bx	lr

0000586a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    586a:	b480      	push	{r7}
    586c:	b085      	sub	sp, #20
    586e:	af00      	add	r7, sp, #0
    5870:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5872:	687b      	ldr	r3, [r7, #4]
    5874:	f893 3020 	ldrb.w	r3, [r3, #32]
    5878:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    587a:	7bfb      	ldrb	r3, [r7, #15]
    587c:	f003 0301 	and.w	r3, r3, #1
    5880:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5882:	7bfb      	ldrb	r3, [r7, #15]
    5884:	2b00      	cmp	r3, #0
    5886:	bf14      	ite	ne
    5888:	2301      	movne	r3, #1
    588a:	2300      	moveq	r3, #0
    588c:	b2db      	uxtb	r3, r3
}
    588e:	4618      	mov	r0, r3
    5890:	3714      	adds	r7, #20
    5892:	46bd      	mov	sp, r7
    5894:	f85d 7b04 	ldr.w	r7, [sp], #4
    5898:	4770      	bx	lr

0000589a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    589a:	b480      	push	{r7}
    589c:	b083      	sub	sp, #12
    589e:	af00      	add	r7, sp, #0
    58a0:	6078      	str	r0, [r7, #4]
    58a2:	460b      	mov	r3, r1
    58a4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	78fa      	ldrb	r2, [r7, #3]
    58aa:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    58ae:	bf00      	nop
    58b0:	370c      	adds	r7, #12
    58b2:	46bd      	mov	sp, r7
    58b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b8:	4770      	bx	lr

000058ba <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    58ba:	b480      	push	{r7}
    58bc:	b083      	sub	sp, #12
    58be:	af00      	add	r7, sp, #0
    58c0:	6078      	str	r0, [r7, #4]
    58c2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	683a      	ldr	r2, [r7, #0]
    58c8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    58ca:	bf00      	nop
    58cc:	370c      	adds	r7, #12
    58ce:	46bd      	mov	sp, r7
    58d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    58d4:	4770      	bx	lr

000058d6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    58d6:	b480      	push	{r7}
    58d8:	b083      	sub	sp, #12
    58da:	af00      	add	r7, sp, #0
    58dc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    58de:	687b      	ldr	r3, [r7, #4]
    58e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    58e2:	4618      	mov	r0, r3
    58e4:	370c      	adds	r7, #12
    58e6:	46bd      	mov	sp, r7
    58e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ec:	4770      	bx	lr

000058ee <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    58ee:	b480      	push	{r7}
    58f0:	b083      	sub	sp, #12
    58f2:	af00      	add	r7, sp, #0
    58f4:	6078      	str	r0, [r7, #4]
    58f6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	683a      	ldr	r2, [r7, #0]
    58fc:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    58fe:	bf00      	nop
    5900:	370c      	adds	r7, #12
    5902:	46bd      	mov	sp, r7
    5904:	f85d 7b04 	ldr.w	r7, [sp], #4
    5908:	4770      	bx	lr

0000590a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    590a:	b480      	push	{r7}
    590c:	b085      	sub	sp, #20
    590e:	af00      	add	r7, sp, #0
    5910:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5918:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    591a:	7bfb      	ldrb	r3, [r7, #15]
    591c:	085b      	lsrs	r3, r3, #1
    591e:	b2db      	uxtb	r3, r3
    5920:	f003 0301 	and.w	r3, r3, #1
    5924:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5926:	7bfb      	ldrb	r3, [r7, #15]
    5928:	2b00      	cmp	r3, #0
    592a:	bf14      	ite	ne
    592c:	2301      	movne	r3, #1
    592e:	2300      	moveq	r3, #0
    5930:	b2db      	uxtb	r3, r3
}
    5932:	4618      	mov	r0, r3
    5934:	3714      	adds	r7, #20
    5936:	46bd      	mov	sp, r7
    5938:	f85d 7b04 	ldr.w	r7, [sp], #4
    593c:	4770      	bx	lr

0000593e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    593e:	b480      	push	{r7}
    5940:	b085      	sub	sp, #20
    5942:	af00      	add	r7, sp, #0
    5944:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5946:	687b      	ldr	r3, [r7, #4]
    5948:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    594c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    594e:	7bfb      	ldrb	r3, [r7, #15]
    5950:	089b      	lsrs	r3, r3, #2
    5952:	b2db      	uxtb	r3, r3
    5954:	f003 0301 	and.w	r3, r3, #1
    5958:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    595a:	7bfb      	ldrb	r3, [r7, #15]
    595c:	2b00      	cmp	r3, #0
    595e:	bf14      	ite	ne
    5960:	2301      	movne	r3, #1
    5962:	2300      	moveq	r3, #0
    5964:	b2db      	uxtb	r3, r3
}
    5966:	4618      	mov	r0, r3
    5968:	3714      	adds	r7, #20
    596a:	46bd      	mov	sp, r7
    596c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5970:	4770      	bx	lr

00005972 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5972:	b480      	push	{r7}
    5974:	b085      	sub	sp, #20
    5976:	af00      	add	r7, sp, #0
    5978:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5980:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5982:	7bfb      	ldrb	r3, [r7, #15]
    5984:	08db      	lsrs	r3, r3, #3
    5986:	b2db      	uxtb	r3, r3
    5988:	f003 0301 	and.w	r3, r3, #1
    598c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    598e:	7bfb      	ldrb	r3, [r7, #15]
    5990:	2b00      	cmp	r3, #0
    5992:	bf14      	ite	ne
    5994:	2301      	movne	r3, #1
    5996:	2300      	moveq	r3, #0
    5998:	b2db      	uxtb	r3, r3
}
    599a:	4618      	mov	r0, r3
    599c:	3714      	adds	r7, #20
    599e:	46bd      	mov	sp, r7
    59a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a4:	4770      	bx	lr

000059a6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    59a6:	b480      	push	{r7}
    59a8:	b085      	sub	sp, #20
    59aa:	af00      	add	r7, sp, #0
    59ac:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    59ae:	687b      	ldr	r3, [r7, #4]
    59b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    59b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    59b6:	7bfb      	ldrb	r3, [r7, #15]
    59b8:	091b      	lsrs	r3, r3, #4
    59ba:	b2db      	uxtb	r3, r3
    59bc:	f003 0301 	and.w	r3, r3, #1
    59c0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    59c2:	7bfb      	ldrb	r3, [r7, #15]
    59c4:	2b00      	cmp	r3, #0
    59c6:	bf14      	ite	ne
    59c8:	2301      	movne	r3, #1
    59ca:	2300      	moveq	r3, #0
    59cc:	b2db      	uxtb	r3, r3
}
    59ce:	4618      	mov	r0, r3
    59d0:	3714      	adds	r7, #20
    59d2:	46bd      	mov	sp, r7
    59d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d8:	4770      	bx	lr
	...

000059dc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    59dc:	b580      	push	{r7, lr}
    59de:	b082      	sub	sp, #8
    59e0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    59e2:	4b0a      	ldr	r3, [pc, #40]	; (5a0c <_oscctrl_init_sources+0x30>)
    59e4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    59e6:	4a0a      	ldr	r2, [pc, #40]	; (5a10 <_oscctrl_init_sources+0x34>)
    59e8:	2101      	movs	r1, #1
    59ea:	6878      	ldr	r0, [r7, #4]
    59ec:	4b09      	ldr	r3, [pc, #36]	; (5a14 <_oscctrl_init_sources+0x38>)
    59ee:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    59f0:	bf00      	nop
    59f2:	6878      	ldr	r0, [r7, #4]
    59f4:	4b08      	ldr	r3, [pc, #32]	; (5a18 <_oscctrl_init_sources+0x3c>)
    59f6:	4798      	blx	r3
    59f8:	4603      	mov	r3, r0
    59fa:	f083 0301 	eor.w	r3, r3, #1
    59fe:	b2db      	uxtb	r3, r3
    5a00:	2b00      	cmp	r3, #0
    5a02:	d1f6      	bne.n	59f2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5a04:	bf00      	nop
    5a06:	3708      	adds	r7, #8
    5a08:	46bd      	mov	sp, r7
    5a0a:	bd80      	pop	{r7, pc}
    5a0c:	40001000 	.word	0x40001000
    5a10:	03002646 	.word	0x03002646
    5a14:	00005825 	.word	0x00005825
    5a18:	000057af 	.word	0x000057af

00005a1c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b084      	sub	sp, #16
    5a20:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5a22:	4b6b      	ldr	r3, [pc, #428]	; (5bd0 <_oscctrl_init_referenced_generators+0x1b4>)
    5a24:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5a26:	2204      	movs	r2, #4
    5a28:	2100      	movs	r1, #0
    5a2a:	486a      	ldr	r0, [pc, #424]	; (5bd4 <_oscctrl_init_referenced_generators+0x1b8>)
    5a2c:	4b6a      	ldr	r3, [pc, #424]	; (5bd8 <_oscctrl_init_referenced_generators+0x1bc>)
    5a2e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5a30:	bf00      	nop
    5a32:	4868      	ldr	r0, [pc, #416]	; (5bd4 <_oscctrl_init_referenced_generators+0x1b8>)
    5a34:	4b69      	ldr	r3, [pc, #420]	; (5bdc <_oscctrl_init_referenced_generators+0x1c0>)
    5a36:	4798      	blx	r3
    5a38:	4603      	mov	r3, r0
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d1f9      	bne.n	5a32 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5a3e:	2100      	movs	r1, #0
    5a40:	68f8      	ldr	r0, [r7, #12]
    5a42:	4b67      	ldr	r3, [pc, #412]	; (5be0 <_oscctrl_init_referenced_generators+0x1c4>)
    5a44:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5a46:	4967      	ldr	r1, [pc, #412]	; (5be4 <_oscctrl_init_referenced_generators+0x1c8>)
    5a48:	68f8      	ldr	r0, [r7, #12]
    5a4a:	4b67      	ldr	r3, [pc, #412]	; (5be8 <_oscctrl_init_referenced_generators+0x1cc>)
    5a4c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5a4e:	bf00      	nop
    5a50:	68f8      	ldr	r0, [r7, #12]
    5a52:	4b66      	ldr	r3, [pc, #408]	; (5bec <_oscctrl_init_referenced_generators+0x1d0>)
    5a54:	4798      	blx	r3
    5a56:	4603      	mov	r3, r0
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d1f9      	bne.n	5a50 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5a5c:	2100      	movs	r1, #0
    5a5e:	68f8      	ldr	r0, [r7, #12]
    5a60:	4b63      	ldr	r3, [pc, #396]	; (5bf0 <_oscctrl_init_referenced_generators+0x1d4>)
    5a62:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5a64:	bf00      	nop
    5a66:	68f8      	ldr	r0, [r7, #12]
    5a68:	4b62      	ldr	r3, [pc, #392]	; (5bf4 <_oscctrl_init_referenced_generators+0x1d8>)
    5a6a:	4798      	blx	r3
    5a6c:	4603      	mov	r3, r0
    5a6e:	2b00      	cmp	r3, #0
    5a70:	d1f9      	bne.n	5a66 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5a72:	2302      	movs	r3, #2
    5a74:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5a76:	7afb      	ldrb	r3, [r7, #11]
    5a78:	4619      	mov	r1, r3
    5a7a:	68f8      	ldr	r0, [r7, #12]
    5a7c:	4b58      	ldr	r3, [pc, #352]	; (5be0 <_oscctrl_init_referenced_generators+0x1c4>)
    5a7e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5a80:	bf00      	nop
    5a82:	68f8      	ldr	r0, [r7, #12]
    5a84:	4b5c      	ldr	r3, [pc, #368]	; (5bf8 <_oscctrl_init_referenced_generators+0x1dc>)
    5a86:	4798      	blx	r3
    5a88:	4603      	mov	r3, r0
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d1f9      	bne.n	5a82 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5a8e:	68f8      	ldr	r0, [r7, #12]
    5a90:	4b5a      	ldr	r3, [pc, #360]	; (5bfc <_oscctrl_init_referenced_generators+0x1e0>)
    5a92:	4798      	blx	r3
    5a94:	4603      	mov	r3, r0
    5a96:	4619      	mov	r1, r3
    5a98:	68f8      	ldr	r0, [r7, #12]
    5a9a:	4b59      	ldr	r3, [pc, #356]	; (5c00 <_oscctrl_init_referenced_generators+0x1e4>)
    5a9c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5a9e:	bf00      	nop
    5aa0:	68f8      	ldr	r0, [r7, #12]
    5aa2:	4b58      	ldr	r3, [pc, #352]	; (5c04 <_oscctrl_init_referenced_generators+0x1e8>)
    5aa4:	4798      	blx	r3
    5aa6:	4603      	mov	r3, r0
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d1f9      	bne.n	5aa0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5aac:	2319      	movs	r3, #25
    5aae:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5ab0:	7afb      	ldrb	r3, [r7, #11]
    5ab2:	4619      	mov	r1, r3
    5ab4:	68f8      	ldr	r0, [r7, #12]
    5ab6:	4b4e      	ldr	r3, [pc, #312]	; (5bf0 <_oscctrl_init_referenced_generators+0x1d4>)
    5ab8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5aba:	bf00      	nop
    5abc:	68f8      	ldr	r0, [r7, #12]
    5abe:	4b4d      	ldr	r3, [pc, #308]	; (5bf4 <_oscctrl_init_referenced_generators+0x1d8>)
    5ac0:	4798      	blx	r3
    5ac2:	4603      	mov	r3, r0
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d1f9      	bne.n	5abc <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5ac8:	2245      	movs	r2, #69	; 0x45
    5aca:	2101      	movs	r1, #1
    5acc:	4841      	ldr	r0, [pc, #260]	; (5bd4 <_oscctrl_init_referenced_generators+0x1b8>)
    5ace:	4b4e      	ldr	r3, [pc, #312]	; (5c08 <_oscctrl_init_referenced_generators+0x1ec>)
    5ad0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5ad2:	223b      	movs	r2, #59	; 0x3b
    5ad4:	2100      	movs	r1, #0
    5ad6:	68f8      	ldr	r0, [r7, #12]
    5ad8:	4b4c      	ldr	r3, [pc, #304]	; (5c0c <_oscctrl_init_referenced_generators+0x1f0>)
    5ada:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5adc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5ae0:	2100      	movs	r1, #0
    5ae2:	68f8      	ldr	r0, [r7, #12]
    5ae4:	4b4a      	ldr	r3, [pc, #296]	; (5c10 <_oscctrl_init_referenced_generators+0x1f4>)
    5ae6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5ae8:	2242      	movs	r2, #66	; 0x42
    5aea:	2100      	movs	r1, #0
    5aec:	68f8      	ldr	r0, [r7, #12]
    5aee:	4b49      	ldr	r3, [pc, #292]	; (5c14 <_oscctrl_init_referenced_generators+0x1f8>)
    5af0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5af2:	4a49      	ldr	r2, [pc, #292]	; (5c18 <_oscctrl_init_referenced_generators+0x1fc>)
    5af4:	2101      	movs	r1, #1
    5af6:	68f8      	ldr	r0, [r7, #12]
    5af8:	4b44      	ldr	r3, [pc, #272]	; (5c0c <_oscctrl_init_referenced_generators+0x1f0>)
    5afa:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5afc:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5b00:	2101      	movs	r1, #1
    5b02:	68f8      	ldr	r0, [r7, #12]
    5b04:	4b42      	ldr	r3, [pc, #264]	; (5c10 <_oscctrl_init_referenced_generators+0x1f4>)
    5b06:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5b08:	2202      	movs	r2, #2
    5b0a:	2101      	movs	r1, #1
    5b0c:	68f8      	ldr	r0, [r7, #12]
    5b0e:	4b41      	ldr	r3, [pc, #260]	; (5c14 <_oscctrl_init_referenced_generators+0x1f8>)
    5b10:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5b12:	68f8      	ldr	r0, [r7, #12]
    5b14:	4b41      	ldr	r3, [pc, #260]	; (5c1c <_oscctrl_init_referenced_generators+0x200>)
    5b16:	4798      	blx	r3
    5b18:	4603      	mov	r3, r0
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	d00c      	beq.n	5b38 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5b1e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5b22:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5b24:	bf00      	nop
    5b26:	6879      	ldr	r1, [r7, #4]
    5b28:	68f8      	ldr	r0, [r7, #12]
    5b2a:	4b3d      	ldr	r3, [pc, #244]	; (5c20 <_oscctrl_init_referenced_generators+0x204>)
    5b2c:	4798      	blx	r3
    5b2e:	4602      	mov	r2, r0
    5b30:	687b      	ldr	r3, [r7, #4]
    5b32:	429a      	cmp	r2, r3
    5b34:	d1f7      	bne.n	5b26 <_oscctrl_init_referenced_generators+0x10a>
    5b36:	e009      	b.n	5b4c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5b38:	bf00      	nop
    5b3a:	68f8      	ldr	r0, [r7, #12]
    5b3c:	4b39      	ldr	r3, [pc, #228]	; (5c24 <_oscctrl_init_referenced_generators+0x208>)
    5b3e:	4798      	blx	r3
    5b40:	4603      	mov	r3, r0
    5b42:	f083 0301 	eor.w	r3, r3, #1
    5b46:	b2db      	uxtb	r3, r3
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d1f6      	bne.n	5b3a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5b4c:	bf00      	nop
    5b4e:	2100      	movs	r1, #0
    5b50:	68f8      	ldr	r0, [r7, #12]
    5b52:	4b35      	ldr	r3, [pc, #212]	; (5c28 <_oscctrl_init_referenced_generators+0x20c>)
    5b54:	4798      	blx	r3
    5b56:	4603      	mov	r3, r0
    5b58:	f083 0301 	eor.w	r3, r3, #1
    5b5c:	b2db      	uxtb	r3, r3
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d009      	beq.n	5b76 <_oscctrl_init_referenced_generators+0x15a>
    5b62:	2100      	movs	r1, #0
    5b64:	68f8      	ldr	r0, [r7, #12]
    5b66:	4b31      	ldr	r3, [pc, #196]	; (5c2c <_oscctrl_init_referenced_generators+0x210>)
    5b68:	4798      	blx	r3
    5b6a:	4603      	mov	r3, r0
    5b6c:	f083 0301 	eor.w	r3, r3, #1
    5b70:	b2db      	uxtb	r3, r3
    5b72:	2b00      	cmp	r3, #0
    5b74:	d1eb      	bne.n	5b4e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5b76:	bf00      	nop
    5b78:	2101      	movs	r1, #1
    5b7a:	68f8      	ldr	r0, [r7, #12]
    5b7c:	4b2a      	ldr	r3, [pc, #168]	; (5c28 <_oscctrl_init_referenced_generators+0x20c>)
    5b7e:	4798      	blx	r3
    5b80:	4603      	mov	r3, r0
    5b82:	f083 0301 	eor.w	r3, r3, #1
    5b86:	b2db      	uxtb	r3, r3
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d009      	beq.n	5ba0 <_oscctrl_init_referenced_generators+0x184>
    5b8c:	2101      	movs	r1, #1
    5b8e:	68f8      	ldr	r0, [r7, #12]
    5b90:	4b26      	ldr	r3, [pc, #152]	; (5c2c <_oscctrl_init_referenced_generators+0x210>)
    5b92:	4798      	blx	r3
    5b94:	4603      	mov	r3, r0
    5b96:	f083 0301 	eor.w	r3, r3, #1
    5b9a:	b2db      	uxtb	r3, r3
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d1eb      	bne.n	5b78 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5ba0:	bf00      	nop
    5ba2:	480c      	ldr	r0, [pc, #48]	; (5bd4 <_oscctrl_init_referenced_generators+0x1b8>)
    5ba4:	4b22      	ldr	r3, [pc, #136]	; (5c30 <_oscctrl_init_referenced_generators+0x214>)
    5ba6:	4798      	blx	r3
    5ba8:	4603      	mov	r3, r0
    5baa:	2b00      	cmp	r3, #0
    5bac:	d1f9      	bne.n	5ba2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5bae:	2207      	movs	r2, #7
    5bb0:	2100      	movs	r1, #0
    5bb2:	4808      	ldr	r0, [pc, #32]	; (5bd4 <_oscctrl_init_referenced_generators+0x1b8>)
    5bb4:	4b08      	ldr	r3, [pc, #32]	; (5bd8 <_oscctrl_init_referenced_generators+0x1bc>)
    5bb6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5bb8:	bf00      	nop
    5bba:	4806      	ldr	r0, [pc, #24]	; (5bd4 <_oscctrl_init_referenced_generators+0x1b8>)
    5bbc:	4b07      	ldr	r3, [pc, #28]	; (5bdc <_oscctrl_init_referenced_generators+0x1c0>)
    5bbe:	4798      	blx	r3
    5bc0:	4603      	mov	r3, r0
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d1f9      	bne.n	5bba <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5bc6:	bf00      	nop
    5bc8:	3710      	adds	r7, #16
    5bca:	46bd      	mov	sp, r7
    5bcc:	bd80      	pop	{r7, pc}
    5bce:	bf00      	nop
    5bd0:	40001000 	.word	0x40001000
    5bd4:	40001c00 	.word	0x40001c00
    5bd8:	000055e9 	.word	0x000055e9
    5bdc:	000055a9 	.word	0x000055a9
    5be0:	0000584d 	.word	0x0000584d
    5be4:	0401bb80 	.word	0x0401bb80
    5be8:	000058ef 	.word	0x000058ef
    5bec:	000059a7 	.word	0x000059a7
    5bf0:	0000589b 	.word	0x0000589b
    5bf4:	0000593f 	.word	0x0000593f
    5bf8:	0000590b 	.word	0x0000590b
    5bfc:	000058d7 	.word	0x000058d7
    5c00:	000058bb 	.word	0x000058bb
    5c04:	00005973 	.word	0x00005973
    5c08:	00005639 	.word	0x00005639
    5c0c:	00005745 	.word	0x00005745
    5c10:	00005781 	.word	0x00005781
    5c14:	00005709 	.word	0x00005709
    5c18:	000407a0 	.word	0x000407a0
    5c1c:	0000586b 	.word	0x0000586b
    5c20:	000057ff 	.word	0x000057ff
    5c24:	000057d7 	.word	0x000057d7
    5c28:	00005695 	.word	0x00005695
    5c2c:	000056cd 	.word	0x000056cd
    5c30:	000055d1 	.word	0x000055d1

00005c34 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5c34:	b480      	push	{r7}
    5c36:	b083      	sub	sp, #12
    5c38:	af00      	add	r7, sp, #0
    5c3a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	69db      	ldr	r3, [r3, #28]
    5c40:	0a9b      	lsrs	r3, r3, #10
    5c42:	f003 0301 	and.w	r3, r3, #1
    5c46:	2b00      	cmp	r3, #0
    5c48:	bf14      	ite	ne
    5c4a:	2301      	movne	r3, #1
    5c4c:	2300      	moveq	r3, #0
    5c4e:	b2db      	uxtb	r3, r3
}
    5c50:	4618      	mov	r0, r3
    5c52:	370c      	adds	r7, #12
    5c54:	46bd      	mov	sp, r7
    5c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c5a:	4770      	bx	lr

00005c5c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5c5c:	b480      	push	{r7}
    5c5e:	b083      	sub	sp, #12
    5c60:	af00      	add	r7, sp, #0
    5c62:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5c64:	687b      	ldr	r3, [r7, #4]
    5c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5c6a:	61da      	str	r2, [r3, #28]
}
    5c6c:	bf00      	nop
    5c6e:	370c      	adds	r7, #12
    5c70:	46bd      	mov	sp, r7
    5c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c76:	4770      	bx	lr

00005c78 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5c78:	b480      	push	{r7}
    5c7a:	b083      	sub	sp, #12
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
    5c80:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5c82:	687b      	ldr	r3, [r7, #4]
    5c84:	683a      	ldr	r2, [r7, #0]
    5c86:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c88:	bf00      	nop
    5c8a:	370c      	adds	r7, #12
    5c8c:	46bd      	mov	sp, r7
    5c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c92:	4770      	bx	lr

00005c94 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5c94:	b480      	push	{r7}
    5c96:	b083      	sub	sp, #12
    5c98:	af00      	add	r7, sp, #0
    5c9a:	6078      	str	r0, [r7, #4]
    5c9c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	683a      	ldr	r2, [r7, #0]
    5ca2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5ca4:	bf00      	nop
    5ca6:	370c      	adds	r7, #12
    5ca8:	46bd      	mov	sp, r7
    5caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cae:	4770      	bx	lr

00005cb0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5cb0:	b480      	push	{r7}
    5cb2:	b083      	sub	sp, #12
    5cb4:	af00      	add	r7, sp, #0
    5cb6:	6078      	str	r0, [r7, #4]
    5cb8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5cba:	687b      	ldr	r3, [r7, #4]
    5cbc:	683a      	ldr	r2, [r7, #0]
    5cbe:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cc0:	bf00      	nop
    5cc2:	370c      	adds	r7, #12
    5cc4:	46bd      	mov	sp, r7
    5cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cca:	4770      	bx	lr

00005ccc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5ccc:	b480      	push	{r7}
    5cce:	b083      	sub	sp, #12
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	6078      	str	r0, [r7, #4]
    5cd4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	683a      	ldr	r2, [r7, #0]
    5cda:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cdc:	bf00      	nop
    5cde:	370c      	adds	r7, #12
    5ce0:	46bd      	mov	sp, r7
    5ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce6:	4770      	bx	lr

00005ce8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5ce8:	b480      	push	{r7}
    5cea:	b085      	sub	sp, #20
    5cec:	af00      	add	r7, sp, #0
    5cee:	6078      	str	r0, [r7, #4]
    5cf0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5cf6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5cf8:	68fb      	ldr	r3, [r7, #12]
    5cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5cfe:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5d00:	683b      	ldr	r3, [r7, #0]
    5d02:	b2db      	uxtb	r3, r3
    5d04:	68fa      	ldr	r2, [r7, #12]
    5d06:	4313      	orrs	r3, r2
    5d08:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	68fa      	ldr	r2, [r7, #12]
    5d0e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d10:	bf00      	nop
    5d12:	3714      	adds	r7, #20
    5d14:	46bd      	mov	sp, r7
    5d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1a:	4770      	bx	lr

00005d1c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5d1c:	b480      	push	{r7}
    5d1e:	b085      	sub	sp, #20
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
    5d24:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5d2a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5d2c:	68fb      	ldr	r3, [r7, #12]
    5d2e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5d32:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5d34:	683b      	ldr	r3, [r7, #0]
    5d36:	041b      	lsls	r3, r3, #16
    5d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5d3c:	68fa      	ldr	r2, [r7, #12]
    5d3e:	4313      	orrs	r3, r2
    5d40:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	68fa      	ldr	r2, [r7, #12]
    5d46:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d48:	bf00      	nop
    5d4a:	3714      	adds	r7, #20
    5d4c:	46bd      	mov	sp, r7
    5d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d52:	4770      	bx	lr

00005d54 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5d54:	b480      	push	{r7}
    5d56:	b083      	sub	sp, #12
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
    5d5c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	683a      	ldr	r2, [r7, #0]
    5d62:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d64:	bf00      	nop
    5d66:	370c      	adds	r7, #12
    5d68:	46bd      	mov	sp, r7
    5d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6e:	4770      	bx	lr

00005d70 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5d70:	b480      	push	{r7}
    5d72:	b083      	sub	sp, #12
    5d74:	af00      	add	r7, sp, #0
    5d76:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5d78:	687b      	ldr	r3, [r7, #4]
    5d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5d7c:	4618      	mov	r0, r3
    5d7e:	370c      	adds	r7, #12
    5d80:	46bd      	mov	sp, r7
    5d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d86:	4770      	bx	lr

00005d88 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5d88:	b480      	push	{r7}
    5d8a:	b085      	sub	sp, #20
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	60f8      	str	r0, [r7, #12]
    5d90:	60b9      	str	r1, [r7, #8]
    5d92:	607a      	str	r2, [r7, #4]
	while (count--) {
    5d94:	e007      	b.n	5da6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5d96:	68fb      	ldr	r3, [r7, #12]
    5d98:	1c5a      	adds	r2, r3, #1
    5d9a:	60fa      	str	r2, [r7, #12]
    5d9c:	68ba      	ldr	r2, [r7, #8]
    5d9e:	1c51      	adds	r1, r2, #1
    5da0:	60b9      	str	r1, [r7, #8]
    5da2:	7812      	ldrb	r2, [r2, #0]
    5da4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	1e5a      	subs	r2, r3, #1
    5daa:	607a      	str	r2, [r7, #4]
    5dac:	2b00      	cmp	r3, #0
    5dae:	d1f2      	bne.n	5d96 <_qspi_memcpy+0xe>
	}
}
    5db0:	bf00      	nop
    5db2:	3714      	adds	r7, #20
    5db4:	46bd      	mov	sp, r7
    5db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dba:	4770      	bx	lr

00005dbc <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b082      	sub	sp, #8
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5dc4:	4903      	ldr	r1, [pc, #12]	; (5dd4 <_qspi_end_transfer+0x18>)
    5dc6:	6878      	ldr	r0, [r7, #4]
    5dc8:	4b03      	ldr	r3, [pc, #12]	; (5dd8 <_qspi_end_transfer+0x1c>)
    5dca:	4798      	blx	r3
}
    5dcc:	bf00      	nop
    5dce:	3708      	adds	r7, #8
    5dd0:	46bd      	mov	sp, r7
    5dd2:	bd80      	pop	{r7, pc}
    5dd4:	01000002 	.word	0x01000002
    5dd8:	00005c79 	.word	0x00005c79

00005ddc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b082      	sub	sp, #8
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
    5de4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	2b00      	cmp	r3, #0
    5dea:	d004      	beq.n	5df6 <_qspi_sync_init+0x1a>
    5dec:	683b      	ldr	r3, [r7, #0]
    5dee:	2b00      	cmp	r3, #0
    5df0:	d001      	beq.n	5df6 <_qspi_sync_init+0x1a>
    5df2:	2301      	movs	r3, #1
    5df4:	e000      	b.n	5df8 <_qspi_sync_init+0x1c>
    5df6:	2300      	movs	r3, #0
    5df8:	f003 0301 	and.w	r3, r3, #1
    5dfc:	b2db      	uxtb	r3, r3
    5dfe:	2240      	movs	r2, #64	; 0x40
    5e00:	490c      	ldr	r1, [pc, #48]	; (5e34 <_qspi_sync_init+0x58>)
    5e02:	4618      	mov	r0, r3
    5e04:	4b0c      	ldr	r3, [pc, #48]	; (5e38 <_qspi_sync_init+0x5c>)
    5e06:	4798      	blx	r3
	dev->prvt = hw;
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	683a      	ldr	r2, [r7, #0]
    5e0c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5e0e:	687b      	ldr	r3, [r7, #4]
    5e10:	681b      	ldr	r3, [r3, #0]
    5e12:	2101      	movs	r1, #1
    5e14:	4618      	mov	r0, r3
    5e16:	4b09      	ldr	r3, [pc, #36]	; (5e3c <_qspi_sync_init+0x60>)
    5e18:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5e1a:	4909      	ldr	r1, [pc, #36]	; (5e40 <_qspi_sync_init+0x64>)
    5e1c:	6838      	ldr	r0, [r7, #0]
    5e1e:	4b09      	ldr	r3, [pc, #36]	; (5e44 <_qspi_sync_init+0x68>)
    5e20:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5e22:	4909      	ldr	r1, [pc, #36]	; (5e48 <_qspi_sync_init+0x6c>)
    5e24:	6838      	ldr	r0, [r7, #0]
    5e26:	4b09      	ldr	r3, [pc, #36]	; (5e4c <_qspi_sync_init+0x70>)
    5e28:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5e2a:	2300      	movs	r3, #0
}
    5e2c:	4618      	mov	r0, r3
    5e2e:	3708      	adds	r7, #8
    5e30:	46bd      	mov	sp, r7
    5e32:	bd80      	pop	{r7, pc}
    5e34:	000132f0 	.word	0x000132f0
    5e38:	00003df5 	.word	0x00003df5
    5e3c:	00005c79 	.word	0x00005c79
    5e40:	06000011 	.word	0x06000011
    5e44:	00005c95 	.word	0x00005c95
    5e48:	00241300 	.word	0x00241300
    5e4c:	00005cb1 	.word	0x00005cb1

00005e50 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5e50:	b580      	push	{r7, lr}
    5e52:	b082      	sub	sp, #8
    5e54:	af00      	add	r7, sp, #0
    5e56:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	681b      	ldr	r3, [r3, #0]
    5e5c:	2102      	movs	r1, #2
    5e5e:	4618      	mov	r0, r3
    5e60:	4b03      	ldr	r3, [pc, #12]	; (5e70 <_qspi_sync_enable+0x20>)
    5e62:	4798      	blx	r3
	return ERR_NONE;
    5e64:	2300      	movs	r3, #0
}
    5e66:	4618      	mov	r0, r3
    5e68:	3708      	adds	r7, #8
    5e6a:	46bd      	mov	sp, r7
    5e6c:	bd80      	pop	{r7, pc}
    5e6e:	bf00      	nop
    5e70:	00005c79 	.word	0x00005c79

00005e74 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5e74:	b580      	push	{r7, lr}
    5e76:	b082      	sub	sp, #8
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	681b      	ldr	r3, [r3, #0]
    5e80:	2100      	movs	r1, #0
    5e82:	4618      	mov	r0, r3
    5e84:	4b03      	ldr	r3, [pc, #12]	; (5e94 <_qspi_sync_disable+0x20>)
    5e86:	4798      	blx	r3
	return ERR_NONE;
    5e88:	2300      	movs	r3, #0
}
    5e8a:	4618      	mov	r0, r3
    5e8c:	3708      	adds	r7, #8
    5e8e:	46bd      	mov	sp, r7
    5e90:	bd80      	pop	{r7, pc}
    5e92:	bf00      	nop
    5e94:	00005c79 	.word	0x00005c79

00005e98 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5e98:	b580      	push	{r7, lr}
    5e9a:	b084      	sub	sp, #16
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
    5ea0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	681b      	ldr	r3, [r3, #0]
    5ea6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5ea8:	683b      	ldr	r3, [r7, #0]
    5eaa:	781b      	ldrb	r3, [r3, #0]
    5eac:	f003 0320 	and.w	r3, r3, #32
    5eb0:	b2db      	uxtb	r3, r3
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d005      	beq.n	5ec2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5eb6:	683b      	ldr	r3, [r7, #0]
    5eb8:	689b      	ldr	r3, [r3, #8]
    5eba:	4619      	mov	r1, r3
    5ebc:	68f8      	ldr	r0, [r7, #12]
    5ebe:	4b13      	ldr	r3, [pc, #76]	; (5f0c <_qspi_sync_command_set_ifr+0x74>)
    5ec0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5ec2:	683b      	ldr	r3, [r7, #0]
    5ec4:	781b      	ldrb	r3, [r3, #0]
    5ec6:	f003 0310 	and.w	r3, r3, #16
    5eca:	b2db      	uxtb	r3, r3
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d005      	beq.n	5edc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5ed0:	683b      	ldr	r3, [r7, #0]
    5ed2:	791b      	ldrb	r3, [r3, #4]
    5ed4:	4619      	mov	r1, r3
    5ed6:	68f8      	ldr	r0, [r7, #12]
    5ed8:	4b0d      	ldr	r3, [pc, #52]	; (5f10 <_qspi_sync_command_set_ifr+0x78>)
    5eda:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5edc:	683b      	ldr	r3, [r7, #0]
    5ede:	781b      	ldrb	r3, [r3, #0]
    5ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5ee4:	b2db      	uxtb	r3, r3
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	d005      	beq.n	5ef6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5eea:	683b      	ldr	r3, [r7, #0]
    5eec:	795b      	ldrb	r3, [r3, #5]
    5eee:	4619      	mov	r1, r3
    5ef0:	68f8      	ldr	r0, [r7, #12]
    5ef2:	4b08      	ldr	r3, [pc, #32]	; (5f14 <_qspi_sync_command_set_ifr+0x7c>)
    5ef4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5ef6:	683b      	ldr	r3, [r7, #0]
    5ef8:	681b      	ldr	r3, [r3, #0]
    5efa:	4619      	mov	r1, r3
    5efc:	68f8      	ldr	r0, [r7, #12]
    5efe:	4b06      	ldr	r3, [pc, #24]	; (5f18 <_qspi_sync_command_set_ifr+0x80>)
    5f00:	4798      	blx	r3
}
    5f02:	bf00      	nop
    5f04:	3710      	adds	r7, #16
    5f06:	46bd      	mov	sp, r7
    5f08:	bd80      	pop	{r7, pc}
    5f0a:	bf00      	nop
    5f0c:	00005ccd 	.word	0x00005ccd
    5f10:	00005ce9 	.word	0x00005ce9
    5f14:	00005d1d 	.word	0x00005d1d
    5f18:	00005d55 	.word	0x00005d55

00005f1c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5f1c:	b580      	push	{r7, lr}
    5f1e:	b084      	sub	sp, #16
    5f20:	af00      	add	r7, sp, #0
    5f22:	6078      	str	r0, [r7, #4]
    5f24:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	681b      	ldr	r3, [r3, #0]
    5f2a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5f2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5f30:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5f32:	683b      	ldr	r3, [r7, #0]
    5f34:	781b      	ldrb	r3, [r3, #0]
    5f36:	f003 0320 	and.w	r3, r3, #32
    5f3a:	b2db      	uxtb	r3, r3
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d004      	beq.n	5f4a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5f40:	683b      	ldr	r3, [r7, #0]
    5f42:	689b      	ldr	r3, [r3, #8]
    5f44:	68fa      	ldr	r2, [r7, #12]
    5f46:	4413      	add	r3, r2
    5f48:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5f4a:	68b8      	ldr	r0, [r7, #8]
    5f4c:	4b18      	ldr	r3, [pc, #96]	; (5fb0 <_qspi_sync_run_transfer+0x94>)
    5f4e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5f50:	683b      	ldr	r3, [r7, #0]
    5f52:	691b      	ldr	r3, [r3, #16]
    5f54:	2b00      	cmp	r3, #0
    5f56:	d103      	bne.n	5f60 <_qspi_sync_run_transfer+0x44>
    5f58:	683b      	ldr	r3, [r7, #0]
    5f5a:	695b      	ldr	r3, [r3, #20]
    5f5c:	2b00      	cmp	r3, #0
    5f5e:	d001      	beq.n	5f64 <_qspi_sync_run_transfer+0x48>
    5f60:	2301      	movs	r3, #1
    5f62:	e000      	b.n	5f66 <_qspi_sync_run_transfer+0x4a>
    5f64:	2300      	movs	r3, #0
    5f66:	f003 0301 	and.w	r3, r3, #1
    5f6a:	b2db      	uxtb	r3, r3
    5f6c:	2282      	movs	r2, #130	; 0x82
    5f6e:	4911      	ldr	r1, [pc, #68]	; (5fb4 <_qspi_sync_run_transfer+0x98>)
    5f70:	4618      	mov	r0, r3
    5f72:	4b11      	ldr	r3, [pc, #68]	; (5fb8 <_qspi_sync_run_transfer+0x9c>)
    5f74:	4798      	blx	r3

	if (cmd->tx_buf) {
    5f76:	683b      	ldr	r3, [r7, #0]
    5f78:	691b      	ldr	r3, [r3, #16]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d008      	beq.n	5f90 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5f7e:	683b      	ldr	r3, [r7, #0]
    5f80:	6919      	ldr	r1, [r3, #16]
    5f82:	683b      	ldr	r3, [r7, #0]
    5f84:	68db      	ldr	r3, [r3, #12]
    5f86:	461a      	mov	r2, r3
    5f88:	68f8      	ldr	r0, [r7, #12]
    5f8a:	4b0c      	ldr	r3, [pc, #48]	; (5fbc <_qspi_sync_run_transfer+0xa0>)
    5f8c:	4798      	blx	r3
    5f8e:	e007      	b.n	5fa0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5f90:	683b      	ldr	r3, [r7, #0]
    5f92:	6958      	ldr	r0, [r3, #20]
    5f94:	683b      	ldr	r3, [r7, #0]
    5f96:	68db      	ldr	r3, [r3, #12]
    5f98:	461a      	mov	r2, r3
    5f9a:	68f9      	ldr	r1, [r7, #12]
    5f9c:	4b07      	ldr	r3, [pc, #28]	; (5fbc <_qspi_sync_run_transfer+0xa0>)
    5f9e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5fa4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5fa8:	bf00      	nop
    5faa:	3710      	adds	r7, #16
    5fac:	46bd      	mov	sp, r7
    5fae:	bd80      	pop	{r7, pc}
    5fb0:	00005d71 	.word	0x00005d71
    5fb4:	000132f0 	.word	0x000132f0
    5fb8:	00003df5 	.word	0x00003df5
    5fbc:	00005d89 	.word	0x00005d89

00005fc0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
    5fc8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5fca:	6839      	ldr	r1, [r7, #0]
    5fcc:	6878      	ldr	r0, [r7, #4]
    5fce:	4b14      	ldr	r3, [pc, #80]	; (6020 <_qspi_sync_serial_run_command+0x60>)
    5fd0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5fd2:	683b      	ldr	r3, [r7, #0]
    5fd4:	781b      	ldrb	r3, [r3, #0]
    5fd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5fda:	b2db      	uxtb	r3, r3
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d003      	beq.n	5fe8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5fe0:	6839      	ldr	r1, [r7, #0]
    5fe2:	6878      	ldr	r0, [r7, #4]
    5fe4:	4b0f      	ldr	r3, [pc, #60]	; (6024 <_qspi_sync_serial_run_command+0x64>)
    5fe6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	681b      	ldr	r3, [r3, #0]
    5fec:	4618      	mov	r0, r3
    5fee:	4b0e      	ldr	r3, [pc, #56]	; (6028 <_qspi_sync_serial_run_command+0x68>)
    5ff0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5ff2:	bf00      	nop
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	681b      	ldr	r3, [r3, #0]
    5ff8:	4618      	mov	r0, r3
    5ffa:	4b0c      	ldr	r3, [pc, #48]	; (602c <_qspi_sync_serial_run_command+0x6c>)
    5ffc:	4798      	blx	r3
    5ffe:	4603      	mov	r3, r0
    6000:	f083 0301 	eor.w	r3, r3, #1
    6004:	b2db      	uxtb	r3, r3
    6006:	2b00      	cmp	r3, #0
    6008:	d1f4      	bne.n	5ff4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    600a:	687b      	ldr	r3, [r7, #4]
    600c:	681b      	ldr	r3, [r3, #0]
    600e:	4618      	mov	r0, r3
    6010:	4b07      	ldr	r3, [pc, #28]	; (6030 <_qspi_sync_serial_run_command+0x70>)
    6012:	4798      	blx	r3
	return ERR_NONE;
    6014:	2300      	movs	r3, #0
}
    6016:	4618      	mov	r0, r3
    6018:	3708      	adds	r7, #8
    601a:	46bd      	mov	sp, r7
    601c:	bd80      	pop	{r7, pc}
    601e:	bf00      	nop
    6020:	00005e99 	.word	0x00005e99
    6024:	00005f1d 	.word	0x00005f1d
    6028:	00005dbd 	.word	0x00005dbd
    602c:	00005c35 	.word	0x00005c35
    6030:	00005c5d 	.word	0x00005c5d

00006034 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6034:	b480      	push	{r7}
    6036:	b083      	sub	sp, #12
    6038:	af00      	add	r7, sp, #0
    603a:	6078      	str	r0, [r7, #4]
    603c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    603e:	bf00      	nop
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	691a      	ldr	r2, [r3, #16]
    6044:	683b      	ldr	r3, [r7, #0]
    6046:	4013      	ands	r3, r2
    6048:	2b00      	cmp	r3, #0
    604a:	d1f9      	bne.n	6040 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    604c:	bf00      	nop
    604e:	370c      	adds	r7, #12
    6050:	46bd      	mov	sp, r7
    6052:	f85d 7b04 	ldr.w	r7, [sp], #4
    6056:	4770      	bx	lr

00006058 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6058:	b480      	push	{r7}
    605a:	b083      	sub	sp, #12
    605c:	af00      	add	r7, sp, #0
    605e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	f44f 7280 	mov.w	r2, #256	; 0x100
    6066:	819a      	strh	r2, [r3, #12]
}
    6068:	bf00      	nop
    606a:	370c      	adds	r7, #12
    606c:	46bd      	mov	sp, r7
    606e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6072:	4770      	bx	lr

00006074 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    6074:	b480      	push	{r7}
    6076:	b083      	sub	sp, #12
    6078:	af00      	add	r7, sp, #0
    607a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6082:	819a      	strh	r2, [r3, #12]
}
    6084:	bf00      	nop
    6086:	370c      	adds	r7, #12
    6088:	46bd      	mov	sp, r7
    608a:	f85d 7b04 	ldr.w	r7, [sp], #4
    608e:	4770      	bx	lr

00006090 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6090:	b480      	push	{r7}
    6092:	b083      	sub	sp, #12
    6094:	af00      	add	r7, sp, #0
    6096:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	899b      	ldrh	r3, [r3, #12]
    609c:	b29b      	uxth	r3, r3
}
    609e:	4618      	mov	r0, r3
    60a0:	370c      	adds	r7, #12
    60a2:	46bd      	mov	sp, r7
    60a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    60a8:	4770      	bx	lr

000060aa <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    60aa:	b480      	push	{r7}
    60ac:	b083      	sub	sp, #12
    60ae:	af00      	add	r7, sp, #0
    60b0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	895b      	ldrh	r3, [r3, #10]
    60b6:	b29b      	uxth	r3, r3
}
    60b8:	4618      	mov	r0, r3
    60ba:	370c      	adds	r7, #12
    60bc:	46bd      	mov	sp, r7
    60be:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c2:	4770      	bx	lr

000060c4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    60c4:	b580      	push	{r7, lr}
    60c6:	b082      	sub	sp, #8
    60c8:	af00      	add	r7, sp, #0
    60ca:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	881b      	ldrh	r3, [r3, #0]
    60d0:	b29b      	uxth	r3, r3
    60d2:	f043 0301 	orr.w	r3, r3, #1
    60d6:	b29a      	uxth	r2, r3
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    60dc:	2101      	movs	r1, #1
    60de:	6878      	ldr	r0, [r7, #4]
    60e0:	4b02      	ldr	r3, [pc, #8]	; (60ec <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    60e2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    60e4:	bf00      	nop
    60e6:	3708      	adds	r7, #8
    60e8:	46bd      	mov	sp, r7
    60ea:	bd80      	pop	{r7, pc}
    60ec:	00006035 	.word	0x00006035

000060f0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    60f0:	b580      	push	{r7, lr}
    60f2:	b084      	sub	sp, #16
    60f4:	af00      	add	r7, sp, #0
    60f6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    60f8:	f248 0103 	movw	r1, #32771	; 0x8003
    60fc:	6878      	ldr	r0, [r7, #4]
    60fe:	4b0a      	ldr	r3, [pc, #40]	; (6128 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6100:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	881b      	ldrh	r3, [r3, #0]
    6106:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6108:	89fb      	ldrh	r3, [r7, #14]
    610a:	085b      	lsrs	r3, r3, #1
    610c:	b29b      	uxth	r3, r3
    610e:	f003 0301 	and.w	r3, r3, #1
    6112:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    6114:	89fb      	ldrh	r3, [r7, #14]
    6116:	2b00      	cmp	r3, #0
    6118:	bf14      	ite	ne
    611a:	2301      	movne	r3, #1
    611c:	2300      	moveq	r3, #0
    611e:	b2db      	uxtb	r3, r3
}
    6120:	4618      	mov	r0, r3
    6122:	3710      	adds	r7, #16
    6124:	46bd      	mov	sp, r7
    6126:	bd80      	pop	{r7, pc}
    6128:	00006035 	.word	0x00006035

0000612c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    612c:	b580      	push	{r7, lr}
    612e:	b082      	sub	sp, #8
    6130:	af00      	add	r7, sp, #0
    6132:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	881b      	ldrh	r3, [r3, #0]
    6138:	b29b      	uxth	r3, r3
    613a:	f023 0302 	bic.w	r3, r3, #2
    613e:	b29a      	uxth	r2, r3
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6144:	f248 0103 	movw	r1, #32771	; 0x8003
    6148:	6878      	ldr	r0, [r7, #4]
    614a:	4b03      	ldr	r3, [pc, #12]	; (6158 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    614c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    614e:	bf00      	nop
    6150:	3708      	adds	r7, #8
    6152:	46bd      	mov	sp, r7
    6154:	bd80      	pop	{r7, pc}
    6156:	bf00      	nop
    6158:	00006035 	.word	0x00006035

0000615c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    615c:	b580      	push	{r7, lr}
    615e:	b082      	sub	sp, #8
    6160:	af00      	add	r7, sp, #0
    6162:	6078      	str	r0, [r7, #4]
    6164:	460b      	mov	r3, r1
    6166:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	887a      	ldrh	r2, [r7, #2]
    616c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    616e:	f248 0103 	movw	r1, #32771	; 0x8003
    6172:	6878      	ldr	r0, [r7, #4]
    6174:	4b02      	ldr	r3, [pc, #8]	; (6180 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    6176:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6178:	bf00      	nop
    617a:	3708      	adds	r7, #8
    617c:	46bd      	mov	sp, r7
    617e:	bd80      	pop	{r7, pc}
    6180:	00006035 	.word	0x00006035

00006184 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    6184:	b480      	push	{r7}
    6186:	b083      	sub	sp, #12
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
    618c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    618e:	687b      	ldr	r3, [r7, #4]
    6190:	683a      	ldr	r2, [r7, #0]
    6192:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    6194:	bf00      	nop
    6196:	370c      	adds	r7, #12
    6198:	46bd      	mov	sp, r7
    619a:	f85d 7b04 	ldr.w	r7, [sp], #4
    619e:	4770      	bx	lr

000061a0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    61a0:	b580      	push	{r7, lr}
    61a2:	b082      	sub	sp, #8
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	2b00      	cmp	r3, #0
    61ac:	d005      	beq.n	61ba <_calendar_init+0x1a>
    61ae:	687b      	ldr	r3, [r7, #4]
    61b0:	681b      	ldr	r3, [r3, #0]
    61b2:	2b00      	cmp	r3, #0
    61b4:	d001      	beq.n	61ba <_calendar_init+0x1a>
    61b6:	2301      	movs	r3, #1
    61b8:	e000      	b.n	61bc <_calendar_init+0x1c>
    61ba:	2300      	movs	r3, #0
    61bc:	f003 0301 	and.w	r3, r3, #1
    61c0:	b2db      	uxtb	r3, r3
    61c2:	222f      	movs	r2, #47	; 0x2f
    61c4:	491b      	ldr	r1, [pc, #108]	; (6234 <_calendar_init+0x94>)
    61c6:	4618      	mov	r0, r3
    61c8:	4b1b      	ldr	r3, [pc, #108]	; (6238 <_calendar_init+0x98>)
    61ca:	4798      	blx	r3

	_rtc_dev = dev;
    61cc:	4a1b      	ldr	r2, [pc, #108]	; (623c <_calendar_init+0x9c>)
    61ce:	687b      	ldr	r3, [r7, #4]
    61d0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    61d2:	687b      	ldr	r3, [r7, #4]
    61d4:	681b      	ldr	r3, [r3, #0]
    61d6:	4618      	mov	r0, r3
    61d8:	4b19      	ldr	r3, [pc, #100]	; (6240 <_calendar_init+0xa0>)
    61da:	4798      	blx	r3
    61dc:	4603      	mov	r3, r0
    61de:	2b00      	cmp	r3, #0
    61e0:	d00a      	beq.n	61f8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	681b      	ldr	r3, [r3, #0]
    61e6:	4618      	mov	r0, r3
    61e8:	4b16      	ldr	r3, [pc, #88]	; (6244 <_calendar_init+0xa4>)
    61ea:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    61ec:	687b      	ldr	r3, [r7, #4]
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	2102      	movs	r1, #2
    61f2:	4618      	mov	r0, r3
    61f4:	4b14      	ldr	r3, [pc, #80]	; (6248 <_calendar_init+0xa8>)
    61f6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	4618      	mov	r0, r3
    61fe:	4b13      	ldr	r3, [pc, #76]	; (624c <_calendar_init+0xac>)
    6200:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6202:	687b      	ldr	r3, [r7, #4]
    6204:	681b      	ldr	r3, [r3, #0]
    6206:	2101      	movs	r1, #1
    6208:	4618      	mov	r0, r3
    620a:	4b0f      	ldr	r3, [pc, #60]	; (6248 <_calendar_init+0xa8>)
    620c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    620e:	687b      	ldr	r3, [r7, #4]
    6210:	681b      	ldr	r3, [r3, #0]
    6212:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    6216:	4618      	mov	r0, r3
    6218:	4b0d      	ldr	r3, [pc, #52]	; (6250 <_calendar_init+0xb0>)
    621a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6220:	2100      	movs	r1, #0
    6222:	4618      	mov	r0, r3
    6224:	4b0b      	ldr	r3, [pc, #44]	; (6254 <_calendar_init+0xb4>)
    6226:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6228:	2300      	movs	r3, #0
}
    622a:	4618      	mov	r0, r3
    622c:	3708      	adds	r7, #8
    622e:	46bd      	mov	sp, r7
    6230:	bd80      	pop	{r7, pc}
    6232:	bf00      	nop
    6234:	00013308 	.word	0x00013308
    6238:	00003df5 	.word	0x00003df5
    623c:	20000930 	.word	0x20000930
    6240:	000060f1 	.word	0x000060f1
    6244:	0000612d 	.word	0x0000612d
    6248:	00006035 	.word	0x00006035
    624c:	000060c5 	.word	0x000060c5
    6250:	0000615d 	.word	0x0000615d
    6254:	00006185 	.word	0x00006185

00006258 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6258:	b580      	push	{r7, lr}
    625a:	b084      	sub	sp, #16
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	681b      	ldr	r3, [r3, #0]
    6264:	4618      	mov	r0, r3
    6266:	4b19      	ldr	r3, [pc, #100]	; (62cc <_rtc_interrupt_handler+0x74>)
    6268:	4798      	blx	r3
    626a:	4603      	mov	r3, r0
    626c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    626e:	687b      	ldr	r3, [r7, #4]
    6270:	681b      	ldr	r3, [r3, #0]
    6272:	4618      	mov	r0, r3
    6274:	4b16      	ldr	r3, [pc, #88]	; (62d0 <_rtc_interrupt_handler+0x78>)
    6276:	4798      	blx	r3
    6278:	4603      	mov	r3, r0
    627a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    627c:	89fa      	ldrh	r2, [r7, #14]
    627e:	89bb      	ldrh	r3, [r7, #12]
    6280:	4013      	ands	r3, r2
    6282:	b29b      	uxth	r3, r3
    6284:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6288:	2b00      	cmp	r3, #0
    628a:	d009      	beq.n	62a0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    628c:	687b      	ldr	r3, [r7, #4]
    628e:	685b      	ldr	r3, [r3, #4]
    6290:	6878      	ldr	r0, [r7, #4]
    6292:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	681b      	ldr	r3, [r3, #0]
    6298:	4618      	mov	r0, r3
    629a:	4b0e      	ldr	r3, [pc, #56]	; (62d4 <_rtc_interrupt_handler+0x7c>)
    629c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    629e:	e010      	b.n	62c2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    62a0:	89fa      	ldrh	r2, [r7, #14]
    62a2:	89bb      	ldrh	r3, [r7, #12]
    62a4:	4013      	ands	r3, r2
    62a6:	b29b      	uxth	r3, r3
    62a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    62ac:	2b00      	cmp	r3, #0
    62ae:	d008      	beq.n	62c2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	689b      	ldr	r3, [r3, #8]
    62b4:	6878      	ldr	r0, [r7, #4]
    62b6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	681b      	ldr	r3, [r3, #0]
    62bc:	4618      	mov	r0, r3
    62be:	4b06      	ldr	r3, [pc, #24]	; (62d8 <_rtc_interrupt_handler+0x80>)
    62c0:	4798      	blx	r3
}
    62c2:	bf00      	nop
    62c4:	3710      	adds	r7, #16
    62c6:	46bd      	mov	sp, r7
    62c8:	bd80      	pop	{r7, pc}
    62ca:	bf00      	nop
    62cc:	00006091 	.word	0x00006091
    62d0:	000060ab 	.word	0x000060ab
    62d4:	00006059 	.word	0x00006059
    62d8:	00006075 	.word	0x00006075

000062dc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    62dc:	b580      	push	{r7, lr}
    62de:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    62e0:	4b03      	ldr	r3, [pc, #12]	; (62f0 <RTC_Handler+0x14>)
    62e2:	681b      	ldr	r3, [r3, #0]
    62e4:	4618      	mov	r0, r3
    62e6:	4b03      	ldr	r3, [pc, #12]	; (62f4 <RTC_Handler+0x18>)
    62e8:	4798      	blx	r3
}
    62ea:	bf00      	nop
    62ec:	bd80      	pop	{r7, pc}
    62ee:	bf00      	nop
    62f0:	20000930 	.word	0x20000930
    62f4:	00006259 	.word	0x00006259

000062f8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    62f8:	b480      	push	{r7}
    62fa:	b083      	sub	sp, #12
    62fc:	af00      	add	r7, sp, #0
    62fe:	6078      	str	r0, [r7, #4]
    6300:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6302:	bf00      	nop
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	69da      	ldr	r2, [r3, #28]
    6308:	683b      	ldr	r3, [r7, #0]
    630a:	4013      	ands	r3, r2
    630c:	2b00      	cmp	r3, #0
    630e:	d1f9      	bne.n	6304 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6310:	bf00      	nop
    6312:	370c      	adds	r7, #12
    6314:	46bd      	mov	sp, r7
    6316:	f85d 7b04 	ldr.w	r7, [sp], #4
    631a:	4770      	bx	lr

0000631c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    631c:	b480      	push	{r7}
    631e:	b083      	sub	sp, #12
    6320:	af00      	add	r7, sp, #0
    6322:	6078      	str	r0, [r7, #4]
    6324:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	69da      	ldr	r2, [r3, #28]
    632a:	683b      	ldr	r3, [r7, #0]
    632c:	4013      	ands	r3, r2
    632e:	2b00      	cmp	r3, #0
    6330:	bf14      	ite	ne
    6332:	2301      	movne	r3, #1
    6334:	2300      	moveq	r3, #0
    6336:	b2db      	uxtb	r3, r3
}
    6338:	4618      	mov	r0, r3
    633a:	370c      	adds	r7, #12
    633c:	46bd      	mov	sp, r7
    633e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6342:	4770      	bx	lr

00006344 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6344:	b480      	push	{r7}
    6346:	b083      	sub	sp, #12
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
    634c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    634e:	bf00      	nop
    6350:	687b      	ldr	r3, [r7, #4]
    6352:	69da      	ldr	r2, [r3, #28]
    6354:	683b      	ldr	r3, [r7, #0]
    6356:	4013      	ands	r3, r2
    6358:	2b00      	cmp	r3, #0
    635a:	d1f9      	bne.n	6350 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    635c:	bf00      	nop
    635e:	370c      	adds	r7, #12
    6360:	46bd      	mov	sp, r7
    6362:	f85d 7b04 	ldr.w	r7, [sp], #4
    6366:	4770      	bx	lr

00006368 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6368:	b480      	push	{r7}
    636a:	b083      	sub	sp, #12
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
    6370:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6372:	687b      	ldr	r3, [r7, #4]
    6374:	69da      	ldr	r2, [r3, #28]
    6376:	683b      	ldr	r3, [r7, #0]
    6378:	4013      	ands	r3, r2
    637a:	2b00      	cmp	r3, #0
    637c:	bf14      	ite	ne
    637e:	2301      	movne	r3, #1
    6380:	2300      	moveq	r3, #0
    6382:	b2db      	uxtb	r3, r3
}
    6384:	4618      	mov	r0, r3
    6386:	370c      	adds	r7, #12
    6388:	46bd      	mov	sp, r7
    638a:	f85d 7b04 	ldr.w	r7, [sp], #4
    638e:	4770      	bx	lr

00006390 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    6390:	b480      	push	{r7}
    6392:	b083      	sub	sp, #12
    6394:	af00      	add	r7, sp, #0
    6396:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6398:	687b      	ldr	r3, [r7, #4]
    639a:	2201      	movs	r2, #1
    639c:	761a      	strb	r2, [r3, #24]
}
    639e:	bf00      	nop
    63a0:	370c      	adds	r7, #12
    63a2:	46bd      	mov	sp, r7
    63a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a8:	4770      	bx	lr

000063aa <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    63aa:	b480      	push	{r7}
    63ac:	b083      	sub	sp, #12
    63ae:	af00      	add	r7, sp, #0
    63b0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    63b2:	687b      	ldr	r3, [r7, #4]
    63b4:	2202      	movs	r2, #2
    63b6:	761a      	strb	r2, [r3, #24]
}
    63b8:	bf00      	nop
    63ba:	370c      	adds	r7, #12
    63bc:	46bd      	mov	sp, r7
    63be:	f85d 7b04 	ldr.w	r7, [sp], #4
    63c2:	4770      	bx	lr

000063c4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    63c4:	b480      	push	{r7}
    63c6:	b083      	sub	sp, #12
    63c8:	af00      	add	r7, sp, #0
    63ca:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    63cc:	687b      	ldr	r3, [r7, #4]
    63ce:	7e1b      	ldrb	r3, [r3, #24]
    63d0:	b2db      	uxtb	r3, r3
}
    63d2:	4618      	mov	r0, r3
    63d4:	370c      	adds	r7, #12
    63d6:	46bd      	mov	sp, r7
    63d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    63dc:	4770      	bx	lr

000063de <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    63de:	b480      	push	{r7}
    63e0:	b085      	sub	sp, #20
    63e2:	af00      	add	r7, sp, #0
    63e4:	6078      	str	r0, [r7, #4]
    63e6:	460b      	mov	r3, r1
    63e8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	7e1b      	ldrb	r3, [r3, #24]
    63ee:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    63f0:	7bfa      	ldrb	r2, [r7, #15]
    63f2:	78fb      	ldrb	r3, [r7, #3]
    63f4:	4013      	ands	r3, r2
    63f6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    63f8:	7bfb      	ldrb	r3, [r7, #15]
}
    63fa:	4618      	mov	r0, r3
    63fc:	3714      	adds	r7, #20
    63fe:	46bd      	mov	sp, r7
    6400:	f85d 7b04 	ldr.w	r7, [sp], #4
    6404:	4770      	bx	lr

00006406 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6406:	b480      	push	{r7}
    6408:	b083      	sub	sp, #12
    640a:	af00      	add	r7, sp, #0
    640c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	7e1b      	ldrb	r3, [r3, #24]
    6412:	b2db      	uxtb	r3, r3
}
    6414:	4618      	mov	r0, r3
    6416:	370c      	adds	r7, #12
    6418:	46bd      	mov	sp, r7
    641a:	f85d 7b04 	ldr.w	r7, [sp], #4
    641e:	4770      	bx	lr

00006420 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6420:	b480      	push	{r7}
    6422:	b083      	sub	sp, #12
    6424:	af00      	add	r7, sp, #0
    6426:	6078      	str	r0, [r7, #4]
    6428:	460b      	mov	r3, r1
    642a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	78fa      	ldrb	r2, [r7, #3]
    6430:	761a      	strb	r2, [r3, #24]
}
    6432:	bf00      	nop
    6434:	370c      	adds	r7, #12
    6436:	46bd      	mov	sp, r7
    6438:	f85d 7b04 	ldr.w	r7, [sp], #4
    643c:	4770      	bx	lr
	...

00006440 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6440:	b580      	push	{r7, lr}
    6442:	b082      	sub	sp, #8
    6444:	af00      	add	r7, sp, #0
    6446:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6448:	687b      	ldr	r3, [r7, #4]
    644a:	681b      	ldr	r3, [r3, #0]
    644c:	f043 0202 	orr.w	r2, r3, #2
    6450:	687b      	ldr	r3, [r7, #4]
    6452:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6454:	2103      	movs	r1, #3
    6456:	6878      	ldr	r0, [r7, #4]
    6458:	4b02      	ldr	r3, [pc, #8]	; (6464 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    645a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    645c:	bf00      	nop
    645e:	3708      	adds	r7, #8
    6460:	46bd      	mov	sp, r7
    6462:	bd80      	pop	{r7, pc}
    6464:	000062f9 	.word	0x000062f9

00006468 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6468:	b580      	push	{r7, lr}
    646a:	b082      	sub	sp, #8
    646c:	af00      	add	r7, sp, #0
    646e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	681b      	ldr	r3, [r3, #0]
    6474:	f023 0202 	bic.w	r2, r3, #2
    6478:	687b      	ldr	r3, [r7, #4]
    647a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    647c:	2103      	movs	r1, #3
    647e:	6878      	ldr	r0, [r7, #4]
    6480:	4b02      	ldr	r3, [pc, #8]	; (648c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6482:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6484:	bf00      	nop
    6486:	3708      	adds	r7, #8
    6488:	46bd      	mov	sp, r7
    648a:	bd80      	pop	{r7, pc}
    648c:	000062f9 	.word	0x000062f9

00006490 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6490:	b480      	push	{r7}
    6492:	b085      	sub	sp, #20
    6494:	af00      	add	r7, sp, #0
    6496:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6498:	687b      	ldr	r3, [r7, #4]
    649a:	681b      	ldr	r3, [r3, #0]
    649c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    649e:	68fb      	ldr	r3, [r7, #12]
    64a0:	0edb      	lsrs	r3, r3, #27
    64a2:	f003 0301 	and.w	r3, r3, #1
    64a6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    64a8:	68fb      	ldr	r3, [r7, #12]
    64aa:	2b00      	cmp	r3, #0
    64ac:	bf14      	ite	ne
    64ae:	2301      	movne	r3, #1
    64b0:	2300      	moveq	r3, #0
    64b2:	b2db      	uxtb	r3, r3
}
    64b4:	4618      	mov	r0, r3
    64b6:	3714      	adds	r7, #20
    64b8:	46bd      	mov	sp, r7
    64ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    64be:	4770      	bx	lr

000064c0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b084      	sub	sp, #16
    64c4:	af00      	add	r7, sp, #0
    64c6:	6078      	str	r0, [r7, #4]
    64c8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    64ca:	2103      	movs	r1, #3
    64cc:	6878      	ldr	r0, [r7, #4]
    64ce:	4b07      	ldr	r3, [pc, #28]	; (64ec <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    64d0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    64d2:	687b      	ldr	r3, [r7, #4]
    64d4:	681b      	ldr	r3, [r3, #0]
    64d6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    64d8:	68fa      	ldr	r2, [r7, #12]
    64da:	683b      	ldr	r3, [r7, #0]
    64dc:	4013      	ands	r3, r2
    64de:	60fb      	str	r3, [r7, #12]
	return tmp;
    64e0:	68fb      	ldr	r3, [r7, #12]
}
    64e2:	4618      	mov	r0, r3
    64e4:	3710      	adds	r7, #16
    64e6:	46bd      	mov	sp, r7
    64e8:	bd80      	pop	{r7, pc}
    64ea:	bf00      	nop
    64ec:	000062f9 	.word	0x000062f9

000064f0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    64f0:	b580      	push	{r7, lr}
    64f2:	b082      	sub	sp, #8
    64f4:	af00      	add	r7, sp, #0
    64f6:	6078      	str	r0, [r7, #4]
    64f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	683a      	ldr	r2, [r7, #0]
    64fe:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6500:	2103      	movs	r1, #3
    6502:	6878      	ldr	r0, [r7, #4]
    6504:	4b02      	ldr	r3, [pc, #8]	; (6510 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6506:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6508:	bf00      	nop
    650a:	3708      	adds	r7, #8
    650c:	46bd      	mov	sp, r7
    650e:	bd80      	pop	{r7, pc}
    6510:	000062f9 	.word	0x000062f9

00006514 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6514:	b580      	push	{r7, lr}
    6516:	b082      	sub	sp, #8
    6518:	af00      	add	r7, sp, #0
    651a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	681b      	ldr	r3, [r3, #0]
    6520:	f043 0202 	orr.w	r2, r3, #2
    6524:	687b      	ldr	r3, [r7, #4]
    6526:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6528:	2103      	movs	r1, #3
    652a:	6878      	ldr	r0, [r7, #4]
    652c:	4b02      	ldr	r3, [pc, #8]	; (6538 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    652e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6530:	bf00      	nop
    6532:	3708      	adds	r7, #8
    6534:	46bd      	mov	sp, r7
    6536:	bd80      	pop	{r7, pc}
    6538:	00006345 	.word	0x00006345

0000653c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    653c:	b580      	push	{r7, lr}
    653e:	b084      	sub	sp, #16
    6540:	af00      	add	r7, sp, #0
    6542:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6544:	2103      	movs	r1, #3
    6546:	6878      	ldr	r0, [r7, #4]
    6548:	4b09      	ldr	r3, [pc, #36]	; (6570 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    654a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    654c:	687b      	ldr	r3, [r7, #4]
    654e:	681b      	ldr	r3, [r3, #0]
    6550:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6552:	68fb      	ldr	r3, [r7, #12]
    6554:	085b      	lsrs	r3, r3, #1
    6556:	f003 0301 	and.w	r3, r3, #1
    655a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    655c:	68fb      	ldr	r3, [r7, #12]
    655e:	2b00      	cmp	r3, #0
    6560:	bf14      	ite	ne
    6562:	2301      	movne	r3, #1
    6564:	2300      	moveq	r3, #0
    6566:	b2db      	uxtb	r3, r3
}
    6568:	4618      	mov	r0, r3
    656a:	3710      	adds	r7, #16
    656c:	46bd      	mov	sp, r7
    656e:	bd80      	pop	{r7, pc}
    6570:	00006345 	.word	0x00006345

00006574 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6574:	b580      	push	{r7, lr}
    6576:	b082      	sub	sp, #8
    6578:	af00      	add	r7, sp, #0
    657a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	681b      	ldr	r3, [r3, #0]
    6580:	f023 0202 	bic.w	r2, r3, #2
    6584:	687b      	ldr	r3, [r7, #4]
    6586:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6588:	2103      	movs	r1, #3
    658a:	6878      	ldr	r0, [r7, #4]
    658c:	4b02      	ldr	r3, [pc, #8]	; (6598 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    658e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6590:	bf00      	nop
    6592:	3708      	adds	r7, #8
    6594:	46bd      	mov	sp, r7
    6596:	bd80      	pop	{r7, pc}
    6598:	00006345 	.word	0x00006345

0000659c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    659c:	b580      	push	{r7, lr}
    659e:	b084      	sub	sp, #16
    65a0:	af00      	add	r7, sp, #0
    65a2:	6078      	str	r0, [r7, #4]
    65a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    65a6:	2103      	movs	r1, #3
    65a8:	6878      	ldr	r0, [r7, #4]
    65aa:	4b07      	ldr	r3, [pc, #28]	; (65c8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    65ac:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    65ae:	687b      	ldr	r3, [r7, #4]
    65b0:	681b      	ldr	r3, [r3, #0]
    65b2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    65b4:	68fa      	ldr	r2, [r7, #12]
    65b6:	683b      	ldr	r3, [r7, #0]
    65b8:	4013      	ands	r3, r2
    65ba:	60fb      	str	r3, [r7, #12]
	return tmp;
    65bc:	68fb      	ldr	r3, [r7, #12]
}
    65be:	4618      	mov	r0, r3
    65c0:	3710      	adds	r7, #16
    65c2:	46bd      	mov	sp, r7
    65c4:	bd80      	pop	{r7, pc}
    65c6:	bf00      	nop
    65c8:	00006345 	.word	0x00006345

000065cc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    65cc:	b580      	push	{r7, lr}
    65ce:	b082      	sub	sp, #8
    65d0:	af00      	add	r7, sp, #0
    65d2:	6078      	str	r0, [r7, #4]
    65d4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    65d6:	687b      	ldr	r3, [r7, #4]
    65d8:	683a      	ldr	r2, [r7, #0]
    65da:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    65dc:	2103      	movs	r1, #3
    65de:	6878      	ldr	r0, [r7, #4]
    65e0:	4b02      	ldr	r3, [pc, #8]	; (65ec <hri_sercomspi_write_CTRLA_reg+0x20>)
    65e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65e4:	bf00      	nop
    65e6:	3708      	adds	r7, #8
    65e8:	46bd      	mov	sp, r7
    65ea:	bd80      	pop	{r7, pc}
    65ec:	00006345 	.word	0x00006345

000065f0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b082      	sub	sp, #8
    65f4:	af00      	add	r7, sp, #0
    65f6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	685b      	ldr	r3, [r3, #4]
    65fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6600:	687b      	ldr	r3, [r7, #4]
    6602:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6604:	2104      	movs	r1, #4
    6606:	6878      	ldr	r0, [r7, #4]
    6608:	4b02      	ldr	r3, [pc, #8]	; (6614 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    660a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    660c:	bf00      	nop
    660e:	3708      	adds	r7, #8
    6610:	46bd      	mov	sp, r7
    6612:	bd80      	pop	{r7, pc}
    6614:	000062f9 	.word	0x000062f9

00006618 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6618:	b580      	push	{r7, lr}
    661a:	b082      	sub	sp, #8
    661c:	af00      	add	r7, sp, #0
    661e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	685b      	ldr	r3, [r3, #4]
    6624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    662c:	2104      	movs	r1, #4
    662e:	6878      	ldr	r0, [r7, #4]
    6630:	4b02      	ldr	r3, [pc, #8]	; (663c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6632:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6634:	bf00      	nop
    6636:	3708      	adds	r7, #8
    6638:	46bd      	mov	sp, r7
    663a:	bd80      	pop	{r7, pc}
    663c:	000062f9 	.word	0x000062f9

00006640 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6640:	b580      	push	{r7, lr}
    6642:	b082      	sub	sp, #8
    6644:	af00      	add	r7, sp, #0
    6646:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	685b      	ldr	r3, [r3, #4]
    664c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6650:	687b      	ldr	r3, [r7, #4]
    6652:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6654:	2104      	movs	r1, #4
    6656:	6878      	ldr	r0, [r7, #4]
    6658:	4b02      	ldr	r3, [pc, #8]	; (6664 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    665a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    665c:	bf00      	nop
    665e:	3708      	adds	r7, #8
    6660:	46bd      	mov	sp, r7
    6662:	bd80      	pop	{r7, pc}
    6664:	000062f9 	.word	0x000062f9

00006668 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6668:	b580      	push	{r7, lr}
    666a:	b082      	sub	sp, #8
    666c:	af00      	add	r7, sp, #0
    666e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	685b      	ldr	r3, [r3, #4]
    6674:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    667c:	2104      	movs	r1, #4
    667e:	6878      	ldr	r0, [r7, #4]
    6680:	4b02      	ldr	r3, [pc, #8]	; (668c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6682:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6684:	bf00      	nop
    6686:	3708      	adds	r7, #8
    6688:	46bd      	mov	sp, r7
    668a:	bd80      	pop	{r7, pc}
    668c:	000062f9 	.word	0x000062f9

00006690 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6690:	b580      	push	{r7, lr}
    6692:	b082      	sub	sp, #8
    6694:	af00      	add	r7, sp, #0
    6696:	6078      	str	r0, [r7, #4]
    6698:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    669a:	687b      	ldr	r3, [r7, #4]
    669c:	685a      	ldr	r2, [r3, #4]
    669e:	683b      	ldr	r3, [r7, #0]
    66a0:	041b      	lsls	r3, r3, #16
    66a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    66a6:	431a      	orrs	r2, r3
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66ac:	2104      	movs	r1, #4
    66ae:	6878      	ldr	r0, [r7, #4]
    66b0:	4b02      	ldr	r3, [pc, #8]	; (66bc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    66b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66b4:	bf00      	nop
    66b6:	3708      	adds	r7, #8
    66b8:	46bd      	mov	sp, r7
    66ba:	bd80      	pop	{r7, pc}
    66bc:	000062f9 	.word	0x000062f9

000066c0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    66c0:	b580      	push	{r7, lr}
    66c2:	b082      	sub	sp, #8
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
    66c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	683a      	ldr	r2, [r7, #0]
    66ce:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66d0:	2104      	movs	r1, #4
    66d2:	6878      	ldr	r0, [r7, #4]
    66d4:	4b02      	ldr	r3, [pc, #8]	; (66e0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    66d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66d8:	bf00      	nop
    66da:	3708      	adds	r7, #8
    66dc:	46bd      	mov	sp, r7
    66de:	bd80      	pop	{r7, pc}
    66e0:	000062f9 	.word	0x000062f9

000066e4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    66e4:	b580      	push	{r7, lr}
    66e6:	b082      	sub	sp, #8
    66e8:	af00      	add	r7, sp, #0
    66ea:	6078      	str	r0, [r7, #4]
    66ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	683a      	ldr	r2, [r7, #0]
    66f2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    66f4:	2117      	movs	r1, #23
    66f6:	6878      	ldr	r0, [r7, #4]
    66f8:	4b02      	ldr	r3, [pc, #8]	; (6704 <hri_sercomspi_write_CTRLB_reg+0x20>)
    66fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66fc:	bf00      	nop
    66fe:	3708      	adds	r7, #8
    6700:	46bd      	mov	sp, r7
    6702:	bd80      	pop	{r7, pc}
    6704:	00006345 	.word	0x00006345

00006708 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6708:	b480      	push	{r7}
    670a:	b083      	sub	sp, #12
    670c:	af00      	add	r7, sp, #0
    670e:	6078      	str	r0, [r7, #4]
    6710:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6712:	687b      	ldr	r3, [r7, #4]
    6714:	683a      	ldr	r2, [r7, #0]
    6716:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6718:	bf00      	nop
    671a:	370c      	adds	r7, #12
    671c:	46bd      	mov	sp, r7
    671e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6722:	4770      	bx	lr

00006724 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6724:	b480      	push	{r7}
    6726:	b083      	sub	sp, #12
    6728:	af00      	add	r7, sp, #0
    672a:	6078      	str	r0, [r7, #4]
    672c:	460b      	mov	r3, r1
    672e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	78fa      	ldrb	r2, [r7, #3]
    6734:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6736:	bf00      	nop
    6738:	370c      	adds	r7, #12
    673a:	46bd      	mov	sp, r7
    673c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6740:	4770      	bx	lr
	...

00006744 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6744:	b580      	push	{r7, lr}
    6746:	b084      	sub	sp, #16
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
    674c:	460b      	mov	r3, r1
    674e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6754:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6756:	68fb      	ldr	r3, [r7, #12]
    6758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    675c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    675e:	78fb      	ldrb	r3, [r7, #3]
    6760:	039b      	lsls	r3, r3, #14
    6762:	461a      	mov	r2, r3
    6764:	68fb      	ldr	r3, [r7, #12]
    6766:	4313      	orrs	r3, r2
    6768:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    676a:	687b      	ldr	r3, [r7, #4]
    676c:	68fa      	ldr	r2, [r7, #12]
    676e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6770:	2104      	movs	r1, #4
    6772:	6878      	ldr	r0, [r7, #4]
    6774:	4b02      	ldr	r3, [pc, #8]	; (6780 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6776:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6778:	bf00      	nop
    677a:	3710      	adds	r7, #16
    677c:	46bd      	mov	sp, r7
    677e:	bd80      	pop	{r7, pc}
    6780:	000062f9 	.word	0x000062f9

00006784 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6784:	b580      	push	{r7, lr}
    6786:	b082      	sub	sp, #8
    6788:	af00      	add	r7, sp, #0
    678a:	6078      	str	r0, [r7, #4]
    678c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	683a      	ldr	r2, [r7, #0]
    6792:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6794:	2104      	movs	r1, #4
    6796:	6878      	ldr	r0, [r7, #4]
    6798:	4b02      	ldr	r3, [pc, #8]	; (67a4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    679a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    679c:	bf00      	nop
    679e:	3708      	adds	r7, #8
    67a0:	46bd      	mov	sp, r7
    67a2:	bd80      	pop	{r7, pc}
    67a4:	000062f9 	.word	0x000062f9

000067a8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    67a8:	b580      	push	{r7, lr}
    67aa:	b082      	sub	sp, #8
    67ac:	af00      	add	r7, sp, #0
    67ae:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67b0:	2104      	movs	r1, #4
    67b2:	6878      	ldr	r0, [r7, #4]
    67b4:	4b03      	ldr	r3, [pc, #12]	; (67c4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    67b6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    67bc:	4618      	mov	r0, r3
    67be:	3708      	adds	r7, #8
    67c0:	46bd      	mov	sp, r7
    67c2:	bd80      	pop	{r7, pc}
    67c4:	000062f9 	.word	0x000062f9

000067c8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    67c8:	b480      	push	{r7}
    67ca:	b083      	sub	sp, #12
    67cc:	af00      	add	r7, sp, #0
    67ce:	6078      	str	r0, [r7, #4]
    67d0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	683a      	ldr	r2, [r7, #0]
    67d6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67d8:	bf00      	nop
    67da:	370c      	adds	r7, #12
    67dc:	46bd      	mov	sp, r7
    67de:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e2:	4770      	bx	lr

000067e4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    67e4:	b580      	push	{r7, lr}
    67e6:	b082      	sub	sp, #8
    67e8:	af00      	add	r7, sp, #0
    67ea:	6078      	str	r0, [r7, #4]
    67ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    67ee:	687b      	ldr	r3, [r7, #4]
    67f0:	683a      	ldr	r2, [r7, #0]
    67f2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67f4:	2104      	movs	r1, #4
    67f6:	6878      	ldr	r0, [r7, #4]
    67f8:	4b02      	ldr	r3, [pc, #8]	; (6804 <hri_sercomi2cm_write_DATA_reg+0x20>)
    67fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67fc:	bf00      	nop
    67fe:	3708      	adds	r7, #8
    6800:	46bd      	mov	sp, r7
    6802:	bd80      	pop	{r7, pc}
    6804:	000062f9 	.word	0x000062f9

00006808 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6808:	b580      	push	{r7, lr}
    680a:	b082      	sub	sp, #8
    680c:	af00      	add	r7, sp, #0
    680e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6810:	2104      	movs	r1, #4
    6812:	6878      	ldr	r0, [r7, #4]
    6814:	4b03      	ldr	r3, [pc, #12]	; (6824 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6816:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6818:	687b      	ldr	r3, [r7, #4]
    681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    681c:	4618      	mov	r0, r3
    681e:	3708      	adds	r7, #8
    6820:	46bd      	mov	sp, r7
    6822:	bd80      	pop	{r7, pc}
    6824:	000062f9 	.word	0x000062f9

00006828 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6828:	b480      	push	{r7}
    682a:	b083      	sub	sp, #12
    682c:	af00      	add	r7, sp, #0
    682e:	6078      	str	r0, [r7, #4]
    6830:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	683a      	ldr	r2, [r7, #0]
    6836:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6838:	bf00      	nop
    683a:	370c      	adds	r7, #12
    683c:	46bd      	mov	sp, r7
    683e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6842:	4770      	bx	lr

00006844 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6844:	b480      	push	{r7}
    6846:	b083      	sub	sp, #12
    6848:	af00      	add	r7, sp, #0
    684a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6850:	4618      	mov	r0, r3
    6852:	370c      	adds	r7, #12
    6854:	46bd      	mov	sp, r7
    6856:	f85d 7b04 	ldr.w	r7, [sp], #4
    685a:	4770      	bx	lr

0000685c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    685c:	b480      	push	{r7}
    685e:	b083      	sub	sp, #12
    6860:	af00      	add	r7, sp, #0
    6862:	6078      	str	r0, [r7, #4]
    6864:	460b      	mov	r3, r1
    6866:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6868:	687b      	ldr	r3, [r7, #4]
    686a:	78fa      	ldrb	r2, [r7, #3]
    686c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6870:	bf00      	nop
    6872:	370c      	adds	r7, #12
    6874:	46bd      	mov	sp, r7
    6876:	f85d 7b04 	ldr.w	r7, [sp], #4
    687a:	4770      	bx	lr

0000687c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    687c:	b480      	push	{r7}
    687e:	b083      	sub	sp, #12
    6880:	af00      	add	r7, sp, #0
    6882:	6078      	str	r0, [r7, #4]
    6884:	460b      	mov	r3, r1
    6886:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	887a      	ldrh	r2, [r7, #2]
    688c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    688e:	bf00      	nop
    6890:	370c      	adds	r7, #12
    6892:	46bd      	mov	sp, r7
    6894:	f85d 7b04 	ldr.w	r7, [sp], #4
    6898:	4770      	bx	lr
	...

0000689c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    689c:	b580      	push	{r7, lr}
    689e:	b082      	sub	sp, #8
    68a0:	af00      	add	r7, sp, #0
    68a2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68a4:	2104      	movs	r1, #4
    68a6:	6878      	ldr	r0, [r7, #4]
    68a8:	4b06      	ldr	r3, [pc, #24]	; (68c4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    68aa:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    68ac:	687b      	ldr	r3, [r7, #4]
    68ae:	8b5b      	ldrh	r3, [r3, #26]
    68b0:	b29b      	uxth	r3, r3
    68b2:	091b      	lsrs	r3, r3, #4
    68b4:	b29b      	uxth	r3, r3
    68b6:	f003 0303 	and.w	r3, r3, #3
    68ba:	b29b      	uxth	r3, r3
}
    68bc:	4618      	mov	r0, r3
    68be:	3708      	adds	r7, #8
    68c0:	46bd      	mov	sp, r7
    68c2:	bd80      	pop	{r7, pc}
    68c4:	000062f9 	.word	0x000062f9

000068c8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    68c8:	b580      	push	{r7, lr}
    68ca:	b082      	sub	sp, #8
    68cc:	af00      	add	r7, sp, #0
    68ce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68d0:	2104      	movs	r1, #4
    68d2:	6878      	ldr	r0, [r7, #4]
    68d4:	4b04      	ldr	r3, [pc, #16]	; (68e8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    68d6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	8b5b      	ldrh	r3, [r3, #26]
    68dc:	b29b      	uxth	r3, r3
}
    68de:	4618      	mov	r0, r3
    68e0:	3708      	adds	r7, #8
    68e2:	46bd      	mov	sp, r7
    68e4:	bd80      	pop	{r7, pc}
    68e6:	bf00      	nop
    68e8:	000062f9 	.word	0x000062f9

000068ec <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    68ec:	b580      	push	{r7, lr}
    68ee:	b082      	sub	sp, #8
    68f0:	af00      	add	r7, sp, #0
    68f2:	6078      	str	r0, [r7, #4]
    68f4:	460b      	mov	r3, r1
    68f6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	887a      	ldrh	r2, [r7, #2]
    68fc:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68fe:	2104      	movs	r1, #4
    6900:	6878      	ldr	r0, [r7, #4]
    6902:	4b03      	ldr	r3, [pc, #12]	; (6910 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6904:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6906:	bf00      	nop
    6908:	3708      	adds	r7, #8
    690a:	46bd      	mov	sp, r7
    690c:	bd80      	pop	{r7, pc}
    690e:	bf00      	nop
    6910:	000062f9 	.word	0x000062f9

00006914 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6914:	b4b0      	push	{r4, r5, r7}
    6916:	b08d      	sub	sp, #52	; 0x34
    6918:	af00      	add	r7, sp, #0
    691a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    691c:	4b13      	ldr	r3, [pc, #76]	; (696c <_sercom_get_hardware_index+0x58>)
    691e:	f107 040c 	add.w	r4, r7, #12
    6922:	461d      	mov	r5, r3
    6924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6928:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    692c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6930:	2300      	movs	r3, #0
    6932:	62fb      	str	r3, [r7, #44]	; 0x2c
    6934:	e010      	b.n	6958 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6938:	009b      	lsls	r3, r3, #2
    693a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    693e:	4413      	add	r3, r2
    6940:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6944:	461a      	mov	r2, r3
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	429a      	cmp	r2, r3
    694a:	d102      	bne.n	6952 <_sercom_get_hardware_index+0x3e>
			return i;
    694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    694e:	b2db      	uxtb	r3, r3
    6950:	e006      	b.n	6960 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6954:	3301      	adds	r3, #1
    6956:	62fb      	str	r3, [r7, #44]	; 0x2c
    6958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    695a:	2b07      	cmp	r3, #7
    695c:	d9eb      	bls.n	6936 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    695e:	2300      	movs	r3, #0
}
    6960:	4618      	mov	r0, r3
    6962:	3734      	adds	r7, #52	; 0x34
    6964:	46bd      	mov	sp, r7
    6966:	bcb0      	pop	{r4, r5, r7}
    6968:	4770      	bx	lr
    696a:	bf00      	nop
    696c:	0001333c 	.word	0x0001333c

00006970 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6970:	b580      	push	{r7, lr}
    6972:	b084      	sub	sp, #16
    6974:	af00      	add	r7, sp, #0
    6976:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6978:	6878      	ldr	r0, [r7, #4]
    697a:	4b13      	ldr	r3, [pc, #76]	; (69c8 <_get_i2cm_index+0x58>)
    697c:	4798      	blx	r3
    697e:	4603      	mov	r3, r0
    6980:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6982:	2300      	movs	r3, #0
    6984:	73fb      	strb	r3, [r7, #15]
    6986:	e010      	b.n	69aa <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6988:	7bfa      	ldrb	r2, [r7, #15]
    698a:	4910      	ldr	r1, [pc, #64]	; (69cc <_get_i2cm_index+0x5c>)
    698c:	4613      	mov	r3, r2
    698e:	005b      	lsls	r3, r3, #1
    6990:	4413      	add	r3, r2
    6992:	00db      	lsls	r3, r3, #3
    6994:	440b      	add	r3, r1
    6996:	781b      	ldrb	r3, [r3, #0]
    6998:	7bba      	ldrb	r2, [r7, #14]
    699a:	429a      	cmp	r2, r3
    699c:	d102      	bne.n	69a4 <_get_i2cm_index+0x34>
			return i;
    699e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    69a2:	e00d      	b.n	69c0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    69a4:	7bfb      	ldrb	r3, [r7, #15]
    69a6:	3301      	adds	r3, #1
    69a8:	73fb      	strb	r3, [r7, #15]
    69aa:	7bfb      	ldrb	r3, [r7, #15]
    69ac:	2b02      	cmp	r3, #2
    69ae:	d9eb      	bls.n	6988 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    69b0:	f240 32a6 	movw	r2, #934	; 0x3a6
    69b4:	4906      	ldr	r1, [pc, #24]	; (69d0 <_get_i2cm_index+0x60>)
    69b6:	2000      	movs	r0, #0
    69b8:	4b06      	ldr	r3, [pc, #24]	; (69d4 <_get_i2cm_index+0x64>)
    69ba:	4798      	blx	r3
	return -1;
    69bc:	f04f 33ff 	mov.w	r3, #4294967295
}
    69c0:	4618      	mov	r0, r3
    69c2:	3710      	adds	r7, #16
    69c4:	46bd      	mov	sp, r7
    69c6:	bd80      	pop	{r7, pc}
    69c8:	00006915 	.word	0x00006915
    69cc:	20000018 	.word	0x20000018
    69d0:	00013320 	.word	0x00013320
    69d4:	00003df5 	.word	0x00003df5

000069d8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    69d8:	b580      	push	{r7, lr}
    69da:	b082      	sub	sp, #8
    69dc:	af00      	add	r7, sp, #0
    69de:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    69e0:	2103      	movs	r1, #3
    69e2:	6878      	ldr	r0, [r7, #4]
    69e4:	4b02      	ldr	r3, [pc, #8]	; (69f0 <_sercom_i2c_send_stop+0x18>)
    69e6:	4798      	blx	r3
}
    69e8:	bf00      	nop
    69ea:	3708      	adds	r7, #8
    69ec:	46bd      	mov	sp, r7
    69ee:	bd80      	pop	{r7, pc}
    69f0:	00006691 	.word	0x00006691

000069f4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    69f4:	b590      	push	{r4, r7, lr}
    69f6:	b087      	sub	sp, #28
    69f8:	af00      	add	r7, sp, #0
    69fa:	60f8      	str	r0, [r7, #12]
    69fc:	60b9      	str	r1, [r7, #8]
    69fe:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6a00:	68f8      	ldr	r0, [r7, #12]
    6a02:	4b7d      	ldr	r3, [pc, #500]	; (6bf8 <_sercom_i2c_sync_analyse_flags+0x204>)
    6a04:	4798      	blx	r3
    6a06:	4603      	mov	r3, r0
    6a08:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6a0a:	68f8      	ldr	r0, [r7, #12]
    6a0c:	4b7b      	ldr	r3, [pc, #492]	; (6bfc <_sercom_i2c_sync_analyse_flags+0x208>)
    6a0e:	4798      	blx	r3
    6a10:	4603      	mov	r3, r0
    6a12:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6a14:	68bb      	ldr	r3, [r7, #8]
    6a16:	f003 0301 	and.w	r3, r3, #1
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	f000 8095 	beq.w	6b4a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6a20:	8a7b      	ldrh	r3, [r7, #18]
    6a22:	f003 0302 	and.w	r3, r3, #2
    6a26:	2b00      	cmp	r3, #0
    6a28:	d01d      	beq.n	6a66 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6a2a:	68f8      	ldr	r0, [r7, #12]
    6a2c:	4b74      	ldr	r3, [pc, #464]	; (6c00 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6a2e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	885b      	ldrh	r3, [r3, #2]
    6a34:	b29b      	uxth	r3, r3
    6a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6a3a:	b29a      	uxth	r2, r3
    6a3c:	687b      	ldr	r3, [r7, #4]
    6a3e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	885b      	ldrh	r3, [r3, #2]
    6a44:	b29b      	uxth	r3, r3
    6a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a4a:	b29a      	uxth	r2, r3
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6a50:	8a7b      	ldrh	r3, [r7, #18]
    6a52:	f003 0301 	and.w	r3, r3, #1
    6a56:	2b00      	cmp	r3, #0
    6a58:	d002      	beq.n	6a60 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6a5a:	f06f 0304 	mvn.w	r3, #4
    6a5e:	e0c6      	b.n	6bee <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6a60:	f06f 0303 	mvn.w	r3, #3
    6a64:	e0c3      	b.n	6bee <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6a66:	8a7b      	ldrh	r3, [r7, #18]
    6a68:	f003 0304 	and.w	r3, r3, #4
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d01f      	beq.n	6ab0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6a70:	687b      	ldr	r3, [r7, #4]
    6a72:	685b      	ldr	r3, [r3, #4]
    6a74:	2b00      	cmp	r3, #0
    6a76:	dd07      	ble.n	6a88 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6a78:	687b      	ldr	r3, [r7, #4]
    6a7a:	885b      	ldrh	r3, [r3, #2]
    6a7c:	b29b      	uxth	r3, r3
    6a7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6a82:	b29a      	uxth	r2, r3
    6a84:	687b      	ldr	r3, [r7, #4]
    6a86:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	885b      	ldrh	r3, [r3, #2]
    6a8c:	b29b      	uxth	r3, r3
    6a8e:	b21b      	sxth	r3, r3
    6a90:	2b00      	cmp	r3, #0
    6a92:	da02      	bge.n	6a9a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6a94:	68f8      	ldr	r0, [r7, #12]
    6a96:	4b5b      	ldr	r3, [pc, #364]	; (6c04 <_sercom_i2c_sync_analyse_flags+0x210>)
    6a98:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	885b      	ldrh	r3, [r3, #2]
    6a9e:	b29b      	uxth	r3, r3
    6aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6aa4:	b29a      	uxth	r2, r3
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6aaa:	f06f 0301 	mvn.w	r3, #1
    6aae:	e09e      	b.n	6bee <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6ab0:	687b      	ldr	r3, [r7, #4]
    6ab2:	885b      	ldrh	r3, [r3, #2]
    6ab4:	b29b      	uxth	r3, r3
    6ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6aba:	2b00      	cmp	r3, #0
    6abc:	d01c      	beq.n	6af8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6abe:	687b      	ldr	r3, [r7, #4]
    6ac0:	881b      	ldrh	r3, [r3, #0]
    6ac2:	121b      	asrs	r3, r3, #8
    6ac4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6ac6:	f003 0406 	and.w	r4, r3, #6
    6aca:	68f8      	ldr	r0, [r7, #12]
    6acc:	4b4e      	ldr	r3, [pc, #312]	; (6c08 <_sercom_i2c_sync_analyse_flags+0x214>)
    6ace:	4798      	blx	r3
    6ad0:	4603      	mov	r3, r0
    6ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6ad6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6ad8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6adc:	4619      	mov	r1, r3
    6ade:	68f8      	ldr	r0, [r7, #12]
    6ae0:	4b4a      	ldr	r3, [pc, #296]	; (6c0c <_sercom_i2c_sync_analyse_flags+0x218>)
    6ae2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	885b      	ldrh	r3, [r3, #2]
    6ae8:	b29b      	uxth	r3, r3
    6aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6aee:	b29a      	uxth	r2, r3
    6af0:	687b      	ldr	r3, [r7, #4]
    6af2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6af4:	2300      	movs	r3, #0
    6af6:	e07a      	b.n	6bee <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	685b      	ldr	r3, [r3, #4]
    6afc:	2b00      	cmp	r3, #0
    6afe:	d111      	bne.n	6b24 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	885b      	ldrh	r3, [r3, #2]
    6b04:	b29b      	uxth	r3, r3
    6b06:	b21b      	sxth	r3, r3
    6b08:	2b00      	cmp	r3, #0
    6b0a:	da02      	bge.n	6b12 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6b0c:	68f8      	ldr	r0, [r7, #12]
    6b0e:	4b3d      	ldr	r3, [pc, #244]	; (6c04 <_sercom_i2c_sync_analyse_flags+0x210>)
    6b10:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6b12:	687b      	ldr	r3, [r7, #4]
    6b14:	885b      	ldrh	r3, [r3, #2]
    6b16:	b29b      	uxth	r3, r3
    6b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b1c:	b29a      	uxth	r2, r3
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	805a      	strh	r2, [r3, #2]
    6b22:	e010      	b.n	6b46 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6b24:	687b      	ldr	r3, [r7, #4]
    6b26:	689b      	ldr	r3, [r3, #8]
    6b28:	781b      	ldrb	r3, [r3, #0]
    6b2a:	4619      	mov	r1, r3
    6b2c:	68f8      	ldr	r0, [r7, #12]
    6b2e:	4b38      	ldr	r3, [pc, #224]	; (6c10 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6b30:	4798      	blx	r3
				msg->buffer++;
    6b32:	687b      	ldr	r3, [r7, #4]
    6b34:	689b      	ldr	r3, [r3, #8]
    6b36:	1c5a      	adds	r2, r3, #1
    6b38:	687b      	ldr	r3, [r7, #4]
    6b3a:	609a      	str	r2, [r3, #8]
				msg->len--;
    6b3c:	687b      	ldr	r3, [r7, #4]
    6b3e:	685b      	ldr	r3, [r3, #4]
    6b40:	1e5a      	subs	r2, r3, #1
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6b46:	2300      	movs	r3, #0
    6b48:	e051      	b.n	6bee <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6b4a:	68bb      	ldr	r3, [r7, #8]
    6b4c:	f003 0302 	and.w	r3, r3, #2
    6b50:	2b00      	cmp	r3, #0
    6b52:	d04b      	beq.n	6bec <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6b54:	687b      	ldr	r3, [r7, #4]
    6b56:	685b      	ldr	r3, [r3, #4]
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d041      	beq.n	6be0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6b5c:	8a7b      	ldrh	r3, [r7, #18]
    6b5e:	f003 0304 	and.w	r3, r3, #4
    6b62:	2b00      	cmp	r3, #0
    6b64:	d13c      	bne.n	6be0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	685b      	ldr	r3, [r3, #4]
    6b6a:	1e5a      	subs	r2, r3, #1
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	685b      	ldr	r3, [r3, #4]
    6b74:	2b00      	cmp	r3, #0
    6b76:	d102      	bne.n	6b7e <_sercom_i2c_sync_analyse_flags+0x18a>
    6b78:	697b      	ldr	r3, [r7, #20]
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d006      	beq.n	6b8c <_sercom_i2c_sync_analyse_flags+0x198>
    6b7e:	687b      	ldr	r3, [r7, #4]
    6b80:	685b      	ldr	r3, [r3, #4]
    6b82:	2b01      	cmp	r3, #1
    6b84:	d105      	bne.n	6b92 <_sercom_i2c_sync_analyse_flags+0x19e>
    6b86:	697b      	ldr	r3, [r7, #20]
    6b88:	2b00      	cmp	r3, #0
    6b8a:	d002      	beq.n	6b92 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6b8c:	68f8      	ldr	r0, [r7, #12]
    6b8e:	4b21      	ldr	r3, [pc, #132]	; (6c14 <_sercom_i2c_sync_analyse_flags+0x220>)
    6b90:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6b92:	687b      	ldr	r3, [r7, #4]
    6b94:	685b      	ldr	r3, [r3, #4]
    6b96:	2b00      	cmp	r3, #0
    6b98:	d113      	bne.n	6bc2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6b9a:	687b      	ldr	r3, [r7, #4]
    6b9c:	885b      	ldrh	r3, [r3, #2]
    6b9e:	b29b      	uxth	r3, r3
    6ba0:	b21b      	sxth	r3, r3
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	da05      	bge.n	6bb2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6ba6:	68f8      	ldr	r0, [r7, #12]
    6ba8:	4b1b      	ldr	r3, [pc, #108]	; (6c18 <_sercom_i2c_sync_analyse_flags+0x224>)
    6baa:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6bac:	68f8      	ldr	r0, [r7, #12]
    6bae:	4b15      	ldr	r3, [pc, #84]	; (6c04 <_sercom_i2c_sync_analyse_flags+0x210>)
    6bb0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	885b      	ldrh	r3, [r3, #2]
    6bb6:	b29b      	uxth	r3, r3
    6bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6bbc:	b29a      	uxth	r2, r3
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	689c      	ldr	r4, [r3, #8]
    6bc6:	1c62      	adds	r2, r4, #1
    6bc8:	687b      	ldr	r3, [r7, #4]
    6bca:	609a      	str	r2, [r3, #8]
    6bcc:	68f8      	ldr	r0, [r7, #12]
    6bce:	4b13      	ldr	r3, [pc, #76]	; (6c1c <_sercom_i2c_sync_analyse_flags+0x228>)
    6bd0:	4798      	blx	r3
    6bd2:	4603      	mov	r3, r0
    6bd4:	b2db      	uxtb	r3, r3
    6bd6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6bd8:	68f8      	ldr	r0, [r7, #12]
    6bda:	4b11      	ldr	r3, [pc, #68]	; (6c20 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6bdc:	4798      	blx	r3
    6bde:	e005      	b.n	6bec <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6be0:	68f8      	ldr	r0, [r7, #12]
    6be2:	4b0f      	ldr	r3, [pc, #60]	; (6c20 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6be4:	4798      	blx	r3
			return I2C_NACK;
    6be6:	f06f 0301 	mvn.w	r3, #1
    6bea:	e000      	b.n	6bee <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6bec:	2300      	movs	r3, #0
}
    6bee:	4618      	mov	r0, r3
    6bf0:	371c      	adds	r7, #28
    6bf2:	46bd      	mov	sp, r7
    6bf4:	bd90      	pop	{r4, r7, pc}
    6bf6:	bf00      	nop
    6bf8:	00006491 	.word	0x00006491
    6bfc:	000068c9 	.word	0x000068c9
    6c00:	00006391 	.word	0x00006391
    6c04:	000069d9 	.word	0x000069d9
    6c08:	000067a9 	.word	0x000067a9
    6c0c:	00006785 	.word	0x00006785
    6c10:	000067e5 	.word	0x000067e5
    6c14:	00006641 	.word	0x00006641
    6c18:	00006619 	.word	0x00006619
    6c1c:	00006809 	.word	0x00006809
    6c20:	000063ab 	.word	0x000063ab

00006c24 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6c24:	b580      	push	{r7, lr}
    6c26:	b082      	sub	sp, #8
    6c28:	af00      	add	r7, sp, #0
    6c2a:	6078      	str	r0, [r7, #4]
    6c2c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	2b00      	cmp	r3, #0
    6c32:	bf14      	ite	ne
    6c34:	2301      	movne	r3, #1
    6c36:	2300      	moveq	r3, #0
    6c38:	b2db      	uxtb	r3, r3
    6c3a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6c3e:	4908      	ldr	r1, [pc, #32]	; (6c60 <_i2c_m_sync_init+0x3c>)
    6c40:	4618      	mov	r0, r3
    6c42:	4b08      	ldr	r3, [pc, #32]	; (6c64 <_i2c_m_sync_init+0x40>)
    6c44:	4798      	blx	r3

	i2c_dev->hw = hw;
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	683a      	ldr	r2, [r7, #0]
    6c4a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	6839      	ldr	r1, [r7, #0]
    6c50:	4618      	mov	r0, r3
    6c52:	4b05      	ldr	r3, [pc, #20]	; (6c68 <_i2c_m_sync_init+0x44>)
    6c54:	4798      	blx	r3
    6c56:	4603      	mov	r3, r0
}
    6c58:	4618      	mov	r0, r3
    6c5a:	3708      	adds	r7, #8
    6c5c:	46bd      	mov	sp, r7
    6c5e:	bd80      	pop	{r7, pc}
    6c60:	00013320 	.word	0x00013320
    6c64:	00003df5 	.word	0x00003df5
    6c68:	00006fe1 	.word	0x00006fe1

00006c6c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6c6c:	b580      	push	{r7, lr}
    6c6e:	b082      	sub	sp, #8
    6c70:	af00      	add	r7, sp, #0
    6c72:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6c74:	687b      	ldr	r3, [r7, #4]
    6c76:	2b00      	cmp	r3, #0
    6c78:	bf14      	ite	ne
    6c7a:	2301      	movne	r3, #1
    6c7c:	2300      	moveq	r3, #0
    6c7e:	b2db      	uxtb	r3, r3
    6c80:	f240 5235 	movw	r2, #1333	; 0x535
    6c84:	4906      	ldr	r1, [pc, #24]	; (6ca0 <_i2c_m_sync_enable+0x34>)
    6c86:	4618      	mov	r0, r3
    6c88:	4b06      	ldr	r3, [pc, #24]	; (6ca4 <_i2c_m_sync_enable+0x38>)
    6c8a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	691b      	ldr	r3, [r3, #16]
    6c90:	4618      	mov	r0, r3
    6c92:	4b05      	ldr	r3, [pc, #20]	; (6ca8 <_i2c_m_sync_enable+0x3c>)
    6c94:	4798      	blx	r3
    6c96:	4603      	mov	r3, r0
}
    6c98:	4618      	mov	r0, r3
    6c9a:	3708      	adds	r7, #8
    6c9c:	46bd      	mov	sp, r7
    6c9e:	bd80      	pop	{r7, pc}
    6ca0:	00013320 	.word	0x00013320
    6ca4:	00003df5 	.word	0x00003df5
    6ca8:	00006f55 	.word	0x00006f55

00006cac <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6cac:	b580      	push	{r7, lr}
    6cae:	b084      	sub	sp, #16
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	6078      	str	r0, [r7, #4]
    6cb4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6cba:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	691b      	ldr	r3, [r3, #16]
    6cc0:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6cc2:	68b8      	ldr	r0, [r7, #8]
    6cc4:	4b0f      	ldr	r3, [pc, #60]	; (6d04 <_sercom_i2c_sync_wait_bus+0x58>)
    6cc6:	4798      	blx	r3
    6cc8:	4603      	mov	r3, r0
    6cca:	461a      	mov	r2, r3
    6ccc:	683b      	ldr	r3, [r7, #0]
    6cce:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6cd0:	68fb      	ldr	r3, [r7, #12]
    6cd2:	1e5a      	subs	r2, r3, #1
    6cd4:	60fa      	str	r2, [r7, #12]
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	d102      	bne.n	6ce0 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6cda:	f06f 0304 	mvn.w	r3, #4
    6cde:	e00c      	b.n	6cfa <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6ce0:	683b      	ldr	r3, [r7, #0]
    6ce2:	681b      	ldr	r3, [r3, #0]
    6ce4:	f003 0301 	and.w	r3, r3, #1
    6ce8:	2b00      	cmp	r3, #0
    6cea:	d105      	bne.n	6cf8 <_sercom_i2c_sync_wait_bus+0x4c>
    6cec:	683b      	ldr	r3, [r7, #0]
    6cee:	681b      	ldr	r3, [r3, #0]
    6cf0:	f003 0302 	and.w	r3, r3, #2
    6cf4:	2b00      	cmp	r3, #0
    6cf6:	d0e4      	beq.n	6cc2 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6cf8:	2300      	movs	r3, #0
}
    6cfa:	4618      	mov	r0, r3
    6cfc:	3710      	adds	r7, #16
    6cfe:	46bd      	mov	sp, r7
    6d00:	bd80      	pop	{r7, pc}
    6d02:	bf00      	nop
    6d04:	000063c5 	.word	0x000063c5

00006d08 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6d08:	b590      	push	{r4, r7, lr}
    6d0a:	b087      	sub	sp, #28
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6d10:	687b      	ldr	r3, [r7, #4]
    6d12:	691b      	ldr	r3, [r3, #16]
    6d14:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6d1a:	6978      	ldr	r0, [r7, #20]
    6d1c:	4b39      	ldr	r3, [pc, #228]	; (6e04 <_sercom_i2c_sync_send_address+0xfc>)
    6d1e:	4798      	blx	r3
    6d20:	4603      	mov	r3, r0
    6d22:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	2b00      	cmp	r3, #0
    6d28:	bf14      	ite	ne
    6d2a:	2301      	movne	r3, #1
    6d2c:	2300      	moveq	r3, #0
    6d2e:	b2db      	uxtb	r3, r3
    6d30:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6d34:	4934      	ldr	r1, [pc, #208]	; (6e08 <_sercom_i2c_sync_send_address+0x100>)
    6d36:	4618      	mov	r0, r3
    6d38:	4b34      	ldr	r3, [pc, #208]	; (6e0c <_sercom_i2c_sync_send_address+0x104>)
    6d3a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6d3c:	693b      	ldr	r3, [r7, #16]
    6d3e:	685b      	ldr	r3, [r3, #4]
    6d40:	2b01      	cmp	r3, #1
    6d42:	d106      	bne.n	6d52 <_sercom_i2c_sync_send_address+0x4a>
    6d44:	68fb      	ldr	r3, [r7, #12]
    6d46:	2b00      	cmp	r3, #0
    6d48:	d003      	beq.n	6d52 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6d4a:	6978      	ldr	r0, [r7, #20]
    6d4c:	4b30      	ldr	r3, [pc, #192]	; (6e10 <_sercom_i2c_sync_send_address+0x108>)
    6d4e:	4798      	blx	r3
    6d50:	e002      	b.n	6d58 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6d52:	6978      	ldr	r0, [r7, #20]
    6d54:	4b2f      	ldr	r3, [pc, #188]	; (6e14 <_sercom_i2c_sync_send_address+0x10c>)
    6d56:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6d58:	693b      	ldr	r3, [r7, #16]
    6d5a:	881b      	ldrh	r3, [r3, #0]
    6d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6d60:	2b00      	cmp	r3, #0
    6d62:	d022      	beq.n	6daa <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6d64:	693b      	ldr	r3, [r7, #16]
    6d66:	885b      	ldrh	r3, [r3, #2]
    6d68:	b29b      	uxth	r3, r3
    6d6a:	f003 0301 	and.w	r3, r3, #1
    6d6e:	2b00      	cmp	r3, #0
    6d70:	d007      	beq.n	6d82 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6d72:	693b      	ldr	r3, [r7, #16]
    6d74:	885b      	ldrh	r3, [r3, #2]
    6d76:	b29b      	uxth	r3, r3
    6d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6d7c:	b29a      	uxth	r2, r3
    6d7e:	693b      	ldr	r3, [r7, #16]
    6d80:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6d82:	693b      	ldr	r3, [r7, #16]
    6d84:	881b      	ldrh	r3, [r3, #0]
    6d86:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d88:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6d8c:	401c      	ands	r4, r3
    6d8e:	6978      	ldr	r0, [r7, #20]
    6d90:	4b21      	ldr	r3, [pc, #132]	; (6e18 <_sercom_i2c_sync_send_address+0x110>)
    6d92:	4798      	blx	r3
    6d94:	4603      	mov	r3, r0
    6d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6d9a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6da0:	4619      	mov	r1, r3
    6da2:	6978      	ldr	r0, [r7, #20]
    6da4:	4b1d      	ldr	r3, [pc, #116]	; (6e1c <_sercom_i2c_sync_send_address+0x114>)
    6da6:	4798      	blx	r3
    6da8:	e01a      	b.n	6de0 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6daa:	693b      	ldr	r3, [r7, #16]
    6dac:	881b      	ldrh	r3, [r3, #0]
    6dae:	005b      	lsls	r3, r3, #1
    6db0:	b2db      	uxtb	r3, r3
    6db2:	693a      	ldr	r2, [r7, #16]
    6db4:	8852      	ldrh	r2, [r2, #2]
    6db6:	b292      	uxth	r2, r2
    6db8:	f002 0201 	and.w	r2, r2, #1
    6dbc:	2a00      	cmp	r2, #0
    6dbe:	bf14      	ite	ne
    6dc0:	2201      	movne	r2, #1
    6dc2:	2200      	moveq	r2, #0
    6dc4:	b2d2      	uxtb	r2, r2
    6dc6:	4313      	orrs	r3, r2
    6dc8:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6dca:	6978      	ldr	r0, [r7, #20]
    6dcc:	4b12      	ldr	r3, [pc, #72]	; (6e18 <_sercom_i2c_sync_send_address+0x110>)
    6dce:	4798      	blx	r3
    6dd0:	4603      	mov	r3, r0
    6dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6dd6:	4323      	orrs	r3, r4
    6dd8:	4619      	mov	r1, r3
    6dda:	6978      	ldr	r0, [r7, #20]
    6ddc:	4b0f      	ldr	r3, [pc, #60]	; (6e1c <_sercom_i2c_sync_send_address+0x114>)
    6dde:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6de0:	f107 0308 	add.w	r3, r7, #8
    6de4:	4619      	mov	r1, r3
    6de6:	6878      	ldr	r0, [r7, #4]
    6de8:	4b0d      	ldr	r3, [pc, #52]	; (6e20 <_sercom_i2c_sync_send_address+0x118>)
    6dea:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6dec:	68bb      	ldr	r3, [r7, #8]
    6dee:	693a      	ldr	r2, [r7, #16]
    6df0:	4619      	mov	r1, r3
    6df2:	6978      	ldr	r0, [r7, #20]
    6df4:	4b0b      	ldr	r3, [pc, #44]	; (6e24 <_sercom_i2c_sync_send_address+0x11c>)
    6df6:	4798      	blx	r3
    6df8:	4603      	mov	r3, r0
}
    6dfa:	4618      	mov	r0, r3
    6dfc:	371c      	adds	r7, #28
    6dfe:	46bd      	mov	sp, r7
    6e00:	bd90      	pop	{r4, r7, pc}
    6e02:	bf00      	nop
    6e04:	00006491 	.word	0x00006491
    6e08:	00013320 	.word	0x00013320
    6e0c:	00003df5 	.word	0x00003df5
    6e10:	00006641 	.word	0x00006641
    6e14:	00006669 	.word	0x00006669
    6e18:	000067a9 	.word	0x000067a9
    6e1c:	00006785 	.word	0x00006785
    6e20:	00006cad 	.word	0x00006cad
    6e24:	000069f5 	.word	0x000069f5

00006e28 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6e28:	b580      	push	{r7, lr}
    6e2a:	b086      	sub	sp, #24
    6e2c:	af00      	add	r7, sp, #0
    6e2e:	6078      	str	r0, [r7, #4]
    6e30:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	691b      	ldr	r3, [r3, #16]
    6e36:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	bf14      	ite	ne
    6e3e:	2301      	movne	r3, #1
    6e40:	2300      	moveq	r3, #0
    6e42:	b2db      	uxtb	r3, r3
    6e44:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6e48:	493b      	ldr	r1, [pc, #236]	; (6f38 <_i2c_m_sync_transfer+0x110>)
    6e4a:	4618      	mov	r0, r3
    6e4c:	4b3b      	ldr	r3, [pc, #236]	; (6f3c <_i2c_m_sync_transfer+0x114>)
    6e4e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6e50:	687b      	ldr	r3, [r7, #4]
    6e52:	691b      	ldr	r3, [r3, #16]
    6e54:	2b00      	cmp	r3, #0
    6e56:	bf14      	ite	ne
    6e58:	2301      	movne	r3, #1
    6e5a:	2300      	moveq	r3, #0
    6e5c:	b2db      	uxtb	r3, r3
    6e5e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6e62:	4935      	ldr	r1, [pc, #212]	; (6f38 <_i2c_m_sync_transfer+0x110>)
    6e64:	4618      	mov	r0, r3
    6e66:	4b35      	ldr	r3, [pc, #212]	; (6f3c <_i2c_m_sync_transfer+0x114>)
    6e68:	4798      	blx	r3
	ASSERT(msg);
    6e6a:	683b      	ldr	r3, [r7, #0]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	bf14      	ite	ne
    6e70:	2301      	movne	r3, #1
    6e72:	2300      	moveq	r3, #0
    6e74:	b2db      	uxtb	r3, r3
    6e76:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6e7a:	492f      	ldr	r1, [pc, #188]	; (6f38 <_i2c_m_sync_transfer+0x110>)
    6e7c:	4618      	mov	r0, r3
    6e7e:	4b2f      	ldr	r3, [pc, #188]	; (6f3c <_i2c_m_sync_transfer+0x114>)
    6e80:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	885b      	ldrh	r3, [r3, #2]
    6e86:	b29b      	uxth	r3, r3
    6e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6e8c:	2b00      	cmp	r3, #0
    6e8e:	d002      	beq.n	6e96 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6e90:	f06f 0305 	mvn.w	r3, #5
    6e94:	e04c      	b.n	6f30 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6e96:	683b      	ldr	r3, [r7, #0]
    6e98:	885b      	ldrh	r3, [r3, #2]
    6e9a:	b29b      	uxth	r3, r3
    6e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6ea0:	b29a      	uxth	r2, r3
    6ea2:	683b      	ldr	r3, [r7, #0]
    6ea4:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	683a      	ldr	r2, [r7, #0]
    6eaa:	ca07      	ldmia	r2, {r0, r1, r2}
    6eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6eb0:	6938      	ldr	r0, [r7, #16]
    6eb2:	4b23      	ldr	r3, [pc, #140]	; (6f40 <_i2c_m_sync_transfer+0x118>)
    6eb4:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6eb6:	6878      	ldr	r0, [r7, #4]
    6eb8:	4b22      	ldr	r3, [pc, #136]	; (6f44 <_i2c_m_sync_transfer+0x11c>)
    6eba:	4798      	blx	r3
    6ebc:	6178      	str	r0, [r7, #20]

	if (ret) {
    6ebe:	697b      	ldr	r3, [r7, #20]
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	d02d      	beq.n	6f20 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6ec4:	687b      	ldr	r3, [r7, #4]
    6ec6:	885b      	ldrh	r3, [r3, #2]
    6ec8:	b29b      	uxth	r3, r3
    6eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ece:	b29a      	uxth	r2, r3
    6ed0:	687b      	ldr	r3, [r7, #4]
    6ed2:	805a      	strh	r2, [r3, #2]

		return ret;
    6ed4:	697b      	ldr	r3, [r7, #20]
    6ed6:	e02b      	b.n	6f30 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6ed8:	f107 030c 	add.w	r3, r7, #12
    6edc:	4619      	mov	r1, r3
    6ede:	6878      	ldr	r0, [r7, #4]
    6ee0:	4b19      	ldr	r3, [pc, #100]	; (6f48 <_i2c_m_sync_transfer+0x120>)
    6ee2:	4798      	blx	r3
    6ee4:	6178      	str	r0, [r7, #20]

		if (ret) {
    6ee6:	697b      	ldr	r3, [r7, #20]
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d012      	beq.n	6f12 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6eec:	683b      	ldr	r3, [r7, #0]
    6eee:	885b      	ldrh	r3, [r3, #2]
    6ef0:	b29b      	uxth	r3, r3
    6ef2:	b21b      	sxth	r3, r3
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	da02      	bge.n	6efe <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6ef8:	6938      	ldr	r0, [r7, #16]
    6efa:	4b14      	ldr	r3, [pc, #80]	; (6f4c <_i2c_m_sync_transfer+0x124>)
    6efc:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6efe:	687b      	ldr	r3, [r7, #4]
    6f00:	885b      	ldrh	r3, [r3, #2]
    6f02:	b29b      	uxth	r3, r3
    6f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f08:	b29a      	uxth	r2, r3
    6f0a:	687b      	ldr	r3, [r7, #4]
    6f0c:	805a      	strh	r2, [r3, #2]

			return ret;
    6f0e:	697b      	ldr	r3, [r7, #20]
    6f10:	e00e      	b.n	6f30 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6f12:	68fb      	ldr	r3, [r7, #12]
    6f14:	687a      	ldr	r2, [r7, #4]
    6f16:	4619      	mov	r1, r3
    6f18:	6938      	ldr	r0, [r7, #16]
    6f1a:	4b0d      	ldr	r3, [pc, #52]	; (6f50 <_i2c_m_sync_transfer+0x128>)
    6f1c:	4798      	blx	r3
    6f1e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	885b      	ldrh	r3, [r3, #2]
    6f24:	b29b      	uxth	r3, r3
    6f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d1d4      	bne.n	6ed8 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6f2e:	697b      	ldr	r3, [r7, #20]
}
    6f30:	4618      	mov	r0, r3
    6f32:	3718      	adds	r7, #24
    6f34:	46bd      	mov	sp, r7
    6f36:	bd80      	pop	{r7, pc}
    6f38:	00013320 	.word	0x00013320
    6f3c:	00003df5 	.word	0x00003df5
    6f40:	000065f1 	.word	0x000065f1
    6f44:	00006d09 	.word	0x00006d09
    6f48:	00006cad 	.word	0x00006cad
    6f4c:	000069d9 	.word	0x000069d9
    6f50:	000069f5 	.word	0x000069f5

00006f54 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6f54:	b580      	push	{r7, lr}
    6f56:	b084      	sub	sp, #16
    6f58:	af00      	add	r7, sp, #0
    6f5a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6f60:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6f62:	2304      	movs	r3, #4
    6f64:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6f66:	687b      	ldr	r3, [r7, #4]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	bf14      	ite	ne
    6f6c:	2301      	movne	r3, #1
    6f6e:	2300      	moveq	r3, #0
    6f70:	b2db      	uxtb	r3, r3
    6f72:	f240 6205 	movw	r2, #1541	; 0x605
    6f76:	4915      	ldr	r1, [pc, #84]	; (6fcc <_i2c_m_enable_implementation+0x78>)
    6f78:	4618      	mov	r0, r3
    6f7a:	4b15      	ldr	r3, [pc, #84]	; (6fd0 <_i2c_m_enable_implementation+0x7c>)
    6f7c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6f7e:	6878      	ldr	r0, [r7, #4]
    6f80:	4b14      	ldr	r3, [pc, #80]	; (6fd4 <_i2c_m_enable_implementation+0x80>)
    6f82:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6f84:	e016      	b.n	6fb4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6f86:	68fb      	ldr	r3, [r7, #12]
    6f88:	3b01      	subs	r3, #1
    6f8a:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6f8c:	68fb      	ldr	r3, [r7, #12]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	dc10      	bgt.n	6fb4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6f92:	68bb      	ldr	r3, [r7, #8]
    6f94:	3b01      	subs	r3, #1
    6f96:	60bb      	str	r3, [r7, #8]
    6f98:	68bb      	ldr	r3, [r7, #8]
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d007      	beq.n	6fae <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6fa2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6fa4:	2110      	movs	r1, #16
    6fa6:	6878      	ldr	r0, [r7, #4]
    6fa8:	4b0b      	ldr	r3, [pc, #44]	; (6fd8 <_i2c_m_enable_implementation+0x84>)
    6faa:	4798      	blx	r3
    6fac:	e002      	b.n	6fb4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6fae:	f06f 0305 	mvn.w	r3, #5
    6fb2:	e006      	b.n	6fc2 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6fb4:	6878      	ldr	r0, [r7, #4]
    6fb6:	4b09      	ldr	r3, [pc, #36]	; (6fdc <_i2c_m_enable_implementation+0x88>)
    6fb8:	4798      	blx	r3
    6fba:	4603      	mov	r3, r0
    6fbc:	2b01      	cmp	r3, #1
    6fbe:	d1e2      	bne.n	6f86 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6fc0:	2300      	movs	r3, #0
}
    6fc2:	4618      	mov	r0, r3
    6fc4:	3710      	adds	r7, #16
    6fc6:	46bd      	mov	sp, r7
    6fc8:	bd80      	pop	{r7, pc}
    6fca:	bf00      	nop
    6fcc:	00013320 	.word	0x00013320
    6fd0:	00003df5 	.word	0x00003df5
    6fd4:	00006441 	.word	0x00006441
    6fd8:	000068ed 	.word	0x000068ed
    6fdc:	0000689d 	.word	0x0000689d

00006fe0 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6fe0:	b580      	push	{r7, lr}
    6fe2:	b084      	sub	sp, #16
    6fe4:	af00      	add	r7, sp, #0
    6fe6:	6078      	str	r0, [r7, #4]
    6fe8:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6fea:	6838      	ldr	r0, [r7, #0]
    6fec:	4b42      	ldr	r3, [pc, #264]	; (70f8 <_i2c_m_sync_init_impl+0x118>)
    6fee:	4798      	blx	r3
    6ff0:	4603      	mov	r3, r0
    6ff2:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6ff4:	2101      	movs	r1, #1
    6ff6:	6838      	ldr	r0, [r7, #0]
    6ff8:	4b40      	ldr	r3, [pc, #256]	; (70fc <_i2c_m_sync_init_impl+0x11c>)
    6ffa:	4798      	blx	r3
    6ffc:	4603      	mov	r3, r0
    6ffe:	f083 0301 	eor.w	r3, r3, #1
    7002:	b2db      	uxtb	r3, r3
    7004:	2b00      	cmp	r3, #0
    7006:	d020      	beq.n	704a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7008:	7bfa      	ldrb	r2, [r7, #15]
    700a:	493d      	ldr	r1, [pc, #244]	; (7100 <_i2c_m_sync_init_impl+0x120>)
    700c:	4613      	mov	r3, r2
    700e:	005b      	lsls	r3, r3, #1
    7010:	4413      	add	r3, r2
    7012:	00db      	lsls	r3, r3, #3
    7014:	440b      	add	r3, r1
    7016:	3304      	adds	r3, #4
    7018:	681b      	ldr	r3, [r3, #0]
    701a:	f003 031c 	and.w	r3, r3, #28
    701e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7020:	2102      	movs	r1, #2
    7022:	6838      	ldr	r0, [r7, #0]
    7024:	4b37      	ldr	r3, [pc, #220]	; (7104 <_i2c_m_sync_init_impl+0x124>)
    7026:	4798      	blx	r3
    7028:	4603      	mov	r3, r0
    702a:	2b00      	cmp	r3, #0
    702c:	d006      	beq.n	703c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    702e:	6838      	ldr	r0, [r7, #0]
    7030:	4b35      	ldr	r3, [pc, #212]	; (7108 <_i2c_m_sync_init_impl+0x128>)
    7032:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7034:	2102      	movs	r1, #2
    7036:	6838      	ldr	r0, [r7, #0]
    7038:	4b34      	ldr	r3, [pc, #208]	; (710c <_i2c_m_sync_init_impl+0x12c>)
    703a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    703c:	68bb      	ldr	r3, [r7, #8]
    703e:	f043 0301 	orr.w	r3, r3, #1
    7042:	4619      	mov	r1, r3
    7044:	6838      	ldr	r0, [r7, #0]
    7046:	4b32      	ldr	r3, [pc, #200]	; (7110 <_i2c_m_sync_init_impl+0x130>)
    7048:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    704a:	2101      	movs	r1, #1
    704c:	6838      	ldr	r0, [r7, #0]
    704e:	4b2f      	ldr	r3, [pc, #188]	; (710c <_i2c_m_sync_init_impl+0x12c>)
    7050:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7052:	7bfa      	ldrb	r2, [r7, #15]
    7054:	492a      	ldr	r1, [pc, #168]	; (7100 <_i2c_m_sync_init_impl+0x120>)
    7056:	4613      	mov	r3, r2
    7058:	005b      	lsls	r3, r3, #1
    705a:	4413      	add	r3, r2
    705c:	00db      	lsls	r3, r3, #3
    705e:	440b      	add	r3, r1
    7060:	3304      	adds	r3, #4
    7062:	681b      	ldr	r3, [r3, #0]
    7064:	4619      	mov	r1, r3
    7066:	6838      	ldr	r0, [r7, #0]
    7068:	4b29      	ldr	r3, [pc, #164]	; (7110 <_i2c_m_sync_init_impl+0x130>)
    706a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    706c:	7bfa      	ldrb	r2, [r7, #15]
    706e:	4924      	ldr	r1, [pc, #144]	; (7100 <_i2c_m_sync_init_impl+0x120>)
    7070:	4613      	mov	r3, r2
    7072:	005b      	lsls	r3, r3, #1
    7074:	4413      	add	r3, r2
    7076:	00db      	lsls	r3, r3, #3
    7078:	440b      	add	r3, r1
    707a:	3308      	adds	r3, #8
    707c:	681b      	ldr	r3, [r3, #0]
    707e:	4619      	mov	r1, r3
    7080:	6838      	ldr	r0, [r7, #0]
    7082:	4b24      	ldr	r3, [pc, #144]	; (7114 <_i2c_m_sync_init_impl+0x134>)
    7084:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7086:	7bfa      	ldrb	r2, [r7, #15]
    7088:	491d      	ldr	r1, [pc, #116]	; (7100 <_i2c_m_sync_init_impl+0x120>)
    708a:	4613      	mov	r3, r2
    708c:	005b      	lsls	r3, r3, #1
    708e:	4413      	add	r3, r2
    7090:	00db      	lsls	r3, r3, #3
    7092:	440b      	add	r3, r1
    7094:	330c      	adds	r3, #12
    7096:	681b      	ldr	r3, [r3, #0]
    7098:	4619      	mov	r1, r3
    709a:	6838      	ldr	r0, [r7, #0]
    709c:	4b1e      	ldr	r3, [pc, #120]	; (7118 <_i2c_m_sync_init_impl+0x138>)
    709e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    70a0:	7bfa      	ldrb	r2, [r7, #15]
    70a2:	4917      	ldr	r1, [pc, #92]	; (7100 <_i2c_m_sync_init_impl+0x120>)
    70a4:	4613      	mov	r3, r2
    70a6:	005b      	lsls	r3, r3, #1
    70a8:	4413      	add	r3, r2
    70aa:	00db      	lsls	r3, r3, #3
    70ac:	440b      	add	r3, r1
    70ae:	3304      	adds	r3, #4
    70b0:	681b      	ldr	r3, [r3, #0]
    70b2:	0e1b      	lsrs	r3, r3, #24
    70b4:	b29b      	uxth	r3, r3
    70b6:	f003 0303 	and.w	r3, r3, #3
    70ba:	b29a      	uxth	r2, r3
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    70c0:	687b      	ldr	r3, [r7, #4]
    70c2:	899b      	ldrh	r3, [r3, #12]
    70c4:	2b01      	cmp	r3, #1
    70c6:	bf8c      	ite	hi
    70c8:	2301      	movhi	r3, #1
    70ca:	2300      	movls	r3, #0
    70cc:	b2db      	uxtb	r3, r3
    70ce:	4619      	mov	r1, r3
    70d0:	6838      	ldr	r0, [r7, #0]
    70d2:	4b12      	ldr	r3, [pc, #72]	; (711c <_i2c_m_sync_init_impl+0x13c>)
    70d4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    70d6:	7bfa      	ldrb	r2, [r7, #15]
    70d8:	4909      	ldr	r1, [pc, #36]	; (7100 <_i2c_m_sync_init_impl+0x120>)
    70da:	4613      	mov	r3, r2
    70dc:	005b      	lsls	r3, r3, #1
    70de:	4413      	add	r3, r2
    70e0:	00db      	lsls	r3, r3, #3
    70e2:	440b      	add	r3, r1
    70e4:	3312      	adds	r3, #18
    70e6:	881a      	ldrh	r2, [r3, #0]
    70e8:	687b      	ldr	r3, [r7, #4]
    70ea:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    70ec:	2300      	movs	r3, #0
}
    70ee:	4618      	mov	r0, r3
    70f0:	3710      	adds	r7, #16
    70f2:	46bd      	mov	sp, r7
    70f4:	bd80      	pop	{r7, pc}
    70f6:	bf00      	nop
    70f8:	00006971 	.word	0x00006971
    70fc:	0000631d 	.word	0x0000631d
    7100:	20000018 	.word	0x20000018
    7104:	000064c1 	.word	0x000064c1
    7108:	00006469 	.word	0x00006469
    710c:	000062f9 	.word	0x000062f9
    7110:	000064f1 	.word	0x000064f1
    7114:	000066c1 	.word	0x000066c1
    7118:	00006709 	.word	0x00006709
    711c:	00006745 	.word	0x00006745

00007120 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    7120:	b580      	push	{r7, lr}
    7122:	b082      	sub	sp, #8
    7124:	af00      	add	r7, sp, #0
    7126:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7128:	2101      	movs	r1, #1
    712a:	6878      	ldr	r0, [r7, #4]
    712c:	4b07      	ldr	r3, [pc, #28]	; (714c <_spi_sync_enable+0x2c>)
    712e:	4798      	blx	r3
    7130:	4603      	mov	r3, r0
    7132:	2b00      	cmp	r3, #0
    7134:	d002      	beq.n	713c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    7136:	f06f 0303 	mvn.w	r3, #3
    713a:	e003      	b.n	7144 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    713c:	6878      	ldr	r0, [r7, #4]
    713e:	4b04      	ldr	r3, [pc, #16]	; (7150 <_spi_sync_enable+0x30>)
    7140:	4798      	blx	r3

	return ERR_NONE;
    7142:	2300      	movs	r3, #0
}
    7144:	4618      	mov	r0, r3
    7146:	3708      	adds	r7, #8
    7148:	46bd      	mov	sp, r7
    714a:	bd80      	pop	{r7, pc}
    714c:	00006369 	.word	0x00006369
    7150:	00006515 	.word	0x00006515

00007154 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    7154:	b580      	push	{r7, lr}
    7156:	b082      	sub	sp, #8
    7158:	af00      	add	r7, sp, #0
    715a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    715c:	2101      	movs	r1, #1
    715e:	6878      	ldr	r0, [r7, #4]
    7160:	4b07      	ldr	r3, [pc, #28]	; (7180 <_spi_sync_disable+0x2c>)
    7162:	4798      	blx	r3
    7164:	4603      	mov	r3, r0
    7166:	2b00      	cmp	r3, #0
    7168:	d002      	beq.n	7170 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    716a:	f06f 0303 	mvn.w	r3, #3
    716e:	e003      	b.n	7178 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7170:	6878      	ldr	r0, [r7, #4]
    7172:	4b04      	ldr	r3, [pc, #16]	; (7184 <_spi_sync_disable+0x30>)
    7174:	4798      	blx	r3

	return ERR_NONE;
    7176:	2300      	movs	r3, #0
}
    7178:	4618      	mov	r0, r3
    717a:	3708      	adds	r7, #8
    717c:	46bd      	mov	sp, r7
    717e:	bd80      	pop	{r7, pc}
    7180:	00006369 	.word	0x00006369
    7184:	00006575 	.word	0x00006575

00007188 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7188:	b580      	push	{r7, lr}
    718a:	b082      	sub	sp, #8
    718c:	af00      	add	r7, sp, #0
    718e:	6078      	str	r0, [r7, #4]
    7190:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7192:	687b      	ldr	r3, [r7, #4]
    7194:	2b00      	cmp	r3, #0
    7196:	d004      	beq.n	71a2 <_spi_load_regs_master+0x1a>
    7198:	683b      	ldr	r3, [r7, #0]
    719a:	2b00      	cmp	r3, #0
    719c:	d001      	beq.n	71a2 <_spi_load_regs_master+0x1a>
    719e:	2301      	movs	r3, #1
    71a0:	e000      	b.n	71a4 <_spi_load_regs_master+0x1c>
    71a2:	2300      	movs	r3, #0
    71a4:	f003 0301 	and.w	r3, r3, #1
    71a8:	b2db      	uxtb	r3, r3
    71aa:	f640 1209 	movw	r2, #2313	; 0x909
    71ae:	4915      	ldr	r1, [pc, #84]	; (7204 <_spi_load_regs_master+0x7c>)
    71b0:	4618      	mov	r0, r3
    71b2:	4b15      	ldr	r3, [pc, #84]	; (7208 <_spi_load_regs_master+0x80>)
    71b4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    71b6:	683b      	ldr	r3, [r7, #0]
    71b8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    71ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    71be:	f023 0301 	bic.w	r3, r3, #1
    71c2:	4619      	mov	r1, r3
    71c4:	6878      	ldr	r0, [r7, #4]
    71c6:	4b11      	ldr	r3, [pc, #68]	; (720c <_spi_load_regs_master+0x84>)
    71c8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    71ca:	683b      	ldr	r3, [r7, #0]
    71cc:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    71ce:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    71d2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    71d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    71da:	4619      	mov	r1, r3
    71dc:	6878      	ldr	r0, [r7, #4]
    71de:	4b0c      	ldr	r3, [pc, #48]	; (7210 <_spi_load_regs_master+0x88>)
    71e0:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    71e2:	683b      	ldr	r3, [r7, #0]
    71e4:	7b1b      	ldrb	r3, [r3, #12]
    71e6:	4619      	mov	r1, r3
    71e8:	6878      	ldr	r0, [r7, #4]
    71ea:	4b0a      	ldr	r3, [pc, #40]	; (7214 <_spi_load_regs_master+0x8c>)
    71ec:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    71ee:	683b      	ldr	r3, [r7, #0]
    71f0:	7b5b      	ldrb	r3, [r3, #13]
    71f2:	4619      	mov	r1, r3
    71f4:	6878      	ldr	r0, [r7, #4]
    71f6:	4b08      	ldr	r3, [pc, #32]	; (7218 <_spi_load_regs_master+0x90>)
    71f8:	4798      	blx	r3
}
    71fa:	bf00      	nop
    71fc:	3708      	adds	r7, #8
    71fe:	46bd      	mov	sp, r7
    7200:	bd80      	pop	{r7, pc}
    7202:	bf00      	nop
    7204:	00013320 	.word	0x00013320
    7208:	00003df5 	.word	0x00003df5
    720c:	000065cd 	.word	0x000065cd
    7210:	000066e5 	.word	0x000066e5
    7214:	00006725 	.word	0x00006725
    7218:	0000685d 	.word	0x0000685d

0000721c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    721c:	b580      	push	{r7, lr}
    721e:	b082      	sub	sp, #8
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
    7224:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	2b00      	cmp	r3, #0
    722a:	d004      	beq.n	7236 <_spi_load_regs_slave+0x1a>
    722c:	683b      	ldr	r3, [r7, #0]
    722e:	2b00      	cmp	r3, #0
    7230:	d001      	beq.n	7236 <_spi_load_regs_slave+0x1a>
    7232:	2301      	movs	r3, #1
    7234:	e000      	b.n	7238 <_spi_load_regs_slave+0x1c>
    7236:	2300      	movs	r3, #0
    7238:	f003 0301 	and.w	r3, r3, #1
    723c:	b2db      	uxtb	r3, r3
    723e:	f640 121d 	movw	r2, #2333	; 0x91d
    7242:	491a      	ldr	r1, [pc, #104]	; (72ac <_spi_load_regs_slave+0x90>)
    7244:	4618      	mov	r0, r3
    7246:	4b1a      	ldr	r3, [pc, #104]	; (72b0 <_spi_load_regs_slave+0x94>)
    7248:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    724a:	683b      	ldr	r3, [r7, #0]
    724c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    724e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7252:	f023 0301 	bic.w	r3, r3, #1
    7256:	4619      	mov	r1, r3
    7258:	6878      	ldr	r0, [r7, #4]
    725a:	4b16      	ldr	r3, [pc, #88]	; (72b4 <_spi_load_regs_slave+0x98>)
    725c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    725e:	683b      	ldr	r3, [r7, #0]
    7260:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7262:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7266:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    726a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    726e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    7272:	4619      	mov	r1, r3
    7274:	6878      	ldr	r0, [r7, #4]
    7276:	4b10      	ldr	r3, [pc, #64]	; (72b8 <_spi_load_regs_slave+0x9c>)
    7278:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    727a:	683b      	ldr	r3, [r7, #0]
    727c:	689b      	ldr	r3, [r3, #8]
    727e:	4619      	mov	r1, r3
    7280:	6878      	ldr	r0, [r7, #4]
    7282:	4b0e      	ldr	r3, [pc, #56]	; (72bc <_spi_load_regs_slave+0xa0>)
    7284:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7286:	683b      	ldr	r3, [r7, #0]
    7288:	7b5b      	ldrb	r3, [r3, #13]
    728a:	4619      	mov	r1, r3
    728c:	6878      	ldr	r0, [r7, #4]
    728e:	4b0c      	ldr	r3, [pc, #48]	; (72c0 <_spi_load_regs_slave+0xa4>)
    7290:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    7292:	bf00      	nop
    7294:	f04f 31ff 	mov.w	r1, #4294967295
    7298:	6878      	ldr	r0, [r7, #4]
    729a:	4b0a      	ldr	r3, [pc, #40]	; (72c4 <_spi_load_regs_slave+0xa8>)
    729c:	4798      	blx	r3
    729e:	4603      	mov	r3, r0
    72a0:	2b00      	cmp	r3, #0
    72a2:	d1f7      	bne.n	7294 <_spi_load_regs_slave+0x78>
		;
}
    72a4:	bf00      	nop
    72a6:	3708      	adds	r7, #8
    72a8:	46bd      	mov	sp, r7
    72aa:	bd80      	pop	{r7, pc}
    72ac:	00013320 	.word	0x00013320
    72b0:	00003df5 	.word	0x00003df5
    72b4:	000065cd 	.word	0x000065cd
    72b8:	000066e5 	.word	0x000066e5
    72bc:	000067c9 	.word	0x000067c9
    72c0:	0000685d 	.word	0x0000685d
    72c4:	00006369 	.word	0x00006369

000072c8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    72c8:	b580      	push	{r7, lr}
    72ca:	b084      	sub	sp, #16
    72cc:	af00      	add	r7, sp, #0
    72ce:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    72d0:	687b      	ldr	r3, [r7, #4]
    72d2:	4618      	mov	r0, r3
    72d4:	4b11      	ldr	r3, [pc, #68]	; (731c <_spi_get_regs+0x54>)
    72d6:	4798      	blx	r3
    72d8:	4603      	mov	r3, r0
    72da:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    72dc:	2300      	movs	r3, #0
    72de:	73fb      	strb	r3, [r7, #15]
    72e0:	e014      	b.n	730c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    72e2:	7bfa      	ldrb	r2, [r7, #15]
    72e4:	490e      	ldr	r1, [pc, #56]	; (7320 <_spi_get_regs+0x58>)
    72e6:	4613      	mov	r3, r2
    72e8:	011b      	lsls	r3, r3, #4
    72ea:	4413      	add	r3, r2
    72ec:	440b      	add	r3, r1
    72ee:	3310      	adds	r3, #16
    72f0:	781b      	ldrb	r3, [r3, #0]
    72f2:	7bba      	ldrb	r2, [r7, #14]
    72f4:	429a      	cmp	r2, r3
    72f6:	d106      	bne.n	7306 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    72f8:	7bfa      	ldrb	r2, [r7, #15]
    72fa:	4613      	mov	r3, r2
    72fc:	011b      	lsls	r3, r3, #4
    72fe:	4413      	add	r3, r2
    7300:	4a07      	ldr	r2, [pc, #28]	; (7320 <_spi_get_regs+0x58>)
    7302:	4413      	add	r3, r2
    7304:	e006      	b.n	7314 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7306:	7bfb      	ldrb	r3, [r7, #15]
    7308:	3301      	adds	r3, #1
    730a:	73fb      	strb	r3, [r7, #15]
    730c:	7bfb      	ldrb	r3, [r7, #15]
    730e:	2b01      	cmp	r3, #1
    7310:	d9e7      	bls.n	72e2 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    7312:	2300      	movs	r3, #0
}
    7314:	4618      	mov	r0, r3
    7316:	3710      	adds	r7, #16
    7318:	46bd      	mov	sp, r7
    731a:	bd80      	pop	{r7, pc}
    731c:	00006915 	.word	0x00006915
    7320:	0001335c 	.word	0x0001335c

00007324 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7324:	b580      	push	{r7, lr}
    7326:	b084      	sub	sp, #16
    7328:	af00      	add	r7, sp, #0
    732a:	6078      	str	r0, [r7, #4]
    732c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    732e:	683b      	ldr	r3, [r7, #0]
    7330:	4618      	mov	r0, r3
    7332:	4b35      	ldr	r3, [pc, #212]	; (7408 <_spi_m_sync_init+0xe4>)
    7334:	4798      	blx	r3
    7336:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7338:	687b      	ldr	r3, [r7, #4]
    733a:	2b00      	cmp	r3, #0
    733c:	d004      	beq.n	7348 <_spi_m_sync_init+0x24>
    733e:	683b      	ldr	r3, [r7, #0]
    7340:	2b00      	cmp	r3, #0
    7342:	d001      	beq.n	7348 <_spi_m_sync_init+0x24>
    7344:	2301      	movs	r3, #1
    7346:	e000      	b.n	734a <_spi_m_sync_init+0x26>
    7348:	2300      	movs	r3, #0
    734a:	f003 0301 	and.w	r3, r3, #1
    734e:	b2db      	uxtb	r3, r3
    7350:	f640 123f 	movw	r2, #2367	; 0x93f
    7354:	492d      	ldr	r1, [pc, #180]	; (740c <_spi_m_sync_init+0xe8>)
    7356:	4618      	mov	r0, r3
    7358:	4b2d      	ldr	r3, [pc, #180]	; (7410 <_spi_m_sync_init+0xec>)
    735a:	4798      	blx	r3

	if (regs == NULL) {
    735c:	68fb      	ldr	r3, [r7, #12]
    735e:	2b00      	cmp	r3, #0
    7360:	d102      	bne.n	7368 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7362:	f06f 030c 	mvn.w	r3, #12
    7366:	e04a      	b.n	73fe <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7368:	2101      	movs	r1, #1
    736a:	6838      	ldr	r0, [r7, #0]
    736c:	4b29      	ldr	r3, [pc, #164]	; (7414 <_spi_m_sync_init+0xf0>)
    736e:	4798      	blx	r3
    7370:	4603      	mov	r3, r0
    7372:	f083 0301 	eor.w	r3, r3, #1
    7376:	b2db      	uxtb	r3, r3
    7378:	2b00      	cmp	r3, #0
    737a:	d019      	beq.n	73b0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    737c:	68fb      	ldr	r3, [r7, #12]
    737e:	681b      	ldr	r3, [r3, #0]
    7380:	f003 031c 	and.w	r3, r3, #28
    7384:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7386:	2102      	movs	r1, #2
    7388:	6838      	ldr	r0, [r7, #0]
    738a:	4b23      	ldr	r3, [pc, #140]	; (7418 <_spi_m_sync_init+0xf4>)
    738c:	4798      	blx	r3
    738e:	4603      	mov	r3, r0
    7390:	2b00      	cmp	r3, #0
    7392:	d006      	beq.n	73a2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7394:	6838      	ldr	r0, [r7, #0]
    7396:	4b21      	ldr	r3, [pc, #132]	; (741c <_spi_m_sync_init+0xf8>)
    7398:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    739a:	2102      	movs	r1, #2
    739c:	6838      	ldr	r0, [r7, #0]
    739e:	4b20      	ldr	r3, [pc, #128]	; (7420 <_spi_m_sync_init+0xfc>)
    73a0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    73a2:	68bb      	ldr	r3, [r7, #8]
    73a4:	f043 0301 	orr.w	r3, r3, #1
    73a8:	4619      	mov	r1, r3
    73aa:	6838      	ldr	r0, [r7, #0]
    73ac:	4b1d      	ldr	r3, [pc, #116]	; (7424 <_spi_m_sync_init+0x100>)
    73ae:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    73b0:	2101      	movs	r1, #1
    73b2:	6838      	ldr	r0, [r7, #0]
    73b4:	4b1a      	ldr	r3, [pc, #104]	; (7420 <_spi_m_sync_init+0xfc>)
    73b6:	4798      	blx	r3

	dev->prvt = hw;
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	683a      	ldr	r2, [r7, #0]
    73bc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    73be:	68fb      	ldr	r3, [r7, #12]
    73c0:	681b      	ldr	r3, [r3, #0]
    73c2:	f003 031c 	and.w	r3, r3, #28
    73c6:	2b08      	cmp	r3, #8
    73c8:	d104      	bne.n	73d4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    73ca:	68f9      	ldr	r1, [r7, #12]
    73cc:	6838      	ldr	r0, [r7, #0]
    73ce:	4b16      	ldr	r3, [pc, #88]	; (7428 <_spi_m_sync_init+0x104>)
    73d0:	4798      	blx	r3
    73d2:	e003      	b.n	73dc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    73d4:	68f9      	ldr	r1, [r7, #12]
    73d6:	6838      	ldr	r0, [r7, #0]
    73d8:	4b14      	ldr	r3, [pc, #80]	; (742c <_spi_m_sync_init+0x108>)
    73da:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    73dc:	68fb      	ldr	r3, [r7, #12]
    73de:	685b      	ldr	r3, [r3, #4]
    73e0:	f003 0307 	and.w	r3, r3, #7
    73e4:	2b00      	cmp	r3, #0
    73e6:	d101      	bne.n	73ec <_spi_m_sync_init+0xc8>
    73e8:	2201      	movs	r2, #1
    73ea:	e000      	b.n	73ee <_spi_m_sync_init+0xca>
    73ec:	2202      	movs	r2, #2
    73ee:	687b      	ldr	r3, [r7, #4]
    73f0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    73f2:	68fb      	ldr	r3, [r7, #12]
    73f4:	89db      	ldrh	r3, [r3, #14]
    73f6:	b29a      	uxth	r2, r3
    73f8:	687b      	ldr	r3, [r7, #4]
    73fa:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    73fc:	2300      	movs	r3, #0
}
    73fe:	4618      	mov	r0, r3
    7400:	3710      	adds	r7, #16
    7402:	46bd      	mov	sp, r7
    7404:	bd80      	pop	{r7, pc}
    7406:	bf00      	nop
    7408:	000072c9 	.word	0x000072c9
    740c:	00013320 	.word	0x00013320
    7410:	00003df5 	.word	0x00003df5
    7414:	00006369 	.word	0x00006369
    7418:	0000659d 	.word	0x0000659d
    741c:	00006575 	.word	0x00006575
    7420:	00006345 	.word	0x00006345
    7424:	000065cd 	.word	0x000065cd
    7428:	0000721d 	.word	0x0000721d
    742c:	00007189 	.word	0x00007189

00007430 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    7430:	b580      	push	{r7, lr}
    7432:	b082      	sub	sp, #8
    7434:	af00      	add	r7, sp, #0
    7436:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7438:	687b      	ldr	r3, [r7, #4]
    743a:	2b00      	cmp	r3, #0
    743c:	d005      	beq.n	744a <_spi_m_sync_enable+0x1a>
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	2b00      	cmp	r3, #0
    7444:	d001      	beq.n	744a <_spi_m_sync_enable+0x1a>
    7446:	2301      	movs	r3, #1
    7448:	e000      	b.n	744c <_spi_m_sync_enable+0x1c>
    744a:	2300      	movs	r3, #0
    744c:	f003 0301 	and.w	r3, r3, #1
    7450:	b2db      	uxtb	r3, r3
    7452:	f640 129e 	movw	r2, #2462	; 0x99e
    7456:	4907      	ldr	r1, [pc, #28]	; (7474 <_spi_m_sync_enable+0x44>)
    7458:	4618      	mov	r0, r3
    745a:	4b07      	ldr	r3, [pc, #28]	; (7478 <_spi_m_sync_enable+0x48>)
    745c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    745e:	687b      	ldr	r3, [r7, #4]
    7460:	681b      	ldr	r3, [r3, #0]
    7462:	4618      	mov	r0, r3
    7464:	4b05      	ldr	r3, [pc, #20]	; (747c <_spi_m_sync_enable+0x4c>)
    7466:	4798      	blx	r3
    7468:	4603      	mov	r3, r0
}
    746a:	4618      	mov	r0, r3
    746c:	3708      	adds	r7, #8
    746e:	46bd      	mov	sp, r7
    7470:	bd80      	pop	{r7, pc}
    7472:	bf00      	nop
    7474:	00013320 	.word	0x00013320
    7478:	00003df5 	.word	0x00003df5
    747c:	00007121 	.word	0x00007121

00007480 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    7480:	b580      	push	{r7, lr}
    7482:	b082      	sub	sp, #8
    7484:	af00      	add	r7, sp, #0
    7486:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7488:	687b      	ldr	r3, [r7, #4]
    748a:	2b00      	cmp	r3, #0
    748c:	d005      	beq.n	749a <_spi_m_sync_disable+0x1a>
    748e:	687b      	ldr	r3, [r7, #4]
    7490:	681b      	ldr	r3, [r3, #0]
    7492:	2b00      	cmp	r3, #0
    7494:	d001      	beq.n	749a <_spi_m_sync_disable+0x1a>
    7496:	2301      	movs	r3, #1
    7498:	e000      	b.n	749c <_spi_m_sync_disable+0x1c>
    749a:	2300      	movs	r3, #0
    749c:	f003 0301 	and.w	r3, r3, #1
    74a0:	b2db      	uxtb	r3, r3
    74a2:	f640 12ba 	movw	r2, #2490	; 0x9ba
    74a6:	4907      	ldr	r1, [pc, #28]	; (74c4 <_spi_m_sync_disable+0x44>)
    74a8:	4618      	mov	r0, r3
    74aa:	4b07      	ldr	r3, [pc, #28]	; (74c8 <_spi_m_sync_disable+0x48>)
    74ac:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    74ae:	687b      	ldr	r3, [r7, #4]
    74b0:	681b      	ldr	r3, [r3, #0]
    74b2:	4618      	mov	r0, r3
    74b4:	4b05      	ldr	r3, [pc, #20]	; (74cc <_spi_m_sync_disable+0x4c>)
    74b6:	4798      	blx	r3
    74b8:	4603      	mov	r3, r0
}
    74ba:	4618      	mov	r0, r3
    74bc:	3708      	adds	r7, #8
    74be:	46bd      	mov	sp, r7
    74c0:	bd80      	pop	{r7, pc}
    74c2:	bf00      	nop
    74c4:	00013320 	.word	0x00013320
    74c8:	00003df5 	.word	0x00003df5
    74cc:	00007155 	.word	0x00007155

000074d0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    74d0:	b580      	push	{r7, lr}
    74d2:	b082      	sub	sp, #8
    74d4:	af00      	add	r7, sp, #0
    74d6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    74d8:	bf00      	nop
    74da:	2103      	movs	r1, #3
    74dc:	6878      	ldr	r0, [r7, #4]
    74de:	4b06      	ldr	r3, [pc, #24]	; (74f8 <_spi_wait_bus_idle+0x28>)
    74e0:	4798      	blx	r3
    74e2:	4603      	mov	r3, r0
    74e4:	2b00      	cmp	r3, #0
    74e6:	d0f8      	beq.n	74da <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    74e8:	2103      	movs	r1, #3
    74ea:	6878      	ldr	r0, [r7, #4]
    74ec:	4b03      	ldr	r3, [pc, #12]	; (74fc <_spi_wait_bus_idle+0x2c>)
    74ee:	4798      	blx	r3
}
    74f0:	bf00      	nop
    74f2:	3708      	adds	r7, #8
    74f4:	46bd      	mov	sp, r7
    74f6:	bd80      	pop	{r7, pc}
    74f8:	000063df 	.word	0x000063df
    74fc:	00006421 	.word	0x00006421

00007500 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7500:	b580      	push	{r7, lr}
    7502:	b086      	sub	sp, #24
    7504:	af00      	add	r7, sp, #0
    7506:	60f8      	str	r0, [r7, #12]
    7508:	60b9      	str	r1, [r7, #8]
    750a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    750c:	68bb      	ldr	r3, [r7, #8]
    750e:	f003 0304 	and.w	r3, r3, #4
    7512:	2b00      	cmp	r3, #0
    7514:	d101      	bne.n	751a <_spi_rx_check_and_receive+0x1a>
		return false;
    7516:	2300      	movs	r3, #0
    7518:	e022      	b.n	7560 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    751a:	68f8      	ldr	r0, [r7, #12]
    751c:	4b12      	ldr	r3, [pc, #72]	; (7568 <_spi_rx_check_and_receive+0x68>)
    751e:	4798      	blx	r3
    7520:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7522:	687b      	ldr	r3, [r7, #4]
    7524:	685b      	ldr	r3, [r3, #4]
    7526:	2b00      	cmp	r3, #0
    7528:	d014      	beq.n	7554 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    752a:	687b      	ldr	r3, [r7, #4]
    752c:	685b      	ldr	r3, [r3, #4]
    752e:	1c59      	adds	r1, r3, #1
    7530:	687a      	ldr	r2, [r7, #4]
    7532:	6051      	str	r1, [r2, #4]
    7534:	697a      	ldr	r2, [r7, #20]
    7536:	b2d2      	uxtb	r2, r2
    7538:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	7c1b      	ldrb	r3, [r3, #16]
    753e:	2b01      	cmp	r3, #1
    7540:	d908      	bls.n	7554 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7542:	687b      	ldr	r3, [r7, #4]
    7544:	685b      	ldr	r3, [r3, #4]
    7546:	1c59      	adds	r1, r3, #1
    7548:	687a      	ldr	r2, [r7, #4]
    754a:	6051      	str	r1, [r2, #4]
    754c:	697a      	ldr	r2, [r7, #20]
    754e:	0a12      	lsrs	r2, r2, #8
    7550:	b2d2      	uxtb	r2, r2
    7552:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	68db      	ldr	r3, [r3, #12]
    7558:	1c5a      	adds	r2, r3, #1
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	60da      	str	r2, [r3, #12]

	return true;
    755e:	2301      	movs	r3, #1
}
    7560:	4618      	mov	r0, r3
    7562:	3718      	adds	r7, #24
    7564:	46bd      	mov	sp, r7
    7566:	bd80      	pop	{r7, pc}
    7568:	00006845 	.word	0x00006845

0000756c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    756c:	b580      	push	{r7, lr}
    756e:	b086      	sub	sp, #24
    7570:	af00      	add	r7, sp, #0
    7572:	60f8      	str	r0, [r7, #12]
    7574:	60b9      	str	r1, [r7, #8]
    7576:	607a      	str	r2, [r7, #4]
    7578:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    757a:	68bb      	ldr	r3, [r7, #8]
    757c:	f003 0301 	and.w	r3, r3, #1
    7580:	2b00      	cmp	r3, #0
    7582:	d028      	beq.n	75d6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7584:	687b      	ldr	r3, [r7, #4]
    7586:	681b      	ldr	r3, [r3, #0]
    7588:	2b00      	cmp	r3, #0
    758a:	d018      	beq.n	75be <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    758c:	687b      	ldr	r3, [r7, #4]
    758e:	681b      	ldr	r3, [r3, #0]
    7590:	1c59      	adds	r1, r3, #1
    7592:	687a      	ldr	r2, [r7, #4]
    7594:	6011      	str	r1, [r2, #0]
    7596:	781b      	ldrb	r3, [r3, #0]
    7598:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    759a:	687b      	ldr	r3, [r7, #4]
    759c:	7c1b      	ldrb	r3, [r3, #16]
    759e:	2b01      	cmp	r3, #1
    75a0:	d90f      	bls.n	75c2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	781b      	ldrb	r3, [r3, #0]
    75a8:	021b      	lsls	r3, r3, #8
    75aa:	461a      	mov	r2, r3
    75ac:	697b      	ldr	r3, [r7, #20]
    75ae:	4313      	orrs	r3, r2
    75b0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    75b2:	687b      	ldr	r3, [r7, #4]
    75b4:	681b      	ldr	r3, [r3, #0]
    75b6:	1c5a      	adds	r2, r3, #1
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	601a      	str	r2, [r3, #0]
    75bc:	e001      	b.n	75c2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    75be:	887b      	ldrh	r3, [r7, #2]
    75c0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    75c2:	687b      	ldr	r3, [r7, #4]
    75c4:	689b      	ldr	r3, [r3, #8]
    75c6:	1c5a      	adds	r2, r3, #1
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    75cc:	6979      	ldr	r1, [r7, #20]
    75ce:	68f8      	ldr	r0, [r7, #12]
    75d0:	4b03      	ldr	r3, [pc, #12]	; (75e0 <_spi_tx_check_and_send+0x74>)
    75d2:	4798      	blx	r3
    75d4:	e000      	b.n	75d8 <_spi_tx_check_and_send+0x6c>
		return;
    75d6:	bf00      	nop
}
    75d8:	3718      	adds	r7, #24
    75da:	46bd      	mov	sp, r7
    75dc:	bd80      	pop	{r7, pc}
    75de:	bf00      	nop
    75e0:	00006829 	.word	0x00006829

000075e4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    75e4:	b580      	push	{r7, lr}
    75e6:	b082      	sub	sp, #8
    75e8:	af00      	add	r7, sp, #0
    75ea:	6078      	str	r0, [r7, #4]
    75ec:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    75ee:	687b      	ldr	r3, [r7, #4]
    75f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    75f4:	2b00      	cmp	r3, #0
    75f6:	d00b      	beq.n	7610 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    75f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    75fc:	6838      	ldr	r0, [r7, #0]
    75fe:	4b07      	ldr	r3, [pc, #28]	; (761c <_spi_err_check+0x38>)
    7600:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7602:	2180      	movs	r1, #128	; 0x80
    7604:	6838      	ldr	r0, [r7, #0]
    7606:	4b06      	ldr	r3, [pc, #24]	; (7620 <_spi_err_check+0x3c>)
    7608:	4798      	blx	r3
		return ERR_OVERFLOW;
    760a:	f06f 0312 	mvn.w	r3, #18
    760e:	e000      	b.n	7612 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7610:	2300      	movs	r3, #0
}
    7612:	4618      	mov	r0, r3
    7614:	3708      	adds	r7, #8
    7616:	46bd      	mov	sp, r7
    7618:	bd80      	pop	{r7, pc}
    761a:	bf00      	nop
    761c:	0000687d 	.word	0x0000687d
    7620:	00006421 	.word	0x00006421

00007624 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7624:	b590      	push	{r4, r7, lr}
    7626:	b08b      	sub	sp, #44	; 0x2c
    7628:	af00      	add	r7, sp, #0
    762a:	6078      	str	r0, [r7, #4]
    762c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    762e:	687b      	ldr	r3, [r7, #4]
    7630:	681b      	ldr	r3, [r3, #0]
    7632:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7634:	2300      	movs	r3, #0
    7636:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7638:	683b      	ldr	r3, [r7, #0]
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	60bb      	str	r3, [r7, #8]
    763e:	683b      	ldr	r3, [r7, #0]
    7640:	685b      	ldr	r3, [r3, #4]
    7642:	60fb      	str	r3, [r7, #12]
    7644:	2300      	movs	r3, #0
    7646:	613b      	str	r3, [r7, #16]
    7648:	2300      	movs	r3, #0
    764a:	617b      	str	r3, [r7, #20]
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	791b      	ldrb	r3, [r3, #4]
    7650:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7652:	687b      	ldr	r3, [r7, #4]
    7654:	2b00      	cmp	r3, #0
    7656:	d004      	beq.n	7662 <_spi_m_sync_trans+0x3e>
    7658:	6a3b      	ldr	r3, [r7, #32]
    765a:	2b00      	cmp	r3, #0
    765c:	d001      	beq.n	7662 <_spi_m_sync_trans+0x3e>
    765e:	2301      	movs	r3, #1
    7660:	e000      	b.n	7664 <_spi_m_sync_trans+0x40>
    7662:	2300      	movs	r3, #0
    7664:	f003 0301 	and.w	r3, r3, #1
    7668:	b2db      	uxtb	r3, r3
    766a:	f640 22a3 	movw	r2, #2723	; 0xaa3
    766e:	492b      	ldr	r1, [pc, #172]	; (771c <_spi_m_sync_trans+0xf8>)
    7670:	4618      	mov	r0, r3
    7672:	4b2b      	ldr	r3, [pc, #172]	; (7720 <_spi_m_sync_trans+0xfc>)
    7674:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7676:	2107      	movs	r1, #7
    7678:	6a38      	ldr	r0, [r7, #32]
    767a:	4b2a      	ldr	r3, [pc, #168]	; (7724 <_spi_m_sync_trans+0x100>)
    767c:	4798      	blx	r3
    767e:	4603      	mov	r3, r0
    7680:	2b00      	cmp	r3, #0
    7682:	d002      	beq.n	768a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7684:	f06f 0303 	mvn.w	r3, #3
    7688:	e043      	b.n	7712 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    768a:	6a38      	ldr	r0, [r7, #32]
    768c:	4b26      	ldr	r3, [pc, #152]	; (7728 <_spi_m_sync_trans+0x104>)
    768e:	4798      	blx	r3
    7690:	4603      	mov	r3, r0
    7692:	f083 0301 	eor.w	r3, r3, #1
    7696:	b2db      	uxtb	r3, r3
    7698:	2b00      	cmp	r3, #0
    769a:	d002      	beq.n	76a2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    769c:	f06f 0313 	mvn.w	r3, #19
    76a0:	e037      	b.n	7712 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    76a2:	6a38      	ldr	r0, [r7, #32]
    76a4:	4b21      	ldr	r3, [pc, #132]	; (772c <_spi_m_sync_trans+0x108>)
    76a6:	4798      	blx	r3
    76a8:	4603      	mov	r3, r0
    76aa:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    76ac:	f107 0308 	add.w	r3, r7, #8
    76b0:	461a      	mov	r2, r3
    76b2:	69f9      	ldr	r1, [r7, #28]
    76b4:	6a38      	ldr	r0, [r7, #32]
    76b6:	4b1e      	ldr	r3, [pc, #120]	; (7730 <_spi_m_sync_trans+0x10c>)
    76b8:	4798      	blx	r3
    76ba:	4603      	mov	r3, r0
    76bc:	f083 0301 	eor.w	r3, r3, #1
    76c0:	b2db      	uxtb	r3, r3
    76c2:	2b00      	cmp	r3, #0
    76c4:	d00b      	beq.n	76de <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    76c6:	697a      	ldr	r2, [r7, #20]
    76c8:	693b      	ldr	r3, [r7, #16]
    76ca:	429a      	cmp	r2, r3
    76cc:	d307      	bcc.n	76de <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    76ce:	687b      	ldr	r3, [r7, #4]
    76d0:	88db      	ldrh	r3, [r3, #6]
    76d2:	f107 0208 	add.w	r2, r7, #8
    76d6:	69f9      	ldr	r1, [r7, #28]
    76d8:	6a38      	ldr	r0, [r7, #32]
    76da:	4c16      	ldr	r4, [pc, #88]	; (7734 <_spi_m_sync_trans+0x110>)
    76dc:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    76de:	6a39      	ldr	r1, [r7, #32]
    76e0:	69f8      	ldr	r0, [r7, #28]
    76e2:	4b15      	ldr	r3, [pc, #84]	; (7738 <_spi_m_sync_trans+0x114>)
    76e4:	4798      	blx	r3
    76e6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    76e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    76ea:	2b00      	cmp	r3, #0
    76ec:	db0c      	blt.n	7708 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    76ee:	693a      	ldr	r2, [r7, #16]
    76f0:	683b      	ldr	r3, [r7, #0]
    76f2:	689b      	ldr	r3, [r3, #8]
    76f4:	429a      	cmp	r2, r3
    76f6:	d3d4      	bcc.n	76a2 <_spi_m_sync_trans+0x7e>
    76f8:	697a      	ldr	r2, [r7, #20]
    76fa:	683b      	ldr	r3, [r7, #0]
    76fc:	689b      	ldr	r3, [r3, #8]
    76fe:	429a      	cmp	r2, r3
    7700:	d3cf      	bcc.n	76a2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7702:	693b      	ldr	r3, [r7, #16]
    7704:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7706:	e000      	b.n	770a <_spi_m_sync_trans+0xe6>
			break;
    7708:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    770a:	6a38      	ldr	r0, [r7, #32]
    770c:	4b0b      	ldr	r3, [pc, #44]	; (773c <_spi_m_sync_trans+0x118>)
    770e:	4798      	blx	r3

	return rc;
    7710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7712:	4618      	mov	r0, r3
    7714:	372c      	adds	r7, #44	; 0x2c
    7716:	46bd      	mov	sp, r7
    7718:	bd90      	pop	{r4, r7, pc}
    771a:	bf00      	nop
    771c:	00013320 	.word	0x00013320
    7720:	00003df5 	.word	0x00003df5
    7724:	00006369 	.word	0x00006369
    7728:	0000653d 	.word	0x0000653d
    772c:	00006407 	.word	0x00006407
    7730:	00007501 	.word	0x00007501
    7734:	0000756d 	.word	0x0000756d
    7738:	000075e5 	.word	0x000075e5
    773c:	000074d1 	.word	0x000074d1

00007740 <__NVIC_EnableIRQ>:
{
    7740:	b480      	push	{r7}
    7742:	b083      	sub	sp, #12
    7744:	af00      	add	r7, sp, #0
    7746:	4603      	mov	r3, r0
    7748:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    774a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    774e:	2b00      	cmp	r3, #0
    7750:	db0b      	blt.n	776a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7752:	4909      	ldr	r1, [pc, #36]	; (7778 <__NVIC_EnableIRQ+0x38>)
    7754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7758:	095b      	lsrs	r3, r3, #5
    775a:	88fa      	ldrh	r2, [r7, #6]
    775c:	f002 021f 	and.w	r2, r2, #31
    7760:	2001      	movs	r0, #1
    7762:	fa00 f202 	lsl.w	r2, r0, r2
    7766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    776a:	bf00      	nop
    776c:	370c      	adds	r7, #12
    776e:	46bd      	mov	sp, r7
    7770:	f85d 7b04 	ldr.w	r7, [sp], #4
    7774:	4770      	bx	lr
    7776:	bf00      	nop
    7778:	e000e100 	.word	0xe000e100

0000777c <__NVIC_DisableIRQ>:
{
    777c:	b480      	push	{r7}
    777e:	b083      	sub	sp, #12
    7780:	af00      	add	r7, sp, #0
    7782:	4603      	mov	r3, r0
    7784:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    778a:	2b00      	cmp	r3, #0
    778c:	db10      	blt.n	77b0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    778e:	490b      	ldr	r1, [pc, #44]	; (77bc <__NVIC_DisableIRQ+0x40>)
    7790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7794:	095b      	lsrs	r3, r3, #5
    7796:	88fa      	ldrh	r2, [r7, #6]
    7798:	f002 021f 	and.w	r2, r2, #31
    779c:	2001      	movs	r0, #1
    779e:	fa00 f202 	lsl.w	r2, r0, r2
    77a2:	3320      	adds	r3, #32
    77a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    77a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    77ac:	f3bf 8f6f 	isb	sy
}
    77b0:	bf00      	nop
    77b2:	370c      	adds	r7, #12
    77b4:	46bd      	mov	sp, r7
    77b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ba:	4770      	bx	lr
    77bc:	e000e100 	.word	0xe000e100

000077c0 <__NVIC_ClearPendingIRQ>:
{
    77c0:	b480      	push	{r7}
    77c2:	b083      	sub	sp, #12
    77c4:	af00      	add	r7, sp, #0
    77c6:	4603      	mov	r3, r0
    77c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    77ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77ce:	2b00      	cmp	r3, #0
    77d0:	db0c      	blt.n	77ec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77d2:	4909      	ldr	r1, [pc, #36]	; (77f8 <__NVIC_ClearPendingIRQ+0x38>)
    77d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77d8:	095b      	lsrs	r3, r3, #5
    77da:	88fa      	ldrh	r2, [r7, #6]
    77dc:	f002 021f 	and.w	r2, r2, #31
    77e0:	2001      	movs	r0, #1
    77e2:	fa00 f202 	lsl.w	r2, r0, r2
    77e6:	3360      	adds	r3, #96	; 0x60
    77e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77ec:	bf00      	nop
    77ee:	370c      	adds	r7, #12
    77f0:	46bd      	mov	sp, r7
    77f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77f6:	4770      	bx	lr
    77f8:	e000e100 	.word	0xe000e100

000077fc <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    77fc:	b480      	push	{r7}
    77fe:	b083      	sub	sp, #12
    7800:	af00      	add	r7, sp, #0
    7802:	6078      	str	r0, [r7, #4]
    7804:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7806:	bf00      	nop
    7808:	687b      	ldr	r3, [r7, #4]
    780a:	689a      	ldr	r2, [r3, #8]
    780c:	683b      	ldr	r3, [r7, #0]
    780e:	4013      	ands	r3, r2
    7810:	2b00      	cmp	r3, #0
    7812:	d1f9      	bne.n	7808 <hri_tcc_wait_for_sync+0xc>
	};
}
    7814:	bf00      	nop
    7816:	370c      	adds	r7, #12
    7818:	46bd      	mov	sp, r7
    781a:	f85d 7b04 	ldr.w	r7, [sp], #4
    781e:	4770      	bx	lr

00007820 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7820:	b480      	push	{r7}
    7822:	b083      	sub	sp, #12
    7824:	af00      	add	r7, sp, #0
    7826:	6078      	str	r0, [r7, #4]
    7828:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	689a      	ldr	r2, [r3, #8]
    782e:	683b      	ldr	r3, [r7, #0]
    7830:	4013      	ands	r3, r2
    7832:	2b00      	cmp	r3, #0
    7834:	bf14      	ite	ne
    7836:	2301      	movne	r3, #1
    7838:	2300      	moveq	r3, #0
    783a:	b2db      	uxtb	r3, r3
}
    783c:	4618      	mov	r0, r3
    783e:	370c      	adds	r7, #12
    7840:	46bd      	mov	sp, r7
    7842:	f85d 7b04 	ldr.w	r7, [sp], #4
    7846:	4770      	bx	lr

00007848 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7848:	b480      	push	{r7}
    784a:	b083      	sub	sp, #12
    784c:	af00      	add	r7, sp, #0
    784e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7854:	f003 0301 	and.w	r3, r3, #1
    7858:	2b00      	cmp	r3, #0
    785a:	bf14      	ite	ne
    785c:	2301      	movne	r3, #1
    785e:	2300      	moveq	r3, #0
    7860:	b2db      	uxtb	r3, r3
}
    7862:	4618      	mov	r0, r3
    7864:	370c      	adds	r7, #12
    7866:	46bd      	mov	sp, r7
    7868:	f85d 7b04 	ldr.w	r7, [sp], #4
    786c:	4770      	bx	lr

0000786e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    786e:	b480      	push	{r7}
    7870:	b083      	sub	sp, #12
    7872:	af00      	add	r7, sp, #0
    7874:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	2201      	movs	r2, #1
    787a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    787c:	bf00      	nop
    787e:	370c      	adds	r7, #12
    7880:	46bd      	mov	sp, r7
    7882:	f85d 7b04 	ldr.w	r7, [sp], #4
    7886:	4770      	bx	lr

00007888 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7888:	b480      	push	{r7}
    788a:	b083      	sub	sp, #12
    788c:	af00      	add	r7, sp, #0
    788e:	6078      	str	r0, [r7, #4]
    7890:	460b      	mov	r3, r1
    7892:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7894:	687b      	ldr	r3, [r7, #4]
    7896:	78fa      	ldrb	r2, [r7, #3]
    7898:	715a      	strb	r2, [r3, #5]
}
    789a:	bf00      	nop
    789c:	370c      	adds	r7, #12
    789e:	46bd      	mov	sp, r7
    78a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    78a4:	4770      	bx	lr

000078a6 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    78a6:	b480      	push	{r7}
    78a8:	b083      	sub	sp, #12
    78aa:	af00      	add	r7, sp, #0
    78ac:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	2201      	movs	r2, #1
    78b2:	629a      	str	r2, [r3, #40]	; 0x28
}
    78b4:	bf00      	nop
    78b6:	370c      	adds	r7, #12
    78b8:	46bd      	mov	sp, r7
    78ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    78be:	4770      	bx	lr

000078c0 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    78c0:	b580      	push	{r7, lr}
    78c2:	b082      	sub	sp, #8
    78c4:	af00      	add	r7, sp, #0
    78c6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    78c8:	687b      	ldr	r3, [r7, #4]
    78ca:	681b      	ldr	r3, [r3, #0]
    78cc:	f043 0201 	orr.w	r2, r3, #1
    78d0:	687b      	ldr	r3, [r7, #4]
    78d2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    78d4:	2101      	movs	r1, #1
    78d6:	6878      	ldr	r0, [r7, #4]
    78d8:	4b02      	ldr	r3, [pc, #8]	; (78e4 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    78da:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    78dc:	bf00      	nop
    78de:	3708      	adds	r7, #8
    78e0:	46bd      	mov	sp, r7
    78e2:	bd80      	pop	{r7, pc}
    78e4:	000077fd 	.word	0x000077fd

000078e8 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    78e8:	b580      	push	{r7, lr}
    78ea:	b082      	sub	sp, #8
    78ec:	af00      	add	r7, sp, #0
    78ee:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	681b      	ldr	r3, [r3, #0]
    78f4:	f043 0202 	orr.w	r2, r3, #2
    78f8:	687b      	ldr	r3, [r7, #4]
    78fa:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    78fc:	2103      	movs	r1, #3
    78fe:	6878      	ldr	r0, [r7, #4]
    7900:	4b02      	ldr	r3, [pc, #8]	; (790c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7902:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7904:	bf00      	nop
    7906:	3708      	adds	r7, #8
    7908:	46bd      	mov	sp, r7
    790a:	bd80      	pop	{r7, pc}
    790c:	000077fd 	.word	0x000077fd

00007910 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7910:	b580      	push	{r7, lr}
    7912:	b084      	sub	sp, #16
    7914:	af00      	add	r7, sp, #0
    7916:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7918:	2103      	movs	r1, #3
    791a:	6878      	ldr	r0, [r7, #4]
    791c:	4b09      	ldr	r3, [pc, #36]	; (7944 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    791e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7920:	687b      	ldr	r3, [r7, #4]
    7922:	681b      	ldr	r3, [r3, #0]
    7924:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7926:	68fb      	ldr	r3, [r7, #12]
    7928:	085b      	lsrs	r3, r3, #1
    792a:	f003 0301 	and.w	r3, r3, #1
    792e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7930:	68fb      	ldr	r3, [r7, #12]
    7932:	2b00      	cmp	r3, #0
    7934:	bf14      	ite	ne
    7936:	2301      	movne	r3, #1
    7938:	2300      	moveq	r3, #0
    793a:	b2db      	uxtb	r3, r3
}
    793c:	4618      	mov	r0, r3
    793e:	3710      	adds	r7, #16
    7940:	46bd      	mov	sp, r7
    7942:	bd80      	pop	{r7, pc}
    7944:	000077fd 	.word	0x000077fd

00007948 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7948:	b580      	push	{r7, lr}
    794a:	b082      	sub	sp, #8
    794c:	af00      	add	r7, sp, #0
    794e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	681b      	ldr	r3, [r3, #0]
    7954:	f023 0202 	bic.w	r2, r3, #2
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    795c:	2103      	movs	r1, #3
    795e:	6878      	ldr	r0, [r7, #4]
    7960:	4b02      	ldr	r3, [pc, #8]	; (796c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7962:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7964:	bf00      	nop
    7966:	3708      	adds	r7, #8
    7968:	46bd      	mov	sp, r7
    796a:	bd80      	pop	{r7, pc}
    796c:	000077fd 	.word	0x000077fd

00007970 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7970:	b580      	push	{r7, lr}
    7972:	b084      	sub	sp, #16
    7974:	af00      	add	r7, sp, #0
    7976:	6078      	str	r0, [r7, #4]
    7978:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    797a:	2103      	movs	r1, #3
    797c:	6878      	ldr	r0, [r7, #4]
    797e:	4b07      	ldr	r3, [pc, #28]	; (799c <hri_tcc_get_CTRLA_reg+0x2c>)
    7980:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	681b      	ldr	r3, [r3, #0]
    7986:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7988:	68fa      	ldr	r2, [r7, #12]
    798a:	683b      	ldr	r3, [r7, #0]
    798c:	4013      	ands	r3, r2
    798e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7990:	68fb      	ldr	r3, [r7, #12]
}
    7992:	4618      	mov	r0, r3
    7994:	3710      	adds	r7, #16
    7996:	46bd      	mov	sp, r7
    7998:	bd80      	pop	{r7, pc}
    799a:	bf00      	nop
    799c:	000077fd 	.word	0x000077fd

000079a0 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    79a0:	b580      	push	{r7, lr}
    79a2:	b082      	sub	sp, #8
    79a4:	af00      	add	r7, sp, #0
    79a6:	6078      	str	r0, [r7, #4]
    79a8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	683a      	ldr	r2, [r7, #0]
    79ae:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    79b0:	2103      	movs	r1, #3
    79b2:	6878      	ldr	r0, [r7, #4]
    79b4:	4b02      	ldr	r3, [pc, #8]	; (79c0 <hri_tcc_write_CTRLA_reg+0x20>)
    79b6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    79b8:	bf00      	nop
    79ba:	3708      	adds	r7, #8
    79bc:	46bd      	mov	sp, r7
    79be:	bd80      	pop	{r7, pc}
    79c0:	000077fd 	.word	0x000077fd

000079c4 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    79c4:	b480      	push	{r7}
    79c6:	b083      	sub	sp, #12
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
    79cc:	460b      	mov	r3, r1
    79ce:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	78fa      	ldrb	r2, [r7, #3]
    79d4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    79d6:	bf00      	nop
    79d8:	370c      	adds	r7, #12
    79da:	46bd      	mov	sp, r7
    79dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    79e0:	4770      	bx	lr

000079e2 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    79e2:	b480      	push	{r7}
    79e4:	b083      	sub	sp, #12
    79e6:	af00      	add	r7, sp, #0
    79e8:	6078      	str	r0, [r7, #4]
    79ea:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	683a      	ldr	r2, [r7, #0]
    79f0:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    79f2:	bf00      	nop
    79f4:	370c      	adds	r7, #12
    79f6:	46bd      	mov	sp, r7
    79f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79fc:	4770      	bx	lr
	...

00007a00 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7a00:	b580      	push	{r7, lr}
    7a02:	b082      	sub	sp, #8
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
    7a08:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7a0a:	687b      	ldr	r3, [r7, #4]
    7a0c:	683a      	ldr	r2, [r7, #0]
    7a0e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7a10:	2180      	movs	r1, #128	; 0x80
    7a12:	6878      	ldr	r0, [r7, #4]
    7a14:	4b02      	ldr	r3, [pc, #8]	; (7a20 <hri_tcc_write_PER_reg+0x20>)
    7a16:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7a18:	bf00      	nop
    7a1a:	3708      	adds	r7, #8
    7a1c:	46bd      	mov	sp, r7
    7a1e:	bd80      	pop	{r7, pc}
    7a20:	000077fd 	.word	0x000077fd

00007a24 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7a24:	b580      	push	{r7, lr}
    7a26:	b082      	sub	sp, #8
    7a28:	af00      	add	r7, sp, #0
    7a2a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7a2c:	2180      	movs	r1, #128	; 0x80
    7a2e:	6878      	ldr	r0, [r7, #4]
    7a30:	4b03      	ldr	r3, [pc, #12]	; (7a40 <hri_tcc_read_PER_reg+0x1c>)
    7a32:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7a38:	4618      	mov	r0, r3
    7a3a:	3708      	adds	r7, #8
    7a3c:	46bd      	mov	sp, r7
    7a3e:	bd80      	pop	{r7, pc}
    7a40:	000077fd 	.word	0x000077fd

00007a44 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7a44:	b480      	push	{r7}
    7a46:	b083      	sub	sp, #12
    7a48:	af00      	add	r7, sp, #0
    7a4a:	6078      	str	r0, [r7, #4]
    7a4c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	4a09      	ldr	r2, [pc, #36]	; (7a78 <_tcc_init_irq_param+0x34>)
    7a52:	4293      	cmp	r3, r2
    7a54:	d102      	bne.n	7a5c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7a56:	4a09      	ldr	r2, [pc, #36]	; (7a7c <_tcc_init_irq_param+0x38>)
    7a58:	683b      	ldr	r3, [r7, #0]
    7a5a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	4a08      	ldr	r2, [pc, #32]	; (7a80 <_tcc_init_irq_param+0x3c>)
    7a60:	4293      	cmp	r3, r2
    7a62:	d102      	bne.n	7a6a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7a64:	4a07      	ldr	r2, [pc, #28]	; (7a84 <_tcc_init_irq_param+0x40>)
    7a66:	683b      	ldr	r3, [r7, #0]
    7a68:	6013      	str	r3, [r2, #0]
	}
}
    7a6a:	bf00      	nop
    7a6c:	370c      	adds	r7, #12
    7a6e:	46bd      	mov	sp, r7
    7a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a74:	4770      	bx	lr
    7a76:	bf00      	nop
    7a78:	41016000 	.word	0x41016000
    7a7c:	20000934 	.word	0x20000934
    7a80:	41018000 	.word	0x41018000
    7a84:	20000938 	.word	0x20000938

00007a88 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7a88:	b580      	push	{r7, lr}
    7a8a:	b084      	sub	sp, #16
    7a8c:	af00      	add	r7, sp, #0
    7a8e:	6078      	str	r0, [r7, #4]
    7a90:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7a92:	6838      	ldr	r0, [r7, #0]
    7a94:	4b33      	ldr	r3, [pc, #204]	; (7b64 <_tcc_timer_init+0xdc>)
    7a96:	4798      	blx	r3
    7a98:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7a9a:	68fb      	ldr	r3, [r7, #12]
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	d102      	bne.n	7aa6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7aa0:	f06f 0309 	mvn.w	r3, #9
    7aa4:	e05a      	b.n	7b5c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7aa6:	687b      	ldr	r3, [r7, #4]
    7aa8:	683a      	ldr	r2, [r7, #0]
    7aaa:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7aac:	2101      	movs	r1, #1
    7aae:	6838      	ldr	r0, [r7, #0]
    7ab0:	4b2d      	ldr	r3, [pc, #180]	; (7b68 <_tcc_timer_init+0xe0>)
    7ab2:	4798      	blx	r3
    7ab4:	4603      	mov	r3, r0
    7ab6:	f083 0301 	eor.w	r3, r3, #1
    7aba:	b2db      	uxtb	r3, r3
    7abc:	2b00      	cmp	r3, #0
    7abe:	d011      	beq.n	7ae4 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7ac0:	2102      	movs	r1, #2
    7ac2:	6838      	ldr	r0, [r7, #0]
    7ac4:	4b29      	ldr	r3, [pc, #164]	; (7b6c <_tcc_timer_init+0xe4>)
    7ac6:	4798      	blx	r3
    7ac8:	4603      	mov	r3, r0
    7aca:	2b00      	cmp	r3, #0
    7acc:	d006      	beq.n	7adc <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7ace:	6838      	ldr	r0, [r7, #0]
    7ad0:	4b27      	ldr	r3, [pc, #156]	; (7b70 <_tcc_timer_init+0xe8>)
    7ad2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7ad4:	2102      	movs	r1, #2
    7ad6:	6838      	ldr	r0, [r7, #0]
    7ad8:	4b26      	ldr	r3, [pc, #152]	; (7b74 <_tcc_timer_init+0xec>)
    7ada:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7adc:	2101      	movs	r1, #1
    7ade:	6838      	ldr	r0, [r7, #0]
    7ae0:	4b25      	ldr	r3, [pc, #148]	; (7b78 <_tcc_timer_init+0xf0>)
    7ae2:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7ae4:	2101      	movs	r1, #1
    7ae6:	6838      	ldr	r0, [r7, #0]
    7ae8:	4b22      	ldr	r3, [pc, #136]	; (7b74 <_tcc_timer_init+0xec>)
    7aea:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7aec:	68fb      	ldr	r3, [r7, #12]
    7aee:	689b      	ldr	r3, [r3, #8]
    7af0:	4619      	mov	r1, r3
    7af2:	6838      	ldr	r0, [r7, #0]
    7af4:	4b20      	ldr	r3, [pc, #128]	; (7b78 <_tcc_timer_init+0xf0>)
    7af6:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7af8:	68fb      	ldr	r3, [r7, #12]
    7afa:	7b1b      	ldrb	r3, [r3, #12]
    7afc:	4619      	mov	r1, r3
    7afe:	6838      	ldr	r0, [r7, #0]
    7b00:	4b1e      	ldr	r3, [pc, #120]	; (7b7c <_tcc_timer_init+0xf4>)
    7b02:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7b04:	68fb      	ldr	r3, [r7, #12]
    7b06:	7b5b      	ldrb	r3, [r3, #13]
    7b08:	4619      	mov	r1, r3
    7b0a:	6838      	ldr	r0, [r7, #0]
    7b0c:	4b1c      	ldr	r3, [pc, #112]	; (7b80 <_tcc_timer_init+0xf8>)
    7b0e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7b10:	68fb      	ldr	r3, [r7, #12]
    7b12:	691b      	ldr	r3, [r3, #16]
    7b14:	4619      	mov	r1, r3
    7b16:	6838      	ldr	r0, [r7, #0]
    7b18:	4b1a      	ldr	r3, [pc, #104]	; (7b84 <_tcc_timer_init+0xfc>)
    7b1a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7b1c:	68fb      	ldr	r3, [r7, #12]
    7b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b20:	4619      	mov	r1, r3
    7b22:	6838      	ldr	r0, [r7, #0]
    7b24:	4b18      	ldr	r3, [pc, #96]	; (7b88 <_tcc_timer_init+0x100>)
    7b26:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7b28:	6838      	ldr	r0, [r7, #0]
    7b2a:	4b18      	ldr	r3, [pc, #96]	; (7b8c <_tcc_timer_init+0x104>)
    7b2c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7b2e:	6879      	ldr	r1, [r7, #4]
    7b30:	6838      	ldr	r0, [r7, #0]
    7b32:	4b17      	ldr	r3, [pc, #92]	; (7b90 <_tcc_timer_init+0x108>)
    7b34:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7b36:	68fb      	ldr	r3, [r7, #12]
    7b38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7b3c:	4618      	mov	r0, r3
    7b3e:	4b15      	ldr	r3, [pc, #84]	; (7b94 <_tcc_timer_init+0x10c>)
    7b40:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7b42:	68fb      	ldr	r3, [r7, #12]
    7b44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7b48:	4618      	mov	r0, r3
    7b4a:	4b13      	ldr	r3, [pc, #76]	; (7b98 <_tcc_timer_init+0x110>)
    7b4c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7b4e:	68fb      	ldr	r3, [r7, #12]
    7b50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7b54:	4618      	mov	r0, r3
    7b56:	4b11      	ldr	r3, [pc, #68]	; (7b9c <_tcc_timer_init+0x114>)
    7b58:	4798      	blx	r3

	return ERR_NONE;
    7b5a:	2300      	movs	r3, #0
}
    7b5c:	4618      	mov	r0, r3
    7b5e:	3710      	adds	r7, #16
    7b60:	46bd      	mov	sp, r7
    7b62:	bd80      	pop	{r7, pc}
    7b64:	00007d51 	.word	0x00007d51
    7b68:	00007821 	.word	0x00007821
    7b6c:	00007971 	.word	0x00007971
    7b70:	00007949 	.word	0x00007949
    7b74:	000077fd 	.word	0x000077fd
    7b78:	000079a1 	.word	0x000079a1
    7b7c:	00007889 	.word	0x00007889
    7b80:	000079c5 	.word	0x000079c5
    7b84:	000079e3 	.word	0x000079e3
    7b88:	00007a01 	.word	0x00007a01
    7b8c:	000078a7 	.word	0x000078a7
    7b90:	00007a45 	.word	0x00007a45
    7b94:	0000777d 	.word	0x0000777d
    7b98:	000077c1 	.word	0x000077c1
    7b9c:	00007741 	.word	0x00007741

00007ba0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7ba0:	b580      	push	{r7, lr}
    7ba2:	b084      	sub	sp, #16
    7ba4:	af00      	add	r7, sp, #0
    7ba6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7ba8:	687b      	ldr	r3, [r7, #4]
    7baa:	68db      	ldr	r3, [r3, #12]
    7bac:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7bae:	68f8      	ldr	r0, [r7, #12]
    7bb0:	4b0a      	ldr	r3, [pc, #40]	; (7bdc <_tcc_timer_deinit+0x3c>)
    7bb2:	4798      	blx	r3
    7bb4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7bb6:	68bb      	ldr	r3, [r7, #8]
    7bb8:	2b00      	cmp	r3, #0
    7bba:	d00b      	beq.n	7bd4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7bbc:	68bb      	ldr	r3, [r7, #8]
    7bbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7bc2:	4618      	mov	r0, r3
    7bc4:	4b06      	ldr	r3, [pc, #24]	; (7be0 <_tcc_timer_deinit+0x40>)
    7bc6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7bc8:	68f8      	ldr	r0, [r7, #12]
    7bca:	4b06      	ldr	r3, [pc, #24]	; (7be4 <_tcc_timer_deinit+0x44>)
    7bcc:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7bce:	68f8      	ldr	r0, [r7, #12]
    7bd0:	4b05      	ldr	r3, [pc, #20]	; (7be8 <_tcc_timer_deinit+0x48>)
    7bd2:	4798      	blx	r3
	}
}
    7bd4:	bf00      	nop
    7bd6:	3710      	adds	r7, #16
    7bd8:	46bd      	mov	sp, r7
    7bda:	bd80      	pop	{r7, pc}
    7bdc:	00007d51 	.word	0x00007d51
    7be0:	0000777d 	.word	0x0000777d
    7be4:	00007949 	.word	0x00007949
    7be8:	000078c1 	.word	0x000078c1

00007bec <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7bec:	b580      	push	{r7, lr}
    7bee:	b082      	sub	sp, #8
    7bf0:	af00      	add	r7, sp, #0
    7bf2:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	68db      	ldr	r3, [r3, #12]
    7bf8:	4618      	mov	r0, r3
    7bfa:	4b03      	ldr	r3, [pc, #12]	; (7c08 <_tcc_timer_start+0x1c>)
    7bfc:	4798      	blx	r3
}
    7bfe:	bf00      	nop
    7c00:	3708      	adds	r7, #8
    7c02:	46bd      	mov	sp, r7
    7c04:	bd80      	pop	{r7, pc}
    7c06:	bf00      	nop
    7c08:	000078e9 	.word	0x000078e9

00007c0c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7c0c:	b580      	push	{r7, lr}
    7c0e:	b082      	sub	sp, #8
    7c10:	af00      	add	r7, sp, #0
    7c12:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	68db      	ldr	r3, [r3, #12]
    7c18:	4618      	mov	r0, r3
    7c1a:	4b03      	ldr	r3, [pc, #12]	; (7c28 <_tcc_timer_stop+0x1c>)
    7c1c:	4798      	blx	r3
}
    7c1e:	bf00      	nop
    7c20:	3708      	adds	r7, #8
    7c22:	46bd      	mov	sp, r7
    7c24:	bd80      	pop	{r7, pc}
    7c26:	bf00      	nop
    7c28:	00007949 	.word	0x00007949

00007c2c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7c2c:	b580      	push	{r7, lr}
    7c2e:	b082      	sub	sp, #8
    7c30:	af00      	add	r7, sp, #0
    7c32:	6078      	str	r0, [r7, #4]
    7c34:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7c36:	687b      	ldr	r3, [r7, #4]
    7c38:	68db      	ldr	r3, [r3, #12]
    7c3a:	6839      	ldr	r1, [r7, #0]
    7c3c:	4618      	mov	r0, r3
    7c3e:	4b03      	ldr	r3, [pc, #12]	; (7c4c <_tcc_timer_set_period+0x20>)
    7c40:	4798      	blx	r3
}
    7c42:	bf00      	nop
    7c44:	3708      	adds	r7, #8
    7c46:	46bd      	mov	sp, r7
    7c48:	bd80      	pop	{r7, pc}
    7c4a:	bf00      	nop
    7c4c:	00007a01 	.word	0x00007a01

00007c50 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7c50:	b580      	push	{r7, lr}
    7c52:	b082      	sub	sp, #8
    7c54:	af00      	add	r7, sp, #0
    7c56:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7c58:	687b      	ldr	r3, [r7, #4]
    7c5a:	68db      	ldr	r3, [r3, #12]
    7c5c:	4618      	mov	r0, r3
    7c5e:	4b03      	ldr	r3, [pc, #12]	; (7c6c <_tcc_timer_get_period+0x1c>)
    7c60:	4798      	blx	r3
    7c62:	4603      	mov	r3, r0
}
    7c64:	4618      	mov	r0, r3
    7c66:	3708      	adds	r7, #8
    7c68:	46bd      	mov	sp, r7
    7c6a:	bd80      	pop	{r7, pc}
    7c6c:	00007a25 	.word	0x00007a25

00007c70 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7c70:	b580      	push	{r7, lr}
    7c72:	b082      	sub	sp, #8
    7c74:	af00      	add	r7, sp, #0
    7c76:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7c78:	687b      	ldr	r3, [r7, #4]
    7c7a:	68db      	ldr	r3, [r3, #12]
    7c7c:	4618      	mov	r0, r3
    7c7e:	4b03      	ldr	r3, [pc, #12]	; (7c8c <_tcc_timer_is_started+0x1c>)
    7c80:	4798      	blx	r3
    7c82:	4603      	mov	r3, r0
}
    7c84:	4618      	mov	r0, r3
    7c86:	3708      	adds	r7, #8
    7c88:	46bd      	mov	sp, r7
    7c8a:	bd80      	pop	{r7, pc}
    7c8c:	00007911 	.word	0x00007911

00007c90 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7c90:	b480      	push	{r7}
    7c92:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7c94:	4b02      	ldr	r3, [pc, #8]	; (7ca0 <_tcc_get_timer+0x10>)
}
    7c96:	4618      	mov	r0, r3
    7c98:	46bd      	mov	sp, r7
    7c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c9e:	4770      	bx	lr
    7ca0:	200000c0 	.word	0x200000c0

00007ca4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7ca4:	b580      	push	{r7, lr}
    7ca6:	b084      	sub	sp, #16
    7ca8:	af00      	add	r7, sp, #0
    7caa:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7cac:	687b      	ldr	r3, [r7, #4]
    7cae:	68db      	ldr	r3, [r3, #12]
    7cb0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7cb2:	68f8      	ldr	r0, [r7, #12]
    7cb4:	4b08      	ldr	r3, [pc, #32]	; (7cd8 <_tcc_timer_set_irq+0x34>)
    7cb6:	4798      	blx	r3
    7cb8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7cba:	68bb      	ldr	r3, [r7, #8]
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d006      	beq.n	7cce <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7cc0:	68bb      	ldr	r3, [r7, #8]
    7cc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7cc6:	b2db      	uxtb	r3, r3
    7cc8:	4618      	mov	r0, r3
    7cca:	4b04      	ldr	r3, [pc, #16]	; (7cdc <_tcc_timer_set_irq+0x38>)
    7ccc:	4798      	blx	r3
	}
}
    7cce:	bf00      	nop
    7cd0:	3710      	adds	r7, #16
    7cd2:	46bd      	mov	sp, r7
    7cd4:	bd80      	pop	{r7, pc}
    7cd6:	bf00      	nop
    7cd8:	00007d51 	.word	0x00007d51
    7cdc:	00004641 	.word	0x00004641

00007ce0 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7ce0:	b580      	push	{r7, lr}
    7ce2:	b084      	sub	sp, #16
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ce8:	687b      	ldr	r3, [r7, #4]
    7cea:	68db      	ldr	r3, [r3, #12]
    7cec:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7cee:	68f8      	ldr	r0, [r7, #12]
    7cf0:	4b07      	ldr	r3, [pc, #28]	; (7d10 <tcc_interrupt_handler+0x30>)
    7cf2:	4798      	blx	r3
    7cf4:	4603      	mov	r3, r0
    7cf6:	2b00      	cmp	r3, #0
    7cf8:	d006      	beq.n	7d08 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7cfa:	68f8      	ldr	r0, [r7, #12]
    7cfc:	4b05      	ldr	r3, [pc, #20]	; (7d14 <tcc_interrupt_handler+0x34>)
    7cfe:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7d00:	687b      	ldr	r3, [r7, #4]
    7d02:	681b      	ldr	r3, [r3, #0]
    7d04:	6878      	ldr	r0, [r7, #4]
    7d06:	4798      	blx	r3
	}
}
    7d08:	bf00      	nop
    7d0a:	3710      	adds	r7, #16
    7d0c:	46bd      	mov	sp, r7
    7d0e:	bd80      	pop	{r7, pc}
    7d10:	00007849 	.word	0x00007849
    7d14:	0000786f 	.word	0x0000786f

00007d18 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7d18:	b580      	push	{r7, lr}
    7d1a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7d1c:	4b03      	ldr	r3, [pc, #12]	; (7d2c <TCC0_0_Handler+0x14>)
    7d1e:	681b      	ldr	r3, [r3, #0]
    7d20:	4618      	mov	r0, r3
    7d22:	4b03      	ldr	r3, [pc, #12]	; (7d30 <TCC0_0_Handler+0x18>)
    7d24:	4798      	blx	r3
}
    7d26:	bf00      	nop
    7d28:	bd80      	pop	{r7, pc}
    7d2a:	bf00      	nop
    7d2c:	20000934 	.word	0x20000934
    7d30:	00007ce1 	.word	0x00007ce1

00007d34 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7d34:	b580      	push	{r7, lr}
    7d36:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7d38:	4b03      	ldr	r3, [pc, #12]	; (7d48 <TCC1_0_Handler+0x14>)
    7d3a:	681b      	ldr	r3, [r3, #0]
    7d3c:	4618      	mov	r0, r3
    7d3e:	4b03      	ldr	r3, [pc, #12]	; (7d4c <TCC1_0_Handler+0x18>)
    7d40:	4798      	blx	r3
}
    7d42:	bf00      	nop
    7d44:	bd80      	pop	{r7, pc}
    7d46:	bf00      	nop
    7d48:	20000938 	.word	0x20000938
    7d4c:	00007ce1 	.word	0x00007ce1

00007d50 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7d50:	b480      	push	{r7}
    7d52:	b085      	sub	sp, #20
    7d54:	af00      	add	r7, sp, #0
    7d56:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7d58:	2300      	movs	r3, #0
    7d5a:	73fb      	strb	r3, [r7, #15]
    7d5c:	e015      	b.n	7d8a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7d5e:	7bfa      	ldrb	r2, [r7, #15]
    7d60:	490f      	ldr	r1, [pc, #60]	; (7da0 <_get_tcc_cfg+0x50>)
    7d62:	4613      	mov	r3, r2
    7d64:	005b      	lsls	r3, r3, #1
    7d66:	4413      	add	r3, r2
    7d68:	011b      	lsls	r3, r3, #4
    7d6a:	440b      	add	r3, r1
    7d6c:	681a      	ldr	r2, [r3, #0]
    7d6e:	687b      	ldr	r3, [r7, #4]
    7d70:	429a      	cmp	r2, r3
    7d72:	d107      	bne.n	7d84 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7d74:	7bfa      	ldrb	r2, [r7, #15]
    7d76:	4613      	mov	r3, r2
    7d78:	005b      	lsls	r3, r3, #1
    7d7a:	4413      	add	r3, r2
    7d7c:	011b      	lsls	r3, r3, #4
    7d7e:	4a08      	ldr	r2, [pc, #32]	; (7da0 <_get_tcc_cfg+0x50>)
    7d80:	4413      	add	r3, r2
    7d82:	e006      	b.n	7d92 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7d84:	7bfb      	ldrb	r3, [r7, #15]
    7d86:	3301      	adds	r3, #1
    7d88:	73fb      	strb	r3, [r7, #15]
    7d8a:	7bfb      	ldrb	r3, [r7, #15]
    7d8c:	2b01      	cmp	r3, #1
    7d8e:	d9e6      	bls.n	7d5e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7d90:	2300      	movs	r3, #0
}
    7d92:	4618      	mov	r0, r3
    7d94:	3714      	adds	r7, #20
    7d96:	46bd      	mov	sp, r7
    7d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d9c:	4770      	bx	lr
    7d9e:	bf00      	nop
    7da0:	20000060 	.word	0x20000060

00007da4 <__NVIC_EnableIRQ>:
{
    7da4:	b480      	push	{r7}
    7da6:	b083      	sub	sp, #12
    7da8:	af00      	add	r7, sp, #0
    7daa:	4603      	mov	r3, r0
    7dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7db2:	2b00      	cmp	r3, #0
    7db4:	db0b      	blt.n	7dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7db6:	4909      	ldr	r1, [pc, #36]	; (7ddc <__NVIC_EnableIRQ+0x38>)
    7db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dbc:	095b      	lsrs	r3, r3, #5
    7dbe:	88fa      	ldrh	r2, [r7, #6]
    7dc0:	f002 021f 	and.w	r2, r2, #31
    7dc4:	2001      	movs	r0, #1
    7dc6:	fa00 f202 	lsl.w	r2, r0, r2
    7dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dce:	bf00      	nop
    7dd0:	370c      	adds	r7, #12
    7dd2:	46bd      	mov	sp, r7
    7dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dd8:	4770      	bx	lr
    7dda:	bf00      	nop
    7ddc:	e000e100 	.word	0xe000e100

00007de0 <__NVIC_DisableIRQ>:
{
    7de0:	b480      	push	{r7}
    7de2:	b083      	sub	sp, #12
    7de4:	af00      	add	r7, sp, #0
    7de6:	4603      	mov	r3, r0
    7de8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dee:	2b00      	cmp	r3, #0
    7df0:	db10      	blt.n	7e14 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7df2:	490b      	ldr	r1, [pc, #44]	; (7e20 <__NVIC_DisableIRQ+0x40>)
    7df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7df8:	095b      	lsrs	r3, r3, #5
    7dfa:	88fa      	ldrh	r2, [r7, #6]
    7dfc:	f002 021f 	and.w	r2, r2, #31
    7e00:	2001      	movs	r0, #1
    7e02:	fa00 f202 	lsl.w	r2, r0, r2
    7e06:	3320      	adds	r3, #32
    7e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7e0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e10:	f3bf 8f6f 	isb	sy
}
    7e14:	bf00      	nop
    7e16:	370c      	adds	r7, #12
    7e18:	46bd      	mov	sp, r7
    7e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e1e:	4770      	bx	lr
    7e20:	e000e100 	.word	0xe000e100

00007e24 <__NVIC_ClearPendingIRQ>:
{
    7e24:	b480      	push	{r7}
    7e26:	b083      	sub	sp, #12
    7e28:	af00      	add	r7, sp, #0
    7e2a:	4603      	mov	r3, r0
    7e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e32:	2b00      	cmp	r3, #0
    7e34:	db0c      	blt.n	7e50 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e36:	4909      	ldr	r1, [pc, #36]	; (7e5c <__NVIC_ClearPendingIRQ+0x38>)
    7e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e3c:	095b      	lsrs	r3, r3, #5
    7e3e:	88fa      	ldrh	r2, [r7, #6]
    7e40:	f002 021f 	and.w	r2, r2, #31
    7e44:	2001      	movs	r0, #1
    7e46:	fa00 f202 	lsl.w	r2, r0, r2
    7e4a:	3360      	adds	r3, #96	; 0x60
    7e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e50:	bf00      	nop
    7e52:	370c      	adds	r7, #12
    7e54:	46bd      	mov	sp, r7
    7e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e5a:	4770      	bx	lr
    7e5c:	e000e100 	.word	0xe000e100

00007e60 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7e60:	b480      	push	{r7}
    7e62:	b083      	sub	sp, #12
    7e64:	af00      	add	r7, sp, #0
    7e66:	6078      	str	r0, [r7, #4]
    7e68:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e6a:	bf00      	nop
    7e6c:	687b      	ldr	r3, [r7, #4]
    7e6e:	691a      	ldr	r2, [r3, #16]
    7e70:	683b      	ldr	r3, [r7, #0]
    7e72:	4013      	ands	r3, r2
    7e74:	2b00      	cmp	r3, #0
    7e76:	d1f9      	bne.n	7e6c <hri_tc_wait_for_sync+0xc>
	};
}
    7e78:	bf00      	nop
    7e7a:	370c      	adds	r7, #12
    7e7c:	46bd      	mov	sp, r7
    7e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e82:	4770      	bx	lr

00007e84 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7e84:	b480      	push	{r7}
    7e86:	b083      	sub	sp, #12
    7e88:	af00      	add	r7, sp, #0
    7e8a:	6078      	str	r0, [r7, #4]
    7e8c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	691a      	ldr	r2, [r3, #16]
    7e92:	683b      	ldr	r3, [r7, #0]
    7e94:	4013      	ands	r3, r2
    7e96:	2b00      	cmp	r3, #0
    7e98:	bf14      	ite	ne
    7e9a:	2301      	movne	r3, #1
    7e9c:	2300      	moveq	r3, #0
    7e9e:	b2db      	uxtb	r3, r3
}
    7ea0:	4618      	mov	r0, r3
    7ea2:	370c      	adds	r7, #12
    7ea4:	46bd      	mov	sp, r7
    7ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eaa:	4770      	bx	lr

00007eac <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7eac:	b480      	push	{r7}
    7eae:	b083      	sub	sp, #12
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7eb4:	687b      	ldr	r3, [r7, #4]
    7eb6:	7a9b      	ldrb	r3, [r3, #10]
    7eb8:	b2db      	uxtb	r3, r3
    7eba:	f003 0301 	and.w	r3, r3, #1
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	bf14      	ite	ne
    7ec2:	2301      	movne	r3, #1
    7ec4:	2300      	moveq	r3, #0
    7ec6:	b2db      	uxtb	r3, r3
}
    7ec8:	4618      	mov	r0, r3
    7eca:	370c      	adds	r7, #12
    7ecc:	46bd      	mov	sp, r7
    7ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ed2:	4770      	bx	lr

00007ed4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7ed4:	b480      	push	{r7}
    7ed6:	b083      	sub	sp, #12
    7ed8:	af00      	add	r7, sp, #0
    7eda:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7edc:	687b      	ldr	r3, [r7, #4]
    7ede:	2201      	movs	r2, #1
    7ee0:	729a      	strb	r2, [r3, #10]
}
    7ee2:	bf00      	nop
    7ee4:	370c      	adds	r7, #12
    7ee6:	46bd      	mov	sp, r7
    7ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eec:	4770      	bx	lr

00007eee <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7eee:	b480      	push	{r7}
    7ef0:	b083      	sub	sp, #12
    7ef2:	af00      	add	r7, sp, #0
    7ef4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	2202      	movs	r2, #2
    7efa:	729a      	strb	r2, [r3, #10]
}
    7efc:	bf00      	nop
    7efe:	370c      	adds	r7, #12
    7f00:	46bd      	mov	sp, r7
    7f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f06:	4770      	bx	lr

00007f08 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7f08:	b480      	push	{r7}
    7f0a:	b083      	sub	sp, #12
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	2201      	movs	r2, #1
    7f14:	725a      	strb	r2, [r3, #9]
}
    7f16:	bf00      	nop
    7f18:	370c      	adds	r7, #12
    7f1a:	46bd      	mov	sp, r7
    7f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f20:	4770      	bx	lr

00007f22 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7f22:	b480      	push	{r7}
    7f24:	b083      	sub	sp, #12
    7f26:	af00      	add	r7, sp, #0
    7f28:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	7a5b      	ldrb	r3, [r3, #9]
    7f2e:	b2db      	uxtb	r3, r3
    7f30:	085b      	lsrs	r3, r3, #1
    7f32:	f003 0301 	and.w	r3, r3, #1
    7f36:	2b00      	cmp	r3, #0
    7f38:	bf14      	ite	ne
    7f3a:	2301      	movne	r3, #1
    7f3c:	2300      	moveq	r3, #0
    7f3e:	b2db      	uxtb	r3, r3
}
    7f40:	4618      	mov	r0, r3
    7f42:	370c      	adds	r7, #12
    7f44:	46bd      	mov	sp, r7
    7f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f4a:	4770      	bx	lr

00007f4c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7f4c:	b580      	push	{r7, lr}
    7f4e:	b082      	sub	sp, #8
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	681b      	ldr	r3, [r3, #0]
    7f58:	f043 0201 	orr.w	r2, r3, #1
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7f60:	2101      	movs	r1, #1
    7f62:	6878      	ldr	r0, [r7, #4]
    7f64:	4b02      	ldr	r3, [pc, #8]	; (7f70 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7f66:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7f68:	bf00      	nop
    7f6a:	3708      	adds	r7, #8
    7f6c:	46bd      	mov	sp, r7
    7f6e:	bd80      	pop	{r7, pc}
    7f70:	00007e61 	.word	0x00007e61

00007f74 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7f74:	b580      	push	{r7, lr}
    7f76:	b082      	sub	sp, #8
    7f78:	af00      	add	r7, sp, #0
    7f7a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7f7c:	687b      	ldr	r3, [r7, #4]
    7f7e:	681b      	ldr	r3, [r3, #0]
    7f80:	f043 0202 	orr.w	r2, r3, #2
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7f88:	2103      	movs	r1, #3
    7f8a:	6878      	ldr	r0, [r7, #4]
    7f8c:	4b02      	ldr	r3, [pc, #8]	; (7f98 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7f8e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7f90:	bf00      	nop
    7f92:	3708      	adds	r7, #8
    7f94:	46bd      	mov	sp, r7
    7f96:	bd80      	pop	{r7, pc}
    7f98:	00007e61 	.word	0x00007e61

00007f9c <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7f9c:	b580      	push	{r7, lr}
    7f9e:	b084      	sub	sp, #16
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7fa4:	2103      	movs	r1, #3
    7fa6:	6878      	ldr	r0, [r7, #4]
    7fa8:	4b09      	ldr	r3, [pc, #36]	; (7fd0 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7faa:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7fac:	687b      	ldr	r3, [r7, #4]
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7fb2:	68fb      	ldr	r3, [r7, #12]
    7fb4:	085b      	lsrs	r3, r3, #1
    7fb6:	f003 0301 	and.w	r3, r3, #1
    7fba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7fbc:	68fb      	ldr	r3, [r7, #12]
    7fbe:	2b00      	cmp	r3, #0
    7fc0:	bf14      	ite	ne
    7fc2:	2301      	movne	r3, #1
    7fc4:	2300      	moveq	r3, #0
    7fc6:	b2db      	uxtb	r3, r3
}
    7fc8:	4618      	mov	r0, r3
    7fca:	3710      	adds	r7, #16
    7fcc:	46bd      	mov	sp, r7
    7fce:	bd80      	pop	{r7, pc}
    7fd0:	00007e61 	.word	0x00007e61

00007fd4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7fd4:	b580      	push	{r7, lr}
    7fd6:	b082      	sub	sp, #8
    7fd8:	af00      	add	r7, sp, #0
    7fda:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7fdc:	687b      	ldr	r3, [r7, #4]
    7fde:	681b      	ldr	r3, [r3, #0]
    7fe0:	f023 0202 	bic.w	r2, r3, #2
    7fe4:	687b      	ldr	r3, [r7, #4]
    7fe6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7fe8:	2103      	movs	r1, #3
    7fea:	6878      	ldr	r0, [r7, #4]
    7fec:	4b02      	ldr	r3, [pc, #8]	; (7ff8 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7fee:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ff0:	bf00      	nop
    7ff2:	3708      	adds	r7, #8
    7ff4:	46bd      	mov	sp, r7
    7ff6:	bd80      	pop	{r7, pc}
    7ff8:	00007e61 	.word	0x00007e61

00007ffc <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7ffc:	b480      	push	{r7}
    7ffe:	b085      	sub	sp, #20
    8000:	af00      	add	r7, sp, #0
    8002:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8004:	687b      	ldr	r3, [r7, #4]
    8006:	681b      	ldr	r3, [r3, #0]
    8008:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    800a:	68fb      	ldr	r3, [r7, #12]
    800c:	089b      	lsrs	r3, r3, #2
    800e:	f003 0303 	and.w	r3, r3, #3
    8012:	60fb      	str	r3, [r7, #12]
	return tmp;
    8014:	68fb      	ldr	r3, [r7, #12]
}
    8016:	4618      	mov	r0, r3
    8018:	3714      	adds	r7, #20
    801a:	46bd      	mov	sp, r7
    801c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8020:	4770      	bx	lr
	...

00008024 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8024:	b580      	push	{r7, lr}
    8026:	b084      	sub	sp, #16
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
    802c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    802e:	2103      	movs	r1, #3
    8030:	6878      	ldr	r0, [r7, #4]
    8032:	4b07      	ldr	r3, [pc, #28]	; (8050 <hri_tc_get_CTRLA_reg+0x2c>)
    8034:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8036:	687b      	ldr	r3, [r7, #4]
    8038:	681b      	ldr	r3, [r3, #0]
    803a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    803c:	68fa      	ldr	r2, [r7, #12]
    803e:	683b      	ldr	r3, [r7, #0]
    8040:	4013      	ands	r3, r2
    8042:	60fb      	str	r3, [r7, #12]
	return tmp;
    8044:	68fb      	ldr	r3, [r7, #12]
}
    8046:	4618      	mov	r0, r3
    8048:	3710      	adds	r7, #16
    804a:	46bd      	mov	sp, r7
    804c:	bd80      	pop	{r7, pc}
    804e:	bf00      	nop
    8050:	00007e61 	.word	0x00007e61

00008054 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8054:	b580      	push	{r7, lr}
    8056:	b082      	sub	sp, #8
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
    805c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    805e:	687b      	ldr	r3, [r7, #4]
    8060:	683a      	ldr	r2, [r7, #0]
    8062:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8064:	2103      	movs	r1, #3
    8066:	6878      	ldr	r0, [r7, #4]
    8068:	4b02      	ldr	r3, [pc, #8]	; (8074 <hri_tc_write_CTRLA_reg+0x20>)
    806a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    806c:	bf00      	nop
    806e:	3708      	adds	r7, #8
    8070:	46bd      	mov	sp, r7
    8072:	bd80      	pop	{r7, pc}
    8074:	00007e61 	.word	0x00007e61

00008078 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8078:	b480      	push	{r7}
    807a:	b083      	sub	sp, #12
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
    8080:	460b      	mov	r3, r1
    8082:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	887a      	ldrh	r2, [r7, #2]
    8088:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    808a:	bf00      	nop
    808c:	370c      	adds	r7, #12
    808e:	46bd      	mov	sp, r7
    8090:	f85d 7b04 	ldr.w	r7, [sp], #4
    8094:	4770      	bx	lr

00008096 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8096:	b480      	push	{r7}
    8098:	b083      	sub	sp, #12
    809a:	af00      	add	r7, sp, #0
    809c:	6078      	str	r0, [r7, #4]
    809e:	460b      	mov	r3, r1
    80a0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    80a2:	687b      	ldr	r3, [r7, #4]
    80a4:	78fa      	ldrb	r2, [r7, #3]
    80a6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    80a8:	bf00      	nop
    80aa:	370c      	adds	r7, #12
    80ac:	46bd      	mov	sp, r7
    80ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    80b2:	4770      	bx	lr

000080b4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    80b4:	b480      	push	{r7}
    80b6:	b083      	sub	sp, #12
    80b8:	af00      	add	r7, sp, #0
    80ba:	6078      	str	r0, [r7, #4]
    80bc:	460b      	mov	r3, r1
    80be:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    80c0:	687b      	ldr	r3, [r7, #4]
    80c2:	78fa      	ldrb	r2, [r7, #3]
    80c4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    80c6:	bf00      	nop
    80c8:	370c      	adds	r7, #12
    80ca:	46bd      	mov	sp, r7
    80cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    80d0:	4770      	bx	lr
	...

000080d4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    80d4:	b580      	push	{r7, lr}
    80d6:	b082      	sub	sp, #8
    80d8:	af00      	add	r7, sp, #0
    80da:	6078      	str	r0, [r7, #4]
    80dc:	460b      	mov	r3, r1
    80de:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    80e0:	687b      	ldr	r3, [r7, #4]
    80e2:	78fa      	ldrb	r2, [r7, #3]
    80e4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    80e6:	2120      	movs	r1, #32
    80e8:	6878      	ldr	r0, [r7, #4]
    80ea:	4b03      	ldr	r3, [pc, #12]	; (80f8 <hri_tccount8_write_PER_reg+0x24>)
    80ec:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    80ee:	bf00      	nop
    80f0:	3708      	adds	r7, #8
    80f2:	46bd      	mov	sp, r7
    80f4:	bd80      	pop	{r7, pc}
    80f6:	bf00      	nop
    80f8:	00007e61 	.word	0x00007e61

000080fc <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    80fc:	b580      	push	{r7, lr}
    80fe:	b082      	sub	sp, #8
    8100:	af00      	add	r7, sp, #0
    8102:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8104:	2120      	movs	r1, #32
    8106:	6878      	ldr	r0, [r7, #4]
    8108:	4b04      	ldr	r3, [pc, #16]	; (811c <hri_tccount8_read_PER_reg+0x20>)
    810a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    810c:	687b      	ldr	r3, [r7, #4]
    810e:	7edb      	ldrb	r3, [r3, #27]
    8110:	b2db      	uxtb	r3, r3
}
    8112:	4618      	mov	r0, r3
    8114:	3708      	adds	r7, #8
    8116:	46bd      	mov	sp, r7
    8118:	bd80      	pop	{r7, pc}
    811a:	bf00      	nop
    811c:	00007e61 	.word	0x00007e61

00008120 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    8120:	b580      	push	{r7, lr}
    8122:	b082      	sub	sp, #8
    8124:	af00      	add	r7, sp, #0
    8126:	6078      	str	r0, [r7, #4]
    8128:	460b      	mov	r3, r1
    812a:	70fb      	strb	r3, [r7, #3]
    812c:	4613      	mov	r3, r2
    812e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8130:	78fb      	ldrb	r3, [r7, #3]
    8132:	687a      	ldr	r2, [r7, #4]
    8134:	4413      	add	r3, r2
    8136:	78ba      	ldrb	r2, [r7, #2]
    8138:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    813a:	21c0      	movs	r1, #192	; 0xc0
    813c:	6878      	ldr	r0, [r7, #4]
    813e:	4b03      	ldr	r3, [pc, #12]	; (814c <hri_tccount8_write_CC_reg+0x2c>)
    8140:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8142:	bf00      	nop
    8144:	3708      	adds	r7, #8
    8146:	46bd      	mov	sp, r7
    8148:	bd80      	pop	{r7, pc}
    814a:	bf00      	nop
    814c:	00007e61 	.word	0x00007e61

00008150 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8150:	b580      	push	{r7, lr}
    8152:	b082      	sub	sp, #8
    8154:	af00      	add	r7, sp, #0
    8156:	6078      	str	r0, [r7, #4]
    8158:	460b      	mov	r3, r1
    815a:	70fb      	strb	r3, [r7, #3]
    815c:	4613      	mov	r3, r2
    815e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8160:	78fb      	ldrb	r3, [r7, #3]
    8162:	687a      	ldr	r2, [r7, #4]
    8164:	330c      	adds	r3, #12
    8166:	005b      	lsls	r3, r3, #1
    8168:	4413      	add	r3, r2
    816a:	883a      	ldrh	r2, [r7, #0]
    816c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    816e:	21c0      	movs	r1, #192	; 0xc0
    8170:	6878      	ldr	r0, [r7, #4]
    8172:	4b03      	ldr	r3, [pc, #12]	; (8180 <hri_tccount16_write_CC_reg+0x30>)
    8174:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8176:	bf00      	nop
    8178:	3708      	adds	r7, #8
    817a:	46bd      	mov	sp, r7
    817c:	bd80      	pop	{r7, pc}
    817e:	bf00      	nop
    8180:	00007e61 	.word	0x00007e61

00008184 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8184:	b580      	push	{r7, lr}
    8186:	b082      	sub	sp, #8
    8188:	af00      	add	r7, sp, #0
    818a:	6078      	str	r0, [r7, #4]
    818c:	460b      	mov	r3, r1
    818e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8190:	21c0      	movs	r1, #192	; 0xc0
    8192:	6878      	ldr	r0, [r7, #4]
    8194:	4b06      	ldr	r3, [pc, #24]	; (81b0 <hri_tccount16_read_CC_reg+0x2c>)
    8196:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8198:	78fb      	ldrb	r3, [r7, #3]
    819a:	687a      	ldr	r2, [r7, #4]
    819c:	330c      	adds	r3, #12
    819e:	005b      	lsls	r3, r3, #1
    81a0:	4413      	add	r3, r2
    81a2:	889b      	ldrh	r3, [r3, #4]
    81a4:	b29b      	uxth	r3, r3
}
    81a6:	4618      	mov	r0, r3
    81a8:	3708      	adds	r7, #8
    81aa:	46bd      	mov	sp, r7
    81ac:	bd80      	pop	{r7, pc}
    81ae:	bf00      	nop
    81b0:	00007e61 	.word	0x00007e61

000081b4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    81b4:	b580      	push	{r7, lr}
    81b6:	b084      	sub	sp, #16
    81b8:	af00      	add	r7, sp, #0
    81ba:	60f8      	str	r0, [r7, #12]
    81bc:	460b      	mov	r3, r1
    81be:	607a      	str	r2, [r7, #4]
    81c0:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    81c2:	7afb      	ldrb	r3, [r7, #11]
    81c4:	68fa      	ldr	r2, [r7, #12]
    81c6:	3306      	adds	r3, #6
    81c8:	009b      	lsls	r3, r3, #2
    81ca:	4413      	add	r3, r2
    81cc:	687a      	ldr	r2, [r7, #4]
    81ce:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    81d0:	21c0      	movs	r1, #192	; 0xc0
    81d2:	68f8      	ldr	r0, [r7, #12]
    81d4:	4b02      	ldr	r3, [pc, #8]	; (81e0 <hri_tccount32_write_CC_reg+0x2c>)
    81d6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    81d8:	bf00      	nop
    81da:	3710      	adds	r7, #16
    81dc:	46bd      	mov	sp, r7
    81de:	bd80      	pop	{r7, pc}
    81e0:	00007e61 	.word	0x00007e61

000081e4 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    81e4:	b580      	push	{r7, lr}
    81e6:	b082      	sub	sp, #8
    81e8:	af00      	add	r7, sp, #0
    81ea:	6078      	str	r0, [r7, #4]
    81ec:	460b      	mov	r3, r1
    81ee:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    81f0:	21c0      	movs	r1, #192	; 0xc0
    81f2:	6878      	ldr	r0, [r7, #4]
    81f4:	4b05      	ldr	r3, [pc, #20]	; (820c <hri_tccount32_read_CC_reg+0x28>)
    81f6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    81f8:	78fb      	ldrb	r3, [r7, #3]
    81fa:	687a      	ldr	r2, [r7, #4]
    81fc:	3306      	adds	r3, #6
    81fe:	009b      	lsls	r3, r3, #2
    8200:	4413      	add	r3, r2
    8202:	685b      	ldr	r3, [r3, #4]
}
    8204:	4618      	mov	r0, r3
    8206:	3708      	adds	r7, #8
    8208:	46bd      	mov	sp, r7
    820a:	bd80      	pop	{r7, pc}
    820c:	00007e61 	.word	0x00007e61

00008210 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    8210:	b580      	push	{r7, lr}
    8212:	b084      	sub	sp, #16
    8214:	af00      	add	r7, sp, #0
    8216:	6078      	str	r0, [r7, #4]
    8218:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    821a:	6838      	ldr	r0, [r7, #0]
    821c:	4b93      	ldr	r3, [pc, #588]	; (846c <_tc_timer_init+0x25c>)
    821e:	4798      	blx	r3
    8220:	4603      	mov	r3, r0
    8222:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8224:	687b      	ldr	r3, [r7, #4]
    8226:	683a      	ldr	r2, [r7, #0]
    8228:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    822a:	22a4      	movs	r2, #164	; 0xa4
    822c:	4990      	ldr	r1, [pc, #576]	; (8470 <_tc_timer_init+0x260>)
    822e:	2001      	movs	r0, #1
    8230:	4b90      	ldr	r3, [pc, #576]	; (8474 <_tc_timer_init+0x264>)
    8232:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8234:	2101      	movs	r1, #1
    8236:	6838      	ldr	r0, [r7, #0]
    8238:	4b8f      	ldr	r3, [pc, #572]	; (8478 <_tc_timer_init+0x268>)
    823a:	4798      	blx	r3
    823c:	4603      	mov	r3, r0
    823e:	f083 0301 	eor.w	r3, r3, #1
    8242:	b2db      	uxtb	r3, r3
    8244:	2b00      	cmp	r3, #0
    8246:	d011      	beq.n	826c <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8248:	2102      	movs	r1, #2
    824a:	6838      	ldr	r0, [r7, #0]
    824c:	4b8b      	ldr	r3, [pc, #556]	; (847c <_tc_timer_init+0x26c>)
    824e:	4798      	blx	r3
    8250:	4603      	mov	r3, r0
    8252:	2b00      	cmp	r3, #0
    8254:	d006      	beq.n	8264 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8256:	6838      	ldr	r0, [r7, #0]
    8258:	4b89      	ldr	r3, [pc, #548]	; (8480 <_tc_timer_init+0x270>)
    825a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    825c:	2102      	movs	r1, #2
    825e:	6838      	ldr	r0, [r7, #0]
    8260:	4b88      	ldr	r3, [pc, #544]	; (8484 <_tc_timer_init+0x274>)
    8262:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8264:	2101      	movs	r1, #1
    8266:	6838      	ldr	r0, [r7, #0]
    8268:	4b87      	ldr	r3, [pc, #540]	; (8488 <_tc_timer_init+0x278>)
    826a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    826c:	2101      	movs	r1, #1
    826e:	6838      	ldr	r0, [r7, #0]
    8270:	4b84      	ldr	r3, [pc, #528]	; (8484 <_tc_timer_init+0x274>)
    8272:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8274:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8278:	4984      	ldr	r1, [pc, #528]	; (848c <_tc_timer_init+0x27c>)
    827a:	4613      	mov	r3, r2
    827c:	009b      	lsls	r3, r3, #2
    827e:	4413      	add	r3, r2
    8280:	009b      	lsls	r3, r3, #2
    8282:	440b      	add	r3, r1
    8284:	3304      	adds	r3, #4
    8286:	681b      	ldr	r3, [r3, #0]
    8288:	4619      	mov	r1, r3
    828a:	6838      	ldr	r0, [r7, #0]
    828c:	4b7e      	ldr	r3, [pc, #504]	; (8488 <_tc_timer_init+0x278>)
    828e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8290:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8294:	497d      	ldr	r1, [pc, #500]	; (848c <_tc_timer_init+0x27c>)
    8296:	4613      	mov	r3, r2
    8298:	009b      	lsls	r3, r3, #2
    829a:	4413      	add	r3, r2
    829c:	009b      	lsls	r3, r3, #2
    829e:	440b      	add	r3, r1
    82a0:	330a      	adds	r3, #10
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	4619      	mov	r1, r3
    82a6:	6838      	ldr	r0, [r7, #0]
    82a8:	4b79      	ldr	r3, [pc, #484]	; (8490 <_tc_timer_init+0x280>)
    82aa:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    82ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82b0:	4976      	ldr	r1, [pc, #472]	; (848c <_tc_timer_init+0x27c>)
    82b2:	4613      	mov	r3, r2
    82b4:	009b      	lsls	r3, r3, #2
    82b6:	4413      	add	r3, r2
    82b8:	009b      	lsls	r3, r3, #2
    82ba:	440b      	add	r3, r1
    82bc:	3308      	adds	r3, #8
    82be:	881b      	ldrh	r3, [r3, #0]
    82c0:	4619      	mov	r1, r3
    82c2:	6838      	ldr	r0, [r7, #0]
    82c4:	4b73      	ldr	r3, [pc, #460]	; (8494 <_tc_timer_init+0x284>)
    82c6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    82c8:	2101      	movs	r1, #1
    82ca:	6838      	ldr	r0, [r7, #0]
    82cc:	4b72      	ldr	r3, [pc, #456]	; (8498 <_tc_timer_init+0x288>)
    82ce:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    82d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82d4:	496d      	ldr	r1, [pc, #436]	; (848c <_tc_timer_init+0x27c>)
    82d6:	4613      	mov	r3, r2
    82d8:	009b      	lsls	r3, r3, #2
    82da:	4413      	add	r3, r2
    82dc:	009b      	lsls	r3, r3, #2
    82de:	440b      	add	r3, r1
    82e0:	3304      	adds	r3, #4
    82e2:	681b      	ldr	r3, [r3, #0]
    82e4:	f003 030c 	and.w	r3, r3, #12
    82e8:	2b08      	cmp	r3, #8
    82ea:	d11e      	bne.n	832a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    82ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82f0:	4966      	ldr	r1, [pc, #408]	; (848c <_tc_timer_init+0x27c>)
    82f2:	4613      	mov	r3, r2
    82f4:	009b      	lsls	r3, r3, #2
    82f6:	4413      	add	r3, r2
    82f8:	009b      	lsls	r3, r3, #2
    82fa:	440b      	add	r3, r1
    82fc:	330c      	adds	r3, #12
    82fe:	681b      	ldr	r3, [r3, #0]
    8300:	461a      	mov	r2, r3
    8302:	2100      	movs	r1, #0
    8304:	6838      	ldr	r0, [r7, #0]
    8306:	4b65      	ldr	r3, [pc, #404]	; (849c <_tc_timer_init+0x28c>)
    8308:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    830a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    830e:	495f      	ldr	r1, [pc, #380]	; (848c <_tc_timer_init+0x27c>)
    8310:	4613      	mov	r3, r2
    8312:	009b      	lsls	r3, r3, #2
    8314:	4413      	add	r3, r2
    8316:	009b      	lsls	r3, r3, #2
    8318:	440b      	add	r3, r1
    831a:	3310      	adds	r3, #16
    831c:	681b      	ldr	r3, [r3, #0]
    831e:	461a      	mov	r2, r3
    8320:	2101      	movs	r1, #1
    8322:	6838      	ldr	r0, [r7, #0]
    8324:	4b5d      	ldr	r3, [pc, #372]	; (849c <_tc_timer_init+0x28c>)
    8326:	4798      	blx	r3
    8328:	e06a      	b.n	8400 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    832a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    832e:	4957      	ldr	r1, [pc, #348]	; (848c <_tc_timer_init+0x27c>)
    8330:	4613      	mov	r3, r2
    8332:	009b      	lsls	r3, r3, #2
    8334:	4413      	add	r3, r2
    8336:	009b      	lsls	r3, r3, #2
    8338:	440b      	add	r3, r1
    833a:	3304      	adds	r3, #4
    833c:	681b      	ldr	r3, [r3, #0]
    833e:	f003 030c 	and.w	r3, r3, #12
    8342:	2b00      	cmp	r3, #0
    8344:	d120      	bne.n	8388 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8346:	f997 200f 	ldrsb.w	r2, [r7, #15]
    834a:	4950      	ldr	r1, [pc, #320]	; (848c <_tc_timer_init+0x27c>)
    834c:	4613      	mov	r3, r2
    834e:	009b      	lsls	r3, r3, #2
    8350:	4413      	add	r3, r2
    8352:	009b      	lsls	r3, r3, #2
    8354:	440b      	add	r3, r1
    8356:	330c      	adds	r3, #12
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	b29b      	uxth	r3, r3
    835c:	461a      	mov	r2, r3
    835e:	2100      	movs	r1, #0
    8360:	6838      	ldr	r0, [r7, #0]
    8362:	4b4f      	ldr	r3, [pc, #316]	; (84a0 <_tc_timer_init+0x290>)
    8364:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8366:	f997 200f 	ldrsb.w	r2, [r7, #15]
    836a:	4948      	ldr	r1, [pc, #288]	; (848c <_tc_timer_init+0x27c>)
    836c:	4613      	mov	r3, r2
    836e:	009b      	lsls	r3, r3, #2
    8370:	4413      	add	r3, r2
    8372:	009b      	lsls	r3, r3, #2
    8374:	440b      	add	r3, r1
    8376:	3310      	adds	r3, #16
    8378:	681b      	ldr	r3, [r3, #0]
    837a:	b29b      	uxth	r3, r3
    837c:	461a      	mov	r2, r3
    837e:	2101      	movs	r1, #1
    8380:	6838      	ldr	r0, [r7, #0]
    8382:	4b47      	ldr	r3, [pc, #284]	; (84a0 <_tc_timer_init+0x290>)
    8384:	4798      	blx	r3
    8386:	e03b      	b.n	8400 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8388:	f997 200f 	ldrsb.w	r2, [r7, #15]
    838c:	493f      	ldr	r1, [pc, #252]	; (848c <_tc_timer_init+0x27c>)
    838e:	4613      	mov	r3, r2
    8390:	009b      	lsls	r3, r3, #2
    8392:	4413      	add	r3, r2
    8394:	009b      	lsls	r3, r3, #2
    8396:	440b      	add	r3, r1
    8398:	3304      	adds	r3, #4
    839a:	681b      	ldr	r3, [r3, #0]
    839c:	f003 030c 	and.w	r3, r3, #12
    83a0:	2b04      	cmp	r3, #4
    83a2:	d12d      	bne.n	8400 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    83a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83a8:	4938      	ldr	r1, [pc, #224]	; (848c <_tc_timer_init+0x27c>)
    83aa:	4613      	mov	r3, r2
    83ac:	009b      	lsls	r3, r3, #2
    83ae:	4413      	add	r3, r2
    83b0:	009b      	lsls	r3, r3, #2
    83b2:	440b      	add	r3, r1
    83b4:	330c      	adds	r3, #12
    83b6:	681b      	ldr	r3, [r3, #0]
    83b8:	b2db      	uxtb	r3, r3
    83ba:	461a      	mov	r2, r3
    83bc:	2100      	movs	r1, #0
    83be:	6838      	ldr	r0, [r7, #0]
    83c0:	4b38      	ldr	r3, [pc, #224]	; (84a4 <_tc_timer_init+0x294>)
    83c2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    83c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83c8:	4930      	ldr	r1, [pc, #192]	; (848c <_tc_timer_init+0x27c>)
    83ca:	4613      	mov	r3, r2
    83cc:	009b      	lsls	r3, r3, #2
    83ce:	4413      	add	r3, r2
    83d0:	009b      	lsls	r3, r3, #2
    83d2:	440b      	add	r3, r1
    83d4:	3310      	adds	r3, #16
    83d6:	681b      	ldr	r3, [r3, #0]
    83d8:	b2db      	uxtb	r3, r3
    83da:	461a      	mov	r2, r3
    83dc:	2101      	movs	r1, #1
    83de:	6838      	ldr	r0, [r7, #0]
    83e0:	4b30      	ldr	r3, [pc, #192]	; (84a4 <_tc_timer_init+0x294>)
    83e2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    83e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83e8:	4928      	ldr	r1, [pc, #160]	; (848c <_tc_timer_init+0x27c>)
    83ea:	4613      	mov	r3, r2
    83ec:	009b      	lsls	r3, r3, #2
    83ee:	4413      	add	r3, r2
    83f0:	009b      	lsls	r3, r3, #2
    83f2:	440b      	add	r3, r1
    83f4:	330b      	adds	r3, #11
    83f6:	781b      	ldrb	r3, [r3, #0]
    83f8:	4619      	mov	r1, r3
    83fa:	6838      	ldr	r0, [r7, #0]
    83fc:	4b2a      	ldr	r3, [pc, #168]	; (84a8 <_tc_timer_init+0x298>)
    83fe:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    8400:	6838      	ldr	r0, [r7, #0]
    8402:	4b2a      	ldr	r3, [pc, #168]	; (84ac <_tc_timer_init+0x29c>)
    8404:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8406:	6879      	ldr	r1, [r7, #4]
    8408:	6838      	ldr	r0, [r7, #0]
    840a:	4b29      	ldr	r3, [pc, #164]	; (84b0 <_tc_timer_init+0x2a0>)
    840c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    840e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8412:	491e      	ldr	r1, [pc, #120]	; (848c <_tc_timer_init+0x27c>)
    8414:	4613      	mov	r3, r2
    8416:	009b      	lsls	r3, r3, #2
    8418:	4413      	add	r3, r2
    841a:	009b      	lsls	r3, r3, #2
    841c:	440b      	add	r3, r1
    841e:	3302      	adds	r3, #2
    8420:	f9b3 3000 	ldrsh.w	r3, [r3]
    8424:	4618      	mov	r0, r3
    8426:	4b23      	ldr	r3, [pc, #140]	; (84b4 <_tc_timer_init+0x2a4>)
    8428:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    842a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    842e:	4917      	ldr	r1, [pc, #92]	; (848c <_tc_timer_init+0x27c>)
    8430:	4613      	mov	r3, r2
    8432:	009b      	lsls	r3, r3, #2
    8434:	4413      	add	r3, r2
    8436:	009b      	lsls	r3, r3, #2
    8438:	440b      	add	r3, r1
    843a:	3302      	adds	r3, #2
    843c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8440:	4618      	mov	r0, r3
    8442:	4b1d      	ldr	r3, [pc, #116]	; (84b8 <_tc_timer_init+0x2a8>)
    8444:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8446:	f997 200f 	ldrsb.w	r2, [r7, #15]
    844a:	4910      	ldr	r1, [pc, #64]	; (848c <_tc_timer_init+0x27c>)
    844c:	4613      	mov	r3, r2
    844e:	009b      	lsls	r3, r3, #2
    8450:	4413      	add	r3, r2
    8452:	009b      	lsls	r3, r3, #2
    8454:	440b      	add	r3, r1
    8456:	3302      	adds	r3, #2
    8458:	f9b3 3000 	ldrsh.w	r3, [r3]
    845c:	4618      	mov	r0, r3
    845e:	4b17      	ldr	r3, [pc, #92]	; (84bc <_tc_timer_init+0x2ac>)
    8460:	4798      	blx	r3

	return ERR_NONE;
    8462:	2300      	movs	r3, #0
}
    8464:	4618      	mov	r0, r3
    8466:	3710      	adds	r7, #16
    8468:	46bd      	mov	sp, r7
    846a:	bd80      	pop	{r7, pc}
    846c:	00008a61 	.word	0x00008a61
    8470:	00013380 	.word	0x00013380
    8474:	00003df5 	.word	0x00003df5
    8478:	00007e85 	.word	0x00007e85
    847c:	00008025 	.word	0x00008025
    8480:	00007fd5 	.word	0x00007fd5
    8484:	00007e61 	.word	0x00007e61
    8488:	00008055 	.word	0x00008055
    848c:	200000e0 	.word	0x200000e0
    8490:	000080b5 	.word	0x000080b5
    8494:	00008079 	.word	0x00008079
    8498:	00008097 	.word	0x00008097
    849c:	000081b5 	.word	0x000081b5
    84a0:	00008151 	.word	0x00008151
    84a4:	00008121 	.word	0x00008121
    84a8:	000080d5 	.word	0x000080d5
    84ac:	00007f09 	.word	0x00007f09
    84b0:	00008ac9 	.word	0x00008ac9
    84b4:	00007de1 	.word	0x00007de1
    84b8:	00007e25 	.word	0x00007e25
    84bc:	00007da5 	.word	0x00007da5

000084c0 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    84c0:	b580      	push	{r7, lr}
    84c2:	b084      	sub	sp, #16
    84c4:	af00      	add	r7, sp, #0
    84c6:	6078      	str	r0, [r7, #4]
    84c8:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    84ca:	6838      	ldr	r0, [r7, #0]
    84cc:	4b73      	ldr	r3, [pc, #460]	; (869c <_pwm_init+0x1dc>)
    84ce:	4798      	blx	r3
    84d0:	4603      	mov	r3, r0
    84d2:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	683a      	ldr	r2, [r7, #0]
    84d8:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    84da:	2101      	movs	r1, #1
    84dc:	6838      	ldr	r0, [r7, #0]
    84de:	4b70      	ldr	r3, [pc, #448]	; (86a0 <_pwm_init+0x1e0>)
    84e0:	4798      	blx	r3
    84e2:	4603      	mov	r3, r0
    84e4:	f083 0301 	eor.w	r3, r3, #1
    84e8:	b2db      	uxtb	r3, r3
    84ea:	2b00      	cmp	r3, #0
    84ec:	d011      	beq.n	8512 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    84ee:	2102      	movs	r1, #2
    84f0:	6838      	ldr	r0, [r7, #0]
    84f2:	4b6c      	ldr	r3, [pc, #432]	; (86a4 <_pwm_init+0x1e4>)
    84f4:	4798      	blx	r3
    84f6:	4603      	mov	r3, r0
    84f8:	2b00      	cmp	r3, #0
    84fa:	d006      	beq.n	850a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    84fc:	6838      	ldr	r0, [r7, #0]
    84fe:	4b6a      	ldr	r3, [pc, #424]	; (86a8 <_pwm_init+0x1e8>)
    8500:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8502:	2102      	movs	r1, #2
    8504:	6838      	ldr	r0, [r7, #0]
    8506:	4b69      	ldr	r3, [pc, #420]	; (86ac <_pwm_init+0x1ec>)
    8508:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    850a:	2101      	movs	r1, #1
    850c:	6838      	ldr	r0, [r7, #0]
    850e:	4b68      	ldr	r3, [pc, #416]	; (86b0 <_pwm_init+0x1f0>)
    8510:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8512:	2101      	movs	r1, #1
    8514:	6838      	ldr	r0, [r7, #0]
    8516:	4b65      	ldr	r3, [pc, #404]	; (86ac <_pwm_init+0x1ec>)
    8518:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    851a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    851e:	4965      	ldr	r1, [pc, #404]	; (86b4 <_pwm_init+0x1f4>)
    8520:	4613      	mov	r3, r2
    8522:	009b      	lsls	r3, r3, #2
    8524:	4413      	add	r3, r2
    8526:	009b      	lsls	r3, r3, #2
    8528:	440b      	add	r3, r1
    852a:	3304      	adds	r3, #4
    852c:	681b      	ldr	r3, [r3, #0]
    852e:	4619      	mov	r1, r3
    8530:	6838      	ldr	r0, [r7, #0]
    8532:	4b5f      	ldr	r3, [pc, #380]	; (86b0 <_pwm_init+0x1f0>)
    8534:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8536:	f997 200f 	ldrsb.w	r2, [r7, #15]
    853a:	495e      	ldr	r1, [pc, #376]	; (86b4 <_pwm_init+0x1f4>)
    853c:	4613      	mov	r3, r2
    853e:	009b      	lsls	r3, r3, #2
    8540:	4413      	add	r3, r2
    8542:	009b      	lsls	r3, r3, #2
    8544:	440b      	add	r3, r1
    8546:	330a      	adds	r3, #10
    8548:	781b      	ldrb	r3, [r3, #0]
    854a:	4619      	mov	r1, r3
    854c:	6838      	ldr	r0, [r7, #0]
    854e:	4b5a      	ldr	r3, [pc, #360]	; (86b8 <_pwm_init+0x1f8>)
    8550:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8552:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8556:	4957      	ldr	r1, [pc, #348]	; (86b4 <_pwm_init+0x1f4>)
    8558:	4613      	mov	r3, r2
    855a:	009b      	lsls	r3, r3, #2
    855c:	4413      	add	r3, r2
    855e:	009b      	lsls	r3, r3, #2
    8560:	440b      	add	r3, r1
    8562:	3308      	adds	r3, #8
    8564:	881b      	ldrh	r3, [r3, #0]
    8566:	4619      	mov	r1, r3
    8568:	6838      	ldr	r0, [r7, #0]
    856a:	4b54      	ldr	r3, [pc, #336]	; (86bc <_pwm_init+0x1fc>)
    856c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    856e:	2103      	movs	r1, #3
    8570:	6838      	ldr	r0, [r7, #0]
    8572:	4b53      	ldr	r3, [pc, #332]	; (86c0 <_pwm_init+0x200>)
    8574:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8576:	f997 200f 	ldrsb.w	r2, [r7, #15]
    857a:	494e      	ldr	r1, [pc, #312]	; (86b4 <_pwm_init+0x1f4>)
    857c:	4613      	mov	r3, r2
    857e:	009b      	lsls	r3, r3, #2
    8580:	4413      	add	r3, r2
    8582:	009b      	lsls	r3, r3, #2
    8584:	440b      	add	r3, r1
    8586:	3304      	adds	r3, #4
    8588:	681b      	ldr	r3, [r3, #0]
    858a:	f003 030c 	and.w	r3, r3, #12
    858e:	2b08      	cmp	r3, #8
    8590:	d11e      	bne.n	85d0 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8592:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8596:	4947      	ldr	r1, [pc, #284]	; (86b4 <_pwm_init+0x1f4>)
    8598:	4613      	mov	r3, r2
    859a:	009b      	lsls	r3, r3, #2
    859c:	4413      	add	r3, r2
    859e:	009b      	lsls	r3, r3, #2
    85a0:	440b      	add	r3, r1
    85a2:	330c      	adds	r3, #12
    85a4:	681b      	ldr	r3, [r3, #0]
    85a6:	461a      	mov	r2, r3
    85a8:	2100      	movs	r1, #0
    85aa:	6838      	ldr	r0, [r7, #0]
    85ac:	4b45      	ldr	r3, [pc, #276]	; (86c4 <_pwm_init+0x204>)
    85ae:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    85b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85b4:	493f      	ldr	r1, [pc, #252]	; (86b4 <_pwm_init+0x1f4>)
    85b6:	4613      	mov	r3, r2
    85b8:	009b      	lsls	r3, r3, #2
    85ba:	4413      	add	r3, r2
    85bc:	009b      	lsls	r3, r3, #2
    85be:	440b      	add	r3, r1
    85c0:	3310      	adds	r3, #16
    85c2:	681b      	ldr	r3, [r3, #0]
    85c4:	461a      	mov	r2, r3
    85c6:	2101      	movs	r1, #1
    85c8:	6838      	ldr	r0, [r7, #0]
    85ca:	4b3e      	ldr	r3, [pc, #248]	; (86c4 <_pwm_init+0x204>)
    85cc:	4798      	blx	r3
    85ce:	e031      	b.n	8634 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    85d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85d4:	4937      	ldr	r1, [pc, #220]	; (86b4 <_pwm_init+0x1f4>)
    85d6:	4613      	mov	r3, r2
    85d8:	009b      	lsls	r3, r3, #2
    85da:	4413      	add	r3, r2
    85dc:	009b      	lsls	r3, r3, #2
    85de:	440b      	add	r3, r1
    85e0:	3304      	adds	r3, #4
    85e2:	681b      	ldr	r3, [r3, #0]
    85e4:	f003 030c 	and.w	r3, r3, #12
    85e8:	2b00      	cmp	r3, #0
    85ea:	d120      	bne.n	862e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    85ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85f0:	4930      	ldr	r1, [pc, #192]	; (86b4 <_pwm_init+0x1f4>)
    85f2:	4613      	mov	r3, r2
    85f4:	009b      	lsls	r3, r3, #2
    85f6:	4413      	add	r3, r2
    85f8:	009b      	lsls	r3, r3, #2
    85fa:	440b      	add	r3, r1
    85fc:	330c      	adds	r3, #12
    85fe:	681b      	ldr	r3, [r3, #0]
    8600:	b29b      	uxth	r3, r3
    8602:	461a      	mov	r2, r3
    8604:	2100      	movs	r1, #0
    8606:	6838      	ldr	r0, [r7, #0]
    8608:	4b2f      	ldr	r3, [pc, #188]	; (86c8 <_pwm_init+0x208>)
    860a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    860c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8610:	4928      	ldr	r1, [pc, #160]	; (86b4 <_pwm_init+0x1f4>)
    8612:	4613      	mov	r3, r2
    8614:	009b      	lsls	r3, r3, #2
    8616:	4413      	add	r3, r2
    8618:	009b      	lsls	r3, r3, #2
    861a:	440b      	add	r3, r1
    861c:	3310      	adds	r3, #16
    861e:	681b      	ldr	r3, [r3, #0]
    8620:	b29b      	uxth	r3, r3
    8622:	461a      	mov	r2, r3
    8624:	2101      	movs	r1, #1
    8626:	6838      	ldr	r0, [r7, #0]
    8628:	4b27      	ldr	r3, [pc, #156]	; (86c8 <_pwm_init+0x208>)
    862a:	4798      	blx	r3
    862c:	e002      	b.n	8634 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    862e:	f04f 33ff 	mov.w	r3, #4294967295
    8632:	e02e      	b.n	8692 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8634:	6879      	ldr	r1, [r7, #4]
    8636:	6838      	ldr	r0, [r7, #0]
    8638:	4b24      	ldr	r3, [pc, #144]	; (86cc <_pwm_init+0x20c>)
    863a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    863c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8640:	491c      	ldr	r1, [pc, #112]	; (86b4 <_pwm_init+0x1f4>)
    8642:	4613      	mov	r3, r2
    8644:	009b      	lsls	r3, r3, #2
    8646:	4413      	add	r3, r2
    8648:	009b      	lsls	r3, r3, #2
    864a:	440b      	add	r3, r1
    864c:	3302      	adds	r3, #2
    864e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8652:	4618      	mov	r0, r3
    8654:	4b1e      	ldr	r3, [pc, #120]	; (86d0 <_pwm_init+0x210>)
    8656:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8658:	f997 200f 	ldrsb.w	r2, [r7, #15]
    865c:	4915      	ldr	r1, [pc, #84]	; (86b4 <_pwm_init+0x1f4>)
    865e:	4613      	mov	r3, r2
    8660:	009b      	lsls	r3, r3, #2
    8662:	4413      	add	r3, r2
    8664:	009b      	lsls	r3, r3, #2
    8666:	440b      	add	r3, r1
    8668:	3302      	adds	r3, #2
    866a:	f9b3 3000 	ldrsh.w	r3, [r3]
    866e:	4618      	mov	r0, r3
    8670:	4b18      	ldr	r3, [pc, #96]	; (86d4 <_pwm_init+0x214>)
    8672:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8674:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8678:	490e      	ldr	r1, [pc, #56]	; (86b4 <_pwm_init+0x1f4>)
    867a:	4613      	mov	r3, r2
    867c:	009b      	lsls	r3, r3, #2
    867e:	4413      	add	r3, r2
    8680:	009b      	lsls	r3, r3, #2
    8682:	440b      	add	r3, r1
    8684:	3302      	adds	r3, #2
    8686:	f9b3 3000 	ldrsh.w	r3, [r3]
    868a:	4618      	mov	r0, r3
    868c:	4b12      	ldr	r3, [pc, #72]	; (86d8 <_pwm_init+0x218>)
    868e:	4798      	blx	r3

	return 0;
    8690:	2300      	movs	r3, #0
}
    8692:	4618      	mov	r0, r3
    8694:	3710      	adds	r7, #16
    8696:	46bd      	mov	sp, r7
    8698:	bd80      	pop	{r7, pc}
    869a:	bf00      	nop
    869c:	00008a61 	.word	0x00008a61
    86a0:	00007e85 	.word	0x00007e85
    86a4:	00008025 	.word	0x00008025
    86a8:	00007fd5 	.word	0x00007fd5
    86ac:	00007e61 	.word	0x00007e61
    86b0:	00008055 	.word	0x00008055
    86b4:	200000e0 	.word	0x200000e0
    86b8:	000080b5 	.word	0x000080b5
    86bc:	00008079 	.word	0x00008079
    86c0:	00008097 	.word	0x00008097
    86c4:	000081b5 	.word	0x000081b5
    86c8:	00008151 	.word	0x00008151
    86cc:	00008ac9 	.word	0x00008ac9
    86d0:	00007de1 	.word	0x00007de1
    86d4:	00007e25 	.word	0x00007e25
    86d8:	00007da5 	.word	0x00007da5

000086dc <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    86dc:	b580      	push	{r7, lr}
    86de:	b084      	sub	sp, #16
    86e0:	af00      	add	r7, sp, #0
    86e2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    86e4:	687b      	ldr	r3, [r7, #4]
    86e6:	68db      	ldr	r3, [r3, #12]
    86e8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    86ea:	68f8      	ldr	r0, [r7, #12]
    86ec:	4b10      	ldr	r3, [pc, #64]	; (8730 <_tc_timer_deinit+0x54>)
    86ee:	4798      	blx	r3
    86f0:	4603      	mov	r3, r0
    86f2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    86f4:	22f9      	movs	r2, #249	; 0xf9
    86f6:	490f      	ldr	r1, [pc, #60]	; (8734 <_tc_timer_deinit+0x58>)
    86f8:	2001      	movs	r0, #1
    86fa:	4b0f      	ldr	r3, [pc, #60]	; (8738 <_tc_timer_deinit+0x5c>)
    86fc:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    86fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8702:	490e      	ldr	r1, [pc, #56]	; (873c <_tc_timer_deinit+0x60>)
    8704:	4613      	mov	r3, r2
    8706:	009b      	lsls	r3, r3, #2
    8708:	4413      	add	r3, r2
    870a:	009b      	lsls	r3, r3, #2
    870c:	440b      	add	r3, r1
    870e:	3302      	adds	r3, #2
    8710:	f9b3 3000 	ldrsh.w	r3, [r3]
    8714:	4618      	mov	r0, r3
    8716:	4b0a      	ldr	r3, [pc, #40]	; (8740 <_tc_timer_deinit+0x64>)
    8718:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    871a:	68f8      	ldr	r0, [r7, #12]
    871c:	4b09      	ldr	r3, [pc, #36]	; (8744 <_tc_timer_deinit+0x68>)
    871e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8720:	68f8      	ldr	r0, [r7, #12]
    8722:	4b09      	ldr	r3, [pc, #36]	; (8748 <_tc_timer_deinit+0x6c>)
    8724:	4798      	blx	r3
}
    8726:	bf00      	nop
    8728:	3710      	adds	r7, #16
    872a:	46bd      	mov	sp, r7
    872c:	bd80      	pop	{r7, pc}
    872e:	bf00      	nop
    8730:	00008a61 	.word	0x00008a61
    8734:	00013380 	.word	0x00013380
    8738:	00003df5 	.word	0x00003df5
    873c:	200000e0 	.word	0x200000e0
    8740:	00007de1 	.word	0x00007de1
    8744:	00007fd5 	.word	0x00007fd5
    8748:	00007f4d 	.word	0x00007f4d

0000874c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    874c:	b580      	push	{r7, lr}
    874e:	b082      	sub	sp, #8
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	68db      	ldr	r3, [r3, #12]
    8758:	4618      	mov	r0, r3
    875a:	4b03      	ldr	r3, [pc, #12]	; (8768 <_tc_timer_start+0x1c>)
    875c:	4798      	blx	r3
}
    875e:	bf00      	nop
    8760:	3708      	adds	r7, #8
    8762:	46bd      	mov	sp, r7
    8764:	bd80      	pop	{r7, pc}
    8766:	bf00      	nop
    8768:	00007f75 	.word	0x00007f75

0000876c <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    876c:	b580      	push	{r7, lr}
    876e:	b082      	sub	sp, #8
    8770:	af00      	add	r7, sp, #0
    8772:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	68db      	ldr	r3, [r3, #12]
    8778:	4618      	mov	r0, r3
    877a:	4b03      	ldr	r3, [pc, #12]	; (8788 <_tc_timer_stop+0x1c>)
    877c:	4798      	blx	r3
}
    877e:	bf00      	nop
    8780:	3708      	adds	r7, #8
    8782:	46bd      	mov	sp, r7
    8784:	bd80      	pop	{r7, pc}
    8786:	bf00      	nop
    8788:	00007fd5 	.word	0x00007fd5

0000878c <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    878c:	b580      	push	{r7, lr}
    878e:	b084      	sub	sp, #16
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
    8794:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	68db      	ldr	r3, [r3, #12]
    879a:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    879c:	68f8      	ldr	r0, [r7, #12]
    879e:	4b14      	ldr	r3, [pc, #80]	; (87f0 <_tc_timer_set_period+0x64>)
    87a0:	4798      	blx	r3
    87a2:	4603      	mov	r3, r0
    87a4:	2b02      	cmp	r3, #2
    87a6:	d105      	bne.n	87b4 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    87a8:	683a      	ldr	r2, [r7, #0]
    87aa:	2100      	movs	r1, #0
    87ac:	68f8      	ldr	r0, [r7, #12]
    87ae:	4b11      	ldr	r3, [pc, #68]	; (87f4 <_tc_timer_set_period+0x68>)
    87b0:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    87b2:	e019      	b.n	87e8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    87b4:	68f8      	ldr	r0, [r7, #12]
    87b6:	4b0e      	ldr	r3, [pc, #56]	; (87f0 <_tc_timer_set_period+0x64>)
    87b8:	4798      	blx	r3
    87ba:	4603      	mov	r3, r0
    87bc:	2b00      	cmp	r3, #0
    87be:	d107      	bne.n	87d0 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    87c0:	683b      	ldr	r3, [r7, #0]
    87c2:	b29b      	uxth	r3, r3
    87c4:	461a      	mov	r2, r3
    87c6:	2100      	movs	r1, #0
    87c8:	68f8      	ldr	r0, [r7, #12]
    87ca:	4b0b      	ldr	r3, [pc, #44]	; (87f8 <_tc_timer_set_period+0x6c>)
    87cc:	4798      	blx	r3
}
    87ce:	e00b      	b.n	87e8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    87d0:	68f8      	ldr	r0, [r7, #12]
    87d2:	4b07      	ldr	r3, [pc, #28]	; (87f0 <_tc_timer_set_period+0x64>)
    87d4:	4798      	blx	r3
    87d6:	4603      	mov	r3, r0
    87d8:	2b01      	cmp	r3, #1
    87da:	d105      	bne.n	87e8 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    87dc:	683b      	ldr	r3, [r7, #0]
    87de:	b2db      	uxtb	r3, r3
    87e0:	4619      	mov	r1, r3
    87e2:	68f8      	ldr	r0, [r7, #12]
    87e4:	4b05      	ldr	r3, [pc, #20]	; (87fc <_tc_timer_set_period+0x70>)
    87e6:	4798      	blx	r3
}
    87e8:	bf00      	nop
    87ea:	3710      	adds	r7, #16
    87ec:	46bd      	mov	sp, r7
    87ee:	bd80      	pop	{r7, pc}
    87f0:	00007ffd 	.word	0x00007ffd
    87f4:	000081b5 	.word	0x000081b5
    87f8:	00008151 	.word	0x00008151
    87fc:	000080d5 	.word	0x000080d5

00008800 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8800:	b580      	push	{r7, lr}
    8802:	b084      	sub	sp, #16
    8804:	af00      	add	r7, sp, #0
    8806:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8808:	687b      	ldr	r3, [r7, #4]
    880a:	68db      	ldr	r3, [r3, #12]
    880c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    880e:	68f8      	ldr	r0, [r7, #12]
    8810:	4b13      	ldr	r3, [pc, #76]	; (8860 <_tc_timer_get_period+0x60>)
    8812:	4798      	blx	r3
    8814:	4603      	mov	r3, r0
    8816:	2b02      	cmp	r3, #2
    8818:	d105      	bne.n	8826 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    881a:	2100      	movs	r1, #0
    881c:	68f8      	ldr	r0, [r7, #12]
    881e:	4b11      	ldr	r3, [pc, #68]	; (8864 <_tc_timer_get_period+0x64>)
    8820:	4798      	blx	r3
    8822:	4603      	mov	r3, r0
    8824:	e017      	b.n	8856 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8826:	68f8      	ldr	r0, [r7, #12]
    8828:	4b0d      	ldr	r3, [pc, #52]	; (8860 <_tc_timer_get_period+0x60>)
    882a:	4798      	blx	r3
    882c:	4603      	mov	r3, r0
    882e:	2b00      	cmp	r3, #0
    8830:	d105      	bne.n	883e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8832:	2100      	movs	r1, #0
    8834:	68f8      	ldr	r0, [r7, #12]
    8836:	4b0c      	ldr	r3, [pc, #48]	; (8868 <_tc_timer_get_period+0x68>)
    8838:	4798      	blx	r3
    883a:	4603      	mov	r3, r0
    883c:	e00b      	b.n	8856 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    883e:	68f8      	ldr	r0, [r7, #12]
    8840:	4b07      	ldr	r3, [pc, #28]	; (8860 <_tc_timer_get_period+0x60>)
    8842:	4798      	blx	r3
    8844:	4603      	mov	r3, r0
    8846:	2b01      	cmp	r3, #1
    8848:	d104      	bne.n	8854 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    884a:	68f8      	ldr	r0, [r7, #12]
    884c:	4b07      	ldr	r3, [pc, #28]	; (886c <_tc_timer_get_period+0x6c>)
    884e:	4798      	blx	r3
    8850:	4603      	mov	r3, r0
    8852:	e000      	b.n	8856 <_tc_timer_get_period+0x56>
	}

	return 0;
    8854:	2300      	movs	r3, #0
}
    8856:	4618      	mov	r0, r3
    8858:	3710      	adds	r7, #16
    885a:	46bd      	mov	sp, r7
    885c:	bd80      	pop	{r7, pc}
    885e:	bf00      	nop
    8860:	00007ffd 	.word	0x00007ffd
    8864:	000081e5 	.word	0x000081e5
    8868:	00008185 	.word	0x00008185
    886c:	000080fd 	.word	0x000080fd

00008870 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8870:	b580      	push	{r7, lr}
    8872:	b082      	sub	sp, #8
    8874:	af00      	add	r7, sp, #0
    8876:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8878:	687b      	ldr	r3, [r7, #4]
    887a:	68db      	ldr	r3, [r3, #12]
    887c:	4618      	mov	r0, r3
    887e:	4b03      	ldr	r3, [pc, #12]	; (888c <_tc_timer_is_started+0x1c>)
    8880:	4798      	blx	r3
    8882:	4603      	mov	r3, r0
}
    8884:	4618      	mov	r0, r3
    8886:	3708      	adds	r7, #8
    8888:	46bd      	mov	sp, r7
    888a:	bd80      	pop	{r7, pc}
    888c:	00007f9d 	.word	0x00007f9d

00008890 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8890:	b480      	push	{r7}
    8892:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8894:	4b02      	ldr	r3, [pc, #8]	; (88a0 <_tc_get_timer+0x10>)
}
    8896:	4618      	mov	r0, r3
    8898:	46bd      	mov	sp, r7
    889a:	f85d 7b04 	ldr.w	r7, [sp], #4
    889e:	4770      	bx	lr
    88a0:	20000158 	.word	0x20000158

000088a4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    88a4:	b480      	push	{r7}
    88a6:	af00      	add	r7, sp, #0
	return NULL;
    88a8:	2300      	movs	r3, #0
}
    88aa:	4618      	mov	r0, r3
    88ac:	46bd      	mov	sp, r7
    88ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b2:	4770      	bx	lr

000088b4 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    88b4:	b580      	push	{r7, lr}
    88b6:	b084      	sub	sp, #16
    88b8:	af00      	add	r7, sp, #0
    88ba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    88bc:	687b      	ldr	r3, [r7, #4]
    88be:	68db      	ldr	r3, [r3, #12]
    88c0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    88c2:	68f8      	ldr	r0, [r7, #12]
    88c4:	4b0e      	ldr	r3, [pc, #56]	; (8900 <_tc_timer_set_irq+0x4c>)
    88c6:	4798      	blx	r3
    88c8:	4603      	mov	r3, r0
    88ca:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    88cc:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    88d0:	490c      	ldr	r1, [pc, #48]	; (8904 <_tc_timer_set_irq+0x50>)
    88d2:	2001      	movs	r0, #1
    88d4:	4b0c      	ldr	r3, [pc, #48]	; (8908 <_tc_timer_set_irq+0x54>)
    88d6:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    88d8:	f997 200b 	ldrsb.w	r2, [r7, #11]
    88dc:	490b      	ldr	r1, [pc, #44]	; (890c <_tc_timer_set_irq+0x58>)
    88de:	4613      	mov	r3, r2
    88e0:	009b      	lsls	r3, r3, #2
    88e2:	4413      	add	r3, r2
    88e4:	009b      	lsls	r3, r3, #2
    88e6:	440b      	add	r3, r1
    88e8:	3302      	adds	r3, #2
    88ea:	f9b3 3000 	ldrsh.w	r3, [r3]
    88ee:	b2db      	uxtb	r3, r3
    88f0:	4618      	mov	r0, r3
    88f2:	4b07      	ldr	r3, [pc, #28]	; (8910 <_tc_timer_set_irq+0x5c>)
    88f4:	4798      	blx	r3
}
    88f6:	bf00      	nop
    88f8:	3710      	adds	r7, #16
    88fa:	46bd      	mov	sp, r7
    88fc:	bd80      	pop	{r7, pc}
    88fe:	bf00      	nop
    8900:	00008a61 	.word	0x00008a61
    8904:	00013380 	.word	0x00013380
    8908:	00003df5 	.word	0x00003df5
    890c:	200000e0 	.word	0x200000e0
    8910:	00004641 	.word	0x00004641

00008914 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8914:	b580      	push	{r7, lr}
    8916:	b084      	sub	sp, #16
    8918:	af00      	add	r7, sp, #0
    891a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	68db      	ldr	r3, [r3, #12]
    8920:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8922:	68f8      	ldr	r0, [r7, #12]
    8924:	4b07      	ldr	r3, [pc, #28]	; (8944 <tc_interrupt_handler+0x30>)
    8926:	4798      	blx	r3
    8928:	4603      	mov	r3, r0
    892a:	2b00      	cmp	r3, #0
    892c:	d006      	beq.n	893c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    892e:	68f8      	ldr	r0, [r7, #12]
    8930:	4b05      	ldr	r3, [pc, #20]	; (8948 <tc_interrupt_handler+0x34>)
    8932:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8934:	687b      	ldr	r3, [r7, #4]
    8936:	681b      	ldr	r3, [r3, #0]
    8938:	6878      	ldr	r0, [r7, #4]
    893a:	4798      	blx	r3
	}
}
    893c:	bf00      	nop
    893e:	3710      	adds	r7, #16
    8940:	46bd      	mov	sp, r7
    8942:	bd80      	pop	{r7, pc}
    8944:	00007ead 	.word	0x00007ead
    8948:	00007ed5 	.word	0x00007ed5

0000894c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    894c:	b580      	push	{r7, lr}
    894e:	b084      	sub	sp, #16
    8950:	af00      	add	r7, sp, #0
    8952:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8954:	687b      	ldr	r3, [r7, #4]
    8956:	691b      	ldr	r3, [r3, #16]
    8958:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    895a:	68f8      	ldr	r0, [r7, #12]
    895c:	4b12      	ldr	r3, [pc, #72]	; (89a8 <tc_pwm_interrupt_handler+0x5c>)
    895e:	4798      	blx	r3
    8960:	4603      	mov	r3, r0
    8962:	2b00      	cmp	r3, #0
    8964:	d00a      	beq.n	897c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8966:	68f8      	ldr	r0, [r7, #12]
    8968:	4b10      	ldr	r3, [pc, #64]	; (89ac <tc_pwm_interrupt_handler+0x60>)
    896a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    896c:	687b      	ldr	r3, [r7, #4]
    896e:	681b      	ldr	r3, [r3, #0]
    8970:	2b00      	cmp	r3, #0
    8972:	d003      	beq.n	897c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8974:	687b      	ldr	r3, [r7, #4]
    8976:	681b      	ldr	r3, [r3, #0]
    8978:	6878      	ldr	r0, [r7, #4]
    897a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    897c:	68f8      	ldr	r0, [r7, #12]
    897e:	4b0c      	ldr	r3, [pc, #48]	; (89b0 <tc_pwm_interrupt_handler+0x64>)
    8980:	4798      	blx	r3
    8982:	4603      	mov	r3, r0
    8984:	2b00      	cmp	r3, #0
    8986:	d00a      	beq.n	899e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8988:	68f8      	ldr	r0, [r7, #12]
    898a:	4b0a      	ldr	r3, [pc, #40]	; (89b4 <tc_pwm_interrupt_handler+0x68>)
    898c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    898e:	687b      	ldr	r3, [r7, #4]
    8990:	685b      	ldr	r3, [r3, #4]
    8992:	2b00      	cmp	r3, #0
    8994:	d003      	beq.n	899e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8996:	687b      	ldr	r3, [r7, #4]
    8998:	685b      	ldr	r3, [r3, #4]
    899a:	6878      	ldr	r0, [r7, #4]
    899c:	4798      	blx	r3
		}
	}
}
    899e:	bf00      	nop
    89a0:	3710      	adds	r7, #16
    89a2:	46bd      	mov	sp, r7
    89a4:	bd80      	pop	{r7, pc}
    89a6:	bf00      	nop
    89a8:	00007ead 	.word	0x00007ead
    89ac:	00007ed5 	.word	0x00007ed5
    89b0:	00007f23 	.word	0x00007f23
    89b4:	00007eef 	.word	0x00007eef

000089b8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    89b8:	b580      	push	{r7, lr}
    89ba:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    89bc:	4b03      	ldr	r3, [pc, #12]	; (89cc <TC0_Handler+0x14>)
    89be:	681b      	ldr	r3, [r3, #0]
    89c0:	4618      	mov	r0, r3
    89c2:	4b03      	ldr	r3, [pc, #12]	; (89d0 <TC0_Handler+0x18>)
    89c4:	4798      	blx	r3
}
    89c6:	bf00      	nop
    89c8:	bd80      	pop	{r7, pc}
    89ca:	bf00      	nop
    89cc:	2000093c 	.word	0x2000093c
    89d0:	00008915 	.word	0x00008915

000089d4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    89d4:	b580      	push	{r7, lr}
    89d6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    89d8:	4b03      	ldr	r3, [pc, #12]	; (89e8 <TC2_Handler+0x14>)
    89da:	681b      	ldr	r3, [r3, #0]
    89dc:	4618      	mov	r0, r3
    89de:	4b03      	ldr	r3, [pc, #12]	; (89ec <TC2_Handler+0x18>)
    89e0:	4798      	blx	r3
}
    89e2:	bf00      	nop
    89e4:	bd80      	pop	{r7, pc}
    89e6:	bf00      	nop
    89e8:	20000940 	.word	0x20000940
    89ec:	00008915 	.word	0x00008915

000089f0 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    89f0:	b580      	push	{r7, lr}
    89f2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    89f4:	4b03      	ldr	r3, [pc, #12]	; (8a04 <TC4_Handler+0x14>)
    89f6:	681b      	ldr	r3, [r3, #0]
    89f8:	4618      	mov	r0, r3
    89fa:	4b03      	ldr	r3, [pc, #12]	; (8a08 <TC4_Handler+0x18>)
    89fc:	4798      	blx	r3
}
    89fe:	bf00      	nop
    8a00:	bd80      	pop	{r7, pc}
    8a02:	bf00      	nop
    8a04:	20000944 	.word	0x20000944
    8a08:	00008915 	.word	0x00008915

00008a0c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8a0c:	b580      	push	{r7, lr}
    8a0e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8a10:	4b03      	ldr	r3, [pc, #12]	; (8a20 <TC5_Handler+0x14>)
    8a12:	681b      	ldr	r3, [r3, #0]
    8a14:	4618      	mov	r0, r3
    8a16:	4b03      	ldr	r3, [pc, #12]	; (8a24 <TC5_Handler+0x18>)
    8a18:	4798      	blx	r3
}
    8a1a:	bf00      	nop
    8a1c:	bd80      	pop	{r7, pc}
    8a1e:	bf00      	nop
    8a20:	20000948 	.word	0x20000948
    8a24:	00008915 	.word	0x00008915

00008a28 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8a28:	b580      	push	{r7, lr}
    8a2a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8a2c:	4b03      	ldr	r3, [pc, #12]	; (8a3c <TC6_Handler+0x14>)
    8a2e:	681b      	ldr	r3, [r3, #0]
    8a30:	4618      	mov	r0, r3
    8a32:	4b03      	ldr	r3, [pc, #12]	; (8a40 <TC6_Handler+0x18>)
    8a34:	4798      	blx	r3
}
    8a36:	bf00      	nop
    8a38:	bd80      	pop	{r7, pc}
    8a3a:	bf00      	nop
    8a3c:	2000094c 	.word	0x2000094c
    8a40:	00008915 	.word	0x00008915

00008a44 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8a44:	b580      	push	{r7, lr}
    8a46:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8a48:	4b03      	ldr	r3, [pc, #12]	; (8a58 <TC7_Handler+0x14>)
    8a4a:	681b      	ldr	r3, [r3, #0]
    8a4c:	4618      	mov	r0, r3
    8a4e:	4b03      	ldr	r3, [pc, #12]	; (8a5c <TC7_Handler+0x18>)
    8a50:	4798      	blx	r3
}
    8a52:	bf00      	nop
    8a54:	bd80      	pop	{r7, pc}
    8a56:	bf00      	nop
    8a58:	20000950 	.word	0x20000950
    8a5c:	0000894d 	.word	0x0000894d

00008a60 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8a60:	b580      	push	{r7, lr}
    8a62:	b084      	sub	sp, #16
    8a64:	af00      	add	r7, sp, #0
    8a66:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8a68:	6878      	ldr	r0, [r7, #4]
    8a6a:	4b13      	ldr	r3, [pc, #76]	; (8ab8 <get_tc_index+0x58>)
    8a6c:	4798      	blx	r3
    8a6e:	4603      	mov	r3, r0
    8a70:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8a72:	2300      	movs	r3, #0
    8a74:	73fb      	strb	r3, [r7, #15]
    8a76:	e010      	b.n	8a9a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8a78:	7bfa      	ldrb	r2, [r7, #15]
    8a7a:	4910      	ldr	r1, [pc, #64]	; (8abc <get_tc_index+0x5c>)
    8a7c:	4613      	mov	r3, r2
    8a7e:	009b      	lsls	r3, r3, #2
    8a80:	4413      	add	r3, r2
    8a82:	009b      	lsls	r3, r3, #2
    8a84:	440b      	add	r3, r1
    8a86:	781b      	ldrb	r3, [r3, #0]
    8a88:	7bba      	ldrb	r2, [r7, #14]
    8a8a:	429a      	cmp	r2, r3
    8a8c:	d102      	bne.n	8a94 <get_tc_index+0x34>
			return i;
    8a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8a92:	e00d      	b.n	8ab0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8a94:	7bfb      	ldrb	r3, [r7, #15]
    8a96:	3301      	adds	r3, #1
    8a98:	73fb      	strb	r3, [r7, #15]
    8a9a:	7bfb      	ldrb	r3, [r7, #15]
    8a9c:	2b05      	cmp	r3, #5
    8a9e:	d9eb      	bls.n	8a78 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8aa0:	f240 221d 	movw	r2, #541	; 0x21d
    8aa4:	4906      	ldr	r1, [pc, #24]	; (8ac0 <get_tc_index+0x60>)
    8aa6:	2000      	movs	r0, #0
    8aa8:	4b06      	ldr	r3, [pc, #24]	; (8ac4 <get_tc_index+0x64>)
    8aaa:	4798      	blx	r3
	return -1;
    8aac:	f04f 33ff 	mov.w	r3, #4294967295
}
    8ab0:	4618      	mov	r0, r3
    8ab2:	3710      	adds	r7, #16
    8ab4:	46bd      	mov	sp, r7
    8ab6:	bd80      	pop	{r7, pc}
    8ab8:	00008b65 	.word	0x00008b65
    8abc:	200000e0 	.word	0x200000e0
    8ac0:	00013380 	.word	0x00013380
    8ac4:	00003df5 	.word	0x00003df5

00008ac8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8ac8:	b480      	push	{r7}
    8aca:	b083      	sub	sp, #12
    8acc:	af00      	add	r7, sp, #0
    8ace:	6078      	str	r0, [r7, #4]
    8ad0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8ad2:	687b      	ldr	r3, [r7, #4]
    8ad4:	4a17      	ldr	r2, [pc, #92]	; (8b34 <_tc_init_irq_param+0x6c>)
    8ad6:	4293      	cmp	r3, r2
    8ad8:	d102      	bne.n	8ae0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8ada:	4a17      	ldr	r2, [pc, #92]	; (8b38 <_tc_init_irq_param+0x70>)
    8adc:	683b      	ldr	r3, [r7, #0]
    8ade:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8ae0:	687b      	ldr	r3, [r7, #4]
    8ae2:	4a16      	ldr	r2, [pc, #88]	; (8b3c <_tc_init_irq_param+0x74>)
    8ae4:	4293      	cmp	r3, r2
    8ae6:	d102      	bne.n	8aee <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8ae8:	4a15      	ldr	r2, [pc, #84]	; (8b40 <_tc_init_irq_param+0x78>)
    8aea:	683b      	ldr	r3, [r7, #0]
    8aec:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	4a14      	ldr	r2, [pc, #80]	; (8b44 <_tc_init_irq_param+0x7c>)
    8af2:	4293      	cmp	r3, r2
    8af4:	d102      	bne.n	8afc <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8af6:	4a14      	ldr	r2, [pc, #80]	; (8b48 <_tc_init_irq_param+0x80>)
    8af8:	683b      	ldr	r3, [r7, #0]
    8afa:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8afc:	687b      	ldr	r3, [r7, #4]
    8afe:	4a13      	ldr	r2, [pc, #76]	; (8b4c <_tc_init_irq_param+0x84>)
    8b00:	4293      	cmp	r3, r2
    8b02:	d102      	bne.n	8b0a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8b04:	4a12      	ldr	r2, [pc, #72]	; (8b50 <_tc_init_irq_param+0x88>)
    8b06:	683b      	ldr	r3, [r7, #0]
    8b08:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8b0a:	687b      	ldr	r3, [r7, #4]
    8b0c:	4a11      	ldr	r2, [pc, #68]	; (8b54 <_tc_init_irq_param+0x8c>)
    8b0e:	4293      	cmp	r3, r2
    8b10:	d102      	bne.n	8b18 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8b12:	4a11      	ldr	r2, [pc, #68]	; (8b58 <_tc_init_irq_param+0x90>)
    8b14:	683b      	ldr	r3, [r7, #0]
    8b16:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	4a10      	ldr	r2, [pc, #64]	; (8b5c <_tc_init_irq_param+0x94>)
    8b1c:	4293      	cmp	r3, r2
    8b1e:	d102      	bne.n	8b26 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8b20:	4a0f      	ldr	r2, [pc, #60]	; (8b60 <_tc_init_irq_param+0x98>)
    8b22:	683b      	ldr	r3, [r7, #0]
    8b24:	6013      	str	r3, [r2, #0]
	}
}
    8b26:	bf00      	nop
    8b28:	370c      	adds	r7, #12
    8b2a:	46bd      	mov	sp, r7
    8b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b30:	4770      	bx	lr
    8b32:	bf00      	nop
    8b34:	40003800 	.word	0x40003800
    8b38:	2000093c 	.word	0x2000093c
    8b3c:	4101a000 	.word	0x4101a000
    8b40:	20000940 	.word	0x20000940
    8b44:	42001400 	.word	0x42001400
    8b48:	20000944 	.word	0x20000944
    8b4c:	42001800 	.word	0x42001800
    8b50:	20000948 	.word	0x20000948
    8b54:	43001400 	.word	0x43001400
    8b58:	2000094c 	.word	0x2000094c
    8b5c:	43001800 	.word	0x43001800
    8b60:	20000950 	.word	0x20000950

00008b64 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8b64:	b4b0      	push	{r4, r5, r7}
    8b66:	b08d      	sub	sp, #52	; 0x34
    8b68:	af00      	add	r7, sp, #0
    8b6a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8b6c:	4b13      	ldr	r3, [pc, #76]	; (8bbc <_get_hardware_offset+0x58>)
    8b6e:	f107 040c 	add.w	r4, r7, #12
    8b72:	461d      	mov	r5, r3
    8b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8b80:	2300      	movs	r3, #0
    8b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    8b84:	e010      	b.n	8ba8 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8b88:	009b      	lsls	r3, r3, #2
    8b8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8b8e:	4413      	add	r3, r2
    8b90:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8b94:	461a      	mov	r2, r3
    8b96:	687b      	ldr	r3, [r7, #4]
    8b98:	429a      	cmp	r2, r3
    8b9a:	d102      	bne.n	8ba2 <_get_hardware_offset+0x3e>
			return i;
    8b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8b9e:	b2db      	uxtb	r3, r3
    8ba0:	e006      	b.n	8bb0 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ba4:	3301      	adds	r3, #1
    8ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8baa:	2b07      	cmp	r3, #7
    8bac:	d9eb      	bls.n	8b86 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8bae:	2300      	movs	r3, #0
}
    8bb0:	4618      	mov	r0, r3
    8bb2:	3734      	adds	r7, #52	; 0x34
    8bb4:	46bd      	mov	sp, r7
    8bb6:	bcb0      	pop	{r4, r5, r7}
    8bb8:	4770      	bx	lr
    8bba:	bf00      	nop
    8bbc:	00013394 	.word	0x00013394

00008bc0 <__NVIC_EnableIRQ>:
{
    8bc0:	b480      	push	{r7}
    8bc2:	b083      	sub	sp, #12
    8bc4:	af00      	add	r7, sp, #0
    8bc6:	4603      	mov	r3, r0
    8bc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8bce:	2b00      	cmp	r3, #0
    8bd0:	db0b      	blt.n	8bea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8bd2:	4909      	ldr	r1, [pc, #36]	; (8bf8 <__NVIC_EnableIRQ+0x38>)
    8bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8bd8:	095b      	lsrs	r3, r3, #5
    8bda:	88fa      	ldrh	r2, [r7, #6]
    8bdc:	f002 021f 	and.w	r2, r2, #31
    8be0:	2001      	movs	r0, #1
    8be2:	fa00 f202 	lsl.w	r2, r0, r2
    8be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8bea:	bf00      	nop
    8bec:	370c      	adds	r7, #12
    8bee:	46bd      	mov	sp, r7
    8bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf4:	4770      	bx	lr
    8bf6:	bf00      	nop
    8bf8:	e000e100 	.word	0xe000e100

00008bfc <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8bfc:	b480      	push	{r7}
    8bfe:	b087      	sub	sp, #28
    8c00:	af00      	add	r7, sp, #0
    8c02:	60f8      	str	r0, [r7, #12]
    8c04:	460b      	mov	r3, r1
    8c06:	607a      	str	r2, [r7, #4]
    8c08:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8c0a:	7afa      	ldrb	r2, [r7, #11]
    8c0c:	68f9      	ldr	r1, [r7, #12]
    8c0e:	4613      	mov	r3, r2
    8c10:	009b      	lsls	r3, r3, #2
    8c12:	4413      	add	r3, r2
    8c14:	009b      	lsls	r3, r3, #2
    8c16:	440b      	add	r3, r1
    8c18:	3340      	adds	r3, #64	; 0x40
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8c1e:	697a      	ldr	r2, [r7, #20]
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	4013      	ands	r3, r2
    8c24:	617b      	str	r3, [r7, #20]
	return tmp;
    8c26:	697b      	ldr	r3, [r7, #20]
}
    8c28:	4618      	mov	r0, r3
    8c2a:	371c      	adds	r7, #28
    8c2c:	46bd      	mov	sp, r7
    8c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c32:	4770      	bx	lr

00008c34 <hri_oscctrl_get_STATUS_reg>:
{
    8c34:	b480      	push	{r7}
    8c36:	b085      	sub	sp, #20
    8c38:	af00      	add	r7, sp, #0
    8c3a:	6078      	str	r0, [r7, #4]
    8c3c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	691b      	ldr	r3, [r3, #16]
    8c42:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8c44:	68fa      	ldr	r2, [r7, #12]
    8c46:	683b      	ldr	r3, [r7, #0]
    8c48:	4013      	ands	r3, r2
    8c4a:	60fb      	str	r3, [r7, #12]
	return tmp;
    8c4c:	68fb      	ldr	r3, [r7, #12]
}
    8c4e:	4618      	mov	r0, r3
    8c50:	3714      	adds	r7, #20
    8c52:	46bd      	mov	sp, r7
    8c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c58:	4770      	bx	lr

00008c5a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8c5a:	b480      	push	{r7}
    8c5c:	b085      	sub	sp, #20
    8c5e:	af00      	add	r7, sp, #0
    8c60:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8c62:	687b      	ldr	r3, [r7, #4]
    8c64:	f893 3020 	ldrb.w	r3, [r3, #32]
    8c68:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8c6a:	7bfb      	ldrb	r3, [r7, #15]
    8c6c:	f003 0301 	and.w	r3, r3, #1
    8c70:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8c72:	7bfb      	ldrb	r3, [r7, #15]
    8c74:	2b00      	cmp	r3, #0
    8c76:	bf14      	ite	ne
    8c78:	2301      	movne	r3, #1
    8c7a:	2300      	moveq	r3, #0
    8c7c:	b2db      	uxtb	r3, r3
}
    8c7e:	4618      	mov	r0, r3
    8c80:	3714      	adds	r7, #20
    8c82:	46bd      	mov	sp, r7
    8c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c88:	4770      	bx	lr

00008c8a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8c8a:	b480      	push	{r7}
    8c8c:	b083      	sub	sp, #12
    8c8e:	af00      	add	r7, sp, #0
    8c90:	6078      	str	r0, [r7, #4]
    8c92:	460b      	mov	r3, r1
    8c94:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8c96:	bf00      	nop
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	789b      	ldrb	r3, [r3, #2]
    8c9c:	b2da      	uxtb	r2, r3
    8c9e:	78fb      	ldrb	r3, [r7, #3]
    8ca0:	4013      	ands	r3, r2
    8ca2:	b2db      	uxtb	r3, r3
    8ca4:	2b00      	cmp	r3, #0
    8ca6:	d1f7      	bne.n	8c98 <hri_usb_wait_for_sync+0xe>
	};
}
    8ca8:	bf00      	nop
    8caa:	370c      	adds	r7, #12
    8cac:	46bd      	mov	sp, r7
    8cae:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cb2:	4770      	bx	lr

00008cb4 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8cb4:	b480      	push	{r7}
    8cb6:	b083      	sub	sp, #12
    8cb8:	af00      	add	r7, sp, #0
    8cba:	6078      	str	r0, [r7, #4]
    8cbc:	460b      	mov	r3, r1
    8cbe:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8cc0:	687b      	ldr	r3, [r7, #4]
    8cc2:	789b      	ldrb	r3, [r3, #2]
    8cc4:	b2da      	uxtb	r2, r3
    8cc6:	78fb      	ldrb	r3, [r7, #3]
    8cc8:	4013      	ands	r3, r2
    8cca:	b2db      	uxtb	r3, r3
    8ccc:	2b00      	cmp	r3, #0
    8cce:	bf14      	ite	ne
    8cd0:	2301      	movne	r3, #1
    8cd2:	2300      	moveq	r3, #0
    8cd4:	b2db      	uxtb	r3, r3
}
    8cd6:	4618      	mov	r0, r3
    8cd8:	370c      	adds	r7, #12
    8cda:	46bd      	mov	sp, r7
    8cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ce0:	4770      	bx	lr

00008ce2 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8ce2:	b480      	push	{r7}
    8ce4:	b085      	sub	sp, #20
    8ce6:	af00      	add	r7, sp, #0
    8ce8:	6078      	str	r0, [r7, #4]
    8cea:	460b      	mov	r3, r1
    8cec:	70fb      	strb	r3, [r7, #3]
    8cee:	4613      	mov	r3, r2
    8cf0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8cf2:	78fb      	ldrb	r3, [r7, #3]
    8cf4:	687a      	ldr	r2, [r7, #4]
    8cf6:	3308      	adds	r3, #8
    8cf8:	015b      	lsls	r3, r3, #5
    8cfa:	4413      	add	r3, r2
    8cfc:	3307      	adds	r3, #7
    8cfe:	781b      	ldrb	r3, [r3, #0]
    8d00:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8d02:	7bfa      	ldrb	r2, [r7, #15]
    8d04:	78bb      	ldrb	r3, [r7, #2]
    8d06:	4013      	ands	r3, r2
    8d08:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8d0a:	7bfb      	ldrb	r3, [r7, #15]
}
    8d0c:	4618      	mov	r0, r3
    8d0e:	3714      	adds	r7, #20
    8d10:	46bd      	mov	sp, r7
    8d12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d16:	4770      	bx	lr

00008d18 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8d18:	b480      	push	{r7}
    8d1a:	b083      	sub	sp, #12
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	6078      	str	r0, [r7, #4]
    8d20:	460b      	mov	r3, r1
    8d22:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8d24:	78fb      	ldrb	r3, [r7, #3]
    8d26:	687a      	ldr	r2, [r7, #4]
    8d28:	3308      	adds	r3, #8
    8d2a:	015b      	lsls	r3, r3, #5
    8d2c:	4413      	add	r3, r2
    8d2e:	3307      	adds	r3, #7
    8d30:	781b      	ldrb	r3, [r3, #0]
    8d32:	b2db      	uxtb	r3, r3
}
    8d34:	4618      	mov	r0, r3
    8d36:	370c      	adds	r7, #12
    8d38:	46bd      	mov	sp, r7
    8d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d3e:	4770      	bx	lr

00008d40 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8d40:	b480      	push	{r7}
    8d42:	b083      	sub	sp, #12
    8d44:	af00      	add	r7, sp, #0
    8d46:	6078      	str	r0, [r7, #4]
    8d48:	460b      	mov	r3, r1
    8d4a:	70fb      	strb	r3, [r7, #3]
    8d4c:	4613      	mov	r3, r2
    8d4e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8d50:	78fb      	ldrb	r3, [r7, #3]
    8d52:	687a      	ldr	r2, [r7, #4]
    8d54:	3308      	adds	r3, #8
    8d56:	015b      	lsls	r3, r3, #5
    8d58:	4413      	add	r3, r2
    8d5a:	3307      	adds	r3, #7
    8d5c:	78ba      	ldrb	r2, [r7, #2]
    8d5e:	701a      	strb	r2, [r3, #0]
}
    8d60:	bf00      	nop
    8d62:	370c      	adds	r7, #12
    8d64:	46bd      	mov	sp, r7
    8d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d6a:	4770      	bx	lr

00008d6c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8d6c:	b480      	push	{r7}
    8d6e:	b083      	sub	sp, #12
    8d70:	af00      	add	r7, sp, #0
    8d72:	6078      	str	r0, [r7, #4]
    8d74:	460b      	mov	r3, r1
    8d76:	70fb      	strb	r3, [r7, #3]
    8d78:	4613      	mov	r3, r2
    8d7a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8d7c:	78fb      	ldrb	r3, [r7, #3]
    8d7e:	687a      	ldr	r2, [r7, #4]
    8d80:	3308      	adds	r3, #8
    8d82:	015b      	lsls	r3, r3, #5
    8d84:	4413      	add	r3, r2
    8d86:	3305      	adds	r3, #5
    8d88:	78ba      	ldrb	r2, [r7, #2]
    8d8a:	701a      	strb	r2, [r3, #0]
}
    8d8c:	bf00      	nop
    8d8e:	370c      	adds	r7, #12
    8d90:	46bd      	mov	sp, r7
    8d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d96:	4770      	bx	lr

00008d98 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8d98:	b480      	push	{r7}
    8d9a:	b083      	sub	sp, #12
    8d9c:	af00      	add	r7, sp, #0
    8d9e:	6078      	str	r0, [r7, #4]
    8da0:	460b      	mov	r3, r1
    8da2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8da4:	78fb      	ldrb	r3, [r7, #3]
    8da6:	687a      	ldr	r2, [r7, #4]
    8da8:	3308      	adds	r3, #8
    8daa:	015b      	lsls	r3, r3, #5
    8dac:	4413      	add	r3, r2
    8dae:	3306      	adds	r3, #6
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	b2db      	uxtb	r3, r3
}
    8db4:	4618      	mov	r0, r3
    8db6:	370c      	adds	r7, #12
    8db8:	46bd      	mov	sp, r7
    8dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dbe:	4770      	bx	lr

00008dc0 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8dc0:	b480      	push	{r7}
    8dc2:	b083      	sub	sp, #12
    8dc4:	af00      	add	r7, sp, #0
    8dc6:	6078      	str	r0, [r7, #4]
    8dc8:	460b      	mov	r3, r1
    8dca:	70fb      	strb	r3, [r7, #3]
    8dcc:	4613      	mov	r3, r2
    8dce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8dd0:	78fb      	ldrb	r3, [r7, #3]
    8dd2:	687a      	ldr	r2, [r7, #4]
    8dd4:	3308      	adds	r3, #8
    8dd6:	015b      	lsls	r3, r3, #5
    8dd8:	4413      	add	r3, r2
    8dda:	3304      	adds	r3, #4
    8ddc:	78ba      	ldrb	r2, [r7, #2]
    8dde:	701a      	strb	r2, [r3, #0]
}
    8de0:	bf00      	nop
    8de2:	370c      	adds	r7, #12
    8de4:	46bd      	mov	sp, r7
    8de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dea:	4770      	bx	lr

00008dec <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8dec:	b480      	push	{r7}
    8dee:	b083      	sub	sp, #12
    8df0:	af00      	add	r7, sp, #0
    8df2:	6078      	str	r0, [r7, #4]
    8df4:	460b      	mov	r3, r1
    8df6:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8df8:	78fb      	ldrb	r3, [r7, #3]
    8dfa:	687a      	ldr	r2, [r7, #4]
    8dfc:	015b      	lsls	r3, r3, #5
    8dfe:	4413      	add	r3, r2
    8e00:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8e04:	2210      	movs	r2, #16
    8e06:	701a      	strb	r2, [r3, #0]
}
    8e08:	bf00      	nop
    8e0a:	370c      	adds	r7, #12
    8e0c:	46bd      	mov	sp, r7
    8e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e12:	4770      	bx	lr

00008e14 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8e14:	b480      	push	{r7}
    8e16:	b083      	sub	sp, #12
    8e18:	af00      	add	r7, sp, #0
    8e1a:	6078      	str	r0, [r7, #4]
    8e1c:	460b      	mov	r3, r1
    8e1e:	70fb      	strb	r3, [r7, #3]
    8e20:	4613      	mov	r3, r2
    8e22:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8e24:	78fb      	ldrb	r3, [r7, #3]
    8e26:	687a      	ldr	r2, [r7, #4]
    8e28:	015b      	lsls	r3, r3, #5
    8e2a:	4413      	add	r3, r2
    8e2c:	f203 1309 	addw	r3, r3, #265	; 0x109
    8e30:	78ba      	ldrb	r2, [r7, #2]
    8e32:	701a      	strb	r2, [r3, #0]
}
    8e34:	bf00      	nop
    8e36:	370c      	adds	r7, #12
    8e38:	46bd      	mov	sp, r7
    8e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e3e:	4770      	bx	lr

00008e40 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8e40:	b480      	push	{r7}
    8e42:	b083      	sub	sp, #12
    8e44:	af00      	add	r7, sp, #0
    8e46:	6078      	str	r0, [r7, #4]
    8e48:	460b      	mov	r3, r1
    8e4a:	70fb      	strb	r3, [r7, #3]
    8e4c:	4613      	mov	r3, r2
    8e4e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8e50:	78fb      	ldrb	r3, [r7, #3]
    8e52:	687a      	ldr	r2, [r7, #4]
    8e54:	015b      	lsls	r3, r3, #5
    8e56:	4413      	add	r3, r2
    8e58:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8e5c:	78ba      	ldrb	r2, [r7, #2]
    8e5e:	701a      	strb	r2, [r3, #0]
}
    8e60:	bf00      	nop
    8e62:	370c      	adds	r7, #12
    8e64:	46bd      	mov	sp, r7
    8e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e6a:	4770      	bx	lr

00008e6c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8e6c:	b480      	push	{r7}
    8e6e:	b085      	sub	sp, #20
    8e70:	af00      	add	r7, sp, #0
    8e72:	6078      	str	r0, [r7, #4]
    8e74:	460b      	mov	r3, r1
    8e76:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8e78:	78fb      	ldrb	r3, [r7, #3]
    8e7a:	687a      	ldr	r2, [r7, #4]
    8e7c:	3308      	adds	r3, #8
    8e7e:	015b      	lsls	r3, r3, #5
    8e80:	4413      	add	r3, r2
    8e82:	781b      	ldrb	r3, [r3, #0]
    8e84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8e86:	7bfb      	ldrb	r3, [r7, #15]
    8e88:	f003 0307 	and.w	r3, r3, #7
    8e8c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8e8e:	7bfb      	ldrb	r3, [r7, #15]
}
    8e90:	4618      	mov	r0, r3
    8e92:	3714      	adds	r7, #20
    8e94:	46bd      	mov	sp, r7
    8e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e9a:	4770      	bx	lr

00008e9c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8e9c:	b480      	push	{r7}
    8e9e:	b085      	sub	sp, #20
    8ea0:	af00      	add	r7, sp, #0
    8ea2:	6078      	str	r0, [r7, #4]
    8ea4:	460b      	mov	r3, r1
    8ea6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8ea8:	78fb      	ldrb	r3, [r7, #3]
    8eaa:	687a      	ldr	r2, [r7, #4]
    8eac:	3308      	adds	r3, #8
    8eae:	015b      	lsls	r3, r3, #5
    8eb0:	4413      	add	r3, r2
    8eb2:	781b      	ldrb	r3, [r3, #0]
    8eb4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8eb6:	7bfb      	ldrb	r3, [r7, #15]
    8eb8:	091b      	lsrs	r3, r3, #4
    8eba:	b2db      	uxtb	r3, r3
    8ebc:	f003 0307 	and.w	r3, r3, #7
    8ec0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ec2:	7bfb      	ldrb	r3, [r7, #15]
}
    8ec4:	4618      	mov	r0, r3
    8ec6:	3714      	adds	r7, #20
    8ec8:	46bd      	mov	sp, r7
    8eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ece:	4770      	bx	lr

00008ed0 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8ed0:	b480      	push	{r7}
    8ed2:	b083      	sub	sp, #12
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	6078      	str	r0, [r7, #4]
    8ed8:	460b      	mov	r3, r1
    8eda:	70fb      	strb	r3, [r7, #3]
    8edc:	4613      	mov	r3, r2
    8ede:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8ee0:	78fb      	ldrb	r3, [r7, #3]
    8ee2:	687a      	ldr	r2, [r7, #4]
    8ee4:	3308      	adds	r3, #8
    8ee6:	015b      	lsls	r3, r3, #5
    8ee8:	4413      	add	r3, r2
    8eea:	78ba      	ldrb	r2, [r7, #2]
    8eec:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8eee:	bf00      	nop
    8ef0:	370c      	adds	r7, #12
    8ef2:	46bd      	mov	sp, r7
    8ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef8:	4770      	bx	lr

00008efa <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8efa:	b480      	push	{r7}
    8efc:	b083      	sub	sp, #12
    8efe:	af00      	add	r7, sp, #0
    8f00:	6078      	str	r0, [r7, #4]
    8f02:	460b      	mov	r3, r1
    8f04:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8f06:	78fb      	ldrb	r3, [r7, #3]
    8f08:	687a      	ldr	r2, [r7, #4]
    8f0a:	3308      	adds	r3, #8
    8f0c:	015b      	lsls	r3, r3, #5
    8f0e:	4413      	add	r3, r2
    8f10:	781b      	ldrb	r3, [r3, #0]
    8f12:	b2db      	uxtb	r3, r3
}
    8f14:	4618      	mov	r0, r3
    8f16:	370c      	adds	r7, #12
    8f18:	46bd      	mov	sp, r7
    8f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1e:	4770      	bx	lr

00008f20 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8f20:	b480      	push	{r7}
    8f22:	b083      	sub	sp, #12
    8f24:	af00      	add	r7, sp, #0
    8f26:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	8b9b      	ldrh	r3, [r3, #28]
    8f2c:	b29b      	uxth	r3, r3
}
    8f2e:	4618      	mov	r0, r3
    8f30:	370c      	adds	r7, #12
    8f32:	46bd      	mov	sp, r7
    8f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f38:	4770      	bx	lr

00008f3a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8f3a:	b480      	push	{r7}
    8f3c:	b083      	sub	sp, #12
    8f3e:	af00      	add	r7, sp, #0
    8f40:	6078      	str	r0, [r7, #4]
    8f42:	460b      	mov	r3, r1
    8f44:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	887a      	ldrh	r2, [r7, #2]
    8f4a:	839a      	strh	r2, [r3, #28]
}
    8f4c:	bf00      	nop
    8f4e:	370c      	adds	r7, #12
    8f50:	46bd      	mov	sp, r7
    8f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f56:	4770      	bx	lr

00008f58 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8f58:	b480      	push	{r7}
    8f5a:	b083      	sub	sp, #12
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	6078      	str	r0, [r7, #4]
    8f60:	460b      	mov	r3, r1
    8f62:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8f64:	687b      	ldr	r3, [r7, #4]
    8f66:	887a      	ldrh	r2, [r7, #2]
    8f68:	831a      	strh	r2, [r3, #24]
}
    8f6a:	bf00      	nop
    8f6c:	370c      	adds	r7, #12
    8f6e:	46bd      	mov	sp, r7
    8f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f74:	4770      	bx	lr

00008f76 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8f76:	b480      	push	{r7}
    8f78:	b083      	sub	sp, #12
    8f7a:	af00      	add	r7, sp, #0
    8f7c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8f7e:	687b      	ldr	r3, [r7, #4]
    8f80:	8b1b      	ldrh	r3, [r3, #24]
    8f82:	b29b      	uxth	r3, r3
}
    8f84:	4618      	mov	r0, r3
    8f86:	370c      	adds	r7, #12
    8f88:	46bd      	mov	sp, r7
    8f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f8e:	4770      	bx	lr

00008f90 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8f90:	b480      	push	{r7}
    8f92:	b083      	sub	sp, #12
    8f94:	af00      	add	r7, sp, #0
    8f96:	6078      	str	r0, [r7, #4]
    8f98:	460b      	mov	r3, r1
    8f9a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8f9c:	687b      	ldr	r3, [r7, #4]
    8f9e:	887a      	ldrh	r2, [r7, #2]
    8fa0:	829a      	strh	r2, [r3, #20]
}
    8fa2:	bf00      	nop
    8fa4:	370c      	adds	r7, #12
    8fa6:	46bd      	mov	sp, r7
    8fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fac:	4770      	bx	lr

00008fae <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8fae:	b480      	push	{r7}
    8fb0:	b085      	sub	sp, #20
    8fb2:	af00      	add	r7, sp, #0
    8fb4:	6078      	str	r0, [r7, #4]
    8fb6:	460b      	mov	r3, r1
    8fb8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8fba:	687b      	ldr	r3, [r7, #4]
    8fbc:	789b      	ldrb	r3, [r3, #2]
    8fbe:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8fc0:	7bfa      	ldrb	r2, [r7, #15]
    8fc2:	78fb      	ldrb	r3, [r7, #3]
    8fc4:	4013      	ands	r3, r2
    8fc6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8fc8:	7bfb      	ldrb	r3, [r7, #15]
}
    8fca:	4618      	mov	r0, r3
    8fcc:	3714      	adds	r7, #20
    8fce:	46bd      	mov	sp, r7
    8fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fd4:	4770      	bx	lr
	...

00008fd8 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8fd8:	b580      	push	{r7, lr}
    8fda:	b082      	sub	sp, #8
    8fdc:	af00      	add	r7, sp, #0
    8fde:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8fe0:	687b      	ldr	r3, [r7, #4]
    8fe2:	781b      	ldrb	r3, [r3, #0]
    8fe4:	b2db      	uxtb	r3, r3
    8fe6:	f023 0302 	bic.w	r3, r3, #2
    8fea:	b2da      	uxtb	r2, r3
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8ff0:	2103      	movs	r1, #3
    8ff2:	6878      	ldr	r0, [r7, #4]
    8ff4:	4b02      	ldr	r3, [pc, #8]	; (9000 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8ff6:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8ff8:	bf00      	nop
    8ffa:	3708      	adds	r7, #8
    8ffc:	46bd      	mov	sp, r7
    8ffe:	bd80      	pop	{r7, pc}
    9000:	00008c8b 	.word	0x00008c8b

00009004 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9004:	b580      	push	{r7, lr}
    9006:	b084      	sub	sp, #16
    9008:	af00      	add	r7, sp, #0
    900a:	6078      	str	r0, [r7, #4]
    900c:	460b      	mov	r3, r1
    900e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9010:	2103      	movs	r1, #3
    9012:	6878      	ldr	r0, [r7, #4]
    9014:	4b06      	ldr	r3, [pc, #24]	; (9030 <hri_usb_get_CTRLA_reg+0x2c>)
    9016:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9018:	687b      	ldr	r3, [r7, #4]
    901a:	781b      	ldrb	r3, [r3, #0]
    901c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    901e:	7bfa      	ldrb	r2, [r7, #15]
    9020:	78fb      	ldrb	r3, [r7, #3]
    9022:	4013      	ands	r3, r2
    9024:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9026:	7bfb      	ldrb	r3, [r7, #15]
}
    9028:	4618      	mov	r0, r3
    902a:	3710      	adds	r7, #16
    902c:	46bd      	mov	sp, r7
    902e:	bd80      	pop	{r7, pc}
    9030:	00008c8b 	.word	0x00008c8b

00009034 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9034:	b580      	push	{r7, lr}
    9036:	b082      	sub	sp, #8
    9038:	af00      	add	r7, sp, #0
    903a:	6078      	str	r0, [r7, #4]
    903c:	460b      	mov	r3, r1
    903e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	78fa      	ldrb	r2, [r7, #3]
    9044:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9046:	2103      	movs	r1, #3
    9048:	6878      	ldr	r0, [r7, #4]
    904a:	4b03      	ldr	r3, [pc, #12]	; (9058 <hri_usb_write_CTRLA_reg+0x24>)
    904c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    904e:	bf00      	nop
    9050:	3708      	adds	r7, #8
    9052:	46bd      	mov	sp, r7
    9054:	bd80      	pop	{r7, pc}
    9056:	bf00      	nop
    9058:	00008c8b 	.word	0x00008c8b

0000905c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    905c:	b580      	push	{r7, lr}
    905e:	b082      	sub	sp, #8
    9060:	af00      	add	r7, sp, #0
    9062:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9064:	2103      	movs	r1, #3
    9066:	6878      	ldr	r0, [r7, #4]
    9068:	4b04      	ldr	r3, [pc, #16]	; (907c <hri_usb_read_CTRLA_reg+0x20>)
    906a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    906c:	687b      	ldr	r3, [r7, #4]
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	b2db      	uxtb	r3, r3
}
    9072:	4618      	mov	r0, r3
    9074:	3708      	adds	r7, #8
    9076:	46bd      	mov	sp, r7
    9078:	bd80      	pop	{r7, pc}
    907a:	bf00      	nop
    907c:	00008c8b 	.word	0x00008c8b

00009080 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9080:	b480      	push	{r7}
    9082:	b083      	sub	sp, #12
    9084:	af00      	add	r7, sp, #0
    9086:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9088:	687b      	ldr	r3, [r7, #4]
    908a:	891b      	ldrh	r3, [r3, #8]
    908c:	b29b      	uxth	r3, r3
    908e:	f023 0301 	bic.w	r3, r3, #1
    9092:	b29a      	uxth	r2, r3
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9098:	bf00      	nop
    909a:	370c      	adds	r7, #12
    909c:	46bd      	mov	sp, r7
    909e:	f85d 7b04 	ldr.w	r7, [sp], #4
    90a2:	4770      	bx	lr

000090a4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    90a4:	b480      	push	{r7}
    90a6:	b083      	sub	sp, #12
    90a8:	af00      	add	r7, sp, #0
    90aa:	6078      	str	r0, [r7, #4]
    90ac:	460b      	mov	r3, r1
    90ae:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	887a      	ldrh	r2, [r7, #2]
    90b4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    90b6:	bf00      	nop
    90b8:	370c      	adds	r7, #12
    90ba:	46bd      	mov	sp, r7
    90bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c0:	4770      	bx	lr

000090c2 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    90c2:	b480      	push	{r7}
    90c4:	b083      	sub	sp, #12
    90c6:	af00      	add	r7, sp, #0
    90c8:	6078      	str	r0, [r7, #4]
    90ca:	460b      	mov	r3, r1
    90cc:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	78fa      	ldrb	r2, [r7, #3]
    90d2:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    90d4:	bf00      	nop
    90d6:	370c      	adds	r7, #12
    90d8:	46bd      	mov	sp, r7
    90da:	f85d 7b04 	ldr.w	r7, [sp], #4
    90de:	4770      	bx	lr

000090e0 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    90e0:	b480      	push	{r7}
    90e2:	b083      	sub	sp, #12
    90e4:	af00      	add	r7, sp, #0
    90e6:	6078      	str	r0, [r7, #4]
    90e8:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	683a      	ldr	r2, [r7, #0]
    90ee:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    90f0:	bf00      	nop
    90f2:	370c      	adds	r7, #12
    90f4:	46bd      	mov	sp, r7
    90f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fa:	4770      	bx	lr

000090fc <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    90fc:	b480      	push	{r7}
    90fe:	b083      	sub	sp, #12
    9100:	af00      	add	r7, sp, #0
    9102:	6078      	str	r0, [r7, #4]
    9104:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9106:	2300      	movs	r3, #0
}
    9108:	4618      	mov	r0, r3
    910a:	370c      	adds	r7, #12
    910c:	46bd      	mov	sp, r7
    910e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9112:	4770      	bx	lr

00009114 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9114:	b480      	push	{r7}
    9116:	b085      	sub	sp, #20
    9118:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    911a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    911e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9120:	4b28      	ldr	r3, [pc, #160]	; (91c4 <_usb_load_calib+0xb0>)
    9122:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9124:	f003 031f 	and.w	r3, r3, #31
    9128:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    912a:	4b26      	ldr	r3, [pc, #152]	; (91c4 <_usb_load_calib+0xb0>)
    912c:	681b      	ldr	r3, [r3, #0]
    912e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    9130:	f003 031f 	and.w	r3, r3, #31
    9134:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9136:	4b23      	ldr	r3, [pc, #140]	; (91c4 <_usb_load_calib+0xb0>)
    9138:	681b      	ldr	r3, [r3, #0]
    913a:	0a9b      	lsrs	r3, r3, #10
    913c:	f003 0307 	and.w	r3, r3, #7
    9140:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    9142:	68fb      	ldr	r3, [r7, #12]
    9144:	2b00      	cmp	r3, #0
    9146:	d002      	beq.n	914e <_usb_load_calib+0x3a>
    9148:	68fb      	ldr	r3, [r7, #12]
    914a:	2b1f      	cmp	r3, #31
    914c:	d101      	bne.n	9152 <_usb_load_calib+0x3e>
		pad_transn = 9;
    914e:	2309      	movs	r3, #9
    9150:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9152:	68bb      	ldr	r3, [r7, #8]
    9154:	2b00      	cmp	r3, #0
    9156:	d002      	beq.n	915e <_usb_load_calib+0x4a>
    9158:	68bb      	ldr	r3, [r7, #8]
    915a:	2b1f      	cmp	r3, #31
    915c:	d101      	bne.n	9162 <_usb_load_calib+0x4e>
		pad_transp = 25;
    915e:	2319      	movs	r3, #25
    9160:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    9162:	687b      	ldr	r3, [r7, #4]
    9164:	2b00      	cmp	r3, #0
    9166:	d002      	beq.n	916e <_usb_load_calib+0x5a>
    9168:	687b      	ldr	r3, [r7, #4]
    916a:	2b07      	cmp	r3, #7
    916c:	d101      	bne.n	9172 <_usb_load_calib+0x5e>
		pad_trim = 6;
    916e:	2306      	movs	r3, #6
    9170:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9172:	68fb      	ldr	r3, [r7, #12]
    9174:	b29b      	uxth	r3, r3
    9176:	019b      	lsls	r3, r3, #6
    9178:	b29b      	uxth	r3, r3
    917a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    917e:	b29a      	uxth	r2, r3
    9180:	68bb      	ldr	r3, [r7, #8]
    9182:	b29b      	uxth	r3, r3
    9184:	f003 031f 	and.w	r3, r3, #31
    9188:	b29b      	uxth	r3, r3
    918a:	4313      	orrs	r3, r2
    918c:	b29a      	uxth	r2, r3
    918e:	687b      	ldr	r3, [r7, #4]
    9190:	b29b      	uxth	r3, r3
    9192:	031b      	lsls	r3, r3, #12
    9194:	b29b      	uxth	r3, r3
    9196:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    919a:	b29b      	uxth	r3, r3
    919c:	4313      	orrs	r3, r2
    919e:	b29a      	uxth	r2, r3
    91a0:	683b      	ldr	r3, [r7, #0]
    91a2:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    91a4:	683a      	ldr	r2, [r7, #0]
    91a6:	78d3      	ldrb	r3, [r2, #3]
    91a8:	f043 0303 	orr.w	r3, r3, #3
    91ac:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    91ae:	683a      	ldr	r2, [r7, #0]
    91b0:	78d3      	ldrb	r3, [r2, #3]
    91b2:	f043 030c 	orr.w	r3, r3, #12
    91b6:	70d3      	strb	r3, [r2, #3]
}
    91b8:	bf00      	nop
    91ba:	3714      	adds	r7, #20
    91bc:	46bd      	mov	sp, r7
    91be:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c2:	4770      	bx	lr
    91c4:	00800084 	.word	0x00800084

000091c8 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    91cc:	bf00      	nop
    91ce:	2203      	movs	r2, #3
    91d0:	2100      	movs	r1, #0
    91d2:	4804      	ldr	r0, [pc, #16]	; (91e4 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    91d4:	4b04      	ldr	r3, [pc, #16]	; (91e8 <_usb_d_dev_wait_dpll_rdy+0x20>)
    91d6:	4798      	blx	r3
    91d8:	4603      	mov	r3, r0
    91da:	2b03      	cmp	r3, #3
    91dc:	d1f7      	bne.n	91ce <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    91de:	bf00      	nop
    91e0:	bd80      	pop	{r7, pc}
    91e2:	bf00      	nop
    91e4:	40001000 	.word	0x40001000
    91e8:	00008bfd 	.word	0x00008bfd

000091ec <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    91ec:	b580      	push	{r7, lr}
    91ee:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    91f0:	480e      	ldr	r0, [pc, #56]	; (922c <_usb_d_dev_wait_dfll_rdy+0x40>)
    91f2:	4b0f      	ldr	r3, [pc, #60]	; (9230 <_usb_d_dev_wait_dfll_rdy+0x44>)
    91f4:	4798      	blx	r3
    91f6:	4603      	mov	r3, r0
    91f8:	2b00      	cmp	r3, #0
    91fa:	d00a      	beq.n	9212 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    91fc:	bf00      	nop
    91fe:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9202:	480a      	ldr	r0, [pc, #40]	; (922c <_usb_d_dev_wait_dfll_rdy+0x40>)
    9204:	4b0b      	ldr	r3, [pc, #44]	; (9234 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9206:	4798      	blx	r3
    9208:	4603      	mov	r3, r0
    920a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    920e:	d1f6      	bne.n	91fe <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9210:	e009      	b.n	9226 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9212:	bf00      	nop
    9214:	f44f 7180 	mov.w	r1, #256	; 0x100
    9218:	4804      	ldr	r0, [pc, #16]	; (922c <_usb_d_dev_wait_dfll_rdy+0x40>)
    921a:	4b06      	ldr	r3, [pc, #24]	; (9234 <_usb_d_dev_wait_dfll_rdy+0x48>)
    921c:	4798      	blx	r3
    921e:	4603      	mov	r3, r0
    9220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9224:	d1f6      	bne.n	9214 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9226:	bf00      	nop
    9228:	bd80      	pop	{r7, pc}
    922a:	bf00      	nop
    922c:	40001000 	.word	0x40001000
    9230:	00008c5b 	.word	0x00008c5b
    9234:	00008c35 	.word	0x00008c35

00009238 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9238:	b580      	push	{r7, lr}
    923a:	b082      	sub	sp, #8
    923c:	af00      	add	r7, sp, #0
    923e:	4603      	mov	r3, r0
    9240:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    9242:	79fb      	ldrb	r3, [r7, #7]
    9244:	2b00      	cmp	r3, #0
    9246:	d102      	bne.n	924e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9248:	4b05      	ldr	r3, [pc, #20]	; (9260 <_usb_d_dev_wait_clk_rdy+0x28>)
    924a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    924c:	e004      	b.n	9258 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    924e:	79fb      	ldrb	r3, [r7, #7]
    9250:	2b01      	cmp	r3, #1
    9252:	d101      	bne.n	9258 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9254:	4b03      	ldr	r3, [pc, #12]	; (9264 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9256:	4798      	blx	r3
}
    9258:	bf00      	nop
    925a:	3708      	adds	r7, #8
    925c:	46bd      	mov	sp, r7
    925e:	bd80      	pop	{r7, pc}
    9260:	000091ed 	.word	0x000091ed
    9264:	000091c9 	.word	0x000091c9

00009268 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9268:	b580      	push	{r7, lr}
    926a:	b082      	sub	sp, #8
    926c:	af00      	add	r7, sp, #0
    926e:	4603      	mov	r3, r0
    9270:	6039      	str	r1, [r7, #0]
    9272:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9274:	683b      	ldr	r3, [r7, #0]
    9276:	b2da      	uxtb	r2, r3
    9278:	79fb      	ldrb	r3, [r7, #7]
    927a:	4619      	mov	r1, r3
    927c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9280:	4b02      	ldr	r3, [pc, #8]	; (928c <_usbd_ep_int_ack+0x24>)
    9282:	4798      	blx	r3
}
    9284:	bf00      	nop
    9286:	3708      	adds	r7, #8
    9288:	46bd      	mov	sp, r7
    928a:	bd80      	pop	{r7, pc}
    928c:	00008d41 	.word	0x00008d41

00009290 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9290:	b580      	push	{r7, lr}
    9292:	b082      	sub	sp, #8
    9294:	af00      	add	r7, sp, #0
    9296:	4603      	mov	r3, r0
    9298:	6039      	str	r1, [r7, #0]
    929a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    929c:	683b      	ldr	r3, [r7, #0]
    929e:	b2da      	uxtb	r2, r3
    92a0:	79fb      	ldrb	r3, [r7, #7]
    92a2:	4619      	mov	r1, r3
    92a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92a8:	4b02      	ldr	r3, [pc, #8]	; (92b4 <_usbd_ep_int_en+0x24>)
    92aa:	4798      	blx	r3
}
    92ac:	bf00      	nop
    92ae:	3708      	adds	r7, #8
    92b0:	46bd      	mov	sp, r7
    92b2:	bd80      	pop	{r7, pc}
    92b4:	00008e15 	.word	0x00008e15

000092b8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    92b8:	b580      	push	{r7, lr}
    92ba:	b082      	sub	sp, #8
    92bc:	af00      	add	r7, sp, #0
    92be:	4603      	mov	r3, r0
    92c0:	6039      	str	r1, [r7, #0]
    92c2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    92c4:	683b      	ldr	r3, [r7, #0]
    92c6:	b2da      	uxtb	r2, r3
    92c8:	79fb      	ldrb	r3, [r7, #7]
    92ca:	4619      	mov	r1, r3
    92cc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92d0:	4b02      	ldr	r3, [pc, #8]	; (92dc <_usbd_ep_int_dis+0x24>)
    92d2:	4798      	blx	r3
}
    92d4:	bf00      	nop
    92d6:	3708      	adds	r7, #8
    92d8:	46bd      	mov	sp, r7
    92da:	bd80      	pop	{r7, pc}
    92dc:	00008e41 	.word	0x00008e41

000092e0 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    92e0:	b580      	push	{r7, lr}
    92e2:	b082      	sub	sp, #8
    92e4:	af00      	add	r7, sp, #0
    92e6:	4603      	mov	r3, r0
    92e8:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    92ea:	79fb      	ldrb	r3, [r7, #7]
    92ec:	4619      	mov	r1, r3
    92ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92f2:	4b06      	ldr	r3, [pc, #24]	; (930c <_usbd_ep_is_ctrl+0x2c>)
    92f4:	4798      	blx	r3
    92f6:	4603      	mov	r3, r0
    92f8:	2b11      	cmp	r3, #17
    92fa:	bf0c      	ite	eq
    92fc:	2301      	moveq	r3, #1
    92fe:	2300      	movne	r3, #0
    9300:	b2db      	uxtb	r3, r3
}
    9302:	4618      	mov	r0, r3
    9304:	3708      	adds	r7, #8
    9306:	46bd      	mov	sp, r7
    9308:	bd80      	pop	{r7, pc}
    930a:	bf00      	nop
    930c:	00008efb 	.word	0x00008efb

00009310 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9310:	b580      	push	{r7, lr}
    9312:	b082      	sub	sp, #8
    9314:	af00      	add	r7, sp, #0
    9316:	4603      	mov	r3, r0
    9318:	71fb      	strb	r3, [r7, #7]
    931a:	460b      	mov	r3, r1
    931c:	71bb      	strb	r3, [r7, #6]
    931e:	4613      	mov	r3, r2
    9320:	717b      	strb	r3, [r7, #5]
	if (st) {
    9322:	797b      	ldrb	r3, [r7, #5]
    9324:	2b00      	cmp	r3, #0
    9326:	d00b      	beq.n	9340 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9328:	79bb      	ldrb	r3, [r7, #6]
    932a:	2210      	movs	r2, #16
    932c:	fa02 f303 	lsl.w	r3, r2, r3
    9330:	b2da      	uxtb	r2, r3
    9332:	79fb      	ldrb	r3, [r7, #7]
    9334:	4619      	mov	r1, r3
    9336:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    933a:	4b09      	ldr	r3, [pc, #36]	; (9360 <_usbd_ep_set_stall+0x50>)
    933c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    933e:	e00a      	b.n	9356 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9340:	79bb      	ldrb	r3, [r7, #6]
    9342:	2210      	movs	r2, #16
    9344:	fa02 f303 	lsl.w	r3, r2, r3
    9348:	b2da      	uxtb	r2, r3
    934a:	79fb      	ldrb	r3, [r7, #7]
    934c:	4619      	mov	r1, r3
    934e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9352:	4b04      	ldr	r3, [pc, #16]	; (9364 <_usbd_ep_set_stall+0x54>)
    9354:	4798      	blx	r3
}
    9356:	bf00      	nop
    9358:	3708      	adds	r7, #8
    935a:	46bd      	mov	sp, r7
    935c:	bd80      	pop	{r7, pc}
    935e:	bf00      	nop
    9360:	00008d6d 	.word	0x00008d6d
    9364:	00008dc1 	.word	0x00008dc1

00009368 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9368:	b580      	push	{r7, lr}
    936a:	b084      	sub	sp, #16
    936c:	af00      	add	r7, sp, #0
    936e:	4603      	mov	r3, r0
    9370:	460a      	mov	r2, r1
    9372:	71fb      	strb	r3, [r7, #7]
    9374:	4613      	mov	r3, r2
    9376:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9378:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    937c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    937e:	79fb      	ldrb	r3, [r7, #7]
    9380:	4619      	mov	r1, r3
    9382:	68f8      	ldr	r0, [r7, #12]
    9384:	4b08      	ldr	r3, [pc, #32]	; (93a8 <_usbd_ep_is_stalled+0x40>)
    9386:	4798      	blx	r3
    9388:	4603      	mov	r3, r0
    938a:	4619      	mov	r1, r3
    938c:	79bb      	ldrb	r3, [r7, #6]
    938e:	2210      	movs	r2, #16
    9390:	fa02 f303 	lsl.w	r3, r2, r3
    9394:	400b      	ands	r3, r1
    9396:	2b00      	cmp	r3, #0
    9398:	bf14      	ite	ne
    939a:	2301      	movne	r3, #1
    939c:	2300      	moveq	r3, #0
    939e:	b2db      	uxtb	r3, r3
}
    93a0:	4618      	mov	r0, r3
    93a2:	3710      	adds	r7, #16
    93a4:	46bd      	mov	sp, r7
    93a6:	bd80      	pop	{r7, pc}
    93a8:	00008d99 	.word	0x00008d99

000093ac <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    93ac:	b580      	push	{r7, lr}
    93ae:	b084      	sub	sp, #16
    93b0:	af00      	add	r7, sp, #0
    93b2:	4603      	mov	r3, r0
    93b4:	460a      	mov	r2, r1
    93b6:	71fb      	strb	r3, [r7, #7]
    93b8:	4613      	mov	r3, r2
    93ba:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    93bc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    93c0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    93c2:	79fb      	ldrb	r3, [r7, #7]
    93c4:	4619      	mov	r1, r3
    93c6:	68f8      	ldr	r0, [r7, #12]
    93c8:	4b08      	ldr	r3, [pc, #32]	; (93ec <_usbd_ep_is_stall_sent+0x40>)
    93ca:	4798      	blx	r3
    93cc:	4603      	mov	r3, r0
    93ce:	4619      	mov	r1, r3
    93d0:	79bb      	ldrb	r3, [r7, #6]
    93d2:	2220      	movs	r2, #32
    93d4:	fa02 f303 	lsl.w	r3, r2, r3
    93d8:	400b      	ands	r3, r1
    93da:	2b00      	cmp	r3, #0
    93dc:	bf14      	ite	ne
    93de:	2301      	movne	r3, #1
    93e0:	2300      	moveq	r3, #0
    93e2:	b2db      	uxtb	r3, r3
}
    93e4:	4618      	mov	r0, r3
    93e6:	3710      	adds	r7, #16
    93e8:	46bd      	mov	sp, r7
    93ea:	bd80      	pop	{r7, pc}
    93ec:	00008d19 	.word	0x00008d19

000093f0 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    93f0:	b580      	push	{r7, lr}
    93f2:	b082      	sub	sp, #8
    93f4:	af00      	add	r7, sp, #0
    93f6:	4603      	mov	r3, r0
    93f8:	460a      	mov	r2, r1
    93fa:	71fb      	strb	r3, [r7, #7]
    93fc:	4613      	mov	r3, r2
    93fe:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9400:	79bb      	ldrb	r3, [r7, #6]
    9402:	2220      	movs	r2, #32
    9404:	409a      	lsls	r2, r3
    9406:	79fb      	ldrb	r3, [r7, #7]
    9408:	4611      	mov	r1, r2
    940a:	4618      	mov	r0, r3
    940c:	4b02      	ldr	r3, [pc, #8]	; (9418 <_usbd_ep_ack_stall+0x28>)
    940e:	4798      	blx	r3
}
    9410:	bf00      	nop
    9412:	3708      	adds	r7, #8
    9414:	46bd      	mov	sp, r7
    9416:	bd80      	pop	{r7, pc}
    9418:	00009269 	.word	0x00009269

0000941c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    941c:	b580      	push	{r7, lr}
    941e:	b082      	sub	sp, #8
    9420:	af00      	add	r7, sp, #0
    9422:	4603      	mov	r3, r0
    9424:	71fb      	strb	r3, [r7, #7]
    9426:	460b      	mov	r3, r1
    9428:	71bb      	strb	r3, [r7, #6]
    942a:	4613      	mov	r3, r2
    942c:	717b      	strb	r3, [r7, #5]
	if (en) {
    942e:	797b      	ldrb	r3, [r7, #5]
    9430:	2b00      	cmp	r3, #0
    9432:	d008      	beq.n	9446 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9434:	79bb      	ldrb	r3, [r7, #6]
    9436:	2220      	movs	r2, #32
    9438:	409a      	lsls	r2, r3
    943a:	79fb      	ldrb	r3, [r7, #7]
    943c:	4611      	mov	r1, r2
    943e:	4618      	mov	r0, r3
    9440:	4b07      	ldr	r3, [pc, #28]	; (9460 <_usbd_ep_int_stall_en+0x44>)
    9442:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9444:	e007      	b.n	9456 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9446:	79bb      	ldrb	r3, [r7, #6]
    9448:	2220      	movs	r2, #32
    944a:	409a      	lsls	r2, r3
    944c:	79fb      	ldrb	r3, [r7, #7]
    944e:	4611      	mov	r1, r2
    9450:	4618      	mov	r0, r3
    9452:	4b04      	ldr	r3, [pc, #16]	; (9464 <_usbd_ep_int_stall_en+0x48>)
    9454:	4798      	blx	r3
}
    9456:	bf00      	nop
    9458:	3708      	adds	r7, #8
    945a:	46bd      	mov	sp, r7
    945c:	bd80      	pop	{r7, pc}
    945e:	bf00      	nop
    9460:	00009291 	.word	0x00009291
    9464:	000092b9 	.word	0x000092b9

00009468 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9468:	b580      	push	{r7, lr}
    946a:	b082      	sub	sp, #8
    946c:	af00      	add	r7, sp, #0
    946e:	4603      	mov	r3, r0
    9470:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    9472:	79fb      	ldrb	r3, [r7, #7]
    9474:	4619      	mov	r1, r3
    9476:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    947a:	4b03      	ldr	r3, [pc, #12]	; (9488 <_usbd_ep_stop_setup+0x20>)
    947c:	4798      	blx	r3
}
    947e:	bf00      	nop
    9480:	3708      	adds	r7, #8
    9482:	46bd      	mov	sp, r7
    9484:	bd80      	pop	{r7, pc}
    9486:	bf00      	nop
    9488:	00008ded 	.word	0x00008ded

0000948c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    948c:	b580      	push	{r7, lr}
    948e:	b082      	sub	sp, #8
    9490:	af00      	add	r7, sp, #0
    9492:	4603      	mov	r3, r0
    9494:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9496:	79fb      	ldrb	r3, [r7, #7]
    9498:	2210      	movs	r2, #16
    949a:	4619      	mov	r1, r3
    949c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94a0:	4b05      	ldr	r3, [pc, #20]	; (94b8 <_usbd_ep_is_setup+0x2c>)
    94a2:	4798      	blx	r3
    94a4:	4603      	mov	r3, r0
    94a6:	2b00      	cmp	r3, #0
    94a8:	bf14      	ite	ne
    94aa:	2301      	movne	r3, #1
    94ac:	2300      	moveq	r3, #0
    94ae:	b2db      	uxtb	r3, r3
}
    94b0:	4618      	mov	r0, r3
    94b2:	3708      	adds	r7, #8
    94b4:	46bd      	mov	sp, r7
    94b6:	bd80      	pop	{r7, pc}
    94b8:	00008ce3 	.word	0x00008ce3

000094bc <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    94bc:	b580      	push	{r7, lr}
    94be:	b082      	sub	sp, #8
    94c0:	af00      	add	r7, sp, #0
    94c2:	4603      	mov	r3, r0
    94c4:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    94c6:	79fb      	ldrb	r3, [r7, #7]
    94c8:	2110      	movs	r1, #16
    94ca:	4618      	mov	r0, r3
    94cc:	4b02      	ldr	r3, [pc, #8]	; (94d8 <_usbd_ep_ack_setup+0x1c>)
    94ce:	4798      	blx	r3
}
    94d0:	bf00      	nop
    94d2:	3708      	adds	r7, #8
    94d4:	46bd      	mov	sp, r7
    94d6:	bd80      	pop	{r7, pc}
    94d8:	00009269 	.word	0x00009269

000094dc <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    94dc:	b580      	push	{r7, lr}
    94de:	b082      	sub	sp, #8
    94e0:	af00      	add	r7, sp, #0
    94e2:	4603      	mov	r3, r0
    94e4:	71fb      	strb	r3, [r7, #7]
    94e6:	460b      	mov	r3, r1
    94e8:	71bb      	strb	r3, [r7, #6]
    94ea:	4613      	mov	r3, r2
    94ec:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    94ee:	797b      	ldrb	r3, [r7, #5]
    94f0:	2b00      	cmp	r3, #0
    94f2:	d00b      	beq.n	950c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    94f4:	79bb      	ldrb	r3, [r7, #6]
    94f6:	2201      	movs	r2, #1
    94f8:	fa02 f303 	lsl.w	r3, r2, r3
    94fc:	b2da      	uxtb	r2, r3
    94fe:	79fb      	ldrb	r3, [r7, #7]
    9500:	4619      	mov	r1, r3
    9502:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9506:	4b09      	ldr	r3, [pc, #36]	; (952c <_usbd_ep_set_toggle+0x50>)
    9508:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    950a:	e00a      	b.n	9522 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    950c:	79bb      	ldrb	r3, [r7, #6]
    950e:	2201      	movs	r2, #1
    9510:	fa02 f303 	lsl.w	r3, r2, r3
    9514:	b2da      	uxtb	r2, r3
    9516:	79fb      	ldrb	r3, [r7, #7]
    9518:	4619      	mov	r1, r3
    951a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    951e:	4b04      	ldr	r3, [pc, #16]	; (9530 <_usbd_ep_set_toggle+0x54>)
    9520:	4798      	blx	r3
}
    9522:	bf00      	nop
    9524:	3708      	adds	r7, #8
    9526:	46bd      	mov	sp, r7
    9528:	bd80      	pop	{r7, pc}
    952a:	bf00      	nop
    952c:	00008d6d 	.word	0x00008d6d
    9530:	00008dc1 	.word	0x00008dc1

00009534 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9534:	b580      	push	{r7, lr}
    9536:	b082      	sub	sp, #8
    9538:	af00      	add	r7, sp, #0
    953a:	4603      	mov	r3, r0
    953c:	460a      	mov	r2, r1
    953e:	71fb      	strb	r3, [r7, #7]
    9540:	4613      	mov	r3, r2
    9542:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9544:	79bb      	ldrb	r3, [r7, #6]
    9546:	2201      	movs	r2, #1
    9548:	409a      	lsls	r2, r3
    954a:	79fb      	ldrb	r3, [r7, #7]
    954c:	4611      	mov	r1, r2
    954e:	4618      	mov	r0, r3
    9550:	4b02      	ldr	r3, [pc, #8]	; (955c <_usbd_ep_ack_io_cpt+0x28>)
    9552:	4798      	blx	r3
}
    9554:	bf00      	nop
    9556:	3708      	adds	r7, #8
    9558:	46bd      	mov	sp, r7
    955a:	bd80      	pop	{r7, pc}
    955c:	00009269 	.word	0x00009269

00009560 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9560:	b480      	push	{r7}
    9562:	b085      	sub	sp, #20
    9564:	af00      	add	r7, sp, #0
    9566:	4603      	mov	r3, r0
    9568:	603a      	str	r2, [r7, #0]
    956a:	71fb      	strb	r3, [r7, #7]
    956c:	460b      	mov	r3, r1
    956e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9570:	79fa      	ldrb	r2, [r7, #7]
    9572:	79bb      	ldrb	r3, [r7, #6]
    9574:	0052      	lsls	r2, r2, #1
    9576:	4413      	add	r3, r2
    9578:	011b      	lsls	r3, r3, #4
    957a:	4a06      	ldr	r2, [pc, #24]	; (9594 <_usbd_ep_set_buf+0x34>)
    957c:	4413      	add	r3, r2
    957e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9580:	68fb      	ldr	r3, [r7, #12]
    9582:	683a      	ldr	r2, [r7, #0]
    9584:	601a      	str	r2, [r3, #0]
}
    9586:	bf00      	nop
    9588:	3714      	adds	r7, #20
    958a:	46bd      	mov	sp, r7
    958c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9590:	4770      	bx	lr
    9592:	bf00      	nop
    9594:	20000c5c 	.word	0x20000c5c

00009598 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9598:	b480      	push	{r7}
    959a:	b085      	sub	sp, #20
    959c:	af00      	add	r7, sp, #0
    959e:	4603      	mov	r3, r0
    95a0:	71fb      	strb	r3, [r7, #7]
    95a2:	460b      	mov	r3, r1
    95a4:	71bb      	strb	r3, [r7, #6]
    95a6:	4613      	mov	r3, r2
    95a8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    95aa:	79fa      	ldrb	r2, [r7, #7]
    95ac:	79bb      	ldrb	r3, [r7, #6]
    95ae:	0052      	lsls	r2, r2, #1
    95b0:	4413      	add	r3, r2
    95b2:	011b      	lsls	r3, r3, #4
    95b4:	4a08      	ldr	r2, [pc, #32]	; (95d8 <_usbd_ep_set_in_count+0x40>)
    95b6:	4413      	add	r3, r2
    95b8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    95ba:	88bb      	ldrh	r3, [r7, #4]
    95bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    95c0:	b299      	uxth	r1, r3
    95c2:	68fa      	ldr	r2, [r7, #12]
    95c4:	6853      	ldr	r3, [r2, #4]
    95c6:	f361 339b 	bfi	r3, r1, #14, #14
    95ca:	6053      	str	r3, [r2, #4]
}
    95cc:	bf00      	nop
    95ce:	3714      	adds	r7, #20
    95d0:	46bd      	mov	sp, r7
    95d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95d6:	4770      	bx	lr
    95d8:	20000c5c 	.word	0x20000c5c

000095dc <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    95dc:	b480      	push	{r7}
    95de:	b085      	sub	sp, #20
    95e0:	af00      	add	r7, sp, #0
    95e2:	4603      	mov	r3, r0
    95e4:	71fb      	strb	r3, [r7, #7]
    95e6:	460b      	mov	r3, r1
    95e8:	71bb      	strb	r3, [r7, #6]
    95ea:	4613      	mov	r3, r2
    95ec:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    95ee:	79fa      	ldrb	r2, [r7, #7]
    95f0:	79bb      	ldrb	r3, [r7, #6]
    95f2:	0052      	lsls	r2, r2, #1
    95f4:	4413      	add	r3, r2
    95f6:	011b      	lsls	r3, r3, #4
    95f8:	4a08      	ldr	r2, [pc, #32]	; (961c <_usbd_ep_set_in_size+0x40>)
    95fa:	4413      	add	r3, r2
    95fc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    95fe:	88bb      	ldrh	r3, [r7, #4]
    9600:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9604:	b299      	uxth	r1, r3
    9606:	68fa      	ldr	r2, [r7, #12]
    9608:	6853      	ldr	r3, [r2, #4]
    960a:	f361 030d 	bfi	r3, r1, #0, #14
    960e:	6053      	str	r3, [r2, #4]
}
    9610:	bf00      	nop
    9612:	3714      	adds	r7, #20
    9614:	46bd      	mov	sp, r7
    9616:	f85d 7b04 	ldr.w	r7, [sp], #4
    961a:	4770      	bx	lr
    961c:	20000c5c 	.word	0x20000c5c

00009620 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9620:	b480      	push	{r7}
    9622:	b085      	sub	sp, #20
    9624:	af00      	add	r7, sp, #0
    9626:	4603      	mov	r3, r0
    9628:	71fb      	strb	r3, [r7, #7]
    962a:	460b      	mov	r3, r1
    962c:	71bb      	strb	r3, [r7, #6]
    962e:	4613      	mov	r3, r2
    9630:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9632:	79fa      	ldrb	r2, [r7, #7]
    9634:	79bb      	ldrb	r3, [r7, #6]
    9636:	0052      	lsls	r2, r2, #1
    9638:	4413      	add	r3, r2
    963a:	011b      	lsls	r3, r3, #4
    963c:	4a08      	ldr	r2, [pc, #32]	; (9660 <_usbd_ep_set_out_count+0x40>)
    963e:	4413      	add	r3, r2
    9640:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9642:	88bb      	ldrh	r3, [r7, #4]
    9644:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9648:	b299      	uxth	r1, r3
    964a:	68fa      	ldr	r2, [r7, #12]
    964c:	6853      	ldr	r3, [r2, #4]
    964e:	f361 030d 	bfi	r3, r1, #0, #14
    9652:	6053      	str	r3, [r2, #4]
}
    9654:	bf00      	nop
    9656:	3714      	adds	r7, #20
    9658:	46bd      	mov	sp, r7
    965a:	f85d 7b04 	ldr.w	r7, [sp], #4
    965e:	4770      	bx	lr
    9660:	20000c5c 	.word	0x20000c5c

00009664 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9664:	b480      	push	{r7}
    9666:	b085      	sub	sp, #20
    9668:	af00      	add	r7, sp, #0
    966a:	4603      	mov	r3, r0
    966c:	71fb      	strb	r3, [r7, #7]
    966e:	460b      	mov	r3, r1
    9670:	71bb      	strb	r3, [r7, #6]
    9672:	4613      	mov	r3, r2
    9674:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9676:	79fa      	ldrb	r2, [r7, #7]
    9678:	79bb      	ldrb	r3, [r7, #6]
    967a:	0052      	lsls	r2, r2, #1
    967c:	4413      	add	r3, r2
    967e:	011b      	lsls	r3, r3, #4
    9680:	4a08      	ldr	r2, [pc, #32]	; (96a4 <_usbd_ep_set_out_size+0x40>)
    9682:	4413      	add	r3, r2
    9684:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9686:	88bb      	ldrh	r3, [r7, #4]
    9688:	f3c3 030d 	ubfx	r3, r3, #0, #14
    968c:	b299      	uxth	r1, r3
    968e:	68fa      	ldr	r2, [r7, #12]
    9690:	6853      	ldr	r3, [r2, #4]
    9692:	f361 339b 	bfi	r3, r1, #14, #14
    9696:	6053      	str	r3, [r2, #4]
}
    9698:	bf00      	nop
    969a:	3714      	adds	r7, #20
    969c:	46bd      	mov	sp, r7
    969e:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a2:	4770      	bx	lr
    96a4:	20000c5c 	.word	0x20000c5c

000096a8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    96a8:	b580      	push	{r7, lr}
    96aa:	b084      	sub	sp, #16
    96ac:	af00      	add	r7, sp, #0
    96ae:	60ba      	str	r2, [r7, #8]
    96b0:	607b      	str	r3, [r7, #4]
    96b2:	4603      	mov	r3, r0
    96b4:	73fb      	strb	r3, [r7, #15]
    96b6:	460b      	mov	r3, r1
    96b8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    96ba:	68bb      	ldr	r3, [r7, #8]
    96bc:	b29a      	uxth	r2, r3
    96be:	7bb9      	ldrb	r1, [r7, #14]
    96c0:	7bfb      	ldrb	r3, [r7, #15]
    96c2:	4618      	mov	r0, r3
    96c4:	4b06      	ldr	r3, [pc, #24]	; (96e0 <_usbd_ep_set_in_trans+0x38>)
    96c6:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	b29a      	uxth	r2, r3
    96cc:	7bb9      	ldrb	r1, [r7, #14]
    96ce:	7bfb      	ldrb	r3, [r7, #15]
    96d0:	4618      	mov	r0, r3
    96d2:	4b04      	ldr	r3, [pc, #16]	; (96e4 <_usbd_ep_set_in_trans+0x3c>)
    96d4:	4798      	blx	r3
}
    96d6:	bf00      	nop
    96d8:	3710      	adds	r7, #16
    96da:	46bd      	mov	sp, r7
    96dc:	bd80      	pop	{r7, pc}
    96de:	bf00      	nop
    96e0:	000095dd 	.word	0x000095dd
    96e4:	00009599 	.word	0x00009599

000096e8 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    96e8:	b580      	push	{r7, lr}
    96ea:	b084      	sub	sp, #16
    96ec:	af00      	add	r7, sp, #0
    96ee:	60ba      	str	r2, [r7, #8]
    96f0:	607b      	str	r3, [r7, #4]
    96f2:	4603      	mov	r3, r0
    96f4:	73fb      	strb	r3, [r7, #15]
    96f6:	460b      	mov	r3, r1
    96f8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    96fa:	68bb      	ldr	r3, [r7, #8]
    96fc:	b29a      	uxth	r2, r3
    96fe:	7bb9      	ldrb	r1, [r7, #14]
    9700:	7bfb      	ldrb	r3, [r7, #15]
    9702:	4618      	mov	r0, r3
    9704:	4b06      	ldr	r3, [pc, #24]	; (9720 <_usbd_ep_set_out_trans+0x38>)
    9706:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	b29a      	uxth	r2, r3
    970c:	7bb9      	ldrb	r1, [r7, #14]
    970e:	7bfb      	ldrb	r3, [r7, #15]
    9710:	4618      	mov	r0, r3
    9712:	4b04      	ldr	r3, [pc, #16]	; (9724 <_usbd_ep_set_out_trans+0x3c>)
    9714:	4798      	blx	r3
}
    9716:	bf00      	nop
    9718:	3710      	adds	r7, #16
    971a:	46bd      	mov	sp, r7
    971c:	bd80      	pop	{r7, pc}
    971e:	bf00      	nop
    9720:	00009665 	.word	0x00009665
    9724:	00009621 	.word	0x00009621

00009728 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9728:	b480      	push	{r7}
    972a:	b085      	sub	sp, #20
    972c:	af00      	add	r7, sp, #0
    972e:	4603      	mov	r3, r0
    9730:	460a      	mov	r2, r1
    9732:	71fb      	strb	r3, [r7, #7]
    9734:	4613      	mov	r3, r2
    9736:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9738:	79fa      	ldrb	r2, [r7, #7]
    973a:	79bb      	ldrb	r3, [r7, #6]
    973c:	0052      	lsls	r2, r2, #1
    973e:	4413      	add	r3, r2
    9740:	011b      	lsls	r3, r3, #4
    9742:	4a06      	ldr	r2, [pc, #24]	; (975c <_usbd_ep_clear_bank_status+0x34>)
    9744:	4413      	add	r3, r2
    9746:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9748:	68fb      	ldr	r3, [r7, #12]
    974a:	2200      	movs	r2, #0
    974c:	729a      	strb	r2, [r3, #10]
}
    974e:	bf00      	nop
    9750:	3714      	adds	r7, #20
    9752:	46bd      	mov	sp, r7
    9754:	f85d 7b04 	ldr.w	r7, [sp], #4
    9758:	4770      	bx	lr
    975a:	bf00      	nop
    975c:	20000c5c 	.word	0x20000c5c

00009760 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9760:	b580      	push	{r7, lr}
    9762:	b082      	sub	sp, #8
    9764:	af00      	add	r7, sp, #0
    9766:	4603      	mov	r3, r0
    9768:	71fb      	strb	r3, [r7, #7]
    976a:	460b      	mov	r3, r1
    976c:	71bb      	strb	r3, [r7, #6]
    976e:	4613      	mov	r3, r2
    9770:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9772:	797b      	ldrb	r3, [r7, #5]
    9774:	2b00      	cmp	r3, #0
    9776:	d00b      	beq.n	9790 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9778:	79bb      	ldrb	r3, [r7, #6]
    977a:	2240      	movs	r2, #64	; 0x40
    977c:	fa02 f303 	lsl.w	r3, r2, r3
    9780:	b2da      	uxtb	r2, r3
    9782:	79fb      	ldrb	r3, [r7, #7]
    9784:	4619      	mov	r1, r3
    9786:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    978a:	4b09      	ldr	r3, [pc, #36]	; (97b0 <_usbd_ep_set_in_rdy+0x50>)
    978c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    978e:	e00a      	b.n	97a6 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9790:	79bb      	ldrb	r3, [r7, #6]
    9792:	2240      	movs	r2, #64	; 0x40
    9794:	fa02 f303 	lsl.w	r3, r2, r3
    9798:	b2da      	uxtb	r2, r3
    979a:	79fb      	ldrb	r3, [r7, #7]
    979c:	4619      	mov	r1, r3
    979e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97a2:	4b04      	ldr	r3, [pc, #16]	; (97b4 <_usbd_ep_set_in_rdy+0x54>)
    97a4:	4798      	blx	r3
}
    97a6:	bf00      	nop
    97a8:	3708      	adds	r7, #8
    97aa:	46bd      	mov	sp, r7
    97ac:	bd80      	pop	{r7, pc}
    97ae:	bf00      	nop
    97b0:	00008d6d 	.word	0x00008d6d
    97b4:	00008dc1 	.word	0x00008dc1

000097b8 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	4603      	mov	r3, r0
    97c0:	71fb      	strb	r3, [r7, #7]
    97c2:	460b      	mov	r3, r1
    97c4:	71bb      	strb	r3, [r7, #6]
    97c6:	4613      	mov	r3, r2
    97c8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    97ca:	797b      	ldrb	r3, [r7, #5]
    97cc:	2b00      	cmp	r3, #0
    97ce:	d00b      	beq.n	97e8 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    97d0:	79bb      	ldrb	r3, [r7, #6]
    97d2:	2240      	movs	r2, #64	; 0x40
    97d4:	fa02 f303 	lsl.w	r3, r2, r3
    97d8:	b2da      	uxtb	r2, r3
    97da:	79fb      	ldrb	r3, [r7, #7]
    97dc:	4619      	mov	r1, r3
    97de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97e2:	4b09      	ldr	r3, [pc, #36]	; (9808 <_usbd_ep_set_out_rdy+0x50>)
    97e4:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    97e6:	e00a      	b.n	97fe <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    97e8:	79bb      	ldrb	r3, [r7, #6]
    97ea:	2240      	movs	r2, #64	; 0x40
    97ec:	fa02 f303 	lsl.w	r3, r2, r3
    97f0:	b2da      	uxtb	r2, r3
    97f2:	79fb      	ldrb	r3, [r7, #7]
    97f4:	4619      	mov	r1, r3
    97f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97fa:	4b04      	ldr	r3, [pc, #16]	; (980c <_usbd_ep_set_out_rdy+0x54>)
    97fc:	4798      	blx	r3
}
    97fe:	bf00      	nop
    9800:	3708      	adds	r7, #8
    9802:	46bd      	mov	sp, r7
    9804:	bd80      	pop	{r7, pc}
    9806:	bf00      	nop
    9808:	00008dc1 	.word	0x00008dc1
    980c:	00008d6d 	.word	0x00008d6d

00009810 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9810:	b480      	push	{r7}
    9812:	b083      	sub	sp, #12
    9814:	af00      	add	r7, sp, #0
    9816:	4603      	mov	r3, r0
    9818:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    981a:	88fb      	ldrh	r3, [r7, #6]
    981c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9820:	d820      	bhi.n	9864 <_usbd_ep_pcksize_size+0x54>
    9822:	88fb      	ldrh	r3, [r7, #6]
    9824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9828:	d81a      	bhi.n	9860 <_usbd_ep_pcksize_size+0x50>
    982a:	88fb      	ldrh	r3, [r7, #6]
    982c:	2b80      	cmp	r3, #128	; 0x80
    982e:	d815      	bhi.n	985c <_usbd_ep_pcksize_size+0x4c>
    9830:	88fb      	ldrh	r3, [r7, #6]
    9832:	2b40      	cmp	r3, #64	; 0x40
    9834:	d810      	bhi.n	9858 <_usbd_ep_pcksize_size+0x48>
    9836:	88fb      	ldrh	r3, [r7, #6]
    9838:	2b20      	cmp	r3, #32
    983a:	d80b      	bhi.n	9854 <_usbd_ep_pcksize_size+0x44>
    983c:	88fb      	ldrh	r3, [r7, #6]
    983e:	2b10      	cmp	r3, #16
    9840:	d806      	bhi.n	9850 <_usbd_ep_pcksize_size+0x40>
    9842:	88fb      	ldrh	r3, [r7, #6]
    9844:	2b08      	cmp	r3, #8
    9846:	bf8c      	ite	hi
    9848:	2301      	movhi	r3, #1
    984a:	2300      	movls	r3, #0
    984c:	b2db      	uxtb	r3, r3
    984e:	e00a      	b.n	9866 <_usbd_ep_pcksize_size+0x56>
    9850:	2302      	movs	r3, #2
    9852:	e008      	b.n	9866 <_usbd_ep_pcksize_size+0x56>
    9854:	2303      	movs	r3, #3
    9856:	e006      	b.n	9866 <_usbd_ep_pcksize_size+0x56>
    9858:	2304      	movs	r3, #4
    985a:	e004      	b.n	9866 <_usbd_ep_pcksize_size+0x56>
    985c:	2305      	movs	r3, #5
    985e:	e002      	b.n	9866 <_usbd_ep_pcksize_size+0x56>
    9860:	2306      	movs	r3, #6
    9862:	e000      	b.n	9866 <_usbd_ep_pcksize_size+0x56>
    9864:	2307      	movs	r3, #7
}
    9866:	4618      	mov	r0, r3
    9868:	370c      	adds	r7, #12
    986a:	46bd      	mov	sp, r7
    986c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9870:	4770      	bx	lr
	...

00009874 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9874:	b480      	push	{r7}
    9876:	b085      	sub	sp, #20
    9878:	af00      	add	r7, sp, #0
    987a:	4603      	mov	r3, r0
    987c:	460a      	mov	r2, r1
    987e:	71fb      	strb	r3, [r7, #7]
    9880:	4613      	mov	r3, r2
    9882:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9884:	79fb      	ldrb	r3, [r7, #7]
    9886:	2b00      	cmp	r3, #0
    9888:	d008      	beq.n	989c <_usb_d_dev_ept+0x28>
    988a:	79bb      	ldrb	r3, [r7, #6]
    988c:	2b00      	cmp	r3, #0
    988e:	d003      	beq.n	9898 <_usb_d_dev_ept+0x24>
    9890:	79fb      	ldrb	r3, [r7, #7]
    9892:	3304      	adds	r3, #4
    9894:	b2db      	uxtb	r3, r3
    9896:	e002      	b.n	989e <_usb_d_dev_ept+0x2a>
    9898:	79fb      	ldrb	r3, [r7, #7]
    989a:	e000      	b.n	989e <_usb_d_dev_ept+0x2a>
    989c:	2300      	movs	r3, #0
    989e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    98a0:	7bfa      	ldrb	r2, [r7, #15]
    98a2:	4613      	mov	r3, r2
    98a4:	009b      	lsls	r3, r3, #2
    98a6:	4413      	add	r3, r2
    98a8:	009b      	lsls	r3, r3, #2
    98aa:	3310      	adds	r3, #16
    98ac:	4a04      	ldr	r2, [pc, #16]	; (98c0 <_usb_d_dev_ept+0x4c>)
    98ae:	4413      	add	r3, r2
    98b0:	3304      	adds	r3, #4
}
    98b2:	4618      	mov	r0, r3
    98b4:	3714      	adds	r7, #20
    98b6:	46bd      	mov	sp, r7
    98b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    98bc:	4770      	bx	lr
    98be:	bf00      	nop
    98c0:	20000b94 	.word	0x20000b94

000098c4 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    98c4:	b580      	push	{r7, lr}
    98c6:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    98c8:	2104      	movs	r1, #4
    98ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98ce:	4b03      	ldr	r3, [pc, #12]	; (98dc <_usb_d_dev_sof+0x18>)
    98d0:	4798      	blx	r3
	dev_inst.callbacks.sof();
    98d2:	4b03      	ldr	r3, [pc, #12]	; (98e0 <_usb_d_dev_sof+0x1c>)
    98d4:	681b      	ldr	r3, [r3, #0]
    98d6:	4798      	blx	r3
}
    98d8:	bf00      	nop
    98da:	bd80      	pop	{r7, pc}
    98dc:	00008f3b 	.word	0x00008f3b
    98e0:	20000b94 	.word	0x20000b94

000098e4 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    98e4:	b580      	push	{r7, lr}
    98e6:	b084      	sub	sp, #16
    98e8:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    98ea:	2300      	movs	r3, #0
    98ec:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    98ee:	f240 2101 	movw	r1, #513	; 0x201
    98f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98f6:	4b1a      	ldr	r3, [pc, #104]	; (9960 <_usb_d_dev_lpmsusp+0x7c>)
    98f8:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    98fa:	f240 2101 	movw	r1, #513	; 0x201
    98fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9902:	4b18      	ldr	r3, [pc, #96]	; (9964 <_usb_d_dev_lpmsusp+0x80>)
    9904:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9906:	2170      	movs	r1, #112	; 0x70
    9908:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    990c:	4b16      	ldr	r3, [pc, #88]	; (9968 <_usb_d_dev_lpmsusp+0x84>)
    990e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9910:	2300      	movs	r3, #0
    9912:	73fb      	strb	r3, [r7, #15]
    9914:	e018      	b.n	9948 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9916:	7bfb      	ldrb	r3, [r7, #15]
    9918:	015b      	lsls	r3, r3, #5
    991a:	4a14      	ldr	r2, [pc, #80]	; (996c <_usb_d_dev_lpmsusp+0x88>)
    991c:	4413      	add	r3, r2
    991e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	891b      	ldrh	r3, [r3, #8]
    9924:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9928:	b2db      	uxtb	r3, r3
    992a:	2b03      	cmp	r3, #3
    992c:	d109      	bne.n	9942 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	891b      	ldrh	r3, [r3, #8]
    9932:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9936:	b29b      	uxth	r3, r3
    9938:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	2200      	movs	r2, #0
    993e:	811a      	strh	r2, [r3, #8]
			break;
    9940:	e005      	b.n	994e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9942:	7bfb      	ldrb	r3, [r7, #15]
    9944:	3301      	adds	r3, #1
    9946:	73fb      	strb	r3, [r7, #15]
    9948:	7bfb      	ldrb	r3, [r7, #15]
    994a:	2b03      	cmp	r3, #3
    994c:	d9e3      	bls.n	9916 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    994e:	4b08      	ldr	r3, [pc, #32]	; (9970 <_usb_d_dev_lpmsusp+0x8c>)
    9950:	685b      	ldr	r3, [r3, #4]
    9952:	68b9      	ldr	r1, [r7, #8]
    9954:	2003      	movs	r0, #3
    9956:	4798      	blx	r3
}
    9958:	bf00      	nop
    995a:	3710      	adds	r7, #16
    995c:	46bd      	mov	sp, r7
    995e:	bd80      	pop	{r7, pc}
    9960:	00008f3b 	.word	0x00008f3b
    9964:	00008f91 	.word	0x00008f91
    9968:	00008f59 	.word	0x00008f59
    996c:	20000c5c 	.word	0x20000c5c
    9970:	20000b94 	.word	0x20000b94

00009974 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9974:	b580      	push	{r7, lr}
    9976:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9978:	2180      	movs	r1, #128	; 0x80
    997a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    997e:	4b04      	ldr	r3, [pc, #16]	; (9990 <_usb_d_dev_ramerr+0x1c>)
    9980:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9982:	4b04      	ldr	r3, [pc, #16]	; (9994 <_usb_d_dev_ramerr+0x20>)
    9984:	685b      	ldr	r3, [r3, #4]
    9986:	2100      	movs	r1, #0
    9988:	2005      	movs	r0, #5
    998a:	4798      	blx	r3
}
    998c:	bf00      	nop
    998e:	bd80      	pop	{r7, pc}
    9990:	00008f3b 	.word	0x00008f3b
    9994:	20000b94 	.word	0x20000b94

00009998 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9998:	b580      	push	{r7, lr}
    999a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    999c:	2170      	movs	r1, #112	; 0x70
    999e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99a2:	4b0b      	ldr	r3, [pc, #44]	; (99d0 <_usb_d_dev_wakeup+0x38>)
    99a4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    99a6:	2170      	movs	r1, #112	; 0x70
    99a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99ac:	4b09      	ldr	r3, [pc, #36]	; (99d4 <_usb_d_dev_wakeup+0x3c>)
    99ae:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    99b0:	f240 2101 	movw	r1, #513	; 0x201
    99b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99b8:	4b07      	ldr	r3, [pc, #28]	; (99d8 <_usb_d_dev_wakeup+0x40>)
    99ba:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    99bc:	2000      	movs	r0, #0
    99be:	4b07      	ldr	r3, [pc, #28]	; (99dc <_usb_d_dev_wakeup+0x44>)
    99c0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    99c2:	4b07      	ldr	r3, [pc, #28]	; (99e0 <_usb_d_dev_wakeup+0x48>)
    99c4:	685b      	ldr	r3, [r3, #4]
    99c6:	2100      	movs	r1, #0
    99c8:	2002      	movs	r0, #2
    99ca:	4798      	blx	r3
}
    99cc:	bf00      	nop
    99ce:	bd80      	pop	{r7, pc}
    99d0:	00008f3b 	.word	0x00008f3b
    99d4:	00008f91 	.word	0x00008f91
    99d8:	00008f59 	.word	0x00008f59
    99dc:	00009239 	.word	0x00009239
    99e0:	20000b94 	.word	0x20000b94

000099e4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    99e4:	b580      	push	{r7, lr}
    99e6:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    99e8:	2200      	movs	r2, #0
    99ea:	2100      	movs	r1, #0
    99ec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99f0:	4b0d      	ldr	r3, [pc, #52]	; (9a28 <_usb_d_dev_reset+0x44>)
    99f2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    99f4:	2108      	movs	r1, #8
    99f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99fa:	4b0c      	ldr	r3, [pc, #48]	; (9a2c <_usb_d_dev_reset+0x48>)
    99fc:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    99fe:	2170      	movs	r1, #112	; 0x70
    9a00:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a04:	4b0a      	ldr	r3, [pc, #40]	; (9a30 <_usb_d_dev_reset+0x4c>)
    9a06:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9a08:	f240 2101 	movw	r1, #513	; 0x201
    9a0c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a10:	4b08      	ldr	r3, [pc, #32]	; (9a34 <_usb_d_dev_reset+0x50>)
    9a12:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9a14:	4b08      	ldr	r3, [pc, #32]	; (9a38 <_usb_d_dev_reset+0x54>)
    9a16:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9a18:	4b08      	ldr	r3, [pc, #32]	; (9a3c <_usb_d_dev_reset+0x58>)
    9a1a:	685b      	ldr	r3, [r3, #4]
    9a1c:	2100      	movs	r1, #0
    9a1e:	2001      	movs	r0, #1
    9a20:	4798      	blx	r3
}
    9a22:	bf00      	nop
    9a24:	bd80      	pop	{r7, pc}
    9a26:	bf00      	nop
    9a28:	00008ed1 	.word	0x00008ed1
    9a2c:	00008f3b 	.word	0x00008f3b
    9a30:	00008f91 	.word	0x00008f91
    9a34:	00008f59 	.word	0x00008f59
    9a38:	0000a5a1 	.word	0x0000a5a1
    9a3c:	20000b94 	.word	0x20000b94

00009a40 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9a40:	b580      	push	{r7, lr}
    9a42:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9a44:	f240 2101 	movw	r1, #513	; 0x201
    9a48:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a4c:	4b09      	ldr	r3, [pc, #36]	; (9a74 <_usb_d_dev_suspend+0x34>)
    9a4e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9a50:	f240 2101 	movw	r1, #513	; 0x201
    9a54:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a58:	4b07      	ldr	r3, [pc, #28]	; (9a78 <_usb_d_dev_suspend+0x38>)
    9a5a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9a5c:	2170      	movs	r1, #112	; 0x70
    9a5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a62:	4b06      	ldr	r3, [pc, #24]	; (9a7c <_usb_d_dev_suspend+0x3c>)
    9a64:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9a66:	4b06      	ldr	r3, [pc, #24]	; (9a80 <_usb_d_dev_suspend+0x40>)
    9a68:	685b      	ldr	r3, [r3, #4]
    9a6a:	2100      	movs	r1, #0
    9a6c:	2004      	movs	r0, #4
    9a6e:	4798      	blx	r3
}
    9a70:	bf00      	nop
    9a72:	bd80      	pop	{r7, pc}
    9a74:	00008f3b 	.word	0x00008f3b
    9a78:	00008f91 	.word	0x00008f91
    9a7c:	00008f59 	.word	0x00008f59
    9a80:	20000b94 	.word	0x20000b94

00009a84 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9a84:	b580      	push	{r7, lr}
    9a86:	b082      	sub	sp, #8
    9a88:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9a8a:	2301      	movs	r3, #1
    9a8c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9a8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a92:	4b22      	ldr	r3, [pc, #136]	; (9b1c <_usb_d_dev_handle_nep+0x98>)
    9a94:	4798      	blx	r3
    9a96:	4603      	mov	r3, r0
    9a98:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9a9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a9e:	4b20      	ldr	r3, [pc, #128]	; (9b20 <_usb_d_dev_handle_nep+0x9c>)
    9aa0:	4798      	blx	r3
    9aa2:	4603      	mov	r3, r0
    9aa4:	461a      	mov	r2, r3
    9aa6:	88bb      	ldrh	r3, [r7, #4]
    9aa8:	4013      	ands	r3, r2
    9aaa:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9aac:	88bb      	ldrh	r3, [r7, #4]
    9aae:	f003 0304 	and.w	r3, r3, #4
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d003      	beq.n	9abe <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9ab6:	4b1b      	ldr	r3, [pc, #108]	; (9b24 <_usb_d_dev_handle_nep+0xa0>)
    9ab8:	4798      	blx	r3
		return true;
    9aba:	2301      	movs	r3, #1
    9abc:	e02a      	b.n	9b14 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9abe:	88bb      	ldrh	r3, [r7, #4]
    9ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d002      	beq.n	9ace <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9ac8:	4b17      	ldr	r3, [pc, #92]	; (9b28 <_usb_d_dev_handle_nep+0xa4>)
    9aca:	4798      	blx	r3
    9acc:	e021      	b.n	9b12 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9ace:	88bb      	ldrh	r3, [r7, #4]
    9ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d002      	beq.n	9ade <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9ad8:	4b14      	ldr	r3, [pc, #80]	; (9b2c <_usb_d_dev_handle_nep+0xa8>)
    9ada:	4798      	blx	r3
    9adc:	e019      	b.n	9b12 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9ade:	88bb      	ldrh	r3, [r7, #4]
    9ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9ae4:	2b00      	cmp	r3, #0
    9ae6:	d002      	beq.n	9aee <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9ae8:	4b11      	ldr	r3, [pc, #68]	; (9b30 <_usb_d_dev_handle_nep+0xac>)
    9aea:	4798      	blx	r3
    9aec:	e011      	b.n	9b12 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9aee:	88bb      	ldrh	r3, [r7, #4]
    9af0:	f003 0308 	and.w	r3, r3, #8
    9af4:	2b00      	cmp	r3, #0
    9af6:	d002      	beq.n	9afe <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9af8:	4b0e      	ldr	r3, [pc, #56]	; (9b34 <_usb_d_dev_handle_nep+0xb0>)
    9afa:	4798      	blx	r3
    9afc:	e009      	b.n	9b12 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9afe:	88bb      	ldrh	r3, [r7, #4]
    9b00:	f003 0301 	and.w	r3, r3, #1
    9b04:	2b00      	cmp	r3, #0
    9b06:	d002      	beq.n	9b0e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9b08:	4b0b      	ldr	r3, [pc, #44]	; (9b38 <_usb_d_dev_handle_nep+0xb4>)
    9b0a:	4798      	blx	r3
    9b0c:	e001      	b.n	9b12 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9b0e:	2300      	movs	r3, #0
    9b10:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9b12:	79fb      	ldrb	r3, [r7, #7]
}
    9b14:	4618      	mov	r0, r3
    9b16:	3708      	adds	r7, #8
    9b18:	46bd      	mov	sp, r7
    9b1a:	bd80      	pop	{r7, pc}
    9b1c:	00008f21 	.word	0x00008f21
    9b20:	00008f77 	.word	0x00008f77
    9b24:	000098c5 	.word	0x000098c5
    9b28:	000098e5 	.word	0x000098e5
    9b2c:	00009975 	.word	0x00009975
    9b30:	00009999 	.word	0x00009999
    9b34:	000099e5 	.word	0x000099e5
    9b38:	00009a41 	.word	0x00009a41

00009b3c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9b3c:	b590      	push	{r4, r7, lr}
    9b3e:	b089      	sub	sp, #36	; 0x24
    9b40:	af00      	add	r7, sp, #0
    9b42:	6078      	str	r0, [r7, #4]
    9b44:	460b      	mov	r3, r1
    9b46:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9b48:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b4c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	7c9b      	ldrb	r3, [r3, #18]
    9b52:	f003 030f 	and.w	r3, r3, #15
    9b56:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9b58:	7dfb      	ldrb	r3, [r7, #23]
    9b5a:	015b      	lsls	r3, r3, #5
    9b5c:	4a73      	ldr	r2, [pc, #460]	; (9d2c <_usb_d_dev_in_next+0x1f0>)
    9b5e:	4413      	add	r3, r2
    9b60:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9b62:	78fb      	ldrb	r3, [r7, #3]
    9b64:	2b00      	cmp	r3, #0
    9b66:	d006      	beq.n	9b76 <_usb_d_dev_in_next+0x3a>
    9b68:	693b      	ldr	r3, [r7, #16]
    9b6a:	3310      	adds	r3, #16
    9b6c:	685b      	ldr	r3, [r3, #4]
    9b6e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9b72:	b29b      	uxth	r3, r3
    9b74:	e000      	b.n	9b78 <_usb_d_dev_in_next+0x3c>
    9b76:	2300      	movs	r3, #0
    9b78:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9b7a:	687b      	ldr	r3, [r7, #4]
    9b7c:	8a1b      	ldrh	r3, [r3, #16]
    9b7e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9b82:	4293      	cmp	r3, r2
    9b84:	d103      	bne.n	9b8e <_usb_d_dev_in_next+0x52>
    9b86:	687b      	ldr	r3, [r7, #4]
    9b88:	8a1b      	ldrh	r3, [r3, #16]
    9b8a:	b21b      	sxth	r3, r3
    9b8c:	e004      	b.n	9b98 <_usb_d_dev_in_next+0x5c>
    9b8e:	687b      	ldr	r3, [r7, #4]
    9b90:	8a1b      	ldrh	r3, [r3, #16]
    9b92:	3b01      	subs	r3, #1
    9b94:	b29b      	uxth	r3, r3
    9b96:	b21b      	sxth	r3, r3
    9b98:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9b9c:	4013      	ands	r3, r2
    9b9e:	b21b      	sxth	r3, r3
    9ba0:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9ba2:	2300      	movs	r3, #0
    9ba4:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	7cdb      	ldrb	r3, [r3, #19]
    9baa:	f003 0307 	and.w	r3, r3, #7
    9bae:	b2db      	uxtb	r3, r3
    9bb0:	2b01      	cmp	r3, #1
    9bb2:	bf0c      	ite	eq
    9bb4:	2301      	moveq	r3, #1
    9bb6:	2300      	movne	r3, #0
    9bb8:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9bba:	78fb      	ldrb	r3, [r7, #3]
    9bbc:	2b00      	cmp	r3, #0
    9bbe:	d004      	beq.n	9bca <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9bc0:	7dfb      	ldrb	r3, [r7, #23]
    9bc2:	2101      	movs	r1, #1
    9bc4:	4618      	mov	r0, r3
    9bc6:	4b5a      	ldr	r3, [pc, #360]	; (9d30 <_usb_d_dev_in_next+0x1f4>)
    9bc8:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	689a      	ldr	r2, [r3, #8]
    9bce:	89fb      	ldrh	r3, [r7, #14]
    9bd0:	441a      	add	r2, r3
    9bd2:	687b      	ldr	r3, [r7, #4]
    9bd4:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9bd6:	687b      	ldr	r3, [r7, #4]
    9bd8:	689a      	ldr	r2, [r3, #8]
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	685b      	ldr	r3, [r3, #4]
    9bde:	429a      	cmp	r2, r3
    9be0:	d243      	bcs.n	9c6a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9be2:	687b      	ldr	r3, [r7, #4]
    9be4:	685b      	ldr	r3, [r3, #4]
    9be6:	b29a      	uxth	r2, r3
    9be8:	687b      	ldr	r3, [r7, #4]
    9bea:	689b      	ldr	r3, [r3, #8]
    9bec:	b29b      	uxth	r3, r3
    9bee:	1ad3      	subs	r3, r2, r3
    9bf0:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	7cdb      	ldrb	r3, [r3, #19]
    9bf6:	f003 0320 	and.w	r3, r3, #32
    9bfa:	b2db      	uxtb	r3, r3
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	d01b      	beq.n	9c38 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9c00:	687b      	ldr	r3, [r7, #4]
    9c02:	8a1b      	ldrh	r3, [r3, #16]
    9c04:	8bfa      	ldrh	r2, [r7, #30]
    9c06:	429a      	cmp	r2, r3
    9c08:	d902      	bls.n	9c10 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9c0a:	687b      	ldr	r3, [r7, #4]
    9c0c:	8a1b      	ldrh	r3, [r3, #16]
    9c0e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9c10:	687b      	ldr	r3, [r7, #4]
    9c12:	68d8      	ldr	r0, [r3, #12]
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	681a      	ldr	r2, [r3, #0]
    9c18:	687b      	ldr	r3, [r7, #4]
    9c1a:	689b      	ldr	r3, [r3, #8]
    9c1c:	4413      	add	r3, r2
    9c1e:	8bfa      	ldrh	r2, [r7, #30]
    9c20:	4619      	mov	r1, r3
    9c22:	4b44      	ldr	r3, [pc, #272]	; (9d34 <_usb_d_dev_in_next+0x1f8>)
    9c24:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9c26:	687b      	ldr	r3, [r7, #4]
    9c28:	68db      	ldr	r3, [r3, #12]
    9c2a:	461a      	mov	r2, r3
    9c2c:	7dfb      	ldrb	r3, [r7, #23]
    9c2e:	2101      	movs	r1, #1
    9c30:	4618      	mov	r0, r3
    9c32:	4b41      	ldr	r3, [pc, #260]	; (9d38 <_usb_d_dev_in_next+0x1fc>)
    9c34:	4798      	blx	r3
    9c36:	e011      	b.n	9c5c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9c38:	8bfb      	ldrh	r3, [r7, #30]
    9c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9c3e:	d902      	bls.n	9c46 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9c44:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9c46:	687b      	ldr	r3, [r7, #4]
    9c48:	681a      	ldr	r2, [r3, #0]
    9c4a:	687b      	ldr	r3, [r7, #4]
    9c4c:	689b      	ldr	r3, [r3, #8]
    9c4e:	4413      	add	r3, r2
    9c50:	461a      	mov	r2, r3
    9c52:	7dfb      	ldrb	r3, [r7, #23]
    9c54:	2101      	movs	r1, #1
    9c56:	4618      	mov	r0, r3
    9c58:	4b37      	ldr	r3, [pc, #220]	; (9d38 <_usb_d_dev_in_next+0x1fc>)
    9c5a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9c5c:	8bfa      	ldrh	r2, [r7, #30]
    9c5e:	7df8      	ldrb	r0, [r7, #23]
    9c60:	2300      	movs	r3, #0
    9c62:	2101      	movs	r1, #1
    9c64:	4c35      	ldr	r4, [pc, #212]	; (9d3c <_usb_d_dev_in_next+0x200>)
    9c66:	47a0      	blx	r4
		goto _in_tx_exec;
    9c68:	e041      	b.n	9cee <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9c6a:	687b      	ldr	r3, [r7, #4]
    9c6c:	7cdb      	ldrb	r3, [r3, #19]
    9c6e:	f003 0310 	and.w	r3, r3, #16
    9c72:	b2db      	uxtb	r3, r3
    9c74:	2b00      	cmp	r3, #0
    9c76:	d00b      	beq.n	9c90 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9c78:	687a      	ldr	r2, [r7, #4]
    9c7a:	7cd3      	ldrb	r3, [r2, #19]
    9c7c:	f36f 1304 	bfc	r3, #4, #1
    9c80:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9c82:	7df8      	ldrb	r0, [r7, #23]
    9c84:	2300      	movs	r3, #0
    9c86:	2200      	movs	r2, #0
    9c88:	2101      	movs	r1, #1
    9c8a:	4c2c      	ldr	r4, [pc, #176]	; (9d3c <_usb_d_dev_in_next+0x200>)
    9c8c:	47a0      	blx	r4
		goto _in_tx_exec;
    9c8e:	e02e      	b.n	9cee <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9c90:	7afb      	ldrb	r3, [r7, #11]
    9c92:	2b00      	cmp	r3, #0
    9c94:	d006      	beq.n	9ca4 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9c96:	7dfb      	ldrb	r3, [r7, #23]
    9c98:	224b      	movs	r2, #75	; 0x4b
    9c9a:	4619      	mov	r1, r3
    9c9c:	69b8      	ldr	r0, [r7, #24]
    9c9e:	4b28      	ldr	r3, [pc, #160]	; (9d40 <_usb_d_dev_in_next+0x204>)
    9ca0:	4798      	blx	r3
    9ca2:	e005      	b.n	9cb0 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9ca4:	7dfb      	ldrb	r3, [r7, #23]
    9ca6:	224a      	movs	r2, #74	; 0x4a
    9ca8:	4619      	mov	r1, r3
    9caa:	69b8      	ldr	r0, [r7, #24]
    9cac:	4b24      	ldr	r3, [pc, #144]	; (9d40 <_usb_d_dev_in_next+0x204>)
    9cae:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	8a1b      	ldrh	r3, [r3, #16]
    9cb4:	89ba      	ldrh	r2, [r7, #12]
    9cb6:	429a      	cmp	r2, r3
    9cb8:	d114      	bne.n	9ce4 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9cba:	687a      	ldr	r2, [r7, #4]
    9cbc:	7cd3      	ldrb	r3, [r2, #19]
    9cbe:	f36f 1386 	bfc	r3, #6, #1
    9cc2:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9cc4:	4b1f      	ldr	r3, [pc, #124]	; (9d44 <_usb_d_dev_in_next+0x208>)
    9cc6:	68db      	ldr	r3, [r3, #12]
    9cc8:	687a      	ldr	r2, [r7, #4]
    9cca:	7c90      	ldrb	r0, [r2, #18]
    9ccc:	687a      	ldr	r2, [r7, #4]
    9cce:	6892      	ldr	r2, [r2, #8]
    9cd0:	4611      	mov	r1, r2
    9cd2:	4798      	blx	r3
    9cd4:	4603      	mov	r3, r0
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	d124      	bne.n	9d24 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9cda:	687a      	ldr	r2, [r7, #4]
    9cdc:	7cd3      	ldrb	r3, [r2, #19]
    9cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9ce2:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9ce4:	2100      	movs	r1, #0
    9ce6:	6878      	ldr	r0, [r7, #4]
    9ce8:	4b17      	ldr	r3, [pc, #92]	; (9d48 <_usb_d_dev_in_next+0x20c>)
    9cea:	4798      	blx	r3
	return;
    9cec:	e01b      	b.n	9d26 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9cee:	78fb      	ldrb	r3, [r7, #3]
    9cf0:	f083 0301 	eor.w	r3, r3, #1
    9cf4:	b2db      	uxtb	r3, r3
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d00d      	beq.n	9d16 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9cfa:	7afb      	ldrb	r3, [r7, #11]
    9cfc:	2b00      	cmp	r3, #0
    9cfe:	d002      	beq.n	9d06 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9d00:	234e      	movs	r3, #78	; 0x4e
    9d02:	777b      	strb	r3, [r7, #29]
    9d04:	e001      	b.n	9d0a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9d06:	234a      	movs	r3, #74	; 0x4a
    9d08:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9d0a:	7f7a      	ldrb	r2, [r7, #29]
    9d0c:	7dfb      	ldrb	r3, [r7, #23]
    9d0e:	4619      	mov	r1, r3
    9d10:	69b8      	ldr	r0, [r7, #24]
    9d12:	4b0e      	ldr	r3, [pc, #56]	; (9d4c <_usb_d_dev_in_next+0x210>)
    9d14:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9d16:	7dfb      	ldrb	r3, [r7, #23]
    9d18:	2201      	movs	r2, #1
    9d1a:	2101      	movs	r1, #1
    9d1c:	4618      	mov	r0, r3
    9d1e:	4b0c      	ldr	r3, [pc, #48]	; (9d50 <_usb_d_dev_in_next+0x214>)
    9d20:	4798      	blx	r3
    9d22:	e000      	b.n	9d26 <_usb_d_dev_in_next+0x1ea>
			return;
    9d24:	bf00      	nop
}
    9d26:	3724      	adds	r7, #36	; 0x24
    9d28:	46bd      	mov	sp, r7
    9d2a:	bd90      	pop	{r4, r7, pc}
    9d2c:	20000c5c 	.word	0x20000c5c
    9d30:	00009535 	.word	0x00009535
    9d34:	00012c4d 	.word	0x00012c4d
    9d38:	00009561 	.word	0x00009561
    9d3c:	000096a9 	.word	0x000096a9
    9d40:	00008e41 	.word	0x00008e41
    9d44:	20000b94 	.word	0x20000b94
    9d48:	0000ae65 	.word	0x0000ae65
    9d4c:	00008e15 	.word	0x00008e15
    9d50:	00009761 	.word	0x00009761

00009d54 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9d54:	b590      	push	{r4, r7, lr}
    9d56:	b08b      	sub	sp, #44	; 0x2c
    9d58:	af00      	add	r7, sp, #0
    9d5a:	6078      	str	r0, [r7, #4]
    9d5c:	460b      	mov	r3, r1
    9d5e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9d60:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d64:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	7c9b      	ldrb	r3, [r3, #18]
    9d6a:	f003 030f 	and.w	r3, r3, #15
    9d6e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9d70:	7ffb      	ldrb	r3, [r7, #31]
    9d72:	015b      	lsls	r3, r3, #5
    9d74:	4a94      	ldr	r2, [pc, #592]	; (9fc8 <_usb_d_dev_out_next+0x274>)
    9d76:	4413      	add	r3, r2
    9d78:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9d7a:	78fb      	ldrb	r3, [r7, #3]
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d005      	beq.n	9d8c <_usb_d_dev_out_next+0x38>
    9d80:	69bb      	ldr	r3, [r7, #24]
    9d82:	685b      	ldr	r3, [r3, #4]
    9d84:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9d88:	b29b      	uxth	r3, r3
    9d8a:	e000      	b.n	9d8e <_usb_d_dev_out_next+0x3a>
    9d8c:	2300      	movs	r3, #0
    9d8e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9d90:	78fb      	ldrb	r3, [r7, #3]
    9d92:	2b00      	cmp	r3, #0
    9d94:	d005      	beq.n	9da2 <_usb_d_dev_out_next+0x4e>
    9d96:	69bb      	ldr	r3, [r7, #24]
    9d98:	685b      	ldr	r3, [r3, #4]
    9d9a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9d9e:	b29b      	uxth	r3, r3
    9da0:	e000      	b.n	9da4 <_usb_d_dev_out_next+0x50>
    9da2:	2300      	movs	r3, #0
    9da4:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9da6:	687b      	ldr	r3, [r7, #4]
    9da8:	8a1b      	ldrh	r3, [r3, #16]
    9daa:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9dae:	4293      	cmp	r3, r2
    9db0:	d004      	beq.n	9dbc <_usb_d_dev_out_next+0x68>
    9db2:	687b      	ldr	r3, [r7, #4]
    9db4:	8a1b      	ldrh	r3, [r3, #16]
    9db6:	3b01      	subs	r3, #1
    9db8:	b29b      	uxth	r3, r3
    9dba:	e001      	b.n	9dc0 <_usb_d_dev_out_next+0x6c>
    9dbc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9dc0:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9dc2:	8aba      	ldrh	r2, [r7, #20]
    9dc4:	8a7b      	ldrh	r3, [r7, #18]
    9dc6:	4013      	ands	r3, r2
    9dc8:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9dca:	687b      	ldr	r3, [r7, #4]
    9dcc:	7cdb      	ldrb	r3, [r3, #19]
    9dce:	f003 0307 	and.w	r3, r3, #7
    9dd2:	b2db      	uxtb	r3, r3
    9dd4:	2b01      	cmp	r3, #1
    9dd6:	bf0c      	ite	eq
    9dd8:	2301      	moveq	r3, #1
    9dda:	2300      	movne	r3, #0
    9ddc:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9dde:	78fb      	ldrb	r3, [r7, #3]
    9de0:	2b00      	cmp	r3, #0
    9de2:	d004      	beq.n	9dee <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9de4:	7ffb      	ldrb	r3, [r7, #31]
    9de6:	2100      	movs	r1, #0
    9de8:	4618      	mov	r0, r3
    9dea:	4b78      	ldr	r3, [pc, #480]	; (9fcc <_usb_d_dev_out_next+0x278>)
    9dec:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9dee:	687b      	ldr	r3, [r7, #4]
    9df0:	7cdb      	ldrb	r3, [r3, #19]
    9df2:	f003 0320 	and.w	r3, r3, #32
    9df6:	b2db      	uxtb	r3, r3
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d01c      	beq.n	9e36 <_usb_d_dev_out_next+0xe2>
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	685b      	ldr	r3, [r3, #4]
    9e00:	2b00      	cmp	r3, #0
    9e02:	d018      	beq.n	9e36 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9e04:	687b      	ldr	r3, [r7, #4]
    9e06:	685b      	ldr	r3, [r3, #4]
    9e08:	b29a      	uxth	r2, r3
    9e0a:	687b      	ldr	r3, [r7, #4]
    9e0c:	689b      	ldr	r3, [r3, #8]
    9e0e:	b29b      	uxth	r3, r3
    9e10:	1ad3      	subs	r3, r2, r3
    9e12:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9e14:	687b      	ldr	r3, [r7, #4]
    9e16:	681a      	ldr	r2, [r3, #0]
    9e18:	687b      	ldr	r3, [r7, #4]
    9e1a:	689b      	ldr	r3, [r3, #8]
    9e1c:	18d0      	adds	r0, r2, r3
    9e1e:	687b      	ldr	r3, [r7, #4]
    9e20:	68d9      	ldr	r1, [r3, #12]
    9e22:	89ba      	ldrh	r2, [r7, #12]
    9e24:	8a3b      	ldrh	r3, [r7, #16]
    9e26:	429a      	cmp	r2, r3
    9e28:	d901      	bls.n	9e2e <_usb_d_dev_out_next+0xda>
    9e2a:	8a3b      	ldrh	r3, [r7, #16]
    9e2c:	e000      	b.n	9e30 <_usb_d_dev_out_next+0xdc>
    9e2e:	89bb      	ldrh	r3, [r7, #12]
    9e30:	461a      	mov	r2, r3
    9e32:	4b67      	ldr	r3, [pc, #412]	; (9fd0 <_usb_d_dev_out_next+0x27c>)
    9e34:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	685b      	ldr	r3, [r3, #4]
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d121      	bne.n	9e82 <_usb_d_dev_out_next+0x12e>
    9e3e:	687b      	ldr	r3, [r7, #4]
    9e40:	7cdb      	ldrb	r3, [r3, #19]
    9e42:	f003 0310 	and.w	r3, r3, #16
    9e46:	b2db      	uxtb	r3, r3
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d01a      	beq.n	9e82 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9e4c:	687a      	ldr	r2, [r7, #4]
    9e4e:	7cd3      	ldrb	r3, [r2, #19]
    9e50:	f36f 1304 	bfc	r3, #4, #1
    9e54:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9e56:	687a      	ldr	r2, [r7, #4]
    9e58:	7cd3      	ldrb	r3, [r2, #19]
    9e5a:	f043 0320 	orr.w	r3, r3, #32
    9e5e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	68db      	ldr	r3, [r3, #12]
    9e64:	461a      	mov	r2, r3
    9e66:	7ffb      	ldrb	r3, [r7, #31]
    9e68:	2100      	movs	r1, #0
    9e6a:	4618      	mov	r0, r3
    9e6c:	4b59      	ldr	r3, [pc, #356]	; (9fd4 <_usb_d_dev_out_next+0x280>)
    9e6e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	8a1b      	ldrh	r3, [r3, #16]
    9e74:	461a      	mov	r2, r3
    9e76:	7ff8      	ldrb	r0, [r7, #31]
    9e78:	2300      	movs	r3, #0
    9e7a:	2100      	movs	r1, #0
    9e7c:	4c56      	ldr	r4, [pc, #344]	; (9fd8 <_usb_d_dev_out_next+0x284>)
    9e7e:	47a0      	blx	r4
		goto _out_rx_exec;
    9e80:	e090      	b.n	9fa4 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9e82:	78fb      	ldrb	r3, [r7, #3]
    9e84:	2b00      	cmp	r3, #0
    9e86:	d010      	beq.n	9eaa <_usb_d_dev_out_next+0x156>
    9e88:	687b      	ldr	r3, [r7, #4]
    9e8a:	8a1b      	ldrh	r3, [r3, #16]
    9e8c:	8a3a      	ldrh	r2, [r7, #16]
    9e8e:	429a      	cmp	r2, r3
    9e90:	d20b      	bcs.n	9eaa <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9e92:	687a      	ldr	r2, [r7, #4]
    9e94:	7cd3      	ldrb	r3, [r2, #19]
    9e96:	f36f 1304 	bfc	r3, #4, #1
    9e9a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9e9c:	687b      	ldr	r3, [r7, #4]
    9e9e:	689a      	ldr	r2, [r3, #8]
    9ea0:	8abb      	ldrh	r3, [r7, #20]
    9ea2:	441a      	add	r2, r3
    9ea4:	687b      	ldr	r3, [r7, #4]
    9ea6:	609a      	str	r2, [r3, #8]
    9ea8:	e05c      	b.n	9f64 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9eaa:	687b      	ldr	r3, [r7, #4]
    9eac:	689a      	ldr	r2, [r3, #8]
    9eae:	8afb      	ldrh	r3, [r7, #22]
    9eb0:	441a      	add	r2, r3
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9eb6:	687b      	ldr	r3, [r7, #4]
    9eb8:	689a      	ldr	r2, [r3, #8]
    9eba:	687b      	ldr	r3, [r7, #4]
    9ebc:	685b      	ldr	r3, [r3, #4]
    9ebe:	429a      	cmp	r2, r3
    9ec0:	d250      	bcs.n	9f64 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9ec2:	687b      	ldr	r3, [r7, #4]
    9ec4:	685b      	ldr	r3, [r3, #4]
    9ec6:	b29a      	uxth	r2, r3
    9ec8:	687b      	ldr	r3, [r7, #4]
    9eca:	689b      	ldr	r3, [r3, #8]
    9ecc:	b29b      	uxth	r3, r3
    9ece:	1ad3      	subs	r3, r2, r3
    9ed0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	7cdb      	ldrb	r3, [r3, #19]
    9ed6:	f003 0320 	and.w	r3, r3, #32
    9eda:	b2db      	uxtb	r3, r3
    9edc:	2b00      	cmp	r3, #0
    9ede:	d010      	beq.n	9f02 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	8a1b      	ldrh	r3, [r3, #16]
    9ee4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9ee6:	429a      	cmp	r2, r3
    9ee8:	d902      	bls.n	9ef0 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9eea:	687b      	ldr	r3, [r7, #4]
    9eec:	8a1b      	ldrh	r3, [r3, #16]
    9eee:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9ef0:	687b      	ldr	r3, [r7, #4]
    9ef2:	68db      	ldr	r3, [r3, #12]
    9ef4:	461a      	mov	r2, r3
    9ef6:	7ffb      	ldrb	r3, [r7, #31]
    9ef8:	2100      	movs	r1, #0
    9efa:	4618      	mov	r0, r3
    9efc:	4b35      	ldr	r3, [pc, #212]	; (9fd4 <_usb_d_dev_out_next+0x280>)
    9efe:	4798      	blx	r3
    9f00:	e029      	b.n	9f56 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	8a1b      	ldrh	r3, [r3, #16]
    9f06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f08:	429a      	cmp	r2, r3
    9f0a:	d90f      	bls.n	9f2c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9f12:	d903      	bls.n	9f1c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9f18:	84fb      	strh	r3, [r7, #38]	; 0x26
    9f1a:	e011      	b.n	9f40 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9f1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f1e:	8a7b      	ldrh	r3, [r7, #18]
    9f20:	4013      	ands	r3, r2
    9f22:	b29b      	uxth	r3, r3
    9f24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f26:	1ad3      	subs	r3, r2, r3
    9f28:	84fb      	strh	r3, [r7, #38]	; 0x26
    9f2a:	e009      	b.n	9f40 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	8a1b      	ldrh	r3, [r3, #16]
    9f30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f32:	429a      	cmp	r2, r3
    9f34:	d204      	bcs.n	9f40 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9f36:	687a      	ldr	r2, [r7, #4]
    9f38:	7cd3      	ldrb	r3, [r2, #19]
    9f3a:	f043 0320 	orr.w	r3, r3, #32
    9f3e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	681a      	ldr	r2, [r3, #0]
    9f44:	687b      	ldr	r3, [r7, #4]
    9f46:	689b      	ldr	r3, [r3, #8]
    9f48:	4413      	add	r3, r2
    9f4a:	461a      	mov	r2, r3
    9f4c:	7ffb      	ldrb	r3, [r7, #31]
    9f4e:	2100      	movs	r1, #0
    9f50:	4618      	mov	r0, r3
    9f52:	4b20      	ldr	r3, [pc, #128]	; (9fd4 <_usb_d_dev_out_next+0x280>)
    9f54:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9f56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f58:	7ff8      	ldrb	r0, [r7, #31]
    9f5a:	2300      	movs	r3, #0
    9f5c:	2100      	movs	r1, #0
    9f5e:	4c1e      	ldr	r4, [pc, #120]	; (9fd8 <_usb_d_dev_out_next+0x284>)
    9f60:	47a0      	blx	r4
			goto _out_rx_exec;
    9f62:	e01f      	b.n	9fa4 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9f64:	7bfb      	ldrb	r3, [r7, #15]
    9f66:	2b00      	cmp	r3, #0
    9f68:	d006      	beq.n	9f78 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9f6a:	7ffb      	ldrb	r3, [r7, #31]
    9f6c:	222d      	movs	r2, #45	; 0x2d
    9f6e:	4619      	mov	r1, r3
    9f70:	6a38      	ldr	r0, [r7, #32]
    9f72:	4b1a      	ldr	r3, [pc, #104]	; (9fdc <_usb_d_dev_out_next+0x288>)
    9f74:	4798      	blx	r3
    9f76:	e005      	b.n	9f84 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9f78:	7ffb      	ldrb	r3, [r7, #31]
    9f7a:	2225      	movs	r2, #37	; 0x25
    9f7c:	4619      	mov	r1, r3
    9f7e:	6a38      	ldr	r0, [r7, #32]
    9f80:	4b16      	ldr	r3, [pc, #88]	; (9fdc <_usb_d_dev_out_next+0x288>)
    9f82:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9f84:	7ffb      	ldrb	r3, [r7, #31]
    9f86:	2b00      	cmp	r3, #0
    9f88:	d107      	bne.n	9f9a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9f8a:	687b      	ldr	r3, [r7, #4]
    9f8c:	68db      	ldr	r3, [r3, #12]
    9f8e:	461a      	mov	r2, r3
    9f90:	7ffb      	ldrb	r3, [r7, #31]
    9f92:	2100      	movs	r1, #0
    9f94:	4618      	mov	r0, r3
    9f96:	4b0f      	ldr	r3, [pc, #60]	; (9fd4 <_usb_d_dev_out_next+0x280>)
    9f98:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9f9a:	2100      	movs	r1, #0
    9f9c:	6878      	ldr	r0, [r7, #4]
    9f9e:	4b10      	ldr	r3, [pc, #64]	; (9fe0 <_usb_d_dev_out_next+0x28c>)
    9fa0:	4798      	blx	r3
	return;
    9fa2:	e031      	b.n	a008 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9fa4:	78fb      	ldrb	r3, [r7, #3]
    9fa6:	f083 0301 	eor.w	r3, r3, #1
    9faa:	b2db      	uxtb	r3, r3
    9fac:	2b00      	cmp	r3, #0
    9fae:	d025      	beq.n	9ffc <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9fb0:	7bfb      	ldrb	r3, [r7, #15]
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d018      	beq.n	9fe8 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9fb6:	7ffb      	ldrb	r3, [r7, #31]
    9fb8:	2101      	movs	r1, #1
    9fba:	4618      	mov	r0, r3
    9fbc:	4b09      	ldr	r3, [pc, #36]	; (9fe4 <_usb_d_dev_out_next+0x290>)
    9fbe:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9fc0:	232d      	movs	r3, #45	; 0x2d
    9fc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9fc6:	e012      	b.n	9fee <_usb_d_dev_out_next+0x29a>
    9fc8:	20000c5c 	.word	0x20000c5c
    9fcc:	00009535 	.word	0x00009535
    9fd0:	00012c4d 	.word	0x00012c4d
    9fd4:	00009561 	.word	0x00009561
    9fd8:	000096e9 	.word	0x000096e9
    9fdc:	00008e41 	.word	0x00008e41
    9fe0:	0000ae65 	.word	0x0000ae65
    9fe4:	00009729 	.word	0x00009729
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9fe8:	2325      	movs	r3, #37	; 0x25
    9fea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9fee:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9ff2:	7ffb      	ldrb	r3, [r7, #31]
    9ff4:	4619      	mov	r1, r3
    9ff6:	6a38      	ldr	r0, [r7, #32]
    9ff8:	4b05      	ldr	r3, [pc, #20]	; (a010 <_usb_d_dev_out_next+0x2bc>)
    9ffa:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9ffc:	7ffb      	ldrb	r3, [r7, #31]
    9ffe:	2201      	movs	r2, #1
    a000:	2100      	movs	r1, #0
    a002:	4618      	mov	r0, r3
    a004:	4b03      	ldr	r3, [pc, #12]	; (a014 <_usb_d_dev_out_next+0x2c0>)
    a006:	4798      	blx	r3
}
    a008:	372c      	adds	r7, #44	; 0x2c
    a00a:	46bd      	mov	sp, r7
    a00c:	bd90      	pop	{r4, r7, pc}
    a00e:	bf00      	nop
    a010:	00008e15 	.word	0x00008e15
    a014:	000097b9 	.word	0x000097b9

0000a018 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a018:	b580      	push	{r7, lr}
    a01a:	b084      	sub	sp, #16
    a01c:	af00      	add	r7, sp, #0
    a01e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	7c9b      	ldrb	r3, [r3, #18]
    a024:	f003 030f 	and.w	r3, r3, #15
    a028:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a02a:	687b      	ldr	r3, [r7, #4]
    a02c:	7cdb      	ldrb	r3, [r3, #19]
    a02e:	f003 0307 	and.w	r3, r3, #7
    a032:	b2db      	uxtb	r3, r3
    a034:	2b01      	cmp	r3, #1
    a036:	bf0c      	ite	eq
    a038:	2301      	moveq	r3, #1
    a03a:	2300      	movne	r3, #0
    a03c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a03e:	7bbb      	ldrb	r3, [r7, #14]
    a040:	f083 0301 	eor.w	r3, r3, #1
    a044:	b2db      	uxtb	r3, r3
    a046:	2b00      	cmp	r3, #0
    a048:	d008      	beq.n	a05c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a04a:	7bfb      	ldrb	r3, [r7, #15]
    a04c:	4618      	mov	r0, r3
    a04e:	4b20      	ldr	r3, [pc, #128]	; (a0d0 <_usb_d_dev_handle_setup+0xb8>)
    a050:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a052:	7bfb      	ldrb	r3, [r7, #15]
    a054:	4618      	mov	r0, r3
    a056:	4b1f      	ldr	r3, [pc, #124]	; (a0d4 <_usb_d_dev_handle_setup+0xbc>)
    a058:	4798      	blx	r3
		return;
    a05a:	e036      	b.n	a0ca <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a05c:	687b      	ldr	r3, [r7, #4]
    a05e:	7cdb      	ldrb	r3, [r3, #19]
    a060:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a064:	b2db      	uxtb	r3, r3
    a066:	2b00      	cmp	r3, #0
    a068:	d010      	beq.n	a08c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a06a:	687a      	ldr	r2, [r7, #4]
    a06c:	7cd3      	ldrb	r3, [r2, #19]
    a06e:	f36f 1386 	bfc	r3, #6, #1
    a072:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a074:	7bfb      	ldrb	r3, [r7, #15]
    a076:	2200      	movs	r2, #0
    a078:	2101      	movs	r1, #1
    a07a:	4618      	mov	r0, r3
    a07c:	4b16      	ldr	r3, [pc, #88]	; (a0d8 <_usb_d_dev_handle_setup+0xc0>)
    a07e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a080:	7bfb      	ldrb	r3, [r7, #15]
    a082:	2200      	movs	r2, #0
    a084:	2100      	movs	r1, #0
    a086:	4618      	mov	r0, r3
    a088:	4b14      	ldr	r3, [pc, #80]	; (a0dc <_usb_d_dev_handle_setup+0xc4>)
    a08a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a08c:	687a      	ldr	r2, [r7, #4]
    a08e:	7cd3      	ldrb	r3, [r2, #19]
    a090:	f36f 03c3 	bfc	r3, #3, #1
    a094:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a096:	7bfb      	ldrb	r3, [r7, #15]
    a098:	2100      	movs	r1, #0
    a09a:	4618      	mov	r0, r3
    a09c:	4b10      	ldr	r3, [pc, #64]	; (a0e0 <_usb_d_dev_handle_setup+0xc8>)
    a09e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a0a0:	7bfb      	ldrb	r3, [r7, #15]
    a0a2:	2101      	movs	r1, #1
    a0a4:	4618      	mov	r0, r3
    a0a6:	4b0e      	ldr	r3, [pc, #56]	; (a0e0 <_usb_d_dev_handle_setup+0xc8>)
    a0a8:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a0aa:	7bfb      	ldrb	r3, [r7, #15]
    a0ac:	216f      	movs	r1, #111	; 0x6f
    a0ae:	4618      	mov	r0, r3
    a0b0:	4b0c      	ldr	r3, [pc, #48]	; (a0e4 <_usb_d_dev_handle_setup+0xcc>)
    a0b2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a0b4:	7bfb      	ldrb	r3, [r7, #15]
    a0b6:	216f      	movs	r1, #111	; 0x6f
    a0b8:	4618      	mov	r0, r3
    a0ba:	4b0b      	ldr	r3, [pc, #44]	; (a0e8 <_usb_d_dev_handle_setup+0xd0>)
    a0bc:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a0be:	4b0b      	ldr	r3, [pc, #44]	; (a0ec <_usb_d_dev_handle_setup+0xd4>)
    a0c0:	689b      	ldr	r3, [r3, #8]
    a0c2:	687a      	ldr	r2, [r7, #4]
    a0c4:	7c92      	ldrb	r2, [r2, #18]
    a0c6:	4610      	mov	r0, r2
    a0c8:	4798      	blx	r3
}
    a0ca:	3710      	adds	r7, #16
    a0cc:	46bd      	mov	sp, r7
    a0ce:	bd80      	pop	{r7, pc}
    a0d0:	000094bd 	.word	0x000094bd
    a0d4:	00009469 	.word	0x00009469
    a0d8:	00009761 	.word	0x00009761
    a0dc:	000097b9 	.word	0x000097b9
    a0e0:	00009729 	.word	0x00009729
    a0e4:	00009269 	.word	0x00009269
    a0e8:	000092b9 	.word	0x000092b9
    a0ec:	20000b94 	.word	0x20000b94

0000a0f0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a0f0:	b580      	push	{r7, lr}
    a0f2:	b084      	sub	sp, #16
    a0f4:	af00      	add	r7, sp, #0
    a0f6:	6078      	str	r0, [r7, #4]
    a0f8:	460b      	mov	r3, r1
    a0fa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	7c9b      	ldrb	r3, [r3, #18]
    a100:	f003 030f 	and.w	r3, r3, #15
    a104:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a106:	78f9      	ldrb	r1, [r7, #3]
    a108:	7bfb      	ldrb	r3, [r7, #15]
    a10a:	2200      	movs	r2, #0
    a10c:	4618      	mov	r0, r3
    a10e:	4b07      	ldr	r3, [pc, #28]	; (a12c <_usb_d_dev_handle_stall+0x3c>)
    a110:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a112:	4b07      	ldr	r3, [pc, #28]	; (a130 <_usb_d_dev_handle_stall+0x40>)
    a114:	691b      	ldr	r3, [r3, #16]
    a116:	687a      	ldr	r2, [r7, #4]
    a118:	7c90      	ldrb	r0, [r2, #18]
    a11a:	687a      	ldr	r2, [r7, #4]
    a11c:	6892      	ldr	r2, [r2, #8]
    a11e:	2101      	movs	r1, #1
    a120:	4798      	blx	r3
}
    a122:	bf00      	nop
    a124:	3710      	adds	r7, #16
    a126:	46bd      	mov	sp, r7
    a128:	bd80      	pop	{r7, pc}
    a12a:	bf00      	nop
    a12c:	0000941d 	.word	0x0000941d
    a130:	20000b94 	.word	0x20000b94

0000a134 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a134:	b580      	push	{r7, lr}
    a136:	b088      	sub	sp, #32
    a138:	af00      	add	r7, sp, #0
    a13a:	6078      	str	r0, [r7, #4]
    a13c:	460b      	mov	r3, r1
    a13e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a140:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a144:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a146:	687b      	ldr	r3, [r7, #4]
    a148:	7c9b      	ldrb	r3, [r3, #18]
    a14a:	f003 030f 	and.w	r3, r3, #15
    a14e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a150:	4b61      	ldr	r3, [pc, #388]	; (a2d8 <_usb_d_dev_handle_trfail+0x1a4>)
    a152:	881b      	ldrh	r3, [r3, #0]
    a154:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a156:	7efb      	ldrb	r3, [r7, #27]
    a158:	015b      	lsls	r3, r3, #5
    a15a:	4a60      	ldr	r2, [pc, #384]	; (a2dc <_usb_d_dev_handle_trfail+0x1a8>)
    a15c:	4413      	add	r3, r2
    a15e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a160:	78fb      	ldrb	r3, [r7, #3]
    a162:	2b00      	cmp	r3, #0
    a164:	d006      	beq.n	a174 <_usb_d_dev_handle_trfail+0x40>
    a166:	7efb      	ldrb	r3, [r7, #27]
    a168:	4619      	mov	r1, r3
    a16a:	69f8      	ldr	r0, [r7, #28]
    a16c:	4b5c      	ldr	r3, [pc, #368]	; (a2e0 <_usb_d_dev_handle_trfail+0x1ac>)
    a16e:	4798      	blx	r3
    a170:	4603      	mov	r3, r0
    a172:	e005      	b.n	a180 <_usb_d_dev_handle_trfail+0x4c>
    a174:	7efb      	ldrb	r3, [r7, #27]
    a176:	4619      	mov	r1, r3
    a178:	69f8      	ldr	r0, [r7, #28]
    a17a:	4b5a      	ldr	r3, [pc, #360]	; (a2e4 <_usb_d_dev_handle_trfail+0x1b0>)
    a17c:	4798      	blx	r3
    a17e:	4603      	mov	r3, r0
    a180:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a182:	687b      	ldr	r3, [r7, #4]
    a184:	7cdb      	ldrb	r3, [r3, #19]
    a186:	f003 0307 	and.w	r3, r3, #7
    a18a:	b2db      	uxtb	r3, r3
    a18c:	2b01      	cmp	r3, #1
    a18e:	bf0c      	ite	eq
    a190:	2301      	moveq	r3, #1
    a192:	2300      	movne	r3, #0
    a194:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a196:	78fb      	ldrb	r3, [r7, #3]
    a198:	011b      	lsls	r3, r3, #4
    a19a:	697a      	ldr	r2, [r7, #20]
    a19c:	4413      	add	r3, r2
    a19e:	7a9b      	ldrb	r3, [r3, #10]
    a1a0:	b2db      	uxtb	r3, r3
    a1a2:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a1a4:	7cfb      	ldrb	r3, [r7, #19]
    a1a6:	2b02      	cmp	r3, #2
    a1a8:	d12f      	bne.n	a20a <_usb_d_dev_handle_trfail+0xd6>
    a1aa:	7b3b      	ldrb	r3, [r7, #12]
    a1ac:	f003 0301 	and.w	r3, r3, #1
    a1b0:	b2db      	uxtb	r3, r3
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d029      	beq.n	a20a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a1b6:	78fb      	ldrb	r3, [r7, #3]
    a1b8:	011b      	lsls	r3, r3, #4
    a1ba:	697a      	ldr	r2, [r7, #20]
    a1bc:	441a      	add	r2, r3
    a1be:	7a93      	ldrb	r3, [r2, #10]
    a1c0:	f36f 0300 	bfc	r3, #0, #1
    a1c4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a1c6:	78fb      	ldrb	r3, [r7, #3]
    a1c8:	f107 0220 	add.w	r2, r7, #32
    a1cc:	4413      	add	r3, r2
    a1ce:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a1d2:	7efb      	ldrb	r3, [r7, #27]
    a1d4:	4619      	mov	r1, r3
    a1d6:	69f8      	ldr	r0, [r7, #28]
    a1d8:	4b43      	ldr	r3, [pc, #268]	; (a2e8 <_usb_d_dev_handle_trfail+0x1b4>)
    a1da:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a1dc:	78fb      	ldrb	r3, [r7, #3]
    a1de:	f107 0220 	add.w	r2, r7, #32
    a1e2:	4413      	add	r3, r2
    a1e4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a1e8:	7efb      	ldrb	r3, [r7, #27]
    a1ea:	4619      	mov	r1, r3
    a1ec:	69f8      	ldr	r0, [r7, #28]
    a1ee:	4b3f      	ldr	r3, [pc, #252]	; (a2ec <_usb_d_dev_handle_trfail+0x1b8>)
    a1f0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a1f2:	78fb      	ldrb	r3, [r7, #3]
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	bf14      	ite	ne
    a1f8:	2301      	movne	r3, #1
    a1fa:	2300      	moveq	r3, #0
    a1fc:	b2db      	uxtb	r3, r3
    a1fe:	2204      	movs	r2, #4
    a200:	4619      	mov	r1, r3
    a202:	6878      	ldr	r0, [r7, #4]
    a204:	4b3a      	ldr	r3, [pc, #232]	; (a2f0 <_usb_d_dev_handle_trfail+0x1bc>)
    a206:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a208:	e062      	b.n	a2d0 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a20a:	7b3b      	ldrb	r3, [r7, #12]
    a20c:	f003 0302 	and.w	r3, r3, #2
    a210:	b2db      	uxtb	r3, r3
    a212:	2b00      	cmp	r3, #0
    a214:	d040      	beq.n	a298 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a216:	78fb      	ldrb	r3, [r7, #3]
    a218:	011b      	lsls	r3, r3, #4
    a21a:	697a      	ldr	r2, [r7, #20]
    a21c:	441a      	add	r2, r3
    a21e:	7a93      	ldrb	r3, [r2, #10]
    a220:	f36f 0341 	bfc	r3, #1, #1
    a224:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a226:	78fb      	ldrb	r3, [r7, #3]
    a228:	f107 0220 	add.w	r2, r7, #32
    a22c:	4413      	add	r3, r2
    a22e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a232:	7efb      	ldrb	r3, [r7, #27]
    a234:	4619      	mov	r1, r3
    a236:	69f8      	ldr	r0, [r7, #28]
    a238:	4b2b      	ldr	r3, [pc, #172]	; (a2e8 <_usb_d_dev_handle_trfail+0x1b4>)
    a23a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a23c:	78fb      	ldrb	r3, [r7, #3]
    a23e:	f107 0220 	add.w	r2, r7, #32
    a242:	4413      	add	r3, r2
    a244:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a248:	7efb      	ldrb	r3, [r7, #27]
    a24a:	4619      	mov	r1, r3
    a24c:	69f8      	ldr	r0, [r7, #28]
    a24e:	4b27      	ldr	r3, [pc, #156]	; (a2ec <_usb_d_dev_handle_trfail+0x1b8>)
    a250:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a252:	7cbb      	ldrb	r3, [r7, #18]
    a254:	2b00      	cmp	r3, #0
    a256:	d03b      	beq.n	a2d0 <_usb_d_dev_handle_trfail+0x19c>
    a258:	687b      	ldr	r3, [r7, #4]
    a25a:	7cdb      	ldrb	r3, [r3, #19]
    a25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a260:	b2db      	uxtb	r3, r3
    a262:	2b00      	cmp	r3, #0
    a264:	d034      	beq.n	a2d0 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	7cdb      	ldrb	r3, [r3, #19]
    a26a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a26e:	b2db      	uxtb	r3, r3
    a270:	461a      	mov	r2, r3
    a272:	78fb      	ldrb	r3, [r7, #3]
    a274:	4293      	cmp	r3, r2
    a276:	d02b      	beq.n	a2d0 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	7cdb      	ldrb	r3, [r3, #19]
    a27c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a280:	b2db      	uxtb	r3, r3
    a282:	2b00      	cmp	r3, #0
    a284:	bf14      	ite	ne
    a286:	2301      	movne	r3, #1
    a288:	2300      	moveq	r3, #0
    a28a:	b2db      	uxtb	r3, r3
    a28c:	2200      	movs	r2, #0
    a28e:	4619      	mov	r1, r3
    a290:	6878      	ldr	r0, [r7, #4]
    a292:	4b17      	ldr	r3, [pc, #92]	; (a2f0 <_usb_d_dev_handle_trfail+0x1bc>)
    a294:	4798      	blx	r3
}
    a296:	e01b      	b.n	a2d0 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a298:	78fa      	ldrb	r2, [r7, #3]
    a29a:	7efb      	ldrb	r3, [r7, #27]
    a29c:	4611      	mov	r1, r2
    a29e:	4618      	mov	r0, r3
    a2a0:	4b14      	ldr	r3, [pc, #80]	; (a2f4 <_usb_d_dev_handle_trfail+0x1c0>)
    a2a2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a2a4:	78fb      	ldrb	r3, [r7, #3]
    a2a6:	f107 0220 	add.w	r2, r7, #32
    a2aa:	4413      	add	r3, r2
    a2ac:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a2b0:	7efb      	ldrb	r3, [r7, #27]
    a2b2:	4619      	mov	r1, r3
    a2b4:	69f8      	ldr	r0, [r7, #28]
    a2b6:	4b0c      	ldr	r3, [pc, #48]	; (a2e8 <_usb_d_dev_handle_trfail+0x1b4>)
    a2b8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a2ba:	78fb      	ldrb	r3, [r7, #3]
    a2bc:	f107 0220 	add.w	r2, r7, #32
    a2c0:	4413      	add	r3, r2
    a2c2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a2c6:	7efb      	ldrb	r3, [r7, #27]
    a2c8:	4619      	mov	r1, r3
    a2ca:	69f8      	ldr	r0, [r7, #28]
    a2cc:	4b07      	ldr	r3, [pc, #28]	; (a2ec <_usb_d_dev_handle_trfail+0x1b8>)
    a2ce:	4798      	blx	r3
}
    a2d0:	bf00      	nop
    a2d2:	3720      	adds	r7, #32
    a2d4:	46bd      	mov	sp, r7
    a2d6:	bd80      	pop	{r7, pc}
    a2d8:	000133f0 	.word	0x000133f0
    a2dc:	20000c5c 	.word	0x20000c5c
    a2e0:	00008e9d 	.word	0x00008e9d
    a2e4:	00008e6d 	.word	0x00008e6d
    a2e8:	00008d41 	.word	0x00008d41
    a2ec:	00008e41 	.word	0x00008e41
    a2f0:	0000aead 	.word	0x0000aead
    a2f4:	00009729 	.word	0x00009729

0000a2f8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a2f8:	b580      	push	{r7, lr}
    a2fa:	b082      	sub	sp, #8
    a2fc:	af00      	add	r7, sp, #0
    a2fe:	6078      	str	r0, [r7, #4]
    a300:	460b      	mov	r3, r1
    a302:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a304:	78fb      	ldrb	r3, [r7, #3]
    a306:	f003 0310 	and.w	r3, r3, #16
    a30a:	2b00      	cmp	r3, #0
    a30c:	d003      	beq.n	a316 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a30e:	6878      	ldr	r0, [r7, #4]
    a310:	4b0c      	ldr	r3, [pc, #48]	; (a344 <_usb_d_dev_trans_setup_isr+0x4c>)
    a312:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a314:	e012      	b.n	a33c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a316:	78fb      	ldrb	r3, [r7, #3]
    a318:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a31c:	2b00      	cmp	r3, #0
    a31e:	d004      	beq.n	a32a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a320:	2101      	movs	r1, #1
    a322:	6878      	ldr	r0, [r7, #4]
    a324:	4b08      	ldr	r3, [pc, #32]	; (a348 <_usb_d_dev_trans_setup_isr+0x50>)
    a326:	4798      	blx	r3
}
    a328:	e008      	b.n	a33c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a32a:	78fb      	ldrb	r3, [r7, #3]
    a32c:	f003 0320 	and.w	r3, r3, #32
    a330:	2b00      	cmp	r3, #0
    a332:	d003      	beq.n	a33c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a334:	2100      	movs	r1, #0
    a336:	6878      	ldr	r0, [r7, #4]
    a338:	4b03      	ldr	r3, [pc, #12]	; (a348 <_usb_d_dev_trans_setup_isr+0x50>)
    a33a:	4798      	blx	r3
}
    a33c:	bf00      	nop
    a33e:	3708      	adds	r7, #8
    a340:	46bd      	mov	sp, r7
    a342:	bd80      	pop	{r7, pc}
    a344:	0000a019 	.word	0x0000a019
    a348:	0000a0f1 	.word	0x0000a0f1

0000a34c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a34c:	b580      	push	{r7, lr}
    a34e:	b082      	sub	sp, #8
    a350:	af00      	add	r7, sp, #0
    a352:	6078      	str	r0, [r7, #4]
    a354:	460b      	mov	r3, r1
    a356:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a358:	78fb      	ldrb	r3, [r7, #3]
    a35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a35e:	2b00      	cmp	r3, #0
    a360:	d004      	beq.n	a36c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a362:	2101      	movs	r1, #1
    a364:	6878      	ldr	r0, [r7, #4]
    a366:	4b1a      	ldr	r3, [pc, #104]	; (a3d0 <_usb_d_dev_trans_in_isr+0x84>)
    a368:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a36a:	e02c      	b.n	a3c6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a36c:	78fb      	ldrb	r3, [r7, #3]
    a36e:	f003 0308 	and.w	r3, r3, #8
    a372:	2b00      	cmp	r3, #0
    a374:	d004      	beq.n	a380 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a376:	2101      	movs	r1, #1
    a378:	6878      	ldr	r0, [r7, #4]
    a37a:	4b16      	ldr	r3, [pc, #88]	; (a3d4 <_usb_d_dev_trans_in_isr+0x88>)
    a37c:	4798      	blx	r3
}
    a37e:	e022      	b.n	a3c6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a380:	78fb      	ldrb	r3, [r7, #3]
    a382:	f003 0302 	and.w	r3, r3, #2
    a386:	2b00      	cmp	r3, #0
    a388:	d004      	beq.n	a394 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a38a:	2101      	movs	r1, #1
    a38c:	6878      	ldr	r0, [r7, #4]
    a38e:	4b12      	ldr	r3, [pc, #72]	; (a3d8 <_usb_d_dev_trans_in_isr+0x8c>)
    a390:	4798      	blx	r3
}
    a392:	e018      	b.n	a3c6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a394:	687b      	ldr	r3, [r7, #4]
    a396:	7cdb      	ldrb	r3, [r3, #19]
    a398:	f003 0307 	and.w	r3, r3, #7
    a39c:	b2db      	uxtb	r3, r3
    a39e:	2b01      	cmp	r3, #1
    a3a0:	d111      	bne.n	a3c6 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a3a2:	78fb      	ldrb	r3, [r7, #3]
    a3a4:	f003 0304 	and.w	r3, r3, #4
    a3a8:	2b00      	cmp	r3, #0
    a3aa:	d004      	beq.n	a3b6 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a3ac:	2100      	movs	r1, #0
    a3ae:	6878      	ldr	r0, [r7, #4]
    a3b0:	4b08      	ldr	r3, [pc, #32]	; (a3d4 <_usb_d_dev_trans_in_isr+0x88>)
    a3b2:	4798      	blx	r3
}
    a3b4:	e007      	b.n	a3c6 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a3b6:	78fb      	ldrb	r3, [r7, #3]
    a3b8:	f003 0310 	and.w	r3, r3, #16
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d002      	beq.n	a3c6 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a3c0:	6878      	ldr	r0, [r7, #4]
    a3c2:	4b06      	ldr	r3, [pc, #24]	; (a3dc <_usb_d_dev_trans_in_isr+0x90>)
    a3c4:	4798      	blx	r3
}
    a3c6:	bf00      	nop
    a3c8:	3708      	adds	r7, #8
    a3ca:	46bd      	mov	sp, r7
    a3cc:	bd80      	pop	{r7, pc}
    a3ce:	bf00      	nop
    a3d0:	0000a0f1 	.word	0x0000a0f1
    a3d4:	0000a135 	.word	0x0000a135
    a3d8:	00009b3d 	.word	0x00009b3d
    a3dc:	0000a019 	.word	0x0000a019

0000a3e0 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a3e0:	b580      	push	{r7, lr}
    a3e2:	b082      	sub	sp, #8
    a3e4:	af00      	add	r7, sp, #0
    a3e6:	6078      	str	r0, [r7, #4]
    a3e8:	460b      	mov	r3, r1
    a3ea:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a3ec:	78fb      	ldrb	r3, [r7, #3]
    a3ee:	f003 0320 	and.w	r3, r3, #32
    a3f2:	2b00      	cmp	r3, #0
    a3f4:	d004      	beq.n	a400 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a3f6:	2100      	movs	r1, #0
    a3f8:	6878      	ldr	r0, [r7, #4]
    a3fa:	4b1a      	ldr	r3, [pc, #104]	; (a464 <_usb_d_dev_trans_out_isr+0x84>)
    a3fc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a3fe:	e02c      	b.n	a45a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a400:	78fb      	ldrb	r3, [r7, #3]
    a402:	f003 0304 	and.w	r3, r3, #4
    a406:	2b00      	cmp	r3, #0
    a408:	d004      	beq.n	a414 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a40a:	2100      	movs	r1, #0
    a40c:	6878      	ldr	r0, [r7, #4]
    a40e:	4b16      	ldr	r3, [pc, #88]	; (a468 <_usb_d_dev_trans_out_isr+0x88>)
    a410:	4798      	blx	r3
}
    a412:	e022      	b.n	a45a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a414:	78fb      	ldrb	r3, [r7, #3]
    a416:	f003 0301 	and.w	r3, r3, #1
    a41a:	2b00      	cmp	r3, #0
    a41c:	d004      	beq.n	a428 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a41e:	2101      	movs	r1, #1
    a420:	6878      	ldr	r0, [r7, #4]
    a422:	4b12      	ldr	r3, [pc, #72]	; (a46c <_usb_d_dev_trans_out_isr+0x8c>)
    a424:	4798      	blx	r3
}
    a426:	e018      	b.n	a45a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a428:	687b      	ldr	r3, [r7, #4]
    a42a:	7cdb      	ldrb	r3, [r3, #19]
    a42c:	f003 0307 	and.w	r3, r3, #7
    a430:	b2db      	uxtb	r3, r3
    a432:	2b01      	cmp	r3, #1
    a434:	d111      	bne.n	a45a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a436:	78fb      	ldrb	r3, [r7, #3]
    a438:	f003 0308 	and.w	r3, r3, #8
    a43c:	2b00      	cmp	r3, #0
    a43e:	d004      	beq.n	a44a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a440:	2101      	movs	r1, #1
    a442:	6878      	ldr	r0, [r7, #4]
    a444:	4b08      	ldr	r3, [pc, #32]	; (a468 <_usb_d_dev_trans_out_isr+0x88>)
    a446:	4798      	blx	r3
}
    a448:	e007      	b.n	a45a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a44a:	78fb      	ldrb	r3, [r7, #3]
    a44c:	f003 0310 	and.w	r3, r3, #16
    a450:	2b00      	cmp	r3, #0
    a452:	d002      	beq.n	a45a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a454:	6878      	ldr	r0, [r7, #4]
    a456:	4b06      	ldr	r3, [pc, #24]	; (a470 <_usb_d_dev_trans_out_isr+0x90>)
    a458:	4798      	blx	r3
}
    a45a:	bf00      	nop
    a45c:	3708      	adds	r7, #8
    a45e:	46bd      	mov	sp, r7
    a460:	bd80      	pop	{r7, pc}
    a462:	bf00      	nop
    a464:	0000a0f1 	.word	0x0000a0f1
    a468:	0000a135 	.word	0x0000a135
    a46c:	00009d55 	.word	0x00009d55
    a470:	0000a019 	.word	0x0000a019

0000a474 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a474:	b580      	push	{r7, lr}
    a476:	b084      	sub	sp, #16
    a478:	af00      	add	r7, sp, #0
    a47a:	6078      	str	r0, [r7, #4]
    a47c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a47e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a482:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a484:	683b      	ldr	r3, [r7, #0]
    a486:	7c9b      	ldrb	r3, [r3, #18]
    a488:	f003 030f 	and.w	r3, r3, #15
    a48c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a48e:	7afb      	ldrb	r3, [r7, #11]
    a490:	2201      	movs	r2, #1
    a492:	409a      	lsls	r2, r3
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	4013      	ands	r3, r2
    a498:	2b00      	cmp	r3, #0
    a49a:	d03d      	beq.n	a518 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a49c:	7afb      	ldrb	r3, [r7, #11]
    a49e:	68fa      	ldr	r2, [r7, #12]
    a4a0:	3308      	adds	r3, #8
    a4a2:	015b      	lsls	r3, r3, #5
    a4a4:	4413      	add	r3, r2
    a4a6:	3307      	adds	r3, #7
    a4a8:	781b      	ldrb	r3, [r3, #0]
    a4aa:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a4ac:	7afb      	ldrb	r3, [r7, #11]
    a4ae:	68fa      	ldr	r2, [r7, #12]
    a4b0:	015b      	lsls	r3, r3, #5
    a4b2:	4413      	add	r3, r2
    a4b4:	f203 1309 	addw	r3, r3, #265	; 0x109
    a4b8:	781b      	ldrb	r3, [r3, #0]
    a4ba:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a4bc:	7aba      	ldrb	r2, [r7, #10]
    a4be:	7a7b      	ldrb	r3, [r7, #9]
    a4c0:	4013      	ands	r3, r2
    a4c2:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a4c4:	7abb      	ldrb	r3, [r7, #10]
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	d027      	beq.n	a51a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a4ca:	683b      	ldr	r3, [r7, #0]
    a4cc:	7cdb      	ldrb	r3, [r3, #19]
    a4ce:	f003 0307 	and.w	r3, r3, #7
    a4d2:	b2db      	uxtb	r3, r3
    a4d4:	2b01      	cmp	r3, #1
    a4d6:	d10c      	bne.n	a4f2 <_usb_d_dev_handle_eps+0x7e>
    a4d8:	683b      	ldr	r3, [r7, #0]
    a4da:	7cdb      	ldrb	r3, [r3, #19]
    a4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a4e0:	b2db      	uxtb	r3, r3
    a4e2:	2b00      	cmp	r3, #0
    a4e4:	d105      	bne.n	a4f2 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a4e6:	7abb      	ldrb	r3, [r7, #10]
    a4e8:	4619      	mov	r1, r3
    a4ea:	6838      	ldr	r0, [r7, #0]
    a4ec:	4b0c      	ldr	r3, [pc, #48]	; (a520 <_usb_d_dev_handle_eps+0xac>)
    a4ee:	4798      	blx	r3
    a4f0:	e013      	b.n	a51a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a4f2:	683b      	ldr	r3, [r7, #0]
    a4f4:	7cdb      	ldrb	r3, [r3, #19]
    a4f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a4fa:	b2db      	uxtb	r3, r3
    a4fc:	2b00      	cmp	r3, #0
    a4fe:	d005      	beq.n	a50c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a500:	7abb      	ldrb	r3, [r7, #10]
    a502:	4619      	mov	r1, r3
    a504:	6838      	ldr	r0, [r7, #0]
    a506:	4b07      	ldr	r3, [pc, #28]	; (a524 <_usb_d_dev_handle_eps+0xb0>)
    a508:	4798      	blx	r3
    a50a:	e006      	b.n	a51a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a50c:	7abb      	ldrb	r3, [r7, #10]
    a50e:	4619      	mov	r1, r3
    a510:	6838      	ldr	r0, [r7, #0]
    a512:	4b05      	ldr	r3, [pc, #20]	; (a528 <_usb_d_dev_handle_eps+0xb4>)
    a514:	4798      	blx	r3
    a516:	e000      	b.n	a51a <_usb_d_dev_handle_eps+0xa6>
		return;
    a518:	bf00      	nop
		}
	}
}
    a51a:	3710      	adds	r7, #16
    a51c:	46bd      	mov	sp, r7
    a51e:	bd80      	pop	{r7, pc}
    a520:	0000a2f9 	.word	0x0000a2f9
    a524:	0000a34d 	.word	0x0000a34d
    a528:	0000a3e1 	.word	0x0000a3e1

0000a52c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a52c:	b580      	push	{r7, lr}
    a52e:	b084      	sub	sp, #16
    a530:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a532:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a536:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a538:	68bb      	ldr	r3, [r7, #8]
    a53a:	8c1b      	ldrh	r3, [r3, #32]
    a53c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a53e:	88fb      	ldrh	r3, [r7, #6]
    a540:	2b00      	cmp	r3, #0
    a542:	d104      	bne.n	a54e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a544:	4b13      	ldr	r3, [pc, #76]	; (a594 <_usb_d_dev_handler+0x68>)
    a546:	4798      	blx	r3
    a548:	4603      	mov	r3, r0
    a54a:	2b00      	cmp	r3, #0
    a54c:	d11e      	bne.n	a58c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a54e:	2300      	movs	r3, #0
    a550:	73fb      	strb	r3, [r7, #15]
    a552:	e017      	b.n	a584 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a554:	7bfa      	ldrb	r2, [r7, #15]
    a556:	4613      	mov	r3, r2
    a558:	009b      	lsls	r3, r3, #2
    a55a:	4413      	add	r3, r2
    a55c:	009b      	lsls	r3, r3, #2
    a55e:	3310      	adds	r3, #16
    a560:	4a0d      	ldr	r2, [pc, #52]	; (a598 <_usb_d_dev_handler+0x6c>)
    a562:	4413      	add	r3, r2
    a564:	3304      	adds	r3, #4
    a566:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a568:	683b      	ldr	r3, [r7, #0]
    a56a:	7c9b      	ldrb	r3, [r3, #18]
    a56c:	2bff      	cmp	r3, #255	; 0xff
    a56e:	d005      	beq.n	a57c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a570:	88fb      	ldrh	r3, [r7, #6]
    a572:	6839      	ldr	r1, [r7, #0]
    a574:	4618      	mov	r0, r3
    a576:	4b09      	ldr	r3, [pc, #36]	; (a59c <_usb_d_dev_handler+0x70>)
    a578:	4798      	blx	r3
    a57a:	e000      	b.n	a57e <_usb_d_dev_handler+0x52>
			continue;
    a57c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a57e:	7bfb      	ldrb	r3, [r7, #15]
    a580:	3301      	adds	r3, #1
    a582:	73fb      	strb	r3, [r7, #15]
    a584:	7bfb      	ldrb	r3, [r7, #15]
    a586:	2b08      	cmp	r3, #8
    a588:	d9e4      	bls.n	a554 <_usb_d_dev_handler+0x28>
    a58a:	e000      	b.n	a58e <_usb_d_dev_handler+0x62>
			return;
    a58c:	bf00      	nop
	}
}
    a58e:	3710      	adds	r7, #16
    a590:	46bd      	mov	sp, r7
    a592:	bd80      	pop	{r7, pc}
    a594:	00009a85 	.word	0x00009a85
    a598:	20000b94 	.word	0x20000b94
    a59c:	0000a475 	.word	0x0000a475

0000a5a0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a5a0:	b580      	push	{r7, lr}
    a5a2:	b082      	sub	sp, #8
    a5a4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a5a6:	2300      	movs	r3, #0
    a5a8:	71fb      	strb	r3, [r7, #7]
    a5aa:	e023      	b.n	a5f4 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a5ac:	79fa      	ldrb	r2, [r7, #7]
    a5ae:	4613      	mov	r3, r2
    a5b0:	009b      	lsls	r3, r3, #2
    a5b2:	4413      	add	r3, r2
    a5b4:	009b      	lsls	r3, r3, #2
    a5b6:	3310      	adds	r3, #16
    a5b8:	4a14      	ldr	r2, [pc, #80]	; (a60c <_usb_d_dev_reset_epts+0x6c>)
    a5ba:	4413      	add	r3, r2
    a5bc:	3304      	adds	r3, #4
    a5be:	2103      	movs	r1, #3
    a5c0:	4618      	mov	r0, r3
    a5c2:	4b13      	ldr	r3, [pc, #76]	; (a610 <_usb_d_dev_reset_epts+0x70>)
    a5c4:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a5c6:	79fa      	ldrb	r2, [r7, #7]
    a5c8:	4910      	ldr	r1, [pc, #64]	; (a60c <_usb_d_dev_reset_epts+0x6c>)
    a5ca:	4613      	mov	r3, r2
    a5cc:	009b      	lsls	r3, r3, #2
    a5ce:	4413      	add	r3, r2
    a5d0:	009b      	lsls	r3, r3, #2
    a5d2:	440b      	add	r3, r1
    a5d4:	3326      	adds	r3, #38	; 0x26
    a5d6:	22ff      	movs	r2, #255	; 0xff
    a5d8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a5da:	79fa      	ldrb	r2, [r7, #7]
    a5dc:	490b      	ldr	r1, [pc, #44]	; (a60c <_usb_d_dev_reset_epts+0x6c>)
    a5de:	4613      	mov	r3, r2
    a5e0:	009b      	lsls	r3, r3, #2
    a5e2:	4413      	add	r3, r2
    a5e4:	009b      	lsls	r3, r3, #2
    a5e6:	440b      	add	r3, r1
    a5e8:	3327      	adds	r3, #39	; 0x27
    a5ea:	2200      	movs	r2, #0
    a5ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a5ee:	79fb      	ldrb	r3, [r7, #7]
    a5f0:	3301      	adds	r3, #1
    a5f2:	71fb      	strb	r3, [r7, #7]
    a5f4:	79fb      	ldrb	r3, [r7, #7]
    a5f6:	2b08      	cmp	r3, #8
    a5f8:	d9d8      	bls.n	a5ac <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a5fa:	22a0      	movs	r2, #160	; 0xa0
    a5fc:	2100      	movs	r1, #0
    a5fe:	4805      	ldr	r0, [pc, #20]	; (a614 <_usb_d_dev_reset_epts+0x74>)
    a600:	4b05      	ldr	r3, [pc, #20]	; (a618 <_usb_d_dev_reset_epts+0x78>)
    a602:	4798      	blx	r3
}
    a604:	bf00      	nop
    a606:	3708      	adds	r7, #8
    a608:	46bd      	mov	sp, r7
    a60a:	bd80      	pop	{r7, pc}
    a60c:	20000b94 	.word	0x20000b94
    a610:	0000ae65 	.word	0x0000ae65
    a614:	20000c5c 	.word	0x20000c5c
    a618:	00012d81 	.word	0x00012d81

0000a61c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a61c:	b580      	push	{r7, lr}
    a61e:	b084      	sub	sp, #16
    a620:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a622:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a626:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a628:	2301      	movs	r3, #1
    a62a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a62c:	2304      	movs	r3, #4
    a62e:	713b      	strb	r3, [r7, #4]
    a630:	2300      	movs	r3, #0
    a632:	717b      	strb	r3, [r7, #5]
    a634:	2300      	movs	r3, #0
    a636:	71bb      	strb	r3, [r7, #6]
    a638:	2300      	movs	r3, #0
    a63a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a63c:	2101      	movs	r1, #1
    a63e:	68f8      	ldr	r0, [r7, #12]
    a640:	4b26      	ldr	r3, [pc, #152]	; (a6dc <_usb_d_dev_init+0xc0>)
    a642:	4798      	blx	r3
    a644:	4603      	mov	r3, r0
    a646:	f083 0301 	eor.w	r3, r3, #1
    a64a:	b2db      	uxtb	r3, r3
    a64c:	2b00      	cmp	r3, #0
    a64e:	d011      	beq.n	a674 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a650:	2102      	movs	r1, #2
    a652:	68f8      	ldr	r0, [r7, #12]
    a654:	4b22      	ldr	r3, [pc, #136]	; (a6e0 <_usb_d_dev_init+0xc4>)
    a656:	4798      	blx	r3
    a658:	4603      	mov	r3, r0
    a65a:	2b00      	cmp	r3, #0
    a65c:	d006      	beq.n	a66c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a65e:	68f8      	ldr	r0, [r7, #12]
    a660:	4b20      	ldr	r3, [pc, #128]	; (a6e4 <_usb_d_dev_init+0xc8>)
    a662:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a664:	2102      	movs	r1, #2
    a666:	68f8      	ldr	r0, [r7, #12]
    a668:	4b1f      	ldr	r3, [pc, #124]	; (a6e8 <_usb_d_dev_init+0xcc>)
    a66a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a66c:	2101      	movs	r1, #1
    a66e:	68f8      	ldr	r0, [r7, #12]
    a670:	4b1e      	ldr	r3, [pc, #120]	; (a6ec <_usb_d_dev_init+0xd0>)
    a672:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a674:	2101      	movs	r1, #1
    a676:	68f8      	ldr	r0, [r7, #12]
    a678:	4b1b      	ldr	r3, [pc, #108]	; (a6e8 <_usb_d_dev_init+0xcc>)
    a67a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a67c:	4b1c      	ldr	r3, [pc, #112]	; (a6f0 <_usb_d_dev_init+0xd4>)
    a67e:	4a1d      	ldr	r2, [pc, #116]	; (a6f4 <_usb_d_dev_init+0xd8>)
    a680:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a682:	4b1b      	ldr	r3, [pc, #108]	; (a6f0 <_usb_d_dev_init+0xd4>)
    a684:	4a1b      	ldr	r2, [pc, #108]	; (a6f4 <_usb_d_dev_init+0xd8>)
    a686:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a688:	4b19      	ldr	r3, [pc, #100]	; (a6f0 <_usb_d_dev_init+0xd4>)
    a68a:	4a1a      	ldr	r2, [pc, #104]	; (a6f4 <_usb_d_dev_init+0xd8>)
    a68c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a68e:	4b18      	ldr	r3, [pc, #96]	; (a6f0 <_usb_d_dev_init+0xd4>)
    a690:	4a18      	ldr	r2, [pc, #96]	; (a6f4 <_usb_d_dev_init+0xd8>)
    a692:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a694:	4b16      	ldr	r3, [pc, #88]	; (a6f0 <_usb_d_dev_init+0xd4>)
    a696:	4a17      	ldr	r2, [pc, #92]	; (a6f4 <_usb_d_dev_init+0xd8>)
    a698:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a69a:	4b17      	ldr	r3, [pc, #92]	; (a6f8 <_usb_d_dev_init+0xdc>)
    a69c:	4798      	blx	r3

	_usb_load_calib();
    a69e:	4b17      	ldr	r3, [pc, #92]	; (a6fc <_usb_d_dev_init+0xe0>)
    a6a0:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a6a2:	2104      	movs	r1, #4
    a6a4:	68f8      	ldr	r0, [r7, #12]
    a6a6:	4b11      	ldr	r3, [pc, #68]	; (a6ec <_usb_d_dev_init+0xd0>)
    a6a8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a6aa:	4b15      	ldr	r3, [pc, #84]	; (a700 <_usb_d_dev_init+0xe4>)
    a6ac:	4619      	mov	r1, r3
    a6ae:	68f8      	ldr	r0, [r7, #12]
    a6b0:	4b14      	ldr	r3, [pc, #80]	; (a704 <_usb_d_dev_init+0xe8>)
    a6b2:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a6b4:	7afb      	ldrb	r3, [r7, #11]
    a6b6:	f107 0210 	add.w	r2, r7, #16
    a6ba:	4413      	add	r3, r2
    a6bc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a6c0:	f043 0301 	orr.w	r3, r3, #1
    a6c4:	b2db      	uxtb	r3, r3
    a6c6:	b29b      	uxth	r3, r3
    a6c8:	4619      	mov	r1, r3
    a6ca:	68f8      	ldr	r0, [r7, #12]
    a6cc:	4b0e      	ldr	r3, [pc, #56]	; (a708 <_usb_d_dev_init+0xec>)
    a6ce:	4798      	blx	r3

	return ERR_NONE;
    a6d0:	2300      	movs	r3, #0
}
    a6d2:	4618      	mov	r0, r3
    a6d4:	3710      	adds	r7, #16
    a6d6:	46bd      	mov	sp, r7
    a6d8:	bd80      	pop	{r7, pc}
    a6da:	bf00      	nop
    a6dc:	00008cb5 	.word	0x00008cb5
    a6e0:	00009005 	.word	0x00009005
    a6e4:	00008fd9 	.word	0x00008fd9
    a6e8:	00008c8b 	.word	0x00008c8b
    a6ec:	00009035 	.word	0x00009035
    a6f0:	20000b94 	.word	0x20000b94
    a6f4:	000090fd 	.word	0x000090fd
    a6f8:	0000a5a1 	.word	0x0000a5a1
    a6fc:	00009115 	.word	0x00009115
    a700:	20000c5c 	.word	0x20000c5c
    a704:	000090e1 	.word	0x000090e1
    a708:	000090a5 	.word	0x000090a5

0000a70c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a712:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a716:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a718:	2103      	movs	r1, #3
    a71a:	6878      	ldr	r0, [r7, #4]
    a71c:	4b17      	ldr	r3, [pc, #92]	; (a77c <_usb_d_dev_enable+0x70>)
    a71e:	4798      	blx	r3
    a720:	4603      	mov	r3, r0
    a722:	2b00      	cmp	r3, #0
    a724:	d002      	beq.n	a72c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a726:	f06f 0310 	mvn.w	r3, #16
    a72a:	e023      	b.n	a774 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a72c:	6878      	ldr	r0, [r7, #4]
    a72e:	4b14      	ldr	r3, [pc, #80]	; (a780 <_usb_d_dev_enable+0x74>)
    a730:	4798      	blx	r3
    a732:	4603      	mov	r3, r0
    a734:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a736:	78fb      	ldrb	r3, [r7, #3]
    a738:	f003 0302 	and.w	r3, r3, #2
    a73c:	2b00      	cmp	r3, #0
    a73e:	d107      	bne.n	a750 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a740:	78fb      	ldrb	r3, [r7, #3]
    a742:	f043 0302 	orr.w	r3, r3, #2
    a746:	b2db      	uxtb	r3, r3
    a748:	4619      	mov	r1, r3
    a74a:	6878      	ldr	r0, [r7, #4]
    a74c:	4b0d      	ldr	r3, [pc, #52]	; (a784 <_usb_d_dev_enable+0x78>)
    a74e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a750:	2050      	movs	r0, #80	; 0x50
    a752:	4b0d      	ldr	r3, [pc, #52]	; (a788 <_usb_d_dev_enable+0x7c>)
    a754:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a756:	2051      	movs	r0, #81	; 0x51
    a758:	4b0b      	ldr	r3, [pc, #44]	; (a788 <_usb_d_dev_enable+0x7c>)
    a75a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a75c:	2052      	movs	r0, #82	; 0x52
    a75e:	4b0a      	ldr	r3, [pc, #40]	; (a788 <_usb_d_dev_enable+0x7c>)
    a760:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a762:	2053      	movs	r0, #83	; 0x53
    a764:	4b08      	ldr	r3, [pc, #32]	; (a788 <_usb_d_dev_enable+0x7c>)
    a766:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a768:	f240 218d 	movw	r1, #653	; 0x28d
    a76c:	6878      	ldr	r0, [r7, #4]
    a76e:	4b07      	ldr	r3, [pc, #28]	; (a78c <_usb_d_dev_enable+0x80>)
    a770:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a772:	2300      	movs	r3, #0
}
    a774:	4618      	mov	r0, r3
    a776:	3708      	adds	r7, #8
    a778:	46bd      	mov	sp, r7
    a77a:	bd80      	pop	{r7, pc}
    a77c:	00008faf 	.word	0x00008faf
    a780:	0000905d 	.word	0x0000905d
    a784:	00009035 	.word	0x00009035
    a788:	00008bc1 	.word	0x00008bc1
    a78c:	00008f59 	.word	0x00008f59

0000a790 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a790:	b580      	push	{r7, lr}
    a792:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a794:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a798:	4b01      	ldr	r3, [pc, #4]	; (a7a0 <_usb_d_dev_attach+0x10>)
    a79a:	4798      	blx	r3
}
    a79c:	bf00      	nop
    a79e:	bd80      	pop	{r7, pc}
    a7a0:	00009081 	.word	0x00009081

0000a7a4 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a7a4:	b580      	push	{r7, lr}
    a7a6:	b082      	sub	sp, #8
    a7a8:	af00      	add	r7, sp, #0
    a7aa:	4603      	mov	r3, r0
    a7ac:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a7ae:	79fb      	ldrb	r3, [r7, #7]
    a7b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a7b4:	b2db      	uxtb	r3, r3
    a7b6:	4619      	mov	r1, r3
    a7b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7bc:	4b02      	ldr	r3, [pc, #8]	; (a7c8 <_usb_d_dev_set_address+0x24>)
    a7be:	4798      	blx	r3
}
    a7c0:	bf00      	nop
    a7c2:	3708      	adds	r7, #8
    a7c4:	46bd      	mov	sp, r7
    a7c6:	bd80      	pop	{r7, pc}
    a7c8:	000090c3 	.word	0x000090c3

0000a7cc <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a7cc:	b590      	push	{r4, r7, lr}
    a7ce:	b085      	sub	sp, #20
    a7d0:	af00      	add	r7, sp, #0
    a7d2:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a7d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a7d8:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7da:	687b      	ldr	r3, [r7, #4]
    a7dc:	7c9b      	ldrb	r3, [r3, #18]
    a7de:	f003 030f 	and.w	r3, r3, #15
    a7e2:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a7e4:	687b      	ldr	r3, [r7, #4]
    a7e6:	68db      	ldr	r3, [r3, #12]
    a7e8:	461a      	mov	r2, r3
    a7ea:	7afb      	ldrb	r3, [r7, #11]
    a7ec:	2100      	movs	r1, #0
    a7ee:	4618      	mov	r0, r3
    a7f0:	4b0f      	ldr	r3, [pc, #60]	; (a830 <_usb_d_dev_trans_setup+0x64>)
    a7f2:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a7f4:	687b      	ldr	r3, [r7, #4]
    a7f6:	8a1b      	ldrh	r3, [r3, #16]
    a7f8:	461a      	mov	r2, r3
    a7fa:	7af8      	ldrb	r0, [r7, #11]
    a7fc:	2300      	movs	r3, #0
    a7fe:	2100      	movs	r1, #0
    a800:	4c0c      	ldr	r4, [pc, #48]	; (a834 <_usb_d_dev_trans_setup+0x68>)
    a802:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a804:	7afb      	ldrb	r3, [r7, #11]
    a806:	22b0      	movs	r2, #176	; 0xb0
    a808:	4619      	mov	r1, r3
    a80a:	68f8      	ldr	r0, [r7, #12]
    a80c:	4b0a      	ldr	r3, [pc, #40]	; (a838 <_usb_d_dev_trans_setup+0x6c>)
    a80e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a810:	7afb      	ldrb	r3, [r7, #11]
    a812:	2200      	movs	r2, #0
    a814:	2100      	movs	r1, #0
    a816:	4618      	mov	r0, r3
    a818:	4b08      	ldr	r3, [pc, #32]	; (a83c <_usb_d_dev_trans_setup+0x70>)
    a81a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a81c:	7afb      	ldrb	r3, [r7, #11]
    a81e:	2210      	movs	r2, #16
    a820:	4619      	mov	r1, r3
    a822:	68f8      	ldr	r0, [r7, #12]
    a824:	4b06      	ldr	r3, [pc, #24]	; (a840 <_usb_d_dev_trans_setup+0x74>)
    a826:	4798      	blx	r3
}
    a828:	bf00      	nop
    a82a:	3714      	adds	r7, #20
    a82c:	46bd      	mov	sp, r7
    a82e:	bd90      	pop	{r4, r7, pc}
    a830:	00009561 	.word	0x00009561
    a834:	000096e9 	.word	0x000096e9
    a838:	00008dc1 	.word	0x00008dc1
    a83c:	000097b9 	.word	0x000097b9
    a840:	00008e15 	.word	0x00008e15

0000a844 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a844:	b580      	push	{r7, lr}
    a846:	b088      	sub	sp, #32
    a848:	af00      	add	r7, sp, #0
    a84a:	4603      	mov	r3, r0
    a84c:	71fb      	strb	r3, [r7, #7]
    a84e:	460b      	mov	r3, r1
    a850:	71bb      	strb	r3, [r7, #6]
    a852:	4613      	mov	r3, r2
    a854:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a856:	79fb      	ldrb	r3, [r7, #7]
    a858:	f003 030f 	and.w	r3, r3, #15
    a85c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a85e:	79fb      	ldrb	r3, [r7, #7]
    a860:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a864:	2b00      	cmp	r3, #0
    a866:	bf14      	ite	ne
    a868:	2301      	movne	r3, #1
    a86a:	2300      	moveq	r3, #0
    a86c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a86e:	7fba      	ldrb	r2, [r7, #30]
    a870:	7ffb      	ldrb	r3, [r7, #31]
    a872:	4611      	mov	r1, r2
    a874:	4618      	mov	r0, r3
    a876:	4b3e      	ldr	r3, [pc, #248]	; (a970 <_usb_d_dev_ep_init+0x12c>)
    a878:	4798      	blx	r3
    a87a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a87c:	79bb      	ldrb	r3, [r7, #6]
    a87e:	f003 0303 	and.w	r3, r3, #3
    a882:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a884:	7ffa      	ldrb	r2, [r7, #31]
    a886:	4613      	mov	r3, r2
    a888:	005b      	lsls	r3, r3, #1
    a88a:	4413      	add	r3, r2
    a88c:	009b      	lsls	r3, r3, #2
    a88e:	4a39      	ldr	r2, [pc, #228]	; (a974 <_usb_d_dev_ep_init+0x130>)
    a890:	4413      	add	r3, r2
    a892:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a894:	7ffb      	ldrb	r3, [r7, #31]
    a896:	2b04      	cmp	r3, #4
    a898:	d902      	bls.n	a8a0 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a89a:	f06f 0311 	mvn.w	r3, #17
    a89e:	e063      	b.n	a968 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a8a0:	69bb      	ldr	r3, [r7, #24]
    a8a2:	7c9b      	ldrb	r3, [r3, #18]
    a8a4:	2bff      	cmp	r3, #255	; 0xff
    a8a6:	d002      	beq.n	a8ae <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a8a8:	f06f 0313 	mvn.w	r3, #19
    a8ac:	e05c      	b.n	a968 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a8ae:	7dfb      	ldrb	r3, [r7, #23]
    a8b0:	2b00      	cmp	r3, #0
    a8b2:	d11f      	bne.n	a8f4 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a8b4:	7fbb      	ldrb	r3, [r7, #30]
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	bf14      	ite	ne
    a8ba:	2301      	movne	r3, #1
    a8bc:	2300      	moveq	r3, #0
    a8be:	b2db      	uxtb	r3, r3
    a8c0:	f083 0301 	eor.w	r3, r3, #1
    a8c4:	b2db      	uxtb	r3, r3
    a8c6:	f003 0301 	and.w	r3, r3, #1
    a8ca:	b2da      	uxtb	r2, r3
    a8cc:	7ffb      	ldrb	r3, [r7, #31]
    a8ce:	4611      	mov	r1, r2
    a8d0:	4618      	mov	r0, r3
    a8d2:	4b27      	ldr	r3, [pc, #156]	; (a970 <_usb_d_dev_ep_init+0x12c>)
    a8d4:	4798      	blx	r3
    a8d6:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a8d8:	68fb      	ldr	r3, [r7, #12]
    a8da:	7c9b      	ldrb	r3, [r3, #18]
    a8dc:	2bff      	cmp	r3, #255	; 0xff
    a8de:	d002      	beq.n	a8e6 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a8e0:	f06f 0313 	mvn.w	r3, #19
    a8e4:	e040      	b.n	a968 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a8e6:	693b      	ldr	r3, [r7, #16]
    a8e8:	681b      	ldr	r3, [r3, #0]
    a8ea:	2b00      	cmp	r3, #0
    a8ec:	d102      	bne.n	a8f4 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a8ee:	f06f 0312 	mvn.w	r3, #18
    a8f2:	e039      	b.n	a968 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a8f4:	7fbb      	ldrb	r3, [r7, #30]
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	d007      	beq.n	a90a <_usb_d_dev_ep_init+0xc6>
    a8fa:	693b      	ldr	r3, [r7, #16]
    a8fc:	685b      	ldr	r3, [r3, #4]
    a8fe:	2b00      	cmp	r3, #0
    a900:	bf14      	ite	ne
    a902:	2301      	movne	r3, #1
    a904:	2300      	moveq	r3, #0
    a906:	b2db      	uxtb	r3, r3
    a908:	e006      	b.n	a918 <_usb_d_dev_ep_init+0xd4>
    a90a:	693b      	ldr	r3, [r7, #16]
    a90c:	681b      	ldr	r3, [r3, #0]
    a90e:	2b00      	cmp	r3, #0
    a910:	bf14      	ite	ne
    a912:	2301      	movne	r3, #1
    a914:	2300      	moveq	r3, #0
    a916:	b2db      	uxtb	r3, r3
    a918:	2b00      	cmp	r3, #0
    a91a:	d00f      	beq.n	a93c <_usb_d_dev_ep_init+0xf8>
    a91c:	7fbb      	ldrb	r3, [r7, #30]
    a91e:	2b00      	cmp	r3, #0
    a920:	d003      	beq.n	a92a <_usb_d_dev_ep_init+0xe6>
    a922:	693b      	ldr	r3, [r7, #16]
    a924:	895b      	ldrh	r3, [r3, #10]
    a926:	461a      	mov	r2, r3
    a928:	e002      	b.n	a930 <_usb_d_dev_ep_init+0xec>
    a92a:	693b      	ldr	r3, [r7, #16]
    a92c:	891b      	ldrh	r3, [r3, #8]
    a92e:	461a      	mov	r2, r3
    a930:	88bb      	ldrh	r3, [r7, #4]
    a932:	429a      	cmp	r2, r3
    a934:	da02      	bge.n	a93c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a936:	f06f 0312 	mvn.w	r3, #18
    a93a:	e015      	b.n	a968 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a93c:	7fbb      	ldrb	r3, [r7, #30]
    a93e:	2b00      	cmp	r3, #0
    a940:	d002      	beq.n	a948 <_usb_d_dev_ep_init+0x104>
    a942:	693b      	ldr	r3, [r7, #16]
    a944:	685b      	ldr	r3, [r3, #4]
    a946:	e001      	b.n	a94c <_usb_d_dev_ep_init+0x108>
    a948:	693b      	ldr	r3, [r7, #16]
    a94a:	681b      	ldr	r3, [r3, #0]
    a94c:	69ba      	ldr	r2, [r7, #24]
    a94e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a950:	69bb      	ldr	r3, [r7, #24]
    a952:	88ba      	ldrh	r2, [r7, #4]
    a954:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a956:	7dfb      	ldrb	r3, [r7, #23]
    a958:	3301      	adds	r3, #1
    a95a:	b2da      	uxtb	r2, r3
    a95c:	69bb      	ldr	r3, [r7, #24]
    a95e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a960:	69bb      	ldr	r3, [r7, #24]
    a962:	79fa      	ldrb	r2, [r7, #7]
    a964:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a966:	2300      	movs	r3, #0
}
    a968:	4618      	mov	r0, r3
    a96a:	3720      	adds	r7, #32
    a96c:	46bd      	mov	sp, r7
    a96e:	bd80      	pop	{r7, pc}
    a970:	00009875 	.word	0x00009875
    a974:	000133b4 	.word	0x000133b4

0000a978 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b086      	sub	sp, #24
    a97c:	af00      	add	r7, sp, #0
    a97e:	4603      	mov	r3, r0
    a980:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a982:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a986:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a988:	79fb      	ldrb	r3, [r7, #7]
    a98a:	f003 030f 	and.w	r3, r3, #15
    a98e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a990:	79fb      	ldrb	r3, [r7, #7]
    a992:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a996:	2b00      	cmp	r3, #0
    a998:	bf14      	ite	ne
    a99a:	2301      	movne	r3, #1
    a99c:	2300      	moveq	r3, #0
    a99e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a9a0:	7cba      	ldrb	r2, [r7, #18]
    a9a2:	7cfb      	ldrb	r3, [r7, #19]
    a9a4:	4611      	mov	r1, r2
    a9a6:	4618      	mov	r0, r3
    a9a8:	4b2a      	ldr	r3, [pc, #168]	; (aa54 <_usb_d_dev_ep_deinit+0xdc>)
    a9aa:	4798      	blx	r3
    a9ac:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a9ae:	7cfb      	ldrb	r3, [r7, #19]
    a9b0:	2b04      	cmp	r3, #4
    a9b2:	d84a      	bhi.n	aa4a <_usb_d_dev_ep_deinit+0xd2>
    a9b4:	68fb      	ldr	r3, [r7, #12]
    a9b6:	7c9b      	ldrb	r3, [r3, #18]
    a9b8:	2bff      	cmp	r3, #255	; 0xff
    a9ba:	d046      	beq.n	aa4a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a9bc:	7cbb      	ldrb	r3, [r7, #18]
    a9be:	2203      	movs	r2, #3
    a9c0:	4619      	mov	r1, r3
    a9c2:	68f8      	ldr	r0, [r7, #12]
    a9c4:	4b24      	ldr	r3, [pc, #144]	; (aa58 <_usb_d_dev_ep_deinit+0xe0>)
    a9c6:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a9c8:	68fb      	ldr	r3, [r7, #12]
    a9ca:	7cdb      	ldrb	r3, [r3, #19]
    a9cc:	f003 0307 	and.w	r3, r3, #7
    a9d0:	b2db      	uxtb	r3, r3
    a9d2:	2b01      	cmp	r3, #1
    a9d4:	d107      	bne.n	a9e6 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a9d6:	79fb      	ldrb	r3, [r7, #7]
    a9d8:	697a      	ldr	r2, [r7, #20]
    a9da:	3308      	adds	r3, #8
    a9dc:	015b      	lsls	r3, r3, #5
    a9de:	4413      	add	r3, r2
    a9e0:	2200      	movs	r2, #0
    a9e2:	701a      	strb	r2, [r3, #0]
    a9e4:	e02a      	b.n	aa3c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a9e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	da15      	bge.n	aa1a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a9ee:	79fb      	ldrb	r3, [r7, #7]
    a9f0:	f003 030f 	and.w	r3, r3, #15
    a9f4:	79fa      	ldrb	r2, [r7, #7]
    a9f6:	f002 020f 	and.w	r2, r2, #15
    a9fa:	6979      	ldr	r1, [r7, #20]
    a9fc:	3208      	adds	r2, #8
    a9fe:	0152      	lsls	r2, r2, #5
    aa00:	440a      	add	r2, r1
    aa02:	7812      	ldrb	r2, [r2, #0]
    aa04:	b2d2      	uxtb	r2, r2
    aa06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    aa0a:	b2d1      	uxtb	r1, r2
    aa0c:	697a      	ldr	r2, [r7, #20]
    aa0e:	3308      	adds	r3, #8
    aa10:	015b      	lsls	r3, r3, #5
    aa12:	4413      	add	r3, r2
    aa14:	460a      	mov	r2, r1
    aa16:	701a      	strb	r2, [r3, #0]
    aa18:	e010      	b.n	aa3c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    aa1a:	79fb      	ldrb	r3, [r7, #7]
    aa1c:	79fa      	ldrb	r2, [r7, #7]
    aa1e:	6979      	ldr	r1, [r7, #20]
    aa20:	3208      	adds	r2, #8
    aa22:	0152      	lsls	r2, r2, #5
    aa24:	440a      	add	r2, r1
    aa26:	7812      	ldrb	r2, [r2, #0]
    aa28:	b2d2      	uxtb	r2, r2
    aa2a:	f022 0207 	bic.w	r2, r2, #7
    aa2e:	b2d1      	uxtb	r1, r2
    aa30:	697a      	ldr	r2, [r7, #20]
    aa32:	3308      	adds	r3, #8
    aa34:	015b      	lsls	r3, r3, #5
    aa36:	4413      	add	r3, r2
    aa38:	460a      	mov	r2, r1
    aa3a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    aa3c:	68fb      	ldr	r3, [r7, #12]
    aa3e:	2200      	movs	r2, #0
    aa40:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    aa42:	68fb      	ldr	r3, [r7, #12]
    aa44:	22ff      	movs	r2, #255	; 0xff
    aa46:	749a      	strb	r2, [r3, #18]
    aa48:	e000      	b.n	aa4c <_usb_d_dev_ep_deinit+0xd4>
		return;
    aa4a:	bf00      	nop
}
    aa4c:	3718      	adds	r7, #24
    aa4e:	46bd      	mov	sp, r7
    aa50:	bd80      	pop	{r7, pc}
    aa52:	bf00      	nop
    aa54:	00009875 	.word	0x00009875
    aa58:	0000aead 	.word	0x0000aead

0000aa5c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    aa5c:	b5b0      	push	{r4, r5, r7, lr}
    aa5e:	b088      	sub	sp, #32
    aa60:	af00      	add	r7, sp, #0
    aa62:	4603      	mov	r3, r0
    aa64:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    aa66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa6a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    aa6c:	79fb      	ldrb	r3, [r7, #7]
    aa6e:	f003 030f 	and.w	r3, r3, #15
    aa72:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    aa74:	79fb      	ldrb	r3, [r7, #7]
    aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aa7a:	2b00      	cmp	r3, #0
    aa7c:	bf14      	ite	ne
    aa7e:	2301      	movne	r3, #1
    aa80:	2300      	moveq	r3, #0
    aa82:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    aa84:	7eba      	ldrb	r2, [r7, #26]
    aa86:	7efb      	ldrb	r3, [r7, #27]
    aa88:	4611      	mov	r1, r2
    aa8a:	4618      	mov	r0, r3
    aa8c:	4b70      	ldr	r3, [pc, #448]	; (ac50 <_usb_d_dev_ep_enable+0x1f4>)
    aa8e:	4798      	blx	r3
    aa90:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    aa92:	7efb      	ldrb	r3, [r7, #27]
    aa94:	4619      	mov	r1, r3
    aa96:	69f8      	ldr	r0, [r7, #28]
    aa98:	4b6e      	ldr	r3, [pc, #440]	; (ac54 <_usb_d_dev_ep_enable+0x1f8>)
    aa9a:	4798      	blx	r3
    aa9c:	4603      	mov	r3, r0
    aa9e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    aaa0:	7efb      	ldrb	r3, [r7, #27]
    aaa2:	2b04      	cmp	r3, #4
    aaa4:	d803      	bhi.n	aaae <_usb_d_dev_ep_enable+0x52>
    aaa6:	697b      	ldr	r3, [r7, #20]
    aaa8:	7c9b      	ldrb	r3, [r3, #18]
    aaaa:	2bff      	cmp	r3, #255	; 0xff
    aaac:	d102      	bne.n	aab4 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    aaae:	f06f 0311 	mvn.w	r3, #17
    aab2:	e0c8      	b.n	ac46 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    aab4:	7efb      	ldrb	r3, [r7, #27]
    aab6:	015b      	lsls	r3, r3, #5
    aab8:	4a67      	ldr	r2, [pc, #412]	; (ac58 <_usb_d_dev_ep_enable+0x1fc>)
    aaba:	4413      	add	r3, r2
    aabc:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    aabe:	697b      	ldr	r3, [r7, #20]
    aac0:	7cdb      	ldrb	r3, [r3, #19]
    aac2:	f003 0307 	and.w	r3, r3, #7
    aac6:	b2db      	uxtb	r3, r3
    aac8:	2b01      	cmp	r3, #1
    aaca:	d14b      	bne.n	ab64 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    aacc:	7cfb      	ldrb	r3, [r7, #19]
    aace:	f003 0377 	and.w	r3, r3, #119	; 0x77
    aad2:	2b00      	cmp	r3, #0
    aad4:	d002      	beq.n	aadc <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    aad6:	f06f 0313 	mvn.w	r3, #19
    aada:	e0b4      	b.n	ac46 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    aadc:	7efb      	ldrb	r3, [r7, #27]
    aade:	2211      	movs	r2, #17
    aae0:	4619      	mov	r1, r3
    aae2:	69f8      	ldr	r0, [r7, #28]
    aae4:	4b5d      	ldr	r3, [pc, #372]	; (ac5c <_usb_d_dev_ep_enable+0x200>)
    aae6:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aae8:	697b      	ldr	r3, [r7, #20]
    aaea:	8a1b      	ldrh	r3, [r3, #16]
    aaec:	039b      	lsls	r3, r3, #14
    aaee:	4c5c      	ldr	r4, [pc, #368]	; (ac60 <_usb_d_dev_ep_enable+0x204>)
    aaf0:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aaf2:	697b      	ldr	r3, [r7, #20]
    aaf4:	8a1b      	ldrh	r3, [r3, #16]
    aaf6:	4618      	mov	r0, r3
    aaf8:	4b5a      	ldr	r3, [pc, #360]	; (ac64 <_usb_d_dev_ep_enable+0x208>)
    aafa:	4798      	blx	r3
    aafc:	4603      	mov	r3, r0
    aafe:	071b      	lsls	r3, r3, #28
    ab00:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ab04:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab08:	68fb      	ldr	r3, [r7, #12]
    ab0a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ab0c:	68fb      	ldr	r3, [r7, #12]
    ab0e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab12:	697b      	ldr	r3, [r7, #20]
    ab14:	8a1b      	ldrh	r3, [r3, #16]
    ab16:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ab1a:	697b      	ldr	r3, [r7, #20]
    ab1c:	8a1b      	ldrh	r3, [r3, #16]
    ab1e:	4618      	mov	r0, r3
    ab20:	4b50      	ldr	r3, [pc, #320]	; (ac64 <_usb_d_dev_ep_enable+0x208>)
    ab22:	4798      	blx	r3
    ab24:	4603      	mov	r3, r0
    ab26:	071b      	lsls	r3, r3, #28
    ab28:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ab2c:	432b      	orrs	r3, r5
    ab2e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ab30:	7efb      	ldrb	r3, [r7, #27]
    ab32:	2200      	movs	r2, #0
    ab34:	2100      	movs	r1, #0
    ab36:	4618      	mov	r0, r3
    ab38:	4b4b      	ldr	r3, [pc, #300]	; (ac68 <_usb_d_dev_ep_enable+0x20c>)
    ab3a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ab3c:	7efb      	ldrb	r3, [r7, #27]
    ab3e:	2200      	movs	r2, #0
    ab40:	2101      	movs	r1, #1
    ab42:	4618      	mov	r0, r3
    ab44:	4b49      	ldr	r3, [pc, #292]	; (ac6c <_usb_d_dev_ep_enable+0x210>)
    ab46:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ab48:	7efb      	ldrb	r3, [r7, #27]
    ab4a:	2100      	movs	r1, #0
    ab4c:	4618      	mov	r0, r3
    ab4e:	4b48      	ldr	r3, [pc, #288]	; (ac70 <_usb_d_dev_ep_enable+0x214>)
    ab50:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ab52:	7efb      	ldrb	r3, [r7, #27]
    ab54:	2101      	movs	r1, #1
    ab56:	4618      	mov	r0, r3
    ab58:	4b45      	ldr	r3, [pc, #276]	; (ac70 <_usb_d_dev_ep_enable+0x214>)
    ab5a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ab5c:	6978      	ldr	r0, [r7, #20]
    ab5e:	4b45      	ldr	r3, [pc, #276]	; (ac74 <_usb_d_dev_ep_enable+0x218>)
    ab60:	4798      	blx	r3
    ab62:	e06f      	b.n	ac44 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ab64:	7ebb      	ldrb	r3, [r7, #26]
    ab66:	2b00      	cmp	r3, #0
    ab68:	d038      	beq.n	abdc <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ab6a:	7cfb      	ldrb	r3, [r7, #19]
    ab6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ab70:	2b00      	cmp	r3, #0
    ab72:	d002      	beq.n	ab7a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    ab74:	f06f 0313 	mvn.w	r3, #19
    ab78:	e065      	b.n	ac46 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    ab7a:	697b      	ldr	r3, [r7, #20]
    ab7c:	7cdb      	ldrb	r3, [r3, #19]
    ab7e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ab82:	b2db      	uxtb	r3, r3
    ab84:	011b      	lsls	r3, r3, #4
    ab86:	b2db      	uxtb	r3, r3
    ab88:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ab8c:	b2da      	uxtb	r2, r3
    ab8e:	7cfb      	ldrb	r3, [r7, #19]
    ab90:	4313      	orrs	r3, r2
    ab92:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ab94:	7cfa      	ldrb	r2, [r7, #19]
    ab96:	7efb      	ldrb	r3, [r7, #27]
    ab98:	4619      	mov	r1, r3
    ab9a:	69f8      	ldr	r0, [r7, #28]
    ab9c:	4b2f      	ldr	r3, [pc, #188]	; (ac5c <_usb_d_dev_ep_enable+0x200>)
    ab9e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    aba0:	68fb      	ldr	r3, [r7, #12]
    aba2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aba6:	697b      	ldr	r3, [r7, #20]
    aba8:	8a1b      	ldrh	r3, [r3, #16]
    abaa:	f3c3 050d 	ubfx	r5, r3, #0, #14
    abae:	697b      	ldr	r3, [r7, #20]
    abb0:	8a1b      	ldrh	r3, [r3, #16]
    abb2:	4618      	mov	r0, r3
    abb4:	4b2b      	ldr	r3, [pc, #172]	; (ac64 <_usb_d_dev_ep_enable+0x208>)
    abb6:	4798      	blx	r3
    abb8:	4603      	mov	r3, r0
    abba:	071b      	lsls	r3, r3, #28
    abbc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    abc0:	432b      	orrs	r3, r5
    abc2:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    abc4:	7efb      	ldrb	r3, [r7, #27]
    abc6:	2200      	movs	r2, #0
    abc8:	2101      	movs	r1, #1
    abca:	4618      	mov	r0, r3
    abcc:	4b27      	ldr	r3, [pc, #156]	; (ac6c <_usb_d_dev_ep_enable+0x210>)
    abce:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    abd0:	7efb      	ldrb	r3, [r7, #27]
    abd2:	2101      	movs	r1, #1
    abd4:	4618      	mov	r0, r3
    abd6:	4b26      	ldr	r3, [pc, #152]	; (ac70 <_usb_d_dev_ep_enable+0x214>)
    abd8:	4798      	blx	r3
    abda:	e033      	b.n	ac44 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    abdc:	7cfb      	ldrb	r3, [r7, #19]
    abde:	f003 0307 	and.w	r3, r3, #7
    abe2:	2b00      	cmp	r3, #0
    abe4:	d002      	beq.n	abec <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    abe6:	f06f 0313 	mvn.w	r3, #19
    abea:	e02c      	b.n	ac46 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    abec:	697b      	ldr	r3, [r7, #20]
    abee:	7cdb      	ldrb	r3, [r3, #19]
    abf0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    abf4:	b2db      	uxtb	r3, r3
    abf6:	461a      	mov	r2, r3
    abf8:	7cfb      	ldrb	r3, [r7, #19]
    abfa:	4313      	orrs	r3, r2
    abfc:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    abfe:	7cfa      	ldrb	r2, [r7, #19]
    ac00:	7efb      	ldrb	r3, [r7, #27]
    ac02:	4619      	mov	r1, r3
    ac04:	69f8      	ldr	r0, [r7, #28]
    ac06:	4b15      	ldr	r3, [pc, #84]	; (ac5c <_usb_d_dev_ep_enable+0x200>)
    ac08:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ac0a:	697b      	ldr	r3, [r7, #20]
    ac0c:	8a1b      	ldrh	r3, [r3, #16]
    ac0e:	039b      	lsls	r3, r3, #14
    ac10:	4c13      	ldr	r4, [pc, #76]	; (ac60 <_usb_d_dev_ep_enable+0x204>)
    ac12:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ac14:	697b      	ldr	r3, [r7, #20]
    ac16:	8a1b      	ldrh	r3, [r3, #16]
    ac18:	4618      	mov	r0, r3
    ac1a:	4b12      	ldr	r3, [pc, #72]	; (ac64 <_usb_d_dev_ep_enable+0x208>)
    ac1c:	4798      	blx	r3
    ac1e:	4603      	mov	r3, r0
    ac20:	071b      	lsls	r3, r3, #28
    ac22:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ac26:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ac2a:	68fb      	ldr	r3, [r7, #12]
    ac2c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ac2e:	7efb      	ldrb	r3, [r7, #27]
    ac30:	2200      	movs	r2, #0
    ac32:	2100      	movs	r1, #0
    ac34:	4618      	mov	r0, r3
    ac36:	4b0c      	ldr	r3, [pc, #48]	; (ac68 <_usb_d_dev_ep_enable+0x20c>)
    ac38:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    ac3a:	7efb      	ldrb	r3, [r7, #27]
    ac3c:	2100      	movs	r1, #0
    ac3e:	4618      	mov	r0, r3
    ac40:	4b0b      	ldr	r3, [pc, #44]	; (ac70 <_usb_d_dev_ep_enable+0x214>)
    ac42:	4798      	blx	r3
	}

	return USB_OK;
    ac44:	2300      	movs	r3, #0
}
    ac46:	4618      	mov	r0, r3
    ac48:	3720      	adds	r7, #32
    ac4a:	46bd      	mov	sp, r7
    ac4c:	bdb0      	pop	{r4, r5, r7, pc}
    ac4e:	bf00      	nop
    ac50:	00009875 	.word	0x00009875
    ac54:	00008efb 	.word	0x00008efb
    ac58:	20000c5c 	.word	0x20000c5c
    ac5c:	00008ed1 	.word	0x00008ed1
    ac60:	0fffc000 	.word	0x0fffc000
    ac64:	00009811 	.word	0x00009811
    ac68:	000097b9 	.word	0x000097b9
    ac6c:	00009761 	.word	0x00009761
    ac70:	00009729 	.word	0x00009729
    ac74:	0000a7cd 	.word	0x0000a7cd

0000ac78 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    ac78:	b580      	push	{r7, lr}
    ac7a:	b084      	sub	sp, #16
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	6078      	str	r0, [r7, #4]
    ac80:	460b      	mov	r3, r1
    ac82:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	7c9b      	ldrb	r3, [r3, #18]
    ac88:	f003 030f 	and.w	r3, r3, #15
    ac8c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    ac8e:	78fa      	ldrb	r2, [r7, #3]
    ac90:	7bfb      	ldrb	r3, [r7, #15]
    ac92:	4611      	mov	r1, r2
    ac94:	4618      	mov	r0, r3
    ac96:	4b03      	ldr	r3, [pc, #12]	; (aca4 <_usb_d_dev_ep_stall_get+0x2c>)
    ac98:	4798      	blx	r3
    ac9a:	4603      	mov	r3, r0
}
    ac9c:	4618      	mov	r0, r3
    ac9e:	3710      	adds	r7, #16
    aca0:	46bd      	mov	sp, r7
    aca2:	bd80      	pop	{r7, pc}
    aca4:	00009369 	.word	0x00009369

0000aca8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    aca8:	b580      	push	{r7, lr}
    acaa:	b084      	sub	sp, #16
    acac:	af00      	add	r7, sp, #0
    acae:	6078      	str	r0, [r7, #4]
    acb0:	460b      	mov	r3, r1
    acb2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    acb4:	687b      	ldr	r3, [r7, #4]
    acb6:	7c9b      	ldrb	r3, [r3, #18]
    acb8:	f003 030f 	and.w	r3, r3, #15
    acbc:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    acbe:	78f9      	ldrb	r1, [r7, #3]
    acc0:	7bfb      	ldrb	r3, [r7, #15]
    acc2:	2201      	movs	r2, #1
    acc4:	4618      	mov	r0, r3
    acc6:	4b0a      	ldr	r3, [pc, #40]	; (acf0 <_usb_d_dev_ep_stall_set+0x48>)
    acc8:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    acca:	78fb      	ldrb	r3, [r7, #3]
    accc:	2220      	movs	r2, #32
    acce:	409a      	lsls	r2, r3
    acd0:	7bfb      	ldrb	r3, [r7, #15]
    acd2:	4611      	mov	r1, r2
    acd4:	4618      	mov	r0, r3
    acd6:	4b07      	ldr	r3, [pc, #28]	; (acf4 <_usb_d_dev_ep_stall_set+0x4c>)
    acd8:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    acda:	687a      	ldr	r2, [r7, #4]
    acdc:	7cd3      	ldrb	r3, [r2, #19]
    acde:	f043 0308 	orr.w	r3, r3, #8
    ace2:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    ace4:	2300      	movs	r3, #0
}
    ace6:	4618      	mov	r0, r3
    ace8:	3710      	adds	r7, #16
    acea:	46bd      	mov	sp, r7
    acec:	bd80      	pop	{r7, pc}
    acee:	bf00      	nop
    acf0:	00009311 	.word	0x00009311
    acf4:	00009291 	.word	0x00009291

0000acf8 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    acf8:	b580      	push	{r7, lr}
    acfa:	b084      	sub	sp, #16
    acfc:	af00      	add	r7, sp, #0
    acfe:	6078      	str	r0, [r7, #4]
    ad00:	460b      	mov	r3, r1
    ad02:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	7c9b      	ldrb	r3, [r3, #18]
    ad08:	f003 030f 	and.w	r3, r3, #15
    ad0c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    ad0e:	78fa      	ldrb	r2, [r7, #3]
    ad10:	7bfb      	ldrb	r3, [r7, #15]
    ad12:	4611      	mov	r1, r2
    ad14:	4618      	mov	r0, r3
    ad16:	4b28      	ldr	r3, [pc, #160]	; (adb8 <_usb_d_dev_ep_stall_clr+0xc0>)
    ad18:	4798      	blx	r3
    ad1a:	4603      	mov	r3, r0
    ad1c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    ad1e:	7bbb      	ldrb	r3, [r7, #14]
    ad20:	f083 0301 	eor.w	r3, r3, #1
    ad24:	b2db      	uxtb	r3, r3
    ad26:	2b00      	cmp	r3, #0
    ad28:	d001      	beq.n	ad2e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    ad2a:	2300      	movs	r3, #0
    ad2c:	e040      	b.n	adb0 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    ad2e:	78f9      	ldrb	r1, [r7, #3]
    ad30:	7bfb      	ldrb	r3, [r7, #15]
    ad32:	2200      	movs	r2, #0
    ad34:	4618      	mov	r0, r3
    ad36:	4b21      	ldr	r3, [pc, #132]	; (adbc <_usb_d_dev_ep_stall_clr+0xc4>)
    ad38:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ad3a:	78fb      	ldrb	r3, [r7, #3]
    ad3c:	2220      	movs	r2, #32
    ad3e:	409a      	lsls	r2, r3
    ad40:	7bfb      	ldrb	r3, [r7, #15]
    ad42:	4611      	mov	r1, r2
    ad44:	4618      	mov	r0, r3
    ad46:	4b1e      	ldr	r3, [pc, #120]	; (adc0 <_usb_d_dev_ep_stall_clr+0xc8>)
    ad48:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ad4a:	78fa      	ldrb	r2, [r7, #3]
    ad4c:	7bfb      	ldrb	r3, [r7, #15]
    ad4e:	4611      	mov	r1, r2
    ad50:	4618      	mov	r0, r3
    ad52:	4b1c      	ldr	r3, [pc, #112]	; (adc4 <_usb_d_dev_ep_stall_clr+0xcc>)
    ad54:	4798      	blx	r3
    ad56:	4603      	mov	r3, r0
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d00b      	beq.n	ad74 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    ad5c:	78fa      	ldrb	r2, [r7, #3]
    ad5e:	7bfb      	ldrb	r3, [r7, #15]
    ad60:	4611      	mov	r1, r2
    ad62:	4618      	mov	r0, r3
    ad64:	4b18      	ldr	r3, [pc, #96]	; (adc8 <_usb_d_dev_ep_stall_clr+0xd0>)
    ad66:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    ad68:	78f9      	ldrb	r1, [r7, #3]
    ad6a:	7bfb      	ldrb	r3, [r7, #15]
    ad6c:	2200      	movs	r2, #0
    ad6e:	4618      	mov	r0, r3
    ad70:	4b16      	ldr	r3, [pc, #88]	; (adcc <_usb_d_dev_ep_stall_clr+0xd4>)
    ad72:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ad74:	687b      	ldr	r3, [r7, #4]
    ad76:	7cdb      	ldrb	r3, [r3, #19]
    ad78:	f003 0307 	and.w	r3, r3, #7
    ad7c:	b2db      	uxtb	r3, r3
    ad7e:	2b01      	cmp	r3, #1
    ad80:	d110      	bne.n	ada4 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    ad82:	7bfb      	ldrb	r3, [r7, #15]
    ad84:	4619      	mov	r1, r3
    ad86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad8a:	4b11      	ldr	r3, [pc, #68]	; (add0 <_usb_d_dev_ep_stall_clr+0xd8>)
    ad8c:	4798      	blx	r3
    ad8e:	4603      	mov	r3, r0
    ad90:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ad94:	2b00      	cmp	r3, #0
    ad96:	d10a      	bne.n	adae <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    ad98:	687a      	ldr	r2, [r7, #4]
    ad9a:	7cd3      	ldrb	r3, [r2, #19]
    ad9c:	f36f 03c3 	bfc	r3, #3, #1
    ada0:	74d3      	strb	r3, [r2, #19]
    ada2:	e004      	b.n	adae <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    ada4:	687a      	ldr	r2, [r7, #4]
    ada6:	7cd3      	ldrb	r3, [r2, #19]
    ada8:	f36f 03c3 	bfc	r3, #3, #1
    adac:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    adae:	2300      	movs	r3, #0
}
    adb0:	4618      	mov	r0, r3
    adb2:	3710      	adds	r7, #16
    adb4:	46bd      	mov	sp, r7
    adb6:	bd80      	pop	{r7, pc}
    adb8:	00009369 	.word	0x00009369
    adbc:	00009311 	.word	0x00009311
    adc0:	000092b9 	.word	0x000092b9
    adc4:	000093ad 	.word	0x000093ad
    adc8:	000093f1 	.word	0x000093f1
    adcc:	000094dd 	.word	0x000094dd
    add0:	00008d99 	.word	0x00008d99

0000add4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    add4:	b580      	push	{r7, lr}
    add6:	b086      	sub	sp, #24
    add8:	af00      	add	r7, sp, #0
    adda:	4603      	mov	r3, r0
    addc:	460a      	mov	r2, r1
    adde:	71fb      	strb	r3, [r7, #7]
    ade0:	4613      	mov	r3, r2
    ade2:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    ade4:	79fb      	ldrb	r3, [r7, #7]
    ade6:	f003 030f 	and.w	r3, r3, #15
    adea:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    adec:	79fb      	ldrb	r3, [r7, #7]
    adee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    adf2:	2b00      	cmp	r3, #0
    adf4:	bf14      	ite	ne
    adf6:	2301      	movne	r3, #1
    adf8:	2300      	moveq	r3, #0
    adfa:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    adfc:	7cba      	ldrb	r2, [r7, #18]
    adfe:	7cfb      	ldrb	r3, [r7, #19]
    ae00:	4611      	mov	r1, r2
    ae02:	4618      	mov	r0, r3
    ae04:	4b13      	ldr	r3, [pc, #76]	; (ae54 <_usb_d_dev_ep_stall+0x80>)
    ae06:	4798      	blx	r3
    ae08:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ae0a:	7cfb      	ldrb	r3, [r7, #19]
    ae0c:	2b04      	cmp	r3, #4
    ae0e:	d902      	bls.n	ae16 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    ae10:	f06f 0311 	mvn.w	r3, #17
    ae14:	e01a      	b.n	ae4c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    ae16:	79bb      	ldrb	r3, [r7, #6]
    ae18:	2b01      	cmp	r3, #1
    ae1a:	d106      	bne.n	ae2a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    ae1c:	7cbb      	ldrb	r3, [r7, #18]
    ae1e:	4619      	mov	r1, r3
    ae20:	68f8      	ldr	r0, [r7, #12]
    ae22:	4b0d      	ldr	r3, [pc, #52]	; (ae58 <_usb_d_dev_ep_stall+0x84>)
    ae24:	4798      	blx	r3
    ae26:	6178      	str	r0, [r7, #20]
    ae28:	e00f      	b.n	ae4a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    ae2a:	79bb      	ldrb	r3, [r7, #6]
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d106      	bne.n	ae3e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ae30:	7cbb      	ldrb	r3, [r7, #18]
    ae32:	4619      	mov	r1, r3
    ae34:	68f8      	ldr	r0, [r7, #12]
    ae36:	4b09      	ldr	r3, [pc, #36]	; (ae5c <_usb_d_dev_ep_stall+0x88>)
    ae38:	4798      	blx	r3
    ae3a:	6178      	str	r0, [r7, #20]
    ae3c:	e005      	b.n	ae4a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    ae3e:	7cbb      	ldrb	r3, [r7, #18]
    ae40:	4619      	mov	r1, r3
    ae42:	68f8      	ldr	r0, [r7, #12]
    ae44:	4b06      	ldr	r3, [pc, #24]	; (ae60 <_usb_d_dev_ep_stall+0x8c>)
    ae46:	4798      	blx	r3
    ae48:	6178      	str	r0, [r7, #20]
	}
	return rc;
    ae4a:	697b      	ldr	r3, [r7, #20]
}
    ae4c:	4618      	mov	r0, r3
    ae4e:	3718      	adds	r7, #24
    ae50:	46bd      	mov	sp, r7
    ae52:	bd80      	pop	{r7, pc}
    ae54:	00009875 	.word	0x00009875
    ae58:	0000aca9 	.word	0x0000aca9
    ae5c:	0000acf9 	.word	0x0000acf9
    ae60:	0000ac79 	.word	0x0000ac79

0000ae64 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ae64:	b580      	push	{r7, lr}
    ae66:	b082      	sub	sp, #8
    ae68:	af00      	add	r7, sp, #0
    ae6a:	6078      	str	r0, [r7, #4]
    ae6c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ae6e:	687b      	ldr	r3, [r7, #4]
    ae70:	7c9b      	ldrb	r3, [r3, #18]
    ae72:	2bff      	cmp	r3, #255	; 0xff
    ae74:	d014      	beq.n	aea0 <_usb_d_dev_trans_done+0x3c>
    ae76:	687b      	ldr	r3, [r7, #4]
    ae78:	7cdb      	ldrb	r3, [r3, #19]
    ae7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ae7e:	b2db      	uxtb	r3, r3
    ae80:	2b00      	cmp	r3, #0
    ae82:	d00d      	beq.n	aea0 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    ae84:	687a      	ldr	r2, [r7, #4]
    ae86:	7cd3      	ldrb	r3, [r2, #19]
    ae88:	f36f 1386 	bfc	r3, #6, #1
    ae8c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ae8e:	4b06      	ldr	r3, [pc, #24]	; (aea8 <_usb_d_dev_trans_done+0x44>)
    ae90:	691b      	ldr	r3, [r3, #16]
    ae92:	687a      	ldr	r2, [r7, #4]
    ae94:	7c90      	ldrb	r0, [r2, #18]
    ae96:	687a      	ldr	r2, [r7, #4]
    ae98:	6892      	ldr	r2, [r2, #8]
    ae9a:	6839      	ldr	r1, [r7, #0]
    ae9c:	4798      	blx	r3
    ae9e:	e000      	b.n	aea2 <_usb_d_dev_trans_done+0x3e>
		return;
    aea0:	bf00      	nop
}
    aea2:	3708      	adds	r7, #8
    aea4:	46bd      	mov	sp, r7
    aea6:	bd80      	pop	{r7, pc}
    aea8:	20000b94 	.word	0x20000b94

0000aeac <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    aeac:	b580      	push	{r7, lr}
    aeae:	b086      	sub	sp, #24
    aeb0:	af00      	add	r7, sp, #0
    aeb2:	60f8      	str	r0, [r7, #12]
    aeb4:	460b      	mov	r3, r1
    aeb6:	607a      	str	r2, [r7, #4]
    aeb8:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aeba:	68fb      	ldr	r3, [r7, #12]
    aebc:	7c9b      	ldrb	r3, [r3, #18]
    aebe:	f003 030f 	and.w	r3, r3, #15
    aec2:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    aec4:	4b1f      	ldr	r3, [pc, #124]	; (af44 <_usb_d_dev_trans_stop+0x98>)
    aec6:	881b      	ldrh	r3, [r3, #0]
    aec8:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    aeca:	68fb      	ldr	r3, [r7, #12]
    aecc:	7c9b      	ldrb	r3, [r3, #18]
    aece:	2bff      	cmp	r3, #255	; 0xff
    aed0:	d033      	beq.n	af3a <_usb_d_dev_trans_stop+0x8e>
    aed2:	68fb      	ldr	r3, [r7, #12]
    aed4:	7cdb      	ldrb	r3, [r3, #19]
    aed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aeda:	b2db      	uxtb	r3, r3
    aedc:	2b00      	cmp	r3, #0
    aede:	d02c      	beq.n	af3a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    aee0:	7afb      	ldrb	r3, [r7, #11]
    aee2:	2b00      	cmp	r3, #0
    aee4:	d006      	beq.n	aef4 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aee6:	7dfb      	ldrb	r3, [r7, #23]
    aee8:	2200      	movs	r2, #0
    aeea:	2101      	movs	r1, #1
    aeec:	4618      	mov	r0, r3
    aeee:	4b16      	ldr	r3, [pc, #88]	; (af48 <_usb_d_dev_trans_stop+0x9c>)
    aef0:	4798      	blx	r3
    aef2:	e005      	b.n	af00 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aef4:	7dfb      	ldrb	r3, [r7, #23]
    aef6:	2200      	movs	r2, #0
    aef8:	2100      	movs	r1, #0
    aefa:	4618      	mov	r0, r3
    aefc:	4b13      	ldr	r3, [pc, #76]	; (af4c <_usb_d_dev_trans_stop+0xa0>)
    aefe:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    af00:	7afb      	ldrb	r3, [r7, #11]
    af02:	f107 0218 	add.w	r2, r7, #24
    af06:	4413      	add	r3, r2
    af08:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    af0c:	461a      	mov	r2, r3
    af0e:	7dfb      	ldrb	r3, [r7, #23]
    af10:	4611      	mov	r1, r2
    af12:	4618      	mov	r0, r3
    af14:	4b0e      	ldr	r3, [pc, #56]	; (af50 <_usb_d_dev_trans_stop+0xa4>)
    af16:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    af18:	7afb      	ldrb	r3, [r7, #11]
    af1a:	f107 0218 	add.w	r2, r7, #24
    af1e:	4413      	add	r3, r2
    af20:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    af24:	461a      	mov	r2, r3
    af26:	7dfb      	ldrb	r3, [r7, #23]
    af28:	4611      	mov	r1, r2
    af2a:	4618      	mov	r0, r3
    af2c:	4b09      	ldr	r3, [pc, #36]	; (af54 <_usb_d_dev_trans_stop+0xa8>)
    af2e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    af30:	6879      	ldr	r1, [r7, #4]
    af32:	68f8      	ldr	r0, [r7, #12]
    af34:	4b08      	ldr	r3, [pc, #32]	; (af58 <_usb_d_dev_trans_stop+0xac>)
    af36:	4798      	blx	r3
    af38:	e000      	b.n	af3c <_usb_d_dev_trans_stop+0x90>
		return;
    af3a:	bf00      	nop
}
    af3c:	3718      	adds	r7, #24
    af3e:	46bd      	mov	sp, r7
    af40:	bd80      	pop	{r7, pc}
    af42:	bf00      	nop
    af44:	000133f4 	.word	0x000133f4
    af48:	00009761 	.word	0x00009761
    af4c:	000097b9 	.word	0x000097b9
    af50:	00009269 	.word	0x00009269
    af54:	000092b9 	.word	0x000092b9
    af58:	0000ae65 	.word	0x0000ae65

0000af5c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    af5c:	b580      	push	{r7, lr}
    af5e:	b086      	sub	sp, #24
    af60:	af00      	add	r7, sp, #0
    af62:	4603      	mov	r3, r0
    af64:	6039      	str	r1, [r7, #0]
    af66:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    af68:	79fb      	ldrb	r3, [r7, #7]
    af6a:	f003 030f 	and.w	r3, r3, #15
    af6e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    af70:	7dfb      	ldrb	r3, [r7, #23]
    af72:	015b      	lsls	r3, r3, #5
    af74:	4a1e      	ldr	r2, [pc, #120]	; (aff0 <_usb_d_dev_ep_read_req+0x94>)
    af76:	4413      	add	r3, r2
    af78:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    af7a:	693b      	ldr	r3, [r7, #16]
    af7c:	681b      	ldr	r3, [r3, #0]
    af7e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    af80:	693b      	ldr	r3, [r7, #16]
    af82:	685b      	ldr	r3, [r3, #4]
    af84:	f3c3 030d 	ubfx	r3, r3, #0, #14
    af88:	b29b      	uxth	r3, r3
    af8a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    af8c:	7dfb      	ldrb	r3, [r7, #23]
    af8e:	2b04      	cmp	r3, #4
    af90:	d802      	bhi.n	af98 <_usb_d_dev_ep_read_req+0x3c>
    af92:	683b      	ldr	r3, [r7, #0]
    af94:	2b00      	cmp	r3, #0
    af96:	d102      	bne.n	af9e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    af98:	f06f 0311 	mvn.w	r3, #17
    af9c:	e023      	b.n	afe6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    af9e:	7dfb      	ldrb	r3, [r7, #23]
    afa0:	4618      	mov	r0, r3
    afa2:	4b14      	ldr	r3, [pc, #80]	; (aff4 <_usb_d_dev_ep_read_req+0x98>)
    afa4:	4798      	blx	r3
    afa6:	4603      	mov	r3, r0
    afa8:	f083 0301 	eor.w	r3, r3, #1
    afac:	b2db      	uxtb	r3, r3
    afae:	2b00      	cmp	r3, #0
    afb0:	d002      	beq.n	afb8 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    afb2:	f06f 0312 	mvn.w	r3, #18
    afb6:	e016      	b.n	afe6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    afb8:	7dfb      	ldrb	r3, [r7, #23]
    afba:	4618      	mov	r0, r3
    afbc:	4b0e      	ldr	r3, [pc, #56]	; (aff8 <_usb_d_dev_ep_read_req+0x9c>)
    afbe:	4798      	blx	r3
    afc0:	4603      	mov	r3, r0
    afc2:	f083 0301 	eor.w	r3, r3, #1
    afc6:	b2db      	uxtb	r3, r3
    afc8:	2b00      	cmp	r3, #0
    afca:	d001      	beq.n	afd0 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    afcc:	2300      	movs	r3, #0
    afce:	e00a      	b.n	afe6 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    afd0:	68fb      	ldr	r3, [r7, #12]
    afd2:	2208      	movs	r2, #8
    afd4:	4619      	mov	r1, r3
    afd6:	6838      	ldr	r0, [r7, #0]
    afd8:	4b08      	ldr	r3, [pc, #32]	; (affc <_usb_d_dev_ep_read_req+0xa0>)
    afda:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    afdc:	7dfb      	ldrb	r3, [r7, #23]
    afde:	4618      	mov	r0, r3
    afe0:	4b07      	ldr	r3, [pc, #28]	; (b000 <_usb_d_dev_ep_read_req+0xa4>)
    afe2:	4798      	blx	r3

	return bytes;
    afe4:	897b      	ldrh	r3, [r7, #10]
}
    afe6:	4618      	mov	r0, r3
    afe8:	3718      	adds	r7, #24
    afea:	46bd      	mov	sp, r7
    afec:	bd80      	pop	{r7, pc}
    afee:	bf00      	nop
    aff0:	20000c5c 	.word	0x20000c5c
    aff4:	000092e1 	.word	0x000092e1
    aff8:	0000948d 	.word	0x0000948d
    affc:	00012c4d 	.word	0x00012c4d
    b000:	000094bd 	.word	0x000094bd

0000b004 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b004:	b580      	push	{r7, lr}
    b006:	b086      	sub	sp, #24
    b008:	af00      	add	r7, sp, #0
    b00a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b00c:	687b      	ldr	r3, [r7, #4]
    b00e:	7a1b      	ldrb	r3, [r3, #8]
    b010:	f003 030f 	and.w	r3, r3, #15
    b014:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b016:	687b      	ldr	r3, [r7, #4]
    b018:	7a1b      	ldrb	r3, [r3, #8]
    b01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b01e:	2b00      	cmp	r3, #0
    b020:	bf14      	ite	ne
    b022:	2301      	movne	r3, #1
    b024:	2300      	moveq	r3, #0
    b026:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b028:	7d7a      	ldrb	r2, [r7, #21]
    b02a:	7dbb      	ldrb	r3, [r7, #22]
    b02c:	4611      	mov	r1, r2
    b02e:	4618      	mov	r0, r3
    b030:	4b5f      	ldr	r3, [pc, #380]	; (b1b0 <_usb_d_dev_ep_trans+0x1ac>)
    b032:	4798      	blx	r3
    b034:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b036:	693b      	ldr	r3, [r7, #16]
    b038:	8a1b      	ldrh	r3, [r3, #16]
    b03a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b03e:	4293      	cmp	r3, r2
    b040:	d004      	beq.n	b04c <_usb_d_dev_ep_trans+0x48>
    b042:	693b      	ldr	r3, [r7, #16]
    b044:	8a1b      	ldrh	r3, [r3, #16]
    b046:	3b01      	subs	r3, #1
    b048:	b29b      	uxth	r3, r3
    b04a:	e001      	b.n	b050 <_usb_d_dev_ep_trans+0x4c>
    b04c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b050:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b052:	687b      	ldr	r3, [r7, #4]
    b054:	685a      	ldr	r2, [r3, #4]
    b056:	89fb      	ldrh	r3, [r7, #14]
    b058:	4013      	ands	r3, r2
    b05a:	2b00      	cmp	r3, #0
    b05c:	bf14      	ite	ne
    b05e:	2301      	movne	r3, #1
    b060:	2300      	moveq	r3, #0
    b062:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b064:	2300      	movs	r3, #0
    b066:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b068:	7dbb      	ldrb	r3, [r7, #22]
    b06a:	2b04      	cmp	r3, #4
    b06c:	d902      	bls.n	b074 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b06e:	f06f 0311 	mvn.w	r3, #17
    b072:	e098      	b.n	b1a6 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b074:	687b      	ldr	r3, [r7, #4]
    b076:	681b      	ldr	r3, [r3, #0]
    b078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b07c:	d31a      	bcc.n	b0b4 <_usb_d_dev_ep_trans+0xb0>
    b07e:	687b      	ldr	r3, [r7, #4]
    b080:	681b      	ldr	r3, [r3, #0]
    b082:	461a      	mov	r2, r3
    b084:	687b      	ldr	r3, [r7, #4]
    b086:	685b      	ldr	r3, [r3, #4]
    b088:	4413      	add	r3, r2
    b08a:	4a4a      	ldr	r2, [pc, #296]	; (b1b4 <_usb_d_dev_ep_trans+0x1b0>)
    b08c:	4293      	cmp	r3, r2
    b08e:	d811      	bhi.n	b0b4 <_usb_d_dev_ep_trans+0xb0>
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	681b      	ldr	r3, [r3, #0]
    b094:	f003 0303 	and.w	r3, r3, #3
    b098:	2b00      	cmp	r3, #0
    b09a:	d10b      	bne.n	b0b4 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b09c:	7d7b      	ldrb	r3, [r7, #21]
    b09e:	f083 0301 	eor.w	r3, r3, #1
    b0a2:	b2db      	uxtb	r3, r3
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d00e      	beq.n	b0c6 <_usb_d_dev_ep_trans+0xc2>
    b0a8:	687b      	ldr	r3, [r7, #4]
    b0aa:	685b      	ldr	r3, [r3, #4]
    b0ac:	693a      	ldr	r2, [r7, #16]
    b0ae:	8a12      	ldrh	r2, [r2, #16]
    b0b0:	4293      	cmp	r3, r2
    b0b2:	d208      	bcs.n	b0c6 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b0b4:	693b      	ldr	r3, [r7, #16]
    b0b6:	68db      	ldr	r3, [r3, #12]
    b0b8:	2b00      	cmp	r3, #0
    b0ba:	d102      	bne.n	b0c2 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b0bc:	f06f 0312 	mvn.w	r3, #18
    b0c0:	e071      	b.n	b1a6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b0c2:	2301      	movs	r3, #1
    b0c4:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b0c6:	7d7b      	ldrb	r3, [r7, #21]
    b0c8:	f083 0301 	eor.w	r3, r3, #1
    b0cc:	b2db      	uxtb	r3, r3
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d009      	beq.n	b0e6 <_usb_d_dev_ep_trans+0xe2>
    b0d2:	7b7b      	ldrb	r3, [r7, #13]
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d006      	beq.n	b0e6 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b0d8:	693b      	ldr	r3, [r7, #16]
    b0da:	68db      	ldr	r3, [r3, #12]
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d102      	bne.n	b0e6 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b0e0:	f06f 0311 	mvn.w	r3, #17
    b0e4:	e05f      	b.n	b1a6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b0e6:	693b      	ldr	r3, [r7, #16]
    b0e8:	7cdb      	ldrb	r3, [r3, #19]
    b0ea:	f003 0308 	and.w	r3, r3, #8
    b0ee:	b2db      	uxtb	r3, r3
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d001      	beq.n	b0f8 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b0f4:	2302      	movs	r3, #2
    b0f6:	e056      	b.n	b1a6 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b0f8:	f107 0308 	add.w	r3, r7, #8
    b0fc:	4618      	mov	r0, r3
    b0fe:	4b2e      	ldr	r3, [pc, #184]	; (b1b8 <_usb_d_dev_ep_trans+0x1b4>)
    b100:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b102:	693b      	ldr	r3, [r7, #16]
    b104:	7cdb      	ldrb	r3, [r3, #19]
    b106:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b10a:	b2db      	uxtb	r3, r3
    b10c:	2b00      	cmp	r3, #0
    b10e:	d006      	beq.n	b11e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b110:	f107 0308 	add.w	r3, r7, #8
    b114:	4618      	mov	r0, r3
    b116:	4b29      	ldr	r3, [pc, #164]	; (b1bc <_usb_d_dev_ep_trans+0x1b8>)
    b118:	4798      	blx	r3
		return USB_BUSY;
    b11a:	2301      	movs	r3, #1
    b11c:	e043      	b.n	b1a6 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b11e:	693a      	ldr	r2, [r7, #16]
    b120:	7cd3      	ldrb	r3, [r2, #19]
    b122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b126:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b128:	f107 0308 	add.w	r3, r7, #8
    b12c:	4618      	mov	r0, r3
    b12e:	4b23      	ldr	r3, [pc, #140]	; (b1bc <_usb_d_dev_ep_trans+0x1b8>)
    b130:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b132:	687b      	ldr	r3, [r7, #4]
    b134:	681a      	ldr	r2, [r3, #0]
    b136:	693b      	ldr	r3, [r7, #16]
    b138:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b13a:	687b      	ldr	r3, [r7, #4]
    b13c:	685a      	ldr	r2, [r3, #4]
    b13e:	693b      	ldr	r3, [r7, #16]
    b140:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b142:	693b      	ldr	r3, [r7, #16]
    b144:	2200      	movs	r2, #0
    b146:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b148:	693a      	ldr	r2, [r7, #16]
    b14a:	7cd3      	ldrb	r3, [r2, #19]
    b14c:	7d79      	ldrb	r1, [r7, #21]
    b14e:	f361 13c7 	bfi	r3, r1, #7, #1
    b152:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b154:	693a      	ldr	r2, [r7, #16]
    b156:	7cd3      	ldrb	r3, [r2, #19]
    b158:	7df9      	ldrb	r1, [r7, #23]
    b15a:	f361 1345 	bfi	r3, r1, #5, #1
    b15e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	7a5b      	ldrb	r3, [r3, #9]
    b164:	2b00      	cmp	r3, #0
    b166:	d007      	beq.n	b178 <_usb_d_dev_ep_trans+0x174>
    b168:	7b7b      	ldrb	r3, [r7, #13]
    b16a:	f083 0301 	eor.w	r3, r3, #1
    b16e:	b2db      	uxtb	r3, r3
    b170:	2b00      	cmp	r3, #0
    b172:	d001      	beq.n	b178 <_usb_d_dev_ep_trans+0x174>
    b174:	2301      	movs	r3, #1
    b176:	e000      	b.n	b17a <_usb_d_dev_ep_trans+0x176>
    b178:	2300      	movs	r3, #0
    b17a:	b2db      	uxtb	r3, r3
    b17c:	f003 0301 	and.w	r3, r3, #1
    b180:	b2d9      	uxtb	r1, r3
    b182:	693a      	ldr	r2, [r7, #16]
    b184:	7cd3      	ldrb	r3, [r2, #19]
    b186:	f361 1304 	bfi	r3, r1, #4, #1
    b18a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b18c:	7d7b      	ldrb	r3, [r7, #21]
    b18e:	2b00      	cmp	r3, #0
    b190:	d004      	beq.n	b19c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b192:	2100      	movs	r1, #0
    b194:	6938      	ldr	r0, [r7, #16]
    b196:	4b0a      	ldr	r3, [pc, #40]	; (b1c0 <_usb_d_dev_ep_trans+0x1bc>)
    b198:	4798      	blx	r3
    b19a:	e003      	b.n	b1a4 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b19c:	2100      	movs	r1, #0
    b19e:	6938      	ldr	r0, [r7, #16]
    b1a0:	4b08      	ldr	r3, [pc, #32]	; (b1c4 <_usb_d_dev_ep_trans+0x1c0>)
    b1a2:	4798      	blx	r3
	}

	return ERR_NONE;
    b1a4:	2300      	movs	r3, #0
}
    b1a6:	4618      	mov	r0, r3
    b1a8:	3718      	adds	r7, #24
    b1aa:	46bd      	mov	sp, r7
    b1ac:	bd80      	pop	{r7, pc}
    b1ae:	bf00      	nop
    b1b0:	00009875 	.word	0x00009875
    b1b4:	20041fff 	.word	0x20041fff
    b1b8:	0000b9d1 	.word	0x0000b9d1
    b1bc:	0000b9f7 	.word	0x0000b9f7
    b1c0:	00009b3d 	.word	0x00009b3d
    b1c4:	00009d55 	.word	0x00009d55

0000b1c8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b1c8:	b580      	push	{r7, lr}
    b1ca:	b084      	sub	sp, #16
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	4603      	mov	r3, r0
    b1d0:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b1d2:	79fb      	ldrb	r3, [r7, #7]
    b1d4:	f003 030f 	and.w	r3, r3, #15
    b1d8:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b1da:	79fb      	ldrb	r3, [r7, #7]
    b1dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	bf14      	ite	ne
    b1e4:	2301      	movne	r3, #1
    b1e6:	2300      	moveq	r3, #0
    b1e8:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b1ea:	7bba      	ldrb	r2, [r7, #14]
    b1ec:	7bfb      	ldrb	r3, [r7, #15]
    b1ee:	4611      	mov	r1, r2
    b1f0:	4618      	mov	r0, r3
    b1f2:	4b08      	ldr	r3, [pc, #32]	; (b214 <_usb_d_dev_ep_abort+0x4c>)
    b1f4:	4798      	blx	r3
    b1f6:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b1f8:	7bfb      	ldrb	r3, [r7, #15]
    b1fa:	2b04      	cmp	r3, #4
    b1fc:	d806      	bhi.n	b20c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b1fe:	7bbb      	ldrb	r3, [r7, #14]
    b200:	2202      	movs	r2, #2
    b202:	4619      	mov	r1, r3
    b204:	68b8      	ldr	r0, [r7, #8]
    b206:	4b04      	ldr	r3, [pc, #16]	; (b218 <_usb_d_dev_ep_abort+0x50>)
    b208:	4798      	blx	r3
    b20a:	e000      	b.n	b20e <_usb_d_dev_ep_abort+0x46>
		return;
    b20c:	bf00      	nop
}
    b20e:	3710      	adds	r7, #16
    b210:	46bd      	mov	sp, r7
    b212:	bd80      	pop	{r7, pc}
    b214:	00009875 	.word	0x00009875
    b218:	0000aead 	.word	0x0000aead

0000b21c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b21c:	b480      	push	{r7}
    b21e:	b085      	sub	sp, #20
    b220:	af00      	add	r7, sp, #0
    b222:	4603      	mov	r3, r0
    b224:	6039      	str	r1, [r7, #0]
    b226:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b228:	683b      	ldr	r3, [r7, #0]
    b22a:	2b00      	cmp	r3, #0
    b22c:	d001      	beq.n	b232 <_usb_d_dev_register_callback+0x16>
    b22e:	683b      	ldr	r3, [r7, #0]
    b230:	e000      	b.n	b234 <_usb_d_dev_register_callback+0x18>
    b232:	4b0a      	ldr	r3, [pc, #40]	; (b25c <_usb_d_dev_register_callback+0x40>)
    b234:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b236:	79fb      	ldrb	r3, [r7, #7]
    b238:	2b01      	cmp	r3, #1
    b23a:	d103      	bne.n	b244 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b23c:	4a08      	ldr	r2, [pc, #32]	; (b260 <_usb_d_dev_register_callback+0x44>)
    b23e:	68fb      	ldr	r3, [r7, #12]
    b240:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b242:	e005      	b.n	b250 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b244:	79fb      	ldrb	r3, [r7, #7]
    b246:	2b00      	cmp	r3, #0
    b248:	d102      	bne.n	b250 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b24a:	4a05      	ldr	r2, [pc, #20]	; (b260 <_usb_d_dev_register_callback+0x44>)
    b24c:	68fb      	ldr	r3, [r7, #12]
    b24e:	6013      	str	r3, [r2, #0]
}
    b250:	bf00      	nop
    b252:	3714      	adds	r7, #20
    b254:	46bd      	mov	sp, r7
    b256:	f85d 7b04 	ldr.w	r7, [sp], #4
    b25a:	4770      	bx	lr
    b25c:	000090fd 	.word	0x000090fd
    b260:	20000b94 	.word	0x20000b94

0000b264 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b264:	b480      	push	{r7}
    b266:	b085      	sub	sp, #20
    b268:	af00      	add	r7, sp, #0
    b26a:	4603      	mov	r3, r0
    b26c:	6039      	str	r1, [r7, #0]
    b26e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b270:	683b      	ldr	r3, [r7, #0]
    b272:	2b00      	cmp	r3, #0
    b274:	d001      	beq.n	b27a <_usb_d_dev_register_ep_callback+0x16>
    b276:	683b      	ldr	r3, [r7, #0]
    b278:	e000      	b.n	b27c <_usb_d_dev_register_ep_callback+0x18>
    b27a:	4b0e      	ldr	r3, [pc, #56]	; (b2b4 <_usb_d_dev_register_ep_callback+0x50>)
    b27c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b27e:	79fb      	ldrb	r3, [r7, #7]
    b280:	2b00      	cmp	r3, #0
    b282:	d103      	bne.n	b28c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b284:	4a0c      	ldr	r2, [pc, #48]	; (b2b8 <_usb_d_dev_register_ep_callback+0x54>)
    b286:	68fb      	ldr	r3, [r7, #12]
    b288:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b28a:	e00c      	b.n	b2a6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b28c:	79fb      	ldrb	r3, [r7, #7]
    b28e:	2b01      	cmp	r3, #1
    b290:	d103      	bne.n	b29a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b292:	4a09      	ldr	r2, [pc, #36]	; (b2b8 <_usb_d_dev_register_ep_callback+0x54>)
    b294:	68fb      	ldr	r3, [r7, #12]
    b296:	60d3      	str	r3, [r2, #12]
}
    b298:	e005      	b.n	b2a6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b29a:	79fb      	ldrb	r3, [r7, #7]
    b29c:	2b02      	cmp	r3, #2
    b29e:	d102      	bne.n	b2a6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b2a0:	4a05      	ldr	r2, [pc, #20]	; (b2b8 <_usb_d_dev_register_ep_callback+0x54>)
    b2a2:	68fb      	ldr	r3, [r7, #12]
    b2a4:	6113      	str	r3, [r2, #16]
}
    b2a6:	bf00      	nop
    b2a8:	3714      	adds	r7, #20
    b2aa:	46bd      	mov	sp, r7
    b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2b0:	4770      	bx	lr
    b2b2:	bf00      	nop
    b2b4:	000090fd 	.word	0x000090fd
    b2b8:	20000b94 	.word	0x20000b94

0000b2bc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b2bc:	b580      	push	{r7, lr}
    b2be:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b2c0:	4b01      	ldr	r3, [pc, #4]	; (b2c8 <USB_0_Handler+0xc>)
    b2c2:	4798      	blx	r3
}
    b2c4:	bf00      	nop
    b2c6:	bd80      	pop	{r7, pc}
    b2c8:	0000a52d 	.word	0x0000a52d

0000b2cc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b2cc:	b580      	push	{r7, lr}
    b2ce:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b2d0:	4b01      	ldr	r3, [pc, #4]	; (b2d8 <USB_1_Handler+0xc>)
    b2d2:	4798      	blx	r3
}
    b2d4:	bf00      	nop
    b2d6:	bd80      	pop	{r7, pc}
    b2d8:	0000a52d 	.word	0x0000a52d

0000b2dc <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b2dc:	b580      	push	{r7, lr}
    b2de:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b2e0:	4b01      	ldr	r3, [pc, #4]	; (b2e8 <USB_2_Handler+0xc>)
    b2e2:	4798      	blx	r3
}
    b2e4:	bf00      	nop
    b2e6:	bd80      	pop	{r7, pc}
    b2e8:	0000a52d 	.word	0x0000a52d

0000b2ec <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b2ec:	b580      	push	{r7, lr}
    b2ee:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b2f0:	4b01      	ldr	r3, [pc, #4]	; (b2f8 <USB_3_Handler+0xc>)
    b2f2:	4798      	blx	r3
}
    b2f4:	bf00      	nop
    b2f6:	bd80      	pop	{r7, pc}
    b2f8:	0000a52d 	.word	0x0000a52d

0000b2fc <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b2fc:	b480      	push	{r7}
    b2fe:	b083      	sub	sp, #12
    b300:	af00      	add	r7, sp, #0
    b302:	6078      	str	r0, [r7, #4]
    b304:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b306:	bf00      	nop
    b308:	687b      	ldr	r3, [r7, #4]
    b30a:	689a      	ldr	r2, [r3, #8]
    b30c:	683b      	ldr	r3, [r7, #0]
    b30e:	4013      	ands	r3, r2
    b310:	2b00      	cmp	r3, #0
    b312:	d1f9      	bne.n	b308 <hri_wdt_wait_for_sync+0xc>
	};
}
    b314:	bf00      	nop
    b316:	370c      	adds	r7, #12
    b318:	46bd      	mov	sp, r7
    b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b31e:	4770      	bx	lr

0000b320 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b320:	b580      	push	{r7, lr}
    b322:	b084      	sub	sp, #16
    b324:	af00      	add	r7, sp, #0
    b326:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b328:	210e      	movs	r1, #14
    b32a:	6878      	ldr	r0, [r7, #4]
    b32c:	4b0a      	ldr	r3, [pc, #40]	; (b358 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b32e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b330:	687b      	ldr	r3, [r7, #4]
    b332:	781b      	ldrb	r3, [r3, #0]
    b334:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b336:	7bfb      	ldrb	r3, [r7, #15]
    b338:	085b      	lsrs	r3, r3, #1
    b33a:	b2db      	uxtb	r3, r3
    b33c:	f003 0301 	and.w	r3, r3, #1
    b340:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b342:	7bfb      	ldrb	r3, [r7, #15]
    b344:	2b00      	cmp	r3, #0
    b346:	bf14      	ite	ne
    b348:	2301      	movne	r3, #1
    b34a:	2300      	moveq	r3, #0
    b34c:	b2db      	uxtb	r3, r3
}
    b34e:	4618      	mov	r0, r3
    b350:	3710      	adds	r7, #16
    b352:	46bd      	mov	sp, r7
    b354:	bd80      	pop	{r7, pc}
    b356:	bf00      	nop
    b358:	0000b2fd 	.word	0x0000b2fd

0000b35c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b35c:	b580      	push	{r7, lr}
    b35e:	b082      	sub	sp, #8
    b360:	af00      	add	r7, sp, #0
    b362:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b364:	687b      	ldr	r3, [r7, #4]
    b366:	781b      	ldrb	r3, [r3, #0]
    b368:	b2db      	uxtb	r3, r3
    b36a:	f023 0304 	bic.w	r3, r3, #4
    b36e:	b2da      	uxtb	r2, r3
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b374:	210e      	movs	r1, #14
    b376:	6878      	ldr	r0, [r7, #4]
    b378:	4b02      	ldr	r3, [pc, #8]	; (b384 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b37a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b37c:	bf00      	nop
    b37e:	3708      	adds	r7, #8
    b380:	46bd      	mov	sp, r7
    b382:	bd80      	pop	{r7, pc}
    b384:	0000b2fd 	.word	0x0000b2fd

0000b388 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b388:	b580      	push	{r7, lr}
    b38a:	b084      	sub	sp, #16
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b390:	210e      	movs	r1, #14
    b392:	6878      	ldr	r0, [r7, #4]
    b394:	4b08      	ldr	r3, [pc, #32]	; (b3b8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b396:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b398:	687b      	ldr	r3, [r7, #4]
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b39e:	7bfb      	ldrb	r3, [r7, #15]
    b3a0:	09db      	lsrs	r3, r3, #7
    b3a2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b3a4:	7bfb      	ldrb	r3, [r7, #15]
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	bf14      	ite	ne
    b3aa:	2301      	movne	r3, #1
    b3ac:	2300      	moveq	r3, #0
    b3ae:	b2db      	uxtb	r3, r3
}
    b3b0:	4618      	mov	r0, r3
    b3b2:	3710      	adds	r7, #16
    b3b4:	46bd      	mov	sp, r7
    b3b6:	bd80      	pop	{r7, pc}
    b3b8:	0000b2fd 	.word	0x0000b2fd

0000b3bc <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b3bc:	b480      	push	{r7}
    b3be:	b085      	sub	sp, #20
    b3c0:	af00      	add	r7, sp, #0
    b3c2:	6078      	str	r0, [r7, #4]
    b3c4:	460b      	mov	r3, r1
    b3c6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b3c8:	687b      	ldr	r3, [r7, #4]
    b3ca:	785b      	ldrb	r3, [r3, #1]
    b3cc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b3ce:	7bfb      	ldrb	r3, [r7, #15]
    b3d0:	f023 030f 	bic.w	r3, r3, #15
    b3d4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b3d6:	78fb      	ldrb	r3, [r7, #3]
    b3d8:	f003 030f 	and.w	r3, r3, #15
    b3dc:	b2da      	uxtb	r2, r3
    b3de:	7bfb      	ldrb	r3, [r7, #15]
    b3e0:	4313      	orrs	r3, r2
    b3e2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b3e4:	687b      	ldr	r3, [r7, #4]
    b3e6:	7bfa      	ldrb	r2, [r7, #15]
    b3e8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b3ea:	bf00      	nop
    b3ec:	3714      	adds	r7, #20
    b3ee:	46bd      	mov	sp, r7
    b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3f4:	4770      	bx	lr
	...

0000b3f8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b3f8:	b580      	push	{r7, lr}
    b3fa:	b082      	sub	sp, #8
    b3fc:	af00      	add	r7, sp, #0
    b3fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b400:	687b      	ldr	r3, [r7, #4]
    b402:	2b00      	cmp	r3, #0
    b404:	d005      	beq.n	b412 <_wdt_init+0x1a>
    b406:	687b      	ldr	r3, [r7, #4]
    b408:	681b      	ldr	r3, [r3, #0]
    b40a:	2b00      	cmp	r3, #0
    b40c:	d001      	beq.n	b412 <_wdt_init+0x1a>
    b40e:	2301      	movs	r3, #1
    b410:	e000      	b.n	b414 <_wdt_init+0x1c>
    b412:	2300      	movs	r3, #0
    b414:	f003 0301 	and.w	r3, r3, #1
    b418:	b2db      	uxtb	r3, r3
    b41a:	2250      	movs	r2, #80	; 0x50
    b41c:	4913      	ldr	r1, [pc, #76]	; (b46c <_wdt_init+0x74>)
    b41e:	4618      	mov	r0, r3
    b420:	4b13      	ldr	r3, [pc, #76]	; (b470 <_wdt_init+0x78>)
    b422:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b424:	687b      	ldr	r3, [r7, #4]
    b426:	681b      	ldr	r3, [r3, #0]
    b428:	4618      	mov	r0, r3
    b42a:	4b12      	ldr	r3, [pc, #72]	; (b474 <_wdt_init+0x7c>)
    b42c:	4798      	blx	r3
    b42e:	4603      	mov	r3, r0
    b430:	2b00      	cmp	r3, #0
    b432:	d107      	bne.n	b444 <_wdt_init+0x4c>
    b434:	687b      	ldr	r3, [r7, #4]
    b436:	681b      	ldr	r3, [r3, #0]
    b438:	4618      	mov	r0, r3
    b43a:	4b0f      	ldr	r3, [pc, #60]	; (b478 <_wdt_init+0x80>)
    b43c:	4798      	blx	r3
    b43e:	4603      	mov	r3, r0
    b440:	2b00      	cmp	r3, #0
    b442:	d002      	beq.n	b44a <_wdt_init+0x52>
		return ERR_DENIED;
    b444:	f06f 0310 	mvn.w	r3, #16
    b448:	e00b      	b.n	b462 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b44a:	687b      	ldr	r3, [r7, #4]
    b44c:	681b      	ldr	r3, [r3, #0]
    b44e:	4618      	mov	r0, r3
    b450:	4b0a      	ldr	r3, [pc, #40]	; (b47c <_wdt_init+0x84>)
    b452:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b454:	687b      	ldr	r3, [r7, #4]
    b456:	681b      	ldr	r3, [r3, #0]
    b458:	210b      	movs	r1, #11
    b45a:	4618      	mov	r0, r3
    b45c:	4b08      	ldr	r3, [pc, #32]	; (b480 <_wdt_init+0x88>)
    b45e:	4798      	blx	r3
	}

	return ERR_NONE;
    b460:	2300      	movs	r3, #0
}
    b462:	4618      	mov	r0, r3
    b464:	3708      	adds	r7, #8
    b466:	46bd      	mov	sp, r7
    b468:	bd80      	pop	{r7, pc}
    b46a:	bf00      	nop
    b46c:	000133f8 	.word	0x000133f8
    b470:	00003df5 	.word	0x00003df5
    b474:	0000b389 	.word	0x0000b389
    b478:	0000b321 	.word	0x0000b321
    b47c:	0000b35d 	.word	0x0000b35d
    b480:	0000b3bd 	.word	0x0000b3bd

0000b484 <hri_port_set_DIR_reg>:
{
    b484:	b480      	push	{r7}
    b486:	b085      	sub	sp, #20
    b488:	af00      	add	r7, sp, #0
    b48a:	60f8      	str	r0, [r7, #12]
    b48c:	460b      	mov	r3, r1
    b48e:	607a      	str	r2, [r7, #4]
    b490:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b492:	7afb      	ldrb	r3, [r7, #11]
    b494:	68fa      	ldr	r2, [r7, #12]
    b496:	01db      	lsls	r3, r3, #7
    b498:	4413      	add	r3, r2
    b49a:	3308      	adds	r3, #8
    b49c:	687a      	ldr	r2, [r7, #4]
    b49e:	601a      	str	r2, [r3, #0]
}
    b4a0:	bf00      	nop
    b4a2:	3714      	adds	r7, #20
    b4a4:	46bd      	mov	sp, r7
    b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4aa:	4770      	bx	lr

0000b4ac <hri_port_clear_DIR_reg>:
{
    b4ac:	b480      	push	{r7}
    b4ae:	b085      	sub	sp, #20
    b4b0:	af00      	add	r7, sp, #0
    b4b2:	60f8      	str	r0, [r7, #12]
    b4b4:	460b      	mov	r3, r1
    b4b6:	607a      	str	r2, [r7, #4]
    b4b8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b4ba:	7afb      	ldrb	r3, [r7, #11]
    b4bc:	68fa      	ldr	r2, [r7, #12]
    b4be:	01db      	lsls	r3, r3, #7
    b4c0:	4413      	add	r3, r2
    b4c2:	3304      	adds	r3, #4
    b4c4:	687a      	ldr	r2, [r7, #4]
    b4c6:	601a      	str	r2, [r3, #0]
}
    b4c8:	bf00      	nop
    b4ca:	3714      	adds	r7, #20
    b4cc:	46bd      	mov	sp, r7
    b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4d2:	4770      	bx	lr

0000b4d4 <hri_port_set_OUT_reg>:
{
    b4d4:	b480      	push	{r7}
    b4d6:	b085      	sub	sp, #20
    b4d8:	af00      	add	r7, sp, #0
    b4da:	60f8      	str	r0, [r7, #12]
    b4dc:	460b      	mov	r3, r1
    b4de:	607a      	str	r2, [r7, #4]
    b4e0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b4e2:	7afb      	ldrb	r3, [r7, #11]
    b4e4:	68fa      	ldr	r2, [r7, #12]
    b4e6:	01db      	lsls	r3, r3, #7
    b4e8:	4413      	add	r3, r2
    b4ea:	3318      	adds	r3, #24
    b4ec:	687a      	ldr	r2, [r7, #4]
    b4ee:	601a      	str	r2, [r3, #0]
}
    b4f0:	bf00      	nop
    b4f2:	3714      	adds	r7, #20
    b4f4:	46bd      	mov	sp, r7
    b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4fa:	4770      	bx	lr

0000b4fc <hri_port_clear_OUT_reg>:
{
    b4fc:	b480      	push	{r7}
    b4fe:	b085      	sub	sp, #20
    b500:	af00      	add	r7, sp, #0
    b502:	60f8      	str	r0, [r7, #12]
    b504:	460b      	mov	r3, r1
    b506:	607a      	str	r2, [r7, #4]
    b508:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b50a:	7afb      	ldrb	r3, [r7, #11]
    b50c:	68fa      	ldr	r2, [r7, #12]
    b50e:	01db      	lsls	r3, r3, #7
    b510:	4413      	add	r3, r2
    b512:	3314      	adds	r3, #20
    b514:	687a      	ldr	r2, [r7, #4]
    b516:	601a      	str	r2, [r3, #0]
}
    b518:	bf00      	nop
    b51a:	3714      	adds	r7, #20
    b51c:	46bd      	mov	sp, r7
    b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b522:	4770      	bx	lr

0000b524 <hri_port_write_PMUX_PMUXE_bf>:
{
    b524:	b480      	push	{r7}
    b526:	b085      	sub	sp, #20
    b528:	af00      	add	r7, sp, #0
    b52a:	6078      	str	r0, [r7, #4]
    b52c:	4608      	mov	r0, r1
    b52e:	4611      	mov	r1, r2
    b530:	461a      	mov	r2, r3
    b532:	4603      	mov	r3, r0
    b534:	70fb      	strb	r3, [r7, #3]
    b536:	460b      	mov	r3, r1
    b538:	70bb      	strb	r3, [r7, #2]
    b53a:	4613      	mov	r3, r2
    b53c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b53e:	78fa      	ldrb	r2, [r7, #3]
    b540:	78bb      	ldrb	r3, [r7, #2]
    b542:	6879      	ldr	r1, [r7, #4]
    b544:	01d2      	lsls	r2, r2, #7
    b546:	440a      	add	r2, r1
    b548:	4413      	add	r3, r2
    b54a:	3330      	adds	r3, #48	; 0x30
    b54c:	781b      	ldrb	r3, [r3, #0]
    b54e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b550:	7bfb      	ldrb	r3, [r7, #15]
    b552:	f023 030f 	bic.w	r3, r3, #15
    b556:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b558:	787b      	ldrb	r3, [r7, #1]
    b55a:	f003 030f 	and.w	r3, r3, #15
    b55e:	b2da      	uxtb	r2, r3
    b560:	7bfb      	ldrb	r3, [r7, #15]
    b562:	4313      	orrs	r3, r2
    b564:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b566:	78fa      	ldrb	r2, [r7, #3]
    b568:	78bb      	ldrb	r3, [r7, #2]
    b56a:	6879      	ldr	r1, [r7, #4]
    b56c:	01d2      	lsls	r2, r2, #7
    b56e:	440a      	add	r2, r1
    b570:	4413      	add	r3, r2
    b572:	3330      	adds	r3, #48	; 0x30
    b574:	7bfa      	ldrb	r2, [r7, #15]
    b576:	701a      	strb	r2, [r3, #0]
}
    b578:	bf00      	nop
    b57a:	3714      	adds	r7, #20
    b57c:	46bd      	mov	sp, r7
    b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b582:	4770      	bx	lr

0000b584 <hri_port_write_PMUX_PMUXO_bf>:
{
    b584:	b480      	push	{r7}
    b586:	b085      	sub	sp, #20
    b588:	af00      	add	r7, sp, #0
    b58a:	6078      	str	r0, [r7, #4]
    b58c:	4608      	mov	r0, r1
    b58e:	4611      	mov	r1, r2
    b590:	461a      	mov	r2, r3
    b592:	4603      	mov	r3, r0
    b594:	70fb      	strb	r3, [r7, #3]
    b596:	460b      	mov	r3, r1
    b598:	70bb      	strb	r3, [r7, #2]
    b59a:	4613      	mov	r3, r2
    b59c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b59e:	78fa      	ldrb	r2, [r7, #3]
    b5a0:	78bb      	ldrb	r3, [r7, #2]
    b5a2:	6879      	ldr	r1, [r7, #4]
    b5a4:	01d2      	lsls	r2, r2, #7
    b5a6:	440a      	add	r2, r1
    b5a8:	4413      	add	r3, r2
    b5aa:	3330      	adds	r3, #48	; 0x30
    b5ac:	781b      	ldrb	r3, [r3, #0]
    b5ae:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b5b0:	7bfb      	ldrb	r3, [r7, #15]
    b5b2:	f003 030f 	and.w	r3, r3, #15
    b5b6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b5b8:	787b      	ldrb	r3, [r7, #1]
    b5ba:	011b      	lsls	r3, r3, #4
    b5bc:	b2da      	uxtb	r2, r3
    b5be:	7bfb      	ldrb	r3, [r7, #15]
    b5c0:	4313      	orrs	r3, r2
    b5c2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b5c4:	78fa      	ldrb	r2, [r7, #3]
    b5c6:	78bb      	ldrb	r3, [r7, #2]
    b5c8:	6879      	ldr	r1, [r7, #4]
    b5ca:	01d2      	lsls	r2, r2, #7
    b5cc:	440a      	add	r2, r1
    b5ce:	4413      	add	r3, r2
    b5d0:	3330      	adds	r3, #48	; 0x30
    b5d2:	7bfa      	ldrb	r2, [r7, #15]
    b5d4:	701a      	strb	r2, [r3, #0]
}
    b5d6:	bf00      	nop
    b5d8:	3714      	adds	r7, #20
    b5da:	46bd      	mov	sp, r7
    b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5e0:	4770      	bx	lr

0000b5e2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b5e2:	b480      	push	{r7}
    b5e4:	b085      	sub	sp, #20
    b5e6:	af00      	add	r7, sp, #0
    b5e8:	6078      	str	r0, [r7, #4]
    b5ea:	4608      	mov	r0, r1
    b5ec:	4611      	mov	r1, r2
    b5ee:	461a      	mov	r2, r3
    b5f0:	4603      	mov	r3, r0
    b5f2:	70fb      	strb	r3, [r7, #3]
    b5f4:	460b      	mov	r3, r1
    b5f6:	70bb      	strb	r3, [r7, #2]
    b5f8:	4613      	mov	r3, r2
    b5fa:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b5fc:	78fa      	ldrb	r2, [r7, #3]
    b5fe:	78bb      	ldrb	r3, [r7, #2]
    b600:	6879      	ldr	r1, [r7, #4]
    b602:	01d2      	lsls	r2, r2, #7
    b604:	440a      	add	r2, r1
    b606:	4413      	add	r3, r2
    b608:	3340      	adds	r3, #64	; 0x40
    b60a:	781b      	ldrb	r3, [r3, #0]
    b60c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b60e:	7bfb      	ldrb	r3, [r7, #15]
    b610:	f023 0301 	bic.w	r3, r3, #1
    b614:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b616:	787a      	ldrb	r2, [r7, #1]
    b618:	7bfb      	ldrb	r3, [r7, #15]
    b61a:	4313      	orrs	r3, r2
    b61c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b61e:	78fa      	ldrb	r2, [r7, #3]
    b620:	78bb      	ldrb	r3, [r7, #2]
    b622:	6879      	ldr	r1, [r7, #4]
    b624:	01d2      	lsls	r2, r2, #7
    b626:	440a      	add	r2, r1
    b628:	4413      	add	r3, r2
    b62a:	3340      	adds	r3, #64	; 0x40
    b62c:	7bfa      	ldrb	r2, [r7, #15]
    b62e:	701a      	strb	r2, [r3, #0]
}
    b630:	bf00      	nop
    b632:	3714      	adds	r7, #20
    b634:	46bd      	mov	sp, r7
    b636:	f85d 7b04 	ldr.w	r7, [sp], #4
    b63a:	4770      	bx	lr

0000b63c <hri_port_write_WRCONFIG_reg>:
{
    b63c:	b480      	push	{r7}
    b63e:	b085      	sub	sp, #20
    b640:	af00      	add	r7, sp, #0
    b642:	60f8      	str	r0, [r7, #12]
    b644:	460b      	mov	r3, r1
    b646:	607a      	str	r2, [r7, #4]
    b648:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b64a:	7afb      	ldrb	r3, [r7, #11]
    b64c:	68fa      	ldr	r2, [r7, #12]
    b64e:	01db      	lsls	r3, r3, #7
    b650:	4413      	add	r3, r2
    b652:	3328      	adds	r3, #40	; 0x28
    b654:	687a      	ldr	r2, [r7, #4]
    b656:	601a      	str	r2, [r3, #0]
}
    b658:	bf00      	nop
    b65a:	3714      	adds	r7, #20
    b65c:	46bd      	mov	sp, r7
    b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b662:	4770      	bx	lr

0000b664 <_gpio_set_direction>:
{
    b664:	b580      	push	{r7, lr}
    b666:	b082      	sub	sp, #8
    b668:	af00      	add	r7, sp, #0
    b66a:	4603      	mov	r3, r0
    b66c:	6039      	str	r1, [r7, #0]
    b66e:	71fb      	strb	r3, [r7, #7]
    b670:	4613      	mov	r3, r2
    b672:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b674:	79bb      	ldrb	r3, [r7, #6]
    b676:	2b01      	cmp	r3, #1
    b678:	d01c      	beq.n	b6b4 <_gpio_set_direction+0x50>
    b67a:	2b02      	cmp	r3, #2
    b67c:	d037      	beq.n	b6ee <_gpio_set_direction+0x8a>
    b67e:	2b00      	cmp	r3, #0
    b680:	d14e      	bne.n	b720 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b682:	79fb      	ldrb	r3, [r7, #7]
    b684:	683a      	ldr	r2, [r7, #0]
    b686:	4619      	mov	r1, r3
    b688:	482a      	ldr	r0, [pc, #168]	; (b734 <_gpio_set_direction+0xd0>)
    b68a:	4b2b      	ldr	r3, [pc, #172]	; (b738 <_gpio_set_direction+0xd4>)
    b68c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b68e:	683b      	ldr	r3, [r7, #0]
    b690:	b29b      	uxth	r3, r3
    b692:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b696:	79fb      	ldrb	r3, [r7, #7]
    b698:	4619      	mov	r1, r3
    b69a:	4826      	ldr	r0, [pc, #152]	; (b734 <_gpio_set_direction+0xd0>)
    b69c:	4b27      	ldr	r3, [pc, #156]	; (b73c <_gpio_set_direction+0xd8>)
    b69e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b6a0:	683b      	ldr	r3, [r7, #0]
    b6a2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b6a4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b6a8:	79fb      	ldrb	r3, [r7, #7]
    b6aa:	4619      	mov	r1, r3
    b6ac:	4821      	ldr	r0, [pc, #132]	; (b734 <_gpio_set_direction+0xd0>)
    b6ae:	4b23      	ldr	r3, [pc, #140]	; (b73c <_gpio_set_direction+0xd8>)
    b6b0:	4798      	blx	r3
		break;
    b6b2:	e03a      	b.n	b72a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b6b4:	79fb      	ldrb	r3, [r7, #7]
    b6b6:	683a      	ldr	r2, [r7, #0]
    b6b8:	4619      	mov	r1, r3
    b6ba:	481e      	ldr	r0, [pc, #120]	; (b734 <_gpio_set_direction+0xd0>)
    b6bc:	4b1e      	ldr	r3, [pc, #120]	; (b738 <_gpio_set_direction+0xd4>)
    b6be:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b6c0:	683b      	ldr	r3, [r7, #0]
    b6c2:	b29b      	uxth	r3, r3
    b6c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b6c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b6cc:	79f9      	ldrb	r1, [r7, #7]
    b6ce:	461a      	mov	r2, r3
    b6d0:	4818      	ldr	r0, [pc, #96]	; (b734 <_gpio_set_direction+0xd0>)
    b6d2:	4b1a      	ldr	r3, [pc, #104]	; (b73c <_gpio_set_direction+0xd8>)
    b6d4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b6d6:	683b      	ldr	r3, [r7, #0]
    b6d8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b6da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b6de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b6e2:	79f9      	ldrb	r1, [r7, #7]
    b6e4:	461a      	mov	r2, r3
    b6e6:	4813      	ldr	r0, [pc, #76]	; (b734 <_gpio_set_direction+0xd0>)
    b6e8:	4b14      	ldr	r3, [pc, #80]	; (b73c <_gpio_set_direction+0xd8>)
    b6ea:	4798      	blx	r3
		break;
    b6ec:	e01d      	b.n	b72a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b6ee:	79fb      	ldrb	r3, [r7, #7]
    b6f0:	683a      	ldr	r2, [r7, #0]
    b6f2:	4619      	mov	r1, r3
    b6f4:	480f      	ldr	r0, [pc, #60]	; (b734 <_gpio_set_direction+0xd0>)
    b6f6:	4b12      	ldr	r3, [pc, #72]	; (b740 <_gpio_set_direction+0xdc>)
    b6f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b6fa:	683b      	ldr	r3, [r7, #0]
    b6fc:	b29b      	uxth	r3, r3
    b6fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b702:	79fb      	ldrb	r3, [r7, #7]
    b704:	4619      	mov	r1, r3
    b706:	480b      	ldr	r0, [pc, #44]	; (b734 <_gpio_set_direction+0xd0>)
    b708:	4b0c      	ldr	r3, [pc, #48]	; (b73c <_gpio_set_direction+0xd8>)
    b70a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b70c:	683b      	ldr	r3, [r7, #0]
    b70e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b710:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b714:	79fb      	ldrb	r3, [r7, #7]
    b716:	4619      	mov	r1, r3
    b718:	4806      	ldr	r0, [pc, #24]	; (b734 <_gpio_set_direction+0xd0>)
    b71a:	4b08      	ldr	r3, [pc, #32]	; (b73c <_gpio_set_direction+0xd8>)
    b71c:	4798      	blx	r3
		break;
    b71e:	e004      	b.n	b72a <_gpio_set_direction+0xc6>
		ASSERT(false);
    b720:	2246      	movs	r2, #70	; 0x46
    b722:	4908      	ldr	r1, [pc, #32]	; (b744 <_gpio_set_direction+0xe0>)
    b724:	2000      	movs	r0, #0
    b726:	4b08      	ldr	r3, [pc, #32]	; (b748 <_gpio_set_direction+0xe4>)
    b728:	4798      	blx	r3
}
    b72a:	bf00      	nop
    b72c:	3708      	adds	r7, #8
    b72e:	46bd      	mov	sp, r7
    b730:	bd80      	pop	{r7, pc}
    b732:	bf00      	nop
    b734:	41008000 	.word	0x41008000
    b738:	0000b4ad 	.word	0x0000b4ad
    b73c:	0000b63d 	.word	0x0000b63d
    b740:	0000b485 	.word	0x0000b485
    b744:	00013410 	.word	0x00013410
    b748:	00003df5 	.word	0x00003df5

0000b74c <_gpio_set_level>:
{
    b74c:	b580      	push	{r7, lr}
    b74e:	b082      	sub	sp, #8
    b750:	af00      	add	r7, sp, #0
    b752:	4603      	mov	r3, r0
    b754:	6039      	str	r1, [r7, #0]
    b756:	71fb      	strb	r3, [r7, #7]
    b758:	4613      	mov	r3, r2
    b75a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b75c:	79bb      	ldrb	r3, [r7, #6]
    b75e:	2b00      	cmp	r3, #0
    b760:	d006      	beq.n	b770 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b762:	79fb      	ldrb	r3, [r7, #7]
    b764:	683a      	ldr	r2, [r7, #0]
    b766:	4619      	mov	r1, r3
    b768:	4806      	ldr	r0, [pc, #24]	; (b784 <_gpio_set_level+0x38>)
    b76a:	4b07      	ldr	r3, [pc, #28]	; (b788 <_gpio_set_level+0x3c>)
    b76c:	4798      	blx	r3
}
    b76e:	e005      	b.n	b77c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b770:	79fb      	ldrb	r3, [r7, #7]
    b772:	683a      	ldr	r2, [r7, #0]
    b774:	4619      	mov	r1, r3
    b776:	4803      	ldr	r0, [pc, #12]	; (b784 <_gpio_set_level+0x38>)
    b778:	4b04      	ldr	r3, [pc, #16]	; (b78c <_gpio_set_level+0x40>)
    b77a:	4798      	blx	r3
}
    b77c:	bf00      	nop
    b77e:	3708      	adds	r7, #8
    b780:	46bd      	mov	sp, r7
    b782:	bd80      	pop	{r7, pc}
    b784:	41008000 	.word	0x41008000
    b788:	0000b4d5 	.word	0x0000b4d5
    b78c:	0000b4fd 	.word	0x0000b4fd

0000b790 <_gpio_set_pin_function>:
{
    b790:	b590      	push	{r4, r7, lr}
    b792:	b085      	sub	sp, #20
    b794:	af00      	add	r7, sp, #0
    b796:	6078      	str	r0, [r7, #4]
    b798:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b79a:	687b      	ldr	r3, [r7, #4]
    b79c:	095b      	lsrs	r3, r3, #5
    b79e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b7a0:	687b      	ldr	r3, [r7, #4]
    b7a2:	b2db      	uxtb	r3, r3
    b7a4:	f003 031f 	and.w	r3, r3, #31
    b7a8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b7aa:	683b      	ldr	r3, [r7, #0]
    b7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    b7b0:	d106      	bne.n	b7c0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b7b2:	7bba      	ldrb	r2, [r7, #14]
    b7b4:	7bf9      	ldrb	r1, [r7, #15]
    b7b6:	2300      	movs	r3, #0
    b7b8:	4812      	ldr	r0, [pc, #72]	; (b804 <_gpio_set_pin_function+0x74>)
    b7ba:	4c13      	ldr	r4, [pc, #76]	; (b808 <_gpio_set_pin_function+0x78>)
    b7bc:	47a0      	blx	r4
}
    b7be:	e01d      	b.n	b7fc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b7c0:	7bba      	ldrb	r2, [r7, #14]
    b7c2:	7bf9      	ldrb	r1, [r7, #15]
    b7c4:	2301      	movs	r3, #1
    b7c6:	480f      	ldr	r0, [pc, #60]	; (b804 <_gpio_set_pin_function+0x74>)
    b7c8:	4c0f      	ldr	r4, [pc, #60]	; (b808 <_gpio_set_pin_function+0x78>)
    b7ca:	47a0      	blx	r4
		if (pin & 1) {
    b7cc:	7bbb      	ldrb	r3, [r7, #14]
    b7ce:	f003 0301 	and.w	r3, r3, #1
    b7d2:	2b00      	cmp	r3, #0
    b7d4:	d009      	beq.n	b7ea <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b7d6:	7bbb      	ldrb	r3, [r7, #14]
    b7d8:	085b      	lsrs	r3, r3, #1
    b7da:	b2da      	uxtb	r2, r3
    b7dc:	683b      	ldr	r3, [r7, #0]
    b7de:	b2db      	uxtb	r3, r3
    b7e0:	7bf9      	ldrb	r1, [r7, #15]
    b7e2:	4808      	ldr	r0, [pc, #32]	; (b804 <_gpio_set_pin_function+0x74>)
    b7e4:	4c09      	ldr	r4, [pc, #36]	; (b80c <_gpio_set_pin_function+0x7c>)
    b7e6:	47a0      	blx	r4
}
    b7e8:	e008      	b.n	b7fc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b7ea:	7bbb      	ldrb	r3, [r7, #14]
    b7ec:	085b      	lsrs	r3, r3, #1
    b7ee:	b2da      	uxtb	r2, r3
    b7f0:	683b      	ldr	r3, [r7, #0]
    b7f2:	b2db      	uxtb	r3, r3
    b7f4:	7bf9      	ldrb	r1, [r7, #15]
    b7f6:	4803      	ldr	r0, [pc, #12]	; (b804 <_gpio_set_pin_function+0x74>)
    b7f8:	4c05      	ldr	r4, [pc, #20]	; (b810 <_gpio_set_pin_function+0x80>)
    b7fa:	47a0      	blx	r4
}
    b7fc:	bf00      	nop
    b7fe:	3714      	adds	r7, #20
    b800:	46bd      	mov	sp, r7
    b802:	bd90      	pop	{r4, r7, pc}
    b804:	41008000 	.word	0x41008000
    b808:	0000b5e3 	.word	0x0000b5e3
    b80c:	0000b585 	.word	0x0000b585
    b810:	0000b525 	.word	0x0000b525

0000b814 <gpio_set_pin_function>:
{
    b814:	b580      	push	{r7, lr}
    b816:	b082      	sub	sp, #8
    b818:	af00      	add	r7, sp, #0
    b81a:	6078      	str	r0, [r7, #4]
    b81c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b81e:	6839      	ldr	r1, [r7, #0]
    b820:	6878      	ldr	r0, [r7, #4]
    b822:	4b03      	ldr	r3, [pc, #12]	; (b830 <gpio_set_pin_function+0x1c>)
    b824:	4798      	blx	r3
}
    b826:	bf00      	nop
    b828:	3708      	adds	r7, #8
    b82a:	46bd      	mov	sp, r7
    b82c:	bd80      	pop	{r7, pc}
    b82e:	bf00      	nop
    b830:	0000b791 	.word	0x0000b791

0000b834 <gpio_set_pin_direction>:
{
    b834:	b580      	push	{r7, lr}
    b836:	b082      	sub	sp, #8
    b838:	af00      	add	r7, sp, #0
    b83a:	4603      	mov	r3, r0
    b83c:	460a      	mov	r2, r1
    b83e:	71fb      	strb	r3, [r7, #7]
    b840:	4613      	mov	r3, r2
    b842:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b844:	79fb      	ldrb	r3, [r7, #7]
    b846:	095b      	lsrs	r3, r3, #5
    b848:	b2d8      	uxtb	r0, r3
    b84a:	79fb      	ldrb	r3, [r7, #7]
    b84c:	f003 031f 	and.w	r3, r3, #31
    b850:	2201      	movs	r2, #1
    b852:	fa02 f303 	lsl.w	r3, r2, r3
    b856:	79ba      	ldrb	r2, [r7, #6]
    b858:	4619      	mov	r1, r3
    b85a:	4b03      	ldr	r3, [pc, #12]	; (b868 <gpio_set_pin_direction+0x34>)
    b85c:	4798      	blx	r3
}
    b85e:	bf00      	nop
    b860:	3708      	adds	r7, #8
    b862:	46bd      	mov	sp, r7
    b864:	bd80      	pop	{r7, pc}
    b866:	bf00      	nop
    b868:	0000b665 	.word	0x0000b665

0000b86c <gpio_set_pin_level>:
{
    b86c:	b580      	push	{r7, lr}
    b86e:	b082      	sub	sp, #8
    b870:	af00      	add	r7, sp, #0
    b872:	4603      	mov	r3, r0
    b874:	460a      	mov	r2, r1
    b876:	71fb      	strb	r3, [r7, #7]
    b878:	4613      	mov	r3, r2
    b87a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b87c:	79fb      	ldrb	r3, [r7, #7]
    b87e:	095b      	lsrs	r3, r3, #5
    b880:	b2d8      	uxtb	r0, r3
    b882:	79fb      	ldrb	r3, [r7, #7]
    b884:	f003 031f 	and.w	r3, r3, #31
    b888:	2201      	movs	r2, #1
    b88a:	fa02 f303 	lsl.w	r3, r2, r3
    b88e:	79ba      	ldrb	r2, [r7, #6]
    b890:	4619      	mov	r1, r3
    b892:	4b03      	ldr	r3, [pc, #12]	; (b8a0 <gpio_set_pin_level+0x34>)
    b894:	4798      	blx	r3
}
    b896:	bf00      	nop
    b898:	3708      	adds	r7, #8
    b89a:	46bd      	mov	sp, r7
    b89c:	bd80      	pop	{r7, pc}
    b89e:	bf00      	nop
    b8a0:	0000b74d 	.word	0x0000b74d

0000b8a4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b8a4:	b580      	push	{r7, lr}
    b8a6:	b082      	sub	sp, #8
    b8a8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b8aa:	2100      	movs	r1, #0
    b8ac:	2008      	movs	r0, #8
    b8ae:	4b24      	ldr	r3, [pc, #144]	; (b940 <QSPI_N25Q256_exit_xip+0x9c>)
    b8b0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b8b2:	2100      	movs	r1, #0
    b8b4:	202b      	movs	r0, #43	; 0x2b
    b8b6:	4b22      	ldr	r3, [pc, #136]	; (b940 <QSPI_N25Q256_exit_xip+0x9c>)
    b8b8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b8ba:	2100      	movs	r1, #0
    b8bc:	202a      	movs	r0, #42	; 0x2a
    b8be:	4b20      	ldr	r3, [pc, #128]	; (b940 <QSPI_N25Q256_exit_xip+0x9c>)
    b8c0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b8c2:	2102      	movs	r1, #2
    b8c4:	2008      	movs	r0, #8
    b8c6:	4b1f      	ldr	r3, [pc, #124]	; (b944 <QSPI_N25Q256_exit_xip+0xa0>)
    b8c8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b8ca:	2102      	movs	r1, #2
    b8cc:	202b      	movs	r0, #43	; 0x2b
    b8ce:	4b1d      	ldr	r3, [pc, #116]	; (b944 <QSPI_N25Q256_exit_xip+0xa0>)
    b8d0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b8d2:	2102      	movs	r1, #2
    b8d4:	202a      	movs	r0, #42	; 0x2a
    b8d6:	4b1b      	ldr	r3, [pc, #108]	; (b944 <QSPI_N25Q256_exit_xip+0xa0>)
    b8d8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b8da:	2101      	movs	r1, #1
    b8dc:	2008      	movs	r0, #8
    b8de:	4b1a      	ldr	r3, [pc, #104]	; (b948 <QSPI_N25Q256_exit_xip+0xa4>)
    b8e0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b8e2:	2100      	movs	r1, #0
    b8e4:	202b      	movs	r0, #43	; 0x2b
    b8e6:	4b18      	ldr	r3, [pc, #96]	; (b948 <QSPI_N25Q256_exit_xip+0xa4>)
    b8e8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b8ea:	2100      	movs	r1, #0
    b8ec:	202a      	movs	r0, #42	; 0x2a
    b8ee:	4b16      	ldr	r3, [pc, #88]	; (b948 <QSPI_N25Q256_exit_xip+0xa4>)
    b8f0:	4798      	blx	r3

	delay_us(1);
    b8f2:	2001      	movs	r0, #1
    b8f4:	4b15      	ldr	r3, [pc, #84]	; (b94c <QSPI_N25Q256_exit_xip+0xa8>)
    b8f6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b8f8:	2300      	movs	r3, #0
    b8fa:	607b      	str	r3, [r7, #4]
    b8fc:	e010      	b.n	b920 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b8fe:	2101      	movs	r1, #1
    b900:	202a      	movs	r0, #42	; 0x2a
    b902:	4b11      	ldr	r3, [pc, #68]	; (b948 <QSPI_N25Q256_exit_xip+0xa4>)
    b904:	4798      	blx	r3
		delay_us(1);
    b906:	2001      	movs	r0, #1
    b908:	4b10      	ldr	r3, [pc, #64]	; (b94c <QSPI_N25Q256_exit_xip+0xa8>)
    b90a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b90c:	2100      	movs	r1, #0
    b90e:	202a      	movs	r0, #42	; 0x2a
    b910:	4b0d      	ldr	r3, [pc, #52]	; (b948 <QSPI_N25Q256_exit_xip+0xa4>)
    b912:	4798      	blx	r3
		delay_us(1);
    b914:	2001      	movs	r0, #1
    b916:	4b0d      	ldr	r3, [pc, #52]	; (b94c <QSPI_N25Q256_exit_xip+0xa8>)
    b918:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b91a:	687b      	ldr	r3, [r7, #4]
    b91c:	3301      	adds	r3, #1
    b91e:	607b      	str	r3, [r7, #4]
    b920:	687b      	ldr	r3, [r7, #4]
    b922:	2b06      	cmp	r3, #6
    b924:	ddeb      	ble.n	b8fe <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b926:	2101      	movs	r1, #1
    b928:	202b      	movs	r0, #43	; 0x2b
    b92a:	4b07      	ldr	r3, [pc, #28]	; (b948 <QSPI_N25Q256_exit_xip+0xa4>)
    b92c:	4798      	blx	r3
	delay_us(1);
    b92e:	2001      	movs	r0, #1
    b930:	4b06      	ldr	r3, [pc, #24]	; (b94c <QSPI_N25Q256_exit_xip+0xa8>)
    b932:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b934:	4b06      	ldr	r3, [pc, #24]	; (b950 <QSPI_N25Q256_exit_xip+0xac>)
    b936:	4798      	blx	r3
}
    b938:	bf00      	nop
    b93a:	3708      	adds	r7, #8
    b93c:	46bd      	mov	sp, r7
    b93e:	bd80      	pop	{r7, pc}
    b940:	0000b815 	.word	0x0000b815
    b944:	0000b835 	.word	0x0000b835
    b948:	0000b86d 	.word	0x0000b86d
    b94c:	00002785 	.word	0x00002785
    b950:	00001b41 	.word	0x00001b41

0000b954 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b954:	b598      	push	{r3, r4, r7, lr}
    b956:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b958:	4806      	ldr	r0, [pc, #24]	; (b974 <spi_nor_flash_init+0x20>)
    b95a:	4b07      	ldr	r3, [pc, #28]	; (b978 <spi_nor_flash_init+0x24>)
    b95c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b95e:	2300      	movs	r3, #0
    b960:	4a06      	ldr	r2, [pc, #24]	; (b97c <spi_nor_flash_init+0x28>)
    b962:	4904      	ldr	r1, [pc, #16]	; (b974 <spi_nor_flash_init+0x20>)
    b964:	4806      	ldr	r0, [pc, #24]	; (b980 <spi_nor_flash_init+0x2c>)
    b966:	4c07      	ldr	r4, [pc, #28]	; (b984 <spi_nor_flash_init+0x30>)
    b968:	47a0      	blx	r4
    b96a:	4602      	mov	r2, r0
    b96c:	4b06      	ldr	r3, [pc, #24]	; (b988 <spi_nor_flash_init+0x34>)
    b96e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b970:	bf00      	nop
    b972:	bd98      	pop	{r3, r4, r7, pc}
    b974:	20007eb8 	.word	0x20007eb8
    b978:	00002c9d 	.word	0x00002c9d
    b97c:	0000b8a5 	.word	0x0000b8a5
    b980:	20000cfc 	.word	0x20000cfc
    b984:	0000bdc1 	.word	0x0000bdc1
    b988:	20008098 	.word	0x20008098

0000b98c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b98c:	b580      	push	{r7, lr}
    b98e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b990:	4805      	ldr	r0, [pc, #20]	; (b9a8 <cdc_device_acm_init+0x1c>)
    b992:	4b06      	ldr	r3, [pc, #24]	; (b9ac <cdc_device_acm_init+0x20>)
    b994:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b996:	4b06      	ldr	r3, [pc, #24]	; (b9b0 <cdc_device_acm_init+0x24>)
    b998:	4798      	blx	r3

	usbdc_start(single_desc);
    b99a:	4806      	ldr	r0, [pc, #24]	; (b9b4 <cdc_device_acm_init+0x28>)
    b99c:	4b06      	ldr	r3, [pc, #24]	; (b9b8 <cdc_device_acm_init+0x2c>)
    b99e:	4798      	blx	r3
	usbdc_attach();
    b9a0:	4b06      	ldr	r3, [pc, #24]	; (b9bc <cdc_device_acm_init+0x30>)
    b9a2:	4798      	blx	r3
}
    b9a4:	bf00      	nop
    b9a6:	bd80      	pop	{r7, pc}
    b9a8:	20000d4c 	.word	0x20000d4c
    b9ac:	0000d4e9 	.word	0x0000d4e9
    b9b0:	0000c761 	.word	0x0000c761
    b9b4:	200001d0 	.word	0x200001d0
    b9b8:	0000d585 	.word	0x0000d585
    b9bc:	0000d5d5 	.word	0x0000d5d5

0000b9c0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b9c0:	b580      	push	{r7, lr}
    b9c2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b9c4:	4b01      	ldr	r3, [pc, #4]	; (b9cc <usb_init+0xc>)
    b9c6:	4798      	blx	r3
}
    b9c8:	bf00      	nop
    b9ca:	bd80      	pop	{r7, pc}
    b9cc:	0000b98d 	.word	0x0000b98d

0000b9d0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b9d0:	b480      	push	{r7}
    b9d2:	b085      	sub	sp, #20
    b9d4:	af00      	add	r7, sp, #0
    b9d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b9d8:	f3ef 8310 	mrs	r3, PRIMASK
    b9dc:	60fb      	str	r3, [r7, #12]
  return(result);
    b9de:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b9e0:	687b      	ldr	r3, [r7, #4]
    b9e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b9e4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b9e6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b9ea:	bf00      	nop
    b9ec:	3714      	adds	r7, #20
    b9ee:	46bd      	mov	sp, r7
    b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9f4:	4770      	bx	lr

0000b9f6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b9f6:	b480      	push	{r7}
    b9f8:	b085      	sub	sp, #20
    b9fa:	af00      	add	r7, sp, #0
    b9fc:	6078      	str	r0, [r7, #4]
    b9fe:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    ba02:	687b      	ldr	r3, [r7, #4]
    ba04:	681b      	ldr	r3, [r3, #0]
    ba06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    ba08:	68fb      	ldr	r3, [r7, #12]
    ba0a:	f383 8810 	msr	PRIMASK, r3
}
    ba0e:	bf00      	nop
    ba10:	3714      	adds	r7, #20
    ba12:	46bd      	mov	sp, r7
    ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba18:	4770      	bx	lr
	...

0000ba1c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    ba1c:	b580      	push	{r7, lr}
    ba1e:	b08c      	sub	sp, #48	; 0x30
    ba20:	af00      	add	r7, sp, #0
    ba22:	6078      	str	r0, [r7, #4]
    ba24:	460b      	mov	r3, r1
    ba26:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba28:	687b      	ldr	r3, [r7, #4]
    ba2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba2c:	687b      	ldr	r3, [r7, #4]
    ba2e:	681b      	ldr	r3, [r3, #0]
    ba30:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    ba32:	f107 030c 	add.w	r3, r7, #12
    ba36:	2200      	movs	r2, #0
    ba38:	601a      	str	r2, [r3, #0]
    ba3a:	605a      	str	r2, [r3, #4]
    ba3c:	609a      	str	r2, [r3, #8]
    ba3e:	60da      	str	r2, [r3, #12]
    ba40:	611a      	str	r2, [r3, #16]
    ba42:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba46:	7b1b      	ldrb	r3, [r3, #12]
    ba48:	2b00      	cmp	r3, #0
    ba4a:	d001      	beq.n	ba50 <n25q256a_xip_confirm+0x34>
    ba4c:	2206      	movs	r2, #6
    ba4e:	e000      	b.n	ba52 <n25q256a_xip_confirm+0x36>
    ba50:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    ba52:	7b3b      	ldrb	r3, [r7, #12]
    ba54:	f362 0302 	bfi	r3, r2, #0, #3
    ba58:	733b      	strb	r3, [r7, #12]
    ba5a:	7b3b      	ldrb	r3, [r7, #12]
    ba5c:	f043 0310 	orr.w	r3, r3, #16
    ba60:	733b      	strb	r3, [r7, #12]
    ba62:	7b3b      	ldrb	r3, [r7, #12]
    ba64:	f043 0320 	orr.w	r3, r3, #32
    ba68:	733b      	strb	r3, [r7, #12]
    ba6a:	7b3b      	ldrb	r3, [r7, #12]
    ba6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba70:	733b      	strb	r3, [r7, #12]
    ba72:	7b3b      	ldrb	r3, [r7, #12]
    ba74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba78:	733b      	strb	r3, [r7, #12]
    ba7a:	7b7b      	ldrb	r3, [r7, #13]
    ba7c:	f043 0303 	orr.w	r3, r3, #3
    ba80:	737b      	strb	r3, [r7, #13]
    ba82:	7b7b      	ldrb	r3, [r7, #13]
    ba84:	2201      	movs	r2, #1
    ba86:	f362 1305 	bfi	r3, r2, #4, #2
    ba8a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba8e:	7b1b      	ldrb	r3, [r3, #12]
    ba90:	2b00      	cmp	r3, #0
    ba92:	d001      	beq.n	ba98 <n25q256a_xip_confirm+0x7c>
    ba94:	2208      	movs	r2, #8
    ba96:	e000      	b.n	ba9a <n25q256a_xip_confirm+0x7e>
    ba98:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    ba9a:	7bbb      	ldrb	r3, [r7, #14]
    ba9c:	f362 0304 	bfi	r3, r2, #0, #5
    baa0:	73bb      	strb	r3, [r7, #14]
    baa2:	230b      	movs	r3, #11
    baa4:	743b      	strb	r3, [r7, #16]
    baa6:	78fb      	ldrb	r3, [r7, #3]
    baa8:	2b00      	cmp	r3, #0
    baaa:	d001      	beq.n	bab0 <n25q256a_xip_confirm+0x94>
    baac:	2300      	movs	r3, #0
    baae:	e000      	b.n	bab2 <n25q256a_xip_confirm+0x96>
    bab0:	23ff      	movs	r3, #255	; 0xff
    bab2:	747b      	strb	r3, [r7, #17]
    bab4:	2301      	movs	r3, #1
    bab6:	61bb      	str	r3, [r7, #24]
    bab8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    babc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    babe:	f107 030c 	add.w	r3, r7, #12
    bac2:	4619      	mov	r1, r3
    bac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bac6:	4b07      	ldr	r3, [pc, #28]	; (bae4 <n25q256a_xip_confirm+0xc8>)
    bac8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    baca:	78fb      	ldrb	r3, [r7, #3]
    bacc:	2b00      	cmp	r3, #0
    bace:	d001      	beq.n	bad4 <n25q256a_xip_confirm+0xb8>
    bad0:	2202      	movs	r2, #2
    bad2:	e000      	b.n	bad6 <n25q256a_xip_confirm+0xba>
    bad4:	2201      	movs	r2, #1
    bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bad8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bada:	2300      	movs	r3, #0
}
    badc:	4618      	mov	r0, r3
    bade:	3730      	adds	r7, #48	; 0x30
    bae0:	46bd      	mov	sp, r7
    bae2:	bd80      	pop	{r7, pc}
    bae4:	00002d15 	.word	0x00002d15

0000bae8 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    bae8:	b580      	push	{r7, lr}
    baea:	b08c      	sub	sp, #48	; 0x30
    baec:	af00      	add	r7, sp, #0
    baee:	6078      	str	r0, [r7, #4]
    baf0:	460b      	mov	r3, r1
    baf2:	70fb      	strb	r3, [r7, #3]
    baf4:	4613      	mov	r3, r2
    baf6:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    baf8:	2300      	movs	r3, #0
    bafa:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bafc:	687b      	ldr	r3, [r7, #4]
    bafe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bb00:	687b      	ldr	r3, [r7, #4]
    bb02:	681b      	ldr	r3, [r3, #0]
    bb04:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bb06:	f107 030c 	add.w	r3, r7, #12
    bb0a:	2200      	movs	r2, #0
    bb0c:	601a      	str	r2, [r3, #0]
    bb0e:	605a      	str	r2, [r3, #4]
    bb10:	609a      	str	r2, [r3, #8]
    bb12:	60da      	str	r2, [r3, #12]
    bb14:	611a      	str	r2, [r3, #16]
    bb16:	615a      	str	r2, [r3, #20]
    bb18:	78fb      	ldrb	r3, [r7, #3]
    bb1a:	f003 0307 	and.w	r3, r3, #7
    bb1e:	b2da      	uxtb	r2, r3
    bb20:	7b3b      	ldrb	r3, [r7, #12]
    bb22:	f362 0302 	bfi	r3, r2, #0, #3
    bb26:	733b      	strb	r3, [r7, #12]
    bb28:	7b3b      	ldrb	r3, [r7, #12]
    bb2a:	f043 0310 	orr.w	r3, r3, #16
    bb2e:	733b      	strb	r3, [r7, #12]
    bb30:	7b3b      	ldrb	r3, [r7, #12]
    bb32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bb36:	733b      	strb	r3, [r7, #12]
    bb38:	78bb      	ldrb	r3, [r7, #2]
    bb3a:	743b      	strb	r3, [r7, #16]
    bb3c:	2301      	movs	r3, #1
    bb3e:	61bb      	str	r3, [r7, #24]
    bb40:	f107 0324 	add.w	r3, r7, #36	; 0x24
    bb44:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb48:	7b5b      	ldrb	r3, [r3, #13]
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	d003      	beq.n	bb56 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    bb4e:	2100      	movs	r1, #0
    bb50:	6878      	ldr	r0, [r7, #4]
    bb52:	4b0a      	ldr	r3, [pc, #40]	; (bb7c <n25q256a_read_reg+0x94>)
    bb54:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bb56:	f107 030c 	add.w	r3, r7, #12
    bb5a:	4619      	mov	r1, r3
    bb5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bb5e:	4b08      	ldr	r3, [pc, #32]	; (bb80 <n25q256a_read_reg+0x98>)
    bb60:	4798      	blx	r3
	if (n25q->xip_mode) {
    bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb64:	7b5b      	ldrb	r3, [r3, #13]
    bb66:	2b00      	cmp	r3, #0
    bb68:	d003      	beq.n	bb72 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    bb6a:	2101      	movs	r1, #1
    bb6c:	6878      	ldr	r0, [r7, #4]
    bb6e:	4b03      	ldr	r3, [pc, #12]	; (bb7c <n25q256a_read_reg+0x94>)
    bb70:	4798      	blx	r3
	}
	return status;
    bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    bb74:	4618      	mov	r0, r3
    bb76:	3730      	adds	r7, #48	; 0x30
    bb78:	46bd      	mov	sp, r7
    bb7a:	bd80      	pop	{r7, pc}
    bb7c:	0000ba1d 	.word	0x0000ba1d
    bb80:	00002d15 	.word	0x00002d15

0000bb84 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    bb84:	b580      	push	{r7, lr}
    bb86:	b08c      	sub	sp, #48	; 0x30
    bb88:	af00      	add	r7, sp, #0
    bb8a:	60f8      	str	r0, [r7, #12]
    bb8c:	607b      	str	r3, [r7, #4]
    bb8e:	460b      	mov	r3, r1
    bb90:	72fb      	strb	r3, [r7, #11]
    bb92:	4613      	mov	r3, r2
    bb94:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bb96:	68fb      	ldr	r3, [r7, #12]
    bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bb9a:	68fb      	ldr	r3, [r7, #12]
    bb9c:	681b      	ldr	r3, [r3, #0]
    bb9e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    bba0:	f107 0310 	add.w	r3, r7, #16
    bba4:	2200      	movs	r2, #0
    bba6:	601a      	str	r2, [r3, #0]
    bba8:	605a      	str	r2, [r3, #4]
    bbaa:	609a      	str	r2, [r3, #8]
    bbac:	60da      	str	r2, [r3, #12]
    bbae:	611a      	str	r2, [r3, #16]
    bbb0:	615a      	str	r2, [r3, #20]
    bbb2:	7afb      	ldrb	r3, [r7, #11]
    bbb4:	f003 0307 	and.w	r3, r3, #7
    bbb8:	b2da      	uxtb	r2, r3
    bbba:	7c3b      	ldrb	r3, [r7, #16]
    bbbc:	f362 0302 	bfi	r3, r2, #0, #3
    bbc0:	743b      	strb	r3, [r7, #16]
    bbc2:	7c3b      	ldrb	r3, [r7, #16]
    bbc4:	f043 0310 	orr.w	r3, r3, #16
    bbc8:	743b      	strb	r3, [r7, #16]
    bbca:	7c3b      	ldrb	r3, [r7, #16]
    bbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bbd0:	743b      	strb	r3, [r7, #16]
    bbd2:	7c7b      	ldrb	r3, [r7, #17]
    bbd4:	2202      	movs	r2, #2
    bbd6:	f362 1305 	bfi	r3, r2, #4, #2
    bbda:	747b      	strb	r3, [r7, #17]
    bbdc:	7abb      	ldrb	r3, [r7, #10]
    bbde:	753b      	strb	r3, [r7, #20]
    bbe0:	2301      	movs	r3, #1
    bbe2:	61fb      	str	r3, [r7, #28]
    bbe4:	1d3b      	adds	r3, r7, #4
    bbe6:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bbea:	7b5b      	ldrb	r3, [r3, #13]
    bbec:	2b00      	cmp	r3, #0
    bbee:	d003      	beq.n	bbf8 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    bbf0:	2100      	movs	r1, #0
    bbf2:	68f8      	ldr	r0, [r7, #12]
    bbf4:	4b09      	ldr	r3, [pc, #36]	; (bc1c <n25q256a_write_reg+0x98>)
    bbf6:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bbf8:	f107 0310 	add.w	r3, r7, #16
    bbfc:	4619      	mov	r1, r3
    bbfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bc00:	4b07      	ldr	r3, [pc, #28]	; (bc20 <n25q256a_write_reg+0x9c>)
    bc02:	4798      	blx	r3
	if (n25q->xip_mode) {
    bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc06:	7b5b      	ldrb	r3, [r3, #13]
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d003      	beq.n	bc14 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bc0c:	2101      	movs	r1, #1
    bc0e:	68f8      	ldr	r0, [r7, #12]
    bc10:	4b02      	ldr	r3, [pc, #8]	; (bc1c <n25q256a_write_reg+0x98>)
    bc12:	4798      	blx	r3
	}
}
    bc14:	bf00      	nop
    bc16:	3730      	adds	r7, #48	; 0x30
    bc18:	46bd      	mov	sp, r7
    bc1a:	bd80      	pop	{r7, pc}
    bc1c:	0000ba1d 	.word	0x0000ba1d
    bc20:	00002d15 	.word	0x00002d15

0000bc24 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bc24:	b580      	push	{r7, lr}
    bc26:	b090      	sub	sp, #64	; 0x40
    bc28:	af00      	add	r7, sp, #0
    bc2a:	6078      	str	r0, [r7, #4]
    bc2c:	460b      	mov	r3, r1
    bc2e:	70fb      	strb	r3, [r7, #3]
    bc30:	4613      	mov	r3, r2
    bc32:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bc34:	687b      	ldr	r3, [r7, #4]
    bc36:	681b      	ldr	r3, [r3, #0]
    bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bc3a:	78bb      	ldrb	r3, [r7, #2]
    bc3c:	2b00      	cmp	r3, #0
    bc3e:	d001      	beq.n	bc44 <n25q256a_write_enable+0x20>
    bc40:	2306      	movs	r3, #6
    bc42:	e000      	b.n	bc46 <n25q256a_write_enable+0x22>
    bc44:	2304      	movs	r3, #4
    bc46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bc4a:	f107 0320 	add.w	r3, r7, #32
    bc4e:	2200      	movs	r2, #0
    bc50:	601a      	str	r2, [r3, #0]
    bc52:	605a      	str	r2, [r3, #4]
    bc54:	609a      	str	r2, [r3, #8]
    bc56:	60da      	str	r2, [r3, #12]
    bc58:	611a      	str	r2, [r3, #16]
    bc5a:	615a      	str	r2, [r3, #20]
    bc5c:	78fb      	ldrb	r3, [r7, #3]
    bc5e:	f003 0307 	and.w	r3, r3, #7
    bc62:	b2da      	uxtb	r2, r3
    bc64:	f897 3020 	ldrb.w	r3, [r7, #32]
    bc68:	f362 0302 	bfi	r3, r2, #0, #3
    bc6c:	f887 3020 	strb.w	r3, [r7, #32]
    bc70:	f897 3020 	ldrb.w	r3, [r7, #32]
    bc74:	f043 0310 	orr.w	r3, r3, #16
    bc78:	f887 3020 	strb.w	r3, [r7, #32]
    bc7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bc80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bc84:	f107 0308 	add.w	r3, r7, #8
    bc88:	2200      	movs	r2, #0
    bc8a:	601a      	str	r2, [r3, #0]
    bc8c:	605a      	str	r2, [r3, #4]
    bc8e:	609a      	str	r2, [r3, #8]
    bc90:	60da      	str	r2, [r3, #12]
    bc92:	611a      	str	r2, [r3, #16]
    bc94:	615a      	str	r2, [r3, #20]
    bc96:	78fb      	ldrb	r3, [r7, #3]
    bc98:	f003 0307 	and.w	r3, r3, #7
    bc9c:	b2da      	uxtb	r2, r3
    bc9e:	7a3b      	ldrb	r3, [r7, #8]
    bca0:	f362 0302 	bfi	r3, r2, #0, #3
    bca4:	723b      	strb	r3, [r7, #8]
    bca6:	7a3b      	ldrb	r3, [r7, #8]
    bca8:	f043 0310 	orr.w	r3, r3, #16
    bcac:	723b      	strb	r3, [r7, #8]
    bcae:	7a3b      	ldrb	r3, [r7, #8]
    bcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bcb4:	723b      	strb	r3, [r7, #8]
    bcb6:	2305      	movs	r3, #5
    bcb8:	733b      	strb	r3, [r7, #12]
    bcba:	2301      	movs	r3, #1
    bcbc:	617b      	str	r3, [r7, #20]
    bcbe:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    bcc2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bcc4:	f107 0320 	add.w	r3, r7, #32
    bcc8:	4619      	mov	r1, r3
    bcca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bccc:	4b08      	ldr	r3, [pc, #32]	; (bcf0 <n25q256a_write_enable+0xcc>)
    bcce:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bcd0:	f107 0308 	add.w	r3, r7, #8
    bcd4:	4619      	mov	r1, r3
    bcd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bcd8:	4b05      	ldr	r3, [pc, #20]	; (bcf0 <n25q256a_write_enable+0xcc>)
    bcda:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bcdc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bce0:	f003 0302 	and.w	r3, r3, #2
    bce4:	2b00      	cmp	r3, #0
    bce6:	d0ed      	beq.n	bcc4 <n25q256a_write_enable+0xa0>
}
    bce8:	bf00      	nop
    bcea:	3740      	adds	r7, #64	; 0x40
    bcec:	46bd      	mov	sp, r7
    bcee:	bd80      	pop	{r7, pc}
    bcf0:	00002d15 	.word	0x00002d15

0000bcf4 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bcf4:	b590      	push	{r4, r7, lr}
    bcf6:	b087      	sub	sp, #28
    bcf8:	af00      	add	r7, sp, #0
    bcfa:	6078      	str	r0, [r7, #4]
    bcfc:	460b      	mov	r3, r1
    bcfe:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bd00:	687b      	ldr	r3, [r7, #4]
    bd02:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd04:	68fb      	ldr	r3, [r7, #12]
    bd06:	7b1b      	ldrb	r3, [r3, #12]
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d001      	beq.n	bd10 <n25q256a_switch_mode+0x1c>
    bd0c:	2306      	movs	r3, #6
    bd0e:	e000      	b.n	bd12 <n25q256a_switch_mode+0x1e>
    bd10:	2300      	movs	r3, #0
    bd12:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bd14:	7afb      	ldrb	r3, [r7, #11]
    bd16:	2265      	movs	r2, #101	; 0x65
    bd18:	4619      	mov	r1, r3
    bd1a:	6878      	ldr	r0, [r7, #4]
    bd1c:	4b25      	ldr	r3, [pc, #148]	; (bdb4 <n25q256a_switch_mode+0xc0>)
    bd1e:	4798      	blx	r3
    bd20:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    bd22:	2300      	movs	r3, #0
    bd24:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    bd26:	68fb      	ldr	r3, [r7, #12]
    bd28:	7b1b      	ldrb	r3, [r3, #12]
    bd2a:	78fa      	ldrb	r2, [r7, #3]
    bd2c:	429a      	cmp	r2, r3
    bd2e:	d03d      	beq.n	bdac <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    bd30:	78fb      	ldrb	r3, [r7, #3]
    bd32:	2b00      	cmp	r3, #0
    bd34:	d00b      	beq.n	bd4e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    bd36:	697b      	ldr	r3, [r7, #20]
    bd38:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd3c:	2b00      	cmp	r3, #0
    bd3e:	d011      	beq.n	bd64 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    bd40:	697b      	ldr	r3, [r7, #20]
    bd42:	f003 031f 	and.w	r3, r3, #31
    bd46:	617b      	str	r3, [r7, #20]
			modify = 1;
    bd48:	2301      	movs	r3, #1
    bd4a:	74fb      	strb	r3, [r7, #19]
    bd4c:	e00a      	b.n	bd64 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    bd4e:	697b      	ldr	r3, [r7, #20]
    bd50:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd54:	2b00      	cmp	r3, #0
    bd56:	d105      	bne.n	bd64 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    bd58:	697b      	ldr	r3, [r7, #20]
    bd5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    bd5e:	617b      	str	r3, [r7, #20]
			modify = 1;
    bd60:	2301      	movs	r3, #1
    bd62:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    bd64:	7cfb      	ldrb	r3, [r7, #19]
    bd66:	2b00      	cmp	r3, #0
    bd68:	d021      	beq.n	bdae <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    bd6a:	68fb      	ldr	r3, [r7, #12]
    bd6c:	78fa      	ldrb	r2, [r7, #3]
    bd6e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    bd70:	7afb      	ldrb	r3, [r7, #11]
    bd72:	2201      	movs	r2, #1
    bd74:	4619      	mov	r1, r3
    bd76:	6878      	ldr	r0, [r7, #4]
    bd78:	4b0f      	ldr	r3, [pc, #60]	; (bdb8 <n25q256a_switch_mode+0xc4>)
    bd7a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    bd7c:	7af9      	ldrb	r1, [r7, #11]
    bd7e:	697b      	ldr	r3, [r7, #20]
    bd80:	2261      	movs	r2, #97	; 0x61
    bd82:	6878      	ldr	r0, [r7, #4]
    bd84:	4c0d      	ldr	r4, [pc, #52]	; (bdbc <n25q256a_switch_mode+0xc8>)
    bd86:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd88:	78fb      	ldrb	r3, [r7, #3]
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	d001      	beq.n	bd92 <n25q256a_switch_mode+0x9e>
    bd8e:	2306      	movs	r3, #6
    bd90:	e000      	b.n	bd94 <n25q256a_switch_mode+0xa0>
    bd92:	2300      	movs	r3, #0
    bd94:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bd96:	7afb      	ldrb	r3, [r7, #11]
    bd98:	2265      	movs	r2, #101	; 0x65
    bd9a:	4619      	mov	r1, r3
    bd9c:	6878      	ldr	r0, [r7, #4]
    bd9e:	4b05      	ldr	r3, [pc, #20]	; (bdb4 <n25q256a_switch_mode+0xc0>)
    bda0:	4798      	blx	r3
    bda2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    bda4:	68fb      	ldr	r3, [r7, #12]
    bda6:	78fa      	ldrb	r2, [r7, #3]
    bda8:	731a      	strb	r2, [r3, #12]
    bdaa:	e000      	b.n	bdae <n25q256a_switch_mode+0xba>
		return;
    bdac:	bf00      	nop
	}
}
    bdae:	371c      	adds	r7, #28
    bdb0:	46bd      	mov	sp, r7
    bdb2:	bd90      	pop	{r4, r7, pc}
    bdb4:	0000bae9 	.word	0x0000bae9
    bdb8:	0000bc25 	.word	0x0000bc25
    bdbc:	0000bb85 	.word	0x0000bb85

0000bdc0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    bdc0:	b580      	push	{r7, lr}
    bdc2:	b086      	sub	sp, #24
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	60f8      	str	r0, [r7, #12]
    bdc8:	60b9      	str	r1, [r7, #8]
    bdca:	607a      	str	r2, [r7, #4]
    bdcc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    bdce:	68fb      	ldr	r3, [r7, #12]
    bdd0:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    bdd2:	4a0c      	ldr	r2, [pc, #48]	; (be04 <n25q256a_construct+0x44>)
    bdd4:	68b9      	ldr	r1, [r7, #8]
    bdd6:	68f8      	ldr	r0, [r7, #12]
    bdd8:	4b0b      	ldr	r3, [pc, #44]	; (be08 <n25q256a_construct+0x48>)
    bdda:	4798      	blx	r3
	n25q->quad_mode    = 0;
    bddc:	697b      	ldr	r3, [r7, #20]
    bdde:	2200      	movs	r2, #0
    bde0:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    bde2:	697b      	ldr	r3, [r7, #20]
    bde4:	2200      	movs	r2, #0
    bde6:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    bde8:	697b      	ldr	r3, [r7, #20]
    bdea:	687a      	ldr	r2, [r7, #4]
    bdec:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    bdee:	78fb      	ldrb	r3, [r7, #3]
    bdf0:	4619      	mov	r1, r3
    bdf2:	68f8      	ldr	r0, [r7, #12]
    bdf4:	4b05      	ldr	r3, [pc, #20]	; (be0c <n25q256a_construct+0x4c>)
    bdf6:	4798      	blx	r3
	return me;
    bdf8:	68fb      	ldr	r3, [r7, #12]
}
    bdfa:	4618      	mov	r0, r3
    bdfc:	3718      	adds	r7, #24
    bdfe:	46bd      	mov	sp, r7
    be00:	bd80      	pop	{r7, pc}
    be02:	bf00      	nop
    be04:	0001342c 	.word	0x0001342c
    be08:	0000c29d 	.word	0x0000c29d
    be0c:	0000bcf5 	.word	0x0000bcf5

0000be10 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    be10:	b580      	push	{r7, lr}
    be12:	b08c      	sub	sp, #48	; 0x30
    be14:	af00      	add	r7, sp, #0
    be16:	60f8      	str	r0, [r7, #12]
    be18:	60b9      	str	r1, [r7, #8]
    be1a:	607a      	str	r2, [r7, #4]
    be1c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    be1e:	68fb      	ldr	r3, [r7, #12]
    be20:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    be22:	68fb      	ldr	r3, [r7, #12]
    be24:	681b      	ldr	r3, [r3, #0]
    be26:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    be28:	f107 0310 	add.w	r3, r7, #16
    be2c:	2200      	movs	r2, #0
    be2e:	601a      	str	r2, [r3, #0]
    be30:	605a      	str	r2, [r3, #4]
    be32:	609a      	str	r2, [r3, #8]
    be34:	60da      	str	r2, [r3, #12]
    be36:	611a      	str	r2, [r3, #16]
    be38:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    be3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be3c:	7b1b      	ldrb	r3, [r3, #12]
    be3e:	2b00      	cmp	r3, #0
    be40:	d001      	beq.n	be46 <n25q256a_read+0x36>
    be42:	2206      	movs	r2, #6
    be44:	e000      	b.n	be48 <n25q256a_read+0x38>
    be46:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    be48:	7c3b      	ldrb	r3, [r7, #16]
    be4a:	f362 0302 	bfi	r3, r2, #0, #3
    be4e:	743b      	strb	r3, [r7, #16]
    be50:	7c3b      	ldrb	r3, [r7, #16]
    be52:	f043 0310 	orr.w	r3, r3, #16
    be56:	743b      	strb	r3, [r7, #16]
    be58:	7c3b      	ldrb	r3, [r7, #16]
    be5a:	f043 0320 	orr.w	r3, r3, #32
    be5e:	743b      	strb	r3, [r7, #16]
    be60:	7c3b      	ldrb	r3, [r7, #16]
    be62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be66:	743b      	strb	r3, [r7, #16]
    be68:	7c7b      	ldrb	r3, [r7, #17]
    be6a:	2201      	movs	r2, #1
    be6c:	f362 1305 	bfi	r3, r2, #4, #2
    be70:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be74:	7b1b      	ldrb	r3, [r3, #12]
    be76:	2b00      	cmp	r3, #0
    be78:	d001      	beq.n	be7e <n25q256a_read+0x6e>
    be7a:	220a      	movs	r2, #10
    be7c:	e000      	b.n	be80 <n25q256a_read+0x70>
    be7e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    be80:	7cbb      	ldrb	r3, [r7, #18]
    be82:	f362 0304 	bfi	r3, r2, #0, #5
    be86:	74bb      	strb	r3, [r7, #18]
    be88:	230b      	movs	r3, #11
    be8a:	753b      	strb	r3, [r7, #20]
    be8c:	687b      	ldr	r3, [r7, #4]
    be8e:	61bb      	str	r3, [r7, #24]
    be90:	683b      	ldr	r3, [r7, #0]
    be92:	61fb      	str	r3, [r7, #28]
    be94:	68bb      	ldr	r3, [r7, #8]
    be96:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    be98:	f107 0310 	add.w	r3, r7, #16
    be9c:	4619      	mov	r1, r3
    be9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bea0:	4b03      	ldr	r3, [pc, #12]	; (beb0 <n25q256a_read+0xa0>)
    bea2:	4798      	blx	r3
	return ERR_NONE;
    bea4:	2300      	movs	r3, #0
}
    bea6:	4618      	mov	r0, r3
    bea8:	3730      	adds	r7, #48	; 0x30
    beaa:	46bd      	mov	sp, r7
    beac:	bd80      	pop	{r7, pc}
    beae:	bf00      	nop
    beb0:	00002d15 	.word	0x00002d15

0000beb4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    beb4:	b580      	push	{r7, lr}
    beb6:	b08c      	sub	sp, #48	; 0x30
    beb8:	af00      	add	r7, sp, #0
    beba:	60f8      	str	r0, [r7, #12]
    bebc:	60b9      	str	r1, [r7, #8]
    bebe:	607a      	str	r2, [r7, #4]
    bec0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bec2:	68fb      	ldr	r3, [r7, #12]
    bec4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bec6:	68fb      	ldr	r3, [r7, #12]
    bec8:	681b      	ldr	r3, [r3, #0]
    beca:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    becc:	f107 0310 	add.w	r3, r7, #16
    bed0:	2200      	movs	r2, #0
    bed2:	601a      	str	r2, [r3, #0]
    bed4:	605a      	str	r2, [r3, #4]
    bed6:	609a      	str	r2, [r3, #8]
    bed8:	60da      	str	r2, [r3, #12]
    beda:	611a      	str	r2, [r3, #16]
    bedc:	615a      	str	r2, [r3, #20]
    bede:	7c3b      	ldrb	r3, [r7, #16]
    bee0:	f043 0310 	orr.w	r3, r3, #16
    bee4:	743b      	strb	r3, [r7, #16]
    bee6:	7c3b      	ldrb	r3, [r7, #16]
    bee8:	f043 0320 	orr.w	r3, r3, #32
    beec:	743b      	strb	r3, [r7, #16]
    beee:	7c3b      	ldrb	r3, [r7, #16]
    bef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bef4:	743b      	strb	r3, [r7, #16]
    bef6:	7c7b      	ldrb	r3, [r7, #17]
    bef8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    befc:	747b      	strb	r3, [r7, #17]
    befe:	2302      	movs	r3, #2
    bf00:	753b      	strb	r3, [r7, #20]
    bf02:	687b      	ldr	r3, [r7, #4]
    bf04:	61bb      	str	r3, [r7, #24]
    bf06:	683b      	ldr	r3, [r7, #0]
    bf08:	61fb      	str	r3, [r7, #28]
    bf0a:	68bb      	ldr	r3, [r7, #8]
    bf0c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf10:	7b1b      	ldrb	r3, [r3, #12]
    bf12:	2b00      	cmp	r3, #0
    bf14:	d001      	beq.n	bf1a <n25q256a_write+0x66>
    bf16:	2206      	movs	r2, #6
    bf18:	e000      	b.n	bf1c <n25q256a_write+0x68>
    bf1a:	2200      	movs	r2, #0
    bf1c:	7c3b      	ldrb	r3, [r7, #16]
    bf1e:	f362 0302 	bfi	r3, r2, #0, #3
    bf22:	743b      	strb	r3, [r7, #16]
	while (length) {
    bf24:	e035      	b.n	bf92 <n25q256a_write+0xde>
		cmd.address = address;
    bf26:	687b      	ldr	r3, [r7, #4]
    bf28:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    bf2a:	683b      	ldr	r3, [r7, #0]
    bf2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bf30:	d802      	bhi.n	bf38 <n25q256a_write+0x84>
			cmd.buf_len = length;
    bf32:	683b      	ldr	r3, [r7, #0]
    bf34:	61fb      	str	r3, [r7, #28]
    bf36:	e002      	b.n	bf3e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    bf38:	f44f 7380 	mov.w	r3, #256	; 0x100
    bf3c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bf3e:	7c3b      	ldrb	r3, [r7, #16]
    bf40:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf44:	b2db      	uxtb	r3, r3
    bf46:	2201      	movs	r2, #1
    bf48:	4619      	mov	r1, r3
    bf4a:	68f8      	ldr	r0, [r7, #12]
    bf4c:	4b19      	ldr	r3, [pc, #100]	; (bfb4 <n25q256a_write+0x100>)
    bf4e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    bf50:	f107 0310 	add.w	r3, r7, #16
    bf54:	4619      	mov	r1, r3
    bf56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bf58:	4b17      	ldr	r3, [pc, #92]	; (bfb8 <n25q256a_write+0x104>)
    bf5a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bf5c:	bf00      	nop
    bf5e:	7c3b      	ldrb	r3, [r7, #16]
    bf60:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf64:	b2db      	uxtb	r3, r3
    bf66:	2270      	movs	r2, #112	; 0x70
    bf68:	4619      	mov	r1, r3
    bf6a:	68f8      	ldr	r0, [r7, #12]
    bf6c:	4b13      	ldr	r3, [pc, #76]	; (bfbc <n25q256a_write+0x108>)
    bf6e:	4798      	blx	r3
    bf70:	4603      	mov	r3, r0
    bf72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf76:	2b00      	cmp	r3, #0
    bf78:	d0f1      	beq.n	bf5e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    bf7a:	6a3a      	ldr	r2, [r7, #32]
    bf7c:	69fb      	ldr	r3, [r7, #28]
    bf7e:	4413      	add	r3, r2
    bf80:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    bf82:	69fb      	ldr	r3, [r7, #28]
    bf84:	683a      	ldr	r2, [r7, #0]
    bf86:	1ad3      	subs	r3, r2, r3
    bf88:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    bf8a:	69fb      	ldr	r3, [r7, #28]
    bf8c:	687a      	ldr	r2, [r7, #4]
    bf8e:	4413      	add	r3, r2
    bf90:	607b      	str	r3, [r7, #4]
	while (length) {
    bf92:	683b      	ldr	r3, [r7, #0]
    bf94:	2b00      	cmp	r3, #0
    bf96:	d1c6      	bne.n	bf26 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf9a:	7b5b      	ldrb	r3, [r3, #13]
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d003      	beq.n	bfa8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bfa0:	2101      	movs	r1, #1
    bfa2:	68f8      	ldr	r0, [r7, #12]
    bfa4:	4b06      	ldr	r3, [pc, #24]	; (bfc0 <n25q256a_write+0x10c>)
    bfa6:	4798      	blx	r3
	}
	return ERR_NONE;
    bfa8:	2300      	movs	r3, #0
}
    bfaa:	4618      	mov	r0, r3
    bfac:	3730      	adds	r7, #48	; 0x30
    bfae:	46bd      	mov	sp, r7
    bfb0:	bd80      	pop	{r7, pc}
    bfb2:	bf00      	nop
    bfb4:	0000bc25 	.word	0x0000bc25
    bfb8:	00002d15 	.word	0x00002d15
    bfbc:	0000bae9 	.word	0x0000bae9
    bfc0:	0000ba1d 	.word	0x0000ba1d

0000bfc4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bfc4:	b580      	push	{r7, lr}
    bfc6:	b090      	sub	sp, #64	; 0x40
    bfc8:	af00      	add	r7, sp, #0
    bfca:	60f8      	str	r0, [r7, #12]
    bfcc:	60b9      	str	r1, [r7, #8]
    bfce:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bfd0:	68fb      	ldr	r3, [r7, #12]
    bfd2:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bfd4:	68fb      	ldr	r3, [r7, #12]
    bfd6:	681b      	ldr	r3, [r3, #0]
    bfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bfda:	f107 0314 	add.w	r3, r7, #20
    bfde:	2200      	movs	r2, #0
    bfe0:	601a      	str	r2, [r3, #0]
    bfe2:	605a      	str	r2, [r3, #4]
    bfe4:	609a      	str	r2, [r3, #8]
    bfe6:	60da      	str	r2, [r3, #12]
    bfe8:	611a      	str	r2, [r3, #16]
    bfea:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bfee:	7b1b      	ldrb	r3, [r3, #12]
    bff0:	2b00      	cmp	r3, #0
    bff2:	d001      	beq.n	bff8 <n25q256a_erase+0x34>
    bff4:	2206      	movs	r2, #6
    bff6:	e000      	b.n	bffa <n25q256a_erase+0x36>
    bff8:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bffa:	7d3b      	ldrb	r3, [r7, #20]
    bffc:	f362 0302 	bfi	r3, r2, #0, #3
    c000:	753b      	strb	r3, [r7, #20]
    c002:	7d3b      	ldrb	r3, [r7, #20]
    c004:	f043 0310 	orr.w	r3, r3, #16
    c008:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c00a:	687b      	ldr	r3, [r7, #4]
    c00c:	4a56      	ldr	r2, [pc, #344]	; (c168 <n25q256a_erase+0x1a4>)
    c00e:	4293      	cmp	r3, r2
    c010:	bf94      	ite	ls
    c012:	2301      	movls	r3, #1
    c014:	2300      	movhi	r3, #0
    c016:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c018:	7d3b      	ldrb	r3, [r7, #20]
    c01a:	f362 1345 	bfi	r3, r2, #5, #1
    c01e:	753b      	strb	r3, [r7, #20]
    c020:	7d7b      	ldrb	r3, [r7, #21]
    c022:	2202      	movs	r2, #2
    c024:	f362 1305 	bfi	r3, r2, #4, #2
    c028:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c02a:	68bb      	ldr	r3, [r7, #8]
    c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c02e:	687b      	ldr	r3, [r7, #4]
    c030:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c032:	2300      	movs	r3, #0
    c034:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c036:	687b      	ldr	r3, [r7, #4]
    c038:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c03c:	2b00      	cmp	r3, #0
    c03e:	d104      	bne.n	c04a <n25q256a_erase+0x86>
    c040:	68bb      	ldr	r3, [r7, #8]
    c042:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c046:	2b00      	cmp	r3, #0
    c048:	d002      	beq.n	c050 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c04a:	f06f 030c 	mvn.w	r3, #12
    c04e:	e087      	b.n	c160 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c050:	687b      	ldr	r3, [r7, #4]
    c052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c056:	d368      	bcc.n	c12a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c058:	23c7      	movs	r3, #199	; 0xc7
    c05a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c05c:	7d3b      	ldrb	r3, [r7, #20]
    c05e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c062:	b2db      	uxtb	r3, r3
    c064:	2201      	movs	r2, #1
    c066:	4619      	mov	r1, r3
    c068:	68f8      	ldr	r0, [r7, #12]
    c06a:	4b40      	ldr	r3, [pc, #256]	; (c16c <n25q256a_erase+0x1a8>)
    c06c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c06e:	f107 0314 	add.w	r3, r7, #20
    c072:	4619      	mov	r1, r3
    c074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c076:	4b3e      	ldr	r3, [pc, #248]	; (c170 <n25q256a_erase+0x1ac>)
    c078:	4798      	blx	r3
    c07a:	e059      	b.n	c130 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c07e:	b29b      	uxth	r3, r3
    c080:	2b00      	cmp	r3, #0
    c082:	d11f      	bne.n	c0c4 <n25q256a_erase+0x100>
    c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c08a:	d31b      	bcc.n	c0c4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c08e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c090:	23d8      	movs	r3, #216	; 0xd8
    c092:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c094:	7d3b      	ldrb	r3, [r7, #20]
    c096:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c09a:	b2db      	uxtb	r3, r3
    c09c:	2201      	movs	r2, #1
    c09e:	4619      	mov	r1, r3
    c0a0:	68f8      	ldr	r0, [r7, #12]
    c0a2:	4b32      	ldr	r3, [pc, #200]	; (c16c <n25q256a_erase+0x1a8>)
    c0a4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c0a6:	f107 0314 	add.w	r3, r7, #20
    c0aa:	4619      	mov	r1, r3
    c0ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c0ae:	4b30      	ldr	r3, [pc, #192]	; (c170 <n25q256a_erase+0x1ac>)
    c0b0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c0b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c0bc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c0c0:	63bb      	str	r3, [r7, #56]	; 0x38
    c0c2:	e023      	b.n	c10c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c0ca:	d31b      	bcc.n	c104 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c0ce:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c0d0:	2320      	movs	r3, #32
    c0d2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c0d4:	7d3b      	ldrb	r3, [r7, #20]
    c0d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c0da:	b2db      	uxtb	r3, r3
    c0dc:	2201      	movs	r2, #1
    c0de:	4619      	mov	r1, r3
    c0e0:	68f8      	ldr	r0, [r7, #12]
    c0e2:	4b22      	ldr	r3, [pc, #136]	; (c16c <n25q256a_erase+0x1a8>)
    c0e4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c0e6:	f107 0314 	add.w	r3, r7, #20
    c0ea:	4619      	mov	r1, r3
    c0ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c0ee:	4b20      	ldr	r3, [pc, #128]	; (c170 <n25q256a_erase+0x1ac>)
    c0f0:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c0fc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c100:	63bb      	str	r3, [r7, #56]	; 0x38
    c102:	e003      	b.n	c10c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c104:	f06f 030c 	mvn.w	r3, #12
    c108:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c10a:	e011      	b.n	c130 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c10c:	bf00      	nop
    c10e:	7d3b      	ldrb	r3, [r7, #20]
    c110:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c114:	b2db      	uxtb	r3, r3
    c116:	2270      	movs	r2, #112	; 0x70
    c118:	4619      	mov	r1, r3
    c11a:	68f8      	ldr	r0, [r7, #12]
    c11c:	4b15      	ldr	r3, [pc, #84]	; (c174 <n25q256a_erase+0x1b0>)
    c11e:	4798      	blx	r3
    c120:	4603      	mov	r3, r0
    c122:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c126:	2b00      	cmp	r3, #0
    c128:	d0f1      	beq.n	c10e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c12c:	2b00      	cmp	r3, #0
    c12e:	d1a5      	bne.n	c07c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c130:	bf00      	nop
    c132:	7d3b      	ldrb	r3, [r7, #20]
    c134:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c138:	b2db      	uxtb	r3, r3
    c13a:	2270      	movs	r2, #112	; 0x70
    c13c:	4619      	mov	r1, r3
    c13e:	68f8      	ldr	r0, [r7, #12]
    c140:	4b0c      	ldr	r3, [pc, #48]	; (c174 <n25q256a_erase+0x1b0>)
    c142:	4798      	blx	r3
    c144:	4603      	mov	r3, r0
    c146:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c14a:	2b00      	cmp	r3, #0
    c14c:	d0f1      	beq.n	c132 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c150:	7b5b      	ldrb	r3, [r3, #13]
    c152:	2b00      	cmp	r3, #0
    c154:	d003      	beq.n	c15e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c156:	2101      	movs	r1, #1
    c158:	68f8      	ldr	r0, [r7, #12]
    c15a:	4b07      	ldr	r3, [pc, #28]	; (c178 <n25q256a_erase+0x1b4>)
    c15c:	4798      	blx	r3
	}
	return rc;
    c15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c160:	4618      	mov	r0, r3
    c162:	3740      	adds	r7, #64	; 0x40
    c164:	46bd      	mov	sp, r7
    c166:	bd80      	pop	{r7, pc}
    c168:	001fffff 	.word	0x001fffff
    c16c:	0000bc25 	.word	0x0000bc25
    c170:	00002d15 	.word	0x00002d15
    c174:	0000bae9 	.word	0x0000bae9
    c178:	0000ba1d 	.word	0x0000ba1d

0000c17c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c17c:	b590      	push	{r4, r7, lr}
    c17e:	b085      	sub	sp, #20
    c180:	af00      	add	r7, sp, #0
    c182:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c184:	687b      	ldr	r3, [r7, #4]
    c186:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c188:	68fb      	ldr	r3, [r7, #12]
    c18a:	7b1b      	ldrb	r3, [r3, #12]
    c18c:	2b00      	cmp	r3, #0
    c18e:	d001      	beq.n	c194 <n25q256a_enable_xip+0x18>
    c190:	2306      	movs	r3, #6
    c192:	e000      	b.n	c196 <n25q256a_enable_xip+0x1a>
    c194:	2300      	movs	r3, #0
    c196:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c198:	68fb      	ldr	r3, [r7, #12]
    c19a:	7b5b      	ldrb	r3, [r3, #13]
    c19c:	2b00      	cmp	r3, #0
    c19e:	d129      	bne.n	c1f4 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c1a0:	7afb      	ldrb	r3, [r7, #11]
    c1a2:	2285      	movs	r2, #133	; 0x85
    c1a4:	4619      	mov	r1, r3
    c1a6:	6878      	ldr	r0, [r7, #4]
    c1a8:	4b15      	ldr	r3, [pc, #84]	; (c200 <n25q256a_enable_xip+0x84>)
    c1aa:	4798      	blx	r3
    c1ac:	4603      	mov	r3, r0
    c1ae:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c1b0:	7abb      	ldrb	r3, [r7, #10]
    c1b2:	f003 0308 	and.w	r3, r3, #8
    c1b6:	2b00      	cmp	r3, #0
    c1b8:	d015      	beq.n	c1e6 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c1ba:	7abb      	ldrb	r3, [r7, #10]
    c1bc:	f023 0308 	bic.w	r3, r3, #8
    c1c0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c1c2:	7abb      	ldrb	r3, [r7, #10]
    c1c4:	7af9      	ldrb	r1, [r7, #11]
    c1c6:	2281      	movs	r2, #129	; 0x81
    c1c8:	6878      	ldr	r0, [r7, #4]
    c1ca:	4c0e      	ldr	r4, [pc, #56]	; (c204 <n25q256a_enable_xip+0x88>)
    c1cc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c1ce:	bf00      	nop
    c1d0:	7afb      	ldrb	r3, [r7, #11]
    c1d2:	2270      	movs	r2, #112	; 0x70
    c1d4:	4619      	mov	r1, r3
    c1d6:	6878      	ldr	r0, [r7, #4]
    c1d8:	4b09      	ldr	r3, [pc, #36]	; (c200 <n25q256a_enable_xip+0x84>)
    c1da:	4798      	blx	r3
    c1dc:	4603      	mov	r3, r0
    c1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d0f4      	beq.n	c1d0 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c1e6:	68fb      	ldr	r3, [r7, #12]
    c1e8:	2201      	movs	r2, #1
    c1ea:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c1ec:	2101      	movs	r1, #1
    c1ee:	6878      	ldr	r0, [r7, #4]
    c1f0:	4b05      	ldr	r3, [pc, #20]	; (c208 <n25q256a_enable_xip+0x8c>)
    c1f2:	4798      	blx	r3
	}
	return ERR_NONE;
    c1f4:	2300      	movs	r3, #0
}
    c1f6:	4618      	mov	r0, r3
    c1f8:	3714      	adds	r7, #20
    c1fa:	46bd      	mov	sp, r7
    c1fc:	bd90      	pop	{r4, r7, pc}
    c1fe:	bf00      	nop
    c200:	0000bae9 	.word	0x0000bae9
    c204:	0000bb85 	.word	0x0000bb85
    c208:	0000ba1d 	.word	0x0000ba1d

0000c20c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c20c:	b580      	push	{r7, lr}
    c20e:	b086      	sub	sp, #24
    c210:	af00      	add	r7, sp, #0
    c212:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c214:	687b      	ldr	r3, [r7, #4]
    c216:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c218:	687b      	ldr	r3, [r7, #4]
    c21a:	681b      	ldr	r3, [r3, #0]
    c21c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c21e:	697b      	ldr	r3, [r7, #20]
    c220:	7b1b      	ldrb	r3, [r3, #12]
    c222:	2b00      	cmp	r3, #0
    c224:	d001      	beq.n	c22a <n25q256a_disable_xip+0x1e>
    c226:	2306      	movs	r3, #6
    c228:	e000      	b.n	c22c <n25q256a_disable_xip+0x20>
    c22a:	2300      	movs	r3, #0
    c22c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c22e:	2100      	movs	r1, #0
    c230:	6878      	ldr	r0, [r7, #4]
    c232:	4b15      	ldr	r3, [pc, #84]	; (c288 <n25q256a_disable_xip+0x7c>)
    c234:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c236:	7bfb      	ldrb	r3, [r7, #15]
    c238:	2285      	movs	r2, #133	; 0x85
    c23a:	4619      	mov	r1, r3
    c23c:	6878      	ldr	r0, [r7, #4]
    c23e:	4b13      	ldr	r3, [pc, #76]	; (c28c <n25q256a_disable_xip+0x80>)
    c240:	4798      	blx	r3
    c242:	4603      	mov	r3, r0
    c244:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c246:	7bbb      	ldrb	r3, [r7, #14]
    c248:	f003 0308 	and.w	r3, r3, #8
    c24c:	2b00      	cmp	r3, #0
    c24e:	d113      	bne.n	c278 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c250:	697b      	ldr	r3, [r7, #20]
    c252:	689b      	ldr	r3, [r3, #8]
    c254:	2b00      	cmp	r3, #0
    c256:	d00f      	beq.n	c278 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c258:	693b      	ldr	r3, [r7, #16]
    c25a:	681b      	ldr	r3, [r3, #0]
    c25c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c25e:	6938      	ldr	r0, [r7, #16]
    c260:	4b0b      	ldr	r3, [pc, #44]	; (c290 <n25q256a_disable_xip+0x84>)
    c262:	4798      	blx	r3
			n25q->pin_exit_xip();
    c264:	697b      	ldr	r3, [r7, #20]
    c266:	689b      	ldr	r3, [r3, #8]
    c268:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c26a:	68b9      	ldr	r1, [r7, #8]
    c26c:	6938      	ldr	r0, [r7, #16]
    c26e:	4b09      	ldr	r3, [pc, #36]	; (c294 <n25q256a_disable_xip+0x88>)
    c270:	4798      	blx	r3
			qspi_sync_enable(descr);
    c272:	6938      	ldr	r0, [r7, #16]
    c274:	4b08      	ldr	r3, [pc, #32]	; (c298 <n25q256a_disable_xip+0x8c>)
    c276:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c278:	697b      	ldr	r3, [r7, #20]
    c27a:	2200      	movs	r2, #0
    c27c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c27e:	2300      	movs	r3, #0
}
    c280:	4618      	mov	r0, r3
    c282:	3718      	adds	r7, #24
    c284:	46bd      	mov	sp, r7
    c286:	bd80      	pop	{r7, pc}
    c288:	0000ba1d 	.word	0x0000ba1d
    c28c:	0000bae9 	.word	0x0000bae9
    c290:	00002cd9 	.word	0x00002cd9
    c294:	00002c51 	.word	0x00002c51
    c298:	00002c9d 	.word	0x00002c9d

0000c29c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c29c:	b480      	push	{r7}
    c29e:	b085      	sub	sp, #20
    c2a0:	af00      	add	r7, sp, #0
    c2a2:	60f8      	str	r0, [r7, #12]
    c2a4:	60b9      	str	r1, [r7, #8]
    c2a6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c2a8:	68fb      	ldr	r3, [r7, #12]
    c2aa:	68ba      	ldr	r2, [r7, #8]
    c2ac:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c2ae:	68fb      	ldr	r3, [r7, #12]
    c2b0:	687a      	ldr	r2, [r7, #4]
    c2b2:	605a      	str	r2, [r3, #4]

	return me;
    c2b4:	68fb      	ldr	r3, [r7, #12]
}
    c2b6:	4618      	mov	r0, r3
    c2b8:	3714      	adds	r7, #20
    c2ba:	46bd      	mov	sp, r7
    c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2c0:	4770      	bx	lr

0000c2c2 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c2c2:	b480      	push	{r7}
    c2c4:	b083      	sub	sp, #12
    c2c6:	af00      	add	r7, sp, #0
    c2c8:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c2ca:	687b      	ldr	r3, [r7, #4]
    c2cc:	781b      	ldrb	r3, [r3, #0]
    c2ce:	b29a      	uxth	r2, r3
    c2d0:	687b      	ldr	r3, [r7, #4]
    c2d2:	3301      	adds	r3, #1
    c2d4:	781b      	ldrb	r3, [r3, #0]
    c2d6:	b29b      	uxth	r3, r3
    c2d8:	021b      	lsls	r3, r3, #8
    c2da:	b29b      	uxth	r3, r3
    c2dc:	4413      	add	r3, r2
    c2de:	b29b      	uxth	r3, r3
}
    c2e0:	4618      	mov	r0, r3
    c2e2:	370c      	adds	r7, #12
    c2e4:	46bd      	mov	sp, r7
    c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2ea:	4770      	bx	lr

0000c2ec <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c2ec:	b480      	push	{r7}
    c2ee:	b083      	sub	sp, #12
    c2f0:	af00      	add	r7, sp, #0
    c2f2:	6078      	str	r0, [r7, #4]
	return desc[0];
    c2f4:	687b      	ldr	r3, [r7, #4]
    c2f6:	781b      	ldrb	r3, [r3, #0]
}
    c2f8:	4618      	mov	r0, r3
    c2fa:	370c      	adds	r7, #12
    c2fc:	46bd      	mov	sp, r7
    c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    c302:	4770      	bx	lr

0000c304 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c304:	b580      	push	{r7, lr}
    c306:	b082      	sub	sp, #8
    c308:	af00      	add	r7, sp, #0
    c30a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c30c:	6878      	ldr	r0, [r7, #4]
    c30e:	4b05      	ldr	r3, [pc, #20]	; (c324 <usb_desc_next+0x20>)
    c310:	4798      	blx	r3
    c312:	4603      	mov	r3, r0
    c314:	461a      	mov	r2, r3
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	4413      	add	r3, r2
}
    c31a:	4618      	mov	r0, r3
    c31c:	3708      	adds	r7, #8
    c31e:	46bd      	mov	sp, r7
    c320:	bd80      	pop	{r7, pc}
    c322:	bf00      	nop
    c324:	0000c2ed 	.word	0x0000c2ed

0000c328 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c328:	b580      	push	{r7, lr}
    c32a:	b08c      	sub	sp, #48	; 0x30
    c32c:	af00      	add	r7, sp, #0
    c32e:	6078      	str	r0, [r7, #4]
    c330:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c332:	687b      	ldr	r3, [r7, #4]
    c334:	689b      	ldr	r3, [r3, #8]
    c336:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c338:	683b      	ldr	r3, [r7, #0]
    c33a:	681b      	ldr	r3, [r3, #0]
    c33c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c33e:	2300      	movs	r3, #0
    c340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c344:	e08f      	b.n	c466 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c348:	2b00      	cmp	r3, #0
    c34a:	d102      	bne.n	c352 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c34c:	f06f 0309 	mvn.w	r3, #9
    c350:	e092      	b.n	c478 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c354:	789b      	ldrb	r3, [r3, #2]
    c356:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c35a:	795b      	ldrb	r3, [r3, #5]
    c35c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c35e:	7c7b      	ldrb	r3, [r7, #17]
    c360:	2b02      	cmp	r3, #2
    c362:	d002      	beq.n	c36a <cdcdf_acm_enable+0x42>
    c364:	7c7b      	ldrb	r3, [r7, #17]
    c366:	2b0a      	cmp	r3, #10
    c368:	d121      	bne.n	c3ae <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c36e:	6a3a      	ldr	r2, [r7, #32]
    c370:	5cd2      	ldrb	r2, [r2, r3]
    c372:	7bbb      	ldrb	r3, [r7, #14]
    c374:	429a      	cmp	r2, r3
    c376:	d102      	bne.n	c37e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c378:	f06f 0311 	mvn.w	r3, #17
    c37c:	e07c      	b.n	c478 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c382:	6a3a      	ldr	r2, [r7, #32]
    c384:	5cd3      	ldrb	r3, [r2, r3]
    c386:	2bff      	cmp	r3, #255	; 0xff
    c388:	d002      	beq.n	c390 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c38a:	f06f 031b 	mvn.w	r3, #27
    c38e:	e073      	b.n	c478 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c394:	7bb9      	ldrb	r1, [r7, #14]
    c396:	6a3a      	ldr	r2, [r7, #32]
    c398:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c39a:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c39c:	683b      	ldr	r3, [r7, #0]
    c39e:	685b      	ldr	r3, [r3, #4]
    c3a0:	2205      	movs	r2, #5
    c3a2:	4619      	mov	r1, r3
    c3a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3a6:	4b36      	ldr	r3, [pc, #216]	; (c480 <cdcdf_acm_enable+0x158>)
    c3a8:	4798      	blx	r3
    c3aa:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c3ac:	e047      	b.n	c43e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c3ae:	f06f 0309 	mvn.w	r3, #9
    c3b2:	e061      	b.n	c478 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3b6:	789b      	ldrb	r3, [r3, #2]
    c3b8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3bc:	78db      	ldrb	r3, [r3, #3]
    c3be:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3c2:	3304      	adds	r3, #4
    c3c4:	4618      	mov	r0, r3
    c3c6:	4b2f      	ldr	r3, [pc, #188]	; (c484 <cdcdf_acm_enable+0x15c>)
    c3c8:	4798      	blx	r3
    c3ca:	4603      	mov	r3, r0
    c3cc:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c3ce:	7ebb      	ldrb	r3, [r7, #26]
    c3d0:	7ef9      	ldrb	r1, [r7, #27]
    c3d2:	8bba      	ldrh	r2, [r7, #28]
    c3d4:	4618      	mov	r0, r3
    c3d6:	4b2c      	ldr	r3, [pc, #176]	; (c488 <cdcdf_acm_enable+0x160>)
    c3d8:	4798      	blx	r3
    c3da:	4603      	mov	r3, r0
    c3dc:	2b00      	cmp	r3, #0
    c3de:	d002      	beq.n	c3e6 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c3e0:	f06f 0313 	mvn.w	r3, #19
    c3e4:	e048      	b.n	c478 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c3e6:	7ebb      	ldrb	r3, [r7, #26]
    c3e8:	b25b      	sxtb	r3, r3
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	da0f      	bge.n	c40e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c3f2:	7eb9      	ldrb	r1, [r7, #26]
    c3f4:	6a3a      	ldr	r2, [r7, #32]
    c3f6:	4413      	add	r3, r2
    c3f8:	460a      	mov	r2, r1
    c3fa:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c400:	6a3a      	ldr	r2, [r7, #32]
    c402:	4413      	add	r3, r2
    c404:	789b      	ldrb	r3, [r3, #2]
    c406:	4618      	mov	r0, r3
    c408:	4b20      	ldr	r3, [pc, #128]	; (c48c <cdcdf_acm_enable+0x164>)
    c40a:	4798      	blx	r3
    c40c:	e007      	b.n	c41e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c40e:	7eba      	ldrb	r2, [r7, #26]
    c410:	6a3b      	ldr	r3, [r7, #32]
    c412:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c414:	6a3b      	ldr	r3, [r7, #32]
    c416:	791b      	ldrb	r3, [r3, #4]
    c418:	4618      	mov	r0, r3
    c41a:	4b1c      	ldr	r3, [pc, #112]	; (c48c <cdcdf_acm_enable+0x164>)
    c41c:	4798      	blx	r3
			}
			desc->sod = ep;
    c41e:	683b      	ldr	r3, [r7, #0]
    c420:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c422:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c424:	683b      	ldr	r3, [r7, #0]
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	4618      	mov	r0, r3
    c42a:	4b19      	ldr	r3, [pc, #100]	; (c490 <cdcdf_acm_enable+0x168>)
    c42c:	4798      	blx	r3
    c42e:	4602      	mov	r2, r0
    c430:	683b      	ldr	r3, [r7, #0]
    c432:	685b      	ldr	r3, [r3, #4]
    c434:	4619      	mov	r1, r3
    c436:	4610      	mov	r0, r2
    c438:	4b16      	ldr	r3, [pc, #88]	; (c494 <cdcdf_acm_enable+0x16c>)
    c43a:	4798      	blx	r3
    c43c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c440:	2b00      	cmp	r3, #0
    c442:	d1b7      	bne.n	c3b4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c444:	683b      	ldr	r3, [r7, #0]
    c446:	681b      	ldr	r3, [r3, #0]
    c448:	4618      	mov	r0, r3
    c44a:	4b11      	ldr	r3, [pc, #68]	; (c490 <cdcdf_acm_enable+0x168>)
    c44c:	4798      	blx	r3
    c44e:	683b      	ldr	r3, [r7, #0]
    c450:	685b      	ldr	r3, [r3, #4]
    c452:	2204      	movs	r2, #4
    c454:	4619      	mov	r1, r3
    c456:	4b0a      	ldr	r3, [pc, #40]	; (c480 <cdcdf_acm_enable+0x158>)
    c458:	4798      	blx	r3
    c45a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c460:	3301      	adds	r3, #1
    c462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c46a:	2b01      	cmp	r3, #1
    c46c:	f67f af6b 	bls.w	c346 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c470:	4b09      	ldr	r3, [pc, #36]	; (c498 <cdcdf_acm_enable+0x170>)
    c472:	2201      	movs	r2, #1
    c474:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c476:	2300      	movs	r3, #0
}
    c478:	4618      	mov	r0, r3
    c47a:	3730      	adds	r7, #48	; 0x30
    c47c:	46bd      	mov	sp, r7
    c47e:	bd80      	pop	{r7, pc}
    c480:	0000d6e9 	.word	0x0000d6e9
    c484:	0000c2c3 	.word	0x0000c2c3
    c488:	00003989 	.word	0x00003989
    c48c:	00003a75 	.word	0x00003a75
    c490:	0000c305 	.word	0x0000c305
    c494:	0000d745 	.word	0x0000d745
    c498:	20000d98 	.word	0x20000d98

0000c49c <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c49c:	b580      	push	{r7, lr}
    c49e:	b088      	sub	sp, #32
    c4a0:	af00      	add	r7, sp, #0
    c4a2:	6078      	str	r0, [r7, #4]
    c4a4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c4a6:	687b      	ldr	r3, [r7, #4]
    c4a8:	689b      	ldr	r3, [r3, #8]
    c4aa:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c4ac:	683b      	ldr	r3, [r7, #0]
    c4ae:	2b00      	cmp	r3, #0
    c4b0:	d00c      	beq.n	c4cc <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c4b2:	683b      	ldr	r3, [r7, #0]
    c4b4:	681b      	ldr	r3, [r3, #0]
    c4b6:	795b      	ldrb	r3, [r3, #5]
    c4b8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c4ba:	7c7b      	ldrb	r3, [r7, #17]
    c4bc:	2b02      	cmp	r3, #2
    c4be:	d005      	beq.n	c4cc <cdcdf_acm_disable+0x30>
    c4c0:	7c7b      	ldrb	r3, [r7, #17]
    c4c2:	2b0a      	cmp	r3, #10
    c4c4:	d002      	beq.n	c4cc <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c4c6:	f06f 0309 	mvn.w	r3, #9
    c4ca:	e035      	b.n	c538 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c4cc:	2300      	movs	r3, #0
    c4ce:	77fb      	strb	r3, [r7, #31]
    c4d0:	e01f      	b.n	c512 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c4d2:	7ffb      	ldrb	r3, [r7, #31]
    c4d4:	69ba      	ldr	r2, [r7, #24]
    c4d6:	5cd3      	ldrb	r3, [r2, r3]
    c4d8:	2bff      	cmp	r3, #255	; 0xff
    c4da:	d016      	beq.n	c50a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c4dc:	7ffb      	ldrb	r3, [r7, #31]
    c4de:	69ba      	ldr	r2, [r7, #24]
    c4e0:	21ff      	movs	r1, #255	; 0xff
    c4e2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c4e4:	7ffb      	ldrb	r3, [r7, #31]
    c4e6:	69ba      	ldr	r2, [r7, #24]
    c4e8:	4413      	add	r3, r2
    c4ea:	789b      	ldrb	r3, [r3, #2]
    c4ec:	2bff      	cmp	r3, #255	; 0xff
    c4ee:	d00d      	beq.n	c50c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c4f0:	7ffb      	ldrb	r3, [r7, #31]
    c4f2:	69ba      	ldr	r2, [r7, #24]
    c4f4:	4413      	add	r3, r2
    c4f6:	789b      	ldrb	r3, [r3, #2]
    c4f8:	4618      	mov	r0, r3
    c4fa:	4b11      	ldr	r3, [pc, #68]	; (c540 <cdcdf_acm_disable+0xa4>)
    c4fc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c4fe:	7ffb      	ldrb	r3, [r7, #31]
    c500:	69ba      	ldr	r2, [r7, #24]
    c502:	4413      	add	r3, r2
    c504:	22ff      	movs	r2, #255	; 0xff
    c506:	709a      	strb	r2, [r3, #2]
    c508:	e000      	b.n	c50c <cdcdf_acm_disable+0x70>
			continue;
    c50a:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c50c:	7ffb      	ldrb	r3, [r7, #31]
    c50e:	3301      	adds	r3, #1
    c510:	77fb      	strb	r3, [r7, #31]
    c512:	7ffb      	ldrb	r3, [r7, #31]
    c514:	2b01      	cmp	r3, #1
    c516:	d9dc      	bls.n	c4d2 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c518:	69bb      	ldr	r3, [r7, #24]
    c51a:	791b      	ldrb	r3, [r3, #4]
    c51c:	2bff      	cmp	r3, #255	; 0xff
    c51e:	d007      	beq.n	c530 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c520:	69bb      	ldr	r3, [r7, #24]
    c522:	791b      	ldrb	r3, [r3, #4]
    c524:	4618      	mov	r0, r3
    c526:	4b06      	ldr	r3, [pc, #24]	; (c540 <cdcdf_acm_disable+0xa4>)
    c528:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c52a:	69bb      	ldr	r3, [r7, #24]
    c52c:	22ff      	movs	r2, #255	; 0xff
    c52e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c530:	4b04      	ldr	r3, [pc, #16]	; (c544 <cdcdf_acm_disable+0xa8>)
    c532:	2200      	movs	r2, #0
    c534:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c536:	2300      	movs	r3, #0
}
    c538:	4618      	mov	r0, r3
    c53a:	3720      	adds	r7, #32
    c53c:	46bd      	mov	sp, r7
    c53e:	bd80      	pop	{r7, pc}
    c540:	00003a25 	.word	0x00003a25
    c544:	20000d98 	.word	0x20000d98

0000c548 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c548:	b580      	push	{r7, lr}
    c54a:	b084      	sub	sp, #16
    c54c:	af00      	add	r7, sp, #0
    c54e:	60f8      	str	r0, [r7, #12]
    c550:	460b      	mov	r3, r1
    c552:	607a      	str	r2, [r7, #4]
    c554:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c556:	7afb      	ldrb	r3, [r7, #11]
    c558:	2b01      	cmp	r3, #1
    c55a:	d009      	beq.n	c570 <cdcdf_acm_ctrl+0x28>
    c55c:	2b02      	cmp	r3, #2
    c55e:	d00d      	beq.n	c57c <cdcdf_acm_ctrl+0x34>
    c560:	2b00      	cmp	r3, #0
    c562:	d10e      	bne.n	c582 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c564:	6879      	ldr	r1, [r7, #4]
    c566:	68f8      	ldr	r0, [r7, #12]
    c568:	4b09      	ldr	r3, [pc, #36]	; (c590 <cdcdf_acm_ctrl+0x48>)
    c56a:	4798      	blx	r3
    c56c:	4603      	mov	r3, r0
    c56e:	e00a      	b.n	c586 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c570:	6879      	ldr	r1, [r7, #4]
    c572:	68f8      	ldr	r0, [r7, #12]
    c574:	4b07      	ldr	r3, [pc, #28]	; (c594 <cdcdf_acm_ctrl+0x4c>)
    c576:	4798      	blx	r3
    c578:	4603      	mov	r3, r0
    c57a:	e004      	b.n	c586 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c57c:	f06f 031a 	mvn.w	r3, #26
    c580:	e001      	b.n	c586 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c582:	f06f 030c 	mvn.w	r3, #12
	}
}
    c586:	4618      	mov	r0, r3
    c588:	3710      	adds	r7, #16
    c58a:	46bd      	mov	sp, r7
    c58c:	bd80      	pop	{r7, pc}
    c58e:	bf00      	nop
    c590:	0000c329 	.word	0x0000c329
    c594:	0000c49d 	.word	0x0000c49d

0000c598 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c598:	b590      	push	{r4, r7, lr}
    c59a:	b087      	sub	sp, #28
    c59c:	af00      	add	r7, sp, #0
    c59e:	4603      	mov	r3, r0
    c5a0:	6039      	str	r1, [r7, #0]
    c5a2:	71fb      	strb	r3, [r7, #7]
    c5a4:	4613      	mov	r3, r2
    c5a6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c5a8:	683b      	ldr	r3, [r7, #0]
    c5aa:	799a      	ldrb	r2, [r3, #6]
    c5ac:	79db      	ldrb	r3, [r3, #7]
    c5ae:	021b      	lsls	r3, r3, #8
    c5b0:	4313      	orrs	r3, r2
    c5b2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c5b4:	4b2b      	ldr	r3, [pc, #172]	; (c664 <cdcdf_acm_set_req+0xcc>)
    c5b6:	4798      	blx	r3
    c5b8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c5ba:	683b      	ldr	r3, [r7, #0]
    c5bc:	785b      	ldrb	r3, [r3, #1]
    c5be:	2b20      	cmp	r3, #32
    c5c0:	d002      	beq.n	c5c8 <cdcdf_acm_set_req+0x30>
    c5c2:	2b22      	cmp	r3, #34	; 0x22
    c5c4:	d034      	beq.n	c630 <cdcdf_acm_set_req+0x98>
    c5c6:	e046      	b.n	c656 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c5c8:	8afb      	ldrh	r3, [r7, #22]
    c5ca:	2b07      	cmp	r3, #7
    c5cc:	d002      	beq.n	c5d4 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c5ce:	f04f 33ff 	mov.w	r3, #4294967295
    c5d2:	e042      	b.n	c65a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c5d4:	79bb      	ldrb	r3, [r7, #6]
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	d107      	bne.n	c5ea <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c5da:	8afa      	ldrh	r2, [r7, #22]
    c5dc:	79f8      	ldrb	r0, [r7, #7]
    c5de:	2300      	movs	r3, #0
    c5e0:	6939      	ldr	r1, [r7, #16]
    c5e2:	4c21      	ldr	r4, [pc, #132]	; (c668 <cdcdf_acm_set_req+0xd0>)
    c5e4:	47a0      	blx	r4
    c5e6:	4603      	mov	r3, r0
    c5e8:	e037      	b.n	c65a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c5ea:	693a      	ldr	r2, [r7, #16]
    c5ec:	f107 0308 	add.w	r3, r7, #8
    c5f0:	6810      	ldr	r0, [r2, #0]
    c5f2:	6018      	str	r0, [r3, #0]
    c5f4:	8891      	ldrh	r1, [r2, #4]
    c5f6:	7992      	ldrb	r2, [r2, #6]
    c5f8:	8099      	strh	r1, [r3, #4]
    c5fa:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c5fc:	4b1b      	ldr	r3, [pc, #108]	; (c66c <cdcdf_acm_set_req+0xd4>)
    c5fe:	681b      	ldr	r3, [r3, #0]
    c600:	2b00      	cmp	r3, #0
    c602:	d008      	beq.n	c616 <cdcdf_acm_set_req+0x7e>
    c604:	4b19      	ldr	r3, [pc, #100]	; (c66c <cdcdf_acm_set_req+0xd4>)
    c606:	681b      	ldr	r3, [r3, #0]
    c608:	f107 0208 	add.w	r2, r7, #8
    c60c:	4610      	mov	r0, r2
    c60e:	4798      	blx	r3
    c610:	4603      	mov	r3, r0
    c612:	2b00      	cmp	r3, #0
    c614:	d00a      	beq.n	c62c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c616:	4b16      	ldr	r3, [pc, #88]	; (c670 <cdcdf_acm_set_req+0xd8>)
    c618:	f107 0208 	add.w	r2, r7, #8
    c61c:	e892 0003 	ldmia.w	r2, {r0, r1}
    c620:	6018      	str	r0, [r3, #0]
    c622:	3304      	adds	r3, #4
    c624:	8019      	strh	r1, [r3, #0]
    c626:	3302      	adds	r3, #2
    c628:	0c0a      	lsrs	r2, r1, #16
    c62a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c62c:	2300      	movs	r3, #0
    c62e:	e014      	b.n	c65a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c630:	2300      	movs	r3, #0
    c632:	2200      	movs	r2, #0
    c634:	2100      	movs	r1, #0
    c636:	2000      	movs	r0, #0
    c638:	4c0b      	ldr	r4, [pc, #44]	; (c668 <cdcdf_acm_set_req+0xd0>)
    c63a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c63c:	4b0d      	ldr	r3, [pc, #52]	; (c674 <cdcdf_acm_set_req+0xdc>)
    c63e:	681b      	ldr	r3, [r3, #0]
    c640:	2b00      	cmp	r3, #0
    c642:	d006      	beq.n	c652 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c644:	4b0b      	ldr	r3, [pc, #44]	; (c674 <cdcdf_acm_set_req+0xdc>)
    c646:	681b      	ldr	r3, [r3, #0]
    c648:	683a      	ldr	r2, [r7, #0]
    c64a:	8852      	ldrh	r2, [r2, #2]
    c64c:	b292      	uxth	r2, r2
    c64e:	4610      	mov	r0, r2
    c650:	4798      	blx	r3
		}
		return ERR_NONE;
    c652:	2300      	movs	r3, #0
    c654:	e001      	b.n	c65a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c656:	f06f 030c 	mvn.w	r3, #12
	}
}
    c65a:	4618      	mov	r0, r3
    c65c:	371c      	adds	r7, #28
    c65e:	46bd      	mov	sp, r7
    c660:	bd90      	pop	{r4, r7, pc}
    c662:	bf00      	nop
    c664:	0000d5e5 	.word	0x0000d5e5
    c668:	0000d459 	.word	0x0000d459
    c66c:	20000dac 	.word	0x20000dac
    c670:	20000da0 	.word	0x20000da0
    c674:	20000da8 	.word	0x20000da8

0000c678 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c678:	b590      	push	{r4, r7, lr}
    c67a:	b085      	sub	sp, #20
    c67c:	af00      	add	r7, sp, #0
    c67e:	4603      	mov	r3, r0
    c680:	6039      	str	r1, [r7, #0]
    c682:	71fb      	strb	r3, [r7, #7]
    c684:	4613      	mov	r3, r2
    c686:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c688:	683b      	ldr	r3, [r7, #0]
    c68a:	799a      	ldrb	r2, [r3, #6]
    c68c:	79db      	ldrb	r3, [r3, #7]
    c68e:	021b      	lsls	r3, r3, #8
    c690:	4313      	orrs	r3, r2
    c692:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c694:	79bb      	ldrb	r3, [r7, #6]
    c696:	2b01      	cmp	r3, #1
    c698:	d101      	bne.n	c69e <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c69a:	2300      	movs	r3, #0
    c69c:	e013      	b.n	c6c6 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c69e:	683b      	ldr	r3, [r7, #0]
    c6a0:	785b      	ldrb	r3, [r3, #1]
    c6a2:	2b21      	cmp	r3, #33	; 0x21
    c6a4:	d10d      	bne.n	c6c2 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c6a6:	89fb      	ldrh	r3, [r7, #14]
    c6a8:	2b07      	cmp	r3, #7
    c6aa:	d002      	beq.n	c6b2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c6ac:	f04f 33ff 	mov.w	r3, #4294967295
    c6b0:	e009      	b.n	c6c6 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c6b2:	89fa      	ldrh	r2, [r7, #14]
    c6b4:	79f8      	ldrb	r0, [r7, #7]
    c6b6:	2300      	movs	r3, #0
    c6b8:	4905      	ldr	r1, [pc, #20]	; (c6d0 <cdcdf_acm_get_req+0x58>)
    c6ba:	4c06      	ldr	r4, [pc, #24]	; (c6d4 <cdcdf_acm_get_req+0x5c>)
    c6bc:	47a0      	blx	r4
    c6be:	4603      	mov	r3, r0
    c6c0:	e001      	b.n	c6c6 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c6c2:	f06f 030c 	mvn.w	r3, #12
	}
}
    c6c6:	4618      	mov	r0, r3
    c6c8:	3714      	adds	r7, #20
    c6ca:	46bd      	mov	sp, r7
    c6cc:	bd90      	pop	{r4, r7, pc}
    c6ce:	bf00      	nop
    c6d0:	20000da0 	.word	0x20000da0
    c6d4:	0000d459 	.word	0x0000d459

0000c6d8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c6d8:	b580      	push	{r7, lr}
    c6da:	b082      	sub	sp, #8
    c6dc:	af00      	add	r7, sp, #0
    c6de:	4603      	mov	r3, r0
    c6e0:	6039      	str	r1, [r7, #0]
    c6e2:	71fb      	strb	r3, [r7, #7]
    c6e4:	4613      	mov	r3, r2
    c6e6:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c6e8:	683b      	ldr	r3, [r7, #0]
    c6ea:	781b      	ldrb	r3, [r3, #0]
    c6ec:	095b      	lsrs	r3, r3, #5
    c6ee:	b2db      	uxtb	r3, r3
    c6f0:	f003 0303 	and.w	r3, r3, #3
    c6f4:	2b01      	cmp	r3, #1
    c6f6:	d002      	beq.n	c6fe <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c6f8:	f06f 0309 	mvn.w	r3, #9
    c6fc:	e026      	b.n	c74c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c6fe:	683b      	ldr	r3, [r7, #0]
    c700:	889b      	ldrh	r3, [r3, #4]
    c702:	b29a      	uxth	r2, r3
    c704:	4b13      	ldr	r3, [pc, #76]	; (c754 <cdcdf_acm_req+0x7c>)
    c706:	781b      	ldrb	r3, [r3, #0]
    c708:	b29b      	uxth	r3, r3
    c70a:	429a      	cmp	r2, r3
    c70c:	d007      	beq.n	c71e <cdcdf_acm_req+0x46>
    c70e:	683b      	ldr	r3, [r7, #0]
    c710:	889b      	ldrh	r3, [r3, #4]
    c712:	b29a      	uxth	r2, r3
    c714:	4b0f      	ldr	r3, [pc, #60]	; (c754 <cdcdf_acm_req+0x7c>)
    c716:	785b      	ldrb	r3, [r3, #1]
    c718:	b29b      	uxth	r3, r3
    c71a:	429a      	cmp	r2, r3
    c71c:	d114      	bne.n	c748 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c71e:	683b      	ldr	r3, [r7, #0]
    c720:	781b      	ldrb	r3, [r3, #0]
    c722:	b25b      	sxtb	r3, r3
    c724:	2b00      	cmp	r3, #0
    c726:	da07      	bge.n	c738 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c728:	79ba      	ldrb	r2, [r7, #6]
    c72a:	79fb      	ldrb	r3, [r7, #7]
    c72c:	6839      	ldr	r1, [r7, #0]
    c72e:	4618      	mov	r0, r3
    c730:	4b09      	ldr	r3, [pc, #36]	; (c758 <cdcdf_acm_req+0x80>)
    c732:	4798      	blx	r3
    c734:	4603      	mov	r3, r0
    c736:	e009      	b.n	c74c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c738:	79ba      	ldrb	r2, [r7, #6]
    c73a:	79fb      	ldrb	r3, [r7, #7]
    c73c:	6839      	ldr	r1, [r7, #0]
    c73e:	4618      	mov	r0, r3
    c740:	4b06      	ldr	r3, [pc, #24]	; (c75c <cdcdf_acm_req+0x84>)
    c742:	4798      	blx	r3
    c744:	4603      	mov	r3, r0
    c746:	e001      	b.n	c74c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c748:	f06f 0309 	mvn.w	r3, #9
	}
}
    c74c:	4618      	mov	r0, r3
    c74e:	3708      	adds	r7, #8
    c750:	46bd      	mov	sp, r7
    c752:	bd80      	pop	{r7, pc}
    c754:	20000d98 	.word	0x20000d98
    c758:	0000c679 	.word	0x0000c679
    c75c:	0000c599 	.word	0x0000c599

0000c760 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c760:	b580      	push	{r7, lr}
    c762:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c764:	4b0b      	ldr	r3, [pc, #44]	; (c794 <cdcdf_acm_init+0x34>)
    c766:	4798      	blx	r3
    c768:	4603      	mov	r3, r0
    c76a:	2b01      	cmp	r3, #1
    c76c:	d902      	bls.n	c774 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c76e:	f06f 0310 	mvn.w	r3, #16
    c772:	e00d      	b.n	c790 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c774:	4b08      	ldr	r3, [pc, #32]	; (c798 <cdcdf_acm_init+0x38>)
    c776:	4a09      	ldr	r2, [pc, #36]	; (c79c <cdcdf_acm_init+0x3c>)
    c778:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c77a:	4b07      	ldr	r3, [pc, #28]	; (c798 <cdcdf_acm_init+0x38>)
    c77c:	4a08      	ldr	r2, [pc, #32]	; (c7a0 <cdcdf_acm_init+0x40>)
    c77e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c780:	4805      	ldr	r0, [pc, #20]	; (c798 <cdcdf_acm_init+0x38>)
    c782:	4b08      	ldr	r3, [pc, #32]	; (c7a4 <cdcdf_acm_init+0x44>)
    c784:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c786:	4908      	ldr	r1, [pc, #32]	; (c7a8 <cdcdf_acm_init+0x48>)
    c788:	2001      	movs	r0, #1
    c78a:	4b08      	ldr	r3, [pc, #32]	; (c7ac <cdcdf_acm_init+0x4c>)
    c78c:	4798      	blx	r3
	return ERR_NONE;
    c78e:	2300      	movs	r3, #0
}
    c790:	4618      	mov	r0, r3
    c792:	bd80      	pop	{r7, pc}
    c794:	0000d5fd 	.word	0x0000d5fd
    c798:	20000d8c 	.word	0x20000d8c
    c79c:	0000c549 	.word	0x0000c549
    c7a0:	20000d98 	.word	0x20000d98
    c7a4:	0000d565 	.word	0x0000d565
    c7a8:	200001d8 	.word	0x200001d8
    c7ac:	0000d495 	.word	0x0000d495

0000c7b0 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c7b0:	b590      	push	{r4, r7, lr}
    c7b2:	b083      	sub	sp, #12
    c7b4:	af00      	add	r7, sp, #0
    c7b6:	6078      	str	r0, [r7, #4]
    c7b8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c7ba:	4b0b      	ldr	r3, [pc, #44]	; (c7e8 <cdcdf_acm_read+0x38>)
    c7bc:	4798      	blx	r3
    c7be:	4603      	mov	r3, r0
    c7c0:	f083 0301 	eor.w	r3, r3, #1
    c7c4:	b2db      	uxtb	r3, r3
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d002      	beq.n	c7d0 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c7ca:	f06f 0310 	mvn.w	r3, #16
    c7ce:	e007      	b.n	c7e0 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c7d0:	4b06      	ldr	r3, [pc, #24]	; (c7ec <cdcdf_acm_read+0x3c>)
    c7d2:	7918      	ldrb	r0, [r3, #4]
    c7d4:	2300      	movs	r3, #0
    c7d6:	683a      	ldr	r2, [r7, #0]
    c7d8:	6879      	ldr	r1, [r7, #4]
    c7da:	4c05      	ldr	r4, [pc, #20]	; (c7f0 <cdcdf_acm_read+0x40>)
    c7dc:	47a0      	blx	r4
    c7de:	4603      	mov	r3, r0
}
    c7e0:	4618      	mov	r0, r3
    c7e2:	370c      	adds	r7, #12
    c7e4:	46bd      	mov	sp, r7
    c7e6:	bd90      	pop	{r4, r7, pc}
    c7e8:	0000c8d5 	.word	0x0000c8d5
    c7ec:	20000d98 	.word	0x20000d98
    c7f0:	0000d459 	.word	0x0000d459

0000c7f4 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c7f4:	b590      	push	{r4, r7, lr}
    c7f6:	b083      	sub	sp, #12
    c7f8:	af00      	add	r7, sp, #0
    c7fa:	6078      	str	r0, [r7, #4]
    c7fc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c7fe:	4b0b      	ldr	r3, [pc, #44]	; (c82c <cdcdf_acm_write+0x38>)
    c800:	4798      	blx	r3
    c802:	4603      	mov	r3, r0
    c804:	f083 0301 	eor.w	r3, r3, #1
    c808:	b2db      	uxtb	r3, r3
    c80a:	2b00      	cmp	r3, #0
    c80c:	d002      	beq.n	c814 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c80e:	f06f 0310 	mvn.w	r3, #16
    c812:	e007      	b.n	c824 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c814:	4b06      	ldr	r3, [pc, #24]	; (c830 <cdcdf_acm_write+0x3c>)
    c816:	78d8      	ldrb	r0, [r3, #3]
    c818:	2301      	movs	r3, #1
    c81a:	683a      	ldr	r2, [r7, #0]
    c81c:	6879      	ldr	r1, [r7, #4]
    c81e:	4c05      	ldr	r4, [pc, #20]	; (c834 <cdcdf_acm_write+0x40>)
    c820:	47a0      	blx	r4
    c822:	4603      	mov	r3, r0
}
    c824:	4618      	mov	r0, r3
    c826:	370c      	adds	r7, #12
    c828:	46bd      	mov	sp, r7
    c82a:	bd90      	pop	{r4, r7, pc}
    c82c:	0000c8d5 	.word	0x0000c8d5
    c830:	20000d98 	.word	0x20000d98
    c834:	0000d459 	.word	0x0000d459

0000c838 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c838:	b580      	push	{r7, lr}
    c83a:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c83c:	4b05      	ldr	r3, [pc, #20]	; (c854 <cdcdf_acm_stop_xfer+0x1c>)
    c83e:	78db      	ldrb	r3, [r3, #3]
    c840:	4618      	mov	r0, r3
    c842:	4b05      	ldr	r3, [pc, #20]	; (c858 <cdcdf_acm_stop_xfer+0x20>)
    c844:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c846:	4b03      	ldr	r3, [pc, #12]	; (c854 <cdcdf_acm_stop_xfer+0x1c>)
    c848:	791b      	ldrb	r3, [r3, #4]
    c84a:	4618      	mov	r0, r3
    c84c:	4b02      	ldr	r3, [pc, #8]	; (c858 <cdcdf_acm_stop_xfer+0x20>)
    c84e:	4798      	blx	r3
}
    c850:	bf00      	nop
    c852:	bd80      	pop	{r7, pc}
    c854:	20000d98 	.word	0x20000d98
    c858:	00003c4d 	.word	0x00003c4d

0000c85c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c85c:	b580      	push	{r7, lr}
    c85e:	b082      	sub	sp, #8
    c860:	af00      	add	r7, sp, #0
    c862:	4603      	mov	r3, r0
    c864:	6039      	str	r1, [r7, #0]
    c866:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c868:	79fb      	ldrb	r3, [r7, #7]
    c86a:	2b03      	cmp	r3, #3
    c86c:	d822      	bhi.n	c8b4 <cdcdf_acm_register_callback+0x58>
    c86e:	a201      	add	r2, pc, #4	; (adr r2, c874 <cdcdf_acm_register_callback+0x18>)
    c870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c874:	0000c885 	.word	0x0000c885
    c878:	0000c895 	.word	0x0000c895
    c87c:	0000c8a5 	.word	0x0000c8a5
    c880:	0000c8ad 	.word	0x0000c8ad
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c884:	4b0f      	ldr	r3, [pc, #60]	; (c8c4 <cdcdf_acm_register_callback+0x68>)
    c886:	791b      	ldrb	r3, [r3, #4]
    c888:	683a      	ldr	r2, [r7, #0]
    c88a:	2102      	movs	r1, #2
    c88c:	4618      	mov	r0, r3
    c88e:	4b0e      	ldr	r3, [pc, #56]	; (c8c8 <cdcdf_acm_register_callback+0x6c>)
    c890:	4798      	blx	r3
		break;
    c892:	e012      	b.n	c8ba <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c894:	4b0b      	ldr	r3, [pc, #44]	; (c8c4 <cdcdf_acm_register_callback+0x68>)
    c896:	78db      	ldrb	r3, [r3, #3]
    c898:	683a      	ldr	r2, [r7, #0]
    c89a:	2102      	movs	r1, #2
    c89c:	4618      	mov	r0, r3
    c89e:	4b0a      	ldr	r3, [pc, #40]	; (c8c8 <cdcdf_acm_register_callback+0x6c>)
    c8a0:	4798      	blx	r3
		break;
    c8a2:	e00a      	b.n	c8ba <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c8a4:	4a09      	ldr	r2, [pc, #36]	; (c8cc <cdcdf_acm_register_callback+0x70>)
    c8a6:	683b      	ldr	r3, [r7, #0]
    c8a8:	6013      	str	r3, [r2, #0]
		break;
    c8aa:	e006      	b.n	c8ba <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c8ac:	4a08      	ldr	r2, [pc, #32]	; (c8d0 <cdcdf_acm_register_callback+0x74>)
    c8ae:	683b      	ldr	r3, [r7, #0]
    c8b0:	6013      	str	r3, [r2, #0]
		break;
    c8b2:	e002      	b.n	c8ba <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c8b4:	f06f 030c 	mvn.w	r3, #12
    c8b8:	e000      	b.n	c8bc <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c8ba:	2300      	movs	r3, #0
}
    c8bc:	4618      	mov	r0, r3
    c8be:	3708      	adds	r7, #8
    c8c0:	46bd      	mov	sp, r7
    c8c2:	bd80      	pop	{r7, pc}
    c8c4:	20000d98 	.word	0x20000d98
    c8c8:	00003d79 	.word	0x00003d79
    c8cc:	20000dac 	.word	0x20000dac
    c8d0:	20000da8 	.word	0x20000da8

0000c8d4 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c8d4:	b480      	push	{r7}
    c8d6:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c8d8:	4b03      	ldr	r3, [pc, #12]	; (c8e8 <cdcdf_acm_is_enabled+0x14>)
    c8da:	795b      	ldrb	r3, [r3, #5]
}
    c8dc:	4618      	mov	r0, r3
    c8de:	46bd      	mov	sp, r7
    c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8e4:	4770      	bx	lr
    c8e6:	bf00      	nop
    c8e8:	20000d98 	.word	0x20000d98

0000c8ec <usb_get_u16>:
{
    c8ec:	b480      	push	{r7}
    c8ee:	b083      	sub	sp, #12
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c8f4:	687b      	ldr	r3, [r7, #4]
    c8f6:	781b      	ldrb	r3, [r3, #0]
    c8f8:	b29a      	uxth	r2, r3
    c8fa:	687b      	ldr	r3, [r7, #4]
    c8fc:	3301      	adds	r3, #1
    c8fe:	781b      	ldrb	r3, [r3, #0]
    c900:	b29b      	uxth	r3, r3
    c902:	021b      	lsls	r3, r3, #8
    c904:	b29b      	uxth	r3, r3
    c906:	4413      	add	r3, r2
    c908:	b29b      	uxth	r3, r3
}
    c90a:	4618      	mov	r0, r3
    c90c:	370c      	adds	r7, #12
    c90e:	46bd      	mov	sp, r7
    c910:	f85d 7b04 	ldr.w	r7, [sp], #4
    c914:	4770      	bx	lr

0000c916 <usb_desc_len>:
{
    c916:	b480      	push	{r7}
    c918:	b083      	sub	sp, #12
    c91a:	af00      	add	r7, sp, #0
    c91c:	6078      	str	r0, [r7, #4]
	return desc[0];
    c91e:	687b      	ldr	r3, [r7, #4]
    c920:	781b      	ldrb	r3, [r3, #0]
}
    c922:	4618      	mov	r0, r3
    c924:	370c      	adds	r7, #12
    c926:	46bd      	mov	sp, r7
    c928:	f85d 7b04 	ldr.w	r7, [sp], #4
    c92c:	4770      	bx	lr
	...

0000c930 <usb_desc_next>:
{
    c930:	b580      	push	{r7, lr}
    c932:	b082      	sub	sp, #8
    c934:	af00      	add	r7, sp, #0
    c936:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c938:	6878      	ldr	r0, [r7, #4]
    c93a:	4b05      	ldr	r3, [pc, #20]	; (c950 <usb_desc_next+0x20>)
    c93c:	4798      	blx	r3
    c93e:	4603      	mov	r3, r0
    c940:	461a      	mov	r2, r3
    c942:	687b      	ldr	r3, [r7, #4]
    c944:	4413      	add	r3, r2
}
    c946:	4618      	mov	r0, r3
    c948:	3708      	adds	r7, #8
    c94a:	46bd      	mov	sp, r7
    c94c:	bd80      	pop	{r7, pc}
    c94e:	bf00      	nop
    c950:	0000c917 	.word	0x0000c917

0000c954 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c954:	b580      	push	{r7, lr}
    c956:	b082      	sub	sp, #8
    c958:	af00      	add	r7, sp, #0
    c95a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c95c:	687b      	ldr	r3, [r7, #4]
    c95e:	3302      	adds	r3, #2
    c960:	4618      	mov	r0, r3
    c962:	4b03      	ldr	r3, [pc, #12]	; (c970 <usb_cfg_desc_total_len+0x1c>)
    c964:	4798      	blx	r3
    c966:	4603      	mov	r3, r0
}
    c968:	4618      	mov	r0, r3
    c96a:	3708      	adds	r7, #8
    c96c:	46bd      	mov	sp, r7
    c96e:	bd80      	pop	{r7, pc}
    c970:	0000c8ed 	.word	0x0000c8ed

0000c974 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c974:	b590      	push	{r4, r7, lr}
    c976:	b085      	sub	sp, #20
    c978:	af00      	add	r7, sp, #0
    c97a:	4603      	mov	r3, r0
    c97c:	6039      	str	r1, [r7, #0]
    c97e:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c980:	2300      	movs	r3, #0
    c982:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c984:	683b      	ldr	r3, [r7, #0]
    c986:	799a      	ldrb	r2, [r3, #6]
    c988:	79db      	ldrb	r3, [r3, #7]
    c98a:	021b      	lsls	r3, r3, #8
    c98c:	4313      	orrs	r3, r2
    c98e:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c990:	897b      	ldrh	r3, [r7, #10]
    c992:	2b12      	cmp	r3, #18
    c994:	d901      	bls.n	c99a <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c996:	2312      	movs	r3, #18
    c998:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c99a:	68fb      	ldr	r3, [r7, #12]
    c99c:	2b00      	cmp	r3, #0
    c99e:	d10a      	bne.n	c9b6 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c9a0:	4b0f      	ldr	r3, [pc, #60]	; (c9e0 <usbdc_get_dev_desc+0x6c>)
    c9a2:	681b      	ldr	r3, [r3, #0]
    c9a4:	6818      	ldr	r0, [r3, #0]
    c9a6:	4b0e      	ldr	r3, [pc, #56]	; (c9e0 <usbdc_get_dev_desc+0x6c>)
    c9a8:	681b      	ldr	r3, [r3, #0]
    c9aa:	685b      	ldr	r3, [r3, #4]
    c9ac:	2201      	movs	r2, #1
    c9ae:	4619      	mov	r1, r3
    c9b0:	4b0c      	ldr	r3, [pc, #48]	; (c9e4 <usbdc_get_dev_desc+0x70>)
    c9b2:	4798      	blx	r3
    c9b4:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c9b6:	68fb      	ldr	r3, [r7, #12]
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d101      	bne.n	c9c0 <usbdc_get_dev_desc+0x4c>
		return false;
    c9bc:	2300      	movs	r3, #0
    c9be:	e00b      	b.n	c9d8 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c9c0:	897a      	ldrh	r2, [r7, #10]
    c9c2:	79f8      	ldrb	r0, [r7, #7]
    c9c4:	2300      	movs	r3, #0
    c9c6:	68f9      	ldr	r1, [r7, #12]
    c9c8:	4c07      	ldr	r4, [pc, #28]	; (c9e8 <usbdc_get_dev_desc+0x74>)
    c9ca:	47a0      	blx	r4
    c9cc:	4603      	mov	r3, r0
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	d001      	beq.n	c9d6 <usbdc_get_dev_desc+0x62>
		return false;
    c9d2:	2300      	movs	r3, #0
    c9d4:	e000      	b.n	c9d8 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c9d6:	2301      	movs	r3, #1
}
    c9d8:	4618      	mov	r0, r3
    c9da:	3714      	adds	r7, #20
    c9dc:	46bd      	mov	sp, r7
    c9de:	bd90      	pop	{r4, r7, pc}
    c9e0:	20000db0 	.word	0x20000db0
    c9e4:	0000d6e9 	.word	0x0000d6e9
    c9e8:	0000d459 	.word	0x0000d459

0000c9ec <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c9ec:	b590      	push	{r4, r7, lr}
    c9ee:	b087      	sub	sp, #28
    c9f0:	af00      	add	r7, sp, #0
    c9f2:	4603      	mov	r3, r0
    c9f4:	6039      	str	r1, [r7, #0]
    c9f6:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c9f8:	2300      	movs	r3, #0
    c9fa:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c9fc:	683b      	ldr	r3, [r7, #0]
    c9fe:	799a      	ldrb	r2, [r3, #6]
    ca00:	79db      	ldrb	r3, [r3, #7]
    ca02:	021b      	lsls	r3, r3, #8
    ca04:	4313      	orrs	r3, r2
    ca06:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ca08:	683b      	ldr	r3, [r7, #0]
    ca0a:	885b      	ldrh	r3, [r3, #2]
    ca0c:	b29b      	uxth	r3, r3
    ca0e:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ca10:	8a7a      	ldrh	r2, [r7, #18]
    ca12:	4b1e      	ldr	r3, [pc, #120]	; (ca8c <usbdc_get_cfg_desc+0xa0>)
    ca14:	7f1b      	ldrb	r3, [r3, #28]
    ca16:	3b01      	subs	r3, #1
    ca18:	4013      	ands	r3, r2
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	bf0c      	ite	eq
    ca1e:	2301      	moveq	r3, #1
    ca20:	2300      	movne	r3, #0
    ca22:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ca24:	697b      	ldr	r3, [r7, #20]
    ca26:	2b00      	cmp	r3, #0
    ca28:	d10c      	bne.n	ca44 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ca2a:	4b18      	ldr	r3, [pc, #96]	; (ca8c <usbdc_get_cfg_desc+0xa0>)
    ca2c:	681b      	ldr	r3, [r3, #0]
    ca2e:	6818      	ldr	r0, [r3, #0]
    ca30:	4b16      	ldr	r3, [pc, #88]	; (ca8c <usbdc_get_cfg_desc+0xa0>)
    ca32:	681b      	ldr	r3, [r3, #0]
    ca34:	6859      	ldr	r1, [r3, #4]
    ca36:	7c3b      	ldrb	r3, [r7, #16]
    ca38:	3301      	adds	r3, #1
    ca3a:	b2db      	uxtb	r3, r3
    ca3c:	461a      	mov	r2, r3
    ca3e:	4b14      	ldr	r3, [pc, #80]	; (ca90 <usbdc_get_cfg_desc+0xa4>)
    ca40:	4798      	blx	r3
    ca42:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    ca44:	697b      	ldr	r3, [r7, #20]
    ca46:	2b00      	cmp	r3, #0
    ca48:	d101      	bne.n	ca4e <usbdc_get_cfg_desc+0x62>
		return false;
    ca4a:	2300      	movs	r3, #0
    ca4c:	e019      	b.n	ca82 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    ca4e:	6978      	ldr	r0, [r7, #20]
    ca50:	4b10      	ldr	r3, [pc, #64]	; (ca94 <usbdc_get_cfg_desc+0xa8>)
    ca52:	4798      	blx	r3
    ca54:	4603      	mov	r3, r0
    ca56:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    ca58:	8a7a      	ldrh	r2, [r7, #18]
    ca5a:	89fb      	ldrh	r3, [r7, #14]
    ca5c:	429a      	cmp	r2, r3
    ca5e:	d802      	bhi.n	ca66 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    ca60:	2300      	movs	r3, #0
    ca62:	747b      	strb	r3, [r7, #17]
    ca64:	e001      	b.n	ca6a <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    ca66:	89fb      	ldrh	r3, [r7, #14]
    ca68:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    ca6a:	8a7a      	ldrh	r2, [r7, #18]
    ca6c:	7c7b      	ldrb	r3, [r7, #17]
    ca6e:	79f8      	ldrb	r0, [r7, #7]
    ca70:	6979      	ldr	r1, [r7, #20]
    ca72:	4c09      	ldr	r4, [pc, #36]	; (ca98 <usbdc_get_cfg_desc+0xac>)
    ca74:	47a0      	blx	r4
    ca76:	4603      	mov	r3, r0
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d001      	beq.n	ca80 <usbdc_get_cfg_desc+0x94>
		return false;
    ca7c:	2300      	movs	r3, #0
    ca7e:	e000      	b.n	ca82 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    ca80:	2301      	movs	r3, #1
}
    ca82:	4618      	mov	r0, r3
    ca84:	371c      	adds	r7, #28
    ca86:	46bd      	mov	sp, r7
    ca88:	bd90      	pop	{r4, r7, pc}
    ca8a:	bf00      	nop
    ca8c:	20000db0 	.word	0x20000db0
    ca90:	0000d7a9 	.word	0x0000d7a9
    ca94:	0000c955 	.word	0x0000c955
    ca98:	0000d459 	.word	0x0000d459

0000ca9c <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    ca9c:	b590      	push	{r4, r7, lr}
    ca9e:	b085      	sub	sp, #20
    caa0:	af00      	add	r7, sp, #0
    caa2:	4603      	mov	r3, r0
    caa4:	6039      	str	r1, [r7, #0]
    caa6:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    caa8:	683b      	ldr	r3, [r7, #0]
    caaa:	799a      	ldrb	r2, [r3, #6]
    caac:	79db      	ldrb	r3, [r3, #7]
    caae:	021b      	lsls	r3, r3, #8
    cab0:	4313      	orrs	r3, r2
    cab2:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cab4:	683b      	ldr	r3, [r7, #0]
    cab6:	885b      	ldrh	r3, [r3, #2]
    cab8:	b29b      	uxth	r3, r3
    caba:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cabc:	89fa      	ldrh	r2, [r7, #14]
    cabe:	4b1a      	ldr	r3, [pc, #104]	; (cb28 <usbdc_get_str_desc+0x8c>)
    cac0:	7f1b      	ldrb	r3, [r3, #28]
    cac2:	3b01      	subs	r3, #1
    cac4:	4013      	ands	r3, r2
    cac6:	2b00      	cmp	r3, #0
    cac8:	bf0c      	ite	eq
    caca:	2301      	moveq	r3, #1
    cacc:	2300      	movne	r3, #0
    cace:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cad0:	4b15      	ldr	r3, [pc, #84]	; (cb28 <usbdc_get_str_desc+0x8c>)
    cad2:	681b      	ldr	r3, [r3, #0]
    cad4:	6818      	ldr	r0, [r3, #0]
    cad6:	4b14      	ldr	r3, [pc, #80]	; (cb28 <usbdc_get_str_desc+0x8c>)
    cad8:	681b      	ldr	r3, [r3, #0]
    cada:	685b      	ldr	r3, [r3, #4]
    cadc:	7b3a      	ldrb	r2, [r7, #12]
    cade:	4619      	mov	r1, r3
    cae0:	4b12      	ldr	r3, [pc, #72]	; (cb2c <usbdc_get_str_desc+0x90>)
    cae2:	4798      	blx	r3
    cae4:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    cae6:	68bb      	ldr	r3, [r7, #8]
    cae8:	2b00      	cmp	r3, #0
    caea:	d101      	bne.n	caf0 <usbdc_get_str_desc+0x54>
		return false;
    caec:	2300      	movs	r3, #0
    caee:	e017      	b.n	cb20 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    caf0:	68bb      	ldr	r3, [r7, #8]
    caf2:	781b      	ldrb	r3, [r3, #0]
    caf4:	b29b      	uxth	r3, r3
    caf6:	89fa      	ldrh	r2, [r7, #14]
    caf8:	429a      	cmp	r2, r3
    cafa:	d802      	bhi.n	cb02 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cafc:	2300      	movs	r3, #0
    cafe:	737b      	strb	r3, [r7, #13]
    cb00:	e002      	b.n	cb08 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cb02:	68bb      	ldr	r3, [r7, #8]
    cb04:	781b      	ldrb	r3, [r3, #0]
    cb06:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cb08:	89fa      	ldrh	r2, [r7, #14]
    cb0a:	7b7b      	ldrb	r3, [r7, #13]
    cb0c:	79f8      	ldrb	r0, [r7, #7]
    cb0e:	68b9      	ldr	r1, [r7, #8]
    cb10:	4c07      	ldr	r4, [pc, #28]	; (cb30 <usbdc_get_str_desc+0x94>)
    cb12:	47a0      	blx	r4
    cb14:	4603      	mov	r3, r0
    cb16:	2b00      	cmp	r3, #0
    cb18:	d001      	beq.n	cb1e <usbdc_get_str_desc+0x82>
		return false;
    cb1a:	2300      	movs	r3, #0
    cb1c:	e000      	b.n	cb20 <usbdc_get_str_desc+0x84>
	}
	return true;
    cb1e:	2301      	movs	r3, #1
}
    cb20:	4618      	mov	r0, r3
    cb22:	3714      	adds	r7, #20
    cb24:	46bd      	mov	sp, r7
    cb26:	bd90      	pop	{r4, r7, pc}
    cb28:	20000db0 	.word	0x20000db0
    cb2c:	0000d821 	.word	0x0000d821
    cb30:	0000d459 	.word	0x0000d459

0000cb34 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    cb34:	b580      	push	{r7, lr}
    cb36:	b084      	sub	sp, #16
    cb38:	af00      	add	r7, sp, #0
    cb3a:	4603      	mov	r3, r0
    cb3c:	6039      	str	r1, [r7, #0]
    cb3e:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    cb40:	683b      	ldr	r3, [r7, #0]
    cb42:	885b      	ldrh	r3, [r3, #2]
    cb44:	b29b      	uxth	r3, r3
    cb46:	0a1b      	lsrs	r3, r3, #8
    cb48:	b29b      	uxth	r3, r3
    cb4a:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    cb4c:	7bfb      	ldrb	r3, [r7, #15]
    cb4e:	2b02      	cmp	r3, #2
    cb50:	d00d      	beq.n	cb6e <usbdc_get_desc_req+0x3a>
    cb52:	2b03      	cmp	r3, #3
    cb54:	d012      	beq.n	cb7c <usbdc_get_desc_req+0x48>
    cb56:	2b01      	cmp	r3, #1
    cb58:	d002      	beq.n	cb60 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    cb5a:	bf00      	nop
	}
	return false;
    cb5c:	2300      	movs	r3, #0
    cb5e:	e013      	b.n	cb88 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    cb60:	79fb      	ldrb	r3, [r7, #7]
    cb62:	6839      	ldr	r1, [r7, #0]
    cb64:	4618      	mov	r0, r3
    cb66:	4b0a      	ldr	r3, [pc, #40]	; (cb90 <usbdc_get_desc_req+0x5c>)
    cb68:	4798      	blx	r3
    cb6a:	4603      	mov	r3, r0
    cb6c:	e00c      	b.n	cb88 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    cb6e:	79fb      	ldrb	r3, [r7, #7]
    cb70:	6839      	ldr	r1, [r7, #0]
    cb72:	4618      	mov	r0, r3
    cb74:	4b07      	ldr	r3, [pc, #28]	; (cb94 <usbdc_get_desc_req+0x60>)
    cb76:	4798      	blx	r3
    cb78:	4603      	mov	r3, r0
    cb7a:	e005      	b.n	cb88 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    cb7c:	79fb      	ldrb	r3, [r7, #7]
    cb7e:	6839      	ldr	r1, [r7, #0]
    cb80:	4618      	mov	r0, r3
    cb82:	4b05      	ldr	r3, [pc, #20]	; (cb98 <usbdc_get_desc_req+0x64>)
    cb84:	4798      	blx	r3
    cb86:	4603      	mov	r3, r0
}
    cb88:	4618      	mov	r0, r3
    cb8a:	3710      	adds	r7, #16
    cb8c:	46bd      	mov	sp, r7
    cb8e:	bd80      	pop	{r7, pc}
    cb90:	0000c975 	.word	0x0000c975
    cb94:	0000c9ed 	.word	0x0000c9ed
    cb98:	0000ca9d 	.word	0x0000ca9d

0000cb9c <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    cb9c:	b590      	push	{r4, r7, lr}
    cb9e:	b085      	sub	sp, #20
    cba0:	af00      	add	r7, sp, #0
    cba2:	4603      	mov	r3, r0
    cba4:	6039      	str	r1, [r7, #0]
    cba6:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cba8:	683b      	ldr	r3, [r7, #0]
    cbaa:	781b      	ldrb	r3, [r3, #0]
    cbac:	f003 031f 	and.w	r3, r3, #31
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	db1b      	blt.n	cbec <usbdc_get_status_req+0x50>
    cbb4:	2b01      	cmp	r3, #1
    cbb6:	dd02      	ble.n	cbbe <usbdc_get_status_req+0x22>
    cbb8:	2b02      	cmp	r3, #2
    cbba:	d003      	beq.n	cbc4 <usbdc_get_status_req+0x28>
    cbbc:	e016      	b.n	cbec <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    cbbe:	2300      	movs	r3, #0
    cbc0:	60fb      	str	r3, [r7, #12]
		break;
    cbc2:	e015      	b.n	cbf0 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cbc4:	683b      	ldr	r3, [r7, #0]
    cbc6:	889b      	ldrh	r3, [r3, #4]
    cbc8:	b29b      	uxth	r3, r3
    cbca:	b2db      	uxtb	r3, r3
    cbcc:	2102      	movs	r1, #2
    cbce:	4618      	mov	r0, r3
    cbd0:	4b0f      	ldr	r3, [pc, #60]	; (cc10 <usbdc_get_status_req+0x74>)
    cbd2:	4798      	blx	r3
    cbd4:	4603      	mov	r3, r0
    cbd6:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    cbd8:	68fb      	ldr	r3, [r7, #12]
    cbda:	2b00      	cmp	r3, #0
    cbdc:	da01      	bge.n	cbe2 <usbdc_get_status_req+0x46>
			return false;
    cbde:	2300      	movs	r3, #0
    cbe0:	e012      	b.n	cc08 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cbe2:	68fb      	ldr	r3, [r7, #12]
    cbe4:	f003 0301 	and.w	r3, r3, #1
    cbe8:	60fb      	str	r3, [r7, #12]
		break;
    cbea:	e001      	b.n	cbf0 <usbdc_get_status_req+0x54>
	default:
		return false;
    cbec:	2300      	movs	r3, #0
    cbee:	e00b      	b.n	cc08 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    cbf0:	4b08      	ldr	r3, [pc, #32]	; (cc14 <usbdc_get_status_req+0x78>)
    cbf2:	695b      	ldr	r3, [r3, #20]
    cbf4:	89ba      	ldrh	r2, [r7, #12]
    cbf6:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cbf8:	4b06      	ldr	r3, [pc, #24]	; (cc14 <usbdc_get_status_req+0x78>)
    cbfa:	6959      	ldr	r1, [r3, #20]
    cbfc:	79f8      	ldrb	r0, [r7, #7]
    cbfe:	2300      	movs	r3, #0
    cc00:	2202      	movs	r2, #2
    cc02:	4c05      	ldr	r4, [pc, #20]	; (cc18 <usbdc_get_status_req+0x7c>)
    cc04:	47a0      	blx	r4
	return true;
    cc06:	2301      	movs	r3, #1
}
    cc08:	4618      	mov	r0, r3
    cc0a:	3714      	adds	r7, #20
    cc0c:	46bd      	mov	sp, r7
    cc0e:	bd90      	pop	{r4, r7, pc}
    cc10:	00003d25 	.word	0x00003d25
    cc14:	20000db0 	.word	0x20000db0
    cc18:	0000d459 	.word	0x0000d459

0000cc1c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cc1c:	b590      	push	{r4, r7, lr}
    cc1e:	b085      	sub	sp, #20
    cc20:	af00      	add	r7, sp, #0
    cc22:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cc24:	4b1f      	ldr	r3, [pc, #124]	; (cca4 <usbdc_get_interface+0x88>)
    cc26:	691b      	ldr	r3, [r3, #16]
    cc28:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cc2a:	4b1e      	ldr	r3, [pc, #120]	; (cca4 <usbdc_get_interface+0x88>)
    cc2c:	7f5b      	ldrb	r3, [r3, #29]
    cc2e:	461a      	mov	r2, r3
    cc30:	687b      	ldr	r3, [r7, #4]
    cc32:	889b      	ldrh	r3, [r3, #4]
    cc34:	b29b      	uxth	r3, r3
    cc36:	fa42 f303 	asr.w	r3, r2, r3
    cc3a:	f003 0301 	and.w	r3, r3, #1
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d128      	bne.n	cc94 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cc42:	4b18      	ldr	r3, [pc, #96]	; (cca4 <usbdc_get_interface+0x88>)
    cc44:	695b      	ldr	r3, [r3, #20]
    cc46:	2200      	movs	r2, #0
    cc48:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cc4a:	4b16      	ldr	r3, [pc, #88]	; (cca4 <usbdc_get_interface+0x88>)
    cc4c:	6959      	ldr	r1, [r3, #20]
    cc4e:	2300      	movs	r3, #0
    cc50:	2201      	movs	r2, #1
    cc52:	2000      	movs	r0, #0
    cc54:	4c14      	ldr	r4, [pc, #80]	; (cca8 <usbdc_get_interface+0x8c>)
    cc56:	47a0      	blx	r4
		return true;
    cc58:	2301      	movs	r3, #1
    cc5a:	e01f      	b.n	cc9c <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cc5c:	68fb      	ldr	r3, [r7, #12]
    cc5e:	685b      	ldr	r3, [r3, #4]
    cc60:	687a      	ldr	r2, [r7, #4]
    cc62:	2102      	movs	r1, #2
    cc64:	68f8      	ldr	r0, [r7, #12]
    cc66:	4798      	blx	r3
    cc68:	60b8      	str	r0, [r7, #8]
    cc6a:	68bb      	ldr	r3, [r7, #8]
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	da03      	bge.n	cc78 <usbdc_get_interface+0x5c>
			func = func->next;
    cc70:	68fb      	ldr	r3, [r7, #12]
    cc72:	681b      	ldr	r3, [r3, #0]
    cc74:	60fb      	str	r3, [r7, #12]
    cc76:	e00d      	b.n	cc94 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cc78:	4b0a      	ldr	r3, [pc, #40]	; (cca4 <usbdc_get_interface+0x88>)
    cc7a:	695b      	ldr	r3, [r3, #20]
    cc7c:	68ba      	ldr	r2, [r7, #8]
    cc7e:	b2d2      	uxtb	r2, r2
    cc80:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cc82:	4b08      	ldr	r3, [pc, #32]	; (cca4 <usbdc_get_interface+0x88>)
    cc84:	6959      	ldr	r1, [r3, #20]
    cc86:	2300      	movs	r3, #0
    cc88:	2201      	movs	r2, #1
    cc8a:	2000      	movs	r0, #0
    cc8c:	4c06      	ldr	r4, [pc, #24]	; (cca8 <usbdc_get_interface+0x8c>)
    cc8e:	47a0      	blx	r4
			return true;
    cc90:	2301      	movs	r3, #1
    cc92:	e003      	b.n	cc9c <usbdc_get_interface+0x80>
	while (NULL != func) {
    cc94:	68fb      	ldr	r3, [r7, #12]
    cc96:	2b00      	cmp	r3, #0
    cc98:	d1e0      	bne.n	cc5c <usbdc_get_interface+0x40>
		}
	}
	return false;
    cc9a:	2300      	movs	r3, #0
}
    cc9c:	4618      	mov	r0, r3
    cc9e:	3714      	adds	r7, #20
    cca0:	46bd      	mov	sp, r7
    cca2:	bd90      	pop	{r4, r7, pc}
    cca4:	20000db0 	.word	0x20000db0
    cca8:	0000d459 	.word	0x0000d459

0000ccac <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ccac:	b590      	push	{r4, r7, lr}
    ccae:	b083      	sub	sp, #12
    ccb0:	af00      	add	r7, sp, #0
    ccb2:	4603      	mov	r3, r0
    ccb4:	6039      	str	r1, [r7, #0]
    ccb6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ccb8:	683b      	ldr	r3, [r7, #0]
    ccba:	785b      	ldrb	r3, [r3, #1]
    ccbc:	2b0a      	cmp	r3, #10
    ccbe:	d83a      	bhi.n	cd36 <usbdc_get_req+0x8a>
    ccc0:	a201      	add	r2, pc, #4	; (adr r2, ccc8 <usbdc_get_req+0x1c>)
    ccc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccc6:	bf00      	nop
    ccc8:	0000cd1f 	.word	0x0000cd1f
    cccc:	0000cd37 	.word	0x0000cd37
    ccd0:	0000cd37 	.word	0x0000cd37
    ccd4:	0000cd37 	.word	0x0000cd37
    ccd8:	0000cd37 	.word	0x0000cd37
    ccdc:	0000cd37 	.word	0x0000cd37
    cce0:	0000ccf5 	.word	0x0000ccf5
    cce4:	0000cd37 	.word	0x0000cd37
    cce8:	0000cd03 	.word	0x0000cd03
    ccec:	0000cd37 	.word	0x0000cd37
    ccf0:	0000cd2d 	.word	0x0000cd2d
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    ccf4:	79fb      	ldrb	r3, [r7, #7]
    ccf6:	6839      	ldr	r1, [r7, #0]
    ccf8:	4618      	mov	r0, r3
    ccfa:	4b11      	ldr	r3, [pc, #68]	; (cd40 <usbdc_get_req+0x94>)
    ccfc:	4798      	blx	r3
    ccfe:	4603      	mov	r3, r0
    cd00:	e01a      	b.n	cd38 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cd02:	4b10      	ldr	r3, [pc, #64]	; (cd44 <usbdc_get_req+0x98>)
    cd04:	695b      	ldr	r3, [r3, #20]
    cd06:	4a0f      	ldr	r2, [pc, #60]	; (cd44 <usbdc_get_req+0x98>)
    cd08:	7ed2      	ldrb	r2, [r2, #27]
    cd0a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cd0c:	4b0d      	ldr	r3, [pc, #52]	; (cd44 <usbdc_get_req+0x98>)
    cd0e:	6959      	ldr	r1, [r3, #20]
    cd10:	79f8      	ldrb	r0, [r7, #7]
    cd12:	2300      	movs	r3, #0
    cd14:	2201      	movs	r2, #1
    cd16:	4c0c      	ldr	r4, [pc, #48]	; (cd48 <usbdc_get_req+0x9c>)
    cd18:	47a0      	blx	r4
		return true;
    cd1a:	2301      	movs	r3, #1
    cd1c:	e00c      	b.n	cd38 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    cd1e:	79fb      	ldrb	r3, [r7, #7]
    cd20:	6839      	ldr	r1, [r7, #0]
    cd22:	4618      	mov	r0, r3
    cd24:	4b09      	ldr	r3, [pc, #36]	; (cd4c <usbdc_get_req+0xa0>)
    cd26:	4798      	blx	r3
    cd28:	4603      	mov	r3, r0
    cd2a:	e005      	b.n	cd38 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    cd2c:	6838      	ldr	r0, [r7, #0]
    cd2e:	4b08      	ldr	r3, [pc, #32]	; (cd50 <usbdc_get_req+0xa4>)
    cd30:	4798      	blx	r3
    cd32:	4603      	mov	r3, r0
    cd34:	e000      	b.n	cd38 <usbdc_get_req+0x8c>
	default:
		return false;
    cd36:	2300      	movs	r3, #0
	}
}
    cd38:	4618      	mov	r0, r3
    cd3a:	370c      	adds	r7, #12
    cd3c:	46bd      	mov	sp, r7
    cd3e:	bd90      	pop	{r4, r7, pc}
    cd40:	0000cb35 	.word	0x0000cb35
    cd44:	20000db0 	.word	0x20000db0
    cd48:	0000d459 	.word	0x0000d459
    cd4c:	0000cb9d 	.word	0x0000cb9d
    cd50:	0000cc1d 	.word	0x0000cc1d

0000cd54 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cd54:	b590      	push	{r4, r7, lr}
    cd56:	b083      	sub	sp, #12
    cd58:	af00      	add	r7, sp, #0
    cd5a:	4603      	mov	r3, r0
    cd5c:	6039      	str	r1, [r7, #0]
    cd5e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cd60:	683b      	ldr	r3, [r7, #0]
    cd62:	781b      	ldrb	r3, [r3, #0]
    cd64:	f003 031f 	and.w	r3, r3, #31
    cd68:	2b02      	cmp	r3, #2
    cd6a:	d116      	bne.n	cd9a <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cd6c:	683b      	ldr	r3, [r7, #0]
    cd6e:	88db      	ldrh	r3, [r3, #6]
    cd70:	b29b      	uxth	r3, r3
    cd72:	2b00      	cmp	r3, #0
    cd74:	d001      	beq.n	cd7a <usbdc_clear_ftr_req+0x26>
			return false;
    cd76:	2300      	movs	r3, #0
    cd78:	e010      	b.n	cd9c <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    cd7a:	683b      	ldr	r3, [r7, #0]
    cd7c:	889b      	ldrh	r3, [r3, #4]
    cd7e:	b29b      	uxth	r3, r3
    cd80:	b2db      	uxtb	r3, r3
    cd82:	2100      	movs	r1, #0
    cd84:	4618      	mov	r0, r3
    cd86:	4b07      	ldr	r3, [pc, #28]	; (cda4 <usbdc_clear_ftr_req+0x50>)
    cd88:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cd8a:	79f8      	ldrb	r0, [r7, #7]
    cd8c:	2301      	movs	r3, #1
    cd8e:	2200      	movs	r2, #0
    cd90:	2100      	movs	r1, #0
    cd92:	4c05      	ldr	r4, [pc, #20]	; (cda8 <usbdc_clear_ftr_req+0x54>)
    cd94:	47a0      	blx	r4
		return true;
    cd96:	2301      	movs	r3, #1
    cd98:	e000      	b.n	cd9c <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    cd9a:	2300      	movs	r3, #0
	}
}
    cd9c:	4618      	mov	r0, r3
    cd9e:	370c      	adds	r7, #12
    cda0:	46bd      	mov	sp, r7
    cda2:	bd90      	pop	{r4, r7, pc}
    cda4:	00003d25 	.word	0x00003d25
    cda8:	0000d459 	.word	0x0000d459

0000cdac <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cdac:	b590      	push	{r4, r7, lr}
    cdae:	b083      	sub	sp, #12
    cdb0:	af00      	add	r7, sp, #0
    cdb2:	4603      	mov	r3, r0
    cdb4:	6039      	str	r1, [r7, #0]
    cdb6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cdb8:	683b      	ldr	r3, [r7, #0]
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	f003 031f 	and.w	r3, r3, #31
    cdc0:	2b02      	cmp	r3, #2
    cdc2:	d116      	bne.n	cdf2 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cdc4:	683b      	ldr	r3, [r7, #0]
    cdc6:	88db      	ldrh	r3, [r3, #6]
    cdc8:	b29b      	uxth	r3, r3
    cdca:	2b00      	cmp	r3, #0
    cdcc:	d001      	beq.n	cdd2 <usbdc_set_ftr_req+0x26>
			return false;
    cdce:	2300      	movs	r3, #0
    cdd0:	e010      	b.n	cdf4 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    cdd2:	683b      	ldr	r3, [r7, #0]
    cdd4:	889b      	ldrh	r3, [r3, #4]
    cdd6:	b29b      	uxth	r3, r3
    cdd8:	b2db      	uxtb	r3, r3
    cdda:	2101      	movs	r1, #1
    cddc:	4618      	mov	r0, r3
    cdde:	4b07      	ldr	r3, [pc, #28]	; (cdfc <usbdc_set_ftr_req+0x50>)
    cde0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cde2:	79f8      	ldrb	r0, [r7, #7]
    cde4:	2301      	movs	r3, #1
    cde6:	2200      	movs	r2, #0
    cde8:	2100      	movs	r1, #0
    cdea:	4c05      	ldr	r4, [pc, #20]	; (ce00 <usbdc_set_ftr_req+0x54>)
    cdec:	47a0      	blx	r4
		return true;
    cdee:	2301      	movs	r3, #1
    cdf0:	e000      	b.n	cdf4 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    cdf2:	2300      	movs	r3, #0
	}
}
    cdf4:	4618      	mov	r0, r3
    cdf6:	370c      	adds	r7, #12
    cdf8:	46bd      	mov	sp, r7
    cdfa:	bd90      	pop	{r4, r7, pc}
    cdfc:	00003d25 	.word	0x00003d25
    ce00:	0000d459 	.word	0x0000d459

0000ce04 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ce04:	b580      	push	{r7, lr}
    ce06:	b082      	sub	sp, #8
    ce08:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ce0a:	4b0a      	ldr	r3, [pc, #40]	; (ce34 <usbdc_unconfig+0x30>)
    ce0c:	691b      	ldr	r3, [r3, #16]
    ce0e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ce10:	e008      	b.n	ce24 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ce12:	687b      	ldr	r3, [r7, #4]
    ce14:	685b      	ldr	r3, [r3, #4]
    ce16:	2200      	movs	r2, #0
    ce18:	2101      	movs	r1, #1
    ce1a:	6878      	ldr	r0, [r7, #4]
    ce1c:	4798      	blx	r3
		func = func->next;
    ce1e:	687b      	ldr	r3, [r7, #4]
    ce20:	681b      	ldr	r3, [r3, #0]
    ce22:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ce24:	687b      	ldr	r3, [r7, #4]
    ce26:	2b00      	cmp	r3, #0
    ce28:	d1f3      	bne.n	ce12 <usbdc_unconfig+0xe>
	}
}
    ce2a:	bf00      	nop
    ce2c:	3708      	adds	r7, #8
    ce2e:	46bd      	mov	sp, r7
    ce30:	bd80      	pop	{r7, pc}
    ce32:	bf00      	nop
    ce34:	20000db0 	.word	0x20000db0

0000ce38 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    ce38:	b580      	push	{r7, lr}
    ce3a:	b088      	sub	sp, #32
    ce3c:	af00      	add	r7, sp, #0
    ce3e:	4603      	mov	r3, r0
    ce40:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    ce42:	2300      	movs	r3, #0
    ce44:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    ce46:	23ff      	movs	r3, #255	; 0xff
    ce48:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    ce4a:	79fb      	ldrb	r3, [r7, #7]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d103      	bne.n	ce58 <usbdc_set_config+0x20>
		usbdc_unconfig();
    ce50:	4b2e      	ldr	r3, [pc, #184]	; (cf0c <usbdc_set_config+0xd4>)
    ce52:	4798      	blx	r3
		return true;
    ce54:	2301      	movs	r3, #1
    ce56:	e055      	b.n	cf04 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ce58:	69bb      	ldr	r3, [r7, #24]
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d10a      	bne.n	ce74 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ce5e:	4b2c      	ldr	r3, [pc, #176]	; (cf10 <usbdc_set_config+0xd8>)
    ce60:	681b      	ldr	r3, [r3, #0]
    ce62:	6818      	ldr	r0, [r3, #0]
    ce64:	4b2a      	ldr	r3, [pc, #168]	; (cf10 <usbdc_set_config+0xd8>)
    ce66:	681b      	ldr	r3, [r3, #0]
    ce68:	685b      	ldr	r3, [r3, #4]
    ce6a:	79fa      	ldrb	r2, [r7, #7]
    ce6c:	4619      	mov	r1, r3
    ce6e:	4b29      	ldr	r3, [pc, #164]	; (cf14 <usbdc_set_config+0xdc>)
    ce70:	4798      	blx	r3
    ce72:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    ce74:	69bb      	ldr	r3, [r7, #24]
    ce76:	2b00      	cmp	r3, #0
    ce78:	d101      	bne.n	ce7e <usbdc_set_config+0x46>
		return false;
    ce7a:	2300      	movs	r3, #0
    ce7c:	e042      	b.n	cf04 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    ce7e:	69b8      	ldr	r0, [r7, #24]
    ce80:	4b25      	ldr	r3, [pc, #148]	; (cf18 <usbdc_set_config+0xe0>)
    ce82:	4798      	blx	r3
    ce84:	4603      	mov	r3, r0
    ce86:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    ce88:	8abb      	ldrh	r3, [r7, #20]
    ce8a:	69ba      	ldr	r2, [r7, #24]
    ce8c:	4413      	add	r3, r2
    ce8e:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ce90:	693b      	ldr	r3, [r7, #16]
    ce92:	2204      	movs	r2, #4
    ce94:	4619      	mov	r1, r3
    ce96:	69b8      	ldr	r0, [r7, #24]
    ce98:	4b20      	ldr	r3, [pc, #128]	; (cf1c <usbdc_set_config+0xe4>)
    ce9a:	4798      	blx	r3
    ce9c:	4603      	mov	r3, r0
    ce9e:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    cea0:	e02c      	b.n	cefc <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    cea2:	68fb      	ldr	r3, [r7, #12]
    cea4:	3302      	adds	r3, #2
    cea6:	781b      	ldrb	r3, [r3, #0]
    cea8:	7dfa      	ldrb	r2, [r7, #23]
    ceaa:	429a      	cmp	r2, r3
    ceac:	d018      	beq.n	cee0 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    ceae:	68fb      	ldr	r3, [r7, #12]
    ceb0:	789b      	ldrb	r3, [r3, #2]
    ceb2:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ceb4:	4b16      	ldr	r3, [pc, #88]	; (cf10 <usbdc_set_config+0xd8>)
    ceb6:	691b      	ldr	r3, [r3, #16]
    ceb8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ceba:	e00c      	b.n	ced6 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    cebc:	69fb      	ldr	r3, [r7, #28]
    cebe:	685b      	ldr	r3, [r3, #4]
    cec0:	f107 020c 	add.w	r2, r7, #12
    cec4:	2100      	movs	r1, #0
    cec6:	69f8      	ldr	r0, [r7, #28]
    cec8:	4798      	blx	r3
    ceca:	4603      	mov	r3, r0
    cecc:	2b00      	cmp	r3, #0
    cece:	d006      	beq.n	cede <usbdc_set_config+0xa6>
					func = func->next;
    ced0:	69fb      	ldr	r3, [r7, #28]
    ced2:	681b      	ldr	r3, [r3, #0]
    ced4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ced6:	69fb      	ldr	r3, [r7, #28]
    ced8:	2b00      	cmp	r3, #0
    ceda:	d1ef      	bne.n	cebc <usbdc_set_config+0x84>
    cedc:	e000      	b.n	cee0 <usbdc_set_config+0xa8>
				} else {
					break;
    cede:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    cee0:	68fb      	ldr	r3, [r7, #12]
    cee2:	4618      	mov	r0, r3
    cee4:	4b0e      	ldr	r3, [pc, #56]	; (cf20 <usbdc_set_config+0xe8>)
    cee6:	4798      	blx	r3
    cee8:	4603      	mov	r3, r0
    ceea:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ceec:	68fb      	ldr	r3, [r7, #12]
    ceee:	6939      	ldr	r1, [r7, #16]
    cef0:	2204      	movs	r2, #4
    cef2:	4618      	mov	r0, r3
    cef4:	4b09      	ldr	r3, [pc, #36]	; (cf1c <usbdc_set_config+0xe4>)
    cef6:	4798      	blx	r3
    cef8:	4603      	mov	r3, r0
    cefa:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    cefc:	68fb      	ldr	r3, [r7, #12]
    cefe:	2b00      	cmp	r3, #0
    cf00:	d1cf      	bne.n	cea2 <usbdc_set_config+0x6a>
	}
	return true;
    cf02:	2301      	movs	r3, #1
}
    cf04:	4618      	mov	r0, r3
    cf06:	3720      	adds	r7, #32
    cf08:	46bd      	mov	sp, r7
    cf0a:	bd80      	pop	{r7, pc}
    cf0c:	0000ce05 	.word	0x0000ce05
    cf10:	20000db0 	.word	0x20000db0
    cf14:	0000d7a9 	.word	0x0000d7a9
    cf18:	0000c955 	.word	0x0000c955
    cf1c:	0000d6e9 	.word	0x0000d6e9
    cf20:	0000c931 	.word	0x0000c931

0000cf24 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    cf24:	b580      	push	{r7, lr}
    cf26:	b082      	sub	sp, #8
    cf28:	af00      	add	r7, sp, #0
    cf2a:	4603      	mov	r3, r0
    cf2c:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    cf2e:	79fb      	ldrb	r3, [r7, #7]
    cf30:	4618      	mov	r0, r3
    cf32:	4b03      	ldr	r3, [pc, #12]	; (cf40 <usbdc_set_address+0x1c>)
    cf34:	4798      	blx	r3
}
    cf36:	bf00      	nop
    cf38:	3708      	adds	r7, #8
    cf3a:	46bd      	mov	sp, r7
    cf3c:	bd80      	pop	{r7, pc}
    cf3e:	bf00      	nop
    cf40:	00003941 	.word	0x00003941

0000cf44 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    cf44:	b590      	push	{r4, r7, lr}
    cf46:	b087      	sub	sp, #28
    cf48:	af00      	add	r7, sp, #0
    cf4a:	4603      	mov	r3, r0
    cf4c:	460a      	mov	r2, r1
    cf4e:	80fb      	strh	r3, [r7, #6]
    cf50:	4613      	mov	r3, r2
    cf52:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    cf54:	2300      	movs	r3, #0
    cf56:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    cf58:	693b      	ldr	r3, [r7, #16]
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d10b      	bne.n	cf76 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    cf5e:	4b43      	ldr	r3, [pc, #268]	; (d06c <usbdc_set_interface+0x128>)
    cf60:	681b      	ldr	r3, [r3, #0]
    cf62:	6818      	ldr	r0, [r3, #0]
    cf64:	4b41      	ldr	r3, [pc, #260]	; (d06c <usbdc_set_interface+0x128>)
    cf66:	681b      	ldr	r3, [r3, #0]
    cf68:	6859      	ldr	r1, [r3, #4]
    cf6a:	4b40      	ldr	r3, [pc, #256]	; (d06c <usbdc_set_interface+0x128>)
    cf6c:	7edb      	ldrb	r3, [r3, #27]
    cf6e:	461a      	mov	r2, r3
    cf70:	4b3f      	ldr	r3, [pc, #252]	; (d070 <usbdc_set_interface+0x12c>)
    cf72:	4798      	blx	r3
    cf74:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    cf76:	693b      	ldr	r3, [r7, #16]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d101      	bne.n	cf80 <usbdc_set_interface+0x3c>
		return false;
    cf7c:	2300      	movs	r3, #0
    cf7e:	e071      	b.n	d064 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    cf80:	693b      	ldr	r3, [r7, #16]
    cf82:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cf84:	6938      	ldr	r0, [r7, #16]
    cf86:	4b3b      	ldr	r3, [pc, #236]	; (d074 <usbdc_set_interface+0x130>)
    cf88:	4798      	blx	r3
    cf8a:	4603      	mov	r3, r0
    cf8c:	461a      	mov	r2, r3
    cf8e:	693b      	ldr	r3, [r7, #16]
    cf90:	4413      	add	r3, r2
    cf92:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cf94:	68bb      	ldr	r3, [r7, #8]
    cf96:	68f9      	ldr	r1, [r7, #12]
    cf98:	2204      	movs	r2, #4
    cf9a:	4618      	mov	r0, r3
    cf9c:	4b36      	ldr	r3, [pc, #216]	; (d078 <usbdc_set_interface+0x134>)
    cf9e:	4798      	blx	r3
    cfa0:	6138      	str	r0, [r7, #16]
    cfa2:	693b      	ldr	r3, [r7, #16]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d113      	bne.n	cfd0 <usbdc_set_interface+0x8c>
		return false;
    cfa8:	2300      	movs	r3, #0
    cfaa:	e05b      	b.n	d064 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cfac:	68bb      	ldr	r3, [r7, #8]
    cfae:	4618      	mov	r0, r3
    cfb0:	4b32      	ldr	r3, [pc, #200]	; (d07c <usbdc_set_interface+0x138>)
    cfb2:	4798      	blx	r3
    cfb4:	4603      	mov	r3, r0
    cfb6:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cfb8:	68bb      	ldr	r3, [r7, #8]
    cfba:	68f9      	ldr	r1, [r7, #12]
    cfbc:	2204      	movs	r2, #4
    cfbe:	4618      	mov	r0, r3
    cfc0:	4b2d      	ldr	r3, [pc, #180]	; (d078 <usbdc_set_interface+0x134>)
    cfc2:	4798      	blx	r3
    cfc4:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cfc6:	693b      	ldr	r3, [r7, #16]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	d101      	bne.n	cfd0 <usbdc_set_interface+0x8c>
			return false;
    cfcc:	2300      	movs	r3, #0
    cfce:	e049      	b.n	d064 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cfd0:	693b      	ldr	r3, [r7, #16]
    cfd2:	3302      	adds	r3, #2
    cfd4:	781b      	ldrb	r3, [r3, #0]
    cfd6:	b29b      	uxth	r3, r3
    cfd8:	88ba      	ldrh	r2, [r7, #4]
    cfda:	429a      	cmp	r2, r3
    cfdc:	d1e6      	bne.n	cfac <usbdc_set_interface+0x68>
    cfde:	693b      	ldr	r3, [r7, #16]
    cfe0:	3303      	adds	r3, #3
    cfe2:	781b      	ldrb	r3, [r3, #0]
    cfe4:	b29b      	uxth	r3, r3
    cfe6:	88fa      	ldrh	r2, [r7, #6]
    cfe8:	429a      	cmp	r2, r3
    cfea:	d1df      	bne.n	cfac <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cfec:	693b      	ldr	r3, [r7, #16]
    cfee:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    cff0:	4b1e      	ldr	r3, [pc, #120]	; (d06c <usbdc_set_interface+0x128>)
    cff2:	691b      	ldr	r3, [r3, #16]
    cff4:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cff6:	e031      	b.n	d05c <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cff8:	697b      	ldr	r3, [r7, #20]
    cffa:	685b      	ldr	r3, [r3, #4]
    cffc:	f107 0208 	add.w	r2, r7, #8
    d000:	2101      	movs	r1, #1
    d002:	6978      	ldr	r0, [r7, #20]
    d004:	4798      	blx	r3
    d006:	4603      	mov	r3, r0
    d008:	2b00      	cmp	r3, #0
    d00a:	d003      	beq.n	d014 <usbdc_set_interface+0xd0>
			func = func->next;
    d00c:	697b      	ldr	r3, [r7, #20]
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	617b      	str	r3, [r7, #20]
    d012:	e023      	b.n	d05c <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d014:	697b      	ldr	r3, [r7, #20]
    d016:	685b      	ldr	r3, [r3, #4]
    d018:	f107 0208 	add.w	r2, r7, #8
    d01c:	2100      	movs	r1, #0
    d01e:	6978      	ldr	r0, [r7, #20]
    d020:	4798      	blx	r3
    d022:	4603      	mov	r3, r0
    d024:	2b00      	cmp	r3, #0
    d026:	d117      	bne.n	d058 <usbdc_set_interface+0x114>
			if (alt_set) {
    d028:	88fb      	ldrh	r3, [r7, #6]
    d02a:	2b00      	cmp	r3, #0
    d02c:	d00c      	beq.n	d048 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d02e:	4b0f      	ldr	r3, [pc, #60]	; (d06c <usbdc_set_interface+0x128>)
    d030:	7f5b      	ldrb	r3, [r3, #29]
    d032:	b25a      	sxtb	r2, r3
    d034:	88bb      	ldrh	r3, [r7, #4]
    d036:	2101      	movs	r1, #1
    d038:	fa01 f303 	lsl.w	r3, r1, r3
    d03c:	b25b      	sxtb	r3, r3
    d03e:	4313      	orrs	r3, r2
    d040:	b25b      	sxtb	r3, r3
    d042:	b2da      	uxtb	r2, r3
    d044:	4b09      	ldr	r3, [pc, #36]	; (d06c <usbdc_set_interface+0x128>)
    d046:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d048:	2300      	movs	r3, #0
    d04a:	2200      	movs	r2, #0
    d04c:	2100      	movs	r1, #0
    d04e:	2000      	movs	r0, #0
    d050:	4c0b      	ldr	r4, [pc, #44]	; (d080 <usbdc_set_interface+0x13c>)
    d052:	47a0      	blx	r4
			return true;
    d054:	2301      	movs	r3, #1
    d056:	e005      	b.n	d064 <usbdc_set_interface+0x120>
		} else {
			return false;
    d058:	2300      	movs	r3, #0
    d05a:	e003      	b.n	d064 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d05c:	697b      	ldr	r3, [r7, #20]
    d05e:	2b00      	cmp	r3, #0
    d060:	d1ca      	bne.n	cff8 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d062:	2300      	movs	r3, #0
}
    d064:	4618      	mov	r0, r3
    d066:	371c      	adds	r7, #28
    d068:	46bd      	mov	sp, r7
    d06a:	bd90      	pop	{r4, r7, pc}
    d06c:	20000db0 	.word	0x20000db0
    d070:	0000d7a9 	.word	0x0000d7a9
    d074:	0000c955 	.word	0x0000c955
    d078:	0000d6e9 	.word	0x0000d6e9
    d07c:	0000c931 	.word	0x0000c931
    d080:	0000d459 	.word	0x0000d459

0000d084 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d084:	b590      	push	{r4, r7, lr}
    d086:	b083      	sub	sp, #12
    d088:	af00      	add	r7, sp, #0
    d08a:	4603      	mov	r3, r0
    d08c:	6039      	str	r1, [r7, #0]
    d08e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d090:	683b      	ldr	r3, [r7, #0]
    d092:	785b      	ldrb	r3, [r3, #1]
    d094:	3b01      	subs	r3, #1
    d096:	2b0a      	cmp	r3, #10
    d098:	d85b      	bhi.n	d152 <usbdc_set_req+0xce>
    d09a:	a201      	add	r2, pc, #4	; (adr r2, d0a0 <usbdc_set_req+0x1c>)
    d09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d0a0:	0000d11f 	.word	0x0000d11f
    d0a4:	0000d153 	.word	0x0000d153
    d0a8:	0000d12d 	.word	0x0000d12d
    d0ac:	0000d153 	.word	0x0000d153
    d0b0:	0000d0cd 	.word	0x0000d0cd
    d0b4:	0000d153 	.word	0x0000d153
    d0b8:	0000d153 	.word	0x0000d153
    d0bc:	0000d153 	.word	0x0000d153
    d0c0:	0000d0e7 	.word	0x0000d0e7
    d0c4:	0000d153 	.word	0x0000d153
    d0c8:	0000d13b 	.word	0x0000d13b
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d0cc:	79f8      	ldrb	r0, [r7, #7]
    d0ce:	2301      	movs	r3, #1
    d0d0:	2200      	movs	r2, #0
    d0d2:	2100      	movs	r1, #0
    d0d4:	4c21      	ldr	r4, [pc, #132]	; (d15c <usbdc_set_req+0xd8>)
    d0d6:	47a0      	blx	r4
    d0d8:	4603      	mov	r3, r0
    d0da:	2b00      	cmp	r3, #0
    d0dc:	bf0c      	ite	eq
    d0de:	2301      	moveq	r3, #1
    d0e0:	2300      	movne	r3, #0
    d0e2:	b2db      	uxtb	r3, r3
    d0e4:	e036      	b.n	d154 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d0e6:	683b      	ldr	r3, [r7, #0]
    d0e8:	885b      	ldrh	r3, [r3, #2]
    d0ea:	b29b      	uxth	r3, r3
    d0ec:	b2db      	uxtb	r3, r3
    d0ee:	4618      	mov	r0, r3
    d0f0:	4b1b      	ldr	r3, [pc, #108]	; (d160 <usbdc_set_req+0xdc>)
    d0f2:	4798      	blx	r3
    d0f4:	4603      	mov	r3, r0
    d0f6:	f083 0301 	eor.w	r3, r3, #1
    d0fa:	b2db      	uxtb	r3, r3
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d001      	beq.n	d104 <usbdc_set_req+0x80>
			return false;
    d100:	2300      	movs	r3, #0
    d102:	e027      	b.n	d154 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d104:	79f8      	ldrb	r0, [r7, #7]
    d106:	2301      	movs	r3, #1
    d108:	2200      	movs	r2, #0
    d10a:	2100      	movs	r1, #0
    d10c:	4c13      	ldr	r4, [pc, #76]	; (d15c <usbdc_set_req+0xd8>)
    d10e:	47a0      	blx	r4
    d110:	4603      	mov	r3, r0
    d112:	2b00      	cmp	r3, #0
    d114:	bf0c      	ite	eq
    d116:	2301      	moveq	r3, #1
    d118:	2300      	movne	r3, #0
    d11a:	b2db      	uxtb	r3, r3
    d11c:	e01a      	b.n	d154 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d11e:	79fb      	ldrb	r3, [r7, #7]
    d120:	6839      	ldr	r1, [r7, #0]
    d122:	4618      	mov	r0, r3
    d124:	4b0f      	ldr	r3, [pc, #60]	; (d164 <usbdc_set_req+0xe0>)
    d126:	4798      	blx	r3
    d128:	4603      	mov	r3, r0
    d12a:	e013      	b.n	d154 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d12c:	79fb      	ldrb	r3, [r7, #7]
    d12e:	6839      	ldr	r1, [r7, #0]
    d130:	4618      	mov	r0, r3
    d132:	4b0d      	ldr	r3, [pc, #52]	; (d168 <usbdc_set_req+0xe4>)
    d134:	4798      	blx	r3
    d136:	4603      	mov	r3, r0
    d138:	e00c      	b.n	d154 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d13a:	683b      	ldr	r3, [r7, #0]
    d13c:	885b      	ldrh	r3, [r3, #2]
    d13e:	b29a      	uxth	r2, r3
    d140:	683b      	ldr	r3, [r7, #0]
    d142:	889b      	ldrh	r3, [r3, #4]
    d144:	b29b      	uxth	r3, r3
    d146:	4619      	mov	r1, r3
    d148:	4610      	mov	r0, r2
    d14a:	4b08      	ldr	r3, [pc, #32]	; (d16c <usbdc_set_req+0xe8>)
    d14c:	4798      	blx	r3
    d14e:	4603      	mov	r3, r0
    d150:	e000      	b.n	d154 <usbdc_set_req+0xd0>
	default:
		return false;
    d152:	2300      	movs	r3, #0
	}
}
    d154:	4618      	mov	r0, r3
    d156:	370c      	adds	r7, #12
    d158:	46bd      	mov	sp, r7
    d15a:	bd90      	pop	{r4, r7, pc}
    d15c:	0000d459 	.word	0x0000d459
    d160:	0000ce39 	.word	0x0000ce39
    d164:	0000cd55 	.word	0x0000cd55
    d168:	0000cdad 	.word	0x0000cdad
    d16c:	0000cf45 	.word	0x0000cf45

0000d170 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d170:	b580      	push	{r7, lr}
    d172:	b082      	sub	sp, #8
    d174:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d176:	4b0a      	ldr	r3, [pc, #40]	; (d1a0 <usbdc_sof_notify+0x30>)
    d178:	685b      	ldr	r3, [r3, #4]
    d17a:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d17c:	e009      	b.n	d192 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d17e:	687b      	ldr	r3, [r7, #4]
    d180:	685b      	ldr	r3, [r3, #4]
    d182:	2b00      	cmp	r3, #0
    d184:	d002      	beq.n	d18c <usbdc_sof_notify+0x1c>
			sof->cb();
    d186:	687b      	ldr	r3, [r7, #4]
    d188:	685b      	ldr	r3, [r3, #4]
    d18a:	4798      	blx	r3
		}
		sof = sof->next;
    d18c:	687b      	ldr	r3, [r7, #4]
    d18e:	681b      	ldr	r3, [r3, #0]
    d190:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d192:	687b      	ldr	r3, [r7, #4]
    d194:	2b00      	cmp	r3, #0
    d196:	d1f2      	bne.n	d17e <usbdc_sof_notify+0xe>
	}
}
    d198:	bf00      	nop
    d19a:	3708      	adds	r7, #8
    d19c:	46bd      	mov	sp, r7
    d19e:	bd80      	pop	{r7, pc}
    d1a0:	20000db0 	.word	0x20000db0

0000d1a4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d1a4:	b580      	push	{r7, lr}
    d1a6:	b084      	sub	sp, #16
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	4603      	mov	r3, r0
    d1ac:	6039      	str	r1, [r7, #0]
    d1ae:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d1b0:	4b0b      	ldr	r3, [pc, #44]	; (d1e0 <usbdc_change_notify+0x3c>)
    d1b2:	68db      	ldr	r3, [r3, #12]
    d1b4:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d1b6:	e00c      	b.n	d1d2 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d1b8:	68fb      	ldr	r3, [r7, #12]
    d1ba:	685b      	ldr	r3, [r3, #4]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d005      	beq.n	d1cc <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d1c0:	68fb      	ldr	r3, [r7, #12]
    d1c2:	685b      	ldr	r3, [r3, #4]
    d1c4:	79fa      	ldrb	r2, [r7, #7]
    d1c6:	6839      	ldr	r1, [r7, #0]
    d1c8:	4610      	mov	r0, r2
    d1ca:	4798      	blx	r3
		}
		cg = cg->next;
    d1cc:	68fb      	ldr	r3, [r7, #12]
    d1ce:	681b      	ldr	r3, [r3, #0]
    d1d0:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d1d2:	68fb      	ldr	r3, [r7, #12]
    d1d4:	2b00      	cmp	r3, #0
    d1d6:	d1ef      	bne.n	d1b8 <usbdc_change_notify+0x14>
	}
}
    d1d8:	bf00      	nop
    d1da:	3710      	adds	r7, #16
    d1dc:	46bd      	mov	sp, r7
    d1de:	bd80      	pop	{r7, pc}
    d1e0:	20000db0 	.word	0x20000db0

0000d1e4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d1e4:	b580      	push	{r7, lr}
    d1e6:	b084      	sub	sp, #16
    d1e8:	af00      	add	r7, sp, #0
    d1ea:	4603      	mov	r3, r0
    d1ec:	6039      	str	r1, [r7, #0]
    d1ee:	71fb      	strb	r3, [r7, #7]
    d1f0:	4613      	mov	r3, r2
    d1f2:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d1f4:	4b12      	ldr	r3, [pc, #72]	; (d240 <usbdc_request_handler+0x5c>)
    d1f6:	689b      	ldr	r3, [r3, #8]
    d1f8:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d1fa:	e019      	b.n	d230 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d1fc:	68fb      	ldr	r3, [r7, #12]
    d1fe:	685b      	ldr	r3, [r3, #4]
    d200:	2b00      	cmp	r3, #0
    d202:	d012      	beq.n	d22a <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d204:	68fb      	ldr	r3, [r7, #12]
    d206:	685b      	ldr	r3, [r3, #4]
    d208:	79ba      	ldrb	r2, [r7, #6]
    d20a:	79f8      	ldrb	r0, [r7, #7]
    d20c:	6839      	ldr	r1, [r7, #0]
    d20e:	4798      	blx	r3
    d210:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d212:	68bb      	ldr	r3, [r7, #8]
    d214:	2b00      	cmp	r3, #0
    d216:	d101      	bne.n	d21c <usbdc_request_handler+0x38>
				return true;
    d218:	2301      	movs	r3, #1
    d21a:	e00d      	b.n	d238 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d21c:	68bb      	ldr	r3, [r7, #8]
    d21e:	f113 0f0a 	cmn.w	r3, #10
    d222:	d002      	beq.n	d22a <usbdc_request_handler+0x46>
				return -1;
    d224:	f04f 33ff 	mov.w	r3, #4294967295
    d228:	e006      	b.n	d238 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d22a:	68fb      	ldr	r3, [r7, #12]
    d22c:	681b      	ldr	r3, [r3, #0]
    d22e:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d230:	68fb      	ldr	r3, [r7, #12]
    d232:	2b00      	cmp	r3, #0
    d234:	d1e2      	bne.n	d1fc <usbdc_request_handler+0x18>
	}
	return false;
    d236:	2300      	movs	r3, #0
}
    d238:	4618      	mov	r0, r3
    d23a:	3710      	adds	r7, #16
    d23c:	46bd      	mov	sp, r7
    d23e:	bd80      	pop	{r7, pc}
    d240:	20000db0 	.word	0x20000db0

0000d244 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d244:	b580      	push	{r7, lr}
    d246:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d248:	4b01      	ldr	r3, [pc, #4]	; (d250 <usbd_sof_cb+0xc>)
    d24a:	4798      	blx	r3
}
    d24c:	bf00      	nop
    d24e:	bd80      	pop	{r7, pc}
    d250:	0000d171 	.word	0x0000d171

0000d254 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d254:	b580      	push	{r7, lr}
    d256:	b082      	sub	sp, #8
    d258:	af00      	add	r7, sp, #0
    d25a:	4603      	mov	r3, r0
    d25c:	6039      	str	r1, [r7, #0]
    d25e:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d260:	79fb      	ldrb	r3, [r7, #7]
    d262:	2200      	movs	r2, #0
    d264:	6839      	ldr	r1, [r7, #0]
    d266:	4618      	mov	r0, r3
    d268:	4b14      	ldr	r3, [pc, #80]	; (d2bc <usbdc_cb_ctl_req+0x68>)
    d26a:	4798      	blx	r3
    d26c:	4603      	mov	r3, r0
    d26e:	f1b3 3fff 	cmp.w	r3, #4294967295
    d272:	d00b      	beq.n	d28c <usbdc_cb_ctl_req+0x38>
    d274:	2b01      	cmp	r3, #1
    d276:	d007      	beq.n	d288 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d278:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d27a:	683b      	ldr	r3, [r7, #0]
    d27c:	781b      	ldrb	r3, [r3, #0]
    d27e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d282:	2b00      	cmp	r3, #0
    d284:	d007      	beq.n	d296 <usbdc_cb_ctl_req+0x42>
    d286:	e003      	b.n	d290 <usbdc_cb_ctl_req+0x3c>
		return true;
    d288:	2301      	movs	r3, #1
    d28a:	e013      	b.n	d2b4 <usbdc_cb_ctl_req+0x60>
		return false;
    d28c:	2300      	movs	r3, #0
    d28e:	e011      	b.n	d2b4 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d290:	2b80      	cmp	r3, #128	; 0x80
    d292:	d007      	beq.n	d2a4 <usbdc_cb_ctl_req+0x50>
    d294:	e00d      	b.n	d2b2 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d296:	79fb      	ldrb	r3, [r7, #7]
    d298:	6839      	ldr	r1, [r7, #0]
    d29a:	4618      	mov	r0, r3
    d29c:	4b08      	ldr	r3, [pc, #32]	; (d2c0 <usbdc_cb_ctl_req+0x6c>)
    d29e:	4798      	blx	r3
    d2a0:	4603      	mov	r3, r0
    d2a2:	e007      	b.n	d2b4 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d2a4:	79fb      	ldrb	r3, [r7, #7]
    d2a6:	6839      	ldr	r1, [r7, #0]
    d2a8:	4618      	mov	r0, r3
    d2aa:	4b06      	ldr	r3, [pc, #24]	; (d2c4 <usbdc_cb_ctl_req+0x70>)
    d2ac:	4798      	blx	r3
    d2ae:	4603      	mov	r3, r0
    d2b0:	e000      	b.n	d2b4 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d2b2:	2300      	movs	r3, #0
	}
}
    d2b4:	4618      	mov	r0, r3
    d2b6:	3708      	adds	r7, #8
    d2b8:	46bd      	mov	sp, r7
    d2ba:	bd80      	pop	{r7, pc}
    d2bc:	0000d1e5 	.word	0x0000d1e5
    d2c0:	0000d085 	.word	0x0000d085
    d2c4:	0000ccad 	.word	0x0000ccad

0000d2c8 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d2c8:	b580      	push	{r7, lr}
    d2ca:	b082      	sub	sp, #8
    d2cc:	af00      	add	r7, sp, #0
    d2ce:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d2d0:	687b      	ldr	r3, [r7, #4]
    d2d2:	781b      	ldrb	r3, [r3, #0]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d135      	bne.n	d344 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d2d8:	687b      	ldr	r3, [r7, #4]
    d2da:	785b      	ldrb	r3, [r3, #1]
    d2dc:	2b05      	cmp	r3, #5
    d2de:	d019      	beq.n	d314 <usbdc_ctrl_status_end+0x4c>
    d2e0:	2b09      	cmp	r3, #9
    d2e2:	d000      	beq.n	d2e6 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d2e4:	e02f      	b.n	d346 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d2e6:	687b      	ldr	r3, [r7, #4]
    d2e8:	885b      	ldrh	r3, [r3, #2]
    d2ea:	b29b      	uxth	r3, r3
    d2ec:	b2da      	uxtb	r2, r3
    d2ee:	4b17      	ldr	r3, [pc, #92]	; (d34c <usbdc_ctrl_status_end+0x84>)
    d2f0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d2f2:	687b      	ldr	r3, [r7, #4]
    d2f4:	885b      	ldrh	r3, [r3, #2]
    d2f6:	b29b      	uxth	r3, r3
    d2f8:	2b00      	cmp	r3, #0
    d2fa:	d001      	beq.n	d300 <usbdc_ctrl_status_end+0x38>
    d2fc:	2204      	movs	r2, #4
    d2fe:	e000      	b.n	d302 <usbdc_ctrl_status_end+0x3a>
    d300:	2203      	movs	r2, #3
    d302:	4b12      	ldr	r3, [pc, #72]	; (d34c <usbdc_ctrl_status_end+0x84>)
    d304:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d306:	4b11      	ldr	r3, [pc, #68]	; (d34c <usbdc_ctrl_status_end+0x84>)
    d308:	7e9b      	ldrb	r3, [r3, #26]
    d30a:	4619      	mov	r1, r3
    d30c:	2001      	movs	r0, #1
    d30e:	4b10      	ldr	r3, [pc, #64]	; (d350 <usbdc_ctrl_status_end+0x88>)
    d310:	4798      	blx	r3
		break;
    d312:	e018      	b.n	d346 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	885b      	ldrh	r3, [r3, #2]
    d318:	b29b      	uxth	r3, r3
    d31a:	b2db      	uxtb	r3, r3
    d31c:	4618      	mov	r0, r3
    d31e:	4b0d      	ldr	r3, [pc, #52]	; (d354 <usbdc_ctrl_status_end+0x8c>)
    d320:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d322:	687b      	ldr	r3, [r7, #4]
    d324:	885b      	ldrh	r3, [r3, #2]
    d326:	b29b      	uxth	r3, r3
    d328:	2b00      	cmp	r3, #0
    d32a:	d001      	beq.n	d330 <usbdc_ctrl_status_end+0x68>
    d32c:	2203      	movs	r2, #3
    d32e:	e000      	b.n	d332 <usbdc_ctrl_status_end+0x6a>
    d330:	2202      	movs	r2, #2
    d332:	4b06      	ldr	r3, [pc, #24]	; (d34c <usbdc_ctrl_status_end+0x84>)
    d334:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d336:	4b05      	ldr	r3, [pc, #20]	; (d34c <usbdc_ctrl_status_end+0x84>)
    d338:	7e9b      	ldrb	r3, [r3, #26]
    d33a:	4619      	mov	r1, r3
    d33c:	2001      	movs	r0, #1
    d33e:	4b04      	ldr	r3, [pc, #16]	; (d350 <usbdc_ctrl_status_end+0x88>)
    d340:	4798      	blx	r3
		break;
    d342:	e000      	b.n	d346 <usbdc_ctrl_status_end+0x7e>
		return;
    d344:	bf00      	nop
	}
}
    d346:	3708      	adds	r7, #8
    d348:	46bd      	mov	sp, r7
    d34a:	bd80      	pop	{r7, pc}
    d34c:	20000db0 	.word	0x20000db0
    d350:	0000d1a5 	.word	0x0000d1a5
    d354:	0000cf25 	.word	0x0000cf25

0000d358 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d358:	b580      	push	{r7, lr}
    d35a:	b082      	sub	sp, #8
    d35c:	af00      	add	r7, sp, #0
    d35e:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d360:	2201      	movs	r2, #1
    d362:	6879      	ldr	r1, [r7, #4]
    d364:	2000      	movs	r0, #0
    d366:	4b03      	ldr	r3, [pc, #12]	; (d374 <usbdc_ctrl_data_end+0x1c>)
    d368:	4798      	blx	r3
	return false;
    d36a:	2300      	movs	r3, #0
}
    d36c:	4618      	mov	r0, r3
    d36e:	3708      	adds	r7, #8
    d370:	46bd      	mov	sp, r7
    d372:	bd80      	pop	{r7, pc}
    d374:	0000d1e5 	.word	0x0000d1e5

0000d378 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d378:	b580      	push	{r7, lr}
    d37a:	b082      	sub	sp, #8
    d37c:	af00      	add	r7, sp, #0
    d37e:	4603      	mov	r3, r0
    d380:	603a      	str	r2, [r7, #0]
    d382:	71fb      	strb	r3, [r7, #7]
    d384:	460b      	mov	r3, r1
    d386:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d388:	79bb      	ldrb	r3, [r7, #6]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d002      	beq.n	d394 <usbdc_cb_ctl_done+0x1c>
    d38e:	2b01      	cmp	r3, #1
    d390:	d004      	beq.n	d39c <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d392:	e008      	b.n	d3a6 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d394:	6838      	ldr	r0, [r7, #0]
    d396:	4b06      	ldr	r3, [pc, #24]	; (d3b0 <usbdc_cb_ctl_done+0x38>)
    d398:	4798      	blx	r3
		break;
    d39a:	e004      	b.n	d3a6 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d39c:	6838      	ldr	r0, [r7, #0]
    d39e:	4b05      	ldr	r3, [pc, #20]	; (d3b4 <usbdc_cb_ctl_done+0x3c>)
    d3a0:	4798      	blx	r3
    d3a2:	4603      	mov	r3, r0
    d3a4:	e000      	b.n	d3a8 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d3a6:	2300      	movs	r3, #0
}
    d3a8:	4618      	mov	r0, r3
    d3aa:	3708      	adds	r7, #8
    d3ac:	46bd      	mov	sp, r7
    d3ae:	bd80      	pop	{r7, pc}
    d3b0:	0000d2c9 	.word	0x0000d2c9
    d3b4:	0000d359 	.word	0x0000d359

0000d3b8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d3b8:	b580      	push	{r7, lr}
    d3ba:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d3bc:	4b10      	ldr	r3, [pc, #64]	; (d400 <usbdc_reset+0x48>)
    d3be:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d3c0:	4b10      	ldr	r3, [pc, #64]	; (d404 <usbdc_reset+0x4c>)
    d3c2:	2202      	movs	r2, #2
    d3c4:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d3c6:	4b0f      	ldr	r3, [pc, #60]	; (d404 <usbdc_reset+0x4c>)
    d3c8:	2200      	movs	r2, #0
    d3ca:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d3cc:	4b0d      	ldr	r3, [pc, #52]	; (d404 <usbdc_reset+0x4c>)
    d3ce:	2200      	movs	r2, #0
    d3d0:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d3d2:	2000      	movs	r0, #0
    d3d4:	4b0c      	ldr	r3, [pc, #48]	; (d408 <usbdc_reset+0x50>)
    d3d6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d3d8:	4b0a      	ldr	r3, [pc, #40]	; (d404 <usbdc_reset+0x4c>)
    d3da:	7f1b      	ldrb	r3, [r3, #28]
    d3dc:	4618      	mov	r0, r3
    d3de:	4b0b      	ldr	r3, [pc, #44]	; (d40c <usbdc_reset+0x54>)
    d3e0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d3e2:	4a0b      	ldr	r2, [pc, #44]	; (d410 <usbdc_reset+0x58>)
    d3e4:	2100      	movs	r1, #0
    d3e6:	2000      	movs	r0, #0
    d3e8:	4b0a      	ldr	r3, [pc, #40]	; (d414 <usbdc_reset+0x5c>)
    d3ea:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d3ec:	4a0a      	ldr	r2, [pc, #40]	; (d418 <usbdc_reset+0x60>)
    d3ee:	2102      	movs	r1, #2
    d3f0:	2000      	movs	r0, #0
    d3f2:	4b08      	ldr	r3, [pc, #32]	; (d414 <usbdc_reset+0x5c>)
    d3f4:	4798      	blx	r3
	usb_d_ep_enable(0);
    d3f6:	2000      	movs	r0, #0
    d3f8:	4b08      	ldr	r3, [pc, #32]	; (d41c <usbdc_reset+0x64>)
    d3fa:	4798      	blx	r3
}
    d3fc:	bf00      	nop
    d3fe:	bd80      	pop	{r7, pc}
    d400:	0000ce05 	.word	0x0000ce05
    d404:	20000db0 	.word	0x20000db0
    d408:	00003a25 	.word	0x00003a25
    d40c:	00003961 	.word	0x00003961
    d410:	0000d255 	.word	0x0000d255
    d414:	00003d79 	.word	0x00003d79
    d418:	0000d379 	.word	0x0000d379
    d41c:	00003a75 	.word	0x00003a75

0000d420 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d420:	b580      	push	{r7, lr}
    d422:	b082      	sub	sp, #8
    d424:	af00      	add	r7, sp, #0
    d426:	4603      	mov	r3, r0
    d428:	6039      	str	r1, [r7, #0]
    d42a:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d42c:	79fb      	ldrb	r3, [r7, #7]
    d42e:	2b00      	cmp	r3, #0
    d430:	d002      	beq.n	d438 <usbd_event_cb+0x18>
    d432:	2b01      	cmp	r3, #1
    d434:	d005      	beq.n	d442 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d436:	e007      	b.n	d448 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d438:	6839      	ldr	r1, [r7, #0]
    d43a:	2000      	movs	r0, #0
    d43c:	4b04      	ldr	r3, [pc, #16]	; (d450 <usbd_event_cb+0x30>)
    d43e:	4798      	blx	r3
		break;
    d440:	e002      	b.n	d448 <usbd_event_cb+0x28>
		usbdc_reset();
    d442:	4b04      	ldr	r3, [pc, #16]	; (d454 <usbd_event_cb+0x34>)
    d444:	4798      	blx	r3
		break;
    d446:	bf00      	nop
	}
}
    d448:	bf00      	nop
    d44a:	3708      	adds	r7, #8
    d44c:	46bd      	mov	sp, r7
    d44e:	bd80      	pop	{r7, pc}
    d450:	0000d1a5 	.word	0x0000d1a5
    d454:	0000d3b9 	.word	0x0000d3b9

0000d458 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d458:	b580      	push	{r7, lr}
    d45a:	b088      	sub	sp, #32
    d45c:	af00      	add	r7, sp, #0
    d45e:	60b9      	str	r1, [r7, #8]
    d460:	607a      	str	r2, [r7, #4]
    d462:	461a      	mov	r2, r3
    d464:	4603      	mov	r3, r0
    d466:	73fb      	strb	r3, [r7, #15]
    d468:	4613      	mov	r3, r2
    d46a:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d46c:	68bb      	ldr	r3, [r7, #8]
    d46e:	617b      	str	r3, [r7, #20]
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	61bb      	str	r3, [r7, #24]
    d474:	7bfb      	ldrb	r3, [r7, #15]
    d476:	773b      	strb	r3, [r7, #28]
    d478:	7bbb      	ldrb	r3, [r7, #14]
    d47a:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d47c:	f107 0314 	add.w	r3, r7, #20
    d480:	4618      	mov	r0, r3
    d482:	4b03      	ldr	r3, [pc, #12]	; (d490 <usbdc_xfer+0x38>)
    d484:	4798      	blx	r3
    d486:	4603      	mov	r3, r0
}
    d488:	4618      	mov	r0, r3
    d48a:	3720      	adds	r7, #32
    d48c:	46bd      	mov	sp, r7
    d48e:	bd80      	pop	{r7, pc}
    d490:	00003ae5 	.word	0x00003ae5

0000d494 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d494:	b580      	push	{r7, lr}
    d496:	b082      	sub	sp, #8
    d498:	af00      	add	r7, sp, #0
    d49a:	4603      	mov	r3, r0
    d49c:	6039      	str	r1, [r7, #0]
    d49e:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d4a0:	79fb      	ldrb	r3, [r7, #7]
    d4a2:	2b01      	cmp	r3, #1
    d4a4:	d009      	beq.n	d4ba <usbdc_register_handler+0x26>
    d4a6:	2b02      	cmp	r3, #2
    d4a8:	d00c      	beq.n	d4c4 <usbdc_register_handler+0x30>
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d000      	beq.n	d4b0 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d4ae:	e00e      	b.n	d4ce <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d4b0:	6839      	ldr	r1, [r7, #0]
    d4b2:	4809      	ldr	r0, [pc, #36]	; (d4d8 <usbdc_register_handler+0x44>)
    d4b4:	4b09      	ldr	r3, [pc, #36]	; (d4dc <usbdc_register_handler+0x48>)
    d4b6:	4798      	blx	r3
		break;
    d4b8:	e009      	b.n	d4ce <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d4ba:	6839      	ldr	r1, [r7, #0]
    d4bc:	4808      	ldr	r0, [pc, #32]	; (d4e0 <usbdc_register_handler+0x4c>)
    d4be:	4b07      	ldr	r3, [pc, #28]	; (d4dc <usbdc_register_handler+0x48>)
    d4c0:	4798      	blx	r3
		break;
    d4c2:	e004      	b.n	d4ce <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d4c4:	6839      	ldr	r1, [r7, #0]
    d4c6:	4807      	ldr	r0, [pc, #28]	; (d4e4 <usbdc_register_handler+0x50>)
    d4c8:	4b04      	ldr	r3, [pc, #16]	; (d4dc <usbdc_register_handler+0x48>)
    d4ca:	4798      	blx	r3
		break;
    d4cc:	bf00      	nop
	}
}
    d4ce:	bf00      	nop
    d4d0:	3708      	adds	r7, #8
    d4d2:	46bd      	mov	sp, r7
    d4d4:	bd80      	pop	{r7, pc}
    d4d6:	bf00      	nop
    d4d8:	20000db4 	.word	0x20000db4
    d4dc:	00003ed1 	.word	0x00003ed1
    d4e0:	20000db8 	.word	0x20000db8
    d4e4:	20000dbc 	.word	0x20000dbc

0000d4e8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d4e8:	b580      	push	{r7, lr}
    d4ea:	b084      	sub	sp, #16
    d4ec:	af00      	add	r7, sp, #0
    d4ee:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d4f0:	687b      	ldr	r3, [r7, #4]
    d4f2:	2b00      	cmp	r3, #0
    d4f4:	bf14      	ite	ne
    d4f6:	2301      	movne	r3, #1
    d4f8:	2300      	moveq	r3, #0
    d4fa:	b2db      	uxtb	r3, r3
    d4fc:	f240 3255 	movw	r2, #853	; 0x355
    d500:	4910      	ldr	r1, [pc, #64]	; (d544 <usbdc_init+0x5c>)
    d502:	4618      	mov	r0, r3
    d504:	4b10      	ldr	r3, [pc, #64]	; (d548 <usbdc_init+0x60>)
    d506:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d508:	4b10      	ldr	r3, [pc, #64]	; (d54c <usbdc_init+0x64>)
    d50a:	4798      	blx	r3
    d50c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d50e:	68fb      	ldr	r3, [r7, #12]
    d510:	2b00      	cmp	r3, #0
    d512:	da01      	bge.n	d518 <usbdc_init+0x30>
		return rc;
    d514:	68fb      	ldr	r3, [r7, #12]
    d516:	e010      	b.n	d53a <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d518:	2220      	movs	r2, #32
    d51a:	2100      	movs	r1, #0
    d51c:	480c      	ldr	r0, [pc, #48]	; (d550 <usbdc_init+0x68>)
    d51e:	4b0d      	ldr	r3, [pc, #52]	; (d554 <usbdc_init+0x6c>)
    d520:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d522:	4a0b      	ldr	r2, [pc, #44]	; (d550 <usbdc_init+0x68>)
    d524:	687b      	ldr	r3, [r7, #4]
    d526:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d528:	490b      	ldr	r1, [pc, #44]	; (d558 <usbdc_init+0x70>)
    d52a:	2000      	movs	r0, #0
    d52c:	4b0b      	ldr	r3, [pc, #44]	; (d55c <usbdc_init+0x74>)
    d52e:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d530:	490b      	ldr	r1, [pc, #44]	; (d560 <usbdc_init+0x78>)
    d532:	2001      	movs	r0, #1
    d534:	4b09      	ldr	r3, [pc, #36]	; (d55c <usbdc_init+0x74>)
    d536:	4798      	blx	r3

	return 0;
    d538:	2300      	movs	r3, #0
}
    d53a:	4618      	mov	r0, r3
    d53c:	3710      	adds	r7, #16
    d53e:	46bd      	mov	sp, r7
    d540:	bd80      	pop	{r7, pc}
    d542:	bf00      	nop
    d544:	00013440 	.word	0x00013440
    d548:	00003df5 	.word	0x00003df5
    d54c:	0000384d 	.word	0x0000384d
    d550:	20000db0 	.word	0x20000db0
    d554:	00012d81 	.word	0x00012d81
    d558:	0000d245 	.word	0x0000d245
    d55c:	000038f9 	.word	0x000038f9
    d560:	0000d421 	.word	0x0000d421

0000d564 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d564:	b580      	push	{r7, lr}
    d566:	b082      	sub	sp, #8
    d568:	af00      	add	r7, sp, #0
    d56a:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d56c:	6879      	ldr	r1, [r7, #4]
    d56e:	4803      	ldr	r0, [pc, #12]	; (d57c <usbdc_register_function+0x18>)
    d570:	4b03      	ldr	r3, [pc, #12]	; (d580 <usbdc_register_function+0x1c>)
    d572:	4798      	blx	r3
}
    d574:	bf00      	nop
    d576:	3708      	adds	r7, #8
    d578:	46bd      	mov	sp, r7
    d57a:	bd80      	pop	{r7, pc}
    d57c:	20000dc0 	.word	0x20000dc0
    d580:	00003ed1 	.word	0x00003ed1

0000d584 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d584:	b580      	push	{r7, lr}
    d586:	b082      	sub	sp, #8
    d588:	af00      	add	r7, sp, #0
    d58a:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d58c:	4b0f      	ldr	r3, [pc, #60]	; (d5cc <usbdc_start+0x48>)
    d58e:	7e9b      	ldrb	r3, [r3, #26]
    d590:	2b00      	cmp	r3, #0
    d592:	d002      	beq.n	d59a <usbdc_start+0x16>
		return ERR_BUSY;
    d594:	f06f 0303 	mvn.w	r3, #3
    d598:	e013      	b.n	d5c2 <usbdc_start+0x3e>
	}

	if (desces) {
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	2b00      	cmp	r3, #0
    d59e:	d00e      	beq.n	d5be <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d5a0:	4a0a      	ldr	r2, [pc, #40]	; (d5cc <usbdc_start+0x48>)
    d5a2:	687b      	ldr	r3, [r7, #4]
    d5a4:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d5a6:	687b      	ldr	r3, [r7, #4]
    d5a8:	681b      	ldr	r3, [r3, #0]
    d5aa:	79da      	ldrb	r2, [r3, #7]
    d5ac:	4b07      	ldr	r3, [pc, #28]	; (d5cc <usbdc_start+0x48>)
    d5ae:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d5b0:	4b06      	ldr	r3, [pc, #24]	; (d5cc <usbdc_start+0x48>)
    d5b2:	2201      	movs	r2, #1
    d5b4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d5b6:	4b06      	ldr	r3, [pc, #24]	; (d5d0 <usbdc_start+0x4c>)
    d5b8:	4798      	blx	r3
	return ERR_NONE;
    d5ba:	2300      	movs	r3, #0
    d5bc:	e001      	b.n	d5c2 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d5be:	f06f 0308 	mvn.w	r3, #8
}
    d5c2:	4618      	mov	r0, r3
    d5c4:	3708      	adds	r7, #8
    d5c6:	46bd      	mov	sp, r7
    d5c8:	bd80      	pop	{r7, pc}
    d5ca:	bf00      	nop
    d5cc:	20000db0 	.word	0x20000db0
    d5d0:	0000391d 	.word	0x0000391d

0000d5d4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d5d4:	b580      	push	{r7, lr}
    d5d6:	af00      	add	r7, sp, #0
	usb_d_attach();
    d5d8:	4b01      	ldr	r3, [pc, #4]	; (d5e0 <usbdc_attach+0xc>)
    d5da:	4798      	blx	r3
}
    d5dc:	bf00      	nop
    d5de:	bd80      	pop	{r7, pc}
    d5e0:	00003931 	.word	0x00003931

0000d5e4 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d5e4:	b480      	push	{r7}
    d5e6:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d5e8:	4b03      	ldr	r3, [pc, #12]	; (d5f8 <usbdc_get_ctrl_buffer+0x14>)
    d5ea:	695b      	ldr	r3, [r3, #20]
}
    d5ec:	4618      	mov	r0, r3
    d5ee:	46bd      	mov	sp, r7
    d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5f4:	4770      	bx	lr
    d5f6:	bf00      	nop
    d5f8:	20000db0 	.word	0x20000db0

0000d5fc <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d5fc:	b480      	push	{r7}
    d5fe:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d600:	4b07      	ldr	r3, [pc, #28]	; (d620 <usbdc_get_state+0x24>)
    d602:	7e9b      	ldrb	r3, [r3, #26]
    d604:	f003 0310 	and.w	r3, r3, #16
    d608:	2b00      	cmp	r3, #0
    d60a:	d001      	beq.n	d610 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d60c:	2310      	movs	r3, #16
    d60e:	e001      	b.n	d614 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d610:	4b03      	ldr	r3, [pc, #12]	; (d620 <usbdc_get_state+0x24>)
    d612:	7e9b      	ldrb	r3, [r3, #26]
}
    d614:	4618      	mov	r0, r3
    d616:	46bd      	mov	sp, r7
    d618:	f85d 7b04 	ldr.w	r7, [sp], #4
    d61c:	4770      	bx	lr
    d61e:	bf00      	nop
    d620:	20000db0 	.word	0x20000db0

0000d624 <usb_get_u16>:
{
    d624:	b480      	push	{r7}
    d626:	b083      	sub	sp, #12
    d628:	af00      	add	r7, sp, #0
    d62a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d62c:	687b      	ldr	r3, [r7, #4]
    d62e:	781b      	ldrb	r3, [r3, #0]
    d630:	b29a      	uxth	r2, r3
    d632:	687b      	ldr	r3, [r7, #4]
    d634:	3301      	adds	r3, #1
    d636:	781b      	ldrb	r3, [r3, #0]
    d638:	b29b      	uxth	r3, r3
    d63a:	021b      	lsls	r3, r3, #8
    d63c:	b29b      	uxth	r3, r3
    d63e:	4413      	add	r3, r2
    d640:	b29b      	uxth	r3, r3
}
    d642:	4618      	mov	r0, r3
    d644:	370c      	adds	r7, #12
    d646:	46bd      	mov	sp, r7
    d648:	f85d 7b04 	ldr.w	r7, [sp], #4
    d64c:	4770      	bx	lr

0000d64e <usb_desc_len>:
{
    d64e:	b480      	push	{r7}
    d650:	b083      	sub	sp, #12
    d652:	af00      	add	r7, sp, #0
    d654:	6078      	str	r0, [r7, #4]
	return desc[0];
    d656:	687b      	ldr	r3, [r7, #4]
    d658:	781b      	ldrb	r3, [r3, #0]
}
    d65a:	4618      	mov	r0, r3
    d65c:	370c      	adds	r7, #12
    d65e:	46bd      	mov	sp, r7
    d660:	f85d 7b04 	ldr.w	r7, [sp], #4
    d664:	4770      	bx	lr

0000d666 <usb_desc_type>:
{
    d666:	b480      	push	{r7}
    d668:	b083      	sub	sp, #12
    d66a:	af00      	add	r7, sp, #0
    d66c:	6078      	str	r0, [r7, #4]
	return desc[1];
    d66e:	687b      	ldr	r3, [r7, #4]
    d670:	3301      	adds	r3, #1
    d672:	781b      	ldrb	r3, [r3, #0]
}
    d674:	4618      	mov	r0, r3
    d676:	370c      	adds	r7, #12
    d678:	46bd      	mov	sp, r7
    d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d67e:	4770      	bx	lr

0000d680 <usb_desc_next>:
{
    d680:	b580      	push	{r7, lr}
    d682:	b082      	sub	sp, #8
    d684:	af00      	add	r7, sp, #0
    d686:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d688:	6878      	ldr	r0, [r7, #4]
    d68a:	4b05      	ldr	r3, [pc, #20]	; (d6a0 <usb_desc_next+0x20>)
    d68c:	4798      	blx	r3
    d68e:	4603      	mov	r3, r0
    d690:	461a      	mov	r2, r3
    d692:	687b      	ldr	r3, [r7, #4]
    d694:	4413      	add	r3, r2
}
    d696:	4618      	mov	r0, r3
    d698:	3708      	adds	r7, #8
    d69a:	46bd      	mov	sp, r7
    d69c:	bd80      	pop	{r7, pc}
    d69e:	bf00      	nop
    d6a0:	0000d64f 	.word	0x0000d64f

0000d6a4 <usb_cfg_desc_total_len>:
{
    d6a4:	b580      	push	{r7, lr}
    d6a6:	b082      	sub	sp, #8
    d6a8:	af00      	add	r7, sp, #0
    d6aa:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d6ac:	687b      	ldr	r3, [r7, #4]
    d6ae:	3302      	adds	r3, #2
    d6b0:	4618      	mov	r0, r3
    d6b2:	4b03      	ldr	r3, [pc, #12]	; (d6c0 <usb_cfg_desc_total_len+0x1c>)
    d6b4:	4798      	blx	r3
    d6b6:	4603      	mov	r3, r0
}
    d6b8:	4618      	mov	r0, r3
    d6ba:	3708      	adds	r7, #8
    d6bc:	46bd      	mov	sp, r7
    d6be:	bd80      	pop	{r7, pc}
    d6c0:	0000d625 	.word	0x0000d625

0000d6c4 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d6c4:	b580      	push	{r7, lr}
    d6c6:	b082      	sub	sp, #8
    d6c8:	af00      	add	r7, sp, #0
    d6ca:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d6cc:	6878      	ldr	r0, [r7, #4]
    d6ce:	4b05      	ldr	r3, [pc, #20]	; (d6e4 <usb_cfg_desc_next+0x20>)
    d6d0:	4798      	blx	r3
    d6d2:	4603      	mov	r3, r0
    d6d4:	461a      	mov	r2, r3
    d6d6:	687b      	ldr	r3, [r7, #4]
    d6d8:	4413      	add	r3, r2
}
    d6da:	4618      	mov	r0, r3
    d6dc:	3708      	adds	r7, #8
    d6de:	46bd      	mov	sp, r7
    d6e0:	bd80      	pop	{r7, pc}
    d6e2:	bf00      	nop
    d6e4:	0000d6a5 	.word	0x0000d6a5

0000d6e8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d6e8:	b580      	push	{r7, lr}
    d6ea:	b084      	sub	sp, #16
    d6ec:	af00      	add	r7, sp, #0
    d6ee:	60f8      	str	r0, [r7, #12]
    d6f0:	60b9      	str	r1, [r7, #8]
    d6f2:	4613      	mov	r3, r2
    d6f4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d6f6:	e015      	b.n	d724 <usb_find_desc+0x3c>
		_desc_len_check();
    d6f8:	68f8      	ldr	r0, [r7, #12]
    d6fa:	4b0f      	ldr	r3, [pc, #60]	; (d738 <usb_find_desc+0x50>)
    d6fc:	4798      	blx	r3
    d6fe:	4603      	mov	r3, r0
    d700:	2b01      	cmp	r3, #1
    d702:	d801      	bhi.n	d708 <usb_find_desc+0x20>
    d704:	2300      	movs	r3, #0
    d706:	e012      	b.n	d72e <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d708:	68f8      	ldr	r0, [r7, #12]
    d70a:	4b0c      	ldr	r3, [pc, #48]	; (d73c <usb_find_desc+0x54>)
    d70c:	4798      	blx	r3
    d70e:	4603      	mov	r3, r0
    d710:	461a      	mov	r2, r3
    d712:	79fb      	ldrb	r3, [r7, #7]
    d714:	4293      	cmp	r3, r2
    d716:	d101      	bne.n	d71c <usb_find_desc+0x34>
			return desc;
    d718:	68fb      	ldr	r3, [r7, #12]
    d71a:	e008      	b.n	d72e <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d71c:	68f8      	ldr	r0, [r7, #12]
    d71e:	4b08      	ldr	r3, [pc, #32]	; (d740 <usb_find_desc+0x58>)
    d720:	4798      	blx	r3
    d722:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d724:	68fa      	ldr	r2, [r7, #12]
    d726:	68bb      	ldr	r3, [r7, #8]
    d728:	429a      	cmp	r2, r3
    d72a:	d3e5      	bcc.n	d6f8 <usb_find_desc+0x10>
	}
	return NULL;
    d72c:	2300      	movs	r3, #0
}
    d72e:	4618      	mov	r0, r3
    d730:	3710      	adds	r7, #16
    d732:	46bd      	mov	sp, r7
    d734:	bd80      	pop	{r7, pc}
    d736:	bf00      	nop
    d738:	0000d64f 	.word	0x0000d64f
    d73c:	0000d667 	.word	0x0000d667
    d740:	0000d681 	.word	0x0000d681

0000d744 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d744:	b580      	push	{r7, lr}
    d746:	b082      	sub	sp, #8
    d748:	af00      	add	r7, sp, #0
    d74a:	6078      	str	r0, [r7, #4]
    d74c:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d74e:	e019      	b.n	d784 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d750:	6878      	ldr	r0, [r7, #4]
    d752:	4b12      	ldr	r3, [pc, #72]	; (d79c <usb_find_ep_desc+0x58>)
    d754:	4798      	blx	r3
    d756:	4603      	mov	r3, r0
    d758:	2b01      	cmp	r3, #1
    d75a:	d801      	bhi.n	d760 <usb_find_ep_desc+0x1c>
    d75c:	2300      	movs	r3, #0
    d75e:	e018      	b.n	d792 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d760:	6878      	ldr	r0, [r7, #4]
    d762:	4b0f      	ldr	r3, [pc, #60]	; (d7a0 <usb_find_ep_desc+0x5c>)
    d764:	4798      	blx	r3
    d766:	4603      	mov	r3, r0
    d768:	2b04      	cmp	r3, #4
    d76a:	d010      	beq.n	d78e <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d76c:	6878      	ldr	r0, [r7, #4]
    d76e:	4b0c      	ldr	r3, [pc, #48]	; (d7a0 <usb_find_ep_desc+0x5c>)
    d770:	4798      	blx	r3
    d772:	4603      	mov	r3, r0
    d774:	2b05      	cmp	r3, #5
    d776:	d101      	bne.n	d77c <usb_find_ep_desc+0x38>
			return desc;
    d778:	687b      	ldr	r3, [r7, #4]
    d77a:	e00a      	b.n	d792 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d77c:	6878      	ldr	r0, [r7, #4]
    d77e:	4b09      	ldr	r3, [pc, #36]	; (d7a4 <usb_find_ep_desc+0x60>)
    d780:	4798      	blx	r3
    d782:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d784:	687a      	ldr	r2, [r7, #4]
    d786:	683b      	ldr	r3, [r7, #0]
    d788:	429a      	cmp	r2, r3
    d78a:	d3e1      	bcc.n	d750 <usb_find_ep_desc+0xc>
    d78c:	e000      	b.n	d790 <usb_find_ep_desc+0x4c>
			break;
    d78e:	bf00      	nop
	}
	return NULL;
    d790:	2300      	movs	r3, #0
}
    d792:	4618      	mov	r0, r3
    d794:	3708      	adds	r7, #8
    d796:	46bd      	mov	sp, r7
    d798:	bd80      	pop	{r7, pc}
    d79a:	bf00      	nop
    d79c:	0000d64f 	.word	0x0000d64f
    d7a0:	0000d667 	.word	0x0000d667
    d7a4:	0000d681 	.word	0x0000d681

0000d7a8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d7a8:	b580      	push	{r7, lr}
    d7aa:	b084      	sub	sp, #16
    d7ac:	af00      	add	r7, sp, #0
    d7ae:	60f8      	str	r0, [r7, #12]
    d7b0:	60b9      	str	r1, [r7, #8]
    d7b2:	4613      	mov	r3, r2
    d7b4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d7b6:	2202      	movs	r2, #2
    d7b8:	68b9      	ldr	r1, [r7, #8]
    d7ba:	68f8      	ldr	r0, [r7, #12]
    d7bc:	4b15      	ldr	r3, [pc, #84]	; (d814 <usb_find_cfg_desc+0x6c>)
    d7be:	4798      	blx	r3
    d7c0:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d7c2:	68fb      	ldr	r3, [r7, #12]
    d7c4:	2b00      	cmp	r3, #0
    d7c6:	d11a      	bne.n	d7fe <usb_find_cfg_desc+0x56>
		return NULL;
    d7c8:	2300      	movs	r3, #0
    d7ca:	e01f      	b.n	d80c <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d7cc:	68f8      	ldr	r0, [r7, #12]
    d7ce:	4b12      	ldr	r3, [pc, #72]	; (d818 <usb_find_cfg_desc+0x70>)
    d7d0:	4798      	blx	r3
    d7d2:	4603      	mov	r3, r0
    d7d4:	2b01      	cmp	r3, #1
    d7d6:	d801      	bhi.n	d7dc <usb_find_cfg_desc+0x34>
    d7d8:	2300      	movs	r3, #0
    d7da:	e017      	b.n	d80c <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d7dc:	68fb      	ldr	r3, [r7, #12]
    d7de:	3301      	adds	r3, #1
    d7e0:	781b      	ldrb	r3, [r3, #0]
    d7e2:	2b02      	cmp	r3, #2
    d7e4:	d110      	bne.n	d808 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	3305      	adds	r3, #5
    d7ea:	781b      	ldrb	r3, [r3, #0]
    d7ec:	79fa      	ldrb	r2, [r7, #7]
    d7ee:	429a      	cmp	r2, r3
    d7f0:	d101      	bne.n	d7f6 <usb_find_cfg_desc+0x4e>
			return desc;
    d7f2:	68fb      	ldr	r3, [r7, #12]
    d7f4:	e00a      	b.n	d80c <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d7f6:	68f8      	ldr	r0, [r7, #12]
    d7f8:	4b08      	ldr	r3, [pc, #32]	; (d81c <usb_find_cfg_desc+0x74>)
    d7fa:	4798      	blx	r3
    d7fc:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d7fe:	68fa      	ldr	r2, [r7, #12]
    d800:	68bb      	ldr	r3, [r7, #8]
    d802:	429a      	cmp	r2, r3
    d804:	d3e2      	bcc.n	d7cc <usb_find_cfg_desc+0x24>
    d806:	e000      	b.n	d80a <usb_find_cfg_desc+0x62>
			break;
    d808:	bf00      	nop
	}
	return NULL;
    d80a:	2300      	movs	r3, #0
}
    d80c:	4618      	mov	r0, r3
    d80e:	3710      	adds	r7, #16
    d810:	46bd      	mov	sp, r7
    d812:	bd80      	pop	{r7, pc}
    d814:	0000d6e9 	.word	0x0000d6e9
    d818:	0000d64f 	.word	0x0000d64f
    d81c:	0000d6c5 	.word	0x0000d6c5

0000d820 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d820:	b580      	push	{r7, lr}
    d822:	b086      	sub	sp, #24
    d824:	af00      	add	r7, sp, #0
    d826:	60f8      	str	r0, [r7, #12]
    d828:	60b9      	str	r1, [r7, #8]
    d82a:	4613      	mov	r3, r2
    d82c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d82e:	2300      	movs	r3, #0
    d830:	75fb      	strb	r3, [r7, #23]
    d832:	e020      	b.n	d876 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d834:	2203      	movs	r2, #3
    d836:	68b9      	ldr	r1, [r7, #8]
    d838:	68f8      	ldr	r0, [r7, #12]
    d83a:	4b13      	ldr	r3, [pc, #76]	; (d888 <usb_find_str_desc+0x68>)
    d83c:	4798      	blx	r3
    d83e:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d840:	68fb      	ldr	r3, [r7, #12]
    d842:	2b00      	cmp	r3, #0
    d844:	d015      	beq.n	d872 <usb_find_str_desc+0x52>
			_desc_len_check();
    d846:	68f8      	ldr	r0, [r7, #12]
    d848:	4b10      	ldr	r3, [pc, #64]	; (d88c <usb_find_str_desc+0x6c>)
    d84a:	4798      	blx	r3
    d84c:	4603      	mov	r3, r0
    d84e:	2b01      	cmp	r3, #1
    d850:	d801      	bhi.n	d856 <usb_find_str_desc+0x36>
    d852:	2300      	movs	r3, #0
    d854:	e014      	b.n	d880 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d856:	7dfa      	ldrb	r2, [r7, #23]
    d858:	79fb      	ldrb	r3, [r7, #7]
    d85a:	429a      	cmp	r2, r3
    d85c:	d101      	bne.n	d862 <usb_find_str_desc+0x42>
				return desc;
    d85e:	68fb      	ldr	r3, [r7, #12]
    d860:	e00e      	b.n	d880 <usb_find_str_desc+0x60>
			}
			i++;
    d862:	7dfb      	ldrb	r3, [r7, #23]
    d864:	3301      	adds	r3, #1
    d866:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d868:	68f8      	ldr	r0, [r7, #12]
    d86a:	4b09      	ldr	r3, [pc, #36]	; (d890 <usb_find_str_desc+0x70>)
    d86c:	4798      	blx	r3
    d86e:	60f8      	str	r0, [r7, #12]
    d870:	e001      	b.n	d876 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d872:	2300      	movs	r3, #0
    d874:	e004      	b.n	d880 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d876:	68fa      	ldr	r2, [r7, #12]
    d878:	68bb      	ldr	r3, [r7, #8]
    d87a:	429a      	cmp	r2, r3
    d87c:	d3da      	bcc.n	d834 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d87e:	2300      	movs	r3, #0
}
    d880:	4618      	mov	r0, r3
    d882:	3718      	adds	r7, #24
    d884:	46bd      	mov	sp, r7
    d886:	bd80      	pop	{r7, pc}
    d888:	0000d6e9 	.word	0x0000d6e9
    d88c:	0000d64f 	.word	0x0000d64f
    d890:	0000d681 	.word	0x0000d681

0000d894 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d894:	b480      	push	{r7}
    d896:	b083      	sub	sp, #12
    d898:	af00      	add	r7, sp, #0
    d89a:	6078      	str	r0, [r7, #4]
    d89c:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d89e:	687b      	ldr	r3, [r7, #4]
    d8a0:	683a      	ldr	r2, [r7, #0]
    d8a2:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    d8a4:	4a06      	ldr	r2, [pc, #24]	; (d8c0 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    d8a6:	687b      	ldr	r3, [r7, #4]
    d8a8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d8aa:	687b      	ldr	r3, [r7, #4]
    d8ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d8b0:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d8b2:	687b      	ldr	r3, [r7, #4]
    d8b4:	4618      	mov	r0, r3
    d8b6:	370c      	adds	r7, #12
    d8b8:	46bd      	mov	sp, r7
    d8ba:	bc80      	pop	{r7}
    d8bc:	4770      	bx	lr
    d8be:	bf00      	nop
    d8c0:	20000dd0 	.word	0x20000dd0

0000d8c4 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d8c4:	b480      	push	{r7}
    d8c6:	b083      	sub	sp, #12
    d8c8:	af00      	add	r7, sp, #0
    d8ca:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d8cc:	687b      	ldr	r3, [r7, #4]
    d8ce:	2200      	movs	r2, #0
    d8d0:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d8d2:	687b      	ldr	r3, [r7, #4]
    d8d4:	4618      	mov	r0, r3
    d8d6:	370c      	adds	r7, #12
    d8d8:	46bd      	mov	sp, r7
    d8da:	bc80      	pop	{r7}
    d8dc:	4770      	bx	lr
	...

0000d8e0 <_ZL9InitArrayv>:


static void InitArray(){
    d8e0:	b480      	push	{r7}
    d8e2:	b083      	sub	sp, #12
    d8e4:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d8e6:	2301      	movs	r3, #1
    d8e8:	607b      	str	r3, [r7, #4]
    d8ea:	687b      	ldr	r3, [r7, #4]
    d8ec:	2b0f      	cmp	r3, #15
    d8ee:	dc26      	bgt.n	d93e <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d8f0:	4917      	ldr	r1, [pc, #92]	; (d950 <_ZL9InitArrayv+0x70>)
    d8f2:	687a      	ldr	r2, [r7, #4]
    d8f4:	4613      	mov	r3, r2
    d8f6:	009b      	lsls	r3, r3, #2
    d8f8:	4413      	add	r3, r2
    d8fa:	009b      	lsls	r3, r3, #2
    d8fc:	440b      	add	r3, r1
    d8fe:	2200      	movs	r2, #0
    d900:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d902:	4913      	ldr	r1, [pc, #76]	; (d950 <_ZL9InitArrayv+0x70>)
    d904:	687a      	ldr	r2, [r7, #4]
    d906:	4613      	mov	r3, r2
    d908:	009b      	lsls	r3, r3, #2
    d90a:	4413      	add	r3, r2
    d90c:	009b      	lsls	r3, r3, #2
    d90e:	440b      	add	r3, r1
    d910:	330c      	adds	r3, #12
    d912:	2200      	movs	r2, #0
    d914:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	1e5a      	subs	r2, r3, #1
    d91a:	6879      	ldr	r1, [r7, #4]
    d91c:	460b      	mov	r3, r1
    d91e:	009b      	lsls	r3, r3, #2
    d920:	440b      	add	r3, r1
    d922:	009b      	lsls	r3, r3, #2
    d924:	490a      	ldr	r1, [pc, #40]	; (d950 <_ZL9InitArrayv+0x70>)
    d926:	4419      	add	r1, r3
    d928:	4809      	ldr	r0, [pc, #36]	; (d950 <_ZL9InitArrayv+0x70>)
    d92a:	4613      	mov	r3, r2
    d92c:	009b      	lsls	r3, r3, #2
    d92e:	4413      	add	r3, r2
    d930:	009b      	lsls	r3, r3, #2
    d932:	4403      	add	r3, r0
    d934:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
    d936:	687b      	ldr	r3, [r7, #4]
    d938:	3301      	adds	r3, #1
    d93a:	607b      	str	r3, [r7, #4]
    d93c:	e7d5      	b.n	d8ea <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
    d93e:	4b05      	ldr	r3, [pc, #20]	; (d954 <_ZL9InitArrayv+0x74>)
    d940:	2201      	movs	r2, #1
    d942:	701a      	strb	r2, [r3, #0]
		
}
    d944:	bf00      	nop
    d946:	370c      	adds	r7, #12
    d948:	46bd      	mov	sp, r7
    d94a:	bc80      	pop	{r7}
    d94c:	4770      	bx	lr
    d94e:	bf00      	nop
    d950:	20000dd4 	.word	0x20000dd4
    d954:	20000f14 	.word	0x20000f14

0000d958 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d958:	b580      	push	{r7, lr}
    d95a:	b082      	sub	sp, #8
    d95c:	af00      	add	r7, sp, #0
    d95e:	6078      	str	r0, [r7, #4]
	ticks=0;
    d960:	687b      	ldr	r3, [r7, #4]
    d962:	2200      	movs	r2, #0
    d964:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d966:	4b0d      	ldr	r3, [pc, #52]	; (d99c <_ZN11Timer_Class4InitEv+0x44>)
    d968:	781b      	ldrb	r3, [r3, #0]
    d96a:	f083 0301 	eor.w	r3, r3, #1
    d96e:	b2db      	uxtb	r3, r3
    d970:	2b00      	cmp	r3, #0
    d972:	d001      	beq.n	d978 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d974:	4b0a      	ldr	r3, [pc, #40]	; (d9a0 <_ZN11Timer_Class4InitEv+0x48>)
    d976:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
    d978:	6878      	ldr	r0, [r7, #4]
    d97a:	4b0a      	ldr	r3, [pc, #40]	; (d9a4 <_ZN11Timer_Class4InitEv+0x4c>)
    d97c:	4798      	blx	r3
    d97e:	4603      	mov	r3, r0
    d980:	2b00      	cmp	r3, #0
    d982:	bf0c      	ite	eq
    d984:	2301      	moveq	r3, #1
    d986:	2300      	movne	r3, #0
    d988:	b2da      	uxtb	r2, r3
    d98a:	687b      	ldr	r3, [r7, #4]
    d98c:	709a      	strb	r2, [r3, #2]
	return isOK;
    d98e:	687b      	ldr	r3, [r7, #4]
    d990:	789b      	ldrb	r3, [r3, #2]
    d992:	b2db      	uxtb	r3, r3
}
    d994:	4618      	mov	r0, r3
    d996:	3708      	adds	r7, #8
    d998:	46bd      	mov	sp, r7
    d99a:	bd80      	pop	{r7, pc}
    d99c:	20000f14 	.word	0x20000f14
    d9a0:	0000d8e1 	.word	0x0000d8e1
    d9a4:	0000d9a9 	.word	0x0000d9a9

0000d9a8 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    d9a8:	b580      	push	{r7, lr}
    d9aa:	b084      	sub	sp, #16
    d9ac:	af00      	add	r7, sp, #0
    d9ae:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	68db      	ldr	r3, [r3, #12]
    d9b4:	4618      	mov	r0, r3
    d9b6:	4b04      	ldr	r3, [pc, #16]	; (d9c8 <_ZN11Timer_Class5startEv+0x20>)
    d9b8:	4798      	blx	r3
    d9ba:	60f8      	str	r0, [r7, #12]
	return status;
    d9bc:	68fb      	ldr	r3, [r7, #12]
	
}
    d9be:	4618      	mov	r0, r3
    d9c0:	3710      	adds	r7, #16
    d9c2:	46bd      	mov	sp, r7
    d9c4:	bd80      	pop	{r7, pc}
    d9c6:	bf00      	nop
    d9c8:	0000305d 	.word	0x0000305d

0000d9cc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d9cc:	b580      	push	{r7, lr}
    d9ce:	b086      	sub	sp, #24
    d9d0:	af00      	add	r7, sp, #0
    d9d2:	60f8      	str	r0, [r7, #12]
    d9d4:	60b9      	str	r1, [r7, #8]
    d9d6:	607a      	str	r2, [r7, #4]
    d9d8:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    d9da:	68f8      	ldr	r0, [r7, #12]
    d9dc:	4b0d      	ldr	r3, [pc, #52]	; (da14 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    d9de:	4798      	blx	r3
	task->interval = interval;
    d9e0:	68fb      	ldr	r3, [r7, #12]
    d9e2:	699b      	ldr	r3, [r3, #24]
    d9e4:	687a      	ldr	r2, [r7, #4]
    d9e6:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d9e8:	68fb      	ldr	r3, [r7, #12]
    d9ea:	699b      	ldr	r3, [r3, #24]
    d9ec:	68ba      	ldr	r2, [r7, #8]
    d9ee:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d9f0:	68fb      	ldr	r3, [r7, #12]
    d9f2:	699b      	ldr	r3, [r3, #24]
    d9f4:	78fa      	ldrb	r2, [r7, #3]
    d9f6:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d9f8:	68fb      	ldr	r3, [r7, #12]
    d9fa:	68da      	ldr	r2, [r3, #12]
    d9fc:	68fb      	ldr	r3, [r7, #12]
    d9fe:	699b      	ldr	r3, [r3, #24]
    da00:	4619      	mov	r1, r3
    da02:	4610      	mov	r0, r2
    da04:	4b04      	ldr	r3, [pc, #16]	; (da18 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    da06:	4798      	blx	r3
    da08:	6178      	str	r0, [r7, #20]
	
	return status;
    da0a:	697b      	ldr	r3, [r7, #20]
}
    da0c:	4618      	mov	r0, r3
    da0e:	3718      	adds	r7, #24
    da10:	46bd      	mov	sp, r7
    da12:	bd80      	pop	{r7, pc}
    da14:	0000dac5 	.word	0x0000dac5
    da18:	00003131 	.word	0x00003131

0000da1c <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    da1c:	b580      	push	{r7, lr}
    da1e:	b082      	sub	sp, #8
    da20:	af00      	add	r7, sp, #0
    da22:	6078      	str	r0, [r7, #4]
    da24:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    da26:	6839      	ldr	r1, [r7, #0]
    da28:	6878      	ldr	r0, [r7, #4]
    da2a:	4b0f      	ldr	r3, [pc, #60]	; (da68 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    da2c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    da2e:	687b      	ldr	r3, [r7, #4]
    da30:	68db      	ldr	r3, [r3, #12]
    da32:	f103 0218 	add.w	r2, r3, #24
    da36:	687b      	ldr	r3, [r7, #4]
    da38:	699b      	ldr	r3, [r3, #24]
    da3a:	4619      	mov	r1, r3
    da3c:	4610      	mov	r0, r2
    da3e:	4b0b      	ldr	r3, [pc, #44]	; (da6c <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    da40:	4798      	blx	r3
    da42:	4603      	mov	r3, r0
    da44:	2b00      	cmp	r3, #0
    da46:	d007      	beq.n	da58 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	68da      	ldr	r2, [r3, #12]
    da4c:	687b      	ldr	r3, [r7, #4]
    da4e:	699b      	ldr	r3, [r3, #24]
    da50:	4619      	mov	r1, r3
    da52:	4610      	mov	r0, r2
    da54:	4b06      	ldr	r3, [pc, #24]	; (da70 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    da56:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    da58:	687b      	ldr	r3, [r7, #4]
    da5a:	699b      	ldr	r3, [r3, #24]
    da5c:	2200      	movs	r2, #0
    da5e:	60da      	str	r2, [r3, #12]
}
    da60:	bf00      	nop
    da62:	3708      	adds	r7, #8
    da64:	46bd      	mov	sp, r7
    da66:	bd80      	pop	{r7, pc}
    da68:	0000db25 	.word	0x0000db25
    da6c:	00003e1d 	.word	0x00003e1d
    da70:	00003235 	.word	0x00003235

0000da74 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    da74:	b590      	push	{r4, r7, lr}
    da76:	b087      	sub	sp, #28
    da78:	af00      	add	r7, sp, #0
    da7a:	60f8      	str	r0, [r7, #12]
    da7c:	60b9      	str	r1, [r7, #8]
    da7e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    da80:	2300      	movs	r3, #0
    da82:	687a      	ldr	r2, [r7, #4]
    da84:	68b9      	ldr	r1, [r7, #8]
    da86:	68f8      	ldr	r0, [r7, #12]
    da88:	4c0c      	ldr	r4, [pc, #48]	; (dabc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    da8a:	47a0      	blx	r4
    da8c:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    da8e:	68fb      	ldr	r3, [r7, #12]
    da90:	68db      	ldr	r3, [r3, #12]
    da92:	681b      	ldr	r3, [r3, #0]
    da94:	699b      	ldr	r3, [r3, #24]
    da96:	68fa      	ldr	r2, [r7, #12]
    da98:	68d2      	ldr	r2, [r2, #12]
    da9a:	3204      	adds	r2, #4
    da9c:	4610      	mov	r0, r2
    da9e:	4798      	blx	r3
    daa0:	4603      	mov	r3, r0
    daa2:	2b00      	cmp	r3, #0
    daa4:	d105      	bne.n	dab2 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    daa6:	68fb      	ldr	r3, [r7, #12]
    daa8:	68db      	ldr	r3, [r3, #12]
    daaa:	4618      	mov	r0, r3
    daac:	4b04      	ldr	r3, [pc, #16]	; (dac0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    daae:	4798      	blx	r3
    dab0:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    dab2:	697b      	ldr	r3, [r7, #20]
}
    dab4:	4618      	mov	r0, r3
    dab6:	371c      	adds	r7, #28
    dab8:	46bd      	mov	sp, r7
    daba:	bd90      	pop	{r4, r7, pc}
    dabc:	0000d9cd 	.word	0x0000d9cd
    dac0:	0000305d 	.word	0x0000305d

0000dac4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    dac4:	b480      	push	{r7}
    dac6:	b085      	sub	sp, #20
    dac8:	af00      	add	r7, sp, #0
    daca:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dacc:	2300      	movs	r3, #0
    dace:	73fb      	strb	r3, [r7, #15]
    dad0:	7bfb      	ldrb	r3, [r7, #15]
    dad2:	2b0f      	cmp	r3, #15
    dad4:	dc1c      	bgt.n	db10 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    dad6:	7bfb      	ldrb	r3, [r7, #15]
    dad8:	f003 030f 	and.w	r3, r3, #15
    dadc:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    dade:	7bba      	ldrb	r2, [r7, #14]
    dae0:	490f      	ldr	r1, [pc, #60]	; (db20 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    dae2:	4613      	mov	r3, r2
    dae4:	009b      	lsls	r3, r3, #2
    dae6:	4413      	add	r3, r2
    dae8:	009b      	lsls	r3, r3, #2
    daea:	440b      	add	r3, r1
    daec:	330c      	adds	r3, #12
    daee:	681b      	ldr	r3, [r3, #0]
    daf0:	2b00      	cmp	r3, #0
    daf2:	d109      	bne.n	db08 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    daf4:	7bba      	ldrb	r2, [r7, #14]
    daf6:	4613      	mov	r3, r2
    daf8:	009b      	lsls	r3, r3, #2
    dafa:	4413      	add	r3, r2
    dafc:	009b      	lsls	r3, r3, #2
    dafe:	4a08      	ldr	r2, [pc, #32]	; (db20 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    db00:	441a      	add	r2, r3
    db02:	687b      	ldr	r3, [r7, #4]
    db04:	619a      	str	r2, [r3, #24]
			return;
    db06:	e006      	b.n	db16 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db08:	7bfb      	ldrb	r3, [r7, #15]
    db0a:	3301      	adds	r3, #1
    db0c:	73fb      	strb	r3, [r7, #15]
    db0e:	e7df      	b.n	dad0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    db10:	687b      	ldr	r3, [r7, #4]
    db12:	4a03      	ldr	r2, [pc, #12]	; (db20 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    db14:	619a      	str	r2, [r3, #24]

}
    db16:	3714      	adds	r7, #20
    db18:	46bd      	mov	sp, r7
    db1a:	bc80      	pop	{r7}
    db1c:	4770      	bx	lr
    db1e:	bf00      	nop
    db20:	20000dd4 	.word	0x20000dd4

0000db24 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    db24:	b480      	push	{r7}
    db26:	b085      	sub	sp, #20
    db28:	af00      	add	r7, sp, #0
    db2a:	6078      	str	r0, [r7, #4]
    db2c:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db2e:	2300      	movs	r3, #0
    db30:	73fb      	strb	r3, [r7, #15]
    db32:	7bfb      	ldrb	r3, [r7, #15]
    db34:	2b0f      	cmp	r3, #15
    db36:	dc19      	bgt.n	db6c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    db38:	7bfa      	ldrb	r2, [r7, #15]
    db3a:	490f      	ldr	r1, [pc, #60]	; (db78 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    db3c:	4613      	mov	r3, r2
    db3e:	009b      	lsls	r3, r3, #2
    db40:	4413      	add	r3, r2
    db42:	009b      	lsls	r3, r3, #2
    db44:	440b      	add	r3, r1
    db46:	330c      	adds	r3, #12
    db48:	681a      	ldr	r2, [r3, #0]
    db4a:	683b      	ldr	r3, [r7, #0]
    db4c:	429a      	cmp	r2, r3
    db4e:	d109      	bne.n	db64 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    db50:	7bfa      	ldrb	r2, [r7, #15]
    db52:	4613      	mov	r3, r2
    db54:	009b      	lsls	r3, r3, #2
    db56:	4413      	add	r3, r2
    db58:	009b      	lsls	r3, r3, #2
    db5a:	4a07      	ldr	r2, [pc, #28]	; (db78 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    db5c:	441a      	add	r2, r3
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	619a      	str	r2, [r3, #24]
			return;
    db62:	e004      	b.n	db6e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db64:	7bfb      	ldrb	r3, [r7, #15]
    db66:	3301      	adds	r3, #1
    db68:	73fb      	strb	r3, [r7, #15]
    db6a:	e7e2      	b.n	db32 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    db6c:	bf00      	nop
}
    db6e:	3714      	adds	r7, #20
    db70:	46bd      	mov	sp, r7
    db72:	bc80      	pop	{r7}
    db74:	4770      	bx	lr
    db76:	bf00      	nop
    db78:	20000dd4 	.word	0x20000dd4

0000db7c <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    db7c:	b580      	push	{r7, lr}
    db7e:	b082      	sub	sp, #8
    db80:	af00      	add	r7, sp, #0
    db82:	6078      	str	r0, [r7, #4]
    db84:	6039      	str	r1, [r7, #0]
    db86:	687b      	ldr	r3, [r7, #4]
    db88:	2b01      	cmp	r3, #1
    db8a:	d131      	bne.n	dbf0 <_Z41__static_initialization_and_destruction_0ii+0x74>
    db8c:	683b      	ldr	r3, [r7, #0]
    db8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    db92:	4293      	cmp	r3, r2
    db94:	d12c      	bne.n	dbf0 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    db96:	4918      	ldr	r1, [pc, #96]	; (dbf8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    db98:	4818      	ldr	r0, [pc, #96]	; (dbfc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    db9a:	4b19      	ldr	r3, [pc, #100]	; (dc00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    db9c:	4798      	blx	r3
    db9e:	4a19      	ldr	r2, [pc, #100]	; (dc04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dba0:	4919      	ldr	r1, [pc, #100]	; (dc08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dba2:	4816      	ldr	r0, [pc, #88]	; (dbfc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    dba4:	4b19      	ldr	r3, [pc, #100]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dba6:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    dba8:	4919      	ldr	r1, [pc, #100]	; (dc10 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    dbaa:	481a      	ldr	r0, [pc, #104]	; (dc14 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    dbac:	4b14      	ldr	r3, [pc, #80]	; (dc00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbae:	4798      	blx	r3
    dbb0:	4a14      	ldr	r2, [pc, #80]	; (dc04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbb2:	4915      	ldr	r1, [pc, #84]	; (dc08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbb4:	4817      	ldr	r0, [pc, #92]	; (dc14 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    dbb6:	4b15      	ldr	r3, [pc, #84]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbb8:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    dbba:	4917      	ldr	r1, [pc, #92]	; (dc18 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    dbbc:	4817      	ldr	r0, [pc, #92]	; (dc1c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    dbbe:	4b10      	ldr	r3, [pc, #64]	; (dc00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbc0:	4798      	blx	r3
    dbc2:	4a10      	ldr	r2, [pc, #64]	; (dc04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbc4:	4910      	ldr	r1, [pc, #64]	; (dc08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbc6:	4815      	ldr	r0, [pc, #84]	; (dc1c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    dbc8:	4b10      	ldr	r3, [pc, #64]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbca:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    dbcc:	4914      	ldr	r1, [pc, #80]	; (dc20 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    dbce:	4815      	ldr	r0, [pc, #84]	; (dc24 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    dbd0:	4b0b      	ldr	r3, [pc, #44]	; (dc00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbd2:	4798      	blx	r3
    dbd4:	4a0b      	ldr	r2, [pc, #44]	; (dc04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbd6:	490c      	ldr	r1, [pc, #48]	; (dc08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbd8:	4812      	ldr	r0, [pc, #72]	; (dc24 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    dbda:	4b0c      	ldr	r3, [pc, #48]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbdc:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    dbde:	4912      	ldr	r1, [pc, #72]	; (dc28 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    dbe0:	4812      	ldr	r0, [pc, #72]	; (dc2c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    dbe2:	4b07      	ldr	r3, [pc, #28]	; (dc00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbe4:	4798      	blx	r3
    dbe6:	4a07      	ldr	r2, [pc, #28]	; (dc04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbe8:	4907      	ldr	r1, [pc, #28]	; (dc08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbea:	4810      	ldr	r0, [pc, #64]	; (dc2c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    dbec:	4b07      	ldr	r3, [pc, #28]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbee:	4798      	blx	r3
    dbf0:	bf00      	nop
    dbf2:	3708      	adds	r7, #8
    dbf4:	46bd      	mov	sp, r7
    dbf6:	bd80      	pop	{r7, pc}
    dbf8:	20007e28 	.word	0x20007e28
    dbfc:	20000f18 	.word	0x20000f18
    dc00:	0000d895 	.word	0x0000d895
    dc04:	20000000 	.word	0x20000000
    dc08:	0000d8c5 	.word	0x0000d8c5
    dc0c:	000126cd 	.word	0x000126cd
    dc10:	20007ebc 	.word	0x20007ebc
    dc14:	20000f34 	.word	0x20000f34
    dc18:	20007fc0 	.word	0x20007fc0
    dc1c:	20000f50 	.word	0x20000f50
    dc20:	20007edc 	.word	0x20007edc
    dc24:	20000f6c 	.word	0x20000f6c
    dc28:	20007f80 	.word	0x20007f80
    dc2c:	20000f88 	.word	0x20000f88

0000dc30 <_GLOBAL__sub_I_ptrTimerClass>:
    dc30:	b580      	push	{r7, lr}
    dc32:	af00      	add	r7, sp, #0
    dc34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc38:	2001      	movs	r0, #1
    dc3a:	4b01      	ldr	r3, [pc, #4]	; (dc40 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    dc3c:	4798      	blx	r3
    dc3e:	bd80      	pop	{r7, pc}
    dc40:	0000db7d 	.word	0x0000db7d

0000dc44 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    dc44:	b480      	push	{r7}
    dc46:	b083      	sub	sp, #12
    dc48:	af00      	add	r7, sp, #0
    dc4a:	6078      	str	r0, [r7, #4]
    dc4c:	4a05      	ldr	r2, [pc, #20]	; (dc64 <_ZN5PrintC1Ev+0x20>)
    dc4e:	687b      	ldr	r3, [r7, #4]
    dc50:	601a      	str	r2, [r3, #0]
    dc52:	687b      	ldr	r3, [r7, #4]
    dc54:	2200      	movs	r2, #0
    dc56:	605a      	str	r2, [r3, #4]
    dc58:	687b      	ldr	r3, [r7, #4]
    dc5a:	4618      	mov	r0, r3
    dc5c:	370c      	adds	r7, #12
    dc5e:	46bd      	mov	sp, r7
    dc60:	bc80      	pop	{r7}
    dc62:	4770      	bx	lr
    dc64:	000134cc 	.word	0x000134cc

0000dc68 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    dc68:	b480      	push	{r7}
    dc6a:	b083      	sub	sp, #12
    dc6c:	af00      	add	r7, sp, #0
    dc6e:	6078      	str	r0, [r7, #4]
    dc70:	2300      	movs	r3, #0
    dc72:	4618      	mov	r0, r3
    dc74:	370c      	adds	r7, #12
    dc76:	46bd      	mov	sp, r7
    dc78:	bc80      	pop	{r7}
    dc7a:	4770      	bx	lr

0000dc7c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    dc7c:	b480      	push	{r7}
    dc7e:	b083      	sub	sp, #12
    dc80:	af00      	add	r7, sp, #0
    dc82:	6078      	str	r0, [r7, #4]
    dc84:	bf00      	nop
    dc86:	370c      	adds	r7, #12
    dc88:	46bd      	mov	sp, r7
    dc8a:	bc80      	pop	{r7}
    dc8c:	4770      	bx	lr
	...

0000dc90 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    dc90:	b580      	push	{r7, lr}
    dc92:	b082      	sub	sp, #8
    dc94:	af00      	add	r7, sp, #0
    dc96:	6078      	str	r0, [r7, #4]
    dc98:	687b      	ldr	r3, [r7, #4]
    dc9a:	4618      	mov	r0, r3
    dc9c:	4b06      	ldr	r3, [pc, #24]	; (dcb8 <_ZN6StreamC1Ev+0x28>)
    dc9e:	4798      	blx	r3
    dca0:	4a06      	ldr	r2, [pc, #24]	; (dcbc <_ZN6StreamC1Ev+0x2c>)
    dca2:	687b      	ldr	r3, [r7, #4]
    dca4:	601a      	str	r2, [r3, #0]
    dca6:	687b      	ldr	r3, [r7, #4]
    dca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dcac:	609a      	str	r2, [r3, #8]
    dcae:	687b      	ldr	r3, [r7, #4]
    dcb0:	4618      	mov	r0, r3
    dcb2:	3708      	adds	r7, #8
    dcb4:	46bd      	mov	sp, r7
    dcb6:	bd80      	pop	{r7, pc}
    dcb8:	0000dc45 	.word	0x0000dc45
    dcbc:	00013490 	.word	0x00013490

0000dcc0 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    dcc0:	b480      	push	{r7}
    dcc2:	b083      	sub	sp, #12
    dcc4:	af00      	add	r7, sp, #0
    dcc6:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    dcc8:	4b06      	ldr	r3, [pc, #24]	; (dce4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dcca:	681b      	ldr	r3, [r3, #0]
    dccc:	2201      	movs	r2, #1
    dcce:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    dcd0:	4b04      	ldr	r3, [pc, #16]	; (dce4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dcd2:	681b      	ldr	r3, [r3, #0]
    dcd4:	2200      	movs	r2, #0
    dcd6:	741a      	strb	r2, [r3, #16]
	
}
    dcd8:	bf00      	nop
    dcda:	370c      	adds	r7, #12
    dcdc:	46bd      	mov	sp, r7
    dcde:	bc80      	pop	{r7}
    dce0:	4770      	bx	lr
    dce2:	bf00      	nop
    dce4:	20000fa4 	.word	0x20000fa4

0000dce8 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dce8:	b480      	push	{r7}
    dcea:	b083      	sub	sp, #12
    dcec:	af00      	add	r7, sp, #0
    dcee:	4603      	mov	r3, r0
    dcf0:	603a      	str	r2, [r7, #0]
    dcf2:	71fb      	strb	r3, [r7, #7]
    dcf4:	460b      	mov	r3, r1
    dcf6:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    dcf8:	4b08      	ldr	r3, [pc, #32]	; (dd1c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dcfa:	681b      	ldr	r3, [r3, #0]
    dcfc:	2201      	movs	r2, #1
    dcfe:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    dd00:	4b06      	ldr	r3, [pc, #24]	; (dd1c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dd02:	681b      	ldr	r3, [r3, #0]
    dd04:	2201      	movs	r2, #1
    dd06:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dd08:	4b04      	ldr	r3, [pc, #16]	; (dd1c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dd0a:	681b      	ldr	r3, [r3, #0]
    dd0c:	2201      	movs	r2, #1
    dd0e:	741a      	strb	r2, [r3, #16]


	return false;
    dd10:	2300      	movs	r3, #0
}
    dd12:	4618      	mov	r0, r3
    dd14:	370c      	adds	r7, #12
    dd16:	46bd      	mov	sp, r7
    dd18:	bc80      	pop	{r7}
    dd1a:	4770      	bx	lr
    dd1c:	20000fa4 	.word	0x20000fa4

0000dd20 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dd20:	b480      	push	{r7}
    dd22:	b083      	sub	sp, #12
    dd24:	af00      	add	r7, sp, #0
    dd26:	4603      	mov	r3, r0
    dd28:	603a      	str	r2, [r7, #0]
    dd2a:	71fb      	strb	r3, [r7, #7]
    dd2c:	460b      	mov	r3, r1
    dd2e:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    dd30:	4b08      	ldr	r3, [pc, #32]	; (dd54 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dd32:	681b      	ldr	r3, [r3, #0]
    dd34:	2201      	movs	r2, #1
    dd36:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    dd38:	4b06      	ldr	r3, [pc, #24]	; (dd54 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dd3a:	681b      	ldr	r3, [r3, #0]
    dd3c:	2201      	movs	r2, #1
    dd3e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dd40:	4b04      	ldr	r3, [pc, #16]	; (dd54 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dd42:	681b      	ldr	r3, [r3, #0]
    dd44:	2201      	movs	r2, #1
    dd46:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    dd48:	2300      	movs	r3, #0
}
    dd4a:	4618      	mov	r0, r3
    dd4c:	370c      	adds	r7, #12
    dd4e:	46bd      	mov	sp, r7
    dd50:	bc80      	pop	{r7}
    dd52:	4770      	bx	lr
    dd54:	20000fa4 	.word	0x20000fa4

0000dd58 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    dd58:	b580      	push	{r7, lr}
    dd5a:	b082      	sub	sp, #8
    dd5c:	af00      	add	r7, sp, #0
    dd5e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    dd60:	793b      	ldrb	r3, [r7, #4]
    dd62:	f003 0301 	and.w	r3, r3, #1
    dd66:	b2db      	uxtb	r3, r3
    dd68:	2b00      	cmp	r3, #0
    dd6a:	d013      	beq.n	dd94 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    dd6c:	490c      	ldr	r1, [pc, #48]	; (dda0 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    dd6e:	2000      	movs	r0, #0
    dd70:	4b0c      	ldr	r3, [pc, #48]	; (dda4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dd72:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    dd74:	490c      	ldr	r1, [pc, #48]	; (dda8 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    dd76:	2001      	movs	r0, #1
    dd78:	4b0a      	ldr	r3, [pc, #40]	; (dda4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dd7a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    dd7c:	4b0b      	ldr	r3, [pc, #44]	; (ddac <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dd7e:	681b      	ldr	r3, [r3, #0]
    dd80:	2201      	movs	r2, #1
    dd82:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    dd84:	4b09      	ldr	r3, [pc, #36]	; (ddac <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dd86:	681b      	ldr	r3, [r3, #0]
    dd88:	2201      	movs	r2, #1
    dd8a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    dd8c:	4b07      	ldr	r3, [pc, #28]	; (ddac <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dd8e:	681b      	ldr	r3, [r3, #0]
    dd90:	2201      	movs	r2, #1
    dd92:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    dd94:	2300      	movs	r3, #0
}
    dd96:	4618      	mov	r0, r3
    dd98:	3708      	adds	r7, #8
    dd9a:	46bd      	mov	sp, r7
    dd9c:	bd80      	pop	{r7, pc}
    dd9e:	bf00      	nop
    dda0:	0000dce9 	.word	0x0000dce9
    dda4:	0000c85d 	.word	0x0000c85d
    dda8:	0000dd21 	.word	0x0000dd21
    ddac:	20000fa4 	.word	0x20000fa4

0000ddb0 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    ddb0:	b580      	push	{r7, lr}
    ddb2:	b082      	sub	sp, #8
    ddb4:	af00      	add	r7, sp, #0
    ddb6:	6078      	str	r0, [r7, #4]
    ddb8:	687b      	ldr	r3, [r7, #4]
    ddba:	4618      	mov	r0, r3
    ddbc:	4b0a      	ldr	r3, [pc, #40]	; (dde8 <_ZN9CDC_ClassC1Ev+0x38>)
    ddbe:	4798      	blx	r3
    ddc0:	687b      	ldr	r3, [r7, #4]
    ddc2:	3310      	adds	r3, #16
    ddc4:	4618      	mov	r0, r3
    ddc6:	4b09      	ldr	r3, [pc, #36]	; (ddec <_ZN9CDC_ClassC1Ev+0x3c>)
    ddc8:	4798      	blx	r3
    ddca:	4a09      	ldr	r2, [pc, #36]	; (ddf0 <_ZN9CDC_ClassC1Ev+0x40>)
    ddcc:	687b      	ldr	r3, [r7, #4]
    ddce:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    ddd0:	687b      	ldr	r3, [r7, #4]
    ddd2:	f04f 32ff 	mov.w	r2, #4294967295
    ddd6:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    ddd8:	4a06      	ldr	r2, [pc, #24]	; (ddf4 <_ZN9CDC_ClassC1Ev+0x44>)
    ddda:	687b      	ldr	r3, [r7, #4]
    dddc:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    ddde:	687b      	ldr	r3, [r7, #4]
    dde0:	4618      	mov	r0, r3
    dde2:	3708      	adds	r7, #8
    dde4:	46bd      	mov	sp, r7
    dde6:	bd80      	pop	{r7, pc}
    dde8:	0000dc91 	.word	0x0000dc91
    ddec:	0000e451 	.word	0x0000e451
    ddf0:	00013460 	.word	0x00013460
    ddf4:	20000fa4 	.word	0x20000fa4

0000ddf8 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    ddf8:	b580      	push	{r7, lr}
    ddfa:	b082      	sub	sp, #8
    ddfc:	af00      	add	r7, sp, #0
    ddfe:	6078      	str	r0, [r7, #4]
    de00:	4a06      	ldr	r2, [pc, #24]	; (de1c <_ZN9CDC_ClassD1Ev+0x24>)
    de02:	687b      	ldr	r3, [r7, #4]
    de04:	601a      	str	r2, [r3, #0]
    de06:	687b      	ldr	r3, [r7, #4]
    de08:	3310      	adds	r3, #16
    de0a:	4618      	mov	r0, r3
    de0c:	4b04      	ldr	r3, [pc, #16]	; (de20 <_ZN9CDC_ClassD1Ev+0x28>)
    de0e:	4798      	blx	r3
{
} //~CDC_Class
    de10:	687b      	ldr	r3, [r7, #4]
    de12:	4618      	mov	r0, r3
    de14:	3708      	adds	r7, #8
    de16:	46bd      	mov	sp, r7
    de18:	bd80      	pop	{r7, pc}
    de1a:	bf00      	nop
    de1c:	00013460 	.word	0x00013460
    de20:	0000e471 	.word	0x0000e471

0000de24 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    de24:	b580      	push	{r7, lr}
    de26:	b082      	sub	sp, #8
    de28:	af00      	add	r7, sp, #0
    de2a:	6078      	str	r0, [r7, #4]
	
	OnInit();
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	3310      	adds	r3, #16
    de30:	4618      	mov	r0, r3
    de32:	4b09      	ldr	r3, [pc, #36]	; (de58 <_ZN9CDC_Class4InitEv+0x34>)
    de34:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    de36:	4909      	ldr	r1, [pc, #36]	; (de5c <_ZN9CDC_Class4InitEv+0x38>)
    de38:	2003      	movs	r0, #3
    de3a:	4b09      	ldr	r3, [pc, #36]	; (de60 <_ZN9CDC_Class4InitEv+0x3c>)
    de3c:	4798      	blx	r3
	delay_ms(100);
    de3e:	2064      	movs	r0, #100	; 0x64
    de40:	4b08      	ldr	r3, [pc, #32]	; (de64 <_ZN9CDC_Class4InitEv+0x40>)
    de42:	4798      	blx	r3
		
	if (connected)
    de44:	687b      	ldr	r3, [r7, #4]
    de46:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    de48:	2064      	movs	r0, #100	; 0x64
    de4a:	4b06      	ldr	r3, [pc, #24]	; (de64 <_ZN9CDC_Class4InitEv+0x40>)
    de4c:	4798      	blx	r3

	

}
    de4e:	bf00      	nop
    de50:	3708      	adds	r7, #8
    de52:	46bd      	mov	sp, r7
    de54:	bd80      	pop	{r7, pc}
    de56:	bf00      	nop
    de58:	0000e485 	.word	0x0000e485
    de5c:	0000dd59 	.word	0x0000dd59
    de60:	0000c85d 	.word	0x0000c85d
    de64:	000027b9 	.word	0x000027b9

0000de68 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    de68:	b580      	push	{r7, lr}
    de6a:	b082      	sub	sp, #8
    de6c:	af00      	add	r7, sp, #0
    de6e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    de70:	4b03      	ldr	r3, [pc, #12]	; (de80 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    de72:	4798      	blx	r3
    de74:	4603      	mov	r3, r0
	
}
    de76:	4618      	mov	r0, r3
    de78:	3708      	adds	r7, #8
    de7a:	46bd      	mov	sp, r7
    de7c:	bd80      	pop	{r7, pc}
    de7e:	bf00      	nop
    de80:	0000c8d5 	.word	0x0000c8d5

0000de84 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    de84:	b580      	push	{r7, lr}
    de86:	b084      	sub	sp, #16
    de88:	af00      	add	r7, sp, #0
    de8a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    de8c:	687b      	ldr	r3, [r7, #4]
    de8e:	699b      	ldr	r3, [r3, #24]
    de90:	f1b3 3fff 	cmp.w	r3, #4294967295
    de94:	bf14      	ite	ne
    de96:	2301      	movne	r3, #1
    de98:	2300      	moveq	r3, #0
    de9a:	b2db      	uxtb	r3, r3
    de9c:	2b00      	cmp	r3, #0
    de9e:	d002      	beq.n	dea6 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    dea0:	687b      	ldr	r3, [r7, #4]
    dea2:	699b      	ldr	r3, [r3, #24]
    dea4:	e011      	b.n	deca <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    dea6:	687b      	ldr	r3, [r7, #4]
    dea8:	681b      	ldr	r3, [r3, #0]
    deaa:	331c      	adds	r3, #28
    deac:	681b      	ldr	r3, [r3, #0]
    deae:	f107 010f 	add.w	r1, r7, #15
    deb2:	2201      	movs	r2, #1
    deb4:	6878      	ldr	r0, [r7, #4]
    deb6:	4798      	blx	r3
    deb8:	4602      	mov	r2, r0
    deba:	687b      	ldr	r3, [r7, #4]
    debc:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    debe:	7bfb      	ldrb	r3, [r7, #15]
    dec0:	461a      	mov	r2, r3
    dec2:	687b      	ldr	r3, [r7, #4]
    dec4:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    dec6:	687b      	ldr	r3, [r7, #4]
    dec8:	699b      	ldr	r3, [r3, #24]
}
    deca:	4618      	mov	r0, r3
    decc:	3710      	adds	r7, #16
    dece:	46bd      	mov	sp, r7
    ded0:	bd80      	pop	{r7, pc}
	...

0000ded4 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    ded4:	b580      	push	{r7, lr}
    ded6:	b086      	sub	sp, #24
    ded8:	af00      	add	r7, sp, #0
    deda:	60f8      	str	r0, [r7, #12]
    dedc:	60b9      	str	r1, [r7, #8]
    dede:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    dee0:	68fb      	ldr	r3, [r7, #12]
    dee2:	7c1b      	ldrb	r3, [r3, #16]
    dee4:	b2db      	uxtb	r3, r3
    dee6:	2b00      	cmp	r3, #0
    dee8:	d02e      	beq.n	df48 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    deea:	687a      	ldr	r2, [r7, #4]
    deec:	4613      	mov	r3, r2
    deee:	009b      	lsls	r3, r3, #2
    def0:	4413      	add	r3, r2
    def2:	005b      	lsls	r3, r3, #1
    def4:	461a      	mov	r2, r3
    def6:	4918      	ldr	r1, [pc, #96]	; (df58 <_ZN9CDC_Class8readDataEPvl+0x84>)
    def8:	4818      	ldr	r0, [pc, #96]	; (df5c <_ZN9CDC_Class8readDataEPvl+0x88>)
    defa:	4b19      	ldr	r3, [pc, #100]	; (df60 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    defc:	4798      	blx	r3
		rxReady=false;
    defe:	68fb      	ldr	r3, [r7, #12]
    df00:	2200      	movs	r2, #0
    df02:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	4619      	mov	r1, r3
    df08:	68b8      	ldr	r0, [r7, #8]
    df0a:	4b16      	ldr	r3, [pc, #88]	; (df64 <_ZN9CDC_Class8readDataEPvl+0x90>)
    df0c:	4798      	blx	r3
    df0e:	4603      	mov	r3, r0
    df10:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    df12:	68fb      	ldr	r3, [r7, #12]
    df14:	7d5b      	ldrb	r3, [r3, #21]
    df16:	b2db      	uxtb	r3, r3
    df18:	f083 0301 	eor.w	r3, r3, #1
    df1c:	b2db      	uxtb	r3, r3
    df1e:	2b00      	cmp	r3, #0
    df20:	d006      	beq.n	df30 <_ZN9CDC_Class8readDataEPvl+0x5c>
    df22:	68fb      	ldr	r3, [r7, #12]
    df24:	7c1b      	ldrb	r3, [r3, #16]
    df26:	b2db      	uxtb	r3, r3
    df28:	2b00      	cmp	r3, #0
    df2a:	d001      	beq.n	df30 <_ZN9CDC_Class8readDataEPvl+0x5c>
    df2c:	2301      	movs	r3, #1
    df2e:	e000      	b.n	df32 <_ZN9CDC_Class8readDataEPvl+0x5e>
    df30:	2300      	movs	r3, #0
    df32:	2b00      	cmp	r3, #0
    df34:	d000      	beq.n	df38 <_ZN9CDC_Class8readDataEPvl+0x64>
    df36:	e7ec      	b.n	df12 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    df38:	4808      	ldr	r0, [pc, #32]	; (df5c <_ZN9CDC_Class8readDataEPvl+0x88>)
    df3a:	4b0b      	ldr	r3, [pc, #44]	; (df68 <_ZN9CDC_Class8readDataEPvl+0x94>)
    df3c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    df3e:	4906      	ldr	r1, [pc, #24]	; (df58 <_ZN9CDC_Class8readDataEPvl+0x84>)
    df40:	4806      	ldr	r0, [pc, #24]	; (df5c <_ZN9CDC_Class8readDataEPvl+0x88>)
    df42:	4b0a      	ldr	r3, [pc, #40]	; (df6c <_ZN9CDC_Class8readDataEPvl+0x98>)
    df44:	4798      	blx	r3
    df46:	e001      	b.n	df4c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    df48:	2300      	movs	r3, #0
    df4a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    df4c:	7dfb      	ldrb	r3, [r7, #23]
}
    df4e:	4618      	mov	r0, r3
    df50:	3718      	adds	r7, #24
    df52:	46bd      	mov	sp, r7
    df54:	bd80      	pop	{r7, pc}
    df56:	bf00      	nop
    df58:	0000dcc1 	.word	0x0000dcc1
    df5c:	20001060 	.word	0x20001060
    df60:	0000e6f1 	.word	0x0000e6f1
    df64:	0000c7b1 	.word	0x0000c7b1
    df68:	0000e611 	.word	0x0000e611
    df6c:	0000e755 	.word	0x0000e755

0000df70 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    df70:	b580      	push	{r7, lr}
    df72:	b086      	sub	sp, #24
    df74:	af00      	add	r7, sp, #0
    df76:	60f8      	str	r0, [r7, #12]
    df78:	60b9      	str	r1, [r7, #8]
    df7a:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    df7c:	68fb      	ldr	r3, [r7, #12]
    df7e:	2200      	movs	r2, #0
    df80:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    df82:	687b      	ldr	r3, [r7, #4]
    df84:	4619      	mov	r1, r3
    df86:	68b8      	ldr	r0, [r7, #8]
    df88:	4b04      	ldr	r3, [pc, #16]	; (df9c <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    df8a:	4798      	blx	r3
    df8c:	4603      	mov	r3, r0
    df8e:	617b      	str	r3, [r7, #20]
	return r;
    df90:	697b      	ldr	r3, [r7, #20]
}
    df92:	4618      	mov	r0, r3
    df94:	3718      	adds	r7, #24
    df96:	46bd      	mov	sp, r7
    df98:	bd80      	pop	{r7, pc}
    df9a:	bf00      	nop
    df9c:	0000c7b1 	.word	0x0000c7b1

0000dfa0 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    dfa0:	b580      	push	{r7, lr}
    dfa2:	b084      	sub	sp, #16
    dfa4:	af00      	add	r7, sp, #0
    dfa6:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    dfa8:	687b      	ldr	r3, [r7, #4]
    dfaa:	2200      	movs	r2, #0
    dfac:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    dfae:	f107 030f 	add.w	r3, r7, #15
    dfb2:	2101      	movs	r1, #1
    dfb4:	4618      	mov	r0, r3
    dfb6:	4b08      	ldr	r3, [pc, #32]	; (dfd8 <_ZN9CDC_Class4readEv+0x38>)
    dfb8:	4798      	blx	r3
	while(!rxReady);
    dfba:	687b      	ldr	r3, [r7, #4]
    dfbc:	7d5b      	ldrb	r3, [r3, #21]
    dfbe:	b2db      	uxtb	r3, r3
    dfc0:	f083 0301 	eor.w	r3, r3, #1
    dfc4:	b2db      	uxtb	r3, r3
    dfc6:	2b00      	cmp	r3, #0
    dfc8:	d000      	beq.n	dfcc <_ZN9CDC_Class4readEv+0x2c>
    dfca:	e7f6      	b.n	dfba <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
    dfce:	4618      	mov	r0, r3
    dfd0:	3710      	adds	r7, #16
    dfd2:	46bd      	mov	sp, r7
    dfd4:	bd80      	pop	{r7, pc}
    dfd6:	bf00      	nop
    dfd8:	0000c7b1 	.word	0x0000c7b1

0000dfdc <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    dfdc:	b580      	push	{r7, lr}
    dfde:	b082      	sub	sp, #8
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    dfe4:	687b      	ldr	r3, [r7, #4]
    dfe6:	331c      	adds	r3, #28
    dfe8:	2140      	movs	r1, #64	; 0x40
    dfea:	4618      	mov	r0, r3
    dfec:	4b02      	ldr	r3, [pc, #8]	; (dff8 <_ZN9CDC_Class5flushEv+0x1c>)
    dfee:	4798      	blx	r3
}
    dff0:	bf00      	nop
    dff2:	3708      	adds	r7, #8
    dff4:	46bd      	mov	sp, r7
    dff6:	bd80      	pop	{r7, pc}
    dff8:	0000c7f5 	.word	0x0000c7f5

0000dffc <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    dffc:	b580      	push	{r7, lr}
    dffe:	b082      	sub	sp, #8
    e000:	af00      	add	r7, sp, #0
    e002:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e004:	4b02      	ldr	r3, [pc, #8]	; (e010 <_ZN9CDC_Class5clearEv+0x14>)
    e006:	4798      	blx	r3
}
    e008:	bf00      	nop
    e00a:	3708      	adds	r7, #8
    e00c:	46bd      	mov	sp, r7
    e00e:	bd80      	pop	{r7, pc}
    e010:	0000c839 	.word	0x0000c839

0000e014 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e014:	b580      	push	{r7, lr}
    e016:	b082      	sub	sp, #8
    e018:	af00      	add	r7, sp, #0
    e01a:	6078      	str	r0, [r7, #4]
    e01c:	460b      	mov	r3, r1
    e01e:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e020:	687b      	ldr	r3, [r7, #4]
    e022:	7c1b      	ldrb	r3, [r3, #16]
    e024:	b2db      	uxtb	r3, r3
    e026:	2b00      	cmp	r3, #0
    e028:	d012      	beq.n	e050 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e02a:	687b      	ldr	r3, [r7, #4]
    e02c:	7d1b      	ldrb	r3, [r3, #20]
    e02e:	b2db      	uxtb	r3, r3
    e030:	f083 0301 	eor.w	r3, r3, #1
    e034:	b2db      	uxtb	r3, r3
    e036:	2b00      	cmp	r3, #0
    e038:	d000      	beq.n	e03c <_ZN9CDC_Class5writeEh+0x28>
    e03a:	e7f6      	b.n	e02a <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	681b      	ldr	r3, [r3, #0]
    e040:	3324      	adds	r3, #36	; 0x24
    e042:	681b      	ldr	r3, [r3, #0]
    e044:	1cf9      	adds	r1, r7, #3
    e046:	2201      	movs	r2, #1
    e048:	6878      	ldr	r0, [r7, #4]
    e04a:	4798      	blx	r3
    e04c:	4603      	mov	r3, r0
    e04e:	e000      	b.n	e052 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e050:	2300      	movs	r3, #0
	}
		
}
    e052:	4618      	mov	r0, r3
    e054:	3708      	adds	r7, #8
    e056:	46bd      	mov	sp, r7
    e058:	bd80      	pop	{r7, pc}
	...

0000e05c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e05c:	b580      	push	{r7, lr}
    e05e:	b086      	sub	sp, #24
    e060:	af00      	add	r7, sp, #0
    e062:	60f8      	str	r0, [r7, #12]
    e064:	60b9      	str	r1, [r7, #8]
    e066:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e068:	68fb      	ldr	r3, [r7, #12]
    e06a:	7c1b      	ldrb	r3, [r3, #16]
    e06c:	b2db      	uxtb	r3, r3
    e06e:	2b00      	cmp	r3, #0
    e070:	d02f      	beq.n	e0d2 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e072:	687a      	ldr	r2, [r7, #4]
    e074:	4613      	mov	r3, r2
    e076:	009b      	lsls	r3, r3, #2
    e078:	4413      	add	r3, r2
    e07a:	005b      	lsls	r3, r3, #1
    e07c:	461a      	mov	r2, r3
    e07e:	4917      	ldr	r1, [pc, #92]	; (e0dc <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e080:	4817      	ldr	r0, [pc, #92]	; (e0e0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e082:	4b18      	ldr	r3, [pc, #96]	; (e0e4 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e084:	4798      	blx	r3
		txReady=false;
    e086:	68fb      	ldr	r3, [r7, #12]
    e088:	2200      	movs	r2, #0
    e08a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e08c:	687b      	ldr	r3, [r7, #4]
    e08e:	4619      	mov	r1, r3
    e090:	68b8      	ldr	r0, [r7, #8]
    e092:	4b15      	ldr	r3, [pc, #84]	; (e0e8 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e094:	4798      	blx	r3
    e096:	4603      	mov	r3, r0
    e098:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e09a:	68fb      	ldr	r3, [r7, #12]
    e09c:	7d1b      	ldrb	r3, [r3, #20]
    e09e:	b2db      	uxtb	r3, r3
    e0a0:	f083 0301 	eor.w	r3, r3, #1
    e0a4:	b2db      	uxtb	r3, r3
    e0a6:	2b00      	cmp	r3, #0
    e0a8:	d006      	beq.n	e0b8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e0aa:	68fb      	ldr	r3, [r7, #12]
    e0ac:	7c1b      	ldrb	r3, [r3, #16]
    e0ae:	b2db      	uxtb	r3, r3
    e0b0:	2b00      	cmp	r3, #0
    e0b2:	d001      	beq.n	e0b8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e0b4:	2301      	movs	r3, #1
    e0b6:	e000      	b.n	e0ba <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e0b8:	2300      	movs	r3, #0
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	d000      	beq.n	e0c0 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e0be:	e7ec      	b.n	e09a <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e0c0:	4807      	ldr	r0, [pc, #28]	; (e0e0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e0c2:	4b0a      	ldr	r3, [pc, #40]	; (e0ec <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e0c4:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e0c6:	4905      	ldr	r1, [pc, #20]	; (e0dc <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e0c8:	4805      	ldr	r0, [pc, #20]	; (e0e0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e0ca:	4b09      	ldr	r3, [pc, #36]	; (e0f0 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e0cc:	4798      	blx	r3
		return r;
    e0ce:	697b      	ldr	r3, [r7, #20]
    e0d0:	e000      	b.n	e0d4 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e0d2:	2300      	movs	r3, #0
	}
	

}
    e0d4:	4618      	mov	r0, r3
    e0d6:	3718      	adds	r7, #24
    e0d8:	46bd      	mov	sp, r7
    e0da:	bd80      	pop	{r7, pc}
    e0dc:	0000dcc1 	.word	0x0000dcc1
    e0e0:	20001060 	.word	0x20001060
    e0e4:	0000e6f1 	.word	0x0000e6f1
    e0e8:	0000c7f5 	.word	0x0000c7f5
    e0ec:	0000e611 	.word	0x0000e611
    e0f0:	0000e755 	.word	0x0000e755

0000e0f4 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e0f4:	b580      	push	{r7, lr}
    e0f6:	b086      	sub	sp, #24
    e0f8:	af00      	add	r7, sp, #0
    e0fa:	60f8      	str	r0, [r7, #12]
    e0fc:	60b9      	str	r1, [r7, #8]
    e0fe:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e100:	68fb      	ldr	r3, [r7, #12]
    e102:	2200      	movs	r2, #0
    e104:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e106:	68fb      	ldr	r3, [r7, #12]
    e108:	7c1b      	ldrb	r3, [r3, #16]
    e10a:	b2db      	uxtb	r3, r3
    e10c:	2b00      	cmp	r3, #0
    e10e:	d02a      	beq.n	e166 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e110:	687a      	ldr	r2, [r7, #4]
    e112:	4613      	mov	r3, r2
    e114:	009b      	lsls	r3, r3, #2
    e116:	4413      	add	r3, r2
    e118:	005b      	lsls	r3, r3, #1
    e11a:	461a      	mov	r2, r3
    e11c:	4915      	ldr	r1, [pc, #84]	; (e174 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e11e:	4816      	ldr	r0, [pc, #88]	; (e178 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e120:	4b16      	ldr	r3, [pc, #88]	; (e17c <_ZN9CDC_Class5writeEPKhj+0x88>)
    e122:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e124:	6879      	ldr	r1, [r7, #4]
    e126:	68b8      	ldr	r0, [r7, #8]
    e128:	4b15      	ldr	r3, [pc, #84]	; (e180 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e12a:	4798      	blx	r3
    e12c:	4603      	mov	r3, r0
    e12e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e130:	68fb      	ldr	r3, [r7, #12]
    e132:	7d1b      	ldrb	r3, [r3, #20]
    e134:	b2db      	uxtb	r3, r3
    e136:	f083 0301 	eor.w	r3, r3, #1
    e13a:	b2db      	uxtb	r3, r3
    e13c:	2b00      	cmp	r3, #0
    e13e:	d006      	beq.n	e14e <_ZN9CDC_Class5writeEPKhj+0x5a>
    e140:	68fb      	ldr	r3, [r7, #12]
    e142:	7c1b      	ldrb	r3, [r3, #16]
    e144:	b2db      	uxtb	r3, r3
    e146:	2b00      	cmp	r3, #0
    e148:	d001      	beq.n	e14e <_ZN9CDC_Class5writeEPKhj+0x5a>
    e14a:	2301      	movs	r3, #1
    e14c:	e000      	b.n	e150 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e14e:	2300      	movs	r3, #0
    e150:	2b00      	cmp	r3, #0
    e152:	d000      	beq.n	e156 <_ZN9CDC_Class5writeEPKhj+0x62>
    e154:	e7ec      	b.n	e130 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e156:	4808      	ldr	r0, [pc, #32]	; (e178 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e158:	4b0a      	ldr	r3, [pc, #40]	; (e184 <_ZN9CDC_Class5writeEPKhj+0x90>)
    e15a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e15c:	4905      	ldr	r1, [pc, #20]	; (e174 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e15e:	4806      	ldr	r0, [pc, #24]	; (e178 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e160:	4b09      	ldr	r3, [pc, #36]	; (e188 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e162:	4798      	blx	r3
    e164:	e001      	b.n	e16a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e166:	2300      	movs	r3, #0
    e168:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e16a:	697b      	ldr	r3, [r7, #20]
}
    e16c:	4618      	mov	r0, r3
    e16e:	3718      	adds	r7, #24
    e170:	46bd      	mov	sp, r7
    e172:	bd80      	pop	{r7, pc}
    e174:	0000dcc1 	.word	0x0000dcc1
    e178:	20001060 	.word	0x20001060
    e17c:	0000e6f1 	.word	0x0000e6f1
    e180:	0000c7f5 	.word	0x0000c7f5
    e184:	0000e611 	.word	0x0000e611
    e188:	0000e755 	.word	0x0000e755

0000e18c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e18c:	b480      	push	{r7}
    e18e:	b083      	sub	sp, #12
    e190:	af00      	add	r7, sp, #0
    e192:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e194:	687b      	ldr	r3, [r7, #4]
    e196:	7d5b      	ldrb	r3, [r3, #21]
    e198:	b2db      	uxtb	r3, r3
    e19a:	2b00      	cmp	r3, #0
    e19c:	d006      	beq.n	e1ac <_ZN9CDC_Class9availableEv+0x20>
    e19e:	687b      	ldr	r3, [r7, #4]
    e1a0:	7d1b      	ldrb	r3, [r3, #20]
    e1a2:	b2db      	uxtb	r3, r3
    e1a4:	2b00      	cmp	r3, #0
    e1a6:	d001      	beq.n	e1ac <_ZN9CDC_Class9availableEv+0x20>
    e1a8:	2301      	movs	r3, #1
    e1aa:	e000      	b.n	e1ae <_ZN9CDC_Class9availableEv+0x22>
    e1ac:	2300      	movs	r3, #0
    e1ae:	2b00      	cmp	r3, #0
    e1b0:	d001      	beq.n	e1b6 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e1b2:	2301      	movs	r3, #1
    e1b4:	e000      	b.n	e1b8 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e1b6:	2300      	movs	r3, #0
	}
	
}
    e1b8:	4618      	mov	r0, r3
    e1ba:	370c      	adds	r7, #12
    e1bc:	46bd      	mov	sp, r7
    e1be:	bc80      	pop	{r7}
    e1c0:	4770      	bx	lr
	...

0000e1c4 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e1c4:	b580      	push	{r7, lr}
    e1c6:	b082      	sub	sp, #8
    e1c8:	af00      	add	r7, sp, #0
    e1ca:	6078      	str	r0, [r7, #4]
    e1cc:	6039      	str	r1, [r7, #0]
    e1ce:	687b      	ldr	r3, [r7, #4]
    e1d0:	2b01      	cmp	r3, #1
    e1d2:	d10c      	bne.n	e1ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e1d4:	683b      	ldr	r3, [r7, #0]
    e1d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e1da:	4293      	cmp	r3, r2
    e1dc:	d107      	bne.n	e1ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e1de:	4806      	ldr	r0, [pc, #24]	; (e1f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e1e0:	4b06      	ldr	r3, [pc, #24]	; (e1fc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e1e2:	4798      	blx	r3
    e1e4:	4a06      	ldr	r2, [pc, #24]	; (e200 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e1e6:	4907      	ldr	r1, [pc, #28]	; (e204 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e1e8:	4803      	ldr	r0, [pc, #12]	; (e1f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e1ea:	4b07      	ldr	r3, [pc, #28]	; (e208 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e1ec:	4798      	blx	r3
    e1ee:	bf00      	nop
    e1f0:	3708      	adds	r7, #8
    e1f2:	46bd      	mov	sp, r7
    e1f4:	bd80      	pop	{r7, pc}
    e1f6:	bf00      	nop
    e1f8:	20000fa8 	.word	0x20000fa8
    e1fc:	0000ddb1 	.word	0x0000ddb1
    e200:	20000000 	.word	0x20000000
    e204:	0000ddf9 	.word	0x0000ddf9
    e208:	000126cd 	.word	0x000126cd

0000e20c <_GLOBAL__sub_I_ptrCDCClass>:
    e20c:	b580      	push	{r7, lr}
    e20e:	af00      	add	r7, sp, #0
    e210:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e214:	2001      	movs	r0, #1
    e216:	4b01      	ldr	r3, [pc, #4]	; (e21c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e218:	4798      	blx	r3
    e21a:	bd80      	pop	{r7, pc}
    e21c:	0000e1c5 	.word	0x0000e1c5

0000e220 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e220:	b590      	push	{r4, r7, lr}
    e222:	b083      	sub	sp, #12
    e224:	af00      	add	r7, sp, #0
    e226:	6078      	str	r0, [r7, #4]
    e228:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e22a:	683b      	ldr	r3, [r7, #0]
    e22c:	2b00      	cmp	r3, #0
    e22e:	d101      	bne.n	e234 <_ZN5Print5writeEPKc+0x14>
    e230:	2300      	movs	r3, #0
    e232:	e00c      	b.n	e24e <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e234:	687b      	ldr	r3, [r7, #4]
    e236:	681b      	ldr	r3, [r3, #0]
    e238:	3304      	adds	r3, #4
    e23a:	681c      	ldr	r4, [r3, #0]
    e23c:	6838      	ldr	r0, [r7, #0]
    e23e:	4b06      	ldr	r3, [pc, #24]	; (e258 <_ZN5Print5writeEPKc+0x38>)
    e240:	4798      	blx	r3
    e242:	4603      	mov	r3, r0
    e244:	461a      	mov	r2, r3
    e246:	6839      	ldr	r1, [r7, #0]
    e248:	6878      	ldr	r0, [r7, #4]
    e24a:	47a0      	blx	r4
    e24c:	4603      	mov	r3, r0
    }
    e24e:	4618      	mov	r0, r3
    e250:	370c      	adds	r7, #12
    e252:	46bd      	mov	sp, r7
    e254:	bd90      	pop	{r4, r7, pc}
    e256:	bf00      	nop
    e258:	00012e41 	.word	0x00012e41

0000e25c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e25c:	b580      	push	{r7, lr}
    e25e:	b086      	sub	sp, #24
    e260:	af00      	add	r7, sp, #0
    e262:	60f8      	str	r0, [r7, #12]
    e264:	60b9      	str	r1, [r7, #8]
    e266:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e268:	2300      	movs	r3, #0
    e26a:	617b      	str	r3, [r7, #20]
  while (size--) {
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	1e5a      	subs	r2, r3, #1
    e270:	607a      	str	r2, [r7, #4]
    e272:	2b00      	cmp	r3, #0
    e274:	bf14      	ite	ne
    e276:	2301      	movne	r3, #1
    e278:	2300      	moveq	r3, #0
    e27a:	b2db      	uxtb	r3, r3
    e27c:	2b00      	cmp	r3, #0
    e27e:	d016      	beq.n	e2ae <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e280:	68fb      	ldr	r3, [r7, #12]
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	681a      	ldr	r2, [r3, #0]
    e286:	68bb      	ldr	r3, [r7, #8]
    e288:	1c59      	adds	r1, r3, #1
    e28a:	60b9      	str	r1, [r7, #8]
    e28c:	781b      	ldrb	r3, [r3, #0]
    e28e:	4619      	mov	r1, r3
    e290:	68f8      	ldr	r0, [r7, #12]
    e292:	4790      	blx	r2
    e294:	4603      	mov	r3, r0
    e296:	2b00      	cmp	r3, #0
    e298:	bf14      	ite	ne
    e29a:	2301      	movne	r3, #1
    e29c:	2300      	moveq	r3, #0
    e29e:	b2db      	uxtb	r3, r3
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d003      	beq.n	e2ac <_ZN5Print5writeEPKhj+0x50>
    e2a4:	697b      	ldr	r3, [r7, #20]
    e2a6:	3301      	adds	r3, #1
    e2a8:	617b      	str	r3, [r7, #20]
  while (size--) {
    e2aa:	e7df      	b.n	e26c <_ZN5Print5writeEPKhj+0x10>
    else break;
    e2ac:	bf00      	nop
  }
  return n;
    e2ae:	697b      	ldr	r3, [r7, #20]
}
    e2b0:	4618      	mov	r0, r3
    e2b2:	3718      	adds	r7, #24
    e2b4:	46bd      	mov	sp, r7
    e2b6:	bd80      	pop	{r7, pc}

0000e2b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e2b8:	b580      	push	{r7, lr}
    e2ba:	b082      	sub	sp, #8
    e2bc:	af00      	add	r7, sp, #0
    e2be:	6078      	str	r0, [r7, #4]
    e2c0:	6039      	str	r1, [r7, #0]
  return write(str);
    e2c2:	6839      	ldr	r1, [r7, #0]
    e2c4:	6878      	ldr	r0, [r7, #4]
    e2c6:	4b03      	ldr	r3, [pc, #12]	; (e2d4 <_ZN5Print5printEPKc+0x1c>)
    e2c8:	4798      	blx	r3
    e2ca:	4603      	mov	r3, r0
}
    e2cc:	4618      	mov	r0, r3
    e2ce:	3708      	adds	r7, #8
    e2d0:	46bd      	mov	sp, r7
    e2d2:	bd80      	pop	{r7, pc}
    e2d4:	0000e221 	.word	0x0000e221

0000e2d8 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e2d8:	b480      	push	{r7}
    e2da:	b083      	sub	sp, #12
    e2dc:	af00      	add	r7, sp, #0
    e2de:	6078      	str	r0, [r7, #4]
    e2e0:	460b      	mov	r3, r1
    e2e2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e2e4:	78fb      	ldrb	r3, [r7, #3]
    e2e6:	687a      	ldr	r2, [r7, #4]
    e2e8:	01db      	lsls	r3, r3, #7
    e2ea:	4413      	add	r3, r2
    e2ec:	681b      	ldr	r3, [r3, #0]
}
    e2ee:	4618      	mov	r0, r3
    e2f0:	370c      	adds	r7, #12
    e2f2:	46bd      	mov	sp, r7
    e2f4:	bc80      	pop	{r7}
    e2f6:	4770      	bx	lr

0000e2f8 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e2f8:	b480      	push	{r7}
    e2fa:	b083      	sub	sp, #12
    e2fc:	af00      	add	r7, sp, #0
    e2fe:	6078      	str	r0, [r7, #4]
    e300:	460b      	mov	r3, r1
    e302:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e304:	78fb      	ldrb	r3, [r7, #3]
    e306:	687a      	ldr	r2, [r7, #4]
    e308:	01db      	lsls	r3, r3, #7
    e30a:	4413      	add	r3, r2
    e30c:	3310      	adds	r3, #16
    e30e:	681b      	ldr	r3, [r3, #0]
}
    e310:	4618      	mov	r0, r3
    e312:	370c      	adds	r7, #12
    e314:	46bd      	mov	sp, r7
    e316:	bc80      	pop	{r7}
    e318:	4770      	bx	lr

0000e31a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e31a:	b480      	push	{r7}
    e31c:	b083      	sub	sp, #12
    e31e:	af00      	add	r7, sp, #0
    e320:	6078      	str	r0, [r7, #4]
    e322:	460b      	mov	r3, r1
    e324:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e326:	78fb      	ldrb	r3, [r7, #3]
    e328:	687a      	ldr	r2, [r7, #4]
    e32a:	01db      	lsls	r3, r3, #7
    e32c:	4413      	add	r3, r2
    e32e:	3320      	adds	r3, #32
    e330:	681b      	ldr	r3, [r3, #0]
}
    e332:	4618      	mov	r0, r3
    e334:	370c      	adds	r7, #12
    e336:	46bd      	mov	sp, r7
    e338:	bc80      	pop	{r7}
    e33a:	4770      	bx	lr

0000e33c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e33c:	b580      	push	{r7, lr}
    e33e:	b086      	sub	sp, #24
    e340:	af00      	add	r7, sp, #0
    e342:	4603      	mov	r3, r0
    e344:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e346:	f107 030c 	add.w	r3, r7, #12
    e34a:	4618      	mov	r0, r3
    e34c:	4b13      	ldr	r3, [pc, #76]	; (e39c <_gpio_get_level+0x60>)
    e34e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e350:	79fb      	ldrb	r3, [r7, #7]
    e352:	4619      	mov	r1, r3
    e354:	4812      	ldr	r0, [pc, #72]	; (e3a0 <_gpio_get_level+0x64>)
    e356:	4b13      	ldr	r3, [pc, #76]	; (e3a4 <_gpio_get_level+0x68>)
    e358:	4798      	blx	r3
    e35a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e35c:	79fb      	ldrb	r3, [r7, #7]
    e35e:	4619      	mov	r1, r3
    e360:	480f      	ldr	r0, [pc, #60]	; (e3a0 <_gpio_get_level+0x64>)
    e362:	4b11      	ldr	r3, [pc, #68]	; (e3a8 <_gpio_get_level+0x6c>)
    e364:	4798      	blx	r3
    e366:	4602      	mov	r2, r0
    e368:	697b      	ldr	r3, [r7, #20]
    e36a:	43db      	mvns	r3, r3
    e36c:	4013      	ands	r3, r2
    e36e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e370:	79fb      	ldrb	r3, [r7, #7]
    e372:	4619      	mov	r1, r3
    e374:	480a      	ldr	r0, [pc, #40]	; (e3a0 <_gpio_get_level+0x64>)
    e376:	4b0d      	ldr	r3, [pc, #52]	; (e3ac <_gpio_get_level+0x70>)
    e378:	4798      	blx	r3
    e37a:	4602      	mov	r2, r0
    e37c:	697b      	ldr	r3, [r7, #20]
    e37e:	4013      	ands	r3, r2
    e380:	693a      	ldr	r2, [r7, #16]
    e382:	4313      	orrs	r3, r2
    e384:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e386:	f107 030c 	add.w	r3, r7, #12
    e38a:	4618      	mov	r0, r3
    e38c:	4b08      	ldr	r3, [pc, #32]	; (e3b0 <_gpio_get_level+0x74>)
    e38e:	4798      	blx	r3

	return tmp;
    e390:	693b      	ldr	r3, [r7, #16]
}
    e392:	4618      	mov	r0, r3
    e394:	3718      	adds	r7, #24
    e396:	46bd      	mov	sp, r7
    e398:	bd80      	pop	{r7, pc}
    e39a:	bf00      	nop
    e39c:	0000b9d1 	.word	0x0000b9d1
    e3a0:	41008000 	.word	0x41008000
    e3a4:	0000e2d9 	.word	0x0000e2d9
    e3a8:	0000e31b 	.word	0x0000e31b
    e3ac:	0000e2f9 	.word	0x0000e2f9
    e3b0:	0000b9f7 	.word	0x0000b9f7

0000e3b4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e3b4:	b580      	push	{r7, lr}
    e3b6:	b082      	sub	sp, #8
    e3b8:	af00      	add	r7, sp, #0
    e3ba:	4603      	mov	r3, r0
    e3bc:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e3be:	79fb      	ldrb	r3, [r7, #7]
    e3c0:	115b      	asrs	r3, r3, #5
    e3c2:	b2db      	uxtb	r3, r3
    e3c4:	4618      	mov	r0, r3
    e3c6:	4b09      	ldr	r3, [pc, #36]	; (e3ec <gpio_get_pin_level+0x38>)
    e3c8:	4798      	blx	r3
    e3ca:	4601      	mov	r1, r0
    e3cc:	79fb      	ldrb	r3, [r7, #7]
    e3ce:	f003 031f 	and.w	r3, r3, #31
    e3d2:	2201      	movs	r2, #1
    e3d4:	fa02 f303 	lsl.w	r3, r2, r3
    e3d8:	400b      	ands	r3, r1
    e3da:	2b00      	cmp	r3, #0
    e3dc:	bf14      	ite	ne
    e3de:	2301      	movne	r3, #1
    e3e0:	2300      	moveq	r3, #0
    e3e2:	b2db      	uxtb	r3, r3
}
    e3e4:	4618      	mov	r0, r3
    e3e6:	3708      	adds	r7, #8
    e3e8:	46bd      	mov	sp, r7
    e3ea:	bd80      	pop	{r7, pc}
    e3ec:	0000e33d 	.word	0x0000e33d

0000e3f0 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e3f0:	b480      	push	{r7}
    e3f2:	b083      	sub	sp, #12
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e3f8:	4b06      	ldr	r3, [pc, #24]	; (e414 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e3fa:	681b      	ldr	r3, [r3, #0]
    e3fc:	2201      	movs	r2, #1
    e3fe:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e400:	4b04      	ldr	r3, [pc, #16]	; (e414 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e402:	681b      	ldr	r3, [r3, #0]
    e404:	2200      	movs	r2, #0
    e406:	705a      	strb	r2, [r3, #1]
}
    e408:	bf00      	nop
    e40a:	370c      	adds	r7, #12
    e40c:	46bd      	mov	sp, r7
    e40e:	bc80      	pop	{r7}
    e410:	4770      	bx	lr
    e412:	bf00      	nop
    e414:	20001008 	.word	0x20001008

0000e418 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e418:	b580      	push	{r7, lr}
    e41a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e41c:	2040      	movs	r0, #64	; 0x40
    e41e:	4b0a      	ldr	r3, [pc, #40]	; (e448 <_ZL10USBPluggedv+0x30>)
    e420:	4798      	blx	r3
    e422:	4603      	mov	r3, r0
    e424:	2b00      	cmp	r3, #0
    e426:	d004      	beq.n	e432 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e428:	4b08      	ldr	r3, [pc, #32]	; (e44c <_ZL10USBPluggedv+0x34>)
    e42a:	681b      	ldr	r3, [r3, #0]
    e42c:	2201      	movs	r2, #1
    e42e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e430:	e007      	b.n	e442 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e432:	4b06      	ldr	r3, [pc, #24]	; (e44c <_ZL10USBPluggedv+0x34>)
    e434:	681b      	ldr	r3, [r3, #0]
    e436:	2200      	movs	r2, #0
    e438:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e43a:	4b04      	ldr	r3, [pc, #16]	; (e44c <_ZL10USBPluggedv+0x34>)
    e43c:	681b      	ldr	r3, [r3, #0]
    e43e:	2200      	movs	r2, #0
    e440:	701a      	strb	r2, [r3, #0]
}
    e442:	bf00      	nop
    e444:	bd80      	pop	{r7, pc}
    e446:	bf00      	nop
    e448:	0000e3b5 	.word	0x0000e3b5
    e44c:	20001008 	.word	0x20001008

0000e450 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e450:	b480      	push	{r7}
    e452:	b083      	sub	sp, #12
    e454:	af00      	add	r7, sp, #0
    e456:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e458:	4a04      	ldr	r2, [pc, #16]	; (e46c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e45a:	687b      	ldr	r3, [r7, #4]
    e45c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e45e:	687b      	ldr	r3, [r7, #4]
    e460:	4618      	mov	r0, r3
    e462:	370c      	adds	r7, #12
    e464:	46bd      	mov	sp, r7
    e466:	bc80      	pop	{r7}
    e468:	4770      	bx	lr
    e46a:	bf00      	nop
    e46c:	20001008 	.word	0x20001008

0000e470 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e470:	b480      	push	{r7}
    e472:	b083      	sub	sp, #12
    e474:	af00      	add	r7, sp, #0
    e476:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e478:	687b      	ldr	r3, [r7, #4]
    e47a:	4618      	mov	r0, r3
    e47c:	370c      	adds	r7, #12
    e47e:	46bd      	mov	sp, r7
    e480:	bc80      	pop	{r7}
    e482:	4770      	bx	lr

0000e484 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e484:	b580      	push	{r7, lr}
    e486:	b082      	sub	sp, #8
    e488:	af00      	add	r7, sp, #0
    e48a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e48c:	491f      	ldr	r1, [pc, #124]	; (e50c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e48e:	2040      	movs	r0, #64	; 0x40
    e490:	4b1f      	ldr	r3, [pc, #124]	; (e510 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e492:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e494:	481f      	ldr	r0, [pc, #124]	; (e514 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e496:	4b20      	ldr	r3, [pc, #128]	; (e518 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e498:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e49a:	2040      	movs	r0, #64	; 0x40
    e49c:	4b1f      	ldr	r3, [pc, #124]	; (e51c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e49e:	4798      	blx	r3
    e4a0:	4603      	mov	r3, r0
    e4a2:	461a      	mov	r2, r3
    e4a4:	687b      	ldr	r3, [r7, #4]
    e4a6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e4a8:	687b      	ldr	r3, [r7, #4]
    e4aa:	78db      	ldrb	r3, [r3, #3]
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d024      	beq.n	e4fa <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    e4b0:	687b      	ldr	r3, [r7, #4]
    e4b2:	2200      	movs	r2, #0
    e4b4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e4b6:	687b      	ldr	r3, [r7, #4]
    e4b8:	2201      	movs	r2, #1
    e4ba:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e4bc:	f44f 7216 	mov.w	r2, #600	; 0x258
    e4c0:	4917      	ldr	r1, [pc, #92]	; (e520 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e4c2:	4814      	ldr	r0, [pc, #80]	; (e514 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e4c4:	4b17      	ldr	r3, [pc, #92]	; (e524 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e4c6:	4798      	blx	r3
			usbTerminalTimer.Start();
    e4c8:	4812      	ldr	r0, [pc, #72]	; (e514 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e4ca:	4b17      	ldr	r3, [pc, #92]	; (e528 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e4cc:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e4ce:	4817      	ldr	r0, [pc, #92]	; (e52c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e4d0:	4b17      	ldr	r3, [pc, #92]	; (e530 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    e4d2:	4798      	blx	r3
    e4d4:	4603      	mov	r3, r0
    e4d6:	f083 0301 	eor.w	r3, r3, #1
    e4da:	b2db      	uxtb	r3, r3
    e4dc:	2b00      	cmp	r3, #0
    e4de:	d008      	beq.n	e4f2 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    e4e0:	687b      	ldr	r3, [r7, #4]
    e4e2:	789b      	ldrb	r3, [r3, #2]
    e4e4:	b2db      	uxtb	r3, r3
    e4e6:	2b00      	cmp	r3, #0
    e4e8:	d0f1      	beq.n	e4ce <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    e4ea:	687b      	ldr	r3, [r7, #4]
    e4ec:	2200      	movs	r2, #0
    e4ee:	701a      	strb	r2, [r3, #0]
					return;
    e4f0:	e009      	b.n	e506 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e4f2:	4808      	ldr	r0, [pc, #32]	; (e514 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e4f4:	4b0f      	ldr	r3, [pc, #60]	; (e534 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    e4f6:	4798      	blx	r3
    e4f8:	e005      	b.n	e506 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    e4fa:	687b      	ldr	r3, [r7, #4]
    e4fc:	2200      	movs	r2, #0
    e4fe:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e500:	687b      	ldr	r3, [r7, #4]
    e502:	2200      	movs	r2, #0
    e504:	705a      	strb	r2, [r3, #1]
		}
		
}
    e506:	3708      	adds	r7, #8
    e508:	46bd      	mov	sp, r7
    e50a:	bd80      	pop	{r7, pc}
    e50c:	0000e419 	.word	0x0000e419
    e510:	0000284d 	.word	0x0000284d
    e514:	20001060 	.word	0x20001060
    e518:	0000e5b5 	.word	0x0000e5b5
    e51c:	0000e3b5 	.word	0x0000e3b5
    e520:	0000e3f1 	.word	0x0000e3f1
    e524:	0000e6c9 	.word	0x0000e6c9
    e528:	0000e5ed 	.word	0x0000e5ed
    e52c:	20000fa8 	.word	0x20000fa8
    e530:	0000de69 	.word	0x0000de69
    e534:	0000e611 	.word	0x0000e611

0000e538 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e538:	b580      	push	{r7, lr}
    e53a:	b082      	sub	sp, #8
    e53c:	af00      	add	r7, sp, #0
    e53e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e540:	4b04      	ldr	r3, [pc, #16]	; (e554 <_ZL7task_cbPK10timer_task+0x1c>)
    e542:	681b      	ldr	r3, [r3, #0]
    e544:	4618      	mov	r0, r3
    e546:	4b04      	ldr	r3, [pc, #16]	; (e558 <_ZL7task_cbPK10timer_task+0x20>)
    e548:	4798      	blx	r3
}
    e54a:	bf00      	nop
    e54c:	3708      	adds	r7, #8
    e54e:	46bd      	mov	sp, r7
    e550:	bd80      	pop	{r7, pc}
    e552:	bf00      	nop
    e554:	2000100c 	.word	0x2000100c
    e558:	0000e639 	.word	0x0000e639

0000e55c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e55c:	b480      	push	{r7}
    e55e:	b083      	sub	sp, #12
    e560:	af00      	add	r7, sp, #0
    e562:	6078      	str	r0, [r7, #4]
    e564:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	683a      	ldr	r2, [r7, #0]
    e56a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    e56c:	4a08      	ldr	r2, [pc, #32]	; (e590 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e572:	687b      	ldr	r3, [r7, #4]
    e574:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e578:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e57a:	687b      	ldr	r3, [r7, #4]
    e57c:	689b      	ldr	r3, [r3, #8]
    e57e:	4a05      	ldr	r2, [pc, #20]	; (e594 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e580:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e582:	687b      	ldr	r3, [r7, #4]
    e584:	4618      	mov	r0, r3
    e586:	370c      	adds	r7, #12
    e588:	46bd      	mov	sp, r7
    e58a:	bc80      	pop	{r7}
    e58c:	4770      	bx	lr
    e58e:	bf00      	nop
    e590:	2000100c 	.word	0x2000100c
    e594:	0000e539 	.word	0x0000e539

0000e598 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e598:	b480      	push	{r7}
    e59a:	b083      	sub	sp, #12
    e59c:	af00      	add	r7, sp, #0
    e59e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e5a0:	687b      	ldr	r3, [r7, #4]
    e5a2:	2200      	movs	r2, #0
    e5a4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e5a6:	687b      	ldr	r3, [r7, #4]
    e5a8:	4618      	mov	r0, r3
    e5aa:	370c      	adds	r7, #12
    e5ac:	46bd      	mov	sp, r7
    e5ae:	bc80      	pop	{r7}
    e5b0:	4770      	bx	lr
	...

0000e5b4 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    e5b4:	b580      	push	{r7, lr}
    e5b6:	b082      	sub	sp, #8
    e5b8:	af00      	add	r7, sp, #0
    e5ba:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    e5bc:	687b      	ldr	r3, [r7, #4]
    e5be:	2200      	movs	r2, #0
    e5c0:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    e5c2:	6878      	ldr	r0, [r7, #4]
    e5c4:	4b08      	ldr	r3, [pc, #32]	; (e5e8 <_ZN17TimerSerial_Class4InitEv+0x34>)
    e5c6:	4798      	blx	r3
    e5c8:	4603      	mov	r3, r0
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	bf0c      	ite	eq
    e5ce:	2301      	moveq	r3, #1
    e5d0:	2300      	movne	r3, #0
    e5d2:	b2da      	uxtb	r2, r3
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	709a      	strb	r2, [r3, #2]
	return isOK;
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	789b      	ldrb	r3, [r3, #2]
    e5dc:	b2db      	uxtb	r3, r3
}
    e5de:	4618      	mov	r0, r3
    e5e0:	3708      	adds	r7, #8
    e5e2:	46bd      	mov	sp, r7
    e5e4:	bd80      	pop	{r7, pc}
    e5e6:	bf00      	nop
    e5e8:	0000e5ed 	.word	0x0000e5ed

0000e5ec <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e5ec:	b580      	push	{r7, lr}
    e5ee:	b084      	sub	sp, #16
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e5f4:	687b      	ldr	r3, [r7, #4]
    e5f6:	691b      	ldr	r3, [r3, #16]
    e5f8:	4618      	mov	r0, r3
    e5fa:	4b04      	ldr	r3, [pc, #16]	; (e60c <_ZN17TimerSerial_Class5StartEv+0x20>)
    e5fc:	4798      	blx	r3
    e5fe:	60f8      	str	r0, [r7, #12]
	return status;
    e600:	68fb      	ldr	r3, [r7, #12]
	
}
    e602:	4618      	mov	r0, r3
    e604:	3710      	adds	r7, #16
    e606:	46bd      	mov	sp, r7
    e608:	bd80      	pop	{r7, pc}
    e60a:	bf00      	nop
    e60c:	0000305d 	.word	0x0000305d

0000e610 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e610:	b580      	push	{r7, lr}
    e612:	b084      	sub	sp, #16
    e614:	af00      	add	r7, sp, #0
    e616:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e618:	687b      	ldr	r3, [r7, #4]
    e61a:	691b      	ldr	r3, [r3, #16]
    e61c:	4618      	mov	r0, r3
    e61e:	4b05      	ldr	r3, [pc, #20]	; (e634 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e620:	4798      	blx	r3
    e622:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e624:	687b      	ldr	r3, [r7, #4]
    e626:	2200      	movs	r2, #0
    e628:	705a      	strb	r2, [r3, #1]
	return status;
    e62a:	68fb      	ldr	r3, [r7, #12]
}
    e62c:	4618      	mov	r0, r3
    e62e:	3710      	adds	r7, #16
    e630:	46bd      	mov	sp, r7
    e632:	bd80      	pop	{r7, pc}
    e634:	000030c5 	.word	0x000030c5

0000e638 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e638:	b480      	push	{r7}
    e63a:	b083      	sub	sp, #12
    e63c:	af00      	add	r7, sp, #0
    e63e:	6078      	str	r0, [r7, #4]
	timeout=1;
    e640:	687b      	ldr	r3, [r7, #4]
    e642:	2201      	movs	r2, #1
    e644:	705a      	strb	r2, [r3, #1]
}
    e646:	bf00      	nop
    e648:	370c      	adds	r7, #12
    e64a:	46bd      	mov	sp, r7
    e64c:	bc80      	pop	{r7}
    e64e:	4770      	bx	lr

0000e650 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e650:	b580      	push	{r7, lr}
    e652:	b086      	sub	sp, #24
    e654:	af00      	add	r7, sp, #0
    e656:	60f8      	str	r0, [r7, #12]
    e658:	60b9      	str	r1, [r7, #8]
    e65a:	607a      	str	r2, [r7, #4]
    e65c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e65e:	68f8      	ldr	r0, [r7, #12]
    e660:	4b0d      	ldr	r3, [pc, #52]	; (e698 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e662:	4798      	blx	r3
	task->interval = interval;
    e664:	68fb      	ldr	r3, [r7, #12]
    e666:	689b      	ldr	r3, [r3, #8]
    e668:	687a      	ldr	r2, [r7, #4]
    e66a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e66c:	68fb      	ldr	r3, [r7, #12]
    e66e:	689b      	ldr	r3, [r3, #8]
    e670:	68ba      	ldr	r2, [r7, #8]
    e672:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e674:	68fb      	ldr	r3, [r7, #12]
    e676:	689b      	ldr	r3, [r3, #8]
    e678:	78fa      	ldrb	r2, [r7, #3]
    e67a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e67c:	68fb      	ldr	r3, [r7, #12]
    e67e:	691a      	ldr	r2, [r3, #16]
    e680:	68fb      	ldr	r3, [r7, #12]
    e682:	689b      	ldr	r3, [r3, #8]
    e684:	4619      	mov	r1, r3
    e686:	4610      	mov	r0, r2
    e688:	4b04      	ldr	r3, [pc, #16]	; (e69c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e68a:	4798      	blx	r3
    e68c:	6178      	str	r0, [r7, #20]
	
	return status;
    e68e:	697b      	ldr	r3, [r7, #20]
}
    e690:	4618      	mov	r0, r3
    e692:	3718      	adds	r7, #24
    e694:	46bd      	mov	sp, r7
    e696:	bd80      	pop	{r7, pc}
    e698:	0000e7ad 	.word	0x0000e7ad
    e69c:	00003131 	.word	0x00003131

0000e6a0 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e6a0:	b590      	push	{r4, r7, lr}
    e6a2:	b087      	sub	sp, #28
    e6a4:	af00      	add	r7, sp, #0
    e6a6:	60f8      	str	r0, [r7, #12]
    e6a8:	60b9      	str	r1, [r7, #8]
    e6aa:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e6ac:	2301      	movs	r3, #1
    e6ae:	687a      	ldr	r2, [r7, #4]
    e6b0:	68b9      	ldr	r1, [r7, #8]
    e6b2:	68f8      	ldr	r0, [r7, #12]
    e6b4:	4c03      	ldr	r4, [pc, #12]	; (e6c4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    e6b6:	47a0      	blx	r4
    e6b8:	6178      	str	r0, [r7, #20]
		return status;
    e6ba:	697b      	ldr	r3, [r7, #20]
}
    e6bc:	4618      	mov	r0, r3
    e6be:	371c      	adds	r7, #28
    e6c0:	46bd      	mov	sp, r7
    e6c2:	bd90      	pop	{r4, r7, pc}
    e6c4:	0000e651 	.word	0x0000e651

0000e6c8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e6c8:	b590      	push	{r4, r7, lr}
    e6ca:	b087      	sub	sp, #28
    e6cc:	af00      	add	r7, sp, #0
    e6ce:	60f8      	str	r0, [r7, #12]
    e6d0:	60b9      	str	r1, [r7, #8]
    e6d2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e6d4:	2300      	movs	r3, #0
    e6d6:	687a      	ldr	r2, [r7, #4]
    e6d8:	68b9      	ldr	r1, [r7, #8]
    e6da:	68f8      	ldr	r0, [r7, #12]
    e6dc:	4c03      	ldr	r4, [pc, #12]	; (e6ec <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e6de:	47a0      	blx	r4
    e6e0:	6178      	str	r0, [r7, #20]
	return status;
    e6e2:	697b      	ldr	r3, [r7, #20]
}
    e6e4:	4618      	mov	r0, r3
    e6e6:	371c      	adds	r7, #28
    e6e8:	46bd      	mov	sp, r7
    e6ea:	bd90      	pop	{r4, r7, pc}
    e6ec:	0000e651 	.word	0x0000e651

0000e6f0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e6f0:	b590      	push	{r4, r7, lr}
    e6f2:	b087      	sub	sp, #28
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	60f8      	str	r0, [r7, #12]
    e6f8:	60b9      	str	r1, [r7, #8]
    e6fa:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e6fc:	2300      	movs	r3, #0
    e6fe:	687a      	ldr	r2, [r7, #4]
    e700:	68b9      	ldr	r1, [r7, #8]
    e702:	68f8      	ldr	r0, [r7, #12]
    e704:	4c06      	ldr	r4, [pc, #24]	; (e720 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e706:	47a0      	blx	r4
    e708:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e70a:	68fb      	ldr	r3, [r7, #12]
    e70c:	691b      	ldr	r3, [r3, #16]
    e70e:	4618      	mov	r0, r3
    e710:	4b04      	ldr	r3, [pc, #16]	; (e724 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e712:	4798      	blx	r3
    e714:	6178      	str	r0, [r7, #20]
	return status;
    e716:	697b      	ldr	r3, [r7, #20]
}
    e718:	4618      	mov	r0, r3
    e71a:	371c      	adds	r7, #28
    e71c:	46bd      	mov	sp, r7
    e71e:	bd90      	pop	{r4, r7, pc}
    e720:	0000e651 	.word	0x0000e651
    e724:	0000305d 	.word	0x0000305d

0000e728 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    e728:	b580      	push	{r7, lr}
    e72a:	b082      	sub	sp, #8
    e72c:	af00      	add	r7, sp, #0
    e72e:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    e730:	687b      	ldr	r3, [r7, #4]
    e732:	691a      	ldr	r2, [r3, #16]
    e734:	687b      	ldr	r3, [r7, #4]
    e736:	689b      	ldr	r3, [r3, #8]
    e738:	4619      	mov	r1, r3
    e73a:	4610      	mov	r0, r2
    e73c:	4b04      	ldr	r3, [pc, #16]	; (e750 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    e73e:	4798      	blx	r3
	task->cb=NULL;
    e740:	687b      	ldr	r3, [r7, #4]
    e742:	689b      	ldr	r3, [r3, #8]
    e744:	2200      	movs	r2, #0
    e746:	60da      	str	r2, [r3, #12]
}
    e748:	bf00      	nop
    e74a:	3708      	adds	r7, #8
    e74c:	46bd      	mov	sp, r7
    e74e:	bd80      	pop	{r7, pc}
    e750:	00003235 	.word	0x00003235

0000e754 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e754:	b580      	push	{r7, lr}
    e756:	b082      	sub	sp, #8
    e758:	af00      	add	r7, sp, #0
    e75a:	6078      	str	r0, [r7, #4]
    e75c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e75e:	6839      	ldr	r1, [r7, #0]
    e760:	6878      	ldr	r0, [r7, #4]
    e762:	4b0f      	ldr	r3, [pc, #60]	; (e7a0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e764:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e766:	687b      	ldr	r3, [r7, #4]
    e768:	691b      	ldr	r3, [r3, #16]
    e76a:	f103 0218 	add.w	r2, r3, #24
    e76e:	687b      	ldr	r3, [r7, #4]
    e770:	689b      	ldr	r3, [r3, #8]
    e772:	4619      	mov	r1, r3
    e774:	4610      	mov	r0, r2
    e776:	4b0b      	ldr	r3, [pc, #44]	; (e7a4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e778:	4798      	blx	r3
    e77a:	4603      	mov	r3, r0
    e77c:	2b00      	cmp	r3, #0
    e77e:	d007      	beq.n	e790 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e780:	687b      	ldr	r3, [r7, #4]
    e782:	691a      	ldr	r2, [r3, #16]
    e784:	687b      	ldr	r3, [r7, #4]
    e786:	689b      	ldr	r3, [r3, #8]
    e788:	4619      	mov	r1, r3
    e78a:	4610      	mov	r0, r2
    e78c:	4b06      	ldr	r3, [pc, #24]	; (e7a8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e78e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e790:	687b      	ldr	r3, [r7, #4]
    e792:	689b      	ldr	r3, [r3, #8]
    e794:	2200      	movs	r2, #0
    e796:	60da      	str	r2, [r3, #12]
}
    e798:	bf00      	nop
    e79a:	3708      	adds	r7, #8
    e79c:	46bd      	mov	sp, r7
    e79e:	bd80      	pop	{r7, pc}
    e7a0:	0000e805 	.word	0x0000e805
    e7a4:	00003e1d 	.word	0x00003e1d
    e7a8:	00003235 	.word	0x00003235

0000e7ac <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e7ac:	b480      	push	{r7}
    e7ae:	b085      	sub	sp, #20
    e7b0:	af00      	add	r7, sp, #0
    e7b2:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e7b4:	2300      	movs	r3, #0
    e7b6:	73fb      	strb	r3, [r7, #15]
    e7b8:	7bfb      	ldrb	r3, [r7, #15]
    e7ba:	2b03      	cmp	r3, #3
    e7bc:	dc18      	bgt.n	e7f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    e7be:	7bfa      	ldrb	r2, [r7, #15]
    e7c0:	490f      	ldr	r1, [pc, #60]	; (e800 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7c2:	4613      	mov	r3, r2
    e7c4:	009b      	lsls	r3, r3, #2
    e7c6:	4413      	add	r3, r2
    e7c8:	009b      	lsls	r3, r3, #2
    e7ca:	440b      	add	r3, r1
    e7cc:	330c      	adds	r3, #12
    e7ce:	681b      	ldr	r3, [r3, #0]
    e7d0:	2b00      	cmp	r3, #0
    e7d2:	d109      	bne.n	e7e8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    e7d4:	7bfa      	ldrb	r2, [r7, #15]
    e7d6:	4613      	mov	r3, r2
    e7d8:	009b      	lsls	r3, r3, #2
    e7da:	4413      	add	r3, r2
    e7dc:	009b      	lsls	r3, r3, #2
    e7de:	4a08      	ldr	r2, [pc, #32]	; (e800 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7e0:	441a      	add	r2, r3
    e7e2:	687b      	ldr	r3, [r7, #4]
    e7e4:	609a      	str	r2, [r3, #8]
			return;
    e7e6:	e006      	b.n	e7f6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e7e8:	7bfb      	ldrb	r3, [r7, #15]
    e7ea:	3301      	adds	r3, #1
    e7ec:	73fb      	strb	r3, [r7, #15]
    e7ee:	e7e3      	b.n	e7b8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    e7f0:	687b      	ldr	r3, [r7, #4]
    e7f2:	4a03      	ldr	r2, [pc, #12]	; (e800 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7f4:	609a      	str	r2, [r3, #8]

}
    e7f6:	3714      	adds	r7, #20
    e7f8:	46bd      	mov	sp, r7
    e7fa:	bc80      	pop	{r7}
    e7fc:	4770      	bx	lr
    e7fe:	bf00      	nop
    e800:	20001010 	.word	0x20001010

0000e804 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e804:	b480      	push	{r7}
    e806:	b085      	sub	sp, #20
    e808:	af00      	add	r7, sp, #0
    e80a:	6078      	str	r0, [r7, #4]
    e80c:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e80e:	2300      	movs	r3, #0
    e810:	73fb      	strb	r3, [r7, #15]
    e812:	7bfb      	ldrb	r3, [r7, #15]
    e814:	2b03      	cmp	r3, #3
    e816:	dc19      	bgt.n	e84c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e818:	7bfa      	ldrb	r2, [r7, #15]
    e81a:	490e      	ldr	r1, [pc, #56]	; (e854 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e81c:	4613      	mov	r3, r2
    e81e:	009b      	lsls	r3, r3, #2
    e820:	4413      	add	r3, r2
    e822:	009b      	lsls	r3, r3, #2
    e824:	440b      	add	r3, r1
    e826:	330c      	adds	r3, #12
    e828:	681a      	ldr	r2, [r3, #0]
    e82a:	683b      	ldr	r3, [r7, #0]
    e82c:	429a      	cmp	r2, r3
    e82e:	d109      	bne.n	e844 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e830:	7bfa      	ldrb	r2, [r7, #15]
    e832:	4613      	mov	r3, r2
    e834:	009b      	lsls	r3, r3, #2
    e836:	4413      	add	r3, r2
    e838:	009b      	lsls	r3, r3, #2
    e83a:	4a06      	ldr	r2, [pc, #24]	; (e854 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e83c:	441a      	add	r2, r3
    e83e:	687b      	ldr	r3, [r7, #4]
    e840:	609a      	str	r2, [r3, #8]
			return;
    e842:	e003      	b.n	e84c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e844:	7bfb      	ldrb	r3, [r7, #15]
    e846:	3301      	adds	r3, #1
    e848:	73fb      	strb	r3, [r7, #15]
    e84a:	e7e2      	b.n	e812 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    e84c:	3714      	adds	r7, #20
    e84e:	46bd      	mov	sp, r7
    e850:	bc80      	pop	{r7}
    e852:	4770      	bx	lr
    e854:	20001010 	.word	0x20001010

0000e858 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e858:	b580      	push	{r7, lr}
    e85a:	b082      	sub	sp, #8
    e85c:	af00      	add	r7, sp, #0
    e85e:	6078      	str	r0, [r7, #4]
    e860:	6039      	str	r1, [r7, #0]
    e862:	687b      	ldr	r3, [r7, #4]
    e864:	2b01      	cmp	r3, #1
    e866:	d116      	bne.n	e896 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e868:	683b      	ldr	r3, [r7, #0]
    e86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e86e:	4293      	cmp	r3, r2
    e870:	d111      	bne.n	e896 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e872:	490b      	ldr	r1, [pc, #44]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e874:	480b      	ldr	r0, [pc, #44]	; (e8a4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e876:	4b0c      	ldr	r3, [pc, #48]	; (e8a8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e878:	4798      	blx	r3
    e87a:	4a0c      	ldr	r2, [pc, #48]	; (e8ac <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e87c:	490c      	ldr	r1, [pc, #48]	; (e8b0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e87e:	4809      	ldr	r0, [pc, #36]	; (e8a4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e880:	4b0c      	ldr	r3, [pc, #48]	; (e8b4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e882:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e884:	490c      	ldr	r1, [pc, #48]	; (e8b8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e886:	480d      	ldr	r0, [pc, #52]	; (e8bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e888:	4b07      	ldr	r3, [pc, #28]	; (e8a8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e88a:	4798      	blx	r3
    e88c:	4a07      	ldr	r2, [pc, #28]	; (e8ac <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e88e:	4908      	ldr	r1, [pc, #32]	; (e8b0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e890:	480a      	ldr	r0, [pc, #40]	; (e8bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e892:	4b08      	ldr	r3, [pc, #32]	; (e8b4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e894:	4798      	blx	r3
    e896:	bf00      	nop
    e898:	3708      	adds	r7, #8
    e89a:	46bd      	mov	sp, r7
    e89c:	bd80      	pop	{r7, pc}
    e89e:	bf00      	nop
    e8a0:	20007fa0 	.word	0x20007fa0
    e8a4:	20001060 	.word	0x20001060
    e8a8:	0000e55d 	.word	0x0000e55d
    e8ac:	20000000 	.word	0x20000000
    e8b0:	0000e599 	.word	0x0000e599
    e8b4:	000126cd 	.word	0x000126cd
    e8b8:	20007e98 	.word	0x20007e98
    e8bc:	20001080 	.word	0x20001080

0000e8c0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e8c0:	b580      	push	{r7, lr}
    e8c2:	af00      	add	r7, sp, #0
    e8c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8c8:	2001      	movs	r0, #1
    e8ca:	4b01      	ldr	r3, [pc, #4]	; (e8d0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e8cc:	4798      	blx	r3
    e8ce:	bd80      	pop	{r7, pc}
    e8d0:	0000e859 	.word	0x0000e859

0000e8d4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e8d4:	b480      	push	{r7}
    e8d6:	b083      	sub	sp, #12
    e8d8:	af00      	add	r7, sp, #0
    e8da:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e8dc:	2300      	movs	r3, #0
	}
    e8de:	4618      	mov	r0, r3
    e8e0:	370c      	adds	r7, #12
    e8e2:	46bd      	mov	sp, r7
    e8e4:	bc80      	pop	{r7}
    e8e6:	4770      	bx	lr

0000e8e8 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e8e8:	b480      	push	{r7}
    e8ea:	af00      	add	r7, sp, #0
		}
    e8ec:	bf00      	nop
    e8ee:	46bd      	mov	sp, r7
    e8f0:	bc80      	pop	{r7}
    e8f2:	4770      	bx	lr

0000e8f4 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    e8f4:	4770      	bx	lr

0000e8f6 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    e8f6:	4770      	bx	lr

0000e8f8 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
    e8f8:	1f0b      	subs	r3, r1, #4
    e8fa:	300c      	adds	r0, #12
    e8fc:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
    e8fe:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e902:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    e906:	428b      	cmp	r3, r1
    e908:	d1f9      	bne.n	e8fe <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
    e90a:	2000      	movs	r0, #0
    e90c:	4770      	bx	lr
	...

0000e910 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
    e910:	b510      	push	{r4, lr}
    e912:	4604      	mov	r4, r0
	i2c=i2cClass;
    e914:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
    e916:	7a4b      	ldrb	r3, [r1, #9]
    e918:	b90b      	cbnz	r3, e91e <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
    e91a:	78a0      	ldrb	r0, [r4, #2]
    e91c:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
    e91e:	4611      	mov	r1, r2
    e920:	4b03      	ldr	r3, [pc, #12]	; (e930 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x20>)
    e922:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
    e924:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e926:	4b03      	ldr	r3, [pc, #12]	; (e934 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
    e928:	4798      	blx	r3
		isOK=SelfTest();
    e92a:	2301      	movs	r3, #1
    e92c:	70a3      	strb	r3, [r4, #2]
    e92e:	e7f4      	b.n	e91a <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
    e930:	0000e8f9 	.word	0x0000e8f9
    e934:	00011029 	.word	0x00011029

0000e938 <_ZN19CondesatorFan_Class9SetEnableEb>:
}
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    e938:	b510      	push	{r4, lr}
    e93a:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
    e93c:	f081 0201 	eor.w	r2, r1, #1
    e940:	2100      	movs	r1, #0
    e942:	68c0      	ldr	r0, [r0, #12]
    e944:	4b01      	ldr	r3, [pc, #4]	; (e94c <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    e946:	4798      	blx	r3
    e948:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
    e94a:	bd10      	pop	{r4, pc}
    e94c:	00011121 	.word	0x00011121

0000e950 <_ZN19CondesatorFan_Class6SetPWMEh>:
uint8_t	CondesatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(2,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
    e950:	b510      	push	{r4, lr}
    e952:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
    e954:	6a40      	ldr	r0, [r0, #36]	; 0x24
    e956:	4b02      	ldr	r3, [pc, #8]	; (e960 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
    e958:	4798      	blx	r3
    e95a:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
    e95c:	bd10      	pop	{r4, pc}
    e95e:	bf00      	nop
    e960:	00010f35 	.word	0x00010f35

0000e964 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    e964:	b510      	push	{r4, lr}
    e966:	4604      	mov	r4, r0
    e968:	302c      	adds	r0, #44	; 0x2c
    e96a:	4b03      	ldr	r3, [pc, #12]	; (e978 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    e96c:	4798      	blx	r3
    e96e:	4620      	mov	r0, r4
    e970:	4b02      	ldr	r3, [pc, #8]	; (e97c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    e972:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    e974:	4620      	mov	r0, r4
    e976:	bd10      	pop	{r4, pc}
    e978:	0000e8f7 	.word	0x0000e8f7
    e97c:	0000eba5 	.word	0x0000eba5

0000e980 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    e980:	b570      	push	{r4, r5, r6, lr}
    e982:	4c05      	ldr	r4, [pc, #20]	; (e998 <__tcf_1+0x18>)
    e984:	4e05      	ldr	r6, [pc, #20]	; (e99c <__tcf_1+0x1c>)
    e986:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    e98a:	3c1c      	subs	r4, #28
    e98c:	4620      	mov	r0, r4
    e98e:	47b0      	blx	r6
    e990:	42ac      	cmp	r4, r5
    e992:	d1fa      	bne.n	e98a <__tcf_1+0xa>
    e994:	bd70      	pop	{r4, r5, r6, pc}
    e996:	bf00      	nop
    e998:	20001164 	.word	0x20001164
    e99c:	00010db7 	.word	0x00010db7

0000e9a0 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    e9a0:	b510      	push	{r4, lr}
    e9a2:	4803      	ldr	r0, [pc, #12]	; (e9b0 <__tcf_0+0x10>)
    e9a4:	4c03      	ldr	r4, [pc, #12]	; (e9b4 <__tcf_0+0x14>)
    e9a6:	47a0      	blx	r4
    e9a8:	4803      	ldr	r0, [pc, #12]	; (e9b8 <__tcf_0+0x18>)
    e9aa:	47a0      	blx	r4
    e9ac:	bd10      	pop	{r4, pc}
    e9ae:	bf00      	nop
    e9b0:	20001190 	.word	0x20001190
    e9b4:	0000eba5 	.word	0x0000eba5
    e9b8:	20001164 	.word	0x20001164

0000e9bc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    e9bc:	b510      	push	{r4, lr}
    e9be:	4604      	mov	r4, r0
    e9c0:	4b0d      	ldr	r3, [pc, #52]	; (e9f8 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    e9c2:	4798      	blx	r3
    e9c4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e9c8:	4b0c      	ldr	r3, [pc, #48]	; (e9fc <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    e9ca:	4798      	blx	r3
	i2c=&i2cSharedStatic;
    e9cc:	4b0c      	ldr	r3, [pc, #48]	; (ea00 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    e9ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    e9d2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    e9d6:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    e9da:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    e9dc:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    e9e0:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    e9e2:	f503 7298 	add.w	r2, r3, #304	; 0x130
    e9e6:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    e9e8:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
    e9ec:	2300      	movs	r3, #0
    e9ee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    e9f2:	4620      	mov	r0, r4
    e9f4:	bd10      	pop	{r4, pc}
    e9f6:	bf00      	nop
    e9f8:	0000eb8d 	.word	0x0000eb8d
    e9fc:	0000e8f5 	.word	0x0000e8f5
    ea00:	200010a0 	.word	0x200010a0

0000ea04 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
    ea04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea08:	4606      	mov	r6, r0
    ea0a:	4c0c      	ldr	r4, [pc, #48]	; (ea3c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
    ea0c:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ea10:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    ea12:	f8df 802c 	ldr.w	r8, [pc, #44]	; ea40 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
    ea16:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
    ea1a:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    ea1e:	f045 0120 	orr.w	r1, r5, #32
    ea22:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
    ea26:	b2c9      	uxtb	r1, r1
    ea28:	4620      	mov	r0, r4
    ea2a:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ea2c:	3501      	adds	r5, #1
    ea2e:	341c      	adds	r4, #28
    ea30:	2d07      	cmp	r5, #7
    ea32:	d1f0      	bne.n	ea16 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
    ea34:	2000      	movs	r0, #0
    ea36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea3a:	bf00      	nop
    ea3c:	200010a0 	.word	0x200010a0
    ea40:	00010dcb 	.word	0x00010dcb

0000ea44 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
    ea44:	b570      	push	{r4, r5, r6, lr}
    ea46:	4604      	mov	r4, r0
	i2c->Init();
    ea48:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    ea4c:	4b17      	ldr	r3, [pc, #92]	; (eaac <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
    ea4e:	4798      	blx	r3
	if (i2c->isOK)
    ea50:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    ea54:	7a5b      	ldrb	r3, [r3, #9]
    ea56:	b943      	cbnz	r3, ea6a <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
    ea58:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    ea5c:	7a5b      	ldrb	r3, [r3, #9]
    ea5e:	b2db      	uxtb	r3, r3
    ea60:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
    ea64:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
    ea68:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
    ea6a:	4620      	mov	r0, r4
    ea6c:	4b10      	ldr	r3, [pc, #64]	; (eab0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
    ea6e:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
    ea70:	f104 0568 	add.w	r5, r4, #104	; 0x68
    ea74:	462b      	mov	r3, r5
    ea76:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    ea7a:	2100      	movs	r1, #0
    ea7c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    ea7e:	4e0d      	ldr	r6, [pc, #52]	; (eab4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
    ea80:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
    ea82:	462b      	mov	r3, r5
    ea84:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    ea88:	2101      	movs	r1, #1
    ea8a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ea8c:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
    ea8e:	462a      	mov	r2, r5
    ea90:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    ea94:	6e60      	ldr	r0, [r4, #100]	; 0x64
    ea96:	4b08      	ldr	r3, [pc, #32]	; (eab8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
    ea98:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
    ea9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    ea9c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ea9e:	791b      	ldrb	r3, [r3, #4]
    eaa0:	7912      	ldrb	r2, [r2, #4]
    eaa2:	4013      	ands	r3, r2
    eaa4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    eaa8:	e7d6      	b.n	ea58 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
    eaaa:	bf00      	nop
    eaac:	00010a69 	.word	0x00010a69
    eab0:	0000ea05 	.word	0x0000ea05
    eab4:	0000ebcd 	.word	0x0000ebcd
    eab8:	0000e911 	.word	0x0000e911

0000eabc <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
    eabc:	b570      	push	{r4, r5, r6, lr}
    eabe:	4606      	mov	r6, r0
    eac0:	460c      	mov	r4, r1
	gpios[0]=expanders[0]->ReadGPIORegister();
    eac2:	6e80      	ldr	r0, [r0, #104]	; 0x68
    eac4:	4d03      	ldr	r5, [pc, #12]	; (ead4 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x18>)
    eac6:	47a8      	blx	r5
    eac8:	7020      	strb	r0, [r4, #0]
	gpios[1]=expanders[1]->ReadGPIORegister();
    eaca:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
    eacc:	47a8      	blx	r5
    eace:	7060      	strb	r0, [r4, #1]
    ead0:	bd70      	pop	{r4, r5, r6, pc}
    ead2:	bf00      	nop
    ead4:	00010eb1 	.word	0x00010eb1

0000ead8 <_GLOBAL__sub_I_ptrFansClass>:
}

EvaporatorAndCondesatorFans_Class  fans;
    ead8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
    eadc:	4c1c      	ldr	r4, [pc, #112]	; (eb50 <_GLOBAL__sub_I_ptrFansClass+0x78>)
    eade:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    eae2:	491c      	ldr	r1, [pc, #112]	; (eb54 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
    eae4:	4628      	mov	r0, r5
    eae6:	4b1c      	ldr	r3, [pc, #112]	; (eb58 <_GLOBAL__sub_I_ptrFansClass+0x80>)
    eae8:	4798      	blx	r3
    eaea:	4f1c      	ldr	r7, [pc, #112]	; (eb5c <_GLOBAL__sub_I_ptrFansClass+0x84>)
    eaec:	463a      	mov	r2, r7
    eaee:	491c      	ldr	r1, [pc, #112]	; (eb60 <_GLOBAL__sub_I_ptrFansClass+0x88>)
    eaf0:	4628      	mov	r0, r5
    eaf2:	4e1c      	ldr	r6, [pc, #112]	; (eb64 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    eaf4:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    eaf6:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    eafa:	4628      	mov	r0, r5
    eafc:	f8df 8088 	ldr.w	r8, [pc, #136]	; eb88 <_GLOBAL__sub_I_ptrFansClass+0xb0>
    eb00:	47c0      	blx	r8
    eb02:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    eb06:	47c0      	blx	r8
    eb08:	463a      	mov	r2, r7
    eb0a:	4917      	ldr	r1, [pc, #92]	; (eb68 <_GLOBAL__sub_I_ptrFansClass+0x90>)
    eb0c:	2000      	movs	r0, #0
    eb0e:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    eb10:	f504 7898 	add.w	r8, r4, #304	; 0x130
    eb14:	4640      	mov	r0, r8
    eb16:	4b15      	ldr	r3, [pc, #84]	; (eb6c <_GLOBAL__sub_I_ptrFansClass+0x94>)
    eb18:	4798      	blx	r3
    eb1a:	463a      	mov	r2, r7
    eb1c:	4914      	ldr	r1, [pc, #80]	; (eb70 <_GLOBAL__sub_I_ptrFansClass+0x98>)
    eb1e:	4640      	mov	r0, r8
    eb20:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    eb22:	4e14      	ldr	r6, [pc, #80]	; (eb74 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    eb24:	4620      	mov	r0, r4
    eb26:	47b0      	blx	r6
    eb28:	341c      	adds	r4, #28
    eb2a:	42a5      	cmp	r5, r4
    eb2c:	d1fa      	bne.n	eb24 <_GLOBAL__sub_I_ptrFansClass+0x4c>
    eb2e:	4e0b      	ldr	r6, [pc, #44]	; (eb5c <_GLOBAL__sub_I_ptrFansClass+0x84>)
    eb30:	4632      	mov	r2, r6
    eb32:	4911      	ldr	r1, [pc, #68]	; (eb78 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    eb34:	2000      	movs	r0, #0
    eb36:	4c0b      	ldr	r4, [pc, #44]	; (eb64 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    eb38:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    eb3a:	4d10      	ldr	r5, [pc, #64]	; (eb7c <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    eb3c:	4628      	mov	r0, r5
    eb3e:	4b10      	ldr	r3, [pc, #64]	; (eb80 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    eb40:	4798      	blx	r3
    eb42:	4632      	mov	r2, r6
    eb44:	490f      	ldr	r1, [pc, #60]	; (eb84 <_GLOBAL__sub_I_ptrFansClass+0xac>)
    eb46:	4628      	mov	r0, r5
    eb48:	47a0      	blx	r4
    eb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb4e:	bf00      	nop
    eb50:	200010a0 	.word	0x200010a0
    eb54:	20007e78 	.word	0x20007e78
    eb58:	00010a39 	.word	0x00010a39
    eb5c:	20000000 	.word	0x20000000
    eb60:	00010a55 	.word	0x00010a55
    eb64:	000126cd 	.word	0x000126cd
    eb68:	0000e9a1 	.word	0x0000e9a1
    eb6c:	0000e8f5 	.word	0x0000e8f5
    eb70:	0000e8f7 	.word	0x0000e8f7
    eb74:	00010da3 	.word	0x00010da3
    eb78:	0000e981 	.word	0x0000e981
    eb7c:	20001200 	.word	0x20001200
    eb80:	0000e9bd 	.word	0x0000e9bd
    eb84:	0000e965 	.word	0x0000e965
    eb88:	0000eb8d 	.word	0x0000eb8d

0000eb8c <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    eb8c:	b510      	push	{r4, lr}
    eb8e:	4604      	mov	r4, r0
    eb90:	4b02      	ldr	r3, [pc, #8]	; (eb9c <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    eb92:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    eb94:	4b02      	ldr	r3, [pc, #8]	; (eba0 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    eb96:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    eb98:	4620      	mov	r0, r4
    eb9a:	bd10      	pop	{r4, pc}
    eb9c:	0000ec61 	.word	0x0000ec61
    eba0:	2000128c 	.word	0x2000128c

0000eba4 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    eba4:	b510      	push	{r4, lr}
    eba6:	4604      	mov	r4, r0
    eba8:	4b01      	ldr	r3, [pc, #4]	; (ebb0 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    ebaa:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    ebac:	4620      	mov	r0, r4
    ebae:	bd10      	pop	{r4, pc}
    ebb0:	0000ec63 	.word	0x0000ec63

0000ebb4 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
    ebb4:	1f0b      	subs	r3, r1, #4
    ebb6:	300c      	adds	r0, #12
    ebb8:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
    ebba:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ebbe:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
    ebc2:	428b      	cmp	r3, r1
    ebc4:	d1f9      	bne.n	ebba <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
    ebc6:	2000      	movs	r0, #0
    ebc8:	4770      	bx	lr
	...

0000ebcc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
    ebcc:	b510      	push	{r4, lr}
    ebce:	4604      	mov	r4, r0
	i2c=i2cClass;
    ebd0:	6082      	str	r2, [r0, #8]
	fanNumber=number;
    ebd2:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
    ebd6:	7a52      	ldrb	r2, [r2, #9]
    ebd8:	b90a      	cbnz	r2, ebde <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
    ebda:	7920      	ldrb	r0, [r4, #4]
    ebdc:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
    ebde:	4619      	mov	r1, r3
    ebe0:	4b0b      	ldr	r3, [pc, #44]	; (ec10 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x44>)
    ebe2:	4798      	blx	r3
			if (fanNumber==0)
    ebe4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ebe8:	b14b      	cbz	r3, ebfe <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x32>
			expanders[4+fanNumber]->SetPortOutput();
    ebea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ebee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ebf2:	69d8      	ldr	r0, [r3, #28]
    ebf4:	4b07      	ldr	r3, [pc, #28]	; (ec14 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
    ebf6:	4798      	blx	r3
			isOK=SelfTest();
    ebf8:	2301      	movs	r3, #1
    ebfa:	7123      	strb	r3, [r4, #4]
    ebfc:	e7ed      	b.n	ebda <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
    ebfe:	2170      	movs	r1, #112	; 0x70
    ec00:	68e0      	ldr	r0, [r4, #12]
    ec02:	4b05      	ldr	r3, [pc, #20]	; (ec18 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
    ec04:	4798      	blx	r3
				expanders[1]->SetPortInput();
    ec06:	6920      	ldr	r0, [r4, #16]
    ec08:	4b04      	ldr	r3, [pc, #16]	; (ec1c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
    ec0a:	4798      	blx	r3
    ec0c:	e7ed      	b.n	ebea <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
    ec0e:	bf00      	nop
    ec10:	0000ebb5 	.word	0x0000ebb5
    ec14:	00011029 	.word	0x00011029
    ec18:	00010fb5 	.word	0x00010fb5
    ec1c:	00010f71 	.word	0x00010f71

0000ec20 <_ZN19EvaporatorFan_Class9SetEnableEb>:
}
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    ec20:	b510      	push	{r4, lr}
    ec22:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
    ec24:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ec28:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
    ec2a:	f081 0201 	eor.w	r2, r1, #1
    ec2e:	bf0c      	ite	eq
    ec30:	2102      	moveq	r1, #2
    ec32:	2101      	movne	r1, #1
    ec34:	68c0      	ldr	r0, [r0, #12]
    ec36:	4b02      	ldr	r3, [pc, #8]	; (ec40 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
    ec38:	4798      	blx	r3
    ec3a:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    ec3c:	bd10      	pop	{r4, pc}
    ec3e:	bf00      	nop
    ec40:	00011121 	.word	0x00011121

0000ec44 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
    ec44:	b510      	push	{r4, lr}
    ec46:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
    ec48:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ec4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ec50:	69d8      	ldr	r0, [r3, #28]
    ec52:	4b02      	ldr	r3, [pc, #8]	; (ec5c <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
    ec54:	4798      	blx	r3
    ec56:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return pwmValue;
}
    ec5a:	bd10      	pop	{r4, pc}
    ec5c:	00010f35 	.word	0x00010f35

0000ec60 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    ec60:	4770      	bx	lr

0000ec62 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    ec62:	4770      	bx	lr

0000ec64 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    ec64:	b480      	push	{r7}
    ec66:	b083      	sub	sp, #12
    ec68:	af00      	add	r7, sp, #0
    ec6a:	6078      	str	r0, [r7, #4]
    ec6c:	460b      	mov	r3, r1
    ec6e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ec70:	78fb      	ldrb	r3, [r7, #3]
    ec72:	687a      	ldr	r2, [r7, #4]
    ec74:	01db      	lsls	r3, r3, #7
    ec76:	4413      	add	r3, r2
    ec78:	681b      	ldr	r3, [r3, #0]
}
    ec7a:	4618      	mov	r0, r3
    ec7c:	370c      	adds	r7, #12
    ec7e:	46bd      	mov	sp, r7
    ec80:	bc80      	pop	{r7}
    ec82:	4770      	bx	lr

0000ec84 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    ec84:	b480      	push	{r7}
    ec86:	b085      	sub	sp, #20
    ec88:	af00      	add	r7, sp, #0
    ec8a:	60f8      	str	r0, [r7, #12]
    ec8c:	460b      	mov	r3, r1
    ec8e:	607a      	str	r2, [r7, #4]
    ec90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ec92:	7afb      	ldrb	r3, [r7, #11]
    ec94:	68fa      	ldr	r2, [r7, #12]
    ec96:	01db      	lsls	r3, r3, #7
    ec98:	4413      	add	r3, r2
    ec9a:	3318      	adds	r3, #24
    ec9c:	687a      	ldr	r2, [r7, #4]
    ec9e:	601a      	str	r2, [r3, #0]
}
    eca0:	bf00      	nop
    eca2:	3714      	adds	r7, #20
    eca4:	46bd      	mov	sp, r7
    eca6:	bc80      	pop	{r7}
    eca8:	4770      	bx	lr

0000ecaa <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    ecaa:	b480      	push	{r7}
    ecac:	b083      	sub	sp, #12
    ecae:	af00      	add	r7, sp, #0
    ecb0:	6078      	str	r0, [r7, #4]
    ecb2:	460b      	mov	r3, r1
    ecb4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ecb6:	78fb      	ldrb	r3, [r7, #3]
    ecb8:	687a      	ldr	r2, [r7, #4]
    ecba:	01db      	lsls	r3, r3, #7
    ecbc:	4413      	add	r3, r2
    ecbe:	3310      	adds	r3, #16
    ecc0:	681b      	ldr	r3, [r3, #0]
}
    ecc2:	4618      	mov	r0, r3
    ecc4:	370c      	adds	r7, #12
    ecc6:	46bd      	mov	sp, r7
    ecc8:	bc80      	pop	{r7}
    ecca:	4770      	bx	lr

0000eccc <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    eccc:	b480      	push	{r7}
    ecce:	b085      	sub	sp, #20
    ecd0:	af00      	add	r7, sp, #0
    ecd2:	60f8      	str	r0, [r7, #12]
    ecd4:	460b      	mov	r3, r1
    ecd6:	607a      	str	r2, [r7, #4]
    ecd8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ecda:	7afb      	ldrb	r3, [r7, #11]
    ecdc:	68fa      	ldr	r2, [r7, #12]
    ecde:	01db      	lsls	r3, r3, #7
    ece0:	4413      	add	r3, r2
    ece2:	3314      	adds	r3, #20
    ece4:	687a      	ldr	r2, [r7, #4]
    ece6:	601a      	str	r2, [r3, #0]
}
    ece8:	bf00      	nop
    ecea:	3714      	adds	r7, #20
    ecec:	46bd      	mov	sp, r7
    ecee:	bc80      	pop	{r7}
    ecf0:	4770      	bx	lr

0000ecf2 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    ecf2:	b480      	push	{r7}
    ecf4:	b085      	sub	sp, #20
    ecf6:	af00      	add	r7, sp, #0
    ecf8:	60f8      	str	r0, [r7, #12]
    ecfa:	460b      	mov	r3, r1
    ecfc:	607a      	str	r2, [r7, #4]
    ecfe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    ed00:	7afb      	ldrb	r3, [r7, #11]
    ed02:	68fa      	ldr	r2, [r7, #12]
    ed04:	01db      	lsls	r3, r3, #7
    ed06:	4413      	add	r3, r2
    ed08:	331c      	adds	r3, #28
    ed0a:	687a      	ldr	r2, [r7, #4]
    ed0c:	601a      	str	r2, [r3, #0]
}
    ed0e:	bf00      	nop
    ed10:	3714      	adds	r7, #20
    ed12:	46bd      	mov	sp, r7
    ed14:	bc80      	pop	{r7}
    ed16:	4770      	bx	lr

0000ed18 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    ed18:	b480      	push	{r7}
    ed1a:	b083      	sub	sp, #12
    ed1c:	af00      	add	r7, sp, #0
    ed1e:	6078      	str	r0, [r7, #4]
    ed20:	460b      	mov	r3, r1
    ed22:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ed24:	78fb      	ldrb	r3, [r7, #3]
    ed26:	687a      	ldr	r2, [r7, #4]
    ed28:	01db      	lsls	r3, r3, #7
    ed2a:	4413      	add	r3, r2
    ed2c:	3320      	adds	r3, #32
    ed2e:	681b      	ldr	r3, [r3, #0]
}
    ed30:	4618      	mov	r0, r3
    ed32:	370c      	adds	r7, #12
    ed34:	46bd      	mov	sp, r7
    ed36:	bc80      	pop	{r7}
    ed38:	4770      	bx	lr
	...

0000ed3c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    ed3c:	b580      	push	{r7, lr}
    ed3e:	b082      	sub	sp, #8
    ed40:	af00      	add	r7, sp, #0
    ed42:	4603      	mov	r3, r0
    ed44:	6039      	str	r1, [r7, #0]
    ed46:	71fb      	strb	r3, [r7, #7]
    ed48:	4613      	mov	r3, r2
    ed4a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ed4c:	79bb      	ldrb	r3, [r7, #6]
    ed4e:	2b00      	cmp	r3, #0
    ed50:	d006      	beq.n	ed60 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ed52:	79fb      	ldrb	r3, [r7, #7]
    ed54:	683a      	ldr	r2, [r7, #0]
    ed56:	4619      	mov	r1, r3
    ed58:	4806      	ldr	r0, [pc, #24]	; (ed74 <_gpio_set_level+0x38>)
    ed5a:	4b07      	ldr	r3, [pc, #28]	; (ed78 <_gpio_set_level+0x3c>)
    ed5c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    ed5e:	e005      	b.n	ed6c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ed60:	79fb      	ldrb	r3, [r7, #7]
    ed62:	683a      	ldr	r2, [r7, #0]
    ed64:	4619      	mov	r1, r3
    ed66:	4803      	ldr	r0, [pc, #12]	; (ed74 <_gpio_set_level+0x38>)
    ed68:	4b04      	ldr	r3, [pc, #16]	; (ed7c <_gpio_set_level+0x40>)
    ed6a:	4798      	blx	r3
}
    ed6c:	bf00      	nop
    ed6e:	3708      	adds	r7, #8
    ed70:	46bd      	mov	sp, r7
    ed72:	bd80      	pop	{r7, pc}
    ed74:	41008000 	.word	0x41008000
    ed78:	0000ec85 	.word	0x0000ec85
    ed7c:	0000eccd 	.word	0x0000eccd

0000ed80 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    ed80:	b580      	push	{r7, lr}
    ed82:	b082      	sub	sp, #8
    ed84:	af00      	add	r7, sp, #0
    ed86:	4603      	mov	r3, r0
    ed88:	6039      	str	r1, [r7, #0]
    ed8a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    ed8c:	79fb      	ldrb	r3, [r7, #7]
    ed8e:	683a      	ldr	r2, [r7, #0]
    ed90:	4619      	mov	r1, r3
    ed92:	4803      	ldr	r0, [pc, #12]	; (eda0 <_gpio_toggle_level+0x20>)
    ed94:	4b03      	ldr	r3, [pc, #12]	; (eda4 <_gpio_toggle_level+0x24>)
    ed96:	4798      	blx	r3
}
    ed98:	bf00      	nop
    ed9a:	3708      	adds	r7, #8
    ed9c:	46bd      	mov	sp, r7
    ed9e:	bd80      	pop	{r7, pc}
    eda0:	41008000 	.word	0x41008000
    eda4:	0000ecf3 	.word	0x0000ecf3

0000eda8 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    eda8:	b580      	push	{r7, lr}
    edaa:	b086      	sub	sp, #24
    edac:	af00      	add	r7, sp, #0
    edae:	4603      	mov	r3, r0
    edb0:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    edb2:	f107 030c 	add.w	r3, r7, #12
    edb6:	4618      	mov	r0, r3
    edb8:	4b13      	ldr	r3, [pc, #76]	; (ee08 <_gpio_get_level+0x60>)
    edba:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    edbc:	79fb      	ldrb	r3, [r7, #7]
    edbe:	4619      	mov	r1, r3
    edc0:	4812      	ldr	r0, [pc, #72]	; (ee0c <_gpio_get_level+0x64>)
    edc2:	4b13      	ldr	r3, [pc, #76]	; (ee10 <_gpio_get_level+0x68>)
    edc4:	4798      	blx	r3
    edc6:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    edc8:	79fb      	ldrb	r3, [r7, #7]
    edca:	4619      	mov	r1, r3
    edcc:	480f      	ldr	r0, [pc, #60]	; (ee0c <_gpio_get_level+0x64>)
    edce:	4b11      	ldr	r3, [pc, #68]	; (ee14 <_gpio_get_level+0x6c>)
    edd0:	4798      	blx	r3
    edd2:	4602      	mov	r2, r0
    edd4:	697b      	ldr	r3, [r7, #20]
    edd6:	43db      	mvns	r3, r3
    edd8:	4013      	ands	r3, r2
    edda:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    eddc:	79fb      	ldrb	r3, [r7, #7]
    edde:	4619      	mov	r1, r3
    ede0:	480a      	ldr	r0, [pc, #40]	; (ee0c <_gpio_get_level+0x64>)
    ede2:	4b0d      	ldr	r3, [pc, #52]	; (ee18 <_gpio_get_level+0x70>)
    ede4:	4798      	blx	r3
    ede6:	4602      	mov	r2, r0
    ede8:	697b      	ldr	r3, [r7, #20]
    edea:	4013      	ands	r3, r2
    edec:	693a      	ldr	r2, [r7, #16]
    edee:	4313      	orrs	r3, r2
    edf0:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    edf2:	f107 030c 	add.w	r3, r7, #12
    edf6:	4618      	mov	r0, r3
    edf8:	4b08      	ldr	r3, [pc, #32]	; (ee1c <_gpio_get_level+0x74>)
    edfa:	4798      	blx	r3

	return tmp;
    edfc:	693b      	ldr	r3, [r7, #16]
}
    edfe:	4618      	mov	r0, r3
    ee00:	3718      	adds	r7, #24
    ee02:	46bd      	mov	sp, r7
    ee04:	bd80      	pop	{r7, pc}
    ee06:	bf00      	nop
    ee08:	0000b9d1 	.word	0x0000b9d1
    ee0c:	41008000 	.word	0x41008000
    ee10:	0000ec65 	.word	0x0000ec65
    ee14:	0000ed19 	.word	0x0000ed19
    ee18:	0000ecab 	.word	0x0000ecab
    ee1c:	0000b9f7 	.word	0x0000b9f7

0000ee20 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    ee20:	b580      	push	{r7, lr}
    ee22:	b082      	sub	sp, #8
    ee24:	af00      	add	r7, sp, #0
    ee26:	4603      	mov	r3, r0
    ee28:	460a      	mov	r2, r1
    ee2a:	71fb      	strb	r3, [r7, #7]
    ee2c:	4613      	mov	r3, r2
    ee2e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    ee30:	79fb      	ldrb	r3, [r7, #7]
    ee32:	115b      	asrs	r3, r3, #5
    ee34:	b2d8      	uxtb	r0, r3
    ee36:	79fb      	ldrb	r3, [r7, #7]
    ee38:	f003 031f 	and.w	r3, r3, #31
    ee3c:	2201      	movs	r2, #1
    ee3e:	fa02 f303 	lsl.w	r3, r2, r3
    ee42:	79ba      	ldrb	r2, [r7, #6]
    ee44:	4619      	mov	r1, r3
    ee46:	4b03      	ldr	r3, [pc, #12]	; (ee54 <gpio_set_pin_level+0x34>)
    ee48:	4798      	blx	r3
}
    ee4a:	bf00      	nop
    ee4c:	3708      	adds	r7, #8
    ee4e:	46bd      	mov	sp, r7
    ee50:	bd80      	pop	{r7, pc}
    ee52:	bf00      	nop
    ee54:	0000ed3d 	.word	0x0000ed3d

0000ee58 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    ee58:	b580      	push	{r7, lr}
    ee5a:	b082      	sub	sp, #8
    ee5c:	af00      	add	r7, sp, #0
    ee5e:	4603      	mov	r3, r0
    ee60:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    ee62:	79fb      	ldrb	r3, [r7, #7]
    ee64:	115b      	asrs	r3, r3, #5
    ee66:	b2d8      	uxtb	r0, r3
    ee68:	79fb      	ldrb	r3, [r7, #7]
    ee6a:	f003 031f 	and.w	r3, r3, #31
    ee6e:	2201      	movs	r2, #1
    ee70:	fa02 f303 	lsl.w	r3, r2, r3
    ee74:	4619      	mov	r1, r3
    ee76:	4b03      	ldr	r3, [pc, #12]	; (ee84 <gpio_toggle_pin_level+0x2c>)
    ee78:	4798      	blx	r3
}
    ee7a:	bf00      	nop
    ee7c:	3708      	adds	r7, #8
    ee7e:	46bd      	mov	sp, r7
    ee80:	bd80      	pop	{r7, pc}
    ee82:	bf00      	nop
    ee84:	0000ed81 	.word	0x0000ed81

0000ee88 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    ee88:	b580      	push	{r7, lr}
    ee8a:	b082      	sub	sp, #8
    ee8c:	af00      	add	r7, sp, #0
    ee8e:	4603      	mov	r3, r0
    ee90:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    ee92:	79fb      	ldrb	r3, [r7, #7]
    ee94:	115b      	asrs	r3, r3, #5
    ee96:	b2db      	uxtb	r3, r3
    ee98:	4618      	mov	r0, r3
    ee9a:	4b09      	ldr	r3, [pc, #36]	; (eec0 <gpio_get_pin_level+0x38>)
    ee9c:	4798      	blx	r3
    ee9e:	4601      	mov	r1, r0
    eea0:	79fb      	ldrb	r3, [r7, #7]
    eea2:	f003 031f 	and.w	r3, r3, #31
    eea6:	2201      	movs	r2, #1
    eea8:	fa02 f303 	lsl.w	r3, r2, r3
    eeac:	400b      	ands	r3, r1
    eeae:	2b00      	cmp	r3, #0
    eeb0:	bf14      	ite	ne
    eeb2:	2301      	movne	r3, #1
    eeb4:	2300      	moveq	r3, #0
    eeb6:	b2db      	uxtb	r3, r3
}
    eeb8:	4618      	mov	r0, r3
    eeba:	3708      	adds	r7, #8
    eebc:	46bd      	mov	sp, r7
    eebe:	bd80      	pop	{r7, pc}
    eec0:	0000eda9 	.word	0x0000eda9

0000eec4 <_ZL29TimeoutFlapperValveControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController;

static SingleFlapperValve_Class fvStatic(0);

static void TimeoutFlapperValveController(const struct timer_task *const timer_task)
{
    eec4:	b480      	push	{r7}
    eec6:	b083      	sub	sp, #12
    eec8:	af00      	add	r7, sp, #0
    eeca:	6078      	str	r0, [r7, #4]
//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController->unLockTimeout=true;
    eecc:	4b04      	ldr	r3, [pc, #16]	; (eee0 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x1c>)
    eece:	681b      	ldr	r3, [r3, #0]
    eed0:	2201      	movs	r2, #1
    eed2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	
}
    eed6:	bf00      	nop
    eed8:	370c      	adds	r7, #12
    eeda:	46bd      	mov	sp, r7
    eedc:	bc80      	pop	{r7}
    eede:	4770      	bx	lr
    eee0:	20001290 	.word	0x20001290

0000eee4 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task>:
static void TimeoutFlapperValveFullyClossed(const struct timer_task *const timer_task)
{
    eee4:	b480      	push	{r7}
    eee6:	b083      	sub	sp, #12
    eee8:	af00      	add	r7, sp, #0
    eeea:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController->fullClosedTimeout=true;
    eeec:	4b04      	ldr	r3, [pc, #16]	; (ef00 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task+0x1c>)
    eeee:	681b      	ldr	r3, [r3, #0]
    eef0:	2201      	movs	r2, #1
    eef2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	
}
    eef6:	bf00      	nop
    eef8:	370c      	adds	r7, #12
    eefa:	46bd      	mov	sp, r7
    eefc:	bc80      	pop	{r7}
    eefe:	4770      	bx	lr
    ef00:	20001290 	.word	0x20001290

0000ef04 <_ZL17ResetValveTimeoutPK10timer_task>:

static void ResetValveTimeout(const struct timer_task *const timer_task)
{
    ef04:	b480      	push	{r7}
    ef06:	b083      	sub	sp, #12
    ef08:	af00      	add	r7, sp, #0
    ef0a:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController->resetTimeout=true;
    ef0c:	4b04      	ldr	r3, [pc, #16]	; (ef20 <_ZL17ResetValveTimeoutPK10timer_task+0x1c>)
    ef0e:	681b      	ldr	r3, [r3, #0]
    ef10:	2201      	movs	r2, #1
    ef12:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
    ef16:	bf00      	nop
    ef18:	370c      	adds	r7, #12
    ef1a:	46bd      	mov	sp, r7
    ef1c:	bc80      	pop	{r7}
    ef1e:	4770      	bx	lr
    ef20:	20001290 	.word	0x20001290

0000ef24 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    ef24:	b580      	push	{r7, lr}
    ef26:	b082      	sub	sp, #8
    ef28:	af00      	add	r7, sp, #0
    ef2a:	6078      	str	r0, [r7, #4]
    ef2c:	687b      	ldr	r3, [r7, #4]
    ef2e:	4618      	mov	r0, r3
    ef30:	4b1e      	ldr	r3, [pc, #120]	; (efac <_ZN22FlapperValveControllerC1Ev+0x88>)
    ef32:	4798      	blx	r3
{
	fv=&fvStatic;
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	4a1e      	ldr	r2, [pc, #120]	; (efb0 <_ZN22FlapperValveControllerC1Ev+0x8c>)
    ef38:	679a      	str	r2, [r3, #120]	; 0x78
	ptrFlapperValveController=this;
    ef3a:	4a1e      	ldr	r2, [pc, #120]	; (efb4 <_ZN22FlapperValveControllerC1Ev+0x90>)
    ef3c:	687b      	ldr	r3, [r7, #4]
    ef3e:	6013      	str	r3, [r2, #0]
	doPeriodicTask=false;
    ef40:	687b      	ldr	r3, [r7, #4]
    ef42:	2200      	movs	r2, #0
    ef44:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
    ef48:	687b      	ldr	r3, [r7, #4]
    ef4a:	2200      	movs	r2, #0
    ef4c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	gotSetpoint=false;
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	2200      	movs	r2, #0
    ef54:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	controllerEnabled=false;
    ef58:	687b      	ldr	r3, [r7, #4]
    ef5a:	2200      	movs	r2, #0
    ef5c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
    ef60:	687b      	ldr	r3, [r7, #4]
    ef62:	2200      	movs	r2, #0
    ef64:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUNL_AIR;
    ef68:	687b      	ldr	r3, [r7, #4]
    ef6a:	22da      	movs	r2, #218	; 0xda
    ef6c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	NBC_Mode=false;
    ef70:	687b      	ldr	r3, [r7, #4]
    ef72:	2200      	movs	r2, #0
    ef74:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
	NBC_Activated=false;
    ef78:	687b      	ldr	r3, [r7, #4]
    ef7a:	2200      	movs	r2, #0
    ef7c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	standAloneActivated=false;
    ef80:	687b      	ldr	r3, [r7, #4]
    ef82:	2200      	movs	r2, #0
    ef84:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	standAloneMode=false;
    ef88:	687b      	ldr	r3, [r7, #4]
    ef8a:	2200      	movs	r2, #0
    ef8c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	resetTimeout=false;
    ef90:	687b      	ldr	r3, [r7, #4]
    ef92:	2200      	movs	r2, #0
    ef94:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	standAloneReturning=false;
    ef98:	687b      	ldr	r3, [r7, #4]
    ef9a:	2200      	movs	r2, #0
    ef9c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	
} //FlapperValveController
    efa0:	687b      	ldr	r3, [r7, #4]
    efa2:	4618      	mov	r0, r3
    efa4:	3708      	adds	r7, #8
    efa6:	46bd      	mov	sp, r7
    efa8:	bd80      	pop	{r7, pc}
    efaa:	bf00      	nop
    efac:	0000fd29 	.word	0x0000fd29
    efb0:	20001294 	.word	0x20001294
    efb4:	20001290 	.word	0x20001290

0000efb8 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    efb8:	b580      	push	{r7, lr}
    efba:	b082      	sub	sp, #8
    efbc:	af00      	add	r7, sp, #0
    efbe:	6078      	str	r0, [r7, #4]
    efc0:	687b      	ldr	r3, [r7, #4]
    efc2:	4618      	mov	r0, r3
    efc4:	4b03      	ldr	r3, [pc, #12]	; (efd4 <_ZN22FlapperValveControllerD1Ev+0x1c>)
    efc6:	4798      	blx	r3
{
} //~FlapperValveController
    efc8:	687b      	ldr	r3, [r7, #4]
    efca:	4618      	mov	r0, r3
    efcc:	3708      	adds	r7, #8
    efce:	46bd      	mov	sp, r7
    efd0:	bd80      	pop	{r7, pc}
    efd2:	bf00      	nop
    efd4:	0000fd75 	.word	0x0000fd75

0000efd8 <_ZN22FlapperValveController14InitControllerEv>:

bool FlapperValveController::InitController(){
    efd8:	b580      	push	{r7, lr}
    efda:	b082      	sub	sp, #8
    efdc:	af00      	add	r7, sp, #0
    efde:	6078      	str	r0, [r7, #4]
	fv=&fvStatic;
    efe0:	687b      	ldr	r3, [r7, #4]
    efe2:	4a06      	ldr	r2, [pc, #24]	; (effc <_ZN22FlapperValveController14InitControllerEv+0x24>)
    efe4:	679a      	str	r2, [r3, #120]	; 0x78
	return	fv->Init();	
    efe6:	687b      	ldr	r3, [r7, #4]
    efe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    efea:	4618      	mov	r0, r3
    efec:	4b04      	ldr	r3, [pc, #16]	; (f000 <_ZN22FlapperValveController14InitControllerEv+0x28>)
    efee:	4798      	blx	r3
    eff0:	4603      	mov	r3, r0
}
    eff2:	4618      	mov	r0, r3
    eff4:	3708      	adds	r7, #8
    eff6:	46bd      	mov	sp, r7
    eff8:	bd80      	pop	{r7, pc}
    effa:	bf00      	nop
    effc:	20001294 	.word	0x20001294
    f000:	0000fd95 	.word	0x0000fd95

0000f004 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	fv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    f004:	b480      	push	{r7}
    f006:	b083      	sub	sp, #12
    f008:	af00      	add	r7, sp, #0
    f00a:	6078      	str	r0, [r7, #4]
    f00c:	460b      	mov	r3, r1
    f00e:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    f010:	687b      	ldr	r3, [r7, #4]
    f012:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    f016:	687b      	ldr	r3, [r7, #4]
    f018:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	direction=currentPosition>sp;
    f01c:	687b      	ldr	r3, [r7, #4]
    f01e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f022:	461a      	mov	r2, r3
    f024:	78fb      	ldrb	r3, [r7, #3]
    f026:	429a      	cmp	r2, r3
    f028:	bfcc      	ite	gt
    f02a:	2301      	movgt	r3, #1
    f02c:	2300      	movle	r3, #0
    f02e:	b2da      	uxtb	r2, r3
    f030:	687b      	ldr	r3, [r7, #4]
    f032:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return direction;
    f036:	687b      	ldr	r3, [r7, #4]
    f038:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
	
}
    f03c:	4618      	mov	r0, r3
    f03e:	370c      	adds	r7, #12
    f040:	46bd      	mov	sp, r7
    f042:	bc80      	pop	{r7}
    f044:	4770      	bx	lr
	...

0000f048 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    f048:	b580      	push	{r7, lr}
    f04a:	b082      	sub	sp, #8
    f04c:	af00      	add	r7, sp, #0
    f04e:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    f050:	687b      	ldr	r3, [r7, #4]
    f052:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f056:	4619      	mov	r1, r3
    f058:	6878      	ldr	r0, [r7, #4]
    f05a:	4b03      	ldr	r3, [pc, #12]	; (f068 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    f05c:	4798      	blx	r3
    f05e:	4603      	mov	r3, r0
	
}
    f060:	4618      	mov	r0, r3
    f062:	3708      	adds	r7, #8
    f064:	46bd      	mov	sp, r7
    f066:	bd80      	pop	{r7, pc}
    f068:	0000f005 	.word	0x0000f005

0000f06c <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	fv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
    f06c:	b590      	push	{r4, r7, lr}
    f06e:	b083      	sub	sp, #12
    f070:	af00      	add	r7, sp, #0
    f072:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    f074:	687b      	ldr	r3, [r7, #4]
    f076:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
    f07a:	687b      	ldr	r3, [r7, #4]
    f07c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
//	floatLastPosition=(float)lastPosition;
	if (fv->controlOutputs.niAlcFvMotorEnable)
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    f088:	2b00      	cmp	r3, #0
    f08a:	d008      	beq.n	f09e <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		fv->SetEnable(false);
    f08c:	687b      	ldr	r3, [r7, #4]
    f08e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f090:	2100      	movs	r1, #0
    f092:	4618      	mov	r0, r3
    f094:	4b0b      	ldr	r3, [pc, #44]	; (f0c4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
    f096:	4798      	blx	r3
		delay_ms(10);
    f098:	200a      	movs	r0, #10
    f09a:	4b0b      	ldr	r3, [pc, #44]	; (f0c8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    f09c:	4798      	blx	r3
	} 
	else
	{
	}
	fv->SetDirection(CalculateDirection());
    f09e:	687b      	ldr	r3, [r7, #4]
    f0a0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
    f0a2:	6878      	ldr	r0, [r7, #4]
    f0a4:	4b09      	ldr	r3, [pc, #36]	; (f0cc <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    f0a6:	4798      	blx	r3
    f0a8:	4603      	mov	r3, r0
    f0aa:	4619      	mov	r1, r3
    f0ac:	4620      	mov	r0, r4
    f0ae:	4b08      	ldr	r3, [pc, #32]	; (f0d0 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    f0b0:	4798      	blx	r3
	StartMotor();
    f0b2:	6878      	ldr	r0, [r7, #4]
    f0b4:	4b07      	ldr	r3, [pc, #28]	; (f0d4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    f0b6:	4798      	blx	r3
	return 0;
    f0b8:	2300      	movs	r3, #0
}
    f0ba:	4618      	mov	r0, r3
    f0bc:	370c      	adds	r7, #12
    f0be:	46bd      	mov	sp, r7
    f0c0:	bd90      	pop	{r4, r7, pc}
    f0c2:	bf00      	nop
    f0c4:	0000ff49 	.word	0x0000ff49
    f0c8:	000027b9 	.word	0x000027b9
    f0cc:	0000f049 	.word	0x0000f049
    f0d0:	0000ffc9 	.word	0x0000ffc9
    f0d4:	0000f919 	.word	0x0000f919

0000f0d8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    f0d8:	b580      	push	{r7, lr}
    f0da:	b082      	sub	sp, #8
    f0dc:	af00      	add	r7, sp, #0
    f0de:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
    f0e0:	6878      	ldr	r0, [r7, #4]
    f0e2:	4b13      	ldr	r3, [pc, #76]	; (f130 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
    f0e4:	4798      	blx	r3
    f0e6:	4603      	mov	r3, r0
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	d003      	beq.n	f0f4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
    f0ec:	6878      	ldr	r0, [r7, #4]
    f0ee:	4b11      	ldr	r3, [pc, #68]	; (f134 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
    f0f0:	4798      	blx	r3
    f0f2:	e013      	b.n	f11c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
    f0f4:	687b      	ldr	r3, [r7, #4]
    f0f6:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	d00b      	beq.n	f116 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f0fe:	687b      	ldr	r3, [r7, #4]
    f100:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
    f104:	4619      	mov	r1, r3
    f106:	6878      	ldr	r0, [r7, #4]
    f108:	4b0b      	ldr	r3, [pc, #44]	; (f138 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    f10a:	4798      	blx	r3
			NBC_Activated=false;
    f10c:	687b      	ldr	r3, [r7, #4]
    f10e:	2200      	movs	r2, #0
    f110:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    f114:	e002      	b.n	f11c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
    f116:	6878      	ldr	r0, [r7, #4]
    f118:	4b08      	ldr	r3, [pc, #32]	; (f13c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    f11a:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    f11c:	687b      	ldr	r3, [r7, #4]
    f11e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
    f122:	f083 0301 	eor.w	r3, r3, #1
    f126:	b2db      	uxtb	r3, r3
}
    f128:	4618      	mov	r0, r3
    f12a:	3708      	adds	r7, #8
    f12c:	46bd      	mov	sp, r7
    f12e:	bd80      	pop	{r7, pc}
    f130:	0000f779 	.word	0x0000f779
    f134:	0000f719 	.word	0x0000f719
    f138:	0000f9a9 	.word	0x0000f9a9
    f13c:	0000f311 	.word	0x0000f311

0000f140 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
    f140:	b590      	push	{r4, r7, lr}
    f142:	b085      	sub	sp, #20
    f144:	af00      	add	r7, sp, #0
    f146:	6078      	str	r0, [r7, #4]
	bool result=false;
    f148:	2300      	movs	r3, #0
    f14a:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
    f14c:	687b      	ldr	r3, [r7, #4]
    f14e:	33bb      	adds	r3, #187	; 0xbb
    f150:	4619      	mov	r1, r3
    f152:	4817      	ldr	r0, [pc, #92]	; (f1b0 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
    f154:	4b17      	ldr	r3, [pc, #92]	; (f1b4 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
    f156:	4798      	blx	r3
	UpdateFlapperValveData();
    f158:	6878      	ldr	r0, [r7, #4]
    f15a:	4b17      	ldr	r3, [pc, #92]	; (f1b8 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
    f15c:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
    f15e:	687b      	ldr	r3, [r7, #4]
    f160:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    f164:	f083 0301 	eor.w	r3, r3, #1
    f168:	b2db      	uxtb	r3, r3
    f16a:	461c      	mov	r4, r3
    f16c:	6878      	ldr	r0, [r7, #4]
    f16e:	4b13      	ldr	r3, [pc, #76]	; (f1bc <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
    f170:	4798      	blx	r3
    f172:	4603      	mov	r3, r0
    f174:	f083 0301 	eor.w	r3, r3, #1
    f178:	b2db      	uxtb	r3, r3
    f17a:	4023      	ands	r3, r4
    f17c:	2b00      	cmp	r3, #0
    f17e:	bf14      	ite	ne
    f180:	2301      	movne	r3, #1
    f182:	2300      	moveq	r3, #0
    f184:	b2db      	uxtb	r3, r3
    f186:	2b00      	cmp	r3, #0
    f188:	d00d      	beq.n	f1a6 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
    f18a:	687b      	ldr	r3, [r7, #4]
    f18c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f190:	461a      	mov	r2, r3
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    f198:	429a      	cmp	r2, r3
    f19a:	dd02      	ble.n	f1a2 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
    f19c:	2301      	movs	r3, #1
    f19e:	73fb      	strb	r3, [r7, #15]
    f1a0:	e001      	b.n	f1a6 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
    f1a2:	2300      	movs	r3, #0
    f1a4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
    f1a6:	7bfb      	ldrb	r3, [r7, #15]
}
    f1a8:	4618      	mov	r0, r3
    f1aa:	3714      	adds	r7, #20
    f1ac:	46bd      	mov	sp, r7
    f1ae:	bd90      	pop	{r4, r7, pc}
    f1b0:	20002534 	.word	0x20002534
    f1b4:	000105b9 	.word	0x000105b9
    f1b8:	0000fb89 	.word	0x0000fb89
    f1bc:	0000f779 	.word	0x0000f779

0000f1c0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b082      	sub	sp, #8
    f1c4:	af00      	add	r7, sp, #0
    f1c6:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
    f1c8:	6878      	ldr	r0, [r7, #4]
    f1ca:	4b11      	ldr	r3, [pc, #68]	; (f210 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
    f1cc:	4798      	blx	r3
    f1ce:	4603      	mov	r3, r0
    f1d0:	461a      	mov	r2, r3
    f1d2:	687b      	ldr	r3, [r7, #4]
    f1d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f1d8:	b2db      	uxtb	r3, r3
    f1da:	f083 0301 	eor.w	r3, r3, #1
    f1de:	b2db      	uxtb	r3, r3
    f1e0:	4013      	ands	r3, r2
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	bf14      	ite	ne
    f1e6:	2301      	movne	r3, #1
    f1e8:	2300      	moveq	r3, #0
    f1ea:	b2db      	uxtb	r3, r3
    f1ec:	2b00      	cmp	r3, #0
    f1ee:	d003      	beq.n	f1f8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
    f1f0:	6878      	ldr	r0, [r7, #4]
    f1f2:	4b08      	ldr	r3, [pc, #32]	; (f214 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
    f1f4:	4798      	blx	r3
    f1f6:	e002      	b.n	f1fe <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
    f1f8:	6878      	ldr	r0, [r7, #4]
    f1fa:	4b07      	ldr	r3, [pc, #28]	; (f218 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
    f1fc:	4798      	blx	r3
	}
	return resetTimeout;
    f1fe:	687b      	ldr	r3, [r7, #4]
    f200:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    f204:	b2db      	uxtb	r3, r3
}
    f206:	4618      	mov	r0, r3
    f208:	3708      	adds	r7, #8
    f20a:	46bd      	mov	sp, r7
    f20c:	bd80      	pop	{r7, pc}
    f20e:	bf00      	nop
    f210:	0000f141 	.word	0x0000f141
    f214:	0000f585 	.word	0x0000f585
    f218:	0000f21d 	.word	0x0000f21d

0000f21c <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    f21c:	b580      	push	{r7, lr}
    f21e:	b082      	sub	sp, #8
    f220:	af00      	add	r7, sp, #0
    f222:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
    f224:	6878      	ldr	r0, [r7, #4]
    f226:	4b28      	ldr	r3, [pc, #160]	; (f2c8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xac>)
    f228:	4798      	blx	r3
    f22a:	4603      	mov	r3, r0
    f22c:	2b00      	cmp	r3, #0
    f22e:	d031      	beq.n	f294 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
    f230:	687b      	ldr	r3, [r7, #4]
    f232:	2201      	movs	r2, #1
    f234:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
			if (standAloneActivated)
    f238:	687b      	ldr	r3, [r7, #4]
    f23a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    f23e:	2b00      	cmp	r3, #0
    f240:	d003      	beq.n	f24a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
    f242:	6878      	ldr	r0, [r7, #4]
    f244:	4b21      	ldr	r3, [pc, #132]	; (f2cc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    f246:	4798      	blx	r3
    f248:	e038      	b.n	f2bc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
    f24a:	687b      	ldr	r3, [r7, #4]
    f24c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f250:	461a      	mov	r2, r3
    f252:	687b      	ldr	r3, [r7, #4]
    f254:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
    f258:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    f25c:	429a      	cmp	r2, r3
    f25e:	dd0c      	ble.n	f27a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
    f260:	687b      	ldr	r3, [r7, #4]
    f262:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
    f266:	43db      	mvns	r3, r3
    f268:	b2db      	uxtb	r3, r3
    f26a:	4619      	mov	r1, r3
    f26c:	6878      	ldr	r0, [r7, #4]
    f26e:	4b18      	ldr	r3, [pc, #96]	; (f2d0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    f270:	4798      	blx	r3
					standAloneReturning=true;
    f272:	687b      	ldr	r3, [r7, #4]
    f274:	2201      	movs	r2, #1
    f276:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    f27a:	687b      	ldr	r3, [r7, #4]
    f27c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
    f280:	43db      	mvns	r3, r3
    f282:	b2da      	uxtb	r2, r3
    f284:	687b      	ldr	r3, [r7, #4]
    f286:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
				standAloneActivated=true;
    f28a:	687b      	ldr	r3, [r7, #4]
    f28c:	2201      	movs	r2, #1
    f28e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    f292:	e013      	b.n	f2bc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
    f294:	687b      	ldr	r3, [r7, #4]
    f296:	2200      	movs	r2, #0
    f298:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		if (standAloneActivated)
    f29c:	687b      	ldr	r3, [r7, #4]
    f29e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	d007      	beq.n	f2b6 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
    f2a6:	687b      	ldr	r3, [r7, #4]
    f2a8:	2200      	movs	r2, #0
    f2aa:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
			standAloneReturning=false;
    f2ae:	687b      	ldr	r3, [r7, #4]
    f2b0:	2200      	movs	r2, #0
    f2b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
    f2b6:	6878      	ldr	r0, [r7, #4]
    f2b8:	4b04      	ldr	r3, [pc, #16]	; (f2cc <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    f2ba:	4798      	blx	r3
		
	}
}
    f2bc:	bf00      	nop
    f2be:	4618      	mov	r0, r3
    f2c0:	3708      	adds	r7, #8
    f2c2:	46bd      	mov	sp, r7
    f2c4:	bd80      	pop	{r7, pc}
    f2c6:	bf00      	nop
    f2c8:	0000f2d5 	.word	0x0000f2d5
    f2cc:	0000f0d9 	.word	0x0000f0d9
    f2d0:	0000f9a9 	.word	0x0000f9a9

0000f2d4 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
    f2d4:	b480      	push	{r7}
    f2d6:	b085      	sub	sp, #20
    f2d8:	af00      	add	r7, sp, #0
    f2da:	6078      	str	r0, [r7, #4]
	bool result=false;
    f2dc:	2300      	movs	r3, #0
    f2de:	73fb      	strb	r3, [r7, #15]
	if ((dataStruct.controlOutputs.iAlcFvStandAloneOut)&(!dataStruct.inputStatus.cabin[1]))
    f2e0:	687b      	ldr	r3, [r7, #4]
    f2e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    f2e6:	461a      	mov	r2, r3
    f2e8:	687b      	ldr	r3, [r7, #4]
    f2ea:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
    f2ee:	f083 0301 	eor.w	r3, r3, #1
    f2f2:	b2db      	uxtb	r3, r3
    f2f4:	4013      	ands	r3, r2
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d002      	beq.n	f300 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2c>
	{
		result=true;
    f2fa:	2301      	movs	r3, #1
    f2fc:	73fb      	strb	r3, [r7, #15]
    f2fe:	e001      	b.n	f304 <_ZN22FlapperValveController16IsStandAloneModeEv+0x30>
	} 
	else
	{
		result=false;
    f300:	2300      	movs	r3, #0
    f302:	73fb      	strb	r3, [r7, #15]
	}
	return result;
    f304:	7bfb      	ldrb	r3, [r7, #15]
}
    f306:	4618      	mov	r0, r3
    f308:	3714      	adds	r7, #20
    f30a:	46bd      	mov	sp, r7
    f30c:	bc80      	pop	{r7}
    f30e:	4770      	bx	lr

0000f310 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
    f310:	b590      	push	{r4, r7, lr}
    f312:	b083      	sub	sp, #12
    f314:	af00      	add	r7, sp, #0
    f316:	6078      	str	r0, [r7, #4]
	if (isControlling)
    f318:	687b      	ldr	r3, [r7, #4]
    f31a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
    f31e:	2b00      	cmp	r3, #0
    f320:	f000 8117 	beq.w	f552 <_ZN22FlapperValveController15ControlMovementEv+0x242>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    f324:	687b      	ldr	r3, [r7, #4]
    f326:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
    f32a:	687b      	ldr	r3, [r7, #4]
    f32c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    f330:	4313      	orrs	r3, r2
    f332:	b2db      	uxtb	r3, r3
    f334:	461a      	mov	r2, r3
    f336:	687b      	ldr	r3, [r7, #4]
    f338:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f33c:	4013      	ands	r3, r2
    f33e:	687a      	ldr	r2, [r7, #4]
    f340:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
    f344:	b2d2      	uxtb	r2, r2
    f346:	4013      	ands	r3, r2
    f348:	2b00      	cmp	r3, #0
    f34a:	bf14      	ite	ne
    f34c:	2301      	movne	r3, #1
    f34e:	2300      	moveq	r3, #0
    f350:	b2db      	uxtb	r3, r3
    f352:	2b00      	cmp	r3, #0
    f354:	d003      	beq.n	f35e <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    f356:	6878      	ldr	r0, [r7, #4]
    f358:	4b80      	ldr	r3, [pc, #512]	; (f55c <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
    f35a:	4798      	blx	r3
    f35c:	e0f9      	b.n	f552 <_ZN22FlapperValveController15ControlMovementEv+0x242>
		} 
		else
		{
			
		//	currentPosition=fv->ReadActualPosition();
			if ((((setpoint<2)&(currentPosition<2))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
    f35e:	687b      	ldr	r3, [r7, #4]
    f360:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f364:	2b01      	cmp	r3, #1
    f366:	bfd4      	ite	le
    f368:	2301      	movle	r3, #1
    f36a:	2300      	movgt	r3, #0
    f36c:	b2da      	uxtb	r2, r3
    f36e:	687b      	ldr	r3, [r7, #4]
    f370:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f374:	2b01      	cmp	r3, #1
    f376:	bfd4      	ite	le
    f378:	2301      	movle	r3, #1
    f37a:	2300      	movgt	r3, #0
    f37c:	b2db      	uxtb	r3, r3
    f37e:	4013      	ands	r3, r2
    f380:	b2da      	uxtb	r2, r3
    f382:	687b      	ldr	r3, [r7, #4]
    f384:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f388:	2bfa      	cmp	r3, #250	; 0xfa
    f38a:	bfcc      	ite	gt
    f38c:	2301      	movgt	r3, #1
    f38e:	2300      	movle	r3, #0
    f390:	b2d9      	uxtb	r1, r3
    f392:	687b      	ldr	r3, [r7, #4]
    f394:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f398:	2bf5      	cmp	r3, #245	; 0xf5
    f39a:	bfcc      	ite	gt
    f39c:	2301      	movgt	r3, #1
    f39e:	2300      	movle	r3, #0
    f3a0:	b2db      	uxtb	r3, r3
    f3a2:	400b      	ands	r3, r1
    f3a4:	b2db      	uxtb	r3, r3
    f3a6:	4313      	orrs	r3, r2
    f3a8:	b2db      	uxtb	r3, r3
    f3aa:	461a      	mov	r2, r3
    f3ac:	687b      	ldr	r3, [r7, #4]
    f3ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f3b2:	f083 0301 	eor.w	r3, r3, #1
    f3b6:	b2db      	uxtb	r3, r3
    f3b8:	4619      	mov	r1, r3
    f3ba:	687b      	ldr	r3, [r7, #4]
    f3bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f3c0:	b2db      	uxtb	r3, r3
    f3c2:	400b      	ands	r3, r1
    f3c4:	4013      	ands	r3, r2
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	bf14      	ite	ne
    f3ca:	2301      	movne	r3, #1
    f3cc:	2300      	moveq	r3, #0
    f3ce:	b2db      	uxtb	r3, r3
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d014      	beq.n	f3fe <_ZN22FlapperValveController15ControlMovementEv+0xee>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveFullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    f3d4:	22c8      	movs	r2, #200	; 0xc8
    f3d6:	4962      	ldr	r1, [pc, #392]	; (f560 <_ZN22FlapperValveController15ControlMovementEv+0x250>)
    f3d8:	4862      	ldr	r0, [pc, #392]	; (f564 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
    f3da:	4b63      	ldr	r3, [pc, #396]	; (f568 <_ZN22FlapperValveController15ControlMovementEv+0x258>)
    f3dc:	4798      	blx	r3
				fullClosedTimeout=false;
    f3de:	687b      	ldr	r3, [r7, #4]
    f3e0:	2200      	movs	r2, #0
    f3e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				gotSetpoint=false;
    f3e6:	687b      	ldr	r3, [r7, #4]
    f3e8:	2200      	movs	r2, #0
    f3ea:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				closing=true;
    f3ee:	687b      	ldr	r3, [r7, #4]
    f3f0:	2201      	movs	r2, #1
    f3f2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
				unLockTimeout=true;
    f3f6:	687b      	ldr	r3, [r7, #4]
    f3f8:	2201      	movs	r2, #1
    f3fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			}
			//floatCurrentPosition=(float)currentPosition;
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    f3fe:	687b      	ldr	r3, [r7, #4]
    f400:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f404:	461a      	mov	r2, r3
    f406:	687b      	ldr	r3, [r7, #4]
    f408:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f40c:	1ad3      	subs	r3, r2, r3
    f40e:	2b00      	cmp	r3, #0
    f410:	bfb8      	it	lt
    f412:	425b      	neglt	r3, r3
    f414:	687a      	ldr	r2, [r7, #4]
    f416:	f892 2096 	ldrb.w	r2, [r2, #150]	; 0x96
    f41a:	4293      	cmp	r3, r2
    f41c:	bfcc      	ite	gt
    f41e:	2301      	movgt	r3, #1
    f420:	2300      	movle	r3, #0
    f422:	b2db      	uxtb	r3, r3
    f424:	461a      	mov	r2, r3
    f426:	687b      	ldr	r3, [r7, #4]
    f428:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f42c:	4313      	orrs	r3, r2
    f42e:	2b00      	cmp	r3, #0
    f430:	d079      	beq.n	f526 <_ZN22FlapperValveController15ControlMovementEv+0x216>
			{
				if (flapperValveIsMoving)
    f432:	687b      	ldr	r3, [r7, #4]
    f434:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f438:	b2db      	uxtb	r3, r3
    f43a:	2b00      	cmp	r3, #0
    f43c:	d04b      	beq.n	f4d6 <_ZN22FlapperValveController15ControlMovementEv+0x1c6>
				{
					if (closing)
    f43e:	687b      	ldr	r3, [r7, #4]
    f440:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f444:	2b00      	cmp	r3, #0
    f446:	d00e      	beq.n	f466 <_ZN22FlapperValveController15ControlMovementEv+0x156>
					{
						if (keepControlling)
    f448:	687b      	ldr	r3, [r7, #4]
    f44a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    f44e:	2b00      	cmp	r3, #0
    f450:	d054      	beq.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						{
							if (fullClosedTimeout)
    f452:	687b      	ldr	r3, [r7, #4]
    f454:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
    f458:	b2db      	uxtb	r3, r3
    f45a:	2b00      	cmp	r3, #0
    f45c:	d04e      	beq.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
							{
								StopValveAtLimit();
    f45e:	6878      	ldr	r0, [r7, #4]
    f460:	4b3e      	ldr	r3, [pc, #248]	; (f55c <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
    f462:	4798      	blx	r3
    f464:	e04a      	b.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    f466:	687b      	ldr	r3, [r7, #4]
    f468:	f893 40a9 	ldrb.w	r4, [r3, #169]	; 0xa9
    f46c:	6878      	ldr	r0, [r7, #4]
    f46e:	4b3f      	ldr	r3, [pc, #252]	; (f56c <_ZN22FlapperValveController15ControlMovementEv+0x25c>)
    f470:	4798      	blx	r3
    f472:	4603      	mov	r3, r0
    f474:	429c      	cmp	r4, r3
    f476:	bf14      	ite	ne
    f478:	2301      	movne	r3, #1
    f47a:	2300      	moveq	r3, #0
    f47c:	b2db      	uxtb	r3, r3
    f47e:	2b00      	cmp	r3, #0
    f480:	d00b      	beq.n	f49a <_ZN22FlapperValveController15ControlMovementEv+0x18a>
						{
							StopMotor();
    f482:	6878      	ldr	r0, [r7, #4]
    f484:	4b3a      	ldr	r3, [pc, #232]	; (f570 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f486:	4798      	blx	r3
							hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f488:	493a      	ldr	r1, [pc, #232]	; (f574 <_ZN22FlapperValveController15ControlMovementEv+0x264>)
    f48a:	4836      	ldr	r0, [pc, #216]	; (f564 <_ZN22FlapperValveController15ControlMovementEv+0x254>)
    f48c:	4b3a      	ldr	r3, [pc, #232]	; (f578 <_ZN22FlapperValveController15ControlMovementEv+0x268>)
    f48e:	4798      	blx	r3
							keepControlling=true;
    f490:	687b      	ldr	r3, [r7, #4]
    f492:	2201      	movs	r2, #1
    f494:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    f498:	e030      	b.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							if (timeoutFlapperValveController)
    f49a:	687b      	ldr	r3, [r7, #4]
    f49c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    f4a0:	b2db      	uxtb	r3, r3
    f4a2:	2b00      	cmp	r3, #0
    f4a4:	d003      	beq.n	f4ae <_ZN22FlapperValveController15ControlMovementEv+0x19e>
							{
								StopMotor();
    f4a6:	6878      	ldr	r0, [r7, #4]
    f4a8:	4b31      	ldr	r3, [pc, #196]	; (f570 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f4aa:	4798      	blx	r3
    f4ac:	e026      	b.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								
							}
							else
							{
								if (keepControlling)
    f4ae:	687b      	ldr	r3, [r7, #4]
    f4b0:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    f4b4:	2b00      	cmp	r3, #0
    f4b6:	d021      	beq.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								{
									if (timeoutKeepControlling)
    f4b8:	687b      	ldr	r3, [r7, #4]
    f4ba:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f4be:	b2db      	uxtb	r3, r3
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d003      	beq.n	f4cc <_ZN22FlapperValveController15ControlMovementEv+0x1bc>
									{
										StopMotor();
    f4c4:	6878      	ldr	r0, [r7, #4]
    f4c6:	4b2a      	ldr	r3, [pc, #168]	; (f570 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f4c8:	4798      	blx	r3
    f4ca:	e017      	b.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
									}
									else
									{
										KeepControlling();
    f4cc:	2100      	movs	r1, #0
    f4ce:	6878      	ldr	r0, [r7, #4]
    f4d0:	4b2a      	ldr	r3, [pc, #168]	; (f57c <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
    f4d2:	4798      	blx	r3
    f4d4:	e012      	b.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					}
					
				}
				else
				{
					if (keepControlling)
    f4d6:	687b      	ldr	r3, [r7, #4]
    f4d8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
    f4dc:	2b00      	cmp	r3, #0
    f4de:	d00d      	beq.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					{
						if (timeoutKeepControlling)
    f4e0:	687b      	ldr	r3, [r7, #4]
    f4e2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f4e6:	b2db      	uxtb	r3, r3
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d003      	beq.n	f4f4 <_ZN22FlapperValveController15ControlMovementEv+0x1e4>
						{
							StopValveinBetween();
    f4ec:	6878      	ldr	r0, [r7, #4]
    f4ee:	4b24      	ldr	r3, [pc, #144]	; (f580 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
    f4f0:	4798      	blx	r3
    f4f2:	e003      	b.n	f4fc <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							KeepControlling();
    f4f4:	2100      	movs	r1, #0
    f4f6:	6878      	ldr	r0, [r7, #4]
    f4f8:	4b20      	ldr	r3, [pc, #128]	; (f57c <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
    f4fa:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    f4fc:	687b      	ldr	r3, [r7, #4]
    f4fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f502:	461a      	mov	r2, r3
    f504:	687b      	ldr	r3, [r7, #4]
    f506:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f50a:	1ad3      	subs	r3, r2, r3
    f50c:	2b00      	cmp	r3, #0
    f50e:	bfb8      	it	lt
    f510:	425b      	neglt	r3, r3
    f512:	687a      	ldr	r2, [r7, #4]
    f514:	f892 2096 	ldrb.w	r2, [r2, #150]	; 0x96
    f518:	4293      	cmp	r3, r2
    f51a:	dd1a      	ble.n	f552 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				{
					gotSetpoint=false;
    f51c:	687b      	ldr	r3, [r7, #4]
    f51e:	2200      	movs	r2, #0
    f520:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    f524:	e015      	b.n	f552 <_ZN22FlapperValveController15ControlMovementEv+0x242>
				
				
			}
			else
			{
				if (closing)
    f526:	687b      	ldr	r3, [r7, #4]
    f528:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f52c:	2b00      	cmp	r3, #0
    f52e:	d009      	beq.n	f544 <_ZN22FlapperValveController15ControlMovementEv+0x234>
				{
					if (fullClosedTimeout)
    f530:	687b      	ldr	r3, [r7, #4]
    f532:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
    f536:	b2db      	uxtb	r3, r3
    f538:	2b00      	cmp	r3, #0
    f53a:	d00a      	beq.n	f552 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
						StopValveAtLimit();
    f53c:	6878      	ldr	r0, [r7, #4]
    f53e:	4b07      	ldr	r3, [pc, #28]	; (f55c <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
    f540:	4798      	blx	r3
    f542:	e006      	b.n	f552 <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    f544:	6878      	ldr	r0, [r7, #4]
    f546:	4b0e      	ldr	r3, [pc, #56]	; (f580 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
    f548:	4798      	blx	r3
					gotSetpoint=true;
    f54a:	687b      	ldr	r3, [r7, #4]
    f54c:	2201      	movs	r2, #1
    f54e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		
	} 
	else
	{
	}
	return 0;
    f552:	2300      	movs	r3, #0
	
}
    f554:	4618      	mov	r0, r3
    f556:	370c      	adds	r7, #12
    f558:	46bd      	mov	sp, r7
    f55a:	bd90      	pop	{r4, r7, pc}
    f55c:	0000f7e5 	.word	0x0000f7e5
    f560:	0000eee5 	.word	0x0000eee5
    f564:	20000f50 	.word	0x20000f50
    f568:	0000da75 	.word	0x0000da75
    f56c:	0000f049 	.word	0x0000f049
    f570:	0000f7b9 	.word	0x0000f7b9
    f574:	0000eec5 	.word	0x0000eec5
    f578:	0000da1d 	.word	0x0000da1d
    f57c:	0000fb51 	.word	0x0000fb51
    f580:	0000f859 	.word	0x0000f859

0000f584 <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
    f584:	b580      	push	{r7, lr}
    f586:	b084      	sub	sp, #16
    f588:	af00      	add	r7, sp, #0
    f58a:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
    f58c:	2052      	movs	r0, #82	; 0x52
    f58e:	4b54      	ldr	r3, [pc, #336]	; (f6e0 <_ZN22FlapperValveController18ResetValvePositionEv+0x15c>)
    f590:	4798      	blx	r3
    f592:	4603      	mov	r3, r0
    f594:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
    f596:	6878      	ldr	r0, [r7, #4]
    f598:	4b52      	ldr	r3, [pc, #328]	; (f6e4 <_ZN22FlapperValveController18ResetValvePositionEv+0x160>)
    f59a:	4798      	blx	r3
    f59c:	4603      	mov	r3, r0
    f59e:	2b00      	cmp	r3, #0
    f5a0:	f000 8099 	beq.w	f6d6 <_ZN22FlapperValveController18ResetValvePositionEv+0x152>
	{
		
		localSetpoint=currentMaximum;
    f5a4:	687b      	ldr	r3, [r7, #4]
    f5a6:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    f5aa:	73bb      	strb	r3, [r7, #14]
		
		fv->SetEnable(false);
    f5ac:	687b      	ldr	r3, [r7, #4]
    f5ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f5b0:	2100      	movs	r1, #0
    f5b2:	4618      	mov	r0, r3
    f5b4:	4b4c      	ldr	r3, [pc, #304]	; (f6e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
    f5b6:	4798      	blx	r3
		fv->SetInvalidPosition(false);
    f5b8:	687b      	ldr	r3, [r7, #4]
    f5ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f5bc:	2100      	movs	r1, #0
    f5be:	4618      	mov	r0, r3
    f5c0:	4b4a      	ldr	r3, [pc, #296]	; (f6ec <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
    f5c2:	4798      	blx	r3
		fv->ClearMoveFault(false);
    f5c4:	687b      	ldr	r3, [r7, #4]
    f5c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f5c8:	2100      	movs	r1, #0
    f5ca:	4618      	mov	r0, r3
    f5cc:	4b48      	ldr	r3, [pc, #288]	; (f6f0 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
    f5ce:	4798      	blx	r3
		delay_ms(100);
    f5d0:	2064      	movs	r0, #100	; 0x64
    f5d2:	4b48      	ldr	r3, [pc, #288]	; (f6f4 <_ZN22FlapperValveController18ResetValvePositionEv+0x170>)
    f5d4:	4798      	blx	r3
		if (fv->ReadActualPosition()>localSetpoint)
    f5d6:	687b      	ldr	r3, [r7, #4]
    f5d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f5da:	4618      	mov	r0, r3
    f5dc:	4b46      	ldr	r3, [pc, #280]	; (f6f8 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    f5de:	4798      	blx	r3
    f5e0:	4603      	mov	r3, r0
    f5e2:	461a      	mov	r2, r3
    f5e4:	7bbb      	ldrb	r3, [r7, #14]
    f5e6:	429a      	cmp	r2, r3
    f5e8:	bfcc      	ite	gt
    f5ea:	2301      	movgt	r3, #1
    f5ec:	2300      	movle	r3, #0
    f5ee:	b2db      	uxtb	r3, r3
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	d006      	beq.n	f602 <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			fv->SetDirection(true);
    f5f4:	687b      	ldr	r3, [r7, #4]
    f5f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f5f8:	2101      	movs	r1, #1
    f5fa:	4618      	mov	r0, r3
    f5fc:	4b3f      	ldr	r3, [pc, #252]	; (f6fc <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
    f5fe:	4798      	blx	r3
    f600:	e005      	b.n	f60e <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			fv->SetDirection(false);
    f602:	687b      	ldr	r3, [r7, #4]
    f604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f606:	2100      	movs	r1, #0
    f608:	4618      	mov	r0, r3
    f60a:	4b3c      	ldr	r3, [pc, #240]	; (f6fc <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
    f60c:	4798      	blx	r3
		}
		fv->SetInvalidPosition(true);
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f612:	2101      	movs	r1, #1
    f614:	4618      	mov	r0, r3
    f616:	4b35      	ldr	r3, [pc, #212]	; (f6ec <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
    f618:	4798      	blx	r3
		fv->ClearMoveFault(true);
    f61a:	687b      	ldr	r3, [r7, #4]
    f61c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f61e:	2101      	movs	r1, #1
    f620:	4618      	mov	r0, r3
    f622:	4b33      	ldr	r3, [pc, #204]	; (f6f0 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
    f624:	4798      	blx	r3
		fv->WriteSetpoint(localSetpoint);
    f626:	687b      	ldr	r3, [r7, #4]
    f628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f62a:	7bba      	ldrb	r2, [r7, #14]
    f62c:	4611      	mov	r1, r2
    f62e:	4618      	mov	r0, r3
    f630:	4b33      	ldr	r3, [pc, #204]	; (f700 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    f632:	4798      	blx	r3
		

		currentPosition=fv->ReadActualPosition();
    f634:	687b      	ldr	r3, [r7, #4]
    f636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f638:	4618      	mov	r0, r3
    f63a:	4b2f      	ldr	r3, [pc, #188]	; (f6f8 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    f63c:	4798      	blx	r3
    f63e:	4603      	mov	r3, r0
    f640:	461a      	mov	r2, r3
    f642:	687b      	ldr	r3, [r7, #4]
    f644:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		
		resetTimeout=false;
    f648:	687b      	ldr	r3, [r7, #4]
    f64a:	2200      	movs	r2, #0
    f64c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
		hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValveTimeout),1000);
    f650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f654:	492b      	ldr	r1, [pc, #172]	; (f704 <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    f656:	482c      	ldr	r0, [pc, #176]	; (f708 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    f658:	4b2c      	ldr	r3, [pc, #176]	; (f70c <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
    f65a:	4798      	blx	r3
		
		fv->SetEnable(true);
    f65c:	687b      	ldr	r3, [r7, #4]
    f65e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f660:	2101      	movs	r1, #1
    f662:	4618      	mov	r0, r3
    f664:	4b20      	ldr	r3, [pc, #128]	; (f6e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
    f666:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    f668:	687b      	ldr	r3, [r7, #4]
    f66a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f66e:	461a      	mov	r2, r3
    f670:	7bbb      	ldrb	r3, [r7, #14]
    f672:	1ad3      	subs	r3, r2, r3
    f674:	2b00      	cmp	r3, #0
    f676:	bfb8      	it	lt
    f678:	425b      	neglt	r3, r3
    f67a:	2b06      	cmp	r3, #6
    f67c:	bfcc      	ite	gt
    f67e:	2301      	movgt	r3, #1
    f680:	2300      	movle	r3, #0
    f682:	b2db      	uxtb	r3, r3
    f684:	461a      	mov	r2, r3
    f686:	687b      	ldr	r3, [r7, #4]
    f688:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    f68c:	b2db      	uxtb	r3, r3
    f68e:	f083 0301 	eor.w	r3, r3, #1
    f692:	b2db      	uxtb	r3, r3
    f694:	4013      	ands	r3, r2
    f696:	2b00      	cmp	r3, #0
    f698:	bf14      	ite	ne
    f69a:	2301      	movne	r3, #1
    f69c:	2300      	moveq	r3, #0
    f69e:	b2db      	uxtb	r3, r3
    f6a0:	2b00      	cmp	r3, #0
    f6a2:	d00d      	beq.n	f6c0 <_ZN22FlapperValveController18ResetValvePositionEv+0x13c>

		{
			gpio_toggle_pin_level(LED0);
    f6a4:	2052      	movs	r0, #82	; 0x52
    f6a6:	4b1a      	ldr	r3, [pc, #104]	; (f710 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    f6a8:	4798      	blx	r3
			currentPosition=fv->ReadActualPosition();
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f6ae:	4618      	mov	r0, r3
    f6b0:	4b11      	ldr	r3, [pc, #68]	; (f6f8 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    f6b2:	4798      	blx	r3
    f6b4:	4603      	mov	r3, r0
    f6b6:	461a      	mov	r2, r3
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    f6be:	e7d3      	b.n	f668 <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>

		}
		fv->SetEnable(false);
    f6c0:	687b      	ldr	r3, [r7, #4]
    f6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f6c4:	2100      	movs	r1, #0
    f6c6:	4618      	mov	r0, r3
    f6c8:	4b07      	ldr	r3, [pc, #28]	; (f6e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
    f6ca:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
    f6cc:	7bfb      	ldrb	r3, [r7, #15]
    f6ce:	4619      	mov	r1, r3
    f6d0:	2052      	movs	r0, #82	; 0x52
    f6d2:	4b10      	ldr	r3, [pc, #64]	; (f714 <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    f6d4:	4798      	blx	r3
	} 
	else
	{
	}
}
    f6d6:	bf00      	nop
    f6d8:	3710      	adds	r7, #16
    f6da:	46bd      	mov	sp, r7
    f6dc:	bd80      	pop	{r7, pc}
    f6de:	bf00      	nop
    f6e0:	0000ee89 	.word	0x0000ee89
    f6e4:	0000f141 	.word	0x0000f141
    f6e8:	0000ff49 	.word	0x0000ff49
    f6ec:	000100b9 	.word	0x000100b9
    f6f0:	00010041 	.word	0x00010041
    f6f4:	000027b9 	.word	0x000027b9
    f6f8:	00010169 	.word	0x00010169
    f6fc:	0000ffc9 	.word	0x0000ffc9
    f700:	00010131 	.word	0x00010131
    f704:	0000ef05 	.word	0x0000ef05
    f708:	20000f50 	.word	0x20000f50
    f70c:	0000da75 	.word	0x0000da75
    f710:	0000ee59 	.word	0x0000ee59
    f714:	0000ee21 	.word	0x0000ee21

0000f718 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
    f718:	b580      	push	{r7, lr}
    f71a:	b082      	sub	sp, #8
    f71c:	af00      	add	r7, sp, #0
    f71e:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
    f720:	687b      	ldr	r3, [r7, #4]
    f722:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    f726:	2b00      	cmp	r3, #0
    f728:	d014      	beq.n	f754 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
    f72a:	687b      	ldr	r3, [r7, #4]
    f72c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
    f730:	2b00      	cmp	r3, #0
    f732:	d003      	beq.n	f73c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
    f734:	6878      	ldr	r0, [r7, #4]
    f736:	4b0e      	ldr	r3, [pc, #56]	; (f770 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
    f738:	4798      	blx	r3
    f73a:	e013      	b.n	f764 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f73c:	687b      	ldr	r3, [r7, #4]
    f73e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
    f742:	4619      	mov	r1, r3
    f744:	6878      	ldr	r0, [r7, #4]
    f746:	4b0b      	ldr	r3, [pc, #44]	; (f774 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f748:	4798      	blx	r3
			NBC_Activated=false;
    f74a:	687b      	ldr	r3, [r7, #4]
    f74c:	2200      	movs	r2, #0
    f74e:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    f752:	e007      	b.n	f764 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
    f754:	21ff      	movs	r1, #255	; 0xff
    f756:	6878      	ldr	r0, [r7, #4]
    f758:	4b06      	ldr	r3, [pc, #24]	; (f774 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f75a:	4798      	blx	r3
			NBC_Activated=true;
    f75c:	687b      	ldr	r3, [r7, #4]
    f75e:	2201      	movs	r2, #1
    f760:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	}

	return 0;
    f764:	2300      	movs	r3, #0
	
}
    f766:	4618      	mov	r0, r3
    f768:	3708      	adds	r7, #8
    f76a:	46bd      	mov	sp, r7
    f76c:	bd80      	pop	{r7, pc}
    f76e:	bf00      	nop
    f770:	0000f311 	.word	0x0000f311
    f774:	0000f9a9 	.word	0x0000f9a9

0000f778 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    f778:	b480      	push	{r7}
    f77a:	b083      	sub	sp, #12
    f77c:	af00      	add	r7, sp, #0
    f77e:	6078      	str	r0, [r7, #4]
	NBC_Mode=(dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1]);
    f780:	687b      	ldr	r3, [r7, #4]
    f782:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    f786:	461a      	mov	r2, r3
    f788:	687b      	ldr	r3, [r7, #4]
    f78a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
    f78e:	4013      	ands	r3, r2
    f790:	2b00      	cmp	r3, #0
    f792:	bf14      	ite	ne
    f794:	2301      	movne	r3, #1
    f796:	2300      	moveq	r3, #0
    f798:	b2da      	uxtb	r2, r3
    f79a:	687b      	ldr	r3, [r7, #4]
    f79c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
	currentMaximum=255;
    f7a0:	687b      	ldr	r3, [r7, #4]
    f7a2:	22ff      	movs	r2, #255	; 0xff
    f7a4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	return NBC_Mode;
    f7a8:	687b      	ldr	r3, [r7, #4]
    f7aa:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
}
    f7ae:	4618      	mov	r0, r3
    f7b0:	370c      	adds	r7, #12
    f7b2:	46bd      	mov	sp, r7
    f7b4:	bc80      	pop	{r7}
    f7b6:	4770      	bx	lr

0000f7b8 <_ZN22FlapperValveController9StopMotorEv>:


uint8_t	FlapperValveController::StopMotor(){
    f7b8:	b580      	push	{r7, lr}
    f7ba:	b082      	sub	sp, #8
    f7bc:	af00      	add	r7, sp, #0
    f7be:	6078      	str	r0, [r7, #4]
	fv->SetEnable(false);
    f7c0:	687b      	ldr	r3, [r7, #4]
    f7c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f7c4:	2100      	movs	r1, #0
    f7c6:	4618      	mov	r0, r3
    f7c8:	4b05      	ldr	r3, [pc, #20]	; (f7e0 <_ZN22FlapperValveController9StopMotorEv+0x28>)
    f7ca:	4798      	blx	r3
	flapperValveIsMoving=false;
    f7cc:	687b      	ldr	r3, [r7, #4]
    f7ce:	2200      	movs	r2, #0
    f7d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
    f7d4:	2300      	movs	r3, #0
}
    f7d6:	4618      	mov	r0, r3
    f7d8:	3708      	adds	r7, #8
    f7da:	46bd      	mov	sp, r7
    f7dc:	bd80      	pop	{r7, pc}
    f7de:	bf00      	nop
    f7e0:	0000ff49 	.word	0x0000ff49

0000f7e4 <_ZN22FlapperValveController16StopValveAtLimitEv>:
void	FlapperValveController::StopValveAtLimit(void){
    f7e4:	b580      	push	{r7, lr}
    f7e6:	b082      	sub	sp, #8
    f7e8:	af00      	add	r7, sp, #0
    f7ea:	6078      	str	r0, [r7, #4]
		if (closing)
    f7ec:	687b      	ldr	r3, [r7, #4]
    f7ee:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	d003      	beq.n	f7fe <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
    f7f6:	687b      	ldr	r3, [r7, #4]
    f7f8:	2200      	movs	r2, #0
    f7fa:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
	
		StopMotor();
    f7fe:	6878      	ldr	r0, [r7, #4]
    f800:	4b10      	ldr	r3, [pc, #64]	; (f844 <_ZN22FlapperValveController16StopValveAtLimitEv+0x60>)
    f802:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f804:	4910      	ldr	r1, [pc, #64]	; (f848 <_ZN22FlapperValveController16StopValveAtLimitEv+0x64>)
    f806:	4811      	ldr	r0, [pc, #68]	; (f84c <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
    f808:	4b11      	ldr	r3, [pc, #68]	; (f850 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
    f80a:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveFullyClossed));
    f80c:	4911      	ldr	r1, [pc, #68]	; (f854 <_ZN22FlapperValveController16StopValveAtLimitEv+0x70>)
    f80e:	480f      	ldr	r0, [pc, #60]	; (f84c <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
    f810:	4b0f      	ldr	r3, [pc, #60]	; (f850 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
    f812:	4798      	blx	r3
		timeoutFlapperValveController=false;
    f814:	687b      	ldr	r3, [r7, #4]
    f816:	2200      	movs	r2, #0
    f818:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    f81c:	687b      	ldr	r3, [r7, #4]
    f81e:	2200      	movs	r2, #0
    f820:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
    f824:	687b      	ldr	r3, [r7, #4]
    f826:	2200      	movs	r2, #0
    f828:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		paused=false;
    f82c:	687b      	ldr	r3, [r7, #4]
    f82e:	2200      	movs	r2, #0
    f830:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		keepControlling=false;
    f834:	687b      	ldr	r3, [r7, #4]
    f836:	2200      	movs	r2, #0
    f838:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
    f83c:	bf00      	nop
    f83e:	3708      	adds	r7, #8
    f840:	46bd      	mov	sp, r7
    f842:	bd80      	pop	{r7, pc}
    f844:	0000f7b9 	.word	0x0000f7b9
    f848:	0000eec5 	.word	0x0000eec5
    f84c:	20000f50 	.word	0x20000f50
    f850:	0000da1d 	.word	0x0000da1d
    f854:	0000eee5 	.word	0x0000eee5

0000f858 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
    f858:	b580      	push	{r7, lr}
    f85a:	b082      	sub	sp, #8
    f85c:	af00      	add	r7, sp, #0
    f85e:	6078      	str	r0, [r7, #4]
		StopMotor();
    f860:	6878      	ldr	r0, [r7, #4]
    f862:	4b0d      	ldr	r3, [pc, #52]	; (f898 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
    f864:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f866:	490d      	ldr	r1, [pc, #52]	; (f89c <_ZN22FlapperValveController18StopValveinBetweenEv+0x44>)
    f868:	480d      	ldr	r0, [pc, #52]	; (f8a0 <_ZN22FlapperValveController18StopValveinBetweenEv+0x48>)
    f86a:	4b0e      	ldr	r3, [pc, #56]	; (f8a4 <_ZN22FlapperValveController18StopValveinBetweenEv+0x4c>)
    f86c:	4798      	blx	r3
		timeoutFlapperValveController=false;
    f86e:	687b      	ldr	r3, [r7, #4]
    f870:	2200      	movs	r2, #0
    f872:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
    f876:	687b      	ldr	r3, [r7, #4]
    f878:	2200      	movs	r2, #0
    f87a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		timeoutKeepControlling=false;
    f87e:	687b      	ldr	r3, [r7, #4]
    f880:	2200      	movs	r2, #0
    f882:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
    f886:	687b      	ldr	r3, [r7, #4]
    f888:	2201      	movs	r2, #1
    f88a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
}
    f88e:	bf00      	nop
    f890:	3708      	adds	r7, #8
    f892:	46bd      	mov	sp, r7
    f894:	bd80      	pop	{r7, pc}
    f896:	bf00      	nop
    f898:	0000f7b9 	.word	0x0000f7b9
    f89c:	0000eec5 	.word	0x0000eec5
    f8a0:	20000f50 	.word	0x20000f50
    f8a4:	0000da1d 	.word	0x0000da1d

0000f8a8 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
    f8a8:	b580      	push	{r7, lr}
    f8aa:	b084      	sub	sp, #16
    f8ac:	af00      	add	r7, sp, #0
    f8ae:	6078      	str	r0, [r7, #4]
    f8b0:	460b      	mov	r3, r1
    f8b2:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
    f8b4:	78fb      	ldrb	r3, [r7, #3]
    f8b6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    f8ba:	2b00      	cmp	r3, #0
    f8bc:	dd0c      	ble.n	f8d8 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
    f8be:	78fb      	ldrb	r3, [r7, #3]
    f8c0:	43db      	mvns	r3, r3
    f8c2:	009b      	lsls	r3, r3, #2
    f8c4:	2b00      	cmp	r3, #0
    f8c6:	da00      	bge.n	f8ca <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
    f8c8:	33ff      	adds	r3, #255	; 0xff
    f8ca:	121b      	asrs	r3, r3, #8
    f8cc:	461a      	mov	r2, r3
    f8ce:	4b10      	ldr	r3, [pc, #64]	; (f910 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    f8d0:	4610      	mov	r0, r2
    f8d2:	4798      	blx	r3
    f8d4:	4603      	mov	r3, r0
    f8d6:	e00b      	b.n	f8f0 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
    f8d8:	78fb      	ldrb	r3, [r7, #3]
    f8da:	3bff      	subs	r3, #255	; 0xff
    f8dc:	009b      	lsls	r3, r3, #2
    f8de:	2b00      	cmp	r3, #0
    f8e0:	da00      	bge.n	f8e4 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
    f8e2:	33ff      	adds	r3, #255	; 0xff
    f8e4:	121b      	asrs	r3, r3, #8
    f8e6:	461a      	mov	r2, r3
    f8e8:	4b09      	ldr	r3, [pc, #36]	; (f910 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    f8ea:	4610      	mov	r0, r2
    f8ec:	4798      	blx	r3
    f8ee:	4603      	mov	r3, r0
    f8f0:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
    f8f2:	4b08      	ldr	r3, [pc, #32]	; (f914 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
    f8f4:	68f8      	ldr	r0, [r7, #12]
    f8f6:	4798      	blx	r3
    f8f8:	4603      	mov	r3, r0
    f8fa:	b2da      	uxtb	r2, r3
    f8fc:	687b      	ldr	r3, [r7, #4]
    f8fe:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	return tolerance;
    f902:	687b      	ldr	r3, [r7, #4]
    f904:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
}
    f908:	4618      	mov	r0, r3
    f90a:	3710      	adds	r7, #16
    f90c:	46bd      	mov	sp, r7
    f90e:	bd80      	pop	{r7, pc}
    f910:	0001284d 	.word	0x0001284d
    f914:	00012b95 	.word	0x00012b95

0000f918 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    f918:	b580      	push	{r7, lr}
    f91a:	b082      	sub	sp, #8
    f91c:	af00      	add	r7, sp, #0
    f91e:	6078      	str	r0, [r7, #4]
	if (fv->controlOutputs.niAlcFvMotorEnable)
    f920:	687b      	ldr	r3, [r7, #4]
    f922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    f928:	2b00      	cmp	r3, #0
    f92a:	d008      	beq.n	f93e <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		fv->SetEnable(false);
    f92c:	687b      	ldr	r3, [r7, #4]
    f92e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f930:	2100      	movs	r1, #0
    f932:	4618      	mov	r0, r3
    f934:	4b09      	ldr	r3, [pc, #36]	; (f95c <_ZN22FlapperValveController10StartMotorEv+0x44>)
    f936:	4798      	blx	r3
		delay_ms(10);
    f938:	200a      	movs	r0, #10
    f93a:	4b09      	ldr	r3, [pc, #36]	; (f960 <_ZN22FlapperValveController10StartMotorEv+0x48>)
    f93c:	4798      	blx	r3
	}
	
		
	fv->SetEnable(true);
    f93e:	687b      	ldr	r3, [r7, #4]
    f940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    f942:	2101      	movs	r1, #1
    f944:	4618      	mov	r0, r3
    f946:	4b05      	ldr	r3, [pc, #20]	; (f95c <_ZN22FlapperValveController10StartMotorEv+0x44>)
    f948:	4798      	blx	r3
	flapperValveIsMoving=true;
    f94a:	687b      	ldr	r3, [r7, #4]
    f94c:	2201      	movs	r2, #1
    f94e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
    f952:	2300      	movs	r3, #0
}
    f954:	4618      	mov	r0, r3
    f956:	3708      	adds	r7, #8
    f958:	46bd      	mov	sp, r7
    f95a:	bd80      	pop	{r7, pc}
    f95c:	0000ff49 	.word	0x0000ff49
    f960:	000027b9 	.word	0x000027b9

0000f964 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
    f964:	b580      	push	{r7, lr}
    f966:	b082      	sub	sp, #8
    f968:	af00      	add	r7, sp, #0
    f96a:	6078      	str	r0, [r7, #4]
	StopMotor();
    f96c:	6878      	ldr	r0, [r7, #4]
    f96e:	4b0d      	ldr	r3, [pc, #52]	; (f9a4 <_ZN22FlapperValveController15StopControllingEv+0x40>)
    f970:	4798      	blx	r3
	timeoutKeepControlling=false;
    f972:	687b      	ldr	r3, [r7, #4]
    f974:	2200      	movs	r2, #0
    f976:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
    f97a:	687b      	ldr	r3, [r7, #4]
    f97c:	2200      	movs	r2, #0
    f97e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
    f982:	687b      	ldr	r3, [r7, #4]
    f984:	2200      	movs	r2, #0
    f986:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	keepControlling=false;
    f98a:	687b      	ldr	r3, [r7, #4]
    f98c:	2200      	movs	r2, #0
    f98e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	controllerEnabled=false;
    f992:	687b      	ldr	r3, [r7, #4]
    f994:	2200      	movs	r2, #0
    f996:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
    f99a:	2300      	movs	r3, #0
}
    f99c:	4618      	mov	r0, r3
    f99e:	3708      	adds	r7, #8
    f9a0:	46bd      	mov	sp, r7
    f9a2:	bd80      	pop	{r7, pc}
    f9a4:	0000f7b9 	.word	0x0000f7b9

0000f9a8 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    f9a8:	b580      	push	{r7, lr}
    f9aa:	b082      	sub	sp, #8
    f9ac:	af00      	add	r7, sp, #0
    f9ae:	6078      	str	r0, [r7, #4]
    f9b0:	460b      	mov	r3, r1
    f9b2:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    f9b4:	78fb      	ldrb	r3, [r7, #3]
    f9b6:	4619      	mov	r1, r3
    f9b8:	6878      	ldr	r0, [r7, #4]
    f9ba:	4b25      	ldr	r3, [pc, #148]	; (fa50 <_ZN22FlapperValveController16StartControllingEh+0xa8>)
    f9bc:	4798      	blx	r3
    f9be:	4603      	mov	r3, r0
    f9c0:	461a      	mov	r2, r3
    f9c2:	687b      	ldr	r3, [r7, #4]
    f9c4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		CorrectTolerance(setpoint);
    f9c8:	687b      	ldr	r3, [r7, #4]
    f9ca:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f9ce:	4619      	mov	r1, r3
    f9d0:	6878      	ldr	r0, [r7, #4]
    f9d2:	4b20      	ldr	r3, [pc, #128]	; (fa54 <_ZN22FlapperValveController16StartControllingEh+0xac>)
    f9d4:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    f9d6:	687b      	ldr	r3, [r7, #4]
    f9d8:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
    f9dc:	4b1e      	ldr	r3, [pc, #120]	; (fa58 <_ZN22FlapperValveController16StartControllingEh+0xb0>)
    f9de:	4610      	mov	r0, r2
    f9e0:	4798      	blx	r3
    f9e2:	4602      	mov	r2, r0
    f9e4:	687b      	ldr	r3, [r7, #4]
    f9e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		timeoutFlapperValveController=false;
    f9ea:	687b      	ldr	r3, [r7, #4]
    f9ec:	2200      	movs	r2, #0
    f9ee:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    f9f2:	687b      	ldr	r3, [r7, #4]
    f9f4:	2200      	movs	r2, #0
    f9f6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
    f9fa:	687b      	ldr	r3, [r7, #4]
    f9fc:	2200      	movs	r2, #0
    f9fe:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		controllerEnabled=true;
    fa02:	687b      	ldr	r3, [r7, #4]
    fa04:	2201      	movs	r2, #1
    fa06:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
    fa0a:	687b      	ldr	r3, [r7, #4]
    fa0c:	2200      	movs	r2, #0
    fa0e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_UNLOCK_TIMEOUT);
    fa12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    fa16:	4911      	ldr	r1, [pc, #68]	; (fa5c <_ZN22FlapperValveController16StartControllingEh+0xb4>)
    fa18:	4811      	ldr	r0, [pc, #68]	; (fa60 <_ZN22FlapperValveController16StartControllingEh+0xb8>)
    fa1a:	4b12      	ldr	r3, [pc, #72]	; (fa64 <_ZN22FlapperValveController16StartControllingEh+0xbc>)
    fa1c:	4798      	blx	r3
		isControlling=true;
    fa1e:	687b      	ldr	r3, [r7, #4]
    fa20:	2201      	movs	r2, #1
    fa22:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
		StartMovingOnDirection();
    fa26:	6878      	ldr	r0, [r7, #4]
    fa28:	4b0f      	ldr	r3, [pc, #60]	; (fa68 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    fa2a:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    fa2c:	6878      	ldr	r0, [r7, #4]
    fa2e:	4b0f      	ldr	r3, [pc, #60]	; (fa6c <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    fa30:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    fa32:	687b      	ldr	r3, [r7, #4]
    fa34:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    fa38:	b2db      	uxtb	r3, r3
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	d003      	beq.n	fa46 <_ZN22FlapperValveController16StartControllingEh+0x9e>
		{
			paused=true;
    fa3e:	687b      	ldr	r3, [r7, #4]
    fa40:	2201      	movs	r2, #1
    fa42:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		}
		return 0;
    fa46:	2300      	movs	r3, #0
	
}
    fa48:	4618      	mov	r0, r3
    fa4a:	3708      	adds	r7, #8
    fa4c:	46bd      	mov	sp, r7
    fa4e:	bd80      	pop	{r7, pc}
    fa50:	0000fa71 	.word	0x0000fa71
    fa54:	0000f8a9 	.word	0x0000f8a9
    fa58:	00012845 	.word	0x00012845
    fa5c:	0000eec5 	.word	0x0000eec5
    fa60:	20000f50 	.word	0x20000f50
    fa64:	0000da75 	.word	0x0000da75
    fa68:	0000f06d 	.word	0x0000f06d
    fa6c:	0000f311 	.word	0x0000f311

0000fa70 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    fa70:	b580      	push	{r7, lr}
    fa72:	b082      	sub	sp, #8
    fa74:	af00      	add	r7, sp, #0
    fa76:	6078      	str	r0, [r7, #4]
    fa78:	460b      	mov	r3, r1
    fa7a:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
    fa7c:	6878      	ldr	r0, [r7, #4]
    fa7e:	4b2a      	ldr	r3, [pc, #168]	; (fb28 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
    fa80:	4798      	blx	r3
    fa82:	4603      	mov	r3, r0
    fa84:	2b00      	cmp	r3, #0
    fa86:	d004      	beq.n	fa92 <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    fa88:	687b      	ldr	r3, [r7, #4]
    fa8a:	78fa      	ldrb	r2, [r7, #3]
    fa8c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    fa90:	e043      	b.n	fb1a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
    fa92:	687b      	ldr	r3, [r7, #4]
    fa94:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d01f      	beq.n	fadc <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    fa9c:	687b      	ldr	r3, [r7, #4]
    fa9e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
    faa2:	43db      	mvns	r3, r3
    faa4:	b2da      	uxtb	r2, r3
    faa6:	687b      	ldr	r3, [r7, #4]
    faa8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			if (sp>(standAlonePosition))
    faac:	78fb      	ldrb	r3, [r7, #3]
    faae:	687a      	ldr	r2, [r7, #4]
    fab0:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    fab4:	4293      	cmp	r3, r2
    fab6:	dd0c      	ble.n	fad2 <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
    fab8:	687b      	ldr	r3, [r7, #4]
    faba:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    fabe:	687b      	ldr	r3, [r7, #4]
    fac0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
				currentMaximum=standAlonePosition;
    fac4:	687b      	ldr	r3, [r7, #4]
    fac6:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    faca:	687b      	ldr	r3, [r7, #4]
    facc:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
    fad0:	e023      	b.n	fb1a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    fad2:	687b      	ldr	r3, [r7, #4]
    fad4:	78fa      	ldrb	r2, [r7, #3]
    fad6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    fada:	e01e      	b.n	fb1a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
    fadc:	687b      	ldr	r3, [r7, #4]
    fade:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    fae2:	43db      	mvns	r3, r3
    fae4:	b2da      	uxtb	r2, r3
    fae6:	687b      	ldr	r3, [r7, #4]
    fae8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			if (sp>maximumPosition)
    faec:	78fb      	ldrb	r3, [r7, #3]
    faee:	687a      	ldr	r2, [r7, #4]
    faf0:	f892 20b8 	ldrb.w	r2, [r2, #184]	; 0xb8
    faf4:	4293      	cmp	r3, r2
    faf6:	dd0c      	ble.n	fb12 <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
    faf8:	687b      	ldr	r3, [r7, #4]
    fafa:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    fafe:	687b      	ldr	r3, [r7, #4]
    fb00:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
				currentMaximum=maximumPosition;
    fb04:	687b      	ldr	r3, [r7, #4]
    fb06:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    fb0a:	687b      	ldr	r3, [r7, #4]
    fb0c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
    fb10:	e003      	b.n	fb1a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    fb12:	687b      	ldr	r3, [r7, #4]
    fb14:	78fa      	ldrb	r2, [r7, #3]
    fb16:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
			}
		}
	}
	
	return setpoint;
    fb1a:	687b      	ldr	r3, [r7, #4]
    fb1c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
	
}
    fb20:	4618      	mov	r0, r3
    fb22:	3708      	adds	r7, #8
    fb24:	46bd      	mov	sp, r7
    fb26:	bd80      	pop	{r7, pc}
    fb28:	0000f779 	.word	0x0000f779

0000fb2c <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=fv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
    fb2c:	b580      	push	{r7, lr}
    fb2e:	b082      	sub	sp, #8
    fb30:	af00      	add	r7, sp, #0
    fb32:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
    fb34:	687b      	ldr	r3, [r7, #4]
    fb36:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    fb3a:	4619      	mov	r1, r3
    fb3c:	6878      	ldr	r0, [r7, #4]
    fb3e:	4b03      	ldr	r3, [pc, #12]	; (fb4c <_ZN22FlapperValveController16StartControllingEv+0x20>)
    fb40:	4798      	blx	r3
    fb42:	4603      	mov	r3, r0
	
}
    fb44:	4618      	mov	r0, r3
    fb46:	3708      	adds	r7, #8
    fb48:	46bd      	mov	sp, r7
    fb4a:	bd80      	pop	{r7, pc}
    fb4c:	0000f9a9 	.word	0x0000f9a9

0000fb50 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
    fb50:	b580      	push	{r7, lr}
    fb52:	b082      	sub	sp, #8
    fb54:	af00      	add	r7, sp, #0
    fb56:	6078      	str	r0, [r7, #4]
    fb58:	460b      	mov	r3, r1
    fb5a:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
    fb5c:	687b      	ldr	r3, [r7, #4]
    fb5e:	2200      	movs	r2, #0
    fb60:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
    fb64:	687b      	ldr	r3, [r7, #4]
    fb66:	2201      	movs	r2, #1
    fb68:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
		StartMovingOnDirection();
    fb6c:	6878      	ldr	r0, [r7, #4]
    fb6e:	4b05      	ldr	r3, [pc, #20]	; (fb84 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
    fb70:	4798      	blx	r3
		keepControlling=false;
    fb72:	687b      	ldr	r3, [r7, #4]
    fb74:	2200      	movs	r2, #0
    fb76:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	return 0;
    fb7a:	2300      	movs	r3, #0
	
}
    fb7c:	4618      	mov	r0, r3
    fb7e:	3708      	adds	r7, #8
    fb80:	46bd      	mov	sp, r7
    fb82:	bd80      	pop	{r7, pc}
    fb84:	0000f06d 	.word	0x0000f06d

0000fb88 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
    fb88:	b590      	push	{r4, r7, lr}
    fb8a:	b085      	sub	sp, #20
    fb8c:	af00      	add	r7, sp, #0
    fb8e:	60f8      	str	r0, [r7, #12]
	currentPosition=fv->ReadActualPosition();
    fb90:	68fb      	ldr	r3, [r7, #12]
    fb92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    fb94:	4618      	mov	r0, r3
    fb96:	4b2f      	ldr	r3, [pc, #188]	; (fc54 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xcc>)
    fb98:	4798      	blx	r3
    fb9a:	4603      	mov	r3, r0
    fb9c:	461a      	mov	r2, r3
    fb9e:	68fb      	ldr	r3, [r7, #12]
    fba0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.actualPosition=currentPosition;
    fba4:	68fb      	ldr	r3, [r7, #12]
    fba6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
    fbaa:	68fb      	ldr	r3, [r7, #12]
    fbac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	dataStruct.setPointPosition=setpoint;
    fbb0:	68fb      	ldr	r3, [r7, #12]
    fbb2:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
    fbb6:	68fb      	ldr	r3, [r7, #12]
    fbb8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	dataStruct.inputStatus=fv->ReadStatusInputs();
    fbbc:	68fb      	ldr	r3, [r7, #12]
    fbbe:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    fbc0:	68fc      	ldr	r4, [r7, #12]
    fbc2:	463b      	mov	r3, r7
    fbc4:	4611      	mov	r1, r2
    fbc6:	4618      	mov	r0, r3
    fbc8:	4b23      	ldr	r3, [pc, #140]	; (fc58 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd0>)
    fbca:	4798      	blx	r3
    fbcc:	f104 037c 	add.w	r3, r4, #124	; 0x7c
    fbd0:	463a      	mov	r2, r7
    fbd2:	6810      	ldr	r0, [r2, #0]
    fbd4:	6018      	str	r0, [r3, #0]
    fbd6:	8892      	ldrh	r2, [r2, #4]
    fbd8:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=fv->ReadControlStatus();
    fbda:	68fb      	ldr	r3, [r7, #12]
    fbdc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    fbde:	68fc      	ldr	r4, [r7, #12]
    fbe0:	463b      	mov	r3, r7
    fbe2:	4611      	mov	r1, r2
    fbe4:	4618      	mov	r0, r3
    fbe6:	4b1d      	ldr	r3, [pc, #116]	; (fc5c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd4>)
    fbe8:	4798      	blx	r3
    fbea:	f104 0382 	add.w	r3, r4, #130	; 0x82
    fbee:	463a      	mov	r2, r7
    fbf0:	6811      	ldr	r1, [r2, #0]
    fbf2:	6852      	ldr	r2, [r2, #4]
    fbf4:	6019      	str	r1, [r3, #0]
    fbf6:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
    fbf8:	68fb      	ldr	r3, [r7, #12]
    fbfa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fbfe:	b2da      	uxtb	r2, r3
    fc00:	68fb      	ldr	r3, [r7, #12]
    fc02:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	dataStruct.controllerStatus.isControlling=isControlling;
    fc06:	68fb      	ldr	r3, [r7, #12]
    fc08:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
    fc0c:	68fb      	ldr	r3, [r7, #12]
    fc0e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
    fc12:	68fb      	ldr	r3, [r7, #12]
    fc14:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
    fc18:	68fb      	ldr	r3, [r7, #12]
    fc1a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	if (standAloneActivated)
    fc1e:	68fb      	ldr	r3, [r7, #12]
    fc20:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    fc24:	2b00      	cmp	r3, #0
    fc26:	d008      	beq.n	fc3a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    fc28:	68fb      	ldr	r3, [r7, #12]
    fc2a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
    fc2e:	43db      	mvns	r3, r3
    fc30:	b2da      	uxtb	r2, r3
    fc32:	68fb      	ldr	r3, [r7, #12]
    fc34:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
	}
}
    fc38:	e007      	b.n	fc4a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
    fc3a:	68fb      	ldr	r3, [r7, #12]
    fc3c:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
    fc40:	43db      	mvns	r3, r3
    fc42:	b2da      	uxtb	r2, r3
    fc44:	68fb      	ldr	r3, [r7, #12]
    fc46:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
}
    fc4a:	bf00      	nop
    fc4c:	3714      	adds	r7, #20
    fc4e:	46bd      	mov	sp, r7
    fc50:	bd90      	pop	{r4, r7, pc}
    fc52:	bf00      	nop
    fc54:	00010169 	.word	0x00010169
    fc58:	0000feed 	.word	0x0000feed
    fc5c:	0000fe91 	.word	0x0000fe91

0000fc60 <_Z41__static_initialization_and_destruction_0ii>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return fv->ReadActualPosition();
}

    fc60:	b580      	push	{r7, lr}
    fc62:	b082      	sub	sp, #8
    fc64:	af00      	add	r7, sp, #0
    fc66:	6078      	str	r0, [r7, #4]
    fc68:	6039      	str	r1, [r7, #0]
    fc6a:	687b      	ldr	r3, [r7, #4]
    fc6c:	2b01      	cmp	r3, #1
    fc6e:	d115      	bne.n	fc9c <_Z41__static_initialization_and_destruction_0ii+0x3c>
    fc70:	683b      	ldr	r3, [r7, #0]
    fc72:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fc76:	4293      	cmp	r3, r2
    fc78:	d110      	bne.n	fc9c <_Z41__static_initialization_and_destruction_0ii+0x3c>
static SingleFlapperValve_Class fvStatic(0);
    fc7a:	2100      	movs	r1, #0
    fc7c:	4809      	ldr	r0, [pc, #36]	; (fca4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fc7e:	4b0a      	ldr	r3, [pc, #40]	; (fca8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fc80:	4798      	blx	r3
    fc82:	4a0a      	ldr	r2, [pc, #40]	; (fcac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    fc84:	490a      	ldr	r1, [pc, #40]	; (fcb0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    fc86:	4807      	ldr	r0, [pc, #28]	; (fca4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fc88:	4b0a      	ldr	r3, [pc, #40]	; (fcb4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    fc8a:	4798      	blx	r3
    fc8c:	480a      	ldr	r0, [pc, #40]	; (fcb8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    fc8e:	4b0b      	ldr	r3, [pc, #44]	; (fcbc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    fc90:	4798      	blx	r3
    fc92:	4a06      	ldr	r2, [pc, #24]	; (fcac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    fc94:	490a      	ldr	r1, [pc, #40]	; (fcc0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    fc96:	4808      	ldr	r0, [pc, #32]	; (fcb8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    fc98:	4b06      	ldr	r3, [pc, #24]	; (fcb4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    fc9a:	4798      	blx	r3
    fc9c:	bf00      	nop
    fc9e:	3708      	adds	r7, #8
    fca0:	46bd      	mov	sp, r7
    fca2:	bd80      	pop	{r7, pc}
    fca4:	20001294 	.word	0x20001294
    fca8:	0000fcd9 	.word	0x0000fcd9
    fcac:	20000000 	.word	0x20000000
    fcb0:	0000fd75 	.word	0x0000fd75
    fcb4:	000126cd 	.word	0x000126cd
    fcb8:	20001308 	.word	0x20001308
    fcbc:	0000ef25 	.word	0x0000ef25
    fcc0:	0000efb9 	.word	0x0000efb9

0000fcc4 <_GLOBAL__sub_I_ptrFlapperValveController>:
    fcc4:	b580      	push	{r7, lr}
    fcc6:	af00      	add	r7, sp, #0
    fcc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fccc:	2001      	movs	r0, #1
    fcce:	4b01      	ldr	r3, [pc, #4]	; (fcd4 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
    fcd0:	4798      	blx	r3
    fcd2:	bd80      	pop	{r7, pc}
    fcd4:	0000fc61 	.word	0x0000fc61

0000fcd8 <_ZN24SingleFlapperValve_ClassC1Eh>:
static void	RegulatorTimeout(const struct timer_task *const timer_task){
	ptrSingleFlapperValveClass->regulatorTimeout=true;
	asm("nop");
}

SingleFlapperValve_Class::SingleFlapperValve_Class(uint8_t _iD)
    fcd8:	b580      	push	{r7, lr}
    fcda:	b082      	sub	sp, #8
    fcdc:	af00      	add	r7, sp, #0
    fcde:	6078      	str	r0, [r7, #4]
    fce0:	460b      	mov	r3, r1
    fce2:	70fb      	strb	r3, [r7, #3]
    fce4:	687b      	ldr	r3, [r7, #4]
    fce6:	4618      	mov	r0, r3
    fce8:	4b0c      	ldr	r3, [pc, #48]	; (fd1c <_ZN24SingleFlapperValve_ClassC1Eh+0x44>)
    fcea:	4798      	blx	r3
{	
	valveID=_iD;
    fcec:	687b      	ldr	r3, [r7, #4]
    fcee:	78fa      	ldrb	r2, [r7, #3]
    fcf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    fcf4:	687b      	ldr	r3, [r7, #4]
    fcf6:	4a0a      	ldr	r2, [pc, #40]	; (fd20 <_ZN24SingleFlapperValve_ClassC1Eh+0x48>)
    fcf8:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    fcfa:	687b      	ldr	r3, [r7, #4]
    fcfc:	2200      	movs	r2, #0
    fcfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    fd02:	4a08      	ldr	r2, [pc, #32]	; (fd24 <_ZN24SingleFlapperValve_ClassC1Eh+0x4c>)
    fd04:	687b      	ldr	r3, [r7, #4]
    fd06:	6013      	str	r3, [r2, #0]
	isOK=false;
    fd08:	687b      	ldr	r3, [r7, #4]
    fd0a:	2200      	movs	r2, #0
    fd0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    fd10:	687b      	ldr	r3, [r7, #4]
    fd12:	4618      	mov	r0, r3
    fd14:	3708      	adds	r7, #8
    fd16:	46bd      	mov	sp, r7
    fd18:	bd80      	pop	{r7, pc}
    fd1a:	bf00      	nop
    fd1c:	00010bad 	.word	0x00010bad
    fd20:	200013cc 	.word	0x200013cc
    fd24:	200013c8 	.word	0x200013c8

0000fd28 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
    fd28:	b580      	push	{r7, lr}
    fd2a:	b082      	sub	sp, #8
    fd2c:	af00      	add	r7, sp, #0
    fd2e:	6078      	str	r0, [r7, #4]
    fd30:	687b      	ldr	r3, [r7, #4]
    fd32:	4618      	mov	r0, r3
    fd34:	4b0c      	ldr	r3, [pc, #48]	; (fd68 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
    fd36:	4798      	blx	r3
{
	valveID=0;
    fd38:	687b      	ldr	r3, [r7, #4]
    fd3a:	2200      	movs	r2, #0
    fd3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    fd40:	687b      	ldr	r3, [r7, #4]
    fd42:	4a0a      	ldr	r2, [pc, #40]	; (fd6c <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
    fd44:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    fd46:	687b      	ldr	r3, [r7, #4]
    fd48:	2200      	movs	r2, #0
    fd4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    fd4e:	4a08      	ldr	r2, [pc, #32]	; (fd70 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
    fd50:	687b      	ldr	r3, [r7, #4]
    fd52:	6013      	str	r3, [r2, #0]
	isOK=false;
    fd54:	687b      	ldr	r3, [r7, #4]
    fd56:	2200      	movs	r2, #0
    fd58:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    fd5c:	687b      	ldr	r3, [r7, #4]
    fd5e:	4618      	mov	r0, r3
    fd60:	3708      	adds	r7, #8
    fd62:	46bd      	mov	sp, r7
    fd64:	bd80      	pop	{r7, pc}
    fd66:	bf00      	nop
    fd68:	00010bad 	.word	0x00010bad
    fd6c:	200013cc 	.word	0x200013cc
    fd70:	200013c8 	.word	0x200013c8

0000fd74 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
    fd74:	b580      	push	{r7, lr}
    fd76:	b082      	sub	sp, #8
    fd78:	af00      	add	r7, sp, #0
    fd7a:	6078      	str	r0, [r7, #4]
    fd7c:	687b      	ldr	r3, [r7, #4]
    fd7e:	4618      	mov	r0, r3
    fd80:	4b03      	ldr	r3, [pc, #12]	; (fd90 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
    fd82:	4798      	blx	r3
{
} //~FlapperValve_Class
    fd84:	687b      	ldr	r3, [r7, #4]
    fd86:	4618      	mov	r0, r3
    fd88:	3708      	adds	r7, #8
    fd8a:	46bd      	mov	sp, r7
    fd8c:	bd80      	pop	{r7, pc}
    fd8e:	bf00      	nop
    fd90:	00010bc1 	.word	0x00010bc1

0000fd94 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
    fd94:	b580      	push	{r7, lr}
    fd96:	b082      	sub	sp, #8
    fd98:	af00      	add	r7, sp, #0
    fd9a:	6078      	str	r0, [r7, #4]
	
		i2c->Init();
    fd9c:	687b      	ldr	r3, [r7, #4]
    fd9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    fda0:	4618      	mov	r0, r3
    fda2:	4b19      	ldr	r3, [pc, #100]	; (fe08 <_ZN24SingleFlapperValve_Class4InitEv+0x74>)
    fda4:	4798      	blx	r3

		if (i2c->isOK)
    fda6:	687b      	ldr	r3, [r7, #4]
    fda8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    fdaa:	7a5b      	ldrb	r3, [r3, #9]
    fdac:	b2db      	uxtb	r3, r3
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d01b      	beq.n	fdea <_ZN24SingleFlapperValve_Class4InitEv+0x56>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
    fdb2:	687b      	ldr	r3, [r7, #4]
    fdb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    fdb8:	4619      	mov	r1, r3
    fdba:	6878      	ldr	r0, [r7, #4]
    fdbc:	4b13      	ldr	r3, [pc, #76]	; (fe0c <_ZN24SingleFlapperValve_Class4InitEv+0x78>)
    fdbe:	4798      	blx	r3
			expanders[0]->SetPortInput();
    fdc0:	687b      	ldr	r3, [r7, #4]
    fdc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    fdc4:	4618      	mov	r0, r3
    fdc6:	4b12      	ldr	r3, [pc, #72]	; (fe10 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
    fdc8:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
    fdca:	687b      	ldr	r3, [r7, #4]
    fdcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fdce:	2180      	movs	r1, #128	; 0x80
    fdd0:	4618      	mov	r0, r3
    fdd2:	4b10      	ldr	r3, [pc, #64]	; (fe14 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
    fdd4:	4798      	blx	r3
			expanders[2]->SetPortOutput();
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    fdda:	4618      	mov	r0, r3
    fddc:	4b0e      	ldr	r3, [pc, #56]	; (fe18 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
    fdde:	4798      	blx	r3
			expanders[3]->SetPortInput();
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    fde4:	4618      	mov	r0, r3
    fde6:	4b0a      	ldr	r3, [pc, #40]	; (fe10 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
    fde8:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
    fdea:	687b      	ldr	r3, [r7, #4]
    fdec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    fdee:	7a5b      	ldrb	r3, [r3, #9]
    fdf0:	b2da      	uxtb	r2, r3
    fdf2:	687b      	ldr	r3, [r7, #4]
    fdf4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
    fdf8:	687b      	ldr	r3, [r7, #4]
    fdfa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    fdfe:	b2db      	uxtb	r3, r3
// 			asm("nop");
// 		}
// 		return isOK;	


}
    fe00:	4618      	mov	r0, r3
    fe02:	3708      	adds	r7, #8
    fe04:	46bd      	mov	sp, r7
    fe06:	bd80      	pop	{r7, pc}
    fe08:	00010a69 	.word	0x00010a69
    fe0c:	0000fe1d 	.word	0x0000fe1d
    fe10:	00010f71 	.word	0x00010f71
    fe14:	00010fb5 	.word	0x00010fb5
    fe18:	00011029 	.word	0x00011029

0000fe1c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
    fe1c:	b580      	push	{r7, lr}
    fe1e:	b084      	sub	sp, #16
    fe20:	af00      	add	r7, sp, #0
    fe22:	6078      	str	r0, [r7, #4]
    fe24:	460b      	mov	r3, r1
    fe26:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    fe28:	2300      	movs	r3, #0
    fe2a:	60fb      	str	r3, [r7, #12]
    fe2c:	68fb      	ldr	r3, [r7, #12]
    fe2e:	2b03      	cmp	r3, #3
    fe30:	dc24      	bgt.n	fe7c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x60>
	{
		currentExpander=&(expandersStatic[i]);
    fe32:	68fa      	ldr	r2, [r7, #12]
    fe34:	4613      	mov	r3, r2
    fe36:	00db      	lsls	r3, r3, #3
    fe38:	1a9b      	subs	r3, r3, r2
    fe3a:	009b      	lsls	r3, r3, #2
    fe3c:	4a12      	ldr	r2, [pc, #72]	; (fe88 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x6c>)
    fe3e:	441a      	add	r2, r3
    fe40:	687b      	ldr	r3, [r7, #4]
    fe42:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
    fe44:	687b      	ldr	r3, [r7, #4]
    fe46:	6e58      	ldr	r0, [r3, #100]	; 0x64
    fe48:	68fb      	ldr	r3, [r7, #12]
    fe4a:	b2da      	uxtb	r2, r3
    fe4c:	78fb      	ldrb	r3, [r7, #3]
    fe4e:	009b      	lsls	r3, r3, #2
    fe50:	b2db      	uxtb	r3, r3
    fe52:	4413      	add	r3, r2
    fe54:	b2db      	uxtb	r3, r3
    fe56:	3320      	adds	r3, #32
    fe58:	b2d9      	uxtb	r1, r3
    fe5a:	687b      	ldr	r3, [r7, #4]
    fe5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    fe5e:	461a      	mov	r2, r3
    fe60:	4b0a      	ldr	r3, [pc, #40]	; (fe8c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x70>)
    fe62:	4798      	blx	r3
		expanders[i]=currentExpander;
    fe64:	687b      	ldr	r3, [r7, #4]
    fe66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    fe68:	6879      	ldr	r1, [r7, #4]
    fe6a:	68fb      	ldr	r3, [r7, #12]
    fe6c:	3314      	adds	r3, #20
    fe6e:	009b      	lsls	r3, r3, #2
    fe70:	440b      	add	r3, r1
    fe72:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    fe74:	68fb      	ldr	r3, [r7, #12]
    fe76:	3301      	adds	r3, #1
    fe78:	60fb      	str	r3, [r7, #12]
    fe7a:	e7d7      	b.n	fe2c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
    fe7c:	2300      	movs	r3, #0
}
    fe7e:	4618      	mov	r0, r3
    fe80:	3710      	adds	r7, #16
    fe82:	46bd      	mov	sp, r7
    fe84:	bd80      	pop	{r7, pc}
    fe86:	bf00      	nop
    fe88:	200013e0 	.word	0x200013e0
    fe8c:	00010dcb 	.word	0x00010dcb

0000fe90 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
    fe90:	b590      	push	{r4, r7, lr}
    fe92:	b085      	sub	sp, #20
    fe94:	af00      	add	r7, sp, #0
    fe96:	60f8      	str	r0, [r7, #12]
    fe98:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
    fe9a:	68bb      	ldr	r3, [r7, #8]
    fe9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    fe9e:	4618      	mov	r0, r3
    fea0:	4b10      	ldr	r3, [pc, #64]	; (fee4 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
    fea2:	4798      	blx	r3
    fea4:	4603      	mov	r3, r0
    fea6:	461a      	mov	r2, r3
    fea8:	68bb      	ldr	r3, [r7, #8]
    feaa:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
    feae:	68b9      	ldr	r1, [r7, #8]
    feb0:	68bb      	ldr	r3, [r7, #8]
    feb2:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    feb6:	68bc      	ldr	r4, [r7, #8]
    feb8:	463b      	mov	r3, r7
    feba:	4618      	mov	r0, r3
    febc:	4b0a      	ldr	r3, [pc, #40]	; (fee8 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
    febe:	4798      	blx	r3
    fec0:	f104 033a 	add.w	r3, r4, #58	; 0x3a
    fec4:	463a      	mov	r2, r7
    fec6:	6811      	ldr	r1, [r2, #0]
    fec8:	6852      	ldr	r2, [r2, #4]
    feca:	6019      	str	r1, [r3, #0]
    fecc:	605a      	str	r2, [r3, #4]
	return controlOutputs;
    fece:	68fa      	ldr	r2, [r7, #12]
    fed0:	68bb      	ldr	r3, [r7, #8]
    fed2:	333a      	adds	r3, #58	; 0x3a
    fed4:	6819      	ldr	r1, [r3, #0]
    fed6:	685b      	ldr	r3, [r3, #4]
    fed8:	6011      	str	r1, [r2, #0]
    feda:	6053      	str	r3, [r2, #4]
}
    fedc:	68f8      	ldr	r0, [r7, #12]
    fede:	3714      	adds	r7, #20
    fee0:	46bd      	mov	sp, r7
    fee2:	bd90      	pop	{r4, r7, pc}
    fee4:	00010eb1 	.word	0x00010eb1
    fee8:	00010cbd 	.word	0x00010cbd

0000feec <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
    feec:	b590      	push	{r4, r7, lr}
    feee:	b085      	sub	sp, #20
    fef0:	af00      	add	r7, sp, #0
    fef2:	60f8      	str	r0, [r7, #12]
    fef4:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
    fef6:	68bb      	ldr	r3, [r7, #8]
    fef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    fefa:	4618      	mov	r0, r3
    fefc:	4b10      	ldr	r3, [pc, #64]	; (ff40 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
    fefe:	4798      	blx	r3
    ff00:	4603      	mov	r3, r0
    ff02:	461a      	mov	r2, r3
    ff04:	68bb      	ldr	r3, [r7, #8]
    ff06:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
    ff0a:	68b9      	ldr	r1, [r7, #8]
    ff0c:	68bb      	ldr	r3, [r7, #8]
    ff0e:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    ff12:	68bc      	ldr	r4, [r7, #8]
    ff14:	463b      	mov	r3, r7
    ff16:	4618      	mov	r0, r3
    ff18:	4b0a      	ldr	r3, [pc, #40]	; (ff44 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
    ff1a:	4798      	blx	r3
    ff1c:	f104 0342 	add.w	r3, r4, #66	; 0x42
    ff20:	463a      	mov	r2, r7
    ff22:	6811      	ldr	r1, [r2, #0]
    ff24:	6019      	str	r1, [r3, #0]
    ff26:	8892      	ldrh	r2, [r2, #4]
    ff28:	809a      	strh	r2, [r3, #4]
	return statusInputs;
    ff2a:	68fa      	ldr	r2, [r7, #12]
    ff2c:	68bb      	ldr	r3, [r7, #8]
    ff2e:	3342      	adds	r3, #66	; 0x42
    ff30:	6819      	ldr	r1, [r3, #0]
    ff32:	6011      	str	r1, [r2, #0]
    ff34:	889b      	ldrh	r3, [r3, #4]
    ff36:	8093      	strh	r3, [r2, #4]
}
    ff38:	68f8      	ldr	r0, [r7, #12]
    ff3a:	3714      	adds	r7, #20
    ff3c:	46bd      	mov	sp, r7
    ff3e:	bd90      	pop	{r4, r7, pc}
    ff40:	00010eb1 	.word	0x00010eb1
    ff44:	00010c69 	.word	0x00010c69

0000ff48 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
    ff48:	b580      	push	{r7, lr}
    ff4a:	b082      	sub	sp, #8
    ff4c:	af00      	add	r7, sp, #0
    ff4e:	6078      	str	r0, [r7, #4]
    ff50:	460b      	mov	r3, r1
    ff52:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    ff54:	687b      	ldr	r3, [r7, #4]
    ff56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    ff58:	4618      	mov	r0, r3
    ff5a:	4b19      	ldr	r3, [pc, #100]	; (ffc0 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
    ff5c:	4798      	blx	r3
    ff5e:	4603      	mov	r3, r0
    ff60:	461a      	mov	r2, r3
    ff62:	687b      	ldr	r3, [r7, #4]
    ff64:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value&0xfe:value|0x01;
    ff68:	78fb      	ldrb	r3, [r7, #3]
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	d006      	beq.n	ff7c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
    ff6e:	687b      	ldr	r3, [r7, #4]
    ff70:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    ff74:	f023 0301 	bic.w	r3, r3, #1
    ff78:	b2db      	uxtb	r3, r3
    ff7a:	e005      	b.n	ff88 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
    ff7c:	687b      	ldr	r3, [r7, #4]
    ff7e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    ff82:	f043 0301 	orr.w	r3, r3, #1
    ff86:	b2db      	uxtb	r3, r3
    ff88:	687a      	ldr	r2, [r7, #4]
    ff8a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
    ff8e:	687b      	ldr	r3, [r7, #4]
    ff90:	78fa      	ldrb	r2, [r7, #3]
    ff92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
    ff96:	687b      	ldr	r3, [r7, #4]
    ff98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    ff9a:	687b      	ldr	r3, [r7, #4]
    ff9c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    ffa0:	4619      	mov	r1, r3
    ffa2:	4610      	mov	r0, r2
    ffa4:	4b07      	ldr	r3, [pc, #28]	; (ffc4 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
    ffa6:	4798      	blx	r3
    ffa8:	4603      	mov	r3, r0
    ffaa:	461a      	mov	r2, r3
    ffac:	687b      	ldr	r3, [r7, #4]
    ffae:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
    ffb2:	687b      	ldr	r3, [r7, #4]
    ffb4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
    ffb8:	4618      	mov	r0, r3
    ffba:	3708      	adds	r7, #8
    ffbc:	46bd      	mov	sp, r7
    ffbe:	bd80      	pop	{r7, pc}
    ffc0:	00010eb1 	.word	0x00010eb1
    ffc4:	00010f35 	.word	0x00010f35

0000ffc8 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
    ffc8:	b580      	push	{r7, lr}
    ffca:	b082      	sub	sp, #8
    ffcc:	af00      	add	r7, sp, #0
    ffce:	6078      	str	r0, [r7, #4]
    ffd0:	460b      	mov	r3, r1
    ffd2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
    ffd4:	687b      	ldr	r3, [r7, #4]
    ffd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    ffd8:	4618      	mov	r0, r3
    ffda:	4b17      	ldr	r3, [pc, #92]	; (10038 <STACK_SIZE+0x38>)
    ffdc:	4798      	blx	r3
    ffde:	4603      	mov	r3, r0
    ffe0:	461a      	mov	r2, r3
    ffe2:	687b      	ldr	r3, [r7, #4]
    ffe4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
    ffe8:	78fb      	ldrb	r3, [r7, #3]
    ffea:	2b00      	cmp	r3, #0
    ffec:	d006      	beq.n	fffc <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
    ffee:	687b      	ldr	r3, [r7, #4]
    fff0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
    fff4:	f043 0320 	orr.w	r3, r3, #32
    fff8:	b2db      	uxtb	r3, r3
    fffa:	e005      	b.n	10008 <STACK_SIZE+0x8>
    fffc:	687b      	ldr	r3, [r7, #4]
    fffe:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10002:	f023 0320 	bic.w	r3, r3, #32
   10006:	b2db      	uxtb	r3, r3
   10008:	687a      	ldr	r2, [r7, #4]
   1000a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   1000e:	687b      	ldr	r3, [r7, #4]
   10010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10012:	687b      	ldr	r3, [r7, #4]
   10014:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10018:	4619      	mov	r1, r3
   1001a:	4610      	mov	r0, r2
   1001c:	4b07      	ldr	r3, [pc, #28]	; (1003c <STACK_SIZE+0x3c>)
   1001e:	4798      	blx	r3
   10020:	4603      	mov	r3, r0
   10022:	461a      	mov	r2, r3
   10024:	687b      	ldr	r3, [r7, #4]
   10026:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   1002a:	687b      	ldr	r3, [r7, #4]
   1002c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10030:	4618      	mov	r0, r3
   10032:	3708      	adds	r7, #8
   10034:	46bd      	mov	sp, r7
   10036:	bd80      	pop	{r7, pc}
   10038:	00010eb1 	.word	0x00010eb1
   1003c:	00010f35 	.word	0x00010f35

00010040 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   10040:	b580      	push	{r7, lr}
   10042:	b082      	sub	sp, #8
   10044:	af00      	add	r7, sp, #0
   10046:	6078      	str	r0, [r7, #4]
   10048:	460b      	mov	r3, r1
   1004a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   1004c:	687b      	ldr	r3, [r7, #4]
   1004e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10050:	4618      	mov	r0, r3
   10052:	4b17      	ldr	r3, [pc, #92]	; (100b0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   10054:	4798      	blx	r3
   10056:	4603      	mov	r3, r0
   10058:	461a      	mov	r2, r3
   1005a:	687b      	ldr	r3, [r7, #4]
   1005c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
   10060:	78fb      	ldrb	r3, [r7, #3]
   10062:	2b00      	cmp	r3, #0
   10064:	d006      	beq.n	10074 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   10066:	687b      	ldr	r3, [r7, #4]
   10068:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1006c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10070:	b2db      	uxtb	r3, r3
   10072:	e005      	b.n	10080 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   10074:	687b      	ldr	r3, [r7, #4]
   10076:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1007a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1007e:	b2db      	uxtb	r3, r3
   10080:	687a      	ldr	r2, [r7, #4]
   10082:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   10086:	687b      	ldr	r3, [r7, #4]
   10088:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1008a:	687b      	ldr	r3, [r7, #4]
   1008c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10090:	4619      	mov	r1, r3
   10092:	4610      	mov	r0, r2
   10094:	4b07      	ldr	r3, [pc, #28]	; (100b4 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   10096:	4798      	blx	r3
   10098:	4603      	mov	r3, r0
   1009a:	461a      	mov	r2, r3
   1009c:	687b      	ldr	r3, [r7, #4]
   1009e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   100a2:	687b      	ldr	r3, [r7, #4]
   100a4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   100a8:	4618      	mov	r0, r3
   100aa:	3708      	adds	r7, #8
   100ac:	46bd      	mov	sp, r7
   100ae:	bd80      	pop	{r7, pc}
   100b0:	00010eb1 	.word	0x00010eb1
   100b4:	00010f35 	.word	0x00010f35

000100b8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   100b8:	b580      	push	{r7, lr}
   100ba:	b082      	sub	sp, #8
   100bc:	af00      	add	r7, sp, #0
   100be:	6078      	str	r0, [r7, #4]
   100c0:	460b      	mov	r3, r1
   100c2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   100c4:	687b      	ldr	r3, [r7, #4]
   100c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   100c8:	4618      	mov	r0, r3
   100ca:	4b17      	ldr	r3, [pc, #92]	; (10128 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   100cc:	4798      	blx	r3
   100ce:	4603      	mov	r3, r0
   100d0:	461a      	mov	r2, r3
   100d2:	687b      	ldr	r3, [r7, #4]
   100d4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
   100d8:	78fb      	ldrb	r3, [r7, #3]
   100da:	2b00      	cmp	r3, #0
   100dc:	d006      	beq.n	100ec <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   100de:	687b      	ldr	r3, [r7, #4]
   100e0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   100e4:	f043 0304 	orr.w	r3, r3, #4
   100e8:	b2db      	uxtb	r3, r3
   100ea:	e005      	b.n	100f8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   100ec:	687b      	ldr	r3, [r7, #4]
   100ee:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   100f2:	f023 0304 	bic.w	r3, r3, #4
   100f6:	b2db      	uxtb	r3, r3
   100f8:	687a      	ldr	r2, [r7, #4]
   100fa:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   100fe:	687b      	ldr	r3, [r7, #4]
   10100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10102:	687b      	ldr	r3, [r7, #4]
   10104:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10108:	4619      	mov	r1, r3
   1010a:	4610      	mov	r0, r2
   1010c:	4b07      	ldr	r3, [pc, #28]	; (1012c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   1010e:	4798      	blx	r3
   10110:	4603      	mov	r3, r0
   10112:	461a      	mov	r2, r3
   10114:	687b      	ldr	r3, [r7, #4]
   10116:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   1011a:	687b      	ldr	r3, [r7, #4]
   1011c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10120:	4618      	mov	r0, r3
   10122:	3708      	adds	r7, #8
   10124:	46bd      	mov	sp, r7
   10126:	bd80      	pop	{r7, pc}
   10128:	00010eb1 	.word	0x00010eb1
   1012c:	00010f35 	.word	0x00010f35

00010130 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   10130:	b580      	push	{r7, lr}
   10132:	b082      	sub	sp, #8
   10134:	af00      	add	r7, sp, #0
   10136:	6078      	str	r0, [r7, #4]
   10138:	460b      	mov	r3, r1
   1013a:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   1013c:	687b      	ldr	r3, [r7, #4]
   1013e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10140:	78fa      	ldrb	r2, [r7, #3]
   10142:	4611      	mov	r1, r2
   10144:	4618      	mov	r0, r3
   10146:	4b07      	ldr	r3, [pc, #28]	; (10164 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   10148:	4798      	blx	r3
   1014a:	4603      	mov	r3, r0
   1014c:	461a      	mov	r2, r3
   1014e:	687b      	ldr	r3, [r7, #4]
   10150:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   10154:	687b      	ldr	r3, [r7, #4]
   10156:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
   1015a:	4618      	mov	r0, r3
   1015c:	3708      	adds	r7, #8
   1015e:	46bd      	mov	sp, r7
   10160:	bd80      	pop	{r7, pc}
   10162:	bf00      	nop
   10164:	00010f35 	.word	0x00010f35

00010168 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   10168:	b580      	push	{r7, lr}
   1016a:	b082      	sub	sp, #8
   1016c:	af00      	add	r7, sp, #0
   1016e:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   10170:	687b      	ldr	r3, [r7, #4]
   10172:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
   10176:	687b      	ldr	r3, [r7, #4]
   10178:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   1017c:	687b      	ldr	r3, [r7, #4]
   1017e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10180:	4618      	mov	r0, r3
   10182:	4b13      	ldr	r3, [pc, #76]	; (101d0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x68>)
   10184:	4798      	blx	r3
   10186:	4603      	mov	r3, r0
   10188:	461a      	mov	r2, r3
   1018a:	687b      	ldr	r3, [r7, #4]
   1018c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>200)
   10190:	687b      	ldr	r3, [r7, #4]
   10192:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10196:	2bc8      	cmp	r3, #200	; 0xc8
   10198:	dd04      	ble.n	101a4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=RECYCLE;
   1019a:	687b      	ldr	r3, [r7, #4]
   1019c:	2202      	movs	r2, #2
   1019e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   101a2:	e00d      	b.n	101c0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	}else if (actualPosition>100)
   101a4:	687b      	ldr	r3, [r7, #4]
   101a6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   101aa:	2b64      	cmp	r3, #100	; 0x64
   101ac:	dd04      	ble.n	101b8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=INTERM;
   101ae:	687b      	ldr	r3, [r7, #4]
   101b0:	2201      	movs	r2, #1
   101b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   101b6:	e003      	b.n	101c0 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	} 
	else
	{
		statusFlapperValve=FRESHAIR;
   101b8:	687b      	ldr	r3, [r7, #4]
   101ba:	2200      	movs	r2, #0
   101bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
   101c0:	687b      	ldr	r3, [r7, #4]
   101c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
   101c6:	4618      	mov	r0, r3
   101c8:	3708      	adds	r7, #8
   101ca:	46bd      	mov	sp, r7
   101cc:	bd80      	pop	{r7, pc}
   101ce:	bf00      	nop
   101d0:	00010eb1 	.word	0x00010eb1

000101d4 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   101d4:	b590      	push	{r4, r7, lr}
   101d6:	b083      	sub	sp, #12
   101d8:	af00      	add	r7, sp, #0
   101da:	6078      	str	r0, [r7, #4]
   101dc:	4c05      	ldr	r4, [pc, #20]	; (101f4 <__tcf_0+0x20>)
   101de:	4b06      	ldr	r3, [pc, #24]	; (101f8 <__tcf_0+0x24>)
   101e0:	429c      	cmp	r4, r3
   101e2:	d004      	beq.n	101ee <__tcf_0+0x1a>
   101e4:	3c1c      	subs	r4, #28
   101e6:	4620      	mov	r0, r4
   101e8:	4b04      	ldr	r3, [pc, #16]	; (101fc <__tcf_0+0x28>)
   101ea:	4798      	blx	r3
   101ec:	e7f7      	b.n	101de <__tcf_0+0xa>
   101ee:	370c      	adds	r7, #12
   101f0:	46bd      	mov	sp, r7
   101f2:	bd90      	pop	{r4, r7, pc}
   101f4:	20001450 	.word	0x20001450
   101f8:	200013e0 	.word	0x200013e0
   101fc:	00010db7 	.word	0x00010db7

00010200 <_Z41__static_initialization_and_destruction_0ii>:

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}

   10200:	b5b0      	push	{r4, r5, r7, lr}
   10202:	b082      	sub	sp, #8
   10204:	af00      	add	r7, sp, #0
   10206:	6078      	str	r0, [r7, #4]
   10208:	6039      	str	r1, [r7, #0]
   1020a:	687b      	ldr	r3, [r7, #4]
   1020c:	2b01      	cmp	r3, #1
   1020e:	d125      	bne.n	1025c <_Z41__static_initialization_and_destruction_0ii+0x5c>
   10210:	683b      	ldr	r3, [r7, #0]
   10212:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10216:	4293      	cmp	r3, r2
   10218:	d120      	bne.n	1025c <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   1021a:	4912      	ldr	r1, [pc, #72]	; (10264 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1021c:	4812      	ldr	r0, [pc, #72]	; (10268 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1021e:	4b13      	ldr	r3, [pc, #76]	; (1026c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   10220:	4798      	blx	r3
   10222:	4a13      	ldr	r2, [pc, #76]	; (10270 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10224:	4913      	ldr	r1, [pc, #76]	; (10274 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   10226:	4810      	ldr	r0, [pc, #64]	; (10268 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   10228:	4b13      	ldr	r3, [pc, #76]	; (10278 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1022a:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   1022c:	4b13      	ldr	r3, [pc, #76]	; (1027c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   1022e:	2403      	movs	r4, #3
   10230:	461d      	mov	r5, r3
   10232:	2c00      	cmp	r4, #0
   10234:	db05      	blt.n	10242 <_Z41__static_initialization_and_destruction_0ii+0x42>
   10236:	4628      	mov	r0, r5
   10238:	4b11      	ldr	r3, [pc, #68]	; (10280 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   1023a:	4798      	blx	r3
   1023c:	351c      	adds	r5, #28
   1023e:	3c01      	subs	r4, #1
   10240:	e7f7      	b.n	10232 <_Z41__static_initialization_and_destruction_0ii+0x32>
   10242:	4a0b      	ldr	r2, [pc, #44]	; (10270 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10244:	490f      	ldr	r1, [pc, #60]	; (10284 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   10246:	2000      	movs	r0, #0
   10248:	4b0b      	ldr	r3, [pc, #44]	; (10278 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1024a:	4798      	blx	r3
   1024c:	480e      	ldr	r0, [pc, #56]	; (10288 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1024e:	4b0f      	ldr	r3, [pc, #60]	; (1028c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   10250:	4798      	blx	r3
   10252:	4a07      	ldr	r2, [pc, #28]	; (10270 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10254:	490e      	ldr	r1, [pc, #56]	; (10290 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   10256:	480c      	ldr	r0, [pc, #48]	; (10288 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   10258:	4b07      	ldr	r3, [pc, #28]	; (10278 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   1025a:	4798      	blx	r3
   1025c:	bf00      	nop
   1025e:	3708      	adds	r7, #8
   10260:	46bd      	mov	sp, r7
   10262:	bdb0      	pop	{r4, r5, r7, pc}
   10264:	20007efc 	.word	0x20007efc
   10268:	200013cc 	.word	0x200013cc
   1026c:	00010a39 	.word	0x00010a39
   10270:	20000000 	.word	0x20000000
   10274:	00010a55 	.word	0x00010a55
   10278:	000126cd 	.word	0x000126cd
   1027c:	200013e0 	.word	0x200013e0
   10280:	00010da3 	.word	0x00010da3
   10284:	000101d5 	.word	0x000101d5
   10288:	20001450 	.word	0x20001450
   1028c:	0000fd29 	.word	0x0000fd29
   10290:	0000fd75 	.word	0x0000fd75

00010294 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   10294:	b580      	push	{r7, lr}
   10296:	af00      	add	r7, sp, #0
   10298:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1029c:	2001      	movs	r0, #1
   1029e:	4b01      	ldr	r3, [pc, #4]	; (102a4 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   102a0:	4798      	blx	r3
   102a2:	bd80      	pop	{r7, pc}
   102a4:	00010201 	.word	0x00010201

000102a8 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   102a8:	b480      	push	{r7}
   102aa:	b083      	sub	sp, #12
   102ac:	af00      	add	r7, sp, #0
   102ae:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   102b0:	4a07      	ldr	r2, [pc, #28]	; (102d0 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   102b2:	687b      	ldr	r3, [r7, #4]
   102b4:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   102b6:	687b      	ldr	r3, [r7, #4]
   102b8:	4a06      	ldr	r2, [pc, #24]	; (102d4 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   102ba:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   102bc:	687b      	ldr	r3, [r7, #4]
   102be:	2200      	movs	r2, #0
   102c0:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   102c2:	687b      	ldr	r3, [r7, #4]
   102c4:	4618      	mov	r0, r3
   102c6:	370c      	adds	r7, #12
   102c8:	46bd      	mov	sp, r7
   102ca:	bc80      	pop	{r7}
   102cc:	4770      	bx	lr
   102ce:	bf00      	nop
   102d0:	200014c4 	.word	0x200014c4
   102d4:	200014c8 	.word	0x200014c8

000102d8 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   102d8:	b480      	push	{r7}
   102da:	b083      	sub	sp, #12
   102dc:	af00      	add	r7, sp, #0
   102de:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   102e0:	687b      	ldr	r3, [r7, #4]
   102e2:	4618      	mov	r0, r3
   102e4:	370c      	adds	r7, #12
   102e6:	46bd      	mov	sp, r7
   102e8:	bc80      	pop	{r7}
   102ea:	4770      	bx	lr

000102ec <_ZN18SingleHeater_Class4InitEv>:
static void	HeaterStatusChanged(void){
	
	ptrSingleHeaterClass->heaterStatusChanged=true;
}

bool SingleHeater_Class::Init(void){
   102ec:	b580      	push	{r7, lr}
   102ee:	b082      	sub	sp, #8
   102f0:	af00      	add	r7, sp, #0
   102f2:	6078      	str	r0, [r7, #4]
		i2c->Init();
   102f4:	687b      	ldr	r3, [r7, #4]
   102f6:	699b      	ldr	r3, [r3, #24]
   102f8:	4618      	mov	r0, r3
   102fa:	4b15      	ldr	r3, [pc, #84]	; (10350 <_ZN18SingleHeater_Class4InitEv+0x64>)
   102fc:	4798      	blx	r3
		if (i2c->isOK)
   102fe:	687b      	ldr	r3, [r7, #4]
   10300:	699b      	ldr	r3, [r3, #24]
   10302:	7a5b      	ldrb	r3, [r3, #9]
   10304:	b2db      	uxtb	r3, r3
   10306:	2b00      	cmp	r3, #0
   10308:	d014      	beq.n	10334 <_ZN18SingleHeater_Class4InitEv+0x48>
		{
			
			//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
			InitExpanderArray();
   1030a:	6878      	ldr	r0, [r7, #4]
   1030c:	4b11      	ldr	r3, [pc, #68]	; (10354 <_ZN18SingleHeater_Class4InitEv+0x68>)
   1030e:	4798      	blx	r3
			expanders[0]->SetPortInput();
   10310:	687b      	ldr	r3, [r7, #4]
   10312:	68db      	ldr	r3, [r3, #12]
   10314:	4618      	mov	r0, r3
   10316:	4b10      	ldr	r3, [pc, #64]	; (10358 <_ZN18SingleHeater_Class4InitEv+0x6c>)
   10318:	4798      	blx	r3
			expanders[1]->SetPortOutput();
   1031a:	687b      	ldr	r3, [r7, #4]
   1031c:	691b      	ldr	r3, [r3, #16]
   1031e:	4618      	mov	r0, r3
   10320:	4b0e      	ldr	r3, [pc, #56]	; (1035c <_ZN18SingleHeater_Class4InitEv+0x70>)
   10322:	4798      	blx	r3
			isOK=SelfTest();
   10324:	6878      	ldr	r0, [r7, #4]
   10326:	4b0e      	ldr	r3, [pc, #56]	; (10360 <_ZN18SingleHeater_Class4InitEv+0x74>)
   10328:	4798      	blx	r3
   1032a:	4603      	mov	r3, r0
   1032c:	461a      	mov	r2, r3
   1032e:	687b      	ldr	r3, [r7, #4]
   10330:	701a      	strb	r2, [r3, #0]
   10332:	e000      	b.n	10336 <_ZN18SingleHeater_Class4InitEv+0x4a>
		}
		else
		{
			asm("nop");
   10334:	bf00      	nop
		}
		isOK=i2c->isOK;
   10336:	687b      	ldr	r3, [r7, #4]
   10338:	699b      	ldr	r3, [r3, #24]
   1033a:	7a5b      	ldrb	r3, [r3, #9]
   1033c:	b2da      	uxtb	r2, r3
   1033e:	687b      	ldr	r3, [r7, #4]
   10340:	701a      	strb	r2, [r3, #0]
		return isOK;
   10342:	687b      	ldr	r3, [r7, #4]
   10344:	781b      	ldrb	r3, [r3, #0]
   10346:	b2db      	uxtb	r3, r3
}
   10348:	4618      	mov	r0, r3
   1034a:	3708      	adds	r7, #8
   1034c:	46bd      	mov	sp, r7
   1034e:	bd80      	pop	{r7, pc}
   10350:	00010a69 	.word	0x00010a69
   10354:	00010365 	.word	0x00010365
   10358:	00010f71 	.word	0x00010f71
   1035c:	00011029 	.word	0x00011029
   10360:	000104b9 	.word	0x000104b9

00010364 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
   10364:	b580      	push	{r7, lr}
   10366:	b084      	sub	sp, #16
   10368:	af00      	add	r7, sp, #0
   1036a:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   1036c:	2300      	movs	r3, #0
   1036e:	60fb      	str	r3, [r7, #12]
   10370:	68fb      	ldr	r3, [r7, #12]
   10372:	2b01      	cmp	r3, #1
   10374:	dc25      	bgt.n	103c2 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x5e>
	{
		expanders[i]=&expandersStatic[i];
   10376:	68fa      	ldr	r2, [r7, #12]
   10378:	4613      	mov	r3, r2
   1037a:	00db      	lsls	r3, r3, #3
   1037c:	1a9b      	subs	r3, r3, r2
   1037e:	009b      	lsls	r3, r3, #2
   10380:	4a12      	ldr	r2, [pc, #72]	; (103cc <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x68>)
   10382:	441a      	add	r2, r3
   10384:	6879      	ldr	r1, [r7, #4]
   10386:	68fb      	ldr	r3, [r7, #12]
   10388:	3302      	adds	r3, #2
   1038a:	009b      	lsls	r3, r3, #2
   1038c:	440b      	add	r3, r1
   1038e:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   10390:	687a      	ldr	r2, [r7, #4]
   10392:	68fb      	ldr	r3, [r7, #12]
   10394:	3302      	adds	r3, #2
   10396:	009b      	lsls	r3, r3, #2
   10398:	4413      	add	r3, r2
   1039a:	685a      	ldr	r2, [r3, #4]
   1039c:	687b      	ldr	r3, [r7, #4]
   1039e:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   103a0:	687b      	ldr	r3, [r7, #4]
   103a2:	6958      	ldr	r0, [r3, #20]
   103a4:	68fb      	ldr	r3, [r7, #12]
   103a6:	b25b      	sxtb	r3, r3
   103a8:	f043 0320 	orr.w	r3, r3, #32
   103ac:	b25b      	sxtb	r3, r3
   103ae:	b2d9      	uxtb	r1, r3
   103b0:	687b      	ldr	r3, [r7, #4]
   103b2:	699b      	ldr	r3, [r3, #24]
   103b4:	461a      	mov	r2, r3
   103b6:	4b06      	ldr	r3, [pc, #24]	; (103d0 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6c>)
   103b8:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   103ba:	68fb      	ldr	r3, [r7, #12]
   103bc:	3301      	adds	r3, #1
   103be:	60fb      	str	r3, [r7, #12]
   103c0:	e7d6      	b.n	10370 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
   103c2:	bf00      	nop
   103c4:	4618      	mov	r0, r3
   103c6:	3710      	adds	r7, #16
   103c8:	46bd      	mov	sp, r7
   103ca:	bd80      	pop	{r7, pc}
   103cc:	200014dc 	.word	0x200014dc
   103d0:	00010dcb 	.word	0x00010dcb

000103d4 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   103d4:	b580      	push	{r7, lr}
   103d6:	b084      	sub	sp, #16
   103d8:	af00      	add	r7, sp, #0
   103da:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   103dc:	687b      	ldr	r3, [r7, #4]
   103de:	68db      	ldr	r3, [r3, #12]
   103e0:	4618      	mov	r0, r3
   103e2:	4b16      	ldr	r3, [pc, #88]	; (1043c <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   103e4:	4798      	blx	r3
   103e6:	4603      	mov	r3, r0
   103e8:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   103ea:	7bbb      	ldrb	r3, [r7, #14]
   103ec:	f003 0301 	and.w	r3, r3, #1
   103f0:	2b00      	cmp	r3, #0
   103f2:	bf14      	ite	ne
   103f4:	2301      	movne	r3, #1
   103f6:	2300      	moveq	r3, #0
   103f8:	b2da      	uxtb	r2, r3
   103fa:	687b      	ldr	r3, [r7, #4]
   103fc:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   103fe:	2300      	movs	r3, #0
   10400:	73fb      	strb	r3, [r7, #15]
   10402:	7bfb      	ldrb	r3, [r7, #15]
   10404:	2b03      	cmp	r3, #3
   10406:	dc14      	bgt.n	10432 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   10408:	7bfb      	ldrb	r3, [r7, #15]
   1040a:	7bb9      	ldrb	r1, [r7, #14]
   1040c:	7bfa      	ldrb	r2, [r7, #15]
   1040e:	3201      	adds	r2, #1
   10410:	fa41 f202 	asr.w	r2, r1, r2
   10414:	f002 0201 	and.w	r2, r2, #1
   10418:	2a00      	cmp	r2, #0
   1041a:	bf14      	ite	ne
   1041c:	2201      	movne	r2, #1
   1041e:	2200      	moveq	r2, #0
   10420:	b2d1      	uxtb	r1, r2
   10422:	687a      	ldr	r2, [r7, #4]
   10424:	4413      	add	r3, r2
   10426:	460a      	mov	r2, r1
   10428:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   1042a:	7bfb      	ldrb	r3, [r7, #15]
   1042c:	3301      	adds	r3, #1
   1042e:	73fb      	strb	r3, [r7, #15]
   10430:	e7e7      	b.n	10402 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   10432:	7bbb      	ldrb	r3, [r7, #14]
}
   10434:	4618      	mov	r0, r3
   10436:	3710      	adds	r7, #16
   10438:	46bd      	mov	sp, r7
   1043a:	bd80      	pop	{r7, pc}
   1043c:	00010eb1 	.word	0x00010eb1

00010440 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   10440:	b580      	push	{r7, lr}
   10442:	b082      	sub	sp, #8
   10444:	af00      	add	r7, sp, #0
   10446:	6078      	str	r0, [r7, #4]
   10448:	460b      	mov	r3, r1
   1044a:	70fb      	strb	r3, [r7, #3]
   1044c:	4613      	mov	r3, r2
   1044e:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   10450:	687b      	ldr	r3, [r7, #4]
   10452:	6918      	ldr	r0, [r3, #16]
   10454:	78bb      	ldrb	r3, [r7, #2]
   10456:	f083 0301 	eor.w	r3, r3, #1
   1045a:	b2da      	uxtb	r2, r3
   1045c:	78fb      	ldrb	r3, [r7, #3]
   1045e:	4619      	mov	r1, r3
   10460:	4b05      	ldr	r3, [pc, #20]	; (10478 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   10462:	4798      	blx	r3
   10464:	4603      	mov	r3, r0
   10466:	461a      	mov	r2, r3
   10468:	687b      	ldr	r3, [r7, #4]
   1046a:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   1046c:	687b      	ldr	r3, [r7, #4]
   1046e:	7adb      	ldrb	r3, [r3, #11]
}
   10470:	4618      	mov	r0, r3
   10472:	3708      	adds	r7, #8
   10474:	46bd      	mov	sp, r7
   10476:	bd80      	pop	{r7, pc}
   10478:	00011121 	.word	0x00011121

0001047c <_ZN18SingleHeater_Class7DisableEh>:

uint8_t	SingleHeater_Class::Disable(uint8_t indexHeater){
   1047c:	b580      	push	{r7, lr}
   1047e:	b082      	sub	sp, #8
   10480:	af00      	add	r7, sp, #0
   10482:	6078      	str	r0, [r7, #4]
   10484:	460b      	mov	r3, r1
   10486:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   10488:	687b      	ldr	r3, [r7, #4]
   1048a:	691b      	ldr	r3, [r3, #16]
   1048c:	78f9      	ldrb	r1, [r7, #3]
   1048e:	2201      	movs	r2, #1
   10490:	4618      	mov	r0, r3
   10492:	4b08      	ldr	r3, [pc, #32]	; (104b4 <_ZN18SingleHeater_Class7DisableEh+0x38>)
   10494:	4798      	blx	r3
   10496:	4603      	mov	r3, r0
   10498:	2b00      	cmp	r3, #0
   1049a:	d001      	beq.n	104a0 <_ZN18SingleHeater_Class7DisableEh+0x24>
   1049c:	2200      	movs	r2, #0
   1049e:	e000      	b.n	104a2 <_ZN18SingleHeater_Class7DisableEh+0x26>
   104a0:	2201      	movs	r2, #1
   104a2:	687b      	ldr	r3, [r7, #4]
   104a4:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   104a6:	687b      	ldr	r3, [r7, #4]
   104a8:	7adb      	ldrb	r3, [r3, #11]
}
   104aa:	4618      	mov	r0, r3
   104ac:	3708      	adds	r7, #8
   104ae:	46bd      	mov	sp, r7
   104b0:	bd80      	pop	{r7, pc}
   104b2:	bf00      	nop
   104b4:	00011121 	.word	0x00011121

000104b8 <_ZN18SingleHeater_Class8SelfTestEv>:



bool SingleHeater_Class::SelfTest(void){
   104b8:	b480      	push	{r7}
   104ba:	b083      	sub	sp, #12
   104bc:	af00      	add	r7, sp, #0
   104be:	6078      	str	r0, [r7, #4]
	return true;
   104c0:	2301      	movs	r3, #1
}
   104c2:	4618      	mov	r0, r3
   104c4:	370c      	adds	r7, #12
   104c6:	46bd      	mov	sp, r7
   104c8:	bc80      	pop	{r7}
   104ca:	4770      	bx	lr

000104cc <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   104cc:	b590      	push	{r4, r7, lr}
   104ce:	b083      	sub	sp, #12
   104d0:	af00      	add	r7, sp, #0
   104d2:	6078      	str	r0, [r7, #4]
   104d4:	4c05      	ldr	r4, [pc, #20]	; (104ec <__tcf_0+0x20>)
   104d6:	4b06      	ldr	r3, [pc, #24]	; (104f0 <__tcf_0+0x24>)
   104d8:	429c      	cmp	r4, r3
   104da:	d004      	beq.n	104e6 <__tcf_0+0x1a>
   104dc:	3c1c      	subs	r4, #28
   104de:	4620      	mov	r0, r4
   104e0:	4b04      	ldr	r3, [pc, #16]	; (104f4 <__tcf_0+0x28>)
   104e2:	4798      	blx	r3
   104e4:	e7f7      	b.n	104d6 <__tcf_0+0xa>
   104e6:	370c      	adds	r7, #12
   104e8:	46bd      	mov	sp, r7
   104ea:	bd90      	pop	{r4, r7, pc}
   104ec:	20001514 	.word	0x20001514
   104f0:	200014dc 	.word	0x200014dc
   104f4:	00010db7 	.word	0x00010db7

000104f8 <_Z41__static_initialization_and_destruction_0ii>:

   104f8:	b5b0      	push	{r4, r5, r7, lr}
   104fa:	b082      	sub	sp, #8
   104fc:	af00      	add	r7, sp, #0
   104fe:	6078      	str	r0, [r7, #4]
   10500:	6039      	str	r1, [r7, #0]
   10502:	687b      	ldr	r3, [r7, #4]
   10504:	2b01      	cmp	r3, #1
   10506:	d125      	bne.n	10554 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   10508:	683b      	ldr	r3, [r7, #0]
   1050a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1050e:	4293      	cmp	r3, r2
   10510:	d120      	bne.n	10554 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   10512:	4912      	ldr	r1, [pc, #72]	; (1055c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   10514:	4812      	ldr	r0, [pc, #72]	; (10560 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   10516:	4b13      	ldr	r3, [pc, #76]	; (10564 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   10518:	4798      	blx	r3
   1051a:	4a13      	ldr	r2, [pc, #76]	; (10568 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   1051c:	4913      	ldr	r1, [pc, #76]	; (1056c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   1051e:	4810      	ldr	r0, [pc, #64]	; (10560 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   10520:	4b13      	ldr	r3, [pc, #76]	; (10570 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   10522:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   10524:	4b13      	ldr	r3, [pc, #76]	; (10574 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   10526:	2401      	movs	r4, #1
   10528:	461d      	mov	r5, r3
   1052a:	2c00      	cmp	r4, #0
   1052c:	db05      	blt.n	1053a <_Z41__static_initialization_and_destruction_0ii+0x42>
   1052e:	4628      	mov	r0, r5
   10530:	4b11      	ldr	r3, [pc, #68]	; (10578 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   10532:	4798      	blx	r3
   10534:	351c      	adds	r5, #28
   10536:	3c01      	subs	r4, #1
   10538:	e7f7      	b.n	1052a <_Z41__static_initialization_and_destruction_0ii+0x32>
   1053a:	4a0b      	ldr	r2, [pc, #44]	; (10568 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   1053c:	490f      	ldr	r1, [pc, #60]	; (1057c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   1053e:	2000      	movs	r0, #0
   10540:	4b0b      	ldr	r3, [pc, #44]	; (10570 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   10542:	4798      	blx	r3
   10544:	480e      	ldr	r0, [pc, #56]	; (10580 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   10546:	4b0f      	ldr	r3, [pc, #60]	; (10584 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   10548:	4798      	blx	r3
   1054a:	4a07      	ldr	r2, [pc, #28]	; (10568 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   1054c:	490e      	ldr	r1, [pc, #56]	; (10588 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   1054e:	480c      	ldr	r0, [pc, #48]	; (10580 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   10550:	4b07      	ldr	r3, [pc, #28]	; (10570 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   10552:	4798      	blx	r3
   10554:	bf00      	nop
   10556:	3708      	adds	r7, #8
   10558:	46bd      	mov	sp, r7
   1055a:	bdb0      	pop	{r4, r5, r7, pc}
   1055c:	20007f38 	.word	0x20007f38
   10560:	200014c8 	.word	0x200014c8
   10564:	00010a39 	.word	0x00010a39
   10568:	20000000 	.word	0x20000000
   1056c:	00010a55 	.word	0x00010a55
   10570:	000126cd 	.word	0x000126cd
   10574:	200014dc 	.word	0x200014dc
   10578:	00010da3 	.word	0x00010da3
   1057c:	000104cd 	.word	0x000104cd
   10580:	20001514 	.word	0x20001514
   10584:	000102a9 	.word	0x000102a9
   10588:	000102d9 	.word	0x000102d9

0001058c <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   1058c:	b580      	push	{r7, lr}
   1058e:	af00      	add	r7, sp, #0
   10590:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10594:	2001      	movs	r0, #1
   10596:	4b01      	ldr	r3, [pc, #4]	; (1059c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   10598:	4798      	blx	r3
   1059a:	bd80      	pop	{r7, pc}
   1059c:	000104f9 	.word	0x000104f9

000105a0 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   105a0:	4770      	bx	lr

000105a2 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   105a2:	4770      	bx	lr

000105a4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   105a4:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   105a6:	2302      	movs	r3, #2
   105a8:	4801      	ldr	r0, [pc, #4]	; (105b0 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   105aa:	4c02      	ldr	r4, [pc, #8]	; (105b4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   105ac:	47a0      	blx	r4
	return	r;
}
   105ae:	bd10      	pop	{r4, pc}
   105b0:	20007bf8 	.word	0x20007bf8
   105b4:	00012355 	.word	0x00012355

000105b8 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   105b8:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   105ba:	4b03      	ldr	r3, [pc, #12]	; (105c8 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   105bc:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   105be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   105c2:	4b02      	ldr	r3, [pc, #8]	; (105cc <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   105c4:	4798      	blx	r3
}
   105c6:	bd08      	pop	{r3, pc}
   105c8:	20001530 	.word	0x20001530
   105cc:	000105a5 	.word	0x000105a5

000105d0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   105d0:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   105d2:	2302      	movs	r3, #2
   105d4:	4801      	ldr	r0, [pc, #4]	; (105dc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   105d6:	4c02      	ldr	r4, [pc, #8]	; (105e0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   105d8:	47a0      	blx	r4
	return	w;
}
   105da:	bd10      	pop	{r4, pc}
   105dc:	20007bf8 	.word	0x20007bf8
   105e0:	00012321 	.word	0x00012321

000105e4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   105e4:	b500      	push	{lr}
   105e6:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   105e8:	4b07      	ldr	r3, [pc, #28]	; (10608 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   105ea:	881b      	ldrh	r3, [r3, #0]
   105ec:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   105f0:	4b06      	ldr	r3, [pc, #24]	; (1060c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   105f2:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   105f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   105f8:	3202      	adds	r2, #2
   105fa:	a901      	add	r1, sp, #4
   105fc:	4b04      	ldr	r3, [pc, #16]	; (10610 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   105fe:	4798      	blx	r3
	return	w;
}
   10600:	b003      	add	sp, #12
   10602:	f85d fb04 	ldr.w	pc, [sp], #4
   10606:	bf00      	nop
   10608:	00013558 	.word	0x00013558
   1060c:	20001530 	.word	0x20001530
   10610:	000105d1 	.word	0x000105d1

00010614 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   10614:	b510      	push	{r4, lr}
   10616:	4604      	mov	r4, r0
   10618:	30b8      	adds	r0, #184	; 0xb8
   1061a:	4b03      	ldr	r3, [pc, #12]	; (10628 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   1061c:	4798      	blx	r3
   1061e:	4620      	mov	r0, r4
   10620:	4b02      	ldr	r3, [pc, #8]	; (1062c <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   10622:	4798      	blx	r3
{
} //~MemoryManagment_Class
   10624:	4620      	mov	r0, r4
   10626:	bd10      	pop	{r4, pc}
   10628:	0001075f 	.word	0x0001075f
   1062c:	000105a3 	.word	0x000105a3

00010630 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   10630:	b538      	push	{r3, r4, r5, lr}
   10632:	4604      	mov	r4, r0
   10634:	4b10      	ldr	r3, [pc, #64]	; (10678 <_ZN17MemoryFlash_ClassC1Ev+0x48>)
   10636:	4798      	blx	r3
   10638:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1063c:	4b0f      	ldr	r3, [pc, #60]	; (1067c <_ZN17MemoryFlash_ClassC1Ev+0x4c>)
   1063e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   10640:	f44f 7500 	mov.w	r5, #512	; 0x200
   10644:	462a      	mov	r2, r5
   10646:	2100      	movs	r1, #0
   10648:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1064c:	4b0c      	ldr	r3, [pc, #48]	; (10680 <_ZN17MemoryFlash_ClassC1Ev+0x50>)
   1064e:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   10650:	2300      	movs	r3, #0
   10652:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   10656:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   1065a:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   1065e:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   10662:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   10666:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   1066a:	4a06      	ldr	r2, [pc, #24]	; (10684 <_ZN17MemoryFlash_ClassC1Ev+0x54>)
   1066c:	f245 33b4 	movw	r3, #21428	; 0x53b4
   10670:	50e2      	str	r2, [r4, r3]
} //MemoryManagment_Class
   10672:	4620      	mov	r0, r4
   10674:	bd38      	pop	{r3, r4, r5, pc}
   10676:	bf00      	nop
   10678:	000105a1 	.word	0x000105a1
   1067c:	0001075d 	.word	0x0001075d
   10680:	00012d81 	.word	0x00012d81
   10684:	20001534 	.word	0x20001534

00010688 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   10688:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   1068a:	480b      	ldr	r0, [pc, #44]	; (106b8 <_ZN17MemoryFlash_Class4InitEm+0x30>)
   1068c:	4b0b      	ldr	r3, [pc, #44]	; (106bc <_ZN17MemoryFlash_Class4InitEm+0x34>)
   1068e:	4798      	blx	r3
   10690:	b948      	cbnz	r0, 106a6 <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   10692:	4d0b      	ldr	r5, [pc, #44]	; (106c0 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   10694:	490b      	ldr	r1, [pc, #44]	; (106c4 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   10696:	4628      	mov	r0, r5
   10698:	4c0b      	ldr	r4, [pc, #44]	; (106c8 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   1069a:	47a0      	blx	r4
   1069c:	490b      	ldr	r1, [pc, #44]	; (106cc <_ZN17MemoryFlash_Class4InitEm+0x44>)
   1069e:	4628      	mov	r0, r5
   106a0:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   106a2:	2001      	movs	r0, #1
   106a4:	bd38      	pop	{r3, r4, r5, pc}
   106a6:	4d06      	ldr	r5, [pc, #24]	; (106c0 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   106a8:	4909      	ldr	r1, [pc, #36]	; (106d0 <_ZN17MemoryFlash_Class4InitEm+0x48>)
   106aa:	4628      	mov	r0, r5
   106ac:	4c06      	ldr	r4, [pc, #24]	; (106c8 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   106ae:	47a0      	blx	r4
   106b0:	4906      	ldr	r1, [pc, #24]	; (106cc <_ZN17MemoryFlash_Class4InitEm+0x44>)
   106b2:	4628      	mov	r0, r5
   106b4:	47a0      	blx	r4
   106b6:	e7f4      	b.n	106a2 <_ZN17MemoryFlash_Class4InitEm+0x1a>
   106b8:	20007bf8 	.word	0x20007bf8
   106bc:	00012285 	.word	0x00012285
   106c0:	20000fa8 	.word	0x20000fa8
   106c4:	00013500 	.word	0x00013500
   106c8:	0000e2b9 	.word	0x0000e2b9
   106cc:	000134fc 	.word	0x000134fc
   106d0:	000134dc 	.word	0x000134dc

000106d4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
  uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106d6:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   106d8:	4b10      	ldr	r3, [pc, #64]	; (1071c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   106da:	681c      	ldr	r4, [r3, #0]
   106dc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   106e0:	f245 33b4 	movw	r3, #21428	; 0x53b4
   106e4:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   106e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   106ea:	4622      	mov	r2, r4
   106ec:	4629      	mov	r1, r5
   106ee:	480c      	ldr	r0, [pc, #48]	; (10720 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   106f0:	4e0c      	ldr	r6, [pc, #48]	; (10724 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   106f2:	47b0      	blx	r6
	  if (r==0)
   106f4:	4603      	mov	r3, r0
   106f6:	b108      	cbz	r0, 106fc <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   106f8:	4618      	mov	r0, r3
   106fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   106fc:	883b      	ldrh	r3, [r7, #0]
   106fe:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   10700:	4e07      	ldr	r6, [pc, #28]	; (10720 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   10702:	4621      	mov	r1, r4
   10704:	4630      	mov	r0, r6
   10706:	4b08      	ldr	r3, [pc, #32]	; (10728 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   10708:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1070e:	4622      	mov	r2, r4
   10710:	4629      	mov	r1, r5
   10712:	4630      	mov	r0, r6
   10714:	4c05      	ldr	r4, [pc, #20]	; (1072c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   10716:	47a0      	blx	r4
   10718:	4603      	mov	r3, r0
		  return	w;
   1071a:	e7ed      	b.n	106f8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   1071c:	20001530 	.word	0x20001530
   10720:	20007bf8 	.word	0x20007bf8
   10724:	00012355 	.word	0x00012355
   10728:	000122f1 	.word	0x000122f1
   1072c:	00012321 	.word	0x00012321

00010730 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   10730:	b510      	push	{r4, lr}
   10732:	4c05      	ldr	r4, [pc, #20]	; (10748 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x18>)
   10734:	4620      	mov	r0, r4
   10736:	4b05      	ldr	r3, [pc, #20]	; (1074c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x1c>)
   10738:	4798      	blx	r3
   1073a:	4a05      	ldr	r2, [pc, #20]	; (10750 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x20>)
   1073c:	4905      	ldr	r1, [pc, #20]	; (10754 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x24>)
   1073e:	4620      	mov	r0, r4
   10740:	4b05      	ldr	r3, [pc, #20]	; (10758 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x28>)
   10742:	4798      	blx	r3
   10744:	bd10      	pop	{r4, pc}
   10746:	bf00      	nop
   10748:	20002534 	.word	0x20002534
   1074c:	00010631 	.word	0x00010631
   10750:	20000000 	.word	0x20000000
   10754:	00010615 	.word	0x00010615
   10758:	000126cd 	.word	0x000126cd

0001075c <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   1075c:	4770      	bx	lr

0001075e <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   1075e:	4770      	bx	lr

00010760 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   10760:	4b03      	ldr	r3, [pc, #12]	; (10770 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   10762:	681b      	ldr	r3, [r3, #0]
   10764:	2201      	movs	r2, #1
   10766:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   1076a:	bf00      	nop
   1076c:	4770      	bx	lr
   1076e:	bf00      	nop
   10770:	200078ec 	.word	0x200078ec

00010774 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   10774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10776:	4607      	mov	r7, r0
   10778:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   1077c:	d007      	beq.n	1078e <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   1077e:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   10782:	4e05      	ldr	r6, [pc, #20]	; (10798 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   10784:	3c68      	subs	r4, #104	; 0x68
   10786:	4620      	mov	r0, r4
   10788:	47b0      	blx	r6
   1078a:	42a5      	cmp	r5, r4
   1078c:	d1fa      	bne.n	10784 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   1078e:	4638      	mov	r0, r7
   10790:	4b02      	ldr	r3, [pc, #8]	; (1079c <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   10792:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   10794:	4638      	mov	r0, r7
   10796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10798:	0001122d 	.word	0x0001122d
   1079c:	0001122d 	.word	0x0001122d

000107a0 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   107a0:	4b06      	ldr	r3, [pc, #24]	; (107bc <_ZL15Converter1Readyv+0x1c>)
   107a2:	681b      	ldr	r3, [r3, #0]
   107a4:	2201      	movs	r2, #1
   107a6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   107aa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   107ae:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   107b2:	2200      	movs	r2, #0
   107b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   107b8:	4770      	bx	lr
   107ba:	bf00      	nop
   107bc:	200078ec 	.word	0x200078ec

000107c0 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   107c0:	4b06      	ldr	r3, [pc, #24]	; (107dc <_ZL15Converter2Readyv+0x1c>)
   107c2:	681b      	ldr	r3, [r3, #0]
   107c4:	2201      	movs	r2, #1
   107c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   107ca:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   107ce:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   107d2:	2200      	movs	r2, #0
   107d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   107d8:	4770      	bx	lr
   107da:	bf00      	nop
   107dc:	200078ec 	.word	0x200078ec

000107e0 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   107e0:	4b06      	ldr	r3, [pc, #24]	; (107fc <_ZL15Converter3Readyv+0x1c>)
   107e2:	681b      	ldr	r3, [r3, #0]
   107e4:	2201      	movs	r2, #1
   107e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   107ea:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   107ee:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   107f2:	2200      	movs	r2, #0
   107f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   107f8:	4770      	bx	lr
   107fa:	bf00      	nop
   107fc:	200078ec 	.word	0x200078ec

00010800 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   10800:	b570      	push	{r4, r5, r6, lr}
   10802:	4604      	mov	r4, r0
   10804:	460e      	mov	r6, r1
   10806:	4b0a      	ldr	r3, [pc, #40]	; (10830 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   10808:	4798      	blx	r3
   1080a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   1080e:	4d09      	ldr	r5, [pc, #36]	; (10834 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   10810:	47a8      	blx	r5
   10812:	f504 7088 	add.w	r0, r4, #272	; 0x110
   10816:	47a8      	blx	r5
   10818:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   1081c:	47a8      	blx	r5
		spiLite=&ltSPI;
   1081e:	4b06      	ldr	r3, [pc, #24]	; (10838 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   10820:	1d1a      	adds	r2, r3, #4
   10822:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   10826:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   10828:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   1082c:	4620      	mov	r0, r4
   1082e:	bd70      	pop	{r4, r5, r6, pc}
   10830:	00011219 	.word	0x00011219
   10834:	00011219 	.word	0x00011219
   10838:	200078ec 	.word	0x200078ec

0001083c <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   1083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10840:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   10842:	233d      	movs	r3, #61	; 0x3d
   10844:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   10848:	231b      	movs	r3, #27
   1084a:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   1084e:	2327      	movs	r3, #39	; 0x27
   10850:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   10854:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   10858:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   1085c:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   10860:	4f06      	ldr	r7, [pc, #24]	; (1087c <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   10862:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   10866:	f856 1b04 	ldr.w	r1, [r6], #4
   1086a:	4628      	mov	r0, r5
   1086c:	47b8      	blx	r7
   1086e:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   10870:	4546      	cmp	r6, r8
   10872:	d1f6      	bne.n	10862 <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   10874:	2001      	movs	r0, #1
   10876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1087a:	bf00      	nop
   1087c:	00011241 	.word	0x00011241

00010880 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   10880:	b538      	push	{r3, r4, r5, lr}
   10882:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   10884:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   10888:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1088c:	4b13      	ldr	r3, [pc, #76]	; (108dc <_ZN24TemperatureSensors_Class4InitEv+0x5c>)
   1088e:	4798      	blx	r3
	spiLite->init();
   10890:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   10894:	4b12      	ldr	r3, [pc, #72]	; (108e0 <_ZN24TemperatureSensors_Class4InitEv+0x60>)
   10896:	4798      	blx	r3
	ptrTemperaturesClass=this;
   10898:	4b12      	ldr	r3, [pc, #72]	; (108e4 <_ZN24TemperatureSensors_Class4InitEv+0x64>)
   1089a:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   1089c:	4912      	ldr	r1, [pc, #72]	; (108e8 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   1089e:	2028      	movs	r0, #40	; 0x28
   108a0:	4d12      	ldr	r5, [pc, #72]	; (108ec <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   108a2:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   108a4:	4912      	ldr	r1, [pc, #72]	; (108f0 <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   108a6:	2029      	movs	r0, #41	; 0x29
   108a8:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   108aa:	4912      	ldr	r1, [pc, #72]	; (108f4 <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   108ac:	2021      	movs	r0, #33	; 0x21
   108ae:	47a8      	blx	r5
	InitModules();
   108b0:	4620      	mov	r0, r4
   108b2:	4b11      	ldr	r3, [pc, #68]	; (108f8 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   108b4:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   108b6:	2300      	movs	r3, #0
   108b8:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   108bc:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   108c0:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   108c4:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   108c8:	4013      	ands	r3, r2
   108ca:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   108ce:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   108d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   108d4:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   108d8:	bd38      	pop	{r3, r4, r5, pc}
   108da:	bf00      	nop
   108dc:	00011a35 	.word	0x00011a35
   108e0:	000119d9 	.word	0x000119d9
   108e4:	200078ec 	.word	0x200078ec
   108e8:	000107a1 	.word	0x000107a1
   108ec:	0000284d 	.word	0x0000284d
   108f0:	000107c1 	.word	0x000107c1
   108f4:	000107e1 	.word	0x000107e1
   108f8:	0001083d 	.word	0x0001083d

000108fc <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   108fc:	b510      	push	{r4, lr}
   108fe:	4604      	mov	r4, r0
	converterTimeout=false;
   10900:	2200      	movs	r2, #0
   10902:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   10906:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   1090a:	4403      	add	r3, r0
   1090c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   10910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10914:	4907      	ldr	r1, [pc, #28]	; (10934 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   10916:	4808      	ldr	r0, [pc, #32]	; (10938 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   10918:	4b08      	ldr	r3, [pc, #32]	; (1093c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   1091a:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   1091c:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   10920:	2368      	movs	r3, #104	; 0x68
   10922:	fb03 4000 	mla	r0, r3, r0, r4
   10926:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   1092a:	30a8      	adds	r0, #168	; 0xa8
   1092c:	4b04      	ldr	r3, [pc, #16]	; (10940 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   1092e:	4798      	blx	r3
   10930:	bd10      	pop	{r4, pc}
   10932:	bf00      	nop
   10934:	00010761 	.word	0x00010761
   10938:	20000f18 	.word	0x20000f18
   1093c:	0000da75 	.word	0x0000da75
   10940:	00011335 	.word	0x00011335

00010944 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   10944:	b538      	push	{r3, r4, r5, lr}
   10946:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   10948:	491e      	ldr	r1, [pc, #120]	; (109c4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   1094a:	481f      	ldr	r0, [pc, #124]	; (109c8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   1094c:	4b1f      	ldr	r3, [pc, #124]	; (109cc <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   1094e:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   10950:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   10954:	2568      	movs	r5, #104	; 0x68
   10956:	fb05 4000 	mla	r0, r5, r0, r4
   1095a:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   1095e:	30a8      	adds	r0, #168	; 0xa8
   10960:	4b1b      	ldr	r3, [pc, #108]	; (109d0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   10962:	4798      	blx	r3
   10964:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   10968:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   1096c:	fb05 4502 	mla	r5, r5, r2, r4
   10970:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   10974:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   10978:	2b01      	cmp	r3, #1
   1097a:	d00d      	beq.n	10998 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   1097c:	4b15      	ldr	r3, [pc, #84]	; (109d4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   1097e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   10982:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   10986:	3301      	adds	r3, #1
   10988:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   1098a:	2b04      	cmp	r3, #4
   1098c:	d00c      	beq.n	109a8 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   1098e:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   10992:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   10996:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   10998:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   1099c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   109a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   109a4:	66d8      	str	r0, [r3, #108]	; 0x6c
   109a6:	e7ec      	b.n	10982 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   109a8:	2300      	movs	r3, #0
   109aa:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   109ae:	3201      	adds	r2, #1
   109b0:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   109b2:	2a03      	cmp	r2, #3
		currentModule++;
   109b4:	bf12      	itee	ne
   109b6:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   109ba:	2300      	moveq	r3, #0
   109bc:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   109c0:	e7e7      	b.n	10992 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   109c2:	bf00      	nop
   109c4:	00010761 	.word	0x00010761
   109c8:	20000f18 	.word	0x20000f18
   109cc:	0000da1d 	.word	0x0000da1d
   109d0:	0001143d 	.word	0x0001143d
   109d4:	c479c000 	.word	0xc479c000

000109d8 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   109d8:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   109dc:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   109e0:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   109e4:	4013      	ands	r3, r2
}
   109e6:	4018      	ands	r0, r3
   109e8:	4770      	bx	lr
	...

000109ec <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   109ec:	b570      	push	{r4, r5, r6, lr}
static LT_SPI	ltSPI;
   109ee:	4c0a      	ldr	r4, [pc, #40]	; (10a18 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x2c>)
   109f0:	1d25      	adds	r5, r4, #4
   109f2:	4628      	mov	r0, r5
   109f4:	4b09      	ldr	r3, [pc, #36]	; (10a1c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x30>)
   109f6:	4798      	blx	r3
   109f8:	4e09      	ldr	r6, [pc, #36]	; (10a20 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x34>)
   109fa:	4632      	mov	r2, r6
   109fc:	4909      	ldr	r1, [pc, #36]	; (10a24 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x38>)
   109fe:	4628      	mov	r0, r5
   10a00:	4d09      	ldr	r5, [pc, #36]	; (10a28 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x3c>)
   10a02:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   10a04:	3418      	adds	r4, #24
   10a06:	4909      	ldr	r1, [pc, #36]	; (10a2c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x40>)
   10a08:	4620      	mov	r0, r4
   10a0a:	4b09      	ldr	r3, [pc, #36]	; (10a30 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x44>)
   10a0c:	4798      	blx	r3
   10a0e:	4632      	mov	r2, r6
   10a10:	4908      	ldr	r1, [pc, #32]	; (10a34 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x48>)
   10a12:	4620      	mov	r0, r4
   10a14:	47a8      	blx	r5
   10a16:	bd70      	pop	{r4, r5, r6, pc}
   10a18:	200078ec 	.word	0x200078ec
   10a1c:	0001199d 	.word	0x0001199d
   10a20:	20000000 	.word	0x20000000
   10a24:	000119c5 	.word	0x000119c5
   10a28:	000126cd 	.word	0x000126cd
   10a2c:	20007e60 	.word	0x20007e60
   10a30:	00010801 	.word	0x00010801
   10a34:	00010775 	.word	0x00010775

00010a38 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   10a38:	b480      	push	{r7}
   10a3a:	b083      	sub	sp, #12
   10a3c:	af00      	add	r7, sp, #0
   10a3e:	6078      	str	r0, [r7, #4]
   10a40:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   10a42:	687b      	ldr	r3, [r7, #4]
   10a44:	683a      	ldr	r2, [r7, #0]
   10a46:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   10a48:	687b      	ldr	r3, [r7, #4]
   10a4a:	4618      	mov	r0, r3
   10a4c:	370c      	adds	r7, #12
   10a4e:	46bd      	mov	sp, r7
   10a50:	bc80      	pop	{r7}
   10a52:	4770      	bx	lr

00010a54 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   10a54:	b480      	push	{r7}
   10a56:	b083      	sub	sp, #12
   10a58:	af00      	add	r7, sp, #0
   10a5a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   10a5c:	687b      	ldr	r3, [r7, #4]
   10a5e:	4618      	mov	r0, r3
   10a60:	370c      	adds	r7, #12
   10a62:	46bd      	mov	sp, r7
   10a64:	bc80      	pop	{r7}
   10a66:	4770      	bx	lr

00010a68 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   10a68:	b580      	push	{r7, lr}
   10a6a:	b084      	sub	sp, #16
   10a6c:	af00      	add	r7, sp, #0
   10a6e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   10a70:	687b      	ldr	r3, [r7, #4]
   10a72:	4a14      	ldr	r2, [pc, #80]	; (10ac4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   10a74:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   10a76:	687b      	ldr	r3, [r7, #4]
   10a78:	4a12      	ldr	r2, [pc, #72]	; (10ac4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   10a7a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   10a7c:	687b      	ldr	r3, [r7, #4]
   10a7e:	691a      	ldr	r2, [r3, #16]
   10a80:	687b      	ldr	r3, [r7, #4]
   10a82:	330c      	adds	r3, #12
   10a84:	4619      	mov	r1, r3
   10a86:	4610      	mov	r0, r2
   10a88:	4b0f      	ldr	r3, [pc, #60]	; (10ac8 <_ZN14I2C_Sync_Class4InitEv+0x60>)
   10a8a:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   10a8c:	687b      	ldr	r3, [r7, #4]
   10a8e:	691b      	ldr	r3, [r3, #16]
   10a90:	4618      	mov	r0, r3
   10a92:	4b0e      	ldr	r3, [pc, #56]	; (10acc <_ZN14I2C_Sync_Class4InitEv+0x64>)
   10a94:	4798      	blx	r3
   10a96:	4603      	mov	r3, r0
   10a98:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   10a9a:	7bfb      	ldrb	r3, [r7, #15]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	bf0c      	ite	eq
   10aa0:	2301      	moveq	r3, #1
   10aa2:	2300      	movne	r3, #0
   10aa4:	b2da      	uxtb	r2, r3
   10aa6:	687b      	ldr	r3, [r7, #4]
   10aa8:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   10aaa:	687b      	ldr	r3, [r7, #4]
   10aac:	7a5b      	ldrb	r3, [r3, #9]
   10aae:	b2da      	uxtb	r2, r3
   10ab0:	687b      	ldr	r3, [r7, #4]
   10ab2:	721a      	strb	r2, [r3, #8]
	return isOK;
   10ab4:	687b      	ldr	r3, [r7, #4]
   10ab6:	7a5b      	ldrb	r3, [r3, #9]
   10ab8:	b2db      	uxtb	r3, r3
	
}
   10aba:	4618      	mov	r0, r3
   10abc:	3710      	adds	r7, #16
   10abe:	46bd      	mov	sp, r7
   10ac0:	bd80      	pop	{r7, pc}
   10ac2:	bf00      	nop
   10ac4:	20007afc 	.word	0x20007afc
   10ac8:	00002b83 	.word	0x00002b83
   10acc:	00002b29 	.word	0x00002b29

00010ad0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   10ad0:	b580      	push	{r7, lr}
   10ad2:	b082      	sub	sp, #8
   10ad4:	af00      	add	r7, sp, #0
   10ad6:	6078      	str	r0, [r7, #4]
   10ad8:	460b      	mov	r3, r1
   10ada:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   10adc:	687b      	ldr	r3, [r7, #4]
   10ade:	691b      	ldr	r3, [r3, #16]
   10ae0:	78fa      	ldrb	r2, [r7, #3]
   10ae2:	b211      	sxth	r1, r2
   10ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10ae8:	4618      	mov	r0, r3
   10aea:	4b03      	ldr	r3, [pc, #12]	; (10af8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   10aec:	4798      	blx	r3
   10aee:	4603      	mov	r3, r0
}
   10af0:	4618      	mov	r0, r3
   10af2:	3708      	adds	r7, #8
   10af4:	46bd      	mov	sp, r7
   10af6:	bd80      	pop	{r7, pc}
   10af8:	00002b49 	.word	0x00002b49

00010afc <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   10afc:	b580      	push	{r7, lr}
   10afe:	b086      	sub	sp, #24
   10b00:	af00      	add	r7, sp, #0
   10b02:	60f8      	str	r0, [r7, #12]
   10b04:	60b9      	str	r1, [r7, #8]
   10b06:	4613      	mov	r3, r2
   10b08:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   10b0a:	68f8      	ldr	r0, [r7, #12]
   10b0c:	4b08      	ldr	r3, [pc, #32]	; (10b30 <_ZN14I2C_Sync_Class5WriteEPht+0x34>)
   10b0e:	4798      	blx	r3
	int32_t w= io_write(I2C_io, buffer, lenght);
   10b10:	68fb      	ldr	r3, [r7, #12]
   10b12:	68db      	ldr	r3, [r3, #12]
   10b14:	88fa      	ldrh	r2, [r7, #6]
   10b16:	68b9      	ldr	r1, [r7, #8]
   10b18:	4618      	mov	r0, r3
   10b1a:	4b06      	ldr	r3, [pc, #24]	; (10b34 <_ZN14I2C_Sync_Class5WriteEPht+0x38>)
   10b1c:	4798      	blx	r3
   10b1e:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   10b20:	68f8      	ldr	r0, [r7, #12]
   10b22:	4b05      	ldr	r3, [pc, #20]	; (10b38 <_ZN14I2C_Sync_Class5WriteEPht+0x3c>)
   10b24:	4798      	blx	r3
	return w;
   10b26:	697b      	ldr	r3, [r7, #20]
}
   10b28:	4618      	mov	r0, r3
   10b2a:	3718      	adds	r7, #24
   10b2c:	46bd      	mov	sp, r7
   10b2e:	bd80      	pop	{r7, pc}
   10b30:	00010b95 	.word	0x00010b95
   10b34:	0001262d 	.word	0x0001262d
   10b38:	00010b7d 	.word	0x00010b7d

00010b3c <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   10b3c:	b580      	push	{r7, lr}
   10b3e:	b086      	sub	sp, #24
   10b40:	af00      	add	r7, sp, #0
   10b42:	60f8      	str	r0, [r7, #12]
   10b44:	60b9      	str	r1, [r7, #8]
   10b46:	4613      	mov	r3, r2
   10b48:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   10b4a:	68f8      	ldr	r0, [r7, #12]
   10b4c:	4b08      	ldr	r3, [pc, #32]	; (10b70 <_ZN14I2C_Sync_Class4ReadEPht+0x34>)
   10b4e:	4798      	blx	r3
	int32_t r= io_read(I2C_io, buffer, lenght);
   10b50:	68fb      	ldr	r3, [r7, #12]
   10b52:	68db      	ldr	r3, [r3, #12]
   10b54:	88fa      	ldrh	r2, [r7, #6]
   10b56:	68b9      	ldr	r1, [r7, #8]
   10b58:	4618      	mov	r0, r3
   10b5a:	4b06      	ldr	r3, [pc, #24]	; (10b74 <_ZN14I2C_Sync_Class4ReadEPht+0x38>)
   10b5c:	4798      	blx	r3
   10b5e:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   10b60:	68f8      	ldr	r0, [r7, #12]
   10b62:	4b05      	ldr	r3, [pc, #20]	; (10b78 <_ZN14I2C_Sync_Class4ReadEPht+0x3c>)
   10b64:	4798      	blx	r3
	return r;
   10b66:	697b      	ldr	r3, [r7, #20]
}
   10b68:	4618      	mov	r0, r3
   10b6a:	3718      	adds	r7, #24
   10b6c:	46bd      	mov	sp, r7
   10b6e:	bd80      	pop	{r7, pc}
   10b70:	00010b95 	.word	0x00010b95
   10b74:	0001267d 	.word	0x0001267d
   10b78:	00010b7d 	.word	0x00010b7d

00010b7c <_ZN14I2C_Sync_Class10Irq_EnableEv>:
	Irq_Disable();
	int32_t w= i2c_m_sync_cmd_write(ptrI2CDescr,cmd,buffer,lenght);
	Irq_Enable();
	return w;
}
void	I2C_Sync_Class::Irq_Enable(void){
   10b7c:	b480      	push	{r7}
   10b7e:	b083      	sub	sp, #12
   10b80:	af00      	add	r7, sp, #0
   10b82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   10b84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10b88:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   10b8a:	bf00      	nop
   10b8c:	370c      	adds	r7, #12
   10b8e:	46bd      	mov	sp, r7
   10b90:	bc80      	pop	{r7}
   10b92:	4770      	bx	lr

00010b94 <_ZN14I2C_Sync_Class11Irq_DisableEv>:
void	I2C_Sync_Class::Irq_Disable(void){
   10b94:	b480      	push	{r7}
   10b96:	b083      	sub	sp, #12
   10b98:	af00      	add	r7, sp, #0
   10b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   10b9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   10ba0:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   10ba2:	bf00      	nop
   10ba4:	370c      	adds	r7, #12
   10ba6:	46bd      	mov	sp, r7
   10ba8:	bc80      	pop	{r7}
   10baa:	4770      	bx	lr

00010bac <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   10bac:	b480      	push	{r7}
   10bae:	b083      	sub	sp, #12
   10bb0:	af00      	add	r7, sp, #0
   10bb2:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   10bb4:	687b      	ldr	r3, [r7, #4]
   10bb6:	4618      	mov	r0, r3
   10bb8:	370c      	adds	r7, #12
   10bba:	46bd      	mov	sp, r7
   10bbc:	bc80      	pop	{r7}
   10bbe:	4770      	bx	lr

00010bc0 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   10bc0:	b480      	push	{r7}
   10bc2:	b083      	sub	sp, #12
   10bc4:	af00      	add	r7, sp, #0
   10bc6:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   10bc8:	687b      	ldr	r3, [r7, #4]
   10bca:	4618      	mov	r0, r3
   10bcc:	370c      	adds	r7, #12
   10bce:	46bd      	mov	sp, r7
   10bd0:	bc80      	pop	{r7}
   10bd2:	4770      	bx	lr

00010bd4 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   10bd4:	b480      	push	{r7}
   10bd6:	b085      	sub	sp, #20
   10bd8:	af00      	add	r7, sp, #0
   10bda:	6078      	str	r0, [r7, #4]
   10bdc:	460b      	mov	r3, r1
   10bde:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   10be0:	2300      	movs	r3, #0
   10be2:	73fb      	strb	r3, [r7, #15]
   10be4:	7bfb      	ldrb	r3, [r7, #15]
   10be6:	2b01      	cmp	r3, #1
   10be8:	dc13      	bgt.n	10c12 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   10bea:	7bfb      	ldrb	r3, [r7, #15]
   10bec:	78f9      	ldrb	r1, [r7, #3]
   10bee:	7bfa      	ldrb	r2, [r7, #15]
   10bf0:	2080      	movs	r0, #128	; 0x80
   10bf2:	fa40 f202 	asr.w	r2, r0, r2
   10bf6:	400a      	ands	r2, r1
   10bf8:	2a00      	cmp	r2, #0
   10bfa:	bfcc      	ite	gt
   10bfc:	2201      	movgt	r2, #1
   10bfe:	2200      	movle	r2, #0
   10c00:	b2d1      	uxtb	r1, r2
   10c02:	687a      	ldr	r2, [r7, #4]
   10c04:	4413      	add	r3, r2
   10c06:	460a      	mov	r2, r1
   10c08:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
   10c0a:	7bfb      	ldrb	r3, [r7, #15]
   10c0c:	3301      	adds	r3, #1
   10c0e:	73fb      	strb	r3, [r7, #15]
   10c10:	e7e8      	b.n	10be4 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   10c12:	bf00      	nop
   10c14:	3714      	adds	r7, #20
   10c16:	46bd      	mov	sp, r7
   10c18:	bc80      	pop	{r7}
   10c1a:	4770      	bx	lr

00010c1c <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   10c1c:	b480      	push	{r7}
   10c1e:	b085      	sub	sp, #20
   10c20:	af00      	add	r7, sp, #0
   10c22:	6078      	str	r0, [r7, #4]
   10c24:	460b      	mov	r3, r1
   10c26:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   10c28:	2300      	movs	r3, #0
   10c2a:	73fb      	strb	r3, [r7, #15]
   10c2c:	7bfb      	ldrb	r3, [r7, #15]
   10c2e:	2b02      	cmp	r3, #2
   10c30:	dc15      	bgt.n	10c5e <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   10c32:	7bfb      	ldrb	r3, [r7, #15]
   10c34:	f1c3 0302 	rsb	r3, r3, #2
   10c38:	78f9      	ldrb	r1, [r7, #3]
   10c3a:	7bfa      	ldrb	r2, [r7, #15]
   10c3c:	2020      	movs	r0, #32
   10c3e:	fa40 f202 	asr.w	r2, r0, r2
   10c42:	400a      	ands	r2, r1
   10c44:	2a00      	cmp	r2, #0
   10c46:	bfcc      	ite	gt
   10c48:	2201      	movgt	r2, #1
   10c4a:	2200      	movle	r2, #0
   10c4c:	b2d1      	uxtb	r1, r2
   10c4e:	687a      	ldr	r2, [r7, #4]
   10c50:	4413      	add	r3, r2
   10c52:	460a      	mov	r2, r1
   10c54:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
   10c56:	7bfb      	ldrb	r3, [r7, #15]
   10c58:	3301      	adds	r3, #1
   10c5a:	73fb      	strb	r3, [r7, #15]
   10c5c:	e7e6      	b.n	10c2c <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   10c5e:	bf00      	nop
   10c60:	3714      	adds	r7, #20
   10c62:	46bd      	mov	sp, r7
   10c64:	bc80      	pop	{r7}
   10c66:	4770      	bx	lr

00010c68 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   10c68:	b580      	push	{r7, lr}
   10c6a:	b084      	sub	sp, #16
   10c6c:	af00      	add	r7, sp, #0
   10c6e:	60f8      	str	r0, [r7, #12]
   10c70:	60b9      	str	r1, [r7, #8]
   10c72:	4613      	mov	r3, r2
   10c74:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   10c76:	79fb      	ldrb	r3, [r7, #7]
   10c78:	4619      	mov	r1, r3
   10c7a:	68b8      	ldr	r0, [r7, #8]
   10c7c:	4b0d      	ldr	r3, [pc, #52]	; (10cb4 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   10c7e:	4798      	blx	r3
	FillLimitSwitch(v);
   10c80:	79fb      	ldrb	r3, [r7, #7]
   10c82:	4619      	mov	r1, r3
   10c84:	68b8      	ldr	r0, [r7, #8]
   10c86:	4b0c      	ldr	r3, [pc, #48]	; (10cb8 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   10c88:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   10c8a:	79fb      	ldrb	r3, [r7, #7]
   10c8c:	f003 0301 	and.w	r3, r3, #1
   10c90:	2b00      	cmp	r3, #0
   10c92:	bfcc      	ite	gt
   10c94:	2301      	movgt	r3, #1
   10c96:	2300      	movle	r3, #0
   10c98:	b2da      	uxtb	r2, r3
   10c9a:	68bb      	ldr	r3, [r7, #8]
   10c9c:	765a      	strb	r2, [r3, #25]
	return controlStatus;
   10c9e:	68fa      	ldr	r2, [r7, #12]
   10ca0:	68bb      	ldr	r3, [r7, #8]
   10ca2:	3314      	adds	r3, #20
   10ca4:	6819      	ldr	r1, [r3, #0]
   10ca6:	6011      	str	r1, [r2, #0]
   10ca8:	889b      	ldrh	r3, [r3, #4]
   10caa:	8093      	strh	r3, [r2, #4]
}
   10cac:	68f8      	ldr	r0, [r7, #12]
   10cae:	3710      	adds	r7, #16
   10cb0:	46bd      	mov	sp, r7
   10cb2:	bd80      	pop	{r7, pc}
   10cb4:	00010bd5 	.word	0x00010bd5
   10cb8:	00010c1d 	.word	0x00010c1d

00010cbc <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   10cbc:	b480      	push	{r7}
   10cbe:	b085      	sub	sp, #20
   10cc0:	af00      	add	r7, sp, #0
   10cc2:	60f8      	str	r0, [r7, #12]
   10cc4:	60b9      	str	r1, [r7, #8]
   10cc6:	4613      	mov	r3, r2
   10cc8:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
   10cca:	68bb      	ldr	r3, [r7, #8]
   10ccc:	7d5b      	ldrb	r3, [r3, #21]
   10cce:	f083 0301 	eor.w	r3, r3, #1
   10cd2:	b2db      	uxtb	r3, r3
   10cd4:	f003 0301 	and.w	r3, r3, #1
   10cd8:	2b00      	cmp	r3, #0
   10cda:	d004      	beq.n	10ce6 <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
   10cdc:	68bb      	ldr	r3, [r7, #8]
   10cde:	7d1a      	ldrb	r2, [r3, #20]
   10ce0:	68bb      	ldr	r3, [r7, #8]
   10ce2:	769a      	strb	r2, [r3, #26]
   10ce4:	e009      	b.n	10cfa <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   10ce6:	79fb      	ldrb	r3, [r7, #7]
   10ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10cec:	2b00      	cmp	r3, #0
   10cee:	bfcc      	ite	gt
   10cf0:	2301      	movgt	r3, #1
   10cf2:	2300      	movle	r3, #0
   10cf4:	b2da      	uxtb	r2, r3
   10cf6:	68bb      	ldr	r3, [r7, #8]
   10cf8:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   10cfa:	79fb      	ldrb	r3, [r7, #7]
   10cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10d00:	2b00      	cmp	r3, #0
   10d02:	bfcc      	ite	gt
   10d04:	2301      	movgt	r3, #1
   10d06:	2300      	movle	r3, #0
   10d08:	b2da      	uxtb	r2, r3
   10d0a:	68bb      	ldr	r3, [r7, #8]
   10d0c:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   10d0e:	79fb      	ldrb	r3, [r7, #7]
   10d10:	f003 0320 	and.w	r3, r3, #32
   10d14:	2b00      	cmp	r3, #0
   10d16:	bfcc      	ite	gt
   10d18:	2301      	movgt	r3, #1
   10d1a:	2300      	movle	r3, #0
   10d1c:	b2da      	uxtb	r2, r3
   10d1e:	68bb      	ldr	r3, [r7, #8]
   10d20:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   10d22:	79fb      	ldrb	r3, [r7, #7]
   10d24:	f003 0310 	and.w	r3, r3, #16
   10d28:	2b00      	cmp	r3, #0
   10d2a:	bfcc      	ite	gt
   10d2c:	2301      	movgt	r3, #1
   10d2e:	2300      	movle	r3, #0
   10d30:	b2da      	uxtb	r2, r3
   10d32:	68bb      	ldr	r3, [r7, #8]
   10d34:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   10d36:	79fb      	ldrb	r3, [r7, #7]
   10d38:	f003 0308 	and.w	r3, r3, #8
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	bfcc      	ite	gt
   10d40:	2301      	movgt	r3, #1
   10d42:	2300      	movle	r3, #0
   10d44:	b2da      	uxtb	r2, r3
   10d46:	68bb      	ldr	r3, [r7, #8]
   10d48:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   10d4a:	79fb      	ldrb	r3, [r7, #7]
   10d4c:	f003 0304 	and.w	r3, r3, #4
   10d50:	2b00      	cmp	r3, #0
   10d52:	bfcc      	ite	gt
   10d54:	2301      	movgt	r3, #1
   10d56:	2300      	movle	r3, #0
   10d58:	b2da      	uxtb	r2, r3
   10d5a:	68bb      	ldr	r3, [r7, #8]
   10d5c:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   10d5e:	79fb      	ldrb	r3, [r7, #7]
   10d60:	f003 0302 	and.w	r3, r3, #2
   10d64:	2b00      	cmp	r3, #0
   10d66:	bfcc      	ite	gt
   10d68:	2301      	movgt	r3, #1
   10d6a:	2300      	movle	r3, #0
   10d6c:	b2da      	uxtb	r2, r3
   10d6e:	68bb      	ldr	r3, [r7, #8]
   10d70:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   10d74:	79fb      	ldrb	r3, [r7, #7]
   10d76:	f003 0301 	and.w	r3, r3, #1
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	bfcc      	ite	gt
   10d7e:	2301      	movgt	r3, #1
   10d80:	2300      	movle	r3, #0
   10d82:	b2da      	uxtb	r2, r3
   10d84:	68bb      	ldr	r3, [r7, #8]
   10d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
   10d8a:	68fa      	ldr	r2, [r7, #12]
   10d8c:	68bb      	ldr	r3, [r7, #8]
   10d8e:	331a      	adds	r3, #26
   10d90:	6819      	ldr	r1, [r3, #0]
   10d92:	685b      	ldr	r3, [r3, #4]
   10d94:	6011      	str	r1, [r2, #0]
   10d96:	6053      	str	r3, [r2, #4]
   10d98:	68f8      	ldr	r0, [r7, #12]
   10d9a:	3714      	adds	r7, #20
   10d9c:	46bd      	mov	sp, r7
   10d9e:	bc80      	pop	{r7}
   10da0:	4770      	bx	lr

00010da2 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   10da2:	b480      	push	{r7}
   10da4:	b083      	sub	sp, #12
   10da6:	af00      	add	r7, sp, #0
   10da8:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   10daa:	687b      	ldr	r3, [r7, #4]
   10dac:	4618      	mov	r0, r3
   10dae:	370c      	adds	r7, #12
   10db0:	46bd      	mov	sp, r7
   10db2:	bc80      	pop	{r7}
   10db4:	4770      	bx	lr

00010db6 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   10db6:	b480      	push	{r7}
   10db8:	b083      	sub	sp, #12
   10dba:	af00      	add	r7, sp, #0
   10dbc:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   10dbe:	687b      	ldr	r3, [r7, #4]
   10dc0:	4618      	mov	r0, r3
   10dc2:	370c      	adds	r7, #12
   10dc4:	46bd      	mov	sp, r7
   10dc6:	bc80      	pop	{r7}
   10dc8:	4770      	bx	lr

00010dca <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   10dca:	b480      	push	{r7}
   10dcc:	b085      	sub	sp, #20
   10dce:	af00      	add	r7, sp, #0
   10dd0:	60f8      	str	r0, [r7, #12]
   10dd2:	460b      	mov	r3, r1
   10dd4:	607a      	str	r2, [r7, #4]
   10dd6:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   10dd8:	687b      	ldr	r3, [r7, #4]
   10dda:	681a      	ldr	r2, [r3, #0]
   10ddc:	68fb      	ldr	r3, [r7, #12]
   10dde:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   10de0:	687b      	ldr	r3, [r7, #4]
   10de2:	685a      	ldr	r2, [r3, #4]
   10de4:	68fb      	ldr	r3, [r7, #12]
   10de6:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   10de8:	68fb      	ldr	r3, [r7, #12]
   10dea:	7afa      	ldrb	r2, [r7, #11]
   10dec:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   10dee:	68fb      	ldr	r3, [r7, #12]
   10df0:	687a      	ldr	r2, [r7, #4]
   10df2:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   10df4:	68fb      	ldr	r3, [r7, #12]
   10df6:	68db      	ldr	r3, [r3, #12]
   10df8:	7a5b      	ldrb	r3, [r3, #9]
   10dfa:	b2da      	uxtb	r2, r3
   10dfc:	68fb      	ldr	r3, [r7, #12]
   10dfe:	719a      	strb	r2, [r3, #6]
	return isOK;
   10e00:	68fb      	ldr	r3, [r7, #12]
   10e02:	799b      	ldrb	r3, [r3, #6]
   10e04:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   10e06:	4618      	mov	r0, r3
   10e08:	3714      	adds	r7, #20
   10e0a:	46bd      	mov	sp, r7
   10e0c:	bc80      	pop	{r7}
   10e0e:	4770      	bx	lr

00010e10 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   10e10:	b480      	push	{r7}
   10e12:	b083      	sub	sp, #12
   10e14:	af00      	add	r7, sp, #0
   10e16:	6078      	str	r0, [r7, #4]
   10e18:	460b      	mov	r3, r1
   10e1a:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   10e1c:	78fb      	ldrb	r3, [r7, #3]
   10e1e:	f003 0307 	and.w	r3, r3, #7
   10e22:	b2db      	uxtb	r3, r3
}
   10e24:	4618      	mov	r0, r3
   10e26:	370c      	adds	r7, #12
   10e28:	46bd      	mov	sp, r7
   10e2a:	bc80      	pop	{r7}
   10e2c:	4770      	bx	lr

00010e2e <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   10e2e:	b480      	push	{r7}
   10e30:	b083      	sub	sp, #12
   10e32:	af00      	add	r7, sp, #0
   10e34:	6078      	str	r0, [r7, #4]
   10e36:	4608      	mov	r0, r1
   10e38:	4611      	mov	r1, r2
   10e3a:	461a      	mov	r2, r3
   10e3c:	4603      	mov	r3, r0
   10e3e:	70fb      	strb	r3, [r7, #3]
   10e40:	460b      	mov	r3, r1
   10e42:	70bb      	strb	r3, [r7, #2]
   10e44:	4613      	mov	r3, r2
   10e46:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   10e48:	78fb      	ldrb	r3, [r7, #3]
   10e4a:	2b07      	cmp	r3, #7
   10e4c:	dc01      	bgt.n	10e52 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   10e4e:	78bb      	ldrb	r3, [r7, #2]
   10e50:	e000      	b.n	10e54 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   10e52:	787b      	ldrb	r3, [r7, #1]
}
   10e54:	4618      	mov	r0, r3
   10e56:	370c      	adds	r7, #12
   10e58:	46bd      	mov	sp, r7
   10e5a:	bc80      	pop	{r7}
   10e5c:	4770      	bx	lr
	...

00010e60 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   10e60:	b580      	push	{r7, lr}
   10e62:	b082      	sub	sp, #8
   10e64:	af00      	add	r7, sp, #0
   10e66:	6078      	str	r0, [r7, #4]
   10e68:	460b      	mov	r3, r1
   10e6a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   10e6c:	687b      	ldr	r3, [r7, #4]
   10e6e:	68da      	ldr	r2, [r3, #12]
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	7a1b      	ldrb	r3, [r3, #8]
   10e74:	4619      	mov	r1, r3
   10e76:	4610      	mov	r0, r2
   10e78:	4b0a      	ldr	r3, [pc, #40]	; (10ea4 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   10e7a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   10e7c:	687b      	ldr	r3, [r7, #4]
   10e7e:	68db      	ldr	r3, [r3, #12]
   10e80:	1cf9      	adds	r1, r7, #3
   10e82:	2201      	movs	r2, #1
   10e84:	4618      	mov	r0, r3
   10e86:	4b08      	ldr	r3, [pc, #32]	; (10ea8 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   10e88:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   10e8a:	687b      	ldr	r3, [r7, #4]
   10e8c:	68db      	ldr	r3, [r3, #12]
   10e8e:	6879      	ldr	r1, [r7, #4]
   10e90:	2201      	movs	r2, #1
   10e92:	4618      	mov	r0, r3
   10e94:	4b05      	ldr	r3, [pc, #20]	; (10eac <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   10e96:	4798      	blx	r3

	return registerValue;
   10e98:	687b      	ldr	r3, [r7, #4]
   10e9a:	781b      	ldrb	r3, [r3, #0]
}
   10e9c:	4618      	mov	r0, r3
   10e9e:	3708      	adds	r7, #8
   10ea0:	46bd      	mov	sp, r7
   10ea2:	bd80      	pop	{r7, pc}
   10ea4:	00010ad1 	.word	0x00010ad1
   10ea8:	00010afd 	.word	0x00010afd
   10eac:	00010b3d 	.word	0x00010b3d

00010eb0 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   10eb0:	b580      	push	{r7, lr}
   10eb2:	b084      	sub	sp, #16
   10eb4:	af00      	add	r7, sp, #0
   10eb6:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   10eb8:	687b      	ldr	r3, [r7, #4]
   10eba:	68da      	ldr	r2, [r3, #12]
   10ebc:	687b      	ldr	r3, [r7, #4]
   10ebe:	7a1b      	ldrb	r3, [r3, #8]
   10ec0:	4619      	mov	r1, r3
   10ec2:	4610      	mov	r0, r2
   10ec4:	4b06      	ldr	r3, [pc, #24]	; (10ee0 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   10ec6:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   10ec8:	2109      	movs	r1, #9
   10eca:	6878      	ldr	r0, [r7, #4]
   10ecc:	4b05      	ldr	r3, [pc, #20]	; (10ee4 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   10ece:	4798      	blx	r3
   10ed0:	4603      	mov	r3, r0
   10ed2:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   10ed4:	7bfb      	ldrb	r3, [r7, #15]
}
   10ed6:	4618      	mov	r0, r3
   10ed8:	3710      	adds	r7, #16
   10eda:	46bd      	mov	sp, r7
   10edc:	bd80      	pop	{r7, pc}
   10ede:	bf00      	nop
   10ee0:	00010ad1 	.word	0x00010ad1
   10ee4:	00010e61 	.word	0x00010e61

00010ee8 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   10ee8:	b580      	push	{r7, lr}
   10eea:	b084      	sub	sp, #16
   10eec:	af00      	add	r7, sp, #0
   10eee:	6078      	str	r0, [r7, #4]
   10ef0:	460b      	mov	r3, r1
   10ef2:	70fb      	strb	r3, [r7, #3]
   10ef4:	4613      	mov	r3, r2
   10ef6:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   10ef8:	687b      	ldr	r3, [r7, #4]
   10efa:	68da      	ldr	r2, [r3, #12]
   10efc:	687b      	ldr	r3, [r7, #4]
   10efe:	7a1b      	ldrb	r3, [r3, #8]
   10f00:	4619      	mov	r1, r3
   10f02:	4610      	mov	r0, r2
   10f04:	4b09      	ldr	r3, [pc, #36]	; (10f2c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   10f06:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   10f08:	78fb      	ldrb	r3, [r7, #3]
   10f0a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   10f0c:	78bb      	ldrb	r3, [r7, #2]
   10f0e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   10f10:	687b      	ldr	r3, [r7, #4]
   10f12:	68db      	ldr	r3, [r3, #12]
   10f14:	f107 010c 	add.w	r1, r7, #12
   10f18:	2202      	movs	r2, #2
   10f1a:	4618      	mov	r0, r3
   10f1c:	4b04      	ldr	r3, [pc, #16]	; (10f30 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   10f1e:	4798      	blx	r3
   10f20:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   10f22:	4618      	mov	r0, r3
   10f24:	3710      	adds	r7, #16
   10f26:	46bd      	mov	sp, r7
   10f28:	bd80      	pop	{r7, pc}
   10f2a:	bf00      	nop
   10f2c:	00010ad1 	.word	0x00010ad1
   10f30:	00010afd 	.word	0x00010afd

00010f34 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   10f34:	b580      	push	{r7, lr}
   10f36:	b082      	sub	sp, #8
   10f38:	af00      	add	r7, sp, #0
   10f3a:	6078      	str	r0, [r7, #4]
   10f3c:	460b      	mov	r3, r1
   10f3e:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   10f40:	687b      	ldr	r3, [r7, #4]
   10f42:	68da      	ldr	r2, [r3, #12]
   10f44:	687b      	ldr	r3, [r7, #4]
   10f46:	7a1b      	ldrb	r3, [r3, #8]
   10f48:	4619      	mov	r1, r3
   10f4a:	4610      	mov	r0, r2
   10f4c:	4b06      	ldr	r3, [pc, #24]	; (10f68 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   10f4e:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   10f50:	78fb      	ldrb	r3, [r7, #3]
   10f52:	461a      	mov	r2, r3
   10f54:	2109      	movs	r1, #9
   10f56:	6878      	ldr	r0, [r7, #4]
   10f58:	4b04      	ldr	r3, [pc, #16]	; (10f6c <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   10f5a:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   10f5c:	78fb      	ldrb	r3, [r7, #3]
}
   10f5e:	4618      	mov	r0, r3
   10f60:	3708      	adds	r7, #8
   10f62:	46bd      	mov	sp, r7
   10f64:	bd80      	pop	{r7, pc}
   10f66:	bf00      	nop
   10f68:	00010ad1 	.word	0x00010ad1
   10f6c:	00010ee9 	.word	0x00010ee9

00010f70 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   10f70:	b580      	push	{r7, lr}
   10f72:	b084      	sub	sp, #16
   10f74:	af00      	add	r7, sp, #0
   10f76:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   10f78:	2300      	movs	r3, #0
   10f7a:	73fb      	strb	r3, [r7, #15]
   10f7c:	7bfb      	ldrb	r3, [r7, #15]
   10f7e:	2b07      	cmp	r3, #7
   10f80:	dc0f      	bgt.n	10fa2 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   10f82:	7bfb      	ldrb	r3, [r7, #15]
   10f84:	2201      	movs	r2, #1
   10f86:	4619      	mov	r1, r3
   10f88:	6878      	ldr	r0, [r7, #4]
   10f8a:	4b08      	ldr	r3, [pc, #32]	; (10fac <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   10f8c:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   10f8e:	7bfb      	ldrb	r3, [r7, #15]
   10f90:	2201      	movs	r2, #1
   10f92:	4619      	mov	r1, r3
   10f94:	6878      	ldr	r0, [r7, #4]
   10f96:	4b06      	ldr	r3, [pc, #24]	; (10fb0 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   10f98:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   10f9a:	7bfb      	ldrb	r3, [r7, #15]
   10f9c:	3301      	adds	r3, #1
   10f9e:	73fb      	strb	r3, [r7, #15]
   10fa0:	e7ec      	b.n	10f7c <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   10fa2:	bf00      	nop
   10fa4:	3710      	adds	r7, #16
   10fa6:	46bd      	mov	sp, r7
   10fa8:	bd80      	pop	{r7, pc}
   10faa:	bf00      	nop
   10fac:	000110e9 	.word	0x000110e9
   10fb0:	000111cd 	.word	0x000111cd

00010fb4 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   10fb4:	b580      	push	{r7, lr}
   10fb6:	b084      	sub	sp, #16
   10fb8:	af00      	add	r7, sp, #0
   10fba:	6078      	str	r0, [r7, #4]
   10fbc:	460b      	mov	r3, r1
   10fbe:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   10fc0:	78fb      	ldrb	r3, [r7, #3]
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	dd23      	ble.n	1100e <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   10fc6:	2300      	movs	r3, #0
   10fc8:	73fb      	strb	r3, [r7, #15]
   10fca:	7bfb      	ldrb	r3, [r7, #15]
   10fcc:	2b07      	cmp	r3, #7
   10fce:	dc21      	bgt.n	11014 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   10fd0:	78fa      	ldrb	r2, [r7, #3]
   10fd2:	7bfb      	ldrb	r3, [r7, #15]
   10fd4:	fa42 f303 	asr.w	r3, r2, r3
   10fd8:	f003 0301 	and.w	r3, r3, #1
   10fdc:	2b00      	cmp	r3, #0
   10fde:	d00c      	beq.n	10ffa <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   10fe0:	7bfb      	ldrb	r3, [r7, #15]
   10fe2:	2201      	movs	r2, #1
   10fe4:	4619      	mov	r1, r3
   10fe6:	6878      	ldr	r0, [r7, #4]
   10fe8:	4b0c      	ldr	r3, [pc, #48]	; (1101c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   10fea:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   10fec:	7bfb      	ldrb	r3, [r7, #15]
   10fee:	2201      	movs	r2, #1
   10ff0:	4619      	mov	r1, r3
   10ff2:	6878      	ldr	r0, [r7, #4]
   10ff4:	4b0a      	ldr	r3, [pc, #40]	; (11020 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   10ff6:	4798      	blx	r3
   10ff8:	e005      	b.n	11006 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   10ffa:	7bfb      	ldrb	r3, [r7, #15]
   10ffc:	2200      	movs	r2, #0
   10ffe:	4619      	mov	r1, r3
   11000:	6878      	ldr	r0, [r7, #4]
   11002:	4b06      	ldr	r3, [pc, #24]	; (1101c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11004:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   11006:	7bfb      	ldrb	r3, [r7, #15]
   11008:	3301      	adds	r3, #1
   1100a:	73fb      	strb	r3, [r7, #15]
   1100c:	e7dd      	b.n	10fca <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   1100e:	6878      	ldr	r0, [r7, #4]
   11010:	4b04      	ldr	r3, [pc, #16]	; (11024 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   11012:	4798      	blx	r3
	}
	
}
   11014:	bf00      	nop
   11016:	3710      	adds	r7, #16
   11018:	46bd      	mov	sp, r7
   1101a:	bd80      	pop	{r7, pc}
   1101c:	000110e9 	.word	0x000110e9
   11020:	000111cd 	.word	0x000111cd
   11024:	00011029 	.word	0x00011029

00011028 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   11028:	b580      	push	{r7, lr}
   1102a:	b084      	sub	sp, #16
   1102c:	af00      	add	r7, sp, #0
   1102e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   11030:	2300      	movs	r3, #0
   11032:	73fb      	strb	r3, [r7, #15]
   11034:	7bfb      	ldrb	r3, [r7, #15]
   11036:	2b07      	cmp	r3, #7
   11038:	dc09      	bgt.n	1104e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   1103a:	7bfb      	ldrb	r3, [r7, #15]
   1103c:	2200      	movs	r2, #0
   1103e:	4619      	mov	r1, r3
   11040:	6878      	ldr	r0, [r7, #4]
   11042:	4b05      	ldr	r3, [pc, #20]	; (11058 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   11044:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11046:	7bfb      	ldrb	r3, [r7, #15]
   11048:	3301      	adds	r3, #1
   1104a:	73fb      	strb	r3, [r7, #15]
   1104c:	e7f2      	b.n	11034 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   1104e:	bf00      	nop
   11050:	3710      	adds	r7, #16
   11052:	46bd      	mov	sp, r7
   11054:	bd80      	pop	{r7, pc}
   11056:	bf00      	nop
   11058:	000110e9 	.word	0x000110e9

0001105c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   1105c:	b580      	push	{r7, lr}
   1105e:	b084      	sub	sp, #16
   11060:	af00      	add	r7, sp, #0
   11062:	6078      	str	r0, [r7, #4]
   11064:	4608      	mov	r0, r1
   11066:	4611      	mov	r1, r2
   11068:	461a      	mov	r2, r3
   1106a:	4603      	mov	r3, r0
   1106c:	70fb      	strb	r3, [r7, #3]
   1106e:	460b      	mov	r3, r1
   11070:	70bb      	strb	r3, [r7, #2]
   11072:	4613      	mov	r3, r2
   11074:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   11076:	787b      	ldrb	r3, [r7, #1]
   11078:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   1107a:	78fb      	ldrb	r3, [r7, #3]
   1107c:	4619      	mov	r1, r3
   1107e:	6878      	ldr	r0, [r7, #4]
   11080:	4b16      	ldr	r3, [pc, #88]	; (110dc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   11082:	4798      	blx	r3
   11084:	4603      	mov	r3, r0
   11086:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   11088:	7bfb      	ldrb	r3, [r7, #15]
   1108a:	4619      	mov	r1, r3
   1108c:	6878      	ldr	r0, [r7, #4]
   1108e:	4b14      	ldr	r3, [pc, #80]	; (110e0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   11090:	4798      	blx	r3
   11092:	4603      	mov	r3, r0
   11094:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   11096:	78bb      	ldrb	r3, [r7, #2]
   11098:	2b00      	cmp	r3, #0
   1109a:	d009      	beq.n	110b0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   1109c:	7bba      	ldrb	r2, [r7, #14]
   1109e:	7b7b      	ldrb	r3, [r7, #13]
   110a0:	4619      	mov	r1, r3
   110a2:	2301      	movs	r3, #1
   110a4:	408b      	lsls	r3, r1
   110a6:	b2db      	uxtb	r3, r3
   110a8:	4313      	orrs	r3, r2
   110aa:	b2db      	uxtb	r3, r3
   110ac:	73bb      	strb	r3, [r7, #14]
   110ae:	e00a      	b.n	110c6 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   110b0:	7bba      	ldrb	r2, [r7, #14]
   110b2:	7b7b      	ldrb	r3, [r7, #13]
   110b4:	4619      	mov	r1, r3
   110b6:	2301      	movs	r3, #1
   110b8:	408b      	lsls	r3, r1
   110ba:	b2db      	uxtb	r3, r3
   110bc:	43db      	mvns	r3, r3
   110be:	b2db      	uxtb	r3, r3
   110c0:	4013      	ands	r3, r2
   110c2:	b2db      	uxtb	r3, r3
   110c4:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   110c6:	7bba      	ldrb	r2, [r7, #14]
   110c8:	7bfb      	ldrb	r3, [r7, #15]
   110ca:	4619      	mov	r1, r3
   110cc:	6878      	ldr	r0, [r7, #4]
   110ce:	4b05      	ldr	r3, [pc, #20]	; (110e4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   110d0:	4798      	blx	r3
}
   110d2:	bf00      	nop
   110d4:	3710      	adds	r7, #16
   110d6:	46bd      	mov	sp, r7
   110d8:	bd80      	pop	{r7, pc}
   110da:	bf00      	nop
   110dc:	00010e11 	.word	0x00010e11
   110e0:	00010e61 	.word	0x00010e61
   110e4:	00010ee9 	.word	0x00010ee9

000110e8 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   110e8:	b590      	push	{r4, r7, lr}
   110ea:	b085      	sub	sp, #20
   110ec:	af02      	add	r7, sp, #8
   110ee:	6078      	str	r0, [r7, #4]
   110f0:	460b      	mov	r3, r1
   110f2:	70fb      	strb	r3, [r7, #3]
   110f4:	4613      	mov	r3, r2
   110f6:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   110f8:	78bb      	ldrb	r3, [r7, #2]
   110fa:	2b01      	cmp	r3, #1
   110fc:	bf0c      	ite	eq
   110fe:	2301      	moveq	r3, #1
   11100:	2300      	movne	r3, #0
   11102:	b2db      	uxtb	r3, r3
   11104:	461a      	mov	r2, r3
   11106:	78f9      	ldrb	r1, [r7, #3]
   11108:	2300      	movs	r3, #0
   1110a:	9300      	str	r3, [sp, #0]
   1110c:	2300      	movs	r3, #0
   1110e:	6878      	ldr	r0, [r7, #4]
   11110:	4c02      	ldr	r4, [pc, #8]	; (1111c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   11112:	47a0      	blx	r4
}
   11114:	bf00      	nop
   11116:	370c      	adds	r7, #12
   11118:	46bd      	mov	sp, r7
   1111a:	bd90      	pop	{r4, r7, pc}
   1111c:	0001105d 	.word	0x0001105d

00011120 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   11120:	b590      	push	{r4, r7, lr}
   11122:	b085      	sub	sp, #20
   11124:	af00      	add	r7, sp, #0
   11126:	6078      	str	r0, [r7, #4]
   11128:	460b      	mov	r3, r1
   1112a:	70fb      	strb	r3, [r7, #3]
   1112c:	4613      	mov	r3, r2
   1112e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   11130:	78fb      	ldrb	r3, [r7, #3]
   11132:	4619      	mov	r1, r3
   11134:	6878      	ldr	r0, [r7, #4]
   11136:	4b21      	ldr	r3, [pc, #132]	; (111bc <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   11138:	4798      	blx	r3
   1113a:	4603      	mov	r3, r0
   1113c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   1113e:	78f9      	ldrb	r1, [r7, #3]
   11140:	230a      	movs	r3, #10
   11142:	220a      	movs	r2, #10
   11144:	6878      	ldr	r0, [r7, #4]
   11146:	4c1e      	ldr	r4, [pc, #120]	; (111c0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11148:	47a0      	blx	r4
   1114a:	4603      	mov	r3, r0
   1114c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   1114e:	7bfb      	ldrb	r3, [r7, #15]
   11150:	4619      	mov	r1, r3
   11152:	6878      	ldr	r0, [r7, #4]
   11154:	4b1b      	ldr	r3, [pc, #108]	; (111c4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   11156:	4798      	blx	r3
   11158:	4603      	mov	r3, r0
   1115a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   1115c:	78bb      	ldrb	r3, [r7, #2]
   1115e:	2b00      	cmp	r3, #0
   11160:	d009      	beq.n	11176 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   11162:	7bba      	ldrb	r2, [r7, #14]
   11164:	7b7b      	ldrb	r3, [r7, #13]
   11166:	4619      	mov	r1, r3
   11168:	2301      	movs	r3, #1
   1116a:	408b      	lsls	r3, r1
   1116c:	b2db      	uxtb	r3, r3
   1116e:	4313      	orrs	r3, r2
   11170:	b2db      	uxtb	r3, r3
   11172:	73bb      	strb	r3, [r7, #14]
   11174:	e00a      	b.n	1118c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   11176:	7bba      	ldrb	r2, [r7, #14]
   11178:	7b7b      	ldrb	r3, [r7, #13]
   1117a:	4619      	mov	r1, r3
   1117c:	2301      	movs	r3, #1
   1117e:	408b      	lsls	r3, r1
   11180:	b2db      	uxtb	r3, r3
   11182:	43db      	mvns	r3, r3
   11184:	b2db      	uxtb	r3, r3
   11186:	4013      	ands	r3, r2
   11188:	b2db      	uxtb	r3, r3
   1118a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   1118c:	78f9      	ldrb	r1, [r7, #3]
   1118e:	2309      	movs	r3, #9
   11190:	2209      	movs	r2, #9
   11192:	6878      	ldr	r0, [r7, #4]
   11194:	4c0a      	ldr	r4, [pc, #40]	; (111c0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11196:	47a0      	blx	r4
   11198:	4603      	mov	r3, r0
   1119a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   1119c:	7bba      	ldrb	r2, [r7, #14]
   1119e:	7bfb      	ldrb	r3, [r7, #15]
   111a0:	4619      	mov	r1, r3
   111a2:	6878      	ldr	r0, [r7, #4]
   111a4:	4b08      	ldr	r3, [pc, #32]	; (111c8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   111a6:	4798      	blx	r3
   111a8:	4603      	mov	r3, r0
   111aa:	2b00      	cmp	r3, #0
   111ac:	bf0c      	ite	eq
   111ae:	2301      	moveq	r3, #1
   111b0:	2300      	movne	r3, #0
   111b2:	b2db      	uxtb	r3, r3
}
   111b4:	4618      	mov	r0, r3
   111b6:	3714      	adds	r7, #20
   111b8:	46bd      	mov	sp, r7
   111ba:	bd90      	pop	{r4, r7, pc}
   111bc:	00010e11 	.word	0x00010e11
   111c0:	00010e2f 	.word	0x00010e2f
   111c4:	00010e61 	.word	0x00010e61
   111c8:	00010ee9 	.word	0x00010ee9

000111cc <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   111cc:	b590      	push	{r4, r7, lr}
   111ce:	b085      	sub	sp, #20
   111d0:	af02      	add	r7, sp, #8
   111d2:	6078      	str	r0, [r7, #4]
   111d4:	460b      	mov	r3, r1
   111d6:	70fb      	strb	r3, [r7, #3]
   111d8:	4613      	mov	r3, r2
   111da:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   111dc:	78ba      	ldrb	r2, [r7, #2]
   111de:	78f9      	ldrb	r1, [r7, #3]
   111e0:	2306      	movs	r3, #6
   111e2:	9300      	str	r3, [sp, #0]
   111e4:	2306      	movs	r3, #6
   111e6:	6878      	ldr	r0, [r7, #4]
   111e8:	4c02      	ldr	r4, [pc, #8]	; (111f4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   111ea:	47a0      	blx	r4
}
   111ec:	bf00      	nop
   111ee:	370c      	adds	r7, #12
   111f0:	46bd      	mov	sp, r7
   111f2:	bd90      	pop	{r4, r7, pc}
   111f4:	0001105d 	.word	0x0001105d

000111f8 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   111f8:	b480      	push	{r7}
   111fa:	b083      	sub	sp, #12
   111fc:	af00      	add	r7, sp, #0
   111fe:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   11200:	4b04      	ldr	r3, [pc, #16]	; (11214 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   11202:	681b      	ldr	r3, [r3, #0]
   11204:	2201      	movs	r2, #1
   11206:	709a      	strb	r2, [r3, #2]
	asm("nop");
   11208:	bf00      	nop
}
   1120a:	bf00      	nop
   1120c:	370c      	adds	r7, #12
   1120e:	46bd      	mov	sp, r7
   11210:	bc80      	pop	{r7}
   11212:	4770      	bx	lr
   11214:	20007b7c 	.word	0x20007b7c

00011218 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   11218:	b480      	push	{r7}
   1121a:	b083      	sub	sp, #12
   1121c:	af00      	add	r7, sp, #0
   1121e:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   11220:	687b      	ldr	r3, [r7, #4]
   11222:	4618      	mov	r0, r3
   11224:	370c      	adds	r7, #12
   11226:	46bd      	mov	sp, r7
   11228:	bc80      	pop	{r7}
   1122a:	4770      	bx	lr

0001122c <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   1122c:	b480      	push	{r7}
   1122e:	b083      	sub	sp, #12
   11230:	af00      	add	r7, sp, #0
   11232:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   11234:	687b      	ldr	r3, [r7, #4]
   11236:	4618      	mov	r0, r3
   11238:	370c      	adds	r7, #12
   1123a:	46bd      	mov	sp, r7
   1123c:	bc80      	pop	{r7}
   1123e:	4770      	bx	lr

00011240 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   11240:	b580      	push	{r7, lr}
   11242:	b084      	sub	sp, #16
   11244:	af00      	add	r7, sp, #0
   11246:	60f8      	str	r0, [r7, #12]
   11248:	60b9      	str	r1, [r7, #8]
   1124a:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   1124c:	4a1c      	ldr	r2, [pc, #112]	; (112c0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   1124e:	68fb      	ldr	r3, [r7, #12]
   11250:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   11252:	68fb      	ldr	r3, [r7, #12]
   11254:	68ba      	ldr	r2, [r7, #8]
   11256:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   11258:	68fb      	ldr	r3, [r7, #12]
   1125a:	687a      	ldr	r2, [r7, #4]
   1125c:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   1125e:	68fb      	ldr	r3, [r7, #12]
   11260:	6a1b      	ldr	r3, [r3, #32]
   11262:	68da      	ldr	r2, [r3, #12]
   11264:	68fb      	ldr	r3, [r7, #12]
   11266:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   11268:	68fb      	ldr	r3, [r7, #12]
   1126a:	6a1b      	ldr	r3, [r3, #32]
   1126c:	689a      	ldr	r2, [r3, #8]
   1126e:	68fb      	ldr	r3, [r7, #12]
   11270:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   11272:	68fb      	ldr	r3, [r7, #12]
   11274:	4a13      	ldr	r2, [pc, #76]	; (112c4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   11276:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   11278:	68fb      	ldr	r3, [r7, #12]
   1127a:	2204      	movs	r2, #4
   1127c:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   1127e:	68fb      	ldr	r3, [r7, #12]
   11280:	2209      	movs	r2, #9
   11282:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   11284:	68fb      	ldr	r3, [r7, #12]
   11286:	220e      	movs	r2, #14
   11288:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   1128a:	68fb      	ldr	r3, [r7, #12]
   1128c:	2213      	movs	r2, #19
   1128e:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   11290:	20c8      	movs	r0, #200	; 0xc8
   11292:	4b0d      	ldr	r3, [pc, #52]	; (112c8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   11294:	4798      	blx	r3
	temperatureTimer.Init();
   11296:	480d      	ldr	r0, [pc, #52]	; (112cc <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   11298:	4b0d      	ldr	r3, [pc, #52]	; (112d0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   1129a:	4798      	blx	r3
	configure_channels();
   1129c:	68f8      	ldr	r0, [r7, #12]
   1129e:	4b0d      	ldr	r3, [pc, #52]	; (112d4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   112a0:	4798      	blx	r3
	configure_global_parameters();
   112a2:	68f8      	ldr	r0, [r7, #12]
   112a4:	4b0c      	ldr	r3, [pc, #48]	; (112d8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   112a6:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   112a8:	68fb      	ldr	r3, [r7, #12]
   112aa:	2201      	movs	r2, #1
   112ac:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   112ae:	68f8      	ldr	r0, [r7, #12]
   112b0:	4b0a      	ldr	r3, [pc, #40]	; (112dc <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   112b2:	4798      	blx	r3
   112b4:	4603      	mov	r3, r0
}
   112b6:	4618      	mov	r0, r3
   112b8:	3710      	adds	r7, #16
   112ba:	46bd      	mov	sp, r7
   112bc:	bd80      	pop	{r7, pc}
   112be:	bf00      	nop
   112c0:	20007b7c 	.word	0x20007b7c
   112c4:	20000f50 	.word	0x20000f50
   112c8:	000027b9 	.word	0x000027b9
   112cc:	20000f18 	.word	0x20000f18
   112d0:	0000d959 	.word	0x0000d959
   112d4:	000116e9 	.word	0x000116e9
   112d8:	000117a1 	.word	0x000117a1
   112dc:	000117d9 	.word	0x000117d9

000112e0 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   112e0:	b590      	push	{r4, r7, lr}
   112e2:	b089      	sub	sp, #36	; 0x24
   112e4:	af02      	add	r7, sp, #8
   112e6:	60f8      	str	r0, [r7, #12]
   112e8:	60b9      	str	r1, [r7, #8]
   112ea:	603b      	str	r3, [r7, #0]
   112ec:	4613      	mov	r3, r2
   112ee:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   112f0:	79fb      	ldrb	r3, [r7, #7]
   112f2:	461a      	mov	r2, r3
   112f4:	f44f 7100 	mov.w	r1, #512	; 0x200
   112f8:	68f8      	ldr	r0, [r7, #12]
   112fa:	4b0b      	ldr	r3, [pc, #44]	; (11328 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   112fc:	4798      	blx	r3
   112fe:	4603      	mov	r3, r0
   11300:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   11302:	8afa      	ldrh	r2, [r7, #22]
   11304:	683b      	ldr	r3, [r7, #0]
   11306:	9300      	str	r3, [sp, #0]
   11308:	4613      	mov	r3, r2
   1130a:	2202      	movs	r2, #2
   1130c:	68b9      	ldr	r1, [r7, #8]
   1130e:	68f8      	ldr	r0, [r7, #12]
   11310:	4c06      	ldr	r4, [pc, #24]	; (1132c <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   11312:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   11314:	8afb      	ldrh	r3, [r7, #22]
   11316:	79fa      	ldrb	r2, [r7, #7]
   11318:	68b9      	ldr	r1, [r7, #8]
   1131a:	68f8      	ldr	r0, [r7, #12]
   1131c:	4c04      	ldr	r4, [pc, #16]	; (11330 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   1131e:	47a0      	blx	r4
}
   11320:	bf00      	nop
   11322:	371c      	adds	r7, #28
   11324:	46bd      	mov	sp, r7
   11326:	bd90      	pop	{r4, r7, pc}
   11328:	000116bd 	.word	0x000116bd
   1132c:	0001157d 	.word	0x0001157d
   11330:	00011381 	.word	0x00011381

00011334 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   11334:	b590      	push	{r4, r7, lr}
   11336:	b087      	sub	sp, #28
   11338:	af02      	add	r7, sp, #8
   1133a:	6078      	str	r0, [r7, #4]
   1133c:	460b      	mov	r3, r1
   1133e:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   11340:	78fb      	ldrb	r3, [r7, #3]
   11342:	687a      	ldr	r2, [r7, #4]
   11344:	4413      	add	r3, r2
   11346:	78db      	ldrb	r3, [r3, #3]
   11348:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   1134a:	687b      	ldr	r3, [r7, #4]
   1134c:	2200      	movs	r2, #0
   1134e:	705a      	strb	r2, [r3, #1]
	ready=false;
   11350:	687b      	ldr	r3, [r7, #4]
   11352:	2200      	movs	r2, #0
   11354:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   11356:	687b      	ldr	r3, [r7, #4]
   11358:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1135a:	7bfb      	ldrb	r3, [r7, #15]
   1135c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11360:	b2db      	uxtb	r3, r3
   11362:	9300      	str	r3, [sp, #0]
   11364:	2300      	movs	r3, #0
   11366:	2202      	movs	r2, #2
   11368:	6878      	ldr	r0, [r7, #4]
   1136a:	4c04      	ldr	r4, [pc, #16]	; (1137c <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   1136c:	47a0      	blx	r4
	channelOnProcess=channel_number;
   1136e:	687b      	ldr	r3, [r7, #4]
   11370:	7bfa      	ldrb	r2, [r7, #15]
   11372:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   11374:	bf00      	nop
   11376:	3714      	adds	r7, #20
   11378:	46bd      	mov	sp, r7
   1137a:	bd90      	pop	{r4, r7, pc}
   1137c:	0001164d 	.word	0x0001164d

00011380 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   11380:	b590      	push	{r4, r7, lr}
   11382:	b089      	sub	sp, #36	; 0x24
   11384:	af02      	add	r7, sp, #8
   11386:	60f8      	str	r0, [r7, #12]
   11388:	60b9      	str	r1, [r7, #8]
   1138a:	4611      	mov	r1, r2
   1138c:	461a      	mov	r2, r3
   1138e:	460b      	mov	r3, r1
   11390:	71fb      	strb	r3, [r7, #7]
   11392:	4613      	mov	r3, r2
   11394:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   11396:	88ba      	ldrh	r2, [r7, #4]
   11398:	2300      	movs	r3, #0
   1139a:	9300      	str	r3, [sp, #0]
   1139c:	4613      	mov	r3, r2
   1139e:	2203      	movs	r2, #3
   113a0:	68b9      	ldr	r1, [r7, #8]
   113a2:	68f8      	ldr	r0, [r7, #12]
   113a4:	4c03      	ldr	r4, [pc, #12]	; (113b4 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   113a6:	47a0      	blx	r4
   113a8:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   113aa:	bf00      	nop
   113ac:	371c      	adds	r7, #28
   113ae:	46bd      	mov	sp, r7
   113b0:	bd90      	pop	{r4, r7, pc}
   113b2:	bf00      	nop
   113b4:	0001157d 	.word	0x0001157d

000113b8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   113b8:	b590      	push	{r4, r7, lr}
   113ba:	b085      	sub	sp, #20
   113bc:	af02      	add	r7, sp, #8
   113be:	6078      	str	r0, [r7, #4]
   113c0:	460b      	mov	r3, r1
   113c2:	70fb      	strb	r3, [r7, #3]
   113c4:	4613      	mov	r3, r2
   113c6:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   113c8:	78fb      	ldrb	r3, [r7, #3]
   113ca:	461a      	mov	r2, r3
   113cc:	2110      	movs	r1, #16
   113ce:	6878      	ldr	r0, [r7, #4]
   113d0:	4b17      	ldr	r3, [pc, #92]	; (11430 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   113d2:	4798      	blx	r3
   113d4:	4603      	mov	r3, r0
   113d6:	461a      	mov	r2, r3
   113d8:	687b      	ldr	r3, [r7, #4]
   113da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   113de:	687b      	ldr	r3, [r7, #4]
   113e0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   113e2:	687b      	ldr	r3, [r7, #4]
   113e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   113e8:	2300      	movs	r3, #0
   113ea:	9300      	str	r3, [sp, #0]
   113ec:	4613      	mov	r3, r2
   113ee:	2203      	movs	r2, #3
   113f0:	6878      	ldr	r0, [r7, #4]
   113f2:	4c10      	ldr	r4, [pc, #64]	; (11434 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   113f4:	47a0      	blx	r4
   113f6:	4602      	mov	r2, r0
   113f8:	687b      	ldr	r3, [r7, #4]
   113fa:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   113fc:	687b      	ldr	r3, [r7, #4]
   113fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11400:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   11404:	687b      	ldr	r3, [r7, #4]
   11406:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   11408:	687b      	ldr	r3, [r7, #4]
   1140a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1140c:	78bb      	ldrb	r3, [r7, #2]
   1140e:	78fa      	ldrb	r2, [r7, #3]
   11410:	6878      	ldr	r0, [r7, #4]
   11412:	4c09      	ldr	r4, [pc, #36]	; (11438 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   11414:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   11416:	687b      	ldr	r3, [r7, #4]
   11418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1141a:	0e1b      	lsrs	r3, r3, #24
   1141c:	b2da      	uxtb	r2, r3
   1141e:	687b      	ldr	r3, [r7, #4]
   11420:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   11422:	687b      	ldr	r3, [r7, #4]
   11424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   11426:	4618      	mov	r0, r3
   11428:	370c      	adds	r7, #12
   1142a:	46bd      	mov	sp, r7
   1142c:	bd90      	pop	{r4, r7, pc}
   1142e:	bf00      	nop
   11430:	000116bd 	.word	0x000116bd
   11434:	0001157d 	.word	0x0001157d
   11438:	00011491 	.word	0x00011491

0001143c <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   1143c:	b580      	push	{r7, lr}
   1143e:	b082      	sub	sp, #8
   11440:	af00      	add	r7, sp, #0
   11442:	6078      	str	r0, [r7, #4]
   11444:	460b      	mov	r3, r1
   11446:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   11448:	78fb      	ldrb	r3, [r7, #3]
   1144a:	687a      	ldr	r2, [r7, #4]
   1144c:	4413      	add	r3, r2
   1144e:	78db      	ldrb	r3, [r3, #3]
   11450:	4619      	mov	r1, r3
   11452:	6878      	ldr	r0, [r7, #4]
   11454:	4b03      	ldr	r3, [pc, #12]	; (11464 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   11456:	4798      	blx	r3
   11458:	4603      	mov	r3, r0
}
   1145a:	4618      	mov	r0, r3
   1145c:	3708      	adds	r7, #8
   1145e:	46bd      	mov	sp, r7
   11460:	bd80      	pop	{r7, pc}
   11462:	bf00      	nop
   11464:	00011469 	.word	0x00011469

00011468 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   11468:	b580      	push	{r7, lr}
   1146a:	b082      	sub	sp, #8
   1146c:	af00      	add	r7, sp, #0
   1146e:	6078      	str	r0, [r7, #4]
   11470:	460b      	mov	r3, r1
   11472:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   11474:	78fb      	ldrb	r3, [r7, #3]
   11476:	2202      	movs	r2, #2
   11478:	4619      	mov	r1, r3
   1147a:	6878      	ldr	r0, [r7, #4]
   1147c:	4b03      	ldr	r3, [pc, #12]	; (1148c <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   1147e:	4798      	blx	r3
   11480:	4603      	mov	r3, r0
}
   11482:	4618      	mov	r0, r3
   11484:	3708      	adds	r7, #8
   11486:	46bd      	mov	sp, r7
   11488:	bd80      	pop	{r7, pc}
   1148a:	bf00      	nop
   1148c:	000113b9 	.word	0x000113b9

00011490 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   11490:	b580      	push	{r7, lr}
   11492:	b084      	sub	sp, #16
   11494:	af00      	add	r7, sp, #0
   11496:	60f8      	str	r0, [r7, #12]
   11498:	60b9      	str	r1, [r7, #8]
   1149a:	4611      	mov	r1, r2
   1149c:	461a      	mov	r2, r3
   1149e:	460b      	mov	r3, r1
   114a0:	71fb      	strb	r3, [r7, #7]
   114a2:	4613      	mov	r3, r2
   114a4:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   114a6:	68ba      	ldr	r2, [r7, #8]
   114a8:	68fb      	ldr	r3, [r7, #12]
   114aa:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   114ac:	68fb      	ldr	r3, [r7, #12]
   114ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   114b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   114b4:	2b00      	cmp	r3, #0
   114b6:	d006      	beq.n	114c6 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   114b8:	68fb      	ldr	r3, [r7, #12]
   114ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   114bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   114c0:	461a      	mov	r2, r3
   114c2:	68fb      	ldr	r3, [r7, #12]
   114c4:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   114c6:	79bb      	ldrb	r3, [r7, #6]
   114c8:	2b02      	cmp	r3, #2
   114ca:	d11d      	bne.n	11508 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   114cc:	68fb      	ldr	r3, [r7, #12]
   114ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   114d0:	4b18      	ldr	r3, [pc, #96]	; (11534 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   114d2:	4610      	mov	r0, r2
   114d4:	4798      	blx	r3
   114d6:	4602      	mov	r2, r0
   114d8:	4b17      	ldr	r3, [pc, #92]	; (11538 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   114da:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   114de:	4610      	mov	r0, r2
   114e0:	4798      	blx	r3
   114e2:	4603      	mov	r3, r0
   114e4:	461a      	mov	r2, r3
   114e6:	68fb      	ldr	r3, [r7, #12]
   114e8:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   114ea:	79fb      	ldrb	r3, [r7, #7]
   114ec:	4619      	mov	r1, r3
   114ee:	68f8      	ldr	r0, [r7, #12]
   114f0:	4b12      	ldr	r3, [pc, #72]	; (1153c <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   114f2:	4798      	blx	r3
   114f4:	4603      	mov	r3, r0
   114f6:	4618      	mov	r0, r3
   114f8:	68fb      	ldr	r3, [r7, #12]
   114fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   114fc:	68f9      	ldr	r1, [r7, #12]
   114fe:	1c83      	adds	r3, r0, #2
   11500:	009b      	lsls	r3, r3, #2
   11502:	440b      	add	r3, r1
   11504:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   11506:	e011      	b.n	1152c <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   11508:	79bb      	ldrb	r3, [r7, #6]
   1150a:	2b01      	cmp	r3, #1
   1150c:	d10e      	bne.n	1152c <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   1150e:	68fb      	ldr	r3, [r7, #12]
   11510:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   11512:	4b08      	ldr	r3, [pc, #32]	; (11534 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   11514:	4610      	mov	r0, r2
   11516:	4798      	blx	r3
   11518:	4602      	mov	r2, r0
   1151a:	4b07      	ldr	r3, [pc, #28]	; (11538 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1151c:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   11520:	4610      	mov	r0, r2
   11522:	4798      	blx	r3
   11524:	4603      	mov	r3, r0
   11526:	461a      	mov	r2, r3
   11528:	68fb      	ldr	r3, [r7, #12]
   1152a:	65da      	str	r2, [r3, #92]	; 0x5c
}
   1152c:	bf00      	nop
   1152e:	3710      	adds	r7, #16
   11530:	46bd      	mov	sp, r7
   11532:	bd80      	pop	{r7, pc}
   11534:	0001284d 	.word	0x0001284d
   11538:	00012a5d 	.word	0x00012a5d
   1153c:	00011541 	.word	0x00011541

00011540 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   11540:	b480      	push	{r7}
   11542:	b085      	sub	sp, #20
   11544:	af00      	add	r7, sp, #0
   11546:	6078      	str	r0, [r7, #4]
   11548:	460b      	mov	r3, r1
   1154a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   1154c:	2300      	movs	r3, #0
   1154e:	73fb      	strb	r3, [r7, #15]
   11550:	7bfb      	ldrb	r3, [r7, #15]
   11552:	2b03      	cmp	r3, #3
   11554:	dc0c      	bgt.n	11570 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   11556:	7bfb      	ldrb	r3, [r7, #15]
   11558:	687a      	ldr	r2, [r7, #4]
   1155a:	4413      	add	r3, r2
   1155c:	78db      	ldrb	r3, [r3, #3]
   1155e:	78fa      	ldrb	r2, [r7, #3]
   11560:	429a      	cmp	r2, r3
   11562:	d101      	bne.n	11568 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   11564:	7bfb      	ldrb	r3, [r7, #15]
   11566:	e004      	b.n	11572 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   11568:	7bfb      	ldrb	r3, [r7, #15]
   1156a:	3301      	adds	r3, #1
   1156c:	73fb      	strb	r3, [r7, #15]
   1156e:	e7ef      	b.n	11550 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   11570:	2300      	movs	r3, #0
}
   11572:	4618      	mov	r0, r3
   11574:	3714      	adds	r7, #20
   11576:	46bd      	mov	sp, r7
   11578:	bc80      	pop	{r7}
   1157a:	4770      	bx	lr

0001157c <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   1157c:	b590      	push	{r4, r7, lr}
   1157e:	b089      	sub	sp, #36	; 0x24
   11580:	af02      	add	r7, sp, #8
   11582:	60f8      	str	r0, [r7, #12]
   11584:	60b9      	str	r1, [r7, #8]
   11586:	4611      	mov	r1, r2
   11588:	461a      	mov	r2, r3
   1158a:	460b      	mov	r3, r1
   1158c:	71fb      	strb	r3, [r7, #7]
   1158e:	4613      	mov	r3, r2
   11590:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   11592:	2300      	movs	r3, #0
   11594:	75fb      	strb	r3, [r7, #23]
   11596:	7dfb      	ldrb	r3, [r7, #23]
   11598:	2b06      	cmp	r3, #6
   1159a:	dc09      	bgt.n	115b0 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   1159c:	68fb      	ldr	r3, [r7, #12]
   1159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   115a0:	7dfb      	ldrb	r3, [r7, #23]
   115a2:	4413      	add	r3, r2
   115a4:	2200      	movs	r2, #0
   115a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   115a8:	7dfb      	ldrb	r3, [r7, #23]
   115aa:	3301      	adds	r3, #1
   115ac:	75fb      	strb	r3, [r7, #23]
   115ae:	e7f2      	b.n	11596 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   115b0:	68fb      	ldr	r3, [r7, #12]
   115b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115b4:	79fa      	ldrb	r2, [r7, #7]
   115b6:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   115b8:	68fb      	ldr	r3, [r7, #12]
   115ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115bc:	3301      	adds	r3, #1
   115be:	88ba      	ldrh	r2, [r7, #4]
   115c0:	1212      	asrs	r2, r2, #8
   115c2:	b2d2      	uxtb	r2, r2
   115c4:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   115c6:	68fb      	ldr	r3, [r7, #12]
   115c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115ca:	3302      	adds	r3, #2
   115cc:	88ba      	ldrh	r2, [r7, #4]
   115ce:	b2d2      	uxtb	r2, r2
   115d0:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   115d2:	68fb      	ldr	r3, [r7, #12]
   115d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115d6:	3303      	adds	r3, #3
   115d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   115da:	0e12      	lsrs	r2, r2, #24
   115dc:	b2d2      	uxtb	r2, r2
   115de:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   115e0:	68fb      	ldr	r3, [r7, #12]
   115e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115e4:	3304      	adds	r3, #4
   115e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   115e8:	0c12      	lsrs	r2, r2, #16
   115ea:	b2d2      	uxtb	r2, r2
   115ec:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   115ee:	68fb      	ldr	r3, [r7, #12]
   115f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   115f2:	3305      	adds	r3, #5
   115f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   115f6:	0a12      	lsrs	r2, r2, #8
   115f8:	b2d2      	uxtb	r2, r2
   115fa:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   115fc:	68fb      	ldr	r3, [r7, #12]
   115fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11600:	3306      	adds	r3, #6
   11602:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11604:	b2d2      	uxtb	r2, r2
   11606:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   11608:	68fb      	ldr	r3, [r7, #12]
   1160a:	6a18      	ldr	r0, [r3, #32]
   1160c:	68fb      	ldr	r3, [r7, #12]
   1160e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11610:	f107 0110 	add.w	r1, r7, #16
   11614:	2307      	movs	r3, #7
   11616:	9300      	str	r3, [sp, #0]
   11618:	460b      	mov	r3, r1
   1161a:	68b9      	ldr	r1, [r7, #8]
   1161c:	4c0a      	ldr	r4, [pc, #40]	; (11648 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1161e:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   11620:	7c3b      	ldrb	r3, [r7, #16]
   11622:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   11624:	7c7b      	ldrb	r3, [r7, #17]
   11626:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   11628:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   1162a:	7cbb      	ldrb	r3, [r7, #18]
   1162c:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   1162e:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   11630:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   11632:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   11634:	68fb      	ldr	r3, [r7, #12]
   11636:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   11638:	bf00      	nop
	return output_data;
   1163a:	68fb      	ldr	r3, [r7, #12]
   1163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   1163e:	4618      	mov	r0, r3
   11640:	371c      	adds	r7, #28
   11642:	46bd      	mov	sp, r7
   11644:	bd90      	pop	{r4, r7, pc}
   11646:	bf00      	nop
   11648:	00011a59 	.word	0x00011a59

0001164c <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   1164c:	b590      	push	{r4, r7, lr}
   1164e:	b087      	sub	sp, #28
   11650:	af02      	add	r7, sp, #8
   11652:	60f8      	str	r0, [r7, #12]
   11654:	60b9      	str	r1, [r7, #8]
   11656:	4611      	mov	r1, r2
   11658:	461a      	mov	r2, r3
   1165a:	460b      	mov	r3, r1
   1165c:	71fb      	strb	r3, [r7, #7]
   1165e:	4613      	mov	r3, r2
   11660:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   11662:	68fb      	ldr	r3, [r7, #12]
   11664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11666:	79fa      	ldrb	r2, [r7, #7]
   11668:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   1166a:	68fb      	ldr	r3, [r7, #12]
   1166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1166e:	3301      	adds	r3, #1
   11670:	88ba      	ldrh	r2, [r7, #4]
   11672:	1212      	asrs	r2, r2, #8
   11674:	b2d2      	uxtb	r2, r2
   11676:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   11678:	68fb      	ldr	r3, [r7, #12]
   1167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1167c:	3302      	adds	r3, #2
   1167e:	88ba      	ldrh	r2, [r7, #4]
   11680:	b2d2      	uxtb	r2, r2
   11682:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   11684:	68fb      	ldr	r3, [r7, #12]
   11686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11688:	3303      	adds	r3, #3
   1168a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1168e:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   11690:	68fb      	ldr	r3, [r7, #12]
   11692:	6a18      	ldr	r0, [r3, #32]
   11694:	68fb      	ldr	r3, [r7, #12]
   11696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11698:	68fb      	ldr	r3, [r7, #12]
   1169a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1169c:	2304      	movs	r3, #4
   1169e:	9300      	str	r3, [sp, #0]
   116a0:	460b      	mov	r3, r1
   116a2:	68b9      	ldr	r1, [r7, #8]
   116a4:	4c04      	ldr	r4, [pc, #16]	; (116b8 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   116a6:	47a0      	blx	r4
	return rx[0];
   116a8:	68fb      	ldr	r3, [r7, #12]
   116aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   116ac:	781b      	ldrb	r3, [r3, #0]
}
   116ae:	4618      	mov	r0, r3
   116b0:	3714      	adds	r7, #20
   116b2:	46bd      	mov	sp, r7
   116b4:	bd90      	pop	{r4, r7, pc}
   116b6:	bf00      	nop
   116b8:	00011a59 	.word	0x00011a59

000116bc <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   116bc:	b480      	push	{r7}
   116be:	b083      	sub	sp, #12
   116c0:	af00      	add	r7, sp, #0
   116c2:	6078      	str	r0, [r7, #4]
   116c4:	460b      	mov	r3, r1
   116c6:	807b      	strh	r3, [r7, #2]
   116c8:	4613      	mov	r3, r2
   116ca:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   116cc:	787b      	ldrb	r3, [r7, #1]
   116ce:	3b01      	subs	r3, #1
   116d0:	b29b      	uxth	r3, r3
   116d2:	009b      	lsls	r3, r3, #2
   116d4:	b29a      	uxth	r2, r3
   116d6:	887b      	ldrh	r3, [r7, #2]
   116d8:	4413      	add	r3, r2
   116da:	b29b      	uxth	r3, r3
}
   116dc:	4618      	mov	r0, r3
   116de:	370c      	adds	r7, #12
   116e0:	46bd      	mov	sp, r7
   116e2:	bc80      	pop	{r7}
   116e4:	4770      	bx	lr
	...

000116e8 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   116e8:	b590      	push	{r4, r7, lr}
   116ea:	b085      	sub	sp, #20
   116ec:	af00      	add	r7, sp, #0
   116ee:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   116f0:	4b25      	ldr	r3, [pc, #148]	; (11788 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   116f2:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   116f4:	687b      	ldr	r3, [r7, #4]
   116f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
   116f8:	68fb      	ldr	r3, [r7, #12]
   116fa:	2202      	movs	r2, #2
   116fc:	6878      	ldr	r0, [r7, #4]
   116fe:	4c23      	ldr	r4, [pc, #140]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11700:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   11702:	4b23      	ldr	r3, [pc, #140]	; (11790 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   11704:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   11706:	687b      	ldr	r3, [r7, #4]
   11708:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1170a:	68fb      	ldr	r3, [r7, #12]
   1170c:	2204      	movs	r2, #4
   1170e:	6878      	ldr	r0, [r7, #4]
   11710:	4c1e      	ldr	r4, [pc, #120]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11712:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   11714:	4b1c      	ldr	r3, [pc, #112]	; (11788 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   11716:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   11718:	687b      	ldr	r3, [r7, #4]
   1171a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1171c:	68fb      	ldr	r3, [r7, #12]
   1171e:	2207      	movs	r2, #7
   11720:	6878      	ldr	r0, [r7, #4]
   11722:	4c1a      	ldr	r4, [pc, #104]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11724:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   11726:	4b1b      	ldr	r3, [pc, #108]	; (11794 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   11728:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   1172a:	687b      	ldr	r3, [r7, #4]
   1172c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1172e:	68fb      	ldr	r3, [r7, #12]
   11730:	2209      	movs	r2, #9
   11732:	6878      	ldr	r0, [r7, #4]
   11734:	4c15      	ldr	r4, [pc, #84]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11736:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   11738:	4b13      	ldr	r3, [pc, #76]	; (11788 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1173a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   1173c:	687b      	ldr	r3, [r7, #4]
   1173e:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11740:	68fb      	ldr	r3, [r7, #12]
   11742:	220c      	movs	r2, #12
   11744:	6878      	ldr	r0, [r7, #4]
   11746:	4c11      	ldr	r4, [pc, #68]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11748:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   1174a:	4b13      	ldr	r3, [pc, #76]	; (11798 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   1174c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   1174e:	687b      	ldr	r3, [r7, #4]
   11750:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11752:	68fb      	ldr	r3, [r7, #12]
   11754:	220e      	movs	r2, #14
   11756:	6878      	ldr	r0, [r7, #4]
   11758:	4c0c      	ldr	r4, [pc, #48]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1175a:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   1175c:	4b0a      	ldr	r3, [pc, #40]	; (11788 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1175e:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   11760:	687b      	ldr	r3, [r7, #4]
   11762:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11764:	68fb      	ldr	r3, [r7, #12]
   11766:	2211      	movs	r2, #17
   11768:	6878      	ldr	r0, [r7, #4]
   1176a:	4c08      	ldr	r4, [pc, #32]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1176c:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   1176e:	4b0b      	ldr	r3, [pc, #44]	; (1179c <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   11770:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   11772:	687b      	ldr	r3, [r7, #4]
   11774:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11776:	68fb      	ldr	r3, [r7, #12]
   11778:	2213      	movs	r2, #19
   1177a:	6878      	ldr	r0, [r7, #4]
   1177c:	4c03      	ldr	r4, [pc, #12]	; (1178c <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1177e:	47a0      	blx	r4

}
   11780:	bf00      	nop
   11782:	3714      	adds	r7, #20
   11784:	46bd      	mov	sp, r7
   11786:	bd90      	pop	{r4, r7, pc}
   11788:	e89c4000 	.word	0xe89c4000
   1178c:	000112e1 	.word	0x000112e1
   11790:	60a91000 	.word	0x60a91000
   11794:	61e91000 	.word	0x61e91000
   11798:	63291000 	.word	0x63291000
   1179c:	64691000 	.word	0x64691000

000117a0 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   117a0:	b590      	push	{r4, r7, lr}
   117a2:	b085      	sub	sp, #20
   117a4:	af02      	add	r7, sp, #8
   117a6:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   117a8:	687b      	ldr	r3, [r7, #4]
   117aa:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   117ac:	2300      	movs	r3, #0
   117ae:	9300      	str	r3, [sp, #0]
   117b0:	23f0      	movs	r3, #240	; 0xf0
   117b2:	2202      	movs	r2, #2
   117b4:	6878      	ldr	r0, [r7, #4]
   117b6:	4c07      	ldr	r4, [pc, #28]	; (117d4 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   117b8:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   117ba:	687b      	ldr	r3, [r7, #4]
   117bc:	6d99      	ldr	r1, [r3, #88]	; 0x58
   117be:	2300      	movs	r3, #0
   117c0:	9300      	str	r3, [sp, #0]
   117c2:	23ff      	movs	r3, #255	; 0xff
   117c4:	2202      	movs	r2, #2
   117c6:	6878      	ldr	r0, [r7, #4]
   117c8:	4c02      	ldr	r4, [pc, #8]	; (117d4 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   117ca:	47a0      	blx	r4
}
   117cc:	bf00      	nop
   117ce:	370c      	adds	r7, #12
   117d0:	46bd      	mov	sp, r7
   117d2:	bd90      	pop	{r4, r7, pc}
   117d4:	0001164d 	.word	0x0001164d

000117d8 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   117d8:	b580      	push	{r7, lr}
   117da:	b082      	sub	sp, #8
   117dc:	af00      	add	r7, sp, #0
   117de:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   117e0:	687b      	ldr	r3, [r7, #4]
   117e2:	2200      	movs	r2, #0
   117e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   117e8:	687b      	ldr	r3, [r7, #4]
   117ea:	2200      	movs	r2, #0
   117ec:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   117ee:	4a31      	ldr	r2, [pc, #196]	; (118b4 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   117f0:	687b      	ldr	r3, [r7, #4]
   117f2:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   117f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   117f8:	492f      	ldr	r1, [pc, #188]	; (118b8 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   117fa:	4830      	ldr	r0, [pc, #192]	; (118bc <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   117fc:	4b30      	ldr	r3, [pc, #192]	; (118c0 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   117fe:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   11800:	687b      	ldr	r3, [r7, #4]
   11802:	79db      	ldrb	r3, [r3, #7]
   11804:	2b01      	cmp	r3, #1
   11806:	d009      	beq.n	1181c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   11808:	687b      	ldr	r3, [r7, #4]
   1180a:	789b      	ldrb	r3, [r3, #2]
   1180c:	b2db      	uxtb	r3, r3
   1180e:	f083 0301 	eor.w	r3, r3, #1
   11812:	b2db      	uxtb	r3, r3
   11814:	2b00      	cmp	r3, #0
   11816:	d001      	beq.n	1181c <_ZN13LTC2983_Class8SelfTestEv+0x44>
   11818:	2301      	movs	r3, #1
   1181a:	e000      	b.n	1181e <_ZN13LTC2983_Class8SelfTestEv+0x46>
   1181c:	2300      	movs	r3, #0
   1181e:	2b00      	cmp	r3, #0
   11820:	d034      	beq.n	1188c <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   11822:	2100      	movs	r1, #0
   11824:	6878      	ldr	r0, [r7, #4]
   11826:	4b27      	ldr	r3, [pc, #156]	; (118c4 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   11828:	4798      	blx	r3
		delay_ms(1);
   1182a:	2001      	movs	r0, #1
   1182c:	4b26      	ldr	r3, [pc, #152]	; (118c8 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   1182e:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   11830:	687b      	ldr	r3, [r7, #4]
   11832:	781b      	ldrb	r3, [r3, #0]
   11834:	b2db      	uxtb	r3, r3
   11836:	f083 0301 	eor.w	r3, r3, #1
   1183a:	b2db      	uxtb	r3, r3
   1183c:	2b00      	cmp	r3, #0
   1183e:	d009      	beq.n	11854 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   11840:	687b      	ldr	r3, [r7, #4]
   11842:	789b      	ldrb	r3, [r3, #2]
   11844:	b2db      	uxtb	r3, r3
   11846:	f083 0301 	eor.w	r3, r3, #1
   1184a:	b2db      	uxtb	r3, r3
   1184c:	2b00      	cmp	r3, #0
   1184e:	d001      	beq.n	11854 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   11850:	2301      	movs	r3, #1
   11852:	e000      	b.n	11856 <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   11854:	2300      	movs	r3, #0
   11856:	2b00      	cmp	r3, #0
   11858:	d000      	beq.n	1185c <_ZN13LTC2983_Class8SelfTestEv+0x84>
   1185a:	e7e9      	b.n	11830 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   1185c:	687b      	ldr	r3, [r7, #4]
   1185e:	789b      	ldrb	r3, [r3, #2]
   11860:	b2db      	uxtb	r3, r3
   11862:	f083 0301 	eor.w	r3, r3, #1
   11866:	b2db      	uxtb	r3, r3
   11868:	2b00      	cmp	r3, #0
   1186a:	d0c9      	beq.n	11800 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   1186c:	687b      	ldr	r3, [r7, #4]
   1186e:	781b      	ldrb	r3, [r3, #0]
   11870:	b2db      	uxtb	r3, r3
   11872:	2b00      	cmp	r3, #0
   11874:	d006      	beq.n	11884 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   11876:	687b      	ldr	r3, [r7, #4]
   11878:	78db      	ldrb	r3, [r3, #3]
   1187a:	4619      	mov	r1, r3
   1187c:	6878      	ldr	r0, [r7, #4]
   1187e:	4b13      	ldr	r3, [pc, #76]	; (118cc <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   11880:	4798      	blx	r3
   11882:	e7bd      	b.n	11800 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   11884:	2001      	movs	r0, #1
   11886:	4b10      	ldr	r3, [pc, #64]	; (118c8 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   11888:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1188a:	e7b9      	b.n	11800 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   1188c:	490a      	ldr	r1, [pc, #40]	; (118b8 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   1188e:	480b      	ldr	r0, [pc, #44]	; (118bc <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   11890:	4b0f      	ldr	r3, [pc, #60]	; (118d0 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   11892:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   11894:	687b      	ldr	r3, [r7, #4]
   11896:	79db      	ldrb	r3, [r3, #7]
   11898:	2b01      	cmp	r3, #1
   1189a:	bf0c      	ite	eq
   1189c:	2301      	moveq	r3, #1
   1189e:	2300      	movne	r3, #0
   118a0:	b2da      	uxtb	r2, r3
   118a2:	687b      	ldr	r3, [r7, #4]
   118a4:	771a      	strb	r2, [r3, #28]
	return	isOK;
   118a6:	687b      	ldr	r3, [r7, #4]
   118a8:	7f1b      	ldrb	r3, [r3, #28]
	}
   118aa:	4618      	mov	r0, r3
   118ac:	3708      	adds	r7, #8
   118ae:	46bd      	mov	sp, r7
   118b0:	bd80      	pop	{r7, pc}
   118b2:	bf00      	nop
   118b4:	20007b7c 	.word	0x20007b7c
   118b8:	000111f9 	.word	0x000111f9
   118bc:	20000f18 	.word	0x20000f18
   118c0:	0000da75 	.word	0x0000da75
   118c4:	00011335 	.word	0x00011335
   118c8:	000027b9 	.word	0x000027b9
   118cc:	00011469 	.word	0x00011469
   118d0:	0000da1d 	.word	0x0000da1d

000118d4 <hri_port_set_OUT_reg>:
{
   118d4:	b480      	push	{r7}
   118d6:	b085      	sub	sp, #20
   118d8:	af00      	add	r7, sp, #0
   118da:	60f8      	str	r0, [r7, #12]
   118dc:	460b      	mov	r3, r1
   118de:	607a      	str	r2, [r7, #4]
   118e0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   118e2:	7afb      	ldrb	r3, [r7, #11]
   118e4:	68fa      	ldr	r2, [r7, #12]
   118e6:	01db      	lsls	r3, r3, #7
   118e8:	4413      	add	r3, r2
   118ea:	3318      	adds	r3, #24
   118ec:	687a      	ldr	r2, [r7, #4]
   118ee:	601a      	str	r2, [r3, #0]
}
   118f0:	bf00      	nop
   118f2:	3714      	adds	r7, #20
   118f4:	46bd      	mov	sp, r7
   118f6:	bc80      	pop	{r7}
   118f8:	4770      	bx	lr

000118fa <hri_port_clear_OUT_reg>:
{
   118fa:	b480      	push	{r7}
   118fc:	b085      	sub	sp, #20
   118fe:	af00      	add	r7, sp, #0
   11900:	60f8      	str	r0, [r7, #12]
   11902:	460b      	mov	r3, r1
   11904:	607a      	str	r2, [r7, #4]
   11906:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   11908:	7afb      	ldrb	r3, [r7, #11]
   1190a:	68fa      	ldr	r2, [r7, #12]
   1190c:	01db      	lsls	r3, r3, #7
   1190e:	4413      	add	r3, r2
   11910:	3314      	adds	r3, #20
   11912:	687a      	ldr	r2, [r7, #4]
   11914:	601a      	str	r2, [r3, #0]
}
   11916:	bf00      	nop
   11918:	3714      	adds	r7, #20
   1191a:	46bd      	mov	sp, r7
   1191c:	bc80      	pop	{r7}
   1191e:	4770      	bx	lr

00011920 <_gpio_set_level>:
{
   11920:	b580      	push	{r7, lr}
   11922:	b082      	sub	sp, #8
   11924:	af00      	add	r7, sp, #0
   11926:	4603      	mov	r3, r0
   11928:	6039      	str	r1, [r7, #0]
   1192a:	71fb      	strb	r3, [r7, #7]
   1192c:	4613      	mov	r3, r2
   1192e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   11930:	79bb      	ldrb	r3, [r7, #6]
   11932:	2b00      	cmp	r3, #0
   11934:	d006      	beq.n	11944 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   11936:	79fb      	ldrb	r3, [r7, #7]
   11938:	683a      	ldr	r2, [r7, #0]
   1193a:	4619      	mov	r1, r3
   1193c:	4806      	ldr	r0, [pc, #24]	; (11958 <_gpio_set_level+0x38>)
   1193e:	4b07      	ldr	r3, [pc, #28]	; (1195c <_gpio_set_level+0x3c>)
   11940:	4798      	blx	r3
}
   11942:	e005      	b.n	11950 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   11944:	79fb      	ldrb	r3, [r7, #7]
   11946:	683a      	ldr	r2, [r7, #0]
   11948:	4619      	mov	r1, r3
   1194a:	4803      	ldr	r0, [pc, #12]	; (11958 <_gpio_set_level+0x38>)
   1194c:	4b04      	ldr	r3, [pc, #16]	; (11960 <_gpio_set_level+0x40>)
   1194e:	4798      	blx	r3
}
   11950:	bf00      	nop
   11952:	3708      	adds	r7, #8
   11954:	46bd      	mov	sp, r7
   11956:	bd80      	pop	{r7, pc}
   11958:	41008000 	.word	0x41008000
   1195c:	000118d5 	.word	0x000118d5
   11960:	000118fb 	.word	0x000118fb

00011964 <gpio_set_pin_level>:
{
   11964:	b580      	push	{r7, lr}
   11966:	b082      	sub	sp, #8
   11968:	af00      	add	r7, sp, #0
   1196a:	4603      	mov	r3, r0
   1196c:	460a      	mov	r2, r1
   1196e:	71fb      	strb	r3, [r7, #7]
   11970:	4613      	mov	r3, r2
   11972:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   11974:	79fb      	ldrb	r3, [r7, #7]
   11976:	115b      	asrs	r3, r3, #5
   11978:	b2d8      	uxtb	r0, r3
   1197a:	79fb      	ldrb	r3, [r7, #7]
   1197c:	f003 031f 	and.w	r3, r3, #31
   11980:	2201      	movs	r2, #1
   11982:	fa02 f303 	lsl.w	r3, r2, r3
   11986:	79ba      	ldrb	r2, [r7, #6]
   11988:	4619      	mov	r1, r3
   1198a:	4b03      	ldr	r3, [pc, #12]	; (11998 <gpio_set_pin_level+0x34>)
   1198c:	4798      	blx	r3
}
   1198e:	bf00      	nop
   11990:	3708      	adds	r7, #8
   11992:	46bd      	mov	sp, r7
   11994:	bd80      	pop	{r7, pc}
   11996:	bf00      	nop
   11998:	00011921 	.word	0x00011921

0001199c <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   1199c:	b480      	push	{r7}
   1199e:	b083      	sub	sp, #12
   119a0:	af00      	add	r7, sp, #0
   119a2:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   119a4:	4a05      	ldr	r2, [pc, #20]	; (119bc <_ZN6LT_SPIC1Ev+0x20>)
   119a6:	687b      	ldr	r3, [r7, #4]
   119a8:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   119aa:	687b      	ldr	r3, [r7, #4]
   119ac:	4a04      	ldr	r2, [pc, #16]	; (119c0 <_ZN6LT_SPIC1Ev+0x24>)
   119ae:	605a      	str	r2, [r3, #4]
} //LT_SPI
   119b0:	687b      	ldr	r3, [r7, #4]
   119b2:	4618      	mov	r0, r3
   119b4:	370c      	adds	r7, #12
   119b6:	46bd      	mov	sp, r7
   119b8:	bc80      	pop	{r7}
   119ba:	4770      	bx	lr
   119bc:	20007b80 	.word	0x20007b80
   119c0:	20007b84 	.word	0x20007b84

000119c4 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   119c4:	b480      	push	{r7}
   119c6:	b083      	sub	sp, #12
   119c8:	af00      	add	r7, sp, #0
   119ca:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   119cc:	687b      	ldr	r3, [r7, #4]
   119ce:	4618      	mov	r0, r3
   119d0:	370c      	adds	r7, #12
   119d2:	46bd      	mov	sp, r7
   119d4:	bc80      	pop	{r7}
   119d6:	4770      	bx	lr

000119d8 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   119d8:	b580      	push	{r7, lr}
   119da:	b082      	sub	sp, #8
   119dc:	af00      	add	r7, sp, #0
   119de:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   119e0:	687b      	ldr	r3, [r7, #4]
   119e2:	685a      	ldr	r2, [r3, #4]
   119e4:	687b      	ldr	r3, [r7, #4]
   119e6:	691b      	ldr	r3, [r3, #16]
   119e8:	4619      	mov	r1, r3
   119ea:	4610      	mov	r0, r2
   119ec:	4b0e      	ldr	r3, [pc, #56]	; (11a28 <_ZN6LT_SPI4initEv+0x50>)
   119ee:	4798      	blx	r3
	spiTemp->init();
   119f0:	687b      	ldr	r3, [r7, #4]
   119f2:	685b      	ldr	r3, [r3, #4]
   119f4:	4618      	mov	r0, r3
   119f6:	4b0d      	ldr	r3, [pc, #52]	; (11a2c <_ZN6LT_SPI4initEv+0x54>)
   119f8:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   119fa:	687b      	ldr	r3, [r7, #4]
   119fc:	685b      	ldr	r3, [r3, #4]
   119fe:	685a      	ldr	r2, [r3, #4]
   11a00:	687b      	ldr	r3, [r7, #4]
   11a02:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   11a04:	687b      	ldr	r3, [r7, #4]
   11a06:	685b      	ldr	r3, [r3, #4]
   11a08:	689a      	ldr	r2, [r3, #8]
   11a0a:	687b      	ldr	r3, [r7, #4]
   11a0c:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   11a0e:	687b      	ldr	r3, [r7, #4]
   11a10:	685b      	ldr	r3, [r3, #4]
   11a12:	4618      	mov	r0, r3
   11a14:	4b06      	ldr	r3, [pc, #24]	; (11a30 <_ZN6LT_SPI4initEv+0x58>)
   11a16:	4798      	blx	r3
	ready=true;
   11a18:	687b      	ldr	r3, [r7, #4]
   11a1a:	2201      	movs	r2, #1
   11a1c:	701a      	strb	r2, [r3, #0]
}
   11a1e:	bf00      	nop
   11a20:	3708      	adds	r7, #8
   11a22:	46bd      	mov	sp, r7
   11a24:	bd80      	pop	{r7, pc}
   11a26:	bf00      	nop
   11a28:	00011c81 	.word	0x00011c81
   11a2c:	00011c39 	.word	0x00011c39
   11a30:	00011ca5 	.word	0x00011ca5

00011a34 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   11a34:	b480      	push	{r7}
   11a36:	b083      	sub	sp, #12
   11a38:	af00      	add	r7, sp, #0
   11a3a:	6078      	str	r0, [r7, #4]
   11a3c:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   11a3e:	687b      	ldr	r3, [r7, #4]
   11a40:	683a      	ldr	r2, [r7, #0]
   11a42:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   11a44:	4a03      	ldr	r2, [pc, #12]	; (11a54 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   11a46:	687b      	ldr	r3, [r7, #4]
   11a48:	6013      	str	r3, [r2, #0]
}
   11a4a:	bf00      	nop
   11a4c:	370c      	adds	r7, #12
   11a4e:	46bd      	mov	sp, r7
   11a50:	bc80      	pop	{r7}
   11a52:	4770      	bx	lr
   11a54:	20007b80 	.word	0x20007b80

00011a58 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   11a58:	b580      	push	{r7, lr}
   11a5a:	b086      	sub	sp, #24
   11a5c:	af00      	add	r7, sp, #0
   11a5e:	60f8      	str	r0, [r7, #12]
   11a60:	60b9      	str	r1, [r7, #8]
   11a62:	607a      	str	r2, [r7, #4]
   11a64:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   11a66:	687b      	ldr	r3, [r7, #4]
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   11a6c:	68b9      	ldr	r1, [r7, #8]
   11a6e:	68f8      	ldr	r0, [r7, #12]
   11a70:	4b25      	ldr	r3, [pc, #148]	; (11b08 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   11a72:	4798      	blx	r3
	
	switch(rOrw){
   11a74:	7dfb      	ldrb	r3, [r7, #23]
   11a76:	2b02      	cmp	r3, #2
   11a78:	d002      	beq.n	11a80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   11a7a:	2b03      	cmp	r3, #3
   11a7c:	d009      	beq.n	11a92 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   11a7e:	e028      	b.n	11ad2 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   11a80:	68fb      	ldr	r3, [r7, #12]
   11a82:	685b      	ldr	r3, [r3, #4]
   11a84:	f897 2020 	ldrb.w	r2, [r7, #32]
   11a88:	6879      	ldr	r1, [r7, #4]
   11a8a:	4618      	mov	r0, r3
   11a8c:	4b1f      	ldr	r3, [pc, #124]	; (11b0c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   11a8e:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   11a90:	e031      	b.n	11af6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   11a92:	68fb      	ldr	r3, [r7, #12]
   11a94:	685b      	ldr	r3, [r3, #4]
   11a96:	2203      	movs	r2, #3
   11a98:	6879      	ldr	r1, [r7, #4]
   11a9a:	4618      	mov	r0, r3
   11a9c:	4b1b      	ldr	r3, [pc, #108]	; (11b0c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   11a9e:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   11aa0:	f897 3020 	ldrb.w	r3, [r7, #32]
   11aa4:	2b04      	cmp	r3, #4
   11aa6:	dd0b      	ble.n	11ac0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   11aa8:	68fb      	ldr	r3, [r7, #12]
   11aaa:	6858      	ldr	r0, [r3, #4]
   11aac:	f897 3020 	ldrb.w	r3, [r7, #32]
   11ab0:	3b03      	subs	r3, #3
   11ab2:	461a      	mov	r2, r3
   11ab4:	6839      	ldr	r1, [r7, #0]
   11ab6:	4b16      	ldr	r3, [pc, #88]	; (11b10 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   11ab8:	4798      	blx	r3
					asm("nop");
   11aba:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   11abc:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   11abe:	e01a      	b.n	11af6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   11ac0:	68fb      	ldr	r3, [r7, #12]
   11ac2:	685b      	ldr	r3, [r3, #4]
   11ac4:	2201      	movs	r2, #1
   11ac6:	6839      	ldr	r1, [r7, #0]
   11ac8:	4618      	mov	r0, r3
   11aca:	4b11      	ldr	r3, [pc, #68]	; (11b10 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   11acc:	4798      	blx	r3
				asm("nop");
   11ace:	bf00      	nop
			break;
   11ad0:	e011      	b.n	11af6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   11ad2:	68fb      	ldr	r3, [r7, #12]
   11ad4:	685b      	ldr	r3, [r3, #4]
   11ad6:	f897 2020 	ldrb.w	r2, [r7, #32]
   11ada:	6879      	ldr	r1, [r7, #4]
   11adc:	4618      	mov	r0, r3
   11ade:	4b0b      	ldr	r3, [pc, #44]	; (11b0c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   11ae0:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   11ae2:	68fb      	ldr	r3, [r7, #12]
   11ae4:	6858      	ldr	r0, [r3, #4]
   11ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
   11aea:	3b03      	subs	r3, #3
   11aec:	461a      	mov	r2, r3
   11aee:	6839      	ldr	r1, [r7, #0]
   11af0:	4b07      	ldr	r3, [pc, #28]	; (11b10 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   11af2:	4798      	blx	r3
			break;
   11af4:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   11af6:	68b9      	ldr	r1, [r7, #8]
   11af8:	68f8      	ldr	r0, [r7, #12]
   11afa:	4b06      	ldr	r3, [pc, #24]	; (11b14 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   11afc:	4798      	blx	r3
	asm("nop");
   11afe:	bf00      	nop
	
}
   11b00:	bf00      	nop
   11b02:	3718      	adds	r7, #24
   11b04:	46bd      	mov	sp, r7
   11b06:	bd80      	pop	{r7, pc}
   11b08:	00011b19 	.word	0x00011b19
   11b0c:	00011ce1 	.word	0x00011ce1
   11b10:	00011d25 	.word	0x00011d25
   11b14:	00011b61 	.word	0x00011b61

00011b18 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   11b18:	b580      	push	{r7, lr}
   11b1a:	b082      	sub	sp, #8
   11b1c:	af00      	add	r7, sp, #0
   11b1e:	6078      	str	r0, [r7, #4]
   11b20:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   11b22:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   11b26:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   11b28:	683b      	ldr	r3, [r7, #0]
   11b2a:	b2db      	uxtb	r3, r3
   11b2c:	2100      	movs	r1, #0
   11b2e:	4618      	mov	r0, r3
   11b30:	4b08      	ldr	r3, [pc, #32]	; (11b54 <_ZN6LT_SPI4OpenEm+0x3c>)
   11b32:	4798      	blx	r3
	 delay_us(10);
   11b34:	200a      	movs	r0, #10
   11b36:	4b08      	ldr	r3, [pc, #32]	; (11b58 <_ZN6LT_SPI4OpenEm+0x40>)
   11b38:	4798      	blx	r3
	spiTemp->Enable();
   11b3a:	687b      	ldr	r3, [r7, #4]
   11b3c:	685b      	ldr	r3, [r3, #4]
   11b3e:	4618      	mov	r0, r3
   11b40:	4b06      	ldr	r3, [pc, #24]	; (11b5c <_ZN6LT_SPI4OpenEm+0x44>)
   11b42:	4798      	blx	r3
	 delay_us(10);
   11b44:	200a      	movs	r0, #10
   11b46:	4b04      	ldr	r3, [pc, #16]	; (11b58 <_ZN6LT_SPI4OpenEm+0x40>)
   11b48:	4798      	blx	r3
 }
   11b4a:	bf00      	nop
   11b4c:	3708      	adds	r7, #8
   11b4e:	46bd      	mov	sp, r7
   11b50:	bd80      	pop	{r7, pc}
   11b52:	bf00      	nop
   11b54:	00011965 	.word	0x00011965
   11b58:	00002785 	.word	0x00002785
   11b5c:	00011ca5 	.word	0x00011ca5

00011b60 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   11b60:	b580      	push	{r7, lr}
   11b62:	b082      	sub	sp, #8
   11b64:	af00      	add	r7, sp, #0
   11b66:	6078      	str	r0, [r7, #4]
   11b68:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   11b6a:	200a      	movs	r0, #10
   11b6c:	4b0b      	ldr	r3, [pc, #44]	; (11b9c <_ZN6LT_SPI5CloseEm+0x3c>)
   11b6e:	4798      	blx	r3
	 spiTemp->Disable();
   11b70:	687b      	ldr	r3, [r7, #4]
   11b72:	685b      	ldr	r3, [r3, #4]
   11b74:	4618      	mov	r0, r3
   11b76:	4b0a      	ldr	r3, [pc, #40]	; (11ba0 <_ZN6LT_SPI5CloseEm+0x40>)
   11b78:	4798      	blx	r3
	delay_us(10);
   11b7a:	200a      	movs	r0, #10
   11b7c:	4b07      	ldr	r3, [pc, #28]	; (11b9c <_ZN6LT_SPI5CloseEm+0x3c>)
   11b7e:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   11b80:	683b      	ldr	r3, [r7, #0]
   11b82:	b2db      	uxtb	r3, r3
   11b84:	2101      	movs	r1, #1
   11b86:	4618      	mov	r0, r3
   11b88:	4b06      	ldr	r3, [pc, #24]	; (11ba4 <_ZN6LT_SPI5CloseEm+0x44>)
   11b8a:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   11b8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   11b90:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   11b92:	bf00      	nop
   11b94:	3708      	adds	r7, #8
   11b96:	46bd      	mov	sp, r7
   11b98:	bd80      	pop	{r7, pc}
   11b9a:	bf00      	nop
   11b9c:	00002785 	.word	0x00002785
   11ba0:	00011d69 	.word	0x00011d69
   11ba4:	00011965 	.word	0x00011965

00011ba8 <_Z41__static_initialization_and_destruction_0ii>:
   11ba8:	b580      	push	{r7, lr}
   11baa:	b082      	sub	sp, #8
   11bac:	af00      	add	r7, sp, #0
   11bae:	6078      	str	r0, [r7, #4]
   11bb0:	6039      	str	r1, [r7, #0]
   11bb2:	687b      	ldr	r3, [r7, #4]
   11bb4:	2b01      	cmp	r3, #1
   11bb6:	d10c      	bne.n	11bd2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11bb8:	683b      	ldr	r3, [r7, #0]
   11bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11bbe:	4293      	cmp	r3, r2
   11bc0:	d107      	bne.n	11bd2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   11bc2:	4806      	ldr	r0, [pc, #24]	; (11bdc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11bc4:	4b06      	ldr	r3, [pc, #24]	; (11be0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11bc6:	4798      	blx	r3
   11bc8:	4a06      	ldr	r2, [pc, #24]	; (11be4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11bca:	4907      	ldr	r1, [pc, #28]	; (11be8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11bcc:	4803      	ldr	r0, [pc, #12]	; (11bdc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11bce:	4b07      	ldr	r3, [pc, #28]	; (11bec <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11bd0:	4798      	blx	r3
   11bd2:	bf00      	nop
   11bd4:	3708      	adds	r7, #8
   11bd6:	46bd      	mov	sp, r7
   11bd8:	bd80      	pop	{r7, pc}
   11bda:	bf00      	nop
   11bdc:	20007b84 	.word	0x20007b84
   11be0:	00011c05 	.word	0x00011c05
   11be4:	20000000 	.word	0x20000000
   11be8:	00011c25 	.word	0x00011c25
   11bec:	000126cd 	.word	0x000126cd

00011bf0 <_GLOBAL__sub_I_ptrLTSPIClass>:
   11bf0:	b580      	push	{r7, lr}
   11bf2:	af00      	add	r7, sp, #0
   11bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11bf8:	2001      	movs	r0, #1
   11bfa:	4b01      	ldr	r3, [pc, #4]	; (11c00 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   11bfc:	4798      	blx	r3
   11bfe:	bd80      	pop	{r7, pc}
   11c00:	00011ba9 	.word	0x00011ba9

00011c04 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   11c04:	b480      	push	{r7}
   11c06:	b083      	sub	sp, #12
   11c08:	af00      	add	r7, sp, #0
   11c0a:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   11c0c:	4a04      	ldr	r2, [pc, #16]	; (11c20 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   11c0e:	687b      	ldr	r3, [r7, #4]
   11c10:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   11c12:	687b      	ldr	r3, [r7, #4]
   11c14:	4618      	mov	r0, r3
   11c16:	370c      	adds	r7, #12
   11c18:	46bd      	mov	sp, r7
   11c1a:	bc80      	pop	{r7}
   11c1c:	4770      	bx	lr
   11c1e:	bf00      	nop
   11c20:	20007ba0 	.word	0x20007ba0

00011c24 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   11c24:	b480      	push	{r7}
   11c26:	b083      	sub	sp, #12
   11c28:	af00      	add	r7, sp, #0
   11c2a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   11c2c:	687b      	ldr	r3, [r7, #4]
   11c2e:	4618      	mov	r0, r3
   11c30:	370c      	adds	r7, #12
   11c32:	46bd      	mov	sp, r7
   11c34:	bc80      	pop	{r7}
   11c36:	4770      	bx	lr

00011c38 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   11c38:	b580      	push	{r7, lr}
   11c3a:	b082      	sub	sp, #8
   11c3c:	af00      	add	r7, sp, #0
   11c3e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11c40:	687b      	ldr	r3, [r7, #4]
   11c42:	68da      	ldr	r2, [r3, #12]
   11c44:	687b      	ldr	r3, [r7, #4]
   11c46:	3310      	adds	r3, #16
   11c48:	4619      	mov	r1, r3
   11c4a:	4610      	mov	r0, r2
   11c4c:	4b09      	ldr	r3, [pc, #36]	; (11c74 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   11c4e:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   11c50:	687b      	ldr	r3, [r7, #4]
   11c52:	68db      	ldr	r3, [r3, #12]
   11c54:	4618      	mov	r0, r3
   11c56:	4b08      	ldr	r3, [pc, #32]	; (11c78 <_ZN13SPI_Syn_Class4initEv+0x40>)
   11c58:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   11c5a:	687b      	ldr	r3, [r7, #4]
   11c5c:	4a07      	ldr	r2, [pc, #28]	; (11c7c <_ZN13SPI_Syn_Class4initEv+0x44>)
   11c5e:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   11c60:	687b      	ldr	r3, [r7, #4]
   11c62:	4a06      	ldr	r2, [pc, #24]	; (11c7c <_ZN13SPI_Syn_Class4initEv+0x44>)
   11c64:	609a      	str	r2, [r3, #8]
	ready=true;
   11c66:	687b      	ldr	r3, [r7, #4]
   11c68:	2201      	movs	r2, #1
   11c6a:	701a      	strb	r2, [r3, #0]
	
}
   11c6c:	bf00      	nop
   11c6e:	3708      	adds	r7, #8
   11c70:	46bd      	mov	sp, r7
   11c72:	bd80      	pop	{r7, pc}
   11c74:	00002f6d 	.word	0x00002f6d
   11c78:	00002de1 	.word	0x00002de1
   11c7c:	20007ba4 	.word	0x20007ba4

00011c80 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   11c80:	b480      	push	{r7}
   11c82:	b083      	sub	sp, #12
   11c84:	af00      	add	r7, sp, #0
   11c86:	6078      	str	r0, [r7, #4]
   11c88:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   11c8a:	4a05      	ldr	r2, [pc, #20]	; (11ca0 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   11c8c:	687b      	ldr	r3, [r7, #4]
   11c8e:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   11c90:	687b      	ldr	r3, [r7, #4]
   11c92:	683a      	ldr	r2, [r7, #0]
   11c94:	60da      	str	r2, [r3, #12]
}
   11c96:	bf00      	nop
   11c98:	370c      	adds	r7, #12
   11c9a:	46bd      	mov	sp, r7
   11c9c:	bc80      	pop	{r7}
   11c9e:	4770      	bx	lr
   11ca0:	20007ba0 	.word	0x20007ba0

00011ca4 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   11ca4:	b580      	push	{r7, lr}
   11ca6:	b082      	sub	sp, #8
   11ca8:	af00      	add	r7, sp, #0
   11caa:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11cac:	687b      	ldr	r3, [r7, #4]
   11cae:	68da      	ldr	r2, [r3, #12]
   11cb0:	687b      	ldr	r3, [r7, #4]
   11cb2:	3310      	adds	r3, #16
   11cb4:	4619      	mov	r1, r3
   11cb6:	4610      	mov	r0, r2
   11cb8:	4b07      	ldr	r3, [pc, #28]	; (11cd8 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   11cba:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   11cbc:	687b      	ldr	r3, [r7, #4]
   11cbe:	68db      	ldr	r3, [r3, #12]
   11cc0:	4618      	mov	r0, r3
   11cc2:	4b06      	ldr	r3, [pc, #24]	; (11cdc <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   11cc4:	4798      	blx	r3
	ready=true;
   11cc6:	687b      	ldr	r3, [r7, #4]
   11cc8:	2201      	movs	r2, #1
   11cca:	701a      	strb	r2, [r3, #0]
	return 0;
   11ccc:	2300      	movs	r3, #0
}
   11cce:	4618      	mov	r0, r3
   11cd0:	3708      	adds	r7, #8
   11cd2:	46bd      	mov	sp, r7
   11cd4:	bd80      	pop	{r7, pc}
   11cd6:	bf00      	nop
   11cd8:	00002f6d 	.word	0x00002f6d
   11cdc:	00002de1 	.word	0x00002de1

00011ce0 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   11ce0:	b580      	push	{r7, lr}
   11ce2:	b086      	sub	sp, #24
   11ce4:	af00      	add	r7, sp, #0
   11ce6:	60f8      	str	r0, [r7, #12]
   11ce8:	60b9      	str	r1, [r7, #8]
   11cea:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   11cec:	68fb      	ldr	r3, [r7, #12]
   11cee:	2201      	movs	r2, #1
   11cf0:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   11cf2:	68fb      	ldr	r3, [r7, #12]
   11cf4:	691b      	ldr	r3, [r3, #16]
   11cf6:	687a      	ldr	r2, [r7, #4]
   11cf8:	b292      	uxth	r2, r2
   11cfa:	68b9      	ldr	r1, [r7, #8]
   11cfc:	4618      	mov	r0, r3
   11cfe:	4b08      	ldr	r3, [pc, #32]	; (11d20 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   11d00:	4798      	blx	r3
   11d02:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   11d04:	697b      	ldr	r3, [r7, #20]
   11d06:	2b00      	cmp	r3, #0
   11d08:	bf14      	ite	ne
   11d0a:	2301      	movne	r3, #1
   11d0c:	2300      	moveq	r3, #0
   11d0e:	b2da      	uxtb	r2, r3
   11d10:	68fb      	ldr	r3, [r7, #12]
   11d12:	761a      	strb	r2, [r3, #24]
	 return w;
   11d14:	697b      	ldr	r3, [r7, #20]
	
}
   11d16:	4618      	mov	r0, r3
   11d18:	3718      	adds	r7, #24
   11d1a:	46bd      	mov	sp, r7
   11d1c:	bd80      	pop	{r7, pc}
   11d1e:	bf00      	nop
   11d20:	0001262d 	.word	0x0001262d

00011d24 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   11d24:	b580      	push	{r7, lr}
   11d26:	b086      	sub	sp, #24
   11d28:	af00      	add	r7, sp, #0
   11d2a:	60f8      	str	r0, [r7, #12]
   11d2c:	60b9      	str	r1, [r7, #8]
   11d2e:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   11d30:	68fb      	ldr	r3, [r7, #12]
   11d32:	2201      	movs	r2, #1
   11d34:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   11d36:	68fb      	ldr	r3, [r7, #12]
   11d38:	691b      	ldr	r3, [r3, #16]
   11d3a:	687a      	ldr	r2, [r7, #4]
   11d3c:	b292      	uxth	r2, r2
   11d3e:	68b9      	ldr	r1, [r7, #8]
   11d40:	4618      	mov	r0, r3
   11d42:	4b08      	ldr	r3, [pc, #32]	; (11d64 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   11d44:	4798      	blx	r3
   11d46:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   11d48:	697b      	ldr	r3, [r7, #20]
   11d4a:	2b00      	cmp	r3, #0
   11d4c:	bf14      	ite	ne
   11d4e:	2301      	movne	r3, #1
   11d50:	2300      	moveq	r3, #0
   11d52:	b2da      	uxtb	r2, r3
   11d54:	68fb      	ldr	r3, [r7, #12]
   11d56:	765a      	strb	r2, [r3, #25]
	return  r;
   11d58:	697b      	ldr	r3, [r7, #20]
}
   11d5a:	4618      	mov	r0, r3
   11d5c:	3718      	adds	r7, #24
   11d5e:	46bd      	mov	sp, r7
   11d60:	bd80      	pop	{r7, pc}
   11d62:	bf00      	nop
   11d64:	0001267d 	.word	0x0001267d

00011d68 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   11d68:	b580      	push	{r7, lr}
   11d6a:	b082      	sub	sp, #8
   11d6c:	af00      	add	r7, sp, #0
   11d6e:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   11d70:	687b      	ldr	r3, [r7, #4]
   11d72:	68db      	ldr	r3, [r3, #12]
   11d74:	4618      	mov	r0, r3
   11d76:	4b03      	ldr	r3, [pc, #12]	; (11d84 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   11d78:	4798      	blx	r3
	
}
   11d7a:	bf00      	nop
   11d7c:	3708      	adds	r7, #8
   11d7e:	46bd      	mov	sp, r7
   11d80:	bd80      	pop	{r7, pc}
   11d82:	bf00      	nop
   11d84:	00002e1d 	.word	0x00002e1d

00011d88 <hri_port_set_DIR_reg>:
{
   11d88:	b480      	push	{r7}
   11d8a:	b085      	sub	sp, #20
   11d8c:	af00      	add	r7, sp, #0
   11d8e:	60f8      	str	r0, [r7, #12]
   11d90:	460b      	mov	r3, r1
   11d92:	607a      	str	r2, [r7, #4]
   11d94:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   11d96:	7afb      	ldrb	r3, [r7, #11]
   11d98:	68fa      	ldr	r2, [r7, #12]
   11d9a:	01db      	lsls	r3, r3, #7
   11d9c:	4413      	add	r3, r2
   11d9e:	3308      	adds	r3, #8
   11da0:	687a      	ldr	r2, [r7, #4]
   11da2:	601a      	str	r2, [r3, #0]
}
   11da4:	bf00      	nop
   11da6:	3714      	adds	r7, #20
   11da8:	46bd      	mov	sp, r7
   11daa:	bc80      	pop	{r7}
   11dac:	4770      	bx	lr

00011dae <hri_port_clear_DIR_reg>:
{
   11dae:	b480      	push	{r7}
   11db0:	b085      	sub	sp, #20
   11db2:	af00      	add	r7, sp, #0
   11db4:	60f8      	str	r0, [r7, #12]
   11db6:	460b      	mov	r3, r1
   11db8:	607a      	str	r2, [r7, #4]
   11dba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   11dbc:	7afb      	ldrb	r3, [r7, #11]
   11dbe:	68fa      	ldr	r2, [r7, #12]
   11dc0:	01db      	lsls	r3, r3, #7
   11dc2:	4413      	add	r3, r2
   11dc4:	3304      	adds	r3, #4
   11dc6:	687a      	ldr	r2, [r7, #4]
   11dc8:	601a      	str	r2, [r3, #0]
}
   11dca:	bf00      	nop
   11dcc:	3714      	adds	r7, #20
   11dce:	46bd      	mov	sp, r7
   11dd0:	bc80      	pop	{r7}
   11dd2:	4770      	bx	lr

00011dd4 <hri_port_set_OUT_reg>:
{
   11dd4:	b480      	push	{r7}
   11dd6:	b085      	sub	sp, #20
   11dd8:	af00      	add	r7, sp, #0
   11dda:	60f8      	str	r0, [r7, #12]
   11ddc:	460b      	mov	r3, r1
   11dde:	607a      	str	r2, [r7, #4]
   11de0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   11de2:	7afb      	ldrb	r3, [r7, #11]
   11de4:	68fa      	ldr	r2, [r7, #12]
   11de6:	01db      	lsls	r3, r3, #7
   11de8:	4413      	add	r3, r2
   11dea:	3318      	adds	r3, #24
   11dec:	687a      	ldr	r2, [r7, #4]
   11dee:	601a      	str	r2, [r3, #0]
}
   11df0:	bf00      	nop
   11df2:	3714      	adds	r7, #20
   11df4:	46bd      	mov	sp, r7
   11df6:	bc80      	pop	{r7}
   11df8:	4770      	bx	lr

00011dfa <hri_port_clear_OUT_reg>:
{
   11dfa:	b480      	push	{r7}
   11dfc:	b085      	sub	sp, #20
   11dfe:	af00      	add	r7, sp, #0
   11e00:	60f8      	str	r0, [r7, #12]
   11e02:	460b      	mov	r3, r1
   11e04:	607a      	str	r2, [r7, #4]
   11e06:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   11e08:	7afb      	ldrb	r3, [r7, #11]
   11e0a:	68fa      	ldr	r2, [r7, #12]
   11e0c:	01db      	lsls	r3, r3, #7
   11e0e:	4413      	add	r3, r2
   11e10:	3314      	adds	r3, #20
   11e12:	687a      	ldr	r2, [r7, #4]
   11e14:	601a      	str	r2, [r3, #0]
}
   11e16:	bf00      	nop
   11e18:	3714      	adds	r7, #20
   11e1a:	46bd      	mov	sp, r7
   11e1c:	bc80      	pop	{r7}
   11e1e:	4770      	bx	lr

00011e20 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   11e20:	b480      	push	{r7}
   11e22:	b085      	sub	sp, #20
   11e24:	af00      	add	r7, sp, #0
   11e26:	6078      	str	r0, [r7, #4]
   11e28:	4608      	mov	r0, r1
   11e2a:	4611      	mov	r1, r2
   11e2c:	461a      	mov	r2, r3
   11e2e:	4603      	mov	r3, r0
   11e30:	70fb      	strb	r3, [r7, #3]
   11e32:	460b      	mov	r3, r1
   11e34:	70bb      	strb	r3, [r7, #2]
   11e36:	4613      	mov	r3, r2
   11e38:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   11e3a:	78fa      	ldrb	r2, [r7, #3]
   11e3c:	78bb      	ldrb	r3, [r7, #2]
   11e3e:	6879      	ldr	r1, [r7, #4]
   11e40:	01d2      	lsls	r2, r2, #7
   11e42:	440a      	add	r2, r1
   11e44:	4413      	add	r3, r2
   11e46:	3330      	adds	r3, #48	; 0x30
   11e48:	781b      	ldrb	r3, [r3, #0]
   11e4a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   11e4c:	7bfb      	ldrb	r3, [r7, #15]
   11e4e:	f023 030f 	bic.w	r3, r3, #15
   11e52:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   11e54:	787b      	ldrb	r3, [r7, #1]
   11e56:	f003 030f 	and.w	r3, r3, #15
   11e5a:	b2da      	uxtb	r2, r3
   11e5c:	7bfb      	ldrb	r3, [r7, #15]
   11e5e:	4313      	orrs	r3, r2
   11e60:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   11e62:	78fa      	ldrb	r2, [r7, #3]
   11e64:	78bb      	ldrb	r3, [r7, #2]
   11e66:	6879      	ldr	r1, [r7, #4]
   11e68:	01d2      	lsls	r2, r2, #7
   11e6a:	440a      	add	r2, r1
   11e6c:	4413      	add	r3, r2
   11e6e:	3330      	adds	r3, #48	; 0x30
   11e70:	7bfa      	ldrb	r2, [r7, #15]
   11e72:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   11e74:	bf00      	nop
   11e76:	3714      	adds	r7, #20
   11e78:	46bd      	mov	sp, r7
   11e7a:	bc80      	pop	{r7}
   11e7c:	4770      	bx	lr

00011e7e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   11e7e:	b480      	push	{r7}
   11e80:	b085      	sub	sp, #20
   11e82:	af00      	add	r7, sp, #0
   11e84:	6078      	str	r0, [r7, #4]
   11e86:	4608      	mov	r0, r1
   11e88:	4611      	mov	r1, r2
   11e8a:	461a      	mov	r2, r3
   11e8c:	4603      	mov	r3, r0
   11e8e:	70fb      	strb	r3, [r7, #3]
   11e90:	460b      	mov	r3, r1
   11e92:	70bb      	strb	r3, [r7, #2]
   11e94:	4613      	mov	r3, r2
   11e96:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   11e98:	78fa      	ldrb	r2, [r7, #3]
   11e9a:	78bb      	ldrb	r3, [r7, #2]
   11e9c:	6879      	ldr	r1, [r7, #4]
   11e9e:	01d2      	lsls	r2, r2, #7
   11ea0:	440a      	add	r2, r1
   11ea2:	4413      	add	r3, r2
   11ea4:	3330      	adds	r3, #48	; 0x30
   11ea6:	781b      	ldrb	r3, [r3, #0]
   11ea8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   11eaa:	7bfb      	ldrb	r3, [r7, #15]
   11eac:	f003 030f 	and.w	r3, r3, #15
   11eb0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   11eb2:	787b      	ldrb	r3, [r7, #1]
   11eb4:	011b      	lsls	r3, r3, #4
   11eb6:	b2da      	uxtb	r2, r3
   11eb8:	7bfb      	ldrb	r3, [r7, #15]
   11eba:	4313      	orrs	r3, r2
   11ebc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   11ebe:	78fa      	ldrb	r2, [r7, #3]
   11ec0:	78bb      	ldrb	r3, [r7, #2]
   11ec2:	6879      	ldr	r1, [r7, #4]
   11ec4:	01d2      	lsls	r2, r2, #7
   11ec6:	440a      	add	r2, r1
   11ec8:	4413      	add	r3, r2
   11eca:	3330      	adds	r3, #48	; 0x30
   11ecc:	7bfa      	ldrb	r2, [r7, #15]
   11ece:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   11ed0:	bf00      	nop
   11ed2:	3714      	adds	r7, #20
   11ed4:	46bd      	mov	sp, r7
   11ed6:	bc80      	pop	{r7}
   11ed8:	4770      	bx	lr

00011eda <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   11eda:	b480      	push	{r7}
   11edc:	b085      	sub	sp, #20
   11ede:	af00      	add	r7, sp, #0
   11ee0:	6078      	str	r0, [r7, #4]
   11ee2:	4608      	mov	r0, r1
   11ee4:	4611      	mov	r1, r2
   11ee6:	461a      	mov	r2, r3
   11ee8:	4603      	mov	r3, r0
   11eea:	70fb      	strb	r3, [r7, #3]
   11eec:	460b      	mov	r3, r1
   11eee:	70bb      	strb	r3, [r7, #2]
   11ef0:	4613      	mov	r3, r2
   11ef2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   11ef4:	78fa      	ldrb	r2, [r7, #3]
   11ef6:	78bb      	ldrb	r3, [r7, #2]
   11ef8:	6879      	ldr	r1, [r7, #4]
   11efa:	01d2      	lsls	r2, r2, #7
   11efc:	440a      	add	r2, r1
   11efe:	4413      	add	r3, r2
   11f00:	3340      	adds	r3, #64	; 0x40
   11f02:	781b      	ldrb	r3, [r3, #0]
   11f04:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   11f06:	7bfb      	ldrb	r3, [r7, #15]
   11f08:	f023 0301 	bic.w	r3, r3, #1
   11f0c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   11f0e:	787a      	ldrb	r2, [r7, #1]
   11f10:	7bfb      	ldrb	r3, [r7, #15]
   11f12:	4313      	orrs	r3, r2
   11f14:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   11f16:	78fa      	ldrb	r2, [r7, #3]
   11f18:	78bb      	ldrb	r3, [r7, #2]
   11f1a:	6879      	ldr	r1, [r7, #4]
   11f1c:	01d2      	lsls	r2, r2, #7
   11f1e:	440a      	add	r2, r1
   11f20:	4413      	add	r3, r2
   11f22:	3340      	adds	r3, #64	; 0x40
   11f24:	7bfa      	ldrb	r2, [r7, #15]
   11f26:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   11f28:	bf00      	nop
   11f2a:	3714      	adds	r7, #20
   11f2c:	46bd      	mov	sp, r7
   11f2e:	bc80      	pop	{r7}
   11f30:	4770      	bx	lr

00011f32 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   11f32:	b480      	push	{r7}
   11f34:	b085      	sub	sp, #20
   11f36:	af00      	add	r7, sp, #0
   11f38:	60f8      	str	r0, [r7, #12]
   11f3a:	460b      	mov	r3, r1
   11f3c:	607a      	str	r2, [r7, #4]
   11f3e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   11f40:	7afb      	ldrb	r3, [r7, #11]
   11f42:	68fa      	ldr	r2, [r7, #12]
   11f44:	01db      	lsls	r3, r3, #7
   11f46:	4413      	add	r3, r2
   11f48:	3328      	adds	r3, #40	; 0x28
   11f4a:	687a      	ldr	r2, [r7, #4]
   11f4c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   11f4e:	bf00      	nop
   11f50:	3714      	adds	r7, #20
   11f52:	46bd      	mov	sp, r7
   11f54:	bc80      	pop	{r7}
   11f56:	4770      	bx	lr

00011f58 <_gpio_set_direction>:
{
   11f58:	b580      	push	{r7, lr}
   11f5a:	b082      	sub	sp, #8
   11f5c:	af00      	add	r7, sp, #0
   11f5e:	4603      	mov	r3, r0
   11f60:	6039      	str	r1, [r7, #0]
   11f62:	71fb      	strb	r3, [r7, #7]
   11f64:	4613      	mov	r3, r2
   11f66:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   11f68:	79bb      	ldrb	r3, [r7, #6]
   11f6a:	2b01      	cmp	r3, #1
   11f6c:	d01c      	beq.n	11fa8 <_gpio_set_direction+0x50>
   11f6e:	2b02      	cmp	r3, #2
   11f70:	d037      	beq.n	11fe2 <_gpio_set_direction+0x8a>
   11f72:	2b00      	cmp	r3, #0
   11f74:	d14e      	bne.n	12014 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   11f76:	79fb      	ldrb	r3, [r7, #7]
   11f78:	683a      	ldr	r2, [r7, #0]
   11f7a:	4619      	mov	r1, r3
   11f7c:	482a      	ldr	r0, [pc, #168]	; (12028 <_gpio_set_direction+0xd0>)
   11f7e:	4b2b      	ldr	r3, [pc, #172]	; (1202c <_gpio_set_direction+0xd4>)
   11f80:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   11f82:	683b      	ldr	r3, [r7, #0]
   11f84:	b29b      	uxth	r3, r3
   11f86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   11f8a:	79fb      	ldrb	r3, [r7, #7]
   11f8c:	4619      	mov	r1, r3
   11f8e:	4826      	ldr	r0, [pc, #152]	; (12028 <_gpio_set_direction+0xd0>)
   11f90:	4b27      	ldr	r3, [pc, #156]	; (12030 <_gpio_set_direction+0xd8>)
   11f92:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   11f94:	683b      	ldr	r3, [r7, #0]
   11f96:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   11f98:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   11f9c:	79fb      	ldrb	r3, [r7, #7]
   11f9e:	4619      	mov	r1, r3
   11fa0:	4821      	ldr	r0, [pc, #132]	; (12028 <_gpio_set_direction+0xd0>)
   11fa2:	4b23      	ldr	r3, [pc, #140]	; (12030 <_gpio_set_direction+0xd8>)
   11fa4:	4798      	blx	r3
		break;
   11fa6:	e03a      	b.n	1201e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   11fa8:	79fb      	ldrb	r3, [r7, #7]
   11faa:	683a      	ldr	r2, [r7, #0]
   11fac:	4619      	mov	r1, r3
   11fae:	481e      	ldr	r0, [pc, #120]	; (12028 <_gpio_set_direction+0xd0>)
   11fb0:	4b1e      	ldr	r3, [pc, #120]	; (1202c <_gpio_set_direction+0xd4>)
   11fb2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   11fb4:	683b      	ldr	r3, [r7, #0]
   11fb6:	b29b      	uxth	r3, r3
   11fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   11fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11fc0:	79f9      	ldrb	r1, [r7, #7]
   11fc2:	461a      	mov	r2, r3
   11fc4:	4818      	ldr	r0, [pc, #96]	; (12028 <_gpio_set_direction+0xd0>)
   11fc6:	4b1a      	ldr	r3, [pc, #104]	; (12030 <_gpio_set_direction+0xd8>)
   11fc8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   11fca:	683b      	ldr	r3, [r7, #0]
   11fcc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   11fce:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   11fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   11fd6:	79f9      	ldrb	r1, [r7, #7]
   11fd8:	461a      	mov	r2, r3
   11fda:	4813      	ldr	r0, [pc, #76]	; (12028 <_gpio_set_direction+0xd0>)
   11fdc:	4b14      	ldr	r3, [pc, #80]	; (12030 <_gpio_set_direction+0xd8>)
   11fde:	4798      	blx	r3
		break;
   11fe0:	e01d      	b.n	1201e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   11fe2:	79fb      	ldrb	r3, [r7, #7]
   11fe4:	683a      	ldr	r2, [r7, #0]
   11fe6:	4619      	mov	r1, r3
   11fe8:	480f      	ldr	r0, [pc, #60]	; (12028 <_gpio_set_direction+0xd0>)
   11fea:	4b12      	ldr	r3, [pc, #72]	; (12034 <_gpio_set_direction+0xdc>)
   11fec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   11fee:	683b      	ldr	r3, [r7, #0]
   11ff0:	b29b      	uxth	r3, r3
   11ff2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   11ff6:	79fb      	ldrb	r3, [r7, #7]
   11ff8:	4619      	mov	r1, r3
   11ffa:	480b      	ldr	r0, [pc, #44]	; (12028 <_gpio_set_direction+0xd0>)
   11ffc:	4b0c      	ldr	r3, [pc, #48]	; (12030 <_gpio_set_direction+0xd8>)
   11ffe:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12000:	683b      	ldr	r3, [r7, #0]
   12002:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12004:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12008:	79fb      	ldrb	r3, [r7, #7]
   1200a:	4619      	mov	r1, r3
   1200c:	4806      	ldr	r0, [pc, #24]	; (12028 <_gpio_set_direction+0xd0>)
   1200e:	4b08      	ldr	r3, [pc, #32]	; (12030 <_gpio_set_direction+0xd8>)
   12010:	4798      	blx	r3
		break;
   12012:	e004      	b.n	1201e <_gpio_set_direction+0xc6>
		ASSERT(false);
   12014:	2246      	movs	r2, #70	; 0x46
   12016:	4908      	ldr	r1, [pc, #32]	; (12038 <_gpio_set_direction+0xe0>)
   12018:	2000      	movs	r0, #0
   1201a:	4b08      	ldr	r3, [pc, #32]	; (1203c <_gpio_set_direction+0xe4>)
   1201c:	4798      	blx	r3
}
   1201e:	bf00      	nop
   12020:	3708      	adds	r7, #8
   12022:	46bd      	mov	sp, r7
   12024:	bd80      	pop	{r7, pc}
   12026:	bf00      	nop
   12028:	41008000 	.word	0x41008000
   1202c:	00011daf 	.word	0x00011daf
   12030:	00011f33 	.word	0x00011f33
   12034:	00011d89 	.word	0x00011d89
   12038:	00013520 	.word	0x00013520
   1203c:	00003df5 	.word	0x00003df5

00012040 <_gpio_set_level>:
{
   12040:	b580      	push	{r7, lr}
   12042:	b082      	sub	sp, #8
   12044:	af00      	add	r7, sp, #0
   12046:	4603      	mov	r3, r0
   12048:	6039      	str	r1, [r7, #0]
   1204a:	71fb      	strb	r3, [r7, #7]
   1204c:	4613      	mov	r3, r2
   1204e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12050:	79bb      	ldrb	r3, [r7, #6]
   12052:	2b00      	cmp	r3, #0
   12054:	d006      	beq.n	12064 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12056:	79fb      	ldrb	r3, [r7, #7]
   12058:	683a      	ldr	r2, [r7, #0]
   1205a:	4619      	mov	r1, r3
   1205c:	4806      	ldr	r0, [pc, #24]	; (12078 <_gpio_set_level+0x38>)
   1205e:	4b07      	ldr	r3, [pc, #28]	; (1207c <_gpio_set_level+0x3c>)
   12060:	4798      	blx	r3
}
   12062:	e005      	b.n	12070 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12064:	79fb      	ldrb	r3, [r7, #7]
   12066:	683a      	ldr	r2, [r7, #0]
   12068:	4619      	mov	r1, r3
   1206a:	4803      	ldr	r0, [pc, #12]	; (12078 <_gpio_set_level+0x38>)
   1206c:	4b04      	ldr	r3, [pc, #16]	; (12080 <_gpio_set_level+0x40>)
   1206e:	4798      	blx	r3
}
   12070:	bf00      	nop
   12072:	3708      	adds	r7, #8
   12074:	46bd      	mov	sp, r7
   12076:	bd80      	pop	{r7, pc}
   12078:	41008000 	.word	0x41008000
   1207c:	00011dd5 	.word	0x00011dd5
   12080:	00011dfb 	.word	0x00011dfb

00012084 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   12084:	b590      	push	{r4, r7, lr}
   12086:	b085      	sub	sp, #20
   12088:	af00      	add	r7, sp, #0
   1208a:	6078      	str	r0, [r7, #4]
   1208c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1208e:	687b      	ldr	r3, [r7, #4]
   12090:	095b      	lsrs	r3, r3, #5
   12092:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   12094:	687b      	ldr	r3, [r7, #4]
   12096:	b2db      	uxtb	r3, r3
   12098:	f003 031f 	and.w	r3, r3, #31
   1209c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   1209e:	683b      	ldr	r3, [r7, #0]
   120a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   120a4:	d106      	bne.n	120b4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   120a6:	7bba      	ldrb	r2, [r7, #14]
   120a8:	7bf9      	ldrb	r1, [r7, #15]
   120aa:	2300      	movs	r3, #0
   120ac:	4812      	ldr	r0, [pc, #72]	; (120f8 <_gpio_set_pin_function+0x74>)
   120ae:	4c13      	ldr	r4, [pc, #76]	; (120fc <_gpio_set_pin_function+0x78>)
   120b0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   120b2:	e01d      	b.n	120f0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   120b4:	7bba      	ldrb	r2, [r7, #14]
   120b6:	7bf9      	ldrb	r1, [r7, #15]
   120b8:	2301      	movs	r3, #1
   120ba:	480f      	ldr	r0, [pc, #60]	; (120f8 <_gpio_set_pin_function+0x74>)
   120bc:	4c0f      	ldr	r4, [pc, #60]	; (120fc <_gpio_set_pin_function+0x78>)
   120be:	47a0      	blx	r4
		if (pin & 1) {
   120c0:	7bbb      	ldrb	r3, [r7, #14]
   120c2:	f003 0301 	and.w	r3, r3, #1
   120c6:	2b00      	cmp	r3, #0
   120c8:	d009      	beq.n	120de <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   120ca:	7bbb      	ldrb	r3, [r7, #14]
   120cc:	105b      	asrs	r3, r3, #1
   120ce:	b2da      	uxtb	r2, r3
   120d0:	683b      	ldr	r3, [r7, #0]
   120d2:	b2db      	uxtb	r3, r3
   120d4:	7bf9      	ldrb	r1, [r7, #15]
   120d6:	4808      	ldr	r0, [pc, #32]	; (120f8 <_gpio_set_pin_function+0x74>)
   120d8:	4c09      	ldr	r4, [pc, #36]	; (12100 <_gpio_set_pin_function+0x7c>)
   120da:	47a0      	blx	r4
}
   120dc:	e008      	b.n	120f0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   120de:	7bbb      	ldrb	r3, [r7, #14]
   120e0:	105b      	asrs	r3, r3, #1
   120e2:	b2da      	uxtb	r2, r3
   120e4:	683b      	ldr	r3, [r7, #0]
   120e6:	b2db      	uxtb	r3, r3
   120e8:	7bf9      	ldrb	r1, [r7, #15]
   120ea:	4803      	ldr	r0, [pc, #12]	; (120f8 <_gpio_set_pin_function+0x74>)
   120ec:	4c05      	ldr	r4, [pc, #20]	; (12104 <_gpio_set_pin_function+0x80>)
   120ee:	47a0      	blx	r4
}
   120f0:	bf00      	nop
   120f2:	3714      	adds	r7, #20
   120f4:	46bd      	mov	sp, r7
   120f6:	bd90      	pop	{r4, r7, pc}
   120f8:	41008000 	.word	0x41008000
   120fc:	00011edb 	.word	0x00011edb
   12100:	00011e7f 	.word	0x00011e7f
   12104:	00011e21 	.word	0x00011e21

00012108 <gpio_set_pin_function>:
{
   12108:	b580      	push	{r7, lr}
   1210a:	b082      	sub	sp, #8
   1210c:	af00      	add	r7, sp, #0
   1210e:	6078      	str	r0, [r7, #4]
   12110:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   12112:	6839      	ldr	r1, [r7, #0]
   12114:	6878      	ldr	r0, [r7, #4]
   12116:	4b03      	ldr	r3, [pc, #12]	; (12124 <gpio_set_pin_function+0x1c>)
   12118:	4798      	blx	r3
}
   1211a:	bf00      	nop
   1211c:	3708      	adds	r7, #8
   1211e:	46bd      	mov	sp, r7
   12120:	bd80      	pop	{r7, pc}
   12122:	bf00      	nop
   12124:	00012085 	.word	0x00012085

00012128 <gpio_set_pin_direction>:
{
   12128:	b580      	push	{r7, lr}
   1212a:	b082      	sub	sp, #8
   1212c:	af00      	add	r7, sp, #0
   1212e:	4603      	mov	r3, r0
   12130:	460a      	mov	r2, r1
   12132:	71fb      	strb	r3, [r7, #7]
   12134:	4613      	mov	r3, r2
   12136:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   12138:	79fb      	ldrb	r3, [r7, #7]
   1213a:	115b      	asrs	r3, r3, #5
   1213c:	b2d8      	uxtb	r0, r3
   1213e:	79fb      	ldrb	r3, [r7, #7]
   12140:	f003 031f 	and.w	r3, r3, #31
   12144:	2201      	movs	r2, #1
   12146:	fa02 f303 	lsl.w	r3, r2, r3
   1214a:	79ba      	ldrb	r2, [r7, #6]
   1214c:	4619      	mov	r1, r3
   1214e:	4b03      	ldr	r3, [pc, #12]	; (1215c <gpio_set_pin_direction+0x34>)
   12150:	4798      	blx	r3
}
   12152:	bf00      	nop
   12154:	3708      	adds	r7, #8
   12156:	46bd      	mov	sp, r7
   12158:	bd80      	pop	{r7, pc}
   1215a:	bf00      	nop
   1215c:	00011f59 	.word	0x00011f59

00012160 <gpio_set_pin_level>:
{
   12160:	b580      	push	{r7, lr}
   12162:	b082      	sub	sp, #8
   12164:	af00      	add	r7, sp, #0
   12166:	4603      	mov	r3, r0
   12168:	460a      	mov	r2, r1
   1216a:	71fb      	strb	r3, [r7, #7]
   1216c:	4613      	mov	r3, r2
   1216e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12170:	79fb      	ldrb	r3, [r7, #7]
   12172:	115b      	asrs	r3, r3, #5
   12174:	b2d8      	uxtb	r0, r3
   12176:	79fb      	ldrb	r3, [r7, #7]
   12178:	f003 031f 	and.w	r3, r3, #31
   1217c:	2201      	movs	r2, #1
   1217e:	fa02 f303 	lsl.w	r3, r2, r3
   12182:	79ba      	ldrb	r2, [r7, #6]
   12184:	4619      	mov	r1, r3
   12186:	4b03      	ldr	r3, [pc, #12]	; (12194 <gpio_set_pin_level+0x34>)
   12188:	4798      	blx	r3
}
   1218a:	bf00      	nop
   1218c:	3708      	adds	r7, #8
   1218e:	46bd      	mov	sp, r7
   12190:	bd80      	pop	{r7, pc}
   12192:	bf00      	nop
   12194:	00012041 	.word	0x00012041

00012198 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   12198:	b580      	push	{r7, lr}
   1219a:	b082      	sub	sp, #8
   1219c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   1219e:	2100      	movs	r1, #0
   121a0:	2008      	movs	r0, #8
   121a2:	4b24      	ldr	r3, [pc, #144]	; (12234 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   121a4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   121a6:	2100      	movs	r1, #0
   121a8:	202b      	movs	r0, #43	; 0x2b
   121aa:	4b22      	ldr	r3, [pc, #136]	; (12234 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   121ac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   121ae:	2100      	movs	r1, #0
   121b0:	202a      	movs	r0, #42	; 0x2a
   121b2:	4b20      	ldr	r3, [pc, #128]	; (12234 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   121b4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   121b6:	2102      	movs	r1, #2
   121b8:	2008      	movs	r0, #8
   121ba:	4b1f      	ldr	r3, [pc, #124]	; (12238 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   121bc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   121be:	2102      	movs	r1, #2
   121c0:	202b      	movs	r0, #43	; 0x2b
   121c2:	4b1d      	ldr	r3, [pc, #116]	; (12238 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   121c4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   121c6:	2102      	movs	r1, #2
   121c8:	202a      	movs	r0, #42	; 0x2a
   121ca:	4b1b      	ldr	r3, [pc, #108]	; (12238 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   121cc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   121ce:	2101      	movs	r1, #1
   121d0:	2008      	movs	r0, #8
   121d2:	4b1a      	ldr	r3, [pc, #104]	; (1223c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   121d4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   121d6:	2100      	movs	r1, #0
   121d8:	202b      	movs	r0, #43	; 0x2b
   121da:	4b18      	ldr	r3, [pc, #96]	; (1223c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   121dc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   121de:	2100      	movs	r1, #0
   121e0:	202a      	movs	r0, #42	; 0x2a
   121e2:	4b16      	ldr	r3, [pc, #88]	; (1223c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   121e4:	4798      	blx	r3

	delay_us(1);
   121e6:	2001      	movs	r0, #1
   121e8:	4b15      	ldr	r3, [pc, #84]	; (12240 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   121ea:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   121ec:	2300      	movs	r3, #0
   121ee:	607b      	str	r3, [r7, #4]
   121f0:	687b      	ldr	r3, [r7, #4]
   121f2:	2b06      	cmp	r3, #6
   121f4:	dc11      	bgt.n	1221a <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   121f6:	2101      	movs	r1, #1
   121f8:	202a      	movs	r0, #42	; 0x2a
   121fa:	4b10      	ldr	r3, [pc, #64]	; (1223c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   121fc:	4798      	blx	r3
		delay_us(1);
   121fe:	2001      	movs	r0, #1
   12200:	4b0f      	ldr	r3, [pc, #60]	; (12240 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12202:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   12204:	2100      	movs	r1, #0
   12206:	202a      	movs	r0, #42	; 0x2a
   12208:	4b0c      	ldr	r3, [pc, #48]	; (1223c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1220a:	4798      	blx	r3
		delay_us(1);
   1220c:	2001      	movs	r0, #1
   1220e:	4b0c      	ldr	r3, [pc, #48]	; (12240 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12210:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   12212:	687b      	ldr	r3, [r7, #4]
   12214:	3301      	adds	r3, #1
   12216:	607b      	str	r3, [r7, #4]
   12218:	e7ea      	b.n	121f0 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   1221a:	2101      	movs	r1, #1
   1221c:	202b      	movs	r0, #43	; 0x2b
   1221e:	4b07      	ldr	r3, [pc, #28]	; (1223c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12220:	4798      	blx	r3
	delay_us(1);
   12222:	2001      	movs	r0, #1
   12224:	4b06      	ldr	r3, [pc, #24]	; (12240 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12226:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   12228:	4b06      	ldr	r3, [pc, #24]	; (12244 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   1222a:	4798      	blx	r3
}
   1222c:	bf00      	nop
   1222e:	3708      	adds	r7, #8
   12230:	46bd      	mov	sp, r7
   12232:	bd80      	pop	{r7, pc}
   12234:	00012109 	.word	0x00012109
   12238:	00012129 	.word	0x00012129
   1223c:	00012161 	.word	0x00012161
   12240:	00002785 	.word	0x00002785
   12244:	00001b41 	.word	0x00001b41

00012248 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   12248:	b480      	push	{r7}
   1224a:	b083      	sub	sp, #12
   1224c:	af00      	add	r7, sp, #0
   1224e:	6078      	str	r0, [r7, #4]
   12250:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   12252:	687b      	ldr	r3, [r7, #4]
   12254:	683a      	ldr	r2, [r7, #0]
   12256:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   12258:	687b      	ldr	r3, [r7, #4]
   1225a:	4a04      	ldr	r2, [pc, #16]	; (1226c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   1225c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   12260:	687b      	ldr	r3, [r7, #4]
   12262:	4618      	mov	r0, r3
   12264:	370c      	adds	r7, #12
   12266:	46bd      	mov	sp, r7
   12268:	bc80      	pop	{r7}
   1226a:	4770      	bx	lr
   1226c:	001fff00 	.word	0x001fff00

00012270 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   12270:	b480      	push	{r7}
   12272:	b083      	sub	sp, #12
   12274:	af00      	add	r7, sp, #0
   12276:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   12278:	687b      	ldr	r3, [r7, #4]
   1227a:	4618      	mov	r0, r3
   1227c:	370c      	adds	r7, #12
   1227e:	46bd      	mov	sp, r7
   12280:	bc80      	pop	{r7}
   12282:	4770      	bx	lr

00012284 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   12284:	b580      	push	{r7, lr}
   12286:	b082      	sub	sp, #8
   12288:	af00      	add	r7, sp, #0
   1228a:	6078      	str	r0, [r7, #4]
	xferDone=false;
   1228c:	687b      	ldr	r3, [r7, #4]
   1228e:	2200      	movs	r2, #0
   12290:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   12292:	6878      	ldr	r0, [r7, #4]
   12294:	4b04      	ldr	r3, [pc, #16]	; (122a8 <_ZN13N25Q256_Class4InitEv+0x24>)
   12296:	4798      	blx	r3
	return SelfTest();
   12298:	6878      	ldr	r0, [r7, #4]
   1229a:	4b04      	ldr	r3, [pc, #16]	; (122ac <_ZN13N25Q256_Class4InitEv+0x28>)
   1229c:	4798      	blx	r3
   1229e:	4603      	mov	r3, r0
}
   122a0:	4618      	mov	r0, r3
   122a2:	3708      	adds	r7, #8
   122a4:	46bd      	mov	sp, r7
   122a6:	bd80      	pop	{r7, pc}
   122a8:	000122b1 	.word	0x000122b1
   122ac:	0001244d 	.word	0x0001244d

000122b0 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   122b0:	b590      	push	{r4, r7, lr}
   122b2:	b083      	sub	sp, #12
   122b4:	af00      	add	r7, sp, #0
   122b6:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   122b8:	687b      	ldr	r3, [r7, #4]
   122ba:	685b      	ldr	r3, [r3, #4]
   122bc:	4618      	mov	r0, r3
   122be:	4b08      	ldr	r3, [pc, #32]	; (122e0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   122c0:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   122c2:	687b      	ldr	r3, [r7, #4]
   122c4:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   122c6:	2300      	movs	r3, #0
   122c8:	4a06      	ldr	r2, [pc, #24]	; (122e4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   122ca:	4807      	ldr	r0, [pc, #28]	; (122e8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   122cc:	4c07      	ldr	r4, [pc, #28]	; (122ec <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   122ce:	47a0      	blx	r4
   122d0:	4602      	mov	r2, r0
   122d2:	687b      	ldr	r3, [r7, #4]
   122d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   122d8:	bf00      	nop
   122da:	370c      	adds	r7, #12
   122dc:	46bd      	mov	sp, r7
   122de:	bd90      	pop	{r4, r7, pc}
   122e0:	00002c9d 	.word	0x00002c9d
   122e4:	00012199 	.word	0x00012199
   122e8:	20007be8 	.word	0x20007be8
   122ec:	0000bdc1 	.word	0x0000bdc1

000122f0 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   122f0:	b580      	push	{r7, lr}
   122f2:	b084      	sub	sp, #16
   122f4:	af00      	add	r7, sp, #0
   122f6:	6078      	str	r0, [r7, #4]
   122f8:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   122fa:	687b      	ldr	r3, [r7, #4]
   122fc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12300:	685b      	ldr	r3, [r3, #4]
   12302:	689b      	ldr	r3, [r3, #8]
   12304:	687a      	ldr	r2, [r7, #4]
   12306:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   1230a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1230e:	6839      	ldr	r1, [r7, #0]
   12310:	4798      	blx	r3
   12312:	4603      	mov	r3, r0
   12314:	60fb      	str	r3, [r7, #12]
	return	e;
   12316:	68fb      	ldr	r3, [r7, #12]
}
   12318:	4618      	mov	r0, r3
   1231a:	3710      	adds	r7, #16
   1231c:	46bd      	mov	sp, r7
   1231e:	bd80      	pop	{r7, pc}

00012320 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12320:	b590      	push	{r4, r7, lr}
   12322:	b087      	sub	sp, #28
   12324:	af00      	add	r7, sp, #0
   12326:	60f8      	str	r0, [r7, #12]
   12328:	60b9      	str	r1, [r7, #8]
   1232a:	607a      	str	r2, [r7, #4]
   1232c:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   1232e:	68fb      	ldr	r3, [r7, #12]
   12330:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12334:	685b      	ldr	r3, [r3, #4]
   12336:	685c      	ldr	r4, [r3, #4]
   12338:	68fb      	ldr	r3, [r7, #12]
   1233a:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   1233e:	683b      	ldr	r3, [r7, #0]
   12340:	687a      	ldr	r2, [r7, #4]
   12342:	68b9      	ldr	r1, [r7, #8]
   12344:	47a0      	blx	r4
   12346:	4603      	mov	r3, r0
   12348:	617b      	str	r3, [r7, #20]
	return	w;
   1234a:	697b      	ldr	r3, [r7, #20]
}
   1234c:	4618      	mov	r0, r3
   1234e:	371c      	adds	r7, #28
   12350:	46bd      	mov	sp, r7
   12352:	bd90      	pop	{r4, r7, pc}

00012354 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12354:	b590      	push	{r4, r7, lr}
   12356:	b087      	sub	sp, #28
   12358:	af00      	add	r7, sp, #0
   1235a:	60f8      	str	r0, [r7, #12]
   1235c:	60b9      	str	r1, [r7, #8]
   1235e:	607a      	str	r2, [r7, #4]
   12360:	603b      	str	r3, [r7, #0]
	xferDone=false;
   12362:	68fb      	ldr	r3, [r7, #12]
   12364:	2200      	movs	r2, #0
   12366:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   12368:	68fb      	ldr	r3, [r7, #12]
   1236a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1236e:	685b      	ldr	r3, [r3, #4]
   12370:	681c      	ldr	r4, [r3, #0]
   12372:	68fb      	ldr	r3, [r7, #12]
   12374:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   12378:	683b      	ldr	r3, [r7, #0]
   1237a:	687a      	ldr	r2, [r7, #4]
   1237c:	68b9      	ldr	r1, [r7, #8]
   1237e:	47a0      	blx	r4
   12380:	4603      	mov	r3, r0
   12382:	617b      	str	r3, [r7, #20]
	return	r;
   12384:	697b      	ldr	r3, [r7, #20]
}
   12386:	4618      	mov	r0, r3
   12388:	371c      	adds	r7, #28
   1238a:	46bd      	mov	sp, r7
   1238c:	bd90      	pop	{r4, r7, pc}
	...

00012390 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   12390:	b580      	push	{r7, lr}
   12392:	b082      	sub	sp, #8
   12394:	af00      	add	r7, sp, #0
   12396:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   12398:	687a      	ldr	r2, [r7, #4]
   1239a:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   1239e:	f043 0310 	orr.w	r3, r3, #16
   123a2:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   123a6:	687a      	ldr	r2, [r7, #4]
   123a8:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   123ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   123b0:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   123b4:	687a      	ldr	r2, [r7, #4]
   123b6:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   123ba:	f36f 1305 	bfc	r3, #4, #2
   123be:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   123c2:	687b      	ldr	r3, [r7, #4]
   123c4:	2205      	movs	r2, #5
   123c6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   123ca:	687b      	ldr	r3, [r7, #4]
   123cc:	2201      	movs	r2, #1
   123ce:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   123d2:	687b      	ldr	r3, [r7, #4]
   123d4:	f203 2212 	addw	r2, r3, #530	; 0x212
   123d8:	687b      	ldr	r3, [r7, #4]
   123da:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   123de:	687b      	ldr	r3, [r7, #4]
   123e0:	685a      	ldr	r2, [r3, #4]
   123e2:	687b      	ldr	r3, [r7, #4]
   123e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
   123e8:	4619      	mov	r1, r3
   123ea:	4610      	mov	r0, r2
   123ec:	4b04      	ldr	r3, [pc, #16]	; (12400 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   123ee:	4798      	blx	r3
		return status;
   123f0:	687b      	ldr	r3, [r7, #4]
   123f2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   123f6:	4618      	mov	r0, r3
   123f8:	3708      	adds	r7, #8
   123fa:	46bd      	mov	sp, r7
   123fc:	bd80      	pop	{r7, pc}
   123fe:	bf00      	nop
   12400:	00002d15 	.word	0x00002d15

00012404 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   12404:	b580      	push	{r7, lr}
   12406:	b082      	sub	sp, #8
   12408:	af00      	add	r7, sp, #0
   1240a:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   1240c:	6878      	ldr	r0, [r7, #4]
   1240e:	4b0e      	ldr	r3, [pc, #56]	; (12448 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   12410:	4798      	blx	r3
   12412:	4603      	mov	r3, r0
   12414:	461a      	mov	r2, r3
   12416:	687b      	ldr	r3, [r7, #4]
   12418:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   1241c:	687b      	ldr	r3, [r7, #4]
   1241e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   12422:	f003 0301 	and.w	r3, r3, #1
   12426:	2b00      	cmp	r3, #0
   12428:	d000      	beq.n	1242c <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   1242a:	e7ef      	b.n	1240c <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   1242c:	687b      	ldr	r3, [r7, #4]
   1242e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   12432:	f003 0301 	and.w	r3, r3, #1
   12436:	2b00      	cmp	r3, #0
   12438:	bf0c      	ite	eq
   1243a:	2301      	moveq	r3, #1
   1243c:	2300      	movne	r3, #0
   1243e:	b2db      	uxtb	r3, r3
}
   12440:	4618      	mov	r0, r3
   12442:	3708      	adds	r7, #8
   12444:	46bd      	mov	sp, r7
   12446:	bd80      	pop	{r7, pc}
   12448:	00012391 	.word	0x00012391

0001244c <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   1244c:	b590      	push	{r4, r7, lr}
   1244e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   12452:	b085      	sub	sp, #20
   12454:	af00      	add	r7, sp, #0
   12456:	f107 0310 	add.w	r3, r7, #16
   1245a:	3b0c      	subs	r3, #12
   1245c:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   1245e:	f107 0310 	add.w	r3, r7, #16
   12462:	3b0c      	subs	r3, #12
   12464:	681b      	ldr	r3, [r3, #0]
   12466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1246a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   1246e:	f107 0310 	add.w	r3, r7, #16
   12472:	3b0c      	subs	r3, #12
   12474:	681b      	ldr	r3, [r3, #0]
   12476:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1247a:	f107 0110 	add.w	r1, r7, #16
   1247e:	3904      	subs	r1, #4
   12480:	f107 0010 	add.w	r0, r7, #16
   12484:	380c      	subs	r0, #12
   12486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1248a:	6800      	ldr	r0, [r0, #0]
   1248c:	4c4b      	ldr	r4, [pc, #300]	; (125bc <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   1248e:	47a0      	blx	r4
	WaitOnBusy();
   12490:	f107 0310 	add.w	r3, r7, #16
   12494:	3b0c      	subs	r3, #12
   12496:	6818      	ldr	r0, [r3, #0]
   12498:	4b49      	ldr	r3, [pc, #292]	; (125c0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1249a:	4798      	blx	r3
	Erase(currentAddress);
   1249c:	f107 0310 	add.w	r3, r7, #16
   124a0:	3b0c      	subs	r3, #12
   124a2:	681b      	ldr	r3, [r3, #0]
   124a4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   124a8:	f107 0310 	add.w	r3, r7, #16
   124ac:	3b0c      	subs	r3, #12
   124ae:	4611      	mov	r1, r2
   124b0:	6818      	ldr	r0, [r3, #0]
   124b2:	4b44      	ldr	r3, [pc, #272]	; (125c4 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   124b4:	4798      	blx	r3
	WaitOnBusy();
   124b6:	f107 0310 	add.w	r3, r7, #16
   124ba:	3b0c      	subs	r3, #12
   124bc:	6818      	ldr	r0, [r3, #0]
   124be:	4b40      	ldr	r3, [pc, #256]	; (125c0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   124c0:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   124c2:	f107 0310 	add.w	r3, r7, #16
   124c6:	3b0c      	subs	r3, #12
   124c8:	681b      	ldr	r3, [r3, #0]
   124ca:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   124ce:	f107 0110 	add.w	r1, r7, #16
   124d2:	3904      	subs	r1, #4
   124d4:	f107 0010 	add.w	r0, r7, #16
   124d8:	380c      	subs	r0, #12
   124da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   124de:	6800      	ldr	r0, [r0, #0]
   124e0:	4c39      	ldr	r4, [pc, #228]	; (125c8 <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   124e2:	47a0      	blx	r4
	WaitOnBusy();
   124e4:	f107 0310 	add.w	r3, r7, #16
   124e8:	3b0c      	subs	r3, #12
   124ea:	6818      	ldr	r0, [r3, #0]
   124ec:	4b34      	ldr	r3, [pc, #208]	; (125c0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   124ee:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   124f0:	f107 0310 	add.w	r3, r7, #16
   124f4:	3b0c      	subs	r3, #12
   124f6:	681b      	ldr	r3, [r3, #0]
   124f8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   124fc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   12500:	f101 0110 	add.w	r1, r1, #16
   12504:	3904      	subs	r1, #4
   12506:	f107 0010 	add.w	r0, r7, #16
   1250a:	380c      	subs	r0, #12
   1250c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12510:	6800      	ldr	r0, [r0, #0]
   12512:	4c2a      	ldr	r4, [pc, #168]	; (125bc <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   12514:	47a0      	blx	r4
	WaitOnBusy();
   12516:	f107 0310 	add.w	r3, r7, #16
   1251a:	3b0c      	subs	r3, #12
   1251c:	6818      	ldr	r0, [r3, #0]
   1251e:	4b28      	ldr	r3, [pc, #160]	; (125c0 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12520:	4798      	blx	r3
	isOK	 = true;
   12522:	f107 0310 	add.w	r3, r7, #16
   12526:	3b0c      	subs	r3, #12
   12528:	681b      	ldr	r3, [r3, #0]
   1252a:	2201      	movs	r2, #1
   1252c:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   12530:	2300      	movs	r3, #0
   12532:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12536:	f102 020c 	add.w	r2, r2, #12
   1253a:	6013      	str	r3, [r2, #0]
   1253c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12540:	f103 030c 	add.w	r3, r3, #12
   12544:	681b      	ldr	r3, [r3, #0]
   12546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1254a:	da2b      	bge.n	125a4 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   1254c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   12550:	f103 0310 	add.w	r3, r3, #16
   12554:	3b04      	subs	r3, #4
   12556:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1255a:	f102 020c 	add.w	r2, r2, #12
   1255e:	6812      	ldr	r2, [r2, #0]
   12560:	4413      	add	r3, r2
   12562:	781a      	ldrb	r2, [r3, #0]
   12564:	f107 0310 	add.w	r3, r7, #16
   12568:	3b04      	subs	r3, #4
   1256a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   1256e:	f101 010c 	add.w	r1, r1, #12
   12572:	6809      	ldr	r1, [r1, #0]
   12574:	440b      	add	r3, r1
   12576:	781b      	ldrb	r3, [r3, #0]
   12578:	429a      	cmp	r2, r3
   1257a:	d007      	beq.n	1258c <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   1257c:	f107 0310 	add.w	r3, r7, #16
   12580:	3b0c      	subs	r3, #12
   12582:	681b      	ldr	r3, [r3, #0]
   12584:	2200      	movs	r2, #0
   12586:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   1258a:	e00b      	b.n	125a4 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   1258c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12590:	f103 030c 	add.w	r3, r3, #12
   12594:	681b      	ldr	r3, [r3, #0]
   12596:	3301      	adds	r3, #1
   12598:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1259c:	f102 020c 	add.w	r2, r2, #12
   125a0:	6013      	str	r3, [r2, #0]
   125a2:	e7cb      	b.n	1253c <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   125a4:	f107 0310 	add.w	r3, r7, #16
   125a8:	3b0c      	subs	r3, #12
   125aa:	681b      	ldr	r3, [r3, #0]
   125ac:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   125b0:	4618      	mov	r0, r3
   125b2:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   125b6:	3714      	adds	r7, #20
   125b8:	46bd      	mov	sp, r7
   125ba:	bd90      	pop	{r4, r7, pc}
   125bc:	00012355 	.word	0x00012355
   125c0:	00012405 	.word	0x00012405
   125c4:	000122f1 	.word	0x000122f1
   125c8:	00012321 	.word	0x00012321

000125cc <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   125cc:	b580      	push	{r7, lr}
   125ce:	b082      	sub	sp, #8
   125d0:	af00      	add	r7, sp, #0
   125d2:	6078      	str	r0, [r7, #4]
   125d4:	6039      	str	r1, [r7, #0]
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	2b01      	cmp	r3, #1
   125da:	d10d      	bne.n	125f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   125dc:	683b      	ldr	r3, [r7, #0]
   125de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   125e2:	4293      	cmp	r3, r2
   125e4:	d108      	bne.n	125f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   125e6:	4906      	ldr	r1, [pc, #24]	; (12600 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   125e8:	4806      	ldr	r0, [pc, #24]	; (12604 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   125ea:	4b07      	ldr	r3, [pc, #28]	; (12608 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   125ec:	4798      	blx	r3
   125ee:	4a07      	ldr	r2, [pc, #28]	; (1260c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   125f0:	4907      	ldr	r1, [pc, #28]	; (12610 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   125f2:	4804      	ldr	r0, [pc, #16]	; (12604 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   125f4:	4b07      	ldr	r3, [pc, #28]	; (12614 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   125f6:	4798      	blx	r3
   125f8:	bf00      	nop
   125fa:	3708      	adds	r7, #8
   125fc:	46bd      	mov	sp, r7
   125fe:	bd80      	pop	{r7, pc}
   12600:	20007eb8 	.word	0x20007eb8
   12604:	20007bf8 	.word	0x20007bf8
   12608:	00012249 	.word	0x00012249
   1260c:	20000000 	.word	0x20000000
   12610:	00012271 	.word	0x00012271
   12614:	000126cd 	.word	0x000126cd

00012618 <_GLOBAL__sub_I_ptrN25Q256Class>:
   12618:	b580      	push	{r7, lr}
   1261a:	af00      	add	r7, sp, #0
   1261c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12620:	2001      	movs	r0, #1
   12622:	4b01      	ldr	r3, [pc, #4]	; (12628 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   12624:	4798      	blx	r3
   12626:	bd80      	pop	{r7, pc}
   12628:	000125cd 	.word	0x000125cd

0001262c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   1262c:	b580      	push	{r7, lr}
   1262e:	b084      	sub	sp, #16
   12630:	af00      	add	r7, sp, #0
   12632:	60f8      	str	r0, [r7, #12]
   12634:	60b9      	str	r1, [r7, #8]
   12636:	4613      	mov	r3, r2
   12638:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1263a:	68fb      	ldr	r3, [r7, #12]
   1263c:	2b00      	cmp	r3, #0
   1263e:	d004      	beq.n	1264a <io_write+0x1e>
   12640:	68bb      	ldr	r3, [r7, #8]
   12642:	2b00      	cmp	r3, #0
   12644:	d001      	beq.n	1264a <io_write+0x1e>
   12646:	2301      	movs	r3, #1
   12648:	e000      	b.n	1264c <io_write+0x20>
   1264a:	2300      	movs	r3, #0
   1264c:	f003 0301 	and.w	r3, r3, #1
   12650:	b2db      	uxtb	r3, r3
   12652:	2234      	movs	r2, #52	; 0x34
   12654:	4907      	ldr	r1, [pc, #28]	; (12674 <io_write+0x48>)
   12656:	4618      	mov	r0, r3
   12658:	4b07      	ldr	r3, [pc, #28]	; (12678 <io_write+0x4c>)
   1265a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   1265c:	68fb      	ldr	r3, [r7, #12]
   1265e:	681b      	ldr	r3, [r3, #0]
   12660:	88fa      	ldrh	r2, [r7, #6]
   12662:	68b9      	ldr	r1, [r7, #8]
   12664:	68f8      	ldr	r0, [r7, #12]
   12666:	4798      	blx	r3
   12668:	4603      	mov	r3, r0
}
   1266a:	4618      	mov	r0, r3
   1266c:	3710      	adds	r7, #16
   1266e:	46bd      	mov	sp, r7
   12670:	bd80      	pop	{r7, pc}
   12672:	bf00      	nop
   12674:	00013564 	.word	0x00013564
   12678:	00003df5 	.word	0x00003df5

0001267c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   1267c:	b580      	push	{r7, lr}
   1267e:	b084      	sub	sp, #16
   12680:	af00      	add	r7, sp, #0
   12682:	60f8      	str	r0, [r7, #12]
   12684:	60b9      	str	r1, [r7, #8]
   12686:	4613      	mov	r3, r2
   12688:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   1268a:	68fb      	ldr	r3, [r7, #12]
   1268c:	2b00      	cmp	r3, #0
   1268e:	d004      	beq.n	1269a <io_read+0x1e>
   12690:	68bb      	ldr	r3, [r7, #8]
   12692:	2b00      	cmp	r3, #0
   12694:	d001      	beq.n	1269a <io_read+0x1e>
   12696:	2301      	movs	r3, #1
   12698:	e000      	b.n	1269c <io_read+0x20>
   1269a:	2300      	movs	r3, #0
   1269c:	f003 0301 	and.w	r3, r3, #1
   126a0:	b2db      	uxtb	r3, r3
   126a2:	223d      	movs	r2, #61	; 0x3d
   126a4:	4907      	ldr	r1, [pc, #28]	; (126c4 <io_read+0x48>)
   126a6:	4618      	mov	r0, r3
   126a8:	4b07      	ldr	r3, [pc, #28]	; (126c8 <io_read+0x4c>)
   126aa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   126ac:	68fb      	ldr	r3, [r7, #12]
   126ae:	685b      	ldr	r3, [r3, #4]
   126b0:	88fa      	ldrh	r2, [r7, #6]
   126b2:	68b9      	ldr	r1, [r7, #8]
   126b4:	68f8      	ldr	r0, [r7, #12]
   126b6:	4798      	blx	r3
   126b8:	4603      	mov	r3, r0
}
   126ba:	4618      	mov	r0, r3
   126bc:	3710      	adds	r7, #16
   126be:	46bd      	mov	sp, r7
   126c0:	bd80      	pop	{r7, pc}
   126c2:	bf00      	nop
   126c4:	00013564 	.word	0x00013564
   126c8:	00003df5 	.word	0x00003df5

000126cc <__aeabi_atexit>:
   126cc:	460b      	mov	r3, r1
   126ce:	4601      	mov	r1, r0
   126d0:	4618      	mov	r0, r3
   126d2:	f000 ba7f 	b.w	12bd4 <__cxa_atexit>
   126d6:	bf00      	nop

000126d8 <__aeabi_frsub>:
   126d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   126dc:	e002      	b.n	126e4 <__addsf3>
   126de:	bf00      	nop

000126e0 <__aeabi_fsub>:
   126e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000126e4 <__addsf3>:
   126e4:	0042      	lsls	r2, r0, #1
   126e6:	bf1f      	itttt	ne
   126e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   126ec:	ea92 0f03 	teqne	r2, r3
   126f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   126f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   126f8:	d06a      	beq.n	127d0 <__addsf3+0xec>
   126fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
   126fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   12702:	bfc1      	itttt	gt
   12704:	18d2      	addgt	r2, r2, r3
   12706:	4041      	eorgt	r1, r0
   12708:	4048      	eorgt	r0, r1
   1270a:	4041      	eorgt	r1, r0
   1270c:	bfb8      	it	lt
   1270e:	425b      	neglt	r3, r3
   12710:	2b19      	cmp	r3, #25
   12712:	bf88      	it	hi
   12714:	4770      	bxhi	lr
   12716:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1271a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1271e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12722:	bf18      	it	ne
   12724:	4240      	negne	r0, r0
   12726:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1272a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1272e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   12732:	bf18      	it	ne
   12734:	4249      	negne	r1, r1
   12736:	ea92 0f03 	teq	r2, r3
   1273a:	d03f      	beq.n	127bc <__addsf3+0xd8>
   1273c:	f1a2 0201 	sub.w	r2, r2, #1
   12740:	fa41 fc03 	asr.w	ip, r1, r3
   12744:	eb10 000c 	adds.w	r0, r0, ip
   12748:	f1c3 0320 	rsb	r3, r3, #32
   1274c:	fa01 f103 	lsl.w	r1, r1, r3
   12750:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   12754:	d502      	bpl.n	1275c <__addsf3+0x78>
   12756:	4249      	negs	r1, r1
   12758:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1275c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12760:	d313      	bcc.n	1278a <__addsf3+0xa6>
   12762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   12766:	d306      	bcc.n	12776 <__addsf3+0x92>
   12768:	0840      	lsrs	r0, r0, #1
   1276a:	ea4f 0131 	mov.w	r1, r1, rrx
   1276e:	f102 0201 	add.w	r2, r2, #1
   12772:	2afe      	cmp	r2, #254	; 0xfe
   12774:	d251      	bcs.n	1281a <__addsf3+0x136>
   12776:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1277a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1277e:	bf08      	it	eq
   12780:	f020 0001 	biceq.w	r0, r0, #1
   12784:	ea40 0003 	orr.w	r0, r0, r3
   12788:	4770      	bx	lr
   1278a:	0049      	lsls	r1, r1, #1
   1278c:	eb40 0000 	adc.w	r0, r0, r0
   12790:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   12794:	f1a2 0201 	sub.w	r2, r2, #1
   12798:	d1ed      	bne.n	12776 <__addsf3+0x92>
   1279a:	fab0 fc80 	clz	ip, r0
   1279e:	f1ac 0c08 	sub.w	ip, ip, #8
   127a2:	ebb2 020c 	subs.w	r2, r2, ip
   127a6:	fa00 f00c 	lsl.w	r0, r0, ip
   127aa:	bfaa      	itet	ge
   127ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   127b0:	4252      	neglt	r2, r2
   127b2:	4318      	orrge	r0, r3
   127b4:	bfbc      	itt	lt
   127b6:	40d0      	lsrlt	r0, r2
   127b8:	4318      	orrlt	r0, r3
   127ba:	4770      	bx	lr
   127bc:	f092 0f00 	teq	r2, #0
   127c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   127c4:	bf06      	itte	eq
   127c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   127ca:	3201      	addeq	r2, #1
   127cc:	3b01      	subne	r3, #1
   127ce:	e7b5      	b.n	1273c <__addsf3+0x58>
   127d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   127d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   127d8:	bf18      	it	ne
   127da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   127de:	d021      	beq.n	12824 <__addsf3+0x140>
   127e0:	ea92 0f03 	teq	r2, r3
   127e4:	d004      	beq.n	127f0 <__addsf3+0x10c>
   127e6:	f092 0f00 	teq	r2, #0
   127ea:	bf08      	it	eq
   127ec:	4608      	moveq	r0, r1
   127ee:	4770      	bx	lr
   127f0:	ea90 0f01 	teq	r0, r1
   127f4:	bf1c      	itt	ne
   127f6:	2000      	movne	r0, #0
   127f8:	4770      	bxne	lr
   127fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   127fe:	d104      	bne.n	1280a <__addsf3+0x126>
   12800:	0040      	lsls	r0, r0, #1
   12802:	bf28      	it	cs
   12804:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   12808:	4770      	bx	lr
   1280a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1280e:	bf3c      	itt	cc
   12810:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   12814:	4770      	bxcc	lr
   12816:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1281a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1281e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12822:	4770      	bx	lr
   12824:	ea7f 6222 	mvns.w	r2, r2, asr #24
   12828:	bf16      	itet	ne
   1282a:	4608      	movne	r0, r1
   1282c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   12830:	4601      	movne	r1, r0
   12832:	0242      	lsls	r2, r0, #9
   12834:	bf06      	itte	eq
   12836:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1283a:	ea90 0f01 	teqeq	r0, r1
   1283e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   12842:	4770      	bx	lr

00012844 <__aeabi_ui2f>:
   12844:	f04f 0300 	mov.w	r3, #0
   12848:	e004      	b.n	12854 <__aeabi_i2f+0x8>
   1284a:	bf00      	nop

0001284c <__aeabi_i2f>:
   1284c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   12850:	bf48      	it	mi
   12852:	4240      	negmi	r0, r0
   12854:	ea5f 0c00 	movs.w	ip, r0
   12858:	bf08      	it	eq
   1285a:	4770      	bxeq	lr
   1285c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   12860:	4601      	mov	r1, r0
   12862:	f04f 0000 	mov.w	r0, #0
   12866:	e01c      	b.n	128a2 <__aeabi_l2f+0x2a>

00012868 <__aeabi_ul2f>:
   12868:	ea50 0201 	orrs.w	r2, r0, r1
   1286c:	bf08      	it	eq
   1286e:	4770      	bxeq	lr
   12870:	f04f 0300 	mov.w	r3, #0
   12874:	e00a      	b.n	1288c <__aeabi_l2f+0x14>
   12876:	bf00      	nop

00012878 <__aeabi_l2f>:
   12878:	ea50 0201 	orrs.w	r2, r0, r1
   1287c:	bf08      	it	eq
   1287e:	4770      	bxeq	lr
   12880:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   12884:	d502      	bpl.n	1288c <__aeabi_l2f+0x14>
   12886:	4240      	negs	r0, r0
   12888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1288c:	ea5f 0c01 	movs.w	ip, r1
   12890:	bf02      	ittt	eq
   12892:	4684      	moveq	ip, r0
   12894:	4601      	moveq	r1, r0
   12896:	2000      	moveq	r0, #0
   12898:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1289c:	bf08      	it	eq
   1289e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   128a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   128a6:	fabc f28c 	clz	r2, ip
   128aa:	3a08      	subs	r2, #8
   128ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   128b0:	db10      	blt.n	128d4 <__aeabi_l2f+0x5c>
   128b2:	fa01 fc02 	lsl.w	ip, r1, r2
   128b6:	4463      	add	r3, ip
   128b8:	fa00 fc02 	lsl.w	ip, r0, r2
   128bc:	f1c2 0220 	rsb	r2, r2, #32
   128c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   128c4:	fa20 f202 	lsr.w	r2, r0, r2
   128c8:	eb43 0002 	adc.w	r0, r3, r2
   128cc:	bf08      	it	eq
   128ce:	f020 0001 	biceq.w	r0, r0, #1
   128d2:	4770      	bx	lr
   128d4:	f102 0220 	add.w	r2, r2, #32
   128d8:	fa01 fc02 	lsl.w	ip, r1, r2
   128dc:	f1c2 0220 	rsb	r2, r2, #32
   128e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   128e4:	fa21 f202 	lsr.w	r2, r1, r2
   128e8:	eb43 0002 	adc.w	r0, r3, r2
   128ec:	bf08      	it	eq
   128ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   128f2:	4770      	bx	lr

000128f4 <__aeabi_fmul>:
   128f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   128f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   128fc:	bf1e      	ittt	ne
   128fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   12902:	ea92 0f0c 	teqne	r2, ip
   12906:	ea93 0f0c 	teqne	r3, ip
   1290a:	d06f      	beq.n	129ec <__aeabi_fmul+0xf8>
   1290c:	441a      	add	r2, r3
   1290e:	ea80 0c01 	eor.w	ip, r0, r1
   12912:	0240      	lsls	r0, r0, #9
   12914:	bf18      	it	ne
   12916:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1291a:	d01e      	beq.n	1295a <__aeabi_fmul+0x66>
   1291c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   12920:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   12924:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   12928:	fba0 3101 	umull	r3, r1, r0, r1
   1292c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12930:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   12934:	bf3e      	ittt	cc
   12936:	0049      	lslcc	r1, r1, #1
   12938:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1293c:	005b      	lslcc	r3, r3, #1
   1293e:	ea40 0001 	orr.w	r0, r0, r1
   12942:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   12946:	2afd      	cmp	r2, #253	; 0xfd
   12948:	d81d      	bhi.n	12986 <__aeabi_fmul+0x92>
   1294a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1294e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12952:	bf08      	it	eq
   12954:	f020 0001 	biceq.w	r0, r0, #1
   12958:	4770      	bx	lr
   1295a:	f090 0f00 	teq	r0, #0
   1295e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12962:	bf08      	it	eq
   12964:	0249      	lsleq	r1, r1, #9
   12966:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1296a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1296e:	3a7f      	subs	r2, #127	; 0x7f
   12970:	bfc2      	ittt	gt
   12972:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12976:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1297a:	4770      	bxgt	lr
   1297c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12980:	f04f 0300 	mov.w	r3, #0
   12984:	3a01      	subs	r2, #1
   12986:	dc5d      	bgt.n	12a44 <__aeabi_fmul+0x150>
   12988:	f112 0f19 	cmn.w	r2, #25
   1298c:	bfdc      	itt	le
   1298e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   12992:	4770      	bxle	lr
   12994:	f1c2 0200 	rsb	r2, r2, #0
   12998:	0041      	lsls	r1, r0, #1
   1299a:	fa21 f102 	lsr.w	r1, r1, r2
   1299e:	f1c2 0220 	rsb	r2, r2, #32
   129a2:	fa00 fc02 	lsl.w	ip, r0, r2
   129a6:	ea5f 0031 	movs.w	r0, r1, rrx
   129aa:	f140 0000 	adc.w	r0, r0, #0
   129ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   129b2:	bf08      	it	eq
   129b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   129b8:	4770      	bx	lr
   129ba:	f092 0f00 	teq	r2, #0
   129be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   129c2:	bf02      	ittt	eq
   129c4:	0040      	lsleq	r0, r0, #1
   129c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   129ca:	3a01      	subeq	r2, #1
   129cc:	d0f9      	beq.n	129c2 <__aeabi_fmul+0xce>
   129ce:	ea40 000c 	orr.w	r0, r0, ip
   129d2:	f093 0f00 	teq	r3, #0
   129d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   129da:	bf02      	ittt	eq
   129dc:	0049      	lsleq	r1, r1, #1
   129de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   129e2:	3b01      	subeq	r3, #1
   129e4:	d0f9      	beq.n	129da <__aeabi_fmul+0xe6>
   129e6:	ea41 010c 	orr.w	r1, r1, ip
   129ea:	e78f      	b.n	1290c <__aeabi_fmul+0x18>
   129ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   129f0:	ea92 0f0c 	teq	r2, ip
   129f4:	bf18      	it	ne
   129f6:	ea93 0f0c 	teqne	r3, ip
   129fa:	d00a      	beq.n	12a12 <__aeabi_fmul+0x11e>
   129fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   12a00:	bf18      	it	ne
   12a02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12a06:	d1d8      	bne.n	129ba <__aeabi_fmul+0xc6>
   12a08:	ea80 0001 	eor.w	r0, r0, r1
   12a0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   12a10:	4770      	bx	lr
   12a12:	f090 0f00 	teq	r0, #0
   12a16:	bf17      	itett	ne
   12a18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   12a1c:	4608      	moveq	r0, r1
   12a1e:	f091 0f00 	teqne	r1, #0
   12a22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   12a26:	d014      	beq.n	12a52 <__aeabi_fmul+0x15e>
   12a28:	ea92 0f0c 	teq	r2, ip
   12a2c:	d101      	bne.n	12a32 <__aeabi_fmul+0x13e>
   12a2e:	0242      	lsls	r2, r0, #9
   12a30:	d10f      	bne.n	12a52 <__aeabi_fmul+0x15e>
   12a32:	ea93 0f0c 	teq	r3, ip
   12a36:	d103      	bne.n	12a40 <__aeabi_fmul+0x14c>
   12a38:	024b      	lsls	r3, r1, #9
   12a3a:	bf18      	it	ne
   12a3c:	4608      	movne	r0, r1
   12a3e:	d108      	bne.n	12a52 <__aeabi_fmul+0x15e>
   12a40:	ea80 0001 	eor.w	r0, r0, r1
   12a44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   12a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   12a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12a50:	4770      	bx	lr
   12a52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   12a56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   12a5a:	4770      	bx	lr

00012a5c <__aeabi_fdiv>:
   12a5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12a60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   12a64:	bf1e      	ittt	ne
   12a66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   12a6a:	ea92 0f0c 	teqne	r2, ip
   12a6e:	ea93 0f0c 	teqne	r3, ip
   12a72:	d069      	beq.n	12b48 <__aeabi_fdiv+0xec>
   12a74:	eba2 0203 	sub.w	r2, r2, r3
   12a78:	ea80 0c01 	eor.w	ip, r0, r1
   12a7c:	0249      	lsls	r1, r1, #9
   12a7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   12a82:	d037      	beq.n	12af4 <__aeabi_fdiv+0x98>
   12a84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12a88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   12a8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   12a90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12a94:	428b      	cmp	r3, r1
   12a96:	bf38      	it	cc
   12a98:	005b      	lslcc	r3, r3, #1
   12a9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   12a9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   12aa2:	428b      	cmp	r3, r1
   12aa4:	bf24      	itt	cs
   12aa6:	1a5b      	subcs	r3, r3, r1
   12aa8:	ea40 000c 	orrcs.w	r0, r0, ip
   12aac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   12ab0:	bf24      	itt	cs
   12ab2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   12ab6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12aba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   12abe:	bf24      	itt	cs
   12ac0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   12ac4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12ac8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   12acc:	bf24      	itt	cs
   12ace:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   12ad2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12ad6:	011b      	lsls	r3, r3, #4
   12ad8:	bf18      	it	ne
   12ada:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   12ade:	d1e0      	bne.n	12aa2 <__aeabi_fdiv+0x46>
   12ae0:	2afd      	cmp	r2, #253	; 0xfd
   12ae2:	f63f af50 	bhi.w	12986 <__aeabi_fmul+0x92>
   12ae6:	428b      	cmp	r3, r1
   12ae8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12aec:	bf08      	it	eq
   12aee:	f020 0001 	biceq.w	r0, r0, #1
   12af2:	4770      	bx	lr
   12af4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12af8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   12afc:	327f      	adds	r2, #127	; 0x7f
   12afe:	bfc2      	ittt	gt
   12b00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12b04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12b08:	4770      	bxgt	lr
   12b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12b0e:	f04f 0300 	mov.w	r3, #0
   12b12:	3a01      	subs	r2, #1
   12b14:	e737      	b.n	12986 <__aeabi_fmul+0x92>
   12b16:	f092 0f00 	teq	r2, #0
   12b1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   12b1e:	bf02      	ittt	eq
   12b20:	0040      	lsleq	r0, r0, #1
   12b22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12b26:	3a01      	subeq	r2, #1
   12b28:	d0f9      	beq.n	12b1e <__aeabi_fdiv+0xc2>
   12b2a:	ea40 000c 	orr.w	r0, r0, ip
   12b2e:	f093 0f00 	teq	r3, #0
   12b32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12b36:	bf02      	ittt	eq
   12b38:	0049      	lsleq	r1, r1, #1
   12b3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   12b3e:	3b01      	subeq	r3, #1
   12b40:	d0f9      	beq.n	12b36 <__aeabi_fdiv+0xda>
   12b42:	ea41 010c 	orr.w	r1, r1, ip
   12b46:	e795      	b.n	12a74 <__aeabi_fdiv+0x18>
   12b48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   12b4c:	ea92 0f0c 	teq	r2, ip
   12b50:	d108      	bne.n	12b64 <__aeabi_fdiv+0x108>
   12b52:	0242      	lsls	r2, r0, #9
   12b54:	f47f af7d 	bne.w	12a52 <__aeabi_fmul+0x15e>
   12b58:	ea93 0f0c 	teq	r3, ip
   12b5c:	f47f af70 	bne.w	12a40 <__aeabi_fmul+0x14c>
   12b60:	4608      	mov	r0, r1
   12b62:	e776      	b.n	12a52 <__aeabi_fmul+0x15e>
   12b64:	ea93 0f0c 	teq	r3, ip
   12b68:	d104      	bne.n	12b74 <__aeabi_fdiv+0x118>
   12b6a:	024b      	lsls	r3, r1, #9
   12b6c:	f43f af4c 	beq.w	12a08 <__aeabi_fmul+0x114>
   12b70:	4608      	mov	r0, r1
   12b72:	e76e      	b.n	12a52 <__aeabi_fmul+0x15e>
   12b74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   12b78:	bf18      	it	ne
   12b7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12b7e:	d1ca      	bne.n	12b16 <__aeabi_fdiv+0xba>
   12b80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   12b84:	f47f af5c 	bne.w	12a40 <__aeabi_fmul+0x14c>
   12b88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   12b8c:	f47f af3c 	bne.w	12a08 <__aeabi_fmul+0x114>
   12b90:	e75f      	b.n	12a52 <__aeabi_fmul+0x15e>
   12b92:	bf00      	nop

00012b94 <__aeabi_f2uiz>:
   12b94:	0042      	lsls	r2, r0, #1
   12b96:	d20e      	bcs.n	12bb6 <__aeabi_f2uiz+0x22>
   12b98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   12b9c:	d30b      	bcc.n	12bb6 <__aeabi_f2uiz+0x22>
   12b9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   12ba2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   12ba6:	d409      	bmi.n	12bbc <__aeabi_f2uiz+0x28>
   12ba8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   12bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12bb0:	fa23 f002 	lsr.w	r0, r3, r2
   12bb4:	4770      	bx	lr
   12bb6:	f04f 0000 	mov.w	r0, #0
   12bba:	4770      	bx	lr
   12bbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   12bc0:	d101      	bne.n	12bc6 <__aeabi_f2uiz+0x32>
   12bc2:	0242      	lsls	r2, r0, #9
   12bc4:	d102      	bne.n	12bcc <__aeabi_f2uiz+0x38>
   12bc6:	f04f 30ff 	mov.w	r0, #4294967295
   12bca:	4770      	bx	lr
   12bcc:	f04f 0000 	mov.w	r0, #0
   12bd0:	4770      	bx	lr
   12bd2:	bf00      	nop

00012bd4 <__cxa_atexit>:
   12bd4:	4613      	mov	r3, r2
   12bd6:	460a      	mov	r2, r1
   12bd8:	4601      	mov	r1, r0
   12bda:	2002      	movs	r0, #2
   12bdc:	f000 b99e 	b.w	12f1c <__register_exitproc>

00012be0 <ffs>:
   12be0:	b140      	cbz	r0, 12bf4 <ffs+0x14>
   12be2:	2300      	movs	r3, #0
   12be4:	fa40 f103 	asr.w	r1, r0, r3
   12be8:	1c5a      	adds	r2, r3, #1
   12bea:	07c9      	lsls	r1, r1, #31
   12bec:	4613      	mov	r3, r2
   12bee:	d5f9      	bpl.n	12be4 <ffs+0x4>
   12bf0:	4610      	mov	r0, r2
   12bf2:	4770      	bx	lr
   12bf4:	4602      	mov	r2, r0
   12bf6:	4610      	mov	r0, r2
   12bf8:	4770      	bx	lr
   12bfa:	bf00      	nop

00012bfc <__libc_init_array>:
   12bfc:	b570      	push	{r4, r5, r6, lr}
   12bfe:	4e0f      	ldr	r6, [pc, #60]	; (12c3c <__libc_init_array+0x40>)
   12c00:	4d0f      	ldr	r5, [pc, #60]	; (12c40 <__libc_init_array+0x44>)
   12c02:	1b76      	subs	r6, r6, r5
   12c04:	10b6      	asrs	r6, r6, #2
   12c06:	bf18      	it	ne
   12c08:	2400      	movne	r4, #0
   12c0a:	d005      	beq.n	12c18 <__libc_init_array+0x1c>
   12c0c:	3401      	adds	r4, #1
   12c0e:	f855 3b04 	ldr.w	r3, [r5], #4
   12c12:	4798      	blx	r3
   12c14:	42a6      	cmp	r6, r4
   12c16:	d1f9      	bne.n	12c0c <__libc_init_array+0x10>
   12c18:	4e0a      	ldr	r6, [pc, #40]	; (12c44 <__libc_init_array+0x48>)
   12c1a:	4d0b      	ldr	r5, [pc, #44]	; (12c48 <__libc_init_array+0x4c>)
   12c1c:	1b76      	subs	r6, r6, r5
   12c1e:	f000 fcad 	bl	1357c <_init>
   12c22:	10b6      	asrs	r6, r6, #2
   12c24:	bf18      	it	ne
   12c26:	2400      	movne	r4, #0
   12c28:	d006      	beq.n	12c38 <__libc_init_array+0x3c>
   12c2a:	3401      	adds	r4, #1
   12c2c:	f855 3b04 	ldr.w	r3, [r5], #4
   12c30:	4798      	blx	r3
   12c32:	42a6      	cmp	r6, r4
   12c34:	d1f9      	bne.n	12c2a <__libc_init_array+0x2e>
   12c36:	bd70      	pop	{r4, r5, r6, pc}
   12c38:	bd70      	pop	{r4, r5, r6, pc}
   12c3a:	bf00      	nop
   12c3c:	00013588 	.word	0x00013588
   12c40:	00013588 	.word	0x00013588
   12c44:	000135c0 	.word	0x000135c0
   12c48:	00013588 	.word	0x00013588

00012c4c <memcpy>:
   12c4c:	4684      	mov	ip, r0
   12c4e:	ea41 0300 	orr.w	r3, r1, r0
   12c52:	f013 0303 	ands.w	r3, r3, #3
   12c56:	d16d      	bne.n	12d34 <memcpy+0xe8>
   12c58:	3a40      	subs	r2, #64	; 0x40
   12c5a:	d341      	bcc.n	12ce0 <memcpy+0x94>
   12c5c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c60:	f840 3b04 	str.w	r3, [r0], #4
   12c64:	f851 3b04 	ldr.w	r3, [r1], #4
   12c68:	f840 3b04 	str.w	r3, [r0], #4
   12c6c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c70:	f840 3b04 	str.w	r3, [r0], #4
   12c74:	f851 3b04 	ldr.w	r3, [r1], #4
   12c78:	f840 3b04 	str.w	r3, [r0], #4
   12c7c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c80:	f840 3b04 	str.w	r3, [r0], #4
   12c84:	f851 3b04 	ldr.w	r3, [r1], #4
   12c88:	f840 3b04 	str.w	r3, [r0], #4
   12c8c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c90:	f840 3b04 	str.w	r3, [r0], #4
   12c94:	f851 3b04 	ldr.w	r3, [r1], #4
   12c98:	f840 3b04 	str.w	r3, [r0], #4
   12c9c:	f851 3b04 	ldr.w	r3, [r1], #4
   12ca0:	f840 3b04 	str.w	r3, [r0], #4
   12ca4:	f851 3b04 	ldr.w	r3, [r1], #4
   12ca8:	f840 3b04 	str.w	r3, [r0], #4
   12cac:	f851 3b04 	ldr.w	r3, [r1], #4
   12cb0:	f840 3b04 	str.w	r3, [r0], #4
   12cb4:	f851 3b04 	ldr.w	r3, [r1], #4
   12cb8:	f840 3b04 	str.w	r3, [r0], #4
   12cbc:	f851 3b04 	ldr.w	r3, [r1], #4
   12cc0:	f840 3b04 	str.w	r3, [r0], #4
   12cc4:	f851 3b04 	ldr.w	r3, [r1], #4
   12cc8:	f840 3b04 	str.w	r3, [r0], #4
   12ccc:	f851 3b04 	ldr.w	r3, [r1], #4
   12cd0:	f840 3b04 	str.w	r3, [r0], #4
   12cd4:	f851 3b04 	ldr.w	r3, [r1], #4
   12cd8:	f840 3b04 	str.w	r3, [r0], #4
   12cdc:	3a40      	subs	r2, #64	; 0x40
   12cde:	d2bd      	bcs.n	12c5c <memcpy+0x10>
   12ce0:	3230      	adds	r2, #48	; 0x30
   12ce2:	d311      	bcc.n	12d08 <memcpy+0xbc>
   12ce4:	f851 3b04 	ldr.w	r3, [r1], #4
   12ce8:	f840 3b04 	str.w	r3, [r0], #4
   12cec:	f851 3b04 	ldr.w	r3, [r1], #4
   12cf0:	f840 3b04 	str.w	r3, [r0], #4
   12cf4:	f851 3b04 	ldr.w	r3, [r1], #4
   12cf8:	f840 3b04 	str.w	r3, [r0], #4
   12cfc:	f851 3b04 	ldr.w	r3, [r1], #4
   12d00:	f840 3b04 	str.w	r3, [r0], #4
   12d04:	3a10      	subs	r2, #16
   12d06:	d2ed      	bcs.n	12ce4 <memcpy+0x98>
   12d08:	320c      	adds	r2, #12
   12d0a:	d305      	bcc.n	12d18 <memcpy+0xcc>
   12d0c:	f851 3b04 	ldr.w	r3, [r1], #4
   12d10:	f840 3b04 	str.w	r3, [r0], #4
   12d14:	3a04      	subs	r2, #4
   12d16:	d2f9      	bcs.n	12d0c <memcpy+0xc0>
   12d18:	3204      	adds	r2, #4
   12d1a:	d008      	beq.n	12d2e <memcpy+0xe2>
   12d1c:	07d2      	lsls	r2, r2, #31
   12d1e:	bf1c      	itt	ne
   12d20:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12d24:	f800 3b01 	strbne.w	r3, [r0], #1
   12d28:	d301      	bcc.n	12d2e <memcpy+0xe2>
   12d2a:	880b      	ldrh	r3, [r1, #0]
   12d2c:	8003      	strh	r3, [r0, #0]
   12d2e:	4660      	mov	r0, ip
   12d30:	4770      	bx	lr
   12d32:	bf00      	nop
   12d34:	2a08      	cmp	r2, #8
   12d36:	d313      	bcc.n	12d60 <memcpy+0x114>
   12d38:	078b      	lsls	r3, r1, #30
   12d3a:	d08d      	beq.n	12c58 <memcpy+0xc>
   12d3c:	f010 0303 	ands.w	r3, r0, #3
   12d40:	d08a      	beq.n	12c58 <memcpy+0xc>
   12d42:	f1c3 0304 	rsb	r3, r3, #4
   12d46:	1ad2      	subs	r2, r2, r3
   12d48:	07db      	lsls	r3, r3, #31
   12d4a:	bf1c      	itt	ne
   12d4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12d50:	f800 3b01 	strbne.w	r3, [r0], #1
   12d54:	d380      	bcc.n	12c58 <memcpy+0xc>
   12d56:	f831 3b02 	ldrh.w	r3, [r1], #2
   12d5a:	f820 3b02 	strh.w	r3, [r0], #2
   12d5e:	e77b      	b.n	12c58 <memcpy+0xc>
   12d60:	3a04      	subs	r2, #4
   12d62:	d3d9      	bcc.n	12d18 <memcpy+0xcc>
   12d64:	3a01      	subs	r2, #1
   12d66:	f811 3b01 	ldrb.w	r3, [r1], #1
   12d6a:	f800 3b01 	strb.w	r3, [r0], #1
   12d6e:	d2f9      	bcs.n	12d64 <memcpy+0x118>
   12d70:	780b      	ldrb	r3, [r1, #0]
   12d72:	7003      	strb	r3, [r0, #0]
   12d74:	784b      	ldrb	r3, [r1, #1]
   12d76:	7043      	strb	r3, [r0, #1]
   12d78:	788b      	ldrb	r3, [r1, #2]
   12d7a:	7083      	strb	r3, [r0, #2]
   12d7c:	4660      	mov	r0, ip
   12d7e:	4770      	bx	lr

00012d80 <memset>:
   12d80:	b470      	push	{r4, r5, r6}
   12d82:	0786      	lsls	r6, r0, #30
   12d84:	d046      	beq.n	12e14 <memset+0x94>
   12d86:	1e54      	subs	r4, r2, #1
   12d88:	2a00      	cmp	r2, #0
   12d8a:	d041      	beq.n	12e10 <memset+0x90>
   12d8c:	b2ca      	uxtb	r2, r1
   12d8e:	4603      	mov	r3, r0
   12d90:	e002      	b.n	12d98 <memset+0x18>
   12d92:	f114 34ff 	adds.w	r4, r4, #4294967295
   12d96:	d33b      	bcc.n	12e10 <memset+0x90>
   12d98:	f803 2b01 	strb.w	r2, [r3], #1
   12d9c:	079d      	lsls	r5, r3, #30
   12d9e:	d1f8      	bne.n	12d92 <memset+0x12>
   12da0:	2c03      	cmp	r4, #3
   12da2:	d92e      	bls.n	12e02 <memset+0x82>
   12da4:	b2cd      	uxtb	r5, r1
   12da6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12daa:	2c0f      	cmp	r4, #15
   12dac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12db0:	d919      	bls.n	12de6 <memset+0x66>
   12db2:	f103 0210 	add.w	r2, r3, #16
   12db6:	4626      	mov	r6, r4
   12db8:	3e10      	subs	r6, #16
   12dba:	2e0f      	cmp	r6, #15
   12dbc:	f842 5c10 	str.w	r5, [r2, #-16]
   12dc0:	f842 5c0c 	str.w	r5, [r2, #-12]
   12dc4:	f842 5c08 	str.w	r5, [r2, #-8]
   12dc8:	f842 5c04 	str.w	r5, [r2, #-4]
   12dcc:	f102 0210 	add.w	r2, r2, #16
   12dd0:	d8f2      	bhi.n	12db8 <memset+0x38>
   12dd2:	f1a4 0210 	sub.w	r2, r4, #16
   12dd6:	f022 020f 	bic.w	r2, r2, #15
   12dda:	f004 040f 	and.w	r4, r4, #15
   12dde:	3210      	adds	r2, #16
   12de0:	2c03      	cmp	r4, #3
   12de2:	4413      	add	r3, r2
   12de4:	d90d      	bls.n	12e02 <memset+0x82>
   12de6:	461e      	mov	r6, r3
   12de8:	4622      	mov	r2, r4
   12dea:	3a04      	subs	r2, #4
   12dec:	2a03      	cmp	r2, #3
   12dee:	f846 5b04 	str.w	r5, [r6], #4
   12df2:	d8fa      	bhi.n	12dea <memset+0x6a>
   12df4:	1f22      	subs	r2, r4, #4
   12df6:	f022 0203 	bic.w	r2, r2, #3
   12dfa:	3204      	adds	r2, #4
   12dfc:	4413      	add	r3, r2
   12dfe:	f004 0403 	and.w	r4, r4, #3
   12e02:	b12c      	cbz	r4, 12e10 <memset+0x90>
   12e04:	b2c9      	uxtb	r1, r1
   12e06:	441c      	add	r4, r3
   12e08:	f803 1b01 	strb.w	r1, [r3], #1
   12e0c:	429c      	cmp	r4, r3
   12e0e:	d1fb      	bne.n	12e08 <memset+0x88>
   12e10:	bc70      	pop	{r4, r5, r6}
   12e12:	4770      	bx	lr
   12e14:	4614      	mov	r4, r2
   12e16:	4603      	mov	r3, r0
   12e18:	e7c2      	b.n	12da0 <memset+0x20>
   12e1a:	bf00      	nop
	...

00012e40 <strlen>:
   12e40:	f890 f000 	pld	[r0]
   12e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12e48:	f020 0107 	bic.w	r1, r0, #7
   12e4c:	f06f 0c00 	mvn.w	ip, #0
   12e50:	f010 0407 	ands.w	r4, r0, #7
   12e54:	f891 f020 	pld	[r1, #32]
   12e58:	f040 8049 	bne.w	12eee <strlen+0xae>
   12e5c:	f04f 0400 	mov.w	r4, #0
   12e60:	f06f 0007 	mvn.w	r0, #7
   12e64:	e9d1 2300 	ldrd	r2, r3, [r1]
   12e68:	f891 f040 	pld	[r1, #64]	; 0x40
   12e6c:	f100 0008 	add.w	r0, r0, #8
   12e70:	fa82 f24c 	uadd8	r2, r2, ip
   12e74:	faa4 f28c 	sel	r2, r4, ip
   12e78:	fa83 f34c 	uadd8	r3, r3, ip
   12e7c:	faa2 f38c 	sel	r3, r2, ip
   12e80:	bb4b      	cbnz	r3, 12ed6 <strlen+0x96>
   12e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12e86:	fa82 f24c 	uadd8	r2, r2, ip
   12e8a:	f100 0008 	add.w	r0, r0, #8
   12e8e:	faa4 f28c 	sel	r2, r4, ip
   12e92:	fa83 f34c 	uadd8	r3, r3, ip
   12e96:	faa2 f38c 	sel	r3, r2, ip
   12e9a:	b9e3      	cbnz	r3, 12ed6 <strlen+0x96>
   12e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12ea0:	fa82 f24c 	uadd8	r2, r2, ip
   12ea4:	f100 0008 	add.w	r0, r0, #8
   12ea8:	faa4 f28c 	sel	r2, r4, ip
   12eac:	fa83 f34c 	uadd8	r3, r3, ip
   12eb0:	faa2 f38c 	sel	r3, r2, ip
   12eb4:	b97b      	cbnz	r3, 12ed6 <strlen+0x96>
   12eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   12eba:	f101 0120 	add.w	r1, r1, #32
   12ebe:	fa82 f24c 	uadd8	r2, r2, ip
   12ec2:	f100 0008 	add.w	r0, r0, #8
   12ec6:	faa4 f28c 	sel	r2, r4, ip
   12eca:	fa83 f34c 	uadd8	r3, r3, ip
   12ece:	faa2 f38c 	sel	r3, r2, ip
   12ed2:	2b00      	cmp	r3, #0
   12ed4:	d0c6      	beq.n	12e64 <strlen+0x24>
   12ed6:	2a00      	cmp	r2, #0
   12ed8:	bf04      	itt	eq
   12eda:	3004      	addeq	r0, #4
   12edc:	461a      	moveq	r2, r3
   12ede:	ba12      	rev	r2, r2
   12ee0:	fab2 f282 	clz	r2, r2
   12ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   12eec:	4770      	bx	lr
   12eee:	e9d1 2300 	ldrd	r2, r3, [r1]
   12ef2:	f004 0503 	and.w	r5, r4, #3
   12ef6:	f1c4 0000 	rsb	r0, r4, #0
   12efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12efe:	f014 0f04 	tst.w	r4, #4
   12f02:	f891 f040 	pld	[r1, #64]	; 0x40
   12f06:	fa0c f505 	lsl.w	r5, ip, r5
   12f0a:	ea62 0205 	orn	r2, r2, r5
   12f0e:	bf1c      	itt	ne
   12f10:	ea63 0305 	ornne	r3, r3, r5
   12f14:	4662      	movne	r2, ip
   12f16:	f04f 0400 	mov.w	r4, #0
   12f1a:	e7a9      	b.n	12e70 <strlen+0x30>

00012f1c <__register_exitproc>:
   12f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f20:	4d2c      	ldr	r5, [pc, #176]	; (12fd4 <__register_exitproc+0xb8>)
   12f22:	4606      	mov	r6, r0
   12f24:	6828      	ldr	r0, [r5, #0]
   12f26:	4698      	mov	r8, r3
   12f28:	460f      	mov	r7, r1
   12f2a:	4691      	mov	r9, r2
   12f2c:	f000 f882 	bl	13034 <__retarget_lock_acquire_recursive>
   12f30:	4b29      	ldr	r3, [pc, #164]	; (12fd8 <__register_exitproc+0xbc>)
   12f32:	681c      	ldr	r4, [r3, #0]
   12f34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12f38:	2b00      	cmp	r3, #0
   12f3a:	d03e      	beq.n	12fba <__register_exitproc+0x9e>
   12f3c:	685a      	ldr	r2, [r3, #4]
   12f3e:	2a1f      	cmp	r2, #31
   12f40:	dc1c      	bgt.n	12f7c <__register_exitproc+0x60>
   12f42:	f102 0e01 	add.w	lr, r2, #1
   12f46:	b176      	cbz	r6, 12f66 <__register_exitproc+0x4a>
   12f48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   12f4c:	2401      	movs	r4, #1
   12f4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12f52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   12f56:	4094      	lsls	r4, r2
   12f58:	4320      	orrs	r0, r4
   12f5a:	2e02      	cmp	r6, #2
   12f5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   12f60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12f64:	d023      	beq.n	12fae <__register_exitproc+0x92>
   12f66:	3202      	adds	r2, #2
   12f68:	f8c3 e004 	str.w	lr, [r3, #4]
   12f6c:	6828      	ldr	r0, [r5, #0]
   12f6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   12f72:	f000 f861 	bl	13038 <__retarget_lock_release_recursive>
   12f76:	2000      	movs	r0, #0
   12f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12f7c:	4b17      	ldr	r3, [pc, #92]	; (12fdc <__register_exitproc+0xc0>)
   12f7e:	b30b      	cbz	r3, 12fc4 <__register_exitproc+0xa8>
   12f80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   12f84:	f7fb fca6 	bl	e8d4 <malloc>
   12f88:	4603      	mov	r3, r0
   12f8a:	b1d8      	cbz	r0, 12fc4 <__register_exitproc+0xa8>
   12f8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   12f90:	6002      	str	r2, [r0, #0]
   12f92:	2100      	movs	r1, #0
   12f94:	6041      	str	r1, [r0, #4]
   12f96:	460a      	mov	r2, r1
   12f98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   12f9c:	f04f 0e01 	mov.w	lr, #1
   12fa0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   12fa4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   12fa8:	2e00      	cmp	r6, #0
   12faa:	d0dc      	beq.n	12f66 <__register_exitproc+0x4a>
   12fac:	e7cc      	b.n	12f48 <__register_exitproc+0x2c>
   12fae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   12fb2:	430c      	orrs	r4, r1
   12fb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   12fb8:	e7d5      	b.n	12f66 <__register_exitproc+0x4a>
   12fba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   12fbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   12fc2:	e7bb      	b.n	12f3c <__register_exitproc+0x20>
   12fc4:	6828      	ldr	r0, [r5, #0]
   12fc6:	f000 f837 	bl	13038 <__retarget_lock_release_recursive>
   12fca:	f04f 30ff 	mov.w	r0, #4294967295
   12fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12fd2:	bf00      	nop
   12fd4:	20000608 	.word	0x20000608
   12fd8:	00013578 	.word	0x00013578
   12fdc:	0000e8d5 	.word	0x0000e8d5

00012fe0 <register_fini>:
   12fe0:	4b02      	ldr	r3, [pc, #8]	; (12fec <register_fini+0xc>)
   12fe2:	b113      	cbz	r3, 12fea <register_fini+0xa>
   12fe4:	4802      	ldr	r0, [pc, #8]	; (12ff0 <register_fini+0x10>)
   12fe6:	f000 b805 	b.w	12ff4 <atexit>
   12fea:	4770      	bx	lr
   12fec:	00000000 	.word	0x00000000
   12ff0:	00013001 	.word	0x00013001

00012ff4 <atexit>:
   12ff4:	2300      	movs	r3, #0
   12ff6:	4601      	mov	r1, r0
   12ff8:	461a      	mov	r2, r3
   12ffa:	4618      	mov	r0, r3
   12ffc:	f7ff bf8e 	b.w	12f1c <__register_exitproc>

00013000 <__libc_fini_array>:
   13000:	b538      	push	{r3, r4, r5, lr}
   13002:	4c0a      	ldr	r4, [pc, #40]	; (1302c <__libc_fini_array+0x2c>)
   13004:	4d0a      	ldr	r5, [pc, #40]	; (13030 <__libc_fini_array+0x30>)
   13006:	1b64      	subs	r4, r4, r5
   13008:	10a4      	asrs	r4, r4, #2
   1300a:	d00a      	beq.n	13022 <__libc_fini_array+0x22>
   1300c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   13010:	3b01      	subs	r3, #1
   13012:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   13016:	3c01      	subs	r4, #1
   13018:	f855 3904 	ldr.w	r3, [r5], #-4
   1301c:	4798      	blx	r3
   1301e:	2c00      	cmp	r4, #0
   13020:	d1f9      	bne.n	13016 <__libc_fini_array+0x16>
   13022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13026:	f000 bacb 	b.w	135c0 <_fini>
   1302a:	bf00      	nop
   1302c:	000135d0 	.word	0x000135d0
   13030:	000135cc 	.word	0x000135cc

00013034 <__retarget_lock_acquire_recursive>:
   13034:	4770      	bx	lr
   13036:	bf00      	nop

00013038 <__retarget_lock_release_recursive>:
   13038:	4770      	bx	lr
   1303a:	bf00      	nop

0001303c <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1303c:	0100 0000 0000 0000 0000 0000               ............

00013048 <_ZTT16Maintenance_Tool>:
   13048:	305c 0001 3048 0001                         \0..H0..

00013050 <_ZTV16Maintenance_Tool>:
   13050:	0100 0000 0000 0000 0000 0000 2e2e 682f     ............../h
   13060:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   13070:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
   13080:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
   13090:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   130a0:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
   130b0:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   130c0:	6e61 615f 7973 636e 632e 0000 2e2e 682f     an_async.c..../h
   130d0:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
   130e0:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
   130f0:	6372 682f 6c61 695f 6332 6d5f 735f 6e79     rc/hal_i2c_m_syn
   13100:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   13110:	6c61 705f 6d77 632e 0000 0000 2e2e 682f     al_pwm.c....../h
   13120:	6c61 732f 6372 682f 6c61 715f 7073 5f69     al/src/hal_qspi_
   13130:	7973 636e 632e 0000 2e2e 682f 6c61 732f     sync.c..../hal/s
   13140:	6372 682f 6c61 735f 6970 6d5f 735f 6e79     rc/hal_spi_m_syn
   13150:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   13160:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
   13170:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
   13180:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

0001318c <_map>:
   1318c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   1319c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   131ac:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   131bc:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   131cc:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   131dc:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

000131ec <user_mux_confs>:
   131ec:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00013230 <channel_confs>:
   13230:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00013270 <interrupt_cfg>:
	...
   132f0:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   13300:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   13310:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   13320:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   13330:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   13340:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   13350:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0001335c <sercomspi_regs>:
   1335c:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   1336c:	0c04 3000 0000 0200 0000 0000 ef00 ff00     ...0............
   1337c:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   1338c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   1339c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   133ac:	1400 4300 1800 4300                         ...C...C

000133b4 <_usb_ep_cfgs>:
   133b4:	0954 2000 0000 0000 0040 0000 0994 2000     T.. ....@...... 
   133c4:	09d4 2000 0040 0040 0a14 2000 0a54 2000     ... @.@.... T.. 
   133d4:	0040 0040 0a94 2000 0ad4 2000 0040 0040     @.@.... ... @.@.
   133e4:	0b14 2000 0b54 2000 0040 0040 0804 0000     ... T.. @.@.....
   133f4:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   13404:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   13414:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   13424:	625f 7361 2e65 0068                         _base.h.

0001342c <n25q256a_interface>:
   1342c:	be11 0000 beb5 0000 bfc5 0000 c17d 0000     ............}...
   1343c:	c20d 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   1344c:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00013458 <_ZTV9CDC_Class>:
	...
   13460:	e015 0000 e0f5 0000 dc69 0000 dfdd 0000     ........i.......
   13470:	e18d 0000 dfa1 0000 de85 0000 ded5 0000     ................
   13480:	dffd 0000 e05d 0000                         ....]...

00013488 <_ZTV6Stream>:
	...
   13490:	e8e9 0000 e25d 0000 dc69 0000 dc7d 0000     ....]...i...}...
   134a0:	e8e9 0000 e8e9 0000 e8e9 0000 7830 2e25     ............0x%.
   134b0:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   134c0:	766f 0066                                   ovf.

000134c4 <_ZTV5Print>:
	...
   134cc:	e8e9 0000 e25d 0000 dc69 0000 dc7d 0000     ....]...i...}...
   134dc:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
   134ec:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
   134fc:	0a0d 0000 6c46 7361 2068 654d 6f6d 7972     ....Flash Memory
   1350c:	5320 6c65 5466 7365 2074 4146 4c49 4445      SelfTest FAILED
   1351c:	0000 0000 2e2e 2e2f 2f2e 2e2e 412f 554c     ....../../../ALU
   1352c:	445f 6972 6576 2f72 4c41 5f55 7244 7669     _Driver/ALU_Driv
   1353c:	7265 682f 6c70 702f 726f 2f74 7068 5f6c     er/hpl/port/hpl_
   1354c:	7067 6f69 625f 7361 2e65 0068               gpio_base.h.

00013558 <defaultParameters>:
   13558:	4020 0000                                    @..

0001355c <defaultPreferences>:
   1355c:	00fa 0000 0032 0000 2e2e 682f 6c61 732f     ....2...../hal/s
   1356c:	6372 682f 6c61 695f 2e6f 0063               rc/hal_io.c.

00013578 <_global_impure_ptr>:
   13578:	01e0 2000                                   ... 

0001357c <_init>:
   1357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1357e:	bf00      	nop
   13580:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13582:	bc08      	pop	{r3}
   13584:	469e      	mov	lr, r3
   13586:	4770      	bx	lr

00013588 <__init_array_start>:
   13588:	00012fe1 	.word	0x00012fe1

0001358c <__frame_dummy_init_array_entry>:
   1358c:	00000289 00000bf1 0000dc31 0000e20d     ........1.......
   1359c:	0000e8c1 0000ead9 0000fcc5 00010295     ................
   135ac:	0001058d 00010731 000109ed 00011bf1     ....1...........
   135bc:	00012619                                .&..

000135c0 <_fini>:
   135c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135c2:	bf00      	nop
   135c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   135c6:	bc08      	pop	{r3}
   135c8:	469e      	mov	lr, r3
   135ca:	4770      	bx	lr

000135cc <__fini_array_start>:
   135cc:	00000265 	.word	0x00000265
