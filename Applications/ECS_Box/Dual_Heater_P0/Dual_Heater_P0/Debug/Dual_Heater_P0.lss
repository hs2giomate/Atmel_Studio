
Dual_Heater_P0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f100  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f100  0000f100  0001f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000f108  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          000011f0  2000063c  0000f744  0002063c  2**2
                  ALLOC
  6 .stack        00010004  2000182c  00010934  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00065751  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008c1e  00000000  00000000  00085e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a205  00000000  00000000  0008ea32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e68  00000000  00000000  000a8c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002bb8  00000000  00000000  000aba9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004bf77  00000000  00000000  000ae657  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00034849  00000000  00000000  000fa5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c317  00000000  00000000  0012ee17  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c38c  00000000  00000000  0026b130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 18 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     0.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	a5 58 00 00 a9 46 00 00 b9 46 00 00 d1 02 00 00     .X...F...F......
      7c:	c9 46 00 00 d9 46 00 00 e9 46 00 00 f9 46 00 00     .F...F...F...F..
      8c:	09 47 00 00 19 47 00 00 29 47 00 00 d1 02 00 00     .G...G..)G......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 f1 3a 00 00 85 a7 00 00     .........:......
     184:	95 a7 00 00 a5 a7 00 00 b5 a7 00 00 d1 02 00 00     ................
     194:	c5 71 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .q..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 e1 71 00 00     .............q..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	fd 71 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .q..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 81 7e 00 00 d1 02 00 00     .........~......
     1f4:	9d 7e 00 00 d1 02 00 00 b9 7e 00 00 d5 7e 00 00     .~.......~...~..
     204:	f1 7e 00 00 0d 7f 00 00 d1 02 00 00 d1 02 00 00     .~..............
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000f108 	.word	0x0000f108

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f108 	.word	0x0000f108
     2c4:	20000640 	.word	0x20000640
     2c8:	0000f108 	.word	0x0000f108
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000f108 	.word	0x0000f108
     33c:	2000063c 	.word	0x2000063c
     340:	2000182c 	.word	0x2000182c
     344:	2000063c 	.word	0x2000063c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000e7cd 	.word	0x0000e7cd
     354:	0000045d 	.word	0x0000045d

00000358 <_ZN15HEATERS_HANDLERD1Ev>:
HEATERS_HANDLER::HEATERS_HANDLER()
{
} //HEATERS_HANDLER

// default destructor
HEATERS_HANDLER::~HEATERS_HANDLER()
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
     35c:	4b01      	ldr	r3, [pc, #4]	; (364 <_ZN15HEATERS_HANDLERD1Ev+0xc>)
     35e:	4798      	blx	r3
{
} //~HEATERS_HANDLER
     360:	4620      	mov	r0, r4
     362:	bd10      	pop	{r4, pc}
     364:	0000e015 	.word	0x0000e015

00000368 <__tcf_0>:
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
     368:	b538      	push	{r3, r4, r5, lr}
     36a:	4d04      	ldr	r5, [pc, #16]	; (37c <__tcf_0+0x14>)
     36c:	f105 0024 	add.w	r0, r5, #36	; 0x24
     370:	4c03      	ldr	r4, [pc, #12]	; (380 <__tcf_0+0x18>)
     372:	47a0      	blx	r4
     374:	4628      	mov	r0, r5
     376:	47a0      	blx	r4
     378:	bd38      	pop	{r3, r4, r5, pc}
     37a:	bf00      	nop
     37c:	20000658 	.word	0x20000658
     380:	0000e015 	.word	0x0000e015

00000384 <_ZN15HEATERS_HANDLER4InitEv>:

bool HEATERS_HANDLER::Init(void){
     384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     386:	4604      	mov	r4, r0

	for (uint8_t i = 0; i < NUMBER_OF_HEATERS; i++)
	{
		module[i]=&local_heaters[i];
     388:	4b14      	ldr	r3, [pc, #80]	; (3dc <_ZN15HEATERS_HANDLER4InitEv+0x58>)
     38a:	6243      	str	r3, [r0, #36]	; 0x24
		while (!module[i]->Init(i))
     38c:	4d14      	ldr	r5, [pc, #80]	; (3e0 <_ZN15HEATERS_HANDLER4InitEv+0x5c>)
		{
			delay_ms(200);
     38e:	4f15      	ldr	r7, [pc, #84]	; (3e4 <_ZN15HEATERS_HANDLER4InitEv+0x60>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     390:	4e15      	ldr	r6, [pc, #84]	; (3e8 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
		while (!module[i]->Init(i))
     392:	2100      	movs	r1, #0
     394:	6a60      	ldr	r0, [r4, #36]	; 0x24
     396:	47a8      	blx	r5
     398:	b930      	cbnz	r0, 3a8 <_ZN15HEATERS_HANDLER4InitEv+0x24>
			delay_ms(200);
     39a:	20c8      	movs	r0, #200	; 0xc8
     39c:	47b8      	blx	r7
     39e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     3a2:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
     3a6:	e7f4      	b.n	392 <_ZN15HEATERS_HANDLER4InitEv+0xe>
		module[i]=&local_heaters[i];
     3a8:	4b10      	ldr	r3, [pc, #64]	; (3ec <_ZN15HEATERS_HANDLER4InitEv+0x68>)
     3aa:	62a3      	str	r3, [r4, #40]	; 0x28
		while (!module[i]->Init(i))
     3ac:	4d0c      	ldr	r5, [pc, #48]	; (3e0 <_ZN15HEATERS_HANDLER4InitEv+0x5c>)
			delay_ms(200);
     3ae:	4f0d      	ldr	r7, [pc, #52]	; (3e4 <_ZN15HEATERS_HANDLER4InitEv+0x60>)
     3b0:	4e0d      	ldr	r6, [pc, #52]	; (3e8 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
		while (!module[i]->Init(i))
     3b2:	2101      	movs	r1, #1
     3b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     3b6:	47a8      	blx	r5
     3b8:	b930      	cbnz	r0, 3c8 <_ZN15HEATERS_HANDLER4InitEv+0x44>
			delay_ms(200);
     3ba:	20c8      	movs	r0, #200	; 0xc8
     3bc:	47b8      	blx	r7
     3be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     3c2:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
     3c6:	e7f4      	b.n	3b2 <_ZN15HEATERS_HANDLER4InitEv+0x2e>
			
		}
	}

	
	isOK=(module[0]->isOK)&(module[1]->isOK);
     3c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     3ca:	781a      	ldrb	r2, [r3, #0]
     3cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     3ce:	781b      	ldrb	r3, [r3, #0]
     3d0:	4013      	ands	r3, r2
     3d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return	isOK;
     3d6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	
}
     3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3dc:	20000658 	.word	0x20000658
     3e0:	0000e029 	.word	0x0000e029
     3e4:	00001e31 	.word	0x00001e31
     3e8:	41008000 	.word	0x41008000
     3ec:	2000067c 	.word	0x2000067c

000003f0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev>:
     3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     3f2:	4c10      	ldr	r4, [pc, #64]	; (434 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x44>)
     3f4:	f104 0548 	add.w	r5, r4, #72	; 0x48
     3f8:	490f      	ldr	r1, [pc, #60]	; (438 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x48>)
     3fa:	4628      	mov	r0, r5
     3fc:	4b0f      	ldr	r3, [pc, #60]	; (43c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x4c>)
     3fe:	4798      	blx	r3
     400:	4e0f      	ldr	r6, [pc, #60]	; (440 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x50>)
     402:	4632      	mov	r2, r6
     404:	490f      	ldr	r1, [pc, #60]	; (444 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x54>)
     406:	4628      	mov	r0, r5
     408:	4d0f      	ldr	r5, [pc, #60]	; (448 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x58>)
     40a:	47a8      	blx	r5
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
     40c:	4620      	mov	r0, r4
     40e:	4f0f      	ldr	r7, [pc, #60]	; (44c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x5c>)
     410:	47b8      	blx	r7
     412:	f104 0024 	add.w	r0, r4, #36	; 0x24
     416:	47b8      	blx	r7
     418:	4632      	mov	r2, r6
     41a:	490d      	ldr	r1, [pc, #52]	; (450 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x60>)
     41c:	2000      	movs	r0, #0
     41e:	47a8      	blx	r5
HEATERS_HANDLER::HEATERS_HANDLER()
     420:	345c      	adds	r4, #92	; 0x5c
     422:	4620      	mov	r0, r4
     424:	4b0b      	ldr	r3, [pc, #44]	; (454 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x64>)
     426:	4798      	blx	r3
     428:	4632      	mov	r2, r6
     42a:	490b      	ldr	r1, [pc, #44]	; (458 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x68>)
     42c:	4620      	mov	r0, r4
     42e:	47a8      	blx	r5
     430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     432:	bf00      	nop
     434:	20000658 	.word	0x20000658
     438:	200016a4 	.word	0x200016a4
     43c:	0000cd5d 	.word	0x0000cd5d
     440:	20000000 	.word	0x20000000
     444:	0000cd79 	.word	0x0000cd79
     448:	0000e799 	.word	0x0000e799
     44c:	0000dfe5 	.word	0x0000dfe5
     450:	00000369 	.word	0x00000369
     454:	0000dfe5 	.word	0x0000dfe5
     458:	00000359 	.word	0x00000359

0000045c <main>:
#include "main.h"
#define DELAY_HEATER_COMMUNICATION 100


int main(void)
{
     45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
     460:	4b30      	ldr	r3, [pc, #192]	; (524 <main+0xc8>)
     462:	4798      	blx	r3
	uint8_t status,enableMask,lastEnableMask;
	bool powerOn;

	usb.Init();
     464:	4830      	ldr	r0, [pc, #192]	; (528 <main+0xcc>)
     466:	4b31      	ldr	r3, [pc, #196]	; (52c <main+0xd0>)
     468:	4798      	blx	r3
	delay_ms(100);
     46a:	2064      	movs	r0, #100	; 0x64
     46c:	4b30      	ldr	r3, [pc, #192]	; (530 <main+0xd4>)
     46e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     470:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     474:	4b2f      	ldr	r3, [pc, #188]	; (534 <main+0xd8>)
     476:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	gpio_set_pin_level(LED0,true);
	while (!heaters.Init())
     47a:	4e2f      	ldr	r6, [pc, #188]	; (538 <main+0xdc>)
     47c:	4d2f      	ldr	r5, [pc, #188]	; (53c <main+0xe0>)
	{
		delay_ms(200);
     47e:	4c2c      	ldr	r4, [pc, #176]	; (530 <main+0xd4>)
	while (!heaters.Init())
     480:	4630      	mov	r0, r6
     482:	47a8      	blx	r5
     484:	b938      	cbnz	r0, 496 <main+0x3a>
		delay_ms(200);
     486:	20c8      	movs	r0, #200	; 0xc8
     488:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     48a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     48e:	4b29      	ldr	r3, [pc, #164]	; (534 <main+0xd8>)
     490:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     494:	e7f4      	b.n	480 <main+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     496:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     49a:	4b26      	ldr	r3, [pc, #152]	; (534 <main+0xd8>)
     49c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		for (uint8_t j = 0; j <2 ; j++)
		{
			for (uint8_t i = 0; i <4 ; i++)
			{
				
				delay_ms(1);
     4a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 530 <main+0xd4>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     4a4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 528 <main+0xcc>
     4a8:	4c25      	ldr	r4, [pc, #148]	; (540 <main+0xe4>)
     4aa:	f104 0a08 	add.w	sl, r4, #8
{
     4ae:	2600      	movs	r6, #0
     4b0:	b2f7      	uxtb	r7, r6
				delay_ms(1);
     4b2:	2001      	movs	r0, #1
     4b4:	47c8      	blx	r9
     4b6:	4923      	ldr	r1, [pc, #140]	; (544 <main+0xe8>)
     4b8:	4640      	mov	r0, r8
     4ba:	4d23      	ldr	r5, [pc, #140]	; (548 <main+0xec>)
     4bc:	47a8      	blx	r5
     4be:	220a      	movs	r2, #10
     4c0:	4639      	mov	r1, r7
     4c2:	4640      	mov	r0, r8
     4c4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 56c <main+0x110>
     4c8:	47d8      	blx	fp
     4ca:	4920      	ldr	r1, [pc, #128]	; (54c <main+0xf0>)
     4cc:	4640      	mov	r0, r8
     4ce:	47a8      	blx	r5
				usb<<"Enabling Heater: "<<i<<" .\t";
				heaters.module[j]->EnableIndex(i);
     4d0:	4639      	mov	r1, r7
     4d2:	6820      	ldr	r0, [r4, #0]
     4d4:	4b1e      	ldr	r3, [pc, #120]	; (550 <main+0xf4>)
     4d6:	4798      	blx	r3
				delay_ms(DELAY_HEATER_COMMUNICATION);
     4d8:	2064      	movs	r0, #100	; 0x64
     4da:	47c8      	blx	r9
				status= heaters.module[j]->ReadStatus();
     4dc:	6820      	ldr	r0, [r4, #0]
     4de:	4b1d      	ldr	r3, [pc, #116]	; (554 <main+0xf8>)
     4e0:	4798      	blx	r3
     4e2:	491d      	ldr	r1, [pc, #116]	; (558 <main+0xfc>)
     4e4:	4640      	mov	r0, r8
     4e6:	47a8      	blx	r5
     4e8:	220a      	movs	r2, #10
     4ea:	4639      	mov	r1, r7
     4ec:	4640      	mov	r0, r8
     4ee:	47d8      	blx	fp
     4f0:	491a      	ldr	r1, [pc, #104]	; (55c <main+0x100>)
     4f2:	4640      	mov	r0, r8
     4f4:	47a8      	blx	r5
     4f6:	6823      	ldr	r3, [r4, #0]
     4f8:	4433      	add	r3, r6
     4fa:	220a      	movs	r2, #10
     4fc:	78d9      	ldrb	r1, [r3, #3]
     4fe:	4640      	mov	r0, r8
     500:	4b17      	ldr	r3, [pc, #92]	; (560 <main+0x104>)
     502:	4798      	blx	r3
     504:	4917      	ldr	r1, [pc, #92]	; (564 <main+0x108>)
     506:	4640      	mov	r0, r8
     508:	47a8      	blx	r5
				usb<<"Heater "<<i<< " Status :"<<heaters.module[j]->heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
				delay_ms(DELAY_HEATER_COMMUNICATION);
     50a:	2064      	movs	r0, #100	; 0x64
     50c:	47c8      	blx	r9
				heaters.module[j]->DisableIndex(i);
     50e:	4639      	mov	r1, r7
     510:	6820      	ldr	r0, [r4, #0]
     512:	4b15      	ldr	r3, [pc, #84]	; (568 <main+0x10c>)
     514:	4798      	blx	r3
     516:	3601      	adds	r6, #1
			for (uint8_t i = 0; i <4 ; i++)
     518:	2e04      	cmp	r6, #4
     51a:	d1c9      	bne.n	4b0 <main+0x54>
     51c:	3404      	adds	r4, #4
		for (uint8_t j = 0; j <2 ; j++)
     51e:	45a2      	cmp	sl, r4
     520:	d0c2      	beq.n	4a8 <main+0x4c>
     522:	e7c4      	b.n	4ae <main+0x52>
     524:	00000665 	.word	0x00000665
     528:	2000139c 	.word	0x2000139c
     52c:	0000d539 	.word	0x0000d539
     530:	00001e31 	.word	0x00001e31
     534:	41008000 	.word	0x41008000
     538:	200006b4 	.word	0x200006b4
     53c:	00000385 	.word	0x00000385
     540:	200006d8 	.word	0x200006d8
     544:	0000ebfc 	.word	0x0000ebfc
     548:	0000da75 	.word	0x0000da75
     54c:	0000ec10 	.word	0x0000ec10
     550:	0000e1a5 	.word	0x0000e1a5
     554:	0000e139 	.word	0x0000e139
     558:	0000ec14 	.word	0x0000ec14
     55c:	0000ec1c 	.word	0x0000ec1c
     560:	0000dae1 	.word	0x0000dae1
     564:	0000ec28 	.word	0x0000ec28
     568:	0000e1d9 	.word	0x0000e1d9
     56c:	0000dab9 	.word	0x0000dab9

00000570 <_GLOBAL__sub_I_main>:
		/*	}*/
		
		

	}
}
     570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     574:	4c2b      	ldr	r4, [pc, #172]	; (624 <_GLOBAL__sub_I_main+0xb4>)
     576:	492c      	ldr	r1, [pc, #176]	; (628 <_GLOBAL__sub_I_main+0xb8>)
     578:	4620      	mov	r0, r4
     57a:	4f2c      	ldr	r7, [pc, #176]	; (62c <_GLOBAL__sub_I_main+0xbc>)
     57c:	47b8      	blx	r7
     57e:	4e2c      	ldr	r6, [pc, #176]	; (630 <_GLOBAL__sub_I_main+0xc0>)
     580:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 660 <_GLOBAL__sub_I_main+0xf0>
     584:	4632      	mov	r2, r6
     586:	4641      	mov	r1, r8
     588:	4620      	mov	r0, r4
     58a:	4d2a      	ldr	r5, [pc, #168]	; (634 <_GLOBAL__sub_I_main+0xc4>)
     58c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     58e:	f104 0920 	add.w	r9, r4, #32
     592:	4929      	ldr	r1, [pc, #164]	; (638 <_GLOBAL__sub_I_main+0xc8>)
     594:	4648      	mov	r0, r9
     596:	47b8      	blx	r7
     598:	4632      	mov	r2, r6
     59a:	4641      	mov	r1, r8
     59c:	4648      	mov	r0, r9
     59e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     5a0:	f104 0940 	add.w	r9, r4, #64	; 0x40
     5a4:	4925      	ldr	r1, [pc, #148]	; (63c <_GLOBAL__sub_I_main+0xcc>)
     5a6:	4648      	mov	r0, r9
     5a8:	47b8      	blx	r7
     5aa:	4632      	mov	r2, r6
     5ac:	4641      	mov	r1, r8
     5ae:	4648      	mov	r0, r9
     5b0:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     5b2:	f104 0960 	add.w	r9, r4, #96	; 0x60
     5b6:	4922      	ldr	r1, [pc, #136]	; (640 <_GLOBAL__sub_I_main+0xd0>)
     5b8:	4648      	mov	r0, r9
     5ba:	47b8      	blx	r7
     5bc:	4632      	mov	r2, r6
     5be:	4641      	mov	r1, r8
     5c0:	4648      	mov	r0, r9
     5c2:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     5c4:	f104 0980 	add.w	r9, r4, #128	; 0x80
     5c8:	491e      	ldr	r1, [pc, #120]	; (644 <_GLOBAL__sub_I_main+0xd4>)
     5ca:	4648      	mov	r0, r9
     5cc:	47b8      	blx	r7
     5ce:	4632      	mov	r2, r6
     5d0:	4641      	mov	r1, r8
     5d2:	4648      	mov	r0, r9
     5d4:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     5d6:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     5da:	491b      	ldr	r1, [pc, #108]	; (648 <_GLOBAL__sub_I_main+0xd8>)
     5dc:	4648      	mov	r0, r9
     5de:	47b8      	blx	r7
     5e0:	4632      	mov	r2, r6
     5e2:	4641      	mov	r1, r8
     5e4:	4648      	mov	r0, r9
     5e6:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     5e8:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     5ec:	4917      	ldr	r1, [pc, #92]	; (64c <_GLOBAL__sub_I_main+0xdc>)
     5ee:	4648      	mov	r0, r9
     5f0:	47b8      	blx	r7
     5f2:	4632      	mov	r2, r6
     5f4:	4641      	mov	r1, r8
     5f6:	4648      	mov	r0, r9
     5f8:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     5fa:	f104 09e0 	add.w	r9, r4, #224	; 0xe0
     5fe:	4914      	ldr	r1, [pc, #80]	; (650 <_GLOBAL__sub_I_main+0xe0>)
     600:	4648      	mov	r0, r9
     602:	47b8      	blx	r7
     604:	4632      	mov	r2, r6
     606:	4641      	mov	r1, r8
     608:	4648      	mov	r0, r9
     60a:	47a8      	blx	r5
     60c:	f504 7480 	add.w	r4, r4, #256	; 0x100
     610:	4910      	ldr	r1, [pc, #64]	; (654 <_GLOBAL__sub_I_main+0xe4>)
     612:	4620      	mov	r0, r4
     614:	4b10      	ldr	r3, [pc, #64]	; (658 <_GLOBAL__sub_I_main+0xe8>)
     616:	4798      	blx	r3
     618:	4632      	mov	r2, r6
     61a:	4910      	ldr	r1, [pc, #64]	; (65c <_GLOBAL__sub_I_main+0xec>)
     61c:	4620      	mov	r0, r4
     61e:	47a8      	blx	r5
     620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     624:	200006e4 	.word	0x200006e4
     628:	20001574 	.word	0x20001574
     62c:	0000ce79 	.word	0x0000ce79
     630:	20000000 	.word	0x20000000
     634:	0000e799 	.word	0x0000e799
     638:	20001608 	.word	0x20001608
     63c:	2000172c 	.word	0x2000172c
     640:	20001628 	.word	0x20001628
     644:	200016ec 	.word	0x200016ec
     648:	2000170c 	.word	0x2000170c
     64c:	200015e4 	.word	0x200015e4
     650:	20001684 	.word	0x20001684
     654:	200016a4 	.word	0x200016a4
     658:	0000cd5d 	.word	0x0000cd5d
     65c:	0000cd79 	.word	0x0000cd79
     660:	0000ceb1 	.word	0x0000ceb1

00000664 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     664:	b580      	push	{r7, lr}
     666:	af00      	add	r7, sp, #0
	system_init();
     668:	4b03      	ldr	r3, [pc, #12]	; (678 <atmel_start_init+0x14>)
     66a:	4798      	blx	r3
	usb_init();
     66c:	4b03      	ldr	r3, [pc, #12]	; (67c <atmel_start_init+0x18>)
     66e:	4798      	blx	r3
	spi_nor_flash_init();
     670:	4b03      	ldr	r3, [pc, #12]	; (680 <atmel_start_init+0x1c>)
     672:	4798      	blx	r3
}
     674:	bf00      	nop
     676:	bd80      	pop	{r7, pc}
     678:	00001a65 	.word	0x00001a65
     67c:	0000ae89 	.word	0x0000ae89
     680:	0000ae1d 	.word	0x0000ae1d

00000684 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     684:	b480      	push	{r7}
     686:	b085      	sub	sp, #20
     688:	af00      	add	r7, sp, #0
     68a:	60f8      	str	r0, [r7, #12]
     68c:	460b      	mov	r3, r1
     68e:	607a      	str	r2, [r7, #4]
     690:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     692:	7afa      	ldrb	r2, [r7, #11]
     694:	68fb      	ldr	r3, [r7, #12]
     696:	3220      	adds	r2, #32
     698:	6879      	ldr	r1, [r7, #4]
     69a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     69e:	bf00      	nop
     6a0:	3714      	adds	r7, #20
     6a2:	46bd      	mov	sp, r7
     6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a8:	4770      	bx	lr

000006aa <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     6aa:	b480      	push	{r7}
     6ac:	b083      	sub	sp, #12
     6ae:	af00      	add	r7, sp, #0
     6b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	691b      	ldr	r3, [r3, #16]
     6b6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6be:	bf00      	nop
     6c0:	370c      	adds	r7, #12
     6c2:	46bd      	mov	sp, r7
     6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c8:	4770      	bx	lr

000006ca <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     6ca:	b480      	push	{r7}
     6cc:	b083      	sub	sp, #12
     6ce:	af00      	add	r7, sp, #0
     6d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	691b      	ldr	r3, [r3, #16]
     6d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6de:	bf00      	nop
     6e0:	370c      	adds	r7, #12
     6e2:	46bd      	mov	sp, r7
     6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e8:	4770      	bx	lr

000006ea <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     6ea:	b480      	push	{r7}
     6ec:	b083      	sub	sp, #12
     6ee:	af00      	add	r7, sp, #0
     6f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	691b      	ldr	r3, [r3, #16]
     6f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6fe:	bf00      	nop
     700:	370c      	adds	r7, #12
     702:	46bd      	mov	sp, r7
     704:	f85d 7b04 	ldr.w	r7, [sp], #4
     708:	4770      	bx	lr

0000070a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     70a:	b480      	push	{r7}
     70c:	b083      	sub	sp, #12
     70e:	af00      	add	r7, sp, #0
     710:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     712:	687b      	ldr	r3, [r7, #4]
     714:	691b      	ldr	r3, [r3, #16]
     716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     71e:	bf00      	nop
     720:	370c      	adds	r7, #12
     722:	46bd      	mov	sp, r7
     724:	f85d 7b04 	ldr.w	r7, [sp], #4
     728:	4770      	bx	lr

0000072a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     72a:	b480      	push	{r7}
     72c:	b083      	sub	sp, #12
     72e:	af00      	add	r7, sp, #0
     730:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     732:	687b      	ldr	r3, [r7, #4]
     734:	695b      	ldr	r3, [r3, #20]
     736:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     73e:	bf00      	nop
     740:	370c      	adds	r7, #12
     742:	46bd      	mov	sp, r7
     744:	f85d 7b04 	ldr.w	r7, [sp], #4
     748:	4770      	bx	lr

0000074a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     74a:	b480      	push	{r7}
     74c:	b083      	sub	sp, #12
     74e:	af00      	add	r7, sp, #0
     750:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     752:	687b      	ldr	r3, [r7, #4]
     754:	695b      	ldr	r3, [r3, #20]
     756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     75e:	bf00      	nop
     760:	370c      	adds	r7, #12
     762:	46bd      	mov	sp, r7
     764:	f85d 7b04 	ldr.w	r7, [sp], #4
     768:	4770      	bx	lr

0000076a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     76a:	b480      	push	{r7}
     76c:	b083      	sub	sp, #12
     76e:	af00      	add	r7, sp, #0
     770:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     772:	687b      	ldr	r3, [r7, #4]
     774:	695b      	ldr	r3, [r3, #20]
     776:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     77e:	bf00      	nop
     780:	370c      	adds	r7, #12
     782:	46bd      	mov	sp, r7
     784:	f85d 7b04 	ldr.w	r7, [sp], #4
     788:	4770      	bx	lr

0000078a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     78a:	b480      	push	{r7}
     78c:	b083      	sub	sp, #12
     78e:	af00      	add	r7, sp, #0
     790:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     792:	687b      	ldr	r3, [r7, #4]
     794:	695b      	ldr	r3, [r3, #20]
     796:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     79e:	bf00      	nop
     7a0:	370c      	adds	r7, #12
     7a2:	46bd      	mov	sp, r7
     7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a8:	4770      	bx	lr

000007aa <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     7aa:	b480      	push	{r7}
     7ac:	b083      	sub	sp, #12
     7ae:	af00      	add	r7, sp, #0
     7b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	695b      	ldr	r3, [r3, #20]
     7b6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7be:	bf00      	nop
     7c0:	370c      	adds	r7, #12
     7c2:	46bd      	mov	sp, r7
     7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c8:	4770      	bx	lr

000007ca <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     7ca:	b480      	push	{r7}
     7cc:	b083      	sub	sp, #12
     7ce:	af00      	add	r7, sp, #0
     7d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	699b      	ldr	r3, [r3, #24]
     7d6:	f043 0201 	orr.w	r2, r3, #1
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7de:	bf00      	nop
     7e0:	370c      	adds	r7, #12
     7e2:	46bd      	mov	sp, r7
     7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7e8:	4770      	bx	lr

000007ea <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     7ea:	b480      	push	{r7}
     7ec:	b083      	sub	sp, #12
     7ee:	af00      	add	r7, sp, #0
     7f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	699b      	ldr	r3, [r3, #24]
     7f6:	f043 0202 	orr.w	r2, r3, #2
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7fe:	bf00      	nop
     800:	370c      	adds	r7, #12
     802:	46bd      	mov	sp, r7
     804:	f85d 7b04 	ldr.w	r7, [sp], #4
     808:	4770      	bx	lr

0000080a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     80a:	b480      	push	{r7}
     80c:	b083      	sub	sp, #12
     80e:	af00      	add	r7, sp, #0
     810:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     812:	687b      	ldr	r3, [r7, #4]
     814:	699b      	ldr	r3, [r3, #24]
     816:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     81e:	bf00      	nop
     820:	370c      	adds	r7, #12
     822:	46bd      	mov	sp, r7
     824:	f85d 7b04 	ldr.w	r7, [sp], #4
     828:	4770      	bx	lr

0000082a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     82a:	b480      	push	{r7}
     82c:	b083      	sub	sp, #12
     82e:	af00      	add	r7, sp, #0
     830:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     832:	687b      	ldr	r3, [r7, #4]
     834:	699b      	ldr	r3, [r3, #24]
     836:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     83e:	bf00      	nop
     840:	370c      	adds	r7, #12
     842:	46bd      	mov	sp, r7
     844:	f85d 7b04 	ldr.w	r7, [sp], #4
     848:	4770      	bx	lr

0000084a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     84a:	b480      	push	{r7}
     84c:	b083      	sub	sp, #12
     84e:	af00      	add	r7, sp, #0
     850:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     852:	687b      	ldr	r3, [r7, #4]
     854:	699b      	ldr	r3, [r3, #24]
     856:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     85e:	bf00      	nop
     860:	370c      	adds	r7, #12
     862:	46bd      	mov	sp, r7
     864:	f85d 7b04 	ldr.w	r7, [sp], #4
     868:	4770      	bx	lr

0000086a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     86a:	b480      	push	{r7}
     86c:	b083      	sub	sp, #12
     86e:	af00      	add	r7, sp, #0
     870:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     872:	687b      	ldr	r3, [r7, #4]
     874:	699b      	ldr	r3, [r3, #24]
     876:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     87e:	bf00      	nop
     880:	370c      	adds	r7, #12
     882:	46bd      	mov	sp, r7
     884:	f85d 7b04 	ldr.w	r7, [sp], #4
     888:	4770      	bx	lr

0000088a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     88a:	b480      	push	{r7}
     88c:	b083      	sub	sp, #12
     88e:	af00      	add	r7, sp, #0
     890:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     892:	687b      	ldr	r3, [r7, #4]
     894:	69db      	ldr	r3, [r3, #28]
     896:	f043 0208 	orr.w	r2, r3, #8
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     89e:	bf00      	nop
     8a0:	370c      	adds	r7, #12
     8a2:	46bd      	mov	sp, r7
     8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8a8:	4770      	bx	lr

000008aa <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     8aa:	b480      	push	{r7}
     8ac:	b083      	sub	sp, #12
     8ae:	af00      	add	r7, sp, #0
     8b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	69db      	ldr	r3, [r3, #28]
     8b6:	f043 0220 	orr.w	r2, r3, #32
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8be:	bf00      	nop
     8c0:	370c      	adds	r7, #12
     8c2:	46bd      	mov	sp, r7
     8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8c8:	4770      	bx	lr

000008ca <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     8ca:	b480      	push	{r7}
     8cc:	b083      	sub	sp, #12
     8ce:	af00      	add	r7, sp, #0
     8d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	69db      	ldr	r3, [r3, #28]
     8d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8de:	bf00      	nop
     8e0:	370c      	adds	r7, #12
     8e2:	46bd      	mov	sp, r7
     8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e8:	4770      	bx	lr

000008ea <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     8ea:	b480      	push	{r7}
     8ec:	b083      	sub	sp, #12
     8ee:	af00      	add	r7, sp, #0
     8f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	69db      	ldr	r3, [r3, #28]
     8f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8fe:	bf00      	nop
     900:	370c      	adds	r7, #12
     902:	46bd      	mov	sp, r7
     904:	f85d 7b04 	ldr.w	r7, [sp], #4
     908:	4770      	bx	lr

0000090a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     90a:	b480      	push	{r7}
     90c:	b083      	sub	sp, #12
     90e:	af00      	add	r7, sp, #0
     910:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     912:	687b      	ldr	r3, [r7, #4]
     914:	6a1b      	ldr	r3, [r3, #32]
     916:	f043 0201 	orr.w	r2, r3, #1
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     91e:	bf00      	nop
     920:	370c      	adds	r7, #12
     922:	46bd      	mov	sp, r7
     924:	f85d 7b04 	ldr.w	r7, [sp], #4
     928:	4770      	bx	lr

0000092a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     92a:	b480      	push	{r7}
     92c:	b083      	sub	sp, #12
     92e:	af00      	add	r7, sp, #0
     930:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     932:	687b      	ldr	r3, [r7, #4]
     934:	6a1b      	ldr	r3, [r3, #32]
     936:	f043 0202 	orr.w	r2, r3, #2
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     93e:	bf00      	nop
     940:	370c      	adds	r7, #12
     942:	46bd      	mov	sp, r7
     944:	f85d 7b04 	ldr.w	r7, [sp], #4
     948:	4770      	bx	lr

0000094a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     94a:	b480      	push	{r7}
     94c:	b083      	sub	sp, #12
     94e:	af00      	add	r7, sp, #0
     950:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     952:	687b      	ldr	r3, [r7, #4]
     954:	6a1b      	ldr	r3, [r3, #32]
     956:	f043 0204 	orr.w	r2, r3, #4
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     95e:	bf00      	nop
     960:	370c      	adds	r7, #12
     962:	46bd      	mov	sp, r7
     964:	f85d 7b04 	ldr.w	r7, [sp], #4
     968:	4770      	bx	lr

0000096a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     96a:	b480      	push	{r7}
     96c:	b083      	sub	sp, #12
     96e:	af00      	add	r7, sp, #0
     970:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     972:	687b      	ldr	r3, [r7, #4]
     974:	6a1b      	ldr	r3, [r3, #32]
     976:	f043 0208 	orr.w	r2, r3, #8
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     97e:	bf00      	nop
     980:	370c      	adds	r7, #12
     982:	46bd      	mov	sp, r7
     984:	f85d 7b04 	ldr.w	r7, [sp], #4
     988:	4770      	bx	lr

0000098a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     98a:	b480      	push	{r7}
     98c:	b083      	sub	sp, #12
     98e:	af00      	add	r7, sp, #0
     990:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     992:	687b      	ldr	r3, [r7, #4]
     994:	6a1b      	ldr	r3, [r3, #32]
     996:	f043 0220 	orr.w	r2, r3, #32
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     99e:	bf00      	nop
     9a0:	370c      	adds	r7, #12
     9a2:	46bd      	mov	sp, r7
     9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9a8:	4770      	bx	lr

000009aa <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     9aa:	b480      	push	{r7}
     9ac:	b083      	sub	sp, #12
     9ae:	af00      	add	r7, sp, #0
     9b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	6a1b      	ldr	r3, [r3, #32]
     9b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9be:	bf00      	nop
     9c0:	370c      	adds	r7, #12
     9c2:	46bd      	mov	sp, r7
     9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9c8:	4770      	bx	lr

000009ca <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     9ca:	b480      	push	{r7}
     9cc:	b085      	sub	sp, #20
     9ce:	af00      	add	r7, sp, #0
     9d0:	60f8      	str	r0, [r7, #12]
     9d2:	460b      	mov	r3, r1
     9d4:	607a      	str	r2, [r7, #4]
     9d6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9d8:	7afb      	ldrb	r3, [r7, #11]
     9da:	68fa      	ldr	r2, [r7, #12]
     9dc:	01db      	lsls	r3, r3, #7
     9de:	4413      	add	r3, r2
     9e0:	3308      	adds	r3, #8
     9e2:	687a      	ldr	r2, [r7, #4]
     9e4:	601a      	str	r2, [r3, #0]
}
     9e6:	bf00      	nop
     9e8:	3714      	adds	r7, #20
     9ea:	46bd      	mov	sp, r7
     9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f0:	4770      	bx	lr

000009f2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     9f2:	b480      	push	{r7}
     9f4:	b085      	sub	sp, #20
     9f6:	af00      	add	r7, sp, #0
     9f8:	60f8      	str	r0, [r7, #12]
     9fa:	460b      	mov	r3, r1
     9fc:	607a      	str	r2, [r7, #4]
     9fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a00:	7afb      	ldrb	r3, [r7, #11]
     a02:	68fa      	ldr	r2, [r7, #12]
     a04:	01db      	lsls	r3, r3, #7
     a06:	4413      	add	r3, r2
     a08:	3304      	adds	r3, #4
     a0a:	687a      	ldr	r2, [r7, #4]
     a0c:	601a      	str	r2, [r3, #0]
}
     a0e:	bf00      	nop
     a10:	3714      	adds	r7, #20
     a12:	46bd      	mov	sp, r7
     a14:	f85d 7b04 	ldr.w	r7, [sp], #4
     a18:	4770      	bx	lr

00000a1a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a1a:	b480      	push	{r7}
     a1c:	b085      	sub	sp, #20
     a1e:	af00      	add	r7, sp, #0
     a20:	60f8      	str	r0, [r7, #12]
     a22:	460b      	mov	r3, r1
     a24:	607a      	str	r2, [r7, #4]
     a26:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a28:	7afb      	ldrb	r3, [r7, #11]
     a2a:	68fa      	ldr	r2, [r7, #12]
     a2c:	01db      	lsls	r3, r3, #7
     a2e:	4413      	add	r3, r2
     a30:	3318      	adds	r3, #24
     a32:	687a      	ldr	r2, [r7, #4]
     a34:	601a      	str	r2, [r3, #0]
}
     a36:	bf00      	nop
     a38:	3714      	adds	r7, #20
     a3a:	46bd      	mov	sp, r7
     a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a40:	4770      	bx	lr

00000a42 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a42:	b480      	push	{r7}
     a44:	b085      	sub	sp, #20
     a46:	af00      	add	r7, sp, #0
     a48:	60f8      	str	r0, [r7, #12]
     a4a:	460b      	mov	r3, r1
     a4c:	607a      	str	r2, [r7, #4]
     a4e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a50:	7afb      	ldrb	r3, [r7, #11]
     a52:	68fa      	ldr	r2, [r7, #12]
     a54:	01db      	lsls	r3, r3, #7
     a56:	4413      	add	r3, r2
     a58:	3314      	adds	r3, #20
     a5a:	687a      	ldr	r2, [r7, #4]
     a5c:	601a      	str	r2, [r3, #0]
}
     a5e:	bf00      	nop
     a60:	3714      	adds	r7, #20
     a62:	46bd      	mov	sp, r7
     a64:	f85d 7b04 	ldr.w	r7, [sp], #4
     a68:	4770      	bx	lr

00000a6a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a6a:	b480      	push	{r7}
     a6c:	b085      	sub	sp, #20
     a6e:	af00      	add	r7, sp, #0
     a70:	6078      	str	r0, [r7, #4]
     a72:	4608      	mov	r0, r1
     a74:	4611      	mov	r1, r2
     a76:	461a      	mov	r2, r3
     a78:	4603      	mov	r3, r0
     a7a:	70fb      	strb	r3, [r7, #3]
     a7c:	460b      	mov	r3, r1
     a7e:	70bb      	strb	r3, [r7, #2]
     a80:	4613      	mov	r3, r2
     a82:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a84:	78fa      	ldrb	r2, [r7, #3]
     a86:	78bb      	ldrb	r3, [r7, #2]
     a88:	6879      	ldr	r1, [r7, #4]
     a8a:	01d2      	lsls	r2, r2, #7
     a8c:	440a      	add	r2, r1
     a8e:	4413      	add	r3, r2
     a90:	3330      	adds	r3, #48	; 0x30
     a92:	781b      	ldrb	r3, [r3, #0]
     a94:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a96:	7bfb      	ldrb	r3, [r7, #15]
     a98:	f023 030f 	bic.w	r3, r3, #15
     a9c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     a9e:	787b      	ldrb	r3, [r7, #1]
     aa0:	f003 030f 	and.w	r3, r3, #15
     aa4:	b2da      	uxtb	r2, r3
     aa6:	7bfb      	ldrb	r3, [r7, #15]
     aa8:	4313      	orrs	r3, r2
     aaa:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     aac:	78fa      	ldrb	r2, [r7, #3]
     aae:	78bb      	ldrb	r3, [r7, #2]
     ab0:	6879      	ldr	r1, [r7, #4]
     ab2:	01d2      	lsls	r2, r2, #7
     ab4:	440a      	add	r2, r1
     ab6:	4413      	add	r3, r2
     ab8:	3330      	adds	r3, #48	; 0x30
     aba:	7bfa      	ldrb	r2, [r7, #15]
     abc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     abe:	bf00      	nop
     ac0:	3714      	adds	r7, #20
     ac2:	46bd      	mov	sp, r7
     ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac8:	4770      	bx	lr

00000aca <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     aca:	b480      	push	{r7}
     acc:	b085      	sub	sp, #20
     ace:	af00      	add	r7, sp, #0
     ad0:	6078      	str	r0, [r7, #4]
     ad2:	4608      	mov	r0, r1
     ad4:	4611      	mov	r1, r2
     ad6:	461a      	mov	r2, r3
     ad8:	4603      	mov	r3, r0
     ada:	70fb      	strb	r3, [r7, #3]
     adc:	460b      	mov	r3, r1
     ade:	70bb      	strb	r3, [r7, #2]
     ae0:	4613      	mov	r3, r2
     ae2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ae4:	78fa      	ldrb	r2, [r7, #3]
     ae6:	78bb      	ldrb	r3, [r7, #2]
     ae8:	6879      	ldr	r1, [r7, #4]
     aea:	01d2      	lsls	r2, r2, #7
     aec:	440a      	add	r2, r1
     aee:	4413      	add	r3, r2
     af0:	3330      	adds	r3, #48	; 0x30
     af2:	781b      	ldrb	r3, [r3, #0]
     af4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     af6:	7bfb      	ldrb	r3, [r7, #15]
     af8:	f003 030f 	and.w	r3, r3, #15
     afc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     afe:	787b      	ldrb	r3, [r7, #1]
     b00:	011b      	lsls	r3, r3, #4
     b02:	b2da      	uxtb	r2, r3
     b04:	7bfb      	ldrb	r3, [r7, #15]
     b06:	4313      	orrs	r3, r2
     b08:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b0a:	78fa      	ldrb	r2, [r7, #3]
     b0c:	78bb      	ldrb	r3, [r7, #2]
     b0e:	6879      	ldr	r1, [r7, #4]
     b10:	01d2      	lsls	r2, r2, #7
     b12:	440a      	add	r2, r1
     b14:	4413      	add	r3, r2
     b16:	3330      	adds	r3, #48	; 0x30
     b18:	7bfa      	ldrb	r2, [r7, #15]
     b1a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b1c:	bf00      	nop
     b1e:	3714      	adds	r7, #20
     b20:	46bd      	mov	sp, r7
     b22:	f85d 7b04 	ldr.w	r7, [sp], #4
     b26:	4770      	bx	lr

00000b28 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     b28:	b480      	push	{r7}
     b2a:	b085      	sub	sp, #20
     b2c:	af00      	add	r7, sp, #0
     b2e:	6078      	str	r0, [r7, #4]
     b30:	4608      	mov	r0, r1
     b32:	4611      	mov	r1, r2
     b34:	461a      	mov	r2, r3
     b36:	4603      	mov	r3, r0
     b38:	70fb      	strb	r3, [r7, #3]
     b3a:	460b      	mov	r3, r1
     b3c:	70bb      	strb	r3, [r7, #2]
     b3e:	4613      	mov	r3, r2
     b40:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b42:	78fa      	ldrb	r2, [r7, #3]
     b44:	78bb      	ldrb	r3, [r7, #2]
     b46:	6879      	ldr	r1, [r7, #4]
     b48:	01d2      	lsls	r2, r2, #7
     b4a:	440a      	add	r2, r1
     b4c:	4413      	add	r3, r2
     b4e:	3340      	adds	r3, #64	; 0x40
     b50:	781b      	ldrb	r3, [r3, #0]
     b52:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b54:	7bfb      	ldrb	r3, [r7, #15]
     b56:	f023 0301 	bic.w	r3, r3, #1
     b5a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b5c:	787a      	ldrb	r2, [r7, #1]
     b5e:	7bfb      	ldrb	r3, [r7, #15]
     b60:	4313      	orrs	r3, r2
     b62:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b64:	78fa      	ldrb	r2, [r7, #3]
     b66:	78bb      	ldrb	r3, [r7, #2]
     b68:	6879      	ldr	r1, [r7, #4]
     b6a:	01d2      	lsls	r2, r2, #7
     b6c:	440a      	add	r2, r1
     b6e:	4413      	add	r3, r2
     b70:	3340      	adds	r3, #64	; 0x40
     b72:	7bfa      	ldrb	r2, [r7, #15]
     b74:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b76:	bf00      	nop
     b78:	3714      	adds	r7, #20
     b7a:	46bd      	mov	sp, r7
     b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b80:	4770      	bx	lr

00000b82 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     b82:	b490      	push	{r4, r7}
     b84:	b082      	sub	sp, #8
     b86:	af00      	add	r7, sp, #0
     b88:	6078      	str	r0, [r7, #4]
     b8a:	460b      	mov	r3, r1
     b8c:	70fb      	strb	r3, [r7, #3]
     b8e:	4613      	mov	r3, r2
     b90:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     b92:	78fa      	ldrb	r2, [r7, #3]
     b94:	78bb      	ldrb	r3, [r7, #2]
     b96:	78f8      	ldrb	r0, [r7, #3]
     b98:	78b9      	ldrb	r1, [r7, #2]
     b9a:	687c      	ldr	r4, [r7, #4]
     b9c:	01c0      	lsls	r0, r0, #7
     b9e:	4420      	add	r0, r4
     ba0:	4401      	add	r1, r0
     ba2:	3140      	adds	r1, #64	; 0x40
     ba4:	7809      	ldrb	r1, [r1, #0]
     ba6:	b2c9      	uxtb	r1, r1
     ba8:	f041 0104 	orr.w	r1, r1, #4
     bac:	b2c8      	uxtb	r0, r1
     bae:	6879      	ldr	r1, [r7, #4]
     bb0:	01d2      	lsls	r2, r2, #7
     bb2:	440a      	add	r2, r1
     bb4:	4413      	add	r3, r2
     bb6:	3340      	adds	r3, #64	; 0x40
     bb8:	4602      	mov	r2, r0
     bba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bbc:	bf00      	nop
     bbe:	3708      	adds	r7, #8
     bc0:	46bd      	mov	sp, r7
     bc2:	bc90      	pop	{r4, r7}
     bc4:	4770      	bx	lr

00000bc6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     bc6:	b490      	push	{r4, r7}
     bc8:	b082      	sub	sp, #8
     bca:	af00      	add	r7, sp, #0
     bcc:	6078      	str	r0, [r7, #4]
     bce:	460b      	mov	r3, r1
     bd0:	70fb      	strb	r3, [r7, #3]
     bd2:	4613      	mov	r3, r2
     bd4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bd6:	78fa      	ldrb	r2, [r7, #3]
     bd8:	78bb      	ldrb	r3, [r7, #2]
     bda:	78f8      	ldrb	r0, [r7, #3]
     bdc:	78b9      	ldrb	r1, [r7, #2]
     bde:	687c      	ldr	r4, [r7, #4]
     be0:	01c0      	lsls	r0, r0, #7
     be2:	4420      	add	r0, r4
     be4:	4401      	add	r1, r0
     be6:	3140      	adds	r1, #64	; 0x40
     be8:	7809      	ldrb	r1, [r1, #0]
     bea:	b2c9      	uxtb	r1, r1
     bec:	f021 0104 	bic.w	r1, r1, #4
     bf0:	b2c8      	uxtb	r0, r1
     bf2:	6879      	ldr	r1, [r7, #4]
     bf4:	01d2      	lsls	r2, r2, #7
     bf6:	440a      	add	r2, r1
     bf8:	4413      	add	r3, r2
     bfa:	3340      	adds	r3, #64	; 0x40
     bfc:	4602      	mov	r2, r0
     bfe:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c00:	bf00      	nop
     c02:	3708      	adds	r7, #8
     c04:	46bd      	mov	sp, r7
     c06:	bc90      	pop	{r4, r7}
     c08:	4770      	bx	lr

00000c0a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     c0a:	b480      	push	{r7}
     c0c:	b085      	sub	sp, #20
     c0e:	af00      	add	r7, sp, #0
     c10:	60f8      	str	r0, [r7, #12]
     c12:	460b      	mov	r3, r1
     c14:	607a      	str	r2, [r7, #4]
     c16:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c18:	7afb      	ldrb	r3, [r7, #11]
     c1a:	68fa      	ldr	r2, [r7, #12]
     c1c:	01db      	lsls	r3, r3, #7
     c1e:	4413      	add	r3, r2
     c20:	3328      	adds	r3, #40	; 0x28
     c22:	687a      	ldr	r2, [r7, #4]
     c24:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c26:	bf00      	nop
     c28:	3714      	adds	r7, #20
     c2a:	46bd      	mov	sp, r7
     c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c30:	4770      	bx	lr
	...

00000c34 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
     c3a:	4603      	mov	r3, r0
     c3c:	6039      	str	r1, [r7, #0]
     c3e:	71fb      	strb	r3, [r7, #7]
     c40:	4613      	mov	r3, r2
     c42:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     c44:	79bb      	ldrb	r3, [r7, #6]
     c46:	2b01      	cmp	r3, #1
     c48:	d01c      	beq.n	c84 <_gpio_set_direction+0x50>
     c4a:	2b02      	cmp	r3, #2
     c4c:	d037      	beq.n	cbe <_gpio_set_direction+0x8a>
     c4e:	2b00      	cmp	r3, #0
     c50:	d14e      	bne.n	cf0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c52:	79fb      	ldrb	r3, [r7, #7]
     c54:	683a      	ldr	r2, [r7, #0]
     c56:	4619      	mov	r1, r3
     c58:	482a      	ldr	r0, [pc, #168]	; (d04 <_gpio_set_direction+0xd0>)
     c5a:	4b2b      	ldr	r3, [pc, #172]	; (d08 <_gpio_set_direction+0xd4>)
     c5c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c5e:	683b      	ldr	r3, [r7, #0]
     c60:	b29b      	uxth	r3, r3
     c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     c66:	79fb      	ldrb	r3, [r7, #7]
     c68:	4619      	mov	r1, r3
     c6a:	4826      	ldr	r0, [pc, #152]	; (d04 <_gpio_set_direction+0xd0>)
     c6c:	4b27      	ldr	r3, [pc, #156]	; (d0c <_gpio_set_direction+0xd8>)
     c6e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     c70:	683b      	ldr	r3, [r7, #0]
     c72:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     c74:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     c78:	79fb      	ldrb	r3, [r7, #7]
     c7a:	4619      	mov	r1, r3
     c7c:	4821      	ldr	r0, [pc, #132]	; (d04 <_gpio_set_direction+0xd0>)
     c7e:	4b23      	ldr	r3, [pc, #140]	; (d0c <_gpio_set_direction+0xd8>)
     c80:	4798      	blx	r3
		break;
     c82:	e03a      	b.n	cfa <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c84:	79fb      	ldrb	r3, [r7, #7]
     c86:	683a      	ldr	r2, [r7, #0]
     c88:	4619      	mov	r1, r3
     c8a:	481e      	ldr	r0, [pc, #120]	; (d04 <_gpio_set_direction+0xd0>)
     c8c:	4b1e      	ldr	r3, [pc, #120]	; (d08 <_gpio_set_direction+0xd4>)
     c8e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     c90:	683b      	ldr	r3, [r7, #0]
     c92:	b29b      	uxth	r3, r3
     c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c9c:	79f9      	ldrb	r1, [r7, #7]
     c9e:	461a      	mov	r2, r3
     ca0:	4818      	ldr	r0, [pc, #96]	; (d04 <_gpio_set_direction+0xd0>)
     ca2:	4b1a      	ldr	r3, [pc, #104]	; (d0c <_gpio_set_direction+0xd8>)
     ca4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     ca6:	683b      	ldr	r3, [r7, #0]
     ca8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     caa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     cb2:	79f9      	ldrb	r1, [r7, #7]
     cb4:	461a      	mov	r2, r3
     cb6:	4813      	ldr	r0, [pc, #76]	; (d04 <_gpio_set_direction+0xd0>)
     cb8:	4b14      	ldr	r3, [pc, #80]	; (d0c <_gpio_set_direction+0xd8>)
     cba:	4798      	blx	r3
		break;
     cbc:	e01d      	b.n	cfa <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     cbe:	79fb      	ldrb	r3, [r7, #7]
     cc0:	683a      	ldr	r2, [r7, #0]
     cc2:	4619      	mov	r1, r3
     cc4:	480f      	ldr	r0, [pc, #60]	; (d04 <_gpio_set_direction+0xd0>)
     cc6:	4b12      	ldr	r3, [pc, #72]	; (d10 <_gpio_set_direction+0xdc>)
     cc8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     cca:	683b      	ldr	r3, [r7, #0]
     ccc:	b29b      	uxth	r3, r3
     cce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     cd2:	79fb      	ldrb	r3, [r7, #7]
     cd4:	4619      	mov	r1, r3
     cd6:	480b      	ldr	r0, [pc, #44]	; (d04 <_gpio_set_direction+0xd0>)
     cd8:	4b0c      	ldr	r3, [pc, #48]	; (d0c <_gpio_set_direction+0xd8>)
     cda:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     cdc:	683b      	ldr	r3, [r7, #0]
     cde:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ce0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     ce4:	79fb      	ldrb	r3, [r7, #7]
     ce6:	4619      	mov	r1, r3
     ce8:	4806      	ldr	r0, [pc, #24]	; (d04 <_gpio_set_direction+0xd0>)
     cea:	4b08      	ldr	r3, [pc, #32]	; (d0c <_gpio_set_direction+0xd8>)
     cec:	4798      	blx	r3
		break;
     cee:	e004      	b.n	cfa <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     cf0:	2246      	movs	r2, #70	; 0x46
     cf2:	4908      	ldr	r1, [pc, #32]	; (d14 <_gpio_set_direction+0xe0>)
     cf4:	2000      	movs	r0, #0
     cf6:	4b08      	ldr	r3, [pc, #32]	; (d18 <_gpio_set_direction+0xe4>)
     cf8:	4798      	blx	r3
	}
}
     cfa:	bf00      	nop
     cfc:	3708      	adds	r7, #8
     cfe:	46bd      	mov	sp, r7
     d00:	bd80      	pop	{r7, pc}
     d02:	bf00      	nop
     d04:	41008000 	.word	0x41008000
     d08:	000009f3 	.word	0x000009f3
     d0c:	00000c0b 	.word	0x00000c0b
     d10:	000009cb 	.word	0x000009cb
     d14:	0000ec2c 	.word	0x0000ec2c
     d18:	000033ad 	.word	0x000033ad

00000d1c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     d1c:	b580      	push	{r7, lr}
     d1e:	b082      	sub	sp, #8
     d20:	af00      	add	r7, sp, #0
     d22:	4603      	mov	r3, r0
     d24:	6039      	str	r1, [r7, #0]
     d26:	71fb      	strb	r3, [r7, #7]
     d28:	4613      	mov	r3, r2
     d2a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     d2c:	79bb      	ldrb	r3, [r7, #6]
     d2e:	2b00      	cmp	r3, #0
     d30:	d006      	beq.n	d40 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     d32:	79fb      	ldrb	r3, [r7, #7]
     d34:	683a      	ldr	r2, [r7, #0]
     d36:	4619      	mov	r1, r3
     d38:	4806      	ldr	r0, [pc, #24]	; (d54 <_gpio_set_level+0x38>)
     d3a:	4b07      	ldr	r3, [pc, #28]	; (d58 <_gpio_set_level+0x3c>)
     d3c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     d3e:	e005      	b.n	d4c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     d40:	79fb      	ldrb	r3, [r7, #7]
     d42:	683a      	ldr	r2, [r7, #0]
     d44:	4619      	mov	r1, r3
     d46:	4803      	ldr	r0, [pc, #12]	; (d54 <_gpio_set_level+0x38>)
     d48:	4b04      	ldr	r3, [pc, #16]	; (d5c <_gpio_set_level+0x40>)
     d4a:	4798      	blx	r3
}
     d4c:	bf00      	nop
     d4e:	3708      	adds	r7, #8
     d50:	46bd      	mov	sp, r7
     d52:	bd80      	pop	{r7, pc}
     d54:	41008000 	.word	0x41008000
     d58:	00000a1b 	.word	0x00000a1b
     d5c:	00000a43 	.word	0x00000a43

00000d60 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     d60:	b580      	push	{r7, lr}
     d62:	b082      	sub	sp, #8
     d64:	af00      	add	r7, sp, #0
     d66:	4603      	mov	r3, r0
     d68:	71fb      	strb	r3, [r7, #7]
     d6a:	460b      	mov	r3, r1
     d6c:	71bb      	strb	r3, [r7, #6]
     d6e:	4613      	mov	r3, r2
     d70:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     d72:	797b      	ldrb	r3, [r7, #5]
     d74:	2b01      	cmp	r3, #1
     d76:	d00a      	beq.n	d8e <_gpio_set_pin_pull_mode+0x2e>
     d78:	2b02      	cmp	r3, #2
     d7a:	d01f      	beq.n	dbc <_gpio_set_pin_pull_mode+0x5c>
     d7c:	2b00      	cmp	r3, #0
     d7e:	d134      	bne.n	dea <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     d80:	79ba      	ldrb	r2, [r7, #6]
     d82:	79fb      	ldrb	r3, [r7, #7]
     d84:	4619      	mov	r1, r3
     d86:	481e      	ldr	r0, [pc, #120]	; (e00 <_gpio_set_pin_pull_mode+0xa0>)
     d88:	4b1e      	ldr	r3, [pc, #120]	; (e04 <_gpio_set_pin_pull_mode+0xa4>)
     d8a:	4798      	blx	r3
		break;
     d8c:	e033      	b.n	df6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     d8e:	79bb      	ldrb	r3, [r7, #6]
     d90:	2201      	movs	r2, #1
     d92:	409a      	lsls	r2, r3
     d94:	79fb      	ldrb	r3, [r7, #7]
     d96:	4619      	mov	r1, r3
     d98:	4819      	ldr	r0, [pc, #100]	; (e00 <_gpio_set_pin_pull_mode+0xa0>)
     d9a:	4b1b      	ldr	r3, [pc, #108]	; (e08 <_gpio_set_pin_pull_mode+0xa8>)
     d9c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     d9e:	79ba      	ldrb	r2, [r7, #6]
     da0:	79fb      	ldrb	r3, [r7, #7]
     da2:	4619      	mov	r1, r3
     da4:	4816      	ldr	r0, [pc, #88]	; (e00 <_gpio_set_pin_pull_mode+0xa0>)
     da6:	4b19      	ldr	r3, [pc, #100]	; (e0c <_gpio_set_pin_pull_mode+0xac>)
     da8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     daa:	79bb      	ldrb	r3, [r7, #6]
     dac:	2201      	movs	r2, #1
     dae:	409a      	lsls	r2, r3
     db0:	79fb      	ldrb	r3, [r7, #7]
     db2:	4619      	mov	r1, r3
     db4:	4812      	ldr	r0, [pc, #72]	; (e00 <_gpio_set_pin_pull_mode+0xa0>)
     db6:	4b16      	ldr	r3, [pc, #88]	; (e10 <_gpio_set_pin_pull_mode+0xb0>)
     db8:	4798      	blx	r3
		break;
     dba:	e01c      	b.n	df6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     dbc:	79bb      	ldrb	r3, [r7, #6]
     dbe:	2201      	movs	r2, #1
     dc0:	409a      	lsls	r2, r3
     dc2:	79fb      	ldrb	r3, [r7, #7]
     dc4:	4619      	mov	r1, r3
     dc6:	480e      	ldr	r0, [pc, #56]	; (e00 <_gpio_set_pin_pull_mode+0xa0>)
     dc8:	4b0f      	ldr	r3, [pc, #60]	; (e08 <_gpio_set_pin_pull_mode+0xa8>)
     dca:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     dcc:	79ba      	ldrb	r2, [r7, #6]
     dce:	79fb      	ldrb	r3, [r7, #7]
     dd0:	4619      	mov	r1, r3
     dd2:	480b      	ldr	r0, [pc, #44]	; (e00 <_gpio_set_pin_pull_mode+0xa0>)
     dd4:	4b0d      	ldr	r3, [pc, #52]	; (e0c <_gpio_set_pin_pull_mode+0xac>)
     dd6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     dd8:	79bb      	ldrb	r3, [r7, #6]
     dda:	2201      	movs	r2, #1
     ddc:	409a      	lsls	r2, r3
     dde:	79fb      	ldrb	r3, [r7, #7]
     de0:	4619      	mov	r1, r3
     de2:	4807      	ldr	r0, [pc, #28]	; (e00 <_gpio_set_pin_pull_mode+0xa0>)
     de4:	4b0b      	ldr	r3, [pc, #44]	; (e14 <_gpio_set_pin_pull_mode+0xb4>)
     de6:	4798      	blx	r3
		break;
     de8:	e005      	b.n	df6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     dea:	2289      	movs	r2, #137	; 0x89
     dec:	490a      	ldr	r1, [pc, #40]	; (e18 <_gpio_set_pin_pull_mode+0xb8>)
     dee:	2000      	movs	r0, #0
     df0:	4b0a      	ldr	r3, [pc, #40]	; (e1c <_gpio_set_pin_pull_mode+0xbc>)
     df2:	4798      	blx	r3
		break;
     df4:	bf00      	nop
	}
}
     df6:	bf00      	nop
     df8:	3708      	adds	r7, #8
     dfa:	46bd      	mov	sp, r7
     dfc:	bd80      	pop	{r7, pc}
     dfe:	bf00      	nop
     e00:	41008000 	.word	0x41008000
     e04:	00000bc7 	.word	0x00000bc7
     e08:	000009f3 	.word	0x000009f3
     e0c:	00000b83 	.word	0x00000b83
     e10:	00000a1b 	.word	0x00000a1b
     e14:	00000a43 	.word	0x00000a43
     e18:	0000ec2c 	.word	0x0000ec2c
     e1c:	000033ad 	.word	0x000033ad

00000e20 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     e20:	b590      	push	{r4, r7, lr}
     e22:	b085      	sub	sp, #20
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
     e28:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	095b      	lsrs	r3, r3, #5
     e2e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	b2db      	uxtb	r3, r3
     e34:	f003 031f 	and.w	r3, r3, #31
     e38:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     e3a:	683b      	ldr	r3, [r7, #0]
     e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
     e40:	d106      	bne.n	e50 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     e42:	7bba      	ldrb	r2, [r7, #14]
     e44:	7bf9      	ldrb	r1, [r7, #15]
     e46:	2300      	movs	r3, #0
     e48:	4812      	ldr	r0, [pc, #72]	; (e94 <_gpio_set_pin_function+0x74>)
     e4a:	4c13      	ldr	r4, [pc, #76]	; (e98 <_gpio_set_pin_function+0x78>)
     e4c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     e4e:	e01d      	b.n	e8c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     e50:	7bba      	ldrb	r2, [r7, #14]
     e52:	7bf9      	ldrb	r1, [r7, #15]
     e54:	2301      	movs	r3, #1
     e56:	480f      	ldr	r0, [pc, #60]	; (e94 <_gpio_set_pin_function+0x74>)
     e58:	4c0f      	ldr	r4, [pc, #60]	; (e98 <_gpio_set_pin_function+0x78>)
     e5a:	47a0      	blx	r4
		if (pin & 1) {
     e5c:	7bbb      	ldrb	r3, [r7, #14]
     e5e:	f003 0301 	and.w	r3, r3, #1
     e62:	2b00      	cmp	r3, #0
     e64:	d009      	beq.n	e7a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     e66:	7bbb      	ldrb	r3, [r7, #14]
     e68:	085b      	lsrs	r3, r3, #1
     e6a:	b2da      	uxtb	r2, r3
     e6c:	683b      	ldr	r3, [r7, #0]
     e6e:	b2db      	uxtb	r3, r3
     e70:	7bf9      	ldrb	r1, [r7, #15]
     e72:	4808      	ldr	r0, [pc, #32]	; (e94 <_gpio_set_pin_function+0x74>)
     e74:	4c09      	ldr	r4, [pc, #36]	; (e9c <_gpio_set_pin_function+0x7c>)
     e76:	47a0      	blx	r4
}
     e78:	e008      	b.n	e8c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     e7a:	7bbb      	ldrb	r3, [r7, #14]
     e7c:	085b      	lsrs	r3, r3, #1
     e7e:	b2da      	uxtb	r2, r3
     e80:	683b      	ldr	r3, [r7, #0]
     e82:	b2db      	uxtb	r3, r3
     e84:	7bf9      	ldrb	r1, [r7, #15]
     e86:	4803      	ldr	r0, [pc, #12]	; (e94 <_gpio_set_pin_function+0x74>)
     e88:	4c05      	ldr	r4, [pc, #20]	; (ea0 <_gpio_set_pin_function+0x80>)
     e8a:	47a0      	blx	r4
}
     e8c:	bf00      	nop
     e8e:	3714      	adds	r7, #20
     e90:	46bd      	mov	sp, r7
     e92:	bd90      	pop	{r4, r7, pc}
     e94:	41008000 	.word	0x41008000
     e98:	00000b29 	.word	0x00000b29
     e9c:	00000acb 	.word	0x00000acb
     ea0:	00000a6b 	.word	0x00000a6b

00000ea4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b082      	sub	sp, #8
     ea8:	af00      	add	r7, sp, #0
     eaa:	4603      	mov	r3, r0
     eac:	460a      	mov	r2, r1
     eae:	71fb      	strb	r3, [r7, #7]
     eb0:	4613      	mov	r3, r2
     eb2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     eb4:	79fb      	ldrb	r3, [r7, #7]
     eb6:	095b      	lsrs	r3, r3, #5
     eb8:	b2d8      	uxtb	r0, r3
     eba:	79fb      	ldrb	r3, [r7, #7]
     ebc:	f003 031f 	and.w	r3, r3, #31
     ec0:	b2db      	uxtb	r3, r3
     ec2:	79ba      	ldrb	r2, [r7, #6]
     ec4:	4619      	mov	r1, r3
     ec6:	4b03      	ldr	r3, [pc, #12]	; (ed4 <gpio_set_pin_pull_mode+0x30>)
     ec8:	4798      	blx	r3
}
     eca:	bf00      	nop
     ecc:	3708      	adds	r7, #8
     ece:	46bd      	mov	sp, r7
     ed0:	bd80      	pop	{r7, pc}
     ed2:	bf00      	nop
     ed4:	00000d61 	.word	0x00000d61

00000ed8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     ed8:	b580      	push	{r7, lr}
     eda:	b082      	sub	sp, #8
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
     ee0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     ee2:	6839      	ldr	r1, [r7, #0]
     ee4:	6878      	ldr	r0, [r7, #4]
     ee6:	4b03      	ldr	r3, [pc, #12]	; (ef4 <gpio_set_pin_function+0x1c>)
     ee8:	4798      	blx	r3
}
     eea:	bf00      	nop
     eec:	3708      	adds	r7, #8
     eee:	46bd      	mov	sp, r7
     ef0:	bd80      	pop	{r7, pc}
     ef2:	bf00      	nop
     ef4:	00000e21 	.word	0x00000e21

00000ef8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	4603      	mov	r3, r0
     f00:	460a      	mov	r2, r1
     f02:	71fb      	strb	r3, [r7, #7]
     f04:	4613      	mov	r3, r2
     f06:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     f08:	79fb      	ldrb	r3, [r7, #7]
     f0a:	095b      	lsrs	r3, r3, #5
     f0c:	b2d8      	uxtb	r0, r3
     f0e:	79fb      	ldrb	r3, [r7, #7]
     f10:	f003 031f 	and.w	r3, r3, #31
     f14:	2201      	movs	r2, #1
     f16:	fa02 f303 	lsl.w	r3, r2, r3
     f1a:	79ba      	ldrb	r2, [r7, #6]
     f1c:	4619      	mov	r1, r3
     f1e:	4b03      	ldr	r3, [pc, #12]	; (f2c <gpio_set_pin_direction+0x34>)
     f20:	4798      	blx	r3
}
     f22:	bf00      	nop
     f24:	3708      	adds	r7, #8
     f26:	46bd      	mov	sp, r7
     f28:	bd80      	pop	{r7, pc}
     f2a:	bf00      	nop
     f2c:	00000c35 	.word	0x00000c35

00000f30 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     f30:	b580      	push	{r7, lr}
     f32:	b082      	sub	sp, #8
     f34:	af00      	add	r7, sp, #0
     f36:	4603      	mov	r3, r0
     f38:	460a      	mov	r2, r1
     f3a:	71fb      	strb	r3, [r7, #7]
     f3c:	4613      	mov	r3, r2
     f3e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     f40:	79fb      	ldrb	r3, [r7, #7]
     f42:	095b      	lsrs	r3, r3, #5
     f44:	b2d8      	uxtb	r0, r3
     f46:	79fb      	ldrb	r3, [r7, #7]
     f48:	f003 031f 	and.w	r3, r3, #31
     f4c:	2201      	movs	r2, #1
     f4e:	fa02 f303 	lsl.w	r3, r2, r3
     f52:	79ba      	ldrb	r2, [r7, #6]
     f54:	4619      	mov	r1, r3
     f56:	4b03      	ldr	r3, [pc, #12]	; (f64 <gpio_set_pin_level+0x34>)
     f58:	4798      	blx	r3
}
     f5a:	bf00      	nop
     f5c:	3708      	adds	r7, #8
     f5e:	46bd      	mov	sp, r7
     f60:	bd80      	pop	{r7, pc}
     f62:	bf00      	nop
     f64:	00000d1d 	.word	0x00000d1d

00000f68 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     f68:	b580      	push	{r7, lr}
     f6a:	af00      	add	r7, sp, #0
	_init_chip();
     f6c:	4b01      	ldr	r3, [pc, #4]	; (f74 <init_mcu+0xc>)
     f6e:	4798      	blx	r3
}
     f70:	bf00      	nop
     f72:	bd80      	pop	{r7, pc}
     f74:	00003fb5 	.word	0x00003fb5

00000f78 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     f78:	b580      	push	{r7, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
     f80:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	2b00      	cmp	r3, #0
     f86:	d004      	beq.n	f92 <wdt_init+0x1a>
     f88:	683b      	ldr	r3, [r7, #0]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d001      	beq.n	f92 <wdt_init+0x1a>
     f8e:	2301      	movs	r3, #1
     f90:	e000      	b.n	f94 <wdt_init+0x1c>
     f92:	2300      	movs	r3, #0
     f94:	f003 0301 	and.w	r3, r3, #1
     f98:	b2db      	uxtb	r3, r3
     f9a:	2248      	movs	r2, #72	; 0x48
     f9c:	4907      	ldr	r1, [pc, #28]	; (fbc <wdt_init+0x44>)
     f9e:	4618      	mov	r0, r3
     fa0:	4b07      	ldr	r3, [pc, #28]	; (fc0 <wdt_init+0x48>)
     fa2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	683a      	ldr	r2, [r7, #0]
     fa8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	4618      	mov	r0, r3
     fae:	4b05      	ldr	r3, [pc, #20]	; (fc4 <wdt_init+0x4c>)
     fb0:	4798      	blx	r3
     fb2:	4603      	mov	r3, r0
}
     fb4:	4618      	mov	r0, r3
     fb6:	3708      	adds	r7, #8
     fb8:	46bd      	mov	sp, r7
     fba:	bd80      	pop	{r7, pc}
     fbc:	0000ec48 	.word	0x0000ec48
     fc0:	000033ad 	.word	0x000033ad
     fc4:	0000a8c1 	.word	0x0000a8c1

00000fc8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     fc8:	b580      	push	{r7, lr}
     fca:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     fcc:	4804      	ldr	r0, [pc, #16]	; (fe0 <CRC_CALC_init+0x18>)
     fce:	4b05      	ldr	r3, [pc, #20]	; (fe4 <CRC_CALC_init+0x1c>)
     fd0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     fd2:	4905      	ldr	r1, [pc, #20]	; (fe8 <CRC_CALC_init+0x20>)
     fd4:	4805      	ldr	r0, [pc, #20]	; (fec <CRC_CALC_init+0x24>)
     fd6:	4b06      	ldr	r3, [pc, #24]	; (ff0 <CRC_CALC_init+0x28>)
     fd8:	4798      	blx	r3
}
     fda:	bf00      	nop
     fdc:	bd80      	pop	{r7, pc}
     fde:	bf00      	nop
     fe0:	40000800 	.word	0x40000800
     fe4:	000007eb 	.word	0x000007eb
     fe8:	41002000 	.word	0x41002000
     fec:	20001770 	.word	0x20001770
     ff0:	00001db1 	.word	0x00001db1

00000ff4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     ff4:	b580      	push	{r7, lr}
     ff6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ff8:	2244      	movs	r2, #68	; 0x44
     ffa:	2104      	movs	r1, #4
     ffc:	483f      	ldr	r0, [pc, #252]	; (10fc <EXTERNAL_IRQ_0_init+0x108>)
     ffe:	4b40      	ldr	r3, [pc, #256]	; (1100 <EXTERNAL_IRQ_0_init+0x10c>)
    1000:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1002:	4840      	ldr	r0, [pc, #256]	; (1104 <EXTERNAL_IRQ_0_init+0x110>)
    1004:	4b40      	ldr	r3, [pc, #256]	; (1108 <EXTERNAL_IRQ_0_init+0x114>)
    1006:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1008:	2101      	movs	r1, #1
    100a:	2040      	movs	r0, #64	; 0x40
    100c:	4b3f      	ldr	r3, [pc, #252]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    100e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1010:	2100      	movs	r1, #0
    1012:	2040      	movs	r0, #64	; 0x40
    1014:	4b3e      	ldr	r3, [pc, #248]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    1016:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1018:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    101c:	2040      	movs	r0, #64	; 0x40
    101e:	4b3d      	ldr	r3, [pc, #244]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    1020:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1022:	2101      	movs	r1, #1
    1024:	2021      	movs	r0, #33	; 0x21
    1026:	4b39      	ldr	r3, [pc, #228]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    1028:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    102a:	2100      	movs	r1, #0
    102c:	2021      	movs	r0, #33	; 0x21
    102e:	4b38      	ldr	r3, [pc, #224]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    1030:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1032:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1036:	2021      	movs	r0, #33	; 0x21
    1038:	4b36      	ldr	r3, [pc, #216]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    103a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    103c:	2101      	movs	r1, #1
    103e:	2003      	movs	r0, #3
    1040:	4b32      	ldr	r3, [pc, #200]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    1042:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1044:	2102      	movs	r1, #2
    1046:	2003      	movs	r0, #3
    1048:	4b31      	ldr	r3, [pc, #196]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    104a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    104c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1050:	2003      	movs	r0, #3
    1052:	4b30      	ldr	r3, [pc, #192]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    1054:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1056:	2101      	movs	r1, #1
    1058:	2004      	movs	r0, #4
    105a:	4b2c      	ldr	r3, [pc, #176]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    105c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    105e:	2102      	movs	r1, #2
    1060:	2004      	movs	r0, #4
    1062:	4b2b      	ldr	r3, [pc, #172]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    1064:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1066:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    106a:	2004      	movs	r0, #4
    106c:	4b29      	ldr	r3, [pc, #164]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    106e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1070:	2101      	movs	r1, #1
    1072:	2005      	movs	r0, #5
    1074:	4b25      	ldr	r3, [pc, #148]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    1076:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1078:	2102      	movs	r1, #2
    107a:	2005      	movs	r0, #5
    107c:	4b24      	ldr	r3, [pc, #144]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    107e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1080:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1084:	2005      	movs	r0, #5
    1086:	4b23      	ldr	r3, [pc, #140]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    1088:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    108a:	2101      	movs	r1, #1
    108c:	2056      	movs	r0, #86	; 0x56
    108e:	4b1f      	ldr	r3, [pc, #124]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    1090:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1092:	2102      	movs	r1, #2
    1094:	2056      	movs	r0, #86	; 0x56
    1096:	4b1e      	ldr	r3, [pc, #120]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    1098:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    109a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    109e:	2056      	movs	r0, #86	; 0x56
    10a0:	4b1c      	ldr	r3, [pc, #112]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    10a2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    10a4:	2101      	movs	r1, #1
    10a6:	2057      	movs	r0, #87	; 0x57
    10a8:	4b18      	ldr	r3, [pc, #96]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    10aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    10ac:	2102      	movs	r1, #2
    10ae:	2057      	movs	r0, #87	; 0x57
    10b0:	4b17      	ldr	r3, [pc, #92]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    10b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    10b4:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    10b8:	2057      	movs	r0, #87	; 0x57
    10ba:	4b16      	ldr	r3, [pc, #88]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    10bc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    10be:	2101      	movs	r1, #1
    10c0:	2028      	movs	r0, #40	; 0x28
    10c2:	4b12      	ldr	r3, [pc, #72]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    10c4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    10c6:	2100      	movs	r1, #0
    10c8:	2028      	movs	r0, #40	; 0x28
    10ca:	4b11      	ldr	r3, [pc, #68]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    10cc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    10ce:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    10d2:	2028      	movs	r0, #40	; 0x28
    10d4:	4b0f      	ldr	r3, [pc, #60]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    10d6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    10d8:	2101      	movs	r1, #1
    10da:	2029      	movs	r0, #41	; 0x29
    10dc:	4b0b      	ldr	r3, [pc, #44]	; (110c <EXTERNAL_IRQ_0_init+0x118>)
    10de:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    10e0:	2100      	movs	r1, #0
    10e2:	2029      	movs	r0, #41	; 0x29
    10e4:	4b0a      	ldr	r3, [pc, #40]	; (1110 <EXTERNAL_IRQ_0_init+0x11c>)
    10e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    10e8:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    10ec:	2029      	movs	r0, #41	; 0x29
    10ee:	4b09      	ldr	r3, [pc, #36]	; (1114 <EXTERNAL_IRQ_0_init+0x120>)
    10f0:	4798      	blx	r3

	ext_irq_init();
    10f2:	4b09      	ldr	r3, [pc, #36]	; (1118 <EXTERNAL_IRQ_0_init+0x124>)
    10f4:	4798      	blx	r3
}
    10f6:	bf00      	nop
    10f8:	bd80      	pop	{r7, pc}
    10fa:	bf00      	nop
    10fc:	40001c00 	.word	0x40001c00
    1100:	00000685 	.word	0x00000685
    1104:	40000800 	.word	0x40000800
    1108:	0000076b 	.word	0x0000076b
    110c:	00000ef9 	.word	0x00000ef9
    1110:	00000ea5 	.word	0x00000ea5
    1114:	00000ed9 	.word	0x00000ed9
    1118:	00001e79 	.word	0x00001e79

0000111c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    111c:	b580      	push	{r7, lr}
    111e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1120:	2244      	movs	r2, #68	; 0x44
    1122:	210b      	movs	r1, #11
    1124:	4807      	ldr	r0, [pc, #28]	; (1144 <EVENT_SYSTEM_0_init+0x28>)
    1126:	4b08      	ldr	r3, [pc, #32]	; (1148 <EVENT_SYSTEM_0_init+0x2c>)
    1128:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    112a:	2244      	movs	r2, #68	; 0x44
    112c:	210c      	movs	r1, #12
    112e:	4805      	ldr	r0, [pc, #20]	; (1144 <EVENT_SYSTEM_0_init+0x28>)
    1130:	4b05      	ldr	r3, [pc, #20]	; (1148 <EVENT_SYSTEM_0_init+0x2c>)
    1132:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1134:	4805      	ldr	r0, [pc, #20]	; (114c <EVENT_SYSTEM_0_init+0x30>)
    1136:	4b06      	ldr	r3, [pc, #24]	; (1150 <EVENT_SYSTEM_0_init+0x34>)
    1138:	4798      	blx	r3

	event_system_init();
    113a:	4b06      	ldr	r3, [pc, #24]	; (1154 <EVENT_SYSTEM_0_init+0x38>)
    113c:	4798      	blx	r3
}
    113e:	bf00      	nop
    1140:	bd80      	pop	{r7, pc}
    1142:	bf00      	nop
    1144:	40001c00 	.word	0x40001c00
    1148:	00000685 	.word	0x00000685
    114c:	40000800 	.word	0x40000800
    1150:	0000080b 	.word	0x0000080b
    1154:	00001e65 	.word	0x00001e65

00001158 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1158:	b580      	push	{r7, lr}
    115a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    115c:	2101      	movs	r1, #1
    115e:	202b      	movs	r0, #43	; 0x2b
    1160:	4b2b      	ldr	r3, [pc, #172]	; (1210 <QSPI_N25Q256_PORT_init+0xb8>)
    1162:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1164:	2100      	movs	r1, #0
    1166:	202b      	movs	r0, #43	; 0x2b
    1168:	4b2a      	ldr	r3, [pc, #168]	; (1214 <QSPI_N25Q256_PORT_init+0xbc>)
    116a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    116c:	492a      	ldr	r1, [pc, #168]	; (1218 <QSPI_N25Q256_PORT_init+0xc0>)
    116e:	202b      	movs	r0, #43	; 0x2b
    1170:	4b2a      	ldr	r3, [pc, #168]	; (121c <QSPI_N25Q256_PORT_init+0xc4>)
    1172:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1174:	2102      	movs	r1, #2
    1176:	2008      	movs	r0, #8
    1178:	4b25      	ldr	r3, [pc, #148]	; (1210 <QSPI_N25Q256_PORT_init+0xb8>)
    117a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    117c:	2100      	movs	r1, #0
    117e:	2008      	movs	r0, #8
    1180:	4b27      	ldr	r3, [pc, #156]	; (1220 <QSPI_N25Q256_PORT_init+0xc8>)
    1182:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1184:	2100      	movs	r1, #0
    1186:	2008      	movs	r0, #8
    1188:	4b22      	ldr	r3, [pc, #136]	; (1214 <QSPI_N25Q256_PORT_init+0xbc>)
    118a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    118c:	4925      	ldr	r1, [pc, #148]	; (1224 <QSPI_N25Q256_PORT_init+0xcc>)
    118e:	2008      	movs	r0, #8
    1190:	4b22      	ldr	r3, [pc, #136]	; (121c <QSPI_N25Q256_PORT_init+0xc4>)
    1192:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1194:	2102      	movs	r1, #2
    1196:	2009      	movs	r0, #9
    1198:	4b1d      	ldr	r3, [pc, #116]	; (1210 <QSPI_N25Q256_PORT_init+0xb8>)
    119a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    119c:	2100      	movs	r1, #0
    119e:	2009      	movs	r0, #9
    11a0:	4b1f      	ldr	r3, [pc, #124]	; (1220 <QSPI_N25Q256_PORT_init+0xc8>)
    11a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    11a4:	2100      	movs	r1, #0
    11a6:	2009      	movs	r0, #9
    11a8:	4b1a      	ldr	r3, [pc, #104]	; (1214 <QSPI_N25Q256_PORT_init+0xbc>)
    11aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    11ac:	491e      	ldr	r1, [pc, #120]	; (1228 <QSPI_N25Q256_PORT_init+0xd0>)
    11ae:	2009      	movs	r0, #9
    11b0:	4b1a      	ldr	r3, [pc, #104]	; (121c <QSPI_N25Q256_PORT_init+0xc4>)
    11b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    11b4:	2102      	movs	r1, #2
    11b6:	200a      	movs	r0, #10
    11b8:	4b15      	ldr	r3, [pc, #84]	; (1210 <QSPI_N25Q256_PORT_init+0xb8>)
    11ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    11bc:	2100      	movs	r1, #0
    11be:	200a      	movs	r0, #10
    11c0:	4b17      	ldr	r3, [pc, #92]	; (1220 <QSPI_N25Q256_PORT_init+0xc8>)
    11c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    11c4:	2100      	movs	r1, #0
    11c6:	200a      	movs	r0, #10
    11c8:	4b12      	ldr	r3, [pc, #72]	; (1214 <QSPI_N25Q256_PORT_init+0xbc>)
    11ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    11cc:	4917      	ldr	r1, [pc, #92]	; (122c <QSPI_N25Q256_PORT_init+0xd4>)
    11ce:	200a      	movs	r0, #10
    11d0:	4b12      	ldr	r3, [pc, #72]	; (121c <QSPI_N25Q256_PORT_init+0xc4>)
    11d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    11d4:	2102      	movs	r1, #2
    11d6:	200b      	movs	r0, #11
    11d8:	4b0d      	ldr	r3, [pc, #52]	; (1210 <QSPI_N25Q256_PORT_init+0xb8>)
    11da:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    11dc:	2100      	movs	r1, #0
    11de:	200b      	movs	r0, #11
    11e0:	4b0f      	ldr	r3, [pc, #60]	; (1220 <QSPI_N25Q256_PORT_init+0xc8>)
    11e2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    11e4:	2100      	movs	r1, #0
    11e6:	200b      	movs	r0, #11
    11e8:	4b0a      	ldr	r3, [pc, #40]	; (1214 <QSPI_N25Q256_PORT_init+0xbc>)
    11ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    11ec:	4910      	ldr	r1, [pc, #64]	; (1230 <QSPI_N25Q256_PORT_init+0xd8>)
    11ee:	200b      	movs	r0, #11
    11f0:	4b0a      	ldr	r3, [pc, #40]	; (121c <QSPI_N25Q256_PORT_init+0xc4>)
    11f2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    11f4:	2101      	movs	r1, #1
    11f6:	202a      	movs	r0, #42	; 0x2a
    11f8:	4b05      	ldr	r3, [pc, #20]	; (1210 <QSPI_N25Q256_PORT_init+0xb8>)
    11fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    11fc:	2100      	movs	r1, #0
    11fe:	202a      	movs	r0, #42	; 0x2a
    1200:	4b04      	ldr	r3, [pc, #16]	; (1214 <QSPI_N25Q256_PORT_init+0xbc>)
    1202:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1204:	490b      	ldr	r1, [pc, #44]	; (1234 <QSPI_N25Q256_PORT_init+0xdc>)
    1206:	202a      	movs	r0, #42	; 0x2a
    1208:	4b04      	ldr	r3, [pc, #16]	; (121c <QSPI_N25Q256_PORT_init+0xc4>)
    120a:	4798      	blx	r3
}
    120c:	bf00      	nop
    120e:	bd80      	pop	{r7, pc}
    1210:	00000ef9 	.word	0x00000ef9
    1214:	00000ea5 	.word	0x00000ea5
    1218:	002b0007 	.word	0x002b0007
    121c:	00000ed9 	.word	0x00000ed9
    1220:	00000f31 	.word	0x00000f31
    1224:	00080007 	.word	0x00080007
    1228:	00090007 	.word	0x00090007
    122c:	000a0007 	.word	0x000a0007
    1230:	000b0007 	.word	0x000b0007
    1234:	002a0007 	.word	0x002a0007

00001238 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1238:	b580      	push	{r7, lr}
    123a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    123c:	4805      	ldr	r0, [pc, #20]	; (1254 <QSPI_N25Q256_CLOCK_init+0x1c>)
    123e:	4b06      	ldr	r3, [pc, #24]	; (1258 <QSPI_N25Q256_CLOCK_init+0x20>)
    1240:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1242:	4804      	ldr	r0, [pc, #16]	; (1254 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1244:	4b05      	ldr	r3, [pc, #20]	; (125c <QSPI_N25Q256_CLOCK_init+0x24>)
    1246:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1248:	4802      	ldr	r0, [pc, #8]	; (1254 <QSPI_N25Q256_CLOCK_init+0x1c>)
    124a:	4b05      	ldr	r3, [pc, #20]	; (1260 <QSPI_N25Q256_CLOCK_init+0x28>)
    124c:	4798      	blx	r3
}
    124e:	bf00      	nop
    1250:	bd80      	pop	{r7, pc}
    1252:	bf00      	nop
    1254:	40000800 	.word	0x40000800
    1258:	000006cb 	.word	0x000006cb
    125c:	0000070b 	.word	0x0000070b
    1260:	000008eb 	.word	0x000008eb

00001264 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1264:	b580      	push	{r7, lr}
    1266:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <QSPI_N25Q256_init+0x18>)
    126a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    126c:	4904      	ldr	r1, [pc, #16]	; (1280 <QSPI_N25Q256_init+0x1c>)
    126e:	4805      	ldr	r0, [pc, #20]	; (1284 <QSPI_N25Q256_init+0x20>)
    1270:	4b05      	ldr	r3, [pc, #20]	; (1288 <QSPI_N25Q256_init+0x24>)
    1272:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1274:	4b05      	ldr	r3, [pc, #20]	; (128c <QSPI_N25Q256_init+0x28>)
    1276:	4798      	blx	r3
}
    1278:	bf00      	nop
    127a:	bd80      	pop	{r7, pc}
    127c:	00001239 	.word	0x00001239
    1280:	42003400 	.word	0x42003400
    1284:	20001604 	.word	0x20001604
    1288:	000022c9 	.word	0x000022c9
    128c:	00001159 	.word	0x00001159

00001290 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1290:	b580      	push	{r7, lr}
    1292:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1294:	4802      	ldr	r0, [pc, #8]	; (12a0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1296:	4b03      	ldr	r3, [pc, #12]	; (12a4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1298:	4798      	blx	r3
}
    129a:	bf00      	nop
    129c:	bd80      	pop	{r7, pc}
    129e:	bf00      	nop
    12a0:	40000800 	.word	0x40000800
    12a4:	0000074b 	.word	0x0000074b

000012a8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    12a8:	b580      	push	{r7, lr}
    12aa:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    12ac:	4b03      	ldr	r3, [pc, #12]	; (12bc <DATETIME_CLOCK_init+0x14>)
    12ae:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    12b0:	4903      	ldr	r1, [pc, #12]	; (12c0 <DATETIME_CLOCK_init+0x18>)
    12b2:	4804      	ldr	r0, [pc, #16]	; (12c4 <DATETIME_CLOCK_init+0x1c>)
    12b4:	4b04      	ldr	r3, [pc, #16]	; (12c8 <DATETIME_CLOCK_init+0x20>)
    12b6:	4798      	blx	r3
}
    12b8:	bf00      	nop
    12ba:	bd80      	pop	{r7, pc}
    12bc:	00001291 	.word	0x00001291
    12c0:	40002400 	.word	0x40002400
    12c4:	2000174c 	.word	0x2000174c
    12c8:	00001c55 	.word	0x00001c55

000012cc <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    12cc:	b580      	push	{r7, lr}
    12ce:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    12d0:	2101      	movs	r1, #1
    12d2:	2010      	movs	r0, #16
    12d4:	4b07      	ldr	r3, [pc, #28]	; (12f4 <I2C_HEATERS_PORT_init+0x28>)
    12d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    12d8:	4907      	ldr	r1, [pc, #28]	; (12f8 <I2C_HEATERS_PORT_init+0x2c>)
    12da:	2010      	movs	r0, #16
    12dc:	4b07      	ldr	r3, [pc, #28]	; (12fc <I2C_HEATERS_PORT_init+0x30>)
    12de:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    12e0:	2101      	movs	r1, #1
    12e2:	2011      	movs	r0, #17
    12e4:	4b03      	ldr	r3, [pc, #12]	; (12f4 <I2C_HEATERS_PORT_init+0x28>)
    12e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    12e8:	4905      	ldr	r1, [pc, #20]	; (1300 <I2C_HEATERS_PORT_init+0x34>)
    12ea:	2011      	movs	r0, #17
    12ec:	4b03      	ldr	r3, [pc, #12]	; (12fc <I2C_HEATERS_PORT_init+0x30>)
    12ee:	4798      	blx	r3
}
    12f0:	bf00      	nop
    12f2:	bd80      	pop	{r7, pc}
    12f4:	00000ea5 	.word	0x00000ea5
    12f8:	00100002 	.word	0x00100002
    12fc:	00000ed9 	.word	0x00000ed9
    1300:	00110002 	.word	0x00110002

00001304 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1304:	b580      	push	{r7, lr}
    1306:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1308:	2242      	movs	r2, #66	; 0x42
    130a:	2108      	movs	r1, #8
    130c:	4806      	ldr	r0, [pc, #24]	; (1328 <I2C_HEATERS_CLOCK_init+0x24>)
    130e:	4b07      	ldr	r3, [pc, #28]	; (132c <I2C_HEATERS_CLOCK_init+0x28>)
    1310:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1312:	224a      	movs	r2, #74	; 0x4a
    1314:	2103      	movs	r1, #3
    1316:	4804      	ldr	r0, [pc, #16]	; (1328 <I2C_HEATERS_CLOCK_init+0x24>)
    1318:	4b04      	ldr	r3, [pc, #16]	; (132c <I2C_HEATERS_CLOCK_init+0x28>)
    131a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    131c:	4804      	ldr	r0, [pc, #16]	; (1330 <I2C_HEATERS_CLOCK_init+0x2c>)
    131e:	4b05      	ldr	r3, [pc, #20]	; (1334 <I2C_HEATERS_CLOCK_init+0x30>)
    1320:	4798      	blx	r3
}
    1322:	bf00      	nop
    1324:	bd80      	pop	{r7, pc}
    1326:	bf00      	nop
    1328:	40001c00 	.word	0x40001c00
    132c:	00000685 	.word	0x00000685
    1330:	40000800 	.word	0x40000800
    1334:	0000078b 	.word	0x0000078b

00001338 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1338:	b580      	push	{r7, lr}
    133a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    133c:	4b04      	ldr	r3, [pc, #16]	; (1350 <I2C_HEATERS_init+0x18>)
    133e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1340:	4904      	ldr	r1, [pc, #16]	; (1354 <I2C_HEATERS_init+0x1c>)
    1342:	4805      	ldr	r0, [pc, #20]	; (1358 <I2C_HEATERS_init+0x20>)
    1344:	4b05      	ldr	r3, [pc, #20]	; (135c <I2C_HEATERS_init+0x24>)
    1346:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1348:	4b05      	ldr	r3, [pc, #20]	; (1360 <I2C_HEATERS_init+0x28>)
    134a:	4798      	blx	r3
}
    134c:	bf00      	nop
    134e:	bd80      	pop	{r7, pc}
    1350:	00001305 	.word	0x00001305
    1354:	40003400 	.word	0x40003400
    1358:	200016a4 	.word	0x200016a4
    135c:	00002141 	.word	0x00002141
    1360:	000012cd 	.word	0x000012cd

00001364 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1364:	b580      	push	{r7, lr}
    1366:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1368:	2100      	movs	r1, #0
    136a:	203b      	movs	r0, #59	; 0x3b
    136c:	4b11      	ldr	r3, [pc, #68]	; (13b4 <SPI_TEMP_PORT_init+0x50>)
    136e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1370:	2102      	movs	r1, #2
    1372:	203b      	movs	r0, #59	; 0x3b
    1374:	4b10      	ldr	r3, [pc, #64]	; (13b8 <SPI_TEMP_PORT_init+0x54>)
    1376:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1378:	4910      	ldr	r1, [pc, #64]	; (13bc <SPI_TEMP_PORT_init+0x58>)
    137a:	203b      	movs	r0, #59	; 0x3b
    137c:	4b10      	ldr	r3, [pc, #64]	; (13c0 <SPI_TEMP_PORT_init+0x5c>)
    137e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1380:	2100      	movs	r1, #0
    1382:	203a      	movs	r0, #58	; 0x3a
    1384:	4b0b      	ldr	r3, [pc, #44]	; (13b4 <SPI_TEMP_PORT_init+0x50>)
    1386:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1388:	2102      	movs	r1, #2
    138a:	203a      	movs	r0, #58	; 0x3a
    138c:	4b0a      	ldr	r3, [pc, #40]	; (13b8 <SPI_TEMP_PORT_init+0x54>)
    138e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1390:	490c      	ldr	r1, [pc, #48]	; (13c4 <SPI_TEMP_PORT_init+0x60>)
    1392:	203a      	movs	r0, #58	; 0x3a
    1394:	4b0a      	ldr	r3, [pc, #40]	; (13c0 <SPI_TEMP_PORT_init+0x5c>)
    1396:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1398:	2101      	movs	r1, #1
    139a:	203c      	movs	r0, #60	; 0x3c
    139c:	4b06      	ldr	r3, [pc, #24]	; (13b8 <SPI_TEMP_PORT_init+0x54>)
    139e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    13a0:	2100      	movs	r1, #0
    13a2:	203c      	movs	r0, #60	; 0x3c
    13a4:	4b08      	ldr	r3, [pc, #32]	; (13c8 <SPI_TEMP_PORT_init+0x64>)
    13a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    13a8:	4908      	ldr	r1, [pc, #32]	; (13cc <SPI_TEMP_PORT_init+0x68>)
    13aa:	203c      	movs	r0, #60	; 0x3c
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <SPI_TEMP_PORT_init+0x5c>)
    13ae:	4798      	blx	r3
}
    13b0:	bf00      	nop
    13b2:	bd80      	pop	{r7, pc}
    13b4:	00000f31 	.word	0x00000f31
    13b8:	00000ef9 	.word	0x00000ef9
    13bc:	003b0003 	.word	0x003b0003
    13c0:	00000ed9 	.word	0x00000ed9
    13c4:	003a0003 	.word	0x003a0003
    13c8:	00000ea5 	.word	0x00000ea5
    13cc:	003c0003 	.word	0x003c0003

000013d0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13d4:	2245      	movs	r2, #69	; 0x45
    13d6:	2122      	movs	r1, #34	; 0x22
    13d8:	4806      	ldr	r0, [pc, #24]	; (13f4 <SPI_TEMP_CLOCK_init+0x24>)
    13da:	4b07      	ldr	r3, [pc, #28]	; (13f8 <SPI_TEMP_CLOCK_init+0x28>)
    13dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13de:	224a      	movs	r2, #74	; 0x4a
    13e0:	2103      	movs	r1, #3
    13e2:	4804      	ldr	r0, [pc, #16]	; (13f4 <SPI_TEMP_CLOCK_init+0x24>)
    13e4:	4b04      	ldr	r3, [pc, #16]	; (13f8 <SPI_TEMP_CLOCK_init+0x28>)
    13e6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    13e8:	4804      	ldr	r0, [pc, #16]	; (13fc <SPI_TEMP_CLOCK_init+0x2c>)
    13ea:	4b05      	ldr	r3, [pc, #20]	; (1400 <SPI_TEMP_CLOCK_init+0x30>)
    13ec:	4798      	blx	r3
}
    13ee:	bf00      	nop
    13f0:	bd80      	pop	{r7, pc}
    13f2:	bf00      	nop
    13f4:	40001c00 	.word	0x40001c00
    13f8:	00000685 	.word	0x00000685
    13fc:	40000800 	.word	0x40000800
    1400:	0000090b 	.word	0x0000090b

00001404 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1404:	b580      	push	{r7, lr}
    1406:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1408:	4b05      	ldr	r3, [pc, #20]	; (1420 <SPI_TEMP_init+0x1c>)
    140a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    140c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1410:	4804      	ldr	r0, [pc, #16]	; (1424 <SPI_TEMP_init+0x20>)
    1412:	4b05      	ldr	r3, [pc, #20]	; (1428 <SPI_TEMP_init+0x24>)
    1414:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1416:	4b05      	ldr	r3, [pc, #20]	; (142c <SPI_TEMP_init+0x28>)
    1418:	4798      	blx	r3
}
    141a:	bf00      	nop
    141c:	bd80      	pop	{r7, pc}
    141e:	bf00      	nop
    1420:	000013d1 	.word	0x000013d1
    1424:	200015ac 	.word	0x200015ac
    1428:	000023d9 	.word	0x000023d9
    142c:	00001365 	.word	0x00001365

00001430 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1430:	b580      	push	{r7, lr}
    1432:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1434:	2100      	movs	r1, #0
    1436:	2017      	movs	r0, #23
    1438:	4b07      	ldr	r3, [pc, #28]	; (1458 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    143a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    143c:	4907      	ldr	r1, [pc, #28]	; (145c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    143e:	2017      	movs	r0, #23
    1440:	4b07      	ldr	r3, [pc, #28]	; (1460 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1442:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1444:	2100      	movs	r1, #0
    1446:	2016      	movs	r0, #22
    1448:	4b03      	ldr	r3, [pc, #12]	; (1458 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    144a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    144c:	4905      	ldr	r1, [pc, #20]	; (1464 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    144e:	2016      	movs	r0, #22
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1452:	4798      	blx	r3
}
    1454:	bf00      	nop
    1456:	bd80      	pop	{r7, pc}
    1458:	00000ea5 	.word	0x00000ea5
    145c:	00170003 	.word	0x00170003
    1460:	00000ed9 	.word	0x00000ed9
    1464:	00160003 	.word	0x00160003

00001468 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1468:	b580      	push	{r7, lr}
    146a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    146c:	2244      	movs	r2, #68	; 0x44
    146e:	2123      	movs	r1, #35	; 0x23
    1470:	4806      	ldr	r0, [pc, #24]	; (148c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1472:	4b07      	ldr	r3, [pc, #28]	; (1490 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1474:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1476:	224a      	movs	r2, #74	; 0x4a
    1478:	2103      	movs	r1, #3
    147a:	4804      	ldr	r0, [pc, #16]	; (148c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    147c:	4b04      	ldr	r3, [pc, #16]	; (1490 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    147e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1480:	4804      	ldr	r0, [pc, #16]	; (1494 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1482:	4b05      	ldr	r3, [pc, #20]	; (1498 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1484:	4798      	blx	r3
}
    1486:	bf00      	nop
    1488:	bd80      	pop	{r7, pc}
    148a:	bf00      	nop
    148c:	40001c00 	.word	0x40001c00
    1490:	00000685 	.word	0x00000685
    1494:	40000800 	.word	0x40000800
    1498:	0000092b 	.word	0x0000092b

0000149c <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    14a0:	4b04      	ldr	r3, [pc, #16]	; (14b4 <I2C_FLAPPER_VALVE_init+0x18>)
    14a2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    14a4:	4904      	ldr	r1, [pc, #16]	; (14b8 <I2C_FLAPPER_VALVE_init+0x1c>)
    14a6:	4805      	ldr	r0, [pc, #20]	; (14bc <I2C_FLAPPER_VALVE_init+0x20>)
    14a8:	4b05      	ldr	r3, [pc, #20]	; (14c0 <I2C_FLAPPER_VALVE_init+0x24>)
    14aa:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    14ac:	4b05      	ldr	r3, [pc, #20]	; (14c4 <I2C_FLAPPER_VALVE_init+0x28>)
    14ae:	4798      	blx	r3
}
    14b0:	bf00      	nop
    14b2:	bd80      	pop	{r7, pc}
    14b4:	00001469 	.word	0x00001469
    14b8:	43000400 	.word	0x43000400
    14bc:	20001648 	.word	0x20001648
    14c0:	00002141 	.word	0x00002141
    14c4:	00001431 	.word	0x00001431

000014c8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    14cc:	2100      	movs	r1, #0
    14ce:	2044      	movs	r0, #68	; 0x44
    14d0:	4b11      	ldr	r3, [pc, #68]	; (1518 <SPI_HI3593_PORT_init+0x50>)
    14d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    14d4:	2102      	movs	r1, #2
    14d6:	2044      	movs	r0, #68	; 0x44
    14d8:	4b10      	ldr	r3, [pc, #64]	; (151c <SPI_HI3593_PORT_init+0x54>)
    14da:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    14dc:	4910      	ldr	r1, [pc, #64]	; (1520 <SPI_HI3593_PORT_init+0x58>)
    14de:	2044      	movs	r0, #68	; 0x44
    14e0:	4b10      	ldr	r3, [pc, #64]	; (1524 <SPI_HI3593_PORT_init+0x5c>)
    14e2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    14e4:	2100      	movs	r1, #0
    14e6:	2045      	movs	r0, #69	; 0x45
    14e8:	4b0b      	ldr	r3, [pc, #44]	; (1518 <SPI_HI3593_PORT_init+0x50>)
    14ea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    14ec:	2102      	movs	r1, #2
    14ee:	2045      	movs	r0, #69	; 0x45
    14f0:	4b0a      	ldr	r3, [pc, #40]	; (151c <SPI_HI3593_PORT_init+0x54>)
    14f2:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    14f4:	490c      	ldr	r1, [pc, #48]	; (1528 <SPI_HI3593_PORT_init+0x60>)
    14f6:	2045      	movs	r0, #69	; 0x45
    14f8:	4b0a      	ldr	r3, [pc, #40]	; (1524 <SPI_HI3593_PORT_init+0x5c>)
    14fa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    14fc:	2101      	movs	r1, #1
    14fe:	2047      	movs	r0, #71	; 0x47
    1500:	4b06      	ldr	r3, [pc, #24]	; (151c <SPI_HI3593_PORT_init+0x54>)
    1502:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1504:	2100      	movs	r1, #0
    1506:	2047      	movs	r0, #71	; 0x47
    1508:	4b08      	ldr	r3, [pc, #32]	; (152c <SPI_HI3593_PORT_init+0x64>)
    150a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    150c:	4908      	ldr	r1, [pc, #32]	; (1530 <SPI_HI3593_PORT_init+0x68>)
    150e:	2047      	movs	r0, #71	; 0x47
    1510:	4b04      	ldr	r3, [pc, #16]	; (1524 <SPI_HI3593_PORT_init+0x5c>)
    1512:	4798      	blx	r3
}
    1514:	bf00      	nop
    1516:	bd80      	pop	{r7, pc}
    1518:	00000f31 	.word	0x00000f31
    151c:	00000ef9 	.word	0x00000ef9
    1520:	00440002 	.word	0x00440002
    1524:	00000ed9 	.word	0x00000ed9
    1528:	00450002 	.word	0x00450002
    152c:	00000ea5 	.word	0x00000ea5
    1530:	00470002 	.word	0x00470002

00001534 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1538:	2242      	movs	r2, #66	; 0x42
    153a:	2124      	movs	r1, #36	; 0x24
    153c:	4806      	ldr	r0, [pc, #24]	; (1558 <SPI_HI3593_CLOCK_init+0x24>)
    153e:	4b07      	ldr	r3, [pc, #28]	; (155c <SPI_HI3593_CLOCK_init+0x28>)
    1540:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1542:	224a      	movs	r2, #74	; 0x4a
    1544:	2103      	movs	r1, #3
    1546:	4804      	ldr	r0, [pc, #16]	; (1558 <SPI_HI3593_CLOCK_init+0x24>)
    1548:	4b04      	ldr	r3, [pc, #16]	; (155c <SPI_HI3593_CLOCK_init+0x28>)
    154a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    154c:	4804      	ldr	r0, [pc, #16]	; (1560 <SPI_HI3593_CLOCK_init+0x2c>)
    154e:	4b05      	ldr	r3, [pc, #20]	; (1564 <SPI_HI3593_CLOCK_init+0x30>)
    1550:	4798      	blx	r3
}
    1552:	bf00      	nop
    1554:	bd80      	pop	{r7, pc}
    1556:	bf00      	nop
    1558:	40001c00 	.word	0x40001c00
    155c:	00000685 	.word	0x00000685
    1560:	40000800 	.word	0x40000800
    1564:	0000094b 	.word	0x0000094b

00001568 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1568:	b580      	push	{r7, lr}
    156a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <SPI_HI3593_init+0x18>)
    156e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1570:	4904      	ldr	r1, [pc, #16]	; (1584 <SPI_HI3593_init+0x1c>)
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <SPI_HI3593_init+0x20>)
    1574:	4b05      	ldr	r3, [pc, #20]	; (158c <SPI_HI3593_init+0x24>)
    1576:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <SPI_HI3593_init+0x28>)
    157a:	4798      	blx	r3
}
    157c:	bf00      	nop
    157e:	bd80      	pop	{r7, pc}
    1580:	00001535 	.word	0x00001535
    1584:	43000800 	.word	0x43000800
    1588:	20001594 	.word	0x20001594
    158c:	000023d9 	.word	0x000023d9
    1590:	000014c9 	.word	0x000014c9

00001594 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1594:	b580      	push	{r7, lr}
    1596:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1598:	2100      	movs	r1, #0
    159a:	2068      	movs	r0, #104	; 0x68
    159c:	4b07      	ldr	r3, [pc, #28]	; (15bc <I2C_FANS_PORT_init+0x28>)
    159e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    15a0:	4907      	ldr	r1, [pc, #28]	; (15c0 <I2C_FANS_PORT_init+0x2c>)
    15a2:	2068      	movs	r0, #104	; 0x68
    15a4:	4b07      	ldr	r3, [pc, #28]	; (15c4 <I2C_FANS_PORT_init+0x30>)
    15a6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    15a8:	2100      	movs	r1, #0
    15aa:	2069      	movs	r0, #105	; 0x69
    15ac:	4b03      	ldr	r3, [pc, #12]	; (15bc <I2C_FANS_PORT_init+0x28>)
    15ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    15b0:	4905      	ldr	r1, [pc, #20]	; (15c8 <I2C_FANS_PORT_init+0x34>)
    15b2:	2069      	movs	r0, #105	; 0x69
    15b4:	4b03      	ldr	r3, [pc, #12]	; (15c4 <I2C_FANS_PORT_init+0x30>)
    15b6:	4798      	blx	r3
}
    15b8:	bf00      	nop
    15ba:	bd80      	pop	{r7, pc}
    15bc:	00000ea5 	.word	0x00000ea5
    15c0:	00680002 	.word	0x00680002
    15c4:	00000ed9 	.word	0x00000ed9
    15c8:	00690002 	.word	0x00690002

000015cc <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    15cc:	b580      	push	{r7, lr}
    15ce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15d0:	2244      	movs	r2, #68	; 0x44
    15d2:	2125      	movs	r1, #37	; 0x25
    15d4:	4806      	ldr	r0, [pc, #24]	; (15f0 <I2C_FANS_CLOCK_init+0x24>)
    15d6:	4b07      	ldr	r3, [pc, #28]	; (15f4 <I2C_FANS_CLOCK_init+0x28>)
    15d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15da:	224a      	movs	r2, #74	; 0x4a
    15dc:	2103      	movs	r1, #3
    15de:	4804      	ldr	r0, [pc, #16]	; (15f0 <I2C_FANS_CLOCK_init+0x24>)
    15e0:	4b04      	ldr	r3, [pc, #16]	; (15f4 <I2C_FANS_CLOCK_init+0x28>)
    15e2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    15e4:	4804      	ldr	r0, [pc, #16]	; (15f8 <I2C_FANS_CLOCK_init+0x2c>)
    15e6:	4b05      	ldr	r3, [pc, #20]	; (15fc <I2C_FANS_CLOCK_init+0x30>)
    15e8:	4798      	blx	r3
}
    15ea:	bf00      	nop
    15ec:	bd80      	pop	{r7, pc}
    15ee:	bf00      	nop
    15f0:	40001c00 	.word	0x40001c00
    15f4:	00000685 	.word	0x00000685
    15f8:	40000800 	.word	0x40000800
    15fc:	0000096b 	.word	0x0000096b

00001600 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1600:	b580      	push	{r7, lr}
    1602:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1604:	4b04      	ldr	r3, [pc, #16]	; (1618 <I2C_FANS_init+0x18>)
    1606:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1608:	4904      	ldr	r1, [pc, #16]	; (161c <I2C_FANS_init+0x1c>)
    160a:	4805      	ldr	r0, [pc, #20]	; (1620 <I2C_FANS_init+0x20>)
    160c:	4b05      	ldr	r3, [pc, #20]	; (1624 <I2C_FANS_init+0x24>)
    160e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1610:	4b05      	ldr	r3, [pc, #20]	; (1628 <I2C_FANS_init+0x28>)
    1612:	4798      	blx	r3
}
    1614:	bf00      	nop
    1616:	bd80      	pop	{r7, pc}
    1618:	000015cd 	.word	0x000015cd
    161c:	43000c00 	.word	0x43000c00
    1620:	200015c4 	.word	0x200015c4
    1624:	00002141 	.word	0x00002141
    1628:	00001595 	.word	0x00001595

0000162c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    162c:	b580      	push	{r7, lr}
    162e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1630:	4808      	ldr	r0, [pc, #32]	; (1654 <TIMER_USB_init+0x28>)
    1632:	4b09      	ldr	r3, [pc, #36]	; (1658 <TIMER_USB_init+0x2c>)
    1634:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1636:	2243      	movs	r2, #67	; 0x43
    1638:	2109      	movs	r1, #9
    163a:	4808      	ldr	r0, [pc, #32]	; (165c <TIMER_USB_init+0x30>)
    163c:	4b08      	ldr	r3, [pc, #32]	; (1660 <TIMER_USB_init+0x34>)
    163e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1640:	4b08      	ldr	r3, [pc, #32]	; (1664 <TIMER_USB_init+0x38>)
    1642:	4798      	blx	r3
    1644:	4603      	mov	r3, r0
    1646:	461a      	mov	r2, r3
    1648:	4907      	ldr	r1, [pc, #28]	; (1668 <TIMER_USB_init+0x3c>)
    164a:	4808      	ldr	r0, [pc, #32]	; (166c <TIMER_USB_init+0x40>)
    164c:	4b08      	ldr	r3, [pc, #32]	; (1670 <TIMER_USB_init+0x44>)
    164e:	4798      	blx	r3
}
    1650:	bf00      	nop
    1652:	bd80      	pop	{r7, pc}
    1654:	40000800 	.word	0x40000800
    1658:	000007ab 	.word	0x000007ab
    165c:	40001c00 	.word	0x40001c00
    1660:	00000685 	.word	0x00000685
    1664:	00007d59 	.word	0x00007d59
    1668:	40003800 	.word	0x40003800
    166c:	2000170c 	.word	0x2000170c
    1670:	000025a9 	.word	0x000025a9

00001674 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1674:	b580      	push	{r7, lr}
    1676:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1678:	4808      	ldr	r0, [pc, #32]	; (169c <TIMER_ARINC_init+0x28>)
    167a:	4b09      	ldr	r3, [pc, #36]	; (16a0 <TIMER_ARINC_init+0x2c>)
    167c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    167e:	2244      	movs	r2, #68	; 0x44
    1680:	211a      	movs	r1, #26
    1682:	4808      	ldr	r0, [pc, #32]	; (16a4 <TIMER_ARINC_init+0x30>)
    1684:	4b08      	ldr	r3, [pc, #32]	; (16a8 <TIMER_ARINC_init+0x34>)
    1686:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1688:	4b08      	ldr	r3, [pc, #32]	; (16ac <TIMER_ARINC_init+0x38>)
    168a:	4798      	blx	r3
    168c:	4603      	mov	r3, r0
    168e:	461a      	mov	r2, r3
    1690:	4907      	ldr	r1, [pc, #28]	; (16b0 <TIMER_ARINC_init+0x3c>)
    1692:	4808      	ldr	r0, [pc, #32]	; (16b4 <TIMER_ARINC_init+0x40>)
    1694:	4b08      	ldr	r3, [pc, #32]	; (16b8 <TIMER_ARINC_init+0x44>)
    1696:	4798      	blx	r3
}
    1698:	bf00      	nop
    169a:	bd80      	pop	{r7, pc}
    169c:	40000800 	.word	0x40000800
    16a0:	0000086b 	.word	0x0000086b
    16a4:	40001c00 	.word	0x40001c00
    16a8:	00000685 	.word	0x00000685
    16ac:	00007d59 	.word	0x00007d59
    16b0:	4101a000 	.word	0x4101a000
    16b4:	200016ec 	.word	0x200016ec
    16b8:	000025a9 	.word	0x000025a9

000016bc <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    16bc:	b580      	push	{r7, lr}
    16be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    16c0:	4808      	ldr	r0, [pc, #32]	; (16e4 <TIMER_MAINTENANCE_init+0x28>)
    16c2:	4b09      	ldr	r3, [pc, #36]	; (16e8 <TIMER_MAINTENANCE_init+0x2c>)
    16c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16c6:	2246      	movs	r2, #70	; 0x46
    16c8:	211e      	movs	r1, #30
    16ca:	4808      	ldr	r0, [pc, #32]	; (16ec <TIMER_MAINTENANCE_init+0x30>)
    16cc:	4b08      	ldr	r3, [pc, #32]	; (16f0 <TIMER_MAINTENANCE_init+0x34>)
    16ce:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    16d0:	4b08      	ldr	r3, [pc, #32]	; (16f4 <TIMER_MAINTENANCE_init+0x38>)
    16d2:	4798      	blx	r3
    16d4:	4603      	mov	r3, r0
    16d6:	461a      	mov	r2, r3
    16d8:	4907      	ldr	r1, [pc, #28]	; (16f8 <TIMER_MAINTENANCE_init+0x3c>)
    16da:	4808      	ldr	r0, [pc, #32]	; (16fc <TIMER_MAINTENANCE_init+0x40>)
    16dc:	4b08      	ldr	r3, [pc, #32]	; (1700 <TIMER_MAINTENANCE_init+0x44>)
    16de:	4798      	blx	r3
}
    16e0:	bf00      	nop
    16e2:	bd80      	pop	{r7, pc}
    16e4:	40000800 	.word	0x40000800
    16e8:	000008ab 	.word	0x000008ab
    16ec:	40001c00 	.word	0x40001c00
    16f0:	00000685 	.word	0x00000685
    16f4:	00007d59 	.word	0x00007d59
    16f8:	42001400 	.word	0x42001400
    16fc:	200015e4 	.word	0x200015e4
    1700:	000025a9 	.word	0x000025a9

00001704 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1704:	b580      	push	{r7, lr}
    1706:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1708:	4808      	ldr	r0, [pc, #32]	; (172c <TIMER_INTERFACE_init+0x28>)
    170a:	4b09      	ldr	r3, [pc, #36]	; (1730 <TIMER_INTERFACE_init+0x2c>)
    170c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    170e:	2246      	movs	r2, #70	; 0x46
    1710:	211e      	movs	r1, #30
    1712:	4808      	ldr	r0, [pc, #32]	; (1734 <TIMER_INTERFACE_init+0x30>)
    1714:	4b08      	ldr	r3, [pc, #32]	; (1738 <TIMER_INTERFACE_init+0x34>)
    1716:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1718:	4b08      	ldr	r3, [pc, #32]	; (173c <TIMER_INTERFACE_init+0x38>)
    171a:	4798      	blx	r3
    171c:	4603      	mov	r3, r0
    171e:	461a      	mov	r2, r3
    1720:	4907      	ldr	r1, [pc, #28]	; (1740 <TIMER_INTERFACE_init+0x3c>)
    1722:	4808      	ldr	r0, [pc, #32]	; (1744 <TIMER_INTERFACE_init+0x40>)
    1724:	4b08      	ldr	r3, [pc, #32]	; (1748 <TIMER_INTERFACE_init+0x44>)
    1726:	4798      	blx	r3
}
    1728:	bf00      	nop
    172a:	bd80      	pop	{r7, pc}
    172c:	40000800 	.word	0x40000800
    1730:	000008cb 	.word	0x000008cb
    1734:	40001c00 	.word	0x40001c00
    1738:	00000685 	.word	0x00000685
    173c:	00007d59 	.word	0x00007d59
    1740:	42001800 	.word	0x42001800
    1744:	20001628 	.word	0x20001628
    1748:	000025a9 	.word	0x000025a9

0000174c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    174c:	b580      	push	{r7, lr}
    174e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1750:	4808      	ldr	r0, [pc, #32]	; (1774 <TIMER_EVENT_init+0x28>)
    1752:	4b09      	ldr	r3, [pc, #36]	; (1778 <TIMER_EVENT_init+0x2c>)
    1754:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1756:	2246      	movs	r2, #70	; 0x46
    1758:	2127      	movs	r1, #39	; 0x27
    175a:	4808      	ldr	r0, [pc, #32]	; (177c <TIMER_EVENT_init+0x30>)
    175c:	4b08      	ldr	r3, [pc, #32]	; (1780 <TIMER_EVENT_init+0x34>)
    175e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1760:	4b08      	ldr	r3, [pc, #32]	; (1784 <TIMER_EVENT_init+0x38>)
    1762:	4798      	blx	r3
    1764:	4603      	mov	r3, r0
    1766:	461a      	mov	r2, r3
    1768:	4907      	ldr	r1, [pc, #28]	; (1788 <TIMER_EVENT_init+0x3c>)
    176a:	4808      	ldr	r0, [pc, #32]	; (178c <TIMER_EVENT_init+0x40>)
    176c:	4b08      	ldr	r3, [pc, #32]	; (1790 <TIMER_EVENT_init+0x44>)
    176e:	4798      	blx	r3
}
    1770:	bf00      	nop
    1772:	bd80      	pop	{r7, pc}
    1774:	40000800 	.word	0x40000800
    1778:	0000098b 	.word	0x0000098b
    177c:	40001c00 	.word	0x40001c00
    1780:	00000685 	.word	0x00000685
    1784:	00007d59 	.word	0x00007d59
    1788:	43001400 	.word	0x43001400
    178c:	20001608 	.word	0x20001608
    1790:	000025a9 	.word	0x000025a9

00001794 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1794:	b480      	push	{r7}
    1796:	af00      	add	r7, sp, #0
}
    1798:	bf00      	nop
    179a:	46bd      	mov	sp, r7
    179c:	f85d 7b04 	ldr.w	r7, [sp], #4
    17a0:	4770      	bx	lr
	...

000017a4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    17a8:	4804      	ldr	r0, [pc, #16]	; (17bc <LIVE_PULSE_CLOCK_init+0x18>)
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <LIVE_PULSE_CLOCK_init+0x1c>)
    17ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17ae:	2240      	movs	r2, #64	; 0x40
    17b0:	2127      	movs	r1, #39	; 0x27
    17b2:	4804      	ldr	r0, [pc, #16]	; (17c4 <LIVE_PULSE_CLOCK_init+0x20>)
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <LIVE_PULSE_CLOCK_init+0x24>)
    17b6:	4798      	blx	r3
}
    17b8:	bf00      	nop
    17ba:	bd80      	pop	{r7, pc}
    17bc:	40000800 	.word	0x40000800
    17c0:	000009ab 	.word	0x000009ab
    17c4:	40001c00 	.word	0x40001c00
    17c8:	00000685 	.word	0x00000685

000017cc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    17d0:	4b06      	ldr	r3, [pc, #24]	; (17ec <LIVE_PULSE_init+0x20>)
    17d2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    17d4:	4b06      	ldr	r3, [pc, #24]	; (17f0 <LIVE_PULSE_init+0x24>)
    17d6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    17d8:	4b06      	ldr	r3, [pc, #24]	; (17f4 <LIVE_PULSE_init+0x28>)
    17da:	4798      	blx	r3
    17dc:	4603      	mov	r3, r0
    17de:	461a      	mov	r2, r3
    17e0:	4905      	ldr	r1, [pc, #20]	; (17f8 <LIVE_PULSE_init+0x2c>)
    17e2:	4806      	ldr	r0, [pc, #24]	; (17fc <LIVE_PULSE_init+0x30>)
    17e4:	4b06      	ldr	r3, [pc, #24]	; (1800 <LIVE_PULSE_init+0x34>)
    17e6:	4798      	blx	r3
}
    17e8:	bf00      	nop
    17ea:	bd80      	pop	{r7, pc}
    17ec:	000017a5 	.word	0x000017a5
    17f0:	00001795 	.word	0x00001795
    17f4:	00007d6d 	.word	0x00007d6d
    17f8:	43001800 	.word	0x43001800
    17fc:	20001668 	.word	0x20001668
    1800:	0000221d 	.word	0x0000221d

00001804 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1804:	b580      	push	{r7, lr}
    1806:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1808:	4804      	ldr	r0, [pc, #16]	; (181c <TIMER_HVAC_CLOCK_init+0x18>)
    180a:	4b05      	ldr	r3, [pc, #20]	; (1820 <TIMER_HVAC_CLOCK_init+0x1c>)
    180c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    180e:	2244      	movs	r2, #68	; 0x44
    1810:	2119      	movs	r1, #25
    1812:	4804      	ldr	r0, [pc, #16]	; (1824 <TIMER_HVAC_CLOCK_init+0x20>)
    1814:	4b04      	ldr	r3, [pc, #16]	; (1828 <TIMER_HVAC_CLOCK_init+0x24>)
    1816:	4798      	blx	r3
}
    1818:	bf00      	nop
    181a:	bd80      	pop	{r7, pc}
    181c:	40000800 	.word	0x40000800
    1820:	0000082b 	.word	0x0000082b
    1824:	40001c00 	.word	0x40001c00
    1828:	00000685 	.word	0x00000685

0000182c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    182c:	b580      	push	{r7, lr}
    182e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1830:	4b05      	ldr	r3, [pc, #20]	; (1848 <TIMER_HVAC_init+0x1c>)
    1832:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1834:	4b05      	ldr	r3, [pc, #20]	; (184c <TIMER_HVAC_init+0x20>)
    1836:	4798      	blx	r3
    1838:	4603      	mov	r3, r0
    183a:	461a      	mov	r2, r3
    183c:	4904      	ldr	r1, [pc, #16]	; (1850 <TIMER_HVAC_init+0x24>)
    183e:	4805      	ldr	r0, [pc, #20]	; (1854 <TIMER_HVAC_init+0x28>)
    1840:	4b05      	ldr	r3, [pc, #20]	; (1858 <TIMER_HVAC_init+0x2c>)
    1842:	4798      	blx	r3
}
    1844:	bf00      	nop
    1846:	bd80      	pop	{r7, pc}
    1848:	00001805 	.word	0x00001805
    184c:	0000713d 	.word	0x0000713d
    1850:	41016000 	.word	0x41016000
    1854:	2000172c 	.word	0x2000172c
    1858:	000025a9 	.word	0x000025a9

0000185c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1860:	4804      	ldr	r0, [pc, #16]	; (1874 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1862:	4b05      	ldr	r3, [pc, #20]	; (1878 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1864:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1866:	2244      	movs	r2, #68	; 0x44
    1868:	2119      	movs	r1, #25
    186a:	4804      	ldr	r0, [pc, #16]	; (187c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    186c:	4b04      	ldr	r3, [pc, #16]	; (1880 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    186e:	4798      	blx	r3
}
    1870:	bf00      	nop
    1872:	bd80      	pop	{r7, pc}
    1874:	40000800 	.word	0x40000800
    1878:	0000084b 	.word	0x0000084b
    187c:	40001c00 	.word	0x40001c00
    1880:	00000685 	.word	0x00000685

00001884 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1884:	b580      	push	{r7, lr}
    1886:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1888:	4b05      	ldr	r3, [pc, #20]	; (18a0 <TIMER_TEMPERATURES_init+0x1c>)
    188a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    188c:	4b05      	ldr	r3, [pc, #20]	; (18a4 <TIMER_TEMPERATURES_init+0x20>)
    188e:	4798      	blx	r3
    1890:	4603      	mov	r3, r0
    1892:	461a      	mov	r2, r3
    1894:	4904      	ldr	r1, [pc, #16]	; (18a8 <TIMER_TEMPERATURES_init+0x24>)
    1896:	4805      	ldr	r0, [pc, #20]	; (18ac <TIMER_TEMPERATURES_init+0x28>)
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <TIMER_TEMPERATURES_init+0x2c>)
    189a:	4798      	blx	r3
}
    189c:	bf00      	nop
    189e:	bd80      	pop	{r7, pc}
    18a0:	0000185d 	.word	0x0000185d
    18a4:	0000713d 	.word	0x0000713d
    18a8:	41018000 	.word	0x41018000
    18ac:	20001574 	.word	0x20001574
    18b0:	000025a9 	.word	0x000025a9

000018b4 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    18b4:	b580      	push	{r7, lr}
    18b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    18b8:	4804      	ldr	r0, [pc, #16]	; (18cc <TIMER_CCU_CLOCK_init+0x18>)
    18ba:	4b05      	ldr	r3, [pc, #20]	; (18d0 <TIMER_CCU_CLOCK_init+0x1c>)
    18bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18be:	2240      	movs	r2, #64	; 0x40
    18c0:	211d      	movs	r1, #29
    18c2:	4804      	ldr	r0, [pc, #16]	; (18d4 <TIMER_CCU_CLOCK_init+0x20>)
    18c4:	4b04      	ldr	r3, [pc, #16]	; (18d8 <TIMER_CCU_CLOCK_init+0x24>)
    18c6:	4798      	blx	r3
}
    18c8:	bf00      	nop
    18ca:	bd80      	pop	{r7, pc}
    18cc:	40000800 	.word	0x40000800
    18d0:	0000088b 	.word	0x0000088b
    18d4:	40001c00 	.word	0x40001c00
    18d8:	00000685 	.word	0x00000685

000018dc <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    18dc:	b580      	push	{r7, lr}
    18de:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    18e0:	4b05      	ldr	r3, [pc, #20]	; (18f8 <TIMER_CCU_init+0x1c>)
    18e2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    18e4:	4b05      	ldr	r3, [pc, #20]	; (18fc <TIMER_CCU_init+0x20>)
    18e6:	4798      	blx	r3
    18e8:	4603      	mov	r3, r0
    18ea:	461a      	mov	r2, r3
    18ec:	4904      	ldr	r1, [pc, #16]	; (1900 <TIMER_CCU_init+0x24>)
    18ee:	4805      	ldr	r0, [pc, #20]	; (1904 <TIMER_CCU_init+0x28>)
    18f0:	4b05      	ldr	r3, [pc, #20]	; (1908 <TIMER_CCU_init+0x2c>)
    18f2:	4798      	blx	r3
}
    18f4:	bf00      	nop
    18f6:	bd80      	pop	{r7, pc}
    18f8:	000018b5 	.word	0x000018b5
    18fc:	0000713d 	.word	0x0000713d
    1900:	42000c00 	.word	0x42000c00
    1904:	20001684 	.word	0x20001684
    1908:	000025a9 	.word	0x000025a9

0000190c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    190c:	b580      	push	{r7, lr}
    190e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1910:	2102      	movs	r1, #2
    1912:	2018      	movs	r0, #24
    1914:	4b0f      	ldr	r3, [pc, #60]	; (1954 <CDCUSB_PORT_init+0x48>)
    1916:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1918:	2100      	movs	r1, #0
    191a:	2018      	movs	r0, #24
    191c:	4b0e      	ldr	r3, [pc, #56]	; (1958 <CDCUSB_PORT_init+0x4c>)
    191e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1920:	2100      	movs	r1, #0
    1922:	2018      	movs	r0, #24
    1924:	4b0d      	ldr	r3, [pc, #52]	; (195c <CDCUSB_PORT_init+0x50>)
    1926:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1928:	490d      	ldr	r1, [pc, #52]	; (1960 <CDCUSB_PORT_init+0x54>)
    192a:	2018      	movs	r0, #24
    192c:	4b0d      	ldr	r3, [pc, #52]	; (1964 <CDCUSB_PORT_init+0x58>)
    192e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1930:	2102      	movs	r1, #2
    1932:	2019      	movs	r0, #25
    1934:	4b07      	ldr	r3, [pc, #28]	; (1954 <CDCUSB_PORT_init+0x48>)
    1936:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1938:	2100      	movs	r1, #0
    193a:	2019      	movs	r0, #25
    193c:	4b06      	ldr	r3, [pc, #24]	; (1958 <CDCUSB_PORT_init+0x4c>)
    193e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1940:	2100      	movs	r1, #0
    1942:	2019      	movs	r0, #25
    1944:	4b05      	ldr	r3, [pc, #20]	; (195c <CDCUSB_PORT_init+0x50>)
    1946:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1948:	4907      	ldr	r1, [pc, #28]	; (1968 <CDCUSB_PORT_init+0x5c>)
    194a:	2019      	movs	r0, #25
    194c:	4b05      	ldr	r3, [pc, #20]	; (1964 <CDCUSB_PORT_init+0x58>)
    194e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1950:	bf00      	nop
    1952:	bd80      	pop	{r7, pc}
    1954:	00000ef9 	.word	0x00000ef9
    1958:	00000f31 	.word	0x00000f31
    195c:	00000ea5 	.word	0x00000ea5
    1960:	00180007 	.word	0x00180007
    1964:	00000ed9 	.word	0x00000ed9
    1968:	00190007 	.word	0x00190007

0000196c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    196c:	b580      	push	{r7, lr}
    196e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1970:	2242      	movs	r2, #66	; 0x42
    1972:	210a      	movs	r1, #10
    1974:	4805      	ldr	r0, [pc, #20]	; (198c <CDCUSB_CLOCK_init+0x20>)
    1976:	4b06      	ldr	r3, [pc, #24]	; (1990 <CDCUSB_CLOCK_init+0x24>)
    1978:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    197a:	4806      	ldr	r0, [pc, #24]	; (1994 <CDCUSB_CLOCK_init+0x28>)
    197c:	4b06      	ldr	r3, [pc, #24]	; (1998 <CDCUSB_CLOCK_init+0x2c>)
    197e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1980:	4804      	ldr	r0, [pc, #16]	; (1994 <CDCUSB_CLOCK_init+0x28>)
    1982:	4b06      	ldr	r3, [pc, #24]	; (199c <CDCUSB_CLOCK_init+0x30>)
    1984:	4798      	blx	r3
}
    1986:	bf00      	nop
    1988:	bd80      	pop	{r7, pc}
    198a:	bf00      	nop
    198c:	40001c00 	.word	0x40001c00
    1990:	00000685 	.word	0x00000685
    1994:	40000800 	.word	0x40000800
    1998:	000006ab 	.word	0x000006ab
    199c:	000007cb 	.word	0x000007cb

000019a0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    19a0:	b580      	push	{r7, lr}
    19a2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    19a4:	4b03      	ldr	r3, [pc, #12]	; (19b4 <CDCUSB_init+0x14>)
    19a6:	4798      	blx	r3
	usb_d_init();
    19a8:	4b03      	ldr	r3, [pc, #12]	; (19b8 <CDCUSB_init+0x18>)
    19aa:	4798      	blx	r3
	CDCUSB_PORT_init();
    19ac:	4b03      	ldr	r3, [pc, #12]	; (19bc <CDCUSB_init+0x1c>)
    19ae:	4798      	blx	r3
}
    19b0:	bf00      	nop
    19b2:	bd80      	pop	{r7, pc}
    19b4:	0000196d 	.word	0x0000196d
    19b8:	00002e05 	.word	0x00002e05
    19bc:	0000190d 	.word	0x0000190d

000019c0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    19c0:	b580      	push	{r7, lr}
    19c2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    19c4:	4802      	ldr	r0, [pc, #8]	; (19d0 <WATCHDOG_CLOCK_init+0x10>)
    19c6:	4b03      	ldr	r3, [pc, #12]	; (19d4 <WATCHDOG_CLOCK_init+0x14>)
    19c8:	4798      	blx	r3
}
    19ca:	bf00      	nop
    19cc:	bd80      	pop	{r7, pc}
    19ce:	bf00      	nop
    19d0:	40000800 	.word	0x40000800
    19d4:	0000072b 	.word	0x0000072b

000019d8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    19d8:	b580      	push	{r7, lr}
    19da:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    19dc:	4b03      	ldr	r3, [pc, #12]	; (19ec <WATCHDOG_init+0x14>)
    19de:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    19e0:	4903      	ldr	r1, [pc, #12]	; (19f0 <WATCHDOG_init+0x18>)
    19e2:	4804      	ldr	r0, [pc, #16]	; (19f4 <WATCHDOG_init+0x1c>)
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <WATCHDOG_init+0x20>)
    19e6:	4798      	blx	r3
}
    19e8:	bf00      	nop
    19ea:	bd80      	pop	{r7, pc}
    19ec:	000019c1 	.word	0x000019c1
    19f0:	40002000 	.word	0x40002000
    19f4:	2000176c 	.word	0x2000176c
    19f8:	00000f79 	.word	0x00000f79

000019fc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    19fc:	b580      	push	{r7, lr}
    19fe:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1a00:	4904      	ldr	r1, [pc, #16]	; (1a14 <CAN_CCU_PORT_init+0x18>)
    1a02:	202d      	movs	r0, #45	; 0x2d
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <CAN_CCU_PORT_init+0x1c>)
    1a06:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1a08:	4904      	ldr	r1, [pc, #16]	; (1a1c <CAN_CCU_PORT_init+0x20>)
    1a0a:	202c      	movs	r0, #44	; 0x2c
    1a0c:	4b02      	ldr	r3, [pc, #8]	; (1a18 <CAN_CCU_PORT_init+0x1c>)
    1a0e:	4798      	blx	r3
}
    1a10:	bf00      	nop
    1a12:	bd80      	pop	{r7, pc}
    1a14:	002d0007 	.word	0x002d0007
    1a18:	00000ed9 	.word	0x00000ed9
    1a1c:	002c0007 	.word	0x002c0007

00001a20 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1a24:	4807      	ldr	r0, [pc, #28]	; (1a44 <CAN_CCU_init+0x24>)
    1a26:	4b08      	ldr	r3, [pc, #32]	; (1a48 <CAN_CCU_init+0x28>)
    1a28:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a2a:	2249      	movs	r2, #73	; 0x49
    1a2c:	211c      	movs	r1, #28
    1a2e:	4807      	ldr	r0, [pc, #28]	; (1a4c <CAN_CCU_init+0x2c>)
    1a30:	4b07      	ldr	r3, [pc, #28]	; (1a50 <CAN_CCU_init+0x30>)
    1a32:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1a34:	4907      	ldr	r1, [pc, #28]	; (1a54 <CAN_CCU_init+0x34>)
    1a36:	4808      	ldr	r0, [pc, #32]	; (1a58 <CAN_CCU_init+0x38>)
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <CAN_CCU_init+0x3c>)
    1a3a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1a3c:	4b08      	ldr	r3, [pc, #32]	; (1a60 <CAN_CCU_init+0x40>)
    1a3e:	4798      	blx	r3
}
    1a40:	bf00      	nop
    1a42:	bd80      	pop	{r7, pc}
    1a44:	40000800 	.word	0x40000800
    1a48:	000006eb 	.word	0x000006eb
    1a4c:	40001c00 	.word	0x40001c00
    1a50:	00000685 	.word	0x00000685
    1a54:	42000400 	.word	0x42000400
    1a58:	200016c4 	.word	0x200016c4
    1a5c:	00001cc5 	.word	0x00001cc5
    1a60:	000019fd 	.word	0x000019fd

00001a64 <system_init>:

void system_init(void)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	af00      	add	r7, sp, #0
	init_mcu();
    1a68:	4b5f      	ldr	r3, [pc, #380]	; (1be8 <system_init+0x184>)
    1a6a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1a6c:	2100      	movs	r1, #0
    1a6e:	2007      	movs	r0, #7
    1a70:	4b5e      	ldr	r3, [pc, #376]	; (1bec <system_init+0x188>)
    1a72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1a74:	2102      	movs	r1, #2
    1a76:	2007      	movs	r0, #7
    1a78:	4b5d      	ldr	r3, [pc, #372]	; (1bf0 <system_init+0x18c>)
    1a7a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1a7c:	f04f 31ff 	mov.w	r1, #4294967295
    1a80:	2007      	movs	r0, #7
    1a82:	4b5c      	ldr	r3, [pc, #368]	; (1bf4 <system_init+0x190>)
    1a84:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1a86:	2101      	movs	r1, #1
    1a88:	200f      	movs	r0, #15
    1a8a:	4b58      	ldr	r3, [pc, #352]	; (1bec <system_init+0x188>)
    1a8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1a8e:	2102      	movs	r1, #2
    1a90:	200f      	movs	r0, #15
    1a92:	4b57      	ldr	r3, [pc, #348]	; (1bf0 <system_init+0x18c>)
    1a94:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1a96:	f04f 31ff 	mov.w	r1, #4294967295
    1a9a:	200f      	movs	r0, #15
    1a9c:	4b55      	ldr	r3, [pc, #340]	; (1bf4 <system_init+0x190>)
    1a9e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1aa0:	2101      	movs	r1, #1
    1aa2:	2013      	movs	r0, #19
    1aa4:	4b51      	ldr	r3, [pc, #324]	; (1bec <system_init+0x188>)
    1aa6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1aa8:	2102      	movs	r1, #2
    1aaa:	2013      	movs	r0, #19
    1aac:	4b50      	ldr	r3, [pc, #320]	; (1bf0 <system_init+0x18c>)
    1aae:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1ab0:	f04f 31ff 	mov.w	r1, #4294967295
    1ab4:	2013      	movs	r0, #19
    1ab6:	4b4f      	ldr	r3, [pc, #316]	; (1bf4 <system_init+0x190>)
    1ab8:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1aba:	2101      	movs	r1, #1
    1abc:	201b      	movs	r0, #27
    1abe:	4b4b      	ldr	r3, [pc, #300]	; (1bec <system_init+0x188>)
    1ac0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1ac2:	2102      	movs	r1, #2
    1ac4:	201b      	movs	r0, #27
    1ac6:	4b4a      	ldr	r3, [pc, #296]	; (1bf0 <system_init+0x18c>)
    1ac8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1aca:	f04f 31ff 	mov.w	r1, #4294967295
    1ace:	201b      	movs	r0, #27
    1ad0:	4b48      	ldr	r3, [pc, #288]	; (1bf4 <system_init+0x190>)
    1ad2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1ad4:	2101      	movs	r1, #1
    1ad6:	2027      	movs	r0, #39	; 0x27
    1ad8:	4b44      	ldr	r3, [pc, #272]	; (1bec <system_init+0x188>)
    1ada:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1adc:	2102      	movs	r1, #2
    1ade:	2027      	movs	r0, #39	; 0x27
    1ae0:	4b43      	ldr	r3, [pc, #268]	; (1bf0 <system_init+0x18c>)
    1ae2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1ae4:	f04f 31ff 	mov.w	r1, #4294967295
    1ae8:	2027      	movs	r0, #39	; 0x27
    1aea:	4b42      	ldr	r3, [pc, #264]	; (1bf4 <system_init+0x190>)
    1aec:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1aee:	2101      	movs	r1, #1
    1af0:	203d      	movs	r0, #61	; 0x3d
    1af2:	4b3e      	ldr	r3, [pc, #248]	; (1bec <system_init+0x188>)
    1af4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1af6:	2102      	movs	r1, #2
    1af8:	203d      	movs	r0, #61	; 0x3d
    1afa:	4b3d      	ldr	r3, [pc, #244]	; (1bf0 <system_init+0x18c>)
    1afc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1afe:	f04f 31ff 	mov.w	r1, #4294967295
    1b02:	203d      	movs	r0, #61	; 0x3d
    1b04:	4b3b      	ldr	r3, [pc, #236]	; (1bf4 <system_init+0x190>)
    1b06:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1b08:	2101      	movs	r1, #1
    1b0a:	203f      	movs	r0, #63	; 0x3f
    1b0c:	4b38      	ldr	r3, [pc, #224]	; (1bf0 <system_init+0x18c>)
    1b0e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1b10:	2101      	movs	r1, #1
    1b12:	203f      	movs	r0, #63	; 0x3f
    1b14:	4b38      	ldr	r3, [pc, #224]	; (1bf8 <system_init+0x194>)
    1b16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1b18:	f04f 31ff 	mov.w	r1, #4294967295
    1b1c:	203f      	movs	r0, #63	; 0x3f
    1b1e:	4b35      	ldr	r3, [pc, #212]	; (1bf4 <system_init+0x190>)
    1b20:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1b22:	2100      	movs	r1, #0
    1b24:	204d      	movs	r0, #77	; 0x4d
    1b26:	4b31      	ldr	r3, [pc, #196]	; (1bec <system_init+0x188>)
    1b28:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1b2a:	2102      	movs	r1, #2
    1b2c:	204d      	movs	r0, #77	; 0x4d
    1b2e:	4b30      	ldr	r3, [pc, #192]	; (1bf0 <system_init+0x18c>)
    1b30:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1b32:	f04f 31ff 	mov.w	r1, #4294967295
    1b36:	204d      	movs	r0, #77	; 0x4d
    1b38:	4b2e      	ldr	r3, [pc, #184]	; (1bf4 <system_init+0x190>)
    1b3a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1b3c:	2101      	movs	r1, #1
    1b3e:	204e      	movs	r0, #78	; 0x4e
    1b40:	4b2a      	ldr	r3, [pc, #168]	; (1bec <system_init+0x188>)
    1b42:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1b44:	2102      	movs	r1, #2
    1b46:	204e      	movs	r0, #78	; 0x4e
    1b48:	4b29      	ldr	r3, [pc, #164]	; (1bf0 <system_init+0x18c>)
    1b4a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1b4c:	f04f 31ff 	mov.w	r1, #4294967295
    1b50:	204e      	movs	r0, #78	; 0x4e
    1b52:	4b28      	ldr	r3, [pc, #160]	; (1bf4 <system_init+0x190>)
    1b54:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1b56:	2100      	movs	r1, #0
    1b58:	204f      	movs	r0, #79	; 0x4f
    1b5a:	4b24      	ldr	r3, [pc, #144]	; (1bec <system_init+0x188>)
    1b5c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1b5e:	2102      	movs	r1, #2
    1b60:	204f      	movs	r0, #79	; 0x4f
    1b62:	4b23      	ldr	r3, [pc, #140]	; (1bf0 <system_init+0x18c>)
    1b64:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1b66:	f04f 31ff 	mov.w	r1, #4294967295
    1b6a:	204f      	movs	r0, #79	; 0x4f
    1b6c:	4b21      	ldr	r3, [pc, #132]	; (1bf4 <system_init+0x190>)
    1b6e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1b70:	2100      	movs	r1, #0
    1b72:	2052      	movs	r0, #82	; 0x52
    1b74:	4b1d      	ldr	r3, [pc, #116]	; (1bec <system_init+0x188>)
    1b76:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1b78:	2102      	movs	r1, #2
    1b7a:	2052      	movs	r0, #82	; 0x52
    1b7c:	4b1c      	ldr	r3, [pc, #112]	; (1bf0 <system_init+0x18c>)
    1b7e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1b80:	f04f 31ff 	mov.w	r1, #4294967295
    1b84:	2052      	movs	r0, #82	; 0x52
    1b86:	4b1b      	ldr	r3, [pc, #108]	; (1bf4 <system_init+0x190>)
    1b88:	4798      	blx	r3

	CRC_CALC_init();
    1b8a:	4b1c      	ldr	r3, [pc, #112]	; (1bfc <system_init+0x198>)
    1b8c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1b8e:	4b1c      	ldr	r3, [pc, #112]	; (1c00 <system_init+0x19c>)
    1b90:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1b92:	4b1c      	ldr	r3, [pc, #112]	; (1c04 <system_init+0x1a0>)
    1b94:	4798      	blx	r3

	QSPI_N25Q256_init();
    1b96:	4b1c      	ldr	r3, [pc, #112]	; (1c08 <system_init+0x1a4>)
    1b98:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1b9a:	4b1c      	ldr	r3, [pc, #112]	; (1c0c <system_init+0x1a8>)
    1b9c:	4798      	blx	r3

	I2C_HEATERS_init();
    1b9e:	4b1c      	ldr	r3, [pc, #112]	; (1c10 <system_init+0x1ac>)
    1ba0:	4798      	blx	r3

	SPI_TEMP_init();
    1ba2:	4b1c      	ldr	r3, [pc, #112]	; (1c14 <system_init+0x1b0>)
    1ba4:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1ba6:	4b1c      	ldr	r3, [pc, #112]	; (1c18 <system_init+0x1b4>)
    1ba8:	4798      	blx	r3

	SPI_HI3593_init();
    1baa:	4b1c      	ldr	r3, [pc, #112]	; (1c1c <system_init+0x1b8>)
    1bac:	4798      	blx	r3

	I2C_FANS_init();
    1bae:	4b1c      	ldr	r3, [pc, #112]	; (1c20 <system_init+0x1bc>)
    1bb0:	4798      	blx	r3

	TIMER_USB_init();
    1bb2:	4b1c      	ldr	r3, [pc, #112]	; (1c24 <system_init+0x1c0>)
    1bb4:	4798      	blx	r3
	TIMER_ARINC_init();
    1bb6:	4b1c      	ldr	r3, [pc, #112]	; (1c28 <system_init+0x1c4>)
    1bb8:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1bba:	4b1c      	ldr	r3, [pc, #112]	; (1c2c <system_init+0x1c8>)
    1bbc:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1bbe:	4b1c      	ldr	r3, [pc, #112]	; (1c30 <system_init+0x1cc>)
    1bc0:	4798      	blx	r3
	TIMER_EVENT_init();
    1bc2:	4b1c      	ldr	r3, [pc, #112]	; (1c34 <system_init+0x1d0>)
    1bc4:	4798      	blx	r3
	LIVE_PULSE_init();
    1bc6:	4b1c      	ldr	r3, [pc, #112]	; (1c38 <system_init+0x1d4>)
    1bc8:	4798      	blx	r3

	TIMER_HVAC_init();
    1bca:	4b1c      	ldr	r3, [pc, #112]	; (1c3c <system_init+0x1d8>)
    1bcc:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1bce:	4b1c      	ldr	r3, [pc, #112]	; (1c40 <system_init+0x1dc>)
    1bd0:	4798      	blx	r3

	TIMER_CCU_init();
    1bd2:	4b1c      	ldr	r3, [pc, #112]	; (1c44 <system_init+0x1e0>)
    1bd4:	4798      	blx	r3

	CDCUSB_init();
    1bd6:	4b1c      	ldr	r3, [pc, #112]	; (1c48 <system_init+0x1e4>)
    1bd8:	4798      	blx	r3

	WATCHDOG_init();
    1bda:	4b1c      	ldr	r3, [pc, #112]	; (1c4c <system_init+0x1e8>)
    1bdc:	4798      	blx	r3
	CAN_CCU_init();
    1bde:	4b1c      	ldr	r3, [pc, #112]	; (1c50 <system_init+0x1ec>)
    1be0:	4798      	blx	r3
}
    1be2:	bf00      	nop
    1be4:	bd80      	pop	{r7, pc}
    1be6:	bf00      	nop
    1be8:	00000f69 	.word	0x00000f69
    1bec:	00000f31 	.word	0x00000f31
    1bf0:	00000ef9 	.word	0x00000ef9
    1bf4:	00000ed9 	.word	0x00000ed9
    1bf8:	00000ea5 	.word	0x00000ea5
    1bfc:	00000fc9 	.word	0x00000fc9
    1c00:	00000ff5 	.word	0x00000ff5
    1c04:	0000111d 	.word	0x0000111d
    1c08:	00001265 	.word	0x00001265
    1c0c:	000012a9 	.word	0x000012a9
    1c10:	00001339 	.word	0x00001339
    1c14:	00001405 	.word	0x00001405
    1c18:	0000149d 	.word	0x0000149d
    1c1c:	00001569 	.word	0x00001569
    1c20:	00001601 	.word	0x00001601
    1c24:	0000162d 	.word	0x0000162d
    1c28:	00001675 	.word	0x00001675
    1c2c:	000016bd 	.word	0x000016bd
    1c30:	00001705 	.word	0x00001705
    1c34:	0000174d 	.word	0x0000174d
    1c38:	000017cd 	.word	0x000017cd
    1c3c:	0000182d 	.word	0x0000182d
    1c40:	00001885 	.word	0x00001885
    1c44:	000018dd 	.word	0x000018dd
    1c48:	000019a1 	.word	0x000019a1
    1c4c:	000019d9 	.word	0x000019d9
    1c50:	00001a21 	.word	0x00001a21

00001c54 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1c54:	b580      	push	{r7, lr}
    1c56:	b084      	sub	sp, #16
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
    1c5c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1c5e:	2300      	movs	r3, #0
    1c60:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1c62:	687b      	ldr	r3, [r7, #4]
    1c64:	2b00      	cmp	r3, #0
    1c66:	bf14      	ite	ne
    1c68:	2301      	movne	r3, #1
    1c6a:	2300      	moveq	r3, #0
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1c72:	4911      	ldr	r1, [pc, #68]	; (1cb8 <calendar_init+0x64>)
    1c74:	4618      	mov	r0, r3
    1c76:	4b11      	ldr	r3, [pc, #68]	; (1cbc <calendar_init+0x68>)
    1c78:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	681a      	ldr	r2, [r3, #0]
    1c7e:	683b      	ldr	r3, [r7, #0]
    1c80:	429a      	cmp	r2, r3
    1c82:	d101      	bne.n	1c88 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1c84:	2300      	movs	r3, #0
    1c86:	e013      	b.n	1cb0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d002      	beq.n	1c96 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1c90:	f06f 0311 	mvn.w	r3, #17
    1c94:	e00c      	b.n	1cb0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	683a      	ldr	r2, [r7, #0]
    1c9a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1c9c:	687b      	ldr	r3, [r7, #4]
    1c9e:	4618      	mov	r0, r3
    1ca0:	4b07      	ldr	r3, [pc, #28]	; (1cc0 <calendar_init+0x6c>)
    1ca2:	4798      	blx	r3
    1ca4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1cac:	619a      	str	r2, [r3, #24]

	return ret;
    1cae:	68fb      	ldr	r3, [r7, #12]
}
    1cb0:	4618      	mov	r0, r3
    1cb2:	3710      	adds	r7, #16
    1cb4:	46bd      	mov	sp, r7
    1cb6:	bd80      	pop	{r7, pc}
    1cb8:	0000ec64 	.word	0x0000ec64
    1cbc:	000033ad 	.word	0x000033ad
    1cc0:	00005769 	.word	0x00005769

00001cc4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b084      	sub	sp, #16
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d004      	beq.n	1cde <can_async_init+0x1a>
    1cd4:	683b      	ldr	r3, [r7, #0]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d001      	beq.n	1cde <can_async_init+0x1a>
    1cda:	2301      	movs	r3, #1
    1cdc:	e000      	b.n	1ce0 <can_async_init+0x1c>
    1cde:	2300      	movs	r3, #0
    1ce0:	f003 0301 	and.w	r3, r3, #1
    1ce4:	b2db      	uxtb	r3, r3
    1ce6:	2241      	movs	r2, #65	; 0x41
    1ce8:	490e      	ldr	r1, [pc, #56]	; (1d24 <can_async_init+0x60>)
    1cea:	4618      	mov	r0, r3
    1cec:	4b0e      	ldr	r3, [pc, #56]	; (1d28 <can_async_init+0x64>)
    1cee:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	6839      	ldr	r1, [r7, #0]
    1cf4:	4618      	mov	r0, r3
    1cf6:	4b0d      	ldr	r3, [pc, #52]	; (1d2c <can_async_init+0x68>)
    1cf8:	4798      	blx	r3
    1cfa:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1cfc:	68fb      	ldr	r3, [r7, #12]
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d001      	beq.n	1d06 <can_async_init+0x42>
		return rc;
    1d02:	68fb      	ldr	r3, [r7, #12]
    1d04:	e009      	b.n	1d1a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	4a09      	ldr	r2, [pc, #36]	; (1d30 <can_async_init+0x6c>)
    1d0a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	4a09      	ldr	r2, [pc, #36]	; (1d34 <can_async_init+0x70>)
    1d10:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1d12:	687b      	ldr	r3, [r7, #4]
    1d14:	4a08      	ldr	r2, [pc, #32]	; (1d38 <can_async_init+0x74>)
    1d16:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1d18:	2300      	movs	r3, #0
}
    1d1a:	4618      	mov	r0, r3
    1d1c:	3710      	adds	r7, #16
    1d1e:	46bd      	mov	sp, r7
    1d20:	bd80      	pop	{r7, pc}
    1d22:	bf00      	nop
    1d24:	0000ec80 	.word	0x0000ec80
    1d28:	000033ad 	.word	0x000033ad
    1d2c:	00003909 	.word	0x00003909
    1d30:	00001d3d 	.word	0x00001d3d
    1d34:	00001d61 	.word	0x00001d61
    1d38:	00001d85 	.word	0x00001d85

00001d3c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1d3c:	b580      	push	{r7, lr}
    1d3e:	b084      	sub	sp, #16
    1d40:	af00      	add	r7, sp, #0
    1d42:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1d48:	68fb      	ldr	r3, [r7, #12]
    1d4a:	69db      	ldr	r3, [r3, #28]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d003      	beq.n	1d58 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1d50:	68fb      	ldr	r3, [r7, #12]
    1d52:	69db      	ldr	r3, [r3, #28]
    1d54:	68f8      	ldr	r0, [r7, #12]
    1d56:	4798      	blx	r3
	}
}
    1d58:	bf00      	nop
    1d5a:	3710      	adds	r7, #16
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bd80      	pop	{r7, pc}

00001d60 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	b084      	sub	sp, #16
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1d6c:	68fb      	ldr	r3, [r7, #12]
    1d6e:	6a1b      	ldr	r3, [r3, #32]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d003      	beq.n	1d7c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1d74:	68fb      	ldr	r3, [r7, #12]
    1d76:	6a1b      	ldr	r3, [r3, #32]
    1d78:	68f8      	ldr	r0, [r7, #12]
    1d7a:	4798      	blx	r3
	}
}
    1d7c:	bf00      	nop
    1d7e:	3710      	adds	r7, #16
    1d80:	46bd      	mov	sp, r7
    1d82:	bd80      	pop	{r7, pc}

00001d84 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1d84:	b580      	push	{r7, lr}
    1d86:	b084      	sub	sp, #16
    1d88:	af00      	add	r7, sp, #0
    1d8a:	6078      	str	r0, [r7, #4]
    1d8c:	460b      	mov	r3, r1
    1d8e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d005      	beq.n	1da8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1d9c:	68fb      	ldr	r3, [r7, #12]
    1d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1da0:	78fa      	ldrb	r2, [r7, #3]
    1da2:	4611      	mov	r1, r2
    1da4:	68f8      	ldr	r0, [r7, #12]
    1da6:	4798      	blx	r3
	}
}
    1da8:	bf00      	nop
    1daa:	3710      	adds	r7, #16
    1dac:	46bd      	mov	sp, r7
    1dae:	bd80      	pop	{r7, pc}

00001db0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1db0:	b580      	push	{r7, lr}
    1db2:	b082      	sub	sp, #8
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
    1db8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d004      	beq.n	1dca <crc_sync_init+0x1a>
    1dc0:	683b      	ldr	r3, [r7, #0]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d001      	beq.n	1dca <crc_sync_init+0x1a>
    1dc6:	2301      	movs	r3, #1
    1dc8:	e000      	b.n	1dcc <crc_sync_init+0x1c>
    1dca:	2300      	movs	r3, #0
    1dcc:	f003 0301 	and.w	r3, r3, #1
    1dd0:	b2db      	uxtb	r3, r3
    1dd2:	222b      	movs	r2, #43	; 0x2b
    1dd4:	4906      	ldr	r1, [pc, #24]	; (1df0 <crc_sync_init+0x40>)
    1dd6:	4618      	mov	r0, r3
    1dd8:	4b06      	ldr	r3, [pc, #24]	; (1df4 <crc_sync_init+0x44>)
    1dda:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1ddc:	687b      	ldr	r3, [r7, #4]
    1dde:	6839      	ldr	r1, [r7, #0]
    1de0:	4618      	mov	r0, r3
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <crc_sync_init+0x48>)
    1de4:	4798      	blx	r3
    1de6:	4603      	mov	r3, r0
}
    1de8:	4618      	mov	r0, r3
    1dea:	3708      	adds	r7, #8
    1dec:	46bd      	mov	sp, r7
    1dee:	bd80      	pop	{r7, pc}
    1df0:	0000ec9c 	.word	0x0000ec9c
    1df4:	000033ad 	.word	0x000033ad
    1df8:	00004009 	.word	0x00004009

00001dfc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1dfc:	b590      	push	{r4, r7, lr}
    1dfe:	b083      	sub	sp, #12
    1e00:	af00      	add	r7, sp, #0
    1e02:	4603      	mov	r3, r0
    1e04:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1e06:	4b07      	ldr	r3, [pc, #28]	; (1e24 <delay_us+0x28>)
    1e08:	681c      	ldr	r4, [r3, #0]
    1e0a:	88fb      	ldrh	r3, [r7, #6]
    1e0c:	4618      	mov	r0, r3
    1e0e:	4b06      	ldr	r3, [pc, #24]	; (1e28 <delay_us+0x2c>)
    1e10:	4798      	blx	r3
    1e12:	4603      	mov	r3, r0
    1e14:	4619      	mov	r1, r3
    1e16:	4620      	mov	r0, r4
    1e18:	4b04      	ldr	r3, [pc, #16]	; (1e2c <delay_us+0x30>)
    1e1a:	4798      	blx	r3
}
    1e1c:	bf00      	nop
    1e1e:	370c      	adds	r7, #12
    1e20:	46bd      	mov	sp, r7
    1e22:	bd90      	pop	{r4, r7, pc}
    1e24:	200007f8 	.word	0x200007f8
    1e28:	00003d5d 	.word	0x00003d5d
    1e2c:	00003ef1 	.word	0x00003ef1

00001e30 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1e30:	b590      	push	{r4, r7, lr}
    1e32:	b083      	sub	sp, #12
    1e34:	af00      	add	r7, sp, #0
    1e36:	4603      	mov	r3, r0
    1e38:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1e3a:	4b07      	ldr	r3, [pc, #28]	; (1e58 <delay_ms+0x28>)
    1e3c:	681c      	ldr	r4, [r3, #0]
    1e3e:	88fb      	ldrh	r3, [r7, #6]
    1e40:	4618      	mov	r0, r3
    1e42:	4b06      	ldr	r3, [pc, #24]	; (1e5c <delay_ms+0x2c>)
    1e44:	4798      	blx	r3
    1e46:	4603      	mov	r3, r0
    1e48:	4619      	mov	r1, r3
    1e4a:	4620      	mov	r0, r4
    1e4c:	4b04      	ldr	r3, [pc, #16]	; (1e60 <delay_ms+0x30>)
    1e4e:	4798      	blx	r3
}
    1e50:	bf00      	nop
    1e52:	370c      	adds	r7, #12
    1e54:	46bd      	mov	sp, r7
    1e56:	bd90      	pop	{r4, r7, pc}
    1e58:	200007f8 	.word	0x200007f8
    1e5c:	00003ec9 	.word	0x00003ec9
    1e60:	00003ef1 	.word	0x00003ef1

00001e64 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1e64:	b580      	push	{r7, lr}
    1e66:	af00      	add	r7, sp, #0
	return _event_system_init();
    1e68:	4b02      	ldr	r3, [pc, #8]	; (1e74 <event_system_init+0x10>)
    1e6a:	4798      	blx	r3
    1e6c:	4603      	mov	r3, r0
}
    1e6e:	4618      	mov	r0, r3
    1e70:	bd80      	pop	{r7, pc}
    1e72:	bf00      	nop
    1e74:	000047c5 	.word	0x000047c5

00001e78 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1e78:	b580      	push	{r7, lr}
    1e7a:	b082      	sub	sp, #8
    1e7c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e7e:	2300      	movs	r3, #0
    1e80:	80fb      	strh	r3, [r7, #6]
    1e82:	e00e      	b.n	1ea2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1e84:	88fb      	ldrh	r3, [r7, #6]
    1e86:	4a0c      	ldr	r2, [pc, #48]	; (1eb8 <ext_irq_init+0x40>)
    1e88:	00db      	lsls	r3, r3, #3
    1e8a:	4413      	add	r3, r2
    1e8c:	f04f 32ff 	mov.w	r2, #4294967295
    1e90:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1e92:	88fb      	ldrh	r3, [r7, #6]
    1e94:	4a08      	ldr	r2, [pc, #32]	; (1eb8 <ext_irq_init+0x40>)
    1e96:	2100      	movs	r1, #0
    1e98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e9c:	88fb      	ldrh	r3, [r7, #6]
    1e9e:	3301      	adds	r3, #1
    1ea0:	80fb      	strh	r3, [r7, #6]
    1ea2:	88fb      	ldrh	r3, [r7, #6]
    1ea4:	2b08      	cmp	r3, #8
    1ea6:	d9ed      	bls.n	1e84 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1ea8:	4804      	ldr	r0, [pc, #16]	; (1ebc <ext_irq_init+0x44>)
    1eaa:	4b05      	ldr	r3, [pc, #20]	; (1ec0 <ext_irq_init+0x48>)
    1eac:	4798      	blx	r3
    1eae:	4603      	mov	r3, r0
}
    1eb0:	4618      	mov	r0, r3
    1eb2:	3708      	adds	r7, #8
    1eb4:	46bd      	mov	sp, r7
    1eb6:	bd80      	pop	{r7, pc}
    1eb8:	200007fc 	.word	0x200007fc
    1ebc:	0000201d 	.word	0x0000201d
    1ec0:	00004349 	.word	0x00004349

00001ec4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b086      	sub	sp, #24
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
    1ecc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    1ece:	2300      	movs	r3, #0
    1ed0:	75fb      	strb	r3, [r7, #23]
    1ed2:	2300      	movs	r3, #0
    1ed4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    1ed6:	2300      	movs	r3, #0
    1ed8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    1eda:	e012      	b.n	1f02 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    1edc:	7dfb      	ldrb	r3, [r7, #23]
    1ede:	4a4d      	ldr	r2, [pc, #308]	; (2014 <ext_irq_register+0x150>)
    1ee0:	00db      	lsls	r3, r3, #3
    1ee2:	4413      	add	r3, r2
    1ee4:	685a      	ldr	r2, [r3, #4]
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	429a      	cmp	r2, r3
    1eea:	d107      	bne.n	1efc <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    1eec:	7dfb      	ldrb	r3, [r7, #23]
    1eee:	4949      	ldr	r1, [pc, #292]	; (2014 <ext_irq_register+0x150>)
    1ef0:	683a      	ldr	r2, [r7, #0]
    1ef2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    1ef6:	2301      	movs	r3, #1
    1ef8:	757b      	strb	r3, [r7, #21]
			break;
    1efa:	e005      	b.n	1f08 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1efc:	7dfb      	ldrb	r3, [r7, #23]
    1efe:	3301      	adds	r3, #1
    1f00:	75fb      	strb	r3, [r7, #23]
    1f02:	7dfb      	ldrb	r3, [r7, #23]
    1f04:	2b08      	cmp	r3, #8
    1f06:	d9e9      	bls.n	1edc <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    1f08:	683b      	ldr	r3, [r7, #0]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d10e      	bne.n	1f2c <ext_irq_register+0x68>
		if (!found) {
    1f0e:	7d7b      	ldrb	r3, [r7, #21]
    1f10:	f083 0301 	eor.w	r3, r3, #1
    1f14:	b2db      	uxtb	r3, r3
    1f16:	2b00      	cmp	r3, #0
    1f18:	d002      	beq.n	1f20 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    1f1a:	f06f 030c 	mvn.w	r3, #12
    1f1e:	e074      	b.n	200a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    1f20:	2100      	movs	r1, #0
    1f22:	6878      	ldr	r0, [r7, #4]
    1f24:	4b3c      	ldr	r3, [pc, #240]	; (2018 <ext_irq_register+0x154>)
    1f26:	4798      	blx	r3
    1f28:	4603      	mov	r3, r0
    1f2a:	e06e      	b.n	200a <ext_irq_register+0x146>
	}

	if (!found) {
    1f2c:	7d7b      	ldrb	r3, [r7, #21]
    1f2e:	f083 0301 	eor.w	r3, r3, #1
    1f32:	b2db      	uxtb	r3, r3
    1f34:	2b00      	cmp	r3, #0
    1f36:	d05a      	beq.n	1fee <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1f38:	2300      	movs	r3, #0
    1f3a:	75fb      	strb	r3, [r7, #23]
    1f3c:	e016      	b.n	1f6c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    1f3e:	7dfb      	ldrb	r3, [r7, #23]
    1f40:	4a34      	ldr	r2, [pc, #208]	; (2014 <ext_irq_register+0x150>)
    1f42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d10d      	bne.n	1f66 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    1f4a:	7dfb      	ldrb	r3, [r7, #23]
    1f4c:	4931      	ldr	r1, [pc, #196]	; (2014 <ext_irq_register+0x150>)
    1f4e:	683a      	ldr	r2, [r7, #0]
    1f50:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    1f54:	7dfb      	ldrb	r3, [r7, #23]
    1f56:	4a2f      	ldr	r2, [pc, #188]	; (2014 <ext_irq_register+0x150>)
    1f58:	00db      	lsls	r3, r3, #3
    1f5a:	4413      	add	r3, r2
    1f5c:	687a      	ldr	r2, [r7, #4]
    1f5e:	605a      	str	r2, [r3, #4]
				found           = true;
    1f60:	2301      	movs	r3, #1
    1f62:	757b      	strb	r3, [r7, #21]
				break;
    1f64:	e005      	b.n	1f72 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1f66:	7dfb      	ldrb	r3, [r7, #23]
    1f68:	3301      	adds	r3, #1
    1f6a:	75fb      	strb	r3, [r7, #23]
    1f6c:	7dfb      	ldrb	r3, [r7, #23]
    1f6e:	2b08      	cmp	r3, #8
    1f70:	d9e5      	bls.n	1f3e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1f72:	e036      	b.n	1fe2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1f74:	7dfb      	ldrb	r3, [r7, #23]
    1f76:	4a27      	ldr	r2, [pc, #156]	; (2014 <ext_irq_register+0x150>)
    1f78:	00db      	lsls	r3, r3, #3
    1f7a:	4413      	add	r3, r2
    1f7c:	685a      	ldr	r2, [r3, #4]
    1f7e:	7dbb      	ldrb	r3, [r7, #22]
    1f80:	4924      	ldr	r1, [pc, #144]	; (2014 <ext_irq_register+0x150>)
    1f82:	00db      	lsls	r3, r3, #3
    1f84:	440b      	add	r3, r1
    1f86:	685b      	ldr	r3, [r3, #4]
    1f88:	429a      	cmp	r2, r3
    1f8a:	d227      	bcs.n	1fdc <ext_irq_register+0x118>
    1f8c:	7dbb      	ldrb	r3, [r7, #22]
    1f8e:	4a21      	ldr	r2, [pc, #132]	; (2014 <ext_irq_register+0x150>)
    1f90:	00db      	lsls	r3, r3, #3
    1f92:	4413      	add	r3, r2
    1f94:	685b      	ldr	r3, [r3, #4]
    1f96:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f9a:	d01f      	beq.n	1fdc <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    1f9c:	7dbb      	ldrb	r3, [r7, #22]
    1f9e:	491d      	ldr	r1, [pc, #116]	; (2014 <ext_irq_register+0x150>)
    1fa0:	f107 020c 	add.w	r2, r7, #12
    1fa4:	00db      	lsls	r3, r3, #3
    1fa6:	440b      	add	r3, r1
    1fa8:	e893 0003 	ldmia.w	r3, {r0, r1}
    1fac:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    1fb0:	7dbb      	ldrb	r3, [r7, #22]
    1fb2:	7dfa      	ldrb	r2, [r7, #23]
    1fb4:	4817      	ldr	r0, [pc, #92]	; (2014 <ext_irq_register+0x150>)
    1fb6:	4917      	ldr	r1, [pc, #92]	; (2014 <ext_irq_register+0x150>)
    1fb8:	00db      	lsls	r3, r3, #3
    1fba:	4403      	add	r3, r0
    1fbc:	00d2      	lsls	r2, r2, #3
    1fbe:	440a      	add	r2, r1
    1fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
    1fc4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    1fc8:	7dfb      	ldrb	r3, [r7, #23]
    1fca:	4a12      	ldr	r2, [pc, #72]	; (2014 <ext_irq_register+0x150>)
    1fcc:	00db      	lsls	r3, r3, #3
    1fce:	4413      	add	r3, r2
    1fd0:	f107 020c 	add.w	r2, r7, #12
    1fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
    1fd8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1fdc:	7dbb      	ldrb	r3, [r7, #22]
    1fde:	3301      	adds	r3, #1
    1fe0:	75bb      	strb	r3, [r7, #22]
    1fe2:	7dbb      	ldrb	r3, [r7, #22]
    1fe4:	2b08      	cmp	r3, #8
    1fe6:	d802      	bhi.n	1fee <ext_irq_register+0x12a>
    1fe8:	7dfb      	ldrb	r3, [r7, #23]
    1fea:	2b08      	cmp	r3, #8
    1fec:	d9c2      	bls.n	1f74 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    1fee:	7d7b      	ldrb	r3, [r7, #21]
    1ff0:	f083 0301 	eor.w	r3, r3, #1
    1ff4:	b2db      	uxtb	r3, r3
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d002      	beq.n	2000 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    1ffa:	f06f 030c 	mvn.w	r3, #12
    1ffe:	e004      	b.n	200a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2000:	2101      	movs	r1, #1
    2002:	6878      	ldr	r0, [r7, #4]
    2004:	4b04      	ldr	r3, [pc, #16]	; (2018 <ext_irq_register+0x154>)
    2006:	4798      	blx	r3
    2008:	4603      	mov	r3, r0
}
    200a:	4618      	mov	r0, r3
    200c:	3718      	adds	r7, #24
    200e:	46bd      	mov	sp, r7
    2010:	bd80      	pop	{r7, pc}
    2012:	bf00      	nop
    2014:	200007fc 	.word	0x200007fc
    2018:	000044dd 	.word	0x000044dd

0000201c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    201c:	b580      	push	{r7, lr}
    201e:	b084      	sub	sp, #16
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2024:	2300      	movs	r3, #0
    2026:	73fb      	strb	r3, [r7, #15]
    2028:	2309      	movs	r3, #9
    202a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    202c:	e02a      	b.n	2084 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    202e:	7bba      	ldrb	r2, [r7, #14]
    2030:	7bfb      	ldrb	r3, [r7, #15]
    2032:	4413      	add	r3, r2
    2034:	105b      	asrs	r3, r3, #1
    2036:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2038:	7b7b      	ldrb	r3, [r7, #13]
    203a:	2b08      	cmp	r3, #8
    203c:	d827      	bhi.n	208e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    203e:	7b7b      	ldrb	r3, [r7, #13]
    2040:	4a16      	ldr	r2, [pc, #88]	; (209c <process_ext_irq+0x80>)
    2042:	00db      	lsls	r3, r3, #3
    2044:	4413      	add	r3, r2
    2046:	685a      	ldr	r2, [r3, #4]
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	429a      	cmp	r2, r3
    204c:	d10b      	bne.n	2066 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    204e:	7b7b      	ldrb	r3, [r7, #13]
    2050:	4a12      	ldr	r2, [pc, #72]	; (209c <process_ext_irq+0x80>)
    2052:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2056:	2b00      	cmp	r3, #0
    2058:	d01b      	beq.n	2092 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    205a:	7b7b      	ldrb	r3, [r7, #13]
    205c:	4a0f      	ldr	r2, [pc, #60]	; (209c <process_ext_irq+0x80>)
    205e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2062:	4798      	blx	r3
			}
			return;
    2064:	e015      	b.n	2092 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2066:	7b7b      	ldrb	r3, [r7, #13]
    2068:	4a0c      	ldr	r2, [pc, #48]	; (209c <process_ext_irq+0x80>)
    206a:	00db      	lsls	r3, r3, #3
    206c:	4413      	add	r3, r2
    206e:	685a      	ldr	r2, [r3, #4]
    2070:	687b      	ldr	r3, [r7, #4]
    2072:	429a      	cmp	r2, r3
    2074:	d203      	bcs.n	207e <process_ext_irq+0x62>
			lower = middle + 1;
    2076:	7b7b      	ldrb	r3, [r7, #13]
    2078:	3301      	adds	r3, #1
    207a:	73fb      	strb	r3, [r7, #15]
    207c:	e002      	b.n	2084 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    207e:	7b7b      	ldrb	r3, [r7, #13]
    2080:	3b01      	subs	r3, #1
    2082:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2084:	7bba      	ldrb	r2, [r7, #14]
    2086:	7bfb      	ldrb	r3, [r7, #15]
    2088:	429a      	cmp	r2, r3
    208a:	d2d0      	bcs.n	202e <process_ext_irq+0x12>
    208c:	e002      	b.n	2094 <process_ext_irq+0x78>
			return;
    208e:	bf00      	nop
    2090:	e000      	b.n	2094 <process_ext_irq+0x78>
			return;
    2092:	bf00      	nop
		}
	}
}
    2094:	3710      	adds	r7, #16
    2096:	46bd      	mov	sp, r7
    2098:	bd80      	pop	{r7, pc}
    209a:	bf00      	nop
    209c:	200007fc 	.word	0x200007fc

000020a0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b08a      	sub	sp, #40	; 0x28
    20a4:	af00      	add	r7, sp, #0
    20a6:	60f8      	str	r0, [r7, #12]
    20a8:	60b9      	str	r1, [r7, #8]
    20aa:	4613      	mov	r3, r2
    20ac:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    20ae:	68fb      	ldr	r3, [r7, #12]
    20b0:	3b14      	subs	r3, #20
    20b2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    20b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20b6:	8b9b      	ldrh	r3, [r3, #28]
    20b8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    20ba:	88fb      	ldrh	r3, [r7, #6]
    20bc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    20be:	f248 0301 	movw	r3, #32769	; 0x8001
    20c2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    20c4:	68bb      	ldr	r3, [r7, #8]
    20c6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    20c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20ca:	f107 0214 	add.w	r2, r7, #20
    20ce:	4611      	mov	r1, r2
    20d0:	4618      	mov	r0, r3
    20d2:	4b06      	ldr	r3, [pc, #24]	; (20ec <i2c_m_sync_read+0x4c>)
    20d4:	4798      	blx	r3
    20d6:	6238      	str	r0, [r7, #32]

	if (ret) {
    20d8:	6a3b      	ldr	r3, [r7, #32]
    20da:	2b00      	cmp	r3, #0
    20dc:	d001      	beq.n	20e2 <i2c_m_sync_read+0x42>
		return ret;
    20de:	6a3b      	ldr	r3, [r7, #32]
    20e0:	e000      	b.n	20e4 <i2c_m_sync_read+0x44>
	}

	return n;
    20e2:	88fb      	ldrh	r3, [r7, #6]
}
    20e4:	4618      	mov	r0, r3
    20e6:	3728      	adds	r7, #40	; 0x28
    20e8:	46bd      	mov	sp, r7
    20ea:	bd80      	pop	{r7, pc}
    20ec:	000063c9 	.word	0x000063c9

000020f0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b08a      	sub	sp, #40	; 0x28
    20f4:	af00      	add	r7, sp, #0
    20f6:	60f8      	str	r0, [r7, #12]
    20f8:	60b9      	str	r1, [r7, #8]
    20fa:	4613      	mov	r3, r2
    20fc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    20fe:	68fb      	ldr	r3, [r7, #12]
    2100:	3b14      	subs	r3, #20
    2102:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2106:	8b9b      	ldrh	r3, [r3, #28]
    2108:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    210a:	88fb      	ldrh	r3, [r7, #6]
    210c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    210e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2112:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2114:	68bb      	ldr	r3, [r7, #8]
    2116:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    211a:	f107 0214 	add.w	r2, r7, #20
    211e:	4611      	mov	r1, r2
    2120:	4618      	mov	r0, r3
    2122:	4b06      	ldr	r3, [pc, #24]	; (213c <i2c_m_sync_write+0x4c>)
    2124:	4798      	blx	r3
    2126:	6238      	str	r0, [r7, #32]

	if (ret) {
    2128:	6a3b      	ldr	r3, [r7, #32]
    212a:	2b00      	cmp	r3, #0
    212c:	d001      	beq.n	2132 <i2c_m_sync_write+0x42>
		return ret;
    212e:	6a3b      	ldr	r3, [r7, #32]
    2130:	e000      	b.n	2134 <i2c_m_sync_write+0x44>
	}

	return n;
    2132:	88fb      	ldrh	r3, [r7, #6]
}
    2134:	4618      	mov	r0, r3
    2136:	3728      	adds	r7, #40	; 0x28
    2138:	46bd      	mov	sp, r7
    213a:	bd80      	pop	{r7, pc}
    213c:	000063c9 	.word	0x000063c9

00002140 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2140:	b580      	push	{r7, lr}
    2142:	b084      	sub	sp, #16
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
    2148:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	2b00      	cmp	r3, #0
    214e:	bf14      	ite	ne
    2150:	2301      	movne	r3, #1
    2152:	2300      	moveq	r3, #0
    2154:	b2db      	uxtb	r3, r3
    2156:	225e      	movs	r2, #94	; 0x5e
    2158:	490c      	ldr	r1, [pc, #48]	; (218c <i2c_m_sync_init+0x4c>)
    215a:	4618      	mov	r0, r3
    215c:	4b0c      	ldr	r3, [pc, #48]	; (2190 <i2c_m_sync_init+0x50>)
    215e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	6839      	ldr	r1, [r7, #0]
    2164:	4618      	mov	r0, r3
    2166:	4b0b      	ldr	r3, [pc, #44]	; (2194 <i2c_m_sync_init+0x54>)
    2168:	4798      	blx	r3
    216a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    216c:	68fb      	ldr	r3, [r7, #12]
    216e:	2b00      	cmp	r3, #0
    2170:	d001      	beq.n	2176 <i2c_m_sync_init+0x36>
		return init_status;
    2172:	68fb      	ldr	r3, [r7, #12]
    2174:	e006      	b.n	2184 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4a07      	ldr	r2, [pc, #28]	; (2198 <i2c_m_sync_init+0x58>)
    217a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	4a07      	ldr	r2, [pc, #28]	; (219c <i2c_m_sync_init+0x5c>)
    2180:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2182:	2300      	movs	r3, #0
}
    2184:	4618      	mov	r0, r3
    2186:	3710      	adds	r7, #16
    2188:	46bd      	mov	sp, r7
    218a:	bd80      	pop	{r7, pc}
    218c:	0000ecb8 	.word	0x0000ecb8
    2190:	000033ad 	.word	0x000033ad
    2194:	000061c5 	.word	0x000061c5
    2198:	000020a1 	.word	0x000020a1
    219c:	000020f1 	.word	0x000020f1

000021a0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    21a0:	b580      	push	{r7, lr}
    21a2:	b082      	sub	sp, #8
    21a4:	af00      	add	r7, sp, #0
    21a6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    21a8:	687b      	ldr	r3, [r7, #4]
    21aa:	4618      	mov	r0, r3
    21ac:	4b03      	ldr	r3, [pc, #12]	; (21bc <i2c_m_sync_enable+0x1c>)
    21ae:	4798      	blx	r3
    21b0:	4603      	mov	r3, r0
}
    21b2:	4618      	mov	r0, r3
    21b4:	3708      	adds	r7, #8
    21b6:	46bd      	mov	sp, r7
    21b8:	bd80      	pop	{r7, pc}
    21ba:	bf00      	nop
    21bc:	0000620d 	.word	0x0000620d

000021c0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    21c0:	b480      	push	{r7}
    21c2:	b085      	sub	sp, #20
    21c4:	af00      	add	r7, sp, #0
    21c6:	60f8      	str	r0, [r7, #12]
    21c8:	460b      	mov	r3, r1
    21ca:	607a      	str	r2, [r7, #4]
    21cc:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    21ce:	897b      	ldrh	r3, [r7, #10]
    21d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    21d4:	b21a      	sxth	r2, r3
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	b21b      	sxth	r3, r3
    21da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    21de:	b21b      	sxth	r3, r3
    21e0:	4313      	orrs	r3, r2
    21e2:	b21b      	sxth	r3, r3
    21e4:	b29a      	uxth	r2, r3
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	839a      	strh	r2, [r3, #28]
    21ea:	68fb      	ldr	r3, [r7, #12]
    21ec:	8b9b      	ldrh	r3, [r3, #28]
}
    21ee:	4618      	mov	r0, r3
    21f0:	3714      	adds	r7, #20
    21f2:	46bd      	mov	sp, r7
    21f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    21f8:	4770      	bx	lr

000021fa <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    21fa:	b480      	push	{r7}
    21fc:	b083      	sub	sp, #12
    21fe:	af00      	add	r7, sp, #0
    2200:	6078      	str	r0, [r7, #4]
    2202:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	f103 0214 	add.w	r2, r3, #20
    220a:	683b      	ldr	r3, [r7, #0]
    220c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    220e:	2300      	movs	r3, #0
}
    2210:	4618      	mov	r0, r3
    2212:	370c      	adds	r7, #12
    2214:	46bd      	mov	sp, r7
    2216:	f85d 7b04 	ldr.w	r7, [sp], #4
    221a:	4770      	bx	lr

0000221c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    221c:	b580      	push	{r7, lr}
    221e:	b084      	sub	sp, #16
    2220:	af00      	add	r7, sp, #0
    2222:	60f8      	str	r0, [r7, #12]
    2224:	60b9      	str	r1, [r7, #8]
    2226:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2228:	68fb      	ldr	r3, [r7, #12]
    222a:	2b00      	cmp	r3, #0
    222c:	d004      	beq.n	2238 <pwm_init+0x1c>
    222e:	68bb      	ldr	r3, [r7, #8]
    2230:	2b00      	cmp	r3, #0
    2232:	d001      	beq.n	2238 <pwm_init+0x1c>
    2234:	2301      	movs	r3, #1
    2236:	e000      	b.n	223a <pwm_init+0x1e>
    2238:	2300      	movs	r3, #0
    223a:	f003 0301 	and.w	r3, r3, #1
    223e:	b2db      	uxtb	r3, r3
    2240:	2233      	movs	r2, #51	; 0x33
    2242:	490a      	ldr	r1, [pc, #40]	; (226c <pwm_init+0x50>)
    2244:	4618      	mov	r0, r3
    2246:	4b0a      	ldr	r3, [pc, #40]	; (2270 <pwm_init+0x54>)
    2248:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    224a:	68fb      	ldr	r3, [r7, #12]
    224c:	68b9      	ldr	r1, [r7, #8]
    224e:	4618      	mov	r0, r3
    2250:	4b08      	ldr	r3, [pc, #32]	; (2274 <pwm_init+0x58>)
    2252:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2254:	68fb      	ldr	r3, [r7, #12]
    2256:	4a08      	ldr	r2, [pc, #32]	; (2278 <pwm_init+0x5c>)
    2258:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    225a:	68fb      	ldr	r3, [r7, #12]
    225c:	4a07      	ldr	r2, [pc, #28]	; (227c <pwm_init+0x60>)
    225e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2260:	2300      	movs	r3, #0
}
    2262:	4618      	mov	r0, r3
    2264:	3710      	adds	r7, #16
    2266:	46bd      	mov	sp, r7
    2268:	bd80      	pop	{r7, pc}
    226a:	bf00      	nop
    226c:	0000ecd4 	.word	0x0000ecd4
    2270:	000033ad 	.word	0x000033ad
    2274:	00007989 	.word	0x00007989
    2278:	00002281 	.word	0x00002281
    227c:	000022a5 	.word	0x000022a5

00002280 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2280:	b580      	push	{r7, lr}
    2282:	b084      	sub	sp, #16
    2284:	af00      	add	r7, sp, #0
    2286:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	695b      	ldr	r3, [r3, #20]
    2290:	2b00      	cmp	r3, #0
    2292:	d003      	beq.n	229c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	695b      	ldr	r3, [r3, #20]
    2298:	68f8      	ldr	r0, [r7, #12]
    229a:	4798      	blx	r3
	}
}
    229c:	bf00      	nop
    229e:	3710      	adds	r7, #16
    22a0:	46bd      	mov	sp, r7
    22a2:	bd80      	pop	{r7, pc}

000022a4 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    22a4:	b580      	push	{r7, lr}
    22a6:	b084      	sub	sp, #16
    22a8:	af00      	add	r7, sp, #0
    22aa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    22b0:	68fb      	ldr	r3, [r7, #12]
    22b2:	699b      	ldr	r3, [r3, #24]
    22b4:	2b00      	cmp	r3, #0
    22b6:	d003      	beq.n	22c0 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    22b8:	68fb      	ldr	r3, [r7, #12]
    22ba:	699b      	ldr	r3, [r3, #24]
    22bc:	68f8      	ldr	r0, [r7, #12]
    22be:	4798      	blx	r3
	}
}
    22c0:	bf00      	nop
    22c2:	3710      	adds	r7, #16
    22c4:	46bd      	mov	sp, r7
    22c6:	bd80      	pop	{r7, pc}

000022c8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b082      	sub	sp, #8
    22cc:	af00      	add	r7, sp, #0
    22ce:	6078      	str	r0, [r7, #4]
    22d0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d004      	beq.n	22e2 <qspi_sync_init+0x1a>
    22d8:	683b      	ldr	r3, [r7, #0]
    22da:	2b00      	cmp	r3, #0
    22dc:	d001      	beq.n	22e2 <qspi_sync_init+0x1a>
    22de:	2301      	movs	r3, #1
    22e0:	e000      	b.n	22e4 <qspi_sync_init+0x1c>
    22e2:	2300      	movs	r3, #0
    22e4:	f003 0301 	and.w	r3, r3, #1
    22e8:	b2db      	uxtb	r3, r3
    22ea:	2231      	movs	r2, #49	; 0x31
    22ec:	4906      	ldr	r1, [pc, #24]	; (2308 <qspi_sync_init+0x40>)
    22ee:	4618      	mov	r0, r3
    22f0:	4b06      	ldr	r3, [pc, #24]	; (230c <qspi_sync_init+0x44>)
    22f2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	6839      	ldr	r1, [r7, #0]
    22f8:	4618      	mov	r0, r3
    22fa:	4b05      	ldr	r3, [pc, #20]	; (2310 <qspi_sync_init+0x48>)
    22fc:	4798      	blx	r3
    22fe:	4603      	mov	r3, r0
}
    2300:	4618      	mov	r0, r3
    2302:	3708      	adds	r7, #8
    2304:	46bd      	mov	sp, r7
    2306:	bd80      	pop	{r7, pc}
    2308:	0000ecec 	.word	0x0000ecec
    230c:	000033ad 	.word	0x000033ad
    2310:	000053a5 	.word	0x000053a5

00002314 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2314:	b580      	push	{r7, lr}
    2316:	b082      	sub	sp, #8
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	2b00      	cmp	r3, #0
    2320:	bf14      	ite	ne
    2322:	2301      	movne	r3, #1
    2324:	2300      	moveq	r3, #0
    2326:	b2db      	uxtb	r3, r3
    2328:	223f      	movs	r2, #63	; 0x3f
    232a:	4906      	ldr	r1, [pc, #24]	; (2344 <qspi_sync_enable+0x30>)
    232c:	4618      	mov	r0, r3
    232e:	4b06      	ldr	r3, [pc, #24]	; (2348 <qspi_sync_enable+0x34>)
    2330:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	4618      	mov	r0, r3
    2336:	4b05      	ldr	r3, [pc, #20]	; (234c <qspi_sync_enable+0x38>)
    2338:	4798      	blx	r3
    233a:	4603      	mov	r3, r0
}
    233c:	4618      	mov	r0, r3
    233e:	3708      	adds	r7, #8
    2340:	46bd      	mov	sp, r7
    2342:	bd80      	pop	{r7, pc}
    2344:	0000ecec 	.word	0x0000ecec
    2348:	000033ad 	.word	0x000033ad
    234c:	00005419 	.word	0x00005419

00002350 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2350:	b580      	push	{r7, lr}
    2352:	b082      	sub	sp, #8
    2354:	af00      	add	r7, sp, #0
    2356:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	2b00      	cmp	r3, #0
    235c:	bf14      	ite	ne
    235e:	2301      	movne	r3, #1
    2360:	2300      	moveq	r3, #0
    2362:	b2db      	uxtb	r3, r3
    2364:	2246      	movs	r2, #70	; 0x46
    2366:	4906      	ldr	r1, [pc, #24]	; (2380 <qspi_sync_disable+0x30>)
    2368:	4618      	mov	r0, r3
    236a:	4b06      	ldr	r3, [pc, #24]	; (2384 <qspi_sync_disable+0x34>)
    236c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	4618      	mov	r0, r3
    2372:	4b05      	ldr	r3, [pc, #20]	; (2388 <qspi_sync_disable+0x38>)
    2374:	4798      	blx	r3
    2376:	4603      	mov	r3, r0
}
    2378:	4618      	mov	r0, r3
    237a:	3708      	adds	r7, #8
    237c:	46bd      	mov	sp, r7
    237e:	bd80      	pop	{r7, pc}
    2380:	0000ecec 	.word	0x0000ecec
    2384:	000033ad 	.word	0x000033ad
    2388:	0000543d 	.word	0x0000543d

0000238c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    238c:	b580      	push	{r7, lr}
    238e:	b082      	sub	sp, #8
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
    2394:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	2b00      	cmp	r3, #0
    239a:	d004      	beq.n	23a6 <qspi_sync_serial_run_command+0x1a>
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	2b00      	cmp	r3, #0
    23a0:	d001      	beq.n	23a6 <qspi_sync_serial_run_command+0x1a>
    23a2:	2301      	movs	r3, #1
    23a4:	e000      	b.n	23a8 <qspi_sync_serial_run_command+0x1c>
    23a6:	2300      	movs	r3, #0
    23a8:	f003 0301 	and.w	r3, r3, #1
    23ac:	b2db      	uxtb	r3, r3
    23ae:	224d      	movs	r2, #77	; 0x4d
    23b0:	4906      	ldr	r1, [pc, #24]	; (23cc <qspi_sync_serial_run_command+0x40>)
    23b2:	4618      	mov	r0, r3
    23b4:	4b06      	ldr	r3, [pc, #24]	; (23d0 <qspi_sync_serial_run_command+0x44>)
    23b6:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	6839      	ldr	r1, [r7, #0]
    23bc:	4618      	mov	r0, r3
    23be:	4b05      	ldr	r3, [pc, #20]	; (23d4 <qspi_sync_serial_run_command+0x48>)
    23c0:	4798      	blx	r3
    23c2:	4603      	mov	r3, r0
}
    23c4:	4618      	mov	r0, r3
    23c6:	3708      	adds	r7, #8
    23c8:	46bd      	mov	sp, r7
    23ca:	bd80      	pop	{r7, pc}
    23cc:	0000ecec 	.word	0x0000ecec
    23d0:	000033ad 	.word	0x000033ad
    23d4:	00005589 	.word	0x00005589

000023d8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    23d8:	b580      	push	{r7, lr}
    23da:	b084      	sub	sp, #16
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
    23e0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    23e2:	2300      	movs	r3, #0
    23e4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d004      	beq.n	23f6 <spi_m_sync_init+0x1e>
    23ec:	683b      	ldr	r3, [r7, #0]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d001      	beq.n	23f6 <spi_m_sync_init+0x1e>
    23f2:	2301      	movs	r3, #1
    23f4:	e000      	b.n	23f8 <spi_m_sync_init+0x20>
    23f6:	2300      	movs	r3, #0
    23f8:	f003 0301 	and.w	r3, r3, #1
    23fc:	b2db      	uxtb	r3, r3
    23fe:	2240      	movs	r2, #64	; 0x40
    2400:	4910      	ldr	r1, [pc, #64]	; (2444 <spi_m_sync_init+0x6c>)
    2402:	4618      	mov	r0, r3
    2404:	4b10      	ldr	r3, [pc, #64]	; (2448 <spi_m_sync_init+0x70>)
    2406:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	683a      	ldr	r2, [r7, #0]
    240c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	3304      	adds	r3, #4
    2412:	6839      	ldr	r1, [r7, #0]
    2414:	4618      	mov	r0, r3
    2416:	4b0d      	ldr	r3, [pc, #52]	; (244c <spi_m_sync_init+0x74>)
    2418:	4798      	blx	r3
    241a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    241c:	68fb      	ldr	r3, [r7, #12]
    241e:	2b00      	cmp	r3, #0
    2420:	da01      	bge.n	2426 <spi_m_sync_init+0x4e>
		return rc;
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	e00a      	b.n	243c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    242c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    242e:	687b      	ldr	r3, [r7, #4]
    2430:	4a07      	ldr	r2, [pc, #28]	; (2450 <spi_m_sync_init+0x78>)
    2432:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	4a07      	ldr	r2, [pc, #28]	; (2454 <spi_m_sync_init+0x7c>)
    2438:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    243a:	2300      	movs	r3, #0
}
    243c:	4618      	mov	r0, r3
    243e:	3710      	adds	r7, #16
    2440:	46bd      	mov	sp, r7
    2442:	bd80      	pop	{r7, pc}
    2444:	0000ed08 	.word	0x0000ed08
    2448:	000033ad 	.word	0x000033ad
    244c:	0000685d 	.word	0x0000685d
    2450:	00002459 	.word	0x00002459
    2454:	000024b1 	.word	0x000024b1

00002458 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2458:	b580      	push	{r7, lr}
    245a:	b088      	sub	sp, #32
    245c:	af00      	add	r7, sp, #0
    245e:	60f8      	str	r0, [r7, #12]
    2460:	60b9      	str	r1, [r7, #8]
    2462:	4613      	mov	r3, r2
    2464:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2466:	68fb      	ldr	r3, [r7, #12]
    2468:	2b00      	cmp	r3, #0
    246a:	bf14      	ite	ne
    246c:	2301      	movne	r3, #1
    246e:	2300      	moveq	r3, #0
    2470:	b2db      	uxtb	r3, r3
    2472:	2287      	movs	r2, #135	; 0x87
    2474:	490b      	ldr	r1, [pc, #44]	; (24a4 <_spi_m_sync_io_read+0x4c>)
    2476:	4618      	mov	r0, r3
    2478:	4b0b      	ldr	r3, [pc, #44]	; (24a8 <_spi_m_sync_io_read+0x50>)
    247a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    247c:	68fb      	ldr	r3, [r7, #12]
    247e:	3b0c      	subs	r3, #12
    2480:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2482:	68bb      	ldr	r3, [r7, #8]
    2484:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2486:	2300      	movs	r3, #0
    2488:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    248a:	88fb      	ldrh	r3, [r7, #6]
    248c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    248e:	f107 0310 	add.w	r3, r7, #16
    2492:	4619      	mov	r1, r3
    2494:	69f8      	ldr	r0, [r7, #28]
    2496:	4b05      	ldr	r3, [pc, #20]	; (24ac <_spi_m_sync_io_read+0x54>)
    2498:	4798      	blx	r3
    249a:	4603      	mov	r3, r0
}
    249c:	4618      	mov	r0, r3
    249e:	3720      	adds	r7, #32
    24a0:	46bd      	mov	sp, r7
    24a2:	bd80      	pop	{r7, pc}
    24a4:	0000ed08 	.word	0x0000ed08
    24a8:	000033ad 	.word	0x000033ad
    24ac:	00002509 	.word	0x00002509

000024b0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    24b0:	b580      	push	{r7, lr}
    24b2:	b088      	sub	sp, #32
    24b4:	af00      	add	r7, sp, #0
    24b6:	60f8      	str	r0, [r7, #12]
    24b8:	60b9      	str	r1, [r7, #8]
    24ba:	4613      	mov	r3, r2
    24bc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    24be:	68fb      	ldr	r3, [r7, #12]
    24c0:	2b00      	cmp	r3, #0
    24c2:	bf14      	ite	ne
    24c4:	2301      	movne	r3, #1
    24c6:	2300      	moveq	r3, #0
    24c8:	b2db      	uxtb	r3, r3
    24ca:	22a3      	movs	r2, #163	; 0xa3
    24cc:	490b      	ldr	r1, [pc, #44]	; (24fc <_spi_m_sync_io_write+0x4c>)
    24ce:	4618      	mov	r0, r3
    24d0:	4b0b      	ldr	r3, [pc, #44]	; (2500 <_spi_m_sync_io_write+0x50>)
    24d2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    24d4:	68fb      	ldr	r3, [r7, #12]
    24d6:	3b0c      	subs	r3, #12
    24d8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    24da:	2300      	movs	r3, #0
    24dc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    24de:	68bb      	ldr	r3, [r7, #8]
    24e0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    24e2:	88fb      	ldrh	r3, [r7, #6]
    24e4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    24e6:	f107 0310 	add.w	r3, r7, #16
    24ea:	4619      	mov	r1, r3
    24ec:	69f8      	ldr	r0, [r7, #28]
    24ee:	4b05      	ldr	r3, [pc, #20]	; (2504 <_spi_m_sync_io_write+0x54>)
    24f0:	4798      	blx	r3
    24f2:	4603      	mov	r3, r0
}
    24f4:	4618      	mov	r0, r3
    24f6:	3720      	adds	r7, #32
    24f8:	46bd      	mov	sp, r7
    24fa:	bd80      	pop	{r7, pc}
    24fc:	0000ed08 	.word	0x0000ed08
    2500:	000033ad 	.word	0x000033ad
    2504:	00002509 	.word	0x00002509

00002508 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2508:	b580      	push	{r7, lr}
    250a:	b086      	sub	sp, #24
    250c:	af00      	add	r7, sp, #0
    250e:	6078      	str	r0, [r7, #4]
    2510:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	2b00      	cmp	r3, #0
    2516:	d004      	beq.n	2522 <spi_m_sync_transfer+0x1a>
    2518:	683b      	ldr	r3, [r7, #0]
    251a:	2b00      	cmp	r3, #0
    251c:	d001      	beq.n	2522 <spi_m_sync_transfer+0x1a>
    251e:	2301      	movs	r3, #1
    2520:	e000      	b.n	2524 <spi_m_sync_transfer+0x1c>
    2522:	2300      	movs	r3, #0
    2524:	f003 0301 	and.w	r3, r3, #1
    2528:	b2db      	uxtb	r3, r3
    252a:	22b3      	movs	r2, #179	; 0xb3
    252c:	490c      	ldr	r1, [pc, #48]	; (2560 <spi_m_sync_transfer+0x58>)
    252e:	4618      	mov	r0, r3
    2530:	4b0c      	ldr	r3, [pc, #48]	; (2564 <spi_m_sync_transfer+0x5c>)
    2532:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2534:	683b      	ldr	r3, [r7, #0]
    2536:	681b      	ldr	r3, [r3, #0]
    2538:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    253a:	683b      	ldr	r3, [r7, #0]
    253c:	685b      	ldr	r3, [r3, #4]
    253e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2540:	683b      	ldr	r3, [r7, #0]
    2542:	689b      	ldr	r3, [r3, #8]
    2544:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	3304      	adds	r3, #4
    254a:	f107 020c 	add.w	r2, r7, #12
    254e:	4611      	mov	r1, r2
    2550:	4618      	mov	r0, r3
    2552:	4b05      	ldr	r3, [pc, #20]	; (2568 <spi_m_sync_transfer+0x60>)
    2554:	4798      	blx	r3
    2556:	4603      	mov	r3, r0
}
    2558:	4618      	mov	r0, r3
    255a:	3718      	adds	r7, #24
    255c:	46bd      	mov	sp, r7
    255e:	bd80      	pop	{r7, pc}
    2560:	0000ed08 	.word	0x0000ed08
    2564:	000033ad 	.word	0x000033ad
    2568:	00006abd 	.word	0x00006abd

0000256c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    256c:	b480      	push	{r7}
    256e:	b083      	sub	sp, #12
    2570:	af00      	add	r7, sp, #0
    2572:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	681b      	ldr	r3, [r3, #0]
}
    2578:	4618      	mov	r0, r3
    257a:	370c      	adds	r7, #12
    257c:	46bd      	mov	sp, r7
    257e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2582:	4770      	bx	lr

00002584 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2584:	b480      	push	{r7}
    2586:	b083      	sub	sp, #12
    2588:	af00      	add	r7, sp, #0
    258a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	2b00      	cmp	r3, #0
    2590:	d002      	beq.n	2598 <list_get_next_element+0x14>
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	e000      	b.n	259a <list_get_next_element+0x16>
    2598:	2300      	movs	r3, #0
}
    259a:	4618      	mov	r0, r3
    259c:	370c      	adds	r7, #12
    259e:	46bd      	mov	sp, r7
    25a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25a4:	4770      	bx	lr
	...

000025a8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    25a8:	b580      	push	{r7, lr}
    25aa:	b084      	sub	sp, #16
    25ac:	af00      	add	r7, sp, #0
    25ae:	60f8      	str	r0, [r7, #12]
    25b0:	60b9      	str	r1, [r7, #8]
    25b2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    25b4:	68fb      	ldr	r3, [r7, #12]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d007      	beq.n	25ca <timer_init+0x22>
    25ba:	68bb      	ldr	r3, [r7, #8]
    25bc:	2b00      	cmp	r3, #0
    25be:	d004      	beq.n	25ca <timer_init+0x22>
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d001      	beq.n	25ca <timer_init+0x22>
    25c6:	2301      	movs	r3, #1
    25c8:	e000      	b.n	25cc <timer_init+0x24>
    25ca:	2300      	movs	r3, #0
    25cc:	f003 0301 	and.w	r3, r3, #1
    25d0:	b2db      	uxtb	r3, r3
    25d2:	223b      	movs	r2, #59	; 0x3b
    25d4:	490c      	ldr	r1, [pc, #48]	; (2608 <timer_init+0x60>)
    25d6:	4618      	mov	r0, r3
    25d8:	4b0c      	ldr	r3, [pc, #48]	; (260c <timer_init+0x64>)
    25da:	4798      	blx	r3
	descr->func = func;
    25dc:	68fb      	ldr	r3, [r7, #12]
    25de:	687a      	ldr	r2, [r7, #4]
    25e0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    25e2:	68fb      	ldr	r3, [r7, #12]
    25e4:	681b      	ldr	r3, [r3, #0]
    25e6:	681b      	ldr	r3, [r3, #0]
    25e8:	68fa      	ldr	r2, [r7, #12]
    25ea:	3204      	adds	r2, #4
    25ec:	68b9      	ldr	r1, [r7, #8]
    25ee:	4610      	mov	r0, r2
    25f0:	4798      	blx	r3
	descr->time                           = 0;
    25f2:	68fb      	ldr	r3, [r7, #12]
    25f4:	2200      	movs	r2, #0
    25f6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    25f8:	68fb      	ldr	r3, [r7, #12]
    25fa:	4a05      	ldr	r2, [pc, #20]	; (2610 <timer_init+0x68>)
    25fc:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    25fe:	2300      	movs	r3, #0
}
    2600:	4618      	mov	r0, r3
    2602:	3710      	adds	r7, #16
    2604:	46bd      	mov	sp, r7
    2606:	bd80      	pop	{r7, pc}
    2608:	0000ed24 	.word	0x0000ed24
    260c:	000033ad 	.word	0x000033ad
    2610:	00002999 	.word	0x00002999

00002614 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2614:	b580      	push	{r7, lr}
    2616:	b082      	sub	sp, #8
    2618:	af00      	add	r7, sp, #0
    261a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	2b00      	cmp	r3, #0
    2620:	d005      	beq.n	262e <timer_start+0x1a>
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	d001      	beq.n	262e <timer_start+0x1a>
    262a:	2301      	movs	r3, #1
    262c:	e000      	b.n	2630 <timer_start+0x1c>
    262e:	2300      	movs	r3, #0
    2630:	f003 0301 	and.w	r3, r3, #1
    2634:	b2db      	uxtb	r3, r3
    2636:	2254      	movs	r2, #84	; 0x54
    2638:	490e      	ldr	r1, [pc, #56]	; (2674 <timer_start+0x60>)
    263a:	4618      	mov	r0, r3
    263c:	4b0e      	ldr	r3, [pc, #56]	; (2678 <timer_start+0x64>)
    263e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2640:	687b      	ldr	r3, [r7, #4]
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	699b      	ldr	r3, [r3, #24]
    2646:	687a      	ldr	r2, [r7, #4]
    2648:	3204      	adds	r2, #4
    264a:	4610      	mov	r0, r2
    264c:	4798      	blx	r3
    264e:	4603      	mov	r3, r0
    2650:	2b00      	cmp	r3, #0
    2652:	d002      	beq.n	265a <timer_start+0x46>
		return ERR_DENIED;
    2654:	f06f 0310 	mvn.w	r3, #16
    2658:	e007      	b.n	266a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	681b      	ldr	r3, [r3, #0]
    265e:	689b      	ldr	r3, [r3, #8]
    2660:	687a      	ldr	r2, [r7, #4]
    2662:	3204      	adds	r2, #4
    2664:	4610      	mov	r0, r2
    2666:	4798      	blx	r3

	return ERR_NONE;
    2668:	2300      	movs	r3, #0
}
    266a:	4618      	mov	r0, r3
    266c:	3708      	adds	r7, #8
    266e:	46bd      	mov	sp, r7
    2670:	bd80      	pop	{r7, pc}
    2672:	bf00      	nop
    2674:	0000ed24 	.word	0x0000ed24
    2678:	000033ad 	.word	0x000033ad

0000267c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    267c:	b580      	push	{r7, lr}
    267e:	b082      	sub	sp, #8
    2680:	af00      	add	r7, sp, #0
    2682:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	2b00      	cmp	r3, #0
    2688:	d005      	beq.n	2696 <timer_stop+0x1a>
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	681b      	ldr	r3, [r3, #0]
    268e:	2b00      	cmp	r3, #0
    2690:	d001      	beq.n	2696 <timer_stop+0x1a>
    2692:	2301      	movs	r3, #1
    2694:	e000      	b.n	2698 <timer_stop+0x1c>
    2696:	2300      	movs	r3, #0
    2698:	f003 0301 	and.w	r3, r3, #1
    269c:	b2db      	uxtb	r3, r3
    269e:	2262      	movs	r2, #98	; 0x62
    26a0:	490f      	ldr	r1, [pc, #60]	; (26e0 <timer_stop+0x64>)
    26a2:	4618      	mov	r0, r3
    26a4:	4b0f      	ldr	r3, [pc, #60]	; (26e4 <timer_stop+0x68>)
    26a6:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	699b      	ldr	r3, [r3, #24]
    26ae:	687a      	ldr	r2, [r7, #4]
    26b0:	3204      	adds	r2, #4
    26b2:	4610      	mov	r0, r2
    26b4:	4798      	blx	r3
    26b6:	4603      	mov	r3, r0
    26b8:	f083 0301 	eor.w	r3, r3, #1
    26bc:	b2db      	uxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	d002      	beq.n	26c8 <timer_stop+0x4c>
		return ERR_DENIED;
    26c2:	f06f 0310 	mvn.w	r3, #16
    26c6:	e007      	b.n	26d8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	68db      	ldr	r3, [r3, #12]
    26ce:	687a      	ldr	r2, [r7, #4]
    26d0:	3204      	adds	r2, #4
    26d2:	4610      	mov	r0, r2
    26d4:	4798      	blx	r3

	return ERR_NONE;
    26d6:	2300      	movs	r3, #0
}
    26d8:	4618      	mov	r0, r3
    26da:	3708      	adds	r7, #8
    26dc:	46bd      	mov	sp, r7
    26de:	bd80      	pop	{r7, pc}
    26e0:	0000ed24 	.word	0x0000ed24
    26e4:	000033ad 	.word	0x000033ad

000026e8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b084      	sub	sp, #16
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d008      	beq.n	270a <timer_add_task+0x22>
    26f8:	683b      	ldr	r3, [r7, #0]
    26fa:	2b00      	cmp	r3, #0
    26fc:	d005      	beq.n	270a <timer_add_task+0x22>
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	681b      	ldr	r3, [r3, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d001      	beq.n	270a <timer_add_task+0x22>
    2706:	2301      	movs	r3, #1
    2708:	e000      	b.n	270c <timer_add_task+0x24>
    270a:	2300      	movs	r3, #0
    270c:	f003 0301 	and.w	r3, r3, #1
    2710:	b2db      	uxtb	r3, r3
    2712:	227b      	movs	r2, #123	; 0x7b
    2714:	492f      	ldr	r1, [pc, #188]	; (27d4 <timer_add_task+0xec>)
    2716:	4618      	mov	r0, r3
    2718:	4b2f      	ldr	r3, [pc, #188]	; (27d8 <timer_add_task+0xf0>)
    271a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	7f1b      	ldrb	r3, [r3, #28]
    2720:	b2db      	uxtb	r3, r3
    2722:	f043 0301 	orr.w	r3, r3, #1
    2726:	b2da      	uxtb	r2, r3
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	3318      	adds	r3, #24
    2730:	6839      	ldr	r1, [r7, #0]
    2732:	4618      	mov	r0, r3
    2734:	4b29      	ldr	r3, [pc, #164]	; (27dc <timer_add_task+0xf4>)
    2736:	4798      	blx	r3
    2738:	4603      	mov	r3, r0
    273a:	2b00      	cmp	r3, #0
    273c:	d00f      	beq.n	275e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	7f1b      	ldrb	r3, [r3, #28]
    2742:	b2db      	uxtb	r3, r3
    2744:	f023 0301 	bic.w	r3, r3, #1
    2748:	b2da      	uxtb	r2, r3
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    274e:	2280      	movs	r2, #128	; 0x80
    2750:	4920      	ldr	r1, [pc, #128]	; (27d4 <timer_add_task+0xec>)
    2752:	2000      	movs	r0, #0
    2754:	4b20      	ldr	r3, [pc, #128]	; (27d8 <timer_add_task+0xf0>)
    2756:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2758:	f06f 0311 	mvn.w	r3, #17
    275c:	e035      	b.n	27ca <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	695a      	ldr	r2, [r3, #20]
    2762:	683b      	ldr	r3, [r7, #0]
    2764:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	f103 0018 	add.w	r0, r3, #24
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	695b      	ldr	r3, [r3, #20]
    2770:	461a      	mov	r2, r3
    2772:	6839      	ldr	r1, [r7, #0]
    2774:	4b1a      	ldr	r3, [pc, #104]	; (27e0 <timer_add_task+0xf8>)
    2776:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	7f1b      	ldrb	r3, [r3, #28]
    277c:	b2db      	uxtb	r3, r3
    277e:	f023 0301 	bic.w	r3, r3, #1
    2782:	b2da      	uxtb	r2, r3
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	7f1b      	ldrb	r3, [r3, #28]
    278c:	b2db      	uxtb	r3, r3
    278e:	f003 0302 	and.w	r3, r3, #2
    2792:	2b00      	cmp	r3, #0
    2794:	d018      	beq.n	27c8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2796:	f107 030c 	add.w	r3, r7, #12
    279a:	4618      	mov	r0, r3
    279c:	4b11      	ldr	r3, [pc, #68]	; (27e4 <timer_add_task+0xfc>)
    279e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	7f1b      	ldrb	r3, [r3, #28]
    27a4:	b2db      	uxtb	r3, r3
    27a6:	f023 0302 	bic.w	r3, r3, #2
    27aa:	b2da      	uxtb	r2, r3
    27ac:	687b      	ldr	r3, [r7, #4]
    27ae:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    27b0:	687b      	ldr	r3, [r7, #4]
    27b2:	681b      	ldr	r3, [r3, #0]
    27b4:	69db      	ldr	r3, [r3, #28]
    27b6:	687a      	ldr	r2, [r7, #4]
    27b8:	3204      	adds	r2, #4
    27ba:	4610      	mov	r0, r2
    27bc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    27be:	f107 030c 	add.w	r3, r7, #12
    27c2:	4618      	mov	r0, r3
    27c4:	4b08      	ldr	r3, [pc, #32]	; (27e8 <timer_add_task+0x100>)
    27c6:	4798      	blx	r3
	}

	return ERR_NONE;
    27c8:	2300      	movs	r3, #0
}
    27ca:	4618      	mov	r0, r3
    27cc:	3710      	adds	r7, #16
    27ce:	46bd      	mov	sp, r7
    27d0:	bd80      	pop	{r7, pc}
    27d2:	bf00      	nop
    27d4:	0000ed24 	.word	0x0000ed24
    27d8:	000033ad 	.word	0x000033ad
    27dc:	000033d5 	.word	0x000033d5
    27e0:	000028e9 	.word	0x000028e9
    27e4:	0000ae99 	.word	0x0000ae99
    27e8:	0000aebf 	.word	0x0000aebf

000027ec <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b084      	sub	sp, #16
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
    27f4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	2b00      	cmp	r3, #0
    27fa:	d008      	beq.n	280e <timer_remove_task+0x22>
    27fc:	683b      	ldr	r3, [r7, #0]
    27fe:	2b00      	cmp	r3, #0
    2800:	d005      	beq.n	280e <timer_remove_task+0x22>
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	681b      	ldr	r3, [r3, #0]
    2806:	2b00      	cmp	r3, #0
    2808:	d001      	beq.n	280e <timer_remove_task+0x22>
    280a:	2301      	movs	r3, #1
    280c:	e000      	b.n	2810 <timer_remove_task+0x24>
    280e:	2300      	movs	r3, #0
    2810:	f003 0301 	and.w	r3, r3, #1
    2814:	b2db      	uxtb	r3, r3
    2816:	2296      	movs	r2, #150	; 0x96
    2818:	492d      	ldr	r1, [pc, #180]	; (28d0 <timer_remove_task+0xe4>)
    281a:	4618      	mov	r0, r3
    281c:	4b2d      	ldr	r3, [pc, #180]	; (28d4 <timer_remove_task+0xe8>)
    281e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	7f1b      	ldrb	r3, [r3, #28]
    2824:	b2db      	uxtb	r3, r3
    2826:	f043 0301 	orr.w	r3, r3, #1
    282a:	b2da      	uxtb	r2, r3
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	3318      	adds	r3, #24
    2834:	6839      	ldr	r1, [r7, #0]
    2836:	4618      	mov	r0, r3
    2838:	4b27      	ldr	r3, [pc, #156]	; (28d8 <timer_remove_task+0xec>)
    283a:	4798      	blx	r3
    283c:	4603      	mov	r3, r0
    283e:	f083 0301 	eor.w	r3, r3, #1
    2842:	b2db      	uxtb	r3, r3
    2844:	2b00      	cmp	r3, #0
    2846:	d00f      	beq.n	2868 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	7f1b      	ldrb	r3, [r3, #28]
    284c:	b2db      	uxtb	r3, r3
    284e:	f023 0301 	bic.w	r3, r3, #1
    2852:	b2da      	uxtb	r2, r3
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2858:	229b      	movs	r2, #155	; 0x9b
    285a:	491d      	ldr	r1, [pc, #116]	; (28d0 <timer_remove_task+0xe4>)
    285c:	2000      	movs	r0, #0
    285e:	4b1d      	ldr	r3, [pc, #116]	; (28d4 <timer_remove_task+0xe8>)
    2860:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2862:	f06f 0309 	mvn.w	r3, #9
    2866:	e02e      	b.n	28c6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	3318      	adds	r3, #24
    286c:	6839      	ldr	r1, [r7, #0]
    286e:	4618      	mov	r0, r3
    2870:	4b1a      	ldr	r3, [pc, #104]	; (28dc <timer_remove_task+0xf0>)
    2872:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	7f1b      	ldrb	r3, [r3, #28]
    2878:	b2db      	uxtb	r3, r3
    287a:	f023 0301 	bic.w	r3, r3, #1
    287e:	b2da      	uxtb	r2, r3
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	7f1b      	ldrb	r3, [r3, #28]
    2888:	b2db      	uxtb	r3, r3
    288a:	f003 0302 	and.w	r3, r3, #2
    288e:	2b00      	cmp	r3, #0
    2890:	d018      	beq.n	28c4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2892:	f107 030c 	add.w	r3, r7, #12
    2896:	4618      	mov	r0, r3
    2898:	4b11      	ldr	r3, [pc, #68]	; (28e0 <timer_remove_task+0xf4>)
    289a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	7f1b      	ldrb	r3, [r3, #28]
    28a0:	b2db      	uxtb	r3, r3
    28a2:	f023 0302 	bic.w	r3, r3, #2
    28a6:	b2da      	uxtb	r2, r3
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	681b      	ldr	r3, [r3, #0]
    28b0:	69db      	ldr	r3, [r3, #28]
    28b2:	687a      	ldr	r2, [r7, #4]
    28b4:	3204      	adds	r2, #4
    28b6:	4610      	mov	r0, r2
    28b8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    28ba:	f107 030c 	add.w	r3, r7, #12
    28be:	4618      	mov	r0, r3
    28c0:	4b08      	ldr	r3, [pc, #32]	; (28e4 <timer_remove_task+0xf8>)
    28c2:	4798      	blx	r3
	}

	return ERR_NONE;
    28c4:	2300      	movs	r3, #0
}
    28c6:	4618      	mov	r0, r3
    28c8:	3710      	adds	r7, #16
    28ca:	46bd      	mov	sp, r7
    28cc:	bd80      	pop	{r7, pc}
    28ce:	bf00      	nop
    28d0:	0000ed24 	.word	0x0000ed24
    28d4:	000033ad 	.word	0x000033ad
    28d8:	000033d5 	.word	0x000033d5
    28dc:	00003537 	.word	0x00003537
    28e0:	0000ae99 	.word	0x0000ae99
    28e4:	0000aebf 	.word	0x0000aebf

000028e8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b088      	sub	sp, #32
    28ec:	af00      	add	r7, sp, #0
    28ee:	60f8      	str	r0, [r7, #12]
    28f0:	60b9      	str	r1, [r7, #8]
    28f2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    28f4:	2300      	movs	r3, #0
    28f6:	61bb      	str	r3, [r7, #24]
    28f8:	68f8      	ldr	r0, [r7, #12]
    28fa:	4b23      	ldr	r3, [pc, #140]	; (2988 <timer_add_timer_task+0xa0>)
    28fc:	4798      	blx	r3
    28fe:	6138      	str	r0, [r7, #16]

	if (!head) {
    2900:	693b      	ldr	r3, [r7, #16]
    2902:	2b00      	cmp	r3, #0
    2904:	d104      	bne.n	2910 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2906:	68b9      	ldr	r1, [r7, #8]
    2908:	68f8      	ldr	r0, [r7, #12]
    290a:	4b20      	ldr	r3, [pc, #128]	; (298c <timer_add_timer_task+0xa4>)
    290c:	4798      	blx	r3
		return;
    290e:	e037      	b.n	2980 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2910:	693b      	ldr	r3, [r7, #16]
    2912:	61fb      	str	r3, [r7, #28]
    2914:	e022      	b.n	295c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2916:	69fb      	ldr	r3, [r7, #28]
    2918:	685a      	ldr	r2, [r3, #4]
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	429a      	cmp	r2, r3
    291e:	d808      	bhi.n	2932 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2920:	69fb      	ldr	r3, [r7, #28]
    2922:	689a      	ldr	r2, [r3, #8]
    2924:	69fb      	ldr	r3, [r7, #28]
    2926:	6859      	ldr	r1, [r3, #4]
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	1acb      	subs	r3, r1, r3
    292c:	4413      	add	r3, r2
    292e:	617b      	str	r3, [r7, #20]
    2930:	e009      	b.n	2946 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2932:	69fb      	ldr	r3, [r7, #28]
    2934:	689a      	ldr	r2, [r3, #8]
    2936:	69fb      	ldr	r3, [r7, #28]
    2938:	685b      	ldr	r3, [r3, #4]
    293a:	441a      	add	r2, r3
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	425b      	negs	r3, r3
    2940:	4413      	add	r3, r2
    2942:	3301      	adds	r3, #1
    2944:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2946:	68bb      	ldr	r3, [r7, #8]
    2948:	689a      	ldr	r2, [r3, #8]
    294a:	697b      	ldr	r3, [r7, #20]
    294c:	429a      	cmp	r2, r3
    294e:	d909      	bls.n	2964 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2950:	69fb      	ldr	r3, [r7, #28]
    2952:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2954:	69f8      	ldr	r0, [r7, #28]
    2956:	4b0e      	ldr	r3, [pc, #56]	; (2990 <timer_add_timer_task+0xa8>)
    2958:	4798      	blx	r3
    295a:	61f8      	str	r0, [r7, #28]
    295c:	69fb      	ldr	r3, [r7, #28]
    295e:	2b00      	cmp	r3, #0
    2960:	d1d9      	bne.n	2916 <timer_add_timer_task+0x2e>
    2962:	e000      	b.n	2966 <timer_add_timer_task+0x7e>
			break;
    2964:	bf00      	nop
	}

	if (it == head) {
    2966:	69fa      	ldr	r2, [r7, #28]
    2968:	693b      	ldr	r3, [r7, #16]
    296a:	429a      	cmp	r2, r3
    296c:	d104      	bne.n	2978 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    296e:	68b9      	ldr	r1, [r7, #8]
    2970:	68f8      	ldr	r0, [r7, #12]
    2972:	4b06      	ldr	r3, [pc, #24]	; (298c <timer_add_timer_task+0xa4>)
    2974:	4798      	blx	r3
    2976:	e003      	b.n	2980 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2978:	68b9      	ldr	r1, [r7, #8]
    297a:	69b8      	ldr	r0, [r7, #24]
    297c:	4b05      	ldr	r3, [pc, #20]	; (2994 <timer_add_timer_task+0xac>)
    297e:	4798      	blx	r3
	}
}
    2980:	3720      	adds	r7, #32
    2982:	46bd      	mov	sp, r7
    2984:	bd80      	pop	{r7, pc}
    2986:	bf00      	nop
    2988:	0000256d 	.word	0x0000256d
    298c:	0000340d 	.word	0x0000340d
    2990:	00002585 	.word	0x00002585
    2994:	00003465 	.word	0x00003465

00002998 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2998:	b580      	push	{r7, lr}
    299a:	b086      	sub	sp, #24
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	3b04      	subs	r3, #4
    29a4:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    29a6:	693b      	ldr	r3, [r7, #16]
    29a8:	3318      	adds	r3, #24
    29aa:	4618      	mov	r0, r3
    29ac:	4b27      	ldr	r3, [pc, #156]	; (2a4c <timer_process_counted+0xb4>)
    29ae:	4798      	blx	r3
    29b0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    29b2:	693b      	ldr	r3, [r7, #16]
    29b4:	695b      	ldr	r3, [r3, #20]
    29b6:	1c5a      	adds	r2, r3, #1
    29b8:	693b      	ldr	r3, [r7, #16]
    29ba:	615a      	str	r2, [r3, #20]
    29bc:	693b      	ldr	r3, [r7, #16]
    29be:	695b      	ldr	r3, [r3, #20]
    29c0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    29c2:	693b      	ldr	r3, [r7, #16]
    29c4:	7f1b      	ldrb	r3, [r3, #28]
    29c6:	b2db      	uxtb	r3, r3
    29c8:	f003 0301 	and.w	r3, r3, #1
    29cc:	2b00      	cmp	r3, #0
    29ce:	d106      	bne.n	29de <timer_process_counted+0x46>
    29d0:	693b      	ldr	r3, [r7, #16]
    29d2:	7f1b      	ldrb	r3, [r3, #28]
    29d4:	b2db      	uxtb	r3, r3
    29d6:	f003 0302 	and.w	r3, r3, #2
    29da:	2b00      	cmp	r3, #0
    29dc:	d027      	beq.n	2a2e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    29de:	693b      	ldr	r3, [r7, #16]
    29e0:	7f1b      	ldrb	r3, [r3, #28]
    29e2:	b2db      	uxtb	r3, r3
    29e4:	f043 0302 	orr.w	r3, r3, #2
    29e8:	b2da      	uxtb	r2, r3
    29ea:	693b      	ldr	r3, [r7, #16]
    29ec:	771a      	strb	r2, [r3, #28]
		return;
    29ee:	e029      	b.n	2a44 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    29f0:	697b      	ldr	r3, [r7, #20]
    29f2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    29f4:	693b      	ldr	r3, [r7, #16]
    29f6:	3318      	adds	r3, #24
    29f8:	4618      	mov	r0, r3
    29fa:	4b15      	ldr	r3, [pc, #84]	; (2a50 <timer_process_counted+0xb8>)
    29fc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    29fe:	68bb      	ldr	r3, [r7, #8]
    2a00:	7c1b      	ldrb	r3, [r3, #16]
    2a02:	2b01      	cmp	r3, #1
    2a04:	d109      	bne.n	2a1a <timer_process_counted+0x82>
			tmp->time_label = time;
    2a06:	68bb      	ldr	r3, [r7, #8]
    2a08:	68fa      	ldr	r2, [r7, #12]
    2a0a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2a0c:	693b      	ldr	r3, [r7, #16]
    2a0e:	3318      	adds	r3, #24
    2a10:	68fa      	ldr	r2, [r7, #12]
    2a12:	68b9      	ldr	r1, [r7, #8]
    2a14:	4618      	mov	r0, r3
    2a16:	4b0f      	ldr	r3, [pc, #60]	; (2a54 <timer_process_counted+0xbc>)
    2a18:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2a1a:	693b      	ldr	r3, [r7, #16]
    2a1c:	3318      	adds	r3, #24
    2a1e:	4618      	mov	r0, r3
    2a20:	4b0a      	ldr	r3, [pc, #40]	; (2a4c <timer_process_counted+0xb4>)
    2a22:	4798      	blx	r3
    2a24:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2a26:	68bb      	ldr	r3, [r7, #8]
    2a28:	68db      	ldr	r3, [r3, #12]
    2a2a:	68b8      	ldr	r0, [r7, #8]
    2a2c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2a2e:	697b      	ldr	r3, [r7, #20]
    2a30:	2b00      	cmp	r3, #0
    2a32:	d007      	beq.n	2a44 <timer_process_counted+0xac>
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	685b      	ldr	r3, [r3, #4]
    2a38:	68fa      	ldr	r2, [r7, #12]
    2a3a:	1ad2      	subs	r2, r2, r3
    2a3c:	697b      	ldr	r3, [r7, #20]
    2a3e:	689b      	ldr	r3, [r3, #8]
    2a40:	429a      	cmp	r2, r3
    2a42:	d2d5      	bcs.n	29f0 <timer_process_counted+0x58>
	}
}
    2a44:	3718      	adds	r7, #24
    2a46:	46bd      	mov	sp, r7
    2a48:	bd80      	pop	{r7, pc}
    2a4a:	bf00      	nop
    2a4c:	0000256d 	.word	0x0000256d
    2a50:	00003505 	.word	0x00003505
    2a54:	000028e9 	.word	0x000028e9

00002a58 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2a58:	b480      	push	{r7}
    2a5a:	b085      	sub	sp, #20
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	4603      	mov	r3, r0
    2a60:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2a62:	2300      	movs	r3, #0
    2a64:	73fb      	strb	r3, [r7, #15]
    2a66:	e029      	b.n	2abc <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a6c:	4a19      	ldr	r2, [pc, #100]	; (2ad4 <_usb_d_find_ep+0x7c>)
    2a6e:	015b      	lsls	r3, r3, #5
    2a70:	4413      	add	r3, r2
    2a72:	3301      	adds	r3, #1
    2a74:	781b      	ldrb	r3, [r3, #0]
    2a76:	79fa      	ldrb	r2, [r7, #7]
    2a78:	429a      	cmp	r2, r3
    2a7a:	d102      	bne.n	2a82 <_usb_d_find_ep+0x2a>
			return i;
    2a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a80:	e022      	b.n	2ac8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a86:	4a13      	ldr	r2, [pc, #76]	; (2ad4 <_usb_d_find_ep+0x7c>)
    2a88:	015b      	lsls	r3, r3, #5
    2a8a:	4413      	add	r3, r2
    2a8c:	781b      	ldrb	r3, [r3, #0]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d10e      	bne.n	2ab0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2a92:	79fb      	ldrb	r3, [r7, #7]
    2a94:	f003 030f 	and.w	r3, r3, #15
    2a98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2a9c:	490d      	ldr	r1, [pc, #52]	; (2ad4 <_usb_d_find_ep+0x7c>)
    2a9e:	0152      	lsls	r2, r2, #5
    2aa0:	440a      	add	r2, r1
    2aa2:	3201      	adds	r2, #1
    2aa4:	7812      	ldrb	r2, [r2, #0]
    2aa6:	4293      	cmp	r3, r2
    2aa8:	d102      	bne.n	2ab0 <_usb_d_find_ep+0x58>
			return i;
    2aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2aae:	e00b      	b.n	2ac8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ab4:	b2db      	uxtb	r3, r3
    2ab6:	3301      	adds	r3, #1
    2ab8:	b2db      	uxtb	r3, r3
    2aba:	73fb      	strb	r3, [r7, #15]
    2abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ac0:	2b03      	cmp	r3, #3
    2ac2:	ddd1      	ble.n	2a68 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
    2ac8:	4618      	mov	r0, r3
    2aca:	3714      	adds	r7, #20
    2acc:	46bd      	mov	sp, r7
    2ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ad2:	4770      	bx	lr
    2ad4:	20000844 	.word	0x20000844

00002ad8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b088      	sub	sp, #32
    2adc:	af00      	add	r7, sp, #0
    2ade:	60ba      	str	r2, [r7, #8]
    2ae0:	607b      	str	r3, [r7, #4]
    2ae2:	4603      	mov	r3, r0
    2ae4:	73fb      	strb	r3, [r7, #15]
    2ae6:	460b      	mov	r3, r1
    2ae8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2aea:	68bb      	ldr	r3, [r7, #8]
    2aec:	617b      	str	r3, [r7, #20]
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	61bb      	str	r3, [r7, #24]
    2af2:	7bbb      	ldrb	r3, [r7, #14]
    2af4:	2b00      	cmp	r3, #0
    2af6:	d004      	beq.n	2b02 <_usb_d_trans+0x2a>
    2af8:	7bfb      	ldrb	r3, [r7, #15]
    2afa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2afe:	b2db      	uxtb	r3, r3
    2b00:	e003      	b.n	2b0a <_usb_d_trans+0x32>
    2b02:	7bfb      	ldrb	r3, [r7, #15]
    2b04:	f003 030f 	and.w	r3, r3, #15
    2b08:	b2db      	uxtb	r3, r3
    2b0a:	773b      	strb	r3, [r7, #28]
    2b0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2b10:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2b12:	f107 0314 	add.w	r3, r7, #20
    2b16:	4618      	mov	r0, r3
    2b18:	4b03      	ldr	r3, [pc, #12]	; (2b28 <_usb_d_trans+0x50>)
    2b1a:	4798      	blx	r3
    2b1c:	4603      	mov	r3, r0
}
    2b1e:	4618      	mov	r0, r3
    2b20:	3720      	adds	r7, #32
    2b22:	46bd      	mov	sp, r7
    2b24:	bd80      	pop	{r7, pc}
    2b26:	bf00      	nop
    2b28:	0000a4cd 	.word	0x0000a4cd

00002b2c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2b2c:	b480      	push	{r7}
    2b2e:	b085      	sub	sp, #20
    2b30:	af00      	add	r7, sp, #0
    2b32:	60f8      	str	r0, [r7, #12]
    2b34:	60b9      	str	r1, [r7, #8]
    2b36:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2b38:	2300      	movs	r3, #0
}
    2b3a:	4618      	mov	r0, r3
    2b3c:	3714      	adds	r7, #20
    2b3e:	46bd      	mov	sp, r7
    2b40:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b44:	4770      	bx	lr
	...

00002b48 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b086      	sub	sp, #24
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	4603      	mov	r3, r0
    2b50:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b52:	79fb      	ldrb	r3, [r7, #7]
    2b54:	4618      	mov	r0, r3
    2b56:	4b2a      	ldr	r3, [pc, #168]	; (2c00 <usb_d_cb_trans_setup+0xb8>)
    2b58:	4798      	blx	r3
    2b5a:	4603      	mov	r3, r0
    2b5c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b62:	015b      	lsls	r3, r3, #5
    2b64:	4a27      	ldr	r2, [pc, #156]	; (2c04 <usb_d_cb_trans_setup+0xbc>)
    2b66:	4413      	add	r3, r2
    2b68:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2b6a:	693b      	ldr	r3, [r7, #16]
    2b6c:	330c      	adds	r3, #12
    2b6e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2b70:	79fb      	ldrb	r3, [r7, #7]
    2b72:	68f9      	ldr	r1, [r7, #12]
    2b74:	4618      	mov	r0, r3
    2b76:	4b24      	ldr	r3, [pc, #144]	; (2c08 <usb_d_cb_trans_setup+0xc0>)
    2b78:	4798      	blx	r3
    2b7a:	4603      	mov	r3, r0
    2b7c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2b7e:	7afb      	ldrb	r3, [r7, #11]
    2b80:	2b08      	cmp	r3, #8
    2b82:	d00d      	beq.n	2ba0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2b84:	79fb      	ldrb	r3, [r7, #7]
    2b86:	2101      	movs	r1, #1
    2b88:	4618      	mov	r0, r3
    2b8a:	4b20      	ldr	r3, [pc, #128]	; (2c0c <usb_d_cb_trans_setup+0xc4>)
    2b8c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2b8e:	79fb      	ldrb	r3, [r7, #7]
    2b90:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2b94:	b2db      	uxtb	r3, r3
    2b96:	2101      	movs	r1, #1
    2b98:	4618      	mov	r0, r3
    2b9a:	4b1c      	ldr	r3, [pc, #112]	; (2c0c <usb_d_cb_trans_setup+0xc4>)
    2b9c:	4798      	blx	r3
		return;
    2b9e:	e02b      	b.n	2bf8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2ba0:	79fb      	ldrb	r3, [r7, #7]
    2ba2:	2100      	movs	r1, #0
    2ba4:	4618      	mov	r0, r3
    2ba6:	4b19      	ldr	r3, [pc, #100]	; (2c0c <usb_d_cb_trans_setup+0xc4>)
    2ba8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2baa:	79fb      	ldrb	r3, [r7, #7]
    2bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2bb0:	b2db      	uxtb	r3, r3
    2bb2:	2100      	movs	r1, #0
    2bb4:	4618      	mov	r0, r3
    2bb6:	4b15      	ldr	r3, [pc, #84]	; (2c0c <usb_d_cb_trans_setup+0xc4>)
    2bb8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2bba:	693b      	ldr	r3, [r7, #16]
    2bbc:	2201      	movs	r2, #1
    2bbe:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2bc0:	693b      	ldr	r3, [r7, #16]
    2bc2:	695b      	ldr	r3, [r3, #20]
    2bc4:	79fa      	ldrb	r2, [r7, #7]
    2bc6:	68f9      	ldr	r1, [r7, #12]
    2bc8:	4610      	mov	r0, r2
    2bca:	4798      	blx	r3
    2bcc:	4603      	mov	r3, r0
    2bce:	f083 0301 	eor.w	r3, r3, #1
    2bd2:	b2db      	uxtb	r3, r3
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d00f      	beq.n	2bf8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2bd8:	693b      	ldr	r3, [r7, #16]
    2bda:	2205      	movs	r2, #5
    2bdc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2bde:	79fb      	ldrb	r3, [r7, #7]
    2be0:	2101      	movs	r1, #1
    2be2:	4618      	mov	r0, r3
    2be4:	4b09      	ldr	r3, [pc, #36]	; (2c0c <usb_d_cb_trans_setup+0xc4>)
    2be6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2be8:	79fb      	ldrb	r3, [r7, #7]
    2bea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2bee:	b2db      	uxtb	r3, r3
    2bf0:	2101      	movs	r1, #1
    2bf2:	4618      	mov	r0, r3
    2bf4:	4b05      	ldr	r3, [pc, #20]	; (2c0c <usb_d_cb_trans_setup+0xc4>)
    2bf6:	4798      	blx	r3
	}
}
    2bf8:	3718      	adds	r7, #24
    2bfa:	46bd      	mov	sp, r7
    2bfc:	bd80      	pop	{r7, pc}
    2bfe:	bf00      	nop
    2c00:	00002a59 	.word	0x00002a59
    2c04:	20000844 	.word	0x20000844
    2c08:	0000a425 	.word	0x0000a425
    2c0c:	0000a29d 	.word	0x0000a29d

00002c10 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	b084      	sub	sp, #16
    2c14:	af00      	add	r7, sp, #0
    2c16:	4603      	mov	r3, r0
    2c18:	6039      	str	r1, [r7, #0]
    2c1a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c1c:	79fb      	ldrb	r3, [r7, #7]
    2c1e:	4618      	mov	r0, r3
    2c20:	4b0d      	ldr	r3, [pc, #52]	; (2c58 <usb_d_cb_trans_more+0x48>)
    2c22:	4798      	blx	r3
    2c24:	4603      	mov	r3, r0
    2c26:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c2c:	015b      	lsls	r3, r3, #5
    2c2e:	4a0b      	ldr	r2, [pc, #44]	; (2c5c <usb_d_cb_trans_more+0x4c>)
    2c30:	4413      	add	r3, r2
    2c32:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2c34:	68bb      	ldr	r3, [r7, #8]
    2c36:	789b      	ldrb	r3, [r3, #2]
    2c38:	2b03      	cmp	r3, #3
    2c3a:	d107      	bne.n	2c4c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2c3c:	68bb      	ldr	r3, [r7, #8]
    2c3e:	699b      	ldr	r3, [r3, #24]
    2c40:	79fa      	ldrb	r2, [r7, #7]
    2c42:	6839      	ldr	r1, [r7, #0]
    2c44:	4610      	mov	r0, r2
    2c46:	4798      	blx	r3
    2c48:	4603      	mov	r3, r0
    2c4a:	e000      	b.n	2c4e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2c4c:	2300      	movs	r3, #0
}
    2c4e:	4618      	mov	r0, r3
    2c50:	3710      	adds	r7, #16
    2c52:	46bd      	mov	sp, r7
    2c54:	bd80      	pop	{r7, pc}
    2c56:	bf00      	nop
    2c58:	00002a59 	.word	0x00002a59
    2c5c:	20000844 	.word	0x20000844

00002c60 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2c60:	b590      	push	{r4, r7, lr}
    2c62:	b087      	sub	sp, #28
    2c64:	af02      	add	r7, sp, #8
    2c66:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	789b      	ldrb	r3, [r3, #2]
    2c6c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	7b1b      	ldrb	r3, [r3, #12]
    2c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c76:	2b00      	cmp	r3, #0
    2c78:	bf14      	ite	ne
    2c7a:	2301      	movne	r3, #1
    2c7c:	2300      	moveq	r3, #0
    2c7e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2c80:	7bfb      	ldrb	r3, [r7, #15]
    2c82:	2b03      	cmp	r3, #3
    2c84:	d13a      	bne.n	2cfc <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	69db      	ldr	r3, [r3, #28]
    2c8a:	687a      	ldr	r2, [r7, #4]
    2c8c:	7850      	ldrb	r0, [r2, #1]
    2c8e:	687a      	ldr	r2, [r7, #4]
    2c90:	320c      	adds	r2, #12
    2c92:	2101      	movs	r1, #1
    2c94:	4798      	blx	r3
    2c96:	4603      	mov	r3, r0
    2c98:	737b      	strb	r3, [r7, #13]
		if (err) {
    2c9a:	7b7b      	ldrb	r3, [r7, #13]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d015      	beq.n	2ccc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	2205      	movs	r2, #5
    2ca4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2ca6:	687b      	ldr	r3, [r7, #4]
    2ca8:	2202      	movs	r2, #2
    2caa:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2cac:	7bbb      	ldrb	r3, [r7, #14]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d002      	beq.n	2cb8 <usb_d_ctrl_trans_done+0x58>
    2cb2:	687b      	ldr	r3, [r7, #4]
    2cb4:	785b      	ldrb	r3, [r3, #1]
    2cb6:	e004      	b.n	2cc2 <usb_d_ctrl_trans_done+0x62>
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	785b      	ldrb	r3, [r3, #1]
    2cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2cc0:	b2db      	uxtb	r3, r3
    2cc2:	2101      	movs	r1, #1
    2cc4:	4618      	mov	r0, r3
    2cc6:	4b15      	ldr	r3, [pc, #84]	; (2d1c <usb_d_ctrl_trans_done+0xbc>)
    2cc8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2cca:	e022      	b.n	2d12 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	2204      	movs	r2, #4
    2cd0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	7858      	ldrb	r0, [r3, #1]
    2cd6:	7bbb      	ldrb	r3, [r7, #14]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	bf14      	ite	ne
    2cdc:	2301      	movne	r3, #1
    2cde:	2300      	moveq	r3, #0
    2ce0:	b2db      	uxtb	r3, r3
    2ce2:	f083 0301 	eor.w	r3, r3, #1
    2ce6:	b2db      	uxtb	r3, r3
    2ce8:	f003 0301 	and.w	r3, r3, #1
    2cec:	b2d9      	uxtb	r1, r3
    2cee:	2301      	movs	r3, #1
    2cf0:	9300      	str	r3, [sp, #0]
    2cf2:	2300      	movs	r3, #0
    2cf4:	2200      	movs	r2, #0
    2cf6:	4c0a      	ldr	r4, [pc, #40]	; (2d20 <usb_d_ctrl_trans_done+0xc0>)
    2cf8:	47a0      	blx	r4
}
    2cfa:	e00a      	b.n	2d12 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	69db      	ldr	r3, [r3, #28]
    2d00:	687a      	ldr	r2, [r7, #4]
    2d02:	7850      	ldrb	r0, [r2, #1]
    2d04:	687a      	ldr	r2, [r7, #4]
    2d06:	320c      	adds	r2, #12
    2d08:	2100      	movs	r1, #0
    2d0a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	2202      	movs	r2, #2
    2d10:	709a      	strb	r2, [r3, #2]
}
    2d12:	bf00      	nop
    2d14:	3714      	adds	r7, #20
    2d16:	46bd      	mov	sp, r7
    2d18:	bd90      	pop	{r4, r7, pc}
    2d1a:	bf00      	nop
    2d1c:	0000a29d 	.word	0x0000a29d
    2d20:	00002ad9 	.word	0x00002ad9

00002d24 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b086      	sub	sp, #24
    2d28:	af00      	add	r7, sp, #0
    2d2a:	4603      	mov	r3, r0
    2d2c:	60b9      	str	r1, [r7, #8]
    2d2e:	607a      	str	r2, [r7, #4]
    2d30:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d32:	7bfb      	ldrb	r3, [r7, #15]
    2d34:	4618      	mov	r0, r3
    2d36:	4b2f      	ldr	r3, [pc, #188]	; (2df4 <_usb_d_cb_trans_done+0xd0>)
    2d38:	4798      	blx	r3
    2d3a:	4603      	mov	r3, r0
    2d3c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d42:	015b      	lsls	r3, r3, #5
    2d44:	4a2c      	ldr	r2, [pc, #176]	; (2df8 <_usb_d_cb_trans_done+0xd4>)
    2d46:	4413      	add	r3, r2
    2d48:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2d4a:	68bb      	ldr	r3, [r7, #8]
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d10e      	bne.n	2d6e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2d50:	693b      	ldr	r3, [r7, #16]
    2d52:	2200      	movs	r2, #0
    2d54:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2d56:	693b      	ldr	r3, [r7, #16]
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d103      	bne.n	2d66 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2d5e:	6938      	ldr	r0, [r7, #16]
    2d60:	4b26      	ldr	r3, [pc, #152]	; (2dfc <_usb_d_cb_trans_done+0xd8>)
    2d62:	4798      	blx	r3
			return;
    2d64:	e043      	b.n	2dee <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2d66:	693b      	ldr	r3, [r7, #16]
    2d68:	2201      	movs	r2, #1
    2d6a:	709a      	strb	r2, [r3, #2]
    2d6c:	e038      	b.n	2de0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2d6e:	68bb      	ldr	r3, [r7, #8]
    2d70:	2b01      	cmp	r3, #1
    2d72:	d113      	bne.n	2d9c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2d74:	693b      	ldr	r3, [r7, #16]
    2d76:	2202      	movs	r2, #2
    2d78:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2d7a:	693b      	ldr	r3, [r7, #16]
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d108      	bne.n	2d94 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2d82:	693b      	ldr	r3, [r7, #16]
    2d84:	2202      	movs	r2, #2
    2d86:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2d88:	7bfb      	ldrb	r3, [r7, #15]
    2d8a:	2100      	movs	r1, #0
    2d8c:	4618      	mov	r0, r3
    2d8e:	4b1c      	ldr	r3, [pc, #112]	; (2e00 <_usb_d_cb_trans_done+0xdc>)
    2d90:	4798      	blx	r3
    2d92:	e025      	b.n	2de0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2d94:	693b      	ldr	r3, [r7, #16]
    2d96:	2205      	movs	r2, #5
    2d98:	709a      	strb	r2, [r3, #2]
    2d9a:	e021      	b.n	2de0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2d9c:	68bb      	ldr	r3, [r7, #8]
    2d9e:	2b02      	cmp	r3, #2
    2da0:	d10e      	bne.n	2dc0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2da2:	693b      	ldr	r3, [r7, #16]
    2da4:	2204      	movs	r2, #4
    2da6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2da8:	693b      	ldr	r3, [r7, #16]
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d103      	bne.n	2db8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2db0:	693b      	ldr	r3, [r7, #16]
    2db2:	2202      	movs	r2, #2
    2db4:	709a      	strb	r2, [r3, #2]
			return;
    2db6:	e01a      	b.n	2dee <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2db8:	693b      	ldr	r3, [r7, #16]
    2dba:	2201      	movs	r2, #1
    2dbc:	709a      	strb	r2, [r3, #2]
    2dbe:	e00f      	b.n	2de0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2dc0:	68bb      	ldr	r3, [r7, #8]
    2dc2:	2b03      	cmp	r3, #3
    2dc4:	d106      	bne.n	2dd4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2dc6:	693b      	ldr	r3, [r7, #16]
    2dc8:	2200      	movs	r2, #0
    2dca:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2dcc:	693b      	ldr	r3, [r7, #16]
    2dce:	2205      	movs	r2, #5
    2dd0:	70da      	strb	r2, [r3, #3]
    2dd2:	e005      	b.n	2de0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2dd4:	693b      	ldr	r3, [r7, #16]
    2dd6:	2206      	movs	r2, #6
    2dd8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2dda:	693b      	ldr	r3, [r7, #16]
    2ddc:	2206      	movs	r2, #6
    2dde:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2de0:	693b      	ldr	r3, [r7, #16]
    2de2:	69db      	ldr	r3, [r3, #28]
    2de4:	693a      	ldr	r2, [r7, #16]
    2de6:	78d1      	ldrb	r1, [r2, #3]
    2de8:	687a      	ldr	r2, [r7, #4]
    2dea:	7bf8      	ldrb	r0, [r7, #15]
    2dec:	4798      	blx	r3
}
    2dee:	3718      	adds	r7, #24
    2df0:	46bd      	mov	sp, r7
    2df2:	bd80      	pop	{r7, pc}
    2df4:	00002a59 	.word	0x00002a59
    2df8:	20000844 	.word	0x20000844
    2dfc:	00002c61 	.word	0x00002c61
    2e00:	0000a29d 	.word	0x0000a29d

00002e04 <usb_d_init>:

int32_t usb_d_init(void)
{
    2e04:	b580      	push	{r7, lr}
    2e06:	b082      	sub	sp, #8
    2e08:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2e0a:	4b21      	ldr	r3, [pc, #132]	; (2e90 <usb_d_init+0x8c>)
    2e0c:	4798      	blx	r3
    2e0e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	da01      	bge.n	2e1a <usb_d_init+0x16>
		return rc;
    2e16:	683b      	ldr	r3, [r7, #0]
    2e18:	e036      	b.n	2e88 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2e1a:	2280      	movs	r2, #128	; 0x80
    2e1c:	2100      	movs	r1, #0
    2e1e:	481d      	ldr	r0, [pc, #116]	; (2e94 <usb_d_init+0x90>)
    2e20:	4b1d      	ldr	r3, [pc, #116]	; (2e98 <usb_d_init+0x94>)
    2e22:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e24:	2300      	movs	r3, #0
    2e26:	71fb      	strb	r3, [r7, #7]
    2e28:	e01e      	b.n	2e68 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2e2a:	79fb      	ldrb	r3, [r7, #7]
    2e2c:	4a19      	ldr	r2, [pc, #100]	; (2e94 <usb_d_init+0x90>)
    2e2e:	015b      	lsls	r3, r3, #5
    2e30:	4413      	add	r3, r2
    2e32:	3301      	adds	r3, #1
    2e34:	22ff      	movs	r2, #255	; 0xff
    2e36:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2e38:	79fb      	ldrb	r3, [r7, #7]
    2e3a:	4a16      	ldr	r2, [pc, #88]	; (2e94 <usb_d_init+0x90>)
    2e3c:	015b      	lsls	r3, r3, #5
    2e3e:	4413      	add	r3, r2
    2e40:	3314      	adds	r3, #20
    2e42:	4a16      	ldr	r2, [pc, #88]	; (2e9c <usb_d_init+0x98>)
    2e44:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2e46:	79fb      	ldrb	r3, [r7, #7]
    2e48:	4a12      	ldr	r2, [pc, #72]	; (2e94 <usb_d_init+0x90>)
    2e4a:	015b      	lsls	r3, r3, #5
    2e4c:	4413      	add	r3, r2
    2e4e:	3318      	adds	r3, #24
    2e50:	4a12      	ldr	r2, [pc, #72]	; (2e9c <usb_d_init+0x98>)
    2e52:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2e54:	79fb      	ldrb	r3, [r7, #7]
    2e56:	4a0f      	ldr	r2, [pc, #60]	; (2e94 <usb_d_init+0x90>)
    2e58:	015b      	lsls	r3, r3, #5
    2e5a:	4413      	add	r3, r2
    2e5c:	331c      	adds	r3, #28
    2e5e:	4a0f      	ldr	r2, [pc, #60]	; (2e9c <usb_d_init+0x98>)
    2e60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e62:	79fb      	ldrb	r3, [r7, #7]
    2e64:	3301      	adds	r3, #1
    2e66:	71fb      	strb	r3, [r7, #7]
    2e68:	79fb      	ldrb	r3, [r7, #7]
    2e6a:	2b03      	cmp	r3, #3
    2e6c:	d9dd      	bls.n	2e2a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2e6e:	490c      	ldr	r1, [pc, #48]	; (2ea0 <usb_d_init+0x9c>)
    2e70:	2000      	movs	r0, #0
    2e72:	4b0c      	ldr	r3, [pc, #48]	; (2ea4 <usb_d_init+0xa0>)
    2e74:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2e76:	490c      	ldr	r1, [pc, #48]	; (2ea8 <usb_d_init+0xa4>)
    2e78:	2001      	movs	r0, #1
    2e7a:	4b0a      	ldr	r3, [pc, #40]	; (2ea4 <usb_d_init+0xa0>)
    2e7c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2e7e:	490b      	ldr	r1, [pc, #44]	; (2eac <usb_d_init+0xa8>)
    2e80:	2002      	movs	r0, #2
    2e82:	4b08      	ldr	r3, [pc, #32]	; (2ea4 <usb_d_init+0xa0>)
    2e84:	4798      	blx	r3
	return ERR_NONE;
    2e86:	2300      	movs	r3, #0
}
    2e88:	4618      	mov	r0, r3
    2e8a:	3708      	adds	r7, #8
    2e8c:	46bd      	mov	sp, r7
    2e8e:	bd80      	pop	{r7, pc}
    2e90:	00009ae5 	.word	0x00009ae5
    2e94:	20000844 	.word	0x20000844
    2e98:	0000e951 	.word	0x0000e951
    2e9c:	00002b2d 	.word	0x00002b2d
    2ea0:	00002b49 	.word	0x00002b49
    2ea4:	0000a72d 	.word	0x0000a72d
    2ea8:	00002c11 	.word	0x00002c11
    2eac:	00002d25 	.word	0x00002d25

00002eb0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b082      	sub	sp, #8
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	4603      	mov	r3, r0
    2eb8:	6039      	str	r1, [r7, #0]
    2eba:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2ebc:	79fb      	ldrb	r3, [r7, #7]
    2ebe:	6839      	ldr	r1, [r7, #0]
    2ec0:	4618      	mov	r0, r3
    2ec2:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <usb_d_register_callback+0x20>)
    2ec4:	4798      	blx	r3
}
    2ec6:	bf00      	nop
    2ec8:	3708      	adds	r7, #8
    2eca:	46bd      	mov	sp, r7
    2ecc:	bd80      	pop	{r7, pc}
    2ece:	bf00      	nop
    2ed0:	0000a6e5 	.word	0x0000a6e5

00002ed4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2ed4:	b580      	push	{r7, lr}
    2ed6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2ed8:	4b02      	ldr	r3, [pc, #8]	; (2ee4 <usb_d_enable+0x10>)
    2eda:	4798      	blx	r3
    2edc:	4603      	mov	r3, r0
}
    2ede:	4618      	mov	r0, r3
    2ee0:	bd80      	pop	{r7, pc}
    2ee2:	bf00      	nop
    2ee4:	00009bd5 	.word	0x00009bd5

00002ee8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2ee8:	b580      	push	{r7, lr}
    2eea:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2eec:	4b01      	ldr	r3, [pc, #4]	; (2ef4 <usb_d_attach+0xc>)
    2eee:	4798      	blx	r3
}
    2ef0:	bf00      	nop
    2ef2:	bd80      	pop	{r7, pc}
    2ef4:	00009c59 	.word	0x00009c59

00002ef8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2ef8:	b580      	push	{r7, lr}
    2efa:	b082      	sub	sp, #8
    2efc:	af00      	add	r7, sp, #0
    2efe:	4603      	mov	r3, r0
    2f00:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2f02:	79fb      	ldrb	r3, [r7, #7]
    2f04:	4618      	mov	r0, r3
    2f06:	4b03      	ldr	r3, [pc, #12]	; (2f14 <usb_d_set_address+0x1c>)
    2f08:	4798      	blx	r3
}
    2f0a:	bf00      	nop
    2f0c:	3708      	adds	r7, #8
    2f0e:	46bd      	mov	sp, r7
    2f10:	bd80      	pop	{r7, pc}
    2f12:	bf00      	nop
    2f14:	00009c6d 	.word	0x00009c6d

00002f18 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	4603      	mov	r3, r0
    2f20:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2f22:	79fb      	ldrb	r3, [r7, #7]
    2f24:	b29b      	uxth	r3, r3
    2f26:	461a      	mov	r2, r3
    2f28:	2100      	movs	r1, #0
    2f2a:	2000      	movs	r0, #0
    2f2c:	4b03      	ldr	r3, [pc, #12]	; (2f3c <usb_d_ep0_init+0x24>)
    2f2e:	4798      	blx	r3
    2f30:	4603      	mov	r3, r0
}
    2f32:	4618      	mov	r0, r3
    2f34:	3708      	adds	r7, #8
    2f36:	46bd      	mov	sp, r7
    2f38:	bd80      	pop	{r7, pc}
    2f3a:	bf00      	nop
    2f3c:	00002f41 	.word	0x00002f41

00002f40 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	b086      	sub	sp, #24
    2f44:	af00      	add	r7, sp, #0
    2f46:	4603      	mov	r3, r0
    2f48:	71fb      	strb	r3, [r7, #7]
    2f4a:	460b      	mov	r3, r1
    2f4c:	71bb      	strb	r3, [r7, #6]
    2f4e:	4613      	mov	r3, r2
    2f50:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f52:	79fb      	ldrb	r3, [r7, #7]
    2f54:	4618      	mov	r0, r3
    2f56:	4b1e      	ldr	r3, [pc, #120]	; (2fd0 <usb_d_ep_init+0x90>)
    2f58:	4798      	blx	r3
    2f5a:	4603      	mov	r3, r0
    2f5c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f62:	015b      	lsls	r3, r3, #5
    2f64:	4a1b      	ldr	r2, [pc, #108]	; (2fd4 <usb_d_ep_init+0x94>)
    2f66:	4413      	add	r3, r2
    2f68:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f6e:	2b00      	cmp	r3, #0
    2f70:	db02      	blt.n	2f78 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2f72:	f06f 0313 	mvn.w	r3, #19
    2f76:	e027      	b.n	2fc8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2f78:	20ff      	movs	r0, #255	; 0xff
    2f7a:	4b15      	ldr	r3, [pc, #84]	; (2fd0 <usb_d_ep_init+0x90>)
    2f7c:	4798      	blx	r3
    2f7e:	4603      	mov	r3, r0
    2f80:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f86:	2b00      	cmp	r3, #0
    2f88:	da02      	bge.n	2f90 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2f8a:	f06f 0314 	mvn.w	r3, #20
    2f8e:	e01b      	b.n	2fc8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f94:	015b      	lsls	r3, r3, #5
    2f96:	4a0f      	ldr	r2, [pc, #60]	; (2fd4 <usb_d_ep_init+0x94>)
    2f98:	4413      	add	r3, r2
    2f9a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2f9c:	88ba      	ldrh	r2, [r7, #4]
    2f9e:	79b9      	ldrb	r1, [r7, #6]
    2fa0:	79fb      	ldrb	r3, [r7, #7]
    2fa2:	4618      	mov	r0, r3
    2fa4:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <usb_d_ep_init+0x98>)
    2fa6:	4798      	blx	r3
    2fa8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2faa:	68fb      	ldr	r3, [r7, #12]
    2fac:	2b00      	cmp	r3, #0
    2fae:	da01      	bge.n	2fb4 <usb_d_ep_init+0x74>
		return rc;
    2fb0:	68fb      	ldr	r3, [r7, #12]
    2fb2:	e009      	b.n	2fc8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2fb4:	693b      	ldr	r3, [r7, #16]
    2fb6:	79fa      	ldrb	r2, [r7, #7]
    2fb8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2fba:	79bb      	ldrb	r3, [r7, #6]
    2fbc:	f003 0303 	and.w	r3, r3, #3
    2fc0:	b2da      	uxtb	r2, r3
    2fc2:	693b      	ldr	r3, [r7, #16]
    2fc4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2fc6:	2300      	movs	r3, #0
}
    2fc8:	4618      	mov	r0, r3
    2fca:	3718      	adds	r7, #24
    2fcc:	46bd      	mov	sp, r7
    2fce:	bd80      	pop	{r7, pc}
    2fd0:	00002a59 	.word	0x00002a59
    2fd4:	20000844 	.word	0x20000844
    2fd8:	00009d0d 	.word	0x00009d0d

00002fdc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2fdc:	b580      	push	{r7, lr}
    2fde:	b084      	sub	sp, #16
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	4603      	mov	r3, r0
    2fe4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2fe6:	79fb      	ldrb	r3, [r7, #7]
    2fe8:	4618      	mov	r0, r3
    2fea:	4b0d      	ldr	r3, [pc, #52]	; (3020 <usb_d_ep_deinit+0x44>)
    2fec:	4798      	blx	r3
    2fee:	4603      	mov	r3, r0
    2ff0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ff6:	015b      	lsls	r3, r3, #5
    2ff8:	4a0a      	ldr	r2, [pc, #40]	; (3024 <usb_d_ep_deinit+0x48>)
    2ffa:	4413      	add	r3, r2
    2ffc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3002:	2b00      	cmp	r3, #0
    3004:	db07      	blt.n	3016 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3006:	79fb      	ldrb	r3, [r7, #7]
    3008:	4618      	mov	r0, r3
    300a:	4b07      	ldr	r3, [pc, #28]	; (3028 <usb_d_ep_deinit+0x4c>)
    300c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    300e:	68bb      	ldr	r3, [r7, #8]
    3010:	22ff      	movs	r2, #255	; 0xff
    3012:	705a      	strb	r2, [r3, #1]
    3014:	e000      	b.n	3018 <usb_d_ep_deinit+0x3c>
		return;
    3016:	bf00      	nop
}
    3018:	3710      	adds	r7, #16
    301a:	46bd      	mov	sp, r7
    301c:	bd80      	pop	{r7, pc}
    301e:	bf00      	nop
    3020:	00002a59 	.word	0x00002a59
    3024:	20000844 	.word	0x20000844
    3028:	00009e41 	.word	0x00009e41

0000302c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    302c:	b580      	push	{r7, lr}
    302e:	b086      	sub	sp, #24
    3030:	af00      	add	r7, sp, #0
    3032:	4603      	mov	r3, r0
    3034:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3036:	79fb      	ldrb	r3, [r7, #7]
    3038:	4618      	mov	r0, r3
    303a:	4b15      	ldr	r3, [pc, #84]	; (3090 <usb_d_ep_enable+0x64>)
    303c:	4798      	blx	r3
    303e:	4603      	mov	r3, r0
    3040:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3042:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3046:	015b      	lsls	r3, r3, #5
    3048:	4a12      	ldr	r2, [pc, #72]	; (3094 <usb_d_ep_enable+0x68>)
    304a:	4413      	add	r3, r2
    304c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    304e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3052:	2b00      	cmp	r3, #0
    3054:	da02      	bge.n	305c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3056:	f06f 0311 	mvn.w	r3, #17
    305a:	e014      	b.n	3086 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    305c:	693b      	ldr	r3, [r7, #16]
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	2b00      	cmp	r3, #0
    3062:	d101      	bne.n	3068 <usb_d_ep_enable+0x3c>
    3064:	2202      	movs	r2, #2
    3066:	e000      	b.n	306a <usb_d_ep_enable+0x3e>
    3068:	2201      	movs	r2, #1
    306a:	693b      	ldr	r3, [r7, #16]
    306c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    306e:	79fb      	ldrb	r3, [r7, #7]
    3070:	4618      	mov	r0, r3
    3072:	4b09      	ldr	r3, [pc, #36]	; (3098 <usb_d_ep_enable+0x6c>)
    3074:	4798      	blx	r3
    3076:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3078:	68fb      	ldr	r3, [r7, #12]
    307a:	2b00      	cmp	r3, #0
    307c:	da02      	bge.n	3084 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    307e:	693b      	ldr	r3, [r7, #16]
    3080:	2200      	movs	r2, #0
    3082:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3084:	68fb      	ldr	r3, [r7, #12]
}
    3086:	4618      	mov	r0, r3
    3088:	3718      	adds	r7, #24
    308a:	46bd      	mov	sp, r7
    308c:	bd80      	pop	{r7, pc}
    308e:	bf00      	nop
    3090:	00002a59 	.word	0x00002a59
    3094:	20000844 	.word	0x20000844
    3098:	00009f25 	.word	0x00009f25

0000309c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    309c:	b590      	push	{r4, r7, lr}
    309e:	b08d      	sub	sp, #52	; 0x34
    30a0:	af02      	add	r7, sp, #8
    30a2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	7a1b      	ldrb	r3, [r3, #8]
    30a8:	4618      	mov	r0, r3
    30aa:	4b51      	ldr	r3, [pc, #324]	; (31f0 <usb_d_ep_transfer+0x154>)
    30ac:	4798      	blx	r3
    30ae:	4603      	mov	r3, r0
    30b0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    30b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    30b6:	015b      	lsls	r3, r3, #5
    30b8:	4a4e      	ldr	r2, [pc, #312]	; (31f4 <usb_d_ep_transfer+0x158>)
    30ba:	4413      	add	r3, r2
    30bc:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	7a1b      	ldrb	r3, [r3, #8]
    30c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    30c6:	2b00      	cmp	r3, #0
    30c8:	bf14      	ite	ne
    30ca:	2301      	movne	r3, #1
    30cc:	2300      	moveq	r3, #0
    30ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	7a5b      	ldrb	r3, [r3, #9]
    30d6:	2b00      	cmp	r3, #0
    30d8:	bf14      	ite	ne
    30da:	2301      	movne	r3, #1
    30dc:	2300      	moveq	r3, #0
    30de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	685b      	ldr	r3, [r3, #4]
    30e6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    30e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    30ec:	2b00      	cmp	r3, #0
    30ee:	da02      	bge.n	30f6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    30f0:	f06f 0311 	mvn.w	r3, #17
    30f4:	e077      	b.n	31e6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    30f6:	f107 0308 	add.w	r3, r7, #8
    30fa:	4618      	mov	r0, r3
    30fc:	4b3e      	ldr	r3, [pc, #248]	; (31f8 <usb_d_ep_transfer+0x15c>)
    30fe:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3100:	69bb      	ldr	r3, [r7, #24]
    3102:	789b      	ldrb	r3, [r3, #2]
    3104:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3106:	7bfb      	ldrb	r3, [r7, #15]
    3108:	b2db      	uxtb	r3, r3
    310a:	2b01      	cmp	r3, #1
    310c:	d10c      	bne.n	3128 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    310e:	69bb      	ldr	r3, [r7, #24]
    3110:	2203      	movs	r2, #3
    3112:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3114:	f107 0308 	add.w	r3, r7, #8
    3118:	4618      	mov	r0, r3
    311a:	4b38      	ldr	r3, [pc, #224]	; (31fc <usb_d_ep_transfer+0x160>)
    311c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    311e:	69bb      	ldr	r3, [r7, #24]
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	2b00      	cmp	r3, #0
    3124:	d151      	bne.n	31ca <usb_d_ep_transfer+0x12e>
    3126:	e017      	b.n	3158 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3128:	f107 0308 	add.w	r3, r7, #8
    312c:	4618      	mov	r0, r3
    312e:	4b33      	ldr	r3, [pc, #204]	; (31fc <usb_d_ep_transfer+0x160>)
    3130:	4798      	blx	r3
		switch (state) {
    3132:	7bfb      	ldrb	r3, [r7, #15]
    3134:	b2db      	uxtb	r3, r3
    3136:	2b05      	cmp	r3, #5
    3138:	d004      	beq.n	3144 <usb_d_ep_transfer+0xa8>
    313a:	2b06      	cmp	r3, #6
    313c:	d004      	beq.n	3148 <usb_d_ep_transfer+0xac>
    313e:	2b00      	cmp	r3, #0
    3140:	d005      	beq.n	314e <usb_d_ep_transfer+0xb2>
    3142:	e007      	b.n	3154 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3144:	2302      	movs	r3, #2
    3146:	e04e      	b.n	31e6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3148:	f06f 030f 	mvn.w	r3, #15
    314c:	e04b      	b.n	31e6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    314e:	f06f 0312 	mvn.w	r3, #18
    3152:	e048      	b.n	31e6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3154:	2301      	movs	r3, #1
    3156:	e046      	b.n	31e6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3158:	69bb      	ldr	r3, [r7, #24]
    315a:	7c9b      	ldrb	r3, [r3, #18]
    315c:	b29a      	uxth	r2, r3
    315e:	69bb      	ldr	r3, [r7, #24]
    3160:	7cdb      	ldrb	r3, [r3, #19]
    3162:	b29b      	uxth	r3, r3
    3164:	021b      	lsls	r3, r3, #8
    3166:	b29b      	uxth	r3, r3
    3168:	4413      	add	r3, r2
    316a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    316c:	8afb      	ldrh	r3, [r7, #22]
    316e:	2b00      	cmp	r3, #0
    3170:	d10b      	bne.n	318a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3172:	2301      	movs	r3, #1
    3174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3178:	2300      	movs	r3, #0
    317a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    317c:	2301      	movs	r3, #1
    317e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3182:	69bb      	ldr	r3, [r7, #24]
    3184:	2204      	movs	r2, #4
    3186:	709a      	strb	r2, [r3, #2]
    3188:	e01f      	b.n	31ca <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    318a:	69bb      	ldr	r3, [r7, #24]
    318c:	7b1b      	ldrb	r3, [r3, #12]
    318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3192:	2b00      	cmp	r3, #0
    3194:	bf14      	ite	ne
    3196:	2301      	movne	r3, #1
    3198:	2300      	moveq	r3, #0
    319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    319e:	8afa      	ldrh	r2, [r7, #22]
    31a0:	6a3b      	ldr	r3, [r7, #32]
    31a2:	429a      	cmp	r2, r3
    31a4:	d201      	bcs.n	31aa <usb_d_ep_transfer+0x10e>
				len = req_len;
    31a6:	8afb      	ldrh	r3, [r7, #22]
    31a8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    31aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    31ae:	2b00      	cmp	r3, #0
    31b0:	d008      	beq.n	31c4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    31b2:	8afa      	ldrh	r2, [r7, #22]
    31b4:	6a3b      	ldr	r3, [r7, #32]
    31b6:	429a      	cmp	r2, r3
    31b8:	bf8c      	ite	hi
    31ba:	2301      	movhi	r3, #1
    31bc:	2300      	movls	r3, #0
    31be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    31c2:	e002      	b.n	31ca <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    31c4:	2300      	movs	r3, #0
    31c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	7a18      	ldrb	r0, [r3, #8]
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	681a      	ldr	r2, [r3, #0]
    31d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    31d6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    31da:	9300      	str	r3, [sp, #0]
    31dc:	6a3b      	ldr	r3, [r7, #32]
    31de:	4c08      	ldr	r4, [pc, #32]	; (3200 <usb_d_ep_transfer+0x164>)
    31e0:	47a0      	blx	r4
    31e2:	6138      	str	r0, [r7, #16]
	return rc;
    31e4:	693b      	ldr	r3, [r7, #16]
}
    31e6:	4618      	mov	r0, r3
    31e8:	372c      	adds	r7, #44	; 0x2c
    31ea:	46bd      	mov	sp, r7
    31ec:	bd90      	pop	{r4, r7, pc}
    31ee:	bf00      	nop
    31f0:	00002a59 	.word	0x00002a59
    31f4:	20000844 	.word	0x20000844
    31f8:	0000ae99 	.word	0x0000ae99
    31fc:	0000aebf 	.word	0x0000aebf
    3200:	00002ad9 	.word	0x00002ad9

00003204 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3204:	b580      	push	{r7, lr}
    3206:	b084      	sub	sp, #16
    3208:	af00      	add	r7, sp, #0
    320a:	4603      	mov	r3, r0
    320c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    320e:	79fb      	ldrb	r3, [r7, #7]
    3210:	4618      	mov	r0, r3
    3212:	4b0e      	ldr	r3, [pc, #56]	; (324c <usb_d_ep_abort+0x48>)
    3214:	4798      	blx	r3
    3216:	4603      	mov	r3, r0
    3218:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    321e:	015b      	lsls	r3, r3, #5
    3220:	4a0b      	ldr	r2, [pc, #44]	; (3250 <usb_d_ep_abort+0x4c>)
    3222:	4413      	add	r3, r2
    3224:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3226:	f997 300f 	ldrsb.w	r3, [r7, #15]
    322a:	2b00      	cmp	r3, #0
    322c:	db0a      	blt.n	3244 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    322e:	79fb      	ldrb	r3, [r7, #7]
    3230:	4618      	mov	r0, r3
    3232:	4b08      	ldr	r3, [pc, #32]	; (3254 <usb_d_ep_abort+0x50>)
    3234:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3236:	68bb      	ldr	r3, [r7, #8]
    3238:	2201      	movs	r2, #1
    323a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    323c:	68bb      	ldr	r3, [r7, #8]
    323e:	2204      	movs	r2, #4
    3240:	70da      	strb	r2, [r3, #3]
    3242:	e000      	b.n	3246 <usb_d_ep_abort+0x42>
		return;
    3244:	bf00      	nop
}
    3246:	3710      	adds	r7, #16
    3248:	46bd      	mov	sp, r7
    324a:	bd80      	pop	{r7, pc}
    324c:	00002a59 	.word	0x00002a59
    3250:	20000844 	.word	0x20000844
    3254:	0000a691 	.word	0x0000a691

00003258 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3258:	b580      	push	{r7, lr}
    325a:	b086      	sub	sp, #24
    325c:	af00      	add	r7, sp, #0
    325e:	4603      	mov	r3, r0
    3260:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3262:	79fb      	ldrb	r3, [r7, #7]
    3264:	4618      	mov	r0, r3
    3266:	4b1a      	ldr	r3, [pc, #104]	; (32d0 <_usb_d_ep_halt_clr+0x78>)
    3268:	4798      	blx	r3
    326a:	4603      	mov	r3, r0
    326c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    326e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3272:	015b      	lsls	r3, r3, #5
    3274:	4a17      	ldr	r2, [pc, #92]	; (32d4 <_usb_d_ep_halt_clr+0x7c>)
    3276:	4413      	add	r3, r2
    3278:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    327a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    327e:	2b00      	cmp	r3, #0
    3280:	da02      	bge.n	3288 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3282:	f06f 0311 	mvn.w	r3, #17
    3286:	e01f      	b.n	32c8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3288:	79fb      	ldrb	r3, [r7, #7]
    328a:	2102      	movs	r1, #2
    328c:	4618      	mov	r0, r3
    328e:	4b12      	ldr	r3, [pc, #72]	; (32d8 <_usb_d_ep_halt_clr+0x80>)
    3290:	4798      	blx	r3
    3292:	4603      	mov	r3, r0
    3294:	2b00      	cmp	r3, #0
    3296:	d016      	beq.n	32c6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3298:	79fb      	ldrb	r3, [r7, #7]
    329a:	2100      	movs	r1, #0
    329c:	4618      	mov	r0, r3
    329e:	4b0e      	ldr	r3, [pc, #56]	; (32d8 <_usb_d_ep_halt_clr+0x80>)
    32a0:	4798      	blx	r3
    32a2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    32a4:	68fb      	ldr	r3, [r7, #12]
    32a6:	2b00      	cmp	r3, #0
    32a8:	da01      	bge.n	32ae <_usb_d_ep_halt_clr+0x56>
			return rc;
    32aa:	68fb      	ldr	r3, [r7, #12]
    32ac:	e00c      	b.n	32c8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    32ae:	693b      	ldr	r3, [r7, #16]
    32b0:	2201      	movs	r2, #1
    32b2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    32b4:	693b      	ldr	r3, [r7, #16]
    32b6:	2203      	movs	r2, #3
    32b8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    32ba:	693b      	ldr	r3, [r7, #16]
    32bc:	69db      	ldr	r3, [r3, #28]
    32be:	79f8      	ldrb	r0, [r7, #7]
    32c0:	2200      	movs	r2, #0
    32c2:	2103      	movs	r1, #3
    32c4:	4798      	blx	r3
	}
	return ERR_NONE;
    32c6:	2300      	movs	r3, #0
}
    32c8:	4618      	mov	r0, r3
    32ca:	3718      	adds	r7, #24
    32cc:	46bd      	mov	sp, r7
    32ce:	bd80      	pop	{r7, pc}
    32d0:	00002a59 	.word	0x00002a59
    32d4:	20000844 	.word	0x20000844
    32d8:	0000a29d 	.word	0x0000a29d

000032dc <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b082      	sub	sp, #8
    32e0:	af00      	add	r7, sp, #0
    32e2:	4603      	mov	r3, r0
    32e4:	460a      	mov	r2, r1
    32e6:	71fb      	strb	r3, [r7, #7]
    32e8:	4613      	mov	r3, r2
    32ea:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    32ec:	79bb      	ldrb	r3, [r7, #6]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d105      	bne.n	32fe <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    32f2:	79fb      	ldrb	r3, [r7, #7]
    32f4:	4618      	mov	r0, r3
    32f6:	4b0c      	ldr	r3, [pc, #48]	; (3328 <usb_d_ep_halt+0x4c>)
    32f8:	4798      	blx	r3
    32fa:	4603      	mov	r3, r0
    32fc:	e00f      	b.n	331e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    32fe:	79bb      	ldrb	r3, [r7, #6]
    3300:	2b01      	cmp	r3, #1
    3302:	d106      	bne.n	3312 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3304:	79fb      	ldrb	r3, [r7, #7]
    3306:	2101      	movs	r1, #1
    3308:	4618      	mov	r0, r3
    330a:	4b08      	ldr	r3, [pc, #32]	; (332c <usb_d_ep_halt+0x50>)
    330c:	4798      	blx	r3
    330e:	4603      	mov	r3, r0
    3310:	e005      	b.n	331e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3312:	79fb      	ldrb	r3, [r7, #7]
    3314:	2102      	movs	r1, #2
    3316:	4618      	mov	r0, r3
    3318:	4b04      	ldr	r3, [pc, #16]	; (332c <usb_d_ep_halt+0x50>)
    331a:	4798      	blx	r3
    331c:	4603      	mov	r3, r0
	}
}
    331e:	4618      	mov	r0, r3
    3320:	3708      	adds	r7, #8
    3322:	46bd      	mov	sp, r7
    3324:	bd80      	pop	{r7, pc}
    3326:	bf00      	nop
    3328:	00003259 	.word	0x00003259
    332c:	0000a29d 	.word	0x0000a29d

00003330 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3330:	b580      	push	{r7, lr}
    3332:	b086      	sub	sp, #24
    3334:	af00      	add	r7, sp, #0
    3336:	4603      	mov	r3, r0
    3338:	603a      	str	r2, [r7, #0]
    333a:	71fb      	strb	r3, [r7, #7]
    333c:	460b      	mov	r3, r1
    333e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3340:	79fb      	ldrb	r3, [r7, #7]
    3342:	4618      	mov	r0, r3
    3344:	4b16      	ldr	r3, [pc, #88]	; (33a0 <usb_d_ep_register_callback+0x70>)
    3346:	4798      	blx	r3
    3348:	4603      	mov	r3, r0
    334a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    334c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3350:	015b      	lsls	r3, r3, #5
    3352:	4a14      	ldr	r2, [pc, #80]	; (33a4 <usb_d_ep_register_callback+0x74>)
    3354:	4413      	add	r3, r2
    3356:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3358:	683b      	ldr	r3, [r7, #0]
    335a:	2b00      	cmp	r3, #0
    335c:	d001      	beq.n	3362 <usb_d_ep_register_callback+0x32>
    335e:	683b      	ldr	r3, [r7, #0]
    3360:	e000      	b.n	3364 <usb_d_ep_register_callback+0x34>
    3362:	4b11      	ldr	r3, [pc, #68]	; (33a8 <usb_d_ep_register_callback+0x78>)
    3364:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3366:	f997 3017 	ldrsb.w	r3, [r7, #23]
    336a:	2b00      	cmp	r3, #0
    336c:	db13      	blt.n	3396 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    336e:	79bb      	ldrb	r3, [r7, #6]
    3370:	2b01      	cmp	r3, #1
    3372:	d008      	beq.n	3386 <usb_d_ep_register_callback+0x56>
    3374:	2b02      	cmp	r3, #2
    3376:	d00a      	beq.n	338e <usb_d_ep_register_callback+0x5e>
    3378:	2b00      	cmp	r3, #0
    337a:	d000      	beq.n	337e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    337c:	e00c      	b.n	3398 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    337e:	693b      	ldr	r3, [r7, #16]
    3380:	68fa      	ldr	r2, [r7, #12]
    3382:	615a      	str	r2, [r3, #20]
		break;
    3384:	e008      	b.n	3398 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3386:	693b      	ldr	r3, [r7, #16]
    3388:	68fa      	ldr	r2, [r7, #12]
    338a:	619a      	str	r2, [r3, #24]
		break;
    338c:	e004      	b.n	3398 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    338e:	693b      	ldr	r3, [r7, #16]
    3390:	68fa      	ldr	r2, [r7, #12]
    3392:	61da      	str	r2, [r3, #28]
		break;
    3394:	e000      	b.n	3398 <usb_d_ep_register_callback+0x68>
		return;
    3396:	bf00      	nop
	}
}
    3398:	3718      	adds	r7, #24
    339a:	46bd      	mov	sp, r7
    339c:	bd80      	pop	{r7, pc}
    339e:	bf00      	nop
    33a0:	00002a59 	.word	0x00002a59
    33a4:	20000844 	.word	0x20000844
    33a8:	00002b2d 	.word	0x00002b2d

000033ac <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    33ac:	b480      	push	{r7}
    33ae:	b085      	sub	sp, #20
    33b0:	af00      	add	r7, sp, #0
    33b2:	4603      	mov	r3, r0
    33b4:	60b9      	str	r1, [r7, #8]
    33b6:	607a      	str	r2, [r7, #4]
    33b8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    33ba:	7bfb      	ldrb	r3, [r7, #15]
    33bc:	f083 0301 	eor.w	r3, r3, #1
    33c0:	b2db      	uxtb	r3, r3
    33c2:	2b00      	cmp	r3, #0
    33c4:	d000      	beq.n	33c8 <assert+0x1c>
		__asm("BKPT #0");
    33c6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    33c8:	bf00      	nop
    33ca:	3714      	adds	r7, #20
    33cc:	46bd      	mov	sp, r7
    33ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d2:	4770      	bx	lr

000033d4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    33d4:	b480      	push	{r7}
    33d6:	b085      	sub	sp, #20
    33d8:	af00      	add	r7, sp, #0
    33da:	6078      	str	r0, [r7, #4]
    33dc:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	681b      	ldr	r3, [r3, #0]
    33e2:	60fb      	str	r3, [r7, #12]
    33e4:	e008      	b.n	33f8 <is_list_element+0x24>
		if (it == element) {
    33e6:	68fa      	ldr	r2, [r7, #12]
    33e8:	683b      	ldr	r3, [r7, #0]
    33ea:	429a      	cmp	r2, r3
    33ec:	d101      	bne.n	33f2 <is_list_element+0x1e>
			return true;
    33ee:	2301      	movs	r3, #1
    33f0:	e006      	b.n	3400 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    33f2:	68fb      	ldr	r3, [r7, #12]
    33f4:	681b      	ldr	r3, [r3, #0]
    33f6:	60fb      	str	r3, [r7, #12]
    33f8:	68fb      	ldr	r3, [r7, #12]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d1f3      	bne.n	33e6 <is_list_element+0x12>
		}
	}

	return false;
    33fe:	2300      	movs	r3, #0
}
    3400:	4618      	mov	r0, r3
    3402:	3714      	adds	r7, #20
    3404:	46bd      	mov	sp, r7
    3406:	f85d 7b04 	ldr.w	r7, [sp], #4
    340a:	4770      	bx	lr

0000340c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    340c:	b580      	push	{r7, lr}
    340e:	b082      	sub	sp, #8
    3410:	af00      	add	r7, sp, #0
    3412:	6078      	str	r0, [r7, #4]
    3414:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3416:	6839      	ldr	r1, [r7, #0]
    3418:	6878      	ldr	r0, [r7, #4]
    341a:	4b0f      	ldr	r3, [pc, #60]	; (3458 <list_insert_as_head+0x4c>)
    341c:	4798      	blx	r3
    341e:	4603      	mov	r3, r0
    3420:	2b00      	cmp	r3, #0
    3422:	bf14      	ite	ne
    3424:	2301      	movne	r3, #1
    3426:	2300      	moveq	r3, #0
    3428:	b2db      	uxtb	r3, r3
    342a:	f083 0301 	eor.w	r3, r3, #1
    342e:	b2db      	uxtb	r3, r3
    3430:	f003 0301 	and.w	r3, r3, #1
    3434:	b2db      	uxtb	r3, r3
    3436:	2239      	movs	r2, #57	; 0x39
    3438:	4908      	ldr	r1, [pc, #32]	; (345c <list_insert_as_head+0x50>)
    343a:	4618      	mov	r0, r3
    343c:	4b08      	ldr	r3, [pc, #32]	; (3460 <list_insert_as_head+0x54>)
    343e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	681a      	ldr	r2, [r3, #0]
    3444:	683b      	ldr	r3, [r7, #0]
    3446:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	683a      	ldr	r2, [r7, #0]
    344c:	601a      	str	r2, [r3, #0]
}
    344e:	bf00      	nop
    3450:	3708      	adds	r7, #8
    3452:	46bd      	mov	sp, r7
    3454:	bd80      	pop	{r7, pc}
    3456:	bf00      	nop
    3458:	000033d5 	.word	0x000033d5
    345c:	0000ed3c 	.word	0x0000ed3c
    3460:	000033ad 	.word	0x000033ad

00003464 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3464:	b480      	push	{r7}
    3466:	b083      	sub	sp, #12
    3468:	af00      	add	r7, sp, #0
    346a:	6078      	str	r0, [r7, #4]
    346c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	681a      	ldr	r2, [r3, #0]
    3472:	683b      	ldr	r3, [r7, #0]
    3474:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	683a      	ldr	r2, [r7, #0]
    347a:	601a      	str	r2, [r3, #0]
}
    347c:	bf00      	nop
    347e:	370c      	adds	r7, #12
    3480:	46bd      	mov	sp, r7
    3482:	f85d 7b04 	ldr.w	r7, [sp], #4
    3486:	4770      	bx	lr

00003488 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3488:	b580      	push	{r7, lr}
    348a:	b084      	sub	sp, #16
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
    3490:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3498:	6839      	ldr	r1, [r7, #0]
    349a:	6878      	ldr	r0, [r7, #4]
    349c:	4b16      	ldr	r3, [pc, #88]	; (34f8 <list_insert_at_end+0x70>)
    349e:	4798      	blx	r3
    34a0:	4603      	mov	r3, r0
    34a2:	2b00      	cmp	r3, #0
    34a4:	bf14      	ite	ne
    34a6:	2301      	movne	r3, #1
    34a8:	2300      	moveq	r3, #0
    34aa:	b2db      	uxtb	r3, r3
    34ac:	f083 0301 	eor.w	r3, r3, #1
    34b0:	b2db      	uxtb	r3, r3
    34b2:	f003 0301 	and.w	r3, r3, #1
    34b6:	b2db      	uxtb	r3, r3
    34b8:	224f      	movs	r2, #79	; 0x4f
    34ba:	4910      	ldr	r1, [pc, #64]	; (34fc <list_insert_at_end+0x74>)
    34bc:	4618      	mov	r0, r3
    34be:	4b10      	ldr	r3, [pc, #64]	; (3500 <list_insert_at_end+0x78>)
    34c0:	4798      	blx	r3

	if (!list->head) {
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	681b      	ldr	r3, [r3, #0]
    34c6:	2b00      	cmp	r3, #0
    34c8:	d109      	bne.n	34de <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	683a      	ldr	r2, [r7, #0]
    34ce:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    34d0:	683b      	ldr	r3, [r7, #0]
    34d2:	2200      	movs	r2, #0
    34d4:	601a      	str	r2, [r3, #0]
		return;
    34d6:	e00c      	b.n	34f2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    34d8:	68fb      	ldr	r3, [r7, #12]
    34da:	681b      	ldr	r3, [r3, #0]
    34dc:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    34de:	68fb      	ldr	r3, [r7, #12]
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d1f8      	bne.n	34d8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    34e6:	68fb      	ldr	r3, [r7, #12]
    34e8:	683a      	ldr	r2, [r7, #0]
    34ea:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    34ec:	683b      	ldr	r3, [r7, #0]
    34ee:	2200      	movs	r2, #0
    34f0:	601a      	str	r2, [r3, #0]
}
    34f2:	3710      	adds	r7, #16
    34f4:	46bd      	mov	sp, r7
    34f6:	bd80      	pop	{r7, pc}
    34f8:	000033d5 	.word	0x000033d5
    34fc:	0000ed3c 	.word	0x0000ed3c
    3500:	000033ad 	.word	0x000033ad

00003504 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3504:	b480      	push	{r7}
    3506:	b085      	sub	sp, #20
    3508:	af00      	add	r7, sp, #0
    350a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	2b00      	cmp	r3, #0
    3512:	d009      	beq.n	3528 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	681b      	ldr	r3, [r3, #0]
    3518:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    351a:	687b      	ldr	r3, [r7, #4]
    351c:	681b      	ldr	r3, [r3, #0]
    351e:	681a      	ldr	r2, [r3, #0]
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3524:	68fb      	ldr	r3, [r7, #12]
    3526:	e000      	b.n	352a <list_remove_head+0x26>
	}

	return NULL;
    3528:	2300      	movs	r3, #0
}
    352a:	4618      	mov	r0, r3
    352c:	3714      	adds	r7, #20
    352e:	46bd      	mov	sp, r7
    3530:	f85d 7b04 	ldr.w	r7, [sp], #4
    3534:	4770      	bx	lr

00003536 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3536:	b480      	push	{r7}
    3538:	b085      	sub	sp, #20
    353a:	af00      	add	r7, sp, #0
    353c:	6078      	str	r0, [r7, #4]
    353e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3540:	683b      	ldr	r3, [r7, #0]
    3542:	2b00      	cmp	r3, #0
    3544:	d101      	bne.n	354a <list_delete_element+0x14>
		return false;
    3546:	2300      	movs	r3, #0
    3548:	e024      	b.n	3594 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	681a      	ldr	r2, [r3, #0]
    354e:	683b      	ldr	r3, [r7, #0]
    3550:	429a      	cmp	r2, r3
    3552:	d106      	bne.n	3562 <list_delete_element+0x2c>
		list->head = list->head->next;
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	681a      	ldr	r2, [r3, #0]
    355a:	687b      	ldr	r3, [r7, #4]
    355c:	601a      	str	r2, [r3, #0]
		return true;
    355e:	2301      	movs	r3, #1
    3560:	e018      	b.n	3594 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3568:	e002      	b.n	3570 <list_delete_element+0x3a>
			it = it->next;
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3570:	68fb      	ldr	r3, [r7, #12]
    3572:	2b00      	cmp	r3, #0
    3574:	d004      	beq.n	3580 <list_delete_element+0x4a>
    3576:	68fb      	ldr	r3, [r7, #12]
    3578:	681a      	ldr	r2, [r3, #0]
    357a:	683b      	ldr	r3, [r7, #0]
    357c:	429a      	cmp	r2, r3
    357e:	d1f4      	bne.n	356a <list_delete_element+0x34>
		}
		if (it) {
    3580:	68fb      	ldr	r3, [r7, #12]
    3582:	2b00      	cmp	r3, #0
    3584:	d005      	beq.n	3592 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3586:	683b      	ldr	r3, [r7, #0]
    3588:	681a      	ldr	r2, [r3, #0]
    358a:	68fb      	ldr	r3, [r7, #12]
    358c:	601a      	str	r2, [r3, #0]
			return true;
    358e:	2301      	movs	r3, #1
    3590:	e000      	b.n	3594 <list_delete_element+0x5e>
		}
	}

	return false;
    3592:	2300      	movs	r3, #0
}
    3594:	4618      	mov	r0, r3
    3596:	3714      	adds	r7, #20
    3598:	46bd      	mov	sp, r7
    359a:	f85d 7b04 	ldr.w	r7, [sp], #4
    359e:	4770      	bx	lr

000035a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    35a0:	b480      	push	{r7}
    35a2:	b083      	sub	sp, #12
    35a4:	af00      	add	r7, sp, #0
    35a6:	4603      	mov	r3, r0
    35a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    35aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    35ae:	2b00      	cmp	r3, #0
    35b0:	db0b      	blt.n	35ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35b2:	4909      	ldr	r1, [pc, #36]	; (35d8 <__NVIC_EnableIRQ+0x38>)
    35b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    35b8:	095b      	lsrs	r3, r3, #5
    35ba:	88fa      	ldrh	r2, [r7, #6]
    35bc:	f002 021f 	and.w	r2, r2, #31
    35c0:	2001      	movs	r0, #1
    35c2:	fa00 f202 	lsl.w	r2, r0, r2
    35c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    35ca:	bf00      	nop
    35cc:	370c      	adds	r7, #12
    35ce:	46bd      	mov	sp, r7
    35d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35d4:	4770      	bx	lr
    35d6:	bf00      	nop
    35d8:	e000e100 	.word	0xe000e100

000035dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    35dc:	b480      	push	{r7}
    35de:	b083      	sub	sp, #12
    35e0:	af00      	add	r7, sp, #0
    35e2:	4603      	mov	r3, r0
    35e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    35e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    35ea:	2b00      	cmp	r3, #0
    35ec:	db10      	blt.n	3610 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35ee:	490b      	ldr	r1, [pc, #44]	; (361c <__NVIC_DisableIRQ+0x40>)
    35f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    35f4:	095b      	lsrs	r3, r3, #5
    35f6:	88fa      	ldrh	r2, [r7, #6]
    35f8:	f002 021f 	and.w	r2, r2, #31
    35fc:	2001      	movs	r0, #1
    35fe:	fa00 f202 	lsl.w	r2, r0, r2
    3602:	3320      	adds	r3, #32
    3604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3608:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    360c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3610:	bf00      	nop
    3612:	370c      	adds	r7, #12
    3614:	46bd      	mov	sp, r7
    3616:	f85d 7b04 	ldr.w	r7, [sp], #4
    361a:	4770      	bx	lr
    361c:	e000e100 	.word	0xe000e100

00003620 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3620:	b480      	push	{r7}
    3622:	b083      	sub	sp, #12
    3624:	af00      	add	r7, sp, #0
    3626:	4603      	mov	r3, r0
    3628:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    362a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    362e:	2b00      	cmp	r3, #0
    3630:	db0c      	blt.n	364c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3632:	4909      	ldr	r1, [pc, #36]	; (3658 <__NVIC_ClearPendingIRQ+0x38>)
    3634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3638:	095b      	lsrs	r3, r3, #5
    363a:	88fa      	ldrh	r2, [r7, #6]
    363c:	f002 021f 	and.w	r2, r2, #31
    3640:	2001      	movs	r0, #1
    3642:	fa00 f202 	lsl.w	r2, r0, r2
    3646:	3360      	adds	r3, #96	; 0x60
    3648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    364c:	bf00      	nop
    364e:	370c      	adds	r7, #12
    3650:	46bd      	mov	sp, r7
    3652:	f85d 7b04 	ldr.w	r7, [sp], #4
    3656:	4770      	bx	lr
    3658:	e000e100 	.word	0xe000e100

0000365c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    365c:	b480      	push	{r7}
    365e:	b083      	sub	sp, #12
    3660:	af00      	add	r7, sp, #0
    3662:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3668:	095b      	lsrs	r3, r3, #5
    366a:	f003 0301 	and.w	r3, r3, #1
    366e:	2b00      	cmp	r3, #0
    3670:	bf14      	ite	ne
    3672:	2301      	movne	r3, #1
    3674:	2300      	moveq	r3, #0
    3676:	b2db      	uxtb	r3, r3
}
    3678:	4618      	mov	r0, r3
    367a:	370c      	adds	r7, #12
    367c:	46bd      	mov	sp, r7
    367e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3682:	4770      	bx	lr

00003684 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3684:	b480      	push	{r7}
    3686:	b083      	sub	sp, #12
    3688:	af00      	add	r7, sp, #0
    368a:	6078      	str	r0, [r7, #4]
    368c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	683a      	ldr	r2, [r7, #0]
    3692:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3694:	bf00      	nop
    3696:	370c      	adds	r7, #12
    3698:	46bd      	mov	sp, r7
    369a:	f85d 7b04 	ldr.w	r7, [sp], #4
    369e:	4770      	bx	lr

000036a0 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    36a0:	b480      	push	{r7}
    36a2:	b083      	sub	sp, #12
    36a4:	af00      	add	r7, sp, #0
    36a6:	6078      	str	r0, [r7, #4]
    36a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    36aa:	687b      	ldr	r3, [r7, #4]
    36ac:	683a      	ldr	r2, [r7, #0]
    36ae:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    36b0:	bf00      	nop
    36b2:	370c      	adds	r7, #12
    36b4:	46bd      	mov	sp, r7
    36b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ba:	4770      	bx	lr

000036bc <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    36bc:	b480      	push	{r7}
    36be:	b083      	sub	sp, #12
    36c0:	af00      	add	r7, sp, #0
    36c2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    36c4:	687b      	ldr	r3, [r7, #4]
    36c6:	699b      	ldr	r3, [r3, #24]
    36c8:	f043 0201 	orr.w	r2, r3, #1
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    36d0:	bf00      	nop
    36d2:	370c      	adds	r7, #12
    36d4:	46bd      	mov	sp, r7
    36d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    36da:	4770      	bx	lr

000036dc <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    36dc:	b480      	push	{r7}
    36de:	b085      	sub	sp, #20
    36e0:	af00      	add	r7, sp, #0
    36e2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    36e4:	687b      	ldr	r3, [r7, #4]
    36e6:	699b      	ldr	r3, [r3, #24]
    36e8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    36ea:	68fb      	ldr	r3, [r7, #12]
    36ec:	f003 0301 	and.w	r3, r3, #1
    36f0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    36f2:	68fb      	ldr	r3, [r7, #12]
    36f4:	2b00      	cmp	r3, #0
    36f6:	bf14      	ite	ne
    36f8:	2301      	movne	r3, #1
    36fa:	2300      	moveq	r3, #0
    36fc:	b2db      	uxtb	r3, r3
}
    36fe:	4618      	mov	r0, r3
    3700:	3714      	adds	r7, #20
    3702:	46bd      	mov	sp, r7
    3704:	f85d 7b04 	ldr.w	r7, [sp], #4
    3708:	4770      	bx	lr

0000370a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    370a:	b480      	push	{r7}
    370c:	b083      	sub	sp, #12
    370e:	af00      	add	r7, sp, #0
    3710:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3712:	687b      	ldr	r3, [r7, #4]
    3714:	699b      	ldr	r3, [r3, #24]
    3716:	f023 0201 	bic.w	r2, r3, #1
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    371e:	bf00      	nop
    3720:	370c      	adds	r7, #12
    3722:	46bd      	mov	sp, r7
    3724:	f85d 7b04 	ldr.w	r7, [sp], #4
    3728:	4770      	bx	lr

0000372a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    372a:	b480      	push	{r7}
    372c:	b083      	sub	sp, #12
    372e:	af00      	add	r7, sp, #0
    3730:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	699b      	ldr	r3, [r3, #24]
    3736:	f043 0202 	orr.w	r2, r3, #2
    373a:	687b      	ldr	r3, [r7, #4]
    373c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    373e:	bf00      	nop
    3740:	370c      	adds	r7, #12
    3742:	46bd      	mov	sp, r7
    3744:	f85d 7b04 	ldr.w	r7, [sp], #4
    3748:	4770      	bx	lr

0000374a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    374a:	b480      	push	{r7}
    374c:	b083      	sub	sp, #12
    374e:	af00      	add	r7, sp, #0
    3750:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3752:	687b      	ldr	r3, [r7, #4]
    3754:	699b      	ldr	r3, [r3, #24]
    3756:	f023 0202 	bic.w	r2, r3, #2
    375a:	687b      	ldr	r3, [r7, #4]
    375c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    375e:	bf00      	nop
    3760:	370c      	adds	r7, #12
    3762:	46bd      	mov	sp, r7
    3764:	f85d 7b04 	ldr.w	r7, [sp], #4
    3768:	4770      	bx	lr

0000376a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    376a:	b480      	push	{r7}
    376c:	b083      	sub	sp, #12
    376e:	af00      	add	r7, sp, #0
    3770:	6078      	str	r0, [r7, #4]
    3772:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	699a      	ldr	r2, [r3, #24]
    3778:	683b      	ldr	r3, [r7, #0]
    377a:	431a      	orrs	r2, r3
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3780:	bf00      	nop
    3782:	370c      	adds	r7, #12
    3784:	46bd      	mov	sp, r7
    3786:	f85d 7b04 	ldr.w	r7, [sp], #4
    378a:	4770      	bx	lr

0000378c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    378c:	b480      	push	{r7}
    378e:	b083      	sub	sp, #12
    3790:	af00      	add	r7, sp, #0
    3792:	6078      	str	r0, [r7, #4]
    3794:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	683a      	ldr	r2, [r7, #0]
    379a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    379c:	bf00      	nop
    379e:	370c      	adds	r7, #12
    37a0:	46bd      	mov	sp, r7
    37a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37a6:	4770      	bx	lr

000037a8 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    37a8:	b480      	push	{r7}
    37aa:	b083      	sub	sp, #12
    37ac:	af00      	add	r7, sp, #0
    37ae:	6078      	str	r0, [r7, #4]
    37b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    37b2:	687b      	ldr	r3, [r7, #4]
    37b4:	683a      	ldr	r2, [r7, #0]
    37b6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    37b8:	bf00      	nop
    37ba:	370c      	adds	r7, #12
    37bc:	46bd      	mov	sp, r7
    37be:	f85d 7b04 	ldr.w	r7, [sp], #4
    37c2:	4770      	bx	lr

000037c4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    37c4:	b480      	push	{r7}
    37c6:	b083      	sub	sp, #12
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    37d0:	4618      	mov	r0, r3
    37d2:	370c      	adds	r7, #12
    37d4:	46bd      	mov	sp, r7
    37d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37da:	4770      	bx	lr

000037dc <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    37dc:	b480      	push	{r7}
    37de:	b083      	sub	sp, #12
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    37e6:	687b      	ldr	r3, [r7, #4]
    37e8:	683a      	ldr	r2, [r7, #0]
    37ea:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    37ec:	bf00      	nop
    37ee:	370c      	adds	r7, #12
    37f0:	46bd      	mov	sp, r7
    37f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f6:	4770      	bx	lr

000037f8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    37f8:	b480      	push	{r7}
    37fa:	b083      	sub	sp, #12
    37fc:	af00      	add	r7, sp, #0
    37fe:	6078      	str	r0, [r7, #4]
    3800:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	683a      	ldr	r2, [r7, #0]
    3806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    380a:	bf00      	nop
    380c:	370c      	adds	r7, #12
    380e:	46bd      	mov	sp, r7
    3810:	f85d 7b04 	ldr.w	r7, [sp], #4
    3814:	4770      	bx	lr

00003816 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3816:	b480      	push	{r7}
    3818:	b083      	sub	sp, #12
    381a:	af00      	add	r7, sp, #0
    381c:	6078      	str	r0, [r7, #4]
    381e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3820:	687b      	ldr	r3, [r7, #4]
    3822:	683a      	ldr	r2, [r7, #0]
    3824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3828:	bf00      	nop
    382a:	370c      	adds	r7, #12
    382c:	46bd      	mov	sp, r7
    382e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3832:	4770      	bx	lr

00003834 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3834:	b480      	push	{r7}
    3836:	b083      	sub	sp, #12
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
    383c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    383e:	687b      	ldr	r3, [r7, #4]
    3840:	683a      	ldr	r2, [r7, #0]
    3842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3846:	bf00      	nop
    3848:	370c      	adds	r7, #12
    384a:	46bd      	mov	sp, r7
    384c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3850:	4770      	bx	lr

00003852 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3852:	b480      	push	{r7}
    3854:	b083      	sub	sp, #12
    3856:	af00      	add	r7, sp, #0
    3858:	6078      	str	r0, [r7, #4]
    385a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    385c:	687b      	ldr	r3, [r7, #4]
    385e:	683a      	ldr	r2, [r7, #0]
    3860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3864:	bf00      	nop
    3866:	370c      	adds	r7, #12
    3868:	46bd      	mov	sp, r7
    386a:	f85d 7b04 	ldr.w	r7, [sp], #4
    386e:	4770      	bx	lr

00003870 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3870:	b480      	push	{r7}
    3872:	b083      	sub	sp, #12
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
    3878:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	683a      	ldr	r2, [r7, #0]
    387e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3882:	bf00      	nop
    3884:	370c      	adds	r7, #12
    3886:	46bd      	mov	sp, r7
    3888:	f85d 7b04 	ldr.w	r7, [sp], #4
    388c:	4770      	bx	lr

0000388e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    388e:	b480      	push	{r7}
    3890:	b083      	sub	sp, #12
    3892:	af00      	add	r7, sp, #0
    3894:	6078      	str	r0, [r7, #4]
    3896:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	683a      	ldr	r2, [r7, #0]
    389c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    38a0:	bf00      	nop
    38a2:	370c      	adds	r7, #12
    38a4:	46bd      	mov	sp, r7
    38a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    38aa:	4770      	bx	lr

000038ac <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    38ac:	b480      	push	{r7}
    38ae:	b083      	sub	sp, #12
    38b0:	af00      	add	r7, sp, #0
    38b2:	6078      	str	r0, [r7, #4]
    38b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	683a      	ldr	r2, [r7, #0]
    38ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    38be:	bf00      	nop
    38c0:	370c      	adds	r7, #12
    38c2:	46bd      	mov	sp, r7
    38c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    38c8:	4770      	bx	lr

000038ca <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    38ca:	b480      	push	{r7}
    38cc:	b083      	sub	sp, #12
    38ce:	af00      	add	r7, sp, #0
    38d0:	6078      	str	r0, [r7, #4]
    38d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    38d4:	687b      	ldr	r3, [r7, #4]
    38d6:	683a      	ldr	r2, [r7, #0]
    38d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    38dc:	bf00      	nop
    38de:	370c      	adds	r7, #12
    38e0:	46bd      	mov	sp, r7
    38e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    38e6:	4770      	bx	lr

000038e8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    38e8:	b480      	push	{r7}
    38ea:	b083      	sub	sp, #12
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
    38f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	683a      	ldr	r2, [r7, #0]
    38f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    38fa:	bf00      	nop
    38fc:	370c      	adds	r7, #12
    38fe:	46bd      	mov	sp, r7
    3900:	f85d 7b04 	ldr.w	r7, [sp], #4
    3904:	4770      	bx	lr
	...

00003908 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3908:	b580      	push	{r7, lr}
    390a:	b082      	sub	sp, #8
    390c:	af00      	add	r7, sp, #0
    390e:	6078      	str	r0, [r7, #4]
    3910:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	683a      	ldr	r2, [r7, #0]
    3916:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	4618      	mov	r0, r3
    391e:	4b56      	ldr	r3, [pc, #344]	; (3a78 <_can_async_init+0x170>)
    3920:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3922:	bf00      	nop
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	4618      	mov	r0, r3
    392a:	4b54      	ldr	r3, [pc, #336]	; (3a7c <_can_async_init+0x174>)
    392c:	4798      	blx	r3
    392e:	4603      	mov	r3, r0
    3930:	f083 0301 	eor.w	r3, r3, #1
    3934:	b2db      	uxtb	r3, r3
    3936:	2b00      	cmp	r3, #0
    3938:	d1f4      	bne.n	3924 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	4618      	mov	r0, r3
    3940:	4b4f      	ldr	r3, [pc, #316]	; (3a80 <_can_async_init+0x178>)
    3942:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3944:	683b      	ldr	r3, [r7, #0]
    3946:	4a4f      	ldr	r2, [pc, #316]	; (3a84 <_can_async_init+0x17c>)
    3948:	4293      	cmp	r3, r2
    394a:	d17c      	bne.n	3a46 <_can_async_init+0x13e>
		_can1_dev    = dev;
    394c:	4a4e      	ldr	r2, [pc, #312]	; (3a88 <_can_async_init+0x180>)
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	4a4d      	ldr	r2, [pc, #308]	; (3a8c <_can_async_init+0x184>)
    3956:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	f44f 7100 	mov.w	r1, #512	; 0x200
    3960:	4618      	mov	r0, r3
    3962:	4b4b      	ldr	r3, [pc, #300]	; (3a90 <_can_async_init+0x188>)
    3964:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	2102      	movs	r1, #2
    396c:	4618      	mov	r0, r3
    396e:	4b49      	ldr	r3, [pc, #292]	; (3a94 <_can_async_init+0x18c>)
    3970:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3972:	687b      	ldr	r3, [r7, #4]
    3974:	681b      	ldr	r3, [r3, #0]
    3976:	f640 2103 	movw	r1, #2563	; 0xa03
    397a:	4618      	mov	r0, r3
    397c:	4b46      	ldr	r3, [pc, #280]	; (3a98 <_can_async_init+0x190>)
    397e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3980:	687b      	ldr	r3, [r7, #4]
    3982:	681b      	ldr	r3, [r3, #0]
    3984:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3988:	4618      	mov	r0, r3
    398a:	4b44      	ldr	r3, [pc, #272]	; (3a9c <_can_async_init+0x194>)
    398c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	681a      	ldr	r2, [r3, #0]
    3992:	4b43      	ldr	r3, [pc, #268]	; (3aa0 <_can_async_init+0x198>)
    3994:	b29b      	uxth	r3, r3
    3996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    399e:	4619      	mov	r1, r3
    39a0:	4610      	mov	r0, r2
    39a2:	4b40      	ldr	r3, [pc, #256]	; (3aa4 <_can_async_init+0x19c>)
    39a4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    39a6:	687b      	ldr	r3, [r7, #4]
    39a8:	681b      	ldr	r3, [r3, #0]
    39aa:	2107      	movs	r1, #7
    39ac:	4618      	mov	r0, r3
    39ae:	4b3e      	ldr	r3, [pc, #248]	; (3aa8 <_can_async_init+0x1a0>)
    39b0:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    39b2:	687b      	ldr	r3, [r7, #4]
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	2107      	movs	r1, #7
    39b8:	4618      	mov	r0, r3
    39ba:	4b3c      	ldr	r3, [pc, #240]	; (3aac <_can_async_init+0x1a4>)
    39bc:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	681a      	ldr	r2, [r3, #0]
    39c2:	4b3b      	ldr	r3, [pc, #236]	; (3ab0 <_can_async_init+0x1a8>)
    39c4:	b29b      	uxth	r3, r3
    39c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    39ca:	4619      	mov	r1, r3
    39cc:	4610      	mov	r0, r2
    39ce:	4b39      	ldr	r3, [pc, #228]	; (3ab4 <_can_async_init+0x1ac>)
    39d0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	681a      	ldr	r2, [r3, #0]
    39d6:	4b38      	ldr	r3, [pc, #224]	; (3ab8 <_can_async_init+0x1b0>)
    39d8:	b29b      	uxth	r3, r3
    39da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    39de:	4619      	mov	r1, r3
    39e0:	4610      	mov	r0, r2
    39e2:	4b36      	ldr	r3, [pc, #216]	; (3abc <_can_async_init+0x1b4>)
    39e4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	681b      	ldr	r3, [r3, #0]
    39ea:	2108      	movs	r1, #8
    39ec:	4618      	mov	r0, r3
    39ee:	4b34      	ldr	r3, [pc, #208]	; (3ac0 <_can_async_init+0x1b8>)
    39f0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	681a      	ldr	r2, [r3, #0]
    39f6:	4b33      	ldr	r3, [pc, #204]	; (3ac4 <_can_async_init+0x1bc>)
    39f8:	b29b      	uxth	r3, r3
    39fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    39fe:	4619      	mov	r1, r3
    3a00:	4610      	mov	r0, r2
    3a02:	4b31      	ldr	r3, [pc, #196]	; (3ac8 <_can_async_init+0x1c0>)
    3a04:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	681a      	ldr	r2, [r3, #0]
    3a0a:	4b30      	ldr	r3, [pc, #192]	; (3acc <_can_async_init+0x1c4>)
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3a12:	4619      	mov	r1, r3
    3a14:	4610      	mov	r0, r2
    3a16:	4b2e      	ldr	r3, [pc, #184]	; (3ad0 <_can_async_init+0x1c8>)
    3a18:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	681b      	ldr	r3, [r3, #0]
    3a1e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3a22:	4618      	mov	r0, r3
    3a24:	4b2b      	ldr	r3, [pc, #172]	; (3ad4 <_can_async_init+0x1cc>)
    3a26:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3a28:	204f      	movs	r0, #79	; 0x4f
    3a2a:	4b2b      	ldr	r3, [pc, #172]	; (3ad8 <_can_async_init+0x1d0>)
    3a2c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3a2e:	204f      	movs	r0, #79	; 0x4f
    3a30:	4b2a      	ldr	r3, [pc, #168]	; (3adc <_can_async_init+0x1d4>)
    3a32:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3a34:	204f      	movs	r0, #79	; 0x4f
    3a36:	4b2a      	ldr	r3, [pc, #168]	; (3ae0 <_can_async_init+0x1d8>)
    3a38:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3a3a:	687b      	ldr	r3, [r7, #4]
    3a3c:	681b      	ldr	r3, [r3, #0]
    3a3e:	2101      	movs	r1, #1
    3a40:	4618      	mov	r0, r3
    3a42:	4b28      	ldr	r3, [pc, #160]	; (3ae4 <_can_async_init+0x1dc>)
    3a44:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3a46:	687b      	ldr	r3, [r7, #4]
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	4618      	mov	r0, r3
    3a4c:	4b26      	ldr	r3, [pc, #152]	; (3ae8 <_can_async_init+0x1e0>)
    3a4e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	681b      	ldr	r3, [r3, #0]
    3a54:	4618      	mov	r0, r3
    3a56:	4b25      	ldr	r3, [pc, #148]	; (3aec <_can_async_init+0x1e4>)
    3a58:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3a5a:	bf00      	nop
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	681b      	ldr	r3, [r3, #0]
    3a60:	4618      	mov	r0, r3
    3a62:	4b06      	ldr	r3, [pc, #24]	; (3a7c <_can_async_init+0x174>)
    3a64:	4798      	blx	r3
    3a66:	4603      	mov	r3, r0
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d1f7      	bne.n	3a5c <_can_async_init+0x154>
	};

	return ERR_NONE;
    3a6c:	2300      	movs	r3, #0
}
    3a6e:	4618      	mov	r0, r3
    3a70:	3708      	adds	r7, #8
    3a72:	46bd      	mov	sp, r7
    3a74:	bd80      	pop	{r7, pc}
    3a76:	bf00      	nop
    3a78:	000036bd 	.word	0x000036bd
    3a7c:	000036dd 	.word	0x000036dd
    3a80:	0000372b 	.word	0x0000372b
    3a84:	42000400 	.word	0x42000400
    3a88:	20000964 	.word	0x20000964
    3a8c:	20000004 	.word	0x20000004
    3a90:	0000376b 	.word	0x0000376b
    3a94:	00003685 	.word	0x00003685
    3a98:	0000378d 	.word	0x0000378d
    3a9c:	000036a1 	.word	0x000036a1
    3aa0:	200017bc 	.word	0x200017bc
    3aa4:	00003871 	.word	0x00003871
    3aa8:	0000388f 	.word	0x0000388f
    3aac:	000038cb 	.word	0x000038cb
    3ab0:	20001774 	.word	0x20001774
    3ab4:	000038ad 	.word	0x000038ad
    3ab8:	200008c4 	.word	0x200008c4
    3abc:	000038e9 	.word	0x000038e9
    3ac0:	000037f9 	.word	0x000037f9
    3ac4:	200008d4 	.word	0x200008d4
    3ac8:	00003817 	.word	0x00003817
    3acc:	20000954 	.word	0x20000954
    3ad0:	00003835 	.word	0x00003835
    3ad4:	00003853 	.word	0x00003853
    3ad8:	000035dd 	.word	0x000035dd
    3adc:	00003621 	.word	0x00003621
    3ae0:	000035a1 	.word	0x000035a1
    3ae4:	000037dd 	.word	0x000037dd
    3ae8:	0000374b 	.word	0x0000374b
    3aec:	0000370b 	.word	0x0000370b

00003af0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3af0:	b590      	push	{r4, r7, lr}
    3af2:	b083      	sub	sp, #12
    3af4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3af6:	4b2c      	ldr	r3, [pc, #176]	; (3ba8 <CAN1_Handler+0xb8>)
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3afc:	687b      	ldr	r3, [r7, #4]
    3afe:	681b      	ldr	r3, [r3, #0]
    3b00:	4618      	mov	r0, r3
    3b02:	4b2a      	ldr	r3, [pc, #168]	; (3bac <CAN1_Handler+0xbc>)
    3b04:	4798      	blx	r3
    3b06:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3b08:	683b      	ldr	r3, [r7, #0]
    3b0a:	f003 0301 	and.w	r3, r3, #1
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d003      	beq.n	3b1a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	689b      	ldr	r3, [r3, #8]
    3b16:	6878      	ldr	r0, [r7, #4]
    3b18:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3b1a:	683b      	ldr	r3, [r7, #0]
    3b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3b20:	2b00      	cmp	r3, #0
    3b22:	d003      	beq.n	3b2c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3b24:	687b      	ldr	r3, [r7, #4]
    3b26:	685b      	ldr	r3, [r3, #4]
    3b28:	6878      	ldr	r0, [r7, #4]
    3b2a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3b2c:	683b      	ldr	r3, [r7, #0]
    3b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3b32:	2b00      	cmp	r3, #0
    3b34:	d004      	beq.n	3b40 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3b36:	687b      	ldr	r3, [r7, #4]
    3b38:	68db      	ldr	r3, [r3, #12]
    3b3a:	2103      	movs	r1, #3
    3b3c:	6878      	ldr	r0, [r7, #4]
    3b3e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3b40:	683b      	ldr	r3, [r7, #0]
    3b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3b46:	2b00      	cmp	r3, #0
    3b48:	d004      	beq.n	3b54 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	68db      	ldr	r3, [r3, #12]
    3b4e:	2100      	movs	r1, #0
    3b50:	6878      	ldr	r0, [r7, #4]
    3b52:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3b54:	683b      	ldr	r3, [r7, #0]
    3b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d00f      	beq.n	3b7e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	68dc      	ldr	r4, [r3, #12]
    3b62:	687b      	ldr	r3, [r7, #4]
    3b64:	681b      	ldr	r3, [r3, #0]
    3b66:	4618      	mov	r0, r3
    3b68:	4b11      	ldr	r3, [pc, #68]	; (3bb0 <CAN1_Handler+0xc0>)
    3b6a:	4798      	blx	r3
    3b6c:	4603      	mov	r3, r0
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d001      	beq.n	3b76 <CAN1_Handler+0x86>
    3b72:	2302      	movs	r3, #2
    3b74:	e000      	b.n	3b78 <CAN1_Handler+0x88>
    3b76:	2301      	movs	r3, #1
    3b78:	4619      	mov	r1, r3
    3b7a:	6878      	ldr	r0, [r7, #4]
    3b7c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3b7e:	683b      	ldr	r3, [r7, #0]
    3b80:	f003 0308 	and.w	r3, r3, #8
    3b84:	2b00      	cmp	r3, #0
    3b86:	d004      	beq.n	3b92 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	68db      	ldr	r3, [r3, #12]
    3b8c:	2104      	movs	r1, #4
    3b8e:	6878      	ldr	r0, [r7, #4]
    3b90:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3b92:	687b      	ldr	r3, [r7, #4]
    3b94:	681b      	ldr	r3, [r3, #0]
    3b96:	6839      	ldr	r1, [r7, #0]
    3b98:	4618      	mov	r0, r3
    3b9a:	4b06      	ldr	r3, [pc, #24]	; (3bb4 <CAN1_Handler+0xc4>)
    3b9c:	4798      	blx	r3
}
    3b9e:	bf00      	nop
    3ba0:	370c      	adds	r7, #12
    3ba2:	46bd      	mov	sp, r7
    3ba4:	bd90      	pop	{r4, r7, pc}
    3ba6:	bf00      	nop
    3ba8:	20000964 	.word	0x20000964
    3bac:	000037c5 	.word	0x000037c5
    3bb0:	0000365d 	.word	0x0000365d
    3bb4:	000037a9 	.word	0x000037a9

00003bb8 <__NVIC_SetPendingIRQ>:
{
    3bb8:	b480      	push	{r7}
    3bba:	b083      	sub	sp, #12
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	4603      	mov	r3, r0
    3bc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	db0c      	blt.n	3be4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bca:	4909      	ldr	r1, [pc, #36]	; (3bf0 <__NVIC_SetPendingIRQ+0x38>)
    3bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bd0:	095b      	lsrs	r3, r3, #5
    3bd2:	88fa      	ldrh	r2, [r7, #6]
    3bd4:	f002 021f 	and.w	r2, r2, #31
    3bd8:	2001      	movs	r0, #1
    3bda:	fa00 f202 	lsl.w	r2, r0, r2
    3bde:	3340      	adds	r3, #64	; 0x40
    3be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3be4:	bf00      	nop
    3be6:	370c      	adds	r7, #12
    3be8:	46bd      	mov	sp, r7
    3bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bee:	4770      	bx	lr
    3bf0:	e000e100 	.word	0xe000e100

00003bf4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3bf4:	b580      	push	{r7, lr}
    3bf6:	b082      	sub	sp, #8
    3bf8:	af00      	add	r7, sp, #0
    3bfa:	4603      	mov	r3, r0
    3bfc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3bfe:	79fb      	ldrb	r3, [r7, #7]
    3c00:	b21b      	sxth	r3, r3
    3c02:	4618      	mov	r0, r3
    3c04:	4b02      	ldr	r3, [pc, #8]	; (3c10 <_irq_set+0x1c>)
    3c06:	4798      	blx	r3
}
    3c08:	bf00      	nop
    3c0a:	3708      	adds	r7, #8
    3c0c:	46bd      	mov	sp, r7
    3c0e:	bd80      	pop	{r7, pc}
    3c10:	00003bb9 	.word	0x00003bb9

00003c14 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3c14:	b480      	push	{r7}
    3c16:	b083      	sub	sp, #12
    3c18:	af00      	add	r7, sp, #0
    3c1a:	4603      	mov	r3, r0
    3c1c:	6039      	str	r1, [r7, #0]
    3c1e:	80fb      	strh	r3, [r7, #6]
    3c20:	4613      	mov	r3, r2
    3c22:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3c24:	797b      	ldrb	r3, [r7, #5]
    3c26:	3b04      	subs	r3, #4
    3c28:	2b05      	cmp	r3, #5
    3c2a:	d86b      	bhi.n	3d04 <_get_cycles_for_us_internal+0xf0>
    3c2c:	a201      	add	r2, pc, #4	; (adr r2, 3c34 <_get_cycles_for_us_internal+0x20>)
    3c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c32:	bf00      	nop
    3c34:	00003ce3 	.word	0x00003ce3
    3c38:	00003cc3 	.word	0x00003cc3
    3c3c:	00003ca5 	.word	0x00003ca5
    3c40:	00003c87 	.word	0x00003c87
    3c44:	00003c69 	.word	0x00003c69
    3c48:	00003c4d 	.word	0x00003c4d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3c4c:	88fb      	ldrh	r3, [r7, #6]
    3c4e:	683a      	ldr	r2, [r7, #0]
    3c50:	4935      	ldr	r1, [pc, #212]	; (3d28 <_get_cycles_for_us_internal+0x114>)
    3c52:	fba1 1202 	umull	r1, r2, r1, r2
    3c56:	0c92      	lsrs	r2, r2, #18
    3c58:	fb02 f303 	mul.w	r3, r2, r3
    3c5c:	3302      	adds	r3, #2
    3c5e:	4a33      	ldr	r2, [pc, #204]	; (3d2c <_get_cycles_for_us_internal+0x118>)
    3c60:	fba2 2303 	umull	r2, r3, r2, r3
    3c64:	085b      	lsrs	r3, r3, #1
    3c66:	e059      	b.n	3d1c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3c68:	88fb      	ldrh	r3, [r7, #6]
    3c6a:	683a      	ldr	r2, [r7, #0]
    3c6c:	0952      	lsrs	r2, r2, #5
    3c6e:	4930      	ldr	r1, [pc, #192]	; (3d30 <_get_cycles_for_us_internal+0x11c>)
    3c70:	fba1 1202 	umull	r1, r2, r1, r2
    3c74:	09d2      	lsrs	r2, r2, #7
    3c76:	fb02 f303 	mul.w	r3, r2, r3
    3c7a:	331d      	adds	r3, #29
    3c7c:	4a2d      	ldr	r2, [pc, #180]	; (3d34 <_get_cycles_for_us_internal+0x120>)
    3c7e:	fba2 2303 	umull	r2, r3, r2, r3
    3c82:	091b      	lsrs	r3, r3, #4
    3c84:	e04a      	b.n	3d1c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3c86:	88fb      	ldrh	r3, [r7, #6]
    3c88:	683a      	ldr	r2, [r7, #0]
    3c8a:	492b      	ldr	r1, [pc, #172]	; (3d38 <_get_cycles_for_us_internal+0x124>)
    3c8c:	fba1 1202 	umull	r1, r2, r1, r2
    3c90:	0b52      	lsrs	r2, r2, #13
    3c92:	fb02 f303 	mul.w	r3, r2, r3
    3c96:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3c9a:	4a28      	ldr	r2, [pc, #160]	; (3d3c <_get_cycles_for_us_internal+0x128>)
    3c9c:	fba2 2303 	umull	r2, r3, r2, r3
    3ca0:	095b      	lsrs	r3, r3, #5
    3ca2:	e03b      	b.n	3d1c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3ca4:	88fb      	ldrh	r3, [r7, #6]
    3ca6:	683a      	ldr	r2, [r7, #0]
    3ca8:	4925      	ldr	r1, [pc, #148]	; (3d40 <_get_cycles_for_us_internal+0x12c>)
    3caa:	fba1 1202 	umull	r1, r2, r1, r2
    3cae:	0992      	lsrs	r2, r2, #6
    3cb0:	fb02 f303 	mul.w	r3, r2, r3
    3cb4:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3cb8:	4a22      	ldr	r2, [pc, #136]	; (3d44 <_get_cycles_for_us_internal+0x130>)
    3cba:	fba2 2303 	umull	r2, r3, r2, r3
    3cbe:	099b      	lsrs	r3, r3, #6
    3cc0:	e02c      	b.n	3d1c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3cc2:	88fb      	ldrh	r3, [r7, #6]
    3cc4:	683a      	ldr	r2, [r7, #0]
    3cc6:	4920      	ldr	r1, [pc, #128]	; (3d48 <_get_cycles_for_us_internal+0x134>)
    3cc8:	fba1 1202 	umull	r1, r2, r1, r2
    3ccc:	0952      	lsrs	r2, r2, #5
    3cce:	fb02 f303 	mul.w	r3, r2, r3
    3cd2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3cd6:	332f      	adds	r3, #47	; 0x2f
    3cd8:	4a1c      	ldr	r2, [pc, #112]	; (3d4c <_get_cycles_for_us_internal+0x138>)
    3cda:	fba2 2303 	umull	r2, r3, r2, r3
    3cde:	0b5b      	lsrs	r3, r3, #13
    3ce0:	e01c      	b.n	3d1c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3ce2:	88fb      	ldrh	r3, [r7, #6]
    3ce4:	683a      	ldr	r2, [r7, #0]
    3ce6:	491a      	ldr	r1, [pc, #104]	; (3d50 <_get_cycles_for_us_internal+0x13c>)
    3ce8:	fba1 1202 	umull	r1, r2, r1, r2
    3cec:	08d2      	lsrs	r2, r2, #3
    3cee:	fb02 f303 	mul.w	r3, r2, r3
    3cf2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3cf6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3cfa:	4a16      	ldr	r2, [pc, #88]	; (3d54 <_get_cycles_for_us_internal+0x140>)
    3cfc:	fba2 2303 	umull	r2, r3, r2, r3
    3d00:	0c5b      	lsrs	r3, r3, #17
    3d02:	e00b      	b.n	3d1c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3d04:	88fb      	ldrh	r3, [r7, #6]
    3d06:	683a      	ldr	r2, [r7, #0]
    3d08:	fb02 f303 	mul.w	r3, r2, r3
    3d0c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3d10:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3d14:	4a10      	ldr	r2, [pc, #64]	; (3d58 <_get_cycles_for_us_internal+0x144>)
    3d16:	fba2 2303 	umull	r2, r3, r2, r3
    3d1a:	0c9b      	lsrs	r3, r3, #18
	}
}
    3d1c:	4618      	mov	r0, r3
    3d1e:	370c      	adds	r7, #12
    3d20:	46bd      	mov	sp, r7
    3d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d26:	4770      	bx	lr
    3d28:	431bde83 	.word	0x431bde83
    3d2c:	aaaaaaab 	.word	0xaaaaaaab
    3d30:	0a7c5ac5 	.word	0x0a7c5ac5
    3d34:	88888889 	.word	0x88888889
    3d38:	d1b71759 	.word	0xd1b71759
    3d3c:	1b4e81b5 	.word	0x1b4e81b5
    3d40:	10624dd3 	.word	0x10624dd3
    3d44:	057619f1 	.word	0x057619f1
    3d48:	51eb851f 	.word	0x51eb851f
    3d4c:	45e7b273 	.word	0x45e7b273
    3d50:	cccccccd 	.word	0xcccccccd
    3d54:	6fd91d85 	.word	0x6fd91d85
    3d58:	165e9f81 	.word	0x165e9f81

00003d5c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3d5c:	b580      	push	{r7, lr}
    3d5e:	b082      	sub	sp, #8
    3d60:	af00      	add	r7, sp, #0
    3d62:	4603      	mov	r3, r0
    3d64:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3d66:	88fb      	ldrh	r3, [r7, #6]
    3d68:	2209      	movs	r2, #9
    3d6a:	4904      	ldr	r1, [pc, #16]	; (3d7c <_get_cycles_for_us+0x20>)
    3d6c:	4618      	mov	r0, r3
    3d6e:	4b04      	ldr	r3, [pc, #16]	; (3d80 <_get_cycles_for_us+0x24>)
    3d70:	4798      	blx	r3
    3d72:	4603      	mov	r3, r0
}
    3d74:	4618      	mov	r0, r3
    3d76:	3708      	adds	r7, #8
    3d78:	46bd      	mov	sp, r7
    3d7a:	bd80      	pop	{r7, pc}
    3d7c:	07270e00 	.word	0x07270e00
    3d80:	00003c15 	.word	0x00003c15

00003d84 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3d84:	b480      	push	{r7}
    3d86:	b083      	sub	sp, #12
    3d88:	af00      	add	r7, sp, #0
    3d8a:	4603      	mov	r3, r0
    3d8c:	6039      	str	r1, [r7, #0]
    3d8e:	80fb      	strh	r3, [r7, #6]
    3d90:	4613      	mov	r3, r2
    3d92:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3d94:	797b      	ldrb	r3, [r7, #5]
    3d96:	3b04      	subs	r3, #4
    3d98:	2b05      	cmp	r3, #5
    3d9a:	d870      	bhi.n	3e7e <_get_cycles_for_ms_internal+0xfa>
    3d9c:	a201      	add	r2, pc, #4	; (adr r2, 3da4 <_get_cycles_for_ms_internal+0x20>)
    3d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3da2:	bf00      	nop
    3da4:	00003e61 	.word	0x00003e61
    3da8:	00003e45 	.word	0x00003e45
    3dac:	00003e29 	.word	0x00003e29
    3db0:	00003e05 	.word	0x00003e05
    3db4:	00003de1 	.word	0x00003de1
    3db8:	00003dbd 	.word	0x00003dbd
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3dbc:	88fb      	ldrh	r3, [r7, #6]
    3dbe:	683a      	ldr	r2, [r7, #0]
    3dc0:	4937      	ldr	r1, [pc, #220]	; (3ea0 <_get_cycles_for_ms_internal+0x11c>)
    3dc2:	fba1 1202 	umull	r1, r2, r1, r2
    3dc6:	0c92      	lsrs	r2, r2, #18
    3dc8:	fb02 f303 	mul.w	r3, r2, r3
    3dcc:	3302      	adds	r3, #2
    3dce:	4a35      	ldr	r2, [pc, #212]	; (3ea4 <_get_cycles_for_ms_internal+0x120>)
    3dd0:	fba2 2303 	umull	r2, r3, r2, r3
    3dd4:	085b      	lsrs	r3, r3, #1
    3dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3dda:	fb02 f303 	mul.w	r3, r2, r3
    3dde:	e058      	b.n	3e92 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3de0:	88fb      	ldrh	r3, [r7, #6]
    3de2:	683a      	ldr	r2, [r7, #0]
    3de4:	0952      	lsrs	r2, r2, #5
    3de6:	4930      	ldr	r1, [pc, #192]	; (3ea8 <_get_cycles_for_ms_internal+0x124>)
    3de8:	fba1 1202 	umull	r1, r2, r1, r2
    3dec:	09d2      	lsrs	r2, r2, #7
    3dee:	fb02 f303 	mul.w	r3, r2, r3
    3df2:	3302      	adds	r3, #2
    3df4:	4a2b      	ldr	r2, [pc, #172]	; (3ea4 <_get_cycles_for_ms_internal+0x120>)
    3df6:	fba2 2303 	umull	r2, r3, r2, r3
    3dfa:	085b      	lsrs	r3, r3, #1
    3dfc:	2264      	movs	r2, #100	; 0x64
    3dfe:	fb02 f303 	mul.w	r3, r2, r3
    3e02:	e046      	b.n	3e92 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3e04:	88fb      	ldrh	r3, [r7, #6]
    3e06:	683a      	ldr	r2, [r7, #0]
    3e08:	4928      	ldr	r1, [pc, #160]	; (3eac <_get_cycles_for_ms_internal+0x128>)
    3e0a:	fba1 1202 	umull	r1, r2, r1, r2
    3e0e:	0b52      	lsrs	r2, r2, #13
    3e10:	fb02 f303 	mul.w	r3, r2, r3
    3e14:	3302      	adds	r3, #2
    3e16:	4a23      	ldr	r2, [pc, #140]	; (3ea4 <_get_cycles_for_ms_internal+0x120>)
    3e18:	fba2 2303 	umull	r2, r3, r2, r3
    3e1c:	085a      	lsrs	r2, r3, #1
    3e1e:	4613      	mov	r3, r2
    3e20:	009b      	lsls	r3, r3, #2
    3e22:	4413      	add	r3, r2
    3e24:	005b      	lsls	r3, r3, #1
    3e26:	e034      	b.n	3e92 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3e28:	88fb      	ldrh	r3, [r7, #6]
    3e2a:	683a      	ldr	r2, [r7, #0]
    3e2c:	4920      	ldr	r1, [pc, #128]	; (3eb0 <_get_cycles_for_ms_internal+0x12c>)
    3e2e:	fba1 1202 	umull	r1, r2, r1, r2
    3e32:	0992      	lsrs	r2, r2, #6
    3e34:	fb02 f303 	mul.w	r3, r2, r3
    3e38:	3302      	adds	r3, #2
    3e3a:	4a1a      	ldr	r2, [pc, #104]	; (3ea4 <_get_cycles_for_ms_internal+0x120>)
    3e3c:	fba2 2303 	umull	r2, r3, r2, r3
    3e40:	085b      	lsrs	r3, r3, #1
    3e42:	e026      	b.n	3e92 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3e44:	88fb      	ldrh	r3, [r7, #6]
    3e46:	683a      	ldr	r2, [r7, #0]
    3e48:	491a      	ldr	r1, [pc, #104]	; (3eb4 <_get_cycles_for_ms_internal+0x130>)
    3e4a:	fba1 1202 	umull	r1, r2, r1, r2
    3e4e:	0952      	lsrs	r2, r2, #5
    3e50:	fb02 f303 	mul.w	r3, r2, r3
    3e54:	331d      	adds	r3, #29
    3e56:	4a18      	ldr	r2, [pc, #96]	; (3eb8 <_get_cycles_for_ms_internal+0x134>)
    3e58:	fba2 2303 	umull	r2, r3, r2, r3
    3e5c:	091b      	lsrs	r3, r3, #4
    3e5e:	e018      	b.n	3e92 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3e60:	88fb      	ldrh	r3, [r7, #6]
    3e62:	683a      	ldr	r2, [r7, #0]
    3e64:	4915      	ldr	r1, [pc, #84]	; (3ebc <_get_cycles_for_ms_internal+0x138>)
    3e66:	fba1 1202 	umull	r1, r2, r1, r2
    3e6a:	08d2      	lsrs	r2, r2, #3
    3e6c:	fb02 f303 	mul.w	r3, r2, r3
    3e70:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3e74:	4a12      	ldr	r2, [pc, #72]	; (3ec0 <_get_cycles_for_ms_internal+0x13c>)
    3e76:	fba2 2303 	umull	r2, r3, r2, r3
    3e7a:	095b      	lsrs	r3, r3, #5
    3e7c:	e009      	b.n	3e92 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3e7e:	88fb      	ldrh	r3, [r7, #6]
    3e80:	683a      	ldr	r2, [r7, #0]
    3e82:	fb02 f303 	mul.w	r3, r2, r3
    3e86:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3e8a:	4a0e      	ldr	r2, [pc, #56]	; (3ec4 <_get_cycles_for_ms_internal+0x140>)
    3e8c:	fba2 2303 	umull	r2, r3, r2, r3
    3e90:	099b      	lsrs	r3, r3, #6
	}
}
    3e92:	4618      	mov	r0, r3
    3e94:	370c      	adds	r7, #12
    3e96:	46bd      	mov	sp, r7
    3e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop
    3ea0:	431bde83 	.word	0x431bde83
    3ea4:	aaaaaaab 	.word	0xaaaaaaab
    3ea8:	0a7c5ac5 	.word	0x0a7c5ac5
    3eac:	d1b71759 	.word	0xd1b71759
    3eb0:	10624dd3 	.word	0x10624dd3
    3eb4:	51eb851f 	.word	0x51eb851f
    3eb8:	88888889 	.word	0x88888889
    3ebc:	cccccccd 	.word	0xcccccccd
    3ec0:	1b4e81b5 	.word	0x1b4e81b5
    3ec4:	057619f1 	.word	0x057619f1

00003ec8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	4603      	mov	r3, r0
    3ed0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3ed2:	88fb      	ldrh	r3, [r7, #6]
    3ed4:	2209      	movs	r2, #9
    3ed6:	4904      	ldr	r1, [pc, #16]	; (3ee8 <_get_cycles_for_ms+0x20>)
    3ed8:	4618      	mov	r0, r3
    3eda:	4b04      	ldr	r3, [pc, #16]	; (3eec <_get_cycles_for_ms+0x24>)
    3edc:	4798      	blx	r3
    3ede:	4603      	mov	r3, r0
}
    3ee0:	4618      	mov	r0, r3
    3ee2:	3708      	adds	r7, #8
    3ee4:	46bd      	mov	sp, r7
    3ee6:	bd80      	pop	{r7, pc}
    3ee8:	07270e00 	.word	0x07270e00
    3eec:	00003d85 	.word	0x00003d85

00003ef0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3ef0:	b480      	push	{r7}
    3ef2:	b083      	sub	sp, #12
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
    3ef8:	6039      	str	r1, [r7, #0]
    3efa:	bf00      	nop
    3efc:	f3af 8000 	nop.w

00003f00 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3f00:	3901      	subs	r1, #1
    3f02:	d8fd      	bhi.n	3f00 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3f04:	bf00      	nop
    3f06:	370c      	adds	r7, #12
    3f08:	46bd      	mov	sp, r7
    3f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f0e:	4770      	bx	lr

00003f10 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3f10:	b480      	push	{r7}
    3f12:	b083      	sub	sp, #12
    3f14:	af00      	add	r7, sp, #0
    3f16:	6078      	str	r0, [r7, #4]
    3f18:	460b      	mov	r3, r1
    3f1a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	881b      	ldrh	r3, [r3, #0]
    3f20:	b29a      	uxth	r2, r3
    3f22:	887b      	ldrh	r3, [r7, #2]
    3f24:	021b      	lsls	r3, r3, #8
    3f26:	b29b      	uxth	r3, r3
    3f28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3f2c:	b29b      	uxth	r3, r3
    3f2e:	4313      	orrs	r3, r2
    3f30:	b29a      	uxth	r2, r3
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3f36:	bf00      	nop
    3f38:	370c      	adds	r7, #12
    3f3a:	46bd      	mov	sp, r7
    3f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f40:	4770      	bx	lr

00003f42 <hri_port_set_EVCTRL_reg>:
{
    3f42:	b480      	push	{r7}
    3f44:	b085      	sub	sp, #20
    3f46:	af00      	add	r7, sp, #0
    3f48:	60f8      	str	r0, [r7, #12]
    3f4a:	460b      	mov	r3, r1
    3f4c:	607a      	str	r2, [r7, #4]
    3f4e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3f50:	7afb      	ldrb	r3, [r7, #11]
    3f52:	7afa      	ldrb	r2, [r7, #11]
    3f54:	68f9      	ldr	r1, [r7, #12]
    3f56:	01d2      	lsls	r2, r2, #7
    3f58:	440a      	add	r2, r1
    3f5a:	322c      	adds	r2, #44	; 0x2c
    3f5c:	6811      	ldr	r1, [r2, #0]
    3f5e:	687a      	ldr	r2, [r7, #4]
    3f60:	430a      	orrs	r2, r1
    3f62:	68f9      	ldr	r1, [r7, #12]
    3f64:	01db      	lsls	r3, r3, #7
    3f66:	440b      	add	r3, r1
    3f68:	332c      	adds	r3, #44	; 0x2c
    3f6a:	601a      	str	r2, [r3, #0]
}
    3f6c:	bf00      	nop
    3f6e:	3714      	adds	r7, #20
    3f70:	46bd      	mov	sp, r7
    3f72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f76:	4770      	bx	lr

00003f78 <_port_event_init>:

static inline void _port_event_init()
{
    3f78:	b580      	push	{r7, lr}
    3f7a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3f7c:	2200      	movs	r2, #0
    3f7e:	2100      	movs	r1, #0
    3f80:	480a      	ldr	r0, [pc, #40]	; (3fac <_port_event_init+0x34>)
    3f82:	4b0b      	ldr	r3, [pc, #44]	; (3fb0 <_port_event_init+0x38>)
    3f84:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3f86:	2200      	movs	r2, #0
    3f88:	2101      	movs	r1, #1
    3f8a:	4808      	ldr	r0, [pc, #32]	; (3fac <_port_event_init+0x34>)
    3f8c:	4b08      	ldr	r3, [pc, #32]	; (3fb0 <_port_event_init+0x38>)
    3f8e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3f90:	f64e 72ef 	movw	r2, #61423	; 0xefef
    3f94:	2102      	movs	r1, #2
    3f96:	4805      	ldr	r0, [pc, #20]	; (3fac <_port_event_init+0x34>)
    3f98:	4b05      	ldr	r3, [pc, #20]	; (3fb0 <_port_event_init+0x38>)
    3f9a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3f9c:	2200      	movs	r2, #0
    3f9e:	2103      	movs	r1, #3
    3fa0:	4802      	ldr	r0, [pc, #8]	; (3fac <_port_event_init+0x34>)
    3fa2:	4b03      	ldr	r3, [pc, #12]	; (3fb0 <_port_event_init+0x38>)
    3fa4:	4798      	blx	r3
}
    3fa6:	bf00      	nop
    3fa8:	bd80      	pop	{r7, pc}
    3faa:	bf00      	nop
    3fac:	41008000 	.word	0x41008000
    3fb0:	00003f43 	.word	0x00003f43

00003fb4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3fb8:	2104      	movs	r1, #4
    3fba:	480b      	ldr	r0, [pc, #44]	; (3fe8 <_init_chip+0x34>)
    3fbc:	4b0b      	ldr	r3, [pc, #44]	; (3fec <_init_chip+0x38>)
    3fbe:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3fc0:	4b0b      	ldr	r3, [pc, #44]	; (3ff0 <_init_chip+0x3c>)
    3fc2:	4798      	blx	r3
	_oscctrl_init_sources();
    3fc4:	4b0b      	ldr	r3, [pc, #44]	; (3ff4 <_init_chip+0x40>)
    3fc6:	4798      	blx	r3
	_mclk_init();
    3fc8:	4b0b      	ldr	r3, [pc, #44]	; (3ff8 <_init_chip+0x44>)
    3fca:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3fcc:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3fd0:	4b0a      	ldr	r3, [pc, #40]	; (3ffc <_init_chip+0x48>)
    3fd2:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3fd4:	4b0a      	ldr	r3, [pc, #40]	; (4000 <_init_chip+0x4c>)
    3fd6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3fd8:	f640 30df 	movw	r0, #3039	; 0xbdf
    3fdc:	4b07      	ldr	r3, [pc, #28]	; (3ffc <_init_chip+0x48>)
    3fde:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3fe0:	4b08      	ldr	r3, [pc, #32]	; (4004 <_init_chip+0x50>)
    3fe2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3fe4:	bf00      	nop
    3fe6:	bd80      	pop	{r7, pc}
    3fe8:	41004000 	.word	0x41004000
    3fec:	00003f11 	.word	0x00003f11
    3ff0:	00004add 	.word	0x00004add
    3ff4:	00004fa5 	.word	0x00004fa5
    3ff8:	000049fd 	.word	0x000049fd
    3ffc:	000048a5 	.word	0x000048a5
    4000:	00004fe5 	.word	0x00004fe5
    4004:	00003f79 	.word	0x00003f79

00004008 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4008:	b480      	push	{r7}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
    400e:	6078      	str	r0, [r7, #4]
    4010:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	683a      	ldr	r2, [r7, #0]
    4016:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4018:	2300      	movs	r3, #0
}
    401a:	4618      	mov	r0, r3
    401c:	370c      	adds	r7, #12
    401e:	46bd      	mov	sp, r7
    4020:	f85d 7b04 	ldr.w	r7, [sp], #4
    4024:	4770      	bx	lr
	...

00004028 <__NVIC_EnableIRQ>:
{
    4028:	b480      	push	{r7}
    402a:	b083      	sub	sp, #12
    402c:	af00      	add	r7, sp, #0
    402e:	4603      	mov	r3, r0
    4030:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4036:	2b00      	cmp	r3, #0
    4038:	db0b      	blt.n	4052 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    403a:	4909      	ldr	r1, [pc, #36]	; (4060 <__NVIC_EnableIRQ+0x38>)
    403c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4040:	095b      	lsrs	r3, r3, #5
    4042:	88fa      	ldrh	r2, [r7, #6]
    4044:	f002 021f 	and.w	r2, r2, #31
    4048:	2001      	movs	r0, #1
    404a:	fa00 f202 	lsl.w	r2, r0, r2
    404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4052:	bf00      	nop
    4054:	370c      	adds	r7, #12
    4056:	46bd      	mov	sp, r7
    4058:	f85d 7b04 	ldr.w	r7, [sp], #4
    405c:	4770      	bx	lr
    405e:	bf00      	nop
    4060:	e000e100 	.word	0xe000e100

00004064 <__NVIC_DisableIRQ>:
{
    4064:	b480      	push	{r7}
    4066:	b083      	sub	sp, #12
    4068:	af00      	add	r7, sp, #0
    406a:	4603      	mov	r3, r0
    406c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    406e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4072:	2b00      	cmp	r3, #0
    4074:	db10      	blt.n	4098 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4076:	490b      	ldr	r1, [pc, #44]	; (40a4 <__NVIC_DisableIRQ+0x40>)
    4078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    407c:	095b      	lsrs	r3, r3, #5
    407e:	88fa      	ldrh	r2, [r7, #6]
    4080:	f002 021f 	and.w	r2, r2, #31
    4084:	2001      	movs	r0, #1
    4086:	fa00 f202 	lsl.w	r2, r0, r2
    408a:	3320      	adds	r3, #32
    408c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4094:	f3bf 8f6f 	isb	sy
}
    4098:	bf00      	nop
    409a:	370c      	adds	r7, #12
    409c:	46bd      	mov	sp, r7
    409e:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a2:	4770      	bx	lr
    40a4:	e000e100 	.word	0xe000e100

000040a8 <__NVIC_ClearPendingIRQ>:
{
    40a8:	b480      	push	{r7}
    40aa:	b083      	sub	sp, #12
    40ac:	af00      	add	r7, sp, #0
    40ae:	4603      	mov	r3, r0
    40b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40b6:	2b00      	cmp	r3, #0
    40b8:	db0c      	blt.n	40d4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40ba:	4909      	ldr	r1, [pc, #36]	; (40e0 <__NVIC_ClearPendingIRQ+0x38>)
    40bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40c0:	095b      	lsrs	r3, r3, #5
    40c2:	88fa      	ldrh	r2, [r7, #6]
    40c4:	f002 021f 	and.w	r2, r2, #31
    40c8:	2001      	movs	r0, #1
    40ca:	fa00 f202 	lsl.w	r2, r0, r2
    40ce:	3360      	adds	r3, #96	; 0x60
    40d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40d4:	bf00      	nop
    40d6:	370c      	adds	r7, #12
    40d8:	46bd      	mov	sp, r7
    40da:	f85d 7b04 	ldr.w	r7, [sp], #4
    40de:	4770      	bx	lr
    40e0:	e000e100 	.word	0xe000e100

000040e4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    40e4:	b480      	push	{r7}
    40e6:	b083      	sub	sp, #12
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
    40ec:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    40ee:	bf00      	nop
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	685a      	ldr	r2, [r3, #4]
    40f4:	683b      	ldr	r3, [r7, #0]
    40f6:	4013      	ands	r3, r2
    40f8:	2b00      	cmp	r3, #0
    40fa:	d1f9      	bne.n	40f0 <hri_eic_wait_for_sync+0xc>
	};
}
    40fc:	bf00      	nop
    40fe:	370c      	adds	r7, #12
    4100:	46bd      	mov	sp, r7
    4102:	f85d 7b04 	ldr.w	r7, [sp], #4
    4106:	4770      	bx	lr

00004108 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4108:	b480      	push	{r7}
    410a:	b083      	sub	sp, #12
    410c:	af00      	add	r7, sp, #0
    410e:	6078      	str	r0, [r7, #4]
    4110:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	685a      	ldr	r2, [r3, #4]
    4116:	683b      	ldr	r3, [r7, #0]
    4118:	4013      	ands	r3, r2
    411a:	2b00      	cmp	r3, #0
    411c:	bf14      	ite	ne
    411e:	2301      	movne	r3, #1
    4120:	2300      	moveq	r3, #0
    4122:	b2db      	uxtb	r3, r3
}
    4124:	4618      	mov	r0, r3
    4126:	370c      	adds	r7, #12
    4128:	46bd      	mov	sp, r7
    412a:	f85d 7b04 	ldr.w	r7, [sp], #4
    412e:	4770      	bx	lr

00004130 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4130:	b480      	push	{r7}
    4132:	b083      	sub	sp, #12
    4134:	af00      	add	r7, sp, #0
    4136:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	695b      	ldr	r3, [r3, #20]
}
    413c:	4618      	mov	r0, r3
    413e:	370c      	adds	r7, #12
    4140:	46bd      	mov	sp, r7
    4142:	f85d 7b04 	ldr.w	r7, [sp], #4
    4146:	4770      	bx	lr

00004148 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
    4150:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	615a      	str	r2, [r3, #20]
}
    4158:	bf00      	nop
    415a:	370c      	adds	r7, #12
    415c:	46bd      	mov	sp, r7
    415e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4162:	4770      	bx	lr

00004164 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
    416c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	683a      	ldr	r2, [r7, #0]
    4172:	611a      	str	r2, [r3, #16]
}
    4174:	bf00      	nop
    4176:	370c      	adds	r7, #12
    4178:	46bd      	mov	sp, r7
    417a:	f85d 7b04 	ldr.w	r7, [sp], #4
    417e:	4770      	bx	lr

00004180 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4180:	b480      	push	{r7}
    4182:	b083      	sub	sp, #12
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
    4188:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	683a      	ldr	r2, [r7, #0]
    418e:	60da      	str	r2, [r3, #12]
}
    4190:	bf00      	nop
    4192:	370c      	adds	r7, #12
    4194:	46bd      	mov	sp, r7
    4196:	f85d 7b04 	ldr.w	r7, [sp], #4
    419a:	4770      	bx	lr

0000419c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    419c:	b580      	push	{r7, lr}
    419e:	b082      	sub	sp, #8
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	781b      	ldrb	r3, [r3, #0]
    41a8:	b2db      	uxtb	r3, r3
    41aa:	f043 0302 	orr.w	r3, r3, #2
    41ae:	b2da      	uxtb	r2, r3
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    41b4:	2103      	movs	r1, #3
    41b6:	6878      	ldr	r0, [r7, #4]
    41b8:	4b02      	ldr	r3, [pc, #8]	; (41c4 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    41ba:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41bc:	bf00      	nop
    41be:	3708      	adds	r7, #8
    41c0:	46bd      	mov	sp, r7
    41c2:	bd80      	pop	{r7, pc}
    41c4:	000040e5 	.word	0x000040e5

000041c8 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    41c8:	b580      	push	{r7, lr}
    41ca:	b082      	sub	sp, #8
    41cc:	af00      	add	r7, sp, #0
    41ce:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	781b      	ldrb	r3, [r3, #0]
    41d4:	b2db      	uxtb	r3, r3
    41d6:	f023 0302 	bic.w	r3, r3, #2
    41da:	b2da      	uxtb	r2, r3
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    41e0:	2103      	movs	r1, #3
    41e2:	6878      	ldr	r0, [r7, #4]
    41e4:	4b02      	ldr	r3, [pc, #8]	; (41f0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    41e6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41e8:	bf00      	nop
    41ea:	3708      	adds	r7, #8
    41ec:	46bd      	mov	sp, r7
    41ee:	bd80      	pop	{r7, pc}
    41f0:	000040e5 	.word	0x000040e5

000041f4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    41f4:	b580      	push	{r7, lr}
    41f6:	b084      	sub	sp, #16
    41f8:	af00      	add	r7, sp, #0
    41fa:	6078      	str	r0, [r7, #4]
    41fc:	460b      	mov	r3, r1
    41fe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	781b      	ldrb	r3, [r3, #0]
    4204:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4206:	7bfb      	ldrb	r3, [r7, #15]
    4208:	f023 0310 	bic.w	r3, r3, #16
    420c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    420e:	78fb      	ldrb	r3, [r7, #3]
    4210:	011b      	lsls	r3, r3, #4
    4212:	b25a      	sxtb	r2, r3
    4214:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4218:	4313      	orrs	r3, r2
    421a:	b25b      	sxtb	r3, r3
    421c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	7bfa      	ldrb	r2, [r7, #15]
    4222:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4224:	2103      	movs	r1, #3
    4226:	6878      	ldr	r0, [r7, #4]
    4228:	4b02      	ldr	r3, [pc, #8]	; (4234 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    422a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    422c:	bf00      	nop
    422e:	3710      	adds	r7, #16
    4230:	46bd      	mov	sp, r7
    4232:	bd80      	pop	{r7, pc}
    4234:	000040e5 	.word	0x000040e5

00004238 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4238:	b580      	push	{r7, lr}
    423a:	b084      	sub	sp, #16
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
    4240:	460b      	mov	r3, r1
    4242:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4244:	2103      	movs	r1, #3
    4246:	6878      	ldr	r0, [r7, #4]
    4248:	4b06      	ldr	r3, [pc, #24]	; (4264 <hri_eic_get_CTRLA_reg+0x2c>)
    424a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	781b      	ldrb	r3, [r3, #0]
    4250:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4252:	7bfa      	ldrb	r2, [r7, #15]
    4254:	78fb      	ldrb	r3, [r7, #3]
    4256:	4013      	ands	r3, r2
    4258:	73fb      	strb	r3, [r7, #15]
	return tmp;
    425a:	7bfb      	ldrb	r3, [r7, #15]
}
    425c:	4618      	mov	r0, r3
    425e:	3710      	adds	r7, #16
    4260:	46bd      	mov	sp, r7
    4262:	bd80      	pop	{r7, pc}
    4264:	000040e5 	.word	0x000040e5

00004268 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4268:	b580      	push	{r7, lr}
    426a:	b082      	sub	sp, #8
    426c:	af00      	add	r7, sp, #0
    426e:	6078      	str	r0, [r7, #4]
    4270:	460b      	mov	r3, r1
    4272:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	78fa      	ldrb	r2, [r7, #3]
    4278:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    427a:	2103      	movs	r1, #3
    427c:	6878      	ldr	r0, [r7, #4]
    427e:	4b03      	ldr	r3, [pc, #12]	; (428c <hri_eic_write_CTRLA_reg+0x24>)
    4280:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4282:	bf00      	nop
    4284:	3708      	adds	r7, #8
    4286:	46bd      	mov	sp, r7
    4288:	bd80      	pop	{r7, pc}
    428a:	bf00      	nop
    428c:	000040e5 	.word	0x000040e5

00004290 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4290:	b480      	push	{r7}
    4292:	b083      	sub	sp, #12
    4294:	af00      	add	r7, sp, #0
    4296:	6078      	str	r0, [r7, #4]
    4298:	460b      	mov	r3, r1
    429a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	78fa      	ldrb	r2, [r7, #3]
    42a0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42a2:	bf00      	nop
    42a4:	370c      	adds	r7, #12
    42a6:	46bd      	mov	sp, r7
    42a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ac:	4770      	bx	lr

000042ae <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    42ae:	b480      	push	{r7}
    42b0:	b083      	sub	sp, #12
    42b2:	af00      	add	r7, sp, #0
    42b4:	6078      	str	r0, [r7, #4]
    42b6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	683a      	ldr	r2, [r7, #0]
    42bc:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42be:	bf00      	nop
    42c0:	370c      	adds	r7, #12
    42c2:	46bd      	mov	sp, r7
    42c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    42c8:	4770      	bx	lr

000042ca <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    42ca:	b480      	push	{r7}
    42cc:	b083      	sub	sp, #12
    42ce:	af00      	add	r7, sp, #0
    42d0:	6078      	str	r0, [r7, #4]
    42d2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	683a      	ldr	r2, [r7, #0]
    42d8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42da:	bf00      	nop
    42dc:	370c      	adds	r7, #12
    42de:	46bd      	mov	sp, r7
    42e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e4:	4770      	bx	lr

000042e6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    42e6:	b480      	push	{r7}
    42e8:	b085      	sub	sp, #20
    42ea:	af00      	add	r7, sp, #0
    42ec:	60f8      	str	r0, [r7, #12]
    42ee:	460b      	mov	r3, r1
    42f0:	607a      	str	r2, [r7, #4]
    42f2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    42f4:	7afb      	ldrb	r3, [r7, #11]
    42f6:	68fa      	ldr	r2, [r7, #12]
    42f8:	3306      	adds	r3, #6
    42fa:	009b      	lsls	r3, r3, #2
    42fc:	4413      	add	r3, r2
    42fe:	687a      	ldr	r2, [r7, #4]
    4300:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4302:	bf00      	nop
    4304:	3714      	adds	r7, #20
    4306:	46bd      	mov	sp, r7
    4308:	f85d 7b04 	ldr.w	r7, [sp], #4
    430c:	4770      	bx	lr

0000430e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    430e:	b480      	push	{r7}
    4310:	b083      	sub	sp, #12
    4312:	af00      	add	r7, sp, #0
    4314:	6078      	str	r0, [r7, #4]
    4316:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	683a      	ldr	r2, [r7, #0]
    431c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    431e:	bf00      	nop
    4320:	370c      	adds	r7, #12
    4322:	46bd      	mov	sp, r7
    4324:	f85d 7b04 	ldr.w	r7, [sp], #4
    4328:	4770      	bx	lr

0000432a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    432a:	b480      	push	{r7}
    432c:	b083      	sub	sp, #12
    432e:	af00      	add	r7, sp, #0
    4330:	6078      	str	r0, [r7, #4]
    4332:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	683a      	ldr	r2, [r7, #0]
    4338:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    433a:	bf00      	nop
    433c:	370c      	adds	r7, #12
    433e:	46bd      	mov	sp, r7
    4340:	f85d 7b04 	ldr.w	r7, [sp], #4
    4344:	4770      	bx	lr
	...

00004348 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
    434e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4350:	2101      	movs	r1, #1
    4352:	484f      	ldr	r0, [pc, #316]	; (4490 <_ext_irq_init+0x148>)
    4354:	4b4f      	ldr	r3, [pc, #316]	; (4494 <_ext_irq_init+0x14c>)
    4356:	4798      	blx	r3
    4358:	4603      	mov	r3, r0
    435a:	f083 0301 	eor.w	r3, r3, #1
    435e:	b2db      	uxtb	r3, r3
    4360:	2b00      	cmp	r3, #0
    4362:	d011      	beq.n	4388 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4364:	2102      	movs	r1, #2
    4366:	484a      	ldr	r0, [pc, #296]	; (4490 <_ext_irq_init+0x148>)
    4368:	4b4b      	ldr	r3, [pc, #300]	; (4498 <_ext_irq_init+0x150>)
    436a:	4798      	blx	r3
    436c:	4603      	mov	r3, r0
    436e:	2b00      	cmp	r3, #0
    4370:	d006      	beq.n	4380 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4372:	4847      	ldr	r0, [pc, #284]	; (4490 <_ext_irq_init+0x148>)
    4374:	4b49      	ldr	r3, [pc, #292]	; (449c <_ext_irq_init+0x154>)
    4376:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4378:	2102      	movs	r1, #2
    437a:	4845      	ldr	r0, [pc, #276]	; (4490 <_ext_irq_init+0x148>)
    437c:	4b48      	ldr	r3, [pc, #288]	; (44a0 <_ext_irq_init+0x158>)
    437e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4380:	2101      	movs	r1, #1
    4382:	4843      	ldr	r0, [pc, #268]	; (4490 <_ext_irq_init+0x148>)
    4384:	4b47      	ldr	r3, [pc, #284]	; (44a4 <_ext_irq_init+0x15c>)
    4386:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4388:	2101      	movs	r1, #1
    438a:	4841      	ldr	r0, [pc, #260]	; (4490 <_ext_irq_init+0x148>)
    438c:	4b44      	ldr	r3, [pc, #272]	; (44a0 <_ext_irq_init+0x158>)
    438e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4390:	2100      	movs	r1, #0
    4392:	483f      	ldr	r0, [pc, #252]	; (4490 <_ext_irq_init+0x148>)
    4394:	4b44      	ldr	r3, [pc, #272]	; (44a8 <_ext_irq_init+0x160>)
    4396:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4398:	2100      	movs	r1, #0
    439a:	483d      	ldr	r0, [pc, #244]	; (4490 <_ext_irq_init+0x148>)
    439c:	4b43      	ldr	r3, [pc, #268]	; (44ac <_ext_irq_init+0x164>)
    439e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    43a0:	2100      	movs	r1, #0
    43a2:	483b      	ldr	r0, [pc, #236]	; (4490 <_ext_irq_init+0x148>)
    43a4:	4b42      	ldr	r3, [pc, #264]	; (44b0 <_ext_irq_init+0x168>)
    43a6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    43a8:	f240 31bb 	movw	r1, #955	; 0x3bb
    43ac:	4838      	ldr	r0, [pc, #224]	; (4490 <_ext_irq_init+0x148>)
    43ae:	4b41      	ldr	r3, [pc, #260]	; (44b4 <_ext_irq_init+0x16c>)
    43b0:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    43b2:	f240 313b 	movw	r1, #827	; 0x33b
    43b6:	4836      	ldr	r0, [pc, #216]	; (4490 <_ext_irq_init+0x148>)
    43b8:	4b3f      	ldr	r3, [pc, #252]	; (44b8 <_ext_irq_init+0x170>)
    43ba:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    43bc:	2100      	movs	r1, #0
    43be:	4834      	ldr	r0, [pc, #208]	; (4490 <_ext_irq_init+0x148>)
    43c0:	4b3e      	ldr	r3, [pc, #248]	; (44bc <_ext_irq_init+0x174>)
    43c2:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    43c4:	4a3e      	ldr	r2, [pc, #248]	; (44c0 <_ext_irq_init+0x178>)
    43c6:	2100      	movs	r1, #0
    43c8:	4831      	ldr	r0, [pc, #196]	; (4490 <_ext_irq_init+0x148>)
    43ca:	4b3e      	ldr	r3, [pc, #248]	; (44c4 <_ext_irq_init+0x17c>)
    43cc:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    43ce:	2211      	movs	r2, #17
    43d0:	2101      	movs	r1, #1
    43d2:	482f      	ldr	r0, [pc, #188]	; (4490 <_ext_irq_init+0x148>)
    43d4:	4b3b      	ldr	r3, [pc, #236]	; (44c4 <_ext_irq_init+0x17c>)
    43d6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    43d8:	482d      	ldr	r0, [pc, #180]	; (4490 <_ext_irq_init+0x148>)
    43da:	4b3b      	ldr	r3, [pc, #236]	; (44c8 <_ext_irq_init+0x180>)
    43dc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    43de:	200c      	movs	r0, #12
    43e0:	4b3a      	ldr	r3, [pc, #232]	; (44cc <_ext_irq_init+0x184>)
    43e2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    43e4:	200c      	movs	r0, #12
    43e6:	4b3a      	ldr	r3, [pc, #232]	; (44d0 <_ext_irq_init+0x188>)
    43e8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    43ea:	200c      	movs	r0, #12
    43ec:	4b39      	ldr	r3, [pc, #228]	; (44d4 <_ext_irq_init+0x18c>)
    43ee:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    43f0:	200d      	movs	r0, #13
    43f2:	4b36      	ldr	r3, [pc, #216]	; (44cc <_ext_irq_init+0x184>)
    43f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    43f6:	200d      	movs	r0, #13
    43f8:	4b35      	ldr	r3, [pc, #212]	; (44d0 <_ext_irq_init+0x188>)
    43fa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    43fc:	200d      	movs	r0, #13
    43fe:	4b35      	ldr	r3, [pc, #212]	; (44d4 <_ext_irq_init+0x18c>)
    4400:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4402:	200f      	movs	r0, #15
    4404:	4b31      	ldr	r3, [pc, #196]	; (44cc <_ext_irq_init+0x184>)
    4406:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4408:	200f      	movs	r0, #15
    440a:	4b31      	ldr	r3, [pc, #196]	; (44d0 <_ext_irq_init+0x188>)
    440c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    440e:	200f      	movs	r0, #15
    4410:	4b30      	ldr	r3, [pc, #192]	; (44d4 <_ext_irq_init+0x18c>)
    4412:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4414:	2010      	movs	r0, #16
    4416:	4b2d      	ldr	r3, [pc, #180]	; (44cc <_ext_irq_init+0x184>)
    4418:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    441a:	2010      	movs	r0, #16
    441c:	4b2c      	ldr	r3, [pc, #176]	; (44d0 <_ext_irq_init+0x188>)
    441e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4420:	2010      	movs	r0, #16
    4422:	4b2c      	ldr	r3, [pc, #176]	; (44d4 <_ext_irq_init+0x18c>)
    4424:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4426:	2011      	movs	r0, #17
    4428:	4b28      	ldr	r3, [pc, #160]	; (44cc <_ext_irq_init+0x184>)
    442a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    442c:	2011      	movs	r0, #17
    442e:	4b28      	ldr	r3, [pc, #160]	; (44d0 <_ext_irq_init+0x188>)
    4430:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4432:	2011      	movs	r0, #17
    4434:	4b27      	ldr	r3, [pc, #156]	; (44d4 <_ext_irq_init+0x18c>)
    4436:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4438:	2012      	movs	r0, #18
    443a:	4b24      	ldr	r3, [pc, #144]	; (44cc <_ext_irq_init+0x184>)
    443c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    443e:	2012      	movs	r0, #18
    4440:	4b23      	ldr	r3, [pc, #140]	; (44d0 <_ext_irq_init+0x188>)
    4442:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4444:	2012      	movs	r0, #18
    4446:	4b23      	ldr	r3, [pc, #140]	; (44d4 <_ext_irq_init+0x18c>)
    4448:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    444a:	2013      	movs	r0, #19
    444c:	4b1f      	ldr	r3, [pc, #124]	; (44cc <_ext_irq_init+0x184>)
    444e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4450:	2013      	movs	r0, #19
    4452:	4b1f      	ldr	r3, [pc, #124]	; (44d0 <_ext_irq_init+0x188>)
    4454:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4456:	2013      	movs	r0, #19
    4458:	4b1e      	ldr	r3, [pc, #120]	; (44d4 <_ext_irq_init+0x18c>)
    445a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    445c:	2014      	movs	r0, #20
    445e:	4b1b      	ldr	r3, [pc, #108]	; (44cc <_ext_irq_init+0x184>)
    4460:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4462:	2014      	movs	r0, #20
    4464:	4b1a      	ldr	r3, [pc, #104]	; (44d0 <_ext_irq_init+0x188>)
    4466:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4468:	2014      	movs	r0, #20
    446a:	4b1a      	ldr	r3, [pc, #104]	; (44d4 <_ext_irq_init+0x18c>)
    446c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    446e:	2015      	movs	r0, #21
    4470:	4b16      	ldr	r3, [pc, #88]	; (44cc <_ext_irq_init+0x184>)
    4472:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4474:	2015      	movs	r0, #21
    4476:	4b16      	ldr	r3, [pc, #88]	; (44d0 <_ext_irq_init+0x188>)
    4478:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    447a:	2015      	movs	r0, #21
    447c:	4b15      	ldr	r3, [pc, #84]	; (44d4 <_ext_irq_init+0x18c>)
    447e:	4798      	blx	r3

	callback = cb;
    4480:	4a15      	ldr	r2, [pc, #84]	; (44d8 <_ext_irq_init+0x190>)
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4486:	2300      	movs	r3, #0
}
    4488:	4618      	mov	r0, r3
    448a:	3708      	adds	r7, #8
    448c:	46bd      	mov	sp, r7
    448e:	bd80      	pop	{r7, pc}
    4490:	40002800 	.word	0x40002800
    4494:	00004109 	.word	0x00004109
    4498:	00004239 	.word	0x00004239
    449c:	000041c9 	.word	0x000041c9
    44a0:	000040e5 	.word	0x000040e5
    44a4:	00004269 	.word	0x00004269
    44a8:	000041f5 	.word	0x000041f5
    44ac:	00004291 	.word	0x00004291
    44b0:	000042af 	.word	0x000042af
    44b4:	000042cb 	.word	0x000042cb
    44b8:	0000430f 	.word	0x0000430f
    44bc:	0000432b 	.word	0x0000432b
    44c0:	90999013 	.word	0x90999013
    44c4:	000042e7 	.word	0x000042e7
    44c8:	0000419d 	.word	0x0000419d
    44cc:	00004065 	.word	0x00004065
    44d0:	000040a9 	.word	0x000040a9
    44d4:	00004029 	.word	0x00004029
    44d8:	20000968 	.word	0x20000968

000044dc <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    44dc:	b580      	push	{r7, lr}
    44de:	b084      	sub	sp, #16
    44e0:	af00      	add	r7, sp, #0
    44e2:	6078      	str	r0, [r7, #4]
    44e4:	460b      	mov	r3, r1
    44e6:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    44e8:	23ff      	movs	r3, #255	; 0xff
    44ea:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    44ec:	2300      	movs	r3, #0
    44ee:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    44f0:	e010      	b.n	4514 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    44f2:	7bbb      	ldrb	r3, [r7, #14]
    44f4:	4a1c      	ldr	r2, [pc, #112]	; (4568 <_ext_irq_enable+0x8c>)
    44f6:	00db      	lsls	r3, r3, #3
    44f8:	4413      	add	r3, r2
    44fa:	685a      	ldr	r2, [r3, #4]
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	429a      	cmp	r2, r3
    4500:	d105      	bne.n	450e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4502:	7bbb      	ldrb	r3, [r7, #14]
    4504:	4a18      	ldr	r2, [pc, #96]	; (4568 <_ext_irq_enable+0x8c>)
    4506:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    450a:	73fb      	strb	r3, [r7, #15]
			break;
    450c:	e005      	b.n	451a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    450e:	7bbb      	ldrb	r3, [r7, #14]
    4510:	3301      	adds	r3, #1
    4512:	73bb      	strb	r3, [r7, #14]
    4514:	7bbb      	ldrb	r3, [r7, #14]
    4516:	2b08      	cmp	r3, #8
    4518:	d9eb      	bls.n	44f2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    451a:	7bfb      	ldrb	r3, [r7, #15]
    451c:	2bff      	cmp	r3, #255	; 0xff
    451e:	d102      	bne.n	4526 <_ext_irq_enable+0x4a>
		return -1;
    4520:	f04f 33ff 	mov.w	r3, #4294967295
    4524:	e01c      	b.n	4560 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4526:	78fb      	ldrb	r3, [r7, #3]
    4528:	2b00      	cmp	r3, #0
    452a:	d008      	beq.n	453e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    452c:	7bfb      	ldrb	r3, [r7, #15]
    452e:	2201      	movs	r2, #1
    4530:	fa02 f303 	lsl.w	r3, r2, r3
    4534:	4619      	mov	r1, r3
    4536:	480d      	ldr	r0, [pc, #52]	; (456c <_ext_irq_enable+0x90>)
    4538:	4b0d      	ldr	r3, [pc, #52]	; (4570 <_ext_irq_enable+0x94>)
    453a:	4798      	blx	r3
    453c:	e00f      	b.n	455e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    453e:	7bfb      	ldrb	r3, [r7, #15]
    4540:	2201      	movs	r2, #1
    4542:	fa02 f303 	lsl.w	r3, r2, r3
    4546:	4619      	mov	r1, r3
    4548:	4808      	ldr	r0, [pc, #32]	; (456c <_ext_irq_enable+0x90>)
    454a:	4b0a      	ldr	r3, [pc, #40]	; (4574 <_ext_irq_enable+0x98>)
    454c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    454e:	7bfb      	ldrb	r3, [r7, #15]
    4550:	2201      	movs	r2, #1
    4552:	fa02 f303 	lsl.w	r3, r2, r3
    4556:	4619      	mov	r1, r3
    4558:	4804      	ldr	r0, [pc, #16]	; (456c <_ext_irq_enable+0x90>)
    455a:	4b07      	ldr	r3, [pc, #28]	; (4578 <_ext_irq_enable+0x9c>)
    455c:	4798      	blx	r3
	}

	return ERR_NONE;
    455e:	2300      	movs	r3, #0
}
    4560:	4618      	mov	r0, r3
    4562:	3710      	adds	r7, #16
    4564:	46bd      	mov	sp, r7
    4566:	bd80      	pop	{r7, pc}
    4568:	0000ed5c 	.word	0x0000ed5c
    456c:	40002800 	.word	0x40002800
    4570:	00004165 	.word	0x00004165
    4574:	00004181 	.word	0x00004181
    4578:	00004149 	.word	0x00004149

0000457c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    457c:	b580      	push	{r7, lr}
    457e:	b084      	sub	sp, #16
    4580:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4582:	4841      	ldr	r0, [pc, #260]	; (4688 <_ext_irq_handler+0x10c>)
    4584:	4b41      	ldr	r3, [pc, #260]	; (468c <_ext_irq_handler+0x110>)
    4586:	4798      	blx	r3
    4588:	4603      	mov	r3, r0
    458a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    458c:	f04f 33ff 	mov.w	r3, #4294967295
    4590:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4592:	683b      	ldr	r3, [r7, #0]
    4594:	4619      	mov	r1, r3
    4596:	483c      	ldr	r0, [pc, #240]	; (4688 <_ext_irq_handler+0x10c>)
    4598:	4b3d      	ldr	r3, [pc, #244]	; (4690 <_ext_irq_handler+0x114>)
    459a:	4798      	blx	r3

	ASSERT(callback);
    459c:	4b3d      	ldr	r3, [pc, #244]	; (4694 <_ext_irq_handler+0x118>)
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	2b00      	cmp	r3, #0
    45a2:	bf14      	ite	ne
    45a4:	2301      	movne	r3, #1
    45a6:	2300      	moveq	r3, #0
    45a8:	b2db      	uxtb	r3, r3
    45aa:	f44f 7284 	mov.w	r2, #264	; 0x108
    45ae:	493a      	ldr	r1, [pc, #232]	; (4698 <_ext_irq_handler+0x11c>)
    45b0:	4618      	mov	r0, r3
    45b2:	4b3a      	ldr	r3, [pc, #232]	; (469c <_ext_irq_handler+0x120>)
    45b4:	4798      	blx	r3

	while (flags) {
    45b6:	e060      	b.n	467a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    45b8:	683b      	ldr	r3, [r7, #0]
    45ba:	4618      	mov	r0, r3
    45bc:	4b38      	ldr	r3, [pc, #224]	; (46a0 <_ext_irq_handler+0x124>)
    45be:	4798      	blx	r3
    45c0:	4603      	mov	r3, r0
    45c2:	b2db      	uxtb	r3, r3
    45c4:	3b01      	subs	r3, #1
    45c6:	b2db      	uxtb	r3, r3
    45c8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    45ca:	e047      	b.n	465c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    45cc:	2300      	movs	r3, #0
    45ce:	71fb      	strb	r3, [r7, #7]
    45d0:	2309      	movs	r3, #9
    45d2:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    45d4:	e024      	b.n	4620 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    45d6:	79ba      	ldrb	r2, [r7, #6]
    45d8:	79fb      	ldrb	r3, [r7, #7]
    45da:	4413      	add	r3, r2
    45dc:	105b      	asrs	r3, r3, #1
    45de:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    45e0:	797b      	ldrb	r3, [r7, #5]
    45e2:	4a30      	ldr	r2, [pc, #192]	; (46a4 <_ext_irq_handler+0x128>)
    45e4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    45e8:	461a      	mov	r2, r3
    45ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45ee:	429a      	cmp	r2, r3
    45f0:	d106      	bne.n	4600 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    45f2:	797b      	ldrb	r3, [r7, #5]
    45f4:	4a2b      	ldr	r2, [pc, #172]	; (46a4 <_ext_irq_handler+0x128>)
    45f6:	00db      	lsls	r3, r3, #3
    45f8:	4413      	add	r3, r2
    45fa:	685b      	ldr	r3, [r3, #4]
    45fc:	60bb      	str	r3, [r7, #8]
					break;
    45fe:	e013      	b.n	4628 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4600:	797b      	ldrb	r3, [r7, #5]
    4602:	4a28      	ldr	r2, [pc, #160]	; (46a4 <_ext_irq_handler+0x128>)
    4604:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4608:	461a      	mov	r2, r3
    460a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    460e:	429a      	cmp	r2, r3
    4610:	da03      	bge.n	461a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4612:	797b      	ldrb	r3, [r7, #5]
    4614:	3301      	adds	r3, #1
    4616:	71fb      	strb	r3, [r7, #7]
    4618:	e002      	b.n	4620 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    461a:	797b      	ldrb	r3, [r7, #5]
    461c:	3b01      	subs	r3, #1
    461e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4620:	79ba      	ldrb	r2, [r7, #6]
    4622:	79fb      	ldrb	r3, [r7, #7]
    4624:	429a      	cmp	r2, r3
    4626:	d2d6      	bcs.n	45d6 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4628:	68bb      	ldr	r3, [r7, #8]
    462a:	f1b3 3fff 	cmp.w	r3, #4294967295
    462e:	d003      	beq.n	4638 <_ext_irq_handler+0xbc>
				callback(pin);
    4630:	4b18      	ldr	r3, [pc, #96]	; (4694 <_ext_irq_handler+0x118>)
    4632:	681b      	ldr	r3, [r3, #0]
    4634:	68b8      	ldr	r0, [r7, #8]
    4636:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4638:	f997 300f 	ldrsb.w	r3, [r7, #15]
    463c:	2201      	movs	r2, #1
    463e:	fa02 f303 	lsl.w	r3, r2, r3
    4642:	43da      	mvns	r2, r3
    4644:	683b      	ldr	r3, [r7, #0]
    4646:	4013      	ands	r3, r2
    4648:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    464a:	683b      	ldr	r3, [r7, #0]
    464c:	4618      	mov	r0, r3
    464e:	4b14      	ldr	r3, [pc, #80]	; (46a0 <_ext_irq_handler+0x124>)
    4650:	4798      	blx	r3
    4652:	4603      	mov	r3, r0
    4654:	b2db      	uxtb	r3, r3
    4656:	3b01      	subs	r3, #1
    4658:	b2db      	uxtb	r3, r3
    465a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    465c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4660:	f1b3 3fff 	cmp.w	r3, #4294967295
    4664:	d1b2      	bne.n	45cc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4666:	4808      	ldr	r0, [pc, #32]	; (4688 <_ext_irq_handler+0x10c>)
    4668:	4b08      	ldr	r3, [pc, #32]	; (468c <_ext_irq_handler+0x110>)
    466a:	4798      	blx	r3
    466c:	4603      	mov	r3, r0
    466e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4670:	683b      	ldr	r3, [r7, #0]
    4672:	4619      	mov	r1, r3
    4674:	4804      	ldr	r0, [pc, #16]	; (4688 <_ext_irq_handler+0x10c>)
    4676:	4b06      	ldr	r3, [pc, #24]	; (4690 <_ext_irq_handler+0x114>)
    4678:	4798      	blx	r3
	while (flags) {
    467a:	683b      	ldr	r3, [r7, #0]
    467c:	2b00      	cmp	r3, #0
    467e:	d19b      	bne.n	45b8 <_ext_irq_handler+0x3c>
	}
}
    4680:	bf00      	nop
    4682:	3710      	adds	r7, #16
    4684:	46bd      	mov	sp, r7
    4686:	bd80      	pop	{r7, pc}
    4688:	40002800 	.word	0x40002800
    468c:	00004131 	.word	0x00004131
    4690:	00004149 	.word	0x00004149
    4694:	20000968 	.word	0x20000968
    4698:	0000eda4 	.word	0x0000eda4
    469c:	000033ad 	.word	0x000033ad
    46a0:	0000e7b1 	.word	0x0000e7b1
    46a4:	0000ed5c 	.word	0x0000ed5c

000046a8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    46a8:	b580      	push	{r7, lr}
    46aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46ac:	4b01      	ldr	r3, [pc, #4]	; (46b4 <EIC_0_Handler+0xc>)
    46ae:	4798      	blx	r3
} /**
    46b0:	bf00      	nop
    46b2:	bd80      	pop	{r7, pc}
    46b4:	0000457d 	.word	0x0000457d

000046b8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46bc:	4b01      	ldr	r3, [pc, #4]	; (46c4 <EIC_1_Handler+0xc>)
    46be:	4798      	blx	r3
} /**
    46c0:	bf00      	nop
    46c2:	bd80      	pop	{r7, pc}
    46c4:	0000457d 	.word	0x0000457d

000046c8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    46c8:	b580      	push	{r7, lr}
    46ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46cc:	4b01      	ldr	r3, [pc, #4]	; (46d4 <EIC_3_Handler+0xc>)
    46ce:	4798      	blx	r3
} /**
    46d0:	bf00      	nop
    46d2:	bd80      	pop	{r7, pc}
    46d4:	0000457d 	.word	0x0000457d

000046d8 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    46d8:	b580      	push	{r7, lr}
    46da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46dc:	4b01      	ldr	r3, [pc, #4]	; (46e4 <EIC_4_Handler+0xc>)
    46de:	4798      	blx	r3
} /**
    46e0:	bf00      	nop
    46e2:	bd80      	pop	{r7, pc}
    46e4:	0000457d 	.word	0x0000457d

000046e8 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    46e8:	b580      	push	{r7, lr}
    46ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46ec:	4b01      	ldr	r3, [pc, #4]	; (46f4 <EIC_5_Handler+0xc>)
    46ee:	4798      	blx	r3
} /**
    46f0:	bf00      	nop
    46f2:	bd80      	pop	{r7, pc}
    46f4:	0000457d 	.word	0x0000457d

000046f8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    46fc:	4b01      	ldr	r3, [pc, #4]	; (4704 <EIC_6_Handler+0xc>)
    46fe:	4798      	blx	r3
} /**
    4700:	bf00      	nop
    4702:	bd80      	pop	{r7, pc}
    4704:	0000457d 	.word	0x0000457d

00004708 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4708:	b580      	push	{r7, lr}
    470a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    470c:	4b01      	ldr	r3, [pc, #4]	; (4714 <EIC_7_Handler+0xc>)
    470e:	4798      	blx	r3
} /**
    4710:	bf00      	nop
    4712:	bd80      	pop	{r7, pc}
    4714:	0000457d 	.word	0x0000457d

00004718 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4718:	b580      	push	{r7, lr}
    471a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    471c:	4b01      	ldr	r3, [pc, #4]	; (4724 <EIC_8_Handler+0xc>)
    471e:	4798      	blx	r3
} /**
    4720:	bf00      	nop
    4722:	bd80      	pop	{r7, pc}
    4724:	0000457d 	.word	0x0000457d

00004728 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4728:	b580      	push	{r7, lr}
    472a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    472c:	4b01      	ldr	r3, [pc, #4]	; (4734 <EIC_9_Handler+0xc>)
    472e:	4798      	blx	r3
}
    4730:	bf00      	nop
    4732:	bd80      	pop	{r7, pc}
    4734:	0000457d 	.word	0x0000457d

00004738 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4738:	b480      	push	{r7}
    473a:	b085      	sub	sp, #20
    473c:	af00      	add	r7, sp, #0
    473e:	60f8      	str	r0, [r7, #12]
    4740:	460b      	mov	r3, r1
    4742:	607a      	str	r2, [r7, #4]
    4744:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4746:	7afa      	ldrb	r2, [r7, #11]
    4748:	68fb      	ldr	r3, [r7, #12]
    474a:	3248      	adds	r2, #72	; 0x48
    474c:	6879      	ldr	r1, [r7, #4]
    474e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4752:	bf00      	nop
    4754:	3714      	adds	r7, #20
    4756:	46bd      	mov	sp, r7
    4758:	f85d 7b04 	ldr.w	r7, [sp], #4
    475c:	4770      	bx	lr

0000475e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    475e:	b480      	push	{r7}
    4760:	b083      	sub	sp, #12
    4762:	af00      	add	r7, sp, #0
    4764:	6078      	str	r0, [r7, #4]
    4766:	460b      	mov	r3, r1
    4768:	70fb      	strb	r3, [r7, #3]
    476a:	4613      	mov	r3, r2
    476c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    476e:	78fb      	ldrb	r3, [r7, #3]
    4770:	687a      	ldr	r2, [r7, #4]
    4772:	3304      	adds	r3, #4
    4774:	00db      	lsls	r3, r3, #3
    4776:	4413      	add	r3, r2
    4778:	78ba      	ldrb	r2, [r7, #2]
    477a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    477c:	78fb      	ldrb	r3, [r7, #3]
    477e:	78ba      	ldrb	r2, [r7, #2]
    4780:	43d2      	mvns	r2, r2
    4782:	b2d1      	uxtb	r1, r2
    4784:	687a      	ldr	r2, [r7, #4]
    4786:	3304      	adds	r3, #4
    4788:	00db      	lsls	r3, r3, #3
    478a:	4413      	add	r3, r2
    478c:	460a      	mov	r2, r1
    478e:	711a      	strb	r2, [r3, #4]
}
    4790:	bf00      	nop
    4792:	370c      	adds	r7, #12
    4794:	46bd      	mov	sp, r7
    4796:	f85d 7b04 	ldr.w	r7, [sp], #4
    479a:	4770      	bx	lr

0000479c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    479c:	b480      	push	{r7}
    479e:	b085      	sub	sp, #20
    47a0:	af00      	add	r7, sp, #0
    47a2:	60f8      	str	r0, [r7, #12]
    47a4:	460b      	mov	r3, r1
    47a6:	607a      	str	r2, [r7, #4]
    47a8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    47aa:	7afa      	ldrb	r2, [r7, #11]
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	3204      	adds	r2, #4
    47b0:	6879      	ldr	r1, [r7, #4]
    47b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    47b6:	bf00      	nop
    47b8:	3714      	adds	r7, #20
    47ba:	46bd      	mov	sp, r7
    47bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    47c0:	4770      	bx	lr
	...

000047c4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    47c4:	b580      	push	{r7, lr}
    47c6:	b082      	sub	sp, #8
    47c8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    47ca:	2300      	movs	r3, #0
    47cc:	71fb      	strb	r3, [r7, #7]
    47ce:	e00b      	b.n	47e8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    47d0:	79fb      	ldrb	r3, [r7, #7]
    47d2:	4a18      	ldr	r2, [pc, #96]	; (4834 <_event_system_init+0x70>)
    47d4:	5cd3      	ldrb	r3, [r2, r3]
    47d6:	461a      	mov	r2, r3
    47d8:	79fb      	ldrb	r3, [r7, #7]
    47da:	4619      	mov	r1, r3
    47dc:	4816      	ldr	r0, [pc, #88]	; (4838 <_event_system_init+0x74>)
    47de:	4b17      	ldr	r3, [pc, #92]	; (483c <_event_system_init+0x78>)
    47e0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    47e2:	79fb      	ldrb	r3, [r7, #7]
    47e4:	3301      	adds	r3, #1
    47e6:	71fb      	strb	r3, [r7, #7]
    47e8:	79fb      	ldrb	r3, [r7, #7]
    47ea:	2b42      	cmp	r3, #66	; 0x42
    47ec:	d9f0      	bls.n	47d0 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    47ee:	2300      	movs	r3, #0
    47f0:	71fb      	strb	r3, [r7, #7]
    47f2:	e016      	b.n	4822 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    47f4:	79fb      	ldrb	r3, [r7, #7]
    47f6:	4a12      	ldr	r2, [pc, #72]	; (4840 <_event_system_init+0x7c>)
    47f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    47fc:	461a      	mov	r2, r3
    47fe:	79fb      	ldrb	r3, [r7, #7]
    4800:	4619      	mov	r1, r3
    4802:	480d      	ldr	r0, [pc, #52]	; (4838 <_event_system_init+0x74>)
    4804:	4b0f      	ldr	r3, [pc, #60]	; (4844 <_event_system_init+0x80>)
    4806:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4808:	79fb      	ldrb	r3, [r7, #7]
    480a:	4a0f      	ldr	r2, [pc, #60]	; (4848 <_event_system_init+0x84>)
    480c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4810:	b2da      	uxtb	r2, r3
    4812:	79fb      	ldrb	r3, [r7, #7]
    4814:	4619      	mov	r1, r3
    4816:	4808      	ldr	r0, [pc, #32]	; (4838 <_event_system_init+0x74>)
    4818:	4b0c      	ldr	r3, [pc, #48]	; (484c <_event_system_init+0x88>)
    481a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    481c:	79fb      	ldrb	r3, [r7, #7]
    481e:	3301      	adds	r3, #1
    4820:	71fb      	strb	r3, [r7, #7]
    4822:	79fb      	ldrb	r3, [r7, #7]
    4824:	2b1f      	cmp	r3, #31
    4826:	d9e5      	bls.n	47f4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4828:	2300      	movs	r3, #0
}
    482a:	4618      	mov	r0, r3
    482c:	3708      	adds	r7, #8
    482e:	46bd      	mov	sp, r7
    4830:	bd80      	pop	{r7, pc}
    4832:	bf00      	nop
    4834:	0000edbc 	.word	0x0000edbc
    4838:	4100e000 	.word	0x4100e000
    483c:	00004739 	.word	0x00004739
    4840:	0000ee00 	.word	0x0000ee00
    4844:	0000479d 	.word	0x0000479d
    4848:	0000ee40 	.word	0x0000ee40
    484c:	0000475f 	.word	0x0000475f

00004850 <hri_gclk_wait_for_sync>:
{
    4850:	b480      	push	{r7}
    4852:	b083      	sub	sp, #12
    4854:	af00      	add	r7, sp, #0
    4856:	6078      	str	r0, [r7, #4]
    4858:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    485a:	bf00      	nop
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	685a      	ldr	r2, [r3, #4]
    4860:	683b      	ldr	r3, [r7, #0]
    4862:	4013      	ands	r3, r2
    4864:	2b00      	cmp	r3, #0
    4866:	d1f9      	bne.n	485c <hri_gclk_wait_for_sync+0xc>
}
    4868:	bf00      	nop
    486a:	370c      	adds	r7, #12
    486c:	46bd      	mov	sp, r7
    486e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4872:	4770      	bx	lr

00004874 <hri_gclk_write_GENCTRL_reg>:
{
    4874:	b580      	push	{r7, lr}
    4876:	b084      	sub	sp, #16
    4878:	af00      	add	r7, sp, #0
    487a:	60f8      	str	r0, [r7, #12]
    487c:	460b      	mov	r3, r1
    487e:	607a      	str	r2, [r7, #4]
    4880:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4882:	7afa      	ldrb	r2, [r7, #11]
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	3208      	adds	r2, #8
    4888:	6879      	ldr	r1, [r7, #4]
    488a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    488e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4892:	68f8      	ldr	r0, [r7, #12]
    4894:	4b02      	ldr	r3, [pc, #8]	; (48a0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4896:	4798      	blx	r3
}
    4898:	bf00      	nop
    489a:	3710      	adds	r7, #16
    489c:	46bd      	mov	sp, r7
    489e:	bd80      	pop	{r7, pc}
    48a0:	00004851 	.word	0x00004851

000048a4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    48a4:	b580      	push	{r7, lr}
    48a6:	b082      	sub	sp, #8
    48a8:	af00      	add	r7, sp, #0
    48aa:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	f003 0301 	and.w	r3, r3, #1
    48b2:	2b00      	cmp	r3, #0
    48b4:	d004      	beq.n	48c0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    48b6:	4a3b      	ldr	r2, [pc, #236]	; (49a4 <_gclk_init_generators_by_fref+0x100>)
    48b8:	2100      	movs	r1, #0
    48ba:	483b      	ldr	r0, [pc, #236]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    48bc:	4b3b      	ldr	r3, [pc, #236]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    48be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    48c0:	687b      	ldr	r3, [r7, #4]
    48c2:	f003 0302 	and.w	r3, r3, #2
    48c6:	2b00      	cmp	r3, #0
    48c8:	d004      	beq.n	48d4 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    48ca:	4a39      	ldr	r2, [pc, #228]	; (49b0 <_gclk_init_generators_by_fref+0x10c>)
    48cc:	2101      	movs	r1, #1
    48ce:	4836      	ldr	r0, [pc, #216]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    48d0:	4b36      	ldr	r3, [pc, #216]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    48d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	f003 0304 	and.w	r3, r3, #4
    48da:	2b00      	cmp	r3, #0
    48dc:	d004      	beq.n	48e8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    48de:	4a35      	ldr	r2, [pc, #212]	; (49b4 <_gclk_init_generators_by_fref+0x110>)
    48e0:	2102      	movs	r1, #2
    48e2:	4831      	ldr	r0, [pc, #196]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    48e4:	4b31      	ldr	r3, [pc, #196]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    48e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	f003 0308 	and.w	r3, r3, #8
    48ee:	2b00      	cmp	r3, #0
    48f0:	d004      	beq.n	48fc <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    48f2:	4a31      	ldr	r2, [pc, #196]	; (49b8 <_gclk_init_generators_by_fref+0x114>)
    48f4:	2103      	movs	r1, #3
    48f6:	482c      	ldr	r0, [pc, #176]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    48f8:	4b2c      	ldr	r3, [pc, #176]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    48fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	f003 0310 	and.w	r3, r3, #16
    4902:	2b00      	cmp	r3, #0
    4904:	d004      	beq.n	4910 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4906:	4a2d      	ldr	r2, [pc, #180]	; (49bc <_gclk_init_generators_by_fref+0x118>)
    4908:	2104      	movs	r1, #4
    490a:	4827      	ldr	r0, [pc, #156]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    490c:	4b27      	ldr	r3, [pc, #156]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    490e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	f003 0320 	and.w	r3, r3, #32
    4916:	2b00      	cmp	r3, #0
    4918:	d004      	beq.n	4924 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    491a:	4a29      	ldr	r2, [pc, #164]	; (49c0 <_gclk_init_generators_by_fref+0x11c>)
    491c:	2105      	movs	r1, #5
    491e:	4822      	ldr	r0, [pc, #136]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    4920:	4b22      	ldr	r3, [pc, #136]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    4922:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	f003 0340 	and.w	r3, r3, #64	; 0x40
    492a:	2b00      	cmp	r3, #0
    492c:	d004      	beq.n	4938 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    492e:	4a25      	ldr	r2, [pc, #148]	; (49c4 <_gclk_init_generators_by_fref+0x120>)
    4930:	2106      	movs	r1, #6
    4932:	481d      	ldr	r0, [pc, #116]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    4934:	4b1d      	ldr	r3, [pc, #116]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    4936:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    493e:	2b00      	cmp	r3, #0
    4940:	d004      	beq.n	494c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4942:	4a21      	ldr	r2, [pc, #132]	; (49c8 <_gclk_init_generators_by_fref+0x124>)
    4944:	2107      	movs	r1, #7
    4946:	4818      	ldr	r0, [pc, #96]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    4948:	4b18      	ldr	r3, [pc, #96]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    494a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4952:	2b00      	cmp	r3, #0
    4954:	d004      	beq.n	4960 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4956:	4a1d      	ldr	r2, [pc, #116]	; (49cc <_gclk_init_generators_by_fref+0x128>)
    4958:	2108      	movs	r1, #8
    495a:	4813      	ldr	r0, [pc, #76]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    495c:	4b13      	ldr	r3, [pc, #76]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    495e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4966:	2b00      	cmp	r3, #0
    4968:	d004      	beq.n	4974 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    496a:	4a19      	ldr	r2, [pc, #100]	; (49d0 <_gclk_init_generators_by_fref+0x12c>)
    496c:	2109      	movs	r1, #9
    496e:	480e      	ldr	r0, [pc, #56]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    4970:	4b0e      	ldr	r3, [pc, #56]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    4972:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    497a:	2b00      	cmp	r3, #0
    497c:	d004      	beq.n	4988 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    497e:	4a15      	ldr	r2, [pc, #84]	; (49d4 <_gclk_init_generators_by_fref+0x130>)
    4980:	210a      	movs	r1, #10
    4982:	4809      	ldr	r0, [pc, #36]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    4984:	4b09      	ldr	r3, [pc, #36]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    4986:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    498e:	2b00      	cmp	r3, #0
    4990:	d004      	beq.n	499c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4992:	4a11      	ldr	r2, [pc, #68]	; (49d8 <_gclk_init_generators_by_fref+0x134>)
    4994:	210b      	movs	r1, #11
    4996:	4804      	ldr	r0, [pc, #16]	; (49a8 <_gclk_init_generators_by_fref+0x104>)
    4998:	4b04      	ldr	r3, [pc, #16]	; (49ac <_gclk_init_generators_by_fref+0x108>)
    499a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    499c:	bf00      	nop
    499e:	3708      	adds	r7, #8
    49a0:	46bd      	mov	sp, r7
    49a2:	bd80      	pop	{r7, pc}
    49a4:	00010107 	.word	0x00010107
    49a8:	40001c00 	.word	0x40001c00
    49ac:	00004875 	.word	0x00004875
    49b0:	00010907 	.word	0x00010907
    49b4:	00010906 	.word	0x00010906
    49b8:	00020908 	.word	0x00020908
    49bc:	00010901 	.word	0x00010901
    49c0:	00062901 	.word	0x00062901
    49c4:	000c2901 	.word	0x000c2901
    49c8:	00082908 	.word	0x00082908
    49cc:	00032901 	.word	0x00032901
    49d0:	00011908 	.word	0x00011908
    49d4:	00010905 	.word	0x00010905
    49d8:	00041905 	.word	0x00041905

000049dc <hri_mclk_write_CPUDIV_reg>:
{
    49dc:	b480      	push	{r7}
    49de:	b083      	sub	sp, #12
    49e0:	af00      	add	r7, sp, #0
    49e2:	6078      	str	r0, [r7, #4]
    49e4:	460b      	mov	r3, r1
    49e6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	78fa      	ldrb	r2, [r7, #3]
    49ec:	715a      	strb	r2, [r3, #5]
}
    49ee:	bf00      	nop
    49f0:	370c      	adds	r7, #12
    49f2:	46bd      	mov	sp, r7
    49f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49f8:	4770      	bx	lr
	...

000049fc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    49fc:	b580      	push	{r7, lr}
    49fe:	b082      	sub	sp, #8
    4a00:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4a02:	4b05      	ldr	r3, [pc, #20]	; (4a18 <_mclk_init+0x1c>)
    4a04:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4a06:	2101      	movs	r1, #1
    4a08:	6878      	ldr	r0, [r7, #4]
    4a0a:	4b04      	ldr	r3, [pc, #16]	; (4a1c <_mclk_init+0x20>)
    4a0c:	4798      	blx	r3
}
    4a0e:	bf00      	nop
    4a10:	3708      	adds	r7, #8
    4a12:	46bd      	mov	sp, r7
    4a14:	bd80      	pop	{r7, pc}
    4a16:	bf00      	nop
    4a18:	40000800 	.word	0x40000800
    4a1c:	000049dd 	.word	0x000049dd

00004a20 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4a20:	b480      	push	{r7}
    4a22:	b083      	sub	sp, #12
    4a24:	af00      	add	r7, sp, #0
    4a26:	6078      	str	r0, [r7, #4]
    4a28:	460b      	mov	r3, r1
    4a2a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	78fa      	ldrb	r2, [r7, #3]
    4a30:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a32:	bf00      	nop
    4a34:	370c      	adds	r7, #12
    4a36:	46bd      	mov	sp, r7
    4a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a3c:	4770      	bx	lr

00004a3e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4a3e:	b480      	push	{r7}
    4a40:	b083      	sub	sp, #12
    4a42:	af00      	add	r7, sp, #0
    4a44:	6078      	str	r0, [r7, #4]
    4a46:	460b      	mov	r3, r1
    4a48:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4a4a:	687b      	ldr	r3, [r7, #4]
    4a4c:	887a      	ldrh	r2, [r7, #2]
    4a4e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a50:	bf00      	nop
    4a52:	370c      	adds	r7, #12
    4a54:	46bd      	mov	sp, r7
    4a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a5a:	4770      	bx	lr

00004a5c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4a5c:	b480      	push	{r7}
    4a5e:	b083      	sub	sp, #12
    4a60:	af00      	add	r7, sp, #0
    4a62:	6078      	str	r0, [r7, #4]
    4a64:	460b      	mov	r3, r1
    4a66:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4a68:	687b      	ldr	r3, [r7, #4]
    4a6a:	78fa      	ldrb	r2, [r7, #3]
    4a6c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a6e:	bf00      	nop
    4a70:	370c      	adds	r7, #12
    4a72:	46bd      	mov	sp, r7
    4a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a78:	4770      	bx	lr

00004a7a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4a7a:	b480      	push	{r7}
    4a7c:	b083      	sub	sp, #12
    4a7e:	af00      	add	r7, sp, #0
    4a80:	6078      	str	r0, [r7, #4]
    4a82:	460b      	mov	r3, r1
    4a84:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4a86:	687b      	ldr	r3, [r7, #4]
    4a88:	78fa      	ldrb	r2, [r7, #3]
    4a8a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4a8c:	bf00      	nop
    4a8e:	370c      	adds	r7, #12
    4a90:	46bd      	mov	sp, r7
    4a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a96:	4770      	bx	lr

00004a98 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4a98:	b480      	push	{r7}
    4a9a:	b085      	sub	sp, #20
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	69db      	ldr	r3, [r3, #28]
    4aa4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4aa6:	68fb      	ldr	r3, [r7, #12]
    4aa8:	0a1b      	lsrs	r3, r3, #8
    4aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4aae:	60fb      	str	r3, [r7, #12]
	return tmp;
    4ab0:	68fb      	ldr	r3, [r7, #12]
}
    4ab2:	4618      	mov	r0, r3
    4ab4:	3714      	adds	r7, #20
    4ab6:	46bd      	mov	sp, r7
    4ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4abc:	4770      	bx	lr

00004abe <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4abe:	b480      	push	{r7}
    4ac0:	b083      	sub	sp, #12
    4ac2:	af00      	add	r7, sp, #0
    4ac4:	6078      	str	r0, [r7, #4]
    4ac6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	683a      	ldr	r2, [r7, #0]
    4acc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4ace:	bf00      	nop
    4ad0:	370c      	adds	r7, #12
    4ad2:	46bd      	mov	sp, r7
    4ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ad8:	4770      	bx	lr
	...

00004adc <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4adc:	b580      	push	{r7, lr}
    4ade:	b082      	sub	sp, #8
    4ae0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4ae2:	4b13      	ldr	r3, [pc, #76]	; (4b30 <_osc32kctrl_init_sources+0x54>)
    4ae4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4ae6:	2300      	movs	r3, #0
    4ae8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4aea:	f242 018e 	movw	r1, #8334	; 0x208e
    4aee:	6878      	ldr	r0, [r7, #4]
    4af0:	4b10      	ldr	r3, [pc, #64]	; (4b34 <_osc32kctrl_init_sources+0x58>)
    4af2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4af4:	2100      	movs	r1, #0
    4af6:	6878      	ldr	r0, [r7, #4]
    4af8:	4b0f      	ldr	r3, [pc, #60]	; (4b38 <_osc32kctrl_init_sources+0x5c>)
    4afa:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4afc:	2100      	movs	r1, #0
    4afe:	6878      	ldr	r0, [r7, #4]
    4b00:	4b0e      	ldr	r3, [pc, #56]	; (4b3c <_osc32kctrl_init_sources+0x60>)
    4b02:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4b04:	6878      	ldr	r0, [r7, #4]
    4b06:	4b0e      	ldr	r3, [pc, #56]	; (4b40 <_osc32kctrl_init_sources+0x64>)
    4b08:	4798      	blx	r3
    4b0a:	4603      	mov	r3, r0
    4b0c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4b0e:	887b      	ldrh	r3, [r7, #2]
    4b10:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4b12:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4b16:	4619      	mov	r1, r3
    4b18:	6878      	ldr	r0, [r7, #4]
    4b1a:	4b0a      	ldr	r3, [pc, #40]	; (4b44 <_osc32kctrl_init_sources+0x68>)
    4b1c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4b1e:	2100      	movs	r1, #0
    4b20:	6878      	ldr	r0, [r7, #4]
    4b22:	4b09      	ldr	r3, [pc, #36]	; (4b48 <_osc32kctrl_init_sources+0x6c>)
    4b24:	4798      	blx	r3
	(void)calib;
}
    4b26:	bf00      	nop
    4b28:	3708      	adds	r7, #8
    4b2a:	46bd      	mov	sp, r7
    4b2c:	bd80      	pop	{r7, pc}
    4b2e:	bf00      	nop
    4b30:	40001400 	.word	0x40001400
    4b34:	00004a3f 	.word	0x00004a3f
    4b38:	00004a5d 	.word	0x00004a5d
    4b3c:	00004a7b 	.word	0x00004a7b
    4b40:	00004a99 	.word	0x00004a99
    4b44:	00004abf 	.word	0x00004abf
    4b48:	00004a21 	.word	0x00004a21

00004b4c <hri_gclk_wait_for_sync>:
{
    4b4c:	b480      	push	{r7}
    4b4e:	b083      	sub	sp, #12
    4b50:	af00      	add	r7, sp, #0
    4b52:	6078      	str	r0, [r7, #4]
    4b54:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4b56:	bf00      	nop
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	685a      	ldr	r2, [r3, #4]
    4b5c:	683b      	ldr	r3, [r7, #0]
    4b5e:	4013      	ands	r3, r2
    4b60:	2b00      	cmp	r3, #0
    4b62:	d1f9      	bne.n	4b58 <hri_gclk_wait_for_sync+0xc>
}
    4b64:	bf00      	nop
    4b66:	370c      	adds	r7, #12
    4b68:	46bd      	mov	sp, r7
    4b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6e:	4770      	bx	lr

00004b70 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4b70:	b480      	push	{r7}
    4b72:	b083      	sub	sp, #12
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	685b      	ldr	r3, [r3, #4]
    4b7c:	089b      	lsrs	r3, r3, #2
    4b7e:	f003 0301 	and.w	r3, r3, #1
    4b82:	2b00      	cmp	r3, #0
    4b84:	bf14      	ite	ne
    4b86:	2301      	movne	r3, #1
    4b88:	2300      	moveq	r3, #0
    4b8a:	b2db      	uxtb	r3, r3
}
    4b8c:	4618      	mov	r0, r3
    4b8e:	370c      	adds	r7, #12
    4b90:	46bd      	mov	sp, r7
    4b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b96:	4770      	bx	lr

00004b98 <hri_gclk_read_SYNCBUSY_reg>:
{
    4b98:	b480      	push	{r7}
    4b9a:	b083      	sub	sp, #12
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4ba0:	687b      	ldr	r3, [r7, #4]
    4ba2:	685b      	ldr	r3, [r3, #4]
}
    4ba4:	4618      	mov	r0, r3
    4ba6:	370c      	adds	r7, #12
    4ba8:	46bd      	mov	sp, r7
    4baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bae:	4770      	bx	lr

00004bb0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b086      	sub	sp, #24
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	60f8      	str	r0, [r7, #12]
    4bb8:	460b      	mov	r3, r1
    4bba:	607a      	str	r2, [r7, #4]
    4bbc:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4bbe:	7afa      	ldrb	r2, [r7, #11]
    4bc0:	68fb      	ldr	r3, [r7, #12]
    4bc2:	3208      	adds	r2, #8
    4bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4bc8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4bca:	697b      	ldr	r3, [r7, #20]
    4bcc:	f023 030f 	bic.w	r3, r3, #15
    4bd0:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	f003 030f 	and.w	r3, r3, #15
    4bd8:	697a      	ldr	r2, [r7, #20]
    4bda:	4313      	orrs	r3, r2
    4bdc:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4bde:	7afa      	ldrb	r2, [r7, #11]
    4be0:	68fb      	ldr	r3, [r7, #12]
    4be2:	3208      	adds	r2, #8
    4be4:	6979      	ldr	r1, [r7, #20]
    4be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4bea:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4bee:	68f8      	ldr	r0, [r7, #12]
    4bf0:	4b02      	ldr	r3, [pc, #8]	; (4bfc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4bf2:	4798      	blx	r3
}
    4bf4:	bf00      	nop
    4bf6:	3718      	adds	r7, #24
    4bf8:	46bd      	mov	sp, r7
    4bfa:	bd80      	pop	{r7, pc}
    4bfc:	00004b4d 	.word	0x00004b4d

00004c00 <hri_gclk_write_PCHCTRL_reg>:
{
    4c00:	b480      	push	{r7}
    4c02:	b085      	sub	sp, #20
    4c04:	af00      	add	r7, sp, #0
    4c06:	60f8      	str	r0, [r7, #12]
    4c08:	460b      	mov	r3, r1
    4c0a:	607a      	str	r2, [r7, #4]
    4c0c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4c0e:	7afa      	ldrb	r2, [r7, #11]
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	3220      	adds	r2, #32
    4c14:	6879      	ldr	r1, [r7, #4]
    4c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4c1a:	bf00      	nop
    4c1c:	3714      	adds	r7, #20
    4c1e:	46bd      	mov	sp, r7
    4c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c24:	4770      	bx	lr

00004c26 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4c26:	b480      	push	{r7}
    4c28:	b085      	sub	sp, #20
    4c2a:	af00      	add	r7, sp, #0
    4c2c:	60f8      	str	r0, [r7, #12]
    4c2e:	460b      	mov	r3, r1
    4c30:	607a      	str	r2, [r7, #4]
    4c32:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4c34:	bf00      	nop
    4c36:	7afa      	ldrb	r2, [r7, #11]
    4c38:	68f9      	ldr	r1, [r7, #12]
    4c3a:	4613      	mov	r3, r2
    4c3c:	009b      	lsls	r3, r3, #2
    4c3e:	4413      	add	r3, r2
    4c40:	009b      	lsls	r3, r3, #2
    4c42:	440b      	add	r3, r1
    4c44:	333c      	adds	r3, #60	; 0x3c
    4c46:	681a      	ldr	r2, [r3, #0]
    4c48:	687b      	ldr	r3, [r7, #4]
    4c4a:	4013      	ands	r3, r2
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d1f2      	bne.n	4c36 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4c50:	bf00      	nop
    4c52:	3714      	adds	r7, #20
    4c54:	46bd      	mov	sp, r7
    4c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c5a:	4770      	bx	lr

00004c5c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4c5c:	b480      	push	{r7}
    4c5e:	b083      	sub	sp, #12
    4c60:	af00      	add	r7, sp, #0
    4c62:	6078      	str	r0, [r7, #4]
    4c64:	460b      	mov	r3, r1
    4c66:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4c68:	78fa      	ldrb	r2, [r7, #3]
    4c6a:	6879      	ldr	r1, [r7, #4]
    4c6c:	4613      	mov	r3, r2
    4c6e:	009b      	lsls	r3, r3, #2
    4c70:	4413      	add	r3, r2
    4c72:	009b      	lsls	r3, r3, #2
    4c74:	440b      	add	r3, r1
    4c76:	3340      	adds	r3, #64	; 0x40
    4c78:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4c7a:	f003 0301 	and.w	r3, r3, #1
    4c7e:	2b00      	cmp	r3, #0
    4c80:	bf14      	ite	ne
    4c82:	2301      	movne	r3, #1
    4c84:	2300      	moveq	r3, #0
    4c86:	b2db      	uxtb	r3, r3
}
    4c88:	4618      	mov	r0, r3
    4c8a:	370c      	adds	r7, #12
    4c8c:	46bd      	mov	sp, r7
    4c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c92:	4770      	bx	lr

00004c94 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4c94:	b480      	push	{r7}
    4c96:	b083      	sub	sp, #12
    4c98:	af00      	add	r7, sp, #0
    4c9a:	6078      	str	r0, [r7, #4]
    4c9c:	460b      	mov	r3, r1
    4c9e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4ca0:	78fa      	ldrb	r2, [r7, #3]
    4ca2:	6879      	ldr	r1, [r7, #4]
    4ca4:	4613      	mov	r3, r2
    4ca6:	009b      	lsls	r3, r3, #2
    4ca8:	4413      	add	r3, r2
    4caa:	009b      	lsls	r3, r3, #2
    4cac:	440b      	add	r3, r1
    4cae:	3340      	adds	r3, #64	; 0x40
    4cb0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4cb2:	085b      	lsrs	r3, r3, #1
    4cb4:	f003 0301 	and.w	r3, r3, #1
    4cb8:	2b00      	cmp	r3, #0
    4cba:	bf14      	ite	ne
    4cbc:	2301      	movne	r3, #1
    4cbe:	2300      	moveq	r3, #0
    4cc0:	b2db      	uxtb	r3, r3
}
    4cc2:	4618      	mov	r0, r3
    4cc4:	370c      	adds	r7, #12
    4cc6:	46bd      	mov	sp, r7
    4cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ccc:	4770      	bx	lr
	...

00004cd0 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4cd0:	b580      	push	{r7, lr}
    4cd2:	b082      	sub	sp, #8
    4cd4:	af00      	add	r7, sp, #0
    4cd6:	6078      	str	r0, [r7, #4]
    4cd8:	460b      	mov	r3, r1
    4cda:	70fb      	strb	r3, [r7, #3]
    4cdc:	4613      	mov	r3, r2
    4cde:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4ce0:	78fa      	ldrb	r2, [r7, #3]
    4ce2:	6879      	ldr	r1, [r7, #4]
    4ce4:	4613      	mov	r3, r2
    4ce6:	009b      	lsls	r3, r3, #2
    4ce8:	4413      	add	r3, r2
    4cea:	009b      	lsls	r3, r3, #2
    4cec:	440b      	add	r3, r1
    4cee:	3330      	adds	r3, #48	; 0x30
    4cf0:	78ba      	ldrb	r2, [r7, #2]
    4cf2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4cf4:	78fb      	ldrb	r3, [r7, #3]
    4cf6:	2202      	movs	r2, #2
    4cf8:	4619      	mov	r1, r3
    4cfa:	6878      	ldr	r0, [r7, #4]
    4cfc:	4b02      	ldr	r3, [pc, #8]	; (4d08 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4cfe:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d00:	bf00      	nop
    4d02:	3708      	adds	r7, #8
    4d04:	46bd      	mov	sp, r7
    4d06:	bd80      	pop	{r7, pc}
    4d08:	00004c27 	.word	0x00004c27

00004d0c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4d0c:	b580      	push	{r7, lr}
    4d0e:	b084      	sub	sp, #16
    4d10:	af00      	add	r7, sp, #0
    4d12:	60f8      	str	r0, [r7, #12]
    4d14:	460b      	mov	r3, r1
    4d16:	607a      	str	r2, [r7, #4]
    4d18:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4d1a:	7afa      	ldrb	r2, [r7, #11]
    4d1c:	68f9      	ldr	r1, [r7, #12]
    4d1e:	4613      	mov	r3, r2
    4d20:	009b      	lsls	r3, r3, #2
    4d22:	4413      	add	r3, r2
    4d24:	009b      	lsls	r3, r3, #2
    4d26:	440b      	add	r3, r1
    4d28:	3334      	adds	r3, #52	; 0x34
    4d2a:	687a      	ldr	r2, [r7, #4]
    4d2c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4d2e:	7afb      	ldrb	r3, [r7, #11]
    4d30:	2206      	movs	r2, #6
    4d32:	4619      	mov	r1, r3
    4d34:	68f8      	ldr	r0, [r7, #12]
    4d36:	4b03      	ldr	r3, [pc, #12]	; (4d44 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4d38:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d3a:	bf00      	nop
    4d3c:	3710      	adds	r7, #16
    4d3e:	46bd      	mov	sp, r7
    4d40:	bd80      	pop	{r7, pc}
    4d42:	bf00      	nop
    4d44:	00004c27 	.word	0x00004c27

00004d48 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4d48:	b480      	push	{r7}
    4d4a:	b085      	sub	sp, #20
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	60f8      	str	r0, [r7, #12]
    4d50:	460b      	mov	r3, r1
    4d52:	607a      	str	r2, [r7, #4]
    4d54:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4d56:	7afa      	ldrb	r2, [r7, #11]
    4d58:	68f9      	ldr	r1, [r7, #12]
    4d5a:	4613      	mov	r3, r2
    4d5c:	009b      	lsls	r3, r3, #2
    4d5e:	4413      	add	r3, r2
    4d60:	009b      	lsls	r3, r3, #2
    4d62:	440b      	add	r3, r1
    4d64:	3338      	adds	r3, #56	; 0x38
    4d66:	687a      	ldr	r2, [r7, #4]
    4d68:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d6a:	bf00      	nop
    4d6c:	3714      	adds	r7, #20
    4d6e:	46bd      	mov	sp, r7
    4d70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d74:	4770      	bx	lr

00004d76 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4d76:	b480      	push	{r7}
    4d78:	b083      	sub	sp, #12
    4d7a:	af00      	add	r7, sp, #0
    4d7c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	691b      	ldr	r3, [r3, #16]
    4d82:	085b      	lsrs	r3, r3, #1
    4d84:	f003 0301 	and.w	r3, r3, #1
    4d88:	2b00      	cmp	r3, #0
    4d8a:	bf14      	ite	ne
    4d8c:	2301      	movne	r3, #1
    4d8e:	2300      	moveq	r3, #0
    4d90:	b2db      	uxtb	r3, r3
}
    4d92:	4618      	mov	r0, r3
    4d94:	370c      	adds	r7, #12
    4d96:	46bd      	mov	sp, r7
    4d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d9c:	4770      	bx	lr

00004d9e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4d9e:	b480      	push	{r7}
    4da0:	b083      	sub	sp, #12
    4da2:	af00      	add	r7, sp, #0
    4da4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	691b      	ldr	r3, [r3, #16]
    4daa:	0a1b      	lsrs	r3, r3, #8
    4dac:	f003 0301 	and.w	r3, r3, #1
    4db0:	2b00      	cmp	r3, #0
    4db2:	bf14      	ite	ne
    4db4:	2301      	movne	r3, #1
    4db6:	2300      	moveq	r3, #0
    4db8:	b2db      	uxtb	r3, r3
}
    4dba:	4618      	mov	r0, r3
    4dbc:	370c      	adds	r7, #12
    4dbe:	46bd      	mov	sp, r7
    4dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc4:	4770      	bx	lr

00004dc6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4dc6:	b480      	push	{r7}
    4dc8:	b085      	sub	sp, #20
    4dca:	af00      	add	r7, sp, #0
    4dcc:	6078      	str	r0, [r7, #4]
    4dce:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4dd0:	687b      	ldr	r3, [r7, #4]
    4dd2:	691b      	ldr	r3, [r3, #16]
    4dd4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4dd6:	68fa      	ldr	r2, [r7, #12]
    4dd8:	683b      	ldr	r3, [r7, #0]
    4dda:	4013      	ands	r3, r2
    4ddc:	60fb      	str	r3, [r7, #12]
	return tmp;
    4dde:	68fb      	ldr	r3, [r7, #12]
}
    4de0:	4618      	mov	r0, r3
    4de2:	3714      	adds	r7, #20
    4de4:	46bd      	mov	sp, r7
    4de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dea:	4770      	bx	lr

00004dec <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4dec:	b480      	push	{r7}
    4dee:	b085      	sub	sp, #20
    4df0:	af00      	add	r7, sp, #0
    4df2:	60f8      	str	r0, [r7, #12]
    4df4:	460b      	mov	r3, r1
    4df6:	607a      	str	r2, [r7, #4]
    4df8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4dfa:	7afb      	ldrb	r3, [r7, #11]
    4dfc:	68fa      	ldr	r2, [r7, #12]
    4dfe:	3304      	adds	r3, #4
    4e00:	009b      	lsls	r3, r3, #2
    4e02:	4413      	add	r3, r2
    4e04:	687a      	ldr	r2, [r7, #4]
    4e06:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e08:	bf00      	nop
    4e0a:	3714      	adds	r7, #20
    4e0c:	46bd      	mov	sp, r7
    4e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e12:	4770      	bx	lr

00004e14 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4e14:	b480      	push	{r7}
    4e16:	b083      	sub	sp, #12
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
    4e1c:	460b      	mov	r3, r1
    4e1e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	78fa      	ldrb	r2, [r7, #3]
    4e24:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e26:	bf00      	nop
    4e28:	370c      	adds	r7, #12
    4e2a:	46bd      	mov	sp, r7
    4e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e30:	4770      	bx	lr

00004e32 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4e32:	b480      	push	{r7}
    4e34:	b085      	sub	sp, #20
    4e36:	af00      	add	r7, sp, #0
    4e38:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
    4e40:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4e42:	7bfb      	ldrb	r3, [r7, #15]
    4e44:	f003 0301 	and.w	r3, r3, #1
    4e48:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e4a:	7bfb      	ldrb	r3, [r7, #15]
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	bf14      	ite	ne
    4e50:	2301      	movne	r3, #1
    4e52:	2300      	moveq	r3, #0
    4e54:	b2db      	uxtb	r3, r3
}
    4e56:	4618      	mov	r0, r3
    4e58:	3714      	adds	r7, #20
    4e5a:	46bd      	mov	sp, r7
    4e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e60:	4770      	bx	lr

00004e62 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4e62:	b480      	push	{r7}
    4e64:	b083      	sub	sp, #12
    4e66:	af00      	add	r7, sp, #0
    4e68:	6078      	str	r0, [r7, #4]
    4e6a:	460b      	mov	r3, r1
    4e6c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	78fa      	ldrb	r2, [r7, #3]
    4e72:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e76:	bf00      	nop
    4e78:	370c      	adds	r7, #12
    4e7a:	46bd      	mov	sp, r7
    4e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e80:	4770      	bx	lr

00004e82 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4e82:	b480      	push	{r7}
    4e84:	b083      	sub	sp, #12
    4e86:	af00      	add	r7, sp, #0
    4e88:	6078      	str	r0, [r7, #4]
    4e8a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	683a      	ldr	r2, [r7, #0]
    4e90:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e92:	bf00      	nop
    4e94:	370c      	adds	r7, #12
    4e96:	46bd      	mov	sp, r7
    4e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e9c:	4770      	bx	lr

00004e9e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4e9e:	b480      	push	{r7}
    4ea0:	b083      	sub	sp, #12
    4ea2:	af00      	add	r7, sp, #0
    4ea4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4eaa:	4618      	mov	r0, r3
    4eac:	370c      	adds	r7, #12
    4eae:	46bd      	mov	sp, r7
    4eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eb4:	4770      	bx	lr

00004eb6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4eb6:	b480      	push	{r7}
    4eb8:	b083      	sub	sp, #12
    4eba:	af00      	add	r7, sp, #0
    4ebc:	6078      	str	r0, [r7, #4]
    4ebe:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	683a      	ldr	r2, [r7, #0]
    4ec4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4ec6:	bf00      	nop
    4ec8:	370c      	adds	r7, #12
    4eca:	46bd      	mov	sp, r7
    4ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed0:	4770      	bx	lr

00004ed2 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4ed2:	b480      	push	{r7}
    4ed4:	b085      	sub	sp, #20
    4ed6:	af00      	add	r7, sp, #0
    4ed8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4ee0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4ee2:	7bfb      	ldrb	r3, [r7, #15]
    4ee4:	085b      	lsrs	r3, r3, #1
    4ee6:	b2db      	uxtb	r3, r3
    4ee8:	f003 0301 	and.w	r3, r3, #1
    4eec:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4eee:	7bfb      	ldrb	r3, [r7, #15]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	bf14      	ite	ne
    4ef4:	2301      	movne	r3, #1
    4ef6:	2300      	moveq	r3, #0
    4ef8:	b2db      	uxtb	r3, r3
}
    4efa:	4618      	mov	r0, r3
    4efc:	3714      	adds	r7, #20
    4efe:	46bd      	mov	sp, r7
    4f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f04:	4770      	bx	lr

00004f06 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4f06:	b480      	push	{r7}
    4f08:	b085      	sub	sp, #20
    4f0a:	af00      	add	r7, sp, #0
    4f0c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4f14:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4f16:	7bfb      	ldrb	r3, [r7, #15]
    4f18:	089b      	lsrs	r3, r3, #2
    4f1a:	b2db      	uxtb	r3, r3
    4f1c:	f003 0301 	and.w	r3, r3, #1
    4f20:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f22:	7bfb      	ldrb	r3, [r7, #15]
    4f24:	2b00      	cmp	r3, #0
    4f26:	bf14      	ite	ne
    4f28:	2301      	movne	r3, #1
    4f2a:	2300      	moveq	r3, #0
    4f2c:	b2db      	uxtb	r3, r3
}
    4f2e:	4618      	mov	r0, r3
    4f30:	3714      	adds	r7, #20
    4f32:	46bd      	mov	sp, r7
    4f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f38:	4770      	bx	lr

00004f3a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4f3a:	b480      	push	{r7}
    4f3c:	b085      	sub	sp, #20
    4f3e:	af00      	add	r7, sp, #0
    4f40:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f42:	687b      	ldr	r3, [r7, #4]
    4f44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4f48:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4f4a:	7bfb      	ldrb	r3, [r7, #15]
    4f4c:	08db      	lsrs	r3, r3, #3
    4f4e:	b2db      	uxtb	r3, r3
    4f50:	f003 0301 	and.w	r3, r3, #1
    4f54:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f56:	7bfb      	ldrb	r3, [r7, #15]
    4f58:	2b00      	cmp	r3, #0
    4f5a:	bf14      	ite	ne
    4f5c:	2301      	movne	r3, #1
    4f5e:	2300      	moveq	r3, #0
    4f60:	b2db      	uxtb	r3, r3
}
    4f62:	4618      	mov	r0, r3
    4f64:	3714      	adds	r7, #20
    4f66:	46bd      	mov	sp, r7
    4f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f6c:	4770      	bx	lr

00004f6e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4f6e:	b480      	push	{r7}
    4f70:	b085      	sub	sp, #20
    4f72:	af00      	add	r7, sp, #0
    4f74:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4f7c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4f7e:	7bfb      	ldrb	r3, [r7, #15]
    4f80:	091b      	lsrs	r3, r3, #4
    4f82:	b2db      	uxtb	r3, r3
    4f84:	f003 0301 	and.w	r3, r3, #1
    4f88:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f8a:	7bfb      	ldrb	r3, [r7, #15]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	bf14      	ite	ne
    4f90:	2301      	movne	r3, #1
    4f92:	2300      	moveq	r3, #0
    4f94:	b2db      	uxtb	r3, r3
}
    4f96:	4618      	mov	r0, r3
    4f98:	3714      	adds	r7, #20
    4f9a:	46bd      	mov	sp, r7
    4f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa0:	4770      	bx	lr
	...

00004fa4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4fa4:	b580      	push	{r7, lr}
    4fa6:	b082      	sub	sp, #8
    4fa8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4faa:	4b0a      	ldr	r3, [pc, #40]	; (4fd4 <_oscctrl_init_sources+0x30>)
    4fac:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4fae:	4a0a      	ldr	r2, [pc, #40]	; (4fd8 <_oscctrl_init_sources+0x34>)
    4fb0:	2101      	movs	r1, #1
    4fb2:	6878      	ldr	r0, [r7, #4]
    4fb4:	4b09      	ldr	r3, [pc, #36]	; (4fdc <_oscctrl_init_sources+0x38>)
    4fb6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4fb8:	bf00      	nop
    4fba:	6878      	ldr	r0, [r7, #4]
    4fbc:	4b08      	ldr	r3, [pc, #32]	; (4fe0 <_oscctrl_init_sources+0x3c>)
    4fbe:	4798      	blx	r3
    4fc0:	4603      	mov	r3, r0
    4fc2:	f083 0301 	eor.w	r3, r3, #1
    4fc6:	b2db      	uxtb	r3, r3
    4fc8:	2b00      	cmp	r3, #0
    4fca:	d1f6      	bne.n	4fba <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4fcc:	bf00      	nop
    4fce:	3708      	adds	r7, #8
    4fd0:	46bd      	mov	sp, r7
    4fd2:	bd80      	pop	{r7, pc}
    4fd4:	40001000 	.word	0x40001000
    4fd8:	03002646 	.word	0x03002646
    4fdc:	00004ded 	.word	0x00004ded
    4fe0:	00004d77 	.word	0x00004d77

00004fe4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b084      	sub	sp, #16
    4fe8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4fea:	4b6b      	ldr	r3, [pc, #428]	; (5198 <_oscctrl_init_referenced_generators+0x1b4>)
    4fec:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4fee:	2204      	movs	r2, #4
    4ff0:	2100      	movs	r1, #0
    4ff2:	486a      	ldr	r0, [pc, #424]	; (519c <_oscctrl_init_referenced_generators+0x1b8>)
    4ff4:	4b6a      	ldr	r3, [pc, #424]	; (51a0 <_oscctrl_init_referenced_generators+0x1bc>)
    4ff6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4ff8:	bf00      	nop
    4ffa:	4868      	ldr	r0, [pc, #416]	; (519c <_oscctrl_init_referenced_generators+0x1b8>)
    4ffc:	4b69      	ldr	r3, [pc, #420]	; (51a4 <_oscctrl_init_referenced_generators+0x1c0>)
    4ffe:	4798      	blx	r3
    5000:	4603      	mov	r3, r0
    5002:	2b00      	cmp	r3, #0
    5004:	d1f9      	bne.n	4ffa <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5006:	2100      	movs	r1, #0
    5008:	68f8      	ldr	r0, [r7, #12]
    500a:	4b67      	ldr	r3, [pc, #412]	; (51a8 <_oscctrl_init_referenced_generators+0x1c4>)
    500c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    500e:	4967      	ldr	r1, [pc, #412]	; (51ac <_oscctrl_init_referenced_generators+0x1c8>)
    5010:	68f8      	ldr	r0, [r7, #12]
    5012:	4b67      	ldr	r3, [pc, #412]	; (51b0 <_oscctrl_init_referenced_generators+0x1cc>)
    5014:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5016:	bf00      	nop
    5018:	68f8      	ldr	r0, [r7, #12]
    501a:	4b66      	ldr	r3, [pc, #408]	; (51b4 <_oscctrl_init_referenced_generators+0x1d0>)
    501c:	4798      	blx	r3
    501e:	4603      	mov	r3, r0
    5020:	2b00      	cmp	r3, #0
    5022:	d1f9      	bne.n	5018 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5024:	2100      	movs	r1, #0
    5026:	68f8      	ldr	r0, [r7, #12]
    5028:	4b63      	ldr	r3, [pc, #396]	; (51b8 <_oscctrl_init_referenced_generators+0x1d4>)
    502a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    502c:	bf00      	nop
    502e:	68f8      	ldr	r0, [r7, #12]
    5030:	4b62      	ldr	r3, [pc, #392]	; (51bc <_oscctrl_init_referenced_generators+0x1d8>)
    5032:	4798      	blx	r3
    5034:	4603      	mov	r3, r0
    5036:	2b00      	cmp	r3, #0
    5038:	d1f9      	bne.n	502e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    503a:	2302      	movs	r3, #2
    503c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    503e:	7afb      	ldrb	r3, [r7, #11]
    5040:	4619      	mov	r1, r3
    5042:	68f8      	ldr	r0, [r7, #12]
    5044:	4b58      	ldr	r3, [pc, #352]	; (51a8 <_oscctrl_init_referenced_generators+0x1c4>)
    5046:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5048:	bf00      	nop
    504a:	68f8      	ldr	r0, [r7, #12]
    504c:	4b5c      	ldr	r3, [pc, #368]	; (51c0 <_oscctrl_init_referenced_generators+0x1dc>)
    504e:	4798      	blx	r3
    5050:	4603      	mov	r3, r0
    5052:	2b00      	cmp	r3, #0
    5054:	d1f9      	bne.n	504a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5056:	68f8      	ldr	r0, [r7, #12]
    5058:	4b5a      	ldr	r3, [pc, #360]	; (51c4 <_oscctrl_init_referenced_generators+0x1e0>)
    505a:	4798      	blx	r3
    505c:	4603      	mov	r3, r0
    505e:	4619      	mov	r1, r3
    5060:	68f8      	ldr	r0, [r7, #12]
    5062:	4b59      	ldr	r3, [pc, #356]	; (51c8 <_oscctrl_init_referenced_generators+0x1e4>)
    5064:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5066:	bf00      	nop
    5068:	68f8      	ldr	r0, [r7, #12]
    506a:	4b58      	ldr	r3, [pc, #352]	; (51cc <_oscctrl_init_referenced_generators+0x1e8>)
    506c:	4798      	blx	r3
    506e:	4603      	mov	r3, r0
    5070:	2b00      	cmp	r3, #0
    5072:	d1f9      	bne.n	5068 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5074:	2319      	movs	r3, #25
    5076:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5078:	7afb      	ldrb	r3, [r7, #11]
    507a:	4619      	mov	r1, r3
    507c:	68f8      	ldr	r0, [r7, #12]
    507e:	4b4e      	ldr	r3, [pc, #312]	; (51b8 <_oscctrl_init_referenced_generators+0x1d4>)
    5080:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5082:	bf00      	nop
    5084:	68f8      	ldr	r0, [r7, #12]
    5086:	4b4d      	ldr	r3, [pc, #308]	; (51bc <_oscctrl_init_referenced_generators+0x1d8>)
    5088:	4798      	blx	r3
    508a:	4603      	mov	r3, r0
    508c:	2b00      	cmp	r3, #0
    508e:	d1f9      	bne.n	5084 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5090:	2245      	movs	r2, #69	; 0x45
    5092:	2101      	movs	r1, #1
    5094:	4841      	ldr	r0, [pc, #260]	; (519c <_oscctrl_init_referenced_generators+0x1b8>)
    5096:	4b4e      	ldr	r3, [pc, #312]	; (51d0 <_oscctrl_init_referenced_generators+0x1ec>)
    5098:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    509a:	223b      	movs	r2, #59	; 0x3b
    509c:	2100      	movs	r1, #0
    509e:	68f8      	ldr	r0, [r7, #12]
    50a0:	4b4c      	ldr	r3, [pc, #304]	; (51d4 <_oscctrl_init_referenced_generators+0x1f0>)
    50a2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    50a4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    50a8:	2100      	movs	r1, #0
    50aa:	68f8      	ldr	r0, [r7, #12]
    50ac:	4b4a      	ldr	r3, [pc, #296]	; (51d8 <_oscctrl_init_referenced_generators+0x1f4>)
    50ae:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    50b0:	2242      	movs	r2, #66	; 0x42
    50b2:	2100      	movs	r1, #0
    50b4:	68f8      	ldr	r0, [r7, #12]
    50b6:	4b49      	ldr	r3, [pc, #292]	; (51dc <_oscctrl_init_referenced_generators+0x1f8>)
    50b8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    50ba:	4a49      	ldr	r2, [pc, #292]	; (51e0 <_oscctrl_init_referenced_generators+0x1fc>)
    50bc:	2101      	movs	r1, #1
    50be:	68f8      	ldr	r0, [r7, #12]
    50c0:	4b44      	ldr	r3, [pc, #272]	; (51d4 <_oscctrl_init_referenced_generators+0x1f0>)
    50c2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    50c4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    50c8:	2101      	movs	r1, #1
    50ca:	68f8      	ldr	r0, [r7, #12]
    50cc:	4b42      	ldr	r3, [pc, #264]	; (51d8 <_oscctrl_init_referenced_generators+0x1f4>)
    50ce:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    50d0:	2202      	movs	r2, #2
    50d2:	2101      	movs	r1, #1
    50d4:	68f8      	ldr	r0, [r7, #12]
    50d6:	4b41      	ldr	r3, [pc, #260]	; (51dc <_oscctrl_init_referenced_generators+0x1f8>)
    50d8:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    50da:	68f8      	ldr	r0, [r7, #12]
    50dc:	4b41      	ldr	r3, [pc, #260]	; (51e4 <_oscctrl_init_referenced_generators+0x200>)
    50de:	4798      	blx	r3
    50e0:	4603      	mov	r3, r0
    50e2:	2b00      	cmp	r3, #0
    50e4:	d00c      	beq.n	5100 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    50e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    50ea:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    50ec:	bf00      	nop
    50ee:	6879      	ldr	r1, [r7, #4]
    50f0:	68f8      	ldr	r0, [r7, #12]
    50f2:	4b3d      	ldr	r3, [pc, #244]	; (51e8 <_oscctrl_init_referenced_generators+0x204>)
    50f4:	4798      	blx	r3
    50f6:	4602      	mov	r2, r0
    50f8:	687b      	ldr	r3, [r7, #4]
    50fa:	429a      	cmp	r2, r3
    50fc:	d1f7      	bne.n	50ee <_oscctrl_init_referenced_generators+0x10a>
    50fe:	e009      	b.n	5114 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5100:	bf00      	nop
    5102:	68f8      	ldr	r0, [r7, #12]
    5104:	4b39      	ldr	r3, [pc, #228]	; (51ec <_oscctrl_init_referenced_generators+0x208>)
    5106:	4798      	blx	r3
    5108:	4603      	mov	r3, r0
    510a:	f083 0301 	eor.w	r3, r3, #1
    510e:	b2db      	uxtb	r3, r3
    5110:	2b00      	cmp	r3, #0
    5112:	d1f6      	bne.n	5102 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5114:	bf00      	nop
    5116:	2100      	movs	r1, #0
    5118:	68f8      	ldr	r0, [r7, #12]
    511a:	4b35      	ldr	r3, [pc, #212]	; (51f0 <_oscctrl_init_referenced_generators+0x20c>)
    511c:	4798      	blx	r3
    511e:	4603      	mov	r3, r0
    5120:	f083 0301 	eor.w	r3, r3, #1
    5124:	b2db      	uxtb	r3, r3
    5126:	2b00      	cmp	r3, #0
    5128:	d009      	beq.n	513e <_oscctrl_init_referenced_generators+0x15a>
    512a:	2100      	movs	r1, #0
    512c:	68f8      	ldr	r0, [r7, #12]
    512e:	4b31      	ldr	r3, [pc, #196]	; (51f4 <_oscctrl_init_referenced_generators+0x210>)
    5130:	4798      	blx	r3
    5132:	4603      	mov	r3, r0
    5134:	f083 0301 	eor.w	r3, r3, #1
    5138:	b2db      	uxtb	r3, r3
    513a:	2b00      	cmp	r3, #0
    513c:	d1eb      	bne.n	5116 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    513e:	bf00      	nop
    5140:	2101      	movs	r1, #1
    5142:	68f8      	ldr	r0, [r7, #12]
    5144:	4b2a      	ldr	r3, [pc, #168]	; (51f0 <_oscctrl_init_referenced_generators+0x20c>)
    5146:	4798      	blx	r3
    5148:	4603      	mov	r3, r0
    514a:	f083 0301 	eor.w	r3, r3, #1
    514e:	b2db      	uxtb	r3, r3
    5150:	2b00      	cmp	r3, #0
    5152:	d009      	beq.n	5168 <_oscctrl_init_referenced_generators+0x184>
    5154:	2101      	movs	r1, #1
    5156:	68f8      	ldr	r0, [r7, #12]
    5158:	4b26      	ldr	r3, [pc, #152]	; (51f4 <_oscctrl_init_referenced_generators+0x210>)
    515a:	4798      	blx	r3
    515c:	4603      	mov	r3, r0
    515e:	f083 0301 	eor.w	r3, r3, #1
    5162:	b2db      	uxtb	r3, r3
    5164:	2b00      	cmp	r3, #0
    5166:	d1eb      	bne.n	5140 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5168:	bf00      	nop
    516a:	480c      	ldr	r0, [pc, #48]	; (519c <_oscctrl_init_referenced_generators+0x1b8>)
    516c:	4b22      	ldr	r3, [pc, #136]	; (51f8 <_oscctrl_init_referenced_generators+0x214>)
    516e:	4798      	blx	r3
    5170:	4603      	mov	r3, r0
    5172:	2b00      	cmp	r3, #0
    5174:	d1f9      	bne.n	516a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5176:	2207      	movs	r2, #7
    5178:	2100      	movs	r1, #0
    517a:	4808      	ldr	r0, [pc, #32]	; (519c <_oscctrl_init_referenced_generators+0x1b8>)
    517c:	4b08      	ldr	r3, [pc, #32]	; (51a0 <_oscctrl_init_referenced_generators+0x1bc>)
    517e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5180:	bf00      	nop
    5182:	4806      	ldr	r0, [pc, #24]	; (519c <_oscctrl_init_referenced_generators+0x1b8>)
    5184:	4b07      	ldr	r3, [pc, #28]	; (51a4 <_oscctrl_init_referenced_generators+0x1c0>)
    5186:	4798      	blx	r3
    5188:	4603      	mov	r3, r0
    518a:	2b00      	cmp	r3, #0
    518c:	d1f9      	bne.n	5182 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    518e:	bf00      	nop
    5190:	3710      	adds	r7, #16
    5192:	46bd      	mov	sp, r7
    5194:	bd80      	pop	{r7, pc}
    5196:	bf00      	nop
    5198:	40001000 	.word	0x40001000
    519c:	40001c00 	.word	0x40001c00
    51a0:	00004bb1 	.word	0x00004bb1
    51a4:	00004b71 	.word	0x00004b71
    51a8:	00004e15 	.word	0x00004e15
    51ac:	0401bb80 	.word	0x0401bb80
    51b0:	00004eb7 	.word	0x00004eb7
    51b4:	00004f6f 	.word	0x00004f6f
    51b8:	00004e63 	.word	0x00004e63
    51bc:	00004f07 	.word	0x00004f07
    51c0:	00004ed3 	.word	0x00004ed3
    51c4:	00004e9f 	.word	0x00004e9f
    51c8:	00004e83 	.word	0x00004e83
    51cc:	00004f3b 	.word	0x00004f3b
    51d0:	00004c01 	.word	0x00004c01
    51d4:	00004d0d 	.word	0x00004d0d
    51d8:	00004d49 	.word	0x00004d49
    51dc:	00004cd1 	.word	0x00004cd1
    51e0:	000407a0 	.word	0x000407a0
    51e4:	00004e33 	.word	0x00004e33
    51e8:	00004dc7 	.word	0x00004dc7
    51ec:	00004d9f 	.word	0x00004d9f
    51f0:	00004c5d 	.word	0x00004c5d
    51f4:	00004c95 	.word	0x00004c95
    51f8:	00004b99 	.word	0x00004b99

000051fc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    51fc:	b480      	push	{r7}
    51fe:	b083      	sub	sp, #12
    5200:	af00      	add	r7, sp, #0
    5202:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	69db      	ldr	r3, [r3, #28]
    5208:	0a9b      	lsrs	r3, r3, #10
    520a:	f003 0301 	and.w	r3, r3, #1
    520e:	2b00      	cmp	r3, #0
    5210:	bf14      	ite	ne
    5212:	2301      	movne	r3, #1
    5214:	2300      	moveq	r3, #0
    5216:	b2db      	uxtb	r3, r3
}
    5218:	4618      	mov	r0, r3
    521a:	370c      	adds	r7, #12
    521c:	46bd      	mov	sp, r7
    521e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5222:	4770      	bx	lr

00005224 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5224:	b480      	push	{r7}
    5226:	b083      	sub	sp, #12
    5228:	af00      	add	r7, sp, #0
    522a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5232:	61da      	str	r2, [r3, #28]
}
    5234:	bf00      	nop
    5236:	370c      	adds	r7, #12
    5238:	46bd      	mov	sp, r7
    523a:	f85d 7b04 	ldr.w	r7, [sp], #4
    523e:	4770      	bx	lr

00005240 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5240:	b480      	push	{r7}
    5242:	b083      	sub	sp, #12
    5244:	af00      	add	r7, sp, #0
    5246:	6078      	str	r0, [r7, #4]
    5248:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	683a      	ldr	r2, [r7, #0]
    524e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5250:	bf00      	nop
    5252:	370c      	adds	r7, #12
    5254:	46bd      	mov	sp, r7
    5256:	f85d 7b04 	ldr.w	r7, [sp], #4
    525a:	4770      	bx	lr

0000525c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    525c:	b480      	push	{r7}
    525e:	b083      	sub	sp, #12
    5260:	af00      	add	r7, sp, #0
    5262:	6078      	str	r0, [r7, #4]
    5264:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	683a      	ldr	r2, [r7, #0]
    526a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    526c:	bf00      	nop
    526e:	370c      	adds	r7, #12
    5270:	46bd      	mov	sp, r7
    5272:	f85d 7b04 	ldr.w	r7, [sp], #4
    5276:	4770      	bx	lr

00005278 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5278:	b480      	push	{r7}
    527a:	b083      	sub	sp, #12
    527c:	af00      	add	r7, sp, #0
    527e:	6078      	str	r0, [r7, #4]
    5280:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5282:	687b      	ldr	r3, [r7, #4]
    5284:	683a      	ldr	r2, [r7, #0]
    5286:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5288:	bf00      	nop
    528a:	370c      	adds	r7, #12
    528c:	46bd      	mov	sp, r7
    528e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5292:	4770      	bx	lr

00005294 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5294:	b480      	push	{r7}
    5296:	b083      	sub	sp, #12
    5298:	af00      	add	r7, sp, #0
    529a:	6078      	str	r0, [r7, #4]
    529c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	683a      	ldr	r2, [r7, #0]
    52a2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52a4:	bf00      	nop
    52a6:	370c      	adds	r7, #12
    52a8:	46bd      	mov	sp, r7
    52aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ae:	4770      	bx	lr

000052b0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    52b0:	b480      	push	{r7}
    52b2:	b085      	sub	sp, #20
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
    52b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    52be:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    52c0:	68fb      	ldr	r3, [r7, #12]
    52c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    52c6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    52c8:	683b      	ldr	r3, [r7, #0]
    52ca:	b2db      	uxtb	r3, r3
    52cc:	68fa      	ldr	r2, [r7, #12]
    52ce:	4313      	orrs	r3, r2
    52d0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	68fa      	ldr	r2, [r7, #12]
    52d6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52d8:	bf00      	nop
    52da:	3714      	adds	r7, #20
    52dc:	46bd      	mov	sp, r7
    52de:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e2:	4770      	bx	lr

000052e4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    52e4:	b480      	push	{r7}
    52e6:	b085      	sub	sp, #20
    52e8:	af00      	add	r7, sp, #0
    52ea:	6078      	str	r0, [r7, #4]
    52ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    52f2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    52f4:	68fb      	ldr	r3, [r7, #12]
    52f6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    52fa:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    52fc:	683b      	ldr	r3, [r7, #0]
    52fe:	041b      	lsls	r3, r3, #16
    5300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5304:	68fa      	ldr	r2, [r7, #12]
    5306:	4313      	orrs	r3, r2
    5308:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    530a:	687b      	ldr	r3, [r7, #4]
    530c:	68fa      	ldr	r2, [r7, #12]
    530e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5310:	bf00      	nop
    5312:	3714      	adds	r7, #20
    5314:	46bd      	mov	sp, r7
    5316:	f85d 7b04 	ldr.w	r7, [sp], #4
    531a:	4770      	bx	lr

0000531c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    531c:	b480      	push	{r7}
    531e:	b083      	sub	sp, #12
    5320:	af00      	add	r7, sp, #0
    5322:	6078      	str	r0, [r7, #4]
    5324:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	683a      	ldr	r2, [r7, #0]
    532a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    532c:	bf00      	nop
    532e:	370c      	adds	r7, #12
    5330:	46bd      	mov	sp, r7
    5332:	f85d 7b04 	ldr.w	r7, [sp], #4
    5336:	4770      	bx	lr

00005338 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5338:	b480      	push	{r7}
    533a:	b083      	sub	sp, #12
    533c:	af00      	add	r7, sp, #0
    533e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5344:	4618      	mov	r0, r3
    5346:	370c      	adds	r7, #12
    5348:	46bd      	mov	sp, r7
    534a:	f85d 7b04 	ldr.w	r7, [sp], #4
    534e:	4770      	bx	lr

00005350 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5350:	b480      	push	{r7}
    5352:	b085      	sub	sp, #20
    5354:	af00      	add	r7, sp, #0
    5356:	60f8      	str	r0, [r7, #12]
    5358:	60b9      	str	r1, [r7, #8]
    535a:	607a      	str	r2, [r7, #4]
	while (count--) {
    535c:	e007      	b.n	536e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    535e:	68fb      	ldr	r3, [r7, #12]
    5360:	1c5a      	adds	r2, r3, #1
    5362:	60fa      	str	r2, [r7, #12]
    5364:	68ba      	ldr	r2, [r7, #8]
    5366:	1c51      	adds	r1, r2, #1
    5368:	60b9      	str	r1, [r7, #8]
    536a:	7812      	ldrb	r2, [r2, #0]
    536c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    536e:	687b      	ldr	r3, [r7, #4]
    5370:	1e5a      	subs	r2, r3, #1
    5372:	607a      	str	r2, [r7, #4]
    5374:	2b00      	cmp	r3, #0
    5376:	d1f2      	bne.n	535e <_qspi_memcpy+0xe>
	}
}
    5378:	bf00      	nop
    537a:	3714      	adds	r7, #20
    537c:	46bd      	mov	sp, r7
    537e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5382:	4770      	bx	lr

00005384 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5384:	b580      	push	{r7, lr}
    5386:	b082      	sub	sp, #8
    5388:	af00      	add	r7, sp, #0
    538a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    538c:	4903      	ldr	r1, [pc, #12]	; (539c <_qspi_end_transfer+0x18>)
    538e:	6878      	ldr	r0, [r7, #4]
    5390:	4b03      	ldr	r3, [pc, #12]	; (53a0 <_qspi_end_transfer+0x1c>)
    5392:	4798      	blx	r3
}
    5394:	bf00      	nop
    5396:	3708      	adds	r7, #8
    5398:	46bd      	mov	sp, r7
    539a:	bd80      	pop	{r7, pc}
    539c:	01000002 	.word	0x01000002
    53a0:	00005241 	.word	0x00005241

000053a4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    53a4:	b580      	push	{r7, lr}
    53a6:	b082      	sub	sp, #8
    53a8:	af00      	add	r7, sp, #0
    53aa:	6078      	str	r0, [r7, #4]
    53ac:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    53ae:	687b      	ldr	r3, [r7, #4]
    53b0:	2b00      	cmp	r3, #0
    53b2:	d004      	beq.n	53be <_qspi_sync_init+0x1a>
    53b4:	683b      	ldr	r3, [r7, #0]
    53b6:	2b00      	cmp	r3, #0
    53b8:	d001      	beq.n	53be <_qspi_sync_init+0x1a>
    53ba:	2301      	movs	r3, #1
    53bc:	e000      	b.n	53c0 <_qspi_sync_init+0x1c>
    53be:	2300      	movs	r3, #0
    53c0:	f003 0301 	and.w	r3, r3, #1
    53c4:	b2db      	uxtb	r3, r3
    53c6:	2240      	movs	r2, #64	; 0x40
    53c8:	490c      	ldr	r1, [pc, #48]	; (53fc <_qspi_sync_init+0x58>)
    53ca:	4618      	mov	r0, r3
    53cc:	4b0c      	ldr	r3, [pc, #48]	; (5400 <_qspi_sync_init+0x5c>)
    53ce:	4798      	blx	r3
	dev->prvt = hw;
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	683a      	ldr	r2, [r7, #0]
    53d4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    53d6:	687b      	ldr	r3, [r7, #4]
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	2101      	movs	r1, #1
    53dc:	4618      	mov	r0, r3
    53de:	4b09      	ldr	r3, [pc, #36]	; (5404 <_qspi_sync_init+0x60>)
    53e0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    53e2:	4909      	ldr	r1, [pc, #36]	; (5408 <_qspi_sync_init+0x64>)
    53e4:	6838      	ldr	r0, [r7, #0]
    53e6:	4b09      	ldr	r3, [pc, #36]	; (540c <_qspi_sync_init+0x68>)
    53e8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    53ea:	4909      	ldr	r1, [pc, #36]	; (5410 <_qspi_sync_init+0x6c>)
    53ec:	6838      	ldr	r0, [r7, #0]
    53ee:	4b09      	ldr	r3, [pc, #36]	; (5414 <_qspi_sync_init+0x70>)
    53f0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    53f2:	2300      	movs	r3, #0
}
    53f4:	4618      	mov	r0, r3
    53f6:	3708      	adds	r7, #8
    53f8:	46bd      	mov	sp, r7
    53fa:	bd80      	pop	{r7, pc}
    53fc:	0000eec0 	.word	0x0000eec0
    5400:	000033ad 	.word	0x000033ad
    5404:	00005241 	.word	0x00005241
    5408:	06000011 	.word	0x06000011
    540c:	0000525d 	.word	0x0000525d
    5410:	00241300 	.word	0x00241300
    5414:	00005279 	.word	0x00005279

00005418 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5418:	b580      	push	{r7, lr}
    541a:	b082      	sub	sp, #8
    541c:	af00      	add	r7, sp, #0
    541e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	2102      	movs	r1, #2
    5426:	4618      	mov	r0, r3
    5428:	4b03      	ldr	r3, [pc, #12]	; (5438 <_qspi_sync_enable+0x20>)
    542a:	4798      	blx	r3
	return ERR_NONE;
    542c:	2300      	movs	r3, #0
}
    542e:	4618      	mov	r0, r3
    5430:	3708      	adds	r7, #8
    5432:	46bd      	mov	sp, r7
    5434:	bd80      	pop	{r7, pc}
    5436:	bf00      	nop
    5438:	00005241 	.word	0x00005241

0000543c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    543c:	b580      	push	{r7, lr}
    543e:	b082      	sub	sp, #8
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	681b      	ldr	r3, [r3, #0]
    5448:	2100      	movs	r1, #0
    544a:	4618      	mov	r0, r3
    544c:	4b03      	ldr	r3, [pc, #12]	; (545c <_qspi_sync_disable+0x20>)
    544e:	4798      	blx	r3
	return ERR_NONE;
    5450:	2300      	movs	r3, #0
}
    5452:	4618      	mov	r0, r3
    5454:	3708      	adds	r7, #8
    5456:	46bd      	mov	sp, r7
    5458:	bd80      	pop	{r7, pc}
    545a:	bf00      	nop
    545c:	00005241 	.word	0x00005241

00005460 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5460:	b580      	push	{r7, lr}
    5462:	b084      	sub	sp, #16
    5464:	af00      	add	r7, sp, #0
    5466:	6078      	str	r0, [r7, #4]
    5468:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	681b      	ldr	r3, [r3, #0]
    546e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5470:	683b      	ldr	r3, [r7, #0]
    5472:	781b      	ldrb	r3, [r3, #0]
    5474:	f003 0320 	and.w	r3, r3, #32
    5478:	b2db      	uxtb	r3, r3
    547a:	2b00      	cmp	r3, #0
    547c:	d005      	beq.n	548a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    547e:	683b      	ldr	r3, [r7, #0]
    5480:	689b      	ldr	r3, [r3, #8]
    5482:	4619      	mov	r1, r3
    5484:	68f8      	ldr	r0, [r7, #12]
    5486:	4b13      	ldr	r3, [pc, #76]	; (54d4 <_qspi_sync_command_set_ifr+0x74>)
    5488:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    548a:	683b      	ldr	r3, [r7, #0]
    548c:	781b      	ldrb	r3, [r3, #0]
    548e:	f003 0310 	and.w	r3, r3, #16
    5492:	b2db      	uxtb	r3, r3
    5494:	2b00      	cmp	r3, #0
    5496:	d005      	beq.n	54a4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5498:	683b      	ldr	r3, [r7, #0]
    549a:	791b      	ldrb	r3, [r3, #4]
    549c:	4619      	mov	r1, r3
    549e:	68f8      	ldr	r0, [r7, #12]
    54a0:	4b0d      	ldr	r3, [pc, #52]	; (54d8 <_qspi_sync_command_set_ifr+0x78>)
    54a2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    54a4:	683b      	ldr	r3, [r7, #0]
    54a6:	781b      	ldrb	r3, [r3, #0]
    54a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    54ac:	b2db      	uxtb	r3, r3
    54ae:	2b00      	cmp	r3, #0
    54b0:	d005      	beq.n	54be <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    54b2:	683b      	ldr	r3, [r7, #0]
    54b4:	795b      	ldrb	r3, [r3, #5]
    54b6:	4619      	mov	r1, r3
    54b8:	68f8      	ldr	r0, [r7, #12]
    54ba:	4b08      	ldr	r3, [pc, #32]	; (54dc <_qspi_sync_command_set_ifr+0x7c>)
    54bc:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    54be:	683b      	ldr	r3, [r7, #0]
    54c0:	681b      	ldr	r3, [r3, #0]
    54c2:	4619      	mov	r1, r3
    54c4:	68f8      	ldr	r0, [r7, #12]
    54c6:	4b06      	ldr	r3, [pc, #24]	; (54e0 <_qspi_sync_command_set_ifr+0x80>)
    54c8:	4798      	blx	r3
}
    54ca:	bf00      	nop
    54cc:	3710      	adds	r7, #16
    54ce:	46bd      	mov	sp, r7
    54d0:	bd80      	pop	{r7, pc}
    54d2:	bf00      	nop
    54d4:	00005295 	.word	0x00005295
    54d8:	000052b1 	.word	0x000052b1
    54dc:	000052e5 	.word	0x000052e5
    54e0:	0000531d 	.word	0x0000531d

000054e4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    54e4:	b580      	push	{r7, lr}
    54e6:	b084      	sub	sp, #16
    54e8:	af00      	add	r7, sp, #0
    54ea:	6078      	str	r0, [r7, #4]
    54ec:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    54f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    54f8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    54fa:	683b      	ldr	r3, [r7, #0]
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	f003 0320 	and.w	r3, r3, #32
    5502:	b2db      	uxtb	r3, r3
    5504:	2b00      	cmp	r3, #0
    5506:	d004      	beq.n	5512 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5508:	683b      	ldr	r3, [r7, #0]
    550a:	689b      	ldr	r3, [r3, #8]
    550c:	68fa      	ldr	r2, [r7, #12]
    550e:	4413      	add	r3, r2
    5510:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5512:	68b8      	ldr	r0, [r7, #8]
    5514:	4b18      	ldr	r3, [pc, #96]	; (5578 <_qspi_sync_run_transfer+0x94>)
    5516:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5518:	683b      	ldr	r3, [r7, #0]
    551a:	691b      	ldr	r3, [r3, #16]
    551c:	2b00      	cmp	r3, #0
    551e:	d103      	bne.n	5528 <_qspi_sync_run_transfer+0x44>
    5520:	683b      	ldr	r3, [r7, #0]
    5522:	695b      	ldr	r3, [r3, #20]
    5524:	2b00      	cmp	r3, #0
    5526:	d001      	beq.n	552c <_qspi_sync_run_transfer+0x48>
    5528:	2301      	movs	r3, #1
    552a:	e000      	b.n	552e <_qspi_sync_run_transfer+0x4a>
    552c:	2300      	movs	r3, #0
    552e:	f003 0301 	and.w	r3, r3, #1
    5532:	b2db      	uxtb	r3, r3
    5534:	2282      	movs	r2, #130	; 0x82
    5536:	4911      	ldr	r1, [pc, #68]	; (557c <_qspi_sync_run_transfer+0x98>)
    5538:	4618      	mov	r0, r3
    553a:	4b11      	ldr	r3, [pc, #68]	; (5580 <_qspi_sync_run_transfer+0x9c>)
    553c:	4798      	blx	r3

	if (cmd->tx_buf) {
    553e:	683b      	ldr	r3, [r7, #0]
    5540:	691b      	ldr	r3, [r3, #16]
    5542:	2b00      	cmp	r3, #0
    5544:	d008      	beq.n	5558 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5546:	683b      	ldr	r3, [r7, #0]
    5548:	6919      	ldr	r1, [r3, #16]
    554a:	683b      	ldr	r3, [r7, #0]
    554c:	68db      	ldr	r3, [r3, #12]
    554e:	461a      	mov	r2, r3
    5550:	68f8      	ldr	r0, [r7, #12]
    5552:	4b0c      	ldr	r3, [pc, #48]	; (5584 <_qspi_sync_run_transfer+0xa0>)
    5554:	4798      	blx	r3
    5556:	e007      	b.n	5568 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5558:	683b      	ldr	r3, [r7, #0]
    555a:	6958      	ldr	r0, [r3, #20]
    555c:	683b      	ldr	r3, [r7, #0]
    555e:	68db      	ldr	r3, [r3, #12]
    5560:	461a      	mov	r2, r3
    5562:	68f9      	ldr	r1, [r7, #12]
    5564:	4b07      	ldr	r3, [pc, #28]	; (5584 <_qspi_sync_run_transfer+0xa0>)
    5566:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    556c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5570:	bf00      	nop
    5572:	3710      	adds	r7, #16
    5574:	46bd      	mov	sp, r7
    5576:	bd80      	pop	{r7, pc}
    5578:	00005339 	.word	0x00005339
    557c:	0000eec0 	.word	0x0000eec0
    5580:	000033ad 	.word	0x000033ad
    5584:	00005351 	.word	0x00005351

00005588 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5588:	b580      	push	{r7, lr}
    558a:	b082      	sub	sp, #8
    558c:	af00      	add	r7, sp, #0
    558e:	6078      	str	r0, [r7, #4]
    5590:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5592:	6839      	ldr	r1, [r7, #0]
    5594:	6878      	ldr	r0, [r7, #4]
    5596:	4b14      	ldr	r3, [pc, #80]	; (55e8 <_qspi_sync_serial_run_command+0x60>)
    5598:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    559a:	683b      	ldr	r3, [r7, #0]
    559c:	781b      	ldrb	r3, [r3, #0]
    559e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    55a2:	b2db      	uxtb	r3, r3
    55a4:	2b00      	cmp	r3, #0
    55a6:	d003      	beq.n	55b0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    55a8:	6839      	ldr	r1, [r7, #0]
    55aa:	6878      	ldr	r0, [r7, #4]
    55ac:	4b0f      	ldr	r3, [pc, #60]	; (55ec <_qspi_sync_serial_run_command+0x64>)
    55ae:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	4618      	mov	r0, r3
    55b6:	4b0e      	ldr	r3, [pc, #56]	; (55f0 <_qspi_sync_serial_run_command+0x68>)
    55b8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    55ba:	bf00      	nop
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	681b      	ldr	r3, [r3, #0]
    55c0:	4618      	mov	r0, r3
    55c2:	4b0c      	ldr	r3, [pc, #48]	; (55f4 <_qspi_sync_serial_run_command+0x6c>)
    55c4:	4798      	blx	r3
    55c6:	4603      	mov	r3, r0
    55c8:	f083 0301 	eor.w	r3, r3, #1
    55cc:	b2db      	uxtb	r3, r3
    55ce:	2b00      	cmp	r3, #0
    55d0:	d1f4      	bne.n	55bc <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    55d2:	687b      	ldr	r3, [r7, #4]
    55d4:	681b      	ldr	r3, [r3, #0]
    55d6:	4618      	mov	r0, r3
    55d8:	4b07      	ldr	r3, [pc, #28]	; (55f8 <_qspi_sync_serial_run_command+0x70>)
    55da:	4798      	blx	r3
	return ERR_NONE;
    55dc:	2300      	movs	r3, #0
}
    55de:	4618      	mov	r0, r3
    55e0:	3708      	adds	r7, #8
    55e2:	46bd      	mov	sp, r7
    55e4:	bd80      	pop	{r7, pc}
    55e6:	bf00      	nop
    55e8:	00005461 	.word	0x00005461
    55ec:	000054e5 	.word	0x000054e5
    55f0:	00005385 	.word	0x00005385
    55f4:	000051fd 	.word	0x000051fd
    55f8:	00005225 	.word	0x00005225

000055fc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    55fc:	b480      	push	{r7}
    55fe:	b083      	sub	sp, #12
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
    5604:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5606:	bf00      	nop
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	691a      	ldr	r2, [r3, #16]
    560c:	683b      	ldr	r3, [r7, #0]
    560e:	4013      	ands	r3, r2
    5610:	2b00      	cmp	r3, #0
    5612:	d1f9      	bne.n	5608 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5614:	bf00      	nop
    5616:	370c      	adds	r7, #12
    5618:	46bd      	mov	sp, r7
    561a:	f85d 7b04 	ldr.w	r7, [sp], #4
    561e:	4770      	bx	lr

00005620 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5620:	b480      	push	{r7}
    5622:	b083      	sub	sp, #12
    5624:	af00      	add	r7, sp, #0
    5626:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5628:	687b      	ldr	r3, [r7, #4]
    562a:	f44f 7280 	mov.w	r2, #256	; 0x100
    562e:	819a      	strh	r2, [r3, #12]
}
    5630:	bf00      	nop
    5632:	370c      	adds	r7, #12
    5634:	46bd      	mov	sp, r7
    5636:	f85d 7b04 	ldr.w	r7, [sp], #4
    563a:	4770      	bx	lr

0000563c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    563c:	b480      	push	{r7}
    563e:	b083      	sub	sp, #12
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    564a:	819a      	strh	r2, [r3, #12]
}
    564c:	bf00      	nop
    564e:	370c      	adds	r7, #12
    5650:	46bd      	mov	sp, r7
    5652:	f85d 7b04 	ldr.w	r7, [sp], #4
    5656:	4770      	bx	lr

00005658 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5658:	b480      	push	{r7}
    565a:	b083      	sub	sp, #12
    565c:	af00      	add	r7, sp, #0
    565e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	899b      	ldrh	r3, [r3, #12]
    5664:	b29b      	uxth	r3, r3
}
    5666:	4618      	mov	r0, r3
    5668:	370c      	adds	r7, #12
    566a:	46bd      	mov	sp, r7
    566c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5670:	4770      	bx	lr

00005672 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5672:	b480      	push	{r7}
    5674:	b083      	sub	sp, #12
    5676:	af00      	add	r7, sp, #0
    5678:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    567a:	687b      	ldr	r3, [r7, #4]
    567c:	895b      	ldrh	r3, [r3, #10]
    567e:	b29b      	uxth	r3, r3
}
    5680:	4618      	mov	r0, r3
    5682:	370c      	adds	r7, #12
    5684:	46bd      	mov	sp, r7
    5686:	f85d 7b04 	ldr.w	r7, [sp], #4
    568a:	4770      	bx	lr

0000568c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    568c:	b580      	push	{r7, lr}
    568e:	b082      	sub	sp, #8
    5690:	af00      	add	r7, sp, #0
    5692:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	881b      	ldrh	r3, [r3, #0]
    5698:	b29b      	uxth	r3, r3
    569a:	f043 0301 	orr.w	r3, r3, #1
    569e:	b29a      	uxth	r2, r3
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    56a4:	2101      	movs	r1, #1
    56a6:	6878      	ldr	r0, [r7, #4]
    56a8:	4b02      	ldr	r3, [pc, #8]	; (56b4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    56aa:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    56ac:	bf00      	nop
    56ae:	3708      	adds	r7, #8
    56b0:	46bd      	mov	sp, r7
    56b2:	bd80      	pop	{r7, pc}
    56b4:	000055fd 	.word	0x000055fd

000056b8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    56b8:	b580      	push	{r7, lr}
    56ba:	b084      	sub	sp, #16
    56bc:	af00      	add	r7, sp, #0
    56be:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    56c0:	f248 0103 	movw	r1, #32771	; 0x8003
    56c4:	6878      	ldr	r0, [r7, #4]
    56c6:	4b0a      	ldr	r3, [pc, #40]	; (56f0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    56c8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	881b      	ldrh	r3, [r3, #0]
    56ce:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    56d0:	89fb      	ldrh	r3, [r7, #14]
    56d2:	085b      	lsrs	r3, r3, #1
    56d4:	b29b      	uxth	r3, r3
    56d6:	f003 0301 	and.w	r3, r3, #1
    56da:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    56dc:	89fb      	ldrh	r3, [r7, #14]
    56de:	2b00      	cmp	r3, #0
    56e0:	bf14      	ite	ne
    56e2:	2301      	movne	r3, #1
    56e4:	2300      	moveq	r3, #0
    56e6:	b2db      	uxtb	r3, r3
}
    56e8:	4618      	mov	r0, r3
    56ea:	3710      	adds	r7, #16
    56ec:	46bd      	mov	sp, r7
    56ee:	bd80      	pop	{r7, pc}
    56f0:	000055fd 	.word	0x000055fd

000056f4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    56f4:	b580      	push	{r7, lr}
    56f6:	b082      	sub	sp, #8
    56f8:	af00      	add	r7, sp, #0
    56fa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    56fc:	687b      	ldr	r3, [r7, #4]
    56fe:	881b      	ldrh	r3, [r3, #0]
    5700:	b29b      	uxth	r3, r3
    5702:	f023 0302 	bic.w	r3, r3, #2
    5706:	b29a      	uxth	r2, r3
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    570c:	f248 0103 	movw	r1, #32771	; 0x8003
    5710:	6878      	ldr	r0, [r7, #4]
    5712:	4b03      	ldr	r3, [pc, #12]	; (5720 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5714:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5716:	bf00      	nop
    5718:	3708      	adds	r7, #8
    571a:	46bd      	mov	sp, r7
    571c:	bd80      	pop	{r7, pc}
    571e:	bf00      	nop
    5720:	000055fd 	.word	0x000055fd

00005724 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5724:	b580      	push	{r7, lr}
    5726:	b082      	sub	sp, #8
    5728:	af00      	add	r7, sp, #0
    572a:	6078      	str	r0, [r7, #4]
    572c:	460b      	mov	r3, r1
    572e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	887a      	ldrh	r2, [r7, #2]
    5734:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5736:	f248 0103 	movw	r1, #32771	; 0x8003
    573a:	6878      	ldr	r0, [r7, #4]
    573c:	4b02      	ldr	r3, [pc, #8]	; (5748 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    573e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5740:	bf00      	nop
    5742:	3708      	adds	r7, #8
    5744:	46bd      	mov	sp, r7
    5746:	bd80      	pop	{r7, pc}
    5748:	000055fd 	.word	0x000055fd

0000574c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    574c:	b480      	push	{r7}
    574e:	b083      	sub	sp, #12
    5750:	af00      	add	r7, sp, #0
    5752:	6078      	str	r0, [r7, #4]
    5754:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5756:	687b      	ldr	r3, [r7, #4]
    5758:	683a      	ldr	r2, [r7, #0]
    575a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    575c:	bf00      	nop
    575e:	370c      	adds	r7, #12
    5760:	46bd      	mov	sp, r7
    5762:	f85d 7b04 	ldr.w	r7, [sp], #4
    5766:	4770      	bx	lr

00005768 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5768:	b580      	push	{r7, lr}
    576a:	b082      	sub	sp, #8
    576c:	af00      	add	r7, sp, #0
    576e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	2b00      	cmp	r3, #0
    5774:	d005      	beq.n	5782 <_calendar_init+0x1a>
    5776:	687b      	ldr	r3, [r7, #4]
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	2b00      	cmp	r3, #0
    577c:	d001      	beq.n	5782 <_calendar_init+0x1a>
    577e:	2301      	movs	r3, #1
    5780:	e000      	b.n	5784 <_calendar_init+0x1c>
    5782:	2300      	movs	r3, #0
    5784:	f003 0301 	and.w	r3, r3, #1
    5788:	b2db      	uxtb	r3, r3
    578a:	222f      	movs	r2, #47	; 0x2f
    578c:	491b      	ldr	r1, [pc, #108]	; (57fc <_calendar_init+0x94>)
    578e:	4618      	mov	r0, r3
    5790:	4b1b      	ldr	r3, [pc, #108]	; (5800 <_calendar_init+0x98>)
    5792:	4798      	blx	r3

	_rtc_dev = dev;
    5794:	4a1b      	ldr	r2, [pc, #108]	; (5804 <_calendar_init+0x9c>)
    5796:	687b      	ldr	r3, [r7, #4]
    5798:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    579a:	687b      	ldr	r3, [r7, #4]
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	4618      	mov	r0, r3
    57a0:	4b19      	ldr	r3, [pc, #100]	; (5808 <_calendar_init+0xa0>)
    57a2:	4798      	blx	r3
    57a4:	4603      	mov	r3, r0
    57a6:	2b00      	cmp	r3, #0
    57a8:	d00a      	beq.n	57c0 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	681b      	ldr	r3, [r3, #0]
    57ae:	4618      	mov	r0, r3
    57b0:	4b16      	ldr	r3, [pc, #88]	; (580c <_calendar_init+0xa4>)
    57b2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	681b      	ldr	r3, [r3, #0]
    57b8:	2102      	movs	r1, #2
    57ba:	4618      	mov	r0, r3
    57bc:	4b14      	ldr	r3, [pc, #80]	; (5810 <_calendar_init+0xa8>)
    57be:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	4618      	mov	r0, r3
    57c6:	4b13      	ldr	r3, [pc, #76]	; (5814 <_calendar_init+0xac>)
    57c8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	681b      	ldr	r3, [r3, #0]
    57ce:	2101      	movs	r1, #1
    57d0:	4618      	mov	r0, r3
    57d2:	4b0f      	ldr	r3, [pc, #60]	; (5810 <_calendar_init+0xa8>)
    57d4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    57d6:	687b      	ldr	r3, [r7, #4]
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    57de:	4618      	mov	r0, r3
    57e0:	4b0d      	ldr	r3, [pc, #52]	; (5818 <_calendar_init+0xb0>)
    57e2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    57e8:	2100      	movs	r1, #0
    57ea:	4618      	mov	r0, r3
    57ec:	4b0b      	ldr	r3, [pc, #44]	; (581c <_calendar_init+0xb4>)
    57ee:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    57f0:	2300      	movs	r3, #0
}
    57f2:	4618      	mov	r0, r3
    57f4:	3708      	adds	r7, #8
    57f6:	46bd      	mov	sp, r7
    57f8:	bd80      	pop	{r7, pc}
    57fa:	bf00      	nop
    57fc:	0000eed8 	.word	0x0000eed8
    5800:	000033ad 	.word	0x000033ad
    5804:	2000096c 	.word	0x2000096c
    5808:	000056b9 	.word	0x000056b9
    580c:	000056f5 	.word	0x000056f5
    5810:	000055fd 	.word	0x000055fd
    5814:	0000568d 	.word	0x0000568d
    5818:	00005725 	.word	0x00005725
    581c:	0000574d 	.word	0x0000574d

00005820 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5820:	b580      	push	{r7, lr}
    5822:	b084      	sub	sp, #16
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5828:	687b      	ldr	r3, [r7, #4]
    582a:	681b      	ldr	r3, [r3, #0]
    582c:	4618      	mov	r0, r3
    582e:	4b19      	ldr	r3, [pc, #100]	; (5894 <_rtc_interrupt_handler+0x74>)
    5830:	4798      	blx	r3
    5832:	4603      	mov	r3, r0
    5834:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	681b      	ldr	r3, [r3, #0]
    583a:	4618      	mov	r0, r3
    583c:	4b16      	ldr	r3, [pc, #88]	; (5898 <_rtc_interrupt_handler+0x78>)
    583e:	4798      	blx	r3
    5840:	4603      	mov	r3, r0
    5842:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5844:	89fa      	ldrh	r2, [r7, #14]
    5846:	89bb      	ldrh	r3, [r7, #12]
    5848:	4013      	ands	r3, r2
    584a:	b29b      	uxth	r3, r3
    584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5850:	2b00      	cmp	r3, #0
    5852:	d009      	beq.n	5868 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5854:	687b      	ldr	r3, [r7, #4]
    5856:	685b      	ldr	r3, [r3, #4]
    5858:	6878      	ldr	r0, [r7, #4]
    585a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    585c:	687b      	ldr	r3, [r7, #4]
    585e:	681b      	ldr	r3, [r3, #0]
    5860:	4618      	mov	r0, r3
    5862:	4b0e      	ldr	r3, [pc, #56]	; (589c <_rtc_interrupt_handler+0x7c>)
    5864:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5866:	e010      	b.n	588a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5868:	89fa      	ldrh	r2, [r7, #14]
    586a:	89bb      	ldrh	r3, [r7, #12]
    586c:	4013      	ands	r3, r2
    586e:	b29b      	uxth	r3, r3
    5870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5874:	2b00      	cmp	r3, #0
    5876:	d008      	beq.n	588a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5878:	687b      	ldr	r3, [r7, #4]
    587a:	689b      	ldr	r3, [r3, #8]
    587c:	6878      	ldr	r0, [r7, #4]
    587e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5880:	687b      	ldr	r3, [r7, #4]
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	4618      	mov	r0, r3
    5886:	4b06      	ldr	r3, [pc, #24]	; (58a0 <_rtc_interrupt_handler+0x80>)
    5888:	4798      	blx	r3
}
    588a:	bf00      	nop
    588c:	3710      	adds	r7, #16
    588e:	46bd      	mov	sp, r7
    5890:	bd80      	pop	{r7, pc}
    5892:	bf00      	nop
    5894:	00005659 	.word	0x00005659
    5898:	00005673 	.word	0x00005673
    589c:	00005621 	.word	0x00005621
    58a0:	0000563d 	.word	0x0000563d

000058a4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    58a4:	b580      	push	{r7, lr}
    58a6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    58a8:	4b03      	ldr	r3, [pc, #12]	; (58b8 <RTC_Handler+0x14>)
    58aa:	681b      	ldr	r3, [r3, #0]
    58ac:	4618      	mov	r0, r3
    58ae:	4b03      	ldr	r3, [pc, #12]	; (58bc <RTC_Handler+0x18>)
    58b0:	4798      	blx	r3
}
    58b2:	bf00      	nop
    58b4:	bd80      	pop	{r7, pc}
    58b6:	bf00      	nop
    58b8:	2000096c 	.word	0x2000096c
    58bc:	00005821 	.word	0x00005821

000058c0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    58c0:	b480      	push	{r7}
    58c2:	b083      	sub	sp, #12
    58c4:	af00      	add	r7, sp, #0
    58c6:	6078      	str	r0, [r7, #4]
    58c8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    58ca:	bf00      	nop
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	69da      	ldr	r2, [r3, #28]
    58d0:	683b      	ldr	r3, [r7, #0]
    58d2:	4013      	ands	r3, r2
    58d4:	2b00      	cmp	r3, #0
    58d6:	d1f9      	bne.n	58cc <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    58d8:	bf00      	nop
    58da:	370c      	adds	r7, #12
    58dc:	46bd      	mov	sp, r7
    58de:	f85d 7b04 	ldr.w	r7, [sp], #4
    58e2:	4770      	bx	lr

000058e4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    58e4:	b480      	push	{r7}
    58e6:	b083      	sub	sp, #12
    58e8:	af00      	add	r7, sp, #0
    58ea:	6078      	str	r0, [r7, #4]
    58ec:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    58ee:	687b      	ldr	r3, [r7, #4]
    58f0:	69da      	ldr	r2, [r3, #28]
    58f2:	683b      	ldr	r3, [r7, #0]
    58f4:	4013      	ands	r3, r2
    58f6:	2b00      	cmp	r3, #0
    58f8:	bf14      	ite	ne
    58fa:	2301      	movne	r3, #1
    58fc:	2300      	moveq	r3, #0
    58fe:	b2db      	uxtb	r3, r3
}
    5900:	4618      	mov	r0, r3
    5902:	370c      	adds	r7, #12
    5904:	46bd      	mov	sp, r7
    5906:	f85d 7b04 	ldr.w	r7, [sp], #4
    590a:	4770      	bx	lr

0000590c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    590c:	b480      	push	{r7}
    590e:	b083      	sub	sp, #12
    5910:	af00      	add	r7, sp, #0
    5912:	6078      	str	r0, [r7, #4]
    5914:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5916:	bf00      	nop
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	69da      	ldr	r2, [r3, #28]
    591c:	683b      	ldr	r3, [r7, #0]
    591e:	4013      	ands	r3, r2
    5920:	2b00      	cmp	r3, #0
    5922:	d1f9      	bne.n	5918 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5924:	bf00      	nop
    5926:	370c      	adds	r7, #12
    5928:	46bd      	mov	sp, r7
    592a:	f85d 7b04 	ldr.w	r7, [sp], #4
    592e:	4770      	bx	lr

00005930 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5930:	b480      	push	{r7}
    5932:	b083      	sub	sp, #12
    5934:	af00      	add	r7, sp, #0
    5936:	6078      	str	r0, [r7, #4]
    5938:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    593a:	687b      	ldr	r3, [r7, #4]
    593c:	69da      	ldr	r2, [r3, #28]
    593e:	683b      	ldr	r3, [r7, #0]
    5940:	4013      	ands	r3, r2
    5942:	2b00      	cmp	r3, #0
    5944:	bf14      	ite	ne
    5946:	2301      	movne	r3, #1
    5948:	2300      	moveq	r3, #0
    594a:	b2db      	uxtb	r3, r3
}
    594c:	4618      	mov	r0, r3
    594e:	370c      	adds	r7, #12
    5950:	46bd      	mov	sp, r7
    5952:	f85d 7b04 	ldr.w	r7, [sp], #4
    5956:	4770      	bx	lr

00005958 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5958:	b480      	push	{r7}
    595a:	b083      	sub	sp, #12
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	2201      	movs	r2, #1
    5964:	761a      	strb	r2, [r3, #24]
}
    5966:	bf00      	nop
    5968:	370c      	adds	r7, #12
    596a:	46bd      	mov	sp, r7
    596c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5970:	4770      	bx	lr

00005972 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5972:	b480      	push	{r7}
    5974:	b083      	sub	sp, #12
    5976:	af00      	add	r7, sp, #0
    5978:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	2202      	movs	r2, #2
    597e:	761a      	strb	r2, [r3, #24]
}
    5980:	bf00      	nop
    5982:	370c      	adds	r7, #12
    5984:	46bd      	mov	sp, r7
    5986:	f85d 7b04 	ldr.w	r7, [sp], #4
    598a:	4770      	bx	lr

0000598c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    598c:	b480      	push	{r7}
    598e:	b083      	sub	sp, #12
    5990:	af00      	add	r7, sp, #0
    5992:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	7e1b      	ldrb	r3, [r3, #24]
    5998:	b2db      	uxtb	r3, r3
}
    599a:	4618      	mov	r0, r3
    599c:	370c      	adds	r7, #12
    599e:	46bd      	mov	sp, r7
    59a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a4:	4770      	bx	lr

000059a6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    59a6:	b480      	push	{r7}
    59a8:	b085      	sub	sp, #20
    59aa:	af00      	add	r7, sp, #0
    59ac:	6078      	str	r0, [r7, #4]
    59ae:	460b      	mov	r3, r1
    59b0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	7e1b      	ldrb	r3, [r3, #24]
    59b6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    59b8:	7bfa      	ldrb	r2, [r7, #15]
    59ba:	78fb      	ldrb	r3, [r7, #3]
    59bc:	4013      	ands	r3, r2
    59be:	73fb      	strb	r3, [r7, #15]
	return tmp;
    59c0:	7bfb      	ldrb	r3, [r7, #15]
}
    59c2:	4618      	mov	r0, r3
    59c4:	3714      	adds	r7, #20
    59c6:	46bd      	mov	sp, r7
    59c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59cc:	4770      	bx	lr

000059ce <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    59ce:	b480      	push	{r7}
    59d0:	b083      	sub	sp, #12
    59d2:	af00      	add	r7, sp, #0
    59d4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	7e1b      	ldrb	r3, [r3, #24]
    59da:	b2db      	uxtb	r3, r3
}
    59dc:	4618      	mov	r0, r3
    59de:	370c      	adds	r7, #12
    59e0:	46bd      	mov	sp, r7
    59e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e6:	4770      	bx	lr

000059e8 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    59e8:	b480      	push	{r7}
    59ea:	b083      	sub	sp, #12
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
    59f0:	460b      	mov	r3, r1
    59f2:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	78fa      	ldrb	r2, [r7, #3]
    59f8:	761a      	strb	r2, [r3, #24]
}
    59fa:	bf00      	nop
    59fc:	370c      	adds	r7, #12
    59fe:	46bd      	mov	sp, r7
    5a00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a04:	4770      	bx	lr
	...

00005a08 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5a08:	b580      	push	{r7, lr}
    5a0a:	b082      	sub	sp, #8
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	681b      	ldr	r3, [r3, #0]
    5a14:	f043 0202 	orr.w	r2, r3, #2
    5a18:	687b      	ldr	r3, [r7, #4]
    5a1a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a1c:	2103      	movs	r1, #3
    5a1e:	6878      	ldr	r0, [r7, #4]
    5a20:	4b02      	ldr	r3, [pc, #8]	; (5a2c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5a22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a24:	bf00      	nop
    5a26:	3708      	adds	r7, #8
    5a28:	46bd      	mov	sp, r7
    5a2a:	bd80      	pop	{r7, pc}
    5a2c:	000058c1 	.word	0x000058c1

00005a30 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a30:	b580      	push	{r7, lr}
    5a32:	b082      	sub	sp, #8
    5a34:	af00      	add	r7, sp, #0
    5a36:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5a38:	687b      	ldr	r3, [r7, #4]
    5a3a:	681b      	ldr	r3, [r3, #0]
    5a3c:	f023 0202 	bic.w	r2, r3, #2
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a44:	2103      	movs	r1, #3
    5a46:	6878      	ldr	r0, [r7, #4]
    5a48:	4b02      	ldr	r3, [pc, #8]	; (5a54 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5a4a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a4c:	bf00      	nop
    5a4e:	3708      	adds	r7, #8
    5a50:	46bd      	mov	sp, r7
    5a52:	bd80      	pop	{r7, pc}
    5a54:	000058c1 	.word	0x000058c1

00005a58 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5a58:	b480      	push	{r7}
    5a5a:	b085      	sub	sp, #20
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	681b      	ldr	r3, [r3, #0]
    5a64:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5a66:	68fb      	ldr	r3, [r7, #12]
    5a68:	0edb      	lsrs	r3, r3, #27
    5a6a:	f003 0301 	and.w	r3, r3, #1
    5a6e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5a70:	68fb      	ldr	r3, [r7, #12]
    5a72:	2b00      	cmp	r3, #0
    5a74:	bf14      	ite	ne
    5a76:	2301      	movne	r3, #1
    5a78:	2300      	moveq	r3, #0
    5a7a:	b2db      	uxtb	r3, r3
}
    5a7c:	4618      	mov	r0, r3
    5a7e:	3714      	adds	r7, #20
    5a80:	46bd      	mov	sp, r7
    5a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a86:	4770      	bx	lr

00005a88 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5a88:	b580      	push	{r7, lr}
    5a8a:	b084      	sub	sp, #16
    5a8c:	af00      	add	r7, sp, #0
    5a8e:	6078      	str	r0, [r7, #4]
    5a90:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a92:	2103      	movs	r1, #3
    5a94:	6878      	ldr	r0, [r7, #4]
    5a96:	4b07      	ldr	r3, [pc, #28]	; (5ab4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5a98:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5aa0:	68fa      	ldr	r2, [r7, #12]
    5aa2:	683b      	ldr	r3, [r7, #0]
    5aa4:	4013      	ands	r3, r2
    5aa6:	60fb      	str	r3, [r7, #12]
	return tmp;
    5aa8:	68fb      	ldr	r3, [r7, #12]
}
    5aaa:	4618      	mov	r0, r3
    5aac:	3710      	adds	r7, #16
    5aae:	46bd      	mov	sp, r7
    5ab0:	bd80      	pop	{r7, pc}
    5ab2:	bf00      	nop
    5ab4:	000058c1 	.word	0x000058c1

00005ab8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5ab8:	b580      	push	{r7, lr}
    5aba:	b082      	sub	sp, #8
    5abc:	af00      	add	r7, sp, #0
    5abe:	6078      	str	r0, [r7, #4]
    5ac0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	683a      	ldr	r2, [r7, #0]
    5ac6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ac8:	2103      	movs	r1, #3
    5aca:	6878      	ldr	r0, [r7, #4]
    5acc:	4b02      	ldr	r3, [pc, #8]	; (5ad8 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5ace:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ad0:	bf00      	nop
    5ad2:	3708      	adds	r7, #8
    5ad4:	46bd      	mov	sp, r7
    5ad6:	bd80      	pop	{r7, pc}
    5ad8:	000058c1 	.word	0x000058c1

00005adc <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5adc:	b580      	push	{r7, lr}
    5ade:	b084      	sub	sp, #16
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ae4:	2103      	movs	r1, #3
    5ae6:	6878      	ldr	r0, [r7, #4]
    5ae8:	4b09      	ldr	r3, [pc, #36]	; (5b10 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5aea:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5aec:	687b      	ldr	r3, [r7, #4]
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5af2:	68fb      	ldr	r3, [r7, #12]
    5af4:	085b      	lsrs	r3, r3, #1
    5af6:	f003 0301 	and.w	r3, r3, #1
    5afa:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5afc:	68fb      	ldr	r3, [r7, #12]
    5afe:	2b00      	cmp	r3, #0
    5b00:	bf14      	ite	ne
    5b02:	2301      	movne	r3, #1
    5b04:	2300      	moveq	r3, #0
    5b06:	b2db      	uxtb	r3, r3
}
    5b08:	4618      	mov	r0, r3
    5b0a:	3710      	adds	r7, #16
    5b0c:	46bd      	mov	sp, r7
    5b0e:	bd80      	pop	{r7, pc}
    5b10:	0000590d 	.word	0x0000590d

00005b14 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5b14:	b580      	push	{r7, lr}
    5b16:	b082      	sub	sp, #8
    5b18:	af00      	add	r7, sp, #0
    5b1a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5b1c:	687b      	ldr	r3, [r7, #4]
    5b1e:	681b      	ldr	r3, [r3, #0]
    5b20:	f023 0202 	bic.w	r2, r3, #2
    5b24:	687b      	ldr	r3, [r7, #4]
    5b26:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b28:	2103      	movs	r1, #3
    5b2a:	6878      	ldr	r0, [r7, #4]
    5b2c:	4b02      	ldr	r3, [pc, #8]	; (5b38 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5b2e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b30:	bf00      	nop
    5b32:	3708      	adds	r7, #8
    5b34:	46bd      	mov	sp, r7
    5b36:	bd80      	pop	{r7, pc}
    5b38:	0000590d 	.word	0x0000590d

00005b3c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5b3c:	b580      	push	{r7, lr}
    5b3e:	b084      	sub	sp, #16
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
    5b44:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b46:	2103      	movs	r1, #3
    5b48:	6878      	ldr	r0, [r7, #4]
    5b4a:	4b07      	ldr	r3, [pc, #28]	; (5b68 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5b4c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b4e:	687b      	ldr	r3, [r7, #4]
    5b50:	681b      	ldr	r3, [r3, #0]
    5b52:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b54:	68fa      	ldr	r2, [r7, #12]
    5b56:	683b      	ldr	r3, [r7, #0]
    5b58:	4013      	ands	r3, r2
    5b5a:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b5c:	68fb      	ldr	r3, [r7, #12]
}
    5b5e:	4618      	mov	r0, r3
    5b60:	3710      	adds	r7, #16
    5b62:	46bd      	mov	sp, r7
    5b64:	bd80      	pop	{r7, pc}
    5b66:	bf00      	nop
    5b68:	0000590d 	.word	0x0000590d

00005b6c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b082      	sub	sp, #8
    5b70:	af00      	add	r7, sp, #0
    5b72:	6078      	str	r0, [r7, #4]
    5b74:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5b76:	687b      	ldr	r3, [r7, #4]
    5b78:	683a      	ldr	r2, [r7, #0]
    5b7a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b7c:	2103      	movs	r1, #3
    5b7e:	6878      	ldr	r0, [r7, #4]
    5b80:	4b02      	ldr	r3, [pc, #8]	; (5b8c <hri_sercomspi_write_CTRLA_reg+0x20>)
    5b82:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b84:	bf00      	nop
    5b86:	3708      	adds	r7, #8
    5b88:	46bd      	mov	sp, r7
    5b8a:	bd80      	pop	{r7, pc}
    5b8c:	0000590d 	.word	0x0000590d

00005b90 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5b90:	b580      	push	{r7, lr}
    5b92:	b082      	sub	sp, #8
    5b94:	af00      	add	r7, sp, #0
    5b96:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	685b      	ldr	r3, [r3, #4]
    5b9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ba4:	2104      	movs	r1, #4
    5ba6:	6878      	ldr	r0, [r7, #4]
    5ba8:	4b02      	ldr	r3, [pc, #8]	; (5bb4 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5baa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bac:	bf00      	nop
    5bae:	3708      	adds	r7, #8
    5bb0:	46bd      	mov	sp, r7
    5bb2:	bd80      	pop	{r7, pc}
    5bb4:	000058c1 	.word	0x000058c1

00005bb8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5bb8:	b580      	push	{r7, lr}
    5bba:	b082      	sub	sp, #8
    5bbc:	af00      	add	r7, sp, #0
    5bbe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5bc0:	687b      	ldr	r3, [r7, #4]
    5bc2:	685b      	ldr	r3, [r3, #4]
    5bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bcc:	2104      	movs	r1, #4
    5bce:	6878      	ldr	r0, [r7, #4]
    5bd0:	4b02      	ldr	r3, [pc, #8]	; (5bdc <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5bd2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bd4:	bf00      	nop
    5bd6:	3708      	adds	r7, #8
    5bd8:	46bd      	mov	sp, r7
    5bda:	bd80      	pop	{r7, pc}
    5bdc:	000058c1 	.word	0x000058c1

00005be0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5be0:	b580      	push	{r7, lr}
    5be2:	b082      	sub	sp, #8
    5be4:	af00      	add	r7, sp, #0
    5be6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	685b      	ldr	r3, [r3, #4]
    5bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bf4:	2104      	movs	r1, #4
    5bf6:	6878      	ldr	r0, [r7, #4]
    5bf8:	4b02      	ldr	r3, [pc, #8]	; (5c04 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5bfa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bfc:	bf00      	nop
    5bfe:	3708      	adds	r7, #8
    5c00:	46bd      	mov	sp, r7
    5c02:	bd80      	pop	{r7, pc}
    5c04:	000058c1 	.word	0x000058c1

00005c08 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	b082      	sub	sp, #8
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	685b      	ldr	r3, [r3, #4]
    5c14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c1c:	2104      	movs	r1, #4
    5c1e:	6878      	ldr	r0, [r7, #4]
    5c20:	4b02      	ldr	r3, [pc, #8]	; (5c2c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5c22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c24:	bf00      	nop
    5c26:	3708      	adds	r7, #8
    5c28:	46bd      	mov	sp, r7
    5c2a:	bd80      	pop	{r7, pc}
    5c2c:	000058c1 	.word	0x000058c1

00005c30 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5c30:	b580      	push	{r7, lr}
    5c32:	b082      	sub	sp, #8
    5c34:	af00      	add	r7, sp, #0
    5c36:	6078      	str	r0, [r7, #4]
    5c38:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	685a      	ldr	r2, [r3, #4]
    5c3e:	683b      	ldr	r3, [r7, #0]
    5c40:	041b      	lsls	r3, r3, #16
    5c42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5c46:	431a      	orrs	r2, r3
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c4c:	2104      	movs	r1, #4
    5c4e:	6878      	ldr	r0, [r7, #4]
    5c50:	4b02      	ldr	r3, [pc, #8]	; (5c5c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5c52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c54:	bf00      	nop
    5c56:	3708      	adds	r7, #8
    5c58:	46bd      	mov	sp, r7
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	000058c1 	.word	0x000058c1

00005c60 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5c60:	b580      	push	{r7, lr}
    5c62:	b082      	sub	sp, #8
    5c64:	af00      	add	r7, sp, #0
    5c66:	6078      	str	r0, [r7, #4]
    5c68:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5c6a:	687b      	ldr	r3, [r7, #4]
    5c6c:	683a      	ldr	r2, [r7, #0]
    5c6e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c70:	2104      	movs	r1, #4
    5c72:	6878      	ldr	r0, [r7, #4]
    5c74:	4b02      	ldr	r3, [pc, #8]	; (5c80 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5c76:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c78:	bf00      	nop
    5c7a:	3708      	adds	r7, #8
    5c7c:	46bd      	mov	sp, r7
    5c7e:	bd80      	pop	{r7, pc}
    5c80:	000058c1 	.word	0x000058c1

00005c84 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5c84:	b580      	push	{r7, lr}
    5c86:	b082      	sub	sp, #8
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
    5c8c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	683a      	ldr	r2, [r7, #0]
    5c92:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5c94:	2117      	movs	r1, #23
    5c96:	6878      	ldr	r0, [r7, #4]
    5c98:	4b02      	ldr	r3, [pc, #8]	; (5ca4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5c9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c9c:	bf00      	nop
    5c9e:	3708      	adds	r7, #8
    5ca0:	46bd      	mov	sp, r7
    5ca2:	bd80      	pop	{r7, pc}
    5ca4:	0000590d 	.word	0x0000590d

00005ca8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5ca8:	b480      	push	{r7}
    5caa:	b083      	sub	sp, #12
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    5cb0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	683a      	ldr	r2, [r7, #0]
    5cb6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cb8:	bf00      	nop
    5cba:	370c      	adds	r7, #12
    5cbc:	46bd      	mov	sp, r7
    5cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc2:	4770      	bx	lr

00005cc4 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5cc4:	b480      	push	{r7}
    5cc6:	b083      	sub	sp, #12
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
    5ccc:	460b      	mov	r3, r1
    5cce:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	78fa      	ldrb	r2, [r7, #3]
    5cd4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cd6:	bf00      	nop
    5cd8:	370c      	adds	r7, #12
    5cda:	46bd      	mov	sp, r7
    5cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce0:	4770      	bx	lr
	...

00005ce4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5ce4:	b580      	push	{r7, lr}
    5ce6:	b084      	sub	sp, #16
    5ce8:	af00      	add	r7, sp, #0
    5cea:	6078      	str	r0, [r7, #4]
    5cec:	460b      	mov	r3, r1
    5cee:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5cf4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5cfc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5cfe:	78fb      	ldrb	r3, [r7, #3]
    5d00:	039b      	lsls	r3, r3, #14
    5d02:	461a      	mov	r2, r3
    5d04:	68fb      	ldr	r3, [r7, #12]
    5d06:	4313      	orrs	r3, r2
    5d08:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	68fa      	ldr	r2, [r7, #12]
    5d0e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d10:	2104      	movs	r1, #4
    5d12:	6878      	ldr	r0, [r7, #4]
    5d14:	4b02      	ldr	r3, [pc, #8]	; (5d20 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5d16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d18:	bf00      	nop
    5d1a:	3710      	adds	r7, #16
    5d1c:	46bd      	mov	sp, r7
    5d1e:	bd80      	pop	{r7, pc}
    5d20:	000058c1 	.word	0x000058c1

00005d24 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b082      	sub	sp, #8
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
    5d2c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	683a      	ldr	r2, [r7, #0]
    5d32:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d34:	2104      	movs	r1, #4
    5d36:	6878      	ldr	r0, [r7, #4]
    5d38:	4b02      	ldr	r3, [pc, #8]	; (5d44 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5d3a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d3c:	bf00      	nop
    5d3e:	3708      	adds	r7, #8
    5d40:	46bd      	mov	sp, r7
    5d42:	bd80      	pop	{r7, pc}
    5d44:	000058c1 	.word	0x000058c1

00005d48 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5d48:	b580      	push	{r7, lr}
    5d4a:	b082      	sub	sp, #8
    5d4c:	af00      	add	r7, sp, #0
    5d4e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d50:	2104      	movs	r1, #4
    5d52:	6878      	ldr	r0, [r7, #4]
    5d54:	4b03      	ldr	r3, [pc, #12]	; (5d64 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5d56:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5d5c:	4618      	mov	r0, r3
    5d5e:	3708      	adds	r7, #8
    5d60:	46bd      	mov	sp, r7
    5d62:	bd80      	pop	{r7, pc}
    5d64:	000058c1 	.word	0x000058c1

00005d68 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5d68:	b480      	push	{r7}
    5d6a:	b083      	sub	sp, #12
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	6078      	str	r0, [r7, #4]
    5d70:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	683a      	ldr	r2, [r7, #0]
    5d76:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d78:	bf00      	nop
    5d7a:	370c      	adds	r7, #12
    5d7c:	46bd      	mov	sp, r7
    5d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d82:	4770      	bx	lr

00005d84 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5d84:	b580      	push	{r7, lr}
    5d86:	b082      	sub	sp, #8
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
    5d8c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5d8e:	687b      	ldr	r3, [r7, #4]
    5d90:	683a      	ldr	r2, [r7, #0]
    5d92:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d94:	2104      	movs	r1, #4
    5d96:	6878      	ldr	r0, [r7, #4]
    5d98:	4b02      	ldr	r3, [pc, #8]	; (5da4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5d9a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d9c:	bf00      	nop
    5d9e:	3708      	adds	r7, #8
    5da0:	46bd      	mov	sp, r7
    5da2:	bd80      	pop	{r7, pc}
    5da4:	000058c1 	.word	0x000058c1

00005da8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5da8:	b580      	push	{r7, lr}
    5daa:	b082      	sub	sp, #8
    5dac:	af00      	add	r7, sp, #0
    5dae:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5db0:	2104      	movs	r1, #4
    5db2:	6878      	ldr	r0, [r7, #4]
    5db4:	4b03      	ldr	r3, [pc, #12]	; (5dc4 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5db6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5dbc:	4618      	mov	r0, r3
    5dbe:	3708      	adds	r7, #8
    5dc0:	46bd      	mov	sp, r7
    5dc2:	bd80      	pop	{r7, pc}
    5dc4:	000058c1 	.word	0x000058c1

00005dc8 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5dc8:	b480      	push	{r7}
    5dca:	b083      	sub	sp, #12
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
    5dd0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5dd2:	687b      	ldr	r3, [r7, #4]
    5dd4:	683a      	ldr	r2, [r7, #0]
    5dd6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dd8:	bf00      	nop
    5dda:	370c      	adds	r7, #12
    5ddc:	46bd      	mov	sp, r7
    5dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    5de2:	4770      	bx	lr

00005de4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5de4:	b480      	push	{r7}
    5de6:	b083      	sub	sp, #12
    5de8:	af00      	add	r7, sp, #0
    5dea:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5dec:	687b      	ldr	r3, [r7, #4]
    5dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5df0:	4618      	mov	r0, r3
    5df2:	370c      	adds	r7, #12
    5df4:	46bd      	mov	sp, r7
    5df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dfa:	4770      	bx	lr

00005dfc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5dfc:	b480      	push	{r7}
    5dfe:	b083      	sub	sp, #12
    5e00:	af00      	add	r7, sp, #0
    5e02:	6078      	str	r0, [r7, #4]
    5e04:	460b      	mov	r3, r1
    5e06:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	78fa      	ldrb	r2, [r7, #3]
    5e0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e10:	bf00      	nop
    5e12:	370c      	adds	r7, #12
    5e14:	46bd      	mov	sp, r7
    5e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e1a:	4770      	bx	lr

00005e1c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5e1c:	b480      	push	{r7}
    5e1e:	b083      	sub	sp, #12
    5e20:	af00      	add	r7, sp, #0
    5e22:	6078      	str	r0, [r7, #4]
    5e24:	460b      	mov	r3, r1
    5e26:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5e28:	687b      	ldr	r3, [r7, #4]
    5e2a:	887a      	ldrh	r2, [r7, #2]
    5e2c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e2e:	bf00      	nop
    5e30:	370c      	adds	r7, #12
    5e32:	46bd      	mov	sp, r7
    5e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e38:	4770      	bx	lr
	...

00005e3c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    5e3c:	b580      	push	{r7, lr}
    5e3e:	b082      	sub	sp, #8
    5e40:	af00      	add	r7, sp, #0
    5e42:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e44:	2104      	movs	r1, #4
    5e46:	6878      	ldr	r0, [r7, #4]
    5e48:	4b06      	ldr	r3, [pc, #24]	; (5e64 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    5e4a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    5e4c:	687b      	ldr	r3, [r7, #4]
    5e4e:	8b5b      	ldrh	r3, [r3, #26]
    5e50:	b29b      	uxth	r3, r3
    5e52:	091b      	lsrs	r3, r3, #4
    5e54:	b29b      	uxth	r3, r3
    5e56:	f003 0303 	and.w	r3, r3, #3
    5e5a:	b29b      	uxth	r3, r3
}
    5e5c:	4618      	mov	r0, r3
    5e5e:	3708      	adds	r7, #8
    5e60:	46bd      	mov	sp, r7
    5e62:	bd80      	pop	{r7, pc}
    5e64:	000058c1 	.word	0x000058c1

00005e68 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5e68:	b580      	push	{r7, lr}
    5e6a:	b082      	sub	sp, #8
    5e6c:	af00      	add	r7, sp, #0
    5e6e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e70:	2104      	movs	r1, #4
    5e72:	6878      	ldr	r0, [r7, #4]
    5e74:	4b04      	ldr	r3, [pc, #16]	; (5e88 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5e76:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5e78:	687b      	ldr	r3, [r7, #4]
    5e7a:	8b5b      	ldrh	r3, [r3, #26]
    5e7c:	b29b      	uxth	r3, r3
}
    5e7e:	4618      	mov	r0, r3
    5e80:	3708      	adds	r7, #8
    5e82:	46bd      	mov	sp, r7
    5e84:	bd80      	pop	{r7, pc}
    5e86:	bf00      	nop
    5e88:	000058c1 	.word	0x000058c1

00005e8c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    5e8c:	b580      	push	{r7, lr}
    5e8e:	b082      	sub	sp, #8
    5e90:	af00      	add	r7, sp, #0
    5e92:	6078      	str	r0, [r7, #4]
    5e94:	460b      	mov	r3, r1
    5e96:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	887a      	ldrh	r2, [r7, #2]
    5e9c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e9e:	2104      	movs	r1, #4
    5ea0:	6878      	ldr	r0, [r7, #4]
    5ea2:	4b03      	ldr	r3, [pc, #12]	; (5eb0 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    5ea4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ea6:	bf00      	nop
    5ea8:	3708      	adds	r7, #8
    5eaa:	46bd      	mov	sp, r7
    5eac:	bd80      	pop	{r7, pc}
    5eae:	bf00      	nop
    5eb0:	000058c1 	.word	0x000058c1

00005eb4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5eb4:	b4b0      	push	{r4, r5, r7}
    5eb6:	b08d      	sub	sp, #52	; 0x34
    5eb8:	af00      	add	r7, sp, #0
    5eba:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5ebc:	4b13      	ldr	r3, [pc, #76]	; (5f0c <_sercom_get_hardware_index+0x58>)
    5ebe:	f107 040c 	add.w	r4, r7, #12
    5ec2:	461d      	mov	r5, r3
    5ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5ec8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ed0:	2300      	movs	r3, #0
    5ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ed4:	e010      	b.n	5ef8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ed8:	009b      	lsls	r3, r3, #2
    5eda:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5ede:	4413      	add	r3, r2
    5ee0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5ee4:	461a      	mov	r2, r3
    5ee6:	687b      	ldr	r3, [r7, #4]
    5ee8:	429a      	cmp	r2, r3
    5eea:	d102      	bne.n	5ef2 <_sercom_get_hardware_index+0x3e>
			return i;
    5eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5eee:	b2db      	uxtb	r3, r3
    5ef0:	e006      	b.n	5f00 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ef4:	3301      	adds	r3, #1
    5ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5efa:	2b07      	cmp	r3, #7
    5efc:	d9eb      	bls.n	5ed6 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5efe:	2300      	movs	r3, #0
}
    5f00:	4618      	mov	r0, r3
    5f02:	3734      	adds	r7, #52	; 0x34
    5f04:	46bd      	mov	sp, r7
    5f06:	bcb0      	pop	{r4, r5, r7}
    5f08:	4770      	bx	lr
    5f0a:	bf00      	nop
    5f0c:	0000ef0c 	.word	0x0000ef0c

00005f10 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5f10:	b580      	push	{r7, lr}
    5f12:	b084      	sub	sp, #16
    5f14:	af00      	add	r7, sp, #0
    5f16:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5f18:	6878      	ldr	r0, [r7, #4]
    5f1a:	4b13      	ldr	r3, [pc, #76]	; (5f68 <_get_i2cm_index+0x58>)
    5f1c:	4798      	blx	r3
    5f1e:	4603      	mov	r3, r0
    5f20:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f22:	2300      	movs	r3, #0
    5f24:	73fb      	strb	r3, [r7, #15]
    5f26:	e010      	b.n	5f4a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5f28:	7bfa      	ldrb	r2, [r7, #15]
    5f2a:	4910      	ldr	r1, [pc, #64]	; (5f6c <_get_i2cm_index+0x5c>)
    5f2c:	4613      	mov	r3, r2
    5f2e:	005b      	lsls	r3, r3, #1
    5f30:	4413      	add	r3, r2
    5f32:	00db      	lsls	r3, r3, #3
    5f34:	440b      	add	r3, r1
    5f36:	781b      	ldrb	r3, [r3, #0]
    5f38:	7bba      	ldrb	r2, [r7, #14]
    5f3a:	429a      	cmp	r2, r3
    5f3c:	d102      	bne.n	5f44 <_get_i2cm_index+0x34>
			return i;
    5f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5f42:	e00d      	b.n	5f60 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f44:	7bfb      	ldrb	r3, [r7, #15]
    5f46:	3301      	adds	r3, #1
    5f48:	73fb      	strb	r3, [r7, #15]
    5f4a:	7bfb      	ldrb	r3, [r7, #15]
    5f4c:	2b02      	cmp	r3, #2
    5f4e:	d9eb      	bls.n	5f28 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5f50:	f240 32a6 	movw	r2, #934	; 0x3a6
    5f54:	4906      	ldr	r1, [pc, #24]	; (5f70 <_get_i2cm_index+0x60>)
    5f56:	2000      	movs	r0, #0
    5f58:	4b06      	ldr	r3, [pc, #24]	; (5f74 <_get_i2cm_index+0x64>)
    5f5a:	4798      	blx	r3
	return -1;
    5f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
    5f60:	4618      	mov	r0, r3
    5f62:	3710      	adds	r7, #16
    5f64:	46bd      	mov	sp, r7
    5f66:	bd80      	pop	{r7, pc}
    5f68:	00005eb5 	.word	0x00005eb5
    5f6c:	20000018 	.word	0x20000018
    5f70:	0000eef0 	.word	0x0000eef0
    5f74:	000033ad 	.word	0x000033ad

00005f78 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5f78:	b580      	push	{r7, lr}
    5f7a:	b082      	sub	sp, #8
    5f7c:	af00      	add	r7, sp, #0
    5f7e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5f80:	2103      	movs	r1, #3
    5f82:	6878      	ldr	r0, [r7, #4]
    5f84:	4b02      	ldr	r3, [pc, #8]	; (5f90 <_sercom_i2c_send_stop+0x18>)
    5f86:	4798      	blx	r3
}
    5f88:	bf00      	nop
    5f8a:	3708      	adds	r7, #8
    5f8c:	46bd      	mov	sp, r7
    5f8e:	bd80      	pop	{r7, pc}
    5f90:	00005c31 	.word	0x00005c31

00005f94 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5f94:	b590      	push	{r4, r7, lr}
    5f96:	b087      	sub	sp, #28
    5f98:	af00      	add	r7, sp, #0
    5f9a:	60f8      	str	r0, [r7, #12]
    5f9c:	60b9      	str	r1, [r7, #8]
    5f9e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5fa0:	68f8      	ldr	r0, [r7, #12]
    5fa2:	4b7d      	ldr	r3, [pc, #500]	; (6198 <_sercom_i2c_sync_analyse_flags+0x204>)
    5fa4:	4798      	blx	r3
    5fa6:	4603      	mov	r3, r0
    5fa8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5faa:	68f8      	ldr	r0, [r7, #12]
    5fac:	4b7b      	ldr	r3, [pc, #492]	; (619c <_sercom_i2c_sync_analyse_flags+0x208>)
    5fae:	4798      	blx	r3
    5fb0:	4603      	mov	r3, r0
    5fb2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5fb4:	68bb      	ldr	r3, [r7, #8]
    5fb6:	f003 0301 	and.w	r3, r3, #1
    5fba:	2b00      	cmp	r3, #0
    5fbc:	f000 8095 	beq.w	60ea <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5fc0:	8a7b      	ldrh	r3, [r7, #18]
    5fc2:	f003 0302 	and.w	r3, r3, #2
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d01d      	beq.n	6006 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5fca:	68f8      	ldr	r0, [r7, #12]
    5fcc:	4b74      	ldr	r3, [pc, #464]	; (61a0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    5fce:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	885b      	ldrh	r3, [r3, #2]
    5fd4:	b29b      	uxth	r3, r3
    5fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5fda:	b29a      	uxth	r2, r3
    5fdc:	687b      	ldr	r3, [r7, #4]
    5fde:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	885b      	ldrh	r3, [r3, #2]
    5fe4:	b29b      	uxth	r3, r3
    5fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5fea:	b29a      	uxth	r2, r3
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5ff0:	8a7b      	ldrh	r3, [r7, #18]
    5ff2:	f003 0301 	and.w	r3, r3, #1
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d002      	beq.n	6000 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5ffa:	f06f 0304 	mvn.w	r3, #4
    5ffe:	e0c6      	b.n	618e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6000:	f06f 0303 	mvn.w	r3, #3
    6004:	e0c3      	b.n	618e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6006:	8a7b      	ldrh	r3, [r7, #18]
    6008:	f003 0304 	and.w	r3, r3, #4
    600c:	2b00      	cmp	r3, #0
    600e:	d01f      	beq.n	6050 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	685b      	ldr	r3, [r3, #4]
    6014:	2b00      	cmp	r3, #0
    6016:	dd07      	ble.n	6028 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	885b      	ldrh	r3, [r3, #2]
    601c:	b29b      	uxth	r3, r3
    601e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6022:	b29a      	uxth	r2, r3
    6024:	687b      	ldr	r3, [r7, #4]
    6026:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6028:	687b      	ldr	r3, [r7, #4]
    602a:	885b      	ldrh	r3, [r3, #2]
    602c:	b29b      	uxth	r3, r3
    602e:	b21b      	sxth	r3, r3
    6030:	2b00      	cmp	r3, #0
    6032:	da02      	bge.n	603a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6034:	68f8      	ldr	r0, [r7, #12]
    6036:	4b5b      	ldr	r3, [pc, #364]	; (61a4 <_sercom_i2c_sync_analyse_flags+0x210>)
    6038:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    603a:	687b      	ldr	r3, [r7, #4]
    603c:	885b      	ldrh	r3, [r3, #2]
    603e:	b29b      	uxth	r3, r3
    6040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6044:	b29a      	uxth	r2, r3
    6046:	687b      	ldr	r3, [r7, #4]
    6048:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    604a:	f06f 0301 	mvn.w	r3, #1
    604e:	e09e      	b.n	618e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	885b      	ldrh	r3, [r3, #2]
    6054:	b29b      	uxth	r3, r3
    6056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    605a:	2b00      	cmp	r3, #0
    605c:	d01c      	beq.n	6098 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	881b      	ldrh	r3, [r3, #0]
    6062:	121b      	asrs	r3, r3, #8
    6064:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6066:	f003 0406 	and.w	r4, r3, #6
    606a:	68f8      	ldr	r0, [r7, #12]
    606c:	4b4e      	ldr	r3, [pc, #312]	; (61a8 <_sercom_i2c_sync_analyse_flags+0x214>)
    606e:	4798      	blx	r3
    6070:	4603      	mov	r3, r0
    6072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6076:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6078:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    607c:	4619      	mov	r1, r3
    607e:	68f8      	ldr	r0, [r7, #12]
    6080:	4b4a      	ldr	r3, [pc, #296]	; (61ac <_sercom_i2c_sync_analyse_flags+0x218>)
    6082:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	885b      	ldrh	r3, [r3, #2]
    6088:	b29b      	uxth	r3, r3
    608a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    608e:	b29a      	uxth	r2, r3
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6094:	2300      	movs	r3, #0
    6096:	e07a      	b.n	618e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	685b      	ldr	r3, [r3, #4]
    609c:	2b00      	cmp	r3, #0
    609e:	d111      	bne.n	60c4 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	885b      	ldrh	r3, [r3, #2]
    60a4:	b29b      	uxth	r3, r3
    60a6:	b21b      	sxth	r3, r3
    60a8:	2b00      	cmp	r3, #0
    60aa:	da02      	bge.n	60b2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    60ac:	68f8      	ldr	r0, [r7, #12]
    60ae:	4b3d      	ldr	r3, [pc, #244]	; (61a4 <_sercom_i2c_sync_analyse_flags+0x210>)
    60b0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	885b      	ldrh	r3, [r3, #2]
    60b6:	b29b      	uxth	r3, r3
    60b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    60bc:	b29a      	uxth	r2, r3
    60be:	687b      	ldr	r3, [r7, #4]
    60c0:	805a      	strh	r2, [r3, #2]
    60c2:	e010      	b.n	60e6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	689b      	ldr	r3, [r3, #8]
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	4619      	mov	r1, r3
    60cc:	68f8      	ldr	r0, [r7, #12]
    60ce:	4b38      	ldr	r3, [pc, #224]	; (61b0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    60d0:	4798      	blx	r3
				msg->buffer++;
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	689b      	ldr	r3, [r3, #8]
    60d6:	1c5a      	adds	r2, r3, #1
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	609a      	str	r2, [r3, #8]
				msg->len--;
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	685b      	ldr	r3, [r3, #4]
    60e0:	1e5a      	subs	r2, r3, #1
    60e2:	687b      	ldr	r3, [r7, #4]
    60e4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    60e6:	2300      	movs	r3, #0
    60e8:	e051      	b.n	618e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    60ea:	68bb      	ldr	r3, [r7, #8]
    60ec:	f003 0302 	and.w	r3, r3, #2
    60f0:	2b00      	cmp	r3, #0
    60f2:	d04b      	beq.n	618c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	685b      	ldr	r3, [r3, #4]
    60f8:	2b00      	cmp	r3, #0
    60fa:	d041      	beq.n	6180 <_sercom_i2c_sync_analyse_flags+0x1ec>
    60fc:	8a7b      	ldrh	r3, [r7, #18]
    60fe:	f003 0304 	and.w	r3, r3, #4
    6102:	2b00      	cmp	r3, #0
    6104:	d13c      	bne.n	6180 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	685b      	ldr	r3, [r3, #4]
    610a:	1e5a      	subs	r2, r3, #1
    610c:	687b      	ldr	r3, [r7, #4]
    610e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	685b      	ldr	r3, [r3, #4]
    6114:	2b00      	cmp	r3, #0
    6116:	d102      	bne.n	611e <_sercom_i2c_sync_analyse_flags+0x18a>
    6118:	697b      	ldr	r3, [r7, #20]
    611a:	2b00      	cmp	r3, #0
    611c:	d006      	beq.n	612c <_sercom_i2c_sync_analyse_flags+0x198>
    611e:	687b      	ldr	r3, [r7, #4]
    6120:	685b      	ldr	r3, [r3, #4]
    6122:	2b01      	cmp	r3, #1
    6124:	d105      	bne.n	6132 <_sercom_i2c_sync_analyse_flags+0x19e>
    6126:	697b      	ldr	r3, [r7, #20]
    6128:	2b00      	cmp	r3, #0
    612a:	d002      	beq.n	6132 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    612c:	68f8      	ldr	r0, [r7, #12]
    612e:	4b21      	ldr	r3, [pc, #132]	; (61b4 <_sercom_i2c_sync_analyse_flags+0x220>)
    6130:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6132:	687b      	ldr	r3, [r7, #4]
    6134:	685b      	ldr	r3, [r3, #4]
    6136:	2b00      	cmp	r3, #0
    6138:	d113      	bne.n	6162 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    613a:	687b      	ldr	r3, [r7, #4]
    613c:	885b      	ldrh	r3, [r3, #2]
    613e:	b29b      	uxth	r3, r3
    6140:	b21b      	sxth	r3, r3
    6142:	2b00      	cmp	r3, #0
    6144:	da05      	bge.n	6152 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6146:	68f8      	ldr	r0, [r7, #12]
    6148:	4b1b      	ldr	r3, [pc, #108]	; (61b8 <_sercom_i2c_sync_analyse_flags+0x224>)
    614a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    614c:	68f8      	ldr	r0, [r7, #12]
    614e:	4b15      	ldr	r3, [pc, #84]	; (61a4 <_sercom_i2c_sync_analyse_flags+0x210>)
    6150:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6152:	687b      	ldr	r3, [r7, #4]
    6154:	885b      	ldrh	r3, [r3, #2]
    6156:	b29b      	uxth	r3, r3
    6158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    615c:	b29a      	uxth	r2, r3
    615e:	687b      	ldr	r3, [r7, #4]
    6160:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6162:	687b      	ldr	r3, [r7, #4]
    6164:	689c      	ldr	r4, [r3, #8]
    6166:	1c62      	adds	r2, r4, #1
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	609a      	str	r2, [r3, #8]
    616c:	68f8      	ldr	r0, [r7, #12]
    616e:	4b13      	ldr	r3, [pc, #76]	; (61bc <_sercom_i2c_sync_analyse_flags+0x228>)
    6170:	4798      	blx	r3
    6172:	4603      	mov	r3, r0
    6174:	b2db      	uxtb	r3, r3
    6176:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6178:	68f8      	ldr	r0, [r7, #12]
    617a:	4b11      	ldr	r3, [pc, #68]	; (61c0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    617c:	4798      	blx	r3
    617e:	e005      	b.n	618c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6180:	68f8      	ldr	r0, [r7, #12]
    6182:	4b0f      	ldr	r3, [pc, #60]	; (61c0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6184:	4798      	blx	r3
			return I2C_NACK;
    6186:	f06f 0301 	mvn.w	r3, #1
    618a:	e000      	b.n	618e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    618c:	2300      	movs	r3, #0
}
    618e:	4618      	mov	r0, r3
    6190:	371c      	adds	r7, #28
    6192:	46bd      	mov	sp, r7
    6194:	bd90      	pop	{r4, r7, pc}
    6196:	bf00      	nop
    6198:	00005a59 	.word	0x00005a59
    619c:	00005e69 	.word	0x00005e69
    61a0:	00005959 	.word	0x00005959
    61a4:	00005f79 	.word	0x00005f79
    61a8:	00005d49 	.word	0x00005d49
    61ac:	00005d25 	.word	0x00005d25
    61b0:	00005d85 	.word	0x00005d85
    61b4:	00005be1 	.word	0x00005be1
    61b8:	00005bb9 	.word	0x00005bb9
    61bc:	00005da9 	.word	0x00005da9
    61c0:	00005973 	.word	0x00005973

000061c4 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    61c4:	b580      	push	{r7, lr}
    61c6:	b082      	sub	sp, #8
    61c8:	af00      	add	r7, sp, #0
    61ca:	6078      	str	r0, [r7, #4]
    61cc:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    61ce:	687b      	ldr	r3, [r7, #4]
    61d0:	2b00      	cmp	r3, #0
    61d2:	bf14      	ite	ne
    61d4:	2301      	movne	r3, #1
    61d6:	2300      	moveq	r3, #0
    61d8:	b2db      	uxtb	r3, r3
    61da:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    61de:	4908      	ldr	r1, [pc, #32]	; (6200 <_i2c_m_sync_init+0x3c>)
    61e0:	4618      	mov	r0, r3
    61e2:	4b08      	ldr	r3, [pc, #32]	; (6204 <_i2c_m_sync_init+0x40>)
    61e4:	4798      	blx	r3

	i2c_dev->hw = hw;
    61e6:	687b      	ldr	r3, [r7, #4]
    61e8:	683a      	ldr	r2, [r7, #0]
    61ea:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    61ec:	687b      	ldr	r3, [r7, #4]
    61ee:	6839      	ldr	r1, [r7, #0]
    61f0:	4618      	mov	r0, r3
    61f2:	4b05      	ldr	r3, [pc, #20]	; (6208 <_i2c_m_sync_init+0x44>)
    61f4:	4798      	blx	r3
    61f6:	4603      	mov	r3, r0
}
    61f8:	4618      	mov	r0, r3
    61fa:	3708      	adds	r7, #8
    61fc:	46bd      	mov	sp, r7
    61fe:	bd80      	pop	{r7, pc}
    6200:	0000eef0 	.word	0x0000eef0
    6204:	000033ad 	.word	0x000033ad
    6208:	00006581 	.word	0x00006581

0000620c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    620c:	b580      	push	{r7, lr}
    620e:	b082      	sub	sp, #8
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	2b00      	cmp	r3, #0
    6218:	bf14      	ite	ne
    621a:	2301      	movne	r3, #1
    621c:	2300      	moveq	r3, #0
    621e:	b2db      	uxtb	r3, r3
    6220:	f240 5235 	movw	r2, #1333	; 0x535
    6224:	4906      	ldr	r1, [pc, #24]	; (6240 <_i2c_m_sync_enable+0x34>)
    6226:	4618      	mov	r0, r3
    6228:	4b06      	ldr	r3, [pc, #24]	; (6244 <_i2c_m_sync_enable+0x38>)
    622a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    622c:	687b      	ldr	r3, [r7, #4]
    622e:	691b      	ldr	r3, [r3, #16]
    6230:	4618      	mov	r0, r3
    6232:	4b05      	ldr	r3, [pc, #20]	; (6248 <_i2c_m_sync_enable+0x3c>)
    6234:	4798      	blx	r3
    6236:	4603      	mov	r3, r0
}
    6238:	4618      	mov	r0, r3
    623a:	3708      	adds	r7, #8
    623c:	46bd      	mov	sp, r7
    623e:	bd80      	pop	{r7, pc}
    6240:	0000eef0 	.word	0x0000eef0
    6244:	000033ad 	.word	0x000033ad
    6248:	000064f5 	.word	0x000064f5

0000624c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    624c:	b580      	push	{r7, lr}
    624e:	b084      	sub	sp, #16
    6250:	af00      	add	r7, sp, #0
    6252:	6078      	str	r0, [r7, #4]
    6254:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6256:	f64f 73ff 	movw	r3, #65535	; 0xffff
    625a:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	691b      	ldr	r3, [r3, #16]
    6260:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6262:	68b8      	ldr	r0, [r7, #8]
    6264:	4b0f      	ldr	r3, [pc, #60]	; (62a4 <_sercom_i2c_sync_wait_bus+0x58>)
    6266:	4798      	blx	r3
    6268:	4603      	mov	r3, r0
    626a:	461a      	mov	r2, r3
    626c:	683b      	ldr	r3, [r7, #0]
    626e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6270:	68fb      	ldr	r3, [r7, #12]
    6272:	1e5a      	subs	r2, r3, #1
    6274:	60fa      	str	r2, [r7, #12]
    6276:	2b00      	cmp	r3, #0
    6278:	d102      	bne.n	6280 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    627a:	f06f 0304 	mvn.w	r3, #4
    627e:	e00c      	b.n	629a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6280:	683b      	ldr	r3, [r7, #0]
    6282:	681b      	ldr	r3, [r3, #0]
    6284:	f003 0301 	and.w	r3, r3, #1
    6288:	2b00      	cmp	r3, #0
    628a:	d105      	bne.n	6298 <_sercom_i2c_sync_wait_bus+0x4c>
    628c:	683b      	ldr	r3, [r7, #0]
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	f003 0302 	and.w	r3, r3, #2
    6294:	2b00      	cmp	r3, #0
    6296:	d0e4      	beq.n	6262 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6298:	2300      	movs	r3, #0
}
    629a:	4618      	mov	r0, r3
    629c:	3710      	adds	r7, #16
    629e:	46bd      	mov	sp, r7
    62a0:	bd80      	pop	{r7, pc}
    62a2:	bf00      	nop
    62a4:	0000598d 	.word	0x0000598d

000062a8 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    62a8:	b590      	push	{r4, r7, lr}
    62aa:	b087      	sub	sp, #28
    62ac:	af00      	add	r7, sp, #0
    62ae:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	691b      	ldr	r3, [r3, #16]
    62b4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    62b6:	687b      	ldr	r3, [r7, #4]
    62b8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    62ba:	6978      	ldr	r0, [r7, #20]
    62bc:	4b39      	ldr	r3, [pc, #228]	; (63a4 <_sercom_i2c_sync_send_address+0xfc>)
    62be:	4798      	blx	r3
    62c0:	4603      	mov	r3, r0
    62c2:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	2b00      	cmp	r3, #0
    62c8:	bf14      	ite	ne
    62ca:	2301      	movne	r3, #1
    62cc:	2300      	moveq	r3, #0
    62ce:	b2db      	uxtb	r3, r3
    62d0:	f240 52a5 	movw	r2, #1445	; 0x5a5
    62d4:	4934      	ldr	r1, [pc, #208]	; (63a8 <_sercom_i2c_sync_send_address+0x100>)
    62d6:	4618      	mov	r0, r3
    62d8:	4b34      	ldr	r3, [pc, #208]	; (63ac <_sercom_i2c_sync_send_address+0x104>)
    62da:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    62dc:	693b      	ldr	r3, [r7, #16]
    62de:	685b      	ldr	r3, [r3, #4]
    62e0:	2b01      	cmp	r3, #1
    62e2:	d106      	bne.n	62f2 <_sercom_i2c_sync_send_address+0x4a>
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	2b00      	cmp	r3, #0
    62e8:	d003      	beq.n	62f2 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    62ea:	6978      	ldr	r0, [r7, #20]
    62ec:	4b30      	ldr	r3, [pc, #192]	; (63b0 <_sercom_i2c_sync_send_address+0x108>)
    62ee:	4798      	blx	r3
    62f0:	e002      	b.n	62f8 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    62f2:	6978      	ldr	r0, [r7, #20]
    62f4:	4b2f      	ldr	r3, [pc, #188]	; (63b4 <_sercom_i2c_sync_send_address+0x10c>)
    62f6:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    62f8:	693b      	ldr	r3, [r7, #16]
    62fa:	881b      	ldrh	r3, [r3, #0]
    62fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6300:	2b00      	cmp	r3, #0
    6302:	d022      	beq.n	634a <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6304:	693b      	ldr	r3, [r7, #16]
    6306:	885b      	ldrh	r3, [r3, #2]
    6308:	b29b      	uxth	r3, r3
    630a:	f003 0301 	and.w	r3, r3, #1
    630e:	2b00      	cmp	r3, #0
    6310:	d007      	beq.n	6322 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6312:	693b      	ldr	r3, [r7, #16]
    6314:	885b      	ldrh	r3, [r3, #2]
    6316:	b29b      	uxth	r3, r3
    6318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    631c:	b29a      	uxth	r2, r3
    631e:	693b      	ldr	r3, [r7, #16]
    6320:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6322:	693b      	ldr	r3, [r7, #16]
    6324:	881b      	ldrh	r3, [r3, #0]
    6326:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6328:	f240 74fe 	movw	r4, #2046	; 0x7fe
    632c:	401c      	ands	r4, r3
    632e:	6978      	ldr	r0, [r7, #20]
    6330:	4b21      	ldr	r3, [pc, #132]	; (63b8 <_sercom_i2c_sync_send_address+0x110>)
    6332:	4798      	blx	r3
    6334:	4603      	mov	r3, r0
    6336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    633a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    633c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6340:	4619      	mov	r1, r3
    6342:	6978      	ldr	r0, [r7, #20]
    6344:	4b1d      	ldr	r3, [pc, #116]	; (63bc <_sercom_i2c_sync_send_address+0x114>)
    6346:	4798      	blx	r3
    6348:	e01a      	b.n	6380 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    634a:	693b      	ldr	r3, [r7, #16]
    634c:	881b      	ldrh	r3, [r3, #0]
    634e:	005b      	lsls	r3, r3, #1
    6350:	b2db      	uxtb	r3, r3
    6352:	693a      	ldr	r2, [r7, #16]
    6354:	8852      	ldrh	r2, [r2, #2]
    6356:	b292      	uxth	r2, r2
    6358:	f002 0201 	and.w	r2, r2, #1
    635c:	2a00      	cmp	r2, #0
    635e:	bf14      	ite	ne
    6360:	2201      	movne	r2, #1
    6362:	2200      	moveq	r2, #0
    6364:	b2d2      	uxtb	r2, r2
    6366:	4313      	orrs	r3, r2
    6368:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    636a:	6978      	ldr	r0, [r7, #20]
    636c:	4b12      	ldr	r3, [pc, #72]	; (63b8 <_sercom_i2c_sync_send_address+0x110>)
    636e:	4798      	blx	r3
    6370:	4603      	mov	r3, r0
    6372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6376:	4323      	orrs	r3, r4
    6378:	4619      	mov	r1, r3
    637a:	6978      	ldr	r0, [r7, #20]
    637c:	4b0f      	ldr	r3, [pc, #60]	; (63bc <_sercom_i2c_sync_send_address+0x114>)
    637e:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6380:	f107 0308 	add.w	r3, r7, #8
    6384:	4619      	mov	r1, r3
    6386:	6878      	ldr	r0, [r7, #4]
    6388:	4b0d      	ldr	r3, [pc, #52]	; (63c0 <_sercom_i2c_sync_send_address+0x118>)
    638a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    638c:	68bb      	ldr	r3, [r7, #8]
    638e:	693a      	ldr	r2, [r7, #16]
    6390:	4619      	mov	r1, r3
    6392:	6978      	ldr	r0, [r7, #20]
    6394:	4b0b      	ldr	r3, [pc, #44]	; (63c4 <_sercom_i2c_sync_send_address+0x11c>)
    6396:	4798      	blx	r3
    6398:	4603      	mov	r3, r0
}
    639a:	4618      	mov	r0, r3
    639c:	371c      	adds	r7, #28
    639e:	46bd      	mov	sp, r7
    63a0:	bd90      	pop	{r4, r7, pc}
    63a2:	bf00      	nop
    63a4:	00005a59 	.word	0x00005a59
    63a8:	0000eef0 	.word	0x0000eef0
    63ac:	000033ad 	.word	0x000033ad
    63b0:	00005be1 	.word	0x00005be1
    63b4:	00005c09 	.word	0x00005c09
    63b8:	00005d49 	.word	0x00005d49
    63bc:	00005d25 	.word	0x00005d25
    63c0:	0000624d 	.word	0x0000624d
    63c4:	00005f95 	.word	0x00005f95

000063c8 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    63c8:	b580      	push	{r7, lr}
    63ca:	b086      	sub	sp, #24
    63cc:	af00      	add	r7, sp, #0
    63ce:	6078      	str	r0, [r7, #4]
    63d0:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    63d2:	687b      	ldr	r3, [r7, #4]
    63d4:	691b      	ldr	r3, [r3, #16]
    63d6:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	2b00      	cmp	r3, #0
    63dc:	bf14      	ite	ne
    63de:	2301      	movne	r3, #1
    63e0:	2300      	moveq	r3, #0
    63e2:	b2db      	uxtb	r3, r3
    63e4:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    63e8:	493b      	ldr	r1, [pc, #236]	; (64d8 <_i2c_m_sync_transfer+0x110>)
    63ea:	4618      	mov	r0, r3
    63ec:	4b3b      	ldr	r3, [pc, #236]	; (64dc <_i2c_m_sync_transfer+0x114>)
    63ee:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	691b      	ldr	r3, [r3, #16]
    63f4:	2b00      	cmp	r3, #0
    63f6:	bf14      	ite	ne
    63f8:	2301      	movne	r3, #1
    63fa:	2300      	moveq	r3, #0
    63fc:	b2db      	uxtb	r3, r3
    63fe:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6402:	4935      	ldr	r1, [pc, #212]	; (64d8 <_i2c_m_sync_transfer+0x110>)
    6404:	4618      	mov	r0, r3
    6406:	4b35      	ldr	r3, [pc, #212]	; (64dc <_i2c_m_sync_transfer+0x114>)
    6408:	4798      	blx	r3
	ASSERT(msg);
    640a:	683b      	ldr	r3, [r7, #0]
    640c:	2b00      	cmp	r3, #0
    640e:	bf14      	ite	ne
    6410:	2301      	movne	r3, #1
    6412:	2300      	moveq	r3, #0
    6414:	b2db      	uxtb	r3, r3
    6416:	f240 52d2 	movw	r2, #1490	; 0x5d2
    641a:	492f      	ldr	r1, [pc, #188]	; (64d8 <_i2c_m_sync_transfer+0x110>)
    641c:	4618      	mov	r0, r3
    641e:	4b2f      	ldr	r3, [pc, #188]	; (64dc <_i2c_m_sync_transfer+0x114>)
    6420:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6422:	687b      	ldr	r3, [r7, #4]
    6424:	885b      	ldrh	r3, [r3, #2]
    6426:	b29b      	uxth	r3, r3
    6428:	f403 7380 	and.w	r3, r3, #256	; 0x100
    642c:	2b00      	cmp	r3, #0
    642e:	d002      	beq.n	6436 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6430:	f06f 0305 	mvn.w	r3, #5
    6434:	e04c      	b.n	64d0 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6436:	683b      	ldr	r3, [r7, #0]
    6438:	885b      	ldrh	r3, [r3, #2]
    643a:	b29b      	uxth	r3, r3
    643c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6440:	b29a      	uxth	r2, r3
    6442:	683b      	ldr	r3, [r7, #0]
    6444:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6446:	687b      	ldr	r3, [r7, #4]
    6448:	683a      	ldr	r2, [r7, #0]
    644a:	ca07      	ldmia	r2, {r0, r1, r2}
    644c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6450:	6938      	ldr	r0, [r7, #16]
    6452:	4b23      	ldr	r3, [pc, #140]	; (64e0 <_i2c_m_sync_transfer+0x118>)
    6454:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6456:	6878      	ldr	r0, [r7, #4]
    6458:	4b22      	ldr	r3, [pc, #136]	; (64e4 <_i2c_m_sync_transfer+0x11c>)
    645a:	4798      	blx	r3
    645c:	6178      	str	r0, [r7, #20]

	if (ret) {
    645e:	697b      	ldr	r3, [r7, #20]
    6460:	2b00      	cmp	r3, #0
    6462:	d02d      	beq.n	64c0 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6464:	687b      	ldr	r3, [r7, #4]
    6466:	885b      	ldrh	r3, [r3, #2]
    6468:	b29b      	uxth	r3, r3
    646a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    646e:	b29a      	uxth	r2, r3
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	805a      	strh	r2, [r3, #2]

		return ret;
    6474:	697b      	ldr	r3, [r7, #20]
    6476:	e02b      	b.n	64d0 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6478:	f107 030c 	add.w	r3, r7, #12
    647c:	4619      	mov	r1, r3
    647e:	6878      	ldr	r0, [r7, #4]
    6480:	4b19      	ldr	r3, [pc, #100]	; (64e8 <_i2c_m_sync_transfer+0x120>)
    6482:	4798      	blx	r3
    6484:	6178      	str	r0, [r7, #20]

		if (ret) {
    6486:	697b      	ldr	r3, [r7, #20]
    6488:	2b00      	cmp	r3, #0
    648a:	d012      	beq.n	64b2 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    648c:	683b      	ldr	r3, [r7, #0]
    648e:	885b      	ldrh	r3, [r3, #2]
    6490:	b29b      	uxth	r3, r3
    6492:	b21b      	sxth	r3, r3
    6494:	2b00      	cmp	r3, #0
    6496:	da02      	bge.n	649e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6498:	6938      	ldr	r0, [r7, #16]
    649a:	4b14      	ldr	r3, [pc, #80]	; (64ec <_i2c_m_sync_transfer+0x124>)
    649c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	885b      	ldrh	r3, [r3, #2]
    64a2:	b29b      	uxth	r3, r3
    64a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    64a8:	b29a      	uxth	r2, r3
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	805a      	strh	r2, [r3, #2]

			return ret;
    64ae:	697b      	ldr	r3, [r7, #20]
    64b0:	e00e      	b.n	64d0 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	687a      	ldr	r2, [r7, #4]
    64b6:	4619      	mov	r1, r3
    64b8:	6938      	ldr	r0, [r7, #16]
    64ba:	4b0d      	ldr	r3, [pc, #52]	; (64f0 <_i2c_m_sync_transfer+0x128>)
    64bc:	4798      	blx	r3
    64be:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    64c0:	687b      	ldr	r3, [r7, #4]
    64c2:	885b      	ldrh	r3, [r3, #2]
    64c4:	b29b      	uxth	r3, r3
    64c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    64ca:	2b00      	cmp	r3, #0
    64cc:	d1d4      	bne.n	6478 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    64ce:	697b      	ldr	r3, [r7, #20]
}
    64d0:	4618      	mov	r0, r3
    64d2:	3718      	adds	r7, #24
    64d4:	46bd      	mov	sp, r7
    64d6:	bd80      	pop	{r7, pc}
    64d8:	0000eef0 	.word	0x0000eef0
    64dc:	000033ad 	.word	0x000033ad
    64e0:	00005b91 	.word	0x00005b91
    64e4:	000062a9 	.word	0x000062a9
    64e8:	0000624d 	.word	0x0000624d
    64ec:	00005f79 	.word	0x00005f79
    64f0:	00005f95 	.word	0x00005f95

000064f4 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b084      	sub	sp, #16
    64f8:	af00      	add	r7, sp, #0
    64fa:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    64fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6500:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6502:	2304      	movs	r3, #4
    6504:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	2b00      	cmp	r3, #0
    650a:	bf14      	ite	ne
    650c:	2301      	movne	r3, #1
    650e:	2300      	moveq	r3, #0
    6510:	b2db      	uxtb	r3, r3
    6512:	f240 6205 	movw	r2, #1541	; 0x605
    6516:	4915      	ldr	r1, [pc, #84]	; (656c <_i2c_m_enable_implementation+0x78>)
    6518:	4618      	mov	r0, r3
    651a:	4b15      	ldr	r3, [pc, #84]	; (6570 <_i2c_m_enable_implementation+0x7c>)
    651c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    651e:	6878      	ldr	r0, [r7, #4]
    6520:	4b14      	ldr	r3, [pc, #80]	; (6574 <_i2c_m_enable_implementation+0x80>)
    6522:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6524:	e016      	b.n	6554 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6526:	68fb      	ldr	r3, [r7, #12]
    6528:	3b01      	subs	r3, #1
    652a:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    652c:	68fb      	ldr	r3, [r7, #12]
    652e:	2b00      	cmp	r3, #0
    6530:	dc10      	bgt.n	6554 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6532:	68bb      	ldr	r3, [r7, #8]
    6534:	3b01      	subs	r3, #1
    6536:	60bb      	str	r3, [r7, #8]
    6538:	68bb      	ldr	r3, [r7, #8]
    653a:	2b00      	cmp	r3, #0
    653c:	d007      	beq.n	654e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    653e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6542:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6544:	2110      	movs	r1, #16
    6546:	6878      	ldr	r0, [r7, #4]
    6548:	4b0b      	ldr	r3, [pc, #44]	; (6578 <_i2c_m_enable_implementation+0x84>)
    654a:	4798      	blx	r3
    654c:	e002      	b.n	6554 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    654e:	f06f 0305 	mvn.w	r3, #5
    6552:	e006      	b.n	6562 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6554:	6878      	ldr	r0, [r7, #4]
    6556:	4b09      	ldr	r3, [pc, #36]	; (657c <_i2c_m_enable_implementation+0x88>)
    6558:	4798      	blx	r3
    655a:	4603      	mov	r3, r0
    655c:	2b01      	cmp	r3, #1
    655e:	d1e2      	bne.n	6526 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6560:	2300      	movs	r3, #0
}
    6562:	4618      	mov	r0, r3
    6564:	3710      	adds	r7, #16
    6566:	46bd      	mov	sp, r7
    6568:	bd80      	pop	{r7, pc}
    656a:	bf00      	nop
    656c:	0000eef0 	.word	0x0000eef0
    6570:	000033ad 	.word	0x000033ad
    6574:	00005a09 	.word	0x00005a09
    6578:	00005e8d 	.word	0x00005e8d
    657c:	00005e3d 	.word	0x00005e3d

00006580 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6580:	b580      	push	{r7, lr}
    6582:	b084      	sub	sp, #16
    6584:	af00      	add	r7, sp, #0
    6586:	6078      	str	r0, [r7, #4]
    6588:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    658a:	6838      	ldr	r0, [r7, #0]
    658c:	4b42      	ldr	r3, [pc, #264]	; (6698 <_i2c_m_sync_init_impl+0x118>)
    658e:	4798      	blx	r3
    6590:	4603      	mov	r3, r0
    6592:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6594:	2101      	movs	r1, #1
    6596:	6838      	ldr	r0, [r7, #0]
    6598:	4b40      	ldr	r3, [pc, #256]	; (669c <_i2c_m_sync_init_impl+0x11c>)
    659a:	4798      	blx	r3
    659c:	4603      	mov	r3, r0
    659e:	f083 0301 	eor.w	r3, r3, #1
    65a2:	b2db      	uxtb	r3, r3
    65a4:	2b00      	cmp	r3, #0
    65a6:	d020      	beq.n	65ea <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    65a8:	7bfa      	ldrb	r2, [r7, #15]
    65aa:	493d      	ldr	r1, [pc, #244]	; (66a0 <_i2c_m_sync_init_impl+0x120>)
    65ac:	4613      	mov	r3, r2
    65ae:	005b      	lsls	r3, r3, #1
    65b0:	4413      	add	r3, r2
    65b2:	00db      	lsls	r3, r3, #3
    65b4:	440b      	add	r3, r1
    65b6:	3304      	adds	r3, #4
    65b8:	681b      	ldr	r3, [r3, #0]
    65ba:	f003 031c 	and.w	r3, r3, #28
    65be:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    65c0:	2102      	movs	r1, #2
    65c2:	6838      	ldr	r0, [r7, #0]
    65c4:	4b37      	ldr	r3, [pc, #220]	; (66a4 <_i2c_m_sync_init_impl+0x124>)
    65c6:	4798      	blx	r3
    65c8:	4603      	mov	r3, r0
    65ca:	2b00      	cmp	r3, #0
    65cc:	d006      	beq.n	65dc <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    65ce:	6838      	ldr	r0, [r7, #0]
    65d0:	4b35      	ldr	r3, [pc, #212]	; (66a8 <_i2c_m_sync_init_impl+0x128>)
    65d2:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    65d4:	2102      	movs	r1, #2
    65d6:	6838      	ldr	r0, [r7, #0]
    65d8:	4b34      	ldr	r3, [pc, #208]	; (66ac <_i2c_m_sync_init_impl+0x12c>)
    65da:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    65dc:	68bb      	ldr	r3, [r7, #8]
    65de:	f043 0301 	orr.w	r3, r3, #1
    65e2:	4619      	mov	r1, r3
    65e4:	6838      	ldr	r0, [r7, #0]
    65e6:	4b32      	ldr	r3, [pc, #200]	; (66b0 <_i2c_m_sync_init_impl+0x130>)
    65e8:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    65ea:	2101      	movs	r1, #1
    65ec:	6838      	ldr	r0, [r7, #0]
    65ee:	4b2f      	ldr	r3, [pc, #188]	; (66ac <_i2c_m_sync_init_impl+0x12c>)
    65f0:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    65f2:	7bfa      	ldrb	r2, [r7, #15]
    65f4:	492a      	ldr	r1, [pc, #168]	; (66a0 <_i2c_m_sync_init_impl+0x120>)
    65f6:	4613      	mov	r3, r2
    65f8:	005b      	lsls	r3, r3, #1
    65fa:	4413      	add	r3, r2
    65fc:	00db      	lsls	r3, r3, #3
    65fe:	440b      	add	r3, r1
    6600:	3304      	adds	r3, #4
    6602:	681b      	ldr	r3, [r3, #0]
    6604:	4619      	mov	r1, r3
    6606:	6838      	ldr	r0, [r7, #0]
    6608:	4b29      	ldr	r3, [pc, #164]	; (66b0 <_i2c_m_sync_init_impl+0x130>)
    660a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    660c:	7bfa      	ldrb	r2, [r7, #15]
    660e:	4924      	ldr	r1, [pc, #144]	; (66a0 <_i2c_m_sync_init_impl+0x120>)
    6610:	4613      	mov	r3, r2
    6612:	005b      	lsls	r3, r3, #1
    6614:	4413      	add	r3, r2
    6616:	00db      	lsls	r3, r3, #3
    6618:	440b      	add	r3, r1
    661a:	3308      	adds	r3, #8
    661c:	681b      	ldr	r3, [r3, #0]
    661e:	4619      	mov	r1, r3
    6620:	6838      	ldr	r0, [r7, #0]
    6622:	4b24      	ldr	r3, [pc, #144]	; (66b4 <_i2c_m_sync_init_impl+0x134>)
    6624:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6626:	7bfa      	ldrb	r2, [r7, #15]
    6628:	491d      	ldr	r1, [pc, #116]	; (66a0 <_i2c_m_sync_init_impl+0x120>)
    662a:	4613      	mov	r3, r2
    662c:	005b      	lsls	r3, r3, #1
    662e:	4413      	add	r3, r2
    6630:	00db      	lsls	r3, r3, #3
    6632:	440b      	add	r3, r1
    6634:	330c      	adds	r3, #12
    6636:	681b      	ldr	r3, [r3, #0]
    6638:	4619      	mov	r1, r3
    663a:	6838      	ldr	r0, [r7, #0]
    663c:	4b1e      	ldr	r3, [pc, #120]	; (66b8 <_i2c_m_sync_init_impl+0x138>)
    663e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6640:	7bfa      	ldrb	r2, [r7, #15]
    6642:	4917      	ldr	r1, [pc, #92]	; (66a0 <_i2c_m_sync_init_impl+0x120>)
    6644:	4613      	mov	r3, r2
    6646:	005b      	lsls	r3, r3, #1
    6648:	4413      	add	r3, r2
    664a:	00db      	lsls	r3, r3, #3
    664c:	440b      	add	r3, r1
    664e:	3304      	adds	r3, #4
    6650:	681b      	ldr	r3, [r3, #0]
    6652:	0e1b      	lsrs	r3, r3, #24
    6654:	b29b      	uxth	r3, r3
    6656:	f003 0303 	and.w	r3, r3, #3
    665a:	b29a      	uxth	r2, r3
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	899b      	ldrh	r3, [r3, #12]
    6664:	2b01      	cmp	r3, #1
    6666:	bf8c      	ite	hi
    6668:	2301      	movhi	r3, #1
    666a:	2300      	movls	r3, #0
    666c:	b2db      	uxtb	r3, r3
    666e:	4619      	mov	r1, r3
    6670:	6838      	ldr	r0, [r7, #0]
    6672:	4b12      	ldr	r3, [pc, #72]	; (66bc <_i2c_m_sync_init_impl+0x13c>)
    6674:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6676:	7bfa      	ldrb	r2, [r7, #15]
    6678:	4909      	ldr	r1, [pc, #36]	; (66a0 <_i2c_m_sync_init_impl+0x120>)
    667a:	4613      	mov	r3, r2
    667c:	005b      	lsls	r3, r3, #1
    667e:	4413      	add	r3, r2
    6680:	00db      	lsls	r3, r3, #3
    6682:	440b      	add	r3, r1
    6684:	3312      	adds	r3, #18
    6686:	881a      	ldrh	r2, [r3, #0]
    6688:	687b      	ldr	r3, [r7, #4]
    668a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    668c:	2300      	movs	r3, #0
}
    668e:	4618      	mov	r0, r3
    6690:	3710      	adds	r7, #16
    6692:	46bd      	mov	sp, r7
    6694:	bd80      	pop	{r7, pc}
    6696:	bf00      	nop
    6698:	00005f11 	.word	0x00005f11
    669c:	000058e5 	.word	0x000058e5
    66a0:	20000018 	.word	0x20000018
    66a4:	00005a89 	.word	0x00005a89
    66a8:	00005a31 	.word	0x00005a31
    66ac:	000058c1 	.word	0x000058c1
    66b0:	00005ab9 	.word	0x00005ab9
    66b4:	00005c61 	.word	0x00005c61
    66b8:	00005ca9 	.word	0x00005ca9
    66bc:	00005ce5 	.word	0x00005ce5

000066c0 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    66c0:	b580      	push	{r7, lr}
    66c2:	b082      	sub	sp, #8
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
    66c8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	2b00      	cmp	r3, #0
    66ce:	d004      	beq.n	66da <_spi_load_regs_master+0x1a>
    66d0:	683b      	ldr	r3, [r7, #0]
    66d2:	2b00      	cmp	r3, #0
    66d4:	d001      	beq.n	66da <_spi_load_regs_master+0x1a>
    66d6:	2301      	movs	r3, #1
    66d8:	e000      	b.n	66dc <_spi_load_regs_master+0x1c>
    66da:	2300      	movs	r3, #0
    66dc:	f003 0301 	and.w	r3, r3, #1
    66e0:	b2db      	uxtb	r3, r3
    66e2:	f640 1209 	movw	r2, #2313	; 0x909
    66e6:	4915      	ldr	r1, [pc, #84]	; (673c <_spi_load_regs_master+0x7c>)
    66e8:	4618      	mov	r0, r3
    66ea:	4b15      	ldr	r3, [pc, #84]	; (6740 <_spi_load_regs_master+0x80>)
    66ec:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    66ee:	683b      	ldr	r3, [r7, #0]
    66f0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    66f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    66f6:	f023 0301 	bic.w	r3, r3, #1
    66fa:	4619      	mov	r1, r3
    66fc:	6878      	ldr	r0, [r7, #4]
    66fe:	4b11      	ldr	r3, [pc, #68]	; (6744 <_spi_load_regs_master+0x84>)
    6700:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6702:	683b      	ldr	r3, [r7, #0]
    6704:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6706:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    670a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    670e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6712:	4619      	mov	r1, r3
    6714:	6878      	ldr	r0, [r7, #4]
    6716:	4b0c      	ldr	r3, [pc, #48]	; (6748 <_spi_load_regs_master+0x88>)
    6718:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    671a:	683b      	ldr	r3, [r7, #0]
    671c:	7b1b      	ldrb	r3, [r3, #12]
    671e:	4619      	mov	r1, r3
    6720:	6878      	ldr	r0, [r7, #4]
    6722:	4b0a      	ldr	r3, [pc, #40]	; (674c <_spi_load_regs_master+0x8c>)
    6724:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6726:	683b      	ldr	r3, [r7, #0]
    6728:	7b5b      	ldrb	r3, [r3, #13]
    672a:	4619      	mov	r1, r3
    672c:	6878      	ldr	r0, [r7, #4]
    672e:	4b08      	ldr	r3, [pc, #32]	; (6750 <_spi_load_regs_master+0x90>)
    6730:	4798      	blx	r3
}
    6732:	bf00      	nop
    6734:	3708      	adds	r7, #8
    6736:	46bd      	mov	sp, r7
    6738:	bd80      	pop	{r7, pc}
    673a:	bf00      	nop
    673c:	0000eef0 	.word	0x0000eef0
    6740:	000033ad 	.word	0x000033ad
    6744:	00005b6d 	.word	0x00005b6d
    6748:	00005c85 	.word	0x00005c85
    674c:	00005cc5 	.word	0x00005cc5
    6750:	00005dfd 	.word	0x00005dfd

00006754 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6754:	b580      	push	{r7, lr}
    6756:	b082      	sub	sp, #8
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
    675c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    675e:	687b      	ldr	r3, [r7, #4]
    6760:	2b00      	cmp	r3, #0
    6762:	d004      	beq.n	676e <_spi_load_regs_slave+0x1a>
    6764:	683b      	ldr	r3, [r7, #0]
    6766:	2b00      	cmp	r3, #0
    6768:	d001      	beq.n	676e <_spi_load_regs_slave+0x1a>
    676a:	2301      	movs	r3, #1
    676c:	e000      	b.n	6770 <_spi_load_regs_slave+0x1c>
    676e:	2300      	movs	r3, #0
    6770:	f003 0301 	and.w	r3, r3, #1
    6774:	b2db      	uxtb	r3, r3
    6776:	f640 121d 	movw	r2, #2333	; 0x91d
    677a:	491a      	ldr	r1, [pc, #104]	; (67e4 <_spi_load_regs_slave+0x90>)
    677c:	4618      	mov	r0, r3
    677e:	4b1a      	ldr	r3, [pc, #104]	; (67e8 <_spi_load_regs_slave+0x94>)
    6780:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6782:	683b      	ldr	r3, [r7, #0]
    6784:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6786:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    678a:	f023 0301 	bic.w	r3, r3, #1
    678e:	4619      	mov	r1, r3
    6790:	6878      	ldr	r0, [r7, #4]
    6792:	4b16      	ldr	r3, [pc, #88]	; (67ec <_spi_load_regs_slave+0x98>)
    6794:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6796:	683b      	ldr	r3, [r7, #0]
    6798:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    679a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    679e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    67a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    67a6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    67aa:	4619      	mov	r1, r3
    67ac:	6878      	ldr	r0, [r7, #4]
    67ae:	4b10      	ldr	r3, [pc, #64]	; (67f0 <_spi_load_regs_slave+0x9c>)
    67b0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    67b2:	683b      	ldr	r3, [r7, #0]
    67b4:	689b      	ldr	r3, [r3, #8]
    67b6:	4619      	mov	r1, r3
    67b8:	6878      	ldr	r0, [r7, #4]
    67ba:	4b0e      	ldr	r3, [pc, #56]	; (67f4 <_spi_load_regs_slave+0xa0>)
    67bc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    67be:	683b      	ldr	r3, [r7, #0]
    67c0:	7b5b      	ldrb	r3, [r3, #13]
    67c2:	4619      	mov	r1, r3
    67c4:	6878      	ldr	r0, [r7, #4]
    67c6:	4b0c      	ldr	r3, [pc, #48]	; (67f8 <_spi_load_regs_slave+0xa4>)
    67c8:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    67ca:	bf00      	nop
    67cc:	f04f 31ff 	mov.w	r1, #4294967295
    67d0:	6878      	ldr	r0, [r7, #4]
    67d2:	4b0a      	ldr	r3, [pc, #40]	; (67fc <_spi_load_regs_slave+0xa8>)
    67d4:	4798      	blx	r3
    67d6:	4603      	mov	r3, r0
    67d8:	2b00      	cmp	r3, #0
    67da:	d1f7      	bne.n	67cc <_spi_load_regs_slave+0x78>
		;
}
    67dc:	bf00      	nop
    67de:	3708      	adds	r7, #8
    67e0:	46bd      	mov	sp, r7
    67e2:	bd80      	pop	{r7, pc}
    67e4:	0000eef0 	.word	0x0000eef0
    67e8:	000033ad 	.word	0x000033ad
    67ec:	00005b6d 	.word	0x00005b6d
    67f0:	00005c85 	.word	0x00005c85
    67f4:	00005d69 	.word	0x00005d69
    67f8:	00005dfd 	.word	0x00005dfd
    67fc:	00005931 	.word	0x00005931

00006800 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6800:	b580      	push	{r7, lr}
    6802:	b084      	sub	sp, #16
    6804:	af00      	add	r7, sp, #0
    6806:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	4618      	mov	r0, r3
    680c:	4b11      	ldr	r3, [pc, #68]	; (6854 <_spi_get_regs+0x54>)
    680e:	4798      	blx	r3
    6810:	4603      	mov	r3, r0
    6812:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6814:	2300      	movs	r3, #0
    6816:	73fb      	strb	r3, [r7, #15]
    6818:	e014      	b.n	6844 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    681a:	7bfa      	ldrb	r2, [r7, #15]
    681c:	490e      	ldr	r1, [pc, #56]	; (6858 <_spi_get_regs+0x58>)
    681e:	4613      	mov	r3, r2
    6820:	011b      	lsls	r3, r3, #4
    6822:	4413      	add	r3, r2
    6824:	440b      	add	r3, r1
    6826:	3310      	adds	r3, #16
    6828:	781b      	ldrb	r3, [r3, #0]
    682a:	7bba      	ldrb	r2, [r7, #14]
    682c:	429a      	cmp	r2, r3
    682e:	d106      	bne.n	683e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6830:	7bfa      	ldrb	r2, [r7, #15]
    6832:	4613      	mov	r3, r2
    6834:	011b      	lsls	r3, r3, #4
    6836:	4413      	add	r3, r2
    6838:	4a07      	ldr	r2, [pc, #28]	; (6858 <_spi_get_regs+0x58>)
    683a:	4413      	add	r3, r2
    683c:	e006      	b.n	684c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    683e:	7bfb      	ldrb	r3, [r7, #15]
    6840:	3301      	adds	r3, #1
    6842:	73fb      	strb	r3, [r7, #15]
    6844:	7bfb      	ldrb	r3, [r7, #15]
    6846:	2b01      	cmp	r3, #1
    6848:	d9e7      	bls.n	681a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    684a:	2300      	movs	r3, #0
}
    684c:	4618      	mov	r0, r3
    684e:	3710      	adds	r7, #16
    6850:	46bd      	mov	sp, r7
    6852:	bd80      	pop	{r7, pc}
    6854:	00005eb5 	.word	0x00005eb5
    6858:	0000ef2c 	.word	0x0000ef2c

0000685c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    685c:	b580      	push	{r7, lr}
    685e:	b084      	sub	sp, #16
    6860:	af00      	add	r7, sp, #0
    6862:	6078      	str	r0, [r7, #4]
    6864:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6866:	683b      	ldr	r3, [r7, #0]
    6868:	4618      	mov	r0, r3
    686a:	4b35      	ldr	r3, [pc, #212]	; (6940 <_spi_m_sync_init+0xe4>)
    686c:	4798      	blx	r3
    686e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6870:	687b      	ldr	r3, [r7, #4]
    6872:	2b00      	cmp	r3, #0
    6874:	d004      	beq.n	6880 <_spi_m_sync_init+0x24>
    6876:	683b      	ldr	r3, [r7, #0]
    6878:	2b00      	cmp	r3, #0
    687a:	d001      	beq.n	6880 <_spi_m_sync_init+0x24>
    687c:	2301      	movs	r3, #1
    687e:	e000      	b.n	6882 <_spi_m_sync_init+0x26>
    6880:	2300      	movs	r3, #0
    6882:	f003 0301 	and.w	r3, r3, #1
    6886:	b2db      	uxtb	r3, r3
    6888:	f640 123f 	movw	r2, #2367	; 0x93f
    688c:	492d      	ldr	r1, [pc, #180]	; (6944 <_spi_m_sync_init+0xe8>)
    688e:	4618      	mov	r0, r3
    6890:	4b2d      	ldr	r3, [pc, #180]	; (6948 <_spi_m_sync_init+0xec>)
    6892:	4798      	blx	r3

	if (regs == NULL) {
    6894:	68fb      	ldr	r3, [r7, #12]
    6896:	2b00      	cmp	r3, #0
    6898:	d102      	bne.n	68a0 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    689a:	f06f 030c 	mvn.w	r3, #12
    689e:	e04a      	b.n	6936 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    68a0:	2101      	movs	r1, #1
    68a2:	6838      	ldr	r0, [r7, #0]
    68a4:	4b29      	ldr	r3, [pc, #164]	; (694c <_spi_m_sync_init+0xf0>)
    68a6:	4798      	blx	r3
    68a8:	4603      	mov	r3, r0
    68aa:	f083 0301 	eor.w	r3, r3, #1
    68ae:	b2db      	uxtb	r3, r3
    68b0:	2b00      	cmp	r3, #0
    68b2:	d019      	beq.n	68e8 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    68b4:	68fb      	ldr	r3, [r7, #12]
    68b6:	681b      	ldr	r3, [r3, #0]
    68b8:	f003 031c 	and.w	r3, r3, #28
    68bc:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    68be:	2102      	movs	r1, #2
    68c0:	6838      	ldr	r0, [r7, #0]
    68c2:	4b23      	ldr	r3, [pc, #140]	; (6950 <_spi_m_sync_init+0xf4>)
    68c4:	4798      	blx	r3
    68c6:	4603      	mov	r3, r0
    68c8:	2b00      	cmp	r3, #0
    68ca:	d006      	beq.n	68da <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    68cc:	6838      	ldr	r0, [r7, #0]
    68ce:	4b21      	ldr	r3, [pc, #132]	; (6954 <_spi_m_sync_init+0xf8>)
    68d0:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    68d2:	2102      	movs	r1, #2
    68d4:	6838      	ldr	r0, [r7, #0]
    68d6:	4b20      	ldr	r3, [pc, #128]	; (6958 <_spi_m_sync_init+0xfc>)
    68d8:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    68da:	68bb      	ldr	r3, [r7, #8]
    68dc:	f043 0301 	orr.w	r3, r3, #1
    68e0:	4619      	mov	r1, r3
    68e2:	6838      	ldr	r0, [r7, #0]
    68e4:	4b1d      	ldr	r3, [pc, #116]	; (695c <_spi_m_sync_init+0x100>)
    68e6:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    68e8:	2101      	movs	r1, #1
    68ea:	6838      	ldr	r0, [r7, #0]
    68ec:	4b1a      	ldr	r3, [pc, #104]	; (6958 <_spi_m_sync_init+0xfc>)
    68ee:	4798      	blx	r3

	dev->prvt = hw;
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	683a      	ldr	r2, [r7, #0]
    68f4:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    68f6:	68fb      	ldr	r3, [r7, #12]
    68f8:	681b      	ldr	r3, [r3, #0]
    68fa:	f003 031c 	and.w	r3, r3, #28
    68fe:	2b08      	cmp	r3, #8
    6900:	d104      	bne.n	690c <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6902:	68f9      	ldr	r1, [r7, #12]
    6904:	6838      	ldr	r0, [r7, #0]
    6906:	4b16      	ldr	r3, [pc, #88]	; (6960 <_spi_m_sync_init+0x104>)
    6908:	4798      	blx	r3
    690a:	e003      	b.n	6914 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    690c:	68f9      	ldr	r1, [r7, #12]
    690e:	6838      	ldr	r0, [r7, #0]
    6910:	4b14      	ldr	r3, [pc, #80]	; (6964 <_spi_m_sync_init+0x108>)
    6912:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6914:	68fb      	ldr	r3, [r7, #12]
    6916:	685b      	ldr	r3, [r3, #4]
    6918:	f003 0307 	and.w	r3, r3, #7
    691c:	2b00      	cmp	r3, #0
    691e:	d101      	bne.n	6924 <_spi_m_sync_init+0xc8>
    6920:	2201      	movs	r2, #1
    6922:	e000      	b.n	6926 <_spi_m_sync_init+0xca>
    6924:	2202      	movs	r2, #2
    6926:	687b      	ldr	r3, [r7, #4]
    6928:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    692a:	68fb      	ldr	r3, [r7, #12]
    692c:	89db      	ldrh	r3, [r3, #14]
    692e:	b29a      	uxth	r2, r3
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6934:	2300      	movs	r3, #0
}
    6936:	4618      	mov	r0, r3
    6938:	3710      	adds	r7, #16
    693a:	46bd      	mov	sp, r7
    693c:	bd80      	pop	{r7, pc}
    693e:	bf00      	nop
    6940:	00006801 	.word	0x00006801
    6944:	0000eef0 	.word	0x0000eef0
    6948:	000033ad 	.word	0x000033ad
    694c:	00005931 	.word	0x00005931
    6950:	00005b3d 	.word	0x00005b3d
    6954:	00005b15 	.word	0x00005b15
    6958:	0000590d 	.word	0x0000590d
    695c:	00005b6d 	.word	0x00005b6d
    6960:	00006755 	.word	0x00006755
    6964:	000066c1 	.word	0x000066c1

00006968 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6968:	b580      	push	{r7, lr}
    696a:	b082      	sub	sp, #8
    696c:	af00      	add	r7, sp, #0
    696e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6970:	bf00      	nop
    6972:	2103      	movs	r1, #3
    6974:	6878      	ldr	r0, [r7, #4]
    6976:	4b06      	ldr	r3, [pc, #24]	; (6990 <_spi_wait_bus_idle+0x28>)
    6978:	4798      	blx	r3
    697a:	4603      	mov	r3, r0
    697c:	2b00      	cmp	r3, #0
    697e:	d0f8      	beq.n	6972 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6980:	2103      	movs	r1, #3
    6982:	6878      	ldr	r0, [r7, #4]
    6984:	4b03      	ldr	r3, [pc, #12]	; (6994 <_spi_wait_bus_idle+0x2c>)
    6986:	4798      	blx	r3
}
    6988:	bf00      	nop
    698a:	3708      	adds	r7, #8
    698c:	46bd      	mov	sp, r7
    698e:	bd80      	pop	{r7, pc}
    6990:	000059a7 	.word	0x000059a7
    6994:	000059e9 	.word	0x000059e9

00006998 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6998:	b580      	push	{r7, lr}
    699a:	b086      	sub	sp, #24
    699c:	af00      	add	r7, sp, #0
    699e:	60f8      	str	r0, [r7, #12]
    69a0:	60b9      	str	r1, [r7, #8]
    69a2:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    69a4:	68bb      	ldr	r3, [r7, #8]
    69a6:	f003 0304 	and.w	r3, r3, #4
    69aa:	2b00      	cmp	r3, #0
    69ac:	d101      	bne.n	69b2 <_spi_rx_check_and_receive+0x1a>
		return false;
    69ae:	2300      	movs	r3, #0
    69b0:	e022      	b.n	69f8 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    69b2:	68f8      	ldr	r0, [r7, #12]
    69b4:	4b12      	ldr	r3, [pc, #72]	; (6a00 <_spi_rx_check_and_receive+0x68>)
    69b6:	4798      	blx	r3
    69b8:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    69ba:	687b      	ldr	r3, [r7, #4]
    69bc:	685b      	ldr	r3, [r3, #4]
    69be:	2b00      	cmp	r3, #0
    69c0:	d014      	beq.n	69ec <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	685b      	ldr	r3, [r3, #4]
    69c6:	1c59      	adds	r1, r3, #1
    69c8:	687a      	ldr	r2, [r7, #4]
    69ca:	6051      	str	r1, [r2, #4]
    69cc:	697a      	ldr	r2, [r7, #20]
    69ce:	b2d2      	uxtb	r2, r2
    69d0:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	7c1b      	ldrb	r3, [r3, #16]
    69d6:	2b01      	cmp	r3, #1
    69d8:	d908      	bls.n	69ec <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	685b      	ldr	r3, [r3, #4]
    69de:	1c59      	adds	r1, r3, #1
    69e0:	687a      	ldr	r2, [r7, #4]
    69e2:	6051      	str	r1, [r2, #4]
    69e4:	697a      	ldr	r2, [r7, #20]
    69e6:	0a12      	lsrs	r2, r2, #8
    69e8:	b2d2      	uxtb	r2, r2
    69ea:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	68db      	ldr	r3, [r3, #12]
    69f0:	1c5a      	adds	r2, r3, #1
    69f2:	687b      	ldr	r3, [r7, #4]
    69f4:	60da      	str	r2, [r3, #12]

	return true;
    69f6:	2301      	movs	r3, #1
}
    69f8:	4618      	mov	r0, r3
    69fa:	3718      	adds	r7, #24
    69fc:	46bd      	mov	sp, r7
    69fe:	bd80      	pop	{r7, pc}
    6a00:	00005de5 	.word	0x00005de5

00006a04 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6a04:	b580      	push	{r7, lr}
    6a06:	b086      	sub	sp, #24
    6a08:	af00      	add	r7, sp, #0
    6a0a:	60f8      	str	r0, [r7, #12]
    6a0c:	60b9      	str	r1, [r7, #8]
    6a0e:	607a      	str	r2, [r7, #4]
    6a10:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6a12:	68bb      	ldr	r3, [r7, #8]
    6a14:	f003 0301 	and.w	r3, r3, #1
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d028      	beq.n	6a6e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6a1c:	687b      	ldr	r3, [r7, #4]
    6a1e:	681b      	ldr	r3, [r3, #0]
    6a20:	2b00      	cmp	r3, #0
    6a22:	d018      	beq.n	6a56 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6a24:	687b      	ldr	r3, [r7, #4]
    6a26:	681b      	ldr	r3, [r3, #0]
    6a28:	1c59      	adds	r1, r3, #1
    6a2a:	687a      	ldr	r2, [r7, #4]
    6a2c:	6011      	str	r1, [r2, #0]
    6a2e:	781b      	ldrb	r3, [r3, #0]
    6a30:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6a32:	687b      	ldr	r3, [r7, #4]
    6a34:	7c1b      	ldrb	r3, [r3, #16]
    6a36:	2b01      	cmp	r3, #1
    6a38:	d90f      	bls.n	6a5a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6a3a:	687b      	ldr	r3, [r7, #4]
    6a3c:	681b      	ldr	r3, [r3, #0]
    6a3e:	781b      	ldrb	r3, [r3, #0]
    6a40:	021b      	lsls	r3, r3, #8
    6a42:	461a      	mov	r2, r3
    6a44:	697b      	ldr	r3, [r7, #20]
    6a46:	4313      	orrs	r3, r2
    6a48:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6a4a:	687b      	ldr	r3, [r7, #4]
    6a4c:	681b      	ldr	r3, [r3, #0]
    6a4e:	1c5a      	adds	r2, r3, #1
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	601a      	str	r2, [r3, #0]
    6a54:	e001      	b.n	6a5a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6a56:	887b      	ldrh	r3, [r7, #2]
    6a58:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6a5a:	687b      	ldr	r3, [r7, #4]
    6a5c:	689b      	ldr	r3, [r3, #8]
    6a5e:	1c5a      	adds	r2, r3, #1
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6a64:	6979      	ldr	r1, [r7, #20]
    6a66:	68f8      	ldr	r0, [r7, #12]
    6a68:	4b03      	ldr	r3, [pc, #12]	; (6a78 <_spi_tx_check_and_send+0x74>)
    6a6a:	4798      	blx	r3
    6a6c:	e000      	b.n	6a70 <_spi_tx_check_and_send+0x6c>
		return;
    6a6e:	bf00      	nop
}
    6a70:	3718      	adds	r7, #24
    6a72:	46bd      	mov	sp, r7
    6a74:	bd80      	pop	{r7, pc}
    6a76:	bf00      	nop
    6a78:	00005dc9 	.word	0x00005dc9

00006a7c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	b082      	sub	sp, #8
    6a80:	af00      	add	r7, sp, #0
    6a82:	6078      	str	r0, [r7, #4]
    6a84:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	d00b      	beq.n	6aa8 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6a90:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6a94:	6838      	ldr	r0, [r7, #0]
    6a96:	4b07      	ldr	r3, [pc, #28]	; (6ab4 <_spi_err_check+0x38>)
    6a98:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6a9a:	2180      	movs	r1, #128	; 0x80
    6a9c:	6838      	ldr	r0, [r7, #0]
    6a9e:	4b06      	ldr	r3, [pc, #24]	; (6ab8 <_spi_err_check+0x3c>)
    6aa0:	4798      	blx	r3
		return ERR_OVERFLOW;
    6aa2:	f06f 0312 	mvn.w	r3, #18
    6aa6:	e000      	b.n	6aaa <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6aa8:	2300      	movs	r3, #0
}
    6aaa:	4618      	mov	r0, r3
    6aac:	3708      	adds	r7, #8
    6aae:	46bd      	mov	sp, r7
    6ab0:	bd80      	pop	{r7, pc}
    6ab2:	bf00      	nop
    6ab4:	00005e1d 	.word	0x00005e1d
    6ab8:	000059e9 	.word	0x000059e9

00006abc <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6abc:	b590      	push	{r4, r7, lr}
    6abe:	b08b      	sub	sp, #44	; 0x2c
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	6078      	str	r0, [r7, #4]
    6ac4:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	681b      	ldr	r3, [r3, #0]
    6aca:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6acc:	2300      	movs	r3, #0
    6ace:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6ad0:	683b      	ldr	r3, [r7, #0]
    6ad2:	681b      	ldr	r3, [r3, #0]
    6ad4:	60bb      	str	r3, [r7, #8]
    6ad6:	683b      	ldr	r3, [r7, #0]
    6ad8:	685b      	ldr	r3, [r3, #4]
    6ada:	60fb      	str	r3, [r7, #12]
    6adc:	2300      	movs	r3, #0
    6ade:	613b      	str	r3, [r7, #16]
    6ae0:	2300      	movs	r3, #0
    6ae2:	617b      	str	r3, [r7, #20]
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	791b      	ldrb	r3, [r3, #4]
    6ae8:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6aea:	687b      	ldr	r3, [r7, #4]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d004      	beq.n	6afa <_spi_m_sync_trans+0x3e>
    6af0:	6a3b      	ldr	r3, [r7, #32]
    6af2:	2b00      	cmp	r3, #0
    6af4:	d001      	beq.n	6afa <_spi_m_sync_trans+0x3e>
    6af6:	2301      	movs	r3, #1
    6af8:	e000      	b.n	6afc <_spi_m_sync_trans+0x40>
    6afa:	2300      	movs	r3, #0
    6afc:	f003 0301 	and.w	r3, r3, #1
    6b00:	b2db      	uxtb	r3, r3
    6b02:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6b06:	492b      	ldr	r1, [pc, #172]	; (6bb4 <_spi_m_sync_trans+0xf8>)
    6b08:	4618      	mov	r0, r3
    6b0a:	4b2b      	ldr	r3, [pc, #172]	; (6bb8 <_spi_m_sync_trans+0xfc>)
    6b0c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6b0e:	2107      	movs	r1, #7
    6b10:	6a38      	ldr	r0, [r7, #32]
    6b12:	4b2a      	ldr	r3, [pc, #168]	; (6bbc <_spi_m_sync_trans+0x100>)
    6b14:	4798      	blx	r3
    6b16:	4603      	mov	r3, r0
    6b18:	2b00      	cmp	r3, #0
    6b1a:	d002      	beq.n	6b22 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6b1c:	f06f 0303 	mvn.w	r3, #3
    6b20:	e043      	b.n	6baa <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6b22:	6a38      	ldr	r0, [r7, #32]
    6b24:	4b26      	ldr	r3, [pc, #152]	; (6bc0 <_spi_m_sync_trans+0x104>)
    6b26:	4798      	blx	r3
    6b28:	4603      	mov	r3, r0
    6b2a:	f083 0301 	eor.w	r3, r3, #1
    6b2e:	b2db      	uxtb	r3, r3
    6b30:	2b00      	cmp	r3, #0
    6b32:	d002      	beq.n	6b3a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6b34:	f06f 0313 	mvn.w	r3, #19
    6b38:	e037      	b.n	6baa <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6b3a:	6a38      	ldr	r0, [r7, #32]
    6b3c:	4b21      	ldr	r3, [pc, #132]	; (6bc4 <_spi_m_sync_trans+0x108>)
    6b3e:	4798      	blx	r3
    6b40:	4603      	mov	r3, r0
    6b42:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6b44:	f107 0308 	add.w	r3, r7, #8
    6b48:	461a      	mov	r2, r3
    6b4a:	69f9      	ldr	r1, [r7, #28]
    6b4c:	6a38      	ldr	r0, [r7, #32]
    6b4e:	4b1e      	ldr	r3, [pc, #120]	; (6bc8 <_spi_m_sync_trans+0x10c>)
    6b50:	4798      	blx	r3
    6b52:	4603      	mov	r3, r0
    6b54:	f083 0301 	eor.w	r3, r3, #1
    6b58:	b2db      	uxtb	r3, r3
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d00b      	beq.n	6b76 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6b5e:	697a      	ldr	r2, [r7, #20]
    6b60:	693b      	ldr	r3, [r7, #16]
    6b62:	429a      	cmp	r2, r3
    6b64:	d307      	bcc.n	6b76 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	88db      	ldrh	r3, [r3, #6]
    6b6a:	f107 0208 	add.w	r2, r7, #8
    6b6e:	69f9      	ldr	r1, [r7, #28]
    6b70:	6a38      	ldr	r0, [r7, #32]
    6b72:	4c16      	ldr	r4, [pc, #88]	; (6bcc <_spi_m_sync_trans+0x110>)
    6b74:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6b76:	6a39      	ldr	r1, [r7, #32]
    6b78:	69f8      	ldr	r0, [r7, #28]
    6b7a:	4b15      	ldr	r3, [pc, #84]	; (6bd0 <_spi_m_sync_trans+0x114>)
    6b7c:	4798      	blx	r3
    6b7e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b82:	2b00      	cmp	r3, #0
    6b84:	db0c      	blt.n	6ba0 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6b86:	693a      	ldr	r2, [r7, #16]
    6b88:	683b      	ldr	r3, [r7, #0]
    6b8a:	689b      	ldr	r3, [r3, #8]
    6b8c:	429a      	cmp	r2, r3
    6b8e:	d3d4      	bcc.n	6b3a <_spi_m_sync_trans+0x7e>
    6b90:	697a      	ldr	r2, [r7, #20]
    6b92:	683b      	ldr	r3, [r7, #0]
    6b94:	689b      	ldr	r3, [r3, #8]
    6b96:	429a      	cmp	r2, r3
    6b98:	d3cf      	bcc.n	6b3a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6b9a:	693b      	ldr	r3, [r7, #16]
    6b9c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6b9e:	e000      	b.n	6ba2 <_spi_m_sync_trans+0xe6>
			break;
    6ba0:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6ba2:	6a38      	ldr	r0, [r7, #32]
    6ba4:	4b0b      	ldr	r3, [pc, #44]	; (6bd4 <_spi_m_sync_trans+0x118>)
    6ba6:	4798      	blx	r3

	return rc;
    6ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6baa:	4618      	mov	r0, r3
    6bac:	372c      	adds	r7, #44	; 0x2c
    6bae:	46bd      	mov	sp, r7
    6bb0:	bd90      	pop	{r4, r7, pc}
    6bb2:	bf00      	nop
    6bb4:	0000eef0 	.word	0x0000eef0
    6bb8:	000033ad 	.word	0x000033ad
    6bbc:	00005931 	.word	0x00005931
    6bc0:	00005add 	.word	0x00005add
    6bc4:	000059cf 	.word	0x000059cf
    6bc8:	00006999 	.word	0x00006999
    6bcc:	00006a05 	.word	0x00006a05
    6bd0:	00006a7d 	.word	0x00006a7d
    6bd4:	00006969 	.word	0x00006969

00006bd8 <__NVIC_EnableIRQ>:
{
    6bd8:	b480      	push	{r7}
    6bda:	b083      	sub	sp, #12
    6bdc:	af00      	add	r7, sp, #0
    6bde:	4603      	mov	r3, r0
    6be0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6be6:	2b00      	cmp	r3, #0
    6be8:	db0b      	blt.n	6c02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6bea:	4909      	ldr	r1, [pc, #36]	; (6c10 <__NVIC_EnableIRQ+0x38>)
    6bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6bf0:	095b      	lsrs	r3, r3, #5
    6bf2:	88fa      	ldrh	r2, [r7, #6]
    6bf4:	f002 021f 	and.w	r2, r2, #31
    6bf8:	2001      	movs	r0, #1
    6bfa:	fa00 f202 	lsl.w	r2, r0, r2
    6bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c02:	bf00      	nop
    6c04:	370c      	adds	r7, #12
    6c06:	46bd      	mov	sp, r7
    6c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c0c:	4770      	bx	lr
    6c0e:	bf00      	nop
    6c10:	e000e100 	.word	0xe000e100

00006c14 <__NVIC_DisableIRQ>:
{
    6c14:	b480      	push	{r7}
    6c16:	b083      	sub	sp, #12
    6c18:	af00      	add	r7, sp, #0
    6c1a:	4603      	mov	r3, r0
    6c1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c22:	2b00      	cmp	r3, #0
    6c24:	db10      	blt.n	6c48 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c26:	490b      	ldr	r1, [pc, #44]	; (6c54 <__NVIC_DisableIRQ+0x40>)
    6c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c2c:	095b      	lsrs	r3, r3, #5
    6c2e:	88fa      	ldrh	r2, [r7, #6]
    6c30:	f002 021f 	and.w	r2, r2, #31
    6c34:	2001      	movs	r0, #1
    6c36:	fa00 f202 	lsl.w	r2, r0, r2
    6c3a:	3320      	adds	r3, #32
    6c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6c40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c44:	f3bf 8f6f 	isb	sy
}
    6c48:	bf00      	nop
    6c4a:	370c      	adds	r7, #12
    6c4c:	46bd      	mov	sp, r7
    6c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c52:	4770      	bx	lr
    6c54:	e000e100 	.word	0xe000e100

00006c58 <__NVIC_ClearPendingIRQ>:
{
    6c58:	b480      	push	{r7}
    6c5a:	b083      	sub	sp, #12
    6c5c:	af00      	add	r7, sp, #0
    6c5e:	4603      	mov	r3, r0
    6c60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c66:	2b00      	cmp	r3, #0
    6c68:	db0c      	blt.n	6c84 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c6a:	4909      	ldr	r1, [pc, #36]	; (6c90 <__NVIC_ClearPendingIRQ+0x38>)
    6c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c70:	095b      	lsrs	r3, r3, #5
    6c72:	88fa      	ldrh	r2, [r7, #6]
    6c74:	f002 021f 	and.w	r2, r2, #31
    6c78:	2001      	movs	r0, #1
    6c7a:	fa00 f202 	lsl.w	r2, r0, r2
    6c7e:	3360      	adds	r3, #96	; 0x60
    6c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c84:	bf00      	nop
    6c86:	370c      	adds	r7, #12
    6c88:	46bd      	mov	sp, r7
    6c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c8e:	4770      	bx	lr
    6c90:	e000e100 	.word	0xe000e100

00006c94 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6c94:	b480      	push	{r7}
    6c96:	b083      	sub	sp, #12
    6c98:	af00      	add	r7, sp, #0
    6c9a:	6078      	str	r0, [r7, #4]
    6c9c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    6c9e:	bf00      	nop
    6ca0:	687b      	ldr	r3, [r7, #4]
    6ca2:	689a      	ldr	r2, [r3, #8]
    6ca4:	683b      	ldr	r3, [r7, #0]
    6ca6:	4013      	ands	r3, r2
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d1f9      	bne.n	6ca0 <hri_tcc_wait_for_sync+0xc>
	};
}
    6cac:	bf00      	nop
    6cae:	370c      	adds	r7, #12
    6cb0:	46bd      	mov	sp, r7
    6cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cb6:	4770      	bx	lr

00006cb8 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6cb8:	b480      	push	{r7}
    6cba:	b083      	sub	sp, #12
    6cbc:	af00      	add	r7, sp, #0
    6cbe:	6078      	str	r0, [r7, #4]
    6cc0:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6cc2:	687b      	ldr	r3, [r7, #4]
    6cc4:	689a      	ldr	r2, [r3, #8]
    6cc6:	683b      	ldr	r3, [r7, #0]
    6cc8:	4013      	ands	r3, r2
    6cca:	2b00      	cmp	r3, #0
    6ccc:	bf14      	ite	ne
    6cce:	2301      	movne	r3, #1
    6cd0:	2300      	moveq	r3, #0
    6cd2:	b2db      	uxtb	r3, r3
}
    6cd4:	4618      	mov	r0, r3
    6cd6:	370c      	adds	r7, #12
    6cd8:	46bd      	mov	sp, r7
    6cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cde:	4770      	bx	lr

00006ce0 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6ce0:	b480      	push	{r7}
    6ce2:	b083      	sub	sp, #12
    6ce4:	af00      	add	r7, sp, #0
    6ce6:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6cec:	f003 0301 	and.w	r3, r3, #1
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	bf14      	ite	ne
    6cf4:	2301      	movne	r3, #1
    6cf6:	2300      	moveq	r3, #0
    6cf8:	b2db      	uxtb	r3, r3
}
    6cfa:	4618      	mov	r0, r3
    6cfc:	370c      	adds	r7, #12
    6cfe:	46bd      	mov	sp, r7
    6d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d04:	4770      	bx	lr

00006d06 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6d06:	b480      	push	{r7}
    6d08:	b083      	sub	sp, #12
    6d0a:	af00      	add	r7, sp, #0
    6d0c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6d0e:	687b      	ldr	r3, [r7, #4]
    6d10:	2201      	movs	r2, #1
    6d12:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6d14:	bf00      	nop
    6d16:	370c      	adds	r7, #12
    6d18:	46bd      	mov	sp, r7
    6d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d1e:	4770      	bx	lr

00006d20 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6d20:	b480      	push	{r7}
    6d22:	b083      	sub	sp, #12
    6d24:	af00      	add	r7, sp, #0
    6d26:	6078      	str	r0, [r7, #4]
    6d28:	460b      	mov	r3, r1
    6d2a:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6d2c:	687b      	ldr	r3, [r7, #4]
    6d2e:	78fa      	ldrb	r2, [r7, #3]
    6d30:	715a      	strb	r2, [r3, #5]
}
    6d32:	bf00      	nop
    6d34:	370c      	adds	r7, #12
    6d36:	46bd      	mov	sp, r7
    6d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d3c:	4770      	bx	lr

00006d3e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6d3e:	b480      	push	{r7}
    6d40:	b083      	sub	sp, #12
    6d42:	af00      	add	r7, sp, #0
    6d44:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6d46:	687b      	ldr	r3, [r7, #4]
    6d48:	2201      	movs	r2, #1
    6d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
    6d4c:	bf00      	nop
    6d4e:	370c      	adds	r7, #12
    6d50:	46bd      	mov	sp, r7
    6d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d56:	4770      	bx	lr

00006d58 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6d58:	b580      	push	{r7, lr}
    6d5a:	b082      	sub	sp, #8
    6d5c:	af00      	add	r7, sp, #0
    6d5e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	681b      	ldr	r3, [r3, #0]
    6d64:	f043 0201 	orr.w	r2, r3, #1
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6d6c:	2101      	movs	r1, #1
    6d6e:	6878      	ldr	r0, [r7, #4]
    6d70:	4b02      	ldr	r3, [pc, #8]	; (6d7c <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6d72:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6d74:	bf00      	nop
    6d76:	3708      	adds	r7, #8
    6d78:	46bd      	mov	sp, r7
    6d7a:	bd80      	pop	{r7, pc}
    6d7c:	00006c95 	.word	0x00006c95

00006d80 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6d80:	b580      	push	{r7, lr}
    6d82:	b082      	sub	sp, #8
    6d84:	af00      	add	r7, sp, #0
    6d86:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	681b      	ldr	r3, [r3, #0]
    6d8c:	f043 0202 	orr.w	r2, r3, #2
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6d94:	2103      	movs	r1, #3
    6d96:	6878      	ldr	r0, [r7, #4]
    6d98:	4b02      	ldr	r3, [pc, #8]	; (6da4 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    6d9a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6d9c:	bf00      	nop
    6d9e:	3708      	adds	r7, #8
    6da0:	46bd      	mov	sp, r7
    6da2:	bd80      	pop	{r7, pc}
    6da4:	00006c95 	.word	0x00006c95

00006da8 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6da8:	b580      	push	{r7, lr}
    6daa:	b084      	sub	sp, #16
    6dac:	af00      	add	r7, sp, #0
    6dae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6db0:	2103      	movs	r1, #3
    6db2:	6878      	ldr	r0, [r7, #4]
    6db4:	4b09      	ldr	r3, [pc, #36]	; (6ddc <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    6db6:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6dbe:	68fb      	ldr	r3, [r7, #12]
    6dc0:	085b      	lsrs	r3, r3, #1
    6dc2:	f003 0301 	and.w	r3, r3, #1
    6dc6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	2b00      	cmp	r3, #0
    6dcc:	bf14      	ite	ne
    6dce:	2301      	movne	r3, #1
    6dd0:	2300      	moveq	r3, #0
    6dd2:	b2db      	uxtb	r3, r3
}
    6dd4:	4618      	mov	r0, r3
    6dd6:	3710      	adds	r7, #16
    6dd8:	46bd      	mov	sp, r7
    6dda:	bd80      	pop	{r7, pc}
    6ddc:	00006c95 	.word	0x00006c95

00006de0 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6de0:	b580      	push	{r7, lr}
    6de2:	b082      	sub	sp, #8
    6de4:	af00      	add	r7, sp, #0
    6de6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	681b      	ldr	r3, [r3, #0]
    6dec:	f023 0202 	bic.w	r2, r3, #2
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6df4:	2103      	movs	r1, #3
    6df6:	6878      	ldr	r0, [r7, #4]
    6df8:	4b02      	ldr	r3, [pc, #8]	; (6e04 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    6dfa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6dfc:	bf00      	nop
    6dfe:	3708      	adds	r7, #8
    6e00:	46bd      	mov	sp, r7
    6e02:	bd80      	pop	{r7, pc}
    6e04:	00006c95 	.word	0x00006c95

00006e08 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	b084      	sub	sp, #16
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	6078      	str	r0, [r7, #4]
    6e10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6e12:	2103      	movs	r1, #3
    6e14:	6878      	ldr	r0, [r7, #4]
    6e16:	4b07      	ldr	r3, [pc, #28]	; (6e34 <hri_tcc_get_CTRLA_reg+0x2c>)
    6e18:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6e1a:	687b      	ldr	r3, [r7, #4]
    6e1c:	681b      	ldr	r3, [r3, #0]
    6e1e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6e20:	68fa      	ldr	r2, [r7, #12]
    6e22:	683b      	ldr	r3, [r7, #0]
    6e24:	4013      	ands	r3, r2
    6e26:	60fb      	str	r3, [r7, #12]
	return tmp;
    6e28:	68fb      	ldr	r3, [r7, #12]
}
    6e2a:	4618      	mov	r0, r3
    6e2c:	3710      	adds	r7, #16
    6e2e:	46bd      	mov	sp, r7
    6e30:	bd80      	pop	{r7, pc}
    6e32:	bf00      	nop
    6e34:	00006c95 	.word	0x00006c95

00006e38 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	b082      	sub	sp, #8
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	6078      	str	r0, [r7, #4]
    6e40:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	683a      	ldr	r2, [r7, #0]
    6e46:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6e48:	2103      	movs	r1, #3
    6e4a:	6878      	ldr	r0, [r7, #4]
    6e4c:	4b02      	ldr	r3, [pc, #8]	; (6e58 <hri_tcc_write_CTRLA_reg+0x20>)
    6e4e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e50:	bf00      	nop
    6e52:	3708      	adds	r7, #8
    6e54:	46bd      	mov	sp, r7
    6e56:	bd80      	pop	{r7, pc}
    6e58:	00006c95 	.word	0x00006c95

00006e5c <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    6e5c:	b480      	push	{r7}
    6e5e:	b083      	sub	sp, #12
    6e60:	af00      	add	r7, sp, #0
    6e62:	6078      	str	r0, [r7, #4]
    6e64:	460b      	mov	r3, r1
    6e66:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	78fa      	ldrb	r2, [r7, #3]
    6e6c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e6e:	bf00      	nop
    6e70:	370c      	adds	r7, #12
    6e72:	46bd      	mov	sp, r7
    6e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e78:	4770      	bx	lr

00006e7a <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    6e7a:	b480      	push	{r7}
    6e7c:	b083      	sub	sp, #12
    6e7e:	af00      	add	r7, sp, #0
    6e80:	6078      	str	r0, [r7, #4]
    6e82:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	683a      	ldr	r2, [r7, #0]
    6e88:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e8a:	bf00      	nop
    6e8c:	370c      	adds	r7, #12
    6e8e:	46bd      	mov	sp, r7
    6e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e94:	4770      	bx	lr
	...

00006e98 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    6e98:	b580      	push	{r7, lr}
    6e9a:	b082      	sub	sp, #8
    6e9c:	af00      	add	r7, sp, #0
    6e9e:	6078      	str	r0, [r7, #4]
    6ea0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	683a      	ldr	r2, [r7, #0]
    6ea6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6ea8:	2180      	movs	r1, #128	; 0x80
    6eaa:	6878      	ldr	r0, [r7, #4]
    6eac:	4b02      	ldr	r3, [pc, #8]	; (6eb8 <hri_tcc_write_PER_reg+0x20>)
    6eae:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6eb0:	bf00      	nop
    6eb2:	3708      	adds	r7, #8
    6eb4:	46bd      	mov	sp, r7
    6eb6:	bd80      	pop	{r7, pc}
    6eb8:	00006c95 	.word	0x00006c95

00006ebc <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    6ebc:	b580      	push	{r7, lr}
    6ebe:	b082      	sub	sp, #8
    6ec0:	af00      	add	r7, sp, #0
    6ec2:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6ec4:	2180      	movs	r1, #128	; 0x80
    6ec6:	6878      	ldr	r0, [r7, #4]
    6ec8:	4b03      	ldr	r3, [pc, #12]	; (6ed8 <hri_tcc_read_PER_reg+0x1c>)
    6eca:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    6ed0:	4618      	mov	r0, r3
    6ed2:	3708      	adds	r7, #8
    6ed4:	46bd      	mov	sp, r7
    6ed6:	bd80      	pop	{r7, pc}
    6ed8:	00006c95 	.word	0x00006c95

00006edc <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    6edc:	b480      	push	{r7}
    6ede:	b083      	sub	sp, #12
    6ee0:	af00      	add	r7, sp, #0
    6ee2:	6078      	str	r0, [r7, #4]
    6ee4:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	4a0c      	ldr	r2, [pc, #48]	; (6f1c <_tcc_init_irq_param+0x40>)
    6eea:	4293      	cmp	r3, r2
    6eec:	d102      	bne.n	6ef4 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    6eee:	4a0c      	ldr	r2, [pc, #48]	; (6f20 <_tcc_init_irq_param+0x44>)
    6ef0:	683b      	ldr	r3, [r7, #0]
    6ef2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	4a0b      	ldr	r2, [pc, #44]	; (6f24 <_tcc_init_irq_param+0x48>)
    6ef8:	4293      	cmp	r3, r2
    6efa:	d102      	bne.n	6f02 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    6efc:	4a0a      	ldr	r2, [pc, #40]	; (6f28 <_tcc_init_irq_param+0x4c>)
    6efe:	683b      	ldr	r3, [r7, #0]
    6f00:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	4a09      	ldr	r2, [pc, #36]	; (6f2c <_tcc_init_irq_param+0x50>)
    6f06:	4293      	cmp	r3, r2
    6f08:	d102      	bne.n	6f10 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    6f0a:	4a09      	ldr	r2, [pc, #36]	; (6f30 <_tcc_init_irq_param+0x54>)
    6f0c:	683b      	ldr	r3, [r7, #0]
    6f0e:	6013      	str	r3, [r2, #0]
	}
}
    6f10:	bf00      	nop
    6f12:	370c      	adds	r7, #12
    6f14:	46bd      	mov	sp, r7
    6f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f1a:	4770      	bx	lr
    6f1c:	41016000 	.word	0x41016000
    6f20:	20000970 	.word	0x20000970
    6f24:	41018000 	.word	0x41018000
    6f28:	20000974 	.word	0x20000974
    6f2c:	42000c00 	.word	0x42000c00
    6f30:	20000978 	.word	0x20000978

00006f34 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b084      	sub	sp, #16
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
    6f3c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6f3e:	6838      	ldr	r0, [r7, #0]
    6f40:	4b33      	ldr	r3, [pc, #204]	; (7010 <_tcc_timer_init+0xdc>)
    6f42:	4798      	blx	r3
    6f44:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    6f46:	68fb      	ldr	r3, [r7, #12]
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d102      	bne.n	6f52 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    6f4c:	f06f 0309 	mvn.w	r3, #9
    6f50:	e05a      	b.n	7008 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	683a      	ldr	r2, [r7, #0]
    6f56:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    6f58:	2101      	movs	r1, #1
    6f5a:	6838      	ldr	r0, [r7, #0]
    6f5c:	4b2d      	ldr	r3, [pc, #180]	; (7014 <_tcc_timer_init+0xe0>)
    6f5e:	4798      	blx	r3
    6f60:	4603      	mov	r3, r0
    6f62:	f083 0301 	eor.w	r3, r3, #1
    6f66:	b2db      	uxtb	r3, r3
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d011      	beq.n	6f90 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    6f6c:	2102      	movs	r1, #2
    6f6e:	6838      	ldr	r0, [r7, #0]
    6f70:	4b29      	ldr	r3, [pc, #164]	; (7018 <_tcc_timer_init+0xe4>)
    6f72:	4798      	blx	r3
    6f74:	4603      	mov	r3, r0
    6f76:	2b00      	cmp	r3, #0
    6f78:	d006      	beq.n	6f88 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    6f7a:	6838      	ldr	r0, [r7, #0]
    6f7c:	4b27      	ldr	r3, [pc, #156]	; (701c <_tcc_timer_init+0xe8>)
    6f7e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    6f80:	2102      	movs	r1, #2
    6f82:	6838      	ldr	r0, [r7, #0]
    6f84:	4b26      	ldr	r3, [pc, #152]	; (7020 <_tcc_timer_init+0xec>)
    6f86:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    6f88:	2101      	movs	r1, #1
    6f8a:	6838      	ldr	r0, [r7, #0]
    6f8c:	4b25      	ldr	r3, [pc, #148]	; (7024 <_tcc_timer_init+0xf0>)
    6f8e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6f90:	2101      	movs	r1, #1
    6f92:	6838      	ldr	r0, [r7, #0]
    6f94:	4b22      	ldr	r3, [pc, #136]	; (7020 <_tcc_timer_init+0xec>)
    6f96:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    6f98:	68fb      	ldr	r3, [r7, #12]
    6f9a:	689b      	ldr	r3, [r3, #8]
    6f9c:	4619      	mov	r1, r3
    6f9e:	6838      	ldr	r0, [r7, #0]
    6fa0:	4b20      	ldr	r3, [pc, #128]	; (7024 <_tcc_timer_init+0xf0>)
    6fa2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    6fa4:	68fb      	ldr	r3, [r7, #12]
    6fa6:	7b1b      	ldrb	r3, [r3, #12]
    6fa8:	4619      	mov	r1, r3
    6faa:	6838      	ldr	r0, [r7, #0]
    6fac:	4b1e      	ldr	r3, [pc, #120]	; (7028 <_tcc_timer_init+0xf4>)
    6fae:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    6fb0:	68fb      	ldr	r3, [r7, #12]
    6fb2:	7b5b      	ldrb	r3, [r3, #13]
    6fb4:	4619      	mov	r1, r3
    6fb6:	6838      	ldr	r0, [r7, #0]
    6fb8:	4b1c      	ldr	r3, [pc, #112]	; (702c <_tcc_timer_init+0xf8>)
    6fba:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    6fbc:	68fb      	ldr	r3, [r7, #12]
    6fbe:	691b      	ldr	r3, [r3, #16]
    6fc0:	4619      	mov	r1, r3
    6fc2:	6838      	ldr	r0, [r7, #0]
    6fc4:	4b1a      	ldr	r3, [pc, #104]	; (7030 <_tcc_timer_init+0xfc>)
    6fc6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    6fc8:	68fb      	ldr	r3, [r7, #12]
    6fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6fcc:	4619      	mov	r1, r3
    6fce:	6838      	ldr	r0, [r7, #0]
    6fd0:	4b18      	ldr	r3, [pc, #96]	; (7034 <_tcc_timer_init+0x100>)
    6fd2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    6fd4:	6838      	ldr	r0, [r7, #0]
    6fd6:	4b18      	ldr	r3, [pc, #96]	; (7038 <_tcc_timer_init+0x104>)
    6fd8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    6fda:	6879      	ldr	r1, [r7, #4]
    6fdc:	6838      	ldr	r0, [r7, #0]
    6fde:	4b17      	ldr	r3, [pc, #92]	; (703c <_tcc_timer_init+0x108>)
    6fe0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6fe2:	68fb      	ldr	r3, [r7, #12]
    6fe4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6fe8:	4618      	mov	r0, r3
    6fea:	4b15      	ldr	r3, [pc, #84]	; (7040 <_tcc_timer_init+0x10c>)
    6fec:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    6fee:	68fb      	ldr	r3, [r7, #12]
    6ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6ff4:	4618      	mov	r0, r3
    6ff6:	4b13      	ldr	r3, [pc, #76]	; (7044 <_tcc_timer_init+0x110>)
    6ff8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    6ffa:	68fb      	ldr	r3, [r7, #12]
    6ffc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7000:	4618      	mov	r0, r3
    7002:	4b11      	ldr	r3, [pc, #68]	; (7048 <_tcc_timer_init+0x114>)
    7004:	4798      	blx	r3

	return ERR_NONE;
    7006:	2300      	movs	r3, #0
}
    7008:	4618      	mov	r0, r3
    700a:	3710      	adds	r7, #16
    700c:	46bd      	mov	sp, r7
    700e:	bd80      	pop	{r7, pc}
    7010:	00007219 	.word	0x00007219
    7014:	00006cb9 	.word	0x00006cb9
    7018:	00006e09 	.word	0x00006e09
    701c:	00006de1 	.word	0x00006de1
    7020:	00006c95 	.word	0x00006c95
    7024:	00006e39 	.word	0x00006e39
    7028:	00006d21 	.word	0x00006d21
    702c:	00006e5d 	.word	0x00006e5d
    7030:	00006e7b 	.word	0x00006e7b
    7034:	00006e99 	.word	0x00006e99
    7038:	00006d3f 	.word	0x00006d3f
    703c:	00006edd 	.word	0x00006edd
    7040:	00006c15 	.word	0x00006c15
    7044:	00006c59 	.word	0x00006c59
    7048:	00006bd9 	.word	0x00006bd9

0000704c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    704c:	b580      	push	{r7, lr}
    704e:	b084      	sub	sp, #16
    7050:	af00      	add	r7, sp, #0
    7052:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7054:	687b      	ldr	r3, [r7, #4]
    7056:	68db      	ldr	r3, [r3, #12]
    7058:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    705a:	68f8      	ldr	r0, [r7, #12]
    705c:	4b0a      	ldr	r3, [pc, #40]	; (7088 <_tcc_timer_deinit+0x3c>)
    705e:	4798      	blx	r3
    7060:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7062:	68bb      	ldr	r3, [r7, #8]
    7064:	2b00      	cmp	r3, #0
    7066:	d00b      	beq.n	7080 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7068:	68bb      	ldr	r3, [r7, #8]
    706a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    706e:	4618      	mov	r0, r3
    7070:	4b06      	ldr	r3, [pc, #24]	; (708c <_tcc_timer_deinit+0x40>)
    7072:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7074:	68f8      	ldr	r0, [r7, #12]
    7076:	4b06      	ldr	r3, [pc, #24]	; (7090 <_tcc_timer_deinit+0x44>)
    7078:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    707a:	68f8      	ldr	r0, [r7, #12]
    707c:	4b05      	ldr	r3, [pc, #20]	; (7094 <_tcc_timer_deinit+0x48>)
    707e:	4798      	blx	r3
	}
}
    7080:	bf00      	nop
    7082:	3710      	adds	r7, #16
    7084:	46bd      	mov	sp, r7
    7086:	bd80      	pop	{r7, pc}
    7088:	00007219 	.word	0x00007219
    708c:	00006c15 	.word	0x00006c15
    7090:	00006de1 	.word	0x00006de1
    7094:	00006d59 	.word	0x00006d59

00007098 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7098:	b580      	push	{r7, lr}
    709a:	b082      	sub	sp, #8
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	68db      	ldr	r3, [r3, #12]
    70a4:	4618      	mov	r0, r3
    70a6:	4b03      	ldr	r3, [pc, #12]	; (70b4 <_tcc_timer_start+0x1c>)
    70a8:	4798      	blx	r3
}
    70aa:	bf00      	nop
    70ac:	3708      	adds	r7, #8
    70ae:	46bd      	mov	sp, r7
    70b0:	bd80      	pop	{r7, pc}
    70b2:	bf00      	nop
    70b4:	00006d81 	.word	0x00006d81

000070b8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    70b8:	b580      	push	{r7, lr}
    70ba:	b082      	sub	sp, #8
    70bc:	af00      	add	r7, sp, #0
    70be:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    70c0:	687b      	ldr	r3, [r7, #4]
    70c2:	68db      	ldr	r3, [r3, #12]
    70c4:	4618      	mov	r0, r3
    70c6:	4b03      	ldr	r3, [pc, #12]	; (70d4 <_tcc_timer_stop+0x1c>)
    70c8:	4798      	blx	r3
}
    70ca:	bf00      	nop
    70cc:	3708      	adds	r7, #8
    70ce:	46bd      	mov	sp, r7
    70d0:	bd80      	pop	{r7, pc}
    70d2:	bf00      	nop
    70d4:	00006de1 	.word	0x00006de1

000070d8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    70d8:	b580      	push	{r7, lr}
    70da:	b082      	sub	sp, #8
    70dc:	af00      	add	r7, sp, #0
    70de:	6078      	str	r0, [r7, #4]
    70e0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	68db      	ldr	r3, [r3, #12]
    70e6:	6839      	ldr	r1, [r7, #0]
    70e8:	4618      	mov	r0, r3
    70ea:	4b03      	ldr	r3, [pc, #12]	; (70f8 <_tcc_timer_set_period+0x20>)
    70ec:	4798      	blx	r3
}
    70ee:	bf00      	nop
    70f0:	3708      	adds	r7, #8
    70f2:	46bd      	mov	sp, r7
    70f4:	bd80      	pop	{r7, pc}
    70f6:	bf00      	nop
    70f8:	00006e99 	.word	0x00006e99

000070fc <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    70fc:	b580      	push	{r7, lr}
    70fe:	b082      	sub	sp, #8
    7100:	af00      	add	r7, sp, #0
    7102:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7104:	687b      	ldr	r3, [r7, #4]
    7106:	68db      	ldr	r3, [r3, #12]
    7108:	4618      	mov	r0, r3
    710a:	4b03      	ldr	r3, [pc, #12]	; (7118 <_tcc_timer_get_period+0x1c>)
    710c:	4798      	blx	r3
    710e:	4603      	mov	r3, r0
}
    7110:	4618      	mov	r0, r3
    7112:	3708      	adds	r7, #8
    7114:	46bd      	mov	sp, r7
    7116:	bd80      	pop	{r7, pc}
    7118:	00006ebd 	.word	0x00006ebd

0000711c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    711c:	b580      	push	{r7, lr}
    711e:	b082      	sub	sp, #8
    7120:	af00      	add	r7, sp, #0
    7122:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	68db      	ldr	r3, [r3, #12]
    7128:	4618      	mov	r0, r3
    712a:	4b03      	ldr	r3, [pc, #12]	; (7138 <_tcc_timer_is_started+0x1c>)
    712c:	4798      	blx	r3
    712e:	4603      	mov	r3, r0
}
    7130:	4618      	mov	r0, r3
    7132:	3708      	adds	r7, #8
    7134:	46bd      	mov	sp, r7
    7136:	bd80      	pop	{r7, pc}
    7138:	00006da9 	.word	0x00006da9

0000713c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    713c:	b480      	push	{r7}
    713e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7140:	4b02      	ldr	r3, [pc, #8]	; (714c <_tcc_get_timer+0x10>)
}
    7142:	4618      	mov	r0, r3
    7144:	46bd      	mov	sp, r7
    7146:	f85d 7b04 	ldr.w	r7, [sp], #4
    714a:	4770      	bx	lr
    714c:	200000f0 	.word	0x200000f0

00007150 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7150:	b580      	push	{r7, lr}
    7152:	b084      	sub	sp, #16
    7154:	af00      	add	r7, sp, #0
    7156:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7158:	687b      	ldr	r3, [r7, #4]
    715a:	68db      	ldr	r3, [r3, #12]
    715c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    715e:	68f8      	ldr	r0, [r7, #12]
    7160:	4b08      	ldr	r3, [pc, #32]	; (7184 <_tcc_timer_set_irq+0x34>)
    7162:	4798      	blx	r3
    7164:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7166:	68bb      	ldr	r3, [r7, #8]
    7168:	2b00      	cmp	r3, #0
    716a:	d006      	beq.n	717a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    716c:	68bb      	ldr	r3, [r7, #8]
    716e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7172:	b2db      	uxtb	r3, r3
    7174:	4618      	mov	r0, r3
    7176:	4b04      	ldr	r3, [pc, #16]	; (7188 <_tcc_timer_set_irq+0x38>)
    7178:	4798      	blx	r3
	}
}
    717a:	bf00      	nop
    717c:	3710      	adds	r7, #16
    717e:	46bd      	mov	sp, r7
    7180:	bd80      	pop	{r7, pc}
    7182:	bf00      	nop
    7184:	00007219 	.word	0x00007219
    7188:	00003bf5 	.word	0x00003bf5

0000718c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    718c:	b580      	push	{r7, lr}
    718e:	b084      	sub	sp, #16
    7190:	af00      	add	r7, sp, #0
    7192:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7194:	687b      	ldr	r3, [r7, #4]
    7196:	68db      	ldr	r3, [r3, #12]
    7198:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    719a:	68f8      	ldr	r0, [r7, #12]
    719c:	4b07      	ldr	r3, [pc, #28]	; (71bc <tcc_interrupt_handler+0x30>)
    719e:	4798      	blx	r3
    71a0:	4603      	mov	r3, r0
    71a2:	2b00      	cmp	r3, #0
    71a4:	d006      	beq.n	71b4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    71a6:	68f8      	ldr	r0, [r7, #12]
    71a8:	4b05      	ldr	r3, [pc, #20]	; (71c0 <tcc_interrupt_handler+0x34>)
    71aa:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    71ac:	687b      	ldr	r3, [r7, #4]
    71ae:	681b      	ldr	r3, [r3, #0]
    71b0:	6878      	ldr	r0, [r7, #4]
    71b2:	4798      	blx	r3
	}
}
    71b4:	bf00      	nop
    71b6:	3710      	adds	r7, #16
    71b8:	46bd      	mov	sp, r7
    71ba:	bd80      	pop	{r7, pc}
    71bc:	00006ce1 	.word	0x00006ce1
    71c0:	00006d07 	.word	0x00006d07

000071c4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    71c4:	b580      	push	{r7, lr}
    71c6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    71c8:	4b03      	ldr	r3, [pc, #12]	; (71d8 <TCC0_0_Handler+0x14>)
    71ca:	681b      	ldr	r3, [r3, #0]
    71cc:	4618      	mov	r0, r3
    71ce:	4b03      	ldr	r3, [pc, #12]	; (71dc <TCC0_0_Handler+0x18>)
    71d0:	4798      	blx	r3
}
    71d2:	bf00      	nop
    71d4:	bd80      	pop	{r7, pc}
    71d6:	bf00      	nop
    71d8:	20000970 	.word	0x20000970
    71dc:	0000718d 	.word	0x0000718d

000071e0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    71e0:	b580      	push	{r7, lr}
    71e2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    71e4:	4b03      	ldr	r3, [pc, #12]	; (71f4 <TCC1_0_Handler+0x14>)
    71e6:	681b      	ldr	r3, [r3, #0]
    71e8:	4618      	mov	r0, r3
    71ea:	4b03      	ldr	r3, [pc, #12]	; (71f8 <TCC1_0_Handler+0x18>)
    71ec:	4798      	blx	r3
}
    71ee:	bf00      	nop
    71f0:	bd80      	pop	{r7, pc}
    71f2:	bf00      	nop
    71f4:	20000974 	.word	0x20000974
    71f8:	0000718d 	.word	0x0000718d

000071fc <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    71fc:	b580      	push	{r7, lr}
    71fe:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    7200:	4b03      	ldr	r3, [pc, #12]	; (7210 <TCC2_0_Handler+0x14>)
    7202:	681b      	ldr	r3, [r3, #0]
    7204:	4618      	mov	r0, r3
    7206:	4b03      	ldr	r3, [pc, #12]	; (7214 <TCC2_0_Handler+0x18>)
    7208:	4798      	blx	r3
}
    720a:	bf00      	nop
    720c:	bd80      	pop	{r7, pc}
    720e:	bf00      	nop
    7210:	20000978 	.word	0x20000978
    7214:	0000718d 	.word	0x0000718d

00007218 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7218:	b480      	push	{r7}
    721a:	b085      	sub	sp, #20
    721c:	af00      	add	r7, sp, #0
    721e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7220:	2300      	movs	r3, #0
    7222:	73fb      	strb	r3, [r7, #15]
    7224:	e015      	b.n	7252 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7226:	7bfa      	ldrb	r2, [r7, #15]
    7228:	490f      	ldr	r1, [pc, #60]	; (7268 <_get_tcc_cfg+0x50>)
    722a:	4613      	mov	r3, r2
    722c:	005b      	lsls	r3, r3, #1
    722e:	4413      	add	r3, r2
    7230:	011b      	lsls	r3, r3, #4
    7232:	440b      	add	r3, r1
    7234:	681a      	ldr	r2, [r3, #0]
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	429a      	cmp	r2, r3
    723a:	d107      	bne.n	724c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    723c:	7bfa      	ldrb	r2, [r7, #15]
    723e:	4613      	mov	r3, r2
    7240:	005b      	lsls	r3, r3, #1
    7242:	4413      	add	r3, r2
    7244:	011b      	lsls	r3, r3, #4
    7246:	4a08      	ldr	r2, [pc, #32]	; (7268 <_get_tcc_cfg+0x50>)
    7248:	4413      	add	r3, r2
    724a:	e006      	b.n	725a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    724c:	7bfb      	ldrb	r3, [r7, #15]
    724e:	3301      	adds	r3, #1
    7250:	73fb      	strb	r3, [r7, #15]
    7252:	7bfb      	ldrb	r3, [r7, #15]
    7254:	2b02      	cmp	r3, #2
    7256:	d9e6      	bls.n	7226 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7258:	2300      	movs	r3, #0
}
    725a:	4618      	mov	r0, r3
    725c:	3714      	adds	r7, #20
    725e:	46bd      	mov	sp, r7
    7260:	f85d 7b04 	ldr.w	r7, [sp], #4
    7264:	4770      	bx	lr
    7266:	bf00      	nop
    7268:	20000060 	.word	0x20000060

0000726c <__NVIC_EnableIRQ>:
{
    726c:	b480      	push	{r7}
    726e:	b083      	sub	sp, #12
    7270:	af00      	add	r7, sp, #0
    7272:	4603      	mov	r3, r0
    7274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    727a:	2b00      	cmp	r3, #0
    727c:	db0b      	blt.n	7296 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    727e:	4909      	ldr	r1, [pc, #36]	; (72a4 <__NVIC_EnableIRQ+0x38>)
    7280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7284:	095b      	lsrs	r3, r3, #5
    7286:	88fa      	ldrh	r2, [r7, #6]
    7288:	f002 021f 	and.w	r2, r2, #31
    728c:	2001      	movs	r0, #1
    728e:	fa00 f202 	lsl.w	r2, r0, r2
    7292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7296:	bf00      	nop
    7298:	370c      	adds	r7, #12
    729a:	46bd      	mov	sp, r7
    729c:	f85d 7b04 	ldr.w	r7, [sp], #4
    72a0:	4770      	bx	lr
    72a2:	bf00      	nop
    72a4:	e000e100 	.word	0xe000e100

000072a8 <__NVIC_DisableIRQ>:
{
    72a8:	b480      	push	{r7}
    72aa:	b083      	sub	sp, #12
    72ac:	af00      	add	r7, sp, #0
    72ae:	4603      	mov	r3, r0
    72b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    72b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72b6:	2b00      	cmp	r3, #0
    72b8:	db10      	blt.n	72dc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    72ba:	490b      	ldr	r1, [pc, #44]	; (72e8 <__NVIC_DisableIRQ+0x40>)
    72bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72c0:	095b      	lsrs	r3, r3, #5
    72c2:	88fa      	ldrh	r2, [r7, #6]
    72c4:	f002 021f 	and.w	r2, r2, #31
    72c8:	2001      	movs	r0, #1
    72ca:	fa00 f202 	lsl.w	r2, r0, r2
    72ce:	3320      	adds	r3, #32
    72d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    72d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    72d8:	f3bf 8f6f 	isb	sy
}
    72dc:	bf00      	nop
    72de:	370c      	adds	r7, #12
    72e0:	46bd      	mov	sp, r7
    72e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72e6:	4770      	bx	lr
    72e8:	e000e100 	.word	0xe000e100

000072ec <__NVIC_ClearPendingIRQ>:
{
    72ec:	b480      	push	{r7}
    72ee:	b083      	sub	sp, #12
    72f0:	af00      	add	r7, sp, #0
    72f2:	4603      	mov	r3, r0
    72f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    72f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72fa:	2b00      	cmp	r3, #0
    72fc:	db0c      	blt.n	7318 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    72fe:	4909      	ldr	r1, [pc, #36]	; (7324 <__NVIC_ClearPendingIRQ+0x38>)
    7300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7304:	095b      	lsrs	r3, r3, #5
    7306:	88fa      	ldrh	r2, [r7, #6]
    7308:	f002 021f 	and.w	r2, r2, #31
    730c:	2001      	movs	r0, #1
    730e:	fa00 f202 	lsl.w	r2, r0, r2
    7312:	3360      	adds	r3, #96	; 0x60
    7314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7318:	bf00      	nop
    731a:	370c      	adds	r7, #12
    731c:	46bd      	mov	sp, r7
    731e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7322:	4770      	bx	lr
    7324:	e000e100 	.word	0xe000e100

00007328 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7328:	b480      	push	{r7}
    732a:	b083      	sub	sp, #12
    732c:	af00      	add	r7, sp, #0
    732e:	6078      	str	r0, [r7, #4]
    7330:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7332:	bf00      	nop
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	691a      	ldr	r2, [r3, #16]
    7338:	683b      	ldr	r3, [r7, #0]
    733a:	4013      	ands	r3, r2
    733c:	2b00      	cmp	r3, #0
    733e:	d1f9      	bne.n	7334 <hri_tc_wait_for_sync+0xc>
	};
}
    7340:	bf00      	nop
    7342:	370c      	adds	r7, #12
    7344:	46bd      	mov	sp, r7
    7346:	f85d 7b04 	ldr.w	r7, [sp], #4
    734a:	4770      	bx	lr

0000734c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    734c:	b480      	push	{r7}
    734e:	b083      	sub	sp, #12
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
    7354:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7356:	687b      	ldr	r3, [r7, #4]
    7358:	691a      	ldr	r2, [r3, #16]
    735a:	683b      	ldr	r3, [r7, #0]
    735c:	4013      	ands	r3, r2
    735e:	2b00      	cmp	r3, #0
    7360:	bf14      	ite	ne
    7362:	2301      	movne	r3, #1
    7364:	2300      	moveq	r3, #0
    7366:	b2db      	uxtb	r3, r3
}
    7368:	4618      	mov	r0, r3
    736a:	370c      	adds	r7, #12
    736c:	46bd      	mov	sp, r7
    736e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7372:	4770      	bx	lr

00007374 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7374:	b480      	push	{r7}
    7376:	b083      	sub	sp, #12
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    737c:	687b      	ldr	r3, [r7, #4]
    737e:	7a9b      	ldrb	r3, [r3, #10]
    7380:	b2db      	uxtb	r3, r3
    7382:	f003 0301 	and.w	r3, r3, #1
    7386:	2b00      	cmp	r3, #0
    7388:	bf14      	ite	ne
    738a:	2301      	movne	r3, #1
    738c:	2300      	moveq	r3, #0
    738e:	b2db      	uxtb	r3, r3
}
    7390:	4618      	mov	r0, r3
    7392:	370c      	adds	r7, #12
    7394:	46bd      	mov	sp, r7
    7396:	f85d 7b04 	ldr.w	r7, [sp], #4
    739a:	4770      	bx	lr

0000739c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    739c:	b480      	push	{r7}
    739e:	b083      	sub	sp, #12
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    73a4:	687b      	ldr	r3, [r7, #4]
    73a6:	2201      	movs	r2, #1
    73a8:	729a      	strb	r2, [r3, #10]
}
    73aa:	bf00      	nop
    73ac:	370c      	adds	r7, #12
    73ae:	46bd      	mov	sp, r7
    73b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    73b4:	4770      	bx	lr

000073b6 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    73b6:	b480      	push	{r7}
    73b8:	b083      	sub	sp, #12
    73ba:	af00      	add	r7, sp, #0
    73bc:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    73be:	687b      	ldr	r3, [r7, #4]
    73c0:	2202      	movs	r2, #2
    73c2:	729a      	strb	r2, [r3, #10]
}
    73c4:	bf00      	nop
    73c6:	370c      	adds	r7, #12
    73c8:	46bd      	mov	sp, r7
    73ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ce:	4770      	bx	lr

000073d0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    73d0:	b480      	push	{r7}
    73d2:	b083      	sub	sp, #12
    73d4:	af00      	add	r7, sp, #0
    73d6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    73d8:	687b      	ldr	r3, [r7, #4]
    73da:	2201      	movs	r2, #1
    73dc:	725a      	strb	r2, [r3, #9]
}
    73de:	bf00      	nop
    73e0:	370c      	adds	r7, #12
    73e2:	46bd      	mov	sp, r7
    73e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73e8:	4770      	bx	lr

000073ea <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    73ea:	b480      	push	{r7}
    73ec:	b083      	sub	sp, #12
    73ee:	af00      	add	r7, sp, #0
    73f0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    73f2:	687b      	ldr	r3, [r7, #4]
    73f4:	7a5b      	ldrb	r3, [r3, #9]
    73f6:	b2db      	uxtb	r3, r3
    73f8:	085b      	lsrs	r3, r3, #1
    73fa:	f003 0301 	and.w	r3, r3, #1
    73fe:	2b00      	cmp	r3, #0
    7400:	bf14      	ite	ne
    7402:	2301      	movne	r3, #1
    7404:	2300      	moveq	r3, #0
    7406:	b2db      	uxtb	r3, r3
}
    7408:	4618      	mov	r0, r3
    740a:	370c      	adds	r7, #12
    740c:	46bd      	mov	sp, r7
    740e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7412:	4770      	bx	lr

00007414 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7414:	b580      	push	{r7, lr}
    7416:	b082      	sub	sp, #8
    7418:	af00      	add	r7, sp, #0
    741a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	681b      	ldr	r3, [r3, #0]
    7420:	f043 0201 	orr.w	r2, r3, #1
    7424:	687b      	ldr	r3, [r7, #4]
    7426:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7428:	2101      	movs	r1, #1
    742a:	6878      	ldr	r0, [r7, #4]
    742c:	4b02      	ldr	r3, [pc, #8]	; (7438 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    742e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7430:	bf00      	nop
    7432:	3708      	adds	r7, #8
    7434:	46bd      	mov	sp, r7
    7436:	bd80      	pop	{r7, pc}
    7438:	00007329 	.word	0x00007329

0000743c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    743c:	b580      	push	{r7, lr}
    743e:	b082      	sub	sp, #8
    7440:	af00      	add	r7, sp, #0
    7442:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7444:	687b      	ldr	r3, [r7, #4]
    7446:	681b      	ldr	r3, [r3, #0]
    7448:	f043 0202 	orr.w	r2, r3, #2
    744c:	687b      	ldr	r3, [r7, #4]
    744e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7450:	2103      	movs	r1, #3
    7452:	6878      	ldr	r0, [r7, #4]
    7454:	4b02      	ldr	r3, [pc, #8]	; (7460 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7456:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7458:	bf00      	nop
    745a:	3708      	adds	r7, #8
    745c:	46bd      	mov	sp, r7
    745e:	bd80      	pop	{r7, pc}
    7460:	00007329 	.word	0x00007329

00007464 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7464:	b580      	push	{r7, lr}
    7466:	b084      	sub	sp, #16
    7468:	af00      	add	r7, sp, #0
    746a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    746c:	2103      	movs	r1, #3
    746e:	6878      	ldr	r0, [r7, #4]
    7470:	4b09      	ldr	r3, [pc, #36]	; (7498 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7472:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7474:	687b      	ldr	r3, [r7, #4]
    7476:	681b      	ldr	r3, [r3, #0]
    7478:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    747a:	68fb      	ldr	r3, [r7, #12]
    747c:	085b      	lsrs	r3, r3, #1
    747e:	f003 0301 	and.w	r3, r3, #1
    7482:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7484:	68fb      	ldr	r3, [r7, #12]
    7486:	2b00      	cmp	r3, #0
    7488:	bf14      	ite	ne
    748a:	2301      	movne	r3, #1
    748c:	2300      	moveq	r3, #0
    748e:	b2db      	uxtb	r3, r3
}
    7490:	4618      	mov	r0, r3
    7492:	3710      	adds	r7, #16
    7494:	46bd      	mov	sp, r7
    7496:	bd80      	pop	{r7, pc}
    7498:	00007329 	.word	0x00007329

0000749c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    749c:	b580      	push	{r7, lr}
    749e:	b082      	sub	sp, #8
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    74a4:	687b      	ldr	r3, [r7, #4]
    74a6:	681b      	ldr	r3, [r3, #0]
    74a8:	f023 0202 	bic.w	r2, r3, #2
    74ac:	687b      	ldr	r3, [r7, #4]
    74ae:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    74b0:	2103      	movs	r1, #3
    74b2:	6878      	ldr	r0, [r7, #4]
    74b4:	4b02      	ldr	r3, [pc, #8]	; (74c0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    74b6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    74b8:	bf00      	nop
    74ba:	3708      	adds	r7, #8
    74bc:	46bd      	mov	sp, r7
    74be:	bd80      	pop	{r7, pc}
    74c0:	00007329 	.word	0x00007329

000074c4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    74c4:	b480      	push	{r7}
    74c6:	b085      	sub	sp, #20
    74c8:	af00      	add	r7, sp, #0
    74ca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    74cc:	687b      	ldr	r3, [r7, #4]
    74ce:	681b      	ldr	r3, [r3, #0]
    74d0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    74d2:	68fb      	ldr	r3, [r7, #12]
    74d4:	089b      	lsrs	r3, r3, #2
    74d6:	f003 0303 	and.w	r3, r3, #3
    74da:	60fb      	str	r3, [r7, #12]
	return tmp;
    74dc:	68fb      	ldr	r3, [r7, #12]
}
    74de:	4618      	mov	r0, r3
    74e0:	3714      	adds	r7, #20
    74e2:	46bd      	mov	sp, r7
    74e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    74e8:	4770      	bx	lr
	...

000074ec <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    74ec:	b580      	push	{r7, lr}
    74ee:	b084      	sub	sp, #16
    74f0:	af00      	add	r7, sp, #0
    74f2:	6078      	str	r0, [r7, #4]
    74f4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    74f6:	2103      	movs	r1, #3
    74f8:	6878      	ldr	r0, [r7, #4]
    74fa:	4b07      	ldr	r3, [pc, #28]	; (7518 <hri_tc_get_CTRLA_reg+0x2c>)
    74fc:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    74fe:	687b      	ldr	r3, [r7, #4]
    7500:	681b      	ldr	r3, [r3, #0]
    7502:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7504:	68fa      	ldr	r2, [r7, #12]
    7506:	683b      	ldr	r3, [r7, #0]
    7508:	4013      	ands	r3, r2
    750a:	60fb      	str	r3, [r7, #12]
	return tmp;
    750c:	68fb      	ldr	r3, [r7, #12]
}
    750e:	4618      	mov	r0, r3
    7510:	3710      	adds	r7, #16
    7512:	46bd      	mov	sp, r7
    7514:	bd80      	pop	{r7, pc}
    7516:	bf00      	nop
    7518:	00007329 	.word	0x00007329

0000751c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    751c:	b580      	push	{r7, lr}
    751e:	b082      	sub	sp, #8
    7520:	af00      	add	r7, sp, #0
    7522:	6078      	str	r0, [r7, #4]
    7524:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7526:	687b      	ldr	r3, [r7, #4]
    7528:	683a      	ldr	r2, [r7, #0]
    752a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    752c:	2103      	movs	r1, #3
    752e:	6878      	ldr	r0, [r7, #4]
    7530:	4b02      	ldr	r3, [pc, #8]	; (753c <hri_tc_write_CTRLA_reg+0x20>)
    7532:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7534:	bf00      	nop
    7536:	3708      	adds	r7, #8
    7538:	46bd      	mov	sp, r7
    753a:	bd80      	pop	{r7, pc}
    753c:	00007329 	.word	0x00007329

00007540 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7540:	b480      	push	{r7}
    7542:	b083      	sub	sp, #12
    7544:	af00      	add	r7, sp, #0
    7546:	6078      	str	r0, [r7, #4]
    7548:	460b      	mov	r3, r1
    754a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	887a      	ldrh	r2, [r7, #2]
    7550:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7552:	bf00      	nop
    7554:	370c      	adds	r7, #12
    7556:	46bd      	mov	sp, r7
    7558:	f85d 7b04 	ldr.w	r7, [sp], #4
    755c:	4770      	bx	lr

0000755e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    755e:	b480      	push	{r7}
    7560:	b083      	sub	sp, #12
    7562:	af00      	add	r7, sp, #0
    7564:	6078      	str	r0, [r7, #4]
    7566:	460b      	mov	r3, r1
    7568:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	78fa      	ldrb	r2, [r7, #3]
    756e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7570:	bf00      	nop
    7572:	370c      	adds	r7, #12
    7574:	46bd      	mov	sp, r7
    7576:	f85d 7b04 	ldr.w	r7, [sp], #4
    757a:	4770      	bx	lr

0000757c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    757c:	b480      	push	{r7}
    757e:	b083      	sub	sp, #12
    7580:	af00      	add	r7, sp, #0
    7582:	6078      	str	r0, [r7, #4]
    7584:	460b      	mov	r3, r1
    7586:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7588:	687b      	ldr	r3, [r7, #4]
    758a:	78fa      	ldrb	r2, [r7, #3]
    758c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    758e:	bf00      	nop
    7590:	370c      	adds	r7, #12
    7592:	46bd      	mov	sp, r7
    7594:	f85d 7b04 	ldr.w	r7, [sp], #4
    7598:	4770      	bx	lr
	...

0000759c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    759c:	b580      	push	{r7, lr}
    759e:	b082      	sub	sp, #8
    75a0:	af00      	add	r7, sp, #0
    75a2:	6078      	str	r0, [r7, #4]
    75a4:	460b      	mov	r3, r1
    75a6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    75a8:	687b      	ldr	r3, [r7, #4]
    75aa:	78fa      	ldrb	r2, [r7, #3]
    75ac:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    75ae:	2120      	movs	r1, #32
    75b0:	6878      	ldr	r0, [r7, #4]
    75b2:	4b03      	ldr	r3, [pc, #12]	; (75c0 <hri_tccount8_write_PER_reg+0x24>)
    75b4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    75b6:	bf00      	nop
    75b8:	3708      	adds	r7, #8
    75ba:	46bd      	mov	sp, r7
    75bc:	bd80      	pop	{r7, pc}
    75be:	bf00      	nop
    75c0:	00007329 	.word	0x00007329

000075c4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    75c4:	b580      	push	{r7, lr}
    75c6:	b082      	sub	sp, #8
    75c8:	af00      	add	r7, sp, #0
    75ca:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    75cc:	2120      	movs	r1, #32
    75ce:	6878      	ldr	r0, [r7, #4]
    75d0:	4b04      	ldr	r3, [pc, #16]	; (75e4 <hri_tccount8_read_PER_reg+0x20>)
    75d2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    75d4:	687b      	ldr	r3, [r7, #4]
    75d6:	7edb      	ldrb	r3, [r3, #27]
    75d8:	b2db      	uxtb	r3, r3
}
    75da:	4618      	mov	r0, r3
    75dc:	3708      	adds	r7, #8
    75de:	46bd      	mov	sp, r7
    75e0:	bd80      	pop	{r7, pc}
    75e2:	bf00      	nop
    75e4:	00007329 	.word	0x00007329

000075e8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    75e8:	b580      	push	{r7, lr}
    75ea:	b082      	sub	sp, #8
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
    75f0:	460b      	mov	r3, r1
    75f2:	70fb      	strb	r3, [r7, #3]
    75f4:	4613      	mov	r3, r2
    75f6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    75f8:	78fb      	ldrb	r3, [r7, #3]
    75fa:	687a      	ldr	r2, [r7, #4]
    75fc:	4413      	add	r3, r2
    75fe:	78ba      	ldrb	r2, [r7, #2]
    7600:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7602:	21c0      	movs	r1, #192	; 0xc0
    7604:	6878      	ldr	r0, [r7, #4]
    7606:	4b03      	ldr	r3, [pc, #12]	; (7614 <hri_tccount8_write_CC_reg+0x2c>)
    7608:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    760a:	bf00      	nop
    760c:	3708      	adds	r7, #8
    760e:	46bd      	mov	sp, r7
    7610:	bd80      	pop	{r7, pc}
    7612:	bf00      	nop
    7614:	00007329 	.word	0x00007329

00007618 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7618:	b580      	push	{r7, lr}
    761a:	b082      	sub	sp, #8
    761c:	af00      	add	r7, sp, #0
    761e:	6078      	str	r0, [r7, #4]
    7620:	460b      	mov	r3, r1
    7622:	70fb      	strb	r3, [r7, #3]
    7624:	4613      	mov	r3, r2
    7626:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7628:	78fb      	ldrb	r3, [r7, #3]
    762a:	687a      	ldr	r2, [r7, #4]
    762c:	330c      	adds	r3, #12
    762e:	005b      	lsls	r3, r3, #1
    7630:	4413      	add	r3, r2
    7632:	883a      	ldrh	r2, [r7, #0]
    7634:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7636:	21c0      	movs	r1, #192	; 0xc0
    7638:	6878      	ldr	r0, [r7, #4]
    763a:	4b03      	ldr	r3, [pc, #12]	; (7648 <hri_tccount16_write_CC_reg+0x30>)
    763c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    763e:	bf00      	nop
    7640:	3708      	adds	r7, #8
    7642:	46bd      	mov	sp, r7
    7644:	bd80      	pop	{r7, pc}
    7646:	bf00      	nop
    7648:	00007329 	.word	0x00007329

0000764c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    764c:	b580      	push	{r7, lr}
    764e:	b082      	sub	sp, #8
    7650:	af00      	add	r7, sp, #0
    7652:	6078      	str	r0, [r7, #4]
    7654:	460b      	mov	r3, r1
    7656:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7658:	21c0      	movs	r1, #192	; 0xc0
    765a:	6878      	ldr	r0, [r7, #4]
    765c:	4b06      	ldr	r3, [pc, #24]	; (7678 <hri_tccount16_read_CC_reg+0x2c>)
    765e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7660:	78fb      	ldrb	r3, [r7, #3]
    7662:	687a      	ldr	r2, [r7, #4]
    7664:	330c      	adds	r3, #12
    7666:	005b      	lsls	r3, r3, #1
    7668:	4413      	add	r3, r2
    766a:	889b      	ldrh	r3, [r3, #4]
    766c:	b29b      	uxth	r3, r3
}
    766e:	4618      	mov	r0, r3
    7670:	3708      	adds	r7, #8
    7672:	46bd      	mov	sp, r7
    7674:	bd80      	pop	{r7, pc}
    7676:	bf00      	nop
    7678:	00007329 	.word	0x00007329

0000767c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    767c:	b580      	push	{r7, lr}
    767e:	b084      	sub	sp, #16
    7680:	af00      	add	r7, sp, #0
    7682:	60f8      	str	r0, [r7, #12]
    7684:	460b      	mov	r3, r1
    7686:	607a      	str	r2, [r7, #4]
    7688:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    768a:	7afb      	ldrb	r3, [r7, #11]
    768c:	68fa      	ldr	r2, [r7, #12]
    768e:	3306      	adds	r3, #6
    7690:	009b      	lsls	r3, r3, #2
    7692:	4413      	add	r3, r2
    7694:	687a      	ldr	r2, [r7, #4]
    7696:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7698:	21c0      	movs	r1, #192	; 0xc0
    769a:	68f8      	ldr	r0, [r7, #12]
    769c:	4b02      	ldr	r3, [pc, #8]	; (76a8 <hri_tccount32_write_CC_reg+0x2c>)
    769e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    76a0:	bf00      	nop
    76a2:	3710      	adds	r7, #16
    76a4:	46bd      	mov	sp, r7
    76a6:	bd80      	pop	{r7, pc}
    76a8:	00007329 	.word	0x00007329

000076ac <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    76ac:	b580      	push	{r7, lr}
    76ae:	b082      	sub	sp, #8
    76b0:	af00      	add	r7, sp, #0
    76b2:	6078      	str	r0, [r7, #4]
    76b4:	460b      	mov	r3, r1
    76b6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    76b8:	21c0      	movs	r1, #192	; 0xc0
    76ba:	6878      	ldr	r0, [r7, #4]
    76bc:	4b05      	ldr	r3, [pc, #20]	; (76d4 <hri_tccount32_read_CC_reg+0x28>)
    76be:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    76c0:	78fb      	ldrb	r3, [r7, #3]
    76c2:	687a      	ldr	r2, [r7, #4]
    76c4:	3306      	adds	r3, #6
    76c6:	009b      	lsls	r3, r3, #2
    76c8:	4413      	add	r3, r2
    76ca:	685b      	ldr	r3, [r3, #4]
}
    76cc:	4618      	mov	r0, r3
    76ce:	3708      	adds	r7, #8
    76d0:	46bd      	mov	sp, r7
    76d2:	bd80      	pop	{r7, pc}
    76d4:	00007329 	.word	0x00007329

000076d8 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    76d8:	b580      	push	{r7, lr}
    76da:	b084      	sub	sp, #16
    76dc:	af00      	add	r7, sp, #0
    76de:	6078      	str	r0, [r7, #4]
    76e0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    76e2:	6838      	ldr	r0, [r7, #0]
    76e4:	4b93      	ldr	r3, [pc, #588]	; (7934 <_tc_timer_init+0x25c>)
    76e6:	4798      	blx	r3
    76e8:	4603      	mov	r3, r0
    76ea:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    76ec:	687b      	ldr	r3, [r7, #4]
    76ee:	683a      	ldr	r2, [r7, #0]
    76f0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    76f2:	22a4      	movs	r2, #164	; 0xa4
    76f4:	4990      	ldr	r1, [pc, #576]	; (7938 <_tc_timer_init+0x260>)
    76f6:	2001      	movs	r0, #1
    76f8:	4b90      	ldr	r3, [pc, #576]	; (793c <_tc_timer_init+0x264>)
    76fa:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    76fc:	2101      	movs	r1, #1
    76fe:	6838      	ldr	r0, [r7, #0]
    7700:	4b8f      	ldr	r3, [pc, #572]	; (7940 <_tc_timer_init+0x268>)
    7702:	4798      	blx	r3
    7704:	4603      	mov	r3, r0
    7706:	f083 0301 	eor.w	r3, r3, #1
    770a:	b2db      	uxtb	r3, r3
    770c:	2b00      	cmp	r3, #0
    770e:	d011      	beq.n	7734 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7710:	2102      	movs	r1, #2
    7712:	6838      	ldr	r0, [r7, #0]
    7714:	4b8b      	ldr	r3, [pc, #556]	; (7944 <_tc_timer_init+0x26c>)
    7716:	4798      	blx	r3
    7718:	4603      	mov	r3, r0
    771a:	2b00      	cmp	r3, #0
    771c:	d006      	beq.n	772c <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    771e:	6838      	ldr	r0, [r7, #0]
    7720:	4b89      	ldr	r3, [pc, #548]	; (7948 <_tc_timer_init+0x270>)
    7722:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7724:	2102      	movs	r1, #2
    7726:	6838      	ldr	r0, [r7, #0]
    7728:	4b88      	ldr	r3, [pc, #544]	; (794c <_tc_timer_init+0x274>)
    772a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    772c:	2101      	movs	r1, #1
    772e:	6838      	ldr	r0, [r7, #0]
    7730:	4b87      	ldr	r3, [pc, #540]	; (7950 <_tc_timer_init+0x278>)
    7732:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7734:	2101      	movs	r1, #1
    7736:	6838      	ldr	r0, [r7, #0]
    7738:	4b84      	ldr	r3, [pc, #528]	; (794c <_tc_timer_init+0x274>)
    773a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    773c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7740:	4984      	ldr	r1, [pc, #528]	; (7954 <_tc_timer_init+0x27c>)
    7742:	4613      	mov	r3, r2
    7744:	009b      	lsls	r3, r3, #2
    7746:	4413      	add	r3, r2
    7748:	009b      	lsls	r3, r3, #2
    774a:	440b      	add	r3, r1
    774c:	3304      	adds	r3, #4
    774e:	681b      	ldr	r3, [r3, #0]
    7750:	4619      	mov	r1, r3
    7752:	6838      	ldr	r0, [r7, #0]
    7754:	4b7e      	ldr	r3, [pc, #504]	; (7950 <_tc_timer_init+0x278>)
    7756:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7758:	f997 200f 	ldrsb.w	r2, [r7, #15]
    775c:	497d      	ldr	r1, [pc, #500]	; (7954 <_tc_timer_init+0x27c>)
    775e:	4613      	mov	r3, r2
    7760:	009b      	lsls	r3, r3, #2
    7762:	4413      	add	r3, r2
    7764:	009b      	lsls	r3, r3, #2
    7766:	440b      	add	r3, r1
    7768:	330a      	adds	r3, #10
    776a:	781b      	ldrb	r3, [r3, #0]
    776c:	4619      	mov	r1, r3
    776e:	6838      	ldr	r0, [r7, #0]
    7770:	4b79      	ldr	r3, [pc, #484]	; (7958 <_tc_timer_init+0x280>)
    7772:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7774:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7778:	4976      	ldr	r1, [pc, #472]	; (7954 <_tc_timer_init+0x27c>)
    777a:	4613      	mov	r3, r2
    777c:	009b      	lsls	r3, r3, #2
    777e:	4413      	add	r3, r2
    7780:	009b      	lsls	r3, r3, #2
    7782:	440b      	add	r3, r1
    7784:	3308      	adds	r3, #8
    7786:	881b      	ldrh	r3, [r3, #0]
    7788:	4619      	mov	r1, r3
    778a:	6838      	ldr	r0, [r7, #0]
    778c:	4b73      	ldr	r3, [pc, #460]	; (795c <_tc_timer_init+0x284>)
    778e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7790:	2101      	movs	r1, #1
    7792:	6838      	ldr	r0, [r7, #0]
    7794:	4b72      	ldr	r3, [pc, #456]	; (7960 <_tc_timer_init+0x288>)
    7796:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7798:	f997 200f 	ldrsb.w	r2, [r7, #15]
    779c:	496d      	ldr	r1, [pc, #436]	; (7954 <_tc_timer_init+0x27c>)
    779e:	4613      	mov	r3, r2
    77a0:	009b      	lsls	r3, r3, #2
    77a2:	4413      	add	r3, r2
    77a4:	009b      	lsls	r3, r3, #2
    77a6:	440b      	add	r3, r1
    77a8:	3304      	adds	r3, #4
    77aa:	681b      	ldr	r3, [r3, #0]
    77ac:	f003 030c 	and.w	r3, r3, #12
    77b0:	2b08      	cmp	r3, #8
    77b2:	d11e      	bne.n	77f2 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    77b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77b8:	4966      	ldr	r1, [pc, #408]	; (7954 <_tc_timer_init+0x27c>)
    77ba:	4613      	mov	r3, r2
    77bc:	009b      	lsls	r3, r3, #2
    77be:	4413      	add	r3, r2
    77c0:	009b      	lsls	r3, r3, #2
    77c2:	440b      	add	r3, r1
    77c4:	330c      	adds	r3, #12
    77c6:	681b      	ldr	r3, [r3, #0]
    77c8:	461a      	mov	r2, r3
    77ca:	2100      	movs	r1, #0
    77cc:	6838      	ldr	r0, [r7, #0]
    77ce:	4b65      	ldr	r3, [pc, #404]	; (7964 <_tc_timer_init+0x28c>)
    77d0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    77d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77d6:	495f      	ldr	r1, [pc, #380]	; (7954 <_tc_timer_init+0x27c>)
    77d8:	4613      	mov	r3, r2
    77da:	009b      	lsls	r3, r3, #2
    77dc:	4413      	add	r3, r2
    77de:	009b      	lsls	r3, r3, #2
    77e0:	440b      	add	r3, r1
    77e2:	3310      	adds	r3, #16
    77e4:	681b      	ldr	r3, [r3, #0]
    77e6:	461a      	mov	r2, r3
    77e8:	2101      	movs	r1, #1
    77ea:	6838      	ldr	r0, [r7, #0]
    77ec:	4b5d      	ldr	r3, [pc, #372]	; (7964 <_tc_timer_init+0x28c>)
    77ee:	4798      	blx	r3
    77f0:	e06a      	b.n	78c8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    77f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77f6:	4957      	ldr	r1, [pc, #348]	; (7954 <_tc_timer_init+0x27c>)
    77f8:	4613      	mov	r3, r2
    77fa:	009b      	lsls	r3, r3, #2
    77fc:	4413      	add	r3, r2
    77fe:	009b      	lsls	r3, r3, #2
    7800:	440b      	add	r3, r1
    7802:	3304      	adds	r3, #4
    7804:	681b      	ldr	r3, [r3, #0]
    7806:	f003 030c 	and.w	r3, r3, #12
    780a:	2b00      	cmp	r3, #0
    780c:	d120      	bne.n	7850 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    780e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7812:	4950      	ldr	r1, [pc, #320]	; (7954 <_tc_timer_init+0x27c>)
    7814:	4613      	mov	r3, r2
    7816:	009b      	lsls	r3, r3, #2
    7818:	4413      	add	r3, r2
    781a:	009b      	lsls	r3, r3, #2
    781c:	440b      	add	r3, r1
    781e:	330c      	adds	r3, #12
    7820:	681b      	ldr	r3, [r3, #0]
    7822:	b29b      	uxth	r3, r3
    7824:	461a      	mov	r2, r3
    7826:	2100      	movs	r1, #0
    7828:	6838      	ldr	r0, [r7, #0]
    782a:	4b4f      	ldr	r3, [pc, #316]	; (7968 <_tc_timer_init+0x290>)
    782c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    782e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7832:	4948      	ldr	r1, [pc, #288]	; (7954 <_tc_timer_init+0x27c>)
    7834:	4613      	mov	r3, r2
    7836:	009b      	lsls	r3, r3, #2
    7838:	4413      	add	r3, r2
    783a:	009b      	lsls	r3, r3, #2
    783c:	440b      	add	r3, r1
    783e:	3310      	adds	r3, #16
    7840:	681b      	ldr	r3, [r3, #0]
    7842:	b29b      	uxth	r3, r3
    7844:	461a      	mov	r2, r3
    7846:	2101      	movs	r1, #1
    7848:	6838      	ldr	r0, [r7, #0]
    784a:	4b47      	ldr	r3, [pc, #284]	; (7968 <_tc_timer_init+0x290>)
    784c:	4798      	blx	r3
    784e:	e03b      	b.n	78c8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7850:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7854:	493f      	ldr	r1, [pc, #252]	; (7954 <_tc_timer_init+0x27c>)
    7856:	4613      	mov	r3, r2
    7858:	009b      	lsls	r3, r3, #2
    785a:	4413      	add	r3, r2
    785c:	009b      	lsls	r3, r3, #2
    785e:	440b      	add	r3, r1
    7860:	3304      	adds	r3, #4
    7862:	681b      	ldr	r3, [r3, #0]
    7864:	f003 030c 	and.w	r3, r3, #12
    7868:	2b04      	cmp	r3, #4
    786a:	d12d      	bne.n	78c8 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    786c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7870:	4938      	ldr	r1, [pc, #224]	; (7954 <_tc_timer_init+0x27c>)
    7872:	4613      	mov	r3, r2
    7874:	009b      	lsls	r3, r3, #2
    7876:	4413      	add	r3, r2
    7878:	009b      	lsls	r3, r3, #2
    787a:	440b      	add	r3, r1
    787c:	330c      	adds	r3, #12
    787e:	681b      	ldr	r3, [r3, #0]
    7880:	b2db      	uxtb	r3, r3
    7882:	461a      	mov	r2, r3
    7884:	2100      	movs	r1, #0
    7886:	6838      	ldr	r0, [r7, #0]
    7888:	4b38      	ldr	r3, [pc, #224]	; (796c <_tc_timer_init+0x294>)
    788a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    788c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7890:	4930      	ldr	r1, [pc, #192]	; (7954 <_tc_timer_init+0x27c>)
    7892:	4613      	mov	r3, r2
    7894:	009b      	lsls	r3, r3, #2
    7896:	4413      	add	r3, r2
    7898:	009b      	lsls	r3, r3, #2
    789a:	440b      	add	r3, r1
    789c:	3310      	adds	r3, #16
    789e:	681b      	ldr	r3, [r3, #0]
    78a0:	b2db      	uxtb	r3, r3
    78a2:	461a      	mov	r2, r3
    78a4:	2101      	movs	r1, #1
    78a6:	6838      	ldr	r0, [r7, #0]
    78a8:	4b30      	ldr	r3, [pc, #192]	; (796c <_tc_timer_init+0x294>)
    78aa:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    78ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78b0:	4928      	ldr	r1, [pc, #160]	; (7954 <_tc_timer_init+0x27c>)
    78b2:	4613      	mov	r3, r2
    78b4:	009b      	lsls	r3, r3, #2
    78b6:	4413      	add	r3, r2
    78b8:	009b      	lsls	r3, r3, #2
    78ba:	440b      	add	r3, r1
    78bc:	330b      	adds	r3, #11
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	4619      	mov	r1, r3
    78c2:	6838      	ldr	r0, [r7, #0]
    78c4:	4b2a      	ldr	r3, [pc, #168]	; (7970 <_tc_timer_init+0x298>)
    78c6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    78c8:	6838      	ldr	r0, [r7, #0]
    78ca:	4b2a      	ldr	r3, [pc, #168]	; (7974 <_tc_timer_init+0x29c>)
    78cc:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    78ce:	6879      	ldr	r1, [r7, #4]
    78d0:	6838      	ldr	r0, [r7, #0]
    78d2:	4b29      	ldr	r3, [pc, #164]	; (7978 <_tc_timer_init+0x2a0>)
    78d4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    78d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78da:	491e      	ldr	r1, [pc, #120]	; (7954 <_tc_timer_init+0x27c>)
    78dc:	4613      	mov	r3, r2
    78de:	009b      	lsls	r3, r3, #2
    78e0:	4413      	add	r3, r2
    78e2:	009b      	lsls	r3, r3, #2
    78e4:	440b      	add	r3, r1
    78e6:	3302      	adds	r3, #2
    78e8:	f9b3 3000 	ldrsh.w	r3, [r3]
    78ec:	4618      	mov	r0, r3
    78ee:	4b23      	ldr	r3, [pc, #140]	; (797c <_tc_timer_init+0x2a4>)
    78f0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    78f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78f6:	4917      	ldr	r1, [pc, #92]	; (7954 <_tc_timer_init+0x27c>)
    78f8:	4613      	mov	r3, r2
    78fa:	009b      	lsls	r3, r3, #2
    78fc:	4413      	add	r3, r2
    78fe:	009b      	lsls	r3, r3, #2
    7900:	440b      	add	r3, r1
    7902:	3302      	adds	r3, #2
    7904:	f9b3 3000 	ldrsh.w	r3, [r3]
    7908:	4618      	mov	r0, r3
    790a:	4b1d      	ldr	r3, [pc, #116]	; (7980 <_tc_timer_init+0x2a8>)
    790c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    790e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7912:	4910      	ldr	r1, [pc, #64]	; (7954 <_tc_timer_init+0x27c>)
    7914:	4613      	mov	r3, r2
    7916:	009b      	lsls	r3, r3, #2
    7918:	4413      	add	r3, r2
    791a:	009b      	lsls	r3, r3, #2
    791c:	440b      	add	r3, r1
    791e:	3302      	adds	r3, #2
    7920:	f9b3 3000 	ldrsh.w	r3, [r3]
    7924:	4618      	mov	r0, r3
    7926:	4b17      	ldr	r3, [pc, #92]	; (7984 <_tc_timer_init+0x2ac>)
    7928:	4798      	blx	r3

	return ERR_NONE;
    792a:	2300      	movs	r3, #0
}
    792c:	4618      	mov	r0, r3
    792e:	3710      	adds	r7, #16
    7930:	46bd      	mov	sp, r7
    7932:	bd80      	pop	{r7, pc}
    7934:	00007f29 	.word	0x00007f29
    7938:	0000ef50 	.word	0x0000ef50
    793c:	000033ad 	.word	0x000033ad
    7940:	0000734d 	.word	0x0000734d
    7944:	000074ed 	.word	0x000074ed
    7948:	0000749d 	.word	0x0000749d
    794c:	00007329 	.word	0x00007329
    7950:	0000751d 	.word	0x0000751d
    7954:	20000110 	.word	0x20000110
    7958:	0000757d 	.word	0x0000757d
    795c:	00007541 	.word	0x00007541
    7960:	0000755f 	.word	0x0000755f
    7964:	0000767d 	.word	0x0000767d
    7968:	00007619 	.word	0x00007619
    796c:	000075e9 	.word	0x000075e9
    7970:	0000759d 	.word	0x0000759d
    7974:	000073d1 	.word	0x000073d1
    7978:	00007f91 	.word	0x00007f91
    797c:	000072a9 	.word	0x000072a9
    7980:	000072ed 	.word	0x000072ed
    7984:	0000726d 	.word	0x0000726d

00007988 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7988:	b580      	push	{r7, lr}
    798a:	b084      	sub	sp, #16
    798c:	af00      	add	r7, sp, #0
    798e:	6078      	str	r0, [r7, #4]
    7990:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7992:	6838      	ldr	r0, [r7, #0]
    7994:	4b73      	ldr	r3, [pc, #460]	; (7b64 <_pwm_init+0x1dc>)
    7996:	4798      	blx	r3
    7998:	4603      	mov	r3, r0
    799a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	683a      	ldr	r2, [r7, #0]
    79a0:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    79a2:	2101      	movs	r1, #1
    79a4:	6838      	ldr	r0, [r7, #0]
    79a6:	4b70      	ldr	r3, [pc, #448]	; (7b68 <_pwm_init+0x1e0>)
    79a8:	4798      	blx	r3
    79aa:	4603      	mov	r3, r0
    79ac:	f083 0301 	eor.w	r3, r3, #1
    79b0:	b2db      	uxtb	r3, r3
    79b2:	2b00      	cmp	r3, #0
    79b4:	d011      	beq.n	79da <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    79b6:	2102      	movs	r1, #2
    79b8:	6838      	ldr	r0, [r7, #0]
    79ba:	4b6c      	ldr	r3, [pc, #432]	; (7b6c <_pwm_init+0x1e4>)
    79bc:	4798      	blx	r3
    79be:	4603      	mov	r3, r0
    79c0:	2b00      	cmp	r3, #0
    79c2:	d006      	beq.n	79d2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    79c4:	6838      	ldr	r0, [r7, #0]
    79c6:	4b6a      	ldr	r3, [pc, #424]	; (7b70 <_pwm_init+0x1e8>)
    79c8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    79ca:	2102      	movs	r1, #2
    79cc:	6838      	ldr	r0, [r7, #0]
    79ce:	4b69      	ldr	r3, [pc, #420]	; (7b74 <_pwm_init+0x1ec>)
    79d0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    79d2:	2101      	movs	r1, #1
    79d4:	6838      	ldr	r0, [r7, #0]
    79d6:	4b68      	ldr	r3, [pc, #416]	; (7b78 <_pwm_init+0x1f0>)
    79d8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    79da:	2101      	movs	r1, #1
    79dc:	6838      	ldr	r0, [r7, #0]
    79de:	4b65      	ldr	r3, [pc, #404]	; (7b74 <_pwm_init+0x1ec>)
    79e0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    79e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79e6:	4965      	ldr	r1, [pc, #404]	; (7b7c <_pwm_init+0x1f4>)
    79e8:	4613      	mov	r3, r2
    79ea:	009b      	lsls	r3, r3, #2
    79ec:	4413      	add	r3, r2
    79ee:	009b      	lsls	r3, r3, #2
    79f0:	440b      	add	r3, r1
    79f2:	3304      	adds	r3, #4
    79f4:	681b      	ldr	r3, [r3, #0]
    79f6:	4619      	mov	r1, r3
    79f8:	6838      	ldr	r0, [r7, #0]
    79fa:	4b5f      	ldr	r3, [pc, #380]	; (7b78 <_pwm_init+0x1f0>)
    79fc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    79fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a02:	495e      	ldr	r1, [pc, #376]	; (7b7c <_pwm_init+0x1f4>)
    7a04:	4613      	mov	r3, r2
    7a06:	009b      	lsls	r3, r3, #2
    7a08:	4413      	add	r3, r2
    7a0a:	009b      	lsls	r3, r3, #2
    7a0c:	440b      	add	r3, r1
    7a0e:	330a      	adds	r3, #10
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	4619      	mov	r1, r3
    7a14:	6838      	ldr	r0, [r7, #0]
    7a16:	4b5a      	ldr	r3, [pc, #360]	; (7b80 <_pwm_init+0x1f8>)
    7a18:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7a1a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a1e:	4957      	ldr	r1, [pc, #348]	; (7b7c <_pwm_init+0x1f4>)
    7a20:	4613      	mov	r3, r2
    7a22:	009b      	lsls	r3, r3, #2
    7a24:	4413      	add	r3, r2
    7a26:	009b      	lsls	r3, r3, #2
    7a28:	440b      	add	r3, r1
    7a2a:	3308      	adds	r3, #8
    7a2c:	881b      	ldrh	r3, [r3, #0]
    7a2e:	4619      	mov	r1, r3
    7a30:	6838      	ldr	r0, [r7, #0]
    7a32:	4b54      	ldr	r3, [pc, #336]	; (7b84 <_pwm_init+0x1fc>)
    7a34:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7a36:	2103      	movs	r1, #3
    7a38:	6838      	ldr	r0, [r7, #0]
    7a3a:	4b53      	ldr	r3, [pc, #332]	; (7b88 <_pwm_init+0x200>)
    7a3c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7a3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a42:	494e      	ldr	r1, [pc, #312]	; (7b7c <_pwm_init+0x1f4>)
    7a44:	4613      	mov	r3, r2
    7a46:	009b      	lsls	r3, r3, #2
    7a48:	4413      	add	r3, r2
    7a4a:	009b      	lsls	r3, r3, #2
    7a4c:	440b      	add	r3, r1
    7a4e:	3304      	adds	r3, #4
    7a50:	681b      	ldr	r3, [r3, #0]
    7a52:	f003 030c 	and.w	r3, r3, #12
    7a56:	2b08      	cmp	r3, #8
    7a58:	d11e      	bne.n	7a98 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7a5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a5e:	4947      	ldr	r1, [pc, #284]	; (7b7c <_pwm_init+0x1f4>)
    7a60:	4613      	mov	r3, r2
    7a62:	009b      	lsls	r3, r3, #2
    7a64:	4413      	add	r3, r2
    7a66:	009b      	lsls	r3, r3, #2
    7a68:	440b      	add	r3, r1
    7a6a:	330c      	adds	r3, #12
    7a6c:	681b      	ldr	r3, [r3, #0]
    7a6e:	461a      	mov	r2, r3
    7a70:	2100      	movs	r1, #0
    7a72:	6838      	ldr	r0, [r7, #0]
    7a74:	4b45      	ldr	r3, [pc, #276]	; (7b8c <_pwm_init+0x204>)
    7a76:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7a78:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a7c:	493f      	ldr	r1, [pc, #252]	; (7b7c <_pwm_init+0x1f4>)
    7a7e:	4613      	mov	r3, r2
    7a80:	009b      	lsls	r3, r3, #2
    7a82:	4413      	add	r3, r2
    7a84:	009b      	lsls	r3, r3, #2
    7a86:	440b      	add	r3, r1
    7a88:	3310      	adds	r3, #16
    7a8a:	681b      	ldr	r3, [r3, #0]
    7a8c:	461a      	mov	r2, r3
    7a8e:	2101      	movs	r1, #1
    7a90:	6838      	ldr	r0, [r7, #0]
    7a92:	4b3e      	ldr	r3, [pc, #248]	; (7b8c <_pwm_init+0x204>)
    7a94:	4798      	blx	r3
    7a96:	e031      	b.n	7afc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7a98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a9c:	4937      	ldr	r1, [pc, #220]	; (7b7c <_pwm_init+0x1f4>)
    7a9e:	4613      	mov	r3, r2
    7aa0:	009b      	lsls	r3, r3, #2
    7aa2:	4413      	add	r3, r2
    7aa4:	009b      	lsls	r3, r3, #2
    7aa6:	440b      	add	r3, r1
    7aa8:	3304      	adds	r3, #4
    7aaa:	681b      	ldr	r3, [r3, #0]
    7aac:	f003 030c 	and.w	r3, r3, #12
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d120      	bne.n	7af6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7ab4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ab8:	4930      	ldr	r1, [pc, #192]	; (7b7c <_pwm_init+0x1f4>)
    7aba:	4613      	mov	r3, r2
    7abc:	009b      	lsls	r3, r3, #2
    7abe:	4413      	add	r3, r2
    7ac0:	009b      	lsls	r3, r3, #2
    7ac2:	440b      	add	r3, r1
    7ac4:	330c      	adds	r3, #12
    7ac6:	681b      	ldr	r3, [r3, #0]
    7ac8:	b29b      	uxth	r3, r3
    7aca:	461a      	mov	r2, r3
    7acc:	2100      	movs	r1, #0
    7ace:	6838      	ldr	r0, [r7, #0]
    7ad0:	4b2f      	ldr	r3, [pc, #188]	; (7b90 <_pwm_init+0x208>)
    7ad2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7ad4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ad8:	4928      	ldr	r1, [pc, #160]	; (7b7c <_pwm_init+0x1f4>)
    7ada:	4613      	mov	r3, r2
    7adc:	009b      	lsls	r3, r3, #2
    7ade:	4413      	add	r3, r2
    7ae0:	009b      	lsls	r3, r3, #2
    7ae2:	440b      	add	r3, r1
    7ae4:	3310      	adds	r3, #16
    7ae6:	681b      	ldr	r3, [r3, #0]
    7ae8:	b29b      	uxth	r3, r3
    7aea:	461a      	mov	r2, r3
    7aec:	2101      	movs	r1, #1
    7aee:	6838      	ldr	r0, [r7, #0]
    7af0:	4b27      	ldr	r3, [pc, #156]	; (7b90 <_pwm_init+0x208>)
    7af2:	4798      	blx	r3
    7af4:	e002      	b.n	7afc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7af6:	f04f 33ff 	mov.w	r3, #4294967295
    7afa:	e02e      	b.n	7b5a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7afc:	6879      	ldr	r1, [r7, #4]
    7afe:	6838      	ldr	r0, [r7, #0]
    7b00:	4b24      	ldr	r3, [pc, #144]	; (7b94 <_pwm_init+0x20c>)
    7b02:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7b04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b08:	491c      	ldr	r1, [pc, #112]	; (7b7c <_pwm_init+0x1f4>)
    7b0a:	4613      	mov	r3, r2
    7b0c:	009b      	lsls	r3, r3, #2
    7b0e:	4413      	add	r3, r2
    7b10:	009b      	lsls	r3, r3, #2
    7b12:	440b      	add	r3, r1
    7b14:	3302      	adds	r3, #2
    7b16:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b1a:	4618      	mov	r0, r3
    7b1c:	4b1e      	ldr	r3, [pc, #120]	; (7b98 <_pwm_init+0x210>)
    7b1e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7b20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b24:	4915      	ldr	r1, [pc, #84]	; (7b7c <_pwm_init+0x1f4>)
    7b26:	4613      	mov	r3, r2
    7b28:	009b      	lsls	r3, r3, #2
    7b2a:	4413      	add	r3, r2
    7b2c:	009b      	lsls	r3, r3, #2
    7b2e:	440b      	add	r3, r1
    7b30:	3302      	adds	r3, #2
    7b32:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b36:	4618      	mov	r0, r3
    7b38:	4b18      	ldr	r3, [pc, #96]	; (7b9c <_pwm_init+0x214>)
    7b3a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7b3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b40:	490e      	ldr	r1, [pc, #56]	; (7b7c <_pwm_init+0x1f4>)
    7b42:	4613      	mov	r3, r2
    7b44:	009b      	lsls	r3, r3, #2
    7b46:	4413      	add	r3, r2
    7b48:	009b      	lsls	r3, r3, #2
    7b4a:	440b      	add	r3, r1
    7b4c:	3302      	adds	r3, #2
    7b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b52:	4618      	mov	r0, r3
    7b54:	4b12      	ldr	r3, [pc, #72]	; (7ba0 <_pwm_init+0x218>)
    7b56:	4798      	blx	r3

	return 0;
    7b58:	2300      	movs	r3, #0
}
    7b5a:	4618      	mov	r0, r3
    7b5c:	3710      	adds	r7, #16
    7b5e:	46bd      	mov	sp, r7
    7b60:	bd80      	pop	{r7, pc}
    7b62:	bf00      	nop
    7b64:	00007f29 	.word	0x00007f29
    7b68:	0000734d 	.word	0x0000734d
    7b6c:	000074ed 	.word	0x000074ed
    7b70:	0000749d 	.word	0x0000749d
    7b74:	00007329 	.word	0x00007329
    7b78:	0000751d 	.word	0x0000751d
    7b7c:	20000110 	.word	0x20000110
    7b80:	0000757d 	.word	0x0000757d
    7b84:	00007541 	.word	0x00007541
    7b88:	0000755f 	.word	0x0000755f
    7b8c:	0000767d 	.word	0x0000767d
    7b90:	00007619 	.word	0x00007619
    7b94:	00007f91 	.word	0x00007f91
    7b98:	000072a9 	.word	0x000072a9
    7b9c:	000072ed 	.word	0x000072ed
    7ba0:	0000726d 	.word	0x0000726d

00007ba4 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7ba4:	b580      	push	{r7, lr}
    7ba6:	b084      	sub	sp, #16
    7ba8:	af00      	add	r7, sp, #0
    7baa:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	68db      	ldr	r3, [r3, #12]
    7bb0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7bb2:	68f8      	ldr	r0, [r7, #12]
    7bb4:	4b10      	ldr	r3, [pc, #64]	; (7bf8 <_tc_timer_deinit+0x54>)
    7bb6:	4798      	blx	r3
    7bb8:	4603      	mov	r3, r0
    7bba:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7bbc:	22f9      	movs	r2, #249	; 0xf9
    7bbe:	490f      	ldr	r1, [pc, #60]	; (7bfc <_tc_timer_deinit+0x58>)
    7bc0:	2001      	movs	r0, #1
    7bc2:	4b0f      	ldr	r3, [pc, #60]	; (7c00 <_tc_timer_deinit+0x5c>)
    7bc4:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7bc6:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7bca:	490e      	ldr	r1, [pc, #56]	; (7c04 <_tc_timer_deinit+0x60>)
    7bcc:	4613      	mov	r3, r2
    7bce:	009b      	lsls	r3, r3, #2
    7bd0:	4413      	add	r3, r2
    7bd2:	009b      	lsls	r3, r3, #2
    7bd4:	440b      	add	r3, r1
    7bd6:	3302      	adds	r3, #2
    7bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
    7bdc:	4618      	mov	r0, r3
    7bde:	4b0a      	ldr	r3, [pc, #40]	; (7c08 <_tc_timer_deinit+0x64>)
    7be0:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7be2:	68f8      	ldr	r0, [r7, #12]
    7be4:	4b09      	ldr	r3, [pc, #36]	; (7c0c <_tc_timer_deinit+0x68>)
    7be6:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7be8:	68f8      	ldr	r0, [r7, #12]
    7bea:	4b09      	ldr	r3, [pc, #36]	; (7c10 <_tc_timer_deinit+0x6c>)
    7bec:	4798      	blx	r3
}
    7bee:	bf00      	nop
    7bf0:	3710      	adds	r7, #16
    7bf2:	46bd      	mov	sp, r7
    7bf4:	bd80      	pop	{r7, pc}
    7bf6:	bf00      	nop
    7bf8:	00007f29 	.word	0x00007f29
    7bfc:	0000ef50 	.word	0x0000ef50
    7c00:	000033ad 	.word	0x000033ad
    7c04:	20000110 	.word	0x20000110
    7c08:	000072a9 	.word	0x000072a9
    7c0c:	0000749d 	.word	0x0000749d
    7c10:	00007415 	.word	0x00007415

00007c14 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b082      	sub	sp, #8
    7c18:	af00      	add	r7, sp, #0
    7c1a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	68db      	ldr	r3, [r3, #12]
    7c20:	4618      	mov	r0, r3
    7c22:	4b03      	ldr	r3, [pc, #12]	; (7c30 <_tc_timer_start+0x1c>)
    7c24:	4798      	blx	r3
}
    7c26:	bf00      	nop
    7c28:	3708      	adds	r7, #8
    7c2a:	46bd      	mov	sp, r7
    7c2c:	bd80      	pop	{r7, pc}
    7c2e:	bf00      	nop
    7c30:	0000743d 	.word	0x0000743d

00007c34 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7c34:	b580      	push	{r7, lr}
    7c36:	b082      	sub	sp, #8
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	68db      	ldr	r3, [r3, #12]
    7c40:	4618      	mov	r0, r3
    7c42:	4b03      	ldr	r3, [pc, #12]	; (7c50 <_tc_timer_stop+0x1c>)
    7c44:	4798      	blx	r3
}
    7c46:	bf00      	nop
    7c48:	3708      	adds	r7, #8
    7c4a:	46bd      	mov	sp, r7
    7c4c:	bd80      	pop	{r7, pc}
    7c4e:	bf00      	nop
    7c50:	0000749d 	.word	0x0000749d

00007c54 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7c54:	b580      	push	{r7, lr}
    7c56:	b084      	sub	sp, #16
    7c58:	af00      	add	r7, sp, #0
    7c5a:	6078      	str	r0, [r7, #4]
    7c5c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7c5e:	687b      	ldr	r3, [r7, #4]
    7c60:	68db      	ldr	r3, [r3, #12]
    7c62:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c64:	68f8      	ldr	r0, [r7, #12]
    7c66:	4b14      	ldr	r3, [pc, #80]	; (7cb8 <_tc_timer_set_period+0x64>)
    7c68:	4798      	blx	r3
    7c6a:	4603      	mov	r3, r0
    7c6c:	2b02      	cmp	r3, #2
    7c6e:	d105      	bne.n	7c7c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7c70:	683a      	ldr	r2, [r7, #0]
    7c72:	2100      	movs	r1, #0
    7c74:	68f8      	ldr	r0, [r7, #12]
    7c76:	4b11      	ldr	r3, [pc, #68]	; (7cbc <_tc_timer_set_period+0x68>)
    7c78:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7c7a:	e019      	b.n	7cb0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c7c:	68f8      	ldr	r0, [r7, #12]
    7c7e:	4b0e      	ldr	r3, [pc, #56]	; (7cb8 <_tc_timer_set_period+0x64>)
    7c80:	4798      	blx	r3
    7c82:	4603      	mov	r3, r0
    7c84:	2b00      	cmp	r3, #0
    7c86:	d107      	bne.n	7c98 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7c88:	683b      	ldr	r3, [r7, #0]
    7c8a:	b29b      	uxth	r3, r3
    7c8c:	461a      	mov	r2, r3
    7c8e:	2100      	movs	r1, #0
    7c90:	68f8      	ldr	r0, [r7, #12]
    7c92:	4b0b      	ldr	r3, [pc, #44]	; (7cc0 <_tc_timer_set_period+0x6c>)
    7c94:	4798      	blx	r3
}
    7c96:	e00b      	b.n	7cb0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7c98:	68f8      	ldr	r0, [r7, #12]
    7c9a:	4b07      	ldr	r3, [pc, #28]	; (7cb8 <_tc_timer_set_period+0x64>)
    7c9c:	4798      	blx	r3
    7c9e:	4603      	mov	r3, r0
    7ca0:	2b01      	cmp	r3, #1
    7ca2:	d105      	bne.n	7cb0 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7ca4:	683b      	ldr	r3, [r7, #0]
    7ca6:	b2db      	uxtb	r3, r3
    7ca8:	4619      	mov	r1, r3
    7caa:	68f8      	ldr	r0, [r7, #12]
    7cac:	4b05      	ldr	r3, [pc, #20]	; (7cc4 <_tc_timer_set_period+0x70>)
    7cae:	4798      	blx	r3
}
    7cb0:	bf00      	nop
    7cb2:	3710      	adds	r7, #16
    7cb4:	46bd      	mov	sp, r7
    7cb6:	bd80      	pop	{r7, pc}
    7cb8:	000074c5 	.word	0x000074c5
    7cbc:	0000767d 	.word	0x0000767d
    7cc0:	00007619 	.word	0x00007619
    7cc4:	0000759d 	.word	0x0000759d

00007cc8 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    7cc8:	b580      	push	{r7, lr}
    7cca:	b084      	sub	sp, #16
    7ccc:	af00      	add	r7, sp, #0
    7cce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	68db      	ldr	r3, [r3, #12]
    7cd4:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7cd6:	68f8      	ldr	r0, [r7, #12]
    7cd8:	4b13      	ldr	r3, [pc, #76]	; (7d28 <_tc_timer_get_period+0x60>)
    7cda:	4798      	blx	r3
    7cdc:	4603      	mov	r3, r0
    7cde:	2b02      	cmp	r3, #2
    7ce0:	d105      	bne.n	7cee <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7ce2:	2100      	movs	r1, #0
    7ce4:	68f8      	ldr	r0, [r7, #12]
    7ce6:	4b11      	ldr	r3, [pc, #68]	; (7d2c <_tc_timer_get_period+0x64>)
    7ce8:	4798      	blx	r3
    7cea:	4603      	mov	r3, r0
    7cec:	e017      	b.n	7d1e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7cee:	68f8      	ldr	r0, [r7, #12]
    7cf0:	4b0d      	ldr	r3, [pc, #52]	; (7d28 <_tc_timer_get_period+0x60>)
    7cf2:	4798      	blx	r3
    7cf4:	4603      	mov	r3, r0
    7cf6:	2b00      	cmp	r3, #0
    7cf8:	d105      	bne.n	7d06 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7cfa:	2100      	movs	r1, #0
    7cfc:	68f8      	ldr	r0, [r7, #12]
    7cfe:	4b0c      	ldr	r3, [pc, #48]	; (7d30 <_tc_timer_get_period+0x68>)
    7d00:	4798      	blx	r3
    7d02:	4603      	mov	r3, r0
    7d04:	e00b      	b.n	7d1e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d06:	68f8      	ldr	r0, [r7, #12]
    7d08:	4b07      	ldr	r3, [pc, #28]	; (7d28 <_tc_timer_get_period+0x60>)
    7d0a:	4798      	blx	r3
    7d0c:	4603      	mov	r3, r0
    7d0e:	2b01      	cmp	r3, #1
    7d10:	d104      	bne.n	7d1c <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7d12:	68f8      	ldr	r0, [r7, #12]
    7d14:	4b07      	ldr	r3, [pc, #28]	; (7d34 <_tc_timer_get_period+0x6c>)
    7d16:	4798      	blx	r3
    7d18:	4603      	mov	r3, r0
    7d1a:	e000      	b.n	7d1e <_tc_timer_get_period+0x56>
	}

	return 0;
    7d1c:	2300      	movs	r3, #0
}
    7d1e:	4618      	mov	r0, r3
    7d20:	3710      	adds	r7, #16
    7d22:	46bd      	mov	sp, r7
    7d24:	bd80      	pop	{r7, pc}
    7d26:	bf00      	nop
    7d28:	000074c5 	.word	0x000074c5
    7d2c:	000076ad 	.word	0x000076ad
    7d30:	0000764d 	.word	0x0000764d
    7d34:	000075c5 	.word	0x000075c5

00007d38 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7d38:	b580      	push	{r7, lr}
    7d3a:	b082      	sub	sp, #8
    7d3c:	af00      	add	r7, sp, #0
    7d3e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	68db      	ldr	r3, [r3, #12]
    7d44:	4618      	mov	r0, r3
    7d46:	4b03      	ldr	r3, [pc, #12]	; (7d54 <_tc_timer_is_started+0x1c>)
    7d48:	4798      	blx	r3
    7d4a:	4603      	mov	r3, r0
}
    7d4c:	4618      	mov	r0, r3
    7d4e:	3708      	adds	r7, #8
    7d50:	46bd      	mov	sp, r7
    7d52:	bd80      	pop	{r7, pc}
    7d54:	00007465 	.word	0x00007465

00007d58 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7d58:	b480      	push	{r7}
    7d5a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7d5c:	4b02      	ldr	r3, [pc, #8]	; (7d68 <_tc_get_timer+0x10>)
}
    7d5e:	4618      	mov	r0, r3
    7d60:	46bd      	mov	sp, r7
    7d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d66:	4770      	bx	lr
    7d68:	20000188 	.word	0x20000188

00007d6c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7d6c:	b480      	push	{r7}
    7d6e:	af00      	add	r7, sp, #0
	return NULL;
    7d70:	2300      	movs	r3, #0
}
    7d72:	4618      	mov	r0, r3
    7d74:	46bd      	mov	sp, r7
    7d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d7a:	4770      	bx	lr

00007d7c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7d7c:	b580      	push	{r7, lr}
    7d7e:	b084      	sub	sp, #16
    7d80:	af00      	add	r7, sp, #0
    7d82:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7d84:	687b      	ldr	r3, [r7, #4]
    7d86:	68db      	ldr	r3, [r3, #12]
    7d88:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7d8a:	68f8      	ldr	r0, [r7, #12]
    7d8c:	4b0e      	ldr	r3, [pc, #56]	; (7dc8 <_tc_timer_set_irq+0x4c>)
    7d8e:	4798      	blx	r3
    7d90:	4603      	mov	r3, r0
    7d92:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7d94:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7d98:	490c      	ldr	r1, [pc, #48]	; (7dcc <_tc_timer_set_irq+0x50>)
    7d9a:	2001      	movs	r0, #1
    7d9c:	4b0c      	ldr	r3, [pc, #48]	; (7dd0 <_tc_timer_set_irq+0x54>)
    7d9e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7da0:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7da4:	490b      	ldr	r1, [pc, #44]	; (7dd4 <_tc_timer_set_irq+0x58>)
    7da6:	4613      	mov	r3, r2
    7da8:	009b      	lsls	r3, r3, #2
    7daa:	4413      	add	r3, r2
    7dac:	009b      	lsls	r3, r3, #2
    7dae:	440b      	add	r3, r1
    7db0:	3302      	adds	r3, #2
    7db2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7db6:	b2db      	uxtb	r3, r3
    7db8:	4618      	mov	r0, r3
    7dba:	4b07      	ldr	r3, [pc, #28]	; (7dd8 <_tc_timer_set_irq+0x5c>)
    7dbc:	4798      	blx	r3
}
    7dbe:	bf00      	nop
    7dc0:	3710      	adds	r7, #16
    7dc2:	46bd      	mov	sp, r7
    7dc4:	bd80      	pop	{r7, pc}
    7dc6:	bf00      	nop
    7dc8:	00007f29 	.word	0x00007f29
    7dcc:	0000ef50 	.word	0x0000ef50
    7dd0:	000033ad 	.word	0x000033ad
    7dd4:	20000110 	.word	0x20000110
    7dd8:	00003bf5 	.word	0x00003bf5

00007ddc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7ddc:	b580      	push	{r7, lr}
    7dde:	b084      	sub	sp, #16
    7de0:	af00      	add	r7, sp, #0
    7de2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7de4:	687b      	ldr	r3, [r7, #4]
    7de6:	68db      	ldr	r3, [r3, #12]
    7de8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7dea:	68f8      	ldr	r0, [r7, #12]
    7dec:	4b07      	ldr	r3, [pc, #28]	; (7e0c <tc_interrupt_handler+0x30>)
    7dee:	4798      	blx	r3
    7df0:	4603      	mov	r3, r0
    7df2:	2b00      	cmp	r3, #0
    7df4:	d006      	beq.n	7e04 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7df6:	68f8      	ldr	r0, [r7, #12]
    7df8:	4b05      	ldr	r3, [pc, #20]	; (7e10 <tc_interrupt_handler+0x34>)
    7dfa:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7dfc:	687b      	ldr	r3, [r7, #4]
    7dfe:	681b      	ldr	r3, [r3, #0]
    7e00:	6878      	ldr	r0, [r7, #4]
    7e02:	4798      	blx	r3
	}
}
    7e04:	bf00      	nop
    7e06:	3710      	adds	r7, #16
    7e08:	46bd      	mov	sp, r7
    7e0a:	bd80      	pop	{r7, pc}
    7e0c:	00007375 	.word	0x00007375
    7e10:	0000739d 	.word	0x0000739d

00007e14 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7e14:	b580      	push	{r7, lr}
    7e16:	b084      	sub	sp, #16
    7e18:	af00      	add	r7, sp, #0
    7e1a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7e1c:	687b      	ldr	r3, [r7, #4]
    7e1e:	691b      	ldr	r3, [r3, #16]
    7e20:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7e22:	68f8      	ldr	r0, [r7, #12]
    7e24:	4b12      	ldr	r3, [pc, #72]	; (7e70 <tc_pwm_interrupt_handler+0x5c>)
    7e26:	4798      	blx	r3
    7e28:	4603      	mov	r3, r0
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d00a      	beq.n	7e44 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7e2e:	68f8      	ldr	r0, [r7, #12]
    7e30:	4b10      	ldr	r3, [pc, #64]	; (7e74 <tc_pwm_interrupt_handler+0x60>)
    7e32:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	681b      	ldr	r3, [r3, #0]
    7e38:	2b00      	cmp	r3, #0
    7e3a:	d003      	beq.n	7e44 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7e3c:	687b      	ldr	r3, [r7, #4]
    7e3e:	681b      	ldr	r3, [r3, #0]
    7e40:	6878      	ldr	r0, [r7, #4]
    7e42:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7e44:	68f8      	ldr	r0, [r7, #12]
    7e46:	4b0c      	ldr	r3, [pc, #48]	; (7e78 <tc_pwm_interrupt_handler+0x64>)
    7e48:	4798      	blx	r3
    7e4a:	4603      	mov	r3, r0
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d00a      	beq.n	7e66 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7e50:	68f8      	ldr	r0, [r7, #12]
    7e52:	4b0a      	ldr	r3, [pc, #40]	; (7e7c <tc_pwm_interrupt_handler+0x68>)
    7e54:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	685b      	ldr	r3, [r3, #4]
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	d003      	beq.n	7e66 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7e5e:	687b      	ldr	r3, [r7, #4]
    7e60:	685b      	ldr	r3, [r3, #4]
    7e62:	6878      	ldr	r0, [r7, #4]
    7e64:	4798      	blx	r3
		}
	}
}
    7e66:	bf00      	nop
    7e68:	3710      	adds	r7, #16
    7e6a:	46bd      	mov	sp, r7
    7e6c:	bd80      	pop	{r7, pc}
    7e6e:	bf00      	nop
    7e70:	00007375 	.word	0x00007375
    7e74:	0000739d 	.word	0x0000739d
    7e78:	000073eb 	.word	0x000073eb
    7e7c:	000073b7 	.word	0x000073b7

00007e80 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7e80:	b580      	push	{r7, lr}
    7e82:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7e84:	4b03      	ldr	r3, [pc, #12]	; (7e94 <TC0_Handler+0x14>)
    7e86:	681b      	ldr	r3, [r3, #0]
    7e88:	4618      	mov	r0, r3
    7e8a:	4b03      	ldr	r3, [pc, #12]	; (7e98 <TC0_Handler+0x18>)
    7e8c:	4798      	blx	r3
}
    7e8e:	bf00      	nop
    7e90:	bd80      	pop	{r7, pc}
    7e92:	bf00      	nop
    7e94:	2000097c 	.word	0x2000097c
    7e98:	00007ddd 	.word	0x00007ddd

00007e9c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7e9c:	b580      	push	{r7, lr}
    7e9e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7ea0:	4b03      	ldr	r3, [pc, #12]	; (7eb0 <TC2_Handler+0x14>)
    7ea2:	681b      	ldr	r3, [r3, #0]
    7ea4:	4618      	mov	r0, r3
    7ea6:	4b03      	ldr	r3, [pc, #12]	; (7eb4 <TC2_Handler+0x18>)
    7ea8:	4798      	blx	r3
}
    7eaa:	bf00      	nop
    7eac:	bd80      	pop	{r7, pc}
    7eae:	bf00      	nop
    7eb0:	20000980 	.word	0x20000980
    7eb4:	00007ddd 	.word	0x00007ddd

00007eb8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    7eb8:	b580      	push	{r7, lr}
    7eba:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    7ebc:	4b03      	ldr	r3, [pc, #12]	; (7ecc <TC4_Handler+0x14>)
    7ebe:	681b      	ldr	r3, [r3, #0]
    7ec0:	4618      	mov	r0, r3
    7ec2:	4b03      	ldr	r3, [pc, #12]	; (7ed0 <TC4_Handler+0x18>)
    7ec4:	4798      	blx	r3
}
    7ec6:	bf00      	nop
    7ec8:	bd80      	pop	{r7, pc}
    7eca:	bf00      	nop
    7ecc:	20000984 	.word	0x20000984
    7ed0:	00007ddd 	.word	0x00007ddd

00007ed4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    7ed4:	b580      	push	{r7, lr}
    7ed6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    7ed8:	4b03      	ldr	r3, [pc, #12]	; (7ee8 <TC5_Handler+0x14>)
    7eda:	681b      	ldr	r3, [r3, #0]
    7edc:	4618      	mov	r0, r3
    7ede:	4b03      	ldr	r3, [pc, #12]	; (7eec <TC5_Handler+0x18>)
    7ee0:	4798      	blx	r3
}
    7ee2:	bf00      	nop
    7ee4:	bd80      	pop	{r7, pc}
    7ee6:	bf00      	nop
    7ee8:	20000988 	.word	0x20000988
    7eec:	00007ddd 	.word	0x00007ddd

00007ef0 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    7ef0:	b580      	push	{r7, lr}
    7ef2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    7ef4:	4b03      	ldr	r3, [pc, #12]	; (7f04 <TC6_Handler+0x14>)
    7ef6:	681b      	ldr	r3, [r3, #0]
    7ef8:	4618      	mov	r0, r3
    7efa:	4b03      	ldr	r3, [pc, #12]	; (7f08 <TC6_Handler+0x18>)
    7efc:	4798      	blx	r3
}
    7efe:	bf00      	nop
    7f00:	bd80      	pop	{r7, pc}
    7f02:	bf00      	nop
    7f04:	2000098c 	.word	0x2000098c
    7f08:	00007ddd 	.word	0x00007ddd

00007f0c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7f0c:	b580      	push	{r7, lr}
    7f0e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7f10:	4b03      	ldr	r3, [pc, #12]	; (7f20 <TC7_Handler+0x14>)
    7f12:	681b      	ldr	r3, [r3, #0]
    7f14:	4618      	mov	r0, r3
    7f16:	4b03      	ldr	r3, [pc, #12]	; (7f24 <TC7_Handler+0x18>)
    7f18:	4798      	blx	r3
}
    7f1a:	bf00      	nop
    7f1c:	bd80      	pop	{r7, pc}
    7f1e:	bf00      	nop
    7f20:	20000990 	.word	0x20000990
    7f24:	00007e15 	.word	0x00007e15

00007f28 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b084      	sub	sp, #16
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7f30:	6878      	ldr	r0, [r7, #4]
    7f32:	4b13      	ldr	r3, [pc, #76]	; (7f80 <get_tc_index+0x58>)
    7f34:	4798      	blx	r3
    7f36:	4603      	mov	r3, r0
    7f38:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7f3a:	2300      	movs	r3, #0
    7f3c:	73fb      	strb	r3, [r7, #15]
    7f3e:	e010      	b.n	7f62 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7f40:	7bfa      	ldrb	r2, [r7, #15]
    7f42:	4910      	ldr	r1, [pc, #64]	; (7f84 <get_tc_index+0x5c>)
    7f44:	4613      	mov	r3, r2
    7f46:	009b      	lsls	r3, r3, #2
    7f48:	4413      	add	r3, r2
    7f4a:	009b      	lsls	r3, r3, #2
    7f4c:	440b      	add	r3, r1
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	7bba      	ldrb	r2, [r7, #14]
    7f52:	429a      	cmp	r2, r3
    7f54:	d102      	bne.n	7f5c <get_tc_index+0x34>
			return i;
    7f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7f5a:	e00d      	b.n	7f78 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7f5c:	7bfb      	ldrb	r3, [r7, #15]
    7f5e:	3301      	adds	r3, #1
    7f60:	73fb      	strb	r3, [r7, #15]
    7f62:	7bfb      	ldrb	r3, [r7, #15]
    7f64:	2b05      	cmp	r3, #5
    7f66:	d9eb      	bls.n	7f40 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7f68:	f240 221d 	movw	r2, #541	; 0x21d
    7f6c:	4906      	ldr	r1, [pc, #24]	; (7f88 <get_tc_index+0x60>)
    7f6e:	2000      	movs	r0, #0
    7f70:	4b06      	ldr	r3, [pc, #24]	; (7f8c <get_tc_index+0x64>)
    7f72:	4798      	blx	r3
	return -1;
    7f74:	f04f 33ff 	mov.w	r3, #4294967295
}
    7f78:	4618      	mov	r0, r3
    7f7a:	3710      	adds	r7, #16
    7f7c:	46bd      	mov	sp, r7
    7f7e:	bd80      	pop	{r7, pc}
    7f80:	0000802d 	.word	0x0000802d
    7f84:	20000110 	.word	0x20000110
    7f88:	0000ef50 	.word	0x0000ef50
    7f8c:	000033ad 	.word	0x000033ad

00007f90 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7f90:	b480      	push	{r7}
    7f92:	b083      	sub	sp, #12
    7f94:	af00      	add	r7, sp, #0
    7f96:	6078      	str	r0, [r7, #4]
    7f98:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	4a17      	ldr	r2, [pc, #92]	; (7ffc <_tc_init_irq_param+0x6c>)
    7f9e:	4293      	cmp	r3, r2
    7fa0:	d102      	bne.n	7fa8 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7fa2:	4a17      	ldr	r2, [pc, #92]	; (8000 <_tc_init_irq_param+0x70>)
    7fa4:	683b      	ldr	r3, [r7, #0]
    7fa6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7fa8:	687b      	ldr	r3, [r7, #4]
    7faa:	4a16      	ldr	r2, [pc, #88]	; (8004 <_tc_init_irq_param+0x74>)
    7fac:	4293      	cmp	r3, r2
    7fae:	d102      	bne.n	7fb6 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    7fb0:	4a15      	ldr	r2, [pc, #84]	; (8008 <_tc_init_irq_param+0x78>)
    7fb2:	683b      	ldr	r3, [r7, #0]
    7fb4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	4a14      	ldr	r2, [pc, #80]	; (800c <_tc_init_irq_param+0x7c>)
    7fba:	4293      	cmp	r3, r2
    7fbc:	d102      	bne.n	7fc4 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    7fbe:	4a14      	ldr	r2, [pc, #80]	; (8010 <_tc_init_irq_param+0x80>)
    7fc0:	683b      	ldr	r3, [r7, #0]
    7fc2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    7fc4:	687b      	ldr	r3, [r7, #4]
    7fc6:	4a13      	ldr	r2, [pc, #76]	; (8014 <_tc_init_irq_param+0x84>)
    7fc8:	4293      	cmp	r3, r2
    7fca:	d102      	bne.n	7fd2 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    7fcc:	4a12      	ldr	r2, [pc, #72]	; (8018 <_tc_init_irq_param+0x88>)
    7fce:	683b      	ldr	r3, [r7, #0]
    7fd0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	4a11      	ldr	r2, [pc, #68]	; (801c <_tc_init_irq_param+0x8c>)
    7fd6:	4293      	cmp	r3, r2
    7fd8:	d102      	bne.n	7fe0 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    7fda:	4a11      	ldr	r2, [pc, #68]	; (8020 <_tc_init_irq_param+0x90>)
    7fdc:	683b      	ldr	r3, [r7, #0]
    7fde:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	4a10      	ldr	r2, [pc, #64]	; (8024 <_tc_init_irq_param+0x94>)
    7fe4:	4293      	cmp	r3, r2
    7fe6:	d102      	bne.n	7fee <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    7fe8:	4a0f      	ldr	r2, [pc, #60]	; (8028 <_tc_init_irq_param+0x98>)
    7fea:	683b      	ldr	r3, [r7, #0]
    7fec:	6013      	str	r3, [r2, #0]
	}
}
    7fee:	bf00      	nop
    7ff0:	370c      	adds	r7, #12
    7ff2:	46bd      	mov	sp, r7
    7ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ff8:	4770      	bx	lr
    7ffa:	bf00      	nop
    7ffc:	40003800 	.word	0x40003800
    8000:	2000097c 	.word	0x2000097c
    8004:	4101a000 	.word	0x4101a000
    8008:	20000980 	.word	0x20000980
    800c:	42001400 	.word	0x42001400
    8010:	20000984 	.word	0x20000984
    8014:	42001800 	.word	0x42001800
    8018:	20000988 	.word	0x20000988
    801c:	43001400 	.word	0x43001400
    8020:	2000098c 	.word	0x2000098c
    8024:	43001800 	.word	0x43001800
    8028:	20000990 	.word	0x20000990

0000802c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    802c:	b4b0      	push	{r4, r5, r7}
    802e:	b08d      	sub	sp, #52	; 0x34
    8030:	af00      	add	r7, sp, #0
    8032:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8034:	4b13      	ldr	r3, [pc, #76]	; (8084 <_get_hardware_offset+0x58>)
    8036:	f107 040c 	add.w	r4, r7, #12
    803a:	461d      	mov	r5, r3
    803c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    803e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8040:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8048:	2300      	movs	r3, #0
    804a:	62fb      	str	r3, [r7, #44]	; 0x2c
    804c:	e010      	b.n	8070 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8050:	009b      	lsls	r3, r3, #2
    8052:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8056:	4413      	add	r3, r2
    8058:	f853 3c24 	ldr.w	r3, [r3, #-36]
    805c:	461a      	mov	r2, r3
    805e:	687b      	ldr	r3, [r7, #4]
    8060:	429a      	cmp	r2, r3
    8062:	d102      	bne.n	806a <_get_hardware_offset+0x3e>
			return i;
    8064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8066:	b2db      	uxtb	r3, r3
    8068:	e006      	b.n	8078 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    806c:	3301      	adds	r3, #1
    806e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8072:	2b07      	cmp	r3, #7
    8074:	d9eb      	bls.n	804e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8076:	2300      	movs	r3, #0
}
    8078:	4618      	mov	r0, r3
    807a:	3734      	adds	r7, #52	; 0x34
    807c:	46bd      	mov	sp, r7
    807e:	bcb0      	pop	{r4, r5, r7}
    8080:	4770      	bx	lr
    8082:	bf00      	nop
    8084:	0000ef64 	.word	0x0000ef64

00008088 <__NVIC_EnableIRQ>:
{
    8088:	b480      	push	{r7}
    808a:	b083      	sub	sp, #12
    808c:	af00      	add	r7, sp, #0
    808e:	4603      	mov	r3, r0
    8090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8096:	2b00      	cmp	r3, #0
    8098:	db0b      	blt.n	80b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    809a:	4909      	ldr	r1, [pc, #36]	; (80c0 <__NVIC_EnableIRQ+0x38>)
    809c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80a0:	095b      	lsrs	r3, r3, #5
    80a2:	88fa      	ldrh	r2, [r7, #6]
    80a4:	f002 021f 	and.w	r2, r2, #31
    80a8:	2001      	movs	r0, #1
    80aa:	fa00 f202 	lsl.w	r2, r0, r2
    80ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80b2:	bf00      	nop
    80b4:	370c      	adds	r7, #12
    80b6:	46bd      	mov	sp, r7
    80b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    80bc:	4770      	bx	lr
    80be:	bf00      	nop
    80c0:	e000e100 	.word	0xe000e100

000080c4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    80c4:	b480      	push	{r7}
    80c6:	b087      	sub	sp, #28
    80c8:	af00      	add	r7, sp, #0
    80ca:	60f8      	str	r0, [r7, #12]
    80cc:	460b      	mov	r3, r1
    80ce:	607a      	str	r2, [r7, #4]
    80d0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    80d2:	7afa      	ldrb	r2, [r7, #11]
    80d4:	68f9      	ldr	r1, [r7, #12]
    80d6:	4613      	mov	r3, r2
    80d8:	009b      	lsls	r3, r3, #2
    80da:	4413      	add	r3, r2
    80dc:	009b      	lsls	r3, r3, #2
    80de:	440b      	add	r3, r1
    80e0:	3340      	adds	r3, #64	; 0x40
    80e2:	681b      	ldr	r3, [r3, #0]
    80e4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    80e6:	697a      	ldr	r2, [r7, #20]
    80e8:	687b      	ldr	r3, [r7, #4]
    80ea:	4013      	ands	r3, r2
    80ec:	617b      	str	r3, [r7, #20]
	return tmp;
    80ee:	697b      	ldr	r3, [r7, #20]
}
    80f0:	4618      	mov	r0, r3
    80f2:	371c      	adds	r7, #28
    80f4:	46bd      	mov	sp, r7
    80f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80fa:	4770      	bx	lr

000080fc <hri_oscctrl_get_STATUS_reg>:
{
    80fc:	b480      	push	{r7}
    80fe:	b085      	sub	sp, #20
    8100:	af00      	add	r7, sp, #0
    8102:	6078      	str	r0, [r7, #4]
    8104:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	691b      	ldr	r3, [r3, #16]
    810a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    810c:	68fa      	ldr	r2, [r7, #12]
    810e:	683b      	ldr	r3, [r7, #0]
    8110:	4013      	ands	r3, r2
    8112:	60fb      	str	r3, [r7, #12]
	return tmp;
    8114:	68fb      	ldr	r3, [r7, #12]
}
    8116:	4618      	mov	r0, r3
    8118:	3714      	adds	r7, #20
    811a:	46bd      	mov	sp, r7
    811c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8120:	4770      	bx	lr

00008122 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8122:	b480      	push	{r7}
    8124:	b085      	sub	sp, #20
    8126:	af00      	add	r7, sp, #0
    8128:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	f893 3020 	ldrb.w	r3, [r3, #32]
    8130:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8132:	7bfb      	ldrb	r3, [r7, #15]
    8134:	f003 0301 	and.w	r3, r3, #1
    8138:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    813a:	7bfb      	ldrb	r3, [r7, #15]
    813c:	2b00      	cmp	r3, #0
    813e:	bf14      	ite	ne
    8140:	2301      	movne	r3, #1
    8142:	2300      	moveq	r3, #0
    8144:	b2db      	uxtb	r3, r3
}
    8146:	4618      	mov	r0, r3
    8148:	3714      	adds	r7, #20
    814a:	46bd      	mov	sp, r7
    814c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8150:	4770      	bx	lr

00008152 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8152:	b480      	push	{r7}
    8154:	b083      	sub	sp, #12
    8156:	af00      	add	r7, sp, #0
    8158:	6078      	str	r0, [r7, #4]
    815a:	460b      	mov	r3, r1
    815c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    815e:	bf00      	nop
    8160:	687b      	ldr	r3, [r7, #4]
    8162:	789b      	ldrb	r3, [r3, #2]
    8164:	b2da      	uxtb	r2, r3
    8166:	78fb      	ldrb	r3, [r7, #3]
    8168:	4013      	ands	r3, r2
    816a:	b2db      	uxtb	r3, r3
    816c:	2b00      	cmp	r3, #0
    816e:	d1f7      	bne.n	8160 <hri_usb_wait_for_sync+0xe>
	};
}
    8170:	bf00      	nop
    8172:	370c      	adds	r7, #12
    8174:	46bd      	mov	sp, r7
    8176:	f85d 7b04 	ldr.w	r7, [sp], #4
    817a:	4770      	bx	lr

0000817c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    817c:	b480      	push	{r7}
    817e:	b083      	sub	sp, #12
    8180:	af00      	add	r7, sp, #0
    8182:	6078      	str	r0, [r7, #4]
    8184:	460b      	mov	r3, r1
    8186:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	789b      	ldrb	r3, [r3, #2]
    818c:	b2da      	uxtb	r2, r3
    818e:	78fb      	ldrb	r3, [r7, #3]
    8190:	4013      	ands	r3, r2
    8192:	b2db      	uxtb	r3, r3
    8194:	2b00      	cmp	r3, #0
    8196:	bf14      	ite	ne
    8198:	2301      	movne	r3, #1
    819a:	2300      	moveq	r3, #0
    819c:	b2db      	uxtb	r3, r3
}
    819e:	4618      	mov	r0, r3
    81a0:	370c      	adds	r7, #12
    81a2:	46bd      	mov	sp, r7
    81a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a8:	4770      	bx	lr

000081aa <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    81aa:	b480      	push	{r7}
    81ac:	b085      	sub	sp, #20
    81ae:	af00      	add	r7, sp, #0
    81b0:	6078      	str	r0, [r7, #4]
    81b2:	460b      	mov	r3, r1
    81b4:	70fb      	strb	r3, [r7, #3]
    81b6:	4613      	mov	r3, r2
    81b8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    81ba:	78fb      	ldrb	r3, [r7, #3]
    81bc:	687a      	ldr	r2, [r7, #4]
    81be:	3308      	adds	r3, #8
    81c0:	015b      	lsls	r3, r3, #5
    81c2:	4413      	add	r3, r2
    81c4:	3307      	adds	r3, #7
    81c6:	781b      	ldrb	r3, [r3, #0]
    81c8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    81ca:	7bfa      	ldrb	r2, [r7, #15]
    81cc:	78bb      	ldrb	r3, [r7, #2]
    81ce:	4013      	ands	r3, r2
    81d0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    81d2:	7bfb      	ldrb	r3, [r7, #15]
}
    81d4:	4618      	mov	r0, r3
    81d6:	3714      	adds	r7, #20
    81d8:	46bd      	mov	sp, r7
    81da:	f85d 7b04 	ldr.w	r7, [sp], #4
    81de:	4770      	bx	lr

000081e0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    81e0:	b480      	push	{r7}
    81e2:	b083      	sub	sp, #12
    81e4:	af00      	add	r7, sp, #0
    81e6:	6078      	str	r0, [r7, #4]
    81e8:	460b      	mov	r3, r1
    81ea:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    81ec:	78fb      	ldrb	r3, [r7, #3]
    81ee:	687a      	ldr	r2, [r7, #4]
    81f0:	3308      	adds	r3, #8
    81f2:	015b      	lsls	r3, r3, #5
    81f4:	4413      	add	r3, r2
    81f6:	3307      	adds	r3, #7
    81f8:	781b      	ldrb	r3, [r3, #0]
    81fa:	b2db      	uxtb	r3, r3
}
    81fc:	4618      	mov	r0, r3
    81fe:	370c      	adds	r7, #12
    8200:	46bd      	mov	sp, r7
    8202:	f85d 7b04 	ldr.w	r7, [sp], #4
    8206:	4770      	bx	lr

00008208 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8208:	b480      	push	{r7}
    820a:	b083      	sub	sp, #12
    820c:	af00      	add	r7, sp, #0
    820e:	6078      	str	r0, [r7, #4]
    8210:	460b      	mov	r3, r1
    8212:	70fb      	strb	r3, [r7, #3]
    8214:	4613      	mov	r3, r2
    8216:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8218:	78fb      	ldrb	r3, [r7, #3]
    821a:	687a      	ldr	r2, [r7, #4]
    821c:	3308      	adds	r3, #8
    821e:	015b      	lsls	r3, r3, #5
    8220:	4413      	add	r3, r2
    8222:	3307      	adds	r3, #7
    8224:	78ba      	ldrb	r2, [r7, #2]
    8226:	701a      	strb	r2, [r3, #0]
}
    8228:	bf00      	nop
    822a:	370c      	adds	r7, #12
    822c:	46bd      	mov	sp, r7
    822e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8232:	4770      	bx	lr

00008234 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8234:	b480      	push	{r7}
    8236:	b083      	sub	sp, #12
    8238:	af00      	add	r7, sp, #0
    823a:	6078      	str	r0, [r7, #4]
    823c:	460b      	mov	r3, r1
    823e:	70fb      	strb	r3, [r7, #3]
    8240:	4613      	mov	r3, r2
    8242:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8244:	78fb      	ldrb	r3, [r7, #3]
    8246:	687a      	ldr	r2, [r7, #4]
    8248:	3308      	adds	r3, #8
    824a:	015b      	lsls	r3, r3, #5
    824c:	4413      	add	r3, r2
    824e:	3305      	adds	r3, #5
    8250:	78ba      	ldrb	r2, [r7, #2]
    8252:	701a      	strb	r2, [r3, #0]
}
    8254:	bf00      	nop
    8256:	370c      	adds	r7, #12
    8258:	46bd      	mov	sp, r7
    825a:	f85d 7b04 	ldr.w	r7, [sp], #4
    825e:	4770      	bx	lr

00008260 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8260:	b480      	push	{r7}
    8262:	b083      	sub	sp, #12
    8264:	af00      	add	r7, sp, #0
    8266:	6078      	str	r0, [r7, #4]
    8268:	460b      	mov	r3, r1
    826a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    826c:	78fb      	ldrb	r3, [r7, #3]
    826e:	687a      	ldr	r2, [r7, #4]
    8270:	3308      	adds	r3, #8
    8272:	015b      	lsls	r3, r3, #5
    8274:	4413      	add	r3, r2
    8276:	3306      	adds	r3, #6
    8278:	781b      	ldrb	r3, [r3, #0]
    827a:	b2db      	uxtb	r3, r3
}
    827c:	4618      	mov	r0, r3
    827e:	370c      	adds	r7, #12
    8280:	46bd      	mov	sp, r7
    8282:	f85d 7b04 	ldr.w	r7, [sp], #4
    8286:	4770      	bx	lr

00008288 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8288:	b480      	push	{r7}
    828a:	b083      	sub	sp, #12
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
    8290:	460b      	mov	r3, r1
    8292:	70fb      	strb	r3, [r7, #3]
    8294:	4613      	mov	r3, r2
    8296:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8298:	78fb      	ldrb	r3, [r7, #3]
    829a:	687a      	ldr	r2, [r7, #4]
    829c:	3308      	adds	r3, #8
    829e:	015b      	lsls	r3, r3, #5
    82a0:	4413      	add	r3, r2
    82a2:	3304      	adds	r3, #4
    82a4:	78ba      	ldrb	r2, [r7, #2]
    82a6:	701a      	strb	r2, [r3, #0]
}
    82a8:	bf00      	nop
    82aa:	370c      	adds	r7, #12
    82ac:	46bd      	mov	sp, r7
    82ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    82b2:	4770      	bx	lr

000082b4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    82b4:	b480      	push	{r7}
    82b6:	b083      	sub	sp, #12
    82b8:	af00      	add	r7, sp, #0
    82ba:	6078      	str	r0, [r7, #4]
    82bc:	460b      	mov	r3, r1
    82be:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    82c0:	78fb      	ldrb	r3, [r7, #3]
    82c2:	687a      	ldr	r2, [r7, #4]
    82c4:	015b      	lsls	r3, r3, #5
    82c6:	4413      	add	r3, r2
    82c8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    82cc:	2210      	movs	r2, #16
    82ce:	701a      	strb	r2, [r3, #0]
}
    82d0:	bf00      	nop
    82d2:	370c      	adds	r7, #12
    82d4:	46bd      	mov	sp, r7
    82d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    82da:	4770      	bx	lr

000082dc <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    82dc:	b480      	push	{r7}
    82de:	b083      	sub	sp, #12
    82e0:	af00      	add	r7, sp, #0
    82e2:	6078      	str	r0, [r7, #4]
    82e4:	460b      	mov	r3, r1
    82e6:	70fb      	strb	r3, [r7, #3]
    82e8:	4613      	mov	r3, r2
    82ea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    82ec:	78fb      	ldrb	r3, [r7, #3]
    82ee:	687a      	ldr	r2, [r7, #4]
    82f0:	015b      	lsls	r3, r3, #5
    82f2:	4413      	add	r3, r2
    82f4:	f203 1309 	addw	r3, r3, #265	; 0x109
    82f8:	78ba      	ldrb	r2, [r7, #2]
    82fa:	701a      	strb	r2, [r3, #0]
}
    82fc:	bf00      	nop
    82fe:	370c      	adds	r7, #12
    8300:	46bd      	mov	sp, r7
    8302:	f85d 7b04 	ldr.w	r7, [sp], #4
    8306:	4770      	bx	lr

00008308 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8308:	b480      	push	{r7}
    830a:	b083      	sub	sp, #12
    830c:	af00      	add	r7, sp, #0
    830e:	6078      	str	r0, [r7, #4]
    8310:	460b      	mov	r3, r1
    8312:	70fb      	strb	r3, [r7, #3]
    8314:	4613      	mov	r3, r2
    8316:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8318:	78fb      	ldrb	r3, [r7, #3]
    831a:	687a      	ldr	r2, [r7, #4]
    831c:	015b      	lsls	r3, r3, #5
    831e:	4413      	add	r3, r2
    8320:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8324:	78ba      	ldrb	r2, [r7, #2]
    8326:	701a      	strb	r2, [r3, #0]
}
    8328:	bf00      	nop
    832a:	370c      	adds	r7, #12
    832c:	46bd      	mov	sp, r7
    832e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8332:	4770      	bx	lr

00008334 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8334:	b480      	push	{r7}
    8336:	b085      	sub	sp, #20
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
    833c:	460b      	mov	r3, r1
    833e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8340:	78fb      	ldrb	r3, [r7, #3]
    8342:	687a      	ldr	r2, [r7, #4]
    8344:	3308      	adds	r3, #8
    8346:	015b      	lsls	r3, r3, #5
    8348:	4413      	add	r3, r2
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    834e:	7bfb      	ldrb	r3, [r7, #15]
    8350:	f003 0307 	and.w	r3, r3, #7
    8354:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8356:	7bfb      	ldrb	r3, [r7, #15]
}
    8358:	4618      	mov	r0, r3
    835a:	3714      	adds	r7, #20
    835c:	46bd      	mov	sp, r7
    835e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8362:	4770      	bx	lr

00008364 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8364:	b480      	push	{r7}
    8366:	b085      	sub	sp, #20
    8368:	af00      	add	r7, sp, #0
    836a:	6078      	str	r0, [r7, #4]
    836c:	460b      	mov	r3, r1
    836e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8370:	78fb      	ldrb	r3, [r7, #3]
    8372:	687a      	ldr	r2, [r7, #4]
    8374:	3308      	adds	r3, #8
    8376:	015b      	lsls	r3, r3, #5
    8378:	4413      	add	r3, r2
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    837e:	7bfb      	ldrb	r3, [r7, #15]
    8380:	091b      	lsrs	r3, r3, #4
    8382:	b2db      	uxtb	r3, r3
    8384:	f003 0307 	and.w	r3, r3, #7
    8388:	73fb      	strb	r3, [r7, #15]
	return tmp;
    838a:	7bfb      	ldrb	r3, [r7, #15]
}
    838c:	4618      	mov	r0, r3
    838e:	3714      	adds	r7, #20
    8390:	46bd      	mov	sp, r7
    8392:	f85d 7b04 	ldr.w	r7, [sp], #4
    8396:	4770      	bx	lr

00008398 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8398:	b480      	push	{r7}
    839a:	b083      	sub	sp, #12
    839c:	af00      	add	r7, sp, #0
    839e:	6078      	str	r0, [r7, #4]
    83a0:	460b      	mov	r3, r1
    83a2:	70fb      	strb	r3, [r7, #3]
    83a4:	4613      	mov	r3, r2
    83a6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    83a8:	78fb      	ldrb	r3, [r7, #3]
    83aa:	687a      	ldr	r2, [r7, #4]
    83ac:	3308      	adds	r3, #8
    83ae:	015b      	lsls	r3, r3, #5
    83b0:	4413      	add	r3, r2
    83b2:	78ba      	ldrb	r2, [r7, #2]
    83b4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    83b6:	bf00      	nop
    83b8:	370c      	adds	r7, #12
    83ba:	46bd      	mov	sp, r7
    83bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c0:	4770      	bx	lr

000083c2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    83c2:	b480      	push	{r7}
    83c4:	b083      	sub	sp, #12
    83c6:	af00      	add	r7, sp, #0
    83c8:	6078      	str	r0, [r7, #4]
    83ca:	460b      	mov	r3, r1
    83cc:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    83ce:	78fb      	ldrb	r3, [r7, #3]
    83d0:	687a      	ldr	r2, [r7, #4]
    83d2:	3308      	adds	r3, #8
    83d4:	015b      	lsls	r3, r3, #5
    83d6:	4413      	add	r3, r2
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	b2db      	uxtb	r3, r3
}
    83dc:	4618      	mov	r0, r3
    83de:	370c      	adds	r7, #12
    83e0:	46bd      	mov	sp, r7
    83e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83e6:	4770      	bx	lr

000083e8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    83e8:	b480      	push	{r7}
    83ea:	b083      	sub	sp, #12
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    83f0:	687b      	ldr	r3, [r7, #4]
    83f2:	8b9b      	ldrh	r3, [r3, #28]
    83f4:	b29b      	uxth	r3, r3
}
    83f6:	4618      	mov	r0, r3
    83f8:	370c      	adds	r7, #12
    83fa:	46bd      	mov	sp, r7
    83fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8400:	4770      	bx	lr

00008402 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8402:	b480      	push	{r7}
    8404:	b083      	sub	sp, #12
    8406:	af00      	add	r7, sp, #0
    8408:	6078      	str	r0, [r7, #4]
    840a:	460b      	mov	r3, r1
    840c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    840e:	687b      	ldr	r3, [r7, #4]
    8410:	887a      	ldrh	r2, [r7, #2]
    8412:	839a      	strh	r2, [r3, #28]
}
    8414:	bf00      	nop
    8416:	370c      	adds	r7, #12
    8418:	46bd      	mov	sp, r7
    841a:	f85d 7b04 	ldr.w	r7, [sp], #4
    841e:	4770      	bx	lr

00008420 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8420:	b480      	push	{r7}
    8422:	b083      	sub	sp, #12
    8424:	af00      	add	r7, sp, #0
    8426:	6078      	str	r0, [r7, #4]
    8428:	460b      	mov	r3, r1
    842a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    842c:	687b      	ldr	r3, [r7, #4]
    842e:	887a      	ldrh	r2, [r7, #2]
    8430:	831a      	strh	r2, [r3, #24]
}
    8432:	bf00      	nop
    8434:	370c      	adds	r7, #12
    8436:	46bd      	mov	sp, r7
    8438:	f85d 7b04 	ldr.w	r7, [sp], #4
    843c:	4770      	bx	lr

0000843e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    843e:	b480      	push	{r7}
    8440:	b083      	sub	sp, #12
    8442:	af00      	add	r7, sp, #0
    8444:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8446:	687b      	ldr	r3, [r7, #4]
    8448:	8b1b      	ldrh	r3, [r3, #24]
    844a:	b29b      	uxth	r3, r3
}
    844c:	4618      	mov	r0, r3
    844e:	370c      	adds	r7, #12
    8450:	46bd      	mov	sp, r7
    8452:	f85d 7b04 	ldr.w	r7, [sp], #4
    8456:	4770      	bx	lr

00008458 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8458:	b480      	push	{r7}
    845a:	b083      	sub	sp, #12
    845c:	af00      	add	r7, sp, #0
    845e:	6078      	str	r0, [r7, #4]
    8460:	460b      	mov	r3, r1
    8462:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	887a      	ldrh	r2, [r7, #2]
    8468:	829a      	strh	r2, [r3, #20]
}
    846a:	bf00      	nop
    846c:	370c      	adds	r7, #12
    846e:	46bd      	mov	sp, r7
    8470:	f85d 7b04 	ldr.w	r7, [sp], #4
    8474:	4770      	bx	lr

00008476 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8476:	b480      	push	{r7}
    8478:	b085      	sub	sp, #20
    847a:	af00      	add	r7, sp, #0
    847c:	6078      	str	r0, [r7, #4]
    847e:	460b      	mov	r3, r1
    8480:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8482:	687b      	ldr	r3, [r7, #4]
    8484:	789b      	ldrb	r3, [r3, #2]
    8486:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8488:	7bfa      	ldrb	r2, [r7, #15]
    848a:	78fb      	ldrb	r3, [r7, #3]
    848c:	4013      	ands	r3, r2
    848e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8490:	7bfb      	ldrb	r3, [r7, #15]
}
    8492:	4618      	mov	r0, r3
    8494:	3714      	adds	r7, #20
    8496:	46bd      	mov	sp, r7
    8498:	f85d 7b04 	ldr.w	r7, [sp], #4
    849c:	4770      	bx	lr
	...

000084a0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    84a0:	b580      	push	{r7, lr}
    84a2:	b082      	sub	sp, #8
    84a4:	af00      	add	r7, sp, #0
    84a6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    84a8:	687b      	ldr	r3, [r7, #4]
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	b2db      	uxtb	r3, r3
    84ae:	f023 0302 	bic.w	r3, r3, #2
    84b2:	b2da      	uxtb	r2, r3
    84b4:	687b      	ldr	r3, [r7, #4]
    84b6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    84b8:	2103      	movs	r1, #3
    84ba:	6878      	ldr	r0, [r7, #4]
    84bc:	4b02      	ldr	r3, [pc, #8]	; (84c8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    84be:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    84c0:	bf00      	nop
    84c2:	3708      	adds	r7, #8
    84c4:	46bd      	mov	sp, r7
    84c6:	bd80      	pop	{r7, pc}
    84c8:	00008153 	.word	0x00008153

000084cc <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    84cc:	b580      	push	{r7, lr}
    84ce:	b084      	sub	sp, #16
    84d0:	af00      	add	r7, sp, #0
    84d2:	6078      	str	r0, [r7, #4]
    84d4:	460b      	mov	r3, r1
    84d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    84d8:	2103      	movs	r1, #3
    84da:	6878      	ldr	r0, [r7, #4]
    84dc:	4b06      	ldr	r3, [pc, #24]	; (84f8 <hri_usb_get_CTRLA_reg+0x2c>)
    84de:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	781b      	ldrb	r3, [r3, #0]
    84e4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    84e6:	7bfa      	ldrb	r2, [r7, #15]
    84e8:	78fb      	ldrb	r3, [r7, #3]
    84ea:	4013      	ands	r3, r2
    84ec:	73fb      	strb	r3, [r7, #15]
	return tmp;
    84ee:	7bfb      	ldrb	r3, [r7, #15]
}
    84f0:	4618      	mov	r0, r3
    84f2:	3710      	adds	r7, #16
    84f4:	46bd      	mov	sp, r7
    84f6:	bd80      	pop	{r7, pc}
    84f8:	00008153 	.word	0x00008153

000084fc <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    84fc:	b580      	push	{r7, lr}
    84fe:	b082      	sub	sp, #8
    8500:	af00      	add	r7, sp, #0
    8502:	6078      	str	r0, [r7, #4]
    8504:	460b      	mov	r3, r1
    8506:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8508:	687b      	ldr	r3, [r7, #4]
    850a:	78fa      	ldrb	r2, [r7, #3]
    850c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    850e:	2103      	movs	r1, #3
    8510:	6878      	ldr	r0, [r7, #4]
    8512:	4b03      	ldr	r3, [pc, #12]	; (8520 <hri_usb_write_CTRLA_reg+0x24>)
    8514:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8516:	bf00      	nop
    8518:	3708      	adds	r7, #8
    851a:	46bd      	mov	sp, r7
    851c:	bd80      	pop	{r7, pc}
    851e:	bf00      	nop
    8520:	00008153 	.word	0x00008153

00008524 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8524:	b580      	push	{r7, lr}
    8526:	b082      	sub	sp, #8
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    852c:	2103      	movs	r1, #3
    852e:	6878      	ldr	r0, [r7, #4]
    8530:	4b04      	ldr	r3, [pc, #16]	; (8544 <hri_usb_read_CTRLA_reg+0x20>)
    8532:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8534:	687b      	ldr	r3, [r7, #4]
    8536:	781b      	ldrb	r3, [r3, #0]
    8538:	b2db      	uxtb	r3, r3
}
    853a:	4618      	mov	r0, r3
    853c:	3708      	adds	r7, #8
    853e:	46bd      	mov	sp, r7
    8540:	bd80      	pop	{r7, pc}
    8542:	bf00      	nop
    8544:	00008153 	.word	0x00008153

00008548 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8548:	b480      	push	{r7}
    854a:	b083      	sub	sp, #12
    854c:	af00      	add	r7, sp, #0
    854e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8550:	687b      	ldr	r3, [r7, #4]
    8552:	891b      	ldrh	r3, [r3, #8]
    8554:	b29b      	uxth	r3, r3
    8556:	f023 0301 	bic.w	r3, r3, #1
    855a:	b29a      	uxth	r2, r3
    855c:	687b      	ldr	r3, [r7, #4]
    855e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8560:	bf00      	nop
    8562:	370c      	adds	r7, #12
    8564:	46bd      	mov	sp, r7
    8566:	f85d 7b04 	ldr.w	r7, [sp], #4
    856a:	4770      	bx	lr

0000856c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    856c:	b480      	push	{r7}
    856e:	b083      	sub	sp, #12
    8570:	af00      	add	r7, sp, #0
    8572:	6078      	str	r0, [r7, #4]
    8574:	460b      	mov	r3, r1
    8576:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8578:	687b      	ldr	r3, [r7, #4]
    857a:	887a      	ldrh	r2, [r7, #2]
    857c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    857e:	bf00      	nop
    8580:	370c      	adds	r7, #12
    8582:	46bd      	mov	sp, r7
    8584:	f85d 7b04 	ldr.w	r7, [sp], #4
    8588:	4770      	bx	lr

0000858a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    858a:	b480      	push	{r7}
    858c:	b083      	sub	sp, #12
    858e:	af00      	add	r7, sp, #0
    8590:	6078      	str	r0, [r7, #4]
    8592:	460b      	mov	r3, r1
    8594:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8596:	687b      	ldr	r3, [r7, #4]
    8598:	78fa      	ldrb	r2, [r7, #3]
    859a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    859c:	bf00      	nop
    859e:	370c      	adds	r7, #12
    85a0:	46bd      	mov	sp, r7
    85a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85a6:	4770      	bx	lr

000085a8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    85a8:	b480      	push	{r7}
    85aa:	b083      	sub	sp, #12
    85ac:	af00      	add	r7, sp, #0
    85ae:	6078      	str	r0, [r7, #4]
    85b0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	683a      	ldr	r2, [r7, #0]
    85b6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    85b8:	bf00      	nop
    85ba:	370c      	adds	r7, #12
    85bc:	46bd      	mov	sp, r7
    85be:	f85d 7b04 	ldr.w	r7, [sp], #4
    85c2:	4770      	bx	lr

000085c4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    85c4:	b480      	push	{r7}
    85c6:	b083      	sub	sp, #12
    85c8:	af00      	add	r7, sp, #0
    85ca:	6078      	str	r0, [r7, #4]
    85cc:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    85ce:	2300      	movs	r3, #0
}
    85d0:	4618      	mov	r0, r3
    85d2:	370c      	adds	r7, #12
    85d4:	46bd      	mov	sp, r7
    85d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85da:	4770      	bx	lr

000085dc <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    85dc:	b480      	push	{r7}
    85de:	b085      	sub	sp, #20
    85e0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    85e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    85e6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    85e8:	4b28      	ldr	r3, [pc, #160]	; (868c <_usb_load_calib+0xb0>)
    85ea:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    85ec:	f003 031f 	and.w	r3, r3, #31
    85f0:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    85f2:	4b26      	ldr	r3, [pc, #152]	; (868c <_usb_load_calib+0xb0>)
    85f4:	681b      	ldr	r3, [r3, #0]
    85f6:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    85f8:	f003 031f 	and.w	r3, r3, #31
    85fc:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    85fe:	4b23      	ldr	r3, [pc, #140]	; (868c <_usb_load_calib+0xb0>)
    8600:	681b      	ldr	r3, [r3, #0]
    8602:	0a9b      	lsrs	r3, r3, #10
    8604:	f003 0307 	and.w	r3, r3, #7
    8608:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    860a:	68fb      	ldr	r3, [r7, #12]
    860c:	2b00      	cmp	r3, #0
    860e:	d002      	beq.n	8616 <_usb_load_calib+0x3a>
    8610:	68fb      	ldr	r3, [r7, #12]
    8612:	2b1f      	cmp	r3, #31
    8614:	d101      	bne.n	861a <_usb_load_calib+0x3e>
		pad_transn = 9;
    8616:	2309      	movs	r3, #9
    8618:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    861a:	68bb      	ldr	r3, [r7, #8]
    861c:	2b00      	cmp	r3, #0
    861e:	d002      	beq.n	8626 <_usb_load_calib+0x4a>
    8620:	68bb      	ldr	r3, [r7, #8]
    8622:	2b1f      	cmp	r3, #31
    8624:	d101      	bne.n	862a <_usb_load_calib+0x4e>
		pad_transp = 25;
    8626:	2319      	movs	r3, #25
    8628:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    862a:	687b      	ldr	r3, [r7, #4]
    862c:	2b00      	cmp	r3, #0
    862e:	d002      	beq.n	8636 <_usb_load_calib+0x5a>
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	2b07      	cmp	r3, #7
    8634:	d101      	bne.n	863a <_usb_load_calib+0x5e>
		pad_trim = 6;
    8636:	2306      	movs	r3, #6
    8638:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    863a:	68fb      	ldr	r3, [r7, #12]
    863c:	b29b      	uxth	r3, r3
    863e:	019b      	lsls	r3, r3, #6
    8640:	b29b      	uxth	r3, r3
    8642:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8646:	b29a      	uxth	r2, r3
    8648:	68bb      	ldr	r3, [r7, #8]
    864a:	b29b      	uxth	r3, r3
    864c:	f003 031f 	and.w	r3, r3, #31
    8650:	b29b      	uxth	r3, r3
    8652:	4313      	orrs	r3, r2
    8654:	b29a      	uxth	r2, r3
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	b29b      	uxth	r3, r3
    865a:	031b      	lsls	r3, r3, #12
    865c:	b29b      	uxth	r3, r3
    865e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8662:	b29b      	uxth	r3, r3
    8664:	4313      	orrs	r3, r2
    8666:	b29a      	uxth	r2, r3
    8668:	683b      	ldr	r3, [r7, #0]
    866a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    866c:	683a      	ldr	r2, [r7, #0]
    866e:	78d3      	ldrb	r3, [r2, #3]
    8670:	f043 0303 	orr.w	r3, r3, #3
    8674:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8676:	683a      	ldr	r2, [r7, #0]
    8678:	78d3      	ldrb	r3, [r2, #3]
    867a:	f043 030c 	orr.w	r3, r3, #12
    867e:	70d3      	strb	r3, [r2, #3]
}
    8680:	bf00      	nop
    8682:	3714      	adds	r7, #20
    8684:	46bd      	mov	sp, r7
    8686:	f85d 7b04 	ldr.w	r7, [sp], #4
    868a:	4770      	bx	lr
    868c:	00800084 	.word	0x00800084

00008690 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8690:	b580      	push	{r7, lr}
    8692:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8694:	bf00      	nop
    8696:	2203      	movs	r2, #3
    8698:	2100      	movs	r1, #0
    869a:	4804      	ldr	r0, [pc, #16]	; (86ac <_usb_d_dev_wait_dpll_rdy+0x1c>)
    869c:	4b04      	ldr	r3, [pc, #16]	; (86b0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    869e:	4798      	blx	r3
    86a0:	4603      	mov	r3, r0
    86a2:	2b03      	cmp	r3, #3
    86a4:	d1f7      	bne.n	8696 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    86a6:	bf00      	nop
    86a8:	bd80      	pop	{r7, pc}
    86aa:	bf00      	nop
    86ac:	40001000 	.word	0x40001000
    86b0:	000080c5 	.word	0x000080c5

000086b4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    86b4:	b580      	push	{r7, lr}
    86b6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    86b8:	480e      	ldr	r0, [pc, #56]	; (86f4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    86ba:	4b0f      	ldr	r3, [pc, #60]	; (86f8 <_usb_d_dev_wait_dfll_rdy+0x44>)
    86bc:	4798      	blx	r3
    86be:	4603      	mov	r3, r0
    86c0:	2b00      	cmp	r3, #0
    86c2:	d00a      	beq.n	86da <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    86c4:	bf00      	nop
    86c6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    86ca:	480a      	ldr	r0, [pc, #40]	; (86f4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    86cc:	4b0b      	ldr	r3, [pc, #44]	; (86fc <_usb_d_dev_wait_dfll_rdy+0x48>)
    86ce:	4798      	blx	r3
    86d0:	4603      	mov	r3, r0
    86d2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    86d6:	d1f6      	bne.n	86c6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    86d8:	e009      	b.n	86ee <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    86da:	bf00      	nop
    86dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    86e0:	4804      	ldr	r0, [pc, #16]	; (86f4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    86e2:	4b06      	ldr	r3, [pc, #24]	; (86fc <_usb_d_dev_wait_dfll_rdy+0x48>)
    86e4:	4798      	blx	r3
    86e6:	4603      	mov	r3, r0
    86e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    86ec:	d1f6      	bne.n	86dc <_usb_d_dev_wait_dfll_rdy+0x28>
}
    86ee:	bf00      	nop
    86f0:	bd80      	pop	{r7, pc}
    86f2:	bf00      	nop
    86f4:	40001000 	.word	0x40001000
    86f8:	00008123 	.word	0x00008123
    86fc:	000080fd 	.word	0x000080fd

00008700 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8700:	b580      	push	{r7, lr}
    8702:	b082      	sub	sp, #8
    8704:	af00      	add	r7, sp, #0
    8706:	4603      	mov	r3, r0
    8708:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    870a:	79fb      	ldrb	r3, [r7, #7]
    870c:	2b00      	cmp	r3, #0
    870e:	d102      	bne.n	8716 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8710:	4b05      	ldr	r3, [pc, #20]	; (8728 <_usb_d_dev_wait_clk_rdy+0x28>)
    8712:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8714:	e004      	b.n	8720 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8716:	79fb      	ldrb	r3, [r7, #7]
    8718:	2b01      	cmp	r3, #1
    871a:	d101      	bne.n	8720 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    871c:	4b03      	ldr	r3, [pc, #12]	; (872c <_usb_d_dev_wait_clk_rdy+0x2c>)
    871e:	4798      	blx	r3
}
    8720:	bf00      	nop
    8722:	3708      	adds	r7, #8
    8724:	46bd      	mov	sp, r7
    8726:	bd80      	pop	{r7, pc}
    8728:	000086b5 	.word	0x000086b5
    872c:	00008691 	.word	0x00008691

00008730 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8730:	b580      	push	{r7, lr}
    8732:	b082      	sub	sp, #8
    8734:	af00      	add	r7, sp, #0
    8736:	4603      	mov	r3, r0
    8738:	6039      	str	r1, [r7, #0]
    873a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    873c:	683b      	ldr	r3, [r7, #0]
    873e:	b2da      	uxtb	r2, r3
    8740:	79fb      	ldrb	r3, [r7, #7]
    8742:	4619      	mov	r1, r3
    8744:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8748:	4b02      	ldr	r3, [pc, #8]	; (8754 <_usbd_ep_int_ack+0x24>)
    874a:	4798      	blx	r3
}
    874c:	bf00      	nop
    874e:	3708      	adds	r7, #8
    8750:	46bd      	mov	sp, r7
    8752:	bd80      	pop	{r7, pc}
    8754:	00008209 	.word	0x00008209

00008758 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8758:	b580      	push	{r7, lr}
    875a:	b082      	sub	sp, #8
    875c:	af00      	add	r7, sp, #0
    875e:	4603      	mov	r3, r0
    8760:	6039      	str	r1, [r7, #0]
    8762:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8764:	683b      	ldr	r3, [r7, #0]
    8766:	b2da      	uxtb	r2, r3
    8768:	79fb      	ldrb	r3, [r7, #7]
    876a:	4619      	mov	r1, r3
    876c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8770:	4b02      	ldr	r3, [pc, #8]	; (877c <_usbd_ep_int_en+0x24>)
    8772:	4798      	blx	r3
}
    8774:	bf00      	nop
    8776:	3708      	adds	r7, #8
    8778:	46bd      	mov	sp, r7
    877a:	bd80      	pop	{r7, pc}
    877c:	000082dd 	.word	0x000082dd

00008780 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8780:	b580      	push	{r7, lr}
    8782:	b082      	sub	sp, #8
    8784:	af00      	add	r7, sp, #0
    8786:	4603      	mov	r3, r0
    8788:	6039      	str	r1, [r7, #0]
    878a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    878c:	683b      	ldr	r3, [r7, #0]
    878e:	b2da      	uxtb	r2, r3
    8790:	79fb      	ldrb	r3, [r7, #7]
    8792:	4619      	mov	r1, r3
    8794:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8798:	4b02      	ldr	r3, [pc, #8]	; (87a4 <_usbd_ep_int_dis+0x24>)
    879a:	4798      	blx	r3
}
    879c:	bf00      	nop
    879e:	3708      	adds	r7, #8
    87a0:	46bd      	mov	sp, r7
    87a2:	bd80      	pop	{r7, pc}
    87a4:	00008309 	.word	0x00008309

000087a8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    87a8:	b580      	push	{r7, lr}
    87aa:	b082      	sub	sp, #8
    87ac:	af00      	add	r7, sp, #0
    87ae:	4603      	mov	r3, r0
    87b0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    87b2:	79fb      	ldrb	r3, [r7, #7]
    87b4:	4619      	mov	r1, r3
    87b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ba:	4b06      	ldr	r3, [pc, #24]	; (87d4 <_usbd_ep_is_ctrl+0x2c>)
    87bc:	4798      	blx	r3
    87be:	4603      	mov	r3, r0
    87c0:	2b11      	cmp	r3, #17
    87c2:	bf0c      	ite	eq
    87c4:	2301      	moveq	r3, #1
    87c6:	2300      	movne	r3, #0
    87c8:	b2db      	uxtb	r3, r3
}
    87ca:	4618      	mov	r0, r3
    87cc:	3708      	adds	r7, #8
    87ce:	46bd      	mov	sp, r7
    87d0:	bd80      	pop	{r7, pc}
    87d2:	bf00      	nop
    87d4:	000083c3 	.word	0x000083c3

000087d8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    87d8:	b580      	push	{r7, lr}
    87da:	b082      	sub	sp, #8
    87dc:	af00      	add	r7, sp, #0
    87de:	4603      	mov	r3, r0
    87e0:	71fb      	strb	r3, [r7, #7]
    87e2:	460b      	mov	r3, r1
    87e4:	71bb      	strb	r3, [r7, #6]
    87e6:	4613      	mov	r3, r2
    87e8:	717b      	strb	r3, [r7, #5]
	if (st) {
    87ea:	797b      	ldrb	r3, [r7, #5]
    87ec:	2b00      	cmp	r3, #0
    87ee:	d00b      	beq.n	8808 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    87f0:	79bb      	ldrb	r3, [r7, #6]
    87f2:	2210      	movs	r2, #16
    87f4:	fa02 f303 	lsl.w	r3, r2, r3
    87f8:	b2da      	uxtb	r2, r3
    87fa:	79fb      	ldrb	r3, [r7, #7]
    87fc:	4619      	mov	r1, r3
    87fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8802:	4b09      	ldr	r3, [pc, #36]	; (8828 <_usbd_ep_set_stall+0x50>)
    8804:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8806:	e00a      	b.n	881e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8808:	79bb      	ldrb	r3, [r7, #6]
    880a:	2210      	movs	r2, #16
    880c:	fa02 f303 	lsl.w	r3, r2, r3
    8810:	b2da      	uxtb	r2, r3
    8812:	79fb      	ldrb	r3, [r7, #7]
    8814:	4619      	mov	r1, r3
    8816:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    881a:	4b04      	ldr	r3, [pc, #16]	; (882c <_usbd_ep_set_stall+0x54>)
    881c:	4798      	blx	r3
}
    881e:	bf00      	nop
    8820:	3708      	adds	r7, #8
    8822:	46bd      	mov	sp, r7
    8824:	bd80      	pop	{r7, pc}
    8826:	bf00      	nop
    8828:	00008235 	.word	0x00008235
    882c:	00008289 	.word	0x00008289

00008830 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8830:	b580      	push	{r7, lr}
    8832:	b084      	sub	sp, #16
    8834:	af00      	add	r7, sp, #0
    8836:	4603      	mov	r3, r0
    8838:	460a      	mov	r2, r1
    883a:	71fb      	strb	r3, [r7, #7]
    883c:	4613      	mov	r3, r2
    883e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8840:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8844:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8846:	79fb      	ldrb	r3, [r7, #7]
    8848:	4619      	mov	r1, r3
    884a:	68f8      	ldr	r0, [r7, #12]
    884c:	4b08      	ldr	r3, [pc, #32]	; (8870 <_usbd_ep_is_stalled+0x40>)
    884e:	4798      	blx	r3
    8850:	4603      	mov	r3, r0
    8852:	4619      	mov	r1, r3
    8854:	79bb      	ldrb	r3, [r7, #6]
    8856:	2210      	movs	r2, #16
    8858:	fa02 f303 	lsl.w	r3, r2, r3
    885c:	400b      	ands	r3, r1
    885e:	2b00      	cmp	r3, #0
    8860:	bf14      	ite	ne
    8862:	2301      	movne	r3, #1
    8864:	2300      	moveq	r3, #0
    8866:	b2db      	uxtb	r3, r3
}
    8868:	4618      	mov	r0, r3
    886a:	3710      	adds	r7, #16
    886c:	46bd      	mov	sp, r7
    886e:	bd80      	pop	{r7, pc}
    8870:	00008261 	.word	0x00008261

00008874 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8874:	b580      	push	{r7, lr}
    8876:	b084      	sub	sp, #16
    8878:	af00      	add	r7, sp, #0
    887a:	4603      	mov	r3, r0
    887c:	460a      	mov	r2, r1
    887e:	71fb      	strb	r3, [r7, #7]
    8880:	4613      	mov	r3, r2
    8882:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8884:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8888:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    888a:	79fb      	ldrb	r3, [r7, #7]
    888c:	4619      	mov	r1, r3
    888e:	68f8      	ldr	r0, [r7, #12]
    8890:	4b08      	ldr	r3, [pc, #32]	; (88b4 <_usbd_ep_is_stall_sent+0x40>)
    8892:	4798      	blx	r3
    8894:	4603      	mov	r3, r0
    8896:	4619      	mov	r1, r3
    8898:	79bb      	ldrb	r3, [r7, #6]
    889a:	2220      	movs	r2, #32
    889c:	fa02 f303 	lsl.w	r3, r2, r3
    88a0:	400b      	ands	r3, r1
    88a2:	2b00      	cmp	r3, #0
    88a4:	bf14      	ite	ne
    88a6:	2301      	movne	r3, #1
    88a8:	2300      	moveq	r3, #0
    88aa:	b2db      	uxtb	r3, r3
}
    88ac:	4618      	mov	r0, r3
    88ae:	3710      	adds	r7, #16
    88b0:	46bd      	mov	sp, r7
    88b2:	bd80      	pop	{r7, pc}
    88b4:	000081e1 	.word	0x000081e1

000088b8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    88b8:	b580      	push	{r7, lr}
    88ba:	b082      	sub	sp, #8
    88bc:	af00      	add	r7, sp, #0
    88be:	4603      	mov	r3, r0
    88c0:	460a      	mov	r2, r1
    88c2:	71fb      	strb	r3, [r7, #7]
    88c4:	4613      	mov	r3, r2
    88c6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    88c8:	79bb      	ldrb	r3, [r7, #6]
    88ca:	2220      	movs	r2, #32
    88cc:	409a      	lsls	r2, r3
    88ce:	79fb      	ldrb	r3, [r7, #7]
    88d0:	4611      	mov	r1, r2
    88d2:	4618      	mov	r0, r3
    88d4:	4b02      	ldr	r3, [pc, #8]	; (88e0 <_usbd_ep_ack_stall+0x28>)
    88d6:	4798      	blx	r3
}
    88d8:	bf00      	nop
    88da:	3708      	adds	r7, #8
    88dc:	46bd      	mov	sp, r7
    88de:	bd80      	pop	{r7, pc}
    88e0:	00008731 	.word	0x00008731

000088e4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    88e4:	b580      	push	{r7, lr}
    88e6:	b082      	sub	sp, #8
    88e8:	af00      	add	r7, sp, #0
    88ea:	4603      	mov	r3, r0
    88ec:	71fb      	strb	r3, [r7, #7]
    88ee:	460b      	mov	r3, r1
    88f0:	71bb      	strb	r3, [r7, #6]
    88f2:	4613      	mov	r3, r2
    88f4:	717b      	strb	r3, [r7, #5]
	if (en) {
    88f6:	797b      	ldrb	r3, [r7, #5]
    88f8:	2b00      	cmp	r3, #0
    88fa:	d008      	beq.n	890e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    88fc:	79bb      	ldrb	r3, [r7, #6]
    88fe:	2220      	movs	r2, #32
    8900:	409a      	lsls	r2, r3
    8902:	79fb      	ldrb	r3, [r7, #7]
    8904:	4611      	mov	r1, r2
    8906:	4618      	mov	r0, r3
    8908:	4b07      	ldr	r3, [pc, #28]	; (8928 <_usbd_ep_int_stall_en+0x44>)
    890a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    890c:	e007      	b.n	891e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    890e:	79bb      	ldrb	r3, [r7, #6]
    8910:	2220      	movs	r2, #32
    8912:	409a      	lsls	r2, r3
    8914:	79fb      	ldrb	r3, [r7, #7]
    8916:	4611      	mov	r1, r2
    8918:	4618      	mov	r0, r3
    891a:	4b04      	ldr	r3, [pc, #16]	; (892c <_usbd_ep_int_stall_en+0x48>)
    891c:	4798      	blx	r3
}
    891e:	bf00      	nop
    8920:	3708      	adds	r7, #8
    8922:	46bd      	mov	sp, r7
    8924:	bd80      	pop	{r7, pc}
    8926:	bf00      	nop
    8928:	00008759 	.word	0x00008759
    892c:	00008781 	.word	0x00008781

00008930 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8930:	b580      	push	{r7, lr}
    8932:	b082      	sub	sp, #8
    8934:	af00      	add	r7, sp, #0
    8936:	4603      	mov	r3, r0
    8938:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    893a:	79fb      	ldrb	r3, [r7, #7]
    893c:	4619      	mov	r1, r3
    893e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8942:	4b03      	ldr	r3, [pc, #12]	; (8950 <_usbd_ep_stop_setup+0x20>)
    8944:	4798      	blx	r3
}
    8946:	bf00      	nop
    8948:	3708      	adds	r7, #8
    894a:	46bd      	mov	sp, r7
    894c:	bd80      	pop	{r7, pc}
    894e:	bf00      	nop
    8950:	000082b5 	.word	0x000082b5

00008954 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8954:	b580      	push	{r7, lr}
    8956:	b082      	sub	sp, #8
    8958:	af00      	add	r7, sp, #0
    895a:	4603      	mov	r3, r0
    895c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    895e:	79fb      	ldrb	r3, [r7, #7]
    8960:	2210      	movs	r2, #16
    8962:	4619      	mov	r1, r3
    8964:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8968:	4b05      	ldr	r3, [pc, #20]	; (8980 <_usbd_ep_is_setup+0x2c>)
    896a:	4798      	blx	r3
    896c:	4603      	mov	r3, r0
    896e:	2b00      	cmp	r3, #0
    8970:	bf14      	ite	ne
    8972:	2301      	movne	r3, #1
    8974:	2300      	moveq	r3, #0
    8976:	b2db      	uxtb	r3, r3
}
    8978:	4618      	mov	r0, r3
    897a:	3708      	adds	r7, #8
    897c:	46bd      	mov	sp, r7
    897e:	bd80      	pop	{r7, pc}
    8980:	000081ab 	.word	0x000081ab

00008984 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8984:	b580      	push	{r7, lr}
    8986:	b082      	sub	sp, #8
    8988:	af00      	add	r7, sp, #0
    898a:	4603      	mov	r3, r0
    898c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    898e:	79fb      	ldrb	r3, [r7, #7]
    8990:	2110      	movs	r1, #16
    8992:	4618      	mov	r0, r3
    8994:	4b02      	ldr	r3, [pc, #8]	; (89a0 <_usbd_ep_ack_setup+0x1c>)
    8996:	4798      	blx	r3
}
    8998:	bf00      	nop
    899a:	3708      	adds	r7, #8
    899c:	46bd      	mov	sp, r7
    899e:	bd80      	pop	{r7, pc}
    89a0:	00008731 	.word	0x00008731

000089a4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b082      	sub	sp, #8
    89a8:	af00      	add	r7, sp, #0
    89aa:	4603      	mov	r3, r0
    89ac:	71fb      	strb	r3, [r7, #7]
    89ae:	460b      	mov	r3, r1
    89b0:	71bb      	strb	r3, [r7, #6]
    89b2:	4613      	mov	r3, r2
    89b4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    89b6:	797b      	ldrb	r3, [r7, #5]
    89b8:	2b00      	cmp	r3, #0
    89ba:	d00b      	beq.n	89d4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    89bc:	79bb      	ldrb	r3, [r7, #6]
    89be:	2201      	movs	r2, #1
    89c0:	fa02 f303 	lsl.w	r3, r2, r3
    89c4:	b2da      	uxtb	r2, r3
    89c6:	79fb      	ldrb	r3, [r7, #7]
    89c8:	4619      	mov	r1, r3
    89ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89ce:	4b09      	ldr	r3, [pc, #36]	; (89f4 <_usbd_ep_set_toggle+0x50>)
    89d0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    89d2:	e00a      	b.n	89ea <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    89d4:	79bb      	ldrb	r3, [r7, #6]
    89d6:	2201      	movs	r2, #1
    89d8:	fa02 f303 	lsl.w	r3, r2, r3
    89dc:	b2da      	uxtb	r2, r3
    89de:	79fb      	ldrb	r3, [r7, #7]
    89e0:	4619      	mov	r1, r3
    89e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89e6:	4b04      	ldr	r3, [pc, #16]	; (89f8 <_usbd_ep_set_toggle+0x54>)
    89e8:	4798      	blx	r3
}
    89ea:	bf00      	nop
    89ec:	3708      	adds	r7, #8
    89ee:	46bd      	mov	sp, r7
    89f0:	bd80      	pop	{r7, pc}
    89f2:	bf00      	nop
    89f4:	00008235 	.word	0x00008235
    89f8:	00008289 	.word	0x00008289

000089fc <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b082      	sub	sp, #8
    8a00:	af00      	add	r7, sp, #0
    8a02:	4603      	mov	r3, r0
    8a04:	460a      	mov	r2, r1
    8a06:	71fb      	strb	r3, [r7, #7]
    8a08:	4613      	mov	r3, r2
    8a0a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8a0c:	79bb      	ldrb	r3, [r7, #6]
    8a0e:	2201      	movs	r2, #1
    8a10:	409a      	lsls	r2, r3
    8a12:	79fb      	ldrb	r3, [r7, #7]
    8a14:	4611      	mov	r1, r2
    8a16:	4618      	mov	r0, r3
    8a18:	4b02      	ldr	r3, [pc, #8]	; (8a24 <_usbd_ep_ack_io_cpt+0x28>)
    8a1a:	4798      	blx	r3
}
    8a1c:	bf00      	nop
    8a1e:	3708      	adds	r7, #8
    8a20:	46bd      	mov	sp, r7
    8a22:	bd80      	pop	{r7, pc}
    8a24:	00008731 	.word	0x00008731

00008a28 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8a28:	b480      	push	{r7}
    8a2a:	b085      	sub	sp, #20
    8a2c:	af00      	add	r7, sp, #0
    8a2e:	4603      	mov	r3, r0
    8a30:	603a      	str	r2, [r7, #0]
    8a32:	71fb      	strb	r3, [r7, #7]
    8a34:	460b      	mov	r3, r1
    8a36:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8a38:	79fa      	ldrb	r2, [r7, #7]
    8a3a:	79bb      	ldrb	r3, [r7, #6]
    8a3c:	0052      	lsls	r2, r2, #1
    8a3e:	4413      	add	r3, r2
    8a40:	011b      	lsls	r3, r3, #4
    8a42:	4a06      	ldr	r2, [pc, #24]	; (8a5c <_usbd_ep_set_buf+0x34>)
    8a44:	4413      	add	r3, r2
    8a46:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8a48:	68fb      	ldr	r3, [r7, #12]
    8a4a:	683a      	ldr	r2, [r7, #0]
    8a4c:	601a      	str	r2, [r3, #0]
}
    8a4e:	bf00      	nop
    8a50:	3714      	adds	r7, #20
    8a52:	46bd      	mov	sp, r7
    8a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a58:	4770      	bx	lr
    8a5a:	bf00      	nop
    8a5c:	20000c9c 	.word	0x20000c9c

00008a60 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8a60:	b480      	push	{r7}
    8a62:	b085      	sub	sp, #20
    8a64:	af00      	add	r7, sp, #0
    8a66:	4603      	mov	r3, r0
    8a68:	71fb      	strb	r3, [r7, #7]
    8a6a:	460b      	mov	r3, r1
    8a6c:	71bb      	strb	r3, [r7, #6]
    8a6e:	4613      	mov	r3, r2
    8a70:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8a72:	79fa      	ldrb	r2, [r7, #7]
    8a74:	79bb      	ldrb	r3, [r7, #6]
    8a76:	0052      	lsls	r2, r2, #1
    8a78:	4413      	add	r3, r2
    8a7a:	011b      	lsls	r3, r3, #4
    8a7c:	4a08      	ldr	r2, [pc, #32]	; (8aa0 <_usbd_ep_set_in_count+0x40>)
    8a7e:	4413      	add	r3, r2
    8a80:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8a82:	88bb      	ldrh	r3, [r7, #4]
    8a84:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8a88:	b299      	uxth	r1, r3
    8a8a:	68fa      	ldr	r2, [r7, #12]
    8a8c:	6853      	ldr	r3, [r2, #4]
    8a8e:	f361 339b 	bfi	r3, r1, #14, #14
    8a92:	6053      	str	r3, [r2, #4]
}
    8a94:	bf00      	nop
    8a96:	3714      	adds	r7, #20
    8a98:	46bd      	mov	sp, r7
    8a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a9e:	4770      	bx	lr
    8aa0:	20000c9c 	.word	0x20000c9c

00008aa4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8aa4:	b480      	push	{r7}
    8aa6:	b085      	sub	sp, #20
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	4603      	mov	r3, r0
    8aac:	71fb      	strb	r3, [r7, #7]
    8aae:	460b      	mov	r3, r1
    8ab0:	71bb      	strb	r3, [r7, #6]
    8ab2:	4613      	mov	r3, r2
    8ab4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8ab6:	79fa      	ldrb	r2, [r7, #7]
    8ab8:	79bb      	ldrb	r3, [r7, #6]
    8aba:	0052      	lsls	r2, r2, #1
    8abc:	4413      	add	r3, r2
    8abe:	011b      	lsls	r3, r3, #4
    8ac0:	4a08      	ldr	r2, [pc, #32]	; (8ae4 <_usbd_ep_set_in_size+0x40>)
    8ac2:	4413      	add	r3, r2
    8ac4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8ac6:	88bb      	ldrh	r3, [r7, #4]
    8ac8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8acc:	b299      	uxth	r1, r3
    8ace:	68fa      	ldr	r2, [r7, #12]
    8ad0:	6853      	ldr	r3, [r2, #4]
    8ad2:	f361 030d 	bfi	r3, r1, #0, #14
    8ad6:	6053      	str	r3, [r2, #4]
}
    8ad8:	bf00      	nop
    8ada:	3714      	adds	r7, #20
    8adc:	46bd      	mov	sp, r7
    8ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae2:	4770      	bx	lr
    8ae4:	20000c9c 	.word	0x20000c9c

00008ae8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8ae8:	b480      	push	{r7}
    8aea:	b085      	sub	sp, #20
    8aec:	af00      	add	r7, sp, #0
    8aee:	4603      	mov	r3, r0
    8af0:	71fb      	strb	r3, [r7, #7]
    8af2:	460b      	mov	r3, r1
    8af4:	71bb      	strb	r3, [r7, #6]
    8af6:	4613      	mov	r3, r2
    8af8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8afa:	79fa      	ldrb	r2, [r7, #7]
    8afc:	79bb      	ldrb	r3, [r7, #6]
    8afe:	0052      	lsls	r2, r2, #1
    8b00:	4413      	add	r3, r2
    8b02:	011b      	lsls	r3, r3, #4
    8b04:	4a08      	ldr	r2, [pc, #32]	; (8b28 <_usbd_ep_set_out_count+0x40>)
    8b06:	4413      	add	r3, r2
    8b08:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8b0a:	88bb      	ldrh	r3, [r7, #4]
    8b0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b10:	b299      	uxth	r1, r3
    8b12:	68fa      	ldr	r2, [r7, #12]
    8b14:	6853      	ldr	r3, [r2, #4]
    8b16:	f361 030d 	bfi	r3, r1, #0, #14
    8b1a:	6053      	str	r3, [r2, #4]
}
    8b1c:	bf00      	nop
    8b1e:	3714      	adds	r7, #20
    8b20:	46bd      	mov	sp, r7
    8b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b26:	4770      	bx	lr
    8b28:	20000c9c 	.word	0x20000c9c

00008b2c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8b2c:	b480      	push	{r7}
    8b2e:	b085      	sub	sp, #20
    8b30:	af00      	add	r7, sp, #0
    8b32:	4603      	mov	r3, r0
    8b34:	71fb      	strb	r3, [r7, #7]
    8b36:	460b      	mov	r3, r1
    8b38:	71bb      	strb	r3, [r7, #6]
    8b3a:	4613      	mov	r3, r2
    8b3c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8b3e:	79fa      	ldrb	r2, [r7, #7]
    8b40:	79bb      	ldrb	r3, [r7, #6]
    8b42:	0052      	lsls	r2, r2, #1
    8b44:	4413      	add	r3, r2
    8b46:	011b      	lsls	r3, r3, #4
    8b48:	4a08      	ldr	r2, [pc, #32]	; (8b6c <_usbd_ep_set_out_size+0x40>)
    8b4a:	4413      	add	r3, r2
    8b4c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8b4e:	88bb      	ldrh	r3, [r7, #4]
    8b50:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b54:	b299      	uxth	r1, r3
    8b56:	68fa      	ldr	r2, [r7, #12]
    8b58:	6853      	ldr	r3, [r2, #4]
    8b5a:	f361 339b 	bfi	r3, r1, #14, #14
    8b5e:	6053      	str	r3, [r2, #4]
}
    8b60:	bf00      	nop
    8b62:	3714      	adds	r7, #20
    8b64:	46bd      	mov	sp, r7
    8b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b6a:	4770      	bx	lr
    8b6c:	20000c9c 	.word	0x20000c9c

00008b70 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8b70:	b580      	push	{r7, lr}
    8b72:	b084      	sub	sp, #16
    8b74:	af00      	add	r7, sp, #0
    8b76:	60ba      	str	r2, [r7, #8]
    8b78:	607b      	str	r3, [r7, #4]
    8b7a:	4603      	mov	r3, r0
    8b7c:	73fb      	strb	r3, [r7, #15]
    8b7e:	460b      	mov	r3, r1
    8b80:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8b82:	68bb      	ldr	r3, [r7, #8]
    8b84:	b29a      	uxth	r2, r3
    8b86:	7bb9      	ldrb	r1, [r7, #14]
    8b88:	7bfb      	ldrb	r3, [r7, #15]
    8b8a:	4618      	mov	r0, r3
    8b8c:	4b06      	ldr	r3, [pc, #24]	; (8ba8 <_usbd_ep_set_in_trans+0x38>)
    8b8e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	b29a      	uxth	r2, r3
    8b94:	7bb9      	ldrb	r1, [r7, #14]
    8b96:	7bfb      	ldrb	r3, [r7, #15]
    8b98:	4618      	mov	r0, r3
    8b9a:	4b04      	ldr	r3, [pc, #16]	; (8bac <_usbd_ep_set_in_trans+0x3c>)
    8b9c:	4798      	blx	r3
}
    8b9e:	bf00      	nop
    8ba0:	3710      	adds	r7, #16
    8ba2:	46bd      	mov	sp, r7
    8ba4:	bd80      	pop	{r7, pc}
    8ba6:	bf00      	nop
    8ba8:	00008aa5 	.word	0x00008aa5
    8bac:	00008a61 	.word	0x00008a61

00008bb0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b084      	sub	sp, #16
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	60ba      	str	r2, [r7, #8]
    8bb8:	607b      	str	r3, [r7, #4]
    8bba:	4603      	mov	r3, r0
    8bbc:	73fb      	strb	r3, [r7, #15]
    8bbe:	460b      	mov	r3, r1
    8bc0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8bc2:	68bb      	ldr	r3, [r7, #8]
    8bc4:	b29a      	uxth	r2, r3
    8bc6:	7bb9      	ldrb	r1, [r7, #14]
    8bc8:	7bfb      	ldrb	r3, [r7, #15]
    8bca:	4618      	mov	r0, r3
    8bcc:	4b06      	ldr	r3, [pc, #24]	; (8be8 <_usbd_ep_set_out_trans+0x38>)
    8bce:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8bd0:	687b      	ldr	r3, [r7, #4]
    8bd2:	b29a      	uxth	r2, r3
    8bd4:	7bb9      	ldrb	r1, [r7, #14]
    8bd6:	7bfb      	ldrb	r3, [r7, #15]
    8bd8:	4618      	mov	r0, r3
    8bda:	4b04      	ldr	r3, [pc, #16]	; (8bec <_usbd_ep_set_out_trans+0x3c>)
    8bdc:	4798      	blx	r3
}
    8bde:	bf00      	nop
    8be0:	3710      	adds	r7, #16
    8be2:	46bd      	mov	sp, r7
    8be4:	bd80      	pop	{r7, pc}
    8be6:	bf00      	nop
    8be8:	00008b2d 	.word	0x00008b2d
    8bec:	00008ae9 	.word	0x00008ae9

00008bf0 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8bf0:	b480      	push	{r7}
    8bf2:	b085      	sub	sp, #20
    8bf4:	af00      	add	r7, sp, #0
    8bf6:	4603      	mov	r3, r0
    8bf8:	460a      	mov	r2, r1
    8bfa:	71fb      	strb	r3, [r7, #7]
    8bfc:	4613      	mov	r3, r2
    8bfe:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8c00:	79fa      	ldrb	r2, [r7, #7]
    8c02:	79bb      	ldrb	r3, [r7, #6]
    8c04:	0052      	lsls	r2, r2, #1
    8c06:	4413      	add	r3, r2
    8c08:	011b      	lsls	r3, r3, #4
    8c0a:	4a06      	ldr	r2, [pc, #24]	; (8c24 <_usbd_ep_clear_bank_status+0x34>)
    8c0c:	4413      	add	r3, r2
    8c0e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8c10:	68fb      	ldr	r3, [r7, #12]
    8c12:	2200      	movs	r2, #0
    8c14:	729a      	strb	r2, [r3, #10]
}
    8c16:	bf00      	nop
    8c18:	3714      	adds	r7, #20
    8c1a:	46bd      	mov	sp, r7
    8c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c20:	4770      	bx	lr
    8c22:	bf00      	nop
    8c24:	20000c9c 	.word	0x20000c9c

00008c28 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	b082      	sub	sp, #8
    8c2c:	af00      	add	r7, sp, #0
    8c2e:	4603      	mov	r3, r0
    8c30:	71fb      	strb	r3, [r7, #7]
    8c32:	460b      	mov	r3, r1
    8c34:	71bb      	strb	r3, [r7, #6]
    8c36:	4613      	mov	r3, r2
    8c38:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8c3a:	797b      	ldrb	r3, [r7, #5]
    8c3c:	2b00      	cmp	r3, #0
    8c3e:	d00b      	beq.n	8c58 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8c40:	79bb      	ldrb	r3, [r7, #6]
    8c42:	2240      	movs	r2, #64	; 0x40
    8c44:	fa02 f303 	lsl.w	r3, r2, r3
    8c48:	b2da      	uxtb	r2, r3
    8c4a:	79fb      	ldrb	r3, [r7, #7]
    8c4c:	4619      	mov	r1, r3
    8c4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c52:	4b09      	ldr	r3, [pc, #36]	; (8c78 <_usbd_ep_set_in_rdy+0x50>)
    8c54:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8c56:	e00a      	b.n	8c6e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8c58:	79bb      	ldrb	r3, [r7, #6]
    8c5a:	2240      	movs	r2, #64	; 0x40
    8c5c:	fa02 f303 	lsl.w	r3, r2, r3
    8c60:	b2da      	uxtb	r2, r3
    8c62:	79fb      	ldrb	r3, [r7, #7]
    8c64:	4619      	mov	r1, r3
    8c66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c6a:	4b04      	ldr	r3, [pc, #16]	; (8c7c <_usbd_ep_set_in_rdy+0x54>)
    8c6c:	4798      	blx	r3
}
    8c6e:	bf00      	nop
    8c70:	3708      	adds	r7, #8
    8c72:	46bd      	mov	sp, r7
    8c74:	bd80      	pop	{r7, pc}
    8c76:	bf00      	nop
    8c78:	00008235 	.word	0x00008235
    8c7c:	00008289 	.word	0x00008289

00008c80 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8c80:	b580      	push	{r7, lr}
    8c82:	b082      	sub	sp, #8
    8c84:	af00      	add	r7, sp, #0
    8c86:	4603      	mov	r3, r0
    8c88:	71fb      	strb	r3, [r7, #7]
    8c8a:	460b      	mov	r3, r1
    8c8c:	71bb      	strb	r3, [r7, #6]
    8c8e:	4613      	mov	r3, r2
    8c90:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8c92:	797b      	ldrb	r3, [r7, #5]
    8c94:	2b00      	cmp	r3, #0
    8c96:	d00b      	beq.n	8cb0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8c98:	79bb      	ldrb	r3, [r7, #6]
    8c9a:	2240      	movs	r2, #64	; 0x40
    8c9c:	fa02 f303 	lsl.w	r3, r2, r3
    8ca0:	b2da      	uxtb	r2, r3
    8ca2:	79fb      	ldrb	r3, [r7, #7]
    8ca4:	4619      	mov	r1, r3
    8ca6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8caa:	4b09      	ldr	r3, [pc, #36]	; (8cd0 <_usbd_ep_set_out_rdy+0x50>)
    8cac:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8cae:	e00a      	b.n	8cc6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8cb0:	79bb      	ldrb	r3, [r7, #6]
    8cb2:	2240      	movs	r2, #64	; 0x40
    8cb4:	fa02 f303 	lsl.w	r3, r2, r3
    8cb8:	b2da      	uxtb	r2, r3
    8cba:	79fb      	ldrb	r3, [r7, #7]
    8cbc:	4619      	mov	r1, r3
    8cbe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cc2:	4b04      	ldr	r3, [pc, #16]	; (8cd4 <_usbd_ep_set_out_rdy+0x54>)
    8cc4:	4798      	blx	r3
}
    8cc6:	bf00      	nop
    8cc8:	3708      	adds	r7, #8
    8cca:	46bd      	mov	sp, r7
    8ccc:	bd80      	pop	{r7, pc}
    8cce:	bf00      	nop
    8cd0:	00008289 	.word	0x00008289
    8cd4:	00008235 	.word	0x00008235

00008cd8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8cd8:	b480      	push	{r7}
    8cda:	b083      	sub	sp, #12
    8cdc:	af00      	add	r7, sp, #0
    8cde:	4603      	mov	r3, r0
    8ce0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8ce2:	88fb      	ldrh	r3, [r7, #6]
    8ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8ce8:	d820      	bhi.n	8d2c <_usbd_ep_pcksize_size+0x54>
    8cea:	88fb      	ldrh	r3, [r7, #6]
    8cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8cf0:	d81a      	bhi.n	8d28 <_usbd_ep_pcksize_size+0x50>
    8cf2:	88fb      	ldrh	r3, [r7, #6]
    8cf4:	2b80      	cmp	r3, #128	; 0x80
    8cf6:	d815      	bhi.n	8d24 <_usbd_ep_pcksize_size+0x4c>
    8cf8:	88fb      	ldrh	r3, [r7, #6]
    8cfa:	2b40      	cmp	r3, #64	; 0x40
    8cfc:	d810      	bhi.n	8d20 <_usbd_ep_pcksize_size+0x48>
    8cfe:	88fb      	ldrh	r3, [r7, #6]
    8d00:	2b20      	cmp	r3, #32
    8d02:	d80b      	bhi.n	8d1c <_usbd_ep_pcksize_size+0x44>
    8d04:	88fb      	ldrh	r3, [r7, #6]
    8d06:	2b10      	cmp	r3, #16
    8d08:	d806      	bhi.n	8d18 <_usbd_ep_pcksize_size+0x40>
    8d0a:	88fb      	ldrh	r3, [r7, #6]
    8d0c:	2b08      	cmp	r3, #8
    8d0e:	bf8c      	ite	hi
    8d10:	2301      	movhi	r3, #1
    8d12:	2300      	movls	r3, #0
    8d14:	b2db      	uxtb	r3, r3
    8d16:	e00a      	b.n	8d2e <_usbd_ep_pcksize_size+0x56>
    8d18:	2302      	movs	r3, #2
    8d1a:	e008      	b.n	8d2e <_usbd_ep_pcksize_size+0x56>
    8d1c:	2303      	movs	r3, #3
    8d1e:	e006      	b.n	8d2e <_usbd_ep_pcksize_size+0x56>
    8d20:	2304      	movs	r3, #4
    8d22:	e004      	b.n	8d2e <_usbd_ep_pcksize_size+0x56>
    8d24:	2305      	movs	r3, #5
    8d26:	e002      	b.n	8d2e <_usbd_ep_pcksize_size+0x56>
    8d28:	2306      	movs	r3, #6
    8d2a:	e000      	b.n	8d2e <_usbd_ep_pcksize_size+0x56>
    8d2c:	2307      	movs	r3, #7
}
    8d2e:	4618      	mov	r0, r3
    8d30:	370c      	adds	r7, #12
    8d32:	46bd      	mov	sp, r7
    8d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d38:	4770      	bx	lr
	...

00008d3c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8d3c:	b480      	push	{r7}
    8d3e:	b085      	sub	sp, #20
    8d40:	af00      	add	r7, sp, #0
    8d42:	4603      	mov	r3, r0
    8d44:	460a      	mov	r2, r1
    8d46:	71fb      	strb	r3, [r7, #7]
    8d48:	4613      	mov	r3, r2
    8d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8d4c:	79fb      	ldrb	r3, [r7, #7]
    8d4e:	2b00      	cmp	r3, #0
    8d50:	d008      	beq.n	8d64 <_usb_d_dev_ept+0x28>
    8d52:	79bb      	ldrb	r3, [r7, #6]
    8d54:	2b00      	cmp	r3, #0
    8d56:	d003      	beq.n	8d60 <_usb_d_dev_ept+0x24>
    8d58:	79fb      	ldrb	r3, [r7, #7]
    8d5a:	3304      	adds	r3, #4
    8d5c:	b2db      	uxtb	r3, r3
    8d5e:	e002      	b.n	8d66 <_usb_d_dev_ept+0x2a>
    8d60:	79fb      	ldrb	r3, [r7, #7]
    8d62:	e000      	b.n	8d66 <_usb_d_dev_ept+0x2a>
    8d64:	2300      	movs	r3, #0
    8d66:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8d68:	7bfa      	ldrb	r2, [r7, #15]
    8d6a:	4613      	mov	r3, r2
    8d6c:	009b      	lsls	r3, r3, #2
    8d6e:	4413      	add	r3, r2
    8d70:	009b      	lsls	r3, r3, #2
    8d72:	3310      	adds	r3, #16
    8d74:	4a04      	ldr	r2, [pc, #16]	; (8d88 <_usb_d_dev_ept+0x4c>)
    8d76:	4413      	add	r3, r2
    8d78:	3304      	adds	r3, #4
}
    8d7a:	4618      	mov	r0, r3
    8d7c:	3714      	adds	r7, #20
    8d7e:	46bd      	mov	sp, r7
    8d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d84:	4770      	bx	lr
    8d86:	bf00      	nop
    8d88:	20000bd4 	.word	0x20000bd4

00008d8c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8d90:	2104      	movs	r1, #4
    8d92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d96:	4b03      	ldr	r3, [pc, #12]	; (8da4 <_usb_d_dev_sof+0x18>)
    8d98:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8d9a:	4b03      	ldr	r3, [pc, #12]	; (8da8 <_usb_d_dev_sof+0x1c>)
    8d9c:	681b      	ldr	r3, [r3, #0]
    8d9e:	4798      	blx	r3
}
    8da0:	bf00      	nop
    8da2:	bd80      	pop	{r7, pc}
    8da4:	00008403 	.word	0x00008403
    8da8:	20000bd4 	.word	0x20000bd4

00008dac <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8dac:	b580      	push	{r7, lr}
    8dae:	b084      	sub	sp, #16
    8db0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8db2:	2300      	movs	r3, #0
    8db4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8db6:	f240 2101 	movw	r1, #513	; 0x201
    8dba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dbe:	4b1a      	ldr	r3, [pc, #104]	; (8e28 <_usb_d_dev_lpmsusp+0x7c>)
    8dc0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8dc2:	f240 2101 	movw	r1, #513	; 0x201
    8dc6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dca:	4b18      	ldr	r3, [pc, #96]	; (8e2c <_usb_d_dev_lpmsusp+0x80>)
    8dcc:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8dce:	2170      	movs	r1, #112	; 0x70
    8dd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dd4:	4b16      	ldr	r3, [pc, #88]	; (8e30 <_usb_d_dev_lpmsusp+0x84>)
    8dd6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8dd8:	2300      	movs	r3, #0
    8dda:	73fb      	strb	r3, [r7, #15]
    8ddc:	e018      	b.n	8e10 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8dde:	7bfb      	ldrb	r3, [r7, #15]
    8de0:	015b      	lsls	r3, r3, #5
    8de2:	4a14      	ldr	r2, [pc, #80]	; (8e34 <_usb_d_dev_lpmsusp+0x88>)
    8de4:	4413      	add	r3, r2
    8de6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	891b      	ldrh	r3, [r3, #8]
    8dec:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8df0:	b2db      	uxtb	r3, r3
    8df2:	2b03      	cmp	r3, #3
    8df4:	d109      	bne.n	8e0a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	891b      	ldrh	r3, [r3, #8]
    8dfa:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8dfe:	b29b      	uxth	r3, r3
    8e00:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8e02:	687b      	ldr	r3, [r7, #4]
    8e04:	2200      	movs	r2, #0
    8e06:	811a      	strh	r2, [r3, #8]
			break;
    8e08:	e005      	b.n	8e16 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8e0a:	7bfb      	ldrb	r3, [r7, #15]
    8e0c:	3301      	adds	r3, #1
    8e0e:	73fb      	strb	r3, [r7, #15]
    8e10:	7bfb      	ldrb	r3, [r7, #15]
    8e12:	2b03      	cmp	r3, #3
    8e14:	d9e3      	bls.n	8dde <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8e16:	4b08      	ldr	r3, [pc, #32]	; (8e38 <_usb_d_dev_lpmsusp+0x8c>)
    8e18:	685b      	ldr	r3, [r3, #4]
    8e1a:	68b9      	ldr	r1, [r7, #8]
    8e1c:	2003      	movs	r0, #3
    8e1e:	4798      	blx	r3
}
    8e20:	bf00      	nop
    8e22:	3710      	adds	r7, #16
    8e24:	46bd      	mov	sp, r7
    8e26:	bd80      	pop	{r7, pc}
    8e28:	00008403 	.word	0x00008403
    8e2c:	00008459 	.word	0x00008459
    8e30:	00008421 	.word	0x00008421
    8e34:	20000c9c 	.word	0x20000c9c
    8e38:	20000bd4 	.word	0x20000bd4

00008e3c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8e3c:	b580      	push	{r7, lr}
    8e3e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8e40:	2180      	movs	r1, #128	; 0x80
    8e42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e46:	4b04      	ldr	r3, [pc, #16]	; (8e58 <_usb_d_dev_ramerr+0x1c>)
    8e48:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8e4a:	4b04      	ldr	r3, [pc, #16]	; (8e5c <_usb_d_dev_ramerr+0x20>)
    8e4c:	685b      	ldr	r3, [r3, #4]
    8e4e:	2100      	movs	r1, #0
    8e50:	2005      	movs	r0, #5
    8e52:	4798      	blx	r3
}
    8e54:	bf00      	nop
    8e56:	bd80      	pop	{r7, pc}
    8e58:	00008403 	.word	0x00008403
    8e5c:	20000bd4 	.word	0x20000bd4

00008e60 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8e60:	b580      	push	{r7, lr}
    8e62:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8e64:	2170      	movs	r1, #112	; 0x70
    8e66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e6a:	4b0b      	ldr	r3, [pc, #44]	; (8e98 <_usb_d_dev_wakeup+0x38>)
    8e6c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8e6e:	2170      	movs	r1, #112	; 0x70
    8e70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e74:	4b09      	ldr	r3, [pc, #36]	; (8e9c <_usb_d_dev_wakeup+0x3c>)
    8e76:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8e78:	f240 2101 	movw	r1, #513	; 0x201
    8e7c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e80:	4b07      	ldr	r3, [pc, #28]	; (8ea0 <_usb_d_dev_wakeup+0x40>)
    8e82:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8e84:	2000      	movs	r0, #0
    8e86:	4b07      	ldr	r3, [pc, #28]	; (8ea4 <_usb_d_dev_wakeup+0x44>)
    8e88:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8e8a:	4b07      	ldr	r3, [pc, #28]	; (8ea8 <_usb_d_dev_wakeup+0x48>)
    8e8c:	685b      	ldr	r3, [r3, #4]
    8e8e:	2100      	movs	r1, #0
    8e90:	2002      	movs	r0, #2
    8e92:	4798      	blx	r3
}
    8e94:	bf00      	nop
    8e96:	bd80      	pop	{r7, pc}
    8e98:	00008403 	.word	0x00008403
    8e9c:	00008459 	.word	0x00008459
    8ea0:	00008421 	.word	0x00008421
    8ea4:	00008701 	.word	0x00008701
    8ea8:	20000bd4 	.word	0x20000bd4

00008eac <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8eac:	b580      	push	{r7, lr}
    8eae:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8eb0:	2200      	movs	r2, #0
    8eb2:	2100      	movs	r1, #0
    8eb4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8eb8:	4b0d      	ldr	r3, [pc, #52]	; (8ef0 <_usb_d_dev_reset+0x44>)
    8eba:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8ebc:	2108      	movs	r1, #8
    8ebe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ec2:	4b0c      	ldr	r3, [pc, #48]	; (8ef4 <_usb_d_dev_reset+0x48>)
    8ec4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8ec6:	2170      	movs	r1, #112	; 0x70
    8ec8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ecc:	4b0a      	ldr	r3, [pc, #40]	; (8ef8 <_usb_d_dev_reset+0x4c>)
    8ece:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8ed0:	f240 2101 	movw	r1, #513	; 0x201
    8ed4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ed8:	4b08      	ldr	r3, [pc, #32]	; (8efc <_usb_d_dev_reset+0x50>)
    8eda:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8edc:	4b08      	ldr	r3, [pc, #32]	; (8f00 <_usb_d_dev_reset+0x54>)
    8ede:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8ee0:	4b08      	ldr	r3, [pc, #32]	; (8f04 <_usb_d_dev_reset+0x58>)
    8ee2:	685b      	ldr	r3, [r3, #4]
    8ee4:	2100      	movs	r1, #0
    8ee6:	2001      	movs	r0, #1
    8ee8:	4798      	blx	r3
}
    8eea:	bf00      	nop
    8eec:	bd80      	pop	{r7, pc}
    8eee:	bf00      	nop
    8ef0:	00008399 	.word	0x00008399
    8ef4:	00008403 	.word	0x00008403
    8ef8:	00008459 	.word	0x00008459
    8efc:	00008421 	.word	0x00008421
    8f00:	00009a69 	.word	0x00009a69
    8f04:	20000bd4 	.word	0x20000bd4

00008f08 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8f0c:	f240 2101 	movw	r1, #513	; 0x201
    8f10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f14:	4b09      	ldr	r3, [pc, #36]	; (8f3c <_usb_d_dev_suspend+0x34>)
    8f16:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8f18:	f240 2101 	movw	r1, #513	; 0x201
    8f1c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f20:	4b07      	ldr	r3, [pc, #28]	; (8f40 <_usb_d_dev_suspend+0x38>)
    8f22:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8f24:	2170      	movs	r1, #112	; 0x70
    8f26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f2a:	4b06      	ldr	r3, [pc, #24]	; (8f44 <_usb_d_dev_suspend+0x3c>)
    8f2c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8f2e:	4b06      	ldr	r3, [pc, #24]	; (8f48 <_usb_d_dev_suspend+0x40>)
    8f30:	685b      	ldr	r3, [r3, #4]
    8f32:	2100      	movs	r1, #0
    8f34:	2004      	movs	r0, #4
    8f36:	4798      	blx	r3
}
    8f38:	bf00      	nop
    8f3a:	bd80      	pop	{r7, pc}
    8f3c:	00008403 	.word	0x00008403
    8f40:	00008459 	.word	0x00008459
    8f44:	00008421 	.word	0x00008421
    8f48:	20000bd4 	.word	0x20000bd4

00008f4c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8f4c:	b580      	push	{r7, lr}
    8f4e:	b082      	sub	sp, #8
    8f50:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8f52:	2301      	movs	r3, #1
    8f54:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8f56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f5a:	4b22      	ldr	r3, [pc, #136]	; (8fe4 <_usb_d_dev_handle_nep+0x98>)
    8f5c:	4798      	blx	r3
    8f5e:	4603      	mov	r3, r0
    8f60:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8f62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f66:	4b20      	ldr	r3, [pc, #128]	; (8fe8 <_usb_d_dev_handle_nep+0x9c>)
    8f68:	4798      	blx	r3
    8f6a:	4603      	mov	r3, r0
    8f6c:	461a      	mov	r2, r3
    8f6e:	88bb      	ldrh	r3, [r7, #4]
    8f70:	4013      	ands	r3, r2
    8f72:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8f74:	88bb      	ldrh	r3, [r7, #4]
    8f76:	f003 0304 	and.w	r3, r3, #4
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d003      	beq.n	8f86 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8f7e:	4b1b      	ldr	r3, [pc, #108]	; (8fec <_usb_d_dev_handle_nep+0xa0>)
    8f80:	4798      	blx	r3
		return true;
    8f82:	2301      	movs	r3, #1
    8f84:	e02a      	b.n	8fdc <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8f86:	88bb      	ldrh	r3, [r7, #4]
    8f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d002      	beq.n	8f96 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8f90:	4b17      	ldr	r3, [pc, #92]	; (8ff0 <_usb_d_dev_handle_nep+0xa4>)
    8f92:	4798      	blx	r3
    8f94:	e021      	b.n	8fda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8f96:	88bb      	ldrh	r3, [r7, #4]
    8f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d002      	beq.n	8fa6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8fa0:	4b14      	ldr	r3, [pc, #80]	; (8ff4 <_usb_d_dev_handle_nep+0xa8>)
    8fa2:	4798      	blx	r3
    8fa4:	e019      	b.n	8fda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8fa6:	88bb      	ldrh	r3, [r7, #4]
    8fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8fac:	2b00      	cmp	r3, #0
    8fae:	d002      	beq.n	8fb6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8fb0:	4b11      	ldr	r3, [pc, #68]	; (8ff8 <_usb_d_dev_handle_nep+0xac>)
    8fb2:	4798      	blx	r3
    8fb4:	e011      	b.n	8fda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8fb6:	88bb      	ldrh	r3, [r7, #4]
    8fb8:	f003 0308 	and.w	r3, r3, #8
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	d002      	beq.n	8fc6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8fc0:	4b0e      	ldr	r3, [pc, #56]	; (8ffc <_usb_d_dev_handle_nep+0xb0>)
    8fc2:	4798      	blx	r3
    8fc4:	e009      	b.n	8fda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8fc6:	88bb      	ldrh	r3, [r7, #4]
    8fc8:	f003 0301 	and.w	r3, r3, #1
    8fcc:	2b00      	cmp	r3, #0
    8fce:	d002      	beq.n	8fd6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8fd0:	4b0b      	ldr	r3, [pc, #44]	; (9000 <_usb_d_dev_handle_nep+0xb4>)
    8fd2:	4798      	blx	r3
    8fd4:	e001      	b.n	8fda <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8fd6:	2300      	movs	r3, #0
    8fd8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8fda:	79fb      	ldrb	r3, [r7, #7]
}
    8fdc:	4618      	mov	r0, r3
    8fde:	3708      	adds	r7, #8
    8fe0:	46bd      	mov	sp, r7
    8fe2:	bd80      	pop	{r7, pc}
    8fe4:	000083e9 	.word	0x000083e9
    8fe8:	0000843f 	.word	0x0000843f
    8fec:	00008d8d 	.word	0x00008d8d
    8ff0:	00008dad 	.word	0x00008dad
    8ff4:	00008e3d 	.word	0x00008e3d
    8ff8:	00008e61 	.word	0x00008e61
    8ffc:	00008ead 	.word	0x00008ead
    9000:	00008f09 	.word	0x00008f09

00009004 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9004:	b590      	push	{r4, r7, lr}
    9006:	b089      	sub	sp, #36	; 0x24
    9008:	af00      	add	r7, sp, #0
    900a:	6078      	str	r0, [r7, #4]
    900c:	460b      	mov	r3, r1
    900e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9010:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9014:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9016:	687b      	ldr	r3, [r7, #4]
    9018:	7c9b      	ldrb	r3, [r3, #18]
    901a:	f003 030f 	and.w	r3, r3, #15
    901e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9020:	7dfb      	ldrb	r3, [r7, #23]
    9022:	015b      	lsls	r3, r3, #5
    9024:	4a73      	ldr	r2, [pc, #460]	; (91f4 <_usb_d_dev_in_next+0x1f0>)
    9026:	4413      	add	r3, r2
    9028:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    902a:	78fb      	ldrb	r3, [r7, #3]
    902c:	2b00      	cmp	r3, #0
    902e:	d006      	beq.n	903e <_usb_d_dev_in_next+0x3a>
    9030:	693b      	ldr	r3, [r7, #16]
    9032:	3310      	adds	r3, #16
    9034:	685b      	ldr	r3, [r3, #4]
    9036:	f3c3 030d 	ubfx	r3, r3, #0, #14
    903a:	b29b      	uxth	r3, r3
    903c:	e000      	b.n	9040 <_usb_d_dev_in_next+0x3c>
    903e:	2300      	movs	r3, #0
    9040:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	8a1b      	ldrh	r3, [r3, #16]
    9046:	f240 32ff 	movw	r2, #1023	; 0x3ff
    904a:	4293      	cmp	r3, r2
    904c:	d103      	bne.n	9056 <_usb_d_dev_in_next+0x52>
    904e:	687b      	ldr	r3, [r7, #4]
    9050:	8a1b      	ldrh	r3, [r3, #16]
    9052:	b21b      	sxth	r3, r3
    9054:	e004      	b.n	9060 <_usb_d_dev_in_next+0x5c>
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	8a1b      	ldrh	r3, [r3, #16]
    905a:	3b01      	subs	r3, #1
    905c:	b29b      	uxth	r3, r3
    905e:	b21b      	sxth	r3, r3
    9060:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9064:	4013      	ands	r3, r2
    9066:	b21b      	sxth	r3, r3
    9068:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    906a:	2300      	movs	r3, #0
    906c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    906e:	687b      	ldr	r3, [r7, #4]
    9070:	7cdb      	ldrb	r3, [r3, #19]
    9072:	f003 0307 	and.w	r3, r3, #7
    9076:	b2db      	uxtb	r3, r3
    9078:	2b01      	cmp	r3, #1
    907a:	bf0c      	ite	eq
    907c:	2301      	moveq	r3, #1
    907e:	2300      	movne	r3, #0
    9080:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9082:	78fb      	ldrb	r3, [r7, #3]
    9084:	2b00      	cmp	r3, #0
    9086:	d004      	beq.n	9092 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9088:	7dfb      	ldrb	r3, [r7, #23]
    908a:	2101      	movs	r1, #1
    908c:	4618      	mov	r0, r3
    908e:	4b5a      	ldr	r3, [pc, #360]	; (91f8 <_usb_d_dev_in_next+0x1f4>)
    9090:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9092:	687b      	ldr	r3, [r7, #4]
    9094:	689a      	ldr	r2, [r3, #8]
    9096:	89fb      	ldrh	r3, [r7, #14]
    9098:	441a      	add	r2, r3
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    909e:	687b      	ldr	r3, [r7, #4]
    90a0:	689a      	ldr	r2, [r3, #8]
    90a2:	687b      	ldr	r3, [r7, #4]
    90a4:	685b      	ldr	r3, [r3, #4]
    90a6:	429a      	cmp	r2, r3
    90a8:	d243      	bcs.n	9132 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	685b      	ldr	r3, [r3, #4]
    90ae:	b29a      	uxth	r2, r3
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	689b      	ldr	r3, [r3, #8]
    90b4:	b29b      	uxth	r3, r3
    90b6:	1ad3      	subs	r3, r2, r3
    90b8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    90ba:	687b      	ldr	r3, [r7, #4]
    90bc:	7cdb      	ldrb	r3, [r3, #19]
    90be:	f003 0320 	and.w	r3, r3, #32
    90c2:	b2db      	uxtb	r3, r3
    90c4:	2b00      	cmp	r3, #0
    90c6:	d01b      	beq.n	9100 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	8a1b      	ldrh	r3, [r3, #16]
    90cc:	8bfa      	ldrh	r2, [r7, #30]
    90ce:	429a      	cmp	r2, r3
    90d0:	d902      	bls.n	90d8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	8a1b      	ldrh	r3, [r3, #16]
    90d6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    90d8:	687b      	ldr	r3, [r7, #4]
    90da:	68d8      	ldr	r0, [r3, #12]
    90dc:	687b      	ldr	r3, [r7, #4]
    90de:	681a      	ldr	r2, [r3, #0]
    90e0:	687b      	ldr	r3, [r7, #4]
    90e2:	689b      	ldr	r3, [r3, #8]
    90e4:	4413      	add	r3, r2
    90e6:	8bfa      	ldrh	r2, [r7, #30]
    90e8:	4619      	mov	r1, r3
    90ea:	4b44      	ldr	r3, [pc, #272]	; (91fc <_usb_d_dev_in_next+0x1f8>)
    90ec:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	68db      	ldr	r3, [r3, #12]
    90f2:	461a      	mov	r2, r3
    90f4:	7dfb      	ldrb	r3, [r7, #23]
    90f6:	2101      	movs	r1, #1
    90f8:	4618      	mov	r0, r3
    90fa:	4b41      	ldr	r3, [pc, #260]	; (9200 <_usb_d_dev_in_next+0x1fc>)
    90fc:	4798      	blx	r3
    90fe:	e011      	b.n	9124 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9100:	8bfb      	ldrh	r3, [r7, #30]
    9102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9106:	d902      	bls.n	910e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    910c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    910e:	687b      	ldr	r3, [r7, #4]
    9110:	681a      	ldr	r2, [r3, #0]
    9112:	687b      	ldr	r3, [r7, #4]
    9114:	689b      	ldr	r3, [r3, #8]
    9116:	4413      	add	r3, r2
    9118:	461a      	mov	r2, r3
    911a:	7dfb      	ldrb	r3, [r7, #23]
    911c:	2101      	movs	r1, #1
    911e:	4618      	mov	r0, r3
    9120:	4b37      	ldr	r3, [pc, #220]	; (9200 <_usb_d_dev_in_next+0x1fc>)
    9122:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9124:	8bfa      	ldrh	r2, [r7, #30]
    9126:	7df8      	ldrb	r0, [r7, #23]
    9128:	2300      	movs	r3, #0
    912a:	2101      	movs	r1, #1
    912c:	4c35      	ldr	r4, [pc, #212]	; (9204 <_usb_d_dev_in_next+0x200>)
    912e:	47a0      	blx	r4
		goto _in_tx_exec;
    9130:	e041      	b.n	91b6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9132:	687b      	ldr	r3, [r7, #4]
    9134:	7cdb      	ldrb	r3, [r3, #19]
    9136:	f003 0310 	and.w	r3, r3, #16
    913a:	b2db      	uxtb	r3, r3
    913c:	2b00      	cmp	r3, #0
    913e:	d00b      	beq.n	9158 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9140:	687a      	ldr	r2, [r7, #4]
    9142:	7cd3      	ldrb	r3, [r2, #19]
    9144:	f36f 1304 	bfc	r3, #4, #1
    9148:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    914a:	7df8      	ldrb	r0, [r7, #23]
    914c:	2300      	movs	r3, #0
    914e:	2200      	movs	r2, #0
    9150:	2101      	movs	r1, #1
    9152:	4c2c      	ldr	r4, [pc, #176]	; (9204 <_usb_d_dev_in_next+0x200>)
    9154:	47a0      	blx	r4
		goto _in_tx_exec;
    9156:	e02e      	b.n	91b6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9158:	7afb      	ldrb	r3, [r7, #11]
    915a:	2b00      	cmp	r3, #0
    915c:	d006      	beq.n	916c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    915e:	7dfb      	ldrb	r3, [r7, #23]
    9160:	224b      	movs	r2, #75	; 0x4b
    9162:	4619      	mov	r1, r3
    9164:	69b8      	ldr	r0, [r7, #24]
    9166:	4b28      	ldr	r3, [pc, #160]	; (9208 <_usb_d_dev_in_next+0x204>)
    9168:	4798      	blx	r3
    916a:	e005      	b.n	9178 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    916c:	7dfb      	ldrb	r3, [r7, #23]
    916e:	224a      	movs	r2, #74	; 0x4a
    9170:	4619      	mov	r1, r3
    9172:	69b8      	ldr	r0, [r7, #24]
    9174:	4b24      	ldr	r3, [pc, #144]	; (9208 <_usb_d_dev_in_next+0x204>)
    9176:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	8a1b      	ldrh	r3, [r3, #16]
    917c:	89ba      	ldrh	r2, [r7, #12]
    917e:	429a      	cmp	r2, r3
    9180:	d114      	bne.n	91ac <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9182:	687a      	ldr	r2, [r7, #4]
    9184:	7cd3      	ldrb	r3, [r2, #19]
    9186:	f36f 1386 	bfc	r3, #6, #1
    918a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    918c:	4b1f      	ldr	r3, [pc, #124]	; (920c <_usb_d_dev_in_next+0x208>)
    918e:	68db      	ldr	r3, [r3, #12]
    9190:	687a      	ldr	r2, [r7, #4]
    9192:	7c90      	ldrb	r0, [r2, #18]
    9194:	687a      	ldr	r2, [r7, #4]
    9196:	6892      	ldr	r2, [r2, #8]
    9198:	4611      	mov	r1, r2
    919a:	4798      	blx	r3
    919c:	4603      	mov	r3, r0
    919e:	2b00      	cmp	r3, #0
    91a0:	d124      	bne.n	91ec <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    91a2:	687a      	ldr	r2, [r7, #4]
    91a4:	7cd3      	ldrb	r3, [r2, #19]
    91a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    91aa:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    91ac:	2100      	movs	r1, #0
    91ae:	6878      	ldr	r0, [r7, #4]
    91b0:	4b17      	ldr	r3, [pc, #92]	; (9210 <_usb_d_dev_in_next+0x20c>)
    91b2:	4798      	blx	r3
	return;
    91b4:	e01b      	b.n	91ee <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    91b6:	78fb      	ldrb	r3, [r7, #3]
    91b8:	f083 0301 	eor.w	r3, r3, #1
    91bc:	b2db      	uxtb	r3, r3
    91be:	2b00      	cmp	r3, #0
    91c0:	d00d      	beq.n	91de <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    91c2:	7afb      	ldrb	r3, [r7, #11]
    91c4:	2b00      	cmp	r3, #0
    91c6:	d002      	beq.n	91ce <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    91c8:	234e      	movs	r3, #78	; 0x4e
    91ca:	777b      	strb	r3, [r7, #29]
    91cc:	e001      	b.n	91d2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    91ce:	234a      	movs	r3, #74	; 0x4a
    91d0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    91d2:	7f7a      	ldrb	r2, [r7, #29]
    91d4:	7dfb      	ldrb	r3, [r7, #23]
    91d6:	4619      	mov	r1, r3
    91d8:	69b8      	ldr	r0, [r7, #24]
    91da:	4b0e      	ldr	r3, [pc, #56]	; (9214 <_usb_d_dev_in_next+0x210>)
    91dc:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    91de:	7dfb      	ldrb	r3, [r7, #23]
    91e0:	2201      	movs	r2, #1
    91e2:	2101      	movs	r1, #1
    91e4:	4618      	mov	r0, r3
    91e6:	4b0c      	ldr	r3, [pc, #48]	; (9218 <_usb_d_dev_in_next+0x214>)
    91e8:	4798      	blx	r3
    91ea:	e000      	b.n	91ee <_usb_d_dev_in_next+0x1ea>
			return;
    91ec:	bf00      	nop
}
    91ee:	3724      	adds	r7, #36	; 0x24
    91f0:	46bd      	mov	sp, r7
    91f2:	bd90      	pop	{r4, r7, pc}
    91f4:	20000c9c 	.word	0x20000c9c
    91f8:	000089fd 	.word	0x000089fd
    91fc:	0000e81d 	.word	0x0000e81d
    9200:	00008a29 	.word	0x00008a29
    9204:	00008b71 	.word	0x00008b71
    9208:	00008309 	.word	0x00008309
    920c:	20000bd4 	.word	0x20000bd4
    9210:	0000a32d 	.word	0x0000a32d
    9214:	000082dd 	.word	0x000082dd
    9218:	00008c29 	.word	0x00008c29

0000921c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    921c:	b590      	push	{r4, r7, lr}
    921e:	b08b      	sub	sp, #44	; 0x2c
    9220:	af00      	add	r7, sp, #0
    9222:	6078      	str	r0, [r7, #4]
    9224:	460b      	mov	r3, r1
    9226:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9228:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    922c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	7c9b      	ldrb	r3, [r3, #18]
    9232:	f003 030f 	and.w	r3, r3, #15
    9236:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9238:	7ffb      	ldrb	r3, [r7, #31]
    923a:	015b      	lsls	r3, r3, #5
    923c:	4a94      	ldr	r2, [pc, #592]	; (9490 <_usb_d_dev_out_next+0x274>)
    923e:	4413      	add	r3, r2
    9240:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9242:	78fb      	ldrb	r3, [r7, #3]
    9244:	2b00      	cmp	r3, #0
    9246:	d005      	beq.n	9254 <_usb_d_dev_out_next+0x38>
    9248:	69bb      	ldr	r3, [r7, #24]
    924a:	685b      	ldr	r3, [r3, #4]
    924c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9250:	b29b      	uxth	r3, r3
    9252:	e000      	b.n	9256 <_usb_d_dev_out_next+0x3a>
    9254:	2300      	movs	r3, #0
    9256:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9258:	78fb      	ldrb	r3, [r7, #3]
    925a:	2b00      	cmp	r3, #0
    925c:	d005      	beq.n	926a <_usb_d_dev_out_next+0x4e>
    925e:	69bb      	ldr	r3, [r7, #24]
    9260:	685b      	ldr	r3, [r3, #4]
    9262:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9266:	b29b      	uxth	r3, r3
    9268:	e000      	b.n	926c <_usb_d_dev_out_next+0x50>
    926a:	2300      	movs	r3, #0
    926c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    926e:	687b      	ldr	r3, [r7, #4]
    9270:	8a1b      	ldrh	r3, [r3, #16]
    9272:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9276:	4293      	cmp	r3, r2
    9278:	d004      	beq.n	9284 <_usb_d_dev_out_next+0x68>
    927a:	687b      	ldr	r3, [r7, #4]
    927c:	8a1b      	ldrh	r3, [r3, #16]
    927e:	3b01      	subs	r3, #1
    9280:	b29b      	uxth	r3, r3
    9282:	e001      	b.n	9288 <_usb_d_dev_out_next+0x6c>
    9284:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9288:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    928a:	8aba      	ldrh	r2, [r7, #20]
    928c:	8a7b      	ldrh	r3, [r7, #18]
    928e:	4013      	ands	r3, r2
    9290:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	7cdb      	ldrb	r3, [r3, #19]
    9296:	f003 0307 	and.w	r3, r3, #7
    929a:	b2db      	uxtb	r3, r3
    929c:	2b01      	cmp	r3, #1
    929e:	bf0c      	ite	eq
    92a0:	2301      	moveq	r3, #1
    92a2:	2300      	movne	r3, #0
    92a4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    92a6:	78fb      	ldrb	r3, [r7, #3]
    92a8:	2b00      	cmp	r3, #0
    92aa:	d004      	beq.n	92b6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    92ac:	7ffb      	ldrb	r3, [r7, #31]
    92ae:	2100      	movs	r1, #0
    92b0:	4618      	mov	r0, r3
    92b2:	4b78      	ldr	r3, [pc, #480]	; (9494 <_usb_d_dev_out_next+0x278>)
    92b4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    92b6:	687b      	ldr	r3, [r7, #4]
    92b8:	7cdb      	ldrb	r3, [r3, #19]
    92ba:	f003 0320 	and.w	r3, r3, #32
    92be:	b2db      	uxtb	r3, r3
    92c0:	2b00      	cmp	r3, #0
    92c2:	d01c      	beq.n	92fe <_usb_d_dev_out_next+0xe2>
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	685b      	ldr	r3, [r3, #4]
    92c8:	2b00      	cmp	r3, #0
    92ca:	d018      	beq.n	92fe <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	685b      	ldr	r3, [r3, #4]
    92d0:	b29a      	uxth	r2, r3
    92d2:	687b      	ldr	r3, [r7, #4]
    92d4:	689b      	ldr	r3, [r3, #8]
    92d6:	b29b      	uxth	r3, r3
    92d8:	1ad3      	subs	r3, r2, r3
    92da:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	681a      	ldr	r2, [r3, #0]
    92e0:	687b      	ldr	r3, [r7, #4]
    92e2:	689b      	ldr	r3, [r3, #8]
    92e4:	18d0      	adds	r0, r2, r3
    92e6:	687b      	ldr	r3, [r7, #4]
    92e8:	68d9      	ldr	r1, [r3, #12]
    92ea:	89ba      	ldrh	r2, [r7, #12]
    92ec:	8a3b      	ldrh	r3, [r7, #16]
    92ee:	429a      	cmp	r2, r3
    92f0:	d901      	bls.n	92f6 <_usb_d_dev_out_next+0xda>
    92f2:	8a3b      	ldrh	r3, [r7, #16]
    92f4:	e000      	b.n	92f8 <_usb_d_dev_out_next+0xdc>
    92f6:	89bb      	ldrh	r3, [r7, #12]
    92f8:	461a      	mov	r2, r3
    92fa:	4b67      	ldr	r3, [pc, #412]	; (9498 <_usb_d_dev_out_next+0x27c>)
    92fc:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    92fe:	687b      	ldr	r3, [r7, #4]
    9300:	685b      	ldr	r3, [r3, #4]
    9302:	2b00      	cmp	r3, #0
    9304:	d121      	bne.n	934a <_usb_d_dev_out_next+0x12e>
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	7cdb      	ldrb	r3, [r3, #19]
    930a:	f003 0310 	and.w	r3, r3, #16
    930e:	b2db      	uxtb	r3, r3
    9310:	2b00      	cmp	r3, #0
    9312:	d01a      	beq.n	934a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9314:	687a      	ldr	r2, [r7, #4]
    9316:	7cd3      	ldrb	r3, [r2, #19]
    9318:	f36f 1304 	bfc	r3, #4, #1
    931c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    931e:	687a      	ldr	r2, [r7, #4]
    9320:	7cd3      	ldrb	r3, [r2, #19]
    9322:	f043 0320 	orr.w	r3, r3, #32
    9326:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9328:	687b      	ldr	r3, [r7, #4]
    932a:	68db      	ldr	r3, [r3, #12]
    932c:	461a      	mov	r2, r3
    932e:	7ffb      	ldrb	r3, [r7, #31]
    9330:	2100      	movs	r1, #0
    9332:	4618      	mov	r0, r3
    9334:	4b59      	ldr	r3, [pc, #356]	; (949c <_usb_d_dev_out_next+0x280>)
    9336:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	8a1b      	ldrh	r3, [r3, #16]
    933c:	461a      	mov	r2, r3
    933e:	7ff8      	ldrb	r0, [r7, #31]
    9340:	2300      	movs	r3, #0
    9342:	2100      	movs	r1, #0
    9344:	4c56      	ldr	r4, [pc, #344]	; (94a0 <_usb_d_dev_out_next+0x284>)
    9346:	47a0      	blx	r4
		goto _out_rx_exec;
    9348:	e090      	b.n	946c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    934a:	78fb      	ldrb	r3, [r7, #3]
    934c:	2b00      	cmp	r3, #0
    934e:	d010      	beq.n	9372 <_usb_d_dev_out_next+0x156>
    9350:	687b      	ldr	r3, [r7, #4]
    9352:	8a1b      	ldrh	r3, [r3, #16]
    9354:	8a3a      	ldrh	r2, [r7, #16]
    9356:	429a      	cmp	r2, r3
    9358:	d20b      	bcs.n	9372 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    935a:	687a      	ldr	r2, [r7, #4]
    935c:	7cd3      	ldrb	r3, [r2, #19]
    935e:	f36f 1304 	bfc	r3, #4, #1
    9362:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	689a      	ldr	r2, [r3, #8]
    9368:	8abb      	ldrh	r3, [r7, #20]
    936a:	441a      	add	r2, r3
    936c:	687b      	ldr	r3, [r7, #4]
    936e:	609a      	str	r2, [r3, #8]
    9370:	e05c      	b.n	942c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9372:	687b      	ldr	r3, [r7, #4]
    9374:	689a      	ldr	r2, [r3, #8]
    9376:	8afb      	ldrh	r3, [r7, #22]
    9378:	441a      	add	r2, r3
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	689a      	ldr	r2, [r3, #8]
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	685b      	ldr	r3, [r3, #4]
    9386:	429a      	cmp	r2, r3
    9388:	d250      	bcs.n	942c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	685b      	ldr	r3, [r3, #4]
    938e:	b29a      	uxth	r2, r3
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	689b      	ldr	r3, [r3, #8]
    9394:	b29b      	uxth	r3, r3
    9396:	1ad3      	subs	r3, r2, r3
    9398:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	7cdb      	ldrb	r3, [r3, #19]
    939e:	f003 0320 	and.w	r3, r3, #32
    93a2:	b2db      	uxtb	r3, r3
    93a4:	2b00      	cmp	r3, #0
    93a6:	d010      	beq.n	93ca <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    93a8:	687b      	ldr	r3, [r7, #4]
    93aa:	8a1b      	ldrh	r3, [r3, #16]
    93ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93ae:	429a      	cmp	r2, r3
    93b0:	d902      	bls.n	93b8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    93b2:	687b      	ldr	r3, [r7, #4]
    93b4:	8a1b      	ldrh	r3, [r3, #16]
    93b6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    93b8:	687b      	ldr	r3, [r7, #4]
    93ba:	68db      	ldr	r3, [r3, #12]
    93bc:	461a      	mov	r2, r3
    93be:	7ffb      	ldrb	r3, [r7, #31]
    93c0:	2100      	movs	r1, #0
    93c2:	4618      	mov	r0, r3
    93c4:	4b35      	ldr	r3, [pc, #212]	; (949c <_usb_d_dev_out_next+0x280>)
    93c6:	4798      	blx	r3
    93c8:	e029      	b.n	941e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	8a1b      	ldrh	r3, [r3, #16]
    93ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93d0:	429a      	cmp	r2, r3
    93d2:	d90f      	bls.n	93f4 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    93d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    93d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    93da:	d903      	bls.n	93e4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    93dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    93e0:	84fb      	strh	r3, [r7, #38]	; 0x26
    93e2:	e011      	b.n	9408 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    93e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93e6:	8a7b      	ldrh	r3, [r7, #18]
    93e8:	4013      	ands	r3, r2
    93ea:	b29b      	uxth	r3, r3
    93ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93ee:	1ad3      	subs	r3, r2, r3
    93f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    93f2:	e009      	b.n	9408 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    93f4:	687b      	ldr	r3, [r7, #4]
    93f6:	8a1b      	ldrh	r3, [r3, #16]
    93f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    93fa:	429a      	cmp	r2, r3
    93fc:	d204      	bcs.n	9408 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    93fe:	687a      	ldr	r2, [r7, #4]
    9400:	7cd3      	ldrb	r3, [r2, #19]
    9402:	f043 0320 	orr.w	r3, r3, #32
    9406:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9408:	687b      	ldr	r3, [r7, #4]
    940a:	681a      	ldr	r2, [r3, #0]
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	689b      	ldr	r3, [r3, #8]
    9410:	4413      	add	r3, r2
    9412:	461a      	mov	r2, r3
    9414:	7ffb      	ldrb	r3, [r7, #31]
    9416:	2100      	movs	r1, #0
    9418:	4618      	mov	r0, r3
    941a:	4b20      	ldr	r3, [pc, #128]	; (949c <_usb_d_dev_out_next+0x280>)
    941c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    941e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9420:	7ff8      	ldrb	r0, [r7, #31]
    9422:	2300      	movs	r3, #0
    9424:	2100      	movs	r1, #0
    9426:	4c1e      	ldr	r4, [pc, #120]	; (94a0 <_usb_d_dev_out_next+0x284>)
    9428:	47a0      	blx	r4
			goto _out_rx_exec;
    942a:	e01f      	b.n	946c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    942c:	7bfb      	ldrb	r3, [r7, #15]
    942e:	2b00      	cmp	r3, #0
    9430:	d006      	beq.n	9440 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9432:	7ffb      	ldrb	r3, [r7, #31]
    9434:	222d      	movs	r2, #45	; 0x2d
    9436:	4619      	mov	r1, r3
    9438:	6a38      	ldr	r0, [r7, #32]
    943a:	4b1a      	ldr	r3, [pc, #104]	; (94a4 <_usb_d_dev_out_next+0x288>)
    943c:	4798      	blx	r3
    943e:	e005      	b.n	944c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9440:	7ffb      	ldrb	r3, [r7, #31]
    9442:	2225      	movs	r2, #37	; 0x25
    9444:	4619      	mov	r1, r3
    9446:	6a38      	ldr	r0, [r7, #32]
    9448:	4b16      	ldr	r3, [pc, #88]	; (94a4 <_usb_d_dev_out_next+0x288>)
    944a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    944c:	7ffb      	ldrb	r3, [r7, #31]
    944e:	2b00      	cmp	r3, #0
    9450:	d107      	bne.n	9462 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	68db      	ldr	r3, [r3, #12]
    9456:	461a      	mov	r2, r3
    9458:	7ffb      	ldrb	r3, [r7, #31]
    945a:	2100      	movs	r1, #0
    945c:	4618      	mov	r0, r3
    945e:	4b0f      	ldr	r3, [pc, #60]	; (949c <_usb_d_dev_out_next+0x280>)
    9460:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9462:	2100      	movs	r1, #0
    9464:	6878      	ldr	r0, [r7, #4]
    9466:	4b10      	ldr	r3, [pc, #64]	; (94a8 <_usb_d_dev_out_next+0x28c>)
    9468:	4798      	blx	r3
	return;
    946a:	e031      	b.n	94d0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    946c:	78fb      	ldrb	r3, [r7, #3]
    946e:	f083 0301 	eor.w	r3, r3, #1
    9472:	b2db      	uxtb	r3, r3
    9474:	2b00      	cmp	r3, #0
    9476:	d025      	beq.n	94c4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9478:	7bfb      	ldrb	r3, [r7, #15]
    947a:	2b00      	cmp	r3, #0
    947c:	d018      	beq.n	94b0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    947e:	7ffb      	ldrb	r3, [r7, #31]
    9480:	2101      	movs	r1, #1
    9482:	4618      	mov	r0, r3
    9484:	4b09      	ldr	r3, [pc, #36]	; (94ac <_usb_d_dev_out_next+0x290>)
    9486:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9488:	232d      	movs	r3, #45	; 0x2d
    948a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    948e:	e012      	b.n	94b6 <_usb_d_dev_out_next+0x29a>
    9490:	20000c9c 	.word	0x20000c9c
    9494:	000089fd 	.word	0x000089fd
    9498:	0000e81d 	.word	0x0000e81d
    949c:	00008a29 	.word	0x00008a29
    94a0:	00008bb1 	.word	0x00008bb1
    94a4:	00008309 	.word	0x00008309
    94a8:	0000a32d 	.word	0x0000a32d
    94ac:	00008bf1 	.word	0x00008bf1
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    94b0:	2325      	movs	r3, #37	; 0x25
    94b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    94b6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    94ba:	7ffb      	ldrb	r3, [r7, #31]
    94bc:	4619      	mov	r1, r3
    94be:	6a38      	ldr	r0, [r7, #32]
    94c0:	4b05      	ldr	r3, [pc, #20]	; (94d8 <_usb_d_dev_out_next+0x2bc>)
    94c2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    94c4:	7ffb      	ldrb	r3, [r7, #31]
    94c6:	2201      	movs	r2, #1
    94c8:	2100      	movs	r1, #0
    94ca:	4618      	mov	r0, r3
    94cc:	4b03      	ldr	r3, [pc, #12]	; (94dc <_usb_d_dev_out_next+0x2c0>)
    94ce:	4798      	blx	r3
}
    94d0:	372c      	adds	r7, #44	; 0x2c
    94d2:	46bd      	mov	sp, r7
    94d4:	bd90      	pop	{r4, r7, pc}
    94d6:	bf00      	nop
    94d8:	000082dd 	.word	0x000082dd
    94dc:	00008c81 	.word	0x00008c81

000094e0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    94e0:	b580      	push	{r7, lr}
    94e2:	b084      	sub	sp, #16
    94e4:	af00      	add	r7, sp, #0
    94e6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    94e8:	687b      	ldr	r3, [r7, #4]
    94ea:	7c9b      	ldrb	r3, [r3, #18]
    94ec:	f003 030f 	and.w	r3, r3, #15
    94f0:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    94f2:	687b      	ldr	r3, [r7, #4]
    94f4:	7cdb      	ldrb	r3, [r3, #19]
    94f6:	f003 0307 	and.w	r3, r3, #7
    94fa:	b2db      	uxtb	r3, r3
    94fc:	2b01      	cmp	r3, #1
    94fe:	bf0c      	ite	eq
    9500:	2301      	moveq	r3, #1
    9502:	2300      	movne	r3, #0
    9504:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9506:	7bbb      	ldrb	r3, [r7, #14]
    9508:	f083 0301 	eor.w	r3, r3, #1
    950c:	b2db      	uxtb	r3, r3
    950e:	2b00      	cmp	r3, #0
    9510:	d008      	beq.n	9524 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9512:	7bfb      	ldrb	r3, [r7, #15]
    9514:	4618      	mov	r0, r3
    9516:	4b20      	ldr	r3, [pc, #128]	; (9598 <_usb_d_dev_handle_setup+0xb8>)
    9518:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    951a:	7bfb      	ldrb	r3, [r7, #15]
    951c:	4618      	mov	r0, r3
    951e:	4b1f      	ldr	r3, [pc, #124]	; (959c <_usb_d_dev_handle_setup+0xbc>)
    9520:	4798      	blx	r3
		return;
    9522:	e036      	b.n	9592 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9524:	687b      	ldr	r3, [r7, #4]
    9526:	7cdb      	ldrb	r3, [r3, #19]
    9528:	f003 0340 	and.w	r3, r3, #64	; 0x40
    952c:	b2db      	uxtb	r3, r3
    952e:	2b00      	cmp	r3, #0
    9530:	d010      	beq.n	9554 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9532:	687a      	ldr	r2, [r7, #4]
    9534:	7cd3      	ldrb	r3, [r2, #19]
    9536:	f36f 1386 	bfc	r3, #6, #1
    953a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    953c:	7bfb      	ldrb	r3, [r7, #15]
    953e:	2200      	movs	r2, #0
    9540:	2101      	movs	r1, #1
    9542:	4618      	mov	r0, r3
    9544:	4b16      	ldr	r3, [pc, #88]	; (95a0 <_usb_d_dev_handle_setup+0xc0>)
    9546:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9548:	7bfb      	ldrb	r3, [r7, #15]
    954a:	2200      	movs	r2, #0
    954c:	2100      	movs	r1, #0
    954e:	4618      	mov	r0, r3
    9550:	4b14      	ldr	r3, [pc, #80]	; (95a4 <_usb_d_dev_handle_setup+0xc4>)
    9552:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9554:	687a      	ldr	r2, [r7, #4]
    9556:	7cd3      	ldrb	r3, [r2, #19]
    9558:	f36f 03c3 	bfc	r3, #3, #1
    955c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    955e:	7bfb      	ldrb	r3, [r7, #15]
    9560:	2100      	movs	r1, #0
    9562:	4618      	mov	r0, r3
    9564:	4b10      	ldr	r3, [pc, #64]	; (95a8 <_usb_d_dev_handle_setup+0xc8>)
    9566:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9568:	7bfb      	ldrb	r3, [r7, #15]
    956a:	2101      	movs	r1, #1
    956c:	4618      	mov	r0, r3
    956e:	4b0e      	ldr	r3, [pc, #56]	; (95a8 <_usb_d_dev_handle_setup+0xc8>)
    9570:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9572:	7bfb      	ldrb	r3, [r7, #15]
    9574:	216f      	movs	r1, #111	; 0x6f
    9576:	4618      	mov	r0, r3
    9578:	4b0c      	ldr	r3, [pc, #48]	; (95ac <_usb_d_dev_handle_setup+0xcc>)
    957a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    957c:	7bfb      	ldrb	r3, [r7, #15]
    957e:	216f      	movs	r1, #111	; 0x6f
    9580:	4618      	mov	r0, r3
    9582:	4b0b      	ldr	r3, [pc, #44]	; (95b0 <_usb_d_dev_handle_setup+0xd0>)
    9584:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9586:	4b0b      	ldr	r3, [pc, #44]	; (95b4 <_usb_d_dev_handle_setup+0xd4>)
    9588:	689b      	ldr	r3, [r3, #8]
    958a:	687a      	ldr	r2, [r7, #4]
    958c:	7c92      	ldrb	r2, [r2, #18]
    958e:	4610      	mov	r0, r2
    9590:	4798      	blx	r3
}
    9592:	3710      	adds	r7, #16
    9594:	46bd      	mov	sp, r7
    9596:	bd80      	pop	{r7, pc}
    9598:	00008985 	.word	0x00008985
    959c:	00008931 	.word	0x00008931
    95a0:	00008c29 	.word	0x00008c29
    95a4:	00008c81 	.word	0x00008c81
    95a8:	00008bf1 	.word	0x00008bf1
    95ac:	00008731 	.word	0x00008731
    95b0:	00008781 	.word	0x00008781
    95b4:	20000bd4 	.word	0x20000bd4

000095b8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    95b8:	b580      	push	{r7, lr}
    95ba:	b084      	sub	sp, #16
    95bc:	af00      	add	r7, sp, #0
    95be:	6078      	str	r0, [r7, #4]
    95c0:	460b      	mov	r3, r1
    95c2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    95c4:	687b      	ldr	r3, [r7, #4]
    95c6:	7c9b      	ldrb	r3, [r3, #18]
    95c8:	f003 030f 	and.w	r3, r3, #15
    95cc:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    95ce:	78f9      	ldrb	r1, [r7, #3]
    95d0:	7bfb      	ldrb	r3, [r7, #15]
    95d2:	2200      	movs	r2, #0
    95d4:	4618      	mov	r0, r3
    95d6:	4b07      	ldr	r3, [pc, #28]	; (95f4 <_usb_d_dev_handle_stall+0x3c>)
    95d8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    95da:	4b07      	ldr	r3, [pc, #28]	; (95f8 <_usb_d_dev_handle_stall+0x40>)
    95dc:	691b      	ldr	r3, [r3, #16]
    95de:	687a      	ldr	r2, [r7, #4]
    95e0:	7c90      	ldrb	r0, [r2, #18]
    95e2:	687a      	ldr	r2, [r7, #4]
    95e4:	6892      	ldr	r2, [r2, #8]
    95e6:	2101      	movs	r1, #1
    95e8:	4798      	blx	r3
}
    95ea:	bf00      	nop
    95ec:	3710      	adds	r7, #16
    95ee:	46bd      	mov	sp, r7
    95f0:	bd80      	pop	{r7, pc}
    95f2:	bf00      	nop
    95f4:	000088e5 	.word	0x000088e5
    95f8:	20000bd4 	.word	0x20000bd4

000095fc <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    95fc:	b580      	push	{r7, lr}
    95fe:	b088      	sub	sp, #32
    9600:	af00      	add	r7, sp, #0
    9602:	6078      	str	r0, [r7, #4]
    9604:	460b      	mov	r3, r1
    9606:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9608:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    960c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    960e:	687b      	ldr	r3, [r7, #4]
    9610:	7c9b      	ldrb	r3, [r3, #18]
    9612:	f003 030f 	and.w	r3, r3, #15
    9616:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9618:	4b61      	ldr	r3, [pc, #388]	; (97a0 <_usb_d_dev_handle_trfail+0x1a4>)
    961a:	881b      	ldrh	r3, [r3, #0]
    961c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    961e:	7efb      	ldrb	r3, [r7, #27]
    9620:	015b      	lsls	r3, r3, #5
    9622:	4a60      	ldr	r2, [pc, #384]	; (97a4 <_usb_d_dev_handle_trfail+0x1a8>)
    9624:	4413      	add	r3, r2
    9626:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9628:	78fb      	ldrb	r3, [r7, #3]
    962a:	2b00      	cmp	r3, #0
    962c:	d006      	beq.n	963c <_usb_d_dev_handle_trfail+0x40>
    962e:	7efb      	ldrb	r3, [r7, #27]
    9630:	4619      	mov	r1, r3
    9632:	69f8      	ldr	r0, [r7, #28]
    9634:	4b5c      	ldr	r3, [pc, #368]	; (97a8 <_usb_d_dev_handle_trfail+0x1ac>)
    9636:	4798      	blx	r3
    9638:	4603      	mov	r3, r0
    963a:	e005      	b.n	9648 <_usb_d_dev_handle_trfail+0x4c>
    963c:	7efb      	ldrb	r3, [r7, #27]
    963e:	4619      	mov	r1, r3
    9640:	69f8      	ldr	r0, [r7, #28]
    9642:	4b5a      	ldr	r3, [pc, #360]	; (97ac <_usb_d_dev_handle_trfail+0x1b0>)
    9644:	4798      	blx	r3
    9646:	4603      	mov	r3, r0
    9648:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	7cdb      	ldrb	r3, [r3, #19]
    964e:	f003 0307 	and.w	r3, r3, #7
    9652:	b2db      	uxtb	r3, r3
    9654:	2b01      	cmp	r3, #1
    9656:	bf0c      	ite	eq
    9658:	2301      	moveq	r3, #1
    965a:	2300      	movne	r3, #0
    965c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    965e:	78fb      	ldrb	r3, [r7, #3]
    9660:	011b      	lsls	r3, r3, #4
    9662:	697a      	ldr	r2, [r7, #20]
    9664:	4413      	add	r3, r2
    9666:	7a9b      	ldrb	r3, [r3, #10]
    9668:	b2db      	uxtb	r3, r3
    966a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    966c:	7cfb      	ldrb	r3, [r7, #19]
    966e:	2b02      	cmp	r3, #2
    9670:	d12f      	bne.n	96d2 <_usb_d_dev_handle_trfail+0xd6>
    9672:	7b3b      	ldrb	r3, [r7, #12]
    9674:	f003 0301 	and.w	r3, r3, #1
    9678:	b2db      	uxtb	r3, r3
    967a:	2b00      	cmp	r3, #0
    967c:	d029      	beq.n	96d2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    967e:	78fb      	ldrb	r3, [r7, #3]
    9680:	011b      	lsls	r3, r3, #4
    9682:	697a      	ldr	r2, [r7, #20]
    9684:	441a      	add	r2, r3
    9686:	7a93      	ldrb	r3, [r2, #10]
    9688:	f36f 0300 	bfc	r3, #0, #1
    968c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    968e:	78fb      	ldrb	r3, [r7, #3]
    9690:	f107 0220 	add.w	r2, r7, #32
    9694:	4413      	add	r3, r2
    9696:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    969a:	7efb      	ldrb	r3, [r7, #27]
    969c:	4619      	mov	r1, r3
    969e:	69f8      	ldr	r0, [r7, #28]
    96a0:	4b43      	ldr	r3, [pc, #268]	; (97b0 <_usb_d_dev_handle_trfail+0x1b4>)
    96a2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    96a4:	78fb      	ldrb	r3, [r7, #3]
    96a6:	f107 0220 	add.w	r2, r7, #32
    96aa:	4413      	add	r3, r2
    96ac:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    96b0:	7efb      	ldrb	r3, [r7, #27]
    96b2:	4619      	mov	r1, r3
    96b4:	69f8      	ldr	r0, [r7, #28]
    96b6:	4b3f      	ldr	r3, [pc, #252]	; (97b4 <_usb_d_dev_handle_trfail+0x1b8>)
    96b8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    96ba:	78fb      	ldrb	r3, [r7, #3]
    96bc:	2b00      	cmp	r3, #0
    96be:	bf14      	ite	ne
    96c0:	2301      	movne	r3, #1
    96c2:	2300      	moveq	r3, #0
    96c4:	b2db      	uxtb	r3, r3
    96c6:	2204      	movs	r2, #4
    96c8:	4619      	mov	r1, r3
    96ca:	6878      	ldr	r0, [r7, #4]
    96cc:	4b3a      	ldr	r3, [pc, #232]	; (97b8 <_usb_d_dev_handle_trfail+0x1bc>)
    96ce:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    96d0:	e062      	b.n	9798 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    96d2:	7b3b      	ldrb	r3, [r7, #12]
    96d4:	f003 0302 	and.w	r3, r3, #2
    96d8:	b2db      	uxtb	r3, r3
    96da:	2b00      	cmp	r3, #0
    96dc:	d040      	beq.n	9760 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    96de:	78fb      	ldrb	r3, [r7, #3]
    96e0:	011b      	lsls	r3, r3, #4
    96e2:	697a      	ldr	r2, [r7, #20]
    96e4:	441a      	add	r2, r3
    96e6:	7a93      	ldrb	r3, [r2, #10]
    96e8:	f36f 0341 	bfc	r3, #1, #1
    96ec:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    96ee:	78fb      	ldrb	r3, [r7, #3]
    96f0:	f107 0220 	add.w	r2, r7, #32
    96f4:	4413      	add	r3, r2
    96f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    96fa:	7efb      	ldrb	r3, [r7, #27]
    96fc:	4619      	mov	r1, r3
    96fe:	69f8      	ldr	r0, [r7, #28]
    9700:	4b2b      	ldr	r3, [pc, #172]	; (97b0 <_usb_d_dev_handle_trfail+0x1b4>)
    9702:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9704:	78fb      	ldrb	r3, [r7, #3]
    9706:	f107 0220 	add.w	r2, r7, #32
    970a:	4413      	add	r3, r2
    970c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9710:	7efb      	ldrb	r3, [r7, #27]
    9712:	4619      	mov	r1, r3
    9714:	69f8      	ldr	r0, [r7, #28]
    9716:	4b27      	ldr	r3, [pc, #156]	; (97b4 <_usb_d_dev_handle_trfail+0x1b8>)
    9718:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    971a:	7cbb      	ldrb	r3, [r7, #18]
    971c:	2b00      	cmp	r3, #0
    971e:	d03b      	beq.n	9798 <_usb_d_dev_handle_trfail+0x19c>
    9720:	687b      	ldr	r3, [r7, #4]
    9722:	7cdb      	ldrb	r3, [r3, #19]
    9724:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9728:	b2db      	uxtb	r3, r3
    972a:	2b00      	cmp	r3, #0
    972c:	d034      	beq.n	9798 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    972e:	687b      	ldr	r3, [r7, #4]
    9730:	7cdb      	ldrb	r3, [r3, #19]
    9732:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9736:	b2db      	uxtb	r3, r3
    9738:	461a      	mov	r2, r3
    973a:	78fb      	ldrb	r3, [r7, #3]
    973c:	4293      	cmp	r3, r2
    973e:	d02b      	beq.n	9798 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9740:	687b      	ldr	r3, [r7, #4]
    9742:	7cdb      	ldrb	r3, [r3, #19]
    9744:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9748:	b2db      	uxtb	r3, r3
    974a:	2b00      	cmp	r3, #0
    974c:	bf14      	ite	ne
    974e:	2301      	movne	r3, #1
    9750:	2300      	moveq	r3, #0
    9752:	b2db      	uxtb	r3, r3
    9754:	2200      	movs	r2, #0
    9756:	4619      	mov	r1, r3
    9758:	6878      	ldr	r0, [r7, #4]
    975a:	4b17      	ldr	r3, [pc, #92]	; (97b8 <_usb_d_dev_handle_trfail+0x1bc>)
    975c:	4798      	blx	r3
}
    975e:	e01b      	b.n	9798 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9760:	78fa      	ldrb	r2, [r7, #3]
    9762:	7efb      	ldrb	r3, [r7, #27]
    9764:	4611      	mov	r1, r2
    9766:	4618      	mov	r0, r3
    9768:	4b14      	ldr	r3, [pc, #80]	; (97bc <_usb_d_dev_handle_trfail+0x1c0>)
    976a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    976c:	78fb      	ldrb	r3, [r7, #3]
    976e:	f107 0220 	add.w	r2, r7, #32
    9772:	4413      	add	r3, r2
    9774:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9778:	7efb      	ldrb	r3, [r7, #27]
    977a:	4619      	mov	r1, r3
    977c:	69f8      	ldr	r0, [r7, #28]
    977e:	4b0c      	ldr	r3, [pc, #48]	; (97b0 <_usb_d_dev_handle_trfail+0x1b4>)
    9780:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9782:	78fb      	ldrb	r3, [r7, #3]
    9784:	f107 0220 	add.w	r2, r7, #32
    9788:	4413      	add	r3, r2
    978a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    978e:	7efb      	ldrb	r3, [r7, #27]
    9790:	4619      	mov	r1, r3
    9792:	69f8      	ldr	r0, [r7, #28]
    9794:	4b07      	ldr	r3, [pc, #28]	; (97b4 <_usb_d_dev_handle_trfail+0x1b8>)
    9796:	4798      	blx	r3
}
    9798:	bf00      	nop
    979a:	3720      	adds	r7, #32
    979c:	46bd      	mov	sp, r7
    979e:	bd80      	pop	{r7, pc}
    97a0:	0000efc0 	.word	0x0000efc0
    97a4:	20000c9c 	.word	0x20000c9c
    97a8:	00008365 	.word	0x00008365
    97ac:	00008335 	.word	0x00008335
    97b0:	00008209 	.word	0x00008209
    97b4:	00008309 	.word	0x00008309
    97b8:	0000a375 	.word	0x0000a375
    97bc:	00008bf1 	.word	0x00008bf1

000097c0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    97c0:	b580      	push	{r7, lr}
    97c2:	b082      	sub	sp, #8
    97c4:	af00      	add	r7, sp, #0
    97c6:	6078      	str	r0, [r7, #4]
    97c8:	460b      	mov	r3, r1
    97ca:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    97cc:	78fb      	ldrb	r3, [r7, #3]
    97ce:	f003 0310 	and.w	r3, r3, #16
    97d2:	2b00      	cmp	r3, #0
    97d4:	d003      	beq.n	97de <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    97d6:	6878      	ldr	r0, [r7, #4]
    97d8:	4b0c      	ldr	r3, [pc, #48]	; (980c <_usb_d_dev_trans_setup_isr+0x4c>)
    97da:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    97dc:	e012      	b.n	9804 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    97de:	78fb      	ldrb	r3, [r7, #3]
    97e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    97e4:	2b00      	cmp	r3, #0
    97e6:	d004      	beq.n	97f2 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    97e8:	2101      	movs	r1, #1
    97ea:	6878      	ldr	r0, [r7, #4]
    97ec:	4b08      	ldr	r3, [pc, #32]	; (9810 <_usb_d_dev_trans_setup_isr+0x50>)
    97ee:	4798      	blx	r3
}
    97f0:	e008      	b.n	9804 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    97f2:	78fb      	ldrb	r3, [r7, #3]
    97f4:	f003 0320 	and.w	r3, r3, #32
    97f8:	2b00      	cmp	r3, #0
    97fa:	d003      	beq.n	9804 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    97fc:	2100      	movs	r1, #0
    97fe:	6878      	ldr	r0, [r7, #4]
    9800:	4b03      	ldr	r3, [pc, #12]	; (9810 <_usb_d_dev_trans_setup_isr+0x50>)
    9802:	4798      	blx	r3
}
    9804:	bf00      	nop
    9806:	3708      	adds	r7, #8
    9808:	46bd      	mov	sp, r7
    980a:	bd80      	pop	{r7, pc}
    980c:	000094e1 	.word	0x000094e1
    9810:	000095b9 	.word	0x000095b9

00009814 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9814:	b580      	push	{r7, lr}
    9816:	b082      	sub	sp, #8
    9818:	af00      	add	r7, sp, #0
    981a:	6078      	str	r0, [r7, #4]
    981c:	460b      	mov	r3, r1
    981e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9820:	78fb      	ldrb	r3, [r7, #3]
    9822:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9826:	2b00      	cmp	r3, #0
    9828:	d004      	beq.n	9834 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    982a:	2101      	movs	r1, #1
    982c:	6878      	ldr	r0, [r7, #4]
    982e:	4b1a      	ldr	r3, [pc, #104]	; (9898 <_usb_d_dev_trans_in_isr+0x84>)
    9830:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9832:	e02c      	b.n	988e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9834:	78fb      	ldrb	r3, [r7, #3]
    9836:	f003 0308 	and.w	r3, r3, #8
    983a:	2b00      	cmp	r3, #0
    983c:	d004      	beq.n	9848 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    983e:	2101      	movs	r1, #1
    9840:	6878      	ldr	r0, [r7, #4]
    9842:	4b16      	ldr	r3, [pc, #88]	; (989c <_usb_d_dev_trans_in_isr+0x88>)
    9844:	4798      	blx	r3
}
    9846:	e022      	b.n	988e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9848:	78fb      	ldrb	r3, [r7, #3]
    984a:	f003 0302 	and.w	r3, r3, #2
    984e:	2b00      	cmp	r3, #0
    9850:	d004      	beq.n	985c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9852:	2101      	movs	r1, #1
    9854:	6878      	ldr	r0, [r7, #4]
    9856:	4b12      	ldr	r3, [pc, #72]	; (98a0 <_usb_d_dev_trans_in_isr+0x8c>)
    9858:	4798      	blx	r3
}
    985a:	e018      	b.n	988e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    985c:	687b      	ldr	r3, [r7, #4]
    985e:	7cdb      	ldrb	r3, [r3, #19]
    9860:	f003 0307 	and.w	r3, r3, #7
    9864:	b2db      	uxtb	r3, r3
    9866:	2b01      	cmp	r3, #1
    9868:	d111      	bne.n	988e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    986a:	78fb      	ldrb	r3, [r7, #3]
    986c:	f003 0304 	and.w	r3, r3, #4
    9870:	2b00      	cmp	r3, #0
    9872:	d004      	beq.n	987e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9874:	2100      	movs	r1, #0
    9876:	6878      	ldr	r0, [r7, #4]
    9878:	4b08      	ldr	r3, [pc, #32]	; (989c <_usb_d_dev_trans_in_isr+0x88>)
    987a:	4798      	blx	r3
}
    987c:	e007      	b.n	988e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    987e:	78fb      	ldrb	r3, [r7, #3]
    9880:	f003 0310 	and.w	r3, r3, #16
    9884:	2b00      	cmp	r3, #0
    9886:	d002      	beq.n	988e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9888:	6878      	ldr	r0, [r7, #4]
    988a:	4b06      	ldr	r3, [pc, #24]	; (98a4 <_usb_d_dev_trans_in_isr+0x90>)
    988c:	4798      	blx	r3
}
    988e:	bf00      	nop
    9890:	3708      	adds	r7, #8
    9892:	46bd      	mov	sp, r7
    9894:	bd80      	pop	{r7, pc}
    9896:	bf00      	nop
    9898:	000095b9 	.word	0x000095b9
    989c:	000095fd 	.word	0x000095fd
    98a0:	00009005 	.word	0x00009005
    98a4:	000094e1 	.word	0x000094e1

000098a8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    98a8:	b580      	push	{r7, lr}
    98aa:	b082      	sub	sp, #8
    98ac:	af00      	add	r7, sp, #0
    98ae:	6078      	str	r0, [r7, #4]
    98b0:	460b      	mov	r3, r1
    98b2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    98b4:	78fb      	ldrb	r3, [r7, #3]
    98b6:	f003 0320 	and.w	r3, r3, #32
    98ba:	2b00      	cmp	r3, #0
    98bc:	d004      	beq.n	98c8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    98be:	2100      	movs	r1, #0
    98c0:	6878      	ldr	r0, [r7, #4]
    98c2:	4b1a      	ldr	r3, [pc, #104]	; (992c <_usb_d_dev_trans_out_isr+0x84>)
    98c4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    98c6:	e02c      	b.n	9922 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    98c8:	78fb      	ldrb	r3, [r7, #3]
    98ca:	f003 0304 	and.w	r3, r3, #4
    98ce:	2b00      	cmp	r3, #0
    98d0:	d004      	beq.n	98dc <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    98d2:	2100      	movs	r1, #0
    98d4:	6878      	ldr	r0, [r7, #4]
    98d6:	4b16      	ldr	r3, [pc, #88]	; (9930 <_usb_d_dev_trans_out_isr+0x88>)
    98d8:	4798      	blx	r3
}
    98da:	e022      	b.n	9922 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    98dc:	78fb      	ldrb	r3, [r7, #3]
    98de:	f003 0301 	and.w	r3, r3, #1
    98e2:	2b00      	cmp	r3, #0
    98e4:	d004      	beq.n	98f0 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    98e6:	2101      	movs	r1, #1
    98e8:	6878      	ldr	r0, [r7, #4]
    98ea:	4b12      	ldr	r3, [pc, #72]	; (9934 <_usb_d_dev_trans_out_isr+0x8c>)
    98ec:	4798      	blx	r3
}
    98ee:	e018      	b.n	9922 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    98f0:	687b      	ldr	r3, [r7, #4]
    98f2:	7cdb      	ldrb	r3, [r3, #19]
    98f4:	f003 0307 	and.w	r3, r3, #7
    98f8:	b2db      	uxtb	r3, r3
    98fa:	2b01      	cmp	r3, #1
    98fc:	d111      	bne.n	9922 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    98fe:	78fb      	ldrb	r3, [r7, #3]
    9900:	f003 0308 	and.w	r3, r3, #8
    9904:	2b00      	cmp	r3, #0
    9906:	d004      	beq.n	9912 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9908:	2101      	movs	r1, #1
    990a:	6878      	ldr	r0, [r7, #4]
    990c:	4b08      	ldr	r3, [pc, #32]	; (9930 <_usb_d_dev_trans_out_isr+0x88>)
    990e:	4798      	blx	r3
}
    9910:	e007      	b.n	9922 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9912:	78fb      	ldrb	r3, [r7, #3]
    9914:	f003 0310 	and.w	r3, r3, #16
    9918:	2b00      	cmp	r3, #0
    991a:	d002      	beq.n	9922 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    991c:	6878      	ldr	r0, [r7, #4]
    991e:	4b06      	ldr	r3, [pc, #24]	; (9938 <_usb_d_dev_trans_out_isr+0x90>)
    9920:	4798      	blx	r3
}
    9922:	bf00      	nop
    9924:	3708      	adds	r7, #8
    9926:	46bd      	mov	sp, r7
    9928:	bd80      	pop	{r7, pc}
    992a:	bf00      	nop
    992c:	000095b9 	.word	0x000095b9
    9930:	000095fd 	.word	0x000095fd
    9934:	0000921d 	.word	0x0000921d
    9938:	000094e1 	.word	0x000094e1

0000993c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    993c:	b580      	push	{r7, lr}
    993e:	b084      	sub	sp, #16
    9940:	af00      	add	r7, sp, #0
    9942:	6078      	str	r0, [r7, #4]
    9944:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9946:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    994a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    994c:	683b      	ldr	r3, [r7, #0]
    994e:	7c9b      	ldrb	r3, [r3, #18]
    9950:	f003 030f 	and.w	r3, r3, #15
    9954:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9956:	7afb      	ldrb	r3, [r7, #11]
    9958:	2201      	movs	r2, #1
    995a:	409a      	lsls	r2, r3
    995c:	687b      	ldr	r3, [r7, #4]
    995e:	4013      	ands	r3, r2
    9960:	2b00      	cmp	r3, #0
    9962:	d03d      	beq.n	99e0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9964:	7afb      	ldrb	r3, [r7, #11]
    9966:	68fa      	ldr	r2, [r7, #12]
    9968:	3308      	adds	r3, #8
    996a:	015b      	lsls	r3, r3, #5
    996c:	4413      	add	r3, r2
    996e:	3307      	adds	r3, #7
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9974:	7afb      	ldrb	r3, [r7, #11]
    9976:	68fa      	ldr	r2, [r7, #12]
    9978:	015b      	lsls	r3, r3, #5
    997a:	4413      	add	r3, r2
    997c:	f203 1309 	addw	r3, r3, #265	; 0x109
    9980:	781b      	ldrb	r3, [r3, #0]
    9982:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9984:	7aba      	ldrb	r2, [r7, #10]
    9986:	7a7b      	ldrb	r3, [r7, #9]
    9988:	4013      	ands	r3, r2
    998a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    998c:	7abb      	ldrb	r3, [r7, #10]
    998e:	2b00      	cmp	r3, #0
    9990:	d027      	beq.n	99e2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9992:	683b      	ldr	r3, [r7, #0]
    9994:	7cdb      	ldrb	r3, [r3, #19]
    9996:	f003 0307 	and.w	r3, r3, #7
    999a:	b2db      	uxtb	r3, r3
    999c:	2b01      	cmp	r3, #1
    999e:	d10c      	bne.n	99ba <_usb_d_dev_handle_eps+0x7e>
    99a0:	683b      	ldr	r3, [r7, #0]
    99a2:	7cdb      	ldrb	r3, [r3, #19]
    99a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    99a8:	b2db      	uxtb	r3, r3
    99aa:	2b00      	cmp	r3, #0
    99ac:	d105      	bne.n	99ba <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    99ae:	7abb      	ldrb	r3, [r7, #10]
    99b0:	4619      	mov	r1, r3
    99b2:	6838      	ldr	r0, [r7, #0]
    99b4:	4b0c      	ldr	r3, [pc, #48]	; (99e8 <_usb_d_dev_handle_eps+0xac>)
    99b6:	4798      	blx	r3
    99b8:	e013      	b.n	99e2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    99ba:	683b      	ldr	r3, [r7, #0]
    99bc:	7cdb      	ldrb	r3, [r3, #19]
    99be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    99c2:	b2db      	uxtb	r3, r3
    99c4:	2b00      	cmp	r3, #0
    99c6:	d005      	beq.n	99d4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    99c8:	7abb      	ldrb	r3, [r7, #10]
    99ca:	4619      	mov	r1, r3
    99cc:	6838      	ldr	r0, [r7, #0]
    99ce:	4b07      	ldr	r3, [pc, #28]	; (99ec <_usb_d_dev_handle_eps+0xb0>)
    99d0:	4798      	blx	r3
    99d2:	e006      	b.n	99e2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    99d4:	7abb      	ldrb	r3, [r7, #10]
    99d6:	4619      	mov	r1, r3
    99d8:	6838      	ldr	r0, [r7, #0]
    99da:	4b05      	ldr	r3, [pc, #20]	; (99f0 <_usb_d_dev_handle_eps+0xb4>)
    99dc:	4798      	blx	r3
    99de:	e000      	b.n	99e2 <_usb_d_dev_handle_eps+0xa6>
		return;
    99e0:	bf00      	nop
		}
	}
}
    99e2:	3710      	adds	r7, #16
    99e4:	46bd      	mov	sp, r7
    99e6:	bd80      	pop	{r7, pc}
    99e8:	000097c1 	.word	0x000097c1
    99ec:	00009815 	.word	0x00009815
    99f0:	000098a9 	.word	0x000098a9

000099f4 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    99f4:	b580      	push	{r7, lr}
    99f6:	b084      	sub	sp, #16
    99f8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    99fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99fe:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9a00:	68bb      	ldr	r3, [r7, #8]
    9a02:	8c1b      	ldrh	r3, [r3, #32]
    9a04:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9a06:	88fb      	ldrh	r3, [r7, #6]
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d104      	bne.n	9a16 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9a0c:	4b13      	ldr	r3, [pc, #76]	; (9a5c <_usb_d_dev_handler+0x68>)
    9a0e:	4798      	blx	r3
    9a10:	4603      	mov	r3, r0
    9a12:	2b00      	cmp	r3, #0
    9a14:	d11e      	bne.n	9a54 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9a16:	2300      	movs	r3, #0
    9a18:	73fb      	strb	r3, [r7, #15]
    9a1a:	e017      	b.n	9a4c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9a1c:	7bfa      	ldrb	r2, [r7, #15]
    9a1e:	4613      	mov	r3, r2
    9a20:	009b      	lsls	r3, r3, #2
    9a22:	4413      	add	r3, r2
    9a24:	009b      	lsls	r3, r3, #2
    9a26:	3310      	adds	r3, #16
    9a28:	4a0d      	ldr	r2, [pc, #52]	; (9a60 <_usb_d_dev_handler+0x6c>)
    9a2a:	4413      	add	r3, r2
    9a2c:	3304      	adds	r3, #4
    9a2e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9a30:	683b      	ldr	r3, [r7, #0]
    9a32:	7c9b      	ldrb	r3, [r3, #18]
    9a34:	2bff      	cmp	r3, #255	; 0xff
    9a36:	d005      	beq.n	9a44 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9a38:	88fb      	ldrh	r3, [r7, #6]
    9a3a:	6839      	ldr	r1, [r7, #0]
    9a3c:	4618      	mov	r0, r3
    9a3e:	4b09      	ldr	r3, [pc, #36]	; (9a64 <_usb_d_dev_handler+0x70>)
    9a40:	4798      	blx	r3
    9a42:	e000      	b.n	9a46 <_usb_d_dev_handler+0x52>
			continue;
    9a44:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9a46:	7bfb      	ldrb	r3, [r7, #15]
    9a48:	3301      	adds	r3, #1
    9a4a:	73fb      	strb	r3, [r7, #15]
    9a4c:	7bfb      	ldrb	r3, [r7, #15]
    9a4e:	2b08      	cmp	r3, #8
    9a50:	d9e4      	bls.n	9a1c <_usb_d_dev_handler+0x28>
    9a52:	e000      	b.n	9a56 <_usb_d_dev_handler+0x62>
			return;
    9a54:	bf00      	nop
	}
}
    9a56:	3710      	adds	r7, #16
    9a58:	46bd      	mov	sp, r7
    9a5a:	bd80      	pop	{r7, pc}
    9a5c:	00008f4d 	.word	0x00008f4d
    9a60:	20000bd4 	.word	0x20000bd4
    9a64:	0000993d 	.word	0x0000993d

00009a68 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9a68:	b580      	push	{r7, lr}
    9a6a:	b082      	sub	sp, #8
    9a6c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9a6e:	2300      	movs	r3, #0
    9a70:	71fb      	strb	r3, [r7, #7]
    9a72:	e023      	b.n	9abc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9a74:	79fa      	ldrb	r2, [r7, #7]
    9a76:	4613      	mov	r3, r2
    9a78:	009b      	lsls	r3, r3, #2
    9a7a:	4413      	add	r3, r2
    9a7c:	009b      	lsls	r3, r3, #2
    9a7e:	3310      	adds	r3, #16
    9a80:	4a14      	ldr	r2, [pc, #80]	; (9ad4 <_usb_d_dev_reset_epts+0x6c>)
    9a82:	4413      	add	r3, r2
    9a84:	3304      	adds	r3, #4
    9a86:	2103      	movs	r1, #3
    9a88:	4618      	mov	r0, r3
    9a8a:	4b13      	ldr	r3, [pc, #76]	; (9ad8 <_usb_d_dev_reset_epts+0x70>)
    9a8c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9a8e:	79fa      	ldrb	r2, [r7, #7]
    9a90:	4910      	ldr	r1, [pc, #64]	; (9ad4 <_usb_d_dev_reset_epts+0x6c>)
    9a92:	4613      	mov	r3, r2
    9a94:	009b      	lsls	r3, r3, #2
    9a96:	4413      	add	r3, r2
    9a98:	009b      	lsls	r3, r3, #2
    9a9a:	440b      	add	r3, r1
    9a9c:	3326      	adds	r3, #38	; 0x26
    9a9e:	22ff      	movs	r2, #255	; 0xff
    9aa0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9aa2:	79fa      	ldrb	r2, [r7, #7]
    9aa4:	490b      	ldr	r1, [pc, #44]	; (9ad4 <_usb_d_dev_reset_epts+0x6c>)
    9aa6:	4613      	mov	r3, r2
    9aa8:	009b      	lsls	r3, r3, #2
    9aaa:	4413      	add	r3, r2
    9aac:	009b      	lsls	r3, r3, #2
    9aae:	440b      	add	r3, r1
    9ab0:	3327      	adds	r3, #39	; 0x27
    9ab2:	2200      	movs	r2, #0
    9ab4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9ab6:	79fb      	ldrb	r3, [r7, #7]
    9ab8:	3301      	adds	r3, #1
    9aba:	71fb      	strb	r3, [r7, #7]
    9abc:	79fb      	ldrb	r3, [r7, #7]
    9abe:	2b08      	cmp	r3, #8
    9ac0:	d9d8      	bls.n	9a74 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9ac2:	22a0      	movs	r2, #160	; 0xa0
    9ac4:	2100      	movs	r1, #0
    9ac6:	4805      	ldr	r0, [pc, #20]	; (9adc <_usb_d_dev_reset_epts+0x74>)
    9ac8:	4b05      	ldr	r3, [pc, #20]	; (9ae0 <_usb_d_dev_reset_epts+0x78>)
    9aca:	4798      	blx	r3
}
    9acc:	bf00      	nop
    9ace:	3708      	adds	r7, #8
    9ad0:	46bd      	mov	sp, r7
    9ad2:	bd80      	pop	{r7, pc}
    9ad4:	20000bd4 	.word	0x20000bd4
    9ad8:	0000a32d 	.word	0x0000a32d
    9adc:	20000c9c 	.word	0x20000c9c
    9ae0:	0000e951 	.word	0x0000e951

00009ae4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b084      	sub	sp, #16
    9ae8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9aea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9aee:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9af0:	2301      	movs	r3, #1
    9af2:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9af4:	2304      	movs	r3, #4
    9af6:	713b      	strb	r3, [r7, #4]
    9af8:	2300      	movs	r3, #0
    9afa:	717b      	strb	r3, [r7, #5]
    9afc:	2300      	movs	r3, #0
    9afe:	71bb      	strb	r3, [r7, #6]
    9b00:	2300      	movs	r3, #0
    9b02:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9b04:	2101      	movs	r1, #1
    9b06:	68f8      	ldr	r0, [r7, #12]
    9b08:	4b26      	ldr	r3, [pc, #152]	; (9ba4 <_usb_d_dev_init+0xc0>)
    9b0a:	4798      	blx	r3
    9b0c:	4603      	mov	r3, r0
    9b0e:	f083 0301 	eor.w	r3, r3, #1
    9b12:	b2db      	uxtb	r3, r3
    9b14:	2b00      	cmp	r3, #0
    9b16:	d011      	beq.n	9b3c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9b18:	2102      	movs	r1, #2
    9b1a:	68f8      	ldr	r0, [r7, #12]
    9b1c:	4b22      	ldr	r3, [pc, #136]	; (9ba8 <_usb_d_dev_init+0xc4>)
    9b1e:	4798      	blx	r3
    9b20:	4603      	mov	r3, r0
    9b22:	2b00      	cmp	r3, #0
    9b24:	d006      	beq.n	9b34 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9b26:	68f8      	ldr	r0, [r7, #12]
    9b28:	4b20      	ldr	r3, [pc, #128]	; (9bac <_usb_d_dev_init+0xc8>)
    9b2a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9b2c:	2102      	movs	r1, #2
    9b2e:	68f8      	ldr	r0, [r7, #12]
    9b30:	4b1f      	ldr	r3, [pc, #124]	; (9bb0 <_usb_d_dev_init+0xcc>)
    9b32:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9b34:	2101      	movs	r1, #1
    9b36:	68f8      	ldr	r0, [r7, #12]
    9b38:	4b1e      	ldr	r3, [pc, #120]	; (9bb4 <_usb_d_dev_init+0xd0>)
    9b3a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9b3c:	2101      	movs	r1, #1
    9b3e:	68f8      	ldr	r0, [r7, #12]
    9b40:	4b1b      	ldr	r3, [pc, #108]	; (9bb0 <_usb_d_dev_init+0xcc>)
    9b42:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9b44:	4b1c      	ldr	r3, [pc, #112]	; (9bb8 <_usb_d_dev_init+0xd4>)
    9b46:	4a1d      	ldr	r2, [pc, #116]	; (9bbc <_usb_d_dev_init+0xd8>)
    9b48:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9b4a:	4b1b      	ldr	r3, [pc, #108]	; (9bb8 <_usb_d_dev_init+0xd4>)
    9b4c:	4a1b      	ldr	r2, [pc, #108]	; (9bbc <_usb_d_dev_init+0xd8>)
    9b4e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9b50:	4b19      	ldr	r3, [pc, #100]	; (9bb8 <_usb_d_dev_init+0xd4>)
    9b52:	4a1a      	ldr	r2, [pc, #104]	; (9bbc <_usb_d_dev_init+0xd8>)
    9b54:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9b56:	4b18      	ldr	r3, [pc, #96]	; (9bb8 <_usb_d_dev_init+0xd4>)
    9b58:	4a18      	ldr	r2, [pc, #96]	; (9bbc <_usb_d_dev_init+0xd8>)
    9b5a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9b5c:	4b16      	ldr	r3, [pc, #88]	; (9bb8 <_usb_d_dev_init+0xd4>)
    9b5e:	4a17      	ldr	r2, [pc, #92]	; (9bbc <_usb_d_dev_init+0xd8>)
    9b60:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9b62:	4b17      	ldr	r3, [pc, #92]	; (9bc0 <_usb_d_dev_init+0xdc>)
    9b64:	4798      	blx	r3

	_usb_load_calib();
    9b66:	4b17      	ldr	r3, [pc, #92]	; (9bc4 <_usb_d_dev_init+0xe0>)
    9b68:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9b6a:	2104      	movs	r1, #4
    9b6c:	68f8      	ldr	r0, [r7, #12]
    9b6e:	4b11      	ldr	r3, [pc, #68]	; (9bb4 <_usb_d_dev_init+0xd0>)
    9b70:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9b72:	4b15      	ldr	r3, [pc, #84]	; (9bc8 <_usb_d_dev_init+0xe4>)
    9b74:	4619      	mov	r1, r3
    9b76:	68f8      	ldr	r0, [r7, #12]
    9b78:	4b14      	ldr	r3, [pc, #80]	; (9bcc <_usb_d_dev_init+0xe8>)
    9b7a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9b7c:	7afb      	ldrb	r3, [r7, #11]
    9b7e:	f107 0210 	add.w	r2, r7, #16
    9b82:	4413      	add	r3, r2
    9b84:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9b88:	f043 0301 	orr.w	r3, r3, #1
    9b8c:	b2db      	uxtb	r3, r3
    9b8e:	b29b      	uxth	r3, r3
    9b90:	4619      	mov	r1, r3
    9b92:	68f8      	ldr	r0, [r7, #12]
    9b94:	4b0e      	ldr	r3, [pc, #56]	; (9bd0 <_usb_d_dev_init+0xec>)
    9b96:	4798      	blx	r3

	return ERR_NONE;
    9b98:	2300      	movs	r3, #0
}
    9b9a:	4618      	mov	r0, r3
    9b9c:	3710      	adds	r7, #16
    9b9e:	46bd      	mov	sp, r7
    9ba0:	bd80      	pop	{r7, pc}
    9ba2:	bf00      	nop
    9ba4:	0000817d 	.word	0x0000817d
    9ba8:	000084cd 	.word	0x000084cd
    9bac:	000084a1 	.word	0x000084a1
    9bb0:	00008153 	.word	0x00008153
    9bb4:	000084fd 	.word	0x000084fd
    9bb8:	20000bd4 	.word	0x20000bd4
    9bbc:	000085c5 	.word	0x000085c5
    9bc0:	00009a69 	.word	0x00009a69
    9bc4:	000085dd 	.word	0x000085dd
    9bc8:	20000c9c 	.word	0x20000c9c
    9bcc:	000085a9 	.word	0x000085a9
    9bd0:	0000856d 	.word	0x0000856d

00009bd4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9bd4:	b580      	push	{r7, lr}
    9bd6:	b082      	sub	sp, #8
    9bd8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9bda:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9bde:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9be0:	2103      	movs	r1, #3
    9be2:	6878      	ldr	r0, [r7, #4]
    9be4:	4b17      	ldr	r3, [pc, #92]	; (9c44 <_usb_d_dev_enable+0x70>)
    9be6:	4798      	blx	r3
    9be8:	4603      	mov	r3, r0
    9bea:	2b00      	cmp	r3, #0
    9bec:	d002      	beq.n	9bf4 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9bee:	f06f 0310 	mvn.w	r3, #16
    9bf2:	e023      	b.n	9c3c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9bf4:	6878      	ldr	r0, [r7, #4]
    9bf6:	4b14      	ldr	r3, [pc, #80]	; (9c48 <_usb_d_dev_enable+0x74>)
    9bf8:	4798      	blx	r3
    9bfa:	4603      	mov	r3, r0
    9bfc:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9bfe:	78fb      	ldrb	r3, [r7, #3]
    9c00:	f003 0302 	and.w	r3, r3, #2
    9c04:	2b00      	cmp	r3, #0
    9c06:	d107      	bne.n	9c18 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9c08:	78fb      	ldrb	r3, [r7, #3]
    9c0a:	f043 0302 	orr.w	r3, r3, #2
    9c0e:	b2db      	uxtb	r3, r3
    9c10:	4619      	mov	r1, r3
    9c12:	6878      	ldr	r0, [r7, #4]
    9c14:	4b0d      	ldr	r3, [pc, #52]	; (9c4c <_usb_d_dev_enable+0x78>)
    9c16:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9c18:	2050      	movs	r0, #80	; 0x50
    9c1a:	4b0d      	ldr	r3, [pc, #52]	; (9c50 <_usb_d_dev_enable+0x7c>)
    9c1c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9c1e:	2051      	movs	r0, #81	; 0x51
    9c20:	4b0b      	ldr	r3, [pc, #44]	; (9c50 <_usb_d_dev_enable+0x7c>)
    9c22:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9c24:	2052      	movs	r0, #82	; 0x52
    9c26:	4b0a      	ldr	r3, [pc, #40]	; (9c50 <_usb_d_dev_enable+0x7c>)
    9c28:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9c2a:	2053      	movs	r0, #83	; 0x53
    9c2c:	4b08      	ldr	r3, [pc, #32]	; (9c50 <_usb_d_dev_enable+0x7c>)
    9c2e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9c30:	f240 218d 	movw	r1, #653	; 0x28d
    9c34:	6878      	ldr	r0, [r7, #4]
    9c36:	4b07      	ldr	r3, [pc, #28]	; (9c54 <_usb_d_dev_enable+0x80>)
    9c38:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9c3a:	2300      	movs	r3, #0
}
    9c3c:	4618      	mov	r0, r3
    9c3e:	3708      	adds	r7, #8
    9c40:	46bd      	mov	sp, r7
    9c42:	bd80      	pop	{r7, pc}
    9c44:	00008477 	.word	0x00008477
    9c48:	00008525 	.word	0x00008525
    9c4c:	000084fd 	.word	0x000084fd
    9c50:	00008089 	.word	0x00008089
    9c54:	00008421 	.word	0x00008421

00009c58 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9c58:	b580      	push	{r7, lr}
    9c5a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9c5c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c60:	4b01      	ldr	r3, [pc, #4]	; (9c68 <_usb_d_dev_attach+0x10>)
    9c62:	4798      	blx	r3
}
    9c64:	bf00      	nop
    9c66:	bd80      	pop	{r7, pc}
    9c68:	00008549 	.word	0x00008549

00009c6c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9c6c:	b580      	push	{r7, lr}
    9c6e:	b082      	sub	sp, #8
    9c70:	af00      	add	r7, sp, #0
    9c72:	4603      	mov	r3, r0
    9c74:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9c76:	79fb      	ldrb	r3, [r7, #7]
    9c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9c7c:	b2db      	uxtb	r3, r3
    9c7e:	4619      	mov	r1, r3
    9c80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c84:	4b02      	ldr	r3, [pc, #8]	; (9c90 <_usb_d_dev_set_address+0x24>)
    9c86:	4798      	blx	r3
}
    9c88:	bf00      	nop
    9c8a:	3708      	adds	r7, #8
    9c8c:	46bd      	mov	sp, r7
    9c8e:	bd80      	pop	{r7, pc}
    9c90:	0000858b 	.word	0x0000858b

00009c94 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9c94:	b590      	push	{r4, r7, lr}
    9c96:	b085      	sub	sp, #20
    9c98:	af00      	add	r7, sp, #0
    9c9a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9c9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9ca0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	7c9b      	ldrb	r3, [r3, #18]
    9ca6:	f003 030f 	and.w	r3, r3, #15
    9caa:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	68db      	ldr	r3, [r3, #12]
    9cb0:	461a      	mov	r2, r3
    9cb2:	7afb      	ldrb	r3, [r7, #11]
    9cb4:	2100      	movs	r1, #0
    9cb6:	4618      	mov	r0, r3
    9cb8:	4b0f      	ldr	r3, [pc, #60]	; (9cf8 <_usb_d_dev_trans_setup+0x64>)
    9cba:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	8a1b      	ldrh	r3, [r3, #16]
    9cc0:	461a      	mov	r2, r3
    9cc2:	7af8      	ldrb	r0, [r7, #11]
    9cc4:	2300      	movs	r3, #0
    9cc6:	2100      	movs	r1, #0
    9cc8:	4c0c      	ldr	r4, [pc, #48]	; (9cfc <_usb_d_dev_trans_setup+0x68>)
    9cca:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9ccc:	7afb      	ldrb	r3, [r7, #11]
    9cce:	22b0      	movs	r2, #176	; 0xb0
    9cd0:	4619      	mov	r1, r3
    9cd2:	68f8      	ldr	r0, [r7, #12]
    9cd4:	4b0a      	ldr	r3, [pc, #40]	; (9d00 <_usb_d_dev_trans_setup+0x6c>)
    9cd6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9cd8:	7afb      	ldrb	r3, [r7, #11]
    9cda:	2200      	movs	r2, #0
    9cdc:	2100      	movs	r1, #0
    9cde:	4618      	mov	r0, r3
    9ce0:	4b08      	ldr	r3, [pc, #32]	; (9d04 <_usb_d_dev_trans_setup+0x70>)
    9ce2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9ce4:	7afb      	ldrb	r3, [r7, #11]
    9ce6:	2210      	movs	r2, #16
    9ce8:	4619      	mov	r1, r3
    9cea:	68f8      	ldr	r0, [r7, #12]
    9cec:	4b06      	ldr	r3, [pc, #24]	; (9d08 <_usb_d_dev_trans_setup+0x74>)
    9cee:	4798      	blx	r3
}
    9cf0:	bf00      	nop
    9cf2:	3714      	adds	r7, #20
    9cf4:	46bd      	mov	sp, r7
    9cf6:	bd90      	pop	{r4, r7, pc}
    9cf8:	00008a29 	.word	0x00008a29
    9cfc:	00008bb1 	.word	0x00008bb1
    9d00:	00008289 	.word	0x00008289
    9d04:	00008c81 	.word	0x00008c81
    9d08:	000082dd 	.word	0x000082dd

00009d0c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9d0c:	b580      	push	{r7, lr}
    9d0e:	b088      	sub	sp, #32
    9d10:	af00      	add	r7, sp, #0
    9d12:	4603      	mov	r3, r0
    9d14:	71fb      	strb	r3, [r7, #7]
    9d16:	460b      	mov	r3, r1
    9d18:	71bb      	strb	r3, [r7, #6]
    9d1a:	4613      	mov	r3, r2
    9d1c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9d1e:	79fb      	ldrb	r3, [r7, #7]
    9d20:	f003 030f 	and.w	r3, r3, #15
    9d24:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9d26:	79fb      	ldrb	r3, [r7, #7]
    9d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	bf14      	ite	ne
    9d30:	2301      	movne	r3, #1
    9d32:	2300      	moveq	r3, #0
    9d34:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9d36:	7fba      	ldrb	r2, [r7, #30]
    9d38:	7ffb      	ldrb	r3, [r7, #31]
    9d3a:	4611      	mov	r1, r2
    9d3c:	4618      	mov	r0, r3
    9d3e:	4b3e      	ldr	r3, [pc, #248]	; (9e38 <_usb_d_dev_ep_init+0x12c>)
    9d40:	4798      	blx	r3
    9d42:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9d44:	79bb      	ldrb	r3, [r7, #6]
    9d46:	f003 0303 	and.w	r3, r3, #3
    9d4a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9d4c:	7ffa      	ldrb	r2, [r7, #31]
    9d4e:	4613      	mov	r3, r2
    9d50:	005b      	lsls	r3, r3, #1
    9d52:	4413      	add	r3, r2
    9d54:	009b      	lsls	r3, r3, #2
    9d56:	4a39      	ldr	r2, [pc, #228]	; (9e3c <_usb_d_dev_ep_init+0x130>)
    9d58:	4413      	add	r3, r2
    9d5a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9d5c:	7ffb      	ldrb	r3, [r7, #31]
    9d5e:	2b04      	cmp	r3, #4
    9d60:	d902      	bls.n	9d68 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9d62:	f06f 0311 	mvn.w	r3, #17
    9d66:	e063      	b.n	9e30 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9d68:	69bb      	ldr	r3, [r7, #24]
    9d6a:	7c9b      	ldrb	r3, [r3, #18]
    9d6c:	2bff      	cmp	r3, #255	; 0xff
    9d6e:	d002      	beq.n	9d76 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9d70:	f06f 0313 	mvn.w	r3, #19
    9d74:	e05c      	b.n	9e30 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9d76:	7dfb      	ldrb	r3, [r7, #23]
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d11f      	bne.n	9dbc <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9d7c:	7fbb      	ldrb	r3, [r7, #30]
    9d7e:	2b00      	cmp	r3, #0
    9d80:	bf14      	ite	ne
    9d82:	2301      	movne	r3, #1
    9d84:	2300      	moveq	r3, #0
    9d86:	b2db      	uxtb	r3, r3
    9d88:	f083 0301 	eor.w	r3, r3, #1
    9d8c:	b2db      	uxtb	r3, r3
    9d8e:	f003 0301 	and.w	r3, r3, #1
    9d92:	b2da      	uxtb	r2, r3
    9d94:	7ffb      	ldrb	r3, [r7, #31]
    9d96:	4611      	mov	r1, r2
    9d98:	4618      	mov	r0, r3
    9d9a:	4b27      	ldr	r3, [pc, #156]	; (9e38 <_usb_d_dev_ep_init+0x12c>)
    9d9c:	4798      	blx	r3
    9d9e:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9da0:	68fb      	ldr	r3, [r7, #12]
    9da2:	7c9b      	ldrb	r3, [r3, #18]
    9da4:	2bff      	cmp	r3, #255	; 0xff
    9da6:	d002      	beq.n	9dae <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9da8:	f06f 0313 	mvn.w	r3, #19
    9dac:	e040      	b.n	9e30 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9dae:	693b      	ldr	r3, [r7, #16]
    9db0:	681b      	ldr	r3, [r3, #0]
    9db2:	2b00      	cmp	r3, #0
    9db4:	d102      	bne.n	9dbc <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9db6:	f06f 0312 	mvn.w	r3, #18
    9dba:	e039      	b.n	9e30 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9dbc:	7fbb      	ldrb	r3, [r7, #30]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d007      	beq.n	9dd2 <_usb_d_dev_ep_init+0xc6>
    9dc2:	693b      	ldr	r3, [r7, #16]
    9dc4:	685b      	ldr	r3, [r3, #4]
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	bf14      	ite	ne
    9dca:	2301      	movne	r3, #1
    9dcc:	2300      	moveq	r3, #0
    9dce:	b2db      	uxtb	r3, r3
    9dd0:	e006      	b.n	9de0 <_usb_d_dev_ep_init+0xd4>
    9dd2:	693b      	ldr	r3, [r7, #16]
    9dd4:	681b      	ldr	r3, [r3, #0]
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	bf14      	ite	ne
    9dda:	2301      	movne	r3, #1
    9ddc:	2300      	moveq	r3, #0
    9dde:	b2db      	uxtb	r3, r3
    9de0:	2b00      	cmp	r3, #0
    9de2:	d00f      	beq.n	9e04 <_usb_d_dev_ep_init+0xf8>
    9de4:	7fbb      	ldrb	r3, [r7, #30]
    9de6:	2b00      	cmp	r3, #0
    9de8:	d003      	beq.n	9df2 <_usb_d_dev_ep_init+0xe6>
    9dea:	693b      	ldr	r3, [r7, #16]
    9dec:	895b      	ldrh	r3, [r3, #10]
    9dee:	461a      	mov	r2, r3
    9df0:	e002      	b.n	9df8 <_usb_d_dev_ep_init+0xec>
    9df2:	693b      	ldr	r3, [r7, #16]
    9df4:	891b      	ldrh	r3, [r3, #8]
    9df6:	461a      	mov	r2, r3
    9df8:	88bb      	ldrh	r3, [r7, #4]
    9dfa:	429a      	cmp	r2, r3
    9dfc:	da02      	bge.n	9e04 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9dfe:	f06f 0312 	mvn.w	r3, #18
    9e02:	e015      	b.n	9e30 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9e04:	7fbb      	ldrb	r3, [r7, #30]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d002      	beq.n	9e10 <_usb_d_dev_ep_init+0x104>
    9e0a:	693b      	ldr	r3, [r7, #16]
    9e0c:	685b      	ldr	r3, [r3, #4]
    9e0e:	e001      	b.n	9e14 <_usb_d_dev_ep_init+0x108>
    9e10:	693b      	ldr	r3, [r7, #16]
    9e12:	681b      	ldr	r3, [r3, #0]
    9e14:	69ba      	ldr	r2, [r7, #24]
    9e16:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9e18:	69bb      	ldr	r3, [r7, #24]
    9e1a:	88ba      	ldrh	r2, [r7, #4]
    9e1c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9e1e:	7dfb      	ldrb	r3, [r7, #23]
    9e20:	3301      	adds	r3, #1
    9e22:	b2da      	uxtb	r2, r3
    9e24:	69bb      	ldr	r3, [r7, #24]
    9e26:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    9e28:	69bb      	ldr	r3, [r7, #24]
    9e2a:	79fa      	ldrb	r2, [r7, #7]
    9e2c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9e2e:	2300      	movs	r3, #0
}
    9e30:	4618      	mov	r0, r3
    9e32:	3720      	adds	r7, #32
    9e34:	46bd      	mov	sp, r7
    9e36:	bd80      	pop	{r7, pc}
    9e38:	00008d3d 	.word	0x00008d3d
    9e3c:	0000ef84 	.word	0x0000ef84

00009e40 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9e40:	b580      	push	{r7, lr}
    9e42:	b086      	sub	sp, #24
    9e44:	af00      	add	r7, sp, #0
    9e46:	4603      	mov	r3, r0
    9e48:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    9e4a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e4e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9e50:	79fb      	ldrb	r3, [r7, #7]
    9e52:	f003 030f 	and.w	r3, r3, #15
    9e56:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9e58:	79fb      	ldrb	r3, [r7, #7]
    9e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e5e:	2b00      	cmp	r3, #0
    9e60:	bf14      	ite	ne
    9e62:	2301      	movne	r3, #1
    9e64:	2300      	moveq	r3, #0
    9e66:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9e68:	7cba      	ldrb	r2, [r7, #18]
    9e6a:	7cfb      	ldrb	r3, [r7, #19]
    9e6c:	4611      	mov	r1, r2
    9e6e:	4618      	mov	r0, r3
    9e70:	4b2a      	ldr	r3, [pc, #168]	; (9f1c <_usb_d_dev_ep_deinit+0xdc>)
    9e72:	4798      	blx	r3
    9e74:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9e76:	7cfb      	ldrb	r3, [r7, #19]
    9e78:	2b04      	cmp	r3, #4
    9e7a:	d84a      	bhi.n	9f12 <_usb_d_dev_ep_deinit+0xd2>
    9e7c:	68fb      	ldr	r3, [r7, #12]
    9e7e:	7c9b      	ldrb	r3, [r3, #18]
    9e80:	2bff      	cmp	r3, #255	; 0xff
    9e82:	d046      	beq.n	9f12 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9e84:	7cbb      	ldrb	r3, [r7, #18]
    9e86:	2203      	movs	r2, #3
    9e88:	4619      	mov	r1, r3
    9e8a:	68f8      	ldr	r0, [r7, #12]
    9e8c:	4b24      	ldr	r3, [pc, #144]	; (9f20 <_usb_d_dev_ep_deinit+0xe0>)
    9e8e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9e90:	68fb      	ldr	r3, [r7, #12]
    9e92:	7cdb      	ldrb	r3, [r3, #19]
    9e94:	f003 0307 	and.w	r3, r3, #7
    9e98:	b2db      	uxtb	r3, r3
    9e9a:	2b01      	cmp	r3, #1
    9e9c:	d107      	bne.n	9eae <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9e9e:	79fb      	ldrb	r3, [r7, #7]
    9ea0:	697a      	ldr	r2, [r7, #20]
    9ea2:	3308      	adds	r3, #8
    9ea4:	015b      	lsls	r3, r3, #5
    9ea6:	4413      	add	r3, r2
    9ea8:	2200      	movs	r2, #0
    9eaa:	701a      	strb	r2, [r3, #0]
    9eac:	e02a      	b.n	9f04 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	da15      	bge.n	9ee2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9eb6:	79fb      	ldrb	r3, [r7, #7]
    9eb8:	f003 030f 	and.w	r3, r3, #15
    9ebc:	79fa      	ldrb	r2, [r7, #7]
    9ebe:	f002 020f 	and.w	r2, r2, #15
    9ec2:	6979      	ldr	r1, [r7, #20]
    9ec4:	3208      	adds	r2, #8
    9ec6:	0152      	lsls	r2, r2, #5
    9ec8:	440a      	add	r2, r1
    9eca:	7812      	ldrb	r2, [r2, #0]
    9ecc:	b2d2      	uxtb	r2, r2
    9ece:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9ed2:	b2d1      	uxtb	r1, r2
    9ed4:	697a      	ldr	r2, [r7, #20]
    9ed6:	3308      	adds	r3, #8
    9ed8:	015b      	lsls	r3, r3, #5
    9eda:	4413      	add	r3, r2
    9edc:	460a      	mov	r2, r1
    9ede:	701a      	strb	r2, [r3, #0]
    9ee0:	e010      	b.n	9f04 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9ee2:	79fb      	ldrb	r3, [r7, #7]
    9ee4:	79fa      	ldrb	r2, [r7, #7]
    9ee6:	6979      	ldr	r1, [r7, #20]
    9ee8:	3208      	adds	r2, #8
    9eea:	0152      	lsls	r2, r2, #5
    9eec:	440a      	add	r2, r1
    9eee:	7812      	ldrb	r2, [r2, #0]
    9ef0:	b2d2      	uxtb	r2, r2
    9ef2:	f022 0207 	bic.w	r2, r2, #7
    9ef6:	b2d1      	uxtb	r1, r2
    9ef8:	697a      	ldr	r2, [r7, #20]
    9efa:	3308      	adds	r3, #8
    9efc:	015b      	lsls	r3, r3, #5
    9efe:	4413      	add	r3, r2
    9f00:	460a      	mov	r2, r1
    9f02:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9f04:	68fb      	ldr	r3, [r7, #12]
    9f06:	2200      	movs	r2, #0
    9f08:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9f0a:	68fb      	ldr	r3, [r7, #12]
    9f0c:	22ff      	movs	r2, #255	; 0xff
    9f0e:	749a      	strb	r2, [r3, #18]
    9f10:	e000      	b.n	9f14 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9f12:	bf00      	nop
}
    9f14:	3718      	adds	r7, #24
    9f16:	46bd      	mov	sp, r7
    9f18:	bd80      	pop	{r7, pc}
    9f1a:	bf00      	nop
    9f1c:	00008d3d 	.word	0x00008d3d
    9f20:	0000a375 	.word	0x0000a375

00009f24 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9f24:	b5b0      	push	{r4, r5, r7, lr}
    9f26:	b088      	sub	sp, #32
    9f28:	af00      	add	r7, sp, #0
    9f2a:	4603      	mov	r3, r0
    9f2c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9f2e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f32:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9f34:	79fb      	ldrb	r3, [r7, #7]
    9f36:	f003 030f 	and.w	r3, r3, #15
    9f3a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9f3c:	79fb      	ldrb	r3, [r7, #7]
    9f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f42:	2b00      	cmp	r3, #0
    9f44:	bf14      	ite	ne
    9f46:	2301      	movne	r3, #1
    9f48:	2300      	moveq	r3, #0
    9f4a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9f4c:	7eba      	ldrb	r2, [r7, #26]
    9f4e:	7efb      	ldrb	r3, [r7, #27]
    9f50:	4611      	mov	r1, r2
    9f52:	4618      	mov	r0, r3
    9f54:	4b70      	ldr	r3, [pc, #448]	; (a118 <_usb_d_dev_ep_enable+0x1f4>)
    9f56:	4798      	blx	r3
    9f58:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9f5a:	7efb      	ldrb	r3, [r7, #27]
    9f5c:	4619      	mov	r1, r3
    9f5e:	69f8      	ldr	r0, [r7, #28]
    9f60:	4b6e      	ldr	r3, [pc, #440]	; (a11c <_usb_d_dev_ep_enable+0x1f8>)
    9f62:	4798      	blx	r3
    9f64:	4603      	mov	r3, r0
    9f66:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9f68:	7efb      	ldrb	r3, [r7, #27]
    9f6a:	2b04      	cmp	r3, #4
    9f6c:	d803      	bhi.n	9f76 <_usb_d_dev_ep_enable+0x52>
    9f6e:	697b      	ldr	r3, [r7, #20]
    9f70:	7c9b      	ldrb	r3, [r3, #18]
    9f72:	2bff      	cmp	r3, #255	; 0xff
    9f74:	d102      	bne.n	9f7c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9f76:	f06f 0311 	mvn.w	r3, #17
    9f7a:	e0c8      	b.n	a10e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9f7c:	7efb      	ldrb	r3, [r7, #27]
    9f7e:	015b      	lsls	r3, r3, #5
    9f80:	4a67      	ldr	r2, [pc, #412]	; (a120 <_usb_d_dev_ep_enable+0x1fc>)
    9f82:	4413      	add	r3, r2
    9f84:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9f86:	697b      	ldr	r3, [r7, #20]
    9f88:	7cdb      	ldrb	r3, [r3, #19]
    9f8a:	f003 0307 	and.w	r3, r3, #7
    9f8e:	b2db      	uxtb	r3, r3
    9f90:	2b01      	cmp	r3, #1
    9f92:	d14b      	bne.n	a02c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9f94:	7cfb      	ldrb	r3, [r7, #19]
    9f96:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9f9a:	2b00      	cmp	r3, #0
    9f9c:	d002      	beq.n	9fa4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9f9e:	f06f 0313 	mvn.w	r3, #19
    9fa2:	e0b4      	b.n	a10e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9fa4:	7efb      	ldrb	r3, [r7, #27]
    9fa6:	2211      	movs	r2, #17
    9fa8:	4619      	mov	r1, r3
    9faa:	69f8      	ldr	r0, [r7, #28]
    9fac:	4b5d      	ldr	r3, [pc, #372]	; (a124 <_usb_d_dev_ep_enable+0x200>)
    9fae:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9fb0:	697b      	ldr	r3, [r7, #20]
    9fb2:	8a1b      	ldrh	r3, [r3, #16]
    9fb4:	039b      	lsls	r3, r3, #14
    9fb6:	4c5c      	ldr	r4, [pc, #368]	; (a128 <_usb_d_dev_ep_enable+0x204>)
    9fb8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9fba:	697b      	ldr	r3, [r7, #20]
    9fbc:	8a1b      	ldrh	r3, [r3, #16]
    9fbe:	4618      	mov	r0, r3
    9fc0:	4b5a      	ldr	r3, [pc, #360]	; (a12c <_usb_d_dev_ep_enable+0x208>)
    9fc2:	4798      	blx	r3
    9fc4:	4603      	mov	r3, r0
    9fc6:	071b      	lsls	r3, r3, #28
    9fc8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9fcc:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9fd0:	68fb      	ldr	r3, [r7, #12]
    9fd2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9fd4:	68fb      	ldr	r3, [r7, #12]
    9fd6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9fda:	697b      	ldr	r3, [r7, #20]
    9fdc:	8a1b      	ldrh	r3, [r3, #16]
    9fde:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9fe2:	697b      	ldr	r3, [r7, #20]
    9fe4:	8a1b      	ldrh	r3, [r3, #16]
    9fe6:	4618      	mov	r0, r3
    9fe8:	4b50      	ldr	r3, [pc, #320]	; (a12c <_usb_d_dev_ep_enable+0x208>)
    9fea:	4798      	blx	r3
    9fec:	4603      	mov	r3, r0
    9fee:	071b      	lsls	r3, r3, #28
    9ff0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9ff4:	432b      	orrs	r3, r5
    9ff6:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9ff8:	7efb      	ldrb	r3, [r7, #27]
    9ffa:	2200      	movs	r2, #0
    9ffc:	2100      	movs	r1, #0
    9ffe:	4618      	mov	r0, r3
    a000:	4b4b      	ldr	r3, [pc, #300]	; (a130 <_usb_d_dev_ep_enable+0x20c>)
    a002:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a004:	7efb      	ldrb	r3, [r7, #27]
    a006:	2200      	movs	r2, #0
    a008:	2101      	movs	r1, #1
    a00a:	4618      	mov	r0, r3
    a00c:	4b49      	ldr	r3, [pc, #292]	; (a134 <_usb_d_dev_ep_enable+0x210>)
    a00e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a010:	7efb      	ldrb	r3, [r7, #27]
    a012:	2100      	movs	r1, #0
    a014:	4618      	mov	r0, r3
    a016:	4b48      	ldr	r3, [pc, #288]	; (a138 <_usb_d_dev_ep_enable+0x214>)
    a018:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a01a:	7efb      	ldrb	r3, [r7, #27]
    a01c:	2101      	movs	r1, #1
    a01e:	4618      	mov	r0, r3
    a020:	4b45      	ldr	r3, [pc, #276]	; (a138 <_usb_d_dev_ep_enable+0x214>)
    a022:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a024:	6978      	ldr	r0, [r7, #20]
    a026:	4b45      	ldr	r3, [pc, #276]	; (a13c <_usb_d_dev_ep_enable+0x218>)
    a028:	4798      	blx	r3
    a02a:	e06f      	b.n	a10c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a02c:	7ebb      	ldrb	r3, [r7, #26]
    a02e:	2b00      	cmp	r3, #0
    a030:	d038      	beq.n	a0a4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a032:	7cfb      	ldrb	r3, [r7, #19]
    a034:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a038:	2b00      	cmp	r3, #0
    a03a:	d002      	beq.n	a042 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a03c:	f06f 0313 	mvn.w	r3, #19
    a040:	e065      	b.n	a10e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a042:	697b      	ldr	r3, [r7, #20]
    a044:	7cdb      	ldrb	r3, [r3, #19]
    a046:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a04a:	b2db      	uxtb	r3, r3
    a04c:	011b      	lsls	r3, r3, #4
    a04e:	b2db      	uxtb	r3, r3
    a050:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a054:	b2da      	uxtb	r2, r3
    a056:	7cfb      	ldrb	r3, [r7, #19]
    a058:	4313      	orrs	r3, r2
    a05a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a05c:	7cfa      	ldrb	r2, [r7, #19]
    a05e:	7efb      	ldrb	r3, [r7, #27]
    a060:	4619      	mov	r1, r3
    a062:	69f8      	ldr	r0, [r7, #28]
    a064:	4b2f      	ldr	r3, [pc, #188]	; (a124 <_usb_d_dev_ep_enable+0x200>)
    a066:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a068:	68fb      	ldr	r3, [r7, #12]
    a06a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a06e:	697b      	ldr	r3, [r7, #20]
    a070:	8a1b      	ldrh	r3, [r3, #16]
    a072:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a076:	697b      	ldr	r3, [r7, #20]
    a078:	8a1b      	ldrh	r3, [r3, #16]
    a07a:	4618      	mov	r0, r3
    a07c:	4b2b      	ldr	r3, [pc, #172]	; (a12c <_usb_d_dev_ep_enable+0x208>)
    a07e:	4798      	blx	r3
    a080:	4603      	mov	r3, r0
    a082:	071b      	lsls	r3, r3, #28
    a084:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a088:	432b      	orrs	r3, r5
    a08a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a08c:	7efb      	ldrb	r3, [r7, #27]
    a08e:	2200      	movs	r2, #0
    a090:	2101      	movs	r1, #1
    a092:	4618      	mov	r0, r3
    a094:	4b27      	ldr	r3, [pc, #156]	; (a134 <_usb_d_dev_ep_enable+0x210>)
    a096:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a098:	7efb      	ldrb	r3, [r7, #27]
    a09a:	2101      	movs	r1, #1
    a09c:	4618      	mov	r0, r3
    a09e:	4b26      	ldr	r3, [pc, #152]	; (a138 <_usb_d_dev_ep_enable+0x214>)
    a0a0:	4798      	blx	r3
    a0a2:	e033      	b.n	a10c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a0a4:	7cfb      	ldrb	r3, [r7, #19]
    a0a6:	f003 0307 	and.w	r3, r3, #7
    a0aa:	2b00      	cmp	r3, #0
    a0ac:	d002      	beq.n	a0b4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a0ae:	f06f 0313 	mvn.w	r3, #19
    a0b2:	e02c      	b.n	a10e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a0b4:	697b      	ldr	r3, [r7, #20]
    a0b6:	7cdb      	ldrb	r3, [r3, #19]
    a0b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a0bc:	b2db      	uxtb	r3, r3
    a0be:	461a      	mov	r2, r3
    a0c0:	7cfb      	ldrb	r3, [r7, #19]
    a0c2:	4313      	orrs	r3, r2
    a0c4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a0c6:	7cfa      	ldrb	r2, [r7, #19]
    a0c8:	7efb      	ldrb	r3, [r7, #27]
    a0ca:	4619      	mov	r1, r3
    a0cc:	69f8      	ldr	r0, [r7, #28]
    a0ce:	4b15      	ldr	r3, [pc, #84]	; (a124 <_usb_d_dev_ep_enable+0x200>)
    a0d0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a0d2:	697b      	ldr	r3, [r7, #20]
    a0d4:	8a1b      	ldrh	r3, [r3, #16]
    a0d6:	039b      	lsls	r3, r3, #14
    a0d8:	4c13      	ldr	r4, [pc, #76]	; (a128 <_usb_d_dev_ep_enable+0x204>)
    a0da:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a0dc:	697b      	ldr	r3, [r7, #20]
    a0de:	8a1b      	ldrh	r3, [r3, #16]
    a0e0:	4618      	mov	r0, r3
    a0e2:	4b12      	ldr	r3, [pc, #72]	; (a12c <_usb_d_dev_ep_enable+0x208>)
    a0e4:	4798      	blx	r3
    a0e6:	4603      	mov	r3, r0
    a0e8:	071b      	lsls	r3, r3, #28
    a0ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a0ee:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a0f2:	68fb      	ldr	r3, [r7, #12]
    a0f4:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a0f6:	7efb      	ldrb	r3, [r7, #27]
    a0f8:	2200      	movs	r2, #0
    a0fa:	2100      	movs	r1, #0
    a0fc:	4618      	mov	r0, r3
    a0fe:	4b0c      	ldr	r3, [pc, #48]	; (a130 <_usb_d_dev_ep_enable+0x20c>)
    a100:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a102:	7efb      	ldrb	r3, [r7, #27]
    a104:	2100      	movs	r1, #0
    a106:	4618      	mov	r0, r3
    a108:	4b0b      	ldr	r3, [pc, #44]	; (a138 <_usb_d_dev_ep_enable+0x214>)
    a10a:	4798      	blx	r3
	}

	return USB_OK;
    a10c:	2300      	movs	r3, #0
}
    a10e:	4618      	mov	r0, r3
    a110:	3720      	adds	r7, #32
    a112:	46bd      	mov	sp, r7
    a114:	bdb0      	pop	{r4, r5, r7, pc}
    a116:	bf00      	nop
    a118:	00008d3d 	.word	0x00008d3d
    a11c:	000083c3 	.word	0x000083c3
    a120:	20000c9c 	.word	0x20000c9c
    a124:	00008399 	.word	0x00008399
    a128:	0fffc000 	.word	0x0fffc000
    a12c:	00008cd9 	.word	0x00008cd9
    a130:	00008c81 	.word	0x00008c81
    a134:	00008c29 	.word	0x00008c29
    a138:	00008bf1 	.word	0x00008bf1
    a13c:	00009c95 	.word	0x00009c95

0000a140 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a140:	b580      	push	{r7, lr}
    a142:	b084      	sub	sp, #16
    a144:	af00      	add	r7, sp, #0
    a146:	6078      	str	r0, [r7, #4]
    a148:	460b      	mov	r3, r1
    a14a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	7c9b      	ldrb	r3, [r3, #18]
    a150:	f003 030f 	and.w	r3, r3, #15
    a154:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a156:	78fa      	ldrb	r2, [r7, #3]
    a158:	7bfb      	ldrb	r3, [r7, #15]
    a15a:	4611      	mov	r1, r2
    a15c:	4618      	mov	r0, r3
    a15e:	4b03      	ldr	r3, [pc, #12]	; (a16c <_usb_d_dev_ep_stall_get+0x2c>)
    a160:	4798      	blx	r3
    a162:	4603      	mov	r3, r0
}
    a164:	4618      	mov	r0, r3
    a166:	3710      	adds	r7, #16
    a168:	46bd      	mov	sp, r7
    a16a:	bd80      	pop	{r7, pc}
    a16c:	00008831 	.word	0x00008831

0000a170 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a170:	b580      	push	{r7, lr}
    a172:	b084      	sub	sp, #16
    a174:	af00      	add	r7, sp, #0
    a176:	6078      	str	r0, [r7, #4]
    a178:	460b      	mov	r3, r1
    a17a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a17c:	687b      	ldr	r3, [r7, #4]
    a17e:	7c9b      	ldrb	r3, [r3, #18]
    a180:	f003 030f 	and.w	r3, r3, #15
    a184:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a186:	78f9      	ldrb	r1, [r7, #3]
    a188:	7bfb      	ldrb	r3, [r7, #15]
    a18a:	2201      	movs	r2, #1
    a18c:	4618      	mov	r0, r3
    a18e:	4b0a      	ldr	r3, [pc, #40]	; (a1b8 <_usb_d_dev_ep_stall_set+0x48>)
    a190:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a192:	78fb      	ldrb	r3, [r7, #3]
    a194:	2220      	movs	r2, #32
    a196:	409a      	lsls	r2, r3
    a198:	7bfb      	ldrb	r3, [r7, #15]
    a19a:	4611      	mov	r1, r2
    a19c:	4618      	mov	r0, r3
    a19e:	4b07      	ldr	r3, [pc, #28]	; (a1bc <_usb_d_dev_ep_stall_set+0x4c>)
    a1a0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a1a2:	687a      	ldr	r2, [r7, #4]
    a1a4:	7cd3      	ldrb	r3, [r2, #19]
    a1a6:	f043 0308 	orr.w	r3, r3, #8
    a1aa:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a1ac:	2300      	movs	r3, #0
}
    a1ae:	4618      	mov	r0, r3
    a1b0:	3710      	adds	r7, #16
    a1b2:	46bd      	mov	sp, r7
    a1b4:	bd80      	pop	{r7, pc}
    a1b6:	bf00      	nop
    a1b8:	000087d9 	.word	0x000087d9
    a1bc:	00008759 	.word	0x00008759

0000a1c0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a1c0:	b580      	push	{r7, lr}
    a1c2:	b084      	sub	sp, #16
    a1c4:	af00      	add	r7, sp, #0
    a1c6:	6078      	str	r0, [r7, #4]
    a1c8:	460b      	mov	r3, r1
    a1ca:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a1cc:	687b      	ldr	r3, [r7, #4]
    a1ce:	7c9b      	ldrb	r3, [r3, #18]
    a1d0:	f003 030f 	and.w	r3, r3, #15
    a1d4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a1d6:	78fa      	ldrb	r2, [r7, #3]
    a1d8:	7bfb      	ldrb	r3, [r7, #15]
    a1da:	4611      	mov	r1, r2
    a1dc:	4618      	mov	r0, r3
    a1de:	4b28      	ldr	r3, [pc, #160]	; (a280 <_usb_d_dev_ep_stall_clr+0xc0>)
    a1e0:	4798      	blx	r3
    a1e2:	4603      	mov	r3, r0
    a1e4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a1e6:	7bbb      	ldrb	r3, [r7, #14]
    a1e8:	f083 0301 	eor.w	r3, r3, #1
    a1ec:	b2db      	uxtb	r3, r3
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d001      	beq.n	a1f6 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a1f2:	2300      	movs	r3, #0
    a1f4:	e040      	b.n	a278 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a1f6:	78f9      	ldrb	r1, [r7, #3]
    a1f8:	7bfb      	ldrb	r3, [r7, #15]
    a1fa:	2200      	movs	r2, #0
    a1fc:	4618      	mov	r0, r3
    a1fe:	4b21      	ldr	r3, [pc, #132]	; (a284 <_usb_d_dev_ep_stall_clr+0xc4>)
    a200:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a202:	78fb      	ldrb	r3, [r7, #3]
    a204:	2220      	movs	r2, #32
    a206:	409a      	lsls	r2, r3
    a208:	7bfb      	ldrb	r3, [r7, #15]
    a20a:	4611      	mov	r1, r2
    a20c:	4618      	mov	r0, r3
    a20e:	4b1e      	ldr	r3, [pc, #120]	; (a288 <_usb_d_dev_ep_stall_clr+0xc8>)
    a210:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a212:	78fa      	ldrb	r2, [r7, #3]
    a214:	7bfb      	ldrb	r3, [r7, #15]
    a216:	4611      	mov	r1, r2
    a218:	4618      	mov	r0, r3
    a21a:	4b1c      	ldr	r3, [pc, #112]	; (a28c <_usb_d_dev_ep_stall_clr+0xcc>)
    a21c:	4798      	blx	r3
    a21e:	4603      	mov	r3, r0
    a220:	2b00      	cmp	r3, #0
    a222:	d00b      	beq.n	a23c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a224:	78fa      	ldrb	r2, [r7, #3]
    a226:	7bfb      	ldrb	r3, [r7, #15]
    a228:	4611      	mov	r1, r2
    a22a:	4618      	mov	r0, r3
    a22c:	4b18      	ldr	r3, [pc, #96]	; (a290 <_usb_d_dev_ep_stall_clr+0xd0>)
    a22e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a230:	78f9      	ldrb	r1, [r7, #3]
    a232:	7bfb      	ldrb	r3, [r7, #15]
    a234:	2200      	movs	r2, #0
    a236:	4618      	mov	r0, r3
    a238:	4b16      	ldr	r3, [pc, #88]	; (a294 <_usb_d_dev_ep_stall_clr+0xd4>)
    a23a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a23c:	687b      	ldr	r3, [r7, #4]
    a23e:	7cdb      	ldrb	r3, [r3, #19]
    a240:	f003 0307 	and.w	r3, r3, #7
    a244:	b2db      	uxtb	r3, r3
    a246:	2b01      	cmp	r3, #1
    a248:	d110      	bne.n	a26c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a24a:	7bfb      	ldrb	r3, [r7, #15]
    a24c:	4619      	mov	r1, r3
    a24e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a252:	4b11      	ldr	r3, [pc, #68]	; (a298 <_usb_d_dev_ep_stall_clr+0xd8>)
    a254:	4798      	blx	r3
    a256:	4603      	mov	r3, r0
    a258:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a25c:	2b00      	cmp	r3, #0
    a25e:	d10a      	bne.n	a276 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a260:	687a      	ldr	r2, [r7, #4]
    a262:	7cd3      	ldrb	r3, [r2, #19]
    a264:	f36f 03c3 	bfc	r3, #3, #1
    a268:	74d3      	strb	r3, [r2, #19]
    a26a:	e004      	b.n	a276 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a26c:	687a      	ldr	r2, [r7, #4]
    a26e:	7cd3      	ldrb	r3, [r2, #19]
    a270:	f36f 03c3 	bfc	r3, #3, #1
    a274:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a276:	2300      	movs	r3, #0
}
    a278:	4618      	mov	r0, r3
    a27a:	3710      	adds	r7, #16
    a27c:	46bd      	mov	sp, r7
    a27e:	bd80      	pop	{r7, pc}
    a280:	00008831 	.word	0x00008831
    a284:	000087d9 	.word	0x000087d9
    a288:	00008781 	.word	0x00008781
    a28c:	00008875 	.word	0x00008875
    a290:	000088b9 	.word	0x000088b9
    a294:	000089a5 	.word	0x000089a5
    a298:	00008261 	.word	0x00008261

0000a29c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a29c:	b580      	push	{r7, lr}
    a29e:	b086      	sub	sp, #24
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	4603      	mov	r3, r0
    a2a4:	460a      	mov	r2, r1
    a2a6:	71fb      	strb	r3, [r7, #7]
    a2a8:	4613      	mov	r3, r2
    a2aa:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a2ac:	79fb      	ldrb	r3, [r7, #7]
    a2ae:	f003 030f 	and.w	r3, r3, #15
    a2b2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a2b4:	79fb      	ldrb	r3, [r7, #7]
    a2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	bf14      	ite	ne
    a2be:	2301      	movne	r3, #1
    a2c0:	2300      	moveq	r3, #0
    a2c2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a2c4:	7cba      	ldrb	r2, [r7, #18]
    a2c6:	7cfb      	ldrb	r3, [r7, #19]
    a2c8:	4611      	mov	r1, r2
    a2ca:	4618      	mov	r0, r3
    a2cc:	4b13      	ldr	r3, [pc, #76]	; (a31c <_usb_d_dev_ep_stall+0x80>)
    a2ce:	4798      	blx	r3
    a2d0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a2d2:	7cfb      	ldrb	r3, [r7, #19]
    a2d4:	2b04      	cmp	r3, #4
    a2d6:	d902      	bls.n	a2de <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a2d8:	f06f 0311 	mvn.w	r3, #17
    a2dc:	e01a      	b.n	a314 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a2de:	79bb      	ldrb	r3, [r7, #6]
    a2e0:	2b01      	cmp	r3, #1
    a2e2:	d106      	bne.n	a2f2 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a2e4:	7cbb      	ldrb	r3, [r7, #18]
    a2e6:	4619      	mov	r1, r3
    a2e8:	68f8      	ldr	r0, [r7, #12]
    a2ea:	4b0d      	ldr	r3, [pc, #52]	; (a320 <_usb_d_dev_ep_stall+0x84>)
    a2ec:	4798      	blx	r3
    a2ee:	6178      	str	r0, [r7, #20]
    a2f0:	e00f      	b.n	a312 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a2f2:	79bb      	ldrb	r3, [r7, #6]
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d106      	bne.n	a306 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a2f8:	7cbb      	ldrb	r3, [r7, #18]
    a2fa:	4619      	mov	r1, r3
    a2fc:	68f8      	ldr	r0, [r7, #12]
    a2fe:	4b09      	ldr	r3, [pc, #36]	; (a324 <_usb_d_dev_ep_stall+0x88>)
    a300:	4798      	blx	r3
    a302:	6178      	str	r0, [r7, #20]
    a304:	e005      	b.n	a312 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a306:	7cbb      	ldrb	r3, [r7, #18]
    a308:	4619      	mov	r1, r3
    a30a:	68f8      	ldr	r0, [r7, #12]
    a30c:	4b06      	ldr	r3, [pc, #24]	; (a328 <_usb_d_dev_ep_stall+0x8c>)
    a30e:	4798      	blx	r3
    a310:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a312:	697b      	ldr	r3, [r7, #20]
}
    a314:	4618      	mov	r0, r3
    a316:	3718      	adds	r7, #24
    a318:	46bd      	mov	sp, r7
    a31a:	bd80      	pop	{r7, pc}
    a31c:	00008d3d 	.word	0x00008d3d
    a320:	0000a171 	.word	0x0000a171
    a324:	0000a1c1 	.word	0x0000a1c1
    a328:	0000a141 	.word	0x0000a141

0000a32c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b082      	sub	sp, #8
    a330:	af00      	add	r7, sp, #0
    a332:	6078      	str	r0, [r7, #4]
    a334:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a336:	687b      	ldr	r3, [r7, #4]
    a338:	7c9b      	ldrb	r3, [r3, #18]
    a33a:	2bff      	cmp	r3, #255	; 0xff
    a33c:	d014      	beq.n	a368 <_usb_d_dev_trans_done+0x3c>
    a33e:	687b      	ldr	r3, [r7, #4]
    a340:	7cdb      	ldrb	r3, [r3, #19]
    a342:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a346:	b2db      	uxtb	r3, r3
    a348:	2b00      	cmp	r3, #0
    a34a:	d00d      	beq.n	a368 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a34c:	687a      	ldr	r2, [r7, #4]
    a34e:	7cd3      	ldrb	r3, [r2, #19]
    a350:	f36f 1386 	bfc	r3, #6, #1
    a354:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a356:	4b06      	ldr	r3, [pc, #24]	; (a370 <_usb_d_dev_trans_done+0x44>)
    a358:	691b      	ldr	r3, [r3, #16]
    a35a:	687a      	ldr	r2, [r7, #4]
    a35c:	7c90      	ldrb	r0, [r2, #18]
    a35e:	687a      	ldr	r2, [r7, #4]
    a360:	6892      	ldr	r2, [r2, #8]
    a362:	6839      	ldr	r1, [r7, #0]
    a364:	4798      	blx	r3
    a366:	e000      	b.n	a36a <_usb_d_dev_trans_done+0x3e>
		return;
    a368:	bf00      	nop
}
    a36a:	3708      	adds	r7, #8
    a36c:	46bd      	mov	sp, r7
    a36e:	bd80      	pop	{r7, pc}
    a370:	20000bd4 	.word	0x20000bd4

0000a374 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a374:	b580      	push	{r7, lr}
    a376:	b086      	sub	sp, #24
    a378:	af00      	add	r7, sp, #0
    a37a:	60f8      	str	r0, [r7, #12]
    a37c:	460b      	mov	r3, r1
    a37e:	607a      	str	r2, [r7, #4]
    a380:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a382:	68fb      	ldr	r3, [r7, #12]
    a384:	7c9b      	ldrb	r3, [r3, #18]
    a386:	f003 030f 	and.w	r3, r3, #15
    a38a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a38c:	4b1f      	ldr	r3, [pc, #124]	; (a40c <_usb_d_dev_trans_stop+0x98>)
    a38e:	881b      	ldrh	r3, [r3, #0]
    a390:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a392:	68fb      	ldr	r3, [r7, #12]
    a394:	7c9b      	ldrb	r3, [r3, #18]
    a396:	2bff      	cmp	r3, #255	; 0xff
    a398:	d033      	beq.n	a402 <_usb_d_dev_trans_stop+0x8e>
    a39a:	68fb      	ldr	r3, [r7, #12]
    a39c:	7cdb      	ldrb	r3, [r3, #19]
    a39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a3a2:	b2db      	uxtb	r3, r3
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	d02c      	beq.n	a402 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a3a8:	7afb      	ldrb	r3, [r7, #11]
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d006      	beq.n	a3bc <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a3ae:	7dfb      	ldrb	r3, [r7, #23]
    a3b0:	2200      	movs	r2, #0
    a3b2:	2101      	movs	r1, #1
    a3b4:	4618      	mov	r0, r3
    a3b6:	4b16      	ldr	r3, [pc, #88]	; (a410 <_usb_d_dev_trans_stop+0x9c>)
    a3b8:	4798      	blx	r3
    a3ba:	e005      	b.n	a3c8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a3bc:	7dfb      	ldrb	r3, [r7, #23]
    a3be:	2200      	movs	r2, #0
    a3c0:	2100      	movs	r1, #0
    a3c2:	4618      	mov	r0, r3
    a3c4:	4b13      	ldr	r3, [pc, #76]	; (a414 <_usb_d_dev_trans_stop+0xa0>)
    a3c6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a3c8:	7afb      	ldrb	r3, [r7, #11]
    a3ca:	f107 0218 	add.w	r2, r7, #24
    a3ce:	4413      	add	r3, r2
    a3d0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a3d4:	461a      	mov	r2, r3
    a3d6:	7dfb      	ldrb	r3, [r7, #23]
    a3d8:	4611      	mov	r1, r2
    a3da:	4618      	mov	r0, r3
    a3dc:	4b0e      	ldr	r3, [pc, #56]	; (a418 <_usb_d_dev_trans_stop+0xa4>)
    a3de:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a3e0:	7afb      	ldrb	r3, [r7, #11]
    a3e2:	f107 0218 	add.w	r2, r7, #24
    a3e6:	4413      	add	r3, r2
    a3e8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a3ec:	461a      	mov	r2, r3
    a3ee:	7dfb      	ldrb	r3, [r7, #23]
    a3f0:	4611      	mov	r1, r2
    a3f2:	4618      	mov	r0, r3
    a3f4:	4b09      	ldr	r3, [pc, #36]	; (a41c <_usb_d_dev_trans_stop+0xa8>)
    a3f6:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a3f8:	6879      	ldr	r1, [r7, #4]
    a3fa:	68f8      	ldr	r0, [r7, #12]
    a3fc:	4b08      	ldr	r3, [pc, #32]	; (a420 <_usb_d_dev_trans_stop+0xac>)
    a3fe:	4798      	blx	r3
    a400:	e000      	b.n	a404 <_usb_d_dev_trans_stop+0x90>
		return;
    a402:	bf00      	nop
}
    a404:	3718      	adds	r7, #24
    a406:	46bd      	mov	sp, r7
    a408:	bd80      	pop	{r7, pc}
    a40a:	bf00      	nop
    a40c:	0000efc4 	.word	0x0000efc4
    a410:	00008c29 	.word	0x00008c29
    a414:	00008c81 	.word	0x00008c81
    a418:	00008731 	.word	0x00008731
    a41c:	00008781 	.word	0x00008781
    a420:	0000a32d 	.word	0x0000a32d

0000a424 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a424:	b580      	push	{r7, lr}
    a426:	b086      	sub	sp, #24
    a428:	af00      	add	r7, sp, #0
    a42a:	4603      	mov	r3, r0
    a42c:	6039      	str	r1, [r7, #0]
    a42e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a430:	79fb      	ldrb	r3, [r7, #7]
    a432:	f003 030f 	and.w	r3, r3, #15
    a436:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a438:	7dfb      	ldrb	r3, [r7, #23]
    a43a:	015b      	lsls	r3, r3, #5
    a43c:	4a1e      	ldr	r2, [pc, #120]	; (a4b8 <_usb_d_dev_ep_read_req+0x94>)
    a43e:	4413      	add	r3, r2
    a440:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a442:	693b      	ldr	r3, [r7, #16]
    a444:	681b      	ldr	r3, [r3, #0]
    a446:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a448:	693b      	ldr	r3, [r7, #16]
    a44a:	685b      	ldr	r3, [r3, #4]
    a44c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a450:	b29b      	uxth	r3, r3
    a452:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a454:	7dfb      	ldrb	r3, [r7, #23]
    a456:	2b04      	cmp	r3, #4
    a458:	d802      	bhi.n	a460 <_usb_d_dev_ep_read_req+0x3c>
    a45a:	683b      	ldr	r3, [r7, #0]
    a45c:	2b00      	cmp	r3, #0
    a45e:	d102      	bne.n	a466 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a460:	f06f 0311 	mvn.w	r3, #17
    a464:	e023      	b.n	a4ae <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a466:	7dfb      	ldrb	r3, [r7, #23]
    a468:	4618      	mov	r0, r3
    a46a:	4b14      	ldr	r3, [pc, #80]	; (a4bc <_usb_d_dev_ep_read_req+0x98>)
    a46c:	4798      	blx	r3
    a46e:	4603      	mov	r3, r0
    a470:	f083 0301 	eor.w	r3, r3, #1
    a474:	b2db      	uxtb	r3, r3
    a476:	2b00      	cmp	r3, #0
    a478:	d002      	beq.n	a480 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a47a:	f06f 0312 	mvn.w	r3, #18
    a47e:	e016      	b.n	a4ae <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a480:	7dfb      	ldrb	r3, [r7, #23]
    a482:	4618      	mov	r0, r3
    a484:	4b0e      	ldr	r3, [pc, #56]	; (a4c0 <_usb_d_dev_ep_read_req+0x9c>)
    a486:	4798      	blx	r3
    a488:	4603      	mov	r3, r0
    a48a:	f083 0301 	eor.w	r3, r3, #1
    a48e:	b2db      	uxtb	r3, r3
    a490:	2b00      	cmp	r3, #0
    a492:	d001      	beq.n	a498 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a494:	2300      	movs	r3, #0
    a496:	e00a      	b.n	a4ae <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a498:	68fb      	ldr	r3, [r7, #12]
    a49a:	2208      	movs	r2, #8
    a49c:	4619      	mov	r1, r3
    a49e:	6838      	ldr	r0, [r7, #0]
    a4a0:	4b08      	ldr	r3, [pc, #32]	; (a4c4 <_usb_d_dev_ep_read_req+0xa0>)
    a4a2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a4a4:	7dfb      	ldrb	r3, [r7, #23]
    a4a6:	4618      	mov	r0, r3
    a4a8:	4b07      	ldr	r3, [pc, #28]	; (a4c8 <_usb_d_dev_ep_read_req+0xa4>)
    a4aa:	4798      	blx	r3

	return bytes;
    a4ac:	897b      	ldrh	r3, [r7, #10]
}
    a4ae:	4618      	mov	r0, r3
    a4b0:	3718      	adds	r7, #24
    a4b2:	46bd      	mov	sp, r7
    a4b4:	bd80      	pop	{r7, pc}
    a4b6:	bf00      	nop
    a4b8:	20000c9c 	.word	0x20000c9c
    a4bc:	000087a9 	.word	0x000087a9
    a4c0:	00008955 	.word	0x00008955
    a4c4:	0000e81d 	.word	0x0000e81d
    a4c8:	00008985 	.word	0x00008985

0000a4cc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a4cc:	b580      	push	{r7, lr}
    a4ce:	b086      	sub	sp, #24
    a4d0:	af00      	add	r7, sp, #0
    a4d2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	7a1b      	ldrb	r3, [r3, #8]
    a4d8:	f003 030f 	and.w	r3, r3, #15
    a4dc:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a4de:	687b      	ldr	r3, [r7, #4]
    a4e0:	7a1b      	ldrb	r3, [r3, #8]
    a4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	bf14      	ite	ne
    a4ea:	2301      	movne	r3, #1
    a4ec:	2300      	moveq	r3, #0
    a4ee:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a4f0:	7d7a      	ldrb	r2, [r7, #21]
    a4f2:	7dbb      	ldrb	r3, [r7, #22]
    a4f4:	4611      	mov	r1, r2
    a4f6:	4618      	mov	r0, r3
    a4f8:	4b5f      	ldr	r3, [pc, #380]	; (a678 <_usb_d_dev_ep_trans+0x1ac>)
    a4fa:	4798      	blx	r3
    a4fc:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a4fe:	693b      	ldr	r3, [r7, #16]
    a500:	8a1b      	ldrh	r3, [r3, #16]
    a502:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a506:	4293      	cmp	r3, r2
    a508:	d004      	beq.n	a514 <_usb_d_dev_ep_trans+0x48>
    a50a:	693b      	ldr	r3, [r7, #16]
    a50c:	8a1b      	ldrh	r3, [r3, #16]
    a50e:	3b01      	subs	r3, #1
    a510:	b29b      	uxth	r3, r3
    a512:	e001      	b.n	a518 <_usb_d_dev_ep_trans+0x4c>
    a514:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a518:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a51a:	687b      	ldr	r3, [r7, #4]
    a51c:	685a      	ldr	r2, [r3, #4]
    a51e:	89fb      	ldrh	r3, [r7, #14]
    a520:	4013      	ands	r3, r2
    a522:	2b00      	cmp	r3, #0
    a524:	bf14      	ite	ne
    a526:	2301      	movne	r3, #1
    a528:	2300      	moveq	r3, #0
    a52a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a52c:	2300      	movs	r3, #0
    a52e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a530:	7dbb      	ldrb	r3, [r7, #22]
    a532:	2b04      	cmp	r3, #4
    a534:	d902      	bls.n	a53c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a536:	f06f 0311 	mvn.w	r3, #17
    a53a:	e098      	b.n	a66e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	681b      	ldr	r3, [r3, #0]
    a540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a544:	d31a      	bcc.n	a57c <_usb_d_dev_ep_trans+0xb0>
    a546:	687b      	ldr	r3, [r7, #4]
    a548:	681b      	ldr	r3, [r3, #0]
    a54a:	461a      	mov	r2, r3
    a54c:	687b      	ldr	r3, [r7, #4]
    a54e:	685b      	ldr	r3, [r3, #4]
    a550:	4413      	add	r3, r2
    a552:	4a4a      	ldr	r2, [pc, #296]	; (a67c <_usb_d_dev_ep_trans+0x1b0>)
    a554:	4293      	cmp	r3, r2
    a556:	d811      	bhi.n	a57c <_usb_d_dev_ep_trans+0xb0>
    a558:	687b      	ldr	r3, [r7, #4]
    a55a:	681b      	ldr	r3, [r3, #0]
    a55c:	f003 0303 	and.w	r3, r3, #3
    a560:	2b00      	cmp	r3, #0
    a562:	d10b      	bne.n	a57c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a564:	7d7b      	ldrb	r3, [r7, #21]
    a566:	f083 0301 	eor.w	r3, r3, #1
    a56a:	b2db      	uxtb	r3, r3
    a56c:	2b00      	cmp	r3, #0
    a56e:	d00e      	beq.n	a58e <_usb_d_dev_ep_trans+0xc2>
    a570:	687b      	ldr	r3, [r7, #4]
    a572:	685b      	ldr	r3, [r3, #4]
    a574:	693a      	ldr	r2, [r7, #16]
    a576:	8a12      	ldrh	r2, [r2, #16]
    a578:	4293      	cmp	r3, r2
    a57a:	d208      	bcs.n	a58e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a57c:	693b      	ldr	r3, [r7, #16]
    a57e:	68db      	ldr	r3, [r3, #12]
    a580:	2b00      	cmp	r3, #0
    a582:	d102      	bne.n	a58a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a584:	f06f 0312 	mvn.w	r3, #18
    a588:	e071      	b.n	a66e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a58a:	2301      	movs	r3, #1
    a58c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a58e:	7d7b      	ldrb	r3, [r7, #21]
    a590:	f083 0301 	eor.w	r3, r3, #1
    a594:	b2db      	uxtb	r3, r3
    a596:	2b00      	cmp	r3, #0
    a598:	d009      	beq.n	a5ae <_usb_d_dev_ep_trans+0xe2>
    a59a:	7b7b      	ldrb	r3, [r7, #13]
    a59c:	2b00      	cmp	r3, #0
    a59e:	d006      	beq.n	a5ae <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a5a0:	693b      	ldr	r3, [r7, #16]
    a5a2:	68db      	ldr	r3, [r3, #12]
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d102      	bne.n	a5ae <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a5a8:	f06f 0311 	mvn.w	r3, #17
    a5ac:	e05f      	b.n	a66e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a5ae:	693b      	ldr	r3, [r7, #16]
    a5b0:	7cdb      	ldrb	r3, [r3, #19]
    a5b2:	f003 0308 	and.w	r3, r3, #8
    a5b6:	b2db      	uxtb	r3, r3
    a5b8:	2b00      	cmp	r3, #0
    a5ba:	d001      	beq.n	a5c0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a5bc:	2302      	movs	r3, #2
    a5be:	e056      	b.n	a66e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a5c0:	f107 0308 	add.w	r3, r7, #8
    a5c4:	4618      	mov	r0, r3
    a5c6:	4b2e      	ldr	r3, [pc, #184]	; (a680 <_usb_d_dev_ep_trans+0x1b4>)
    a5c8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a5ca:	693b      	ldr	r3, [r7, #16]
    a5cc:	7cdb      	ldrb	r3, [r3, #19]
    a5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a5d2:	b2db      	uxtb	r3, r3
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d006      	beq.n	a5e6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a5d8:	f107 0308 	add.w	r3, r7, #8
    a5dc:	4618      	mov	r0, r3
    a5de:	4b29      	ldr	r3, [pc, #164]	; (a684 <_usb_d_dev_ep_trans+0x1b8>)
    a5e0:	4798      	blx	r3
		return USB_BUSY;
    a5e2:	2301      	movs	r3, #1
    a5e4:	e043      	b.n	a66e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a5e6:	693a      	ldr	r2, [r7, #16]
    a5e8:	7cd3      	ldrb	r3, [r2, #19]
    a5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a5ee:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a5f0:	f107 0308 	add.w	r3, r7, #8
    a5f4:	4618      	mov	r0, r3
    a5f6:	4b23      	ldr	r3, [pc, #140]	; (a684 <_usb_d_dev_ep_trans+0x1b8>)
    a5f8:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a5fa:	687b      	ldr	r3, [r7, #4]
    a5fc:	681a      	ldr	r2, [r3, #0]
    a5fe:	693b      	ldr	r3, [r7, #16]
    a600:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a602:	687b      	ldr	r3, [r7, #4]
    a604:	685a      	ldr	r2, [r3, #4]
    a606:	693b      	ldr	r3, [r7, #16]
    a608:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a60a:	693b      	ldr	r3, [r7, #16]
    a60c:	2200      	movs	r2, #0
    a60e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a610:	693a      	ldr	r2, [r7, #16]
    a612:	7cd3      	ldrb	r3, [r2, #19]
    a614:	7d79      	ldrb	r1, [r7, #21]
    a616:	f361 13c7 	bfi	r3, r1, #7, #1
    a61a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a61c:	693a      	ldr	r2, [r7, #16]
    a61e:	7cd3      	ldrb	r3, [r2, #19]
    a620:	7df9      	ldrb	r1, [r7, #23]
    a622:	f361 1345 	bfi	r3, r1, #5, #1
    a626:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	7a5b      	ldrb	r3, [r3, #9]
    a62c:	2b00      	cmp	r3, #0
    a62e:	d007      	beq.n	a640 <_usb_d_dev_ep_trans+0x174>
    a630:	7b7b      	ldrb	r3, [r7, #13]
    a632:	f083 0301 	eor.w	r3, r3, #1
    a636:	b2db      	uxtb	r3, r3
    a638:	2b00      	cmp	r3, #0
    a63a:	d001      	beq.n	a640 <_usb_d_dev_ep_trans+0x174>
    a63c:	2301      	movs	r3, #1
    a63e:	e000      	b.n	a642 <_usb_d_dev_ep_trans+0x176>
    a640:	2300      	movs	r3, #0
    a642:	b2db      	uxtb	r3, r3
    a644:	f003 0301 	and.w	r3, r3, #1
    a648:	b2d9      	uxtb	r1, r3
    a64a:	693a      	ldr	r2, [r7, #16]
    a64c:	7cd3      	ldrb	r3, [r2, #19]
    a64e:	f361 1304 	bfi	r3, r1, #4, #1
    a652:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a654:	7d7b      	ldrb	r3, [r7, #21]
    a656:	2b00      	cmp	r3, #0
    a658:	d004      	beq.n	a664 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a65a:	2100      	movs	r1, #0
    a65c:	6938      	ldr	r0, [r7, #16]
    a65e:	4b0a      	ldr	r3, [pc, #40]	; (a688 <_usb_d_dev_ep_trans+0x1bc>)
    a660:	4798      	blx	r3
    a662:	e003      	b.n	a66c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a664:	2100      	movs	r1, #0
    a666:	6938      	ldr	r0, [r7, #16]
    a668:	4b08      	ldr	r3, [pc, #32]	; (a68c <_usb_d_dev_ep_trans+0x1c0>)
    a66a:	4798      	blx	r3
	}

	return ERR_NONE;
    a66c:	2300      	movs	r3, #0
}
    a66e:	4618      	mov	r0, r3
    a670:	3718      	adds	r7, #24
    a672:	46bd      	mov	sp, r7
    a674:	bd80      	pop	{r7, pc}
    a676:	bf00      	nop
    a678:	00008d3d 	.word	0x00008d3d
    a67c:	20041fff 	.word	0x20041fff
    a680:	0000ae99 	.word	0x0000ae99
    a684:	0000aebf 	.word	0x0000aebf
    a688:	00009005 	.word	0x00009005
    a68c:	0000921d 	.word	0x0000921d

0000a690 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a690:	b580      	push	{r7, lr}
    a692:	b084      	sub	sp, #16
    a694:	af00      	add	r7, sp, #0
    a696:	4603      	mov	r3, r0
    a698:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a69a:	79fb      	ldrb	r3, [r7, #7]
    a69c:	f003 030f 	and.w	r3, r3, #15
    a6a0:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a6a2:	79fb      	ldrb	r3, [r7, #7]
    a6a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	bf14      	ite	ne
    a6ac:	2301      	movne	r3, #1
    a6ae:	2300      	moveq	r3, #0
    a6b0:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a6b2:	7bba      	ldrb	r2, [r7, #14]
    a6b4:	7bfb      	ldrb	r3, [r7, #15]
    a6b6:	4611      	mov	r1, r2
    a6b8:	4618      	mov	r0, r3
    a6ba:	4b08      	ldr	r3, [pc, #32]	; (a6dc <_usb_d_dev_ep_abort+0x4c>)
    a6bc:	4798      	blx	r3
    a6be:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a6c0:	7bfb      	ldrb	r3, [r7, #15]
    a6c2:	2b04      	cmp	r3, #4
    a6c4:	d806      	bhi.n	a6d4 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a6c6:	7bbb      	ldrb	r3, [r7, #14]
    a6c8:	2202      	movs	r2, #2
    a6ca:	4619      	mov	r1, r3
    a6cc:	68b8      	ldr	r0, [r7, #8]
    a6ce:	4b04      	ldr	r3, [pc, #16]	; (a6e0 <_usb_d_dev_ep_abort+0x50>)
    a6d0:	4798      	blx	r3
    a6d2:	e000      	b.n	a6d6 <_usb_d_dev_ep_abort+0x46>
		return;
    a6d4:	bf00      	nop
}
    a6d6:	3710      	adds	r7, #16
    a6d8:	46bd      	mov	sp, r7
    a6da:	bd80      	pop	{r7, pc}
    a6dc:	00008d3d 	.word	0x00008d3d
    a6e0:	0000a375 	.word	0x0000a375

0000a6e4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a6e4:	b480      	push	{r7}
    a6e6:	b085      	sub	sp, #20
    a6e8:	af00      	add	r7, sp, #0
    a6ea:	4603      	mov	r3, r0
    a6ec:	6039      	str	r1, [r7, #0]
    a6ee:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a6f0:	683b      	ldr	r3, [r7, #0]
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d001      	beq.n	a6fa <_usb_d_dev_register_callback+0x16>
    a6f6:	683b      	ldr	r3, [r7, #0]
    a6f8:	e000      	b.n	a6fc <_usb_d_dev_register_callback+0x18>
    a6fa:	4b0a      	ldr	r3, [pc, #40]	; (a724 <_usb_d_dev_register_callback+0x40>)
    a6fc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a6fe:	79fb      	ldrb	r3, [r7, #7]
    a700:	2b01      	cmp	r3, #1
    a702:	d103      	bne.n	a70c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a704:	4a08      	ldr	r2, [pc, #32]	; (a728 <_usb_d_dev_register_callback+0x44>)
    a706:	68fb      	ldr	r3, [r7, #12]
    a708:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a70a:	e005      	b.n	a718 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a70c:	79fb      	ldrb	r3, [r7, #7]
    a70e:	2b00      	cmp	r3, #0
    a710:	d102      	bne.n	a718 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a712:	4a05      	ldr	r2, [pc, #20]	; (a728 <_usb_d_dev_register_callback+0x44>)
    a714:	68fb      	ldr	r3, [r7, #12]
    a716:	6013      	str	r3, [r2, #0]
}
    a718:	bf00      	nop
    a71a:	3714      	adds	r7, #20
    a71c:	46bd      	mov	sp, r7
    a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a722:	4770      	bx	lr
    a724:	000085c5 	.word	0x000085c5
    a728:	20000bd4 	.word	0x20000bd4

0000a72c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a72c:	b480      	push	{r7}
    a72e:	b085      	sub	sp, #20
    a730:	af00      	add	r7, sp, #0
    a732:	4603      	mov	r3, r0
    a734:	6039      	str	r1, [r7, #0]
    a736:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a738:	683b      	ldr	r3, [r7, #0]
    a73a:	2b00      	cmp	r3, #0
    a73c:	d001      	beq.n	a742 <_usb_d_dev_register_ep_callback+0x16>
    a73e:	683b      	ldr	r3, [r7, #0]
    a740:	e000      	b.n	a744 <_usb_d_dev_register_ep_callback+0x18>
    a742:	4b0e      	ldr	r3, [pc, #56]	; (a77c <_usb_d_dev_register_ep_callback+0x50>)
    a744:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a746:	79fb      	ldrb	r3, [r7, #7]
    a748:	2b00      	cmp	r3, #0
    a74a:	d103      	bne.n	a754 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a74c:	4a0c      	ldr	r2, [pc, #48]	; (a780 <_usb_d_dev_register_ep_callback+0x54>)
    a74e:	68fb      	ldr	r3, [r7, #12]
    a750:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a752:	e00c      	b.n	a76e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a754:	79fb      	ldrb	r3, [r7, #7]
    a756:	2b01      	cmp	r3, #1
    a758:	d103      	bne.n	a762 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a75a:	4a09      	ldr	r2, [pc, #36]	; (a780 <_usb_d_dev_register_ep_callback+0x54>)
    a75c:	68fb      	ldr	r3, [r7, #12]
    a75e:	60d3      	str	r3, [r2, #12]
}
    a760:	e005      	b.n	a76e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a762:	79fb      	ldrb	r3, [r7, #7]
    a764:	2b02      	cmp	r3, #2
    a766:	d102      	bne.n	a76e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a768:	4a05      	ldr	r2, [pc, #20]	; (a780 <_usb_d_dev_register_ep_callback+0x54>)
    a76a:	68fb      	ldr	r3, [r7, #12]
    a76c:	6113      	str	r3, [r2, #16]
}
    a76e:	bf00      	nop
    a770:	3714      	adds	r7, #20
    a772:	46bd      	mov	sp, r7
    a774:	f85d 7b04 	ldr.w	r7, [sp], #4
    a778:	4770      	bx	lr
    a77a:	bf00      	nop
    a77c:	000085c5 	.word	0x000085c5
    a780:	20000bd4 	.word	0x20000bd4

0000a784 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a784:	b580      	push	{r7, lr}
    a786:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a788:	4b01      	ldr	r3, [pc, #4]	; (a790 <USB_0_Handler+0xc>)
    a78a:	4798      	blx	r3
}
    a78c:	bf00      	nop
    a78e:	bd80      	pop	{r7, pc}
    a790:	000099f5 	.word	0x000099f5

0000a794 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a794:	b580      	push	{r7, lr}
    a796:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a798:	4b01      	ldr	r3, [pc, #4]	; (a7a0 <USB_1_Handler+0xc>)
    a79a:	4798      	blx	r3
}
    a79c:	bf00      	nop
    a79e:	bd80      	pop	{r7, pc}
    a7a0:	000099f5 	.word	0x000099f5

0000a7a4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a7a4:	b580      	push	{r7, lr}
    a7a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a7a8:	4b01      	ldr	r3, [pc, #4]	; (a7b0 <USB_2_Handler+0xc>)
    a7aa:	4798      	blx	r3
}
    a7ac:	bf00      	nop
    a7ae:	bd80      	pop	{r7, pc}
    a7b0:	000099f5 	.word	0x000099f5

0000a7b4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a7b8:	4b01      	ldr	r3, [pc, #4]	; (a7c0 <USB_3_Handler+0xc>)
    a7ba:	4798      	blx	r3
}
    a7bc:	bf00      	nop
    a7be:	bd80      	pop	{r7, pc}
    a7c0:	000099f5 	.word	0x000099f5

0000a7c4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a7c4:	b480      	push	{r7}
    a7c6:	b083      	sub	sp, #12
    a7c8:	af00      	add	r7, sp, #0
    a7ca:	6078      	str	r0, [r7, #4]
    a7cc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a7ce:	bf00      	nop
    a7d0:	687b      	ldr	r3, [r7, #4]
    a7d2:	689a      	ldr	r2, [r3, #8]
    a7d4:	683b      	ldr	r3, [r7, #0]
    a7d6:	4013      	ands	r3, r2
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d1f9      	bne.n	a7d0 <hri_wdt_wait_for_sync+0xc>
	};
}
    a7dc:	bf00      	nop
    a7de:	370c      	adds	r7, #12
    a7e0:	46bd      	mov	sp, r7
    a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7e6:	4770      	bx	lr

0000a7e8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a7e8:	b580      	push	{r7, lr}
    a7ea:	b084      	sub	sp, #16
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a7f0:	210e      	movs	r1, #14
    a7f2:	6878      	ldr	r0, [r7, #4]
    a7f4:	4b0a      	ldr	r3, [pc, #40]	; (a820 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a7f6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a7f8:	687b      	ldr	r3, [r7, #4]
    a7fa:	781b      	ldrb	r3, [r3, #0]
    a7fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a7fe:	7bfb      	ldrb	r3, [r7, #15]
    a800:	085b      	lsrs	r3, r3, #1
    a802:	b2db      	uxtb	r3, r3
    a804:	f003 0301 	and.w	r3, r3, #1
    a808:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a80a:	7bfb      	ldrb	r3, [r7, #15]
    a80c:	2b00      	cmp	r3, #0
    a80e:	bf14      	ite	ne
    a810:	2301      	movne	r3, #1
    a812:	2300      	moveq	r3, #0
    a814:	b2db      	uxtb	r3, r3
}
    a816:	4618      	mov	r0, r3
    a818:	3710      	adds	r7, #16
    a81a:	46bd      	mov	sp, r7
    a81c:	bd80      	pop	{r7, pc}
    a81e:	bf00      	nop
    a820:	0000a7c5 	.word	0x0000a7c5

0000a824 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a824:	b580      	push	{r7, lr}
    a826:	b082      	sub	sp, #8
    a828:	af00      	add	r7, sp, #0
    a82a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a82c:	687b      	ldr	r3, [r7, #4]
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	b2db      	uxtb	r3, r3
    a832:	f023 0304 	bic.w	r3, r3, #4
    a836:	b2da      	uxtb	r2, r3
    a838:	687b      	ldr	r3, [r7, #4]
    a83a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a83c:	210e      	movs	r1, #14
    a83e:	6878      	ldr	r0, [r7, #4]
    a840:	4b02      	ldr	r3, [pc, #8]	; (a84c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a842:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a844:	bf00      	nop
    a846:	3708      	adds	r7, #8
    a848:	46bd      	mov	sp, r7
    a84a:	bd80      	pop	{r7, pc}
    a84c:	0000a7c5 	.word	0x0000a7c5

0000a850 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a850:	b580      	push	{r7, lr}
    a852:	b084      	sub	sp, #16
    a854:	af00      	add	r7, sp, #0
    a856:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a858:	210e      	movs	r1, #14
    a85a:	6878      	ldr	r0, [r7, #4]
    a85c:	4b08      	ldr	r3, [pc, #32]	; (a880 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a85e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	781b      	ldrb	r3, [r3, #0]
    a864:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a866:	7bfb      	ldrb	r3, [r7, #15]
    a868:	09db      	lsrs	r3, r3, #7
    a86a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a86c:	7bfb      	ldrb	r3, [r7, #15]
    a86e:	2b00      	cmp	r3, #0
    a870:	bf14      	ite	ne
    a872:	2301      	movne	r3, #1
    a874:	2300      	moveq	r3, #0
    a876:	b2db      	uxtb	r3, r3
}
    a878:	4618      	mov	r0, r3
    a87a:	3710      	adds	r7, #16
    a87c:	46bd      	mov	sp, r7
    a87e:	bd80      	pop	{r7, pc}
    a880:	0000a7c5 	.word	0x0000a7c5

0000a884 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a884:	b480      	push	{r7}
    a886:	b085      	sub	sp, #20
    a888:	af00      	add	r7, sp, #0
    a88a:	6078      	str	r0, [r7, #4]
    a88c:	460b      	mov	r3, r1
    a88e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a890:	687b      	ldr	r3, [r7, #4]
    a892:	785b      	ldrb	r3, [r3, #1]
    a894:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a896:	7bfb      	ldrb	r3, [r7, #15]
    a898:	f023 030f 	bic.w	r3, r3, #15
    a89c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a89e:	78fb      	ldrb	r3, [r7, #3]
    a8a0:	f003 030f 	and.w	r3, r3, #15
    a8a4:	b2da      	uxtb	r2, r3
    a8a6:	7bfb      	ldrb	r3, [r7, #15]
    a8a8:	4313      	orrs	r3, r2
    a8aa:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a8ac:	687b      	ldr	r3, [r7, #4]
    a8ae:	7bfa      	ldrb	r2, [r7, #15]
    a8b0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a8b2:	bf00      	nop
    a8b4:	3714      	adds	r7, #20
    a8b6:	46bd      	mov	sp, r7
    a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8bc:	4770      	bx	lr
	...

0000a8c0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	b082      	sub	sp, #8
    a8c4:	af00      	add	r7, sp, #0
    a8c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a8c8:	687b      	ldr	r3, [r7, #4]
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d005      	beq.n	a8da <_wdt_init+0x1a>
    a8ce:	687b      	ldr	r3, [r7, #4]
    a8d0:	681b      	ldr	r3, [r3, #0]
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d001      	beq.n	a8da <_wdt_init+0x1a>
    a8d6:	2301      	movs	r3, #1
    a8d8:	e000      	b.n	a8dc <_wdt_init+0x1c>
    a8da:	2300      	movs	r3, #0
    a8dc:	f003 0301 	and.w	r3, r3, #1
    a8e0:	b2db      	uxtb	r3, r3
    a8e2:	2250      	movs	r2, #80	; 0x50
    a8e4:	4913      	ldr	r1, [pc, #76]	; (a934 <_wdt_init+0x74>)
    a8e6:	4618      	mov	r0, r3
    a8e8:	4b13      	ldr	r3, [pc, #76]	; (a938 <_wdt_init+0x78>)
    a8ea:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a8ec:	687b      	ldr	r3, [r7, #4]
    a8ee:	681b      	ldr	r3, [r3, #0]
    a8f0:	4618      	mov	r0, r3
    a8f2:	4b12      	ldr	r3, [pc, #72]	; (a93c <_wdt_init+0x7c>)
    a8f4:	4798      	blx	r3
    a8f6:	4603      	mov	r3, r0
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d107      	bne.n	a90c <_wdt_init+0x4c>
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	681b      	ldr	r3, [r3, #0]
    a900:	4618      	mov	r0, r3
    a902:	4b0f      	ldr	r3, [pc, #60]	; (a940 <_wdt_init+0x80>)
    a904:	4798      	blx	r3
    a906:	4603      	mov	r3, r0
    a908:	2b00      	cmp	r3, #0
    a90a:	d002      	beq.n	a912 <_wdt_init+0x52>
		return ERR_DENIED;
    a90c:	f06f 0310 	mvn.w	r3, #16
    a910:	e00b      	b.n	a92a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a912:	687b      	ldr	r3, [r7, #4]
    a914:	681b      	ldr	r3, [r3, #0]
    a916:	4618      	mov	r0, r3
    a918:	4b0a      	ldr	r3, [pc, #40]	; (a944 <_wdt_init+0x84>)
    a91a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a91c:	687b      	ldr	r3, [r7, #4]
    a91e:	681b      	ldr	r3, [r3, #0]
    a920:	210b      	movs	r1, #11
    a922:	4618      	mov	r0, r3
    a924:	4b08      	ldr	r3, [pc, #32]	; (a948 <_wdt_init+0x88>)
    a926:	4798      	blx	r3
	}

	return ERR_NONE;
    a928:	2300      	movs	r3, #0
}
    a92a:	4618      	mov	r0, r3
    a92c:	3708      	adds	r7, #8
    a92e:	46bd      	mov	sp, r7
    a930:	bd80      	pop	{r7, pc}
    a932:	bf00      	nop
    a934:	0000efc8 	.word	0x0000efc8
    a938:	000033ad 	.word	0x000033ad
    a93c:	0000a851 	.word	0x0000a851
    a940:	0000a7e9 	.word	0x0000a7e9
    a944:	0000a825 	.word	0x0000a825
    a948:	0000a885 	.word	0x0000a885

0000a94c <hri_port_set_DIR_reg>:
{
    a94c:	b480      	push	{r7}
    a94e:	b085      	sub	sp, #20
    a950:	af00      	add	r7, sp, #0
    a952:	60f8      	str	r0, [r7, #12]
    a954:	460b      	mov	r3, r1
    a956:	607a      	str	r2, [r7, #4]
    a958:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a95a:	7afb      	ldrb	r3, [r7, #11]
    a95c:	68fa      	ldr	r2, [r7, #12]
    a95e:	01db      	lsls	r3, r3, #7
    a960:	4413      	add	r3, r2
    a962:	3308      	adds	r3, #8
    a964:	687a      	ldr	r2, [r7, #4]
    a966:	601a      	str	r2, [r3, #0]
}
    a968:	bf00      	nop
    a96a:	3714      	adds	r7, #20
    a96c:	46bd      	mov	sp, r7
    a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a972:	4770      	bx	lr

0000a974 <hri_port_clear_DIR_reg>:
{
    a974:	b480      	push	{r7}
    a976:	b085      	sub	sp, #20
    a978:	af00      	add	r7, sp, #0
    a97a:	60f8      	str	r0, [r7, #12]
    a97c:	460b      	mov	r3, r1
    a97e:	607a      	str	r2, [r7, #4]
    a980:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a982:	7afb      	ldrb	r3, [r7, #11]
    a984:	68fa      	ldr	r2, [r7, #12]
    a986:	01db      	lsls	r3, r3, #7
    a988:	4413      	add	r3, r2
    a98a:	3304      	adds	r3, #4
    a98c:	687a      	ldr	r2, [r7, #4]
    a98e:	601a      	str	r2, [r3, #0]
}
    a990:	bf00      	nop
    a992:	3714      	adds	r7, #20
    a994:	46bd      	mov	sp, r7
    a996:	f85d 7b04 	ldr.w	r7, [sp], #4
    a99a:	4770      	bx	lr

0000a99c <hri_port_set_OUT_reg>:
{
    a99c:	b480      	push	{r7}
    a99e:	b085      	sub	sp, #20
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	60f8      	str	r0, [r7, #12]
    a9a4:	460b      	mov	r3, r1
    a9a6:	607a      	str	r2, [r7, #4]
    a9a8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a9aa:	7afb      	ldrb	r3, [r7, #11]
    a9ac:	68fa      	ldr	r2, [r7, #12]
    a9ae:	01db      	lsls	r3, r3, #7
    a9b0:	4413      	add	r3, r2
    a9b2:	3318      	adds	r3, #24
    a9b4:	687a      	ldr	r2, [r7, #4]
    a9b6:	601a      	str	r2, [r3, #0]
}
    a9b8:	bf00      	nop
    a9ba:	3714      	adds	r7, #20
    a9bc:	46bd      	mov	sp, r7
    a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9c2:	4770      	bx	lr

0000a9c4 <hri_port_clear_OUT_reg>:
{
    a9c4:	b480      	push	{r7}
    a9c6:	b085      	sub	sp, #20
    a9c8:	af00      	add	r7, sp, #0
    a9ca:	60f8      	str	r0, [r7, #12]
    a9cc:	460b      	mov	r3, r1
    a9ce:	607a      	str	r2, [r7, #4]
    a9d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a9d2:	7afb      	ldrb	r3, [r7, #11]
    a9d4:	68fa      	ldr	r2, [r7, #12]
    a9d6:	01db      	lsls	r3, r3, #7
    a9d8:	4413      	add	r3, r2
    a9da:	3314      	adds	r3, #20
    a9dc:	687a      	ldr	r2, [r7, #4]
    a9de:	601a      	str	r2, [r3, #0]
}
    a9e0:	bf00      	nop
    a9e2:	3714      	adds	r7, #20
    a9e4:	46bd      	mov	sp, r7
    a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ea:	4770      	bx	lr

0000a9ec <hri_port_write_PMUX_PMUXE_bf>:
{
    a9ec:	b480      	push	{r7}
    a9ee:	b085      	sub	sp, #20
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	6078      	str	r0, [r7, #4]
    a9f4:	4608      	mov	r0, r1
    a9f6:	4611      	mov	r1, r2
    a9f8:	461a      	mov	r2, r3
    a9fa:	4603      	mov	r3, r0
    a9fc:	70fb      	strb	r3, [r7, #3]
    a9fe:	460b      	mov	r3, r1
    aa00:	70bb      	strb	r3, [r7, #2]
    aa02:	4613      	mov	r3, r2
    aa04:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    aa06:	78fa      	ldrb	r2, [r7, #3]
    aa08:	78bb      	ldrb	r3, [r7, #2]
    aa0a:	6879      	ldr	r1, [r7, #4]
    aa0c:	01d2      	lsls	r2, r2, #7
    aa0e:	440a      	add	r2, r1
    aa10:	4413      	add	r3, r2
    aa12:	3330      	adds	r3, #48	; 0x30
    aa14:	781b      	ldrb	r3, [r3, #0]
    aa16:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    aa18:	7bfb      	ldrb	r3, [r7, #15]
    aa1a:	f023 030f 	bic.w	r3, r3, #15
    aa1e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    aa20:	787b      	ldrb	r3, [r7, #1]
    aa22:	f003 030f 	and.w	r3, r3, #15
    aa26:	b2da      	uxtb	r2, r3
    aa28:	7bfb      	ldrb	r3, [r7, #15]
    aa2a:	4313      	orrs	r3, r2
    aa2c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    aa2e:	78fa      	ldrb	r2, [r7, #3]
    aa30:	78bb      	ldrb	r3, [r7, #2]
    aa32:	6879      	ldr	r1, [r7, #4]
    aa34:	01d2      	lsls	r2, r2, #7
    aa36:	440a      	add	r2, r1
    aa38:	4413      	add	r3, r2
    aa3a:	3330      	adds	r3, #48	; 0x30
    aa3c:	7bfa      	ldrb	r2, [r7, #15]
    aa3e:	701a      	strb	r2, [r3, #0]
}
    aa40:	bf00      	nop
    aa42:	3714      	adds	r7, #20
    aa44:	46bd      	mov	sp, r7
    aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa4a:	4770      	bx	lr

0000aa4c <hri_port_write_PMUX_PMUXO_bf>:
{
    aa4c:	b480      	push	{r7}
    aa4e:	b085      	sub	sp, #20
    aa50:	af00      	add	r7, sp, #0
    aa52:	6078      	str	r0, [r7, #4]
    aa54:	4608      	mov	r0, r1
    aa56:	4611      	mov	r1, r2
    aa58:	461a      	mov	r2, r3
    aa5a:	4603      	mov	r3, r0
    aa5c:	70fb      	strb	r3, [r7, #3]
    aa5e:	460b      	mov	r3, r1
    aa60:	70bb      	strb	r3, [r7, #2]
    aa62:	4613      	mov	r3, r2
    aa64:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    aa66:	78fa      	ldrb	r2, [r7, #3]
    aa68:	78bb      	ldrb	r3, [r7, #2]
    aa6a:	6879      	ldr	r1, [r7, #4]
    aa6c:	01d2      	lsls	r2, r2, #7
    aa6e:	440a      	add	r2, r1
    aa70:	4413      	add	r3, r2
    aa72:	3330      	adds	r3, #48	; 0x30
    aa74:	781b      	ldrb	r3, [r3, #0]
    aa76:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    aa78:	7bfb      	ldrb	r3, [r7, #15]
    aa7a:	f003 030f 	and.w	r3, r3, #15
    aa7e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    aa80:	787b      	ldrb	r3, [r7, #1]
    aa82:	011b      	lsls	r3, r3, #4
    aa84:	b2da      	uxtb	r2, r3
    aa86:	7bfb      	ldrb	r3, [r7, #15]
    aa88:	4313      	orrs	r3, r2
    aa8a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    aa8c:	78fa      	ldrb	r2, [r7, #3]
    aa8e:	78bb      	ldrb	r3, [r7, #2]
    aa90:	6879      	ldr	r1, [r7, #4]
    aa92:	01d2      	lsls	r2, r2, #7
    aa94:	440a      	add	r2, r1
    aa96:	4413      	add	r3, r2
    aa98:	3330      	adds	r3, #48	; 0x30
    aa9a:	7bfa      	ldrb	r2, [r7, #15]
    aa9c:	701a      	strb	r2, [r3, #0]
}
    aa9e:	bf00      	nop
    aaa0:	3714      	adds	r7, #20
    aaa2:	46bd      	mov	sp, r7
    aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaa8:	4770      	bx	lr

0000aaaa <hri_port_write_PINCFG_PMUXEN_bit>:
{
    aaaa:	b480      	push	{r7}
    aaac:	b085      	sub	sp, #20
    aaae:	af00      	add	r7, sp, #0
    aab0:	6078      	str	r0, [r7, #4]
    aab2:	4608      	mov	r0, r1
    aab4:	4611      	mov	r1, r2
    aab6:	461a      	mov	r2, r3
    aab8:	4603      	mov	r3, r0
    aaba:	70fb      	strb	r3, [r7, #3]
    aabc:	460b      	mov	r3, r1
    aabe:	70bb      	strb	r3, [r7, #2]
    aac0:	4613      	mov	r3, r2
    aac2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    aac4:	78fa      	ldrb	r2, [r7, #3]
    aac6:	78bb      	ldrb	r3, [r7, #2]
    aac8:	6879      	ldr	r1, [r7, #4]
    aaca:	01d2      	lsls	r2, r2, #7
    aacc:	440a      	add	r2, r1
    aace:	4413      	add	r3, r2
    aad0:	3340      	adds	r3, #64	; 0x40
    aad2:	781b      	ldrb	r3, [r3, #0]
    aad4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    aad6:	7bfb      	ldrb	r3, [r7, #15]
    aad8:	f023 0301 	bic.w	r3, r3, #1
    aadc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    aade:	787a      	ldrb	r2, [r7, #1]
    aae0:	7bfb      	ldrb	r3, [r7, #15]
    aae2:	4313      	orrs	r3, r2
    aae4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    aae6:	78fa      	ldrb	r2, [r7, #3]
    aae8:	78bb      	ldrb	r3, [r7, #2]
    aaea:	6879      	ldr	r1, [r7, #4]
    aaec:	01d2      	lsls	r2, r2, #7
    aaee:	440a      	add	r2, r1
    aaf0:	4413      	add	r3, r2
    aaf2:	3340      	adds	r3, #64	; 0x40
    aaf4:	7bfa      	ldrb	r2, [r7, #15]
    aaf6:	701a      	strb	r2, [r3, #0]
}
    aaf8:	bf00      	nop
    aafa:	3714      	adds	r7, #20
    aafc:	46bd      	mov	sp, r7
    aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab02:	4770      	bx	lr

0000ab04 <hri_port_write_WRCONFIG_reg>:
{
    ab04:	b480      	push	{r7}
    ab06:	b085      	sub	sp, #20
    ab08:	af00      	add	r7, sp, #0
    ab0a:	60f8      	str	r0, [r7, #12]
    ab0c:	460b      	mov	r3, r1
    ab0e:	607a      	str	r2, [r7, #4]
    ab10:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ab12:	7afb      	ldrb	r3, [r7, #11]
    ab14:	68fa      	ldr	r2, [r7, #12]
    ab16:	01db      	lsls	r3, r3, #7
    ab18:	4413      	add	r3, r2
    ab1a:	3328      	adds	r3, #40	; 0x28
    ab1c:	687a      	ldr	r2, [r7, #4]
    ab1e:	601a      	str	r2, [r3, #0]
}
    ab20:	bf00      	nop
    ab22:	3714      	adds	r7, #20
    ab24:	46bd      	mov	sp, r7
    ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab2a:	4770      	bx	lr

0000ab2c <_gpio_set_direction>:
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b082      	sub	sp, #8
    ab30:	af00      	add	r7, sp, #0
    ab32:	4603      	mov	r3, r0
    ab34:	6039      	str	r1, [r7, #0]
    ab36:	71fb      	strb	r3, [r7, #7]
    ab38:	4613      	mov	r3, r2
    ab3a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ab3c:	79bb      	ldrb	r3, [r7, #6]
    ab3e:	2b01      	cmp	r3, #1
    ab40:	d01c      	beq.n	ab7c <_gpio_set_direction+0x50>
    ab42:	2b02      	cmp	r3, #2
    ab44:	d037      	beq.n	abb6 <_gpio_set_direction+0x8a>
    ab46:	2b00      	cmp	r3, #0
    ab48:	d14e      	bne.n	abe8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ab4a:	79fb      	ldrb	r3, [r7, #7]
    ab4c:	683a      	ldr	r2, [r7, #0]
    ab4e:	4619      	mov	r1, r3
    ab50:	482a      	ldr	r0, [pc, #168]	; (abfc <_gpio_set_direction+0xd0>)
    ab52:	4b2b      	ldr	r3, [pc, #172]	; (ac00 <_gpio_set_direction+0xd4>)
    ab54:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ab56:	683b      	ldr	r3, [r7, #0]
    ab58:	b29b      	uxth	r3, r3
    ab5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ab5e:	79fb      	ldrb	r3, [r7, #7]
    ab60:	4619      	mov	r1, r3
    ab62:	4826      	ldr	r0, [pc, #152]	; (abfc <_gpio_set_direction+0xd0>)
    ab64:	4b27      	ldr	r3, [pc, #156]	; (ac04 <_gpio_set_direction+0xd8>)
    ab66:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ab68:	683b      	ldr	r3, [r7, #0]
    ab6a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ab6c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ab70:	79fb      	ldrb	r3, [r7, #7]
    ab72:	4619      	mov	r1, r3
    ab74:	4821      	ldr	r0, [pc, #132]	; (abfc <_gpio_set_direction+0xd0>)
    ab76:	4b23      	ldr	r3, [pc, #140]	; (ac04 <_gpio_set_direction+0xd8>)
    ab78:	4798      	blx	r3
		break;
    ab7a:	e03a      	b.n	abf2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ab7c:	79fb      	ldrb	r3, [r7, #7]
    ab7e:	683a      	ldr	r2, [r7, #0]
    ab80:	4619      	mov	r1, r3
    ab82:	481e      	ldr	r0, [pc, #120]	; (abfc <_gpio_set_direction+0xd0>)
    ab84:	4b1e      	ldr	r3, [pc, #120]	; (ac00 <_gpio_set_direction+0xd4>)
    ab86:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ab88:	683b      	ldr	r3, [r7, #0]
    ab8a:	b29b      	uxth	r3, r3
    ab8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ab90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ab94:	79f9      	ldrb	r1, [r7, #7]
    ab96:	461a      	mov	r2, r3
    ab98:	4818      	ldr	r0, [pc, #96]	; (abfc <_gpio_set_direction+0xd0>)
    ab9a:	4b1a      	ldr	r3, [pc, #104]	; (ac04 <_gpio_set_direction+0xd8>)
    ab9c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ab9e:	683b      	ldr	r3, [r7, #0]
    aba0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    aba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    aba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    abaa:	79f9      	ldrb	r1, [r7, #7]
    abac:	461a      	mov	r2, r3
    abae:	4813      	ldr	r0, [pc, #76]	; (abfc <_gpio_set_direction+0xd0>)
    abb0:	4b14      	ldr	r3, [pc, #80]	; (ac04 <_gpio_set_direction+0xd8>)
    abb2:	4798      	blx	r3
		break;
    abb4:	e01d      	b.n	abf2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    abb6:	79fb      	ldrb	r3, [r7, #7]
    abb8:	683a      	ldr	r2, [r7, #0]
    abba:	4619      	mov	r1, r3
    abbc:	480f      	ldr	r0, [pc, #60]	; (abfc <_gpio_set_direction+0xd0>)
    abbe:	4b12      	ldr	r3, [pc, #72]	; (ac08 <_gpio_set_direction+0xdc>)
    abc0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    abc2:	683b      	ldr	r3, [r7, #0]
    abc4:	b29b      	uxth	r3, r3
    abc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    abca:	79fb      	ldrb	r3, [r7, #7]
    abcc:	4619      	mov	r1, r3
    abce:	480b      	ldr	r0, [pc, #44]	; (abfc <_gpio_set_direction+0xd0>)
    abd0:	4b0c      	ldr	r3, [pc, #48]	; (ac04 <_gpio_set_direction+0xd8>)
    abd2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    abd4:	683b      	ldr	r3, [r7, #0]
    abd6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    abd8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    abdc:	79fb      	ldrb	r3, [r7, #7]
    abde:	4619      	mov	r1, r3
    abe0:	4806      	ldr	r0, [pc, #24]	; (abfc <_gpio_set_direction+0xd0>)
    abe2:	4b08      	ldr	r3, [pc, #32]	; (ac04 <_gpio_set_direction+0xd8>)
    abe4:	4798      	blx	r3
		break;
    abe6:	e004      	b.n	abf2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    abe8:	2246      	movs	r2, #70	; 0x46
    abea:	4908      	ldr	r1, [pc, #32]	; (ac0c <_gpio_set_direction+0xe0>)
    abec:	2000      	movs	r0, #0
    abee:	4b08      	ldr	r3, [pc, #32]	; (ac10 <_gpio_set_direction+0xe4>)
    abf0:	4798      	blx	r3
}
    abf2:	bf00      	nop
    abf4:	3708      	adds	r7, #8
    abf6:	46bd      	mov	sp, r7
    abf8:	bd80      	pop	{r7, pc}
    abfa:	bf00      	nop
    abfc:	41008000 	.word	0x41008000
    ac00:	0000a975 	.word	0x0000a975
    ac04:	0000ab05 	.word	0x0000ab05
    ac08:	0000a94d 	.word	0x0000a94d
    ac0c:	0000efe0 	.word	0x0000efe0
    ac10:	000033ad 	.word	0x000033ad

0000ac14 <_gpio_set_level>:
{
    ac14:	b580      	push	{r7, lr}
    ac16:	b082      	sub	sp, #8
    ac18:	af00      	add	r7, sp, #0
    ac1a:	4603      	mov	r3, r0
    ac1c:	6039      	str	r1, [r7, #0]
    ac1e:	71fb      	strb	r3, [r7, #7]
    ac20:	4613      	mov	r3, r2
    ac22:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ac24:	79bb      	ldrb	r3, [r7, #6]
    ac26:	2b00      	cmp	r3, #0
    ac28:	d006      	beq.n	ac38 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ac2a:	79fb      	ldrb	r3, [r7, #7]
    ac2c:	683a      	ldr	r2, [r7, #0]
    ac2e:	4619      	mov	r1, r3
    ac30:	4806      	ldr	r0, [pc, #24]	; (ac4c <_gpio_set_level+0x38>)
    ac32:	4b07      	ldr	r3, [pc, #28]	; (ac50 <_gpio_set_level+0x3c>)
    ac34:	4798      	blx	r3
}
    ac36:	e005      	b.n	ac44 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ac38:	79fb      	ldrb	r3, [r7, #7]
    ac3a:	683a      	ldr	r2, [r7, #0]
    ac3c:	4619      	mov	r1, r3
    ac3e:	4803      	ldr	r0, [pc, #12]	; (ac4c <_gpio_set_level+0x38>)
    ac40:	4b04      	ldr	r3, [pc, #16]	; (ac54 <_gpio_set_level+0x40>)
    ac42:	4798      	blx	r3
}
    ac44:	bf00      	nop
    ac46:	3708      	adds	r7, #8
    ac48:	46bd      	mov	sp, r7
    ac4a:	bd80      	pop	{r7, pc}
    ac4c:	41008000 	.word	0x41008000
    ac50:	0000a99d 	.word	0x0000a99d
    ac54:	0000a9c5 	.word	0x0000a9c5

0000ac58 <_gpio_set_pin_function>:
{
    ac58:	b590      	push	{r4, r7, lr}
    ac5a:	b085      	sub	sp, #20
    ac5c:	af00      	add	r7, sp, #0
    ac5e:	6078      	str	r0, [r7, #4]
    ac60:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ac62:	687b      	ldr	r3, [r7, #4]
    ac64:	095b      	lsrs	r3, r3, #5
    ac66:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	b2db      	uxtb	r3, r3
    ac6c:	f003 031f 	and.w	r3, r3, #31
    ac70:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ac72:	683b      	ldr	r3, [r7, #0]
    ac74:	f1b3 3fff 	cmp.w	r3, #4294967295
    ac78:	d106      	bne.n	ac88 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ac7a:	7bba      	ldrb	r2, [r7, #14]
    ac7c:	7bf9      	ldrb	r1, [r7, #15]
    ac7e:	2300      	movs	r3, #0
    ac80:	4812      	ldr	r0, [pc, #72]	; (accc <_gpio_set_pin_function+0x74>)
    ac82:	4c13      	ldr	r4, [pc, #76]	; (acd0 <_gpio_set_pin_function+0x78>)
    ac84:	47a0      	blx	r4
}
    ac86:	e01d      	b.n	acc4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ac88:	7bba      	ldrb	r2, [r7, #14]
    ac8a:	7bf9      	ldrb	r1, [r7, #15]
    ac8c:	2301      	movs	r3, #1
    ac8e:	480f      	ldr	r0, [pc, #60]	; (accc <_gpio_set_pin_function+0x74>)
    ac90:	4c0f      	ldr	r4, [pc, #60]	; (acd0 <_gpio_set_pin_function+0x78>)
    ac92:	47a0      	blx	r4
		if (pin & 1) {
    ac94:	7bbb      	ldrb	r3, [r7, #14]
    ac96:	f003 0301 	and.w	r3, r3, #1
    ac9a:	2b00      	cmp	r3, #0
    ac9c:	d009      	beq.n	acb2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ac9e:	7bbb      	ldrb	r3, [r7, #14]
    aca0:	085b      	lsrs	r3, r3, #1
    aca2:	b2da      	uxtb	r2, r3
    aca4:	683b      	ldr	r3, [r7, #0]
    aca6:	b2db      	uxtb	r3, r3
    aca8:	7bf9      	ldrb	r1, [r7, #15]
    acaa:	4808      	ldr	r0, [pc, #32]	; (accc <_gpio_set_pin_function+0x74>)
    acac:	4c09      	ldr	r4, [pc, #36]	; (acd4 <_gpio_set_pin_function+0x7c>)
    acae:	47a0      	blx	r4
}
    acb0:	e008      	b.n	acc4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    acb2:	7bbb      	ldrb	r3, [r7, #14]
    acb4:	085b      	lsrs	r3, r3, #1
    acb6:	b2da      	uxtb	r2, r3
    acb8:	683b      	ldr	r3, [r7, #0]
    acba:	b2db      	uxtb	r3, r3
    acbc:	7bf9      	ldrb	r1, [r7, #15]
    acbe:	4803      	ldr	r0, [pc, #12]	; (accc <_gpio_set_pin_function+0x74>)
    acc0:	4c05      	ldr	r4, [pc, #20]	; (acd8 <_gpio_set_pin_function+0x80>)
    acc2:	47a0      	blx	r4
}
    acc4:	bf00      	nop
    acc6:	3714      	adds	r7, #20
    acc8:	46bd      	mov	sp, r7
    acca:	bd90      	pop	{r4, r7, pc}
    accc:	41008000 	.word	0x41008000
    acd0:	0000aaab 	.word	0x0000aaab
    acd4:	0000aa4d 	.word	0x0000aa4d
    acd8:	0000a9ed 	.word	0x0000a9ed

0000acdc <gpio_set_pin_function>:
{
    acdc:	b580      	push	{r7, lr}
    acde:	b082      	sub	sp, #8
    ace0:	af00      	add	r7, sp, #0
    ace2:	6078      	str	r0, [r7, #4]
    ace4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    ace6:	6839      	ldr	r1, [r7, #0]
    ace8:	6878      	ldr	r0, [r7, #4]
    acea:	4b03      	ldr	r3, [pc, #12]	; (acf8 <gpio_set_pin_function+0x1c>)
    acec:	4798      	blx	r3
}
    acee:	bf00      	nop
    acf0:	3708      	adds	r7, #8
    acf2:	46bd      	mov	sp, r7
    acf4:	bd80      	pop	{r7, pc}
    acf6:	bf00      	nop
    acf8:	0000ac59 	.word	0x0000ac59

0000acfc <gpio_set_pin_direction>:
{
    acfc:	b580      	push	{r7, lr}
    acfe:	b082      	sub	sp, #8
    ad00:	af00      	add	r7, sp, #0
    ad02:	4603      	mov	r3, r0
    ad04:	460a      	mov	r2, r1
    ad06:	71fb      	strb	r3, [r7, #7]
    ad08:	4613      	mov	r3, r2
    ad0a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ad0c:	79fb      	ldrb	r3, [r7, #7]
    ad0e:	095b      	lsrs	r3, r3, #5
    ad10:	b2d8      	uxtb	r0, r3
    ad12:	79fb      	ldrb	r3, [r7, #7]
    ad14:	f003 031f 	and.w	r3, r3, #31
    ad18:	2201      	movs	r2, #1
    ad1a:	fa02 f303 	lsl.w	r3, r2, r3
    ad1e:	79ba      	ldrb	r2, [r7, #6]
    ad20:	4619      	mov	r1, r3
    ad22:	4b03      	ldr	r3, [pc, #12]	; (ad30 <gpio_set_pin_direction+0x34>)
    ad24:	4798      	blx	r3
}
    ad26:	bf00      	nop
    ad28:	3708      	adds	r7, #8
    ad2a:	46bd      	mov	sp, r7
    ad2c:	bd80      	pop	{r7, pc}
    ad2e:	bf00      	nop
    ad30:	0000ab2d 	.word	0x0000ab2d

0000ad34 <gpio_set_pin_level>:
{
    ad34:	b580      	push	{r7, lr}
    ad36:	b082      	sub	sp, #8
    ad38:	af00      	add	r7, sp, #0
    ad3a:	4603      	mov	r3, r0
    ad3c:	460a      	mov	r2, r1
    ad3e:	71fb      	strb	r3, [r7, #7]
    ad40:	4613      	mov	r3, r2
    ad42:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    ad44:	79fb      	ldrb	r3, [r7, #7]
    ad46:	095b      	lsrs	r3, r3, #5
    ad48:	b2d8      	uxtb	r0, r3
    ad4a:	79fb      	ldrb	r3, [r7, #7]
    ad4c:	f003 031f 	and.w	r3, r3, #31
    ad50:	2201      	movs	r2, #1
    ad52:	fa02 f303 	lsl.w	r3, r2, r3
    ad56:	79ba      	ldrb	r2, [r7, #6]
    ad58:	4619      	mov	r1, r3
    ad5a:	4b03      	ldr	r3, [pc, #12]	; (ad68 <gpio_set_pin_level+0x34>)
    ad5c:	4798      	blx	r3
}
    ad5e:	bf00      	nop
    ad60:	3708      	adds	r7, #8
    ad62:	46bd      	mov	sp, r7
    ad64:	bd80      	pop	{r7, pc}
    ad66:	bf00      	nop
    ad68:	0000ac15 	.word	0x0000ac15

0000ad6c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    ad6c:	b580      	push	{r7, lr}
    ad6e:	b082      	sub	sp, #8
    ad70:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    ad72:	2100      	movs	r1, #0
    ad74:	2008      	movs	r0, #8
    ad76:	4b24      	ldr	r3, [pc, #144]	; (ae08 <QSPI_N25Q256_exit_xip+0x9c>)
    ad78:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    ad7a:	2100      	movs	r1, #0
    ad7c:	202b      	movs	r0, #43	; 0x2b
    ad7e:	4b22      	ldr	r3, [pc, #136]	; (ae08 <QSPI_N25Q256_exit_xip+0x9c>)
    ad80:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    ad82:	2100      	movs	r1, #0
    ad84:	202a      	movs	r0, #42	; 0x2a
    ad86:	4b20      	ldr	r3, [pc, #128]	; (ae08 <QSPI_N25Q256_exit_xip+0x9c>)
    ad88:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ad8a:	2102      	movs	r1, #2
    ad8c:	2008      	movs	r0, #8
    ad8e:	4b1f      	ldr	r3, [pc, #124]	; (ae0c <QSPI_N25Q256_exit_xip+0xa0>)
    ad90:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ad92:	2102      	movs	r1, #2
    ad94:	202b      	movs	r0, #43	; 0x2b
    ad96:	4b1d      	ldr	r3, [pc, #116]	; (ae0c <QSPI_N25Q256_exit_xip+0xa0>)
    ad98:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    ad9a:	2102      	movs	r1, #2
    ad9c:	202a      	movs	r0, #42	; 0x2a
    ad9e:	4b1b      	ldr	r3, [pc, #108]	; (ae0c <QSPI_N25Q256_exit_xip+0xa0>)
    ada0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    ada2:	2101      	movs	r1, #1
    ada4:	2008      	movs	r0, #8
    ada6:	4b1a      	ldr	r3, [pc, #104]	; (ae10 <QSPI_N25Q256_exit_xip+0xa4>)
    ada8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    adaa:	2100      	movs	r1, #0
    adac:	202b      	movs	r0, #43	; 0x2b
    adae:	4b18      	ldr	r3, [pc, #96]	; (ae10 <QSPI_N25Q256_exit_xip+0xa4>)
    adb0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    adb2:	2100      	movs	r1, #0
    adb4:	202a      	movs	r0, #42	; 0x2a
    adb6:	4b16      	ldr	r3, [pc, #88]	; (ae10 <QSPI_N25Q256_exit_xip+0xa4>)
    adb8:	4798      	blx	r3

	delay_us(1);
    adba:	2001      	movs	r0, #1
    adbc:	4b15      	ldr	r3, [pc, #84]	; (ae14 <QSPI_N25Q256_exit_xip+0xa8>)
    adbe:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    adc0:	2300      	movs	r3, #0
    adc2:	607b      	str	r3, [r7, #4]
    adc4:	e010      	b.n	ade8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    adc6:	2101      	movs	r1, #1
    adc8:	202a      	movs	r0, #42	; 0x2a
    adca:	4b11      	ldr	r3, [pc, #68]	; (ae10 <QSPI_N25Q256_exit_xip+0xa4>)
    adcc:	4798      	blx	r3
		delay_us(1);
    adce:	2001      	movs	r0, #1
    add0:	4b10      	ldr	r3, [pc, #64]	; (ae14 <QSPI_N25Q256_exit_xip+0xa8>)
    add2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    add4:	2100      	movs	r1, #0
    add6:	202a      	movs	r0, #42	; 0x2a
    add8:	4b0d      	ldr	r3, [pc, #52]	; (ae10 <QSPI_N25Q256_exit_xip+0xa4>)
    adda:	4798      	blx	r3
		delay_us(1);
    addc:	2001      	movs	r0, #1
    adde:	4b0d      	ldr	r3, [pc, #52]	; (ae14 <QSPI_N25Q256_exit_xip+0xa8>)
    ade0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    ade2:	687b      	ldr	r3, [r7, #4]
    ade4:	3301      	adds	r3, #1
    ade6:	607b      	str	r3, [r7, #4]
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	2b06      	cmp	r3, #6
    adec:	ddeb      	ble.n	adc6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    adee:	2101      	movs	r1, #1
    adf0:	202b      	movs	r0, #43	; 0x2b
    adf2:	4b07      	ldr	r3, [pc, #28]	; (ae10 <QSPI_N25Q256_exit_xip+0xa4>)
    adf4:	4798      	blx	r3
	delay_us(1);
    adf6:	2001      	movs	r0, #1
    adf8:	4b06      	ldr	r3, [pc, #24]	; (ae14 <QSPI_N25Q256_exit_xip+0xa8>)
    adfa:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    adfc:	4b06      	ldr	r3, [pc, #24]	; (ae18 <QSPI_N25Q256_exit_xip+0xac>)
    adfe:	4798      	blx	r3
}
    ae00:	bf00      	nop
    ae02:	3708      	adds	r7, #8
    ae04:	46bd      	mov	sp, r7
    ae06:	bd80      	pop	{r7, pc}
    ae08:	0000acdd 	.word	0x0000acdd
    ae0c:	0000acfd 	.word	0x0000acfd
    ae10:	0000ad35 	.word	0x0000ad35
    ae14:	00001dfd 	.word	0x00001dfd
    ae18:	00001159 	.word	0x00001159

0000ae1c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    ae1c:	b598      	push	{r3, r4, r7, lr}
    ae1e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    ae20:	4806      	ldr	r0, [pc, #24]	; (ae3c <spi_nor_flash_init+0x20>)
    ae22:	4b07      	ldr	r3, [pc, #28]	; (ae40 <spi_nor_flash_init+0x24>)
    ae24:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    ae26:	2300      	movs	r3, #0
    ae28:	4a06      	ldr	r2, [pc, #24]	; (ae44 <spi_nor_flash_init+0x28>)
    ae2a:	4904      	ldr	r1, [pc, #16]	; (ae3c <spi_nor_flash_init+0x20>)
    ae2c:	4806      	ldr	r0, [pc, #24]	; (ae48 <spi_nor_flash_init+0x2c>)
    ae2e:	4c07      	ldr	r4, [pc, #28]	; (ae4c <spi_nor_flash_init+0x30>)
    ae30:	47a0      	blx	r4
    ae32:	4602      	mov	r2, r0
    ae34:	4b06      	ldr	r3, [pc, #24]	; (ae50 <spi_nor_flash_init+0x34>)
    ae36:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    ae38:	bf00      	nop
    ae3a:	bd98      	pop	{r3, r4, r7, pc}
    ae3c:	20001604 	.word	0x20001604
    ae40:	00002315 	.word	0x00002315
    ae44:	0000ad6d 	.word	0x0000ad6d
    ae48:	20000d3c 	.word	0x20000d3c
    ae4c:	0000b289 	.word	0x0000b289
    ae50:	20001804 	.word	0x20001804

0000ae54 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    ae54:	b580      	push	{r7, lr}
    ae56:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ae58:	4805      	ldr	r0, [pc, #20]	; (ae70 <cdc_device_acm_init+0x1c>)
    ae5a:	4b06      	ldr	r3, [pc, #24]	; (ae74 <cdc_device_acm_init+0x20>)
    ae5c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    ae5e:	4b06      	ldr	r3, [pc, #24]	; (ae78 <cdc_device_acm_init+0x24>)
    ae60:	4798      	blx	r3

	usbdc_start(single_desc);
    ae62:	4806      	ldr	r0, [pc, #24]	; (ae7c <cdc_device_acm_init+0x28>)
    ae64:	4b06      	ldr	r3, [pc, #24]	; (ae80 <cdc_device_acm_init+0x2c>)
    ae66:	4798      	blx	r3
	usbdc_attach();
    ae68:	4b06      	ldr	r3, [pc, #24]	; (ae84 <cdc_device_acm_init+0x30>)
    ae6a:	4798      	blx	r3
}
    ae6c:	bf00      	nop
    ae6e:	bd80      	pop	{r7, pc}
    ae70:	20000d8c 	.word	0x20000d8c
    ae74:	0000c9b1 	.word	0x0000c9b1
    ae78:	0000bc29 	.word	0x0000bc29
    ae7c:	20000200 	.word	0x20000200
    ae80:	0000ca4d 	.word	0x0000ca4d
    ae84:	0000ca9d 	.word	0x0000ca9d

0000ae88 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ae88:	b580      	push	{r7, lr}
    ae8a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ae8c:	4b01      	ldr	r3, [pc, #4]	; (ae94 <usb_init+0xc>)
    ae8e:	4798      	blx	r3
}
    ae90:	bf00      	nop
    ae92:	bd80      	pop	{r7, pc}
    ae94:	0000ae55 	.word	0x0000ae55

0000ae98 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    ae98:	b480      	push	{r7}
    ae9a:	b085      	sub	sp, #20
    ae9c:	af00      	add	r7, sp, #0
    ae9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    aea0:	f3ef 8310 	mrs	r3, PRIMASK
    aea4:	60fb      	str	r3, [r7, #12]
  return(result);
    aea6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    aea8:	687b      	ldr	r3, [r7, #4]
    aeaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    aeac:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    aeae:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    aeb2:	bf00      	nop
    aeb4:	3714      	adds	r7, #20
    aeb6:	46bd      	mov	sp, r7
    aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aebc:	4770      	bx	lr

0000aebe <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    aebe:	b480      	push	{r7}
    aec0:	b085      	sub	sp, #20
    aec2:	af00      	add	r7, sp, #0
    aec4:	6078      	str	r0, [r7, #4]
    aec6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    aeca:	687b      	ldr	r3, [r7, #4]
    aecc:	681b      	ldr	r3, [r3, #0]
    aece:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    aed0:	68fb      	ldr	r3, [r7, #12]
    aed2:	f383 8810 	msr	PRIMASK, r3
}
    aed6:	bf00      	nop
    aed8:	3714      	adds	r7, #20
    aeda:	46bd      	mov	sp, r7
    aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
    aee0:	4770      	bx	lr
	...

0000aee4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    aee4:	b580      	push	{r7, lr}
    aee6:	b08c      	sub	sp, #48	; 0x30
    aee8:	af00      	add	r7, sp, #0
    aeea:	6078      	str	r0, [r7, #4]
    aeec:	460b      	mov	r3, r1
    aeee:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    aef4:	687b      	ldr	r3, [r7, #4]
    aef6:	681b      	ldr	r3, [r3, #0]
    aef8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    aefa:	f107 030c 	add.w	r3, r7, #12
    aefe:	2200      	movs	r2, #0
    af00:	601a      	str	r2, [r3, #0]
    af02:	605a      	str	r2, [r3, #4]
    af04:	609a      	str	r2, [r3, #8]
    af06:	60da      	str	r2, [r3, #12]
    af08:	611a      	str	r2, [r3, #16]
    af0a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af0e:	7b1b      	ldrb	r3, [r3, #12]
    af10:	2b00      	cmp	r3, #0
    af12:	d001      	beq.n	af18 <n25q256a_xip_confirm+0x34>
    af14:	2206      	movs	r2, #6
    af16:	e000      	b.n	af1a <n25q256a_xip_confirm+0x36>
    af18:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    af1a:	7b3b      	ldrb	r3, [r7, #12]
    af1c:	f362 0302 	bfi	r3, r2, #0, #3
    af20:	733b      	strb	r3, [r7, #12]
    af22:	7b3b      	ldrb	r3, [r7, #12]
    af24:	f043 0310 	orr.w	r3, r3, #16
    af28:	733b      	strb	r3, [r7, #12]
    af2a:	7b3b      	ldrb	r3, [r7, #12]
    af2c:	f043 0320 	orr.w	r3, r3, #32
    af30:	733b      	strb	r3, [r7, #12]
    af32:	7b3b      	ldrb	r3, [r7, #12]
    af34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    af38:	733b      	strb	r3, [r7, #12]
    af3a:	7b3b      	ldrb	r3, [r7, #12]
    af3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    af40:	733b      	strb	r3, [r7, #12]
    af42:	7b7b      	ldrb	r3, [r7, #13]
    af44:	f043 0303 	orr.w	r3, r3, #3
    af48:	737b      	strb	r3, [r7, #13]
    af4a:	7b7b      	ldrb	r3, [r7, #13]
    af4c:	2201      	movs	r2, #1
    af4e:	f362 1305 	bfi	r3, r2, #4, #2
    af52:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af56:	7b1b      	ldrb	r3, [r3, #12]
    af58:	2b00      	cmp	r3, #0
    af5a:	d001      	beq.n	af60 <n25q256a_xip_confirm+0x7c>
    af5c:	2208      	movs	r2, #8
    af5e:	e000      	b.n	af62 <n25q256a_xip_confirm+0x7e>
    af60:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    af62:	7bbb      	ldrb	r3, [r7, #14]
    af64:	f362 0304 	bfi	r3, r2, #0, #5
    af68:	73bb      	strb	r3, [r7, #14]
    af6a:	230b      	movs	r3, #11
    af6c:	743b      	strb	r3, [r7, #16]
    af6e:	78fb      	ldrb	r3, [r7, #3]
    af70:	2b00      	cmp	r3, #0
    af72:	d001      	beq.n	af78 <n25q256a_xip_confirm+0x94>
    af74:	2300      	movs	r3, #0
    af76:	e000      	b.n	af7a <n25q256a_xip_confirm+0x96>
    af78:	23ff      	movs	r3, #255	; 0xff
    af7a:	747b      	strb	r3, [r7, #17]
    af7c:	2301      	movs	r3, #1
    af7e:	61bb      	str	r3, [r7, #24]
    af80:	f107 0327 	add.w	r3, r7, #39	; 0x27
    af84:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    af86:	f107 030c 	add.w	r3, r7, #12
    af8a:	4619      	mov	r1, r3
    af8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    af8e:	4b07      	ldr	r3, [pc, #28]	; (afac <n25q256a_xip_confirm+0xc8>)
    af90:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    af92:	78fb      	ldrb	r3, [r7, #3]
    af94:	2b00      	cmp	r3, #0
    af96:	d001      	beq.n	af9c <n25q256a_xip_confirm+0xb8>
    af98:	2202      	movs	r2, #2
    af9a:	e000      	b.n	af9e <n25q256a_xip_confirm+0xba>
    af9c:	2201      	movs	r2, #1
    af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    afa0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    afa2:	2300      	movs	r3, #0
}
    afa4:	4618      	mov	r0, r3
    afa6:	3730      	adds	r7, #48	; 0x30
    afa8:	46bd      	mov	sp, r7
    afaa:	bd80      	pop	{r7, pc}
    afac:	0000238d 	.word	0x0000238d

0000afb0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    afb0:	b580      	push	{r7, lr}
    afb2:	b08c      	sub	sp, #48	; 0x30
    afb4:	af00      	add	r7, sp, #0
    afb6:	6078      	str	r0, [r7, #4]
    afb8:	460b      	mov	r3, r1
    afba:	70fb      	strb	r3, [r7, #3]
    afbc:	4613      	mov	r3, r2
    afbe:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    afc0:	2300      	movs	r3, #0
    afc2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    afc4:	687b      	ldr	r3, [r7, #4]
    afc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    afc8:	687b      	ldr	r3, [r7, #4]
    afca:	681b      	ldr	r3, [r3, #0]
    afcc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    afce:	f107 030c 	add.w	r3, r7, #12
    afd2:	2200      	movs	r2, #0
    afd4:	601a      	str	r2, [r3, #0]
    afd6:	605a      	str	r2, [r3, #4]
    afd8:	609a      	str	r2, [r3, #8]
    afda:	60da      	str	r2, [r3, #12]
    afdc:	611a      	str	r2, [r3, #16]
    afde:	615a      	str	r2, [r3, #20]
    afe0:	78fb      	ldrb	r3, [r7, #3]
    afe2:	f003 0307 	and.w	r3, r3, #7
    afe6:	b2da      	uxtb	r2, r3
    afe8:	7b3b      	ldrb	r3, [r7, #12]
    afea:	f362 0302 	bfi	r3, r2, #0, #3
    afee:	733b      	strb	r3, [r7, #12]
    aff0:	7b3b      	ldrb	r3, [r7, #12]
    aff2:	f043 0310 	orr.w	r3, r3, #16
    aff6:	733b      	strb	r3, [r7, #12]
    aff8:	7b3b      	ldrb	r3, [r7, #12]
    affa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    affe:	733b      	strb	r3, [r7, #12]
    b000:	78bb      	ldrb	r3, [r7, #2]
    b002:	743b      	strb	r3, [r7, #16]
    b004:	2301      	movs	r3, #1
    b006:	61bb      	str	r3, [r7, #24]
    b008:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b00c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b010:	7b5b      	ldrb	r3, [r3, #13]
    b012:	2b00      	cmp	r3, #0
    b014:	d003      	beq.n	b01e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b016:	2100      	movs	r1, #0
    b018:	6878      	ldr	r0, [r7, #4]
    b01a:	4b0a      	ldr	r3, [pc, #40]	; (b044 <n25q256a_read_reg+0x94>)
    b01c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b01e:	f107 030c 	add.w	r3, r7, #12
    b022:	4619      	mov	r1, r3
    b024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b026:	4b08      	ldr	r3, [pc, #32]	; (b048 <n25q256a_read_reg+0x98>)
    b028:	4798      	blx	r3
	if (n25q->xip_mode) {
    b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b02c:	7b5b      	ldrb	r3, [r3, #13]
    b02e:	2b00      	cmp	r3, #0
    b030:	d003      	beq.n	b03a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b032:	2101      	movs	r1, #1
    b034:	6878      	ldr	r0, [r7, #4]
    b036:	4b03      	ldr	r3, [pc, #12]	; (b044 <n25q256a_read_reg+0x94>)
    b038:	4798      	blx	r3
	}
	return status;
    b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b03c:	4618      	mov	r0, r3
    b03e:	3730      	adds	r7, #48	; 0x30
    b040:	46bd      	mov	sp, r7
    b042:	bd80      	pop	{r7, pc}
    b044:	0000aee5 	.word	0x0000aee5
    b048:	0000238d 	.word	0x0000238d

0000b04c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b04c:	b580      	push	{r7, lr}
    b04e:	b08c      	sub	sp, #48	; 0x30
    b050:	af00      	add	r7, sp, #0
    b052:	60f8      	str	r0, [r7, #12]
    b054:	607b      	str	r3, [r7, #4]
    b056:	460b      	mov	r3, r1
    b058:	72fb      	strb	r3, [r7, #11]
    b05a:	4613      	mov	r3, r2
    b05c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b05e:	68fb      	ldr	r3, [r7, #12]
    b060:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b062:	68fb      	ldr	r3, [r7, #12]
    b064:	681b      	ldr	r3, [r3, #0]
    b066:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b068:	f107 0310 	add.w	r3, r7, #16
    b06c:	2200      	movs	r2, #0
    b06e:	601a      	str	r2, [r3, #0]
    b070:	605a      	str	r2, [r3, #4]
    b072:	609a      	str	r2, [r3, #8]
    b074:	60da      	str	r2, [r3, #12]
    b076:	611a      	str	r2, [r3, #16]
    b078:	615a      	str	r2, [r3, #20]
    b07a:	7afb      	ldrb	r3, [r7, #11]
    b07c:	f003 0307 	and.w	r3, r3, #7
    b080:	b2da      	uxtb	r2, r3
    b082:	7c3b      	ldrb	r3, [r7, #16]
    b084:	f362 0302 	bfi	r3, r2, #0, #3
    b088:	743b      	strb	r3, [r7, #16]
    b08a:	7c3b      	ldrb	r3, [r7, #16]
    b08c:	f043 0310 	orr.w	r3, r3, #16
    b090:	743b      	strb	r3, [r7, #16]
    b092:	7c3b      	ldrb	r3, [r7, #16]
    b094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b098:	743b      	strb	r3, [r7, #16]
    b09a:	7c7b      	ldrb	r3, [r7, #17]
    b09c:	2202      	movs	r2, #2
    b09e:	f362 1305 	bfi	r3, r2, #4, #2
    b0a2:	747b      	strb	r3, [r7, #17]
    b0a4:	7abb      	ldrb	r3, [r7, #10]
    b0a6:	753b      	strb	r3, [r7, #20]
    b0a8:	2301      	movs	r3, #1
    b0aa:	61fb      	str	r3, [r7, #28]
    b0ac:	1d3b      	adds	r3, r7, #4
    b0ae:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0b2:	7b5b      	ldrb	r3, [r3, #13]
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d003      	beq.n	b0c0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b0b8:	2100      	movs	r1, #0
    b0ba:	68f8      	ldr	r0, [r7, #12]
    b0bc:	4b09      	ldr	r3, [pc, #36]	; (b0e4 <n25q256a_write_reg+0x98>)
    b0be:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b0c0:	f107 0310 	add.w	r3, r7, #16
    b0c4:	4619      	mov	r1, r3
    b0c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b0c8:	4b07      	ldr	r3, [pc, #28]	; (b0e8 <n25q256a_write_reg+0x9c>)
    b0ca:	4798      	blx	r3
	if (n25q->xip_mode) {
    b0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0ce:	7b5b      	ldrb	r3, [r3, #13]
    b0d0:	2b00      	cmp	r3, #0
    b0d2:	d003      	beq.n	b0dc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b0d4:	2101      	movs	r1, #1
    b0d6:	68f8      	ldr	r0, [r7, #12]
    b0d8:	4b02      	ldr	r3, [pc, #8]	; (b0e4 <n25q256a_write_reg+0x98>)
    b0da:	4798      	blx	r3
	}
}
    b0dc:	bf00      	nop
    b0de:	3730      	adds	r7, #48	; 0x30
    b0e0:	46bd      	mov	sp, r7
    b0e2:	bd80      	pop	{r7, pc}
    b0e4:	0000aee5 	.word	0x0000aee5
    b0e8:	0000238d 	.word	0x0000238d

0000b0ec <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b0ec:	b580      	push	{r7, lr}
    b0ee:	b090      	sub	sp, #64	; 0x40
    b0f0:	af00      	add	r7, sp, #0
    b0f2:	6078      	str	r0, [r7, #4]
    b0f4:	460b      	mov	r3, r1
    b0f6:	70fb      	strb	r3, [r7, #3]
    b0f8:	4613      	mov	r3, r2
    b0fa:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b0fc:	687b      	ldr	r3, [r7, #4]
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b102:	78bb      	ldrb	r3, [r7, #2]
    b104:	2b00      	cmp	r3, #0
    b106:	d001      	beq.n	b10c <n25q256a_write_enable+0x20>
    b108:	2306      	movs	r3, #6
    b10a:	e000      	b.n	b10e <n25q256a_write_enable+0x22>
    b10c:	2304      	movs	r3, #4
    b10e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b112:	f107 0320 	add.w	r3, r7, #32
    b116:	2200      	movs	r2, #0
    b118:	601a      	str	r2, [r3, #0]
    b11a:	605a      	str	r2, [r3, #4]
    b11c:	609a      	str	r2, [r3, #8]
    b11e:	60da      	str	r2, [r3, #12]
    b120:	611a      	str	r2, [r3, #16]
    b122:	615a      	str	r2, [r3, #20]
    b124:	78fb      	ldrb	r3, [r7, #3]
    b126:	f003 0307 	and.w	r3, r3, #7
    b12a:	b2da      	uxtb	r2, r3
    b12c:	f897 3020 	ldrb.w	r3, [r7, #32]
    b130:	f362 0302 	bfi	r3, r2, #0, #3
    b134:	f887 3020 	strb.w	r3, [r7, #32]
    b138:	f897 3020 	ldrb.w	r3, [r7, #32]
    b13c:	f043 0310 	orr.w	r3, r3, #16
    b140:	f887 3020 	strb.w	r3, [r7, #32]
    b144:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b148:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b14c:	f107 0308 	add.w	r3, r7, #8
    b150:	2200      	movs	r2, #0
    b152:	601a      	str	r2, [r3, #0]
    b154:	605a      	str	r2, [r3, #4]
    b156:	609a      	str	r2, [r3, #8]
    b158:	60da      	str	r2, [r3, #12]
    b15a:	611a      	str	r2, [r3, #16]
    b15c:	615a      	str	r2, [r3, #20]
    b15e:	78fb      	ldrb	r3, [r7, #3]
    b160:	f003 0307 	and.w	r3, r3, #7
    b164:	b2da      	uxtb	r2, r3
    b166:	7a3b      	ldrb	r3, [r7, #8]
    b168:	f362 0302 	bfi	r3, r2, #0, #3
    b16c:	723b      	strb	r3, [r7, #8]
    b16e:	7a3b      	ldrb	r3, [r7, #8]
    b170:	f043 0310 	orr.w	r3, r3, #16
    b174:	723b      	strb	r3, [r7, #8]
    b176:	7a3b      	ldrb	r3, [r7, #8]
    b178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b17c:	723b      	strb	r3, [r7, #8]
    b17e:	2305      	movs	r3, #5
    b180:	733b      	strb	r3, [r7, #12]
    b182:	2301      	movs	r3, #1
    b184:	617b      	str	r3, [r7, #20]
    b186:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b18a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b18c:	f107 0320 	add.w	r3, r7, #32
    b190:	4619      	mov	r1, r3
    b192:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b194:	4b08      	ldr	r3, [pc, #32]	; (b1b8 <n25q256a_write_enable+0xcc>)
    b196:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b198:	f107 0308 	add.w	r3, r7, #8
    b19c:	4619      	mov	r1, r3
    b19e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b1a0:	4b05      	ldr	r3, [pc, #20]	; (b1b8 <n25q256a_write_enable+0xcc>)
    b1a2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b1a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b1a8:	f003 0302 	and.w	r3, r3, #2
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d0ed      	beq.n	b18c <n25q256a_write_enable+0xa0>
}
    b1b0:	bf00      	nop
    b1b2:	3740      	adds	r7, #64	; 0x40
    b1b4:	46bd      	mov	sp, r7
    b1b6:	bd80      	pop	{r7, pc}
    b1b8:	0000238d 	.word	0x0000238d

0000b1bc <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b1bc:	b590      	push	{r4, r7, lr}
    b1be:	b087      	sub	sp, #28
    b1c0:	af00      	add	r7, sp, #0
    b1c2:	6078      	str	r0, [r7, #4]
    b1c4:	460b      	mov	r3, r1
    b1c6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b1c8:	687b      	ldr	r3, [r7, #4]
    b1ca:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b1cc:	68fb      	ldr	r3, [r7, #12]
    b1ce:	7b1b      	ldrb	r3, [r3, #12]
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d001      	beq.n	b1d8 <n25q256a_switch_mode+0x1c>
    b1d4:	2306      	movs	r3, #6
    b1d6:	e000      	b.n	b1da <n25q256a_switch_mode+0x1e>
    b1d8:	2300      	movs	r3, #0
    b1da:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b1dc:	7afb      	ldrb	r3, [r7, #11]
    b1de:	2265      	movs	r2, #101	; 0x65
    b1e0:	4619      	mov	r1, r3
    b1e2:	6878      	ldr	r0, [r7, #4]
    b1e4:	4b25      	ldr	r3, [pc, #148]	; (b27c <n25q256a_switch_mode+0xc0>)
    b1e6:	4798      	blx	r3
    b1e8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b1ea:	2300      	movs	r3, #0
    b1ec:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b1ee:	68fb      	ldr	r3, [r7, #12]
    b1f0:	7b1b      	ldrb	r3, [r3, #12]
    b1f2:	78fa      	ldrb	r2, [r7, #3]
    b1f4:	429a      	cmp	r2, r3
    b1f6:	d03d      	beq.n	b274 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b1f8:	78fb      	ldrb	r3, [r7, #3]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d00b      	beq.n	b216 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b1fe:	697b      	ldr	r3, [r7, #20]
    b200:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b204:	2b00      	cmp	r3, #0
    b206:	d011      	beq.n	b22c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b208:	697b      	ldr	r3, [r7, #20]
    b20a:	f003 031f 	and.w	r3, r3, #31
    b20e:	617b      	str	r3, [r7, #20]
			modify = 1;
    b210:	2301      	movs	r3, #1
    b212:	74fb      	strb	r3, [r7, #19]
    b214:	e00a      	b.n	b22c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b216:	697b      	ldr	r3, [r7, #20]
    b218:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b21c:	2b00      	cmp	r3, #0
    b21e:	d105      	bne.n	b22c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b220:	697b      	ldr	r3, [r7, #20]
    b222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b226:	617b      	str	r3, [r7, #20]
			modify = 1;
    b228:	2301      	movs	r3, #1
    b22a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b22c:	7cfb      	ldrb	r3, [r7, #19]
    b22e:	2b00      	cmp	r3, #0
    b230:	d021      	beq.n	b276 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b232:	68fb      	ldr	r3, [r7, #12]
    b234:	78fa      	ldrb	r2, [r7, #3]
    b236:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b238:	7afb      	ldrb	r3, [r7, #11]
    b23a:	2201      	movs	r2, #1
    b23c:	4619      	mov	r1, r3
    b23e:	6878      	ldr	r0, [r7, #4]
    b240:	4b0f      	ldr	r3, [pc, #60]	; (b280 <n25q256a_switch_mode+0xc4>)
    b242:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b244:	7af9      	ldrb	r1, [r7, #11]
    b246:	697b      	ldr	r3, [r7, #20]
    b248:	2261      	movs	r2, #97	; 0x61
    b24a:	6878      	ldr	r0, [r7, #4]
    b24c:	4c0d      	ldr	r4, [pc, #52]	; (b284 <n25q256a_switch_mode+0xc8>)
    b24e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b250:	78fb      	ldrb	r3, [r7, #3]
    b252:	2b00      	cmp	r3, #0
    b254:	d001      	beq.n	b25a <n25q256a_switch_mode+0x9e>
    b256:	2306      	movs	r3, #6
    b258:	e000      	b.n	b25c <n25q256a_switch_mode+0xa0>
    b25a:	2300      	movs	r3, #0
    b25c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b25e:	7afb      	ldrb	r3, [r7, #11]
    b260:	2265      	movs	r2, #101	; 0x65
    b262:	4619      	mov	r1, r3
    b264:	6878      	ldr	r0, [r7, #4]
    b266:	4b05      	ldr	r3, [pc, #20]	; (b27c <n25q256a_switch_mode+0xc0>)
    b268:	4798      	blx	r3
    b26a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b26c:	68fb      	ldr	r3, [r7, #12]
    b26e:	78fa      	ldrb	r2, [r7, #3]
    b270:	731a      	strb	r2, [r3, #12]
    b272:	e000      	b.n	b276 <n25q256a_switch_mode+0xba>
		return;
    b274:	bf00      	nop
	}
}
    b276:	371c      	adds	r7, #28
    b278:	46bd      	mov	sp, r7
    b27a:	bd90      	pop	{r4, r7, pc}
    b27c:	0000afb1 	.word	0x0000afb1
    b280:	0000b0ed 	.word	0x0000b0ed
    b284:	0000b04d 	.word	0x0000b04d

0000b288 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b288:	b580      	push	{r7, lr}
    b28a:	b086      	sub	sp, #24
    b28c:	af00      	add	r7, sp, #0
    b28e:	60f8      	str	r0, [r7, #12]
    b290:	60b9      	str	r1, [r7, #8]
    b292:	607a      	str	r2, [r7, #4]
    b294:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b296:	68fb      	ldr	r3, [r7, #12]
    b298:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b29a:	4a0c      	ldr	r2, [pc, #48]	; (b2cc <n25q256a_construct+0x44>)
    b29c:	68b9      	ldr	r1, [r7, #8]
    b29e:	68f8      	ldr	r0, [r7, #12]
    b2a0:	4b0b      	ldr	r3, [pc, #44]	; (b2d0 <n25q256a_construct+0x48>)
    b2a2:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b2a4:	697b      	ldr	r3, [r7, #20]
    b2a6:	2200      	movs	r2, #0
    b2a8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b2aa:	697b      	ldr	r3, [r7, #20]
    b2ac:	2200      	movs	r2, #0
    b2ae:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b2b0:	697b      	ldr	r3, [r7, #20]
    b2b2:	687a      	ldr	r2, [r7, #4]
    b2b4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b2b6:	78fb      	ldrb	r3, [r7, #3]
    b2b8:	4619      	mov	r1, r3
    b2ba:	68f8      	ldr	r0, [r7, #12]
    b2bc:	4b05      	ldr	r3, [pc, #20]	; (b2d4 <n25q256a_construct+0x4c>)
    b2be:	4798      	blx	r3
	return me;
    b2c0:	68fb      	ldr	r3, [r7, #12]
}
    b2c2:	4618      	mov	r0, r3
    b2c4:	3718      	adds	r7, #24
    b2c6:	46bd      	mov	sp, r7
    b2c8:	bd80      	pop	{r7, pc}
    b2ca:	bf00      	nop
    b2cc:	0000effc 	.word	0x0000effc
    b2d0:	0000b765 	.word	0x0000b765
    b2d4:	0000b1bd 	.word	0x0000b1bd

0000b2d8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b2d8:	b580      	push	{r7, lr}
    b2da:	b08c      	sub	sp, #48	; 0x30
    b2dc:	af00      	add	r7, sp, #0
    b2de:	60f8      	str	r0, [r7, #12]
    b2e0:	60b9      	str	r1, [r7, #8]
    b2e2:	607a      	str	r2, [r7, #4]
    b2e4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b2e6:	68fb      	ldr	r3, [r7, #12]
    b2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b2ea:	68fb      	ldr	r3, [r7, #12]
    b2ec:	681b      	ldr	r3, [r3, #0]
    b2ee:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b2f0:	f107 0310 	add.w	r3, r7, #16
    b2f4:	2200      	movs	r2, #0
    b2f6:	601a      	str	r2, [r3, #0]
    b2f8:	605a      	str	r2, [r3, #4]
    b2fa:	609a      	str	r2, [r3, #8]
    b2fc:	60da      	str	r2, [r3, #12]
    b2fe:	611a      	str	r2, [r3, #16]
    b300:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b304:	7b1b      	ldrb	r3, [r3, #12]
    b306:	2b00      	cmp	r3, #0
    b308:	d001      	beq.n	b30e <n25q256a_read+0x36>
    b30a:	2206      	movs	r2, #6
    b30c:	e000      	b.n	b310 <n25q256a_read+0x38>
    b30e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b310:	7c3b      	ldrb	r3, [r7, #16]
    b312:	f362 0302 	bfi	r3, r2, #0, #3
    b316:	743b      	strb	r3, [r7, #16]
    b318:	7c3b      	ldrb	r3, [r7, #16]
    b31a:	f043 0310 	orr.w	r3, r3, #16
    b31e:	743b      	strb	r3, [r7, #16]
    b320:	7c3b      	ldrb	r3, [r7, #16]
    b322:	f043 0320 	orr.w	r3, r3, #32
    b326:	743b      	strb	r3, [r7, #16]
    b328:	7c3b      	ldrb	r3, [r7, #16]
    b32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b32e:	743b      	strb	r3, [r7, #16]
    b330:	7c7b      	ldrb	r3, [r7, #17]
    b332:	2201      	movs	r2, #1
    b334:	f362 1305 	bfi	r3, r2, #4, #2
    b338:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b33c:	7b1b      	ldrb	r3, [r3, #12]
    b33e:	2b00      	cmp	r3, #0
    b340:	d001      	beq.n	b346 <n25q256a_read+0x6e>
    b342:	220a      	movs	r2, #10
    b344:	e000      	b.n	b348 <n25q256a_read+0x70>
    b346:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b348:	7cbb      	ldrb	r3, [r7, #18]
    b34a:	f362 0304 	bfi	r3, r2, #0, #5
    b34e:	74bb      	strb	r3, [r7, #18]
    b350:	230b      	movs	r3, #11
    b352:	753b      	strb	r3, [r7, #20]
    b354:	687b      	ldr	r3, [r7, #4]
    b356:	61bb      	str	r3, [r7, #24]
    b358:	683b      	ldr	r3, [r7, #0]
    b35a:	61fb      	str	r3, [r7, #28]
    b35c:	68bb      	ldr	r3, [r7, #8]
    b35e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b360:	f107 0310 	add.w	r3, r7, #16
    b364:	4619      	mov	r1, r3
    b366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b368:	4b03      	ldr	r3, [pc, #12]	; (b378 <n25q256a_read+0xa0>)
    b36a:	4798      	blx	r3
	return ERR_NONE;
    b36c:	2300      	movs	r3, #0
}
    b36e:	4618      	mov	r0, r3
    b370:	3730      	adds	r7, #48	; 0x30
    b372:	46bd      	mov	sp, r7
    b374:	bd80      	pop	{r7, pc}
    b376:	bf00      	nop
    b378:	0000238d 	.word	0x0000238d

0000b37c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b37c:	b580      	push	{r7, lr}
    b37e:	b08c      	sub	sp, #48	; 0x30
    b380:	af00      	add	r7, sp, #0
    b382:	60f8      	str	r0, [r7, #12]
    b384:	60b9      	str	r1, [r7, #8]
    b386:	607a      	str	r2, [r7, #4]
    b388:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b38a:	68fb      	ldr	r3, [r7, #12]
    b38c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b38e:	68fb      	ldr	r3, [r7, #12]
    b390:	681b      	ldr	r3, [r3, #0]
    b392:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b394:	f107 0310 	add.w	r3, r7, #16
    b398:	2200      	movs	r2, #0
    b39a:	601a      	str	r2, [r3, #0]
    b39c:	605a      	str	r2, [r3, #4]
    b39e:	609a      	str	r2, [r3, #8]
    b3a0:	60da      	str	r2, [r3, #12]
    b3a2:	611a      	str	r2, [r3, #16]
    b3a4:	615a      	str	r2, [r3, #20]
    b3a6:	7c3b      	ldrb	r3, [r7, #16]
    b3a8:	f043 0310 	orr.w	r3, r3, #16
    b3ac:	743b      	strb	r3, [r7, #16]
    b3ae:	7c3b      	ldrb	r3, [r7, #16]
    b3b0:	f043 0320 	orr.w	r3, r3, #32
    b3b4:	743b      	strb	r3, [r7, #16]
    b3b6:	7c3b      	ldrb	r3, [r7, #16]
    b3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3bc:	743b      	strb	r3, [r7, #16]
    b3be:	7c7b      	ldrb	r3, [r7, #17]
    b3c0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b3c4:	747b      	strb	r3, [r7, #17]
    b3c6:	2302      	movs	r3, #2
    b3c8:	753b      	strb	r3, [r7, #20]
    b3ca:	687b      	ldr	r3, [r7, #4]
    b3cc:	61bb      	str	r3, [r7, #24]
    b3ce:	683b      	ldr	r3, [r7, #0]
    b3d0:	61fb      	str	r3, [r7, #28]
    b3d2:	68bb      	ldr	r3, [r7, #8]
    b3d4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3d8:	7b1b      	ldrb	r3, [r3, #12]
    b3da:	2b00      	cmp	r3, #0
    b3dc:	d001      	beq.n	b3e2 <n25q256a_write+0x66>
    b3de:	2206      	movs	r2, #6
    b3e0:	e000      	b.n	b3e4 <n25q256a_write+0x68>
    b3e2:	2200      	movs	r2, #0
    b3e4:	7c3b      	ldrb	r3, [r7, #16]
    b3e6:	f362 0302 	bfi	r3, r2, #0, #3
    b3ea:	743b      	strb	r3, [r7, #16]
	while (length) {
    b3ec:	e035      	b.n	b45a <n25q256a_write+0xde>
		cmd.address = address;
    b3ee:	687b      	ldr	r3, [r7, #4]
    b3f0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b3f2:	683b      	ldr	r3, [r7, #0]
    b3f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b3f8:	d802      	bhi.n	b400 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b3fa:	683b      	ldr	r3, [r7, #0]
    b3fc:	61fb      	str	r3, [r7, #28]
    b3fe:	e002      	b.n	b406 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b400:	f44f 7380 	mov.w	r3, #256	; 0x100
    b404:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b406:	7c3b      	ldrb	r3, [r7, #16]
    b408:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b40c:	b2db      	uxtb	r3, r3
    b40e:	2201      	movs	r2, #1
    b410:	4619      	mov	r1, r3
    b412:	68f8      	ldr	r0, [r7, #12]
    b414:	4b19      	ldr	r3, [pc, #100]	; (b47c <n25q256a_write+0x100>)
    b416:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b418:	f107 0310 	add.w	r3, r7, #16
    b41c:	4619      	mov	r1, r3
    b41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b420:	4b17      	ldr	r3, [pc, #92]	; (b480 <n25q256a_write+0x104>)
    b422:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b424:	bf00      	nop
    b426:	7c3b      	ldrb	r3, [r7, #16]
    b428:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b42c:	b2db      	uxtb	r3, r3
    b42e:	2270      	movs	r2, #112	; 0x70
    b430:	4619      	mov	r1, r3
    b432:	68f8      	ldr	r0, [r7, #12]
    b434:	4b13      	ldr	r3, [pc, #76]	; (b484 <n25q256a_write+0x108>)
    b436:	4798      	blx	r3
    b438:	4603      	mov	r3, r0
    b43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b43e:	2b00      	cmp	r3, #0
    b440:	d0f1      	beq.n	b426 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b442:	6a3a      	ldr	r2, [r7, #32]
    b444:	69fb      	ldr	r3, [r7, #28]
    b446:	4413      	add	r3, r2
    b448:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b44a:	69fb      	ldr	r3, [r7, #28]
    b44c:	683a      	ldr	r2, [r7, #0]
    b44e:	1ad3      	subs	r3, r2, r3
    b450:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b452:	69fb      	ldr	r3, [r7, #28]
    b454:	687a      	ldr	r2, [r7, #4]
    b456:	4413      	add	r3, r2
    b458:	607b      	str	r3, [r7, #4]
	while (length) {
    b45a:	683b      	ldr	r3, [r7, #0]
    b45c:	2b00      	cmp	r3, #0
    b45e:	d1c6      	bne.n	b3ee <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b462:	7b5b      	ldrb	r3, [r3, #13]
    b464:	2b00      	cmp	r3, #0
    b466:	d003      	beq.n	b470 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b468:	2101      	movs	r1, #1
    b46a:	68f8      	ldr	r0, [r7, #12]
    b46c:	4b06      	ldr	r3, [pc, #24]	; (b488 <n25q256a_write+0x10c>)
    b46e:	4798      	blx	r3
	}
	return ERR_NONE;
    b470:	2300      	movs	r3, #0
}
    b472:	4618      	mov	r0, r3
    b474:	3730      	adds	r7, #48	; 0x30
    b476:	46bd      	mov	sp, r7
    b478:	bd80      	pop	{r7, pc}
    b47a:	bf00      	nop
    b47c:	0000b0ed 	.word	0x0000b0ed
    b480:	0000238d 	.word	0x0000238d
    b484:	0000afb1 	.word	0x0000afb1
    b488:	0000aee5 	.word	0x0000aee5

0000b48c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b48c:	b580      	push	{r7, lr}
    b48e:	b090      	sub	sp, #64	; 0x40
    b490:	af00      	add	r7, sp, #0
    b492:	60f8      	str	r0, [r7, #12]
    b494:	60b9      	str	r1, [r7, #8]
    b496:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b498:	68fb      	ldr	r3, [r7, #12]
    b49a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b49c:	68fb      	ldr	r3, [r7, #12]
    b49e:	681b      	ldr	r3, [r3, #0]
    b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b4a2:	f107 0314 	add.w	r3, r7, #20
    b4a6:	2200      	movs	r2, #0
    b4a8:	601a      	str	r2, [r3, #0]
    b4aa:	605a      	str	r2, [r3, #4]
    b4ac:	609a      	str	r2, [r3, #8]
    b4ae:	60da      	str	r2, [r3, #12]
    b4b0:	611a      	str	r2, [r3, #16]
    b4b2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b4b6:	7b1b      	ldrb	r3, [r3, #12]
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d001      	beq.n	b4c0 <n25q256a_erase+0x34>
    b4bc:	2206      	movs	r2, #6
    b4be:	e000      	b.n	b4c2 <n25q256a_erase+0x36>
    b4c0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b4c2:	7d3b      	ldrb	r3, [r7, #20]
    b4c4:	f362 0302 	bfi	r3, r2, #0, #3
    b4c8:	753b      	strb	r3, [r7, #20]
    b4ca:	7d3b      	ldrb	r3, [r7, #20]
    b4cc:	f043 0310 	orr.w	r3, r3, #16
    b4d0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	4a56      	ldr	r2, [pc, #344]	; (b630 <n25q256a_erase+0x1a4>)
    b4d6:	4293      	cmp	r3, r2
    b4d8:	bf94      	ite	ls
    b4da:	2301      	movls	r3, #1
    b4dc:	2300      	movhi	r3, #0
    b4de:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b4e0:	7d3b      	ldrb	r3, [r7, #20]
    b4e2:	f362 1345 	bfi	r3, r2, #5, #1
    b4e6:	753b      	strb	r3, [r7, #20]
    b4e8:	7d7b      	ldrb	r3, [r7, #21]
    b4ea:	2202      	movs	r2, #2
    b4ec:	f362 1305 	bfi	r3, r2, #4, #2
    b4f0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b4f2:	68bb      	ldr	r3, [r7, #8]
    b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b4f6:	687b      	ldr	r3, [r7, #4]
    b4f8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b4fa:	2300      	movs	r3, #0
    b4fc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b4fe:	687b      	ldr	r3, [r7, #4]
    b500:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b504:	2b00      	cmp	r3, #0
    b506:	d104      	bne.n	b512 <n25q256a_erase+0x86>
    b508:	68bb      	ldr	r3, [r7, #8]
    b50a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b50e:	2b00      	cmp	r3, #0
    b510:	d002      	beq.n	b518 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b512:	f06f 030c 	mvn.w	r3, #12
    b516:	e087      	b.n	b628 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b518:	687b      	ldr	r3, [r7, #4]
    b51a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b51e:	d368      	bcc.n	b5f2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b520:	23c7      	movs	r3, #199	; 0xc7
    b522:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b524:	7d3b      	ldrb	r3, [r7, #20]
    b526:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b52a:	b2db      	uxtb	r3, r3
    b52c:	2201      	movs	r2, #1
    b52e:	4619      	mov	r1, r3
    b530:	68f8      	ldr	r0, [r7, #12]
    b532:	4b40      	ldr	r3, [pc, #256]	; (b634 <n25q256a_erase+0x1a8>)
    b534:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b536:	f107 0314 	add.w	r3, r7, #20
    b53a:	4619      	mov	r1, r3
    b53c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b53e:	4b3e      	ldr	r3, [pc, #248]	; (b638 <n25q256a_erase+0x1ac>)
    b540:	4798      	blx	r3
    b542:	e059      	b.n	b5f8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b546:	b29b      	uxth	r3, r3
    b548:	2b00      	cmp	r3, #0
    b54a:	d11f      	bne.n	b58c <n25q256a_erase+0x100>
    b54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b552:	d31b      	bcc.n	b58c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b556:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b558:	23d8      	movs	r3, #216	; 0xd8
    b55a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b55c:	7d3b      	ldrb	r3, [r7, #20]
    b55e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b562:	b2db      	uxtb	r3, r3
    b564:	2201      	movs	r2, #1
    b566:	4619      	mov	r1, r3
    b568:	68f8      	ldr	r0, [r7, #12]
    b56a:	4b32      	ldr	r3, [pc, #200]	; (b634 <n25q256a_erase+0x1a8>)
    b56c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b56e:	f107 0314 	add.w	r3, r7, #20
    b572:	4619      	mov	r1, r3
    b574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b576:	4b30      	ldr	r3, [pc, #192]	; (b638 <n25q256a_erase+0x1ac>)
    b578:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b57a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b57c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b580:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b584:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b588:	63bb      	str	r3, [r7, #56]	; 0x38
    b58a:	e023      	b.n	b5d4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b592:	d31b      	bcc.n	b5cc <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b596:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b598:	2320      	movs	r3, #32
    b59a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b59c:	7d3b      	ldrb	r3, [r7, #20]
    b59e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b5a2:	b2db      	uxtb	r3, r3
    b5a4:	2201      	movs	r2, #1
    b5a6:	4619      	mov	r1, r3
    b5a8:	68f8      	ldr	r0, [r7, #12]
    b5aa:	4b22      	ldr	r3, [pc, #136]	; (b634 <n25q256a_erase+0x1a8>)
    b5ac:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b5ae:	f107 0314 	add.w	r3, r7, #20
    b5b2:	4619      	mov	r1, r3
    b5b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b5b6:	4b20      	ldr	r3, [pc, #128]	; (b638 <n25q256a_erase+0x1ac>)
    b5b8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b5c4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b5c8:	63bb      	str	r3, [r7, #56]	; 0x38
    b5ca:	e003      	b.n	b5d4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b5cc:	f06f 030c 	mvn.w	r3, #12
    b5d0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b5d2:	e011      	b.n	b5f8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b5d4:	bf00      	nop
    b5d6:	7d3b      	ldrb	r3, [r7, #20]
    b5d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b5dc:	b2db      	uxtb	r3, r3
    b5de:	2270      	movs	r2, #112	; 0x70
    b5e0:	4619      	mov	r1, r3
    b5e2:	68f8      	ldr	r0, [r7, #12]
    b5e4:	4b15      	ldr	r3, [pc, #84]	; (b63c <n25q256a_erase+0x1b0>)
    b5e6:	4798      	blx	r3
    b5e8:	4603      	mov	r3, r0
    b5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d0f1      	beq.n	b5d6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b5f4:	2b00      	cmp	r3, #0
    b5f6:	d1a5      	bne.n	b544 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b5f8:	bf00      	nop
    b5fa:	7d3b      	ldrb	r3, [r7, #20]
    b5fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b600:	b2db      	uxtb	r3, r3
    b602:	2270      	movs	r2, #112	; 0x70
    b604:	4619      	mov	r1, r3
    b606:	68f8      	ldr	r0, [r7, #12]
    b608:	4b0c      	ldr	r3, [pc, #48]	; (b63c <n25q256a_erase+0x1b0>)
    b60a:	4798      	blx	r3
    b60c:	4603      	mov	r3, r0
    b60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b612:	2b00      	cmp	r3, #0
    b614:	d0f1      	beq.n	b5fa <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b618:	7b5b      	ldrb	r3, [r3, #13]
    b61a:	2b00      	cmp	r3, #0
    b61c:	d003      	beq.n	b626 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b61e:	2101      	movs	r1, #1
    b620:	68f8      	ldr	r0, [r7, #12]
    b622:	4b07      	ldr	r3, [pc, #28]	; (b640 <n25q256a_erase+0x1b4>)
    b624:	4798      	blx	r3
	}
	return rc;
    b626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b628:	4618      	mov	r0, r3
    b62a:	3740      	adds	r7, #64	; 0x40
    b62c:	46bd      	mov	sp, r7
    b62e:	bd80      	pop	{r7, pc}
    b630:	001fffff 	.word	0x001fffff
    b634:	0000b0ed 	.word	0x0000b0ed
    b638:	0000238d 	.word	0x0000238d
    b63c:	0000afb1 	.word	0x0000afb1
    b640:	0000aee5 	.word	0x0000aee5

0000b644 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b644:	b590      	push	{r4, r7, lr}
    b646:	b085      	sub	sp, #20
    b648:	af00      	add	r7, sp, #0
    b64a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b64c:	687b      	ldr	r3, [r7, #4]
    b64e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b650:	68fb      	ldr	r3, [r7, #12]
    b652:	7b1b      	ldrb	r3, [r3, #12]
    b654:	2b00      	cmp	r3, #0
    b656:	d001      	beq.n	b65c <n25q256a_enable_xip+0x18>
    b658:	2306      	movs	r3, #6
    b65a:	e000      	b.n	b65e <n25q256a_enable_xip+0x1a>
    b65c:	2300      	movs	r3, #0
    b65e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b660:	68fb      	ldr	r3, [r7, #12]
    b662:	7b5b      	ldrb	r3, [r3, #13]
    b664:	2b00      	cmp	r3, #0
    b666:	d129      	bne.n	b6bc <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b668:	7afb      	ldrb	r3, [r7, #11]
    b66a:	2285      	movs	r2, #133	; 0x85
    b66c:	4619      	mov	r1, r3
    b66e:	6878      	ldr	r0, [r7, #4]
    b670:	4b15      	ldr	r3, [pc, #84]	; (b6c8 <n25q256a_enable_xip+0x84>)
    b672:	4798      	blx	r3
    b674:	4603      	mov	r3, r0
    b676:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b678:	7abb      	ldrb	r3, [r7, #10]
    b67a:	f003 0308 	and.w	r3, r3, #8
    b67e:	2b00      	cmp	r3, #0
    b680:	d015      	beq.n	b6ae <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b682:	7abb      	ldrb	r3, [r7, #10]
    b684:	f023 0308 	bic.w	r3, r3, #8
    b688:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b68a:	7abb      	ldrb	r3, [r7, #10]
    b68c:	7af9      	ldrb	r1, [r7, #11]
    b68e:	2281      	movs	r2, #129	; 0x81
    b690:	6878      	ldr	r0, [r7, #4]
    b692:	4c0e      	ldr	r4, [pc, #56]	; (b6cc <n25q256a_enable_xip+0x88>)
    b694:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b696:	bf00      	nop
    b698:	7afb      	ldrb	r3, [r7, #11]
    b69a:	2270      	movs	r2, #112	; 0x70
    b69c:	4619      	mov	r1, r3
    b69e:	6878      	ldr	r0, [r7, #4]
    b6a0:	4b09      	ldr	r3, [pc, #36]	; (b6c8 <n25q256a_enable_xip+0x84>)
    b6a2:	4798      	blx	r3
    b6a4:	4603      	mov	r3, r0
    b6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d0f4      	beq.n	b698 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b6ae:	68fb      	ldr	r3, [r7, #12]
    b6b0:	2201      	movs	r2, #1
    b6b2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b6b4:	2101      	movs	r1, #1
    b6b6:	6878      	ldr	r0, [r7, #4]
    b6b8:	4b05      	ldr	r3, [pc, #20]	; (b6d0 <n25q256a_enable_xip+0x8c>)
    b6ba:	4798      	blx	r3
	}
	return ERR_NONE;
    b6bc:	2300      	movs	r3, #0
}
    b6be:	4618      	mov	r0, r3
    b6c0:	3714      	adds	r7, #20
    b6c2:	46bd      	mov	sp, r7
    b6c4:	bd90      	pop	{r4, r7, pc}
    b6c6:	bf00      	nop
    b6c8:	0000afb1 	.word	0x0000afb1
    b6cc:	0000b04d 	.word	0x0000b04d
    b6d0:	0000aee5 	.word	0x0000aee5

0000b6d4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b6d4:	b580      	push	{r7, lr}
    b6d6:	b086      	sub	sp, #24
    b6d8:	af00      	add	r7, sp, #0
    b6da:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b6dc:	687b      	ldr	r3, [r7, #4]
    b6de:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	681b      	ldr	r3, [r3, #0]
    b6e4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b6e6:	697b      	ldr	r3, [r7, #20]
    b6e8:	7b1b      	ldrb	r3, [r3, #12]
    b6ea:	2b00      	cmp	r3, #0
    b6ec:	d001      	beq.n	b6f2 <n25q256a_disable_xip+0x1e>
    b6ee:	2306      	movs	r3, #6
    b6f0:	e000      	b.n	b6f4 <n25q256a_disable_xip+0x20>
    b6f2:	2300      	movs	r3, #0
    b6f4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b6f6:	2100      	movs	r1, #0
    b6f8:	6878      	ldr	r0, [r7, #4]
    b6fa:	4b15      	ldr	r3, [pc, #84]	; (b750 <n25q256a_disable_xip+0x7c>)
    b6fc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b6fe:	7bfb      	ldrb	r3, [r7, #15]
    b700:	2285      	movs	r2, #133	; 0x85
    b702:	4619      	mov	r1, r3
    b704:	6878      	ldr	r0, [r7, #4]
    b706:	4b13      	ldr	r3, [pc, #76]	; (b754 <n25q256a_disable_xip+0x80>)
    b708:	4798      	blx	r3
    b70a:	4603      	mov	r3, r0
    b70c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b70e:	7bbb      	ldrb	r3, [r7, #14]
    b710:	f003 0308 	and.w	r3, r3, #8
    b714:	2b00      	cmp	r3, #0
    b716:	d113      	bne.n	b740 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b718:	697b      	ldr	r3, [r7, #20]
    b71a:	689b      	ldr	r3, [r3, #8]
    b71c:	2b00      	cmp	r3, #0
    b71e:	d00f      	beq.n	b740 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b720:	693b      	ldr	r3, [r7, #16]
    b722:	681b      	ldr	r3, [r3, #0]
    b724:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b726:	6938      	ldr	r0, [r7, #16]
    b728:	4b0b      	ldr	r3, [pc, #44]	; (b758 <n25q256a_disable_xip+0x84>)
    b72a:	4798      	blx	r3
			n25q->pin_exit_xip();
    b72c:	697b      	ldr	r3, [r7, #20]
    b72e:	689b      	ldr	r3, [r3, #8]
    b730:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b732:	68b9      	ldr	r1, [r7, #8]
    b734:	6938      	ldr	r0, [r7, #16]
    b736:	4b09      	ldr	r3, [pc, #36]	; (b75c <n25q256a_disable_xip+0x88>)
    b738:	4798      	blx	r3
			qspi_sync_enable(descr);
    b73a:	6938      	ldr	r0, [r7, #16]
    b73c:	4b08      	ldr	r3, [pc, #32]	; (b760 <n25q256a_disable_xip+0x8c>)
    b73e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b740:	697b      	ldr	r3, [r7, #20]
    b742:	2200      	movs	r2, #0
    b744:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b746:	2300      	movs	r3, #0
}
    b748:	4618      	mov	r0, r3
    b74a:	3718      	adds	r7, #24
    b74c:	46bd      	mov	sp, r7
    b74e:	bd80      	pop	{r7, pc}
    b750:	0000aee5 	.word	0x0000aee5
    b754:	0000afb1 	.word	0x0000afb1
    b758:	00002351 	.word	0x00002351
    b75c:	000022c9 	.word	0x000022c9
    b760:	00002315 	.word	0x00002315

0000b764 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b764:	b480      	push	{r7}
    b766:	b085      	sub	sp, #20
    b768:	af00      	add	r7, sp, #0
    b76a:	60f8      	str	r0, [r7, #12]
    b76c:	60b9      	str	r1, [r7, #8]
    b76e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b770:	68fb      	ldr	r3, [r7, #12]
    b772:	68ba      	ldr	r2, [r7, #8]
    b774:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b776:	68fb      	ldr	r3, [r7, #12]
    b778:	687a      	ldr	r2, [r7, #4]
    b77a:	605a      	str	r2, [r3, #4]

	return me;
    b77c:	68fb      	ldr	r3, [r7, #12]
}
    b77e:	4618      	mov	r0, r3
    b780:	3714      	adds	r7, #20
    b782:	46bd      	mov	sp, r7
    b784:	f85d 7b04 	ldr.w	r7, [sp], #4
    b788:	4770      	bx	lr

0000b78a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b78a:	b480      	push	{r7}
    b78c:	b083      	sub	sp, #12
    b78e:	af00      	add	r7, sp, #0
    b790:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b792:	687b      	ldr	r3, [r7, #4]
    b794:	781b      	ldrb	r3, [r3, #0]
    b796:	b29a      	uxth	r2, r3
    b798:	687b      	ldr	r3, [r7, #4]
    b79a:	3301      	adds	r3, #1
    b79c:	781b      	ldrb	r3, [r3, #0]
    b79e:	b29b      	uxth	r3, r3
    b7a0:	021b      	lsls	r3, r3, #8
    b7a2:	b29b      	uxth	r3, r3
    b7a4:	4413      	add	r3, r2
    b7a6:	b29b      	uxth	r3, r3
}
    b7a8:	4618      	mov	r0, r3
    b7aa:	370c      	adds	r7, #12
    b7ac:	46bd      	mov	sp, r7
    b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7b2:	4770      	bx	lr

0000b7b4 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b7b4:	b480      	push	{r7}
    b7b6:	b083      	sub	sp, #12
    b7b8:	af00      	add	r7, sp, #0
    b7ba:	6078      	str	r0, [r7, #4]
	return desc[0];
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	781b      	ldrb	r3, [r3, #0]
}
    b7c0:	4618      	mov	r0, r3
    b7c2:	370c      	adds	r7, #12
    b7c4:	46bd      	mov	sp, r7
    b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7ca:	4770      	bx	lr

0000b7cc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b7cc:	b580      	push	{r7, lr}
    b7ce:	b082      	sub	sp, #8
    b7d0:	af00      	add	r7, sp, #0
    b7d2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b7d4:	6878      	ldr	r0, [r7, #4]
    b7d6:	4b05      	ldr	r3, [pc, #20]	; (b7ec <usb_desc_next+0x20>)
    b7d8:	4798      	blx	r3
    b7da:	4603      	mov	r3, r0
    b7dc:	461a      	mov	r2, r3
    b7de:	687b      	ldr	r3, [r7, #4]
    b7e0:	4413      	add	r3, r2
}
    b7e2:	4618      	mov	r0, r3
    b7e4:	3708      	adds	r7, #8
    b7e6:	46bd      	mov	sp, r7
    b7e8:	bd80      	pop	{r7, pc}
    b7ea:	bf00      	nop
    b7ec:	0000b7b5 	.word	0x0000b7b5

0000b7f0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b7f0:	b580      	push	{r7, lr}
    b7f2:	b08c      	sub	sp, #48	; 0x30
    b7f4:	af00      	add	r7, sp, #0
    b7f6:	6078      	str	r0, [r7, #4]
    b7f8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b7fa:	687b      	ldr	r3, [r7, #4]
    b7fc:	689b      	ldr	r3, [r3, #8]
    b7fe:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b800:	683b      	ldr	r3, [r7, #0]
    b802:	681b      	ldr	r3, [r3, #0]
    b804:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b806:	2300      	movs	r3, #0
    b808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b80c:	e08f      	b.n	b92e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b810:	2b00      	cmp	r3, #0
    b812:	d102      	bne.n	b81a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b814:	f06f 0309 	mvn.w	r3, #9
    b818:	e092      	b.n	b940 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b81c:	789b      	ldrb	r3, [r3, #2]
    b81e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b822:	795b      	ldrb	r3, [r3, #5]
    b824:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b826:	7c7b      	ldrb	r3, [r7, #17]
    b828:	2b02      	cmp	r3, #2
    b82a:	d002      	beq.n	b832 <cdcdf_acm_enable+0x42>
    b82c:	7c7b      	ldrb	r3, [r7, #17]
    b82e:	2b0a      	cmp	r3, #10
    b830:	d121      	bne.n	b876 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b836:	6a3a      	ldr	r2, [r7, #32]
    b838:	5cd2      	ldrb	r2, [r2, r3]
    b83a:	7bbb      	ldrb	r3, [r7, #14]
    b83c:	429a      	cmp	r2, r3
    b83e:	d102      	bne.n	b846 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b840:	f06f 0311 	mvn.w	r3, #17
    b844:	e07c      	b.n	b940 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b84a:	6a3a      	ldr	r2, [r7, #32]
    b84c:	5cd3      	ldrb	r3, [r2, r3]
    b84e:	2bff      	cmp	r3, #255	; 0xff
    b850:	d002      	beq.n	b858 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b852:	f06f 031b 	mvn.w	r3, #27
    b856:	e073      	b.n	b940 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b85c:	7bb9      	ldrb	r1, [r7, #14]
    b85e:	6a3a      	ldr	r2, [r7, #32]
    b860:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b862:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b864:	683b      	ldr	r3, [r7, #0]
    b866:	685b      	ldr	r3, [r3, #4]
    b868:	2205      	movs	r2, #5
    b86a:	4619      	mov	r1, r3
    b86c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b86e:	4b36      	ldr	r3, [pc, #216]	; (b948 <cdcdf_acm_enable+0x158>)
    b870:	4798      	blx	r3
    b872:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b874:	e047      	b.n	b906 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b876:	f06f 0309 	mvn.w	r3, #9
    b87a:	e061      	b.n	b940 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b87e:	789b      	ldrb	r3, [r3, #2]
    b880:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b884:	78db      	ldrb	r3, [r3, #3]
    b886:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b88a:	3304      	adds	r3, #4
    b88c:	4618      	mov	r0, r3
    b88e:	4b2f      	ldr	r3, [pc, #188]	; (b94c <cdcdf_acm_enable+0x15c>)
    b890:	4798      	blx	r3
    b892:	4603      	mov	r3, r0
    b894:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b896:	7ebb      	ldrb	r3, [r7, #26]
    b898:	7ef9      	ldrb	r1, [r7, #27]
    b89a:	8bba      	ldrh	r2, [r7, #28]
    b89c:	4618      	mov	r0, r3
    b89e:	4b2c      	ldr	r3, [pc, #176]	; (b950 <cdcdf_acm_enable+0x160>)
    b8a0:	4798      	blx	r3
    b8a2:	4603      	mov	r3, r0
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d002      	beq.n	b8ae <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b8a8:	f06f 0313 	mvn.w	r3, #19
    b8ac:	e048      	b.n	b940 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b8ae:	7ebb      	ldrb	r3, [r7, #26]
    b8b0:	b25b      	sxtb	r3, r3
    b8b2:	2b00      	cmp	r3, #0
    b8b4:	da0f      	bge.n	b8d6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b8b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b8ba:	7eb9      	ldrb	r1, [r7, #26]
    b8bc:	6a3a      	ldr	r2, [r7, #32]
    b8be:	4413      	add	r3, r2
    b8c0:	460a      	mov	r2, r1
    b8c2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b8c8:	6a3a      	ldr	r2, [r7, #32]
    b8ca:	4413      	add	r3, r2
    b8cc:	789b      	ldrb	r3, [r3, #2]
    b8ce:	4618      	mov	r0, r3
    b8d0:	4b20      	ldr	r3, [pc, #128]	; (b954 <cdcdf_acm_enable+0x164>)
    b8d2:	4798      	blx	r3
    b8d4:	e007      	b.n	b8e6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b8d6:	7eba      	ldrb	r2, [r7, #26]
    b8d8:	6a3b      	ldr	r3, [r7, #32]
    b8da:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b8dc:	6a3b      	ldr	r3, [r7, #32]
    b8de:	791b      	ldrb	r3, [r3, #4]
    b8e0:	4618      	mov	r0, r3
    b8e2:	4b1c      	ldr	r3, [pc, #112]	; (b954 <cdcdf_acm_enable+0x164>)
    b8e4:	4798      	blx	r3
			}
			desc->sod = ep;
    b8e6:	683b      	ldr	r3, [r7, #0]
    b8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b8ea:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b8ec:	683b      	ldr	r3, [r7, #0]
    b8ee:	681b      	ldr	r3, [r3, #0]
    b8f0:	4618      	mov	r0, r3
    b8f2:	4b19      	ldr	r3, [pc, #100]	; (b958 <cdcdf_acm_enable+0x168>)
    b8f4:	4798      	blx	r3
    b8f6:	4602      	mov	r2, r0
    b8f8:	683b      	ldr	r3, [r7, #0]
    b8fa:	685b      	ldr	r3, [r3, #4]
    b8fc:	4619      	mov	r1, r3
    b8fe:	4610      	mov	r0, r2
    b900:	4b16      	ldr	r3, [pc, #88]	; (b95c <cdcdf_acm_enable+0x16c>)
    b902:	4798      	blx	r3
    b904:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b908:	2b00      	cmp	r3, #0
    b90a:	d1b7      	bne.n	b87c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b90c:	683b      	ldr	r3, [r7, #0]
    b90e:	681b      	ldr	r3, [r3, #0]
    b910:	4618      	mov	r0, r3
    b912:	4b11      	ldr	r3, [pc, #68]	; (b958 <cdcdf_acm_enable+0x168>)
    b914:	4798      	blx	r3
    b916:	683b      	ldr	r3, [r7, #0]
    b918:	685b      	ldr	r3, [r3, #4]
    b91a:	2204      	movs	r2, #4
    b91c:	4619      	mov	r1, r3
    b91e:	4b0a      	ldr	r3, [pc, #40]	; (b948 <cdcdf_acm_enable+0x158>)
    b920:	4798      	blx	r3
    b922:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b928:	3301      	adds	r3, #1
    b92a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b92e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b932:	2b01      	cmp	r3, #1
    b934:	f67f af6b 	bls.w	b80e <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b938:	4b09      	ldr	r3, [pc, #36]	; (b960 <cdcdf_acm_enable+0x170>)
    b93a:	2201      	movs	r2, #1
    b93c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b93e:	2300      	movs	r3, #0
}
    b940:	4618      	mov	r0, r3
    b942:	3730      	adds	r7, #48	; 0x30
    b944:	46bd      	mov	sp, r7
    b946:	bd80      	pop	{r7, pc}
    b948:	0000cbb1 	.word	0x0000cbb1
    b94c:	0000b78b 	.word	0x0000b78b
    b950:	00002f41 	.word	0x00002f41
    b954:	0000302d 	.word	0x0000302d
    b958:	0000b7cd 	.word	0x0000b7cd
    b95c:	0000cc0d 	.word	0x0000cc0d
    b960:	20000dd8 	.word	0x20000dd8

0000b964 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b964:	b580      	push	{r7, lr}
    b966:	b088      	sub	sp, #32
    b968:	af00      	add	r7, sp, #0
    b96a:	6078      	str	r0, [r7, #4]
    b96c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b96e:	687b      	ldr	r3, [r7, #4]
    b970:	689b      	ldr	r3, [r3, #8]
    b972:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b974:	683b      	ldr	r3, [r7, #0]
    b976:	2b00      	cmp	r3, #0
    b978:	d00c      	beq.n	b994 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b97a:	683b      	ldr	r3, [r7, #0]
    b97c:	681b      	ldr	r3, [r3, #0]
    b97e:	795b      	ldrb	r3, [r3, #5]
    b980:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b982:	7c7b      	ldrb	r3, [r7, #17]
    b984:	2b02      	cmp	r3, #2
    b986:	d005      	beq.n	b994 <cdcdf_acm_disable+0x30>
    b988:	7c7b      	ldrb	r3, [r7, #17]
    b98a:	2b0a      	cmp	r3, #10
    b98c:	d002      	beq.n	b994 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b98e:	f06f 0309 	mvn.w	r3, #9
    b992:	e035      	b.n	ba00 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b994:	2300      	movs	r3, #0
    b996:	77fb      	strb	r3, [r7, #31]
    b998:	e01f      	b.n	b9da <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b99a:	7ffb      	ldrb	r3, [r7, #31]
    b99c:	69ba      	ldr	r2, [r7, #24]
    b99e:	5cd3      	ldrb	r3, [r2, r3]
    b9a0:	2bff      	cmp	r3, #255	; 0xff
    b9a2:	d016      	beq.n	b9d2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b9a4:	7ffb      	ldrb	r3, [r7, #31]
    b9a6:	69ba      	ldr	r2, [r7, #24]
    b9a8:	21ff      	movs	r1, #255	; 0xff
    b9aa:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b9ac:	7ffb      	ldrb	r3, [r7, #31]
    b9ae:	69ba      	ldr	r2, [r7, #24]
    b9b0:	4413      	add	r3, r2
    b9b2:	789b      	ldrb	r3, [r3, #2]
    b9b4:	2bff      	cmp	r3, #255	; 0xff
    b9b6:	d00d      	beq.n	b9d4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b9b8:	7ffb      	ldrb	r3, [r7, #31]
    b9ba:	69ba      	ldr	r2, [r7, #24]
    b9bc:	4413      	add	r3, r2
    b9be:	789b      	ldrb	r3, [r3, #2]
    b9c0:	4618      	mov	r0, r3
    b9c2:	4b11      	ldr	r3, [pc, #68]	; (ba08 <cdcdf_acm_disable+0xa4>)
    b9c4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b9c6:	7ffb      	ldrb	r3, [r7, #31]
    b9c8:	69ba      	ldr	r2, [r7, #24]
    b9ca:	4413      	add	r3, r2
    b9cc:	22ff      	movs	r2, #255	; 0xff
    b9ce:	709a      	strb	r2, [r3, #2]
    b9d0:	e000      	b.n	b9d4 <cdcdf_acm_disable+0x70>
			continue;
    b9d2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b9d4:	7ffb      	ldrb	r3, [r7, #31]
    b9d6:	3301      	adds	r3, #1
    b9d8:	77fb      	strb	r3, [r7, #31]
    b9da:	7ffb      	ldrb	r3, [r7, #31]
    b9dc:	2b01      	cmp	r3, #1
    b9de:	d9dc      	bls.n	b99a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b9e0:	69bb      	ldr	r3, [r7, #24]
    b9e2:	791b      	ldrb	r3, [r3, #4]
    b9e4:	2bff      	cmp	r3, #255	; 0xff
    b9e6:	d007      	beq.n	b9f8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b9e8:	69bb      	ldr	r3, [r7, #24]
    b9ea:	791b      	ldrb	r3, [r3, #4]
    b9ec:	4618      	mov	r0, r3
    b9ee:	4b06      	ldr	r3, [pc, #24]	; (ba08 <cdcdf_acm_disable+0xa4>)
    b9f0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b9f2:	69bb      	ldr	r3, [r7, #24]
    b9f4:	22ff      	movs	r2, #255	; 0xff
    b9f6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b9f8:	4b04      	ldr	r3, [pc, #16]	; (ba0c <cdcdf_acm_disable+0xa8>)
    b9fa:	2200      	movs	r2, #0
    b9fc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b9fe:	2300      	movs	r3, #0
}
    ba00:	4618      	mov	r0, r3
    ba02:	3720      	adds	r7, #32
    ba04:	46bd      	mov	sp, r7
    ba06:	bd80      	pop	{r7, pc}
    ba08:	00002fdd 	.word	0x00002fdd
    ba0c:	20000dd8 	.word	0x20000dd8

0000ba10 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    ba10:	b580      	push	{r7, lr}
    ba12:	b084      	sub	sp, #16
    ba14:	af00      	add	r7, sp, #0
    ba16:	60f8      	str	r0, [r7, #12]
    ba18:	460b      	mov	r3, r1
    ba1a:	607a      	str	r2, [r7, #4]
    ba1c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    ba1e:	7afb      	ldrb	r3, [r7, #11]
    ba20:	2b01      	cmp	r3, #1
    ba22:	d009      	beq.n	ba38 <cdcdf_acm_ctrl+0x28>
    ba24:	2b02      	cmp	r3, #2
    ba26:	d00d      	beq.n	ba44 <cdcdf_acm_ctrl+0x34>
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d10e      	bne.n	ba4a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    ba2c:	6879      	ldr	r1, [r7, #4]
    ba2e:	68f8      	ldr	r0, [r7, #12]
    ba30:	4b09      	ldr	r3, [pc, #36]	; (ba58 <cdcdf_acm_ctrl+0x48>)
    ba32:	4798      	blx	r3
    ba34:	4603      	mov	r3, r0
    ba36:	e00a      	b.n	ba4e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    ba38:	6879      	ldr	r1, [r7, #4]
    ba3a:	68f8      	ldr	r0, [r7, #12]
    ba3c:	4b07      	ldr	r3, [pc, #28]	; (ba5c <cdcdf_acm_ctrl+0x4c>)
    ba3e:	4798      	blx	r3
    ba40:	4603      	mov	r3, r0
    ba42:	e004      	b.n	ba4e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    ba44:	f06f 031a 	mvn.w	r3, #26
    ba48:	e001      	b.n	ba4e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    ba4a:	f06f 030c 	mvn.w	r3, #12
	}
}
    ba4e:	4618      	mov	r0, r3
    ba50:	3710      	adds	r7, #16
    ba52:	46bd      	mov	sp, r7
    ba54:	bd80      	pop	{r7, pc}
    ba56:	bf00      	nop
    ba58:	0000b7f1 	.word	0x0000b7f1
    ba5c:	0000b965 	.word	0x0000b965

0000ba60 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ba60:	b590      	push	{r4, r7, lr}
    ba62:	b087      	sub	sp, #28
    ba64:	af00      	add	r7, sp, #0
    ba66:	4603      	mov	r3, r0
    ba68:	6039      	str	r1, [r7, #0]
    ba6a:	71fb      	strb	r3, [r7, #7]
    ba6c:	4613      	mov	r3, r2
    ba6e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    ba70:	683b      	ldr	r3, [r7, #0]
    ba72:	799a      	ldrb	r2, [r3, #6]
    ba74:	79db      	ldrb	r3, [r3, #7]
    ba76:	021b      	lsls	r3, r3, #8
    ba78:	4313      	orrs	r3, r2
    ba7a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ba7c:	4b2b      	ldr	r3, [pc, #172]	; (bb2c <cdcdf_acm_set_req+0xcc>)
    ba7e:	4798      	blx	r3
    ba80:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    ba82:	683b      	ldr	r3, [r7, #0]
    ba84:	785b      	ldrb	r3, [r3, #1]
    ba86:	2b20      	cmp	r3, #32
    ba88:	d002      	beq.n	ba90 <cdcdf_acm_set_req+0x30>
    ba8a:	2b22      	cmp	r3, #34	; 0x22
    ba8c:	d034      	beq.n	baf8 <cdcdf_acm_set_req+0x98>
    ba8e:	e046      	b.n	bb1e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ba90:	8afb      	ldrh	r3, [r7, #22]
    ba92:	2b07      	cmp	r3, #7
    ba94:	d002      	beq.n	ba9c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    ba96:	f04f 33ff 	mov.w	r3, #4294967295
    ba9a:	e042      	b.n	bb22 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    ba9c:	79bb      	ldrb	r3, [r7, #6]
    ba9e:	2b00      	cmp	r3, #0
    baa0:	d107      	bne.n	bab2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    baa2:	8afa      	ldrh	r2, [r7, #22]
    baa4:	79f8      	ldrb	r0, [r7, #7]
    baa6:	2300      	movs	r3, #0
    baa8:	6939      	ldr	r1, [r7, #16]
    baaa:	4c21      	ldr	r4, [pc, #132]	; (bb30 <cdcdf_acm_set_req+0xd0>)
    baac:	47a0      	blx	r4
    baae:	4603      	mov	r3, r0
    bab0:	e037      	b.n	bb22 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bab2:	693a      	ldr	r2, [r7, #16]
    bab4:	f107 0308 	add.w	r3, r7, #8
    bab8:	6810      	ldr	r0, [r2, #0]
    baba:	6018      	str	r0, [r3, #0]
    babc:	8891      	ldrh	r1, [r2, #4]
    babe:	7992      	ldrb	r2, [r2, #6]
    bac0:	8099      	strh	r1, [r3, #4]
    bac2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bac4:	4b1b      	ldr	r3, [pc, #108]	; (bb34 <cdcdf_acm_set_req+0xd4>)
    bac6:	681b      	ldr	r3, [r3, #0]
    bac8:	2b00      	cmp	r3, #0
    baca:	d008      	beq.n	bade <cdcdf_acm_set_req+0x7e>
    bacc:	4b19      	ldr	r3, [pc, #100]	; (bb34 <cdcdf_acm_set_req+0xd4>)
    bace:	681b      	ldr	r3, [r3, #0]
    bad0:	f107 0208 	add.w	r2, r7, #8
    bad4:	4610      	mov	r0, r2
    bad6:	4798      	blx	r3
    bad8:	4603      	mov	r3, r0
    bada:	2b00      	cmp	r3, #0
    badc:	d00a      	beq.n	baf4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bade:	4b16      	ldr	r3, [pc, #88]	; (bb38 <cdcdf_acm_set_req+0xd8>)
    bae0:	f107 0208 	add.w	r2, r7, #8
    bae4:	e892 0003 	ldmia.w	r2, {r0, r1}
    bae8:	6018      	str	r0, [r3, #0]
    baea:	3304      	adds	r3, #4
    baec:	8019      	strh	r1, [r3, #0]
    baee:	3302      	adds	r3, #2
    baf0:	0c0a      	lsrs	r2, r1, #16
    baf2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    baf4:	2300      	movs	r3, #0
    baf6:	e014      	b.n	bb22 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    baf8:	2300      	movs	r3, #0
    bafa:	2200      	movs	r2, #0
    bafc:	2100      	movs	r1, #0
    bafe:	2000      	movs	r0, #0
    bb00:	4c0b      	ldr	r4, [pc, #44]	; (bb30 <cdcdf_acm_set_req+0xd0>)
    bb02:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bb04:	4b0d      	ldr	r3, [pc, #52]	; (bb3c <cdcdf_acm_set_req+0xdc>)
    bb06:	681b      	ldr	r3, [r3, #0]
    bb08:	2b00      	cmp	r3, #0
    bb0a:	d006      	beq.n	bb1a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    bb0c:	4b0b      	ldr	r3, [pc, #44]	; (bb3c <cdcdf_acm_set_req+0xdc>)
    bb0e:	681b      	ldr	r3, [r3, #0]
    bb10:	683a      	ldr	r2, [r7, #0]
    bb12:	8852      	ldrh	r2, [r2, #2]
    bb14:	b292      	uxth	r2, r2
    bb16:	4610      	mov	r0, r2
    bb18:	4798      	blx	r3
		}
		return ERR_NONE;
    bb1a:	2300      	movs	r3, #0
    bb1c:	e001      	b.n	bb22 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    bb1e:	f06f 030c 	mvn.w	r3, #12
	}
}
    bb22:	4618      	mov	r0, r3
    bb24:	371c      	adds	r7, #28
    bb26:	46bd      	mov	sp, r7
    bb28:	bd90      	pop	{r4, r7, pc}
    bb2a:	bf00      	nop
    bb2c:	0000caad 	.word	0x0000caad
    bb30:	0000c921 	.word	0x0000c921
    bb34:	20000dec 	.word	0x20000dec
    bb38:	20000de0 	.word	0x20000de0
    bb3c:	20000de8 	.word	0x20000de8

0000bb40 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bb40:	b590      	push	{r4, r7, lr}
    bb42:	b085      	sub	sp, #20
    bb44:	af00      	add	r7, sp, #0
    bb46:	4603      	mov	r3, r0
    bb48:	6039      	str	r1, [r7, #0]
    bb4a:	71fb      	strb	r3, [r7, #7]
    bb4c:	4613      	mov	r3, r2
    bb4e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    bb50:	683b      	ldr	r3, [r7, #0]
    bb52:	799a      	ldrb	r2, [r3, #6]
    bb54:	79db      	ldrb	r3, [r3, #7]
    bb56:	021b      	lsls	r3, r3, #8
    bb58:	4313      	orrs	r3, r2
    bb5a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    bb5c:	79bb      	ldrb	r3, [r7, #6]
    bb5e:	2b01      	cmp	r3, #1
    bb60:	d101      	bne.n	bb66 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    bb62:	2300      	movs	r3, #0
    bb64:	e013      	b.n	bb8e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    bb66:	683b      	ldr	r3, [r7, #0]
    bb68:	785b      	ldrb	r3, [r3, #1]
    bb6a:	2b21      	cmp	r3, #33	; 0x21
    bb6c:	d10d      	bne.n	bb8a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bb6e:	89fb      	ldrh	r3, [r7, #14]
    bb70:	2b07      	cmp	r3, #7
    bb72:	d002      	beq.n	bb7a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    bb74:	f04f 33ff 	mov.w	r3, #4294967295
    bb78:	e009      	b.n	bb8e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bb7a:	89fa      	ldrh	r2, [r7, #14]
    bb7c:	79f8      	ldrb	r0, [r7, #7]
    bb7e:	2300      	movs	r3, #0
    bb80:	4905      	ldr	r1, [pc, #20]	; (bb98 <cdcdf_acm_get_req+0x58>)
    bb82:	4c06      	ldr	r4, [pc, #24]	; (bb9c <cdcdf_acm_get_req+0x5c>)
    bb84:	47a0      	blx	r4
    bb86:	4603      	mov	r3, r0
    bb88:	e001      	b.n	bb8e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bb8a:	f06f 030c 	mvn.w	r3, #12
	}
}
    bb8e:	4618      	mov	r0, r3
    bb90:	3714      	adds	r7, #20
    bb92:	46bd      	mov	sp, r7
    bb94:	bd90      	pop	{r4, r7, pc}
    bb96:	bf00      	nop
    bb98:	20000de0 	.word	0x20000de0
    bb9c:	0000c921 	.word	0x0000c921

0000bba0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bba0:	b580      	push	{r7, lr}
    bba2:	b082      	sub	sp, #8
    bba4:	af00      	add	r7, sp, #0
    bba6:	4603      	mov	r3, r0
    bba8:	6039      	str	r1, [r7, #0]
    bbaa:	71fb      	strb	r3, [r7, #7]
    bbac:	4613      	mov	r3, r2
    bbae:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bbb0:	683b      	ldr	r3, [r7, #0]
    bbb2:	781b      	ldrb	r3, [r3, #0]
    bbb4:	095b      	lsrs	r3, r3, #5
    bbb6:	b2db      	uxtb	r3, r3
    bbb8:	f003 0303 	and.w	r3, r3, #3
    bbbc:	2b01      	cmp	r3, #1
    bbbe:	d002      	beq.n	bbc6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    bbc0:	f06f 0309 	mvn.w	r3, #9
    bbc4:	e026      	b.n	bc14 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bbc6:	683b      	ldr	r3, [r7, #0]
    bbc8:	889b      	ldrh	r3, [r3, #4]
    bbca:	b29a      	uxth	r2, r3
    bbcc:	4b13      	ldr	r3, [pc, #76]	; (bc1c <cdcdf_acm_req+0x7c>)
    bbce:	781b      	ldrb	r3, [r3, #0]
    bbd0:	b29b      	uxth	r3, r3
    bbd2:	429a      	cmp	r2, r3
    bbd4:	d007      	beq.n	bbe6 <cdcdf_acm_req+0x46>
    bbd6:	683b      	ldr	r3, [r7, #0]
    bbd8:	889b      	ldrh	r3, [r3, #4]
    bbda:	b29a      	uxth	r2, r3
    bbdc:	4b0f      	ldr	r3, [pc, #60]	; (bc1c <cdcdf_acm_req+0x7c>)
    bbde:	785b      	ldrb	r3, [r3, #1]
    bbe0:	b29b      	uxth	r3, r3
    bbe2:	429a      	cmp	r2, r3
    bbe4:	d114      	bne.n	bc10 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bbe6:	683b      	ldr	r3, [r7, #0]
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	b25b      	sxtb	r3, r3
    bbec:	2b00      	cmp	r3, #0
    bbee:	da07      	bge.n	bc00 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    bbf0:	79ba      	ldrb	r2, [r7, #6]
    bbf2:	79fb      	ldrb	r3, [r7, #7]
    bbf4:	6839      	ldr	r1, [r7, #0]
    bbf6:	4618      	mov	r0, r3
    bbf8:	4b09      	ldr	r3, [pc, #36]	; (bc20 <cdcdf_acm_req+0x80>)
    bbfa:	4798      	blx	r3
    bbfc:	4603      	mov	r3, r0
    bbfe:	e009      	b.n	bc14 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    bc00:	79ba      	ldrb	r2, [r7, #6]
    bc02:	79fb      	ldrb	r3, [r7, #7]
    bc04:	6839      	ldr	r1, [r7, #0]
    bc06:	4618      	mov	r0, r3
    bc08:	4b06      	ldr	r3, [pc, #24]	; (bc24 <cdcdf_acm_req+0x84>)
    bc0a:	4798      	blx	r3
    bc0c:	4603      	mov	r3, r0
    bc0e:	e001      	b.n	bc14 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bc10:	f06f 0309 	mvn.w	r3, #9
	}
}
    bc14:	4618      	mov	r0, r3
    bc16:	3708      	adds	r7, #8
    bc18:	46bd      	mov	sp, r7
    bc1a:	bd80      	pop	{r7, pc}
    bc1c:	20000dd8 	.word	0x20000dd8
    bc20:	0000bb41 	.word	0x0000bb41
    bc24:	0000ba61 	.word	0x0000ba61

0000bc28 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bc28:	b580      	push	{r7, lr}
    bc2a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bc2c:	4b0b      	ldr	r3, [pc, #44]	; (bc5c <cdcdf_acm_init+0x34>)
    bc2e:	4798      	blx	r3
    bc30:	4603      	mov	r3, r0
    bc32:	2b01      	cmp	r3, #1
    bc34:	d902      	bls.n	bc3c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bc36:	f06f 0310 	mvn.w	r3, #16
    bc3a:	e00d      	b.n	bc58 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bc3c:	4b08      	ldr	r3, [pc, #32]	; (bc60 <cdcdf_acm_init+0x38>)
    bc3e:	4a09      	ldr	r2, [pc, #36]	; (bc64 <cdcdf_acm_init+0x3c>)
    bc40:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bc42:	4b07      	ldr	r3, [pc, #28]	; (bc60 <cdcdf_acm_init+0x38>)
    bc44:	4a08      	ldr	r2, [pc, #32]	; (bc68 <cdcdf_acm_init+0x40>)
    bc46:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bc48:	4805      	ldr	r0, [pc, #20]	; (bc60 <cdcdf_acm_init+0x38>)
    bc4a:	4b08      	ldr	r3, [pc, #32]	; (bc6c <cdcdf_acm_init+0x44>)
    bc4c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bc4e:	4908      	ldr	r1, [pc, #32]	; (bc70 <cdcdf_acm_init+0x48>)
    bc50:	2001      	movs	r0, #1
    bc52:	4b08      	ldr	r3, [pc, #32]	; (bc74 <cdcdf_acm_init+0x4c>)
    bc54:	4798      	blx	r3
	return ERR_NONE;
    bc56:	2300      	movs	r3, #0
}
    bc58:	4618      	mov	r0, r3
    bc5a:	bd80      	pop	{r7, pc}
    bc5c:	0000cac5 	.word	0x0000cac5
    bc60:	20000dcc 	.word	0x20000dcc
    bc64:	0000ba11 	.word	0x0000ba11
    bc68:	20000dd8 	.word	0x20000dd8
    bc6c:	0000ca2d 	.word	0x0000ca2d
    bc70:	20000208 	.word	0x20000208
    bc74:	0000c95d 	.word	0x0000c95d

0000bc78 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bc78:	b590      	push	{r4, r7, lr}
    bc7a:	b083      	sub	sp, #12
    bc7c:	af00      	add	r7, sp, #0
    bc7e:	6078      	str	r0, [r7, #4]
    bc80:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bc82:	4b0b      	ldr	r3, [pc, #44]	; (bcb0 <cdcdf_acm_read+0x38>)
    bc84:	4798      	blx	r3
    bc86:	4603      	mov	r3, r0
    bc88:	f083 0301 	eor.w	r3, r3, #1
    bc8c:	b2db      	uxtb	r3, r3
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d002      	beq.n	bc98 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    bc92:	f06f 0310 	mvn.w	r3, #16
    bc96:	e007      	b.n	bca8 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bc98:	4b06      	ldr	r3, [pc, #24]	; (bcb4 <cdcdf_acm_read+0x3c>)
    bc9a:	7918      	ldrb	r0, [r3, #4]
    bc9c:	2300      	movs	r3, #0
    bc9e:	683a      	ldr	r2, [r7, #0]
    bca0:	6879      	ldr	r1, [r7, #4]
    bca2:	4c05      	ldr	r4, [pc, #20]	; (bcb8 <cdcdf_acm_read+0x40>)
    bca4:	47a0      	blx	r4
    bca6:	4603      	mov	r3, r0
}
    bca8:	4618      	mov	r0, r3
    bcaa:	370c      	adds	r7, #12
    bcac:	46bd      	mov	sp, r7
    bcae:	bd90      	pop	{r4, r7, pc}
    bcb0:	0000bd9d 	.word	0x0000bd9d
    bcb4:	20000dd8 	.word	0x20000dd8
    bcb8:	0000c921 	.word	0x0000c921

0000bcbc <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    bcbc:	b590      	push	{r4, r7, lr}
    bcbe:	b083      	sub	sp, #12
    bcc0:	af00      	add	r7, sp, #0
    bcc2:	6078      	str	r0, [r7, #4]
    bcc4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bcc6:	4b0b      	ldr	r3, [pc, #44]	; (bcf4 <cdcdf_acm_write+0x38>)
    bcc8:	4798      	blx	r3
    bcca:	4603      	mov	r3, r0
    bccc:	f083 0301 	eor.w	r3, r3, #1
    bcd0:	b2db      	uxtb	r3, r3
    bcd2:	2b00      	cmp	r3, #0
    bcd4:	d002      	beq.n	bcdc <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    bcd6:	f06f 0310 	mvn.w	r3, #16
    bcda:	e007      	b.n	bcec <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bcdc:	4b06      	ldr	r3, [pc, #24]	; (bcf8 <cdcdf_acm_write+0x3c>)
    bcde:	78d8      	ldrb	r0, [r3, #3]
    bce0:	2301      	movs	r3, #1
    bce2:	683a      	ldr	r2, [r7, #0]
    bce4:	6879      	ldr	r1, [r7, #4]
    bce6:	4c05      	ldr	r4, [pc, #20]	; (bcfc <cdcdf_acm_write+0x40>)
    bce8:	47a0      	blx	r4
    bcea:	4603      	mov	r3, r0
}
    bcec:	4618      	mov	r0, r3
    bcee:	370c      	adds	r7, #12
    bcf0:	46bd      	mov	sp, r7
    bcf2:	bd90      	pop	{r4, r7, pc}
    bcf4:	0000bd9d 	.word	0x0000bd9d
    bcf8:	20000dd8 	.word	0x20000dd8
    bcfc:	0000c921 	.word	0x0000c921

0000bd00 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    bd00:	b580      	push	{r7, lr}
    bd02:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    bd04:	4b05      	ldr	r3, [pc, #20]	; (bd1c <cdcdf_acm_stop_xfer+0x1c>)
    bd06:	78db      	ldrb	r3, [r3, #3]
    bd08:	4618      	mov	r0, r3
    bd0a:	4b05      	ldr	r3, [pc, #20]	; (bd20 <cdcdf_acm_stop_xfer+0x20>)
    bd0c:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bd0e:	4b03      	ldr	r3, [pc, #12]	; (bd1c <cdcdf_acm_stop_xfer+0x1c>)
    bd10:	791b      	ldrb	r3, [r3, #4]
    bd12:	4618      	mov	r0, r3
    bd14:	4b02      	ldr	r3, [pc, #8]	; (bd20 <cdcdf_acm_stop_xfer+0x20>)
    bd16:	4798      	blx	r3
}
    bd18:	bf00      	nop
    bd1a:	bd80      	pop	{r7, pc}
    bd1c:	20000dd8 	.word	0x20000dd8
    bd20:	00003205 	.word	0x00003205

0000bd24 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    bd24:	b580      	push	{r7, lr}
    bd26:	b082      	sub	sp, #8
    bd28:	af00      	add	r7, sp, #0
    bd2a:	4603      	mov	r3, r0
    bd2c:	6039      	str	r1, [r7, #0]
    bd2e:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    bd30:	79fb      	ldrb	r3, [r7, #7]
    bd32:	2b03      	cmp	r3, #3
    bd34:	d822      	bhi.n	bd7c <cdcdf_acm_register_callback+0x58>
    bd36:	a201      	add	r2, pc, #4	; (adr r2, bd3c <cdcdf_acm_register_callback+0x18>)
    bd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd3c:	0000bd4d 	.word	0x0000bd4d
    bd40:	0000bd5d 	.word	0x0000bd5d
    bd44:	0000bd6d 	.word	0x0000bd6d
    bd48:	0000bd75 	.word	0x0000bd75
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bd4c:	4b0f      	ldr	r3, [pc, #60]	; (bd8c <cdcdf_acm_register_callback+0x68>)
    bd4e:	791b      	ldrb	r3, [r3, #4]
    bd50:	683a      	ldr	r2, [r7, #0]
    bd52:	2102      	movs	r1, #2
    bd54:	4618      	mov	r0, r3
    bd56:	4b0e      	ldr	r3, [pc, #56]	; (bd90 <cdcdf_acm_register_callback+0x6c>)
    bd58:	4798      	blx	r3
		break;
    bd5a:	e012      	b.n	bd82 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bd5c:	4b0b      	ldr	r3, [pc, #44]	; (bd8c <cdcdf_acm_register_callback+0x68>)
    bd5e:	78db      	ldrb	r3, [r3, #3]
    bd60:	683a      	ldr	r2, [r7, #0]
    bd62:	2102      	movs	r1, #2
    bd64:	4618      	mov	r0, r3
    bd66:	4b0a      	ldr	r3, [pc, #40]	; (bd90 <cdcdf_acm_register_callback+0x6c>)
    bd68:	4798      	blx	r3
		break;
    bd6a:	e00a      	b.n	bd82 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    bd6c:	4a09      	ldr	r2, [pc, #36]	; (bd94 <cdcdf_acm_register_callback+0x70>)
    bd6e:	683b      	ldr	r3, [r7, #0]
    bd70:	6013      	str	r3, [r2, #0]
		break;
    bd72:	e006      	b.n	bd82 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bd74:	4a08      	ldr	r2, [pc, #32]	; (bd98 <cdcdf_acm_register_callback+0x74>)
    bd76:	683b      	ldr	r3, [r7, #0]
    bd78:	6013      	str	r3, [r2, #0]
		break;
    bd7a:	e002      	b.n	bd82 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    bd7c:	f06f 030c 	mvn.w	r3, #12
    bd80:	e000      	b.n	bd84 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    bd82:	2300      	movs	r3, #0
}
    bd84:	4618      	mov	r0, r3
    bd86:	3708      	adds	r7, #8
    bd88:	46bd      	mov	sp, r7
    bd8a:	bd80      	pop	{r7, pc}
    bd8c:	20000dd8 	.word	0x20000dd8
    bd90:	00003331 	.word	0x00003331
    bd94:	20000dec 	.word	0x20000dec
    bd98:	20000de8 	.word	0x20000de8

0000bd9c <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    bd9c:	b480      	push	{r7}
    bd9e:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    bda0:	4b03      	ldr	r3, [pc, #12]	; (bdb0 <cdcdf_acm_is_enabled+0x14>)
    bda2:	795b      	ldrb	r3, [r3, #5]
}
    bda4:	4618      	mov	r0, r3
    bda6:	46bd      	mov	sp, r7
    bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdac:	4770      	bx	lr
    bdae:	bf00      	nop
    bdb0:	20000dd8 	.word	0x20000dd8

0000bdb4 <usb_get_u16>:
{
    bdb4:	b480      	push	{r7}
    bdb6:	b083      	sub	sp, #12
    bdb8:	af00      	add	r7, sp, #0
    bdba:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bdbc:	687b      	ldr	r3, [r7, #4]
    bdbe:	781b      	ldrb	r3, [r3, #0]
    bdc0:	b29a      	uxth	r2, r3
    bdc2:	687b      	ldr	r3, [r7, #4]
    bdc4:	3301      	adds	r3, #1
    bdc6:	781b      	ldrb	r3, [r3, #0]
    bdc8:	b29b      	uxth	r3, r3
    bdca:	021b      	lsls	r3, r3, #8
    bdcc:	b29b      	uxth	r3, r3
    bdce:	4413      	add	r3, r2
    bdd0:	b29b      	uxth	r3, r3
}
    bdd2:	4618      	mov	r0, r3
    bdd4:	370c      	adds	r7, #12
    bdd6:	46bd      	mov	sp, r7
    bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bddc:	4770      	bx	lr

0000bdde <usb_desc_len>:
{
    bdde:	b480      	push	{r7}
    bde0:	b083      	sub	sp, #12
    bde2:	af00      	add	r7, sp, #0
    bde4:	6078      	str	r0, [r7, #4]
	return desc[0];
    bde6:	687b      	ldr	r3, [r7, #4]
    bde8:	781b      	ldrb	r3, [r3, #0]
}
    bdea:	4618      	mov	r0, r3
    bdec:	370c      	adds	r7, #12
    bdee:	46bd      	mov	sp, r7
    bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdf4:	4770      	bx	lr
	...

0000bdf8 <usb_desc_next>:
{
    bdf8:	b580      	push	{r7, lr}
    bdfa:	b082      	sub	sp, #8
    bdfc:	af00      	add	r7, sp, #0
    bdfe:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    be00:	6878      	ldr	r0, [r7, #4]
    be02:	4b05      	ldr	r3, [pc, #20]	; (be18 <usb_desc_next+0x20>)
    be04:	4798      	blx	r3
    be06:	4603      	mov	r3, r0
    be08:	461a      	mov	r2, r3
    be0a:	687b      	ldr	r3, [r7, #4]
    be0c:	4413      	add	r3, r2
}
    be0e:	4618      	mov	r0, r3
    be10:	3708      	adds	r7, #8
    be12:	46bd      	mov	sp, r7
    be14:	bd80      	pop	{r7, pc}
    be16:	bf00      	nop
    be18:	0000bddf 	.word	0x0000bddf

0000be1c <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    be1c:	b580      	push	{r7, lr}
    be1e:	b082      	sub	sp, #8
    be20:	af00      	add	r7, sp, #0
    be22:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    be24:	687b      	ldr	r3, [r7, #4]
    be26:	3302      	adds	r3, #2
    be28:	4618      	mov	r0, r3
    be2a:	4b03      	ldr	r3, [pc, #12]	; (be38 <usb_cfg_desc_total_len+0x1c>)
    be2c:	4798      	blx	r3
    be2e:	4603      	mov	r3, r0
}
    be30:	4618      	mov	r0, r3
    be32:	3708      	adds	r7, #8
    be34:	46bd      	mov	sp, r7
    be36:	bd80      	pop	{r7, pc}
    be38:	0000bdb5 	.word	0x0000bdb5

0000be3c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    be3c:	b590      	push	{r4, r7, lr}
    be3e:	b085      	sub	sp, #20
    be40:	af00      	add	r7, sp, #0
    be42:	4603      	mov	r3, r0
    be44:	6039      	str	r1, [r7, #0]
    be46:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    be48:	2300      	movs	r3, #0
    be4a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    be4c:	683b      	ldr	r3, [r7, #0]
    be4e:	799a      	ldrb	r2, [r3, #6]
    be50:	79db      	ldrb	r3, [r3, #7]
    be52:	021b      	lsls	r3, r3, #8
    be54:	4313      	orrs	r3, r2
    be56:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    be58:	897b      	ldrh	r3, [r7, #10]
    be5a:	2b12      	cmp	r3, #18
    be5c:	d901      	bls.n	be62 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    be5e:	2312      	movs	r3, #18
    be60:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    be62:	68fb      	ldr	r3, [r7, #12]
    be64:	2b00      	cmp	r3, #0
    be66:	d10a      	bne.n	be7e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    be68:	4b0f      	ldr	r3, [pc, #60]	; (bea8 <usbdc_get_dev_desc+0x6c>)
    be6a:	681b      	ldr	r3, [r3, #0]
    be6c:	6818      	ldr	r0, [r3, #0]
    be6e:	4b0e      	ldr	r3, [pc, #56]	; (bea8 <usbdc_get_dev_desc+0x6c>)
    be70:	681b      	ldr	r3, [r3, #0]
    be72:	685b      	ldr	r3, [r3, #4]
    be74:	2201      	movs	r2, #1
    be76:	4619      	mov	r1, r3
    be78:	4b0c      	ldr	r3, [pc, #48]	; (beac <usbdc_get_dev_desc+0x70>)
    be7a:	4798      	blx	r3
    be7c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    be7e:	68fb      	ldr	r3, [r7, #12]
    be80:	2b00      	cmp	r3, #0
    be82:	d101      	bne.n	be88 <usbdc_get_dev_desc+0x4c>
		return false;
    be84:	2300      	movs	r3, #0
    be86:	e00b      	b.n	bea0 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    be88:	897a      	ldrh	r2, [r7, #10]
    be8a:	79f8      	ldrb	r0, [r7, #7]
    be8c:	2300      	movs	r3, #0
    be8e:	68f9      	ldr	r1, [r7, #12]
    be90:	4c07      	ldr	r4, [pc, #28]	; (beb0 <usbdc_get_dev_desc+0x74>)
    be92:	47a0      	blx	r4
    be94:	4603      	mov	r3, r0
    be96:	2b00      	cmp	r3, #0
    be98:	d001      	beq.n	be9e <usbdc_get_dev_desc+0x62>
		return false;
    be9a:	2300      	movs	r3, #0
    be9c:	e000      	b.n	bea0 <usbdc_get_dev_desc+0x64>
	}
	return true;
    be9e:	2301      	movs	r3, #1
}
    bea0:	4618      	mov	r0, r3
    bea2:	3714      	adds	r7, #20
    bea4:	46bd      	mov	sp, r7
    bea6:	bd90      	pop	{r4, r7, pc}
    bea8:	20000df0 	.word	0x20000df0
    beac:	0000cbb1 	.word	0x0000cbb1
    beb0:	0000c921 	.word	0x0000c921

0000beb4 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    beb4:	b590      	push	{r4, r7, lr}
    beb6:	b087      	sub	sp, #28
    beb8:	af00      	add	r7, sp, #0
    beba:	4603      	mov	r3, r0
    bebc:	6039      	str	r1, [r7, #0]
    bebe:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    bec0:	2300      	movs	r3, #0
    bec2:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    bec4:	683b      	ldr	r3, [r7, #0]
    bec6:	799a      	ldrb	r2, [r3, #6]
    bec8:	79db      	ldrb	r3, [r3, #7]
    beca:	021b      	lsls	r3, r3, #8
    becc:	4313      	orrs	r3, r2
    bece:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    bed0:	683b      	ldr	r3, [r7, #0]
    bed2:	885b      	ldrh	r3, [r3, #2]
    bed4:	b29b      	uxth	r3, r3
    bed6:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bed8:	8a7a      	ldrh	r2, [r7, #18]
    beda:	4b1e      	ldr	r3, [pc, #120]	; (bf54 <usbdc_get_cfg_desc+0xa0>)
    bedc:	7f1b      	ldrb	r3, [r3, #28]
    bede:	3b01      	subs	r3, #1
    bee0:	4013      	ands	r3, r2
    bee2:	2b00      	cmp	r3, #0
    bee4:	bf0c      	ite	eq
    bee6:	2301      	moveq	r3, #1
    bee8:	2300      	movne	r3, #0
    beea:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    beec:	697b      	ldr	r3, [r7, #20]
    beee:	2b00      	cmp	r3, #0
    bef0:	d10c      	bne.n	bf0c <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    bef2:	4b18      	ldr	r3, [pc, #96]	; (bf54 <usbdc_get_cfg_desc+0xa0>)
    bef4:	681b      	ldr	r3, [r3, #0]
    bef6:	6818      	ldr	r0, [r3, #0]
    bef8:	4b16      	ldr	r3, [pc, #88]	; (bf54 <usbdc_get_cfg_desc+0xa0>)
    befa:	681b      	ldr	r3, [r3, #0]
    befc:	6859      	ldr	r1, [r3, #4]
    befe:	7c3b      	ldrb	r3, [r7, #16]
    bf00:	3301      	adds	r3, #1
    bf02:	b2db      	uxtb	r3, r3
    bf04:	461a      	mov	r2, r3
    bf06:	4b14      	ldr	r3, [pc, #80]	; (bf58 <usbdc_get_cfg_desc+0xa4>)
    bf08:	4798      	blx	r3
    bf0a:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    bf0c:	697b      	ldr	r3, [r7, #20]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d101      	bne.n	bf16 <usbdc_get_cfg_desc+0x62>
		return false;
    bf12:	2300      	movs	r3, #0
    bf14:	e019      	b.n	bf4a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    bf16:	6978      	ldr	r0, [r7, #20]
    bf18:	4b10      	ldr	r3, [pc, #64]	; (bf5c <usbdc_get_cfg_desc+0xa8>)
    bf1a:	4798      	blx	r3
    bf1c:	4603      	mov	r3, r0
    bf1e:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    bf20:	8a7a      	ldrh	r2, [r7, #18]
    bf22:	89fb      	ldrh	r3, [r7, #14]
    bf24:	429a      	cmp	r2, r3
    bf26:	d802      	bhi.n	bf2e <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    bf28:	2300      	movs	r3, #0
    bf2a:	747b      	strb	r3, [r7, #17]
    bf2c:	e001      	b.n	bf32 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    bf2e:	89fb      	ldrh	r3, [r7, #14]
    bf30:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    bf32:	8a7a      	ldrh	r2, [r7, #18]
    bf34:	7c7b      	ldrb	r3, [r7, #17]
    bf36:	79f8      	ldrb	r0, [r7, #7]
    bf38:	6979      	ldr	r1, [r7, #20]
    bf3a:	4c09      	ldr	r4, [pc, #36]	; (bf60 <usbdc_get_cfg_desc+0xac>)
    bf3c:	47a0      	blx	r4
    bf3e:	4603      	mov	r3, r0
    bf40:	2b00      	cmp	r3, #0
    bf42:	d001      	beq.n	bf48 <usbdc_get_cfg_desc+0x94>
		return false;
    bf44:	2300      	movs	r3, #0
    bf46:	e000      	b.n	bf4a <usbdc_get_cfg_desc+0x96>
	}
	return true;
    bf48:	2301      	movs	r3, #1
}
    bf4a:	4618      	mov	r0, r3
    bf4c:	371c      	adds	r7, #28
    bf4e:	46bd      	mov	sp, r7
    bf50:	bd90      	pop	{r4, r7, pc}
    bf52:	bf00      	nop
    bf54:	20000df0 	.word	0x20000df0
    bf58:	0000cc71 	.word	0x0000cc71
    bf5c:	0000be1d 	.word	0x0000be1d
    bf60:	0000c921 	.word	0x0000c921

0000bf64 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    bf64:	b590      	push	{r4, r7, lr}
    bf66:	b085      	sub	sp, #20
    bf68:	af00      	add	r7, sp, #0
    bf6a:	4603      	mov	r3, r0
    bf6c:	6039      	str	r1, [r7, #0]
    bf6e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    bf70:	683b      	ldr	r3, [r7, #0]
    bf72:	799a      	ldrb	r2, [r3, #6]
    bf74:	79db      	ldrb	r3, [r3, #7]
    bf76:	021b      	lsls	r3, r3, #8
    bf78:	4313      	orrs	r3, r2
    bf7a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    bf7c:	683b      	ldr	r3, [r7, #0]
    bf7e:	885b      	ldrh	r3, [r3, #2]
    bf80:	b29b      	uxth	r3, r3
    bf82:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bf84:	89fa      	ldrh	r2, [r7, #14]
    bf86:	4b1a      	ldr	r3, [pc, #104]	; (bff0 <usbdc_get_str_desc+0x8c>)
    bf88:	7f1b      	ldrb	r3, [r3, #28]
    bf8a:	3b01      	subs	r3, #1
    bf8c:	4013      	ands	r3, r2
    bf8e:	2b00      	cmp	r3, #0
    bf90:	bf0c      	ite	eq
    bf92:	2301      	moveq	r3, #1
    bf94:	2300      	movne	r3, #0
    bf96:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    bf98:	4b15      	ldr	r3, [pc, #84]	; (bff0 <usbdc_get_str_desc+0x8c>)
    bf9a:	681b      	ldr	r3, [r3, #0]
    bf9c:	6818      	ldr	r0, [r3, #0]
    bf9e:	4b14      	ldr	r3, [pc, #80]	; (bff0 <usbdc_get_str_desc+0x8c>)
    bfa0:	681b      	ldr	r3, [r3, #0]
    bfa2:	685b      	ldr	r3, [r3, #4]
    bfa4:	7b3a      	ldrb	r2, [r7, #12]
    bfa6:	4619      	mov	r1, r3
    bfa8:	4b12      	ldr	r3, [pc, #72]	; (bff4 <usbdc_get_str_desc+0x90>)
    bfaa:	4798      	blx	r3
    bfac:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    bfae:	68bb      	ldr	r3, [r7, #8]
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d101      	bne.n	bfb8 <usbdc_get_str_desc+0x54>
		return false;
    bfb4:	2300      	movs	r3, #0
    bfb6:	e017      	b.n	bfe8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    bfb8:	68bb      	ldr	r3, [r7, #8]
    bfba:	781b      	ldrb	r3, [r3, #0]
    bfbc:	b29b      	uxth	r3, r3
    bfbe:	89fa      	ldrh	r2, [r7, #14]
    bfc0:	429a      	cmp	r2, r3
    bfc2:	d802      	bhi.n	bfca <usbdc_get_str_desc+0x66>
		need_zlp = false;
    bfc4:	2300      	movs	r3, #0
    bfc6:	737b      	strb	r3, [r7, #13]
    bfc8:	e002      	b.n	bfd0 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    bfca:	68bb      	ldr	r3, [r7, #8]
    bfcc:	781b      	ldrb	r3, [r3, #0]
    bfce:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    bfd0:	89fa      	ldrh	r2, [r7, #14]
    bfd2:	7b7b      	ldrb	r3, [r7, #13]
    bfd4:	79f8      	ldrb	r0, [r7, #7]
    bfd6:	68b9      	ldr	r1, [r7, #8]
    bfd8:	4c07      	ldr	r4, [pc, #28]	; (bff8 <usbdc_get_str_desc+0x94>)
    bfda:	47a0      	blx	r4
    bfdc:	4603      	mov	r3, r0
    bfde:	2b00      	cmp	r3, #0
    bfe0:	d001      	beq.n	bfe6 <usbdc_get_str_desc+0x82>
		return false;
    bfe2:	2300      	movs	r3, #0
    bfe4:	e000      	b.n	bfe8 <usbdc_get_str_desc+0x84>
	}
	return true;
    bfe6:	2301      	movs	r3, #1
}
    bfe8:	4618      	mov	r0, r3
    bfea:	3714      	adds	r7, #20
    bfec:	46bd      	mov	sp, r7
    bfee:	bd90      	pop	{r4, r7, pc}
    bff0:	20000df0 	.word	0x20000df0
    bff4:	0000cce9 	.word	0x0000cce9
    bff8:	0000c921 	.word	0x0000c921

0000bffc <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    bffc:	b580      	push	{r7, lr}
    bffe:	b084      	sub	sp, #16
    c000:	af00      	add	r7, sp, #0
    c002:	4603      	mov	r3, r0
    c004:	6039      	str	r1, [r7, #0]
    c006:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c008:	683b      	ldr	r3, [r7, #0]
    c00a:	885b      	ldrh	r3, [r3, #2]
    c00c:	b29b      	uxth	r3, r3
    c00e:	0a1b      	lsrs	r3, r3, #8
    c010:	b29b      	uxth	r3, r3
    c012:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c014:	7bfb      	ldrb	r3, [r7, #15]
    c016:	2b02      	cmp	r3, #2
    c018:	d00d      	beq.n	c036 <usbdc_get_desc_req+0x3a>
    c01a:	2b03      	cmp	r3, #3
    c01c:	d012      	beq.n	c044 <usbdc_get_desc_req+0x48>
    c01e:	2b01      	cmp	r3, #1
    c020:	d002      	beq.n	c028 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c022:	bf00      	nop
	}
	return false;
    c024:	2300      	movs	r3, #0
    c026:	e013      	b.n	c050 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c028:	79fb      	ldrb	r3, [r7, #7]
    c02a:	6839      	ldr	r1, [r7, #0]
    c02c:	4618      	mov	r0, r3
    c02e:	4b0a      	ldr	r3, [pc, #40]	; (c058 <usbdc_get_desc_req+0x5c>)
    c030:	4798      	blx	r3
    c032:	4603      	mov	r3, r0
    c034:	e00c      	b.n	c050 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c036:	79fb      	ldrb	r3, [r7, #7]
    c038:	6839      	ldr	r1, [r7, #0]
    c03a:	4618      	mov	r0, r3
    c03c:	4b07      	ldr	r3, [pc, #28]	; (c05c <usbdc_get_desc_req+0x60>)
    c03e:	4798      	blx	r3
    c040:	4603      	mov	r3, r0
    c042:	e005      	b.n	c050 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c044:	79fb      	ldrb	r3, [r7, #7]
    c046:	6839      	ldr	r1, [r7, #0]
    c048:	4618      	mov	r0, r3
    c04a:	4b05      	ldr	r3, [pc, #20]	; (c060 <usbdc_get_desc_req+0x64>)
    c04c:	4798      	blx	r3
    c04e:	4603      	mov	r3, r0
}
    c050:	4618      	mov	r0, r3
    c052:	3710      	adds	r7, #16
    c054:	46bd      	mov	sp, r7
    c056:	bd80      	pop	{r7, pc}
    c058:	0000be3d 	.word	0x0000be3d
    c05c:	0000beb5 	.word	0x0000beb5
    c060:	0000bf65 	.word	0x0000bf65

0000c064 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c064:	b590      	push	{r4, r7, lr}
    c066:	b085      	sub	sp, #20
    c068:	af00      	add	r7, sp, #0
    c06a:	4603      	mov	r3, r0
    c06c:	6039      	str	r1, [r7, #0]
    c06e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c070:	683b      	ldr	r3, [r7, #0]
    c072:	781b      	ldrb	r3, [r3, #0]
    c074:	f003 031f 	and.w	r3, r3, #31
    c078:	2b00      	cmp	r3, #0
    c07a:	db1b      	blt.n	c0b4 <usbdc_get_status_req+0x50>
    c07c:	2b01      	cmp	r3, #1
    c07e:	dd02      	ble.n	c086 <usbdc_get_status_req+0x22>
    c080:	2b02      	cmp	r3, #2
    c082:	d003      	beq.n	c08c <usbdc_get_status_req+0x28>
    c084:	e016      	b.n	c0b4 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c086:	2300      	movs	r3, #0
    c088:	60fb      	str	r3, [r7, #12]
		break;
    c08a:	e015      	b.n	c0b8 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c08c:	683b      	ldr	r3, [r7, #0]
    c08e:	889b      	ldrh	r3, [r3, #4]
    c090:	b29b      	uxth	r3, r3
    c092:	b2db      	uxtb	r3, r3
    c094:	2102      	movs	r1, #2
    c096:	4618      	mov	r0, r3
    c098:	4b0f      	ldr	r3, [pc, #60]	; (c0d8 <usbdc_get_status_req+0x74>)
    c09a:	4798      	blx	r3
    c09c:	4603      	mov	r3, r0
    c09e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c0a0:	68fb      	ldr	r3, [r7, #12]
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	da01      	bge.n	c0aa <usbdc_get_status_req+0x46>
			return false;
    c0a6:	2300      	movs	r3, #0
    c0a8:	e012      	b.n	c0d0 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c0aa:	68fb      	ldr	r3, [r7, #12]
    c0ac:	f003 0301 	and.w	r3, r3, #1
    c0b0:	60fb      	str	r3, [r7, #12]
		break;
    c0b2:	e001      	b.n	c0b8 <usbdc_get_status_req+0x54>
	default:
		return false;
    c0b4:	2300      	movs	r3, #0
    c0b6:	e00b      	b.n	c0d0 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c0b8:	4b08      	ldr	r3, [pc, #32]	; (c0dc <usbdc_get_status_req+0x78>)
    c0ba:	695b      	ldr	r3, [r3, #20]
    c0bc:	89ba      	ldrh	r2, [r7, #12]
    c0be:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c0c0:	4b06      	ldr	r3, [pc, #24]	; (c0dc <usbdc_get_status_req+0x78>)
    c0c2:	6959      	ldr	r1, [r3, #20]
    c0c4:	79f8      	ldrb	r0, [r7, #7]
    c0c6:	2300      	movs	r3, #0
    c0c8:	2202      	movs	r2, #2
    c0ca:	4c05      	ldr	r4, [pc, #20]	; (c0e0 <usbdc_get_status_req+0x7c>)
    c0cc:	47a0      	blx	r4
	return true;
    c0ce:	2301      	movs	r3, #1
}
    c0d0:	4618      	mov	r0, r3
    c0d2:	3714      	adds	r7, #20
    c0d4:	46bd      	mov	sp, r7
    c0d6:	bd90      	pop	{r4, r7, pc}
    c0d8:	000032dd 	.word	0x000032dd
    c0dc:	20000df0 	.word	0x20000df0
    c0e0:	0000c921 	.word	0x0000c921

0000c0e4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c0e4:	b590      	push	{r4, r7, lr}
    c0e6:	b085      	sub	sp, #20
    c0e8:	af00      	add	r7, sp, #0
    c0ea:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c0ec:	4b1f      	ldr	r3, [pc, #124]	; (c16c <usbdc_get_interface+0x88>)
    c0ee:	691b      	ldr	r3, [r3, #16]
    c0f0:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c0f2:	4b1e      	ldr	r3, [pc, #120]	; (c16c <usbdc_get_interface+0x88>)
    c0f4:	7f5b      	ldrb	r3, [r3, #29]
    c0f6:	461a      	mov	r2, r3
    c0f8:	687b      	ldr	r3, [r7, #4]
    c0fa:	889b      	ldrh	r3, [r3, #4]
    c0fc:	b29b      	uxth	r3, r3
    c0fe:	fa42 f303 	asr.w	r3, r2, r3
    c102:	f003 0301 	and.w	r3, r3, #1
    c106:	2b00      	cmp	r3, #0
    c108:	d128      	bne.n	c15c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c10a:	4b18      	ldr	r3, [pc, #96]	; (c16c <usbdc_get_interface+0x88>)
    c10c:	695b      	ldr	r3, [r3, #20]
    c10e:	2200      	movs	r2, #0
    c110:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c112:	4b16      	ldr	r3, [pc, #88]	; (c16c <usbdc_get_interface+0x88>)
    c114:	6959      	ldr	r1, [r3, #20]
    c116:	2300      	movs	r3, #0
    c118:	2201      	movs	r2, #1
    c11a:	2000      	movs	r0, #0
    c11c:	4c14      	ldr	r4, [pc, #80]	; (c170 <usbdc_get_interface+0x8c>)
    c11e:	47a0      	blx	r4
		return true;
    c120:	2301      	movs	r3, #1
    c122:	e01f      	b.n	c164 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c124:	68fb      	ldr	r3, [r7, #12]
    c126:	685b      	ldr	r3, [r3, #4]
    c128:	687a      	ldr	r2, [r7, #4]
    c12a:	2102      	movs	r1, #2
    c12c:	68f8      	ldr	r0, [r7, #12]
    c12e:	4798      	blx	r3
    c130:	60b8      	str	r0, [r7, #8]
    c132:	68bb      	ldr	r3, [r7, #8]
    c134:	2b00      	cmp	r3, #0
    c136:	da03      	bge.n	c140 <usbdc_get_interface+0x5c>
			func = func->next;
    c138:	68fb      	ldr	r3, [r7, #12]
    c13a:	681b      	ldr	r3, [r3, #0]
    c13c:	60fb      	str	r3, [r7, #12]
    c13e:	e00d      	b.n	c15c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c140:	4b0a      	ldr	r3, [pc, #40]	; (c16c <usbdc_get_interface+0x88>)
    c142:	695b      	ldr	r3, [r3, #20]
    c144:	68ba      	ldr	r2, [r7, #8]
    c146:	b2d2      	uxtb	r2, r2
    c148:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c14a:	4b08      	ldr	r3, [pc, #32]	; (c16c <usbdc_get_interface+0x88>)
    c14c:	6959      	ldr	r1, [r3, #20]
    c14e:	2300      	movs	r3, #0
    c150:	2201      	movs	r2, #1
    c152:	2000      	movs	r0, #0
    c154:	4c06      	ldr	r4, [pc, #24]	; (c170 <usbdc_get_interface+0x8c>)
    c156:	47a0      	blx	r4
			return true;
    c158:	2301      	movs	r3, #1
    c15a:	e003      	b.n	c164 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c15c:	68fb      	ldr	r3, [r7, #12]
    c15e:	2b00      	cmp	r3, #0
    c160:	d1e0      	bne.n	c124 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c162:	2300      	movs	r3, #0
}
    c164:	4618      	mov	r0, r3
    c166:	3714      	adds	r7, #20
    c168:	46bd      	mov	sp, r7
    c16a:	bd90      	pop	{r4, r7, pc}
    c16c:	20000df0 	.word	0x20000df0
    c170:	0000c921 	.word	0x0000c921

0000c174 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c174:	b590      	push	{r4, r7, lr}
    c176:	b083      	sub	sp, #12
    c178:	af00      	add	r7, sp, #0
    c17a:	4603      	mov	r3, r0
    c17c:	6039      	str	r1, [r7, #0]
    c17e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c180:	683b      	ldr	r3, [r7, #0]
    c182:	785b      	ldrb	r3, [r3, #1]
    c184:	2b0a      	cmp	r3, #10
    c186:	d83a      	bhi.n	c1fe <usbdc_get_req+0x8a>
    c188:	a201      	add	r2, pc, #4	; (adr r2, c190 <usbdc_get_req+0x1c>)
    c18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c18e:	bf00      	nop
    c190:	0000c1e7 	.word	0x0000c1e7
    c194:	0000c1ff 	.word	0x0000c1ff
    c198:	0000c1ff 	.word	0x0000c1ff
    c19c:	0000c1ff 	.word	0x0000c1ff
    c1a0:	0000c1ff 	.word	0x0000c1ff
    c1a4:	0000c1ff 	.word	0x0000c1ff
    c1a8:	0000c1bd 	.word	0x0000c1bd
    c1ac:	0000c1ff 	.word	0x0000c1ff
    c1b0:	0000c1cb 	.word	0x0000c1cb
    c1b4:	0000c1ff 	.word	0x0000c1ff
    c1b8:	0000c1f5 	.word	0x0000c1f5
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c1bc:	79fb      	ldrb	r3, [r7, #7]
    c1be:	6839      	ldr	r1, [r7, #0]
    c1c0:	4618      	mov	r0, r3
    c1c2:	4b11      	ldr	r3, [pc, #68]	; (c208 <usbdc_get_req+0x94>)
    c1c4:	4798      	blx	r3
    c1c6:	4603      	mov	r3, r0
    c1c8:	e01a      	b.n	c200 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c1ca:	4b10      	ldr	r3, [pc, #64]	; (c20c <usbdc_get_req+0x98>)
    c1cc:	695b      	ldr	r3, [r3, #20]
    c1ce:	4a0f      	ldr	r2, [pc, #60]	; (c20c <usbdc_get_req+0x98>)
    c1d0:	7ed2      	ldrb	r2, [r2, #27]
    c1d2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c1d4:	4b0d      	ldr	r3, [pc, #52]	; (c20c <usbdc_get_req+0x98>)
    c1d6:	6959      	ldr	r1, [r3, #20]
    c1d8:	79f8      	ldrb	r0, [r7, #7]
    c1da:	2300      	movs	r3, #0
    c1dc:	2201      	movs	r2, #1
    c1de:	4c0c      	ldr	r4, [pc, #48]	; (c210 <usbdc_get_req+0x9c>)
    c1e0:	47a0      	blx	r4
		return true;
    c1e2:	2301      	movs	r3, #1
    c1e4:	e00c      	b.n	c200 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c1e6:	79fb      	ldrb	r3, [r7, #7]
    c1e8:	6839      	ldr	r1, [r7, #0]
    c1ea:	4618      	mov	r0, r3
    c1ec:	4b09      	ldr	r3, [pc, #36]	; (c214 <usbdc_get_req+0xa0>)
    c1ee:	4798      	blx	r3
    c1f0:	4603      	mov	r3, r0
    c1f2:	e005      	b.n	c200 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c1f4:	6838      	ldr	r0, [r7, #0]
    c1f6:	4b08      	ldr	r3, [pc, #32]	; (c218 <usbdc_get_req+0xa4>)
    c1f8:	4798      	blx	r3
    c1fa:	4603      	mov	r3, r0
    c1fc:	e000      	b.n	c200 <usbdc_get_req+0x8c>
	default:
		return false;
    c1fe:	2300      	movs	r3, #0
	}
}
    c200:	4618      	mov	r0, r3
    c202:	370c      	adds	r7, #12
    c204:	46bd      	mov	sp, r7
    c206:	bd90      	pop	{r4, r7, pc}
    c208:	0000bffd 	.word	0x0000bffd
    c20c:	20000df0 	.word	0x20000df0
    c210:	0000c921 	.word	0x0000c921
    c214:	0000c065 	.word	0x0000c065
    c218:	0000c0e5 	.word	0x0000c0e5

0000c21c <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c21c:	b590      	push	{r4, r7, lr}
    c21e:	b083      	sub	sp, #12
    c220:	af00      	add	r7, sp, #0
    c222:	4603      	mov	r3, r0
    c224:	6039      	str	r1, [r7, #0]
    c226:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c228:	683b      	ldr	r3, [r7, #0]
    c22a:	781b      	ldrb	r3, [r3, #0]
    c22c:	f003 031f 	and.w	r3, r3, #31
    c230:	2b02      	cmp	r3, #2
    c232:	d116      	bne.n	c262 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c234:	683b      	ldr	r3, [r7, #0]
    c236:	88db      	ldrh	r3, [r3, #6]
    c238:	b29b      	uxth	r3, r3
    c23a:	2b00      	cmp	r3, #0
    c23c:	d001      	beq.n	c242 <usbdc_clear_ftr_req+0x26>
			return false;
    c23e:	2300      	movs	r3, #0
    c240:	e010      	b.n	c264 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c242:	683b      	ldr	r3, [r7, #0]
    c244:	889b      	ldrh	r3, [r3, #4]
    c246:	b29b      	uxth	r3, r3
    c248:	b2db      	uxtb	r3, r3
    c24a:	2100      	movs	r1, #0
    c24c:	4618      	mov	r0, r3
    c24e:	4b07      	ldr	r3, [pc, #28]	; (c26c <usbdc_clear_ftr_req+0x50>)
    c250:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c252:	79f8      	ldrb	r0, [r7, #7]
    c254:	2301      	movs	r3, #1
    c256:	2200      	movs	r2, #0
    c258:	2100      	movs	r1, #0
    c25a:	4c05      	ldr	r4, [pc, #20]	; (c270 <usbdc_clear_ftr_req+0x54>)
    c25c:	47a0      	blx	r4
		return true;
    c25e:	2301      	movs	r3, #1
    c260:	e000      	b.n	c264 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c262:	2300      	movs	r3, #0
	}
}
    c264:	4618      	mov	r0, r3
    c266:	370c      	adds	r7, #12
    c268:	46bd      	mov	sp, r7
    c26a:	bd90      	pop	{r4, r7, pc}
    c26c:	000032dd 	.word	0x000032dd
    c270:	0000c921 	.word	0x0000c921

0000c274 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c274:	b590      	push	{r4, r7, lr}
    c276:	b083      	sub	sp, #12
    c278:	af00      	add	r7, sp, #0
    c27a:	4603      	mov	r3, r0
    c27c:	6039      	str	r1, [r7, #0]
    c27e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c280:	683b      	ldr	r3, [r7, #0]
    c282:	781b      	ldrb	r3, [r3, #0]
    c284:	f003 031f 	and.w	r3, r3, #31
    c288:	2b02      	cmp	r3, #2
    c28a:	d116      	bne.n	c2ba <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c28c:	683b      	ldr	r3, [r7, #0]
    c28e:	88db      	ldrh	r3, [r3, #6]
    c290:	b29b      	uxth	r3, r3
    c292:	2b00      	cmp	r3, #0
    c294:	d001      	beq.n	c29a <usbdc_set_ftr_req+0x26>
			return false;
    c296:	2300      	movs	r3, #0
    c298:	e010      	b.n	c2bc <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c29a:	683b      	ldr	r3, [r7, #0]
    c29c:	889b      	ldrh	r3, [r3, #4]
    c29e:	b29b      	uxth	r3, r3
    c2a0:	b2db      	uxtb	r3, r3
    c2a2:	2101      	movs	r1, #1
    c2a4:	4618      	mov	r0, r3
    c2a6:	4b07      	ldr	r3, [pc, #28]	; (c2c4 <usbdc_set_ftr_req+0x50>)
    c2a8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c2aa:	79f8      	ldrb	r0, [r7, #7]
    c2ac:	2301      	movs	r3, #1
    c2ae:	2200      	movs	r2, #0
    c2b0:	2100      	movs	r1, #0
    c2b2:	4c05      	ldr	r4, [pc, #20]	; (c2c8 <usbdc_set_ftr_req+0x54>)
    c2b4:	47a0      	blx	r4
		return true;
    c2b6:	2301      	movs	r3, #1
    c2b8:	e000      	b.n	c2bc <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c2ba:	2300      	movs	r3, #0
	}
}
    c2bc:	4618      	mov	r0, r3
    c2be:	370c      	adds	r7, #12
    c2c0:	46bd      	mov	sp, r7
    c2c2:	bd90      	pop	{r4, r7, pc}
    c2c4:	000032dd 	.word	0x000032dd
    c2c8:	0000c921 	.word	0x0000c921

0000c2cc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c2cc:	b580      	push	{r7, lr}
    c2ce:	b082      	sub	sp, #8
    c2d0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c2d2:	4b0a      	ldr	r3, [pc, #40]	; (c2fc <usbdc_unconfig+0x30>)
    c2d4:	691b      	ldr	r3, [r3, #16]
    c2d6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c2d8:	e008      	b.n	c2ec <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c2da:	687b      	ldr	r3, [r7, #4]
    c2dc:	685b      	ldr	r3, [r3, #4]
    c2de:	2200      	movs	r2, #0
    c2e0:	2101      	movs	r1, #1
    c2e2:	6878      	ldr	r0, [r7, #4]
    c2e4:	4798      	blx	r3
		func = func->next;
    c2e6:	687b      	ldr	r3, [r7, #4]
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c2ec:	687b      	ldr	r3, [r7, #4]
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d1f3      	bne.n	c2da <usbdc_unconfig+0xe>
	}
}
    c2f2:	bf00      	nop
    c2f4:	3708      	adds	r7, #8
    c2f6:	46bd      	mov	sp, r7
    c2f8:	bd80      	pop	{r7, pc}
    c2fa:	bf00      	nop
    c2fc:	20000df0 	.word	0x20000df0

0000c300 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c300:	b580      	push	{r7, lr}
    c302:	b088      	sub	sp, #32
    c304:	af00      	add	r7, sp, #0
    c306:	4603      	mov	r3, r0
    c308:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c30a:	2300      	movs	r3, #0
    c30c:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c30e:	23ff      	movs	r3, #255	; 0xff
    c310:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c312:	79fb      	ldrb	r3, [r7, #7]
    c314:	2b00      	cmp	r3, #0
    c316:	d103      	bne.n	c320 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c318:	4b2e      	ldr	r3, [pc, #184]	; (c3d4 <usbdc_set_config+0xd4>)
    c31a:	4798      	blx	r3
		return true;
    c31c:	2301      	movs	r3, #1
    c31e:	e055      	b.n	c3cc <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c320:	69bb      	ldr	r3, [r7, #24]
    c322:	2b00      	cmp	r3, #0
    c324:	d10a      	bne.n	c33c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c326:	4b2c      	ldr	r3, [pc, #176]	; (c3d8 <usbdc_set_config+0xd8>)
    c328:	681b      	ldr	r3, [r3, #0]
    c32a:	6818      	ldr	r0, [r3, #0]
    c32c:	4b2a      	ldr	r3, [pc, #168]	; (c3d8 <usbdc_set_config+0xd8>)
    c32e:	681b      	ldr	r3, [r3, #0]
    c330:	685b      	ldr	r3, [r3, #4]
    c332:	79fa      	ldrb	r2, [r7, #7]
    c334:	4619      	mov	r1, r3
    c336:	4b29      	ldr	r3, [pc, #164]	; (c3dc <usbdc_set_config+0xdc>)
    c338:	4798      	blx	r3
    c33a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c33c:	69bb      	ldr	r3, [r7, #24]
    c33e:	2b00      	cmp	r3, #0
    c340:	d101      	bne.n	c346 <usbdc_set_config+0x46>
		return false;
    c342:	2300      	movs	r3, #0
    c344:	e042      	b.n	c3cc <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c346:	69b8      	ldr	r0, [r7, #24]
    c348:	4b25      	ldr	r3, [pc, #148]	; (c3e0 <usbdc_set_config+0xe0>)
    c34a:	4798      	blx	r3
    c34c:	4603      	mov	r3, r0
    c34e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c350:	8abb      	ldrh	r3, [r7, #20]
    c352:	69ba      	ldr	r2, [r7, #24]
    c354:	4413      	add	r3, r2
    c356:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c358:	693b      	ldr	r3, [r7, #16]
    c35a:	2204      	movs	r2, #4
    c35c:	4619      	mov	r1, r3
    c35e:	69b8      	ldr	r0, [r7, #24]
    c360:	4b20      	ldr	r3, [pc, #128]	; (c3e4 <usbdc_set_config+0xe4>)
    c362:	4798      	blx	r3
    c364:	4603      	mov	r3, r0
    c366:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c368:	e02c      	b.n	c3c4 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c36a:	68fb      	ldr	r3, [r7, #12]
    c36c:	3302      	adds	r3, #2
    c36e:	781b      	ldrb	r3, [r3, #0]
    c370:	7dfa      	ldrb	r2, [r7, #23]
    c372:	429a      	cmp	r2, r3
    c374:	d018      	beq.n	c3a8 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c376:	68fb      	ldr	r3, [r7, #12]
    c378:	789b      	ldrb	r3, [r3, #2]
    c37a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c37c:	4b16      	ldr	r3, [pc, #88]	; (c3d8 <usbdc_set_config+0xd8>)
    c37e:	691b      	ldr	r3, [r3, #16]
    c380:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c382:	e00c      	b.n	c39e <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c384:	69fb      	ldr	r3, [r7, #28]
    c386:	685b      	ldr	r3, [r3, #4]
    c388:	f107 020c 	add.w	r2, r7, #12
    c38c:	2100      	movs	r1, #0
    c38e:	69f8      	ldr	r0, [r7, #28]
    c390:	4798      	blx	r3
    c392:	4603      	mov	r3, r0
    c394:	2b00      	cmp	r3, #0
    c396:	d006      	beq.n	c3a6 <usbdc_set_config+0xa6>
					func = func->next;
    c398:	69fb      	ldr	r3, [r7, #28]
    c39a:	681b      	ldr	r3, [r3, #0]
    c39c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c39e:	69fb      	ldr	r3, [r7, #28]
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d1ef      	bne.n	c384 <usbdc_set_config+0x84>
    c3a4:	e000      	b.n	c3a8 <usbdc_set_config+0xa8>
				} else {
					break;
    c3a6:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c3a8:	68fb      	ldr	r3, [r7, #12]
    c3aa:	4618      	mov	r0, r3
    c3ac:	4b0e      	ldr	r3, [pc, #56]	; (c3e8 <usbdc_set_config+0xe8>)
    c3ae:	4798      	blx	r3
    c3b0:	4603      	mov	r3, r0
    c3b2:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c3b4:	68fb      	ldr	r3, [r7, #12]
    c3b6:	6939      	ldr	r1, [r7, #16]
    c3b8:	2204      	movs	r2, #4
    c3ba:	4618      	mov	r0, r3
    c3bc:	4b09      	ldr	r3, [pc, #36]	; (c3e4 <usbdc_set_config+0xe4>)
    c3be:	4798      	blx	r3
    c3c0:	4603      	mov	r3, r0
    c3c2:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c3c4:	68fb      	ldr	r3, [r7, #12]
    c3c6:	2b00      	cmp	r3, #0
    c3c8:	d1cf      	bne.n	c36a <usbdc_set_config+0x6a>
	}
	return true;
    c3ca:	2301      	movs	r3, #1
}
    c3cc:	4618      	mov	r0, r3
    c3ce:	3720      	adds	r7, #32
    c3d0:	46bd      	mov	sp, r7
    c3d2:	bd80      	pop	{r7, pc}
    c3d4:	0000c2cd 	.word	0x0000c2cd
    c3d8:	20000df0 	.word	0x20000df0
    c3dc:	0000cc71 	.word	0x0000cc71
    c3e0:	0000be1d 	.word	0x0000be1d
    c3e4:	0000cbb1 	.word	0x0000cbb1
    c3e8:	0000bdf9 	.word	0x0000bdf9

0000c3ec <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c3ec:	b580      	push	{r7, lr}
    c3ee:	b082      	sub	sp, #8
    c3f0:	af00      	add	r7, sp, #0
    c3f2:	4603      	mov	r3, r0
    c3f4:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c3f6:	79fb      	ldrb	r3, [r7, #7]
    c3f8:	4618      	mov	r0, r3
    c3fa:	4b03      	ldr	r3, [pc, #12]	; (c408 <usbdc_set_address+0x1c>)
    c3fc:	4798      	blx	r3
}
    c3fe:	bf00      	nop
    c400:	3708      	adds	r7, #8
    c402:	46bd      	mov	sp, r7
    c404:	bd80      	pop	{r7, pc}
    c406:	bf00      	nop
    c408:	00002ef9 	.word	0x00002ef9

0000c40c <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c40c:	b590      	push	{r4, r7, lr}
    c40e:	b087      	sub	sp, #28
    c410:	af00      	add	r7, sp, #0
    c412:	4603      	mov	r3, r0
    c414:	460a      	mov	r2, r1
    c416:	80fb      	strh	r3, [r7, #6]
    c418:	4613      	mov	r3, r2
    c41a:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c41c:	2300      	movs	r3, #0
    c41e:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c420:	693b      	ldr	r3, [r7, #16]
    c422:	2b00      	cmp	r3, #0
    c424:	d10b      	bne.n	c43e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c426:	4b43      	ldr	r3, [pc, #268]	; (c534 <usbdc_set_interface+0x128>)
    c428:	681b      	ldr	r3, [r3, #0]
    c42a:	6818      	ldr	r0, [r3, #0]
    c42c:	4b41      	ldr	r3, [pc, #260]	; (c534 <usbdc_set_interface+0x128>)
    c42e:	681b      	ldr	r3, [r3, #0]
    c430:	6859      	ldr	r1, [r3, #4]
    c432:	4b40      	ldr	r3, [pc, #256]	; (c534 <usbdc_set_interface+0x128>)
    c434:	7edb      	ldrb	r3, [r3, #27]
    c436:	461a      	mov	r2, r3
    c438:	4b3f      	ldr	r3, [pc, #252]	; (c538 <usbdc_set_interface+0x12c>)
    c43a:	4798      	blx	r3
    c43c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c43e:	693b      	ldr	r3, [r7, #16]
    c440:	2b00      	cmp	r3, #0
    c442:	d101      	bne.n	c448 <usbdc_set_interface+0x3c>
		return false;
    c444:	2300      	movs	r3, #0
    c446:	e071      	b.n	c52c <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c448:	693b      	ldr	r3, [r7, #16]
    c44a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c44c:	6938      	ldr	r0, [r7, #16]
    c44e:	4b3b      	ldr	r3, [pc, #236]	; (c53c <usbdc_set_interface+0x130>)
    c450:	4798      	blx	r3
    c452:	4603      	mov	r3, r0
    c454:	461a      	mov	r2, r3
    c456:	693b      	ldr	r3, [r7, #16]
    c458:	4413      	add	r3, r2
    c45a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c45c:	68bb      	ldr	r3, [r7, #8]
    c45e:	68f9      	ldr	r1, [r7, #12]
    c460:	2204      	movs	r2, #4
    c462:	4618      	mov	r0, r3
    c464:	4b36      	ldr	r3, [pc, #216]	; (c540 <usbdc_set_interface+0x134>)
    c466:	4798      	blx	r3
    c468:	6138      	str	r0, [r7, #16]
    c46a:	693b      	ldr	r3, [r7, #16]
    c46c:	2b00      	cmp	r3, #0
    c46e:	d113      	bne.n	c498 <usbdc_set_interface+0x8c>
		return false;
    c470:	2300      	movs	r3, #0
    c472:	e05b      	b.n	c52c <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c474:	68bb      	ldr	r3, [r7, #8]
    c476:	4618      	mov	r0, r3
    c478:	4b32      	ldr	r3, [pc, #200]	; (c544 <usbdc_set_interface+0x138>)
    c47a:	4798      	blx	r3
    c47c:	4603      	mov	r3, r0
    c47e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c480:	68bb      	ldr	r3, [r7, #8]
    c482:	68f9      	ldr	r1, [r7, #12]
    c484:	2204      	movs	r2, #4
    c486:	4618      	mov	r0, r3
    c488:	4b2d      	ldr	r3, [pc, #180]	; (c540 <usbdc_set_interface+0x134>)
    c48a:	4798      	blx	r3
    c48c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c48e:	693b      	ldr	r3, [r7, #16]
    c490:	2b00      	cmp	r3, #0
    c492:	d101      	bne.n	c498 <usbdc_set_interface+0x8c>
			return false;
    c494:	2300      	movs	r3, #0
    c496:	e049      	b.n	c52c <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c498:	693b      	ldr	r3, [r7, #16]
    c49a:	3302      	adds	r3, #2
    c49c:	781b      	ldrb	r3, [r3, #0]
    c49e:	b29b      	uxth	r3, r3
    c4a0:	88ba      	ldrh	r2, [r7, #4]
    c4a2:	429a      	cmp	r2, r3
    c4a4:	d1e6      	bne.n	c474 <usbdc_set_interface+0x68>
    c4a6:	693b      	ldr	r3, [r7, #16]
    c4a8:	3303      	adds	r3, #3
    c4aa:	781b      	ldrb	r3, [r3, #0]
    c4ac:	b29b      	uxth	r3, r3
    c4ae:	88fa      	ldrh	r2, [r7, #6]
    c4b0:	429a      	cmp	r2, r3
    c4b2:	d1df      	bne.n	c474 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c4b4:	693b      	ldr	r3, [r7, #16]
    c4b6:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c4b8:	4b1e      	ldr	r3, [pc, #120]	; (c534 <usbdc_set_interface+0x128>)
    c4ba:	691b      	ldr	r3, [r3, #16]
    c4bc:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c4be:	e031      	b.n	c524 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c4c0:	697b      	ldr	r3, [r7, #20]
    c4c2:	685b      	ldr	r3, [r3, #4]
    c4c4:	f107 0208 	add.w	r2, r7, #8
    c4c8:	2101      	movs	r1, #1
    c4ca:	6978      	ldr	r0, [r7, #20]
    c4cc:	4798      	blx	r3
    c4ce:	4603      	mov	r3, r0
    c4d0:	2b00      	cmp	r3, #0
    c4d2:	d003      	beq.n	c4dc <usbdc_set_interface+0xd0>
			func = func->next;
    c4d4:	697b      	ldr	r3, [r7, #20]
    c4d6:	681b      	ldr	r3, [r3, #0]
    c4d8:	617b      	str	r3, [r7, #20]
    c4da:	e023      	b.n	c524 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c4dc:	697b      	ldr	r3, [r7, #20]
    c4de:	685b      	ldr	r3, [r3, #4]
    c4e0:	f107 0208 	add.w	r2, r7, #8
    c4e4:	2100      	movs	r1, #0
    c4e6:	6978      	ldr	r0, [r7, #20]
    c4e8:	4798      	blx	r3
    c4ea:	4603      	mov	r3, r0
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	d117      	bne.n	c520 <usbdc_set_interface+0x114>
			if (alt_set) {
    c4f0:	88fb      	ldrh	r3, [r7, #6]
    c4f2:	2b00      	cmp	r3, #0
    c4f4:	d00c      	beq.n	c510 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c4f6:	4b0f      	ldr	r3, [pc, #60]	; (c534 <usbdc_set_interface+0x128>)
    c4f8:	7f5b      	ldrb	r3, [r3, #29]
    c4fa:	b25a      	sxtb	r2, r3
    c4fc:	88bb      	ldrh	r3, [r7, #4]
    c4fe:	2101      	movs	r1, #1
    c500:	fa01 f303 	lsl.w	r3, r1, r3
    c504:	b25b      	sxtb	r3, r3
    c506:	4313      	orrs	r3, r2
    c508:	b25b      	sxtb	r3, r3
    c50a:	b2da      	uxtb	r2, r3
    c50c:	4b09      	ldr	r3, [pc, #36]	; (c534 <usbdc_set_interface+0x128>)
    c50e:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c510:	2300      	movs	r3, #0
    c512:	2200      	movs	r2, #0
    c514:	2100      	movs	r1, #0
    c516:	2000      	movs	r0, #0
    c518:	4c0b      	ldr	r4, [pc, #44]	; (c548 <usbdc_set_interface+0x13c>)
    c51a:	47a0      	blx	r4
			return true;
    c51c:	2301      	movs	r3, #1
    c51e:	e005      	b.n	c52c <usbdc_set_interface+0x120>
		} else {
			return false;
    c520:	2300      	movs	r3, #0
    c522:	e003      	b.n	c52c <usbdc_set_interface+0x120>
	while (NULL != func) {
    c524:	697b      	ldr	r3, [r7, #20]
    c526:	2b00      	cmp	r3, #0
    c528:	d1ca      	bne.n	c4c0 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c52a:	2300      	movs	r3, #0
}
    c52c:	4618      	mov	r0, r3
    c52e:	371c      	adds	r7, #28
    c530:	46bd      	mov	sp, r7
    c532:	bd90      	pop	{r4, r7, pc}
    c534:	20000df0 	.word	0x20000df0
    c538:	0000cc71 	.word	0x0000cc71
    c53c:	0000be1d 	.word	0x0000be1d
    c540:	0000cbb1 	.word	0x0000cbb1
    c544:	0000bdf9 	.word	0x0000bdf9
    c548:	0000c921 	.word	0x0000c921

0000c54c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c54c:	b590      	push	{r4, r7, lr}
    c54e:	b083      	sub	sp, #12
    c550:	af00      	add	r7, sp, #0
    c552:	4603      	mov	r3, r0
    c554:	6039      	str	r1, [r7, #0]
    c556:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c558:	683b      	ldr	r3, [r7, #0]
    c55a:	785b      	ldrb	r3, [r3, #1]
    c55c:	3b01      	subs	r3, #1
    c55e:	2b0a      	cmp	r3, #10
    c560:	d85b      	bhi.n	c61a <usbdc_set_req+0xce>
    c562:	a201      	add	r2, pc, #4	; (adr r2, c568 <usbdc_set_req+0x1c>)
    c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c568:	0000c5e7 	.word	0x0000c5e7
    c56c:	0000c61b 	.word	0x0000c61b
    c570:	0000c5f5 	.word	0x0000c5f5
    c574:	0000c61b 	.word	0x0000c61b
    c578:	0000c595 	.word	0x0000c595
    c57c:	0000c61b 	.word	0x0000c61b
    c580:	0000c61b 	.word	0x0000c61b
    c584:	0000c61b 	.word	0x0000c61b
    c588:	0000c5af 	.word	0x0000c5af
    c58c:	0000c61b 	.word	0x0000c61b
    c590:	0000c603 	.word	0x0000c603
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c594:	79f8      	ldrb	r0, [r7, #7]
    c596:	2301      	movs	r3, #1
    c598:	2200      	movs	r2, #0
    c59a:	2100      	movs	r1, #0
    c59c:	4c21      	ldr	r4, [pc, #132]	; (c624 <usbdc_set_req+0xd8>)
    c59e:	47a0      	blx	r4
    c5a0:	4603      	mov	r3, r0
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	bf0c      	ite	eq
    c5a6:	2301      	moveq	r3, #1
    c5a8:	2300      	movne	r3, #0
    c5aa:	b2db      	uxtb	r3, r3
    c5ac:	e036      	b.n	c61c <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c5ae:	683b      	ldr	r3, [r7, #0]
    c5b0:	885b      	ldrh	r3, [r3, #2]
    c5b2:	b29b      	uxth	r3, r3
    c5b4:	b2db      	uxtb	r3, r3
    c5b6:	4618      	mov	r0, r3
    c5b8:	4b1b      	ldr	r3, [pc, #108]	; (c628 <usbdc_set_req+0xdc>)
    c5ba:	4798      	blx	r3
    c5bc:	4603      	mov	r3, r0
    c5be:	f083 0301 	eor.w	r3, r3, #1
    c5c2:	b2db      	uxtb	r3, r3
    c5c4:	2b00      	cmp	r3, #0
    c5c6:	d001      	beq.n	c5cc <usbdc_set_req+0x80>
			return false;
    c5c8:	2300      	movs	r3, #0
    c5ca:	e027      	b.n	c61c <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c5cc:	79f8      	ldrb	r0, [r7, #7]
    c5ce:	2301      	movs	r3, #1
    c5d0:	2200      	movs	r2, #0
    c5d2:	2100      	movs	r1, #0
    c5d4:	4c13      	ldr	r4, [pc, #76]	; (c624 <usbdc_set_req+0xd8>)
    c5d6:	47a0      	blx	r4
    c5d8:	4603      	mov	r3, r0
    c5da:	2b00      	cmp	r3, #0
    c5dc:	bf0c      	ite	eq
    c5de:	2301      	moveq	r3, #1
    c5e0:	2300      	movne	r3, #0
    c5e2:	b2db      	uxtb	r3, r3
    c5e4:	e01a      	b.n	c61c <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c5e6:	79fb      	ldrb	r3, [r7, #7]
    c5e8:	6839      	ldr	r1, [r7, #0]
    c5ea:	4618      	mov	r0, r3
    c5ec:	4b0f      	ldr	r3, [pc, #60]	; (c62c <usbdc_set_req+0xe0>)
    c5ee:	4798      	blx	r3
    c5f0:	4603      	mov	r3, r0
    c5f2:	e013      	b.n	c61c <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c5f4:	79fb      	ldrb	r3, [r7, #7]
    c5f6:	6839      	ldr	r1, [r7, #0]
    c5f8:	4618      	mov	r0, r3
    c5fa:	4b0d      	ldr	r3, [pc, #52]	; (c630 <usbdc_set_req+0xe4>)
    c5fc:	4798      	blx	r3
    c5fe:	4603      	mov	r3, r0
    c600:	e00c      	b.n	c61c <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c602:	683b      	ldr	r3, [r7, #0]
    c604:	885b      	ldrh	r3, [r3, #2]
    c606:	b29a      	uxth	r2, r3
    c608:	683b      	ldr	r3, [r7, #0]
    c60a:	889b      	ldrh	r3, [r3, #4]
    c60c:	b29b      	uxth	r3, r3
    c60e:	4619      	mov	r1, r3
    c610:	4610      	mov	r0, r2
    c612:	4b08      	ldr	r3, [pc, #32]	; (c634 <usbdc_set_req+0xe8>)
    c614:	4798      	blx	r3
    c616:	4603      	mov	r3, r0
    c618:	e000      	b.n	c61c <usbdc_set_req+0xd0>
	default:
		return false;
    c61a:	2300      	movs	r3, #0
	}
}
    c61c:	4618      	mov	r0, r3
    c61e:	370c      	adds	r7, #12
    c620:	46bd      	mov	sp, r7
    c622:	bd90      	pop	{r4, r7, pc}
    c624:	0000c921 	.word	0x0000c921
    c628:	0000c301 	.word	0x0000c301
    c62c:	0000c21d 	.word	0x0000c21d
    c630:	0000c275 	.word	0x0000c275
    c634:	0000c40d 	.word	0x0000c40d

0000c638 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c638:	b580      	push	{r7, lr}
    c63a:	b082      	sub	sp, #8
    c63c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c63e:	4b0a      	ldr	r3, [pc, #40]	; (c668 <usbdc_sof_notify+0x30>)
    c640:	685b      	ldr	r3, [r3, #4]
    c642:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c644:	e009      	b.n	c65a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c646:	687b      	ldr	r3, [r7, #4]
    c648:	685b      	ldr	r3, [r3, #4]
    c64a:	2b00      	cmp	r3, #0
    c64c:	d002      	beq.n	c654 <usbdc_sof_notify+0x1c>
			sof->cb();
    c64e:	687b      	ldr	r3, [r7, #4]
    c650:	685b      	ldr	r3, [r3, #4]
    c652:	4798      	blx	r3
		}
		sof = sof->next;
    c654:	687b      	ldr	r3, [r7, #4]
    c656:	681b      	ldr	r3, [r3, #0]
    c658:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c65a:	687b      	ldr	r3, [r7, #4]
    c65c:	2b00      	cmp	r3, #0
    c65e:	d1f2      	bne.n	c646 <usbdc_sof_notify+0xe>
	}
}
    c660:	bf00      	nop
    c662:	3708      	adds	r7, #8
    c664:	46bd      	mov	sp, r7
    c666:	bd80      	pop	{r7, pc}
    c668:	20000df0 	.word	0x20000df0

0000c66c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c66c:	b580      	push	{r7, lr}
    c66e:	b084      	sub	sp, #16
    c670:	af00      	add	r7, sp, #0
    c672:	4603      	mov	r3, r0
    c674:	6039      	str	r1, [r7, #0]
    c676:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c678:	4b0b      	ldr	r3, [pc, #44]	; (c6a8 <usbdc_change_notify+0x3c>)
    c67a:	68db      	ldr	r3, [r3, #12]
    c67c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c67e:	e00c      	b.n	c69a <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c680:	68fb      	ldr	r3, [r7, #12]
    c682:	685b      	ldr	r3, [r3, #4]
    c684:	2b00      	cmp	r3, #0
    c686:	d005      	beq.n	c694 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c688:	68fb      	ldr	r3, [r7, #12]
    c68a:	685b      	ldr	r3, [r3, #4]
    c68c:	79fa      	ldrb	r2, [r7, #7]
    c68e:	6839      	ldr	r1, [r7, #0]
    c690:	4610      	mov	r0, r2
    c692:	4798      	blx	r3
		}
		cg = cg->next;
    c694:	68fb      	ldr	r3, [r7, #12]
    c696:	681b      	ldr	r3, [r3, #0]
    c698:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c69a:	68fb      	ldr	r3, [r7, #12]
    c69c:	2b00      	cmp	r3, #0
    c69e:	d1ef      	bne.n	c680 <usbdc_change_notify+0x14>
	}
}
    c6a0:	bf00      	nop
    c6a2:	3710      	adds	r7, #16
    c6a4:	46bd      	mov	sp, r7
    c6a6:	bd80      	pop	{r7, pc}
    c6a8:	20000df0 	.word	0x20000df0

0000c6ac <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c6ac:	b580      	push	{r7, lr}
    c6ae:	b084      	sub	sp, #16
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	4603      	mov	r3, r0
    c6b4:	6039      	str	r1, [r7, #0]
    c6b6:	71fb      	strb	r3, [r7, #7]
    c6b8:	4613      	mov	r3, r2
    c6ba:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c6bc:	4b12      	ldr	r3, [pc, #72]	; (c708 <usbdc_request_handler+0x5c>)
    c6be:	689b      	ldr	r3, [r3, #8]
    c6c0:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c6c2:	e019      	b.n	c6f8 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c6c4:	68fb      	ldr	r3, [r7, #12]
    c6c6:	685b      	ldr	r3, [r3, #4]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	d012      	beq.n	c6f2 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c6cc:	68fb      	ldr	r3, [r7, #12]
    c6ce:	685b      	ldr	r3, [r3, #4]
    c6d0:	79ba      	ldrb	r2, [r7, #6]
    c6d2:	79f8      	ldrb	r0, [r7, #7]
    c6d4:	6839      	ldr	r1, [r7, #0]
    c6d6:	4798      	blx	r3
    c6d8:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c6da:	68bb      	ldr	r3, [r7, #8]
    c6dc:	2b00      	cmp	r3, #0
    c6de:	d101      	bne.n	c6e4 <usbdc_request_handler+0x38>
				return true;
    c6e0:	2301      	movs	r3, #1
    c6e2:	e00d      	b.n	c700 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c6e4:	68bb      	ldr	r3, [r7, #8]
    c6e6:	f113 0f0a 	cmn.w	r3, #10
    c6ea:	d002      	beq.n	c6f2 <usbdc_request_handler+0x46>
				return -1;
    c6ec:	f04f 33ff 	mov.w	r3, #4294967295
    c6f0:	e006      	b.n	c700 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c6f2:	68fb      	ldr	r3, [r7, #12]
    c6f4:	681b      	ldr	r3, [r3, #0]
    c6f6:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c6f8:	68fb      	ldr	r3, [r7, #12]
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	d1e2      	bne.n	c6c4 <usbdc_request_handler+0x18>
	}
	return false;
    c6fe:	2300      	movs	r3, #0
}
    c700:	4618      	mov	r0, r3
    c702:	3710      	adds	r7, #16
    c704:	46bd      	mov	sp, r7
    c706:	bd80      	pop	{r7, pc}
    c708:	20000df0 	.word	0x20000df0

0000c70c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c70c:	b580      	push	{r7, lr}
    c70e:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c710:	4b01      	ldr	r3, [pc, #4]	; (c718 <usbd_sof_cb+0xc>)
    c712:	4798      	blx	r3
}
    c714:	bf00      	nop
    c716:	bd80      	pop	{r7, pc}
    c718:	0000c639 	.word	0x0000c639

0000c71c <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c71c:	b580      	push	{r7, lr}
    c71e:	b082      	sub	sp, #8
    c720:	af00      	add	r7, sp, #0
    c722:	4603      	mov	r3, r0
    c724:	6039      	str	r1, [r7, #0]
    c726:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c728:	79fb      	ldrb	r3, [r7, #7]
    c72a:	2200      	movs	r2, #0
    c72c:	6839      	ldr	r1, [r7, #0]
    c72e:	4618      	mov	r0, r3
    c730:	4b14      	ldr	r3, [pc, #80]	; (c784 <usbdc_cb_ctl_req+0x68>)
    c732:	4798      	blx	r3
    c734:	4603      	mov	r3, r0
    c736:	f1b3 3fff 	cmp.w	r3, #4294967295
    c73a:	d00b      	beq.n	c754 <usbdc_cb_ctl_req+0x38>
    c73c:	2b01      	cmp	r3, #1
    c73e:	d007      	beq.n	c750 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c740:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c742:	683b      	ldr	r3, [r7, #0]
    c744:	781b      	ldrb	r3, [r3, #0]
    c746:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c74a:	2b00      	cmp	r3, #0
    c74c:	d007      	beq.n	c75e <usbdc_cb_ctl_req+0x42>
    c74e:	e003      	b.n	c758 <usbdc_cb_ctl_req+0x3c>
		return true;
    c750:	2301      	movs	r3, #1
    c752:	e013      	b.n	c77c <usbdc_cb_ctl_req+0x60>
		return false;
    c754:	2300      	movs	r3, #0
    c756:	e011      	b.n	c77c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c758:	2b80      	cmp	r3, #128	; 0x80
    c75a:	d007      	beq.n	c76c <usbdc_cb_ctl_req+0x50>
    c75c:	e00d      	b.n	c77a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c75e:	79fb      	ldrb	r3, [r7, #7]
    c760:	6839      	ldr	r1, [r7, #0]
    c762:	4618      	mov	r0, r3
    c764:	4b08      	ldr	r3, [pc, #32]	; (c788 <usbdc_cb_ctl_req+0x6c>)
    c766:	4798      	blx	r3
    c768:	4603      	mov	r3, r0
    c76a:	e007      	b.n	c77c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c76c:	79fb      	ldrb	r3, [r7, #7]
    c76e:	6839      	ldr	r1, [r7, #0]
    c770:	4618      	mov	r0, r3
    c772:	4b06      	ldr	r3, [pc, #24]	; (c78c <usbdc_cb_ctl_req+0x70>)
    c774:	4798      	blx	r3
    c776:	4603      	mov	r3, r0
    c778:	e000      	b.n	c77c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c77a:	2300      	movs	r3, #0
	}
}
    c77c:	4618      	mov	r0, r3
    c77e:	3708      	adds	r7, #8
    c780:	46bd      	mov	sp, r7
    c782:	bd80      	pop	{r7, pc}
    c784:	0000c6ad 	.word	0x0000c6ad
    c788:	0000c54d 	.word	0x0000c54d
    c78c:	0000c175 	.word	0x0000c175

0000c790 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c790:	b580      	push	{r7, lr}
    c792:	b082      	sub	sp, #8
    c794:	af00      	add	r7, sp, #0
    c796:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c798:	687b      	ldr	r3, [r7, #4]
    c79a:	781b      	ldrb	r3, [r3, #0]
    c79c:	2b00      	cmp	r3, #0
    c79e:	d135      	bne.n	c80c <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c7a0:	687b      	ldr	r3, [r7, #4]
    c7a2:	785b      	ldrb	r3, [r3, #1]
    c7a4:	2b05      	cmp	r3, #5
    c7a6:	d019      	beq.n	c7dc <usbdc_ctrl_status_end+0x4c>
    c7a8:	2b09      	cmp	r3, #9
    c7aa:	d000      	beq.n	c7ae <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c7ac:	e02f      	b.n	c80e <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c7ae:	687b      	ldr	r3, [r7, #4]
    c7b0:	885b      	ldrh	r3, [r3, #2]
    c7b2:	b29b      	uxth	r3, r3
    c7b4:	b2da      	uxtb	r2, r3
    c7b6:	4b17      	ldr	r3, [pc, #92]	; (c814 <usbdc_ctrl_status_end+0x84>)
    c7b8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c7ba:	687b      	ldr	r3, [r7, #4]
    c7bc:	885b      	ldrh	r3, [r3, #2]
    c7be:	b29b      	uxth	r3, r3
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d001      	beq.n	c7c8 <usbdc_ctrl_status_end+0x38>
    c7c4:	2204      	movs	r2, #4
    c7c6:	e000      	b.n	c7ca <usbdc_ctrl_status_end+0x3a>
    c7c8:	2203      	movs	r2, #3
    c7ca:	4b12      	ldr	r3, [pc, #72]	; (c814 <usbdc_ctrl_status_end+0x84>)
    c7cc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c7ce:	4b11      	ldr	r3, [pc, #68]	; (c814 <usbdc_ctrl_status_end+0x84>)
    c7d0:	7e9b      	ldrb	r3, [r3, #26]
    c7d2:	4619      	mov	r1, r3
    c7d4:	2001      	movs	r0, #1
    c7d6:	4b10      	ldr	r3, [pc, #64]	; (c818 <usbdc_ctrl_status_end+0x88>)
    c7d8:	4798      	blx	r3
		break;
    c7da:	e018      	b.n	c80e <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c7dc:	687b      	ldr	r3, [r7, #4]
    c7de:	885b      	ldrh	r3, [r3, #2]
    c7e0:	b29b      	uxth	r3, r3
    c7e2:	b2db      	uxtb	r3, r3
    c7e4:	4618      	mov	r0, r3
    c7e6:	4b0d      	ldr	r3, [pc, #52]	; (c81c <usbdc_ctrl_status_end+0x8c>)
    c7e8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c7ea:	687b      	ldr	r3, [r7, #4]
    c7ec:	885b      	ldrh	r3, [r3, #2]
    c7ee:	b29b      	uxth	r3, r3
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	d001      	beq.n	c7f8 <usbdc_ctrl_status_end+0x68>
    c7f4:	2203      	movs	r2, #3
    c7f6:	e000      	b.n	c7fa <usbdc_ctrl_status_end+0x6a>
    c7f8:	2202      	movs	r2, #2
    c7fa:	4b06      	ldr	r3, [pc, #24]	; (c814 <usbdc_ctrl_status_end+0x84>)
    c7fc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c7fe:	4b05      	ldr	r3, [pc, #20]	; (c814 <usbdc_ctrl_status_end+0x84>)
    c800:	7e9b      	ldrb	r3, [r3, #26]
    c802:	4619      	mov	r1, r3
    c804:	2001      	movs	r0, #1
    c806:	4b04      	ldr	r3, [pc, #16]	; (c818 <usbdc_ctrl_status_end+0x88>)
    c808:	4798      	blx	r3
		break;
    c80a:	e000      	b.n	c80e <usbdc_ctrl_status_end+0x7e>
		return;
    c80c:	bf00      	nop
	}
}
    c80e:	3708      	adds	r7, #8
    c810:	46bd      	mov	sp, r7
    c812:	bd80      	pop	{r7, pc}
    c814:	20000df0 	.word	0x20000df0
    c818:	0000c66d 	.word	0x0000c66d
    c81c:	0000c3ed 	.word	0x0000c3ed

0000c820 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c820:	b580      	push	{r7, lr}
    c822:	b082      	sub	sp, #8
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c828:	2201      	movs	r2, #1
    c82a:	6879      	ldr	r1, [r7, #4]
    c82c:	2000      	movs	r0, #0
    c82e:	4b03      	ldr	r3, [pc, #12]	; (c83c <usbdc_ctrl_data_end+0x1c>)
    c830:	4798      	blx	r3
	return false;
    c832:	2300      	movs	r3, #0
}
    c834:	4618      	mov	r0, r3
    c836:	3708      	adds	r7, #8
    c838:	46bd      	mov	sp, r7
    c83a:	bd80      	pop	{r7, pc}
    c83c:	0000c6ad 	.word	0x0000c6ad

0000c840 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c840:	b580      	push	{r7, lr}
    c842:	b082      	sub	sp, #8
    c844:	af00      	add	r7, sp, #0
    c846:	4603      	mov	r3, r0
    c848:	603a      	str	r2, [r7, #0]
    c84a:	71fb      	strb	r3, [r7, #7]
    c84c:	460b      	mov	r3, r1
    c84e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c850:	79bb      	ldrb	r3, [r7, #6]
    c852:	2b00      	cmp	r3, #0
    c854:	d002      	beq.n	c85c <usbdc_cb_ctl_done+0x1c>
    c856:	2b01      	cmp	r3, #1
    c858:	d004      	beq.n	c864 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c85a:	e008      	b.n	c86e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c85c:	6838      	ldr	r0, [r7, #0]
    c85e:	4b06      	ldr	r3, [pc, #24]	; (c878 <usbdc_cb_ctl_done+0x38>)
    c860:	4798      	blx	r3
		break;
    c862:	e004      	b.n	c86e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c864:	6838      	ldr	r0, [r7, #0]
    c866:	4b05      	ldr	r3, [pc, #20]	; (c87c <usbdc_cb_ctl_done+0x3c>)
    c868:	4798      	blx	r3
    c86a:	4603      	mov	r3, r0
    c86c:	e000      	b.n	c870 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c86e:	2300      	movs	r3, #0
}
    c870:	4618      	mov	r0, r3
    c872:	3708      	adds	r7, #8
    c874:	46bd      	mov	sp, r7
    c876:	bd80      	pop	{r7, pc}
    c878:	0000c791 	.word	0x0000c791
    c87c:	0000c821 	.word	0x0000c821

0000c880 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c880:	b580      	push	{r7, lr}
    c882:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c884:	4b10      	ldr	r3, [pc, #64]	; (c8c8 <usbdc_reset+0x48>)
    c886:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c888:	4b10      	ldr	r3, [pc, #64]	; (c8cc <usbdc_reset+0x4c>)
    c88a:	2202      	movs	r2, #2
    c88c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c88e:	4b0f      	ldr	r3, [pc, #60]	; (c8cc <usbdc_reset+0x4c>)
    c890:	2200      	movs	r2, #0
    c892:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c894:	4b0d      	ldr	r3, [pc, #52]	; (c8cc <usbdc_reset+0x4c>)
    c896:	2200      	movs	r2, #0
    c898:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c89a:	2000      	movs	r0, #0
    c89c:	4b0c      	ldr	r3, [pc, #48]	; (c8d0 <usbdc_reset+0x50>)
    c89e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c8a0:	4b0a      	ldr	r3, [pc, #40]	; (c8cc <usbdc_reset+0x4c>)
    c8a2:	7f1b      	ldrb	r3, [r3, #28]
    c8a4:	4618      	mov	r0, r3
    c8a6:	4b0b      	ldr	r3, [pc, #44]	; (c8d4 <usbdc_reset+0x54>)
    c8a8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c8aa:	4a0b      	ldr	r2, [pc, #44]	; (c8d8 <usbdc_reset+0x58>)
    c8ac:	2100      	movs	r1, #0
    c8ae:	2000      	movs	r0, #0
    c8b0:	4b0a      	ldr	r3, [pc, #40]	; (c8dc <usbdc_reset+0x5c>)
    c8b2:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c8b4:	4a0a      	ldr	r2, [pc, #40]	; (c8e0 <usbdc_reset+0x60>)
    c8b6:	2102      	movs	r1, #2
    c8b8:	2000      	movs	r0, #0
    c8ba:	4b08      	ldr	r3, [pc, #32]	; (c8dc <usbdc_reset+0x5c>)
    c8bc:	4798      	blx	r3
	usb_d_ep_enable(0);
    c8be:	2000      	movs	r0, #0
    c8c0:	4b08      	ldr	r3, [pc, #32]	; (c8e4 <usbdc_reset+0x64>)
    c8c2:	4798      	blx	r3
}
    c8c4:	bf00      	nop
    c8c6:	bd80      	pop	{r7, pc}
    c8c8:	0000c2cd 	.word	0x0000c2cd
    c8cc:	20000df0 	.word	0x20000df0
    c8d0:	00002fdd 	.word	0x00002fdd
    c8d4:	00002f19 	.word	0x00002f19
    c8d8:	0000c71d 	.word	0x0000c71d
    c8dc:	00003331 	.word	0x00003331
    c8e0:	0000c841 	.word	0x0000c841
    c8e4:	0000302d 	.word	0x0000302d

0000c8e8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c8e8:	b580      	push	{r7, lr}
    c8ea:	b082      	sub	sp, #8
    c8ec:	af00      	add	r7, sp, #0
    c8ee:	4603      	mov	r3, r0
    c8f0:	6039      	str	r1, [r7, #0]
    c8f2:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c8f4:	79fb      	ldrb	r3, [r7, #7]
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d002      	beq.n	c900 <usbd_event_cb+0x18>
    c8fa:	2b01      	cmp	r3, #1
    c8fc:	d005      	beq.n	c90a <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c8fe:	e007      	b.n	c910 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c900:	6839      	ldr	r1, [r7, #0]
    c902:	2000      	movs	r0, #0
    c904:	4b04      	ldr	r3, [pc, #16]	; (c918 <usbd_event_cb+0x30>)
    c906:	4798      	blx	r3
		break;
    c908:	e002      	b.n	c910 <usbd_event_cb+0x28>
		usbdc_reset();
    c90a:	4b04      	ldr	r3, [pc, #16]	; (c91c <usbd_event_cb+0x34>)
    c90c:	4798      	blx	r3
		break;
    c90e:	bf00      	nop
	}
}
    c910:	bf00      	nop
    c912:	3708      	adds	r7, #8
    c914:	46bd      	mov	sp, r7
    c916:	bd80      	pop	{r7, pc}
    c918:	0000c66d 	.word	0x0000c66d
    c91c:	0000c881 	.word	0x0000c881

0000c920 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c920:	b580      	push	{r7, lr}
    c922:	b088      	sub	sp, #32
    c924:	af00      	add	r7, sp, #0
    c926:	60b9      	str	r1, [r7, #8]
    c928:	607a      	str	r2, [r7, #4]
    c92a:	461a      	mov	r2, r3
    c92c:	4603      	mov	r3, r0
    c92e:	73fb      	strb	r3, [r7, #15]
    c930:	4613      	mov	r3, r2
    c932:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c934:	68bb      	ldr	r3, [r7, #8]
    c936:	617b      	str	r3, [r7, #20]
    c938:	687b      	ldr	r3, [r7, #4]
    c93a:	61bb      	str	r3, [r7, #24]
    c93c:	7bfb      	ldrb	r3, [r7, #15]
    c93e:	773b      	strb	r3, [r7, #28]
    c940:	7bbb      	ldrb	r3, [r7, #14]
    c942:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c944:	f107 0314 	add.w	r3, r7, #20
    c948:	4618      	mov	r0, r3
    c94a:	4b03      	ldr	r3, [pc, #12]	; (c958 <usbdc_xfer+0x38>)
    c94c:	4798      	blx	r3
    c94e:	4603      	mov	r3, r0
}
    c950:	4618      	mov	r0, r3
    c952:	3720      	adds	r7, #32
    c954:	46bd      	mov	sp, r7
    c956:	bd80      	pop	{r7, pc}
    c958:	0000309d 	.word	0x0000309d

0000c95c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b082      	sub	sp, #8
    c960:	af00      	add	r7, sp, #0
    c962:	4603      	mov	r3, r0
    c964:	6039      	str	r1, [r7, #0]
    c966:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c968:	79fb      	ldrb	r3, [r7, #7]
    c96a:	2b01      	cmp	r3, #1
    c96c:	d009      	beq.n	c982 <usbdc_register_handler+0x26>
    c96e:	2b02      	cmp	r3, #2
    c970:	d00c      	beq.n	c98c <usbdc_register_handler+0x30>
    c972:	2b00      	cmp	r3, #0
    c974:	d000      	beq.n	c978 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c976:	e00e      	b.n	c996 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c978:	6839      	ldr	r1, [r7, #0]
    c97a:	4809      	ldr	r0, [pc, #36]	; (c9a0 <usbdc_register_handler+0x44>)
    c97c:	4b09      	ldr	r3, [pc, #36]	; (c9a4 <usbdc_register_handler+0x48>)
    c97e:	4798      	blx	r3
		break;
    c980:	e009      	b.n	c996 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c982:	6839      	ldr	r1, [r7, #0]
    c984:	4808      	ldr	r0, [pc, #32]	; (c9a8 <usbdc_register_handler+0x4c>)
    c986:	4b07      	ldr	r3, [pc, #28]	; (c9a4 <usbdc_register_handler+0x48>)
    c988:	4798      	blx	r3
		break;
    c98a:	e004      	b.n	c996 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c98c:	6839      	ldr	r1, [r7, #0]
    c98e:	4807      	ldr	r0, [pc, #28]	; (c9ac <usbdc_register_handler+0x50>)
    c990:	4b04      	ldr	r3, [pc, #16]	; (c9a4 <usbdc_register_handler+0x48>)
    c992:	4798      	blx	r3
		break;
    c994:	bf00      	nop
	}
}
    c996:	bf00      	nop
    c998:	3708      	adds	r7, #8
    c99a:	46bd      	mov	sp, r7
    c99c:	bd80      	pop	{r7, pc}
    c99e:	bf00      	nop
    c9a0:	20000df4 	.word	0x20000df4
    c9a4:	00003489 	.word	0x00003489
    c9a8:	20000df8 	.word	0x20000df8
    c9ac:	20000dfc 	.word	0x20000dfc

0000c9b0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c9b0:	b580      	push	{r7, lr}
    c9b2:	b084      	sub	sp, #16
    c9b4:	af00      	add	r7, sp, #0
    c9b6:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c9b8:	687b      	ldr	r3, [r7, #4]
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	bf14      	ite	ne
    c9be:	2301      	movne	r3, #1
    c9c0:	2300      	moveq	r3, #0
    c9c2:	b2db      	uxtb	r3, r3
    c9c4:	f240 3255 	movw	r2, #853	; 0x355
    c9c8:	4910      	ldr	r1, [pc, #64]	; (ca0c <usbdc_init+0x5c>)
    c9ca:	4618      	mov	r0, r3
    c9cc:	4b10      	ldr	r3, [pc, #64]	; (ca10 <usbdc_init+0x60>)
    c9ce:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c9d0:	4b10      	ldr	r3, [pc, #64]	; (ca14 <usbdc_init+0x64>)
    c9d2:	4798      	blx	r3
    c9d4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c9d6:	68fb      	ldr	r3, [r7, #12]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	da01      	bge.n	c9e0 <usbdc_init+0x30>
		return rc;
    c9dc:	68fb      	ldr	r3, [r7, #12]
    c9de:	e010      	b.n	ca02 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c9e0:	2220      	movs	r2, #32
    c9e2:	2100      	movs	r1, #0
    c9e4:	480c      	ldr	r0, [pc, #48]	; (ca18 <usbdc_init+0x68>)
    c9e6:	4b0d      	ldr	r3, [pc, #52]	; (ca1c <usbdc_init+0x6c>)
    c9e8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c9ea:	4a0b      	ldr	r2, [pc, #44]	; (ca18 <usbdc_init+0x68>)
    c9ec:	687b      	ldr	r3, [r7, #4]
    c9ee:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c9f0:	490b      	ldr	r1, [pc, #44]	; (ca20 <usbdc_init+0x70>)
    c9f2:	2000      	movs	r0, #0
    c9f4:	4b0b      	ldr	r3, [pc, #44]	; (ca24 <usbdc_init+0x74>)
    c9f6:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c9f8:	490b      	ldr	r1, [pc, #44]	; (ca28 <usbdc_init+0x78>)
    c9fa:	2001      	movs	r0, #1
    c9fc:	4b09      	ldr	r3, [pc, #36]	; (ca24 <usbdc_init+0x74>)
    c9fe:	4798      	blx	r3

	return 0;
    ca00:	2300      	movs	r3, #0
}
    ca02:	4618      	mov	r0, r3
    ca04:	3710      	adds	r7, #16
    ca06:	46bd      	mov	sp, r7
    ca08:	bd80      	pop	{r7, pc}
    ca0a:	bf00      	nop
    ca0c:	0000f010 	.word	0x0000f010
    ca10:	000033ad 	.word	0x000033ad
    ca14:	00002e05 	.word	0x00002e05
    ca18:	20000df0 	.word	0x20000df0
    ca1c:	0000e951 	.word	0x0000e951
    ca20:	0000c70d 	.word	0x0000c70d
    ca24:	00002eb1 	.word	0x00002eb1
    ca28:	0000c8e9 	.word	0x0000c8e9

0000ca2c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ca2c:	b580      	push	{r7, lr}
    ca2e:	b082      	sub	sp, #8
    ca30:	af00      	add	r7, sp, #0
    ca32:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    ca34:	6879      	ldr	r1, [r7, #4]
    ca36:	4803      	ldr	r0, [pc, #12]	; (ca44 <usbdc_register_function+0x18>)
    ca38:	4b03      	ldr	r3, [pc, #12]	; (ca48 <usbdc_register_function+0x1c>)
    ca3a:	4798      	blx	r3
}
    ca3c:	bf00      	nop
    ca3e:	3708      	adds	r7, #8
    ca40:	46bd      	mov	sp, r7
    ca42:	bd80      	pop	{r7, pc}
    ca44:	20000e00 	.word	0x20000e00
    ca48:	00003489 	.word	0x00003489

0000ca4c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ca4c:	b580      	push	{r7, lr}
    ca4e:	b082      	sub	sp, #8
    ca50:	af00      	add	r7, sp, #0
    ca52:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    ca54:	4b0f      	ldr	r3, [pc, #60]	; (ca94 <usbdc_start+0x48>)
    ca56:	7e9b      	ldrb	r3, [r3, #26]
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d002      	beq.n	ca62 <usbdc_start+0x16>
		return ERR_BUSY;
    ca5c:	f06f 0303 	mvn.w	r3, #3
    ca60:	e013      	b.n	ca8a <usbdc_start+0x3e>
	}

	if (desces) {
    ca62:	687b      	ldr	r3, [r7, #4]
    ca64:	2b00      	cmp	r3, #0
    ca66:	d00e      	beq.n	ca86 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ca68:	4a0a      	ldr	r2, [pc, #40]	; (ca94 <usbdc_start+0x48>)
    ca6a:	687b      	ldr	r3, [r7, #4]
    ca6c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ca6e:	687b      	ldr	r3, [r7, #4]
    ca70:	681b      	ldr	r3, [r3, #0]
    ca72:	79da      	ldrb	r2, [r3, #7]
    ca74:	4b07      	ldr	r3, [pc, #28]	; (ca94 <usbdc_start+0x48>)
    ca76:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ca78:	4b06      	ldr	r3, [pc, #24]	; (ca94 <usbdc_start+0x48>)
    ca7a:	2201      	movs	r2, #1
    ca7c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ca7e:	4b06      	ldr	r3, [pc, #24]	; (ca98 <usbdc_start+0x4c>)
    ca80:	4798      	blx	r3
	return ERR_NONE;
    ca82:	2300      	movs	r3, #0
    ca84:	e001      	b.n	ca8a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ca86:	f06f 0308 	mvn.w	r3, #8
}
    ca8a:	4618      	mov	r0, r3
    ca8c:	3708      	adds	r7, #8
    ca8e:	46bd      	mov	sp, r7
    ca90:	bd80      	pop	{r7, pc}
    ca92:	bf00      	nop
    ca94:	20000df0 	.word	0x20000df0
    ca98:	00002ed5 	.word	0x00002ed5

0000ca9c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ca9c:	b580      	push	{r7, lr}
    ca9e:	af00      	add	r7, sp, #0
	usb_d_attach();
    caa0:	4b01      	ldr	r3, [pc, #4]	; (caa8 <usbdc_attach+0xc>)
    caa2:	4798      	blx	r3
}
    caa4:	bf00      	nop
    caa6:	bd80      	pop	{r7, pc}
    caa8:	00002ee9 	.word	0x00002ee9

0000caac <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    caac:	b480      	push	{r7}
    caae:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    cab0:	4b03      	ldr	r3, [pc, #12]	; (cac0 <usbdc_get_ctrl_buffer+0x14>)
    cab2:	695b      	ldr	r3, [r3, #20]
}
    cab4:	4618      	mov	r0, r3
    cab6:	46bd      	mov	sp, r7
    cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cabc:	4770      	bx	lr
    cabe:	bf00      	nop
    cac0:	20000df0 	.word	0x20000df0

0000cac4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cac4:	b480      	push	{r7}
    cac6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cac8:	4b07      	ldr	r3, [pc, #28]	; (cae8 <usbdc_get_state+0x24>)
    caca:	7e9b      	ldrb	r3, [r3, #26]
    cacc:	f003 0310 	and.w	r3, r3, #16
    cad0:	2b00      	cmp	r3, #0
    cad2:	d001      	beq.n	cad8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    cad4:	2310      	movs	r3, #16
    cad6:	e001      	b.n	cadc <usbdc_get_state+0x18>
	}
	return usbdc.state;
    cad8:	4b03      	ldr	r3, [pc, #12]	; (cae8 <usbdc_get_state+0x24>)
    cada:	7e9b      	ldrb	r3, [r3, #26]
}
    cadc:	4618      	mov	r0, r3
    cade:	46bd      	mov	sp, r7
    cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae4:	4770      	bx	lr
    cae6:	bf00      	nop
    cae8:	20000df0 	.word	0x20000df0

0000caec <usb_get_u16>:
{
    caec:	b480      	push	{r7}
    caee:	b083      	sub	sp, #12
    caf0:	af00      	add	r7, sp, #0
    caf2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	781b      	ldrb	r3, [r3, #0]
    caf8:	b29a      	uxth	r2, r3
    cafa:	687b      	ldr	r3, [r7, #4]
    cafc:	3301      	adds	r3, #1
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	b29b      	uxth	r3, r3
    cb02:	021b      	lsls	r3, r3, #8
    cb04:	b29b      	uxth	r3, r3
    cb06:	4413      	add	r3, r2
    cb08:	b29b      	uxth	r3, r3
}
    cb0a:	4618      	mov	r0, r3
    cb0c:	370c      	adds	r7, #12
    cb0e:	46bd      	mov	sp, r7
    cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb14:	4770      	bx	lr

0000cb16 <usb_desc_len>:
{
    cb16:	b480      	push	{r7}
    cb18:	b083      	sub	sp, #12
    cb1a:	af00      	add	r7, sp, #0
    cb1c:	6078      	str	r0, [r7, #4]
	return desc[0];
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	781b      	ldrb	r3, [r3, #0]
}
    cb22:	4618      	mov	r0, r3
    cb24:	370c      	adds	r7, #12
    cb26:	46bd      	mov	sp, r7
    cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb2c:	4770      	bx	lr

0000cb2e <usb_desc_type>:
{
    cb2e:	b480      	push	{r7}
    cb30:	b083      	sub	sp, #12
    cb32:	af00      	add	r7, sp, #0
    cb34:	6078      	str	r0, [r7, #4]
	return desc[1];
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	3301      	adds	r3, #1
    cb3a:	781b      	ldrb	r3, [r3, #0]
}
    cb3c:	4618      	mov	r0, r3
    cb3e:	370c      	adds	r7, #12
    cb40:	46bd      	mov	sp, r7
    cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb46:	4770      	bx	lr

0000cb48 <usb_desc_next>:
{
    cb48:	b580      	push	{r7, lr}
    cb4a:	b082      	sub	sp, #8
    cb4c:	af00      	add	r7, sp, #0
    cb4e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cb50:	6878      	ldr	r0, [r7, #4]
    cb52:	4b05      	ldr	r3, [pc, #20]	; (cb68 <usb_desc_next+0x20>)
    cb54:	4798      	blx	r3
    cb56:	4603      	mov	r3, r0
    cb58:	461a      	mov	r2, r3
    cb5a:	687b      	ldr	r3, [r7, #4]
    cb5c:	4413      	add	r3, r2
}
    cb5e:	4618      	mov	r0, r3
    cb60:	3708      	adds	r7, #8
    cb62:	46bd      	mov	sp, r7
    cb64:	bd80      	pop	{r7, pc}
    cb66:	bf00      	nop
    cb68:	0000cb17 	.word	0x0000cb17

0000cb6c <usb_cfg_desc_total_len>:
{
    cb6c:	b580      	push	{r7, lr}
    cb6e:	b082      	sub	sp, #8
    cb70:	af00      	add	r7, sp, #0
    cb72:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cb74:	687b      	ldr	r3, [r7, #4]
    cb76:	3302      	adds	r3, #2
    cb78:	4618      	mov	r0, r3
    cb7a:	4b03      	ldr	r3, [pc, #12]	; (cb88 <usb_cfg_desc_total_len+0x1c>)
    cb7c:	4798      	blx	r3
    cb7e:	4603      	mov	r3, r0
}
    cb80:	4618      	mov	r0, r3
    cb82:	3708      	adds	r7, #8
    cb84:	46bd      	mov	sp, r7
    cb86:	bd80      	pop	{r7, pc}
    cb88:	0000caed 	.word	0x0000caed

0000cb8c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cb8c:	b580      	push	{r7, lr}
    cb8e:	b082      	sub	sp, #8
    cb90:	af00      	add	r7, sp, #0
    cb92:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cb94:	6878      	ldr	r0, [r7, #4]
    cb96:	4b05      	ldr	r3, [pc, #20]	; (cbac <usb_cfg_desc_next+0x20>)
    cb98:	4798      	blx	r3
    cb9a:	4603      	mov	r3, r0
    cb9c:	461a      	mov	r2, r3
    cb9e:	687b      	ldr	r3, [r7, #4]
    cba0:	4413      	add	r3, r2
}
    cba2:	4618      	mov	r0, r3
    cba4:	3708      	adds	r7, #8
    cba6:	46bd      	mov	sp, r7
    cba8:	bd80      	pop	{r7, pc}
    cbaa:	bf00      	nop
    cbac:	0000cb6d 	.word	0x0000cb6d

0000cbb0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cbb0:	b580      	push	{r7, lr}
    cbb2:	b084      	sub	sp, #16
    cbb4:	af00      	add	r7, sp, #0
    cbb6:	60f8      	str	r0, [r7, #12]
    cbb8:	60b9      	str	r1, [r7, #8]
    cbba:	4613      	mov	r3, r2
    cbbc:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cbbe:	e015      	b.n	cbec <usb_find_desc+0x3c>
		_desc_len_check();
    cbc0:	68f8      	ldr	r0, [r7, #12]
    cbc2:	4b0f      	ldr	r3, [pc, #60]	; (cc00 <usb_find_desc+0x50>)
    cbc4:	4798      	blx	r3
    cbc6:	4603      	mov	r3, r0
    cbc8:	2b01      	cmp	r3, #1
    cbca:	d801      	bhi.n	cbd0 <usb_find_desc+0x20>
    cbcc:	2300      	movs	r3, #0
    cbce:	e012      	b.n	cbf6 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    cbd0:	68f8      	ldr	r0, [r7, #12]
    cbd2:	4b0c      	ldr	r3, [pc, #48]	; (cc04 <usb_find_desc+0x54>)
    cbd4:	4798      	blx	r3
    cbd6:	4603      	mov	r3, r0
    cbd8:	461a      	mov	r2, r3
    cbda:	79fb      	ldrb	r3, [r7, #7]
    cbdc:	4293      	cmp	r3, r2
    cbde:	d101      	bne.n	cbe4 <usb_find_desc+0x34>
			return desc;
    cbe0:	68fb      	ldr	r3, [r7, #12]
    cbe2:	e008      	b.n	cbf6 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    cbe4:	68f8      	ldr	r0, [r7, #12]
    cbe6:	4b08      	ldr	r3, [pc, #32]	; (cc08 <usb_find_desc+0x58>)
    cbe8:	4798      	blx	r3
    cbea:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cbec:	68fa      	ldr	r2, [r7, #12]
    cbee:	68bb      	ldr	r3, [r7, #8]
    cbf0:	429a      	cmp	r2, r3
    cbf2:	d3e5      	bcc.n	cbc0 <usb_find_desc+0x10>
	}
	return NULL;
    cbf4:	2300      	movs	r3, #0
}
    cbf6:	4618      	mov	r0, r3
    cbf8:	3710      	adds	r7, #16
    cbfa:	46bd      	mov	sp, r7
    cbfc:	bd80      	pop	{r7, pc}
    cbfe:	bf00      	nop
    cc00:	0000cb17 	.word	0x0000cb17
    cc04:	0000cb2f 	.word	0x0000cb2f
    cc08:	0000cb49 	.word	0x0000cb49

0000cc0c <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    cc0c:	b580      	push	{r7, lr}
    cc0e:	b082      	sub	sp, #8
    cc10:	af00      	add	r7, sp, #0
    cc12:	6078      	str	r0, [r7, #4]
    cc14:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cc16:	e019      	b.n	cc4c <usb_find_ep_desc+0x40>
		_desc_len_check();
    cc18:	6878      	ldr	r0, [r7, #4]
    cc1a:	4b12      	ldr	r3, [pc, #72]	; (cc64 <usb_find_ep_desc+0x58>)
    cc1c:	4798      	blx	r3
    cc1e:	4603      	mov	r3, r0
    cc20:	2b01      	cmp	r3, #1
    cc22:	d801      	bhi.n	cc28 <usb_find_ep_desc+0x1c>
    cc24:	2300      	movs	r3, #0
    cc26:	e018      	b.n	cc5a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cc28:	6878      	ldr	r0, [r7, #4]
    cc2a:	4b0f      	ldr	r3, [pc, #60]	; (cc68 <usb_find_ep_desc+0x5c>)
    cc2c:	4798      	blx	r3
    cc2e:	4603      	mov	r3, r0
    cc30:	2b04      	cmp	r3, #4
    cc32:	d010      	beq.n	cc56 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cc34:	6878      	ldr	r0, [r7, #4]
    cc36:	4b0c      	ldr	r3, [pc, #48]	; (cc68 <usb_find_ep_desc+0x5c>)
    cc38:	4798      	blx	r3
    cc3a:	4603      	mov	r3, r0
    cc3c:	2b05      	cmp	r3, #5
    cc3e:	d101      	bne.n	cc44 <usb_find_ep_desc+0x38>
			return desc;
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	e00a      	b.n	cc5a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cc44:	6878      	ldr	r0, [r7, #4]
    cc46:	4b09      	ldr	r3, [pc, #36]	; (cc6c <usb_find_ep_desc+0x60>)
    cc48:	4798      	blx	r3
    cc4a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cc4c:	687a      	ldr	r2, [r7, #4]
    cc4e:	683b      	ldr	r3, [r7, #0]
    cc50:	429a      	cmp	r2, r3
    cc52:	d3e1      	bcc.n	cc18 <usb_find_ep_desc+0xc>
    cc54:	e000      	b.n	cc58 <usb_find_ep_desc+0x4c>
			break;
    cc56:	bf00      	nop
	}
	return NULL;
    cc58:	2300      	movs	r3, #0
}
    cc5a:	4618      	mov	r0, r3
    cc5c:	3708      	adds	r7, #8
    cc5e:	46bd      	mov	sp, r7
    cc60:	bd80      	pop	{r7, pc}
    cc62:	bf00      	nop
    cc64:	0000cb17 	.word	0x0000cb17
    cc68:	0000cb2f 	.word	0x0000cb2f
    cc6c:	0000cb49 	.word	0x0000cb49

0000cc70 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cc70:	b580      	push	{r7, lr}
    cc72:	b084      	sub	sp, #16
    cc74:	af00      	add	r7, sp, #0
    cc76:	60f8      	str	r0, [r7, #12]
    cc78:	60b9      	str	r1, [r7, #8]
    cc7a:	4613      	mov	r3, r2
    cc7c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cc7e:	2202      	movs	r2, #2
    cc80:	68b9      	ldr	r1, [r7, #8]
    cc82:	68f8      	ldr	r0, [r7, #12]
    cc84:	4b15      	ldr	r3, [pc, #84]	; (ccdc <usb_find_cfg_desc+0x6c>)
    cc86:	4798      	blx	r3
    cc88:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    cc8a:	68fb      	ldr	r3, [r7, #12]
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d11a      	bne.n	ccc6 <usb_find_cfg_desc+0x56>
		return NULL;
    cc90:	2300      	movs	r3, #0
    cc92:	e01f      	b.n	ccd4 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    cc94:	68f8      	ldr	r0, [r7, #12]
    cc96:	4b12      	ldr	r3, [pc, #72]	; (cce0 <usb_find_cfg_desc+0x70>)
    cc98:	4798      	blx	r3
    cc9a:	4603      	mov	r3, r0
    cc9c:	2b01      	cmp	r3, #1
    cc9e:	d801      	bhi.n	cca4 <usb_find_cfg_desc+0x34>
    cca0:	2300      	movs	r3, #0
    cca2:	e017      	b.n	ccd4 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    cca4:	68fb      	ldr	r3, [r7, #12]
    cca6:	3301      	adds	r3, #1
    cca8:	781b      	ldrb	r3, [r3, #0]
    ccaa:	2b02      	cmp	r3, #2
    ccac:	d110      	bne.n	ccd0 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    ccae:	68fb      	ldr	r3, [r7, #12]
    ccb0:	3305      	adds	r3, #5
    ccb2:	781b      	ldrb	r3, [r3, #0]
    ccb4:	79fa      	ldrb	r2, [r7, #7]
    ccb6:	429a      	cmp	r2, r3
    ccb8:	d101      	bne.n	ccbe <usb_find_cfg_desc+0x4e>
			return desc;
    ccba:	68fb      	ldr	r3, [r7, #12]
    ccbc:	e00a      	b.n	ccd4 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ccbe:	68f8      	ldr	r0, [r7, #12]
    ccc0:	4b08      	ldr	r3, [pc, #32]	; (cce4 <usb_find_cfg_desc+0x74>)
    ccc2:	4798      	blx	r3
    ccc4:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ccc6:	68fa      	ldr	r2, [r7, #12]
    ccc8:	68bb      	ldr	r3, [r7, #8]
    ccca:	429a      	cmp	r2, r3
    cccc:	d3e2      	bcc.n	cc94 <usb_find_cfg_desc+0x24>
    ccce:	e000      	b.n	ccd2 <usb_find_cfg_desc+0x62>
			break;
    ccd0:	bf00      	nop
	}
	return NULL;
    ccd2:	2300      	movs	r3, #0
}
    ccd4:	4618      	mov	r0, r3
    ccd6:	3710      	adds	r7, #16
    ccd8:	46bd      	mov	sp, r7
    ccda:	bd80      	pop	{r7, pc}
    ccdc:	0000cbb1 	.word	0x0000cbb1
    cce0:	0000cb17 	.word	0x0000cb17
    cce4:	0000cb8d 	.word	0x0000cb8d

0000cce8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    cce8:	b580      	push	{r7, lr}
    ccea:	b086      	sub	sp, #24
    ccec:	af00      	add	r7, sp, #0
    ccee:	60f8      	str	r0, [r7, #12]
    ccf0:	60b9      	str	r1, [r7, #8]
    ccf2:	4613      	mov	r3, r2
    ccf4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ccf6:	2300      	movs	r3, #0
    ccf8:	75fb      	strb	r3, [r7, #23]
    ccfa:	e020      	b.n	cd3e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ccfc:	2203      	movs	r2, #3
    ccfe:	68b9      	ldr	r1, [r7, #8]
    cd00:	68f8      	ldr	r0, [r7, #12]
    cd02:	4b13      	ldr	r3, [pc, #76]	; (cd50 <usb_find_str_desc+0x68>)
    cd04:	4798      	blx	r3
    cd06:	60f8      	str	r0, [r7, #12]
		if (desc) {
    cd08:	68fb      	ldr	r3, [r7, #12]
    cd0a:	2b00      	cmp	r3, #0
    cd0c:	d015      	beq.n	cd3a <usb_find_str_desc+0x52>
			_desc_len_check();
    cd0e:	68f8      	ldr	r0, [r7, #12]
    cd10:	4b10      	ldr	r3, [pc, #64]	; (cd54 <usb_find_str_desc+0x6c>)
    cd12:	4798      	blx	r3
    cd14:	4603      	mov	r3, r0
    cd16:	2b01      	cmp	r3, #1
    cd18:	d801      	bhi.n	cd1e <usb_find_str_desc+0x36>
    cd1a:	2300      	movs	r3, #0
    cd1c:	e014      	b.n	cd48 <usb_find_str_desc+0x60>
			if (i == str_index) {
    cd1e:	7dfa      	ldrb	r2, [r7, #23]
    cd20:	79fb      	ldrb	r3, [r7, #7]
    cd22:	429a      	cmp	r2, r3
    cd24:	d101      	bne.n	cd2a <usb_find_str_desc+0x42>
				return desc;
    cd26:	68fb      	ldr	r3, [r7, #12]
    cd28:	e00e      	b.n	cd48 <usb_find_str_desc+0x60>
			}
			i++;
    cd2a:	7dfb      	ldrb	r3, [r7, #23]
    cd2c:	3301      	adds	r3, #1
    cd2e:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    cd30:	68f8      	ldr	r0, [r7, #12]
    cd32:	4b09      	ldr	r3, [pc, #36]	; (cd58 <usb_find_str_desc+0x70>)
    cd34:	4798      	blx	r3
    cd36:	60f8      	str	r0, [r7, #12]
    cd38:	e001      	b.n	cd3e <usb_find_str_desc+0x56>
		} else {
			return NULL;
    cd3a:	2300      	movs	r3, #0
    cd3c:	e004      	b.n	cd48 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    cd3e:	68fa      	ldr	r2, [r7, #12]
    cd40:	68bb      	ldr	r3, [r7, #8]
    cd42:	429a      	cmp	r2, r3
    cd44:	d3da      	bcc.n	ccfc <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    cd46:	2300      	movs	r3, #0
}
    cd48:	4618      	mov	r0, r3
    cd4a:	3718      	adds	r7, #24
    cd4c:	46bd      	mov	sp, r7
    cd4e:	bd80      	pop	{r7, pc}
    cd50:	0000cbb1 	.word	0x0000cbb1
    cd54:	0000cb17 	.word	0x0000cb17
    cd58:	0000cb49 	.word	0x0000cb49

0000cd5c <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    cd5c:	b480      	push	{r7}
    cd5e:	b083      	sub	sp, #12
    cd60:	af00      	add	r7, sp, #0
    cd62:	6078      	str	r0, [r7, #4]
    cd64:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    cd66:	687b      	ldr	r3, [r7, #4]
    cd68:	683a      	ldr	r2, [r7, #0]
    cd6a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    cd6c:	687b      	ldr	r3, [r7, #4]
    cd6e:	4618      	mov	r0, r3
    cd70:	370c      	adds	r7, #12
    cd72:	46bd      	mov	sp, r7
    cd74:	bc80      	pop	{r7}
    cd76:	4770      	bx	lr

0000cd78 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    cd78:	b480      	push	{r7}
    cd7a:	b083      	sub	sp, #12
    cd7c:	af00      	add	r7, sp, #0
    cd7e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    cd80:	687b      	ldr	r3, [r7, #4]
    cd82:	4618      	mov	r0, r3
    cd84:	370c      	adds	r7, #12
    cd86:	46bd      	mov	sp, r7
    cd88:	bc80      	pop	{r7}
    cd8a:	4770      	bx	lr

0000cd8c <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    cd8c:	b580      	push	{r7, lr}
    cd8e:	b084      	sub	sp, #16
    cd90:	af00      	add	r7, sp, #0
    cd92:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    cd94:	687b      	ldr	r3, [r7, #4]
    cd96:	4a14      	ldr	r2, [pc, #80]	; (cde8 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    cd98:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    cd9a:	687b      	ldr	r3, [r7, #4]
    cd9c:	4a12      	ldr	r2, [pc, #72]	; (cde8 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    cd9e:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    cda0:	687b      	ldr	r3, [r7, #4]
    cda2:	691a      	ldr	r2, [r3, #16]
    cda4:	687b      	ldr	r3, [r7, #4]
    cda6:	330c      	adds	r3, #12
    cda8:	4619      	mov	r1, r3
    cdaa:	4610      	mov	r0, r2
    cdac:	4b0f      	ldr	r3, [pc, #60]	; (cdec <_ZN14I2C_Sync_Class4InitEv+0x60>)
    cdae:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    cdb0:	687b      	ldr	r3, [r7, #4]
    cdb2:	691b      	ldr	r3, [r3, #16]
    cdb4:	4618      	mov	r0, r3
    cdb6:	4b0e      	ldr	r3, [pc, #56]	; (cdf0 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    cdb8:	4798      	blx	r3
    cdba:	4603      	mov	r3, r0
    cdbc:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    cdbe:	7bfb      	ldrb	r3, [r7, #15]
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	bf0c      	ite	eq
    cdc4:	2301      	moveq	r3, #1
    cdc6:	2300      	movne	r3, #0
    cdc8:	b2da      	uxtb	r2, r3
    cdca:	687b      	ldr	r3, [r7, #4]
    cdcc:	725a      	strb	r2, [r3, #9]
	i2c_initiated=isOK;
    cdce:	687b      	ldr	r3, [r7, #4]
    cdd0:	7a5b      	ldrb	r3, [r3, #9]
    cdd2:	b2da      	uxtb	r2, r3
    cdd4:	687b      	ldr	r3, [r7, #4]
    cdd6:	721a      	strb	r2, [r3, #8]
	return isOK;
    cdd8:	687b      	ldr	r3, [r7, #4]
    cdda:	7a5b      	ldrb	r3, [r3, #9]
    cddc:	b2db      	uxtb	r3, r3
	
}
    cdde:	4618      	mov	r0, r3
    cde0:	3710      	adds	r7, #16
    cde2:	46bd      	mov	sp, r7
    cde4:	bd80      	pop	{r7, pc}
    cde6:	bf00      	nop
    cde8:	20000e10 	.word	0x20000e10
    cdec:	000021fb 	.word	0x000021fb
    cdf0:	000021a1 	.word	0x000021a1

0000cdf4 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    cdf4:	b580      	push	{r7, lr}
    cdf6:	b082      	sub	sp, #8
    cdf8:	af00      	add	r7, sp, #0
    cdfa:	6078      	str	r0, [r7, #4]
    cdfc:	460b      	mov	r3, r1
    cdfe:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    ce00:	687b      	ldr	r3, [r7, #4]
    ce02:	691b      	ldr	r3, [r3, #16]
    ce04:	78fa      	ldrb	r2, [r7, #3]
    ce06:	b211      	sxth	r1, r2
    ce08:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ce0c:	4618      	mov	r0, r3
    ce0e:	4b03      	ldr	r3, [pc, #12]	; (ce1c <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    ce10:	4798      	blx	r3
    ce12:	4603      	mov	r3, r0
}
    ce14:	4618      	mov	r0, r3
    ce16:	3708      	adds	r7, #8
    ce18:	46bd      	mov	sp, r7
    ce1a:	bd80      	pop	{r7, pc}
    ce1c:	000021c1 	.word	0x000021c1

0000ce20 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    ce20:	b580      	push	{r7, lr}
    ce22:	b086      	sub	sp, #24
    ce24:	af00      	add	r7, sp, #0
    ce26:	60f8      	str	r0, [r7, #12]
    ce28:	60b9      	str	r1, [r7, #8]
    ce2a:	4613      	mov	r3, r2
    ce2c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    ce2e:	68fb      	ldr	r3, [r7, #12]
    ce30:	68db      	ldr	r3, [r3, #12]
    ce32:	88fa      	ldrh	r2, [r7, #6]
    ce34:	68b9      	ldr	r1, [r7, #8]
    ce36:	4618      	mov	r0, r3
    ce38:	4b03      	ldr	r3, [pc, #12]	; (ce48 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    ce3a:	4798      	blx	r3
    ce3c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    ce3e:	697b      	ldr	r3, [r7, #20]
}
    ce40:	4618      	mov	r0, r3
    ce42:	3718      	adds	r7, #24
    ce44:	46bd      	mov	sp, r7
    ce46:	bd80      	pop	{r7, pc}
    ce48:	0000e355 	.word	0x0000e355

0000ce4c <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    ce4c:	b580      	push	{r7, lr}
    ce4e:	b086      	sub	sp, #24
    ce50:	af00      	add	r7, sp, #0
    ce52:	60f8      	str	r0, [r7, #12]
    ce54:	60b9      	str	r1, [r7, #8]
    ce56:	4613      	mov	r3, r2
    ce58:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    ce5a:	68fb      	ldr	r3, [r7, #12]
    ce5c:	68db      	ldr	r3, [r3, #12]
    ce5e:	88fa      	ldrh	r2, [r7, #6]
    ce60:	68b9      	ldr	r1, [r7, #8]
    ce62:	4618      	mov	r0, r3
    ce64:	4b03      	ldr	r3, [pc, #12]	; (ce74 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    ce66:	4798      	blx	r3
    ce68:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    ce6a:	697b      	ldr	r3, [r7, #20]
}
    ce6c:	4618      	mov	r0, r3
    ce6e:	3718      	adds	r7, #24
    ce70:	46bd      	mov	sp, r7
    ce72:	bd80      	pop	{r7, pc}
    ce74:	0000e3a5 	.word	0x0000e3a5

0000ce78 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    ce78:	b480      	push	{r7}
    ce7a:	b083      	sub	sp, #12
    ce7c:	af00      	add	r7, sp, #0
    ce7e:	6078      	str	r0, [r7, #4]
    ce80:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    ce82:	687b      	ldr	r3, [r7, #4]
    ce84:	683a      	ldr	r2, [r7, #0]
    ce86:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	68db      	ldr	r3, [r3, #12]
    ce8c:	2200      	movs	r2, #0
    ce8e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    ce90:	4a06      	ldr	r2, [pc, #24]	; (ceac <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    ce92:	687b      	ldr	r3, [r7, #4]
    ce94:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    ce96:	687b      	ldr	r3, [r7, #4]
    ce98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ce9c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    ce9e:	687b      	ldr	r3, [r7, #4]
    cea0:	4618      	mov	r0, r3
    cea2:	370c      	adds	r7, #12
    cea4:	46bd      	mov	sp, r7
    cea6:	bc80      	pop	{r7}
    cea8:	4770      	bx	lr
    ceaa:	bf00      	nop
    ceac:	20000f90 	.word	0x20000f90

0000ceb0 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    ceb0:	b480      	push	{r7}
    ceb2:	b083      	sub	sp, #12
    ceb4:	af00      	add	r7, sp, #0
    ceb6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ceb8:	687b      	ldr	r3, [r7, #4]
    ceba:	2200      	movs	r2, #0
    cebc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	4618      	mov	r0, r3
    cec2:	370c      	adds	r7, #12
    cec4:	46bd      	mov	sp, r7
    cec6:	bc80      	pop	{r7}
    cec8:	4770      	bx	lr
	...

0000cecc <_ZL9InitArrayv>:


static void InitArray(){
    cecc:	b480      	push	{r7}
    cece:	b083      	sub	sp, #12
    ced0:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    ced2:	2301      	movs	r3, #1
    ced4:	607b      	str	r3, [r7, #4]
    ced6:	687b      	ldr	r3, [r7, #4]
    ced8:	2b1f      	cmp	r3, #31
    ceda:	dc34      	bgt.n	cf46 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    cedc:	491e      	ldr	r1, [pc, #120]	; (cf58 <_ZL9InitArrayv+0x8c>)
    cede:	687a      	ldr	r2, [r7, #4]
    cee0:	4613      	mov	r3, r2
    cee2:	009b      	lsls	r3, r3, #2
    cee4:	4413      	add	r3, r2
    cee6:	009b      	lsls	r3, r3, #2
    cee8:	440b      	add	r3, r1
    ceea:	2200      	movs	r2, #0
    ceec:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    ceee:	491a      	ldr	r1, [pc, #104]	; (cf58 <_ZL9InitArrayv+0x8c>)
    cef0:	687a      	ldr	r2, [r7, #4]
    cef2:	4613      	mov	r3, r2
    cef4:	009b      	lsls	r3, r3, #2
    cef6:	4413      	add	r3, r2
    cef8:	009b      	lsls	r3, r3, #2
    cefa:	440b      	add	r3, r1
    cefc:	330c      	adds	r3, #12
    cefe:	2200      	movs	r2, #0
    cf00:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    cf02:	687b      	ldr	r3, [r7, #4]
    cf04:	1e5a      	subs	r2, r3, #1
    cf06:	6879      	ldr	r1, [r7, #4]
    cf08:	460b      	mov	r3, r1
    cf0a:	009b      	lsls	r3, r3, #2
    cf0c:	440b      	add	r3, r1
    cf0e:	009b      	lsls	r3, r3, #2
    cf10:	4911      	ldr	r1, [pc, #68]	; (cf58 <_ZL9InitArrayv+0x8c>)
    cf12:	4419      	add	r1, r3
    cf14:	4810      	ldr	r0, [pc, #64]	; (cf58 <_ZL9InitArrayv+0x8c>)
    cf16:	4613      	mov	r3, r2
    cf18:	009b      	lsls	r3, r3, #2
    cf1a:	4413      	add	r3, r2
    cf1c:	009b      	lsls	r3, r3, #2
    cf1e:	4403      	add	r3, r0
    cf20:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    cf22:	4a0e      	ldr	r2, [pc, #56]	; (cf5c <_ZL9InitArrayv+0x90>)
    cf24:	687b      	ldr	r3, [r7, #4]
    cf26:	2100      	movs	r1, #0
    cf28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	3b01      	subs	r3, #1
    cf30:	687a      	ldr	r2, [r7, #4]
    cf32:	0092      	lsls	r2, r2, #2
    cf34:	4909      	ldr	r1, [pc, #36]	; (cf5c <_ZL9InitArrayv+0x90>)
    cf36:	440a      	add	r2, r1
    cf38:	4908      	ldr	r1, [pc, #32]	; (cf5c <_ZL9InitArrayv+0x90>)
    cf3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    cf3e:	687b      	ldr	r3, [r7, #4]
    cf40:	3301      	adds	r3, #1
    cf42:	607b      	str	r3, [r7, #4]
    cf44:	e7c7      	b.n	ced6 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    cf46:	4b06      	ldr	r3, [pc, #24]	; (cf60 <_ZL9InitArrayv+0x94>)
    cf48:	2201      	movs	r2, #1
    cf4a:	701a      	strb	r2, [r3, #0]
		
}
    cf4c:	bf00      	nop
    cf4e:	370c      	adds	r7, #12
    cf50:	46bd      	mov	sp, r7
    cf52:	bc80      	pop	{r7}
    cf54:	4770      	bx	lr
    cf56:	bf00      	nop
    cf58:	20000f94 	.word	0x20000f94
    cf5c:	20001214 	.word	0x20001214
    cf60:	20001294 	.word	0x20001294

0000cf64 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    cf64:	b580      	push	{r7, lr}
    cf66:	b082      	sub	sp, #8
    cf68:	af00      	add	r7, sp, #0
    cf6a:	6078      	str	r0, [r7, #4]
	ticks=0;
    cf6c:	687b      	ldr	r3, [r7, #4]
    cf6e:	2200      	movs	r2, #0
    cf70:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    cf72:	4b0d      	ldr	r3, [pc, #52]	; (cfa8 <_ZN11Timer_Class4InitEv+0x44>)
    cf74:	781b      	ldrb	r3, [r3, #0]
    cf76:	f083 0301 	eor.w	r3, r3, #1
    cf7a:	b2db      	uxtb	r3, r3
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	d001      	beq.n	cf84 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    cf80:	4b0a      	ldr	r3, [pc, #40]	; (cfac <_ZN11Timer_Class4InitEv+0x48>)
    cf82:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    cf84:	6878      	ldr	r0, [r7, #4]
    cf86:	4b0a      	ldr	r3, [pc, #40]	; (cfb0 <_ZN11Timer_Class4InitEv+0x4c>)
    cf88:	4798      	blx	r3
    cf8a:	4603      	mov	r3, r0
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	bf0c      	ite	eq
    cf90:	2301      	moveq	r3, #1
    cf92:	2300      	movne	r3, #0
    cf94:	b2da      	uxtb	r2, r3
    cf96:	687b      	ldr	r3, [r7, #4]
    cf98:	709a      	strb	r2, [r3, #2]
	return isOK;
    cf9a:	687b      	ldr	r3, [r7, #4]
    cf9c:	789b      	ldrb	r3, [r3, #2]
    cf9e:	b2db      	uxtb	r3, r3
}
    cfa0:	4618      	mov	r0, r3
    cfa2:	3708      	adds	r7, #8
    cfa4:	46bd      	mov	sp, r7
    cfa6:	bd80      	pop	{r7, pc}
    cfa8:	20001294 	.word	0x20001294
    cfac:	0000cecd 	.word	0x0000cecd
    cfb0:	0000cfb5 	.word	0x0000cfb5

0000cfb4 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    cfb4:	b580      	push	{r7, lr}
    cfb6:	b084      	sub	sp, #16
    cfb8:	af00      	add	r7, sp, #0
    cfba:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    cfbc:	687b      	ldr	r3, [r7, #4]
    cfbe:	68db      	ldr	r3, [r3, #12]
    cfc0:	4618      	mov	r0, r3
    cfc2:	4b04      	ldr	r3, [pc, #16]	; (cfd4 <_ZN11Timer_Class5StartEv+0x20>)
    cfc4:	4798      	blx	r3
    cfc6:	60f8      	str	r0, [r7, #12]
	return status;
    cfc8:	68fb      	ldr	r3, [r7, #12]
	
}
    cfca:	4618      	mov	r0, r3
    cfcc:	3710      	adds	r7, #16
    cfce:	46bd      	mov	sp, r7
    cfd0:	bd80      	pop	{r7, pc}
    cfd2:	bf00      	nop
    cfd4:	00002615 	.word	0x00002615

0000cfd8 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    cfd8:	b580      	push	{r7, lr}
    cfda:	b084      	sub	sp, #16
    cfdc:	af00      	add	r7, sp, #0
    cfde:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    cfe0:	687b      	ldr	r3, [r7, #4]
    cfe2:	68db      	ldr	r3, [r3, #12]
    cfe4:	4618      	mov	r0, r3
    cfe6:	4b05      	ldr	r3, [pc, #20]	; (cffc <_ZN11Timer_Class4StopEv+0x24>)
    cfe8:	4798      	blx	r3
    cfea:	60f8      	str	r0, [r7, #12]
	timeout=0;
    cfec:	687b      	ldr	r3, [r7, #4]
    cfee:	2200      	movs	r2, #0
    cff0:	705a      	strb	r2, [r3, #1]
	return status;
    cff2:	68fb      	ldr	r3, [r7, #12]
}
    cff4:	4618      	mov	r0, r3
    cff6:	3710      	adds	r7, #16
    cff8:	46bd      	mov	sp, r7
    cffa:	bd80      	pop	{r7, pc}
    cffc:	0000267d 	.word	0x0000267d

0000d000 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d000:	b580      	push	{r7, lr}
    d002:	b086      	sub	sp, #24
    d004:	af00      	add	r7, sp, #0
    d006:	60f8      	str	r0, [r7, #12]
    d008:	60b9      	str	r1, [r7, #8]
    d00a:	607a      	str	r2, [r7, #4]
    d00c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    d00e:	68b9      	ldr	r1, [r7, #8]
    d010:	68f8      	ldr	r0, [r7, #12]
    d012:	4b0e      	ldr	r3, [pc, #56]	; (d04c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d014:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    d016:	68fb      	ldr	r3, [r7, #12]
    d018:	699b      	ldr	r3, [r3, #24]
    d01a:	687a      	ldr	r2, [r7, #4]
    d01c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d01e:	68fb      	ldr	r3, [r7, #12]
    d020:	699b      	ldr	r3, [r3, #24]
    d022:	68ba      	ldr	r2, [r7, #8]
    d024:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d026:	68fb      	ldr	r3, [r7, #12]
    d028:	699b      	ldr	r3, [r3, #24]
    d02a:	78fa      	ldrb	r2, [r7, #3]
    d02c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d02e:	68fb      	ldr	r3, [r7, #12]
    d030:	68da      	ldr	r2, [r3, #12]
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	699b      	ldr	r3, [r3, #24]
    d036:	4619      	mov	r1, r3
    d038:	4610      	mov	r0, r2
    d03a:	4b05      	ldr	r3, [pc, #20]	; (d050 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    d03c:	4798      	blx	r3
    d03e:	6178      	str	r0, [r7, #20]
	
	return status;
    d040:	697b      	ldr	r3, [r7, #20]
}
    d042:	4618      	mov	r0, r3
    d044:	3718      	adds	r7, #24
    d046:	46bd      	mov	sp, r7
    d048:	bd80      	pop	{r7, pc}
    d04a:	bf00      	nop
    d04c:	0000d169 	.word	0x0000d169
    d050:	000026e9 	.word	0x000026e9

0000d054 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    d054:	b580      	push	{r7, lr}
    d056:	b082      	sub	sp, #8
    d058:	af00      	add	r7, sp, #0
    d05a:	6078      	str	r0, [r7, #4]
    d05c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    d05e:	6839      	ldr	r1, [r7, #0]
    d060:	6878      	ldr	r0, [r7, #4]
    d062:	4b0f      	ldr	r3, [pc, #60]	; (d0a0 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    d064:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    d066:	687b      	ldr	r3, [r7, #4]
    d068:	68db      	ldr	r3, [r3, #12]
    d06a:	f103 0218 	add.w	r2, r3, #24
    d06e:	687b      	ldr	r3, [r7, #4]
    d070:	699b      	ldr	r3, [r3, #24]
    d072:	4619      	mov	r1, r3
    d074:	4610      	mov	r0, r2
    d076:	4b0b      	ldr	r3, [pc, #44]	; (d0a4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    d078:	4798      	blx	r3
    d07a:	4603      	mov	r3, r0
    d07c:	2b00      	cmp	r3, #0
    d07e:	d007      	beq.n	d090 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    d080:	687b      	ldr	r3, [r7, #4]
    d082:	68da      	ldr	r2, [r3, #12]
    d084:	687b      	ldr	r3, [r7, #4]
    d086:	699b      	ldr	r3, [r3, #24]
    d088:	4619      	mov	r1, r3
    d08a:	4610      	mov	r0, r2
    d08c:	4b06      	ldr	r3, [pc, #24]	; (d0a8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    d08e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    d090:	687b      	ldr	r3, [r7, #4]
    d092:	699b      	ldr	r3, [r3, #24]
    d094:	2200      	movs	r2, #0
    d096:	60da      	str	r2, [r3, #12]
}
    d098:	bf00      	nop
    d09a:	3708      	adds	r7, #8
    d09c:	46bd      	mov	sp, r7
    d09e:	bd80      	pop	{r7, pc}
    d0a0:	0000d1e9 	.word	0x0000d1e9
    d0a4:	000033d5 	.word	0x000033d5
    d0a8:	000027ed 	.word	0x000027ed

0000d0ac <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    d0ac:	b590      	push	{r4, r7, lr}
    d0ae:	b087      	sub	sp, #28
    d0b0:	af00      	add	r7, sp, #0
    d0b2:	60f8      	str	r0, [r7, #12]
    d0b4:	60b9      	str	r1, [r7, #8]
    d0b6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    d0b8:	2300      	movs	r3, #0
    d0ba:	687a      	ldr	r2, [r7, #4]
    d0bc:	68b9      	ldr	r1, [r7, #8]
    d0be:	68f8      	ldr	r0, [r7, #12]
    d0c0:	4c0c      	ldr	r4, [pc, #48]	; (d0f4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    d0c2:	47a0      	blx	r4
    d0c4:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d0c6:	68fb      	ldr	r3, [r7, #12]
    d0c8:	68db      	ldr	r3, [r3, #12]
    d0ca:	681b      	ldr	r3, [r3, #0]
    d0cc:	699b      	ldr	r3, [r3, #24]
    d0ce:	68fa      	ldr	r2, [r7, #12]
    d0d0:	68d2      	ldr	r2, [r2, #12]
    d0d2:	3204      	adds	r2, #4
    d0d4:	4610      	mov	r0, r2
    d0d6:	4798      	blx	r3
    d0d8:	4603      	mov	r3, r0
    d0da:	2b00      	cmp	r3, #0
    d0dc:	d105      	bne.n	d0ea <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    d0de:	68fb      	ldr	r3, [r7, #12]
    d0e0:	68db      	ldr	r3, [r3, #12]
    d0e2:	4618      	mov	r0, r3
    d0e4:	4b04      	ldr	r3, [pc, #16]	; (d0f8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    d0e6:	4798      	blx	r3
    d0e8:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    d0ea:	697b      	ldr	r3, [r7, #20]
}
    d0ec:	4618      	mov	r0, r3
    d0ee:	371c      	adds	r7, #28
    d0f0:	46bd      	mov	sp, r7
    d0f2:	bd90      	pop	{r4, r7, pc}
    d0f4:	0000d001 	.word	0x0000d001
    d0f8:	00002615 	.word	0x00002615

0000d0fc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    d0fc:	b480      	push	{r7}
    d0fe:	b085      	sub	sp, #20
    d100:	af00      	add	r7, sp, #0
    d102:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d104:	2300      	movs	r3, #0
    d106:	73fb      	strb	r3, [r7, #15]
    d108:	7bfb      	ldrb	r3, [r7, #15]
    d10a:	2b1f      	cmp	r3, #31
    d10c:	dc23      	bgt.n	d156 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    d10e:	687b      	ldr	r3, [r7, #4]
    d110:	7f1a      	ldrb	r2, [r3, #28]
    d112:	7bfb      	ldrb	r3, [r7, #15]
    d114:	4413      	add	r3, r2
    d116:	b2db      	uxtb	r3, r3
    d118:	f003 031f 	and.w	r3, r3, #31
    d11c:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    d11e:	7bba      	ldrb	r2, [r7, #14]
    d120:	4910      	ldr	r1, [pc, #64]	; (d164 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d122:	4613      	mov	r3, r2
    d124:	009b      	lsls	r3, r3, #2
    d126:	4413      	add	r3, r2
    d128:	009b      	lsls	r3, r3, #2
    d12a:	440b      	add	r3, r1
    d12c:	330c      	adds	r3, #12
    d12e:	681b      	ldr	r3, [r3, #0]
    d130:	2b00      	cmp	r3, #0
    d132:	d10c      	bne.n	d14e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    d134:	7bba      	ldrb	r2, [r7, #14]
    d136:	4613      	mov	r3, r2
    d138:	009b      	lsls	r3, r3, #2
    d13a:	4413      	add	r3, r2
    d13c:	009b      	lsls	r3, r3, #2
    d13e:	4a09      	ldr	r2, [pc, #36]	; (d164 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d140:	441a      	add	r2, r3
    d142:	687b      	ldr	r3, [r7, #4]
    d144:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    d146:	687b      	ldr	r3, [r7, #4]
    d148:	7bba      	ldrb	r2, [r7, #14]
    d14a:	771a      	strb	r2, [r3, #28]
			return;
    d14c:	e006      	b.n	d15c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d14e:	7bfb      	ldrb	r3, [r7, #15]
    d150:	3301      	adds	r3, #1
    d152:	73fb      	strb	r3, [r7, #15]
    d154:	e7d8      	b.n	d108 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    d156:	687b      	ldr	r3, [r7, #4]
    d158:	4a02      	ldr	r2, [pc, #8]	; (d164 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d15a:	619a      	str	r2, [r3, #24]

}
    d15c:	3714      	adds	r7, #20
    d15e:	46bd      	mov	sp, r7
    d160:	bc80      	pop	{r7}
    d162:	4770      	bx	lr
    d164:	20000f94 	.word	0x20000f94

0000d168 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    d168:	b580      	push	{r7, lr}
    d16a:	b084      	sub	sp, #16
    d16c:	af00      	add	r7, sp, #0
    d16e:	6078      	str	r0, [r7, #4]
    d170:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d172:	2300      	movs	r3, #0
    d174:	73fb      	strb	r3, [r7, #15]
    d176:	7bfb      	ldrb	r3, [r7, #15]
    d178:	2b1f      	cmp	r3, #31
    d17a:	dc28      	bgt.n	d1ce <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    d17c:	687b      	ldr	r3, [r7, #4]
    d17e:	7f1a      	ldrb	r2, [r3, #28]
    d180:	7bfb      	ldrb	r3, [r7, #15]
    d182:	4413      	add	r3, r2
    d184:	b2db      	uxtb	r3, r3
    d186:	f003 031f 	and.w	r3, r3, #31
    d18a:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    d18c:	7bba      	ldrb	r2, [r7, #14]
    d18e:	4913      	ldr	r1, [pc, #76]	; (d1dc <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d190:	4613      	mov	r3, r2
    d192:	009b      	lsls	r3, r3, #2
    d194:	4413      	add	r3, r2
    d196:	009b      	lsls	r3, r3, #2
    d198:	440b      	add	r3, r1
    d19a:	330c      	adds	r3, #12
    d19c:	681a      	ldr	r2, [r3, #0]
    d19e:	683b      	ldr	r3, [r7, #0]
    d1a0:	429a      	cmp	r2, r3
    d1a2:	d110      	bne.n	d1c6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    d1a4:	6839      	ldr	r1, [r7, #0]
    d1a6:	6878      	ldr	r0, [r7, #4]
    d1a8:	4b0d      	ldr	r3, [pc, #52]	; (d1e0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    d1aa:	4798      	blx	r3
			task=&taskArray[j];
    d1ac:	7bba      	ldrb	r2, [r7, #14]
    d1ae:	4613      	mov	r3, r2
    d1b0:	009b      	lsls	r3, r3, #2
    d1b2:	4413      	add	r3, r2
    d1b4:	009b      	lsls	r3, r3, #2
    d1b6:	4a09      	ldr	r2, [pc, #36]	; (d1dc <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d1b8:	441a      	add	r2, r3
    d1ba:	687b      	ldr	r3, [r7, #4]
    d1bc:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    d1be:	687b      	ldr	r3, [r7, #4]
    d1c0:	7bba      	ldrb	r2, [r7, #14]
    d1c2:	771a      	strb	r2, [r3, #28]
			return;
    d1c4:	e006      	b.n	d1d4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d1c6:	7bfb      	ldrb	r3, [r7, #15]
    d1c8:	3301      	adds	r3, #1
    d1ca:	73fb      	strb	r3, [r7, #15]
    d1cc:	e7d3      	b.n	d176 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    d1ce:	6878      	ldr	r0, [r7, #4]
    d1d0:	4b04      	ldr	r3, [pc, #16]	; (d1e4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    d1d2:	4798      	blx	r3
	//task=&taskArray[0];

}
    d1d4:	3710      	adds	r7, #16
    d1d6:	46bd      	mov	sp, r7
    d1d8:	bd80      	pop	{r7, pc}
    d1da:	bf00      	nop
    d1dc:	20000f94 	.word	0x20000f94
    d1e0:	0000d055 	.word	0x0000d055
    d1e4:	0000d0fd 	.word	0x0000d0fd

0000d1e8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    d1e8:	b480      	push	{r7}
    d1ea:	b085      	sub	sp, #20
    d1ec:	af00      	add	r7, sp, #0
    d1ee:	6078      	str	r0, [r7, #4]
    d1f0:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d1f2:	2300      	movs	r3, #0
    d1f4:	73fb      	strb	r3, [r7, #15]
    d1f6:	7bfb      	ldrb	r3, [r7, #15]
    d1f8:	2b1f      	cmp	r3, #31
    d1fa:	dc19      	bgt.n	d230 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    d1fc:	7bfa      	ldrb	r2, [r7, #15]
    d1fe:	490f      	ldr	r1, [pc, #60]	; (d23c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d200:	4613      	mov	r3, r2
    d202:	009b      	lsls	r3, r3, #2
    d204:	4413      	add	r3, r2
    d206:	009b      	lsls	r3, r3, #2
    d208:	440b      	add	r3, r1
    d20a:	330c      	adds	r3, #12
    d20c:	681a      	ldr	r2, [r3, #0]
    d20e:	683b      	ldr	r3, [r7, #0]
    d210:	429a      	cmp	r2, r3
    d212:	d109      	bne.n	d228 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    d214:	7bfa      	ldrb	r2, [r7, #15]
    d216:	4613      	mov	r3, r2
    d218:	009b      	lsls	r3, r3, #2
    d21a:	4413      	add	r3, r2
    d21c:	009b      	lsls	r3, r3, #2
    d21e:	4a07      	ldr	r2, [pc, #28]	; (d23c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d220:	441a      	add	r2, r3
    d222:	687b      	ldr	r3, [r7, #4]
    d224:	619a      	str	r2, [r3, #24]
			return;
    d226:	e004      	b.n	d232 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d228:	7bfb      	ldrb	r3, [r7, #15]
    d22a:	3301      	adds	r3, #1
    d22c:	73fb      	strb	r3, [r7, #15]
    d22e:	e7e2      	b.n	d1f6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    d230:	bf00      	nop
}
    d232:	3714      	adds	r7, #20
    d234:	46bd      	mov	sp, r7
    d236:	bc80      	pop	{r7}
    d238:	4770      	bx	lr
    d23a:	bf00      	nop
    d23c:	20000f94 	.word	0x20000f94

0000d240 <_Z41__static_initialization_and_destruction_0ii>:
    d240:	b580      	push	{r7, lr}
    d242:	b082      	sub	sp, #8
    d244:	af00      	add	r7, sp, #0
    d246:	6078      	str	r0, [r7, #4]
    d248:	6039      	str	r1, [r7, #0]
    d24a:	687b      	ldr	r3, [r7, #4]
    d24c:	2b01      	cmp	r3, #1
    d24e:	d14c      	bne.n	d2ea <_Z41__static_initialization_and_destruction_0ii+0xaa>
    d250:	683b      	ldr	r3, [r7, #0]
    d252:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d256:	4293      	cmp	r3, r2
    d258:	d147      	bne.n	d2ea <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d25a:	4926      	ldr	r1, [pc, #152]	; (d2f4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    d25c:	4826      	ldr	r0, [pc, #152]	; (d2f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d25e:	4b27      	ldr	r3, [pc, #156]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d260:	4798      	blx	r3
    d262:	4a27      	ldr	r2, [pc, #156]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d264:	4927      	ldr	r1, [pc, #156]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d266:	4824      	ldr	r0, [pc, #144]	; (d2f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d268:	4b27      	ldr	r3, [pc, #156]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d26a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    d26c:	4927      	ldr	r1, [pc, #156]	; (d30c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d26e:	4828      	ldr	r0, [pc, #160]	; (d310 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d270:	4b22      	ldr	r3, [pc, #136]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d272:	4798      	blx	r3
    d274:	4a22      	ldr	r2, [pc, #136]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d276:	4923      	ldr	r1, [pc, #140]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d278:	4825      	ldr	r0, [pc, #148]	; (d310 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d27a:	4b23      	ldr	r3, [pc, #140]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d27c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    d27e:	4925      	ldr	r1, [pc, #148]	; (d314 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d280:	4825      	ldr	r0, [pc, #148]	; (d318 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d282:	4b1e      	ldr	r3, [pc, #120]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d284:	4798      	blx	r3
    d286:	4a1e      	ldr	r2, [pc, #120]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d288:	491e      	ldr	r1, [pc, #120]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d28a:	4823      	ldr	r0, [pc, #140]	; (d318 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d28c:	4b1e      	ldr	r3, [pc, #120]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d28e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    d290:	4922      	ldr	r1, [pc, #136]	; (d31c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    d292:	4823      	ldr	r0, [pc, #140]	; (d320 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d294:	4b19      	ldr	r3, [pc, #100]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d296:	4798      	blx	r3
    d298:	4a19      	ldr	r2, [pc, #100]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d29a:	491a      	ldr	r1, [pc, #104]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d29c:	4820      	ldr	r0, [pc, #128]	; (d320 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d29e:	4b1a      	ldr	r3, [pc, #104]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d2a0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    d2a2:	4920      	ldr	r1, [pc, #128]	; (d324 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    d2a4:	4820      	ldr	r0, [pc, #128]	; (d328 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d2a6:	4b15      	ldr	r3, [pc, #84]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d2a8:	4798      	blx	r3
    d2aa:	4a15      	ldr	r2, [pc, #84]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d2ac:	4915      	ldr	r1, [pc, #84]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d2ae:	481e      	ldr	r0, [pc, #120]	; (d328 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d2b0:	4b15      	ldr	r3, [pc, #84]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d2b2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    d2b4:	491d      	ldr	r1, [pc, #116]	; (d32c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    d2b6:	481e      	ldr	r0, [pc, #120]	; (d330 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d2b8:	4b10      	ldr	r3, [pc, #64]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d2ba:	4798      	blx	r3
    d2bc:	4a10      	ldr	r2, [pc, #64]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d2be:	4911      	ldr	r1, [pc, #68]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d2c0:	481b      	ldr	r0, [pc, #108]	; (d330 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d2c2:	4b11      	ldr	r3, [pc, #68]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d2c4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    d2c6:	491b      	ldr	r1, [pc, #108]	; (d334 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    d2c8:	481b      	ldr	r0, [pc, #108]	; (d338 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d2ca:	4b0c      	ldr	r3, [pc, #48]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d2cc:	4798      	blx	r3
    d2ce:	4a0c      	ldr	r2, [pc, #48]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d2d0:	490c      	ldr	r1, [pc, #48]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d2d2:	4819      	ldr	r0, [pc, #100]	; (d338 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d2d4:	4b0c      	ldr	r3, [pc, #48]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d2d6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    d2d8:	4918      	ldr	r1, [pc, #96]	; (d33c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    d2da:	4819      	ldr	r0, [pc, #100]	; (d340 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d2dc:	4b07      	ldr	r3, [pc, #28]	; (d2fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d2de:	4798      	blx	r3
    d2e0:	4a07      	ldr	r2, [pc, #28]	; (d300 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d2e2:	4908      	ldr	r1, [pc, #32]	; (d304 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d2e4:	4816      	ldr	r0, [pc, #88]	; (d340 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d2e6:	4b08      	ldr	r3, [pc, #32]	; (d308 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d2e8:	4798      	blx	r3
    d2ea:	bf00      	nop
    d2ec:	3708      	adds	r7, #8
    d2ee:	46bd      	mov	sp, r7
    d2f0:	bd80      	pop	{r7, pc}
    d2f2:	bf00      	nop
    d2f4:	20001574 	.word	0x20001574
    d2f8:	20000e90 	.word	0x20000e90
    d2fc:	0000ce79 	.word	0x0000ce79
    d300:	20000000 	.word	0x20000000
    d304:	0000ceb1 	.word	0x0000ceb1
    d308:	0000e799 	.word	0x0000e799
    d30c:	20001608 	.word	0x20001608
    d310:	20000eb0 	.word	0x20000eb0
    d314:	2000172c 	.word	0x2000172c
    d318:	20000ed0 	.word	0x20000ed0
    d31c:	20001628 	.word	0x20001628
    d320:	20000ef0 	.word	0x20000ef0
    d324:	200016ec 	.word	0x200016ec
    d328:	20000f10 	.word	0x20000f10
    d32c:	2000170c 	.word	0x2000170c
    d330:	20000f30 	.word	0x20000f30
    d334:	200015e4 	.word	0x200015e4
    d338:	20000f50 	.word	0x20000f50
    d33c:	20001684 	.word	0x20001684
    d340:	20000f70 	.word	0x20000f70

0000d344 <_GLOBAL__sub_I_ptrTimerClass>:
    d344:	b580      	push	{r7, lr}
    d346:	af00      	add	r7, sp, #0
    d348:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d34c:	2001      	movs	r0, #1
    d34e:	4b01      	ldr	r3, [pc, #4]	; (d354 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    d350:	4798      	blx	r3
    d352:	bd80      	pop	{r7, pc}
    d354:	0000d241 	.word	0x0000d241

0000d358 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d358:	b480      	push	{r7}
    d35a:	b083      	sub	sp, #12
    d35c:	af00      	add	r7, sp, #0
    d35e:	6078      	str	r0, [r7, #4]
    d360:	4a05      	ldr	r2, [pc, #20]	; (d378 <_ZN5PrintC1Ev+0x20>)
    d362:	687b      	ldr	r3, [r7, #4]
    d364:	601a      	str	r2, [r3, #0]
    d366:	687b      	ldr	r3, [r7, #4]
    d368:	2200      	movs	r2, #0
    d36a:	605a      	str	r2, [r3, #4]
    d36c:	687b      	ldr	r3, [r7, #4]
    d36e:	4618      	mov	r0, r3
    d370:	370c      	adds	r7, #12
    d372:	46bd      	mov	sp, r7
    d374:	bc80      	pop	{r7}
    d376:	4770      	bx	lr
    d378:	0000f09c 	.word	0x0000f09c

0000d37c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d37c:	b480      	push	{r7}
    d37e:	b083      	sub	sp, #12
    d380:	af00      	add	r7, sp, #0
    d382:	6078      	str	r0, [r7, #4]
    d384:	2300      	movs	r3, #0
    d386:	4618      	mov	r0, r3
    d388:	370c      	adds	r7, #12
    d38a:	46bd      	mov	sp, r7
    d38c:	bc80      	pop	{r7}
    d38e:	4770      	bx	lr

0000d390 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d390:	b480      	push	{r7}
    d392:	b083      	sub	sp, #12
    d394:	af00      	add	r7, sp, #0
    d396:	6078      	str	r0, [r7, #4]
    d398:	bf00      	nop
    d39a:	370c      	adds	r7, #12
    d39c:	46bd      	mov	sp, r7
    d39e:	bc80      	pop	{r7}
    d3a0:	4770      	bx	lr
	...

0000d3a4 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d3a4:	b580      	push	{r7, lr}
    d3a6:	b082      	sub	sp, #8
    d3a8:	af00      	add	r7, sp, #0
    d3aa:	6078      	str	r0, [r7, #4]
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	4618      	mov	r0, r3
    d3b0:	4b06      	ldr	r3, [pc, #24]	; (d3cc <_ZN6StreamC1Ev+0x28>)
    d3b2:	4798      	blx	r3
    d3b4:	4a06      	ldr	r2, [pc, #24]	; (d3d0 <_ZN6StreamC1Ev+0x2c>)
    d3b6:	687b      	ldr	r3, [r7, #4]
    d3b8:	601a      	str	r2, [r3, #0]
    d3ba:	687b      	ldr	r3, [r7, #4]
    d3bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d3c0:	609a      	str	r2, [r3, #8]
    d3c2:	687b      	ldr	r3, [r7, #4]
    d3c4:	4618      	mov	r0, r3
    d3c6:	3708      	adds	r7, #8
    d3c8:	46bd      	mov	sp, r7
    d3ca:	bd80      	pop	{r7, pc}
    d3cc:	0000d359 	.word	0x0000d359
    d3d0:	0000f060 	.word	0x0000f060

0000d3d4 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    d3d4:	b480      	push	{r7}
    d3d6:	b083      	sub	sp, #12
    d3d8:	af00      	add	r7, sp, #0
    d3da:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    d3dc:	4b06      	ldr	r3, [pc, #24]	; (d3f8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d3de:	681b      	ldr	r3, [r3, #0]
    d3e0:	2201      	movs	r2, #1
    d3e2:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    d3e4:	4b04      	ldr	r3, [pc, #16]	; (d3f8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d3e6:	681b      	ldr	r3, [r3, #0]
    d3e8:	2200      	movs	r2, #0
    d3ea:	741a      	strb	r2, [r3, #16]
	
}
    d3ec:	bf00      	nop
    d3ee:	370c      	adds	r7, #12
    d3f0:	46bd      	mov	sp, r7
    d3f2:	bc80      	pop	{r7}
    d3f4:	4770      	bx	lr
    d3f6:	bf00      	nop
    d3f8:	20001398 	.word	0x20001398

0000d3fc <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d3fc:	b480      	push	{r7}
    d3fe:	b083      	sub	sp, #12
    d400:	af00      	add	r7, sp, #0
    d402:	4603      	mov	r3, r0
    d404:	603a      	str	r2, [r7, #0]
    d406:	71fb      	strb	r3, [r7, #7]
    d408:	460b      	mov	r3, r1
    d40a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d40c:	4b08      	ldr	r3, [pc, #32]	; (d430 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d40e:	681b      	ldr	r3, [r3, #0]
    d410:	2201      	movs	r2, #1
    d412:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    d414:	4b06      	ldr	r3, [pc, #24]	; (d430 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d416:	681b      	ldr	r3, [r3, #0]
    d418:	2201      	movs	r2, #1
    d41a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d41c:	4b04      	ldr	r3, [pc, #16]	; (d430 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d41e:	681b      	ldr	r3, [r3, #0]
    d420:	2201      	movs	r2, #1
    d422:	741a      	strb	r2, [r3, #16]


	return false;
    d424:	2300      	movs	r3, #0
}
    d426:	4618      	mov	r0, r3
    d428:	370c      	adds	r7, #12
    d42a:	46bd      	mov	sp, r7
    d42c:	bc80      	pop	{r7}
    d42e:	4770      	bx	lr
    d430:	20001398 	.word	0x20001398

0000d434 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d434:	b480      	push	{r7}
    d436:	b083      	sub	sp, #12
    d438:	af00      	add	r7, sp, #0
    d43a:	4603      	mov	r3, r0
    d43c:	603a      	str	r2, [r7, #0]
    d43e:	71fb      	strb	r3, [r7, #7]
    d440:	460b      	mov	r3, r1
    d442:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d444:	4b08      	ldr	r3, [pc, #32]	; (d468 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d446:	681b      	ldr	r3, [r3, #0]
    d448:	2201      	movs	r2, #1
    d44a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    d44c:	4b06      	ldr	r3, [pc, #24]	; (d468 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d44e:	681b      	ldr	r3, [r3, #0]
    d450:	2201      	movs	r2, #1
    d452:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d454:	4b04      	ldr	r3, [pc, #16]	; (d468 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d456:	681b      	ldr	r3, [r3, #0]
    d458:	2201      	movs	r2, #1
    d45a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    d45c:	2300      	movs	r3, #0
}
    d45e:	4618      	mov	r0, r3
    d460:	370c      	adds	r7, #12
    d462:	46bd      	mov	sp, r7
    d464:	bc80      	pop	{r7}
    d466:	4770      	bx	lr
    d468:	20001398 	.word	0x20001398

0000d46c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    d46c:	b580      	push	{r7, lr}
    d46e:	b082      	sub	sp, #8
    d470:	af00      	add	r7, sp, #0
    d472:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    d474:	793b      	ldrb	r3, [r7, #4]
    d476:	f003 0301 	and.w	r3, r3, #1
    d47a:	b2db      	uxtb	r3, r3
    d47c:	2b00      	cmp	r3, #0
    d47e:	d013      	beq.n	d4a8 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    d480:	490c      	ldr	r1, [pc, #48]	; (d4b4 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    d482:	2000      	movs	r0, #0
    d484:	4b0c      	ldr	r3, [pc, #48]	; (d4b8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d486:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    d488:	490c      	ldr	r1, [pc, #48]	; (d4bc <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    d48a:	2001      	movs	r0, #1
    d48c:	4b0a      	ldr	r3, [pc, #40]	; (d4b8 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d48e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    d490:	4b0b      	ldr	r3, [pc, #44]	; (d4c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d492:	681b      	ldr	r3, [r3, #0]
    d494:	2201      	movs	r2, #1
    d496:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    d498:	4b09      	ldr	r3, [pc, #36]	; (d4c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d49a:	681b      	ldr	r3, [r3, #0]
    d49c:	2201      	movs	r2, #1
    d49e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    d4a0:	4b07      	ldr	r3, [pc, #28]	; (d4c0 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d4a2:	681b      	ldr	r3, [r3, #0]
    d4a4:	2201      	movs	r2, #1
    d4a6:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    d4a8:	2300      	movs	r3, #0
}
    d4aa:	4618      	mov	r0, r3
    d4ac:	3708      	adds	r7, #8
    d4ae:	46bd      	mov	sp, r7
    d4b0:	bd80      	pop	{r7, pc}
    d4b2:	bf00      	nop
    d4b4:	0000d3fd 	.word	0x0000d3fd
    d4b8:	0000bd25 	.word	0x0000bd25
    d4bc:	0000d435 	.word	0x0000d435
    d4c0:	20001398 	.word	0x20001398

0000d4c4 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    d4c4:	b580      	push	{r7, lr}
    d4c6:	b082      	sub	sp, #8
    d4c8:	af00      	add	r7, sp, #0
    d4ca:	6078      	str	r0, [r7, #4]
    d4cc:	687b      	ldr	r3, [r7, #4]
    d4ce:	4618      	mov	r0, r3
    d4d0:	4b0a      	ldr	r3, [pc, #40]	; (d4fc <_ZN9CDC_ClassC1Ev+0x38>)
    d4d2:	4798      	blx	r3
    d4d4:	687b      	ldr	r3, [r7, #4]
    d4d6:	3310      	adds	r3, #16
    d4d8:	4618      	mov	r0, r3
    d4da:	4b09      	ldr	r3, [pc, #36]	; (d500 <_ZN9CDC_ClassC1Ev+0x3c>)
    d4dc:	4798      	blx	r3
    d4de:	4a09      	ldr	r2, [pc, #36]	; (d504 <_ZN9CDC_ClassC1Ev+0x40>)
    d4e0:	687b      	ldr	r3, [r7, #4]
    d4e2:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    d4e4:	687b      	ldr	r3, [r7, #4]
    d4e6:	f04f 32ff 	mov.w	r2, #4294967295
    d4ea:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    d4ec:	4a06      	ldr	r2, [pc, #24]	; (d508 <_ZN9CDC_ClassC1Ev+0x44>)
    d4ee:	687b      	ldr	r3, [r7, #4]
    d4f0:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    d4f2:	687b      	ldr	r3, [r7, #4]
    d4f4:	4618      	mov	r0, r3
    d4f6:	3708      	adds	r7, #8
    d4f8:	46bd      	mov	sp, r7
    d4fa:	bd80      	pop	{r7, pc}
    d4fc:	0000d3a5 	.word	0x0000d3a5
    d500:	0000ddcd 	.word	0x0000ddcd
    d504:	0000f030 	.word	0x0000f030
    d508:	20001398 	.word	0x20001398

0000d50c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    d50c:	b580      	push	{r7, lr}
    d50e:	b082      	sub	sp, #8
    d510:	af00      	add	r7, sp, #0
    d512:	6078      	str	r0, [r7, #4]
    d514:	4a06      	ldr	r2, [pc, #24]	; (d530 <_ZN9CDC_ClassD1Ev+0x24>)
    d516:	687b      	ldr	r3, [r7, #4]
    d518:	601a      	str	r2, [r3, #0]
    d51a:	687b      	ldr	r3, [r7, #4]
    d51c:	3310      	adds	r3, #16
    d51e:	4618      	mov	r0, r3
    d520:	4b04      	ldr	r3, [pc, #16]	; (d534 <_ZN9CDC_ClassD1Ev+0x28>)
    d522:	4798      	blx	r3
{
} //~CDC_Class
    d524:	687b      	ldr	r3, [r7, #4]
    d526:	4618      	mov	r0, r3
    d528:	3708      	adds	r7, #8
    d52a:	46bd      	mov	sp, r7
    d52c:	bd80      	pop	{r7, pc}
    d52e:	bf00      	nop
    d530:	0000f030 	.word	0x0000f030
    d534:	0000dded 	.word	0x0000dded

0000d538 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    d538:	b580      	push	{r7, lr}
    d53a:	b082      	sub	sp, #8
    d53c:	af00      	add	r7, sp, #0
    d53e:	6078      	str	r0, [r7, #4]
	
	OnInit();
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	3310      	adds	r3, #16
    d544:	4618      	mov	r0, r3
    d546:	4b09      	ldr	r3, [pc, #36]	; (d56c <_ZN9CDC_Class4InitEv+0x34>)
    d548:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    d54a:	4909      	ldr	r1, [pc, #36]	; (d570 <_ZN9CDC_Class4InitEv+0x38>)
    d54c:	2003      	movs	r0, #3
    d54e:	4b09      	ldr	r3, [pc, #36]	; (d574 <_ZN9CDC_Class4InitEv+0x3c>)
    d550:	4798      	blx	r3
	delay_ms(100);
    d552:	2064      	movs	r0, #100	; 0x64
    d554:	4b08      	ldr	r3, [pc, #32]	; (d578 <_ZN9CDC_Class4InitEv+0x40>)
    d556:	4798      	blx	r3
		
	if (connected)
    d558:	687b      	ldr	r3, [r7, #4]
    d55a:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    d55c:	2064      	movs	r0, #100	; 0x64
    d55e:	4b06      	ldr	r3, [pc, #24]	; (d578 <_ZN9CDC_Class4InitEv+0x40>)
    d560:	4798      	blx	r3

	

}
    d562:	bf00      	nop
    d564:	3708      	adds	r7, #8
    d566:	46bd      	mov	sp, r7
    d568:	bd80      	pop	{r7, pc}
    d56a:	bf00      	nop
    d56c:	0000de01 	.word	0x0000de01
    d570:	0000d46d 	.word	0x0000d46d
    d574:	0000bd25 	.word	0x0000bd25
    d578:	00001e31 	.word	0x00001e31

0000d57c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    d57c:	b580      	push	{r7, lr}
    d57e:	b082      	sub	sp, #8
    d580:	af00      	add	r7, sp, #0
    d582:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    d584:	4b03      	ldr	r3, [pc, #12]	; (d594 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    d586:	4798      	blx	r3
    d588:	4603      	mov	r3, r0
	
}
    d58a:	4618      	mov	r0, r3
    d58c:	3708      	adds	r7, #8
    d58e:	46bd      	mov	sp, r7
    d590:	bd80      	pop	{r7, pc}
    d592:	bf00      	nop
    d594:	0000bd9d 	.word	0x0000bd9d

0000d598 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    d598:	b580      	push	{r7, lr}
    d59a:	b084      	sub	sp, #16
    d59c:	af00      	add	r7, sp, #0
    d59e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    d5a0:	687b      	ldr	r3, [r7, #4]
    d5a2:	699b      	ldr	r3, [r3, #24]
    d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
    d5a8:	bf14      	ite	ne
    d5aa:	2301      	movne	r3, #1
    d5ac:	2300      	moveq	r3, #0
    d5ae:	b2db      	uxtb	r3, r3
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d002      	beq.n	d5ba <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    d5b4:	687b      	ldr	r3, [r7, #4]
    d5b6:	699b      	ldr	r3, [r3, #24]
    d5b8:	e011      	b.n	d5de <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    d5ba:	687b      	ldr	r3, [r7, #4]
    d5bc:	681b      	ldr	r3, [r3, #0]
    d5be:	331c      	adds	r3, #28
    d5c0:	681b      	ldr	r3, [r3, #0]
    d5c2:	f107 010f 	add.w	r1, r7, #15
    d5c6:	2201      	movs	r2, #1
    d5c8:	6878      	ldr	r0, [r7, #4]
    d5ca:	4798      	blx	r3
    d5cc:	4602      	mov	r2, r0
    d5ce:	687b      	ldr	r3, [r7, #4]
    d5d0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    d5d2:	7bfb      	ldrb	r3, [r7, #15]
    d5d4:	461a      	mov	r2, r3
    d5d6:	687b      	ldr	r3, [r7, #4]
    d5d8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    d5da:	687b      	ldr	r3, [r7, #4]
    d5dc:	699b      	ldr	r3, [r3, #24]
}
    d5de:	4618      	mov	r0, r3
    d5e0:	3710      	adds	r7, #16
    d5e2:	46bd      	mov	sp, r7
    d5e4:	bd80      	pop	{r7, pc}
	...

0000d5e8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    d5e8:	b580      	push	{r7, lr}
    d5ea:	b086      	sub	sp, #24
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	60f8      	str	r0, [r7, #12]
    d5f0:	60b9      	str	r1, [r7, #8]
    d5f2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    d5f4:	68fb      	ldr	r3, [r7, #12]
    d5f6:	7c1b      	ldrb	r3, [r3, #16]
    d5f8:	b2db      	uxtb	r3, r3
    d5fa:	2b00      	cmp	r3, #0
    d5fc:	d02e      	beq.n	d65c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    d5fe:	687a      	ldr	r2, [r7, #4]
    d600:	4613      	mov	r3, r2
    d602:	009b      	lsls	r3, r3, #2
    d604:	4413      	add	r3, r2
    d606:	005b      	lsls	r3, r3, #1
    d608:	461a      	mov	r2, r3
    d60a:	4918      	ldr	r1, [pc, #96]	; (d66c <_ZN9CDC_Class8readDataEPvl+0x84>)
    d60c:	4818      	ldr	r0, [pc, #96]	; (d670 <_ZN9CDC_Class8readDataEPvl+0x88>)
    d60e:	4b19      	ldr	r3, [pc, #100]	; (d674 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    d610:	4798      	blx	r3
		rxReady=false;
    d612:	68fb      	ldr	r3, [r7, #12]
    d614:	2200      	movs	r2, #0
    d616:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    d618:	687b      	ldr	r3, [r7, #4]
    d61a:	4619      	mov	r1, r3
    d61c:	68b8      	ldr	r0, [r7, #8]
    d61e:	4b16      	ldr	r3, [pc, #88]	; (d678 <_ZN9CDC_Class8readDataEPvl+0x90>)
    d620:	4798      	blx	r3
    d622:	4603      	mov	r3, r0
    d624:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    d626:	68fb      	ldr	r3, [r7, #12]
    d628:	7d5b      	ldrb	r3, [r3, #21]
    d62a:	b2db      	uxtb	r3, r3
    d62c:	f083 0301 	eor.w	r3, r3, #1
    d630:	b2db      	uxtb	r3, r3
    d632:	2b00      	cmp	r3, #0
    d634:	d006      	beq.n	d644 <_ZN9CDC_Class8readDataEPvl+0x5c>
    d636:	68fb      	ldr	r3, [r7, #12]
    d638:	7c1b      	ldrb	r3, [r3, #16]
    d63a:	b2db      	uxtb	r3, r3
    d63c:	2b00      	cmp	r3, #0
    d63e:	d001      	beq.n	d644 <_ZN9CDC_Class8readDataEPvl+0x5c>
    d640:	2301      	movs	r3, #1
    d642:	e000      	b.n	d646 <_ZN9CDC_Class8readDataEPvl+0x5e>
    d644:	2300      	movs	r3, #0
    d646:	2b00      	cmp	r3, #0
    d648:	d000      	beq.n	d64c <_ZN9CDC_Class8readDataEPvl+0x64>
    d64a:	e7ec      	b.n	d626 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    d64c:	4808      	ldr	r0, [pc, #32]	; (d670 <_ZN9CDC_Class8readDataEPvl+0x88>)
    d64e:	4b0b      	ldr	r3, [pc, #44]	; (d67c <_ZN9CDC_Class8readDataEPvl+0x94>)
    d650:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    d652:	4906      	ldr	r1, [pc, #24]	; (d66c <_ZN9CDC_Class8readDataEPvl+0x84>)
    d654:	4806      	ldr	r0, [pc, #24]	; (d670 <_ZN9CDC_Class8readDataEPvl+0x88>)
    d656:	4b0a      	ldr	r3, [pc, #40]	; (d680 <_ZN9CDC_Class8readDataEPvl+0x98>)
    d658:	4798      	blx	r3
    d65a:	e001      	b.n	d660 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    d65c:	2300      	movs	r3, #0
    d65e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    d660:	7dfb      	ldrb	r3, [r7, #23]
}
    d662:	4618      	mov	r0, r3
    d664:	3718      	adds	r7, #24
    d666:	46bd      	mov	sp, r7
    d668:	bd80      	pop	{r7, pc}
    d66a:	bf00      	nop
    d66c:	0000d3d5 	.word	0x0000d3d5
    d670:	20001338 	.word	0x20001338
    d674:	0000d0ad 	.word	0x0000d0ad
    d678:	0000bc79 	.word	0x0000bc79
    d67c:	0000cfd9 	.word	0x0000cfd9
    d680:	0000d055 	.word	0x0000d055

0000d684 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    d684:	b580      	push	{r7, lr}
    d686:	b084      	sub	sp, #16
    d688:	af00      	add	r7, sp, #0
    d68a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    d68c:	687b      	ldr	r3, [r7, #4]
    d68e:	2200      	movs	r2, #0
    d690:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    d692:	f107 030f 	add.w	r3, r7, #15
    d696:	2101      	movs	r1, #1
    d698:	4618      	mov	r0, r3
    d69a:	4b08      	ldr	r3, [pc, #32]	; (d6bc <_ZN9CDC_Class4readEv+0x38>)
    d69c:	4798      	blx	r3
	while(!rxReady);
    d69e:	687b      	ldr	r3, [r7, #4]
    d6a0:	7d5b      	ldrb	r3, [r3, #21]
    d6a2:	b2db      	uxtb	r3, r3
    d6a4:	f083 0301 	eor.w	r3, r3, #1
    d6a8:	b2db      	uxtb	r3, r3
    d6aa:	2b00      	cmp	r3, #0
    d6ac:	d000      	beq.n	d6b0 <_ZN9CDC_Class4readEv+0x2c>
    d6ae:	e7f6      	b.n	d69e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    d6b0:	7bfb      	ldrb	r3, [r7, #15]
}
    d6b2:	4618      	mov	r0, r3
    d6b4:	3710      	adds	r7, #16
    d6b6:	46bd      	mov	sp, r7
    d6b8:	bd80      	pop	{r7, pc}
    d6ba:	bf00      	nop
    d6bc:	0000bc79 	.word	0x0000bc79

0000d6c0 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    d6c0:	b580      	push	{r7, lr}
    d6c2:	b082      	sub	sp, #8
    d6c4:	af00      	add	r7, sp, #0
    d6c6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    d6c8:	687b      	ldr	r3, [r7, #4]
    d6ca:	331c      	adds	r3, #28
    d6cc:	2140      	movs	r1, #64	; 0x40
    d6ce:	4618      	mov	r0, r3
    d6d0:	4b02      	ldr	r3, [pc, #8]	; (d6dc <_ZN9CDC_Class5flushEv+0x1c>)
    d6d2:	4798      	blx	r3
}
    d6d4:	bf00      	nop
    d6d6:	3708      	adds	r7, #8
    d6d8:	46bd      	mov	sp, r7
    d6da:	bd80      	pop	{r7, pc}
    d6dc:	0000bcbd 	.word	0x0000bcbd

0000d6e0 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    d6e0:	b580      	push	{r7, lr}
    d6e2:	b082      	sub	sp, #8
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    d6e8:	4b02      	ldr	r3, [pc, #8]	; (d6f4 <_ZN9CDC_Class5clearEv+0x14>)
    d6ea:	4798      	blx	r3
}
    d6ec:	bf00      	nop
    d6ee:	3708      	adds	r7, #8
    d6f0:	46bd      	mov	sp, r7
    d6f2:	bd80      	pop	{r7, pc}
    d6f4:	0000bd01 	.word	0x0000bd01

0000d6f8 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    d6f8:	b580      	push	{r7, lr}
    d6fa:	b082      	sub	sp, #8
    d6fc:	af00      	add	r7, sp, #0
    d6fe:	6078      	str	r0, [r7, #4]
    d700:	460b      	mov	r3, r1
    d702:	70fb      	strb	r3, [r7, #3]
	if (connected){
    d704:	687b      	ldr	r3, [r7, #4]
    d706:	7c1b      	ldrb	r3, [r3, #16]
    d708:	b2db      	uxtb	r3, r3
    d70a:	2b00      	cmp	r3, #0
    d70c:	d012      	beq.n	d734 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    d70e:	687b      	ldr	r3, [r7, #4]
    d710:	7d1b      	ldrb	r3, [r3, #20]
    d712:	b2db      	uxtb	r3, r3
    d714:	f083 0301 	eor.w	r3, r3, #1
    d718:	b2db      	uxtb	r3, r3
    d71a:	2b00      	cmp	r3, #0
    d71c:	d000      	beq.n	d720 <_ZN9CDC_Class5writeEh+0x28>
    d71e:	e7f6      	b.n	d70e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    d720:	687b      	ldr	r3, [r7, #4]
    d722:	681b      	ldr	r3, [r3, #0]
    d724:	3324      	adds	r3, #36	; 0x24
    d726:	681b      	ldr	r3, [r3, #0]
    d728:	1cf9      	adds	r1, r7, #3
    d72a:	2201      	movs	r2, #1
    d72c:	6878      	ldr	r0, [r7, #4]
    d72e:	4798      	blx	r3
    d730:	4603      	mov	r3, r0
    d732:	e000      	b.n	d736 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    d734:	2300      	movs	r3, #0
	}
		
}
    d736:	4618      	mov	r0, r3
    d738:	3708      	adds	r7, #8
    d73a:	46bd      	mov	sp, r7
    d73c:	bd80      	pop	{r7, pc}
	...

0000d740 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    d740:	b580      	push	{r7, lr}
    d742:	b086      	sub	sp, #24
    d744:	af00      	add	r7, sp, #0
    d746:	60f8      	str	r0, [r7, #12]
    d748:	60b9      	str	r1, [r7, #8]
    d74a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    d74c:	68fb      	ldr	r3, [r7, #12]
    d74e:	7c1b      	ldrb	r3, [r3, #16]
    d750:	b2db      	uxtb	r3, r3
    d752:	2b00      	cmp	r3, #0
    d754:	d02f      	beq.n	d7b6 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    d756:	687a      	ldr	r2, [r7, #4]
    d758:	4613      	mov	r3, r2
    d75a:	009b      	lsls	r3, r3, #2
    d75c:	4413      	add	r3, r2
    d75e:	005b      	lsls	r3, r3, #1
    d760:	461a      	mov	r2, r3
    d762:	4917      	ldr	r1, [pc, #92]	; (d7c0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    d764:	4817      	ldr	r0, [pc, #92]	; (d7c4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    d766:	4b18      	ldr	r3, [pc, #96]	; (d7c8 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    d768:	4798      	blx	r3
		txReady=false;
    d76a:	68fb      	ldr	r3, [r7, #12]
    d76c:	2200      	movs	r2, #0
    d76e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	4619      	mov	r1, r3
    d774:	68b8      	ldr	r0, [r7, #8]
    d776:	4b15      	ldr	r3, [pc, #84]	; (d7cc <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    d778:	4798      	blx	r3
    d77a:	4603      	mov	r3, r0
    d77c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    d77e:	68fb      	ldr	r3, [r7, #12]
    d780:	7d1b      	ldrb	r3, [r3, #20]
    d782:	b2db      	uxtb	r3, r3
    d784:	f083 0301 	eor.w	r3, r3, #1
    d788:	b2db      	uxtb	r3, r3
    d78a:	2b00      	cmp	r3, #0
    d78c:	d006      	beq.n	d79c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    d78e:	68fb      	ldr	r3, [r7, #12]
    d790:	7c1b      	ldrb	r3, [r3, #16]
    d792:	b2db      	uxtb	r3, r3
    d794:	2b00      	cmp	r3, #0
    d796:	d001      	beq.n	d79c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    d798:	2301      	movs	r3, #1
    d79a:	e000      	b.n	d79e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    d79c:	2300      	movs	r3, #0
    d79e:	2b00      	cmp	r3, #0
    d7a0:	d000      	beq.n	d7a4 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    d7a2:	e7ec      	b.n	d77e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    d7a4:	4807      	ldr	r0, [pc, #28]	; (d7c4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    d7a6:	4b0a      	ldr	r3, [pc, #40]	; (d7d0 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    d7a8:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    d7aa:	4905      	ldr	r1, [pc, #20]	; (d7c0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    d7ac:	4805      	ldr	r0, [pc, #20]	; (d7c4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    d7ae:	4b09      	ldr	r3, [pc, #36]	; (d7d4 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    d7b0:	4798      	blx	r3
		return r;
    d7b2:	697b      	ldr	r3, [r7, #20]
    d7b4:	e000      	b.n	d7b8 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    d7b6:	2300      	movs	r3, #0
	}
	

}
    d7b8:	4618      	mov	r0, r3
    d7ba:	3718      	adds	r7, #24
    d7bc:	46bd      	mov	sp, r7
    d7be:	bd80      	pop	{r7, pc}
    d7c0:	0000d3d5 	.word	0x0000d3d5
    d7c4:	20001338 	.word	0x20001338
    d7c8:	0000d0ad 	.word	0x0000d0ad
    d7cc:	0000bcbd 	.word	0x0000bcbd
    d7d0:	0000cfd9 	.word	0x0000cfd9
    d7d4:	0000d055 	.word	0x0000d055

0000d7d8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    d7d8:	b580      	push	{r7, lr}
    d7da:	b086      	sub	sp, #24
    d7dc:	af00      	add	r7, sp, #0
    d7de:	60f8      	str	r0, [r7, #12]
    d7e0:	60b9      	str	r1, [r7, #8]
    d7e2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    d7e4:	68fb      	ldr	r3, [r7, #12]
    d7e6:	2200      	movs	r2, #0
    d7e8:	751a      	strb	r2, [r3, #20]

 	if (connected){
    d7ea:	68fb      	ldr	r3, [r7, #12]
    d7ec:	7c1b      	ldrb	r3, [r3, #16]
    d7ee:	b2db      	uxtb	r3, r3
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d02a      	beq.n	d84a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    d7f4:	687a      	ldr	r2, [r7, #4]
    d7f6:	4613      	mov	r3, r2
    d7f8:	009b      	lsls	r3, r3, #2
    d7fa:	4413      	add	r3, r2
    d7fc:	005b      	lsls	r3, r3, #1
    d7fe:	461a      	mov	r2, r3
    d800:	4915      	ldr	r1, [pc, #84]	; (d858 <_ZN9CDC_Class5writeEPKhj+0x80>)
    d802:	4816      	ldr	r0, [pc, #88]	; (d85c <_ZN9CDC_Class5writeEPKhj+0x84>)
    d804:	4b16      	ldr	r3, [pc, #88]	; (d860 <_ZN9CDC_Class5writeEPKhj+0x88>)
    d806:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    d808:	6879      	ldr	r1, [r7, #4]
    d80a:	68b8      	ldr	r0, [r7, #8]
    d80c:	4b15      	ldr	r3, [pc, #84]	; (d864 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    d80e:	4798      	blx	r3
    d810:	4603      	mov	r3, r0
    d812:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    d814:	68fb      	ldr	r3, [r7, #12]
    d816:	7d1b      	ldrb	r3, [r3, #20]
    d818:	b2db      	uxtb	r3, r3
    d81a:	f083 0301 	eor.w	r3, r3, #1
    d81e:	b2db      	uxtb	r3, r3
    d820:	2b00      	cmp	r3, #0
    d822:	d006      	beq.n	d832 <_ZN9CDC_Class5writeEPKhj+0x5a>
    d824:	68fb      	ldr	r3, [r7, #12]
    d826:	7c1b      	ldrb	r3, [r3, #16]
    d828:	b2db      	uxtb	r3, r3
    d82a:	2b00      	cmp	r3, #0
    d82c:	d001      	beq.n	d832 <_ZN9CDC_Class5writeEPKhj+0x5a>
    d82e:	2301      	movs	r3, #1
    d830:	e000      	b.n	d834 <_ZN9CDC_Class5writeEPKhj+0x5c>
    d832:	2300      	movs	r3, #0
    d834:	2b00      	cmp	r3, #0
    d836:	d000      	beq.n	d83a <_ZN9CDC_Class5writeEPKhj+0x62>
    d838:	e7ec      	b.n	d814 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    d83a:	4808      	ldr	r0, [pc, #32]	; (d85c <_ZN9CDC_Class5writeEPKhj+0x84>)
    d83c:	4b0a      	ldr	r3, [pc, #40]	; (d868 <_ZN9CDC_Class5writeEPKhj+0x90>)
    d83e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    d840:	4905      	ldr	r1, [pc, #20]	; (d858 <_ZN9CDC_Class5writeEPKhj+0x80>)
    d842:	4806      	ldr	r0, [pc, #24]	; (d85c <_ZN9CDC_Class5writeEPKhj+0x84>)
    d844:	4b09      	ldr	r3, [pc, #36]	; (d86c <_ZN9CDC_Class5writeEPKhj+0x94>)
    d846:	4798      	blx	r3
    d848:	e001      	b.n	d84e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    d84a:	2300      	movs	r3, #0
    d84c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    d84e:	697b      	ldr	r3, [r7, #20]
}
    d850:	4618      	mov	r0, r3
    d852:	3718      	adds	r7, #24
    d854:	46bd      	mov	sp, r7
    d856:	bd80      	pop	{r7, pc}
    d858:	0000d3d5 	.word	0x0000d3d5
    d85c:	20001338 	.word	0x20001338
    d860:	0000d0ad 	.word	0x0000d0ad
    d864:	0000bcbd 	.word	0x0000bcbd
    d868:	0000cfd9 	.word	0x0000cfd9
    d86c:	0000d055 	.word	0x0000d055

0000d870 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    d870:	b480      	push	{r7}
    d872:	b083      	sub	sp, #12
    d874:	af00      	add	r7, sp, #0
    d876:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    d878:	687b      	ldr	r3, [r7, #4]
    d87a:	7d5b      	ldrb	r3, [r3, #21]
    d87c:	b2db      	uxtb	r3, r3
    d87e:	2b00      	cmp	r3, #0
    d880:	d006      	beq.n	d890 <_ZN9CDC_Class9availableEv+0x20>
    d882:	687b      	ldr	r3, [r7, #4]
    d884:	7d1b      	ldrb	r3, [r3, #20]
    d886:	b2db      	uxtb	r3, r3
    d888:	2b00      	cmp	r3, #0
    d88a:	d001      	beq.n	d890 <_ZN9CDC_Class9availableEv+0x20>
    d88c:	2301      	movs	r3, #1
    d88e:	e000      	b.n	d892 <_ZN9CDC_Class9availableEv+0x22>
    d890:	2300      	movs	r3, #0
    d892:	2b00      	cmp	r3, #0
    d894:	d001      	beq.n	d89a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    d896:	2301      	movs	r3, #1
    d898:	e000      	b.n	d89c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    d89a:	2300      	movs	r3, #0
	}
	
}
    d89c:	4618      	mov	r0, r3
    d89e:	370c      	adds	r7, #12
    d8a0:	46bd      	mov	sp, r7
    d8a2:	bc80      	pop	{r7}
    d8a4:	4770      	bx	lr
	...

0000d8a8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    d8a8:	b580      	push	{r7, lr}
    d8aa:	b082      	sub	sp, #8
    d8ac:	af00      	add	r7, sp, #0
    d8ae:	6078      	str	r0, [r7, #4]
    d8b0:	6039      	str	r1, [r7, #0]
    d8b2:	687b      	ldr	r3, [r7, #4]
    d8b4:	2b01      	cmp	r3, #1
    d8b6:	d154      	bne.n	d962 <_Z41__static_initialization_and_destruction_0ii+0xba>
    d8b8:	683b      	ldr	r3, [r7, #0]
    d8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d8be:	4293      	cmp	r3, r2
    d8c0:	d14f      	bne.n	d962 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d8c2:	492a      	ldr	r1, [pc, #168]	; (d96c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d8c4:	482a      	ldr	r0, [pc, #168]	; (d970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d8c6:	4b2b      	ldr	r3, [pc, #172]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d8c8:	4798      	blx	r3
    d8ca:	4a2b      	ldr	r2, [pc, #172]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d8cc:	492b      	ldr	r1, [pc, #172]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d8ce:	4828      	ldr	r0, [pc, #160]	; (d970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d8d0:	4b2b      	ldr	r3, [pc, #172]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d8d2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    d8d4:	492b      	ldr	r1, [pc, #172]	; (d984 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    d8d6:	482c      	ldr	r0, [pc, #176]	; (d988 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d8d8:	4b26      	ldr	r3, [pc, #152]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d8da:	4798      	blx	r3
    d8dc:	4a26      	ldr	r2, [pc, #152]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d8de:	4927      	ldr	r1, [pc, #156]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d8e0:	4829      	ldr	r0, [pc, #164]	; (d988 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d8e2:	4b27      	ldr	r3, [pc, #156]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d8e4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    d8e6:	4929      	ldr	r1, [pc, #164]	; (d98c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    d8e8:	4829      	ldr	r0, [pc, #164]	; (d990 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d8ea:	4b22      	ldr	r3, [pc, #136]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d8ec:	4798      	blx	r3
    d8ee:	4a22      	ldr	r2, [pc, #136]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d8f0:	4922      	ldr	r1, [pc, #136]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d8f2:	4827      	ldr	r0, [pc, #156]	; (d990 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d8f4:	4b22      	ldr	r3, [pc, #136]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d8f6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    d8f8:	4926      	ldr	r1, [pc, #152]	; (d994 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    d8fa:	4827      	ldr	r0, [pc, #156]	; (d998 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d8fc:	4b1d      	ldr	r3, [pc, #116]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d8fe:	4798      	blx	r3
    d900:	4a1d      	ldr	r2, [pc, #116]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d902:	491e      	ldr	r1, [pc, #120]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d904:	4824      	ldr	r0, [pc, #144]	; (d998 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d906:	4b1e      	ldr	r3, [pc, #120]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d908:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    d90a:	4924      	ldr	r1, [pc, #144]	; (d99c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    d90c:	4824      	ldr	r0, [pc, #144]	; (d9a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d90e:	4b19      	ldr	r3, [pc, #100]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d910:	4798      	blx	r3
    d912:	4a19      	ldr	r2, [pc, #100]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d914:	4919      	ldr	r1, [pc, #100]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d916:	4822      	ldr	r0, [pc, #136]	; (d9a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d918:	4b19      	ldr	r3, [pc, #100]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d91a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    d91c:	4921      	ldr	r1, [pc, #132]	; (d9a4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    d91e:	4822      	ldr	r0, [pc, #136]	; (d9a8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d920:	4b14      	ldr	r3, [pc, #80]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d922:	4798      	blx	r3
    d924:	4a14      	ldr	r2, [pc, #80]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d926:	4915      	ldr	r1, [pc, #84]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d928:	481f      	ldr	r0, [pc, #124]	; (d9a8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d92a:	4b15      	ldr	r3, [pc, #84]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d92c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    d92e:	491f      	ldr	r1, [pc, #124]	; (d9ac <_Z41__static_initialization_and_destruction_0ii+0x104>)
    d930:	481f      	ldr	r0, [pc, #124]	; (d9b0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    d932:	4b10      	ldr	r3, [pc, #64]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d934:	4798      	blx	r3
    d936:	4a10      	ldr	r2, [pc, #64]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d938:	4910      	ldr	r1, [pc, #64]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d93a:	481d      	ldr	r0, [pc, #116]	; (d9b0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    d93c:	4b10      	ldr	r3, [pc, #64]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d93e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    d940:	491c      	ldr	r1, [pc, #112]	; (d9b4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    d942:	481d      	ldr	r0, [pc, #116]	; (d9b8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    d944:	4b0b      	ldr	r3, [pc, #44]	; (d974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d946:	4798      	blx	r3
    d948:	4a0b      	ldr	r2, [pc, #44]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d94a:	490c      	ldr	r1, [pc, #48]	; (d97c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d94c:	481a      	ldr	r0, [pc, #104]	; (d9b8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    d94e:	4b0c      	ldr	r3, [pc, #48]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d950:	4798      	blx	r3
    d952:	481a      	ldr	r0, [pc, #104]	; (d9bc <_Z41__static_initialization_and_destruction_0ii+0x114>)
    d954:	4b1a      	ldr	r3, [pc, #104]	; (d9c0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    d956:	4798      	blx	r3
    d958:	4a07      	ldr	r2, [pc, #28]	; (d978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d95a:	491a      	ldr	r1, [pc, #104]	; (d9c4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    d95c:	4817      	ldr	r0, [pc, #92]	; (d9bc <_Z41__static_initialization_and_destruction_0ii+0x114>)
    d95e:	4b08      	ldr	r3, [pc, #32]	; (d980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d960:	4798      	blx	r3
    d962:	bf00      	nop
    d964:	3708      	adds	r7, #8
    d966:	46bd      	mov	sp, r7
    d968:	bd80      	pop	{r7, pc}
    d96a:	bf00      	nop
    d96c:	20001574 	.word	0x20001574
    d970:	20001298 	.word	0x20001298
    d974:	0000ce79 	.word	0x0000ce79
    d978:	20000000 	.word	0x20000000
    d97c:	0000ceb1 	.word	0x0000ceb1
    d980:	0000e799 	.word	0x0000e799
    d984:	20001608 	.word	0x20001608
    d988:	200012b8 	.word	0x200012b8
    d98c:	2000172c 	.word	0x2000172c
    d990:	200012d8 	.word	0x200012d8
    d994:	20001628 	.word	0x20001628
    d998:	200012f8 	.word	0x200012f8
    d99c:	200016ec 	.word	0x200016ec
    d9a0:	20001318 	.word	0x20001318
    d9a4:	2000170c 	.word	0x2000170c
    d9a8:	20001338 	.word	0x20001338
    d9ac:	200015e4 	.word	0x200015e4
    d9b0:	20001358 	.word	0x20001358
    d9b4:	20001684 	.word	0x20001684
    d9b8:	20001378 	.word	0x20001378
    d9bc:	2000139c 	.word	0x2000139c
    d9c0:	0000d4c5 	.word	0x0000d4c5
    d9c4:	0000d50d 	.word	0x0000d50d

0000d9c8 <_GLOBAL__sub_I_ptrCDCClass>:
    d9c8:	b580      	push	{r7, lr}
    d9ca:	af00      	add	r7, sp, #0
    d9cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d9d0:	2001      	movs	r0, #1
    d9d2:	4b01      	ldr	r3, [pc, #4]	; (d9d8 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    d9d4:	4798      	blx	r3
    d9d6:	bd80      	pop	{r7, pc}
    d9d8:	0000d8a9 	.word	0x0000d8a9

0000d9dc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    d9dc:	b590      	push	{r4, r7, lr}
    d9de:	b083      	sub	sp, #12
    d9e0:	af00      	add	r7, sp, #0
    d9e2:	6078      	str	r0, [r7, #4]
    d9e4:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    d9e6:	683b      	ldr	r3, [r7, #0]
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	d101      	bne.n	d9f0 <_ZN5Print5writeEPKc+0x14>
    d9ec:	2300      	movs	r3, #0
    d9ee:	e00c      	b.n	da0a <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    d9f0:	687b      	ldr	r3, [r7, #4]
    d9f2:	681b      	ldr	r3, [r3, #0]
    d9f4:	3304      	adds	r3, #4
    d9f6:	681c      	ldr	r4, [r3, #0]
    d9f8:	6838      	ldr	r0, [r7, #0]
    d9fa:	4b06      	ldr	r3, [pc, #24]	; (da14 <_ZN5Print5writeEPKc+0x38>)
    d9fc:	4798      	blx	r3
    d9fe:	4603      	mov	r3, r0
    da00:	461a      	mov	r2, r3
    da02:	6839      	ldr	r1, [r7, #0]
    da04:	6878      	ldr	r0, [r7, #4]
    da06:	47a0      	blx	r4
    da08:	4603      	mov	r3, r0
    }
    da0a:	4618      	mov	r0, r3
    da0c:	370c      	adds	r7, #12
    da0e:	46bd      	mov	sp, r7
    da10:	bd90      	pop	{r4, r7, pc}
    da12:	bf00      	nop
    da14:	0000ea01 	.word	0x0000ea01

0000da18 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    da18:	b580      	push	{r7, lr}
    da1a:	b086      	sub	sp, #24
    da1c:	af00      	add	r7, sp, #0
    da1e:	60f8      	str	r0, [r7, #12]
    da20:	60b9      	str	r1, [r7, #8]
    da22:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    da24:	2300      	movs	r3, #0
    da26:	617b      	str	r3, [r7, #20]
  while (size--) {
    da28:	687b      	ldr	r3, [r7, #4]
    da2a:	1e5a      	subs	r2, r3, #1
    da2c:	607a      	str	r2, [r7, #4]
    da2e:	2b00      	cmp	r3, #0
    da30:	bf14      	ite	ne
    da32:	2301      	movne	r3, #1
    da34:	2300      	moveq	r3, #0
    da36:	b2db      	uxtb	r3, r3
    da38:	2b00      	cmp	r3, #0
    da3a:	d016      	beq.n	da6a <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    da3c:	68fb      	ldr	r3, [r7, #12]
    da3e:	681b      	ldr	r3, [r3, #0]
    da40:	681a      	ldr	r2, [r3, #0]
    da42:	68bb      	ldr	r3, [r7, #8]
    da44:	1c59      	adds	r1, r3, #1
    da46:	60b9      	str	r1, [r7, #8]
    da48:	781b      	ldrb	r3, [r3, #0]
    da4a:	4619      	mov	r1, r3
    da4c:	68f8      	ldr	r0, [r7, #12]
    da4e:	4790      	blx	r2
    da50:	4603      	mov	r3, r0
    da52:	2b00      	cmp	r3, #0
    da54:	bf14      	ite	ne
    da56:	2301      	movne	r3, #1
    da58:	2300      	moveq	r3, #0
    da5a:	b2db      	uxtb	r3, r3
    da5c:	2b00      	cmp	r3, #0
    da5e:	d003      	beq.n	da68 <_ZN5Print5writeEPKhj+0x50>
    da60:	697b      	ldr	r3, [r7, #20]
    da62:	3301      	adds	r3, #1
    da64:	617b      	str	r3, [r7, #20]
  while (size--) {
    da66:	e7df      	b.n	da28 <_ZN5Print5writeEPKhj+0x10>
    else break;
    da68:	bf00      	nop
  }
  return n;
    da6a:	697b      	ldr	r3, [r7, #20]
}
    da6c:	4618      	mov	r0, r3
    da6e:	3718      	adds	r7, #24
    da70:	46bd      	mov	sp, r7
    da72:	bd80      	pop	{r7, pc}

0000da74 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    da74:	b580      	push	{r7, lr}
    da76:	b082      	sub	sp, #8
    da78:	af00      	add	r7, sp, #0
    da7a:	6078      	str	r0, [r7, #4]
    da7c:	6039      	str	r1, [r7, #0]
  return write(str);
    da7e:	6839      	ldr	r1, [r7, #0]
    da80:	6878      	ldr	r0, [r7, #4]
    da82:	4b03      	ldr	r3, [pc, #12]	; (da90 <_ZN5Print5printEPKc+0x1c>)
    da84:	4798      	blx	r3
    da86:	4603      	mov	r3, r0
}
    da88:	4618      	mov	r0, r3
    da8a:	3708      	adds	r7, #8
    da8c:	46bd      	mov	sp, r7
    da8e:	bd80      	pop	{r7, pc}
    da90:	0000d9dd 	.word	0x0000d9dd

0000da94 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    da94:	b580      	push	{r7, lr}
    da96:	b082      	sub	sp, #8
    da98:	af00      	add	r7, sp, #0
    da9a:	6078      	str	r0, [r7, #4]
    da9c:	460b      	mov	r3, r1
    da9e:	70fb      	strb	r3, [r7, #3]
  return write(c);
    daa0:	687b      	ldr	r3, [r7, #4]
    daa2:	681b      	ldr	r3, [r3, #0]
    daa4:	681b      	ldr	r3, [r3, #0]
    daa6:	78fa      	ldrb	r2, [r7, #3]
    daa8:	4611      	mov	r1, r2
    daaa:	6878      	ldr	r0, [r7, #4]
    daac:	4798      	blx	r3
    daae:	4603      	mov	r3, r0
}
    dab0:	4618      	mov	r0, r3
    dab2:	3708      	adds	r7, #8
    dab4:	46bd      	mov	sp, r7
    dab6:	bd80      	pop	{r7, pc}

0000dab8 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    dab8:	b580      	push	{r7, lr}
    daba:	b084      	sub	sp, #16
    dabc:	af00      	add	r7, sp, #0
    dabe:	60f8      	str	r0, [r7, #12]
    dac0:	460b      	mov	r3, r1
    dac2:	607a      	str	r2, [r7, #4]
    dac4:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    dac6:	7afb      	ldrb	r3, [r7, #11]
    dac8:	687a      	ldr	r2, [r7, #4]
    daca:	4619      	mov	r1, r3
    dacc:	68f8      	ldr	r0, [r7, #12]
    dace:	4b03      	ldr	r3, [pc, #12]	; (dadc <_ZN5Print5printEhi+0x24>)
    dad0:	4798      	blx	r3
    dad2:	4603      	mov	r3, r0
}
    dad4:	4618      	mov	r0, r3
    dad6:	3710      	adds	r7, #16
    dad8:	46bd      	mov	sp, r7
    dada:	bd80      	pop	{r7, pc}
    dadc:	0000db8d 	.word	0x0000db8d

0000dae0 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    dae0:	b580      	push	{r7, lr}
    dae2:	b084      	sub	sp, #16
    dae4:	af00      	add	r7, sp, #0
    dae6:	60f8      	str	r0, [r7, #12]
    dae8:	60b9      	str	r1, [r7, #8]
    daea:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    daec:	687a      	ldr	r2, [r7, #4]
    daee:	68b9      	ldr	r1, [r7, #8]
    daf0:	68f8      	ldr	r0, [r7, #12]
    daf2:	4b03      	ldr	r3, [pc, #12]	; (db00 <_ZN5Print5printEii+0x20>)
    daf4:	4798      	blx	r3
    daf6:	4603      	mov	r3, r0
}
    daf8:	4618      	mov	r0, r3
    dafa:	3710      	adds	r7, #16
    dafc:	46bd      	mov	sp, r7
    dafe:	bd80      	pop	{r7, pc}
    db00:	0000db05 	.word	0x0000db05

0000db04 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    db04:	b580      	push	{r7, lr}
    db06:	b086      	sub	sp, #24
    db08:	af00      	add	r7, sp, #0
    db0a:	60f8      	str	r0, [r7, #12]
    db0c:	60b9      	str	r1, [r7, #8]
    db0e:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    db10:	687b      	ldr	r3, [r7, #4]
    db12:	2b00      	cmp	r3, #0
    db14:	d109      	bne.n	db2a <_ZN5Print5printEli+0x26>
    return write(n);
    db16:	68fb      	ldr	r3, [r7, #12]
    db18:	681b      	ldr	r3, [r3, #0]
    db1a:	681b      	ldr	r3, [r3, #0]
    db1c:	68ba      	ldr	r2, [r7, #8]
    db1e:	b2d2      	uxtb	r2, r2
    db20:	4611      	mov	r1, r2
    db22:	68f8      	ldr	r0, [r7, #12]
    db24:	4798      	blx	r3
    db26:	4603      	mov	r3, r0
    db28:	e028      	b.n	db7c <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    db2a:	687b      	ldr	r3, [r7, #4]
    db2c:	2b0a      	cmp	r3, #10
    db2e:	d11d      	bne.n	db6c <_ZN5Print5printEli+0x68>
    if (n < 0) {
    db30:	68bb      	ldr	r3, [r7, #8]
    db32:	2b00      	cmp	r3, #0
    db34:	da12      	bge.n	db5c <_ZN5Print5printEli+0x58>
      int t = print('-');
    db36:	212d      	movs	r1, #45	; 0x2d
    db38:	68f8      	ldr	r0, [r7, #12]
    db3a:	4b12      	ldr	r3, [pc, #72]	; (db84 <_ZN5Print5printEli+0x80>)
    db3c:	4798      	blx	r3
    db3e:	4603      	mov	r3, r0
    db40:	617b      	str	r3, [r7, #20]
      n = -n;
    db42:	68bb      	ldr	r3, [r7, #8]
    db44:	425b      	negs	r3, r3
    db46:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    db48:	68bb      	ldr	r3, [r7, #8]
    db4a:	220a      	movs	r2, #10
    db4c:	4619      	mov	r1, r3
    db4e:	68f8      	ldr	r0, [r7, #12]
    db50:	4b0d      	ldr	r3, [pc, #52]	; (db88 <_ZN5Print5printEli+0x84>)
    db52:	4798      	blx	r3
    db54:	4602      	mov	r2, r0
    db56:	697b      	ldr	r3, [r7, #20]
    db58:	4413      	add	r3, r2
    db5a:	e00f      	b.n	db7c <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    db5c:	68bb      	ldr	r3, [r7, #8]
    db5e:	220a      	movs	r2, #10
    db60:	4619      	mov	r1, r3
    db62:	68f8      	ldr	r0, [r7, #12]
    db64:	4b08      	ldr	r3, [pc, #32]	; (db88 <_ZN5Print5printEli+0x84>)
    db66:	4798      	blx	r3
    db68:	4603      	mov	r3, r0
    db6a:	e007      	b.n	db7c <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    db6c:	68bb      	ldr	r3, [r7, #8]
    db6e:	687a      	ldr	r2, [r7, #4]
    db70:	b2d2      	uxtb	r2, r2
    db72:	4619      	mov	r1, r3
    db74:	68f8      	ldr	r0, [r7, #12]
    db76:	4b04      	ldr	r3, [pc, #16]	; (db88 <_ZN5Print5printEli+0x84>)
    db78:	4798      	blx	r3
    db7a:	4603      	mov	r3, r0
  }
}
    db7c:	4618      	mov	r0, r3
    db7e:	3718      	adds	r7, #24
    db80:	46bd      	mov	sp, r7
    db82:	bd80      	pop	{r7, pc}
    db84:	0000da95 	.word	0x0000da95
    db88:	0000dbd1 	.word	0x0000dbd1

0000db8c <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    db8c:	b580      	push	{r7, lr}
    db8e:	b084      	sub	sp, #16
    db90:	af00      	add	r7, sp, #0
    db92:	60f8      	str	r0, [r7, #12]
    db94:	60b9      	str	r1, [r7, #8]
    db96:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    db98:	687b      	ldr	r3, [r7, #4]
    db9a:	2b00      	cmp	r3, #0
    db9c:	d109      	bne.n	dbb2 <_ZN5Print5printEmi+0x26>
    db9e:	68fb      	ldr	r3, [r7, #12]
    dba0:	681b      	ldr	r3, [r3, #0]
    dba2:	681b      	ldr	r3, [r3, #0]
    dba4:	68ba      	ldr	r2, [r7, #8]
    dba6:	b2d2      	uxtb	r2, r2
    dba8:	4611      	mov	r1, r2
    dbaa:	68f8      	ldr	r0, [r7, #12]
    dbac:	4798      	blx	r3
    dbae:	4603      	mov	r3, r0
    dbb0:	e007      	b.n	dbc2 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    dbb2:	687b      	ldr	r3, [r7, #4]
    dbb4:	b2db      	uxtb	r3, r3
    dbb6:	461a      	mov	r2, r3
    dbb8:	68b9      	ldr	r1, [r7, #8]
    dbba:	68f8      	ldr	r0, [r7, #12]
    dbbc:	4b03      	ldr	r3, [pc, #12]	; (dbcc <_ZN5Print5printEmi+0x40>)
    dbbe:	4798      	blx	r3
    dbc0:	4603      	mov	r3, r0
}
    dbc2:	4618      	mov	r0, r3
    dbc4:	3710      	adds	r7, #16
    dbc6:	46bd      	mov	sp, r7
    dbc8:	bd80      	pop	{r7, pc}
    dbca:	bf00      	nop
    dbcc:	0000dbd1 	.word	0x0000dbd1

0000dbd0 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    dbd0:	b580      	push	{r7, lr}
    dbd2:	b08e      	sub	sp, #56	; 0x38
    dbd4:	af00      	add	r7, sp, #0
    dbd6:	60f8      	str	r0, [r7, #12]
    dbd8:	60b9      	str	r1, [r7, #8]
    dbda:	4613      	mov	r3, r2
    dbdc:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    dbde:	f107 0310 	add.w	r3, r7, #16
    dbe2:	3320      	adds	r3, #32
    dbe4:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    dbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dbe8:	2200      	movs	r2, #0
    dbea:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    dbec:	79fb      	ldrb	r3, [r7, #7]
    dbee:	2b01      	cmp	r3, #1
    dbf0:	dc01      	bgt.n	dbf6 <_ZN5Print11printNumberEmh+0x26>
    dbf2:	230a      	movs	r3, #10
    dbf4:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    dbf6:	79fa      	ldrb	r2, [r7, #7]
    dbf8:	68bb      	ldr	r3, [r7, #8]
    dbfa:	fbb3 f1f2 	udiv	r1, r3, r2
    dbfe:	fb02 f201 	mul.w	r2, r2, r1
    dc02:	1a9b      	subs	r3, r3, r2
    dc04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    dc08:	79fb      	ldrb	r3, [r7, #7]
    dc0a:	68ba      	ldr	r2, [r7, #8]
    dc0c:	fbb2 f3f3 	udiv	r3, r2, r3
    dc10:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    dc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dc14:	3b01      	subs	r3, #1
    dc16:	637b      	str	r3, [r7, #52]	; 0x34
    dc18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    dc1c:	2b09      	cmp	r3, #9
    dc1e:	dc04      	bgt.n	dc2a <_ZN5Print11printNumberEmh+0x5a>
    dc20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    dc24:	3330      	adds	r3, #48	; 0x30
    dc26:	b2db      	uxtb	r3, r3
    dc28:	e003      	b.n	dc32 <_ZN5Print11printNumberEmh+0x62>
    dc2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    dc2e:	3337      	adds	r3, #55	; 0x37
    dc30:	b2db      	uxtb	r3, r3
    dc32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    dc34:	7013      	strb	r3, [r2, #0]
  } while(n);
    dc36:	68bb      	ldr	r3, [r7, #8]
    dc38:	2b00      	cmp	r3, #0
    dc3a:	d000      	beq.n	dc3e <_ZN5Print11printNumberEmh+0x6e>
  do {
    dc3c:	e7db      	b.n	dbf6 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    dc3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    dc40:	68f8      	ldr	r0, [r7, #12]
    dc42:	4b03      	ldr	r3, [pc, #12]	; (dc50 <_ZN5Print11printNumberEmh+0x80>)
    dc44:	4798      	blx	r3
    dc46:	4603      	mov	r3, r0
}
    dc48:	4618      	mov	r0, r3
    dc4a:	3738      	adds	r7, #56	; 0x38
    dc4c:	46bd      	mov	sp, r7
    dc4e:	bd80      	pop	{r7, pc}
    dc50:	0000d9dd 	.word	0x0000d9dd

0000dc54 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    dc54:	b480      	push	{r7}
    dc56:	b083      	sub	sp, #12
    dc58:	af00      	add	r7, sp, #0
    dc5a:	6078      	str	r0, [r7, #4]
    dc5c:	460b      	mov	r3, r1
    dc5e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    dc60:	78fb      	ldrb	r3, [r7, #3]
    dc62:	687a      	ldr	r2, [r7, #4]
    dc64:	01db      	lsls	r3, r3, #7
    dc66:	4413      	add	r3, r2
    dc68:	681b      	ldr	r3, [r3, #0]
}
    dc6a:	4618      	mov	r0, r3
    dc6c:	370c      	adds	r7, #12
    dc6e:	46bd      	mov	sp, r7
    dc70:	bc80      	pop	{r7}
    dc72:	4770      	bx	lr

0000dc74 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    dc74:	b480      	push	{r7}
    dc76:	b083      	sub	sp, #12
    dc78:	af00      	add	r7, sp, #0
    dc7a:	6078      	str	r0, [r7, #4]
    dc7c:	460b      	mov	r3, r1
    dc7e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    dc80:	78fb      	ldrb	r3, [r7, #3]
    dc82:	687a      	ldr	r2, [r7, #4]
    dc84:	01db      	lsls	r3, r3, #7
    dc86:	4413      	add	r3, r2
    dc88:	3310      	adds	r3, #16
    dc8a:	681b      	ldr	r3, [r3, #0]
}
    dc8c:	4618      	mov	r0, r3
    dc8e:	370c      	adds	r7, #12
    dc90:	46bd      	mov	sp, r7
    dc92:	bc80      	pop	{r7}
    dc94:	4770      	bx	lr

0000dc96 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    dc96:	b480      	push	{r7}
    dc98:	b083      	sub	sp, #12
    dc9a:	af00      	add	r7, sp, #0
    dc9c:	6078      	str	r0, [r7, #4]
    dc9e:	460b      	mov	r3, r1
    dca0:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    dca2:	78fb      	ldrb	r3, [r7, #3]
    dca4:	687a      	ldr	r2, [r7, #4]
    dca6:	01db      	lsls	r3, r3, #7
    dca8:	4413      	add	r3, r2
    dcaa:	3320      	adds	r3, #32
    dcac:	681b      	ldr	r3, [r3, #0]
}
    dcae:	4618      	mov	r0, r3
    dcb0:	370c      	adds	r7, #12
    dcb2:	46bd      	mov	sp, r7
    dcb4:	bc80      	pop	{r7}
    dcb6:	4770      	bx	lr

0000dcb8 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    dcb8:	b580      	push	{r7, lr}
    dcba:	b086      	sub	sp, #24
    dcbc:	af00      	add	r7, sp, #0
    dcbe:	4603      	mov	r3, r0
    dcc0:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    dcc2:	f107 030c 	add.w	r3, r7, #12
    dcc6:	4618      	mov	r0, r3
    dcc8:	4b13      	ldr	r3, [pc, #76]	; (dd18 <_gpio_get_level+0x60>)
    dcca:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    dccc:	79fb      	ldrb	r3, [r7, #7]
    dcce:	4619      	mov	r1, r3
    dcd0:	4812      	ldr	r0, [pc, #72]	; (dd1c <_gpio_get_level+0x64>)
    dcd2:	4b13      	ldr	r3, [pc, #76]	; (dd20 <_gpio_get_level+0x68>)
    dcd4:	4798      	blx	r3
    dcd6:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    dcd8:	79fb      	ldrb	r3, [r7, #7]
    dcda:	4619      	mov	r1, r3
    dcdc:	480f      	ldr	r0, [pc, #60]	; (dd1c <_gpio_get_level+0x64>)
    dcde:	4b11      	ldr	r3, [pc, #68]	; (dd24 <_gpio_get_level+0x6c>)
    dce0:	4798      	blx	r3
    dce2:	4602      	mov	r2, r0
    dce4:	697b      	ldr	r3, [r7, #20]
    dce6:	43db      	mvns	r3, r3
    dce8:	4013      	ands	r3, r2
    dcea:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    dcec:	79fb      	ldrb	r3, [r7, #7]
    dcee:	4619      	mov	r1, r3
    dcf0:	480a      	ldr	r0, [pc, #40]	; (dd1c <_gpio_get_level+0x64>)
    dcf2:	4b0d      	ldr	r3, [pc, #52]	; (dd28 <_gpio_get_level+0x70>)
    dcf4:	4798      	blx	r3
    dcf6:	4602      	mov	r2, r0
    dcf8:	697b      	ldr	r3, [r7, #20]
    dcfa:	4013      	ands	r3, r2
    dcfc:	693a      	ldr	r2, [r7, #16]
    dcfe:	4313      	orrs	r3, r2
    dd00:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    dd02:	f107 030c 	add.w	r3, r7, #12
    dd06:	4618      	mov	r0, r3
    dd08:	4b08      	ldr	r3, [pc, #32]	; (dd2c <_gpio_get_level+0x74>)
    dd0a:	4798      	blx	r3

	return tmp;
    dd0c:	693b      	ldr	r3, [r7, #16]
}
    dd0e:	4618      	mov	r0, r3
    dd10:	3718      	adds	r7, #24
    dd12:	46bd      	mov	sp, r7
    dd14:	bd80      	pop	{r7, pc}
    dd16:	bf00      	nop
    dd18:	0000ae99 	.word	0x0000ae99
    dd1c:	41008000 	.word	0x41008000
    dd20:	0000dc55 	.word	0x0000dc55
    dd24:	0000dc97 	.word	0x0000dc97
    dd28:	0000dc75 	.word	0x0000dc75
    dd2c:	0000aebf 	.word	0x0000aebf

0000dd30 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    dd30:	b580      	push	{r7, lr}
    dd32:	b082      	sub	sp, #8
    dd34:	af00      	add	r7, sp, #0
    dd36:	4603      	mov	r3, r0
    dd38:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    dd3a:	79fb      	ldrb	r3, [r7, #7]
    dd3c:	115b      	asrs	r3, r3, #5
    dd3e:	b2db      	uxtb	r3, r3
    dd40:	4618      	mov	r0, r3
    dd42:	4b09      	ldr	r3, [pc, #36]	; (dd68 <gpio_get_pin_level+0x38>)
    dd44:	4798      	blx	r3
    dd46:	4601      	mov	r1, r0
    dd48:	79fb      	ldrb	r3, [r7, #7]
    dd4a:	f003 031f 	and.w	r3, r3, #31
    dd4e:	2201      	movs	r2, #1
    dd50:	fa02 f303 	lsl.w	r3, r2, r3
    dd54:	400b      	ands	r3, r1
    dd56:	2b00      	cmp	r3, #0
    dd58:	bf14      	ite	ne
    dd5a:	2301      	movne	r3, #1
    dd5c:	2300      	moveq	r3, #0
    dd5e:	b2db      	uxtb	r3, r3
}
    dd60:	4618      	mov	r0, r3
    dd62:	3708      	adds	r7, #8
    dd64:	46bd      	mov	sp, r7
    dd66:	bd80      	pop	{r7, pc}
    dd68:	0000dcb9 	.word	0x0000dcb9

0000dd6c <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    dd6c:	b480      	push	{r7}
    dd6e:	b083      	sub	sp, #12
    dd70:	af00      	add	r7, sp, #0
    dd72:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    dd74:	4b06      	ldr	r3, [pc, #24]	; (dd90 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    dd76:	681b      	ldr	r3, [r3, #0]
    dd78:	2201      	movs	r2, #1
    dd7a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    dd7c:	4b04      	ldr	r3, [pc, #16]	; (dd90 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    dd7e:	681b      	ldr	r3, [r3, #0]
    dd80:	2200      	movs	r2, #0
    dd82:	705a      	strb	r2, [r3, #1]
}
    dd84:	bf00      	nop
    dd86:	370c      	adds	r7, #12
    dd88:	46bd      	mov	sp, r7
    dd8a:	bc80      	pop	{r7}
    dd8c:	4770      	bx	lr
    dd8e:	bf00      	nop
    dd90:	200014fc 	.word	0x200014fc

0000dd94 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    dd94:	b580      	push	{r7, lr}
    dd96:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    dd98:	2040      	movs	r0, #64	; 0x40
    dd9a:	4b0a      	ldr	r3, [pc, #40]	; (ddc4 <_ZL10USBPluggedv+0x30>)
    dd9c:	4798      	blx	r3
    dd9e:	4603      	mov	r3, r0
    dda0:	2b00      	cmp	r3, #0
    dda2:	d004      	beq.n	ddae <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    dda4:	4b08      	ldr	r3, [pc, #32]	; (ddc8 <_ZL10USBPluggedv+0x34>)
    dda6:	681b      	ldr	r3, [r3, #0]
    dda8:	2201      	movs	r2, #1
    ddaa:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    ddac:	e007      	b.n	ddbe <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    ddae:	4b06      	ldr	r3, [pc, #24]	; (ddc8 <_ZL10USBPluggedv+0x34>)
    ddb0:	681b      	ldr	r3, [r3, #0]
    ddb2:	2200      	movs	r2, #0
    ddb4:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    ddb6:	4b04      	ldr	r3, [pc, #16]	; (ddc8 <_ZL10USBPluggedv+0x34>)
    ddb8:	681b      	ldr	r3, [r3, #0]
    ddba:	2200      	movs	r2, #0
    ddbc:	701a      	strb	r2, [r3, #0]
}
    ddbe:	bf00      	nop
    ddc0:	bd80      	pop	{r7, pc}
    ddc2:	bf00      	nop
    ddc4:	0000dd31 	.word	0x0000dd31
    ddc8:	200014fc 	.word	0x200014fc

0000ddcc <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    ddcc:	b480      	push	{r7}
    ddce:	b083      	sub	sp, #12
    ddd0:	af00      	add	r7, sp, #0
    ddd2:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    ddd4:	4a04      	ldr	r2, [pc, #16]	; (dde8 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    ddd6:	687b      	ldr	r3, [r7, #4]
    ddd8:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    ddda:	687b      	ldr	r3, [r7, #4]
    dddc:	4618      	mov	r0, r3
    ddde:	370c      	adds	r7, #12
    dde0:	46bd      	mov	sp, r7
    dde2:	bc80      	pop	{r7}
    dde4:	4770      	bx	lr
    dde6:	bf00      	nop
    dde8:	200014fc 	.word	0x200014fc

0000ddec <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    ddec:	b480      	push	{r7}
    ddee:	b083      	sub	sp, #12
    ddf0:	af00      	add	r7, sp, #0
    ddf2:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ddf4:	687b      	ldr	r3, [r7, #4]
    ddf6:	4618      	mov	r0, r3
    ddf8:	370c      	adds	r7, #12
    ddfa:	46bd      	mov	sp, r7
    ddfc:	bc80      	pop	{r7}
    ddfe:	4770      	bx	lr

0000de00 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    de00:	b580      	push	{r7, lr}
    de02:	b082      	sub	sp, #8
    de04:	af00      	add	r7, sp, #0
    de06:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    de08:	491e      	ldr	r1, [pc, #120]	; (de84 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    de0a:	2040      	movs	r0, #64	; 0x40
    de0c:	4b1e      	ldr	r3, [pc, #120]	; (de88 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    de0e:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    de10:	481e      	ldr	r0, [pc, #120]	; (de8c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    de12:	4b1f      	ldr	r3, [pc, #124]	; (de90 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    de14:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    de16:	2040      	movs	r0, #64	; 0x40
    de18:	4b1e      	ldr	r3, [pc, #120]	; (de94 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    de1a:	4798      	blx	r3
    de1c:	4603      	mov	r3, r0
    de1e:	461a      	mov	r2, r3
    de20:	687b      	ldr	r3, [r7, #4]
    de22:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    de24:	687b      	ldr	r3, [r7, #4]
    de26:	78db      	ldrb	r3, [r3, #3]
    de28:	2b00      	cmp	r3, #0
    de2a:	d021      	beq.n	de70 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	2200      	movs	r2, #0
    de30:	709a      	strb	r2, [r3, #2]
			plugged=true;
    de32:	687b      	ldr	r3, [r7, #4]
    de34:	2201      	movs	r2, #1
    de36:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    de38:	f44f 7216 	mov.w	r2, #600	; 0x258
    de3c:	4916      	ldr	r1, [pc, #88]	; (de98 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    de3e:	4813      	ldr	r0, [pc, #76]	; (de8c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    de40:	4b16      	ldr	r3, [pc, #88]	; (de9c <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    de42:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    de44:	4816      	ldr	r0, [pc, #88]	; (dea0 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    de46:	4b17      	ldr	r3, [pc, #92]	; (dea4 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    de48:	4798      	blx	r3
    de4a:	4603      	mov	r3, r0
    de4c:	f083 0301 	eor.w	r3, r3, #1
    de50:	b2db      	uxtb	r3, r3
    de52:	2b00      	cmp	r3, #0
    de54:	d008      	beq.n	de68 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    de56:	687b      	ldr	r3, [r7, #4]
    de58:	789b      	ldrb	r3, [r3, #2]
    de5a:	b2db      	uxtb	r3, r3
    de5c:	2b00      	cmp	r3, #0
    de5e:	d0f1      	beq.n	de44 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	2200      	movs	r2, #0
    de64:	701a      	strb	r2, [r3, #0]
					return;
    de66:	e009      	b.n	de7c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    de68:	4808      	ldr	r0, [pc, #32]	; (de8c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    de6a:	4b0f      	ldr	r3, [pc, #60]	; (dea8 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    de6c:	4798      	blx	r3
    de6e:	e005      	b.n	de7c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    de70:	687b      	ldr	r3, [r7, #4]
    de72:	2200      	movs	r2, #0
    de74:	701a      	strb	r2, [r3, #0]
			plugged=false;
    de76:	687b      	ldr	r3, [r7, #4]
    de78:	2200      	movs	r2, #0
    de7a:	705a      	strb	r2, [r3, #1]
		}
		
}
    de7c:	3708      	adds	r7, #8
    de7e:	46bd      	mov	sp, r7
    de80:	bd80      	pop	{r7, pc}
    de82:	bf00      	nop
    de84:	0000dd95 	.word	0x0000dd95
    de88:	00001ec5 	.word	0x00001ec5
    de8c:	2000149c 	.word	0x2000149c
    de90:	0000cf65 	.word	0x0000cf65
    de94:	0000dd31 	.word	0x0000dd31
    de98:	0000dd6d 	.word	0x0000dd6d
    de9c:	0000d0ad 	.word	0x0000d0ad
    dea0:	2000139c 	.word	0x2000139c
    dea4:	0000d57d 	.word	0x0000d57d
    dea8:	0000cfd9 	.word	0x0000cfd9

0000deac <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    deac:	b580      	push	{r7, lr}
    deae:	b082      	sub	sp, #8
    deb0:	af00      	add	r7, sp, #0
    deb2:	6078      	str	r0, [r7, #4]
    deb4:	6039      	str	r1, [r7, #0]
    deb6:	687b      	ldr	r3, [r7, #4]
    deb8:	2b01      	cmp	r3, #1
    deba:	d14c      	bne.n	df56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    debc:	683b      	ldr	r3, [r7, #0]
    debe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dec2:	4293      	cmp	r3, r2
    dec4:	d147      	bne.n	df56 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dec6:	4926      	ldr	r1, [pc, #152]	; (df60 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    dec8:	4826      	ldr	r0, [pc, #152]	; (df64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    deca:	4b27      	ldr	r3, [pc, #156]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    decc:	4798      	blx	r3
    dece:	4a27      	ldr	r2, [pc, #156]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ded0:	4927      	ldr	r1, [pc, #156]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ded2:	4824      	ldr	r0, [pc, #144]	; (df64 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ded4:	4b27      	ldr	r3, [pc, #156]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ded6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ded8:	4927      	ldr	r1, [pc, #156]	; (df78 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    deda:	4828      	ldr	r0, [pc, #160]	; (df7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dedc:	4b22      	ldr	r3, [pc, #136]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dede:	4798      	blx	r3
    dee0:	4a22      	ldr	r2, [pc, #136]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dee2:	4923      	ldr	r1, [pc, #140]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dee4:	4825      	ldr	r0, [pc, #148]	; (df7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dee6:	4b23      	ldr	r3, [pc, #140]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dee8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    deea:	4925      	ldr	r1, [pc, #148]	; (df80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    deec:	4825      	ldr	r0, [pc, #148]	; (df84 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    deee:	4b1e      	ldr	r3, [pc, #120]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    def0:	4798      	blx	r3
    def2:	4a1e      	ldr	r2, [pc, #120]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    def4:	491e      	ldr	r1, [pc, #120]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    def6:	4823      	ldr	r0, [pc, #140]	; (df84 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    def8:	4b1e      	ldr	r3, [pc, #120]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    defa:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    defc:	4922      	ldr	r1, [pc, #136]	; (df88 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    defe:	4823      	ldr	r0, [pc, #140]	; (df8c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    df00:	4b19      	ldr	r3, [pc, #100]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    df02:	4798      	blx	r3
    df04:	4a19      	ldr	r2, [pc, #100]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    df06:	491a      	ldr	r1, [pc, #104]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    df08:	4820      	ldr	r0, [pc, #128]	; (df8c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    df0a:	4b1a      	ldr	r3, [pc, #104]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    df0c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    df0e:	4920      	ldr	r1, [pc, #128]	; (df90 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    df10:	4820      	ldr	r0, [pc, #128]	; (df94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    df12:	4b15      	ldr	r3, [pc, #84]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    df14:	4798      	blx	r3
    df16:	4a15      	ldr	r2, [pc, #84]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    df18:	4915      	ldr	r1, [pc, #84]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    df1a:	481e      	ldr	r0, [pc, #120]	; (df94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    df1c:	4b15      	ldr	r3, [pc, #84]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    df1e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    df20:	491d      	ldr	r1, [pc, #116]	; (df98 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    df22:	481e      	ldr	r0, [pc, #120]	; (df9c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    df24:	4b10      	ldr	r3, [pc, #64]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    df26:	4798      	blx	r3
    df28:	4a10      	ldr	r2, [pc, #64]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    df2a:	4911      	ldr	r1, [pc, #68]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    df2c:	481b      	ldr	r0, [pc, #108]	; (df9c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    df2e:	4b11      	ldr	r3, [pc, #68]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    df30:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    df32:	491b      	ldr	r1, [pc, #108]	; (dfa0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    df34:	481b      	ldr	r0, [pc, #108]	; (dfa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    df36:	4b0c      	ldr	r3, [pc, #48]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    df38:	4798      	blx	r3
    df3a:	4a0c      	ldr	r2, [pc, #48]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    df3c:	490c      	ldr	r1, [pc, #48]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    df3e:	4819      	ldr	r0, [pc, #100]	; (dfa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    df40:	4b0c      	ldr	r3, [pc, #48]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    df42:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    df44:	4918      	ldr	r1, [pc, #96]	; (dfa8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    df46:	4819      	ldr	r0, [pc, #100]	; (dfac <_Z41__static_initialization_and_destruction_0ii+0x100>)
    df48:	4b07      	ldr	r3, [pc, #28]	; (df68 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    df4a:	4798      	blx	r3
    df4c:	4a07      	ldr	r2, [pc, #28]	; (df6c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    df4e:	4908      	ldr	r1, [pc, #32]	; (df70 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    df50:	4816      	ldr	r0, [pc, #88]	; (dfac <_Z41__static_initialization_and_destruction_0ii+0x100>)
    df52:	4b08      	ldr	r3, [pc, #32]	; (df74 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    df54:	4798      	blx	r3
    df56:	bf00      	nop
    df58:	3708      	adds	r7, #8
    df5a:	46bd      	mov	sp, r7
    df5c:	bd80      	pop	{r7, pc}
    df5e:	bf00      	nop
    df60:	20001574 	.word	0x20001574
    df64:	200013fc 	.word	0x200013fc
    df68:	0000ce79 	.word	0x0000ce79
    df6c:	20000000 	.word	0x20000000
    df70:	0000ceb1 	.word	0x0000ceb1
    df74:	0000e799 	.word	0x0000e799
    df78:	20001608 	.word	0x20001608
    df7c:	2000141c 	.word	0x2000141c
    df80:	2000172c 	.word	0x2000172c
    df84:	2000143c 	.word	0x2000143c
    df88:	20001628 	.word	0x20001628
    df8c:	2000145c 	.word	0x2000145c
    df90:	200016ec 	.word	0x200016ec
    df94:	2000147c 	.word	0x2000147c
    df98:	2000170c 	.word	0x2000170c
    df9c:	2000149c 	.word	0x2000149c
    dfa0:	200015e4 	.word	0x200015e4
    dfa4:	200014bc 	.word	0x200014bc
    dfa8:	20001684 	.word	0x20001684
    dfac:	200014dc 	.word	0x200014dc

0000dfb0 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    dfb0:	b580      	push	{r7, lr}
    dfb2:	af00      	add	r7, sp, #0
    dfb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dfb8:	2001      	movs	r0, #1
    dfba:	4b01      	ldr	r3, [pc, #4]	; (dfc0 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    dfbc:	4798      	blx	r3
    dfbe:	bd80      	pop	{r7, pc}
    dfc0:	0000dead 	.word	0x0000dead

0000dfc4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    dfc4:	b480      	push	{r7}
    dfc6:	b083      	sub	sp, #12
    dfc8:	af00      	add	r7, sp, #0
    dfca:	6078      	str	r0, [r7, #4]
    return (void *)0;
    dfcc:	2300      	movs	r3, #0
	}
    dfce:	4618      	mov	r0, r3
    dfd0:	370c      	adds	r7, #12
    dfd2:	46bd      	mov	sp, r7
    dfd4:	bc80      	pop	{r7}
    dfd6:	4770      	bx	lr

0000dfd8 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    dfd8:	b480      	push	{r7}
    dfda:	af00      	add	r7, sp, #0
		}
    dfdc:	bf00      	nop
    dfde:	46bd      	mov	sp, r7
    dfe0:	bc80      	pop	{r7}
    dfe2:	4770      	bx	lr

0000dfe4 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
    dfe4:	b480      	push	{r7}
    dfe6:	b083      	sub	sp, #12
    dfe8:	af00      	add	r7, sp, #0
    dfea:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
    dfec:	4a07      	ldr	r2, [pc, #28]	; (e00c <_ZN18SingleHeater_ClassC1Ev+0x28>)
    dfee:	687b      	ldr	r3, [r7, #4]
    dff0:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
    dff2:	687b      	ldr	r3, [r7, #4]
    dff4:	4a06      	ldr	r2, [pc, #24]	; (e010 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
    dff6:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
    dff8:	687b      	ldr	r3, [r7, #4]
    dffa:	2200      	movs	r2, #0
    dffc:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
    dffe:	687b      	ldr	r3, [r7, #4]
    e000:	4618      	mov	r0, r3
    e002:	370c      	adds	r7, #12
    e004:	46bd      	mov	sp, r7
    e006:	bc80      	pop	{r7}
    e008:	4770      	bx	lr
    e00a:	bf00      	nop
    e00c:	20001514 	.word	0x20001514
    e010:	20001500 	.word	0x20001500

0000e014 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
    e014:	b480      	push	{r7}
    e016:	b083      	sub	sp, #12
    e018:	af00      	add	r7, sp, #0
    e01a:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	4618      	mov	r0, r3
    e020:	370c      	adds	r7, #12
    e022:	46bd      	mov	sp, r7
    e024:	bc80      	pop	{r7}
    e026:	4770      	bx	lr

0000e028 <_ZN18SingleHeater_Class4InitEh>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id){
    e028:	b580      	push	{r7, lr}
    e02a:	b082      	sub	sp, #8
    e02c:	af00      	add	r7, sp, #0
    e02e:	6078      	str	r0, [r7, #4]
    e030:	460b      	mov	r3, r1
    e032:	70fb      	strb	r3, [r7, #3]
	heater_id=id;
    e034:	687b      	ldr	r3, [r7, #4]
    e036:	78fa      	ldrb	r2, [r7, #3]
    e038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->i2c_initiated)
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	699b      	ldr	r3, [r3, #24]
    e040:	7a1b      	ldrb	r3, [r3, #8]
    e042:	b2db      	uxtb	r3, r3
    e044:	2b00      	cmp	r3, #0
    e046:	d004      	beq.n	e052 <_ZN18SingleHeater_Class4InitEh+0x2a>
	{
		i2c->Init();
    e048:	687b      	ldr	r3, [r7, #4]
    e04a:	699b      	ldr	r3, [r3, #24]
    e04c:	4618      	mov	r0, r3
    e04e:	4b15      	ldr	r3, [pc, #84]	; (e0a4 <_ZN18SingleHeater_Class4InitEh+0x7c>)
    e050:	4798      	blx	r3
	else
	{
		
	}
	
	if (i2c->isOK)
    e052:	687b      	ldr	r3, [r7, #4]
    e054:	699b      	ldr	r3, [r3, #24]
    e056:	7a5b      	ldrb	r3, [r3, #9]
    e058:	b2db      	uxtb	r3, r3
    e05a:	2b00      	cmp	r3, #0
    e05c:	d014      	beq.n	e088 <_ZN18SingleHeater_Class4InitEh+0x60>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray();
    e05e:	6878      	ldr	r0, [r7, #4]
    e060:	4b11      	ldr	r3, [pc, #68]	; (e0a8 <_ZN18SingleHeater_Class4InitEh+0x80>)
    e062:	4798      	blx	r3
		expanders[0]->SetPortInput();
    e064:	687b      	ldr	r3, [r7, #4]
    e066:	68db      	ldr	r3, [r3, #12]
    e068:	4618      	mov	r0, r3
    e06a:	4b10      	ldr	r3, [pc, #64]	; (e0ac <_ZN18SingleHeater_Class4InitEh+0x84>)
    e06c:	4798      	blx	r3
		expanders[1]->SetPortOutput();
    e06e:	687b      	ldr	r3, [r7, #4]
    e070:	691b      	ldr	r3, [r3, #16]
    e072:	4618      	mov	r0, r3
    e074:	4b0e      	ldr	r3, [pc, #56]	; (e0b0 <_ZN18SingleHeater_Class4InitEh+0x88>)
    e076:	4798      	blx	r3
		isOK=SelfTest();
    e078:	6878      	ldr	r0, [r7, #4]
    e07a:	4b0e      	ldr	r3, [pc, #56]	; (e0b4 <_ZN18SingleHeater_Class4InitEh+0x8c>)
    e07c:	4798      	blx	r3
    e07e:	4603      	mov	r3, r0
    e080:	461a      	mov	r2, r3
    e082:	687b      	ldr	r3, [r7, #4]
    e084:	701a      	strb	r2, [r3, #0]
    e086:	e000      	b.n	e08a <_ZN18SingleHeater_Class4InitEh+0x62>
	}
	else
	{
		asm("nop");
    e088:	bf00      	nop
	}
	isOK=i2c->isOK;
    e08a:	687b      	ldr	r3, [r7, #4]
    e08c:	699b      	ldr	r3, [r3, #24]
    e08e:	7a5b      	ldrb	r3, [r3, #9]
    e090:	b2da      	uxtb	r2, r3
    e092:	687b      	ldr	r3, [r7, #4]
    e094:	701a      	strb	r2, [r3, #0]
	return isOK;
    e096:	687b      	ldr	r3, [r7, #4]
    e098:	781b      	ldrb	r3, [r3, #0]
    e09a:	b2db      	uxtb	r3, r3
}
    e09c:	4618      	mov	r0, r3
    e09e:	3708      	adds	r7, #8
    e0a0:	46bd      	mov	sp, r7
    e0a2:	bd80      	pop	{r7, pc}
    e0a4:	0000cd8d 	.word	0x0000cd8d
    e0a8:	0000e0b9 	.word	0x0000e0b9
    e0ac:	0000e585 	.word	0x0000e585
    e0b0:	0000e5c9 	.word	0x0000e5c9
    e0b4:	0000e215 	.word	0x0000e215

0000e0b8 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
    e0b8:	b580      	push	{r7, lr}
    e0ba:	b084      	sub	sp, #16
    e0bc:	af00      	add	r7, sp, #0
    e0be:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
    e0c0:	2300      	movs	r3, #0
    e0c2:	60fb      	str	r3, [r7, #12]
    e0c4:	68fb      	ldr	r3, [r7, #12]
    e0c6:	2b01      	cmp	r3, #1
    e0c8:	dc2d      	bgt.n	e126 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6e>
	{
		expanders[i]=&expandersStatic[i];
    e0ca:	68fa      	ldr	r2, [r7, #12]
    e0cc:	4613      	mov	r3, r2
    e0ce:	00db      	lsls	r3, r3, #3
    e0d0:	1a9b      	subs	r3, r3, r2
    e0d2:	009b      	lsls	r3, r3, #2
    e0d4:	4a16      	ldr	r2, [pc, #88]	; (e130 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x78>)
    e0d6:	441a      	add	r2, r3
    e0d8:	6879      	ldr	r1, [r7, #4]
    e0da:	68fb      	ldr	r3, [r7, #12]
    e0dc:	3302      	adds	r3, #2
    e0de:	009b      	lsls	r3, r3, #2
    e0e0:	440b      	add	r3, r1
    e0e2:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
    e0e4:	687a      	ldr	r2, [r7, #4]
    e0e6:	68fb      	ldr	r3, [r7, #12]
    e0e8:	3302      	adds	r3, #2
    e0ea:	009b      	lsls	r3, r3, #2
    e0ec:	4413      	add	r3, r2
    e0ee:	685a      	ldr	r2, [r3, #4]
    e0f0:	687b      	ldr	r3, [r7, #4]
    e0f2:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
    e0f4:	687b      	ldr	r3, [r7, #4]
    e0f6:	6958      	ldr	r0, [r3, #20]
    e0f8:	68fb      	ldr	r3, [r7, #12]
    e0fa:	b2da      	uxtb	r2, r3
    e0fc:	687b      	ldr	r3, [r7, #4]
    e0fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    e102:	005b      	lsls	r3, r3, #1
    e104:	b2db      	uxtb	r3, r3
    e106:	4313      	orrs	r3, r2
    e108:	b2db      	uxtb	r3, r3
    e10a:	f043 0320 	orr.w	r3, r3, #32
    e10e:	b2db      	uxtb	r3, r3
    e110:	b25b      	sxtb	r3, r3
    e112:	b2d9      	uxtb	r1, r3
    e114:	687b      	ldr	r3, [r7, #4]
    e116:	699b      	ldr	r3, [r3, #24]
    e118:	461a      	mov	r2, r3
    e11a:	4b06      	ldr	r3, [pc, #24]	; (e134 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x7c>)
    e11c:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
    e11e:	68fb      	ldr	r3, [r7, #12]
    e120:	3301      	adds	r3, #1
    e122:	60fb      	str	r3, [r7, #12]
    e124:	e7ce      	b.n	e0c4 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
    e126:	bf00      	nop
    e128:	4618      	mov	r0, r3
    e12a:	3710      	adds	r7, #16
    e12c:	46bd      	mov	sp, r7
    e12e:	bd80      	pop	{r7, pc}
    e130:	20001518 	.word	0x20001518
    e134:	0000e41d 	.word	0x0000e41d

0000e138 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
    e138:	b580      	push	{r7, lr}
    e13a:	b084      	sub	sp, #16
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	68db      	ldr	r3, [r3, #12]
    e144:	4618      	mov	r0, r3
    e146:	4b16      	ldr	r3, [pc, #88]	; (e1a0 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
    e148:	4798      	blx	r3
    e14a:	4603      	mov	r3, r0
    e14c:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
    e14e:	7bbb      	ldrb	r3, [r7, #14]
    e150:	f003 0301 	and.w	r3, r3, #1
    e154:	2b00      	cmp	r3, #0
    e156:	bf14      	ite	ne
    e158:	2301      	movne	r3, #1
    e15a:	2300      	moveq	r3, #0
    e15c:	b2da      	uxtb	r2, r3
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
    e162:	2300      	movs	r3, #0
    e164:	73fb      	strb	r3, [r7, #15]
    e166:	7bfb      	ldrb	r3, [r7, #15]
    e168:	2b03      	cmp	r3, #3
    e16a:	dc14      	bgt.n	e196 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
    e16c:	7bfb      	ldrb	r3, [r7, #15]
    e16e:	7bb9      	ldrb	r1, [r7, #14]
    e170:	7bfa      	ldrb	r2, [r7, #15]
    e172:	3201      	adds	r2, #1
    e174:	fa41 f202 	asr.w	r2, r1, r2
    e178:	f002 0201 	and.w	r2, r2, #1
    e17c:	2a00      	cmp	r2, #0
    e17e:	bf14      	ite	ne
    e180:	2201      	movne	r2, #1
    e182:	2200      	moveq	r2, #0
    e184:	b2d1      	uxtb	r1, r2
    e186:	687a      	ldr	r2, [r7, #4]
    e188:	4413      	add	r3, r2
    e18a:	460a      	mov	r2, r1
    e18c:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
    e18e:	7bfb      	ldrb	r3, [r7, #15]
    e190:	3301      	adds	r3, #1
    e192:	73fb      	strb	r3, [r7, #15]
    e194:	e7e7      	b.n	e166 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
    e196:	7bbb      	ldrb	r3, [r7, #14]
}
    e198:	4618      	mov	r0, r3
    e19a:	3710      	adds	r7, #16
    e19c:	46bd      	mov	sp, r7
    e19e:	bd80      	pop	{r7, pc}
    e1a0:	0000e501 	.word	0x0000e501

0000e1a4 <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
    e1a4:	b580      	push	{r7, lr}
    e1a6:	b082      	sub	sp, #8
    e1a8:	af00      	add	r7, sp, #0
    e1aa:	6078      	str	r0, [r7, #4]
    e1ac:	460b      	mov	r3, r1
    e1ae:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
    e1b0:	687b      	ldr	r3, [r7, #4]
    e1b2:	691b      	ldr	r3, [r3, #16]
    e1b4:	78f9      	ldrb	r1, [r7, #3]
    e1b6:	2200      	movs	r2, #0
    e1b8:	4618      	mov	r0, r3
    e1ba:	4b06      	ldr	r3, [pc, #24]	; (e1d4 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
    e1bc:	4798      	blx	r3
    e1be:	4603      	mov	r3, r0
    e1c0:	461a      	mov	r2, r3
    e1c2:	687b      	ldr	r3, [r7, #4]
    e1c4:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    e1c6:	687b      	ldr	r3, [r7, #4]
    e1c8:	7adb      	ldrb	r3, [r3, #11]
}
    e1ca:	4618      	mov	r0, r3
    e1cc:	3708      	adds	r7, #8
    e1ce:	46bd      	mov	sp, r7
    e1d0:	bd80      	pop	{r7, pc}
    e1d2:	bf00      	nop
    e1d4:	0000e6c1 	.word	0x0000e6c1

0000e1d8 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
    e1d8:	b580      	push	{r7, lr}
    e1da:	b082      	sub	sp, #8
    e1dc:	af00      	add	r7, sp, #0
    e1de:	6078      	str	r0, [r7, #4]
    e1e0:	460b      	mov	r3, r1
    e1e2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
    e1e4:	687b      	ldr	r3, [r7, #4]
    e1e6:	691b      	ldr	r3, [r3, #16]
    e1e8:	78f9      	ldrb	r1, [r7, #3]
    e1ea:	2201      	movs	r2, #1
    e1ec:	4618      	mov	r0, r3
    e1ee:	4b08      	ldr	r3, [pc, #32]	; (e210 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
    e1f0:	4798      	blx	r3
    e1f2:	4603      	mov	r3, r0
    e1f4:	2b00      	cmp	r3, #0
    e1f6:	d001      	beq.n	e1fc <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
    e1f8:	2200      	movs	r2, #0
    e1fa:	e000      	b.n	e1fe <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
    e1fc:	2201      	movs	r2, #1
    e1fe:	687b      	ldr	r3, [r7, #4]
    e200:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    e202:	687b      	ldr	r3, [r7, #4]
    e204:	7adb      	ldrb	r3, [r3, #11]
}
    e206:	4618      	mov	r0, r3
    e208:	3708      	adds	r7, #8
    e20a:	46bd      	mov	sp, r7
    e20c:	bd80      	pop	{r7, pc}
    e20e:	bf00      	nop
    e210:	0000e6c1 	.word	0x0000e6c1

0000e214 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
    e214:	b580      	push	{r7, lr}
    e216:	b084      	sub	sp, #16
    e218:	af00      	add	r7, sp, #0
    e21a:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
    e21c:	2300      	movs	r3, #0
    e21e:	73bb      	strb	r3, [r7, #14]
    e220:	7bbb      	ldrb	r3, [r7, #14]
    e222:	2b03      	cmp	r3, #3
    e224:	dc1f      	bgt.n	e266 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
    e226:	7bbb      	ldrb	r3, [r7, #14]
    e228:	4619      	mov	r1, r3
    e22a:	6878      	ldr	r0, [r7, #4]
    e22c:	4b10      	ldr	r3, [pc, #64]	; (e270 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
    e22e:	4798      	blx	r3
		delay_ms(100);
    e230:	2064      	movs	r0, #100	; 0x64
    e232:	4b10      	ldr	r3, [pc, #64]	; (e274 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
    e234:	4798      	blx	r3
		DisableIndex(i);
    e236:	7bbb      	ldrb	r3, [r7, #14]
    e238:	4619      	mov	r1, r3
    e23a:	6878      	ldr	r0, [r7, #4]
    e23c:	4b0e      	ldr	r3, [pc, #56]	; (e278 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
    e23e:	4798      	blx	r3
		ReadStatus();
    e240:	6878      	ldr	r0, [r7, #4]
    e242:	4b0e      	ldr	r3, [pc, #56]	; (e27c <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
    e244:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
    e246:	7bbb      	ldrb	r3, [r7, #14]
    e248:	687a      	ldr	r2, [r7, #4]
    e24a:	4413      	add	r3, r2
    e24c:	78db      	ldrb	r3, [r3, #3]
    e24e:	2b00      	cmp	r3, #0
    e250:	d002      	beq.n	e258 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
    e252:	2301      	movs	r3, #1
    e254:	73fb      	strb	r3, [r7, #15]
    e256:	e002      	b.n	e25e <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
    e258:	2300      	movs	r3, #0
    e25a:	73fb      	strb	r3, [r7, #15]
			break;
    e25c:	e003      	b.n	e266 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
    e25e:	7bbb      	ldrb	r3, [r7, #14]
    e260:	3301      	adds	r3, #1
    e262:	73bb      	strb	r3, [r7, #14]
    e264:	e7dc      	b.n	e220 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
    e266:	7bfb      	ldrb	r3, [r7, #15]
}
    e268:	4618      	mov	r0, r3
    e26a:	3710      	adds	r7, #16
    e26c:	46bd      	mov	sp, r7
    e26e:	bd80      	pop	{r7, pc}
    e270:	0000e1a5 	.word	0x0000e1a5
    e274:	00001e31 	.word	0x00001e31
    e278:	0000e1d9 	.word	0x0000e1d9
    e27c:	0000e139 	.word	0x0000e139

0000e280 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    e280:	b590      	push	{r4, r7, lr}
    e282:	b083      	sub	sp, #12
    e284:	af00      	add	r7, sp, #0
    e286:	6078      	str	r0, [r7, #4]
    e288:	4c05      	ldr	r4, [pc, #20]	; (e2a0 <__tcf_0+0x20>)
    e28a:	4b06      	ldr	r3, [pc, #24]	; (e2a4 <__tcf_0+0x24>)
    e28c:	429c      	cmp	r4, r3
    e28e:	d004      	beq.n	e29a <__tcf_0+0x1a>
    e290:	3c1c      	subs	r4, #28
    e292:	4620      	mov	r0, r4
    e294:	4b04      	ldr	r3, [pc, #16]	; (e2a8 <__tcf_0+0x28>)
    e296:	4798      	blx	r3
    e298:	e7f7      	b.n	e28a <__tcf_0+0xa>
    e29a:	370c      	adds	r7, #12
    e29c:	46bd      	mov	sp, r7
    e29e:	bd90      	pop	{r4, r7, pc}
    e2a0:	20001550 	.word	0x20001550
    e2a4:	20001518 	.word	0x20001518
    e2a8:	0000e409 	.word	0x0000e409

0000e2ac <_Z41__static_initialization_and_destruction_0ii>:

    e2ac:	b5b0      	push	{r4, r5, r7, lr}
    e2ae:	b082      	sub	sp, #8
    e2b0:	af00      	add	r7, sp, #0
    e2b2:	6078      	str	r0, [r7, #4]
    e2b4:	6039      	str	r1, [r7, #0]
    e2b6:	687b      	ldr	r3, [r7, #4]
    e2b8:	2b01      	cmp	r3, #1
    e2ba:	d125      	bne.n	e308 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    e2bc:	683b      	ldr	r3, [r7, #0]
    e2be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e2c2:	4293      	cmp	r3, r2
    e2c4:	d120      	bne.n	e308 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    e2c6:	4912      	ldr	r1, [pc, #72]	; (e310 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e2c8:	4812      	ldr	r0, [pc, #72]	; (e314 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    e2ca:	4b13      	ldr	r3, [pc, #76]	; (e318 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    e2cc:	4798      	blx	r3
    e2ce:	4a13      	ldr	r2, [pc, #76]	; (e31c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    e2d0:	4913      	ldr	r1, [pc, #76]	; (e320 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    e2d2:	4810      	ldr	r0, [pc, #64]	; (e314 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    e2d4:	4b13      	ldr	r3, [pc, #76]	; (e324 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    e2d6:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    e2d8:	4b13      	ldr	r3, [pc, #76]	; (e328 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    e2da:	2401      	movs	r4, #1
    e2dc:	461d      	mov	r5, r3
    e2de:	2c00      	cmp	r4, #0
    e2e0:	db05      	blt.n	e2ee <_Z41__static_initialization_and_destruction_0ii+0x42>
    e2e2:	4628      	mov	r0, r5
    e2e4:	4b11      	ldr	r3, [pc, #68]	; (e32c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    e2e6:	4798      	blx	r3
    e2e8:	351c      	adds	r5, #28
    e2ea:	3c01      	subs	r4, #1
    e2ec:	e7f7      	b.n	e2de <_Z41__static_initialization_and_destruction_0ii+0x32>
    e2ee:	4a0b      	ldr	r2, [pc, #44]	; (e31c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    e2f0:	490f      	ldr	r1, [pc, #60]	; (e330 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e2f2:	2000      	movs	r0, #0
    e2f4:	4b0b      	ldr	r3, [pc, #44]	; (e324 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    e2f6:	4798      	blx	r3
    e2f8:	480e      	ldr	r0, [pc, #56]	; (e334 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e2fa:	4b0f      	ldr	r3, [pc, #60]	; (e338 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e2fc:	4798      	blx	r3
    e2fe:	4a07      	ldr	r2, [pc, #28]	; (e31c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    e300:	490e      	ldr	r1, [pc, #56]	; (e33c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e302:	480c      	ldr	r0, [pc, #48]	; (e334 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e304:	4b07      	ldr	r3, [pc, #28]	; (e324 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    e306:	4798      	blx	r3
    e308:	bf00      	nop
    e30a:	3708      	adds	r7, #8
    e30c:	46bd      	mov	sp, r7
    e30e:	bdb0      	pop	{r4, r5, r7, pc}
    e310:	200016a4 	.word	0x200016a4
    e314:	20001500 	.word	0x20001500
    e318:	0000cd5d 	.word	0x0000cd5d
    e31c:	20000000 	.word	0x20000000
    e320:	0000cd79 	.word	0x0000cd79
    e324:	0000e799 	.word	0x0000e799
    e328:	20001518 	.word	0x20001518
    e32c:	0000e3f5 	.word	0x0000e3f5
    e330:	0000e281 	.word	0x0000e281
    e334:	20001550 	.word	0x20001550
    e338:	0000dfe5 	.word	0x0000dfe5
    e33c:	0000e015 	.word	0x0000e015

0000e340 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
    e340:	b580      	push	{r7, lr}
    e342:	af00      	add	r7, sp, #0
    e344:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e348:	2001      	movs	r0, #1
    e34a:	4b01      	ldr	r3, [pc, #4]	; (e350 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
    e34c:	4798      	blx	r3
    e34e:	bd80      	pop	{r7, pc}
    e350:	0000e2ad 	.word	0x0000e2ad

0000e354 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e354:	b580      	push	{r7, lr}
    e356:	b084      	sub	sp, #16
    e358:	af00      	add	r7, sp, #0
    e35a:	60f8      	str	r0, [r7, #12]
    e35c:	60b9      	str	r1, [r7, #8]
    e35e:	4613      	mov	r3, r2
    e360:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e362:	68fb      	ldr	r3, [r7, #12]
    e364:	2b00      	cmp	r3, #0
    e366:	d004      	beq.n	e372 <io_write+0x1e>
    e368:	68bb      	ldr	r3, [r7, #8]
    e36a:	2b00      	cmp	r3, #0
    e36c:	d001      	beq.n	e372 <io_write+0x1e>
    e36e:	2301      	movs	r3, #1
    e370:	e000      	b.n	e374 <io_write+0x20>
    e372:	2300      	movs	r3, #0
    e374:	f003 0301 	and.w	r3, r3, #1
    e378:	b2db      	uxtb	r3, r3
    e37a:	2234      	movs	r2, #52	; 0x34
    e37c:	4907      	ldr	r1, [pc, #28]	; (e39c <io_write+0x48>)
    e37e:	4618      	mov	r0, r3
    e380:	4b07      	ldr	r3, [pc, #28]	; (e3a0 <io_write+0x4c>)
    e382:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e384:	68fb      	ldr	r3, [r7, #12]
    e386:	681b      	ldr	r3, [r3, #0]
    e388:	88fa      	ldrh	r2, [r7, #6]
    e38a:	68b9      	ldr	r1, [r7, #8]
    e38c:	68f8      	ldr	r0, [r7, #12]
    e38e:	4798      	blx	r3
    e390:	4603      	mov	r3, r0
}
    e392:	4618      	mov	r0, r3
    e394:	3710      	adds	r7, #16
    e396:	46bd      	mov	sp, r7
    e398:	bd80      	pop	{r7, pc}
    e39a:	bf00      	nop
    e39c:	0000f0ac 	.word	0x0000f0ac
    e3a0:	000033ad 	.word	0x000033ad

0000e3a4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e3a4:	b580      	push	{r7, lr}
    e3a6:	b084      	sub	sp, #16
    e3a8:	af00      	add	r7, sp, #0
    e3aa:	60f8      	str	r0, [r7, #12]
    e3ac:	60b9      	str	r1, [r7, #8]
    e3ae:	4613      	mov	r3, r2
    e3b0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e3b2:	68fb      	ldr	r3, [r7, #12]
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d004      	beq.n	e3c2 <io_read+0x1e>
    e3b8:	68bb      	ldr	r3, [r7, #8]
    e3ba:	2b00      	cmp	r3, #0
    e3bc:	d001      	beq.n	e3c2 <io_read+0x1e>
    e3be:	2301      	movs	r3, #1
    e3c0:	e000      	b.n	e3c4 <io_read+0x20>
    e3c2:	2300      	movs	r3, #0
    e3c4:	f003 0301 	and.w	r3, r3, #1
    e3c8:	b2db      	uxtb	r3, r3
    e3ca:	223d      	movs	r2, #61	; 0x3d
    e3cc:	4907      	ldr	r1, [pc, #28]	; (e3ec <io_read+0x48>)
    e3ce:	4618      	mov	r0, r3
    e3d0:	4b07      	ldr	r3, [pc, #28]	; (e3f0 <io_read+0x4c>)
    e3d2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e3d4:	68fb      	ldr	r3, [r7, #12]
    e3d6:	685b      	ldr	r3, [r3, #4]
    e3d8:	88fa      	ldrh	r2, [r7, #6]
    e3da:	68b9      	ldr	r1, [r7, #8]
    e3dc:	68f8      	ldr	r0, [r7, #12]
    e3de:	4798      	blx	r3
    e3e0:	4603      	mov	r3, r0
}
    e3e2:	4618      	mov	r0, r3
    e3e4:	3710      	adds	r7, #16
    e3e6:	46bd      	mov	sp, r7
    e3e8:	bd80      	pop	{r7, pc}
    e3ea:	bf00      	nop
    e3ec:	0000f0ac 	.word	0x0000f0ac
    e3f0:	000033ad 	.word	0x000033ad

0000e3f4 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    e3f4:	b480      	push	{r7}
    e3f6:	b083      	sub	sp, #12
    e3f8:	af00      	add	r7, sp, #0
    e3fa:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    e3fc:	687b      	ldr	r3, [r7, #4]
    e3fe:	4618      	mov	r0, r3
    e400:	370c      	adds	r7, #12
    e402:	46bd      	mov	sp, r7
    e404:	bc80      	pop	{r7}
    e406:	4770      	bx	lr

0000e408 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    e408:	b480      	push	{r7}
    e40a:	b083      	sub	sp, #12
    e40c:	af00      	add	r7, sp, #0
    e40e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    e410:	687b      	ldr	r3, [r7, #4]
    e412:	4618      	mov	r0, r3
    e414:	370c      	adds	r7, #12
    e416:	46bd      	mov	sp, r7
    e418:	bc80      	pop	{r7}
    e41a:	4770      	bx	lr

0000e41c <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    e41c:	b480      	push	{r7}
    e41e:	b085      	sub	sp, #20
    e420:	af00      	add	r7, sp, #0
    e422:	60f8      	str	r0, [r7, #12]
    e424:	460b      	mov	r3, r1
    e426:	607a      	str	r2, [r7, #4]
    e428:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    e42a:	687b      	ldr	r3, [r7, #4]
    e42c:	681a      	ldr	r2, [r3, #0]
    e42e:	68fb      	ldr	r3, [r7, #12]
    e430:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    e432:	687b      	ldr	r3, [r7, #4]
    e434:	685a      	ldr	r2, [r3, #4]
    e436:	68fb      	ldr	r3, [r7, #12]
    e438:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    e43a:	68fb      	ldr	r3, [r7, #12]
    e43c:	7afa      	ldrb	r2, [r7, #11]
    e43e:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    e440:	68fb      	ldr	r3, [r7, #12]
    e442:	687a      	ldr	r2, [r7, #4]
    e444:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    e446:	68fb      	ldr	r3, [r7, #12]
    e448:	68db      	ldr	r3, [r3, #12]
    e44a:	7a5b      	ldrb	r3, [r3, #9]
    e44c:	b2da      	uxtb	r2, r3
    e44e:	68fb      	ldr	r3, [r7, #12]
    e450:	719a      	strb	r2, [r3, #6]
	return isOK;
    e452:	68fb      	ldr	r3, [r7, #12]
    e454:	799b      	ldrb	r3, [r3, #6]
    e456:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    e458:	4618      	mov	r0, r3
    e45a:	3714      	adds	r7, #20
    e45c:	46bd      	mov	sp, r7
    e45e:	bc80      	pop	{r7}
    e460:	4770      	bx	lr

0000e462 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    e462:	b480      	push	{r7}
    e464:	b083      	sub	sp, #12
    e466:	af00      	add	r7, sp, #0
    e468:	6078      	str	r0, [r7, #4]
    e46a:	460b      	mov	r3, r1
    e46c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    e46e:	78fb      	ldrb	r3, [r7, #3]
    e470:	f003 0307 	and.w	r3, r3, #7
    e474:	b2db      	uxtb	r3, r3
}
    e476:	4618      	mov	r0, r3
    e478:	370c      	adds	r7, #12
    e47a:	46bd      	mov	sp, r7
    e47c:	bc80      	pop	{r7}
    e47e:	4770      	bx	lr

0000e480 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    e480:	b480      	push	{r7}
    e482:	b083      	sub	sp, #12
    e484:	af00      	add	r7, sp, #0
    e486:	6078      	str	r0, [r7, #4]
    e488:	4608      	mov	r0, r1
    e48a:	4611      	mov	r1, r2
    e48c:	461a      	mov	r2, r3
    e48e:	4603      	mov	r3, r0
    e490:	70fb      	strb	r3, [r7, #3]
    e492:	460b      	mov	r3, r1
    e494:	70bb      	strb	r3, [r7, #2]
    e496:	4613      	mov	r3, r2
    e498:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    e49a:	78fb      	ldrb	r3, [r7, #3]
    e49c:	2b07      	cmp	r3, #7
    e49e:	dc01      	bgt.n	e4a4 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    e4a0:	78bb      	ldrb	r3, [r7, #2]
    e4a2:	e000      	b.n	e4a6 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    e4a4:	787b      	ldrb	r3, [r7, #1]
}
    e4a6:	4618      	mov	r0, r3
    e4a8:	370c      	adds	r7, #12
    e4aa:	46bd      	mov	sp, r7
    e4ac:	bc80      	pop	{r7}
    e4ae:	4770      	bx	lr

0000e4b0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    e4b0:	b580      	push	{r7, lr}
    e4b2:	b082      	sub	sp, #8
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	6078      	str	r0, [r7, #4]
    e4b8:	460b      	mov	r3, r1
    e4ba:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    e4bc:	687b      	ldr	r3, [r7, #4]
    e4be:	68da      	ldr	r2, [r3, #12]
    e4c0:	687b      	ldr	r3, [r7, #4]
    e4c2:	7a1b      	ldrb	r3, [r3, #8]
    e4c4:	4619      	mov	r1, r3
    e4c6:	4610      	mov	r0, r2
    e4c8:	4b0a      	ldr	r3, [pc, #40]	; (e4f4 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    e4ca:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    e4cc:	687b      	ldr	r3, [r7, #4]
    e4ce:	68db      	ldr	r3, [r3, #12]
    e4d0:	1cf9      	adds	r1, r7, #3
    e4d2:	2201      	movs	r2, #1
    e4d4:	4618      	mov	r0, r3
    e4d6:	4b08      	ldr	r3, [pc, #32]	; (e4f8 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    e4d8:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    e4da:	687b      	ldr	r3, [r7, #4]
    e4dc:	68db      	ldr	r3, [r3, #12]
    e4de:	6879      	ldr	r1, [r7, #4]
    e4e0:	2201      	movs	r2, #1
    e4e2:	4618      	mov	r0, r3
    e4e4:	4b05      	ldr	r3, [pc, #20]	; (e4fc <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    e4e6:	4798      	blx	r3

	return registerValue;
    e4e8:	687b      	ldr	r3, [r7, #4]
    e4ea:	781b      	ldrb	r3, [r3, #0]
}
    e4ec:	4618      	mov	r0, r3
    e4ee:	3708      	adds	r7, #8
    e4f0:	46bd      	mov	sp, r7
    e4f2:	bd80      	pop	{r7, pc}
    e4f4:	0000cdf5 	.word	0x0000cdf5
    e4f8:	0000ce21 	.word	0x0000ce21
    e4fc:	0000ce4d 	.word	0x0000ce4d

0000e500 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    e500:	b580      	push	{r7, lr}
    e502:	b084      	sub	sp, #16
    e504:	af00      	add	r7, sp, #0
    e506:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    e508:	687b      	ldr	r3, [r7, #4]
    e50a:	68da      	ldr	r2, [r3, #12]
    e50c:	687b      	ldr	r3, [r7, #4]
    e50e:	7a1b      	ldrb	r3, [r3, #8]
    e510:	4619      	mov	r1, r3
    e512:	4610      	mov	r0, r2
    e514:	4b06      	ldr	r3, [pc, #24]	; (e530 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    e516:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    e518:	2109      	movs	r1, #9
    e51a:	6878      	ldr	r0, [r7, #4]
    e51c:	4b05      	ldr	r3, [pc, #20]	; (e534 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    e51e:	4798      	blx	r3
    e520:	4603      	mov	r3, r0
    e522:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    e524:	7bfb      	ldrb	r3, [r7, #15]
}
    e526:	4618      	mov	r0, r3
    e528:	3710      	adds	r7, #16
    e52a:	46bd      	mov	sp, r7
    e52c:	bd80      	pop	{r7, pc}
    e52e:	bf00      	nop
    e530:	0000cdf5 	.word	0x0000cdf5
    e534:	0000e4b1 	.word	0x0000e4b1

0000e538 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    e538:	b580      	push	{r7, lr}
    e53a:	b084      	sub	sp, #16
    e53c:	af00      	add	r7, sp, #0
    e53e:	6078      	str	r0, [r7, #4]
    e540:	460b      	mov	r3, r1
    e542:	70fb      	strb	r3, [r7, #3]
    e544:	4613      	mov	r3, r2
    e546:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    e548:	687b      	ldr	r3, [r7, #4]
    e54a:	68da      	ldr	r2, [r3, #12]
    e54c:	687b      	ldr	r3, [r7, #4]
    e54e:	7a1b      	ldrb	r3, [r3, #8]
    e550:	4619      	mov	r1, r3
    e552:	4610      	mov	r0, r2
    e554:	4b09      	ldr	r3, [pc, #36]	; (e57c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    e556:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e558:	78fb      	ldrb	r3, [r7, #3]
    e55a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e55c:	78bb      	ldrb	r3, [r7, #2]
    e55e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e560:	687b      	ldr	r3, [r7, #4]
    e562:	68db      	ldr	r3, [r3, #12]
    e564:	f107 010c 	add.w	r1, r7, #12
    e568:	2202      	movs	r2, #2
    e56a:	4618      	mov	r0, r3
    e56c:	4b04      	ldr	r3, [pc, #16]	; (e580 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e56e:	4798      	blx	r3
    e570:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e572:	4618      	mov	r0, r3
    e574:	3710      	adds	r7, #16
    e576:	46bd      	mov	sp, r7
    e578:	bd80      	pop	{r7, pc}
    e57a:	bf00      	nop
    e57c:	0000cdf5 	.word	0x0000cdf5
    e580:	0000ce21 	.word	0x0000ce21

0000e584 <_ZN14MCP23008_Class12SetPortInputEv>:
	//i2cClass->Irq_Enable();
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    e584:	b580      	push	{r7, lr}
    e586:	b084      	sub	sp, #16
    e588:	af00      	add	r7, sp, #0
    e58a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e58c:	2300      	movs	r3, #0
    e58e:	73fb      	strb	r3, [r7, #15]
    e590:	7bfb      	ldrb	r3, [r7, #15]
    e592:	2b07      	cmp	r3, #7
    e594:	dc0f      	bgt.n	e5b6 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e596:	7bfb      	ldrb	r3, [r7, #15]
    e598:	2201      	movs	r2, #1
    e59a:	4619      	mov	r1, r3
    e59c:	6878      	ldr	r0, [r7, #4]
    e59e:	4b08      	ldr	r3, [pc, #32]	; (e5c0 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e5a0:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e5a2:	7bfb      	ldrb	r3, [r7, #15]
    e5a4:	2201      	movs	r2, #1
    e5a6:	4619      	mov	r1, r3
    e5a8:	6878      	ldr	r0, [r7, #4]
    e5aa:	4b06      	ldr	r3, [pc, #24]	; (e5c4 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e5ac:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e5ae:	7bfb      	ldrb	r3, [r7, #15]
    e5b0:	3301      	adds	r3, #1
    e5b2:	73fb      	strb	r3, [r7, #15]
    e5b4:	e7ec      	b.n	e590 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e5b6:	bf00      	nop
    e5b8:	3710      	adds	r7, #16
    e5ba:	46bd      	mov	sp, r7
    e5bc:	bd80      	pop	{r7, pc}
    e5be:	bf00      	nop
    e5c0:	0000e689 	.word	0x0000e689
    e5c4:	0000e76d 	.word	0x0000e76d

0000e5c8 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    e5c8:	b580      	push	{r7, lr}
    e5ca:	b084      	sub	sp, #16
    e5cc:	af00      	add	r7, sp, #0
    e5ce:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e5d0:	2300      	movs	r3, #0
    e5d2:	73fb      	strb	r3, [r7, #15]
    e5d4:	7bfb      	ldrb	r3, [r7, #15]
    e5d6:	2b07      	cmp	r3, #7
    e5d8:	dc09      	bgt.n	e5ee <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e5da:	7bfb      	ldrb	r3, [r7, #15]
    e5dc:	2200      	movs	r2, #0
    e5de:	4619      	mov	r1, r3
    e5e0:	6878      	ldr	r0, [r7, #4]
    e5e2:	4b05      	ldr	r3, [pc, #20]	; (e5f8 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e5e4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e5e6:	7bfb      	ldrb	r3, [r7, #15]
    e5e8:	3301      	adds	r3, #1
    e5ea:	73fb      	strb	r3, [r7, #15]
    e5ec:	e7f2      	b.n	e5d4 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e5ee:	bf00      	nop
    e5f0:	3710      	adds	r7, #16
    e5f2:	46bd      	mov	sp, r7
    e5f4:	bd80      	pop	{r7, pc}
    e5f6:	bf00      	nop
    e5f8:	0000e689 	.word	0x0000e689

0000e5fc <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e5fc:	b580      	push	{r7, lr}
    e5fe:	b084      	sub	sp, #16
    e600:	af00      	add	r7, sp, #0
    e602:	6078      	str	r0, [r7, #4]
    e604:	4608      	mov	r0, r1
    e606:	4611      	mov	r1, r2
    e608:	461a      	mov	r2, r3
    e60a:	4603      	mov	r3, r0
    e60c:	70fb      	strb	r3, [r7, #3]
    e60e:	460b      	mov	r3, r1
    e610:	70bb      	strb	r3, [r7, #2]
    e612:	4613      	mov	r3, r2
    e614:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    e616:	787b      	ldrb	r3, [r7, #1]
    e618:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    e61a:	78fb      	ldrb	r3, [r7, #3]
    e61c:	4619      	mov	r1, r3
    e61e:	6878      	ldr	r0, [r7, #4]
    e620:	4b16      	ldr	r3, [pc, #88]	; (e67c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    e622:	4798      	blx	r3
    e624:	4603      	mov	r3, r0
    e626:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    e628:	7bfb      	ldrb	r3, [r7, #15]
    e62a:	4619      	mov	r1, r3
    e62c:	6878      	ldr	r0, [r7, #4]
    e62e:	4b14      	ldr	r3, [pc, #80]	; (e680 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    e630:	4798      	blx	r3
    e632:	4603      	mov	r3, r0
    e634:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    e636:	78bb      	ldrb	r3, [r7, #2]
    e638:	2b00      	cmp	r3, #0
    e63a:	d009      	beq.n	e650 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    e63c:	7bba      	ldrb	r2, [r7, #14]
    e63e:	7b7b      	ldrb	r3, [r7, #13]
    e640:	4619      	mov	r1, r3
    e642:	2301      	movs	r3, #1
    e644:	408b      	lsls	r3, r1
    e646:	b2db      	uxtb	r3, r3
    e648:	4313      	orrs	r3, r2
    e64a:	b2db      	uxtb	r3, r3
    e64c:	73bb      	strb	r3, [r7, #14]
    e64e:	e00a      	b.n	e666 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    e650:	7bba      	ldrb	r2, [r7, #14]
    e652:	7b7b      	ldrb	r3, [r7, #13]
    e654:	4619      	mov	r1, r3
    e656:	2301      	movs	r3, #1
    e658:	408b      	lsls	r3, r1
    e65a:	b2db      	uxtb	r3, r3
    e65c:	43db      	mvns	r3, r3
    e65e:	b2db      	uxtb	r3, r3
    e660:	4013      	ands	r3, r2
    e662:	b2db      	uxtb	r3, r3
    e664:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    e666:	7bba      	ldrb	r2, [r7, #14]
    e668:	7bfb      	ldrb	r3, [r7, #15]
    e66a:	4619      	mov	r1, r3
    e66c:	6878      	ldr	r0, [r7, #4]
    e66e:	4b05      	ldr	r3, [pc, #20]	; (e684 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    e670:	4798      	blx	r3
}
    e672:	bf00      	nop
    e674:	3710      	adds	r7, #16
    e676:	46bd      	mov	sp, r7
    e678:	bd80      	pop	{r7, pc}
    e67a:	bf00      	nop
    e67c:	0000e463 	.word	0x0000e463
    e680:	0000e4b1 	.word	0x0000e4b1
    e684:	0000e539 	.word	0x0000e539

0000e688 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    e688:	b590      	push	{r4, r7, lr}
    e68a:	b085      	sub	sp, #20
    e68c:	af02      	add	r7, sp, #8
    e68e:	6078      	str	r0, [r7, #4]
    e690:	460b      	mov	r3, r1
    e692:	70fb      	strb	r3, [r7, #3]
    e694:	4613      	mov	r3, r2
    e696:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    e698:	78bb      	ldrb	r3, [r7, #2]
    e69a:	2b01      	cmp	r3, #1
    e69c:	bf0c      	ite	eq
    e69e:	2301      	moveq	r3, #1
    e6a0:	2300      	movne	r3, #0
    e6a2:	b2db      	uxtb	r3, r3
    e6a4:	461a      	mov	r2, r3
    e6a6:	78f9      	ldrb	r1, [r7, #3]
    e6a8:	2300      	movs	r3, #0
    e6aa:	9300      	str	r3, [sp, #0]
    e6ac:	2300      	movs	r3, #0
    e6ae:	6878      	ldr	r0, [r7, #4]
    e6b0:	4c02      	ldr	r4, [pc, #8]	; (e6bc <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    e6b2:	47a0      	blx	r4
}
    e6b4:	bf00      	nop
    e6b6:	370c      	adds	r7, #12
    e6b8:	46bd      	mov	sp, r7
    e6ba:	bd90      	pop	{r4, r7, pc}
    e6bc:	0000e5fd 	.word	0x0000e5fd

0000e6c0 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    e6c0:	b590      	push	{r4, r7, lr}
    e6c2:	b085      	sub	sp, #20
    e6c4:	af00      	add	r7, sp, #0
    e6c6:	6078      	str	r0, [r7, #4]
    e6c8:	460b      	mov	r3, r1
    e6ca:	70fb      	strb	r3, [r7, #3]
    e6cc:	4613      	mov	r3, r2
    e6ce:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    e6d0:	78fb      	ldrb	r3, [r7, #3]
    e6d2:	4619      	mov	r1, r3
    e6d4:	6878      	ldr	r0, [r7, #4]
    e6d6:	4b21      	ldr	r3, [pc, #132]	; (e75c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    e6d8:	4798      	blx	r3
    e6da:	4603      	mov	r3, r0
    e6dc:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    e6de:	78f9      	ldrb	r1, [r7, #3]
    e6e0:	230a      	movs	r3, #10
    e6e2:	220a      	movs	r2, #10
    e6e4:	6878      	ldr	r0, [r7, #4]
    e6e6:	4c1e      	ldr	r4, [pc, #120]	; (e760 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e6e8:	47a0      	blx	r4
    e6ea:	4603      	mov	r3, r0
    e6ec:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    e6ee:	7bfb      	ldrb	r3, [r7, #15]
    e6f0:	4619      	mov	r1, r3
    e6f2:	6878      	ldr	r0, [r7, #4]
    e6f4:	4b1b      	ldr	r3, [pc, #108]	; (e764 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    e6f6:	4798      	blx	r3
    e6f8:	4603      	mov	r3, r0
    e6fa:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    e6fc:	78bb      	ldrb	r3, [r7, #2]
    e6fe:	2b00      	cmp	r3, #0
    e700:	d009      	beq.n	e716 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    e702:	7bba      	ldrb	r2, [r7, #14]
    e704:	7b7b      	ldrb	r3, [r7, #13]
    e706:	4619      	mov	r1, r3
    e708:	2301      	movs	r3, #1
    e70a:	408b      	lsls	r3, r1
    e70c:	b2db      	uxtb	r3, r3
    e70e:	4313      	orrs	r3, r2
    e710:	b2db      	uxtb	r3, r3
    e712:	73bb      	strb	r3, [r7, #14]
    e714:	e00a      	b.n	e72c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    e716:	7bba      	ldrb	r2, [r7, #14]
    e718:	7b7b      	ldrb	r3, [r7, #13]
    e71a:	4619      	mov	r1, r3
    e71c:	2301      	movs	r3, #1
    e71e:	408b      	lsls	r3, r1
    e720:	b2db      	uxtb	r3, r3
    e722:	43db      	mvns	r3, r3
    e724:	b2db      	uxtb	r3, r3
    e726:	4013      	ands	r3, r2
    e728:	b2db      	uxtb	r3, r3
    e72a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    e72c:	78f9      	ldrb	r1, [r7, #3]
    e72e:	2309      	movs	r3, #9
    e730:	2209      	movs	r2, #9
    e732:	6878      	ldr	r0, [r7, #4]
    e734:	4c0a      	ldr	r4, [pc, #40]	; (e760 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e736:	47a0      	blx	r4
    e738:	4603      	mov	r3, r0
    e73a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    e73c:	7bba      	ldrb	r2, [r7, #14]
    e73e:	7bfb      	ldrb	r3, [r7, #15]
    e740:	4619      	mov	r1, r3
    e742:	6878      	ldr	r0, [r7, #4]
    e744:	4b08      	ldr	r3, [pc, #32]	; (e768 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    e746:	4798      	blx	r3
    e748:	4603      	mov	r3, r0
    e74a:	2b00      	cmp	r3, #0
    e74c:	bf0c      	ite	eq
    e74e:	2301      	moveq	r3, #1
    e750:	2300      	movne	r3, #0
    e752:	b2db      	uxtb	r3, r3
}
    e754:	4618      	mov	r0, r3
    e756:	3714      	adds	r7, #20
    e758:	46bd      	mov	sp, r7
    e75a:	bd90      	pop	{r4, r7, pc}
    e75c:	0000e463 	.word	0x0000e463
    e760:	0000e481 	.word	0x0000e481
    e764:	0000e4b1 	.word	0x0000e4b1
    e768:	0000e539 	.word	0x0000e539

0000e76c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e76c:	b590      	push	{r4, r7, lr}
    e76e:	b085      	sub	sp, #20
    e770:	af02      	add	r7, sp, #8
    e772:	6078      	str	r0, [r7, #4]
    e774:	460b      	mov	r3, r1
    e776:	70fb      	strb	r3, [r7, #3]
    e778:	4613      	mov	r3, r2
    e77a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e77c:	78ba      	ldrb	r2, [r7, #2]
    e77e:	78f9      	ldrb	r1, [r7, #3]
    e780:	2306      	movs	r3, #6
    e782:	9300      	str	r3, [sp, #0]
    e784:	2306      	movs	r3, #6
    e786:	6878      	ldr	r0, [r7, #4]
    e788:	4c02      	ldr	r4, [pc, #8]	; (e794 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e78a:	47a0      	blx	r4
}
    e78c:	bf00      	nop
    e78e:	370c      	adds	r7, #12
    e790:	46bd      	mov	sp, r7
    e792:	bd90      	pop	{r4, r7, pc}
    e794:	0000e5fd 	.word	0x0000e5fd

0000e798 <__aeabi_atexit>:
    e798:	460b      	mov	r3, r1
    e79a:	4601      	mov	r1, r0
    e79c:	4618      	mov	r0, r3
    e79e:	f000 b801 	b.w	e7a4 <__cxa_atexit>
    e7a2:	bf00      	nop

0000e7a4 <__cxa_atexit>:
    e7a4:	4613      	mov	r3, r2
    e7a6:	460a      	mov	r2, r1
    e7a8:	4601      	mov	r1, r0
    e7aa:	2002      	movs	r0, #2
    e7ac:	f000 b996 	b.w	eadc <__register_exitproc>

0000e7b0 <ffs>:
    e7b0:	b140      	cbz	r0, e7c4 <ffs+0x14>
    e7b2:	2300      	movs	r3, #0
    e7b4:	fa40 f103 	asr.w	r1, r0, r3
    e7b8:	1c5a      	adds	r2, r3, #1
    e7ba:	07c9      	lsls	r1, r1, #31
    e7bc:	4613      	mov	r3, r2
    e7be:	d5f9      	bpl.n	e7b4 <ffs+0x4>
    e7c0:	4610      	mov	r0, r2
    e7c2:	4770      	bx	lr
    e7c4:	4602      	mov	r2, r0
    e7c6:	4610      	mov	r0, r2
    e7c8:	4770      	bx	lr
    e7ca:	bf00      	nop

0000e7cc <__libc_init_array>:
    e7cc:	b570      	push	{r4, r5, r6, lr}
    e7ce:	4e0f      	ldr	r6, [pc, #60]	; (e80c <__libc_init_array+0x40>)
    e7d0:	4d0f      	ldr	r5, [pc, #60]	; (e810 <__libc_init_array+0x44>)
    e7d2:	1b76      	subs	r6, r6, r5
    e7d4:	10b6      	asrs	r6, r6, #2
    e7d6:	bf18      	it	ne
    e7d8:	2400      	movne	r4, #0
    e7da:	d005      	beq.n	e7e8 <__libc_init_array+0x1c>
    e7dc:	3401      	adds	r4, #1
    e7de:	f855 3b04 	ldr.w	r3, [r5], #4
    e7e2:	4798      	blx	r3
    e7e4:	42a6      	cmp	r6, r4
    e7e6:	d1f9      	bne.n	e7dc <__libc_init_array+0x10>
    e7e8:	4e0a      	ldr	r6, [pc, #40]	; (e814 <__libc_init_array+0x48>)
    e7ea:	4d0b      	ldr	r5, [pc, #44]	; (e818 <__libc_init_array+0x4c>)
    e7ec:	1b76      	subs	r6, r6, r5
    e7ee:	f000 fc69 	bl	f0c4 <_init>
    e7f2:	10b6      	asrs	r6, r6, #2
    e7f4:	bf18      	it	ne
    e7f6:	2400      	movne	r4, #0
    e7f8:	d006      	beq.n	e808 <__libc_init_array+0x3c>
    e7fa:	3401      	adds	r4, #1
    e7fc:	f855 3b04 	ldr.w	r3, [r5], #4
    e800:	4798      	blx	r3
    e802:	42a6      	cmp	r6, r4
    e804:	d1f9      	bne.n	e7fa <__libc_init_array+0x2e>
    e806:	bd70      	pop	{r4, r5, r6, pc}
    e808:	bd70      	pop	{r4, r5, r6, pc}
    e80a:	bf00      	nop
    e80c:	0000f0d0 	.word	0x0000f0d0
    e810:	0000f0d0 	.word	0x0000f0d0
    e814:	0000f0f0 	.word	0x0000f0f0
    e818:	0000f0d0 	.word	0x0000f0d0

0000e81c <memcpy>:
    e81c:	4684      	mov	ip, r0
    e81e:	ea41 0300 	orr.w	r3, r1, r0
    e822:	f013 0303 	ands.w	r3, r3, #3
    e826:	d16d      	bne.n	e904 <memcpy+0xe8>
    e828:	3a40      	subs	r2, #64	; 0x40
    e82a:	d341      	bcc.n	e8b0 <memcpy+0x94>
    e82c:	f851 3b04 	ldr.w	r3, [r1], #4
    e830:	f840 3b04 	str.w	r3, [r0], #4
    e834:	f851 3b04 	ldr.w	r3, [r1], #4
    e838:	f840 3b04 	str.w	r3, [r0], #4
    e83c:	f851 3b04 	ldr.w	r3, [r1], #4
    e840:	f840 3b04 	str.w	r3, [r0], #4
    e844:	f851 3b04 	ldr.w	r3, [r1], #4
    e848:	f840 3b04 	str.w	r3, [r0], #4
    e84c:	f851 3b04 	ldr.w	r3, [r1], #4
    e850:	f840 3b04 	str.w	r3, [r0], #4
    e854:	f851 3b04 	ldr.w	r3, [r1], #4
    e858:	f840 3b04 	str.w	r3, [r0], #4
    e85c:	f851 3b04 	ldr.w	r3, [r1], #4
    e860:	f840 3b04 	str.w	r3, [r0], #4
    e864:	f851 3b04 	ldr.w	r3, [r1], #4
    e868:	f840 3b04 	str.w	r3, [r0], #4
    e86c:	f851 3b04 	ldr.w	r3, [r1], #4
    e870:	f840 3b04 	str.w	r3, [r0], #4
    e874:	f851 3b04 	ldr.w	r3, [r1], #4
    e878:	f840 3b04 	str.w	r3, [r0], #4
    e87c:	f851 3b04 	ldr.w	r3, [r1], #4
    e880:	f840 3b04 	str.w	r3, [r0], #4
    e884:	f851 3b04 	ldr.w	r3, [r1], #4
    e888:	f840 3b04 	str.w	r3, [r0], #4
    e88c:	f851 3b04 	ldr.w	r3, [r1], #4
    e890:	f840 3b04 	str.w	r3, [r0], #4
    e894:	f851 3b04 	ldr.w	r3, [r1], #4
    e898:	f840 3b04 	str.w	r3, [r0], #4
    e89c:	f851 3b04 	ldr.w	r3, [r1], #4
    e8a0:	f840 3b04 	str.w	r3, [r0], #4
    e8a4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8a8:	f840 3b04 	str.w	r3, [r0], #4
    e8ac:	3a40      	subs	r2, #64	; 0x40
    e8ae:	d2bd      	bcs.n	e82c <memcpy+0x10>
    e8b0:	3230      	adds	r2, #48	; 0x30
    e8b2:	d311      	bcc.n	e8d8 <memcpy+0xbc>
    e8b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8b8:	f840 3b04 	str.w	r3, [r0], #4
    e8bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8c0:	f840 3b04 	str.w	r3, [r0], #4
    e8c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8c8:	f840 3b04 	str.w	r3, [r0], #4
    e8cc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8d0:	f840 3b04 	str.w	r3, [r0], #4
    e8d4:	3a10      	subs	r2, #16
    e8d6:	d2ed      	bcs.n	e8b4 <memcpy+0x98>
    e8d8:	320c      	adds	r2, #12
    e8da:	d305      	bcc.n	e8e8 <memcpy+0xcc>
    e8dc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8e0:	f840 3b04 	str.w	r3, [r0], #4
    e8e4:	3a04      	subs	r2, #4
    e8e6:	d2f9      	bcs.n	e8dc <memcpy+0xc0>
    e8e8:	3204      	adds	r2, #4
    e8ea:	d008      	beq.n	e8fe <memcpy+0xe2>
    e8ec:	07d2      	lsls	r2, r2, #31
    e8ee:	bf1c      	itt	ne
    e8f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e8f4:	f800 3b01 	strbne.w	r3, [r0], #1
    e8f8:	d301      	bcc.n	e8fe <memcpy+0xe2>
    e8fa:	880b      	ldrh	r3, [r1, #0]
    e8fc:	8003      	strh	r3, [r0, #0]
    e8fe:	4660      	mov	r0, ip
    e900:	4770      	bx	lr
    e902:	bf00      	nop
    e904:	2a08      	cmp	r2, #8
    e906:	d313      	bcc.n	e930 <memcpy+0x114>
    e908:	078b      	lsls	r3, r1, #30
    e90a:	d08d      	beq.n	e828 <memcpy+0xc>
    e90c:	f010 0303 	ands.w	r3, r0, #3
    e910:	d08a      	beq.n	e828 <memcpy+0xc>
    e912:	f1c3 0304 	rsb	r3, r3, #4
    e916:	1ad2      	subs	r2, r2, r3
    e918:	07db      	lsls	r3, r3, #31
    e91a:	bf1c      	itt	ne
    e91c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e920:	f800 3b01 	strbne.w	r3, [r0], #1
    e924:	d380      	bcc.n	e828 <memcpy+0xc>
    e926:	f831 3b02 	ldrh.w	r3, [r1], #2
    e92a:	f820 3b02 	strh.w	r3, [r0], #2
    e92e:	e77b      	b.n	e828 <memcpy+0xc>
    e930:	3a04      	subs	r2, #4
    e932:	d3d9      	bcc.n	e8e8 <memcpy+0xcc>
    e934:	3a01      	subs	r2, #1
    e936:	f811 3b01 	ldrb.w	r3, [r1], #1
    e93a:	f800 3b01 	strb.w	r3, [r0], #1
    e93e:	d2f9      	bcs.n	e934 <memcpy+0x118>
    e940:	780b      	ldrb	r3, [r1, #0]
    e942:	7003      	strb	r3, [r0, #0]
    e944:	784b      	ldrb	r3, [r1, #1]
    e946:	7043      	strb	r3, [r0, #1]
    e948:	788b      	ldrb	r3, [r1, #2]
    e94a:	7083      	strb	r3, [r0, #2]
    e94c:	4660      	mov	r0, ip
    e94e:	4770      	bx	lr

0000e950 <memset>:
    e950:	b470      	push	{r4, r5, r6}
    e952:	0786      	lsls	r6, r0, #30
    e954:	d046      	beq.n	e9e4 <memset+0x94>
    e956:	1e54      	subs	r4, r2, #1
    e958:	2a00      	cmp	r2, #0
    e95a:	d041      	beq.n	e9e0 <memset+0x90>
    e95c:	b2ca      	uxtb	r2, r1
    e95e:	4603      	mov	r3, r0
    e960:	e002      	b.n	e968 <memset+0x18>
    e962:	f114 34ff 	adds.w	r4, r4, #4294967295
    e966:	d33b      	bcc.n	e9e0 <memset+0x90>
    e968:	f803 2b01 	strb.w	r2, [r3], #1
    e96c:	079d      	lsls	r5, r3, #30
    e96e:	d1f8      	bne.n	e962 <memset+0x12>
    e970:	2c03      	cmp	r4, #3
    e972:	d92e      	bls.n	e9d2 <memset+0x82>
    e974:	b2cd      	uxtb	r5, r1
    e976:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e97a:	2c0f      	cmp	r4, #15
    e97c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e980:	d919      	bls.n	e9b6 <memset+0x66>
    e982:	f103 0210 	add.w	r2, r3, #16
    e986:	4626      	mov	r6, r4
    e988:	3e10      	subs	r6, #16
    e98a:	2e0f      	cmp	r6, #15
    e98c:	f842 5c10 	str.w	r5, [r2, #-16]
    e990:	f842 5c0c 	str.w	r5, [r2, #-12]
    e994:	f842 5c08 	str.w	r5, [r2, #-8]
    e998:	f842 5c04 	str.w	r5, [r2, #-4]
    e99c:	f102 0210 	add.w	r2, r2, #16
    e9a0:	d8f2      	bhi.n	e988 <memset+0x38>
    e9a2:	f1a4 0210 	sub.w	r2, r4, #16
    e9a6:	f022 020f 	bic.w	r2, r2, #15
    e9aa:	f004 040f 	and.w	r4, r4, #15
    e9ae:	3210      	adds	r2, #16
    e9b0:	2c03      	cmp	r4, #3
    e9b2:	4413      	add	r3, r2
    e9b4:	d90d      	bls.n	e9d2 <memset+0x82>
    e9b6:	461e      	mov	r6, r3
    e9b8:	4622      	mov	r2, r4
    e9ba:	3a04      	subs	r2, #4
    e9bc:	2a03      	cmp	r2, #3
    e9be:	f846 5b04 	str.w	r5, [r6], #4
    e9c2:	d8fa      	bhi.n	e9ba <memset+0x6a>
    e9c4:	1f22      	subs	r2, r4, #4
    e9c6:	f022 0203 	bic.w	r2, r2, #3
    e9ca:	3204      	adds	r2, #4
    e9cc:	4413      	add	r3, r2
    e9ce:	f004 0403 	and.w	r4, r4, #3
    e9d2:	b12c      	cbz	r4, e9e0 <memset+0x90>
    e9d4:	b2c9      	uxtb	r1, r1
    e9d6:	441c      	add	r4, r3
    e9d8:	f803 1b01 	strb.w	r1, [r3], #1
    e9dc:	429c      	cmp	r4, r3
    e9de:	d1fb      	bne.n	e9d8 <memset+0x88>
    e9e0:	bc70      	pop	{r4, r5, r6}
    e9e2:	4770      	bx	lr
    e9e4:	4614      	mov	r4, r2
    e9e6:	4603      	mov	r3, r0
    e9e8:	e7c2      	b.n	e970 <memset+0x20>
    e9ea:	bf00      	nop
	...

0000ea00 <strlen>:
    ea00:	f890 f000 	pld	[r0]
    ea04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ea08:	f020 0107 	bic.w	r1, r0, #7
    ea0c:	f06f 0c00 	mvn.w	ip, #0
    ea10:	f010 0407 	ands.w	r4, r0, #7
    ea14:	f891 f020 	pld	[r1, #32]
    ea18:	f040 8049 	bne.w	eaae <strlen+0xae>
    ea1c:	f04f 0400 	mov.w	r4, #0
    ea20:	f06f 0007 	mvn.w	r0, #7
    ea24:	e9d1 2300 	ldrd	r2, r3, [r1]
    ea28:	f891 f040 	pld	[r1, #64]	; 0x40
    ea2c:	f100 0008 	add.w	r0, r0, #8
    ea30:	fa82 f24c 	uadd8	r2, r2, ip
    ea34:	faa4 f28c 	sel	r2, r4, ip
    ea38:	fa83 f34c 	uadd8	r3, r3, ip
    ea3c:	faa2 f38c 	sel	r3, r2, ip
    ea40:	bb4b      	cbnz	r3, ea96 <strlen+0x96>
    ea42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ea46:	fa82 f24c 	uadd8	r2, r2, ip
    ea4a:	f100 0008 	add.w	r0, r0, #8
    ea4e:	faa4 f28c 	sel	r2, r4, ip
    ea52:	fa83 f34c 	uadd8	r3, r3, ip
    ea56:	faa2 f38c 	sel	r3, r2, ip
    ea5a:	b9e3      	cbnz	r3, ea96 <strlen+0x96>
    ea5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    ea60:	fa82 f24c 	uadd8	r2, r2, ip
    ea64:	f100 0008 	add.w	r0, r0, #8
    ea68:	faa4 f28c 	sel	r2, r4, ip
    ea6c:	fa83 f34c 	uadd8	r3, r3, ip
    ea70:	faa2 f38c 	sel	r3, r2, ip
    ea74:	b97b      	cbnz	r3, ea96 <strlen+0x96>
    ea76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ea7a:	f101 0120 	add.w	r1, r1, #32
    ea7e:	fa82 f24c 	uadd8	r2, r2, ip
    ea82:	f100 0008 	add.w	r0, r0, #8
    ea86:	faa4 f28c 	sel	r2, r4, ip
    ea8a:	fa83 f34c 	uadd8	r3, r3, ip
    ea8e:	faa2 f38c 	sel	r3, r2, ip
    ea92:	2b00      	cmp	r3, #0
    ea94:	d0c6      	beq.n	ea24 <strlen+0x24>
    ea96:	2a00      	cmp	r2, #0
    ea98:	bf04      	itt	eq
    ea9a:	3004      	addeq	r0, #4
    ea9c:	461a      	moveq	r2, r3
    ea9e:	ba12      	rev	r2, r2
    eaa0:	fab2 f282 	clz	r2, r2
    eaa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    eaa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    eaac:	4770      	bx	lr
    eaae:	e9d1 2300 	ldrd	r2, r3, [r1]
    eab2:	f004 0503 	and.w	r5, r4, #3
    eab6:	f1c4 0000 	rsb	r0, r4, #0
    eaba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    eabe:	f014 0f04 	tst.w	r4, #4
    eac2:	f891 f040 	pld	[r1, #64]	; 0x40
    eac6:	fa0c f505 	lsl.w	r5, ip, r5
    eaca:	ea62 0205 	orn	r2, r2, r5
    eace:	bf1c      	itt	ne
    ead0:	ea63 0305 	ornne	r3, r3, r5
    ead4:	4662      	movne	r2, ip
    ead6:	f04f 0400 	mov.w	r4, #0
    eada:	e7a9      	b.n	ea30 <strlen+0x30>

0000eadc <__register_exitproc>:
    eadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eae0:	4d2c      	ldr	r5, [pc, #176]	; (eb94 <__register_exitproc+0xb8>)
    eae2:	4606      	mov	r6, r0
    eae4:	6828      	ldr	r0, [r5, #0]
    eae6:	4698      	mov	r8, r3
    eae8:	460f      	mov	r7, r1
    eaea:	4691      	mov	r9, r2
    eaec:	f000 f882 	bl	ebf4 <__retarget_lock_acquire_recursive>
    eaf0:	4b29      	ldr	r3, [pc, #164]	; (eb98 <__register_exitproc+0xbc>)
    eaf2:	681c      	ldr	r4, [r3, #0]
    eaf4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d03e      	beq.n	eb7a <__register_exitproc+0x9e>
    eafc:	685a      	ldr	r2, [r3, #4]
    eafe:	2a1f      	cmp	r2, #31
    eb00:	dc1c      	bgt.n	eb3c <__register_exitproc+0x60>
    eb02:	f102 0e01 	add.w	lr, r2, #1
    eb06:	b176      	cbz	r6, eb26 <__register_exitproc+0x4a>
    eb08:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eb0c:	2401      	movs	r4, #1
    eb0e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eb12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    eb16:	4094      	lsls	r4, r2
    eb18:	4320      	orrs	r0, r4
    eb1a:	2e02      	cmp	r6, #2
    eb1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eb20:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eb24:	d023      	beq.n	eb6e <__register_exitproc+0x92>
    eb26:	3202      	adds	r2, #2
    eb28:	f8c3 e004 	str.w	lr, [r3, #4]
    eb2c:	6828      	ldr	r0, [r5, #0]
    eb2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    eb32:	f000 f861 	bl	ebf8 <__retarget_lock_release_recursive>
    eb36:	2000      	movs	r0, #0
    eb38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eb3c:	4b17      	ldr	r3, [pc, #92]	; (eb9c <__register_exitproc+0xc0>)
    eb3e:	b30b      	cbz	r3, eb84 <__register_exitproc+0xa8>
    eb40:	f44f 70c8 	mov.w	r0, #400	; 0x190
    eb44:	f7ff fa3e 	bl	dfc4 <malloc>
    eb48:	4603      	mov	r3, r0
    eb4a:	b1d8      	cbz	r0, eb84 <__register_exitproc+0xa8>
    eb4c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    eb50:	6002      	str	r2, [r0, #0]
    eb52:	2100      	movs	r1, #0
    eb54:	6041      	str	r1, [r0, #4]
    eb56:	460a      	mov	r2, r1
    eb58:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    eb5c:	f04f 0e01 	mov.w	lr, #1
    eb60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    eb64:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    eb68:	2e00      	cmp	r6, #0
    eb6a:	d0dc      	beq.n	eb26 <__register_exitproc+0x4a>
    eb6c:	e7cc      	b.n	eb08 <__register_exitproc+0x2c>
    eb6e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    eb72:	430c      	orrs	r4, r1
    eb74:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    eb78:	e7d5      	b.n	eb26 <__register_exitproc+0x4a>
    eb7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    eb7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    eb82:	e7bb      	b.n	eafc <__register_exitproc+0x20>
    eb84:	6828      	ldr	r0, [r5, #0]
    eb86:	f000 f837 	bl	ebf8 <__retarget_lock_release_recursive>
    eb8a:	f04f 30ff 	mov.w	r0, #4294967295
    eb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eb92:	bf00      	nop
    eb94:	20000638 	.word	0x20000638
    eb98:	0000f0c0 	.word	0x0000f0c0
    eb9c:	0000dfc5 	.word	0x0000dfc5

0000eba0 <register_fini>:
    eba0:	4b02      	ldr	r3, [pc, #8]	; (ebac <register_fini+0xc>)
    eba2:	b113      	cbz	r3, ebaa <register_fini+0xa>
    eba4:	4802      	ldr	r0, [pc, #8]	; (ebb0 <register_fini+0x10>)
    eba6:	f000 b805 	b.w	ebb4 <atexit>
    ebaa:	4770      	bx	lr
    ebac:	00000000 	.word	0x00000000
    ebb0:	0000ebc1 	.word	0x0000ebc1

0000ebb4 <atexit>:
    ebb4:	2300      	movs	r3, #0
    ebb6:	4601      	mov	r1, r0
    ebb8:	461a      	mov	r2, r3
    ebba:	4618      	mov	r0, r3
    ebbc:	f7ff bf8e 	b.w	eadc <__register_exitproc>

0000ebc0 <__libc_fini_array>:
    ebc0:	b538      	push	{r3, r4, r5, lr}
    ebc2:	4c0a      	ldr	r4, [pc, #40]	; (ebec <__libc_fini_array+0x2c>)
    ebc4:	4d0a      	ldr	r5, [pc, #40]	; (ebf0 <__libc_fini_array+0x30>)
    ebc6:	1b64      	subs	r4, r4, r5
    ebc8:	10a4      	asrs	r4, r4, #2
    ebca:	d00a      	beq.n	ebe2 <__libc_fini_array+0x22>
    ebcc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ebd0:	3b01      	subs	r3, #1
    ebd2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ebd6:	3c01      	subs	r4, #1
    ebd8:	f855 3904 	ldr.w	r3, [r5], #-4
    ebdc:	4798      	blx	r3
    ebde:	2c00      	cmp	r4, #0
    ebe0:	d1f9      	bne.n	ebd6 <__libc_fini_array+0x16>
    ebe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ebe6:	f000 ba83 	b.w	f0f0 <_fini>
    ebea:	bf00      	nop
    ebec:	0000f100 	.word	0x0000f100
    ebf0:	0000f0fc 	.word	0x0000f0fc

0000ebf4 <__retarget_lock_acquire_recursive>:
    ebf4:	4770      	bx	lr
    ebf6:	bf00      	nop

0000ebf8 <__retarget_lock_release_recursive>:
    ebf8:	4770      	bx	lr
    ebfa:	bf00      	nop
    ebfc:	62616e45 	.word	0x62616e45
    ec00:	676e696c 	.word	0x676e696c
    ec04:	61654820 	.word	0x61654820
    ec08:	3a726574 	.word	0x3a726574
    ec0c:	00000020 	.word	0x00000020
    ec10:	00092e20 	.word	0x00092e20
    ec14:	74616548 	.word	0x74616548
    ec18:	00207265 	.word	0x00207265
    ec1c:	61745320 	.word	0x61745320
    ec20:	20737574 	.word	0x20737574
    ec24:	0000003a 	.word	0x0000003a
    ec28:	00000a0d 	.word	0x00000a0d
    ec2c:	682f2e2e 	.word	0x682f2e2e
    ec30:	702f6c70 	.word	0x702f6c70
    ec34:	2f74726f 	.word	0x2f74726f
    ec38:	5f6c7068 	.word	0x5f6c7068
    ec3c:	6f697067 	.word	0x6f697067
    ec40:	7361625f 	.word	0x7361625f
    ec44:	00682e65 	.word	0x00682e65
    ec48:	682f2e2e 	.word	0x682f2e2e
    ec4c:	692f6c61 	.word	0x692f6c61
    ec50:	756c636e 	.word	0x756c636e
    ec54:	682f6564 	.word	0x682f6564
    ec58:	775f6c61 	.word	0x775f6c61
    ec5c:	682e7464 	.word	0x682e7464
    ec60:	00000000 	.word	0x00000000
    ec64:	682f2e2e 	.word	0x682f2e2e
    ec68:	732f6c61 	.word	0x732f6c61
    ec6c:	682f6372 	.word	0x682f6372
    ec70:	635f6c61 	.word	0x635f6c61
    ec74:	6e656c61 	.word	0x6e656c61
    ec78:	2e726164 	.word	0x2e726164
    ec7c:	00000063 	.word	0x00000063
    ec80:	682f2e2e 	.word	0x682f2e2e
    ec84:	732f6c61 	.word	0x732f6c61
    ec88:	682f6372 	.word	0x682f6372
    ec8c:	635f6c61 	.word	0x635f6c61
    ec90:	615f6e61 	.word	0x615f6e61
    ec94:	636e7973 	.word	0x636e7973
    ec98:	0000632e 	.word	0x0000632e
    ec9c:	682f2e2e 	.word	0x682f2e2e
    eca0:	732f6c61 	.word	0x732f6c61
    eca4:	682f6372 	.word	0x682f6372
    eca8:	635f6c61 	.word	0x635f6c61
    ecac:	735f6372 	.word	0x735f6372
    ecb0:	2e636e79 	.word	0x2e636e79
    ecb4:	00000063 	.word	0x00000063
    ecb8:	682f2e2e 	.word	0x682f2e2e
    ecbc:	732f6c61 	.word	0x732f6c61
    ecc0:	682f6372 	.word	0x682f6372
    ecc4:	695f6c61 	.word	0x695f6c61
    ecc8:	6d5f6332 	.word	0x6d5f6332
    eccc:	6e79735f 	.word	0x6e79735f
    ecd0:	00632e63 	.word	0x00632e63
    ecd4:	682f2e2e 	.word	0x682f2e2e
    ecd8:	732f6c61 	.word	0x732f6c61
    ecdc:	682f6372 	.word	0x682f6372
    ece0:	705f6c61 	.word	0x705f6c61
    ece4:	632e6d77 	.word	0x632e6d77
    ece8:	00000000 	.word	0x00000000
    ecec:	682f2e2e 	.word	0x682f2e2e
    ecf0:	732f6c61 	.word	0x732f6c61
    ecf4:	682f6372 	.word	0x682f6372
    ecf8:	715f6c61 	.word	0x715f6c61
    ecfc:	5f697073 	.word	0x5f697073
    ed00:	636e7973 	.word	0x636e7973
    ed04:	0000632e 	.word	0x0000632e
    ed08:	682f2e2e 	.word	0x682f2e2e
    ed0c:	732f6c61 	.word	0x732f6c61
    ed10:	682f6372 	.word	0x682f6372
    ed14:	735f6c61 	.word	0x735f6c61
    ed18:	6d5f6970 	.word	0x6d5f6970
    ed1c:	6e79735f 	.word	0x6e79735f
    ed20:	00632e63 	.word	0x00632e63
    ed24:	682f2e2e 	.word	0x682f2e2e
    ed28:	732f6c61 	.word	0x732f6c61
    ed2c:	682f6372 	.word	0x682f6372
    ed30:	745f6c61 	.word	0x745f6c61
    ed34:	72656d69 	.word	0x72656d69
    ed38:	0000632e 	.word	0x0000632e
    ed3c:	682f2e2e 	.word	0x682f2e2e
    ed40:	752f6c61 	.word	0x752f6c61
    ed44:	736c6974 	.word	0x736c6974
    ed48:	6372732f 	.word	0x6372732f
    ed4c:	6974752f 	.word	0x6974752f
    ed50:	6c5f736c 	.word	0x6c5f736c
    ed54:	2e747369 	.word	0x2e747369
    ed58:	00000063 	.word	0x00000063

0000ed5c <_map>:
    ed5c:	00000000 00000040 00000001 00000021     ....@.......!...
    ed6c:	00000003 00000003 00000004 00000004     ................
    ed7c:	00000005 00000005 00000006 00000056     ............V...
    ed8c:	00000007 00000057 00000008 00000028     ....W.......(...
    ed9c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    edac:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000edbc <user_mux_confs>:
    edbc:	00020100 00000000 00000000 00000000     ................
	...

0000ee00 <channel_confs>:
    ee00:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000ee40 <interrupt_cfg>:
	...
    eec0:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    eed0:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    eee0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    eef0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    ef00:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    ef10:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    ef20:	43000400 43000800 43000c00              ...C...C...C

0000ef2c <sercomspi_regs>:
    ef2c:	0020000c 00020000 00000000 01ff0001     .. .............
    ef3c:	30000c04 02000000 00000000 ff001700     ...0............
    ef4c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    ef5c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    ef6c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    ef7c:	43001400 43001800                       ...C...C

0000ef84 <_usb_ep_cfgs>:
    ef84:	20000994 00000000 00000040 200009d4     ... ....@...... 
    ef94:	20000a14 00400040 20000a54 20000a94     ... @.@.T.. ... 
    efa4:	00400040 20000ad4 20000b14 00400040     @.@.... ... @.@.
    efb4:	20000b54 20000b94 00400040 00000804     T.. ... @.@.....
    efc4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    efd4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    efe4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    eff4:	7361625f 00682e65                       _base.h.

0000effc <n25q256a_interface>:
    effc:	0000b2d9 0000b37d 0000b48d 0000b645     ....}.......E...
    f00c:	0000b6d5 752f2e2e 642f6273 63697665     ....../usb/devic
    f01c:	73752f65 2e636462 00000063              e/usbdc.c...

0000f028 <_ZTV9CDC_Class>:
	...
    f030:	0000d6f9 0000d7d9 0000d37d 0000d6c1     ........}.......
    f040:	0000d871 0000d685 0000d599 0000d5e9     q...............
    f050:	0000d6e1 0000d741                       ....A...

0000f058 <_ZTV6Stream>:
	...
    f060:	0000dfd9 0000da19 0000d37d 0000d391     ........}.......
    f070:	0000dfd9 0000dfd9 0000dfd9 2e257830     ............0x%.
    f080:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f090:	0066766f                                ovf.

0000f094 <_ZTV5Print>:
	...
    f09c:	0000dfd9 0000da19 0000d37d 0000d391     ........}.......
    f0ac:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f0bc:	00632e6f                                o.c.

0000f0c0 <_global_impure_ptr>:
    f0c0:	20000210                                ... 

0000f0c4 <_init>:
    f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0c6:	bf00      	nop
    f0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f0ca:	bc08      	pop	{r3}
    f0cc:	469e      	mov	lr, r3
    f0ce:	4770      	bx	lr

0000f0d0 <__init_array_start>:
    f0d0:	0000eba1 	.word	0x0000eba1

0000f0d4 <__frame_dummy_init_array_entry>:
    f0d4:	00000289 000003f1 00000571 0000d345     ........q...E...
    f0e4:	0000d9c9 0000dfb1 0000e341              ........A...

0000f0f0 <_fini>:
    f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0f2:	bf00      	nop
    f0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f0f6:	bc08      	pop	{r3}
    f0f8:	469e      	mov	lr, r3
    f0fa:	4770      	bx	lr

0000f0fc <__fini_array_start>:
    f0fc:	00000265 	.word	0x00000265
