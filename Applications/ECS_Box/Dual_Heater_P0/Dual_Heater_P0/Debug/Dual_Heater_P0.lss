
Dual_Heater_P0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f240  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f240  0000f240  0001f240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000f248  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          00001270  2000063c  0000f884  0002063c  2**2
                  ALLOC
  6 .stack        00010004  200018ac  00010af4  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00065acf  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008c57  00000000  00000000  00086192  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a2c5  00000000  00000000  0008ede9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e88  00000000  00000000  000a90ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002bd8  00000000  00000000  000abf36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004bf77  00000000  00000000  000aeb0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000348c8  00000000  00000000  000faa85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c3df  00000000  00000000  0012f34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c3fc  00000000  00000000  0026b72c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 18 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	15 59 00 00 19 47 00 00 29 47 00 00 d1 02 00 00     .Y...G..)G......
      7c:	39 47 00 00 49 47 00 00 59 47 00 00 69 47 00 00     9G..IG..YG..iG..
      8c:	79 47 00 00 89 47 00 00 99 47 00 00 d1 02 00 00     yG...G...G......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 61 3b 00 00 51 a8 00 00     ........a;..Q...
     184:	61 a8 00 00 71 a8 00 00 81 a8 00 00 d1 02 00 00     a...q...........
     194:	91 72 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .r..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 ad 72 00 00     .............r..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	c9 72 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .r..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 4d 7f 00 00 d1 02 00 00     ........M.......
     1f4:	69 7f 00 00 d1 02 00 00 85 7f 00 00 a1 7f 00 00     i...............
     204:	bd 7f 00 00 d9 7f 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000f248 	.word	0x0000f248

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f248 	.word	0x0000f248
     2c4:	20000640 	.word	0x20000640
     2c8:	0000f248 	.word	0x0000f248
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000f248 	.word	0x0000f248
     33c:	2000063c 	.word	0x2000063c
     340:	200018ac 	.word	0x200018ac
     344:	2000063c 	.word	0x2000063c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000e8e9 	.word	0x0000e8e9
     354:	000004ad 	.word	0x000004ad

00000358 <_ZN15HEATERS_HANDLERD1Ev>:
HEATERS_HANDLER::HEATERS_HANDLER()
{
} //HEATERS_HANDLER

// default destructor
HEATERS_HANDLER::~HEATERS_HANDLER()
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
     35c:	4b01      	ldr	r3, [pc, #4]	; (364 <_ZN15HEATERS_HANDLERD1Ev+0xc>)
     35e:	4798      	blx	r3
{
} //~HEATERS_HANDLER
     360:	4620      	mov	r0, r4
     362:	bd10      	pop	{r4, pc}
     364:	0000e4c5 	.word	0x0000e4c5

00000368 <__tcf_1>:
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	4c05      	ldr	r4, [pc, #20]	; (380 <__tcf_1+0x18>)
     36c:	4e05      	ldr	r6, [pc, #20]	; (384 <__tcf_1+0x1c>)
     36e:	f1a4 0570 	sub.w	r5, r4, #112	; 0x70
     372:	3c1c      	subs	r4, #28
     374:	4620      	mov	r0, r4
     376:	47b0      	blx	r6
     378:	42ac      	cmp	r4, r5
     37a:	d1fa      	bne.n	372 <__tcf_1+0xa>
     37c:	bd70      	pop	{r4, r5, r6, pc}
     37e:	bf00      	nop
     380:	200006c8 	.word	0x200006c8
     384:	0000cf99 	.word	0x0000cf99

00000388 <__tcf_0>:
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
     388:	b510      	push	{r4, lr}
     38a:	4803      	ldr	r0, [pc, #12]	; (398 <__tcf_0+0x10>)
     38c:	4c03      	ldr	r4, [pc, #12]	; (39c <__tcf_0+0x14>)
     38e:	47a0      	blx	r4
     390:	4803      	ldr	r0, [pc, #12]	; (3a0 <__tcf_0+0x18>)
     392:	47a0      	blx	r4
     394:	bd10      	pop	{r4, pc}
     396:	bf00      	nop
     398:	200006ec 	.word	0x200006ec
     39c:	0000e4c5 	.word	0x0000e4c5
     3a0:	200006c8 	.word	0x200006c8

000003a4 <_ZN15HEATERS_HANDLER4InitEv>:

bool HEATERS_HANDLER::Init(void){
     3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3a6:	4604      	mov	r4, r0

	//InitHeaterExpanders();
	heater_expanders=local_heater_expanders;
     3a8:	4b16      	ldr	r3, [pc, #88]	; (404 <_ZN15HEATERS_HANDLER4InitEv+0x60>)
     3aa:	6303      	str	r3, [r0, #48]	; 0x30
	for (uint8_t i = 0; i < NUMBER_OF_HEATERS; i++)
	{
		module[i]=&local_heaters[i];
     3ac:	3370      	adds	r3, #112	; 0x70
     3ae:	6243      	str	r3, [r0, #36]	; 0x24
		while (!module[i]->Init(i,heater_expanders))
     3b0:	4d15      	ldr	r5, [pc, #84]	; (408 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
		{
			delay_ms(200);
     3b2:	4f16      	ldr	r7, [pc, #88]	; (40c <_ZN15HEATERS_HANDLER4InitEv+0x68>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     3b4:	4e16      	ldr	r6, [pc, #88]	; (410 <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
     3b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
     3b8:	2100      	movs	r1, #0
     3ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
     3bc:	47a8      	blx	r5
     3be:	b930      	cbnz	r0, 3ce <_ZN15HEATERS_HANDLER4InitEv+0x2a>
			delay_ms(200);
     3c0:	20c8      	movs	r0, #200	; 0xc8
     3c2:	47b8      	blx	r7
     3c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     3c8:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
     3cc:	e7f3      	b.n	3b6 <_ZN15HEATERS_HANDLER4InitEv+0x12>
		module[i]=&local_heaters[i];
     3ce:	4b11      	ldr	r3, [pc, #68]	; (414 <_ZN15HEATERS_HANDLER4InitEv+0x70>)
     3d0:	62a3      	str	r3, [r4, #40]	; 0x28
		while (!module[i]->Init(i,heater_expanders))
     3d2:	4d0d      	ldr	r5, [pc, #52]	; (408 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
			delay_ms(200);
     3d4:	4f0d      	ldr	r7, [pc, #52]	; (40c <_ZN15HEATERS_HANDLER4InitEv+0x68>)
     3d6:	4e0e      	ldr	r6, [pc, #56]	; (410 <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
     3d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
     3da:	2101      	movs	r1, #1
     3dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     3de:	47a8      	blx	r5
     3e0:	b930      	cbnz	r0, 3f0 <_ZN15HEATERS_HANDLER4InitEv+0x4c>
			delay_ms(200);
     3e2:	20c8      	movs	r0, #200	; 0xc8
     3e4:	47b8      	blx	r7
     3e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     3ea:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
     3ee:	e7f3      	b.n	3d8 <_ZN15HEATERS_HANDLER4InitEv+0x34>
			
		}
	}

	
	isOK=(module[0]->isOK)&(module[1]->isOK);
     3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     3f2:	781a      	ldrb	r2, [r3, #0]
     3f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     3f6:	781b      	ldrb	r3, [r3, #0]
     3f8:	4013      	ands	r3, r2
     3fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return	isOK;
     3fe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	
}
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     404:	20000658 	.word	0x20000658
     408:	0000e4d9 	.word	0x0000e4d9
     40c:	00001e81 	.word	0x00001e81
     410:	41008000 	.word	0x41008000
     414:	200006ec 	.word	0x200006ec

00000418 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev>:
		{
			heater_expanders=&local_heater_expanders[2*i+j];
		}
	}
}
     418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	uint8_t InitExpanderArray(MCP23008_Class *heater_expanders);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     41a:	4c18      	ldr	r4, [pc, #96]	; (47c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x64>)
     41c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
     420:	4917      	ldr	r1, [pc, #92]	; (480 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x68>)
     422:	4628      	mov	r0, r5
     424:	4b17      	ldr	r3, [pc, #92]	; (484 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x6c>)
     426:	4798      	blx	r3
     428:	4e17      	ldr	r6, [pc, #92]	; (488 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x70>)
     42a:	4632      	mov	r2, r6
     42c:	4917      	ldr	r1, [pc, #92]	; (48c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x74>)
     42e:	4628      	mov	r0, r5
     430:	4d17      	ldr	r5, [pc, #92]	; (490 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x78>)
     432:	47a8      	blx	r5
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
     434:	f104 0070 	add.w	r0, r4, #112	; 0x70
     438:	4f16      	ldr	r7, [pc, #88]	; (494 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x7c>)
     43a:	47b8      	blx	r7
     43c:	f104 0094 	add.w	r0, r4, #148	; 0x94
     440:	47b8      	blx	r7
     442:	4632      	mov	r2, r6
     444:	4914      	ldr	r1, [pc, #80]	; (498 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x80>)
     446:	2000      	movs	r0, #0
     448:	47a8      	blx	r5
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
     44a:	4620      	mov	r0, r4
     44c:	4f13      	ldr	r7, [pc, #76]	; (49c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x84>)
     44e:	47b8      	blx	r7
     450:	f104 001c 	add.w	r0, r4, #28
     454:	47b8      	blx	r7
     456:	f104 0038 	add.w	r0, r4, #56	; 0x38
     45a:	47b8      	blx	r7
     45c:	f104 0054 	add.w	r0, r4, #84	; 0x54
     460:	47b8      	blx	r7
     462:	4632      	mov	r2, r6
     464:	490e      	ldr	r1, [pc, #56]	; (4a0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x88>)
     466:	2000      	movs	r0, #0
     468:	47a8      	blx	r5
HEATERS_HANDLER::HEATERS_HANDLER()
     46a:	34d0      	adds	r4, #208	; 0xd0
     46c:	4620      	mov	r0, r4
     46e:	4b0d      	ldr	r3, [pc, #52]	; (4a4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x8c>)
     470:	4798      	blx	r3
     472:	4632      	mov	r2, r6
     474:	490c      	ldr	r1, [pc, #48]	; (4a8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x90>)
     476:	4620      	mov	r0, r4
     478:	47a8      	blx	r5
     47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     47c:	20000658 	.word	0x20000658
     480:	20001724 	.word	0x20001724
     484:	0000ce29 	.word	0x0000ce29
     488:	20000000 	.word	0x20000000
     48c:	0000ce45 	.word	0x0000ce45
     490:	0000e8b5 	.word	0x0000e8b5
     494:	0000e495 	.word	0x0000e495
     498:	00000389 	.word	0x00000389
     49c:	0000cf85 	.word	0x0000cf85
     4a0:	00000369 	.word	0x00000369
     4a4:	0000e495 	.word	0x0000e495
     4a8:	00000359 	.word	0x00000359

000004ac <main>:
#include "main.h"
#define DELAY_HEATER_COMMUNICATION 100


int main(void)
{
     4ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
     4b0:	4b30      	ldr	r3, [pc, #192]	; (574 <main+0xc8>)
     4b2:	4798      	blx	r3
	uint8_t status,enableMask,lastEnableMask;
	bool powerOn;

	usb.Init();
     4b4:	4830      	ldr	r0, [pc, #192]	; (578 <main+0xcc>)
     4b6:	4b31      	ldr	r3, [pc, #196]	; (57c <main+0xd0>)
     4b8:	4798      	blx	r3
	delay_ms(100);
     4ba:	2064      	movs	r0, #100	; 0x64
     4bc:	4b30      	ldr	r3, [pc, #192]	; (580 <main+0xd4>)
     4be:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     4c4:	4b2f      	ldr	r3, [pc, #188]	; (584 <main+0xd8>)
     4c6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	gpio_set_pin_level(LED0,true);
	while (!heaters.Init())
     4ca:	4e2f      	ldr	r6, [pc, #188]	; (588 <main+0xdc>)
     4cc:	4d2f      	ldr	r5, [pc, #188]	; (58c <main+0xe0>)
	{
		delay_ms(200);
     4ce:	4c2c      	ldr	r4, [pc, #176]	; (580 <main+0xd4>)
	while (!heaters.Init())
     4d0:	4630      	mov	r0, r6
     4d2:	47a8      	blx	r5
     4d4:	b938      	cbnz	r0, 4e6 <main+0x3a>
		delay_ms(200);
     4d6:	20c8      	movs	r0, #200	; 0xc8
     4d8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     4da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     4de:	4b29      	ldr	r3, [pc, #164]	; (584 <main+0xd8>)
     4e0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     4e4:	e7f4      	b.n	4d0 <main+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     4ea:	4b26      	ldr	r3, [pc, #152]	; (584 <main+0xd8>)
     4ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		for (uint8_t j = 0; j <2 ; j++)
		{
			for (uint8_t i = 0; i <4 ; i++)
			{
				
				delay_ms(1);
     4f0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 580 <main+0xd4>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     4f4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 578 <main+0xcc>
     4f8:	4c25      	ldr	r4, [pc, #148]	; (590 <main+0xe4>)
     4fa:	f104 0a08 	add.w	sl, r4, #8
{
     4fe:	2600      	movs	r6, #0
     500:	b2f7      	uxtb	r7, r6
				delay_ms(1);
     502:	2001      	movs	r0, #1
     504:	47c8      	blx	r9
     506:	4923      	ldr	r1, [pc, #140]	; (594 <main+0xe8>)
     508:	4640      	mov	r0, r8
     50a:	4d23      	ldr	r5, [pc, #140]	; (598 <main+0xec>)
     50c:	47a8      	blx	r5
     50e:	220a      	movs	r2, #10
     510:	4639      	mov	r1, r7
     512:	4640      	mov	r0, r8
     514:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 5bc <main+0x110>
     518:	47d8      	blx	fp
     51a:	4920      	ldr	r1, [pc, #128]	; (59c <main+0xf0>)
     51c:	4640      	mov	r0, r8
     51e:	47a8      	blx	r5
				usb<<"Enabling Heater: "<<i<<" .\t";
				heaters.module[j]->EnableIndex(i);
     520:	4639      	mov	r1, r7
     522:	6820      	ldr	r0, [r4, #0]
     524:	4b1e      	ldr	r3, [pc, #120]	; (5a0 <main+0xf4>)
     526:	4798      	blx	r3
				delay_ms(DELAY_HEATER_COMMUNICATION);
     528:	2064      	movs	r0, #100	; 0x64
     52a:	47c8      	blx	r9
				status= heaters.module[j]->ReadStatus();
     52c:	6820      	ldr	r0, [r4, #0]
     52e:	4b1d      	ldr	r3, [pc, #116]	; (5a4 <main+0xf8>)
     530:	4798      	blx	r3
     532:	491d      	ldr	r1, [pc, #116]	; (5a8 <main+0xfc>)
     534:	4640      	mov	r0, r8
     536:	47a8      	blx	r5
     538:	220a      	movs	r2, #10
     53a:	4639      	mov	r1, r7
     53c:	4640      	mov	r0, r8
     53e:	47d8      	blx	fp
     540:	491a      	ldr	r1, [pc, #104]	; (5ac <main+0x100>)
     542:	4640      	mov	r0, r8
     544:	47a8      	blx	r5
     546:	6823      	ldr	r3, [r4, #0]
     548:	4433      	add	r3, r6
     54a:	220a      	movs	r2, #10
     54c:	78d9      	ldrb	r1, [r3, #3]
     54e:	4640      	mov	r0, r8
     550:	4b17      	ldr	r3, [pc, #92]	; (5b0 <main+0x104>)
     552:	4798      	blx	r3
     554:	4917      	ldr	r1, [pc, #92]	; (5b4 <main+0x108>)
     556:	4640      	mov	r0, r8
     558:	47a8      	blx	r5
				usb<<"Heater "<<i<< " Status :"<<heaters.module[j]->heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
				delay_ms(DELAY_HEATER_COMMUNICATION);
     55a:	2064      	movs	r0, #100	; 0x64
     55c:	47c8      	blx	r9
				heaters.module[j]->DisableIndex(i);
     55e:	4639      	mov	r1, r7
     560:	6820      	ldr	r0, [r4, #0]
     562:	4b15      	ldr	r3, [pc, #84]	; (5b8 <main+0x10c>)
     564:	4798      	blx	r3
     566:	3601      	adds	r6, #1
			for (uint8_t i = 0; i <4 ; i++)
     568:	2e04      	cmp	r6, #4
     56a:	d1c9      	bne.n	500 <main+0x54>
     56c:	3404      	adds	r4, #4
		for (uint8_t j = 0; j <2 ; j++)
     56e:	45a2      	cmp	sl, r4
     570:	d0c2      	beq.n	4f8 <main+0x4c>
     572:	e7c4      	b.n	4fe <main+0x52>
     574:	000006b5 	.word	0x000006b5
     578:	20001418 	.word	0x20001418
     57c:	0000d9e9 	.word	0x0000d9e9
     580:	00001e81 	.word	0x00001e81
     584:	41008000 	.word	0x41008000
     588:	20000728 	.word	0x20000728
     58c:	000003a5 	.word	0x000003a5
     590:	2000074c 	.word	0x2000074c
     594:	0000ed3c 	.word	0x0000ed3c
     598:	0000df25 	.word	0x0000df25
     59c:	0000ed50 	.word	0x0000ed50
     5a0:	0000e665 	.word	0x0000e665
     5a4:	0000e5f9 	.word	0x0000e5f9
     5a8:	0000ed54 	.word	0x0000ed54
     5ac:	0000ed5c 	.word	0x0000ed5c
     5b0:	0000df91 	.word	0x0000df91
     5b4:	0000ed68 	.word	0x0000ed68
     5b8:	0000e699 	.word	0x0000e699
     5bc:	0000df69 	.word	0x0000df69

000005c0 <_GLOBAL__sub_I_main>:
		/*	}*/
		
		

	}
}
     5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     5c4:	4c2b      	ldr	r4, [pc, #172]	; (674 <_GLOBAL__sub_I_main+0xb4>)
     5c6:	492c      	ldr	r1, [pc, #176]	; (678 <_GLOBAL__sub_I_main+0xb8>)
     5c8:	4620      	mov	r0, r4
     5ca:	4f2c      	ldr	r7, [pc, #176]	; (67c <_GLOBAL__sub_I_main+0xbc>)
     5cc:	47b8      	blx	r7
     5ce:	4e2c      	ldr	r6, [pc, #176]	; (680 <_GLOBAL__sub_I_main+0xc0>)
     5d0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 6b0 <_GLOBAL__sub_I_main+0xf0>
     5d4:	4632      	mov	r2, r6
     5d6:	4641      	mov	r1, r8
     5d8:	4620      	mov	r0, r4
     5da:	4d2a      	ldr	r5, [pc, #168]	; (684 <_GLOBAL__sub_I_main+0xc4>)
     5dc:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     5de:	f104 0920 	add.w	r9, r4, #32
     5e2:	4929      	ldr	r1, [pc, #164]	; (688 <_GLOBAL__sub_I_main+0xc8>)
     5e4:	4648      	mov	r0, r9
     5e6:	47b8      	blx	r7
     5e8:	4632      	mov	r2, r6
     5ea:	4641      	mov	r1, r8
     5ec:	4648      	mov	r0, r9
     5ee:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     5f0:	f104 0940 	add.w	r9, r4, #64	; 0x40
     5f4:	4925      	ldr	r1, [pc, #148]	; (68c <_GLOBAL__sub_I_main+0xcc>)
     5f6:	4648      	mov	r0, r9
     5f8:	47b8      	blx	r7
     5fa:	4632      	mov	r2, r6
     5fc:	4641      	mov	r1, r8
     5fe:	4648      	mov	r0, r9
     600:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     602:	f104 0960 	add.w	r9, r4, #96	; 0x60
     606:	4922      	ldr	r1, [pc, #136]	; (690 <_GLOBAL__sub_I_main+0xd0>)
     608:	4648      	mov	r0, r9
     60a:	47b8      	blx	r7
     60c:	4632      	mov	r2, r6
     60e:	4641      	mov	r1, r8
     610:	4648      	mov	r0, r9
     612:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     614:	f104 0980 	add.w	r9, r4, #128	; 0x80
     618:	491e      	ldr	r1, [pc, #120]	; (694 <_GLOBAL__sub_I_main+0xd4>)
     61a:	4648      	mov	r0, r9
     61c:	47b8      	blx	r7
     61e:	4632      	mov	r2, r6
     620:	4641      	mov	r1, r8
     622:	4648      	mov	r0, r9
     624:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     626:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     62a:	491b      	ldr	r1, [pc, #108]	; (698 <_GLOBAL__sub_I_main+0xd8>)
     62c:	4648      	mov	r0, r9
     62e:	47b8      	blx	r7
     630:	4632      	mov	r2, r6
     632:	4641      	mov	r1, r8
     634:	4648      	mov	r0, r9
     636:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     638:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     63c:	4917      	ldr	r1, [pc, #92]	; (69c <_GLOBAL__sub_I_main+0xdc>)
     63e:	4648      	mov	r0, r9
     640:	47b8      	blx	r7
     642:	4632      	mov	r2, r6
     644:	4641      	mov	r1, r8
     646:	4648      	mov	r0, r9
     648:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     64a:	f104 09e0 	add.w	r9, r4, #224	; 0xe0
     64e:	4914      	ldr	r1, [pc, #80]	; (6a0 <_GLOBAL__sub_I_main+0xe0>)
     650:	4648      	mov	r0, r9
     652:	47b8      	blx	r7
     654:	4632      	mov	r2, r6
     656:	4641      	mov	r1, r8
     658:	4648      	mov	r0, r9
     65a:	47a8      	blx	r5
     65c:	f504 7480 	add.w	r4, r4, #256	; 0x100
     660:	4910      	ldr	r1, [pc, #64]	; (6a4 <_GLOBAL__sub_I_main+0xe4>)
     662:	4620      	mov	r0, r4
     664:	4b10      	ldr	r3, [pc, #64]	; (6a8 <_GLOBAL__sub_I_main+0xe8>)
     666:	4798      	blx	r3
     668:	4632      	mov	r2, r6
     66a:	4910      	ldr	r1, [pc, #64]	; (6ac <_GLOBAL__sub_I_main+0xec>)
     66c:	4620      	mov	r0, r4
     66e:	47a8      	blx	r5
     670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     674:	2000075c 	.word	0x2000075c
     678:	200015f4 	.word	0x200015f4
     67c:	0000d329 	.word	0x0000d329
     680:	20000000 	.word	0x20000000
     684:	0000e8b5 	.word	0x0000e8b5
     688:	20001688 	.word	0x20001688
     68c:	200017ac 	.word	0x200017ac
     690:	200016a8 	.word	0x200016a8
     694:	2000176c 	.word	0x2000176c
     698:	2000178c 	.word	0x2000178c
     69c:	20001664 	.word	0x20001664
     6a0:	20001704 	.word	0x20001704
     6a4:	20001724 	.word	0x20001724
     6a8:	0000ce29 	.word	0x0000ce29
     6ac:	0000ce45 	.word	0x0000ce45
     6b0:	0000d361 	.word	0x0000d361

000006b4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     6b4:	b580      	push	{r7, lr}
     6b6:	af00      	add	r7, sp, #0
	system_init();
     6b8:	4b03      	ldr	r3, [pc, #12]	; (6c8 <atmel_start_init+0x14>)
     6ba:	4798      	blx	r3
	usb_init();
     6bc:	4b03      	ldr	r3, [pc, #12]	; (6cc <atmel_start_init+0x18>)
     6be:	4798      	blx	r3
	spi_nor_flash_init();
     6c0:	4b03      	ldr	r3, [pc, #12]	; (6d0 <atmel_start_init+0x1c>)
     6c2:	4798      	blx	r3
}
     6c4:	bf00      	nop
     6c6:	bd80      	pop	{r7, pc}
     6c8:	00001ab5 	.word	0x00001ab5
     6cc:	0000af55 	.word	0x0000af55
     6d0:	0000aee9 	.word	0x0000aee9

000006d4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     6d4:	b480      	push	{r7}
     6d6:	b085      	sub	sp, #20
     6d8:	af00      	add	r7, sp, #0
     6da:	60f8      	str	r0, [r7, #12]
     6dc:	460b      	mov	r3, r1
     6de:	607a      	str	r2, [r7, #4]
     6e0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     6e2:	7afa      	ldrb	r2, [r7, #11]
     6e4:	68fb      	ldr	r3, [r7, #12]
     6e6:	3220      	adds	r2, #32
     6e8:	6879      	ldr	r1, [r7, #4]
     6ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     6ee:	bf00      	nop
     6f0:	3714      	adds	r7, #20
     6f2:	46bd      	mov	sp, r7
     6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6f8:	4770      	bx	lr

000006fa <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     6fa:	b480      	push	{r7}
     6fc:	b083      	sub	sp, #12
     6fe:	af00      	add	r7, sp, #0
     700:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     702:	687b      	ldr	r3, [r7, #4]
     704:	691b      	ldr	r3, [r3, #16]
     706:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     70e:	bf00      	nop
     710:	370c      	adds	r7, #12
     712:	46bd      	mov	sp, r7
     714:	f85d 7b04 	ldr.w	r7, [sp], #4
     718:	4770      	bx	lr

0000071a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     71a:	b480      	push	{r7}
     71c:	b083      	sub	sp, #12
     71e:	af00      	add	r7, sp, #0
     720:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     722:	687b      	ldr	r3, [r7, #4]
     724:	691b      	ldr	r3, [r3, #16]
     726:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     72e:	bf00      	nop
     730:	370c      	adds	r7, #12
     732:	46bd      	mov	sp, r7
     734:	f85d 7b04 	ldr.w	r7, [sp], #4
     738:	4770      	bx	lr

0000073a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     73a:	b480      	push	{r7}
     73c:	b083      	sub	sp, #12
     73e:	af00      	add	r7, sp, #0
     740:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     742:	687b      	ldr	r3, [r7, #4]
     744:	691b      	ldr	r3, [r3, #16]
     746:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     74e:	bf00      	nop
     750:	370c      	adds	r7, #12
     752:	46bd      	mov	sp, r7
     754:	f85d 7b04 	ldr.w	r7, [sp], #4
     758:	4770      	bx	lr

0000075a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     75a:	b480      	push	{r7}
     75c:	b083      	sub	sp, #12
     75e:	af00      	add	r7, sp, #0
     760:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     762:	687b      	ldr	r3, [r7, #4]
     764:	691b      	ldr	r3, [r3, #16]
     766:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     76a:	687b      	ldr	r3, [r7, #4]
     76c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     76e:	bf00      	nop
     770:	370c      	adds	r7, #12
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr

0000077a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     77a:	b480      	push	{r7}
     77c:	b083      	sub	sp, #12
     77e:	af00      	add	r7, sp, #0
     780:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     782:	687b      	ldr	r3, [r7, #4]
     784:	695b      	ldr	r3, [r3, #20]
     786:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     78e:	bf00      	nop
     790:	370c      	adds	r7, #12
     792:	46bd      	mov	sp, r7
     794:	f85d 7b04 	ldr.w	r7, [sp], #4
     798:	4770      	bx	lr

0000079a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     79a:	b480      	push	{r7}
     79c:	b083      	sub	sp, #12
     79e:	af00      	add	r7, sp, #0
     7a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     7a2:	687b      	ldr	r3, [r7, #4]
     7a4:	695b      	ldr	r3, [r3, #20]
     7a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7ae:	bf00      	nop
     7b0:	370c      	adds	r7, #12
     7b2:	46bd      	mov	sp, r7
     7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b8:	4770      	bx	lr

000007ba <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     7ba:	b480      	push	{r7}
     7bc:	b083      	sub	sp, #12
     7be:	af00      	add	r7, sp, #0
     7c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	695b      	ldr	r3, [r3, #20]
     7c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7ce:	bf00      	nop
     7d0:	370c      	adds	r7, #12
     7d2:	46bd      	mov	sp, r7
     7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7d8:	4770      	bx	lr

000007da <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     7da:	b480      	push	{r7}
     7dc:	b083      	sub	sp, #12
     7de:	af00      	add	r7, sp, #0
     7e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	695b      	ldr	r3, [r3, #20]
     7e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7ee:	bf00      	nop
     7f0:	370c      	adds	r7, #12
     7f2:	46bd      	mov	sp, r7
     7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7f8:	4770      	bx	lr

000007fa <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     7fa:	b480      	push	{r7}
     7fc:	b083      	sub	sp, #12
     7fe:	af00      	add	r7, sp, #0
     800:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     802:	687b      	ldr	r3, [r7, #4]
     804:	695b      	ldr	r3, [r3, #20]
     806:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     80e:	bf00      	nop
     810:	370c      	adds	r7, #12
     812:	46bd      	mov	sp, r7
     814:	f85d 7b04 	ldr.w	r7, [sp], #4
     818:	4770      	bx	lr

0000081a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     81a:	b480      	push	{r7}
     81c:	b083      	sub	sp, #12
     81e:	af00      	add	r7, sp, #0
     820:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     822:	687b      	ldr	r3, [r7, #4]
     824:	699b      	ldr	r3, [r3, #24]
     826:	f043 0201 	orr.w	r2, r3, #1
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     82e:	bf00      	nop
     830:	370c      	adds	r7, #12
     832:	46bd      	mov	sp, r7
     834:	f85d 7b04 	ldr.w	r7, [sp], #4
     838:	4770      	bx	lr

0000083a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     83a:	b480      	push	{r7}
     83c:	b083      	sub	sp, #12
     83e:	af00      	add	r7, sp, #0
     840:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     842:	687b      	ldr	r3, [r7, #4]
     844:	699b      	ldr	r3, [r3, #24]
     846:	f043 0202 	orr.w	r2, r3, #2
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     84e:	bf00      	nop
     850:	370c      	adds	r7, #12
     852:	46bd      	mov	sp, r7
     854:	f85d 7b04 	ldr.w	r7, [sp], #4
     858:	4770      	bx	lr

0000085a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     85a:	b480      	push	{r7}
     85c:	b083      	sub	sp, #12
     85e:	af00      	add	r7, sp, #0
     860:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     862:	687b      	ldr	r3, [r7, #4]
     864:	699b      	ldr	r3, [r3, #24]
     866:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     86e:	bf00      	nop
     870:	370c      	adds	r7, #12
     872:	46bd      	mov	sp, r7
     874:	f85d 7b04 	ldr.w	r7, [sp], #4
     878:	4770      	bx	lr

0000087a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     87a:	b480      	push	{r7}
     87c:	b083      	sub	sp, #12
     87e:	af00      	add	r7, sp, #0
     880:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     882:	687b      	ldr	r3, [r7, #4]
     884:	699b      	ldr	r3, [r3, #24]
     886:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     88e:	bf00      	nop
     890:	370c      	adds	r7, #12
     892:	46bd      	mov	sp, r7
     894:	f85d 7b04 	ldr.w	r7, [sp], #4
     898:	4770      	bx	lr

0000089a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     89a:	b480      	push	{r7}
     89c:	b083      	sub	sp, #12
     89e:	af00      	add	r7, sp, #0
     8a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	699b      	ldr	r3, [r3, #24]
     8a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ae:	bf00      	nop
     8b0:	370c      	adds	r7, #12
     8b2:	46bd      	mov	sp, r7
     8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b8:	4770      	bx	lr

000008ba <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     8ba:	b480      	push	{r7}
     8bc:	b083      	sub	sp, #12
     8be:	af00      	add	r7, sp, #0
     8c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	699b      	ldr	r3, [r3, #24]
     8c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ce:	bf00      	nop
     8d0:	370c      	adds	r7, #12
     8d2:	46bd      	mov	sp, r7
     8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8d8:	4770      	bx	lr

000008da <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     8da:	b480      	push	{r7}
     8dc:	b083      	sub	sp, #12
     8de:	af00      	add	r7, sp, #0
     8e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	69db      	ldr	r3, [r3, #28]
     8e6:	f043 0208 	orr.w	r2, r3, #8
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ee:	bf00      	nop
     8f0:	370c      	adds	r7, #12
     8f2:	46bd      	mov	sp, r7
     8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8f8:	4770      	bx	lr

000008fa <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     8fa:	b480      	push	{r7}
     8fc:	b083      	sub	sp, #12
     8fe:	af00      	add	r7, sp, #0
     900:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     902:	687b      	ldr	r3, [r7, #4]
     904:	69db      	ldr	r3, [r3, #28]
     906:	f043 0220 	orr.w	r2, r3, #32
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr

0000091a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     91a:	b480      	push	{r7}
     91c:	b083      	sub	sp, #12
     91e:	af00      	add	r7, sp, #0
     920:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     922:	687b      	ldr	r3, [r7, #4]
     924:	69db      	ldr	r3, [r3, #28]
     926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     92a:	687b      	ldr	r3, [r7, #4]
     92c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     92e:	bf00      	nop
     930:	370c      	adds	r7, #12
     932:	46bd      	mov	sp, r7
     934:	f85d 7b04 	ldr.w	r7, [sp], #4
     938:	4770      	bx	lr

0000093a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     93a:	b480      	push	{r7}
     93c:	b083      	sub	sp, #12
     93e:	af00      	add	r7, sp, #0
     940:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     942:	687b      	ldr	r3, [r7, #4]
     944:	69db      	ldr	r3, [r3, #28]
     946:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     94a:	687b      	ldr	r3, [r7, #4]
     94c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     94e:	bf00      	nop
     950:	370c      	adds	r7, #12
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr

0000095a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     95a:	b480      	push	{r7}
     95c:	b083      	sub	sp, #12
     95e:	af00      	add	r7, sp, #0
     960:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     962:	687b      	ldr	r3, [r7, #4]
     964:	6a1b      	ldr	r3, [r3, #32]
     966:	f043 0201 	orr.w	r2, r3, #1
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     96e:	bf00      	nop
     970:	370c      	adds	r7, #12
     972:	46bd      	mov	sp, r7
     974:	f85d 7b04 	ldr.w	r7, [sp], #4
     978:	4770      	bx	lr

0000097a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     97a:	b480      	push	{r7}
     97c:	b083      	sub	sp, #12
     97e:	af00      	add	r7, sp, #0
     980:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     982:	687b      	ldr	r3, [r7, #4]
     984:	6a1b      	ldr	r3, [r3, #32]
     986:	f043 0202 	orr.w	r2, r3, #2
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     98e:	bf00      	nop
     990:	370c      	adds	r7, #12
     992:	46bd      	mov	sp, r7
     994:	f85d 7b04 	ldr.w	r7, [sp], #4
     998:	4770      	bx	lr

0000099a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     99a:	b480      	push	{r7}
     99c:	b083      	sub	sp, #12
     99e:	af00      	add	r7, sp, #0
     9a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	6a1b      	ldr	r3, [r3, #32]
     9a6:	f043 0204 	orr.w	r2, r3, #4
     9aa:	687b      	ldr	r3, [r7, #4]
     9ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ae:	bf00      	nop
     9b0:	370c      	adds	r7, #12
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr

000009ba <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     9ba:	b480      	push	{r7}
     9bc:	b083      	sub	sp, #12
     9be:	af00      	add	r7, sp, #0
     9c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	6a1b      	ldr	r3, [r3, #32]
     9c6:	f043 0208 	orr.w	r2, r3, #8
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ce:	bf00      	nop
     9d0:	370c      	adds	r7, #12
     9d2:	46bd      	mov	sp, r7
     9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d8:	4770      	bx	lr

000009da <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     9da:	b480      	push	{r7}
     9dc:	b083      	sub	sp, #12
     9de:	af00      	add	r7, sp, #0
     9e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	6a1b      	ldr	r3, [r3, #32]
     9e6:	f043 0220 	orr.w	r2, r3, #32
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ee:	bf00      	nop
     9f0:	370c      	adds	r7, #12
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr

000009fa <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     9fa:	b480      	push	{r7}
     9fc:	b083      	sub	sp, #12
     9fe:	af00      	add	r7, sp, #0
     a00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	6a1b      	ldr	r3, [r3, #32]
     a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a0e:	bf00      	nop
     a10:	370c      	adds	r7, #12
     a12:	46bd      	mov	sp, r7
     a14:	f85d 7b04 	ldr.w	r7, [sp], #4
     a18:	4770      	bx	lr

00000a1a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     a1a:	b480      	push	{r7}
     a1c:	b085      	sub	sp, #20
     a1e:	af00      	add	r7, sp, #0
     a20:	60f8      	str	r0, [r7, #12]
     a22:	460b      	mov	r3, r1
     a24:	607a      	str	r2, [r7, #4]
     a26:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a28:	7afb      	ldrb	r3, [r7, #11]
     a2a:	68fa      	ldr	r2, [r7, #12]
     a2c:	01db      	lsls	r3, r3, #7
     a2e:	4413      	add	r3, r2
     a30:	3308      	adds	r3, #8
     a32:	687a      	ldr	r2, [r7, #4]
     a34:	601a      	str	r2, [r3, #0]
}
     a36:	bf00      	nop
     a38:	3714      	adds	r7, #20
     a3a:	46bd      	mov	sp, r7
     a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a40:	4770      	bx	lr

00000a42 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     a42:	b480      	push	{r7}
     a44:	b085      	sub	sp, #20
     a46:	af00      	add	r7, sp, #0
     a48:	60f8      	str	r0, [r7, #12]
     a4a:	460b      	mov	r3, r1
     a4c:	607a      	str	r2, [r7, #4]
     a4e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a50:	7afb      	ldrb	r3, [r7, #11]
     a52:	68fa      	ldr	r2, [r7, #12]
     a54:	01db      	lsls	r3, r3, #7
     a56:	4413      	add	r3, r2
     a58:	3304      	adds	r3, #4
     a5a:	687a      	ldr	r2, [r7, #4]
     a5c:	601a      	str	r2, [r3, #0]
}
     a5e:	bf00      	nop
     a60:	3714      	adds	r7, #20
     a62:	46bd      	mov	sp, r7
     a64:	f85d 7b04 	ldr.w	r7, [sp], #4
     a68:	4770      	bx	lr

00000a6a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a6a:	b480      	push	{r7}
     a6c:	b085      	sub	sp, #20
     a6e:	af00      	add	r7, sp, #0
     a70:	60f8      	str	r0, [r7, #12]
     a72:	460b      	mov	r3, r1
     a74:	607a      	str	r2, [r7, #4]
     a76:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a78:	7afb      	ldrb	r3, [r7, #11]
     a7a:	68fa      	ldr	r2, [r7, #12]
     a7c:	01db      	lsls	r3, r3, #7
     a7e:	4413      	add	r3, r2
     a80:	3318      	adds	r3, #24
     a82:	687a      	ldr	r2, [r7, #4]
     a84:	601a      	str	r2, [r3, #0]
}
     a86:	bf00      	nop
     a88:	3714      	adds	r7, #20
     a8a:	46bd      	mov	sp, r7
     a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     a90:	4770      	bx	lr

00000a92 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     a92:	b480      	push	{r7}
     a94:	b085      	sub	sp, #20
     a96:	af00      	add	r7, sp, #0
     a98:	60f8      	str	r0, [r7, #12]
     a9a:	460b      	mov	r3, r1
     a9c:	607a      	str	r2, [r7, #4]
     a9e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aa0:	7afb      	ldrb	r3, [r7, #11]
     aa2:	68fa      	ldr	r2, [r7, #12]
     aa4:	01db      	lsls	r3, r3, #7
     aa6:	4413      	add	r3, r2
     aa8:	3314      	adds	r3, #20
     aaa:	687a      	ldr	r2, [r7, #4]
     aac:	601a      	str	r2, [r3, #0]
}
     aae:	bf00      	nop
     ab0:	3714      	adds	r7, #20
     ab2:	46bd      	mov	sp, r7
     ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab8:	4770      	bx	lr

00000aba <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     aba:	b480      	push	{r7}
     abc:	b085      	sub	sp, #20
     abe:	af00      	add	r7, sp, #0
     ac0:	6078      	str	r0, [r7, #4]
     ac2:	4608      	mov	r0, r1
     ac4:	4611      	mov	r1, r2
     ac6:	461a      	mov	r2, r3
     ac8:	4603      	mov	r3, r0
     aca:	70fb      	strb	r3, [r7, #3]
     acc:	460b      	mov	r3, r1
     ace:	70bb      	strb	r3, [r7, #2]
     ad0:	4613      	mov	r3, r2
     ad2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ad4:	78fa      	ldrb	r2, [r7, #3]
     ad6:	78bb      	ldrb	r3, [r7, #2]
     ad8:	6879      	ldr	r1, [r7, #4]
     ada:	01d2      	lsls	r2, r2, #7
     adc:	440a      	add	r2, r1
     ade:	4413      	add	r3, r2
     ae0:	3330      	adds	r3, #48	; 0x30
     ae2:	781b      	ldrb	r3, [r3, #0]
     ae4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ae6:	7bfb      	ldrb	r3, [r7, #15]
     ae8:	f023 030f 	bic.w	r3, r3, #15
     aec:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     aee:	787b      	ldrb	r3, [r7, #1]
     af0:	f003 030f 	and.w	r3, r3, #15
     af4:	b2da      	uxtb	r2, r3
     af6:	7bfb      	ldrb	r3, [r7, #15]
     af8:	4313      	orrs	r3, r2
     afa:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     afc:	78fa      	ldrb	r2, [r7, #3]
     afe:	78bb      	ldrb	r3, [r7, #2]
     b00:	6879      	ldr	r1, [r7, #4]
     b02:	01d2      	lsls	r2, r2, #7
     b04:	440a      	add	r2, r1
     b06:	4413      	add	r3, r2
     b08:	3330      	adds	r3, #48	; 0x30
     b0a:	7bfa      	ldrb	r2, [r7, #15]
     b0c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b0e:	bf00      	nop
     b10:	3714      	adds	r7, #20
     b12:	46bd      	mov	sp, r7
     b14:	f85d 7b04 	ldr.w	r7, [sp], #4
     b18:	4770      	bx	lr

00000b1a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     b1a:	b480      	push	{r7}
     b1c:	b085      	sub	sp, #20
     b1e:	af00      	add	r7, sp, #0
     b20:	6078      	str	r0, [r7, #4]
     b22:	4608      	mov	r0, r1
     b24:	4611      	mov	r1, r2
     b26:	461a      	mov	r2, r3
     b28:	4603      	mov	r3, r0
     b2a:	70fb      	strb	r3, [r7, #3]
     b2c:	460b      	mov	r3, r1
     b2e:	70bb      	strb	r3, [r7, #2]
     b30:	4613      	mov	r3, r2
     b32:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b34:	78fa      	ldrb	r2, [r7, #3]
     b36:	78bb      	ldrb	r3, [r7, #2]
     b38:	6879      	ldr	r1, [r7, #4]
     b3a:	01d2      	lsls	r2, r2, #7
     b3c:	440a      	add	r2, r1
     b3e:	4413      	add	r3, r2
     b40:	3330      	adds	r3, #48	; 0x30
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b46:	7bfb      	ldrb	r3, [r7, #15]
     b48:	f003 030f 	and.w	r3, r3, #15
     b4c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     b4e:	787b      	ldrb	r3, [r7, #1]
     b50:	011b      	lsls	r3, r3, #4
     b52:	b2da      	uxtb	r2, r3
     b54:	7bfb      	ldrb	r3, [r7, #15]
     b56:	4313      	orrs	r3, r2
     b58:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b5a:	78fa      	ldrb	r2, [r7, #3]
     b5c:	78bb      	ldrb	r3, [r7, #2]
     b5e:	6879      	ldr	r1, [r7, #4]
     b60:	01d2      	lsls	r2, r2, #7
     b62:	440a      	add	r2, r1
     b64:	4413      	add	r3, r2
     b66:	3330      	adds	r3, #48	; 0x30
     b68:	7bfa      	ldrb	r2, [r7, #15]
     b6a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b6c:	bf00      	nop
     b6e:	3714      	adds	r7, #20
     b70:	46bd      	mov	sp, r7
     b72:	f85d 7b04 	ldr.w	r7, [sp], #4
     b76:	4770      	bx	lr

00000b78 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     b78:	b480      	push	{r7}
     b7a:	b085      	sub	sp, #20
     b7c:	af00      	add	r7, sp, #0
     b7e:	6078      	str	r0, [r7, #4]
     b80:	4608      	mov	r0, r1
     b82:	4611      	mov	r1, r2
     b84:	461a      	mov	r2, r3
     b86:	4603      	mov	r3, r0
     b88:	70fb      	strb	r3, [r7, #3]
     b8a:	460b      	mov	r3, r1
     b8c:	70bb      	strb	r3, [r7, #2]
     b8e:	4613      	mov	r3, r2
     b90:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b92:	78fa      	ldrb	r2, [r7, #3]
     b94:	78bb      	ldrb	r3, [r7, #2]
     b96:	6879      	ldr	r1, [r7, #4]
     b98:	01d2      	lsls	r2, r2, #7
     b9a:	440a      	add	r2, r1
     b9c:	4413      	add	r3, r2
     b9e:	3340      	adds	r3, #64	; 0x40
     ba0:	781b      	ldrb	r3, [r3, #0]
     ba2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba4:	7bfb      	ldrb	r3, [r7, #15]
     ba6:	f023 0301 	bic.w	r3, r3, #1
     baa:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bac:	787a      	ldrb	r2, [r7, #1]
     bae:	7bfb      	ldrb	r3, [r7, #15]
     bb0:	4313      	orrs	r3, r2
     bb2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb4:	78fa      	ldrb	r2, [r7, #3]
     bb6:	78bb      	ldrb	r3, [r7, #2]
     bb8:	6879      	ldr	r1, [r7, #4]
     bba:	01d2      	lsls	r2, r2, #7
     bbc:	440a      	add	r2, r1
     bbe:	4413      	add	r3, r2
     bc0:	3340      	adds	r3, #64	; 0x40
     bc2:	7bfa      	ldrb	r2, [r7, #15]
     bc4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bc6:	bf00      	nop
     bc8:	3714      	adds	r7, #20
     bca:	46bd      	mov	sp, r7
     bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd0:	4770      	bx	lr

00000bd2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     bd2:	b490      	push	{r4, r7}
     bd4:	b082      	sub	sp, #8
     bd6:	af00      	add	r7, sp, #0
     bd8:	6078      	str	r0, [r7, #4]
     bda:	460b      	mov	r3, r1
     bdc:	70fb      	strb	r3, [r7, #3]
     bde:	4613      	mov	r3, r2
     be0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     be2:	78fa      	ldrb	r2, [r7, #3]
     be4:	78bb      	ldrb	r3, [r7, #2]
     be6:	78f8      	ldrb	r0, [r7, #3]
     be8:	78b9      	ldrb	r1, [r7, #2]
     bea:	687c      	ldr	r4, [r7, #4]
     bec:	01c0      	lsls	r0, r0, #7
     bee:	4420      	add	r0, r4
     bf0:	4401      	add	r1, r0
     bf2:	3140      	adds	r1, #64	; 0x40
     bf4:	7809      	ldrb	r1, [r1, #0]
     bf6:	b2c9      	uxtb	r1, r1
     bf8:	f041 0104 	orr.w	r1, r1, #4
     bfc:	b2c8      	uxtb	r0, r1
     bfe:	6879      	ldr	r1, [r7, #4]
     c00:	01d2      	lsls	r2, r2, #7
     c02:	440a      	add	r2, r1
     c04:	4413      	add	r3, r2
     c06:	3340      	adds	r3, #64	; 0x40
     c08:	4602      	mov	r2, r0
     c0a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c0c:	bf00      	nop
     c0e:	3708      	adds	r7, #8
     c10:	46bd      	mov	sp, r7
     c12:	bc90      	pop	{r4, r7}
     c14:	4770      	bx	lr

00000c16 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     c16:	b490      	push	{r4, r7}
     c18:	b082      	sub	sp, #8
     c1a:	af00      	add	r7, sp, #0
     c1c:	6078      	str	r0, [r7, #4]
     c1e:	460b      	mov	r3, r1
     c20:	70fb      	strb	r3, [r7, #3]
     c22:	4613      	mov	r3, r2
     c24:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c26:	78fa      	ldrb	r2, [r7, #3]
     c28:	78bb      	ldrb	r3, [r7, #2]
     c2a:	78f8      	ldrb	r0, [r7, #3]
     c2c:	78b9      	ldrb	r1, [r7, #2]
     c2e:	687c      	ldr	r4, [r7, #4]
     c30:	01c0      	lsls	r0, r0, #7
     c32:	4420      	add	r0, r4
     c34:	4401      	add	r1, r0
     c36:	3140      	adds	r1, #64	; 0x40
     c38:	7809      	ldrb	r1, [r1, #0]
     c3a:	b2c9      	uxtb	r1, r1
     c3c:	f021 0104 	bic.w	r1, r1, #4
     c40:	b2c8      	uxtb	r0, r1
     c42:	6879      	ldr	r1, [r7, #4]
     c44:	01d2      	lsls	r2, r2, #7
     c46:	440a      	add	r2, r1
     c48:	4413      	add	r3, r2
     c4a:	3340      	adds	r3, #64	; 0x40
     c4c:	4602      	mov	r2, r0
     c4e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c50:	bf00      	nop
     c52:	3708      	adds	r7, #8
     c54:	46bd      	mov	sp, r7
     c56:	bc90      	pop	{r4, r7}
     c58:	4770      	bx	lr

00000c5a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     c5a:	b480      	push	{r7}
     c5c:	b085      	sub	sp, #20
     c5e:	af00      	add	r7, sp, #0
     c60:	60f8      	str	r0, [r7, #12]
     c62:	460b      	mov	r3, r1
     c64:	607a      	str	r2, [r7, #4]
     c66:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c68:	7afb      	ldrb	r3, [r7, #11]
     c6a:	68fa      	ldr	r2, [r7, #12]
     c6c:	01db      	lsls	r3, r3, #7
     c6e:	4413      	add	r3, r2
     c70:	3328      	adds	r3, #40	; 0x28
     c72:	687a      	ldr	r2, [r7, #4]
     c74:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c76:	bf00      	nop
     c78:	3714      	adds	r7, #20
     c7a:	46bd      	mov	sp, r7
     c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c80:	4770      	bx	lr
	...

00000c84 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     c84:	b580      	push	{r7, lr}
     c86:	b082      	sub	sp, #8
     c88:	af00      	add	r7, sp, #0
     c8a:	4603      	mov	r3, r0
     c8c:	6039      	str	r1, [r7, #0]
     c8e:	71fb      	strb	r3, [r7, #7]
     c90:	4613      	mov	r3, r2
     c92:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     c94:	79bb      	ldrb	r3, [r7, #6]
     c96:	2b01      	cmp	r3, #1
     c98:	d01c      	beq.n	cd4 <_gpio_set_direction+0x50>
     c9a:	2b02      	cmp	r3, #2
     c9c:	d037      	beq.n	d0e <_gpio_set_direction+0x8a>
     c9e:	2b00      	cmp	r3, #0
     ca0:	d14e      	bne.n	d40 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ca2:	79fb      	ldrb	r3, [r7, #7]
     ca4:	683a      	ldr	r2, [r7, #0]
     ca6:	4619      	mov	r1, r3
     ca8:	482a      	ldr	r0, [pc, #168]	; (d54 <_gpio_set_direction+0xd0>)
     caa:	4b2b      	ldr	r3, [pc, #172]	; (d58 <_gpio_set_direction+0xd4>)
     cac:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     cae:	683b      	ldr	r3, [r7, #0]
     cb0:	b29b      	uxth	r3, r3
     cb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     cb6:	79fb      	ldrb	r3, [r7, #7]
     cb8:	4619      	mov	r1, r3
     cba:	4826      	ldr	r0, [pc, #152]	; (d54 <_gpio_set_direction+0xd0>)
     cbc:	4b27      	ldr	r3, [pc, #156]	; (d5c <_gpio_set_direction+0xd8>)
     cbe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     cc0:	683b      	ldr	r3, [r7, #0]
     cc2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     cc4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     cc8:	79fb      	ldrb	r3, [r7, #7]
     cca:	4619      	mov	r1, r3
     ccc:	4821      	ldr	r0, [pc, #132]	; (d54 <_gpio_set_direction+0xd0>)
     cce:	4b23      	ldr	r3, [pc, #140]	; (d5c <_gpio_set_direction+0xd8>)
     cd0:	4798      	blx	r3
		break;
     cd2:	e03a      	b.n	d4a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     cd4:	79fb      	ldrb	r3, [r7, #7]
     cd6:	683a      	ldr	r2, [r7, #0]
     cd8:	4619      	mov	r1, r3
     cda:	481e      	ldr	r0, [pc, #120]	; (d54 <_gpio_set_direction+0xd0>)
     cdc:	4b1e      	ldr	r3, [pc, #120]	; (d58 <_gpio_set_direction+0xd4>)
     cde:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     ce0:	683b      	ldr	r3, [r7, #0]
     ce2:	b29b      	uxth	r3, r3
     ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     cec:	79f9      	ldrb	r1, [r7, #7]
     cee:	461a      	mov	r2, r3
     cf0:	4818      	ldr	r0, [pc, #96]	; (d54 <_gpio_set_direction+0xd0>)
     cf2:	4b1a      	ldr	r3, [pc, #104]	; (d5c <_gpio_set_direction+0xd8>)
     cf4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     cf6:	683b      	ldr	r3, [r7, #0]
     cf8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     cfa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     d02:	79f9      	ldrb	r1, [r7, #7]
     d04:	461a      	mov	r2, r3
     d06:	4813      	ldr	r0, [pc, #76]	; (d54 <_gpio_set_direction+0xd0>)
     d08:	4b14      	ldr	r3, [pc, #80]	; (d5c <_gpio_set_direction+0xd8>)
     d0a:	4798      	blx	r3
		break;
     d0c:	e01d      	b.n	d4a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     d0e:	79fb      	ldrb	r3, [r7, #7]
     d10:	683a      	ldr	r2, [r7, #0]
     d12:	4619      	mov	r1, r3
     d14:	480f      	ldr	r0, [pc, #60]	; (d54 <_gpio_set_direction+0xd0>)
     d16:	4b12      	ldr	r3, [pc, #72]	; (d60 <_gpio_set_direction+0xdc>)
     d18:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     d1a:	683b      	ldr	r3, [r7, #0]
     d1c:	b29b      	uxth	r3, r3
     d1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     d22:	79fb      	ldrb	r3, [r7, #7]
     d24:	4619      	mov	r1, r3
     d26:	480b      	ldr	r0, [pc, #44]	; (d54 <_gpio_set_direction+0xd0>)
     d28:	4b0c      	ldr	r3, [pc, #48]	; (d5c <_gpio_set_direction+0xd8>)
     d2a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     d2c:	683b      	ldr	r3, [r7, #0]
     d2e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     d30:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     d34:	79fb      	ldrb	r3, [r7, #7]
     d36:	4619      	mov	r1, r3
     d38:	4806      	ldr	r0, [pc, #24]	; (d54 <_gpio_set_direction+0xd0>)
     d3a:	4b08      	ldr	r3, [pc, #32]	; (d5c <_gpio_set_direction+0xd8>)
     d3c:	4798      	blx	r3
		break;
     d3e:	e004      	b.n	d4a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     d40:	2246      	movs	r2, #70	; 0x46
     d42:	4908      	ldr	r1, [pc, #32]	; (d64 <_gpio_set_direction+0xe0>)
     d44:	2000      	movs	r0, #0
     d46:	4b08      	ldr	r3, [pc, #32]	; (d68 <_gpio_set_direction+0xe4>)
     d48:	4798      	blx	r3
	}
}
     d4a:	bf00      	nop
     d4c:	3708      	adds	r7, #8
     d4e:	46bd      	mov	sp, r7
     d50:	bd80      	pop	{r7, pc}
     d52:	bf00      	nop
     d54:	41008000 	.word	0x41008000
     d58:	00000a43 	.word	0x00000a43
     d5c:	00000c5b 	.word	0x00000c5b
     d60:	00000a1b 	.word	0x00000a1b
     d64:	0000ed6c 	.word	0x0000ed6c
     d68:	0000341d 	.word	0x0000341d

00000d6c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     d6c:	b580      	push	{r7, lr}
     d6e:	b082      	sub	sp, #8
     d70:	af00      	add	r7, sp, #0
     d72:	4603      	mov	r3, r0
     d74:	6039      	str	r1, [r7, #0]
     d76:	71fb      	strb	r3, [r7, #7]
     d78:	4613      	mov	r3, r2
     d7a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     d7c:	79bb      	ldrb	r3, [r7, #6]
     d7e:	2b00      	cmp	r3, #0
     d80:	d006      	beq.n	d90 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     d82:	79fb      	ldrb	r3, [r7, #7]
     d84:	683a      	ldr	r2, [r7, #0]
     d86:	4619      	mov	r1, r3
     d88:	4806      	ldr	r0, [pc, #24]	; (da4 <_gpio_set_level+0x38>)
     d8a:	4b07      	ldr	r3, [pc, #28]	; (da8 <_gpio_set_level+0x3c>)
     d8c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     d8e:	e005      	b.n	d9c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     d90:	79fb      	ldrb	r3, [r7, #7]
     d92:	683a      	ldr	r2, [r7, #0]
     d94:	4619      	mov	r1, r3
     d96:	4803      	ldr	r0, [pc, #12]	; (da4 <_gpio_set_level+0x38>)
     d98:	4b04      	ldr	r3, [pc, #16]	; (dac <_gpio_set_level+0x40>)
     d9a:	4798      	blx	r3
}
     d9c:	bf00      	nop
     d9e:	3708      	adds	r7, #8
     da0:	46bd      	mov	sp, r7
     da2:	bd80      	pop	{r7, pc}
     da4:	41008000 	.word	0x41008000
     da8:	00000a6b 	.word	0x00000a6b
     dac:	00000a93 	.word	0x00000a93

00000db0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     db0:	b580      	push	{r7, lr}
     db2:	b082      	sub	sp, #8
     db4:	af00      	add	r7, sp, #0
     db6:	4603      	mov	r3, r0
     db8:	71fb      	strb	r3, [r7, #7]
     dba:	460b      	mov	r3, r1
     dbc:	71bb      	strb	r3, [r7, #6]
     dbe:	4613      	mov	r3, r2
     dc0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     dc2:	797b      	ldrb	r3, [r7, #5]
     dc4:	2b01      	cmp	r3, #1
     dc6:	d00a      	beq.n	dde <_gpio_set_pin_pull_mode+0x2e>
     dc8:	2b02      	cmp	r3, #2
     dca:	d01f      	beq.n	e0c <_gpio_set_pin_pull_mode+0x5c>
     dcc:	2b00      	cmp	r3, #0
     dce:	d134      	bne.n	e3a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     dd0:	79ba      	ldrb	r2, [r7, #6]
     dd2:	79fb      	ldrb	r3, [r7, #7]
     dd4:	4619      	mov	r1, r3
     dd6:	481e      	ldr	r0, [pc, #120]	; (e50 <_gpio_set_pin_pull_mode+0xa0>)
     dd8:	4b1e      	ldr	r3, [pc, #120]	; (e54 <_gpio_set_pin_pull_mode+0xa4>)
     dda:	4798      	blx	r3
		break;
     ddc:	e033      	b.n	e46 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     dde:	79bb      	ldrb	r3, [r7, #6]
     de0:	2201      	movs	r2, #1
     de2:	409a      	lsls	r2, r3
     de4:	79fb      	ldrb	r3, [r7, #7]
     de6:	4619      	mov	r1, r3
     de8:	4819      	ldr	r0, [pc, #100]	; (e50 <_gpio_set_pin_pull_mode+0xa0>)
     dea:	4b1b      	ldr	r3, [pc, #108]	; (e58 <_gpio_set_pin_pull_mode+0xa8>)
     dec:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     dee:	79ba      	ldrb	r2, [r7, #6]
     df0:	79fb      	ldrb	r3, [r7, #7]
     df2:	4619      	mov	r1, r3
     df4:	4816      	ldr	r0, [pc, #88]	; (e50 <_gpio_set_pin_pull_mode+0xa0>)
     df6:	4b19      	ldr	r3, [pc, #100]	; (e5c <_gpio_set_pin_pull_mode+0xac>)
     df8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     dfa:	79bb      	ldrb	r3, [r7, #6]
     dfc:	2201      	movs	r2, #1
     dfe:	409a      	lsls	r2, r3
     e00:	79fb      	ldrb	r3, [r7, #7]
     e02:	4619      	mov	r1, r3
     e04:	4812      	ldr	r0, [pc, #72]	; (e50 <_gpio_set_pin_pull_mode+0xa0>)
     e06:	4b16      	ldr	r3, [pc, #88]	; (e60 <_gpio_set_pin_pull_mode+0xb0>)
     e08:	4798      	blx	r3
		break;
     e0a:	e01c      	b.n	e46 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     e0c:	79bb      	ldrb	r3, [r7, #6]
     e0e:	2201      	movs	r2, #1
     e10:	409a      	lsls	r2, r3
     e12:	79fb      	ldrb	r3, [r7, #7]
     e14:	4619      	mov	r1, r3
     e16:	480e      	ldr	r0, [pc, #56]	; (e50 <_gpio_set_pin_pull_mode+0xa0>)
     e18:	4b0f      	ldr	r3, [pc, #60]	; (e58 <_gpio_set_pin_pull_mode+0xa8>)
     e1a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     e1c:	79ba      	ldrb	r2, [r7, #6]
     e1e:	79fb      	ldrb	r3, [r7, #7]
     e20:	4619      	mov	r1, r3
     e22:	480b      	ldr	r0, [pc, #44]	; (e50 <_gpio_set_pin_pull_mode+0xa0>)
     e24:	4b0d      	ldr	r3, [pc, #52]	; (e5c <_gpio_set_pin_pull_mode+0xac>)
     e26:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     e28:	79bb      	ldrb	r3, [r7, #6]
     e2a:	2201      	movs	r2, #1
     e2c:	409a      	lsls	r2, r3
     e2e:	79fb      	ldrb	r3, [r7, #7]
     e30:	4619      	mov	r1, r3
     e32:	4807      	ldr	r0, [pc, #28]	; (e50 <_gpio_set_pin_pull_mode+0xa0>)
     e34:	4b0b      	ldr	r3, [pc, #44]	; (e64 <_gpio_set_pin_pull_mode+0xb4>)
     e36:	4798      	blx	r3
		break;
     e38:	e005      	b.n	e46 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     e3a:	2289      	movs	r2, #137	; 0x89
     e3c:	490a      	ldr	r1, [pc, #40]	; (e68 <_gpio_set_pin_pull_mode+0xb8>)
     e3e:	2000      	movs	r0, #0
     e40:	4b0a      	ldr	r3, [pc, #40]	; (e6c <_gpio_set_pin_pull_mode+0xbc>)
     e42:	4798      	blx	r3
		break;
     e44:	bf00      	nop
	}
}
     e46:	bf00      	nop
     e48:	3708      	adds	r7, #8
     e4a:	46bd      	mov	sp, r7
     e4c:	bd80      	pop	{r7, pc}
     e4e:	bf00      	nop
     e50:	41008000 	.word	0x41008000
     e54:	00000c17 	.word	0x00000c17
     e58:	00000a43 	.word	0x00000a43
     e5c:	00000bd3 	.word	0x00000bd3
     e60:	00000a6b 	.word	0x00000a6b
     e64:	00000a93 	.word	0x00000a93
     e68:	0000ed6c 	.word	0x0000ed6c
     e6c:	0000341d 	.word	0x0000341d

00000e70 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     e70:	b590      	push	{r4, r7, lr}
     e72:	b085      	sub	sp, #20
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
     e78:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	095b      	lsrs	r3, r3, #5
     e7e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     e80:	687b      	ldr	r3, [r7, #4]
     e82:	b2db      	uxtb	r3, r3
     e84:	f003 031f 	and.w	r3, r3, #31
     e88:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     e8a:	683b      	ldr	r3, [r7, #0]
     e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
     e90:	d106      	bne.n	ea0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     e92:	7bba      	ldrb	r2, [r7, #14]
     e94:	7bf9      	ldrb	r1, [r7, #15]
     e96:	2300      	movs	r3, #0
     e98:	4812      	ldr	r0, [pc, #72]	; (ee4 <_gpio_set_pin_function+0x74>)
     e9a:	4c13      	ldr	r4, [pc, #76]	; (ee8 <_gpio_set_pin_function+0x78>)
     e9c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     e9e:	e01d      	b.n	edc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     ea0:	7bba      	ldrb	r2, [r7, #14]
     ea2:	7bf9      	ldrb	r1, [r7, #15]
     ea4:	2301      	movs	r3, #1
     ea6:	480f      	ldr	r0, [pc, #60]	; (ee4 <_gpio_set_pin_function+0x74>)
     ea8:	4c0f      	ldr	r4, [pc, #60]	; (ee8 <_gpio_set_pin_function+0x78>)
     eaa:	47a0      	blx	r4
		if (pin & 1) {
     eac:	7bbb      	ldrb	r3, [r7, #14]
     eae:	f003 0301 	and.w	r3, r3, #1
     eb2:	2b00      	cmp	r3, #0
     eb4:	d009      	beq.n	eca <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     eb6:	7bbb      	ldrb	r3, [r7, #14]
     eb8:	085b      	lsrs	r3, r3, #1
     eba:	b2da      	uxtb	r2, r3
     ebc:	683b      	ldr	r3, [r7, #0]
     ebe:	b2db      	uxtb	r3, r3
     ec0:	7bf9      	ldrb	r1, [r7, #15]
     ec2:	4808      	ldr	r0, [pc, #32]	; (ee4 <_gpio_set_pin_function+0x74>)
     ec4:	4c09      	ldr	r4, [pc, #36]	; (eec <_gpio_set_pin_function+0x7c>)
     ec6:	47a0      	blx	r4
}
     ec8:	e008      	b.n	edc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     eca:	7bbb      	ldrb	r3, [r7, #14]
     ecc:	085b      	lsrs	r3, r3, #1
     ece:	b2da      	uxtb	r2, r3
     ed0:	683b      	ldr	r3, [r7, #0]
     ed2:	b2db      	uxtb	r3, r3
     ed4:	7bf9      	ldrb	r1, [r7, #15]
     ed6:	4803      	ldr	r0, [pc, #12]	; (ee4 <_gpio_set_pin_function+0x74>)
     ed8:	4c05      	ldr	r4, [pc, #20]	; (ef0 <_gpio_set_pin_function+0x80>)
     eda:	47a0      	blx	r4
}
     edc:	bf00      	nop
     ede:	3714      	adds	r7, #20
     ee0:	46bd      	mov	sp, r7
     ee2:	bd90      	pop	{r4, r7, pc}
     ee4:	41008000 	.word	0x41008000
     ee8:	00000b79 	.word	0x00000b79
     eec:	00000b1b 	.word	0x00000b1b
     ef0:	00000abb 	.word	0x00000abb

00000ef4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     ef4:	b580      	push	{r7, lr}
     ef6:	b082      	sub	sp, #8
     ef8:	af00      	add	r7, sp, #0
     efa:	4603      	mov	r3, r0
     efc:	460a      	mov	r2, r1
     efe:	71fb      	strb	r3, [r7, #7]
     f00:	4613      	mov	r3, r2
     f02:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     f04:	79fb      	ldrb	r3, [r7, #7]
     f06:	095b      	lsrs	r3, r3, #5
     f08:	b2d8      	uxtb	r0, r3
     f0a:	79fb      	ldrb	r3, [r7, #7]
     f0c:	f003 031f 	and.w	r3, r3, #31
     f10:	b2db      	uxtb	r3, r3
     f12:	79ba      	ldrb	r2, [r7, #6]
     f14:	4619      	mov	r1, r3
     f16:	4b03      	ldr	r3, [pc, #12]	; (f24 <gpio_set_pin_pull_mode+0x30>)
     f18:	4798      	blx	r3
}
     f1a:	bf00      	nop
     f1c:	3708      	adds	r7, #8
     f1e:	46bd      	mov	sp, r7
     f20:	bd80      	pop	{r7, pc}
     f22:	bf00      	nop
     f24:	00000db1 	.word	0x00000db1

00000f28 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b082      	sub	sp, #8
     f2c:	af00      	add	r7, sp, #0
     f2e:	6078      	str	r0, [r7, #4]
     f30:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     f32:	6839      	ldr	r1, [r7, #0]
     f34:	6878      	ldr	r0, [r7, #4]
     f36:	4b03      	ldr	r3, [pc, #12]	; (f44 <gpio_set_pin_function+0x1c>)
     f38:	4798      	blx	r3
}
     f3a:	bf00      	nop
     f3c:	3708      	adds	r7, #8
     f3e:	46bd      	mov	sp, r7
     f40:	bd80      	pop	{r7, pc}
     f42:	bf00      	nop
     f44:	00000e71 	.word	0x00000e71

00000f48 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
     f4e:	4603      	mov	r3, r0
     f50:	460a      	mov	r2, r1
     f52:	71fb      	strb	r3, [r7, #7]
     f54:	4613      	mov	r3, r2
     f56:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     f58:	79fb      	ldrb	r3, [r7, #7]
     f5a:	095b      	lsrs	r3, r3, #5
     f5c:	b2d8      	uxtb	r0, r3
     f5e:	79fb      	ldrb	r3, [r7, #7]
     f60:	f003 031f 	and.w	r3, r3, #31
     f64:	2201      	movs	r2, #1
     f66:	fa02 f303 	lsl.w	r3, r2, r3
     f6a:	79ba      	ldrb	r2, [r7, #6]
     f6c:	4619      	mov	r1, r3
     f6e:	4b03      	ldr	r3, [pc, #12]	; (f7c <gpio_set_pin_direction+0x34>)
     f70:	4798      	blx	r3
}
     f72:	bf00      	nop
     f74:	3708      	adds	r7, #8
     f76:	46bd      	mov	sp, r7
     f78:	bd80      	pop	{r7, pc}
     f7a:	bf00      	nop
     f7c:	00000c85 	.word	0x00000c85

00000f80 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     f80:	b580      	push	{r7, lr}
     f82:	b082      	sub	sp, #8
     f84:	af00      	add	r7, sp, #0
     f86:	4603      	mov	r3, r0
     f88:	460a      	mov	r2, r1
     f8a:	71fb      	strb	r3, [r7, #7]
     f8c:	4613      	mov	r3, r2
     f8e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     f90:	79fb      	ldrb	r3, [r7, #7]
     f92:	095b      	lsrs	r3, r3, #5
     f94:	b2d8      	uxtb	r0, r3
     f96:	79fb      	ldrb	r3, [r7, #7]
     f98:	f003 031f 	and.w	r3, r3, #31
     f9c:	2201      	movs	r2, #1
     f9e:	fa02 f303 	lsl.w	r3, r2, r3
     fa2:	79ba      	ldrb	r2, [r7, #6]
     fa4:	4619      	mov	r1, r3
     fa6:	4b03      	ldr	r3, [pc, #12]	; (fb4 <gpio_set_pin_level+0x34>)
     fa8:	4798      	blx	r3
}
     faa:	bf00      	nop
     fac:	3708      	adds	r7, #8
     fae:	46bd      	mov	sp, r7
     fb0:	bd80      	pop	{r7, pc}
     fb2:	bf00      	nop
     fb4:	00000d6d 	.word	0x00000d6d

00000fb8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     fb8:	b580      	push	{r7, lr}
     fba:	af00      	add	r7, sp, #0
	_init_chip();
     fbc:	4b01      	ldr	r3, [pc, #4]	; (fc4 <init_mcu+0xc>)
     fbe:	4798      	blx	r3
}
     fc0:	bf00      	nop
     fc2:	bd80      	pop	{r7, pc}
     fc4:	00004025 	.word	0x00004025

00000fc8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b082      	sub	sp, #8
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
     fd0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	2b00      	cmp	r3, #0
     fd6:	d004      	beq.n	fe2 <wdt_init+0x1a>
     fd8:	683b      	ldr	r3, [r7, #0]
     fda:	2b00      	cmp	r3, #0
     fdc:	d001      	beq.n	fe2 <wdt_init+0x1a>
     fde:	2301      	movs	r3, #1
     fe0:	e000      	b.n	fe4 <wdt_init+0x1c>
     fe2:	2300      	movs	r3, #0
     fe4:	f003 0301 	and.w	r3, r3, #1
     fe8:	b2db      	uxtb	r3, r3
     fea:	2248      	movs	r2, #72	; 0x48
     fec:	4907      	ldr	r1, [pc, #28]	; (100c <wdt_init+0x44>)
     fee:	4618      	mov	r0, r3
     ff0:	4b07      	ldr	r3, [pc, #28]	; (1010 <wdt_init+0x48>)
     ff2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	683a      	ldr	r2, [r7, #0]
     ff8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     ffa:	687b      	ldr	r3, [r7, #4]
     ffc:	4618      	mov	r0, r3
     ffe:	4b05      	ldr	r3, [pc, #20]	; (1014 <wdt_init+0x4c>)
    1000:	4798      	blx	r3
    1002:	4603      	mov	r3, r0
}
    1004:	4618      	mov	r0, r3
    1006:	3708      	adds	r7, #8
    1008:	46bd      	mov	sp, r7
    100a:	bd80      	pop	{r7, pc}
    100c:	0000ed88 	.word	0x0000ed88
    1010:	0000341d 	.word	0x0000341d
    1014:	0000a98d 	.word	0x0000a98d

00001018 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1018:	b580      	push	{r7, lr}
    101a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    101c:	4804      	ldr	r0, [pc, #16]	; (1030 <CRC_CALC_init+0x18>)
    101e:	4b05      	ldr	r3, [pc, #20]	; (1034 <CRC_CALC_init+0x1c>)
    1020:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1022:	4905      	ldr	r1, [pc, #20]	; (1038 <CRC_CALC_init+0x20>)
    1024:	4805      	ldr	r0, [pc, #20]	; (103c <CRC_CALC_init+0x24>)
    1026:	4b06      	ldr	r3, [pc, #24]	; (1040 <CRC_CALC_init+0x28>)
    1028:	4798      	blx	r3
}
    102a:	bf00      	nop
    102c:	bd80      	pop	{r7, pc}
    102e:	bf00      	nop
    1030:	40000800 	.word	0x40000800
    1034:	0000083b 	.word	0x0000083b
    1038:	41002000 	.word	0x41002000
    103c:	200017f0 	.word	0x200017f0
    1040:	00001e01 	.word	0x00001e01

00001044 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1044:	b580      	push	{r7, lr}
    1046:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1048:	2244      	movs	r2, #68	; 0x44
    104a:	2104      	movs	r1, #4
    104c:	483f      	ldr	r0, [pc, #252]	; (114c <EXTERNAL_IRQ_0_init+0x108>)
    104e:	4b40      	ldr	r3, [pc, #256]	; (1150 <EXTERNAL_IRQ_0_init+0x10c>)
    1050:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1052:	4840      	ldr	r0, [pc, #256]	; (1154 <EXTERNAL_IRQ_0_init+0x110>)
    1054:	4b40      	ldr	r3, [pc, #256]	; (1158 <EXTERNAL_IRQ_0_init+0x114>)
    1056:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1058:	2101      	movs	r1, #1
    105a:	2040      	movs	r0, #64	; 0x40
    105c:	4b3f      	ldr	r3, [pc, #252]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    105e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1060:	2100      	movs	r1, #0
    1062:	2040      	movs	r0, #64	; 0x40
    1064:	4b3e      	ldr	r3, [pc, #248]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    1066:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1068:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    106c:	2040      	movs	r0, #64	; 0x40
    106e:	4b3d      	ldr	r3, [pc, #244]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    1070:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1072:	2101      	movs	r1, #1
    1074:	2021      	movs	r0, #33	; 0x21
    1076:	4b39      	ldr	r3, [pc, #228]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    1078:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    107a:	2100      	movs	r1, #0
    107c:	2021      	movs	r0, #33	; 0x21
    107e:	4b38      	ldr	r3, [pc, #224]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    1080:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1082:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1086:	2021      	movs	r0, #33	; 0x21
    1088:	4b36      	ldr	r3, [pc, #216]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    108a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    108c:	2101      	movs	r1, #1
    108e:	2003      	movs	r0, #3
    1090:	4b32      	ldr	r3, [pc, #200]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    1092:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1094:	2102      	movs	r1, #2
    1096:	2003      	movs	r0, #3
    1098:	4b31      	ldr	r3, [pc, #196]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    109a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    109c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    10a0:	2003      	movs	r0, #3
    10a2:	4b30      	ldr	r3, [pc, #192]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    10a4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    10a6:	2101      	movs	r1, #1
    10a8:	2004      	movs	r0, #4
    10aa:	4b2c      	ldr	r3, [pc, #176]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    10ac:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    10ae:	2102      	movs	r1, #2
    10b0:	2004      	movs	r0, #4
    10b2:	4b2b      	ldr	r3, [pc, #172]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    10b4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    10b6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    10ba:	2004      	movs	r0, #4
    10bc:	4b29      	ldr	r3, [pc, #164]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    10be:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    10c0:	2101      	movs	r1, #1
    10c2:	2005      	movs	r0, #5
    10c4:	4b25      	ldr	r3, [pc, #148]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    10c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    10c8:	2102      	movs	r1, #2
    10ca:	2005      	movs	r0, #5
    10cc:	4b24      	ldr	r3, [pc, #144]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    10ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    10d0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    10d4:	2005      	movs	r0, #5
    10d6:	4b23      	ldr	r3, [pc, #140]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    10d8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    10da:	2101      	movs	r1, #1
    10dc:	2056      	movs	r0, #86	; 0x56
    10de:	4b1f      	ldr	r3, [pc, #124]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    10e0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    10e2:	2102      	movs	r1, #2
    10e4:	2056      	movs	r0, #86	; 0x56
    10e6:	4b1e      	ldr	r3, [pc, #120]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    10e8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    10ea:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    10ee:	2056      	movs	r0, #86	; 0x56
    10f0:	4b1c      	ldr	r3, [pc, #112]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    10f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    10f4:	2101      	movs	r1, #1
    10f6:	2057      	movs	r0, #87	; 0x57
    10f8:	4b18      	ldr	r3, [pc, #96]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    10fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    10fc:	2102      	movs	r1, #2
    10fe:	2057      	movs	r0, #87	; 0x57
    1100:	4b17      	ldr	r3, [pc, #92]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    1102:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1104:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1108:	2057      	movs	r0, #87	; 0x57
    110a:	4b16      	ldr	r3, [pc, #88]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    110c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    110e:	2101      	movs	r1, #1
    1110:	2028      	movs	r0, #40	; 0x28
    1112:	4b12      	ldr	r3, [pc, #72]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    1114:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1116:	2100      	movs	r1, #0
    1118:	2028      	movs	r0, #40	; 0x28
    111a:	4b11      	ldr	r3, [pc, #68]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    111c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    111e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1122:	2028      	movs	r0, #40	; 0x28
    1124:	4b0f      	ldr	r3, [pc, #60]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    1126:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1128:	2101      	movs	r1, #1
    112a:	2029      	movs	r0, #41	; 0x29
    112c:	4b0b      	ldr	r3, [pc, #44]	; (115c <EXTERNAL_IRQ_0_init+0x118>)
    112e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1130:	2100      	movs	r1, #0
    1132:	2029      	movs	r0, #41	; 0x29
    1134:	4b0a      	ldr	r3, [pc, #40]	; (1160 <EXTERNAL_IRQ_0_init+0x11c>)
    1136:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1138:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    113c:	2029      	movs	r0, #41	; 0x29
    113e:	4b09      	ldr	r3, [pc, #36]	; (1164 <EXTERNAL_IRQ_0_init+0x120>)
    1140:	4798      	blx	r3

	ext_irq_init();
    1142:	4b09      	ldr	r3, [pc, #36]	; (1168 <EXTERNAL_IRQ_0_init+0x124>)
    1144:	4798      	blx	r3
}
    1146:	bf00      	nop
    1148:	bd80      	pop	{r7, pc}
    114a:	bf00      	nop
    114c:	40001c00 	.word	0x40001c00
    1150:	000006d5 	.word	0x000006d5
    1154:	40000800 	.word	0x40000800
    1158:	000007bb 	.word	0x000007bb
    115c:	00000f49 	.word	0x00000f49
    1160:	00000ef5 	.word	0x00000ef5
    1164:	00000f29 	.word	0x00000f29
    1168:	00001ec9 	.word	0x00001ec9

0000116c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    116c:	b580      	push	{r7, lr}
    116e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1170:	2244      	movs	r2, #68	; 0x44
    1172:	210b      	movs	r1, #11
    1174:	4807      	ldr	r0, [pc, #28]	; (1194 <EVENT_SYSTEM_0_init+0x28>)
    1176:	4b08      	ldr	r3, [pc, #32]	; (1198 <EVENT_SYSTEM_0_init+0x2c>)
    1178:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    117a:	2244      	movs	r2, #68	; 0x44
    117c:	210c      	movs	r1, #12
    117e:	4805      	ldr	r0, [pc, #20]	; (1194 <EVENT_SYSTEM_0_init+0x28>)
    1180:	4b05      	ldr	r3, [pc, #20]	; (1198 <EVENT_SYSTEM_0_init+0x2c>)
    1182:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1184:	4805      	ldr	r0, [pc, #20]	; (119c <EVENT_SYSTEM_0_init+0x30>)
    1186:	4b06      	ldr	r3, [pc, #24]	; (11a0 <EVENT_SYSTEM_0_init+0x34>)
    1188:	4798      	blx	r3

	event_system_init();
    118a:	4b06      	ldr	r3, [pc, #24]	; (11a4 <EVENT_SYSTEM_0_init+0x38>)
    118c:	4798      	blx	r3
}
    118e:	bf00      	nop
    1190:	bd80      	pop	{r7, pc}
    1192:	bf00      	nop
    1194:	40001c00 	.word	0x40001c00
    1198:	000006d5 	.word	0x000006d5
    119c:	40000800 	.word	0x40000800
    11a0:	0000085b 	.word	0x0000085b
    11a4:	00001eb5 	.word	0x00001eb5

000011a8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    11a8:	b580      	push	{r7, lr}
    11aa:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    11ac:	2101      	movs	r1, #1
    11ae:	202b      	movs	r0, #43	; 0x2b
    11b0:	4b2b      	ldr	r3, [pc, #172]	; (1260 <QSPI_N25Q256_PORT_init+0xb8>)
    11b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    11b4:	2100      	movs	r1, #0
    11b6:	202b      	movs	r0, #43	; 0x2b
    11b8:	4b2a      	ldr	r3, [pc, #168]	; (1264 <QSPI_N25Q256_PORT_init+0xbc>)
    11ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    11bc:	492a      	ldr	r1, [pc, #168]	; (1268 <QSPI_N25Q256_PORT_init+0xc0>)
    11be:	202b      	movs	r0, #43	; 0x2b
    11c0:	4b2a      	ldr	r3, [pc, #168]	; (126c <QSPI_N25Q256_PORT_init+0xc4>)
    11c2:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    11c4:	2102      	movs	r1, #2
    11c6:	2008      	movs	r0, #8
    11c8:	4b25      	ldr	r3, [pc, #148]	; (1260 <QSPI_N25Q256_PORT_init+0xb8>)
    11ca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    11cc:	2100      	movs	r1, #0
    11ce:	2008      	movs	r0, #8
    11d0:	4b27      	ldr	r3, [pc, #156]	; (1270 <QSPI_N25Q256_PORT_init+0xc8>)
    11d2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    11d4:	2100      	movs	r1, #0
    11d6:	2008      	movs	r0, #8
    11d8:	4b22      	ldr	r3, [pc, #136]	; (1264 <QSPI_N25Q256_PORT_init+0xbc>)
    11da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    11dc:	4925      	ldr	r1, [pc, #148]	; (1274 <QSPI_N25Q256_PORT_init+0xcc>)
    11de:	2008      	movs	r0, #8
    11e0:	4b22      	ldr	r3, [pc, #136]	; (126c <QSPI_N25Q256_PORT_init+0xc4>)
    11e2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    11e4:	2102      	movs	r1, #2
    11e6:	2009      	movs	r0, #9
    11e8:	4b1d      	ldr	r3, [pc, #116]	; (1260 <QSPI_N25Q256_PORT_init+0xb8>)
    11ea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    11ec:	2100      	movs	r1, #0
    11ee:	2009      	movs	r0, #9
    11f0:	4b1f      	ldr	r3, [pc, #124]	; (1270 <QSPI_N25Q256_PORT_init+0xc8>)
    11f2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    11f4:	2100      	movs	r1, #0
    11f6:	2009      	movs	r0, #9
    11f8:	4b1a      	ldr	r3, [pc, #104]	; (1264 <QSPI_N25Q256_PORT_init+0xbc>)
    11fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    11fc:	491e      	ldr	r1, [pc, #120]	; (1278 <QSPI_N25Q256_PORT_init+0xd0>)
    11fe:	2009      	movs	r0, #9
    1200:	4b1a      	ldr	r3, [pc, #104]	; (126c <QSPI_N25Q256_PORT_init+0xc4>)
    1202:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1204:	2102      	movs	r1, #2
    1206:	200a      	movs	r0, #10
    1208:	4b15      	ldr	r3, [pc, #84]	; (1260 <QSPI_N25Q256_PORT_init+0xb8>)
    120a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    120c:	2100      	movs	r1, #0
    120e:	200a      	movs	r0, #10
    1210:	4b17      	ldr	r3, [pc, #92]	; (1270 <QSPI_N25Q256_PORT_init+0xc8>)
    1212:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1214:	2100      	movs	r1, #0
    1216:	200a      	movs	r0, #10
    1218:	4b12      	ldr	r3, [pc, #72]	; (1264 <QSPI_N25Q256_PORT_init+0xbc>)
    121a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    121c:	4917      	ldr	r1, [pc, #92]	; (127c <QSPI_N25Q256_PORT_init+0xd4>)
    121e:	200a      	movs	r0, #10
    1220:	4b12      	ldr	r3, [pc, #72]	; (126c <QSPI_N25Q256_PORT_init+0xc4>)
    1222:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1224:	2102      	movs	r1, #2
    1226:	200b      	movs	r0, #11
    1228:	4b0d      	ldr	r3, [pc, #52]	; (1260 <QSPI_N25Q256_PORT_init+0xb8>)
    122a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    122c:	2100      	movs	r1, #0
    122e:	200b      	movs	r0, #11
    1230:	4b0f      	ldr	r3, [pc, #60]	; (1270 <QSPI_N25Q256_PORT_init+0xc8>)
    1232:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1234:	2100      	movs	r1, #0
    1236:	200b      	movs	r0, #11
    1238:	4b0a      	ldr	r3, [pc, #40]	; (1264 <QSPI_N25Q256_PORT_init+0xbc>)
    123a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    123c:	4910      	ldr	r1, [pc, #64]	; (1280 <QSPI_N25Q256_PORT_init+0xd8>)
    123e:	200b      	movs	r0, #11
    1240:	4b0a      	ldr	r3, [pc, #40]	; (126c <QSPI_N25Q256_PORT_init+0xc4>)
    1242:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1244:	2101      	movs	r1, #1
    1246:	202a      	movs	r0, #42	; 0x2a
    1248:	4b05      	ldr	r3, [pc, #20]	; (1260 <QSPI_N25Q256_PORT_init+0xb8>)
    124a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    124c:	2100      	movs	r1, #0
    124e:	202a      	movs	r0, #42	; 0x2a
    1250:	4b04      	ldr	r3, [pc, #16]	; (1264 <QSPI_N25Q256_PORT_init+0xbc>)
    1252:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1254:	490b      	ldr	r1, [pc, #44]	; (1284 <QSPI_N25Q256_PORT_init+0xdc>)
    1256:	202a      	movs	r0, #42	; 0x2a
    1258:	4b04      	ldr	r3, [pc, #16]	; (126c <QSPI_N25Q256_PORT_init+0xc4>)
    125a:	4798      	blx	r3
}
    125c:	bf00      	nop
    125e:	bd80      	pop	{r7, pc}
    1260:	00000f49 	.word	0x00000f49
    1264:	00000ef5 	.word	0x00000ef5
    1268:	002b0007 	.word	0x002b0007
    126c:	00000f29 	.word	0x00000f29
    1270:	00000f81 	.word	0x00000f81
    1274:	00080007 	.word	0x00080007
    1278:	00090007 	.word	0x00090007
    127c:	000a0007 	.word	0x000a0007
    1280:	000b0007 	.word	0x000b0007
    1284:	002a0007 	.word	0x002a0007

00001288 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1288:	b580      	push	{r7, lr}
    128a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    128c:	4805      	ldr	r0, [pc, #20]	; (12a4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    128e:	4b06      	ldr	r3, [pc, #24]	; (12a8 <QSPI_N25Q256_CLOCK_init+0x20>)
    1290:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1292:	4804      	ldr	r0, [pc, #16]	; (12a4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1294:	4b05      	ldr	r3, [pc, #20]	; (12ac <QSPI_N25Q256_CLOCK_init+0x24>)
    1296:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1298:	4802      	ldr	r0, [pc, #8]	; (12a4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <QSPI_N25Q256_CLOCK_init+0x28>)
    129c:	4798      	blx	r3
}
    129e:	bf00      	nop
    12a0:	bd80      	pop	{r7, pc}
    12a2:	bf00      	nop
    12a4:	40000800 	.word	0x40000800
    12a8:	0000071b 	.word	0x0000071b
    12ac:	0000075b 	.word	0x0000075b
    12b0:	0000093b 	.word	0x0000093b

000012b4 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    12b8:	4b04      	ldr	r3, [pc, #16]	; (12cc <QSPI_N25Q256_init+0x18>)
    12ba:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    12bc:	4904      	ldr	r1, [pc, #16]	; (12d0 <QSPI_N25Q256_init+0x1c>)
    12be:	4805      	ldr	r0, [pc, #20]	; (12d4 <QSPI_N25Q256_init+0x20>)
    12c0:	4b05      	ldr	r3, [pc, #20]	; (12d8 <QSPI_N25Q256_init+0x24>)
    12c2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    12c4:	4b05      	ldr	r3, [pc, #20]	; (12dc <QSPI_N25Q256_init+0x28>)
    12c6:	4798      	blx	r3
}
    12c8:	bf00      	nop
    12ca:	bd80      	pop	{r7, pc}
    12cc:	00001289 	.word	0x00001289
    12d0:	42003400 	.word	0x42003400
    12d4:	20001684 	.word	0x20001684
    12d8:	00002339 	.word	0x00002339
    12dc:	000011a9 	.word	0x000011a9

000012e0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    12e0:	b580      	push	{r7, lr}
    12e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    12e4:	4802      	ldr	r0, [pc, #8]	; (12f0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    12e6:	4b03      	ldr	r3, [pc, #12]	; (12f4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    12e8:	4798      	blx	r3
}
    12ea:	bf00      	nop
    12ec:	bd80      	pop	{r7, pc}
    12ee:	bf00      	nop
    12f0:	40000800 	.word	0x40000800
    12f4:	0000079b 	.word	0x0000079b

000012f8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    12f8:	b580      	push	{r7, lr}
    12fa:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    12fc:	4b03      	ldr	r3, [pc, #12]	; (130c <DATETIME_CLOCK_init+0x14>)
    12fe:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1300:	4903      	ldr	r1, [pc, #12]	; (1310 <DATETIME_CLOCK_init+0x18>)
    1302:	4804      	ldr	r0, [pc, #16]	; (1314 <DATETIME_CLOCK_init+0x1c>)
    1304:	4b04      	ldr	r3, [pc, #16]	; (1318 <DATETIME_CLOCK_init+0x20>)
    1306:	4798      	blx	r3
}
    1308:	bf00      	nop
    130a:	bd80      	pop	{r7, pc}
    130c:	000012e1 	.word	0x000012e1
    1310:	40002400 	.word	0x40002400
    1314:	200017cc 	.word	0x200017cc
    1318:	00001ca5 	.word	0x00001ca5

0000131c <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    131c:	b580      	push	{r7, lr}
    131e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1320:	2101      	movs	r1, #1
    1322:	2010      	movs	r0, #16
    1324:	4b07      	ldr	r3, [pc, #28]	; (1344 <I2C_HEATERS_PORT_init+0x28>)
    1326:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1328:	4907      	ldr	r1, [pc, #28]	; (1348 <I2C_HEATERS_PORT_init+0x2c>)
    132a:	2010      	movs	r0, #16
    132c:	4b07      	ldr	r3, [pc, #28]	; (134c <I2C_HEATERS_PORT_init+0x30>)
    132e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1330:	2101      	movs	r1, #1
    1332:	2011      	movs	r0, #17
    1334:	4b03      	ldr	r3, [pc, #12]	; (1344 <I2C_HEATERS_PORT_init+0x28>)
    1336:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1338:	4905      	ldr	r1, [pc, #20]	; (1350 <I2C_HEATERS_PORT_init+0x34>)
    133a:	2011      	movs	r0, #17
    133c:	4b03      	ldr	r3, [pc, #12]	; (134c <I2C_HEATERS_PORT_init+0x30>)
    133e:	4798      	blx	r3
}
    1340:	bf00      	nop
    1342:	bd80      	pop	{r7, pc}
    1344:	00000ef5 	.word	0x00000ef5
    1348:	00100002 	.word	0x00100002
    134c:	00000f29 	.word	0x00000f29
    1350:	00110002 	.word	0x00110002

00001354 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1354:	b580      	push	{r7, lr}
    1356:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1358:	2242      	movs	r2, #66	; 0x42
    135a:	2108      	movs	r1, #8
    135c:	4806      	ldr	r0, [pc, #24]	; (1378 <I2C_HEATERS_CLOCK_init+0x24>)
    135e:	4b07      	ldr	r3, [pc, #28]	; (137c <I2C_HEATERS_CLOCK_init+0x28>)
    1360:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1362:	224a      	movs	r2, #74	; 0x4a
    1364:	2103      	movs	r1, #3
    1366:	4804      	ldr	r0, [pc, #16]	; (1378 <I2C_HEATERS_CLOCK_init+0x24>)
    1368:	4b04      	ldr	r3, [pc, #16]	; (137c <I2C_HEATERS_CLOCK_init+0x28>)
    136a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    136c:	4804      	ldr	r0, [pc, #16]	; (1380 <I2C_HEATERS_CLOCK_init+0x2c>)
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <I2C_HEATERS_CLOCK_init+0x30>)
    1370:	4798      	blx	r3
}
    1372:	bf00      	nop
    1374:	bd80      	pop	{r7, pc}
    1376:	bf00      	nop
    1378:	40001c00 	.word	0x40001c00
    137c:	000006d5 	.word	0x000006d5
    1380:	40000800 	.word	0x40000800
    1384:	000007db 	.word	0x000007db

00001388 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1388:	b580      	push	{r7, lr}
    138a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    138c:	4b04      	ldr	r3, [pc, #16]	; (13a0 <I2C_HEATERS_init+0x18>)
    138e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1390:	4904      	ldr	r1, [pc, #16]	; (13a4 <I2C_HEATERS_init+0x1c>)
    1392:	4805      	ldr	r0, [pc, #20]	; (13a8 <I2C_HEATERS_init+0x20>)
    1394:	4b05      	ldr	r3, [pc, #20]	; (13ac <I2C_HEATERS_init+0x24>)
    1396:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1398:	4b05      	ldr	r3, [pc, #20]	; (13b0 <I2C_HEATERS_init+0x28>)
    139a:	4798      	blx	r3
}
    139c:	bf00      	nop
    139e:	bd80      	pop	{r7, pc}
    13a0:	00001355 	.word	0x00001355
    13a4:	40003400 	.word	0x40003400
    13a8:	20001724 	.word	0x20001724
    13ac:	00002191 	.word	0x00002191
    13b0:	0000131d 	.word	0x0000131d

000013b4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    13b8:	2100      	movs	r1, #0
    13ba:	203b      	movs	r0, #59	; 0x3b
    13bc:	4b11      	ldr	r3, [pc, #68]	; (1404 <SPI_TEMP_PORT_init+0x50>)
    13be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    13c0:	2102      	movs	r1, #2
    13c2:	203b      	movs	r0, #59	; 0x3b
    13c4:	4b10      	ldr	r3, [pc, #64]	; (1408 <SPI_TEMP_PORT_init+0x54>)
    13c6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    13c8:	4910      	ldr	r1, [pc, #64]	; (140c <SPI_TEMP_PORT_init+0x58>)
    13ca:	203b      	movs	r0, #59	; 0x3b
    13cc:	4b10      	ldr	r3, [pc, #64]	; (1410 <SPI_TEMP_PORT_init+0x5c>)
    13ce:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    13d0:	2100      	movs	r1, #0
    13d2:	203a      	movs	r0, #58	; 0x3a
    13d4:	4b0b      	ldr	r3, [pc, #44]	; (1404 <SPI_TEMP_PORT_init+0x50>)
    13d6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    13d8:	2102      	movs	r1, #2
    13da:	203a      	movs	r0, #58	; 0x3a
    13dc:	4b0a      	ldr	r3, [pc, #40]	; (1408 <SPI_TEMP_PORT_init+0x54>)
    13de:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    13e0:	490c      	ldr	r1, [pc, #48]	; (1414 <SPI_TEMP_PORT_init+0x60>)
    13e2:	203a      	movs	r0, #58	; 0x3a
    13e4:	4b0a      	ldr	r3, [pc, #40]	; (1410 <SPI_TEMP_PORT_init+0x5c>)
    13e6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    13e8:	2101      	movs	r1, #1
    13ea:	203c      	movs	r0, #60	; 0x3c
    13ec:	4b06      	ldr	r3, [pc, #24]	; (1408 <SPI_TEMP_PORT_init+0x54>)
    13ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    13f0:	2100      	movs	r1, #0
    13f2:	203c      	movs	r0, #60	; 0x3c
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <SPI_TEMP_PORT_init+0x64>)
    13f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    13f8:	4908      	ldr	r1, [pc, #32]	; (141c <SPI_TEMP_PORT_init+0x68>)
    13fa:	203c      	movs	r0, #60	; 0x3c
    13fc:	4b04      	ldr	r3, [pc, #16]	; (1410 <SPI_TEMP_PORT_init+0x5c>)
    13fe:	4798      	blx	r3
}
    1400:	bf00      	nop
    1402:	bd80      	pop	{r7, pc}
    1404:	00000f81 	.word	0x00000f81
    1408:	00000f49 	.word	0x00000f49
    140c:	003b0003 	.word	0x003b0003
    1410:	00000f29 	.word	0x00000f29
    1414:	003a0003 	.word	0x003a0003
    1418:	00000ef5 	.word	0x00000ef5
    141c:	003c0003 	.word	0x003c0003

00001420 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1420:	b580      	push	{r7, lr}
    1422:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1424:	2245      	movs	r2, #69	; 0x45
    1426:	2122      	movs	r1, #34	; 0x22
    1428:	4806      	ldr	r0, [pc, #24]	; (1444 <SPI_TEMP_CLOCK_init+0x24>)
    142a:	4b07      	ldr	r3, [pc, #28]	; (1448 <SPI_TEMP_CLOCK_init+0x28>)
    142c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    142e:	224a      	movs	r2, #74	; 0x4a
    1430:	2103      	movs	r1, #3
    1432:	4804      	ldr	r0, [pc, #16]	; (1444 <SPI_TEMP_CLOCK_init+0x24>)
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <SPI_TEMP_CLOCK_init+0x28>)
    1436:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1438:	4804      	ldr	r0, [pc, #16]	; (144c <SPI_TEMP_CLOCK_init+0x2c>)
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <SPI_TEMP_CLOCK_init+0x30>)
    143c:	4798      	blx	r3
}
    143e:	bf00      	nop
    1440:	bd80      	pop	{r7, pc}
    1442:	bf00      	nop
    1444:	40001c00 	.word	0x40001c00
    1448:	000006d5 	.word	0x000006d5
    144c:	40000800 	.word	0x40000800
    1450:	0000095b 	.word	0x0000095b

00001454 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1454:	b580      	push	{r7, lr}
    1456:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1458:	4b05      	ldr	r3, [pc, #20]	; (1470 <SPI_TEMP_init+0x1c>)
    145a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    145c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1460:	4804      	ldr	r0, [pc, #16]	; (1474 <SPI_TEMP_init+0x20>)
    1462:	4b05      	ldr	r3, [pc, #20]	; (1478 <SPI_TEMP_init+0x24>)
    1464:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1466:	4b05      	ldr	r3, [pc, #20]	; (147c <SPI_TEMP_init+0x28>)
    1468:	4798      	blx	r3
}
    146a:	bf00      	nop
    146c:	bd80      	pop	{r7, pc}
    146e:	bf00      	nop
    1470:	00001421 	.word	0x00001421
    1474:	2000162c 	.word	0x2000162c
    1478:	00002449 	.word	0x00002449
    147c:	000013b5 	.word	0x000013b5

00001480 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1480:	b580      	push	{r7, lr}
    1482:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1484:	2100      	movs	r1, #0
    1486:	2017      	movs	r0, #23
    1488:	4b07      	ldr	r3, [pc, #28]	; (14a8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    148a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    148c:	4907      	ldr	r1, [pc, #28]	; (14ac <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    148e:	2017      	movs	r0, #23
    1490:	4b07      	ldr	r3, [pc, #28]	; (14b0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1492:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1494:	2100      	movs	r1, #0
    1496:	2016      	movs	r0, #22
    1498:	4b03      	ldr	r3, [pc, #12]	; (14a8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    149a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    149c:	4905      	ldr	r1, [pc, #20]	; (14b4 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    149e:	2016      	movs	r0, #22
    14a0:	4b03      	ldr	r3, [pc, #12]	; (14b0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    14a2:	4798      	blx	r3
}
    14a4:	bf00      	nop
    14a6:	bd80      	pop	{r7, pc}
    14a8:	00000ef5 	.word	0x00000ef5
    14ac:	00170003 	.word	0x00170003
    14b0:	00000f29 	.word	0x00000f29
    14b4:	00160003 	.word	0x00160003

000014b8 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14bc:	2244      	movs	r2, #68	; 0x44
    14be:	2123      	movs	r1, #35	; 0x23
    14c0:	4806      	ldr	r0, [pc, #24]	; (14dc <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    14c2:	4b07      	ldr	r3, [pc, #28]	; (14e0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    14c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14c6:	224a      	movs	r2, #74	; 0x4a
    14c8:	2103      	movs	r1, #3
    14ca:	4804      	ldr	r0, [pc, #16]	; (14dc <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    14cc:	4b04      	ldr	r3, [pc, #16]	; (14e0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    14ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    14d0:	4804      	ldr	r0, [pc, #16]	; (14e4 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    14d4:	4798      	blx	r3
}
    14d6:	bf00      	nop
    14d8:	bd80      	pop	{r7, pc}
    14da:	bf00      	nop
    14dc:	40001c00 	.word	0x40001c00
    14e0:	000006d5 	.word	0x000006d5
    14e4:	40000800 	.word	0x40000800
    14e8:	0000097b 	.word	0x0000097b

000014ec <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    14ec:	b580      	push	{r7, lr}
    14ee:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    14f0:	4b04      	ldr	r3, [pc, #16]	; (1504 <I2C_FLAPPER_VALVE_init+0x18>)
    14f2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    14f4:	4904      	ldr	r1, [pc, #16]	; (1508 <I2C_FLAPPER_VALVE_init+0x1c>)
    14f6:	4805      	ldr	r0, [pc, #20]	; (150c <I2C_FLAPPER_VALVE_init+0x20>)
    14f8:	4b05      	ldr	r3, [pc, #20]	; (1510 <I2C_FLAPPER_VALVE_init+0x24>)
    14fa:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    14fc:	4b05      	ldr	r3, [pc, #20]	; (1514 <I2C_FLAPPER_VALVE_init+0x28>)
    14fe:	4798      	blx	r3
}
    1500:	bf00      	nop
    1502:	bd80      	pop	{r7, pc}
    1504:	000014b9 	.word	0x000014b9
    1508:	43000400 	.word	0x43000400
    150c:	200016c8 	.word	0x200016c8
    1510:	00002191 	.word	0x00002191
    1514:	00001481 	.word	0x00001481

00001518 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1518:	b580      	push	{r7, lr}
    151a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    151c:	2100      	movs	r1, #0
    151e:	2044      	movs	r0, #68	; 0x44
    1520:	4b11      	ldr	r3, [pc, #68]	; (1568 <SPI_HI3593_PORT_init+0x50>)
    1522:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1524:	2102      	movs	r1, #2
    1526:	2044      	movs	r0, #68	; 0x44
    1528:	4b10      	ldr	r3, [pc, #64]	; (156c <SPI_HI3593_PORT_init+0x54>)
    152a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    152c:	4910      	ldr	r1, [pc, #64]	; (1570 <SPI_HI3593_PORT_init+0x58>)
    152e:	2044      	movs	r0, #68	; 0x44
    1530:	4b10      	ldr	r3, [pc, #64]	; (1574 <SPI_HI3593_PORT_init+0x5c>)
    1532:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1534:	2100      	movs	r1, #0
    1536:	2045      	movs	r0, #69	; 0x45
    1538:	4b0b      	ldr	r3, [pc, #44]	; (1568 <SPI_HI3593_PORT_init+0x50>)
    153a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    153c:	2102      	movs	r1, #2
    153e:	2045      	movs	r0, #69	; 0x45
    1540:	4b0a      	ldr	r3, [pc, #40]	; (156c <SPI_HI3593_PORT_init+0x54>)
    1542:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1544:	490c      	ldr	r1, [pc, #48]	; (1578 <SPI_HI3593_PORT_init+0x60>)
    1546:	2045      	movs	r0, #69	; 0x45
    1548:	4b0a      	ldr	r3, [pc, #40]	; (1574 <SPI_HI3593_PORT_init+0x5c>)
    154a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    154c:	2101      	movs	r1, #1
    154e:	2047      	movs	r0, #71	; 0x47
    1550:	4b06      	ldr	r3, [pc, #24]	; (156c <SPI_HI3593_PORT_init+0x54>)
    1552:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1554:	2100      	movs	r1, #0
    1556:	2047      	movs	r0, #71	; 0x47
    1558:	4b08      	ldr	r3, [pc, #32]	; (157c <SPI_HI3593_PORT_init+0x64>)
    155a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    155c:	4908      	ldr	r1, [pc, #32]	; (1580 <SPI_HI3593_PORT_init+0x68>)
    155e:	2047      	movs	r0, #71	; 0x47
    1560:	4b04      	ldr	r3, [pc, #16]	; (1574 <SPI_HI3593_PORT_init+0x5c>)
    1562:	4798      	blx	r3
}
    1564:	bf00      	nop
    1566:	bd80      	pop	{r7, pc}
    1568:	00000f81 	.word	0x00000f81
    156c:	00000f49 	.word	0x00000f49
    1570:	00440002 	.word	0x00440002
    1574:	00000f29 	.word	0x00000f29
    1578:	00450002 	.word	0x00450002
    157c:	00000ef5 	.word	0x00000ef5
    1580:	00470002 	.word	0x00470002

00001584 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1584:	b580      	push	{r7, lr}
    1586:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1588:	2242      	movs	r2, #66	; 0x42
    158a:	2124      	movs	r1, #36	; 0x24
    158c:	4806      	ldr	r0, [pc, #24]	; (15a8 <SPI_HI3593_CLOCK_init+0x24>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <SPI_HI3593_CLOCK_init+0x28>)
    1590:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1592:	224a      	movs	r2, #74	; 0x4a
    1594:	2103      	movs	r1, #3
    1596:	4804      	ldr	r0, [pc, #16]	; (15a8 <SPI_HI3593_CLOCK_init+0x24>)
    1598:	4b04      	ldr	r3, [pc, #16]	; (15ac <SPI_HI3593_CLOCK_init+0x28>)
    159a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    159c:	4804      	ldr	r0, [pc, #16]	; (15b0 <SPI_HI3593_CLOCK_init+0x2c>)
    159e:	4b05      	ldr	r3, [pc, #20]	; (15b4 <SPI_HI3593_CLOCK_init+0x30>)
    15a0:	4798      	blx	r3
}
    15a2:	bf00      	nop
    15a4:	bd80      	pop	{r7, pc}
    15a6:	bf00      	nop
    15a8:	40001c00 	.word	0x40001c00
    15ac:	000006d5 	.word	0x000006d5
    15b0:	40000800 	.word	0x40000800
    15b4:	0000099b 	.word	0x0000099b

000015b8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    15b8:	b580      	push	{r7, lr}
    15ba:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    15bc:	4b04      	ldr	r3, [pc, #16]	; (15d0 <SPI_HI3593_init+0x18>)
    15be:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    15c0:	4904      	ldr	r1, [pc, #16]	; (15d4 <SPI_HI3593_init+0x1c>)
    15c2:	4805      	ldr	r0, [pc, #20]	; (15d8 <SPI_HI3593_init+0x20>)
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <SPI_HI3593_init+0x24>)
    15c6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    15c8:	4b05      	ldr	r3, [pc, #20]	; (15e0 <SPI_HI3593_init+0x28>)
    15ca:	4798      	blx	r3
}
    15cc:	bf00      	nop
    15ce:	bd80      	pop	{r7, pc}
    15d0:	00001585 	.word	0x00001585
    15d4:	43000800 	.word	0x43000800
    15d8:	20001614 	.word	0x20001614
    15dc:	00002449 	.word	0x00002449
    15e0:	00001519 	.word	0x00001519

000015e4 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    15e8:	2100      	movs	r1, #0
    15ea:	2068      	movs	r0, #104	; 0x68
    15ec:	4b07      	ldr	r3, [pc, #28]	; (160c <I2C_FANS_PORT_init+0x28>)
    15ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    15f0:	4907      	ldr	r1, [pc, #28]	; (1610 <I2C_FANS_PORT_init+0x2c>)
    15f2:	2068      	movs	r0, #104	; 0x68
    15f4:	4b07      	ldr	r3, [pc, #28]	; (1614 <I2C_FANS_PORT_init+0x30>)
    15f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    15f8:	2100      	movs	r1, #0
    15fa:	2069      	movs	r0, #105	; 0x69
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <I2C_FANS_PORT_init+0x28>)
    15fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1600:	4905      	ldr	r1, [pc, #20]	; (1618 <I2C_FANS_PORT_init+0x34>)
    1602:	2069      	movs	r0, #105	; 0x69
    1604:	4b03      	ldr	r3, [pc, #12]	; (1614 <I2C_FANS_PORT_init+0x30>)
    1606:	4798      	blx	r3
}
    1608:	bf00      	nop
    160a:	bd80      	pop	{r7, pc}
    160c:	00000ef5 	.word	0x00000ef5
    1610:	00680002 	.word	0x00680002
    1614:	00000f29 	.word	0x00000f29
    1618:	00690002 	.word	0x00690002

0000161c <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    161c:	b580      	push	{r7, lr}
    161e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1620:	2244      	movs	r2, #68	; 0x44
    1622:	2125      	movs	r1, #37	; 0x25
    1624:	4806      	ldr	r0, [pc, #24]	; (1640 <I2C_FANS_CLOCK_init+0x24>)
    1626:	4b07      	ldr	r3, [pc, #28]	; (1644 <I2C_FANS_CLOCK_init+0x28>)
    1628:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    162a:	224a      	movs	r2, #74	; 0x4a
    162c:	2103      	movs	r1, #3
    162e:	4804      	ldr	r0, [pc, #16]	; (1640 <I2C_FANS_CLOCK_init+0x24>)
    1630:	4b04      	ldr	r3, [pc, #16]	; (1644 <I2C_FANS_CLOCK_init+0x28>)
    1632:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1634:	4804      	ldr	r0, [pc, #16]	; (1648 <I2C_FANS_CLOCK_init+0x2c>)
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <I2C_FANS_CLOCK_init+0x30>)
    1638:	4798      	blx	r3
}
    163a:	bf00      	nop
    163c:	bd80      	pop	{r7, pc}
    163e:	bf00      	nop
    1640:	40001c00 	.word	0x40001c00
    1644:	000006d5 	.word	0x000006d5
    1648:	40000800 	.word	0x40000800
    164c:	000009bb 	.word	0x000009bb

00001650 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1650:	b580      	push	{r7, lr}
    1652:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1654:	4b04      	ldr	r3, [pc, #16]	; (1668 <I2C_FANS_init+0x18>)
    1656:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1658:	4904      	ldr	r1, [pc, #16]	; (166c <I2C_FANS_init+0x1c>)
    165a:	4805      	ldr	r0, [pc, #20]	; (1670 <I2C_FANS_init+0x20>)
    165c:	4b05      	ldr	r3, [pc, #20]	; (1674 <I2C_FANS_init+0x24>)
    165e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1660:	4b05      	ldr	r3, [pc, #20]	; (1678 <I2C_FANS_init+0x28>)
    1662:	4798      	blx	r3
}
    1664:	bf00      	nop
    1666:	bd80      	pop	{r7, pc}
    1668:	0000161d 	.word	0x0000161d
    166c:	43000c00 	.word	0x43000c00
    1670:	20001644 	.word	0x20001644
    1674:	00002191 	.word	0x00002191
    1678:	000015e5 	.word	0x000015e5

0000167c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    167c:	b580      	push	{r7, lr}
    167e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1680:	4808      	ldr	r0, [pc, #32]	; (16a4 <TIMER_USB_init+0x28>)
    1682:	4b09      	ldr	r3, [pc, #36]	; (16a8 <TIMER_USB_init+0x2c>)
    1684:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1686:	2243      	movs	r2, #67	; 0x43
    1688:	2109      	movs	r1, #9
    168a:	4808      	ldr	r0, [pc, #32]	; (16ac <TIMER_USB_init+0x30>)
    168c:	4b08      	ldr	r3, [pc, #32]	; (16b0 <TIMER_USB_init+0x34>)
    168e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <TIMER_USB_init+0x38>)
    1692:	4798      	blx	r3
    1694:	4603      	mov	r3, r0
    1696:	461a      	mov	r2, r3
    1698:	4907      	ldr	r1, [pc, #28]	; (16b8 <TIMER_USB_init+0x3c>)
    169a:	4808      	ldr	r0, [pc, #32]	; (16bc <TIMER_USB_init+0x40>)
    169c:	4b08      	ldr	r3, [pc, #32]	; (16c0 <TIMER_USB_init+0x44>)
    169e:	4798      	blx	r3
}
    16a0:	bf00      	nop
    16a2:	bd80      	pop	{r7, pc}
    16a4:	40000800 	.word	0x40000800
    16a8:	000007fb 	.word	0x000007fb
    16ac:	40001c00 	.word	0x40001c00
    16b0:	000006d5 	.word	0x000006d5
    16b4:	00007e25 	.word	0x00007e25
    16b8:	40003800 	.word	0x40003800
    16bc:	2000178c 	.word	0x2000178c
    16c0:	00002619 	.word	0x00002619

000016c4 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    16c8:	4808      	ldr	r0, [pc, #32]	; (16ec <TIMER_ARINC_init+0x28>)
    16ca:	4b09      	ldr	r3, [pc, #36]	; (16f0 <TIMER_ARINC_init+0x2c>)
    16cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16ce:	2244      	movs	r2, #68	; 0x44
    16d0:	211a      	movs	r1, #26
    16d2:	4808      	ldr	r0, [pc, #32]	; (16f4 <TIMER_ARINC_init+0x30>)
    16d4:	4b08      	ldr	r3, [pc, #32]	; (16f8 <TIMER_ARINC_init+0x34>)
    16d6:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    16d8:	4b08      	ldr	r3, [pc, #32]	; (16fc <TIMER_ARINC_init+0x38>)
    16da:	4798      	blx	r3
    16dc:	4603      	mov	r3, r0
    16de:	461a      	mov	r2, r3
    16e0:	4907      	ldr	r1, [pc, #28]	; (1700 <TIMER_ARINC_init+0x3c>)
    16e2:	4808      	ldr	r0, [pc, #32]	; (1704 <TIMER_ARINC_init+0x40>)
    16e4:	4b08      	ldr	r3, [pc, #32]	; (1708 <TIMER_ARINC_init+0x44>)
    16e6:	4798      	blx	r3
}
    16e8:	bf00      	nop
    16ea:	bd80      	pop	{r7, pc}
    16ec:	40000800 	.word	0x40000800
    16f0:	000008bb 	.word	0x000008bb
    16f4:	40001c00 	.word	0x40001c00
    16f8:	000006d5 	.word	0x000006d5
    16fc:	00007e25 	.word	0x00007e25
    1700:	4101a000 	.word	0x4101a000
    1704:	2000176c 	.word	0x2000176c
    1708:	00002619 	.word	0x00002619

0000170c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    170c:	b580      	push	{r7, lr}
    170e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1710:	4808      	ldr	r0, [pc, #32]	; (1734 <TIMER_MAINTENANCE_init+0x28>)
    1712:	4b09      	ldr	r3, [pc, #36]	; (1738 <TIMER_MAINTENANCE_init+0x2c>)
    1714:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1716:	2246      	movs	r2, #70	; 0x46
    1718:	211e      	movs	r1, #30
    171a:	4808      	ldr	r0, [pc, #32]	; (173c <TIMER_MAINTENANCE_init+0x30>)
    171c:	4b08      	ldr	r3, [pc, #32]	; (1740 <TIMER_MAINTENANCE_init+0x34>)
    171e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1720:	4b08      	ldr	r3, [pc, #32]	; (1744 <TIMER_MAINTENANCE_init+0x38>)
    1722:	4798      	blx	r3
    1724:	4603      	mov	r3, r0
    1726:	461a      	mov	r2, r3
    1728:	4907      	ldr	r1, [pc, #28]	; (1748 <TIMER_MAINTENANCE_init+0x3c>)
    172a:	4808      	ldr	r0, [pc, #32]	; (174c <TIMER_MAINTENANCE_init+0x40>)
    172c:	4b08      	ldr	r3, [pc, #32]	; (1750 <TIMER_MAINTENANCE_init+0x44>)
    172e:	4798      	blx	r3
}
    1730:	bf00      	nop
    1732:	bd80      	pop	{r7, pc}
    1734:	40000800 	.word	0x40000800
    1738:	000008fb 	.word	0x000008fb
    173c:	40001c00 	.word	0x40001c00
    1740:	000006d5 	.word	0x000006d5
    1744:	00007e25 	.word	0x00007e25
    1748:	42001400 	.word	0x42001400
    174c:	20001664 	.word	0x20001664
    1750:	00002619 	.word	0x00002619

00001754 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1758:	4808      	ldr	r0, [pc, #32]	; (177c <TIMER_INTERFACE_init+0x28>)
    175a:	4b09      	ldr	r3, [pc, #36]	; (1780 <TIMER_INTERFACE_init+0x2c>)
    175c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    175e:	2246      	movs	r2, #70	; 0x46
    1760:	211e      	movs	r1, #30
    1762:	4808      	ldr	r0, [pc, #32]	; (1784 <TIMER_INTERFACE_init+0x30>)
    1764:	4b08      	ldr	r3, [pc, #32]	; (1788 <TIMER_INTERFACE_init+0x34>)
    1766:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1768:	4b08      	ldr	r3, [pc, #32]	; (178c <TIMER_INTERFACE_init+0x38>)
    176a:	4798      	blx	r3
    176c:	4603      	mov	r3, r0
    176e:	461a      	mov	r2, r3
    1770:	4907      	ldr	r1, [pc, #28]	; (1790 <TIMER_INTERFACE_init+0x3c>)
    1772:	4808      	ldr	r0, [pc, #32]	; (1794 <TIMER_INTERFACE_init+0x40>)
    1774:	4b08      	ldr	r3, [pc, #32]	; (1798 <TIMER_INTERFACE_init+0x44>)
    1776:	4798      	blx	r3
}
    1778:	bf00      	nop
    177a:	bd80      	pop	{r7, pc}
    177c:	40000800 	.word	0x40000800
    1780:	0000091b 	.word	0x0000091b
    1784:	40001c00 	.word	0x40001c00
    1788:	000006d5 	.word	0x000006d5
    178c:	00007e25 	.word	0x00007e25
    1790:	42001800 	.word	0x42001800
    1794:	200016a8 	.word	0x200016a8
    1798:	00002619 	.word	0x00002619

0000179c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    179c:	b580      	push	{r7, lr}
    179e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    17a0:	4808      	ldr	r0, [pc, #32]	; (17c4 <TIMER_EVENT_init+0x28>)
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <TIMER_EVENT_init+0x2c>)
    17a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17a6:	2246      	movs	r2, #70	; 0x46
    17a8:	2127      	movs	r1, #39	; 0x27
    17aa:	4808      	ldr	r0, [pc, #32]	; (17cc <TIMER_EVENT_init+0x30>)
    17ac:	4b08      	ldr	r3, [pc, #32]	; (17d0 <TIMER_EVENT_init+0x34>)
    17ae:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    17b0:	4b08      	ldr	r3, [pc, #32]	; (17d4 <TIMER_EVENT_init+0x38>)
    17b2:	4798      	blx	r3
    17b4:	4603      	mov	r3, r0
    17b6:	461a      	mov	r2, r3
    17b8:	4907      	ldr	r1, [pc, #28]	; (17d8 <TIMER_EVENT_init+0x3c>)
    17ba:	4808      	ldr	r0, [pc, #32]	; (17dc <TIMER_EVENT_init+0x40>)
    17bc:	4b08      	ldr	r3, [pc, #32]	; (17e0 <TIMER_EVENT_init+0x44>)
    17be:	4798      	blx	r3
}
    17c0:	bf00      	nop
    17c2:	bd80      	pop	{r7, pc}
    17c4:	40000800 	.word	0x40000800
    17c8:	000009db 	.word	0x000009db
    17cc:	40001c00 	.word	0x40001c00
    17d0:	000006d5 	.word	0x000006d5
    17d4:	00007e25 	.word	0x00007e25
    17d8:	43001400 	.word	0x43001400
    17dc:	20001688 	.word	0x20001688
    17e0:	00002619 	.word	0x00002619

000017e4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    17e4:	b480      	push	{r7}
    17e6:	af00      	add	r7, sp, #0
}
    17e8:	bf00      	nop
    17ea:	46bd      	mov	sp, r7
    17ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    17f0:	4770      	bx	lr
	...

000017f4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    17f8:	4804      	ldr	r0, [pc, #16]	; (180c <LIVE_PULSE_CLOCK_init+0x18>)
    17fa:	4b05      	ldr	r3, [pc, #20]	; (1810 <LIVE_PULSE_CLOCK_init+0x1c>)
    17fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17fe:	2240      	movs	r2, #64	; 0x40
    1800:	2127      	movs	r1, #39	; 0x27
    1802:	4804      	ldr	r0, [pc, #16]	; (1814 <LIVE_PULSE_CLOCK_init+0x20>)
    1804:	4b04      	ldr	r3, [pc, #16]	; (1818 <LIVE_PULSE_CLOCK_init+0x24>)
    1806:	4798      	blx	r3
}
    1808:	bf00      	nop
    180a:	bd80      	pop	{r7, pc}
    180c:	40000800 	.word	0x40000800
    1810:	000009fb 	.word	0x000009fb
    1814:	40001c00 	.word	0x40001c00
    1818:	000006d5 	.word	0x000006d5

0000181c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    181c:	b580      	push	{r7, lr}
    181e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1820:	4b06      	ldr	r3, [pc, #24]	; (183c <LIVE_PULSE_init+0x20>)
    1822:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1824:	4b06      	ldr	r3, [pc, #24]	; (1840 <LIVE_PULSE_init+0x24>)
    1826:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1828:	4b06      	ldr	r3, [pc, #24]	; (1844 <LIVE_PULSE_init+0x28>)
    182a:	4798      	blx	r3
    182c:	4603      	mov	r3, r0
    182e:	461a      	mov	r2, r3
    1830:	4905      	ldr	r1, [pc, #20]	; (1848 <LIVE_PULSE_init+0x2c>)
    1832:	4806      	ldr	r0, [pc, #24]	; (184c <LIVE_PULSE_init+0x30>)
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <LIVE_PULSE_init+0x34>)
    1836:	4798      	blx	r3
}
    1838:	bf00      	nop
    183a:	bd80      	pop	{r7, pc}
    183c:	000017f5 	.word	0x000017f5
    1840:	000017e5 	.word	0x000017e5
    1844:	00007e39 	.word	0x00007e39
    1848:	43001800 	.word	0x43001800
    184c:	200016e8 	.word	0x200016e8
    1850:	0000228d 	.word	0x0000228d

00001854 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1858:	4804      	ldr	r0, [pc, #16]	; (186c <TIMER_HVAC_CLOCK_init+0x18>)
    185a:	4b05      	ldr	r3, [pc, #20]	; (1870 <TIMER_HVAC_CLOCK_init+0x1c>)
    185c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    185e:	2244      	movs	r2, #68	; 0x44
    1860:	2119      	movs	r1, #25
    1862:	4804      	ldr	r0, [pc, #16]	; (1874 <TIMER_HVAC_CLOCK_init+0x20>)
    1864:	4b04      	ldr	r3, [pc, #16]	; (1878 <TIMER_HVAC_CLOCK_init+0x24>)
    1866:	4798      	blx	r3
}
    1868:	bf00      	nop
    186a:	bd80      	pop	{r7, pc}
    186c:	40000800 	.word	0x40000800
    1870:	0000087b 	.word	0x0000087b
    1874:	40001c00 	.word	0x40001c00
    1878:	000006d5 	.word	0x000006d5

0000187c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    187c:	b580      	push	{r7, lr}
    187e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1880:	4b05      	ldr	r3, [pc, #20]	; (1898 <TIMER_HVAC_init+0x1c>)
    1882:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1884:	4b05      	ldr	r3, [pc, #20]	; (189c <TIMER_HVAC_init+0x20>)
    1886:	4798      	blx	r3
    1888:	4603      	mov	r3, r0
    188a:	461a      	mov	r2, r3
    188c:	4904      	ldr	r1, [pc, #16]	; (18a0 <TIMER_HVAC_init+0x24>)
    188e:	4805      	ldr	r0, [pc, #20]	; (18a4 <TIMER_HVAC_init+0x28>)
    1890:	4b05      	ldr	r3, [pc, #20]	; (18a8 <TIMER_HVAC_init+0x2c>)
    1892:	4798      	blx	r3
}
    1894:	bf00      	nop
    1896:	bd80      	pop	{r7, pc}
    1898:	00001855 	.word	0x00001855
    189c:	00007209 	.word	0x00007209
    18a0:	41016000 	.word	0x41016000
    18a4:	200017ac 	.word	0x200017ac
    18a8:	00002619 	.word	0x00002619

000018ac <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    18b0:	4804      	ldr	r0, [pc, #16]	; (18c4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    18b2:	4b05      	ldr	r3, [pc, #20]	; (18c8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    18b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18b6:	2244      	movs	r2, #68	; 0x44
    18b8:	2119      	movs	r1, #25
    18ba:	4804      	ldr	r0, [pc, #16]	; (18cc <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    18bc:	4b04      	ldr	r3, [pc, #16]	; (18d0 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    18be:	4798      	blx	r3
}
    18c0:	bf00      	nop
    18c2:	bd80      	pop	{r7, pc}
    18c4:	40000800 	.word	0x40000800
    18c8:	0000089b 	.word	0x0000089b
    18cc:	40001c00 	.word	0x40001c00
    18d0:	000006d5 	.word	0x000006d5

000018d4 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    18d4:	b580      	push	{r7, lr}
    18d6:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    18d8:	4b05      	ldr	r3, [pc, #20]	; (18f0 <TIMER_TEMPERATURES_init+0x1c>)
    18da:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    18dc:	4b05      	ldr	r3, [pc, #20]	; (18f4 <TIMER_TEMPERATURES_init+0x20>)
    18de:	4798      	blx	r3
    18e0:	4603      	mov	r3, r0
    18e2:	461a      	mov	r2, r3
    18e4:	4904      	ldr	r1, [pc, #16]	; (18f8 <TIMER_TEMPERATURES_init+0x24>)
    18e6:	4805      	ldr	r0, [pc, #20]	; (18fc <TIMER_TEMPERATURES_init+0x28>)
    18e8:	4b05      	ldr	r3, [pc, #20]	; (1900 <TIMER_TEMPERATURES_init+0x2c>)
    18ea:	4798      	blx	r3
}
    18ec:	bf00      	nop
    18ee:	bd80      	pop	{r7, pc}
    18f0:	000018ad 	.word	0x000018ad
    18f4:	00007209 	.word	0x00007209
    18f8:	41018000 	.word	0x41018000
    18fc:	200015f4 	.word	0x200015f4
    1900:	00002619 	.word	0x00002619

00001904 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1904:	b580      	push	{r7, lr}
    1906:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <TIMER_CCU_CLOCK_init+0x18>)
    190a:	4b05      	ldr	r3, [pc, #20]	; (1920 <TIMER_CCU_CLOCK_init+0x1c>)
    190c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    190e:	2240      	movs	r2, #64	; 0x40
    1910:	211d      	movs	r1, #29
    1912:	4804      	ldr	r0, [pc, #16]	; (1924 <TIMER_CCU_CLOCK_init+0x20>)
    1914:	4b04      	ldr	r3, [pc, #16]	; (1928 <TIMER_CCU_CLOCK_init+0x24>)
    1916:	4798      	blx	r3
}
    1918:	bf00      	nop
    191a:	bd80      	pop	{r7, pc}
    191c:	40000800 	.word	0x40000800
    1920:	000008db 	.word	0x000008db
    1924:	40001c00 	.word	0x40001c00
    1928:	000006d5 	.word	0x000006d5

0000192c <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    192c:	b580      	push	{r7, lr}
    192e:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <TIMER_CCU_init+0x1c>)
    1932:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <TIMER_CCU_init+0x20>)
    1936:	4798      	blx	r3
    1938:	4603      	mov	r3, r0
    193a:	461a      	mov	r2, r3
    193c:	4904      	ldr	r1, [pc, #16]	; (1950 <TIMER_CCU_init+0x24>)
    193e:	4805      	ldr	r0, [pc, #20]	; (1954 <TIMER_CCU_init+0x28>)
    1940:	4b05      	ldr	r3, [pc, #20]	; (1958 <TIMER_CCU_init+0x2c>)
    1942:	4798      	blx	r3
}
    1944:	bf00      	nop
    1946:	bd80      	pop	{r7, pc}
    1948:	00001905 	.word	0x00001905
    194c:	00007209 	.word	0x00007209
    1950:	42000c00 	.word	0x42000c00
    1954:	20001704 	.word	0x20001704
    1958:	00002619 	.word	0x00002619

0000195c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    195c:	b580      	push	{r7, lr}
    195e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1960:	2102      	movs	r1, #2
    1962:	2018      	movs	r0, #24
    1964:	4b0f      	ldr	r3, [pc, #60]	; (19a4 <CDCUSB_PORT_init+0x48>)
    1966:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1968:	2100      	movs	r1, #0
    196a:	2018      	movs	r0, #24
    196c:	4b0e      	ldr	r3, [pc, #56]	; (19a8 <CDCUSB_PORT_init+0x4c>)
    196e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1970:	2100      	movs	r1, #0
    1972:	2018      	movs	r0, #24
    1974:	4b0d      	ldr	r3, [pc, #52]	; (19ac <CDCUSB_PORT_init+0x50>)
    1976:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1978:	490d      	ldr	r1, [pc, #52]	; (19b0 <CDCUSB_PORT_init+0x54>)
    197a:	2018      	movs	r0, #24
    197c:	4b0d      	ldr	r3, [pc, #52]	; (19b4 <CDCUSB_PORT_init+0x58>)
    197e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1980:	2102      	movs	r1, #2
    1982:	2019      	movs	r0, #25
    1984:	4b07      	ldr	r3, [pc, #28]	; (19a4 <CDCUSB_PORT_init+0x48>)
    1986:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1988:	2100      	movs	r1, #0
    198a:	2019      	movs	r0, #25
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <CDCUSB_PORT_init+0x4c>)
    198e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1990:	2100      	movs	r1, #0
    1992:	2019      	movs	r0, #25
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <CDCUSB_PORT_init+0x50>)
    1996:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1998:	4907      	ldr	r1, [pc, #28]	; (19b8 <CDCUSB_PORT_init+0x5c>)
    199a:	2019      	movs	r0, #25
    199c:	4b05      	ldr	r3, [pc, #20]	; (19b4 <CDCUSB_PORT_init+0x58>)
    199e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    19a0:	bf00      	nop
    19a2:	bd80      	pop	{r7, pc}
    19a4:	00000f49 	.word	0x00000f49
    19a8:	00000f81 	.word	0x00000f81
    19ac:	00000ef5 	.word	0x00000ef5
    19b0:	00180007 	.word	0x00180007
    19b4:	00000f29 	.word	0x00000f29
    19b8:	00190007 	.word	0x00190007

000019bc <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    19bc:	b580      	push	{r7, lr}
    19be:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    19c0:	2242      	movs	r2, #66	; 0x42
    19c2:	210a      	movs	r1, #10
    19c4:	4805      	ldr	r0, [pc, #20]	; (19dc <CDCUSB_CLOCK_init+0x20>)
    19c6:	4b06      	ldr	r3, [pc, #24]	; (19e0 <CDCUSB_CLOCK_init+0x24>)
    19c8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    19ca:	4806      	ldr	r0, [pc, #24]	; (19e4 <CDCUSB_CLOCK_init+0x28>)
    19cc:	4b06      	ldr	r3, [pc, #24]	; (19e8 <CDCUSB_CLOCK_init+0x2c>)
    19ce:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    19d0:	4804      	ldr	r0, [pc, #16]	; (19e4 <CDCUSB_CLOCK_init+0x28>)
    19d2:	4b06      	ldr	r3, [pc, #24]	; (19ec <CDCUSB_CLOCK_init+0x30>)
    19d4:	4798      	blx	r3
}
    19d6:	bf00      	nop
    19d8:	bd80      	pop	{r7, pc}
    19da:	bf00      	nop
    19dc:	40001c00 	.word	0x40001c00
    19e0:	000006d5 	.word	0x000006d5
    19e4:	40000800 	.word	0x40000800
    19e8:	000006fb 	.word	0x000006fb
    19ec:	0000081b 	.word	0x0000081b

000019f0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    19f0:	b580      	push	{r7, lr}
    19f2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    19f4:	4b03      	ldr	r3, [pc, #12]	; (1a04 <CDCUSB_init+0x14>)
    19f6:	4798      	blx	r3
	usb_d_init();
    19f8:	4b03      	ldr	r3, [pc, #12]	; (1a08 <CDCUSB_init+0x18>)
    19fa:	4798      	blx	r3
	CDCUSB_PORT_init();
    19fc:	4b03      	ldr	r3, [pc, #12]	; (1a0c <CDCUSB_init+0x1c>)
    19fe:	4798      	blx	r3
}
    1a00:	bf00      	nop
    1a02:	bd80      	pop	{r7, pc}
    1a04:	000019bd 	.word	0x000019bd
    1a08:	00002e75 	.word	0x00002e75
    1a0c:	0000195d 	.word	0x0000195d

00001a10 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1a10:	b580      	push	{r7, lr}
    1a12:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1a14:	4802      	ldr	r0, [pc, #8]	; (1a20 <WATCHDOG_CLOCK_init+0x10>)
    1a16:	4b03      	ldr	r3, [pc, #12]	; (1a24 <WATCHDOG_CLOCK_init+0x14>)
    1a18:	4798      	blx	r3
}
    1a1a:	bf00      	nop
    1a1c:	bd80      	pop	{r7, pc}
    1a1e:	bf00      	nop
    1a20:	40000800 	.word	0x40000800
    1a24:	0000077b 	.word	0x0000077b

00001a28 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1a2c:	4b03      	ldr	r3, [pc, #12]	; (1a3c <WATCHDOG_init+0x14>)
    1a2e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1a30:	4903      	ldr	r1, [pc, #12]	; (1a40 <WATCHDOG_init+0x18>)
    1a32:	4804      	ldr	r0, [pc, #16]	; (1a44 <WATCHDOG_init+0x1c>)
    1a34:	4b04      	ldr	r3, [pc, #16]	; (1a48 <WATCHDOG_init+0x20>)
    1a36:	4798      	blx	r3
}
    1a38:	bf00      	nop
    1a3a:	bd80      	pop	{r7, pc}
    1a3c:	00001a11 	.word	0x00001a11
    1a40:	40002000 	.word	0x40002000
    1a44:	200017ec 	.word	0x200017ec
    1a48:	00000fc9 	.word	0x00000fc9

00001a4c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1a50:	4904      	ldr	r1, [pc, #16]	; (1a64 <CAN_CCU_PORT_init+0x18>)
    1a52:	202d      	movs	r0, #45	; 0x2d
    1a54:	4b04      	ldr	r3, [pc, #16]	; (1a68 <CAN_CCU_PORT_init+0x1c>)
    1a56:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1a58:	4904      	ldr	r1, [pc, #16]	; (1a6c <CAN_CCU_PORT_init+0x20>)
    1a5a:	202c      	movs	r0, #44	; 0x2c
    1a5c:	4b02      	ldr	r3, [pc, #8]	; (1a68 <CAN_CCU_PORT_init+0x1c>)
    1a5e:	4798      	blx	r3
}
    1a60:	bf00      	nop
    1a62:	bd80      	pop	{r7, pc}
    1a64:	002d0007 	.word	0x002d0007
    1a68:	00000f29 	.word	0x00000f29
    1a6c:	002c0007 	.word	0x002c0007

00001a70 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1a74:	4807      	ldr	r0, [pc, #28]	; (1a94 <CAN_CCU_init+0x24>)
    1a76:	4b08      	ldr	r3, [pc, #32]	; (1a98 <CAN_CCU_init+0x28>)
    1a78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a7a:	2249      	movs	r2, #73	; 0x49
    1a7c:	211c      	movs	r1, #28
    1a7e:	4807      	ldr	r0, [pc, #28]	; (1a9c <CAN_CCU_init+0x2c>)
    1a80:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <CAN_CCU_init+0x30>)
    1a82:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1a84:	4907      	ldr	r1, [pc, #28]	; (1aa4 <CAN_CCU_init+0x34>)
    1a86:	4808      	ldr	r0, [pc, #32]	; (1aa8 <CAN_CCU_init+0x38>)
    1a88:	4b08      	ldr	r3, [pc, #32]	; (1aac <CAN_CCU_init+0x3c>)
    1a8a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1a8c:	4b08      	ldr	r3, [pc, #32]	; (1ab0 <CAN_CCU_init+0x40>)
    1a8e:	4798      	blx	r3
}
    1a90:	bf00      	nop
    1a92:	bd80      	pop	{r7, pc}
    1a94:	40000800 	.word	0x40000800
    1a98:	0000073b 	.word	0x0000073b
    1a9c:	40001c00 	.word	0x40001c00
    1aa0:	000006d5 	.word	0x000006d5
    1aa4:	42000400 	.word	0x42000400
    1aa8:	20001744 	.word	0x20001744
    1aac:	00001d15 	.word	0x00001d15
    1ab0:	00001a4d 	.word	0x00001a4d

00001ab4 <system_init>:

void system_init(void)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	af00      	add	r7, sp, #0
	init_mcu();
    1ab8:	4b5f      	ldr	r3, [pc, #380]	; (1c38 <system_init+0x184>)
    1aba:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1abc:	2100      	movs	r1, #0
    1abe:	2007      	movs	r0, #7
    1ac0:	4b5e      	ldr	r3, [pc, #376]	; (1c3c <system_init+0x188>)
    1ac2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1ac4:	2102      	movs	r1, #2
    1ac6:	2007      	movs	r0, #7
    1ac8:	4b5d      	ldr	r3, [pc, #372]	; (1c40 <system_init+0x18c>)
    1aca:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1acc:	f04f 31ff 	mov.w	r1, #4294967295
    1ad0:	2007      	movs	r0, #7
    1ad2:	4b5c      	ldr	r3, [pc, #368]	; (1c44 <system_init+0x190>)
    1ad4:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1ad6:	2101      	movs	r1, #1
    1ad8:	200f      	movs	r0, #15
    1ada:	4b58      	ldr	r3, [pc, #352]	; (1c3c <system_init+0x188>)
    1adc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1ade:	2102      	movs	r1, #2
    1ae0:	200f      	movs	r0, #15
    1ae2:	4b57      	ldr	r3, [pc, #348]	; (1c40 <system_init+0x18c>)
    1ae4:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1ae6:	f04f 31ff 	mov.w	r1, #4294967295
    1aea:	200f      	movs	r0, #15
    1aec:	4b55      	ldr	r3, [pc, #340]	; (1c44 <system_init+0x190>)
    1aee:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1af0:	2101      	movs	r1, #1
    1af2:	2013      	movs	r0, #19
    1af4:	4b51      	ldr	r3, [pc, #324]	; (1c3c <system_init+0x188>)
    1af6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1af8:	2102      	movs	r1, #2
    1afa:	2013      	movs	r0, #19
    1afc:	4b50      	ldr	r3, [pc, #320]	; (1c40 <system_init+0x18c>)
    1afe:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1b00:	f04f 31ff 	mov.w	r1, #4294967295
    1b04:	2013      	movs	r0, #19
    1b06:	4b4f      	ldr	r3, [pc, #316]	; (1c44 <system_init+0x190>)
    1b08:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1b0a:	2101      	movs	r1, #1
    1b0c:	201b      	movs	r0, #27
    1b0e:	4b4b      	ldr	r3, [pc, #300]	; (1c3c <system_init+0x188>)
    1b10:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1b12:	2102      	movs	r1, #2
    1b14:	201b      	movs	r0, #27
    1b16:	4b4a      	ldr	r3, [pc, #296]	; (1c40 <system_init+0x18c>)
    1b18:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1b1a:	f04f 31ff 	mov.w	r1, #4294967295
    1b1e:	201b      	movs	r0, #27
    1b20:	4b48      	ldr	r3, [pc, #288]	; (1c44 <system_init+0x190>)
    1b22:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1b24:	2101      	movs	r1, #1
    1b26:	2027      	movs	r0, #39	; 0x27
    1b28:	4b44      	ldr	r3, [pc, #272]	; (1c3c <system_init+0x188>)
    1b2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1b2c:	2102      	movs	r1, #2
    1b2e:	2027      	movs	r0, #39	; 0x27
    1b30:	4b43      	ldr	r3, [pc, #268]	; (1c40 <system_init+0x18c>)
    1b32:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1b34:	f04f 31ff 	mov.w	r1, #4294967295
    1b38:	2027      	movs	r0, #39	; 0x27
    1b3a:	4b42      	ldr	r3, [pc, #264]	; (1c44 <system_init+0x190>)
    1b3c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1b3e:	2101      	movs	r1, #1
    1b40:	203d      	movs	r0, #61	; 0x3d
    1b42:	4b3e      	ldr	r3, [pc, #248]	; (1c3c <system_init+0x188>)
    1b44:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1b46:	2102      	movs	r1, #2
    1b48:	203d      	movs	r0, #61	; 0x3d
    1b4a:	4b3d      	ldr	r3, [pc, #244]	; (1c40 <system_init+0x18c>)
    1b4c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1b4e:	f04f 31ff 	mov.w	r1, #4294967295
    1b52:	203d      	movs	r0, #61	; 0x3d
    1b54:	4b3b      	ldr	r3, [pc, #236]	; (1c44 <system_init+0x190>)
    1b56:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1b58:	2101      	movs	r1, #1
    1b5a:	203f      	movs	r0, #63	; 0x3f
    1b5c:	4b38      	ldr	r3, [pc, #224]	; (1c40 <system_init+0x18c>)
    1b5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1b60:	2101      	movs	r1, #1
    1b62:	203f      	movs	r0, #63	; 0x3f
    1b64:	4b38      	ldr	r3, [pc, #224]	; (1c48 <system_init+0x194>)
    1b66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1b68:	f04f 31ff 	mov.w	r1, #4294967295
    1b6c:	203f      	movs	r0, #63	; 0x3f
    1b6e:	4b35      	ldr	r3, [pc, #212]	; (1c44 <system_init+0x190>)
    1b70:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1b72:	2100      	movs	r1, #0
    1b74:	204d      	movs	r0, #77	; 0x4d
    1b76:	4b31      	ldr	r3, [pc, #196]	; (1c3c <system_init+0x188>)
    1b78:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1b7a:	2102      	movs	r1, #2
    1b7c:	204d      	movs	r0, #77	; 0x4d
    1b7e:	4b30      	ldr	r3, [pc, #192]	; (1c40 <system_init+0x18c>)
    1b80:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1b82:	f04f 31ff 	mov.w	r1, #4294967295
    1b86:	204d      	movs	r0, #77	; 0x4d
    1b88:	4b2e      	ldr	r3, [pc, #184]	; (1c44 <system_init+0x190>)
    1b8a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1b8c:	2101      	movs	r1, #1
    1b8e:	204e      	movs	r0, #78	; 0x4e
    1b90:	4b2a      	ldr	r3, [pc, #168]	; (1c3c <system_init+0x188>)
    1b92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1b94:	2102      	movs	r1, #2
    1b96:	204e      	movs	r0, #78	; 0x4e
    1b98:	4b29      	ldr	r3, [pc, #164]	; (1c40 <system_init+0x18c>)
    1b9a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1b9c:	f04f 31ff 	mov.w	r1, #4294967295
    1ba0:	204e      	movs	r0, #78	; 0x4e
    1ba2:	4b28      	ldr	r3, [pc, #160]	; (1c44 <system_init+0x190>)
    1ba4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1ba6:	2100      	movs	r1, #0
    1ba8:	204f      	movs	r0, #79	; 0x4f
    1baa:	4b24      	ldr	r3, [pc, #144]	; (1c3c <system_init+0x188>)
    1bac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1bae:	2102      	movs	r1, #2
    1bb0:	204f      	movs	r0, #79	; 0x4f
    1bb2:	4b23      	ldr	r3, [pc, #140]	; (1c40 <system_init+0x18c>)
    1bb4:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1bb6:	f04f 31ff 	mov.w	r1, #4294967295
    1bba:	204f      	movs	r0, #79	; 0x4f
    1bbc:	4b21      	ldr	r3, [pc, #132]	; (1c44 <system_init+0x190>)
    1bbe:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1bc0:	2100      	movs	r1, #0
    1bc2:	2052      	movs	r0, #82	; 0x52
    1bc4:	4b1d      	ldr	r3, [pc, #116]	; (1c3c <system_init+0x188>)
    1bc6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1bc8:	2102      	movs	r1, #2
    1bca:	2052      	movs	r0, #82	; 0x52
    1bcc:	4b1c      	ldr	r3, [pc, #112]	; (1c40 <system_init+0x18c>)
    1bce:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1bd0:	f04f 31ff 	mov.w	r1, #4294967295
    1bd4:	2052      	movs	r0, #82	; 0x52
    1bd6:	4b1b      	ldr	r3, [pc, #108]	; (1c44 <system_init+0x190>)
    1bd8:	4798      	blx	r3

	CRC_CALC_init();
    1bda:	4b1c      	ldr	r3, [pc, #112]	; (1c4c <system_init+0x198>)
    1bdc:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1bde:	4b1c      	ldr	r3, [pc, #112]	; (1c50 <system_init+0x19c>)
    1be0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1be2:	4b1c      	ldr	r3, [pc, #112]	; (1c54 <system_init+0x1a0>)
    1be4:	4798      	blx	r3

	QSPI_N25Q256_init();
    1be6:	4b1c      	ldr	r3, [pc, #112]	; (1c58 <system_init+0x1a4>)
    1be8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1bea:	4b1c      	ldr	r3, [pc, #112]	; (1c5c <system_init+0x1a8>)
    1bec:	4798      	blx	r3

	I2C_HEATERS_init();
    1bee:	4b1c      	ldr	r3, [pc, #112]	; (1c60 <system_init+0x1ac>)
    1bf0:	4798      	blx	r3

	SPI_TEMP_init();
    1bf2:	4b1c      	ldr	r3, [pc, #112]	; (1c64 <system_init+0x1b0>)
    1bf4:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1bf6:	4b1c      	ldr	r3, [pc, #112]	; (1c68 <system_init+0x1b4>)
    1bf8:	4798      	blx	r3

	SPI_HI3593_init();
    1bfa:	4b1c      	ldr	r3, [pc, #112]	; (1c6c <system_init+0x1b8>)
    1bfc:	4798      	blx	r3

	I2C_FANS_init();
    1bfe:	4b1c      	ldr	r3, [pc, #112]	; (1c70 <system_init+0x1bc>)
    1c00:	4798      	blx	r3

	TIMER_USB_init();
    1c02:	4b1c      	ldr	r3, [pc, #112]	; (1c74 <system_init+0x1c0>)
    1c04:	4798      	blx	r3
	TIMER_ARINC_init();
    1c06:	4b1c      	ldr	r3, [pc, #112]	; (1c78 <system_init+0x1c4>)
    1c08:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1c0a:	4b1c      	ldr	r3, [pc, #112]	; (1c7c <system_init+0x1c8>)
    1c0c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1c0e:	4b1c      	ldr	r3, [pc, #112]	; (1c80 <system_init+0x1cc>)
    1c10:	4798      	blx	r3
	TIMER_EVENT_init();
    1c12:	4b1c      	ldr	r3, [pc, #112]	; (1c84 <system_init+0x1d0>)
    1c14:	4798      	blx	r3
	LIVE_PULSE_init();
    1c16:	4b1c      	ldr	r3, [pc, #112]	; (1c88 <system_init+0x1d4>)
    1c18:	4798      	blx	r3

	TIMER_HVAC_init();
    1c1a:	4b1c      	ldr	r3, [pc, #112]	; (1c8c <system_init+0x1d8>)
    1c1c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1c1e:	4b1c      	ldr	r3, [pc, #112]	; (1c90 <system_init+0x1dc>)
    1c20:	4798      	blx	r3

	TIMER_CCU_init();
    1c22:	4b1c      	ldr	r3, [pc, #112]	; (1c94 <system_init+0x1e0>)
    1c24:	4798      	blx	r3

	CDCUSB_init();
    1c26:	4b1c      	ldr	r3, [pc, #112]	; (1c98 <system_init+0x1e4>)
    1c28:	4798      	blx	r3

	WATCHDOG_init();
    1c2a:	4b1c      	ldr	r3, [pc, #112]	; (1c9c <system_init+0x1e8>)
    1c2c:	4798      	blx	r3
	CAN_CCU_init();
    1c2e:	4b1c      	ldr	r3, [pc, #112]	; (1ca0 <system_init+0x1ec>)
    1c30:	4798      	blx	r3
}
    1c32:	bf00      	nop
    1c34:	bd80      	pop	{r7, pc}
    1c36:	bf00      	nop
    1c38:	00000fb9 	.word	0x00000fb9
    1c3c:	00000f81 	.word	0x00000f81
    1c40:	00000f49 	.word	0x00000f49
    1c44:	00000f29 	.word	0x00000f29
    1c48:	00000ef5 	.word	0x00000ef5
    1c4c:	00001019 	.word	0x00001019
    1c50:	00001045 	.word	0x00001045
    1c54:	0000116d 	.word	0x0000116d
    1c58:	000012b5 	.word	0x000012b5
    1c5c:	000012f9 	.word	0x000012f9
    1c60:	00001389 	.word	0x00001389
    1c64:	00001455 	.word	0x00001455
    1c68:	000014ed 	.word	0x000014ed
    1c6c:	000015b9 	.word	0x000015b9
    1c70:	00001651 	.word	0x00001651
    1c74:	0000167d 	.word	0x0000167d
    1c78:	000016c5 	.word	0x000016c5
    1c7c:	0000170d 	.word	0x0000170d
    1c80:	00001755 	.word	0x00001755
    1c84:	0000179d 	.word	0x0000179d
    1c88:	0000181d 	.word	0x0000181d
    1c8c:	0000187d 	.word	0x0000187d
    1c90:	000018d5 	.word	0x000018d5
    1c94:	0000192d 	.word	0x0000192d
    1c98:	000019f1 	.word	0x000019f1
    1c9c:	00001a29 	.word	0x00001a29
    1ca0:	00001a71 	.word	0x00001a71

00001ca4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1ca4:	b580      	push	{r7, lr}
    1ca6:	b084      	sub	sp, #16
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]
    1cac:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1cae:	2300      	movs	r3, #0
    1cb0:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	bf14      	ite	ne
    1cb8:	2301      	movne	r3, #1
    1cba:	2300      	moveq	r3, #0
    1cbc:	b2db      	uxtb	r3, r3
    1cbe:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1cc2:	4911      	ldr	r1, [pc, #68]	; (1d08 <calendar_init+0x64>)
    1cc4:	4618      	mov	r0, r3
    1cc6:	4b11      	ldr	r3, [pc, #68]	; (1d0c <calendar_init+0x68>)
    1cc8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1cca:	687b      	ldr	r3, [r7, #4]
    1ccc:	681a      	ldr	r2, [r3, #0]
    1cce:	683b      	ldr	r3, [r7, #0]
    1cd0:	429a      	cmp	r2, r3
    1cd2:	d101      	bne.n	1cd8 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1cd4:	2300      	movs	r3, #0
    1cd6:	e013      	b.n	1d00 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d002      	beq.n	1ce6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1ce0:	f06f 0311 	mvn.w	r3, #17
    1ce4:	e00c      	b.n	1d00 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	683a      	ldr	r2, [r7, #0]
    1cea:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1cec:	687b      	ldr	r3, [r7, #4]
    1cee:	4618      	mov	r0, r3
    1cf0:	4b07      	ldr	r3, [pc, #28]	; (1d10 <calendar_init+0x6c>)
    1cf2:	4798      	blx	r3
    1cf4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1cfc:	619a      	str	r2, [r3, #24]

	return ret;
    1cfe:	68fb      	ldr	r3, [r7, #12]
}
    1d00:	4618      	mov	r0, r3
    1d02:	3710      	adds	r7, #16
    1d04:	46bd      	mov	sp, r7
    1d06:	bd80      	pop	{r7, pc}
    1d08:	0000eda4 	.word	0x0000eda4
    1d0c:	0000341d 	.word	0x0000341d
    1d10:	000057d9 	.word	0x000057d9

00001d14 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	b084      	sub	sp, #16
    1d18:	af00      	add	r7, sp, #0
    1d1a:	6078      	str	r0, [r7, #4]
    1d1c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d004      	beq.n	1d2e <can_async_init+0x1a>
    1d24:	683b      	ldr	r3, [r7, #0]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d001      	beq.n	1d2e <can_async_init+0x1a>
    1d2a:	2301      	movs	r3, #1
    1d2c:	e000      	b.n	1d30 <can_async_init+0x1c>
    1d2e:	2300      	movs	r3, #0
    1d30:	f003 0301 	and.w	r3, r3, #1
    1d34:	b2db      	uxtb	r3, r3
    1d36:	2241      	movs	r2, #65	; 0x41
    1d38:	490e      	ldr	r1, [pc, #56]	; (1d74 <can_async_init+0x60>)
    1d3a:	4618      	mov	r0, r3
    1d3c:	4b0e      	ldr	r3, [pc, #56]	; (1d78 <can_async_init+0x64>)
    1d3e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	6839      	ldr	r1, [r7, #0]
    1d44:	4618      	mov	r0, r3
    1d46:	4b0d      	ldr	r3, [pc, #52]	; (1d7c <can_async_init+0x68>)
    1d48:	4798      	blx	r3
    1d4a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1d4c:	68fb      	ldr	r3, [r7, #12]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d001      	beq.n	1d56 <can_async_init+0x42>
		return rc;
    1d52:	68fb      	ldr	r3, [r7, #12]
    1d54:	e009      	b.n	1d6a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	4a09      	ldr	r2, [pc, #36]	; (1d80 <can_async_init+0x6c>)
    1d5a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	4a09      	ldr	r2, [pc, #36]	; (1d84 <can_async_init+0x70>)
    1d60:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	4a08      	ldr	r2, [pc, #32]	; (1d88 <can_async_init+0x74>)
    1d66:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1d68:	2300      	movs	r3, #0
}
    1d6a:	4618      	mov	r0, r3
    1d6c:	3710      	adds	r7, #16
    1d6e:	46bd      	mov	sp, r7
    1d70:	bd80      	pop	{r7, pc}
    1d72:	bf00      	nop
    1d74:	0000edc0 	.word	0x0000edc0
    1d78:	0000341d 	.word	0x0000341d
    1d7c:	00003979 	.word	0x00003979
    1d80:	00001d8d 	.word	0x00001d8d
    1d84:	00001db1 	.word	0x00001db1
    1d88:	00001dd5 	.word	0x00001dd5

00001d8c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1d8c:	b580      	push	{r7, lr}
    1d8e:	b084      	sub	sp, #16
    1d90:	af00      	add	r7, sp, #0
    1d92:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1d98:	68fb      	ldr	r3, [r7, #12]
    1d9a:	69db      	ldr	r3, [r3, #28]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d003      	beq.n	1da8 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1da0:	68fb      	ldr	r3, [r7, #12]
    1da2:	69db      	ldr	r3, [r3, #28]
    1da4:	68f8      	ldr	r0, [r7, #12]
    1da6:	4798      	blx	r3
	}
}
    1da8:	bf00      	nop
    1daa:	3710      	adds	r7, #16
    1dac:	46bd      	mov	sp, r7
    1dae:	bd80      	pop	{r7, pc}

00001db0 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1db0:	b580      	push	{r7, lr}
    1db2:	b084      	sub	sp, #16
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1dbc:	68fb      	ldr	r3, [r7, #12]
    1dbe:	6a1b      	ldr	r3, [r3, #32]
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d003      	beq.n	1dcc <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1dc4:	68fb      	ldr	r3, [r7, #12]
    1dc6:	6a1b      	ldr	r3, [r3, #32]
    1dc8:	68f8      	ldr	r0, [r7, #12]
    1dca:	4798      	blx	r3
	}
}
    1dcc:	bf00      	nop
    1dce:	3710      	adds	r7, #16
    1dd0:	46bd      	mov	sp, r7
    1dd2:	bd80      	pop	{r7, pc}

00001dd4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b084      	sub	sp, #16
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1de4:	68fb      	ldr	r3, [r7, #12]
    1de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1de8:	2b00      	cmp	r3, #0
    1dea:	d005      	beq.n	1df8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1dec:	68fb      	ldr	r3, [r7, #12]
    1dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1df0:	78fa      	ldrb	r2, [r7, #3]
    1df2:	4611      	mov	r1, r2
    1df4:	68f8      	ldr	r0, [r7, #12]
    1df6:	4798      	blx	r3
	}
}
    1df8:	bf00      	nop
    1dfa:	3710      	adds	r7, #16
    1dfc:	46bd      	mov	sp, r7
    1dfe:	bd80      	pop	{r7, pc}

00001e00 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	b082      	sub	sp, #8
    1e04:	af00      	add	r7, sp, #0
    1e06:	6078      	str	r0, [r7, #4]
    1e08:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d004      	beq.n	1e1a <crc_sync_init+0x1a>
    1e10:	683b      	ldr	r3, [r7, #0]
    1e12:	2b00      	cmp	r3, #0
    1e14:	d001      	beq.n	1e1a <crc_sync_init+0x1a>
    1e16:	2301      	movs	r3, #1
    1e18:	e000      	b.n	1e1c <crc_sync_init+0x1c>
    1e1a:	2300      	movs	r3, #0
    1e1c:	f003 0301 	and.w	r3, r3, #1
    1e20:	b2db      	uxtb	r3, r3
    1e22:	222b      	movs	r2, #43	; 0x2b
    1e24:	4906      	ldr	r1, [pc, #24]	; (1e40 <crc_sync_init+0x40>)
    1e26:	4618      	mov	r0, r3
    1e28:	4b06      	ldr	r3, [pc, #24]	; (1e44 <crc_sync_init+0x44>)
    1e2a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	6839      	ldr	r1, [r7, #0]
    1e30:	4618      	mov	r0, r3
    1e32:	4b05      	ldr	r3, [pc, #20]	; (1e48 <crc_sync_init+0x48>)
    1e34:	4798      	blx	r3
    1e36:	4603      	mov	r3, r0
}
    1e38:	4618      	mov	r0, r3
    1e3a:	3708      	adds	r7, #8
    1e3c:	46bd      	mov	sp, r7
    1e3e:	bd80      	pop	{r7, pc}
    1e40:	0000eddc 	.word	0x0000eddc
    1e44:	0000341d 	.word	0x0000341d
    1e48:	00004079 	.word	0x00004079

00001e4c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1e4c:	b590      	push	{r4, r7, lr}
    1e4e:	b083      	sub	sp, #12
    1e50:	af00      	add	r7, sp, #0
    1e52:	4603      	mov	r3, r0
    1e54:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1e56:	4b07      	ldr	r3, [pc, #28]	; (1e74 <delay_us+0x28>)
    1e58:	681c      	ldr	r4, [r3, #0]
    1e5a:	88fb      	ldrh	r3, [r7, #6]
    1e5c:	4618      	mov	r0, r3
    1e5e:	4b06      	ldr	r3, [pc, #24]	; (1e78 <delay_us+0x2c>)
    1e60:	4798      	blx	r3
    1e62:	4603      	mov	r3, r0
    1e64:	4619      	mov	r1, r3
    1e66:	4620      	mov	r0, r4
    1e68:	4b04      	ldr	r3, [pc, #16]	; (1e7c <delay_us+0x30>)
    1e6a:	4798      	blx	r3
}
    1e6c:	bf00      	nop
    1e6e:	370c      	adds	r7, #12
    1e70:	46bd      	mov	sp, r7
    1e72:	bd90      	pop	{r4, r7, pc}
    1e74:	20000874 	.word	0x20000874
    1e78:	00003dcd 	.word	0x00003dcd
    1e7c:	00003f61 	.word	0x00003f61

00001e80 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1e80:	b590      	push	{r4, r7, lr}
    1e82:	b083      	sub	sp, #12
    1e84:	af00      	add	r7, sp, #0
    1e86:	4603      	mov	r3, r0
    1e88:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1e8a:	4b07      	ldr	r3, [pc, #28]	; (1ea8 <delay_ms+0x28>)
    1e8c:	681c      	ldr	r4, [r3, #0]
    1e8e:	88fb      	ldrh	r3, [r7, #6]
    1e90:	4618      	mov	r0, r3
    1e92:	4b06      	ldr	r3, [pc, #24]	; (1eac <delay_ms+0x2c>)
    1e94:	4798      	blx	r3
    1e96:	4603      	mov	r3, r0
    1e98:	4619      	mov	r1, r3
    1e9a:	4620      	mov	r0, r4
    1e9c:	4b04      	ldr	r3, [pc, #16]	; (1eb0 <delay_ms+0x30>)
    1e9e:	4798      	blx	r3
}
    1ea0:	bf00      	nop
    1ea2:	370c      	adds	r7, #12
    1ea4:	46bd      	mov	sp, r7
    1ea6:	bd90      	pop	{r4, r7, pc}
    1ea8:	20000874 	.word	0x20000874
    1eac:	00003f39 	.word	0x00003f39
    1eb0:	00003f61 	.word	0x00003f61

00001eb4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	af00      	add	r7, sp, #0
	return _event_system_init();
    1eb8:	4b02      	ldr	r3, [pc, #8]	; (1ec4 <event_system_init+0x10>)
    1eba:	4798      	blx	r3
    1ebc:	4603      	mov	r3, r0
}
    1ebe:	4618      	mov	r0, r3
    1ec0:	bd80      	pop	{r7, pc}
    1ec2:	bf00      	nop
    1ec4:	00004835 	.word	0x00004835

00001ec8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b082      	sub	sp, #8
    1ecc:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1ece:	2300      	movs	r3, #0
    1ed0:	80fb      	strh	r3, [r7, #6]
    1ed2:	e00e      	b.n	1ef2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1ed4:	88fb      	ldrh	r3, [r7, #6]
    1ed6:	4a0c      	ldr	r2, [pc, #48]	; (1f08 <ext_irq_init+0x40>)
    1ed8:	00db      	lsls	r3, r3, #3
    1eda:	4413      	add	r3, r2
    1edc:	f04f 32ff 	mov.w	r2, #4294967295
    1ee0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1ee2:	88fb      	ldrh	r3, [r7, #6]
    1ee4:	4a08      	ldr	r2, [pc, #32]	; (1f08 <ext_irq_init+0x40>)
    1ee6:	2100      	movs	r1, #0
    1ee8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1eec:	88fb      	ldrh	r3, [r7, #6]
    1eee:	3301      	adds	r3, #1
    1ef0:	80fb      	strh	r3, [r7, #6]
    1ef2:	88fb      	ldrh	r3, [r7, #6]
    1ef4:	2b08      	cmp	r3, #8
    1ef6:	d9ed      	bls.n	1ed4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1ef8:	4804      	ldr	r0, [pc, #16]	; (1f0c <ext_irq_init+0x44>)
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <ext_irq_init+0x48>)
    1efc:	4798      	blx	r3
    1efe:	4603      	mov	r3, r0
}
    1f00:	4618      	mov	r0, r3
    1f02:	3708      	adds	r7, #8
    1f04:	46bd      	mov	sp, r7
    1f06:	bd80      	pop	{r7, pc}
    1f08:	20000878 	.word	0x20000878
    1f0c:	0000206d 	.word	0x0000206d
    1f10:	000043b9 	.word	0x000043b9

00001f14 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b086      	sub	sp, #24
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    1f1e:	2300      	movs	r3, #0
    1f20:	75fb      	strb	r3, [r7, #23]
    1f22:	2300      	movs	r3, #0
    1f24:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    1f26:	2300      	movs	r3, #0
    1f28:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    1f2a:	e012      	b.n	1f52 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    1f2c:	7dfb      	ldrb	r3, [r7, #23]
    1f2e:	4a4d      	ldr	r2, [pc, #308]	; (2064 <ext_irq_register+0x150>)
    1f30:	00db      	lsls	r3, r3, #3
    1f32:	4413      	add	r3, r2
    1f34:	685a      	ldr	r2, [r3, #4]
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	429a      	cmp	r2, r3
    1f3a:	d107      	bne.n	1f4c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    1f3c:	7dfb      	ldrb	r3, [r7, #23]
    1f3e:	4949      	ldr	r1, [pc, #292]	; (2064 <ext_irq_register+0x150>)
    1f40:	683a      	ldr	r2, [r7, #0]
    1f42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    1f46:	2301      	movs	r3, #1
    1f48:	757b      	strb	r3, [r7, #21]
			break;
    1f4a:	e005      	b.n	1f58 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1f4c:	7dfb      	ldrb	r3, [r7, #23]
    1f4e:	3301      	adds	r3, #1
    1f50:	75fb      	strb	r3, [r7, #23]
    1f52:	7dfb      	ldrb	r3, [r7, #23]
    1f54:	2b08      	cmp	r3, #8
    1f56:	d9e9      	bls.n	1f2c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    1f58:	683b      	ldr	r3, [r7, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d10e      	bne.n	1f7c <ext_irq_register+0x68>
		if (!found) {
    1f5e:	7d7b      	ldrb	r3, [r7, #21]
    1f60:	f083 0301 	eor.w	r3, r3, #1
    1f64:	b2db      	uxtb	r3, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	d002      	beq.n	1f70 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    1f6a:	f06f 030c 	mvn.w	r3, #12
    1f6e:	e074      	b.n	205a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    1f70:	2100      	movs	r1, #0
    1f72:	6878      	ldr	r0, [r7, #4]
    1f74:	4b3c      	ldr	r3, [pc, #240]	; (2068 <ext_irq_register+0x154>)
    1f76:	4798      	blx	r3
    1f78:	4603      	mov	r3, r0
    1f7a:	e06e      	b.n	205a <ext_irq_register+0x146>
	}

	if (!found) {
    1f7c:	7d7b      	ldrb	r3, [r7, #21]
    1f7e:	f083 0301 	eor.w	r3, r3, #1
    1f82:	b2db      	uxtb	r3, r3
    1f84:	2b00      	cmp	r3, #0
    1f86:	d05a      	beq.n	203e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1f88:	2300      	movs	r3, #0
    1f8a:	75fb      	strb	r3, [r7, #23]
    1f8c:	e016      	b.n	1fbc <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    1f8e:	7dfb      	ldrb	r3, [r7, #23]
    1f90:	4a34      	ldr	r2, [pc, #208]	; (2064 <ext_irq_register+0x150>)
    1f92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d10d      	bne.n	1fb6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    1f9a:	7dfb      	ldrb	r3, [r7, #23]
    1f9c:	4931      	ldr	r1, [pc, #196]	; (2064 <ext_irq_register+0x150>)
    1f9e:	683a      	ldr	r2, [r7, #0]
    1fa0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    1fa4:	7dfb      	ldrb	r3, [r7, #23]
    1fa6:	4a2f      	ldr	r2, [pc, #188]	; (2064 <ext_irq_register+0x150>)
    1fa8:	00db      	lsls	r3, r3, #3
    1faa:	4413      	add	r3, r2
    1fac:	687a      	ldr	r2, [r7, #4]
    1fae:	605a      	str	r2, [r3, #4]
				found           = true;
    1fb0:	2301      	movs	r3, #1
    1fb2:	757b      	strb	r3, [r7, #21]
				break;
    1fb4:	e005      	b.n	1fc2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1fb6:	7dfb      	ldrb	r3, [r7, #23]
    1fb8:	3301      	adds	r3, #1
    1fba:	75fb      	strb	r3, [r7, #23]
    1fbc:	7dfb      	ldrb	r3, [r7, #23]
    1fbe:	2b08      	cmp	r3, #8
    1fc0:	d9e5      	bls.n	1f8e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1fc2:	e036      	b.n	2032 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1fc4:	7dfb      	ldrb	r3, [r7, #23]
    1fc6:	4a27      	ldr	r2, [pc, #156]	; (2064 <ext_irq_register+0x150>)
    1fc8:	00db      	lsls	r3, r3, #3
    1fca:	4413      	add	r3, r2
    1fcc:	685a      	ldr	r2, [r3, #4]
    1fce:	7dbb      	ldrb	r3, [r7, #22]
    1fd0:	4924      	ldr	r1, [pc, #144]	; (2064 <ext_irq_register+0x150>)
    1fd2:	00db      	lsls	r3, r3, #3
    1fd4:	440b      	add	r3, r1
    1fd6:	685b      	ldr	r3, [r3, #4]
    1fd8:	429a      	cmp	r2, r3
    1fda:	d227      	bcs.n	202c <ext_irq_register+0x118>
    1fdc:	7dbb      	ldrb	r3, [r7, #22]
    1fde:	4a21      	ldr	r2, [pc, #132]	; (2064 <ext_irq_register+0x150>)
    1fe0:	00db      	lsls	r3, r3, #3
    1fe2:	4413      	add	r3, r2
    1fe4:	685b      	ldr	r3, [r3, #4]
    1fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
    1fea:	d01f      	beq.n	202c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    1fec:	7dbb      	ldrb	r3, [r7, #22]
    1fee:	491d      	ldr	r1, [pc, #116]	; (2064 <ext_irq_register+0x150>)
    1ff0:	f107 020c 	add.w	r2, r7, #12
    1ff4:	00db      	lsls	r3, r3, #3
    1ff6:	440b      	add	r3, r1
    1ff8:	e893 0003 	ldmia.w	r3, {r0, r1}
    1ffc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2000:	7dbb      	ldrb	r3, [r7, #22]
    2002:	7dfa      	ldrb	r2, [r7, #23]
    2004:	4817      	ldr	r0, [pc, #92]	; (2064 <ext_irq_register+0x150>)
    2006:	4917      	ldr	r1, [pc, #92]	; (2064 <ext_irq_register+0x150>)
    2008:	00db      	lsls	r3, r3, #3
    200a:	4403      	add	r3, r0
    200c:	00d2      	lsls	r2, r2, #3
    200e:	440a      	add	r2, r1
    2010:	e892 0003 	ldmia.w	r2, {r0, r1}
    2014:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2018:	7dfb      	ldrb	r3, [r7, #23]
    201a:	4a12      	ldr	r2, [pc, #72]	; (2064 <ext_irq_register+0x150>)
    201c:	00db      	lsls	r3, r3, #3
    201e:	4413      	add	r3, r2
    2020:	f107 020c 	add.w	r2, r7, #12
    2024:	e892 0003 	ldmia.w	r2, {r0, r1}
    2028:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    202c:	7dbb      	ldrb	r3, [r7, #22]
    202e:	3301      	adds	r3, #1
    2030:	75bb      	strb	r3, [r7, #22]
    2032:	7dbb      	ldrb	r3, [r7, #22]
    2034:	2b08      	cmp	r3, #8
    2036:	d802      	bhi.n	203e <ext_irq_register+0x12a>
    2038:	7dfb      	ldrb	r3, [r7, #23]
    203a:	2b08      	cmp	r3, #8
    203c:	d9c2      	bls.n	1fc4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    203e:	7d7b      	ldrb	r3, [r7, #21]
    2040:	f083 0301 	eor.w	r3, r3, #1
    2044:	b2db      	uxtb	r3, r3
    2046:	2b00      	cmp	r3, #0
    2048:	d002      	beq.n	2050 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    204a:	f06f 030c 	mvn.w	r3, #12
    204e:	e004      	b.n	205a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2050:	2101      	movs	r1, #1
    2052:	6878      	ldr	r0, [r7, #4]
    2054:	4b04      	ldr	r3, [pc, #16]	; (2068 <ext_irq_register+0x154>)
    2056:	4798      	blx	r3
    2058:	4603      	mov	r3, r0
}
    205a:	4618      	mov	r0, r3
    205c:	3718      	adds	r7, #24
    205e:	46bd      	mov	sp, r7
    2060:	bd80      	pop	{r7, pc}
    2062:	bf00      	nop
    2064:	20000878 	.word	0x20000878
    2068:	0000454d 	.word	0x0000454d

0000206c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    206c:	b580      	push	{r7, lr}
    206e:	b084      	sub	sp, #16
    2070:	af00      	add	r7, sp, #0
    2072:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2074:	2300      	movs	r3, #0
    2076:	73fb      	strb	r3, [r7, #15]
    2078:	2309      	movs	r3, #9
    207a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    207c:	e02a      	b.n	20d4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    207e:	7bba      	ldrb	r2, [r7, #14]
    2080:	7bfb      	ldrb	r3, [r7, #15]
    2082:	4413      	add	r3, r2
    2084:	105b      	asrs	r3, r3, #1
    2086:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2088:	7b7b      	ldrb	r3, [r7, #13]
    208a:	2b08      	cmp	r3, #8
    208c:	d827      	bhi.n	20de <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    208e:	7b7b      	ldrb	r3, [r7, #13]
    2090:	4a16      	ldr	r2, [pc, #88]	; (20ec <process_ext_irq+0x80>)
    2092:	00db      	lsls	r3, r3, #3
    2094:	4413      	add	r3, r2
    2096:	685a      	ldr	r2, [r3, #4]
    2098:	687b      	ldr	r3, [r7, #4]
    209a:	429a      	cmp	r2, r3
    209c:	d10b      	bne.n	20b6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    209e:	7b7b      	ldrb	r3, [r7, #13]
    20a0:	4a12      	ldr	r2, [pc, #72]	; (20ec <process_ext_irq+0x80>)
    20a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d01b      	beq.n	20e2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    20aa:	7b7b      	ldrb	r3, [r7, #13]
    20ac:	4a0f      	ldr	r2, [pc, #60]	; (20ec <process_ext_irq+0x80>)
    20ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20b2:	4798      	blx	r3
			}
			return;
    20b4:	e015      	b.n	20e2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    20b6:	7b7b      	ldrb	r3, [r7, #13]
    20b8:	4a0c      	ldr	r2, [pc, #48]	; (20ec <process_ext_irq+0x80>)
    20ba:	00db      	lsls	r3, r3, #3
    20bc:	4413      	add	r3, r2
    20be:	685a      	ldr	r2, [r3, #4]
    20c0:	687b      	ldr	r3, [r7, #4]
    20c2:	429a      	cmp	r2, r3
    20c4:	d203      	bcs.n	20ce <process_ext_irq+0x62>
			lower = middle + 1;
    20c6:	7b7b      	ldrb	r3, [r7, #13]
    20c8:	3301      	adds	r3, #1
    20ca:	73fb      	strb	r3, [r7, #15]
    20cc:	e002      	b.n	20d4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    20ce:	7b7b      	ldrb	r3, [r7, #13]
    20d0:	3b01      	subs	r3, #1
    20d2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    20d4:	7bba      	ldrb	r2, [r7, #14]
    20d6:	7bfb      	ldrb	r3, [r7, #15]
    20d8:	429a      	cmp	r2, r3
    20da:	d2d0      	bcs.n	207e <process_ext_irq+0x12>
    20dc:	e002      	b.n	20e4 <process_ext_irq+0x78>
			return;
    20de:	bf00      	nop
    20e0:	e000      	b.n	20e4 <process_ext_irq+0x78>
			return;
    20e2:	bf00      	nop
		}
	}
}
    20e4:	3710      	adds	r7, #16
    20e6:	46bd      	mov	sp, r7
    20e8:	bd80      	pop	{r7, pc}
    20ea:	bf00      	nop
    20ec:	20000878 	.word	0x20000878

000020f0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b08a      	sub	sp, #40	; 0x28
    20f4:	af00      	add	r7, sp, #0
    20f6:	60f8      	str	r0, [r7, #12]
    20f8:	60b9      	str	r1, [r7, #8]
    20fa:	4613      	mov	r3, r2
    20fc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    20fe:	68fb      	ldr	r3, [r7, #12]
    2100:	3b14      	subs	r3, #20
    2102:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2106:	8b9b      	ldrh	r3, [r3, #28]
    2108:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    210a:	88fb      	ldrh	r3, [r7, #6]
    210c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    210e:	f248 0301 	movw	r3, #32769	; 0x8001
    2112:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2114:	68bb      	ldr	r3, [r7, #8]
    2116:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    211a:	f107 0214 	add.w	r2, r7, #20
    211e:	4611      	mov	r1, r2
    2120:	4618      	mov	r0, r3
    2122:	4b06      	ldr	r3, [pc, #24]	; (213c <i2c_m_sync_read+0x4c>)
    2124:	4798      	blx	r3
    2126:	6238      	str	r0, [r7, #32]

	if (ret) {
    2128:	6a3b      	ldr	r3, [r7, #32]
    212a:	2b00      	cmp	r3, #0
    212c:	d001      	beq.n	2132 <i2c_m_sync_read+0x42>
		return ret;
    212e:	6a3b      	ldr	r3, [r7, #32]
    2130:	e000      	b.n	2134 <i2c_m_sync_read+0x44>
	}

	return n;
    2132:	88fb      	ldrh	r3, [r7, #6]
}
    2134:	4618      	mov	r0, r3
    2136:	3728      	adds	r7, #40	; 0x28
    2138:	46bd      	mov	sp, r7
    213a:	bd80      	pop	{r7, pc}
    213c:	00006495 	.word	0x00006495

00002140 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2140:	b580      	push	{r7, lr}
    2142:	b08a      	sub	sp, #40	; 0x28
    2144:	af00      	add	r7, sp, #0
    2146:	60f8      	str	r0, [r7, #12]
    2148:	60b9      	str	r1, [r7, #8]
    214a:	4613      	mov	r3, r2
    214c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	3b14      	subs	r3, #20
    2152:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2156:	8b9b      	ldrh	r3, [r3, #28]
    2158:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    215a:	88fb      	ldrh	r3, [r7, #6]
    215c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    215e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2162:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2164:	68bb      	ldr	r3, [r7, #8]
    2166:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    216a:	f107 0214 	add.w	r2, r7, #20
    216e:	4611      	mov	r1, r2
    2170:	4618      	mov	r0, r3
    2172:	4b06      	ldr	r3, [pc, #24]	; (218c <i2c_m_sync_write+0x4c>)
    2174:	4798      	blx	r3
    2176:	6238      	str	r0, [r7, #32]

	if (ret) {
    2178:	6a3b      	ldr	r3, [r7, #32]
    217a:	2b00      	cmp	r3, #0
    217c:	d001      	beq.n	2182 <i2c_m_sync_write+0x42>
		return ret;
    217e:	6a3b      	ldr	r3, [r7, #32]
    2180:	e000      	b.n	2184 <i2c_m_sync_write+0x44>
	}

	return n;
    2182:	88fb      	ldrh	r3, [r7, #6]
}
    2184:	4618      	mov	r0, r3
    2186:	3728      	adds	r7, #40	; 0x28
    2188:	46bd      	mov	sp, r7
    218a:	bd80      	pop	{r7, pc}
    218c:	00006495 	.word	0x00006495

00002190 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2190:	b580      	push	{r7, lr}
    2192:	b084      	sub	sp, #16
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
    2198:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	2b00      	cmp	r3, #0
    219e:	bf14      	ite	ne
    21a0:	2301      	movne	r3, #1
    21a2:	2300      	moveq	r3, #0
    21a4:	b2db      	uxtb	r3, r3
    21a6:	225e      	movs	r2, #94	; 0x5e
    21a8:	490c      	ldr	r1, [pc, #48]	; (21dc <i2c_m_sync_init+0x4c>)
    21aa:	4618      	mov	r0, r3
    21ac:	4b0c      	ldr	r3, [pc, #48]	; (21e0 <i2c_m_sync_init+0x50>)
    21ae:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	6839      	ldr	r1, [r7, #0]
    21b4:	4618      	mov	r0, r3
    21b6:	4b0b      	ldr	r3, [pc, #44]	; (21e4 <i2c_m_sync_init+0x54>)
    21b8:	4798      	blx	r3
    21ba:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    21bc:	68fb      	ldr	r3, [r7, #12]
    21be:	2b00      	cmp	r3, #0
    21c0:	d001      	beq.n	21c6 <i2c_m_sync_init+0x36>
		return init_status;
    21c2:	68fb      	ldr	r3, [r7, #12]
    21c4:	e006      	b.n	21d4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	4a07      	ldr	r2, [pc, #28]	; (21e8 <i2c_m_sync_init+0x58>)
    21ca:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	4a07      	ldr	r2, [pc, #28]	; (21ec <i2c_m_sync_init+0x5c>)
    21d0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    21d2:	2300      	movs	r3, #0
}
    21d4:	4618      	mov	r0, r3
    21d6:	3710      	adds	r7, #16
    21d8:	46bd      	mov	sp, r7
    21da:	bd80      	pop	{r7, pc}
    21dc:	0000edf8 	.word	0x0000edf8
    21e0:	0000341d 	.word	0x0000341d
    21e4:	00006235 	.word	0x00006235
    21e8:	000020f1 	.word	0x000020f1
    21ec:	00002141 	.word	0x00002141

000021f0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b082      	sub	sp, #8
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	4618      	mov	r0, r3
    21fc:	4b03      	ldr	r3, [pc, #12]	; (220c <i2c_m_sync_enable+0x1c>)
    21fe:	4798      	blx	r3
    2200:	4603      	mov	r3, r0
}
    2202:	4618      	mov	r0, r3
    2204:	3708      	adds	r7, #8
    2206:	46bd      	mov	sp, r7
    2208:	bd80      	pop	{r7, pc}
    220a:	bf00      	nop
    220c:	0000627d 	.word	0x0000627d

00002210 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    2210:	b580      	push	{r7, lr}
    2212:	b082      	sub	sp, #8
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	4618      	mov	r0, r3
    221c:	4b03      	ldr	r3, [pc, #12]	; (222c <i2c_m_sync_disable+0x1c>)
    221e:	4798      	blx	r3
    2220:	4603      	mov	r3, r0
}
    2222:	4618      	mov	r0, r3
    2224:	3708      	adds	r7, #8
    2226:	46bd      	mov	sp, r7
    2228:	bd80      	pop	{r7, pc}
    222a:	bf00      	nop
    222c:	000062bd 	.word	0x000062bd

00002230 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2230:	b480      	push	{r7}
    2232:	b085      	sub	sp, #20
    2234:	af00      	add	r7, sp, #0
    2236:	60f8      	str	r0, [r7, #12]
    2238:	460b      	mov	r3, r1
    223a:	607a      	str	r2, [r7, #4]
    223c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    223e:	897b      	ldrh	r3, [r7, #10]
    2240:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2244:	b21a      	sxth	r2, r3
    2246:	687b      	ldr	r3, [r7, #4]
    2248:	b21b      	sxth	r3, r3
    224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    224e:	b21b      	sxth	r3, r3
    2250:	4313      	orrs	r3, r2
    2252:	b21b      	sxth	r3, r3
    2254:	b29a      	uxth	r2, r3
    2256:	68fb      	ldr	r3, [r7, #12]
    2258:	839a      	strh	r2, [r3, #28]
    225a:	68fb      	ldr	r3, [r7, #12]
    225c:	8b9b      	ldrh	r3, [r3, #28]
}
    225e:	4618      	mov	r0, r3
    2260:	3714      	adds	r7, #20
    2262:	46bd      	mov	sp, r7
    2264:	f85d 7b04 	ldr.w	r7, [sp], #4
    2268:	4770      	bx	lr

0000226a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    226a:	b480      	push	{r7}
    226c:	b083      	sub	sp, #12
    226e:	af00      	add	r7, sp, #0
    2270:	6078      	str	r0, [r7, #4]
    2272:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	f103 0214 	add.w	r2, r3, #20
    227a:	683b      	ldr	r3, [r7, #0]
    227c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    227e:	2300      	movs	r3, #0
}
    2280:	4618      	mov	r0, r3
    2282:	370c      	adds	r7, #12
    2284:	46bd      	mov	sp, r7
    2286:	f85d 7b04 	ldr.w	r7, [sp], #4
    228a:	4770      	bx	lr

0000228c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    228c:	b580      	push	{r7, lr}
    228e:	b084      	sub	sp, #16
    2290:	af00      	add	r7, sp, #0
    2292:	60f8      	str	r0, [r7, #12]
    2294:	60b9      	str	r1, [r7, #8]
    2296:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2298:	68fb      	ldr	r3, [r7, #12]
    229a:	2b00      	cmp	r3, #0
    229c:	d004      	beq.n	22a8 <pwm_init+0x1c>
    229e:	68bb      	ldr	r3, [r7, #8]
    22a0:	2b00      	cmp	r3, #0
    22a2:	d001      	beq.n	22a8 <pwm_init+0x1c>
    22a4:	2301      	movs	r3, #1
    22a6:	e000      	b.n	22aa <pwm_init+0x1e>
    22a8:	2300      	movs	r3, #0
    22aa:	f003 0301 	and.w	r3, r3, #1
    22ae:	b2db      	uxtb	r3, r3
    22b0:	2233      	movs	r2, #51	; 0x33
    22b2:	490a      	ldr	r1, [pc, #40]	; (22dc <pwm_init+0x50>)
    22b4:	4618      	mov	r0, r3
    22b6:	4b0a      	ldr	r3, [pc, #40]	; (22e0 <pwm_init+0x54>)
    22b8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	68b9      	ldr	r1, [r7, #8]
    22be:	4618      	mov	r0, r3
    22c0:	4b08      	ldr	r3, [pc, #32]	; (22e4 <pwm_init+0x58>)
    22c2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    22c4:	68fb      	ldr	r3, [r7, #12]
    22c6:	4a08      	ldr	r2, [pc, #32]	; (22e8 <pwm_init+0x5c>)
    22c8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	4a07      	ldr	r2, [pc, #28]	; (22ec <pwm_init+0x60>)
    22ce:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    22d0:	2300      	movs	r3, #0
}
    22d2:	4618      	mov	r0, r3
    22d4:	3710      	adds	r7, #16
    22d6:	46bd      	mov	sp, r7
    22d8:	bd80      	pop	{r7, pc}
    22da:	bf00      	nop
    22dc:	0000ee14 	.word	0x0000ee14
    22e0:	0000341d 	.word	0x0000341d
    22e4:	00007a55 	.word	0x00007a55
    22e8:	000022f1 	.word	0x000022f1
    22ec:	00002315 	.word	0x00002315

000022f0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    22f0:	b580      	push	{r7, lr}
    22f2:	b084      	sub	sp, #16
    22f4:	af00      	add	r7, sp, #0
    22f6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    22fc:	68fb      	ldr	r3, [r7, #12]
    22fe:	695b      	ldr	r3, [r3, #20]
    2300:	2b00      	cmp	r3, #0
    2302:	d003      	beq.n	230c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2304:	68fb      	ldr	r3, [r7, #12]
    2306:	695b      	ldr	r3, [r3, #20]
    2308:	68f8      	ldr	r0, [r7, #12]
    230a:	4798      	blx	r3
	}
}
    230c:	bf00      	nop
    230e:	3710      	adds	r7, #16
    2310:	46bd      	mov	sp, r7
    2312:	bd80      	pop	{r7, pc}

00002314 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2314:	b580      	push	{r7, lr}
    2316:	b084      	sub	sp, #16
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2320:	68fb      	ldr	r3, [r7, #12]
    2322:	699b      	ldr	r3, [r3, #24]
    2324:	2b00      	cmp	r3, #0
    2326:	d003      	beq.n	2330 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	699b      	ldr	r3, [r3, #24]
    232c:	68f8      	ldr	r0, [r7, #12]
    232e:	4798      	blx	r3
	}
}
    2330:	bf00      	nop
    2332:	3710      	adds	r7, #16
    2334:	46bd      	mov	sp, r7
    2336:	bd80      	pop	{r7, pc}

00002338 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2338:	b580      	push	{r7, lr}
    233a:	b082      	sub	sp, #8
    233c:	af00      	add	r7, sp, #0
    233e:	6078      	str	r0, [r7, #4]
    2340:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	2b00      	cmp	r3, #0
    2346:	d004      	beq.n	2352 <qspi_sync_init+0x1a>
    2348:	683b      	ldr	r3, [r7, #0]
    234a:	2b00      	cmp	r3, #0
    234c:	d001      	beq.n	2352 <qspi_sync_init+0x1a>
    234e:	2301      	movs	r3, #1
    2350:	e000      	b.n	2354 <qspi_sync_init+0x1c>
    2352:	2300      	movs	r3, #0
    2354:	f003 0301 	and.w	r3, r3, #1
    2358:	b2db      	uxtb	r3, r3
    235a:	2231      	movs	r2, #49	; 0x31
    235c:	4906      	ldr	r1, [pc, #24]	; (2378 <qspi_sync_init+0x40>)
    235e:	4618      	mov	r0, r3
    2360:	4b06      	ldr	r3, [pc, #24]	; (237c <qspi_sync_init+0x44>)
    2362:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2364:	687b      	ldr	r3, [r7, #4]
    2366:	6839      	ldr	r1, [r7, #0]
    2368:	4618      	mov	r0, r3
    236a:	4b05      	ldr	r3, [pc, #20]	; (2380 <qspi_sync_init+0x48>)
    236c:	4798      	blx	r3
    236e:	4603      	mov	r3, r0
}
    2370:	4618      	mov	r0, r3
    2372:	3708      	adds	r7, #8
    2374:	46bd      	mov	sp, r7
    2376:	bd80      	pop	{r7, pc}
    2378:	0000ee2c 	.word	0x0000ee2c
    237c:	0000341d 	.word	0x0000341d
    2380:	00005415 	.word	0x00005415

00002384 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2384:	b580      	push	{r7, lr}
    2386:	b082      	sub	sp, #8
    2388:	af00      	add	r7, sp, #0
    238a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    238c:	687b      	ldr	r3, [r7, #4]
    238e:	2b00      	cmp	r3, #0
    2390:	bf14      	ite	ne
    2392:	2301      	movne	r3, #1
    2394:	2300      	moveq	r3, #0
    2396:	b2db      	uxtb	r3, r3
    2398:	223f      	movs	r2, #63	; 0x3f
    239a:	4906      	ldr	r1, [pc, #24]	; (23b4 <qspi_sync_enable+0x30>)
    239c:	4618      	mov	r0, r3
    239e:	4b06      	ldr	r3, [pc, #24]	; (23b8 <qspi_sync_enable+0x34>)
    23a0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	4618      	mov	r0, r3
    23a6:	4b05      	ldr	r3, [pc, #20]	; (23bc <qspi_sync_enable+0x38>)
    23a8:	4798      	blx	r3
    23aa:	4603      	mov	r3, r0
}
    23ac:	4618      	mov	r0, r3
    23ae:	3708      	adds	r7, #8
    23b0:	46bd      	mov	sp, r7
    23b2:	bd80      	pop	{r7, pc}
    23b4:	0000ee2c 	.word	0x0000ee2c
    23b8:	0000341d 	.word	0x0000341d
    23bc:	00005489 	.word	0x00005489

000023c0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	b082      	sub	sp, #8
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	2b00      	cmp	r3, #0
    23cc:	bf14      	ite	ne
    23ce:	2301      	movne	r3, #1
    23d0:	2300      	moveq	r3, #0
    23d2:	b2db      	uxtb	r3, r3
    23d4:	2246      	movs	r2, #70	; 0x46
    23d6:	4906      	ldr	r1, [pc, #24]	; (23f0 <qspi_sync_disable+0x30>)
    23d8:	4618      	mov	r0, r3
    23da:	4b06      	ldr	r3, [pc, #24]	; (23f4 <qspi_sync_disable+0x34>)
    23dc:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	4618      	mov	r0, r3
    23e2:	4b05      	ldr	r3, [pc, #20]	; (23f8 <qspi_sync_disable+0x38>)
    23e4:	4798      	blx	r3
    23e6:	4603      	mov	r3, r0
}
    23e8:	4618      	mov	r0, r3
    23ea:	3708      	adds	r7, #8
    23ec:	46bd      	mov	sp, r7
    23ee:	bd80      	pop	{r7, pc}
    23f0:	0000ee2c 	.word	0x0000ee2c
    23f4:	0000341d 	.word	0x0000341d
    23f8:	000054ad 	.word	0x000054ad

000023fc <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
    2404:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	2b00      	cmp	r3, #0
    240a:	d004      	beq.n	2416 <qspi_sync_serial_run_command+0x1a>
    240c:	683b      	ldr	r3, [r7, #0]
    240e:	2b00      	cmp	r3, #0
    2410:	d001      	beq.n	2416 <qspi_sync_serial_run_command+0x1a>
    2412:	2301      	movs	r3, #1
    2414:	e000      	b.n	2418 <qspi_sync_serial_run_command+0x1c>
    2416:	2300      	movs	r3, #0
    2418:	f003 0301 	and.w	r3, r3, #1
    241c:	b2db      	uxtb	r3, r3
    241e:	224d      	movs	r2, #77	; 0x4d
    2420:	4906      	ldr	r1, [pc, #24]	; (243c <qspi_sync_serial_run_command+0x40>)
    2422:	4618      	mov	r0, r3
    2424:	4b06      	ldr	r3, [pc, #24]	; (2440 <qspi_sync_serial_run_command+0x44>)
    2426:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	6839      	ldr	r1, [r7, #0]
    242c:	4618      	mov	r0, r3
    242e:	4b05      	ldr	r3, [pc, #20]	; (2444 <qspi_sync_serial_run_command+0x48>)
    2430:	4798      	blx	r3
    2432:	4603      	mov	r3, r0
}
    2434:	4618      	mov	r0, r3
    2436:	3708      	adds	r7, #8
    2438:	46bd      	mov	sp, r7
    243a:	bd80      	pop	{r7, pc}
    243c:	0000ee2c 	.word	0x0000ee2c
    2440:	0000341d 	.word	0x0000341d
    2444:	000055f9 	.word	0x000055f9

00002448 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2448:	b580      	push	{r7, lr}
    244a:	b084      	sub	sp, #16
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2452:	2300      	movs	r3, #0
    2454:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	2b00      	cmp	r3, #0
    245a:	d004      	beq.n	2466 <spi_m_sync_init+0x1e>
    245c:	683b      	ldr	r3, [r7, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d001      	beq.n	2466 <spi_m_sync_init+0x1e>
    2462:	2301      	movs	r3, #1
    2464:	e000      	b.n	2468 <spi_m_sync_init+0x20>
    2466:	2300      	movs	r3, #0
    2468:	f003 0301 	and.w	r3, r3, #1
    246c:	b2db      	uxtb	r3, r3
    246e:	2240      	movs	r2, #64	; 0x40
    2470:	4910      	ldr	r1, [pc, #64]	; (24b4 <spi_m_sync_init+0x6c>)
    2472:	4618      	mov	r0, r3
    2474:	4b10      	ldr	r3, [pc, #64]	; (24b8 <spi_m_sync_init+0x70>)
    2476:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	683a      	ldr	r2, [r7, #0]
    247c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	3304      	adds	r3, #4
    2482:	6839      	ldr	r1, [r7, #0]
    2484:	4618      	mov	r0, r3
    2486:	4b0d      	ldr	r3, [pc, #52]	; (24bc <spi_m_sync_init+0x74>)
    2488:	4798      	blx	r3
    248a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    248c:	68fb      	ldr	r3, [r7, #12]
    248e:	2b00      	cmp	r3, #0
    2490:	da01      	bge.n	2496 <spi_m_sync_init+0x4e>
		return rc;
    2492:	68fb      	ldr	r3, [r7, #12]
    2494:	e00a      	b.n	24ac <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2496:	687b      	ldr	r3, [r7, #4]
    2498:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    249c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	4a07      	ldr	r2, [pc, #28]	; (24c0 <spi_m_sync_init+0x78>)
    24a2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	4a07      	ldr	r2, [pc, #28]	; (24c4 <spi_m_sync_init+0x7c>)
    24a8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    24aa:	2300      	movs	r3, #0
}
    24ac:	4618      	mov	r0, r3
    24ae:	3710      	adds	r7, #16
    24b0:	46bd      	mov	sp, r7
    24b2:	bd80      	pop	{r7, pc}
    24b4:	0000ee48 	.word	0x0000ee48
    24b8:	0000341d 	.word	0x0000341d
    24bc:	00006929 	.word	0x00006929
    24c0:	000024c9 	.word	0x000024c9
    24c4:	00002521 	.word	0x00002521

000024c8 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b088      	sub	sp, #32
    24cc:	af00      	add	r7, sp, #0
    24ce:	60f8      	str	r0, [r7, #12]
    24d0:	60b9      	str	r1, [r7, #8]
    24d2:	4613      	mov	r3, r2
    24d4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    24d6:	68fb      	ldr	r3, [r7, #12]
    24d8:	2b00      	cmp	r3, #0
    24da:	bf14      	ite	ne
    24dc:	2301      	movne	r3, #1
    24de:	2300      	moveq	r3, #0
    24e0:	b2db      	uxtb	r3, r3
    24e2:	2287      	movs	r2, #135	; 0x87
    24e4:	490b      	ldr	r1, [pc, #44]	; (2514 <_spi_m_sync_io_read+0x4c>)
    24e6:	4618      	mov	r0, r3
    24e8:	4b0b      	ldr	r3, [pc, #44]	; (2518 <_spi_m_sync_io_read+0x50>)
    24ea:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    24ec:	68fb      	ldr	r3, [r7, #12]
    24ee:	3b0c      	subs	r3, #12
    24f0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    24f2:	68bb      	ldr	r3, [r7, #8]
    24f4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    24f6:	2300      	movs	r3, #0
    24f8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    24fa:	88fb      	ldrh	r3, [r7, #6]
    24fc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    24fe:	f107 0310 	add.w	r3, r7, #16
    2502:	4619      	mov	r1, r3
    2504:	69f8      	ldr	r0, [r7, #28]
    2506:	4b05      	ldr	r3, [pc, #20]	; (251c <_spi_m_sync_io_read+0x54>)
    2508:	4798      	blx	r3
    250a:	4603      	mov	r3, r0
}
    250c:	4618      	mov	r0, r3
    250e:	3720      	adds	r7, #32
    2510:	46bd      	mov	sp, r7
    2512:	bd80      	pop	{r7, pc}
    2514:	0000ee48 	.word	0x0000ee48
    2518:	0000341d 	.word	0x0000341d
    251c:	00002579 	.word	0x00002579

00002520 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2520:	b580      	push	{r7, lr}
    2522:	b088      	sub	sp, #32
    2524:	af00      	add	r7, sp, #0
    2526:	60f8      	str	r0, [r7, #12]
    2528:	60b9      	str	r1, [r7, #8]
    252a:	4613      	mov	r3, r2
    252c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    252e:	68fb      	ldr	r3, [r7, #12]
    2530:	2b00      	cmp	r3, #0
    2532:	bf14      	ite	ne
    2534:	2301      	movne	r3, #1
    2536:	2300      	moveq	r3, #0
    2538:	b2db      	uxtb	r3, r3
    253a:	22a3      	movs	r2, #163	; 0xa3
    253c:	490b      	ldr	r1, [pc, #44]	; (256c <_spi_m_sync_io_write+0x4c>)
    253e:	4618      	mov	r0, r3
    2540:	4b0b      	ldr	r3, [pc, #44]	; (2570 <_spi_m_sync_io_write+0x50>)
    2542:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	3b0c      	subs	r3, #12
    2548:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    254a:	2300      	movs	r3, #0
    254c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    254e:	68bb      	ldr	r3, [r7, #8]
    2550:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2552:	88fb      	ldrh	r3, [r7, #6]
    2554:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2556:	f107 0310 	add.w	r3, r7, #16
    255a:	4619      	mov	r1, r3
    255c:	69f8      	ldr	r0, [r7, #28]
    255e:	4b05      	ldr	r3, [pc, #20]	; (2574 <_spi_m_sync_io_write+0x54>)
    2560:	4798      	blx	r3
    2562:	4603      	mov	r3, r0
}
    2564:	4618      	mov	r0, r3
    2566:	3720      	adds	r7, #32
    2568:	46bd      	mov	sp, r7
    256a:	bd80      	pop	{r7, pc}
    256c:	0000ee48 	.word	0x0000ee48
    2570:	0000341d 	.word	0x0000341d
    2574:	00002579 	.word	0x00002579

00002578 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2578:	b580      	push	{r7, lr}
    257a:	b086      	sub	sp, #24
    257c:	af00      	add	r7, sp, #0
    257e:	6078      	str	r0, [r7, #4]
    2580:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	2b00      	cmp	r3, #0
    2586:	d004      	beq.n	2592 <spi_m_sync_transfer+0x1a>
    2588:	683b      	ldr	r3, [r7, #0]
    258a:	2b00      	cmp	r3, #0
    258c:	d001      	beq.n	2592 <spi_m_sync_transfer+0x1a>
    258e:	2301      	movs	r3, #1
    2590:	e000      	b.n	2594 <spi_m_sync_transfer+0x1c>
    2592:	2300      	movs	r3, #0
    2594:	f003 0301 	and.w	r3, r3, #1
    2598:	b2db      	uxtb	r3, r3
    259a:	22b3      	movs	r2, #179	; 0xb3
    259c:	490c      	ldr	r1, [pc, #48]	; (25d0 <spi_m_sync_transfer+0x58>)
    259e:	4618      	mov	r0, r3
    25a0:	4b0c      	ldr	r3, [pc, #48]	; (25d4 <spi_m_sync_transfer+0x5c>)
    25a2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    25a4:	683b      	ldr	r3, [r7, #0]
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    25aa:	683b      	ldr	r3, [r7, #0]
    25ac:	685b      	ldr	r3, [r3, #4]
    25ae:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    25b0:	683b      	ldr	r3, [r7, #0]
    25b2:	689b      	ldr	r3, [r3, #8]
    25b4:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	3304      	adds	r3, #4
    25ba:	f107 020c 	add.w	r2, r7, #12
    25be:	4611      	mov	r1, r2
    25c0:	4618      	mov	r0, r3
    25c2:	4b05      	ldr	r3, [pc, #20]	; (25d8 <spi_m_sync_transfer+0x60>)
    25c4:	4798      	blx	r3
    25c6:	4603      	mov	r3, r0
}
    25c8:	4618      	mov	r0, r3
    25ca:	3718      	adds	r7, #24
    25cc:	46bd      	mov	sp, r7
    25ce:	bd80      	pop	{r7, pc}
    25d0:	0000ee48 	.word	0x0000ee48
    25d4:	0000341d 	.word	0x0000341d
    25d8:	00006b89 	.word	0x00006b89

000025dc <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    25dc:	b480      	push	{r7}
    25de:	b083      	sub	sp, #12
    25e0:	af00      	add	r7, sp, #0
    25e2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	681b      	ldr	r3, [r3, #0]
}
    25e8:	4618      	mov	r0, r3
    25ea:	370c      	adds	r7, #12
    25ec:	46bd      	mov	sp, r7
    25ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    25f2:	4770      	bx	lr

000025f4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    25f4:	b480      	push	{r7}
    25f6:	b083      	sub	sp, #12
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	2b00      	cmp	r3, #0
    2600:	d002      	beq.n	2608 <list_get_next_element+0x14>
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	681b      	ldr	r3, [r3, #0]
    2606:	e000      	b.n	260a <list_get_next_element+0x16>
    2608:	2300      	movs	r3, #0
}
    260a:	4618      	mov	r0, r3
    260c:	370c      	adds	r7, #12
    260e:	46bd      	mov	sp, r7
    2610:	f85d 7b04 	ldr.w	r7, [sp], #4
    2614:	4770      	bx	lr
	...

00002618 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2618:	b580      	push	{r7, lr}
    261a:	b084      	sub	sp, #16
    261c:	af00      	add	r7, sp, #0
    261e:	60f8      	str	r0, [r7, #12]
    2620:	60b9      	str	r1, [r7, #8]
    2622:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2624:	68fb      	ldr	r3, [r7, #12]
    2626:	2b00      	cmp	r3, #0
    2628:	d007      	beq.n	263a <timer_init+0x22>
    262a:	68bb      	ldr	r3, [r7, #8]
    262c:	2b00      	cmp	r3, #0
    262e:	d004      	beq.n	263a <timer_init+0x22>
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	2b00      	cmp	r3, #0
    2634:	d001      	beq.n	263a <timer_init+0x22>
    2636:	2301      	movs	r3, #1
    2638:	e000      	b.n	263c <timer_init+0x24>
    263a:	2300      	movs	r3, #0
    263c:	f003 0301 	and.w	r3, r3, #1
    2640:	b2db      	uxtb	r3, r3
    2642:	223b      	movs	r2, #59	; 0x3b
    2644:	490c      	ldr	r1, [pc, #48]	; (2678 <timer_init+0x60>)
    2646:	4618      	mov	r0, r3
    2648:	4b0c      	ldr	r3, [pc, #48]	; (267c <timer_init+0x64>)
    264a:	4798      	blx	r3
	descr->func = func;
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	687a      	ldr	r2, [r7, #4]
    2650:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2652:	68fb      	ldr	r3, [r7, #12]
    2654:	681b      	ldr	r3, [r3, #0]
    2656:	681b      	ldr	r3, [r3, #0]
    2658:	68fa      	ldr	r2, [r7, #12]
    265a:	3204      	adds	r2, #4
    265c:	68b9      	ldr	r1, [r7, #8]
    265e:	4610      	mov	r0, r2
    2660:	4798      	blx	r3
	descr->time                           = 0;
    2662:	68fb      	ldr	r3, [r7, #12]
    2664:	2200      	movs	r2, #0
    2666:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2668:	68fb      	ldr	r3, [r7, #12]
    266a:	4a05      	ldr	r2, [pc, #20]	; (2680 <timer_init+0x68>)
    266c:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    266e:	2300      	movs	r3, #0
}
    2670:	4618      	mov	r0, r3
    2672:	3710      	adds	r7, #16
    2674:	46bd      	mov	sp, r7
    2676:	bd80      	pop	{r7, pc}
    2678:	0000ee64 	.word	0x0000ee64
    267c:	0000341d 	.word	0x0000341d
    2680:	00002a09 	.word	0x00002a09

00002684 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2684:	b580      	push	{r7, lr}
    2686:	b082      	sub	sp, #8
    2688:	af00      	add	r7, sp, #0
    268a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	2b00      	cmp	r3, #0
    2690:	d005      	beq.n	269e <timer_start+0x1a>
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	681b      	ldr	r3, [r3, #0]
    2696:	2b00      	cmp	r3, #0
    2698:	d001      	beq.n	269e <timer_start+0x1a>
    269a:	2301      	movs	r3, #1
    269c:	e000      	b.n	26a0 <timer_start+0x1c>
    269e:	2300      	movs	r3, #0
    26a0:	f003 0301 	and.w	r3, r3, #1
    26a4:	b2db      	uxtb	r3, r3
    26a6:	2254      	movs	r2, #84	; 0x54
    26a8:	490e      	ldr	r1, [pc, #56]	; (26e4 <timer_start+0x60>)
    26aa:	4618      	mov	r0, r3
    26ac:	4b0e      	ldr	r3, [pc, #56]	; (26e8 <timer_start+0x64>)
    26ae:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	681b      	ldr	r3, [r3, #0]
    26b4:	699b      	ldr	r3, [r3, #24]
    26b6:	687a      	ldr	r2, [r7, #4]
    26b8:	3204      	adds	r2, #4
    26ba:	4610      	mov	r0, r2
    26bc:	4798      	blx	r3
    26be:	4603      	mov	r3, r0
    26c0:	2b00      	cmp	r3, #0
    26c2:	d002      	beq.n	26ca <timer_start+0x46>
		return ERR_DENIED;
    26c4:	f06f 0310 	mvn.w	r3, #16
    26c8:	e007      	b.n	26da <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	689b      	ldr	r3, [r3, #8]
    26d0:	687a      	ldr	r2, [r7, #4]
    26d2:	3204      	adds	r2, #4
    26d4:	4610      	mov	r0, r2
    26d6:	4798      	blx	r3

	return ERR_NONE;
    26d8:	2300      	movs	r3, #0
}
    26da:	4618      	mov	r0, r3
    26dc:	3708      	adds	r7, #8
    26de:	46bd      	mov	sp, r7
    26e0:	bd80      	pop	{r7, pc}
    26e2:	bf00      	nop
    26e4:	0000ee64 	.word	0x0000ee64
    26e8:	0000341d 	.word	0x0000341d

000026ec <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b082      	sub	sp, #8
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d005      	beq.n	2706 <timer_stop+0x1a>
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	681b      	ldr	r3, [r3, #0]
    26fe:	2b00      	cmp	r3, #0
    2700:	d001      	beq.n	2706 <timer_stop+0x1a>
    2702:	2301      	movs	r3, #1
    2704:	e000      	b.n	2708 <timer_stop+0x1c>
    2706:	2300      	movs	r3, #0
    2708:	f003 0301 	and.w	r3, r3, #1
    270c:	b2db      	uxtb	r3, r3
    270e:	2262      	movs	r2, #98	; 0x62
    2710:	490f      	ldr	r1, [pc, #60]	; (2750 <timer_stop+0x64>)
    2712:	4618      	mov	r0, r3
    2714:	4b0f      	ldr	r3, [pc, #60]	; (2754 <timer_stop+0x68>)
    2716:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	699b      	ldr	r3, [r3, #24]
    271e:	687a      	ldr	r2, [r7, #4]
    2720:	3204      	adds	r2, #4
    2722:	4610      	mov	r0, r2
    2724:	4798      	blx	r3
    2726:	4603      	mov	r3, r0
    2728:	f083 0301 	eor.w	r3, r3, #1
    272c:	b2db      	uxtb	r3, r3
    272e:	2b00      	cmp	r3, #0
    2730:	d002      	beq.n	2738 <timer_stop+0x4c>
		return ERR_DENIED;
    2732:	f06f 0310 	mvn.w	r3, #16
    2736:	e007      	b.n	2748 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	68db      	ldr	r3, [r3, #12]
    273e:	687a      	ldr	r2, [r7, #4]
    2740:	3204      	adds	r2, #4
    2742:	4610      	mov	r0, r2
    2744:	4798      	blx	r3

	return ERR_NONE;
    2746:	2300      	movs	r3, #0
}
    2748:	4618      	mov	r0, r3
    274a:	3708      	adds	r7, #8
    274c:	46bd      	mov	sp, r7
    274e:	bd80      	pop	{r7, pc}
    2750:	0000ee64 	.word	0x0000ee64
    2754:	0000341d 	.word	0x0000341d

00002758 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2758:	b580      	push	{r7, lr}
    275a:	b084      	sub	sp, #16
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
    2760:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	2b00      	cmp	r3, #0
    2766:	d008      	beq.n	277a <timer_add_task+0x22>
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	2b00      	cmp	r3, #0
    276c:	d005      	beq.n	277a <timer_add_task+0x22>
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	681b      	ldr	r3, [r3, #0]
    2772:	2b00      	cmp	r3, #0
    2774:	d001      	beq.n	277a <timer_add_task+0x22>
    2776:	2301      	movs	r3, #1
    2778:	e000      	b.n	277c <timer_add_task+0x24>
    277a:	2300      	movs	r3, #0
    277c:	f003 0301 	and.w	r3, r3, #1
    2780:	b2db      	uxtb	r3, r3
    2782:	227b      	movs	r2, #123	; 0x7b
    2784:	492f      	ldr	r1, [pc, #188]	; (2844 <timer_add_task+0xec>)
    2786:	4618      	mov	r0, r3
    2788:	4b2f      	ldr	r3, [pc, #188]	; (2848 <timer_add_task+0xf0>)
    278a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	7f1b      	ldrb	r3, [r3, #28]
    2790:	b2db      	uxtb	r3, r3
    2792:	f043 0301 	orr.w	r3, r3, #1
    2796:	b2da      	uxtb	r2, r3
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	3318      	adds	r3, #24
    27a0:	6839      	ldr	r1, [r7, #0]
    27a2:	4618      	mov	r0, r3
    27a4:	4b29      	ldr	r3, [pc, #164]	; (284c <timer_add_task+0xf4>)
    27a6:	4798      	blx	r3
    27a8:	4603      	mov	r3, r0
    27aa:	2b00      	cmp	r3, #0
    27ac:	d00f      	beq.n	27ce <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	7f1b      	ldrb	r3, [r3, #28]
    27b2:	b2db      	uxtb	r3, r3
    27b4:	f023 0301 	bic.w	r3, r3, #1
    27b8:	b2da      	uxtb	r2, r3
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    27be:	2280      	movs	r2, #128	; 0x80
    27c0:	4920      	ldr	r1, [pc, #128]	; (2844 <timer_add_task+0xec>)
    27c2:	2000      	movs	r0, #0
    27c4:	4b20      	ldr	r3, [pc, #128]	; (2848 <timer_add_task+0xf0>)
    27c6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    27c8:	f06f 0311 	mvn.w	r3, #17
    27cc:	e035      	b.n	283a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	695a      	ldr	r2, [r3, #20]
    27d2:	683b      	ldr	r3, [r7, #0]
    27d4:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	f103 0018 	add.w	r0, r3, #24
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	695b      	ldr	r3, [r3, #20]
    27e0:	461a      	mov	r2, r3
    27e2:	6839      	ldr	r1, [r7, #0]
    27e4:	4b1a      	ldr	r3, [pc, #104]	; (2850 <timer_add_task+0xf8>)
    27e6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	7f1b      	ldrb	r3, [r3, #28]
    27ec:	b2db      	uxtb	r3, r3
    27ee:	f023 0301 	bic.w	r3, r3, #1
    27f2:	b2da      	uxtb	r2, r3
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	7f1b      	ldrb	r3, [r3, #28]
    27fc:	b2db      	uxtb	r3, r3
    27fe:	f003 0302 	and.w	r3, r3, #2
    2802:	2b00      	cmp	r3, #0
    2804:	d018      	beq.n	2838 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2806:	f107 030c 	add.w	r3, r7, #12
    280a:	4618      	mov	r0, r3
    280c:	4b11      	ldr	r3, [pc, #68]	; (2854 <timer_add_task+0xfc>)
    280e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	7f1b      	ldrb	r3, [r3, #28]
    2814:	b2db      	uxtb	r3, r3
    2816:	f023 0302 	bic.w	r3, r3, #2
    281a:	b2da      	uxtb	r2, r3
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	681b      	ldr	r3, [r3, #0]
    2824:	69db      	ldr	r3, [r3, #28]
    2826:	687a      	ldr	r2, [r7, #4]
    2828:	3204      	adds	r2, #4
    282a:	4610      	mov	r0, r2
    282c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    282e:	f107 030c 	add.w	r3, r7, #12
    2832:	4618      	mov	r0, r3
    2834:	4b08      	ldr	r3, [pc, #32]	; (2858 <timer_add_task+0x100>)
    2836:	4798      	blx	r3
	}

	return ERR_NONE;
    2838:	2300      	movs	r3, #0
}
    283a:	4618      	mov	r0, r3
    283c:	3710      	adds	r7, #16
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	bf00      	nop
    2844:	0000ee64 	.word	0x0000ee64
    2848:	0000341d 	.word	0x0000341d
    284c:	00003445 	.word	0x00003445
    2850:	00002959 	.word	0x00002959
    2854:	0000af65 	.word	0x0000af65
    2858:	0000af8b 	.word	0x0000af8b

0000285c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    285c:	b580      	push	{r7, lr}
    285e:	b084      	sub	sp, #16
    2860:	af00      	add	r7, sp, #0
    2862:	6078      	str	r0, [r7, #4]
    2864:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	2b00      	cmp	r3, #0
    286a:	d008      	beq.n	287e <timer_remove_task+0x22>
    286c:	683b      	ldr	r3, [r7, #0]
    286e:	2b00      	cmp	r3, #0
    2870:	d005      	beq.n	287e <timer_remove_task+0x22>
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	2b00      	cmp	r3, #0
    2878:	d001      	beq.n	287e <timer_remove_task+0x22>
    287a:	2301      	movs	r3, #1
    287c:	e000      	b.n	2880 <timer_remove_task+0x24>
    287e:	2300      	movs	r3, #0
    2880:	f003 0301 	and.w	r3, r3, #1
    2884:	b2db      	uxtb	r3, r3
    2886:	2296      	movs	r2, #150	; 0x96
    2888:	492d      	ldr	r1, [pc, #180]	; (2940 <timer_remove_task+0xe4>)
    288a:	4618      	mov	r0, r3
    288c:	4b2d      	ldr	r3, [pc, #180]	; (2944 <timer_remove_task+0xe8>)
    288e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	7f1b      	ldrb	r3, [r3, #28]
    2894:	b2db      	uxtb	r3, r3
    2896:	f043 0301 	orr.w	r3, r3, #1
    289a:	b2da      	uxtb	r2, r3
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	3318      	adds	r3, #24
    28a4:	6839      	ldr	r1, [r7, #0]
    28a6:	4618      	mov	r0, r3
    28a8:	4b27      	ldr	r3, [pc, #156]	; (2948 <timer_remove_task+0xec>)
    28aa:	4798      	blx	r3
    28ac:	4603      	mov	r3, r0
    28ae:	f083 0301 	eor.w	r3, r3, #1
    28b2:	b2db      	uxtb	r3, r3
    28b4:	2b00      	cmp	r3, #0
    28b6:	d00f      	beq.n	28d8 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	7f1b      	ldrb	r3, [r3, #28]
    28bc:	b2db      	uxtb	r3, r3
    28be:	f023 0301 	bic.w	r3, r3, #1
    28c2:	b2da      	uxtb	r2, r3
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    28c8:	229b      	movs	r2, #155	; 0x9b
    28ca:	491d      	ldr	r1, [pc, #116]	; (2940 <timer_remove_task+0xe4>)
    28cc:	2000      	movs	r0, #0
    28ce:	4b1d      	ldr	r3, [pc, #116]	; (2944 <timer_remove_task+0xe8>)
    28d0:	4798      	blx	r3
		return ERR_NOT_FOUND;
    28d2:	f06f 0309 	mvn.w	r3, #9
    28d6:	e02e      	b.n	2936 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	3318      	adds	r3, #24
    28dc:	6839      	ldr	r1, [r7, #0]
    28de:	4618      	mov	r0, r3
    28e0:	4b1a      	ldr	r3, [pc, #104]	; (294c <timer_remove_task+0xf0>)
    28e2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	7f1b      	ldrb	r3, [r3, #28]
    28e8:	b2db      	uxtb	r3, r3
    28ea:	f023 0301 	bic.w	r3, r3, #1
    28ee:	b2da      	uxtb	r2, r3
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	7f1b      	ldrb	r3, [r3, #28]
    28f8:	b2db      	uxtb	r3, r3
    28fa:	f003 0302 	and.w	r3, r3, #2
    28fe:	2b00      	cmp	r3, #0
    2900:	d018      	beq.n	2934 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2902:	f107 030c 	add.w	r3, r7, #12
    2906:	4618      	mov	r0, r3
    2908:	4b11      	ldr	r3, [pc, #68]	; (2950 <timer_remove_task+0xf4>)
    290a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	7f1b      	ldrb	r3, [r3, #28]
    2910:	b2db      	uxtb	r3, r3
    2912:	f023 0302 	bic.w	r3, r3, #2
    2916:	b2da      	uxtb	r2, r3
    2918:	687b      	ldr	r3, [r7, #4]
    291a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	69db      	ldr	r3, [r3, #28]
    2922:	687a      	ldr	r2, [r7, #4]
    2924:	3204      	adds	r2, #4
    2926:	4610      	mov	r0, r2
    2928:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    292a:	f107 030c 	add.w	r3, r7, #12
    292e:	4618      	mov	r0, r3
    2930:	4b08      	ldr	r3, [pc, #32]	; (2954 <timer_remove_task+0xf8>)
    2932:	4798      	blx	r3
	}

	return ERR_NONE;
    2934:	2300      	movs	r3, #0
}
    2936:	4618      	mov	r0, r3
    2938:	3710      	adds	r7, #16
    293a:	46bd      	mov	sp, r7
    293c:	bd80      	pop	{r7, pc}
    293e:	bf00      	nop
    2940:	0000ee64 	.word	0x0000ee64
    2944:	0000341d 	.word	0x0000341d
    2948:	00003445 	.word	0x00003445
    294c:	000035a7 	.word	0x000035a7
    2950:	0000af65 	.word	0x0000af65
    2954:	0000af8b 	.word	0x0000af8b

00002958 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2958:	b580      	push	{r7, lr}
    295a:	b088      	sub	sp, #32
    295c:	af00      	add	r7, sp, #0
    295e:	60f8      	str	r0, [r7, #12]
    2960:	60b9      	str	r1, [r7, #8]
    2962:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2964:	2300      	movs	r3, #0
    2966:	61bb      	str	r3, [r7, #24]
    2968:	68f8      	ldr	r0, [r7, #12]
    296a:	4b23      	ldr	r3, [pc, #140]	; (29f8 <timer_add_timer_task+0xa0>)
    296c:	4798      	blx	r3
    296e:	6138      	str	r0, [r7, #16]

	if (!head) {
    2970:	693b      	ldr	r3, [r7, #16]
    2972:	2b00      	cmp	r3, #0
    2974:	d104      	bne.n	2980 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2976:	68b9      	ldr	r1, [r7, #8]
    2978:	68f8      	ldr	r0, [r7, #12]
    297a:	4b20      	ldr	r3, [pc, #128]	; (29fc <timer_add_timer_task+0xa4>)
    297c:	4798      	blx	r3
		return;
    297e:	e037      	b.n	29f0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2980:	693b      	ldr	r3, [r7, #16]
    2982:	61fb      	str	r3, [r7, #28]
    2984:	e022      	b.n	29cc <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2986:	69fb      	ldr	r3, [r7, #28]
    2988:	685a      	ldr	r2, [r3, #4]
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	429a      	cmp	r2, r3
    298e:	d808      	bhi.n	29a2 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2990:	69fb      	ldr	r3, [r7, #28]
    2992:	689a      	ldr	r2, [r3, #8]
    2994:	69fb      	ldr	r3, [r7, #28]
    2996:	6859      	ldr	r1, [r3, #4]
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	1acb      	subs	r3, r1, r3
    299c:	4413      	add	r3, r2
    299e:	617b      	str	r3, [r7, #20]
    29a0:	e009      	b.n	29b6 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    29a2:	69fb      	ldr	r3, [r7, #28]
    29a4:	689a      	ldr	r2, [r3, #8]
    29a6:	69fb      	ldr	r3, [r7, #28]
    29a8:	685b      	ldr	r3, [r3, #4]
    29aa:	441a      	add	r2, r3
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	425b      	negs	r3, r3
    29b0:	4413      	add	r3, r2
    29b2:	3301      	adds	r3, #1
    29b4:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    29b6:	68bb      	ldr	r3, [r7, #8]
    29b8:	689a      	ldr	r2, [r3, #8]
    29ba:	697b      	ldr	r3, [r7, #20]
    29bc:	429a      	cmp	r2, r3
    29be:	d909      	bls.n	29d4 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    29c0:	69fb      	ldr	r3, [r7, #28]
    29c2:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    29c4:	69f8      	ldr	r0, [r7, #28]
    29c6:	4b0e      	ldr	r3, [pc, #56]	; (2a00 <timer_add_timer_task+0xa8>)
    29c8:	4798      	blx	r3
    29ca:	61f8      	str	r0, [r7, #28]
    29cc:	69fb      	ldr	r3, [r7, #28]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d1d9      	bne.n	2986 <timer_add_timer_task+0x2e>
    29d2:	e000      	b.n	29d6 <timer_add_timer_task+0x7e>
			break;
    29d4:	bf00      	nop
	}

	if (it == head) {
    29d6:	69fa      	ldr	r2, [r7, #28]
    29d8:	693b      	ldr	r3, [r7, #16]
    29da:	429a      	cmp	r2, r3
    29dc:	d104      	bne.n	29e8 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    29de:	68b9      	ldr	r1, [r7, #8]
    29e0:	68f8      	ldr	r0, [r7, #12]
    29e2:	4b06      	ldr	r3, [pc, #24]	; (29fc <timer_add_timer_task+0xa4>)
    29e4:	4798      	blx	r3
    29e6:	e003      	b.n	29f0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    29e8:	68b9      	ldr	r1, [r7, #8]
    29ea:	69b8      	ldr	r0, [r7, #24]
    29ec:	4b05      	ldr	r3, [pc, #20]	; (2a04 <timer_add_timer_task+0xac>)
    29ee:	4798      	blx	r3
	}
}
    29f0:	3720      	adds	r7, #32
    29f2:	46bd      	mov	sp, r7
    29f4:	bd80      	pop	{r7, pc}
    29f6:	bf00      	nop
    29f8:	000025dd 	.word	0x000025dd
    29fc:	0000347d 	.word	0x0000347d
    2a00:	000025f5 	.word	0x000025f5
    2a04:	000034d5 	.word	0x000034d5

00002a08 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2a08:	b580      	push	{r7, lr}
    2a0a:	b086      	sub	sp, #24
    2a0c:	af00      	add	r7, sp, #0
    2a0e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	3b04      	subs	r3, #4
    2a14:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2a16:	693b      	ldr	r3, [r7, #16]
    2a18:	3318      	adds	r3, #24
    2a1a:	4618      	mov	r0, r3
    2a1c:	4b27      	ldr	r3, [pc, #156]	; (2abc <timer_process_counted+0xb4>)
    2a1e:	4798      	blx	r3
    2a20:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2a22:	693b      	ldr	r3, [r7, #16]
    2a24:	695b      	ldr	r3, [r3, #20]
    2a26:	1c5a      	adds	r2, r3, #1
    2a28:	693b      	ldr	r3, [r7, #16]
    2a2a:	615a      	str	r2, [r3, #20]
    2a2c:	693b      	ldr	r3, [r7, #16]
    2a2e:	695b      	ldr	r3, [r3, #20]
    2a30:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2a32:	693b      	ldr	r3, [r7, #16]
    2a34:	7f1b      	ldrb	r3, [r3, #28]
    2a36:	b2db      	uxtb	r3, r3
    2a38:	f003 0301 	and.w	r3, r3, #1
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d106      	bne.n	2a4e <timer_process_counted+0x46>
    2a40:	693b      	ldr	r3, [r7, #16]
    2a42:	7f1b      	ldrb	r3, [r3, #28]
    2a44:	b2db      	uxtb	r3, r3
    2a46:	f003 0302 	and.w	r3, r3, #2
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d027      	beq.n	2a9e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2a4e:	693b      	ldr	r3, [r7, #16]
    2a50:	7f1b      	ldrb	r3, [r3, #28]
    2a52:	b2db      	uxtb	r3, r3
    2a54:	f043 0302 	orr.w	r3, r3, #2
    2a58:	b2da      	uxtb	r2, r3
    2a5a:	693b      	ldr	r3, [r7, #16]
    2a5c:	771a      	strb	r2, [r3, #28]
		return;
    2a5e:	e029      	b.n	2ab4 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2a60:	697b      	ldr	r3, [r7, #20]
    2a62:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2a64:	693b      	ldr	r3, [r7, #16]
    2a66:	3318      	adds	r3, #24
    2a68:	4618      	mov	r0, r3
    2a6a:	4b15      	ldr	r3, [pc, #84]	; (2ac0 <timer_process_counted+0xb8>)
    2a6c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2a6e:	68bb      	ldr	r3, [r7, #8]
    2a70:	7c1b      	ldrb	r3, [r3, #16]
    2a72:	2b01      	cmp	r3, #1
    2a74:	d109      	bne.n	2a8a <timer_process_counted+0x82>
			tmp->time_label = time;
    2a76:	68bb      	ldr	r3, [r7, #8]
    2a78:	68fa      	ldr	r2, [r7, #12]
    2a7a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2a7c:	693b      	ldr	r3, [r7, #16]
    2a7e:	3318      	adds	r3, #24
    2a80:	68fa      	ldr	r2, [r7, #12]
    2a82:	68b9      	ldr	r1, [r7, #8]
    2a84:	4618      	mov	r0, r3
    2a86:	4b0f      	ldr	r3, [pc, #60]	; (2ac4 <timer_process_counted+0xbc>)
    2a88:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2a8a:	693b      	ldr	r3, [r7, #16]
    2a8c:	3318      	adds	r3, #24
    2a8e:	4618      	mov	r0, r3
    2a90:	4b0a      	ldr	r3, [pc, #40]	; (2abc <timer_process_counted+0xb4>)
    2a92:	4798      	blx	r3
    2a94:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2a96:	68bb      	ldr	r3, [r7, #8]
    2a98:	68db      	ldr	r3, [r3, #12]
    2a9a:	68b8      	ldr	r0, [r7, #8]
    2a9c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2a9e:	697b      	ldr	r3, [r7, #20]
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d007      	beq.n	2ab4 <timer_process_counted+0xac>
    2aa4:	697b      	ldr	r3, [r7, #20]
    2aa6:	685b      	ldr	r3, [r3, #4]
    2aa8:	68fa      	ldr	r2, [r7, #12]
    2aaa:	1ad2      	subs	r2, r2, r3
    2aac:	697b      	ldr	r3, [r7, #20]
    2aae:	689b      	ldr	r3, [r3, #8]
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d2d5      	bcs.n	2a60 <timer_process_counted+0x58>
	}
}
    2ab4:	3718      	adds	r7, #24
    2ab6:	46bd      	mov	sp, r7
    2ab8:	bd80      	pop	{r7, pc}
    2aba:	bf00      	nop
    2abc:	000025dd 	.word	0x000025dd
    2ac0:	00003575 	.word	0x00003575
    2ac4:	00002959 	.word	0x00002959

00002ac8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2ac8:	b480      	push	{r7}
    2aca:	b085      	sub	sp, #20
    2acc:	af00      	add	r7, sp, #0
    2ace:	4603      	mov	r3, r0
    2ad0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2ad2:	2300      	movs	r3, #0
    2ad4:	73fb      	strb	r3, [r7, #15]
    2ad6:	e029      	b.n	2b2c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2adc:	4a19      	ldr	r2, [pc, #100]	; (2b44 <_usb_d_find_ep+0x7c>)
    2ade:	015b      	lsls	r3, r3, #5
    2ae0:	4413      	add	r3, r2
    2ae2:	3301      	adds	r3, #1
    2ae4:	781b      	ldrb	r3, [r3, #0]
    2ae6:	79fa      	ldrb	r2, [r7, #7]
    2ae8:	429a      	cmp	r2, r3
    2aea:	d102      	bne.n	2af2 <_usb_d_find_ep+0x2a>
			return i;
    2aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2af0:	e022      	b.n	2b38 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2af6:	4a13      	ldr	r2, [pc, #76]	; (2b44 <_usb_d_find_ep+0x7c>)
    2af8:	015b      	lsls	r3, r3, #5
    2afa:	4413      	add	r3, r2
    2afc:	781b      	ldrb	r3, [r3, #0]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d10e      	bne.n	2b20 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2b02:	79fb      	ldrb	r3, [r7, #7]
    2b04:	f003 030f 	and.w	r3, r3, #15
    2b08:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2b0c:	490d      	ldr	r1, [pc, #52]	; (2b44 <_usb_d_find_ep+0x7c>)
    2b0e:	0152      	lsls	r2, r2, #5
    2b10:	440a      	add	r2, r1
    2b12:	3201      	adds	r2, #1
    2b14:	7812      	ldrb	r2, [r2, #0]
    2b16:	4293      	cmp	r3, r2
    2b18:	d102      	bne.n	2b20 <_usb_d_find_ep+0x58>
			return i;
    2b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b1e:	e00b      	b.n	2b38 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b24:	b2db      	uxtb	r3, r3
    2b26:	3301      	adds	r3, #1
    2b28:	b2db      	uxtb	r3, r3
    2b2a:	73fb      	strb	r3, [r7, #15]
    2b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b30:	2b03      	cmp	r3, #3
    2b32:	ddd1      	ble.n	2ad8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2b34:	f04f 33ff 	mov.w	r3, #4294967295
}
    2b38:	4618      	mov	r0, r3
    2b3a:	3714      	adds	r7, #20
    2b3c:	46bd      	mov	sp, r7
    2b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b42:	4770      	bx	lr
    2b44:	200008c0 	.word	0x200008c0

00002b48 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b088      	sub	sp, #32
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	60ba      	str	r2, [r7, #8]
    2b50:	607b      	str	r3, [r7, #4]
    2b52:	4603      	mov	r3, r0
    2b54:	73fb      	strb	r3, [r7, #15]
    2b56:	460b      	mov	r3, r1
    2b58:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2b5a:	68bb      	ldr	r3, [r7, #8]
    2b5c:	617b      	str	r3, [r7, #20]
    2b5e:	687b      	ldr	r3, [r7, #4]
    2b60:	61bb      	str	r3, [r7, #24]
    2b62:	7bbb      	ldrb	r3, [r7, #14]
    2b64:	2b00      	cmp	r3, #0
    2b66:	d004      	beq.n	2b72 <_usb_d_trans+0x2a>
    2b68:	7bfb      	ldrb	r3, [r7, #15]
    2b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2b6e:	b2db      	uxtb	r3, r3
    2b70:	e003      	b.n	2b7a <_usb_d_trans+0x32>
    2b72:	7bfb      	ldrb	r3, [r7, #15]
    2b74:	f003 030f 	and.w	r3, r3, #15
    2b78:	b2db      	uxtb	r3, r3
    2b7a:	773b      	strb	r3, [r7, #28]
    2b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2b80:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2b82:	f107 0314 	add.w	r3, r7, #20
    2b86:	4618      	mov	r0, r3
    2b88:	4b03      	ldr	r3, [pc, #12]	; (2b98 <_usb_d_trans+0x50>)
    2b8a:	4798      	blx	r3
    2b8c:	4603      	mov	r3, r0
}
    2b8e:	4618      	mov	r0, r3
    2b90:	3720      	adds	r7, #32
    2b92:	46bd      	mov	sp, r7
    2b94:	bd80      	pop	{r7, pc}
    2b96:	bf00      	nop
    2b98:	0000a599 	.word	0x0000a599

00002b9c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2b9c:	b480      	push	{r7}
    2b9e:	b085      	sub	sp, #20
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	60f8      	str	r0, [r7, #12]
    2ba4:	60b9      	str	r1, [r7, #8]
    2ba6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2ba8:	2300      	movs	r3, #0
}
    2baa:	4618      	mov	r0, r3
    2bac:	3714      	adds	r7, #20
    2bae:	46bd      	mov	sp, r7
    2bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bb4:	4770      	bx	lr
	...

00002bb8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2bb8:	b580      	push	{r7, lr}
    2bba:	b086      	sub	sp, #24
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	4603      	mov	r3, r0
    2bc0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2bc2:	79fb      	ldrb	r3, [r7, #7]
    2bc4:	4618      	mov	r0, r3
    2bc6:	4b2a      	ldr	r3, [pc, #168]	; (2c70 <usb_d_cb_trans_setup+0xb8>)
    2bc8:	4798      	blx	r3
    2bca:	4603      	mov	r3, r0
    2bcc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2bd2:	015b      	lsls	r3, r3, #5
    2bd4:	4a27      	ldr	r2, [pc, #156]	; (2c74 <usb_d_cb_trans_setup+0xbc>)
    2bd6:	4413      	add	r3, r2
    2bd8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	330c      	adds	r3, #12
    2bde:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2be0:	79fb      	ldrb	r3, [r7, #7]
    2be2:	68f9      	ldr	r1, [r7, #12]
    2be4:	4618      	mov	r0, r3
    2be6:	4b24      	ldr	r3, [pc, #144]	; (2c78 <usb_d_cb_trans_setup+0xc0>)
    2be8:	4798      	blx	r3
    2bea:	4603      	mov	r3, r0
    2bec:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2bee:	7afb      	ldrb	r3, [r7, #11]
    2bf0:	2b08      	cmp	r3, #8
    2bf2:	d00d      	beq.n	2c10 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2bf4:	79fb      	ldrb	r3, [r7, #7]
    2bf6:	2101      	movs	r1, #1
    2bf8:	4618      	mov	r0, r3
    2bfa:	4b20      	ldr	r3, [pc, #128]	; (2c7c <usb_d_cb_trans_setup+0xc4>)
    2bfc:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2bfe:	79fb      	ldrb	r3, [r7, #7]
    2c00:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c04:	b2db      	uxtb	r3, r3
    2c06:	2101      	movs	r1, #1
    2c08:	4618      	mov	r0, r3
    2c0a:	4b1c      	ldr	r3, [pc, #112]	; (2c7c <usb_d_cb_trans_setup+0xc4>)
    2c0c:	4798      	blx	r3
		return;
    2c0e:	e02b      	b.n	2c68 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2c10:	79fb      	ldrb	r3, [r7, #7]
    2c12:	2100      	movs	r1, #0
    2c14:	4618      	mov	r0, r3
    2c16:	4b19      	ldr	r3, [pc, #100]	; (2c7c <usb_d_cb_trans_setup+0xc4>)
    2c18:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2c1a:	79fb      	ldrb	r3, [r7, #7]
    2c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c20:	b2db      	uxtb	r3, r3
    2c22:	2100      	movs	r1, #0
    2c24:	4618      	mov	r0, r3
    2c26:	4b15      	ldr	r3, [pc, #84]	; (2c7c <usb_d_cb_trans_setup+0xc4>)
    2c28:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2c2a:	693b      	ldr	r3, [r7, #16]
    2c2c:	2201      	movs	r2, #1
    2c2e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2c30:	693b      	ldr	r3, [r7, #16]
    2c32:	695b      	ldr	r3, [r3, #20]
    2c34:	79fa      	ldrb	r2, [r7, #7]
    2c36:	68f9      	ldr	r1, [r7, #12]
    2c38:	4610      	mov	r0, r2
    2c3a:	4798      	blx	r3
    2c3c:	4603      	mov	r3, r0
    2c3e:	f083 0301 	eor.w	r3, r3, #1
    2c42:	b2db      	uxtb	r3, r3
    2c44:	2b00      	cmp	r3, #0
    2c46:	d00f      	beq.n	2c68 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2c48:	693b      	ldr	r3, [r7, #16]
    2c4a:	2205      	movs	r2, #5
    2c4c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2c4e:	79fb      	ldrb	r3, [r7, #7]
    2c50:	2101      	movs	r1, #1
    2c52:	4618      	mov	r0, r3
    2c54:	4b09      	ldr	r3, [pc, #36]	; (2c7c <usb_d_cb_trans_setup+0xc4>)
    2c56:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2c58:	79fb      	ldrb	r3, [r7, #7]
    2c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c5e:	b2db      	uxtb	r3, r3
    2c60:	2101      	movs	r1, #1
    2c62:	4618      	mov	r0, r3
    2c64:	4b05      	ldr	r3, [pc, #20]	; (2c7c <usb_d_cb_trans_setup+0xc4>)
    2c66:	4798      	blx	r3
	}
}
    2c68:	3718      	adds	r7, #24
    2c6a:	46bd      	mov	sp, r7
    2c6c:	bd80      	pop	{r7, pc}
    2c6e:	bf00      	nop
    2c70:	00002ac9 	.word	0x00002ac9
    2c74:	200008c0 	.word	0x200008c0
    2c78:	0000a4f1 	.word	0x0000a4f1
    2c7c:	0000a369 	.word	0x0000a369

00002c80 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b084      	sub	sp, #16
    2c84:	af00      	add	r7, sp, #0
    2c86:	4603      	mov	r3, r0
    2c88:	6039      	str	r1, [r7, #0]
    2c8a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c8c:	79fb      	ldrb	r3, [r7, #7]
    2c8e:	4618      	mov	r0, r3
    2c90:	4b0d      	ldr	r3, [pc, #52]	; (2cc8 <usb_d_cb_trans_more+0x48>)
    2c92:	4798      	blx	r3
    2c94:	4603      	mov	r3, r0
    2c96:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c9c:	015b      	lsls	r3, r3, #5
    2c9e:	4a0b      	ldr	r2, [pc, #44]	; (2ccc <usb_d_cb_trans_more+0x4c>)
    2ca0:	4413      	add	r3, r2
    2ca2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2ca4:	68bb      	ldr	r3, [r7, #8]
    2ca6:	789b      	ldrb	r3, [r3, #2]
    2ca8:	2b03      	cmp	r3, #3
    2caa:	d107      	bne.n	2cbc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2cac:	68bb      	ldr	r3, [r7, #8]
    2cae:	699b      	ldr	r3, [r3, #24]
    2cb0:	79fa      	ldrb	r2, [r7, #7]
    2cb2:	6839      	ldr	r1, [r7, #0]
    2cb4:	4610      	mov	r0, r2
    2cb6:	4798      	blx	r3
    2cb8:	4603      	mov	r3, r0
    2cba:	e000      	b.n	2cbe <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2cbc:	2300      	movs	r3, #0
}
    2cbe:	4618      	mov	r0, r3
    2cc0:	3710      	adds	r7, #16
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bd80      	pop	{r7, pc}
    2cc6:	bf00      	nop
    2cc8:	00002ac9 	.word	0x00002ac9
    2ccc:	200008c0 	.word	0x200008c0

00002cd0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2cd0:	b590      	push	{r4, r7, lr}
    2cd2:	b087      	sub	sp, #28
    2cd4:	af02      	add	r7, sp, #8
    2cd6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	789b      	ldrb	r3, [r3, #2]
    2cdc:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	7b1b      	ldrb	r3, [r3, #12]
    2ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	bf14      	ite	ne
    2cea:	2301      	movne	r3, #1
    2cec:	2300      	moveq	r3, #0
    2cee:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2cf0:	7bfb      	ldrb	r3, [r7, #15]
    2cf2:	2b03      	cmp	r3, #3
    2cf4:	d13a      	bne.n	2d6c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	69db      	ldr	r3, [r3, #28]
    2cfa:	687a      	ldr	r2, [r7, #4]
    2cfc:	7850      	ldrb	r0, [r2, #1]
    2cfe:	687a      	ldr	r2, [r7, #4]
    2d00:	320c      	adds	r2, #12
    2d02:	2101      	movs	r1, #1
    2d04:	4798      	blx	r3
    2d06:	4603      	mov	r3, r0
    2d08:	737b      	strb	r3, [r7, #13]
		if (err) {
    2d0a:	7b7b      	ldrb	r3, [r7, #13]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d015      	beq.n	2d3c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	2205      	movs	r2, #5
    2d14:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	2202      	movs	r2, #2
    2d1a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2d1c:	7bbb      	ldrb	r3, [r7, #14]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d002      	beq.n	2d28 <usb_d_ctrl_trans_done+0x58>
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	785b      	ldrb	r3, [r3, #1]
    2d26:	e004      	b.n	2d32 <usb_d_ctrl_trans_done+0x62>
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	785b      	ldrb	r3, [r3, #1]
    2d2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2d30:	b2db      	uxtb	r3, r3
    2d32:	2101      	movs	r1, #1
    2d34:	4618      	mov	r0, r3
    2d36:	4b15      	ldr	r3, [pc, #84]	; (2d8c <usb_d_ctrl_trans_done+0xbc>)
    2d38:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2d3a:	e022      	b.n	2d82 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2d3c:	687b      	ldr	r3, [r7, #4]
    2d3e:	2204      	movs	r2, #4
    2d40:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2d42:	687b      	ldr	r3, [r7, #4]
    2d44:	7858      	ldrb	r0, [r3, #1]
    2d46:	7bbb      	ldrb	r3, [r7, #14]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	bf14      	ite	ne
    2d4c:	2301      	movne	r3, #1
    2d4e:	2300      	moveq	r3, #0
    2d50:	b2db      	uxtb	r3, r3
    2d52:	f083 0301 	eor.w	r3, r3, #1
    2d56:	b2db      	uxtb	r3, r3
    2d58:	f003 0301 	and.w	r3, r3, #1
    2d5c:	b2d9      	uxtb	r1, r3
    2d5e:	2301      	movs	r3, #1
    2d60:	9300      	str	r3, [sp, #0]
    2d62:	2300      	movs	r3, #0
    2d64:	2200      	movs	r2, #0
    2d66:	4c0a      	ldr	r4, [pc, #40]	; (2d90 <usb_d_ctrl_trans_done+0xc0>)
    2d68:	47a0      	blx	r4
}
    2d6a:	e00a      	b.n	2d82 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	69db      	ldr	r3, [r3, #28]
    2d70:	687a      	ldr	r2, [r7, #4]
    2d72:	7850      	ldrb	r0, [r2, #1]
    2d74:	687a      	ldr	r2, [r7, #4]
    2d76:	320c      	adds	r2, #12
    2d78:	2100      	movs	r1, #0
    2d7a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	2202      	movs	r2, #2
    2d80:	709a      	strb	r2, [r3, #2]
}
    2d82:	bf00      	nop
    2d84:	3714      	adds	r7, #20
    2d86:	46bd      	mov	sp, r7
    2d88:	bd90      	pop	{r4, r7, pc}
    2d8a:	bf00      	nop
    2d8c:	0000a369 	.word	0x0000a369
    2d90:	00002b49 	.word	0x00002b49

00002d94 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2d94:	b580      	push	{r7, lr}
    2d96:	b086      	sub	sp, #24
    2d98:	af00      	add	r7, sp, #0
    2d9a:	4603      	mov	r3, r0
    2d9c:	60b9      	str	r1, [r7, #8]
    2d9e:	607a      	str	r2, [r7, #4]
    2da0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2da2:	7bfb      	ldrb	r3, [r7, #15]
    2da4:	4618      	mov	r0, r3
    2da6:	4b2f      	ldr	r3, [pc, #188]	; (2e64 <_usb_d_cb_trans_done+0xd0>)
    2da8:	4798      	blx	r3
    2daa:	4603      	mov	r3, r0
    2dac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2db2:	015b      	lsls	r3, r3, #5
    2db4:	4a2c      	ldr	r2, [pc, #176]	; (2e68 <_usb_d_cb_trans_done+0xd4>)
    2db6:	4413      	add	r3, r2
    2db8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2dba:	68bb      	ldr	r3, [r7, #8]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d10e      	bne.n	2dde <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2dc0:	693b      	ldr	r3, [r7, #16]
    2dc2:	2200      	movs	r2, #0
    2dc4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2dc6:	693b      	ldr	r3, [r7, #16]
    2dc8:	781b      	ldrb	r3, [r3, #0]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d103      	bne.n	2dd6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2dce:	6938      	ldr	r0, [r7, #16]
    2dd0:	4b26      	ldr	r3, [pc, #152]	; (2e6c <_usb_d_cb_trans_done+0xd8>)
    2dd2:	4798      	blx	r3
			return;
    2dd4:	e043      	b.n	2e5e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2dd6:	693b      	ldr	r3, [r7, #16]
    2dd8:	2201      	movs	r2, #1
    2dda:	709a      	strb	r2, [r3, #2]
    2ddc:	e038      	b.n	2e50 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2dde:	68bb      	ldr	r3, [r7, #8]
    2de0:	2b01      	cmp	r3, #1
    2de2:	d113      	bne.n	2e0c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2de4:	693b      	ldr	r3, [r7, #16]
    2de6:	2202      	movs	r2, #2
    2de8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2dea:	693b      	ldr	r3, [r7, #16]
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d108      	bne.n	2e04 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2df2:	693b      	ldr	r3, [r7, #16]
    2df4:	2202      	movs	r2, #2
    2df6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2df8:	7bfb      	ldrb	r3, [r7, #15]
    2dfa:	2100      	movs	r1, #0
    2dfc:	4618      	mov	r0, r3
    2dfe:	4b1c      	ldr	r3, [pc, #112]	; (2e70 <_usb_d_cb_trans_done+0xdc>)
    2e00:	4798      	blx	r3
    2e02:	e025      	b.n	2e50 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2e04:	693b      	ldr	r3, [r7, #16]
    2e06:	2205      	movs	r2, #5
    2e08:	709a      	strb	r2, [r3, #2]
    2e0a:	e021      	b.n	2e50 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2e0c:	68bb      	ldr	r3, [r7, #8]
    2e0e:	2b02      	cmp	r3, #2
    2e10:	d10e      	bne.n	2e30 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2e12:	693b      	ldr	r3, [r7, #16]
    2e14:	2204      	movs	r2, #4
    2e16:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e18:	693b      	ldr	r3, [r7, #16]
    2e1a:	781b      	ldrb	r3, [r3, #0]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d103      	bne.n	2e28 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2e20:	693b      	ldr	r3, [r7, #16]
    2e22:	2202      	movs	r2, #2
    2e24:	709a      	strb	r2, [r3, #2]
			return;
    2e26:	e01a      	b.n	2e5e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2e28:	693b      	ldr	r3, [r7, #16]
    2e2a:	2201      	movs	r2, #1
    2e2c:	709a      	strb	r2, [r3, #2]
    2e2e:	e00f      	b.n	2e50 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2e30:	68bb      	ldr	r3, [r7, #8]
    2e32:	2b03      	cmp	r3, #3
    2e34:	d106      	bne.n	2e44 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2e36:	693b      	ldr	r3, [r7, #16]
    2e38:	2200      	movs	r2, #0
    2e3a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2e3c:	693b      	ldr	r3, [r7, #16]
    2e3e:	2205      	movs	r2, #5
    2e40:	70da      	strb	r2, [r3, #3]
    2e42:	e005      	b.n	2e50 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2e44:	693b      	ldr	r3, [r7, #16]
    2e46:	2206      	movs	r2, #6
    2e48:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2e4a:	693b      	ldr	r3, [r7, #16]
    2e4c:	2206      	movs	r2, #6
    2e4e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2e50:	693b      	ldr	r3, [r7, #16]
    2e52:	69db      	ldr	r3, [r3, #28]
    2e54:	693a      	ldr	r2, [r7, #16]
    2e56:	78d1      	ldrb	r1, [r2, #3]
    2e58:	687a      	ldr	r2, [r7, #4]
    2e5a:	7bf8      	ldrb	r0, [r7, #15]
    2e5c:	4798      	blx	r3
}
    2e5e:	3718      	adds	r7, #24
    2e60:	46bd      	mov	sp, r7
    2e62:	bd80      	pop	{r7, pc}
    2e64:	00002ac9 	.word	0x00002ac9
    2e68:	200008c0 	.word	0x200008c0
    2e6c:	00002cd1 	.word	0x00002cd1
    2e70:	0000a369 	.word	0x0000a369

00002e74 <usb_d_init>:

int32_t usb_d_init(void)
{
    2e74:	b580      	push	{r7, lr}
    2e76:	b082      	sub	sp, #8
    2e78:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2e7a:	4b21      	ldr	r3, [pc, #132]	; (2f00 <usb_d_init+0x8c>)
    2e7c:	4798      	blx	r3
    2e7e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	2b00      	cmp	r3, #0
    2e84:	da01      	bge.n	2e8a <usb_d_init+0x16>
		return rc;
    2e86:	683b      	ldr	r3, [r7, #0]
    2e88:	e036      	b.n	2ef8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2e8a:	2280      	movs	r2, #128	; 0x80
    2e8c:	2100      	movs	r1, #0
    2e8e:	481d      	ldr	r0, [pc, #116]	; (2f04 <usb_d_init+0x90>)
    2e90:	4b1d      	ldr	r3, [pc, #116]	; (2f08 <usb_d_init+0x94>)
    2e92:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e94:	2300      	movs	r3, #0
    2e96:	71fb      	strb	r3, [r7, #7]
    2e98:	e01e      	b.n	2ed8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2e9a:	79fb      	ldrb	r3, [r7, #7]
    2e9c:	4a19      	ldr	r2, [pc, #100]	; (2f04 <usb_d_init+0x90>)
    2e9e:	015b      	lsls	r3, r3, #5
    2ea0:	4413      	add	r3, r2
    2ea2:	3301      	adds	r3, #1
    2ea4:	22ff      	movs	r2, #255	; 0xff
    2ea6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2ea8:	79fb      	ldrb	r3, [r7, #7]
    2eaa:	4a16      	ldr	r2, [pc, #88]	; (2f04 <usb_d_init+0x90>)
    2eac:	015b      	lsls	r3, r3, #5
    2eae:	4413      	add	r3, r2
    2eb0:	3314      	adds	r3, #20
    2eb2:	4a16      	ldr	r2, [pc, #88]	; (2f0c <usb_d_init+0x98>)
    2eb4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2eb6:	79fb      	ldrb	r3, [r7, #7]
    2eb8:	4a12      	ldr	r2, [pc, #72]	; (2f04 <usb_d_init+0x90>)
    2eba:	015b      	lsls	r3, r3, #5
    2ebc:	4413      	add	r3, r2
    2ebe:	3318      	adds	r3, #24
    2ec0:	4a12      	ldr	r2, [pc, #72]	; (2f0c <usb_d_init+0x98>)
    2ec2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2ec4:	79fb      	ldrb	r3, [r7, #7]
    2ec6:	4a0f      	ldr	r2, [pc, #60]	; (2f04 <usb_d_init+0x90>)
    2ec8:	015b      	lsls	r3, r3, #5
    2eca:	4413      	add	r3, r2
    2ecc:	331c      	adds	r3, #28
    2ece:	4a0f      	ldr	r2, [pc, #60]	; (2f0c <usb_d_init+0x98>)
    2ed0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2ed2:	79fb      	ldrb	r3, [r7, #7]
    2ed4:	3301      	adds	r3, #1
    2ed6:	71fb      	strb	r3, [r7, #7]
    2ed8:	79fb      	ldrb	r3, [r7, #7]
    2eda:	2b03      	cmp	r3, #3
    2edc:	d9dd      	bls.n	2e9a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2ede:	490c      	ldr	r1, [pc, #48]	; (2f10 <usb_d_init+0x9c>)
    2ee0:	2000      	movs	r0, #0
    2ee2:	4b0c      	ldr	r3, [pc, #48]	; (2f14 <usb_d_init+0xa0>)
    2ee4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2ee6:	490c      	ldr	r1, [pc, #48]	; (2f18 <usb_d_init+0xa4>)
    2ee8:	2001      	movs	r0, #1
    2eea:	4b0a      	ldr	r3, [pc, #40]	; (2f14 <usb_d_init+0xa0>)
    2eec:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2eee:	490b      	ldr	r1, [pc, #44]	; (2f1c <usb_d_init+0xa8>)
    2ef0:	2002      	movs	r0, #2
    2ef2:	4b08      	ldr	r3, [pc, #32]	; (2f14 <usb_d_init+0xa0>)
    2ef4:	4798      	blx	r3
	return ERR_NONE;
    2ef6:	2300      	movs	r3, #0
}
    2ef8:	4618      	mov	r0, r3
    2efa:	3708      	adds	r7, #8
    2efc:	46bd      	mov	sp, r7
    2efe:	bd80      	pop	{r7, pc}
    2f00:	00009bb1 	.word	0x00009bb1
    2f04:	200008c0 	.word	0x200008c0
    2f08:	0000ea6d 	.word	0x0000ea6d
    2f0c:	00002b9d 	.word	0x00002b9d
    2f10:	00002bb9 	.word	0x00002bb9
    2f14:	0000a7f9 	.word	0x0000a7f9
    2f18:	00002c81 	.word	0x00002c81
    2f1c:	00002d95 	.word	0x00002d95

00002f20 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b082      	sub	sp, #8
    2f24:	af00      	add	r7, sp, #0
    2f26:	4603      	mov	r3, r0
    2f28:	6039      	str	r1, [r7, #0]
    2f2a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2f2c:	79fb      	ldrb	r3, [r7, #7]
    2f2e:	6839      	ldr	r1, [r7, #0]
    2f30:	4618      	mov	r0, r3
    2f32:	4b03      	ldr	r3, [pc, #12]	; (2f40 <usb_d_register_callback+0x20>)
    2f34:	4798      	blx	r3
}
    2f36:	bf00      	nop
    2f38:	3708      	adds	r7, #8
    2f3a:	46bd      	mov	sp, r7
    2f3c:	bd80      	pop	{r7, pc}
    2f3e:	bf00      	nop
    2f40:	0000a7b1 	.word	0x0000a7b1

00002f44 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2f44:	b580      	push	{r7, lr}
    2f46:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2f48:	4b02      	ldr	r3, [pc, #8]	; (2f54 <usb_d_enable+0x10>)
    2f4a:	4798      	blx	r3
    2f4c:	4603      	mov	r3, r0
}
    2f4e:	4618      	mov	r0, r3
    2f50:	bd80      	pop	{r7, pc}
    2f52:	bf00      	nop
    2f54:	00009ca1 	.word	0x00009ca1

00002f58 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2f5c:	4b01      	ldr	r3, [pc, #4]	; (2f64 <usb_d_attach+0xc>)
    2f5e:	4798      	blx	r3
}
    2f60:	bf00      	nop
    2f62:	bd80      	pop	{r7, pc}
    2f64:	00009d25 	.word	0x00009d25

00002f68 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	4603      	mov	r3, r0
    2f70:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2f72:	79fb      	ldrb	r3, [r7, #7]
    2f74:	4618      	mov	r0, r3
    2f76:	4b03      	ldr	r3, [pc, #12]	; (2f84 <usb_d_set_address+0x1c>)
    2f78:	4798      	blx	r3
}
    2f7a:	bf00      	nop
    2f7c:	3708      	adds	r7, #8
    2f7e:	46bd      	mov	sp, r7
    2f80:	bd80      	pop	{r7, pc}
    2f82:	bf00      	nop
    2f84:	00009d39 	.word	0x00009d39

00002f88 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	b082      	sub	sp, #8
    2f8c:	af00      	add	r7, sp, #0
    2f8e:	4603      	mov	r3, r0
    2f90:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2f92:	79fb      	ldrb	r3, [r7, #7]
    2f94:	b29b      	uxth	r3, r3
    2f96:	461a      	mov	r2, r3
    2f98:	2100      	movs	r1, #0
    2f9a:	2000      	movs	r0, #0
    2f9c:	4b03      	ldr	r3, [pc, #12]	; (2fac <usb_d_ep0_init+0x24>)
    2f9e:	4798      	blx	r3
    2fa0:	4603      	mov	r3, r0
}
    2fa2:	4618      	mov	r0, r3
    2fa4:	3708      	adds	r7, #8
    2fa6:	46bd      	mov	sp, r7
    2fa8:	bd80      	pop	{r7, pc}
    2faa:	bf00      	nop
    2fac:	00002fb1 	.word	0x00002fb1

00002fb0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2fb0:	b580      	push	{r7, lr}
    2fb2:	b086      	sub	sp, #24
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	4603      	mov	r3, r0
    2fb8:	71fb      	strb	r3, [r7, #7]
    2fba:	460b      	mov	r3, r1
    2fbc:	71bb      	strb	r3, [r7, #6]
    2fbe:	4613      	mov	r3, r2
    2fc0:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2fc2:	79fb      	ldrb	r3, [r7, #7]
    2fc4:	4618      	mov	r0, r3
    2fc6:	4b1e      	ldr	r3, [pc, #120]	; (3040 <usb_d_ep_init+0x90>)
    2fc8:	4798      	blx	r3
    2fca:	4603      	mov	r3, r0
    2fcc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2fd2:	015b      	lsls	r3, r3, #5
    2fd4:	4a1b      	ldr	r2, [pc, #108]	; (3044 <usb_d_ep_init+0x94>)
    2fd6:	4413      	add	r3, r2
    2fd8:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	db02      	blt.n	2fe8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2fe2:	f06f 0313 	mvn.w	r3, #19
    2fe6:	e027      	b.n	3038 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2fe8:	20ff      	movs	r0, #255	; 0xff
    2fea:	4b15      	ldr	r3, [pc, #84]	; (3040 <usb_d_ep_init+0x90>)
    2fec:	4798      	blx	r3
    2fee:	4603      	mov	r3, r0
    2ff0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	da02      	bge.n	3000 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2ffa:	f06f 0314 	mvn.w	r3, #20
    2ffe:	e01b      	b.n	3038 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3000:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3004:	015b      	lsls	r3, r3, #5
    3006:	4a0f      	ldr	r2, [pc, #60]	; (3044 <usb_d_ep_init+0x94>)
    3008:	4413      	add	r3, r2
    300a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    300c:	88ba      	ldrh	r2, [r7, #4]
    300e:	79b9      	ldrb	r1, [r7, #6]
    3010:	79fb      	ldrb	r3, [r7, #7]
    3012:	4618      	mov	r0, r3
    3014:	4b0c      	ldr	r3, [pc, #48]	; (3048 <usb_d_ep_init+0x98>)
    3016:	4798      	blx	r3
    3018:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    301a:	68fb      	ldr	r3, [r7, #12]
    301c:	2b00      	cmp	r3, #0
    301e:	da01      	bge.n	3024 <usb_d_ep_init+0x74>
		return rc;
    3020:	68fb      	ldr	r3, [r7, #12]
    3022:	e009      	b.n	3038 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3024:	693b      	ldr	r3, [r7, #16]
    3026:	79fa      	ldrb	r2, [r7, #7]
    3028:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    302a:	79bb      	ldrb	r3, [r7, #6]
    302c:	f003 0303 	and.w	r3, r3, #3
    3030:	b2da      	uxtb	r2, r3
    3032:	693b      	ldr	r3, [r7, #16]
    3034:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3036:	2300      	movs	r3, #0
}
    3038:	4618      	mov	r0, r3
    303a:	3718      	adds	r7, #24
    303c:	46bd      	mov	sp, r7
    303e:	bd80      	pop	{r7, pc}
    3040:	00002ac9 	.word	0x00002ac9
    3044:	200008c0 	.word	0x200008c0
    3048:	00009dd9 	.word	0x00009dd9

0000304c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    304c:	b580      	push	{r7, lr}
    304e:	b084      	sub	sp, #16
    3050:	af00      	add	r7, sp, #0
    3052:	4603      	mov	r3, r0
    3054:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3056:	79fb      	ldrb	r3, [r7, #7]
    3058:	4618      	mov	r0, r3
    305a:	4b0d      	ldr	r3, [pc, #52]	; (3090 <usb_d_ep_deinit+0x44>)
    305c:	4798      	blx	r3
    305e:	4603      	mov	r3, r0
    3060:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3062:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3066:	015b      	lsls	r3, r3, #5
    3068:	4a0a      	ldr	r2, [pc, #40]	; (3094 <usb_d_ep_deinit+0x48>)
    306a:	4413      	add	r3, r2
    306c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3072:	2b00      	cmp	r3, #0
    3074:	db07      	blt.n	3086 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3076:	79fb      	ldrb	r3, [r7, #7]
    3078:	4618      	mov	r0, r3
    307a:	4b07      	ldr	r3, [pc, #28]	; (3098 <usb_d_ep_deinit+0x4c>)
    307c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    307e:	68bb      	ldr	r3, [r7, #8]
    3080:	22ff      	movs	r2, #255	; 0xff
    3082:	705a      	strb	r2, [r3, #1]
    3084:	e000      	b.n	3088 <usb_d_ep_deinit+0x3c>
		return;
    3086:	bf00      	nop
}
    3088:	3710      	adds	r7, #16
    308a:	46bd      	mov	sp, r7
    308c:	bd80      	pop	{r7, pc}
    308e:	bf00      	nop
    3090:	00002ac9 	.word	0x00002ac9
    3094:	200008c0 	.word	0x200008c0
    3098:	00009f0d 	.word	0x00009f0d

0000309c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    309c:	b580      	push	{r7, lr}
    309e:	b086      	sub	sp, #24
    30a0:	af00      	add	r7, sp, #0
    30a2:	4603      	mov	r3, r0
    30a4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    30a6:	79fb      	ldrb	r3, [r7, #7]
    30a8:	4618      	mov	r0, r3
    30aa:	4b15      	ldr	r3, [pc, #84]	; (3100 <usb_d_ep_enable+0x64>)
    30ac:	4798      	blx	r3
    30ae:	4603      	mov	r3, r0
    30b0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30b6:	015b      	lsls	r3, r3, #5
    30b8:	4a12      	ldr	r2, [pc, #72]	; (3104 <usb_d_ep_enable+0x68>)
    30ba:	4413      	add	r3, r2
    30bc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    30be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30c2:	2b00      	cmp	r3, #0
    30c4:	da02      	bge.n	30cc <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    30c6:	f06f 0311 	mvn.w	r3, #17
    30ca:	e014      	b.n	30f6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    30cc:	693b      	ldr	r3, [r7, #16]
    30ce:	781b      	ldrb	r3, [r3, #0]
    30d0:	2b00      	cmp	r3, #0
    30d2:	d101      	bne.n	30d8 <usb_d_ep_enable+0x3c>
    30d4:	2202      	movs	r2, #2
    30d6:	e000      	b.n	30da <usb_d_ep_enable+0x3e>
    30d8:	2201      	movs	r2, #1
    30da:	693b      	ldr	r3, [r7, #16]
    30dc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    30de:	79fb      	ldrb	r3, [r7, #7]
    30e0:	4618      	mov	r0, r3
    30e2:	4b09      	ldr	r3, [pc, #36]	; (3108 <usb_d_ep_enable+0x6c>)
    30e4:	4798      	blx	r3
    30e6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    30e8:	68fb      	ldr	r3, [r7, #12]
    30ea:	2b00      	cmp	r3, #0
    30ec:	da02      	bge.n	30f4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    30ee:	693b      	ldr	r3, [r7, #16]
    30f0:	2200      	movs	r2, #0
    30f2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    30f4:	68fb      	ldr	r3, [r7, #12]
}
    30f6:	4618      	mov	r0, r3
    30f8:	3718      	adds	r7, #24
    30fa:	46bd      	mov	sp, r7
    30fc:	bd80      	pop	{r7, pc}
    30fe:	bf00      	nop
    3100:	00002ac9 	.word	0x00002ac9
    3104:	200008c0 	.word	0x200008c0
    3108:	00009ff1 	.word	0x00009ff1

0000310c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    310c:	b590      	push	{r4, r7, lr}
    310e:	b08d      	sub	sp, #52	; 0x34
    3110:	af02      	add	r7, sp, #8
    3112:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	7a1b      	ldrb	r3, [r3, #8]
    3118:	4618      	mov	r0, r3
    311a:	4b51      	ldr	r3, [pc, #324]	; (3260 <usb_d_ep_transfer+0x154>)
    311c:	4798      	blx	r3
    311e:	4603      	mov	r3, r0
    3120:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3122:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3126:	015b      	lsls	r3, r3, #5
    3128:	4a4e      	ldr	r2, [pc, #312]	; (3264 <usb_d_ep_transfer+0x158>)
    312a:	4413      	add	r3, r2
    312c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	7a1b      	ldrb	r3, [r3, #8]
    3132:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3136:	2b00      	cmp	r3, #0
    3138:	bf14      	ite	ne
    313a:	2301      	movne	r3, #1
    313c:	2300      	moveq	r3, #0
    313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	7a5b      	ldrb	r3, [r3, #9]
    3146:	2b00      	cmp	r3, #0
    3148:	bf14      	ite	ne
    314a:	2301      	movne	r3, #1
    314c:	2300      	moveq	r3, #0
    314e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	685b      	ldr	r3, [r3, #4]
    3156:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3158:	f997 301f 	ldrsb.w	r3, [r7, #31]
    315c:	2b00      	cmp	r3, #0
    315e:	da02      	bge.n	3166 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3160:	f06f 0311 	mvn.w	r3, #17
    3164:	e077      	b.n	3256 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3166:	f107 0308 	add.w	r3, r7, #8
    316a:	4618      	mov	r0, r3
    316c:	4b3e      	ldr	r3, [pc, #248]	; (3268 <usb_d_ep_transfer+0x15c>)
    316e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3170:	69bb      	ldr	r3, [r7, #24]
    3172:	789b      	ldrb	r3, [r3, #2]
    3174:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3176:	7bfb      	ldrb	r3, [r7, #15]
    3178:	b2db      	uxtb	r3, r3
    317a:	2b01      	cmp	r3, #1
    317c:	d10c      	bne.n	3198 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    317e:	69bb      	ldr	r3, [r7, #24]
    3180:	2203      	movs	r2, #3
    3182:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3184:	f107 0308 	add.w	r3, r7, #8
    3188:	4618      	mov	r0, r3
    318a:	4b38      	ldr	r3, [pc, #224]	; (326c <usb_d_ep_transfer+0x160>)
    318c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    318e:	69bb      	ldr	r3, [r7, #24]
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d151      	bne.n	323a <usb_d_ep_transfer+0x12e>
    3196:	e017      	b.n	31c8 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3198:	f107 0308 	add.w	r3, r7, #8
    319c:	4618      	mov	r0, r3
    319e:	4b33      	ldr	r3, [pc, #204]	; (326c <usb_d_ep_transfer+0x160>)
    31a0:	4798      	blx	r3
		switch (state) {
    31a2:	7bfb      	ldrb	r3, [r7, #15]
    31a4:	b2db      	uxtb	r3, r3
    31a6:	2b05      	cmp	r3, #5
    31a8:	d004      	beq.n	31b4 <usb_d_ep_transfer+0xa8>
    31aa:	2b06      	cmp	r3, #6
    31ac:	d004      	beq.n	31b8 <usb_d_ep_transfer+0xac>
    31ae:	2b00      	cmp	r3, #0
    31b0:	d005      	beq.n	31be <usb_d_ep_transfer+0xb2>
    31b2:	e007      	b.n	31c4 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    31b4:	2302      	movs	r3, #2
    31b6:	e04e      	b.n	3256 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    31b8:	f06f 030f 	mvn.w	r3, #15
    31bc:	e04b      	b.n	3256 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    31be:	f06f 0312 	mvn.w	r3, #18
    31c2:	e048      	b.n	3256 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    31c4:	2301      	movs	r3, #1
    31c6:	e046      	b.n	3256 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    31c8:	69bb      	ldr	r3, [r7, #24]
    31ca:	7c9b      	ldrb	r3, [r3, #18]
    31cc:	b29a      	uxth	r2, r3
    31ce:	69bb      	ldr	r3, [r7, #24]
    31d0:	7cdb      	ldrb	r3, [r3, #19]
    31d2:	b29b      	uxth	r3, r3
    31d4:	021b      	lsls	r3, r3, #8
    31d6:	b29b      	uxth	r3, r3
    31d8:	4413      	add	r3, r2
    31da:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    31dc:	8afb      	ldrh	r3, [r7, #22]
    31de:	2b00      	cmp	r3, #0
    31e0:	d10b      	bne.n	31fa <usb_d_ep_transfer+0xee>
			dir                 = true;
    31e2:	2301      	movs	r3, #1
    31e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    31e8:	2300      	movs	r3, #0
    31ea:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    31ec:	2301      	movs	r3, #1
    31ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    31f2:	69bb      	ldr	r3, [r7, #24]
    31f4:	2204      	movs	r2, #4
    31f6:	709a      	strb	r2, [r3, #2]
    31f8:	e01f      	b.n	323a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    31fa:	69bb      	ldr	r3, [r7, #24]
    31fc:	7b1b      	ldrb	r3, [r3, #12]
    31fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3202:	2b00      	cmp	r3, #0
    3204:	bf14      	ite	ne
    3206:	2301      	movne	r3, #1
    3208:	2300      	moveq	r3, #0
    320a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    320e:	8afa      	ldrh	r2, [r7, #22]
    3210:	6a3b      	ldr	r3, [r7, #32]
    3212:	429a      	cmp	r2, r3
    3214:	d201      	bcs.n	321a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3216:	8afb      	ldrh	r3, [r7, #22]
    3218:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    321a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    321e:	2b00      	cmp	r3, #0
    3220:	d008      	beq.n	3234 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3222:	8afa      	ldrh	r2, [r7, #22]
    3224:	6a3b      	ldr	r3, [r7, #32]
    3226:	429a      	cmp	r2, r3
    3228:	bf8c      	ite	hi
    322a:	2301      	movhi	r3, #1
    322c:	2300      	movls	r3, #0
    322e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3232:	e002      	b.n	323a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3234:	2300      	movs	r3, #0
    3236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	7a18      	ldrb	r0, [r3, #8]
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	681a      	ldr	r2, [r3, #0]
    3242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3246:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    324a:	9300      	str	r3, [sp, #0]
    324c:	6a3b      	ldr	r3, [r7, #32]
    324e:	4c08      	ldr	r4, [pc, #32]	; (3270 <usb_d_ep_transfer+0x164>)
    3250:	47a0      	blx	r4
    3252:	6138      	str	r0, [r7, #16]
	return rc;
    3254:	693b      	ldr	r3, [r7, #16]
}
    3256:	4618      	mov	r0, r3
    3258:	372c      	adds	r7, #44	; 0x2c
    325a:	46bd      	mov	sp, r7
    325c:	bd90      	pop	{r4, r7, pc}
    325e:	bf00      	nop
    3260:	00002ac9 	.word	0x00002ac9
    3264:	200008c0 	.word	0x200008c0
    3268:	0000af65 	.word	0x0000af65
    326c:	0000af8b 	.word	0x0000af8b
    3270:	00002b49 	.word	0x00002b49

00003274 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3274:	b580      	push	{r7, lr}
    3276:	b084      	sub	sp, #16
    3278:	af00      	add	r7, sp, #0
    327a:	4603      	mov	r3, r0
    327c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    327e:	79fb      	ldrb	r3, [r7, #7]
    3280:	4618      	mov	r0, r3
    3282:	4b0e      	ldr	r3, [pc, #56]	; (32bc <usb_d_ep_abort+0x48>)
    3284:	4798      	blx	r3
    3286:	4603      	mov	r3, r0
    3288:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    328e:	015b      	lsls	r3, r3, #5
    3290:	4a0b      	ldr	r2, [pc, #44]	; (32c0 <usb_d_ep_abort+0x4c>)
    3292:	4413      	add	r3, r2
    3294:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3296:	f997 300f 	ldrsb.w	r3, [r7, #15]
    329a:	2b00      	cmp	r3, #0
    329c:	db0a      	blt.n	32b4 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    329e:	79fb      	ldrb	r3, [r7, #7]
    32a0:	4618      	mov	r0, r3
    32a2:	4b08      	ldr	r3, [pc, #32]	; (32c4 <usb_d_ep_abort+0x50>)
    32a4:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    32a6:	68bb      	ldr	r3, [r7, #8]
    32a8:	2201      	movs	r2, #1
    32aa:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    32ac:	68bb      	ldr	r3, [r7, #8]
    32ae:	2204      	movs	r2, #4
    32b0:	70da      	strb	r2, [r3, #3]
    32b2:	e000      	b.n	32b6 <usb_d_ep_abort+0x42>
		return;
    32b4:	bf00      	nop
}
    32b6:	3710      	adds	r7, #16
    32b8:	46bd      	mov	sp, r7
    32ba:	bd80      	pop	{r7, pc}
    32bc:	00002ac9 	.word	0x00002ac9
    32c0:	200008c0 	.word	0x200008c0
    32c4:	0000a75d 	.word	0x0000a75d

000032c8 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b086      	sub	sp, #24
    32cc:	af00      	add	r7, sp, #0
    32ce:	4603      	mov	r3, r0
    32d0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    32d2:	79fb      	ldrb	r3, [r7, #7]
    32d4:	4618      	mov	r0, r3
    32d6:	4b1a      	ldr	r3, [pc, #104]	; (3340 <_usb_d_ep_halt_clr+0x78>)
    32d8:	4798      	blx	r3
    32da:	4603      	mov	r3, r0
    32dc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32e2:	015b      	lsls	r3, r3, #5
    32e4:	4a17      	ldr	r2, [pc, #92]	; (3344 <_usb_d_ep_halt_clr+0x7c>)
    32e6:	4413      	add	r3, r2
    32e8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    32ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32ee:	2b00      	cmp	r3, #0
    32f0:	da02      	bge.n	32f8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    32f2:	f06f 0311 	mvn.w	r3, #17
    32f6:	e01f      	b.n	3338 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    32f8:	79fb      	ldrb	r3, [r7, #7]
    32fa:	2102      	movs	r1, #2
    32fc:	4618      	mov	r0, r3
    32fe:	4b12      	ldr	r3, [pc, #72]	; (3348 <_usb_d_ep_halt_clr+0x80>)
    3300:	4798      	blx	r3
    3302:	4603      	mov	r3, r0
    3304:	2b00      	cmp	r3, #0
    3306:	d016      	beq.n	3336 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3308:	79fb      	ldrb	r3, [r7, #7]
    330a:	2100      	movs	r1, #0
    330c:	4618      	mov	r0, r3
    330e:	4b0e      	ldr	r3, [pc, #56]	; (3348 <_usb_d_ep_halt_clr+0x80>)
    3310:	4798      	blx	r3
    3312:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3314:	68fb      	ldr	r3, [r7, #12]
    3316:	2b00      	cmp	r3, #0
    3318:	da01      	bge.n	331e <_usb_d_ep_halt_clr+0x56>
			return rc;
    331a:	68fb      	ldr	r3, [r7, #12]
    331c:	e00c      	b.n	3338 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    331e:	693b      	ldr	r3, [r7, #16]
    3320:	2201      	movs	r2, #1
    3322:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3324:	693b      	ldr	r3, [r7, #16]
    3326:	2203      	movs	r2, #3
    3328:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    332a:	693b      	ldr	r3, [r7, #16]
    332c:	69db      	ldr	r3, [r3, #28]
    332e:	79f8      	ldrb	r0, [r7, #7]
    3330:	2200      	movs	r2, #0
    3332:	2103      	movs	r1, #3
    3334:	4798      	blx	r3
	}
	return ERR_NONE;
    3336:	2300      	movs	r3, #0
}
    3338:	4618      	mov	r0, r3
    333a:	3718      	adds	r7, #24
    333c:	46bd      	mov	sp, r7
    333e:	bd80      	pop	{r7, pc}
    3340:	00002ac9 	.word	0x00002ac9
    3344:	200008c0 	.word	0x200008c0
    3348:	0000a369 	.word	0x0000a369

0000334c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    334c:	b580      	push	{r7, lr}
    334e:	b082      	sub	sp, #8
    3350:	af00      	add	r7, sp, #0
    3352:	4603      	mov	r3, r0
    3354:	460a      	mov	r2, r1
    3356:	71fb      	strb	r3, [r7, #7]
    3358:	4613      	mov	r3, r2
    335a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    335c:	79bb      	ldrb	r3, [r7, #6]
    335e:	2b00      	cmp	r3, #0
    3360:	d105      	bne.n	336e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3362:	79fb      	ldrb	r3, [r7, #7]
    3364:	4618      	mov	r0, r3
    3366:	4b0c      	ldr	r3, [pc, #48]	; (3398 <usb_d_ep_halt+0x4c>)
    3368:	4798      	blx	r3
    336a:	4603      	mov	r3, r0
    336c:	e00f      	b.n	338e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    336e:	79bb      	ldrb	r3, [r7, #6]
    3370:	2b01      	cmp	r3, #1
    3372:	d106      	bne.n	3382 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3374:	79fb      	ldrb	r3, [r7, #7]
    3376:	2101      	movs	r1, #1
    3378:	4618      	mov	r0, r3
    337a:	4b08      	ldr	r3, [pc, #32]	; (339c <usb_d_ep_halt+0x50>)
    337c:	4798      	blx	r3
    337e:	4603      	mov	r3, r0
    3380:	e005      	b.n	338e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3382:	79fb      	ldrb	r3, [r7, #7]
    3384:	2102      	movs	r1, #2
    3386:	4618      	mov	r0, r3
    3388:	4b04      	ldr	r3, [pc, #16]	; (339c <usb_d_ep_halt+0x50>)
    338a:	4798      	blx	r3
    338c:	4603      	mov	r3, r0
	}
}
    338e:	4618      	mov	r0, r3
    3390:	3708      	adds	r7, #8
    3392:	46bd      	mov	sp, r7
    3394:	bd80      	pop	{r7, pc}
    3396:	bf00      	nop
    3398:	000032c9 	.word	0x000032c9
    339c:	0000a369 	.word	0x0000a369

000033a0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	b086      	sub	sp, #24
    33a4:	af00      	add	r7, sp, #0
    33a6:	4603      	mov	r3, r0
    33a8:	603a      	str	r2, [r7, #0]
    33aa:	71fb      	strb	r3, [r7, #7]
    33ac:	460b      	mov	r3, r1
    33ae:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    33b0:	79fb      	ldrb	r3, [r7, #7]
    33b2:	4618      	mov	r0, r3
    33b4:	4b16      	ldr	r3, [pc, #88]	; (3410 <usb_d_ep_register_callback+0x70>)
    33b6:	4798      	blx	r3
    33b8:	4603      	mov	r3, r0
    33ba:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    33bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33c0:	015b      	lsls	r3, r3, #5
    33c2:	4a14      	ldr	r2, [pc, #80]	; (3414 <usb_d_ep_register_callback+0x74>)
    33c4:	4413      	add	r3, r2
    33c6:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    33c8:	683b      	ldr	r3, [r7, #0]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d001      	beq.n	33d2 <usb_d_ep_register_callback+0x32>
    33ce:	683b      	ldr	r3, [r7, #0]
    33d0:	e000      	b.n	33d4 <usb_d_ep_register_callback+0x34>
    33d2:	4b11      	ldr	r3, [pc, #68]	; (3418 <usb_d_ep_register_callback+0x78>)
    33d4:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    33d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33da:	2b00      	cmp	r3, #0
    33dc:	db13      	blt.n	3406 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    33de:	79bb      	ldrb	r3, [r7, #6]
    33e0:	2b01      	cmp	r3, #1
    33e2:	d008      	beq.n	33f6 <usb_d_ep_register_callback+0x56>
    33e4:	2b02      	cmp	r3, #2
    33e6:	d00a      	beq.n	33fe <usb_d_ep_register_callback+0x5e>
    33e8:	2b00      	cmp	r3, #0
    33ea:	d000      	beq.n	33ee <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    33ec:	e00c      	b.n	3408 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    33ee:	693b      	ldr	r3, [r7, #16]
    33f0:	68fa      	ldr	r2, [r7, #12]
    33f2:	615a      	str	r2, [r3, #20]
		break;
    33f4:	e008      	b.n	3408 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    33f6:	693b      	ldr	r3, [r7, #16]
    33f8:	68fa      	ldr	r2, [r7, #12]
    33fa:	619a      	str	r2, [r3, #24]
		break;
    33fc:	e004      	b.n	3408 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    33fe:	693b      	ldr	r3, [r7, #16]
    3400:	68fa      	ldr	r2, [r7, #12]
    3402:	61da      	str	r2, [r3, #28]
		break;
    3404:	e000      	b.n	3408 <usb_d_ep_register_callback+0x68>
		return;
    3406:	bf00      	nop
	}
}
    3408:	3718      	adds	r7, #24
    340a:	46bd      	mov	sp, r7
    340c:	bd80      	pop	{r7, pc}
    340e:	bf00      	nop
    3410:	00002ac9 	.word	0x00002ac9
    3414:	200008c0 	.word	0x200008c0
    3418:	00002b9d 	.word	0x00002b9d

0000341c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    341c:	b480      	push	{r7}
    341e:	b085      	sub	sp, #20
    3420:	af00      	add	r7, sp, #0
    3422:	4603      	mov	r3, r0
    3424:	60b9      	str	r1, [r7, #8]
    3426:	607a      	str	r2, [r7, #4]
    3428:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    342a:	7bfb      	ldrb	r3, [r7, #15]
    342c:	f083 0301 	eor.w	r3, r3, #1
    3430:	b2db      	uxtb	r3, r3
    3432:	2b00      	cmp	r3, #0
    3434:	d000      	beq.n	3438 <assert+0x1c>
		__asm("BKPT #0");
    3436:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3438:	bf00      	nop
    343a:	3714      	adds	r7, #20
    343c:	46bd      	mov	sp, r7
    343e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3442:	4770      	bx	lr

00003444 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3444:	b480      	push	{r7}
    3446:	b085      	sub	sp, #20
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
    344c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	60fb      	str	r3, [r7, #12]
    3454:	e008      	b.n	3468 <is_list_element+0x24>
		if (it == element) {
    3456:	68fa      	ldr	r2, [r7, #12]
    3458:	683b      	ldr	r3, [r7, #0]
    345a:	429a      	cmp	r2, r3
    345c:	d101      	bne.n	3462 <is_list_element+0x1e>
			return true;
    345e:	2301      	movs	r3, #1
    3460:	e006      	b.n	3470 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3462:	68fb      	ldr	r3, [r7, #12]
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	60fb      	str	r3, [r7, #12]
    3468:	68fb      	ldr	r3, [r7, #12]
    346a:	2b00      	cmp	r3, #0
    346c:	d1f3      	bne.n	3456 <is_list_element+0x12>
		}
	}

	return false;
    346e:	2300      	movs	r3, #0
}
    3470:	4618      	mov	r0, r3
    3472:	3714      	adds	r7, #20
    3474:	46bd      	mov	sp, r7
    3476:	f85d 7b04 	ldr.w	r7, [sp], #4
    347a:	4770      	bx	lr

0000347c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    347c:	b580      	push	{r7, lr}
    347e:	b082      	sub	sp, #8
    3480:	af00      	add	r7, sp, #0
    3482:	6078      	str	r0, [r7, #4]
    3484:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3486:	6839      	ldr	r1, [r7, #0]
    3488:	6878      	ldr	r0, [r7, #4]
    348a:	4b0f      	ldr	r3, [pc, #60]	; (34c8 <list_insert_as_head+0x4c>)
    348c:	4798      	blx	r3
    348e:	4603      	mov	r3, r0
    3490:	2b00      	cmp	r3, #0
    3492:	bf14      	ite	ne
    3494:	2301      	movne	r3, #1
    3496:	2300      	moveq	r3, #0
    3498:	b2db      	uxtb	r3, r3
    349a:	f083 0301 	eor.w	r3, r3, #1
    349e:	b2db      	uxtb	r3, r3
    34a0:	f003 0301 	and.w	r3, r3, #1
    34a4:	b2db      	uxtb	r3, r3
    34a6:	2239      	movs	r2, #57	; 0x39
    34a8:	4908      	ldr	r1, [pc, #32]	; (34cc <list_insert_as_head+0x50>)
    34aa:	4618      	mov	r0, r3
    34ac:	4b08      	ldr	r3, [pc, #32]	; (34d0 <list_insert_as_head+0x54>)
    34ae:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    34b0:	687b      	ldr	r3, [r7, #4]
    34b2:	681a      	ldr	r2, [r3, #0]
    34b4:	683b      	ldr	r3, [r7, #0]
    34b6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	683a      	ldr	r2, [r7, #0]
    34bc:	601a      	str	r2, [r3, #0]
}
    34be:	bf00      	nop
    34c0:	3708      	adds	r7, #8
    34c2:	46bd      	mov	sp, r7
    34c4:	bd80      	pop	{r7, pc}
    34c6:	bf00      	nop
    34c8:	00003445 	.word	0x00003445
    34cc:	0000ee7c 	.word	0x0000ee7c
    34d0:	0000341d 	.word	0x0000341d

000034d4 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    34d4:	b480      	push	{r7}
    34d6:	b083      	sub	sp, #12
    34d8:	af00      	add	r7, sp, #0
    34da:	6078      	str	r0, [r7, #4]
    34dc:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	681a      	ldr	r2, [r3, #0]
    34e2:	683b      	ldr	r3, [r7, #0]
    34e4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	683a      	ldr	r2, [r7, #0]
    34ea:	601a      	str	r2, [r3, #0]
}
    34ec:	bf00      	nop
    34ee:	370c      	adds	r7, #12
    34f0:	46bd      	mov	sp, r7
    34f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34f6:	4770      	bx	lr

000034f8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	b084      	sub	sp, #16
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	681b      	ldr	r3, [r3, #0]
    3506:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3508:	6839      	ldr	r1, [r7, #0]
    350a:	6878      	ldr	r0, [r7, #4]
    350c:	4b16      	ldr	r3, [pc, #88]	; (3568 <list_insert_at_end+0x70>)
    350e:	4798      	blx	r3
    3510:	4603      	mov	r3, r0
    3512:	2b00      	cmp	r3, #0
    3514:	bf14      	ite	ne
    3516:	2301      	movne	r3, #1
    3518:	2300      	moveq	r3, #0
    351a:	b2db      	uxtb	r3, r3
    351c:	f083 0301 	eor.w	r3, r3, #1
    3520:	b2db      	uxtb	r3, r3
    3522:	f003 0301 	and.w	r3, r3, #1
    3526:	b2db      	uxtb	r3, r3
    3528:	224f      	movs	r2, #79	; 0x4f
    352a:	4910      	ldr	r1, [pc, #64]	; (356c <list_insert_at_end+0x74>)
    352c:	4618      	mov	r0, r3
    352e:	4b10      	ldr	r3, [pc, #64]	; (3570 <list_insert_at_end+0x78>)
    3530:	4798      	blx	r3

	if (!list->head) {
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	2b00      	cmp	r3, #0
    3538:	d109      	bne.n	354e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	683a      	ldr	r2, [r7, #0]
    353e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3540:	683b      	ldr	r3, [r7, #0]
    3542:	2200      	movs	r2, #0
    3544:	601a      	str	r2, [r3, #0]
		return;
    3546:	e00c      	b.n	3562 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3548:	68fb      	ldr	r3, [r7, #12]
    354a:	681b      	ldr	r3, [r3, #0]
    354c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    354e:	68fb      	ldr	r3, [r7, #12]
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	2b00      	cmp	r3, #0
    3554:	d1f8      	bne.n	3548 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3556:	68fb      	ldr	r3, [r7, #12]
    3558:	683a      	ldr	r2, [r7, #0]
    355a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    355c:	683b      	ldr	r3, [r7, #0]
    355e:	2200      	movs	r2, #0
    3560:	601a      	str	r2, [r3, #0]
}
    3562:	3710      	adds	r7, #16
    3564:	46bd      	mov	sp, r7
    3566:	bd80      	pop	{r7, pc}
    3568:	00003445 	.word	0x00003445
    356c:	0000ee7c 	.word	0x0000ee7c
    3570:	0000341d 	.word	0x0000341d

00003574 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	681b      	ldr	r3, [r3, #0]
    3580:	2b00      	cmp	r3, #0
    3582:	d009      	beq.n	3598 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	681b      	ldr	r3, [r3, #0]
    3588:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	681b      	ldr	r3, [r3, #0]
    358e:	681a      	ldr	r2, [r3, #0]
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3594:	68fb      	ldr	r3, [r7, #12]
    3596:	e000      	b.n	359a <list_remove_head+0x26>
	}

	return NULL;
    3598:	2300      	movs	r3, #0
}
    359a:	4618      	mov	r0, r3
    359c:	3714      	adds	r7, #20
    359e:	46bd      	mov	sp, r7
    35a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35a4:	4770      	bx	lr

000035a6 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    35a6:	b480      	push	{r7}
    35a8:	b085      	sub	sp, #20
    35aa:	af00      	add	r7, sp, #0
    35ac:	6078      	str	r0, [r7, #4]
    35ae:	6039      	str	r1, [r7, #0]
	if (!element) {
    35b0:	683b      	ldr	r3, [r7, #0]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d101      	bne.n	35ba <list_delete_element+0x14>
		return false;
    35b6:	2300      	movs	r3, #0
    35b8:	e024      	b.n	3604 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	681a      	ldr	r2, [r3, #0]
    35be:	683b      	ldr	r3, [r7, #0]
    35c0:	429a      	cmp	r2, r3
    35c2:	d106      	bne.n	35d2 <list_delete_element+0x2c>
		list->head = list->head->next;
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	681a      	ldr	r2, [r3, #0]
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	601a      	str	r2, [r3, #0]
		return true;
    35ce:	2301      	movs	r3, #1
    35d0:	e018      	b.n	3604 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	681b      	ldr	r3, [r3, #0]
    35d6:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    35d8:	e002      	b.n	35e0 <list_delete_element+0x3a>
			it = it->next;
    35da:	68fb      	ldr	r3, [r7, #12]
    35dc:	681b      	ldr	r3, [r3, #0]
    35de:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    35e0:	68fb      	ldr	r3, [r7, #12]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d004      	beq.n	35f0 <list_delete_element+0x4a>
    35e6:	68fb      	ldr	r3, [r7, #12]
    35e8:	681a      	ldr	r2, [r3, #0]
    35ea:	683b      	ldr	r3, [r7, #0]
    35ec:	429a      	cmp	r2, r3
    35ee:	d1f4      	bne.n	35da <list_delete_element+0x34>
		}
		if (it) {
    35f0:	68fb      	ldr	r3, [r7, #12]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d005      	beq.n	3602 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    35f6:	683b      	ldr	r3, [r7, #0]
    35f8:	681a      	ldr	r2, [r3, #0]
    35fa:	68fb      	ldr	r3, [r7, #12]
    35fc:	601a      	str	r2, [r3, #0]
			return true;
    35fe:	2301      	movs	r3, #1
    3600:	e000      	b.n	3604 <list_delete_element+0x5e>
		}
	}

	return false;
    3602:	2300      	movs	r3, #0
}
    3604:	4618      	mov	r0, r3
    3606:	3714      	adds	r7, #20
    3608:	46bd      	mov	sp, r7
    360a:	f85d 7b04 	ldr.w	r7, [sp], #4
    360e:	4770      	bx	lr

00003610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3610:	b480      	push	{r7}
    3612:	b083      	sub	sp, #12
    3614:	af00      	add	r7, sp, #0
    3616:	4603      	mov	r3, r0
    3618:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    361a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    361e:	2b00      	cmp	r3, #0
    3620:	db0b      	blt.n	363a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3622:	4909      	ldr	r1, [pc, #36]	; (3648 <__NVIC_EnableIRQ+0x38>)
    3624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3628:	095b      	lsrs	r3, r3, #5
    362a:	88fa      	ldrh	r2, [r7, #6]
    362c:	f002 021f 	and.w	r2, r2, #31
    3630:	2001      	movs	r0, #1
    3632:	fa00 f202 	lsl.w	r2, r0, r2
    3636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    363a:	bf00      	nop
    363c:	370c      	adds	r7, #12
    363e:	46bd      	mov	sp, r7
    3640:	f85d 7b04 	ldr.w	r7, [sp], #4
    3644:	4770      	bx	lr
    3646:	bf00      	nop
    3648:	e000e100 	.word	0xe000e100

0000364c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    364c:	b480      	push	{r7}
    364e:	b083      	sub	sp, #12
    3650:	af00      	add	r7, sp, #0
    3652:	4603      	mov	r3, r0
    3654:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    365a:	2b00      	cmp	r3, #0
    365c:	db10      	blt.n	3680 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    365e:	490b      	ldr	r1, [pc, #44]	; (368c <__NVIC_DisableIRQ+0x40>)
    3660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3664:	095b      	lsrs	r3, r3, #5
    3666:	88fa      	ldrh	r2, [r7, #6]
    3668:	f002 021f 	and.w	r2, r2, #31
    366c:	2001      	movs	r0, #1
    366e:	fa00 f202 	lsl.w	r2, r0, r2
    3672:	3320      	adds	r3, #32
    3674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3678:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    367c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3680:	bf00      	nop
    3682:	370c      	adds	r7, #12
    3684:	46bd      	mov	sp, r7
    3686:	f85d 7b04 	ldr.w	r7, [sp], #4
    368a:	4770      	bx	lr
    368c:	e000e100 	.word	0xe000e100

00003690 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3690:	b480      	push	{r7}
    3692:	b083      	sub	sp, #12
    3694:	af00      	add	r7, sp, #0
    3696:	4603      	mov	r3, r0
    3698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    369e:	2b00      	cmp	r3, #0
    36a0:	db0c      	blt.n	36bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36a2:	4909      	ldr	r1, [pc, #36]	; (36c8 <__NVIC_ClearPendingIRQ+0x38>)
    36a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36a8:	095b      	lsrs	r3, r3, #5
    36aa:	88fa      	ldrh	r2, [r7, #6]
    36ac:	f002 021f 	and.w	r2, r2, #31
    36b0:	2001      	movs	r0, #1
    36b2:	fa00 f202 	lsl.w	r2, r0, r2
    36b6:	3360      	adds	r3, #96	; 0x60
    36b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    36bc:	bf00      	nop
    36be:	370c      	adds	r7, #12
    36c0:	46bd      	mov	sp, r7
    36c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    36c6:	4770      	bx	lr
    36c8:	e000e100 	.word	0xe000e100

000036cc <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    36cc:	b480      	push	{r7}
    36ce:	b083      	sub	sp, #12
    36d0:	af00      	add	r7, sp, #0
    36d2:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    36d4:	687b      	ldr	r3, [r7, #4]
    36d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    36d8:	095b      	lsrs	r3, r3, #5
    36da:	f003 0301 	and.w	r3, r3, #1
    36de:	2b00      	cmp	r3, #0
    36e0:	bf14      	ite	ne
    36e2:	2301      	movne	r3, #1
    36e4:	2300      	moveq	r3, #0
    36e6:	b2db      	uxtb	r3, r3
}
    36e8:	4618      	mov	r0, r3
    36ea:	370c      	adds	r7, #12
    36ec:	46bd      	mov	sp, r7
    36ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    36f2:	4770      	bx	lr

000036f4 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    36f4:	b480      	push	{r7}
    36f6:	b083      	sub	sp, #12
    36f8:	af00      	add	r7, sp, #0
    36fa:	6078      	str	r0, [r7, #4]
    36fc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	683a      	ldr	r2, [r7, #0]
    3702:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3704:	bf00      	nop
    3706:	370c      	adds	r7, #12
    3708:	46bd      	mov	sp, r7
    370a:	f85d 7b04 	ldr.w	r7, [sp], #4
    370e:	4770      	bx	lr

00003710 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3710:	b480      	push	{r7}
    3712:	b083      	sub	sp, #12
    3714:	af00      	add	r7, sp, #0
    3716:	6078      	str	r0, [r7, #4]
    3718:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	683a      	ldr	r2, [r7, #0]
    371e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3720:	bf00      	nop
    3722:	370c      	adds	r7, #12
    3724:	46bd      	mov	sp, r7
    3726:	f85d 7b04 	ldr.w	r7, [sp], #4
    372a:	4770      	bx	lr

0000372c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    372c:	b480      	push	{r7}
    372e:	b083      	sub	sp, #12
    3730:	af00      	add	r7, sp, #0
    3732:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3734:	687b      	ldr	r3, [r7, #4]
    3736:	699b      	ldr	r3, [r3, #24]
    3738:	f043 0201 	orr.w	r2, r3, #1
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3740:	bf00      	nop
    3742:	370c      	adds	r7, #12
    3744:	46bd      	mov	sp, r7
    3746:	f85d 7b04 	ldr.w	r7, [sp], #4
    374a:	4770      	bx	lr

0000374c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    374c:	b480      	push	{r7}
    374e:	b085      	sub	sp, #20
    3750:	af00      	add	r7, sp, #0
    3752:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	699b      	ldr	r3, [r3, #24]
    3758:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    375a:	68fb      	ldr	r3, [r7, #12]
    375c:	f003 0301 	and.w	r3, r3, #1
    3760:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3762:	68fb      	ldr	r3, [r7, #12]
    3764:	2b00      	cmp	r3, #0
    3766:	bf14      	ite	ne
    3768:	2301      	movne	r3, #1
    376a:	2300      	moveq	r3, #0
    376c:	b2db      	uxtb	r3, r3
}
    376e:	4618      	mov	r0, r3
    3770:	3714      	adds	r7, #20
    3772:	46bd      	mov	sp, r7
    3774:	f85d 7b04 	ldr.w	r7, [sp], #4
    3778:	4770      	bx	lr

0000377a <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    377a:	b480      	push	{r7}
    377c:	b083      	sub	sp, #12
    377e:	af00      	add	r7, sp, #0
    3780:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	699b      	ldr	r3, [r3, #24]
    3786:	f023 0201 	bic.w	r2, r3, #1
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    378e:	bf00      	nop
    3790:	370c      	adds	r7, #12
    3792:	46bd      	mov	sp, r7
    3794:	f85d 7b04 	ldr.w	r7, [sp], #4
    3798:	4770      	bx	lr

0000379a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    379a:	b480      	push	{r7}
    379c:	b083      	sub	sp, #12
    379e:	af00      	add	r7, sp, #0
    37a0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	699b      	ldr	r3, [r3, #24]
    37a6:	f043 0202 	orr.w	r2, r3, #2
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37ae:	bf00      	nop
    37b0:	370c      	adds	r7, #12
    37b2:	46bd      	mov	sp, r7
    37b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    37b8:	4770      	bx	lr

000037ba <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    37ba:	b480      	push	{r7}
    37bc:	b083      	sub	sp, #12
    37be:	af00      	add	r7, sp, #0
    37c0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	699b      	ldr	r3, [r3, #24]
    37c6:	f023 0202 	bic.w	r2, r3, #2
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37ce:	bf00      	nop
    37d0:	370c      	adds	r7, #12
    37d2:	46bd      	mov	sp, r7
    37d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    37d8:	4770      	bx	lr

000037da <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    37da:	b480      	push	{r7}
    37dc:	b083      	sub	sp, #12
    37de:	af00      	add	r7, sp, #0
    37e0:	6078      	str	r0, [r7, #4]
    37e2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	699a      	ldr	r2, [r3, #24]
    37e8:	683b      	ldr	r3, [r7, #0]
    37ea:	431a      	orrs	r2, r3
    37ec:	687b      	ldr	r3, [r7, #4]
    37ee:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37f0:	bf00      	nop
    37f2:	370c      	adds	r7, #12
    37f4:	46bd      	mov	sp, r7
    37f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37fa:	4770      	bx	lr

000037fc <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    37fc:	b480      	push	{r7}
    37fe:	b083      	sub	sp, #12
    3800:	af00      	add	r7, sp, #0
    3802:	6078      	str	r0, [r7, #4]
    3804:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	683a      	ldr	r2, [r7, #0]
    380a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    380c:	bf00      	nop
    380e:	370c      	adds	r7, #12
    3810:	46bd      	mov	sp, r7
    3812:	f85d 7b04 	ldr.w	r7, [sp], #4
    3816:	4770      	bx	lr

00003818 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3818:	b480      	push	{r7}
    381a:	b083      	sub	sp, #12
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	683a      	ldr	r2, [r7, #0]
    3826:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3828:	bf00      	nop
    382a:	370c      	adds	r7, #12
    382c:	46bd      	mov	sp, r7
    382e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3832:	4770      	bx	lr

00003834 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3834:	b480      	push	{r7}
    3836:	b083      	sub	sp, #12
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3840:	4618      	mov	r0, r3
    3842:	370c      	adds	r7, #12
    3844:	46bd      	mov	sp, r7
    3846:	f85d 7b04 	ldr.w	r7, [sp], #4
    384a:	4770      	bx	lr

0000384c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    384c:	b480      	push	{r7}
    384e:	b083      	sub	sp, #12
    3850:	af00      	add	r7, sp, #0
    3852:	6078      	str	r0, [r7, #4]
    3854:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	683a      	ldr	r2, [r7, #0]
    385a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    385c:	bf00      	nop
    385e:	370c      	adds	r7, #12
    3860:	46bd      	mov	sp, r7
    3862:	f85d 7b04 	ldr.w	r7, [sp], #4
    3866:	4770      	bx	lr

00003868 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3868:	b480      	push	{r7}
    386a:	b083      	sub	sp, #12
    386c:	af00      	add	r7, sp, #0
    386e:	6078      	str	r0, [r7, #4]
    3870:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	683a      	ldr	r2, [r7, #0]
    3876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    387a:	bf00      	nop
    387c:	370c      	adds	r7, #12
    387e:	46bd      	mov	sp, r7
    3880:	f85d 7b04 	ldr.w	r7, [sp], #4
    3884:	4770      	bx	lr

00003886 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3886:	b480      	push	{r7}
    3888:	b083      	sub	sp, #12
    388a:	af00      	add	r7, sp, #0
    388c:	6078      	str	r0, [r7, #4]
    388e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	683a      	ldr	r2, [r7, #0]
    3894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3898:	bf00      	nop
    389a:	370c      	adds	r7, #12
    389c:	46bd      	mov	sp, r7
    389e:	f85d 7b04 	ldr.w	r7, [sp], #4
    38a2:	4770      	bx	lr

000038a4 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    38a4:	b480      	push	{r7}
    38a6:	b083      	sub	sp, #12
    38a8:	af00      	add	r7, sp, #0
    38aa:	6078      	str	r0, [r7, #4]
    38ac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    38ae:	687b      	ldr	r3, [r7, #4]
    38b0:	683a      	ldr	r2, [r7, #0]
    38b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    38b6:	bf00      	nop
    38b8:	370c      	adds	r7, #12
    38ba:	46bd      	mov	sp, r7
    38bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    38c0:	4770      	bx	lr

000038c2 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    38c2:	b480      	push	{r7}
    38c4:	b083      	sub	sp, #12
    38c6:	af00      	add	r7, sp, #0
    38c8:	6078      	str	r0, [r7, #4]
    38ca:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    38cc:	687b      	ldr	r3, [r7, #4]
    38ce:	683a      	ldr	r2, [r7, #0]
    38d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    38d4:	bf00      	nop
    38d6:	370c      	adds	r7, #12
    38d8:	46bd      	mov	sp, r7
    38da:	f85d 7b04 	ldr.w	r7, [sp], #4
    38de:	4770      	bx	lr

000038e0 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    38e0:	b480      	push	{r7}
    38e2:	b083      	sub	sp, #12
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
    38e8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	683a      	ldr	r2, [r7, #0]
    38ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    38f2:	bf00      	nop
    38f4:	370c      	adds	r7, #12
    38f6:	46bd      	mov	sp, r7
    38f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    38fc:	4770      	bx	lr

000038fe <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    38fe:	b480      	push	{r7}
    3900:	b083      	sub	sp, #12
    3902:	af00      	add	r7, sp, #0
    3904:	6078      	str	r0, [r7, #4]
    3906:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	683a      	ldr	r2, [r7, #0]
    390c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3910:	bf00      	nop
    3912:	370c      	adds	r7, #12
    3914:	46bd      	mov	sp, r7
    3916:	f85d 7b04 	ldr.w	r7, [sp], #4
    391a:	4770      	bx	lr

0000391c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    391c:	b480      	push	{r7}
    391e:	b083      	sub	sp, #12
    3920:	af00      	add	r7, sp, #0
    3922:	6078      	str	r0, [r7, #4]
    3924:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	683a      	ldr	r2, [r7, #0]
    392a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    392e:	bf00      	nop
    3930:	370c      	adds	r7, #12
    3932:	46bd      	mov	sp, r7
    3934:	f85d 7b04 	ldr.w	r7, [sp], #4
    3938:	4770      	bx	lr

0000393a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    393a:	b480      	push	{r7}
    393c:	b083      	sub	sp, #12
    393e:	af00      	add	r7, sp, #0
    3940:	6078      	str	r0, [r7, #4]
    3942:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	683a      	ldr	r2, [r7, #0]
    3948:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    394c:	bf00      	nop
    394e:	370c      	adds	r7, #12
    3950:	46bd      	mov	sp, r7
    3952:	f85d 7b04 	ldr.w	r7, [sp], #4
    3956:	4770      	bx	lr

00003958 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3958:	b480      	push	{r7}
    395a:	b083      	sub	sp, #12
    395c:	af00      	add	r7, sp, #0
    395e:	6078      	str	r0, [r7, #4]
    3960:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	683a      	ldr	r2, [r7, #0]
    3966:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    396a:	bf00      	nop
    396c:	370c      	adds	r7, #12
    396e:	46bd      	mov	sp, r7
    3970:	f85d 7b04 	ldr.w	r7, [sp], #4
    3974:	4770      	bx	lr
	...

00003978 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3978:	b580      	push	{r7, lr}
    397a:	b082      	sub	sp, #8
    397c:	af00      	add	r7, sp, #0
    397e:	6078      	str	r0, [r7, #4]
    3980:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3982:	687b      	ldr	r3, [r7, #4]
    3984:	683a      	ldr	r2, [r7, #0]
    3986:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	681b      	ldr	r3, [r3, #0]
    398c:	4618      	mov	r0, r3
    398e:	4b56      	ldr	r3, [pc, #344]	; (3ae8 <_can_async_init+0x170>)
    3990:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3992:	bf00      	nop
    3994:	687b      	ldr	r3, [r7, #4]
    3996:	681b      	ldr	r3, [r3, #0]
    3998:	4618      	mov	r0, r3
    399a:	4b54      	ldr	r3, [pc, #336]	; (3aec <_can_async_init+0x174>)
    399c:	4798      	blx	r3
    399e:	4603      	mov	r3, r0
    39a0:	f083 0301 	eor.w	r3, r3, #1
    39a4:	b2db      	uxtb	r3, r3
    39a6:	2b00      	cmp	r3, #0
    39a8:	d1f4      	bne.n	3994 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    39aa:	687b      	ldr	r3, [r7, #4]
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	4618      	mov	r0, r3
    39b0:	4b4f      	ldr	r3, [pc, #316]	; (3af0 <_can_async_init+0x178>)
    39b2:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    39b4:	683b      	ldr	r3, [r7, #0]
    39b6:	4a4f      	ldr	r2, [pc, #316]	; (3af4 <_can_async_init+0x17c>)
    39b8:	4293      	cmp	r3, r2
    39ba:	d17c      	bne.n	3ab6 <_can_async_init+0x13e>
		_can1_dev    = dev;
    39bc:	4a4e      	ldr	r2, [pc, #312]	; (3af8 <_can_async_init+0x180>)
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	4a4d      	ldr	r2, [pc, #308]	; (3afc <_can_async_init+0x184>)
    39c6:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    39c8:	687b      	ldr	r3, [r7, #4]
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	f44f 7100 	mov.w	r1, #512	; 0x200
    39d0:	4618      	mov	r0, r3
    39d2:	4b4b      	ldr	r3, [pc, #300]	; (3b00 <_can_async_init+0x188>)
    39d4:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	2102      	movs	r1, #2
    39dc:	4618      	mov	r0, r3
    39de:	4b49      	ldr	r3, [pc, #292]	; (3b04 <_can_async_init+0x18c>)
    39e0:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	681b      	ldr	r3, [r3, #0]
    39e6:	f640 2103 	movw	r1, #2563	; 0xa03
    39ea:	4618      	mov	r0, r3
    39ec:	4b46      	ldr	r3, [pc, #280]	; (3b08 <_can_async_init+0x190>)
    39ee:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	681b      	ldr	r3, [r3, #0]
    39f4:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    39f8:	4618      	mov	r0, r3
    39fa:	4b44      	ldr	r3, [pc, #272]	; (3b0c <_can_async_init+0x194>)
    39fc:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    39fe:	687b      	ldr	r3, [r7, #4]
    3a00:	681a      	ldr	r2, [r3, #0]
    3a02:	4b43      	ldr	r3, [pc, #268]	; (3b10 <_can_async_init+0x198>)
    3a04:	b29b      	uxth	r3, r3
    3a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3a0e:	4619      	mov	r1, r3
    3a10:	4610      	mov	r0, r2
    3a12:	4b40      	ldr	r3, [pc, #256]	; (3b14 <_can_async_init+0x19c>)
    3a14:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	2107      	movs	r1, #7
    3a1c:	4618      	mov	r0, r3
    3a1e:	4b3e      	ldr	r3, [pc, #248]	; (3b18 <_can_async_init+0x1a0>)
    3a20:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	681b      	ldr	r3, [r3, #0]
    3a26:	2107      	movs	r1, #7
    3a28:	4618      	mov	r0, r3
    3a2a:	4b3c      	ldr	r3, [pc, #240]	; (3b1c <_can_async_init+0x1a4>)
    3a2c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3a2e:	687b      	ldr	r3, [r7, #4]
    3a30:	681a      	ldr	r2, [r3, #0]
    3a32:	4b3b      	ldr	r3, [pc, #236]	; (3b20 <_can_async_init+0x1a8>)
    3a34:	b29b      	uxth	r3, r3
    3a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3a3a:	4619      	mov	r1, r3
    3a3c:	4610      	mov	r0, r2
    3a3e:	4b39      	ldr	r3, [pc, #228]	; (3b24 <_can_async_init+0x1ac>)
    3a40:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	681a      	ldr	r2, [r3, #0]
    3a46:	4b38      	ldr	r3, [pc, #224]	; (3b28 <_can_async_init+0x1b0>)
    3a48:	b29b      	uxth	r3, r3
    3a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3a4e:	4619      	mov	r1, r3
    3a50:	4610      	mov	r0, r2
    3a52:	4b36      	ldr	r3, [pc, #216]	; (3b2c <_can_async_init+0x1b4>)
    3a54:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	2108      	movs	r1, #8
    3a5c:	4618      	mov	r0, r3
    3a5e:	4b34      	ldr	r3, [pc, #208]	; (3b30 <_can_async_init+0x1b8>)
    3a60:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	681a      	ldr	r2, [r3, #0]
    3a66:	4b33      	ldr	r3, [pc, #204]	; (3b34 <_can_async_init+0x1bc>)
    3a68:	b29b      	uxth	r3, r3
    3a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3a6e:	4619      	mov	r1, r3
    3a70:	4610      	mov	r0, r2
    3a72:	4b31      	ldr	r3, [pc, #196]	; (3b38 <_can_async_init+0x1c0>)
    3a74:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	681a      	ldr	r2, [r3, #0]
    3a7a:	4b30      	ldr	r3, [pc, #192]	; (3b3c <_can_async_init+0x1c4>)
    3a7c:	b29b      	uxth	r3, r3
    3a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3a82:	4619      	mov	r1, r3
    3a84:	4610      	mov	r0, r2
    3a86:	4b2e      	ldr	r3, [pc, #184]	; (3b40 <_can_async_init+0x1c8>)
    3a88:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	681b      	ldr	r3, [r3, #0]
    3a8e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3a92:	4618      	mov	r0, r3
    3a94:	4b2b      	ldr	r3, [pc, #172]	; (3b44 <_can_async_init+0x1cc>)
    3a96:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3a98:	204f      	movs	r0, #79	; 0x4f
    3a9a:	4b2b      	ldr	r3, [pc, #172]	; (3b48 <_can_async_init+0x1d0>)
    3a9c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3a9e:	204f      	movs	r0, #79	; 0x4f
    3aa0:	4b2a      	ldr	r3, [pc, #168]	; (3b4c <_can_async_init+0x1d4>)
    3aa2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3aa4:	204f      	movs	r0, #79	; 0x4f
    3aa6:	4b2a      	ldr	r3, [pc, #168]	; (3b50 <_can_async_init+0x1d8>)
    3aa8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	2101      	movs	r1, #1
    3ab0:	4618      	mov	r0, r3
    3ab2:	4b28      	ldr	r3, [pc, #160]	; (3b54 <_can_async_init+0x1dc>)
    3ab4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3ab6:	687b      	ldr	r3, [r7, #4]
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	4618      	mov	r0, r3
    3abc:	4b26      	ldr	r3, [pc, #152]	; (3b58 <_can_async_init+0x1e0>)
    3abe:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3ac0:	687b      	ldr	r3, [r7, #4]
    3ac2:	681b      	ldr	r3, [r3, #0]
    3ac4:	4618      	mov	r0, r3
    3ac6:	4b25      	ldr	r3, [pc, #148]	; (3b5c <_can_async_init+0x1e4>)
    3ac8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3aca:	bf00      	nop
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	4618      	mov	r0, r3
    3ad2:	4b06      	ldr	r3, [pc, #24]	; (3aec <_can_async_init+0x174>)
    3ad4:	4798      	blx	r3
    3ad6:	4603      	mov	r3, r0
    3ad8:	2b00      	cmp	r3, #0
    3ada:	d1f7      	bne.n	3acc <_can_async_init+0x154>
	};

	return ERR_NONE;
    3adc:	2300      	movs	r3, #0
}
    3ade:	4618      	mov	r0, r3
    3ae0:	3708      	adds	r7, #8
    3ae2:	46bd      	mov	sp, r7
    3ae4:	bd80      	pop	{r7, pc}
    3ae6:	bf00      	nop
    3ae8:	0000372d 	.word	0x0000372d
    3aec:	0000374d 	.word	0x0000374d
    3af0:	0000379b 	.word	0x0000379b
    3af4:	42000400 	.word	0x42000400
    3af8:	200009e0 	.word	0x200009e0
    3afc:	20000004 	.word	0x20000004
    3b00:	000037db 	.word	0x000037db
    3b04:	000036f5 	.word	0x000036f5
    3b08:	000037fd 	.word	0x000037fd
    3b0c:	00003711 	.word	0x00003711
    3b10:	2000183c 	.word	0x2000183c
    3b14:	000038e1 	.word	0x000038e1
    3b18:	000038ff 	.word	0x000038ff
    3b1c:	0000393b 	.word	0x0000393b
    3b20:	200017f4 	.word	0x200017f4
    3b24:	0000391d 	.word	0x0000391d
    3b28:	20000940 	.word	0x20000940
    3b2c:	00003959 	.word	0x00003959
    3b30:	00003869 	.word	0x00003869
    3b34:	20000950 	.word	0x20000950
    3b38:	00003887 	.word	0x00003887
    3b3c:	200009d0 	.word	0x200009d0
    3b40:	000038a5 	.word	0x000038a5
    3b44:	000038c3 	.word	0x000038c3
    3b48:	0000364d 	.word	0x0000364d
    3b4c:	00003691 	.word	0x00003691
    3b50:	00003611 	.word	0x00003611
    3b54:	0000384d 	.word	0x0000384d
    3b58:	000037bb 	.word	0x000037bb
    3b5c:	0000377b 	.word	0x0000377b

00003b60 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3b60:	b590      	push	{r4, r7, lr}
    3b62:	b083      	sub	sp, #12
    3b64:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3b66:	4b2c      	ldr	r3, [pc, #176]	; (3c18 <CAN1_Handler+0xb8>)
    3b68:	681b      	ldr	r3, [r3, #0]
    3b6a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	681b      	ldr	r3, [r3, #0]
    3b70:	4618      	mov	r0, r3
    3b72:	4b2a      	ldr	r3, [pc, #168]	; (3c1c <CAN1_Handler+0xbc>)
    3b74:	4798      	blx	r3
    3b76:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3b78:	683b      	ldr	r3, [r7, #0]
    3b7a:	f003 0301 	and.w	r3, r3, #1
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d003      	beq.n	3b8a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3b82:	687b      	ldr	r3, [r7, #4]
    3b84:	689b      	ldr	r3, [r3, #8]
    3b86:	6878      	ldr	r0, [r7, #4]
    3b88:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3b8a:	683b      	ldr	r3, [r7, #0]
    3b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3b90:	2b00      	cmp	r3, #0
    3b92:	d003      	beq.n	3b9c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3b94:	687b      	ldr	r3, [r7, #4]
    3b96:	685b      	ldr	r3, [r3, #4]
    3b98:	6878      	ldr	r0, [r7, #4]
    3b9a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3b9c:	683b      	ldr	r3, [r7, #0]
    3b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d004      	beq.n	3bb0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	68db      	ldr	r3, [r3, #12]
    3baa:	2103      	movs	r1, #3
    3bac:	6878      	ldr	r0, [r7, #4]
    3bae:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3bb0:	683b      	ldr	r3, [r7, #0]
    3bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d004      	beq.n	3bc4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3bba:	687b      	ldr	r3, [r7, #4]
    3bbc:	68db      	ldr	r3, [r3, #12]
    3bbe:	2100      	movs	r1, #0
    3bc0:	6878      	ldr	r0, [r7, #4]
    3bc2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3bc4:	683b      	ldr	r3, [r7, #0]
    3bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d00f      	beq.n	3bee <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3bce:	687b      	ldr	r3, [r7, #4]
    3bd0:	68dc      	ldr	r4, [r3, #12]
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	4618      	mov	r0, r3
    3bd8:	4b11      	ldr	r3, [pc, #68]	; (3c20 <CAN1_Handler+0xc0>)
    3bda:	4798      	blx	r3
    3bdc:	4603      	mov	r3, r0
    3bde:	2b00      	cmp	r3, #0
    3be0:	d001      	beq.n	3be6 <CAN1_Handler+0x86>
    3be2:	2302      	movs	r3, #2
    3be4:	e000      	b.n	3be8 <CAN1_Handler+0x88>
    3be6:	2301      	movs	r3, #1
    3be8:	4619      	mov	r1, r3
    3bea:	6878      	ldr	r0, [r7, #4]
    3bec:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3bee:	683b      	ldr	r3, [r7, #0]
    3bf0:	f003 0308 	and.w	r3, r3, #8
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d004      	beq.n	3c02 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	68db      	ldr	r3, [r3, #12]
    3bfc:	2104      	movs	r1, #4
    3bfe:	6878      	ldr	r0, [r7, #4]
    3c00:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	6839      	ldr	r1, [r7, #0]
    3c08:	4618      	mov	r0, r3
    3c0a:	4b06      	ldr	r3, [pc, #24]	; (3c24 <CAN1_Handler+0xc4>)
    3c0c:	4798      	blx	r3
}
    3c0e:	bf00      	nop
    3c10:	370c      	adds	r7, #12
    3c12:	46bd      	mov	sp, r7
    3c14:	bd90      	pop	{r4, r7, pc}
    3c16:	bf00      	nop
    3c18:	200009e0 	.word	0x200009e0
    3c1c:	00003835 	.word	0x00003835
    3c20:	000036cd 	.word	0x000036cd
    3c24:	00003819 	.word	0x00003819

00003c28 <__NVIC_SetPendingIRQ>:
{
    3c28:	b480      	push	{r7}
    3c2a:	b083      	sub	sp, #12
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	4603      	mov	r3, r0
    3c30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3c36:	2b00      	cmp	r3, #0
    3c38:	db0c      	blt.n	3c54 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c3a:	4909      	ldr	r1, [pc, #36]	; (3c60 <__NVIC_SetPendingIRQ+0x38>)
    3c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3c40:	095b      	lsrs	r3, r3, #5
    3c42:	88fa      	ldrh	r2, [r7, #6]
    3c44:	f002 021f 	and.w	r2, r2, #31
    3c48:	2001      	movs	r0, #1
    3c4a:	fa00 f202 	lsl.w	r2, r0, r2
    3c4e:	3340      	adds	r3, #64	; 0x40
    3c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3c54:	bf00      	nop
    3c56:	370c      	adds	r7, #12
    3c58:	46bd      	mov	sp, r7
    3c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5e:	4770      	bx	lr
    3c60:	e000e100 	.word	0xe000e100

00003c64 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3c64:	b580      	push	{r7, lr}
    3c66:	b082      	sub	sp, #8
    3c68:	af00      	add	r7, sp, #0
    3c6a:	4603      	mov	r3, r0
    3c6c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3c6e:	79fb      	ldrb	r3, [r7, #7]
    3c70:	b21b      	sxth	r3, r3
    3c72:	4618      	mov	r0, r3
    3c74:	4b02      	ldr	r3, [pc, #8]	; (3c80 <_irq_set+0x1c>)
    3c76:	4798      	blx	r3
}
    3c78:	bf00      	nop
    3c7a:	3708      	adds	r7, #8
    3c7c:	46bd      	mov	sp, r7
    3c7e:	bd80      	pop	{r7, pc}
    3c80:	00003c29 	.word	0x00003c29

00003c84 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3c84:	b480      	push	{r7}
    3c86:	b083      	sub	sp, #12
    3c88:	af00      	add	r7, sp, #0
    3c8a:	4603      	mov	r3, r0
    3c8c:	6039      	str	r1, [r7, #0]
    3c8e:	80fb      	strh	r3, [r7, #6]
    3c90:	4613      	mov	r3, r2
    3c92:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3c94:	797b      	ldrb	r3, [r7, #5]
    3c96:	3b04      	subs	r3, #4
    3c98:	2b05      	cmp	r3, #5
    3c9a:	d86b      	bhi.n	3d74 <_get_cycles_for_us_internal+0xf0>
    3c9c:	a201      	add	r2, pc, #4	; (adr r2, 3ca4 <_get_cycles_for_us_internal+0x20>)
    3c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3ca2:	bf00      	nop
    3ca4:	00003d53 	.word	0x00003d53
    3ca8:	00003d33 	.word	0x00003d33
    3cac:	00003d15 	.word	0x00003d15
    3cb0:	00003cf7 	.word	0x00003cf7
    3cb4:	00003cd9 	.word	0x00003cd9
    3cb8:	00003cbd 	.word	0x00003cbd
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3cbc:	88fb      	ldrh	r3, [r7, #6]
    3cbe:	683a      	ldr	r2, [r7, #0]
    3cc0:	4935      	ldr	r1, [pc, #212]	; (3d98 <_get_cycles_for_us_internal+0x114>)
    3cc2:	fba1 1202 	umull	r1, r2, r1, r2
    3cc6:	0c92      	lsrs	r2, r2, #18
    3cc8:	fb02 f303 	mul.w	r3, r2, r3
    3ccc:	3302      	adds	r3, #2
    3cce:	4a33      	ldr	r2, [pc, #204]	; (3d9c <_get_cycles_for_us_internal+0x118>)
    3cd0:	fba2 2303 	umull	r2, r3, r2, r3
    3cd4:	085b      	lsrs	r3, r3, #1
    3cd6:	e059      	b.n	3d8c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3cd8:	88fb      	ldrh	r3, [r7, #6]
    3cda:	683a      	ldr	r2, [r7, #0]
    3cdc:	0952      	lsrs	r2, r2, #5
    3cde:	4930      	ldr	r1, [pc, #192]	; (3da0 <_get_cycles_for_us_internal+0x11c>)
    3ce0:	fba1 1202 	umull	r1, r2, r1, r2
    3ce4:	09d2      	lsrs	r2, r2, #7
    3ce6:	fb02 f303 	mul.w	r3, r2, r3
    3cea:	331d      	adds	r3, #29
    3cec:	4a2d      	ldr	r2, [pc, #180]	; (3da4 <_get_cycles_for_us_internal+0x120>)
    3cee:	fba2 2303 	umull	r2, r3, r2, r3
    3cf2:	091b      	lsrs	r3, r3, #4
    3cf4:	e04a      	b.n	3d8c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3cf6:	88fb      	ldrh	r3, [r7, #6]
    3cf8:	683a      	ldr	r2, [r7, #0]
    3cfa:	492b      	ldr	r1, [pc, #172]	; (3da8 <_get_cycles_for_us_internal+0x124>)
    3cfc:	fba1 1202 	umull	r1, r2, r1, r2
    3d00:	0b52      	lsrs	r2, r2, #13
    3d02:	fb02 f303 	mul.w	r3, r2, r3
    3d06:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3d0a:	4a28      	ldr	r2, [pc, #160]	; (3dac <_get_cycles_for_us_internal+0x128>)
    3d0c:	fba2 2303 	umull	r2, r3, r2, r3
    3d10:	095b      	lsrs	r3, r3, #5
    3d12:	e03b      	b.n	3d8c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3d14:	88fb      	ldrh	r3, [r7, #6]
    3d16:	683a      	ldr	r2, [r7, #0]
    3d18:	4925      	ldr	r1, [pc, #148]	; (3db0 <_get_cycles_for_us_internal+0x12c>)
    3d1a:	fba1 1202 	umull	r1, r2, r1, r2
    3d1e:	0992      	lsrs	r2, r2, #6
    3d20:	fb02 f303 	mul.w	r3, r2, r3
    3d24:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3d28:	4a22      	ldr	r2, [pc, #136]	; (3db4 <_get_cycles_for_us_internal+0x130>)
    3d2a:	fba2 2303 	umull	r2, r3, r2, r3
    3d2e:	099b      	lsrs	r3, r3, #6
    3d30:	e02c      	b.n	3d8c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3d32:	88fb      	ldrh	r3, [r7, #6]
    3d34:	683a      	ldr	r2, [r7, #0]
    3d36:	4920      	ldr	r1, [pc, #128]	; (3db8 <_get_cycles_for_us_internal+0x134>)
    3d38:	fba1 1202 	umull	r1, r2, r1, r2
    3d3c:	0952      	lsrs	r2, r2, #5
    3d3e:	fb02 f303 	mul.w	r3, r2, r3
    3d42:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3d46:	332f      	adds	r3, #47	; 0x2f
    3d48:	4a1c      	ldr	r2, [pc, #112]	; (3dbc <_get_cycles_for_us_internal+0x138>)
    3d4a:	fba2 2303 	umull	r2, r3, r2, r3
    3d4e:	0b5b      	lsrs	r3, r3, #13
    3d50:	e01c      	b.n	3d8c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3d52:	88fb      	ldrh	r3, [r7, #6]
    3d54:	683a      	ldr	r2, [r7, #0]
    3d56:	491a      	ldr	r1, [pc, #104]	; (3dc0 <_get_cycles_for_us_internal+0x13c>)
    3d58:	fba1 1202 	umull	r1, r2, r1, r2
    3d5c:	08d2      	lsrs	r2, r2, #3
    3d5e:	fb02 f303 	mul.w	r3, r2, r3
    3d62:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3d66:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3d6a:	4a16      	ldr	r2, [pc, #88]	; (3dc4 <_get_cycles_for_us_internal+0x140>)
    3d6c:	fba2 2303 	umull	r2, r3, r2, r3
    3d70:	0c5b      	lsrs	r3, r3, #17
    3d72:	e00b      	b.n	3d8c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3d74:	88fb      	ldrh	r3, [r7, #6]
    3d76:	683a      	ldr	r2, [r7, #0]
    3d78:	fb02 f303 	mul.w	r3, r2, r3
    3d7c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3d80:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3d84:	4a10      	ldr	r2, [pc, #64]	; (3dc8 <_get_cycles_for_us_internal+0x144>)
    3d86:	fba2 2303 	umull	r2, r3, r2, r3
    3d8a:	0c9b      	lsrs	r3, r3, #18
	}
}
    3d8c:	4618      	mov	r0, r3
    3d8e:	370c      	adds	r7, #12
    3d90:	46bd      	mov	sp, r7
    3d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d96:	4770      	bx	lr
    3d98:	431bde83 	.word	0x431bde83
    3d9c:	aaaaaaab 	.word	0xaaaaaaab
    3da0:	0a7c5ac5 	.word	0x0a7c5ac5
    3da4:	88888889 	.word	0x88888889
    3da8:	d1b71759 	.word	0xd1b71759
    3dac:	1b4e81b5 	.word	0x1b4e81b5
    3db0:	10624dd3 	.word	0x10624dd3
    3db4:	057619f1 	.word	0x057619f1
    3db8:	51eb851f 	.word	0x51eb851f
    3dbc:	45e7b273 	.word	0x45e7b273
    3dc0:	cccccccd 	.word	0xcccccccd
    3dc4:	6fd91d85 	.word	0x6fd91d85
    3dc8:	165e9f81 	.word	0x165e9f81

00003dcc <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3dcc:	b580      	push	{r7, lr}
    3dce:	b082      	sub	sp, #8
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	4603      	mov	r3, r0
    3dd4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3dd6:	88fb      	ldrh	r3, [r7, #6]
    3dd8:	2209      	movs	r2, #9
    3dda:	4904      	ldr	r1, [pc, #16]	; (3dec <_get_cycles_for_us+0x20>)
    3ddc:	4618      	mov	r0, r3
    3dde:	4b04      	ldr	r3, [pc, #16]	; (3df0 <_get_cycles_for_us+0x24>)
    3de0:	4798      	blx	r3
    3de2:	4603      	mov	r3, r0
}
    3de4:	4618      	mov	r0, r3
    3de6:	3708      	adds	r7, #8
    3de8:	46bd      	mov	sp, r7
    3dea:	bd80      	pop	{r7, pc}
    3dec:	07270e00 	.word	0x07270e00
    3df0:	00003c85 	.word	0x00003c85

00003df4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3df4:	b480      	push	{r7}
    3df6:	b083      	sub	sp, #12
    3df8:	af00      	add	r7, sp, #0
    3dfa:	4603      	mov	r3, r0
    3dfc:	6039      	str	r1, [r7, #0]
    3dfe:	80fb      	strh	r3, [r7, #6]
    3e00:	4613      	mov	r3, r2
    3e02:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3e04:	797b      	ldrb	r3, [r7, #5]
    3e06:	3b04      	subs	r3, #4
    3e08:	2b05      	cmp	r3, #5
    3e0a:	d870      	bhi.n	3eee <_get_cycles_for_ms_internal+0xfa>
    3e0c:	a201      	add	r2, pc, #4	; (adr r2, 3e14 <_get_cycles_for_ms_internal+0x20>)
    3e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3e12:	bf00      	nop
    3e14:	00003ed1 	.word	0x00003ed1
    3e18:	00003eb5 	.word	0x00003eb5
    3e1c:	00003e99 	.word	0x00003e99
    3e20:	00003e75 	.word	0x00003e75
    3e24:	00003e51 	.word	0x00003e51
    3e28:	00003e2d 	.word	0x00003e2d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3e2c:	88fb      	ldrh	r3, [r7, #6]
    3e2e:	683a      	ldr	r2, [r7, #0]
    3e30:	4937      	ldr	r1, [pc, #220]	; (3f10 <_get_cycles_for_ms_internal+0x11c>)
    3e32:	fba1 1202 	umull	r1, r2, r1, r2
    3e36:	0c92      	lsrs	r2, r2, #18
    3e38:	fb02 f303 	mul.w	r3, r2, r3
    3e3c:	3302      	adds	r3, #2
    3e3e:	4a35      	ldr	r2, [pc, #212]	; (3f14 <_get_cycles_for_ms_internal+0x120>)
    3e40:	fba2 2303 	umull	r2, r3, r2, r3
    3e44:	085b      	lsrs	r3, r3, #1
    3e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e4a:	fb02 f303 	mul.w	r3, r2, r3
    3e4e:	e058      	b.n	3f02 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3e50:	88fb      	ldrh	r3, [r7, #6]
    3e52:	683a      	ldr	r2, [r7, #0]
    3e54:	0952      	lsrs	r2, r2, #5
    3e56:	4930      	ldr	r1, [pc, #192]	; (3f18 <_get_cycles_for_ms_internal+0x124>)
    3e58:	fba1 1202 	umull	r1, r2, r1, r2
    3e5c:	09d2      	lsrs	r2, r2, #7
    3e5e:	fb02 f303 	mul.w	r3, r2, r3
    3e62:	3302      	adds	r3, #2
    3e64:	4a2b      	ldr	r2, [pc, #172]	; (3f14 <_get_cycles_for_ms_internal+0x120>)
    3e66:	fba2 2303 	umull	r2, r3, r2, r3
    3e6a:	085b      	lsrs	r3, r3, #1
    3e6c:	2264      	movs	r2, #100	; 0x64
    3e6e:	fb02 f303 	mul.w	r3, r2, r3
    3e72:	e046      	b.n	3f02 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3e74:	88fb      	ldrh	r3, [r7, #6]
    3e76:	683a      	ldr	r2, [r7, #0]
    3e78:	4928      	ldr	r1, [pc, #160]	; (3f1c <_get_cycles_for_ms_internal+0x128>)
    3e7a:	fba1 1202 	umull	r1, r2, r1, r2
    3e7e:	0b52      	lsrs	r2, r2, #13
    3e80:	fb02 f303 	mul.w	r3, r2, r3
    3e84:	3302      	adds	r3, #2
    3e86:	4a23      	ldr	r2, [pc, #140]	; (3f14 <_get_cycles_for_ms_internal+0x120>)
    3e88:	fba2 2303 	umull	r2, r3, r2, r3
    3e8c:	085a      	lsrs	r2, r3, #1
    3e8e:	4613      	mov	r3, r2
    3e90:	009b      	lsls	r3, r3, #2
    3e92:	4413      	add	r3, r2
    3e94:	005b      	lsls	r3, r3, #1
    3e96:	e034      	b.n	3f02 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3e98:	88fb      	ldrh	r3, [r7, #6]
    3e9a:	683a      	ldr	r2, [r7, #0]
    3e9c:	4920      	ldr	r1, [pc, #128]	; (3f20 <_get_cycles_for_ms_internal+0x12c>)
    3e9e:	fba1 1202 	umull	r1, r2, r1, r2
    3ea2:	0992      	lsrs	r2, r2, #6
    3ea4:	fb02 f303 	mul.w	r3, r2, r3
    3ea8:	3302      	adds	r3, #2
    3eaa:	4a1a      	ldr	r2, [pc, #104]	; (3f14 <_get_cycles_for_ms_internal+0x120>)
    3eac:	fba2 2303 	umull	r2, r3, r2, r3
    3eb0:	085b      	lsrs	r3, r3, #1
    3eb2:	e026      	b.n	3f02 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3eb4:	88fb      	ldrh	r3, [r7, #6]
    3eb6:	683a      	ldr	r2, [r7, #0]
    3eb8:	491a      	ldr	r1, [pc, #104]	; (3f24 <_get_cycles_for_ms_internal+0x130>)
    3eba:	fba1 1202 	umull	r1, r2, r1, r2
    3ebe:	0952      	lsrs	r2, r2, #5
    3ec0:	fb02 f303 	mul.w	r3, r2, r3
    3ec4:	331d      	adds	r3, #29
    3ec6:	4a18      	ldr	r2, [pc, #96]	; (3f28 <_get_cycles_for_ms_internal+0x134>)
    3ec8:	fba2 2303 	umull	r2, r3, r2, r3
    3ecc:	091b      	lsrs	r3, r3, #4
    3ece:	e018      	b.n	3f02 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3ed0:	88fb      	ldrh	r3, [r7, #6]
    3ed2:	683a      	ldr	r2, [r7, #0]
    3ed4:	4915      	ldr	r1, [pc, #84]	; (3f2c <_get_cycles_for_ms_internal+0x138>)
    3ed6:	fba1 1202 	umull	r1, r2, r1, r2
    3eda:	08d2      	lsrs	r2, r2, #3
    3edc:	fb02 f303 	mul.w	r3, r2, r3
    3ee0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3ee4:	4a12      	ldr	r2, [pc, #72]	; (3f30 <_get_cycles_for_ms_internal+0x13c>)
    3ee6:	fba2 2303 	umull	r2, r3, r2, r3
    3eea:	095b      	lsrs	r3, r3, #5
    3eec:	e009      	b.n	3f02 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3eee:	88fb      	ldrh	r3, [r7, #6]
    3ef0:	683a      	ldr	r2, [r7, #0]
    3ef2:	fb02 f303 	mul.w	r3, r2, r3
    3ef6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3efa:	4a0e      	ldr	r2, [pc, #56]	; (3f34 <_get_cycles_for_ms_internal+0x140>)
    3efc:	fba2 2303 	umull	r2, r3, r2, r3
    3f00:	099b      	lsrs	r3, r3, #6
	}
}
    3f02:	4618      	mov	r0, r3
    3f04:	370c      	adds	r7, #12
    3f06:	46bd      	mov	sp, r7
    3f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop
    3f10:	431bde83 	.word	0x431bde83
    3f14:	aaaaaaab 	.word	0xaaaaaaab
    3f18:	0a7c5ac5 	.word	0x0a7c5ac5
    3f1c:	d1b71759 	.word	0xd1b71759
    3f20:	10624dd3 	.word	0x10624dd3
    3f24:	51eb851f 	.word	0x51eb851f
    3f28:	88888889 	.word	0x88888889
    3f2c:	cccccccd 	.word	0xcccccccd
    3f30:	1b4e81b5 	.word	0x1b4e81b5
    3f34:	057619f1 	.word	0x057619f1

00003f38 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	4603      	mov	r3, r0
    3f40:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3f42:	88fb      	ldrh	r3, [r7, #6]
    3f44:	2209      	movs	r2, #9
    3f46:	4904      	ldr	r1, [pc, #16]	; (3f58 <_get_cycles_for_ms+0x20>)
    3f48:	4618      	mov	r0, r3
    3f4a:	4b04      	ldr	r3, [pc, #16]	; (3f5c <_get_cycles_for_ms+0x24>)
    3f4c:	4798      	blx	r3
    3f4e:	4603      	mov	r3, r0
}
    3f50:	4618      	mov	r0, r3
    3f52:	3708      	adds	r7, #8
    3f54:	46bd      	mov	sp, r7
    3f56:	bd80      	pop	{r7, pc}
    3f58:	07270e00 	.word	0x07270e00
    3f5c:	00003df5 	.word	0x00003df5

00003f60 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3f60:	b480      	push	{r7}
    3f62:	b083      	sub	sp, #12
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	6039      	str	r1, [r7, #0]
    3f6a:	bf00      	nop
    3f6c:	f3af 8000 	nop.w

00003f70 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3f70:	3901      	subs	r1, #1
    3f72:	d8fd      	bhi.n	3f70 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3f74:	bf00      	nop
    3f76:	370c      	adds	r7, #12
    3f78:	46bd      	mov	sp, r7
    3f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f7e:	4770      	bx	lr

00003f80 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3f80:	b480      	push	{r7}
    3f82:	b083      	sub	sp, #12
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
    3f88:	460b      	mov	r3, r1
    3f8a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3f8c:	687b      	ldr	r3, [r7, #4]
    3f8e:	881b      	ldrh	r3, [r3, #0]
    3f90:	b29a      	uxth	r2, r3
    3f92:	887b      	ldrh	r3, [r7, #2]
    3f94:	021b      	lsls	r3, r3, #8
    3f96:	b29b      	uxth	r3, r3
    3f98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3f9c:	b29b      	uxth	r3, r3
    3f9e:	4313      	orrs	r3, r2
    3fa0:	b29a      	uxth	r2, r3
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3fa6:	bf00      	nop
    3fa8:	370c      	adds	r7, #12
    3faa:	46bd      	mov	sp, r7
    3fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fb0:	4770      	bx	lr

00003fb2 <hri_port_set_EVCTRL_reg>:
{
    3fb2:	b480      	push	{r7}
    3fb4:	b085      	sub	sp, #20
    3fb6:	af00      	add	r7, sp, #0
    3fb8:	60f8      	str	r0, [r7, #12]
    3fba:	460b      	mov	r3, r1
    3fbc:	607a      	str	r2, [r7, #4]
    3fbe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3fc0:	7afb      	ldrb	r3, [r7, #11]
    3fc2:	7afa      	ldrb	r2, [r7, #11]
    3fc4:	68f9      	ldr	r1, [r7, #12]
    3fc6:	01d2      	lsls	r2, r2, #7
    3fc8:	440a      	add	r2, r1
    3fca:	322c      	adds	r2, #44	; 0x2c
    3fcc:	6811      	ldr	r1, [r2, #0]
    3fce:	687a      	ldr	r2, [r7, #4]
    3fd0:	430a      	orrs	r2, r1
    3fd2:	68f9      	ldr	r1, [r7, #12]
    3fd4:	01db      	lsls	r3, r3, #7
    3fd6:	440b      	add	r3, r1
    3fd8:	332c      	adds	r3, #44	; 0x2c
    3fda:	601a      	str	r2, [r3, #0]
}
    3fdc:	bf00      	nop
    3fde:	3714      	adds	r7, #20
    3fe0:	46bd      	mov	sp, r7
    3fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe6:	4770      	bx	lr

00003fe8 <_port_event_init>:

static inline void _port_event_init()
{
    3fe8:	b580      	push	{r7, lr}
    3fea:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3fec:	2200      	movs	r2, #0
    3fee:	2100      	movs	r1, #0
    3ff0:	480a      	ldr	r0, [pc, #40]	; (401c <_port_event_init+0x34>)
    3ff2:	4b0b      	ldr	r3, [pc, #44]	; (4020 <_port_event_init+0x38>)
    3ff4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3ff6:	2200      	movs	r2, #0
    3ff8:	2101      	movs	r1, #1
    3ffa:	4808      	ldr	r0, [pc, #32]	; (401c <_port_event_init+0x34>)
    3ffc:	4b08      	ldr	r3, [pc, #32]	; (4020 <_port_event_init+0x38>)
    3ffe:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4000:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4004:	2102      	movs	r1, #2
    4006:	4805      	ldr	r0, [pc, #20]	; (401c <_port_event_init+0x34>)
    4008:	4b05      	ldr	r3, [pc, #20]	; (4020 <_port_event_init+0x38>)
    400a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    400c:	2200      	movs	r2, #0
    400e:	2103      	movs	r1, #3
    4010:	4802      	ldr	r0, [pc, #8]	; (401c <_port_event_init+0x34>)
    4012:	4b03      	ldr	r3, [pc, #12]	; (4020 <_port_event_init+0x38>)
    4014:	4798      	blx	r3
}
    4016:	bf00      	nop
    4018:	bd80      	pop	{r7, pc}
    401a:	bf00      	nop
    401c:	41008000 	.word	0x41008000
    4020:	00003fb3 	.word	0x00003fb3

00004024 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4024:	b580      	push	{r7, lr}
    4026:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4028:	2104      	movs	r1, #4
    402a:	480b      	ldr	r0, [pc, #44]	; (4058 <_init_chip+0x34>)
    402c:	4b0b      	ldr	r3, [pc, #44]	; (405c <_init_chip+0x38>)
    402e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4030:	4b0b      	ldr	r3, [pc, #44]	; (4060 <_init_chip+0x3c>)
    4032:	4798      	blx	r3
	_oscctrl_init_sources();
    4034:	4b0b      	ldr	r3, [pc, #44]	; (4064 <_init_chip+0x40>)
    4036:	4798      	blx	r3
	_mclk_init();
    4038:	4b0b      	ldr	r3, [pc, #44]	; (4068 <_init_chip+0x44>)
    403a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    403c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4040:	4b0a      	ldr	r3, [pc, #40]	; (406c <_init_chip+0x48>)
    4042:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4044:	4b0a      	ldr	r3, [pc, #40]	; (4070 <_init_chip+0x4c>)
    4046:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4048:	f640 30df 	movw	r0, #3039	; 0xbdf
    404c:	4b07      	ldr	r3, [pc, #28]	; (406c <_init_chip+0x48>)
    404e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4050:	4b08      	ldr	r3, [pc, #32]	; (4074 <_init_chip+0x50>)
    4052:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4054:	bf00      	nop
    4056:	bd80      	pop	{r7, pc}
    4058:	41004000 	.word	0x41004000
    405c:	00003f81 	.word	0x00003f81
    4060:	00004b4d 	.word	0x00004b4d
    4064:	00005015 	.word	0x00005015
    4068:	00004a6d 	.word	0x00004a6d
    406c:	00004915 	.word	0x00004915
    4070:	00005055 	.word	0x00005055
    4074:	00003fe9 	.word	0x00003fe9

00004078 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4078:	b480      	push	{r7}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
    407e:	6078      	str	r0, [r7, #4]
    4080:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	683a      	ldr	r2, [r7, #0]
    4086:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4088:	2300      	movs	r3, #0
}
    408a:	4618      	mov	r0, r3
    408c:	370c      	adds	r7, #12
    408e:	46bd      	mov	sp, r7
    4090:	f85d 7b04 	ldr.w	r7, [sp], #4
    4094:	4770      	bx	lr
	...

00004098 <__NVIC_EnableIRQ>:
{
    4098:	b480      	push	{r7}
    409a:	b083      	sub	sp, #12
    409c:	af00      	add	r7, sp, #0
    409e:	4603      	mov	r3, r0
    40a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40a6:	2b00      	cmp	r3, #0
    40a8:	db0b      	blt.n	40c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40aa:	4909      	ldr	r1, [pc, #36]	; (40d0 <__NVIC_EnableIRQ+0x38>)
    40ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40b0:	095b      	lsrs	r3, r3, #5
    40b2:	88fa      	ldrh	r2, [r7, #6]
    40b4:	f002 021f 	and.w	r2, r2, #31
    40b8:	2001      	movs	r0, #1
    40ba:	fa00 f202 	lsl.w	r2, r0, r2
    40be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40c2:	bf00      	nop
    40c4:	370c      	adds	r7, #12
    40c6:	46bd      	mov	sp, r7
    40c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40cc:	4770      	bx	lr
    40ce:	bf00      	nop
    40d0:	e000e100 	.word	0xe000e100

000040d4 <__NVIC_DisableIRQ>:
{
    40d4:	b480      	push	{r7}
    40d6:	b083      	sub	sp, #12
    40d8:	af00      	add	r7, sp, #0
    40da:	4603      	mov	r3, r0
    40dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40e2:	2b00      	cmp	r3, #0
    40e4:	db10      	blt.n	4108 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40e6:	490b      	ldr	r1, [pc, #44]	; (4114 <__NVIC_DisableIRQ+0x40>)
    40e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40ec:	095b      	lsrs	r3, r3, #5
    40ee:	88fa      	ldrh	r2, [r7, #6]
    40f0:	f002 021f 	and.w	r2, r2, #31
    40f4:	2001      	movs	r0, #1
    40f6:	fa00 f202 	lsl.w	r2, r0, r2
    40fa:	3320      	adds	r3, #32
    40fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4100:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4104:	f3bf 8f6f 	isb	sy
}
    4108:	bf00      	nop
    410a:	370c      	adds	r7, #12
    410c:	46bd      	mov	sp, r7
    410e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4112:	4770      	bx	lr
    4114:	e000e100 	.word	0xe000e100

00004118 <__NVIC_ClearPendingIRQ>:
{
    4118:	b480      	push	{r7}
    411a:	b083      	sub	sp, #12
    411c:	af00      	add	r7, sp, #0
    411e:	4603      	mov	r3, r0
    4120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4126:	2b00      	cmp	r3, #0
    4128:	db0c      	blt.n	4144 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    412a:	4909      	ldr	r1, [pc, #36]	; (4150 <__NVIC_ClearPendingIRQ+0x38>)
    412c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4130:	095b      	lsrs	r3, r3, #5
    4132:	88fa      	ldrh	r2, [r7, #6]
    4134:	f002 021f 	and.w	r2, r2, #31
    4138:	2001      	movs	r0, #1
    413a:	fa00 f202 	lsl.w	r2, r0, r2
    413e:	3360      	adds	r3, #96	; 0x60
    4140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4144:	bf00      	nop
    4146:	370c      	adds	r7, #12
    4148:	46bd      	mov	sp, r7
    414a:	f85d 7b04 	ldr.w	r7, [sp], #4
    414e:	4770      	bx	lr
    4150:	e000e100 	.word	0xe000e100

00004154 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4154:	b480      	push	{r7}
    4156:	b083      	sub	sp, #12
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
    415c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    415e:	bf00      	nop
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	685a      	ldr	r2, [r3, #4]
    4164:	683b      	ldr	r3, [r7, #0]
    4166:	4013      	ands	r3, r2
    4168:	2b00      	cmp	r3, #0
    416a:	d1f9      	bne.n	4160 <hri_eic_wait_for_sync+0xc>
	};
}
    416c:	bf00      	nop
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr

00004178 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4178:	b480      	push	{r7}
    417a:	b083      	sub	sp, #12
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
    4180:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	685a      	ldr	r2, [r3, #4]
    4186:	683b      	ldr	r3, [r7, #0]
    4188:	4013      	ands	r3, r2
    418a:	2b00      	cmp	r3, #0
    418c:	bf14      	ite	ne
    418e:	2301      	movne	r3, #1
    4190:	2300      	moveq	r3, #0
    4192:	b2db      	uxtb	r3, r3
}
    4194:	4618      	mov	r0, r3
    4196:	370c      	adds	r7, #12
    4198:	46bd      	mov	sp, r7
    419a:	f85d 7b04 	ldr.w	r7, [sp], #4
    419e:	4770      	bx	lr

000041a0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    41a0:	b480      	push	{r7}
    41a2:	b083      	sub	sp, #12
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	695b      	ldr	r3, [r3, #20]
}
    41ac:	4618      	mov	r0, r3
    41ae:	370c      	adds	r7, #12
    41b0:	46bd      	mov	sp, r7
    41b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41b6:	4770      	bx	lr

000041b8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    41b8:	b480      	push	{r7}
    41ba:	b083      	sub	sp, #12
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	683a      	ldr	r2, [r7, #0]
    41c6:	615a      	str	r2, [r3, #20]
}
    41c8:	bf00      	nop
    41ca:	370c      	adds	r7, #12
    41cc:	46bd      	mov	sp, r7
    41ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d2:	4770      	bx	lr

000041d4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    41d4:	b480      	push	{r7}
    41d6:	b083      	sub	sp, #12
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
    41dc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	683a      	ldr	r2, [r7, #0]
    41e2:	611a      	str	r2, [r3, #16]
}
    41e4:	bf00      	nop
    41e6:	370c      	adds	r7, #12
    41e8:	46bd      	mov	sp, r7
    41ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ee:	4770      	bx	lr

000041f0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    41f0:	b480      	push	{r7}
    41f2:	b083      	sub	sp, #12
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
    41f8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	683a      	ldr	r2, [r7, #0]
    41fe:	60da      	str	r2, [r3, #12]
}
    4200:	bf00      	nop
    4202:	370c      	adds	r7, #12
    4204:	46bd      	mov	sp, r7
    4206:	f85d 7b04 	ldr.w	r7, [sp], #4
    420a:	4770      	bx	lr

0000420c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    420c:	b580      	push	{r7, lr}
    420e:	b082      	sub	sp, #8
    4210:	af00      	add	r7, sp, #0
    4212:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4214:	687b      	ldr	r3, [r7, #4]
    4216:	781b      	ldrb	r3, [r3, #0]
    4218:	b2db      	uxtb	r3, r3
    421a:	f043 0302 	orr.w	r3, r3, #2
    421e:	b2da      	uxtb	r2, r3
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4224:	2103      	movs	r1, #3
    4226:	6878      	ldr	r0, [r7, #4]
    4228:	4b02      	ldr	r3, [pc, #8]	; (4234 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    422a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    422c:	bf00      	nop
    422e:	3708      	adds	r7, #8
    4230:	46bd      	mov	sp, r7
    4232:	bd80      	pop	{r7, pc}
    4234:	00004155 	.word	0x00004155

00004238 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4238:	b580      	push	{r7, lr}
    423a:	b082      	sub	sp, #8
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	b2db      	uxtb	r3, r3
    4246:	f023 0302 	bic.w	r3, r3, #2
    424a:	b2da      	uxtb	r2, r3
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4250:	2103      	movs	r1, #3
    4252:	6878      	ldr	r0, [r7, #4]
    4254:	4b02      	ldr	r3, [pc, #8]	; (4260 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4256:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4258:	bf00      	nop
    425a:	3708      	adds	r7, #8
    425c:	46bd      	mov	sp, r7
    425e:	bd80      	pop	{r7, pc}
    4260:	00004155 	.word	0x00004155

00004264 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4264:	b580      	push	{r7, lr}
    4266:	b084      	sub	sp, #16
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
    426c:	460b      	mov	r3, r1
    426e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	781b      	ldrb	r3, [r3, #0]
    4274:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4276:	7bfb      	ldrb	r3, [r7, #15]
    4278:	f023 0310 	bic.w	r3, r3, #16
    427c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    427e:	78fb      	ldrb	r3, [r7, #3]
    4280:	011b      	lsls	r3, r3, #4
    4282:	b25a      	sxtb	r2, r3
    4284:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4288:	4313      	orrs	r3, r2
    428a:	b25b      	sxtb	r3, r3
    428c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	7bfa      	ldrb	r2, [r7, #15]
    4292:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4294:	2103      	movs	r1, #3
    4296:	6878      	ldr	r0, [r7, #4]
    4298:	4b02      	ldr	r3, [pc, #8]	; (42a4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    429a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    429c:	bf00      	nop
    429e:	3710      	adds	r7, #16
    42a0:	46bd      	mov	sp, r7
    42a2:	bd80      	pop	{r7, pc}
    42a4:	00004155 	.word	0x00004155

000042a8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    42a8:	b580      	push	{r7, lr}
    42aa:	b084      	sub	sp, #16
    42ac:	af00      	add	r7, sp, #0
    42ae:	6078      	str	r0, [r7, #4]
    42b0:	460b      	mov	r3, r1
    42b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42b4:	2103      	movs	r1, #3
    42b6:	6878      	ldr	r0, [r7, #4]
    42b8:	4b06      	ldr	r3, [pc, #24]	; (42d4 <hri_eic_get_CTRLA_reg+0x2c>)
    42ba:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    42c2:	7bfa      	ldrb	r2, [r7, #15]
    42c4:	78fb      	ldrb	r3, [r7, #3]
    42c6:	4013      	ands	r3, r2
    42c8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    42ca:	7bfb      	ldrb	r3, [r7, #15]
}
    42cc:	4618      	mov	r0, r3
    42ce:	3710      	adds	r7, #16
    42d0:	46bd      	mov	sp, r7
    42d2:	bd80      	pop	{r7, pc}
    42d4:	00004155 	.word	0x00004155

000042d8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    42d8:	b580      	push	{r7, lr}
    42da:	b082      	sub	sp, #8
    42dc:	af00      	add	r7, sp, #0
    42de:	6078      	str	r0, [r7, #4]
    42e0:	460b      	mov	r3, r1
    42e2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	78fa      	ldrb	r2, [r7, #3]
    42e8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42ea:	2103      	movs	r1, #3
    42ec:	6878      	ldr	r0, [r7, #4]
    42ee:	4b03      	ldr	r3, [pc, #12]	; (42fc <hri_eic_write_CTRLA_reg+0x24>)
    42f0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42f2:	bf00      	nop
    42f4:	3708      	adds	r7, #8
    42f6:	46bd      	mov	sp, r7
    42f8:	bd80      	pop	{r7, pc}
    42fa:	bf00      	nop
    42fc:	00004155 	.word	0x00004155

00004300 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4300:	b480      	push	{r7}
    4302:	b083      	sub	sp, #12
    4304:	af00      	add	r7, sp, #0
    4306:	6078      	str	r0, [r7, #4]
    4308:	460b      	mov	r3, r1
    430a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	78fa      	ldrb	r2, [r7, #3]
    4310:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4312:	bf00      	nop
    4314:	370c      	adds	r7, #12
    4316:	46bd      	mov	sp, r7
    4318:	f85d 7b04 	ldr.w	r7, [sp], #4
    431c:	4770      	bx	lr

0000431e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    431e:	b480      	push	{r7}
    4320:	b083      	sub	sp, #12
    4322:	af00      	add	r7, sp, #0
    4324:	6078      	str	r0, [r7, #4]
    4326:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	683a      	ldr	r2, [r7, #0]
    432c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    432e:	bf00      	nop
    4330:	370c      	adds	r7, #12
    4332:	46bd      	mov	sp, r7
    4334:	f85d 7b04 	ldr.w	r7, [sp], #4
    4338:	4770      	bx	lr

0000433a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    433a:	b480      	push	{r7}
    433c:	b083      	sub	sp, #12
    433e:	af00      	add	r7, sp, #0
    4340:	6078      	str	r0, [r7, #4]
    4342:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	683a      	ldr	r2, [r7, #0]
    4348:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    434a:	bf00      	nop
    434c:	370c      	adds	r7, #12
    434e:	46bd      	mov	sp, r7
    4350:	f85d 7b04 	ldr.w	r7, [sp], #4
    4354:	4770      	bx	lr

00004356 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4356:	b480      	push	{r7}
    4358:	b085      	sub	sp, #20
    435a:	af00      	add	r7, sp, #0
    435c:	60f8      	str	r0, [r7, #12]
    435e:	460b      	mov	r3, r1
    4360:	607a      	str	r2, [r7, #4]
    4362:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4364:	7afb      	ldrb	r3, [r7, #11]
    4366:	68fa      	ldr	r2, [r7, #12]
    4368:	3306      	adds	r3, #6
    436a:	009b      	lsls	r3, r3, #2
    436c:	4413      	add	r3, r2
    436e:	687a      	ldr	r2, [r7, #4]
    4370:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4372:	bf00      	nop
    4374:	3714      	adds	r7, #20
    4376:	46bd      	mov	sp, r7
    4378:	f85d 7b04 	ldr.w	r7, [sp], #4
    437c:	4770      	bx	lr

0000437e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    437e:	b480      	push	{r7}
    4380:	b083      	sub	sp, #12
    4382:	af00      	add	r7, sp, #0
    4384:	6078      	str	r0, [r7, #4]
    4386:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	683a      	ldr	r2, [r7, #0]
    438c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    438e:	bf00      	nop
    4390:	370c      	adds	r7, #12
    4392:	46bd      	mov	sp, r7
    4394:	f85d 7b04 	ldr.w	r7, [sp], #4
    4398:	4770      	bx	lr

0000439a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    439a:	b480      	push	{r7}
    439c:	b083      	sub	sp, #12
    439e:	af00      	add	r7, sp, #0
    43a0:	6078      	str	r0, [r7, #4]
    43a2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	683a      	ldr	r2, [r7, #0]
    43a8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    43aa:	bf00      	nop
    43ac:	370c      	adds	r7, #12
    43ae:	46bd      	mov	sp, r7
    43b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b4:	4770      	bx	lr
	...

000043b8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    43b8:	b580      	push	{r7, lr}
    43ba:	b082      	sub	sp, #8
    43bc:	af00      	add	r7, sp, #0
    43be:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    43c0:	2101      	movs	r1, #1
    43c2:	484f      	ldr	r0, [pc, #316]	; (4500 <_ext_irq_init+0x148>)
    43c4:	4b4f      	ldr	r3, [pc, #316]	; (4504 <_ext_irq_init+0x14c>)
    43c6:	4798      	blx	r3
    43c8:	4603      	mov	r3, r0
    43ca:	f083 0301 	eor.w	r3, r3, #1
    43ce:	b2db      	uxtb	r3, r3
    43d0:	2b00      	cmp	r3, #0
    43d2:	d011      	beq.n	43f8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    43d4:	2102      	movs	r1, #2
    43d6:	484a      	ldr	r0, [pc, #296]	; (4500 <_ext_irq_init+0x148>)
    43d8:	4b4b      	ldr	r3, [pc, #300]	; (4508 <_ext_irq_init+0x150>)
    43da:	4798      	blx	r3
    43dc:	4603      	mov	r3, r0
    43de:	2b00      	cmp	r3, #0
    43e0:	d006      	beq.n	43f0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    43e2:	4847      	ldr	r0, [pc, #284]	; (4500 <_ext_irq_init+0x148>)
    43e4:	4b49      	ldr	r3, [pc, #292]	; (450c <_ext_irq_init+0x154>)
    43e6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    43e8:	2102      	movs	r1, #2
    43ea:	4845      	ldr	r0, [pc, #276]	; (4500 <_ext_irq_init+0x148>)
    43ec:	4b48      	ldr	r3, [pc, #288]	; (4510 <_ext_irq_init+0x158>)
    43ee:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    43f0:	2101      	movs	r1, #1
    43f2:	4843      	ldr	r0, [pc, #268]	; (4500 <_ext_irq_init+0x148>)
    43f4:	4b47      	ldr	r3, [pc, #284]	; (4514 <_ext_irq_init+0x15c>)
    43f6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    43f8:	2101      	movs	r1, #1
    43fa:	4841      	ldr	r0, [pc, #260]	; (4500 <_ext_irq_init+0x148>)
    43fc:	4b44      	ldr	r3, [pc, #272]	; (4510 <_ext_irq_init+0x158>)
    43fe:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4400:	2100      	movs	r1, #0
    4402:	483f      	ldr	r0, [pc, #252]	; (4500 <_ext_irq_init+0x148>)
    4404:	4b44      	ldr	r3, [pc, #272]	; (4518 <_ext_irq_init+0x160>)
    4406:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4408:	2100      	movs	r1, #0
    440a:	483d      	ldr	r0, [pc, #244]	; (4500 <_ext_irq_init+0x148>)
    440c:	4b43      	ldr	r3, [pc, #268]	; (451c <_ext_irq_init+0x164>)
    440e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4410:	2100      	movs	r1, #0
    4412:	483b      	ldr	r0, [pc, #236]	; (4500 <_ext_irq_init+0x148>)
    4414:	4b42      	ldr	r3, [pc, #264]	; (4520 <_ext_irq_init+0x168>)
    4416:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4418:	f240 31bb 	movw	r1, #955	; 0x3bb
    441c:	4838      	ldr	r0, [pc, #224]	; (4500 <_ext_irq_init+0x148>)
    441e:	4b41      	ldr	r3, [pc, #260]	; (4524 <_ext_irq_init+0x16c>)
    4420:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4422:	f240 313b 	movw	r1, #827	; 0x33b
    4426:	4836      	ldr	r0, [pc, #216]	; (4500 <_ext_irq_init+0x148>)
    4428:	4b3f      	ldr	r3, [pc, #252]	; (4528 <_ext_irq_init+0x170>)
    442a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    442c:	2100      	movs	r1, #0
    442e:	4834      	ldr	r0, [pc, #208]	; (4500 <_ext_irq_init+0x148>)
    4430:	4b3e      	ldr	r3, [pc, #248]	; (452c <_ext_irq_init+0x174>)
    4432:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4434:	4a3e      	ldr	r2, [pc, #248]	; (4530 <_ext_irq_init+0x178>)
    4436:	2100      	movs	r1, #0
    4438:	4831      	ldr	r0, [pc, #196]	; (4500 <_ext_irq_init+0x148>)
    443a:	4b3e      	ldr	r3, [pc, #248]	; (4534 <_ext_irq_init+0x17c>)
    443c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    443e:	2211      	movs	r2, #17
    4440:	2101      	movs	r1, #1
    4442:	482f      	ldr	r0, [pc, #188]	; (4500 <_ext_irq_init+0x148>)
    4444:	4b3b      	ldr	r3, [pc, #236]	; (4534 <_ext_irq_init+0x17c>)
    4446:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4448:	482d      	ldr	r0, [pc, #180]	; (4500 <_ext_irq_init+0x148>)
    444a:	4b3b      	ldr	r3, [pc, #236]	; (4538 <_ext_irq_init+0x180>)
    444c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    444e:	200c      	movs	r0, #12
    4450:	4b3a      	ldr	r3, [pc, #232]	; (453c <_ext_irq_init+0x184>)
    4452:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4454:	200c      	movs	r0, #12
    4456:	4b3a      	ldr	r3, [pc, #232]	; (4540 <_ext_irq_init+0x188>)
    4458:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    445a:	200c      	movs	r0, #12
    445c:	4b39      	ldr	r3, [pc, #228]	; (4544 <_ext_irq_init+0x18c>)
    445e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4460:	200d      	movs	r0, #13
    4462:	4b36      	ldr	r3, [pc, #216]	; (453c <_ext_irq_init+0x184>)
    4464:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4466:	200d      	movs	r0, #13
    4468:	4b35      	ldr	r3, [pc, #212]	; (4540 <_ext_irq_init+0x188>)
    446a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    446c:	200d      	movs	r0, #13
    446e:	4b35      	ldr	r3, [pc, #212]	; (4544 <_ext_irq_init+0x18c>)
    4470:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4472:	200f      	movs	r0, #15
    4474:	4b31      	ldr	r3, [pc, #196]	; (453c <_ext_irq_init+0x184>)
    4476:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4478:	200f      	movs	r0, #15
    447a:	4b31      	ldr	r3, [pc, #196]	; (4540 <_ext_irq_init+0x188>)
    447c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    447e:	200f      	movs	r0, #15
    4480:	4b30      	ldr	r3, [pc, #192]	; (4544 <_ext_irq_init+0x18c>)
    4482:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4484:	2010      	movs	r0, #16
    4486:	4b2d      	ldr	r3, [pc, #180]	; (453c <_ext_irq_init+0x184>)
    4488:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    448a:	2010      	movs	r0, #16
    448c:	4b2c      	ldr	r3, [pc, #176]	; (4540 <_ext_irq_init+0x188>)
    448e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4490:	2010      	movs	r0, #16
    4492:	4b2c      	ldr	r3, [pc, #176]	; (4544 <_ext_irq_init+0x18c>)
    4494:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4496:	2011      	movs	r0, #17
    4498:	4b28      	ldr	r3, [pc, #160]	; (453c <_ext_irq_init+0x184>)
    449a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    449c:	2011      	movs	r0, #17
    449e:	4b28      	ldr	r3, [pc, #160]	; (4540 <_ext_irq_init+0x188>)
    44a0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    44a2:	2011      	movs	r0, #17
    44a4:	4b27      	ldr	r3, [pc, #156]	; (4544 <_ext_irq_init+0x18c>)
    44a6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    44a8:	2012      	movs	r0, #18
    44aa:	4b24      	ldr	r3, [pc, #144]	; (453c <_ext_irq_init+0x184>)
    44ac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    44ae:	2012      	movs	r0, #18
    44b0:	4b23      	ldr	r3, [pc, #140]	; (4540 <_ext_irq_init+0x188>)
    44b2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    44b4:	2012      	movs	r0, #18
    44b6:	4b23      	ldr	r3, [pc, #140]	; (4544 <_ext_irq_init+0x18c>)
    44b8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    44ba:	2013      	movs	r0, #19
    44bc:	4b1f      	ldr	r3, [pc, #124]	; (453c <_ext_irq_init+0x184>)
    44be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    44c0:	2013      	movs	r0, #19
    44c2:	4b1f      	ldr	r3, [pc, #124]	; (4540 <_ext_irq_init+0x188>)
    44c4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    44c6:	2013      	movs	r0, #19
    44c8:	4b1e      	ldr	r3, [pc, #120]	; (4544 <_ext_irq_init+0x18c>)
    44ca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    44cc:	2014      	movs	r0, #20
    44ce:	4b1b      	ldr	r3, [pc, #108]	; (453c <_ext_irq_init+0x184>)
    44d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    44d2:	2014      	movs	r0, #20
    44d4:	4b1a      	ldr	r3, [pc, #104]	; (4540 <_ext_irq_init+0x188>)
    44d6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    44d8:	2014      	movs	r0, #20
    44da:	4b1a      	ldr	r3, [pc, #104]	; (4544 <_ext_irq_init+0x18c>)
    44dc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    44de:	2015      	movs	r0, #21
    44e0:	4b16      	ldr	r3, [pc, #88]	; (453c <_ext_irq_init+0x184>)
    44e2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    44e4:	2015      	movs	r0, #21
    44e6:	4b16      	ldr	r3, [pc, #88]	; (4540 <_ext_irq_init+0x188>)
    44e8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    44ea:	2015      	movs	r0, #21
    44ec:	4b15      	ldr	r3, [pc, #84]	; (4544 <_ext_irq_init+0x18c>)
    44ee:	4798      	blx	r3

	callback = cb;
    44f0:	4a15      	ldr	r2, [pc, #84]	; (4548 <_ext_irq_init+0x190>)
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    44f6:	2300      	movs	r3, #0
}
    44f8:	4618      	mov	r0, r3
    44fa:	3708      	adds	r7, #8
    44fc:	46bd      	mov	sp, r7
    44fe:	bd80      	pop	{r7, pc}
    4500:	40002800 	.word	0x40002800
    4504:	00004179 	.word	0x00004179
    4508:	000042a9 	.word	0x000042a9
    450c:	00004239 	.word	0x00004239
    4510:	00004155 	.word	0x00004155
    4514:	000042d9 	.word	0x000042d9
    4518:	00004265 	.word	0x00004265
    451c:	00004301 	.word	0x00004301
    4520:	0000431f 	.word	0x0000431f
    4524:	0000433b 	.word	0x0000433b
    4528:	0000437f 	.word	0x0000437f
    452c:	0000439b 	.word	0x0000439b
    4530:	90999013 	.word	0x90999013
    4534:	00004357 	.word	0x00004357
    4538:	0000420d 	.word	0x0000420d
    453c:	000040d5 	.word	0x000040d5
    4540:	00004119 	.word	0x00004119
    4544:	00004099 	.word	0x00004099
    4548:	200009e4 	.word	0x200009e4

0000454c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    454c:	b580      	push	{r7, lr}
    454e:	b084      	sub	sp, #16
    4550:	af00      	add	r7, sp, #0
    4552:	6078      	str	r0, [r7, #4]
    4554:	460b      	mov	r3, r1
    4556:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4558:	23ff      	movs	r3, #255	; 0xff
    455a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    455c:	2300      	movs	r3, #0
    455e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4560:	e010      	b.n	4584 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4562:	7bbb      	ldrb	r3, [r7, #14]
    4564:	4a1c      	ldr	r2, [pc, #112]	; (45d8 <_ext_irq_enable+0x8c>)
    4566:	00db      	lsls	r3, r3, #3
    4568:	4413      	add	r3, r2
    456a:	685a      	ldr	r2, [r3, #4]
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	429a      	cmp	r2, r3
    4570:	d105      	bne.n	457e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4572:	7bbb      	ldrb	r3, [r7, #14]
    4574:	4a18      	ldr	r2, [pc, #96]	; (45d8 <_ext_irq_enable+0x8c>)
    4576:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    457a:	73fb      	strb	r3, [r7, #15]
			break;
    457c:	e005      	b.n	458a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    457e:	7bbb      	ldrb	r3, [r7, #14]
    4580:	3301      	adds	r3, #1
    4582:	73bb      	strb	r3, [r7, #14]
    4584:	7bbb      	ldrb	r3, [r7, #14]
    4586:	2b08      	cmp	r3, #8
    4588:	d9eb      	bls.n	4562 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    458a:	7bfb      	ldrb	r3, [r7, #15]
    458c:	2bff      	cmp	r3, #255	; 0xff
    458e:	d102      	bne.n	4596 <_ext_irq_enable+0x4a>
		return -1;
    4590:	f04f 33ff 	mov.w	r3, #4294967295
    4594:	e01c      	b.n	45d0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4596:	78fb      	ldrb	r3, [r7, #3]
    4598:	2b00      	cmp	r3, #0
    459a:	d008      	beq.n	45ae <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    459c:	7bfb      	ldrb	r3, [r7, #15]
    459e:	2201      	movs	r2, #1
    45a0:	fa02 f303 	lsl.w	r3, r2, r3
    45a4:	4619      	mov	r1, r3
    45a6:	480d      	ldr	r0, [pc, #52]	; (45dc <_ext_irq_enable+0x90>)
    45a8:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <_ext_irq_enable+0x94>)
    45aa:	4798      	blx	r3
    45ac:	e00f      	b.n	45ce <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    45ae:	7bfb      	ldrb	r3, [r7, #15]
    45b0:	2201      	movs	r2, #1
    45b2:	fa02 f303 	lsl.w	r3, r2, r3
    45b6:	4619      	mov	r1, r3
    45b8:	4808      	ldr	r0, [pc, #32]	; (45dc <_ext_irq_enable+0x90>)
    45ba:	4b0a      	ldr	r3, [pc, #40]	; (45e4 <_ext_irq_enable+0x98>)
    45bc:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    45be:	7bfb      	ldrb	r3, [r7, #15]
    45c0:	2201      	movs	r2, #1
    45c2:	fa02 f303 	lsl.w	r3, r2, r3
    45c6:	4619      	mov	r1, r3
    45c8:	4804      	ldr	r0, [pc, #16]	; (45dc <_ext_irq_enable+0x90>)
    45ca:	4b07      	ldr	r3, [pc, #28]	; (45e8 <_ext_irq_enable+0x9c>)
    45cc:	4798      	blx	r3
	}

	return ERR_NONE;
    45ce:	2300      	movs	r3, #0
}
    45d0:	4618      	mov	r0, r3
    45d2:	3710      	adds	r7, #16
    45d4:	46bd      	mov	sp, r7
    45d6:	bd80      	pop	{r7, pc}
    45d8:	0000ee9c 	.word	0x0000ee9c
    45dc:	40002800 	.word	0x40002800
    45e0:	000041d5 	.word	0x000041d5
    45e4:	000041f1 	.word	0x000041f1
    45e8:	000041b9 	.word	0x000041b9

000045ec <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b084      	sub	sp, #16
    45f0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    45f2:	4841      	ldr	r0, [pc, #260]	; (46f8 <_ext_irq_handler+0x10c>)
    45f4:	4b41      	ldr	r3, [pc, #260]	; (46fc <_ext_irq_handler+0x110>)
    45f6:	4798      	blx	r3
    45f8:	4603      	mov	r3, r0
    45fa:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    45fc:	f04f 33ff 	mov.w	r3, #4294967295
    4600:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4602:	683b      	ldr	r3, [r7, #0]
    4604:	4619      	mov	r1, r3
    4606:	483c      	ldr	r0, [pc, #240]	; (46f8 <_ext_irq_handler+0x10c>)
    4608:	4b3d      	ldr	r3, [pc, #244]	; (4700 <_ext_irq_handler+0x114>)
    460a:	4798      	blx	r3

	ASSERT(callback);
    460c:	4b3d      	ldr	r3, [pc, #244]	; (4704 <_ext_irq_handler+0x118>)
    460e:	681b      	ldr	r3, [r3, #0]
    4610:	2b00      	cmp	r3, #0
    4612:	bf14      	ite	ne
    4614:	2301      	movne	r3, #1
    4616:	2300      	moveq	r3, #0
    4618:	b2db      	uxtb	r3, r3
    461a:	f44f 7284 	mov.w	r2, #264	; 0x108
    461e:	493a      	ldr	r1, [pc, #232]	; (4708 <_ext_irq_handler+0x11c>)
    4620:	4618      	mov	r0, r3
    4622:	4b3a      	ldr	r3, [pc, #232]	; (470c <_ext_irq_handler+0x120>)
    4624:	4798      	blx	r3

	while (flags) {
    4626:	e060      	b.n	46ea <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4628:	683b      	ldr	r3, [r7, #0]
    462a:	4618      	mov	r0, r3
    462c:	4b38      	ldr	r3, [pc, #224]	; (4710 <_ext_irq_handler+0x124>)
    462e:	4798      	blx	r3
    4630:	4603      	mov	r3, r0
    4632:	b2db      	uxtb	r3, r3
    4634:	3b01      	subs	r3, #1
    4636:	b2db      	uxtb	r3, r3
    4638:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    463a:	e047      	b.n	46cc <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    463c:	2300      	movs	r3, #0
    463e:	71fb      	strb	r3, [r7, #7]
    4640:	2309      	movs	r3, #9
    4642:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4644:	e024      	b.n	4690 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4646:	79ba      	ldrb	r2, [r7, #6]
    4648:	79fb      	ldrb	r3, [r7, #7]
    464a:	4413      	add	r3, r2
    464c:	105b      	asrs	r3, r3, #1
    464e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4650:	797b      	ldrb	r3, [r7, #5]
    4652:	4a30      	ldr	r2, [pc, #192]	; (4714 <_ext_irq_handler+0x128>)
    4654:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4658:	461a      	mov	r2, r3
    465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    465e:	429a      	cmp	r2, r3
    4660:	d106      	bne.n	4670 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4662:	797b      	ldrb	r3, [r7, #5]
    4664:	4a2b      	ldr	r2, [pc, #172]	; (4714 <_ext_irq_handler+0x128>)
    4666:	00db      	lsls	r3, r3, #3
    4668:	4413      	add	r3, r2
    466a:	685b      	ldr	r3, [r3, #4]
    466c:	60bb      	str	r3, [r7, #8]
					break;
    466e:	e013      	b.n	4698 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4670:	797b      	ldrb	r3, [r7, #5]
    4672:	4a28      	ldr	r2, [pc, #160]	; (4714 <_ext_irq_handler+0x128>)
    4674:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4678:	461a      	mov	r2, r3
    467a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    467e:	429a      	cmp	r2, r3
    4680:	da03      	bge.n	468a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4682:	797b      	ldrb	r3, [r7, #5]
    4684:	3301      	adds	r3, #1
    4686:	71fb      	strb	r3, [r7, #7]
    4688:	e002      	b.n	4690 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    468a:	797b      	ldrb	r3, [r7, #5]
    468c:	3b01      	subs	r3, #1
    468e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4690:	79ba      	ldrb	r2, [r7, #6]
    4692:	79fb      	ldrb	r3, [r7, #7]
    4694:	429a      	cmp	r2, r3
    4696:	d2d6      	bcs.n	4646 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4698:	68bb      	ldr	r3, [r7, #8]
    469a:	f1b3 3fff 	cmp.w	r3, #4294967295
    469e:	d003      	beq.n	46a8 <_ext_irq_handler+0xbc>
				callback(pin);
    46a0:	4b18      	ldr	r3, [pc, #96]	; (4704 <_ext_irq_handler+0x118>)
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	68b8      	ldr	r0, [r7, #8]
    46a6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    46a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    46ac:	2201      	movs	r2, #1
    46ae:	fa02 f303 	lsl.w	r3, r2, r3
    46b2:	43da      	mvns	r2, r3
    46b4:	683b      	ldr	r3, [r7, #0]
    46b6:	4013      	ands	r3, r2
    46b8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    46ba:	683b      	ldr	r3, [r7, #0]
    46bc:	4618      	mov	r0, r3
    46be:	4b14      	ldr	r3, [pc, #80]	; (4710 <_ext_irq_handler+0x124>)
    46c0:	4798      	blx	r3
    46c2:	4603      	mov	r3, r0
    46c4:	b2db      	uxtb	r3, r3
    46c6:	3b01      	subs	r3, #1
    46c8:	b2db      	uxtb	r3, r3
    46ca:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    46cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    46d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    46d4:	d1b2      	bne.n	463c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    46d6:	4808      	ldr	r0, [pc, #32]	; (46f8 <_ext_irq_handler+0x10c>)
    46d8:	4b08      	ldr	r3, [pc, #32]	; (46fc <_ext_irq_handler+0x110>)
    46da:	4798      	blx	r3
    46dc:	4603      	mov	r3, r0
    46de:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    46e0:	683b      	ldr	r3, [r7, #0]
    46e2:	4619      	mov	r1, r3
    46e4:	4804      	ldr	r0, [pc, #16]	; (46f8 <_ext_irq_handler+0x10c>)
    46e6:	4b06      	ldr	r3, [pc, #24]	; (4700 <_ext_irq_handler+0x114>)
    46e8:	4798      	blx	r3
	while (flags) {
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	2b00      	cmp	r3, #0
    46ee:	d19b      	bne.n	4628 <_ext_irq_handler+0x3c>
	}
}
    46f0:	bf00      	nop
    46f2:	3710      	adds	r7, #16
    46f4:	46bd      	mov	sp, r7
    46f6:	bd80      	pop	{r7, pc}
    46f8:	40002800 	.word	0x40002800
    46fc:	000041a1 	.word	0x000041a1
    4700:	000041b9 	.word	0x000041b9
    4704:	200009e4 	.word	0x200009e4
    4708:	0000eee4 	.word	0x0000eee4
    470c:	0000341d 	.word	0x0000341d
    4710:	0000e8cd 	.word	0x0000e8cd
    4714:	0000ee9c 	.word	0x0000ee9c

00004718 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4718:	b580      	push	{r7, lr}
    471a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    471c:	4b01      	ldr	r3, [pc, #4]	; (4724 <EIC_0_Handler+0xc>)
    471e:	4798      	blx	r3
} /**
    4720:	bf00      	nop
    4722:	bd80      	pop	{r7, pc}
    4724:	000045ed 	.word	0x000045ed

00004728 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4728:	b580      	push	{r7, lr}
    472a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    472c:	4b01      	ldr	r3, [pc, #4]	; (4734 <EIC_1_Handler+0xc>)
    472e:	4798      	blx	r3
} /**
    4730:	bf00      	nop
    4732:	bd80      	pop	{r7, pc}
    4734:	000045ed 	.word	0x000045ed

00004738 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4738:	b580      	push	{r7, lr}
    473a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    473c:	4b01      	ldr	r3, [pc, #4]	; (4744 <EIC_3_Handler+0xc>)
    473e:	4798      	blx	r3
} /**
    4740:	bf00      	nop
    4742:	bd80      	pop	{r7, pc}
    4744:	000045ed 	.word	0x000045ed

00004748 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4748:	b580      	push	{r7, lr}
    474a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    474c:	4b01      	ldr	r3, [pc, #4]	; (4754 <EIC_4_Handler+0xc>)
    474e:	4798      	blx	r3
} /**
    4750:	bf00      	nop
    4752:	bd80      	pop	{r7, pc}
    4754:	000045ed 	.word	0x000045ed

00004758 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4758:	b580      	push	{r7, lr}
    475a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    475c:	4b01      	ldr	r3, [pc, #4]	; (4764 <EIC_5_Handler+0xc>)
    475e:	4798      	blx	r3
} /**
    4760:	bf00      	nop
    4762:	bd80      	pop	{r7, pc}
    4764:	000045ed 	.word	0x000045ed

00004768 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4768:	b580      	push	{r7, lr}
    476a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    476c:	4b01      	ldr	r3, [pc, #4]	; (4774 <EIC_6_Handler+0xc>)
    476e:	4798      	blx	r3
} /**
    4770:	bf00      	nop
    4772:	bd80      	pop	{r7, pc}
    4774:	000045ed 	.word	0x000045ed

00004778 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4778:	b580      	push	{r7, lr}
    477a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    477c:	4b01      	ldr	r3, [pc, #4]	; (4784 <EIC_7_Handler+0xc>)
    477e:	4798      	blx	r3
} /**
    4780:	bf00      	nop
    4782:	bd80      	pop	{r7, pc}
    4784:	000045ed 	.word	0x000045ed

00004788 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4788:	b580      	push	{r7, lr}
    478a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    478c:	4b01      	ldr	r3, [pc, #4]	; (4794 <EIC_8_Handler+0xc>)
    478e:	4798      	blx	r3
} /**
    4790:	bf00      	nop
    4792:	bd80      	pop	{r7, pc}
    4794:	000045ed 	.word	0x000045ed

00004798 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4798:	b580      	push	{r7, lr}
    479a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    479c:	4b01      	ldr	r3, [pc, #4]	; (47a4 <EIC_9_Handler+0xc>)
    479e:	4798      	blx	r3
}
    47a0:	bf00      	nop
    47a2:	bd80      	pop	{r7, pc}
    47a4:	000045ed 	.word	0x000045ed

000047a8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    47a8:	b480      	push	{r7}
    47aa:	b085      	sub	sp, #20
    47ac:	af00      	add	r7, sp, #0
    47ae:	60f8      	str	r0, [r7, #12]
    47b0:	460b      	mov	r3, r1
    47b2:	607a      	str	r2, [r7, #4]
    47b4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    47b6:	7afa      	ldrb	r2, [r7, #11]
    47b8:	68fb      	ldr	r3, [r7, #12]
    47ba:	3248      	adds	r2, #72	; 0x48
    47bc:	6879      	ldr	r1, [r7, #4]
    47be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    47c2:	bf00      	nop
    47c4:	3714      	adds	r7, #20
    47c6:	46bd      	mov	sp, r7
    47c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47cc:	4770      	bx	lr

000047ce <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    47ce:	b480      	push	{r7}
    47d0:	b083      	sub	sp, #12
    47d2:	af00      	add	r7, sp, #0
    47d4:	6078      	str	r0, [r7, #4]
    47d6:	460b      	mov	r3, r1
    47d8:	70fb      	strb	r3, [r7, #3]
    47da:	4613      	mov	r3, r2
    47dc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    47de:	78fb      	ldrb	r3, [r7, #3]
    47e0:	687a      	ldr	r2, [r7, #4]
    47e2:	3304      	adds	r3, #4
    47e4:	00db      	lsls	r3, r3, #3
    47e6:	4413      	add	r3, r2
    47e8:	78ba      	ldrb	r2, [r7, #2]
    47ea:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    47ec:	78fb      	ldrb	r3, [r7, #3]
    47ee:	78ba      	ldrb	r2, [r7, #2]
    47f0:	43d2      	mvns	r2, r2
    47f2:	b2d1      	uxtb	r1, r2
    47f4:	687a      	ldr	r2, [r7, #4]
    47f6:	3304      	adds	r3, #4
    47f8:	00db      	lsls	r3, r3, #3
    47fa:	4413      	add	r3, r2
    47fc:	460a      	mov	r2, r1
    47fe:	711a      	strb	r2, [r3, #4]
}
    4800:	bf00      	nop
    4802:	370c      	adds	r7, #12
    4804:	46bd      	mov	sp, r7
    4806:	f85d 7b04 	ldr.w	r7, [sp], #4
    480a:	4770      	bx	lr

0000480c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    480c:	b480      	push	{r7}
    480e:	b085      	sub	sp, #20
    4810:	af00      	add	r7, sp, #0
    4812:	60f8      	str	r0, [r7, #12]
    4814:	460b      	mov	r3, r1
    4816:	607a      	str	r2, [r7, #4]
    4818:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    481a:	7afa      	ldrb	r2, [r7, #11]
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	3204      	adds	r2, #4
    4820:	6879      	ldr	r1, [r7, #4]
    4822:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4826:	bf00      	nop
    4828:	3714      	adds	r7, #20
    482a:	46bd      	mov	sp, r7
    482c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4830:	4770      	bx	lr
	...

00004834 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4834:	b580      	push	{r7, lr}
    4836:	b082      	sub	sp, #8
    4838:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    483a:	2300      	movs	r3, #0
    483c:	71fb      	strb	r3, [r7, #7]
    483e:	e00b      	b.n	4858 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4840:	79fb      	ldrb	r3, [r7, #7]
    4842:	4a18      	ldr	r2, [pc, #96]	; (48a4 <_event_system_init+0x70>)
    4844:	5cd3      	ldrb	r3, [r2, r3]
    4846:	461a      	mov	r2, r3
    4848:	79fb      	ldrb	r3, [r7, #7]
    484a:	4619      	mov	r1, r3
    484c:	4816      	ldr	r0, [pc, #88]	; (48a8 <_event_system_init+0x74>)
    484e:	4b17      	ldr	r3, [pc, #92]	; (48ac <_event_system_init+0x78>)
    4850:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4852:	79fb      	ldrb	r3, [r7, #7]
    4854:	3301      	adds	r3, #1
    4856:	71fb      	strb	r3, [r7, #7]
    4858:	79fb      	ldrb	r3, [r7, #7]
    485a:	2b42      	cmp	r3, #66	; 0x42
    485c:	d9f0      	bls.n	4840 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    485e:	2300      	movs	r3, #0
    4860:	71fb      	strb	r3, [r7, #7]
    4862:	e016      	b.n	4892 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4864:	79fb      	ldrb	r3, [r7, #7]
    4866:	4a12      	ldr	r2, [pc, #72]	; (48b0 <_event_system_init+0x7c>)
    4868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    486c:	461a      	mov	r2, r3
    486e:	79fb      	ldrb	r3, [r7, #7]
    4870:	4619      	mov	r1, r3
    4872:	480d      	ldr	r0, [pc, #52]	; (48a8 <_event_system_init+0x74>)
    4874:	4b0f      	ldr	r3, [pc, #60]	; (48b4 <_event_system_init+0x80>)
    4876:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4878:	79fb      	ldrb	r3, [r7, #7]
    487a:	4a0f      	ldr	r2, [pc, #60]	; (48b8 <_event_system_init+0x84>)
    487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4880:	b2da      	uxtb	r2, r3
    4882:	79fb      	ldrb	r3, [r7, #7]
    4884:	4619      	mov	r1, r3
    4886:	4808      	ldr	r0, [pc, #32]	; (48a8 <_event_system_init+0x74>)
    4888:	4b0c      	ldr	r3, [pc, #48]	; (48bc <_event_system_init+0x88>)
    488a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    488c:	79fb      	ldrb	r3, [r7, #7]
    488e:	3301      	adds	r3, #1
    4890:	71fb      	strb	r3, [r7, #7]
    4892:	79fb      	ldrb	r3, [r7, #7]
    4894:	2b1f      	cmp	r3, #31
    4896:	d9e5      	bls.n	4864 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4898:	2300      	movs	r3, #0
}
    489a:	4618      	mov	r0, r3
    489c:	3708      	adds	r7, #8
    489e:	46bd      	mov	sp, r7
    48a0:	bd80      	pop	{r7, pc}
    48a2:	bf00      	nop
    48a4:	0000eefc 	.word	0x0000eefc
    48a8:	4100e000 	.word	0x4100e000
    48ac:	000047a9 	.word	0x000047a9
    48b0:	0000ef40 	.word	0x0000ef40
    48b4:	0000480d 	.word	0x0000480d
    48b8:	0000ef80 	.word	0x0000ef80
    48bc:	000047cf 	.word	0x000047cf

000048c0 <hri_gclk_wait_for_sync>:
{
    48c0:	b480      	push	{r7}
    48c2:	b083      	sub	sp, #12
    48c4:	af00      	add	r7, sp, #0
    48c6:	6078      	str	r0, [r7, #4]
    48c8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    48ca:	bf00      	nop
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	685a      	ldr	r2, [r3, #4]
    48d0:	683b      	ldr	r3, [r7, #0]
    48d2:	4013      	ands	r3, r2
    48d4:	2b00      	cmp	r3, #0
    48d6:	d1f9      	bne.n	48cc <hri_gclk_wait_for_sync+0xc>
}
    48d8:	bf00      	nop
    48da:	370c      	adds	r7, #12
    48dc:	46bd      	mov	sp, r7
    48de:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e2:	4770      	bx	lr

000048e4 <hri_gclk_write_GENCTRL_reg>:
{
    48e4:	b580      	push	{r7, lr}
    48e6:	b084      	sub	sp, #16
    48e8:	af00      	add	r7, sp, #0
    48ea:	60f8      	str	r0, [r7, #12]
    48ec:	460b      	mov	r3, r1
    48ee:	607a      	str	r2, [r7, #4]
    48f0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    48f2:	7afa      	ldrb	r2, [r7, #11]
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	3208      	adds	r2, #8
    48f8:	6879      	ldr	r1, [r7, #4]
    48fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    48fe:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4902:	68f8      	ldr	r0, [r7, #12]
    4904:	4b02      	ldr	r3, [pc, #8]	; (4910 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4906:	4798      	blx	r3
}
    4908:	bf00      	nop
    490a:	3710      	adds	r7, #16
    490c:	46bd      	mov	sp, r7
    490e:	bd80      	pop	{r7, pc}
    4910:	000048c1 	.word	0x000048c1

00004914 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4914:	b580      	push	{r7, lr}
    4916:	b082      	sub	sp, #8
    4918:	af00      	add	r7, sp, #0
    491a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	f003 0301 	and.w	r3, r3, #1
    4922:	2b00      	cmp	r3, #0
    4924:	d004      	beq.n	4930 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4926:	4a3b      	ldr	r2, [pc, #236]	; (4a14 <_gclk_init_generators_by_fref+0x100>)
    4928:	2100      	movs	r1, #0
    492a:	483b      	ldr	r0, [pc, #236]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    492c:	4b3b      	ldr	r3, [pc, #236]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    492e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	f003 0302 	and.w	r3, r3, #2
    4936:	2b00      	cmp	r3, #0
    4938:	d004      	beq.n	4944 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    493a:	4a39      	ldr	r2, [pc, #228]	; (4a20 <_gclk_init_generators_by_fref+0x10c>)
    493c:	2101      	movs	r1, #1
    493e:	4836      	ldr	r0, [pc, #216]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    4940:	4b36      	ldr	r3, [pc, #216]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    4942:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4944:	687b      	ldr	r3, [r7, #4]
    4946:	f003 0304 	and.w	r3, r3, #4
    494a:	2b00      	cmp	r3, #0
    494c:	d004      	beq.n	4958 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    494e:	4a35      	ldr	r2, [pc, #212]	; (4a24 <_gclk_init_generators_by_fref+0x110>)
    4950:	2102      	movs	r1, #2
    4952:	4831      	ldr	r0, [pc, #196]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    4954:	4b31      	ldr	r3, [pc, #196]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    4956:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	f003 0308 	and.w	r3, r3, #8
    495e:	2b00      	cmp	r3, #0
    4960:	d004      	beq.n	496c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4962:	4a31      	ldr	r2, [pc, #196]	; (4a28 <_gclk_init_generators_by_fref+0x114>)
    4964:	2103      	movs	r1, #3
    4966:	482c      	ldr	r0, [pc, #176]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    4968:	4b2c      	ldr	r3, [pc, #176]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    496a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	f003 0310 	and.w	r3, r3, #16
    4972:	2b00      	cmp	r3, #0
    4974:	d004      	beq.n	4980 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4976:	4a2d      	ldr	r2, [pc, #180]	; (4a2c <_gclk_init_generators_by_fref+0x118>)
    4978:	2104      	movs	r1, #4
    497a:	4827      	ldr	r0, [pc, #156]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    497c:	4b27      	ldr	r3, [pc, #156]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    497e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	f003 0320 	and.w	r3, r3, #32
    4986:	2b00      	cmp	r3, #0
    4988:	d004      	beq.n	4994 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    498a:	4a29      	ldr	r2, [pc, #164]	; (4a30 <_gclk_init_generators_by_fref+0x11c>)
    498c:	2105      	movs	r1, #5
    498e:	4822      	ldr	r0, [pc, #136]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    4990:	4b22      	ldr	r3, [pc, #136]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    4992:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	f003 0340 	and.w	r3, r3, #64	; 0x40
    499a:	2b00      	cmp	r3, #0
    499c:	d004      	beq.n	49a8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    499e:	4a25      	ldr	r2, [pc, #148]	; (4a34 <_gclk_init_generators_by_fref+0x120>)
    49a0:	2106      	movs	r1, #6
    49a2:	481d      	ldr	r0, [pc, #116]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    49a4:	4b1d      	ldr	r3, [pc, #116]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    49a6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    49ae:	2b00      	cmp	r3, #0
    49b0:	d004      	beq.n	49bc <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    49b2:	4a21      	ldr	r2, [pc, #132]	; (4a38 <_gclk_init_generators_by_fref+0x124>)
    49b4:	2107      	movs	r1, #7
    49b6:	4818      	ldr	r0, [pc, #96]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    49b8:	4b18      	ldr	r3, [pc, #96]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    49ba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	f403 7380 	and.w	r3, r3, #256	; 0x100
    49c2:	2b00      	cmp	r3, #0
    49c4:	d004      	beq.n	49d0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    49c6:	4a1d      	ldr	r2, [pc, #116]	; (4a3c <_gclk_init_generators_by_fref+0x128>)
    49c8:	2108      	movs	r1, #8
    49ca:	4813      	ldr	r0, [pc, #76]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    49cc:	4b13      	ldr	r3, [pc, #76]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    49ce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    49d6:	2b00      	cmp	r3, #0
    49d8:	d004      	beq.n	49e4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    49da:	4a19      	ldr	r2, [pc, #100]	; (4a40 <_gclk_init_generators_by_fref+0x12c>)
    49dc:	2109      	movs	r1, #9
    49de:	480e      	ldr	r0, [pc, #56]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    49e0:	4b0e      	ldr	r3, [pc, #56]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    49e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    49ea:	2b00      	cmp	r3, #0
    49ec:	d004      	beq.n	49f8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    49ee:	4a15      	ldr	r2, [pc, #84]	; (4a44 <_gclk_init_generators_by_fref+0x130>)
    49f0:	210a      	movs	r1, #10
    49f2:	4809      	ldr	r0, [pc, #36]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    49f4:	4b09      	ldr	r3, [pc, #36]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    49f6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    49fe:	2b00      	cmp	r3, #0
    4a00:	d004      	beq.n	4a0c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4a02:	4a11      	ldr	r2, [pc, #68]	; (4a48 <_gclk_init_generators_by_fref+0x134>)
    4a04:	210b      	movs	r1, #11
    4a06:	4804      	ldr	r0, [pc, #16]	; (4a18 <_gclk_init_generators_by_fref+0x104>)
    4a08:	4b04      	ldr	r3, [pc, #16]	; (4a1c <_gclk_init_generators_by_fref+0x108>)
    4a0a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4a0c:	bf00      	nop
    4a0e:	3708      	adds	r7, #8
    4a10:	46bd      	mov	sp, r7
    4a12:	bd80      	pop	{r7, pc}
    4a14:	00010107 	.word	0x00010107
    4a18:	40001c00 	.word	0x40001c00
    4a1c:	000048e5 	.word	0x000048e5
    4a20:	00010907 	.word	0x00010907
    4a24:	00010906 	.word	0x00010906
    4a28:	00020908 	.word	0x00020908
    4a2c:	00010901 	.word	0x00010901
    4a30:	00062901 	.word	0x00062901
    4a34:	000c2901 	.word	0x000c2901
    4a38:	00082908 	.word	0x00082908
    4a3c:	00032901 	.word	0x00032901
    4a40:	00011908 	.word	0x00011908
    4a44:	00010905 	.word	0x00010905
    4a48:	00041905 	.word	0x00041905

00004a4c <hri_mclk_write_CPUDIV_reg>:
{
    4a4c:	b480      	push	{r7}
    4a4e:	b083      	sub	sp, #12
    4a50:	af00      	add	r7, sp, #0
    4a52:	6078      	str	r0, [r7, #4]
    4a54:	460b      	mov	r3, r1
    4a56:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	78fa      	ldrb	r2, [r7, #3]
    4a5c:	715a      	strb	r2, [r3, #5]
}
    4a5e:	bf00      	nop
    4a60:	370c      	adds	r7, #12
    4a62:	46bd      	mov	sp, r7
    4a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a68:	4770      	bx	lr
	...

00004a6c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4a6c:	b580      	push	{r7, lr}
    4a6e:	b082      	sub	sp, #8
    4a70:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4a72:	4b05      	ldr	r3, [pc, #20]	; (4a88 <_mclk_init+0x1c>)
    4a74:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4a76:	2101      	movs	r1, #1
    4a78:	6878      	ldr	r0, [r7, #4]
    4a7a:	4b04      	ldr	r3, [pc, #16]	; (4a8c <_mclk_init+0x20>)
    4a7c:	4798      	blx	r3
}
    4a7e:	bf00      	nop
    4a80:	3708      	adds	r7, #8
    4a82:	46bd      	mov	sp, r7
    4a84:	bd80      	pop	{r7, pc}
    4a86:	bf00      	nop
    4a88:	40000800 	.word	0x40000800
    4a8c:	00004a4d 	.word	0x00004a4d

00004a90 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4a90:	b480      	push	{r7}
    4a92:	b083      	sub	sp, #12
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
    4a98:	460b      	mov	r3, r1
    4a9a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	78fa      	ldrb	r2, [r7, #3]
    4aa0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4aa2:	bf00      	nop
    4aa4:	370c      	adds	r7, #12
    4aa6:	46bd      	mov	sp, r7
    4aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aac:	4770      	bx	lr

00004aae <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4aae:	b480      	push	{r7}
    4ab0:	b083      	sub	sp, #12
    4ab2:	af00      	add	r7, sp, #0
    4ab4:	6078      	str	r0, [r7, #4]
    4ab6:	460b      	mov	r3, r1
    4ab8:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	887a      	ldrh	r2, [r7, #2]
    4abe:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4ac0:	bf00      	nop
    4ac2:	370c      	adds	r7, #12
    4ac4:	46bd      	mov	sp, r7
    4ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aca:	4770      	bx	lr

00004acc <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4acc:	b480      	push	{r7}
    4ace:	b083      	sub	sp, #12
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	6078      	str	r0, [r7, #4]
    4ad4:	460b      	mov	r3, r1
    4ad6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	78fa      	ldrb	r2, [r7, #3]
    4adc:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4ade:	bf00      	nop
    4ae0:	370c      	adds	r7, #12
    4ae2:	46bd      	mov	sp, r7
    4ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae8:	4770      	bx	lr

00004aea <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4aea:	b480      	push	{r7}
    4aec:	b083      	sub	sp, #12
    4aee:	af00      	add	r7, sp, #0
    4af0:	6078      	str	r0, [r7, #4]
    4af2:	460b      	mov	r3, r1
    4af4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	78fa      	ldrb	r2, [r7, #3]
    4afa:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4afc:	bf00      	nop
    4afe:	370c      	adds	r7, #12
    4b00:	46bd      	mov	sp, r7
    4b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b06:	4770      	bx	lr

00004b08 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4b08:	b480      	push	{r7}
    4b0a:	b085      	sub	sp, #20
    4b0c:	af00      	add	r7, sp, #0
    4b0e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	69db      	ldr	r3, [r3, #28]
    4b14:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4b16:	68fb      	ldr	r3, [r7, #12]
    4b18:	0a1b      	lsrs	r3, r3, #8
    4b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b1e:	60fb      	str	r3, [r7, #12]
	return tmp;
    4b20:	68fb      	ldr	r3, [r7, #12]
}
    4b22:	4618      	mov	r0, r3
    4b24:	3714      	adds	r7, #20
    4b26:	46bd      	mov	sp, r7
    4b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2c:	4770      	bx	lr

00004b2e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4b2e:	b480      	push	{r7}
    4b30:	b083      	sub	sp, #12
    4b32:	af00      	add	r7, sp, #0
    4b34:	6078      	str	r0, [r7, #4]
    4b36:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4b38:	687b      	ldr	r3, [r7, #4]
    4b3a:	683a      	ldr	r2, [r7, #0]
    4b3c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b3e:	bf00      	nop
    4b40:	370c      	adds	r7, #12
    4b42:	46bd      	mov	sp, r7
    4b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b48:	4770      	bx	lr
	...

00004b4c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b082      	sub	sp, #8
    4b50:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4b52:	4b13      	ldr	r3, [pc, #76]	; (4ba0 <_osc32kctrl_init_sources+0x54>)
    4b54:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4b56:	2300      	movs	r3, #0
    4b58:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4b5a:	f242 018e 	movw	r1, #8334	; 0x208e
    4b5e:	6878      	ldr	r0, [r7, #4]
    4b60:	4b10      	ldr	r3, [pc, #64]	; (4ba4 <_osc32kctrl_init_sources+0x58>)
    4b62:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4b64:	2100      	movs	r1, #0
    4b66:	6878      	ldr	r0, [r7, #4]
    4b68:	4b0f      	ldr	r3, [pc, #60]	; (4ba8 <_osc32kctrl_init_sources+0x5c>)
    4b6a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4b6c:	2100      	movs	r1, #0
    4b6e:	6878      	ldr	r0, [r7, #4]
    4b70:	4b0e      	ldr	r3, [pc, #56]	; (4bac <_osc32kctrl_init_sources+0x60>)
    4b72:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4b74:	6878      	ldr	r0, [r7, #4]
    4b76:	4b0e      	ldr	r3, [pc, #56]	; (4bb0 <_osc32kctrl_init_sources+0x64>)
    4b78:	4798      	blx	r3
    4b7a:	4603      	mov	r3, r0
    4b7c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4b7e:	887b      	ldrh	r3, [r7, #2]
    4b80:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4b82:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4b86:	4619      	mov	r1, r3
    4b88:	6878      	ldr	r0, [r7, #4]
    4b8a:	4b0a      	ldr	r3, [pc, #40]	; (4bb4 <_osc32kctrl_init_sources+0x68>)
    4b8c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4b8e:	2100      	movs	r1, #0
    4b90:	6878      	ldr	r0, [r7, #4]
    4b92:	4b09      	ldr	r3, [pc, #36]	; (4bb8 <_osc32kctrl_init_sources+0x6c>)
    4b94:	4798      	blx	r3
	(void)calib;
}
    4b96:	bf00      	nop
    4b98:	3708      	adds	r7, #8
    4b9a:	46bd      	mov	sp, r7
    4b9c:	bd80      	pop	{r7, pc}
    4b9e:	bf00      	nop
    4ba0:	40001400 	.word	0x40001400
    4ba4:	00004aaf 	.word	0x00004aaf
    4ba8:	00004acd 	.word	0x00004acd
    4bac:	00004aeb 	.word	0x00004aeb
    4bb0:	00004b09 	.word	0x00004b09
    4bb4:	00004b2f 	.word	0x00004b2f
    4bb8:	00004a91 	.word	0x00004a91

00004bbc <hri_gclk_wait_for_sync>:
{
    4bbc:	b480      	push	{r7}
    4bbe:	b083      	sub	sp, #12
    4bc0:	af00      	add	r7, sp, #0
    4bc2:	6078      	str	r0, [r7, #4]
    4bc4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4bc6:	bf00      	nop
    4bc8:	687b      	ldr	r3, [r7, #4]
    4bca:	685a      	ldr	r2, [r3, #4]
    4bcc:	683b      	ldr	r3, [r7, #0]
    4bce:	4013      	ands	r3, r2
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	d1f9      	bne.n	4bc8 <hri_gclk_wait_for_sync+0xc>
}
    4bd4:	bf00      	nop
    4bd6:	370c      	adds	r7, #12
    4bd8:	46bd      	mov	sp, r7
    4bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bde:	4770      	bx	lr

00004be0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4be0:	b480      	push	{r7}
    4be2:	b083      	sub	sp, #12
    4be4:	af00      	add	r7, sp, #0
    4be6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	685b      	ldr	r3, [r3, #4]
    4bec:	089b      	lsrs	r3, r3, #2
    4bee:	f003 0301 	and.w	r3, r3, #1
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	bf14      	ite	ne
    4bf6:	2301      	movne	r3, #1
    4bf8:	2300      	moveq	r3, #0
    4bfa:	b2db      	uxtb	r3, r3
}
    4bfc:	4618      	mov	r0, r3
    4bfe:	370c      	adds	r7, #12
    4c00:	46bd      	mov	sp, r7
    4c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c06:	4770      	bx	lr

00004c08 <hri_gclk_read_SYNCBUSY_reg>:
{
    4c08:	b480      	push	{r7}
    4c0a:	b083      	sub	sp, #12
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4c10:	687b      	ldr	r3, [r7, #4]
    4c12:	685b      	ldr	r3, [r3, #4]
}
    4c14:	4618      	mov	r0, r3
    4c16:	370c      	adds	r7, #12
    4c18:	46bd      	mov	sp, r7
    4c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c1e:	4770      	bx	lr

00004c20 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4c20:	b580      	push	{r7, lr}
    4c22:	b086      	sub	sp, #24
    4c24:	af00      	add	r7, sp, #0
    4c26:	60f8      	str	r0, [r7, #12]
    4c28:	460b      	mov	r3, r1
    4c2a:	607a      	str	r2, [r7, #4]
    4c2c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4c2e:	7afa      	ldrb	r2, [r7, #11]
    4c30:	68fb      	ldr	r3, [r7, #12]
    4c32:	3208      	adds	r2, #8
    4c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4c38:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4c3a:	697b      	ldr	r3, [r7, #20]
    4c3c:	f023 030f 	bic.w	r3, r3, #15
    4c40:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	f003 030f 	and.w	r3, r3, #15
    4c48:	697a      	ldr	r2, [r7, #20]
    4c4a:	4313      	orrs	r3, r2
    4c4c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4c4e:	7afa      	ldrb	r2, [r7, #11]
    4c50:	68fb      	ldr	r3, [r7, #12]
    4c52:	3208      	adds	r2, #8
    4c54:	6979      	ldr	r1, [r7, #20]
    4c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4c5a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4c5e:	68f8      	ldr	r0, [r7, #12]
    4c60:	4b02      	ldr	r3, [pc, #8]	; (4c6c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4c62:	4798      	blx	r3
}
    4c64:	bf00      	nop
    4c66:	3718      	adds	r7, #24
    4c68:	46bd      	mov	sp, r7
    4c6a:	bd80      	pop	{r7, pc}
    4c6c:	00004bbd 	.word	0x00004bbd

00004c70 <hri_gclk_write_PCHCTRL_reg>:
{
    4c70:	b480      	push	{r7}
    4c72:	b085      	sub	sp, #20
    4c74:	af00      	add	r7, sp, #0
    4c76:	60f8      	str	r0, [r7, #12]
    4c78:	460b      	mov	r3, r1
    4c7a:	607a      	str	r2, [r7, #4]
    4c7c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4c7e:	7afa      	ldrb	r2, [r7, #11]
    4c80:	68fb      	ldr	r3, [r7, #12]
    4c82:	3220      	adds	r2, #32
    4c84:	6879      	ldr	r1, [r7, #4]
    4c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4c8a:	bf00      	nop
    4c8c:	3714      	adds	r7, #20
    4c8e:	46bd      	mov	sp, r7
    4c90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c94:	4770      	bx	lr

00004c96 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4c96:	b480      	push	{r7}
    4c98:	b085      	sub	sp, #20
    4c9a:	af00      	add	r7, sp, #0
    4c9c:	60f8      	str	r0, [r7, #12]
    4c9e:	460b      	mov	r3, r1
    4ca0:	607a      	str	r2, [r7, #4]
    4ca2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4ca4:	bf00      	nop
    4ca6:	7afa      	ldrb	r2, [r7, #11]
    4ca8:	68f9      	ldr	r1, [r7, #12]
    4caa:	4613      	mov	r3, r2
    4cac:	009b      	lsls	r3, r3, #2
    4cae:	4413      	add	r3, r2
    4cb0:	009b      	lsls	r3, r3, #2
    4cb2:	440b      	add	r3, r1
    4cb4:	333c      	adds	r3, #60	; 0x3c
    4cb6:	681a      	ldr	r2, [r3, #0]
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	4013      	ands	r3, r2
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	d1f2      	bne.n	4ca6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4cc0:	bf00      	nop
    4cc2:	3714      	adds	r7, #20
    4cc4:	46bd      	mov	sp, r7
    4cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cca:	4770      	bx	lr

00004ccc <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4ccc:	b480      	push	{r7}
    4cce:	b083      	sub	sp, #12
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	6078      	str	r0, [r7, #4]
    4cd4:	460b      	mov	r3, r1
    4cd6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4cd8:	78fa      	ldrb	r2, [r7, #3]
    4cda:	6879      	ldr	r1, [r7, #4]
    4cdc:	4613      	mov	r3, r2
    4cde:	009b      	lsls	r3, r3, #2
    4ce0:	4413      	add	r3, r2
    4ce2:	009b      	lsls	r3, r3, #2
    4ce4:	440b      	add	r3, r1
    4ce6:	3340      	adds	r3, #64	; 0x40
    4ce8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4cea:	f003 0301 	and.w	r3, r3, #1
    4cee:	2b00      	cmp	r3, #0
    4cf0:	bf14      	ite	ne
    4cf2:	2301      	movne	r3, #1
    4cf4:	2300      	moveq	r3, #0
    4cf6:	b2db      	uxtb	r3, r3
}
    4cf8:	4618      	mov	r0, r3
    4cfa:	370c      	adds	r7, #12
    4cfc:	46bd      	mov	sp, r7
    4cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d02:	4770      	bx	lr

00004d04 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4d04:	b480      	push	{r7}
    4d06:	b083      	sub	sp, #12
    4d08:	af00      	add	r7, sp, #0
    4d0a:	6078      	str	r0, [r7, #4]
    4d0c:	460b      	mov	r3, r1
    4d0e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4d10:	78fa      	ldrb	r2, [r7, #3]
    4d12:	6879      	ldr	r1, [r7, #4]
    4d14:	4613      	mov	r3, r2
    4d16:	009b      	lsls	r3, r3, #2
    4d18:	4413      	add	r3, r2
    4d1a:	009b      	lsls	r3, r3, #2
    4d1c:	440b      	add	r3, r1
    4d1e:	3340      	adds	r3, #64	; 0x40
    4d20:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4d22:	085b      	lsrs	r3, r3, #1
    4d24:	f003 0301 	and.w	r3, r3, #1
    4d28:	2b00      	cmp	r3, #0
    4d2a:	bf14      	ite	ne
    4d2c:	2301      	movne	r3, #1
    4d2e:	2300      	moveq	r3, #0
    4d30:	b2db      	uxtb	r3, r3
}
    4d32:	4618      	mov	r0, r3
    4d34:	370c      	adds	r7, #12
    4d36:	46bd      	mov	sp, r7
    4d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d3c:	4770      	bx	lr
	...

00004d40 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b082      	sub	sp, #8
    4d44:	af00      	add	r7, sp, #0
    4d46:	6078      	str	r0, [r7, #4]
    4d48:	460b      	mov	r3, r1
    4d4a:	70fb      	strb	r3, [r7, #3]
    4d4c:	4613      	mov	r3, r2
    4d4e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4d50:	78fa      	ldrb	r2, [r7, #3]
    4d52:	6879      	ldr	r1, [r7, #4]
    4d54:	4613      	mov	r3, r2
    4d56:	009b      	lsls	r3, r3, #2
    4d58:	4413      	add	r3, r2
    4d5a:	009b      	lsls	r3, r3, #2
    4d5c:	440b      	add	r3, r1
    4d5e:	3330      	adds	r3, #48	; 0x30
    4d60:	78ba      	ldrb	r2, [r7, #2]
    4d62:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4d64:	78fb      	ldrb	r3, [r7, #3]
    4d66:	2202      	movs	r2, #2
    4d68:	4619      	mov	r1, r3
    4d6a:	6878      	ldr	r0, [r7, #4]
    4d6c:	4b02      	ldr	r3, [pc, #8]	; (4d78 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4d6e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d70:	bf00      	nop
    4d72:	3708      	adds	r7, #8
    4d74:	46bd      	mov	sp, r7
    4d76:	bd80      	pop	{r7, pc}
    4d78:	00004c97 	.word	0x00004c97

00004d7c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b084      	sub	sp, #16
    4d80:	af00      	add	r7, sp, #0
    4d82:	60f8      	str	r0, [r7, #12]
    4d84:	460b      	mov	r3, r1
    4d86:	607a      	str	r2, [r7, #4]
    4d88:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4d8a:	7afa      	ldrb	r2, [r7, #11]
    4d8c:	68f9      	ldr	r1, [r7, #12]
    4d8e:	4613      	mov	r3, r2
    4d90:	009b      	lsls	r3, r3, #2
    4d92:	4413      	add	r3, r2
    4d94:	009b      	lsls	r3, r3, #2
    4d96:	440b      	add	r3, r1
    4d98:	3334      	adds	r3, #52	; 0x34
    4d9a:	687a      	ldr	r2, [r7, #4]
    4d9c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4d9e:	7afb      	ldrb	r3, [r7, #11]
    4da0:	2206      	movs	r2, #6
    4da2:	4619      	mov	r1, r3
    4da4:	68f8      	ldr	r0, [r7, #12]
    4da6:	4b03      	ldr	r3, [pc, #12]	; (4db4 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4da8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4daa:	bf00      	nop
    4dac:	3710      	adds	r7, #16
    4dae:	46bd      	mov	sp, r7
    4db0:	bd80      	pop	{r7, pc}
    4db2:	bf00      	nop
    4db4:	00004c97 	.word	0x00004c97

00004db8 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4db8:	b480      	push	{r7}
    4dba:	b085      	sub	sp, #20
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	60f8      	str	r0, [r7, #12]
    4dc0:	460b      	mov	r3, r1
    4dc2:	607a      	str	r2, [r7, #4]
    4dc4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4dc6:	7afa      	ldrb	r2, [r7, #11]
    4dc8:	68f9      	ldr	r1, [r7, #12]
    4dca:	4613      	mov	r3, r2
    4dcc:	009b      	lsls	r3, r3, #2
    4dce:	4413      	add	r3, r2
    4dd0:	009b      	lsls	r3, r3, #2
    4dd2:	440b      	add	r3, r1
    4dd4:	3338      	adds	r3, #56	; 0x38
    4dd6:	687a      	ldr	r2, [r7, #4]
    4dd8:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4dda:	bf00      	nop
    4ddc:	3714      	adds	r7, #20
    4dde:	46bd      	mov	sp, r7
    4de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de4:	4770      	bx	lr

00004de6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4de6:	b480      	push	{r7}
    4de8:	b083      	sub	sp, #12
    4dea:	af00      	add	r7, sp, #0
    4dec:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	691b      	ldr	r3, [r3, #16]
    4df2:	085b      	lsrs	r3, r3, #1
    4df4:	f003 0301 	and.w	r3, r3, #1
    4df8:	2b00      	cmp	r3, #0
    4dfa:	bf14      	ite	ne
    4dfc:	2301      	movne	r3, #1
    4dfe:	2300      	moveq	r3, #0
    4e00:	b2db      	uxtb	r3, r3
}
    4e02:	4618      	mov	r0, r3
    4e04:	370c      	adds	r7, #12
    4e06:	46bd      	mov	sp, r7
    4e08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e0c:	4770      	bx	lr

00004e0e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4e0e:	b480      	push	{r7}
    4e10:	b083      	sub	sp, #12
    4e12:	af00      	add	r7, sp, #0
    4e14:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	691b      	ldr	r3, [r3, #16]
    4e1a:	0a1b      	lsrs	r3, r3, #8
    4e1c:	f003 0301 	and.w	r3, r3, #1
    4e20:	2b00      	cmp	r3, #0
    4e22:	bf14      	ite	ne
    4e24:	2301      	movne	r3, #1
    4e26:	2300      	moveq	r3, #0
    4e28:	b2db      	uxtb	r3, r3
}
    4e2a:	4618      	mov	r0, r3
    4e2c:	370c      	adds	r7, #12
    4e2e:	46bd      	mov	sp, r7
    4e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e34:	4770      	bx	lr

00004e36 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4e36:	b480      	push	{r7}
    4e38:	b085      	sub	sp, #20
    4e3a:	af00      	add	r7, sp, #0
    4e3c:	6078      	str	r0, [r7, #4]
    4e3e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	691b      	ldr	r3, [r3, #16]
    4e44:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4e46:	68fa      	ldr	r2, [r7, #12]
    4e48:	683b      	ldr	r3, [r7, #0]
    4e4a:	4013      	ands	r3, r2
    4e4c:	60fb      	str	r3, [r7, #12]
	return tmp;
    4e4e:	68fb      	ldr	r3, [r7, #12]
}
    4e50:	4618      	mov	r0, r3
    4e52:	3714      	adds	r7, #20
    4e54:	46bd      	mov	sp, r7
    4e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5a:	4770      	bx	lr

00004e5c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4e5c:	b480      	push	{r7}
    4e5e:	b085      	sub	sp, #20
    4e60:	af00      	add	r7, sp, #0
    4e62:	60f8      	str	r0, [r7, #12]
    4e64:	460b      	mov	r3, r1
    4e66:	607a      	str	r2, [r7, #4]
    4e68:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4e6a:	7afb      	ldrb	r3, [r7, #11]
    4e6c:	68fa      	ldr	r2, [r7, #12]
    4e6e:	3304      	adds	r3, #4
    4e70:	009b      	lsls	r3, r3, #2
    4e72:	4413      	add	r3, r2
    4e74:	687a      	ldr	r2, [r7, #4]
    4e76:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e78:	bf00      	nop
    4e7a:	3714      	adds	r7, #20
    4e7c:	46bd      	mov	sp, r7
    4e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e82:	4770      	bx	lr

00004e84 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4e84:	b480      	push	{r7}
    4e86:	b083      	sub	sp, #12
    4e88:	af00      	add	r7, sp, #0
    4e8a:	6078      	str	r0, [r7, #4]
    4e8c:	460b      	mov	r3, r1
    4e8e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	78fa      	ldrb	r2, [r7, #3]
    4e94:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e96:	bf00      	nop
    4e98:	370c      	adds	r7, #12
    4e9a:	46bd      	mov	sp, r7
    4e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea0:	4770      	bx	lr

00004ea2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4ea2:	b480      	push	{r7}
    4ea4:	b085      	sub	sp, #20
    4ea6:	af00      	add	r7, sp, #0
    4ea8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	f893 3020 	ldrb.w	r3, [r3, #32]
    4eb0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4eb2:	7bfb      	ldrb	r3, [r7, #15]
    4eb4:	f003 0301 	and.w	r3, r3, #1
    4eb8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4eba:	7bfb      	ldrb	r3, [r7, #15]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	bf14      	ite	ne
    4ec0:	2301      	movne	r3, #1
    4ec2:	2300      	moveq	r3, #0
    4ec4:	b2db      	uxtb	r3, r3
}
    4ec6:	4618      	mov	r0, r3
    4ec8:	3714      	adds	r7, #20
    4eca:	46bd      	mov	sp, r7
    4ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed0:	4770      	bx	lr

00004ed2 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4ed2:	b480      	push	{r7}
    4ed4:	b083      	sub	sp, #12
    4ed6:	af00      	add	r7, sp, #0
    4ed8:	6078      	str	r0, [r7, #4]
    4eda:	460b      	mov	r3, r1
    4edc:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	78fa      	ldrb	r2, [r7, #3]
    4ee2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4ee6:	bf00      	nop
    4ee8:	370c      	adds	r7, #12
    4eea:	46bd      	mov	sp, r7
    4eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef0:	4770      	bx	lr

00004ef2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4ef2:	b480      	push	{r7}
    4ef4:	b083      	sub	sp, #12
    4ef6:	af00      	add	r7, sp, #0
    4ef8:	6078      	str	r0, [r7, #4]
    4efa:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	683a      	ldr	r2, [r7, #0]
    4f00:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f02:	bf00      	nop
    4f04:	370c      	adds	r7, #12
    4f06:	46bd      	mov	sp, r7
    4f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f0c:	4770      	bx	lr

00004f0e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4f0e:	b480      	push	{r7}
    4f10:	b083      	sub	sp, #12
    4f12:	af00      	add	r7, sp, #0
    4f14:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4f16:	687b      	ldr	r3, [r7, #4]
    4f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4f1a:	4618      	mov	r0, r3
    4f1c:	370c      	adds	r7, #12
    4f1e:	46bd      	mov	sp, r7
    4f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f24:	4770      	bx	lr

00004f26 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4f26:	b480      	push	{r7}
    4f28:	b083      	sub	sp, #12
    4f2a:	af00      	add	r7, sp, #0
    4f2c:	6078      	str	r0, [r7, #4]
    4f2e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	683a      	ldr	r2, [r7, #0]
    4f34:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f36:	bf00      	nop
    4f38:	370c      	adds	r7, #12
    4f3a:	46bd      	mov	sp, r7
    4f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f40:	4770      	bx	lr

00004f42 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4f42:	b480      	push	{r7}
    4f44:	b085      	sub	sp, #20
    4f46:	af00      	add	r7, sp, #0
    4f48:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f4a:	687b      	ldr	r3, [r7, #4]
    4f4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4f50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4f52:	7bfb      	ldrb	r3, [r7, #15]
    4f54:	085b      	lsrs	r3, r3, #1
    4f56:	b2db      	uxtb	r3, r3
    4f58:	f003 0301 	and.w	r3, r3, #1
    4f5c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f5e:	7bfb      	ldrb	r3, [r7, #15]
    4f60:	2b00      	cmp	r3, #0
    4f62:	bf14      	ite	ne
    4f64:	2301      	movne	r3, #1
    4f66:	2300      	moveq	r3, #0
    4f68:	b2db      	uxtb	r3, r3
}
    4f6a:	4618      	mov	r0, r3
    4f6c:	3714      	adds	r7, #20
    4f6e:	46bd      	mov	sp, r7
    4f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f74:	4770      	bx	lr

00004f76 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4f76:	b480      	push	{r7}
    4f78:	b085      	sub	sp, #20
    4f7a:	af00      	add	r7, sp, #0
    4f7c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f7e:	687b      	ldr	r3, [r7, #4]
    4f80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4f84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4f86:	7bfb      	ldrb	r3, [r7, #15]
    4f88:	089b      	lsrs	r3, r3, #2
    4f8a:	b2db      	uxtb	r3, r3
    4f8c:	f003 0301 	and.w	r3, r3, #1
    4f90:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f92:	7bfb      	ldrb	r3, [r7, #15]
    4f94:	2b00      	cmp	r3, #0
    4f96:	bf14      	ite	ne
    4f98:	2301      	movne	r3, #1
    4f9a:	2300      	moveq	r3, #0
    4f9c:	b2db      	uxtb	r3, r3
}
    4f9e:	4618      	mov	r0, r3
    4fa0:	3714      	adds	r7, #20
    4fa2:	46bd      	mov	sp, r7
    4fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa8:	4770      	bx	lr

00004faa <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4faa:	b480      	push	{r7}
    4fac:	b085      	sub	sp, #20
    4fae:	af00      	add	r7, sp, #0
    4fb0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4fb2:	687b      	ldr	r3, [r7, #4]
    4fb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4fb8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4fba:	7bfb      	ldrb	r3, [r7, #15]
    4fbc:	08db      	lsrs	r3, r3, #3
    4fbe:	b2db      	uxtb	r3, r3
    4fc0:	f003 0301 	and.w	r3, r3, #1
    4fc4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4fc6:	7bfb      	ldrb	r3, [r7, #15]
    4fc8:	2b00      	cmp	r3, #0
    4fca:	bf14      	ite	ne
    4fcc:	2301      	movne	r3, #1
    4fce:	2300      	moveq	r3, #0
    4fd0:	b2db      	uxtb	r3, r3
}
    4fd2:	4618      	mov	r0, r3
    4fd4:	3714      	adds	r7, #20
    4fd6:	46bd      	mov	sp, r7
    4fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fdc:	4770      	bx	lr

00004fde <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4fde:	b480      	push	{r7}
    4fe0:	b085      	sub	sp, #20
    4fe2:	af00      	add	r7, sp, #0
    4fe4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4fec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4fee:	7bfb      	ldrb	r3, [r7, #15]
    4ff0:	091b      	lsrs	r3, r3, #4
    4ff2:	b2db      	uxtb	r3, r3
    4ff4:	f003 0301 	and.w	r3, r3, #1
    4ff8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4ffa:	7bfb      	ldrb	r3, [r7, #15]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	bf14      	ite	ne
    5000:	2301      	movne	r3, #1
    5002:	2300      	moveq	r3, #0
    5004:	b2db      	uxtb	r3, r3
}
    5006:	4618      	mov	r0, r3
    5008:	3714      	adds	r7, #20
    500a:	46bd      	mov	sp, r7
    500c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5010:	4770      	bx	lr
	...

00005014 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5014:	b580      	push	{r7, lr}
    5016:	b082      	sub	sp, #8
    5018:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    501a:	4b0a      	ldr	r3, [pc, #40]	; (5044 <_oscctrl_init_sources+0x30>)
    501c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    501e:	4a0a      	ldr	r2, [pc, #40]	; (5048 <_oscctrl_init_sources+0x34>)
    5020:	2101      	movs	r1, #1
    5022:	6878      	ldr	r0, [r7, #4]
    5024:	4b09      	ldr	r3, [pc, #36]	; (504c <_oscctrl_init_sources+0x38>)
    5026:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5028:	bf00      	nop
    502a:	6878      	ldr	r0, [r7, #4]
    502c:	4b08      	ldr	r3, [pc, #32]	; (5050 <_oscctrl_init_sources+0x3c>)
    502e:	4798      	blx	r3
    5030:	4603      	mov	r3, r0
    5032:	f083 0301 	eor.w	r3, r3, #1
    5036:	b2db      	uxtb	r3, r3
    5038:	2b00      	cmp	r3, #0
    503a:	d1f6      	bne.n	502a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    503c:	bf00      	nop
    503e:	3708      	adds	r7, #8
    5040:	46bd      	mov	sp, r7
    5042:	bd80      	pop	{r7, pc}
    5044:	40001000 	.word	0x40001000
    5048:	03002646 	.word	0x03002646
    504c:	00004e5d 	.word	0x00004e5d
    5050:	00004de7 	.word	0x00004de7

00005054 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5054:	b580      	push	{r7, lr}
    5056:	b084      	sub	sp, #16
    5058:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    505a:	4b6b      	ldr	r3, [pc, #428]	; (5208 <_oscctrl_init_referenced_generators+0x1b4>)
    505c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    505e:	2204      	movs	r2, #4
    5060:	2100      	movs	r1, #0
    5062:	486a      	ldr	r0, [pc, #424]	; (520c <_oscctrl_init_referenced_generators+0x1b8>)
    5064:	4b6a      	ldr	r3, [pc, #424]	; (5210 <_oscctrl_init_referenced_generators+0x1bc>)
    5066:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5068:	bf00      	nop
    506a:	4868      	ldr	r0, [pc, #416]	; (520c <_oscctrl_init_referenced_generators+0x1b8>)
    506c:	4b69      	ldr	r3, [pc, #420]	; (5214 <_oscctrl_init_referenced_generators+0x1c0>)
    506e:	4798      	blx	r3
    5070:	4603      	mov	r3, r0
    5072:	2b00      	cmp	r3, #0
    5074:	d1f9      	bne.n	506a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5076:	2100      	movs	r1, #0
    5078:	68f8      	ldr	r0, [r7, #12]
    507a:	4b67      	ldr	r3, [pc, #412]	; (5218 <_oscctrl_init_referenced_generators+0x1c4>)
    507c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    507e:	4967      	ldr	r1, [pc, #412]	; (521c <_oscctrl_init_referenced_generators+0x1c8>)
    5080:	68f8      	ldr	r0, [r7, #12]
    5082:	4b67      	ldr	r3, [pc, #412]	; (5220 <_oscctrl_init_referenced_generators+0x1cc>)
    5084:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5086:	bf00      	nop
    5088:	68f8      	ldr	r0, [r7, #12]
    508a:	4b66      	ldr	r3, [pc, #408]	; (5224 <_oscctrl_init_referenced_generators+0x1d0>)
    508c:	4798      	blx	r3
    508e:	4603      	mov	r3, r0
    5090:	2b00      	cmp	r3, #0
    5092:	d1f9      	bne.n	5088 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5094:	2100      	movs	r1, #0
    5096:	68f8      	ldr	r0, [r7, #12]
    5098:	4b63      	ldr	r3, [pc, #396]	; (5228 <_oscctrl_init_referenced_generators+0x1d4>)
    509a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    509c:	bf00      	nop
    509e:	68f8      	ldr	r0, [r7, #12]
    50a0:	4b62      	ldr	r3, [pc, #392]	; (522c <_oscctrl_init_referenced_generators+0x1d8>)
    50a2:	4798      	blx	r3
    50a4:	4603      	mov	r3, r0
    50a6:	2b00      	cmp	r3, #0
    50a8:	d1f9      	bne.n	509e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    50aa:	2302      	movs	r3, #2
    50ac:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    50ae:	7afb      	ldrb	r3, [r7, #11]
    50b0:	4619      	mov	r1, r3
    50b2:	68f8      	ldr	r0, [r7, #12]
    50b4:	4b58      	ldr	r3, [pc, #352]	; (5218 <_oscctrl_init_referenced_generators+0x1c4>)
    50b6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    50b8:	bf00      	nop
    50ba:	68f8      	ldr	r0, [r7, #12]
    50bc:	4b5c      	ldr	r3, [pc, #368]	; (5230 <_oscctrl_init_referenced_generators+0x1dc>)
    50be:	4798      	blx	r3
    50c0:	4603      	mov	r3, r0
    50c2:	2b00      	cmp	r3, #0
    50c4:	d1f9      	bne.n	50ba <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    50c6:	68f8      	ldr	r0, [r7, #12]
    50c8:	4b5a      	ldr	r3, [pc, #360]	; (5234 <_oscctrl_init_referenced_generators+0x1e0>)
    50ca:	4798      	blx	r3
    50cc:	4603      	mov	r3, r0
    50ce:	4619      	mov	r1, r3
    50d0:	68f8      	ldr	r0, [r7, #12]
    50d2:	4b59      	ldr	r3, [pc, #356]	; (5238 <_oscctrl_init_referenced_generators+0x1e4>)
    50d4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    50d6:	bf00      	nop
    50d8:	68f8      	ldr	r0, [r7, #12]
    50da:	4b58      	ldr	r3, [pc, #352]	; (523c <_oscctrl_init_referenced_generators+0x1e8>)
    50dc:	4798      	blx	r3
    50de:	4603      	mov	r3, r0
    50e0:	2b00      	cmp	r3, #0
    50e2:	d1f9      	bne.n	50d8 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    50e4:	2319      	movs	r3, #25
    50e6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    50e8:	7afb      	ldrb	r3, [r7, #11]
    50ea:	4619      	mov	r1, r3
    50ec:	68f8      	ldr	r0, [r7, #12]
    50ee:	4b4e      	ldr	r3, [pc, #312]	; (5228 <_oscctrl_init_referenced_generators+0x1d4>)
    50f0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    50f2:	bf00      	nop
    50f4:	68f8      	ldr	r0, [r7, #12]
    50f6:	4b4d      	ldr	r3, [pc, #308]	; (522c <_oscctrl_init_referenced_generators+0x1d8>)
    50f8:	4798      	blx	r3
    50fa:	4603      	mov	r3, r0
    50fc:	2b00      	cmp	r3, #0
    50fe:	d1f9      	bne.n	50f4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5100:	2245      	movs	r2, #69	; 0x45
    5102:	2101      	movs	r1, #1
    5104:	4841      	ldr	r0, [pc, #260]	; (520c <_oscctrl_init_referenced_generators+0x1b8>)
    5106:	4b4e      	ldr	r3, [pc, #312]	; (5240 <_oscctrl_init_referenced_generators+0x1ec>)
    5108:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    510a:	223b      	movs	r2, #59	; 0x3b
    510c:	2100      	movs	r1, #0
    510e:	68f8      	ldr	r0, [r7, #12]
    5110:	4b4c      	ldr	r3, [pc, #304]	; (5244 <_oscctrl_init_referenced_generators+0x1f0>)
    5112:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5114:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5118:	2100      	movs	r1, #0
    511a:	68f8      	ldr	r0, [r7, #12]
    511c:	4b4a      	ldr	r3, [pc, #296]	; (5248 <_oscctrl_init_referenced_generators+0x1f4>)
    511e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5120:	2242      	movs	r2, #66	; 0x42
    5122:	2100      	movs	r1, #0
    5124:	68f8      	ldr	r0, [r7, #12]
    5126:	4b49      	ldr	r3, [pc, #292]	; (524c <_oscctrl_init_referenced_generators+0x1f8>)
    5128:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    512a:	4a49      	ldr	r2, [pc, #292]	; (5250 <_oscctrl_init_referenced_generators+0x1fc>)
    512c:	2101      	movs	r1, #1
    512e:	68f8      	ldr	r0, [r7, #12]
    5130:	4b44      	ldr	r3, [pc, #272]	; (5244 <_oscctrl_init_referenced_generators+0x1f0>)
    5132:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5134:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5138:	2101      	movs	r1, #1
    513a:	68f8      	ldr	r0, [r7, #12]
    513c:	4b42      	ldr	r3, [pc, #264]	; (5248 <_oscctrl_init_referenced_generators+0x1f4>)
    513e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5140:	2202      	movs	r2, #2
    5142:	2101      	movs	r1, #1
    5144:	68f8      	ldr	r0, [r7, #12]
    5146:	4b41      	ldr	r3, [pc, #260]	; (524c <_oscctrl_init_referenced_generators+0x1f8>)
    5148:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    514a:	68f8      	ldr	r0, [r7, #12]
    514c:	4b41      	ldr	r3, [pc, #260]	; (5254 <_oscctrl_init_referenced_generators+0x200>)
    514e:	4798      	blx	r3
    5150:	4603      	mov	r3, r0
    5152:	2b00      	cmp	r3, #0
    5154:	d00c      	beq.n	5170 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5156:	f44f 6310 	mov.w	r3, #2304	; 0x900
    515a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    515c:	bf00      	nop
    515e:	6879      	ldr	r1, [r7, #4]
    5160:	68f8      	ldr	r0, [r7, #12]
    5162:	4b3d      	ldr	r3, [pc, #244]	; (5258 <_oscctrl_init_referenced_generators+0x204>)
    5164:	4798      	blx	r3
    5166:	4602      	mov	r2, r0
    5168:	687b      	ldr	r3, [r7, #4]
    516a:	429a      	cmp	r2, r3
    516c:	d1f7      	bne.n	515e <_oscctrl_init_referenced_generators+0x10a>
    516e:	e009      	b.n	5184 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5170:	bf00      	nop
    5172:	68f8      	ldr	r0, [r7, #12]
    5174:	4b39      	ldr	r3, [pc, #228]	; (525c <_oscctrl_init_referenced_generators+0x208>)
    5176:	4798      	blx	r3
    5178:	4603      	mov	r3, r0
    517a:	f083 0301 	eor.w	r3, r3, #1
    517e:	b2db      	uxtb	r3, r3
    5180:	2b00      	cmp	r3, #0
    5182:	d1f6      	bne.n	5172 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5184:	bf00      	nop
    5186:	2100      	movs	r1, #0
    5188:	68f8      	ldr	r0, [r7, #12]
    518a:	4b35      	ldr	r3, [pc, #212]	; (5260 <_oscctrl_init_referenced_generators+0x20c>)
    518c:	4798      	blx	r3
    518e:	4603      	mov	r3, r0
    5190:	f083 0301 	eor.w	r3, r3, #1
    5194:	b2db      	uxtb	r3, r3
    5196:	2b00      	cmp	r3, #0
    5198:	d009      	beq.n	51ae <_oscctrl_init_referenced_generators+0x15a>
    519a:	2100      	movs	r1, #0
    519c:	68f8      	ldr	r0, [r7, #12]
    519e:	4b31      	ldr	r3, [pc, #196]	; (5264 <_oscctrl_init_referenced_generators+0x210>)
    51a0:	4798      	blx	r3
    51a2:	4603      	mov	r3, r0
    51a4:	f083 0301 	eor.w	r3, r3, #1
    51a8:	b2db      	uxtb	r3, r3
    51aa:	2b00      	cmp	r3, #0
    51ac:	d1eb      	bne.n	5186 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    51ae:	bf00      	nop
    51b0:	2101      	movs	r1, #1
    51b2:	68f8      	ldr	r0, [r7, #12]
    51b4:	4b2a      	ldr	r3, [pc, #168]	; (5260 <_oscctrl_init_referenced_generators+0x20c>)
    51b6:	4798      	blx	r3
    51b8:	4603      	mov	r3, r0
    51ba:	f083 0301 	eor.w	r3, r3, #1
    51be:	b2db      	uxtb	r3, r3
    51c0:	2b00      	cmp	r3, #0
    51c2:	d009      	beq.n	51d8 <_oscctrl_init_referenced_generators+0x184>
    51c4:	2101      	movs	r1, #1
    51c6:	68f8      	ldr	r0, [r7, #12]
    51c8:	4b26      	ldr	r3, [pc, #152]	; (5264 <_oscctrl_init_referenced_generators+0x210>)
    51ca:	4798      	blx	r3
    51cc:	4603      	mov	r3, r0
    51ce:	f083 0301 	eor.w	r3, r3, #1
    51d2:	b2db      	uxtb	r3, r3
    51d4:	2b00      	cmp	r3, #0
    51d6:	d1eb      	bne.n	51b0 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    51d8:	bf00      	nop
    51da:	480c      	ldr	r0, [pc, #48]	; (520c <_oscctrl_init_referenced_generators+0x1b8>)
    51dc:	4b22      	ldr	r3, [pc, #136]	; (5268 <_oscctrl_init_referenced_generators+0x214>)
    51de:	4798      	blx	r3
    51e0:	4603      	mov	r3, r0
    51e2:	2b00      	cmp	r3, #0
    51e4:	d1f9      	bne.n	51da <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    51e6:	2207      	movs	r2, #7
    51e8:	2100      	movs	r1, #0
    51ea:	4808      	ldr	r0, [pc, #32]	; (520c <_oscctrl_init_referenced_generators+0x1b8>)
    51ec:	4b08      	ldr	r3, [pc, #32]	; (5210 <_oscctrl_init_referenced_generators+0x1bc>)
    51ee:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    51f0:	bf00      	nop
    51f2:	4806      	ldr	r0, [pc, #24]	; (520c <_oscctrl_init_referenced_generators+0x1b8>)
    51f4:	4b07      	ldr	r3, [pc, #28]	; (5214 <_oscctrl_init_referenced_generators+0x1c0>)
    51f6:	4798      	blx	r3
    51f8:	4603      	mov	r3, r0
    51fa:	2b00      	cmp	r3, #0
    51fc:	d1f9      	bne.n	51f2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    51fe:	bf00      	nop
    5200:	3710      	adds	r7, #16
    5202:	46bd      	mov	sp, r7
    5204:	bd80      	pop	{r7, pc}
    5206:	bf00      	nop
    5208:	40001000 	.word	0x40001000
    520c:	40001c00 	.word	0x40001c00
    5210:	00004c21 	.word	0x00004c21
    5214:	00004be1 	.word	0x00004be1
    5218:	00004e85 	.word	0x00004e85
    521c:	0401bb80 	.word	0x0401bb80
    5220:	00004f27 	.word	0x00004f27
    5224:	00004fdf 	.word	0x00004fdf
    5228:	00004ed3 	.word	0x00004ed3
    522c:	00004f77 	.word	0x00004f77
    5230:	00004f43 	.word	0x00004f43
    5234:	00004f0f 	.word	0x00004f0f
    5238:	00004ef3 	.word	0x00004ef3
    523c:	00004fab 	.word	0x00004fab
    5240:	00004c71 	.word	0x00004c71
    5244:	00004d7d 	.word	0x00004d7d
    5248:	00004db9 	.word	0x00004db9
    524c:	00004d41 	.word	0x00004d41
    5250:	000407a0 	.word	0x000407a0
    5254:	00004ea3 	.word	0x00004ea3
    5258:	00004e37 	.word	0x00004e37
    525c:	00004e0f 	.word	0x00004e0f
    5260:	00004ccd 	.word	0x00004ccd
    5264:	00004d05 	.word	0x00004d05
    5268:	00004c09 	.word	0x00004c09

0000526c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    526c:	b480      	push	{r7}
    526e:	b083      	sub	sp, #12
    5270:	af00      	add	r7, sp, #0
    5272:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5274:	687b      	ldr	r3, [r7, #4]
    5276:	69db      	ldr	r3, [r3, #28]
    5278:	0a9b      	lsrs	r3, r3, #10
    527a:	f003 0301 	and.w	r3, r3, #1
    527e:	2b00      	cmp	r3, #0
    5280:	bf14      	ite	ne
    5282:	2301      	movne	r3, #1
    5284:	2300      	moveq	r3, #0
    5286:	b2db      	uxtb	r3, r3
}
    5288:	4618      	mov	r0, r3
    528a:	370c      	adds	r7, #12
    528c:	46bd      	mov	sp, r7
    528e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5292:	4770      	bx	lr

00005294 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5294:	b480      	push	{r7}
    5296:	b083      	sub	sp, #12
    5298:	af00      	add	r7, sp, #0
    529a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    52a2:	61da      	str	r2, [r3, #28]
}
    52a4:	bf00      	nop
    52a6:	370c      	adds	r7, #12
    52a8:	46bd      	mov	sp, r7
    52aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ae:	4770      	bx	lr

000052b0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    52b0:	b480      	push	{r7}
    52b2:	b083      	sub	sp, #12
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
    52b8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	683a      	ldr	r2, [r7, #0]
    52be:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52c0:	bf00      	nop
    52c2:	370c      	adds	r7, #12
    52c4:	46bd      	mov	sp, r7
    52c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ca:	4770      	bx	lr

000052cc <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    52cc:	b480      	push	{r7}
    52ce:	b083      	sub	sp, #12
    52d0:	af00      	add	r7, sp, #0
    52d2:	6078      	str	r0, [r7, #4]
    52d4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    52d6:	687b      	ldr	r3, [r7, #4]
    52d8:	683a      	ldr	r2, [r7, #0]
    52da:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52dc:	bf00      	nop
    52de:	370c      	adds	r7, #12
    52e0:	46bd      	mov	sp, r7
    52e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e6:	4770      	bx	lr

000052e8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    52e8:	b480      	push	{r7}
    52ea:	b083      	sub	sp, #12
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
    52f0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	683a      	ldr	r2, [r7, #0]
    52f6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    52f8:	bf00      	nop
    52fa:	370c      	adds	r7, #12
    52fc:	46bd      	mov	sp, r7
    52fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5302:	4770      	bx	lr

00005304 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5304:	b480      	push	{r7}
    5306:	b083      	sub	sp, #12
    5308:	af00      	add	r7, sp, #0
    530a:	6078      	str	r0, [r7, #4]
    530c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    530e:	687b      	ldr	r3, [r7, #4]
    5310:	683a      	ldr	r2, [r7, #0]
    5312:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5314:	bf00      	nop
    5316:	370c      	adds	r7, #12
    5318:	46bd      	mov	sp, r7
    531a:	f85d 7b04 	ldr.w	r7, [sp], #4
    531e:	4770      	bx	lr

00005320 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5320:	b480      	push	{r7}
    5322:	b085      	sub	sp, #20
    5324:	af00      	add	r7, sp, #0
    5326:	6078      	str	r0, [r7, #4]
    5328:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    532e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5330:	68fb      	ldr	r3, [r7, #12]
    5332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5336:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5338:	683b      	ldr	r3, [r7, #0]
    533a:	b2db      	uxtb	r3, r3
    533c:	68fa      	ldr	r2, [r7, #12]
    533e:	4313      	orrs	r3, r2
    5340:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5342:	687b      	ldr	r3, [r7, #4]
    5344:	68fa      	ldr	r2, [r7, #12]
    5346:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5348:	bf00      	nop
    534a:	3714      	adds	r7, #20
    534c:	46bd      	mov	sp, r7
    534e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5352:	4770      	bx	lr

00005354 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5354:	b480      	push	{r7}
    5356:	b085      	sub	sp, #20
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
    535c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5362:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5364:	68fb      	ldr	r3, [r7, #12]
    5366:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    536a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    536c:	683b      	ldr	r3, [r7, #0]
    536e:	041b      	lsls	r3, r3, #16
    5370:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5374:	68fa      	ldr	r2, [r7, #12]
    5376:	4313      	orrs	r3, r2
    5378:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    537a:	687b      	ldr	r3, [r7, #4]
    537c:	68fa      	ldr	r2, [r7, #12]
    537e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5380:	bf00      	nop
    5382:	3714      	adds	r7, #20
    5384:	46bd      	mov	sp, r7
    5386:	f85d 7b04 	ldr.w	r7, [sp], #4
    538a:	4770      	bx	lr

0000538c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    538c:	b480      	push	{r7}
    538e:	b083      	sub	sp, #12
    5390:	af00      	add	r7, sp, #0
    5392:	6078      	str	r0, [r7, #4]
    5394:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5396:	687b      	ldr	r3, [r7, #4]
    5398:	683a      	ldr	r2, [r7, #0]
    539a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    539c:	bf00      	nop
    539e:	370c      	adds	r7, #12
    53a0:	46bd      	mov	sp, r7
    53a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a6:	4770      	bx	lr

000053a8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    53a8:	b480      	push	{r7}
    53aa:	b083      	sub	sp, #12
    53ac:	af00      	add	r7, sp, #0
    53ae:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    53b4:	4618      	mov	r0, r3
    53b6:	370c      	adds	r7, #12
    53b8:	46bd      	mov	sp, r7
    53ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    53be:	4770      	bx	lr

000053c0 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    53c0:	b480      	push	{r7}
    53c2:	b085      	sub	sp, #20
    53c4:	af00      	add	r7, sp, #0
    53c6:	60f8      	str	r0, [r7, #12]
    53c8:	60b9      	str	r1, [r7, #8]
    53ca:	607a      	str	r2, [r7, #4]
	while (count--) {
    53cc:	e007      	b.n	53de <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    53ce:	68fb      	ldr	r3, [r7, #12]
    53d0:	1c5a      	adds	r2, r3, #1
    53d2:	60fa      	str	r2, [r7, #12]
    53d4:	68ba      	ldr	r2, [r7, #8]
    53d6:	1c51      	adds	r1, r2, #1
    53d8:	60b9      	str	r1, [r7, #8]
    53da:	7812      	ldrb	r2, [r2, #0]
    53dc:	701a      	strb	r2, [r3, #0]
	while (count--) {
    53de:	687b      	ldr	r3, [r7, #4]
    53e0:	1e5a      	subs	r2, r3, #1
    53e2:	607a      	str	r2, [r7, #4]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d1f2      	bne.n	53ce <_qspi_memcpy+0xe>
	}
}
    53e8:	bf00      	nop
    53ea:	3714      	adds	r7, #20
    53ec:	46bd      	mov	sp, r7
    53ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f2:	4770      	bx	lr

000053f4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    53f4:	b580      	push	{r7, lr}
    53f6:	b082      	sub	sp, #8
    53f8:	af00      	add	r7, sp, #0
    53fa:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    53fc:	4903      	ldr	r1, [pc, #12]	; (540c <_qspi_end_transfer+0x18>)
    53fe:	6878      	ldr	r0, [r7, #4]
    5400:	4b03      	ldr	r3, [pc, #12]	; (5410 <_qspi_end_transfer+0x1c>)
    5402:	4798      	blx	r3
}
    5404:	bf00      	nop
    5406:	3708      	adds	r7, #8
    5408:	46bd      	mov	sp, r7
    540a:	bd80      	pop	{r7, pc}
    540c:	01000002 	.word	0x01000002
    5410:	000052b1 	.word	0x000052b1

00005414 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5414:	b580      	push	{r7, lr}
    5416:	b082      	sub	sp, #8
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
    541c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	2b00      	cmp	r3, #0
    5422:	d004      	beq.n	542e <_qspi_sync_init+0x1a>
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	2b00      	cmp	r3, #0
    5428:	d001      	beq.n	542e <_qspi_sync_init+0x1a>
    542a:	2301      	movs	r3, #1
    542c:	e000      	b.n	5430 <_qspi_sync_init+0x1c>
    542e:	2300      	movs	r3, #0
    5430:	f003 0301 	and.w	r3, r3, #1
    5434:	b2db      	uxtb	r3, r3
    5436:	2240      	movs	r2, #64	; 0x40
    5438:	490c      	ldr	r1, [pc, #48]	; (546c <_qspi_sync_init+0x58>)
    543a:	4618      	mov	r0, r3
    543c:	4b0c      	ldr	r3, [pc, #48]	; (5470 <_qspi_sync_init+0x5c>)
    543e:	4798      	blx	r3
	dev->prvt = hw;
    5440:	687b      	ldr	r3, [r7, #4]
    5442:	683a      	ldr	r2, [r7, #0]
    5444:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5446:	687b      	ldr	r3, [r7, #4]
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	2101      	movs	r1, #1
    544c:	4618      	mov	r0, r3
    544e:	4b09      	ldr	r3, [pc, #36]	; (5474 <_qspi_sync_init+0x60>)
    5450:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5452:	4909      	ldr	r1, [pc, #36]	; (5478 <_qspi_sync_init+0x64>)
    5454:	6838      	ldr	r0, [r7, #0]
    5456:	4b09      	ldr	r3, [pc, #36]	; (547c <_qspi_sync_init+0x68>)
    5458:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    545a:	4909      	ldr	r1, [pc, #36]	; (5480 <_qspi_sync_init+0x6c>)
    545c:	6838      	ldr	r0, [r7, #0]
    545e:	4b09      	ldr	r3, [pc, #36]	; (5484 <_qspi_sync_init+0x70>)
    5460:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5462:	2300      	movs	r3, #0
}
    5464:	4618      	mov	r0, r3
    5466:	3708      	adds	r7, #8
    5468:	46bd      	mov	sp, r7
    546a:	bd80      	pop	{r7, pc}
    546c:	0000f000 	.word	0x0000f000
    5470:	0000341d 	.word	0x0000341d
    5474:	000052b1 	.word	0x000052b1
    5478:	06000011 	.word	0x06000011
    547c:	000052cd 	.word	0x000052cd
    5480:	00241300 	.word	0x00241300
    5484:	000052e9 	.word	0x000052e9

00005488 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5488:	b580      	push	{r7, lr}
    548a:	b082      	sub	sp, #8
    548c:	af00      	add	r7, sp, #0
    548e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	2102      	movs	r1, #2
    5496:	4618      	mov	r0, r3
    5498:	4b03      	ldr	r3, [pc, #12]	; (54a8 <_qspi_sync_enable+0x20>)
    549a:	4798      	blx	r3
	return ERR_NONE;
    549c:	2300      	movs	r3, #0
}
    549e:	4618      	mov	r0, r3
    54a0:	3708      	adds	r7, #8
    54a2:	46bd      	mov	sp, r7
    54a4:	bd80      	pop	{r7, pc}
    54a6:	bf00      	nop
    54a8:	000052b1 	.word	0x000052b1

000054ac <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	b082      	sub	sp, #8
    54b0:	af00      	add	r7, sp, #0
    54b2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    54b4:	687b      	ldr	r3, [r7, #4]
    54b6:	681b      	ldr	r3, [r3, #0]
    54b8:	2100      	movs	r1, #0
    54ba:	4618      	mov	r0, r3
    54bc:	4b03      	ldr	r3, [pc, #12]	; (54cc <_qspi_sync_disable+0x20>)
    54be:	4798      	blx	r3
	return ERR_NONE;
    54c0:	2300      	movs	r3, #0
}
    54c2:	4618      	mov	r0, r3
    54c4:	3708      	adds	r7, #8
    54c6:	46bd      	mov	sp, r7
    54c8:	bd80      	pop	{r7, pc}
    54ca:	bf00      	nop
    54cc:	000052b1 	.word	0x000052b1

000054d0 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    54d0:	b580      	push	{r7, lr}
    54d2:	b084      	sub	sp, #16
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
    54d8:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    54da:	687b      	ldr	r3, [r7, #4]
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    54e0:	683b      	ldr	r3, [r7, #0]
    54e2:	781b      	ldrb	r3, [r3, #0]
    54e4:	f003 0320 	and.w	r3, r3, #32
    54e8:	b2db      	uxtb	r3, r3
    54ea:	2b00      	cmp	r3, #0
    54ec:	d005      	beq.n	54fa <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    54ee:	683b      	ldr	r3, [r7, #0]
    54f0:	689b      	ldr	r3, [r3, #8]
    54f2:	4619      	mov	r1, r3
    54f4:	68f8      	ldr	r0, [r7, #12]
    54f6:	4b13      	ldr	r3, [pc, #76]	; (5544 <_qspi_sync_command_set_ifr+0x74>)
    54f8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    54fa:	683b      	ldr	r3, [r7, #0]
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	f003 0310 	and.w	r3, r3, #16
    5502:	b2db      	uxtb	r3, r3
    5504:	2b00      	cmp	r3, #0
    5506:	d005      	beq.n	5514 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5508:	683b      	ldr	r3, [r7, #0]
    550a:	791b      	ldrb	r3, [r3, #4]
    550c:	4619      	mov	r1, r3
    550e:	68f8      	ldr	r0, [r7, #12]
    5510:	4b0d      	ldr	r3, [pc, #52]	; (5548 <_qspi_sync_command_set_ifr+0x78>)
    5512:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5514:	683b      	ldr	r3, [r7, #0]
    5516:	781b      	ldrb	r3, [r3, #0]
    5518:	f003 0340 	and.w	r3, r3, #64	; 0x40
    551c:	b2db      	uxtb	r3, r3
    551e:	2b00      	cmp	r3, #0
    5520:	d005      	beq.n	552e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5522:	683b      	ldr	r3, [r7, #0]
    5524:	795b      	ldrb	r3, [r3, #5]
    5526:	4619      	mov	r1, r3
    5528:	68f8      	ldr	r0, [r7, #12]
    552a:	4b08      	ldr	r3, [pc, #32]	; (554c <_qspi_sync_command_set_ifr+0x7c>)
    552c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    552e:	683b      	ldr	r3, [r7, #0]
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	4619      	mov	r1, r3
    5534:	68f8      	ldr	r0, [r7, #12]
    5536:	4b06      	ldr	r3, [pc, #24]	; (5550 <_qspi_sync_command_set_ifr+0x80>)
    5538:	4798      	blx	r3
}
    553a:	bf00      	nop
    553c:	3710      	adds	r7, #16
    553e:	46bd      	mov	sp, r7
    5540:	bd80      	pop	{r7, pc}
    5542:	bf00      	nop
    5544:	00005305 	.word	0x00005305
    5548:	00005321 	.word	0x00005321
    554c:	00005355 	.word	0x00005355
    5550:	0000538d 	.word	0x0000538d

00005554 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5554:	b580      	push	{r7, lr}
    5556:	b084      	sub	sp, #16
    5558:	af00      	add	r7, sp, #0
    555a:	6078      	str	r0, [r7, #4]
    555c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	681b      	ldr	r3, [r3, #0]
    5562:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5564:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5568:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    556a:	683b      	ldr	r3, [r7, #0]
    556c:	781b      	ldrb	r3, [r3, #0]
    556e:	f003 0320 	and.w	r3, r3, #32
    5572:	b2db      	uxtb	r3, r3
    5574:	2b00      	cmp	r3, #0
    5576:	d004      	beq.n	5582 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5578:	683b      	ldr	r3, [r7, #0]
    557a:	689b      	ldr	r3, [r3, #8]
    557c:	68fa      	ldr	r2, [r7, #12]
    557e:	4413      	add	r3, r2
    5580:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5582:	68b8      	ldr	r0, [r7, #8]
    5584:	4b18      	ldr	r3, [pc, #96]	; (55e8 <_qspi_sync_run_transfer+0x94>)
    5586:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5588:	683b      	ldr	r3, [r7, #0]
    558a:	691b      	ldr	r3, [r3, #16]
    558c:	2b00      	cmp	r3, #0
    558e:	d103      	bne.n	5598 <_qspi_sync_run_transfer+0x44>
    5590:	683b      	ldr	r3, [r7, #0]
    5592:	695b      	ldr	r3, [r3, #20]
    5594:	2b00      	cmp	r3, #0
    5596:	d001      	beq.n	559c <_qspi_sync_run_transfer+0x48>
    5598:	2301      	movs	r3, #1
    559a:	e000      	b.n	559e <_qspi_sync_run_transfer+0x4a>
    559c:	2300      	movs	r3, #0
    559e:	f003 0301 	and.w	r3, r3, #1
    55a2:	b2db      	uxtb	r3, r3
    55a4:	2282      	movs	r2, #130	; 0x82
    55a6:	4911      	ldr	r1, [pc, #68]	; (55ec <_qspi_sync_run_transfer+0x98>)
    55a8:	4618      	mov	r0, r3
    55aa:	4b11      	ldr	r3, [pc, #68]	; (55f0 <_qspi_sync_run_transfer+0x9c>)
    55ac:	4798      	blx	r3

	if (cmd->tx_buf) {
    55ae:	683b      	ldr	r3, [r7, #0]
    55b0:	691b      	ldr	r3, [r3, #16]
    55b2:	2b00      	cmp	r3, #0
    55b4:	d008      	beq.n	55c8 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    55b6:	683b      	ldr	r3, [r7, #0]
    55b8:	6919      	ldr	r1, [r3, #16]
    55ba:	683b      	ldr	r3, [r7, #0]
    55bc:	68db      	ldr	r3, [r3, #12]
    55be:	461a      	mov	r2, r3
    55c0:	68f8      	ldr	r0, [r7, #12]
    55c2:	4b0c      	ldr	r3, [pc, #48]	; (55f4 <_qspi_sync_run_transfer+0xa0>)
    55c4:	4798      	blx	r3
    55c6:	e007      	b.n	55d8 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    55c8:	683b      	ldr	r3, [r7, #0]
    55ca:	6958      	ldr	r0, [r3, #20]
    55cc:	683b      	ldr	r3, [r7, #0]
    55ce:	68db      	ldr	r3, [r3, #12]
    55d0:	461a      	mov	r2, r3
    55d2:	68f9      	ldr	r1, [r7, #12]
    55d4:	4b07      	ldr	r3, [pc, #28]	; (55f4 <_qspi_sync_run_transfer+0xa0>)
    55d6:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    55d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    55dc:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    55e0:	bf00      	nop
    55e2:	3710      	adds	r7, #16
    55e4:	46bd      	mov	sp, r7
    55e6:	bd80      	pop	{r7, pc}
    55e8:	000053a9 	.word	0x000053a9
    55ec:	0000f000 	.word	0x0000f000
    55f0:	0000341d 	.word	0x0000341d
    55f4:	000053c1 	.word	0x000053c1

000055f8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	af00      	add	r7, sp, #0
    55fe:	6078      	str	r0, [r7, #4]
    5600:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5602:	6839      	ldr	r1, [r7, #0]
    5604:	6878      	ldr	r0, [r7, #4]
    5606:	4b14      	ldr	r3, [pc, #80]	; (5658 <_qspi_sync_serial_run_command+0x60>)
    5608:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    560a:	683b      	ldr	r3, [r7, #0]
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5612:	b2db      	uxtb	r3, r3
    5614:	2b00      	cmp	r3, #0
    5616:	d003      	beq.n	5620 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5618:	6839      	ldr	r1, [r7, #0]
    561a:	6878      	ldr	r0, [r7, #4]
    561c:	4b0f      	ldr	r3, [pc, #60]	; (565c <_qspi_sync_serial_run_command+0x64>)
    561e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5620:	687b      	ldr	r3, [r7, #4]
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	4618      	mov	r0, r3
    5626:	4b0e      	ldr	r3, [pc, #56]	; (5660 <_qspi_sync_serial_run_command+0x68>)
    5628:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    562a:	bf00      	nop
    562c:	687b      	ldr	r3, [r7, #4]
    562e:	681b      	ldr	r3, [r3, #0]
    5630:	4618      	mov	r0, r3
    5632:	4b0c      	ldr	r3, [pc, #48]	; (5664 <_qspi_sync_serial_run_command+0x6c>)
    5634:	4798      	blx	r3
    5636:	4603      	mov	r3, r0
    5638:	f083 0301 	eor.w	r3, r3, #1
    563c:	b2db      	uxtb	r3, r3
    563e:	2b00      	cmp	r3, #0
    5640:	d1f4      	bne.n	562c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5642:	687b      	ldr	r3, [r7, #4]
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	4618      	mov	r0, r3
    5648:	4b07      	ldr	r3, [pc, #28]	; (5668 <_qspi_sync_serial_run_command+0x70>)
    564a:	4798      	blx	r3
	return ERR_NONE;
    564c:	2300      	movs	r3, #0
}
    564e:	4618      	mov	r0, r3
    5650:	3708      	adds	r7, #8
    5652:	46bd      	mov	sp, r7
    5654:	bd80      	pop	{r7, pc}
    5656:	bf00      	nop
    5658:	000054d1 	.word	0x000054d1
    565c:	00005555 	.word	0x00005555
    5660:	000053f5 	.word	0x000053f5
    5664:	0000526d 	.word	0x0000526d
    5668:	00005295 	.word	0x00005295

0000566c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    566c:	b480      	push	{r7}
    566e:	b083      	sub	sp, #12
    5670:	af00      	add	r7, sp, #0
    5672:	6078      	str	r0, [r7, #4]
    5674:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5676:	bf00      	nop
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	691a      	ldr	r2, [r3, #16]
    567c:	683b      	ldr	r3, [r7, #0]
    567e:	4013      	ands	r3, r2
    5680:	2b00      	cmp	r3, #0
    5682:	d1f9      	bne.n	5678 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5684:	bf00      	nop
    5686:	370c      	adds	r7, #12
    5688:	46bd      	mov	sp, r7
    568a:	f85d 7b04 	ldr.w	r7, [sp], #4
    568e:	4770      	bx	lr

00005690 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5690:	b480      	push	{r7}
    5692:	b083      	sub	sp, #12
    5694:	af00      	add	r7, sp, #0
    5696:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	f44f 7280 	mov.w	r2, #256	; 0x100
    569e:	819a      	strh	r2, [r3, #12]
}
    56a0:	bf00      	nop
    56a2:	370c      	adds	r7, #12
    56a4:	46bd      	mov	sp, r7
    56a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56aa:	4770      	bx	lr

000056ac <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    56ac:	b480      	push	{r7}
    56ae:	b083      	sub	sp, #12
    56b0:	af00      	add	r7, sp, #0
    56b2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    56b4:	687b      	ldr	r3, [r7, #4]
    56b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    56ba:	819a      	strh	r2, [r3, #12]
}
    56bc:	bf00      	nop
    56be:	370c      	adds	r7, #12
    56c0:	46bd      	mov	sp, r7
    56c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c6:	4770      	bx	lr

000056c8 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    56c8:	b480      	push	{r7}
    56ca:	b083      	sub	sp, #12
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	899b      	ldrh	r3, [r3, #12]
    56d4:	b29b      	uxth	r3, r3
}
    56d6:	4618      	mov	r0, r3
    56d8:	370c      	adds	r7, #12
    56da:	46bd      	mov	sp, r7
    56dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    56e0:	4770      	bx	lr

000056e2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    56e2:	b480      	push	{r7}
    56e4:	b083      	sub	sp, #12
    56e6:	af00      	add	r7, sp, #0
    56e8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	895b      	ldrh	r3, [r3, #10]
    56ee:	b29b      	uxth	r3, r3
}
    56f0:	4618      	mov	r0, r3
    56f2:	370c      	adds	r7, #12
    56f4:	46bd      	mov	sp, r7
    56f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56fa:	4770      	bx	lr

000056fc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    56fc:	b580      	push	{r7, lr}
    56fe:	b082      	sub	sp, #8
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	881b      	ldrh	r3, [r3, #0]
    5708:	b29b      	uxth	r3, r3
    570a:	f043 0301 	orr.w	r3, r3, #1
    570e:	b29a      	uxth	r2, r3
    5710:	687b      	ldr	r3, [r7, #4]
    5712:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5714:	2101      	movs	r1, #1
    5716:	6878      	ldr	r0, [r7, #4]
    5718:	4b02      	ldr	r3, [pc, #8]	; (5724 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    571a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    571c:	bf00      	nop
    571e:	3708      	adds	r7, #8
    5720:	46bd      	mov	sp, r7
    5722:	bd80      	pop	{r7, pc}
    5724:	0000566d 	.word	0x0000566d

00005728 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5728:	b580      	push	{r7, lr}
    572a:	b084      	sub	sp, #16
    572c:	af00      	add	r7, sp, #0
    572e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5730:	f248 0103 	movw	r1, #32771	; 0x8003
    5734:	6878      	ldr	r0, [r7, #4]
    5736:	4b0a      	ldr	r3, [pc, #40]	; (5760 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5738:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    573a:	687b      	ldr	r3, [r7, #4]
    573c:	881b      	ldrh	r3, [r3, #0]
    573e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5740:	89fb      	ldrh	r3, [r7, #14]
    5742:	085b      	lsrs	r3, r3, #1
    5744:	b29b      	uxth	r3, r3
    5746:	f003 0301 	and.w	r3, r3, #1
    574a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    574c:	89fb      	ldrh	r3, [r7, #14]
    574e:	2b00      	cmp	r3, #0
    5750:	bf14      	ite	ne
    5752:	2301      	movne	r3, #1
    5754:	2300      	moveq	r3, #0
    5756:	b2db      	uxtb	r3, r3
}
    5758:	4618      	mov	r0, r3
    575a:	3710      	adds	r7, #16
    575c:	46bd      	mov	sp, r7
    575e:	bd80      	pop	{r7, pc}
    5760:	0000566d 	.word	0x0000566d

00005764 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	881b      	ldrh	r3, [r3, #0]
    5770:	b29b      	uxth	r3, r3
    5772:	f023 0302 	bic.w	r3, r3, #2
    5776:	b29a      	uxth	r2, r3
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    577c:	f248 0103 	movw	r1, #32771	; 0x8003
    5780:	6878      	ldr	r0, [r7, #4]
    5782:	4b03      	ldr	r3, [pc, #12]	; (5790 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5784:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5786:	bf00      	nop
    5788:	3708      	adds	r7, #8
    578a:	46bd      	mov	sp, r7
    578c:	bd80      	pop	{r7, pc}
    578e:	bf00      	nop
    5790:	0000566d 	.word	0x0000566d

00005794 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5794:	b580      	push	{r7, lr}
    5796:	b082      	sub	sp, #8
    5798:	af00      	add	r7, sp, #0
    579a:	6078      	str	r0, [r7, #4]
    579c:	460b      	mov	r3, r1
    579e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	887a      	ldrh	r2, [r7, #2]
    57a4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    57a6:	f248 0103 	movw	r1, #32771	; 0x8003
    57aa:	6878      	ldr	r0, [r7, #4]
    57ac:	4b02      	ldr	r3, [pc, #8]	; (57b8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    57ae:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    57b0:	bf00      	nop
    57b2:	3708      	adds	r7, #8
    57b4:	46bd      	mov	sp, r7
    57b6:	bd80      	pop	{r7, pc}
    57b8:	0000566d 	.word	0x0000566d

000057bc <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    57bc:	b480      	push	{r7}
    57be:	b083      	sub	sp, #12
    57c0:	af00      	add	r7, sp, #0
    57c2:	6078      	str	r0, [r7, #4]
    57c4:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    57c6:	687b      	ldr	r3, [r7, #4]
    57c8:	683a      	ldr	r2, [r7, #0]
    57ca:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    57cc:	bf00      	nop
    57ce:	370c      	adds	r7, #12
    57d0:	46bd      	mov	sp, r7
    57d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d6:	4770      	bx	lr

000057d8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    57d8:	b580      	push	{r7, lr}
    57da:	b082      	sub	sp, #8
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d005      	beq.n	57f2 <_calendar_init+0x1a>
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	2b00      	cmp	r3, #0
    57ec:	d001      	beq.n	57f2 <_calendar_init+0x1a>
    57ee:	2301      	movs	r3, #1
    57f0:	e000      	b.n	57f4 <_calendar_init+0x1c>
    57f2:	2300      	movs	r3, #0
    57f4:	f003 0301 	and.w	r3, r3, #1
    57f8:	b2db      	uxtb	r3, r3
    57fa:	222f      	movs	r2, #47	; 0x2f
    57fc:	491b      	ldr	r1, [pc, #108]	; (586c <_calendar_init+0x94>)
    57fe:	4618      	mov	r0, r3
    5800:	4b1b      	ldr	r3, [pc, #108]	; (5870 <_calendar_init+0x98>)
    5802:	4798      	blx	r3

	_rtc_dev = dev;
    5804:	4a1b      	ldr	r2, [pc, #108]	; (5874 <_calendar_init+0x9c>)
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	681b      	ldr	r3, [r3, #0]
    580e:	4618      	mov	r0, r3
    5810:	4b19      	ldr	r3, [pc, #100]	; (5878 <_calendar_init+0xa0>)
    5812:	4798      	blx	r3
    5814:	4603      	mov	r3, r0
    5816:	2b00      	cmp	r3, #0
    5818:	d00a      	beq.n	5830 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    581a:	687b      	ldr	r3, [r7, #4]
    581c:	681b      	ldr	r3, [r3, #0]
    581e:	4618      	mov	r0, r3
    5820:	4b16      	ldr	r3, [pc, #88]	; (587c <_calendar_init+0xa4>)
    5822:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5824:	687b      	ldr	r3, [r7, #4]
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	2102      	movs	r1, #2
    582a:	4618      	mov	r0, r3
    582c:	4b14      	ldr	r3, [pc, #80]	; (5880 <_calendar_init+0xa8>)
    582e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5830:	687b      	ldr	r3, [r7, #4]
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	4618      	mov	r0, r3
    5836:	4b13      	ldr	r3, [pc, #76]	; (5884 <_calendar_init+0xac>)
    5838:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    583a:	687b      	ldr	r3, [r7, #4]
    583c:	681b      	ldr	r3, [r3, #0]
    583e:	2101      	movs	r1, #1
    5840:	4618      	mov	r0, r3
    5842:	4b0f      	ldr	r3, [pc, #60]	; (5880 <_calendar_init+0xa8>)
    5844:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    584e:	4618      	mov	r0, r3
    5850:	4b0d      	ldr	r3, [pc, #52]	; (5888 <_calendar_init+0xb0>)
    5852:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5854:	687b      	ldr	r3, [r7, #4]
    5856:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5858:	2100      	movs	r1, #0
    585a:	4618      	mov	r0, r3
    585c:	4b0b      	ldr	r3, [pc, #44]	; (588c <_calendar_init+0xb4>)
    585e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5860:	2300      	movs	r3, #0
}
    5862:	4618      	mov	r0, r3
    5864:	3708      	adds	r7, #8
    5866:	46bd      	mov	sp, r7
    5868:	bd80      	pop	{r7, pc}
    586a:	bf00      	nop
    586c:	0000f018 	.word	0x0000f018
    5870:	0000341d 	.word	0x0000341d
    5874:	200009e8 	.word	0x200009e8
    5878:	00005729 	.word	0x00005729
    587c:	00005765 	.word	0x00005765
    5880:	0000566d 	.word	0x0000566d
    5884:	000056fd 	.word	0x000056fd
    5888:	00005795 	.word	0x00005795
    588c:	000057bd 	.word	0x000057bd

00005890 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5890:	b580      	push	{r7, lr}
    5892:	b084      	sub	sp, #16
    5894:	af00      	add	r7, sp, #0
    5896:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	4618      	mov	r0, r3
    589e:	4b19      	ldr	r3, [pc, #100]	; (5904 <_rtc_interrupt_handler+0x74>)
    58a0:	4798      	blx	r3
    58a2:	4603      	mov	r3, r0
    58a4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	4618      	mov	r0, r3
    58ac:	4b16      	ldr	r3, [pc, #88]	; (5908 <_rtc_interrupt_handler+0x78>)
    58ae:	4798      	blx	r3
    58b0:	4603      	mov	r3, r0
    58b2:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    58b4:	89fa      	ldrh	r2, [r7, #14]
    58b6:	89bb      	ldrh	r3, [r7, #12]
    58b8:	4013      	ands	r3, r2
    58ba:	b29b      	uxth	r3, r3
    58bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    58c0:	2b00      	cmp	r3, #0
    58c2:	d009      	beq.n	58d8 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	685b      	ldr	r3, [r3, #4]
    58c8:	6878      	ldr	r0, [r7, #4]
    58ca:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	4618      	mov	r0, r3
    58d2:	4b0e      	ldr	r3, [pc, #56]	; (590c <_rtc_interrupt_handler+0x7c>)
    58d4:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    58d6:	e010      	b.n	58fa <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    58d8:	89fa      	ldrh	r2, [r7, #14]
    58da:	89bb      	ldrh	r3, [r7, #12]
    58dc:	4013      	ands	r3, r2
    58de:	b29b      	uxth	r3, r3
    58e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    58e4:	2b00      	cmp	r3, #0
    58e6:	d008      	beq.n	58fa <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	689b      	ldr	r3, [r3, #8]
    58ec:	6878      	ldr	r0, [r7, #4]
    58ee:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	4618      	mov	r0, r3
    58f6:	4b06      	ldr	r3, [pc, #24]	; (5910 <_rtc_interrupt_handler+0x80>)
    58f8:	4798      	blx	r3
}
    58fa:	bf00      	nop
    58fc:	3710      	adds	r7, #16
    58fe:	46bd      	mov	sp, r7
    5900:	bd80      	pop	{r7, pc}
    5902:	bf00      	nop
    5904:	000056c9 	.word	0x000056c9
    5908:	000056e3 	.word	0x000056e3
    590c:	00005691 	.word	0x00005691
    5910:	000056ad 	.word	0x000056ad

00005914 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5914:	b580      	push	{r7, lr}
    5916:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5918:	4b03      	ldr	r3, [pc, #12]	; (5928 <RTC_Handler+0x14>)
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	4618      	mov	r0, r3
    591e:	4b03      	ldr	r3, [pc, #12]	; (592c <RTC_Handler+0x18>)
    5920:	4798      	blx	r3
}
    5922:	bf00      	nop
    5924:	bd80      	pop	{r7, pc}
    5926:	bf00      	nop
    5928:	200009e8 	.word	0x200009e8
    592c:	00005891 	.word	0x00005891

00005930 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5930:	b480      	push	{r7}
    5932:	b083      	sub	sp, #12
    5934:	af00      	add	r7, sp, #0
    5936:	6078      	str	r0, [r7, #4]
    5938:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    593a:	bf00      	nop
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	69da      	ldr	r2, [r3, #28]
    5940:	683b      	ldr	r3, [r7, #0]
    5942:	4013      	ands	r3, r2
    5944:	2b00      	cmp	r3, #0
    5946:	d1f9      	bne.n	593c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5948:	bf00      	nop
    594a:	370c      	adds	r7, #12
    594c:	46bd      	mov	sp, r7
    594e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5952:	4770      	bx	lr

00005954 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5954:	b480      	push	{r7}
    5956:	b083      	sub	sp, #12
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
    595c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	69da      	ldr	r2, [r3, #28]
    5962:	683b      	ldr	r3, [r7, #0]
    5964:	4013      	ands	r3, r2
    5966:	2b00      	cmp	r3, #0
    5968:	bf14      	ite	ne
    596a:	2301      	movne	r3, #1
    596c:	2300      	moveq	r3, #0
    596e:	b2db      	uxtb	r3, r3
}
    5970:	4618      	mov	r0, r3
    5972:	370c      	adds	r7, #12
    5974:	46bd      	mov	sp, r7
    5976:	f85d 7b04 	ldr.w	r7, [sp], #4
    597a:	4770      	bx	lr

0000597c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    597c:	b480      	push	{r7}
    597e:	b083      	sub	sp, #12
    5980:	af00      	add	r7, sp, #0
    5982:	6078      	str	r0, [r7, #4]
    5984:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5986:	bf00      	nop
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	69da      	ldr	r2, [r3, #28]
    598c:	683b      	ldr	r3, [r7, #0]
    598e:	4013      	ands	r3, r2
    5990:	2b00      	cmp	r3, #0
    5992:	d1f9      	bne.n	5988 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5994:	bf00      	nop
    5996:	370c      	adds	r7, #12
    5998:	46bd      	mov	sp, r7
    599a:	f85d 7b04 	ldr.w	r7, [sp], #4
    599e:	4770      	bx	lr

000059a0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    59a0:	b480      	push	{r7}
    59a2:	b083      	sub	sp, #12
    59a4:	af00      	add	r7, sp, #0
    59a6:	6078      	str	r0, [r7, #4]
    59a8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    59aa:	687b      	ldr	r3, [r7, #4]
    59ac:	69da      	ldr	r2, [r3, #28]
    59ae:	683b      	ldr	r3, [r7, #0]
    59b0:	4013      	ands	r3, r2
    59b2:	2b00      	cmp	r3, #0
    59b4:	bf14      	ite	ne
    59b6:	2301      	movne	r3, #1
    59b8:	2300      	moveq	r3, #0
    59ba:	b2db      	uxtb	r3, r3
}
    59bc:	4618      	mov	r0, r3
    59be:	370c      	adds	r7, #12
    59c0:	46bd      	mov	sp, r7
    59c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    59c6:	4770      	bx	lr

000059c8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    59c8:	b480      	push	{r7}
    59ca:	b083      	sub	sp, #12
    59cc:	af00      	add	r7, sp, #0
    59ce:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	2201      	movs	r2, #1
    59d4:	761a      	strb	r2, [r3, #24]
}
    59d6:	bf00      	nop
    59d8:	370c      	adds	r7, #12
    59da:	46bd      	mov	sp, r7
    59dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e0:	4770      	bx	lr

000059e2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    59e2:	b480      	push	{r7}
    59e4:	b083      	sub	sp, #12
    59e6:	af00      	add	r7, sp, #0
    59e8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    59ea:	687b      	ldr	r3, [r7, #4]
    59ec:	2202      	movs	r2, #2
    59ee:	761a      	strb	r2, [r3, #24]
}
    59f0:	bf00      	nop
    59f2:	370c      	adds	r7, #12
    59f4:	46bd      	mov	sp, r7
    59f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fa:	4770      	bx	lr

000059fc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    59fc:	b480      	push	{r7}
    59fe:	b083      	sub	sp, #12
    5a00:	af00      	add	r7, sp, #0
    5a02:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	7e1b      	ldrb	r3, [r3, #24]
    5a08:	b2db      	uxtb	r3, r3
}
    5a0a:	4618      	mov	r0, r3
    5a0c:	370c      	adds	r7, #12
    5a0e:	46bd      	mov	sp, r7
    5a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a14:	4770      	bx	lr

00005a16 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5a16:	b480      	push	{r7}
    5a18:	b085      	sub	sp, #20
    5a1a:	af00      	add	r7, sp, #0
    5a1c:	6078      	str	r0, [r7, #4]
    5a1e:	460b      	mov	r3, r1
    5a20:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	7e1b      	ldrb	r3, [r3, #24]
    5a26:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5a28:	7bfa      	ldrb	r2, [r7, #15]
    5a2a:	78fb      	ldrb	r3, [r7, #3]
    5a2c:	4013      	ands	r3, r2
    5a2e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5a30:	7bfb      	ldrb	r3, [r7, #15]
}
    5a32:	4618      	mov	r0, r3
    5a34:	3714      	adds	r7, #20
    5a36:	46bd      	mov	sp, r7
    5a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3c:	4770      	bx	lr

00005a3e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5a3e:	b480      	push	{r7}
    5a40:	b083      	sub	sp, #12
    5a42:	af00      	add	r7, sp, #0
    5a44:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	7e1b      	ldrb	r3, [r3, #24]
    5a4a:	b2db      	uxtb	r3, r3
}
    5a4c:	4618      	mov	r0, r3
    5a4e:	370c      	adds	r7, #12
    5a50:	46bd      	mov	sp, r7
    5a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a56:	4770      	bx	lr

00005a58 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5a58:	b480      	push	{r7}
    5a5a:	b083      	sub	sp, #12
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	6078      	str	r0, [r7, #4]
    5a60:	460b      	mov	r3, r1
    5a62:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	78fa      	ldrb	r2, [r7, #3]
    5a68:	761a      	strb	r2, [r3, #24]
}
    5a6a:	bf00      	nop
    5a6c:	370c      	adds	r7, #12
    5a6e:	46bd      	mov	sp, r7
    5a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a74:	4770      	bx	lr
	...

00005a78 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	b082      	sub	sp, #8
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	681b      	ldr	r3, [r3, #0]
    5a84:	f043 0202 	orr.w	r2, r3, #2
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a8c:	2103      	movs	r1, #3
    5a8e:	6878      	ldr	r0, [r7, #4]
    5a90:	4b02      	ldr	r3, [pc, #8]	; (5a9c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5a92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a94:	bf00      	nop
    5a96:	3708      	adds	r7, #8
    5a98:	46bd      	mov	sp, r7
    5a9a:	bd80      	pop	{r7, pc}
    5a9c:	00005931 	.word	0x00005931

00005aa0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5aa0:	b580      	push	{r7, lr}
    5aa2:	b082      	sub	sp, #8
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	681b      	ldr	r3, [r3, #0]
    5aac:	f023 0202 	bic.w	r2, r3, #2
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ab4:	2103      	movs	r1, #3
    5ab6:	6878      	ldr	r0, [r7, #4]
    5ab8:	4b02      	ldr	r3, [pc, #8]	; (5ac4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5aba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5abc:	bf00      	nop
    5abe:	3708      	adds	r7, #8
    5ac0:	46bd      	mov	sp, r7
    5ac2:	bd80      	pop	{r7, pc}
    5ac4:	00005931 	.word	0x00005931

00005ac8 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5ac8:	b480      	push	{r7}
    5aca:	b085      	sub	sp, #20
    5acc:	af00      	add	r7, sp, #0
    5ace:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5ad6:	68fb      	ldr	r3, [r7, #12]
    5ad8:	0edb      	lsrs	r3, r3, #27
    5ada:	f003 0301 	and.w	r3, r3, #1
    5ade:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5ae0:	68fb      	ldr	r3, [r7, #12]
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	bf14      	ite	ne
    5ae6:	2301      	movne	r3, #1
    5ae8:	2300      	moveq	r3, #0
    5aea:	b2db      	uxtb	r3, r3
}
    5aec:	4618      	mov	r0, r3
    5aee:	3714      	adds	r7, #20
    5af0:	46bd      	mov	sp, r7
    5af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af6:	4770      	bx	lr

00005af8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5af8:	b580      	push	{r7, lr}
    5afa:	b084      	sub	sp, #16
    5afc:	af00      	add	r7, sp, #0
    5afe:	6078      	str	r0, [r7, #4]
    5b00:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5b02:	2103      	movs	r1, #3
    5b04:	6878      	ldr	r0, [r7, #4]
    5b06:	4b07      	ldr	r3, [pc, #28]	; (5b24 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5b08:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5b0a:	687b      	ldr	r3, [r7, #4]
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b10:	68fa      	ldr	r2, [r7, #12]
    5b12:	683b      	ldr	r3, [r7, #0]
    5b14:	4013      	ands	r3, r2
    5b16:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b18:	68fb      	ldr	r3, [r7, #12]
}
    5b1a:	4618      	mov	r0, r3
    5b1c:	3710      	adds	r7, #16
    5b1e:	46bd      	mov	sp, r7
    5b20:	bd80      	pop	{r7, pc}
    5b22:	bf00      	nop
    5b24:	00005931 	.word	0x00005931

00005b28 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5b28:	b580      	push	{r7, lr}
    5b2a:	b082      	sub	sp, #8
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	6078      	str	r0, [r7, #4]
    5b30:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5b32:	687b      	ldr	r3, [r7, #4]
    5b34:	683a      	ldr	r2, [r7, #0]
    5b36:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5b38:	2103      	movs	r1, #3
    5b3a:	6878      	ldr	r0, [r7, #4]
    5b3c:	4b02      	ldr	r3, [pc, #8]	; (5b48 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5b3e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b40:	bf00      	nop
    5b42:	3708      	adds	r7, #8
    5b44:	46bd      	mov	sp, r7
    5b46:	bd80      	pop	{r7, pc}
    5b48:	00005931 	.word	0x00005931

00005b4c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b084      	sub	sp, #16
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b54:	2103      	movs	r1, #3
    5b56:	6878      	ldr	r0, [r7, #4]
    5b58:	4b09      	ldr	r3, [pc, #36]	; (5b80 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5b5a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5b62:	68fb      	ldr	r3, [r7, #12]
    5b64:	085b      	lsrs	r3, r3, #1
    5b66:	f003 0301 	and.w	r3, r3, #1
    5b6a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5b6c:	68fb      	ldr	r3, [r7, #12]
    5b6e:	2b00      	cmp	r3, #0
    5b70:	bf14      	ite	ne
    5b72:	2301      	movne	r3, #1
    5b74:	2300      	moveq	r3, #0
    5b76:	b2db      	uxtb	r3, r3
}
    5b78:	4618      	mov	r0, r3
    5b7a:	3710      	adds	r7, #16
    5b7c:	46bd      	mov	sp, r7
    5b7e:	bd80      	pop	{r7, pc}
    5b80:	0000597d 	.word	0x0000597d

00005b84 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5b84:	b580      	push	{r7, lr}
    5b86:	b082      	sub	sp, #8
    5b88:	af00      	add	r7, sp, #0
    5b8a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	681b      	ldr	r3, [r3, #0]
    5b90:	f023 0202 	bic.w	r2, r3, #2
    5b94:	687b      	ldr	r3, [r7, #4]
    5b96:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b98:	2103      	movs	r1, #3
    5b9a:	6878      	ldr	r0, [r7, #4]
    5b9c:	4b02      	ldr	r3, [pc, #8]	; (5ba8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5b9e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ba0:	bf00      	nop
    5ba2:	3708      	adds	r7, #8
    5ba4:	46bd      	mov	sp, r7
    5ba6:	bd80      	pop	{r7, pc}
    5ba8:	0000597d 	.word	0x0000597d

00005bac <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5bac:	b580      	push	{r7, lr}
    5bae:	b084      	sub	sp, #16
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
    5bb4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5bb6:	2103      	movs	r1, #3
    5bb8:	6878      	ldr	r0, [r7, #4]
    5bba:	4b07      	ldr	r3, [pc, #28]	; (5bd8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5bbc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5bc4:	68fa      	ldr	r2, [r7, #12]
    5bc6:	683b      	ldr	r3, [r7, #0]
    5bc8:	4013      	ands	r3, r2
    5bca:	60fb      	str	r3, [r7, #12]
	return tmp;
    5bcc:	68fb      	ldr	r3, [r7, #12]
}
    5bce:	4618      	mov	r0, r3
    5bd0:	3710      	adds	r7, #16
    5bd2:	46bd      	mov	sp, r7
    5bd4:	bd80      	pop	{r7, pc}
    5bd6:	bf00      	nop
    5bd8:	0000597d 	.word	0x0000597d

00005bdc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5bdc:	b580      	push	{r7, lr}
    5bde:	b082      	sub	sp, #8
    5be0:	af00      	add	r7, sp, #0
    5be2:	6078      	str	r0, [r7, #4]
    5be4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	683a      	ldr	r2, [r7, #0]
    5bea:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5bec:	2103      	movs	r1, #3
    5bee:	6878      	ldr	r0, [r7, #4]
    5bf0:	4b02      	ldr	r3, [pc, #8]	; (5bfc <hri_sercomspi_write_CTRLA_reg+0x20>)
    5bf2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bf4:	bf00      	nop
    5bf6:	3708      	adds	r7, #8
    5bf8:	46bd      	mov	sp, r7
    5bfa:	bd80      	pop	{r7, pc}
    5bfc:	0000597d 	.word	0x0000597d

00005c00 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5c00:	b580      	push	{r7, lr}
    5c02:	b082      	sub	sp, #8
    5c04:	af00      	add	r7, sp, #0
    5c06:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	685b      	ldr	r3, [r3, #4]
    5c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c14:	2104      	movs	r1, #4
    5c16:	6878      	ldr	r0, [r7, #4]
    5c18:	4b02      	ldr	r3, [pc, #8]	; (5c24 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5c1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c1c:	bf00      	nop
    5c1e:	3708      	adds	r7, #8
    5c20:	46bd      	mov	sp, r7
    5c22:	bd80      	pop	{r7, pc}
    5c24:	00005931 	.word	0x00005931

00005c28 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b082      	sub	sp, #8
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	685b      	ldr	r3, [r3, #4]
    5c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c3c:	2104      	movs	r1, #4
    5c3e:	6878      	ldr	r0, [r7, #4]
    5c40:	4b02      	ldr	r3, [pc, #8]	; (5c4c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5c42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c44:	bf00      	nop
    5c46:	3708      	adds	r7, #8
    5c48:	46bd      	mov	sp, r7
    5c4a:	bd80      	pop	{r7, pc}
    5c4c:	00005931 	.word	0x00005931

00005c50 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5c50:	b580      	push	{r7, lr}
    5c52:	b082      	sub	sp, #8
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	685b      	ldr	r3, [r3, #4]
    5c5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c64:	2104      	movs	r1, #4
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	4b02      	ldr	r3, [pc, #8]	; (5c74 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5c6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c6c:	bf00      	nop
    5c6e:	3708      	adds	r7, #8
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}
    5c74:	00005931 	.word	0x00005931

00005c78 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	b082      	sub	sp, #8
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	685b      	ldr	r3, [r3, #4]
    5c84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c8c:	2104      	movs	r1, #4
    5c8e:	6878      	ldr	r0, [r7, #4]
    5c90:	4b02      	ldr	r3, [pc, #8]	; (5c9c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5c92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c94:	bf00      	nop
    5c96:	3708      	adds	r7, #8
    5c98:	46bd      	mov	sp, r7
    5c9a:	bd80      	pop	{r7, pc}
    5c9c:	00005931 	.word	0x00005931

00005ca0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5ca0:	b580      	push	{r7, lr}
    5ca2:	b082      	sub	sp, #8
    5ca4:	af00      	add	r7, sp, #0
    5ca6:	6078      	str	r0, [r7, #4]
    5ca8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	685a      	ldr	r2, [r3, #4]
    5cae:	683b      	ldr	r3, [r7, #0]
    5cb0:	041b      	lsls	r3, r3, #16
    5cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5cb6:	431a      	orrs	r2, r3
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cbc:	2104      	movs	r1, #4
    5cbe:	6878      	ldr	r0, [r7, #4]
    5cc0:	4b02      	ldr	r3, [pc, #8]	; (5ccc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5cc2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cc4:	bf00      	nop
    5cc6:	3708      	adds	r7, #8
    5cc8:	46bd      	mov	sp, r7
    5cca:	bd80      	pop	{r7, pc}
    5ccc:	00005931 	.word	0x00005931

00005cd0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5cd0:	b580      	push	{r7, lr}
    5cd2:	b082      	sub	sp, #8
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	6078      	str	r0, [r7, #4]
    5cd8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	683a      	ldr	r2, [r7, #0]
    5cde:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ce0:	2104      	movs	r1, #4
    5ce2:	6878      	ldr	r0, [r7, #4]
    5ce4:	4b02      	ldr	r3, [pc, #8]	; (5cf0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5ce6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ce8:	bf00      	nop
    5cea:	3708      	adds	r7, #8
    5cec:	46bd      	mov	sp, r7
    5cee:	bd80      	pop	{r7, pc}
    5cf0:	00005931 	.word	0x00005931

00005cf4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	b082      	sub	sp, #8
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
    5cfc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5cfe:	687b      	ldr	r3, [r7, #4]
    5d00:	683a      	ldr	r2, [r7, #0]
    5d02:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5d04:	2117      	movs	r1, #23
    5d06:	6878      	ldr	r0, [r7, #4]
    5d08:	4b02      	ldr	r3, [pc, #8]	; (5d14 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5d0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d0c:	bf00      	nop
    5d0e:	3708      	adds	r7, #8
    5d10:	46bd      	mov	sp, r7
    5d12:	bd80      	pop	{r7, pc}
    5d14:	0000597d 	.word	0x0000597d

00005d18 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5d18:	b480      	push	{r7}
    5d1a:	b083      	sub	sp, #12
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	6078      	str	r0, [r7, #4]
    5d20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	683a      	ldr	r2, [r7, #0]
    5d26:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d28:	bf00      	nop
    5d2a:	370c      	adds	r7, #12
    5d2c:	46bd      	mov	sp, r7
    5d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d32:	4770      	bx	lr

00005d34 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5d34:	b480      	push	{r7}
    5d36:	b083      	sub	sp, #12
    5d38:	af00      	add	r7, sp, #0
    5d3a:	6078      	str	r0, [r7, #4]
    5d3c:	460b      	mov	r3, r1
    5d3e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5d40:	687b      	ldr	r3, [r7, #4]
    5d42:	78fa      	ldrb	r2, [r7, #3]
    5d44:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d46:	bf00      	nop
    5d48:	370c      	adds	r7, #12
    5d4a:	46bd      	mov	sp, r7
    5d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d50:	4770      	bx	lr
	...

00005d54 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	b084      	sub	sp, #16
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
    5d5c:	460b      	mov	r3, r1
    5d5e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d64:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5d66:	68fb      	ldr	r3, [r7, #12]
    5d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5d6c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5d6e:	78fb      	ldrb	r3, [r7, #3]
    5d70:	039b      	lsls	r3, r3, #14
    5d72:	461a      	mov	r2, r3
    5d74:	68fb      	ldr	r3, [r7, #12]
    5d76:	4313      	orrs	r3, r2
    5d78:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	68fa      	ldr	r2, [r7, #12]
    5d7e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d80:	2104      	movs	r1, #4
    5d82:	6878      	ldr	r0, [r7, #4]
    5d84:	4b02      	ldr	r3, [pc, #8]	; (5d90 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5d86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d88:	bf00      	nop
    5d8a:	3710      	adds	r7, #16
    5d8c:	46bd      	mov	sp, r7
    5d8e:	bd80      	pop	{r7, pc}
    5d90:	00005931 	.word	0x00005931

00005d94 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5d94:	b580      	push	{r7, lr}
    5d96:	b082      	sub	sp, #8
    5d98:	af00      	add	r7, sp, #0
    5d9a:	6078      	str	r0, [r7, #4]
    5d9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5d9e:	687b      	ldr	r3, [r7, #4]
    5da0:	683a      	ldr	r2, [r7, #0]
    5da2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5da4:	2104      	movs	r1, #4
    5da6:	6878      	ldr	r0, [r7, #4]
    5da8:	4b02      	ldr	r3, [pc, #8]	; (5db4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5daa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dac:	bf00      	nop
    5dae:	3708      	adds	r7, #8
    5db0:	46bd      	mov	sp, r7
    5db2:	bd80      	pop	{r7, pc}
    5db4:	00005931 	.word	0x00005931

00005db8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5db8:	b580      	push	{r7, lr}
    5dba:	b082      	sub	sp, #8
    5dbc:	af00      	add	r7, sp, #0
    5dbe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dc0:	2104      	movs	r1, #4
    5dc2:	6878      	ldr	r0, [r7, #4]
    5dc4:	4b03      	ldr	r3, [pc, #12]	; (5dd4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5dc6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5dcc:	4618      	mov	r0, r3
    5dce:	3708      	adds	r7, #8
    5dd0:	46bd      	mov	sp, r7
    5dd2:	bd80      	pop	{r7, pc}
    5dd4:	00005931 	.word	0x00005931

00005dd8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5dd8:	b480      	push	{r7}
    5dda:	b083      	sub	sp, #12
    5ddc:	af00      	add	r7, sp, #0
    5dde:	6078      	str	r0, [r7, #4]
    5de0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5de2:	687b      	ldr	r3, [r7, #4]
    5de4:	683a      	ldr	r2, [r7, #0]
    5de6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5de8:	bf00      	nop
    5dea:	370c      	adds	r7, #12
    5dec:	46bd      	mov	sp, r7
    5dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df2:	4770      	bx	lr

00005df4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5df4:	b580      	push	{r7, lr}
    5df6:	b082      	sub	sp, #8
    5df8:	af00      	add	r7, sp, #0
    5dfa:	6078      	str	r0, [r7, #4]
    5dfc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5dfe:	687b      	ldr	r3, [r7, #4]
    5e00:	683a      	ldr	r2, [r7, #0]
    5e02:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e04:	2104      	movs	r1, #4
    5e06:	6878      	ldr	r0, [r7, #4]
    5e08:	4b02      	ldr	r3, [pc, #8]	; (5e14 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5e0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e0c:	bf00      	nop
    5e0e:	3708      	adds	r7, #8
    5e10:	46bd      	mov	sp, r7
    5e12:	bd80      	pop	{r7, pc}
    5e14:	00005931 	.word	0x00005931

00005e18 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5e18:	b580      	push	{r7, lr}
    5e1a:	b082      	sub	sp, #8
    5e1c:	af00      	add	r7, sp, #0
    5e1e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e20:	2104      	movs	r1, #4
    5e22:	6878      	ldr	r0, [r7, #4]
    5e24:	4b03      	ldr	r3, [pc, #12]	; (5e34 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5e26:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5e28:	687b      	ldr	r3, [r7, #4]
    5e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5e2c:	4618      	mov	r0, r3
    5e2e:	3708      	adds	r7, #8
    5e30:	46bd      	mov	sp, r7
    5e32:	bd80      	pop	{r7, pc}
    5e34:	00005931 	.word	0x00005931

00005e38 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5e38:	b480      	push	{r7}
    5e3a:	b083      	sub	sp, #12
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
    5e40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	683a      	ldr	r2, [r7, #0]
    5e46:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e48:	bf00      	nop
    5e4a:	370c      	adds	r7, #12
    5e4c:	46bd      	mov	sp, r7
    5e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e52:	4770      	bx	lr

00005e54 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5e54:	b480      	push	{r7}
    5e56:	b083      	sub	sp, #12
    5e58:	af00      	add	r7, sp, #0
    5e5a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5e60:	4618      	mov	r0, r3
    5e62:	370c      	adds	r7, #12
    5e64:	46bd      	mov	sp, r7
    5e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e6a:	4770      	bx	lr

00005e6c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5e6c:	b480      	push	{r7}
    5e6e:	b083      	sub	sp, #12
    5e70:	af00      	add	r7, sp, #0
    5e72:	6078      	str	r0, [r7, #4]
    5e74:	460b      	mov	r3, r1
    5e76:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5e78:	687b      	ldr	r3, [r7, #4]
    5e7a:	78fa      	ldrb	r2, [r7, #3]
    5e7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e80:	bf00      	nop
    5e82:	370c      	adds	r7, #12
    5e84:	46bd      	mov	sp, r7
    5e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e8a:	4770      	bx	lr

00005e8c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5e8c:	b480      	push	{r7}
    5e8e:	b083      	sub	sp, #12
    5e90:	af00      	add	r7, sp, #0
    5e92:	6078      	str	r0, [r7, #4]
    5e94:	460b      	mov	r3, r1
    5e96:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	887a      	ldrh	r2, [r7, #2]
    5e9c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e9e:	bf00      	nop
    5ea0:	370c      	adds	r7, #12
    5ea2:	46bd      	mov	sp, r7
    5ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ea8:	4770      	bx	lr
	...

00005eac <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    5eac:	b580      	push	{r7, lr}
    5eae:	b082      	sub	sp, #8
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5eb4:	2104      	movs	r1, #4
    5eb6:	6878      	ldr	r0, [r7, #4]
    5eb8:	4b06      	ldr	r3, [pc, #24]	; (5ed4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    5eba:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	8b5b      	ldrh	r3, [r3, #26]
    5ec0:	b29b      	uxth	r3, r3
    5ec2:	091b      	lsrs	r3, r3, #4
    5ec4:	b29b      	uxth	r3, r3
    5ec6:	f003 0303 	and.w	r3, r3, #3
    5eca:	b29b      	uxth	r3, r3
}
    5ecc:	4618      	mov	r0, r3
    5ece:	3708      	adds	r7, #8
    5ed0:	46bd      	mov	sp, r7
    5ed2:	bd80      	pop	{r7, pc}
    5ed4:	00005931 	.word	0x00005931

00005ed8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5ed8:	b580      	push	{r7, lr}
    5eda:	b082      	sub	sp, #8
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ee0:	2104      	movs	r1, #4
    5ee2:	6878      	ldr	r0, [r7, #4]
    5ee4:	4b04      	ldr	r3, [pc, #16]	; (5ef8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5ee6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	8b5b      	ldrh	r3, [r3, #26]
    5eec:	b29b      	uxth	r3, r3
}
    5eee:	4618      	mov	r0, r3
    5ef0:	3708      	adds	r7, #8
    5ef2:	46bd      	mov	sp, r7
    5ef4:	bd80      	pop	{r7, pc}
    5ef6:	bf00      	nop
    5ef8:	00005931 	.word	0x00005931

00005efc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    5efc:	b580      	push	{r7, lr}
    5efe:	b082      	sub	sp, #8
    5f00:	af00      	add	r7, sp, #0
    5f02:	6078      	str	r0, [r7, #4]
    5f04:	460b      	mov	r3, r1
    5f06:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	887a      	ldrh	r2, [r7, #2]
    5f0c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f0e:	2104      	movs	r1, #4
    5f10:	6878      	ldr	r0, [r7, #4]
    5f12:	4b03      	ldr	r3, [pc, #12]	; (5f20 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    5f14:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f16:	bf00      	nop
    5f18:	3708      	adds	r7, #8
    5f1a:	46bd      	mov	sp, r7
    5f1c:	bd80      	pop	{r7, pc}
    5f1e:	bf00      	nop
    5f20:	00005931 	.word	0x00005931

00005f24 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5f24:	b4b0      	push	{r4, r5, r7}
    5f26:	b08d      	sub	sp, #52	; 0x34
    5f28:	af00      	add	r7, sp, #0
    5f2a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5f2c:	4b13      	ldr	r3, [pc, #76]	; (5f7c <_sercom_get_hardware_index+0x58>)
    5f2e:	f107 040c 	add.w	r4, r7, #12
    5f32:	461d      	mov	r5, r3
    5f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f40:	2300      	movs	r3, #0
    5f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    5f44:	e010      	b.n	5f68 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f48:	009b      	lsls	r3, r3, #2
    5f4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5f4e:	4413      	add	r3, r2
    5f50:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5f54:	461a      	mov	r2, r3
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	429a      	cmp	r2, r3
    5f5a:	d102      	bne.n	5f62 <_sercom_get_hardware_index+0x3e>
			return i;
    5f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f5e:	b2db      	uxtb	r3, r3
    5f60:	e006      	b.n	5f70 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f64:	3301      	adds	r3, #1
    5f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    5f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f6a:	2b07      	cmp	r3, #7
    5f6c:	d9eb      	bls.n	5f46 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5f6e:	2300      	movs	r3, #0
}
    5f70:	4618      	mov	r0, r3
    5f72:	3734      	adds	r7, #52	; 0x34
    5f74:	46bd      	mov	sp, r7
    5f76:	bcb0      	pop	{r4, r5, r7}
    5f78:	4770      	bx	lr
    5f7a:	bf00      	nop
    5f7c:	0000f04c 	.word	0x0000f04c

00005f80 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5f80:	b580      	push	{r7, lr}
    5f82:	b084      	sub	sp, #16
    5f84:	af00      	add	r7, sp, #0
    5f86:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5f88:	6878      	ldr	r0, [r7, #4]
    5f8a:	4b13      	ldr	r3, [pc, #76]	; (5fd8 <_get_i2cm_index+0x58>)
    5f8c:	4798      	blx	r3
    5f8e:	4603      	mov	r3, r0
    5f90:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f92:	2300      	movs	r3, #0
    5f94:	73fb      	strb	r3, [r7, #15]
    5f96:	e010      	b.n	5fba <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5f98:	7bfa      	ldrb	r2, [r7, #15]
    5f9a:	4910      	ldr	r1, [pc, #64]	; (5fdc <_get_i2cm_index+0x5c>)
    5f9c:	4613      	mov	r3, r2
    5f9e:	005b      	lsls	r3, r3, #1
    5fa0:	4413      	add	r3, r2
    5fa2:	00db      	lsls	r3, r3, #3
    5fa4:	440b      	add	r3, r1
    5fa6:	781b      	ldrb	r3, [r3, #0]
    5fa8:	7bba      	ldrb	r2, [r7, #14]
    5faa:	429a      	cmp	r2, r3
    5fac:	d102      	bne.n	5fb4 <_get_i2cm_index+0x34>
			return i;
    5fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5fb2:	e00d      	b.n	5fd0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5fb4:	7bfb      	ldrb	r3, [r7, #15]
    5fb6:	3301      	adds	r3, #1
    5fb8:	73fb      	strb	r3, [r7, #15]
    5fba:	7bfb      	ldrb	r3, [r7, #15]
    5fbc:	2b02      	cmp	r3, #2
    5fbe:	d9eb      	bls.n	5f98 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5fc0:	f240 32a6 	movw	r2, #934	; 0x3a6
    5fc4:	4906      	ldr	r1, [pc, #24]	; (5fe0 <_get_i2cm_index+0x60>)
    5fc6:	2000      	movs	r0, #0
    5fc8:	4b06      	ldr	r3, [pc, #24]	; (5fe4 <_get_i2cm_index+0x64>)
    5fca:	4798      	blx	r3
	return -1;
    5fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
    5fd0:	4618      	mov	r0, r3
    5fd2:	3710      	adds	r7, #16
    5fd4:	46bd      	mov	sp, r7
    5fd6:	bd80      	pop	{r7, pc}
    5fd8:	00005f25 	.word	0x00005f25
    5fdc:	20000018 	.word	0x20000018
    5fe0:	0000f030 	.word	0x0000f030
    5fe4:	0000341d 	.word	0x0000341d

00005fe8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5fe8:	b580      	push	{r7, lr}
    5fea:	b082      	sub	sp, #8
    5fec:	af00      	add	r7, sp, #0
    5fee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5ff0:	2103      	movs	r1, #3
    5ff2:	6878      	ldr	r0, [r7, #4]
    5ff4:	4b02      	ldr	r3, [pc, #8]	; (6000 <_sercom_i2c_send_stop+0x18>)
    5ff6:	4798      	blx	r3
}
    5ff8:	bf00      	nop
    5ffa:	3708      	adds	r7, #8
    5ffc:	46bd      	mov	sp, r7
    5ffe:	bd80      	pop	{r7, pc}
    6000:	00005ca1 	.word	0x00005ca1

00006004 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6004:	b590      	push	{r4, r7, lr}
    6006:	b087      	sub	sp, #28
    6008:	af00      	add	r7, sp, #0
    600a:	60f8      	str	r0, [r7, #12]
    600c:	60b9      	str	r1, [r7, #8]
    600e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6010:	68f8      	ldr	r0, [r7, #12]
    6012:	4b7d      	ldr	r3, [pc, #500]	; (6208 <_sercom_i2c_sync_analyse_flags+0x204>)
    6014:	4798      	blx	r3
    6016:	4603      	mov	r3, r0
    6018:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    601a:	68f8      	ldr	r0, [r7, #12]
    601c:	4b7b      	ldr	r3, [pc, #492]	; (620c <_sercom_i2c_sync_analyse_flags+0x208>)
    601e:	4798      	blx	r3
    6020:	4603      	mov	r3, r0
    6022:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6024:	68bb      	ldr	r3, [r7, #8]
    6026:	f003 0301 	and.w	r3, r3, #1
    602a:	2b00      	cmp	r3, #0
    602c:	f000 8095 	beq.w	615a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6030:	8a7b      	ldrh	r3, [r7, #18]
    6032:	f003 0302 	and.w	r3, r3, #2
    6036:	2b00      	cmp	r3, #0
    6038:	d01d      	beq.n	6076 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    603a:	68f8      	ldr	r0, [r7, #12]
    603c:	4b74      	ldr	r3, [pc, #464]	; (6210 <_sercom_i2c_sync_analyse_flags+0x20c>)
    603e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	885b      	ldrh	r3, [r3, #2]
    6044:	b29b      	uxth	r3, r3
    6046:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    604a:	b29a      	uxth	r2, r3
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	885b      	ldrh	r3, [r3, #2]
    6054:	b29b      	uxth	r3, r3
    6056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    605a:	b29a      	uxth	r2, r3
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6060:	8a7b      	ldrh	r3, [r7, #18]
    6062:	f003 0301 	and.w	r3, r3, #1
    6066:	2b00      	cmp	r3, #0
    6068:	d002      	beq.n	6070 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    606a:	f06f 0304 	mvn.w	r3, #4
    606e:	e0c6      	b.n	61fe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6070:	f06f 0303 	mvn.w	r3, #3
    6074:	e0c3      	b.n	61fe <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6076:	8a7b      	ldrh	r3, [r7, #18]
    6078:	f003 0304 	and.w	r3, r3, #4
    607c:	2b00      	cmp	r3, #0
    607e:	d01f      	beq.n	60c0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6080:	687b      	ldr	r3, [r7, #4]
    6082:	685b      	ldr	r3, [r3, #4]
    6084:	2b00      	cmp	r3, #0
    6086:	dd07      	ble.n	6098 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	885b      	ldrh	r3, [r3, #2]
    608c:	b29b      	uxth	r3, r3
    608e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6092:	b29a      	uxth	r2, r3
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	885b      	ldrh	r3, [r3, #2]
    609c:	b29b      	uxth	r3, r3
    609e:	b21b      	sxth	r3, r3
    60a0:	2b00      	cmp	r3, #0
    60a2:	da02      	bge.n	60aa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    60a4:	68f8      	ldr	r0, [r7, #12]
    60a6:	4b5b      	ldr	r3, [pc, #364]	; (6214 <_sercom_i2c_sync_analyse_flags+0x210>)
    60a8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    60aa:	687b      	ldr	r3, [r7, #4]
    60ac:	885b      	ldrh	r3, [r3, #2]
    60ae:	b29b      	uxth	r3, r3
    60b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    60b4:	b29a      	uxth	r2, r3
    60b6:	687b      	ldr	r3, [r7, #4]
    60b8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    60ba:	f06f 0301 	mvn.w	r3, #1
    60be:	e09e      	b.n	61fe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    60c0:	687b      	ldr	r3, [r7, #4]
    60c2:	885b      	ldrh	r3, [r3, #2]
    60c4:	b29b      	uxth	r3, r3
    60c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    60ca:	2b00      	cmp	r3, #0
    60cc:	d01c      	beq.n	6108 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    60ce:	687b      	ldr	r3, [r7, #4]
    60d0:	881b      	ldrh	r3, [r3, #0]
    60d2:	121b      	asrs	r3, r3, #8
    60d4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    60d6:	f003 0406 	and.w	r4, r3, #6
    60da:	68f8      	ldr	r0, [r7, #12]
    60dc:	4b4e      	ldr	r3, [pc, #312]	; (6218 <_sercom_i2c_sync_analyse_flags+0x214>)
    60de:	4798      	blx	r3
    60e0:	4603      	mov	r3, r0
    60e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    60e6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    60e8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    60ec:	4619      	mov	r1, r3
    60ee:	68f8      	ldr	r0, [r7, #12]
    60f0:	4b4a      	ldr	r3, [pc, #296]	; (621c <_sercom_i2c_sync_analyse_flags+0x218>)
    60f2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	885b      	ldrh	r3, [r3, #2]
    60f8:	b29b      	uxth	r3, r3
    60fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    60fe:	b29a      	uxth	r2, r3
    6100:	687b      	ldr	r3, [r7, #4]
    6102:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6104:	2300      	movs	r3, #0
    6106:	e07a      	b.n	61fe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6108:	687b      	ldr	r3, [r7, #4]
    610a:	685b      	ldr	r3, [r3, #4]
    610c:	2b00      	cmp	r3, #0
    610e:	d111      	bne.n	6134 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	885b      	ldrh	r3, [r3, #2]
    6114:	b29b      	uxth	r3, r3
    6116:	b21b      	sxth	r3, r3
    6118:	2b00      	cmp	r3, #0
    611a:	da02      	bge.n	6122 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    611c:	68f8      	ldr	r0, [r7, #12]
    611e:	4b3d      	ldr	r3, [pc, #244]	; (6214 <_sercom_i2c_sync_analyse_flags+0x210>)
    6120:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	885b      	ldrh	r3, [r3, #2]
    6126:	b29b      	uxth	r3, r3
    6128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    612c:	b29a      	uxth	r2, r3
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	805a      	strh	r2, [r3, #2]
    6132:	e010      	b.n	6156 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	689b      	ldr	r3, [r3, #8]
    6138:	781b      	ldrb	r3, [r3, #0]
    613a:	4619      	mov	r1, r3
    613c:	68f8      	ldr	r0, [r7, #12]
    613e:	4b38      	ldr	r3, [pc, #224]	; (6220 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6140:	4798      	blx	r3
				msg->buffer++;
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	689b      	ldr	r3, [r3, #8]
    6146:	1c5a      	adds	r2, r3, #1
    6148:	687b      	ldr	r3, [r7, #4]
    614a:	609a      	str	r2, [r3, #8]
				msg->len--;
    614c:	687b      	ldr	r3, [r7, #4]
    614e:	685b      	ldr	r3, [r3, #4]
    6150:	1e5a      	subs	r2, r3, #1
    6152:	687b      	ldr	r3, [r7, #4]
    6154:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6156:	2300      	movs	r3, #0
    6158:	e051      	b.n	61fe <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    615a:	68bb      	ldr	r3, [r7, #8]
    615c:	f003 0302 	and.w	r3, r3, #2
    6160:	2b00      	cmp	r3, #0
    6162:	d04b      	beq.n	61fc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6164:	687b      	ldr	r3, [r7, #4]
    6166:	685b      	ldr	r3, [r3, #4]
    6168:	2b00      	cmp	r3, #0
    616a:	d041      	beq.n	61f0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    616c:	8a7b      	ldrh	r3, [r7, #18]
    616e:	f003 0304 	and.w	r3, r3, #4
    6172:	2b00      	cmp	r3, #0
    6174:	d13c      	bne.n	61f0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6176:	687b      	ldr	r3, [r7, #4]
    6178:	685b      	ldr	r3, [r3, #4]
    617a:	1e5a      	subs	r2, r3, #1
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	685b      	ldr	r3, [r3, #4]
    6184:	2b00      	cmp	r3, #0
    6186:	d102      	bne.n	618e <_sercom_i2c_sync_analyse_flags+0x18a>
    6188:	697b      	ldr	r3, [r7, #20]
    618a:	2b00      	cmp	r3, #0
    618c:	d006      	beq.n	619c <_sercom_i2c_sync_analyse_flags+0x198>
    618e:	687b      	ldr	r3, [r7, #4]
    6190:	685b      	ldr	r3, [r3, #4]
    6192:	2b01      	cmp	r3, #1
    6194:	d105      	bne.n	61a2 <_sercom_i2c_sync_analyse_flags+0x19e>
    6196:	697b      	ldr	r3, [r7, #20]
    6198:	2b00      	cmp	r3, #0
    619a:	d002      	beq.n	61a2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    619c:	68f8      	ldr	r0, [r7, #12]
    619e:	4b21      	ldr	r3, [pc, #132]	; (6224 <_sercom_i2c_sync_analyse_flags+0x220>)
    61a0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	685b      	ldr	r3, [r3, #4]
    61a6:	2b00      	cmp	r3, #0
    61a8:	d113      	bne.n	61d2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    61aa:	687b      	ldr	r3, [r7, #4]
    61ac:	885b      	ldrh	r3, [r3, #2]
    61ae:	b29b      	uxth	r3, r3
    61b0:	b21b      	sxth	r3, r3
    61b2:	2b00      	cmp	r3, #0
    61b4:	da05      	bge.n	61c2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    61b6:	68f8      	ldr	r0, [r7, #12]
    61b8:	4b1b      	ldr	r3, [pc, #108]	; (6228 <_sercom_i2c_sync_analyse_flags+0x224>)
    61ba:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    61bc:	68f8      	ldr	r0, [r7, #12]
    61be:	4b15      	ldr	r3, [pc, #84]	; (6214 <_sercom_i2c_sync_analyse_flags+0x210>)
    61c0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	885b      	ldrh	r3, [r3, #2]
    61c6:	b29b      	uxth	r3, r3
    61c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61cc:	b29a      	uxth	r2, r3
    61ce:	687b      	ldr	r3, [r7, #4]
    61d0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    61d2:	687b      	ldr	r3, [r7, #4]
    61d4:	689c      	ldr	r4, [r3, #8]
    61d6:	1c62      	adds	r2, r4, #1
    61d8:	687b      	ldr	r3, [r7, #4]
    61da:	609a      	str	r2, [r3, #8]
    61dc:	68f8      	ldr	r0, [r7, #12]
    61de:	4b13      	ldr	r3, [pc, #76]	; (622c <_sercom_i2c_sync_analyse_flags+0x228>)
    61e0:	4798      	blx	r3
    61e2:	4603      	mov	r3, r0
    61e4:	b2db      	uxtb	r3, r3
    61e6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    61e8:	68f8      	ldr	r0, [r7, #12]
    61ea:	4b11      	ldr	r3, [pc, #68]	; (6230 <_sercom_i2c_sync_analyse_flags+0x22c>)
    61ec:	4798      	blx	r3
    61ee:	e005      	b.n	61fc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    61f0:	68f8      	ldr	r0, [r7, #12]
    61f2:	4b0f      	ldr	r3, [pc, #60]	; (6230 <_sercom_i2c_sync_analyse_flags+0x22c>)
    61f4:	4798      	blx	r3
			return I2C_NACK;
    61f6:	f06f 0301 	mvn.w	r3, #1
    61fa:	e000      	b.n	61fe <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    61fc:	2300      	movs	r3, #0
}
    61fe:	4618      	mov	r0, r3
    6200:	371c      	adds	r7, #28
    6202:	46bd      	mov	sp, r7
    6204:	bd90      	pop	{r4, r7, pc}
    6206:	bf00      	nop
    6208:	00005ac9 	.word	0x00005ac9
    620c:	00005ed9 	.word	0x00005ed9
    6210:	000059c9 	.word	0x000059c9
    6214:	00005fe9 	.word	0x00005fe9
    6218:	00005db9 	.word	0x00005db9
    621c:	00005d95 	.word	0x00005d95
    6220:	00005df5 	.word	0x00005df5
    6224:	00005c51 	.word	0x00005c51
    6228:	00005c29 	.word	0x00005c29
    622c:	00005e19 	.word	0x00005e19
    6230:	000059e3 	.word	0x000059e3

00006234 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6234:	b580      	push	{r7, lr}
    6236:	b082      	sub	sp, #8
    6238:	af00      	add	r7, sp, #0
    623a:	6078      	str	r0, [r7, #4]
    623c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	2b00      	cmp	r3, #0
    6242:	bf14      	ite	ne
    6244:	2301      	movne	r3, #1
    6246:	2300      	moveq	r3, #0
    6248:	b2db      	uxtb	r3, r3
    624a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    624e:	4908      	ldr	r1, [pc, #32]	; (6270 <_i2c_m_sync_init+0x3c>)
    6250:	4618      	mov	r0, r3
    6252:	4b08      	ldr	r3, [pc, #32]	; (6274 <_i2c_m_sync_init+0x40>)
    6254:	4798      	blx	r3

	i2c_dev->hw = hw;
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	683a      	ldr	r2, [r7, #0]
    625a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	6839      	ldr	r1, [r7, #0]
    6260:	4618      	mov	r0, r3
    6262:	4b05      	ldr	r3, [pc, #20]	; (6278 <_i2c_m_sync_init+0x44>)
    6264:	4798      	blx	r3
    6266:	4603      	mov	r3, r0
}
    6268:	4618      	mov	r0, r3
    626a:	3708      	adds	r7, #8
    626c:	46bd      	mov	sp, r7
    626e:	bd80      	pop	{r7, pc}
    6270:	0000f030 	.word	0x0000f030
    6274:	0000341d 	.word	0x0000341d
    6278:	0000664d 	.word	0x0000664d

0000627c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    627c:	b580      	push	{r7, lr}
    627e:	b082      	sub	sp, #8
    6280:	af00      	add	r7, sp, #0
    6282:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	2b00      	cmp	r3, #0
    6288:	bf14      	ite	ne
    628a:	2301      	movne	r3, #1
    628c:	2300      	moveq	r3, #0
    628e:	b2db      	uxtb	r3, r3
    6290:	f240 5235 	movw	r2, #1333	; 0x535
    6294:	4906      	ldr	r1, [pc, #24]	; (62b0 <_i2c_m_sync_enable+0x34>)
    6296:	4618      	mov	r0, r3
    6298:	4b06      	ldr	r3, [pc, #24]	; (62b4 <_i2c_m_sync_enable+0x38>)
    629a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	691b      	ldr	r3, [r3, #16]
    62a0:	4618      	mov	r0, r3
    62a2:	4b05      	ldr	r3, [pc, #20]	; (62b8 <_i2c_m_sync_enable+0x3c>)
    62a4:	4798      	blx	r3
    62a6:	4603      	mov	r3, r0
}
    62a8:	4618      	mov	r0, r3
    62aa:	3708      	adds	r7, #8
    62ac:	46bd      	mov	sp, r7
    62ae:	bd80      	pop	{r7, pc}
    62b0:	0000f030 	.word	0x0000f030
    62b4:	0000341d 	.word	0x0000341d
    62b8:	000065c1 	.word	0x000065c1

000062bc <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b084      	sub	sp, #16
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	691b      	ldr	r3, [r3, #16]
    62c8:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    62ca:	687b      	ldr	r3, [r7, #4]
    62cc:	2b00      	cmp	r3, #0
    62ce:	bf14      	ite	ne
    62d0:	2301      	movne	r3, #1
    62d2:	2300      	moveq	r3, #0
    62d4:	b2db      	uxtb	r3, r3
    62d6:	f240 5243 	movw	r2, #1347	; 0x543
    62da:	490c      	ldr	r1, [pc, #48]	; (630c <_i2c_m_sync_disable+0x50>)
    62dc:	4618      	mov	r0, r3
    62de:	4b0c      	ldr	r3, [pc, #48]	; (6310 <_i2c_m_sync_disable+0x54>)
    62e0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	691b      	ldr	r3, [r3, #16]
    62e6:	2b00      	cmp	r3, #0
    62e8:	bf14      	ite	ne
    62ea:	2301      	movne	r3, #1
    62ec:	2300      	moveq	r3, #0
    62ee:	b2db      	uxtb	r3, r3
    62f0:	f240 5244 	movw	r2, #1348	; 0x544
    62f4:	4905      	ldr	r1, [pc, #20]	; (630c <_i2c_m_sync_disable+0x50>)
    62f6:	4618      	mov	r0, r3
    62f8:	4b05      	ldr	r3, [pc, #20]	; (6310 <_i2c_m_sync_disable+0x54>)
    62fa:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    62fc:	68f8      	ldr	r0, [r7, #12]
    62fe:	4b05      	ldr	r3, [pc, #20]	; (6314 <_i2c_m_sync_disable+0x58>)
    6300:	4798      	blx	r3

	return ERR_NONE;
    6302:	2300      	movs	r3, #0
}
    6304:	4618      	mov	r0, r3
    6306:	3710      	adds	r7, #16
    6308:	46bd      	mov	sp, r7
    630a:	bd80      	pop	{r7, pc}
    630c:	0000f030 	.word	0x0000f030
    6310:	0000341d 	.word	0x0000341d
    6314:	00005aa1 	.word	0x00005aa1

00006318 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6318:	b580      	push	{r7, lr}
    631a:	b084      	sub	sp, #16
    631c:	af00      	add	r7, sp, #0
    631e:	6078      	str	r0, [r7, #4]
    6320:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6322:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6326:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	691b      	ldr	r3, [r3, #16]
    632c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    632e:	68b8      	ldr	r0, [r7, #8]
    6330:	4b0f      	ldr	r3, [pc, #60]	; (6370 <_sercom_i2c_sync_wait_bus+0x58>)
    6332:	4798      	blx	r3
    6334:	4603      	mov	r3, r0
    6336:	461a      	mov	r2, r3
    6338:	683b      	ldr	r3, [r7, #0]
    633a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    633c:	68fb      	ldr	r3, [r7, #12]
    633e:	1e5a      	subs	r2, r3, #1
    6340:	60fa      	str	r2, [r7, #12]
    6342:	2b00      	cmp	r3, #0
    6344:	d102      	bne.n	634c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6346:	f06f 0304 	mvn.w	r3, #4
    634a:	e00c      	b.n	6366 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    634c:	683b      	ldr	r3, [r7, #0]
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	f003 0301 	and.w	r3, r3, #1
    6354:	2b00      	cmp	r3, #0
    6356:	d105      	bne.n	6364 <_sercom_i2c_sync_wait_bus+0x4c>
    6358:	683b      	ldr	r3, [r7, #0]
    635a:	681b      	ldr	r3, [r3, #0]
    635c:	f003 0302 	and.w	r3, r3, #2
    6360:	2b00      	cmp	r3, #0
    6362:	d0e4      	beq.n	632e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6364:	2300      	movs	r3, #0
}
    6366:	4618      	mov	r0, r3
    6368:	3710      	adds	r7, #16
    636a:	46bd      	mov	sp, r7
    636c:	bd80      	pop	{r7, pc}
    636e:	bf00      	nop
    6370:	000059fd 	.word	0x000059fd

00006374 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6374:	b590      	push	{r4, r7, lr}
    6376:	b087      	sub	sp, #28
    6378:	af00      	add	r7, sp, #0
    637a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	691b      	ldr	r3, [r3, #16]
    6380:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6386:	6978      	ldr	r0, [r7, #20]
    6388:	4b39      	ldr	r3, [pc, #228]	; (6470 <_sercom_i2c_sync_send_address+0xfc>)
    638a:	4798      	blx	r3
    638c:	4603      	mov	r3, r0
    638e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	2b00      	cmp	r3, #0
    6394:	bf14      	ite	ne
    6396:	2301      	movne	r3, #1
    6398:	2300      	moveq	r3, #0
    639a:	b2db      	uxtb	r3, r3
    639c:	f240 52a5 	movw	r2, #1445	; 0x5a5
    63a0:	4934      	ldr	r1, [pc, #208]	; (6474 <_sercom_i2c_sync_send_address+0x100>)
    63a2:	4618      	mov	r0, r3
    63a4:	4b34      	ldr	r3, [pc, #208]	; (6478 <_sercom_i2c_sync_send_address+0x104>)
    63a6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    63a8:	693b      	ldr	r3, [r7, #16]
    63aa:	685b      	ldr	r3, [r3, #4]
    63ac:	2b01      	cmp	r3, #1
    63ae:	d106      	bne.n	63be <_sercom_i2c_sync_send_address+0x4a>
    63b0:	68fb      	ldr	r3, [r7, #12]
    63b2:	2b00      	cmp	r3, #0
    63b4:	d003      	beq.n	63be <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    63b6:	6978      	ldr	r0, [r7, #20]
    63b8:	4b30      	ldr	r3, [pc, #192]	; (647c <_sercom_i2c_sync_send_address+0x108>)
    63ba:	4798      	blx	r3
    63bc:	e002      	b.n	63c4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    63be:	6978      	ldr	r0, [r7, #20]
    63c0:	4b2f      	ldr	r3, [pc, #188]	; (6480 <_sercom_i2c_sync_send_address+0x10c>)
    63c2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    63c4:	693b      	ldr	r3, [r7, #16]
    63c6:	881b      	ldrh	r3, [r3, #0]
    63c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    63cc:	2b00      	cmp	r3, #0
    63ce:	d022      	beq.n	6416 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    63d0:	693b      	ldr	r3, [r7, #16]
    63d2:	885b      	ldrh	r3, [r3, #2]
    63d4:	b29b      	uxth	r3, r3
    63d6:	f003 0301 	and.w	r3, r3, #1
    63da:	2b00      	cmp	r3, #0
    63dc:	d007      	beq.n	63ee <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    63de:	693b      	ldr	r3, [r7, #16]
    63e0:	885b      	ldrh	r3, [r3, #2]
    63e2:	b29b      	uxth	r3, r3
    63e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    63e8:	b29a      	uxth	r2, r3
    63ea:	693b      	ldr	r3, [r7, #16]
    63ec:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    63ee:	693b      	ldr	r3, [r7, #16]
    63f0:	881b      	ldrh	r3, [r3, #0]
    63f2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    63f4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    63f8:	401c      	ands	r4, r3
    63fa:	6978      	ldr	r0, [r7, #20]
    63fc:	4b21      	ldr	r3, [pc, #132]	; (6484 <_sercom_i2c_sync_send_address+0x110>)
    63fe:	4798      	blx	r3
    6400:	4603      	mov	r3, r0
    6402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6406:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    640c:	4619      	mov	r1, r3
    640e:	6978      	ldr	r0, [r7, #20]
    6410:	4b1d      	ldr	r3, [pc, #116]	; (6488 <_sercom_i2c_sync_send_address+0x114>)
    6412:	4798      	blx	r3
    6414:	e01a      	b.n	644c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6416:	693b      	ldr	r3, [r7, #16]
    6418:	881b      	ldrh	r3, [r3, #0]
    641a:	005b      	lsls	r3, r3, #1
    641c:	b2db      	uxtb	r3, r3
    641e:	693a      	ldr	r2, [r7, #16]
    6420:	8852      	ldrh	r2, [r2, #2]
    6422:	b292      	uxth	r2, r2
    6424:	f002 0201 	and.w	r2, r2, #1
    6428:	2a00      	cmp	r2, #0
    642a:	bf14      	ite	ne
    642c:	2201      	movne	r2, #1
    642e:	2200      	moveq	r2, #0
    6430:	b2d2      	uxtb	r2, r2
    6432:	4313      	orrs	r3, r2
    6434:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6436:	6978      	ldr	r0, [r7, #20]
    6438:	4b12      	ldr	r3, [pc, #72]	; (6484 <_sercom_i2c_sync_send_address+0x110>)
    643a:	4798      	blx	r3
    643c:	4603      	mov	r3, r0
    643e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6442:	4323      	orrs	r3, r4
    6444:	4619      	mov	r1, r3
    6446:	6978      	ldr	r0, [r7, #20]
    6448:	4b0f      	ldr	r3, [pc, #60]	; (6488 <_sercom_i2c_sync_send_address+0x114>)
    644a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    644c:	f107 0308 	add.w	r3, r7, #8
    6450:	4619      	mov	r1, r3
    6452:	6878      	ldr	r0, [r7, #4]
    6454:	4b0d      	ldr	r3, [pc, #52]	; (648c <_sercom_i2c_sync_send_address+0x118>)
    6456:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6458:	68bb      	ldr	r3, [r7, #8]
    645a:	693a      	ldr	r2, [r7, #16]
    645c:	4619      	mov	r1, r3
    645e:	6978      	ldr	r0, [r7, #20]
    6460:	4b0b      	ldr	r3, [pc, #44]	; (6490 <_sercom_i2c_sync_send_address+0x11c>)
    6462:	4798      	blx	r3
    6464:	4603      	mov	r3, r0
}
    6466:	4618      	mov	r0, r3
    6468:	371c      	adds	r7, #28
    646a:	46bd      	mov	sp, r7
    646c:	bd90      	pop	{r4, r7, pc}
    646e:	bf00      	nop
    6470:	00005ac9 	.word	0x00005ac9
    6474:	0000f030 	.word	0x0000f030
    6478:	0000341d 	.word	0x0000341d
    647c:	00005c51 	.word	0x00005c51
    6480:	00005c79 	.word	0x00005c79
    6484:	00005db9 	.word	0x00005db9
    6488:	00005d95 	.word	0x00005d95
    648c:	00006319 	.word	0x00006319
    6490:	00006005 	.word	0x00006005

00006494 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6494:	b580      	push	{r7, lr}
    6496:	b086      	sub	sp, #24
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
    649c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	691b      	ldr	r3, [r3, #16]
    64a2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    64a4:	687b      	ldr	r3, [r7, #4]
    64a6:	2b00      	cmp	r3, #0
    64a8:	bf14      	ite	ne
    64aa:	2301      	movne	r3, #1
    64ac:	2300      	moveq	r3, #0
    64ae:	b2db      	uxtb	r3, r3
    64b0:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    64b4:	493b      	ldr	r1, [pc, #236]	; (65a4 <_i2c_m_sync_transfer+0x110>)
    64b6:	4618      	mov	r0, r3
    64b8:	4b3b      	ldr	r3, [pc, #236]	; (65a8 <_i2c_m_sync_transfer+0x114>)
    64ba:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    64bc:	687b      	ldr	r3, [r7, #4]
    64be:	691b      	ldr	r3, [r3, #16]
    64c0:	2b00      	cmp	r3, #0
    64c2:	bf14      	ite	ne
    64c4:	2301      	movne	r3, #1
    64c6:	2300      	moveq	r3, #0
    64c8:	b2db      	uxtb	r3, r3
    64ca:	f240 52d1 	movw	r2, #1489	; 0x5d1
    64ce:	4935      	ldr	r1, [pc, #212]	; (65a4 <_i2c_m_sync_transfer+0x110>)
    64d0:	4618      	mov	r0, r3
    64d2:	4b35      	ldr	r3, [pc, #212]	; (65a8 <_i2c_m_sync_transfer+0x114>)
    64d4:	4798      	blx	r3
	ASSERT(msg);
    64d6:	683b      	ldr	r3, [r7, #0]
    64d8:	2b00      	cmp	r3, #0
    64da:	bf14      	ite	ne
    64dc:	2301      	movne	r3, #1
    64de:	2300      	moveq	r3, #0
    64e0:	b2db      	uxtb	r3, r3
    64e2:	f240 52d2 	movw	r2, #1490	; 0x5d2
    64e6:	492f      	ldr	r1, [pc, #188]	; (65a4 <_i2c_m_sync_transfer+0x110>)
    64e8:	4618      	mov	r0, r3
    64ea:	4b2f      	ldr	r3, [pc, #188]	; (65a8 <_i2c_m_sync_transfer+0x114>)
    64ec:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	885b      	ldrh	r3, [r3, #2]
    64f2:	b29b      	uxth	r3, r3
    64f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    64f8:	2b00      	cmp	r3, #0
    64fa:	d002      	beq.n	6502 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    64fc:	f06f 0305 	mvn.w	r3, #5
    6500:	e04c      	b.n	659c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6502:	683b      	ldr	r3, [r7, #0]
    6504:	885b      	ldrh	r3, [r3, #2]
    6506:	b29b      	uxth	r3, r3
    6508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    650c:	b29a      	uxth	r2, r3
    650e:	683b      	ldr	r3, [r7, #0]
    6510:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	683a      	ldr	r2, [r7, #0]
    6516:	ca07      	ldmia	r2, {r0, r1, r2}
    6518:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    651c:	6938      	ldr	r0, [r7, #16]
    651e:	4b23      	ldr	r3, [pc, #140]	; (65ac <_i2c_m_sync_transfer+0x118>)
    6520:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6522:	6878      	ldr	r0, [r7, #4]
    6524:	4b22      	ldr	r3, [pc, #136]	; (65b0 <_i2c_m_sync_transfer+0x11c>)
    6526:	4798      	blx	r3
    6528:	6178      	str	r0, [r7, #20]

	if (ret) {
    652a:	697b      	ldr	r3, [r7, #20]
    652c:	2b00      	cmp	r3, #0
    652e:	d02d      	beq.n	658c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	885b      	ldrh	r3, [r3, #2]
    6534:	b29b      	uxth	r3, r3
    6536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    653a:	b29a      	uxth	r2, r3
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	805a      	strh	r2, [r3, #2]

		return ret;
    6540:	697b      	ldr	r3, [r7, #20]
    6542:	e02b      	b.n	659c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6544:	f107 030c 	add.w	r3, r7, #12
    6548:	4619      	mov	r1, r3
    654a:	6878      	ldr	r0, [r7, #4]
    654c:	4b19      	ldr	r3, [pc, #100]	; (65b4 <_i2c_m_sync_transfer+0x120>)
    654e:	4798      	blx	r3
    6550:	6178      	str	r0, [r7, #20]

		if (ret) {
    6552:	697b      	ldr	r3, [r7, #20]
    6554:	2b00      	cmp	r3, #0
    6556:	d012      	beq.n	657e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6558:	683b      	ldr	r3, [r7, #0]
    655a:	885b      	ldrh	r3, [r3, #2]
    655c:	b29b      	uxth	r3, r3
    655e:	b21b      	sxth	r3, r3
    6560:	2b00      	cmp	r3, #0
    6562:	da02      	bge.n	656a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6564:	6938      	ldr	r0, [r7, #16]
    6566:	4b14      	ldr	r3, [pc, #80]	; (65b8 <_i2c_m_sync_transfer+0x124>)
    6568:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	885b      	ldrh	r3, [r3, #2]
    656e:	b29b      	uxth	r3, r3
    6570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6574:	b29a      	uxth	r2, r3
    6576:	687b      	ldr	r3, [r7, #4]
    6578:	805a      	strh	r2, [r3, #2]

			return ret;
    657a:	697b      	ldr	r3, [r7, #20]
    657c:	e00e      	b.n	659c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	687a      	ldr	r2, [r7, #4]
    6582:	4619      	mov	r1, r3
    6584:	6938      	ldr	r0, [r7, #16]
    6586:	4b0d      	ldr	r3, [pc, #52]	; (65bc <_i2c_m_sync_transfer+0x128>)
    6588:	4798      	blx	r3
    658a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	885b      	ldrh	r3, [r3, #2]
    6590:	b29b      	uxth	r3, r3
    6592:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6596:	2b00      	cmp	r3, #0
    6598:	d1d4      	bne.n	6544 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    659a:	697b      	ldr	r3, [r7, #20]
}
    659c:	4618      	mov	r0, r3
    659e:	3718      	adds	r7, #24
    65a0:	46bd      	mov	sp, r7
    65a2:	bd80      	pop	{r7, pc}
    65a4:	0000f030 	.word	0x0000f030
    65a8:	0000341d 	.word	0x0000341d
    65ac:	00005c01 	.word	0x00005c01
    65b0:	00006375 	.word	0x00006375
    65b4:	00006319 	.word	0x00006319
    65b8:	00005fe9 	.word	0x00005fe9
    65bc:	00006005 	.word	0x00006005

000065c0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    65c0:	b580      	push	{r7, lr}
    65c2:	b084      	sub	sp, #16
    65c4:	af00      	add	r7, sp, #0
    65c6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    65c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    65cc:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    65ce:	2304      	movs	r3, #4
    65d0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	2b00      	cmp	r3, #0
    65d6:	bf14      	ite	ne
    65d8:	2301      	movne	r3, #1
    65da:	2300      	moveq	r3, #0
    65dc:	b2db      	uxtb	r3, r3
    65de:	f240 6205 	movw	r2, #1541	; 0x605
    65e2:	4915      	ldr	r1, [pc, #84]	; (6638 <_i2c_m_enable_implementation+0x78>)
    65e4:	4618      	mov	r0, r3
    65e6:	4b15      	ldr	r3, [pc, #84]	; (663c <_i2c_m_enable_implementation+0x7c>)
    65e8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    65ea:	6878      	ldr	r0, [r7, #4]
    65ec:	4b14      	ldr	r3, [pc, #80]	; (6640 <_i2c_m_enable_implementation+0x80>)
    65ee:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    65f0:	e016      	b.n	6620 <_i2c_m_enable_implementation+0x60>
		timeout--;
    65f2:	68fb      	ldr	r3, [r7, #12]
    65f4:	3b01      	subs	r3, #1
    65f6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    65f8:	68fb      	ldr	r3, [r7, #12]
    65fa:	2b00      	cmp	r3, #0
    65fc:	dc10      	bgt.n	6620 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    65fe:	68bb      	ldr	r3, [r7, #8]
    6600:	3b01      	subs	r3, #1
    6602:	60bb      	str	r3, [r7, #8]
    6604:	68bb      	ldr	r3, [r7, #8]
    6606:	2b00      	cmp	r3, #0
    6608:	d007      	beq.n	661a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    660a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    660e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6610:	2110      	movs	r1, #16
    6612:	6878      	ldr	r0, [r7, #4]
    6614:	4b0b      	ldr	r3, [pc, #44]	; (6644 <_i2c_m_enable_implementation+0x84>)
    6616:	4798      	blx	r3
    6618:	e002      	b.n	6620 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    661a:	f06f 0305 	mvn.w	r3, #5
    661e:	e006      	b.n	662e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6620:	6878      	ldr	r0, [r7, #4]
    6622:	4b09      	ldr	r3, [pc, #36]	; (6648 <_i2c_m_enable_implementation+0x88>)
    6624:	4798      	blx	r3
    6626:	4603      	mov	r3, r0
    6628:	2b01      	cmp	r3, #1
    662a:	d1e2      	bne.n	65f2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    662c:	2300      	movs	r3, #0
}
    662e:	4618      	mov	r0, r3
    6630:	3710      	adds	r7, #16
    6632:	46bd      	mov	sp, r7
    6634:	bd80      	pop	{r7, pc}
    6636:	bf00      	nop
    6638:	0000f030 	.word	0x0000f030
    663c:	0000341d 	.word	0x0000341d
    6640:	00005a79 	.word	0x00005a79
    6644:	00005efd 	.word	0x00005efd
    6648:	00005ead 	.word	0x00005ead

0000664c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    664c:	b580      	push	{r7, lr}
    664e:	b084      	sub	sp, #16
    6650:	af00      	add	r7, sp, #0
    6652:	6078      	str	r0, [r7, #4]
    6654:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6656:	6838      	ldr	r0, [r7, #0]
    6658:	4b42      	ldr	r3, [pc, #264]	; (6764 <_i2c_m_sync_init_impl+0x118>)
    665a:	4798      	blx	r3
    665c:	4603      	mov	r3, r0
    665e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6660:	2101      	movs	r1, #1
    6662:	6838      	ldr	r0, [r7, #0]
    6664:	4b40      	ldr	r3, [pc, #256]	; (6768 <_i2c_m_sync_init_impl+0x11c>)
    6666:	4798      	blx	r3
    6668:	4603      	mov	r3, r0
    666a:	f083 0301 	eor.w	r3, r3, #1
    666e:	b2db      	uxtb	r3, r3
    6670:	2b00      	cmp	r3, #0
    6672:	d020      	beq.n	66b6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6674:	7bfa      	ldrb	r2, [r7, #15]
    6676:	493d      	ldr	r1, [pc, #244]	; (676c <_i2c_m_sync_init_impl+0x120>)
    6678:	4613      	mov	r3, r2
    667a:	005b      	lsls	r3, r3, #1
    667c:	4413      	add	r3, r2
    667e:	00db      	lsls	r3, r3, #3
    6680:	440b      	add	r3, r1
    6682:	3304      	adds	r3, #4
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	f003 031c 	and.w	r3, r3, #28
    668a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    668c:	2102      	movs	r1, #2
    668e:	6838      	ldr	r0, [r7, #0]
    6690:	4b37      	ldr	r3, [pc, #220]	; (6770 <_i2c_m_sync_init_impl+0x124>)
    6692:	4798      	blx	r3
    6694:	4603      	mov	r3, r0
    6696:	2b00      	cmp	r3, #0
    6698:	d006      	beq.n	66a8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    669a:	6838      	ldr	r0, [r7, #0]
    669c:	4b35      	ldr	r3, [pc, #212]	; (6774 <_i2c_m_sync_init_impl+0x128>)
    669e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    66a0:	2102      	movs	r1, #2
    66a2:	6838      	ldr	r0, [r7, #0]
    66a4:	4b34      	ldr	r3, [pc, #208]	; (6778 <_i2c_m_sync_init_impl+0x12c>)
    66a6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    66a8:	68bb      	ldr	r3, [r7, #8]
    66aa:	f043 0301 	orr.w	r3, r3, #1
    66ae:	4619      	mov	r1, r3
    66b0:	6838      	ldr	r0, [r7, #0]
    66b2:	4b32      	ldr	r3, [pc, #200]	; (677c <_i2c_m_sync_init_impl+0x130>)
    66b4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    66b6:	2101      	movs	r1, #1
    66b8:	6838      	ldr	r0, [r7, #0]
    66ba:	4b2f      	ldr	r3, [pc, #188]	; (6778 <_i2c_m_sync_init_impl+0x12c>)
    66bc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    66be:	7bfa      	ldrb	r2, [r7, #15]
    66c0:	492a      	ldr	r1, [pc, #168]	; (676c <_i2c_m_sync_init_impl+0x120>)
    66c2:	4613      	mov	r3, r2
    66c4:	005b      	lsls	r3, r3, #1
    66c6:	4413      	add	r3, r2
    66c8:	00db      	lsls	r3, r3, #3
    66ca:	440b      	add	r3, r1
    66cc:	3304      	adds	r3, #4
    66ce:	681b      	ldr	r3, [r3, #0]
    66d0:	4619      	mov	r1, r3
    66d2:	6838      	ldr	r0, [r7, #0]
    66d4:	4b29      	ldr	r3, [pc, #164]	; (677c <_i2c_m_sync_init_impl+0x130>)
    66d6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    66d8:	7bfa      	ldrb	r2, [r7, #15]
    66da:	4924      	ldr	r1, [pc, #144]	; (676c <_i2c_m_sync_init_impl+0x120>)
    66dc:	4613      	mov	r3, r2
    66de:	005b      	lsls	r3, r3, #1
    66e0:	4413      	add	r3, r2
    66e2:	00db      	lsls	r3, r3, #3
    66e4:	440b      	add	r3, r1
    66e6:	3308      	adds	r3, #8
    66e8:	681b      	ldr	r3, [r3, #0]
    66ea:	4619      	mov	r1, r3
    66ec:	6838      	ldr	r0, [r7, #0]
    66ee:	4b24      	ldr	r3, [pc, #144]	; (6780 <_i2c_m_sync_init_impl+0x134>)
    66f0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    66f2:	7bfa      	ldrb	r2, [r7, #15]
    66f4:	491d      	ldr	r1, [pc, #116]	; (676c <_i2c_m_sync_init_impl+0x120>)
    66f6:	4613      	mov	r3, r2
    66f8:	005b      	lsls	r3, r3, #1
    66fa:	4413      	add	r3, r2
    66fc:	00db      	lsls	r3, r3, #3
    66fe:	440b      	add	r3, r1
    6700:	330c      	adds	r3, #12
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	4619      	mov	r1, r3
    6706:	6838      	ldr	r0, [r7, #0]
    6708:	4b1e      	ldr	r3, [pc, #120]	; (6784 <_i2c_m_sync_init_impl+0x138>)
    670a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    670c:	7bfa      	ldrb	r2, [r7, #15]
    670e:	4917      	ldr	r1, [pc, #92]	; (676c <_i2c_m_sync_init_impl+0x120>)
    6710:	4613      	mov	r3, r2
    6712:	005b      	lsls	r3, r3, #1
    6714:	4413      	add	r3, r2
    6716:	00db      	lsls	r3, r3, #3
    6718:	440b      	add	r3, r1
    671a:	3304      	adds	r3, #4
    671c:	681b      	ldr	r3, [r3, #0]
    671e:	0e1b      	lsrs	r3, r3, #24
    6720:	b29b      	uxth	r3, r3
    6722:	f003 0303 	and.w	r3, r3, #3
    6726:	b29a      	uxth	r2, r3
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	899b      	ldrh	r3, [r3, #12]
    6730:	2b01      	cmp	r3, #1
    6732:	bf8c      	ite	hi
    6734:	2301      	movhi	r3, #1
    6736:	2300      	movls	r3, #0
    6738:	b2db      	uxtb	r3, r3
    673a:	4619      	mov	r1, r3
    673c:	6838      	ldr	r0, [r7, #0]
    673e:	4b12      	ldr	r3, [pc, #72]	; (6788 <_i2c_m_sync_init_impl+0x13c>)
    6740:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6742:	7bfa      	ldrb	r2, [r7, #15]
    6744:	4909      	ldr	r1, [pc, #36]	; (676c <_i2c_m_sync_init_impl+0x120>)
    6746:	4613      	mov	r3, r2
    6748:	005b      	lsls	r3, r3, #1
    674a:	4413      	add	r3, r2
    674c:	00db      	lsls	r3, r3, #3
    674e:	440b      	add	r3, r1
    6750:	3312      	adds	r3, #18
    6752:	881a      	ldrh	r2, [r3, #0]
    6754:	687b      	ldr	r3, [r7, #4]
    6756:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6758:	2300      	movs	r3, #0
}
    675a:	4618      	mov	r0, r3
    675c:	3710      	adds	r7, #16
    675e:	46bd      	mov	sp, r7
    6760:	bd80      	pop	{r7, pc}
    6762:	bf00      	nop
    6764:	00005f81 	.word	0x00005f81
    6768:	00005955 	.word	0x00005955
    676c:	20000018 	.word	0x20000018
    6770:	00005af9 	.word	0x00005af9
    6774:	00005aa1 	.word	0x00005aa1
    6778:	00005931 	.word	0x00005931
    677c:	00005b29 	.word	0x00005b29
    6780:	00005cd1 	.word	0x00005cd1
    6784:	00005d19 	.word	0x00005d19
    6788:	00005d55 	.word	0x00005d55

0000678c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    678c:	b580      	push	{r7, lr}
    678e:	b082      	sub	sp, #8
    6790:	af00      	add	r7, sp, #0
    6792:	6078      	str	r0, [r7, #4]
    6794:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	2b00      	cmp	r3, #0
    679a:	d004      	beq.n	67a6 <_spi_load_regs_master+0x1a>
    679c:	683b      	ldr	r3, [r7, #0]
    679e:	2b00      	cmp	r3, #0
    67a0:	d001      	beq.n	67a6 <_spi_load_regs_master+0x1a>
    67a2:	2301      	movs	r3, #1
    67a4:	e000      	b.n	67a8 <_spi_load_regs_master+0x1c>
    67a6:	2300      	movs	r3, #0
    67a8:	f003 0301 	and.w	r3, r3, #1
    67ac:	b2db      	uxtb	r3, r3
    67ae:	f640 1209 	movw	r2, #2313	; 0x909
    67b2:	4915      	ldr	r1, [pc, #84]	; (6808 <_spi_load_regs_master+0x7c>)
    67b4:	4618      	mov	r0, r3
    67b6:	4b15      	ldr	r3, [pc, #84]	; (680c <_spi_load_regs_master+0x80>)
    67b8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    67ba:	683b      	ldr	r3, [r7, #0]
    67bc:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    67be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    67c2:	f023 0301 	bic.w	r3, r3, #1
    67c6:	4619      	mov	r1, r3
    67c8:	6878      	ldr	r0, [r7, #4]
    67ca:	4b11      	ldr	r3, [pc, #68]	; (6810 <_spi_load_regs_master+0x84>)
    67cc:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    67ce:	683b      	ldr	r3, [r7, #0]
    67d0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    67d2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    67d6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    67da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    67de:	4619      	mov	r1, r3
    67e0:	6878      	ldr	r0, [r7, #4]
    67e2:	4b0c      	ldr	r3, [pc, #48]	; (6814 <_spi_load_regs_master+0x88>)
    67e4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    67e6:	683b      	ldr	r3, [r7, #0]
    67e8:	7b1b      	ldrb	r3, [r3, #12]
    67ea:	4619      	mov	r1, r3
    67ec:	6878      	ldr	r0, [r7, #4]
    67ee:	4b0a      	ldr	r3, [pc, #40]	; (6818 <_spi_load_regs_master+0x8c>)
    67f0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    67f2:	683b      	ldr	r3, [r7, #0]
    67f4:	7b5b      	ldrb	r3, [r3, #13]
    67f6:	4619      	mov	r1, r3
    67f8:	6878      	ldr	r0, [r7, #4]
    67fa:	4b08      	ldr	r3, [pc, #32]	; (681c <_spi_load_regs_master+0x90>)
    67fc:	4798      	blx	r3
}
    67fe:	bf00      	nop
    6800:	3708      	adds	r7, #8
    6802:	46bd      	mov	sp, r7
    6804:	bd80      	pop	{r7, pc}
    6806:	bf00      	nop
    6808:	0000f030 	.word	0x0000f030
    680c:	0000341d 	.word	0x0000341d
    6810:	00005bdd 	.word	0x00005bdd
    6814:	00005cf5 	.word	0x00005cf5
    6818:	00005d35 	.word	0x00005d35
    681c:	00005e6d 	.word	0x00005e6d

00006820 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6820:	b580      	push	{r7, lr}
    6822:	b082      	sub	sp, #8
    6824:	af00      	add	r7, sp, #0
    6826:	6078      	str	r0, [r7, #4]
    6828:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	2b00      	cmp	r3, #0
    682e:	d004      	beq.n	683a <_spi_load_regs_slave+0x1a>
    6830:	683b      	ldr	r3, [r7, #0]
    6832:	2b00      	cmp	r3, #0
    6834:	d001      	beq.n	683a <_spi_load_regs_slave+0x1a>
    6836:	2301      	movs	r3, #1
    6838:	e000      	b.n	683c <_spi_load_regs_slave+0x1c>
    683a:	2300      	movs	r3, #0
    683c:	f003 0301 	and.w	r3, r3, #1
    6840:	b2db      	uxtb	r3, r3
    6842:	f640 121d 	movw	r2, #2333	; 0x91d
    6846:	491a      	ldr	r1, [pc, #104]	; (68b0 <_spi_load_regs_slave+0x90>)
    6848:	4618      	mov	r0, r3
    684a:	4b1a      	ldr	r3, [pc, #104]	; (68b4 <_spi_load_regs_slave+0x94>)
    684c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    684e:	683b      	ldr	r3, [r7, #0]
    6850:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6852:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6856:	f023 0301 	bic.w	r3, r3, #1
    685a:	4619      	mov	r1, r3
    685c:	6878      	ldr	r0, [r7, #4]
    685e:	4b16      	ldr	r3, [pc, #88]	; (68b8 <_spi_load_regs_slave+0x98>)
    6860:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6862:	683b      	ldr	r3, [r7, #0]
    6864:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6866:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    686a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    686e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6872:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6876:	4619      	mov	r1, r3
    6878:	6878      	ldr	r0, [r7, #4]
    687a:	4b10      	ldr	r3, [pc, #64]	; (68bc <_spi_load_regs_slave+0x9c>)
    687c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    687e:	683b      	ldr	r3, [r7, #0]
    6880:	689b      	ldr	r3, [r3, #8]
    6882:	4619      	mov	r1, r3
    6884:	6878      	ldr	r0, [r7, #4]
    6886:	4b0e      	ldr	r3, [pc, #56]	; (68c0 <_spi_load_regs_slave+0xa0>)
    6888:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    688a:	683b      	ldr	r3, [r7, #0]
    688c:	7b5b      	ldrb	r3, [r3, #13]
    688e:	4619      	mov	r1, r3
    6890:	6878      	ldr	r0, [r7, #4]
    6892:	4b0c      	ldr	r3, [pc, #48]	; (68c4 <_spi_load_regs_slave+0xa4>)
    6894:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6896:	bf00      	nop
    6898:	f04f 31ff 	mov.w	r1, #4294967295
    689c:	6878      	ldr	r0, [r7, #4]
    689e:	4b0a      	ldr	r3, [pc, #40]	; (68c8 <_spi_load_regs_slave+0xa8>)
    68a0:	4798      	blx	r3
    68a2:	4603      	mov	r3, r0
    68a4:	2b00      	cmp	r3, #0
    68a6:	d1f7      	bne.n	6898 <_spi_load_regs_slave+0x78>
		;
}
    68a8:	bf00      	nop
    68aa:	3708      	adds	r7, #8
    68ac:	46bd      	mov	sp, r7
    68ae:	bd80      	pop	{r7, pc}
    68b0:	0000f030 	.word	0x0000f030
    68b4:	0000341d 	.word	0x0000341d
    68b8:	00005bdd 	.word	0x00005bdd
    68bc:	00005cf5 	.word	0x00005cf5
    68c0:	00005dd9 	.word	0x00005dd9
    68c4:	00005e6d 	.word	0x00005e6d
    68c8:	000059a1 	.word	0x000059a1

000068cc <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    68cc:	b580      	push	{r7, lr}
    68ce:	b084      	sub	sp, #16
    68d0:	af00      	add	r7, sp, #0
    68d2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	4618      	mov	r0, r3
    68d8:	4b11      	ldr	r3, [pc, #68]	; (6920 <_spi_get_regs+0x54>)
    68da:	4798      	blx	r3
    68dc:	4603      	mov	r3, r0
    68de:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    68e0:	2300      	movs	r3, #0
    68e2:	73fb      	strb	r3, [r7, #15]
    68e4:	e014      	b.n	6910 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    68e6:	7bfa      	ldrb	r2, [r7, #15]
    68e8:	490e      	ldr	r1, [pc, #56]	; (6924 <_spi_get_regs+0x58>)
    68ea:	4613      	mov	r3, r2
    68ec:	011b      	lsls	r3, r3, #4
    68ee:	4413      	add	r3, r2
    68f0:	440b      	add	r3, r1
    68f2:	3310      	adds	r3, #16
    68f4:	781b      	ldrb	r3, [r3, #0]
    68f6:	7bba      	ldrb	r2, [r7, #14]
    68f8:	429a      	cmp	r2, r3
    68fa:	d106      	bne.n	690a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    68fc:	7bfa      	ldrb	r2, [r7, #15]
    68fe:	4613      	mov	r3, r2
    6900:	011b      	lsls	r3, r3, #4
    6902:	4413      	add	r3, r2
    6904:	4a07      	ldr	r2, [pc, #28]	; (6924 <_spi_get_regs+0x58>)
    6906:	4413      	add	r3, r2
    6908:	e006      	b.n	6918 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    690a:	7bfb      	ldrb	r3, [r7, #15]
    690c:	3301      	adds	r3, #1
    690e:	73fb      	strb	r3, [r7, #15]
    6910:	7bfb      	ldrb	r3, [r7, #15]
    6912:	2b01      	cmp	r3, #1
    6914:	d9e7      	bls.n	68e6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6916:	2300      	movs	r3, #0
}
    6918:	4618      	mov	r0, r3
    691a:	3710      	adds	r7, #16
    691c:	46bd      	mov	sp, r7
    691e:	bd80      	pop	{r7, pc}
    6920:	00005f25 	.word	0x00005f25
    6924:	0000f06c 	.word	0x0000f06c

00006928 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6928:	b580      	push	{r7, lr}
    692a:	b084      	sub	sp, #16
    692c:	af00      	add	r7, sp, #0
    692e:	6078      	str	r0, [r7, #4]
    6930:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6932:	683b      	ldr	r3, [r7, #0]
    6934:	4618      	mov	r0, r3
    6936:	4b35      	ldr	r3, [pc, #212]	; (6a0c <_spi_m_sync_init+0xe4>)
    6938:	4798      	blx	r3
    693a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	2b00      	cmp	r3, #0
    6940:	d004      	beq.n	694c <_spi_m_sync_init+0x24>
    6942:	683b      	ldr	r3, [r7, #0]
    6944:	2b00      	cmp	r3, #0
    6946:	d001      	beq.n	694c <_spi_m_sync_init+0x24>
    6948:	2301      	movs	r3, #1
    694a:	e000      	b.n	694e <_spi_m_sync_init+0x26>
    694c:	2300      	movs	r3, #0
    694e:	f003 0301 	and.w	r3, r3, #1
    6952:	b2db      	uxtb	r3, r3
    6954:	f640 123f 	movw	r2, #2367	; 0x93f
    6958:	492d      	ldr	r1, [pc, #180]	; (6a10 <_spi_m_sync_init+0xe8>)
    695a:	4618      	mov	r0, r3
    695c:	4b2d      	ldr	r3, [pc, #180]	; (6a14 <_spi_m_sync_init+0xec>)
    695e:	4798      	blx	r3

	if (regs == NULL) {
    6960:	68fb      	ldr	r3, [r7, #12]
    6962:	2b00      	cmp	r3, #0
    6964:	d102      	bne.n	696c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6966:	f06f 030c 	mvn.w	r3, #12
    696a:	e04a      	b.n	6a02 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    696c:	2101      	movs	r1, #1
    696e:	6838      	ldr	r0, [r7, #0]
    6970:	4b29      	ldr	r3, [pc, #164]	; (6a18 <_spi_m_sync_init+0xf0>)
    6972:	4798      	blx	r3
    6974:	4603      	mov	r3, r0
    6976:	f083 0301 	eor.w	r3, r3, #1
    697a:	b2db      	uxtb	r3, r3
    697c:	2b00      	cmp	r3, #0
    697e:	d019      	beq.n	69b4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6980:	68fb      	ldr	r3, [r7, #12]
    6982:	681b      	ldr	r3, [r3, #0]
    6984:	f003 031c 	and.w	r3, r3, #28
    6988:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    698a:	2102      	movs	r1, #2
    698c:	6838      	ldr	r0, [r7, #0]
    698e:	4b23      	ldr	r3, [pc, #140]	; (6a1c <_spi_m_sync_init+0xf4>)
    6990:	4798      	blx	r3
    6992:	4603      	mov	r3, r0
    6994:	2b00      	cmp	r3, #0
    6996:	d006      	beq.n	69a6 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6998:	6838      	ldr	r0, [r7, #0]
    699a:	4b21      	ldr	r3, [pc, #132]	; (6a20 <_spi_m_sync_init+0xf8>)
    699c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    699e:	2102      	movs	r1, #2
    69a0:	6838      	ldr	r0, [r7, #0]
    69a2:	4b20      	ldr	r3, [pc, #128]	; (6a24 <_spi_m_sync_init+0xfc>)
    69a4:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    69a6:	68bb      	ldr	r3, [r7, #8]
    69a8:	f043 0301 	orr.w	r3, r3, #1
    69ac:	4619      	mov	r1, r3
    69ae:	6838      	ldr	r0, [r7, #0]
    69b0:	4b1d      	ldr	r3, [pc, #116]	; (6a28 <_spi_m_sync_init+0x100>)
    69b2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    69b4:	2101      	movs	r1, #1
    69b6:	6838      	ldr	r0, [r7, #0]
    69b8:	4b1a      	ldr	r3, [pc, #104]	; (6a24 <_spi_m_sync_init+0xfc>)
    69ba:	4798      	blx	r3

	dev->prvt = hw;
    69bc:	687b      	ldr	r3, [r7, #4]
    69be:	683a      	ldr	r2, [r7, #0]
    69c0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    69c2:	68fb      	ldr	r3, [r7, #12]
    69c4:	681b      	ldr	r3, [r3, #0]
    69c6:	f003 031c 	and.w	r3, r3, #28
    69ca:	2b08      	cmp	r3, #8
    69cc:	d104      	bne.n	69d8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    69ce:	68f9      	ldr	r1, [r7, #12]
    69d0:	6838      	ldr	r0, [r7, #0]
    69d2:	4b16      	ldr	r3, [pc, #88]	; (6a2c <_spi_m_sync_init+0x104>)
    69d4:	4798      	blx	r3
    69d6:	e003      	b.n	69e0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    69d8:	68f9      	ldr	r1, [r7, #12]
    69da:	6838      	ldr	r0, [r7, #0]
    69dc:	4b14      	ldr	r3, [pc, #80]	; (6a30 <_spi_m_sync_init+0x108>)
    69de:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    69e0:	68fb      	ldr	r3, [r7, #12]
    69e2:	685b      	ldr	r3, [r3, #4]
    69e4:	f003 0307 	and.w	r3, r3, #7
    69e8:	2b00      	cmp	r3, #0
    69ea:	d101      	bne.n	69f0 <_spi_m_sync_init+0xc8>
    69ec:	2201      	movs	r2, #1
    69ee:	e000      	b.n	69f2 <_spi_m_sync_init+0xca>
    69f0:	2202      	movs	r2, #2
    69f2:	687b      	ldr	r3, [r7, #4]
    69f4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    69f6:	68fb      	ldr	r3, [r7, #12]
    69f8:	89db      	ldrh	r3, [r3, #14]
    69fa:	b29a      	uxth	r2, r3
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6a00:	2300      	movs	r3, #0
}
    6a02:	4618      	mov	r0, r3
    6a04:	3710      	adds	r7, #16
    6a06:	46bd      	mov	sp, r7
    6a08:	bd80      	pop	{r7, pc}
    6a0a:	bf00      	nop
    6a0c:	000068cd 	.word	0x000068cd
    6a10:	0000f030 	.word	0x0000f030
    6a14:	0000341d 	.word	0x0000341d
    6a18:	000059a1 	.word	0x000059a1
    6a1c:	00005bad 	.word	0x00005bad
    6a20:	00005b85 	.word	0x00005b85
    6a24:	0000597d 	.word	0x0000597d
    6a28:	00005bdd 	.word	0x00005bdd
    6a2c:	00006821 	.word	0x00006821
    6a30:	0000678d 	.word	0x0000678d

00006a34 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6a34:	b580      	push	{r7, lr}
    6a36:	b082      	sub	sp, #8
    6a38:	af00      	add	r7, sp, #0
    6a3a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6a3c:	bf00      	nop
    6a3e:	2103      	movs	r1, #3
    6a40:	6878      	ldr	r0, [r7, #4]
    6a42:	4b06      	ldr	r3, [pc, #24]	; (6a5c <_spi_wait_bus_idle+0x28>)
    6a44:	4798      	blx	r3
    6a46:	4603      	mov	r3, r0
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d0f8      	beq.n	6a3e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6a4c:	2103      	movs	r1, #3
    6a4e:	6878      	ldr	r0, [r7, #4]
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <_spi_wait_bus_idle+0x2c>)
    6a52:	4798      	blx	r3
}
    6a54:	bf00      	nop
    6a56:	3708      	adds	r7, #8
    6a58:	46bd      	mov	sp, r7
    6a5a:	bd80      	pop	{r7, pc}
    6a5c:	00005a17 	.word	0x00005a17
    6a60:	00005a59 	.word	0x00005a59

00006a64 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6a64:	b580      	push	{r7, lr}
    6a66:	b086      	sub	sp, #24
    6a68:	af00      	add	r7, sp, #0
    6a6a:	60f8      	str	r0, [r7, #12]
    6a6c:	60b9      	str	r1, [r7, #8]
    6a6e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6a70:	68bb      	ldr	r3, [r7, #8]
    6a72:	f003 0304 	and.w	r3, r3, #4
    6a76:	2b00      	cmp	r3, #0
    6a78:	d101      	bne.n	6a7e <_spi_rx_check_and_receive+0x1a>
		return false;
    6a7a:	2300      	movs	r3, #0
    6a7c:	e022      	b.n	6ac4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6a7e:	68f8      	ldr	r0, [r7, #12]
    6a80:	4b12      	ldr	r3, [pc, #72]	; (6acc <_spi_rx_check_and_receive+0x68>)
    6a82:	4798      	blx	r3
    6a84:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	685b      	ldr	r3, [r3, #4]
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	d014      	beq.n	6ab8 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6a8e:	687b      	ldr	r3, [r7, #4]
    6a90:	685b      	ldr	r3, [r3, #4]
    6a92:	1c59      	adds	r1, r3, #1
    6a94:	687a      	ldr	r2, [r7, #4]
    6a96:	6051      	str	r1, [r2, #4]
    6a98:	697a      	ldr	r2, [r7, #20]
    6a9a:	b2d2      	uxtb	r2, r2
    6a9c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6a9e:	687b      	ldr	r3, [r7, #4]
    6aa0:	7c1b      	ldrb	r3, [r3, #16]
    6aa2:	2b01      	cmp	r3, #1
    6aa4:	d908      	bls.n	6ab8 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	685b      	ldr	r3, [r3, #4]
    6aaa:	1c59      	adds	r1, r3, #1
    6aac:	687a      	ldr	r2, [r7, #4]
    6aae:	6051      	str	r1, [r2, #4]
    6ab0:	697a      	ldr	r2, [r7, #20]
    6ab2:	0a12      	lsrs	r2, r2, #8
    6ab4:	b2d2      	uxtb	r2, r2
    6ab6:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	68db      	ldr	r3, [r3, #12]
    6abc:	1c5a      	adds	r2, r3, #1
    6abe:	687b      	ldr	r3, [r7, #4]
    6ac0:	60da      	str	r2, [r3, #12]

	return true;
    6ac2:	2301      	movs	r3, #1
}
    6ac4:	4618      	mov	r0, r3
    6ac6:	3718      	adds	r7, #24
    6ac8:	46bd      	mov	sp, r7
    6aca:	bd80      	pop	{r7, pc}
    6acc:	00005e55 	.word	0x00005e55

00006ad0 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b086      	sub	sp, #24
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	60f8      	str	r0, [r7, #12]
    6ad8:	60b9      	str	r1, [r7, #8]
    6ada:	607a      	str	r2, [r7, #4]
    6adc:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6ade:	68bb      	ldr	r3, [r7, #8]
    6ae0:	f003 0301 	and.w	r3, r3, #1
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d028      	beq.n	6b3a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	681b      	ldr	r3, [r3, #0]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d018      	beq.n	6b22 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6af0:	687b      	ldr	r3, [r7, #4]
    6af2:	681b      	ldr	r3, [r3, #0]
    6af4:	1c59      	adds	r1, r3, #1
    6af6:	687a      	ldr	r2, [r7, #4]
    6af8:	6011      	str	r1, [r2, #0]
    6afa:	781b      	ldrb	r3, [r3, #0]
    6afc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	7c1b      	ldrb	r3, [r3, #16]
    6b02:	2b01      	cmp	r3, #1
    6b04:	d90f      	bls.n	6b26 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6b06:	687b      	ldr	r3, [r7, #4]
    6b08:	681b      	ldr	r3, [r3, #0]
    6b0a:	781b      	ldrb	r3, [r3, #0]
    6b0c:	021b      	lsls	r3, r3, #8
    6b0e:	461a      	mov	r2, r3
    6b10:	697b      	ldr	r3, [r7, #20]
    6b12:	4313      	orrs	r3, r2
    6b14:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6b16:	687b      	ldr	r3, [r7, #4]
    6b18:	681b      	ldr	r3, [r3, #0]
    6b1a:	1c5a      	adds	r2, r3, #1
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	601a      	str	r2, [r3, #0]
    6b20:	e001      	b.n	6b26 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6b22:	887b      	ldrh	r3, [r7, #2]
    6b24:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	689b      	ldr	r3, [r3, #8]
    6b2a:	1c5a      	adds	r2, r3, #1
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6b30:	6979      	ldr	r1, [r7, #20]
    6b32:	68f8      	ldr	r0, [r7, #12]
    6b34:	4b03      	ldr	r3, [pc, #12]	; (6b44 <_spi_tx_check_and_send+0x74>)
    6b36:	4798      	blx	r3
    6b38:	e000      	b.n	6b3c <_spi_tx_check_and_send+0x6c>
		return;
    6b3a:	bf00      	nop
}
    6b3c:	3718      	adds	r7, #24
    6b3e:	46bd      	mov	sp, r7
    6b40:	bd80      	pop	{r7, pc}
    6b42:	bf00      	nop
    6b44:	00005e39 	.word	0x00005e39

00006b48 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6b48:	b580      	push	{r7, lr}
    6b4a:	b082      	sub	sp, #8
    6b4c:	af00      	add	r7, sp, #0
    6b4e:	6078      	str	r0, [r7, #4]
    6b50:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6b52:	687b      	ldr	r3, [r7, #4]
    6b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d00b      	beq.n	6b74 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6b60:	6838      	ldr	r0, [r7, #0]
    6b62:	4b07      	ldr	r3, [pc, #28]	; (6b80 <_spi_err_check+0x38>)
    6b64:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6b66:	2180      	movs	r1, #128	; 0x80
    6b68:	6838      	ldr	r0, [r7, #0]
    6b6a:	4b06      	ldr	r3, [pc, #24]	; (6b84 <_spi_err_check+0x3c>)
    6b6c:	4798      	blx	r3
		return ERR_OVERFLOW;
    6b6e:	f06f 0312 	mvn.w	r3, #18
    6b72:	e000      	b.n	6b76 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6b74:	2300      	movs	r3, #0
}
    6b76:	4618      	mov	r0, r3
    6b78:	3708      	adds	r7, #8
    6b7a:	46bd      	mov	sp, r7
    6b7c:	bd80      	pop	{r7, pc}
    6b7e:	bf00      	nop
    6b80:	00005e8d 	.word	0x00005e8d
    6b84:	00005a59 	.word	0x00005a59

00006b88 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6b88:	b590      	push	{r4, r7, lr}
    6b8a:	b08b      	sub	sp, #44	; 0x2c
    6b8c:	af00      	add	r7, sp, #0
    6b8e:	6078      	str	r0, [r7, #4]
    6b90:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6b92:	687b      	ldr	r3, [r7, #4]
    6b94:	681b      	ldr	r3, [r3, #0]
    6b96:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6b98:	2300      	movs	r3, #0
    6b9a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6b9c:	683b      	ldr	r3, [r7, #0]
    6b9e:	681b      	ldr	r3, [r3, #0]
    6ba0:	60bb      	str	r3, [r7, #8]
    6ba2:	683b      	ldr	r3, [r7, #0]
    6ba4:	685b      	ldr	r3, [r3, #4]
    6ba6:	60fb      	str	r3, [r7, #12]
    6ba8:	2300      	movs	r3, #0
    6baa:	613b      	str	r3, [r7, #16]
    6bac:	2300      	movs	r3, #0
    6bae:	617b      	str	r3, [r7, #20]
    6bb0:	687b      	ldr	r3, [r7, #4]
    6bb2:	791b      	ldrb	r3, [r3, #4]
    6bb4:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6bb6:	687b      	ldr	r3, [r7, #4]
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d004      	beq.n	6bc6 <_spi_m_sync_trans+0x3e>
    6bbc:	6a3b      	ldr	r3, [r7, #32]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d001      	beq.n	6bc6 <_spi_m_sync_trans+0x3e>
    6bc2:	2301      	movs	r3, #1
    6bc4:	e000      	b.n	6bc8 <_spi_m_sync_trans+0x40>
    6bc6:	2300      	movs	r3, #0
    6bc8:	f003 0301 	and.w	r3, r3, #1
    6bcc:	b2db      	uxtb	r3, r3
    6bce:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6bd2:	492b      	ldr	r1, [pc, #172]	; (6c80 <_spi_m_sync_trans+0xf8>)
    6bd4:	4618      	mov	r0, r3
    6bd6:	4b2b      	ldr	r3, [pc, #172]	; (6c84 <_spi_m_sync_trans+0xfc>)
    6bd8:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6bda:	2107      	movs	r1, #7
    6bdc:	6a38      	ldr	r0, [r7, #32]
    6bde:	4b2a      	ldr	r3, [pc, #168]	; (6c88 <_spi_m_sync_trans+0x100>)
    6be0:	4798      	blx	r3
    6be2:	4603      	mov	r3, r0
    6be4:	2b00      	cmp	r3, #0
    6be6:	d002      	beq.n	6bee <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6be8:	f06f 0303 	mvn.w	r3, #3
    6bec:	e043      	b.n	6c76 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6bee:	6a38      	ldr	r0, [r7, #32]
    6bf0:	4b26      	ldr	r3, [pc, #152]	; (6c8c <_spi_m_sync_trans+0x104>)
    6bf2:	4798      	blx	r3
    6bf4:	4603      	mov	r3, r0
    6bf6:	f083 0301 	eor.w	r3, r3, #1
    6bfa:	b2db      	uxtb	r3, r3
    6bfc:	2b00      	cmp	r3, #0
    6bfe:	d002      	beq.n	6c06 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6c00:	f06f 0313 	mvn.w	r3, #19
    6c04:	e037      	b.n	6c76 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6c06:	6a38      	ldr	r0, [r7, #32]
    6c08:	4b21      	ldr	r3, [pc, #132]	; (6c90 <_spi_m_sync_trans+0x108>)
    6c0a:	4798      	blx	r3
    6c0c:	4603      	mov	r3, r0
    6c0e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6c10:	f107 0308 	add.w	r3, r7, #8
    6c14:	461a      	mov	r2, r3
    6c16:	69f9      	ldr	r1, [r7, #28]
    6c18:	6a38      	ldr	r0, [r7, #32]
    6c1a:	4b1e      	ldr	r3, [pc, #120]	; (6c94 <_spi_m_sync_trans+0x10c>)
    6c1c:	4798      	blx	r3
    6c1e:	4603      	mov	r3, r0
    6c20:	f083 0301 	eor.w	r3, r3, #1
    6c24:	b2db      	uxtb	r3, r3
    6c26:	2b00      	cmp	r3, #0
    6c28:	d00b      	beq.n	6c42 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6c2a:	697a      	ldr	r2, [r7, #20]
    6c2c:	693b      	ldr	r3, [r7, #16]
    6c2e:	429a      	cmp	r2, r3
    6c30:	d307      	bcc.n	6c42 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6c32:	687b      	ldr	r3, [r7, #4]
    6c34:	88db      	ldrh	r3, [r3, #6]
    6c36:	f107 0208 	add.w	r2, r7, #8
    6c3a:	69f9      	ldr	r1, [r7, #28]
    6c3c:	6a38      	ldr	r0, [r7, #32]
    6c3e:	4c16      	ldr	r4, [pc, #88]	; (6c98 <_spi_m_sync_trans+0x110>)
    6c40:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6c42:	6a39      	ldr	r1, [r7, #32]
    6c44:	69f8      	ldr	r0, [r7, #28]
    6c46:	4b15      	ldr	r3, [pc, #84]	; (6c9c <_spi_m_sync_trans+0x114>)
    6c48:	4798      	blx	r3
    6c4a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c4e:	2b00      	cmp	r3, #0
    6c50:	db0c      	blt.n	6c6c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6c52:	693a      	ldr	r2, [r7, #16]
    6c54:	683b      	ldr	r3, [r7, #0]
    6c56:	689b      	ldr	r3, [r3, #8]
    6c58:	429a      	cmp	r2, r3
    6c5a:	d3d4      	bcc.n	6c06 <_spi_m_sync_trans+0x7e>
    6c5c:	697a      	ldr	r2, [r7, #20]
    6c5e:	683b      	ldr	r3, [r7, #0]
    6c60:	689b      	ldr	r3, [r3, #8]
    6c62:	429a      	cmp	r2, r3
    6c64:	d3cf      	bcc.n	6c06 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6c66:	693b      	ldr	r3, [r7, #16]
    6c68:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6c6a:	e000      	b.n	6c6e <_spi_m_sync_trans+0xe6>
			break;
    6c6c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6c6e:	6a38      	ldr	r0, [r7, #32]
    6c70:	4b0b      	ldr	r3, [pc, #44]	; (6ca0 <_spi_m_sync_trans+0x118>)
    6c72:	4798      	blx	r3

	return rc;
    6c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6c76:	4618      	mov	r0, r3
    6c78:	372c      	adds	r7, #44	; 0x2c
    6c7a:	46bd      	mov	sp, r7
    6c7c:	bd90      	pop	{r4, r7, pc}
    6c7e:	bf00      	nop
    6c80:	0000f030 	.word	0x0000f030
    6c84:	0000341d 	.word	0x0000341d
    6c88:	000059a1 	.word	0x000059a1
    6c8c:	00005b4d 	.word	0x00005b4d
    6c90:	00005a3f 	.word	0x00005a3f
    6c94:	00006a65 	.word	0x00006a65
    6c98:	00006ad1 	.word	0x00006ad1
    6c9c:	00006b49 	.word	0x00006b49
    6ca0:	00006a35 	.word	0x00006a35

00006ca4 <__NVIC_EnableIRQ>:
{
    6ca4:	b480      	push	{r7}
    6ca6:	b083      	sub	sp, #12
    6ca8:	af00      	add	r7, sp, #0
    6caa:	4603      	mov	r3, r0
    6cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	db0b      	blt.n	6cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6cb6:	4909      	ldr	r1, [pc, #36]	; (6cdc <__NVIC_EnableIRQ+0x38>)
    6cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6cbc:	095b      	lsrs	r3, r3, #5
    6cbe:	88fa      	ldrh	r2, [r7, #6]
    6cc0:	f002 021f 	and.w	r2, r2, #31
    6cc4:	2001      	movs	r0, #1
    6cc6:	fa00 f202 	lsl.w	r2, r0, r2
    6cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6cce:	bf00      	nop
    6cd0:	370c      	adds	r7, #12
    6cd2:	46bd      	mov	sp, r7
    6cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cd8:	4770      	bx	lr
    6cda:	bf00      	nop
    6cdc:	e000e100 	.word	0xe000e100

00006ce0 <__NVIC_DisableIRQ>:
{
    6ce0:	b480      	push	{r7}
    6ce2:	b083      	sub	sp, #12
    6ce4:	af00      	add	r7, sp, #0
    6ce6:	4603      	mov	r3, r0
    6ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	db10      	blt.n	6d14 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6cf2:	490b      	ldr	r1, [pc, #44]	; (6d20 <__NVIC_DisableIRQ+0x40>)
    6cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6cf8:	095b      	lsrs	r3, r3, #5
    6cfa:	88fa      	ldrh	r2, [r7, #6]
    6cfc:	f002 021f 	and.w	r2, r2, #31
    6d00:	2001      	movs	r0, #1
    6d02:	fa00 f202 	lsl.w	r2, r0, r2
    6d06:	3320      	adds	r3, #32
    6d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d10:	f3bf 8f6f 	isb	sy
}
    6d14:	bf00      	nop
    6d16:	370c      	adds	r7, #12
    6d18:	46bd      	mov	sp, r7
    6d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d1e:	4770      	bx	lr
    6d20:	e000e100 	.word	0xe000e100

00006d24 <__NVIC_ClearPendingIRQ>:
{
    6d24:	b480      	push	{r7}
    6d26:	b083      	sub	sp, #12
    6d28:	af00      	add	r7, sp, #0
    6d2a:	4603      	mov	r3, r0
    6d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d32:	2b00      	cmp	r3, #0
    6d34:	db0c      	blt.n	6d50 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d36:	4909      	ldr	r1, [pc, #36]	; (6d5c <__NVIC_ClearPendingIRQ+0x38>)
    6d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d3c:	095b      	lsrs	r3, r3, #5
    6d3e:	88fa      	ldrh	r2, [r7, #6]
    6d40:	f002 021f 	and.w	r2, r2, #31
    6d44:	2001      	movs	r0, #1
    6d46:	fa00 f202 	lsl.w	r2, r0, r2
    6d4a:	3360      	adds	r3, #96	; 0x60
    6d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d50:	bf00      	nop
    6d52:	370c      	adds	r7, #12
    6d54:	46bd      	mov	sp, r7
    6d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d5a:	4770      	bx	lr
    6d5c:	e000e100 	.word	0xe000e100

00006d60 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6d60:	b480      	push	{r7}
    6d62:	b083      	sub	sp, #12
    6d64:	af00      	add	r7, sp, #0
    6d66:	6078      	str	r0, [r7, #4]
    6d68:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    6d6a:	bf00      	nop
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	689a      	ldr	r2, [r3, #8]
    6d70:	683b      	ldr	r3, [r7, #0]
    6d72:	4013      	ands	r3, r2
    6d74:	2b00      	cmp	r3, #0
    6d76:	d1f9      	bne.n	6d6c <hri_tcc_wait_for_sync+0xc>
	};
}
    6d78:	bf00      	nop
    6d7a:	370c      	adds	r7, #12
    6d7c:	46bd      	mov	sp, r7
    6d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d82:	4770      	bx	lr

00006d84 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6d84:	b480      	push	{r7}
    6d86:	b083      	sub	sp, #12
    6d88:	af00      	add	r7, sp, #0
    6d8a:	6078      	str	r0, [r7, #4]
    6d8c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	689a      	ldr	r2, [r3, #8]
    6d92:	683b      	ldr	r3, [r7, #0]
    6d94:	4013      	ands	r3, r2
    6d96:	2b00      	cmp	r3, #0
    6d98:	bf14      	ite	ne
    6d9a:	2301      	movne	r3, #1
    6d9c:	2300      	moveq	r3, #0
    6d9e:	b2db      	uxtb	r3, r3
}
    6da0:	4618      	mov	r0, r3
    6da2:	370c      	adds	r7, #12
    6da4:	46bd      	mov	sp, r7
    6da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6daa:	4770      	bx	lr

00006dac <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6dac:	b480      	push	{r7}
    6dae:	b083      	sub	sp, #12
    6db0:	af00      	add	r7, sp, #0
    6db2:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6db8:	f003 0301 	and.w	r3, r3, #1
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	bf14      	ite	ne
    6dc0:	2301      	movne	r3, #1
    6dc2:	2300      	moveq	r3, #0
    6dc4:	b2db      	uxtb	r3, r3
}
    6dc6:	4618      	mov	r0, r3
    6dc8:	370c      	adds	r7, #12
    6dca:	46bd      	mov	sp, r7
    6dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dd0:	4770      	bx	lr

00006dd2 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6dd2:	b480      	push	{r7}
    6dd4:	b083      	sub	sp, #12
    6dd6:	af00      	add	r7, sp, #0
    6dd8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	2201      	movs	r2, #1
    6dde:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6de0:	bf00      	nop
    6de2:	370c      	adds	r7, #12
    6de4:	46bd      	mov	sp, r7
    6de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dea:	4770      	bx	lr

00006dec <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6dec:	b480      	push	{r7}
    6dee:	b083      	sub	sp, #12
    6df0:	af00      	add	r7, sp, #0
    6df2:	6078      	str	r0, [r7, #4]
    6df4:	460b      	mov	r3, r1
    6df6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	78fa      	ldrb	r2, [r7, #3]
    6dfc:	715a      	strb	r2, [r3, #5]
}
    6dfe:	bf00      	nop
    6e00:	370c      	adds	r7, #12
    6e02:	46bd      	mov	sp, r7
    6e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e08:	4770      	bx	lr

00006e0a <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6e0a:	b480      	push	{r7}
    6e0c:	b083      	sub	sp, #12
    6e0e:	af00      	add	r7, sp, #0
    6e10:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	2201      	movs	r2, #1
    6e16:	629a      	str	r2, [r3, #40]	; 0x28
}
    6e18:	bf00      	nop
    6e1a:	370c      	adds	r7, #12
    6e1c:	46bd      	mov	sp, r7
    6e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e22:	4770      	bx	lr

00006e24 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6e24:	b580      	push	{r7, lr}
    6e26:	b082      	sub	sp, #8
    6e28:	af00      	add	r7, sp, #0
    6e2a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6e2c:	687b      	ldr	r3, [r7, #4]
    6e2e:	681b      	ldr	r3, [r3, #0]
    6e30:	f043 0201 	orr.w	r2, r3, #1
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6e38:	2101      	movs	r1, #1
    6e3a:	6878      	ldr	r0, [r7, #4]
    6e3c:	4b02      	ldr	r3, [pc, #8]	; (6e48 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6e3e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e40:	bf00      	nop
    6e42:	3708      	adds	r7, #8
    6e44:	46bd      	mov	sp, r7
    6e46:	bd80      	pop	{r7, pc}
    6e48:	00006d61 	.word	0x00006d61

00006e4c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6e4c:	b580      	push	{r7, lr}
    6e4e:	b082      	sub	sp, #8
    6e50:	af00      	add	r7, sp, #0
    6e52:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	f043 0202 	orr.w	r2, r3, #2
    6e5c:	687b      	ldr	r3, [r7, #4]
    6e5e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6e60:	2103      	movs	r1, #3
    6e62:	6878      	ldr	r0, [r7, #4]
    6e64:	4b02      	ldr	r3, [pc, #8]	; (6e70 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    6e66:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6e68:	bf00      	nop
    6e6a:	3708      	adds	r7, #8
    6e6c:	46bd      	mov	sp, r7
    6e6e:	bd80      	pop	{r7, pc}
    6e70:	00006d61 	.word	0x00006d61

00006e74 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6e74:	b580      	push	{r7, lr}
    6e76:	b084      	sub	sp, #16
    6e78:	af00      	add	r7, sp, #0
    6e7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6e7c:	2103      	movs	r1, #3
    6e7e:	6878      	ldr	r0, [r7, #4]
    6e80:	4b09      	ldr	r3, [pc, #36]	; (6ea8 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    6e82:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	681b      	ldr	r3, [r3, #0]
    6e88:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6e8a:	68fb      	ldr	r3, [r7, #12]
    6e8c:	085b      	lsrs	r3, r3, #1
    6e8e:	f003 0301 	and.w	r3, r3, #1
    6e92:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6e94:	68fb      	ldr	r3, [r7, #12]
    6e96:	2b00      	cmp	r3, #0
    6e98:	bf14      	ite	ne
    6e9a:	2301      	movne	r3, #1
    6e9c:	2300      	moveq	r3, #0
    6e9e:	b2db      	uxtb	r3, r3
}
    6ea0:	4618      	mov	r0, r3
    6ea2:	3710      	adds	r7, #16
    6ea4:	46bd      	mov	sp, r7
    6ea6:	bd80      	pop	{r7, pc}
    6ea8:	00006d61 	.word	0x00006d61

00006eac <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6eac:	b580      	push	{r7, lr}
    6eae:	b082      	sub	sp, #8
    6eb0:	af00      	add	r7, sp, #0
    6eb2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	681b      	ldr	r3, [r3, #0]
    6eb8:	f023 0202 	bic.w	r2, r3, #2
    6ebc:	687b      	ldr	r3, [r7, #4]
    6ebe:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6ec0:	2103      	movs	r1, #3
    6ec2:	6878      	ldr	r0, [r7, #4]
    6ec4:	4b02      	ldr	r3, [pc, #8]	; (6ed0 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    6ec6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6ec8:	bf00      	nop
    6eca:	3708      	adds	r7, #8
    6ecc:	46bd      	mov	sp, r7
    6ece:	bd80      	pop	{r7, pc}
    6ed0:	00006d61 	.word	0x00006d61

00006ed4 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b084      	sub	sp, #16
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
    6edc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6ede:	2103      	movs	r1, #3
    6ee0:	6878      	ldr	r0, [r7, #4]
    6ee2:	4b07      	ldr	r3, [pc, #28]	; (6f00 <hri_tcc_get_CTRLA_reg+0x2c>)
    6ee4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	681b      	ldr	r3, [r3, #0]
    6eea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6eec:	68fa      	ldr	r2, [r7, #12]
    6eee:	683b      	ldr	r3, [r7, #0]
    6ef0:	4013      	ands	r3, r2
    6ef2:	60fb      	str	r3, [r7, #12]
	return tmp;
    6ef4:	68fb      	ldr	r3, [r7, #12]
}
    6ef6:	4618      	mov	r0, r3
    6ef8:	3710      	adds	r7, #16
    6efa:	46bd      	mov	sp, r7
    6efc:	bd80      	pop	{r7, pc}
    6efe:	bf00      	nop
    6f00:	00006d61 	.word	0x00006d61

00006f04 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    6f04:	b580      	push	{r7, lr}
    6f06:	b082      	sub	sp, #8
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
    6f0c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6f0e:	687b      	ldr	r3, [r7, #4]
    6f10:	683a      	ldr	r2, [r7, #0]
    6f12:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6f14:	2103      	movs	r1, #3
    6f16:	6878      	ldr	r0, [r7, #4]
    6f18:	4b02      	ldr	r3, [pc, #8]	; (6f24 <hri_tcc_write_CTRLA_reg+0x20>)
    6f1a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6f1c:	bf00      	nop
    6f1e:	3708      	adds	r7, #8
    6f20:	46bd      	mov	sp, r7
    6f22:	bd80      	pop	{r7, pc}
    6f24:	00006d61 	.word	0x00006d61

00006f28 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    6f28:	b480      	push	{r7}
    6f2a:	b083      	sub	sp, #12
    6f2c:	af00      	add	r7, sp, #0
    6f2e:	6078      	str	r0, [r7, #4]
    6f30:	460b      	mov	r3, r1
    6f32:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    6f34:	687b      	ldr	r3, [r7, #4]
    6f36:	78fa      	ldrb	r2, [r7, #3]
    6f38:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6f3a:	bf00      	nop
    6f3c:	370c      	adds	r7, #12
    6f3e:	46bd      	mov	sp, r7
    6f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f44:	4770      	bx	lr

00006f46 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    6f46:	b480      	push	{r7}
    6f48:	b083      	sub	sp, #12
    6f4a:	af00      	add	r7, sp, #0
    6f4c:	6078      	str	r0, [r7, #4]
    6f4e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    6f50:	687b      	ldr	r3, [r7, #4]
    6f52:	683a      	ldr	r2, [r7, #0]
    6f54:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6f56:	bf00      	nop
    6f58:	370c      	adds	r7, #12
    6f5a:	46bd      	mov	sp, r7
    6f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f60:	4770      	bx	lr
	...

00006f64 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    6f64:	b580      	push	{r7, lr}
    6f66:	b082      	sub	sp, #8
    6f68:	af00      	add	r7, sp, #0
    6f6a:	6078      	str	r0, [r7, #4]
    6f6c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	683a      	ldr	r2, [r7, #0]
    6f72:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6f74:	2180      	movs	r1, #128	; 0x80
    6f76:	6878      	ldr	r0, [r7, #4]
    6f78:	4b02      	ldr	r3, [pc, #8]	; (6f84 <hri_tcc_write_PER_reg+0x20>)
    6f7a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6f7c:	bf00      	nop
    6f7e:	3708      	adds	r7, #8
    6f80:	46bd      	mov	sp, r7
    6f82:	bd80      	pop	{r7, pc}
    6f84:	00006d61 	.word	0x00006d61

00006f88 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b082      	sub	sp, #8
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6f90:	2180      	movs	r1, #128	; 0x80
    6f92:	6878      	ldr	r0, [r7, #4]
    6f94:	4b03      	ldr	r3, [pc, #12]	; (6fa4 <hri_tcc_read_PER_reg+0x1c>)
    6f96:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    6f9c:	4618      	mov	r0, r3
    6f9e:	3708      	adds	r7, #8
    6fa0:	46bd      	mov	sp, r7
    6fa2:	bd80      	pop	{r7, pc}
    6fa4:	00006d61 	.word	0x00006d61

00006fa8 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    6fa8:	b480      	push	{r7}
    6faa:	b083      	sub	sp, #12
    6fac:	af00      	add	r7, sp, #0
    6fae:	6078      	str	r0, [r7, #4]
    6fb0:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	4a0c      	ldr	r2, [pc, #48]	; (6fe8 <_tcc_init_irq_param+0x40>)
    6fb6:	4293      	cmp	r3, r2
    6fb8:	d102      	bne.n	6fc0 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    6fba:	4a0c      	ldr	r2, [pc, #48]	; (6fec <_tcc_init_irq_param+0x44>)
    6fbc:	683b      	ldr	r3, [r7, #0]
    6fbe:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    6fc0:	687b      	ldr	r3, [r7, #4]
    6fc2:	4a0b      	ldr	r2, [pc, #44]	; (6ff0 <_tcc_init_irq_param+0x48>)
    6fc4:	4293      	cmp	r3, r2
    6fc6:	d102      	bne.n	6fce <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    6fc8:	4a0a      	ldr	r2, [pc, #40]	; (6ff4 <_tcc_init_irq_param+0x4c>)
    6fca:	683b      	ldr	r3, [r7, #0]
    6fcc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	4a09      	ldr	r2, [pc, #36]	; (6ff8 <_tcc_init_irq_param+0x50>)
    6fd2:	4293      	cmp	r3, r2
    6fd4:	d102      	bne.n	6fdc <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    6fd6:	4a09      	ldr	r2, [pc, #36]	; (6ffc <_tcc_init_irq_param+0x54>)
    6fd8:	683b      	ldr	r3, [r7, #0]
    6fda:	6013      	str	r3, [r2, #0]
	}
}
    6fdc:	bf00      	nop
    6fde:	370c      	adds	r7, #12
    6fe0:	46bd      	mov	sp, r7
    6fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fe6:	4770      	bx	lr
    6fe8:	41016000 	.word	0x41016000
    6fec:	200009ec 	.word	0x200009ec
    6ff0:	41018000 	.word	0x41018000
    6ff4:	200009f0 	.word	0x200009f0
    6ff8:	42000c00 	.word	0x42000c00
    6ffc:	200009f4 	.word	0x200009f4

00007000 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7000:	b580      	push	{r7, lr}
    7002:	b084      	sub	sp, #16
    7004:	af00      	add	r7, sp, #0
    7006:	6078      	str	r0, [r7, #4]
    7008:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    700a:	6838      	ldr	r0, [r7, #0]
    700c:	4b33      	ldr	r3, [pc, #204]	; (70dc <_tcc_timer_init+0xdc>)
    700e:	4798      	blx	r3
    7010:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7012:	68fb      	ldr	r3, [r7, #12]
    7014:	2b00      	cmp	r3, #0
    7016:	d102      	bne.n	701e <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7018:	f06f 0309 	mvn.w	r3, #9
    701c:	e05a      	b.n	70d4 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	683a      	ldr	r2, [r7, #0]
    7022:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7024:	2101      	movs	r1, #1
    7026:	6838      	ldr	r0, [r7, #0]
    7028:	4b2d      	ldr	r3, [pc, #180]	; (70e0 <_tcc_timer_init+0xe0>)
    702a:	4798      	blx	r3
    702c:	4603      	mov	r3, r0
    702e:	f083 0301 	eor.w	r3, r3, #1
    7032:	b2db      	uxtb	r3, r3
    7034:	2b00      	cmp	r3, #0
    7036:	d011      	beq.n	705c <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7038:	2102      	movs	r1, #2
    703a:	6838      	ldr	r0, [r7, #0]
    703c:	4b29      	ldr	r3, [pc, #164]	; (70e4 <_tcc_timer_init+0xe4>)
    703e:	4798      	blx	r3
    7040:	4603      	mov	r3, r0
    7042:	2b00      	cmp	r3, #0
    7044:	d006      	beq.n	7054 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7046:	6838      	ldr	r0, [r7, #0]
    7048:	4b27      	ldr	r3, [pc, #156]	; (70e8 <_tcc_timer_init+0xe8>)
    704a:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    704c:	2102      	movs	r1, #2
    704e:	6838      	ldr	r0, [r7, #0]
    7050:	4b26      	ldr	r3, [pc, #152]	; (70ec <_tcc_timer_init+0xec>)
    7052:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7054:	2101      	movs	r1, #1
    7056:	6838      	ldr	r0, [r7, #0]
    7058:	4b25      	ldr	r3, [pc, #148]	; (70f0 <_tcc_timer_init+0xf0>)
    705a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    705c:	2101      	movs	r1, #1
    705e:	6838      	ldr	r0, [r7, #0]
    7060:	4b22      	ldr	r3, [pc, #136]	; (70ec <_tcc_timer_init+0xec>)
    7062:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7064:	68fb      	ldr	r3, [r7, #12]
    7066:	689b      	ldr	r3, [r3, #8]
    7068:	4619      	mov	r1, r3
    706a:	6838      	ldr	r0, [r7, #0]
    706c:	4b20      	ldr	r3, [pc, #128]	; (70f0 <_tcc_timer_init+0xf0>)
    706e:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7070:	68fb      	ldr	r3, [r7, #12]
    7072:	7b1b      	ldrb	r3, [r3, #12]
    7074:	4619      	mov	r1, r3
    7076:	6838      	ldr	r0, [r7, #0]
    7078:	4b1e      	ldr	r3, [pc, #120]	; (70f4 <_tcc_timer_init+0xf4>)
    707a:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    707c:	68fb      	ldr	r3, [r7, #12]
    707e:	7b5b      	ldrb	r3, [r3, #13]
    7080:	4619      	mov	r1, r3
    7082:	6838      	ldr	r0, [r7, #0]
    7084:	4b1c      	ldr	r3, [pc, #112]	; (70f8 <_tcc_timer_init+0xf8>)
    7086:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7088:	68fb      	ldr	r3, [r7, #12]
    708a:	691b      	ldr	r3, [r3, #16]
    708c:	4619      	mov	r1, r3
    708e:	6838      	ldr	r0, [r7, #0]
    7090:	4b1a      	ldr	r3, [pc, #104]	; (70fc <_tcc_timer_init+0xfc>)
    7092:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7094:	68fb      	ldr	r3, [r7, #12]
    7096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7098:	4619      	mov	r1, r3
    709a:	6838      	ldr	r0, [r7, #0]
    709c:	4b18      	ldr	r3, [pc, #96]	; (7100 <_tcc_timer_init+0x100>)
    709e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    70a0:	6838      	ldr	r0, [r7, #0]
    70a2:	4b18      	ldr	r3, [pc, #96]	; (7104 <_tcc_timer_init+0x104>)
    70a4:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    70a6:	6879      	ldr	r1, [r7, #4]
    70a8:	6838      	ldr	r0, [r7, #0]
    70aa:	4b17      	ldr	r3, [pc, #92]	; (7108 <_tcc_timer_init+0x108>)
    70ac:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    70ae:	68fb      	ldr	r3, [r7, #12]
    70b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    70b4:	4618      	mov	r0, r3
    70b6:	4b15      	ldr	r3, [pc, #84]	; (710c <_tcc_timer_init+0x10c>)
    70b8:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    70c0:	4618      	mov	r0, r3
    70c2:	4b13      	ldr	r3, [pc, #76]	; (7110 <_tcc_timer_init+0x110>)
    70c4:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    70c6:	68fb      	ldr	r3, [r7, #12]
    70c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    70cc:	4618      	mov	r0, r3
    70ce:	4b11      	ldr	r3, [pc, #68]	; (7114 <_tcc_timer_init+0x114>)
    70d0:	4798      	blx	r3

	return ERR_NONE;
    70d2:	2300      	movs	r3, #0
}
    70d4:	4618      	mov	r0, r3
    70d6:	3710      	adds	r7, #16
    70d8:	46bd      	mov	sp, r7
    70da:	bd80      	pop	{r7, pc}
    70dc:	000072e5 	.word	0x000072e5
    70e0:	00006d85 	.word	0x00006d85
    70e4:	00006ed5 	.word	0x00006ed5
    70e8:	00006ead 	.word	0x00006ead
    70ec:	00006d61 	.word	0x00006d61
    70f0:	00006f05 	.word	0x00006f05
    70f4:	00006ded 	.word	0x00006ded
    70f8:	00006f29 	.word	0x00006f29
    70fc:	00006f47 	.word	0x00006f47
    7100:	00006f65 	.word	0x00006f65
    7104:	00006e0b 	.word	0x00006e0b
    7108:	00006fa9 	.word	0x00006fa9
    710c:	00006ce1 	.word	0x00006ce1
    7110:	00006d25 	.word	0x00006d25
    7114:	00006ca5 	.word	0x00006ca5

00007118 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7118:	b580      	push	{r7, lr}
    711a:	b084      	sub	sp, #16
    711c:	af00      	add	r7, sp, #0
    711e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7120:	687b      	ldr	r3, [r7, #4]
    7122:	68db      	ldr	r3, [r3, #12]
    7124:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7126:	68f8      	ldr	r0, [r7, #12]
    7128:	4b0a      	ldr	r3, [pc, #40]	; (7154 <_tcc_timer_deinit+0x3c>)
    712a:	4798      	blx	r3
    712c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    712e:	68bb      	ldr	r3, [r7, #8]
    7130:	2b00      	cmp	r3, #0
    7132:	d00b      	beq.n	714c <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7134:	68bb      	ldr	r3, [r7, #8]
    7136:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    713a:	4618      	mov	r0, r3
    713c:	4b06      	ldr	r3, [pc, #24]	; (7158 <_tcc_timer_deinit+0x40>)
    713e:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7140:	68f8      	ldr	r0, [r7, #12]
    7142:	4b06      	ldr	r3, [pc, #24]	; (715c <_tcc_timer_deinit+0x44>)
    7144:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7146:	68f8      	ldr	r0, [r7, #12]
    7148:	4b05      	ldr	r3, [pc, #20]	; (7160 <_tcc_timer_deinit+0x48>)
    714a:	4798      	blx	r3
	}
}
    714c:	bf00      	nop
    714e:	3710      	adds	r7, #16
    7150:	46bd      	mov	sp, r7
    7152:	bd80      	pop	{r7, pc}
    7154:	000072e5 	.word	0x000072e5
    7158:	00006ce1 	.word	0x00006ce1
    715c:	00006ead 	.word	0x00006ead
    7160:	00006e25 	.word	0x00006e25

00007164 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7164:	b580      	push	{r7, lr}
    7166:	b082      	sub	sp, #8
    7168:	af00      	add	r7, sp, #0
    716a:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	68db      	ldr	r3, [r3, #12]
    7170:	4618      	mov	r0, r3
    7172:	4b03      	ldr	r3, [pc, #12]	; (7180 <_tcc_timer_start+0x1c>)
    7174:	4798      	blx	r3
}
    7176:	bf00      	nop
    7178:	3708      	adds	r7, #8
    717a:	46bd      	mov	sp, r7
    717c:	bd80      	pop	{r7, pc}
    717e:	bf00      	nop
    7180:	00006e4d 	.word	0x00006e4d

00007184 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7184:	b580      	push	{r7, lr}
    7186:	b082      	sub	sp, #8
    7188:	af00      	add	r7, sp, #0
    718a:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	68db      	ldr	r3, [r3, #12]
    7190:	4618      	mov	r0, r3
    7192:	4b03      	ldr	r3, [pc, #12]	; (71a0 <_tcc_timer_stop+0x1c>)
    7194:	4798      	blx	r3
}
    7196:	bf00      	nop
    7198:	3708      	adds	r7, #8
    719a:	46bd      	mov	sp, r7
    719c:	bd80      	pop	{r7, pc}
    719e:	bf00      	nop
    71a0:	00006ead 	.word	0x00006ead

000071a4 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    71a4:	b580      	push	{r7, lr}
    71a6:	b082      	sub	sp, #8
    71a8:	af00      	add	r7, sp, #0
    71aa:	6078      	str	r0, [r7, #4]
    71ac:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    71ae:	687b      	ldr	r3, [r7, #4]
    71b0:	68db      	ldr	r3, [r3, #12]
    71b2:	6839      	ldr	r1, [r7, #0]
    71b4:	4618      	mov	r0, r3
    71b6:	4b03      	ldr	r3, [pc, #12]	; (71c4 <_tcc_timer_set_period+0x20>)
    71b8:	4798      	blx	r3
}
    71ba:	bf00      	nop
    71bc:	3708      	adds	r7, #8
    71be:	46bd      	mov	sp, r7
    71c0:	bd80      	pop	{r7, pc}
    71c2:	bf00      	nop
    71c4:	00006f65 	.word	0x00006f65

000071c8 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    71c8:	b580      	push	{r7, lr}
    71ca:	b082      	sub	sp, #8
    71cc:	af00      	add	r7, sp, #0
    71ce:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	68db      	ldr	r3, [r3, #12]
    71d4:	4618      	mov	r0, r3
    71d6:	4b03      	ldr	r3, [pc, #12]	; (71e4 <_tcc_timer_get_period+0x1c>)
    71d8:	4798      	blx	r3
    71da:	4603      	mov	r3, r0
}
    71dc:	4618      	mov	r0, r3
    71de:	3708      	adds	r7, #8
    71e0:	46bd      	mov	sp, r7
    71e2:	bd80      	pop	{r7, pc}
    71e4:	00006f89 	.word	0x00006f89

000071e8 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    71e8:	b580      	push	{r7, lr}
    71ea:	b082      	sub	sp, #8
    71ec:	af00      	add	r7, sp, #0
    71ee:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    71f0:	687b      	ldr	r3, [r7, #4]
    71f2:	68db      	ldr	r3, [r3, #12]
    71f4:	4618      	mov	r0, r3
    71f6:	4b03      	ldr	r3, [pc, #12]	; (7204 <_tcc_timer_is_started+0x1c>)
    71f8:	4798      	blx	r3
    71fa:	4603      	mov	r3, r0
}
    71fc:	4618      	mov	r0, r3
    71fe:	3708      	adds	r7, #8
    7200:	46bd      	mov	sp, r7
    7202:	bd80      	pop	{r7, pc}
    7204:	00006e75 	.word	0x00006e75

00007208 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7208:	b480      	push	{r7}
    720a:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    720c:	4b02      	ldr	r3, [pc, #8]	; (7218 <_tcc_get_timer+0x10>)
}
    720e:	4618      	mov	r0, r3
    7210:	46bd      	mov	sp, r7
    7212:	f85d 7b04 	ldr.w	r7, [sp], #4
    7216:	4770      	bx	lr
    7218:	200000f0 	.word	0x200000f0

0000721c <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    721c:	b580      	push	{r7, lr}
    721e:	b084      	sub	sp, #16
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	68db      	ldr	r3, [r3, #12]
    7228:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    722a:	68f8      	ldr	r0, [r7, #12]
    722c:	4b08      	ldr	r3, [pc, #32]	; (7250 <_tcc_timer_set_irq+0x34>)
    722e:	4798      	blx	r3
    7230:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7232:	68bb      	ldr	r3, [r7, #8]
    7234:	2b00      	cmp	r3, #0
    7236:	d006      	beq.n	7246 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7238:	68bb      	ldr	r3, [r7, #8]
    723a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    723e:	b2db      	uxtb	r3, r3
    7240:	4618      	mov	r0, r3
    7242:	4b04      	ldr	r3, [pc, #16]	; (7254 <_tcc_timer_set_irq+0x38>)
    7244:	4798      	blx	r3
	}
}
    7246:	bf00      	nop
    7248:	3710      	adds	r7, #16
    724a:	46bd      	mov	sp, r7
    724c:	bd80      	pop	{r7, pc}
    724e:	bf00      	nop
    7250:	000072e5 	.word	0x000072e5
    7254:	00003c65 	.word	0x00003c65

00007258 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7258:	b580      	push	{r7, lr}
    725a:	b084      	sub	sp, #16
    725c:	af00      	add	r7, sp, #0
    725e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7260:	687b      	ldr	r3, [r7, #4]
    7262:	68db      	ldr	r3, [r3, #12]
    7264:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7266:	68f8      	ldr	r0, [r7, #12]
    7268:	4b07      	ldr	r3, [pc, #28]	; (7288 <tcc_interrupt_handler+0x30>)
    726a:	4798      	blx	r3
    726c:	4603      	mov	r3, r0
    726e:	2b00      	cmp	r3, #0
    7270:	d006      	beq.n	7280 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7272:	68f8      	ldr	r0, [r7, #12]
    7274:	4b05      	ldr	r3, [pc, #20]	; (728c <tcc_interrupt_handler+0x34>)
    7276:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7278:	687b      	ldr	r3, [r7, #4]
    727a:	681b      	ldr	r3, [r3, #0]
    727c:	6878      	ldr	r0, [r7, #4]
    727e:	4798      	blx	r3
	}
}
    7280:	bf00      	nop
    7282:	3710      	adds	r7, #16
    7284:	46bd      	mov	sp, r7
    7286:	bd80      	pop	{r7, pc}
    7288:	00006dad 	.word	0x00006dad
    728c:	00006dd3 	.word	0x00006dd3

00007290 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7290:	b580      	push	{r7, lr}
    7292:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7294:	4b03      	ldr	r3, [pc, #12]	; (72a4 <TCC0_0_Handler+0x14>)
    7296:	681b      	ldr	r3, [r3, #0]
    7298:	4618      	mov	r0, r3
    729a:	4b03      	ldr	r3, [pc, #12]	; (72a8 <TCC0_0_Handler+0x18>)
    729c:	4798      	blx	r3
}
    729e:	bf00      	nop
    72a0:	bd80      	pop	{r7, pc}
    72a2:	bf00      	nop
    72a4:	200009ec 	.word	0x200009ec
    72a8:	00007259 	.word	0x00007259

000072ac <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    72ac:	b580      	push	{r7, lr}
    72ae:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    72b0:	4b03      	ldr	r3, [pc, #12]	; (72c0 <TCC1_0_Handler+0x14>)
    72b2:	681b      	ldr	r3, [r3, #0]
    72b4:	4618      	mov	r0, r3
    72b6:	4b03      	ldr	r3, [pc, #12]	; (72c4 <TCC1_0_Handler+0x18>)
    72b8:	4798      	blx	r3
}
    72ba:	bf00      	nop
    72bc:	bd80      	pop	{r7, pc}
    72be:	bf00      	nop
    72c0:	200009f0 	.word	0x200009f0
    72c4:	00007259 	.word	0x00007259

000072c8 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    72c8:	b580      	push	{r7, lr}
    72ca:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    72cc:	4b03      	ldr	r3, [pc, #12]	; (72dc <TCC2_0_Handler+0x14>)
    72ce:	681b      	ldr	r3, [r3, #0]
    72d0:	4618      	mov	r0, r3
    72d2:	4b03      	ldr	r3, [pc, #12]	; (72e0 <TCC2_0_Handler+0x18>)
    72d4:	4798      	blx	r3
}
    72d6:	bf00      	nop
    72d8:	bd80      	pop	{r7, pc}
    72da:	bf00      	nop
    72dc:	200009f4 	.word	0x200009f4
    72e0:	00007259 	.word	0x00007259

000072e4 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    72e4:	b480      	push	{r7}
    72e6:	b085      	sub	sp, #20
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    72ec:	2300      	movs	r3, #0
    72ee:	73fb      	strb	r3, [r7, #15]
    72f0:	e015      	b.n	731e <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    72f2:	7bfa      	ldrb	r2, [r7, #15]
    72f4:	490f      	ldr	r1, [pc, #60]	; (7334 <_get_tcc_cfg+0x50>)
    72f6:	4613      	mov	r3, r2
    72f8:	005b      	lsls	r3, r3, #1
    72fa:	4413      	add	r3, r2
    72fc:	011b      	lsls	r3, r3, #4
    72fe:	440b      	add	r3, r1
    7300:	681a      	ldr	r2, [r3, #0]
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	429a      	cmp	r2, r3
    7306:	d107      	bne.n	7318 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7308:	7bfa      	ldrb	r2, [r7, #15]
    730a:	4613      	mov	r3, r2
    730c:	005b      	lsls	r3, r3, #1
    730e:	4413      	add	r3, r2
    7310:	011b      	lsls	r3, r3, #4
    7312:	4a08      	ldr	r2, [pc, #32]	; (7334 <_get_tcc_cfg+0x50>)
    7314:	4413      	add	r3, r2
    7316:	e006      	b.n	7326 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7318:	7bfb      	ldrb	r3, [r7, #15]
    731a:	3301      	adds	r3, #1
    731c:	73fb      	strb	r3, [r7, #15]
    731e:	7bfb      	ldrb	r3, [r7, #15]
    7320:	2b02      	cmp	r3, #2
    7322:	d9e6      	bls.n	72f2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7324:	2300      	movs	r3, #0
}
    7326:	4618      	mov	r0, r3
    7328:	3714      	adds	r7, #20
    732a:	46bd      	mov	sp, r7
    732c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7330:	4770      	bx	lr
    7332:	bf00      	nop
    7334:	20000060 	.word	0x20000060

00007338 <__NVIC_EnableIRQ>:
{
    7338:	b480      	push	{r7}
    733a:	b083      	sub	sp, #12
    733c:	af00      	add	r7, sp, #0
    733e:	4603      	mov	r3, r0
    7340:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7346:	2b00      	cmp	r3, #0
    7348:	db0b      	blt.n	7362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    734a:	4909      	ldr	r1, [pc, #36]	; (7370 <__NVIC_EnableIRQ+0x38>)
    734c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7350:	095b      	lsrs	r3, r3, #5
    7352:	88fa      	ldrh	r2, [r7, #6]
    7354:	f002 021f 	and.w	r2, r2, #31
    7358:	2001      	movs	r0, #1
    735a:	fa00 f202 	lsl.w	r2, r0, r2
    735e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7362:	bf00      	nop
    7364:	370c      	adds	r7, #12
    7366:	46bd      	mov	sp, r7
    7368:	f85d 7b04 	ldr.w	r7, [sp], #4
    736c:	4770      	bx	lr
    736e:	bf00      	nop
    7370:	e000e100 	.word	0xe000e100

00007374 <__NVIC_DisableIRQ>:
{
    7374:	b480      	push	{r7}
    7376:	b083      	sub	sp, #12
    7378:	af00      	add	r7, sp, #0
    737a:	4603      	mov	r3, r0
    737c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    737e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7382:	2b00      	cmp	r3, #0
    7384:	db10      	blt.n	73a8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7386:	490b      	ldr	r1, [pc, #44]	; (73b4 <__NVIC_DisableIRQ+0x40>)
    7388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    738c:	095b      	lsrs	r3, r3, #5
    738e:	88fa      	ldrh	r2, [r7, #6]
    7390:	f002 021f 	and.w	r2, r2, #31
    7394:	2001      	movs	r0, #1
    7396:	fa00 f202 	lsl.w	r2, r0, r2
    739a:	3320      	adds	r3, #32
    739c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    73a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    73a4:	f3bf 8f6f 	isb	sy
}
    73a8:	bf00      	nop
    73aa:	370c      	adds	r7, #12
    73ac:	46bd      	mov	sp, r7
    73ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    73b2:	4770      	bx	lr
    73b4:	e000e100 	.word	0xe000e100

000073b8 <__NVIC_ClearPendingIRQ>:
{
    73b8:	b480      	push	{r7}
    73ba:	b083      	sub	sp, #12
    73bc:	af00      	add	r7, sp, #0
    73be:	4603      	mov	r3, r0
    73c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    73c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    73c6:	2b00      	cmp	r3, #0
    73c8:	db0c      	blt.n	73e4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    73ca:	4909      	ldr	r1, [pc, #36]	; (73f0 <__NVIC_ClearPendingIRQ+0x38>)
    73cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    73d0:	095b      	lsrs	r3, r3, #5
    73d2:	88fa      	ldrh	r2, [r7, #6]
    73d4:	f002 021f 	and.w	r2, r2, #31
    73d8:	2001      	movs	r0, #1
    73da:	fa00 f202 	lsl.w	r2, r0, r2
    73de:	3360      	adds	r3, #96	; 0x60
    73e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    73e4:	bf00      	nop
    73e6:	370c      	adds	r7, #12
    73e8:	46bd      	mov	sp, r7
    73ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ee:	4770      	bx	lr
    73f0:	e000e100 	.word	0xe000e100

000073f4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    73f4:	b480      	push	{r7}
    73f6:	b083      	sub	sp, #12
    73f8:	af00      	add	r7, sp, #0
    73fa:	6078      	str	r0, [r7, #4]
    73fc:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    73fe:	bf00      	nop
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	691a      	ldr	r2, [r3, #16]
    7404:	683b      	ldr	r3, [r7, #0]
    7406:	4013      	ands	r3, r2
    7408:	2b00      	cmp	r3, #0
    740a:	d1f9      	bne.n	7400 <hri_tc_wait_for_sync+0xc>
	};
}
    740c:	bf00      	nop
    740e:	370c      	adds	r7, #12
    7410:	46bd      	mov	sp, r7
    7412:	f85d 7b04 	ldr.w	r7, [sp], #4
    7416:	4770      	bx	lr

00007418 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7418:	b480      	push	{r7}
    741a:	b083      	sub	sp, #12
    741c:	af00      	add	r7, sp, #0
    741e:	6078      	str	r0, [r7, #4]
    7420:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	691a      	ldr	r2, [r3, #16]
    7426:	683b      	ldr	r3, [r7, #0]
    7428:	4013      	ands	r3, r2
    742a:	2b00      	cmp	r3, #0
    742c:	bf14      	ite	ne
    742e:	2301      	movne	r3, #1
    7430:	2300      	moveq	r3, #0
    7432:	b2db      	uxtb	r3, r3
}
    7434:	4618      	mov	r0, r3
    7436:	370c      	adds	r7, #12
    7438:	46bd      	mov	sp, r7
    743a:	f85d 7b04 	ldr.w	r7, [sp], #4
    743e:	4770      	bx	lr

00007440 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7440:	b480      	push	{r7}
    7442:	b083      	sub	sp, #12
    7444:	af00      	add	r7, sp, #0
    7446:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	7a9b      	ldrb	r3, [r3, #10]
    744c:	b2db      	uxtb	r3, r3
    744e:	f003 0301 	and.w	r3, r3, #1
    7452:	2b00      	cmp	r3, #0
    7454:	bf14      	ite	ne
    7456:	2301      	movne	r3, #1
    7458:	2300      	moveq	r3, #0
    745a:	b2db      	uxtb	r3, r3
}
    745c:	4618      	mov	r0, r3
    745e:	370c      	adds	r7, #12
    7460:	46bd      	mov	sp, r7
    7462:	f85d 7b04 	ldr.w	r7, [sp], #4
    7466:	4770      	bx	lr

00007468 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7468:	b480      	push	{r7}
    746a:	b083      	sub	sp, #12
    746c:	af00      	add	r7, sp, #0
    746e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7470:	687b      	ldr	r3, [r7, #4]
    7472:	2201      	movs	r2, #1
    7474:	729a      	strb	r2, [r3, #10]
}
    7476:	bf00      	nop
    7478:	370c      	adds	r7, #12
    747a:	46bd      	mov	sp, r7
    747c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7480:	4770      	bx	lr

00007482 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7482:	b480      	push	{r7}
    7484:	b083      	sub	sp, #12
    7486:	af00      	add	r7, sp, #0
    7488:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	2202      	movs	r2, #2
    748e:	729a      	strb	r2, [r3, #10]
}
    7490:	bf00      	nop
    7492:	370c      	adds	r7, #12
    7494:	46bd      	mov	sp, r7
    7496:	f85d 7b04 	ldr.w	r7, [sp], #4
    749a:	4770      	bx	lr

0000749c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    749c:	b480      	push	{r7}
    749e:	b083      	sub	sp, #12
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    74a4:	687b      	ldr	r3, [r7, #4]
    74a6:	2201      	movs	r2, #1
    74a8:	725a      	strb	r2, [r3, #9]
}
    74aa:	bf00      	nop
    74ac:	370c      	adds	r7, #12
    74ae:	46bd      	mov	sp, r7
    74b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    74b4:	4770      	bx	lr

000074b6 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    74b6:	b480      	push	{r7}
    74b8:	b083      	sub	sp, #12
    74ba:	af00      	add	r7, sp, #0
    74bc:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    74be:	687b      	ldr	r3, [r7, #4]
    74c0:	7a5b      	ldrb	r3, [r3, #9]
    74c2:	b2db      	uxtb	r3, r3
    74c4:	085b      	lsrs	r3, r3, #1
    74c6:	f003 0301 	and.w	r3, r3, #1
    74ca:	2b00      	cmp	r3, #0
    74cc:	bf14      	ite	ne
    74ce:	2301      	movne	r3, #1
    74d0:	2300      	moveq	r3, #0
    74d2:	b2db      	uxtb	r3, r3
}
    74d4:	4618      	mov	r0, r3
    74d6:	370c      	adds	r7, #12
    74d8:	46bd      	mov	sp, r7
    74da:	f85d 7b04 	ldr.w	r7, [sp], #4
    74de:	4770      	bx	lr

000074e0 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    74e0:	b580      	push	{r7, lr}
    74e2:	b082      	sub	sp, #8
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    74e8:	687b      	ldr	r3, [r7, #4]
    74ea:	681b      	ldr	r3, [r3, #0]
    74ec:	f043 0201 	orr.w	r2, r3, #1
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    74f4:	2101      	movs	r1, #1
    74f6:	6878      	ldr	r0, [r7, #4]
    74f8:	4b02      	ldr	r3, [pc, #8]	; (7504 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    74fa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    74fc:	bf00      	nop
    74fe:	3708      	adds	r7, #8
    7500:	46bd      	mov	sp, r7
    7502:	bd80      	pop	{r7, pc}
    7504:	000073f5 	.word	0x000073f5

00007508 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7508:	b580      	push	{r7, lr}
    750a:	b082      	sub	sp, #8
    750c:	af00      	add	r7, sp, #0
    750e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	681b      	ldr	r3, [r3, #0]
    7514:	f043 0202 	orr.w	r2, r3, #2
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    751c:	2103      	movs	r1, #3
    751e:	6878      	ldr	r0, [r7, #4]
    7520:	4b02      	ldr	r3, [pc, #8]	; (752c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7522:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7524:	bf00      	nop
    7526:	3708      	adds	r7, #8
    7528:	46bd      	mov	sp, r7
    752a:	bd80      	pop	{r7, pc}
    752c:	000073f5 	.word	0x000073f5

00007530 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7530:	b580      	push	{r7, lr}
    7532:	b084      	sub	sp, #16
    7534:	af00      	add	r7, sp, #0
    7536:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7538:	2103      	movs	r1, #3
    753a:	6878      	ldr	r0, [r7, #4]
    753c:	4b09      	ldr	r3, [pc, #36]	; (7564 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    753e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7540:	687b      	ldr	r3, [r7, #4]
    7542:	681b      	ldr	r3, [r3, #0]
    7544:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7546:	68fb      	ldr	r3, [r7, #12]
    7548:	085b      	lsrs	r3, r3, #1
    754a:	f003 0301 	and.w	r3, r3, #1
    754e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7550:	68fb      	ldr	r3, [r7, #12]
    7552:	2b00      	cmp	r3, #0
    7554:	bf14      	ite	ne
    7556:	2301      	movne	r3, #1
    7558:	2300      	moveq	r3, #0
    755a:	b2db      	uxtb	r3, r3
}
    755c:	4618      	mov	r0, r3
    755e:	3710      	adds	r7, #16
    7560:	46bd      	mov	sp, r7
    7562:	bd80      	pop	{r7, pc}
    7564:	000073f5 	.word	0x000073f5

00007568 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7568:	b580      	push	{r7, lr}
    756a:	b082      	sub	sp, #8
    756c:	af00      	add	r7, sp, #0
    756e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	681b      	ldr	r3, [r3, #0]
    7574:	f023 0202 	bic.w	r2, r3, #2
    7578:	687b      	ldr	r3, [r7, #4]
    757a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    757c:	2103      	movs	r1, #3
    757e:	6878      	ldr	r0, [r7, #4]
    7580:	4b02      	ldr	r3, [pc, #8]	; (758c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7582:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7584:	bf00      	nop
    7586:	3708      	adds	r7, #8
    7588:	46bd      	mov	sp, r7
    758a:	bd80      	pop	{r7, pc}
    758c:	000073f5 	.word	0x000073f5

00007590 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7590:	b480      	push	{r7}
    7592:	b085      	sub	sp, #20
    7594:	af00      	add	r7, sp, #0
    7596:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7598:	687b      	ldr	r3, [r7, #4]
    759a:	681b      	ldr	r3, [r3, #0]
    759c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    759e:	68fb      	ldr	r3, [r7, #12]
    75a0:	089b      	lsrs	r3, r3, #2
    75a2:	f003 0303 	and.w	r3, r3, #3
    75a6:	60fb      	str	r3, [r7, #12]
	return tmp;
    75a8:	68fb      	ldr	r3, [r7, #12]
}
    75aa:	4618      	mov	r0, r3
    75ac:	3714      	adds	r7, #20
    75ae:	46bd      	mov	sp, r7
    75b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    75b4:	4770      	bx	lr
	...

000075b8 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    75b8:	b580      	push	{r7, lr}
    75ba:	b084      	sub	sp, #16
    75bc:	af00      	add	r7, sp, #0
    75be:	6078      	str	r0, [r7, #4]
    75c0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    75c2:	2103      	movs	r1, #3
    75c4:	6878      	ldr	r0, [r7, #4]
    75c6:	4b07      	ldr	r3, [pc, #28]	; (75e4 <hri_tc_get_CTRLA_reg+0x2c>)
    75c8:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    75ca:	687b      	ldr	r3, [r7, #4]
    75cc:	681b      	ldr	r3, [r3, #0]
    75ce:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    75d0:	68fa      	ldr	r2, [r7, #12]
    75d2:	683b      	ldr	r3, [r7, #0]
    75d4:	4013      	ands	r3, r2
    75d6:	60fb      	str	r3, [r7, #12]
	return tmp;
    75d8:	68fb      	ldr	r3, [r7, #12]
}
    75da:	4618      	mov	r0, r3
    75dc:	3710      	adds	r7, #16
    75de:	46bd      	mov	sp, r7
    75e0:	bd80      	pop	{r7, pc}
    75e2:	bf00      	nop
    75e4:	000073f5 	.word	0x000073f5

000075e8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    75e8:	b580      	push	{r7, lr}
    75ea:	b082      	sub	sp, #8
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
    75f0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	683a      	ldr	r2, [r7, #0]
    75f6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    75f8:	2103      	movs	r1, #3
    75fa:	6878      	ldr	r0, [r7, #4]
    75fc:	4b02      	ldr	r3, [pc, #8]	; (7608 <hri_tc_write_CTRLA_reg+0x20>)
    75fe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7600:	bf00      	nop
    7602:	3708      	adds	r7, #8
    7604:	46bd      	mov	sp, r7
    7606:	bd80      	pop	{r7, pc}
    7608:	000073f5 	.word	0x000073f5

0000760c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    760c:	b480      	push	{r7}
    760e:	b083      	sub	sp, #12
    7610:	af00      	add	r7, sp, #0
    7612:	6078      	str	r0, [r7, #4]
    7614:	460b      	mov	r3, r1
    7616:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	887a      	ldrh	r2, [r7, #2]
    761c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    761e:	bf00      	nop
    7620:	370c      	adds	r7, #12
    7622:	46bd      	mov	sp, r7
    7624:	f85d 7b04 	ldr.w	r7, [sp], #4
    7628:	4770      	bx	lr

0000762a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    762a:	b480      	push	{r7}
    762c:	b083      	sub	sp, #12
    762e:	af00      	add	r7, sp, #0
    7630:	6078      	str	r0, [r7, #4]
    7632:	460b      	mov	r3, r1
    7634:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7636:	687b      	ldr	r3, [r7, #4]
    7638:	78fa      	ldrb	r2, [r7, #3]
    763a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    763c:	bf00      	nop
    763e:	370c      	adds	r7, #12
    7640:	46bd      	mov	sp, r7
    7642:	f85d 7b04 	ldr.w	r7, [sp], #4
    7646:	4770      	bx	lr

00007648 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7648:	b480      	push	{r7}
    764a:	b083      	sub	sp, #12
    764c:	af00      	add	r7, sp, #0
    764e:	6078      	str	r0, [r7, #4]
    7650:	460b      	mov	r3, r1
    7652:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	78fa      	ldrb	r2, [r7, #3]
    7658:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    765a:	bf00      	nop
    765c:	370c      	adds	r7, #12
    765e:	46bd      	mov	sp, r7
    7660:	f85d 7b04 	ldr.w	r7, [sp], #4
    7664:	4770      	bx	lr
	...

00007668 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7668:	b580      	push	{r7, lr}
    766a:	b082      	sub	sp, #8
    766c:	af00      	add	r7, sp, #0
    766e:	6078      	str	r0, [r7, #4]
    7670:	460b      	mov	r3, r1
    7672:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7674:	687b      	ldr	r3, [r7, #4]
    7676:	78fa      	ldrb	r2, [r7, #3]
    7678:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    767a:	2120      	movs	r1, #32
    767c:	6878      	ldr	r0, [r7, #4]
    767e:	4b03      	ldr	r3, [pc, #12]	; (768c <hri_tccount8_write_PER_reg+0x24>)
    7680:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7682:	bf00      	nop
    7684:	3708      	adds	r7, #8
    7686:	46bd      	mov	sp, r7
    7688:	bd80      	pop	{r7, pc}
    768a:	bf00      	nop
    768c:	000073f5 	.word	0x000073f5

00007690 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7690:	b580      	push	{r7, lr}
    7692:	b082      	sub	sp, #8
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7698:	2120      	movs	r1, #32
    769a:	6878      	ldr	r0, [r7, #4]
    769c:	4b04      	ldr	r3, [pc, #16]	; (76b0 <hri_tccount8_read_PER_reg+0x20>)
    769e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	7edb      	ldrb	r3, [r3, #27]
    76a4:	b2db      	uxtb	r3, r3
}
    76a6:	4618      	mov	r0, r3
    76a8:	3708      	adds	r7, #8
    76aa:	46bd      	mov	sp, r7
    76ac:	bd80      	pop	{r7, pc}
    76ae:	bf00      	nop
    76b0:	000073f5 	.word	0x000073f5

000076b4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    76b4:	b580      	push	{r7, lr}
    76b6:	b082      	sub	sp, #8
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
    76bc:	460b      	mov	r3, r1
    76be:	70fb      	strb	r3, [r7, #3]
    76c0:	4613      	mov	r3, r2
    76c2:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    76c4:	78fb      	ldrb	r3, [r7, #3]
    76c6:	687a      	ldr	r2, [r7, #4]
    76c8:	4413      	add	r3, r2
    76ca:	78ba      	ldrb	r2, [r7, #2]
    76cc:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    76ce:	21c0      	movs	r1, #192	; 0xc0
    76d0:	6878      	ldr	r0, [r7, #4]
    76d2:	4b03      	ldr	r3, [pc, #12]	; (76e0 <hri_tccount8_write_CC_reg+0x2c>)
    76d4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    76d6:	bf00      	nop
    76d8:	3708      	adds	r7, #8
    76da:	46bd      	mov	sp, r7
    76dc:	bd80      	pop	{r7, pc}
    76de:	bf00      	nop
    76e0:	000073f5 	.word	0x000073f5

000076e4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    76e4:	b580      	push	{r7, lr}
    76e6:	b082      	sub	sp, #8
    76e8:	af00      	add	r7, sp, #0
    76ea:	6078      	str	r0, [r7, #4]
    76ec:	460b      	mov	r3, r1
    76ee:	70fb      	strb	r3, [r7, #3]
    76f0:	4613      	mov	r3, r2
    76f2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    76f4:	78fb      	ldrb	r3, [r7, #3]
    76f6:	687a      	ldr	r2, [r7, #4]
    76f8:	330c      	adds	r3, #12
    76fa:	005b      	lsls	r3, r3, #1
    76fc:	4413      	add	r3, r2
    76fe:	883a      	ldrh	r2, [r7, #0]
    7700:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7702:	21c0      	movs	r1, #192	; 0xc0
    7704:	6878      	ldr	r0, [r7, #4]
    7706:	4b03      	ldr	r3, [pc, #12]	; (7714 <hri_tccount16_write_CC_reg+0x30>)
    7708:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    770a:	bf00      	nop
    770c:	3708      	adds	r7, #8
    770e:	46bd      	mov	sp, r7
    7710:	bd80      	pop	{r7, pc}
    7712:	bf00      	nop
    7714:	000073f5 	.word	0x000073f5

00007718 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7718:	b580      	push	{r7, lr}
    771a:	b082      	sub	sp, #8
    771c:	af00      	add	r7, sp, #0
    771e:	6078      	str	r0, [r7, #4]
    7720:	460b      	mov	r3, r1
    7722:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7724:	21c0      	movs	r1, #192	; 0xc0
    7726:	6878      	ldr	r0, [r7, #4]
    7728:	4b06      	ldr	r3, [pc, #24]	; (7744 <hri_tccount16_read_CC_reg+0x2c>)
    772a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    772c:	78fb      	ldrb	r3, [r7, #3]
    772e:	687a      	ldr	r2, [r7, #4]
    7730:	330c      	adds	r3, #12
    7732:	005b      	lsls	r3, r3, #1
    7734:	4413      	add	r3, r2
    7736:	889b      	ldrh	r3, [r3, #4]
    7738:	b29b      	uxth	r3, r3
}
    773a:	4618      	mov	r0, r3
    773c:	3708      	adds	r7, #8
    773e:	46bd      	mov	sp, r7
    7740:	bd80      	pop	{r7, pc}
    7742:	bf00      	nop
    7744:	000073f5 	.word	0x000073f5

00007748 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7748:	b580      	push	{r7, lr}
    774a:	b084      	sub	sp, #16
    774c:	af00      	add	r7, sp, #0
    774e:	60f8      	str	r0, [r7, #12]
    7750:	460b      	mov	r3, r1
    7752:	607a      	str	r2, [r7, #4]
    7754:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7756:	7afb      	ldrb	r3, [r7, #11]
    7758:	68fa      	ldr	r2, [r7, #12]
    775a:	3306      	adds	r3, #6
    775c:	009b      	lsls	r3, r3, #2
    775e:	4413      	add	r3, r2
    7760:	687a      	ldr	r2, [r7, #4]
    7762:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7764:	21c0      	movs	r1, #192	; 0xc0
    7766:	68f8      	ldr	r0, [r7, #12]
    7768:	4b02      	ldr	r3, [pc, #8]	; (7774 <hri_tccount32_write_CC_reg+0x2c>)
    776a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    776c:	bf00      	nop
    776e:	3710      	adds	r7, #16
    7770:	46bd      	mov	sp, r7
    7772:	bd80      	pop	{r7, pc}
    7774:	000073f5 	.word	0x000073f5

00007778 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7778:	b580      	push	{r7, lr}
    777a:	b082      	sub	sp, #8
    777c:	af00      	add	r7, sp, #0
    777e:	6078      	str	r0, [r7, #4]
    7780:	460b      	mov	r3, r1
    7782:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7784:	21c0      	movs	r1, #192	; 0xc0
    7786:	6878      	ldr	r0, [r7, #4]
    7788:	4b05      	ldr	r3, [pc, #20]	; (77a0 <hri_tccount32_read_CC_reg+0x28>)
    778a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    778c:	78fb      	ldrb	r3, [r7, #3]
    778e:	687a      	ldr	r2, [r7, #4]
    7790:	3306      	adds	r3, #6
    7792:	009b      	lsls	r3, r3, #2
    7794:	4413      	add	r3, r2
    7796:	685b      	ldr	r3, [r3, #4]
}
    7798:	4618      	mov	r0, r3
    779a:	3708      	adds	r7, #8
    779c:	46bd      	mov	sp, r7
    779e:	bd80      	pop	{r7, pc}
    77a0:	000073f5 	.word	0x000073f5

000077a4 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    77a4:	b580      	push	{r7, lr}
    77a6:	b084      	sub	sp, #16
    77a8:	af00      	add	r7, sp, #0
    77aa:	6078      	str	r0, [r7, #4]
    77ac:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    77ae:	6838      	ldr	r0, [r7, #0]
    77b0:	4b93      	ldr	r3, [pc, #588]	; (7a00 <_tc_timer_init+0x25c>)
    77b2:	4798      	blx	r3
    77b4:	4603      	mov	r3, r0
    77b6:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	683a      	ldr	r2, [r7, #0]
    77bc:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    77be:	22a4      	movs	r2, #164	; 0xa4
    77c0:	4990      	ldr	r1, [pc, #576]	; (7a04 <_tc_timer_init+0x260>)
    77c2:	2001      	movs	r0, #1
    77c4:	4b90      	ldr	r3, [pc, #576]	; (7a08 <_tc_timer_init+0x264>)
    77c6:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    77c8:	2101      	movs	r1, #1
    77ca:	6838      	ldr	r0, [r7, #0]
    77cc:	4b8f      	ldr	r3, [pc, #572]	; (7a0c <_tc_timer_init+0x268>)
    77ce:	4798      	blx	r3
    77d0:	4603      	mov	r3, r0
    77d2:	f083 0301 	eor.w	r3, r3, #1
    77d6:	b2db      	uxtb	r3, r3
    77d8:	2b00      	cmp	r3, #0
    77da:	d011      	beq.n	7800 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    77dc:	2102      	movs	r1, #2
    77de:	6838      	ldr	r0, [r7, #0]
    77e0:	4b8b      	ldr	r3, [pc, #556]	; (7a10 <_tc_timer_init+0x26c>)
    77e2:	4798      	blx	r3
    77e4:	4603      	mov	r3, r0
    77e6:	2b00      	cmp	r3, #0
    77e8:	d006      	beq.n	77f8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    77ea:	6838      	ldr	r0, [r7, #0]
    77ec:	4b89      	ldr	r3, [pc, #548]	; (7a14 <_tc_timer_init+0x270>)
    77ee:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    77f0:	2102      	movs	r1, #2
    77f2:	6838      	ldr	r0, [r7, #0]
    77f4:	4b88      	ldr	r3, [pc, #544]	; (7a18 <_tc_timer_init+0x274>)
    77f6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    77f8:	2101      	movs	r1, #1
    77fa:	6838      	ldr	r0, [r7, #0]
    77fc:	4b87      	ldr	r3, [pc, #540]	; (7a1c <_tc_timer_init+0x278>)
    77fe:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7800:	2101      	movs	r1, #1
    7802:	6838      	ldr	r0, [r7, #0]
    7804:	4b84      	ldr	r3, [pc, #528]	; (7a18 <_tc_timer_init+0x274>)
    7806:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7808:	f997 200f 	ldrsb.w	r2, [r7, #15]
    780c:	4984      	ldr	r1, [pc, #528]	; (7a20 <_tc_timer_init+0x27c>)
    780e:	4613      	mov	r3, r2
    7810:	009b      	lsls	r3, r3, #2
    7812:	4413      	add	r3, r2
    7814:	009b      	lsls	r3, r3, #2
    7816:	440b      	add	r3, r1
    7818:	3304      	adds	r3, #4
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	4619      	mov	r1, r3
    781e:	6838      	ldr	r0, [r7, #0]
    7820:	4b7e      	ldr	r3, [pc, #504]	; (7a1c <_tc_timer_init+0x278>)
    7822:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7824:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7828:	497d      	ldr	r1, [pc, #500]	; (7a20 <_tc_timer_init+0x27c>)
    782a:	4613      	mov	r3, r2
    782c:	009b      	lsls	r3, r3, #2
    782e:	4413      	add	r3, r2
    7830:	009b      	lsls	r3, r3, #2
    7832:	440b      	add	r3, r1
    7834:	330a      	adds	r3, #10
    7836:	781b      	ldrb	r3, [r3, #0]
    7838:	4619      	mov	r1, r3
    783a:	6838      	ldr	r0, [r7, #0]
    783c:	4b79      	ldr	r3, [pc, #484]	; (7a24 <_tc_timer_init+0x280>)
    783e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7840:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7844:	4976      	ldr	r1, [pc, #472]	; (7a20 <_tc_timer_init+0x27c>)
    7846:	4613      	mov	r3, r2
    7848:	009b      	lsls	r3, r3, #2
    784a:	4413      	add	r3, r2
    784c:	009b      	lsls	r3, r3, #2
    784e:	440b      	add	r3, r1
    7850:	3308      	adds	r3, #8
    7852:	881b      	ldrh	r3, [r3, #0]
    7854:	4619      	mov	r1, r3
    7856:	6838      	ldr	r0, [r7, #0]
    7858:	4b73      	ldr	r3, [pc, #460]	; (7a28 <_tc_timer_init+0x284>)
    785a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    785c:	2101      	movs	r1, #1
    785e:	6838      	ldr	r0, [r7, #0]
    7860:	4b72      	ldr	r3, [pc, #456]	; (7a2c <_tc_timer_init+0x288>)
    7862:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7864:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7868:	496d      	ldr	r1, [pc, #436]	; (7a20 <_tc_timer_init+0x27c>)
    786a:	4613      	mov	r3, r2
    786c:	009b      	lsls	r3, r3, #2
    786e:	4413      	add	r3, r2
    7870:	009b      	lsls	r3, r3, #2
    7872:	440b      	add	r3, r1
    7874:	3304      	adds	r3, #4
    7876:	681b      	ldr	r3, [r3, #0]
    7878:	f003 030c 	and.w	r3, r3, #12
    787c:	2b08      	cmp	r3, #8
    787e:	d11e      	bne.n	78be <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7880:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7884:	4966      	ldr	r1, [pc, #408]	; (7a20 <_tc_timer_init+0x27c>)
    7886:	4613      	mov	r3, r2
    7888:	009b      	lsls	r3, r3, #2
    788a:	4413      	add	r3, r2
    788c:	009b      	lsls	r3, r3, #2
    788e:	440b      	add	r3, r1
    7890:	330c      	adds	r3, #12
    7892:	681b      	ldr	r3, [r3, #0]
    7894:	461a      	mov	r2, r3
    7896:	2100      	movs	r1, #0
    7898:	6838      	ldr	r0, [r7, #0]
    789a:	4b65      	ldr	r3, [pc, #404]	; (7a30 <_tc_timer_init+0x28c>)
    789c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    789e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78a2:	495f      	ldr	r1, [pc, #380]	; (7a20 <_tc_timer_init+0x27c>)
    78a4:	4613      	mov	r3, r2
    78a6:	009b      	lsls	r3, r3, #2
    78a8:	4413      	add	r3, r2
    78aa:	009b      	lsls	r3, r3, #2
    78ac:	440b      	add	r3, r1
    78ae:	3310      	adds	r3, #16
    78b0:	681b      	ldr	r3, [r3, #0]
    78b2:	461a      	mov	r2, r3
    78b4:	2101      	movs	r1, #1
    78b6:	6838      	ldr	r0, [r7, #0]
    78b8:	4b5d      	ldr	r3, [pc, #372]	; (7a30 <_tc_timer_init+0x28c>)
    78ba:	4798      	blx	r3
    78bc:	e06a      	b.n	7994 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    78be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78c2:	4957      	ldr	r1, [pc, #348]	; (7a20 <_tc_timer_init+0x27c>)
    78c4:	4613      	mov	r3, r2
    78c6:	009b      	lsls	r3, r3, #2
    78c8:	4413      	add	r3, r2
    78ca:	009b      	lsls	r3, r3, #2
    78cc:	440b      	add	r3, r1
    78ce:	3304      	adds	r3, #4
    78d0:	681b      	ldr	r3, [r3, #0]
    78d2:	f003 030c 	and.w	r3, r3, #12
    78d6:	2b00      	cmp	r3, #0
    78d8:	d120      	bne.n	791c <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    78da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78de:	4950      	ldr	r1, [pc, #320]	; (7a20 <_tc_timer_init+0x27c>)
    78e0:	4613      	mov	r3, r2
    78e2:	009b      	lsls	r3, r3, #2
    78e4:	4413      	add	r3, r2
    78e6:	009b      	lsls	r3, r3, #2
    78e8:	440b      	add	r3, r1
    78ea:	330c      	adds	r3, #12
    78ec:	681b      	ldr	r3, [r3, #0]
    78ee:	b29b      	uxth	r3, r3
    78f0:	461a      	mov	r2, r3
    78f2:	2100      	movs	r1, #0
    78f4:	6838      	ldr	r0, [r7, #0]
    78f6:	4b4f      	ldr	r3, [pc, #316]	; (7a34 <_tc_timer_init+0x290>)
    78f8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    78fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78fe:	4948      	ldr	r1, [pc, #288]	; (7a20 <_tc_timer_init+0x27c>)
    7900:	4613      	mov	r3, r2
    7902:	009b      	lsls	r3, r3, #2
    7904:	4413      	add	r3, r2
    7906:	009b      	lsls	r3, r3, #2
    7908:	440b      	add	r3, r1
    790a:	3310      	adds	r3, #16
    790c:	681b      	ldr	r3, [r3, #0]
    790e:	b29b      	uxth	r3, r3
    7910:	461a      	mov	r2, r3
    7912:	2101      	movs	r1, #1
    7914:	6838      	ldr	r0, [r7, #0]
    7916:	4b47      	ldr	r3, [pc, #284]	; (7a34 <_tc_timer_init+0x290>)
    7918:	4798      	blx	r3
    791a:	e03b      	b.n	7994 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    791c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7920:	493f      	ldr	r1, [pc, #252]	; (7a20 <_tc_timer_init+0x27c>)
    7922:	4613      	mov	r3, r2
    7924:	009b      	lsls	r3, r3, #2
    7926:	4413      	add	r3, r2
    7928:	009b      	lsls	r3, r3, #2
    792a:	440b      	add	r3, r1
    792c:	3304      	adds	r3, #4
    792e:	681b      	ldr	r3, [r3, #0]
    7930:	f003 030c 	and.w	r3, r3, #12
    7934:	2b04      	cmp	r3, #4
    7936:	d12d      	bne.n	7994 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7938:	f997 200f 	ldrsb.w	r2, [r7, #15]
    793c:	4938      	ldr	r1, [pc, #224]	; (7a20 <_tc_timer_init+0x27c>)
    793e:	4613      	mov	r3, r2
    7940:	009b      	lsls	r3, r3, #2
    7942:	4413      	add	r3, r2
    7944:	009b      	lsls	r3, r3, #2
    7946:	440b      	add	r3, r1
    7948:	330c      	adds	r3, #12
    794a:	681b      	ldr	r3, [r3, #0]
    794c:	b2db      	uxtb	r3, r3
    794e:	461a      	mov	r2, r3
    7950:	2100      	movs	r1, #0
    7952:	6838      	ldr	r0, [r7, #0]
    7954:	4b38      	ldr	r3, [pc, #224]	; (7a38 <_tc_timer_init+0x294>)
    7956:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7958:	f997 200f 	ldrsb.w	r2, [r7, #15]
    795c:	4930      	ldr	r1, [pc, #192]	; (7a20 <_tc_timer_init+0x27c>)
    795e:	4613      	mov	r3, r2
    7960:	009b      	lsls	r3, r3, #2
    7962:	4413      	add	r3, r2
    7964:	009b      	lsls	r3, r3, #2
    7966:	440b      	add	r3, r1
    7968:	3310      	adds	r3, #16
    796a:	681b      	ldr	r3, [r3, #0]
    796c:	b2db      	uxtb	r3, r3
    796e:	461a      	mov	r2, r3
    7970:	2101      	movs	r1, #1
    7972:	6838      	ldr	r0, [r7, #0]
    7974:	4b30      	ldr	r3, [pc, #192]	; (7a38 <_tc_timer_init+0x294>)
    7976:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7978:	f997 200f 	ldrsb.w	r2, [r7, #15]
    797c:	4928      	ldr	r1, [pc, #160]	; (7a20 <_tc_timer_init+0x27c>)
    797e:	4613      	mov	r3, r2
    7980:	009b      	lsls	r3, r3, #2
    7982:	4413      	add	r3, r2
    7984:	009b      	lsls	r3, r3, #2
    7986:	440b      	add	r3, r1
    7988:	330b      	adds	r3, #11
    798a:	781b      	ldrb	r3, [r3, #0]
    798c:	4619      	mov	r1, r3
    798e:	6838      	ldr	r0, [r7, #0]
    7990:	4b2a      	ldr	r3, [pc, #168]	; (7a3c <_tc_timer_init+0x298>)
    7992:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7994:	6838      	ldr	r0, [r7, #0]
    7996:	4b2a      	ldr	r3, [pc, #168]	; (7a40 <_tc_timer_init+0x29c>)
    7998:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    799a:	6879      	ldr	r1, [r7, #4]
    799c:	6838      	ldr	r0, [r7, #0]
    799e:	4b29      	ldr	r3, [pc, #164]	; (7a44 <_tc_timer_init+0x2a0>)
    79a0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    79a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79a6:	491e      	ldr	r1, [pc, #120]	; (7a20 <_tc_timer_init+0x27c>)
    79a8:	4613      	mov	r3, r2
    79aa:	009b      	lsls	r3, r3, #2
    79ac:	4413      	add	r3, r2
    79ae:	009b      	lsls	r3, r3, #2
    79b0:	440b      	add	r3, r1
    79b2:	3302      	adds	r3, #2
    79b4:	f9b3 3000 	ldrsh.w	r3, [r3]
    79b8:	4618      	mov	r0, r3
    79ba:	4b23      	ldr	r3, [pc, #140]	; (7a48 <_tc_timer_init+0x2a4>)
    79bc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    79be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79c2:	4917      	ldr	r1, [pc, #92]	; (7a20 <_tc_timer_init+0x27c>)
    79c4:	4613      	mov	r3, r2
    79c6:	009b      	lsls	r3, r3, #2
    79c8:	4413      	add	r3, r2
    79ca:	009b      	lsls	r3, r3, #2
    79cc:	440b      	add	r3, r1
    79ce:	3302      	adds	r3, #2
    79d0:	f9b3 3000 	ldrsh.w	r3, [r3]
    79d4:	4618      	mov	r0, r3
    79d6:	4b1d      	ldr	r3, [pc, #116]	; (7a4c <_tc_timer_init+0x2a8>)
    79d8:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    79da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79de:	4910      	ldr	r1, [pc, #64]	; (7a20 <_tc_timer_init+0x27c>)
    79e0:	4613      	mov	r3, r2
    79e2:	009b      	lsls	r3, r3, #2
    79e4:	4413      	add	r3, r2
    79e6:	009b      	lsls	r3, r3, #2
    79e8:	440b      	add	r3, r1
    79ea:	3302      	adds	r3, #2
    79ec:	f9b3 3000 	ldrsh.w	r3, [r3]
    79f0:	4618      	mov	r0, r3
    79f2:	4b17      	ldr	r3, [pc, #92]	; (7a50 <_tc_timer_init+0x2ac>)
    79f4:	4798      	blx	r3

	return ERR_NONE;
    79f6:	2300      	movs	r3, #0
}
    79f8:	4618      	mov	r0, r3
    79fa:	3710      	adds	r7, #16
    79fc:	46bd      	mov	sp, r7
    79fe:	bd80      	pop	{r7, pc}
    7a00:	00007ff5 	.word	0x00007ff5
    7a04:	0000f090 	.word	0x0000f090
    7a08:	0000341d 	.word	0x0000341d
    7a0c:	00007419 	.word	0x00007419
    7a10:	000075b9 	.word	0x000075b9
    7a14:	00007569 	.word	0x00007569
    7a18:	000073f5 	.word	0x000073f5
    7a1c:	000075e9 	.word	0x000075e9
    7a20:	20000110 	.word	0x20000110
    7a24:	00007649 	.word	0x00007649
    7a28:	0000760d 	.word	0x0000760d
    7a2c:	0000762b 	.word	0x0000762b
    7a30:	00007749 	.word	0x00007749
    7a34:	000076e5 	.word	0x000076e5
    7a38:	000076b5 	.word	0x000076b5
    7a3c:	00007669 	.word	0x00007669
    7a40:	0000749d 	.word	0x0000749d
    7a44:	0000805d 	.word	0x0000805d
    7a48:	00007375 	.word	0x00007375
    7a4c:	000073b9 	.word	0x000073b9
    7a50:	00007339 	.word	0x00007339

00007a54 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7a54:	b580      	push	{r7, lr}
    7a56:	b084      	sub	sp, #16
    7a58:	af00      	add	r7, sp, #0
    7a5a:	6078      	str	r0, [r7, #4]
    7a5c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7a5e:	6838      	ldr	r0, [r7, #0]
    7a60:	4b73      	ldr	r3, [pc, #460]	; (7c30 <_pwm_init+0x1dc>)
    7a62:	4798      	blx	r3
    7a64:	4603      	mov	r3, r0
    7a66:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	683a      	ldr	r2, [r7, #0]
    7a6c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7a6e:	2101      	movs	r1, #1
    7a70:	6838      	ldr	r0, [r7, #0]
    7a72:	4b70      	ldr	r3, [pc, #448]	; (7c34 <_pwm_init+0x1e0>)
    7a74:	4798      	blx	r3
    7a76:	4603      	mov	r3, r0
    7a78:	f083 0301 	eor.w	r3, r3, #1
    7a7c:	b2db      	uxtb	r3, r3
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d011      	beq.n	7aa6 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7a82:	2102      	movs	r1, #2
    7a84:	6838      	ldr	r0, [r7, #0]
    7a86:	4b6c      	ldr	r3, [pc, #432]	; (7c38 <_pwm_init+0x1e4>)
    7a88:	4798      	blx	r3
    7a8a:	4603      	mov	r3, r0
    7a8c:	2b00      	cmp	r3, #0
    7a8e:	d006      	beq.n	7a9e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7a90:	6838      	ldr	r0, [r7, #0]
    7a92:	4b6a      	ldr	r3, [pc, #424]	; (7c3c <_pwm_init+0x1e8>)
    7a94:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7a96:	2102      	movs	r1, #2
    7a98:	6838      	ldr	r0, [r7, #0]
    7a9a:	4b69      	ldr	r3, [pc, #420]	; (7c40 <_pwm_init+0x1ec>)
    7a9c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7a9e:	2101      	movs	r1, #1
    7aa0:	6838      	ldr	r0, [r7, #0]
    7aa2:	4b68      	ldr	r3, [pc, #416]	; (7c44 <_pwm_init+0x1f0>)
    7aa4:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7aa6:	2101      	movs	r1, #1
    7aa8:	6838      	ldr	r0, [r7, #0]
    7aaa:	4b65      	ldr	r3, [pc, #404]	; (7c40 <_pwm_init+0x1ec>)
    7aac:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7aae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ab2:	4965      	ldr	r1, [pc, #404]	; (7c48 <_pwm_init+0x1f4>)
    7ab4:	4613      	mov	r3, r2
    7ab6:	009b      	lsls	r3, r3, #2
    7ab8:	4413      	add	r3, r2
    7aba:	009b      	lsls	r3, r3, #2
    7abc:	440b      	add	r3, r1
    7abe:	3304      	adds	r3, #4
    7ac0:	681b      	ldr	r3, [r3, #0]
    7ac2:	4619      	mov	r1, r3
    7ac4:	6838      	ldr	r0, [r7, #0]
    7ac6:	4b5f      	ldr	r3, [pc, #380]	; (7c44 <_pwm_init+0x1f0>)
    7ac8:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7aca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ace:	495e      	ldr	r1, [pc, #376]	; (7c48 <_pwm_init+0x1f4>)
    7ad0:	4613      	mov	r3, r2
    7ad2:	009b      	lsls	r3, r3, #2
    7ad4:	4413      	add	r3, r2
    7ad6:	009b      	lsls	r3, r3, #2
    7ad8:	440b      	add	r3, r1
    7ada:	330a      	adds	r3, #10
    7adc:	781b      	ldrb	r3, [r3, #0]
    7ade:	4619      	mov	r1, r3
    7ae0:	6838      	ldr	r0, [r7, #0]
    7ae2:	4b5a      	ldr	r3, [pc, #360]	; (7c4c <_pwm_init+0x1f8>)
    7ae4:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7ae6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7aea:	4957      	ldr	r1, [pc, #348]	; (7c48 <_pwm_init+0x1f4>)
    7aec:	4613      	mov	r3, r2
    7aee:	009b      	lsls	r3, r3, #2
    7af0:	4413      	add	r3, r2
    7af2:	009b      	lsls	r3, r3, #2
    7af4:	440b      	add	r3, r1
    7af6:	3308      	adds	r3, #8
    7af8:	881b      	ldrh	r3, [r3, #0]
    7afa:	4619      	mov	r1, r3
    7afc:	6838      	ldr	r0, [r7, #0]
    7afe:	4b54      	ldr	r3, [pc, #336]	; (7c50 <_pwm_init+0x1fc>)
    7b00:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7b02:	2103      	movs	r1, #3
    7b04:	6838      	ldr	r0, [r7, #0]
    7b06:	4b53      	ldr	r3, [pc, #332]	; (7c54 <_pwm_init+0x200>)
    7b08:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7b0a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b0e:	494e      	ldr	r1, [pc, #312]	; (7c48 <_pwm_init+0x1f4>)
    7b10:	4613      	mov	r3, r2
    7b12:	009b      	lsls	r3, r3, #2
    7b14:	4413      	add	r3, r2
    7b16:	009b      	lsls	r3, r3, #2
    7b18:	440b      	add	r3, r1
    7b1a:	3304      	adds	r3, #4
    7b1c:	681b      	ldr	r3, [r3, #0]
    7b1e:	f003 030c 	and.w	r3, r3, #12
    7b22:	2b08      	cmp	r3, #8
    7b24:	d11e      	bne.n	7b64 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7b26:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b2a:	4947      	ldr	r1, [pc, #284]	; (7c48 <_pwm_init+0x1f4>)
    7b2c:	4613      	mov	r3, r2
    7b2e:	009b      	lsls	r3, r3, #2
    7b30:	4413      	add	r3, r2
    7b32:	009b      	lsls	r3, r3, #2
    7b34:	440b      	add	r3, r1
    7b36:	330c      	adds	r3, #12
    7b38:	681b      	ldr	r3, [r3, #0]
    7b3a:	461a      	mov	r2, r3
    7b3c:	2100      	movs	r1, #0
    7b3e:	6838      	ldr	r0, [r7, #0]
    7b40:	4b45      	ldr	r3, [pc, #276]	; (7c58 <_pwm_init+0x204>)
    7b42:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7b44:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b48:	493f      	ldr	r1, [pc, #252]	; (7c48 <_pwm_init+0x1f4>)
    7b4a:	4613      	mov	r3, r2
    7b4c:	009b      	lsls	r3, r3, #2
    7b4e:	4413      	add	r3, r2
    7b50:	009b      	lsls	r3, r3, #2
    7b52:	440b      	add	r3, r1
    7b54:	3310      	adds	r3, #16
    7b56:	681b      	ldr	r3, [r3, #0]
    7b58:	461a      	mov	r2, r3
    7b5a:	2101      	movs	r1, #1
    7b5c:	6838      	ldr	r0, [r7, #0]
    7b5e:	4b3e      	ldr	r3, [pc, #248]	; (7c58 <_pwm_init+0x204>)
    7b60:	4798      	blx	r3
    7b62:	e031      	b.n	7bc8 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7b64:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b68:	4937      	ldr	r1, [pc, #220]	; (7c48 <_pwm_init+0x1f4>)
    7b6a:	4613      	mov	r3, r2
    7b6c:	009b      	lsls	r3, r3, #2
    7b6e:	4413      	add	r3, r2
    7b70:	009b      	lsls	r3, r3, #2
    7b72:	440b      	add	r3, r1
    7b74:	3304      	adds	r3, #4
    7b76:	681b      	ldr	r3, [r3, #0]
    7b78:	f003 030c 	and.w	r3, r3, #12
    7b7c:	2b00      	cmp	r3, #0
    7b7e:	d120      	bne.n	7bc2 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7b80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b84:	4930      	ldr	r1, [pc, #192]	; (7c48 <_pwm_init+0x1f4>)
    7b86:	4613      	mov	r3, r2
    7b88:	009b      	lsls	r3, r3, #2
    7b8a:	4413      	add	r3, r2
    7b8c:	009b      	lsls	r3, r3, #2
    7b8e:	440b      	add	r3, r1
    7b90:	330c      	adds	r3, #12
    7b92:	681b      	ldr	r3, [r3, #0]
    7b94:	b29b      	uxth	r3, r3
    7b96:	461a      	mov	r2, r3
    7b98:	2100      	movs	r1, #0
    7b9a:	6838      	ldr	r0, [r7, #0]
    7b9c:	4b2f      	ldr	r3, [pc, #188]	; (7c5c <_pwm_init+0x208>)
    7b9e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7ba0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ba4:	4928      	ldr	r1, [pc, #160]	; (7c48 <_pwm_init+0x1f4>)
    7ba6:	4613      	mov	r3, r2
    7ba8:	009b      	lsls	r3, r3, #2
    7baa:	4413      	add	r3, r2
    7bac:	009b      	lsls	r3, r3, #2
    7bae:	440b      	add	r3, r1
    7bb0:	3310      	adds	r3, #16
    7bb2:	681b      	ldr	r3, [r3, #0]
    7bb4:	b29b      	uxth	r3, r3
    7bb6:	461a      	mov	r2, r3
    7bb8:	2101      	movs	r1, #1
    7bba:	6838      	ldr	r0, [r7, #0]
    7bbc:	4b27      	ldr	r3, [pc, #156]	; (7c5c <_pwm_init+0x208>)
    7bbe:	4798      	blx	r3
    7bc0:	e002      	b.n	7bc8 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7bc2:	f04f 33ff 	mov.w	r3, #4294967295
    7bc6:	e02e      	b.n	7c26 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7bc8:	6879      	ldr	r1, [r7, #4]
    7bca:	6838      	ldr	r0, [r7, #0]
    7bcc:	4b24      	ldr	r3, [pc, #144]	; (7c60 <_pwm_init+0x20c>)
    7bce:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7bd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bd4:	491c      	ldr	r1, [pc, #112]	; (7c48 <_pwm_init+0x1f4>)
    7bd6:	4613      	mov	r3, r2
    7bd8:	009b      	lsls	r3, r3, #2
    7bda:	4413      	add	r3, r2
    7bdc:	009b      	lsls	r3, r3, #2
    7bde:	440b      	add	r3, r1
    7be0:	3302      	adds	r3, #2
    7be2:	f9b3 3000 	ldrsh.w	r3, [r3]
    7be6:	4618      	mov	r0, r3
    7be8:	4b1e      	ldr	r3, [pc, #120]	; (7c64 <_pwm_init+0x210>)
    7bea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7bec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bf0:	4915      	ldr	r1, [pc, #84]	; (7c48 <_pwm_init+0x1f4>)
    7bf2:	4613      	mov	r3, r2
    7bf4:	009b      	lsls	r3, r3, #2
    7bf6:	4413      	add	r3, r2
    7bf8:	009b      	lsls	r3, r3, #2
    7bfa:	440b      	add	r3, r1
    7bfc:	3302      	adds	r3, #2
    7bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c02:	4618      	mov	r0, r3
    7c04:	4b18      	ldr	r3, [pc, #96]	; (7c68 <_pwm_init+0x214>)
    7c06:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7c08:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c0c:	490e      	ldr	r1, [pc, #56]	; (7c48 <_pwm_init+0x1f4>)
    7c0e:	4613      	mov	r3, r2
    7c10:	009b      	lsls	r3, r3, #2
    7c12:	4413      	add	r3, r2
    7c14:	009b      	lsls	r3, r3, #2
    7c16:	440b      	add	r3, r1
    7c18:	3302      	adds	r3, #2
    7c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c1e:	4618      	mov	r0, r3
    7c20:	4b12      	ldr	r3, [pc, #72]	; (7c6c <_pwm_init+0x218>)
    7c22:	4798      	blx	r3

	return 0;
    7c24:	2300      	movs	r3, #0
}
    7c26:	4618      	mov	r0, r3
    7c28:	3710      	adds	r7, #16
    7c2a:	46bd      	mov	sp, r7
    7c2c:	bd80      	pop	{r7, pc}
    7c2e:	bf00      	nop
    7c30:	00007ff5 	.word	0x00007ff5
    7c34:	00007419 	.word	0x00007419
    7c38:	000075b9 	.word	0x000075b9
    7c3c:	00007569 	.word	0x00007569
    7c40:	000073f5 	.word	0x000073f5
    7c44:	000075e9 	.word	0x000075e9
    7c48:	20000110 	.word	0x20000110
    7c4c:	00007649 	.word	0x00007649
    7c50:	0000760d 	.word	0x0000760d
    7c54:	0000762b 	.word	0x0000762b
    7c58:	00007749 	.word	0x00007749
    7c5c:	000076e5 	.word	0x000076e5
    7c60:	0000805d 	.word	0x0000805d
    7c64:	00007375 	.word	0x00007375
    7c68:	000073b9 	.word	0x000073b9
    7c6c:	00007339 	.word	0x00007339

00007c70 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7c70:	b580      	push	{r7, lr}
    7c72:	b084      	sub	sp, #16
    7c74:	af00      	add	r7, sp, #0
    7c76:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7c78:	687b      	ldr	r3, [r7, #4]
    7c7a:	68db      	ldr	r3, [r3, #12]
    7c7c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7c7e:	68f8      	ldr	r0, [r7, #12]
    7c80:	4b10      	ldr	r3, [pc, #64]	; (7cc4 <_tc_timer_deinit+0x54>)
    7c82:	4798      	blx	r3
    7c84:	4603      	mov	r3, r0
    7c86:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7c88:	22f9      	movs	r2, #249	; 0xf9
    7c8a:	490f      	ldr	r1, [pc, #60]	; (7cc8 <_tc_timer_deinit+0x58>)
    7c8c:	2001      	movs	r0, #1
    7c8e:	4b0f      	ldr	r3, [pc, #60]	; (7ccc <_tc_timer_deinit+0x5c>)
    7c90:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7c92:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7c96:	490e      	ldr	r1, [pc, #56]	; (7cd0 <_tc_timer_deinit+0x60>)
    7c98:	4613      	mov	r3, r2
    7c9a:	009b      	lsls	r3, r3, #2
    7c9c:	4413      	add	r3, r2
    7c9e:	009b      	lsls	r3, r3, #2
    7ca0:	440b      	add	r3, r1
    7ca2:	3302      	adds	r3, #2
    7ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ca8:	4618      	mov	r0, r3
    7caa:	4b0a      	ldr	r3, [pc, #40]	; (7cd4 <_tc_timer_deinit+0x64>)
    7cac:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7cae:	68f8      	ldr	r0, [r7, #12]
    7cb0:	4b09      	ldr	r3, [pc, #36]	; (7cd8 <_tc_timer_deinit+0x68>)
    7cb2:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7cb4:	68f8      	ldr	r0, [r7, #12]
    7cb6:	4b09      	ldr	r3, [pc, #36]	; (7cdc <_tc_timer_deinit+0x6c>)
    7cb8:	4798      	blx	r3
}
    7cba:	bf00      	nop
    7cbc:	3710      	adds	r7, #16
    7cbe:	46bd      	mov	sp, r7
    7cc0:	bd80      	pop	{r7, pc}
    7cc2:	bf00      	nop
    7cc4:	00007ff5 	.word	0x00007ff5
    7cc8:	0000f090 	.word	0x0000f090
    7ccc:	0000341d 	.word	0x0000341d
    7cd0:	20000110 	.word	0x20000110
    7cd4:	00007375 	.word	0x00007375
    7cd8:	00007569 	.word	0x00007569
    7cdc:	000074e1 	.word	0x000074e1

00007ce0 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7ce0:	b580      	push	{r7, lr}
    7ce2:	b082      	sub	sp, #8
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7ce8:	687b      	ldr	r3, [r7, #4]
    7cea:	68db      	ldr	r3, [r3, #12]
    7cec:	4618      	mov	r0, r3
    7cee:	4b03      	ldr	r3, [pc, #12]	; (7cfc <_tc_timer_start+0x1c>)
    7cf0:	4798      	blx	r3
}
    7cf2:	bf00      	nop
    7cf4:	3708      	adds	r7, #8
    7cf6:	46bd      	mov	sp, r7
    7cf8:	bd80      	pop	{r7, pc}
    7cfa:	bf00      	nop
    7cfc:	00007509 	.word	0x00007509

00007d00 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7d00:	b580      	push	{r7, lr}
    7d02:	b082      	sub	sp, #8
    7d04:	af00      	add	r7, sp, #0
    7d06:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7d08:	687b      	ldr	r3, [r7, #4]
    7d0a:	68db      	ldr	r3, [r3, #12]
    7d0c:	4618      	mov	r0, r3
    7d0e:	4b03      	ldr	r3, [pc, #12]	; (7d1c <_tc_timer_stop+0x1c>)
    7d10:	4798      	blx	r3
}
    7d12:	bf00      	nop
    7d14:	3708      	adds	r7, #8
    7d16:	46bd      	mov	sp, r7
    7d18:	bd80      	pop	{r7, pc}
    7d1a:	bf00      	nop
    7d1c:	00007569 	.word	0x00007569

00007d20 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7d20:	b580      	push	{r7, lr}
    7d22:	b084      	sub	sp, #16
    7d24:	af00      	add	r7, sp, #0
    7d26:	6078      	str	r0, [r7, #4]
    7d28:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	68db      	ldr	r3, [r3, #12]
    7d2e:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d30:	68f8      	ldr	r0, [r7, #12]
    7d32:	4b14      	ldr	r3, [pc, #80]	; (7d84 <_tc_timer_set_period+0x64>)
    7d34:	4798      	blx	r3
    7d36:	4603      	mov	r3, r0
    7d38:	2b02      	cmp	r3, #2
    7d3a:	d105      	bne.n	7d48 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7d3c:	683a      	ldr	r2, [r7, #0]
    7d3e:	2100      	movs	r1, #0
    7d40:	68f8      	ldr	r0, [r7, #12]
    7d42:	4b11      	ldr	r3, [pc, #68]	; (7d88 <_tc_timer_set_period+0x68>)
    7d44:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7d46:	e019      	b.n	7d7c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d48:	68f8      	ldr	r0, [r7, #12]
    7d4a:	4b0e      	ldr	r3, [pc, #56]	; (7d84 <_tc_timer_set_period+0x64>)
    7d4c:	4798      	blx	r3
    7d4e:	4603      	mov	r3, r0
    7d50:	2b00      	cmp	r3, #0
    7d52:	d107      	bne.n	7d64 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7d54:	683b      	ldr	r3, [r7, #0]
    7d56:	b29b      	uxth	r3, r3
    7d58:	461a      	mov	r2, r3
    7d5a:	2100      	movs	r1, #0
    7d5c:	68f8      	ldr	r0, [r7, #12]
    7d5e:	4b0b      	ldr	r3, [pc, #44]	; (7d8c <_tc_timer_set_period+0x6c>)
    7d60:	4798      	blx	r3
}
    7d62:	e00b      	b.n	7d7c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7d64:	68f8      	ldr	r0, [r7, #12]
    7d66:	4b07      	ldr	r3, [pc, #28]	; (7d84 <_tc_timer_set_period+0x64>)
    7d68:	4798      	blx	r3
    7d6a:	4603      	mov	r3, r0
    7d6c:	2b01      	cmp	r3, #1
    7d6e:	d105      	bne.n	7d7c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7d70:	683b      	ldr	r3, [r7, #0]
    7d72:	b2db      	uxtb	r3, r3
    7d74:	4619      	mov	r1, r3
    7d76:	68f8      	ldr	r0, [r7, #12]
    7d78:	4b05      	ldr	r3, [pc, #20]	; (7d90 <_tc_timer_set_period+0x70>)
    7d7a:	4798      	blx	r3
}
    7d7c:	bf00      	nop
    7d7e:	3710      	adds	r7, #16
    7d80:	46bd      	mov	sp, r7
    7d82:	bd80      	pop	{r7, pc}
    7d84:	00007591 	.word	0x00007591
    7d88:	00007749 	.word	0x00007749
    7d8c:	000076e5 	.word	0x000076e5
    7d90:	00007669 	.word	0x00007669

00007d94 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    7d94:	b580      	push	{r7, lr}
    7d96:	b084      	sub	sp, #16
    7d98:	af00      	add	r7, sp, #0
    7d9a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7d9c:	687b      	ldr	r3, [r7, #4]
    7d9e:	68db      	ldr	r3, [r3, #12]
    7da0:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7da2:	68f8      	ldr	r0, [r7, #12]
    7da4:	4b13      	ldr	r3, [pc, #76]	; (7df4 <_tc_timer_get_period+0x60>)
    7da6:	4798      	blx	r3
    7da8:	4603      	mov	r3, r0
    7daa:	2b02      	cmp	r3, #2
    7dac:	d105      	bne.n	7dba <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7dae:	2100      	movs	r1, #0
    7db0:	68f8      	ldr	r0, [r7, #12]
    7db2:	4b11      	ldr	r3, [pc, #68]	; (7df8 <_tc_timer_get_period+0x64>)
    7db4:	4798      	blx	r3
    7db6:	4603      	mov	r3, r0
    7db8:	e017      	b.n	7dea <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7dba:	68f8      	ldr	r0, [r7, #12]
    7dbc:	4b0d      	ldr	r3, [pc, #52]	; (7df4 <_tc_timer_get_period+0x60>)
    7dbe:	4798      	blx	r3
    7dc0:	4603      	mov	r3, r0
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d105      	bne.n	7dd2 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7dc6:	2100      	movs	r1, #0
    7dc8:	68f8      	ldr	r0, [r7, #12]
    7dca:	4b0c      	ldr	r3, [pc, #48]	; (7dfc <_tc_timer_get_period+0x68>)
    7dcc:	4798      	blx	r3
    7dce:	4603      	mov	r3, r0
    7dd0:	e00b      	b.n	7dea <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7dd2:	68f8      	ldr	r0, [r7, #12]
    7dd4:	4b07      	ldr	r3, [pc, #28]	; (7df4 <_tc_timer_get_period+0x60>)
    7dd6:	4798      	blx	r3
    7dd8:	4603      	mov	r3, r0
    7dda:	2b01      	cmp	r3, #1
    7ddc:	d104      	bne.n	7de8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7dde:	68f8      	ldr	r0, [r7, #12]
    7de0:	4b07      	ldr	r3, [pc, #28]	; (7e00 <_tc_timer_get_period+0x6c>)
    7de2:	4798      	blx	r3
    7de4:	4603      	mov	r3, r0
    7de6:	e000      	b.n	7dea <_tc_timer_get_period+0x56>
	}

	return 0;
    7de8:	2300      	movs	r3, #0
}
    7dea:	4618      	mov	r0, r3
    7dec:	3710      	adds	r7, #16
    7dee:	46bd      	mov	sp, r7
    7df0:	bd80      	pop	{r7, pc}
    7df2:	bf00      	nop
    7df4:	00007591 	.word	0x00007591
    7df8:	00007779 	.word	0x00007779
    7dfc:	00007719 	.word	0x00007719
    7e00:	00007691 	.word	0x00007691

00007e04 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7e04:	b580      	push	{r7, lr}
    7e06:	b082      	sub	sp, #8
    7e08:	af00      	add	r7, sp, #0
    7e0a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	68db      	ldr	r3, [r3, #12]
    7e10:	4618      	mov	r0, r3
    7e12:	4b03      	ldr	r3, [pc, #12]	; (7e20 <_tc_timer_is_started+0x1c>)
    7e14:	4798      	blx	r3
    7e16:	4603      	mov	r3, r0
}
    7e18:	4618      	mov	r0, r3
    7e1a:	3708      	adds	r7, #8
    7e1c:	46bd      	mov	sp, r7
    7e1e:	bd80      	pop	{r7, pc}
    7e20:	00007531 	.word	0x00007531

00007e24 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7e24:	b480      	push	{r7}
    7e26:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7e28:	4b02      	ldr	r3, [pc, #8]	; (7e34 <_tc_get_timer+0x10>)
}
    7e2a:	4618      	mov	r0, r3
    7e2c:	46bd      	mov	sp, r7
    7e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e32:	4770      	bx	lr
    7e34:	20000188 	.word	0x20000188

00007e38 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7e38:	b480      	push	{r7}
    7e3a:	af00      	add	r7, sp, #0
	return NULL;
    7e3c:	2300      	movs	r3, #0
}
    7e3e:	4618      	mov	r0, r3
    7e40:	46bd      	mov	sp, r7
    7e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e46:	4770      	bx	lr

00007e48 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7e48:	b580      	push	{r7, lr}
    7e4a:	b084      	sub	sp, #16
    7e4c:	af00      	add	r7, sp, #0
    7e4e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7e50:	687b      	ldr	r3, [r7, #4]
    7e52:	68db      	ldr	r3, [r3, #12]
    7e54:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7e56:	68f8      	ldr	r0, [r7, #12]
    7e58:	4b0e      	ldr	r3, [pc, #56]	; (7e94 <_tc_timer_set_irq+0x4c>)
    7e5a:	4798      	blx	r3
    7e5c:	4603      	mov	r3, r0
    7e5e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7e60:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7e64:	490c      	ldr	r1, [pc, #48]	; (7e98 <_tc_timer_set_irq+0x50>)
    7e66:	2001      	movs	r0, #1
    7e68:	4b0c      	ldr	r3, [pc, #48]	; (7e9c <_tc_timer_set_irq+0x54>)
    7e6a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7e6c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7e70:	490b      	ldr	r1, [pc, #44]	; (7ea0 <_tc_timer_set_irq+0x58>)
    7e72:	4613      	mov	r3, r2
    7e74:	009b      	lsls	r3, r3, #2
    7e76:	4413      	add	r3, r2
    7e78:	009b      	lsls	r3, r3, #2
    7e7a:	440b      	add	r3, r1
    7e7c:	3302      	adds	r3, #2
    7e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e82:	b2db      	uxtb	r3, r3
    7e84:	4618      	mov	r0, r3
    7e86:	4b07      	ldr	r3, [pc, #28]	; (7ea4 <_tc_timer_set_irq+0x5c>)
    7e88:	4798      	blx	r3
}
    7e8a:	bf00      	nop
    7e8c:	3710      	adds	r7, #16
    7e8e:	46bd      	mov	sp, r7
    7e90:	bd80      	pop	{r7, pc}
    7e92:	bf00      	nop
    7e94:	00007ff5 	.word	0x00007ff5
    7e98:	0000f090 	.word	0x0000f090
    7e9c:	0000341d 	.word	0x0000341d
    7ea0:	20000110 	.word	0x20000110
    7ea4:	00003c65 	.word	0x00003c65

00007ea8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7ea8:	b580      	push	{r7, lr}
    7eaa:	b084      	sub	sp, #16
    7eac:	af00      	add	r7, sp, #0
    7eae:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7eb0:	687b      	ldr	r3, [r7, #4]
    7eb2:	68db      	ldr	r3, [r3, #12]
    7eb4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7eb6:	68f8      	ldr	r0, [r7, #12]
    7eb8:	4b07      	ldr	r3, [pc, #28]	; (7ed8 <tc_interrupt_handler+0x30>)
    7eba:	4798      	blx	r3
    7ebc:	4603      	mov	r3, r0
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d006      	beq.n	7ed0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7ec2:	68f8      	ldr	r0, [r7, #12]
    7ec4:	4b05      	ldr	r3, [pc, #20]	; (7edc <tc_interrupt_handler+0x34>)
    7ec6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	6878      	ldr	r0, [r7, #4]
    7ece:	4798      	blx	r3
	}
}
    7ed0:	bf00      	nop
    7ed2:	3710      	adds	r7, #16
    7ed4:	46bd      	mov	sp, r7
    7ed6:	bd80      	pop	{r7, pc}
    7ed8:	00007441 	.word	0x00007441
    7edc:	00007469 	.word	0x00007469

00007ee0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7ee0:	b580      	push	{r7, lr}
    7ee2:	b084      	sub	sp, #16
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	691b      	ldr	r3, [r3, #16]
    7eec:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7eee:	68f8      	ldr	r0, [r7, #12]
    7ef0:	4b12      	ldr	r3, [pc, #72]	; (7f3c <tc_pwm_interrupt_handler+0x5c>)
    7ef2:	4798      	blx	r3
    7ef4:	4603      	mov	r3, r0
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	d00a      	beq.n	7f10 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7efa:	68f8      	ldr	r0, [r7, #12]
    7efc:	4b10      	ldr	r3, [pc, #64]	; (7f40 <tc_pwm_interrupt_handler+0x60>)
    7efe:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	681b      	ldr	r3, [r3, #0]
    7f04:	2b00      	cmp	r3, #0
    7f06:	d003      	beq.n	7f10 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	681b      	ldr	r3, [r3, #0]
    7f0c:	6878      	ldr	r0, [r7, #4]
    7f0e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7f10:	68f8      	ldr	r0, [r7, #12]
    7f12:	4b0c      	ldr	r3, [pc, #48]	; (7f44 <tc_pwm_interrupt_handler+0x64>)
    7f14:	4798      	blx	r3
    7f16:	4603      	mov	r3, r0
    7f18:	2b00      	cmp	r3, #0
    7f1a:	d00a      	beq.n	7f32 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7f1c:	68f8      	ldr	r0, [r7, #12]
    7f1e:	4b0a      	ldr	r3, [pc, #40]	; (7f48 <tc_pwm_interrupt_handler+0x68>)
    7f20:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	685b      	ldr	r3, [r3, #4]
    7f26:	2b00      	cmp	r3, #0
    7f28:	d003      	beq.n	7f32 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	685b      	ldr	r3, [r3, #4]
    7f2e:	6878      	ldr	r0, [r7, #4]
    7f30:	4798      	blx	r3
		}
	}
}
    7f32:	bf00      	nop
    7f34:	3710      	adds	r7, #16
    7f36:	46bd      	mov	sp, r7
    7f38:	bd80      	pop	{r7, pc}
    7f3a:	bf00      	nop
    7f3c:	00007441 	.word	0x00007441
    7f40:	00007469 	.word	0x00007469
    7f44:	000074b7 	.word	0x000074b7
    7f48:	00007483 	.word	0x00007483

00007f4c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7f4c:	b580      	push	{r7, lr}
    7f4e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7f50:	4b03      	ldr	r3, [pc, #12]	; (7f60 <TC0_Handler+0x14>)
    7f52:	681b      	ldr	r3, [r3, #0]
    7f54:	4618      	mov	r0, r3
    7f56:	4b03      	ldr	r3, [pc, #12]	; (7f64 <TC0_Handler+0x18>)
    7f58:	4798      	blx	r3
}
    7f5a:	bf00      	nop
    7f5c:	bd80      	pop	{r7, pc}
    7f5e:	bf00      	nop
    7f60:	200009f8 	.word	0x200009f8
    7f64:	00007ea9 	.word	0x00007ea9

00007f68 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7f68:	b580      	push	{r7, lr}
    7f6a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7f6c:	4b03      	ldr	r3, [pc, #12]	; (7f7c <TC2_Handler+0x14>)
    7f6e:	681b      	ldr	r3, [r3, #0]
    7f70:	4618      	mov	r0, r3
    7f72:	4b03      	ldr	r3, [pc, #12]	; (7f80 <TC2_Handler+0x18>)
    7f74:	4798      	blx	r3
}
    7f76:	bf00      	nop
    7f78:	bd80      	pop	{r7, pc}
    7f7a:	bf00      	nop
    7f7c:	200009fc 	.word	0x200009fc
    7f80:	00007ea9 	.word	0x00007ea9

00007f84 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    7f84:	b580      	push	{r7, lr}
    7f86:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    7f88:	4b03      	ldr	r3, [pc, #12]	; (7f98 <TC4_Handler+0x14>)
    7f8a:	681b      	ldr	r3, [r3, #0]
    7f8c:	4618      	mov	r0, r3
    7f8e:	4b03      	ldr	r3, [pc, #12]	; (7f9c <TC4_Handler+0x18>)
    7f90:	4798      	blx	r3
}
    7f92:	bf00      	nop
    7f94:	bd80      	pop	{r7, pc}
    7f96:	bf00      	nop
    7f98:	20000a00 	.word	0x20000a00
    7f9c:	00007ea9 	.word	0x00007ea9

00007fa0 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    7fa0:	b580      	push	{r7, lr}
    7fa2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    7fa4:	4b03      	ldr	r3, [pc, #12]	; (7fb4 <TC5_Handler+0x14>)
    7fa6:	681b      	ldr	r3, [r3, #0]
    7fa8:	4618      	mov	r0, r3
    7faa:	4b03      	ldr	r3, [pc, #12]	; (7fb8 <TC5_Handler+0x18>)
    7fac:	4798      	blx	r3
}
    7fae:	bf00      	nop
    7fb0:	bd80      	pop	{r7, pc}
    7fb2:	bf00      	nop
    7fb4:	20000a04 	.word	0x20000a04
    7fb8:	00007ea9 	.word	0x00007ea9

00007fbc <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    7fbc:	b580      	push	{r7, lr}
    7fbe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    7fc0:	4b03      	ldr	r3, [pc, #12]	; (7fd0 <TC6_Handler+0x14>)
    7fc2:	681b      	ldr	r3, [r3, #0]
    7fc4:	4618      	mov	r0, r3
    7fc6:	4b03      	ldr	r3, [pc, #12]	; (7fd4 <TC6_Handler+0x18>)
    7fc8:	4798      	blx	r3
}
    7fca:	bf00      	nop
    7fcc:	bd80      	pop	{r7, pc}
    7fce:	bf00      	nop
    7fd0:	20000a08 	.word	0x20000a08
    7fd4:	00007ea9 	.word	0x00007ea9

00007fd8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7fdc:	4b03      	ldr	r3, [pc, #12]	; (7fec <TC7_Handler+0x14>)
    7fde:	681b      	ldr	r3, [r3, #0]
    7fe0:	4618      	mov	r0, r3
    7fe2:	4b03      	ldr	r3, [pc, #12]	; (7ff0 <TC7_Handler+0x18>)
    7fe4:	4798      	blx	r3
}
    7fe6:	bf00      	nop
    7fe8:	bd80      	pop	{r7, pc}
    7fea:	bf00      	nop
    7fec:	20000a0c 	.word	0x20000a0c
    7ff0:	00007ee1 	.word	0x00007ee1

00007ff4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7ff4:	b580      	push	{r7, lr}
    7ff6:	b084      	sub	sp, #16
    7ff8:	af00      	add	r7, sp, #0
    7ffa:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7ffc:	6878      	ldr	r0, [r7, #4]
    7ffe:	4b13      	ldr	r3, [pc, #76]	; (804c <get_tc_index+0x58>)
    8000:	4798      	blx	r3
    8002:	4603      	mov	r3, r0
    8004:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8006:	2300      	movs	r3, #0
    8008:	73fb      	strb	r3, [r7, #15]
    800a:	e010      	b.n	802e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    800c:	7bfa      	ldrb	r2, [r7, #15]
    800e:	4910      	ldr	r1, [pc, #64]	; (8050 <get_tc_index+0x5c>)
    8010:	4613      	mov	r3, r2
    8012:	009b      	lsls	r3, r3, #2
    8014:	4413      	add	r3, r2
    8016:	009b      	lsls	r3, r3, #2
    8018:	440b      	add	r3, r1
    801a:	781b      	ldrb	r3, [r3, #0]
    801c:	7bba      	ldrb	r2, [r7, #14]
    801e:	429a      	cmp	r2, r3
    8020:	d102      	bne.n	8028 <get_tc_index+0x34>
			return i;
    8022:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8026:	e00d      	b.n	8044 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8028:	7bfb      	ldrb	r3, [r7, #15]
    802a:	3301      	adds	r3, #1
    802c:	73fb      	strb	r3, [r7, #15]
    802e:	7bfb      	ldrb	r3, [r7, #15]
    8030:	2b05      	cmp	r3, #5
    8032:	d9eb      	bls.n	800c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8034:	f240 221d 	movw	r2, #541	; 0x21d
    8038:	4906      	ldr	r1, [pc, #24]	; (8054 <get_tc_index+0x60>)
    803a:	2000      	movs	r0, #0
    803c:	4b06      	ldr	r3, [pc, #24]	; (8058 <get_tc_index+0x64>)
    803e:	4798      	blx	r3
	return -1;
    8040:	f04f 33ff 	mov.w	r3, #4294967295
}
    8044:	4618      	mov	r0, r3
    8046:	3710      	adds	r7, #16
    8048:	46bd      	mov	sp, r7
    804a:	bd80      	pop	{r7, pc}
    804c:	000080f9 	.word	0x000080f9
    8050:	20000110 	.word	0x20000110
    8054:	0000f090 	.word	0x0000f090
    8058:	0000341d 	.word	0x0000341d

0000805c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    805c:	b480      	push	{r7}
    805e:	b083      	sub	sp, #12
    8060:	af00      	add	r7, sp, #0
    8062:	6078      	str	r0, [r7, #4]
    8064:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8066:	687b      	ldr	r3, [r7, #4]
    8068:	4a17      	ldr	r2, [pc, #92]	; (80c8 <_tc_init_irq_param+0x6c>)
    806a:	4293      	cmp	r3, r2
    806c:	d102      	bne.n	8074 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    806e:	4a17      	ldr	r2, [pc, #92]	; (80cc <_tc_init_irq_param+0x70>)
    8070:	683b      	ldr	r3, [r7, #0]
    8072:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8074:	687b      	ldr	r3, [r7, #4]
    8076:	4a16      	ldr	r2, [pc, #88]	; (80d0 <_tc_init_irq_param+0x74>)
    8078:	4293      	cmp	r3, r2
    807a:	d102      	bne.n	8082 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    807c:	4a15      	ldr	r2, [pc, #84]	; (80d4 <_tc_init_irq_param+0x78>)
    807e:	683b      	ldr	r3, [r7, #0]
    8080:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8082:	687b      	ldr	r3, [r7, #4]
    8084:	4a14      	ldr	r2, [pc, #80]	; (80d8 <_tc_init_irq_param+0x7c>)
    8086:	4293      	cmp	r3, r2
    8088:	d102      	bne.n	8090 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    808a:	4a14      	ldr	r2, [pc, #80]	; (80dc <_tc_init_irq_param+0x80>)
    808c:	683b      	ldr	r3, [r7, #0]
    808e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	4a13      	ldr	r2, [pc, #76]	; (80e0 <_tc_init_irq_param+0x84>)
    8094:	4293      	cmp	r3, r2
    8096:	d102      	bne.n	809e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8098:	4a12      	ldr	r2, [pc, #72]	; (80e4 <_tc_init_irq_param+0x88>)
    809a:	683b      	ldr	r3, [r7, #0]
    809c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    809e:	687b      	ldr	r3, [r7, #4]
    80a0:	4a11      	ldr	r2, [pc, #68]	; (80e8 <_tc_init_irq_param+0x8c>)
    80a2:	4293      	cmp	r3, r2
    80a4:	d102      	bne.n	80ac <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    80a6:	4a11      	ldr	r2, [pc, #68]	; (80ec <_tc_init_irq_param+0x90>)
    80a8:	683b      	ldr	r3, [r7, #0]
    80aa:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    80ac:	687b      	ldr	r3, [r7, #4]
    80ae:	4a10      	ldr	r2, [pc, #64]	; (80f0 <_tc_init_irq_param+0x94>)
    80b0:	4293      	cmp	r3, r2
    80b2:	d102      	bne.n	80ba <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    80b4:	4a0f      	ldr	r2, [pc, #60]	; (80f4 <_tc_init_irq_param+0x98>)
    80b6:	683b      	ldr	r3, [r7, #0]
    80b8:	6013      	str	r3, [r2, #0]
	}
}
    80ba:	bf00      	nop
    80bc:	370c      	adds	r7, #12
    80be:	46bd      	mov	sp, r7
    80c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c4:	4770      	bx	lr
    80c6:	bf00      	nop
    80c8:	40003800 	.word	0x40003800
    80cc:	200009f8 	.word	0x200009f8
    80d0:	4101a000 	.word	0x4101a000
    80d4:	200009fc 	.word	0x200009fc
    80d8:	42001400 	.word	0x42001400
    80dc:	20000a00 	.word	0x20000a00
    80e0:	42001800 	.word	0x42001800
    80e4:	20000a04 	.word	0x20000a04
    80e8:	43001400 	.word	0x43001400
    80ec:	20000a08 	.word	0x20000a08
    80f0:	43001800 	.word	0x43001800
    80f4:	20000a0c 	.word	0x20000a0c

000080f8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    80f8:	b4b0      	push	{r4, r5, r7}
    80fa:	b08d      	sub	sp, #52	; 0x34
    80fc:	af00      	add	r7, sp, #0
    80fe:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8100:	4b13      	ldr	r3, [pc, #76]	; (8150 <_get_hardware_offset+0x58>)
    8102:	f107 040c 	add.w	r4, r7, #12
    8106:	461d      	mov	r5, r3
    8108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    810a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    810c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8114:	2300      	movs	r3, #0
    8116:	62fb      	str	r3, [r7, #44]	; 0x2c
    8118:	e010      	b.n	813c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    811c:	009b      	lsls	r3, r3, #2
    811e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8122:	4413      	add	r3, r2
    8124:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8128:	461a      	mov	r2, r3
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	429a      	cmp	r2, r3
    812e:	d102      	bne.n	8136 <_get_hardware_offset+0x3e>
			return i;
    8130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8132:	b2db      	uxtb	r3, r3
    8134:	e006      	b.n	8144 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8138:	3301      	adds	r3, #1
    813a:	62fb      	str	r3, [r7, #44]	; 0x2c
    813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    813e:	2b07      	cmp	r3, #7
    8140:	d9eb      	bls.n	811a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8142:	2300      	movs	r3, #0
}
    8144:	4618      	mov	r0, r3
    8146:	3734      	adds	r7, #52	; 0x34
    8148:	46bd      	mov	sp, r7
    814a:	bcb0      	pop	{r4, r5, r7}
    814c:	4770      	bx	lr
    814e:	bf00      	nop
    8150:	0000f0a4 	.word	0x0000f0a4

00008154 <__NVIC_EnableIRQ>:
{
    8154:	b480      	push	{r7}
    8156:	b083      	sub	sp, #12
    8158:	af00      	add	r7, sp, #0
    815a:	4603      	mov	r3, r0
    815c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    815e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8162:	2b00      	cmp	r3, #0
    8164:	db0b      	blt.n	817e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8166:	4909      	ldr	r1, [pc, #36]	; (818c <__NVIC_EnableIRQ+0x38>)
    8168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    816c:	095b      	lsrs	r3, r3, #5
    816e:	88fa      	ldrh	r2, [r7, #6]
    8170:	f002 021f 	and.w	r2, r2, #31
    8174:	2001      	movs	r0, #1
    8176:	fa00 f202 	lsl.w	r2, r0, r2
    817a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    817e:	bf00      	nop
    8180:	370c      	adds	r7, #12
    8182:	46bd      	mov	sp, r7
    8184:	f85d 7b04 	ldr.w	r7, [sp], #4
    8188:	4770      	bx	lr
    818a:	bf00      	nop
    818c:	e000e100 	.word	0xe000e100

00008190 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8190:	b480      	push	{r7}
    8192:	b087      	sub	sp, #28
    8194:	af00      	add	r7, sp, #0
    8196:	60f8      	str	r0, [r7, #12]
    8198:	460b      	mov	r3, r1
    819a:	607a      	str	r2, [r7, #4]
    819c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    819e:	7afa      	ldrb	r2, [r7, #11]
    81a0:	68f9      	ldr	r1, [r7, #12]
    81a2:	4613      	mov	r3, r2
    81a4:	009b      	lsls	r3, r3, #2
    81a6:	4413      	add	r3, r2
    81a8:	009b      	lsls	r3, r3, #2
    81aa:	440b      	add	r3, r1
    81ac:	3340      	adds	r3, #64	; 0x40
    81ae:	681b      	ldr	r3, [r3, #0]
    81b0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    81b2:	697a      	ldr	r2, [r7, #20]
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	4013      	ands	r3, r2
    81b8:	617b      	str	r3, [r7, #20]
	return tmp;
    81ba:	697b      	ldr	r3, [r7, #20]
}
    81bc:	4618      	mov	r0, r3
    81be:	371c      	adds	r7, #28
    81c0:	46bd      	mov	sp, r7
    81c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81c6:	4770      	bx	lr

000081c8 <hri_oscctrl_get_STATUS_reg>:
{
    81c8:	b480      	push	{r7}
    81ca:	b085      	sub	sp, #20
    81cc:	af00      	add	r7, sp, #0
    81ce:	6078      	str	r0, [r7, #4]
    81d0:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    81d2:	687b      	ldr	r3, [r7, #4]
    81d4:	691b      	ldr	r3, [r3, #16]
    81d6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    81d8:	68fa      	ldr	r2, [r7, #12]
    81da:	683b      	ldr	r3, [r7, #0]
    81dc:	4013      	ands	r3, r2
    81de:	60fb      	str	r3, [r7, #12]
	return tmp;
    81e0:	68fb      	ldr	r3, [r7, #12]
}
    81e2:	4618      	mov	r0, r3
    81e4:	3714      	adds	r7, #20
    81e6:	46bd      	mov	sp, r7
    81e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ec:	4770      	bx	lr

000081ee <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    81ee:	b480      	push	{r7}
    81f0:	b085      	sub	sp, #20
    81f2:	af00      	add	r7, sp, #0
    81f4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    81f6:	687b      	ldr	r3, [r7, #4]
    81f8:	f893 3020 	ldrb.w	r3, [r3, #32]
    81fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    81fe:	7bfb      	ldrb	r3, [r7, #15]
    8200:	f003 0301 	and.w	r3, r3, #1
    8204:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8206:	7bfb      	ldrb	r3, [r7, #15]
    8208:	2b00      	cmp	r3, #0
    820a:	bf14      	ite	ne
    820c:	2301      	movne	r3, #1
    820e:	2300      	moveq	r3, #0
    8210:	b2db      	uxtb	r3, r3
}
    8212:	4618      	mov	r0, r3
    8214:	3714      	adds	r7, #20
    8216:	46bd      	mov	sp, r7
    8218:	f85d 7b04 	ldr.w	r7, [sp], #4
    821c:	4770      	bx	lr

0000821e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    821e:	b480      	push	{r7}
    8220:	b083      	sub	sp, #12
    8222:	af00      	add	r7, sp, #0
    8224:	6078      	str	r0, [r7, #4]
    8226:	460b      	mov	r3, r1
    8228:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    822a:	bf00      	nop
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	789b      	ldrb	r3, [r3, #2]
    8230:	b2da      	uxtb	r2, r3
    8232:	78fb      	ldrb	r3, [r7, #3]
    8234:	4013      	ands	r3, r2
    8236:	b2db      	uxtb	r3, r3
    8238:	2b00      	cmp	r3, #0
    823a:	d1f7      	bne.n	822c <hri_usb_wait_for_sync+0xe>
	};
}
    823c:	bf00      	nop
    823e:	370c      	adds	r7, #12
    8240:	46bd      	mov	sp, r7
    8242:	f85d 7b04 	ldr.w	r7, [sp], #4
    8246:	4770      	bx	lr

00008248 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8248:	b480      	push	{r7}
    824a:	b083      	sub	sp, #12
    824c:	af00      	add	r7, sp, #0
    824e:	6078      	str	r0, [r7, #4]
    8250:	460b      	mov	r3, r1
    8252:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8254:	687b      	ldr	r3, [r7, #4]
    8256:	789b      	ldrb	r3, [r3, #2]
    8258:	b2da      	uxtb	r2, r3
    825a:	78fb      	ldrb	r3, [r7, #3]
    825c:	4013      	ands	r3, r2
    825e:	b2db      	uxtb	r3, r3
    8260:	2b00      	cmp	r3, #0
    8262:	bf14      	ite	ne
    8264:	2301      	movne	r3, #1
    8266:	2300      	moveq	r3, #0
    8268:	b2db      	uxtb	r3, r3
}
    826a:	4618      	mov	r0, r3
    826c:	370c      	adds	r7, #12
    826e:	46bd      	mov	sp, r7
    8270:	f85d 7b04 	ldr.w	r7, [sp], #4
    8274:	4770      	bx	lr

00008276 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8276:	b480      	push	{r7}
    8278:	b085      	sub	sp, #20
    827a:	af00      	add	r7, sp, #0
    827c:	6078      	str	r0, [r7, #4]
    827e:	460b      	mov	r3, r1
    8280:	70fb      	strb	r3, [r7, #3]
    8282:	4613      	mov	r3, r2
    8284:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8286:	78fb      	ldrb	r3, [r7, #3]
    8288:	687a      	ldr	r2, [r7, #4]
    828a:	3308      	adds	r3, #8
    828c:	015b      	lsls	r3, r3, #5
    828e:	4413      	add	r3, r2
    8290:	3307      	adds	r3, #7
    8292:	781b      	ldrb	r3, [r3, #0]
    8294:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8296:	7bfa      	ldrb	r2, [r7, #15]
    8298:	78bb      	ldrb	r3, [r7, #2]
    829a:	4013      	ands	r3, r2
    829c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    829e:	7bfb      	ldrb	r3, [r7, #15]
}
    82a0:	4618      	mov	r0, r3
    82a2:	3714      	adds	r7, #20
    82a4:	46bd      	mov	sp, r7
    82a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    82aa:	4770      	bx	lr

000082ac <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    82ac:	b480      	push	{r7}
    82ae:	b083      	sub	sp, #12
    82b0:	af00      	add	r7, sp, #0
    82b2:	6078      	str	r0, [r7, #4]
    82b4:	460b      	mov	r3, r1
    82b6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    82b8:	78fb      	ldrb	r3, [r7, #3]
    82ba:	687a      	ldr	r2, [r7, #4]
    82bc:	3308      	adds	r3, #8
    82be:	015b      	lsls	r3, r3, #5
    82c0:	4413      	add	r3, r2
    82c2:	3307      	adds	r3, #7
    82c4:	781b      	ldrb	r3, [r3, #0]
    82c6:	b2db      	uxtb	r3, r3
}
    82c8:	4618      	mov	r0, r3
    82ca:	370c      	adds	r7, #12
    82cc:	46bd      	mov	sp, r7
    82ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    82d2:	4770      	bx	lr

000082d4 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    82d4:	b480      	push	{r7}
    82d6:	b083      	sub	sp, #12
    82d8:	af00      	add	r7, sp, #0
    82da:	6078      	str	r0, [r7, #4]
    82dc:	460b      	mov	r3, r1
    82de:	70fb      	strb	r3, [r7, #3]
    82e0:	4613      	mov	r3, r2
    82e2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    82e4:	78fb      	ldrb	r3, [r7, #3]
    82e6:	687a      	ldr	r2, [r7, #4]
    82e8:	3308      	adds	r3, #8
    82ea:	015b      	lsls	r3, r3, #5
    82ec:	4413      	add	r3, r2
    82ee:	3307      	adds	r3, #7
    82f0:	78ba      	ldrb	r2, [r7, #2]
    82f2:	701a      	strb	r2, [r3, #0]
}
    82f4:	bf00      	nop
    82f6:	370c      	adds	r7, #12
    82f8:	46bd      	mov	sp, r7
    82fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    82fe:	4770      	bx	lr

00008300 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8300:	b480      	push	{r7}
    8302:	b083      	sub	sp, #12
    8304:	af00      	add	r7, sp, #0
    8306:	6078      	str	r0, [r7, #4]
    8308:	460b      	mov	r3, r1
    830a:	70fb      	strb	r3, [r7, #3]
    830c:	4613      	mov	r3, r2
    830e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8310:	78fb      	ldrb	r3, [r7, #3]
    8312:	687a      	ldr	r2, [r7, #4]
    8314:	3308      	adds	r3, #8
    8316:	015b      	lsls	r3, r3, #5
    8318:	4413      	add	r3, r2
    831a:	3305      	adds	r3, #5
    831c:	78ba      	ldrb	r2, [r7, #2]
    831e:	701a      	strb	r2, [r3, #0]
}
    8320:	bf00      	nop
    8322:	370c      	adds	r7, #12
    8324:	46bd      	mov	sp, r7
    8326:	f85d 7b04 	ldr.w	r7, [sp], #4
    832a:	4770      	bx	lr

0000832c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    832c:	b480      	push	{r7}
    832e:	b083      	sub	sp, #12
    8330:	af00      	add	r7, sp, #0
    8332:	6078      	str	r0, [r7, #4]
    8334:	460b      	mov	r3, r1
    8336:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8338:	78fb      	ldrb	r3, [r7, #3]
    833a:	687a      	ldr	r2, [r7, #4]
    833c:	3308      	adds	r3, #8
    833e:	015b      	lsls	r3, r3, #5
    8340:	4413      	add	r3, r2
    8342:	3306      	adds	r3, #6
    8344:	781b      	ldrb	r3, [r3, #0]
    8346:	b2db      	uxtb	r3, r3
}
    8348:	4618      	mov	r0, r3
    834a:	370c      	adds	r7, #12
    834c:	46bd      	mov	sp, r7
    834e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8352:	4770      	bx	lr

00008354 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8354:	b480      	push	{r7}
    8356:	b083      	sub	sp, #12
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
    835c:	460b      	mov	r3, r1
    835e:	70fb      	strb	r3, [r7, #3]
    8360:	4613      	mov	r3, r2
    8362:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8364:	78fb      	ldrb	r3, [r7, #3]
    8366:	687a      	ldr	r2, [r7, #4]
    8368:	3308      	adds	r3, #8
    836a:	015b      	lsls	r3, r3, #5
    836c:	4413      	add	r3, r2
    836e:	3304      	adds	r3, #4
    8370:	78ba      	ldrb	r2, [r7, #2]
    8372:	701a      	strb	r2, [r3, #0]
}
    8374:	bf00      	nop
    8376:	370c      	adds	r7, #12
    8378:	46bd      	mov	sp, r7
    837a:	f85d 7b04 	ldr.w	r7, [sp], #4
    837e:	4770      	bx	lr

00008380 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8380:	b480      	push	{r7}
    8382:	b083      	sub	sp, #12
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
    8388:	460b      	mov	r3, r1
    838a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    838c:	78fb      	ldrb	r3, [r7, #3]
    838e:	687a      	ldr	r2, [r7, #4]
    8390:	015b      	lsls	r3, r3, #5
    8392:	4413      	add	r3, r2
    8394:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8398:	2210      	movs	r2, #16
    839a:	701a      	strb	r2, [r3, #0]
}
    839c:	bf00      	nop
    839e:	370c      	adds	r7, #12
    83a0:	46bd      	mov	sp, r7
    83a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a6:	4770      	bx	lr

000083a8 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    83a8:	b480      	push	{r7}
    83aa:	b083      	sub	sp, #12
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
    83b0:	460b      	mov	r3, r1
    83b2:	70fb      	strb	r3, [r7, #3]
    83b4:	4613      	mov	r3, r2
    83b6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    83b8:	78fb      	ldrb	r3, [r7, #3]
    83ba:	687a      	ldr	r2, [r7, #4]
    83bc:	015b      	lsls	r3, r3, #5
    83be:	4413      	add	r3, r2
    83c0:	f203 1309 	addw	r3, r3, #265	; 0x109
    83c4:	78ba      	ldrb	r2, [r7, #2]
    83c6:	701a      	strb	r2, [r3, #0]
}
    83c8:	bf00      	nop
    83ca:	370c      	adds	r7, #12
    83cc:	46bd      	mov	sp, r7
    83ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    83d2:	4770      	bx	lr

000083d4 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    83d4:	b480      	push	{r7}
    83d6:	b083      	sub	sp, #12
    83d8:	af00      	add	r7, sp, #0
    83da:	6078      	str	r0, [r7, #4]
    83dc:	460b      	mov	r3, r1
    83de:	70fb      	strb	r3, [r7, #3]
    83e0:	4613      	mov	r3, r2
    83e2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    83e4:	78fb      	ldrb	r3, [r7, #3]
    83e6:	687a      	ldr	r2, [r7, #4]
    83e8:	015b      	lsls	r3, r3, #5
    83ea:	4413      	add	r3, r2
    83ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
    83f0:	78ba      	ldrb	r2, [r7, #2]
    83f2:	701a      	strb	r2, [r3, #0]
}
    83f4:	bf00      	nop
    83f6:	370c      	adds	r7, #12
    83f8:	46bd      	mov	sp, r7
    83fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    83fe:	4770      	bx	lr

00008400 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8400:	b480      	push	{r7}
    8402:	b085      	sub	sp, #20
    8404:	af00      	add	r7, sp, #0
    8406:	6078      	str	r0, [r7, #4]
    8408:	460b      	mov	r3, r1
    840a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    840c:	78fb      	ldrb	r3, [r7, #3]
    840e:	687a      	ldr	r2, [r7, #4]
    8410:	3308      	adds	r3, #8
    8412:	015b      	lsls	r3, r3, #5
    8414:	4413      	add	r3, r2
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    841a:	7bfb      	ldrb	r3, [r7, #15]
    841c:	f003 0307 	and.w	r3, r3, #7
    8420:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8422:	7bfb      	ldrb	r3, [r7, #15]
}
    8424:	4618      	mov	r0, r3
    8426:	3714      	adds	r7, #20
    8428:	46bd      	mov	sp, r7
    842a:	f85d 7b04 	ldr.w	r7, [sp], #4
    842e:	4770      	bx	lr

00008430 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8430:	b480      	push	{r7}
    8432:	b085      	sub	sp, #20
    8434:	af00      	add	r7, sp, #0
    8436:	6078      	str	r0, [r7, #4]
    8438:	460b      	mov	r3, r1
    843a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    843c:	78fb      	ldrb	r3, [r7, #3]
    843e:	687a      	ldr	r2, [r7, #4]
    8440:	3308      	adds	r3, #8
    8442:	015b      	lsls	r3, r3, #5
    8444:	4413      	add	r3, r2
    8446:	781b      	ldrb	r3, [r3, #0]
    8448:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    844a:	7bfb      	ldrb	r3, [r7, #15]
    844c:	091b      	lsrs	r3, r3, #4
    844e:	b2db      	uxtb	r3, r3
    8450:	f003 0307 	and.w	r3, r3, #7
    8454:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8456:	7bfb      	ldrb	r3, [r7, #15]
}
    8458:	4618      	mov	r0, r3
    845a:	3714      	adds	r7, #20
    845c:	46bd      	mov	sp, r7
    845e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8462:	4770      	bx	lr

00008464 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8464:	b480      	push	{r7}
    8466:	b083      	sub	sp, #12
    8468:	af00      	add	r7, sp, #0
    846a:	6078      	str	r0, [r7, #4]
    846c:	460b      	mov	r3, r1
    846e:	70fb      	strb	r3, [r7, #3]
    8470:	4613      	mov	r3, r2
    8472:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8474:	78fb      	ldrb	r3, [r7, #3]
    8476:	687a      	ldr	r2, [r7, #4]
    8478:	3308      	adds	r3, #8
    847a:	015b      	lsls	r3, r3, #5
    847c:	4413      	add	r3, r2
    847e:	78ba      	ldrb	r2, [r7, #2]
    8480:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8482:	bf00      	nop
    8484:	370c      	adds	r7, #12
    8486:	46bd      	mov	sp, r7
    8488:	f85d 7b04 	ldr.w	r7, [sp], #4
    848c:	4770      	bx	lr

0000848e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    848e:	b480      	push	{r7}
    8490:	b083      	sub	sp, #12
    8492:	af00      	add	r7, sp, #0
    8494:	6078      	str	r0, [r7, #4]
    8496:	460b      	mov	r3, r1
    8498:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    849a:	78fb      	ldrb	r3, [r7, #3]
    849c:	687a      	ldr	r2, [r7, #4]
    849e:	3308      	adds	r3, #8
    84a0:	015b      	lsls	r3, r3, #5
    84a2:	4413      	add	r3, r2
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	b2db      	uxtb	r3, r3
}
    84a8:	4618      	mov	r0, r3
    84aa:	370c      	adds	r7, #12
    84ac:	46bd      	mov	sp, r7
    84ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    84b2:	4770      	bx	lr

000084b4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    84b4:	b480      	push	{r7}
    84b6:	b083      	sub	sp, #12
    84b8:	af00      	add	r7, sp, #0
    84ba:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    84bc:	687b      	ldr	r3, [r7, #4]
    84be:	8b9b      	ldrh	r3, [r3, #28]
    84c0:	b29b      	uxth	r3, r3
}
    84c2:	4618      	mov	r0, r3
    84c4:	370c      	adds	r7, #12
    84c6:	46bd      	mov	sp, r7
    84c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84cc:	4770      	bx	lr

000084ce <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    84ce:	b480      	push	{r7}
    84d0:	b083      	sub	sp, #12
    84d2:	af00      	add	r7, sp, #0
    84d4:	6078      	str	r0, [r7, #4]
    84d6:	460b      	mov	r3, r1
    84d8:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	887a      	ldrh	r2, [r7, #2]
    84de:	839a      	strh	r2, [r3, #28]
}
    84e0:	bf00      	nop
    84e2:	370c      	adds	r7, #12
    84e4:	46bd      	mov	sp, r7
    84e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ea:	4770      	bx	lr

000084ec <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    84ec:	b480      	push	{r7}
    84ee:	b083      	sub	sp, #12
    84f0:	af00      	add	r7, sp, #0
    84f2:	6078      	str	r0, [r7, #4]
    84f4:	460b      	mov	r3, r1
    84f6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    84f8:	687b      	ldr	r3, [r7, #4]
    84fa:	887a      	ldrh	r2, [r7, #2]
    84fc:	831a      	strh	r2, [r3, #24]
}
    84fe:	bf00      	nop
    8500:	370c      	adds	r7, #12
    8502:	46bd      	mov	sp, r7
    8504:	f85d 7b04 	ldr.w	r7, [sp], #4
    8508:	4770      	bx	lr

0000850a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    850a:	b480      	push	{r7}
    850c:	b083      	sub	sp, #12
    850e:	af00      	add	r7, sp, #0
    8510:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8512:	687b      	ldr	r3, [r7, #4]
    8514:	8b1b      	ldrh	r3, [r3, #24]
    8516:	b29b      	uxth	r3, r3
}
    8518:	4618      	mov	r0, r3
    851a:	370c      	adds	r7, #12
    851c:	46bd      	mov	sp, r7
    851e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8522:	4770      	bx	lr

00008524 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8524:	b480      	push	{r7}
    8526:	b083      	sub	sp, #12
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
    852c:	460b      	mov	r3, r1
    852e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	887a      	ldrh	r2, [r7, #2]
    8534:	829a      	strh	r2, [r3, #20]
}
    8536:	bf00      	nop
    8538:	370c      	adds	r7, #12
    853a:	46bd      	mov	sp, r7
    853c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8540:	4770      	bx	lr

00008542 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8542:	b480      	push	{r7}
    8544:	b085      	sub	sp, #20
    8546:	af00      	add	r7, sp, #0
    8548:	6078      	str	r0, [r7, #4]
    854a:	460b      	mov	r3, r1
    854c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    854e:	687b      	ldr	r3, [r7, #4]
    8550:	789b      	ldrb	r3, [r3, #2]
    8552:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8554:	7bfa      	ldrb	r2, [r7, #15]
    8556:	78fb      	ldrb	r3, [r7, #3]
    8558:	4013      	ands	r3, r2
    855a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    855c:	7bfb      	ldrb	r3, [r7, #15]
}
    855e:	4618      	mov	r0, r3
    8560:	3714      	adds	r7, #20
    8562:	46bd      	mov	sp, r7
    8564:	f85d 7b04 	ldr.w	r7, [sp], #4
    8568:	4770      	bx	lr
	...

0000856c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    856c:	b580      	push	{r7, lr}
    856e:	b082      	sub	sp, #8
    8570:	af00      	add	r7, sp, #0
    8572:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	781b      	ldrb	r3, [r3, #0]
    8578:	b2db      	uxtb	r3, r3
    857a:	f023 0302 	bic.w	r3, r3, #2
    857e:	b2da      	uxtb	r2, r3
    8580:	687b      	ldr	r3, [r7, #4]
    8582:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8584:	2103      	movs	r1, #3
    8586:	6878      	ldr	r0, [r7, #4]
    8588:	4b02      	ldr	r3, [pc, #8]	; (8594 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    858a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    858c:	bf00      	nop
    858e:	3708      	adds	r7, #8
    8590:	46bd      	mov	sp, r7
    8592:	bd80      	pop	{r7, pc}
    8594:	0000821f 	.word	0x0000821f

00008598 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8598:	b580      	push	{r7, lr}
    859a:	b084      	sub	sp, #16
    859c:	af00      	add	r7, sp, #0
    859e:	6078      	str	r0, [r7, #4]
    85a0:	460b      	mov	r3, r1
    85a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    85a4:	2103      	movs	r1, #3
    85a6:	6878      	ldr	r0, [r7, #4]
    85a8:	4b06      	ldr	r3, [pc, #24]	; (85c4 <hri_usb_get_CTRLA_reg+0x2c>)
    85aa:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	781b      	ldrb	r3, [r3, #0]
    85b0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    85b2:	7bfa      	ldrb	r2, [r7, #15]
    85b4:	78fb      	ldrb	r3, [r7, #3]
    85b6:	4013      	ands	r3, r2
    85b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    85ba:	7bfb      	ldrb	r3, [r7, #15]
}
    85bc:	4618      	mov	r0, r3
    85be:	3710      	adds	r7, #16
    85c0:	46bd      	mov	sp, r7
    85c2:	bd80      	pop	{r7, pc}
    85c4:	0000821f 	.word	0x0000821f

000085c8 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    85c8:	b580      	push	{r7, lr}
    85ca:	b082      	sub	sp, #8
    85cc:	af00      	add	r7, sp, #0
    85ce:	6078      	str	r0, [r7, #4]
    85d0:	460b      	mov	r3, r1
    85d2:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    85d4:	687b      	ldr	r3, [r7, #4]
    85d6:	78fa      	ldrb	r2, [r7, #3]
    85d8:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    85da:	2103      	movs	r1, #3
    85dc:	6878      	ldr	r0, [r7, #4]
    85de:	4b03      	ldr	r3, [pc, #12]	; (85ec <hri_usb_write_CTRLA_reg+0x24>)
    85e0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    85e2:	bf00      	nop
    85e4:	3708      	adds	r7, #8
    85e6:	46bd      	mov	sp, r7
    85e8:	bd80      	pop	{r7, pc}
    85ea:	bf00      	nop
    85ec:	0000821f 	.word	0x0000821f

000085f0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    85f0:	b580      	push	{r7, lr}
    85f2:	b082      	sub	sp, #8
    85f4:	af00      	add	r7, sp, #0
    85f6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    85f8:	2103      	movs	r1, #3
    85fa:	6878      	ldr	r0, [r7, #4]
    85fc:	4b04      	ldr	r3, [pc, #16]	; (8610 <hri_usb_read_CTRLA_reg+0x20>)
    85fe:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8600:	687b      	ldr	r3, [r7, #4]
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	b2db      	uxtb	r3, r3
}
    8606:	4618      	mov	r0, r3
    8608:	3708      	adds	r7, #8
    860a:	46bd      	mov	sp, r7
    860c:	bd80      	pop	{r7, pc}
    860e:	bf00      	nop
    8610:	0000821f 	.word	0x0000821f

00008614 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8614:	b480      	push	{r7}
    8616:	b083      	sub	sp, #12
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	891b      	ldrh	r3, [r3, #8]
    8620:	b29b      	uxth	r3, r3
    8622:	f023 0301 	bic.w	r3, r3, #1
    8626:	b29a      	uxth	r2, r3
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    862c:	bf00      	nop
    862e:	370c      	adds	r7, #12
    8630:	46bd      	mov	sp, r7
    8632:	f85d 7b04 	ldr.w	r7, [sp], #4
    8636:	4770      	bx	lr

00008638 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8638:	b480      	push	{r7}
    863a:	b083      	sub	sp, #12
    863c:	af00      	add	r7, sp, #0
    863e:	6078      	str	r0, [r7, #4]
    8640:	460b      	mov	r3, r1
    8642:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8644:	687b      	ldr	r3, [r7, #4]
    8646:	887a      	ldrh	r2, [r7, #2]
    8648:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    864a:	bf00      	nop
    864c:	370c      	adds	r7, #12
    864e:	46bd      	mov	sp, r7
    8650:	f85d 7b04 	ldr.w	r7, [sp], #4
    8654:	4770      	bx	lr

00008656 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8656:	b480      	push	{r7}
    8658:	b083      	sub	sp, #12
    865a:	af00      	add	r7, sp, #0
    865c:	6078      	str	r0, [r7, #4]
    865e:	460b      	mov	r3, r1
    8660:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8662:	687b      	ldr	r3, [r7, #4]
    8664:	78fa      	ldrb	r2, [r7, #3]
    8666:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8668:	bf00      	nop
    866a:	370c      	adds	r7, #12
    866c:	46bd      	mov	sp, r7
    866e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8672:	4770      	bx	lr

00008674 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8674:	b480      	push	{r7}
    8676:	b083      	sub	sp, #12
    8678:	af00      	add	r7, sp, #0
    867a:	6078      	str	r0, [r7, #4]
    867c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    867e:	687b      	ldr	r3, [r7, #4]
    8680:	683a      	ldr	r2, [r7, #0]
    8682:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8684:	bf00      	nop
    8686:	370c      	adds	r7, #12
    8688:	46bd      	mov	sp, r7
    868a:	f85d 7b04 	ldr.w	r7, [sp], #4
    868e:	4770      	bx	lr

00008690 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8690:	b480      	push	{r7}
    8692:	b083      	sub	sp, #12
    8694:	af00      	add	r7, sp, #0
    8696:	6078      	str	r0, [r7, #4]
    8698:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    869a:	2300      	movs	r3, #0
}
    869c:	4618      	mov	r0, r3
    869e:	370c      	adds	r7, #12
    86a0:	46bd      	mov	sp, r7
    86a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a6:	4770      	bx	lr

000086a8 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    86a8:	b480      	push	{r7}
    86aa:	b085      	sub	sp, #20
    86ac:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    86ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    86b2:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    86b4:	4b28      	ldr	r3, [pc, #160]	; (8758 <_usb_load_calib+0xb0>)
    86b6:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    86b8:	f003 031f 	and.w	r3, r3, #31
    86bc:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    86be:	4b26      	ldr	r3, [pc, #152]	; (8758 <_usb_load_calib+0xb0>)
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    86c4:	f003 031f 	and.w	r3, r3, #31
    86c8:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    86ca:	4b23      	ldr	r3, [pc, #140]	; (8758 <_usb_load_calib+0xb0>)
    86cc:	681b      	ldr	r3, [r3, #0]
    86ce:	0a9b      	lsrs	r3, r3, #10
    86d0:	f003 0307 	and.w	r3, r3, #7
    86d4:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    86d6:	68fb      	ldr	r3, [r7, #12]
    86d8:	2b00      	cmp	r3, #0
    86da:	d002      	beq.n	86e2 <_usb_load_calib+0x3a>
    86dc:	68fb      	ldr	r3, [r7, #12]
    86de:	2b1f      	cmp	r3, #31
    86e0:	d101      	bne.n	86e6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    86e2:	2309      	movs	r3, #9
    86e4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    86e6:	68bb      	ldr	r3, [r7, #8]
    86e8:	2b00      	cmp	r3, #0
    86ea:	d002      	beq.n	86f2 <_usb_load_calib+0x4a>
    86ec:	68bb      	ldr	r3, [r7, #8]
    86ee:	2b1f      	cmp	r3, #31
    86f0:	d101      	bne.n	86f6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    86f2:	2319      	movs	r3, #25
    86f4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    86f6:	687b      	ldr	r3, [r7, #4]
    86f8:	2b00      	cmp	r3, #0
    86fa:	d002      	beq.n	8702 <_usb_load_calib+0x5a>
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	2b07      	cmp	r3, #7
    8700:	d101      	bne.n	8706 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8702:	2306      	movs	r3, #6
    8704:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8706:	68fb      	ldr	r3, [r7, #12]
    8708:	b29b      	uxth	r3, r3
    870a:	019b      	lsls	r3, r3, #6
    870c:	b29b      	uxth	r3, r3
    870e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8712:	b29a      	uxth	r2, r3
    8714:	68bb      	ldr	r3, [r7, #8]
    8716:	b29b      	uxth	r3, r3
    8718:	f003 031f 	and.w	r3, r3, #31
    871c:	b29b      	uxth	r3, r3
    871e:	4313      	orrs	r3, r2
    8720:	b29a      	uxth	r2, r3
    8722:	687b      	ldr	r3, [r7, #4]
    8724:	b29b      	uxth	r3, r3
    8726:	031b      	lsls	r3, r3, #12
    8728:	b29b      	uxth	r3, r3
    872a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    872e:	b29b      	uxth	r3, r3
    8730:	4313      	orrs	r3, r2
    8732:	b29a      	uxth	r2, r3
    8734:	683b      	ldr	r3, [r7, #0]
    8736:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8738:	683a      	ldr	r2, [r7, #0]
    873a:	78d3      	ldrb	r3, [r2, #3]
    873c:	f043 0303 	orr.w	r3, r3, #3
    8740:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8742:	683a      	ldr	r2, [r7, #0]
    8744:	78d3      	ldrb	r3, [r2, #3]
    8746:	f043 030c 	orr.w	r3, r3, #12
    874a:	70d3      	strb	r3, [r2, #3]
}
    874c:	bf00      	nop
    874e:	3714      	adds	r7, #20
    8750:	46bd      	mov	sp, r7
    8752:	f85d 7b04 	ldr.w	r7, [sp], #4
    8756:	4770      	bx	lr
    8758:	00800084 	.word	0x00800084

0000875c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    875c:	b580      	push	{r7, lr}
    875e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8760:	bf00      	nop
    8762:	2203      	movs	r2, #3
    8764:	2100      	movs	r1, #0
    8766:	4804      	ldr	r0, [pc, #16]	; (8778 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8768:	4b04      	ldr	r3, [pc, #16]	; (877c <_usb_d_dev_wait_dpll_rdy+0x20>)
    876a:	4798      	blx	r3
    876c:	4603      	mov	r3, r0
    876e:	2b03      	cmp	r3, #3
    8770:	d1f7      	bne.n	8762 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8772:	bf00      	nop
    8774:	bd80      	pop	{r7, pc}
    8776:	bf00      	nop
    8778:	40001000 	.word	0x40001000
    877c:	00008191 	.word	0x00008191

00008780 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8780:	b580      	push	{r7, lr}
    8782:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8784:	480e      	ldr	r0, [pc, #56]	; (87c0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8786:	4b0f      	ldr	r3, [pc, #60]	; (87c4 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8788:	4798      	blx	r3
    878a:	4603      	mov	r3, r0
    878c:	2b00      	cmp	r3, #0
    878e:	d00a      	beq.n	87a6 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8790:	bf00      	nop
    8792:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8796:	480a      	ldr	r0, [pc, #40]	; (87c0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8798:	4b0b      	ldr	r3, [pc, #44]	; (87c8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    879a:	4798      	blx	r3
    879c:	4603      	mov	r3, r0
    879e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    87a2:	d1f6      	bne.n	8792 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    87a4:	e009      	b.n	87ba <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    87a6:	bf00      	nop
    87a8:	f44f 7180 	mov.w	r1, #256	; 0x100
    87ac:	4804      	ldr	r0, [pc, #16]	; (87c0 <_usb_d_dev_wait_dfll_rdy+0x40>)
    87ae:	4b06      	ldr	r3, [pc, #24]	; (87c8 <_usb_d_dev_wait_dfll_rdy+0x48>)
    87b0:	4798      	blx	r3
    87b2:	4603      	mov	r3, r0
    87b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    87b8:	d1f6      	bne.n	87a8 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    87ba:	bf00      	nop
    87bc:	bd80      	pop	{r7, pc}
    87be:	bf00      	nop
    87c0:	40001000 	.word	0x40001000
    87c4:	000081ef 	.word	0x000081ef
    87c8:	000081c9 	.word	0x000081c9

000087cc <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    87cc:	b580      	push	{r7, lr}
    87ce:	b082      	sub	sp, #8
    87d0:	af00      	add	r7, sp, #0
    87d2:	4603      	mov	r3, r0
    87d4:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    87d6:	79fb      	ldrb	r3, [r7, #7]
    87d8:	2b00      	cmp	r3, #0
    87da:	d102      	bne.n	87e2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    87dc:	4b05      	ldr	r3, [pc, #20]	; (87f4 <_usb_d_dev_wait_clk_rdy+0x28>)
    87de:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    87e0:	e004      	b.n	87ec <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    87e2:	79fb      	ldrb	r3, [r7, #7]
    87e4:	2b01      	cmp	r3, #1
    87e6:	d101      	bne.n	87ec <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    87e8:	4b03      	ldr	r3, [pc, #12]	; (87f8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    87ea:	4798      	blx	r3
}
    87ec:	bf00      	nop
    87ee:	3708      	adds	r7, #8
    87f0:	46bd      	mov	sp, r7
    87f2:	bd80      	pop	{r7, pc}
    87f4:	00008781 	.word	0x00008781
    87f8:	0000875d 	.word	0x0000875d

000087fc <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b082      	sub	sp, #8
    8800:	af00      	add	r7, sp, #0
    8802:	4603      	mov	r3, r0
    8804:	6039      	str	r1, [r7, #0]
    8806:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8808:	683b      	ldr	r3, [r7, #0]
    880a:	b2da      	uxtb	r2, r3
    880c:	79fb      	ldrb	r3, [r7, #7]
    880e:	4619      	mov	r1, r3
    8810:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8814:	4b02      	ldr	r3, [pc, #8]	; (8820 <_usbd_ep_int_ack+0x24>)
    8816:	4798      	blx	r3
}
    8818:	bf00      	nop
    881a:	3708      	adds	r7, #8
    881c:	46bd      	mov	sp, r7
    881e:	bd80      	pop	{r7, pc}
    8820:	000082d5 	.word	0x000082d5

00008824 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8824:	b580      	push	{r7, lr}
    8826:	b082      	sub	sp, #8
    8828:	af00      	add	r7, sp, #0
    882a:	4603      	mov	r3, r0
    882c:	6039      	str	r1, [r7, #0]
    882e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8830:	683b      	ldr	r3, [r7, #0]
    8832:	b2da      	uxtb	r2, r3
    8834:	79fb      	ldrb	r3, [r7, #7]
    8836:	4619      	mov	r1, r3
    8838:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    883c:	4b02      	ldr	r3, [pc, #8]	; (8848 <_usbd_ep_int_en+0x24>)
    883e:	4798      	blx	r3
}
    8840:	bf00      	nop
    8842:	3708      	adds	r7, #8
    8844:	46bd      	mov	sp, r7
    8846:	bd80      	pop	{r7, pc}
    8848:	000083a9 	.word	0x000083a9

0000884c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    884c:	b580      	push	{r7, lr}
    884e:	b082      	sub	sp, #8
    8850:	af00      	add	r7, sp, #0
    8852:	4603      	mov	r3, r0
    8854:	6039      	str	r1, [r7, #0]
    8856:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8858:	683b      	ldr	r3, [r7, #0]
    885a:	b2da      	uxtb	r2, r3
    885c:	79fb      	ldrb	r3, [r7, #7]
    885e:	4619      	mov	r1, r3
    8860:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8864:	4b02      	ldr	r3, [pc, #8]	; (8870 <_usbd_ep_int_dis+0x24>)
    8866:	4798      	blx	r3
}
    8868:	bf00      	nop
    886a:	3708      	adds	r7, #8
    886c:	46bd      	mov	sp, r7
    886e:	bd80      	pop	{r7, pc}
    8870:	000083d5 	.word	0x000083d5

00008874 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8874:	b580      	push	{r7, lr}
    8876:	b082      	sub	sp, #8
    8878:	af00      	add	r7, sp, #0
    887a:	4603      	mov	r3, r0
    887c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    887e:	79fb      	ldrb	r3, [r7, #7]
    8880:	4619      	mov	r1, r3
    8882:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8886:	4b06      	ldr	r3, [pc, #24]	; (88a0 <_usbd_ep_is_ctrl+0x2c>)
    8888:	4798      	blx	r3
    888a:	4603      	mov	r3, r0
    888c:	2b11      	cmp	r3, #17
    888e:	bf0c      	ite	eq
    8890:	2301      	moveq	r3, #1
    8892:	2300      	movne	r3, #0
    8894:	b2db      	uxtb	r3, r3
}
    8896:	4618      	mov	r0, r3
    8898:	3708      	adds	r7, #8
    889a:	46bd      	mov	sp, r7
    889c:	bd80      	pop	{r7, pc}
    889e:	bf00      	nop
    88a0:	0000848f 	.word	0x0000848f

000088a4 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    88a4:	b580      	push	{r7, lr}
    88a6:	b082      	sub	sp, #8
    88a8:	af00      	add	r7, sp, #0
    88aa:	4603      	mov	r3, r0
    88ac:	71fb      	strb	r3, [r7, #7]
    88ae:	460b      	mov	r3, r1
    88b0:	71bb      	strb	r3, [r7, #6]
    88b2:	4613      	mov	r3, r2
    88b4:	717b      	strb	r3, [r7, #5]
	if (st) {
    88b6:	797b      	ldrb	r3, [r7, #5]
    88b8:	2b00      	cmp	r3, #0
    88ba:	d00b      	beq.n	88d4 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    88bc:	79bb      	ldrb	r3, [r7, #6]
    88be:	2210      	movs	r2, #16
    88c0:	fa02 f303 	lsl.w	r3, r2, r3
    88c4:	b2da      	uxtb	r2, r3
    88c6:	79fb      	ldrb	r3, [r7, #7]
    88c8:	4619      	mov	r1, r3
    88ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88ce:	4b09      	ldr	r3, [pc, #36]	; (88f4 <_usbd_ep_set_stall+0x50>)
    88d0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    88d2:	e00a      	b.n	88ea <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    88d4:	79bb      	ldrb	r3, [r7, #6]
    88d6:	2210      	movs	r2, #16
    88d8:	fa02 f303 	lsl.w	r3, r2, r3
    88dc:	b2da      	uxtb	r2, r3
    88de:	79fb      	ldrb	r3, [r7, #7]
    88e0:	4619      	mov	r1, r3
    88e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88e6:	4b04      	ldr	r3, [pc, #16]	; (88f8 <_usbd_ep_set_stall+0x54>)
    88e8:	4798      	blx	r3
}
    88ea:	bf00      	nop
    88ec:	3708      	adds	r7, #8
    88ee:	46bd      	mov	sp, r7
    88f0:	bd80      	pop	{r7, pc}
    88f2:	bf00      	nop
    88f4:	00008301 	.word	0x00008301
    88f8:	00008355 	.word	0x00008355

000088fc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    88fc:	b580      	push	{r7, lr}
    88fe:	b084      	sub	sp, #16
    8900:	af00      	add	r7, sp, #0
    8902:	4603      	mov	r3, r0
    8904:	460a      	mov	r2, r1
    8906:	71fb      	strb	r3, [r7, #7]
    8908:	4613      	mov	r3, r2
    890a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    890c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8910:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8912:	79fb      	ldrb	r3, [r7, #7]
    8914:	4619      	mov	r1, r3
    8916:	68f8      	ldr	r0, [r7, #12]
    8918:	4b08      	ldr	r3, [pc, #32]	; (893c <_usbd_ep_is_stalled+0x40>)
    891a:	4798      	blx	r3
    891c:	4603      	mov	r3, r0
    891e:	4619      	mov	r1, r3
    8920:	79bb      	ldrb	r3, [r7, #6]
    8922:	2210      	movs	r2, #16
    8924:	fa02 f303 	lsl.w	r3, r2, r3
    8928:	400b      	ands	r3, r1
    892a:	2b00      	cmp	r3, #0
    892c:	bf14      	ite	ne
    892e:	2301      	movne	r3, #1
    8930:	2300      	moveq	r3, #0
    8932:	b2db      	uxtb	r3, r3
}
    8934:	4618      	mov	r0, r3
    8936:	3710      	adds	r7, #16
    8938:	46bd      	mov	sp, r7
    893a:	bd80      	pop	{r7, pc}
    893c:	0000832d 	.word	0x0000832d

00008940 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8940:	b580      	push	{r7, lr}
    8942:	b084      	sub	sp, #16
    8944:	af00      	add	r7, sp, #0
    8946:	4603      	mov	r3, r0
    8948:	460a      	mov	r2, r1
    894a:	71fb      	strb	r3, [r7, #7]
    894c:	4613      	mov	r3, r2
    894e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8950:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8954:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8956:	79fb      	ldrb	r3, [r7, #7]
    8958:	4619      	mov	r1, r3
    895a:	68f8      	ldr	r0, [r7, #12]
    895c:	4b08      	ldr	r3, [pc, #32]	; (8980 <_usbd_ep_is_stall_sent+0x40>)
    895e:	4798      	blx	r3
    8960:	4603      	mov	r3, r0
    8962:	4619      	mov	r1, r3
    8964:	79bb      	ldrb	r3, [r7, #6]
    8966:	2220      	movs	r2, #32
    8968:	fa02 f303 	lsl.w	r3, r2, r3
    896c:	400b      	ands	r3, r1
    896e:	2b00      	cmp	r3, #0
    8970:	bf14      	ite	ne
    8972:	2301      	movne	r3, #1
    8974:	2300      	moveq	r3, #0
    8976:	b2db      	uxtb	r3, r3
}
    8978:	4618      	mov	r0, r3
    897a:	3710      	adds	r7, #16
    897c:	46bd      	mov	sp, r7
    897e:	bd80      	pop	{r7, pc}
    8980:	000082ad 	.word	0x000082ad

00008984 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8984:	b580      	push	{r7, lr}
    8986:	b082      	sub	sp, #8
    8988:	af00      	add	r7, sp, #0
    898a:	4603      	mov	r3, r0
    898c:	460a      	mov	r2, r1
    898e:	71fb      	strb	r3, [r7, #7]
    8990:	4613      	mov	r3, r2
    8992:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8994:	79bb      	ldrb	r3, [r7, #6]
    8996:	2220      	movs	r2, #32
    8998:	409a      	lsls	r2, r3
    899a:	79fb      	ldrb	r3, [r7, #7]
    899c:	4611      	mov	r1, r2
    899e:	4618      	mov	r0, r3
    89a0:	4b02      	ldr	r3, [pc, #8]	; (89ac <_usbd_ep_ack_stall+0x28>)
    89a2:	4798      	blx	r3
}
    89a4:	bf00      	nop
    89a6:	3708      	adds	r7, #8
    89a8:	46bd      	mov	sp, r7
    89aa:	bd80      	pop	{r7, pc}
    89ac:	000087fd 	.word	0x000087fd

000089b0 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    89b0:	b580      	push	{r7, lr}
    89b2:	b082      	sub	sp, #8
    89b4:	af00      	add	r7, sp, #0
    89b6:	4603      	mov	r3, r0
    89b8:	71fb      	strb	r3, [r7, #7]
    89ba:	460b      	mov	r3, r1
    89bc:	71bb      	strb	r3, [r7, #6]
    89be:	4613      	mov	r3, r2
    89c0:	717b      	strb	r3, [r7, #5]
	if (en) {
    89c2:	797b      	ldrb	r3, [r7, #5]
    89c4:	2b00      	cmp	r3, #0
    89c6:	d008      	beq.n	89da <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    89c8:	79bb      	ldrb	r3, [r7, #6]
    89ca:	2220      	movs	r2, #32
    89cc:	409a      	lsls	r2, r3
    89ce:	79fb      	ldrb	r3, [r7, #7]
    89d0:	4611      	mov	r1, r2
    89d2:	4618      	mov	r0, r3
    89d4:	4b07      	ldr	r3, [pc, #28]	; (89f4 <_usbd_ep_int_stall_en+0x44>)
    89d6:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    89d8:	e007      	b.n	89ea <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    89da:	79bb      	ldrb	r3, [r7, #6]
    89dc:	2220      	movs	r2, #32
    89de:	409a      	lsls	r2, r3
    89e0:	79fb      	ldrb	r3, [r7, #7]
    89e2:	4611      	mov	r1, r2
    89e4:	4618      	mov	r0, r3
    89e6:	4b04      	ldr	r3, [pc, #16]	; (89f8 <_usbd_ep_int_stall_en+0x48>)
    89e8:	4798      	blx	r3
}
    89ea:	bf00      	nop
    89ec:	3708      	adds	r7, #8
    89ee:	46bd      	mov	sp, r7
    89f0:	bd80      	pop	{r7, pc}
    89f2:	bf00      	nop
    89f4:	00008825 	.word	0x00008825
    89f8:	0000884d 	.word	0x0000884d

000089fc <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b082      	sub	sp, #8
    8a00:	af00      	add	r7, sp, #0
    8a02:	4603      	mov	r3, r0
    8a04:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8a06:	79fb      	ldrb	r3, [r7, #7]
    8a08:	4619      	mov	r1, r3
    8a0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a0e:	4b03      	ldr	r3, [pc, #12]	; (8a1c <_usbd_ep_stop_setup+0x20>)
    8a10:	4798      	blx	r3
}
    8a12:	bf00      	nop
    8a14:	3708      	adds	r7, #8
    8a16:	46bd      	mov	sp, r7
    8a18:	bd80      	pop	{r7, pc}
    8a1a:	bf00      	nop
    8a1c:	00008381 	.word	0x00008381

00008a20 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8a20:	b580      	push	{r7, lr}
    8a22:	b082      	sub	sp, #8
    8a24:	af00      	add	r7, sp, #0
    8a26:	4603      	mov	r3, r0
    8a28:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8a2a:	79fb      	ldrb	r3, [r7, #7]
    8a2c:	2210      	movs	r2, #16
    8a2e:	4619      	mov	r1, r3
    8a30:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a34:	4b05      	ldr	r3, [pc, #20]	; (8a4c <_usbd_ep_is_setup+0x2c>)
    8a36:	4798      	blx	r3
    8a38:	4603      	mov	r3, r0
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	bf14      	ite	ne
    8a3e:	2301      	movne	r3, #1
    8a40:	2300      	moveq	r3, #0
    8a42:	b2db      	uxtb	r3, r3
}
    8a44:	4618      	mov	r0, r3
    8a46:	3708      	adds	r7, #8
    8a48:	46bd      	mov	sp, r7
    8a4a:	bd80      	pop	{r7, pc}
    8a4c:	00008277 	.word	0x00008277

00008a50 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8a50:	b580      	push	{r7, lr}
    8a52:	b082      	sub	sp, #8
    8a54:	af00      	add	r7, sp, #0
    8a56:	4603      	mov	r3, r0
    8a58:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8a5a:	79fb      	ldrb	r3, [r7, #7]
    8a5c:	2110      	movs	r1, #16
    8a5e:	4618      	mov	r0, r3
    8a60:	4b02      	ldr	r3, [pc, #8]	; (8a6c <_usbd_ep_ack_setup+0x1c>)
    8a62:	4798      	blx	r3
}
    8a64:	bf00      	nop
    8a66:	3708      	adds	r7, #8
    8a68:	46bd      	mov	sp, r7
    8a6a:	bd80      	pop	{r7, pc}
    8a6c:	000087fd 	.word	0x000087fd

00008a70 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8a70:	b580      	push	{r7, lr}
    8a72:	b082      	sub	sp, #8
    8a74:	af00      	add	r7, sp, #0
    8a76:	4603      	mov	r3, r0
    8a78:	71fb      	strb	r3, [r7, #7]
    8a7a:	460b      	mov	r3, r1
    8a7c:	71bb      	strb	r3, [r7, #6]
    8a7e:	4613      	mov	r3, r2
    8a80:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8a82:	797b      	ldrb	r3, [r7, #5]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d00b      	beq.n	8aa0 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8a88:	79bb      	ldrb	r3, [r7, #6]
    8a8a:	2201      	movs	r2, #1
    8a8c:	fa02 f303 	lsl.w	r3, r2, r3
    8a90:	b2da      	uxtb	r2, r3
    8a92:	79fb      	ldrb	r3, [r7, #7]
    8a94:	4619      	mov	r1, r3
    8a96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a9a:	4b09      	ldr	r3, [pc, #36]	; (8ac0 <_usbd_ep_set_toggle+0x50>)
    8a9c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8a9e:	e00a      	b.n	8ab6 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8aa0:	79bb      	ldrb	r3, [r7, #6]
    8aa2:	2201      	movs	r2, #1
    8aa4:	fa02 f303 	lsl.w	r3, r2, r3
    8aa8:	b2da      	uxtb	r2, r3
    8aaa:	79fb      	ldrb	r3, [r7, #7]
    8aac:	4619      	mov	r1, r3
    8aae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ab2:	4b04      	ldr	r3, [pc, #16]	; (8ac4 <_usbd_ep_set_toggle+0x54>)
    8ab4:	4798      	blx	r3
}
    8ab6:	bf00      	nop
    8ab8:	3708      	adds	r7, #8
    8aba:	46bd      	mov	sp, r7
    8abc:	bd80      	pop	{r7, pc}
    8abe:	bf00      	nop
    8ac0:	00008301 	.word	0x00008301
    8ac4:	00008355 	.word	0x00008355

00008ac8 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8ac8:	b580      	push	{r7, lr}
    8aca:	b082      	sub	sp, #8
    8acc:	af00      	add	r7, sp, #0
    8ace:	4603      	mov	r3, r0
    8ad0:	460a      	mov	r2, r1
    8ad2:	71fb      	strb	r3, [r7, #7]
    8ad4:	4613      	mov	r3, r2
    8ad6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8ad8:	79bb      	ldrb	r3, [r7, #6]
    8ada:	2201      	movs	r2, #1
    8adc:	409a      	lsls	r2, r3
    8ade:	79fb      	ldrb	r3, [r7, #7]
    8ae0:	4611      	mov	r1, r2
    8ae2:	4618      	mov	r0, r3
    8ae4:	4b02      	ldr	r3, [pc, #8]	; (8af0 <_usbd_ep_ack_io_cpt+0x28>)
    8ae6:	4798      	blx	r3
}
    8ae8:	bf00      	nop
    8aea:	3708      	adds	r7, #8
    8aec:	46bd      	mov	sp, r7
    8aee:	bd80      	pop	{r7, pc}
    8af0:	000087fd 	.word	0x000087fd

00008af4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8af4:	b480      	push	{r7}
    8af6:	b085      	sub	sp, #20
    8af8:	af00      	add	r7, sp, #0
    8afa:	4603      	mov	r3, r0
    8afc:	603a      	str	r2, [r7, #0]
    8afe:	71fb      	strb	r3, [r7, #7]
    8b00:	460b      	mov	r3, r1
    8b02:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8b04:	79fa      	ldrb	r2, [r7, #7]
    8b06:	79bb      	ldrb	r3, [r7, #6]
    8b08:	0052      	lsls	r2, r2, #1
    8b0a:	4413      	add	r3, r2
    8b0c:	011b      	lsls	r3, r3, #4
    8b0e:	4a06      	ldr	r2, [pc, #24]	; (8b28 <_usbd_ep_set_buf+0x34>)
    8b10:	4413      	add	r3, r2
    8b12:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8b14:	68fb      	ldr	r3, [r7, #12]
    8b16:	683a      	ldr	r2, [r7, #0]
    8b18:	601a      	str	r2, [r3, #0]
}
    8b1a:	bf00      	nop
    8b1c:	3714      	adds	r7, #20
    8b1e:	46bd      	mov	sp, r7
    8b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b24:	4770      	bx	lr
    8b26:	bf00      	nop
    8b28:	20000d18 	.word	0x20000d18

00008b2c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8b2c:	b480      	push	{r7}
    8b2e:	b085      	sub	sp, #20
    8b30:	af00      	add	r7, sp, #0
    8b32:	4603      	mov	r3, r0
    8b34:	71fb      	strb	r3, [r7, #7]
    8b36:	460b      	mov	r3, r1
    8b38:	71bb      	strb	r3, [r7, #6]
    8b3a:	4613      	mov	r3, r2
    8b3c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8b3e:	79fa      	ldrb	r2, [r7, #7]
    8b40:	79bb      	ldrb	r3, [r7, #6]
    8b42:	0052      	lsls	r2, r2, #1
    8b44:	4413      	add	r3, r2
    8b46:	011b      	lsls	r3, r3, #4
    8b48:	4a08      	ldr	r2, [pc, #32]	; (8b6c <_usbd_ep_set_in_count+0x40>)
    8b4a:	4413      	add	r3, r2
    8b4c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8b4e:	88bb      	ldrh	r3, [r7, #4]
    8b50:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b54:	b299      	uxth	r1, r3
    8b56:	68fa      	ldr	r2, [r7, #12]
    8b58:	6853      	ldr	r3, [r2, #4]
    8b5a:	f361 339b 	bfi	r3, r1, #14, #14
    8b5e:	6053      	str	r3, [r2, #4]
}
    8b60:	bf00      	nop
    8b62:	3714      	adds	r7, #20
    8b64:	46bd      	mov	sp, r7
    8b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b6a:	4770      	bx	lr
    8b6c:	20000d18 	.word	0x20000d18

00008b70 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8b70:	b480      	push	{r7}
    8b72:	b085      	sub	sp, #20
    8b74:	af00      	add	r7, sp, #0
    8b76:	4603      	mov	r3, r0
    8b78:	71fb      	strb	r3, [r7, #7]
    8b7a:	460b      	mov	r3, r1
    8b7c:	71bb      	strb	r3, [r7, #6]
    8b7e:	4613      	mov	r3, r2
    8b80:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8b82:	79fa      	ldrb	r2, [r7, #7]
    8b84:	79bb      	ldrb	r3, [r7, #6]
    8b86:	0052      	lsls	r2, r2, #1
    8b88:	4413      	add	r3, r2
    8b8a:	011b      	lsls	r3, r3, #4
    8b8c:	4a08      	ldr	r2, [pc, #32]	; (8bb0 <_usbd_ep_set_in_size+0x40>)
    8b8e:	4413      	add	r3, r2
    8b90:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8b92:	88bb      	ldrh	r3, [r7, #4]
    8b94:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b98:	b299      	uxth	r1, r3
    8b9a:	68fa      	ldr	r2, [r7, #12]
    8b9c:	6853      	ldr	r3, [r2, #4]
    8b9e:	f361 030d 	bfi	r3, r1, #0, #14
    8ba2:	6053      	str	r3, [r2, #4]
}
    8ba4:	bf00      	nop
    8ba6:	3714      	adds	r7, #20
    8ba8:	46bd      	mov	sp, r7
    8baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bae:	4770      	bx	lr
    8bb0:	20000d18 	.word	0x20000d18

00008bb4 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8bb4:	b480      	push	{r7}
    8bb6:	b085      	sub	sp, #20
    8bb8:	af00      	add	r7, sp, #0
    8bba:	4603      	mov	r3, r0
    8bbc:	71fb      	strb	r3, [r7, #7]
    8bbe:	460b      	mov	r3, r1
    8bc0:	71bb      	strb	r3, [r7, #6]
    8bc2:	4613      	mov	r3, r2
    8bc4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8bc6:	79fa      	ldrb	r2, [r7, #7]
    8bc8:	79bb      	ldrb	r3, [r7, #6]
    8bca:	0052      	lsls	r2, r2, #1
    8bcc:	4413      	add	r3, r2
    8bce:	011b      	lsls	r3, r3, #4
    8bd0:	4a08      	ldr	r2, [pc, #32]	; (8bf4 <_usbd_ep_set_out_count+0x40>)
    8bd2:	4413      	add	r3, r2
    8bd4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8bd6:	88bb      	ldrh	r3, [r7, #4]
    8bd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8bdc:	b299      	uxth	r1, r3
    8bde:	68fa      	ldr	r2, [r7, #12]
    8be0:	6853      	ldr	r3, [r2, #4]
    8be2:	f361 030d 	bfi	r3, r1, #0, #14
    8be6:	6053      	str	r3, [r2, #4]
}
    8be8:	bf00      	nop
    8bea:	3714      	adds	r7, #20
    8bec:	46bd      	mov	sp, r7
    8bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf2:	4770      	bx	lr
    8bf4:	20000d18 	.word	0x20000d18

00008bf8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8bf8:	b480      	push	{r7}
    8bfa:	b085      	sub	sp, #20
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	4603      	mov	r3, r0
    8c00:	71fb      	strb	r3, [r7, #7]
    8c02:	460b      	mov	r3, r1
    8c04:	71bb      	strb	r3, [r7, #6]
    8c06:	4613      	mov	r3, r2
    8c08:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8c0a:	79fa      	ldrb	r2, [r7, #7]
    8c0c:	79bb      	ldrb	r3, [r7, #6]
    8c0e:	0052      	lsls	r2, r2, #1
    8c10:	4413      	add	r3, r2
    8c12:	011b      	lsls	r3, r3, #4
    8c14:	4a08      	ldr	r2, [pc, #32]	; (8c38 <_usbd_ep_set_out_size+0x40>)
    8c16:	4413      	add	r3, r2
    8c18:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8c1a:	88bb      	ldrh	r3, [r7, #4]
    8c1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8c20:	b299      	uxth	r1, r3
    8c22:	68fa      	ldr	r2, [r7, #12]
    8c24:	6853      	ldr	r3, [r2, #4]
    8c26:	f361 339b 	bfi	r3, r1, #14, #14
    8c2a:	6053      	str	r3, [r2, #4]
}
    8c2c:	bf00      	nop
    8c2e:	3714      	adds	r7, #20
    8c30:	46bd      	mov	sp, r7
    8c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c36:	4770      	bx	lr
    8c38:	20000d18 	.word	0x20000d18

00008c3c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8c3c:	b580      	push	{r7, lr}
    8c3e:	b084      	sub	sp, #16
    8c40:	af00      	add	r7, sp, #0
    8c42:	60ba      	str	r2, [r7, #8]
    8c44:	607b      	str	r3, [r7, #4]
    8c46:	4603      	mov	r3, r0
    8c48:	73fb      	strb	r3, [r7, #15]
    8c4a:	460b      	mov	r3, r1
    8c4c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8c4e:	68bb      	ldr	r3, [r7, #8]
    8c50:	b29a      	uxth	r2, r3
    8c52:	7bb9      	ldrb	r1, [r7, #14]
    8c54:	7bfb      	ldrb	r3, [r7, #15]
    8c56:	4618      	mov	r0, r3
    8c58:	4b06      	ldr	r3, [pc, #24]	; (8c74 <_usbd_ep_set_in_trans+0x38>)
    8c5a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	b29a      	uxth	r2, r3
    8c60:	7bb9      	ldrb	r1, [r7, #14]
    8c62:	7bfb      	ldrb	r3, [r7, #15]
    8c64:	4618      	mov	r0, r3
    8c66:	4b04      	ldr	r3, [pc, #16]	; (8c78 <_usbd_ep_set_in_trans+0x3c>)
    8c68:	4798      	blx	r3
}
    8c6a:	bf00      	nop
    8c6c:	3710      	adds	r7, #16
    8c6e:	46bd      	mov	sp, r7
    8c70:	bd80      	pop	{r7, pc}
    8c72:	bf00      	nop
    8c74:	00008b71 	.word	0x00008b71
    8c78:	00008b2d 	.word	0x00008b2d

00008c7c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8c7c:	b580      	push	{r7, lr}
    8c7e:	b084      	sub	sp, #16
    8c80:	af00      	add	r7, sp, #0
    8c82:	60ba      	str	r2, [r7, #8]
    8c84:	607b      	str	r3, [r7, #4]
    8c86:	4603      	mov	r3, r0
    8c88:	73fb      	strb	r3, [r7, #15]
    8c8a:	460b      	mov	r3, r1
    8c8c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8c8e:	68bb      	ldr	r3, [r7, #8]
    8c90:	b29a      	uxth	r2, r3
    8c92:	7bb9      	ldrb	r1, [r7, #14]
    8c94:	7bfb      	ldrb	r3, [r7, #15]
    8c96:	4618      	mov	r0, r3
    8c98:	4b06      	ldr	r3, [pc, #24]	; (8cb4 <_usbd_ep_set_out_trans+0x38>)
    8c9a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	b29a      	uxth	r2, r3
    8ca0:	7bb9      	ldrb	r1, [r7, #14]
    8ca2:	7bfb      	ldrb	r3, [r7, #15]
    8ca4:	4618      	mov	r0, r3
    8ca6:	4b04      	ldr	r3, [pc, #16]	; (8cb8 <_usbd_ep_set_out_trans+0x3c>)
    8ca8:	4798      	blx	r3
}
    8caa:	bf00      	nop
    8cac:	3710      	adds	r7, #16
    8cae:	46bd      	mov	sp, r7
    8cb0:	bd80      	pop	{r7, pc}
    8cb2:	bf00      	nop
    8cb4:	00008bf9 	.word	0x00008bf9
    8cb8:	00008bb5 	.word	0x00008bb5

00008cbc <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8cbc:	b480      	push	{r7}
    8cbe:	b085      	sub	sp, #20
    8cc0:	af00      	add	r7, sp, #0
    8cc2:	4603      	mov	r3, r0
    8cc4:	460a      	mov	r2, r1
    8cc6:	71fb      	strb	r3, [r7, #7]
    8cc8:	4613      	mov	r3, r2
    8cca:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8ccc:	79fa      	ldrb	r2, [r7, #7]
    8cce:	79bb      	ldrb	r3, [r7, #6]
    8cd0:	0052      	lsls	r2, r2, #1
    8cd2:	4413      	add	r3, r2
    8cd4:	011b      	lsls	r3, r3, #4
    8cd6:	4a06      	ldr	r2, [pc, #24]	; (8cf0 <_usbd_ep_clear_bank_status+0x34>)
    8cd8:	4413      	add	r3, r2
    8cda:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8cdc:	68fb      	ldr	r3, [r7, #12]
    8cde:	2200      	movs	r2, #0
    8ce0:	729a      	strb	r2, [r3, #10]
}
    8ce2:	bf00      	nop
    8ce4:	3714      	adds	r7, #20
    8ce6:	46bd      	mov	sp, r7
    8ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cec:	4770      	bx	lr
    8cee:	bf00      	nop
    8cf0:	20000d18 	.word	0x20000d18

00008cf4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8cf4:	b580      	push	{r7, lr}
    8cf6:	b082      	sub	sp, #8
    8cf8:	af00      	add	r7, sp, #0
    8cfa:	4603      	mov	r3, r0
    8cfc:	71fb      	strb	r3, [r7, #7]
    8cfe:	460b      	mov	r3, r1
    8d00:	71bb      	strb	r3, [r7, #6]
    8d02:	4613      	mov	r3, r2
    8d04:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8d06:	797b      	ldrb	r3, [r7, #5]
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d00b      	beq.n	8d24 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8d0c:	79bb      	ldrb	r3, [r7, #6]
    8d0e:	2240      	movs	r2, #64	; 0x40
    8d10:	fa02 f303 	lsl.w	r3, r2, r3
    8d14:	b2da      	uxtb	r2, r3
    8d16:	79fb      	ldrb	r3, [r7, #7]
    8d18:	4619      	mov	r1, r3
    8d1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d1e:	4b09      	ldr	r3, [pc, #36]	; (8d44 <_usbd_ep_set_in_rdy+0x50>)
    8d20:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8d22:	e00a      	b.n	8d3a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8d24:	79bb      	ldrb	r3, [r7, #6]
    8d26:	2240      	movs	r2, #64	; 0x40
    8d28:	fa02 f303 	lsl.w	r3, r2, r3
    8d2c:	b2da      	uxtb	r2, r3
    8d2e:	79fb      	ldrb	r3, [r7, #7]
    8d30:	4619      	mov	r1, r3
    8d32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d36:	4b04      	ldr	r3, [pc, #16]	; (8d48 <_usbd_ep_set_in_rdy+0x54>)
    8d38:	4798      	blx	r3
}
    8d3a:	bf00      	nop
    8d3c:	3708      	adds	r7, #8
    8d3e:	46bd      	mov	sp, r7
    8d40:	bd80      	pop	{r7, pc}
    8d42:	bf00      	nop
    8d44:	00008301 	.word	0x00008301
    8d48:	00008355 	.word	0x00008355

00008d4c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8d4c:	b580      	push	{r7, lr}
    8d4e:	b082      	sub	sp, #8
    8d50:	af00      	add	r7, sp, #0
    8d52:	4603      	mov	r3, r0
    8d54:	71fb      	strb	r3, [r7, #7]
    8d56:	460b      	mov	r3, r1
    8d58:	71bb      	strb	r3, [r7, #6]
    8d5a:	4613      	mov	r3, r2
    8d5c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8d5e:	797b      	ldrb	r3, [r7, #5]
    8d60:	2b00      	cmp	r3, #0
    8d62:	d00b      	beq.n	8d7c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8d64:	79bb      	ldrb	r3, [r7, #6]
    8d66:	2240      	movs	r2, #64	; 0x40
    8d68:	fa02 f303 	lsl.w	r3, r2, r3
    8d6c:	b2da      	uxtb	r2, r3
    8d6e:	79fb      	ldrb	r3, [r7, #7]
    8d70:	4619      	mov	r1, r3
    8d72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d76:	4b09      	ldr	r3, [pc, #36]	; (8d9c <_usbd_ep_set_out_rdy+0x50>)
    8d78:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8d7a:	e00a      	b.n	8d92 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8d7c:	79bb      	ldrb	r3, [r7, #6]
    8d7e:	2240      	movs	r2, #64	; 0x40
    8d80:	fa02 f303 	lsl.w	r3, r2, r3
    8d84:	b2da      	uxtb	r2, r3
    8d86:	79fb      	ldrb	r3, [r7, #7]
    8d88:	4619      	mov	r1, r3
    8d8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d8e:	4b04      	ldr	r3, [pc, #16]	; (8da0 <_usbd_ep_set_out_rdy+0x54>)
    8d90:	4798      	blx	r3
}
    8d92:	bf00      	nop
    8d94:	3708      	adds	r7, #8
    8d96:	46bd      	mov	sp, r7
    8d98:	bd80      	pop	{r7, pc}
    8d9a:	bf00      	nop
    8d9c:	00008355 	.word	0x00008355
    8da0:	00008301 	.word	0x00008301

00008da4 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8da4:	b480      	push	{r7}
    8da6:	b083      	sub	sp, #12
    8da8:	af00      	add	r7, sp, #0
    8daa:	4603      	mov	r3, r0
    8dac:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8dae:	88fb      	ldrh	r3, [r7, #6]
    8db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8db4:	d820      	bhi.n	8df8 <_usbd_ep_pcksize_size+0x54>
    8db6:	88fb      	ldrh	r3, [r7, #6]
    8db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8dbc:	d81a      	bhi.n	8df4 <_usbd_ep_pcksize_size+0x50>
    8dbe:	88fb      	ldrh	r3, [r7, #6]
    8dc0:	2b80      	cmp	r3, #128	; 0x80
    8dc2:	d815      	bhi.n	8df0 <_usbd_ep_pcksize_size+0x4c>
    8dc4:	88fb      	ldrh	r3, [r7, #6]
    8dc6:	2b40      	cmp	r3, #64	; 0x40
    8dc8:	d810      	bhi.n	8dec <_usbd_ep_pcksize_size+0x48>
    8dca:	88fb      	ldrh	r3, [r7, #6]
    8dcc:	2b20      	cmp	r3, #32
    8dce:	d80b      	bhi.n	8de8 <_usbd_ep_pcksize_size+0x44>
    8dd0:	88fb      	ldrh	r3, [r7, #6]
    8dd2:	2b10      	cmp	r3, #16
    8dd4:	d806      	bhi.n	8de4 <_usbd_ep_pcksize_size+0x40>
    8dd6:	88fb      	ldrh	r3, [r7, #6]
    8dd8:	2b08      	cmp	r3, #8
    8dda:	bf8c      	ite	hi
    8ddc:	2301      	movhi	r3, #1
    8dde:	2300      	movls	r3, #0
    8de0:	b2db      	uxtb	r3, r3
    8de2:	e00a      	b.n	8dfa <_usbd_ep_pcksize_size+0x56>
    8de4:	2302      	movs	r3, #2
    8de6:	e008      	b.n	8dfa <_usbd_ep_pcksize_size+0x56>
    8de8:	2303      	movs	r3, #3
    8dea:	e006      	b.n	8dfa <_usbd_ep_pcksize_size+0x56>
    8dec:	2304      	movs	r3, #4
    8dee:	e004      	b.n	8dfa <_usbd_ep_pcksize_size+0x56>
    8df0:	2305      	movs	r3, #5
    8df2:	e002      	b.n	8dfa <_usbd_ep_pcksize_size+0x56>
    8df4:	2306      	movs	r3, #6
    8df6:	e000      	b.n	8dfa <_usbd_ep_pcksize_size+0x56>
    8df8:	2307      	movs	r3, #7
}
    8dfa:	4618      	mov	r0, r3
    8dfc:	370c      	adds	r7, #12
    8dfe:	46bd      	mov	sp, r7
    8e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e04:	4770      	bx	lr
	...

00008e08 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8e08:	b480      	push	{r7}
    8e0a:	b085      	sub	sp, #20
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	4603      	mov	r3, r0
    8e10:	460a      	mov	r2, r1
    8e12:	71fb      	strb	r3, [r7, #7]
    8e14:	4613      	mov	r3, r2
    8e16:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8e18:	79fb      	ldrb	r3, [r7, #7]
    8e1a:	2b00      	cmp	r3, #0
    8e1c:	d008      	beq.n	8e30 <_usb_d_dev_ept+0x28>
    8e1e:	79bb      	ldrb	r3, [r7, #6]
    8e20:	2b00      	cmp	r3, #0
    8e22:	d003      	beq.n	8e2c <_usb_d_dev_ept+0x24>
    8e24:	79fb      	ldrb	r3, [r7, #7]
    8e26:	3304      	adds	r3, #4
    8e28:	b2db      	uxtb	r3, r3
    8e2a:	e002      	b.n	8e32 <_usb_d_dev_ept+0x2a>
    8e2c:	79fb      	ldrb	r3, [r7, #7]
    8e2e:	e000      	b.n	8e32 <_usb_d_dev_ept+0x2a>
    8e30:	2300      	movs	r3, #0
    8e32:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8e34:	7bfa      	ldrb	r2, [r7, #15]
    8e36:	4613      	mov	r3, r2
    8e38:	009b      	lsls	r3, r3, #2
    8e3a:	4413      	add	r3, r2
    8e3c:	009b      	lsls	r3, r3, #2
    8e3e:	3310      	adds	r3, #16
    8e40:	4a04      	ldr	r2, [pc, #16]	; (8e54 <_usb_d_dev_ept+0x4c>)
    8e42:	4413      	add	r3, r2
    8e44:	3304      	adds	r3, #4
}
    8e46:	4618      	mov	r0, r3
    8e48:	3714      	adds	r7, #20
    8e4a:	46bd      	mov	sp, r7
    8e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e50:	4770      	bx	lr
    8e52:	bf00      	nop
    8e54:	20000c50 	.word	0x20000c50

00008e58 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8e58:	b580      	push	{r7, lr}
    8e5a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8e5c:	2104      	movs	r1, #4
    8e5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e62:	4b03      	ldr	r3, [pc, #12]	; (8e70 <_usb_d_dev_sof+0x18>)
    8e64:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8e66:	4b03      	ldr	r3, [pc, #12]	; (8e74 <_usb_d_dev_sof+0x1c>)
    8e68:	681b      	ldr	r3, [r3, #0]
    8e6a:	4798      	blx	r3
}
    8e6c:	bf00      	nop
    8e6e:	bd80      	pop	{r7, pc}
    8e70:	000084cf 	.word	0x000084cf
    8e74:	20000c50 	.word	0x20000c50

00008e78 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8e78:	b580      	push	{r7, lr}
    8e7a:	b084      	sub	sp, #16
    8e7c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8e7e:	2300      	movs	r3, #0
    8e80:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8e82:	f240 2101 	movw	r1, #513	; 0x201
    8e86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e8a:	4b1a      	ldr	r3, [pc, #104]	; (8ef4 <_usb_d_dev_lpmsusp+0x7c>)
    8e8c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8e8e:	f240 2101 	movw	r1, #513	; 0x201
    8e92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e96:	4b18      	ldr	r3, [pc, #96]	; (8ef8 <_usb_d_dev_lpmsusp+0x80>)
    8e98:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8e9a:	2170      	movs	r1, #112	; 0x70
    8e9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ea0:	4b16      	ldr	r3, [pc, #88]	; (8efc <_usb_d_dev_lpmsusp+0x84>)
    8ea2:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8ea4:	2300      	movs	r3, #0
    8ea6:	73fb      	strb	r3, [r7, #15]
    8ea8:	e018      	b.n	8edc <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8eaa:	7bfb      	ldrb	r3, [r7, #15]
    8eac:	015b      	lsls	r3, r3, #5
    8eae:	4a14      	ldr	r2, [pc, #80]	; (8f00 <_usb_d_dev_lpmsusp+0x88>)
    8eb0:	4413      	add	r3, r2
    8eb2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	891b      	ldrh	r3, [r3, #8]
    8eb8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8ebc:	b2db      	uxtb	r3, r3
    8ebe:	2b03      	cmp	r3, #3
    8ec0:	d109      	bne.n	8ed6 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	891b      	ldrh	r3, [r3, #8]
    8ec6:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8eca:	b29b      	uxth	r3, r3
    8ecc:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	2200      	movs	r2, #0
    8ed2:	811a      	strh	r2, [r3, #8]
			break;
    8ed4:	e005      	b.n	8ee2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8ed6:	7bfb      	ldrb	r3, [r7, #15]
    8ed8:	3301      	adds	r3, #1
    8eda:	73fb      	strb	r3, [r7, #15]
    8edc:	7bfb      	ldrb	r3, [r7, #15]
    8ede:	2b03      	cmp	r3, #3
    8ee0:	d9e3      	bls.n	8eaa <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8ee2:	4b08      	ldr	r3, [pc, #32]	; (8f04 <_usb_d_dev_lpmsusp+0x8c>)
    8ee4:	685b      	ldr	r3, [r3, #4]
    8ee6:	68b9      	ldr	r1, [r7, #8]
    8ee8:	2003      	movs	r0, #3
    8eea:	4798      	blx	r3
}
    8eec:	bf00      	nop
    8eee:	3710      	adds	r7, #16
    8ef0:	46bd      	mov	sp, r7
    8ef2:	bd80      	pop	{r7, pc}
    8ef4:	000084cf 	.word	0x000084cf
    8ef8:	00008525 	.word	0x00008525
    8efc:	000084ed 	.word	0x000084ed
    8f00:	20000d18 	.word	0x20000d18
    8f04:	20000c50 	.word	0x20000c50

00008f08 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8f0c:	2180      	movs	r1, #128	; 0x80
    8f0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f12:	4b04      	ldr	r3, [pc, #16]	; (8f24 <_usb_d_dev_ramerr+0x1c>)
    8f14:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8f16:	4b04      	ldr	r3, [pc, #16]	; (8f28 <_usb_d_dev_ramerr+0x20>)
    8f18:	685b      	ldr	r3, [r3, #4]
    8f1a:	2100      	movs	r1, #0
    8f1c:	2005      	movs	r0, #5
    8f1e:	4798      	blx	r3
}
    8f20:	bf00      	nop
    8f22:	bd80      	pop	{r7, pc}
    8f24:	000084cf 	.word	0x000084cf
    8f28:	20000c50 	.word	0x20000c50

00008f2c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8f2c:	b580      	push	{r7, lr}
    8f2e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8f30:	2170      	movs	r1, #112	; 0x70
    8f32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f36:	4b0b      	ldr	r3, [pc, #44]	; (8f64 <_usb_d_dev_wakeup+0x38>)
    8f38:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8f3a:	2170      	movs	r1, #112	; 0x70
    8f3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f40:	4b09      	ldr	r3, [pc, #36]	; (8f68 <_usb_d_dev_wakeup+0x3c>)
    8f42:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8f44:	f240 2101 	movw	r1, #513	; 0x201
    8f48:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f4c:	4b07      	ldr	r3, [pc, #28]	; (8f6c <_usb_d_dev_wakeup+0x40>)
    8f4e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8f50:	2000      	movs	r0, #0
    8f52:	4b07      	ldr	r3, [pc, #28]	; (8f70 <_usb_d_dev_wakeup+0x44>)
    8f54:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8f56:	4b07      	ldr	r3, [pc, #28]	; (8f74 <_usb_d_dev_wakeup+0x48>)
    8f58:	685b      	ldr	r3, [r3, #4]
    8f5a:	2100      	movs	r1, #0
    8f5c:	2002      	movs	r0, #2
    8f5e:	4798      	blx	r3
}
    8f60:	bf00      	nop
    8f62:	bd80      	pop	{r7, pc}
    8f64:	000084cf 	.word	0x000084cf
    8f68:	00008525 	.word	0x00008525
    8f6c:	000084ed 	.word	0x000084ed
    8f70:	000087cd 	.word	0x000087cd
    8f74:	20000c50 	.word	0x20000c50

00008f78 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8f78:	b580      	push	{r7, lr}
    8f7a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8f7c:	2200      	movs	r2, #0
    8f7e:	2100      	movs	r1, #0
    8f80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f84:	4b0d      	ldr	r3, [pc, #52]	; (8fbc <_usb_d_dev_reset+0x44>)
    8f86:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8f88:	2108      	movs	r1, #8
    8f8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f8e:	4b0c      	ldr	r3, [pc, #48]	; (8fc0 <_usb_d_dev_reset+0x48>)
    8f90:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8f92:	2170      	movs	r1, #112	; 0x70
    8f94:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f98:	4b0a      	ldr	r3, [pc, #40]	; (8fc4 <_usb_d_dev_reset+0x4c>)
    8f9a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8f9c:	f240 2101 	movw	r1, #513	; 0x201
    8fa0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fa4:	4b08      	ldr	r3, [pc, #32]	; (8fc8 <_usb_d_dev_reset+0x50>)
    8fa6:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8fa8:	4b08      	ldr	r3, [pc, #32]	; (8fcc <_usb_d_dev_reset+0x54>)
    8faa:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8fac:	4b08      	ldr	r3, [pc, #32]	; (8fd0 <_usb_d_dev_reset+0x58>)
    8fae:	685b      	ldr	r3, [r3, #4]
    8fb0:	2100      	movs	r1, #0
    8fb2:	2001      	movs	r0, #1
    8fb4:	4798      	blx	r3
}
    8fb6:	bf00      	nop
    8fb8:	bd80      	pop	{r7, pc}
    8fba:	bf00      	nop
    8fbc:	00008465 	.word	0x00008465
    8fc0:	000084cf 	.word	0x000084cf
    8fc4:	00008525 	.word	0x00008525
    8fc8:	000084ed 	.word	0x000084ed
    8fcc:	00009b35 	.word	0x00009b35
    8fd0:	20000c50 	.word	0x20000c50

00008fd4 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8fd4:	b580      	push	{r7, lr}
    8fd6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8fd8:	f240 2101 	movw	r1, #513	; 0x201
    8fdc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fe0:	4b09      	ldr	r3, [pc, #36]	; (9008 <_usb_d_dev_suspend+0x34>)
    8fe2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8fe4:	f240 2101 	movw	r1, #513	; 0x201
    8fe8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fec:	4b07      	ldr	r3, [pc, #28]	; (900c <_usb_d_dev_suspend+0x38>)
    8fee:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8ff0:	2170      	movs	r1, #112	; 0x70
    8ff2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ff6:	4b06      	ldr	r3, [pc, #24]	; (9010 <_usb_d_dev_suspend+0x3c>)
    8ff8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8ffa:	4b06      	ldr	r3, [pc, #24]	; (9014 <_usb_d_dev_suspend+0x40>)
    8ffc:	685b      	ldr	r3, [r3, #4]
    8ffe:	2100      	movs	r1, #0
    9000:	2004      	movs	r0, #4
    9002:	4798      	blx	r3
}
    9004:	bf00      	nop
    9006:	bd80      	pop	{r7, pc}
    9008:	000084cf 	.word	0x000084cf
    900c:	00008525 	.word	0x00008525
    9010:	000084ed 	.word	0x000084ed
    9014:	20000c50 	.word	0x20000c50

00009018 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9018:	b580      	push	{r7, lr}
    901a:	b082      	sub	sp, #8
    901c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    901e:	2301      	movs	r3, #1
    9020:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9022:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9026:	4b22      	ldr	r3, [pc, #136]	; (90b0 <_usb_d_dev_handle_nep+0x98>)
    9028:	4798      	blx	r3
    902a:	4603      	mov	r3, r0
    902c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    902e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9032:	4b20      	ldr	r3, [pc, #128]	; (90b4 <_usb_d_dev_handle_nep+0x9c>)
    9034:	4798      	blx	r3
    9036:	4603      	mov	r3, r0
    9038:	461a      	mov	r2, r3
    903a:	88bb      	ldrh	r3, [r7, #4]
    903c:	4013      	ands	r3, r2
    903e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9040:	88bb      	ldrh	r3, [r7, #4]
    9042:	f003 0304 	and.w	r3, r3, #4
    9046:	2b00      	cmp	r3, #0
    9048:	d003      	beq.n	9052 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    904a:	4b1b      	ldr	r3, [pc, #108]	; (90b8 <_usb_d_dev_handle_nep+0xa0>)
    904c:	4798      	blx	r3
		return true;
    904e:	2301      	movs	r3, #1
    9050:	e02a      	b.n	90a8 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9052:	88bb      	ldrh	r3, [r7, #4]
    9054:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9058:	2b00      	cmp	r3, #0
    905a:	d002      	beq.n	9062 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    905c:	4b17      	ldr	r3, [pc, #92]	; (90bc <_usb_d_dev_handle_nep+0xa4>)
    905e:	4798      	blx	r3
    9060:	e021      	b.n	90a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9062:	88bb      	ldrh	r3, [r7, #4]
    9064:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9068:	2b00      	cmp	r3, #0
    906a:	d002      	beq.n	9072 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    906c:	4b14      	ldr	r3, [pc, #80]	; (90c0 <_usb_d_dev_handle_nep+0xa8>)
    906e:	4798      	blx	r3
    9070:	e019      	b.n	90a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9072:	88bb      	ldrh	r3, [r7, #4]
    9074:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9078:	2b00      	cmp	r3, #0
    907a:	d002      	beq.n	9082 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    907c:	4b11      	ldr	r3, [pc, #68]	; (90c4 <_usb_d_dev_handle_nep+0xac>)
    907e:	4798      	blx	r3
    9080:	e011      	b.n	90a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9082:	88bb      	ldrh	r3, [r7, #4]
    9084:	f003 0308 	and.w	r3, r3, #8
    9088:	2b00      	cmp	r3, #0
    908a:	d002      	beq.n	9092 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    908c:	4b0e      	ldr	r3, [pc, #56]	; (90c8 <_usb_d_dev_handle_nep+0xb0>)
    908e:	4798      	blx	r3
    9090:	e009      	b.n	90a6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9092:	88bb      	ldrh	r3, [r7, #4]
    9094:	f003 0301 	and.w	r3, r3, #1
    9098:	2b00      	cmp	r3, #0
    909a:	d002      	beq.n	90a2 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    909c:	4b0b      	ldr	r3, [pc, #44]	; (90cc <_usb_d_dev_handle_nep+0xb4>)
    909e:	4798      	blx	r3
    90a0:	e001      	b.n	90a6 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    90a2:	2300      	movs	r3, #0
    90a4:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    90a6:	79fb      	ldrb	r3, [r7, #7]
}
    90a8:	4618      	mov	r0, r3
    90aa:	3708      	adds	r7, #8
    90ac:	46bd      	mov	sp, r7
    90ae:	bd80      	pop	{r7, pc}
    90b0:	000084b5 	.word	0x000084b5
    90b4:	0000850b 	.word	0x0000850b
    90b8:	00008e59 	.word	0x00008e59
    90bc:	00008e79 	.word	0x00008e79
    90c0:	00008f09 	.word	0x00008f09
    90c4:	00008f2d 	.word	0x00008f2d
    90c8:	00008f79 	.word	0x00008f79
    90cc:	00008fd5 	.word	0x00008fd5

000090d0 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    90d0:	b590      	push	{r4, r7, lr}
    90d2:	b089      	sub	sp, #36	; 0x24
    90d4:	af00      	add	r7, sp, #0
    90d6:	6078      	str	r0, [r7, #4]
    90d8:	460b      	mov	r3, r1
    90da:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    90dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90e0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    90e2:	687b      	ldr	r3, [r7, #4]
    90e4:	7c9b      	ldrb	r3, [r3, #18]
    90e6:	f003 030f 	and.w	r3, r3, #15
    90ea:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    90ec:	7dfb      	ldrb	r3, [r7, #23]
    90ee:	015b      	lsls	r3, r3, #5
    90f0:	4a73      	ldr	r2, [pc, #460]	; (92c0 <_usb_d_dev_in_next+0x1f0>)
    90f2:	4413      	add	r3, r2
    90f4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    90f6:	78fb      	ldrb	r3, [r7, #3]
    90f8:	2b00      	cmp	r3, #0
    90fa:	d006      	beq.n	910a <_usb_d_dev_in_next+0x3a>
    90fc:	693b      	ldr	r3, [r7, #16]
    90fe:	3310      	adds	r3, #16
    9100:	685b      	ldr	r3, [r3, #4]
    9102:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9106:	b29b      	uxth	r3, r3
    9108:	e000      	b.n	910c <_usb_d_dev_in_next+0x3c>
    910a:	2300      	movs	r3, #0
    910c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    910e:	687b      	ldr	r3, [r7, #4]
    9110:	8a1b      	ldrh	r3, [r3, #16]
    9112:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9116:	4293      	cmp	r3, r2
    9118:	d103      	bne.n	9122 <_usb_d_dev_in_next+0x52>
    911a:	687b      	ldr	r3, [r7, #4]
    911c:	8a1b      	ldrh	r3, [r3, #16]
    911e:	b21b      	sxth	r3, r3
    9120:	e004      	b.n	912c <_usb_d_dev_in_next+0x5c>
    9122:	687b      	ldr	r3, [r7, #4]
    9124:	8a1b      	ldrh	r3, [r3, #16]
    9126:	3b01      	subs	r3, #1
    9128:	b29b      	uxth	r3, r3
    912a:	b21b      	sxth	r3, r3
    912c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9130:	4013      	ands	r3, r2
    9132:	b21b      	sxth	r3, r3
    9134:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9136:	2300      	movs	r3, #0
    9138:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	7cdb      	ldrb	r3, [r3, #19]
    913e:	f003 0307 	and.w	r3, r3, #7
    9142:	b2db      	uxtb	r3, r3
    9144:	2b01      	cmp	r3, #1
    9146:	bf0c      	ite	eq
    9148:	2301      	moveq	r3, #1
    914a:	2300      	movne	r3, #0
    914c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    914e:	78fb      	ldrb	r3, [r7, #3]
    9150:	2b00      	cmp	r3, #0
    9152:	d004      	beq.n	915e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9154:	7dfb      	ldrb	r3, [r7, #23]
    9156:	2101      	movs	r1, #1
    9158:	4618      	mov	r0, r3
    915a:	4b5a      	ldr	r3, [pc, #360]	; (92c4 <_usb_d_dev_in_next+0x1f4>)
    915c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    915e:	687b      	ldr	r3, [r7, #4]
    9160:	689a      	ldr	r2, [r3, #8]
    9162:	89fb      	ldrh	r3, [r7, #14]
    9164:	441a      	add	r2, r3
    9166:	687b      	ldr	r3, [r7, #4]
    9168:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    916a:	687b      	ldr	r3, [r7, #4]
    916c:	689a      	ldr	r2, [r3, #8]
    916e:	687b      	ldr	r3, [r7, #4]
    9170:	685b      	ldr	r3, [r3, #4]
    9172:	429a      	cmp	r2, r3
    9174:	d243      	bcs.n	91fe <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9176:	687b      	ldr	r3, [r7, #4]
    9178:	685b      	ldr	r3, [r3, #4]
    917a:	b29a      	uxth	r2, r3
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	689b      	ldr	r3, [r3, #8]
    9180:	b29b      	uxth	r3, r3
    9182:	1ad3      	subs	r3, r2, r3
    9184:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	7cdb      	ldrb	r3, [r3, #19]
    918a:	f003 0320 	and.w	r3, r3, #32
    918e:	b2db      	uxtb	r3, r3
    9190:	2b00      	cmp	r3, #0
    9192:	d01b      	beq.n	91cc <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9194:	687b      	ldr	r3, [r7, #4]
    9196:	8a1b      	ldrh	r3, [r3, #16]
    9198:	8bfa      	ldrh	r2, [r7, #30]
    919a:	429a      	cmp	r2, r3
    919c:	d902      	bls.n	91a4 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    919e:	687b      	ldr	r3, [r7, #4]
    91a0:	8a1b      	ldrh	r3, [r3, #16]
    91a2:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    91a4:	687b      	ldr	r3, [r7, #4]
    91a6:	68d8      	ldr	r0, [r3, #12]
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	681a      	ldr	r2, [r3, #0]
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	689b      	ldr	r3, [r3, #8]
    91b0:	4413      	add	r3, r2
    91b2:	8bfa      	ldrh	r2, [r7, #30]
    91b4:	4619      	mov	r1, r3
    91b6:	4b44      	ldr	r3, [pc, #272]	; (92c8 <_usb_d_dev_in_next+0x1f8>)
    91b8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    91ba:	687b      	ldr	r3, [r7, #4]
    91bc:	68db      	ldr	r3, [r3, #12]
    91be:	461a      	mov	r2, r3
    91c0:	7dfb      	ldrb	r3, [r7, #23]
    91c2:	2101      	movs	r1, #1
    91c4:	4618      	mov	r0, r3
    91c6:	4b41      	ldr	r3, [pc, #260]	; (92cc <_usb_d_dev_in_next+0x1fc>)
    91c8:	4798      	blx	r3
    91ca:	e011      	b.n	91f0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    91cc:	8bfb      	ldrh	r3, [r7, #30]
    91ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    91d2:	d902      	bls.n	91da <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    91d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    91d8:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    91da:	687b      	ldr	r3, [r7, #4]
    91dc:	681a      	ldr	r2, [r3, #0]
    91de:	687b      	ldr	r3, [r7, #4]
    91e0:	689b      	ldr	r3, [r3, #8]
    91e2:	4413      	add	r3, r2
    91e4:	461a      	mov	r2, r3
    91e6:	7dfb      	ldrb	r3, [r7, #23]
    91e8:	2101      	movs	r1, #1
    91ea:	4618      	mov	r0, r3
    91ec:	4b37      	ldr	r3, [pc, #220]	; (92cc <_usb_d_dev_in_next+0x1fc>)
    91ee:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    91f0:	8bfa      	ldrh	r2, [r7, #30]
    91f2:	7df8      	ldrb	r0, [r7, #23]
    91f4:	2300      	movs	r3, #0
    91f6:	2101      	movs	r1, #1
    91f8:	4c35      	ldr	r4, [pc, #212]	; (92d0 <_usb_d_dev_in_next+0x200>)
    91fa:	47a0      	blx	r4
		goto _in_tx_exec;
    91fc:	e041      	b.n	9282 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    91fe:	687b      	ldr	r3, [r7, #4]
    9200:	7cdb      	ldrb	r3, [r3, #19]
    9202:	f003 0310 	and.w	r3, r3, #16
    9206:	b2db      	uxtb	r3, r3
    9208:	2b00      	cmp	r3, #0
    920a:	d00b      	beq.n	9224 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    920c:	687a      	ldr	r2, [r7, #4]
    920e:	7cd3      	ldrb	r3, [r2, #19]
    9210:	f36f 1304 	bfc	r3, #4, #1
    9214:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9216:	7df8      	ldrb	r0, [r7, #23]
    9218:	2300      	movs	r3, #0
    921a:	2200      	movs	r2, #0
    921c:	2101      	movs	r1, #1
    921e:	4c2c      	ldr	r4, [pc, #176]	; (92d0 <_usb_d_dev_in_next+0x200>)
    9220:	47a0      	blx	r4
		goto _in_tx_exec;
    9222:	e02e      	b.n	9282 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9224:	7afb      	ldrb	r3, [r7, #11]
    9226:	2b00      	cmp	r3, #0
    9228:	d006      	beq.n	9238 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    922a:	7dfb      	ldrb	r3, [r7, #23]
    922c:	224b      	movs	r2, #75	; 0x4b
    922e:	4619      	mov	r1, r3
    9230:	69b8      	ldr	r0, [r7, #24]
    9232:	4b28      	ldr	r3, [pc, #160]	; (92d4 <_usb_d_dev_in_next+0x204>)
    9234:	4798      	blx	r3
    9236:	e005      	b.n	9244 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9238:	7dfb      	ldrb	r3, [r7, #23]
    923a:	224a      	movs	r2, #74	; 0x4a
    923c:	4619      	mov	r1, r3
    923e:	69b8      	ldr	r0, [r7, #24]
    9240:	4b24      	ldr	r3, [pc, #144]	; (92d4 <_usb_d_dev_in_next+0x204>)
    9242:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	8a1b      	ldrh	r3, [r3, #16]
    9248:	89ba      	ldrh	r2, [r7, #12]
    924a:	429a      	cmp	r2, r3
    924c:	d114      	bne.n	9278 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    924e:	687a      	ldr	r2, [r7, #4]
    9250:	7cd3      	ldrb	r3, [r2, #19]
    9252:	f36f 1386 	bfc	r3, #6, #1
    9256:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9258:	4b1f      	ldr	r3, [pc, #124]	; (92d8 <_usb_d_dev_in_next+0x208>)
    925a:	68db      	ldr	r3, [r3, #12]
    925c:	687a      	ldr	r2, [r7, #4]
    925e:	7c90      	ldrb	r0, [r2, #18]
    9260:	687a      	ldr	r2, [r7, #4]
    9262:	6892      	ldr	r2, [r2, #8]
    9264:	4611      	mov	r1, r2
    9266:	4798      	blx	r3
    9268:	4603      	mov	r3, r0
    926a:	2b00      	cmp	r3, #0
    926c:	d124      	bne.n	92b8 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    926e:	687a      	ldr	r2, [r7, #4]
    9270:	7cd3      	ldrb	r3, [r2, #19]
    9272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9276:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9278:	2100      	movs	r1, #0
    927a:	6878      	ldr	r0, [r7, #4]
    927c:	4b17      	ldr	r3, [pc, #92]	; (92dc <_usb_d_dev_in_next+0x20c>)
    927e:	4798      	blx	r3
	return;
    9280:	e01b      	b.n	92ba <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9282:	78fb      	ldrb	r3, [r7, #3]
    9284:	f083 0301 	eor.w	r3, r3, #1
    9288:	b2db      	uxtb	r3, r3
    928a:	2b00      	cmp	r3, #0
    928c:	d00d      	beq.n	92aa <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    928e:	7afb      	ldrb	r3, [r7, #11]
    9290:	2b00      	cmp	r3, #0
    9292:	d002      	beq.n	929a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9294:	234e      	movs	r3, #78	; 0x4e
    9296:	777b      	strb	r3, [r7, #29]
    9298:	e001      	b.n	929e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    929a:	234a      	movs	r3, #74	; 0x4a
    929c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    929e:	7f7a      	ldrb	r2, [r7, #29]
    92a0:	7dfb      	ldrb	r3, [r7, #23]
    92a2:	4619      	mov	r1, r3
    92a4:	69b8      	ldr	r0, [r7, #24]
    92a6:	4b0e      	ldr	r3, [pc, #56]	; (92e0 <_usb_d_dev_in_next+0x210>)
    92a8:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    92aa:	7dfb      	ldrb	r3, [r7, #23]
    92ac:	2201      	movs	r2, #1
    92ae:	2101      	movs	r1, #1
    92b0:	4618      	mov	r0, r3
    92b2:	4b0c      	ldr	r3, [pc, #48]	; (92e4 <_usb_d_dev_in_next+0x214>)
    92b4:	4798      	blx	r3
    92b6:	e000      	b.n	92ba <_usb_d_dev_in_next+0x1ea>
			return;
    92b8:	bf00      	nop
}
    92ba:	3724      	adds	r7, #36	; 0x24
    92bc:	46bd      	mov	sp, r7
    92be:	bd90      	pop	{r4, r7, pc}
    92c0:	20000d18 	.word	0x20000d18
    92c4:	00008ac9 	.word	0x00008ac9
    92c8:	0000e939 	.word	0x0000e939
    92cc:	00008af5 	.word	0x00008af5
    92d0:	00008c3d 	.word	0x00008c3d
    92d4:	000083d5 	.word	0x000083d5
    92d8:	20000c50 	.word	0x20000c50
    92dc:	0000a3f9 	.word	0x0000a3f9
    92e0:	000083a9 	.word	0x000083a9
    92e4:	00008cf5 	.word	0x00008cf5

000092e8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    92e8:	b590      	push	{r4, r7, lr}
    92ea:	b08b      	sub	sp, #44	; 0x2c
    92ec:	af00      	add	r7, sp, #0
    92ee:	6078      	str	r0, [r7, #4]
    92f0:	460b      	mov	r3, r1
    92f2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    92f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    92f8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    92fa:	687b      	ldr	r3, [r7, #4]
    92fc:	7c9b      	ldrb	r3, [r3, #18]
    92fe:	f003 030f 	and.w	r3, r3, #15
    9302:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9304:	7ffb      	ldrb	r3, [r7, #31]
    9306:	015b      	lsls	r3, r3, #5
    9308:	4a94      	ldr	r2, [pc, #592]	; (955c <_usb_d_dev_out_next+0x274>)
    930a:	4413      	add	r3, r2
    930c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    930e:	78fb      	ldrb	r3, [r7, #3]
    9310:	2b00      	cmp	r3, #0
    9312:	d005      	beq.n	9320 <_usb_d_dev_out_next+0x38>
    9314:	69bb      	ldr	r3, [r7, #24]
    9316:	685b      	ldr	r3, [r3, #4]
    9318:	f3c3 338d 	ubfx	r3, r3, #14, #14
    931c:	b29b      	uxth	r3, r3
    931e:	e000      	b.n	9322 <_usb_d_dev_out_next+0x3a>
    9320:	2300      	movs	r3, #0
    9322:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9324:	78fb      	ldrb	r3, [r7, #3]
    9326:	2b00      	cmp	r3, #0
    9328:	d005      	beq.n	9336 <_usb_d_dev_out_next+0x4e>
    932a:	69bb      	ldr	r3, [r7, #24]
    932c:	685b      	ldr	r3, [r3, #4]
    932e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9332:	b29b      	uxth	r3, r3
    9334:	e000      	b.n	9338 <_usb_d_dev_out_next+0x50>
    9336:	2300      	movs	r3, #0
    9338:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	8a1b      	ldrh	r3, [r3, #16]
    933e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9342:	4293      	cmp	r3, r2
    9344:	d004      	beq.n	9350 <_usb_d_dev_out_next+0x68>
    9346:	687b      	ldr	r3, [r7, #4]
    9348:	8a1b      	ldrh	r3, [r3, #16]
    934a:	3b01      	subs	r3, #1
    934c:	b29b      	uxth	r3, r3
    934e:	e001      	b.n	9354 <_usb_d_dev_out_next+0x6c>
    9350:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9354:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9356:	8aba      	ldrh	r2, [r7, #20]
    9358:	8a7b      	ldrh	r3, [r7, #18]
    935a:	4013      	ands	r3, r2
    935c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	7cdb      	ldrb	r3, [r3, #19]
    9362:	f003 0307 	and.w	r3, r3, #7
    9366:	b2db      	uxtb	r3, r3
    9368:	2b01      	cmp	r3, #1
    936a:	bf0c      	ite	eq
    936c:	2301      	moveq	r3, #1
    936e:	2300      	movne	r3, #0
    9370:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9372:	78fb      	ldrb	r3, [r7, #3]
    9374:	2b00      	cmp	r3, #0
    9376:	d004      	beq.n	9382 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9378:	7ffb      	ldrb	r3, [r7, #31]
    937a:	2100      	movs	r1, #0
    937c:	4618      	mov	r0, r3
    937e:	4b78      	ldr	r3, [pc, #480]	; (9560 <_usb_d_dev_out_next+0x278>)
    9380:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	7cdb      	ldrb	r3, [r3, #19]
    9386:	f003 0320 	and.w	r3, r3, #32
    938a:	b2db      	uxtb	r3, r3
    938c:	2b00      	cmp	r3, #0
    938e:	d01c      	beq.n	93ca <_usb_d_dev_out_next+0xe2>
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	685b      	ldr	r3, [r3, #4]
    9394:	2b00      	cmp	r3, #0
    9396:	d018      	beq.n	93ca <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9398:	687b      	ldr	r3, [r7, #4]
    939a:	685b      	ldr	r3, [r3, #4]
    939c:	b29a      	uxth	r2, r3
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	689b      	ldr	r3, [r3, #8]
    93a2:	b29b      	uxth	r3, r3
    93a4:	1ad3      	subs	r3, r2, r3
    93a6:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    93a8:	687b      	ldr	r3, [r7, #4]
    93aa:	681a      	ldr	r2, [r3, #0]
    93ac:	687b      	ldr	r3, [r7, #4]
    93ae:	689b      	ldr	r3, [r3, #8]
    93b0:	18d0      	adds	r0, r2, r3
    93b2:	687b      	ldr	r3, [r7, #4]
    93b4:	68d9      	ldr	r1, [r3, #12]
    93b6:	89ba      	ldrh	r2, [r7, #12]
    93b8:	8a3b      	ldrh	r3, [r7, #16]
    93ba:	429a      	cmp	r2, r3
    93bc:	d901      	bls.n	93c2 <_usb_d_dev_out_next+0xda>
    93be:	8a3b      	ldrh	r3, [r7, #16]
    93c0:	e000      	b.n	93c4 <_usb_d_dev_out_next+0xdc>
    93c2:	89bb      	ldrh	r3, [r7, #12]
    93c4:	461a      	mov	r2, r3
    93c6:	4b67      	ldr	r3, [pc, #412]	; (9564 <_usb_d_dev_out_next+0x27c>)
    93c8:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	685b      	ldr	r3, [r3, #4]
    93ce:	2b00      	cmp	r3, #0
    93d0:	d121      	bne.n	9416 <_usb_d_dev_out_next+0x12e>
    93d2:	687b      	ldr	r3, [r7, #4]
    93d4:	7cdb      	ldrb	r3, [r3, #19]
    93d6:	f003 0310 	and.w	r3, r3, #16
    93da:	b2db      	uxtb	r3, r3
    93dc:	2b00      	cmp	r3, #0
    93de:	d01a      	beq.n	9416 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    93e0:	687a      	ldr	r2, [r7, #4]
    93e2:	7cd3      	ldrb	r3, [r2, #19]
    93e4:	f36f 1304 	bfc	r3, #4, #1
    93e8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    93ea:	687a      	ldr	r2, [r7, #4]
    93ec:	7cd3      	ldrb	r3, [r2, #19]
    93ee:	f043 0320 	orr.w	r3, r3, #32
    93f2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    93f4:	687b      	ldr	r3, [r7, #4]
    93f6:	68db      	ldr	r3, [r3, #12]
    93f8:	461a      	mov	r2, r3
    93fa:	7ffb      	ldrb	r3, [r7, #31]
    93fc:	2100      	movs	r1, #0
    93fe:	4618      	mov	r0, r3
    9400:	4b59      	ldr	r3, [pc, #356]	; (9568 <_usb_d_dev_out_next+0x280>)
    9402:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9404:	687b      	ldr	r3, [r7, #4]
    9406:	8a1b      	ldrh	r3, [r3, #16]
    9408:	461a      	mov	r2, r3
    940a:	7ff8      	ldrb	r0, [r7, #31]
    940c:	2300      	movs	r3, #0
    940e:	2100      	movs	r1, #0
    9410:	4c56      	ldr	r4, [pc, #344]	; (956c <_usb_d_dev_out_next+0x284>)
    9412:	47a0      	blx	r4
		goto _out_rx_exec;
    9414:	e090      	b.n	9538 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9416:	78fb      	ldrb	r3, [r7, #3]
    9418:	2b00      	cmp	r3, #0
    941a:	d010      	beq.n	943e <_usb_d_dev_out_next+0x156>
    941c:	687b      	ldr	r3, [r7, #4]
    941e:	8a1b      	ldrh	r3, [r3, #16]
    9420:	8a3a      	ldrh	r2, [r7, #16]
    9422:	429a      	cmp	r2, r3
    9424:	d20b      	bcs.n	943e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9426:	687a      	ldr	r2, [r7, #4]
    9428:	7cd3      	ldrb	r3, [r2, #19]
    942a:	f36f 1304 	bfc	r3, #4, #1
    942e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9430:	687b      	ldr	r3, [r7, #4]
    9432:	689a      	ldr	r2, [r3, #8]
    9434:	8abb      	ldrh	r3, [r7, #20]
    9436:	441a      	add	r2, r3
    9438:	687b      	ldr	r3, [r7, #4]
    943a:	609a      	str	r2, [r3, #8]
    943c:	e05c      	b.n	94f8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    943e:	687b      	ldr	r3, [r7, #4]
    9440:	689a      	ldr	r2, [r3, #8]
    9442:	8afb      	ldrh	r3, [r7, #22]
    9444:	441a      	add	r2, r3
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    944a:	687b      	ldr	r3, [r7, #4]
    944c:	689a      	ldr	r2, [r3, #8]
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	685b      	ldr	r3, [r3, #4]
    9452:	429a      	cmp	r2, r3
    9454:	d250      	bcs.n	94f8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9456:	687b      	ldr	r3, [r7, #4]
    9458:	685b      	ldr	r3, [r3, #4]
    945a:	b29a      	uxth	r2, r3
    945c:	687b      	ldr	r3, [r7, #4]
    945e:	689b      	ldr	r3, [r3, #8]
    9460:	b29b      	uxth	r3, r3
    9462:	1ad3      	subs	r3, r2, r3
    9464:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9466:	687b      	ldr	r3, [r7, #4]
    9468:	7cdb      	ldrb	r3, [r3, #19]
    946a:	f003 0320 	and.w	r3, r3, #32
    946e:	b2db      	uxtb	r3, r3
    9470:	2b00      	cmp	r3, #0
    9472:	d010      	beq.n	9496 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9474:	687b      	ldr	r3, [r7, #4]
    9476:	8a1b      	ldrh	r3, [r3, #16]
    9478:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    947a:	429a      	cmp	r2, r3
    947c:	d902      	bls.n	9484 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    947e:	687b      	ldr	r3, [r7, #4]
    9480:	8a1b      	ldrh	r3, [r3, #16]
    9482:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9484:	687b      	ldr	r3, [r7, #4]
    9486:	68db      	ldr	r3, [r3, #12]
    9488:	461a      	mov	r2, r3
    948a:	7ffb      	ldrb	r3, [r7, #31]
    948c:	2100      	movs	r1, #0
    948e:	4618      	mov	r0, r3
    9490:	4b35      	ldr	r3, [pc, #212]	; (9568 <_usb_d_dev_out_next+0x280>)
    9492:	4798      	blx	r3
    9494:	e029      	b.n	94ea <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9496:	687b      	ldr	r3, [r7, #4]
    9498:	8a1b      	ldrh	r3, [r3, #16]
    949a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    949c:	429a      	cmp	r2, r3
    949e:	d90f      	bls.n	94c0 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    94a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    94a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    94a6:	d903      	bls.n	94b0 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    94a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    94ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    94ae:	e011      	b.n	94d4 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    94b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    94b2:	8a7b      	ldrh	r3, [r7, #18]
    94b4:	4013      	ands	r3, r2
    94b6:	b29b      	uxth	r3, r3
    94b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    94ba:	1ad3      	subs	r3, r2, r3
    94bc:	84fb      	strh	r3, [r7, #38]	; 0x26
    94be:	e009      	b.n	94d4 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    94c0:	687b      	ldr	r3, [r7, #4]
    94c2:	8a1b      	ldrh	r3, [r3, #16]
    94c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    94c6:	429a      	cmp	r2, r3
    94c8:	d204      	bcs.n	94d4 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    94ca:	687a      	ldr	r2, [r7, #4]
    94cc:	7cd3      	ldrb	r3, [r2, #19]
    94ce:	f043 0320 	orr.w	r3, r3, #32
    94d2:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    94d4:	687b      	ldr	r3, [r7, #4]
    94d6:	681a      	ldr	r2, [r3, #0]
    94d8:	687b      	ldr	r3, [r7, #4]
    94da:	689b      	ldr	r3, [r3, #8]
    94dc:	4413      	add	r3, r2
    94de:	461a      	mov	r2, r3
    94e0:	7ffb      	ldrb	r3, [r7, #31]
    94e2:	2100      	movs	r1, #0
    94e4:	4618      	mov	r0, r3
    94e6:	4b20      	ldr	r3, [pc, #128]	; (9568 <_usb_d_dev_out_next+0x280>)
    94e8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    94ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    94ec:	7ff8      	ldrb	r0, [r7, #31]
    94ee:	2300      	movs	r3, #0
    94f0:	2100      	movs	r1, #0
    94f2:	4c1e      	ldr	r4, [pc, #120]	; (956c <_usb_d_dev_out_next+0x284>)
    94f4:	47a0      	blx	r4
			goto _out_rx_exec;
    94f6:	e01f      	b.n	9538 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    94f8:	7bfb      	ldrb	r3, [r7, #15]
    94fa:	2b00      	cmp	r3, #0
    94fc:	d006      	beq.n	950c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    94fe:	7ffb      	ldrb	r3, [r7, #31]
    9500:	222d      	movs	r2, #45	; 0x2d
    9502:	4619      	mov	r1, r3
    9504:	6a38      	ldr	r0, [r7, #32]
    9506:	4b1a      	ldr	r3, [pc, #104]	; (9570 <_usb_d_dev_out_next+0x288>)
    9508:	4798      	blx	r3
    950a:	e005      	b.n	9518 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    950c:	7ffb      	ldrb	r3, [r7, #31]
    950e:	2225      	movs	r2, #37	; 0x25
    9510:	4619      	mov	r1, r3
    9512:	6a38      	ldr	r0, [r7, #32]
    9514:	4b16      	ldr	r3, [pc, #88]	; (9570 <_usb_d_dev_out_next+0x288>)
    9516:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9518:	7ffb      	ldrb	r3, [r7, #31]
    951a:	2b00      	cmp	r3, #0
    951c:	d107      	bne.n	952e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    951e:	687b      	ldr	r3, [r7, #4]
    9520:	68db      	ldr	r3, [r3, #12]
    9522:	461a      	mov	r2, r3
    9524:	7ffb      	ldrb	r3, [r7, #31]
    9526:	2100      	movs	r1, #0
    9528:	4618      	mov	r0, r3
    952a:	4b0f      	ldr	r3, [pc, #60]	; (9568 <_usb_d_dev_out_next+0x280>)
    952c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    952e:	2100      	movs	r1, #0
    9530:	6878      	ldr	r0, [r7, #4]
    9532:	4b10      	ldr	r3, [pc, #64]	; (9574 <_usb_d_dev_out_next+0x28c>)
    9534:	4798      	blx	r3
	return;
    9536:	e031      	b.n	959c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9538:	78fb      	ldrb	r3, [r7, #3]
    953a:	f083 0301 	eor.w	r3, r3, #1
    953e:	b2db      	uxtb	r3, r3
    9540:	2b00      	cmp	r3, #0
    9542:	d025      	beq.n	9590 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9544:	7bfb      	ldrb	r3, [r7, #15]
    9546:	2b00      	cmp	r3, #0
    9548:	d018      	beq.n	957c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    954a:	7ffb      	ldrb	r3, [r7, #31]
    954c:	2101      	movs	r1, #1
    954e:	4618      	mov	r0, r3
    9550:	4b09      	ldr	r3, [pc, #36]	; (9578 <_usb_d_dev_out_next+0x290>)
    9552:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9554:	232d      	movs	r3, #45	; 0x2d
    9556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    955a:	e012      	b.n	9582 <_usb_d_dev_out_next+0x29a>
    955c:	20000d18 	.word	0x20000d18
    9560:	00008ac9 	.word	0x00008ac9
    9564:	0000e939 	.word	0x0000e939
    9568:	00008af5 	.word	0x00008af5
    956c:	00008c7d 	.word	0x00008c7d
    9570:	000083d5 	.word	0x000083d5
    9574:	0000a3f9 	.word	0x0000a3f9
    9578:	00008cbd 	.word	0x00008cbd
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    957c:	2325      	movs	r3, #37	; 0x25
    957e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9582:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9586:	7ffb      	ldrb	r3, [r7, #31]
    9588:	4619      	mov	r1, r3
    958a:	6a38      	ldr	r0, [r7, #32]
    958c:	4b05      	ldr	r3, [pc, #20]	; (95a4 <_usb_d_dev_out_next+0x2bc>)
    958e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9590:	7ffb      	ldrb	r3, [r7, #31]
    9592:	2201      	movs	r2, #1
    9594:	2100      	movs	r1, #0
    9596:	4618      	mov	r0, r3
    9598:	4b03      	ldr	r3, [pc, #12]	; (95a8 <_usb_d_dev_out_next+0x2c0>)
    959a:	4798      	blx	r3
}
    959c:	372c      	adds	r7, #44	; 0x2c
    959e:	46bd      	mov	sp, r7
    95a0:	bd90      	pop	{r4, r7, pc}
    95a2:	bf00      	nop
    95a4:	000083a9 	.word	0x000083a9
    95a8:	00008d4d 	.word	0x00008d4d

000095ac <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    95ac:	b580      	push	{r7, lr}
    95ae:	b084      	sub	sp, #16
    95b0:	af00      	add	r7, sp, #0
    95b2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	7c9b      	ldrb	r3, [r3, #18]
    95b8:	f003 030f 	and.w	r3, r3, #15
    95bc:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    95be:	687b      	ldr	r3, [r7, #4]
    95c0:	7cdb      	ldrb	r3, [r3, #19]
    95c2:	f003 0307 	and.w	r3, r3, #7
    95c6:	b2db      	uxtb	r3, r3
    95c8:	2b01      	cmp	r3, #1
    95ca:	bf0c      	ite	eq
    95cc:	2301      	moveq	r3, #1
    95ce:	2300      	movne	r3, #0
    95d0:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    95d2:	7bbb      	ldrb	r3, [r7, #14]
    95d4:	f083 0301 	eor.w	r3, r3, #1
    95d8:	b2db      	uxtb	r3, r3
    95da:	2b00      	cmp	r3, #0
    95dc:	d008      	beq.n	95f0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    95de:	7bfb      	ldrb	r3, [r7, #15]
    95e0:	4618      	mov	r0, r3
    95e2:	4b20      	ldr	r3, [pc, #128]	; (9664 <_usb_d_dev_handle_setup+0xb8>)
    95e4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    95e6:	7bfb      	ldrb	r3, [r7, #15]
    95e8:	4618      	mov	r0, r3
    95ea:	4b1f      	ldr	r3, [pc, #124]	; (9668 <_usb_d_dev_handle_setup+0xbc>)
    95ec:	4798      	blx	r3
		return;
    95ee:	e036      	b.n	965e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    95f0:	687b      	ldr	r3, [r7, #4]
    95f2:	7cdb      	ldrb	r3, [r3, #19]
    95f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    95f8:	b2db      	uxtb	r3, r3
    95fa:	2b00      	cmp	r3, #0
    95fc:	d010      	beq.n	9620 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    95fe:	687a      	ldr	r2, [r7, #4]
    9600:	7cd3      	ldrb	r3, [r2, #19]
    9602:	f36f 1386 	bfc	r3, #6, #1
    9606:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9608:	7bfb      	ldrb	r3, [r7, #15]
    960a:	2200      	movs	r2, #0
    960c:	2101      	movs	r1, #1
    960e:	4618      	mov	r0, r3
    9610:	4b16      	ldr	r3, [pc, #88]	; (966c <_usb_d_dev_handle_setup+0xc0>)
    9612:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9614:	7bfb      	ldrb	r3, [r7, #15]
    9616:	2200      	movs	r2, #0
    9618:	2100      	movs	r1, #0
    961a:	4618      	mov	r0, r3
    961c:	4b14      	ldr	r3, [pc, #80]	; (9670 <_usb_d_dev_handle_setup+0xc4>)
    961e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9620:	687a      	ldr	r2, [r7, #4]
    9622:	7cd3      	ldrb	r3, [r2, #19]
    9624:	f36f 03c3 	bfc	r3, #3, #1
    9628:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    962a:	7bfb      	ldrb	r3, [r7, #15]
    962c:	2100      	movs	r1, #0
    962e:	4618      	mov	r0, r3
    9630:	4b10      	ldr	r3, [pc, #64]	; (9674 <_usb_d_dev_handle_setup+0xc8>)
    9632:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9634:	7bfb      	ldrb	r3, [r7, #15]
    9636:	2101      	movs	r1, #1
    9638:	4618      	mov	r0, r3
    963a:	4b0e      	ldr	r3, [pc, #56]	; (9674 <_usb_d_dev_handle_setup+0xc8>)
    963c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    963e:	7bfb      	ldrb	r3, [r7, #15]
    9640:	216f      	movs	r1, #111	; 0x6f
    9642:	4618      	mov	r0, r3
    9644:	4b0c      	ldr	r3, [pc, #48]	; (9678 <_usb_d_dev_handle_setup+0xcc>)
    9646:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9648:	7bfb      	ldrb	r3, [r7, #15]
    964a:	216f      	movs	r1, #111	; 0x6f
    964c:	4618      	mov	r0, r3
    964e:	4b0b      	ldr	r3, [pc, #44]	; (967c <_usb_d_dev_handle_setup+0xd0>)
    9650:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9652:	4b0b      	ldr	r3, [pc, #44]	; (9680 <_usb_d_dev_handle_setup+0xd4>)
    9654:	689b      	ldr	r3, [r3, #8]
    9656:	687a      	ldr	r2, [r7, #4]
    9658:	7c92      	ldrb	r2, [r2, #18]
    965a:	4610      	mov	r0, r2
    965c:	4798      	blx	r3
}
    965e:	3710      	adds	r7, #16
    9660:	46bd      	mov	sp, r7
    9662:	bd80      	pop	{r7, pc}
    9664:	00008a51 	.word	0x00008a51
    9668:	000089fd 	.word	0x000089fd
    966c:	00008cf5 	.word	0x00008cf5
    9670:	00008d4d 	.word	0x00008d4d
    9674:	00008cbd 	.word	0x00008cbd
    9678:	000087fd 	.word	0x000087fd
    967c:	0000884d 	.word	0x0000884d
    9680:	20000c50 	.word	0x20000c50

00009684 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9684:	b580      	push	{r7, lr}
    9686:	b084      	sub	sp, #16
    9688:	af00      	add	r7, sp, #0
    968a:	6078      	str	r0, [r7, #4]
    968c:	460b      	mov	r3, r1
    968e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	7c9b      	ldrb	r3, [r3, #18]
    9694:	f003 030f 	and.w	r3, r3, #15
    9698:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    969a:	78f9      	ldrb	r1, [r7, #3]
    969c:	7bfb      	ldrb	r3, [r7, #15]
    969e:	2200      	movs	r2, #0
    96a0:	4618      	mov	r0, r3
    96a2:	4b07      	ldr	r3, [pc, #28]	; (96c0 <_usb_d_dev_handle_stall+0x3c>)
    96a4:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    96a6:	4b07      	ldr	r3, [pc, #28]	; (96c4 <_usb_d_dev_handle_stall+0x40>)
    96a8:	691b      	ldr	r3, [r3, #16]
    96aa:	687a      	ldr	r2, [r7, #4]
    96ac:	7c90      	ldrb	r0, [r2, #18]
    96ae:	687a      	ldr	r2, [r7, #4]
    96b0:	6892      	ldr	r2, [r2, #8]
    96b2:	2101      	movs	r1, #1
    96b4:	4798      	blx	r3
}
    96b6:	bf00      	nop
    96b8:	3710      	adds	r7, #16
    96ba:	46bd      	mov	sp, r7
    96bc:	bd80      	pop	{r7, pc}
    96be:	bf00      	nop
    96c0:	000089b1 	.word	0x000089b1
    96c4:	20000c50 	.word	0x20000c50

000096c8 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    96c8:	b580      	push	{r7, lr}
    96ca:	b088      	sub	sp, #32
    96cc:	af00      	add	r7, sp, #0
    96ce:	6078      	str	r0, [r7, #4]
    96d0:	460b      	mov	r3, r1
    96d2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    96d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96d8:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	7c9b      	ldrb	r3, [r3, #18]
    96de:	f003 030f 	and.w	r3, r3, #15
    96e2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    96e4:	4b61      	ldr	r3, [pc, #388]	; (986c <_usb_d_dev_handle_trfail+0x1a4>)
    96e6:	881b      	ldrh	r3, [r3, #0]
    96e8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    96ea:	7efb      	ldrb	r3, [r7, #27]
    96ec:	015b      	lsls	r3, r3, #5
    96ee:	4a60      	ldr	r2, [pc, #384]	; (9870 <_usb_d_dev_handle_trfail+0x1a8>)
    96f0:	4413      	add	r3, r2
    96f2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    96f4:	78fb      	ldrb	r3, [r7, #3]
    96f6:	2b00      	cmp	r3, #0
    96f8:	d006      	beq.n	9708 <_usb_d_dev_handle_trfail+0x40>
    96fa:	7efb      	ldrb	r3, [r7, #27]
    96fc:	4619      	mov	r1, r3
    96fe:	69f8      	ldr	r0, [r7, #28]
    9700:	4b5c      	ldr	r3, [pc, #368]	; (9874 <_usb_d_dev_handle_trfail+0x1ac>)
    9702:	4798      	blx	r3
    9704:	4603      	mov	r3, r0
    9706:	e005      	b.n	9714 <_usb_d_dev_handle_trfail+0x4c>
    9708:	7efb      	ldrb	r3, [r7, #27]
    970a:	4619      	mov	r1, r3
    970c:	69f8      	ldr	r0, [r7, #28]
    970e:	4b5a      	ldr	r3, [pc, #360]	; (9878 <_usb_d_dev_handle_trfail+0x1b0>)
    9710:	4798      	blx	r3
    9712:	4603      	mov	r3, r0
    9714:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	7cdb      	ldrb	r3, [r3, #19]
    971a:	f003 0307 	and.w	r3, r3, #7
    971e:	b2db      	uxtb	r3, r3
    9720:	2b01      	cmp	r3, #1
    9722:	bf0c      	ite	eq
    9724:	2301      	moveq	r3, #1
    9726:	2300      	movne	r3, #0
    9728:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    972a:	78fb      	ldrb	r3, [r7, #3]
    972c:	011b      	lsls	r3, r3, #4
    972e:	697a      	ldr	r2, [r7, #20]
    9730:	4413      	add	r3, r2
    9732:	7a9b      	ldrb	r3, [r3, #10]
    9734:	b2db      	uxtb	r3, r3
    9736:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9738:	7cfb      	ldrb	r3, [r7, #19]
    973a:	2b02      	cmp	r3, #2
    973c:	d12f      	bne.n	979e <_usb_d_dev_handle_trfail+0xd6>
    973e:	7b3b      	ldrb	r3, [r7, #12]
    9740:	f003 0301 	and.w	r3, r3, #1
    9744:	b2db      	uxtb	r3, r3
    9746:	2b00      	cmp	r3, #0
    9748:	d029      	beq.n	979e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    974a:	78fb      	ldrb	r3, [r7, #3]
    974c:	011b      	lsls	r3, r3, #4
    974e:	697a      	ldr	r2, [r7, #20]
    9750:	441a      	add	r2, r3
    9752:	7a93      	ldrb	r3, [r2, #10]
    9754:	f36f 0300 	bfc	r3, #0, #1
    9758:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    975a:	78fb      	ldrb	r3, [r7, #3]
    975c:	f107 0220 	add.w	r2, r7, #32
    9760:	4413      	add	r3, r2
    9762:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9766:	7efb      	ldrb	r3, [r7, #27]
    9768:	4619      	mov	r1, r3
    976a:	69f8      	ldr	r0, [r7, #28]
    976c:	4b43      	ldr	r3, [pc, #268]	; (987c <_usb_d_dev_handle_trfail+0x1b4>)
    976e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9770:	78fb      	ldrb	r3, [r7, #3]
    9772:	f107 0220 	add.w	r2, r7, #32
    9776:	4413      	add	r3, r2
    9778:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    977c:	7efb      	ldrb	r3, [r7, #27]
    977e:	4619      	mov	r1, r3
    9780:	69f8      	ldr	r0, [r7, #28]
    9782:	4b3f      	ldr	r3, [pc, #252]	; (9880 <_usb_d_dev_handle_trfail+0x1b8>)
    9784:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9786:	78fb      	ldrb	r3, [r7, #3]
    9788:	2b00      	cmp	r3, #0
    978a:	bf14      	ite	ne
    978c:	2301      	movne	r3, #1
    978e:	2300      	moveq	r3, #0
    9790:	b2db      	uxtb	r3, r3
    9792:	2204      	movs	r2, #4
    9794:	4619      	mov	r1, r3
    9796:	6878      	ldr	r0, [r7, #4]
    9798:	4b3a      	ldr	r3, [pc, #232]	; (9884 <_usb_d_dev_handle_trfail+0x1bc>)
    979a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    979c:	e062      	b.n	9864 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    979e:	7b3b      	ldrb	r3, [r7, #12]
    97a0:	f003 0302 	and.w	r3, r3, #2
    97a4:	b2db      	uxtb	r3, r3
    97a6:	2b00      	cmp	r3, #0
    97a8:	d040      	beq.n	982c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    97aa:	78fb      	ldrb	r3, [r7, #3]
    97ac:	011b      	lsls	r3, r3, #4
    97ae:	697a      	ldr	r2, [r7, #20]
    97b0:	441a      	add	r2, r3
    97b2:	7a93      	ldrb	r3, [r2, #10]
    97b4:	f36f 0341 	bfc	r3, #1, #1
    97b8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    97ba:	78fb      	ldrb	r3, [r7, #3]
    97bc:	f107 0220 	add.w	r2, r7, #32
    97c0:	4413      	add	r3, r2
    97c2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    97c6:	7efb      	ldrb	r3, [r7, #27]
    97c8:	4619      	mov	r1, r3
    97ca:	69f8      	ldr	r0, [r7, #28]
    97cc:	4b2b      	ldr	r3, [pc, #172]	; (987c <_usb_d_dev_handle_trfail+0x1b4>)
    97ce:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    97d0:	78fb      	ldrb	r3, [r7, #3]
    97d2:	f107 0220 	add.w	r2, r7, #32
    97d6:	4413      	add	r3, r2
    97d8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    97dc:	7efb      	ldrb	r3, [r7, #27]
    97de:	4619      	mov	r1, r3
    97e0:	69f8      	ldr	r0, [r7, #28]
    97e2:	4b27      	ldr	r3, [pc, #156]	; (9880 <_usb_d_dev_handle_trfail+0x1b8>)
    97e4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    97e6:	7cbb      	ldrb	r3, [r7, #18]
    97e8:	2b00      	cmp	r3, #0
    97ea:	d03b      	beq.n	9864 <_usb_d_dev_handle_trfail+0x19c>
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	7cdb      	ldrb	r3, [r3, #19]
    97f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    97f4:	b2db      	uxtb	r3, r3
    97f6:	2b00      	cmp	r3, #0
    97f8:	d034      	beq.n	9864 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    97fa:	687b      	ldr	r3, [r7, #4]
    97fc:	7cdb      	ldrb	r3, [r3, #19]
    97fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9802:	b2db      	uxtb	r3, r3
    9804:	461a      	mov	r2, r3
    9806:	78fb      	ldrb	r3, [r7, #3]
    9808:	4293      	cmp	r3, r2
    980a:	d02b      	beq.n	9864 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    980c:	687b      	ldr	r3, [r7, #4]
    980e:	7cdb      	ldrb	r3, [r3, #19]
    9810:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9814:	b2db      	uxtb	r3, r3
    9816:	2b00      	cmp	r3, #0
    9818:	bf14      	ite	ne
    981a:	2301      	movne	r3, #1
    981c:	2300      	moveq	r3, #0
    981e:	b2db      	uxtb	r3, r3
    9820:	2200      	movs	r2, #0
    9822:	4619      	mov	r1, r3
    9824:	6878      	ldr	r0, [r7, #4]
    9826:	4b17      	ldr	r3, [pc, #92]	; (9884 <_usb_d_dev_handle_trfail+0x1bc>)
    9828:	4798      	blx	r3
}
    982a:	e01b      	b.n	9864 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    982c:	78fa      	ldrb	r2, [r7, #3]
    982e:	7efb      	ldrb	r3, [r7, #27]
    9830:	4611      	mov	r1, r2
    9832:	4618      	mov	r0, r3
    9834:	4b14      	ldr	r3, [pc, #80]	; (9888 <_usb_d_dev_handle_trfail+0x1c0>)
    9836:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9838:	78fb      	ldrb	r3, [r7, #3]
    983a:	f107 0220 	add.w	r2, r7, #32
    983e:	4413      	add	r3, r2
    9840:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9844:	7efb      	ldrb	r3, [r7, #27]
    9846:	4619      	mov	r1, r3
    9848:	69f8      	ldr	r0, [r7, #28]
    984a:	4b0c      	ldr	r3, [pc, #48]	; (987c <_usb_d_dev_handle_trfail+0x1b4>)
    984c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    984e:	78fb      	ldrb	r3, [r7, #3]
    9850:	f107 0220 	add.w	r2, r7, #32
    9854:	4413      	add	r3, r2
    9856:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    985a:	7efb      	ldrb	r3, [r7, #27]
    985c:	4619      	mov	r1, r3
    985e:	69f8      	ldr	r0, [r7, #28]
    9860:	4b07      	ldr	r3, [pc, #28]	; (9880 <_usb_d_dev_handle_trfail+0x1b8>)
    9862:	4798      	blx	r3
}
    9864:	bf00      	nop
    9866:	3720      	adds	r7, #32
    9868:	46bd      	mov	sp, r7
    986a:	bd80      	pop	{r7, pc}
    986c:	0000f100 	.word	0x0000f100
    9870:	20000d18 	.word	0x20000d18
    9874:	00008431 	.word	0x00008431
    9878:	00008401 	.word	0x00008401
    987c:	000082d5 	.word	0x000082d5
    9880:	000083d5 	.word	0x000083d5
    9884:	0000a441 	.word	0x0000a441
    9888:	00008cbd 	.word	0x00008cbd

0000988c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    988c:	b580      	push	{r7, lr}
    988e:	b082      	sub	sp, #8
    9890:	af00      	add	r7, sp, #0
    9892:	6078      	str	r0, [r7, #4]
    9894:	460b      	mov	r3, r1
    9896:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9898:	78fb      	ldrb	r3, [r7, #3]
    989a:	f003 0310 	and.w	r3, r3, #16
    989e:	2b00      	cmp	r3, #0
    98a0:	d003      	beq.n	98aa <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    98a2:	6878      	ldr	r0, [r7, #4]
    98a4:	4b0c      	ldr	r3, [pc, #48]	; (98d8 <_usb_d_dev_trans_setup_isr+0x4c>)
    98a6:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    98a8:	e012      	b.n	98d0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    98aa:	78fb      	ldrb	r3, [r7, #3]
    98ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    98b0:	2b00      	cmp	r3, #0
    98b2:	d004      	beq.n	98be <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    98b4:	2101      	movs	r1, #1
    98b6:	6878      	ldr	r0, [r7, #4]
    98b8:	4b08      	ldr	r3, [pc, #32]	; (98dc <_usb_d_dev_trans_setup_isr+0x50>)
    98ba:	4798      	blx	r3
}
    98bc:	e008      	b.n	98d0 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    98be:	78fb      	ldrb	r3, [r7, #3]
    98c0:	f003 0320 	and.w	r3, r3, #32
    98c4:	2b00      	cmp	r3, #0
    98c6:	d003      	beq.n	98d0 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    98c8:	2100      	movs	r1, #0
    98ca:	6878      	ldr	r0, [r7, #4]
    98cc:	4b03      	ldr	r3, [pc, #12]	; (98dc <_usb_d_dev_trans_setup_isr+0x50>)
    98ce:	4798      	blx	r3
}
    98d0:	bf00      	nop
    98d2:	3708      	adds	r7, #8
    98d4:	46bd      	mov	sp, r7
    98d6:	bd80      	pop	{r7, pc}
    98d8:	000095ad 	.word	0x000095ad
    98dc:	00009685 	.word	0x00009685

000098e0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    98e0:	b580      	push	{r7, lr}
    98e2:	b082      	sub	sp, #8
    98e4:	af00      	add	r7, sp, #0
    98e6:	6078      	str	r0, [r7, #4]
    98e8:	460b      	mov	r3, r1
    98ea:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    98ec:	78fb      	ldrb	r3, [r7, #3]
    98ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    98f2:	2b00      	cmp	r3, #0
    98f4:	d004      	beq.n	9900 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    98f6:	2101      	movs	r1, #1
    98f8:	6878      	ldr	r0, [r7, #4]
    98fa:	4b1a      	ldr	r3, [pc, #104]	; (9964 <_usb_d_dev_trans_in_isr+0x84>)
    98fc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    98fe:	e02c      	b.n	995a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9900:	78fb      	ldrb	r3, [r7, #3]
    9902:	f003 0308 	and.w	r3, r3, #8
    9906:	2b00      	cmp	r3, #0
    9908:	d004      	beq.n	9914 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    990a:	2101      	movs	r1, #1
    990c:	6878      	ldr	r0, [r7, #4]
    990e:	4b16      	ldr	r3, [pc, #88]	; (9968 <_usb_d_dev_trans_in_isr+0x88>)
    9910:	4798      	blx	r3
}
    9912:	e022      	b.n	995a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9914:	78fb      	ldrb	r3, [r7, #3]
    9916:	f003 0302 	and.w	r3, r3, #2
    991a:	2b00      	cmp	r3, #0
    991c:	d004      	beq.n	9928 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    991e:	2101      	movs	r1, #1
    9920:	6878      	ldr	r0, [r7, #4]
    9922:	4b12      	ldr	r3, [pc, #72]	; (996c <_usb_d_dev_trans_in_isr+0x8c>)
    9924:	4798      	blx	r3
}
    9926:	e018      	b.n	995a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9928:	687b      	ldr	r3, [r7, #4]
    992a:	7cdb      	ldrb	r3, [r3, #19]
    992c:	f003 0307 	and.w	r3, r3, #7
    9930:	b2db      	uxtb	r3, r3
    9932:	2b01      	cmp	r3, #1
    9934:	d111      	bne.n	995a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9936:	78fb      	ldrb	r3, [r7, #3]
    9938:	f003 0304 	and.w	r3, r3, #4
    993c:	2b00      	cmp	r3, #0
    993e:	d004      	beq.n	994a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9940:	2100      	movs	r1, #0
    9942:	6878      	ldr	r0, [r7, #4]
    9944:	4b08      	ldr	r3, [pc, #32]	; (9968 <_usb_d_dev_trans_in_isr+0x88>)
    9946:	4798      	blx	r3
}
    9948:	e007      	b.n	995a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    994a:	78fb      	ldrb	r3, [r7, #3]
    994c:	f003 0310 	and.w	r3, r3, #16
    9950:	2b00      	cmp	r3, #0
    9952:	d002      	beq.n	995a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9954:	6878      	ldr	r0, [r7, #4]
    9956:	4b06      	ldr	r3, [pc, #24]	; (9970 <_usb_d_dev_trans_in_isr+0x90>)
    9958:	4798      	blx	r3
}
    995a:	bf00      	nop
    995c:	3708      	adds	r7, #8
    995e:	46bd      	mov	sp, r7
    9960:	bd80      	pop	{r7, pc}
    9962:	bf00      	nop
    9964:	00009685 	.word	0x00009685
    9968:	000096c9 	.word	0x000096c9
    996c:	000090d1 	.word	0x000090d1
    9970:	000095ad 	.word	0x000095ad

00009974 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9974:	b580      	push	{r7, lr}
    9976:	b082      	sub	sp, #8
    9978:	af00      	add	r7, sp, #0
    997a:	6078      	str	r0, [r7, #4]
    997c:	460b      	mov	r3, r1
    997e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9980:	78fb      	ldrb	r3, [r7, #3]
    9982:	f003 0320 	and.w	r3, r3, #32
    9986:	2b00      	cmp	r3, #0
    9988:	d004      	beq.n	9994 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    998a:	2100      	movs	r1, #0
    998c:	6878      	ldr	r0, [r7, #4]
    998e:	4b1a      	ldr	r3, [pc, #104]	; (99f8 <_usb_d_dev_trans_out_isr+0x84>)
    9990:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9992:	e02c      	b.n	99ee <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9994:	78fb      	ldrb	r3, [r7, #3]
    9996:	f003 0304 	and.w	r3, r3, #4
    999a:	2b00      	cmp	r3, #0
    999c:	d004      	beq.n	99a8 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    999e:	2100      	movs	r1, #0
    99a0:	6878      	ldr	r0, [r7, #4]
    99a2:	4b16      	ldr	r3, [pc, #88]	; (99fc <_usb_d_dev_trans_out_isr+0x88>)
    99a4:	4798      	blx	r3
}
    99a6:	e022      	b.n	99ee <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    99a8:	78fb      	ldrb	r3, [r7, #3]
    99aa:	f003 0301 	and.w	r3, r3, #1
    99ae:	2b00      	cmp	r3, #0
    99b0:	d004      	beq.n	99bc <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    99b2:	2101      	movs	r1, #1
    99b4:	6878      	ldr	r0, [r7, #4]
    99b6:	4b12      	ldr	r3, [pc, #72]	; (9a00 <_usb_d_dev_trans_out_isr+0x8c>)
    99b8:	4798      	blx	r3
}
    99ba:	e018      	b.n	99ee <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    99bc:	687b      	ldr	r3, [r7, #4]
    99be:	7cdb      	ldrb	r3, [r3, #19]
    99c0:	f003 0307 	and.w	r3, r3, #7
    99c4:	b2db      	uxtb	r3, r3
    99c6:	2b01      	cmp	r3, #1
    99c8:	d111      	bne.n	99ee <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    99ca:	78fb      	ldrb	r3, [r7, #3]
    99cc:	f003 0308 	and.w	r3, r3, #8
    99d0:	2b00      	cmp	r3, #0
    99d2:	d004      	beq.n	99de <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    99d4:	2101      	movs	r1, #1
    99d6:	6878      	ldr	r0, [r7, #4]
    99d8:	4b08      	ldr	r3, [pc, #32]	; (99fc <_usb_d_dev_trans_out_isr+0x88>)
    99da:	4798      	blx	r3
}
    99dc:	e007      	b.n	99ee <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    99de:	78fb      	ldrb	r3, [r7, #3]
    99e0:	f003 0310 	and.w	r3, r3, #16
    99e4:	2b00      	cmp	r3, #0
    99e6:	d002      	beq.n	99ee <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    99e8:	6878      	ldr	r0, [r7, #4]
    99ea:	4b06      	ldr	r3, [pc, #24]	; (9a04 <_usb_d_dev_trans_out_isr+0x90>)
    99ec:	4798      	blx	r3
}
    99ee:	bf00      	nop
    99f0:	3708      	adds	r7, #8
    99f2:	46bd      	mov	sp, r7
    99f4:	bd80      	pop	{r7, pc}
    99f6:	bf00      	nop
    99f8:	00009685 	.word	0x00009685
    99fc:	000096c9 	.word	0x000096c9
    9a00:	000092e9 	.word	0x000092e9
    9a04:	000095ad 	.word	0x000095ad

00009a08 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9a08:	b580      	push	{r7, lr}
    9a0a:	b084      	sub	sp, #16
    9a0c:	af00      	add	r7, sp, #0
    9a0e:	6078      	str	r0, [r7, #4]
    9a10:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9a12:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a16:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9a18:	683b      	ldr	r3, [r7, #0]
    9a1a:	7c9b      	ldrb	r3, [r3, #18]
    9a1c:	f003 030f 	and.w	r3, r3, #15
    9a20:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9a22:	7afb      	ldrb	r3, [r7, #11]
    9a24:	2201      	movs	r2, #1
    9a26:	409a      	lsls	r2, r3
    9a28:	687b      	ldr	r3, [r7, #4]
    9a2a:	4013      	ands	r3, r2
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d03d      	beq.n	9aac <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9a30:	7afb      	ldrb	r3, [r7, #11]
    9a32:	68fa      	ldr	r2, [r7, #12]
    9a34:	3308      	adds	r3, #8
    9a36:	015b      	lsls	r3, r3, #5
    9a38:	4413      	add	r3, r2
    9a3a:	3307      	adds	r3, #7
    9a3c:	781b      	ldrb	r3, [r3, #0]
    9a3e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9a40:	7afb      	ldrb	r3, [r7, #11]
    9a42:	68fa      	ldr	r2, [r7, #12]
    9a44:	015b      	lsls	r3, r3, #5
    9a46:	4413      	add	r3, r2
    9a48:	f203 1309 	addw	r3, r3, #265	; 0x109
    9a4c:	781b      	ldrb	r3, [r3, #0]
    9a4e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9a50:	7aba      	ldrb	r2, [r7, #10]
    9a52:	7a7b      	ldrb	r3, [r7, #9]
    9a54:	4013      	ands	r3, r2
    9a56:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9a58:	7abb      	ldrb	r3, [r7, #10]
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d027      	beq.n	9aae <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9a5e:	683b      	ldr	r3, [r7, #0]
    9a60:	7cdb      	ldrb	r3, [r3, #19]
    9a62:	f003 0307 	and.w	r3, r3, #7
    9a66:	b2db      	uxtb	r3, r3
    9a68:	2b01      	cmp	r3, #1
    9a6a:	d10c      	bne.n	9a86 <_usb_d_dev_handle_eps+0x7e>
    9a6c:	683b      	ldr	r3, [r7, #0]
    9a6e:	7cdb      	ldrb	r3, [r3, #19]
    9a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a74:	b2db      	uxtb	r3, r3
    9a76:	2b00      	cmp	r3, #0
    9a78:	d105      	bne.n	9a86 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9a7a:	7abb      	ldrb	r3, [r7, #10]
    9a7c:	4619      	mov	r1, r3
    9a7e:	6838      	ldr	r0, [r7, #0]
    9a80:	4b0c      	ldr	r3, [pc, #48]	; (9ab4 <_usb_d_dev_handle_eps+0xac>)
    9a82:	4798      	blx	r3
    9a84:	e013      	b.n	9aae <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9a86:	683b      	ldr	r3, [r7, #0]
    9a88:	7cdb      	ldrb	r3, [r3, #19]
    9a8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9a8e:	b2db      	uxtb	r3, r3
    9a90:	2b00      	cmp	r3, #0
    9a92:	d005      	beq.n	9aa0 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9a94:	7abb      	ldrb	r3, [r7, #10]
    9a96:	4619      	mov	r1, r3
    9a98:	6838      	ldr	r0, [r7, #0]
    9a9a:	4b07      	ldr	r3, [pc, #28]	; (9ab8 <_usb_d_dev_handle_eps+0xb0>)
    9a9c:	4798      	blx	r3
    9a9e:	e006      	b.n	9aae <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9aa0:	7abb      	ldrb	r3, [r7, #10]
    9aa2:	4619      	mov	r1, r3
    9aa4:	6838      	ldr	r0, [r7, #0]
    9aa6:	4b05      	ldr	r3, [pc, #20]	; (9abc <_usb_d_dev_handle_eps+0xb4>)
    9aa8:	4798      	blx	r3
    9aaa:	e000      	b.n	9aae <_usb_d_dev_handle_eps+0xa6>
		return;
    9aac:	bf00      	nop
		}
	}
}
    9aae:	3710      	adds	r7, #16
    9ab0:	46bd      	mov	sp, r7
    9ab2:	bd80      	pop	{r7, pc}
    9ab4:	0000988d 	.word	0x0000988d
    9ab8:	000098e1 	.word	0x000098e1
    9abc:	00009975 	.word	0x00009975

00009ac0 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9ac0:	b580      	push	{r7, lr}
    9ac2:	b084      	sub	sp, #16
    9ac4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9ac6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9aca:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9acc:	68bb      	ldr	r3, [r7, #8]
    9ace:	8c1b      	ldrh	r3, [r3, #32]
    9ad0:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9ad2:	88fb      	ldrh	r3, [r7, #6]
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d104      	bne.n	9ae2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9ad8:	4b13      	ldr	r3, [pc, #76]	; (9b28 <_usb_d_dev_handler+0x68>)
    9ada:	4798      	blx	r3
    9adc:	4603      	mov	r3, r0
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d11e      	bne.n	9b20 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9ae2:	2300      	movs	r3, #0
    9ae4:	73fb      	strb	r3, [r7, #15]
    9ae6:	e017      	b.n	9b18 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9ae8:	7bfa      	ldrb	r2, [r7, #15]
    9aea:	4613      	mov	r3, r2
    9aec:	009b      	lsls	r3, r3, #2
    9aee:	4413      	add	r3, r2
    9af0:	009b      	lsls	r3, r3, #2
    9af2:	3310      	adds	r3, #16
    9af4:	4a0d      	ldr	r2, [pc, #52]	; (9b2c <_usb_d_dev_handler+0x6c>)
    9af6:	4413      	add	r3, r2
    9af8:	3304      	adds	r3, #4
    9afa:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9afc:	683b      	ldr	r3, [r7, #0]
    9afe:	7c9b      	ldrb	r3, [r3, #18]
    9b00:	2bff      	cmp	r3, #255	; 0xff
    9b02:	d005      	beq.n	9b10 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9b04:	88fb      	ldrh	r3, [r7, #6]
    9b06:	6839      	ldr	r1, [r7, #0]
    9b08:	4618      	mov	r0, r3
    9b0a:	4b09      	ldr	r3, [pc, #36]	; (9b30 <_usb_d_dev_handler+0x70>)
    9b0c:	4798      	blx	r3
    9b0e:	e000      	b.n	9b12 <_usb_d_dev_handler+0x52>
			continue;
    9b10:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9b12:	7bfb      	ldrb	r3, [r7, #15]
    9b14:	3301      	adds	r3, #1
    9b16:	73fb      	strb	r3, [r7, #15]
    9b18:	7bfb      	ldrb	r3, [r7, #15]
    9b1a:	2b08      	cmp	r3, #8
    9b1c:	d9e4      	bls.n	9ae8 <_usb_d_dev_handler+0x28>
    9b1e:	e000      	b.n	9b22 <_usb_d_dev_handler+0x62>
			return;
    9b20:	bf00      	nop
	}
}
    9b22:	3710      	adds	r7, #16
    9b24:	46bd      	mov	sp, r7
    9b26:	bd80      	pop	{r7, pc}
    9b28:	00009019 	.word	0x00009019
    9b2c:	20000c50 	.word	0x20000c50
    9b30:	00009a09 	.word	0x00009a09

00009b34 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9b34:	b580      	push	{r7, lr}
    9b36:	b082      	sub	sp, #8
    9b38:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9b3a:	2300      	movs	r3, #0
    9b3c:	71fb      	strb	r3, [r7, #7]
    9b3e:	e023      	b.n	9b88 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9b40:	79fa      	ldrb	r2, [r7, #7]
    9b42:	4613      	mov	r3, r2
    9b44:	009b      	lsls	r3, r3, #2
    9b46:	4413      	add	r3, r2
    9b48:	009b      	lsls	r3, r3, #2
    9b4a:	3310      	adds	r3, #16
    9b4c:	4a14      	ldr	r2, [pc, #80]	; (9ba0 <_usb_d_dev_reset_epts+0x6c>)
    9b4e:	4413      	add	r3, r2
    9b50:	3304      	adds	r3, #4
    9b52:	2103      	movs	r1, #3
    9b54:	4618      	mov	r0, r3
    9b56:	4b13      	ldr	r3, [pc, #76]	; (9ba4 <_usb_d_dev_reset_epts+0x70>)
    9b58:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9b5a:	79fa      	ldrb	r2, [r7, #7]
    9b5c:	4910      	ldr	r1, [pc, #64]	; (9ba0 <_usb_d_dev_reset_epts+0x6c>)
    9b5e:	4613      	mov	r3, r2
    9b60:	009b      	lsls	r3, r3, #2
    9b62:	4413      	add	r3, r2
    9b64:	009b      	lsls	r3, r3, #2
    9b66:	440b      	add	r3, r1
    9b68:	3326      	adds	r3, #38	; 0x26
    9b6a:	22ff      	movs	r2, #255	; 0xff
    9b6c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9b6e:	79fa      	ldrb	r2, [r7, #7]
    9b70:	490b      	ldr	r1, [pc, #44]	; (9ba0 <_usb_d_dev_reset_epts+0x6c>)
    9b72:	4613      	mov	r3, r2
    9b74:	009b      	lsls	r3, r3, #2
    9b76:	4413      	add	r3, r2
    9b78:	009b      	lsls	r3, r3, #2
    9b7a:	440b      	add	r3, r1
    9b7c:	3327      	adds	r3, #39	; 0x27
    9b7e:	2200      	movs	r2, #0
    9b80:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9b82:	79fb      	ldrb	r3, [r7, #7]
    9b84:	3301      	adds	r3, #1
    9b86:	71fb      	strb	r3, [r7, #7]
    9b88:	79fb      	ldrb	r3, [r7, #7]
    9b8a:	2b08      	cmp	r3, #8
    9b8c:	d9d8      	bls.n	9b40 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9b8e:	22a0      	movs	r2, #160	; 0xa0
    9b90:	2100      	movs	r1, #0
    9b92:	4805      	ldr	r0, [pc, #20]	; (9ba8 <_usb_d_dev_reset_epts+0x74>)
    9b94:	4b05      	ldr	r3, [pc, #20]	; (9bac <_usb_d_dev_reset_epts+0x78>)
    9b96:	4798      	blx	r3
}
    9b98:	bf00      	nop
    9b9a:	3708      	adds	r7, #8
    9b9c:	46bd      	mov	sp, r7
    9b9e:	bd80      	pop	{r7, pc}
    9ba0:	20000c50 	.word	0x20000c50
    9ba4:	0000a3f9 	.word	0x0000a3f9
    9ba8:	20000d18 	.word	0x20000d18
    9bac:	0000ea6d 	.word	0x0000ea6d

00009bb0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9bb0:	b580      	push	{r7, lr}
    9bb2:	b084      	sub	sp, #16
    9bb4:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9bb6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9bba:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9bbc:	2301      	movs	r3, #1
    9bbe:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9bc0:	2304      	movs	r3, #4
    9bc2:	713b      	strb	r3, [r7, #4]
    9bc4:	2300      	movs	r3, #0
    9bc6:	717b      	strb	r3, [r7, #5]
    9bc8:	2300      	movs	r3, #0
    9bca:	71bb      	strb	r3, [r7, #6]
    9bcc:	2300      	movs	r3, #0
    9bce:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9bd0:	2101      	movs	r1, #1
    9bd2:	68f8      	ldr	r0, [r7, #12]
    9bd4:	4b26      	ldr	r3, [pc, #152]	; (9c70 <_usb_d_dev_init+0xc0>)
    9bd6:	4798      	blx	r3
    9bd8:	4603      	mov	r3, r0
    9bda:	f083 0301 	eor.w	r3, r3, #1
    9bde:	b2db      	uxtb	r3, r3
    9be0:	2b00      	cmp	r3, #0
    9be2:	d011      	beq.n	9c08 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9be4:	2102      	movs	r1, #2
    9be6:	68f8      	ldr	r0, [r7, #12]
    9be8:	4b22      	ldr	r3, [pc, #136]	; (9c74 <_usb_d_dev_init+0xc4>)
    9bea:	4798      	blx	r3
    9bec:	4603      	mov	r3, r0
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d006      	beq.n	9c00 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9bf2:	68f8      	ldr	r0, [r7, #12]
    9bf4:	4b20      	ldr	r3, [pc, #128]	; (9c78 <_usb_d_dev_init+0xc8>)
    9bf6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9bf8:	2102      	movs	r1, #2
    9bfa:	68f8      	ldr	r0, [r7, #12]
    9bfc:	4b1f      	ldr	r3, [pc, #124]	; (9c7c <_usb_d_dev_init+0xcc>)
    9bfe:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9c00:	2101      	movs	r1, #1
    9c02:	68f8      	ldr	r0, [r7, #12]
    9c04:	4b1e      	ldr	r3, [pc, #120]	; (9c80 <_usb_d_dev_init+0xd0>)
    9c06:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9c08:	2101      	movs	r1, #1
    9c0a:	68f8      	ldr	r0, [r7, #12]
    9c0c:	4b1b      	ldr	r3, [pc, #108]	; (9c7c <_usb_d_dev_init+0xcc>)
    9c0e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9c10:	4b1c      	ldr	r3, [pc, #112]	; (9c84 <_usb_d_dev_init+0xd4>)
    9c12:	4a1d      	ldr	r2, [pc, #116]	; (9c88 <_usb_d_dev_init+0xd8>)
    9c14:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9c16:	4b1b      	ldr	r3, [pc, #108]	; (9c84 <_usb_d_dev_init+0xd4>)
    9c18:	4a1b      	ldr	r2, [pc, #108]	; (9c88 <_usb_d_dev_init+0xd8>)
    9c1a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9c1c:	4b19      	ldr	r3, [pc, #100]	; (9c84 <_usb_d_dev_init+0xd4>)
    9c1e:	4a1a      	ldr	r2, [pc, #104]	; (9c88 <_usb_d_dev_init+0xd8>)
    9c20:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9c22:	4b18      	ldr	r3, [pc, #96]	; (9c84 <_usb_d_dev_init+0xd4>)
    9c24:	4a18      	ldr	r2, [pc, #96]	; (9c88 <_usb_d_dev_init+0xd8>)
    9c26:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9c28:	4b16      	ldr	r3, [pc, #88]	; (9c84 <_usb_d_dev_init+0xd4>)
    9c2a:	4a17      	ldr	r2, [pc, #92]	; (9c88 <_usb_d_dev_init+0xd8>)
    9c2c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9c2e:	4b17      	ldr	r3, [pc, #92]	; (9c8c <_usb_d_dev_init+0xdc>)
    9c30:	4798      	blx	r3

	_usb_load_calib();
    9c32:	4b17      	ldr	r3, [pc, #92]	; (9c90 <_usb_d_dev_init+0xe0>)
    9c34:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9c36:	2104      	movs	r1, #4
    9c38:	68f8      	ldr	r0, [r7, #12]
    9c3a:	4b11      	ldr	r3, [pc, #68]	; (9c80 <_usb_d_dev_init+0xd0>)
    9c3c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9c3e:	4b15      	ldr	r3, [pc, #84]	; (9c94 <_usb_d_dev_init+0xe4>)
    9c40:	4619      	mov	r1, r3
    9c42:	68f8      	ldr	r0, [r7, #12]
    9c44:	4b14      	ldr	r3, [pc, #80]	; (9c98 <_usb_d_dev_init+0xe8>)
    9c46:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9c48:	7afb      	ldrb	r3, [r7, #11]
    9c4a:	f107 0210 	add.w	r2, r7, #16
    9c4e:	4413      	add	r3, r2
    9c50:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9c54:	f043 0301 	orr.w	r3, r3, #1
    9c58:	b2db      	uxtb	r3, r3
    9c5a:	b29b      	uxth	r3, r3
    9c5c:	4619      	mov	r1, r3
    9c5e:	68f8      	ldr	r0, [r7, #12]
    9c60:	4b0e      	ldr	r3, [pc, #56]	; (9c9c <_usb_d_dev_init+0xec>)
    9c62:	4798      	blx	r3

	return ERR_NONE;
    9c64:	2300      	movs	r3, #0
}
    9c66:	4618      	mov	r0, r3
    9c68:	3710      	adds	r7, #16
    9c6a:	46bd      	mov	sp, r7
    9c6c:	bd80      	pop	{r7, pc}
    9c6e:	bf00      	nop
    9c70:	00008249 	.word	0x00008249
    9c74:	00008599 	.word	0x00008599
    9c78:	0000856d 	.word	0x0000856d
    9c7c:	0000821f 	.word	0x0000821f
    9c80:	000085c9 	.word	0x000085c9
    9c84:	20000c50 	.word	0x20000c50
    9c88:	00008691 	.word	0x00008691
    9c8c:	00009b35 	.word	0x00009b35
    9c90:	000086a9 	.word	0x000086a9
    9c94:	20000d18 	.word	0x20000d18
    9c98:	00008675 	.word	0x00008675
    9c9c:	00008639 	.word	0x00008639

00009ca0 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b082      	sub	sp, #8
    9ca4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9ca6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9caa:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9cac:	2103      	movs	r1, #3
    9cae:	6878      	ldr	r0, [r7, #4]
    9cb0:	4b17      	ldr	r3, [pc, #92]	; (9d10 <_usb_d_dev_enable+0x70>)
    9cb2:	4798      	blx	r3
    9cb4:	4603      	mov	r3, r0
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d002      	beq.n	9cc0 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9cba:	f06f 0310 	mvn.w	r3, #16
    9cbe:	e023      	b.n	9d08 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9cc0:	6878      	ldr	r0, [r7, #4]
    9cc2:	4b14      	ldr	r3, [pc, #80]	; (9d14 <_usb_d_dev_enable+0x74>)
    9cc4:	4798      	blx	r3
    9cc6:	4603      	mov	r3, r0
    9cc8:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9cca:	78fb      	ldrb	r3, [r7, #3]
    9ccc:	f003 0302 	and.w	r3, r3, #2
    9cd0:	2b00      	cmp	r3, #0
    9cd2:	d107      	bne.n	9ce4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9cd4:	78fb      	ldrb	r3, [r7, #3]
    9cd6:	f043 0302 	orr.w	r3, r3, #2
    9cda:	b2db      	uxtb	r3, r3
    9cdc:	4619      	mov	r1, r3
    9cde:	6878      	ldr	r0, [r7, #4]
    9ce0:	4b0d      	ldr	r3, [pc, #52]	; (9d18 <_usb_d_dev_enable+0x78>)
    9ce2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9ce4:	2050      	movs	r0, #80	; 0x50
    9ce6:	4b0d      	ldr	r3, [pc, #52]	; (9d1c <_usb_d_dev_enable+0x7c>)
    9ce8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9cea:	2051      	movs	r0, #81	; 0x51
    9cec:	4b0b      	ldr	r3, [pc, #44]	; (9d1c <_usb_d_dev_enable+0x7c>)
    9cee:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9cf0:	2052      	movs	r0, #82	; 0x52
    9cf2:	4b0a      	ldr	r3, [pc, #40]	; (9d1c <_usb_d_dev_enable+0x7c>)
    9cf4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9cf6:	2053      	movs	r0, #83	; 0x53
    9cf8:	4b08      	ldr	r3, [pc, #32]	; (9d1c <_usb_d_dev_enable+0x7c>)
    9cfa:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9cfc:	f240 218d 	movw	r1, #653	; 0x28d
    9d00:	6878      	ldr	r0, [r7, #4]
    9d02:	4b07      	ldr	r3, [pc, #28]	; (9d20 <_usb_d_dev_enable+0x80>)
    9d04:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9d06:	2300      	movs	r3, #0
}
    9d08:	4618      	mov	r0, r3
    9d0a:	3708      	adds	r7, #8
    9d0c:	46bd      	mov	sp, r7
    9d0e:	bd80      	pop	{r7, pc}
    9d10:	00008543 	.word	0x00008543
    9d14:	000085f1 	.word	0x000085f1
    9d18:	000085c9 	.word	0x000085c9
    9d1c:	00008155 	.word	0x00008155
    9d20:	000084ed 	.word	0x000084ed

00009d24 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9d24:	b580      	push	{r7, lr}
    9d26:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9d28:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d2c:	4b01      	ldr	r3, [pc, #4]	; (9d34 <_usb_d_dev_attach+0x10>)
    9d2e:	4798      	blx	r3
}
    9d30:	bf00      	nop
    9d32:	bd80      	pop	{r7, pc}
    9d34:	00008615 	.word	0x00008615

00009d38 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9d38:	b580      	push	{r7, lr}
    9d3a:	b082      	sub	sp, #8
    9d3c:	af00      	add	r7, sp, #0
    9d3e:	4603      	mov	r3, r0
    9d40:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9d42:	79fb      	ldrb	r3, [r7, #7]
    9d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9d48:	b2db      	uxtb	r3, r3
    9d4a:	4619      	mov	r1, r3
    9d4c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d50:	4b02      	ldr	r3, [pc, #8]	; (9d5c <_usb_d_dev_set_address+0x24>)
    9d52:	4798      	blx	r3
}
    9d54:	bf00      	nop
    9d56:	3708      	adds	r7, #8
    9d58:	46bd      	mov	sp, r7
    9d5a:	bd80      	pop	{r7, pc}
    9d5c:	00008657 	.word	0x00008657

00009d60 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9d60:	b590      	push	{r4, r7, lr}
    9d62:	b085      	sub	sp, #20
    9d64:	af00      	add	r7, sp, #0
    9d66:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9d68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d6c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9d6e:	687b      	ldr	r3, [r7, #4]
    9d70:	7c9b      	ldrb	r3, [r3, #18]
    9d72:	f003 030f 	and.w	r3, r3, #15
    9d76:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	68db      	ldr	r3, [r3, #12]
    9d7c:	461a      	mov	r2, r3
    9d7e:	7afb      	ldrb	r3, [r7, #11]
    9d80:	2100      	movs	r1, #0
    9d82:	4618      	mov	r0, r3
    9d84:	4b0f      	ldr	r3, [pc, #60]	; (9dc4 <_usb_d_dev_trans_setup+0x64>)
    9d86:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9d88:	687b      	ldr	r3, [r7, #4]
    9d8a:	8a1b      	ldrh	r3, [r3, #16]
    9d8c:	461a      	mov	r2, r3
    9d8e:	7af8      	ldrb	r0, [r7, #11]
    9d90:	2300      	movs	r3, #0
    9d92:	2100      	movs	r1, #0
    9d94:	4c0c      	ldr	r4, [pc, #48]	; (9dc8 <_usb_d_dev_trans_setup+0x68>)
    9d96:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9d98:	7afb      	ldrb	r3, [r7, #11]
    9d9a:	22b0      	movs	r2, #176	; 0xb0
    9d9c:	4619      	mov	r1, r3
    9d9e:	68f8      	ldr	r0, [r7, #12]
    9da0:	4b0a      	ldr	r3, [pc, #40]	; (9dcc <_usb_d_dev_trans_setup+0x6c>)
    9da2:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9da4:	7afb      	ldrb	r3, [r7, #11]
    9da6:	2200      	movs	r2, #0
    9da8:	2100      	movs	r1, #0
    9daa:	4618      	mov	r0, r3
    9dac:	4b08      	ldr	r3, [pc, #32]	; (9dd0 <_usb_d_dev_trans_setup+0x70>)
    9dae:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9db0:	7afb      	ldrb	r3, [r7, #11]
    9db2:	2210      	movs	r2, #16
    9db4:	4619      	mov	r1, r3
    9db6:	68f8      	ldr	r0, [r7, #12]
    9db8:	4b06      	ldr	r3, [pc, #24]	; (9dd4 <_usb_d_dev_trans_setup+0x74>)
    9dba:	4798      	blx	r3
}
    9dbc:	bf00      	nop
    9dbe:	3714      	adds	r7, #20
    9dc0:	46bd      	mov	sp, r7
    9dc2:	bd90      	pop	{r4, r7, pc}
    9dc4:	00008af5 	.word	0x00008af5
    9dc8:	00008c7d 	.word	0x00008c7d
    9dcc:	00008355 	.word	0x00008355
    9dd0:	00008d4d 	.word	0x00008d4d
    9dd4:	000083a9 	.word	0x000083a9

00009dd8 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9dd8:	b580      	push	{r7, lr}
    9dda:	b088      	sub	sp, #32
    9ddc:	af00      	add	r7, sp, #0
    9dde:	4603      	mov	r3, r0
    9de0:	71fb      	strb	r3, [r7, #7]
    9de2:	460b      	mov	r3, r1
    9de4:	71bb      	strb	r3, [r7, #6]
    9de6:	4613      	mov	r3, r2
    9de8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9dea:	79fb      	ldrb	r3, [r7, #7]
    9dec:	f003 030f 	and.w	r3, r3, #15
    9df0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9df2:	79fb      	ldrb	r3, [r7, #7]
    9df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9df8:	2b00      	cmp	r3, #0
    9dfa:	bf14      	ite	ne
    9dfc:	2301      	movne	r3, #1
    9dfe:	2300      	moveq	r3, #0
    9e00:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9e02:	7fba      	ldrb	r2, [r7, #30]
    9e04:	7ffb      	ldrb	r3, [r7, #31]
    9e06:	4611      	mov	r1, r2
    9e08:	4618      	mov	r0, r3
    9e0a:	4b3e      	ldr	r3, [pc, #248]	; (9f04 <_usb_d_dev_ep_init+0x12c>)
    9e0c:	4798      	blx	r3
    9e0e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9e10:	79bb      	ldrb	r3, [r7, #6]
    9e12:	f003 0303 	and.w	r3, r3, #3
    9e16:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9e18:	7ffa      	ldrb	r2, [r7, #31]
    9e1a:	4613      	mov	r3, r2
    9e1c:	005b      	lsls	r3, r3, #1
    9e1e:	4413      	add	r3, r2
    9e20:	009b      	lsls	r3, r3, #2
    9e22:	4a39      	ldr	r2, [pc, #228]	; (9f08 <_usb_d_dev_ep_init+0x130>)
    9e24:	4413      	add	r3, r2
    9e26:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9e28:	7ffb      	ldrb	r3, [r7, #31]
    9e2a:	2b04      	cmp	r3, #4
    9e2c:	d902      	bls.n	9e34 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9e2e:	f06f 0311 	mvn.w	r3, #17
    9e32:	e063      	b.n	9efc <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9e34:	69bb      	ldr	r3, [r7, #24]
    9e36:	7c9b      	ldrb	r3, [r3, #18]
    9e38:	2bff      	cmp	r3, #255	; 0xff
    9e3a:	d002      	beq.n	9e42 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9e3c:	f06f 0313 	mvn.w	r3, #19
    9e40:	e05c      	b.n	9efc <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9e42:	7dfb      	ldrb	r3, [r7, #23]
    9e44:	2b00      	cmp	r3, #0
    9e46:	d11f      	bne.n	9e88 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9e48:	7fbb      	ldrb	r3, [r7, #30]
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	bf14      	ite	ne
    9e4e:	2301      	movne	r3, #1
    9e50:	2300      	moveq	r3, #0
    9e52:	b2db      	uxtb	r3, r3
    9e54:	f083 0301 	eor.w	r3, r3, #1
    9e58:	b2db      	uxtb	r3, r3
    9e5a:	f003 0301 	and.w	r3, r3, #1
    9e5e:	b2da      	uxtb	r2, r3
    9e60:	7ffb      	ldrb	r3, [r7, #31]
    9e62:	4611      	mov	r1, r2
    9e64:	4618      	mov	r0, r3
    9e66:	4b27      	ldr	r3, [pc, #156]	; (9f04 <_usb_d_dev_ep_init+0x12c>)
    9e68:	4798      	blx	r3
    9e6a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9e6c:	68fb      	ldr	r3, [r7, #12]
    9e6e:	7c9b      	ldrb	r3, [r3, #18]
    9e70:	2bff      	cmp	r3, #255	; 0xff
    9e72:	d002      	beq.n	9e7a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9e74:	f06f 0313 	mvn.w	r3, #19
    9e78:	e040      	b.n	9efc <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9e7a:	693b      	ldr	r3, [r7, #16]
    9e7c:	681b      	ldr	r3, [r3, #0]
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d102      	bne.n	9e88 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9e82:	f06f 0312 	mvn.w	r3, #18
    9e86:	e039      	b.n	9efc <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9e88:	7fbb      	ldrb	r3, [r7, #30]
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	d007      	beq.n	9e9e <_usb_d_dev_ep_init+0xc6>
    9e8e:	693b      	ldr	r3, [r7, #16]
    9e90:	685b      	ldr	r3, [r3, #4]
    9e92:	2b00      	cmp	r3, #0
    9e94:	bf14      	ite	ne
    9e96:	2301      	movne	r3, #1
    9e98:	2300      	moveq	r3, #0
    9e9a:	b2db      	uxtb	r3, r3
    9e9c:	e006      	b.n	9eac <_usb_d_dev_ep_init+0xd4>
    9e9e:	693b      	ldr	r3, [r7, #16]
    9ea0:	681b      	ldr	r3, [r3, #0]
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	bf14      	ite	ne
    9ea6:	2301      	movne	r3, #1
    9ea8:	2300      	moveq	r3, #0
    9eaa:	b2db      	uxtb	r3, r3
    9eac:	2b00      	cmp	r3, #0
    9eae:	d00f      	beq.n	9ed0 <_usb_d_dev_ep_init+0xf8>
    9eb0:	7fbb      	ldrb	r3, [r7, #30]
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	d003      	beq.n	9ebe <_usb_d_dev_ep_init+0xe6>
    9eb6:	693b      	ldr	r3, [r7, #16]
    9eb8:	895b      	ldrh	r3, [r3, #10]
    9eba:	461a      	mov	r2, r3
    9ebc:	e002      	b.n	9ec4 <_usb_d_dev_ep_init+0xec>
    9ebe:	693b      	ldr	r3, [r7, #16]
    9ec0:	891b      	ldrh	r3, [r3, #8]
    9ec2:	461a      	mov	r2, r3
    9ec4:	88bb      	ldrh	r3, [r7, #4]
    9ec6:	429a      	cmp	r2, r3
    9ec8:	da02      	bge.n	9ed0 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9eca:	f06f 0312 	mvn.w	r3, #18
    9ece:	e015      	b.n	9efc <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9ed0:	7fbb      	ldrb	r3, [r7, #30]
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d002      	beq.n	9edc <_usb_d_dev_ep_init+0x104>
    9ed6:	693b      	ldr	r3, [r7, #16]
    9ed8:	685b      	ldr	r3, [r3, #4]
    9eda:	e001      	b.n	9ee0 <_usb_d_dev_ep_init+0x108>
    9edc:	693b      	ldr	r3, [r7, #16]
    9ede:	681b      	ldr	r3, [r3, #0]
    9ee0:	69ba      	ldr	r2, [r7, #24]
    9ee2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9ee4:	69bb      	ldr	r3, [r7, #24]
    9ee6:	88ba      	ldrh	r2, [r7, #4]
    9ee8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9eea:	7dfb      	ldrb	r3, [r7, #23]
    9eec:	3301      	adds	r3, #1
    9eee:	b2da      	uxtb	r2, r3
    9ef0:	69bb      	ldr	r3, [r7, #24]
    9ef2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    9ef4:	69bb      	ldr	r3, [r7, #24]
    9ef6:	79fa      	ldrb	r2, [r7, #7]
    9ef8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9efa:	2300      	movs	r3, #0
}
    9efc:	4618      	mov	r0, r3
    9efe:	3720      	adds	r7, #32
    9f00:	46bd      	mov	sp, r7
    9f02:	bd80      	pop	{r7, pc}
    9f04:	00008e09 	.word	0x00008e09
    9f08:	0000f0c4 	.word	0x0000f0c4

00009f0c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b086      	sub	sp, #24
    9f10:	af00      	add	r7, sp, #0
    9f12:	4603      	mov	r3, r0
    9f14:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    9f16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f1a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9f1c:	79fb      	ldrb	r3, [r7, #7]
    9f1e:	f003 030f 	and.w	r3, r3, #15
    9f22:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9f24:	79fb      	ldrb	r3, [r7, #7]
    9f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	bf14      	ite	ne
    9f2e:	2301      	movne	r3, #1
    9f30:	2300      	moveq	r3, #0
    9f32:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9f34:	7cba      	ldrb	r2, [r7, #18]
    9f36:	7cfb      	ldrb	r3, [r7, #19]
    9f38:	4611      	mov	r1, r2
    9f3a:	4618      	mov	r0, r3
    9f3c:	4b2a      	ldr	r3, [pc, #168]	; (9fe8 <_usb_d_dev_ep_deinit+0xdc>)
    9f3e:	4798      	blx	r3
    9f40:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9f42:	7cfb      	ldrb	r3, [r7, #19]
    9f44:	2b04      	cmp	r3, #4
    9f46:	d84a      	bhi.n	9fde <_usb_d_dev_ep_deinit+0xd2>
    9f48:	68fb      	ldr	r3, [r7, #12]
    9f4a:	7c9b      	ldrb	r3, [r3, #18]
    9f4c:	2bff      	cmp	r3, #255	; 0xff
    9f4e:	d046      	beq.n	9fde <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9f50:	7cbb      	ldrb	r3, [r7, #18]
    9f52:	2203      	movs	r2, #3
    9f54:	4619      	mov	r1, r3
    9f56:	68f8      	ldr	r0, [r7, #12]
    9f58:	4b24      	ldr	r3, [pc, #144]	; (9fec <_usb_d_dev_ep_deinit+0xe0>)
    9f5a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9f5c:	68fb      	ldr	r3, [r7, #12]
    9f5e:	7cdb      	ldrb	r3, [r3, #19]
    9f60:	f003 0307 	and.w	r3, r3, #7
    9f64:	b2db      	uxtb	r3, r3
    9f66:	2b01      	cmp	r3, #1
    9f68:	d107      	bne.n	9f7a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9f6a:	79fb      	ldrb	r3, [r7, #7]
    9f6c:	697a      	ldr	r2, [r7, #20]
    9f6e:	3308      	adds	r3, #8
    9f70:	015b      	lsls	r3, r3, #5
    9f72:	4413      	add	r3, r2
    9f74:	2200      	movs	r2, #0
    9f76:	701a      	strb	r2, [r3, #0]
    9f78:	e02a      	b.n	9fd0 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9f7e:	2b00      	cmp	r3, #0
    9f80:	da15      	bge.n	9fae <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9f82:	79fb      	ldrb	r3, [r7, #7]
    9f84:	f003 030f 	and.w	r3, r3, #15
    9f88:	79fa      	ldrb	r2, [r7, #7]
    9f8a:	f002 020f 	and.w	r2, r2, #15
    9f8e:	6979      	ldr	r1, [r7, #20]
    9f90:	3208      	adds	r2, #8
    9f92:	0152      	lsls	r2, r2, #5
    9f94:	440a      	add	r2, r1
    9f96:	7812      	ldrb	r2, [r2, #0]
    9f98:	b2d2      	uxtb	r2, r2
    9f9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9f9e:	b2d1      	uxtb	r1, r2
    9fa0:	697a      	ldr	r2, [r7, #20]
    9fa2:	3308      	adds	r3, #8
    9fa4:	015b      	lsls	r3, r3, #5
    9fa6:	4413      	add	r3, r2
    9fa8:	460a      	mov	r2, r1
    9faa:	701a      	strb	r2, [r3, #0]
    9fac:	e010      	b.n	9fd0 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9fae:	79fb      	ldrb	r3, [r7, #7]
    9fb0:	79fa      	ldrb	r2, [r7, #7]
    9fb2:	6979      	ldr	r1, [r7, #20]
    9fb4:	3208      	adds	r2, #8
    9fb6:	0152      	lsls	r2, r2, #5
    9fb8:	440a      	add	r2, r1
    9fba:	7812      	ldrb	r2, [r2, #0]
    9fbc:	b2d2      	uxtb	r2, r2
    9fbe:	f022 0207 	bic.w	r2, r2, #7
    9fc2:	b2d1      	uxtb	r1, r2
    9fc4:	697a      	ldr	r2, [r7, #20]
    9fc6:	3308      	adds	r3, #8
    9fc8:	015b      	lsls	r3, r3, #5
    9fca:	4413      	add	r3, r2
    9fcc:	460a      	mov	r2, r1
    9fce:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9fd0:	68fb      	ldr	r3, [r7, #12]
    9fd2:	2200      	movs	r2, #0
    9fd4:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9fd6:	68fb      	ldr	r3, [r7, #12]
    9fd8:	22ff      	movs	r2, #255	; 0xff
    9fda:	749a      	strb	r2, [r3, #18]
    9fdc:	e000      	b.n	9fe0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9fde:	bf00      	nop
}
    9fe0:	3718      	adds	r7, #24
    9fe2:	46bd      	mov	sp, r7
    9fe4:	bd80      	pop	{r7, pc}
    9fe6:	bf00      	nop
    9fe8:	00008e09 	.word	0x00008e09
    9fec:	0000a441 	.word	0x0000a441

00009ff0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9ff0:	b5b0      	push	{r4, r5, r7, lr}
    9ff2:	b088      	sub	sp, #32
    9ff4:	af00      	add	r7, sp, #0
    9ff6:	4603      	mov	r3, r0
    9ff8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9ffa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9ffe:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a000:	79fb      	ldrb	r3, [r7, #7]
    a002:	f003 030f 	and.w	r3, r3, #15
    a006:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a008:	79fb      	ldrb	r3, [r7, #7]
    a00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a00e:	2b00      	cmp	r3, #0
    a010:	bf14      	ite	ne
    a012:	2301      	movne	r3, #1
    a014:	2300      	moveq	r3, #0
    a016:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a018:	7eba      	ldrb	r2, [r7, #26]
    a01a:	7efb      	ldrb	r3, [r7, #27]
    a01c:	4611      	mov	r1, r2
    a01e:	4618      	mov	r0, r3
    a020:	4b70      	ldr	r3, [pc, #448]	; (a1e4 <_usb_d_dev_ep_enable+0x1f4>)
    a022:	4798      	blx	r3
    a024:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a026:	7efb      	ldrb	r3, [r7, #27]
    a028:	4619      	mov	r1, r3
    a02a:	69f8      	ldr	r0, [r7, #28]
    a02c:	4b6e      	ldr	r3, [pc, #440]	; (a1e8 <_usb_d_dev_ep_enable+0x1f8>)
    a02e:	4798      	blx	r3
    a030:	4603      	mov	r3, r0
    a032:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a034:	7efb      	ldrb	r3, [r7, #27]
    a036:	2b04      	cmp	r3, #4
    a038:	d803      	bhi.n	a042 <_usb_d_dev_ep_enable+0x52>
    a03a:	697b      	ldr	r3, [r7, #20]
    a03c:	7c9b      	ldrb	r3, [r3, #18]
    a03e:	2bff      	cmp	r3, #255	; 0xff
    a040:	d102      	bne.n	a048 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a042:	f06f 0311 	mvn.w	r3, #17
    a046:	e0c8      	b.n	a1da <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a048:	7efb      	ldrb	r3, [r7, #27]
    a04a:	015b      	lsls	r3, r3, #5
    a04c:	4a67      	ldr	r2, [pc, #412]	; (a1ec <_usb_d_dev_ep_enable+0x1fc>)
    a04e:	4413      	add	r3, r2
    a050:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a052:	697b      	ldr	r3, [r7, #20]
    a054:	7cdb      	ldrb	r3, [r3, #19]
    a056:	f003 0307 	and.w	r3, r3, #7
    a05a:	b2db      	uxtb	r3, r3
    a05c:	2b01      	cmp	r3, #1
    a05e:	d14b      	bne.n	a0f8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a060:	7cfb      	ldrb	r3, [r7, #19]
    a062:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a066:	2b00      	cmp	r3, #0
    a068:	d002      	beq.n	a070 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a06a:	f06f 0313 	mvn.w	r3, #19
    a06e:	e0b4      	b.n	a1da <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a070:	7efb      	ldrb	r3, [r7, #27]
    a072:	2211      	movs	r2, #17
    a074:	4619      	mov	r1, r3
    a076:	69f8      	ldr	r0, [r7, #28]
    a078:	4b5d      	ldr	r3, [pc, #372]	; (a1f0 <_usb_d_dev_ep_enable+0x200>)
    a07a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a07c:	697b      	ldr	r3, [r7, #20]
    a07e:	8a1b      	ldrh	r3, [r3, #16]
    a080:	039b      	lsls	r3, r3, #14
    a082:	4c5c      	ldr	r4, [pc, #368]	; (a1f4 <_usb_d_dev_ep_enable+0x204>)
    a084:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a086:	697b      	ldr	r3, [r7, #20]
    a088:	8a1b      	ldrh	r3, [r3, #16]
    a08a:	4618      	mov	r0, r3
    a08c:	4b5a      	ldr	r3, [pc, #360]	; (a1f8 <_usb_d_dev_ep_enable+0x208>)
    a08e:	4798      	blx	r3
    a090:	4603      	mov	r3, r0
    a092:	071b      	lsls	r3, r3, #28
    a094:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a098:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a09c:	68fb      	ldr	r3, [r7, #12]
    a09e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a0a0:	68fb      	ldr	r3, [r7, #12]
    a0a2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a0a6:	697b      	ldr	r3, [r7, #20]
    a0a8:	8a1b      	ldrh	r3, [r3, #16]
    a0aa:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a0ae:	697b      	ldr	r3, [r7, #20]
    a0b0:	8a1b      	ldrh	r3, [r3, #16]
    a0b2:	4618      	mov	r0, r3
    a0b4:	4b50      	ldr	r3, [pc, #320]	; (a1f8 <_usb_d_dev_ep_enable+0x208>)
    a0b6:	4798      	blx	r3
    a0b8:	4603      	mov	r3, r0
    a0ba:	071b      	lsls	r3, r3, #28
    a0bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a0c0:	432b      	orrs	r3, r5
    a0c2:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a0c4:	7efb      	ldrb	r3, [r7, #27]
    a0c6:	2200      	movs	r2, #0
    a0c8:	2100      	movs	r1, #0
    a0ca:	4618      	mov	r0, r3
    a0cc:	4b4b      	ldr	r3, [pc, #300]	; (a1fc <_usb_d_dev_ep_enable+0x20c>)
    a0ce:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a0d0:	7efb      	ldrb	r3, [r7, #27]
    a0d2:	2200      	movs	r2, #0
    a0d4:	2101      	movs	r1, #1
    a0d6:	4618      	mov	r0, r3
    a0d8:	4b49      	ldr	r3, [pc, #292]	; (a200 <_usb_d_dev_ep_enable+0x210>)
    a0da:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a0dc:	7efb      	ldrb	r3, [r7, #27]
    a0de:	2100      	movs	r1, #0
    a0e0:	4618      	mov	r0, r3
    a0e2:	4b48      	ldr	r3, [pc, #288]	; (a204 <_usb_d_dev_ep_enable+0x214>)
    a0e4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a0e6:	7efb      	ldrb	r3, [r7, #27]
    a0e8:	2101      	movs	r1, #1
    a0ea:	4618      	mov	r0, r3
    a0ec:	4b45      	ldr	r3, [pc, #276]	; (a204 <_usb_d_dev_ep_enable+0x214>)
    a0ee:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a0f0:	6978      	ldr	r0, [r7, #20]
    a0f2:	4b45      	ldr	r3, [pc, #276]	; (a208 <_usb_d_dev_ep_enable+0x218>)
    a0f4:	4798      	blx	r3
    a0f6:	e06f      	b.n	a1d8 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a0f8:	7ebb      	ldrb	r3, [r7, #26]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d038      	beq.n	a170 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a0fe:	7cfb      	ldrb	r3, [r7, #19]
    a100:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a104:	2b00      	cmp	r3, #0
    a106:	d002      	beq.n	a10e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a108:	f06f 0313 	mvn.w	r3, #19
    a10c:	e065      	b.n	a1da <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a10e:	697b      	ldr	r3, [r7, #20]
    a110:	7cdb      	ldrb	r3, [r3, #19]
    a112:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a116:	b2db      	uxtb	r3, r3
    a118:	011b      	lsls	r3, r3, #4
    a11a:	b2db      	uxtb	r3, r3
    a11c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a120:	b2da      	uxtb	r2, r3
    a122:	7cfb      	ldrb	r3, [r7, #19]
    a124:	4313      	orrs	r3, r2
    a126:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a128:	7cfa      	ldrb	r2, [r7, #19]
    a12a:	7efb      	ldrb	r3, [r7, #27]
    a12c:	4619      	mov	r1, r3
    a12e:	69f8      	ldr	r0, [r7, #28]
    a130:	4b2f      	ldr	r3, [pc, #188]	; (a1f0 <_usb_d_dev_ep_enable+0x200>)
    a132:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a134:	68fb      	ldr	r3, [r7, #12]
    a136:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a13a:	697b      	ldr	r3, [r7, #20]
    a13c:	8a1b      	ldrh	r3, [r3, #16]
    a13e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a142:	697b      	ldr	r3, [r7, #20]
    a144:	8a1b      	ldrh	r3, [r3, #16]
    a146:	4618      	mov	r0, r3
    a148:	4b2b      	ldr	r3, [pc, #172]	; (a1f8 <_usb_d_dev_ep_enable+0x208>)
    a14a:	4798      	blx	r3
    a14c:	4603      	mov	r3, r0
    a14e:	071b      	lsls	r3, r3, #28
    a150:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a154:	432b      	orrs	r3, r5
    a156:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a158:	7efb      	ldrb	r3, [r7, #27]
    a15a:	2200      	movs	r2, #0
    a15c:	2101      	movs	r1, #1
    a15e:	4618      	mov	r0, r3
    a160:	4b27      	ldr	r3, [pc, #156]	; (a200 <_usb_d_dev_ep_enable+0x210>)
    a162:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a164:	7efb      	ldrb	r3, [r7, #27]
    a166:	2101      	movs	r1, #1
    a168:	4618      	mov	r0, r3
    a16a:	4b26      	ldr	r3, [pc, #152]	; (a204 <_usb_d_dev_ep_enable+0x214>)
    a16c:	4798      	blx	r3
    a16e:	e033      	b.n	a1d8 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a170:	7cfb      	ldrb	r3, [r7, #19]
    a172:	f003 0307 	and.w	r3, r3, #7
    a176:	2b00      	cmp	r3, #0
    a178:	d002      	beq.n	a180 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a17a:	f06f 0313 	mvn.w	r3, #19
    a17e:	e02c      	b.n	a1da <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a180:	697b      	ldr	r3, [r7, #20]
    a182:	7cdb      	ldrb	r3, [r3, #19]
    a184:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a188:	b2db      	uxtb	r3, r3
    a18a:	461a      	mov	r2, r3
    a18c:	7cfb      	ldrb	r3, [r7, #19]
    a18e:	4313      	orrs	r3, r2
    a190:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a192:	7cfa      	ldrb	r2, [r7, #19]
    a194:	7efb      	ldrb	r3, [r7, #27]
    a196:	4619      	mov	r1, r3
    a198:	69f8      	ldr	r0, [r7, #28]
    a19a:	4b15      	ldr	r3, [pc, #84]	; (a1f0 <_usb_d_dev_ep_enable+0x200>)
    a19c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a19e:	697b      	ldr	r3, [r7, #20]
    a1a0:	8a1b      	ldrh	r3, [r3, #16]
    a1a2:	039b      	lsls	r3, r3, #14
    a1a4:	4c13      	ldr	r4, [pc, #76]	; (a1f4 <_usb_d_dev_ep_enable+0x204>)
    a1a6:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a1a8:	697b      	ldr	r3, [r7, #20]
    a1aa:	8a1b      	ldrh	r3, [r3, #16]
    a1ac:	4618      	mov	r0, r3
    a1ae:	4b12      	ldr	r3, [pc, #72]	; (a1f8 <_usb_d_dev_ep_enable+0x208>)
    a1b0:	4798      	blx	r3
    a1b2:	4603      	mov	r3, r0
    a1b4:	071b      	lsls	r3, r3, #28
    a1b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a1ba:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a1be:	68fb      	ldr	r3, [r7, #12]
    a1c0:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a1c2:	7efb      	ldrb	r3, [r7, #27]
    a1c4:	2200      	movs	r2, #0
    a1c6:	2100      	movs	r1, #0
    a1c8:	4618      	mov	r0, r3
    a1ca:	4b0c      	ldr	r3, [pc, #48]	; (a1fc <_usb_d_dev_ep_enable+0x20c>)
    a1cc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a1ce:	7efb      	ldrb	r3, [r7, #27]
    a1d0:	2100      	movs	r1, #0
    a1d2:	4618      	mov	r0, r3
    a1d4:	4b0b      	ldr	r3, [pc, #44]	; (a204 <_usb_d_dev_ep_enable+0x214>)
    a1d6:	4798      	blx	r3
	}

	return USB_OK;
    a1d8:	2300      	movs	r3, #0
}
    a1da:	4618      	mov	r0, r3
    a1dc:	3720      	adds	r7, #32
    a1de:	46bd      	mov	sp, r7
    a1e0:	bdb0      	pop	{r4, r5, r7, pc}
    a1e2:	bf00      	nop
    a1e4:	00008e09 	.word	0x00008e09
    a1e8:	0000848f 	.word	0x0000848f
    a1ec:	20000d18 	.word	0x20000d18
    a1f0:	00008465 	.word	0x00008465
    a1f4:	0fffc000 	.word	0x0fffc000
    a1f8:	00008da5 	.word	0x00008da5
    a1fc:	00008d4d 	.word	0x00008d4d
    a200:	00008cf5 	.word	0x00008cf5
    a204:	00008cbd 	.word	0x00008cbd
    a208:	00009d61 	.word	0x00009d61

0000a20c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a20c:	b580      	push	{r7, lr}
    a20e:	b084      	sub	sp, #16
    a210:	af00      	add	r7, sp, #0
    a212:	6078      	str	r0, [r7, #4]
    a214:	460b      	mov	r3, r1
    a216:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	7c9b      	ldrb	r3, [r3, #18]
    a21c:	f003 030f 	and.w	r3, r3, #15
    a220:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a222:	78fa      	ldrb	r2, [r7, #3]
    a224:	7bfb      	ldrb	r3, [r7, #15]
    a226:	4611      	mov	r1, r2
    a228:	4618      	mov	r0, r3
    a22a:	4b03      	ldr	r3, [pc, #12]	; (a238 <_usb_d_dev_ep_stall_get+0x2c>)
    a22c:	4798      	blx	r3
    a22e:	4603      	mov	r3, r0
}
    a230:	4618      	mov	r0, r3
    a232:	3710      	adds	r7, #16
    a234:	46bd      	mov	sp, r7
    a236:	bd80      	pop	{r7, pc}
    a238:	000088fd 	.word	0x000088fd

0000a23c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a23c:	b580      	push	{r7, lr}
    a23e:	b084      	sub	sp, #16
    a240:	af00      	add	r7, sp, #0
    a242:	6078      	str	r0, [r7, #4]
    a244:	460b      	mov	r3, r1
    a246:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a248:	687b      	ldr	r3, [r7, #4]
    a24a:	7c9b      	ldrb	r3, [r3, #18]
    a24c:	f003 030f 	and.w	r3, r3, #15
    a250:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a252:	78f9      	ldrb	r1, [r7, #3]
    a254:	7bfb      	ldrb	r3, [r7, #15]
    a256:	2201      	movs	r2, #1
    a258:	4618      	mov	r0, r3
    a25a:	4b0a      	ldr	r3, [pc, #40]	; (a284 <_usb_d_dev_ep_stall_set+0x48>)
    a25c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a25e:	78fb      	ldrb	r3, [r7, #3]
    a260:	2220      	movs	r2, #32
    a262:	409a      	lsls	r2, r3
    a264:	7bfb      	ldrb	r3, [r7, #15]
    a266:	4611      	mov	r1, r2
    a268:	4618      	mov	r0, r3
    a26a:	4b07      	ldr	r3, [pc, #28]	; (a288 <_usb_d_dev_ep_stall_set+0x4c>)
    a26c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a26e:	687a      	ldr	r2, [r7, #4]
    a270:	7cd3      	ldrb	r3, [r2, #19]
    a272:	f043 0308 	orr.w	r3, r3, #8
    a276:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a278:	2300      	movs	r3, #0
}
    a27a:	4618      	mov	r0, r3
    a27c:	3710      	adds	r7, #16
    a27e:	46bd      	mov	sp, r7
    a280:	bd80      	pop	{r7, pc}
    a282:	bf00      	nop
    a284:	000088a5 	.word	0x000088a5
    a288:	00008825 	.word	0x00008825

0000a28c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a28c:	b580      	push	{r7, lr}
    a28e:	b084      	sub	sp, #16
    a290:	af00      	add	r7, sp, #0
    a292:	6078      	str	r0, [r7, #4]
    a294:	460b      	mov	r3, r1
    a296:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	7c9b      	ldrb	r3, [r3, #18]
    a29c:	f003 030f 	and.w	r3, r3, #15
    a2a0:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a2a2:	78fa      	ldrb	r2, [r7, #3]
    a2a4:	7bfb      	ldrb	r3, [r7, #15]
    a2a6:	4611      	mov	r1, r2
    a2a8:	4618      	mov	r0, r3
    a2aa:	4b28      	ldr	r3, [pc, #160]	; (a34c <_usb_d_dev_ep_stall_clr+0xc0>)
    a2ac:	4798      	blx	r3
    a2ae:	4603      	mov	r3, r0
    a2b0:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a2b2:	7bbb      	ldrb	r3, [r7, #14]
    a2b4:	f083 0301 	eor.w	r3, r3, #1
    a2b8:	b2db      	uxtb	r3, r3
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	d001      	beq.n	a2c2 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a2be:	2300      	movs	r3, #0
    a2c0:	e040      	b.n	a344 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a2c2:	78f9      	ldrb	r1, [r7, #3]
    a2c4:	7bfb      	ldrb	r3, [r7, #15]
    a2c6:	2200      	movs	r2, #0
    a2c8:	4618      	mov	r0, r3
    a2ca:	4b21      	ldr	r3, [pc, #132]	; (a350 <_usb_d_dev_ep_stall_clr+0xc4>)
    a2cc:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a2ce:	78fb      	ldrb	r3, [r7, #3]
    a2d0:	2220      	movs	r2, #32
    a2d2:	409a      	lsls	r2, r3
    a2d4:	7bfb      	ldrb	r3, [r7, #15]
    a2d6:	4611      	mov	r1, r2
    a2d8:	4618      	mov	r0, r3
    a2da:	4b1e      	ldr	r3, [pc, #120]	; (a354 <_usb_d_dev_ep_stall_clr+0xc8>)
    a2dc:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a2de:	78fa      	ldrb	r2, [r7, #3]
    a2e0:	7bfb      	ldrb	r3, [r7, #15]
    a2e2:	4611      	mov	r1, r2
    a2e4:	4618      	mov	r0, r3
    a2e6:	4b1c      	ldr	r3, [pc, #112]	; (a358 <_usb_d_dev_ep_stall_clr+0xcc>)
    a2e8:	4798      	blx	r3
    a2ea:	4603      	mov	r3, r0
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d00b      	beq.n	a308 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a2f0:	78fa      	ldrb	r2, [r7, #3]
    a2f2:	7bfb      	ldrb	r3, [r7, #15]
    a2f4:	4611      	mov	r1, r2
    a2f6:	4618      	mov	r0, r3
    a2f8:	4b18      	ldr	r3, [pc, #96]	; (a35c <_usb_d_dev_ep_stall_clr+0xd0>)
    a2fa:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a2fc:	78f9      	ldrb	r1, [r7, #3]
    a2fe:	7bfb      	ldrb	r3, [r7, #15]
    a300:	2200      	movs	r2, #0
    a302:	4618      	mov	r0, r3
    a304:	4b16      	ldr	r3, [pc, #88]	; (a360 <_usb_d_dev_ep_stall_clr+0xd4>)
    a306:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	7cdb      	ldrb	r3, [r3, #19]
    a30c:	f003 0307 	and.w	r3, r3, #7
    a310:	b2db      	uxtb	r3, r3
    a312:	2b01      	cmp	r3, #1
    a314:	d110      	bne.n	a338 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a316:	7bfb      	ldrb	r3, [r7, #15]
    a318:	4619      	mov	r1, r3
    a31a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a31e:	4b11      	ldr	r3, [pc, #68]	; (a364 <_usb_d_dev_ep_stall_clr+0xd8>)
    a320:	4798      	blx	r3
    a322:	4603      	mov	r3, r0
    a324:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a328:	2b00      	cmp	r3, #0
    a32a:	d10a      	bne.n	a342 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a32c:	687a      	ldr	r2, [r7, #4]
    a32e:	7cd3      	ldrb	r3, [r2, #19]
    a330:	f36f 03c3 	bfc	r3, #3, #1
    a334:	74d3      	strb	r3, [r2, #19]
    a336:	e004      	b.n	a342 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a338:	687a      	ldr	r2, [r7, #4]
    a33a:	7cd3      	ldrb	r3, [r2, #19]
    a33c:	f36f 03c3 	bfc	r3, #3, #1
    a340:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a342:	2300      	movs	r3, #0
}
    a344:	4618      	mov	r0, r3
    a346:	3710      	adds	r7, #16
    a348:	46bd      	mov	sp, r7
    a34a:	bd80      	pop	{r7, pc}
    a34c:	000088fd 	.word	0x000088fd
    a350:	000088a5 	.word	0x000088a5
    a354:	0000884d 	.word	0x0000884d
    a358:	00008941 	.word	0x00008941
    a35c:	00008985 	.word	0x00008985
    a360:	00008a71 	.word	0x00008a71
    a364:	0000832d 	.word	0x0000832d

0000a368 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a368:	b580      	push	{r7, lr}
    a36a:	b086      	sub	sp, #24
    a36c:	af00      	add	r7, sp, #0
    a36e:	4603      	mov	r3, r0
    a370:	460a      	mov	r2, r1
    a372:	71fb      	strb	r3, [r7, #7]
    a374:	4613      	mov	r3, r2
    a376:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a378:	79fb      	ldrb	r3, [r7, #7]
    a37a:	f003 030f 	and.w	r3, r3, #15
    a37e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a380:	79fb      	ldrb	r3, [r7, #7]
    a382:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a386:	2b00      	cmp	r3, #0
    a388:	bf14      	ite	ne
    a38a:	2301      	movne	r3, #1
    a38c:	2300      	moveq	r3, #0
    a38e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a390:	7cba      	ldrb	r2, [r7, #18]
    a392:	7cfb      	ldrb	r3, [r7, #19]
    a394:	4611      	mov	r1, r2
    a396:	4618      	mov	r0, r3
    a398:	4b13      	ldr	r3, [pc, #76]	; (a3e8 <_usb_d_dev_ep_stall+0x80>)
    a39a:	4798      	blx	r3
    a39c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a39e:	7cfb      	ldrb	r3, [r7, #19]
    a3a0:	2b04      	cmp	r3, #4
    a3a2:	d902      	bls.n	a3aa <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a3a4:	f06f 0311 	mvn.w	r3, #17
    a3a8:	e01a      	b.n	a3e0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a3aa:	79bb      	ldrb	r3, [r7, #6]
    a3ac:	2b01      	cmp	r3, #1
    a3ae:	d106      	bne.n	a3be <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a3b0:	7cbb      	ldrb	r3, [r7, #18]
    a3b2:	4619      	mov	r1, r3
    a3b4:	68f8      	ldr	r0, [r7, #12]
    a3b6:	4b0d      	ldr	r3, [pc, #52]	; (a3ec <_usb_d_dev_ep_stall+0x84>)
    a3b8:	4798      	blx	r3
    a3ba:	6178      	str	r0, [r7, #20]
    a3bc:	e00f      	b.n	a3de <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a3be:	79bb      	ldrb	r3, [r7, #6]
    a3c0:	2b00      	cmp	r3, #0
    a3c2:	d106      	bne.n	a3d2 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a3c4:	7cbb      	ldrb	r3, [r7, #18]
    a3c6:	4619      	mov	r1, r3
    a3c8:	68f8      	ldr	r0, [r7, #12]
    a3ca:	4b09      	ldr	r3, [pc, #36]	; (a3f0 <_usb_d_dev_ep_stall+0x88>)
    a3cc:	4798      	blx	r3
    a3ce:	6178      	str	r0, [r7, #20]
    a3d0:	e005      	b.n	a3de <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a3d2:	7cbb      	ldrb	r3, [r7, #18]
    a3d4:	4619      	mov	r1, r3
    a3d6:	68f8      	ldr	r0, [r7, #12]
    a3d8:	4b06      	ldr	r3, [pc, #24]	; (a3f4 <_usb_d_dev_ep_stall+0x8c>)
    a3da:	4798      	blx	r3
    a3dc:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a3de:	697b      	ldr	r3, [r7, #20]
}
    a3e0:	4618      	mov	r0, r3
    a3e2:	3718      	adds	r7, #24
    a3e4:	46bd      	mov	sp, r7
    a3e6:	bd80      	pop	{r7, pc}
    a3e8:	00008e09 	.word	0x00008e09
    a3ec:	0000a23d 	.word	0x0000a23d
    a3f0:	0000a28d 	.word	0x0000a28d
    a3f4:	0000a20d 	.word	0x0000a20d

0000a3f8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a3f8:	b580      	push	{r7, lr}
    a3fa:	b082      	sub	sp, #8
    a3fc:	af00      	add	r7, sp, #0
    a3fe:	6078      	str	r0, [r7, #4]
    a400:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a402:	687b      	ldr	r3, [r7, #4]
    a404:	7c9b      	ldrb	r3, [r3, #18]
    a406:	2bff      	cmp	r3, #255	; 0xff
    a408:	d014      	beq.n	a434 <_usb_d_dev_trans_done+0x3c>
    a40a:	687b      	ldr	r3, [r7, #4]
    a40c:	7cdb      	ldrb	r3, [r3, #19]
    a40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a412:	b2db      	uxtb	r3, r3
    a414:	2b00      	cmp	r3, #0
    a416:	d00d      	beq.n	a434 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a418:	687a      	ldr	r2, [r7, #4]
    a41a:	7cd3      	ldrb	r3, [r2, #19]
    a41c:	f36f 1386 	bfc	r3, #6, #1
    a420:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a422:	4b06      	ldr	r3, [pc, #24]	; (a43c <_usb_d_dev_trans_done+0x44>)
    a424:	691b      	ldr	r3, [r3, #16]
    a426:	687a      	ldr	r2, [r7, #4]
    a428:	7c90      	ldrb	r0, [r2, #18]
    a42a:	687a      	ldr	r2, [r7, #4]
    a42c:	6892      	ldr	r2, [r2, #8]
    a42e:	6839      	ldr	r1, [r7, #0]
    a430:	4798      	blx	r3
    a432:	e000      	b.n	a436 <_usb_d_dev_trans_done+0x3e>
		return;
    a434:	bf00      	nop
}
    a436:	3708      	adds	r7, #8
    a438:	46bd      	mov	sp, r7
    a43a:	bd80      	pop	{r7, pc}
    a43c:	20000c50 	.word	0x20000c50

0000a440 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a440:	b580      	push	{r7, lr}
    a442:	b086      	sub	sp, #24
    a444:	af00      	add	r7, sp, #0
    a446:	60f8      	str	r0, [r7, #12]
    a448:	460b      	mov	r3, r1
    a44a:	607a      	str	r2, [r7, #4]
    a44c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a44e:	68fb      	ldr	r3, [r7, #12]
    a450:	7c9b      	ldrb	r3, [r3, #18]
    a452:	f003 030f 	and.w	r3, r3, #15
    a456:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a458:	4b1f      	ldr	r3, [pc, #124]	; (a4d8 <_usb_d_dev_trans_stop+0x98>)
    a45a:	881b      	ldrh	r3, [r3, #0]
    a45c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a45e:	68fb      	ldr	r3, [r7, #12]
    a460:	7c9b      	ldrb	r3, [r3, #18]
    a462:	2bff      	cmp	r3, #255	; 0xff
    a464:	d033      	beq.n	a4ce <_usb_d_dev_trans_stop+0x8e>
    a466:	68fb      	ldr	r3, [r7, #12]
    a468:	7cdb      	ldrb	r3, [r3, #19]
    a46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a46e:	b2db      	uxtb	r3, r3
    a470:	2b00      	cmp	r3, #0
    a472:	d02c      	beq.n	a4ce <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a474:	7afb      	ldrb	r3, [r7, #11]
    a476:	2b00      	cmp	r3, #0
    a478:	d006      	beq.n	a488 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a47a:	7dfb      	ldrb	r3, [r7, #23]
    a47c:	2200      	movs	r2, #0
    a47e:	2101      	movs	r1, #1
    a480:	4618      	mov	r0, r3
    a482:	4b16      	ldr	r3, [pc, #88]	; (a4dc <_usb_d_dev_trans_stop+0x9c>)
    a484:	4798      	blx	r3
    a486:	e005      	b.n	a494 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a488:	7dfb      	ldrb	r3, [r7, #23]
    a48a:	2200      	movs	r2, #0
    a48c:	2100      	movs	r1, #0
    a48e:	4618      	mov	r0, r3
    a490:	4b13      	ldr	r3, [pc, #76]	; (a4e0 <_usb_d_dev_trans_stop+0xa0>)
    a492:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a494:	7afb      	ldrb	r3, [r7, #11]
    a496:	f107 0218 	add.w	r2, r7, #24
    a49a:	4413      	add	r3, r2
    a49c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a4a0:	461a      	mov	r2, r3
    a4a2:	7dfb      	ldrb	r3, [r7, #23]
    a4a4:	4611      	mov	r1, r2
    a4a6:	4618      	mov	r0, r3
    a4a8:	4b0e      	ldr	r3, [pc, #56]	; (a4e4 <_usb_d_dev_trans_stop+0xa4>)
    a4aa:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a4ac:	7afb      	ldrb	r3, [r7, #11]
    a4ae:	f107 0218 	add.w	r2, r7, #24
    a4b2:	4413      	add	r3, r2
    a4b4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a4b8:	461a      	mov	r2, r3
    a4ba:	7dfb      	ldrb	r3, [r7, #23]
    a4bc:	4611      	mov	r1, r2
    a4be:	4618      	mov	r0, r3
    a4c0:	4b09      	ldr	r3, [pc, #36]	; (a4e8 <_usb_d_dev_trans_stop+0xa8>)
    a4c2:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a4c4:	6879      	ldr	r1, [r7, #4]
    a4c6:	68f8      	ldr	r0, [r7, #12]
    a4c8:	4b08      	ldr	r3, [pc, #32]	; (a4ec <_usb_d_dev_trans_stop+0xac>)
    a4ca:	4798      	blx	r3
    a4cc:	e000      	b.n	a4d0 <_usb_d_dev_trans_stop+0x90>
		return;
    a4ce:	bf00      	nop
}
    a4d0:	3718      	adds	r7, #24
    a4d2:	46bd      	mov	sp, r7
    a4d4:	bd80      	pop	{r7, pc}
    a4d6:	bf00      	nop
    a4d8:	0000f104 	.word	0x0000f104
    a4dc:	00008cf5 	.word	0x00008cf5
    a4e0:	00008d4d 	.word	0x00008d4d
    a4e4:	000087fd 	.word	0x000087fd
    a4e8:	0000884d 	.word	0x0000884d
    a4ec:	0000a3f9 	.word	0x0000a3f9

0000a4f0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a4f0:	b580      	push	{r7, lr}
    a4f2:	b086      	sub	sp, #24
    a4f4:	af00      	add	r7, sp, #0
    a4f6:	4603      	mov	r3, r0
    a4f8:	6039      	str	r1, [r7, #0]
    a4fa:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a4fc:	79fb      	ldrb	r3, [r7, #7]
    a4fe:	f003 030f 	and.w	r3, r3, #15
    a502:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a504:	7dfb      	ldrb	r3, [r7, #23]
    a506:	015b      	lsls	r3, r3, #5
    a508:	4a1e      	ldr	r2, [pc, #120]	; (a584 <_usb_d_dev_ep_read_req+0x94>)
    a50a:	4413      	add	r3, r2
    a50c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a50e:	693b      	ldr	r3, [r7, #16]
    a510:	681b      	ldr	r3, [r3, #0]
    a512:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a514:	693b      	ldr	r3, [r7, #16]
    a516:	685b      	ldr	r3, [r3, #4]
    a518:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a51c:	b29b      	uxth	r3, r3
    a51e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a520:	7dfb      	ldrb	r3, [r7, #23]
    a522:	2b04      	cmp	r3, #4
    a524:	d802      	bhi.n	a52c <_usb_d_dev_ep_read_req+0x3c>
    a526:	683b      	ldr	r3, [r7, #0]
    a528:	2b00      	cmp	r3, #0
    a52a:	d102      	bne.n	a532 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a52c:	f06f 0311 	mvn.w	r3, #17
    a530:	e023      	b.n	a57a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a532:	7dfb      	ldrb	r3, [r7, #23]
    a534:	4618      	mov	r0, r3
    a536:	4b14      	ldr	r3, [pc, #80]	; (a588 <_usb_d_dev_ep_read_req+0x98>)
    a538:	4798      	blx	r3
    a53a:	4603      	mov	r3, r0
    a53c:	f083 0301 	eor.w	r3, r3, #1
    a540:	b2db      	uxtb	r3, r3
    a542:	2b00      	cmp	r3, #0
    a544:	d002      	beq.n	a54c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a546:	f06f 0312 	mvn.w	r3, #18
    a54a:	e016      	b.n	a57a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a54c:	7dfb      	ldrb	r3, [r7, #23]
    a54e:	4618      	mov	r0, r3
    a550:	4b0e      	ldr	r3, [pc, #56]	; (a58c <_usb_d_dev_ep_read_req+0x9c>)
    a552:	4798      	blx	r3
    a554:	4603      	mov	r3, r0
    a556:	f083 0301 	eor.w	r3, r3, #1
    a55a:	b2db      	uxtb	r3, r3
    a55c:	2b00      	cmp	r3, #0
    a55e:	d001      	beq.n	a564 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a560:	2300      	movs	r3, #0
    a562:	e00a      	b.n	a57a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a564:	68fb      	ldr	r3, [r7, #12]
    a566:	2208      	movs	r2, #8
    a568:	4619      	mov	r1, r3
    a56a:	6838      	ldr	r0, [r7, #0]
    a56c:	4b08      	ldr	r3, [pc, #32]	; (a590 <_usb_d_dev_ep_read_req+0xa0>)
    a56e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a570:	7dfb      	ldrb	r3, [r7, #23]
    a572:	4618      	mov	r0, r3
    a574:	4b07      	ldr	r3, [pc, #28]	; (a594 <_usb_d_dev_ep_read_req+0xa4>)
    a576:	4798      	blx	r3

	return bytes;
    a578:	897b      	ldrh	r3, [r7, #10]
}
    a57a:	4618      	mov	r0, r3
    a57c:	3718      	adds	r7, #24
    a57e:	46bd      	mov	sp, r7
    a580:	bd80      	pop	{r7, pc}
    a582:	bf00      	nop
    a584:	20000d18 	.word	0x20000d18
    a588:	00008875 	.word	0x00008875
    a58c:	00008a21 	.word	0x00008a21
    a590:	0000e939 	.word	0x0000e939
    a594:	00008a51 	.word	0x00008a51

0000a598 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a598:	b580      	push	{r7, lr}
    a59a:	b086      	sub	sp, #24
    a59c:	af00      	add	r7, sp, #0
    a59e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a5a0:	687b      	ldr	r3, [r7, #4]
    a5a2:	7a1b      	ldrb	r3, [r3, #8]
    a5a4:	f003 030f 	and.w	r3, r3, #15
    a5a8:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a5aa:	687b      	ldr	r3, [r7, #4]
    a5ac:	7a1b      	ldrb	r3, [r3, #8]
    a5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a5b2:	2b00      	cmp	r3, #0
    a5b4:	bf14      	ite	ne
    a5b6:	2301      	movne	r3, #1
    a5b8:	2300      	moveq	r3, #0
    a5ba:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a5bc:	7d7a      	ldrb	r2, [r7, #21]
    a5be:	7dbb      	ldrb	r3, [r7, #22]
    a5c0:	4611      	mov	r1, r2
    a5c2:	4618      	mov	r0, r3
    a5c4:	4b5f      	ldr	r3, [pc, #380]	; (a744 <_usb_d_dev_ep_trans+0x1ac>)
    a5c6:	4798      	blx	r3
    a5c8:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a5ca:	693b      	ldr	r3, [r7, #16]
    a5cc:	8a1b      	ldrh	r3, [r3, #16]
    a5ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a5d2:	4293      	cmp	r3, r2
    a5d4:	d004      	beq.n	a5e0 <_usb_d_dev_ep_trans+0x48>
    a5d6:	693b      	ldr	r3, [r7, #16]
    a5d8:	8a1b      	ldrh	r3, [r3, #16]
    a5da:	3b01      	subs	r3, #1
    a5dc:	b29b      	uxth	r3, r3
    a5de:	e001      	b.n	a5e4 <_usb_d_dev_ep_trans+0x4c>
    a5e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a5e4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a5e6:	687b      	ldr	r3, [r7, #4]
    a5e8:	685a      	ldr	r2, [r3, #4]
    a5ea:	89fb      	ldrh	r3, [r7, #14]
    a5ec:	4013      	ands	r3, r2
    a5ee:	2b00      	cmp	r3, #0
    a5f0:	bf14      	ite	ne
    a5f2:	2301      	movne	r3, #1
    a5f4:	2300      	moveq	r3, #0
    a5f6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a5f8:	2300      	movs	r3, #0
    a5fa:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a5fc:	7dbb      	ldrb	r3, [r7, #22]
    a5fe:	2b04      	cmp	r3, #4
    a600:	d902      	bls.n	a608 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a602:	f06f 0311 	mvn.w	r3, #17
    a606:	e098      	b.n	a73a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a608:	687b      	ldr	r3, [r7, #4]
    a60a:	681b      	ldr	r3, [r3, #0]
    a60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a610:	d31a      	bcc.n	a648 <_usb_d_dev_ep_trans+0xb0>
    a612:	687b      	ldr	r3, [r7, #4]
    a614:	681b      	ldr	r3, [r3, #0]
    a616:	461a      	mov	r2, r3
    a618:	687b      	ldr	r3, [r7, #4]
    a61a:	685b      	ldr	r3, [r3, #4]
    a61c:	4413      	add	r3, r2
    a61e:	4a4a      	ldr	r2, [pc, #296]	; (a748 <_usb_d_dev_ep_trans+0x1b0>)
    a620:	4293      	cmp	r3, r2
    a622:	d811      	bhi.n	a648 <_usb_d_dev_ep_trans+0xb0>
    a624:	687b      	ldr	r3, [r7, #4]
    a626:	681b      	ldr	r3, [r3, #0]
    a628:	f003 0303 	and.w	r3, r3, #3
    a62c:	2b00      	cmp	r3, #0
    a62e:	d10b      	bne.n	a648 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a630:	7d7b      	ldrb	r3, [r7, #21]
    a632:	f083 0301 	eor.w	r3, r3, #1
    a636:	b2db      	uxtb	r3, r3
    a638:	2b00      	cmp	r3, #0
    a63a:	d00e      	beq.n	a65a <_usb_d_dev_ep_trans+0xc2>
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	685b      	ldr	r3, [r3, #4]
    a640:	693a      	ldr	r2, [r7, #16]
    a642:	8a12      	ldrh	r2, [r2, #16]
    a644:	4293      	cmp	r3, r2
    a646:	d208      	bcs.n	a65a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a648:	693b      	ldr	r3, [r7, #16]
    a64a:	68db      	ldr	r3, [r3, #12]
    a64c:	2b00      	cmp	r3, #0
    a64e:	d102      	bne.n	a656 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a650:	f06f 0312 	mvn.w	r3, #18
    a654:	e071      	b.n	a73a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a656:	2301      	movs	r3, #1
    a658:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a65a:	7d7b      	ldrb	r3, [r7, #21]
    a65c:	f083 0301 	eor.w	r3, r3, #1
    a660:	b2db      	uxtb	r3, r3
    a662:	2b00      	cmp	r3, #0
    a664:	d009      	beq.n	a67a <_usb_d_dev_ep_trans+0xe2>
    a666:	7b7b      	ldrb	r3, [r7, #13]
    a668:	2b00      	cmp	r3, #0
    a66a:	d006      	beq.n	a67a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a66c:	693b      	ldr	r3, [r7, #16]
    a66e:	68db      	ldr	r3, [r3, #12]
    a670:	2b00      	cmp	r3, #0
    a672:	d102      	bne.n	a67a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a674:	f06f 0311 	mvn.w	r3, #17
    a678:	e05f      	b.n	a73a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a67a:	693b      	ldr	r3, [r7, #16]
    a67c:	7cdb      	ldrb	r3, [r3, #19]
    a67e:	f003 0308 	and.w	r3, r3, #8
    a682:	b2db      	uxtb	r3, r3
    a684:	2b00      	cmp	r3, #0
    a686:	d001      	beq.n	a68c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a688:	2302      	movs	r3, #2
    a68a:	e056      	b.n	a73a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a68c:	f107 0308 	add.w	r3, r7, #8
    a690:	4618      	mov	r0, r3
    a692:	4b2e      	ldr	r3, [pc, #184]	; (a74c <_usb_d_dev_ep_trans+0x1b4>)
    a694:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a696:	693b      	ldr	r3, [r7, #16]
    a698:	7cdb      	ldrb	r3, [r3, #19]
    a69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a69e:	b2db      	uxtb	r3, r3
    a6a0:	2b00      	cmp	r3, #0
    a6a2:	d006      	beq.n	a6b2 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a6a4:	f107 0308 	add.w	r3, r7, #8
    a6a8:	4618      	mov	r0, r3
    a6aa:	4b29      	ldr	r3, [pc, #164]	; (a750 <_usb_d_dev_ep_trans+0x1b8>)
    a6ac:	4798      	blx	r3
		return USB_BUSY;
    a6ae:	2301      	movs	r3, #1
    a6b0:	e043      	b.n	a73a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a6b2:	693a      	ldr	r2, [r7, #16]
    a6b4:	7cd3      	ldrb	r3, [r2, #19]
    a6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a6ba:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a6bc:	f107 0308 	add.w	r3, r7, #8
    a6c0:	4618      	mov	r0, r3
    a6c2:	4b23      	ldr	r3, [pc, #140]	; (a750 <_usb_d_dev_ep_trans+0x1b8>)
    a6c4:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a6c6:	687b      	ldr	r3, [r7, #4]
    a6c8:	681a      	ldr	r2, [r3, #0]
    a6ca:	693b      	ldr	r3, [r7, #16]
    a6cc:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a6ce:	687b      	ldr	r3, [r7, #4]
    a6d0:	685a      	ldr	r2, [r3, #4]
    a6d2:	693b      	ldr	r3, [r7, #16]
    a6d4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a6d6:	693b      	ldr	r3, [r7, #16]
    a6d8:	2200      	movs	r2, #0
    a6da:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a6dc:	693a      	ldr	r2, [r7, #16]
    a6de:	7cd3      	ldrb	r3, [r2, #19]
    a6e0:	7d79      	ldrb	r1, [r7, #21]
    a6e2:	f361 13c7 	bfi	r3, r1, #7, #1
    a6e6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a6e8:	693a      	ldr	r2, [r7, #16]
    a6ea:	7cd3      	ldrb	r3, [r2, #19]
    a6ec:	7df9      	ldrb	r1, [r7, #23]
    a6ee:	f361 1345 	bfi	r3, r1, #5, #1
    a6f2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	7a5b      	ldrb	r3, [r3, #9]
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	d007      	beq.n	a70c <_usb_d_dev_ep_trans+0x174>
    a6fc:	7b7b      	ldrb	r3, [r7, #13]
    a6fe:	f083 0301 	eor.w	r3, r3, #1
    a702:	b2db      	uxtb	r3, r3
    a704:	2b00      	cmp	r3, #0
    a706:	d001      	beq.n	a70c <_usb_d_dev_ep_trans+0x174>
    a708:	2301      	movs	r3, #1
    a70a:	e000      	b.n	a70e <_usb_d_dev_ep_trans+0x176>
    a70c:	2300      	movs	r3, #0
    a70e:	b2db      	uxtb	r3, r3
    a710:	f003 0301 	and.w	r3, r3, #1
    a714:	b2d9      	uxtb	r1, r3
    a716:	693a      	ldr	r2, [r7, #16]
    a718:	7cd3      	ldrb	r3, [r2, #19]
    a71a:	f361 1304 	bfi	r3, r1, #4, #1
    a71e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a720:	7d7b      	ldrb	r3, [r7, #21]
    a722:	2b00      	cmp	r3, #0
    a724:	d004      	beq.n	a730 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a726:	2100      	movs	r1, #0
    a728:	6938      	ldr	r0, [r7, #16]
    a72a:	4b0a      	ldr	r3, [pc, #40]	; (a754 <_usb_d_dev_ep_trans+0x1bc>)
    a72c:	4798      	blx	r3
    a72e:	e003      	b.n	a738 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a730:	2100      	movs	r1, #0
    a732:	6938      	ldr	r0, [r7, #16]
    a734:	4b08      	ldr	r3, [pc, #32]	; (a758 <_usb_d_dev_ep_trans+0x1c0>)
    a736:	4798      	blx	r3
	}

	return ERR_NONE;
    a738:	2300      	movs	r3, #0
}
    a73a:	4618      	mov	r0, r3
    a73c:	3718      	adds	r7, #24
    a73e:	46bd      	mov	sp, r7
    a740:	bd80      	pop	{r7, pc}
    a742:	bf00      	nop
    a744:	00008e09 	.word	0x00008e09
    a748:	20041fff 	.word	0x20041fff
    a74c:	0000af65 	.word	0x0000af65
    a750:	0000af8b 	.word	0x0000af8b
    a754:	000090d1 	.word	0x000090d1
    a758:	000092e9 	.word	0x000092e9

0000a75c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a75c:	b580      	push	{r7, lr}
    a75e:	b084      	sub	sp, #16
    a760:	af00      	add	r7, sp, #0
    a762:	4603      	mov	r3, r0
    a764:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a766:	79fb      	ldrb	r3, [r7, #7]
    a768:	f003 030f 	and.w	r3, r3, #15
    a76c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a76e:	79fb      	ldrb	r3, [r7, #7]
    a770:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a774:	2b00      	cmp	r3, #0
    a776:	bf14      	ite	ne
    a778:	2301      	movne	r3, #1
    a77a:	2300      	moveq	r3, #0
    a77c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a77e:	7bba      	ldrb	r2, [r7, #14]
    a780:	7bfb      	ldrb	r3, [r7, #15]
    a782:	4611      	mov	r1, r2
    a784:	4618      	mov	r0, r3
    a786:	4b08      	ldr	r3, [pc, #32]	; (a7a8 <_usb_d_dev_ep_abort+0x4c>)
    a788:	4798      	blx	r3
    a78a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a78c:	7bfb      	ldrb	r3, [r7, #15]
    a78e:	2b04      	cmp	r3, #4
    a790:	d806      	bhi.n	a7a0 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a792:	7bbb      	ldrb	r3, [r7, #14]
    a794:	2202      	movs	r2, #2
    a796:	4619      	mov	r1, r3
    a798:	68b8      	ldr	r0, [r7, #8]
    a79a:	4b04      	ldr	r3, [pc, #16]	; (a7ac <_usb_d_dev_ep_abort+0x50>)
    a79c:	4798      	blx	r3
    a79e:	e000      	b.n	a7a2 <_usb_d_dev_ep_abort+0x46>
		return;
    a7a0:	bf00      	nop
}
    a7a2:	3710      	adds	r7, #16
    a7a4:	46bd      	mov	sp, r7
    a7a6:	bd80      	pop	{r7, pc}
    a7a8:	00008e09 	.word	0x00008e09
    a7ac:	0000a441 	.word	0x0000a441

0000a7b0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a7b0:	b480      	push	{r7}
    a7b2:	b085      	sub	sp, #20
    a7b4:	af00      	add	r7, sp, #0
    a7b6:	4603      	mov	r3, r0
    a7b8:	6039      	str	r1, [r7, #0]
    a7ba:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a7bc:	683b      	ldr	r3, [r7, #0]
    a7be:	2b00      	cmp	r3, #0
    a7c0:	d001      	beq.n	a7c6 <_usb_d_dev_register_callback+0x16>
    a7c2:	683b      	ldr	r3, [r7, #0]
    a7c4:	e000      	b.n	a7c8 <_usb_d_dev_register_callback+0x18>
    a7c6:	4b0a      	ldr	r3, [pc, #40]	; (a7f0 <_usb_d_dev_register_callback+0x40>)
    a7c8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a7ca:	79fb      	ldrb	r3, [r7, #7]
    a7cc:	2b01      	cmp	r3, #1
    a7ce:	d103      	bne.n	a7d8 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a7d0:	4a08      	ldr	r2, [pc, #32]	; (a7f4 <_usb_d_dev_register_callback+0x44>)
    a7d2:	68fb      	ldr	r3, [r7, #12]
    a7d4:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a7d6:	e005      	b.n	a7e4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a7d8:	79fb      	ldrb	r3, [r7, #7]
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d102      	bne.n	a7e4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a7de:	4a05      	ldr	r2, [pc, #20]	; (a7f4 <_usb_d_dev_register_callback+0x44>)
    a7e0:	68fb      	ldr	r3, [r7, #12]
    a7e2:	6013      	str	r3, [r2, #0]
}
    a7e4:	bf00      	nop
    a7e6:	3714      	adds	r7, #20
    a7e8:	46bd      	mov	sp, r7
    a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7ee:	4770      	bx	lr
    a7f0:	00008691 	.word	0x00008691
    a7f4:	20000c50 	.word	0x20000c50

0000a7f8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a7f8:	b480      	push	{r7}
    a7fa:	b085      	sub	sp, #20
    a7fc:	af00      	add	r7, sp, #0
    a7fe:	4603      	mov	r3, r0
    a800:	6039      	str	r1, [r7, #0]
    a802:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a804:	683b      	ldr	r3, [r7, #0]
    a806:	2b00      	cmp	r3, #0
    a808:	d001      	beq.n	a80e <_usb_d_dev_register_ep_callback+0x16>
    a80a:	683b      	ldr	r3, [r7, #0]
    a80c:	e000      	b.n	a810 <_usb_d_dev_register_ep_callback+0x18>
    a80e:	4b0e      	ldr	r3, [pc, #56]	; (a848 <_usb_d_dev_register_ep_callback+0x50>)
    a810:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a812:	79fb      	ldrb	r3, [r7, #7]
    a814:	2b00      	cmp	r3, #0
    a816:	d103      	bne.n	a820 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a818:	4a0c      	ldr	r2, [pc, #48]	; (a84c <_usb_d_dev_register_ep_callback+0x54>)
    a81a:	68fb      	ldr	r3, [r7, #12]
    a81c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a81e:	e00c      	b.n	a83a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a820:	79fb      	ldrb	r3, [r7, #7]
    a822:	2b01      	cmp	r3, #1
    a824:	d103      	bne.n	a82e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a826:	4a09      	ldr	r2, [pc, #36]	; (a84c <_usb_d_dev_register_ep_callback+0x54>)
    a828:	68fb      	ldr	r3, [r7, #12]
    a82a:	60d3      	str	r3, [r2, #12]
}
    a82c:	e005      	b.n	a83a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a82e:	79fb      	ldrb	r3, [r7, #7]
    a830:	2b02      	cmp	r3, #2
    a832:	d102      	bne.n	a83a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a834:	4a05      	ldr	r2, [pc, #20]	; (a84c <_usb_d_dev_register_ep_callback+0x54>)
    a836:	68fb      	ldr	r3, [r7, #12]
    a838:	6113      	str	r3, [r2, #16]
}
    a83a:	bf00      	nop
    a83c:	3714      	adds	r7, #20
    a83e:	46bd      	mov	sp, r7
    a840:	f85d 7b04 	ldr.w	r7, [sp], #4
    a844:	4770      	bx	lr
    a846:	bf00      	nop
    a848:	00008691 	.word	0x00008691
    a84c:	20000c50 	.word	0x20000c50

0000a850 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a850:	b580      	push	{r7, lr}
    a852:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a854:	4b01      	ldr	r3, [pc, #4]	; (a85c <USB_0_Handler+0xc>)
    a856:	4798      	blx	r3
}
    a858:	bf00      	nop
    a85a:	bd80      	pop	{r7, pc}
    a85c:	00009ac1 	.word	0x00009ac1

0000a860 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a860:	b580      	push	{r7, lr}
    a862:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a864:	4b01      	ldr	r3, [pc, #4]	; (a86c <USB_1_Handler+0xc>)
    a866:	4798      	blx	r3
}
    a868:	bf00      	nop
    a86a:	bd80      	pop	{r7, pc}
    a86c:	00009ac1 	.word	0x00009ac1

0000a870 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a870:	b580      	push	{r7, lr}
    a872:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a874:	4b01      	ldr	r3, [pc, #4]	; (a87c <USB_2_Handler+0xc>)
    a876:	4798      	blx	r3
}
    a878:	bf00      	nop
    a87a:	bd80      	pop	{r7, pc}
    a87c:	00009ac1 	.word	0x00009ac1

0000a880 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a880:	b580      	push	{r7, lr}
    a882:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a884:	4b01      	ldr	r3, [pc, #4]	; (a88c <USB_3_Handler+0xc>)
    a886:	4798      	blx	r3
}
    a888:	bf00      	nop
    a88a:	bd80      	pop	{r7, pc}
    a88c:	00009ac1 	.word	0x00009ac1

0000a890 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a890:	b480      	push	{r7}
    a892:	b083      	sub	sp, #12
    a894:	af00      	add	r7, sp, #0
    a896:	6078      	str	r0, [r7, #4]
    a898:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a89a:	bf00      	nop
    a89c:	687b      	ldr	r3, [r7, #4]
    a89e:	689a      	ldr	r2, [r3, #8]
    a8a0:	683b      	ldr	r3, [r7, #0]
    a8a2:	4013      	ands	r3, r2
    a8a4:	2b00      	cmp	r3, #0
    a8a6:	d1f9      	bne.n	a89c <hri_wdt_wait_for_sync+0xc>
	};
}
    a8a8:	bf00      	nop
    a8aa:	370c      	adds	r7, #12
    a8ac:	46bd      	mov	sp, r7
    a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8b2:	4770      	bx	lr

0000a8b4 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a8b4:	b580      	push	{r7, lr}
    a8b6:	b084      	sub	sp, #16
    a8b8:	af00      	add	r7, sp, #0
    a8ba:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a8bc:	210e      	movs	r1, #14
    a8be:	6878      	ldr	r0, [r7, #4]
    a8c0:	4b0a      	ldr	r3, [pc, #40]	; (a8ec <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a8c2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	781b      	ldrb	r3, [r3, #0]
    a8c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a8ca:	7bfb      	ldrb	r3, [r7, #15]
    a8cc:	085b      	lsrs	r3, r3, #1
    a8ce:	b2db      	uxtb	r3, r3
    a8d0:	f003 0301 	and.w	r3, r3, #1
    a8d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a8d6:	7bfb      	ldrb	r3, [r7, #15]
    a8d8:	2b00      	cmp	r3, #0
    a8da:	bf14      	ite	ne
    a8dc:	2301      	movne	r3, #1
    a8de:	2300      	moveq	r3, #0
    a8e0:	b2db      	uxtb	r3, r3
}
    a8e2:	4618      	mov	r0, r3
    a8e4:	3710      	adds	r7, #16
    a8e6:	46bd      	mov	sp, r7
    a8e8:	bd80      	pop	{r7, pc}
    a8ea:	bf00      	nop
    a8ec:	0000a891 	.word	0x0000a891

0000a8f0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a8f0:	b580      	push	{r7, lr}
    a8f2:	b082      	sub	sp, #8
    a8f4:	af00      	add	r7, sp, #0
    a8f6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a8f8:	687b      	ldr	r3, [r7, #4]
    a8fa:	781b      	ldrb	r3, [r3, #0]
    a8fc:	b2db      	uxtb	r3, r3
    a8fe:	f023 0304 	bic.w	r3, r3, #4
    a902:	b2da      	uxtb	r2, r3
    a904:	687b      	ldr	r3, [r7, #4]
    a906:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a908:	210e      	movs	r1, #14
    a90a:	6878      	ldr	r0, [r7, #4]
    a90c:	4b02      	ldr	r3, [pc, #8]	; (a918 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a90e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a910:	bf00      	nop
    a912:	3708      	adds	r7, #8
    a914:	46bd      	mov	sp, r7
    a916:	bd80      	pop	{r7, pc}
    a918:	0000a891 	.word	0x0000a891

0000a91c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a91c:	b580      	push	{r7, lr}
    a91e:	b084      	sub	sp, #16
    a920:	af00      	add	r7, sp, #0
    a922:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a924:	210e      	movs	r1, #14
    a926:	6878      	ldr	r0, [r7, #4]
    a928:	4b08      	ldr	r3, [pc, #32]	; (a94c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a92a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a92c:	687b      	ldr	r3, [r7, #4]
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a932:	7bfb      	ldrb	r3, [r7, #15]
    a934:	09db      	lsrs	r3, r3, #7
    a936:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a938:	7bfb      	ldrb	r3, [r7, #15]
    a93a:	2b00      	cmp	r3, #0
    a93c:	bf14      	ite	ne
    a93e:	2301      	movne	r3, #1
    a940:	2300      	moveq	r3, #0
    a942:	b2db      	uxtb	r3, r3
}
    a944:	4618      	mov	r0, r3
    a946:	3710      	adds	r7, #16
    a948:	46bd      	mov	sp, r7
    a94a:	bd80      	pop	{r7, pc}
    a94c:	0000a891 	.word	0x0000a891

0000a950 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a950:	b480      	push	{r7}
    a952:	b085      	sub	sp, #20
    a954:	af00      	add	r7, sp, #0
    a956:	6078      	str	r0, [r7, #4]
    a958:	460b      	mov	r3, r1
    a95a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a95c:	687b      	ldr	r3, [r7, #4]
    a95e:	785b      	ldrb	r3, [r3, #1]
    a960:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a962:	7bfb      	ldrb	r3, [r7, #15]
    a964:	f023 030f 	bic.w	r3, r3, #15
    a968:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a96a:	78fb      	ldrb	r3, [r7, #3]
    a96c:	f003 030f 	and.w	r3, r3, #15
    a970:	b2da      	uxtb	r2, r3
    a972:	7bfb      	ldrb	r3, [r7, #15]
    a974:	4313      	orrs	r3, r2
    a976:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a978:	687b      	ldr	r3, [r7, #4]
    a97a:	7bfa      	ldrb	r2, [r7, #15]
    a97c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a97e:	bf00      	nop
    a980:	3714      	adds	r7, #20
    a982:	46bd      	mov	sp, r7
    a984:	f85d 7b04 	ldr.w	r7, [sp], #4
    a988:	4770      	bx	lr
	...

0000a98c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a98c:	b580      	push	{r7, lr}
    a98e:	b082      	sub	sp, #8
    a990:	af00      	add	r7, sp, #0
    a992:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a994:	687b      	ldr	r3, [r7, #4]
    a996:	2b00      	cmp	r3, #0
    a998:	d005      	beq.n	a9a6 <_wdt_init+0x1a>
    a99a:	687b      	ldr	r3, [r7, #4]
    a99c:	681b      	ldr	r3, [r3, #0]
    a99e:	2b00      	cmp	r3, #0
    a9a0:	d001      	beq.n	a9a6 <_wdt_init+0x1a>
    a9a2:	2301      	movs	r3, #1
    a9a4:	e000      	b.n	a9a8 <_wdt_init+0x1c>
    a9a6:	2300      	movs	r3, #0
    a9a8:	f003 0301 	and.w	r3, r3, #1
    a9ac:	b2db      	uxtb	r3, r3
    a9ae:	2250      	movs	r2, #80	; 0x50
    a9b0:	4913      	ldr	r1, [pc, #76]	; (aa00 <_wdt_init+0x74>)
    a9b2:	4618      	mov	r0, r3
    a9b4:	4b13      	ldr	r3, [pc, #76]	; (aa04 <_wdt_init+0x78>)
    a9b6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a9b8:	687b      	ldr	r3, [r7, #4]
    a9ba:	681b      	ldr	r3, [r3, #0]
    a9bc:	4618      	mov	r0, r3
    a9be:	4b12      	ldr	r3, [pc, #72]	; (aa08 <_wdt_init+0x7c>)
    a9c0:	4798      	blx	r3
    a9c2:	4603      	mov	r3, r0
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	d107      	bne.n	a9d8 <_wdt_init+0x4c>
    a9c8:	687b      	ldr	r3, [r7, #4]
    a9ca:	681b      	ldr	r3, [r3, #0]
    a9cc:	4618      	mov	r0, r3
    a9ce:	4b0f      	ldr	r3, [pc, #60]	; (aa0c <_wdt_init+0x80>)
    a9d0:	4798      	blx	r3
    a9d2:	4603      	mov	r3, r0
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d002      	beq.n	a9de <_wdt_init+0x52>
		return ERR_DENIED;
    a9d8:	f06f 0310 	mvn.w	r3, #16
    a9dc:	e00b      	b.n	a9f6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a9de:	687b      	ldr	r3, [r7, #4]
    a9e0:	681b      	ldr	r3, [r3, #0]
    a9e2:	4618      	mov	r0, r3
    a9e4:	4b0a      	ldr	r3, [pc, #40]	; (aa10 <_wdt_init+0x84>)
    a9e6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a9e8:	687b      	ldr	r3, [r7, #4]
    a9ea:	681b      	ldr	r3, [r3, #0]
    a9ec:	210b      	movs	r1, #11
    a9ee:	4618      	mov	r0, r3
    a9f0:	4b08      	ldr	r3, [pc, #32]	; (aa14 <_wdt_init+0x88>)
    a9f2:	4798      	blx	r3
	}

	return ERR_NONE;
    a9f4:	2300      	movs	r3, #0
}
    a9f6:	4618      	mov	r0, r3
    a9f8:	3708      	adds	r7, #8
    a9fa:	46bd      	mov	sp, r7
    a9fc:	bd80      	pop	{r7, pc}
    a9fe:	bf00      	nop
    aa00:	0000f108 	.word	0x0000f108
    aa04:	0000341d 	.word	0x0000341d
    aa08:	0000a91d 	.word	0x0000a91d
    aa0c:	0000a8b5 	.word	0x0000a8b5
    aa10:	0000a8f1 	.word	0x0000a8f1
    aa14:	0000a951 	.word	0x0000a951

0000aa18 <hri_port_set_DIR_reg>:
{
    aa18:	b480      	push	{r7}
    aa1a:	b085      	sub	sp, #20
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	60f8      	str	r0, [r7, #12]
    aa20:	460b      	mov	r3, r1
    aa22:	607a      	str	r2, [r7, #4]
    aa24:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    aa26:	7afb      	ldrb	r3, [r7, #11]
    aa28:	68fa      	ldr	r2, [r7, #12]
    aa2a:	01db      	lsls	r3, r3, #7
    aa2c:	4413      	add	r3, r2
    aa2e:	3308      	adds	r3, #8
    aa30:	687a      	ldr	r2, [r7, #4]
    aa32:	601a      	str	r2, [r3, #0]
}
    aa34:	bf00      	nop
    aa36:	3714      	adds	r7, #20
    aa38:	46bd      	mov	sp, r7
    aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa3e:	4770      	bx	lr

0000aa40 <hri_port_clear_DIR_reg>:
{
    aa40:	b480      	push	{r7}
    aa42:	b085      	sub	sp, #20
    aa44:	af00      	add	r7, sp, #0
    aa46:	60f8      	str	r0, [r7, #12]
    aa48:	460b      	mov	r3, r1
    aa4a:	607a      	str	r2, [r7, #4]
    aa4c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    aa4e:	7afb      	ldrb	r3, [r7, #11]
    aa50:	68fa      	ldr	r2, [r7, #12]
    aa52:	01db      	lsls	r3, r3, #7
    aa54:	4413      	add	r3, r2
    aa56:	3304      	adds	r3, #4
    aa58:	687a      	ldr	r2, [r7, #4]
    aa5a:	601a      	str	r2, [r3, #0]
}
    aa5c:	bf00      	nop
    aa5e:	3714      	adds	r7, #20
    aa60:	46bd      	mov	sp, r7
    aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa66:	4770      	bx	lr

0000aa68 <hri_port_set_OUT_reg>:
{
    aa68:	b480      	push	{r7}
    aa6a:	b085      	sub	sp, #20
    aa6c:	af00      	add	r7, sp, #0
    aa6e:	60f8      	str	r0, [r7, #12]
    aa70:	460b      	mov	r3, r1
    aa72:	607a      	str	r2, [r7, #4]
    aa74:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    aa76:	7afb      	ldrb	r3, [r7, #11]
    aa78:	68fa      	ldr	r2, [r7, #12]
    aa7a:	01db      	lsls	r3, r3, #7
    aa7c:	4413      	add	r3, r2
    aa7e:	3318      	adds	r3, #24
    aa80:	687a      	ldr	r2, [r7, #4]
    aa82:	601a      	str	r2, [r3, #0]
}
    aa84:	bf00      	nop
    aa86:	3714      	adds	r7, #20
    aa88:	46bd      	mov	sp, r7
    aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa8e:	4770      	bx	lr

0000aa90 <hri_port_clear_OUT_reg>:
{
    aa90:	b480      	push	{r7}
    aa92:	b085      	sub	sp, #20
    aa94:	af00      	add	r7, sp, #0
    aa96:	60f8      	str	r0, [r7, #12]
    aa98:	460b      	mov	r3, r1
    aa9a:	607a      	str	r2, [r7, #4]
    aa9c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    aa9e:	7afb      	ldrb	r3, [r7, #11]
    aaa0:	68fa      	ldr	r2, [r7, #12]
    aaa2:	01db      	lsls	r3, r3, #7
    aaa4:	4413      	add	r3, r2
    aaa6:	3314      	adds	r3, #20
    aaa8:	687a      	ldr	r2, [r7, #4]
    aaaa:	601a      	str	r2, [r3, #0]
}
    aaac:	bf00      	nop
    aaae:	3714      	adds	r7, #20
    aab0:	46bd      	mov	sp, r7
    aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aab6:	4770      	bx	lr

0000aab8 <hri_port_write_PMUX_PMUXE_bf>:
{
    aab8:	b480      	push	{r7}
    aaba:	b085      	sub	sp, #20
    aabc:	af00      	add	r7, sp, #0
    aabe:	6078      	str	r0, [r7, #4]
    aac0:	4608      	mov	r0, r1
    aac2:	4611      	mov	r1, r2
    aac4:	461a      	mov	r2, r3
    aac6:	4603      	mov	r3, r0
    aac8:	70fb      	strb	r3, [r7, #3]
    aaca:	460b      	mov	r3, r1
    aacc:	70bb      	strb	r3, [r7, #2]
    aace:	4613      	mov	r3, r2
    aad0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    aad2:	78fa      	ldrb	r2, [r7, #3]
    aad4:	78bb      	ldrb	r3, [r7, #2]
    aad6:	6879      	ldr	r1, [r7, #4]
    aad8:	01d2      	lsls	r2, r2, #7
    aada:	440a      	add	r2, r1
    aadc:	4413      	add	r3, r2
    aade:	3330      	adds	r3, #48	; 0x30
    aae0:	781b      	ldrb	r3, [r3, #0]
    aae2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    aae4:	7bfb      	ldrb	r3, [r7, #15]
    aae6:	f023 030f 	bic.w	r3, r3, #15
    aaea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    aaec:	787b      	ldrb	r3, [r7, #1]
    aaee:	f003 030f 	and.w	r3, r3, #15
    aaf2:	b2da      	uxtb	r2, r3
    aaf4:	7bfb      	ldrb	r3, [r7, #15]
    aaf6:	4313      	orrs	r3, r2
    aaf8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    aafa:	78fa      	ldrb	r2, [r7, #3]
    aafc:	78bb      	ldrb	r3, [r7, #2]
    aafe:	6879      	ldr	r1, [r7, #4]
    ab00:	01d2      	lsls	r2, r2, #7
    ab02:	440a      	add	r2, r1
    ab04:	4413      	add	r3, r2
    ab06:	3330      	adds	r3, #48	; 0x30
    ab08:	7bfa      	ldrb	r2, [r7, #15]
    ab0a:	701a      	strb	r2, [r3, #0]
}
    ab0c:	bf00      	nop
    ab0e:	3714      	adds	r7, #20
    ab10:	46bd      	mov	sp, r7
    ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab16:	4770      	bx	lr

0000ab18 <hri_port_write_PMUX_PMUXO_bf>:
{
    ab18:	b480      	push	{r7}
    ab1a:	b085      	sub	sp, #20
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	6078      	str	r0, [r7, #4]
    ab20:	4608      	mov	r0, r1
    ab22:	4611      	mov	r1, r2
    ab24:	461a      	mov	r2, r3
    ab26:	4603      	mov	r3, r0
    ab28:	70fb      	strb	r3, [r7, #3]
    ab2a:	460b      	mov	r3, r1
    ab2c:	70bb      	strb	r3, [r7, #2]
    ab2e:	4613      	mov	r3, r2
    ab30:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ab32:	78fa      	ldrb	r2, [r7, #3]
    ab34:	78bb      	ldrb	r3, [r7, #2]
    ab36:	6879      	ldr	r1, [r7, #4]
    ab38:	01d2      	lsls	r2, r2, #7
    ab3a:	440a      	add	r2, r1
    ab3c:	4413      	add	r3, r2
    ab3e:	3330      	adds	r3, #48	; 0x30
    ab40:	781b      	ldrb	r3, [r3, #0]
    ab42:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ab44:	7bfb      	ldrb	r3, [r7, #15]
    ab46:	f003 030f 	and.w	r3, r3, #15
    ab4a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    ab4c:	787b      	ldrb	r3, [r7, #1]
    ab4e:	011b      	lsls	r3, r3, #4
    ab50:	b2da      	uxtb	r2, r3
    ab52:	7bfb      	ldrb	r3, [r7, #15]
    ab54:	4313      	orrs	r3, r2
    ab56:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ab58:	78fa      	ldrb	r2, [r7, #3]
    ab5a:	78bb      	ldrb	r3, [r7, #2]
    ab5c:	6879      	ldr	r1, [r7, #4]
    ab5e:	01d2      	lsls	r2, r2, #7
    ab60:	440a      	add	r2, r1
    ab62:	4413      	add	r3, r2
    ab64:	3330      	adds	r3, #48	; 0x30
    ab66:	7bfa      	ldrb	r2, [r7, #15]
    ab68:	701a      	strb	r2, [r3, #0]
}
    ab6a:	bf00      	nop
    ab6c:	3714      	adds	r7, #20
    ab6e:	46bd      	mov	sp, r7
    ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab74:	4770      	bx	lr

0000ab76 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ab76:	b480      	push	{r7}
    ab78:	b085      	sub	sp, #20
    ab7a:	af00      	add	r7, sp, #0
    ab7c:	6078      	str	r0, [r7, #4]
    ab7e:	4608      	mov	r0, r1
    ab80:	4611      	mov	r1, r2
    ab82:	461a      	mov	r2, r3
    ab84:	4603      	mov	r3, r0
    ab86:	70fb      	strb	r3, [r7, #3]
    ab88:	460b      	mov	r3, r1
    ab8a:	70bb      	strb	r3, [r7, #2]
    ab8c:	4613      	mov	r3, r2
    ab8e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ab90:	78fa      	ldrb	r2, [r7, #3]
    ab92:	78bb      	ldrb	r3, [r7, #2]
    ab94:	6879      	ldr	r1, [r7, #4]
    ab96:	01d2      	lsls	r2, r2, #7
    ab98:	440a      	add	r2, r1
    ab9a:	4413      	add	r3, r2
    ab9c:	3340      	adds	r3, #64	; 0x40
    ab9e:	781b      	ldrb	r3, [r3, #0]
    aba0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    aba2:	7bfb      	ldrb	r3, [r7, #15]
    aba4:	f023 0301 	bic.w	r3, r3, #1
    aba8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    abaa:	787a      	ldrb	r2, [r7, #1]
    abac:	7bfb      	ldrb	r3, [r7, #15]
    abae:	4313      	orrs	r3, r2
    abb0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    abb2:	78fa      	ldrb	r2, [r7, #3]
    abb4:	78bb      	ldrb	r3, [r7, #2]
    abb6:	6879      	ldr	r1, [r7, #4]
    abb8:	01d2      	lsls	r2, r2, #7
    abba:	440a      	add	r2, r1
    abbc:	4413      	add	r3, r2
    abbe:	3340      	adds	r3, #64	; 0x40
    abc0:	7bfa      	ldrb	r2, [r7, #15]
    abc2:	701a      	strb	r2, [r3, #0]
}
    abc4:	bf00      	nop
    abc6:	3714      	adds	r7, #20
    abc8:	46bd      	mov	sp, r7
    abca:	f85d 7b04 	ldr.w	r7, [sp], #4
    abce:	4770      	bx	lr

0000abd0 <hri_port_write_WRCONFIG_reg>:
{
    abd0:	b480      	push	{r7}
    abd2:	b085      	sub	sp, #20
    abd4:	af00      	add	r7, sp, #0
    abd6:	60f8      	str	r0, [r7, #12]
    abd8:	460b      	mov	r3, r1
    abda:	607a      	str	r2, [r7, #4]
    abdc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    abde:	7afb      	ldrb	r3, [r7, #11]
    abe0:	68fa      	ldr	r2, [r7, #12]
    abe2:	01db      	lsls	r3, r3, #7
    abe4:	4413      	add	r3, r2
    abe6:	3328      	adds	r3, #40	; 0x28
    abe8:	687a      	ldr	r2, [r7, #4]
    abea:	601a      	str	r2, [r3, #0]
}
    abec:	bf00      	nop
    abee:	3714      	adds	r7, #20
    abf0:	46bd      	mov	sp, r7
    abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf6:	4770      	bx	lr

0000abf8 <_gpio_set_direction>:
{
    abf8:	b580      	push	{r7, lr}
    abfa:	b082      	sub	sp, #8
    abfc:	af00      	add	r7, sp, #0
    abfe:	4603      	mov	r3, r0
    ac00:	6039      	str	r1, [r7, #0]
    ac02:	71fb      	strb	r3, [r7, #7]
    ac04:	4613      	mov	r3, r2
    ac06:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ac08:	79bb      	ldrb	r3, [r7, #6]
    ac0a:	2b01      	cmp	r3, #1
    ac0c:	d01c      	beq.n	ac48 <_gpio_set_direction+0x50>
    ac0e:	2b02      	cmp	r3, #2
    ac10:	d037      	beq.n	ac82 <_gpio_set_direction+0x8a>
    ac12:	2b00      	cmp	r3, #0
    ac14:	d14e      	bne.n	acb4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ac16:	79fb      	ldrb	r3, [r7, #7]
    ac18:	683a      	ldr	r2, [r7, #0]
    ac1a:	4619      	mov	r1, r3
    ac1c:	482a      	ldr	r0, [pc, #168]	; (acc8 <_gpio_set_direction+0xd0>)
    ac1e:	4b2b      	ldr	r3, [pc, #172]	; (accc <_gpio_set_direction+0xd4>)
    ac20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ac22:	683b      	ldr	r3, [r7, #0]
    ac24:	b29b      	uxth	r3, r3
    ac26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ac2a:	79fb      	ldrb	r3, [r7, #7]
    ac2c:	4619      	mov	r1, r3
    ac2e:	4826      	ldr	r0, [pc, #152]	; (acc8 <_gpio_set_direction+0xd0>)
    ac30:	4b27      	ldr	r3, [pc, #156]	; (acd0 <_gpio_set_direction+0xd8>)
    ac32:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ac34:	683b      	ldr	r3, [r7, #0]
    ac36:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ac38:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ac3c:	79fb      	ldrb	r3, [r7, #7]
    ac3e:	4619      	mov	r1, r3
    ac40:	4821      	ldr	r0, [pc, #132]	; (acc8 <_gpio_set_direction+0xd0>)
    ac42:	4b23      	ldr	r3, [pc, #140]	; (acd0 <_gpio_set_direction+0xd8>)
    ac44:	4798      	blx	r3
		break;
    ac46:	e03a      	b.n	acbe <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ac48:	79fb      	ldrb	r3, [r7, #7]
    ac4a:	683a      	ldr	r2, [r7, #0]
    ac4c:	4619      	mov	r1, r3
    ac4e:	481e      	ldr	r0, [pc, #120]	; (acc8 <_gpio_set_direction+0xd0>)
    ac50:	4b1e      	ldr	r3, [pc, #120]	; (accc <_gpio_set_direction+0xd4>)
    ac52:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ac54:	683b      	ldr	r3, [r7, #0]
    ac56:	b29b      	uxth	r3, r3
    ac58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ac5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ac60:	79f9      	ldrb	r1, [r7, #7]
    ac62:	461a      	mov	r2, r3
    ac64:	4818      	ldr	r0, [pc, #96]	; (acc8 <_gpio_set_direction+0xd0>)
    ac66:	4b1a      	ldr	r3, [pc, #104]	; (acd0 <_gpio_set_direction+0xd8>)
    ac68:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ac6a:	683b      	ldr	r3, [r7, #0]
    ac6c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ac6e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ac72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ac76:	79f9      	ldrb	r1, [r7, #7]
    ac78:	461a      	mov	r2, r3
    ac7a:	4813      	ldr	r0, [pc, #76]	; (acc8 <_gpio_set_direction+0xd0>)
    ac7c:	4b14      	ldr	r3, [pc, #80]	; (acd0 <_gpio_set_direction+0xd8>)
    ac7e:	4798      	blx	r3
		break;
    ac80:	e01d      	b.n	acbe <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ac82:	79fb      	ldrb	r3, [r7, #7]
    ac84:	683a      	ldr	r2, [r7, #0]
    ac86:	4619      	mov	r1, r3
    ac88:	480f      	ldr	r0, [pc, #60]	; (acc8 <_gpio_set_direction+0xd0>)
    ac8a:	4b12      	ldr	r3, [pc, #72]	; (acd4 <_gpio_set_direction+0xdc>)
    ac8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ac8e:	683b      	ldr	r3, [r7, #0]
    ac90:	b29b      	uxth	r3, r3
    ac92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ac96:	79fb      	ldrb	r3, [r7, #7]
    ac98:	4619      	mov	r1, r3
    ac9a:	480b      	ldr	r0, [pc, #44]	; (acc8 <_gpio_set_direction+0xd0>)
    ac9c:	4b0c      	ldr	r3, [pc, #48]	; (acd0 <_gpio_set_direction+0xd8>)
    ac9e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    aca0:	683b      	ldr	r3, [r7, #0]
    aca2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    aca4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    aca8:	79fb      	ldrb	r3, [r7, #7]
    acaa:	4619      	mov	r1, r3
    acac:	4806      	ldr	r0, [pc, #24]	; (acc8 <_gpio_set_direction+0xd0>)
    acae:	4b08      	ldr	r3, [pc, #32]	; (acd0 <_gpio_set_direction+0xd8>)
    acb0:	4798      	blx	r3
		break;
    acb2:	e004      	b.n	acbe <_gpio_set_direction+0xc6>
		ASSERT(false);
    acb4:	2246      	movs	r2, #70	; 0x46
    acb6:	4908      	ldr	r1, [pc, #32]	; (acd8 <_gpio_set_direction+0xe0>)
    acb8:	2000      	movs	r0, #0
    acba:	4b08      	ldr	r3, [pc, #32]	; (acdc <_gpio_set_direction+0xe4>)
    acbc:	4798      	blx	r3
}
    acbe:	bf00      	nop
    acc0:	3708      	adds	r7, #8
    acc2:	46bd      	mov	sp, r7
    acc4:	bd80      	pop	{r7, pc}
    acc6:	bf00      	nop
    acc8:	41008000 	.word	0x41008000
    accc:	0000aa41 	.word	0x0000aa41
    acd0:	0000abd1 	.word	0x0000abd1
    acd4:	0000aa19 	.word	0x0000aa19
    acd8:	0000f120 	.word	0x0000f120
    acdc:	0000341d 	.word	0x0000341d

0000ace0 <_gpio_set_level>:
{
    ace0:	b580      	push	{r7, lr}
    ace2:	b082      	sub	sp, #8
    ace4:	af00      	add	r7, sp, #0
    ace6:	4603      	mov	r3, r0
    ace8:	6039      	str	r1, [r7, #0]
    acea:	71fb      	strb	r3, [r7, #7]
    acec:	4613      	mov	r3, r2
    acee:	71bb      	strb	r3, [r7, #6]
	if (level) {
    acf0:	79bb      	ldrb	r3, [r7, #6]
    acf2:	2b00      	cmp	r3, #0
    acf4:	d006      	beq.n	ad04 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    acf6:	79fb      	ldrb	r3, [r7, #7]
    acf8:	683a      	ldr	r2, [r7, #0]
    acfa:	4619      	mov	r1, r3
    acfc:	4806      	ldr	r0, [pc, #24]	; (ad18 <_gpio_set_level+0x38>)
    acfe:	4b07      	ldr	r3, [pc, #28]	; (ad1c <_gpio_set_level+0x3c>)
    ad00:	4798      	blx	r3
}
    ad02:	e005      	b.n	ad10 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ad04:	79fb      	ldrb	r3, [r7, #7]
    ad06:	683a      	ldr	r2, [r7, #0]
    ad08:	4619      	mov	r1, r3
    ad0a:	4803      	ldr	r0, [pc, #12]	; (ad18 <_gpio_set_level+0x38>)
    ad0c:	4b04      	ldr	r3, [pc, #16]	; (ad20 <_gpio_set_level+0x40>)
    ad0e:	4798      	blx	r3
}
    ad10:	bf00      	nop
    ad12:	3708      	adds	r7, #8
    ad14:	46bd      	mov	sp, r7
    ad16:	bd80      	pop	{r7, pc}
    ad18:	41008000 	.word	0x41008000
    ad1c:	0000aa69 	.word	0x0000aa69
    ad20:	0000aa91 	.word	0x0000aa91

0000ad24 <_gpio_set_pin_function>:
{
    ad24:	b590      	push	{r4, r7, lr}
    ad26:	b085      	sub	sp, #20
    ad28:	af00      	add	r7, sp, #0
    ad2a:	6078      	str	r0, [r7, #4]
    ad2c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ad2e:	687b      	ldr	r3, [r7, #4]
    ad30:	095b      	lsrs	r3, r3, #5
    ad32:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ad34:	687b      	ldr	r3, [r7, #4]
    ad36:	b2db      	uxtb	r3, r3
    ad38:	f003 031f 	and.w	r3, r3, #31
    ad3c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ad3e:	683b      	ldr	r3, [r7, #0]
    ad40:	f1b3 3fff 	cmp.w	r3, #4294967295
    ad44:	d106      	bne.n	ad54 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ad46:	7bba      	ldrb	r2, [r7, #14]
    ad48:	7bf9      	ldrb	r1, [r7, #15]
    ad4a:	2300      	movs	r3, #0
    ad4c:	4812      	ldr	r0, [pc, #72]	; (ad98 <_gpio_set_pin_function+0x74>)
    ad4e:	4c13      	ldr	r4, [pc, #76]	; (ad9c <_gpio_set_pin_function+0x78>)
    ad50:	47a0      	blx	r4
}
    ad52:	e01d      	b.n	ad90 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ad54:	7bba      	ldrb	r2, [r7, #14]
    ad56:	7bf9      	ldrb	r1, [r7, #15]
    ad58:	2301      	movs	r3, #1
    ad5a:	480f      	ldr	r0, [pc, #60]	; (ad98 <_gpio_set_pin_function+0x74>)
    ad5c:	4c0f      	ldr	r4, [pc, #60]	; (ad9c <_gpio_set_pin_function+0x78>)
    ad5e:	47a0      	blx	r4
		if (pin & 1) {
    ad60:	7bbb      	ldrb	r3, [r7, #14]
    ad62:	f003 0301 	and.w	r3, r3, #1
    ad66:	2b00      	cmp	r3, #0
    ad68:	d009      	beq.n	ad7e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ad6a:	7bbb      	ldrb	r3, [r7, #14]
    ad6c:	085b      	lsrs	r3, r3, #1
    ad6e:	b2da      	uxtb	r2, r3
    ad70:	683b      	ldr	r3, [r7, #0]
    ad72:	b2db      	uxtb	r3, r3
    ad74:	7bf9      	ldrb	r1, [r7, #15]
    ad76:	4808      	ldr	r0, [pc, #32]	; (ad98 <_gpio_set_pin_function+0x74>)
    ad78:	4c09      	ldr	r4, [pc, #36]	; (ada0 <_gpio_set_pin_function+0x7c>)
    ad7a:	47a0      	blx	r4
}
    ad7c:	e008      	b.n	ad90 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ad7e:	7bbb      	ldrb	r3, [r7, #14]
    ad80:	085b      	lsrs	r3, r3, #1
    ad82:	b2da      	uxtb	r2, r3
    ad84:	683b      	ldr	r3, [r7, #0]
    ad86:	b2db      	uxtb	r3, r3
    ad88:	7bf9      	ldrb	r1, [r7, #15]
    ad8a:	4803      	ldr	r0, [pc, #12]	; (ad98 <_gpio_set_pin_function+0x74>)
    ad8c:	4c05      	ldr	r4, [pc, #20]	; (ada4 <_gpio_set_pin_function+0x80>)
    ad8e:	47a0      	blx	r4
}
    ad90:	bf00      	nop
    ad92:	3714      	adds	r7, #20
    ad94:	46bd      	mov	sp, r7
    ad96:	bd90      	pop	{r4, r7, pc}
    ad98:	41008000 	.word	0x41008000
    ad9c:	0000ab77 	.word	0x0000ab77
    ada0:	0000ab19 	.word	0x0000ab19
    ada4:	0000aab9 	.word	0x0000aab9

0000ada8 <gpio_set_pin_function>:
{
    ada8:	b580      	push	{r7, lr}
    adaa:	b082      	sub	sp, #8
    adac:	af00      	add	r7, sp, #0
    adae:	6078      	str	r0, [r7, #4]
    adb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    adb2:	6839      	ldr	r1, [r7, #0]
    adb4:	6878      	ldr	r0, [r7, #4]
    adb6:	4b03      	ldr	r3, [pc, #12]	; (adc4 <gpio_set_pin_function+0x1c>)
    adb8:	4798      	blx	r3
}
    adba:	bf00      	nop
    adbc:	3708      	adds	r7, #8
    adbe:	46bd      	mov	sp, r7
    adc0:	bd80      	pop	{r7, pc}
    adc2:	bf00      	nop
    adc4:	0000ad25 	.word	0x0000ad25

0000adc8 <gpio_set_pin_direction>:
{
    adc8:	b580      	push	{r7, lr}
    adca:	b082      	sub	sp, #8
    adcc:	af00      	add	r7, sp, #0
    adce:	4603      	mov	r3, r0
    add0:	460a      	mov	r2, r1
    add2:	71fb      	strb	r3, [r7, #7]
    add4:	4613      	mov	r3, r2
    add6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    add8:	79fb      	ldrb	r3, [r7, #7]
    adda:	095b      	lsrs	r3, r3, #5
    addc:	b2d8      	uxtb	r0, r3
    adde:	79fb      	ldrb	r3, [r7, #7]
    ade0:	f003 031f 	and.w	r3, r3, #31
    ade4:	2201      	movs	r2, #1
    ade6:	fa02 f303 	lsl.w	r3, r2, r3
    adea:	79ba      	ldrb	r2, [r7, #6]
    adec:	4619      	mov	r1, r3
    adee:	4b03      	ldr	r3, [pc, #12]	; (adfc <gpio_set_pin_direction+0x34>)
    adf0:	4798      	blx	r3
}
    adf2:	bf00      	nop
    adf4:	3708      	adds	r7, #8
    adf6:	46bd      	mov	sp, r7
    adf8:	bd80      	pop	{r7, pc}
    adfa:	bf00      	nop
    adfc:	0000abf9 	.word	0x0000abf9

0000ae00 <gpio_set_pin_level>:
{
    ae00:	b580      	push	{r7, lr}
    ae02:	b082      	sub	sp, #8
    ae04:	af00      	add	r7, sp, #0
    ae06:	4603      	mov	r3, r0
    ae08:	460a      	mov	r2, r1
    ae0a:	71fb      	strb	r3, [r7, #7]
    ae0c:	4613      	mov	r3, r2
    ae0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    ae10:	79fb      	ldrb	r3, [r7, #7]
    ae12:	095b      	lsrs	r3, r3, #5
    ae14:	b2d8      	uxtb	r0, r3
    ae16:	79fb      	ldrb	r3, [r7, #7]
    ae18:	f003 031f 	and.w	r3, r3, #31
    ae1c:	2201      	movs	r2, #1
    ae1e:	fa02 f303 	lsl.w	r3, r2, r3
    ae22:	79ba      	ldrb	r2, [r7, #6]
    ae24:	4619      	mov	r1, r3
    ae26:	4b03      	ldr	r3, [pc, #12]	; (ae34 <gpio_set_pin_level+0x34>)
    ae28:	4798      	blx	r3
}
    ae2a:	bf00      	nop
    ae2c:	3708      	adds	r7, #8
    ae2e:	46bd      	mov	sp, r7
    ae30:	bd80      	pop	{r7, pc}
    ae32:	bf00      	nop
    ae34:	0000ace1 	.word	0x0000ace1

0000ae38 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b082      	sub	sp, #8
    ae3c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    ae3e:	2100      	movs	r1, #0
    ae40:	2008      	movs	r0, #8
    ae42:	4b24      	ldr	r3, [pc, #144]	; (aed4 <QSPI_N25Q256_exit_xip+0x9c>)
    ae44:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    ae46:	2100      	movs	r1, #0
    ae48:	202b      	movs	r0, #43	; 0x2b
    ae4a:	4b22      	ldr	r3, [pc, #136]	; (aed4 <QSPI_N25Q256_exit_xip+0x9c>)
    ae4c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    ae4e:	2100      	movs	r1, #0
    ae50:	202a      	movs	r0, #42	; 0x2a
    ae52:	4b20      	ldr	r3, [pc, #128]	; (aed4 <QSPI_N25Q256_exit_xip+0x9c>)
    ae54:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ae56:	2102      	movs	r1, #2
    ae58:	2008      	movs	r0, #8
    ae5a:	4b1f      	ldr	r3, [pc, #124]	; (aed8 <QSPI_N25Q256_exit_xip+0xa0>)
    ae5c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ae5e:	2102      	movs	r1, #2
    ae60:	202b      	movs	r0, #43	; 0x2b
    ae62:	4b1d      	ldr	r3, [pc, #116]	; (aed8 <QSPI_N25Q256_exit_xip+0xa0>)
    ae64:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    ae66:	2102      	movs	r1, #2
    ae68:	202a      	movs	r0, #42	; 0x2a
    ae6a:	4b1b      	ldr	r3, [pc, #108]	; (aed8 <QSPI_N25Q256_exit_xip+0xa0>)
    ae6c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    ae6e:	2101      	movs	r1, #1
    ae70:	2008      	movs	r0, #8
    ae72:	4b1a      	ldr	r3, [pc, #104]	; (aedc <QSPI_N25Q256_exit_xip+0xa4>)
    ae74:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    ae76:	2100      	movs	r1, #0
    ae78:	202b      	movs	r0, #43	; 0x2b
    ae7a:	4b18      	ldr	r3, [pc, #96]	; (aedc <QSPI_N25Q256_exit_xip+0xa4>)
    ae7c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    ae7e:	2100      	movs	r1, #0
    ae80:	202a      	movs	r0, #42	; 0x2a
    ae82:	4b16      	ldr	r3, [pc, #88]	; (aedc <QSPI_N25Q256_exit_xip+0xa4>)
    ae84:	4798      	blx	r3

	delay_us(1);
    ae86:	2001      	movs	r0, #1
    ae88:	4b15      	ldr	r3, [pc, #84]	; (aee0 <QSPI_N25Q256_exit_xip+0xa8>)
    ae8a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    ae8c:	2300      	movs	r3, #0
    ae8e:	607b      	str	r3, [r7, #4]
    ae90:	e010      	b.n	aeb4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    ae92:	2101      	movs	r1, #1
    ae94:	202a      	movs	r0, #42	; 0x2a
    ae96:	4b11      	ldr	r3, [pc, #68]	; (aedc <QSPI_N25Q256_exit_xip+0xa4>)
    ae98:	4798      	blx	r3
		delay_us(1);
    ae9a:	2001      	movs	r0, #1
    ae9c:	4b10      	ldr	r3, [pc, #64]	; (aee0 <QSPI_N25Q256_exit_xip+0xa8>)
    ae9e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    aea0:	2100      	movs	r1, #0
    aea2:	202a      	movs	r0, #42	; 0x2a
    aea4:	4b0d      	ldr	r3, [pc, #52]	; (aedc <QSPI_N25Q256_exit_xip+0xa4>)
    aea6:	4798      	blx	r3
		delay_us(1);
    aea8:	2001      	movs	r0, #1
    aeaa:	4b0d      	ldr	r3, [pc, #52]	; (aee0 <QSPI_N25Q256_exit_xip+0xa8>)
    aeac:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    aeae:	687b      	ldr	r3, [r7, #4]
    aeb0:	3301      	adds	r3, #1
    aeb2:	607b      	str	r3, [r7, #4]
    aeb4:	687b      	ldr	r3, [r7, #4]
    aeb6:	2b06      	cmp	r3, #6
    aeb8:	ddeb      	ble.n	ae92 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    aeba:	2101      	movs	r1, #1
    aebc:	202b      	movs	r0, #43	; 0x2b
    aebe:	4b07      	ldr	r3, [pc, #28]	; (aedc <QSPI_N25Q256_exit_xip+0xa4>)
    aec0:	4798      	blx	r3
	delay_us(1);
    aec2:	2001      	movs	r0, #1
    aec4:	4b06      	ldr	r3, [pc, #24]	; (aee0 <QSPI_N25Q256_exit_xip+0xa8>)
    aec6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    aec8:	4b06      	ldr	r3, [pc, #24]	; (aee4 <QSPI_N25Q256_exit_xip+0xac>)
    aeca:	4798      	blx	r3
}
    aecc:	bf00      	nop
    aece:	3708      	adds	r7, #8
    aed0:	46bd      	mov	sp, r7
    aed2:	bd80      	pop	{r7, pc}
    aed4:	0000ada9 	.word	0x0000ada9
    aed8:	0000adc9 	.word	0x0000adc9
    aedc:	0000ae01 	.word	0x0000ae01
    aee0:	00001e4d 	.word	0x00001e4d
    aee4:	000011a9 	.word	0x000011a9

0000aee8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    aee8:	b598      	push	{r3, r4, r7, lr}
    aeea:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    aeec:	4806      	ldr	r0, [pc, #24]	; (af08 <spi_nor_flash_init+0x20>)
    aeee:	4b07      	ldr	r3, [pc, #28]	; (af0c <spi_nor_flash_init+0x24>)
    aef0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    aef2:	2300      	movs	r3, #0
    aef4:	4a06      	ldr	r2, [pc, #24]	; (af10 <spi_nor_flash_init+0x28>)
    aef6:	4904      	ldr	r1, [pc, #16]	; (af08 <spi_nor_flash_init+0x20>)
    aef8:	4806      	ldr	r0, [pc, #24]	; (af14 <spi_nor_flash_init+0x2c>)
    aefa:	4c07      	ldr	r4, [pc, #28]	; (af18 <spi_nor_flash_init+0x30>)
    aefc:	47a0      	blx	r4
    aefe:	4602      	mov	r2, r0
    af00:	4b06      	ldr	r3, [pc, #24]	; (af1c <spi_nor_flash_init+0x34>)
    af02:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    af04:	bf00      	nop
    af06:	bd98      	pop	{r3, r4, r7, pc}
    af08:	20001684 	.word	0x20001684
    af0c:	00002385 	.word	0x00002385
    af10:	0000ae39 	.word	0x0000ae39
    af14:	20000db8 	.word	0x20000db8
    af18:	0000b355 	.word	0x0000b355
    af1c:	20001884 	.word	0x20001884

0000af20 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    af20:	b580      	push	{r7, lr}
    af22:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    af24:	4805      	ldr	r0, [pc, #20]	; (af3c <cdc_device_acm_init+0x1c>)
    af26:	4b06      	ldr	r3, [pc, #24]	; (af40 <cdc_device_acm_init+0x20>)
    af28:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    af2a:	4b06      	ldr	r3, [pc, #24]	; (af44 <cdc_device_acm_init+0x24>)
    af2c:	4798      	blx	r3

	usbdc_start(single_desc);
    af2e:	4806      	ldr	r0, [pc, #24]	; (af48 <cdc_device_acm_init+0x28>)
    af30:	4b06      	ldr	r3, [pc, #24]	; (af4c <cdc_device_acm_init+0x2c>)
    af32:	4798      	blx	r3
	usbdc_attach();
    af34:	4b06      	ldr	r3, [pc, #24]	; (af50 <cdc_device_acm_init+0x30>)
    af36:	4798      	blx	r3
}
    af38:	bf00      	nop
    af3a:	bd80      	pop	{r7, pc}
    af3c:	20000e08 	.word	0x20000e08
    af40:	0000ca7d 	.word	0x0000ca7d
    af44:	0000bcf5 	.word	0x0000bcf5
    af48:	20000200 	.word	0x20000200
    af4c:	0000cb19 	.word	0x0000cb19
    af50:	0000cb69 	.word	0x0000cb69

0000af54 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    af54:	b580      	push	{r7, lr}
    af56:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    af58:	4b01      	ldr	r3, [pc, #4]	; (af60 <usb_init+0xc>)
    af5a:	4798      	blx	r3
}
    af5c:	bf00      	nop
    af5e:	bd80      	pop	{r7, pc}
    af60:	0000af21 	.word	0x0000af21

0000af64 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    af64:	b480      	push	{r7}
    af66:	b085      	sub	sp, #20
    af68:	af00      	add	r7, sp, #0
    af6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    af6c:	f3ef 8310 	mrs	r3, PRIMASK
    af70:	60fb      	str	r3, [r7, #12]
  return(result);
    af72:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    af74:	687b      	ldr	r3, [r7, #4]
    af76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    af78:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    af7a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    af7e:	bf00      	nop
    af80:	3714      	adds	r7, #20
    af82:	46bd      	mov	sp, r7
    af84:	f85d 7b04 	ldr.w	r7, [sp], #4
    af88:	4770      	bx	lr

0000af8a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    af8a:	b480      	push	{r7}
    af8c:	b085      	sub	sp, #20
    af8e:	af00      	add	r7, sp, #0
    af90:	6078      	str	r0, [r7, #4]
    af92:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    af96:	687b      	ldr	r3, [r7, #4]
    af98:	681b      	ldr	r3, [r3, #0]
    af9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    af9c:	68fb      	ldr	r3, [r7, #12]
    af9e:	f383 8810 	msr	PRIMASK, r3
}
    afa2:	bf00      	nop
    afa4:	3714      	adds	r7, #20
    afa6:	46bd      	mov	sp, r7
    afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    afac:	4770      	bx	lr
	...

0000afb0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    afb0:	b580      	push	{r7, lr}
    afb2:	b08c      	sub	sp, #48	; 0x30
    afb4:	af00      	add	r7, sp, #0
    afb6:	6078      	str	r0, [r7, #4]
    afb8:	460b      	mov	r3, r1
    afba:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    afbc:	687b      	ldr	r3, [r7, #4]
    afbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    afc0:	687b      	ldr	r3, [r7, #4]
    afc2:	681b      	ldr	r3, [r3, #0]
    afc4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    afc6:	f107 030c 	add.w	r3, r7, #12
    afca:	2200      	movs	r2, #0
    afcc:	601a      	str	r2, [r3, #0]
    afce:	605a      	str	r2, [r3, #4]
    afd0:	609a      	str	r2, [r3, #8]
    afd2:	60da      	str	r2, [r3, #12]
    afd4:	611a      	str	r2, [r3, #16]
    afd6:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    afd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    afda:	7b1b      	ldrb	r3, [r3, #12]
    afdc:	2b00      	cmp	r3, #0
    afde:	d001      	beq.n	afe4 <n25q256a_xip_confirm+0x34>
    afe0:	2206      	movs	r2, #6
    afe2:	e000      	b.n	afe6 <n25q256a_xip_confirm+0x36>
    afe4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    afe6:	7b3b      	ldrb	r3, [r7, #12]
    afe8:	f362 0302 	bfi	r3, r2, #0, #3
    afec:	733b      	strb	r3, [r7, #12]
    afee:	7b3b      	ldrb	r3, [r7, #12]
    aff0:	f043 0310 	orr.w	r3, r3, #16
    aff4:	733b      	strb	r3, [r7, #12]
    aff6:	7b3b      	ldrb	r3, [r7, #12]
    aff8:	f043 0320 	orr.w	r3, r3, #32
    affc:	733b      	strb	r3, [r7, #12]
    affe:	7b3b      	ldrb	r3, [r7, #12]
    b000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b004:	733b      	strb	r3, [r7, #12]
    b006:	7b3b      	ldrb	r3, [r7, #12]
    b008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b00c:	733b      	strb	r3, [r7, #12]
    b00e:	7b7b      	ldrb	r3, [r7, #13]
    b010:	f043 0303 	orr.w	r3, r3, #3
    b014:	737b      	strb	r3, [r7, #13]
    b016:	7b7b      	ldrb	r3, [r7, #13]
    b018:	2201      	movs	r2, #1
    b01a:	f362 1305 	bfi	r3, r2, #4, #2
    b01e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b022:	7b1b      	ldrb	r3, [r3, #12]
    b024:	2b00      	cmp	r3, #0
    b026:	d001      	beq.n	b02c <n25q256a_xip_confirm+0x7c>
    b028:	2208      	movs	r2, #8
    b02a:	e000      	b.n	b02e <n25q256a_xip_confirm+0x7e>
    b02c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b02e:	7bbb      	ldrb	r3, [r7, #14]
    b030:	f362 0304 	bfi	r3, r2, #0, #5
    b034:	73bb      	strb	r3, [r7, #14]
    b036:	230b      	movs	r3, #11
    b038:	743b      	strb	r3, [r7, #16]
    b03a:	78fb      	ldrb	r3, [r7, #3]
    b03c:	2b00      	cmp	r3, #0
    b03e:	d001      	beq.n	b044 <n25q256a_xip_confirm+0x94>
    b040:	2300      	movs	r3, #0
    b042:	e000      	b.n	b046 <n25q256a_xip_confirm+0x96>
    b044:	23ff      	movs	r3, #255	; 0xff
    b046:	747b      	strb	r3, [r7, #17]
    b048:	2301      	movs	r3, #1
    b04a:	61bb      	str	r3, [r7, #24]
    b04c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b050:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b052:	f107 030c 	add.w	r3, r7, #12
    b056:	4619      	mov	r1, r3
    b058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b05a:	4b07      	ldr	r3, [pc, #28]	; (b078 <n25q256a_xip_confirm+0xc8>)
    b05c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b05e:	78fb      	ldrb	r3, [r7, #3]
    b060:	2b00      	cmp	r3, #0
    b062:	d001      	beq.n	b068 <n25q256a_xip_confirm+0xb8>
    b064:	2202      	movs	r2, #2
    b066:	e000      	b.n	b06a <n25q256a_xip_confirm+0xba>
    b068:	2201      	movs	r2, #1
    b06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b06c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b06e:	2300      	movs	r3, #0
}
    b070:	4618      	mov	r0, r3
    b072:	3730      	adds	r7, #48	; 0x30
    b074:	46bd      	mov	sp, r7
    b076:	bd80      	pop	{r7, pc}
    b078:	000023fd 	.word	0x000023fd

0000b07c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b08c      	sub	sp, #48	; 0x30
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
    b084:	460b      	mov	r3, r1
    b086:	70fb      	strb	r3, [r7, #3]
    b088:	4613      	mov	r3, r2
    b08a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b08c:	2300      	movs	r3, #0
    b08e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b094:	687b      	ldr	r3, [r7, #4]
    b096:	681b      	ldr	r3, [r3, #0]
    b098:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b09a:	f107 030c 	add.w	r3, r7, #12
    b09e:	2200      	movs	r2, #0
    b0a0:	601a      	str	r2, [r3, #0]
    b0a2:	605a      	str	r2, [r3, #4]
    b0a4:	609a      	str	r2, [r3, #8]
    b0a6:	60da      	str	r2, [r3, #12]
    b0a8:	611a      	str	r2, [r3, #16]
    b0aa:	615a      	str	r2, [r3, #20]
    b0ac:	78fb      	ldrb	r3, [r7, #3]
    b0ae:	f003 0307 	and.w	r3, r3, #7
    b0b2:	b2da      	uxtb	r2, r3
    b0b4:	7b3b      	ldrb	r3, [r7, #12]
    b0b6:	f362 0302 	bfi	r3, r2, #0, #3
    b0ba:	733b      	strb	r3, [r7, #12]
    b0bc:	7b3b      	ldrb	r3, [r7, #12]
    b0be:	f043 0310 	orr.w	r3, r3, #16
    b0c2:	733b      	strb	r3, [r7, #12]
    b0c4:	7b3b      	ldrb	r3, [r7, #12]
    b0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b0ca:	733b      	strb	r3, [r7, #12]
    b0cc:	78bb      	ldrb	r3, [r7, #2]
    b0ce:	743b      	strb	r3, [r7, #16]
    b0d0:	2301      	movs	r3, #1
    b0d2:	61bb      	str	r3, [r7, #24]
    b0d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b0d8:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0dc:	7b5b      	ldrb	r3, [r3, #13]
    b0de:	2b00      	cmp	r3, #0
    b0e0:	d003      	beq.n	b0ea <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b0e2:	2100      	movs	r1, #0
    b0e4:	6878      	ldr	r0, [r7, #4]
    b0e6:	4b0a      	ldr	r3, [pc, #40]	; (b110 <n25q256a_read_reg+0x94>)
    b0e8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b0ea:	f107 030c 	add.w	r3, r7, #12
    b0ee:	4619      	mov	r1, r3
    b0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b0f2:	4b08      	ldr	r3, [pc, #32]	; (b114 <n25q256a_read_reg+0x98>)
    b0f4:	4798      	blx	r3
	if (n25q->xip_mode) {
    b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0f8:	7b5b      	ldrb	r3, [r3, #13]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d003      	beq.n	b106 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b0fe:	2101      	movs	r1, #1
    b100:	6878      	ldr	r0, [r7, #4]
    b102:	4b03      	ldr	r3, [pc, #12]	; (b110 <n25q256a_read_reg+0x94>)
    b104:	4798      	blx	r3
	}
	return status;
    b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b108:	4618      	mov	r0, r3
    b10a:	3730      	adds	r7, #48	; 0x30
    b10c:	46bd      	mov	sp, r7
    b10e:	bd80      	pop	{r7, pc}
    b110:	0000afb1 	.word	0x0000afb1
    b114:	000023fd 	.word	0x000023fd

0000b118 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b118:	b580      	push	{r7, lr}
    b11a:	b08c      	sub	sp, #48	; 0x30
    b11c:	af00      	add	r7, sp, #0
    b11e:	60f8      	str	r0, [r7, #12]
    b120:	607b      	str	r3, [r7, #4]
    b122:	460b      	mov	r3, r1
    b124:	72fb      	strb	r3, [r7, #11]
    b126:	4613      	mov	r3, r2
    b128:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b12a:	68fb      	ldr	r3, [r7, #12]
    b12c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b12e:	68fb      	ldr	r3, [r7, #12]
    b130:	681b      	ldr	r3, [r3, #0]
    b132:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b134:	f107 0310 	add.w	r3, r7, #16
    b138:	2200      	movs	r2, #0
    b13a:	601a      	str	r2, [r3, #0]
    b13c:	605a      	str	r2, [r3, #4]
    b13e:	609a      	str	r2, [r3, #8]
    b140:	60da      	str	r2, [r3, #12]
    b142:	611a      	str	r2, [r3, #16]
    b144:	615a      	str	r2, [r3, #20]
    b146:	7afb      	ldrb	r3, [r7, #11]
    b148:	f003 0307 	and.w	r3, r3, #7
    b14c:	b2da      	uxtb	r2, r3
    b14e:	7c3b      	ldrb	r3, [r7, #16]
    b150:	f362 0302 	bfi	r3, r2, #0, #3
    b154:	743b      	strb	r3, [r7, #16]
    b156:	7c3b      	ldrb	r3, [r7, #16]
    b158:	f043 0310 	orr.w	r3, r3, #16
    b15c:	743b      	strb	r3, [r7, #16]
    b15e:	7c3b      	ldrb	r3, [r7, #16]
    b160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b164:	743b      	strb	r3, [r7, #16]
    b166:	7c7b      	ldrb	r3, [r7, #17]
    b168:	2202      	movs	r2, #2
    b16a:	f362 1305 	bfi	r3, r2, #4, #2
    b16e:	747b      	strb	r3, [r7, #17]
    b170:	7abb      	ldrb	r3, [r7, #10]
    b172:	753b      	strb	r3, [r7, #20]
    b174:	2301      	movs	r3, #1
    b176:	61fb      	str	r3, [r7, #28]
    b178:	1d3b      	adds	r3, r7, #4
    b17a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b17e:	7b5b      	ldrb	r3, [r3, #13]
    b180:	2b00      	cmp	r3, #0
    b182:	d003      	beq.n	b18c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b184:	2100      	movs	r1, #0
    b186:	68f8      	ldr	r0, [r7, #12]
    b188:	4b09      	ldr	r3, [pc, #36]	; (b1b0 <n25q256a_write_reg+0x98>)
    b18a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b18c:	f107 0310 	add.w	r3, r7, #16
    b190:	4619      	mov	r1, r3
    b192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b194:	4b07      	ldr	r3, [pc, #28]	; (b1b4 <n25q256a_write_reg+0x9c>)
    b196:	4798      	blx	r3
	if (n25q->xip_mode) {
    b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b19a:	7b5b      	ldrb	r3, [r3, #13]
    b19c:	2b00      	cmp	r3, #0
    b19e:	d003      	beq.n	b1a8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b1a0:	2101      	movs	r1, #1
    b1a2:	68f8      	ldr	r0, [r7, #12]
    b1a4:	4b02      	ldr	r3, [pc, #8]	; (b1b0 <n25q256a_write_reg+0x98>)
    b1a6:	4798      	blx	r3
	}
}
    b1a8:	bf00      	nop
    b1aa:	3730      	adds	r7, #48	; 0x30
    b1ac:	46bd      	mov	sp, r7
    b1ae:	bd80      	pop	{r7, pc}
    b1b0:	0000afb1 	.word	0x0000afb1
    b1b4:	000023fd 	.word	0x000023fd

0000b1b8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b1b8:	b580      	push	{r7, lr}
    b1ba:	b090      	sub	sp, #64	; 0x40
    b1bc:	af00      	add	r7, sp, #0
    b1be:	6078      	str	r0, [r7, #4]
    b1c0:	460b      	mov	r3, r1
    b1c2:	70fb      	strb	r3, [r7, #3]
    b1c4:	4613      	mov	r3, r2
    b1c6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b1c8:	687b      	ldr	r3, [r7, #4]
    b1ca:	681b      	ldr	r3, [r3, #0]
    b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b1ce:	78bb      	ldrb	r3, [r7, #2]
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d001      	beq.n	b1d8 <n25q256a_write_enable+0x20>
    b1d4:	2306      	movs	r3, #6
    b1d6:	e000      	b.n	b1da <n25q256a_write_enable+0x22>
    b1d8:	2304      	movs	r3, #4
    b1da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b1de:	f107 0320 	add.w	r3, r7, #32
    b1e2:	2200      	movs	r2, #0
    b1e4:	601a      	str	r2, [r3, #0]
    b1e6:	605a      	str	r2, [r3, #4]
    b1e8:	609a      	str	r2, [r3, #8]
    b1ea:	60da      	str	r2, [r3, #12]
    b1ec:	611a      	str	r2, [r3, #16]
    b1ee:	615a      	str	r2, [r3, #20]
    b1f0:	78fb      	ldrb	r3, [r7, #3]
    b1f2:	f003 0307 	and.w	r3, r3, #7
    b1f6:	b2da      	uxtb	r2, r3
    b1f8:	f897 3020 	ldrb.w	r3, [r7, #32]
    b1fc:	f362 0302 	bfi	r3, r2, #0, #3
    b200:	f887 3020 	strb.w	r3, [r7, #32]
    b204:	f897 3020 	ldrb.w	r3, [r7, #32]
    b208:	f043 0310 	orr.w	r3, r3, #16
    b20c:	f887 3020 	strb.w	r3, [r7, #32]
    b210:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b214:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b218:	f107 0308 	add.w	r3, r7, #8
    b21c:	2200      	movs	r2, #0
    b21e:	601a      	str	r2, [r3, #0]
    b220:	605a      	str	r2, [r3, #4]
    b222:	609a      	str	r2, [r3, #8]
    b224:	60da      	str	r2, [r3, #12]
    b226:	611a      	str	r2, [r3, #16]
    b228:	615a      	str	r2, [r3, #20]
    b22a:	78fb      	ldrb	r3, [r7, #3]
    b22c:	f003 0307 	and.w	r3, r3, #7
    b230:	b2da      	uxtb	r2, r3
    b232:	7a3b      	ldrb	r3, [r7, #8]
    b234:	f362 0302 	bfi	r3, r2, #0, #3
    b238:	723b      	strb	r3, [r7, #8]
    b23a:	7a3b      	ldrb	r3, [r7, #8]
    b23c:	f043 0310 	orr.w	r3, r3, #16
    b240:	723b      	strb	r3, [r7, #8]
    b242:	7a3b      	ldrb	r3, [r7, #8]
    b244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b248:	723b      	strb	r3, [r7, #8]
    b24a:	2305      	movs	r3, #5
    b24c:	733b      	strb	r3, [r7, #12]
    b24e:	2301      	movs	r3, #1
    b250:	617b      	str	r3, [r7, #20]
    b252:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b256:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b258:	f107 0320 	add.w	r3, r7, #32
    b25c:	4619      	mov	r1, r3
    b25e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b260:	4b08      	ldr	r3, [pc, #32]	; (b284 <n25q256a_write_enable+0xcc>)
    b262:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b264:	f107 0308 	add.w	r3, r7, #8
    b268:	4619      	mov	r1, r3
    b26a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b26c:	4b05      	ldr	r3, [pc, #20]	; (b284 <n25q256a_write_enable+0xcc>)
    b26e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b270:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b274:	f003 0302 	and.w	r3, r3, #2
    b278:	2b00      	cmp	r3, #0
    b27a:	d0ed      	beq.n	b258 <n25q256a_write_enable+0xa0>
}
    b27c:	bf00      	nop
    b27e:	3740      	adds	r7, #64	; 0x40
    b280:	46bd      	mov	sp, r7
    b282:	bd80      	pop	{r7, pc}
    b284:	000023fd 	.word	0x000023fd

0000b288 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b288:	b590      	push	{r4, r7, lr}
    b28a:	b087      	sub	sp, #28
    b28c:	af00      	add	r7, sp, #0
    b28e:	6078      	str	r0, [r7, #4]
    b290:	460b      	mov	r3, r1
    b292:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b294:	687b      	ldr	r3, [r7, #4]
    b296:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b298:	68fb      	ldr	r3, [r7, #12]
    b29a:	7b1b      	ldrb	r3, [r3, #12]
    b29c:	2b00      	cmp	r3, #0
    b29e:	d001      	beq.n	b2a4 <n25q256a_switch_mode+0x1c>
    b2a0:	2306      	movs	r3, #6
    b2a2:	e000      	b.n	b2a6 <n25q256a_switch_mode+0x1e>
    b2a4:	2300      	movs	r3, #0
    b2a6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b2a8:	7afb      	ldrb	r3, [r7, #11]
    b2aa:	2265      	movs	r2, #101	; 0x65
    b2ac:	4619      	mov	r1, r3
    b2ae:	6878      	ldr	r0, [r7, #4]
    b2b0:	4b25      	ldr	r3, [pc, #148]	; (b348 <n25q256a_switch_mode+0xc0>)
    b2b2:	4798      	blx	r3
    b2b4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b2b6:	2300      	movs	r3, #0
    b2b8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b2ba:	68fb      	ldr	r3, [r7, #12]
    b2bc:	7b1b      	ldrb	r3, [r3, #12]
    b2be:	78fa      	ldrb	r2, [r7, #3]
    b2c0:	429a      	cmp	r2, r3
    b2c2:	d03d      	beq.n	b340 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b2c4:	78fb      	ldrb	r3, [r7, #3]
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	d00b      	beq.n	b2e2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b2ca:	697b      	ldr	r3, [r7, #20]
    b2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d011      	beq.n	b2f8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b2d4:	697b      	ldr	r3, [r7, #20]
    b2d6:	f003 031f 	and.w	r3, r3, #31
    b2da:	617b      	str	r3, [r7, #20]
			modify = 1;
    b2dc:	2301      	movs	r3, #1
    b2de:	74fb      	strb	r3, [r7, #19]
    b2e0:	e00a      	b.n	b2f8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b2e2:	697b      	ldr	r3, [r7, #20]
    b2e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d105      	bne.n	b2f8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b2ec:	697b      	ldr	r3, [r7, #20]
    b2ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b2f2:	617b      	str	r3, [r7, #20]
			modify = 1;
    b2f4:	2301      	movs	r3, #1
    b2f6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b2f8:	7cfb      	ldrb	r3, [r7, #19]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d021      	beq.n	b342 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b2fe:	68fb      	ldr	r3, [r7, #12]
    b300:	78fa      	ldrb	r2, [r7, #3]
    b302:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b304:	7afb      	ldrb	r3, [r7, #11]
    b306:	2201      	movs	r2, #1
    b308:	4619      	mov	r1, r3
    b30a:	6878      	ldr	r0, [r7, #4]
    b30c:	4b0f      	ldr	r3, [pc, #60]	; (b34c <n25q256a_switch_mode+0xc4>)
    b30e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b310:	7af9      	ldrb	r1, [r7, #11]
    b312:	697b      	ldr	r3, [r7, #20]
    b314:	2261      	movs	r2, #97	; 0x61
    b316:	6878      	ldr	r0, [r7, #4]
    b318:	4c0d      	ldr	r4, [pc, #52]	; (b350 <n25q256a_switch_mode+0xc8>)
    b31a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b31c:	78fb      	ldrb	r3, [r7, #3]
    b31e:	2b00      	cmp	r3, #0
    b320:	d001      	beq.n	b326 <n25q256a_switch_mode+0x9e>
    b322:	2306      	movs	r3, #6
    b324:	e000      	b.n	b328 <n25q256a_switch_mode+0xa0>
    b326:	2300      	movs	r3, #0
    b328:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b32a:	7afb      	ldrb	r3, [r7, #11]
    b32c:	2265      	movs	r2, #101	; 0x65
    b32e:	4619      	mov	r1, r3
    b330:	6878      	ldr	r0, [r7, #4]
    b332:	4b05      	ldr	r3, [pc, #20]	; (b348 <n25q256a_switch_mode+0xc0>)
    b334:	4798      	blx	r3
    b336:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b338:	68fb      	ldr	r3, [r7, #12]
    b33a:	78fa      	ldrb	r2, [r7, #3]
    b33c:	731a      	strb	r2, [r3, #12]
    b33e:	e000      	b.n	b342 <n25q256a_switch_mode+0xba>
		return;
    b340:	bf00      	nop
	}
}
    b342:	371c      	adds	r7, #28
    b344:	46bd      	mov	sp, r7
    b346:	bd90      	pop	{r4, r7, pc}
    b348:	0000b07d 	.word	0x0000b07d
    b34c:	0000b1b9 	.word	0x0000b1b9
    b350:	0000b119 	.word	0x0000b119

0000b354 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b354:	b580      	push	{r7, lr}
    b356:	b086      	sub	sp, #24
    b358:	af00      	add	r7, sp, #0
    b35a:	60f8      	str	r0, [r7, #12]
    b35c:	60b9      	str	r1, [r7, #8]
    b35e:	607a      	str	r2, [r7, #4]
    b360:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b362:	68fb      	ldr	r3, [r7, #12]
    b364:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b366:	4a0c      	ldr	r2, [pc, #48]	; (b398 <n25q256a_construct+0x44>)
    b368:	68b9      	ldr	r1, [r7, #8]
    b36a:	68f8      	ldr	r0, [r7, #12]
    b36c:	4b0b      	ldr	r3, [pc, #44]	; (b39c <n25q256a_construct+0x48>)
    b36e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b370:	697b      	ldr	r3, [r7, #20]
    b372:	2200      	movs	r2, #0
    b374:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b376:	697b      	ldr	r3, [r7, #20]
    b378:	2200      	movs	r2, #0
    b37a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b37c:	697b      	ldr	r3, [r7, #20]
    b37e:	687a      	ldr	r2, [r7, #4]
    b380:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b382:	78fb      	ldrb	r3, [r7, #3]
    b384:	4619      	mov	r1, r3
    b386:	68f8      	ldr	r0, [r7, #12]
    b388:	4b05      	ldr	r3, [pc, #20]	; (b3a0 <n25q256a_construct+0x4c>)
    b38a:	4798      	blx	r3
	return me;
    b38c:	68fb      	ldr	r3, [r7, #12]
}
    b38e:	4618      	mov	r0, r3
    b390:	3718      	adds	r7, #24
    b392:	46bd      	mov	sp, r7
    b394:	bd80      	pop	{r7, pc}
    b396:	bf00      	nop
    b398:	0000f13c 	.word	0x0000f13c
    b39c:	0000b831 	.word	0x0000b831
    b3a0:	0000b289 	.word	0x0000b289

0000b3a4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b3a4:	b580      	push	{r7, lr}
    b3a6:	b08c      	sub	sp, #48	; 0x30
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	60f8      	str	r0, [r7, #12]
    b3ac:	60b9      	str	r1, [r7, #8]
    b3ae:	607a      	str	r2, [r7, #4]
    b3b0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b3b2:	68fb      	ldr	r3, [r7, #12]
    b3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b3b6:	68fb      	ldr	r3, [r7, #12]
    b3b8:	681b      	ldr	r3, [r3, #0]
    b3ba:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b3bc:	f107 0310 	add.w	r3, r7, #16
    b3c0:	2200      	movs	r2, #0
    b3c2:	601a      	str	r2, [r3, #0]
    b3c4:	605a      	str	r2, [r3, #4]
    b3c6:	609a      	str	r2, [r3, #8]
    b3c8:	60da      	str	r2, [r3, #12]
    b3ca:	611a      	str	r2, [r3, #16]
    b3cc:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3d0:	7b1b      	ldrb	r3, [r3, #12]
    b3d2:	2b00      	cmp	r3, #0
    b3d4:	d001      	beq.n	b3da <n25q256a_read+0x36>
    b3d6:	2206      	movs	r2, #6
    b3d8:	e000      	b.n	b3dc <n25q256a_read+0x38>
    b3da:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b3dc:	7c3b      	ldrb	r3, [r7, #16]
    b3de:	f362 0302 	bfi	r3, r2, #0, #3
    b3e2:	743b      	strb	r3, [r7, #16]
    b3e4:	7c3b      	ldrb	r3, [r7, #16]
    b3e6:	f043 0310 	orr.w	r3, r3, #16
    b3ea:	743b      	strb	r3, [r7, #16]
    b3ec:	7c3b      	ldrb	r3, [r7, #16]
    b3ee:	f043 0320 	orr.w	r3, r3, #32
    b3f2:	743b      	strb	r3, [r7, #16]
    b3f4:	7c3b      	ldrb	r3, [r7, #16]
    b3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3fa:	743b      	strb	r3, [r7, #16]
    b3fc:	7c7b      	ldrb	r3, [r7, #17]
    b3fe:	2201      	movs	r2, #1
    b400:	f362 1305 	bfi	r3, r2, #4, #2
    b404:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b408:	7b1b      	ldrb	r3, [r3, #12]
    b40a:	2b00      	cmp	r3, #0
    b40c:	d001      	beq.n	b412 <n25q256a_read+0x6e>
    b40e:	220a      	movs	r2, #10
    b410:	e000      	b.n	b414 <n25q256a_read+0x70>
    b412:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b414:	7cbb      	ldrb	r3, [r7, #18]
    b416:	f362 0304 	bfi	r3, r2, #0, #5
    b41a:	74bb      	strb	r3, [r7, #18]
    b41c:	230b      	movs	r3, #11
    b41e:	753b      	strb	r3, [r7, #20]
    b420:	687b      	ldr	r3, [r7, #4]
    b422:	61bb      	str	r3, [r7, #24]
    b424:	683b      	ldr	r3, [r7, #0]
    b426:	61fb      	str	r3, [r7, #28]
    b428:	68bb      	ldr	r3, [r7, #8]
    b42a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b42c:	f107 0310 	add.w	r3, r7, #16
    b430:	4619      	mov	r1, r3
    b432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b434:	4b03      	ldr	r3, [pc, #12]	; (b444 <n25q256a_read+0xa0>)
    b436:	4798      	blx	r3
	return ERR_NONE;
    b438:	2300      	movs	r3, #0
}
    b43a:	4618      	mov	r0, r3
    b43c:	3730      	adds	r7, #48	; 0x30
    b43e:	46bd      	mov	sp, r7
    b440:	bd80      	pop	{r7, pc}
    b442:	bf00      	nop
    b444:	000023fd 	.word	0x000023fd

0000b448 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b448:	b580      	push	{r7, lr}
    b44a:	b08c      	sub	sp, #48	; 0x30
    b44c:	af00      	add	r7, sp, #0
    b44e:	60f8      	str	r0, [r7, #12]
    b450:	60b9      	str	r1, [r7, #8]
    b452:	607a      	str	r2, [r7, #4]
    b454:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b456:	68fb      	ldr	r3, [r7, #12]
    b458:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b45a:	68fb      	ldr	r3, [r7, #12]
    b45c:	681b      	ldr	r3, [r3, #0]
    b45e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b460:	f107 0310 	add.w	r3, r7, #16
    b464:	2200      	movs	r2, #0
    b466:	601a      	str	r2, [r3, #0]
    b468:	605a      	str	r2, [r3, #4]
    b46a:	609a      	str	r2, [r3, #8]
    b46c:	60da      	str	r2, [r3, #12]
    b46e:	611a      	str	r2, [r3, #16]
    b470:	615a      	str	r2, [r3, #20]
    b472:	7c3b      	ldrb	r3, [r7, #16]
    b474:	f043 0310 	orr.w	r3, r3, #16
    b478:	743b      	strb	r3, [r7, #16]
    b47a:	7c3b      	ldrb	r3, [r7, #16]
    b47c:	f043 0320 	orr.w	r3, r3, #32
    b480:	743b      	strb	r3, [r7, #16]
    b482:	7c3b      	ldrb	r3, [r7, #16]
    b484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b488:	743b      	strb	r3, [r7, #16]
    b48a:	7c7b      	ldrb	r3, [r7, #17]
    b48c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b490:	747b      	strb	r3, [r7, #17]
    b492:	2302      	movs	r3, #2
    b494:	753b      	strb	r3, [r7, #20]
    b496:	687b      	ldr	r3, [r7, #4]
    b498:	61bb      	str	r3, [r7, #24]
    b49a:	683b      	ldr	r3, [r7, #0]
    b49c:	61fb      	str	r3, [r7, #28]
    b49e:	68bb      	ldr	r3, [r7, #8]
    b4a0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4a4:	7b1b      	ldrb	r3, [r3, #12]
    b4a6:	2b00      	cmp	r3, #0
    b4a8:	d001      	beq.n	b4ae <n25q256a_write+0x66>
    b4aa:	2206      	movs	r2, #6
    b4ac:	e000      	b.n	b4b0 <n25q256a_write+0x68>
    b4ae:	2200      	movs	r2, #0
    b4b0:	7c3b      	ldrb	r3, [r7, #16]
    b4b2:	f362 0302 	bfi	r3, r2, #0, #3
    b4b6:	743b      	strb	r3, [r7, #16]
	while (length) {
    b4b8:	e035      	b.n	b526 <n25q256a_write+0xde>
		cmd.address = address;
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b4be:	683b      	ldr	r3, [r7, #0]
    b4c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b4c4:	d802      	bhi.n	b4cc <n25q256a_write+0x84>
			cmd.buf_len = length;
    b4c6:	683b      	ldr	r3, [r7, #0]
    b4c8:	61fb      	str	r3, [r7, #28]
    b4ca:	e002      	b.n	b4d2 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b4cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    b4d0:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b4d2:	7c3b      	ldrb	r3, [r7, #16]
    b4d4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b4d8:	b2db      	uxtb	r3, r3
    b4da:	2201      	movs	r2, #1
    b4dc:	4619      	mov	r1, r3
    b4de:	68f8      	ldr	r0, [r7, #12]
    b4e0:	4b19      	ldr	r3, [pc, #100]	; (b548 <n25q256a_write+0x100>)
    b4e2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b4e4:	f107 0310 	add.w	r3, r7, #16
    b4e8:	4619      	mov	r1, r3
    b4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b4ec:	4b17      	ldr	r3, [pc, #92]	; (b54c <n25q256a_write+0x104>)
    b4ee:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b4f0:	bf00      	nop
    b4f2:	7c3b      	ldrb	r3, [r7, #16]
    b4f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b4f8:	b2db      	uxtb	r3, r3
    b4fa:	2270      	movs	r2, #112	; 0x70
    b4fc:	4619      	mov	r1, r3
    b4fe:	68f8      	ldr	r0, [r7, #12]
    b500:	4b13      	ldr	r3, [pc, #76]	; (b550 <n25q256a_write+0x108>)
    b502:	4798      	blx	r3
    b504:	4603      	mov	r3, r0
    b506:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b50a:	2b00      	cmp	r3, #0
    b50c:	d0f1      	beq.n	b4f2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b50e:	6a3a      	ldr	r2, [r7, #32]
    b510:	69fb      	ldr	r3, [r7, #28]
    b512:	4413      	add	r3, r2
    b514:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b516:	69fb      	ldr	r3, [r7, #28]
    b518:	683a      	ldr	r2, [r7, #0]
    b51a:	1ad3      	subs	r3, r2, r3
    b51c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b51e:	69fb      	ldr	r3, [r7, #28]
    b520:	687a      	ldr	r2, [r7, #4]
    b522:	4413      	add	r3, r2
    b524:	607b      	str	r3, [r7, #4]
	while (length) {
    b526:	683b      	ldr	r3, [r7, #0]
    b528:	2b00      	cmp	r3, #0
    b52a:	d1c6      	bne.n	b4ba <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b52e:	7b5b      	ldrb	r3, [r3, #13]
    b530:	2b00      	cmp	r3, #0
    b532:	d003      	beq.n	b53c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b534:	2101      	movs	r1, #1
    b536:	68f8      	ldr	r0, [r7, #12]
    b538:	4b06      	ldr	r3, [pc, #24]	; (b554 <n25q256a_write+0x10c>)
    b53a:	4798      	blx	r3
	}
	return ERR_NONE;
    b53c:	2300      	movs	r3, #0
}
    b53e:	4618      	mov	r0, r3
    b540:	3730      	adds	r7, #48	; 0x30
    b542:	46bd      	mov	sp, r7
    b544:	bd80      	pop	{r7, pc}
    b546:	bf00      	nop
    b548:	0000b1b9 	.word	0x0000b1b9
    b54c:	000023fd 	.word	0x000023fd
    b550:	0000b07d 	.word	0x0000b07d
    b554:	0000afb1 	.word	0x0000afb1

0000b558 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b558:	b580      	push	{r7, lr}
    b55a:	b090      	sub	sp, #64	; 0x40
    b55c:	af00      	add	r7, sp, #0
    b55e:	60f8      	str	r0, [r7, #12]
    b560:	60b9      	str	r1, [r7, #8]
    b562:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b564:	68fb      	ldr	r3, [r7, #12]
    b566:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b568:	68fb      	ldr	r3, [r7, #12]
    b56a:	681b      	ldr	r3, [r3, #0]
    b56c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b56e:	f107 0314 	add.w	r3, r7, #20
    b572:	2200      	movs	r2, #0
    b574:	601a      	str	r2, [r3, #0]
    b576:	605a      	str	r2, [r3, #4]
    b578:	609a      	str	r2, [r3, #8]
    b57a:	60da      	str	r2, [r3, #12]
    b57c:	611a      	str	r2, [r3, #16]
    b57e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b582:	7b1b      	ldrb	r3, [r3, #12]
    b584:	2b00      	cmp	r3, #0
    b586:	d001      	beq.n	b58c <n25q256a_erase+0x34>
    b588:	2206      	movs	r2, #6
    b58a:	e000      	b.n	b58e <n25q256a_erase+0x36>
    b58c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b58e:	7d3b      	ldrb	r3, [r7, #20]
    b590:	f362 0302 	bfi	r3, r2, #0, #3
    b594:	753b      	strb	r3, [r7, #20]
    b596:	7d3b      	ldrb	r3, [r7, #20]
    b598:	f043 0310 	orr.w	r3, r3, #16
    b59c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b59e:	687b      	ldr	r3, [r7, #4]
    b5a0:	4a56      	ldr	r2, [pc, #344]	; (b6fc <n25q256a_erase+0x1a4>)
    b5a2:	4293      	cmp	r3, r2
    b5a4:	bf94      	ite	ls
    b5a6:	2301      	movls	r3, #1
    b5a8:	2300      	movhi	r3, #0
    b5aa:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b5ac:	7d3b      	ldrb	r3, [r7, #20]
    b5ae:	f362 1345 	bfi	r3, r2, #5, #1
    b5b2:	753b      	strb	r3, [r7, #20]
    b5b4:	7d7b      	ldrb	r3, [r7, #21]
    b5b6:	2202      	movs	r2, #2
    b5b8:	f362 1305 	bfi	r3, r2, #4, #2
    b5bc:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b5be:	68bb      	ldr	r3, [r7, #8]
    b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b5c2:	687b      	ldr	r3, [r7, #4]
    b5c4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b5c6:	2300      	movs	r3, #0
    b5c8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b5ca:	687b      	ldr	r3, [r7, #4]
    b5cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b5d0:	2b00      	cmp	r3, #0
    b5d2:	d104      	bne.n	b5de <n25q256a_erase+0x86>
    b5d4:	68bb      	ldr	r3, [r7, #8]
    b5d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d002      	beq.n	b5e4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b5de:	f06f 030c 	mvn.w	r3, #12
    b5e2:	e087      	b.n	b6f4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b5e4:	687b      	ldr	r3, [r7, #4]
    b5e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b5ea:	d368      	bcc.n	b6be <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b5ec:	23c7      	movs	r3, #199	; 0xc7
    b5ee:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b5f0:	7d3b      	ldrb	r3, [r7, #20]
    b5f2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b5f6:	b2db      	uxtb	r3, r3
    b5f8:	2201      	movs	r2, #1
    b5fa:	4619      	mov	r1, r3
    b5fc:	68f8      	ldr	r0, [r7, #12]
    b5fe:	4b40      	ldr	r3, [pc, #256]	; (b700 <n25q256a_erase+0x1a8>)
    b600:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b602:	f107 0314 	add.w	r3, r7, #20
    b606:	4619      	mov	r1, r3
    b608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b60a:	4b3e      	ldr	r3, [pc, #248]	; (b704 <n25q256a_erase+0x1ac>)
    b60c:	4798      	blx	r3
    b60e:	e059      	b.n	b6c4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b612:	b29b      	uxth	r3, r3
    b614:	2b00      	cmp	r3, #0
    b616:	d11f      	bne.n	b658 <n25q256a_erase+0x100>
    b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b61a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b61e:	d31b      	bcc.n	b658 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b622:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b624:	23d8      	movs	r3, #216	; 0xd8
    b626:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b628:	7d3b      	ldrb	r3, [r7, #20]
    b62a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b62e:	b2db      	uxtb	r3, r3
    b630:	2201      	movs	r2, #1
    b632:	4619      	mov	r1, r3
    b634:	68f8      	ldr	r0, [r7, #12]
    b636:	4b32      	ldr	r3, [pc, #200]	; (b700 <n25q256a_erase+0x1a8>)
    b638:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b63a:	f107 0314 	add.w	r3, r7, #20
    b63e:	4619      	mov	r1, r3
    b640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b642:	4b30      	ldr	r3, [pc, #192]	; (b704 <n25q256a_erase+0x1ac>)
    b644:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b648:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b650:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b654:	63bb      	str	r3, [r7, #56]	; 0x38
    b656:	e023      	b.n	b6a0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b65a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b65e:	d31b      	bcc.n	b698 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b662:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b664:	2320      	movs	r3, #32
    b666:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b668:	7d3b      	ldrb	r3, [r7, #20]
    b66a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b66e:	b2db      	uxtb	r3, r3
    b670:	2201      	movs	r2, #1
    b672:	4619      	mov	r1, r3
    b674:	68f8      	ldr	r0, [r7, #12]
    b676:	4b22      	ldr	r3, [pc, #136]	; (b700 <n25q256a_erase+0x1a8>)
    b678:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b67a:	f107 0314 	add.w	r3, r7, #20
    b67e:	4619      	mov	r1, r3
    b680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b682:	4b20      	ldr	r3, [pc, #128]	; (b704 <n25q256a_erase+0x1ac>)
    b684:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b68c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b690:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b694:	63bb      	str	r3, [r7, #56]	; 0x38
    b696:	e003      	b.n	b6a0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b698:	f06f 030c 	mvn.w	r3, #12
    b69c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b69e:	e011      	b.n	b6c4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b6a0:	bf00      	nop
    b6a2:	7d3b      	ldrb	r3, [r7, #20]
    b6a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b6a8:	b2db      	uxtb	r3, r3
    b6aa:	2270      	movs	r2, #112	; 0x70
    b6ac:	4619      	mov	r1, r3
    b6ae:	68f8      	ldr	r0, [r7, #12]
    b6b0:	4b15      	ldr	r3, [pc, #84]	; (b708 <n25q256a_erase+0x1b0>)
    b6b2:	4798      	blx	r3
    b6b4:	4603      	mov	r3, r0
    b6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d0f1      	beq.n	b6a2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b6c0:	2b00      	cmp	r3, #0
    b6c2:	d1a5      	bne.n	b610 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b6c4:	bf00      	nop
    b6c6:	7d3b      	ldrb	r3, [r7, #20]
    b6c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b6cc:	b2db      	uxtb	r3, r3
    b6ce:	2270      	movs	r2, #112	; 0x70
    b6d0:	4619      	mov	r1, r3
    b6d2:	68f8      	ldr	r0, [r7, #12]
    b6d4:	4b0c      	ldr	r3, [pc, #48]	; (b708 <n25q256a_erase+0x1b0>)
    b6d6:	4798      	blx	r3
    b6d8:	4603      	mov	r3, r0
    b6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d0f1      	beq.n	b6c6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b6e4:	7b5b      	ldrb	r3, [r3, #13]
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	d003      	beq.n	b6f2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b6ea:	2101      	movs	r1, #1
    b6ec:	68f8      	ldr	r0, [r7, #12]
    b6ee:	4b07      	ldr	r3, [pc, #28]	; (b70c <n25q256a_erase+0x1b4>)
    b6f0:	4798      	blx	r3
	}
	return rc;
    b6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b6f4:	4618      	mov	r0, r3
    b6f6:	3740      	adds	r7, #64	; 0x40
    b6f8:	46bd      	mov	sp, r7
    b6fa:	bd80      	pop	{r7, pc}
    b6fc:	001fffff 	.word	0x001fffff
    b700:	0000b1b9 	.word	0x0000b1b9
    b704:	000023fd 	.word	0x000023fd
    b708:	0000b07d 	.word	0x0000b07d
    b70c:	0000afb1 	.word	0x0000afb1

0000b710 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b710:	b590      	push	{r4, r7, lr}
    b712:	b085      	sub	sp, #20
    b714:	af00      	add	r7, sp, #0
    b716:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b718:	687b      	ldr	r3, [r7, #4]
    b71a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b71c:	68fb      	ldr	r3, [r7, #12]
    b71e:	7b1b      	ldrb	r3, [r3, #12]
    b720:	2b00      	cmp	r3, #0
    b722:	d001      	beq.n	b728 <n25q256a_enable_xip+0x18>
    b724:	2306      	movs	r3, #6
    b726:	e000      	b.n	b72a <n25q256a_enable_xip+0x1a>
    b728:	2300      	movs	r3, #0
    b72a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b72c:	68fb      	ldr	r3, [r7, #12]
    b72e:	7b5b      	ldrb	r3, [r3, #13]
    b730:	2b00      	cmp	r3, #0
    b732:	d129      	bne.n	b788 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b734:	7afb      	ldrb	r3, [r7, #11]
    b736:	2285      	movs	r2, #133	; 0x85
    b738:	4619      	mov	r1, r3
    b73a:	6878      	ldr	r0, [r7, #4]
    b73c:	4b15      	ldr	r3, [pc, #84]	; (b794 <n25q256a_enable_xip+0x84>)
    b73e:	4798      	blx	r3
    b740:	4603      	mov	r3, r0
    b742:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b744:	7abb      	ldrb	r3, [r7, #10]
    b746:	f003 0308 	and.w	r3, r3, #8
    b74a:	2b00      	cmp	r3, #0
    b74c:	d015      	beq.n	b77a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b74e:	7abb      	ldrb	r3, [r7, #10]
    b750:	f023 0308 	bic.w	r3, r3, #8
    b754:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b756:	7abb      	ldrb	r3, [r7, #10]
    b758:	7af9      	ldrb	r1, [r7, #11]
    b75a:	2281      	movs	r2, #129	; 0x81
    b75c:	6878      	ldr	r0, [r7, #4]
    b75e:	4c0e      	ldr	r4, [pc, #56]	; (b798 <n25q256a_enable_xip+0x88>)
    b760:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b762:	bf00      	nop
    b764:	7afb      	ldrb	r3, [r7, #11]
    b766:	2270      	movs	r2, #112	; 0x70
    b768:	4619      	mov	r1, r3
    b76a:	6878      	ldr	r0, [r7, #4]
    b76c:	4b09      	ldr	r3, [pc, #36]	; (b794 <n25q256a_enable_xip+0x84>)
    b76e:	4798      	blx	r3
    b770:	4603      	mov	r3, r0
    b772:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b776:	2b00      	cmp	r3, #0
    b778:	d0f4      	beq.n	b764 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b77a:	68fb      	ldr	r3, [r7, #12]
    b77c:	2201      	movs	r2, #1
    b77e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b780:	2101      	movs	r1, #1
    b782:	6878      	ldr	r0, [r7, #4]
    b784:	4b05      	ldr	r3, [pc, #20]	; (b79c <n25q256a_enable_xip+0x8c>)
    b786:	4798      	blx	r3
	}
	return ERR_NONE;
    b788:	2300      	movs	r3, #0
}
    b78a:	4618      	mov	r0, r3
    b78c:	3714      	adds	r7, #20
    b78e:	46bd      	mov	sp, r7
    b790:	bd90      	pop	{r4, r7, pc}
    b792:	bf00      	nop
    b794:	0000b07d 	.word	0x0000b07d
    b798:	0000b119 	.word	0x0000b119
    b79c:	0000afb1 	.word	0x0000afb1

0000b7a0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b7a0:	b580      	push	{r7, lr}
    b7a2:	b086      	sub	sp, #24
    b7a4:	af00      	add	r7, sp, #0
    b7a6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b7a8:	687b      	ldr	r3, [r7, #4]
    b7aa:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b7ac:	687b      	ldr	r3, [r7, #4]
    b7ae:	681b      	ldr	r3, [r3, #0]
    b7b0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b7b2:	697b      	ldr	r3, [r7, #20]
    b7b4:	7b1b      	ldrb	r3, [r3, #12]
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d001      	beq.n	b7be <n25q256a_disable_xip+0x1e>
    b7ba:	2306      	movs	r3, #6
    b7bc:	e000      	b.n	b7c0 <n25q256a_disable_xip+0x20>
    b7be:	2300      	movs	r3, #0
    b7c0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b7c2:	2100      	movs	r1, #0
    b7c4:	6878      	ldr	r0, [r7, #4]
    b7c6:	4b15      	ldr	r3, [pc, #84]	; (b81c <n25q256a_disable_xip+0x7c>)
    b7c8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b7ca:	7bfb      	ldrb	r3, [r7, #15]
    b7cc:	2285      	movs	r2, #133	; 0x85
    b7ce:	4619      	mov	r1, r3
    b7d0:	6878      	ldr	r0, [r7, #4]
    b7d2:	4b13      	ldr	r3, [pc, #76]	; (b820 <n25q256a_disable_xip+0x80>)
    b7d4:	4798      	blx	r3
    b7d6:	4603      	mov	r3, r0
    b7d8:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b7da:	7bbb      	ldrb	r3, [r7, #14]
    b7dc:	f003 0308 	and.w	r3, r3, #8
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d113      	bne.n	b80c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b7e4:	697b      	ldr	r3, [r7, #20]
    b7e6:	689b      	ldr	r3, [r3, #8]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	d00f      	beq.n	b80c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b7ec:	693b      	ldr	r3, [r7, #16]
    b7ee:	681b      	ldr	r3, [r3, #0]
    b7f0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b7f2:	6938      	ldr	r0, [r7, #16]
    b7f4:	4b0b      	ldr	r3, [pc, #44]	; (b824 <n25q256a_disable_xip+0x84>)
    b7f6:	4798      	blx	r3
			n25q->pin_exit_xip();
    b7f8:	697b      	ldr	r3, [r7, #20]
    b7fa:	689b      	ldr	r3, [r3, #8]
    b7fc:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b7fe:	68b9      	ldr	r1, [r7, #8]
    b800:	6938      	ldr	r0, [r7, #16]
    b802:	4b09      	ldr	r3, [pc, #36]	; (b828 <n25q256a_disable_xip+0x88>)
    b804:	4798      	blx	r3
			qspi_sync_enable(descr);
    b806:	6938      	ldr	r0, [r7, #16]
    b808:	4b08      	ldr	r3, [pc, #32]	; (b82c <n25q256a_disable_xip+0x8c>)
    b80a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b80c:	697b      	ldr	r3, [r7, #20]
    b80e:	2200      	movs	r2, #0
    b810:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b812:	2300      	movs	r3, #0
}
    b814:	4618      	mov	r0, r3
    b816:	3718      	adds	r7, #24
    b818:	46bd      	mov	sp, r7
    b81a:	bd80      	pop	{r7, pc}
    b81c:	0000afb1 	.word	0x0000afb1
    b820:	0000b07d 	.word	0x0000b07d
    b824:	000023c1 	.word	0x000023c1
    b828:	00002339 	.word	0x00002339
    b82c:	00002385 	.word	0x00002385

0000b830 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b830:	b480      	push	{r7}
    b832:	b085      	sub	sp, #20
    b834:	af00      	add	r7, sp, #0
    b836:	60f8      	str	r0, [r7, #12]
    b838:	60b9      	str	r1, [r7, #8]
    b83a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b83c:	68fb      	ldr	r3, [r7, #12]
    b83e:	68ba      	ldr	r2, [r7, #8]
    b840:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b842:	68fb      	ldr	r3, [r7, #12]
    b844:	687a      	ldr	r2, [r7, #4]
    b846:	605a      	str	r2, [r3, #4]

	return me;
    b848:	68fb      	ldr	r3, [r7, #12]
}
    b84a:	4618      	mov	r0, r3
    b84c:	3714      	adds	r7, #20
    b84e:	46bd      	mov	sp, r7
    b850:	f85d 7b04 	ldr.w	r7, [sp], #4
    b854:	4770      	bx	lr

0000b856 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b856:	b480      	push	{r7}
    b858:	b083      	sub	sp, #12
    b85a:	af00      	add	r7, sp, #0
    b85c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b85e:	687b      	ldr	r3, [r7, #4]
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	b29a      	uxth	r2, r3
    b864:	687b      	ldr	r3, [r7, #4]
    b866:	3301      	adds	r3, #1
    b868:	781b      	ldrb	r3, [r3, #0]
    b86a:	b29b      	uxth	r3, r3
    b86c:	021b      	lsls	r3, r3, #8
    b86e:	b29b      	uxth	r3, r3
    b870:	4413      	add	r3, r2
    b872:	b29b      	uxth	r3, r3
}
    b874:	4618      	mov	r0, r3
    b876:	370c      	adds	r7, #12
    b878:	46bd      	mov	sp, r7
    b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b87e:	4770      	bx	lr

0000b880 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b880:	b480      	push	{r7}
    b882:	b083      	sub	sp, #12
    b884:	af00      	add	r7, sp, #0
    b886:	6078      	str	r0, [r7, #4]
	return desc[0];
    b888:	687b      	ldr	r3, [r7, #4]
    b88a:	781b      	ldrb	r3, [r3, #0]
}
    b88c:	4618      	mov	r0, r3
    b88e:	370c      	adds	r7, #12
    b890:	46bd      	mov	sp, r7
    b892:	f85d 7b04 	ldr.w	r7, [sp], #4
    b896:	4770      	bx	lr

0000b898 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b898:	b580      	push	{r7, lr}
    b89a:	b082      	sub	sp, #8
    b89c:	af00      	add	r7, sp, #0
    b89e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b8a0:	6878      	ldr	r0, [r7, #4]
    b8a2:	4b05      	ldr	r3, [pc, #20]	; (b8b8 <usb_desc_next+0x20>)
    b8a4:	4798      	blx	r3
    b8a6:	4603      	mov	r3, r0
    b8a8:	461a      	mov	r2, r3
    b8aa:	687b      	ldr	r3, [r7, #4]
    b8ac:	4413      	add	r3, r2
}
    b8ae:	4618      	mov	r0, r3
    b8b0:	3708      	adds	r7, #8
    b8b2:	46bd      	mov	sp, r7
    b8b4:	bd80      	pop	{r7, pc}
    b8b6:	bf00      	nop
    b8b8:	0000b881 	.word	0x0000b881

0000b8bc <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b8bc:	b580      	push	{r7, lr}
    b8be:	b08c      	sub	sp, #48	; 0x30
    b8c0:	af00      	add	r7, sp, #0
    b8c2:	6078      	str	r0, [r7, #4]
    b8c4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b8c6:	687b      	ldr	r3, [r7, #4]
    b8c8:	689b      	ldr	r3, [r3, #8]
    b8ca:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b8cc:	683b      	ldr	r3, [r7, #0]
    b8ce:	681b      	ldr	r3, [r3, #0]
    b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b8d2:	2300      	movs	r3, #0
    b8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b8d8:	e08f      	b.n	b9fa <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8dc:	2b00      	cmp	r3, #0
    b8de:	d102      	bne.n	b8e6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b8e0:	f06f 0309 	mvn.w	r3, #9
    b8e4:	e092      	b.n	ba0c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8e8:	789b      	ldrb	r3, [r3, #2]
    b8ea:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8ee:	795b      	ldrb	r3, [r3, #5]
    b8f0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b8f2:	7c7b      	ldrb	r3, [r7, #17]
    b8f4:	2b02      	cmp	r3, #2
    b8f6:	d002      	beq.n	b8fe <cdcdf_acm_enable+0x42>
    b8f8:	7c7b      	ldrb	r3, [r7, #17]
    b8fa:	2b0a      	cmp	r3, #10
    b8fc:	d121      	bne.n	b942 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b8fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b902:	6a3a      	ldr	r2, [r7, #32]
    b904:	5cd2      	ldrb	r2, [r2, r3]
    b906:	7bbb      	ldrb	r3, [r7, #14]
    b908:	429a      	cmp	r2, r3
    b90a:	d102      	bne.n	b912 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b90c:	f06f 0311 	mvn.w	r3, #17
    b910:	e07c      	b.n	ba0c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b916:	6a3a      	ldr	r2, [r7, #32]
    b918:	5cd3      	ldrb	r3, [r2, r3]
    b91a:	2bff      	cmp	r3, #255	; 0xff
    b91c:	d002      	beq.n	b924 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b91e:	f06f 031b 	mvn.w	r3, #27
    b922:	e073      	b.n	ba0c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b928:	7bb9      	ldrb	r1, [r7, #14]
    b92a:	6a3a      	ldr	r2, [r7, #32]
    b92c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b92e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b930:	683b      	ldr	r3, [r7, #0]
    b932:	685b      	ldr	r3, [r3, #4]
    b934:	2205      	movs	r2, #5
    b936:	4619      	mov	r1, r3
    b938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b93a:	4b36      	ldr	r3, [pc, #216]	; (ba14 <cdcdf_acm_enable+0x158>)
    b93c:	4798      	blx	r3
    b93e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b940:	e047      	b.n	b9d2 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b942:	f06f 0309 	mvn.w	r3, #9
    b946:	e061      	b.n	ba0c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b94a:	789b      	ldrb	r3, [r3, #2]
    b94c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b950:	78db      	ldrb	r3, [r3, #3]
    b952:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b956:	3304      	adds	r3, #4
    b958:	4618      	mov	r0, r3
    b95a:	4b2f      	ldr	r3, [pc, #188]	; (ba18 <cdcdf_acm_enable+0x15c>)
    b95c:	4798      	blx	r3
    b95e:	4603      	mov	r3, r0
    b960:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b962:	7ebb      	ldrb	r3, [r7, #26]
    b964:	7ef9      	ldrb	r1, [r7, #27]
    b966:	8bba      	ldrh	r2, [r7, #28]
    b968:	4618      	mov	r0, r3
    b96a:	4b2c      	ldr	r3, [pc, #176]	; (ba1c <cdcdf_acm_enable+0x160>)
    b96c:	4798      	blx	r3
    b96e:	4603      	mov	r3, r0
    b970:	2b00      	cmp	r3, #0
    b972:	d002      	beq.n	b97a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b974:	f06f 0313 	mvn.w	r3, #19
    b978:	e048      	b.n	ba0c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b97a:	7ebb      	ldrb	r3, [r7, #26]
    b97c:	b25b      	sxtb	r3, r3
    b97e:	2b00      	cmp	r3, #0
    b980:	da0f      	bge.n	b9a2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b986:	7eb9      	ldrb	r1, [r7, #26]
    b988:	6a3a      	ldr	r2, [r7, #32]
    b98a:	4413      	add	r3, r2
    b98c:	460a      	mov	r2, r1
    b98e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b994:	6a3a      	ldr	r2, [r7, #32]
    b996:	4413      	add	r3, r2
    b998:	789b      	ldrb	r3, [r3, #2]
    b99a:	4618      	mov	r0, r3
    b99c:	4b20      	ldr	r3, [pc, #128]	; (ba20 <cdcdf_acm_enable+0x164>)
    b99e:	4798      	blx	r3
    b9a0:	e007      	b.n	b9b2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b9a2:	7eba      	ldrb	r2, [r7, #26]
    b9a4:	6a3b      	ldr	r3, [r7, #32]
    b9a6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b9a8:	6a3b      	ldr	r3, [r7, #32]
    b9aa:	791b      	ldrb	r3, [r3, #4]
    b9ac:	4618      	mov	r0, r3
    b9ae:	4b1c      	ldr	r3, [pc, #112]	; (ba20 <cdcdf_acm_enable+0x164>)
    b9b0:	4798      	blx	r3
			}
			desc->sod = ep;
    b9b2:	683b      	ldr	r3, [r7, #0]
    b9b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b9b6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b9b8:	683b      	ldr	r3, [r7, #0]
    b9ba:	681b      	ldr	r3, [r3, #0]
    b9bc:	4618      	mov	r0, r3
    b9be:	4b19      	ldr	r3, [pc, #100]	; (ba24 <cdcdf_acm_enable+0x168>)
    b9c0:	4798      	blx	r3
    b9c2:	4602      	mov	r2, r0
    b9c4:	683b      	ldr	r3, [r7, #0]
    b9c6:	685b      	ldr	r3, [r3, #4]
    b9c8:	4619      	mov	r1, r3
    b9ca:	4610      	mov	r0, r2
    b9cc:	4b16      	ldr	r3, [pc, #88]	; (ba28 <cdcdf_acm_enable+0x16c>)
    b9ce:	4798      	blx	r3
    b9d0:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	d1b7      	bne.n	b948 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b9d8:	683b      	ldr	r3, [r7, #0]
    b9da:	681b      	ldr	r3, [r3, #0]
    b9dc:	4618      	mov	r0, r3
    b9de:	4b11      	ldr	r3, [pc, #68]	; (ba24 <cdcdf_acm_enable+0x168>)
    b9e0:	4798      	blx	r3
    b9e2:	683b      	ldr	r3, [r7, #0]
    b9e4:	685b      	ldr	r3, [r3, #4]
    b9e6:	2204      	movs	r2, #4
    b9e8:	4619      	mov	r1, r3
    b9ea:	4b0a      	ldr	r3, [pc, #40]	; (ba14 <cdcdf_acm_enable+0x158>)
    b9ec:	4798      	blx	r3
    b9ee:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b9f4:	3301      	adds	r3, #1
    b9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b9fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b9fe:	2b01      	cmp	r3, #1
    ba00:	f67f af6b 	bls.w	b8da <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    ba04:	4b09      	ldr	r3, [pc, #36]	; (ba2c <cdcdf_acm_enable+0x170>)
    ba06:	2201      	movs	r2, #1
    ba08:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ba0a:	2300      	movs	r3, #0
}
    ba0c:	4618      	mov	r0, r3
    ba0e:	3730      	adds	r7, #48	; 0x30
    ba10:	46bd      	mov	sp, r7
    ba12:	bd80      	pop	{r7, pc}
    ba14:	0000cc7d 	.word	0x0000cc7d
    ba18:	0000b857 	.word	0x0000b857
    ba1c:	00002fb1 	.word	0x00002fb1
    ba20:	0000309d 	.word	0x0000309d
    ba24:	0000b899 	.word	0x0000b899
    ba28:	0000ccd9 	.word	0x0000ccd9
    ba2c:	20000e54 	.word	0x20000e54

0000ba30 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    ba30:	b580      	push	{r7, lr}
    ba32:	b088      	sub	sp, #32
    ba34:	af00      	add	r7, sp, #0
    ba36:	6078      	str	r0, [r7, #4]
    ba38:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ba3a:	687b      	ldr	r3, [r7, #4]
    ba3c:	689b      	ldr	r3, [r3, #8]
    ba3e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    ba40:	683b      	ldr	r3, [r7, #0]
    ba42:	2b00      	cmp	r3, #0
    ba44:	d00c      	beq.n	ba60 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ba46:	683b      	ldr	r3, [r7, #0]
    ba48:	681b      	ldr	r3, [r3, #0]
    ba4a:	795b      	ldrb	r3, [r3, #5]
    ba4c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    ba4e:	7c7b      	ldrb	r3, [r7, #17]
    ba50:	2b02      	cmp	r3, #2
    ba52:	d005      	beq.n	ba60 <cdcdf_acm_disable+0x30>
    ba54:	7c7b      	ldrb	r3, [r7, #17]
    ba56:	2b0a      	cmp	r3, #10
    ba58:	d002      	beq.n	ba60 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    ba5a:	f06f 0309 	mvn.w	r3, #9
    ba5e:	e035      	b.n	bacc <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    ba60:	2300      	movs	r3, #0
    ba62:	77fb      	strb	r3, [r7, #31]
    ba64:	e01f      	b.n	baa6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    ba66:	7ffb      	ldrb	r3, [r7, #31]
    ba68:	69ba      	ldr	r2, [r7, #24]
    ba6a:	5cd3      	ldrb	r3, [r2, r3]
    ba6c:	2bff      	cmp	r3, #255	; 0xff
    ba6e:	d016      	beq.n	ba9e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    ba70:	7ffb      	ldrb	r3, [r7, #31]
    ba72:	69ba      	ldr	r2, [r7, #24]
    ba74:	21ff      	movs	r1, #255	; 0xff
    ba76:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    ba78:	7ffb      	ldrb	r3, [r7, #31]
    ba7a:	69ba      	ldr	r2, [r7, #24]
    ba7c:	4413      	add	r3, r2
    ba7e:	789b      	ldrb	r3, [r3, #2]
    ba80:	2bff      	cmp	r3, #255	; 0xff
    ba82:	d00d      	beq.n	baa0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    ba84:	7ffb      	ldrb	r3, [r7, #31]
    ba86:	69ba      	ldr	r2, [r7, #24]
    ba88:	4413      	add	r3, r2
    ba8a:	789b      	ldrb	r3, [r3, #2]
    ba8c:	4618      	mov	r0, r3
    ba8e:	4b11      	ldr	r3, [pc, #68]	; (bad4 <cdcdf_acm_disable+0xa4>)
    ba90:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    ba92:	7ffb      	ldrb	r3, [r7, #31]
    ba94:	69ba      	ldr	r2, [r7, #24]
    ba96:	4413      	add	r3, r2
    ba98:	22ff      	movs	r2, #255	; 0xff
    ba9a:	709a      	strb	r2, [r3, #2]
    ba9c:	e000      	b.n	baa0 <cdcdf_acm_disable+0x70>
			continue;
    ba9e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    baa0:	7ffb      	ldrb	r3, [r7, #31]
    baa2:	3301      	adds	r3, #1
    baa4:	77fb      	strb	r3, [r7, #31]
    baa6:	7ffb      	ldrb	r3, [r7, #31]
    baa8:	2b01      	cmp	r3, #1
    baaa:	d9dc      	bls.n	ba66 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    baac:	69bb      	ldr	r3, [r7, #24]
    baae:	791b      	ldrb	r3, [r3, #4]
    bab0:	2bff      	cmp	r3, #255	; 0xff
    bab2:	d007      	beq.n	bac4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bab4:	69bb      	ldr	r3, [r7, #24]
    bab6:	791b      	ldrb	r3, [r3, #4]
    bab8:	4618      	mov	r0, r3
    baba:	4b06      	ldr	r3, [pc, #24]	; (bad4 <cdcdf_acm_disable+0xa4>)
    babc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    babe:	69bb      	ldr	r3, [r7, #24]
    bac0:	22ff      	movs	r2, #255	; 0xff
    bac2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bac4:	4b04      	ldr	r3, [pc, #16]	; (bad8 <cdcdf_acm_disable+0xa8>)
    bac6:	2200      	movs	r2, #0
    bac8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    baca:	2300      	movs	r3, #0
}
    bacc:	4618      	mov	r0, r3
    bace:	3720      	adds	r7, #32
    bad0:	46bd      	mov	sp, r7
    bad2:	bd80      	pop	{r7, pc}
    bad4:	0000304d 	.word	0x0000304d
    bad8:	20000e54 	.word	0x20000e54

0000badc <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    badc:	b580      	push	{r7, lr}
    bade:	b084      	sub	sp, #16
    bae0:	af00      	add	r7, sp, #0
    bae2:	60f8      	str	r0, [r7, #12]
    bae4:	460b      	mov	r3, r1
    bae6:	607a      	str	r2, [r7, #4]
    bae8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    baea:	7afb      	ldrb	r3, [r7, #11]
    baec:	2b01      	cmp	r3, #1
    baee:	d009      	beq.n	bb04 <cdcdf_acm_ctrl+0x28>
    baf0:	2b02      	cmp	r3, #2
    baf2:	d00d      	beq.n	bb10 <cdcdf_acm_ctrl+0x34>
    baf4:	2b00      	cmp	r3, #0
    baf6:	d10e      	bne.n	bb16 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    baf8:	6879      	ldr	r1, [r7, #4]
    bafa:	68f8      	ldr	r0, [r7, #12]
    bafc:	4b09      	ldr	r3, [pc, #36]	; (bb24 <cdcdf_acm_ctrl+0x48>)
    bafe:	4798      	blx	r3
    bb00:	4603      	mov	r3, r0
    bb02:	e00a      	b.n	bb1a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bb04:	6879      	ldr	r1, [r7, #4]
    bb06:	68f8      	ldr	r0, [r7, #12]
    bb08:	4b07      	ldr	r3, [pc, #28]	; (bb28 <cdcdf_acm_ctrl+0x4c>)
    bb0a:	4798      	blx	r3
    bb0c:	4603      	mov	r3, r0
    bb0e:	e004      	b.n	bb1a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bb10:	f06f 031a 	mvn.w	r3, #26
    bb14:	e001      	b.n	bb1a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bb16:	f06f 030c 	mvn.w	r3, #12
	}
}
    bb1a:	4618      	mov	r0, r3
    bb1c:	3710      	adds	r7, #16
    bb1e:	46bd      	mov	sp, r7
    bb20:	bd80      	pop	{r7, pc}
    bb22:	bf00      	nop
    bb24:	0000b8bd 	.word	0x0000b8bd
    bb28:	0000ba31 	.word	0x0000ba31

0000bb2c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bb2c:	b590      	push	{r4, r7, lr}
    bb2e:	b087      	sub	sp, #28
    bb30:	af00      	add	r7, sp, #0
    bb32:	4603      	mov	r3, r0
    bb34:	6039      	str	r1, [r7, #0]
    bb36:	71fb      	strb	r3, [r7, #7]
    bb38:	4613      	mov	r3, r2
    bb3a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bb3c:	683b      	ldr	r3, [r7, #0]
    bb3e:	799a      	ldrb	r2, [r3, #6]
    bb40:	79db      	ldrb	r3, [r3, #7]
    bb42:	021b      	lsls	r3, r3, #8
    bb44:	4313      	orrs	r3, r2
    bb46:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bb48:	4b2b      	ldr	r3, [pc, #172]	; (bbf8 <cdcdf_acm_set_req+0xcc>)
    bb4a:	4798      	blx	r3
    bb4c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bb4e:	683b      	ldr	r3, [r7, #0]
    bb50:	785b      	ldrb	r3, [r3, #1]
    bb52:	2b20      	cmp	r3, #32
    bb54:	d002      	beq.n	bb5c <cdcdf_acm_set_req+0x30>
    bb56:	2b22      	cmp	r3, #34	; 0x22
    bb58:	d034      	beq.n	bbc4 <cdcdf_acm_set_req+0x98>
    bb5a:	e046      	b.n	bbea <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bb5c:	8afb      	ldrh	r3, [r7, #22]
    bb5e:	2b07      	cmp	r3, #7
    bb60:	d002      	beq.n	bb68 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bb62:	f04f 33ff 	mov.w	r3, #4294967295
    bb66:	e042      	b.n	bbee <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bb68:	79bb      	ldrb	r3, [r7, #6]
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d107      	bne.n	bb7e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bb6e:	8afa      	ldrh	r2, [r7, #22]
    bb70:	79f8      	ldrb	r0, [r7, #7]
    bb72:	2300      	movs	r3, #0
    bb74:	6939      	ldr	r1, [r7, #16]
    bb76:	4c21      	ldr	r4, [pc, #132]	; (bbfc <cdcdf_acm_set_req+0xd0>)
    bb78:	47a0      	blx	r4
    bb7a:	4603      	mov	r3, r0
    bb7c:	e037      	b.n	bbee <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bb7e:	693a      	ldr	r2, [r7, #16]
    bb80:	f107 0308 	add.w	r3, r7, #8
    bb84:	6810      	ldr	r0, [r2, #0]
    bb86:	6018      	str	r0, [r3, #0]
    bb88:	8891      	ldrh	r1, [r2, #4]
    bb8a:	7992      	ldrb	r2, [r2, #6]
    bb8c:	8099      	strh	r1, [r3, #4]
    bb8e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bb90:	4b1b      	ldr	r3, [pc, #108]	; (bc00 <cdcdf_acm_set_req+0xd4>)
    bb92:	681b      	ldr	r3, [r3, #0]
    bb94:	2b00      	cmp	r3, #0
    bb96:	d008      	beq.n	bbaa <cdcdf_acm_set_req+0x7e>
    bb98:	4b19      	ldr	r3, [pc, #100]	; (bc00 <cdcdf_acm_set_req+0xd4>)
    bb9a:	681b      	ldr	r3, [r3, #0]
    bb9c:	f107 0208 	add.w	r2, r7, #8
    bba0:	4610      	mov	r0, r2
    bba2:	4798      	blx	r3
    bba4:	4603      	mov	r3, r0
    bba6:	2b00      	cmp	r3, #0
    bba8:	d00a      	beq.n	bbc0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bbaa:	4b16      	ldr	r3, [pc, #88]	; (bc04 <cdcdf_acm_set_req+0xd8>)
    bbac:	f107 0208 	add.w	r2, r7, #8
    bbb0:	e892 0003 	ldmia.w	r2, {r0, r1}
    bbb4:	6018      	str	r0, [r3, #0]
    bbb6:	3304      	adds	r3, #4
    bbb8:	8019      	strh	r1, [r3, #0]
    bbba:	3302      	adds	r3, #2
    bbbc:	0c0a      	lsrs	r2, r1, #16
    bbbe:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    bbc0:	2300      	movs	r3, #0
    bbc2:	e014      	b.n	bbee <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    bbc4:	2300      	movs	r3, #0
    bbc6:	2200      	movs	r2, #0
    bbc8:	2100      	movs	r1, #0
    bbca:	2000      	movs	r0, #0
    bbcc:	4c0b      	ldr	r4, [pc, #44]	; (bbfc <cdcdf_acm_set_req+0xd0>)
    bbce:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bbd0:	4b0d      	ldr	r3, [pc, #52]	; (bc08 <cdcdf_acm_set_req+0xdc>)
    bbd2:	681b      	ldr	r3, [r3, #0]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d006      	beq.n	bbe6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    bbd8:	4b0b      	ldr	r3, [pc, #44]	; (bc08 <cdcdf_acm_set_req+0xdc>)
    bbda:	681b      	ldr	r3, [r3, #0]
    bbdc:	683a      	ldr	r2, [r7, #0]
    bbde:	8852      	ldrh	r2, [r2, #2]
    bbe0:	b292      	uxth	r2, r2
    bbe2:	4610      	mov	r0, r2
    bbe4:	4798      	blx	r3
		}
		return ERR_NONE;
    bbe6:	2300      	movs	r3, #0
    bbe8:	e001      	b.n	bbee <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    bbea:	f06f 030c 	mvn.w	r3, #12
	}
}
    bbee:	4618      	mov	r0, r3
    bbf0:	371c      	adds	r7, #28
    bbf2:	46bd      	mov	sp, r7
    bbf4:	bd90      	pop	{r4, r7, pc}
    bbf6:	bf00      	nop
    bbf8:	0000cb79 	.word	0x0000cb79
    bbfc:	0000c9ed 	.word	0x0000c9ed
    bc00:	20000e68 	.word	0x20000e68
    bc04:	20000e5c 	.word	0x20000e5c
    bc08:	20000e64 	.word	0x20000e64

0000bc0c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bc0c:	b590      	push	{r4, r7, lr}
    bc0e:	b085      	sub	sp, #20
    bc10:	af00      	add	r7, sp, #0
    bc12:	4603      	mov	r3, r0
    bc14:	6039      	str	r1, [r7, #0]
    bc16:	71fb      	strb	r3, [r7, #7]
    bc18:	4613      	mov	r3, r2
    bc1a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    bc1c:	683b      	ldr	r3, [r7, #0]
    bc1e:	799a      	ldrb	r2, [r3, #6]
    bc20:	79db      	ldrb	r3, [r3, #7]
    bc22:	021b      	lsls	r3, r3, #8
    bc24:	4313      	orrs	r3, r2
    bc26:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    bc28:	79bb      	ldrb	r3, [r7, #6]
    bc2a:	2b01      	cmp	r3, #1
    bc2c:	d101      	bne.n	bc32 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    bc2e:	2300      	movs	r3, #0
    bc30:	e013      	b.n	bc5a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    bc32:	683b      	ldr	r3, [r7, #0]
    bc34:	785b      	ldrb	r3, [r3, #1]
    bc36:	2b21      	cmp	r3, #33	; 0x21
    bc38:	d10d      	bne.n	bc56 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bc3a:	89fb      	ldrh	r3, [r7, #14]
    bc3c:	2b07      	cmp	r3, #7
    bc3e:	d002      	beq.n	bc46 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    bc40:	f04f 33ff 	mov.w	r3, #4294967295
    bc44:	e009      	b.n	bc5a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bc46:	89fa      	ldrh	r2, [r7, #14]
    bc48:	79f8      	ldrb	r0, [r7, #7]
    bc4a:	2300      	movs	r3, #0
    bc4c:	4905      	ldr	r1, [pc, #20]	; (bc64 <cdcdf_acm_get_req+0x58>)
    bc4e:	4c06      	ldr	r4, [pc, #24]	; (bc68 <cdcdf_acm_get_req+0x5c>)
    bc50:	47a0      	blx	r4
    bc52:	4603      	mov	r3, r0
    bc54:	e001      	b.n	bc5a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bc56:	f06f 030c 	mvn.w	r3, #12
	}
}
    bc5a:	4618      	mov	r0, r3
    bc5c:	3714      	adds	r7, #20
    bc5e:	46bd      	mov	sp, r7
    bc60:	bd90      	pop	{r4, r7, pc}
    bc62:	bf00      	nop
    bc64:	20000e5c 	.word	0x20000e5c
    bc68:	0000c9ed 	.word	0x0000c9ed

0000bc6c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bc6c:	b580      	push	{r7, lr}
    bc6e:	b082      	sub	sp, #8
    bc70:	af00      	add	r7, sp, #0
    bc72:	4603      	mov	r3, r0
    bc74:	6039      	str	r1, [r7, #0]
    bc76:	71fb      	strb	r3, [r7, #7]
    bc78:	4613      	mov	r3, r2
    bc7a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bc7c:	683b      	ldr	r3, [r7, #0]
    bc7e:	781b      	ldrb	r3, [r3, #0]
    bc80:	095b      	lsrs	r3, r3, #5
    bc82:	b2db      	uxtb	r3, r3
    bc84:	f003 0303 	and.w	r3, r3, #3
    bc88:	2b01      	cmp	r3, #1
    bc8a:	d002      	beq.n	bc92 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    bc8c:	f06f 0309 	mvn.w	r3, #9
    bc90:	e026      	b.n	bce0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bc92:	683b      	ldr	r3, [r7, #0]
    bc94:	889b      	ldrh	r3, [r3, #4]
    bc96:	b29a      	uxth	r2, r3
    bc98:	4b13      	ldr	r3, [pc, #76]	; (bce8 <cdcdf_acm_req+0x7c>)
    bc9a:	781b      	ldrb	r3, [r3, #0]
    bc9c:	b29b      	uxth	r3, r3
    bc9e:	429a      	cmp	r2, r3
    bca0:	d007      	beq.n	bcb2 <cdcdf_acm_req+0x46>
    bca2:	683b      	ldr	r3, [r7, #0]
    bca4:	889b      	ldrh	r3, [r3, #4]
    bca6:	b29a      	uxth	r2, r3
    bca8:	4b0f      	ldr	r3, [pc, #60]	; (bce8 <cdcdf_acm_req+0x7c>)
    bcaa:	785b      	ldrb	r3, [r3, #1]
    bcac:	b29b      	uxth	r3, r3
    bcae:	429a      	cmp	r2, r3
    bcb0:	d114      	bne.n	bcdc <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bcb2:	683b      	ldr	r3, [r7, #0]
    bcb4:	781b      	ldrb	r3, [r3, #0]
    bcb6:	b25b      	sxtb	r3, r3
    bcb8:	2b00      	cmp	r3, #0
    bcba:	da07      	bge.n	bccc <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    bcbc:	79ba      	ldrb	r2, [r7, #6]
    bcbe:	79fb      	ldrb	r3, [r7, #7]
    bcc0:	6839      	ldr	r1, [r7, #0]
    bcc2:	4618      	mov	r0, r3
    bcc4:	4b09      	ldr	r3, [pc, #36]	; (bcec <cdcdf_acm_req+0x80>)
    bcc6:	4798      	blx	r3
    bcc8:	4603      	mov	r3, r0
    bcca:	e009      	b.n	bce0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    bccc:	79ba      	ldrb	r2, [r7, #6]
    bcce:	79fb      	ldrb	r3, [r7, #7]
    bcd0:	6839      	ldr	r1, [r7, #0]
    bcd2:	4618      	mov	r0, r3
    bcd4:	4b06      	ldr	r3, [pc, #24]	; (bcf0 <cdcdf_acm_req+0x84>)
    bcd6:	4798      	blx	r3
    bcd8:	4603      	mov	r3, r0
    bcda:	e001      	b.n	bce0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bcdc:	f06f 0309 	mvn.w	r3, #9
	}
}
    bce0:	4618      	mov	r0, r3
    bce2:	3708      	adds	r7, #8
    bce4:	46bd      	mov	sp, r7
    bce6:	bd80      	pop	{r7, pc}
    bce8:	20000e54 	.word	0x20000e54
    bcec:	0000bc0d 	.word	0x0000bc0d
    bcf0:	0000bb2d 	.word	0x0000bb2d

0000bcf4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bcf4:	b580      	push	{r7, lr}
    bcf6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bcf8:	4b0b      	ldr	r3, [pc, #44]	; (bd28 <cdcdf_acm_init+0x34>)
    bcfa:	4798      	blx	r3
    bcfc:	4603      	mov	r3, r0
    bcfe:	2b01      	cmp	r3, #1
    bd00:	d902      	bls.n	bd08 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bd02:	f06f 0310 	mvn.w	r3, #16
    bd06:	e00d      	b.n	bd24 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bd08:	4b08      	ldr	r3, [pc, #32]	; (bd2c <cdcdf_acm_init+0x38>)
    bd0a:	4a09      	ldr	r2, [pc, #36]	; (bd30 <cdcdf_acm_init+0x3c>)
    bd0c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bd0e:	4b07      	ldr	r3, [pc, #28]	; (bd2c <cdcdf_acm_init+0x38>)
    bd10:	4a08      	ldr	r2, [pc, #32]	; (bd34 <cdcdf_acm_init+0x40>)
    bd12:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bd14:	4805      	ldr	r0, [pc, #20]	; (bd2c <cdcdf_acm_init+0x38>)
    bd16:	4b08      	ldr	r3, [pc, #32]	; (bd38 <cdcdf_acm_init+0x44>)
    bd18:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bd1a:	4908      	ldr	r1, [pc, #32]	; (bd3c <cdcdf_acm_init+0x48>)
    bd1c:	2001      	movs	r0, #1
    bd1e:	4b08      	ldr	r3, [pc, #32]	; (bd40 <cdcdf_acm_init+0x4c>)
    bd20:	4798      	blx	r3
	return ERR_NONE;
    bd22:	2300      	movs	r3, #0
}
    bd24:	4618      	mov	r0, r3
    bd26:	bd80      	pop	{r7, pc}
    bd28:	0000cb91 	.word	0x0000cb91
    bd2c:	20000e48 	.word	0x20000e48
    bd30:	0000badd 	.word	0x0000badd
    bd34:	20000e54 	.word	0x20000e54
    bd38:	0000caf9 	.word	0x0000caf9
    bd3c:	20000208 	.word	0x20000208
    bd40:	0000ca29 	.word	0x0000ca29

0000bd44 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bd44:	b590      	push	{r4, r7, lr}
    bd46:	b083      	sub	sp, #12
    bd48:	af00      	add	r7, sp, #0
    bd4a:	6078      	str	r0, [r7, #4]
    bd4c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bd4e:	4b0b      	ldr	r3, [pc, #44]	; (bd7c <cdcdf_acm_read+0x38>)
    bd50:	4798      	blx	r3
    bd52:	4603      	mov	r3, r0
    bd54:	f083 0301 	eor.w	r3, r3, #1
    bd58:	b2db      	uxtb	r3, r3
    bd5a:	2b00      	cmp	r3, #0
    bd5c:	d002      	beq.n	bd64 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    bd5e:	f06f 0310 	mvn.w	r3, #16
    bd62:	e007      	b.n	bd74 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bd64:	4b06      	ldr	r3, [pc, #24]	; (bd80 <cdcdf_acm_read+0x3c>)
    bd66:	7918      	ldrb	r0, [r3, #4]
    bd68:	2300      	movs	r3, #0
    bd6a:	683a      	ldr	r2, [r7, #0]
    bd6c:	6879      	ldr	r1, [r7, #4]
    bd6e:	4c05      	ldr	r4, [pc, #20]	; (bd84 <cdcdf_acm_read+0x40>)
    bd70:	47a0      	blx	r4
    bd72:	4603      	mov	r3, r0
}
    bd74:	4618      	mov	r0, r3
    bd76:	370c      	adds	r7, #12
    bd78:	46bd      	mov	sp, r7
    bd7a:	bd90      	pop	{r4, r7, pc}
    bd7c:	0000be69 	.word	0x0000be69
    bd80:	20000e54 	.word	0x20000e54
    bd84:	0000c9ed 	.word	0x0000c9ed

0000bd88 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    bd88:	b590      	push	{r4, r7, lr}
    bd8a:	b083      	sub	sp, #12
    bd8c:	af00      	add	r7, sp, #0
    bd8e:	6078      	str	r0, [r7, #4]
    bd90:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bd92:	4b0b      	ldr	r3, [pc, #44]	; (bdc0 <cdcdf_acm_write+0x38>)
    bd94:	4798      	blx	r3
    bd96:	4603      	mov	r3, r0
    bd98:	f083 0301 	eor.w	r3, r3, #1
    bd9c:	b2db      	uxtb	r3, r3
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d002      	beq.n	bda8 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    bda2:	f06f 0310 	mvn.w	r3, #16
    bda6:	e007      	b.n	bdb8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bda8:	4b06      	ldr	r3, [pc, #24]	; (bdc4 <cdcdf_acm_write+0x3c>)
    bdaa:	78d8      	ldrb	r0, [r3, #3]
    bdac:	2301      	movs	r3, #1
    bdae:	683a      	ldr	r2, [r7, #0]
    bdb0:	6879      	ldr	r1, [r7, #4]
    bdb2:	4c05      	ldr	r4, [pc, #20]	; (bdc8 <cdcdf_acm_write+0x40>)
    bdb4:	47a0      	blx	r4
    bdb6:	4603      	mov	r3, r0
}
    bdb8:	4618      	mov	r0, r3
    bdba:	370c      	adds	r7, #12
    bdbc:	46bd      	mov	sp, r7
    bdbe:	bd90      	pop	{r4, r7, pc}
    bdc0:	0000be69 	.word	0x0000be69
    bdc4:	20000e54 	.word	0x20000e54
    bdc8:	0000c9ed 	.word	0x0000c9ed

0000bdcc <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    bdcc:	b580      	push	{r7, lr}
    bdce:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    bdd0:	4b05      	ldr	r3, [pc, #20]	; (bde8 <cdcdf_acm_stop_xfer+0x1c>)
    bdd2:	78db      	ldrb	r3, [r3, #3]
    bdd4:	4618      	mov	r0, r3
    bdd6:	4b05      	ldr	r3, [pc, #20]	; (bdec <cdcdf_acm_stop_xfer+0x20>)
    bdd8:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bdda:	4b03      	ldr	r3, [pc, #12]	; (bde8 <cdcdf_acm_stop_xfer+0x1c>)
    bddc:	791b      	ldrb	r3, [r3, #4]
    bdde:	4618      	mov	r0, r3
    bde0:	4b02      	ldr	r3, [pc, #8]	; (bdec <cdcdf_acm_stop_xfer+0x20>)
    bde2:	4798      	blx	r3
}
    bde4:	bf00      	nop
    bde6:	bd80      	pop	{r7, pc}
    bde8:	20000e54 	.word	0x20000e54
    bdec:	00003275 	.word	0x00003275

0000bdf0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    bdf0:	b580      	push	{r7, lr}
    bdf2:	b082      	sub	sp, #8
    bdf4:	af00      	add	r7, sp, #0
    bdf6:	4603      	mov	r3, r0
    bdf8:	6039      	str	r1, [r7, #0]
    bdfa:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    bdfc:	79fb      	ldrb	r3, [r7, #7]
    bdfe:	2b03      	cmp	r3, #3
    be00:	d822      	bhi.n	be48 <cdcdf_acm_register_callback+0x58>
    be02:	a201      	add	r2, pc, #4	; (adr r2, be08 <cdcdf_acm_register_callback+0x18>)
    be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    be08:	0000be19 	.word	0x0000be19
    be0c:	0000be29 	.word	0x0000be29
    be10:	0000be39 	.word	0x0000be39
    be14:	0000be41 	.word	0x0000be41
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    be18:	4b0f      	ldr	r3, [pc, #60]	; (be58 <cdcdf_acm_register_callback+0x68>)
    be1a:	791b      	ldrb	r3, [r3, #4]
    be1c:	683a      	ldr	r2, [r7, #0]
    be1e:	2102      	movs	r1, #2
    be20:	4618      	mov	r0, r3
    be22:	4b0e      	ldr	r3, [pc, #56]	; (be5c <cdcdf_acm_register_callback+0x6c>)
    be24:	4798      	blx	r3
		break;
    be26:	e012      	b.n	be4e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    be28:	4b0b      	ldr	r3, [pc, #44]	; (be58 <cdcdf_acm_register_callback+0x68>)
    be2a:	78db      	ldrb	r3, [r3, #3]
    be2c:	683a      	ldr	r2, [r7, #0]
    be2e:	2102      	movs	r1, #2
    be30:	4618      	mov	r0, r3
    be32:	4b0a      	ldr	r3, [pc, #40]	; (be5c <cdcdf_acm_register_callback+0x6c>)
    be34:	4798      	blx	r3
		break;
    be36:	e00a      	b.n	be4e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    be38:	4a09      	ldr	r2, [pc, #36]	; (be60 <cdcdf_acm_register_callback+0x70>)
    be3a:	683b      	ldr	r3, [r7, #0]
    be3c:	6013      	str	r3, [r2, #0]
		break;
    be3e:	e006      	b.n	be4e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    be40:	4a08      	ldr	r2, [pc, #32]	; (be64 <cdcdf_acm_register_callback+0x74>)
    be42:	683b      	ldr	r3, [r7, #0]
    be44:	6013      	str	r3, [r2, #0]
		break;
    be46:	e002      	b.n	be4e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    be48:	f06f 030c 	mvn.w	r3, #12
    be4c:	e000      	b.n	be50 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    be4e:	2300      	movs	r3, #0
}
    be50:	4618      	mov	r0, r3
    be52:	3708      	adds	r7, #8
    be54:	46bd      	mov	sp, r7
    be56:	bd80      	pop	{r7, pc}
    be58:	20000e54 	.word	0x20000e54
    be5c:	000033a1 	.word	0x000033a1
    be60:	20000e68 	.word	0x20000e68
    be64:	20000e64 	.word	0x20000e64

0000be68 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    be68:	b480      	push	{r7}
    be6a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    be6c:	4b03      	ldr	r3, [pc, #12]	; (be7c <cdcdf_acm_is_enabled+0x14>)
    be6e:	795b      	ldrb	r3, [r3, #5]
}
    be70:	4618      	mov	r0, r3
    be72:	46bd      	mov	sp, r7
    be74:	f85d 7b04 	ldr.w	r7, [sp], #4
    be78:	4770      	bx	lr
    be7a:	bf00      	nop
    be7c:	20000e54 	.word	0x20000e54

0000be80 <usb_get_u16>:
{
    be80:	b480      	push	{r7}
    be82:	b083      	sub	sp, #12
    be84:	af00      	add	r7, sp, #0
    be86:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    be88:	687b      	ldr	r3, [r7, #4]
    be8a:	781b      	ldrb	r3, [r3, #0]
    be8c:	b29a      	uxth	r2, r3
    be8e:	687b      	ldr	r3, [r7, #4]
    be90:	3301      	adds	r3, #1
    be92:	781b      	ldrb	r3, [r3, #0]
    be94:	b29b      	uxth	r3, r3
    be96:	021b      	lsls	r3, r3, #8
    be98:	b29b      	uxth	r3, r3
    be9a:	4413      	add	r3, r2
    be9c:	b29b      	uxth	r3, r3
}
    be9e:	4618      	mov	r0, r3
    bea0:	370c      	adds	r7, #12
    bea2:	46bd      	mov	sp, r7
    bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bea8:	4770      	bx	lr

0000beaa <usb_desc_len>:
{
    beaa:	b480      	push	{r7}
    beac:	b083      	sub	sp, #12
    beae:	af00      	add	r7, sp, #0
    beb0:	6078      	str	r0, [r7, #4]
	return desc[0];
    beb2:	687b      	ldr	r3, [r7, #4]
    beb4:	781b      	ldrb	r3, [r3, #0]
}
    beb6:	4618      	mov	r0, r3
    beb8:	370c      	adds	r7, #12
    beba:	46bd      	mov	sp, r7
    bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bec0:	4770      	bx	lr
	...

0000bec4 <usb_desc_next>:
{
    bec4:	b580      	push	{r7, lr}
    bec6:	b082      	sub	sp, #8
    bec8:	af00      	add	r7, sp, #0
    beca:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    becc:	6878      	ldr	r0, [r7, #4]
    bece:	4b05      	ldr	r3, [pc, #20]	; (bee4 <usb_desc_next+0x20>)
    bed0:	4798      	blx	r3
    bed2:	4603      	mov	r3, r0
    bed4:	461a      	mov	r2, r3
    bed6:	687b      	ldr	r3, [r7, #4]
    bed8:	4413      	add	r3, r2
}
    beda:	4618      	mov	r0, r3
    bedc:	3708      	adds	r7, #8
    bede:	46bd      	mov	sp, r7
    bee0:	bd80      	pop	{r7, pc}
    bee2:	bf00      	nop
    bee4:	0000beab 	.word	0x0000beab

0000bee8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    bee8:	b580      	push	{r7, lr}
    beea:	b082      	sub	sp, #8
    beec:	af00      	add	r7, sp, #0
    beee:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    bef0:	687b      	ldr	r3, [r7, #4]
    bef2:	3302      	adds	r3, #2
    bef4:	4618      	mov	r0, r3
    bef6:	4b03      	ldr	r3, [pc, #12]	; (bf04 <usb_cfg_desc_total_len+0x1c>)
    bef8:	4798      	blx	r3
    befa:	4603      	mov	r3, r0
}
    befc:	4618      	mov	r0, r3
    befe:	3708      	adds	r7, #8
    bf00:	46bd      	mov	sp, r7
    bf02:	bd80      	pop	{r7, pc}
    bf04:	0000be81 	.word	0x0000be81

0000bf08 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    bf08:	b590      	push	{r4, r7, lr}
    bf0a:	b085      	sub	sp, #20
    bf0c:	af00      	add	r7, sp, #0
    bf0e:	4603      	mov	r3, r0
    bf10:	6039      	str	r1, [r7, #0]
    bf12:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    bf14:	2300      	movs	r3, #0
    bf16:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    bf18:	683b      	ldr	r3, [r7, #0]
    bf1a:	799a      	ldrb	r2, [r3, #6]
    bf1c:	79db      	ldrb	r3, [r3, #7]
    bf1e:	021b      	lsls	r3, r3, #8
    bf20:	4313      	orrs	r3, r2
    bf22:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    bf24:	897b      	ldrh	r3, [r7, #10]
    bf26:	2b12      	cmp	r3, #18
    bf28:	d901      	bls.n	bf2e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    bf2a:	2312      	movs	r3, #18
    bf2c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    bf2e:	68fb      	ldr	r3, [r7, #12]
    bf30:	2b00      	cmp	r3, #0
    bf32:	d10a      	bne.n	bf4a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    bf34:	4b0f      	ldr	r3, [pc, #60]	; (bf74 <usbdc_get_dev_desc+0x6c>)
    bf36:	681b      	ldr	r3, [r3, #0]
    bf38:	6818      	ldr	r0, [r3, #0]
    bf3a:	4b0e      	ldr	r3, [pc, #56]	; (bf74 <usbdc_get_dev_desc+0x6c>)
    bf3c:	681b      	ldr	r3, [r3, #0]
    bf3e:	685b      	ldr	r3, [r3, #4]
    bf40:	2201      	movs	r2, #1
    bf42:	4619      	mov	r1, r3
    bf44:	4b0c      	ldr	r3, [pc, #48]	; (bf78 <usbdc_get_dev_desc+0x70>)
    bf46:	4798      	blx	r3
    bf48:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    bf4a:	68fb      	ldr	r3, [r7, #12]
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d101      	bne.n	bf54 <usbdc_get_dev_desc+0x4c>
		return false;
    bf50:	2300      	movs	r3, #0
    bf52:	e00b      	b.n	bf6c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    bf54:	897a      	ldrh	r2, [r7, #10]
    bf56:	79f8      	ldrb	r0, [r7, #7]
    bf58:	2300      	movs	r3, #0
    bf5a:	68f9      	ldr	r1, [r7, #12]
    bf5c:	4c07      	ldr	r4, [pc, #28]	; (bf7c <usbdc_get_dev_desc+0x74>)
    bf5e:	47a0      	blx	r4
    bf60:	4603      	mov	r3, r0
    bf62:	2b00      	cmp	r3, #0
    bf64:	d001      	beq.n	bf6a <usbdc_get_dev_desc+0x62>
		return false;
    bf66:	2300      	movs	r3, #0
    bf68:	e000      	b.n	bf6c <usbdc_get_dev_desc+0x64>
	}
	return true;
    bf6a:	2301      	movs	r3, #1
}
    bf6c:	4618      	mov	r0, r3
    bf6e:	3714      	adds	r7, #20
    bf70:	46bd      	mov	sp, r7
    bf72:	bd90      	pop	{r4, r7, pc}
    bf74:	20000e6c 	.word	0x20000e6c
    bf78:	0000cc7d 	.word	0x0000cc7d
    bf7c:	0000c9ed 	.word	0x0000c9ed

0000bf80 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    bf80:	b590      	push	{r4, r7, lr}
    bf82:	b087      	sub	sp, #28
    bf84:	af00      	add	r7, sp, #0
    bf86:	4603      	mov	r3, r0
    bf88:	6039      	str	r1, [r7, #0]
    bf8a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    bf8c:	2300      	movs	r3, #0
    bf8e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    bf90:	683b      	ldr	r3, [r7, #0]
    bf92:	799a      	ldrb	r2, [r3, #6]
    bf94:	79db      	ldrb	r3, [r3, #7]
    bf96:	021b      	lsls	r3, r3, #8
    bf98:	4313      	orrs	r3, r2
    bf9a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    bf9c:	683b      	ldr	r3, [r7, #0]
    bf9e:	885b      	ldrh	r3, [r3, #2]
    bfa0:	b29b      	uxth	r3, r3
    bfa2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bfa4:	8a7a      	ldrh	r2, [r7, #18]
    bfa6:	4b1e      	ldr	r3, [pc, #120]	; (c020 <usbdc_get_cfg_desc+0xa0>)
    bfa8:	7f1b      	ldrb	r3, [r3, #28]
    bfaa:	3b01      	subs	r3, #1
    bfac:	4013      	ands	r3, r2
    bfae:	2b00      	cmp	r3, #0
    bfb0:	bf0c      	ite	eq
    bfb2:	2301      	moveq	r3, #1
    bfb4:	2300      	movne	r3, #0
    bfb6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bfb8:	697b      	ldr	r3, [r7, #20]
    bfba:	2b00      	cmp	r3, #0
    bfbc:	d10c      	bne.n	bfd8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    bfbe:	4b18      	ldr	r3, [pc, #96]	; (c020 <usbdc_get_cfg_desc+0xa0>)
    bfc0:	681b      	ldr	r3, [r3, #0]
    bfc2:	6818      	ldr	r0, [r3, #0]
    bfc4:	4b16      	ldr	r3, [pc, #88]	; (c020 <usbdc_get_cfg_desc+0xa0>)
    bfc6:	681b      	ldr	r3, [r3, #0]
    bfc8:	6859      	ldr	r1, [r3, #4]
    bfca:	7c3b      	ldrb	r3, [r7, #16]
    bfcc:	3301      	adds	r3, #1
    bfce:	b2db      	uxtb	r3, r3
    bfd0:	461a      	mov	r2, r3
    bfd2:	4b14      	ldr	r3, [pc, #80]	; (c024 <usbdc_get_cfg_desc+0xa4>)
    bfd4:	4798      	blx	r3
    bfd6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    bfd8:	697b      	ldr	r3, [r7, #20]
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d101      	bne.n	bfe2 <usbdc_get_cfg_desc+0x62>
		return false;
    bfde:	2300      	movs	r3, #0
    bfe0:	e019      	b.n	c016 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    bfe2:	6978      	ldr	r0, [r7, #20]
    bfe4:	4b10      	ldr	r3, [pc, #64]	; (c028 <usbdc_get_cfg_desc+0xa8>)
    bfe6:	4798      	blx	r3
    bfe8:	4603      	mov	r3, r0
    bfea:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    bfec:	8a7a      	ldrh	r2, [r7, #18]
    bfee:	89fb      	ldrh	r3, [r7, #14]
    bff0:	429a      	cmp	r2, r3
    bff2:	d802      	bhi.n	bffa <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    bff4:	2300      	movs	r3, #0
    bff6:	747b      	strb	r3, [r7, #17]
    bff8:	e001      	b.n	bffe <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    bffa:	89fb      	ldrh	r3, [r7, #14]
    bffc:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    bffe:	8a7a      	ldrh	r2, [r7, #18]
    c000:	7c7b      	ldrb	r3, [r7, #17]
    c002:	79f8      	ldrb	r0, [r7, #7]
    c004:	6979      	ldr	r1, [r7, #20]
    c006:	4c09      	ldr	r4, [pc, #36]	; (c02c <usbdc_get_cfg_desc+0xac>)
    c008:	47a0      	blx	r4
    c00a:	4603      	mov	r3, r0
    c00c:	2b00      	cmp	r3, #0
    c00e:	d001      	beq.n	c014 <usbdc_get_cfg_desc+0x94>
		return false;
    c010:	2300      	movs	r3, #0
    c012:	e000      	b.n	c016 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c014:	2301      	movs	r3, #1
}
    c016:	4618      	mov	r0, r3
    c018:	371c      	adds	r7, #28
    c01a:	46bd      	mov	sp, r7
    c01c:	bd90      	pop	{r4, r7, pc}
    c01e:	bf00      	nop
    c020:	20000e6c 	.word	0x20000e6c
    c024:	0000cd3d 	.word	0x0000cd3d
    c028:	0000bee9 	.word	0x0000bee9
    c02c:	0000c9ed 	.word	0x0000c9ed

0000c030 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c030:	b590      	push	{r4, r7, lr}
    c032:	b085      	sub	sp, #20
    c034:	af00      	add	r7, sp, #0
    c036:	4603      	mov	r3, r0
    c038:	6039      	str	r1, [r7, #0]
    c03a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c03c:	683b      	ldr	r3, [r7, #0]
    c03e:	799a      	ldrb	r2, [r3, #6]
    c040:	79db      	ldrb	r3, [r3, #7]
    c042:	021b      	lsls	r3, r3, #8
    c044:	4313      	orrs	r3, r2
    c046:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c048:	683b      	ldr	r3, [r7, #0]
    c04a:	885b      	ldrh	r3, [r3, #2]
    c04c:	b29b      	uxth	r3, r3
    c04e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c050:	89fa      	ldrh	r2, [r7, #14]
    c052:	4b1a      	ldr	r3, [pc, #104]	; (c0bc <usbdc_get_str_desc+0x8c>)
    c054:	7f1b      	ldrb	r3, [r3, #28]
    c056:	3b01      	subs	r3, #1
    c058:	4013      	ands	r3, r2
    c05a:	2b00      	cmp	r3, #0
    c05c:	bf0c      	ite	eq
    c05e:	2301      	moveq	r3, #1
    c060:	2300      	movne	r3, #0
    c062:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c064:	4b15      	ldr	r3, [pc, #84]	; (c0bc <usbdc_get_str_desc+0x8c>)
    c066:	681b      	ldr	r3, [r3, #0]
    c068:	6818      	ldr	r0, [r3, #0]
    c06a:	4b14      	ldr	r3, [pc, #80]	; (c0bc <usbdc_get_str_desc+0x8c>)
    c06c:	681b      	ldr	r3, [r3, #0]
    c06e:	685b      	ldr	r3, [r3, #4]
    c070:	7b3a      	ldrb	r2, [r7, #12]
    c072:	4619      	mov	r1, r3
    c074:	4b12      	ldr	r3, [pc, #72]	; (c0c0 <usbdc_get_str_desc+0x90>)
    c076:	4798      	blx	r3
    c078:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c07a:	68bb      	ldr	r3, [r7, #8]
    c07c:	2b00      	cmp	r3, #0
    c07e:	d101      	bne.n	c084 <usbdc_get_str_desc+0x54>
		return false;
    c080:	2300      	movs	r3, #0
    c082:	e017      	b.n	c0b4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c084:	68bb      	ldr	r3, [r7, #8]
    c086:	781b      	ldrb	r3, [r3, #0]
    c088:	b29b      	uxth	r3, r3
    c08a:	89fa      	ldrh	r2, [r7, #14]
    c08c:	429a      	cmp	r2, r3
    c08e:	d802      	bhi.n	c096 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c090:	2300      	movs	r3, #0
    c092:	737b      	strb	r3, [r7, #13]
    c094:	e002      	b.n	c09c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c096:	68bb      	ldr	r3, [r7, #8]
    c098:	781b      	ldrb	r3, [r3, #0]
    c09a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c09c:	89fa      	ldrh	r2, [r7, #14]
    c09e:	7b7b      	ldrb	r3, [r7, #13]
    c0a0:	79f8      	ldrb	r0, [r7, #7]
    c0a2:	68b9      	ldr	r1, [r7, #8]
    c0a4:	4c07      	ldr	r4, [pc, #28]	; (c0c4 <usbdc_get_str_desc+0x94>)
    c0a6:	47a0      	blx	r4
    c0a8:	4603      	mov	r3, r0
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d001      	beq.n	c0b2 <usbdc_get_str_desc+0x82>
		return false;
    c0ae:	2300      	movs	r3, #0
    c0b0:	e000      	b.n	c0b4 <usbdc_get_str_desc+0x84>
	}
	return true;
    c0b2:	2301      	movs	r3, #1
}
    c0b4:	4618      	mov	r0, r3
    c0b6:	3714      	adds	r7, #20
    c0b8:	46bd      	mov	sp, r7
    c0ba:	bd90      	pop	{r4, r7, pc}
    c0bc:	20000e6c 	.word	0x20000e6c
    c0c0:	0000cdb5 	.word	0x0000cdb5
    c0c4:	0000c9ed 	.word	0x0000c9ed

0000c0c8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c0c8:	b580      	push	{r7, lr}
    c0ca:	b084      	sub	sp, #16
    c0cc:	af00      	add	r7, sp, #0
    c0ce:	4603      	mov	r3, r0
    c0d0:	6039      	str	r1, [r7, #0]
    c0d2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c0d4:	683b      	ldr	r3, [r7, #0]
    c0d6:	885b      	ldrh	r3, [r3, #2]
    c0d8:	b29b      	uxth	r3, r3
    c0da:	0a1b      	lsrs	r3, r3, #8
    c0dc:	b29b      	uxth	r3, r3
    c0de:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c0e0:	7bfb      	ldrb	r3, [r7, #15]
    c0e2:	2b02      	cmp	r3, #2
    c0e4:	d00d      	beq.n	c102 <usbdc_get_desc_req+0x3a>
    c0e6:	2b03      	cmp	r3, #3
    c0e8:	d012      	beq.n	c110 <usbdc_get_desc_req+0x48>
    c0ea:	2b01      	cmp	r3, #1
    c0ec:	d002      	beq.n	c0f4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c0ee:	bf00      	nop
	}
	return false;
    c0f0:	2300      	movs	r3, #0
    c0f2:	e013      	b.n	c11c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c0f4:	79fb      	ldrb	r3, [r7, #7]
    c0f6:	6839      	ldr	r1, [r7, #0]
    c0f8:	4618      	mov	r0, r3
    c0fa:	4b0a      	ldr	r3, [pc, #40]	; (c124 <usbdc_get_desc_req+0x5c>)
    c0fc:	4798      	blx	r3
    c0fe:	4603      	mov	r3, r0
    c100:	e00c      	b.n	c11c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c102:	79fb      	ldrb	r3, [r7, #7]
    c104:	6839      	ldr	r1, [r7, #0]
    c106:	4618      	mov	r0, r3
    c108:	4b07      	ldr	r3, [pc, #28]	; (c128 <usbdc_get_desc_req+0x60>)
    c10a:	4798      	blx	r3
    c10c:	4603      	mov	r3, r0
    c10e:	e005      	b.n	c11c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c110:	79fb      	ldrb	r3, [r7, #7]
    c112:	6839      	ldr	r1, [r7, #0]
    c114:	4618      	mov	r0, r3
    c116:	4b05      	ldr	r3, [pc, #20]	; (c12c <usbdc_get_desc_req+0x64>)
    c118:	4798      	blx	r3
    c11a:	4603      	mov	r3, r0
}
    c11c:	4618      	mov	r0, r3
    c11e:	3710      	adds	r7, #16
    c120:	46bd      	mov	sp, r7
    c122:	bd80      	pop	{r7, pc}
    c124:	0000bf09 	.word	0x0000bf09
    c128:	0000bf81 	.word	0x0000bf81
    c12c:	0000c031 	.word	0x0000c031

0000c130 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c130:	b590      	push	{r4, r7, lr}
    c132:	b085      	sub	sp, #20
    c134:	af00      	add	r7, sp, #0
    c136:	4603      	mov	r3, r0
    c138:	6039      	str	r1, [r7, #0]
    c13a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c13c:	683b      	ldr	r3, [r7, #0]
    c13e:	781b      	ldrb	r3, [r3, #0]
    c140:	f003 031f 	and.w	r3, r3, #31
    c144:	2b00      	cmp	r3, #0
    c146:	db1b      	blt.n	c180 <usbdc_get_status_req+0x50>
    c148:	2b01      	cmp	r3, #1
    c14a:	dd02      	ble.n	c152 <usbdc_get_status_req+0x22>
    c14c:	2b02      	cmp	r3, #2
    c14e:	d003      	beq.n	c158 <usbdc_get_status_req+0x28>
    c150:	e016      	b.n	c180 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c152:	2300      	movs	r3, #0
    c154:	60fb      	str	r3, [r7, #12]
		break;
    c156:	e015      	b.n	c184 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c158:	683b      	ldr	r3, [r7, #0]
    c15a:	889b      	ldrh	r3, [r3, #4]
    c15c:	b29b      	uxth	r3, r3
    c15e:	b2db      	uxtb	r3, r3
    c160:	2102      	movs	r1, #2
    c162:	4618      	mov	r0, r3
    c164:	4b0f      	ldr	r3, [pc, #60]	; (c1a4 <usbdc_get_status_req+0x74>)
    c166:	4798      	blx	r3
    c168:	4603      	mov	r3, r0
    c16a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c16c:	68fb      	ldr	r3, [r7, #12]
    c16e:	2b00      	cmp	r3, #0
    c170:	da01      	bge.n	c176 <usbdc_get_status_req+0x46>
			return false;
    c172:	2300      	movs	r3, #0
    c174:	e012      	b.n	c19c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c176:	68fb      	ldr	r3, [r7, #12]
    c178:	f003 0301 	and.w	r3, r3, #1
    c17c:	60fb      	str	r3, [r7, #12]
		break;
    c17e:	e001      	b.n	c184 <usbdc_get_status_req+0x54>
	default:
		return false;
    c180:	2300      	movs	r3, #0
    c182:	e00b      	b.n	c19c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c184:	4b08      	ldr	r3, [pc, #32]	; (c1a8 <usbdc_get_status_req+0x78>)
    c186:	695b      	ldr	r3, [r3, #20]
    c188:	89ba      	ldrh	r2, [r7, #12]
    c18a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c18c:	4b06      	ldr	r3, [pc, #24]	; (c1a8 <usbdc_get_status_req+0x78>)
    c18e:	6959      	ldr	r1, [r3, #20]
    c190:	79f8      	ldrb	r0, [r7, #7]
    c192:	2300      	movs	r3, #0
    c194:	2202      	movs	r2, #2
    c196:	4c05      	ldr	r4, [pc, #20]	; (c1ac <usbdc_get_status_req+0x7c>)
    c198:	47a0      	blx	r4
	return true;
    c19a:	2301      	movs	r3, #1
}
    c19c:	4618      	mov	r0, r3
    c19e:	3714      	adds	r7, #20
    c1a0:	46bd      	mov	sp, r7
    c1a2:	bd90      	pop	{r4, r7, pc}
    c1a4:	0000334d 	.word	0x0000334d
    c1a8:	20000e6c 	.word	0x20000e6c
    c1ac:	0000c9ed 	.word	0x0000c9ed

0000c1b0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c1b0:	b590      	push	{r4, r7, lr}
    c1b2:	b085      	sub	sp, #20
    c1b4:	af00      	add	r7, sp, #0
    c1b6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c1b8:	4b1f      	ldr	r3, [pc, #124]	; (c238 <usbdc_get_interface+0x88>)
    c1ba:	691b      	ldr	r3, [r3, #16]
    c1bc:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c1be:	4b1e      	ldr	r3, [pc, #120]	; (c238 <usbdc_get_interface+0x88>)
    c1c0:	7f5b      	ldrb	r3, [r3, #29]
    c1c2:	461a      	mov	r2, r3
    c1c4:	687b      	ldr	r3, [r7, #4]
    c1c6:	889b      	ldrh	r3, [r3, #4]
    c1c8:	b29b      	uxth	r3, r3
    c1ca:	fa42 f303 	asr.w	r3, r2, r3
    c1ce:	f003 0301 	and.w	r3, r3, #1
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d128      	bne.n	c228 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c1d6:	4b18      	ldr	r3, [pc, #96]	; (c238 <usbdc_get_interface+0x88>)
    c1d8:	695b      	ldr	r3, [r3, #20]
    c1da:	2200      	movs	r2, #0
    c1dc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c1de:	4b16      	ldr	r3, [pc, #88]	; (c238 <usbdc_get_interface+0x88>)
    c1e0:	6959      	ldr	r1, [r3, #20]
    c1e2:	2300      	movs	r3, #0
    c1e4:	2201      	movs	r2, #1
    c1e6:	2000      	movs	r0, #0
    c1e8:	4c14      	ldr	r4, [pc, #80]	; (c23c <usbdc_get_interface+0x8c>)
    c1ea:	47a0      	blx	r4
		return true;
    c1ec:	2301      	movs	r3, #1
    c1ee:	e01f      	b.n	c230 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c1f0:	68fb      	ldr	r3, [r7, #12]
    c1f2:	685b      	ldr	r3, [r3, #4]
    c1f4:	687a      	ldr	r2, [r7, #4]
    c1f6:	2102      	movs	r1, #2
    c1f8:	68f8      	ldr	r0, [r7, #12]
    c1fa:	4798      	blx	r3
    c1fc:	60b8      	str	r0, [r7, #8]
    c1fe:	68bb      	ldr	r3, [r7, #8]
    c200:	2b00      	cmp	r3, #0
    c202:	da03      	bge.n	c20c <usbdc_get_interface+0x5c>
			func = func->next;
    c204:	68fb      	ldr	r3, [r7, #12]
    c206:	681b      	ldr	r3, [r3, #0]
    c208:	60fb      	str	r3, [r7, #12]
    c20a:	e00d      	b.n	c228 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c20c:	4b0a      	ldr	r3, [pc, #40]	; (c238 <usbdc_get_interface+0x88>)
    c20e:	695b      	ldr	r3, [r3, #20]
    c210:	68ba      	ldr	r2, [r7, #8]
    c212:	b2d2      	uxtb	r2, r2
    c214:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c216:	4b08      	ldr	r3, [pc, #32]	; (c238 <usbdc_get_interface+0x88>)
    c218:	6959      	ldr	r1, [r3, #20]
    c21a:	2300      	movs	r3, #0
    c21c:	2201      	movs	r2, #1
    c21e:	2000      	movs	r0, #0
    c220:	4c06      	ldr	r4, [pc, #24]	; (c23c <usbdc_get_interface+0x8c>)
    c222:	47a0      	blx	r4
			return true;
    c224:	2301      	movs	r3, #1
    c226:	e003      	b.n	c230 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c228:	68fb      	ldr	r3, [r7, #12]
    c22a:	2b00      	cmp	r3, #0
    c22c:	d1e0      	bne.n	c1f0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c22e:	2300      	movs	r3, #0
}
    c230:	4618      	mov	r0, r3
    c232:	3714      	adds	r7, #20
    c234:	46bd      	mov	sp, r7
    c236:	bd90      	pop	{r4, r7, pc}
    c238:	20000e6c 	.word	0x20000e6c
    c23c:	0000c9ed 	.word	0x0000c9ed

0000c240 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c240:	b590      	push	{r4, r7, lr}
    c242:	b083      	sub	sp, #12
    c244:	af00      	add	r7, sp, #0
    c246:	4603      	mov	r3, r0
    c248:	6039      	str	r1, [r7, #0]
    c24a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c24c:	683b      	ldr	r3, [r7, #0]
    c24e:	785b      	ldrb	r3, [r3, #1]
    c250:	2b0a      	cmp	r3, #10
    c252:	d83a      	bhi.n	c2ca <usbdc_get_req+0x8a>
    c254:	a201      	add	r2, pc, #4	; (adr r2, c25c <usbdc_get_req+0x1c>)
    c256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c25a:	bf00      	nop
    c25c:	0000c2b3 	.word	0x0000c2b3
    c260:	0000c2cb 	.word	0x0000c2cb
    c264:	0000c2cb 	.word	0x0000c2cb
    c268:	0000c2cb 	.word	0x0000c2cb
    c26c:	0000c2cb 	.word	0x0000c2cb
    c270:	0000c2cb 	.word	0x0000c2cb
    c274:	0000c289 	.word	0x0000c289
    c278:	0000c2cb 	.word	0x0000c2cb
    c27c:	0000c297 	.word	0x0000c297
    c280:	0000c2cb 	.word	0x0000c2cb
    c284:	0000c2c1 	.word	0x0000c2c1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c288:	79fb      	ldrb	r3, [r7, #7]
    c28a:	6839      	ldr	r1, [r7, #0]
    c28c:	4618      	mov	r0, r3
    c28e:	4b11      	ldr	r3, [pc, #68]	; (c2d4 <usbdc_get_req+0x94>)
    c290:	4798      	blx	r3
    c292:	4603      	mov	r3, r0
    c294:	e01a      	b.n	c2cc <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c296:	4b10      	ldr	r3, [pc, #64]	; (c2d8 <usbdc_get_req+0x98>)
    c298:	695b      	ldr	r3, [r3, #20]
    c29a:	4a0f      	ldr	r2, [pc, #60]	; (c2d8 <usbdc_get_req+0x98>)
    c29c:	7ed2      	ldrb	r2, [r2, #27]
    c29e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c2a0:	4b0d      	ldr	r3, [pc, #52]	; (c2d8 <usbdc_get_req+0x98>)
    c2a2:	6959      	ldr	r1, [r3, #20]
    c2a4:	79f8      	ldrb	r0, [r7, #7]
    c2a6:	2300      	movs	r3, #0
    c2a8:	2201      	movs	r2, #1
    c2aa:	4c0c      	ldr	r4, [pc, #48]	; (c2dc <usbdc_get_req+0x9c>)
    c2ac:	47a0      	blx	r4
		return true;
    c2ae:	2301      	movs	r3, #1
    c2b0:	e00c      	b.n	c2cc <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c2b2:	79fb      	ldrb	r3, [r7, #7]
    c2b4:	6839      	ldr	r1, [r7, #0]
    c2b6:	4618      	mov	r0, r3
    c2b8:	4b09      	ldr	r3, [pc, #36]	; (c2e0 <usbdc_get_req+0xa0>)
    c2ba:	4798      	blx	r3
    c2bc:	4603      	mov	r3, r0
    c2be:	e005      	b.n	c2cc <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c2c0:	6838      	ldr	r0, [r7, #0]
    c2c2:	4b08      	ldr	r3, [pc, #32]	; (c2e4 <usbdc_get_req+0xa4>)
    c2c4:	4798      	blx	r3
    c2c6:	4603      	mov	r3, r0
    c2c8:	e000      	b.n	c2cc <usbdc_get_req+0x8c>
	default:
		return false;
    c2ca:	2300      	movs	r3, #0
	}
}
    c2cc:	4618      	mov	r0, r3
    c2ce:	370c      	adds	r7, #12
    c2d0:	46bd      	mov	sp, r7
    c2d2:	bd90      	pop	{r4, r7, pc}
    c2d4:	0000c0c9 	.word	0x0000c0c9
    c2d8:	20000e6c 	.word	0x20000e6c
    c2dc:	0000c9ed 	.word	0x0000c9ed
    c2e0:	0000c131 	.word	0x0000c131
    c2e4:	0000c1b1 	.word	0x0000c1b1

0000c2e8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c2e8:	b590      	push	{r4, r7, lr}
    c2ea:	b083      	sub	sp, #12
    c2ec:	af00      	add	r7, sp, #0
    c2ee:	4603      	mov	r3, r0
    c2f0:	6039      	str	r1, [r7, #0]
    c2f2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c2f4:	683b      	ldr	r3, [r7, #0]
    c2f6:	781b      	ldrb	r3, [r3, #0]
    c2f8:	f003 031f 	and.w	r3, r3, #31
    c2fc:	2b02      	cmp	r3, #2
    c2fe:	d116      	bne.n	c32e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c300:	683b      	ldr	r3, [r7, #0]
    c302:	88db      	ldrh	r3, [r3, #6]
    c304:	b29b      	uxth	r3, r3
    c306:	2b00      	cmp	r3, #0
    c308:	d001      	beq.n	c30e <usbdc_clear_ftr_req+0x26>
			return false;
    c30a:	2300      	movs	r3, #0
    c30c:	e010      	b.n	c330 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c30e:	683b      	ldr	r3, [r7, #0]
    c310:	889b      	ldrh	r3, [r3, #4]
    c312:	b29b      	uxth	r3, r3
    c314:	b2db      	uxtb	r3, r3
    c316:	2100      	movs	r1, #0
    c318:	4618      	mov	r0, r3
    c31a:	4b07      	ldr	r3, [pc, #28]	; (c338 <usbdc_clear_ftr_req+0x50>)
    c31c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c31e:	79f8      	ldrb	r0, [r7, #7]
    c320:	2301      	movs	r3, #1
    c322:	2200      	movs	r2, #0
    c324:	2100      	movs	r1, #0
    c326:	4c05      	ldr	r4, [pc, #20]	; (c33c <usbdc_clear_ftr_req+0x54>)
    c328:	47a0      	blx	r4
		return true;
    c32a:	2301      	movs	r3, #1
    c32c:	e000      	b.n	c330 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c32e:	2300      	movs	r3, #0
	}
}
    c330:	4618      	mov	r0, r3
    c332:	370c      	adds	r7, #12
    c334:	46bd      	mov	sp, r7
    c336:	bd90      	pop	{r4, r7, pc}
    c338:	0000334d 	.word	0x0000334d
    c33c:	0000c9ed 	.word	0x0000c9ed

0000c340 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c340:	b590      	push	{r4, r7, lr}
    c342:	b083      	sub	sp, #12
    c344:	af00      	add	r7, sp, #0
    c346:	4603      	mov	r3, r0
    c348:	6039      	str	r1, [r7, #0]
    c34a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c34c:	683b      	ldr	r3, [r7, #0]
    c34e:	781b      	ldrb	r3, [r3, #0]
    c350:	f003 031f 	and.w	r3, r3, #31
    c354:	2b02      	cmp	r3, #2
    c356:	d116      	bne.n	c386 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c358:	683b      	ldr	r3, [r7, #0]
    c35a:	88db      	ldrh	r3, [r3, #6]
    c35c:	b29b      	uxth	r3, r3
    c35e:	2b00      	cmp	r3, #0
    c360:	d001      	beq.n	c366 <usbdc_set_ftr_req+0x26>
			return false;
    c362:	2300      	movs	r3, #0
    c364:	e010      	b.n	c388 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c366:	683b      	ldr	r3, [r7, #0]
    c368:	889b      	ldrh	r3, [r3, #4]
    c36a:	b29b      	uxth	r3, r3
    c36c:	b2db      	uxtb	r3, r3
    c36e:	2101      	movs	r1, #1
    c370:	4618      	mov	r0, r3
    c372:	4b07      	ldr	r3, [pc, #28]	; (c390 <usbdc_set_ftr_req+0x50>)
    c374:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c376:	79f8      	ldrb	r0, [r7, #7]
    c378:	2301      	movs	r3, #1
    c37a:	2200      	movs	r2, #0
    c37c:	2100      	movs	r1, #0
    c37e:	4c05      	ldr	r4, [pc, #20]	; (c394 <usbdc_set_ftr_req+0x54>)
    c380:	47a0      	blx	r4
		return true;
    c382:	2301      	movs	r3, #1
    c384:	e000      	b.n	c388 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c386:	2300      	movs	r3, #0
	}
}
    c388:	4618      	mov	r0, r3
    c38a:	370c      	adds	r7, #12
    c38c:	46bd      	mov	sp, r7
    c38e:	bd90      	pop	{r4, r7, pc}
    c390:	0000334d 	.word	0x0000334d
    c394:	0000c9ed 	.word	0x0000c9ed

0000c398 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c398:	b580      	push	{r7, lr}
    c39a:	b082      	sub	sp, #8
    c39c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c39e:	4b0a      	ldr	r3, [pc, #40]	; (c3c8 <usbdc_unconfig+0x30>)
    c3a0:	691b      	ldr	r3, [r3, #16]
    c3a2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c3a4:	e008      	b.n	c3b8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c3a6:	687b      	ldr	r3, [r7, #4]
    c3a8:	685b      	ldr	r3, [r3, #4]
    c3aa:	2200      	movs	r2, #0
    c3ac:	2101      	movs	r1, #1
    c3ae:	6878      	ldr	r0, [r7, #4]
    c3b0:	4798      	blx	r3
		func = func->next;
    c3b2:	687b      	ldr	r3, [r7, #4]
    c3b4:	681b      	ldr	r3, [r3, #0]
    c3b6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c3b8:	687b      	ldr	r3, [r7, #4]
    c3ba:	2b00      	cmp	r3, #0
    c3bc:	d1f3      	bne.n	c3a6 <usbdc_unconfig+0xe>
	}
}
    c3be:	bf00      	nop
    c3c0:	3708      	adds	r7, #8
    c3c2:	46bd      	mov	sp, r7
    c3c4:	bd80      	pop	{r7, pc}
    c3c6:	bf00      	nop
    c3c8:	20000e6c 	.word	0x20000e6c

0000c3cc <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c3cc:	b580      	push	{r7, lr}
    c3ce:	b088      	sub	sp, #32
    c3d0:	af00      	add	r7, sp, #0
    c3d2:	4603      	mov	r3, r0
    c3d4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c3d6:	2300      	movs	r3, #0
    c3d8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c3da:	23ff      	movs	r3, #255	; 0xff
    c3dc:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c3de:	79fb      	ldrb	r3, [r7, #7]
    c3e0:	2b00      	cmp	r3, #0
    c3e2:	d103      	bne.n	c3ec <usbdc_set_config+0x20>
		usbdc_unconfig();
    c3e4:	4b2e      	ldr	r3, [pc, #184]	; (c4a0 <usbdc_set_config+0xd4>)
    c3e6:	4798      	blx	r3
		return true;
    c3e8:	2301      	movs	r3, #1
    c3ea:	e055      	b.n	c498 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c3ec:	69bb      	ldr	r3, [r7, #24]
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d10a      	bne.n	c408 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c3f2:	4b2c      	ldr	r3, [pc, #176]	; (c4a4 <usbdc_set_config+0xd8>)
    c3f4:	681b      	ldr	r3, [r3, #0]
    c3f6:	6818      	ldr	r0, [r3, #0]
    c3f8:	4b2a      	ldr	r3, [pc, #168]	; (c4a4 <usbdc_set_config+0xd8>)
    c3fa:	681b      	ldr	r3, [r3, #0]
    c3fc:	685b      	ldr	r3, [r3, #4]
    c3fe:	79fa      	ldrb	r2, [r7, #7]
    c400:	4619      	mov	r1, r3
    c402:	4b29      	ldr	r3, [pc, #164]	; (c4a8 <usbdc_set_config+0xdc>)
    c404:	4798      	blx	r3
    c406:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c408:	69bb      	ldr	r3, [r7, #24]
    c40a:	2b00      	cmp	r3, #0
    c40c:	d101      	bne.n	c412 <usbdc_set_config+0x46>
		return false;
    c40e:	2300      	movs	r3, #0
    c410:	e042      	b.n	c498 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c412:	69b8      	ldr	r0, [r7, #24]
    c414:	4b25      	ldr	r3, [pc, #148]	; (c4ac <usbdc_set_config+0xe0>)
    c416:	4798      	blx	r3
    c418:	4603      	mov	r3, r0
    c41a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c41c:	8abb      	ldrh	r3, [r7, #20]
    c41e:	69ba      	ldr	r2, [r7, #24]
    c420:	4413      	add	r3, r2
    c422:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c424:	693b      	ldr	r3, [r7, #16]
    c426:	2204      	movs	r2, #4
    c428:	4619      	mov	r1, r3
    c42a:	69b8      	ldr	r0, [r7, #24]
    c42c:	4b20      	ldr	r3, [pc, #128]	; (c4b0 <usbdc_set_config+0xe4>)
    c42e:	4798      	blx	r3
    c430:	4603      	mov	r3, r0
    c432:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c434:	e02c      	b.n	c490 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c436:	68fb      	ldr	r3, [r7, #12]
    c438:	3302      	adds	r3, #2
    c43a:	781b      	ldrb	r3, [r3, #0]
    c43c:	7dfa      	ldrb	r2, [r7, #23]
    c43e:	429a      	cmp	r2, r3
    c440:	d018      	beq.n	c474 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c442:	68fb      	ldr	r3, [r7, #12]
    c444:	789b      	ldrb	r3, [r3, #2]
    c446:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c448:	4b16      	ldr	r3, [pc, #88]	; (c4a4 <usbdc_set_config+0xd8>)
    c44a:	691b      	ldr	r3, [r3, #16]
    c44c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c44e:	e00c      	b.n	c46a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c450:	69fb      	ldr	r3, [r7, #28]
    c452:	685b      	ldr	r3, [r3, #4]
    c454:	f107 020c 	add.w	r2, r7, #12
    c458:	2100      	movs	r1, #0
    c45a:	69f8      	ldr	r0, [r7, #28]
    c45c:	4798      	blx	r3
    c45e:	4603      	mov	r3, r0
    c460:	2b00      	cmp	r3, #0
    c462:	d006      	beq.n	c472 <usbdc_set_config+0xa6>
					func = func->next;
    c464:	69fb      	ldr	r3, [r7, #28]
    c466:	681b      	ldr	r3, [r3, #0]
    c468:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c46a:	69fb      	ldr	r3, [r7, #28]
    c46c:	2b00      	cmp	r3, #0
    c46e:	d1ef      	bne.n	c450 <usbdc_set_config+0x84>
    c470:	e000      	b.n	c474 <usbdc_set_config+0xa8>
				} else {
					break;
    c472:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c474:	68fb      	ldr	r3, [r7, #12]
    c476:	4618      	mov	r0, r3
    c478:	4b0e      	ldr	r3, [pc, #56]	; (c4b4 <usbdc_set_config+0xe8>)
    c47a:	4798      	blx	r3
    c47c:	4603      	mov	r3, r0
    c47e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c480:	68fb      	ldr	r3, [r7, #12]
    c482:	6939      	ldr	r1, [r7, #16]
    c484:	2204      	movs	r2, #4
    c486:	4618      	mov	r0, r3
    c488:	4b09      	ldr	r3, [pc, #36]	; (c4b0 <usbdc_set_config+0xe4>)
    c48a:	4798      	blx	r3
    c48c:	4603      	mov	r3, r0
    c48e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c490:	68fb      	ldr	r3, [r7, #12]
    c492:	2b00      	cmp	r3, #0
    c494:	d1cf      	bne.n	c436 <usbdc_set_config+0x6a>
	}
	return true;
    c496:	2301      	movs	r3, #1
}
    c498:	4618      	mov	r0, r3
    c49a:	3720      	adds	r7, #32
    c49c:	46bd      	mov	sp, r7
    c49e:	bd80      	pop	{r7, pc}
    c4a0:	0000c399 	.word	0x0000c399
    c4a4:	20000e6c 	.word	0x20000e6c
    c4a8:	0000cd3d 	.word	0x0000cd3d
    c4ac:	0000bee9 	.word	0x0000bee9
    c4b0:	0000cc7d 	.word	0x0000cc7d
    c4b4:	0000bec5 	.word	0x0000bec5

0000c4b8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c4b8:	b580      	push	{r7, lr}
    c4ba:	b082      	sub	sp, #8
    c4bc:	af00      	add	r7, sp, #0
    c4be:	4603      	mov	r3, r0
    c4c0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c4c2:	79fb      	ldrb	r3, [r7, #7]
    c4c4:	4618      	mov	r0, r3
    c4c6:	4b03      	ldr	r3, [pc, #12]	; (c4d4 <usbdc_set_address+0x1c>)
    c4c8:	4798      	blx	r3
}
    c4ca:	bf00      	nop
    c4cc:	3708      	adds	r7, #8
    c4ce:	46bd      	mov	sp, r7
    c4d0:	bd80      	pop	{r7, pc}
    c4d2:	bf00      	nop
    c4d4:	00002f69 	.word	0x00002f69

0000c4d8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c4d8:	b590      	push	{r4, r7, lr}
    c4da:	b087      	sub	sp, #28
    c4dc:	af00      	add	r7, sp, #0
    c4de:	4603      	mov	r3, r0
    c4e0:	460a      	mov	r2, r1
    c4e2:	80fb      	strh	r3, [r7, #6]
    c4e4:	4613      	mov	r3, r2
    c4e6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c4e8:	2300      	movs	r3, #0
    c4ea:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c4ec:	693b      	ldr	r3, [r7, #16]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d10b      	bne.n	c50a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c4f2:	4b43      	ldr	r3, [pc, #268]	; (c600 <usbdc_set_interface+0x128>)
    c4f4:	681b      	ldr	r3, [r3, #0]
    c4f6:	6818      	ldr	r0, [r3, #0]
    c4f8:	4b41      	ldr	r3, [pc, #260]	; (c600 <usbdc_set_interface+0x128>)
    c4fa:	681b      	ldr	r3, [r3, #0]
    c4fc:	6859      	ldr	r1, [r3, #4]
    c4fe:	4b40      	ldr	r3, [pc, #256]	; (c600 <usbdc_set_interface+0x128>)
    c500:	7edb      	ldrb	r3, [r3, #27]
    c502:	461a      	mov	r2, r3
    c504:	4b3f      	ldr	r3, [pc, #252]	; (c604 <usbdc_set_interface+0x12c>)
    c506:	4798      	blx	r3
    c508:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c50a:	693b      	ldr	r3, [r7, #16]
    c50c:	2b00      	cmp	r3, #0
    c50e:	d101      	bne.n	c514 <usbdc_set_interface+0x3c>
		return false;
    c510:	2300      	movs	r3, #0
    c512:	e071      	b.n	c5f8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c514:	693b      	ldr	r3, [r7, #16]
    c516:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c518:	6938      	ldr	r0, [r7, #16]
    c51a:	4b3b      	ldr	r3, [pc, #236]	; (c608 <usbdc_set_interface+0x130>)
    c51c:	4798      	blx	r3
    c51e:	4603      	mov	r3, r0
    c520:	461a      	mov	r2, r3
    c522:	693b      	ldr	r3, [r7, #16]
    c524:	4413      	add	r3, r2
    c526:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c528:	68bb      	ldr	r3, [r7, #8]
    c52a:	68f9      	ldr	r1, [r7, #12]
    c52c:	2204      	movs	r2, #4
    c52e:	4618      	mov	r0, r3
    c530:	4b36      	ldr	r3, [pc, #216]	; (c60c <usbdc_set_interface+0x134>)
    c532:	4798      	blx	r3
    c534:	6138      	str	r0, [r7, #16]
    c536:	693b      	ldr	r3, [r7, #16]
    c538:	2b00      	cmp	r3, #0
    c53a:	d113      	bne.n	c564 <usbdc_set_interface+0x8c>
		return false;
    c53c:	2300      	movs	r3, #0
    c53e:	e05b      	b.n	c5f8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c540:	68bb      	ldr	r3, [r7, #8]
    c542:	4618      	mov	r0, r3
    c544:	4b32      	ldr	r3, [pc, #200]	; (c610 <usbdc_set_interface+0x138>)
    c546:	4798      	blx	r3
    c548:	4603      	mov	r3, r0
    c54a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c54c:	68bb      	ldr	r3, [r7, #8]
    c54e:	68f9      	ldr	r1, [r7, #12]
    c550:	2204      	movs	r2, #4
    c552:	4618      	mov	r0, r3
    c554:	4b2d      	ldr	r3, [pc, #180]	; (c60c <usbdc_set_interface+0x134>)
    c556:	4798      	blx	r3
    c558:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c55a:	693b      	ldr	r3, [r7, #16]
    c55c:	2b00      	cmp	r3, #0
    c55e:	d101      	bne.n	c564 <usbdc_set_interface+0x8c>
			return false;
    c560:	2300      	movs	r3, #0
    c562:	e049      	b.n	c5f8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c564:	693b      	ldr	r3, [r7, #16]
    c566:	3302      	adds	r3, #2
    c568:	781b      	ldrb	r3, [r3, #0]
    c56a:	b29b      	uxth	r3, r3
    c56c:	88ba      	ldrh	r2, [r7, #4]
    c56e:	429a      	cmp	r2, r3
    c570:	d1e6      	bne.n	c540 <usbdc_set_interface+0x68>
    c572:	693b      	ldr	r3, [r7, #16]
    c574:	3303      	adds	r3, #3
    c576:	781b      	ldrb	r3, [r3, #0]
    c578:	b29b      	uxth	r3, r3
    c57a:	88fa      	ldrh	r2, [r7, #6]
    c57c:	429a      	cmp	r2, r3
    c57e:	d1df      	bne.n	c540 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c580:	693b      	ldr	r3, [r7, #16]
    c582:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c584:	4b1e      	ldr	r3, [pc, #120]	; (c600 <usbdc_set_interface+0x128>)
    c586:	691b      	ldr	r3, [r3, #16]
    c588:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c58a:	e031      	b.n	c5f0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c58c:	697b      	ldr	r3, [r7, #20]
    c58e:	685b      	ldr	r3, [r3, #4]
    c590:	f107 0208 	add.w	r2, r7, #8
    c594:	2101      	movs	r1, #1
    c596:	6978      	ldr	r0, [r7, #20]
    c598:	4798      	blx	r3
    c59a:	4603      	mov	r3, r0
    c59c:	2b00      	cmp	r3, #0
    c59e:	d003      	beq.n	c5a8 <usbdc_set_interface+0xd0>
			func = func->next;
    c5a0:	697b      	ldr	r3, [r7, #20]
    c5a2:	681b      	ldr	r3, [r3, #0]
    c5a4:	617b      	str	r3, [r7, #20]
    c5a6:	e023      	b.n	c5f0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c5a8:	697b      	ldr	r3, [r7, #20]
    c5aa:	685b      	ldr	r3, [r3, #4]
    c5ac:	f107 0208 	add.w	r2, r7, #8
    c5b0:	2100      	movs	r1, #0
    c5b2:	6978      	ldr	r0, [r7, #20]
    c5b4:	4798      	blx	r3
    c5b6:	4603      	mov	r3, r0
    c5b8:	2b00      	cmp	r3, #0
    c5ba:	d117      	bne.n	c5ec <usbdc_set_interface+0x114>
			if (alt_set) {
    c5bc:	88fb      	ldrh	r3, [r7, #6]
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d00c      	beq.n	c5dc <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c5c2:	4b0f      	ldr	r3, [pc, #60]	; (c600 <usbdc_set_interface+0x128>)
    c5c4:	7f5b      	ldrb	r3, [r3, #29]
    c5c6:	b25a      	sxtb	r2, r3
    c5c8:	88bb      	ldrh	r3, [r7, #4]
    c5ca:	2101      	movs	r1, #1
    c5cc:	fa01 f303 	lsl.w	r3, r1, r3
    c5d0:	b25b      	sxtb	r3, r3
    c5d2:	4313      	orrs	r3, r2
    c5d4:	b25b      	sxtb	r3, r3
    c5d6:	b2da      	uxtb	r2, r3
    c5d8:	4b09      	ldr	r3, [pc, #36]	; (c600 <usbdc_set_interface+0x128>)
    c5da:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c5dc:	2300      	movs	r3, #0
    c5de:	2200      	movs	r2, #0
    c5e0:	2100      	movs	r1, #0
    c5e2:	2000      	movs	r0, #0
    c5e4:	4c0b      	ldr	r4, [pc, #44]	; (c614 <usbdc_set_interface+0x13c>)
    c5e6:	47a0      	blx	r4
			return true;
    c5e8:	2301      	movs	r3, #1
    c5ea:	e005      	b.n	c5f8 <usbdc_set_interface+0x120>
		} else {
			return false;
    c5ec:	2300      	movs	r3, #0
    c5ee:	e003      	b.n	c5f8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c5f0:	697b      	ldr	r3, [r7, #20]
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	d1ca      	bne.n	c58c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c5f6:	2300      	movs	r3, #0
}
    c5f8:	4618      	mov	r0, r3
    c5fa:	371c      	adds	r7, #28
    c5fc:	46bd      	mov	sp, r7
    c5fe:	bd90      	pop	{r4, r7, pc}
    c600:	20000e6c 	.word	0x20000e6c
    c604:	0000cd3d 	.word	0x0000cd3d
    c608:	0000bee9 	.word	0x0000bee9
    c60c:	0000cc7d 	.word	0x0000cc7d
    c610:	0000bec5 	.word	0x0000bec5
    c614:	0000c9ed 	.word	0x0000c9ed

0000c618 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c618:	b590      	push	{r4, r7, lr}
    c61a:	b083      	sub	sp, #12
    c61c:	af00      	add	r7, sp, #0
    c61e:	4603      	mov	r3, r0
    c620:	6039      	str	r1, [r7, #0]
    c622:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c624:	683b      	ldr	r3, [r7, #0]
    c626:	785b      	ldrb	r3, [r3, #1]
    c628:	3b01      	subs	r3, #1
    c62a:	2b0a      	cmp	r3, #10
    c62c:	d85b      	bhi.n	c6e6 <usbdc_set_req+0xce>
    c62e:	a201      	add	r2, pc, #4	; (adr r2, c634 <usbdc_set_req+0x1c>)
    c630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c634:	0000c6b3 	.word	0x0000c6b3
    c638:	0000c6e7 	.word	0x0000c6e7
    c63c:	0000c6c1 	.word	0x0000c6c1
    c640:	0000c6e7 	.word	0x0000c6e7
    c644:	0000c661 	.word	0x0000c661
    c648:	0000c6e7 	.word	0x0000c6e7
    c64c:	0000c6e7 	.word	0x0000c6e7
    c650:	0000c6e7 	.word	0x0000c6e7
    c654:	0000c67b 	.word	0x0000c67b
    c658:	0000c6e7 	.word	0x0000c6e7
    c65c:	0000c6cf 	.word	0x0000c6cf
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c660:	79f8      	ldrb	r0, [r7, #7]
    c662:	2301      	movs	r3, #1
    c664:	2200      	movs	r2, #0
    c666:	2100      	movs	r1, #0
    c668:	4c21      	ldr	r4, [pc, #132]	; (c6f0 <usbdc_set_req+0xd8>)
    c66a:	47a0      	blx	r4
    c66c:	4603      	mov	r3, r0
    c66e:	2b00      	cmp	r3, #0
    c670:	bf0c      	ite	eq
    c672:	2301      	moveq	r3, #1
    c674:	2300      	movne	r3, #0
    c676:	b2db      	uxtb	r3, r3
    c678:	e036      	b.n	c6e8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c67a:	683b      	ldr	r3, [r7, #0]
    c67c:	885b      	ldrh	r3, [r3, #2]
    c67e:	b29b      	uxth	r3, r3
    c680:	b2db      	uxtb	r3, r3
    c682:	4618      	mov	r0, r3
    c684:	4b1b      	ldr	r3, [pc, #108]	; (c6f4 <usbdc_set_req+0xdc>)
    c686:	4798      	blx	r3
    c688:	4603      	mov	r3, r0
    c68a:	f083 0301 	eor.w	r3, r3, #1
    c68e:	b2db      	uxtb	r3, r3
    c690:	2b00      	cmp	r3, #0
    c692:	d001      	beq.n	c698 <usbdc_set_req+0x80>
			return false;
    c694:	2300      	movs	r3, #0
    c696:	e027      	b.n	c6e8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c698:	79f8      	ldrb	r0, [r7, #7]
    c69a:	2301      	movs	r3, #1
    c69c:	2200      	movs	r2, #0
    c69e:	2100      	movs	r1, #0
    c6a0:	4c13      	ldr	r4, [pc, #76]	; (c6f0 <usbdc_set_req+0xd8>)
    c6a2:	47a0      	blx	r4
    c6a4:	4603      	mov	r3, r0
    c6a6:	2b00      	cmp	r3, #0
    c6a8:	bf0c      	ite	eq
    c6aa:	2301      	moveq	r3, #1
    c6ac:	2300      	movne	r3, #0
    c6ae:	b2db      	uxtb	r3, r3
    c6b0:	e01a      	b.n	c6e8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c6b2:	79fb      	ldrb	r3, [r7, #7]
    c6b4:	6839      	ldr	r1, [r7, #0]
    c6b6:	4618      	mov	r0, r3
    c6b8:	4b0f      	ldr	r3, [pc, #60]	; (c6f8 <usbdc_set_req+0xe0>)
    c6ba:	4798      	blx	r3
    c6bc:	4603      	mov	r3, r0
    c6be:	e013      	b.n	c6e8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c6c0:	79fb      	ldrb	r3, [r7, #7]
    c6c2:	6839      	ldr	r1, [r7, #0]
    c6c4:	4618      	mov	r0, r3
    c6c6:	4b0d      	ldr	r3, [pc, #52]	; (c6fc <usbdc_set_req+0xe4>)
    c6c8:	4798      	blx	r3
    c6ca:	4603      	mov	r3, r0
    c6cc:	e00c      	b.n	c6e8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c6ce:	683b      	ldr	r3, [r7, #0]
    c6d0:	885b      	ldrh	r3, [r3, #2]
    c6d2:	b29a      	uxth	r2, r3
    c6d4:	683b      	ldr	r3, [r7, #0]
    c6d6:	889b      	ldrh	r3, [r3, #4]
    c6d8:	b29b      	uxth	r3, r3
    c6da:	4619      	mov	r1, r3
    c6dc:	4610      	mov	r0, r2
    c6de:	4b08      	ldr	r3, [pc, #32]	; (c700 <usbdc_set_req+0xe8>)
    c6e0:	4798      	blx	r3
    c6e2:	4603      	mov	r3, r0
    c6e4:	e000      	b.n	c6e8 <usbdc_set_req+0xd0>
	default:
		return false;
    c6e6:	2300      	movs	r3, #0
	}
}
    c6e8:	4618      	mov	r0, r3
    c6ea:	370c      	adds	r7, #12
    c6ec:	46bd      	mov	sp, r7
    c6ee:	bd90      	pop	{r4, r7, pc}
    c6f0:	0000c9ed 	.word	0x0000c9ed
    c6f4:	0000c3cd 	.word	0x0000c3cd
    c6f8:	0000c2e9 	.word	0x0000c2e9
    c6fc:	0000c341 	.word	0x0000c341
    c700:	0000c4d9 	.word	0x0000c4d9

0000c704 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c704:	b580      	push	{r7, lr}
    c706:	b082      	sub	sp, #8
    c708:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c70a:	4b0a      	ldr	r3, [pc, #40]	; (c734 <usbdc_sof_notify+0x30>)
    c70c:	685b      	ldr	r3, [r3, #4]
    c70e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c710:	e009      	b.n	c726 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c712:	687b      	ldr	r3, [r7, #4]
    c714:	685b      	ldr	r3, [r3, #4]
    c716:	2b00      	cmp	r3, #0
    c718:	d002      	beq.n	c720 <usbdc_sof_notify+0x1c>
			sof->cb();
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	685b      	ldr	r3, [r3, #4]
    c71e:	4798      	blx	r3
		}
		sof = sof->next;
    c720:	687b      	ldr	r3, [r7, #4]
    c722:	681b      	ldr	r3, [r3, #0]
    c724:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c726:	687b      	ldr	r3, [r7, #4]
    c728:	2b00      	cmp	r3, #0
    c72a:	d1f2      	bne.n	c712 <usbdc_sof_notify+0xe>
	}
}
    c72c:	bf00      	nop
    c72e:	3708      	adds	r7, #8
    c730:	46bd      	mov	sp, r7
    c732:	bd80      	pop	{r7, pc}
    c734:	20000e6c 	.word	0x20000e6c

0000c738 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c738:	b580      	push	{r7, lr}
    c73a:	b084      	sub	sp, #16
    c73c:	af00      	add	r7, sp, #0
    c73e:	4603      	mov	r3, r0
    c740:	6039      	str	r1, [r7, #0]
    c742:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c744:	4b0b      	ldr	r3, [pc, #44]	; (c774 <usbdc_change_notify+0x3c>)
    c746:	68db      	ldr	r3, [r3, #12]
    c748:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c74a:	e00c      	b.n	c766 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c74c:	68fb      	ldr	r3, [r7, #12]
    c74e:	685b      	ldr	r3, [r3, #4]
    c750:	2b00      	cmp	r3, #0
    c752:	d005      	beq.n	c760 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c754:	68fb      	ldr	r3, [r7, #12]
    c756:	685b      	ldr	r3, [r3, #4]
    c758:	79fa      	ldrb	r2, [r7, #7]
    c75a:	6839      	ldr	r1, [r7, #0]
    c75c:	4610      	mov	r0, r2
    c75e:	4798      	blx	r3
		}
		cg = cg->next;
    c760:	68fb      	ldr	r3, [r7, #12]
    c762:	681b      	ldr	r3, [r3, #0]
    c764:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c766:	68fb      	ldr	r3, [r7, #12]
    c768:	2b00      	cmp	r3, #0
    c76a:	d1ef      	bne.n	c74c <usbdc_change_notify+0x14>
	}
}
    c76c:	bf00      	nop
    c76e:	3710      	adds	r7, #16
    c770:	46bd      	mov	sp, r7
    c772:	bd80      	pop	{r7, pc}
    c774:	20000e6c 	.word	0x20000e6c

0000c778 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c778:	b580      	push	{r7, lr}
    c77a:	b084      	sub	sp, #16
    c77c:	af00      	add	r7, sp, #0
    c77e:	4603      	mov	r3, r0
    c780:	6039      	str	r1, [r7, #0]
    c782:	71fb      	strb	r3, [r7, #7]
    c784:	4613      	mov	r3, r2
    c786:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c788:	4b12      	ldr	r3, [pc, #72]	; (c7d4 <usbdc_request_handler+0x5c>)
    c78a:	689b      	ldr	r3, [r3, #8]
    c78c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c78e:	e019      	b.n	c7c4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c790:	68fb      	ldr	r3, [r7, #12]
    c792:	685b      	ldr	r3, [r3, #4]
    c794:	2b00      	cmp	r3, #0
    c796:	d012      	beq.n	c7be <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c798:	68fb      	ldr	r3, [r7, #12]
    c79a:	685b      	ldr	r3, [r3, #4]
    c79c:	79ba      	ldrb	r2, [r7, #6]
    c79e:	79f8      	ldrb	r0, [r7, #7]
    c7a0:	6839      	ldr	r1, [r7, #0]
    c7a2:	4798      	blx	r3
    c7a4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c7a6:	68bb      	ldr	r3, [r7, #8]
    c7a8:	2b00      	cmp	r3, #0
    c7aa:	d101      	bne.n	c7b0 <usbdc_request_handler+0x38>
				return true;
    c7ac:	2301      	movs	r3, #1
    c7ae:	e00d      	b.n	c7cc <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c7b0:	68bb      	ldr	r3, [r7, #8]
    c7b2:	f113 0f0a 	cmn.w	r3, #10
    c7b6:	d002      	beq.n	c7be <usbdc_request_handler+0x46>
				return -1;
    c7b8:	f04f 33ff 	mov.w	r3, #4294967295
    c7bc:	e006      	b.n	c7cc <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c7be:	68fb      	ldr	r3, [r7, #12]
    c7c0:	681b      	ldr	r3, [r3, #0]
    c7c2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c7c4:	68fb      	ldr	r3, [r7, #12]
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d1e2      	bne.n	c790 <usbdc_request_handler+0x18>
	}
	return false;
    c7ca:	2300      	movs	r3, #0
}
    c7cc:	4618      	mov	r0, r3
    c7ce:	3710      	adds	r7, #16
    c7d0:	46bd      	mov	sp, r7
    c7d2:	bd80      	pop	{r7, pc}
    c7d4:	20000e6c 	.word	0x20000e6c

0000c7d8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c7d8:	b580      	push	{r7, lr}
    c7da:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c7dc:	4b01      	ldr	r3, [pc, #4]	; (c7e4 <usbd_sof_cb+0xc>)
    c7de:	4798      	blx	r3
}
    c7e0:	bf00      	nop
    c7e2:	bd80      	pop	{r7, pc}
    c7e4:	0000c705 	.word	0x0000c705

0000c7e8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c7e8:	b580      	push	{r7, lr}
    c7ea:	b082      	sub	sp, #8
    c7ec:	af00      	add	r7, sp, #0
    c7ee:	4603      	mov	r3, r0
    c7f0:	6039      	str	r1, [r7, #0]
    c7f2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c7f4:	79fb      	ldrb	r3, [r7, #7]
    c7f6:	2200      	movs	r2, #0
    c7f8:	6839      	ldr	r1, [r7, #0]
    c7fa:	4618      	mov	r0, r3
    c7fc:	4b14      	ldr	r3, [pc, #80]	; (c850 <usbdc_cb_ctl_req+0x68>)
    c7fe:	4798      	blx	r3
    c800:	4603      	mov	r3, r0
    c802:	f1b3 3fff 	cmp.w	r3, #4294967295
    c806:	d00b      	beq.n	c820 <usbdc_cb_ctl_req+0x38>
    c808:	2b01      	cmp	r3, #1
    c80a:	d007      	beq.n	c81c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c80c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c80e:	683b      	ldr	r3, [r7, #0]
    c810:	781b      	ldrb	r3, [r3, #0]
    c812:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c816:	2b00      	cmp	r3, #0
    c818:	d007      	beq.n	c82a <usbdc_cb_ctl_req+0x42>
    c81a:	e003      	b.n	c824 <usbdc_cb_ctl_req+0x3c>
		return true;
    c81c:	2301      	movs	r3, #1
    c81e:	e013      	b.n	c848 <usbdc_cb_ctl_req+0x60>
		return false;
    c820:	2300      	movs	r3, #0
    c822:	e011      	b.n	c848 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c824:	2b80      	cmp	r3, #128	; 0x80
    c826:	d007      	beq.n	c838 <usbdc_cb_ctl_req+0x50>
    c828:	e00d      	b.n	c846 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c82a:	79fb      	ldrb	r3, [r7, #7]
    c82c:	6839      	ldr	r1, [r7, #0]
    c82e:	4618      	mov	r0, r3
    c830:	4b08      	ldr	r3, [pc, #32]	; (c854 <usbdc_cb_ctl_req+0x6c>)
    c832:	4798      	blx	r3
    c834:	4603      	mov	r3, r0
    c836:	e007      	b.n	c848 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c838:	79fb      	ldrb	r3, [r7, #7]
    c83a:	6839      	ldr	r1, [r7, #0]
    c83c:	4618      	mov	r0, r3
    c83e:	4b06      	ldr	r3, [pc, #24]	; (c858 <usbdc_cb_ctl_req+0x70>)
    c840:	4798      	blx	r3
    c842:	4603      	mov	r3, r0
    c844:	e000      	b.n	c848 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c846:	2300      	movs	r3, #0
	}
}
    c848:	4618      	mov	r0, r3
    c84a:	3708      	adds	r7, #8
    c84c:	46bd      	mov	sp, r7
    c84e:	bd80      	pop	{r7, pc}
    c850:	0000c779 	.word	0x0000c779
    c854:	0000c619 	.word	0x0000c619
    c858:	0000c241 	.word	0x0000c241

0000c85c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c85c:	b580      	push	{r7, lr}
    c85e:	b082      	sub	sp, #8
    c860:	af00      	add	r7, sp, #0
    c862:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c864:	687b      	ldr	r3, [r7, #4]
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	2b00      	cmp	r3, #0
    c86a:	d135      	bne.n	c8d8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c86c:	687b      	ldr	r3, [r7, #4]
    c86e:	785b      	ldrb	r3, [r3, #1]
    c870:	2b05      	cmp	r3, #5
    c872:	d019      	beq.n	c8a8 <usbdc_ctrl_status_end+0x4c>
    c874:	2b09      	cmp	r3, #9
    c876:	d000      	beq.n	c87a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c878:	e02f      	b.n	c8da <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c87a:	687b      	ldr	r3, [r7, #4]
    c87c:	885b      	ldrh	r3, [r3, #2]
    c87e:	b29b      	uxth	r3, r3
    c880:	b2da      	uxtb	r2, r3
    c882:	4b17      	ldr	r3, [pc, #92]	; (c8e0 <usbdc_ctrl_status_end+0x84>)
    c884:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c886:	687b      	ldr	r3, [r7, #4]
    c888:	885b      	ldrh	r3, [r3, #2]
    c88a:	b29b      	uxth	r3, r3
    c88c:	2b00      	cmp	r3, #0
    c88e:	d001      	beq.n	c894 <usbdc_ctrl_status_end+0x38>
    c890:	2204      	movs	r2, #4
    c892:	e000      	b.n	c896 <usbdc_ctrl_status_end+0x3a>
    c894:	2203      	movs	r2, #3
    c896:	4b12      	ldr	r3, [pc, #72]	; (c8e0 <usbdc_ctrl_status_end+0x84>)
    c898:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c89a:	4b11      	ldr	r3, [pc, #68]	; (c8e0 <usbdc_ctrl_status_end+0x84>)
    c89c:	7e9b      	ldrb	r3, [r3, #26]
    c89e:	4619      	mov	r1, r3
    c8a0:	2001      	movs	r0, #1
    c8a2:	4b10      	ldr	r3, [pc, #64]	; (c8e4 <usbdc_ctrl_status_end+0x88>)
    c8a4:	4798      	blx	r3
		break;
    c8a6:	e018      	b.n	c8da <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c8a8:	687b      	ldr	r3, [r7, #4]
    c8aa:	885b      	ldrh	r3, [r3, #2]
    c8ac:	b29b      	uxth	r3, r3
    c8ae:	b2db      	uxtb	r3, r3
    c8b0:	4618      	mov	r0, r3
    c8b2:	4b0d      	ldr	r3, [pc, #52]	; (c8e8 <usbdc_ctrl_status_end+0x8c>)
    c8b4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c8b6:	687b      	ldr	r3, [r7, #4]
    c8b8:	885b      	ldrh	r3, [r3, #2]
    c8ba:	b29b      	uxth	r3, r3
    c8bc:	2b00      	cmp	r3, #0
    c8be:	d001      	beq.n	c8c4 <usbdc_ctrl_status_end+0x68>
    c8c0:	2203      	movs	r2, #3
    c8c2:	e000      	b.n	c8c6 <usbdc_ctrl_status_end+0x6a>
    c8c4:	2202      	movs	r2, #2
    c8c6:	4b06      	ldr	r3, [pc, #24]	; (c8e0 <usbdc_ctrl_status_end+0x84>)
    c8c8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c8ca:	4b05      	ldr	r3, [pc, #20]	; (c8e0 <usbdc_ctrl_status_end+0x84>)
    c8cc:	7e9b      	ldrb	r3, [r3, #26]
    c8ce:	4619      	mov	r1, r3
    c8d0:	2001      	movs	r0, #1
    c8d2:	4b04      	ldr	r3, [pc, #16]	; (c8e4 <usbdc_ctrl_status_end+0x88>)
    c8d4:	4798      	blx	r3
		break;
    c8d6:	e000      	b.n	c8da <usbdc_ctrl_status_end+0x7e>
		return;
    c8d8:	bf00      	nop
	}
}
    c8da:	3708      	adds	r7, #8
    c8dc:	46bd      	mov	sp, r7
    c8de:	bd80      	pop	{r7, pc}
    c8e0:	20000e6c 	.word	0x20000e6c
    c8e4:	0000c739 	.word	0x0000c739
    c8e8:	0000c4b9 	.word	0x0000c4b9

0000c8ec <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c8ec:	b580      	push	{r7, lr}
    c8ee:	b082      	sub	sp, #8
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c8f4:	2201      	movs	r2, #1
    c8f6:	6879      	ldr	r1, [r7, #4]
    c8f8:	2000      	movs	r0, #0
    c8fa:	4b03      	ldr	r3, [pc, #12]	; (c908 <usbdc_ctrl_data_end+0x1c>)
    c8fc:	4798      	blx	r3
	return false;
    c8fe:	2300      	movs	r3, #0
}
    c900:	4618      	mov	r0, r3
    c902:	3708      	adds	r7, #8
    c904:	46bd      	mov	sp, r7
    c906:	bd80      	pop	{r7, pc}
    c908:	0000c779 	.word	0x0000c779

0000c90c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b082      	sub	sp, #8
    c910:	af00      	add	r7, sp, #0
    c912:	4603      	mov	r3, r0
    c914:	603a      	str	r2, [r7, #0]
    c916:	71fb      	strb	r3, [r7, #7]
    c918:	460b      	mov	r3, r1
    c91a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c91c:	79bb      	ldrb	r3, [r7, #6]
    c91e:	2b00      	cmp	r3, #0
    c920:	d002      	beq.n	c928 <usbdc_cb_ctl_done+0x1c>
    c922:	2b01      	cmp	r3, #1
    c924:	d004      	beq.n	c930 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c926:	e008      	b.n	c93a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c928:	6838      	ldr	r0, [r7, #0]
    c92a:	4b06      	ldr	r3, [pc, #24]	; (c944 <usbdc_cb_ctl_done+0x38>)
    c92c:	4798      	blx	r3
		break;
    c92e:	e004      	b.n	c93a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c930:	6838      	ldr	r0, [r7, #0]
    c932:	4b05      	ldr	r3, [pc, #20]	; (c948 <usbdc_cb_ctl_done+0x3c>)
    c934:	4798      	blx	r3
    c936:	4603      	mov	r3, r0
    c938:	e000      	b.n	c93c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c93a:	2300      	movs	r3, #0
}
    c93c:	4618      	mov	r0, r3
    c93e:	3708      	adds	r7, #8
    c940:	46bd      	mov	sp, r7
    c942:	bd80      	pop	{r7, pc}
    c944:	0000c85d 	.word	0x0000c85d
    c948:	0000c8ed 	.word	0x0000c8ed

0000c94c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c94c:	b580      	push	{r7, lr}
    c94e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c950:	4b10      	ldr	r3, [pc, #64]	; (c994 <usbdc_reset+0x48>)
    c952:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c954:	4b10      	ldr	r3, [pc, #64]	; (c998 <usbdc_reset+0x4c>)
    c956:	2202      	movs	r2, #2
    c958:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c95a:	4b0f      	ldr	r3, [pc, #60]	; (c998 <usbdc_reset+0x4c>)
    c95c:	2200      	movs	r2, #0
    c95e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c960:	4b0d      	ldr	r3, [pc, #52]	; (c998 <usbdc_reset+0x4c>)
    c962:	2200      	movs	r2, #0
    c964:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c966:	2000      	movs	r0, #0
    c968:	4b0c      	ldr	r3, [pc, #48]	; (c99c <usbdc_reset+0x50>)
    c96a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c96c:	4b0a      	ldr	r3, [pc, #40]	; (c998 <usbdc_reset+0x4c>)
    c96e:	7f1b      	ldrb	r3, [r3, #28]
    c970:	4618      	mov	r0, r3
    c972:	4b0b      	ldr	r3, [pc, #44]	; (c9a0 <usbdc_reset+0x54>)
    c974:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c976:	4a0b      	ldr	r2, [pc, #44]	; (c9a4 <usbdc_reset+0x58>)
    c978:	2100      	movs	r1, #0
    c97a:	2000      	movs	r0, #0
    c97c:	4b0a      	ldr	r3, [pc, #40]	; (c9a8 <usbdc_reset+0x5c>)
    c97e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c980:	4a0a      	ldr	r2, [pc, #40]	; (c9ac <usbdc_reset+0x60>)
    c982:	2102      	movs	r1, #2
    c984:	2000      	movs	r0, #0
    c986:	4b08      	ldr	r3, [pc, #32]	; (c9a8 <usbdc_reset+0x5c>)
    c988:	4798      	blx	r3
	usb_d_ep_enable(0);
    c98a:	2000      	movs	r0, #0
    c98c:	4b08      	ldr	r3, [pc, #32]	; (c9b0 <usbdc_reset+0x64>)
    c98e:	4798      	blx	r3
}
    c990:	bf00      	nop
    c992:	bd80      	pop	{r7, pc}
    c994:	0000c399 	.word	0x0000c399
    c998:	20000e6c 	.word	0x20000e6c
    c99c:	0000304d 	.word	0x0000304d
    c9a0:	00002f89 	.word	0x00002f89
    c9a4:	0000c7e9 	.word	0x0000c7e9
    c9a8:	000033a1 	.word	0x000033a1
    c9ac:	0000c90d 	.word	0x0000c90d
    c9b0:	0000309d 	.word	0x0000309d

0000c9b4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c9b4:	b580      	push	{r7, lr}
    c9b6:	b082      	sub	sp, #8
    c9b8:	af00      	add	r7, sp, #0
    c9ba:	4603      	mov	r3, r0
    c9bc:	6039      	str	r1, [r7, #0]
    c9be:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c9c0:	79fb      	ldrb	r3, [r7, #7]
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	d002      	beq.n	c9cc <usbd_event_cb+0x18>
    c9c6:	2b01      	cmp	r3, #1
    c9c8:	d005      	beq.n	c9d6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c9ca:	e007      	b.n	c9dc <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c9cc:	6839      	ldr	r1, [r7, #0]
    c9ce:	2000      	movs	r0, #0
    c9d0:	4b04      	ldr	r3, [pc, #16]	; (c9e4 <usbd_event_cb+0x30>)
    c9d2:	4798      	blx	r3
		break;
    c9d4:	e002      	b.n	c9dc <usbd_event_cb+0x28>
		usbdc_reset();
    c9d6:	4b04      	ldr	r3, [pc, #16]	; (c9e8 <usbd_event_cb+0x34>)
    c9d8:	4798      	blx	r3
		break;
    c9da:	bf00      	nop
	}
}
    c9dc:	bf00      	nop
    c9de:	3708      	adds	r7, #8
    c9e0:	46bd      	mov	sp, r7
    c9e2:	bd80      	pop	{r7, pc}
    c9e4:	0000c739 	.word	0x0000c739
    c9e8:	0000c94d 	.word	0x0000c94d

0000c9ec <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c9ec:	b580      	push	{r7, lr}
    c9ee:	b088      	sub	sp, #32
    c9f0:	af00      	add	r7, sp, #0
    c9f2:	60b9      	str	r1, [r7, #8]
    c9f4:	607a      	str	r2, [r7, #4]
    c9f6:	461a      	mov	r2, r3
    c9f8:	4603      	mov	r3, r0
    c9fa:	73fb      	strb	r3, [r7, #15]
    c9fc:	4613      	mov	r3, r2
    c9fe:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ca00:	68bb      	ldr	r3, [r7, #8]
    ca02:	617b      	str	r3, [r7, #20]
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	61bb      	str	r3, [r7, #24]
    ca08:	7bfb      	ldrb	r3, [r7, #15]
    ca0a:	773b      	strb	r3, [r7, #28]
    ca0c:	7bbb      	ldrb	r3, [r7, #14]
    ca0e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ca10:	f107 0314 	add.w	r3, r7, #20
    ca14:	4618      	mov	r0, r3
    ca16:	4b03      	ldr	r3, [pc, #12]	; (ca24 <usbdc_xfer+0x38>)
    ca18:	4798      	blx	r3
    ca1a:	4603      	mov	r3, r0
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	3720      	adds	r7, #32
    ca20:	46bd      	mov	sp, r7
    ca22:	bd80      	pop	{r7, pc}
    ca24:	0000310d 	.word	0x0000310d

0000ca28 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ca28:	b580      	push	{r7, lr}
    ca2a:	b082      	sub	sp, #8
    ca2c:	af00      	add	r7, sp, #0
    ca2e:	4603      	mov	r3, r0
    ca30:	6039      	str	r1, [r7, #0]
    ca32:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    ca34:	79fb      	ldrb	r3, [r7, #7]
    ca36:	2b01      	cmp	r3, #1
    ca38:	d009      	beq.n	ca4e <usbdc_register_handler+0x26>
    ca3a:	2b02      	cmp	r3, #2
    ca3c:	d00c      	beq.n	ca58 <usbdc_register_handler+0x30>
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d000      	beq.n	ca44 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    ca42:	e00e      	b.n	ca62 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ca44:	6839      	ldr	r1, [r7, #0]
    ca46:	4809      	ldr	r0, [pc, #36]	; (ca6c <usbdc_register_handler+0x44>)
    ca48:	4b09      	ldr	r3, [pc, #36]	; (ca70 <usbdc_register_handler+0x48>)
    ca4a:	4798      	blx	r3
		break;
    ca4c:	e009      	b.n	ca62 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ca4e:	6839      	ldr	r1, [r7, #0]
    ca50:	4808      	ldr	r0, [pc, #32]	; (ca74 <usbdc_register_handler+0x4c>)
    ca52:	4b07      	ldr	r3, [pc, #28]	; (ca70 <usbdc_register_handler+0x48>)
    ca54:	4798      	blx	r3
		break;
    ca56:	e004      	b.n	ca62 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ca58:	6839      	ldr	r1, [r7, #0]
    ca5a:	4807      	ldr	r0, [pc, #28]	; (ca78 <usbdc_register_handler+0x50>)
    ca5c:	4b04      	ldr	r3, [pc, #16]	; (ca70 <usbdc_register_handler+0x48>)
    ca5e:	4798      	blx	r3
		break;
    ca60:	bf00      	nop
	}
}
    ca62:	bf00      	nop
    ca64:	3708      	adds	r7, #8
    ca66:	46bd      	mov	sp, r7
    ca68:	bd80      	pop	{r7, pc}
    ca6a:	bf00      	nop
    ca6c:	20000e70 	.word	0x20000e70
    ca70:	000034f9 	.word	0x000034f9
    ca74:	20000e74 	.word	0x20000e74
    ca78:	20000e78 	.word	0x20000e78

0000ca7c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ca7c:	b580      	push	{r7, lr}
    ca7e:	b084      	sub	sp, #16
    ca80:	af00      	add	r7, sp, #0
    ca82:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	2b00      	cmp	r3, #0
    ca88:	bf14      	ite	ne
    ca8a:	2301      	movne	r3, #1
    ca8c:	2300      	moveq	r3, #0
    ca8e:	b2db      	uxtb	r3, r3
    ca90:	f240 3255 	movw	r2, #853	; 0x355
    ca94:	4910      	ldr	r1, [pc, #64]	; (cad8 <usbdc_init+0x5c>)
    ca96:	4618      	mov	r0, r3
    ca98:	4b10      	ldr	r3, [pc, #64]	; (cadc <usbdc_init+0x60>)
    ca9a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    ca9c:	4b10      	ldr	r3, [pc, #64]	; (cae0 <usbdc_init+0x64>)
    ca9e:	4798      	blx	r3
    caa0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    caa2:	68fb      	ldr	r3, [r7, #12]
    caa4:	2b00      	cmp	r3, #0
    caa6:	da01      	bge.n	caac <usbdc_init+0x30>
		return rc;
    caa8:	68fb      	ldr	r3, [r7, #12]
    caaa:	e010      	b.n	cace <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    caac:	2220      	movs	r2, #32
    caae:	2100      	movs	r1, #0
    cab0:	480c      	ldr	r0, [pc, #48]	; (cae4 <usbdc_init+0x68>)
    cab2:	4b0d      	ldr	r3, [pc, #52]	; (cae8 <usbdc_init+0x6c>)
    cab4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cab6:	4a0b      	ldr	r2, [pc, #44]	; (cae4 <usbdc_init+0x68>)
    cab8:	687b      	ldr	r3, [r7, #4]
    caba:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cabc:	490b      	ldr	r1, [pc, #44]	; (caec <usbdc_init+0x70>)
    cabe:	2000      	movs	r0, #0
    cac0:	4b0b      	ldr	r3, [pc, #44]	; (caf0 <usbdc_init+0x74>)
    cac2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cac4:	490b      	ldr	r1, [pc, #44]	; (caf4 <usbdc_init+0x78>)
    cac6:	2001      	movs	r0, #1
    cac8:	4b09      	ldr	r3, [pc, #36]	; (caf0 <usbdc_init+0x74>)
    caca:	4798      	blx	r3

	return 0;
    cacc:	2300      	movs	r3, #0
}
    cace:	4618      	mov	r0, r3
    cad0:	3710      	adds	r7, #16
    cad2:	46bd      	mov	sp, r7
    cad4:	bd80      	pop	{r7, pc}
    cad6:	bf00      	nop
    cad8:	0000f150 	.word	0x0000f150
    cadc:	0000341d 	.word	0x0000341d
    cae0:	00002e75 	.word	0x00002e75
    cae4:	20000e6c 	.word	0x20000e6c
    cae8:	0000ea6d 	.word	0x0000ea6d
    caec:	0000c7d9 	.word	0x0000c7d9
    caf0:	00002f21 	.word	0x00002f21
    caf4:	0000c9b5 	.word	0x0000c9b5

0000caf8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    caf8:	b580      	push	{r7, lr}
    cafa:	b082      	sub	sp, #8
    cafc:	af00      	add	r7, sp, #0
    cafe:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cb00:	6879      	ldr	r1, [r7, #4]
    cb02:	4803      	ldr	r0, [pc, #12]	; (cb10 <usbdc_register_function+0x18>)
    cb04:	4b03      	ldr	r3, [pc, #12]	; (cb14 <usbdc_register_function+0x1c>)
    cb06:	4798      	blx	r3
}
    cb08:	bf00      	nop
    cb0a:	3708      	adds	r7, #8
    cb0c:	46bd      	mov	sp, r7
    cb0e:	bd80      	pop	{r7, pc}
    cb10:	20000e7c 	.word	0x20000e7c
    cb14:	000034f9 	.word	0x000034f9

0000cb18 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cb18:	b580      	push	{r7, lr}
    cb1a:	b082      	sub	sp, #8
    cb1c:	af00      	add	r7, sp, #0
    cb1e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cb20:	4b0f      	ldr	r3, [pc, #60]	; (cb60 <usbdc_start+0x48>)
    cb22:	7e9b      	ldrb	r3, [r3, #26]
    cb24:	2b00      	cmp	r3, #0
    cb26:	d002      	beq.n	cb2e <usbdc_start+0x16>
		return ERR_BUSY;
    cb28:	f06f 0303 	mvn.w	r3, #3
    cb2c:	e013      	b.n	cb56 <usbdc_start+0x3e>
	}

	if (desces) {
    cb2e:	687b      	ldr	r3, [r7, #4]
    cb30:	2b00      	cmp	r3, #0
    cb32:	d00e      	beq.n	cb52 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cb34:	4a0a      	ldr	r2, [pc, #40]	; (cb60 <usbdc_start+0x48>)
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cb3a:	687b      	ldr	r3, [r7, #4]
    cb3c:	681b      	ldr	r3, [r3, #0]
    cb3e:	79da      	ldrb	r2, [r3, #7]
    cb40:	4b07      	ldr	r3, [pc, #28]	; (cb60 <usbdc_start+0x48>)
    cb42:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cb44:	4b06      	ldr	r3, [pc, #24]	; (cb60 <usbdc_start+0x48>)
    cb46:	2201      	movs	r2, #1
    cb48:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cb4a:	4b06      	ldr	r3, [pc, #24]	; (cb64 <usbdc_start+0x4c>)
    cb4c:	4798      	blx	r3
	return ERR_NONE;
    cb4e:	2300      	movs	r3, #0
    cb50:	e001      	b.n	cb56 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cb52:	f06f 0308 	mvn.w	r3, #8
}
    cb56:	4618      	mov	r0, r3
    cb58:	3708      	adds	r7, #8
    cb5a:	46bd      	mov	sp, r7
    cb5c:	bd80      	pop	{r7, pc}
    cb5e:	bf00      	nop
    cb60:	20000e6c 	.word	0x20000e6c
    cb64:	00002f45 	.word	0x00002f45

0000cb68 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cb68:	b580      	push	{r7, lr}
    cb6a:	af00      	add	r7, sp, #0
	usb_d_attach();
    cb6c:	4b01      	ldr	r3, [pc, #4]	; (cb74 <usbdc_attach+0xc>)
    cb6e:	4798      	blx	r3
}
    cb70:	bf00      	nop
    cb72:	bd80      	pop	{r7, pc}
    cb74:	00002f59 	.word	0x00002f59

0000cb78 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    cb78:	b480      	push	{r7}
    cb7a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    cb7c:	4b03      	ldr	r3, [pc, #12]	; (cb8c <usbdc_get_ctrl_buffer+0x14>)
    cb7e:	695b      	ldr	r3, [r3, #20]
}
    cb80:	4618      	mov	r0, r3
    cb82:	46bd      	mov	sp, r7
    cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb88:	4770      	bx	lr
    cb8a:	bf00      	nop
    cb8c:	20000e6c 	.word	0x20000e6c

0000cb90 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cb90:	b480      	push	{r7}
    cb92:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cb94:	4b07      	ldr	r3, [pc, #28]	; (cbb4 <usbdc_get_state+0x24>)
    cb96:	7e9b      	ldrb	r3, [r3, #26]
    cb98:	f003 0310 	and.w	r3, r3, #16
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d001      	beq.n	cba4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    cba0:	2310      	movs	r3, #16
    cba2:	e001      	b.n	cba8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    cba4:	4b03      	ldr	r3, [pc, #12]	; (cbb4 <usbdc_get_state+0x24>)
    cba6:	7e9b      	ldrb	r3, [r3, #26]
}
    cba8:	4618      	mov	r0, r3
    cbaa:	46bd      	mov	sp, r7
    cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbb0:	4770      	bx	lr
    cbb2:	bf00      	nop
    cbb4:	20000e6c 	.word	0x20000e6c

0000cbb8 <usb_get_u16>:
{
    cbb8:	b480      	push	{r7}
    cbba:	b083      	sub	sp, #12
    cbbc:	af00      	add	r7, sp, #0
    cbbe:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cbc0:	687b      	ldr	r3, [r7, #4]
    cbc2:	781b      	ldrb	r3, [r3, #0]
    cbc4:	b29a      	uxth	r2, r3
    cbc6:	687b      	ldr	r3, [r7, #4]
    cbc8:	3301      	adds	r3, #1
    cbca:	781b      	ldrb	r3, [r3, #0]
    cbcc:	b29b      	uxth	r3, r3
    cbce:	021b      	lsls	r3, r3, #8
    cbd0:	b29b      	uxth	r3, r3
    cbd2:	4413      	add	r3, r2
    cbd4:	b29b      	uxth	r3, r3
}
    cbd6:	4618      	mov	r0, r3
    cbd8:	370c      	adds	r7, #12
    cbda:	46bd      	mov	sp, r7
    cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbe0:	4770      	bx	lr

0000cbe2 <usb_desc_len>:
{
    cbe2:	b480      	push	{r7}
    cbe4:	b083      	sub	sp, #12
    cbe6:	af00      	add	r7, sp, #0
    cbe8:	6078      	str	r0, [r7, #4]
	return desc[0];
    cbea:	687b      	ldr	r3, [r7, #4]
    cbec:	781b      	ldrb	r3, [r3, #0]
}
    cbee:	4618      	mov	r0, r3
    cbf0:	370c      	adds	r7, #12
    cbf2:	46bd      	mov	sp, r7
    cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbf8:	4770      	bx	lr

0000cbfa <usb_desc_type>:
{
    cbfa:	b480      	push	{r7}
    cbfc:	b083      	sub	sp, #12
    cbfe:	af00      	add	r7, sp, #0
    cc00:	6078      	str	r0, [r7, #4]
	return desc[1];
    cc02:	687b      	ldr	r3, [r7, #4]
    cc04:	3301      	adds	r3, #1
    cc06:	781b      	ldrb	r3, [r3, #0]
}
    cc08:	4618      	mov	r0, r3
    cc0a:	370c      	adds	r7, #12
    cc0c:	46bd      	mov	sp, r7
    cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc12:	4770      	bx	lr

0000cc14 <usb_desc_next>:
{
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    cc1a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cc1c:	6878      	ldr	r0, [r7, #4]
    cc1e:	4b05      	ldr	r3, [pc, #20]	; (cc34 <usb_desc_next+0x20>)
    cc20:	4798      	blx	r3
    cc22:	4603      	mov	r3, r0
    cc24:	461a      	mov	r2, r3
    cc26:	687b      	ldr	r3, [r7, #4]
    cc28:	4413      	add	r3, r2
}
    cc2a:	4618      	mov	r0, r3
    cc2c:	3708      	adds	r7, #8
    cc2e:	46bd      	mov	sp, r7
    cc30:	bd80      	pop	{r7, pc}
    cc32:	bf00      	nop
    cc34:	0000cbe3 	.word	0x0000cbe3

0000cc38 <usb_cfg_desc_total_len>:
{
    cc38:	b580      	push	{r7, lr}
    cc3a:	b082      	sub	sp, #8
    cc3c:	af00      	add	r7, sp, #0
    cc3e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	3302      	adds	r3, #2
    cc44:	4618      	mov	r0, r3
    cc46:	4b03      	ldr	r3, [pc, #12]	; (cc54 <usb_cfg_desc_total_len+0x1c>)
    cc48:	4798      	blx	r3
    cc4a:	4603      	mov	r3, r0
}
    cc4c:	4618      	mov	r0, r3
    cc4e:	3708      	adds	r7, #8
    cc50:	46bd      	mov	sp, r7
    cc52:	bd80      	pop	{r7, pc}
    cc54:	0000cbb9 	.word	0x0000cbb9

0000cc58 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cc58:	b580      	push	{r7, lr}
    cc5a:	b082      	sub	sp, #8
    cc5c:	af00      	add	r7, sp, #0
    cc5e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cc60:	6878      	ldr	r0, [r7, #4]
    cc62:	4b05      	ldr	r3, [pc, #20]	; (cc78 <usb_cfg_desc_next+0x20>)
    cc64:	4798      	blx	r3
    cc66:	4603      	mov	r3, r0
    cc68:	461a      	mov	r2, r3
    cc6a:	687b      	ldr	r3, [r7, #4]
    cc6c:	4413      	add	r3, r2
}
    cc6e:	4618      	mov	r0, r3
    cc70:	3708      	adds	r7, #8
    cc72:	46bd      	mov	sp, r7
    cc74:	bd80      	pop	{r7, pc}
    cc76:	bf00      	nop
    cc78:	0000cc39 	.word	0x0000cc39

0000cc7c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cc7c:	b580      	push	{r7, lr}
    cc7e:	b084      	sub	sp, #16
    cc80:	af00      	add	r7, sp, #0
    cc82:	60f8      	str	r0, [r7, #12]
    cc84:	60b9      	str	r1, [r7, #8]
    cc86:	4613      	mov	r3, r2
    cc88:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cc8a:	e015      	b.n	ccb8 <usb_find_desc+0x3c>
		_desc_len_check();
    cc8c:	68f8      	ldr	r0, [r7, #12]
    cc8e:	4b0f      	ldr	r3, [pc, #60]	; (cccc <usb_find_desc+0x50>)
    cc90:	4798      	blx	r3
    cc92:	4603      	mov	r3, r0
    cc94:	2b01      	cmp	r3, #1
    cc96:	d801      	bhi.n	cc9c <usb_find_desc+0x20>
    cc98:	2300      	movs	r3, #0
    cc9a:	e012      	b.n	ccc2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    cc9c:	68f8      	ldr	r0, [r7, #12]
    cc9e:	4b0c      	ldr	r3, [pc, #48]	; (ccd0 <usb_find_desc+0x54>)
    cca0:	4798      	blx	r3
    cca2:	4603      	mov	r3, r0
    cca4:	461a      	mov	r2, r3
    cca6:	79fb      	ldrb	r3, [r7, #7]
    cca8:	4293      	cmp	r3, r2
    ccaa:	d101      	bne.n	ccb0 <usb_find_desc+0x34>
			return desc;
    ccac:	68fb      	ldr	r3, [r7, #12]
    ccae:	e008      	b.n	ccc2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    ccb0:	68f8      	ldr	r0, [r7, #12]
    ccb2:	4b08      	ldr	r3, [pc, #32]	; (ccd4 <usb_find_desc+0x58>)
    ccb4:	4798      	blx	r3
    ccb6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ccb8:	68fa      	ldr	r2, [r7, #12]
    ccba:	68bb      	ldr	r3, [r7, #8]
    ccbc:	429a      	cmp	r2, r3
    ccbe:	d3e5      	bcc.n	cc8c <usb_find_desc+0x10>
	}
	return NULL;
    ccc0:	2300      	movs	r3, #0
}
    ccc2:	4618      	mov	r0, r3
    ccc4:	3710      	adds	r7, #16
    ccc6:	46bd      	mov	sp, r7
    ccc8:	bd80      	pop	{r7, pc}
    ccca:	bf00      	nop
    cccc:	0000cbe3 	.word	0x0000cbe3
    ccd0:	0000cbfb 	.word	0x0000cbfb
    ccd4:	0000cc15 	.word	0x0000cc15

0000ccd8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    ccd8:	b580      	push	{r7, lr}
    ccda:	b082      	sub	sp, #8
    ccdc:	af00      	add	r7, sp, #0
    ccde:	6078      	str	r0, [r7, #4]
    cce0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cce2:	e019      	b.n	cd18 <usb_find_ep_desc+0x40>
		_desc_len_check();
    cce4:	6878      	ldr	r0, [r7, #4]
    cce6:	4b12      	ldr	r3, [pc, #72]	; (cd30 <usb_find_ep_desc+0x58>)
    cce8:	4798      	blx	r3
    ccea:	4603      	mov	r3, r0
    ccec:	2b01      	cmp	r3, #1
    ccee:	d801      	bhi.n	ccf4 <usb_find_ep_desc+0x1c>
    ccf0:	2300      	movs	r3, #0
    ccf2:	e018      	b.n	cd26 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ccf4:	6878      	ldr	r0, [r7, #4]
    ccf6:	4b0f      	ldr	r3, [pc, #60]	; (cd34 <usb_find_ep_desc+0x5c>)
    ccf8:	4798      	blx	r3
    ccfa:	4603      	mov	r3, r0
    ccfc:	2b04      	cmp	r3, #4
    ccfe:	d010      	beq.n	cd22 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cd00:	6878      	ldr	r0, [r7, #4]
    cd02:	4b0c      	ldr	r3, [pc, #48]	; (cd34 <usb_find_ep_desc+0x5c>)
    cd04:	4798      	blx	r3
    cd06:	4603      	mov	r3, r0
    cd08:	2b05      	cmp	r3, #5
    cd0a:	d101      	bne.n	cd10 <usb_find_ep_desc+0x38>
			return desc;
    cd0c:	687b      	ldr	r3, [r7, #4]
    cd0e:	e00a      	b.n	cd26 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cd10:	6878      	ldr	r0, [r7, #4]
    cd12:	4b09      	ldr	r3, [pc, #36]	; (cd38 <usb_find_ep_desc+0x60>)
    cd14:	4798      	blx	r3
    cd16:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cd18:	687a      	ldr	r2, [r7, #4]
    cd1a:	683b      	ldr	r3, [r7, #0]
    cd1c:	429a      	cmp	r2, r3
    cd1e:	d3e1      	bcc.n	cce4 <usb_find_ep_desc+0xc>
    cd20:	e000      	b.n	cd24 <usb_find_ep_desc+0x4c>
			break;
    cd22:	bf00      	nop
	}
	return NULL;
    cd24:	2300      	movs	r3, #0
}
    cd26:	4618      	mov	r0, r3
    cd28:	3708      	adds	r7, #8
    cd2a:	46bd      	mov	sp, r7
    cd2c:	bd80      	pop	{r7, pc}
    cd2e:	bf00      	nop
    cd30:	0000cbe3 	.word	0x0000cbe3
    cd34:	0000cbfb 	.word	0x0000cbfb
    cd38:	0000cc15 	.word	0x0000cc15

0000cd3c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cd3c:	b580      	push	{r7, lr}
    cd3e:	b084      	sub	sp, #16
    cd40:	af00      	add	r7, sp, #0
    cd42:	60f8      	str	r0, [r7, #12]
    cd44:	60b9      	str	r1, [r7, #8]
    cd46:	4613      	mov	r3, r2
    cd48:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cd4a:	2202      	movs	r2, #2
    cd4c:	68b9      	ldr	r1, [r7, #8]
    cd4e:	68f8      	ldr	r0, [r7, #12]
    cd50:	4b15      	ldr	r3, [pc, #84]	; (cda8 <usb_find_cfg_desc+0x6c>)
    cd52:	4798      	blx	r3
    cd54:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    cd56:	68fb      	ldr	r3, [r7, #12]
    cd58:	2b00      	cmp	r3, #0
    cd5a:	d11a      	bne.n	cd92 <usb_find_cfg_desc+0x56>
		return NULL;
    cd5c:	2300      	movs	r3, #0
    cd5e:	e01f      	b.n	cda0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    cd60:	68f8      	ldr	r0, [r7, #12]
    cd62:	4b12      	ldr	r3, [pc, #72]	; (cdac <usb_find_cfg_desc+0x70>)
    cd64:	4798      	blx	r3
    cd66:	4603      	mov	r3, r0
    cd68:	2b01      	cmp	r3, #1
    cd6a:	d801      	bhi.n	cd70 <usb_find_cfg_desc+0x34>
    cd6c:	2300      	movs	r3, #0
    cd6e:	e017      	b.n	cda0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    cd70:	68fb      	ldr	r3, [r7, #12]
    cd72:	3301      	adds	r3, #1
    cd74:	781b      	ldrb	r3, [r3, #0]
    cd76:	2b02      	cmp	r3, #2
    cd78:	d110      	bne.n	cd9c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    cd7a:	68fb      	ldr	r3, [r7, #12]
    cd7c:	3305      	adds	r3, #5
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	79fa      	ldrb	r2, [r7, #7]
    cd82:	429a      	cmp	r2, r3
    cd84:	d101      	bne.n	cd8a <usb_find_cfg_desc+0x4e>
			return desc;
    cd86:	68fb      	ldr	r3, [r7, #12]
    cd88:	e00a      	b.n	cda0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    cd8a:	68f8      	ldr	r0, [r7, #12]
    cd8c:	4b08      	ldr	r3, [pc, #32]	; (cdb0 <usb_find_cfg_desc+0x74>)
    cd8e:	4798      	blx	r3
    cd90:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cd92:	68fa      	ldr	r2, [r7, #12]
    cd94:	68bb      	ldr	r3, [r7, #8]
    cd96:	429a      	cmp	r2, r3
    cd98:	d3e2      	bcc.n	cd60 <usb_find_cfg_desc+0x24>
    cd9a:	e000      	b.n	cd9e <usb_find_cfg_desc+0x62>
			break;
    cd9c:	bf00      	nop
	}
	return NULL;
    cd9e:	2300      	movs	r3, #0
}
    cda0:	4618      	mov	r0, r3
    cda2:	3710      	adds	r7, #16
    cda4:	46bd      	mov	sp, r7
    cda6:	bd80      	pop	{r7, pc}
    cda8:	0000cc7d 	.word	0x0000cc7d
    cdac:	0000cbe3 	.word	0x0000cbe3
    cdb0:	0000cc59 	.word	0x0000cc59

0000cdb4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    cdb4:	b580      	push	{r7, lr}
    cdb6:	b086      	sub	sp, #24
    cdb8:	af00      	add	r7, sp, #0
    cdba:	60f8      	str	r0, [r7, #12]
    cdbc:	60b9      	str	r1, [r7, #8]
    cdbe:	4613      	mov	r3, r2
    cdc0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    cdc2:	2300      	movs	r3, #0
    cdc4:	75fb      	strb	r3, [r7, #23]
    cdc6:	e020      	b.n	ce0a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    cdc8:	2203      	movs	r2, #3
    cdca:	68b9      	ldr	r1, [r7, #8]
    cdcc:	68f8      	ldr	r0, [r7, #12]
    cdce:	4b13      	ldr	r3, [pc, #76]	; (ce1c <usb_find_str_desc+0x68>)
    cdd0:	4798      	blx	r3
    cdd2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    cdd4:	68fb      	ldr	r3, [r7, #12]
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	d015      	beq.n	ce06 <usb_find_str_desc+0x52>
			_desc_len_check();
    cdda:	68f8      	ldr	r0, [r7, #12]
    cddc:	4b10      	ldr	r3, [pc, #64]	; (ce20 <usb_find_str_desc+0x6c>)
    cdde:	4798      	blx	r3
    cde0:	4603      	mov	r3, r0
    cde2:	2b01      	cmp	r3, #1
    cde4:	d801      	bhi.n	cdea <usb_find_str_desc+0x36>
    cde6:	2300      	movs	r3, #0
    cde8:	e014      	b.n	ce14 <usb_find_str_desc+0x60>
			if (i == str_index) {
    cdea:	7dfa      	ldrb	r2, [r7, #23]
    cdec:	79fb      	ldrb	r3, [r7, #7]
    cdee:	429a      	cmp	r2, r3
    cdf0:	d101      	bne.n	cdf6 <usb_find_str_desc+0x42>
				return desc;
    cdf2:	68fb      	ldr	r3, [r7, #12]
    cdf4:	e00e      	b.n	ce14 <usb_find_str_desc+0x60>
			}
			i++;
    cdf6:	7dfb      	ldrb	r3, [r7, #23]
    cdf8:	3301      	adds	r3, #1
    cdfa:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    cdfc:	68f8      	ldr	r0, [r7, #12]
    cdfe:	4b09      	ldr	r3, [pc, #36]	; (ce24 <usb_find_str_desc+0x70>)
    ce00:	4798      	blx	r3
    ce02:	60f8      	str	r0, [r7, #12]
    ce04:	e001      	b.n	ce0a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    ce06:	2300      	movs	r3, #0
    ce08:	e004      	b.n	ce14 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    ce0a:	68fa      	ldr	r2, [r7, #12]
    ce0c:	68bb      	ldr	r3, [r7, #8]
    ce0e:	429a      	cmp	r2, r3
    ce10:	d3da      	bcc.n	cdc8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    ce12:	2300      	movs	r3, #0
}
    ce14:	4618      	mov	r0, r3
    ce16:	3718      	adds	r7, #24
    ce18:	46bd      	mov	sp, r7
    ce1a:	bd80      	pop	{r7, pc}
    ce1c:	0000cc7d 	.word	0x0000cc7d
    ce20:	0000cbe3 	.word	0x0000cbe3
    ce24:	0000cc15 	.word	0x0000cc15

0000ce28 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    ce28:	b480      	push	{r7}
    ce2a:	b083      	sub	sp, #12
    ce2c:	af00      	add	r7, sp, #0
    ce2e:	6078      	str	r0, [r7, #4]
    ce30:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    ce32:	687b      	ldr	r3, [r7, #4]
    ce34:	683a      	ldr	r2, [r7, #0]
    ce36:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    ce38:	687b      	ldr	r3, [r7, #4]
    ce3a:	4618      	mov	r0, r3
    ce3c:	370c      	adds	r7, #12
    ce3e:	46bd      	mov	sp, r7
    ce40:	bc80      	pop	{r7}
    ce42:	4770      	bx	lr

0000ce44 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    ce44:	b480      	push	{r7}
    ce46:	b083      	sub	sp, #12
    ce48:	af00      	add	r7, sp, #0
    ce4a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    ce4c:	687b      	ldr	r3, [r7, #4]
    ce4e:	4618      	mov	r0, r3
    ce50:	370c      	adds	r7, #12
    ce52:	46bd      	mov	sp, r7
    ce54:	bc80      	pop	{r7}
    ce56:	4770      	bx	lr

0000ce58 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    ce58:	b580      	push	{r7, lr}
    ce5a:	b082      	sub	sp, #8
    ce5c:	af00      	add	r7, sp, #0
    ce5e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    ce60:	687b      	ldr	r3, [r7, #4]
    ce62:	4a23      	ldr	r2, [pc, #140]	; (cef0 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    ce64:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    ce66:	687b      	ldr	r3, [r7, #4]
    ce68:	4a21      	ldr	r2, [pc, #132]	; (cef0 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    ce6a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    ce6c:	687b      	ldr	r3, [r7, #4]
    ce6e:	691a      	ldr	r2, [r3, #16]
    ce70:	687b      	ldr	r3, [r7, #4]
    ce72:	330c      	adds	r3, #12
    ce74:	4619      	mov	r1, r3
    ce76:	4610      	mov	r0, r2
    ce78:	4b1e      	ldr	r3, [pc, #120]	; (cef4 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    ce7a:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    ce7c:	687b      	ldr	r3, [r7, #4]
    ce7e:	691b      	ldr	r3, [r3, #16]
    ce80:	4618      	mov	r0, r3
    ce82:	4b1d      	ldr	r3, [pc, #116]	; (cef8 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    ce84:	4798      	blx	r3
    ce86:	4603      	mov	r3, r0
    ce88:	b2da      	uxtb	r2, r3
    ce8a:	687b      	ldr	r3, [r7, #4]
    ce8c:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    ce8e:	687b      	ldr	r3, [r7, #4]
    ce90:	7d1b      	ldrb	r3, [r3, #20]
    ce92:	2b00      	cmp	r3, #0
    ce94:	bf0c      	ite	eq
    ce96:	2301      	moveq	r3, #1
    ce98:	2300      	movne	r3, #0
    ce9a:	b2da      	uxtb	r2, r3
    ce9c:	687b      	ldr	r3, [r7, #4]
    ce9e:	725a      	strb	r2, [r3, #9]
	if (isOK)
    cea0:	687b      	ldr	r3, [r7, #4]
    cea2:	7a5b      	ldrb	r3, [r3, #9]
    cea4:	b2db      	uxtb	r3, r3
    cea6:	2b00      	cmp	r3, #0
    cea8:	d116      	bne.n	ced8 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    ceaa:	687b      	ldr	r3, [r7, #4]
    ceac:	691b      	ldr	r3, [r3, #16]
    ceae:	4618      	mov	r0, r3
    ceb0:	4b12      	ldr	r3, [pc, #72]	; (cefc <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    ceb2:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    ceb4:	687b      	ldr	r3, [r7, #4]
    ceb6:	691b      	ldr	r3, [r3, #16]
    ceb8:	4618      	mov	r0, r3
    ceba:	4b0f      	ldr	r3, [pc, #60]	; (cef8 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    cebc:	4798      	blx	r3
    cebe:	4603      	mov	r3, r0
    cec0:	b2da      	uxtb	r2, r3
    cec2:	687b      	ldr	r3, [r7, #4]
    cec4:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    cec6:	687b      	ldr	r3, [r7, #4]
    cec8:	7d1b      	ldrb	r3, [r3, #20]
    ceca:	2b00      	cmp	r3, #0
    cecc:	bf0c      	ite	eq
    cece:	2301      	moveq	r3, #1
    ced0:	2300      	movne	r3, #0
    ced2:	b2da      	uxtb	r2, r3
    ced4:	687b      	ldr	r3, [r7, #4]
    ced6:	725a      	strb	r2, [r3, #9]
	}
	
	i2c_initiated=isOK;
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	7a5b      	ldrb	r3, [r3, #9]
    cedc:	b2da      	uxtb	r2, r3
    cede:	687b      	ldr	r3, [r7, #4]
    cee0:	721a      	strb	r2, [r3, #8]
	return isOK;
    cee2:	687b      	ldr	r3, [r7, #4]
    cee4:	7a5b      	ldrb	r3, [r3, #9]
    cee6:	b2db      	uxtb	r3, r3
	
}
    cee8:	4618      	mov	r0, r3
    ceea:	3708      	adds	r7, #8
    ceec:	46bd      	mov	sp, r7
    ceee:	bd80      	pop	{r7, pc}
    cef0:	20000e8c 	.word	0x20000e8c
    cef4:	0000226b 	.word	0x0000226b
    cef8:	000021f1 	.word	0x000021f1
    cefc:	00002211 	.word	0x00002211

0000cf00 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    cf00:	b580      	push	{r7, lr}
    cf02:	b082      	sub	sp, #8
    cf04:	af00      	add	r7, sp, #0
    cf06:	6078      	str	r0, [r7, #4]
    cf08:	460b      	mov	r3, r1
    cf0a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    cf0c:	687b      	ldr	r3, [r7, #4]
    cf0e:	691b      	ldr	r3, [r3, #16]
    cf10:	78fa      	ldrb	r2, [r7, #3]
    cf12:	b211      	sxth	r1, r2
    cf14:	f44f 6200 	mov.w	r2, #2048	; 0x800
    cf18:	4618      	mov	r0, r3
    cf1a:	4b03      	ldr	r3, [pc, #12]	; (cf28 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    cf1c:	4798      	blx	r3
    cf1e:	4603      	mov	r3, r0
}
    cf20:	4618      	mov	r0, r3
    cf22:	3708      	adds	r7, #8
    cf24:	46bd      	mov	sp, r7
    cf26:	bd80      	pop	{r7, pc}
    cf28:	00002231 	.word	0x00002231

0000cf2c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    cf2c:	b580      	push	{r7, lr}
    cf2e:	b086      	sub	sp, #24
    cf30:	af00      	add	r7, sp, #0
    cf32:	60f8      	str	r0, [r7, #12]
    cf34:	60b9      	str	r1, [r7, #8]
    cf36:	4613      	mov	r3, r2
    cf38:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    cf3a:	68fb      	ldr	r3, [r7, #12]
    cf3c:	68db      	ldr	r3, [r3, #12]
    cf3e:	88fa      	ldrh	r2, [r7, #6]
    cf40:	68b9      	ldr	r1, [r7, #8]
    cf42:	4618      	mov	r0, r3
    cf44:	4b03      	ldr	r3, [pc, #12]	; (cf54 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    cf46:	4798      	blx	r3
    cf48:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    cf4a:	697b      	ldr	r3, [r7, #20]
}
    cf4c:	4618      	mov	r0, r3
    cf4e:	3718      	adds	r7, #24
    cf50:	46bd      	mov	sp, r7
    cf52:	bd80      	pop	{r7, pc}
    cf54:	0000e815 	.word	0x0000e815

0000cf58 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    cf58:	b580      	push	{r7, lr}
    cf5a:	b086      	sub	sp, #24
    cf5c:	af00      	add	r7, sp, #0
    cf5e:	60f8      	str	r0, [r7, #12]
    cf60:	60b9      	str	r1, [r7, #8]
    cf62:	4613      	mov	r3, r2
    cf64:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    cf66:	68fb      	ldr	r3, [r7, #12]
    cf68:	68db      	ldr	r3, [r3, #12]
    cf6a:	88fa      	ldrh	r2, [r7, #6]
    cf6c:	68b9      	ldr	r1, [r7, #8]
    cf6e:	4618      	mov	r0, r3
    cf70:	4b03      	ldr	r3, [pc, #12]	; (cf80 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    cf72:	4798      	blx	r3
    cf74:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    cf76:	697b      	ldr	r3, [r7, #20]
}
    cf78:	4618      	mov	r0, r3
    cf7a:	3718      	adds	r7, #24
    cf7c:	46bd      	mov	sp, r7
    cf7e:	bd80      	pop	{r7, pc}
    cf80:	0000e865 	.word	0x0000e865

0000cf84 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    cf84:	b480      	push	{r7}
    cf86:	b083      	sub	sp, #12
    cf88:	af00      	add	r7, sp, #0
    cf8a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	4618      	mov	r0, r3
    cf90:	370c      	adds	r7, #12
    cf92:	46bd      	mov	sp, r7
    cf94:	bc80      	pop	{r7}
    cf96:	4770      	bx	lr

0000cf98 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    cf98:	b480      	push	{r7}
    cf9a:	b083      	sub	sp, #12
    cf9c:	af00      	add	r7, sp, #0
    cf9e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    cfa0:	687b      	ldr	r3, [r7, #4]
    cfa2:	4618      	mov	r0, r3
    cfa4:	370c      	adds	r7, #12
    cfa6:	46bd      	mov	sp, r7
    cfa8:	bc80      	pop	{r7}
    cfaa:	4770      	bx	lr

0000cfac <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    cfac:	b480      	push	{r7}
    cfae:	b085      	sub	sp, #20
    cfb0:	af00      	add	r7, sp, #0
    cfb2:	60f8      	str	r0, [r7, #12]
    cfb4:	460b      	mov	r3, r1
    cfb6:	607a      	str	r2, [r7, #4]
    cfb8:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    cfba:	687b      	ldr	r3, [r7, #4]
    cfbc:	681a      	ldr	r2, [r3, #0]
    cfbe:	68fb      	ldr	r3, [r7, #12]
    cfc0:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    cfc2:	687b      	ldr	r3, [r7, #4]
    cfc4:	685a      	ldr	r2, [r3, #4]
    cfc6:	68fb      	ldr	r3, [r7, #12]
    cfc8:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    cfca:	68fb      	ldr	r3, [r7, #12]
    cfcc:	7afa      	ldrb	r2, [r7, #11]
    cfce:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    cfd0:	68fb      	ldr	r3, [r7, #12]
    cfd2:	687a      	ldr	r2, [r7, #4]
    cfd4:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    cfd6:	68fb      	ldr	r3, [r7, #12]
    cfd8:	68db      	ldr	r3, [r3, #12]
    cfda:	7a5b      	ldrb	r3, [r3, #9]
    cfdc:	b2da      	uxtb	r2, r3
    cfde:	68fb      	ldr	r3, [r7, #12]
    cfe0:	719a      	strb	r2, [r3, #6]
	return isOK;
    cfe2:	68fb      	ldr	r3, [r7, #12]
    cfe4:	799b      	ldrb	r3, [r3, #6]
    cfe6:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    cfe8:	4618      	mov	r0, r3
    cfea:	3714      	adds	r7, #20
    cfec:	46bd      	mov	sp, r7
    cfee:	bc80      	pop	{r7}
    cff0:	4770      	bx	lr

0000cff2 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    cff2:	b480      	push	{r7}
    cff4:	b083      	sub	sp, #12
    cff6:	af00      	add	r7, sp, #0
    cff8:	6078      	str	r0, [r7, #4]
    cffa:	460b      	mov	r3, r1
    cffc:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    cffe:	78fb      	ldrb	r3, [r7, #3]
    d000:	f003 0307 	and.w	r3, r3, #7
    d004:	b2db      	uxtb	r3, r3
}
    d006:	4618      	mov	r0, r3
    d008:	370c      	adds	r7, #12
    d00a:	46bd      	mov	sp, r7
    d00c:	bc80      	pop	{r7}
    d00e:	4770      	bx	lr

0000d010 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d010:	b480      	push	{r7}
    d012:	b083      	sub	sp, #12
    d014:	af00      	add	r7, sp, #0
    d016:	6078      	str	r0, [r7, #4]
    d018:	4608      	mov	r0, r1
    d01a:	4611      	mov	r1, r2
    d01c:	461a      	mov	r2, r3
    d01e:	4603      	mov	r3, r0
    d020:	70fb      	strb	r3, [r7, #3]
    d022:	460b      	mov	r3, r1
    d024:	70bb      	strb	r3, [r7, #2]
    d026:	4613      	mov	r3, r2
    d028:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d02a:	78fb      	ldrb	r3, [r7, #3]
    d02c:	2b07      	cmp	r3, #7
    d02e:	dc01      	bgt.n	d034 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d030:	78bb      	ldrb	r3, [r7, #2]
    d032:	e000      	b.n	d036 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d034:	787b      	ldrb	r3, [r7, #1]
}
    d036:	4618      	mov	r0, r3
    d038:	370c      	adds	r7, #12
    d03a:	46bd      	mov	sp, r7
    d03c:	bc80      	pop	{r7}
    d03e:	4770      	bx	lr

0000d040 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d040:	b580      	push	{r7, lr}
    d042:	b082      	sub	sp, #8
    d044:	af00      	add	r7, sp, #0
    d046:	6078      	str	r0, [r7, #4]
    d048:	460b      	mov	r3, r1
    d04a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d04c:	687b      	ldr	r3, [r7, #4]
    d04e:	68da      	ldr	r2, [r3, #12]
    d050:	687b      	ldr	r3, [r7, #4]
    d052:	7a1b      	ldrb	r3, [r3, #8]
    d054:	4619      	mov	r1, r3
    d056:	4610      	mov	r0, r2
    d058:	4b0a      	ldr	r3, [pc, #40]	; (d084 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    d05a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d05c:	687b      	ldr	r3, [r7, #4]
    d05e:	68db      	ldr	r3, [r3, #12]
    d060:	1cf9      	adds	r1, r7, #3
    d062:	2201      	movs	r2, #1
    d064:	4618      	mov	r0, r3
    d066:	4b08      	ldr	r3, [pc, #32]	; (d088 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d068:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d06a:	687b      	ldr	r3, [r7, #4]
    d06c:	68db      	ldr	r3, [r3, #12]
    d06e:	6879      	ldr	r1, [r7, #4]
    d070:	2201      	movs	r2, #1
    d072:	4618      	mov	r0, r3
    d074:	4b05      	ldr	r3, [pc, #20]	; (d08c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d076:	4798      	blx	r3

	return registerValue;
    d078:	687b      	ldr	r3, [r7, #4]
    d07a:	781b      	ldrb	r3, [r3, #0]
}
    d07c:	4618      	mov	r0, r3
    d07e:	3708      	adds	r7, #8
    d080:	46bd      	mov	sp, r7
    d082:	bd80      	pop	{r7, pc}
    d084:	0000cf01 	.word	0x0000cf01
    d088:	0000cf2d 	.word	0x0000cf2d
    d08c:	0000cf59 	.word	0x0000cf59

0000d090 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d090:	b580      	push	{r7, lr}
    d092:	b084      	sub	sp, #16
    d094:	af00      	add	r7, sp, #0
    d096:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d098:	687b      	ldr	r3, [r7, #4]
    d09a:	68da      	ldr	r2, [r3, #12]
    d09c:	687b      	ldr	r3, [r7, #4]
    d09e:	7a1b      	ldrb	r3, [r3, #8]
    d0a0:	4619      	mov	r1, r3
    d0a2:	4610      	mov	r0, r2
    d0a4:	4b06      	ldr	r3, [pc, #24]	; (d0c0 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d0a6:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    d0a8:	2109      	movs	r1, #9
    d0aa:	6878      	ldr	r0, [r7, #4]
    d0ac:	4b05      	ldr	r3, [pc, #20]	; (d0c4 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    d0ae:	4798      	blx	r3
    d0b0:	4603      	mov	r3, r0
    d0b2:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    d0b4:	7bfb      	ldrb	r3, [r7, #15]
}
    d0b6:	4618      	mov	r0, r3
    d0b8:	3710      	adds	r7, #16
    d0ba:	46bd      	mov	sp, r7
    d0bc:	bd80      	pop	{r7, pc}
    d0be:	bf00      	nop
    d0c0:	0000cf01 	.word	0x0000cf01
    d0c4:	0000d041 	.word	0x0000d041

0000d0c8 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d0c8:	b580      	push	{r7, lr}
    d0ca:	b084      	sub	sp, #16
    d0cc:	af00      	add	r7, sp, #0
    d0ce:	6078      	str	r0, [r7, #4]
    d0d0:	460b      	mov	r3, r1
    d0d2:	70fb      	strb	r3, [r7, #3]
    d0d4:	4613      	mov	r3, r2
    d0d6:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d0d8:	687b      	ldr	r3, [r7, #4]
    d0da:	68da      	ldr	r2, [r3, #12]
    d0dc:	687b      	ldr	r3, [r7, #4]
    d0de:	7a1b      	ldrb	r3, [r3, #8]
    d0e0:	4619      	mov	r1, r3
    d0e2:	4610      	mov	r0, r2
    d0e4:	4b09      	ldr	r3, [pc, #36]	; (d10c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d0e6:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d0e8:	78fb      	ldrb	r3, [r7, #3]
    d0ea:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d0ec:	78bb      	ldrb	r3, [r7, #2]
    d0ee:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d0f0:	687b      	ldr	r3, [r7, #4]
    d0f2:	68db      	ldr	r3, [r3, #12]
    d0f4:	f107 010c 	add.w	r1, r7, #12
    d0f8:	2202      	movs	r2, #2
    d0fa:	4618      	mov	r0, r3
    d0fc:	4b04      	ldr	r3, [pc, #16]	; (d110 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d0fe:	4798      	blx	r3
    d100:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d102:	4618      	mov	r0, r3
    d104:	3710      	adds	r7, #16
    d106:	46bd      	mov	sp, r7
    d108:	bd80      	pop	{r7, pc}
    d10a:	bf00      	nop
    d10c:	0000cf01 	.word	0x0000cf01
    d110:	0000cf2d 	.word	0x0000cf2d

0000d114 <_ZN14MCP23008_Class12SetPortInputEv>:
	//i2cClass->Irq_Enable();
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    d114:	b580      	push	{r7, lr}
    d116:	b084      	sub	sp, #16
    d118:	af00      	add	r7, sp, #0
    d11a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d11c:	2300      	movs	r3, #0
    d11e:	73fb      	strb	r3, [r7, #15]
    d120:	7bfb      	ldrb	r3, [r7, #15]
    d122:	2b07      	cmp	r3, #7
    d124:	dc0f      	bgt.n	d146 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d126:	7bfb      	ldrb	r3, [r7, #15]
    d128:	2201      	movs	r2, #1
    d12a:	4619      	mov	r1, r3
    d12c:	6878      	ldr	r0, [r7, #4]
    d12e:	4b08      	ldr	r3, [pc, #32]	; (d150 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d130:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d132:	7bfb      	ldrb	r3, [r7, #15]
    d134:	2201      	movs	r2, #1
    d136:	4619      	mov	r1, r3
    d138:	6878      	ldr	r0, [r7, #4]
    d13a:	4b06      	ldr	r3, [pc, #24]	; (d154 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d13c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d13e:	7bfb      	ldrb	r3, [r7, #15]
    d140:	3301      	adds	r3, #1
    d142:	73fb      	strb	r3, [r7, #15]
    d144:	e7ec      	b.n	d120 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d146:	bf00      	nop
    d148:	3710      	adds	r7, #16
    d14a:	46bd      	mov	sp, r7
    d14c:	bd80      	pop	{r7, pc}
    d14e:	bf00      	nop
    d150:	0000d219 	.word	0x0000d219
    d154:	0000d2fd 	.word	0x0000d2fd

0000d158 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    d158:	b580      	push	{r7, lr}
    d15a:	b084      	sub	sp, #16
    d15c:	af00      	add	r7, sp, #0
    d15e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d160:	2300      	movs	r3, #0
    d162:	73fb      	strb	r3, [r7, #15]
    d164:	7bfb      	ldrb	r3, [r7, #15]
    d166:	2b07      	cmp	r3, #7
    d168:	dc09      	bgt.n	d17e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d16a:	7bfb      	ldrb	r3, [r7, #15]
    d16c:	2200      	movs	r2, #0
    d16e:	4619      	mov	r1, r3
    d170:	6878      	ldr	r0, [r7, #4]
    d172:	4b05      	ldr	r3, [pc, #20]	; (d188 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d174:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d176:	7bfb      	ldrb	r3, [r7, #15]
    d178:	3301      	adds	r3, #1
    d17a:	73fb      	strb	r3, [r7, #15]
    d17c:	e7f2      	b.n	d164 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d17e:	bf00      	nop
    d180:	3710      	adds	r7, #16
    d182:	46bd      	mov	sp, r7
    d184:	bd80      	pop	{r7, pc}
    d186:	bf00      	nop
    d188:	0000d219 	.word	0x0000d219

0000d18c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d18c:	b580      	push	{r7, lr}
    d18e:	b084      	sub	sp, #16
    d190:	af00      	add	r7, sp, #0
    d192:	6078      	str	r0, [r7, #4]
    d194:	4608      	mov	r0, r1
    d196:	4611      	mov	r1, r2
    d198:	461a      	mov	r2, r3
    d19a:	4603      	mov	r3, r0
    d19c:	70fb      	strb	r3, [r7, #3]
    d19e:	460b      	mov	r3, r1
    d1a0:	70bb      	strb	r3, [r7, #2]
    d1a2:	4613      	mov	r3, r2
    d1a4:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d1a6:	787b      	ldrb	r3, [r7, #1]
    d1a8:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d1aa:	78fb      	ldrb	r3, [r7, #3]
    d1ac:	4619      	mov	r1, r3
    d1ae:	6878      	ldr	r0, [r7, #4]
    d1b0:	4b16      	ldr	r3, [pc, #88]	; (d20c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d1b2:	4798      	blx	r3
    d1b4:	4603      	mov	r3, r0
    d1b6:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d1b8:	7bfb      	ldrb	r3, [r7, #15]
    d1ba:	4619      	mov	r1, r3
    d1bc:	6878      	ldr	r0, [r7, #4]
    d1be:	4b14      	ldr	r3, [pc, #80]	; (d210 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d1c0:	4798      	blx	r3
    d1c2:	4603      	mov	r3, r0
    d1c4:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d1c6:	78bb      	ldrb	r3, [r7, #2]
    d1c8:	2b00      	cmp	r3, #0
    d1ca:	d009      	beq.n	d1e0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d1cc:	7bba      	ldrb	r2, [r7, #14]
    d1ce:	7b7b      	ldrb	r3, [r7, #13]
    d1d0:	4619      	mov	r1, r3
    d1d2:	2301      	movs	r3, #1
    d1d4:	408b      	lsls	r3, r1
    d1d6:	b2db      	uxtb	r3, r3
    d1d8:	4313      	orrs	r3, r2
    d1da:	b2db      	uxtb	r3, r3
    d1dc:	73bb      	strb	r3, [r7, #14]
    d1de:	e00a      	b.n	d1f6 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d1e0:	7bba      	ldrb	r2, [r7, #14]
    d1e2:	7b7b      	ldrb	r3, [r7, #13]
    d1e4:	4619      	mov	r1, r3
    d1e6:	2301      	movs	r3, #1
    d1e8:	408b      	lsls	r3, r1
    d1ea:	b2db      	uxtb	r3, r3
    d1ec:	43db      	mvns	r3, r3
    d1ee:	b2db      	uxtb	r3, r3
    d1f0:	4013      	ands	r3, r2
    d1f2:	b2db      	uxtb	r3, r3
    d1f4:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d1f6:	7bba      	ldrb	r2, [r7, #14]
    d1f8:	7bfb      	ldrb	r3, [r7, #15]
    d1fa:	4619      	mov	r1, r3
    d1fc:	6878      	ldr	r0, [r7, #4]
    d1fe:	4b05      	ldr	r3, [pc, #20]	; (d214 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d200:	4798      	blx	r3
}
    d202:	bf00      	nop
    d204:	3710      	adds	r7, #16
    d206:	46bd      	mov	sp, r7
    d208:	bd80      	pop	{r7, pc}
    d20a:	bf00      	nop
    d20c:	0000cff3 	.word	0x0000cff3
    d210:	0000d041 	.word	0x0000d041
    d214:	0000d0c9 	.word	0x0000d0c9

0000d218 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d218:	b590      	push	{r4, r7, lr}
    d21a:	b085      	sub	sp, #20
    d21c:	af02      	add	r7, sp, #8
    d21e:	6078      	str	r0, [r7, #4]
    d220:	460b      	mov	r3, r1
    d222:	70fb      	strb	r3, [r7, #3]
    d224:	4613      	mov	r3, r2
    d226:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d228:	78bb      	ldrb	r3, [r7, #2]
    d22a:	2b01      	cmp	r3, #1
    d22c:	bf0c      	ite	eq
    d22e:	2301      	moveq	r3, #1
    d230:	2300      	movne	r3, #0
    d232:	b2db      	uxtb	r3, r3
    d234:	461a      	mov	r2, r3
    d236:	78f9      	ldrb	r1, [r7, #3]
    d238:	2300      	movs	r3, #0
    d23a:	9300      	str	r3, [sp, #0]
    d23c:	2300      	movs	r3, #0
    d23e:	6878      	ldr	r0, [r7, #4]
    d240:	4c02      	ldr	r4, [pc, #8]	; (d24c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d242:	47a0      	blx	r4
}
    d244:	bf00      	nop
    d246:	370c      	adds	r7, #12
    d248:	46bd      	mov	sp, r7
    d24a:	bd90      	pop	{r4, r7, pc}
    d24c:	0000d18d 	.word	0x0000d18d

0000d250 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d250:	b590      	push	{r4, r7, lr}
    d252:	b085      	sub	sp, #20
    d254:	af00      	add	r7, sp, #0
    d256:	6078      	str	r0, [r7, #4]
    d258:	460b      	mov	r3, r1
    d25a:	70fb      	strb	r3, [r7, #3]
    d25c:	4613      	mov	r3, r2
    d25e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d260:	78fb      	ldrb	r3, [r7, #3]
    d262:	4619      	mov	r1, r3
    d264:	6878      	ldr	r0, [r7, #4]
    d266:	4b21      	ldr	r3, [pc, #132]	; (d2ec <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d268:	4798      	blx	r3
    d26a:	4603      	mov	r3, r0
    d26c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d26e:	78f9      	ldrb	r1, [r7, #3]
    d270:	230a      	movs	r3, #10
    d272:	220a      	movs	r2, #10
    d274:	6878      	ldr	r0, [r7, #4]
    d276:	4c1e      	ldr	r4, [pc, #120]	; (d2f0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d278:	47a0      	blx	r4
    d27a:	4603      	mov	r3, r0
    d27c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d27e:	7bfb      	ldrb	r3, [r7, #15]
    d280:	4619      	mov	r1, r3
    d282:	6878      	ldr	r0, [r7, #4]
    d284:	4b1b      	ldr	r3, [pc, #108]	; (d2f4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d286:	4798      	blx	r3
    d288:	4603      	mov	r3, r0
    d28a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d28c:	78bb      	ldrb	r3, [r7, #2]
    d28e:	2b00      	cmp	r3, #0
    d290:	d009      	beq.n	d2a6 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d292:	7bba      	ldrb	r2, [r7, #14]
    d294:	7b7b      	ldrb	r3, [r7, #13]
    d296:	4619      	mov	r1, r3
    d298:	2301      	movs	r3, #1
    d29a:	408b      	lsls	r3, r1
    d29c:	b2db      	uxtb	r3, r3
    d29e:	4313      	orrs	r3, r2
    d2a0:	b2db      	uxtb	r3, r3
    d2a2:	73bb      	strb	r3, [r7, #14]
    d2a4:	e00a      	b.n	d2bc <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d2a6:	7bba      	ldrb	r2, [r7, #14]
    d2a8:	7b7b      	ldrb	r3, [r7, #13]
    d2aa:	4619      	mov	r1, r3
    d2ac:	2301      	movs	r3, #1
    d2ae:	408b      	lsls	r3, r1
    d2b0:	b2db      	uxtb	r3, r3
    d2b2:	43db      	mvns	r3, r3
    d2b4:	b2db      	uxtb	r3, r3
    d2b6:	4013      	ands	r3, r2
    d2b8:	b2db      	uxtb	r3, r3
    d2ba:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d2bc:	78f9      	ldrb	r1, [r7, #3]
    d2be:	2309      	movs	r3, #9
    d2c0:	2209      	movs	r2, #9
    d2c2:	6878      	ldr	r0, [r7, #4]
    d2c4:	4c0a      	ldr	r4, [pc, #40]	; (d2f0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d2c6:	47a0      	blx	r4
    d2c8:	4603      	mov	r3, r0
    d2ca:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d2cc:	7bba      	ldrb	r2, [r7, #14]
    d2ce:	7bfb      	ldrb	r3, [r7, #15]
    d2d0:	4619      	mov	r1, r3
    d2d2:	6878      	ldr	r0, [r7, #4]
    d2d4:	4b08      	ldr	r3, [pc, #32]	; (d2f8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d2d6:	4798      	blx	r3
    d2d8:	4603      	mov	r3, r0
    d2da:	2b00      	cmp	r3, #0
    d2dc:	bf0c      	ite	eq
    d2de:	2301      	moveq	r3, #1
    d2e0:	2300      	movne	r3, #0
    d2e2:	b2db      	uxtb	r3, r3
}
    d2e4:	4618      	mov	r0, r3
    d2e6:	3714      	adds	r7, #20
    d2e8:	46bd      	mov	sp, r7
    d2ea:	bd90      	pop	{r4, r7, pc}
    d2ec:	0000cff3 	.word	0x0000cff3
    d2f0:	0000d011 	.word	0x0000d011
    d2f4:	0000d041 	.word	0x0000d041
    d2f8:	0000d0c9 	.word	0x0000d0c9

0000d2fc <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d2fc:	b590      	push	{r4, r7, lr}
    d2fe:	b085      	sub	sp, #20
    d300:	af02      	add	r7, sp, #8
    d302:	6078      	str	r0, [r7, #4]
    d304:	460b      	mov	r3, r1
    d306:	70fb      	strb	r3, [r7, #3]
    d308:	4613      	mov	r3, r2
    d30a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d30c:	78ba      	ldrb	r2, [r7, #2]
    d30e:	78f9      	ldrb	r1, [r7, #3]
    d310:	2306      	movs	r3, #6
    d312:	9300      	str	r3, [sp, #0]
    d314:	2306      	movs	r3, #6
    d316:	6878      	ldr	r0, [r7, #4]
    d318:	4c02      	ldr	r4, [pc, #8]	; (d324 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d31a:	47a0      	blx	r4
}
    d31c:	bf00      	nop
    d31e:	370c      	adds	r7, #12
    d320:	46bd      	mov	sp, r7
    d322:	bd90      	pop	{r4, r7, pc}
    d324:	0000d18d 	.word	0x0000d18d

0000d328 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d328:	b480      	push	{r7}
    d32a:	b083      	sub	sp, #12
    d32c:	af00      	add	r7, sp, #0
    d32e:	6078      	str	r0, [r7, #4]
    d330:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d332:	687b      	ldr	r3, [r7, #4]
    d334:	683a      	ldr	r2, [r7, #0]
    d336:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    d338:	687b      	ldr	r3, [r7, #4]
    d33a:	68db      	ldr	r3, [r3, #12]
    d33c:	2200      	movs	r2, #0
    d33e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    d340:	4a06      	ldr	r2, [pc, #24]	; (d35c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    d342:	687b      	ldr	r3, [r7, #4]
    d344:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d346:	687b      	ldr	r3, [r7, #4]
    d348:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d34c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d34e:	687b      	ldr	r3, [r7, #4]
    d350:	4618      	mov	r0, r3
    d352:	370c      	adds	r7, #12
    d354:	46bd      	mov	sp, r7
    d356:	bc80      	pop	{r7}
    d358:	4770      	bx	lr
    d35a:	bf00      	nop
    d35c:	2000100c 	.word	0x2000100c

0000d360 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d360:	b480      	push	{r7}
    d362:	b083      	sub	sp, #12
    d364:	af00      	add	r7, sp, #0
    d366:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d368:	687b      	ldr	r3, [r7, #4]
    d36a:	2200      	movs	r2, #0
    d36c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d36e:	687b      	ldr	r3, [r7, #4]
    d370:	4618      	mov	r0, r3
    d372:	370c      	adds	r7, #12
    d374:	46bd      	mov	sp, r7
    d376:	bc80      	pop	{r7}
    d378:	4770      	bx	lr
	...

0000d37c <_ZL9InitArrayv>:


static void InitArray(){
    d37c:	b480      	push	{r7}
    d37e:	b083      	sub	sp, #12
    d380:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d382:	2301      	movs	r3, #1
    d384:	607b      	str	r3, [r7, #4]
    d386:	687b      	ldr	r3, [r7, #4]
    d388:	2b1f      	cmp	r3, #31
    d38a:	dc34      	bgt.n	d3f6 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d38c:	491e      	ldr	r1, [pc, #120]	; (d408 <_ZL9InitArrayv+0x8c>)
    d38e:	687a      	ldr	r2, [r7, #4]
    d390:	4613      	mov	r3, r2
    d392:	009b      	lsls	r3, r3, #2
    d394:	4413      	add	r3, r2
    d396:	009b      	lsls	r3, r3, #2
    d398:	440b      	add	r3, r1
    d39a:	2200      	movs	r2, #0
    d39c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d39e:	491a      	ldr	r1, [pc, #104]	; (d408 <_ZL9InitArrayv+0x8c>)
    d3a0:	687a      	ldr	r2, [r7, #4]
    d3a2:	4613      	mov	r3, r2
    d3a4:	009b      	lsls	r3, r3, #2
    d3a6:	4413      	add	r3, r2
    d3a8:	009b      	lsls	r3, r3, #2
    d3aa:	440b      	add	r3, r1
    d3ac:	330c      	adds	r3, #12
    d3ae:	2200      	movs	r2, #0
    d3b0:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d3b2:	687b      	ldr	r3, [r7, #4]
    d3b4:	1e5a      	subs	r2, r3, #1
    d3b6:	6879      	ldr	r1, [r7, #4]
    d3b8:	460b      	mov	r3, r1
    d3ba:	009b      	lsls	r3, r3, #2
    d3bc:	440b      	add	r3, r1
    d3be:	009b      	lsls	r3, r3, #2
    d3c0:	4911      	ldr	r1, [pc, #68]	; (d408 <_ZL9InitArrayv+0x8c>)
    d3c2:	4419      	add	r1, r3
    d3c4:	4810      	ldr	r0, [pc, #64]	; (d408 <_ZL9InitArrayv+0x8c>)
    d3c6:	4613      	mov	r3, r2
    d3c8:	009b      	lsls	r3, r3, #2
    d3ca:	4413      	add	r3, r2
    d3cc:	009b      	lsls	r3, r3, #2
    d3ce:	4403      	add	r3, r0
    d3d0:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    d3d2:	4a0e      	ldr	r2, [pc, #56]	; (d40c <_ZL9InitArrayv+0x90>)
    d3d4:	687b      	ldr	r3, [r7, #4]
    d3d6:	2100      	movs	r1, #0
    d3d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	3b01      	subs	r3, #1
    d3e0:	687a      	ldr	r2, [r7, #4]
    d3e2:	0092      	lsls	r2, r2, #2
    d3e4:	4909      	ldr	r1, [pc, #36]	; (d40c <_ZL9InitArrayv+0x90>)
    d3e6:	440a      	add	r2, r1
    d3e8:	4908      	ldr	r1, [pc, #32]	; (d40c <_ZL9InitArrayv+0x90>)
    d3ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    d3ee:	687b      	ldr	r3, [r7, #4]
    d3f0:	3301      	adds	r3, #1
    d3f2:	607b      	str	r3, [r7, #4]
    d3f4:	e7c7      	b.n	d386 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    d3f6:	4b06      	ldr	r3, [pc, #24]	; (d410 <_ZL9InitArrayv+0x94>)
    d3f8:	2201      	movs	r2, #1
    d3fa:	701a      	strb	r2, [r3, #0]
		
}
    d3fc:	bf00      	nop
    d3fe:	370c      	adds	r7, #12
    d400:	46bd      	mov	sp, r7
    d402:	bc80      	pop	{r7}
    d404:	4770      	bx	lr
    d406:	bf00      	nop
    d408:	20001010 	.word	0x20001010
    d40c:	20001290 	.word	0x20001290
    d410:	20001310 	.word	0x20001310

0000d414 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d414:	b580      	push	{r7, lr}
    d416:	b082      	sub	sp, #8
    d418:	af00      	add	r7, sp, #0
    d41a:	6078      	str	r0, [r7, #4]
	ticks=0;
    d41c:	687b      	ldr	r3, [r7, #4]
    d41e:	2200      	movs	r2, #0
    d420:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d422:	4b0d      	ldr	r3, [pc, #52]	; (d458 <_ZN11Timer_Class4InitEv+0x44>)
    d424:	781b      	ldrb	r3, [r3, #0]
    d426:	f083 0301 	eor.w	r3, r3, #1
    d42a:	b2db      	uxtb	r3, r3
    d42c:	2b00      	cmp	r3, #0
    d42e:	d001      	beq.n	d434 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d430:	4b0a      	ldr	r3, [pc, #40]	; (d45c <_ZN11Timer_Class4InitEv+0x48>)
    d432:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    d434:	6878      	ldr	r0, [r7, #4]
    d436:	4b0a      	ldr	r3, [pc, #40]	; (d460 <_ZN11Timer_Class4InitEv+0x4c>)
    d438:	4798      	blx	r3
    d43a:	4603      	mov	r3, r0
    d43c:	2b00      	cmp	r3, #0
    d43e:	bf0c      	ite	eq
    d440:	2301      	moveq	r3, #1
    d442:	2300      	movne	r3, #0
    d444:	b2da      	uxtb	r2, r3
    d446:	687b      	ldr	r3, [r7, #4]
    d448:	709a      	strb	r2, [r3, #2]
	return isOK;
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	789b      	ldrb	r3, [r3, #2]
    d44e:	b2db      	uxtb	r3, r3
}
    d450:	4618      	mov	r0, r3
    d452:	3708      	adds	r7, #8
    d454:	46bd      	mov	sp, r7
    d456:	bd80      	pop	{r7, pc}
    d458:	20001310 	.word	0x20001310
    d45c:	0000d37d 	.word	0x0000d37d
    d460:	0000d465 	.word	0x0000d465

0000d464 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    d464:	b580      	push	{r7, lr}
    d466:	b084      	sub	sp, #16
    d468:	af00      	add	r7, sp, #0
    d46a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    d46c:	687b      	ldr	r3, [r7, #4]
    d46e:	68db      	ldr	r3, [r3, #12]
    d470:	4618      	mov	r0, r3
    d472:	4b04      	ldr	r3, [pc, #16]	; (d484 <_ZN11Timer_Class5StartEv+0x20>)
    d474:	4798      	blx	r3
    d476:	60f8      	str	r0, [r7, #12]
	return status;
    d478:	68fb      	ldr	r3, [r7, #12]
	
}
    d47a:	4618      	mov	r0, r3
    d47c:	3710      	adds	r7, #16
    d47e:	46bd      	mov	sp, r7
    d480:	bd80      	pop	{r7, pc}
    d482:	bf00      	nop
    d484:	00002685 	.word	0x00002685

0000d488 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    d488:	b580      	push	{r7, lr}
    d48a:	b084      	sub	sp, #16
    d48c:	af00      	add	r7, sp, #0
    d48e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    d490:	687b      	ldr	r3, [r7, #4]
    d492:	68db      	ldr	r3, [r3, #12]
    d494:	4618      	mov	r0, r3
    d496:	4b05      	ldr	r3, [pc, #20]	; (d4ac <_ZN11Timer_Class4StopEv+0x24>)
    d498:	4798      	blx	r3
    d49a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	2200      	movs	r2, #0
    d4a0:	705a      	strb	r2, [r3, #1]
	return status;
    d4a2:	68fb      	ldr	r3, [r7, #12]
}
    d4a4:	4618      	mov	r0, r3
    d4a6:	3710      	adds	r7, #16
    d4a8:	46bd      	mov	sp, r7
    d4aa:	bd80      	pop	{r7, pc}
    d4ac:	000026ed 	.word	0x000026ed

0000d4b0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d4b0:	b580      	push	{r7, lr}
    d4b2:	b086      	sub	sp, #24
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	60f8      	str	r0, [r7, #12]
    d4b8:	60b9      	str	r1, [r7, #8]
    d4ba:	607a      	str	r2, [r7, #4]
    d4bc:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    d4be:	68b9      	ldr	r1, [r7, #8]
    d4c0:	68f8      	ldr	r0, [r7, #12]
    d4c2:	4b0e      	ldr	r3, [pc, #56]	; (d4fc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d4c4:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    d4c6:	68fb      	ldr	r3, [r7, #12]
    d4c8:	699b      	ldr	r3, [r3, #24]
    d4ca:	687a      	ldr	r2, [r7, #4]
    d4cc:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d4ce:	68fb      	ldr	r3, [r7, #12]
    d4d0:	699b      	ldr	r3, [r3, #24]
    d4d2:	68ba      	ldr	r2, [r7, #8]
    d4d4:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d4d6:	68fb      	ldr	r3, [r7, #12]
    d4d8:	699b      	ldr	r3, [r3, #24]
    d4da:	78fa      	ldrb	r2, [r7, #3]
    d4dc:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d4de:	68fb      	ldr	r3, [r7, #12]
    d4e0:	68da      	ldr	r2, [r3, #12]
    d4e2:	68fb      	ldr	r3, [r7, #12]
    d4e4:	699b      	ldr	r3, [r3, #24]
    d4e6:	4619      	mov	r1, r3
    d4e8:	4610      	mov	r0, r2
    d4ea:	4b05      	ldr	r3, [pc, #20]	; (d500 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    d4ec:	4798      	blx	r3
    d4ee:	6178      	str	r0, [r7, #20]
	
	return status;
    d4f0:	697b      	ldr	r3, [r7, #20]
}
    d4f2:	4618      	mov	r0, r3
    d4f4:	3718      	adds	r7, #24
    d4f6:	46bd      	mov	sp, r7
    d4f8:	bd80      	pop	{r7, pc}
    d4fa:	bf00      	nop
    d4fc:	0000d619 	.word	0x0000d619
    d500:	00002759 	.word	0x00002759

0000d504 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    d504:	b580      	push	{r7, lr}
    d506:	b082      	sub	sp, #8
    d508:	af00      	add	r7, sp, #0
    d50a:	6078      	str	r0, [r7, #4]
    d50c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    d50e:	6839      	ldr	r1, [r7, #0]
    d510:	6878      	ldr	r0, [r7, #4]
    d512:	4b0f      	ldr	r3, [pc, #60]	; (d550 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    d514:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    d516:	687b      	ldr	r3, [r7, #4]
    d518:	68db      	ldr	r3, [r3, #12]
    d51a:	f103 0218 	add.w	r2, r3, #24
    d51e:	687b      	ldr	r3, [r7, #4]
    d520:	699b      	ldr	r3, [r3, #24]
    d522:	4619      	mov	r1, r3
    d524:	4610      	mov	r0, r2
    d526:	4b0b      	ldr	r3, [pc, #44]	; (d554 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    d528:	4798      	blx	r3
    d52a:	4603      	mov	r3, r0
    d52c:	2b00      	cmp	r3, #0
    d52e:	d007      	beq.n	d540 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    d530:	687b      	ldr	r3, [r7, #4]
    d532:	68da      	ldr	r2, [r3, #12]
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	699b      	ldr	r3, [r3, #24]
    d538:	4619      	mov	r1, r3
    d53a:	4610      	mov	r0, r2
    d53c:	4b06      	ldr	r3, [pc, #24]	; (d558 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    d53e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	699b      	ldr	r3, [r3, #24]
    d544:	2200      	movs	r2, #0
    d546:	60da      	str	r2, [r3, #12]
}
    d548:	bf00      	nop
    d54a:	3708      	adds	r7, #8
    d54c:	46bd      	mov	sp, r7
    d54e:	bd80      	pop	{r7, pc}
    d550:	0000d699 	.word	0x0000d699
    d554:	00003445 	.word	0x00003445
    d558:	0000285d 	.word	0x0000285d

0000d55c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    d55c:	b590      	push	{r4, r7, lr}
    d55e:	b087      	sub	sp, #28
    d560:	af00      	add	r7, sp, #0
    d562:	60f8      	str	r0, [r7, #12]
    d564:	60b9      	str	r1, [r7, #8]
    d566:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    d568:	2300      	movs	r3, #0
    d56a:	687a      	ldr	r2, [r7, #4]
    d56c:	68b9      	ldr	r1, [r7, #8]
    d56e:	68f8      	ldr	r0, [r7, #12]
    d570:	4c0c      	ldr	r4, [pc, #48]	; (d5a4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    d572:	47a0      	blx	r4
    d574:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d576:	68fb      	ldr	r3, [r7, #12]
    d578:	68db      	ldr	r3, [r3, #12]
    d57a:	681b      	ldr	r3, [r3, #0]
    d57c:	699b      	ldr	r3, [r3, #24]
    d57e:	68fa      	ldr	r2, [r7, #12]
    d580:	68d2      	ldr	r2, [r2, #12]
    d582:	3204      	adds	r2, #4
    d584:	4610      	mov	r0, r2
    d586:	4798      	blx	r3
    d588:	4603      	mov	r3, r0
    d58a:	2b00      	cmp	r3, #0
    d58c:	d105      	bne.n	d59a <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    d58e:	68fb      	ldr	r3, [r7, #12]
    d590:	68db      	ldr	r3, [r3, #12]
    d592:	4618      	mov	r0, r3
    d594:	4b04      	ldr	r3, [pc, #16]	; (d5a8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    d596:	4798      	blx	r3
    d598:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    d59a:	697b      	ldr	r3, [r7, #20]
}
    d59c:	4618      	mov	r0, r3
    d59e:	371c      	adds	r7, #28
    d5a0:	46bd      	mov	sp, r7
    d5a2:	bd90      	pop	{r4, r7, pc}
    d5a4:	0000d4b1 	.word	0x0000d4b1
    d5a8:	00002685 	.word	0x00002685

0000d5ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    d5ac:	b480      	push	{r7}
    d5ae:	b085      	sub	sp, #20
    d5b0:	af00      	add	r7, sp, #0
    d5b2:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d5b4:	2300      	movs	r3, #0
    d5b6:	73fb      	strb	r3, [r7, #15]
    d5b8:	7bfb      	ldrb	r3, [r7, #15]
    d5ba:	2b1f      	cmp	r3, #31
    d5bc:	dc23      	bgt.n	d606 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    d5be:	687b      	ldr	r3, [r7, #4]
    d5c0:	7f1a      	ldrb	r2, [r3, #28]
    d5c2:	7bfb      	ldrb	r3, [r7, #15]
    d5c4:	4413      	add	r3, r2
    d5c6:	b2db      	uxtb	r3, r3
    d5c8:	f003 031f 	and.w	r3, r3, #31
    d5cc:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    d5ce:	7bba      	ldrb	r2, [r7, #14]
    d5d0:	4910      	ldr	r1, [pc, #64]	; (d614 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d5d2:	4613      	mov	r3, r2
    d5d4:	009b      	lsls	r3, r3, #2
    d5d6:	4413      	add	r3, r2
    d5d8:	009b      	lsls	r3, r3, #2
    d5da:	440b      	add	r3, r1
    d5dc:	330c      	adds	r3, #12
    d5de:	681b      	ldr	r3, [r3, #0]
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	d10c      	bne.n	d5fe <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    d5e4:	7bba      	ldrb	r2, [r7, #14]
    d5e6:	4613      	mov	r3, r2
    d5e8:	009b      	lsls	r3, r3, #2
    d5ea:	4413      	add	r3, r2
    d5ec:	009b      	lsls	r3, r3, #2
    d5ee:	4a09      	ldr	r2, [pc, #36]	; (d614 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d5f0:	441a      	add	r2, r3
    d5f2:	687b      	ldr	r3, [r7, #4]
    d5f4:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    d5f6:	687b      	ldr	r3, [r7, #4]
    d5f8:	7bba      	ldrb	r2, [r7, #14]
    d5fa:	771a      	strb	r2, [r3, #28]
			return;
    d5fc:	e006      	b.n	d60c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d5fe:	7bfb      	ldrb	r3, [r7, #15]
    d600:	3301      	adds	r3, #1
    d602:	73fb      	strb	r3, [r7, #15]
    d604:	e7d8      	b.n	d5b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    d606:	687b      	ldr	r3, [r7, #4]
    d608:	4a02      	ldr	r2, [pc, #8]	; (d614 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    d60a:	619a      	str	r2, [r3, #24]

}
    d60c:	3714      	adds	r7, #20
    d60e:	46bd      	mov	sp, r7
    d610:	bc80      	pop	{r7}
    d612:	4770      	bx	lr
    d614:	20001010 	.word	0x20001010

0000d618 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    d618:	b580      	push	{r7, lr}
    d61a:	b084      	sub	sp, #16
    d61c:	af00      	add	r7, sp, #0
    d61e:	6078      	str	r0, [r7, #4]
    d620:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d622:	2300      	movs	r3, #0
    d624:	73fb      	strb	r3, [r7, #15]
    d626:	7bfb      	ldrb	r3, [r7, #15]
    d628:	2b1f      	cmp	r3, #31
    d62a:	dc28      	bgt.n	d67e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    d62c:	687b      	ldr	r3, [r7, #4]
    d62e:	7f1a      	ldrb	r2, [r3, #28]
    d630:	7bfb      	ldrb	r3, [r7, #15]
    d632:	4413      	add	r3, r2
    d634:	b2db      	uxtb	r3, r3
    d636:	f003 031f 	and.w	r3, r3, #31
    d63a:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    d63c:	7bba      	ldrb	r2, [r7, #14]
    d63e:	4913      	ldr	r1, [pc, #76]	; (d68c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d640:	4613      	mov	r3, r2
    d642:	009b      	lsls	r3, r3, #2
    d644:	4413      	add	r3, r2
    d646:	009b      	lsls	r3, r3, #2
    d648:	440b      	add	r3, r1
    d64a:	330c      	adds	r3, #12
    d64c:	681a      	ldr	r2, [r3, #0]
    d64e:	683b      	ldr	r3, [r7, #0]
    d650:	429a      	cmp	r2, r3
    d652:	d110      	bne.n	d676 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    d654:	6839      	ldr	r1, [r7, #0]
    d656:	6878      	ldr	r0, [r7, #4]
    d658:	4b0d      	ldr	r3, [pc, #52]	; (d690 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    d65a:	4798      	blx	r3
			task=&taskArray[j];
    d65c:	7bba      	ldrb	r2, [r7, #14]
    d65e:	4613      	mov	r3, r2
    d660:	009b      	lsls	r3, r3, #2
    d662:	4413      	add	r3, r2
    d664:	009b      	lsls	r3, r3, #2
    d666:	4a09      	ldr	r2, [pc, #36]	; (d68c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    d668:	441a      	add	r2, r3
    d66a:	687b      	ldr	r3, [r7, #4]
    d66c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    d66e:	687b      	ldr	r3, [r7, #4]
    d670:	7bba      	ldrb	r2, [r7, #14]
    d672:	771a      	strb	r2, [r3, #28]
			return;
    d674:	e006      	b.n	d684 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d676:	7bfb      	ldrb	r3, [r7, #15]
    d678:	3301      	adds	r3, #1
    d67a:	73fb      	strb	r3, [r7, #15]
    d67c:	e7d3      	b.n	d626 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    d67e:	6878      	ldr	r0, [r7, #4]
    d680:	4b04      	ldr	r3, [pc, #16]	; (d694 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    d682:	4798      	blx	r3
	//task=&taskArray[0];

}
    d684:	3710      	adds	r7, #16
    d686:	46bd      	mov	sp, r7
    d688:	bd80      	pop	{r7, pc}
    d68a:	bf00      	nop
    d68c:	20001010 	.word	0x20001010
    d690:	0000d505 	.word	0x0000d505
    d694:	0000d5ad 	.word	0x0000d5ad

0000d698 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    d698:	b480      	push	{r7}
    d69a:	b085      	sub	sp, #20
    d69c:	af00      	add	r7, sp, #0
    d69e:	6078      	str	r0, [r7, #4]
    d6a0:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d6a2:	2300      	movs	r3, #0
    d6a4:	73fb      	strb	r3, [r7, #15]
    d6a6:	7bfb      	ldrb	r3, [r7, #15]
    d6a8:	2b1f      	cmp	r3, #31
    d6aa:	dc19      	bgt.n	d6e0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    d6ac:	7bfa      	ldrb	r2, [r7, #15]
    d6ae:	490f      	ldr	r1, [pc, #60]	; (d6ec <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d6b0:	4613      	mov	r3, r2
    d6b2:	009b      	lsls	r3, r3, #2
    d6b4:	4413      	add	r3, r2
    d6b6:	009b      	lsls	r3, r3, #2
    d6b8:	440b      	add	r3, r1
    d6ba:	330c      	adds	r3, #12
    d6bc:	681a      	ldr	r2, [r3, #0]
    d6be:	683b      	ldr	r3, [r7, #0]
    d6c0:	429a      	cmp	r2, r3
    d6c2:	d109      	bne.n	d6d8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    d6c4:	7bfa      	ldrb	r2, [r7, #15]
    d6c6:	4613      	mov	r3, r2
    d6c8:	009b      	lsls	r3, r3, #2
    d6ca:	4413      	add	r3, r2
    d6cc:	009b      	lsls	r3, r3, #2
    d6ce:	4a07      	ldr	r2, [pc, #28]	; (d6ec <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    d6d0:	441a      	add	r2, r3
    d6d2:	687b      	ldr	r3, [r7, #4]
    d6d4:	619a      	str	r2, [r3, #24]
			return;
    d6d6:	e004      	b.n	d6e2 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d6d8:	7bfb      	ldrb	r3, [r7, #15]
    d6da:	3301      	adds	r3, #1
    d6dc:	73fb      	strb	r3, [r7, #15]
    d6de:	e7e2      	b.n	d6a6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    d6e0:	bf00      	nop
}
    d6e2:	3714      	adds	r7, #20
    d6e4:	46bd      	mov	sp, r7
    d6e6:	bc80      	pop	{r7}
    d6e8:	4770      	bx	lr
    d6ea:	bf00      	nop
    d6ec:	20001010 	.word	0x20001010

0000d6f0 <_Z41__static_initialization_and_destruction_0ii>:
    d6f0:	b580      	push	{r7, lr}
    d6f2:	b082      	sub	sp, #8
    d6f4:	af00      	add	r7, sp, #0
    d6f6:	6078      	str	r0, [r7, #4]
    d6f8:	6039      	str	r1, [r7, #0]
    d6fa:	687b      	ldr	r3, [r7, #4]
    d6fc:	2b01      	cmp	r3, #1
    d6fe:	d14c      	bne.n	d79a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    d700:	683b      	ldr	r3, [r7, #0]
    d702:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d706:	4293      	cmp	r3, r2
    d708:	d147      	bne.n	d79a <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d70a:	4926      	ldr	r1, [pc, #152]	; (d7a4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    d70c:	4826      	ldr	r0, [pc, #152]	; (d7a8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d70e:	4b27      	ldr	r3, [pc, #156]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d710:	4798      	blx	r3
    d712:	4a27      	ldr	r2, [pc, #156]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d714:	4927      	ldr	r1, [pc, #156]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d716:	4824      	ldr	r0, [pc, #144]	; (d7a8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    d718:	4b27      	ldr	r3, [pc, #156]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d71a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    d71c:	4927      	ldr	r1, [pc, #156]	; (d7bc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    d71e:	4828      	ldr	r0, [pc, #160]	; (d7c0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d720:	4b22      	ldr	r3, [pc, #136]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d722:	4798      	blx	r3
    d724:	4a22      	ldr	r2, [pc, #136]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d726:	4923      	ldr	r1, [pc, #140]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d728:	4825      	ldr	r0, [pc, #148]	; (d7c0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    d72a:	4b23      	ldr	r3, [pc, #140]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d72c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    d72e:	4925      	ldr	r1, [pc, #148]	; (d7c4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    d730:	4825      	ldr	r0, [pc, #148]	; (d7c8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d732:	4b1e      	ldr	r3, [pc, #120]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d734:	4798      	blx	r3
    d736:	4a1e      	ldr	r2, [pc, #120]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d738:	491e      	ldr	r1, [pc, #120]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d73a:	4823      	ldr	r0, [pc, #140]	; (d7c8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    d73c:	4b1e      	ldr	r3, [pc, #120]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d73e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    d740:	4922      	ldr	r1, [pc, #136]	; (d7cc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    d742:	4823      	ldr	r0, [pc, #140]	; (d7d0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d744:	4b19      	ldr	r3, [pc, #100]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d746:	4798      	blx	r3
    d748:	4a19      	ldr	r2, [pc, #100]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d74a:	491a      	ldr	r1, [pc, #104]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d74c:	4820      	ldr	r0, [pc, #128]	; (d7d0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    d74e:	4b1a      	ldr	r3, [pc, #104]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d750:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    d752:	4920      	ldr	r1, [pc, #128]	; (d7d4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    d754:	4820      	ldr	r0, [pc, #128]	; (d7d8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d756:	4b15      	ldr	r3, [pc, #84]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d758:	4798      	blx	r3
    d75a:	4a15      	ldr	r2, [pc, #84]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d75c:	4915      	ldr	r1, [pc, #84]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d75e:	481e      	ldr	r0, [pc, #120]	; (d7d8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    d760:	4b15      	ldr	r3, [pc, #84]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d762:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    d764:	491d      	ldr	r1, [pc, #116]	; (d7dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
    d766:	481e      	ldr	r0, [pc, #120]	; (d7e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d768:	4b10      	ldr	r3, [pc, #64]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d76a:	4798      	blx	r3
    d76c:	4a10      	ldr	r2, [pc, #64]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d76e:	4911      	ldr	r1, [pc, #68]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d770:	481b      	ldr	r0, [pc, #108]	; (d7e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    d772:	4b11      	ldr	r3, [pc, #68]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d774:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    d776:	491b      	ldr	r1, [pc, #108]	; (d7e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    d778:	481b      	ldr	r0, [pc, #108]	; (d7e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d77a:	4b0c      	ldr	r3, [pc, #48]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d77c:	4798      	blx	r3
    d77e:	4a0c      	ldr	r2, [pc, #48]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d780:	490c      	ldr	r1, [pc, #48]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d782:	4819      	ldr	r0, [pc, #100]	; (d7e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    d784:	4b0c      	ldr	r3, [pc, #48]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d786:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    d788:	4918      	ldr	r1, [pc, #96]	; (d7ec <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    d78a:	4819      	ldr	r0, [pc, #100]	; (d7f0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d78c:	4b07      	ldr	r3, [pc, #28]	; (d7ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    d78e:	4798      	blx	r3
    d790:	4a07      	ldr	r2, [pc, #28]	; (d7b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    d792:	4908      	ldr	r1, [pc, #32]	; (d7b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    d794:	4816      	ldr	r0, [pc, #88]	; (d7f0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    d796:	4b08      	ldr	r3, [pc, #32]	; (d7b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    d798:	4798      	blx	r3
    d79a:	bf00      	nop
    d79c:	3708      	adds	r7, #8
    d79e:	46bd      	mov	sp, r7
    d7a0:	bd80      	pop	{r7, pc}
    d7a2:	bf00      	nop
    d7a4:	200015f4 	.word	0x200015f4
    d7a8:	20000f0c 	.word	0x20000f0c
    d7ac:	0000d329 	.word	0x0000d329
    d7b0:	20000000 	.word	0x20000000
    d7b4:	0000d361 	.word	0x0000d361
    d7b8:	0000e8b5 	.word	0x0000e8b5
    d7bc:	20001688 	.word	0x20001688
    d7c0:	20000f2c 	.word	0x20000f2c
    d7c4:	200017ac 	.word	0x200017ac
    d7c8:	20000f4c 	.word	0x20000f4c
    d7cc:	200016a8 	.word	0x200016a8
    d7d0:	20000f6c 	.word	0x20000f6c
    d7d4:	2000176c 	.word	0x2000176c
    d7d8:	20000f8c 	.word	0x20000f8c
    d7dc:	2000178c 	.word	0x2000178c
    d7e0:	20000fac 	.word	0x20000fac
    d7e4:	20001664 	.word	0x20001664
    d7e8:	20000fcc 	.word	0x20000fcc
    d7ec:	20001704 	.word	0x20001704
    d7f0:	20000fec 	.word	0x20000fec

0000d7f4 <_GLOBAL__sub_I_ptrTimerClass>:
    d7f4:	b580      	push	{r7, lr}
    d7f6:	af00      	add	r7, sp, #0
    d7f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d7fc:	2001      	movs	r0, #1
    d7fe:	4b01      	ldr	r3, [pc, #4]	; (d804 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    d800:	4798      	blx	r3
    d802:	bd80      	pop	{r7, pc}
    d804:	0000d6f1 	.word	0x0000d6f1

0000d808 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d808:	b480      	push	{r7}
    d80a:	b083      	sub	sp, #12
    d80c:	af00      	add	r7, sp, #0
    d80e:	6078      	str	r0, [r7, #4]
    d810:	4a05      	ldr	r2, [pc, #20]	; (d828 <_ZN5PrintC1Ev+0x20>)
    d812:	687b      	ldr	r3, [r7, #4]
    d814:	601a      	str	r2, [r3, #0]
    d816:	687b      	ldr	r3, [r7, #4]
    d818:	2200      	movs	r2, #0
    d81a:	605a      	str	r2, [r3, #4]
    d81c:	687b      	ldr	r3, [r7, #4]
    d81e:	4618      	mov	r0, r3
    d820:	370c      	adds	r7, #12
    d822:	46bd      	mov	sp, r7
    d824:	bc80      	pop	{r7}
    d826:	4770      	bx	lr
    d828:	0000f1dc 	.word	0x0000f1dc

0000d82c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d82c:	b480      	push	{r7}
    d82e:	b083      	sub	sp, #12
    d830:	af00      	add	r7, sp, #0
    d832:	6078      	str	r0, [r7, #4]
    d834:	2300      	movs	r3, #0
    d836:	4618      	mov	r0, r3
    d838:	370c      	adds	r7, #12
    d83a:	46bd      	mov	sp, r7
    d83c:	bc80      	pop	{r7}
    d83e:	4770      	bx	lr

0000d840 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d840:	b480      	push	{r7}
    d842:	b083      	sub	sp, #12
    d844:	af00      	add	r7, sp, #0
    d846:	6078      	str	r0, [r7, #4]
    d848:	bf00      	nop
    d84a:	370c      	adds	r7, #12
    d84c:	46bd      	mov	sp, r7
    d84e:	bc80      	pop	{r7}
    d850:	4770      	bx	lr
	...

0000d854 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d854:	b580      	push	{r7, lr}
    d856:	b082      	sub	sp, #8
    d858:	af00      	add	r7, sp, #0
    d85a:	6078      	str	r0, [r7, #4]
    d85c:	687b      	ldr	r3, [r7, #4]
    d85e:	4618      	mov	r0, r3
    d860:	4b06      	ldr	r3, [pc, #24]	; (d87c <_ZN6StreamC1Ev+0x28>)
    d862:	4798      	blx	r3
    d864:	4a06      	ldr	r2, [pc, #24]	; (d880 <_ZN6StreamC1Ev+0x2c>)
    d866:	687b      	ldr	r3, [r7, #4]
    d868:	601a      	str	r2, [r3, #0]
    d86a:	687b      	ldr	r3, [r7, #4]
    d86c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d870:	609a      	str	r2, [r3, #8]
    d872:	687b      	ldr	r3, [r7, #4]
    d874:	4618      	mov	r0, r3
    d876:	3708      	adds	r7, #8
    d878:	46bd      	mov	sp, r7
    d87a:	bd80      	pop	{r7, pc}
    d87c:	0000d809 	.word	0x0000d809
    d880:	0000f1a0 	.word	0x0000f1a0

0000d884 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    d884:	b480      	push	{r7}
    d886:	b083      	sub	sp, #12
    d888:	af00      	add	r7, sp, #0
    d88a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    d88c:	4b06      	ldr	r3, [pc, #24]	; (d8a8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d88e:	681b      	ldr	r3, [r3, #0]
    d890:	2201      	movs	r2, #1
    d892:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    d894:	4b04      	ldr	r3, [pc, #16]	; (d8a8 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d896:	681b      	ldr	r3, [r3, #0]
    d898:	2200      	movs	r2, #0
    d89a:	741a      	strb	r2, [r3, #16]
	
}
    d89c:	bf00      	nop
    d89e:	370c      	adds	r7, #12
    d8a0:	46bd      	mov	sp, r7
    d8a2:	bc80      	pop	{r7}
    d8a4:	4770      	bx	lr
    d8a6:	bf00      	nop
    d8a8:	20001414 	.word	0x20001414

0000d8ac <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d8ac:	b480      	push	{r7}
    d8ae:	b083      	sub	sp, #12
    d8b0:	af00      	add	r7, sp, #0
    d8b2:	4603      	mov	r3, r0
    d8b4:	603a      	str	r2, [r7, #0]
    d8b6:	71fb      	strb	r3, [r7, #7]
    d8b8:	460b      	mov	r3, r1
    d8ba:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d8bc:	4b08      	ldr	r3, [pc, #32]	; (d8e0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d8be:	681b      	ldr	r3, [r3, #0]
    d8c0:	2201      	movs	r2, #1
    d8c2:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    d8c4:	4b06      	ldr	r3, [pc, #24]	; (d8e0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d8c6:	681b      	ldr	r3, [r3, #0]
    d8c8:	2201      	movs	r2, #1
    d8ca:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d8cc:	4b04      	ldr	r3, [pc, #16]	; (d8e0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d8ce:	681b      	ldr	r3, [r3, #0]
    d8d0:	2201      	movs	r2, #1
    d8d2:	741a      	strb	r2, [r3, #16]


	return false;
    d8d4:	2300      	movs	r3, #0
}
    d8d6:	4618      	mov	r0, r3
    d8d8:	370c      	adds	r7, #12
    d8da:	46bd      	mov	sp, r7
    d8dc:	bc80      	pop	{r7}
    d8de:	4770      	bx	lr
    d8e0:	20001414 	.word	0x20001414

0000d8e4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d8e4:	b480      	push	{r7}
    d8e6:	b083      	sub	sp, #12
    d8e8:	af00      	add	r7, sp, #0
    d8ea:	4603      	mov	r3, r0
    d8ec:	603a      	str	r2, [r7, #0]
    d8ee:	71fb      	strb	r3, [r7, #7]
    d8f0:	460b      	mov	r3, r1
    d8f2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d8f4:	4b08      	ldr	r3, [pc, #32]	; (d918 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d8f6:	681b      	ldr	r3, [r3, #0]
    d8f8:	2201      	movs	r2, #1
    d8fa:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    d8fc:	4b06      	ldr	r3, [pc, #24]	; (d918 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d8fe:	681b      	ldr	r3, [r3, #0]
    d900:	2201      	movs	r2, #1
    d902:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d904:	4b04      	ldr	r3, [pc, #16]	; (d918 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d906:	681b      	ldr	r3, [r3, #0]
    d908:	2201      	movs	r2, #1
    d90a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    d90c:	2300      	movs	r3, #0
}
    d90e:	4618      	mov	r0, r3
    d910:	370c      	adds	r7, #12
    d912:	46bd      	mov	sp, r7
    d914:	bc80      	pop	{r7}
    d916:	4770      	bx	lr
    d918:	20001414 	.word	0x20001414

0000d91c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    d91c:	b580      	push	{r7, lr}
    d91e:	b082      	sub	sp, #8
    d920:	af00      	add	r7, sp, #0
    d922:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    d924:	793b      	ldrb	r3, [r7, #4]
    d926:	f003 0301 	and.w	r3, r3, #1
    d92a:	b2db      	uxtb	r3, r3
    d92c:	2b00      	cmp	r3, #0
    d92e:	d013      	beq.n	d958 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    d930:	490c      	ldr	r1, [pc, #48]	; (d964 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    d932:	2000      	movs	r0, #0
    d934:	4b0c      	ldr	r3, [pc, #48]	; (d968 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d936:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    d938:	490c      	ldr	r1, [pc, #48]	; (d96c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    d93a:	2001      	movs	r0, #1
    d93c:	4b0a      	ldr	r3, [pc, #40]	; (d968 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d93e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    d940:	4b0b      	ldr	r3, [pc, #44]	; (d970 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d942:	681b      	ldr	r3, [r3, #0]
    d944:	2201      	movs	r2, #1
    d946:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    d948:	4b09      	ldr	r3, [pc, #36]	; (d970 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d94a:	681b      	ldr	r3, [r3, #0]
    d94c:	2201      	movs	r2, #1
    d94e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    d950:	4b07      	ldr	r3, [pc, #28]	; (d970 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d952:	681b      	ldr	r3, [r3, #0]
    d954:	2201      	movs	r2, #1
    d956:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    d958:	2300      	movs	r3, #0
}
    d95a:	4618      	mov	r0, r3
    d95c:	3708      	adds	r7, #8
    d95e:	46bd      	mov	sp, r7
    d960:	bd80      	pop	{r7, pc}
    d962:	bf00      	nop
    d964:	0000d8ad 	.word	0x0000d8ad
    d968:	0000bdf1 	.word	0x0000bdf1
    d96c:	0000d8e5 	.word	0x0000d8e5
    d970:	20001414 	.word	0x20001414

0000d974 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    d974:	b580      	push	{r7, lr}
    d976:	b082      	sub	sp, #8
    d978:	af00      	add	r7, sp, #0
    d97a:	6078      	str	r0, [r7, #4]
    d97c:	687b      	ldr	r3, [r7, #4]
    d97e:	4618      	mov	r0, r3
    d980:	4b0a      	ldr	r3, [pc, #40]	; (d9ac <_ZN9CDC_ClassC1Ev+0x38>)
    d982:	4798      	blx	r3
    d984:	687b      	ldr	r3, [r7, #4]
    d986:	3310      	adds	r3, #16
    d988:	4618      	mov	r0, r3
    d98a:	4b09      	ldr	r3, [pc, #36]	; (d9b0 <_ZN9CDC_ClassC1Ev+0x3c>)
    d98c:	4798      	blx	r3
    d98e:	4a09      	ldr	r2, [pc, #36]	; (d9b4 <_ZN9CDC_ClassC1Ev+0x40>)
    d990:	687b      	ldr	r3, [r7, #4]
    d992:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    d994:	687b      	ldr	r3, [r7, #4]
    d996:	f04f 32ff 	mov.w	r2, #4294967295
    d99a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    d99c:	4a06      	ldr	r2, [pc, #24]	; (d9b8 <_ZN9CDC_ClassC1Ev+0x44>)
    d99e:	687b      	ldr	r3, [r7, #4]
    d9a0:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	4618      	mov	r0, r3
    d9a6:	3708      	adds	r7, #8
    d9a8:	46bd      	mov	sp, r7
    d9aa:	bd80      	pop	{r7, pc}
    d9ac:	0000d855 	.word	0x0000d855
    d9b0:	0000e27d 	.word	0x0000e27d
    d9b4:	0000f170 	.word	0x0000f170
    d9b8:	20001414 	.word	0x20001414

0000d9bc <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    d9bc:	b580      	push	{r7, lr}
    d9be:	b082      	sub	sp, #8
    d9c0:	af00      	add	r7, sp, #0
    d9c2:	6078      	str	r0, [r7, #4]
    d9c4:	4a06      	ldr	r2, [pc, #24]	; (d9e0 <_ZN9CDC_ClassD1Ev+0x24>)
    d9c6:	687b      	ldr	r3, [r7, #4]
    d9c8:	601a      	str	r2, [r3, #0]
    d9ca:	687b      	ldr	r3, [r7, #4]
    d9cc:	3310      	adds	r3, #16
    d9ce:	4618      	mov	r0, r3
    d9d0:	4b04      	ldr	r3, [pc, #16]	; (d9e4 <_ZN9CDC_ClassD1Ev+0x28>)
    d9d2:	4798      	blx	r3
{
} //~CDC_Class
    d9d4:	687b      	ldr	r3, [r7, #4]
    d9d6:	4618      	mov	r0, r3
    d9d8:	3708      	adds	r7, #8
    d9da:	46bd      	mov	sp, r7
    d9dc:	bd80      	pop	{r7, pc}
    d9de:	bf00      	nop
    d9e0:	0000f170 	.word	0x0000f170
    d9e4:	0000e29d 	.word	0x0000e29d

0000d9e8 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    d9e8:	b580      	push	{r7, lr}
    d9ea:	b082      	sub	sp, #8
    d9ec:	af00      	add	r7, sp, #0
    d9ee:	6078      	str	r0, [r7, #4]
	
	OnInit();
    d9f0:	687b      	ldr	r3, [r7, #4]
    d9f2:	3310      	adds	r3, #16
    d9f4:	4618      	mov	r0, r3
    d9f6:	4b09      	ldr	r3, [pc, #36]	; (da1c <_ZN9CDC_Class4InitEv+0x34>)
    d9f8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    d9fa:	4909      	ldr	r1, [pc, #36]	; (da20 <_ZN9CDC_Class4InitEv+0x38>)
    d9fc:	2003      	movs	r0, #3
    d9fe:	4b09      	ldr	r3, [pc, #36]	; (da24 <_ZN9CDC_Class4InitEv+0x3c>)
    da00:	4798      	blx	r3
	delay_ms(100);
    da02:	2064      	movs	r0, #100	; 0x64
    da04:	4b08      	ldr	r3, [pc, #32]	; (da28 <_ZN9CDC_Class4InitEv+0x40>)
    da06:	4798      	blx	r3
		
	if (connected)
    da08:	687b      	ldr	r3, [r7, #4]
    da0a:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    da0c:	2064      	movs	r0, #100	; 0x64
    da0e:	4b06      	ldr	r3, [pc, #24]	; (da28 <_ZN9CDC_Class4InitEv+0x40>)
    da10:	4798      	blx	r3

	

}
    da12:	bf00      	nop
    da14:	3708      	adds	r7, #8
    da16:	46bd      	mov	sp, r7
    da18:	bd80      	pop	{r7, pc}
    da1a:	bf00      	nop
    da1c:	0000e2b1 	.word	0x0000e2b1
    da20:	0000d91d 	.word	0x0000d91d
    da24:	0000bdf1 	.word	0x0000bdf1
    da28:	00001e81 	.word	0x00001e81

0000da2c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    da2c:	b580      	push	{r7, lr}
    da2e:	b082      	sub	sp, #8
    da30:	af00      	add	r7, sp, #0
    da32:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    da34:	4b03      	ldr	r3, [pc, #12]	; (da44 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    da36:	4798      	blx	r3
    da38:	4603      	mov	r3, r0
	
}
    da3a:	4618      	mov	r0, r3
    da3c:	3708      	adds	r7, #8
    da3e:	46bd      	mov	sp, r7
    da40:	bd80      	pop	{r7, pc}
    da42:	bf00      	nop
    da44:	0000be69 	.word	0x0000be69

0000da48 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    da48:	b580      	push	{r7, lr}
    da4a:	b084      	sub	sp, #16
    da4c:	af00      	add	r7, sp, #0
    da4e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    da50:	687b      	ldr	r3, [r7, #4]
    da52:	699b      	ldr	r3, [r3, #24]
    da54:	f1b3 3fff 	cmp.w	r3, #4294967295
    da58:	bf14      	ite	ne
    da5a:	2301      	movne	r3, #1
    da5c:	2300      	moveq	r3, #0
    da5e:	b2db      	uxtb	r3, r3
    da60:	2b00      	cmp	r3, #0
    da62:	d002      	beq.n	da6a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    da64:	687b      	ldr	r3, [r7, #4]
    da66:	699b      	ldr	r3, [r3, #24]
    da68:	e011      	b.n	da8e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    da6a:	687b      	ldr	r3, [r7, #4]
    da6c:	681b      	ldr	r3, [r3, #0]
    da6e:	331c      	adds	r3, #28
    da70:	681b      	ldr	r3, [r3, #0]
    da72:	f107 010f 	add.w	r1, r7, #15
    da76:	2201      	movs	r2, #1
    da78:	6878      	ldr	r0, [r7, #4]
    da7a:	4798      	blx	r3
    da7c:	4602      	mov	r2, r0
    da7e:	687b      	ldr	r3, [r7, #4]
    da80:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    da82:	7bfb      	ldrb	r3, [r7, #15]
    da84:	461a      	mov	r2, r3
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    da8a:	687b      	ldr	r3, [r7, #4]
    da8c:	699b      	ldr	r3, [r3, #24]
}
    da8e:	4618      	mov	r0, r3
    da90:	3710      	adds	r7, #16
    da92:	46bd      	mov	sp, r7
    da94:	bd80      	pop	{r7, pc}
	...

0000da98 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    da98:	b580      	push	{r7, lr}
    da9a:	b086      	sub	sp, #24
    da9c:	af00      	add	r7, sp, #0
    da9e:	60f8      	str	r0, [r7, #12]
    daa0:	60b9      	str	r1, [r7, #8]
    daa2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    daa4:	68fb      	ldr	r3, [r7, #12]
    daa6:	7c1b      	ldrb	r3, [r3, #16]
    daa8:	b2db      	uxtb	r3, r3
    daaa:	2b00      	cmp	r3, #0
    daac:	d02e      	beq.n	db0c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    daae:	687a      	ldr	r2, [r7, #4]
    dab0:	4613      	mov	r3, r2
    dab2:	009b      	lsls	r3, r3, #2
    dab4:	4413      	add	r3, r2
    dab6:	005b      	lsls	r3, r3, #1
    dab8:	461a      	mov	r2, r3
    daba:	4918      	ldr	r1, [pc, #96]	; (db1c <_ZN9CDC_Class8readDataEPvl+0x84>)
    dabc:	4818      	ldr	r0, [pc, #96]	; (db20 <_ZN9CDC_Class8readDataEPvl+0x88>)
    dabe:	4b19      	ldr	r3, [pc, #100]	; (db24 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    dac0:	4798      	blx	r3
		rxReady=false;
    dac2:	68fb      	ldr	r3, [r7, #12]
    dac4:	2200      	movs	r2, #0
    dac6:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    dac8:	687b      	ldr	r3, [r7, #4]
    daca:	4619      	mov	r1, r3
    dacc:	68b8      	ldr	r0, [r7, #8]
    dace:	4b16      	ldr	r3, [pc, #88]	; (db28 <_ZN9CDC_Class8readDataEPvl+0x90>)
    dad0:	4798      	blx	r3
    dad2:	4603      	mov	r3, r0
    dad4:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    dad6:	68fb      	ldr	r3, [r7, #12]
    dad8:	7d5b      	ldrb	r3, [r3, #21]
    dada:	b2db      	uxtb	r3, r3
    dadc:	f083 0301 	eor.w	r3, r3, #1
    dae0:	b2db      	uxtb	r3, r3
    dae2:	2b00      	cmp	r3, #0
    dae4:	d006      	beq.n	daf4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    dae6:	68fb      	ldr	r3, [r7, #12]
    dae8:	7c1b      	ldrb	r3, [r3, #16]
    daea:	b2db      	uxtb	r3, r3
    daec:	2b00      	cmp	r3, #0
    daee:	d001      	beq.n	daf4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    daf0:	2301      	movs	r3, #1
    daf2:	e000      	b.n	daf6 <_ZN9CDC_Class8readDataEPvl+0x5e>
    daf4:	2300      	movs	r3, #0
    daf6:	2b00      	cmp	r3, #0
    daf8:	d000      	beq.n	dafc <_ZN9CDC_Class8readDataEPvl+0x64>
    dafa:	e7ec      	b.n	dad6 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    dafc:	4808      	ldr	r0, [pc, #32]	; (db20 <_ZN9CDC_Class8readDataEPvl+0x88>)
    dafe:	4b0b      	ldr	r3, [pc, #44]	; (db2c <_ZN9CDC_Class8readDataEPvl+0x94>)
    db00:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    db02:	4906      	ldr	r1, [pc, #24]	; (db1c <_ZN9CDC_Class8readDataEPvl+0x84>)
    db04:	4806      	ldr	r0, [pc, #24]	; (db20 <_ZN9CDC_Class8readDataEPvl+0x88>)
    db06:	4b0a      	ldr	r3, [pc, #40]	; (db30 <_ZN9CDC_Class8readDataEPvl+0x98>)
    db08:	4798      	blx	r3
    db0a:	e001      	b.n	db10 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    db0c:	2300      	movs	r3, #0
    db0e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    db10:	7dfb      	ldrb	r3, [r7, #23]
}
    db12:	4618      	mov	r0, r3
    db14:	3718      	adds	r7, #24
    db16:	46bd      	mov	sp, r7
    db18:	bd80      	pop	{r7, pc}
    db1a:	bf00      	nop
    db1c:	0000d885 	.word	0x0000d885
    db20:	200013b4 	.word	0x200013b4
    db24:	0000d55d 	.word	0x0000d55d
    db28:	0000bd45 	.word	0x0000bd45
    db2c:	0000d489 	.word	0x0000d489
    db30:	0000d505 	.word	0x0000d505

0000db34 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    db34:	b580      	push	{r7, lr}
    db36:	b084      	sub	sp, #16
    db38:	af00      	add	r7, sp, #0
    db3a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    db3c:	687b      	ldr	r3, [r7, #4]
    db3e:	2200      	movs	r2, #0
    db40:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    db42:	f107 030f 	add.w	r3, r7, #15
    db46:	2101      	movs	r1, #1
    db48:	4618      	mov	r0, r3
    db4a:	4b08      	ldr	r3, [pc, #32]	; (db6c <_ZN9CDC_Class4readEv+0x38>)
    db4c:	4798      	blx	r3
	while(!rxReady);
    db4e:	687b      	ldr	r3, [r7, #4]
    db50:	7d5b      	ldrb	r3, [r3, #21]
    db52:	b2db      	uxtb	r3, r3
    db54:	f083 0301 	eor.w	r3, r3, #1
    db58:	b2db      	uxtb	r3, r3
    db5a:	2b00      	cmp	r3, #0
    db5c:	d000      	beq.n	db60 <_ZN9CDC_Class4readEv+0x2c>
    db5e:	e7f6      	b.n	db4e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    db60:	7bfb      	ldrb	r3, [r7, #15]
}
    db62:	4618      	mov	r0, r3
    db64:	3710      	adds	r7, #16
    db66:	46bd      	mov	sp, r7
    db68:	bd80      	pop	{r7, pc}
    db6a:	bf00      	nop
    db6c:	0000bd45 	.word	0x0000bd45

0000db70 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    db70:	b580      	push	{r7, lr}
    db72:	b082      	sub	sp, #8
    db74:	af00      	add	r7, sp, #0
    db76:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    db78:	687b      	ldr	r3, [r7, #4]
    db7a:	331c      	adds	r3, #28
    db7c:	2140      	movs	r1, #64	; 0x40
    db7e:	4618      	mov	r0, r3
    db80:	4b02      	ldr	r3, [pc, #8]	; (db8c <_ZN9CDC_Class5flushEv+0x1c>)
    db82:	4798      	blx	r3
}
    db84:	bf00      	nop
    db86:	3708      	adds	r7, #8
    db88:	46bd      	mov	sp, r7
    db8a:	bd80      	pop	{r7, pc}
    db8c:	0000bd89 	.word	0x0000bd89

0000db90 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    db90:	b580      	push	{r7, lr}
    db92:	b082      	sub	sp, #8
    db94:	af00      	add	r7, sp, #0
    db96:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    db98:	4b02      	ldr	r3, [pc, #8]	; (dba4 <_ZN9CDC_Class5clearEv+0x14>)
    db9a:	4798      	blx	r3
}
    db9c:	bf00      	nop
    db9e:	3708      	adds	r7, #8
    dba0:	46bd      	mov	sp, r7
    dba2:	bd80      	pop	{r7, pc}
    dba4:	0000bdcd 	.word	0x0000bdcd

0000dba8 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    dba8:	b580      	push	{r7, lr}
    dbaa:	b082      	sub	sp, #8
    dbac:	af00      	add	r7, sp, #0
    dbae:	6078      	str	r0, [r7, #4]
    dbb0:	460b      	mov	r3, r1
    dbb2:	70fb      	strb	r3, [r7, #3]
	if (connected){
    dbb4:	687b      	ldr	r3, [r7, #4]
    dbb6:	7c1b      	ldrb	r3, [r3, #16]
    dbb8:	b2db      	uxtb	r3, r3
    dbba:	2b00      	cmp	r3, #0
    dbbc:	d012      	beq.n	dbe4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    dbbe:	687b      	ldr	r3, [r7, #4]
    dbc0:	7d1b      	ldrb	r3, [r3, #20]
    dbc2:	b2db      	uxtb	r3, r3
    dbc4:	f083 0301 	eor.w	r3, r3, #1
    dbc8:	b2db      	uxtb	r3, r3
    dbca:	2b00      	cmp	r3, #0
    dbcc:	d000      	beq.n	dbd0 <_ZN9CDC_Class5writeEh+0x28>
    dbce:	e7f6      	b.n	dbbe <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	681b      	ldr	r3, [r3, #0]
    dbd4:	3324      	adds	r3, #36	; 0x24
    dbd6:	681b      	ldr	r3, [r3, #0]
    dbd8:	1cf9      	adds	r1, r7, #3
    dbda:	2201      	movs	r2, #1
    dbdc:	6878      	ldr	r0, [r7, #4]
    dbde:	4798      	blx	r3
    dbe0:	4603      	mov	r3, r0
    dbe2:	e000      	b.n	dbe6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    dbe4:	2300      	movs	r3, #0
	}
		
}
    dbe6:	4618      	mov	r0, r3
    dbe8:	3708      	adds	r7, #8
    dbea:	46bd      	mov	sp, r7
    dbec:	bd80      	pop	{r7, pc}
	...

0000dbf0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b086      	sub	sp, #24
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	60f8      	str	r0, [r7, #12]
    dbf8:	60b9      	str	r1, [r7, #8]
    dbfa:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    dbfc:	68fb      	ldr	r3, [r7, #12]
    dbfe:	7c1b      	ldrb	r3, [r3, #16]
    dc00:	b2db      	uxtb	r3, r3
    dc02:	2b00      	cmp	r3, #0
    dc04:	d02f      	beq.n	dc66 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dc06:	687a      	ldr	r2, [r7, #4]
    dc08:	4613      	mov	r3, r2
    dc0a:	009b      	lsls	r3, r3, #2
    dc0c:	4413      	add	r3, r2
    dc0e:	005b      	lsls	r3, r3, #1
    dc10:	461a      	mov	r2, r3
    dc12:	4917      	ldr	r1, [pc, #92]	; (dc70 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dc14:	4817      	ldr	r0, [pc, #92]	; (dc74 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dc16:	4b18      	ldr	r3, [pc, #96]	; (dc78 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    dc18:	4798      	blx	r3
		txReady=false;
    dc1a:	68fb      	ldr	r3, [r7, #12]
    dc1c:	2200      	movs	r2, #0
    dc1e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dc20:	687b      	ldr	r3, [r7, #4]
    dc22:	4619      	mov	r1, r3
    dc24:	68b8      	ldr	r0, [r7, #8]
    dc26:	4b15      	ldr	r3, [pc, #84]	; (dc7c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    dc28:	4798      	blx	r3
    dc2a:	4603      	mov	r3, r0
    dc2c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    dc2e:	68fb      	ldr	r3, [r7, #12]
    dc30:	7d1b      	ldrb	r3, [r3, #20]
    dc32:	b2db      	uxtb	r3, r3
    dc34:	f083 0301 	eor.w	r3, r3, #1
    dc38:	b2db      	uxtb	r3, r3
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d006      	beq.n	dc4c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dc3e:	68fb      	ldr	r3, [r7, #12]
    dc40:	7c1b      	ldrb	r3, [r3, #16]
    dc42:	b2db      	uxtb	r3, r3
    dc44:	2b00      	cmp	r3, #0
    dc46:	d001      	beq.n	dc4c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dc48:	2301      	movs	r3, #1
    dc4a:	e000      	b.n	dc4e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    dc4c:	2300      	movs	r3, #0
    dc4e:	2b00      	cmp	r3, #0
    dc50:	d000      	beq.n	dc54 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    dc52:	e7ec      	b.n	dc2e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    dc54:	4807      	ldr	r0, [pc, #28]	; (dc74 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dc56:	4b0a      	ldr	r3, [pc, #40]	; (dc80 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    dc58:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dc5a:	4905      	ldr	r1, [pc, #20]	; (dc70 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dc5c:	4805      	ldr	r0, [pc, #20]	; (dc74 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dc5e:	4b09      	ldr	r3, [pc, #36]	; (dc84 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    dc60:	4798      	blx	r3
		return r;
    dc62:	697b      	ldr	r3, [r7, #20]
    dc64:	e000      	b.n	dc68 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    dc66:	2300      	movs	r3, #0
	}
	

}
    dc68:	4618      	mov	r0, r3
    dc6a:	3718      	adds	r7, #24
    dc6c:	46bd      	mov	sp, r7
    dc6e:	bd80      	pop	{r7, pc}
    dc70:	0000d885 	.word	0x0000d885
    dc74:	200013b4 	.word	0x200013b4
    dc78:	0000d55d 	.word	0x0000d55d
    dc7c:	0000bd89 	.word	0x0000bd89
    dc80:	0000d489 	.word	0x0000d489
    dc84:	0000d505 	.word	0x0000d505

0000dc88 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    dc88:	b580      	push	{r7, lr}
    dc8a:	b086      	sub	sp, #24
    dc8c:	af00      	add	r7, sp, #0
    dc8e:	60f8      	str	r0, [r7, #12]
    dc90:	60b9      	str	r1, [r7, #8]
    dc92:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    dc94:	68fb      	ldr	r3, [r7, #12]
    dc96:	2200      	movs	r2, #0
    dc98:	751a      	strb	r2, [r3, #20]

 	if (connected){
    dc9a:	68fb      	ldr	r3, [r7, #12]
    dc9c:	7c1b      	ldrb	r3, [r3, #16]
    dc9e:	b2db      	uxtb	r3, r3
    dca0:	2b00      	cmp	r3, #0
    dca2:	d02a      	beq.n	dcfa <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dca4:	687a      	ldr	r2, [r7, #4]
    dca6:	4613      	mov	r3, r2
    dca8:	009b      	lsls	r3, r3, #2
    dcaa:	4413      	add	r3, r2
    dcac:	005b      	lsls	r3, r3, #1
    dcae:	461a      	mov	r2, r3
    dcb0:	4915      	ldr	r1, [pc, #84]	; (dd08 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dcb2:	4816      	ldr	r0, [pc, #88]	; (dd0c <_ZN9CDC_Class5writeEPKhj+0x84>)
    dcb4:	4b16      	ldr	r3, [pc, #88]	; (dd10 <_ZN9CDC_Class5writeEPKhj+0x88>)
    dcb6:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dcb8:	6879      	ldr	r1, [r7, #4]
    dcba:	68b8      	ldr	r0, [r7, #8]
    dcbc:	4b15      	ldr	r3, [pc, #84]	; (dd14 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    dcbe:	4798      	blx	r3
    dcc0:	4603      	mov	r3, r0
    dcc2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    dcc4:	68fb      	ldr	r3, [r7, #12]
    dcc6:	7d1b      	ldrb	r3, [r3, #20]
    dcc8:	b2db      	uxtb	r3, r3
    dcca:	f083 0301 	eor.w	r3, r3, #1
    dcce:	b2db      	uxtb	r3, r3
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	d006      	beq.n	dce2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    dcd4:	68fb      	ldr	r3, [r7, #12]
    dcd6:	7c1b      	ldrb	r3, [r3, #16]
    dcd8:	b2db      	uxtb	r3, r3
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d001      	beq.n	dce2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    dcde:	2301      	movs	r3, #1
    dce0:	e000      	b.n	dce4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    dce2:	2300      	movs	r3, #0
    dce4:	2b00      	cmp	r3, #0
    dce6:	d000      	beq.n	dcea <_ZN9CDC_Class5writeEPKhj+0x62>
    dce8:	e7ec      	b.n	dcc4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    dcea:	4808      	ldr	r0, [pc, #32]	; (dd0c <_ZN9CDC_Class5writeEPKhj+0x84>)
    dcec:	4b0a      	ldr	r3, [pc, #40]	; (dd18 <_ZN9CDC_Class5writeEPKhj+0x90>)
    dcee:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dcf0:	4905      	ldr	r1, [pc, #20]	; (dd08 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dcf2:	4806      	ldr	r0, [pc, #24]	; (dd0c <_ZN9CDC_Class5writeEPKhj+0x84>)
    dcf4:	4b09      	ldr	r3, [pc, #36]	; (dd1c <_ZN9CDC_Class5writeEPKhj+0x94>)
    dcf6:	4798      	blx	r3
    dcf8:	e001      	b.n	dcfe <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    dcfa:	2300      	movs	r3, #0
    dcfc:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    dcfe:	697b      	ldr	r3, [r7, #20]
}
    dd00:	4618      	mov	r0, r3
    dd02:	3718      	adds	r7, #24
    dd04:	46bd      	mov	sp, r7
    dd06:	bd80      	pop	{r7, pc}
    dd08:	0000d885 	.word	0x0000d885
    dd0c:	200013b4 	.word	0x200013b4
    dd10:	0000d55d 	.word	0x0000d55d
    dd14:	0000bd89 	.word	0x0000bd89
    dd18:	0000d489 	.word	0x0000d489
    dd1c:	0000d505 	.word	0x0000d505

0000dd20 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    dd20:	b480      	push	{r7}
    dd22:	b083      	sub	sp, #12
    dd24:	af00      	add	r7, sp, #0
    dd26:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    dd28:	687b      	ldr	r3, [r7, #4]
    dd2a:	7d5b      	ldrb	r3, [r3, #21]
    dd2c:	b2db      	uxtb	r3, r3
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d006      	beq.n	dd40 <_ZN9CDC_Class9availableEv+0x20>
    dd32:	687b      	ldr	r3, [r7, #4]
    dd34:	7d1b      	ldrb	r3, [r3, #20]
    dd36:	b2db      	uxtb	r3, r3
    dd38:	2b00      	cmp	r3, #0
    dd3a:	d001      	beq.n	dd40 <_ZN9CDC_Class9availableEv+0x20>
    dd3c:	2301      	movs	r3, #1
    dd3e:	e000      	b.n	dd42 <_ZN9CDC_Class9availableEv+0x22>
    dd40:	2300      	movs	r3, #0
    dd42:	2b00      	cmp	r3, #0
    dd44:	d001      	beq.n	dd4a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    dd46:	2301      	movs	r3, #1
    dd48:	e000      	b.n	dd4c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    dd4a:	2300      	movs	r3, #0
	}
	
}
    dd4c:	4618      	mov	r0, r3
    dd4e:	370c      	adds	r7, #12
    dd50:	46bd      	mov	sp, r7
    dd52:	bc80      	pop	{r7}
    dd54:	4770      	bx	lr
	...

0000dd58 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    dd58:	b580      	push	{r7, lr}
    dd5a:	b082      	sub	sp, #8
    dd5c:	af00      	add	r7, sp, #0
    dd5e:	6078      	str	r0, [r7, #4]
    dd60:	6039      	str	r1, [r7, #0]
    dd62:	687b      	ldr	r3, [r7, #4]
    dd64:	2b01      	cmp	r3, #1
    dd66:	d154      	bne.n	de12 <_Z41__static_initialization_and_destruction_0ii+0xba>
    dd68:	683b      	ldr	r3, [r7, #0]
    dd6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd6e:	4293      	cmp	r3, r2
    dd70:	d14f      	bne.n	de12 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dd72:	492a      	ldr	r1, [pc, #168]	; (de1c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd74:	482a      	ldr	r0, [pc, #168]	; (de20 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd76:	4b2b      	ldr	r3, [pc, #172]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd78:	4798      	blx	r3
    dd7a:	4a2b      	ldr	r2, [pc, #172]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd7c:	492b      	ldr	r1, [pc, #172]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd7e:	4828      	ldr	r0, [pc, #160]	; (de20 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd80:	4b2b      	ldr	r3, [pc, #172]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd82:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    dd84:	492b      	ldr	r1, [pc, #172]	; (de34 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    dd86:	482c      	ldr	r0, [pc, #176]	; (de38 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd88:	4b26      	ldr	r3, [pc, #152]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd8a:	4798      	blx	r3
    dd8c:	4a26      	ldr	r2, [pc, #152]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd8e:	4927      	ldr	r1, [pc, #156]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd90:	4829      	ldr	r0, [pc, #164]	; (de38 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd92:	4b27      	ldr	r3, [pc, #156]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd94:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    dd96:	4929      	ldr	r1, [pc, #164]	; (de3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    dd98:	4829      	ldr	r0, [pc, #164]	; (de40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dd9a:	4b22      	ldr	r3, [pc, #136]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd9c:	4798      	blx	r3
    dd9e:	4a22      	ldr	r2, [pc, #136]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dda0:	4922      	ldr	r1, [pc, #136]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dda2:	4827      	ldr	r0, [pc, #156]	; (de40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dda4:	4b22      	ldr	r3, [pc, #136]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dda6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    dda8:	4926      	ldr	r1, [pc, #152]	; (de44 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ddaa:	4827      	ldr	r0, [pc, #156]	; (de48 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ddac:	4b1d      	ldr	r3, [pc, #116]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ddae:	4798      	blx	r3
    ddb0:	4a1d      	ldr	r2, [pc, #116]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ddb2:	491e      	ldr	r1, [pc, #120]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ddb4:	4824      	ldr	r0, [pc, #144]	; (de48 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ddb6:	4b1e      	ldr	r3, [pc, #120]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ddb8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ddba:	4924      	ldr	r1, [pc, #144]	; (de4c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ddbc:	4824      	ldr	r0, [pc, #144]	; (de50 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ddbe:	4b19      	ldr	r3, [pc, #100]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ddc0:	4798      	blx	r3
    ddc2:	4a19      	ldr	r2, [pc, #100]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ddc4:	4919      	ldr	r1, [pc, #100]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ddc6:	4822      	ldr	r0, [pc, #136]	; (de50 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ddc8:	4b19      	ldr	r3, [pc, #100]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ddca:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ddcc:	4921      	ldr	r1, [pc, #132]	; (de54 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ddce:	4822      	ldr	r0, [pc, #136]	; (de58 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ddd0:	4b14      	ldr	r3, [pc, #80]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ddd2:	4798      	blx	r3
    ddd4:	4a14      	ldr	r2, [pc, #80]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ddd6:	4915      	ldr	r1, [pc, #84]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ddd8:	481f      	ldr	r0, [pc, #124]	; (de58 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ddda:	4b15      	ldr	r3, [pc, #84]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dddc:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ddde:	491f      	ldr	r1, [pc, #124]	; (de5c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    dde0:	481f      	ldr	r0, [pc, #124]	; (de60 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    dde2:	4b10      	ldr	r3, [pc, #64]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dde4:	4798      	blx	r3
    dde6:	4a10      	ldr	r2, [pc, #64]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dde8:	4910      	ldr	r1, [pc, #64]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ddea:	481d      	ldr	r0, [pc, #116]	; (de60 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    ddec:	4b10      	ldr	r3, [pc, #64]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ddee:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ddf0:	491c      	ldr	r1, [pc, #112]	; (de64 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    ddf2:	481d      	ldr	r0, [pc, #116]	; (de68 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    ddf4:	4b0b      	ldr	r3, [pc, #44]	; (de24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ddf6:	4798      	blx	r3
    ddf8:	4a0b      	ldr	r2, [pc, #44]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ddfa:	490c      	ldr	r1, [pc, #48]	; (de2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ddfc:	481a      	ldr	r0, [pc, #104]	; (de68 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    ddfe:	4b0c      	ldr	r3, [pc, #48]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    de00:	4798      	blx	r3
    de02:	481a      	ldr	r0, [pc, #104]	; (de6c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    de04:	4b1a      	ldr	r3, [pc, #104]	; (de70 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    de06:	4798      	blx	r3
    de08:	4a07      	ldr	r2, [pc, #28]	; (de28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    de0a:	491a      	ldr	r1, [pc, #104]	; (de74 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    de0c:	4817      	ldr	r0, [pc, #92]	; (de6c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    de0e:	4b08      	ldr	r3, [pc, #32]	; (de30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    de10:	4798      	blx	r3
    de12:	bf00      	nop
    de14:	3708      	adds	r7, #8
    de16:	46bd      	mov	sp, r7
    de18:	bd80      	pop	{r7, pc}
    de1a:	bf00      	nop
    de1c:	200015f4 	.word	0x200015f4
    de20:	20001314 	.word	0x20001314
    de24:	0000d329 	.word	0x0000d329
    de28:	20000000 	.word	0x20000000
    de2c:	0000d361 	.word	0x0000d361
    de30:	0000e8b5 	.word	0x0000e8b5
    de34:	20001688 	.word	0x20001688
    de38:	20001334 	.word	0x20001334
    de3c:	200017ac 	.word	0x200017ac
    de40:	20001354 	.word	0x20001354
    de44:	200016a8 	.word	0x200016a8
    de48:	20001374 	.word	0x20001374
    de4c:	2000176c 	.word	0x2000176c
    de50:	20001394 	.word	0x20001394
    de54:	2000178c 	.word	0x2000178c
    de58:	200013b4 	.word	0x200013b4
    de5c:	20001664 	.word	0x20001664
    de60:	200013d4 	.word	0x200013d4
    de64:	20001704 	.word	0x20001704
    de68:	200013f4 	.word	0x200013f4
    de6c:	20001418 	.word	0x20001418
    de70:	0000d975 	.word	0x0000d975
    de74:	0000d9bd 	.word	0x0000d9bd

0000de78 <_GLOBAL__sub_I_ptrCDCClass>:
    de78:	b580      	push	{r7, lr}
    de7a:	af00      	add	r7, sp, #0
    de7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de80:	2001      	movs	r0, #1
    de82:	4b01      	ldr	r3, [pc, #4]	; (de88 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    de84:	4798      	blx	r3
    de86:	bd80      	pop	{r7, pc}
    de88:	0000dd59 	.word	0x0000dd59

0000de8c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    de8c:	b590      	push	{r4, r7, lr}
    de8e:	b083      	sub	sp, #12
    de90:	af00      	add	r7, sp, #0
    de92:	6078      	str	r0, [r7, #4]
    de94:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    de96:	683b      	ldr	r3, [r7, #0]
    de98:	2b00      	cmp	r3, #0
    de9a:	d101      	bne.n	dea0 <_ZN5Print5writeEPKc+0x14>
    de9c:	2300      	movs	r3, #0
    de9e:	e00c      	b.n	deba <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    dea0:	687b      	ldr	r3, [r7, #4]
    dea2:	681b      	ldr	r3, [r3, #0]
    dea4:	3304      	adds	r3, #4
    dea6:	681c      	ldr	r4, [r3, #0]
    dea8:	6838      	ldr	r0, [r7, #0]
    deaa:	4b06      	ldr	r3, [pc, #24]	; (dec4 <_ZN5Print5writeEPKc+0x38>)
    deac:	4798      	blx	r3
    deae:	4603      	mov	r3, r0
    deb0:	461a      	mov	r2, r3
    deb2:	6839      	ldr	r1, [r7, #0]
    deb4:	6878      	ldr	r0, [r7, #4]
    deb6:	47a0      	blx	r4
    deb8:	4603      	mov	r3, r0
    }
    deba:	4618      	mov	r0, r3
    debc:	370c      	adds	r7, #12
    debe:	46bd      	mov	sp, r7
    dec0:	bd90      	pop	{r4, r7, pc}
    dec2:	bf00      	nop
    dec4:	0000eb41 	.word	0x0000eb41

0000dec8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    dec8:	b580      	push	{r7, lr}
    deca:	b086      	sub	sp, #24
    decc:	af00      	add	r7, sp, #0
    dece:	60f8      	str	r0, [r7, #12]
    ded0:	60b9      	str	r1, [r7, #8]
    ded2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    ded4:	2300      	movs	r3, #0
    ded6:	617b      	str	r3, [r7, #20]
  while (size--) {
    ded8:	687b      	ldr	r3, [r7, #4]
    deda:	1e5a      	subs	r2, r3, #1
    dedc:	607a      	str	r2, [r7, #4]
    dede:	2b00      	cmp	r3, #0
    dee0:	bf14      	ite	ne
    dee2:	2301      	movne	r3, #1
    dee4:	2300      	moveq	r3, #0
    dee6:	b2db      	uxtb	r3, r3
    dee8:	2b00      	cmp	r3, #0
    deea:	d016      	beq.n	df1a <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    deec:	68fb      	ldr	r3, [r7, #12]
    deee:	681b      	ldr	r3, [r3, #0]
    def0:	681a      	ldr	r2, [r3, #0]
    def2:	68bb      	ldr	r3, [r7, #8]
    def4:	1c59      	adds	r1, r3, #1
    def6:	60b9      	str	r1, [r7, #8]
    def8:	781b      	ldrb	r3, [r3, #0]
    defa:	4619      	mov	r1, r3
    defc:	68f8      	ldr	r0, [r7, #12]
    defe:	4790      	blx	r2
    df00:	4603      	mov	r3, r0
    df02:	2b00      	cmp	r3, #0
    df04:	bf14      	ite	ne
    df06:	2301      	movne	r3, #1
    df08:	2300      	moveq	r3, #0
    df0a:	b2db      	uxtb	r3, r3
    df0c:	2b00      	cmp	r3, #0
    df0e:	d003      	beq.n	df18 <_ZN5Print5writeEPKhj+0x50>
    df10:	697b      	ldr	r3, [r7, #20]
    df12:	3301      	adds	r3, #1
    df14:	617b      	str	r3, [r7, #20]
  while (size--) {
    df16:	e7df      	b.n	ded8 <_ZN5Print5writeEPKhj+0x10>
    else break;
    df18:	bf00      	nop
  }
  return n;
    df1a:	697b      	ldr	r3, [r7, #20]
}
    df1c:	4618      	mov	r0, r3
    df1e:	3718      	adds	r7, #24
    df20:	46bd      	mov	sp, r7
    df22:	bd80      	pop	{r7, pc}

0000df24 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    df24:	b580      	push	{r7, lr}
    df26:	b082      	sub	sp, #8
    df28:	af00      	add	r7, sp, #0
    df2a:	6078      	str	r0, [r7, #4]
    df2c:	6039      	str	r1, [r7, #0]
  return write(str);
    df2e:	6839      	ldr	r1, [r7, #0]
    df30:	6878      	ldr	r0, [r7, #4]
    df32:	4b03      	ldr	r3, [pc, #12]	; (df40 <_ZN5Print5printEPKc+0x1c>)
    df34:	4798      	blx	r3
    df36:	4603      	mov	r3, r0
}
    df38:	4618      	mov	r0, r3
    df3a:	3708      	adds	r7, #8
    df3c:	46bd      	mov	sp, r7
    df3e:	bd80      	pop	{r7, pc}
    df40:	0000de8d 	.word	0x0000de8d

0000df44 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    df44:	b580      	push	{r7, lr}
    df46:	b082      	sub	sp, #8
    df48:	af00      	add	r7, sp, #0
    df4a:	6078      	str	r0, [r7, #4]
    df4c:	460b      	mov	r3, r1
    df4e:	70fb      	strb	r3, [r7, #3]
  return write(c);
    df50:	687b      	ldr	r3, [r7, #4]
    df52:	681b      	ldr	r3, [r3, #0]
    df54:	681b      	ldr	r3, [r3, #0]
    df56:	78fa      	ldrb	r2, [r7, #3]
    df58:	4611      	mov	r1, r2
    df5a:	6878      	ldr	r0, [r7, #4]
    df5c:	4798      	blx	r3
    df5e:	4603      	mov	r3, r0
}
    df60:	4618      	mov	r0, r3
    df62:	3708      	adds	r7, #8
    df64:	46bd      	mov	sp, r7
    df66:	bd80      	pop	{r7, pc}

0000df68 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    df68:	b580      	push	{r7, lr}
    df6a:	b084      	sub	sp, #16
    df6c:	af00      	add	r7, sp, #0
    df6e:	60f8      	str	r0, [r7, #12]
    df70:	460b      	mov	r3, r1
    df72:	607a      	str	r2, [r7, #4]
    df74:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    df76:	7afb      	ldrb	r3, [r7, #11]
    df78:	687a      	ldr	r2, [r7, #4]
    df7a:	4619      	mov	r1, r3
    df7c:	68f8      	ldr	r0, [r7, #12]
    df7e:	4b03      	ldr	r3, [pc, #12]	; (df8c <_ZN5Print5printEhi+0x24>)
    df80:	4798      	blx	r3
    df82:	4603      	mov	r3, r0
}
    df84:	4618      	mov	r0, r3
    df86:	3710      	adds	r7, #16
    df88:	46bd      	mov	sp, r7
    df8a:	bd80      	pop	{r7, pc}
    df8c:	0000e03d 	.word	0x0000e03d

0000df90 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    df90:	b580      	push	{r7, lr}
    df92:	b084      	sub	sp, #16
    df94:	af00      	add	r7, sp, #0
    df96:	60f8      	str	r0, [r7, #12]
    df98:	60b9      	str	r1, [r7, #8]
    df9a:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    df9c:	687a      	ldr	r2, [r7, #4]
    df9e:	68b9      	ldr	r1, [r7, #8]
    dfa0:	68f8      	ldr	r0, [r7, #12]
    dfa2:	4b03      	ldr	r3, [pc, #12]	; (dfb0 <_ZN5Print5printEii+0x20>)
    dfa4:	4798      	blx	r3
    dfa6:	4603      	mov	r3, r0
}
    dfa8:	4618      	mov	r0, r3
    dfaa:	3710      	adds	r7, #16
    dfac:	46bd      	mov	sp, r7
    dfae:	bd80      	pop	{r7, pc}
    dfb0:	0000dfb5 	.word	0x0000dfb5

0000dfb4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    dfb4:	b580      	push	{r7, lr}
    dfb6:	b086      	sub	sp, #24
    dfb8:	af00      	add	r7, sp, #0
    dfba:	60f8      	str	r0, [r7, #12]
    dfbc:	60b9      	str	r1, [r7, #8]
    dfbe:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    dfc0:	687b      	ldr	r3, [r7, #4]
    dfc2:	2b00      	cmp	r3, #0
    dfc4:	d109      	bne.n	dfda <_ZN5Print5printEli+0x26>
    return write(n);
    dfc6:	68fb      	ldr	r3, [r7, #12]
    dfc8:	681b      	ldr	r3, [r3, #0]
    dfca:	681b      	ldr	r3, [r3, #0]
    dfcc:	68ba      	ldr	r2, [r7, #8]
    dfce:	b2d2      	uxtb	r2, r2
    dfd0:	4611      	mov	r1, r2
    dfd2:	68f8      	ldr	r0, [r7, #12]
    dfd4:	4798      	blx	r3
    dfd6:	4603      	mov	r3, r0
    dfd8:	e028      	b.n	e02c <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    dfda:	687b      	ldr	r3, [r7, #4]
    dfdc:	2b0a      	cmp	r3, #10
    dfde:	d11d      	bne.n	e01c <_ZN5Print5printEli+0x68>
    if (n < 0) {
    dfe0:	68bb      	ldr	r3, [r7, #8]
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	da12      	bge.n	e00c <_ZN5Print5printEli+0x58>
      int t = print('-');
    dfe6:	212d      	movs	r1, #45	; 0x2d
    dfe8:	68f8      	ldr	r0, [r7, #12]
    dfea:	4b12      	ldr	r3, [pc, #72]	; (e034 <_ZN5Print5printEli+0x80>)
    dfec:	4798      	blx	r3
    dfee:	4603      	mov	r3, r0
    dff0:	617b      	str	r3, [r7, #20]
      n = -n;
    dff2:	68bb      	ldr	r3, [r7, #8]
    dff4:	425b      	negs	r3, r3
    dff6:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    dff8:	68bb      	ldr	r3, [r7, #8]
    dffa:	220a      	movs	r2, #10
    dffc:	4619      	mov	r1, r3
    dffe:	68f8      	ldr	r0, [r7, #12]
    e000:	4b0d      	ldr	r3, [pc, #52]	; (e038 <_ZN5Print5printEli+0x84>)
    e002:	4798      	blx	r3
    e004:	4602      	mov	r2, r0
    e006:	697b      	ldr	r3, [r7, #20]
    e008:	4413      	add	r3, r2
    e00a:	e00f      	b.n	e02c <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    e00c:	68bb      	ldr	r3, [r7, #8]
    e00e:	220a      	movs	r2, #10
    e010:	4619      	mov	r1, r3
    e012:	68f8      	ldr	r0, [r7, #12]
    e014:	4b08      	ldr	r3, [pc, #32]	; (e038 <_ZN5Print5printEli+0x84>)
    e016:	4798      	blx	r3
    e018:	4603      	mov	r3, r0
    e01a:	e007      	b.n	e02c <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    e01c:	68bb      	ldr	r3, [r7, #8]
    e01e:	687a      	ldr	r2, [r7, #4]
    e020:	b2d2      	uxtb	r2, r2
    e022:	4619      	mov	r1, r3
    e024:	68f8      	ldr	r0, [r7, #12]
    e026:	4b04      	ldr	r3, [pc, #16]	; (e038 <_ZN5Print5printEli+0x84>)
    e028:	4798      	blx	r3
    e02a:	4603      	mov	r3, r0
  }
}
    e02c:	4618      	mov	r0, r3
    e02e:	3718      	adds	r7, #24
    e030:	46bd      	mov	sp, r7
    e032:	bd80      	pop	{r7, pc}
    e034:	0000df45 	.word	0x0000df45
    e038:	0000e081 	.word	0x0000e081

0000e03c <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    e03c:	b580      	push	{r7, lr}
    e03e:	b084      	sub	sp, #16
    e040:	af00      	add	r7, sp, #0
    e042:	60f8      	str	r0, [r7, #12]
    e044:	60b9      	str	r1, [r7, #8]
    e046:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    e048:	687b      	ldr	r3, [r7, #4]
    e04a:	2b00      	cmp	r3, #0
    e04c:	d109      	bne.n	e062 <_ZN5Print5printEmi+0x26>
    e04e:	68fb      	ldr	r3, [r7, #12]
    e050:	681b      	ldr	r3, [r3, #0]
    e052:	681b      	ldr	r3, [r3, #0]
    e054:	68ba      	ldr	r2, [r7, #8]
    e056:	b2d2      	uxtb	r2, r2
    e058:	4611      	mov	r1, r2
    e05a:	68f8      	ldr	r0, [r7, #12]
    e05c:	4798      	blx	r3
    e05e:	4603      	mov	r3, r0
    e060:	e007      	b.n	e072 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    e062:	687b      	ldr	r3, [r7, #4]
    e064:	b2db      	uxtb	r3, r3
    e066:	461a      	mov	r2, r3
    e068:	68b9      	ldr	r1, [r7, #8]
    e06a:	68f8      	ldr	r0, [r7, #12]
    e06c:	4b03      	ldr	r3, [pc, #12]	; (e07c <_ZN5Print5printEmi+0x40>)
    e06e:	4798      	blx	r3
    e070:	4603      	mov	r3, r0
}
    e072:	4618      	mov	r0, r3
    e074:	3710      	adds	r7, #16
    e076:	46bd      	mov	sp, r7
    e078:	bd80      	pop	{r7, pc}
    e07a:	bf00      	nop
    e07c:	0000e081 	.word	0x0000e081

0000e080 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e080:	b580      	push	{r7, lr}
    e082:	b08e      	sub	sp, #56	; 0x38
    e084:	af00      	add	r7, sp, #0
    e086:	60f8      	str	r0, [r7, #12]
    e088:	60b9      	str	r1, [r7, #8]
    e08a:	4613      	mov	r3, r2
    e08c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    e08e:	f107 0310 	add.w	r3, r7, #16
    e092:	3320      	adds	r3, #32
    e094:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    e096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e098:	2200      	movs	r2, #0
    e09a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e09c:	79fb      	ldrb	r3, [r7, #7]
    e09e:	2b01      	cmp	r3, #1
    e0a0:	dc01      	bgt.n	e0a6 <_ZN5Print11printNumberEmh+0x26>
    e0a2:	230a      	movs	r3, #10
    e0a4:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    e0a6:	79fa      	ldrb	r2, [r7, #7]
    e0a8:	68bb      	ldr	r3, [r7, #8]
    e0aa:	fbb3 f1f2 	udiv	r1, r3, r2
    e0ae:	fb02 f201 	mul.w	r2, r2, r1
    e0b2:	1a9b      	subs	r3, r3, r2
    e0b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    e0b8:	79fb      	ldrb	r3, [r7, #7]
    e0ba:	68ba      	ldr	r2, [r7, #8]
    e0bc:	fbb2 f3f3 	udiv	r3, r2, r3
    e0c0:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e0c4:	3b01      	subs	r3, #1
    e0c6:	637b      	str	r3, [r7, #52]	; 0x34
    e0c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e0cc:	2b09      	cmp	r3, #9
    e0ce:	dc04      	bgt.n	e0da <_ZN5Print11printNumberEmh+0x5a>
    e0d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e0d4:	3330      	adds	r3, #48	; 0x30
    e0d6:	b2db      	uxtb	r3, r3
    e0d8:	e003      	b.n	e0e2 <_ZN5Print11printNumberEmh+0x62>
    e0da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e0de:	3337      	adds	r3, #55	; 0x37
    e0e0:	b2db      	uxtb	r3, r3
    e0e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e0e4:	7013      	strb	r3, [r2, #0]
  } while(n);
    e0e6:	68bb      	ldr	r3, [r7, #8]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d000      	beq.n	e0ee <_ZN5Print11printNumberEmh+0x6e>
  do {
    e0ec:	e7db      	b.n	e0a6 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e0ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e0f0:	68f8      	ldr	r0, [r7, #12]
    e0f2:	4b03      	ldr	r3, [pc, #12]	; (e100 <_ZN5Print11printNumberEmh+0x80>)
    e0f4:	4798      	blx	r3
    e0f6:	4603      	mov	r3, r0
}
    e0f8:	4618      	mov	r0, r3
    e0fa:	3738      	adds	r7, #56	; 0x38
    e0fc:	46bd      	mov	sp, r7
    e0fe:	bd80      	pop	{r7, pc}
    e100:	0000de8d 	.word	0x0000de8d

0000e104 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e104:	b480      	push	{r7}
    e106:	b083      	sub	sp, #12
    e108:	af00      	add	r7, sp, #0
    e10a:	6078      	str	r0, [r7, #4]
    e10c:	460b      	mov	r3, r1
    e10e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e110:	78fb      	ldrb	r3, [r7, #3]
    e112:	687a      	ldr	r2, [r7, #4]
    e114:	01db      	lsls	r3, r3, #7
    e116:	4413      	add	r3, r2
    e118:	681b      	ldr	r3, [r3, #0]
}
    e11a:	4618      	mov	r0, r3
    e11c:	370c      	adds	r7, #12
    e11e:	46bd      	mov	sp, r7
    e120:	bc80      	pop	{r7}
    e122:	4770      	bx	lr

0000e124 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e124:	b480      	push	{r7}
    e126:	b083      	sub	sp, #12
    e128:	af00      	add	r7, sp, #0
    e12a:	6078      	str	r0, [r7, #4]
    e12c:	460b      	mov	r3, r1
    e12e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e130:	78fb      	ldrb	r3, [r7, #3]
    e132:	687a      	ldr	r2, [r7, #4]
    e134:	01db      	lsls	r3, r3, #7
    e136:	4413      	add	r3, r2
    e138:	3310      	adds	r3, #16
    e13a:	681b      	ldr	r3, [r3, #0]
}
    e13c:	4618      	mov	r0, r3
    e13e:	370c      	adds	r7, #12
    e140:	46bd      	mov	sp, r7
    e142:	bc80      	pop	{r7}
    e144:	4770      	bx	lr

0000e146 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e146:	b480      	push	{r7}
    e148:	b083      	sub	sp, #12
    e14a:	af00      	add	r7, sp, #0
    e14c:	6078      	str	r0, [r7, #4]
    e14e:	460b      	mov	r3, r1
    e150:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e152:	78fb      	ldrb	r3, [r7, #3]
    e154:	687a      	ldr	r2, [r7, #4]
    e156:	01db      	lsls	r3, r3, #7
    e158:	4413      	add	r3, r2
    e15a:	3320      	adds	r3, #32
    e15c:	681b      	ldr	r3, [r3, #0]
}
    e15e:	4618      	mov	r0, r3
    e160:	370c      	adds	r7, #12
    e162:	46bd      	mov	sp, r7
    e164:	bc80      	pop	{r7}
    e166:	4770      	bx	lr

0000e168 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e168:	b580      	push	{r7, lr}
    e16a:	b086      	sub	sp, #24
    e16c:	af00      	add	r7, sp, #0
    e16e:	4603      	mov	r3, r0
    e170:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e172:	f107 030c 	add.w	r3, r7, #12
    e176:	4618      	mov	r0, r3
    e178:	4b13      	ldr	r3, [pc, #76]	; (e1c8 <_gpio_get_level+0x60>)
    e17a:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e17c:	79fb      	ldrb	r3, [r7, #7]
    e17e:	4619      	mov	r1, r3
    e180:	4812      	ldr	r0, [pc, #72]	; (e1cc <_gpio_get_level+0x64>)
    e182:	4b13      	ldr	r3, [pc, #76]	; (e1d0 <_gpio_get_level+0x68>)
    e184:	4798      	blx	r3
    e186:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e188:	79fb      	ldrb	r3, [r7, #7]
    e18a:	4619      	mov	r1, r3
    e18c:	480f      	ldr	r0, [pc, #60]	; (e1cc <_gpio_get_level+0x64>)
    e18e:	4b11      	ldr	r3, [pc, #68]	; (e1d4 <_gpio_get_level+0x6c>)
    e190:	4798      	blx	r3
    e192:	4602      	mov	r2, r0
    e194:	697b      	ldr	r3, [r7, #20]
    e196:	43db      	mvns	r3, r3
    e198:	4013      	ands	r3, r2
    e19a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e19c:	79fb      	ldrb	r3, [r7, #7]
    e19e:	4619      	mov	r1, r3
    e1a0:	480a      	ldr	r0, [pc, #40]	; (e1cc <_gpio_get_level+0x64>)
    e1a2:	4b0d      	ldr	r3, [pc, #52]	; (e1d8 <_gpio_get_level+0x70>)
    e1a4:	4798      	blx	r3
    e1a6:	4602      	mov	r2, r0
    e1a8:	697b      	ldr	r3, [r7, #20]
    e1aa:	4013      	ands	r3, r2
    e1ac:	693a      	ldr	r2, [r7, #16]
    e1ae:	4313      	orrs	r3, r2
    e1b0:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e1b2:	f107 030c 	add.w	r3, r7, #12
    e1b6:	4618      	mov	r0, r3
    e1b8:	4b08      	ldr	r3, [pc, #32]	; (e1dc <_gpio_get_level+0x74>)
    e1ba:	4798      	blx	r3

	return tmp;
    e1bc:	693b      	ldr	r3, [r7, #16]
}
    e1be:	4618      	mov	r0, r3
    e1c0:	3718      	adds	r7, #24
    e1c2:	46bd      	mov	sp, r7
    e1c4:	bd80      	pop	{r7, pc}
    e1c6:	bf00      	nop
    e1c8:	0000af65 	.word	0x0000af65
    e1cc:	41008000 	.word	0x41008000
    e1d0:	0000e105 	.word	0x0000e105
    e1d4:	0000e147 	.word	0x0000e147
    e1d8:	0000e125 	.word	0x0000e125
    e1dc:	0000af8b 	.word	0x0000af8b

0000e1e0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e1e0:	b580      	push	{r7, lr}
    e1e2:	b082      	sub	sp, #8
    e1e4:	af00      	add	r7, sp, #0
    e1e6:	4603      	mov	r3, r0
    e1e8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e1ea:	79fb      	ldrb	r3, [r7, #7]
    e1ec:	115b      	asrs	r3, r3, #5
    e1ee:	b2db      	uxtb	r3, r3
    e1f0:	4618      	mov	r0, r3
    e1f2:	4b09      	ldr	r3, [pc, #36]	; (e218 <gpio_get_pin_level+0x38>)
    e1f4:	4798      	blx	r3
    e1f6:	4601      	mov	r1, r0
    e1f8:	79fb      	ldrb	r3, [r7, #7]
    e1fa:	f003 031f 	and.w	r3, r3, #31
    e1fe:	2201      	movs	r2, #1
    e200:	fa02 f303 	lsl.w	r3, r2, r3
    e204:	400b      	ands	r3, r1
    e206:	2b00      	cmp	r3, #0
    e208:	bf14      	ite	ne
    e20a:	2301      	movne	r3, #1
    e20c:	2300      	moveq	r3, #0
    e20e:	b2db      	uxtb	r3, r3
}
    e210:	4618      	mov	r0, r3
    e212:	3708      	adds	r7, #8
    e214:	46bd      	mov	sp, r7
    e216:	bd80      	pop	{r7, pc}
    e218:	0000e169 	.word	0x0000e169

0000e21c <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e21c:	b480      	push	{r7}
    e21e:	b083      	sub	sp, #12
    e220:	af00      	add	r7, sp, #0
    e222:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e224:	4b06      	ldr	r3, [pc, #24]	; (e240 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e226:	681b      	ldr	r3, [r3, #0]
    e228:	2201      	movs	r2, #1
    e22a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e22c:	4b04      	ldr	r3, [pc, #16]	; (e240 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e22e:	681b      	ldr	r3, [r3, #0]
    e230:	2200      	movs	r2, #0
    e232:	705a      	strb	r2, [r3, #1]
}
    e234:	bf00      	nop
    e236:	370c      	adds	r7, #12
    e238:	46bd      	mov	sp, r7
    e23a:	bc80      	pop	{r7}
    e23c:	4770      	bx	lr
    e23e:	bf00      	nop
    e240:	20001578 	.word	0x20001578

0000e244 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e244:	b580      	push	{r7, lr}
    e246:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e248:	2040      	movs	r0, #64	; 0x40
    e24a:	4b0a      	ldr	r3, [pc, #40]	; (e274 <_ZL10USBPluggedv+0x30>)
    e24c:	4798      	blx	r3
    e24e:	4603      	mov	r3, r0
    e250:	2b00      	cmp	r3, #0
    e252:	d004      	beq.n	e25e <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e254:	4b08      	ldr	r3, [pc, #32]	; (e278 <_ZL10USBPluggedv+0x34>)
    e256:	681b      	ldr	r3, [r3, #0]
    e258:	2201      	movs	r2, #1
    e25a:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e25c:	e007      	b.n	e26e <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e25e:	4b06      	ldr	r3, [pc, #24]	; (e278 <_ZL10USBPluggedv+0x34>)
    e260:	681b      	ldr	r3, [r3, #0]
    e262:	2200      	movs	r2, #0
    e264:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e266:	4b04      	ldr	r3, [pc, #16]	; (e278 <_ZL10USBPluggedv+0x34>)
    e268:	681b      	ldr	r3, [r3, #0]
    e26a:	2200      	movs	r2, #0
    e26c:	701a      	strb	r2, [r3, #0]
}
    e26e:	bf00      	nop
    e270:	bd80      	pop	{r7, pc}
    e272:	bf00      	nop
    e274:	0000e1e1 	.word	0x0000e1e1
    e278:	20001578 	.word	0x20001578

0000e27c <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e27c:	b480      	push	{r7}
    e27e:	b083      	sub	sp, #12
    e280:	af00      	add	r7, sp, #0
    e282:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e284:	4a04      	ldr	r2, [pc, #16]	; (e298 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e286:	687b      	ldr	r3, [r7, #4]
    e288:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e28a:	687b      	ldr	r3, [r7, #4]
    e28c:	4618      	mov	r0, r3
    e28e:	370c      	adds	r7, #12
    e290:	46bd      	mov	sp, r7
    e292:	bc80      	pop	{r7}
    e294:	4770      	bx	lr
    e296:	bf00      	nop
    e298:	20001578 	.word	0x20001578

0000e29c <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e29c:	b480      	push	{r7}
    e29e:	b083      	sub	sp, #12
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e2a4:	687b      	ldr	r3, [r7, #4]
    e2a6:	4618      	mov	r0, r3
    e2a8:	370c      	adds	r7, #12
    e2aa:	46bd      	mov	sp, r7
    e2ac:	bc80      	pop	{r7}
    e2ae:	4770      	bx	lr

0000e2b0 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e2b0:	b580      	push	{r7, lr}
    e2b2:	b082      	sub	sp, #8
    e2b4:	af00      	add	r7, sp, #0
    e2b6:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e2b8:	491e      	ldr	r1, [pc, #120]	; (e334 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e2ba:	2040      	movs	r0, #64	; 0x40
    e2bc:	4b1e      	ldr	r3, [pc, #120]	; (e338 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e2be:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e2c0:	481e      	ldr	r0, [pc, #120]	; (e33c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e2c2:	4b1f      	ldr	r3, [pc, #124]	; (e340 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e2c4:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e2c6:	2040      	movs	r0, #64	; 0x40
    e2c8:	4b1e      	ldr	r3, [pc, #120]	; (e344 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e2ca:	4798      	blx	r3
    e2cc:	4603      	mov	r3, r0
    e2ce:	461a      	mov	r2, r3
    e2d0:	687b      	ldr	r3, [r7, #4]
    e2d2:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e2d4:	687b      	ldr	r3, [r7, #4]
    e2d6:	78db      	ldrb	r3, [r3, #3]
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d021      	beq.n	e320 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    e2dc:	687b      	ldr	r3, [r7, #4]
    e2de:	2200      	movs	r2, #0
    e2e0:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e2e2:	687b      	ldr	r3, [r7, #4]
    e2e4:	2201      	movs	r2, #1
    e2e6:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e2e8:	f44f 7216 	mov.w	r2, #600	; 0x258
    e2ec:	4916      	ldr	r1, [pc, #88]	; (e348 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e2ee:	4813      	ldr	r0, [pc, #76]	; (e33c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e2f0:	4b16      	ldr	r3, [pc, #88]	; (e34c <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e2f2:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e2f4:	4816      	ldr	r0, [pc, #88]	; (e350 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e2f6:	4b17      	ldr	r3, [pc, #92]	; (e354 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e2f8:	4798      	blx	r3
    e2fa:	4603      	mov	r3, r0
    e2fc:	f083 0301 	eor.w	r3, r3, #1
    e300:	b2db      	uxtb	r3, r3
    e302:	2b00      	cmp	r3, #0
    e304:	d008      	beq.n	e318 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    e306:	687b      	ldr	r3, [r7, #4]
    e308:	789b      	ldrb	r3, [r3, #2]
    e30a:	b2db      	uxtb	r3, r3
    e30c:	2b00      	cmp	r3, #0
    e30e:	d0f1      	beq.n	e2f4 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    e310:	687b      	ldr	r3, [r7, #4]
    e312:	2200      	movs	r2, #0
    e314:	701a      	strb	r2, [r3, #0]
					return;
    e316:	e009      	b.n	e32c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e318:	4808      	ldr	r0, [pc, #32]	; (e33c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e31a:	4b0f      	ldr	r3, [pc, #60]	; (e358 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e31c:	4798      	blx	r3
    e31e:	e005      	b.n	e32c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    e320:	687b      	ldr	r3, [r7, #4]
    e322:	2200      	movs	r2, #0
    e324:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e326:	687b      	ldr	r3, [r7, #4]
    e328:	2200      	movs	r2, #0
    e32a:	705a      	strb	r2, [r3, #1]
		}
		
}
    e32c:	3708      	adds	r7, #8
    e32e:	46bd      	mov	sp, r7
    e330:	bd80      	pop	{r7, pc}
    e332:	bf00      	nop
    e334:	0000e245 	.word	0x0000e245
    e338:	00001f15 	.word	0x00001f15
    e33c:	20001518 	.word	0x20001518
    e340:	0000d415 	.word	0x0000d415
    e344:	0000e1e1 	.word	0x0000e1e1
    e348:	0000e21d 	.word	0x0000e21d
    e34c:	0000d55d 	.word	0x0000d55d
    e350:	20001418 	.word	0x20001418
    e354:	0000da2d 	.word	0x0000da2d
    e358:	0000d489 	.word	0x0000d489

0000e35c <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    e35c:	b580      	push	{r7, lr}
    e35e:	b082      	sub	sp, #8
    e360:	af00      	add	r7, sp, #0
    e362:	6078      	str	r0, [r7, #4]
    e364:	6039      	str	r1, [r7, #0]
    e366:	687b      	ldr	r3, [r7, #4]
    e368:	2b01      	cmp	r3, #1
    e36a:	d14c      	bne.n	e406 <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e36c:	683b      	ldr	r3, [r7, #0]
    e36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e372:	4293      	cmp	r3, r2
    e374:	d147      	bne.n	e406 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e376:	4926      	ldr	r1, [pc, #152]	; (e410 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e378:	4826      	ldr	r0, [pc, #152]	; (e414 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e37a:	4b27      	ldr	r3, [pc, #156]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e37c:	4798      	blx	r3
    e37e:	4a27      	ldr	r2, [pc, #156]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e380:	4927      	ldr	r1, [pc, #156]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e382:	4824      	ldr	r0, [pc, #144]	; (e414 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e384:	4b27      	ldr	r3, [pc, #156]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e386:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e388:	4927      	ldr	r1, [pc, #156]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e38a:	4828      	ldr	r0, [pc, #160]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e38c:	4b22      	ldr	r3, [pc, #136]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e38e:	4798      	blx	r3
    e390:	4a22      	ldr	r2, [pc, #136]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e392:	4923      	ldr	r1, [pc, #140]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e394:	4825      	ldr	r0, [pc, #148]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e396:	4b23      	ldr	r3, [pc, #140]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e398:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e39a:	4925      	ldr	r1, [pc, #148]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e39c:	4825      	ldr	r0, [pc, #148]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e39e:	4b1e      	ldr	r3, [pc, #120]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3a0:	4798      	blx	r3
    e3a2:	4a1e      	ldr	r2, [pc, #120]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3a4:	491e      	ldr	r1, [pc, #120]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3a6:	4823      	ldr	r0, [pc, #140]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3a8:	4b1e      	ldr	r3, [pc, #120]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3aa:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e3ac:	4922      	ldr	r1, [pc, #136]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e3ae:	4823      	ldr	r0, [pc, #140]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e3b0:	4b19      	ldr	r3, [pc, #100]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3b2:	4798      	blx	r3
    e3b4:	4a19      	ldr	r2, [pc, #100]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3b6:	491a      	ldr	r1, [pc, #104]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3b8:	4820      	ldr	r0, [pc, #128]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e3ba:	4b1a      	ldr	r3, [pc, #104]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3bc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e3be:	4920      	ldr	r1, [pc, #128]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e3c0:	4820      	ldr	r0, [pc, #128]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e3c2:	4b15      	ldr	r3, [pc, #84]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3c4:	4798      	blx	r3
    e3c6:	4a15      	ldr	r2, [pc, #84]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3c8:	4915      	ldr	r1, [pc, #84]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3ca:	481e      	ldr	r0, [pc, #120]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e3cc:	4b15      	ldr	r3, [pc, #84]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3ce:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e3d0:	491d      	ldr	r1, [pc, #116]	; (e448 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e3d2:	481e      	ldr	r0, [pc, #120]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e3d4:	4b10      	ldr	r3, [pc, #64]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3d6:	4798      	blx	r3
    e3d8:	4a10      	ldr	r2, [pc, #64]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3da:	4911      	ldr	r1, [pc, #68]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3dc:	481b      	ldr	r0, [pc, #108]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e3de:	4b11      	ldr	r3, [pc, #68]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3e0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e3e2:	491b      	ldr	r1, [pc, #108]	; (e450 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e3e4:	481b      	ldr	r0, [pc, #108]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e3e6:	4b0c      	ldr	r3, [pc, #48]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3e8:	4798      	blx	r3
    e3ea:	4a0c      	ldr	r2, [pc, #48]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3ec:	490c      	ldr	r1, [pc, #48]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e3ee:	4819      	ldr	r0, [pc, #100]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e3f0:	4b0c      	ldr	r3, [pc, #48]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e3f2:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e3f4:	4918      	ldr	r1, [pc, #96]	; (e458 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e3f6:	4819      	ldr	r0, [pc, #100]	; (e45c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e3f8:	4b07      	ldr	r3, [pc, #28]	; (e418 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e3fa:	4798      	blx	r3
    e3fc:	4a07      	ldr	r2, [pc, #28]	; (e41c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e3fe:	4908      	ldr	r1, [pc, #32]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e400:	4816      	ldr	r0, [pc, #88]	; (e45c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e402:	4b08      	ldr	r3, [pc, #32]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e404:	4798      	blx	r3
    e406:	bf00      	nop
    e408:	3708      	adds	r7, #8
    e40a:	46bd      	mov	sp, r7
    e40c:	bd80      	pop	{r7, pc}
    e40e:	bf00      	nop
    e410:	200015f4 	.word	0x200015f4
    e414:	20001478 	.word	0x20001478
    e418:	0000d329 	.word	0x0000d329
    e41c:	20000000 	.word	0x20000000
    e420:	0000d361 	.word	0x0000d361
    e424:	0000e8b5 	.word	0x0000e8b5
    e428:	20001688 	.word	0x20001688
    e42c:	20001498 	.word	0x20001498
    e430:	200017ac 	.word	0x200017ac
    e434:	200014b8 	.word	0x200014b8
    e438:	200016a8 	.word	0x200016a8
    e43c:	200014d8 	.word	0x200014d8
    e440:	2000176c 	.word	0x2000176c
    e444:	200014f8 	.word	0x200014f8
    e448:	2000178c 	.word	0x2000178c
    e44c:	20001518 	.word	0x20001518
    e450:	20001664 	.word	0x20001664
    e454:	20001538 	.word	0x20001538
    e458:	20001704 	.word	0x20001704
    e45c:	20001558 	.word	0x20001558

0000e460 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    e460:	b580      	push	{r7, lr}
    e462:	af00      	add	r7, sp, #0
    e464:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e468:	2001      	movs	r0, #1
    e46a:	4b01      	ldr	r3, [pc, #4]	; (e470 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    e46c:	4798      	blx	r3
    e46e:	bd80      	pop	{r7, pc}
    e470:	0000e35d 	.word	0x0000e35d

0000e474 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e474:	b480      	push	{r7}
    e476:	b083      	sub	sp, #12
    e478:	af00      	add	r7, sp, #0
    e47a:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e47c:	2300      	movs	r3, #0
	}
    e47e:	4618      	mov	r0, r3
    e480:	370c      	adds	r7, #12
    e482:	46bd      	mov	sp, r7
    e484:	bc80      	pop	{r7}
    e486:	4770      	bx	lr

0000e488 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e488:	b480      	push	{r7}
    e48a:	af00      	add	r7, sp, #0
		}
    e48c:	bf00      	nop
    e48e:	46bd      	mov	sp, r7
    e490:	bc80      	pop	{r7}
    e492:	4770      	bx	lr

0000e494 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
    e494:	b480      	push	{r7}
    e496:	b083      	sub	sp, #12
    e498:	af00      	add	r7, sp, #0
    e49a:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
    e49c:	4a07      	ldr	r2, [pc, #28]	; (e4bc <_ZN18SingleHeater_ClassC1Ev+0x28>)
    e49e:	687b      	ldr	r3, [r7, #4]
    e4a0:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
    e4a2:	687b      	ldr	r3, [r7, #4]
    e4a4:	4a06      	ldr	r2, [pc, #24]	; (e4c0 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
    e4a6:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
    e4a8:	687b      	ldr	r3, [r7, #4]
    e4aa:	2200      	movs	r2, #0
    e4ac:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
    e4ae:	687b      	ldr	r3, [r7, #4]
    e4b0:	4618      	mov	r0, r3
    e4b2:	370c      	adds	r7, #12
    e4b4:	46bd      	mov	sp, r7
    e4b6:	bc80      	pop	{r7}
    e4b8:	4770      	bx	lr
    e4ba:	bf00      	nop
    e4bc:	20001594 	.word	0x20001594
    e4c0:	2000157c 	.word	0x2000157c

0000e4c4 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
    e4c4:	b480      	push	{r7}
    e4c6:	b083      	sub	sp, #12
    e4c8:	af00      	add	r7, sp, #0
    e4ca:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
    e4cc:	687b      	ldr	r3, [r7, #4]
    e4ce:	4618      	mov	r0, r3
    e4d0:	370c      	adds	r7, #12
    e4d2:	46bd      	mov	sp, r7
    e4d4:	bc80      	pop	{r7}
    e4d6:	4770      	bx	lr

0000e4d8 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id,MCP23008_Class *heater_expanders){
    e4d8:	b580      	push	{r7, lr}
    e4da:	b084      	sub	sp, #16
    e4dc:	af00      	add	r7, sp, #0
    e4de:	60f8      	str	r0, [r7, #12]
    e4e0:	460b      	mov	r3, r1
    e4e2:	607a      	str	r2, [r7, #4]
    e4e4:	72fb      	strb	r3, [r7, #11]
	heater_id=id;
    e4e6:	68fb      	ldr	r3, [r7, #12]
    e4e8:	7afa      	ldrb	r2, [r7, #11]
    e4ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->i2c_initiated)
    e4ee:	68fb      	ldr	r3, [r7, #12]
    e4f0:	699b      	ldr	r3, [r3, #24]
    e4f2:	7a1b      	ldrb	r3, [r3, #8]
    e4f4:	b2db      	uxtb	r3, r3
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	d104      	bne.n	e504 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x2c>
	{
		
	} 
	else{
		i2c->Init();
    e4fa:	68fb      	ldr	r3, [r7, #12]
    e4fc:	699b      	ldr	r3, [r3, #24]
    e4fe:	4618      	mov	r0, r3
    e500:	4b15      	ldr	r3, [pc, #84]	; (e558 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x80>)
    e502:	4798      	blx	r3
	}
	
	if (i2c->isOK)
    e504:	68fb      	ldr	r3, [r7, #12]
    e506:	699b      	ldr	r3, [r3, #24]
    e508:	7a5b      	ldrb	r3, [r3, #9]
    e50a:	b2db      	uxtb	r3, r3
    e50c:	2b00      	cmp	r3, #0
    e50e:	d015      	beq.n	e53c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x64>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray(heater_expanders);
    e510:	6879      	ldr	r1, [r7, #4]
    e512:	68f8      	ldr	r0, [r7, #12]
    e514:	4b11      	ldr	r3, [pc, #68]	; (e55c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x84>)
    e516:	4798      	blx	r3
		expanders[0]->SetPortInput();
    e518:	68fb      	ldr	r3, [r7, #12]
    e51a:	68db      	ldr	r3, [r3, #12]
    e51c:	4618      	mov	r0, r3
    e51e:	4b10      	ldr	r3, [pc, #64]	; (e560 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x88>)
    e520:	4798      	blx	r3
		expanders[1]->SetPortOutput();
    e522:	68fb      	ldr	r3, [r7, #12]
    e524:	691b      	ldr	r3, [r3, #16]
    e526:	4618      	mov	r0, r3
    e528:	4b0e      	ldr	r3, [pc, #56]	; (e564 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x8c>)
    e52a:	4798      	blx	r3
		isOK=SelfTest();
    e52c:	68f8      	ldr	r0, [r7, #12]
    e52e:	4b0e      	ldr	r3, [pc, #56]	; (e568 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x90>)
    e530:	4798      	blx	r3
    e532:	4603      	mov	r3, r0
    e534:	461a      	mov	r2, r3
    e536:	68fb      	ldr	r3, [r7, #12]
    e538:	701a      	strb	r2, [r3, #0]
    e53a:	e000      	b.n	e53e <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x66>
	}
	else
	{
		asm("nop");
    e53c:	bf00      	nop
	}
	isOK=i2c->isOK;
    e53e:	68fb      	ldr	r3, [r7, #12]
    e540:	699b      	ldr	r3, [r3, #24]
    e542:	7a5b      	ldrb	r3, [r3, #9]
    e544:	b2da      	uxtb	r2, r3
    e546:	68fb      	ldr	r3, [r7, #12]
    e548:	701a      	strb	r2, [r3, #0]
	return isOK;
    e54a:	68fb      	ldr	r3, [r7, #12]
    e54c:	781b      	ldrb	r3, [r3, #0]
    e54e:	b2db      	uxtb	r3, r3
}
    e550:	4618      	mov	r0, r3
    e552:	3710      	adds	r7, #16
    e554:	46bd      	mov	sp, r7
    e556:	bd80      	pop	{r7, pc}
    e558:	0000ce59 	.word	0x0000ce59
    e55c:	0000e56d 	.word	0x0000e56d
    e560:	0000d115 	.word	0x0000d115
    e564:	0000d159 	.word	0x0000d159
    e568:	0000e6d5 	.word	0x0000e6d5

0000e56c <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t SingleHeater_Class::InitExpanderArray(MCP23008_Class *heater_expanders){
    e56c:	b580      	push	{r7, lr}
    e56e:	b084      	sub	sp, #16
    e570:	af00      	add	r7, sp, #0
    e572:	6078      	str	r0, [r7, #4]
    e574:	6039      	str	r1, [r7, #0]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
    e576:	2300      	movs	r3, #0
    e578:	60fb      	str	r3, [r7, #12]
    e57a:	68fb      	ldr	r3, [r7, #12]
    e57c:	2b01      	cmp	r3, #1
    e57e:	dc34      	bgt.n	e5ea <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x7e>
	{
		expanders[i]=&heater_expanders[2*heater_id+i];
    e580:	687b      	ldr	r3, [r7, #4]
    e582:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    e586:	005a      	lsls	r2, r3, #1
    e588:	68fb      	ldr	r3, [r7, #12]
    e58a:	4413      	add	r3, r2
    e58c:	461a      	mov	r2, r3
    e58e:	4613      	mov	r3, r2
    e590:	00db      	lsls	r3, r3, #3
    e592:	1a9b      	subs	r3, r3, r2
    e594:	009b      	lsls	r3, r3, #2
    e596:	461a      	mov	r2, r3
    e598:	683b      	ldr	r3, [r7, #0]
    e59a:	441a      	add	r2, r3
    e59c:	6879      	ldr	r1, [r7, #4]
    e59e:	68fb      	ldr	r3, [r7, #12]
    e5a0:	3302      	adds	r3, #2
    e5a2:	009b      	lsls	r3, r3, #2
    e5a4:	440b      	add	r3, r1
    e5a6:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
    e5a8:	687a      	ldr	r2, [r7, #4]
    e5aa:	68fb      	ldr	r3, [r7, #12]
    e5ac:	3302      	adds	r3, #2
    e5ae:	009b      	lsls	r3, r3, #2
    e5b0:	4413      	add	r3, r2
    e5b2:	685a      	ldr	r2, [r3, #4]
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
    e5b8:	687b      	ldr	r3, [r7, #4]
    e5ba:	6958      	ldr	r0, [r3, #20]
    e5bc:	68fb      	ldr	r3, [r7, #12]
    e5be:	b2da      	uxtb	r2, r3
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    e5c6:	005b      	lsls	r3, r3, #1
    e5c8:	b2db      	uxtb	r3, r3
    e5ca:	4313      	orrs	r3, r2
    e5cc:	b2db      	uxtb	r3, r3
    e5ce:	f043 0320 	orr.w	r3, r3, #32
    e5d2:	b2db      	uxtb	r3, r3
    e5d4:	b25b      	sxtb	r3, r3
    e5d6:	b2d9      	uxtb	r1, r3
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	699b      	ldr	r3, [r3, #24]
    e5dc:	461a      	mov	r2, r3
    e5de:	4b05      	ldr	r3, [pc, #20]	; (e5f4 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x88>)
    e5e0:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
    e5e2:	68fb      	ldr	r3, [r7, #12]
    e5e4:	3301      	adds	r3, #1
    e5e6:	60fb      	str	r3, [r7, #12]
    e5e8:	e7c7      	b.n	e57a <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0xe>
	}
	
}
    e5ea:	bf00      	nop
    e5ec:	4618      	mov	r0, r3
    e5ee:	3710      	adds	r7, #16
    e5f0:	46bd      	mov	sp, r7
    e5f2:	bd80      	pop	{r7, pc}
    e5f4:	0000cfad 	.word	0x0000cfad

0000e5f8 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
    e5f8:	b580      	push	{r7, lr}
    e5fa:	b084      	sub	sp, #16
    e5fc:	af00      	add	r7, sp, #0
    e5fe:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
    e600:	687b      	ldr	r3, [r7, #4]
    e602:	68db      	ldr	r3, [r3, #12]
    e604:	4618      	mov	r0, r3
    e606:	4b16      	ldr	r3, [pc, #88]	; (e660 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
    e608:	4798      	blx	r3
    e60a:	4603      	mov	r3, r0
    e60c:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
    e60e:	7bbb      	ldrb	r3, [r7, #14]
    e610:	f003 0301 	and.w	r3, r3, #1
    e614:	2b00      	cmp	r3, #0
    e616:	bf14      	ite	ne
    e618:	2301      	movne	r3, #1
    e61a:	2300      	moveq	r3, #0
    e61c:	b2da      	uxtb	r2, r3
    e61e:	687b      	ldr	r3, [r7, #4]
    e620:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
    e622:	2300      	movs	r3, #0
    e624:	73fb      	strb	r3, [r7, #15]
    e626:	7bfb      	ldrb	r3, [r7, #15]
    e628:	2b03      	cmp	r3, #3
    e62a:	dc14      	bgt.n	e656 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
    e62c:	7bfb      	ldrb	r3, [r7, #15]
    e62e:	7bb9      	ldrb	r1, [r7, #14]
    e630:	7bfa      	ldrb	r2, [r7, #15]
    e632:	3201      	adds	r2, #1
    e634:	fa41 f202 	asr.w	r2, r1, r2
    e638:	f002 0201 	and.w	r2, r2, #1
    e63c:	2a00      	cmp	r2, #0
    e63e:	bf14      	ite	ne
    e640:	2201      	movne	r2, #1
    e642:	2200      	moveq	r2, #0
    e644:	b2d1      	uxtb	r1, r2
    e646:	687a      	ldr	r2, [r7, #4]
    e648:	4413      	add	r3, r2
    e64a:	460a      	mov	r2, r1
    e64c:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
    e64e:	7bfb      	ldrb	r3, [r7, #15]
    e650:	3301      	adds	r3, #1
    e652:	73fb      	strb	r3, [r7, #15]
    e654:	e7e7      	b.n	e626 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
    e656:	7bbb      	ldrb	r3, [r7, #14]
}
    e658:	4618      	mov	r0, r3
    e65a:	3710      	adds	r7, #16
    e65c:	46bd      	mov	sp, r7
    e65e:	bd80      	pop	{r7, pc}
    e660:	0000d091 	.word	0x0000d091

0000e664 <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
    e664:	b580      	push	{r7, lr}
    e666:	b082      	sub	sp, #8
    e668:	af00      	add	r7, sp, #0
    e66a:	6078      	str	r0, [r7, #4]
    e66c:	460b      	mov	r3, r1
    e66e:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	691b      	ldr	r3, [r3, #16]
    e674:	78f9      	ldrb	r1, [r7, #3]
    e676:	2200      	movs	r2, #0
    e678:	4618      	mov	r0, r3
    e67a:	4b06      	ldr	r3, [pc, #24]	; (e694 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
    e67c:	4798      	blx	r3
    e67e:	4603      	mov	r3, r0
    e680:	461a      	mov	r2, r3
    e682:	687b      	ldr	r3, [r7, #4]
    e684:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    e686:	687b      	ldr	r3, [r7, #4]
    e688:	7adb      	ldrb	r3, [r3, #11]
}
    e68a:	4618      	mov	r0, r3
    e68c:	3708      	adds	r7, #8
    e68e:	46bd      	mov	sp, r7
    e690:	bd80      	pop	{r7, pc}
    e692:	bf00      	nop
    e694:	0000d251 	.word	0x0000d251

0000e698 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
    e698:	b580      	push	{r7, lr}
    e69a:	b082      	sub	sp, #8
    e69c:	af00      	add	r7, sp, #0
    e69e:	6078      	str	r0, [r7, #4]
    e6a0:	460b      	mov	r3, r1
    e6a2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	691b      	ldr	r3, [r3, #16]
    e6a8:	78f9      	ldrb	r1, [r7, #3]
    e6aa:	2201      	movs	r2, #1
    e6ac:	4618      	mov	r0, r3
    e6ae:	4b08      	ldr	r3, [pc, #32]	; (e6d0 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
    e6b0:	4798      	blx	r3
    e6b2:	4603      	mov	r3, r0
    e6b4:	2b00      	cmp	r3, #0
    e6b6:	d001      	beq.n	e6bc <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
    e6b8:	2200      	movs	r2, #0
    e6ba:	e000      	b.n	e6be <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
    e6bc:	2201      	movs	r2, #1
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    e6c2:	687b      	ldr	r3, [r7, #4]
    e6c4:	7adb      	ldrb	r3, [r3, #11]
}
    e6c6:	4618      	mov	r0, r3
    e6c8:	3708      	adds	r7, #8
    e6ca:	46bd      	mov	sp, r7
    e6cc:	bd80      	pop	{r7, pc}
    e6ce:	bf00      	nop
    e6d0:	0000d251 	.word	0x0000d251

0000e6d4 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
    e6d4:	b580      	push	{r7, lr}
    e6d6:	b084      	sub	sp, #16
    e6d8:	af00      	add	r7, sp, #0
    e6da:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
    e6dc:	2300      	movs	r3, #0
    e6de:	73bb      	strb	r3, [r7, #14]
    e6e0:	7bbb      	ldrb	r3, [r7, #14]
    e6e2:	2b03      	cmp	r3, #3
    e6e4:	dc1f      	bgt.n	e726 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
    e6e6:	7bbb      	ldrb	r3, [r7, #14]
    e6e8:	4619      	mov	r1, r3
    e6ea:	6878      	ldr	r0, [r7, #4]
    e6ec:	4b10      	ldr	r3, [pc, #64]	; (e730 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
    e6ee:	4798      	blx	r3
		delay_ms(100);
    e6f0:	2064      	movs	r0, #100	; 0x64
    e6f2:	4b10      	ldr	r3, [pc, #64]	; (e734 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
    e6f4:	4798      	blx	r3
		DisableIndex(i);
    e6f6:	7bbb      	ldrb	r3, [r7, #14]
    e6f8:	4619      	mov	r1, r3
    e6fa:	6878      	ldr	r0, [r7, #4]
    e6fc:	4b0e      	ldr	r3, [pc, #56]	; (e738 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
    e6fe:	4798      	blx	r3
		ReadStatus();
    e700:	6878      	ldr	r0, [r7, #4]
    e702:	4b0e      	ldr	r3, [pc, #56]	; (e73c <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
    e704:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
    e706:	7bbb      	ldrb	r3, [r7, #14]
    e708:	687a      	ldr	r2, [r7, #4]
    e70a:	4413      	add	r3, r2
    e70c:	78db      	ldrb	r3, [r3, #3]
    e70e:	2b00      	cmp	r3, #0
    e710:	d002      	beq.n	e718 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
    e712:	2301      	movs	r3, #1
    e714:	73fb      	strb	r3, [r7, #15]
    e716:	e002      	b.n	e71e <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
    e718:	2300      	movs	r3, #0
    e71a:	73fb      	strb	r3, [r7, #15]
			break;
    e71c:	e003      	b.n	e726 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
    e71e:	7bbb      	ldrb	r3, [r7, #14]
    e720:	3301      	adds	r3, #1
    e722:	73bb      	strb	r3, [r7, #14]
    e724:	e7dc      	b.n	e6e0 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
    e726:	7bfb      	ldrb	r3, [r7, #15]
}
    e728:	4618      	mov	r0, r3
    e72a:	3710      	adds	r7, #16
    e72c:	46bd      	mov	sp, r7
    e72e:	bd80      	pop	{r7, pc}
    e730:	0000e665 	.word	0x0000e665
    e734:	00001e81 	.word	0x00001e81
    e738:	0000e699 	.word	0x0000e699
    e73c:	0000e5f9 	.word	0x0000e5f9

0000e740 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    e740:	b590      	push	{r4, r7, lr}
    e742:	b083      	sub	sp, #12
    e744:	af00      	add	r7, sp, #0
    e746:	6078      	str	r0, [r7, #4]
    e748:	4c05      	ldr	r4, [pc, #20]	; (e760 <__tcf_0+0x20>)
    e74a:	4b06      	ldr	r3, [pc, #24]	; (e764 <__tcf_0+0x24>)
    e74c:	429c      	cmp	r4, r3
    e74e:	d004      	beq.n	e75a <__tcf_0+0x1a>
    e750:	3c1c      	subs	r4, #28
    e752:	4620      	mov	r0, r4
    e754:	4b04      	ldr	r3, [pc, #16]	; (e768 <__tcf_0+0x28>)
    e756:	4798      	blx	r3
    e758:	e7f7      	b.n	e74a <__tcf_0+0xa>
    e75a:	370c      	adds	r7, #12
    e75c:	46bd      	mov	sp, r7
    e75e:	bd90      	pop	{r4, r7, pc}
    e760:	200015d0 	.word	0x200015d0
    e764:	20001598 	.word	0x20001598
    e768:	0000cf99 	.word	0x0000cf99

0000e76c <_Z41__static_initialization_and_destruction_0ii>:

    e76c:	b5b0      	push	{r4, r5, r7, lr}
    e76e:	b082      	sub	sp, #8
    e770:	af00      	add	r7, sp, #0
    e772:	6078      	str	r0, [r7, #4]
    e774:	6039      	str	r1, [r7, #0]
    e776:	687b      	ldr	r3, [r7, #4]
    e778:	2b01      	cmp	r3, #1
    e77a:	d125      	bne.n	e7c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
    e77c:	683b      	ldr	r3, [r7, #0]
    e77e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e782:	4293      	cmp	r3, r2
    e784:	d120      	bne.n	e7c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	uint8_t InitExpanderArray(MCP23008_Class *heater_expanders);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    e786:	4912      	ldr	r1, [pc, #72]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e788:	4812      	ldr	r0, [pc, #72]	; (e7d4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    e78a:	4b13      	ldr	r3, [pc, #76]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    e78c:	4798      	blx	r3
    e78e:	4a13      	ldr	r2, [pc, #76]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
    e790:	4913      	ldr	r1, [pc, #76]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    e792:	4810      	ldr	r0, [pc, #64]	; (e7d4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    e794:	4b13      	ldr	r3, [pc, #76]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    e796:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    e798:	4b13      	ldr	r3, [pc, #76]	; (e7e8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    e79a:	2401      	movs	r4, #1
    e79c:	461d      	mov	r5, r3
    e79e:	2c00      	cmp	r4, #0
    e7a0:	db05      	blt.n	e7ae <_Z41__static_initialization_and_destruction_0ii+0x42>
    e7a2:	4628      	mov	r0, r5
    e7a4:	4b11      	ldr	r3, [pc, #68]	; (e7ec <_Z41__static_initialization_and_destruction_0ii+0x80>)
    e7a6:	4798      	blx	r3
    e7a8:	351c      	adds	r5, #28
    e7aa:	3c01      	subs	r4, #1
    e7ac:	e7f7      	b.n	e79e <_Z41__static_initialization_and_destruction_0ii+0x32>
    e7ae:	4a0b      	ldr	r2, [pc, #44]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
    e7b0:	490f      	ldr	r1, [pc, #60]	; (e7f0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e7b2:	2000      	movs	r0, #0
    e7b4:	4b0b      	ldr	r3, [pc, #44]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    e7b6:	4798      	blx	r3
    e7b8:	480e      	ldr	r0, [pc, #56]	; (e7f4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e7ba:	4b0f      	ldr	r3, [pc, #60]	; (e7f8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e7bc:	4798      	blx	r3
    e7be:	4a07      	ldr	r2, [pc, #28]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
    e7c0:	490e      	ldr	r1, [pc, #56]	; (e7fc <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e7c2:	480c      	ldr	r0, [pc, #48]	; (e7f4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e7c4:	4b07      	ldr	r3, [pc, #28]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    e7c6:	4798      	blx	r3
    e7c8:	bf00      	nop
    e7ca:	3708      	adds	r7, #8
    e7cc:	46bd      	mov	sp, r7
    e7ce:	bdb0      	pop	{r4, r5, r7, pc}
    e7d0:	20001724 	.word	0x20001724
    e7d4:	2000157c 	.word	0x2000157c
    e7d8:	0000ce29 	.word	0x0000ce29
    e7dc:	20000000 	.word	0x20000000
    e7e0:	0000ce45 	.word	0x0000ce45
    e7e4:	0000e8b5 	.word	0x0000e8b5
    e7e8:	20001598 	.word	0x20001598
    e7ec:	0000cf85 	.word	0x0000cf85
    e7f0:	0000e741 	.word	0x0000e741
    e7f4:	200015d0 	.word	0x200015d0
    e7f8:	0000e495 	.word	0x0000e495
    e7fc:	0000e4c5 	.word	0x0000e4c5

0000e800 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
    e800:	b580      	push	{r7, lr}
    e802:	af00      	add	r7, sp, #0
    e804:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e808:	2001      	movs	r0, #1
    e80a:	4b01      	ldr	r3, [pc, #4]	; (e810 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
    e80c:	4798      	blx	r3
    e80e:	bd80      	pop	{r7, pc}
    e810:	0000e76d 	.word	0x0000e76d

0000e814 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e814:	b580      	push	{r7, lr}
    e816:	b084      	sub	sp, #16
    e818:	af00      	add	r7, sp, #0
    e81a:	60f8      	str	r0, [r7, #12]
    e81c:	60b9      	str	r1, [r7, #8]
    e81e:	4613      	mov	r3, r2
    e820:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e822:	68fb      	ldr	r3, [r7, #12]
    e824:	2b00      	cmp	r3, #0
    e826:	d004      	beq.n	e832 <io_write+0x1e>
    e828:	68bb      	ldr	r3, [r7, #8]
    e82a:	2b00      	cmp	r3, #0
    e82c:	d001      	beq.n	e832 <io_write+0x1e>
    e82e:	2301      	movs	r3, #1
    e830:	e000      	b.n	e834 <io_write+0x20>
    e832:	2300      	movs	r3, #0
    e834:	f003 0301 	and.w	r3, r3, #1
    e838:	b2db      	uxtb	r3, r3
    e83a:	2234      	movs	r2, #52	; 0x34
    e83c:	4907      	ldr	r1, [pc, #28]	; (e85c <io_write+0x48>)
    e83e:	4618      	mov	r0, r3
    e840:	4b07      	ldr	r3, [pc, #28]	; (e860 <io_write+0x4c>)
    e842:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e844:	68fb      	ldr	r3, [r7, #12]
    e846:	681b      	ldr	r3, [r3, #0]
    e848:	88fa      	ldrh	r2, [r7, #6]
    e84a:	68b9      	ldr	r1, [r7, #8]
    e84c:	68f8      	ldr	r0, [r7, #12]
    e84e:	4798      	blx	r3
    e850:	4603      	mov	r3, r0
}
    e852:	4618      	mov	r0, r3
    e854:	3710      	adds	r7, #16
    e856:	46bd      	mov	sp, r7
    e858:	bd80      	pop	{r7, pc}
    e85a:	bf00      	nop
    e85c:	0000f1ec 	.word	0x0000f1ec
    e860:	0000341d 	.word	0x0000341d

0000e864 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e864:	b580      	push	{r7, lr}
    e866:	b084      	sub	sp, #16
    e868:	af00      	add	r7, sp, #0
    e86a:	60f8      	str	r0, [r7, #12]
    e86c:	60b9      	str	r1, [r7, #8]
    e86e:	4613      	mov	r3, r2
    e870:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e872:	68fb      	ldr	r3, [r7, #12]
    e874:	2b00      	cmp	r3, #0
    e876:	d004      	beq.n	e882 <io_read+0x1e>
    e878:	68bb      	ldr	r3, [r7, #8]
    e87a:	2b00      	cmp	r3, #0
    e87c:	d001      	beq.n	e882 <io_read+0x1e>
    e87e:	2301      	movs	r3, #1
    e880:	e000      	b.n	e884 <io_read+0x20>
    e882:	2300      	movs	r3, #0
    e884:	f003 0301 	and.w	r3, r3, #1
    e888:	b2db      	uxtb	r3, r3
    e88a:	223d      	movs	r2, #61	; 0x3d
    e88c:	4907      	ldr	r1, [pc, #28]	; (e8ac <io_read+0x48>)
    e88e:	4618      	mov	r0, r3
    e890:	4b07      	ldr	r3, [pc, #28]	; (e8b0 <io_read+0x4c>)
    e892:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e894:	68fb      	ldr	r3, [r7, #12]
    e896:	685b      	ldr	r3, [r3, #4]
    e898:	88fa      	ldrh	r2, [r7, #6]
    e89a:	68b9      	ldr	r1, [r7, #8]
    e89c:	68f8      	ldr	r0, [r7, #12]
    e89e:	4798      	blx	r3
    e8a0:	4603      	mov	r3, r0
}
    e8a2:	4618      	mov	r0, r3
    e8a4:	3710      	adds	r7, #16
    e8a6:	46bd      	mov	sp, r7
    e8a8:	bd80      	pop	{r7, pc}
    e8aa:	bf00      	nop
    e8ac:	0000f1ec 	.word	0x0000f1ec
    e8b0:	0000341d 	.word	0x0000341d

0000e8b4 <__aeabi_atexit>:
    e8b4:	460b      	mov	r3, r1
    e8b6:	4601      	mov	r1, r0
    e8b8:	4618      	mov	r0, r3
    e8ba:	f000 b801 	b.w	e8c0 <__cxa_atexit>
    e8be:	bf00      	nop

0000e8c0 <__cxa_atexit>:
    e8c0:	4613      	mov	r3, r2
    e8c2:	460a      	mov	r2, r1
    e8c4:	4601      	mov	r1, r0
    e8c6:	2002      	movs	r0, #2
    e8c8:	f000 b9a8 	b.w	ec1c <__register_exitproc>

0000e8cc <ffs>:
    e8cc:	b140      	cbz	r0, e8e0 <ffs+0x14>
    e8ce:	2300      	movs	r3, #0
    e8d0:	fa40 f103 	asr.w	r1, r0, r3
    e8d4:	1c5a      	adds	r2, r3, #1
    e8d6:	07c9      	lsls	r1, r1, #31
    e8d8:	4613      	mov	r3, r2
    e8da:	d5f9      	bpl.n	e8d0 <ffs+0x4>
    e8dc:	4610      	mov	r0, r2
    e8de:	4770      	bx	lr
    e8e0:	4602      	mov	r2, r0
    e8e2:	4610      	mov	r0, r2
    e8e4:	4770      	bx	lr
    e8e6:	bf00      	nop

0000e8e8 <__libc_init_array>:
    e8e8:	b570      	push	{r4, r5, r6, lr}
    e8ea:	4e0f      	ldr	r6, [pc, #60]	; (e928 <__libc_init_array+0x40>)
    e8ec:	4d0f      	ldr	r5, [pc, #60]	; (e92c <__libc_init_array+0x44>)
    e8ee:	1b76      	subs	r6, r6, r5
    e8f0:	10b6      	asrs	r6, r6, #2
    e8f2:	bf18      	it	ne
    e8f4:	2400      	movne	r4, #0
    e8f6:	d005      	beq.n	e904 <__libc_init_array+0x1c>
    e8f8:	3401      	adds	r4, #1
    e8fa:	f855 3b04 	ldr.w	r3, [r5], #4
    e8fe:	4798      	blx	r3
    e900:	42a6      	cmp	r6, r4
    e902:	d1f9      	bne.n	e8f8 <__libc_init_array+0x10>
    e904:	4e0a      	ldr	r6, [pc, #40]	; (e930 <__libc_init_array+0x48>)
    e906:	4d0b      	ldr	r5, [pc, #44]	; (e934 <__libc_init_array+0x4c>)
    e908:	1b76      	subs	r6, r6, r5
    e90a:	f000 fc7b 	bl	f204 <_init>
    e90e:	10b6      	asrs	r6, r6, #2
    e910:	bf18      	it	ne
    e912:	2400      	movne	r4, #0
    e914:	d006      	beq.n	e924 <__libc_init_array+0x3c>
    e916:	3401      	adds	r4, #1
    e918:	f855 3b04 	ldr.w	r3, [r5], #4
    e91c:	4798      	blx	r3
    e91e:	42a6      	cmp	r6, r4
    e920:	d1f9      	bne.n	e916 <__libc_init_array+0x2e>
    e922:	bd70      	pop	{r4, r5, r6, pc}
    e924:	bd70      	pop	{r4, r5, r6, pc}
    e926:	bf00      	nop
    e928:	0000f210 	.word	0x0000f210
    e92c:	0000f210 	.word	0x0000f210
    e930:	0000f230 	.word	0x0000f230
    e934:	0000f210 	.word	0x0000f210

0000e938 <memcpy>:
    e938:	4684      	mov	ip, r0
    e93a:	ea41 0300 	orr.w	r3, r1, r0
    e93e:	f013 0303 	ands.w	r3, r3, #3
    e942:	d16d      	bne.n	ea20 <memcpy+0xe8>
    e944:	3a40      	subs	r2, #64	; 0x40
    e946:	d341      	bcc.n	e9cc <memcpy+0x94>
    e948:	f851 3b04 	ldr.w	r3, [r1], #4
    e94c:	f840 3b04 	str.w	r3, [r0], #4
    e950:	f851 3b04 	ldr.w	r3, [r1], #4
    e954:	f840 3b04 	str.w	r3, [r0], #4
    e958:	f851 3b04 	ldr.w	r3, [r1], #4
    e95c:	f840 3b04 	str.w	r3, [r0], #4
    e960:	f851 3b04 	ldr.w	r3, [r1], #4
    e964:	f840 3b04 	str.w	r3, [r0], #4
    e968:	f851 3b04 	ldr.w	r3, [r1], #4
    e96c:	f840 3b04 	str.w	r3, [r0], #4
    e970:	f851 3b04 	ldr.w	r3, [r1], #4
    e974:	f840 3b04 	str.w	r3, [r0], #4
    e978:	f851 3b04 	ldr.w	r3, [r1], #4
    e97c:	f840 3b04 	str.w	r3, [r0], #4
    e980:	f851 3b04 	ldr.w	r3, [r1], #4
    e984:	f840 3b04 	str.w	r3, [r0], #4
    e988:	f851 3b04 	ldr.w	r3, [r1], #4
    e98c:	f840 3b04 	str.w	r3, [r0], #4
    e990:	f851 3b04 	ldr.w	r3, [r1], #4
    e994:	f840 3b04 	str.w	r3, [r0], #4
    e998:	f851 3b04 	ldr.w	r3, [r1], #4
    e99c:	f840 3b04 	str.w	r3, [r0], #4
    e9a0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9a4:	f840 3b04 	str.w	r3, [r0], #4
    e9a8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9ac:	f840 3b04 	str.w	r3, [r0], #4
    e9b0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9b4:	f840 3b04 	str.w	r3, [r0], #4
    e9b8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9bc:	f840 3b04 	str.w	r3, [r0], #4
    e9c0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9c4:	f840 3b04 	str.w	r3, [r0], #4
    e9c8:	3a40      	subs	r2, #64	; 0x40
    e9ca:	d2bd      	bcs.n	e948 <memcpy+0x10>
    e9cc:	3230      	adds	r2, #48	; 0x30
    e9ce:	d311      	bcc.n	e9f4 <memcpy+0xbc>
    e9d0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9d4:	f840 3b04 	str.w	r3, [r0], #4
    e9d8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9dc:	f840 3b04 	str.w	r3, [r0], #4
    e9e0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9e4:	f840 3b04 	str.w	r3, [r0], #4
    e9e8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9ec:	f840 3b04 	str.w	r3, [r0], #4
    e9f0:	3a10      	subs	r2, #16
    e9f2:	d2ed      	bcs.n	e9d0 <memcpy+0x98>
    e9f4:	320c      	adds	r2, #12
    e9f6:	d305      	bcc.n	ea04 <memcpy+0xcc>
    e9f8:	f851 3b04 	ldr.w	r3, [r1], #4
    e9fc:	f840 3b04 	str.w	r3, [r0], #4
    ea00:	3a04      	subs	r2, #4
    ea02:	d2f9      	bcs.n	e9f8 <memcpy+0xc0>
    ea04:	3204      	adds	r2, #4
    ea06:	d008      	beq.n	ea1a <memcpy+0xe2>
    ea08:	07d2      	lsls	r2, r2, #31
    ea0a:	bf1c      	itt	ne
    ea0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ea10:	f800 3b01 	strbne.w	r3, [r0], #1
    ea14:	d301      	bcc.n	ea1a <memcpy+0xe2>
    ea16:	880b      	ldrh	r3, [r1, #0]
    ea18:	8003      	strh	r3, [r0, #0]
    ea1a:	4660      	mov	r0, ip
    ea1c:	4770      	bx	lr
    ea1e:	bf00      	nop
    ea20:	2a08      	cmp	r2, #8
    ea22:	d313      	bcc.n	ea4c <memcpy+0x114>
    ea24:	078b      	lsls	r3, r1, #30
    ea26:	d08d      	beq.n	e944 <memcpy+0xc>
    ea28:	f010 0303 	ands.w	r3, r0, #3
    ea2c:	d08a      	beq.n	e944 <memcpy+0xc>
    ea2e:	f1c3 0304 	rsb	r3, r3, #4
    ea32:	1ad2      	subs	r2, r2, r3
    ea34:	07db      	lsls	r3, r3, #31
    ea36:	bf1c      	itt	ne
    ea38:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ea3c:	f800 3b01 	strbne.w	r3, [r0], #1
    ea40:	d380      	bcc.n	e944 <memcpy+0xc>
    ea42:	f831 3b02 	ldrh.w	r3, [r1], #2
    ea46:	f820 3b02 	strh.w	r3, [r0], #2
    ea4a:	e77b      	b.n	e944 <memcpy+0xc>
    ea4c:	3a04      	subs	r2, #4
    ea4e:	d3d9      	bcc.n	ea04 <memcpy+0xcc>
    ea50:	3a01      	subs	r2, #1
    ea52:	f811 3b01 	ldrb.w	r3, [r1], #1
    ea56:	f800 3b01 	strb.w	r3, [r0], #1
    ea5a:	d2f9      	bcs.n	ea50 <memcpy+0x118>
    ea5c:	780b      	ldrb	r3, [r1, #0]
    ea5e:	7003      	strb	r3, [r0, #0]
    ea60:	784b      	ldrb	r3, [r1, #1]
    ea62:	7043      	strb	r3, [r0, #1]
    ea64:	788b      	ldrb	r3, [r1, #2]
    ea66:	7083      	strb	r3, [r0, #2]
    ea68:	4660      	mov	r0, ip
    ea6a:	4770      	bx	lr

0000ea6c <memset>:
    ea6c:	b470      	push	{r4, r5, r6}
    ea6e:	0786      	lsls	r6, r0, #30
    ea70:	d046      	beq.n	eb00 <memset+0x94>
    ea72:	1e54      	subs	r4, r2, #1
    ea74:	2a00      	cmp	r2, #0
    ea76:	d041      	beq.n	eafc <memset+0x90>
    ea78:	b2ca      	uxtb	r2, r1
    ea7a:	4603      	mov	r3, r0
    ea7c:	e002      	b.n	ea84 <memset+0x18>
    ea7e:	f114 34ff 	adds.w	r4, r4, #4294967295
    ea82:	d33b      	bcc.n	eafc <memset+0x90>
    ea84:	f803 2b01 	strb.w	r2, [r3], #1
    ea88:	079d      	lsls	r5, r3, #30
    ea8a:	d1f8      	bne.n	ea7e <memset+0x12>
    ea8c:	2c03      	cmp	r4, #3
    ea8e:	d92e      	bls.n	eaee <memset+0x82>
    ea90:	b2cd      	uxtb	r5, r1
    ea92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ea96:	2c0f      	cmp	r4, #15
    ea98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ea9c:	d919      	bls.n	ead2 <memset+0x66>
    ea9e:	f103 0210 	add.w	r2, r3, #16
    eaa2:	4626      	mov	r6, r4
    eaa4:	3e10      	subs	r6, #16
    eaa6:	2e0f      	cmp	r6, #15
    eaa8:	f842 5c10 	str.w	r5, [r2, #-16]
    eaac:	f842 5c0c 	str.w	r5, [r2, #-12]
    eab0:	f842 5c08 	str.w	r5, [r2, #-8]
    eab4:	f842 5c04 	str.w	r5, [r2, #-4]
    eab8:	f102 0210 	add.w	r2, r2, #16
    eabc:	d8f2      	bhi.n	eaa4 <memset+0x38>
    eabe:	f1a4 0210 	sub.w	r2, r4, #16
    eac2:	f022 020f 	bic.w	r2, r2, #15
    eac6:	f004 040f 	and.w	r4, r4, #15
    eaca:	3210      	adds	r2, #16
    eacc:	2c03      	cmp	r4, #3
    eace:	4413      	add	r3, r2
    ead0:	d90d      	bls.n	eaee <memset+0x82>
    ead2:	461e      	mov	r6, r3
    ead4:	4622      	mov	r2, r4
    ead6:	3a04      	subs	r2, #4
    ead8:	2a03      	cmp	r2, #3
    eada:	f846 5b04 	str.w	r5, [r6], #4
    eade:	d8fa      	bhi.n	ead6 <memset+0x6a>
    eae0:	1f22      	subs	r2, r4, #4
    eae2:	f022 0203 	bic.w	r2, r2, #3
    eae6:	3204      	adds	r2, #4
    eae8:	4413      	add	r3, r2
    eaea:	f004 0403 	and.w	r4, r4, #3
    eaee:	b12c      	cbz	r4, eafc <memset+0x90>
    eaf0:	b2c9      	uxtb	r1, r1
    eaf2:	441c      	add	r4, r3
    eaf4:	f803 1b01 	strb.w	r1, [r3], #1
    eaf8:	429c      	cmp	r4, r3
    eafa:	d1fb      	bne.n	eaf4 <memset+0x88>
    eafc:	bc70      	pop	{r4, r5, r6}
    eafe:	4770      	bx	lr
    eb00:	4614      	mov	r4, r2
    eb02:	4603      	mov	r3, r0
    eb04:	e7c2      	b.n	ea8c <memset+0x20>
    eb06:	bf00      	nop
	...

0000eb40 <strlen>:
    eb40:	f890 f000 	pld	[r0]
    eb44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    eb48:	f020 0107 	bic.w	r1, r0, #7
    eb4c:	f06f 0c00 	mvn.w	ip, #0
    eb50:	f010 0407 	ands.w	r4, r0, #7
    eb54:	f891 f020 	pld	[r1, #32]
    eb58:	f040 8049 	bne.w	ebee <strlen+0xae>
    eb5c:	f04f 0400 	mov.w	r4, #0
    eb60:	f06f 0007 	mvn.w	r0, #7
    eb64:	e9d1 2300 	ldrd	r2, r3, [r1]
    eb68:	f891 f040 	pld	[r1, #64]	; 0x40
    eb6c:	f100 0008 	add.w	r0, r0, #8
    eb70:	fa82 f24c 	uadd8	r2, r2, ip
    eb74:	faa4 f28c 	sel	r2, r4, ip
    eb78:	fa83 f34c 	uadd8	r3, r3, ip
    eb7c:	faa2 f38c 	sel	r3, r2, ip
    eb80:	bb4b      	cbnz	r3, ebd6 <strlen+0x96>
    eb82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    eb86:	fa82 f24c 	uadd8	r2, r2, ip
    eb8a:	f100 0008 	add.w	r0, r0, #8
    eb8e:	faa4 f28c 	sel	r2, r4, ip
    eb92:	fa83 f34c 	uadd8	r3, r3, ip
    eb96:	faa2 f38c 	sel	r3, r2, ip
    eb9a:	b9e3      	cbnz	r3, ebd6 <strlen+0x96>
    eb9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    eba0:	fa82 f24c 	uadd8	r2, r2, ip
    eba4:	f100 0008 	add.w	r0, r0, #8
    eba8:	faa4 f28c 	sel	r2, r4, ip
    ebac:	fa83 f34c 	uadd8	r3, r3, ip
    ebb0:	faa2 f38c 	sel	r3, r2, ip
    ebb4:	b97b      	cbnz	r3, ebd6 <strlen+0x96>
    ebb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ebba:	f101 0120 	add.w	r1, r1, #32
    ebbe:	fa82 f24c 	uadd8	r2, r2, ip
    ebc2:	f100 0008 	add.w	r0, r0, #8
    ebc6:	faa4 f28c 	sel	r2, r4, ip
    ebca:	fa83 f34c 	uadd8	r3, r3, ip
    ebce:	faa2 f38c 	sel	r3, r2, ip
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	d0c6      	beq.n	eb64 <strlen+0x24>
    ebd6:	2a00      	cmp	r2, #0
    ebd8:	bf04      	itt	eq
    ebda:	3004      	addeq	r0, #4
    ebdc:	461a      	moveq	r2, r3
    ebde:	ba12      	rev	r2, r2
    ebe0:	fab2 f282 	clz	r2, r2
    ebe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    ebe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ebec:	4770      	bx	lr
    ebee:	e9d1 2300 	ldrd	r2, r3, [r1]
    ebf2:	f004 0503 	and.w	r5, r4, #3
    ebf6:	f1c4 0000 	rsb	r0, r4, #0
    ebfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ebfe:	f014 0f04 	tst.w	r4, #4
    ec02:	f891 f040 	pld	[r1, #64]	; 0x40
    ec06:	fa0c f505 	lsl.w	r5, ip, r5
    ec0a:	ea62 0205 	orn	r2, r2, r5
    ec0e:	bf1c      	itt	ne
    ec10:	ea63 0305 	ornne	r3, r3, r5
    ec14:	4662      	movne	r2, ip
    ec16:	f04f 0400 	mov.w	r4, #0
    ec1a:	e7a9      	b.n	eb70 <strlen+0x30>

0000ec1c <__register_exitproc>:
    ec1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec20:	4d2c      	ldr	r5, [pc, #176]	; (ecd4 <__register_exitproc+0xb8>)
    ec22:	4606      	mov	r6, r0
    ec24:	6828      	ldr	r0, [r5, #0]
    ec26:	4698      	mov	r8, r3
    ec28:	460f      	mov	r7, r1
    ec2a:	4691      	mov	r9, r2
    ec2c:	f000 f882 	bl	ed34 <__retarget_lock_acquire_recursive>
    ec30:	4b29      	ldr	r3, [pc, #164]	; (ecd8 <__register_exitproc+0xbc>)
    ec32:	681c      	ldr	r4, [r3, #0]
    ec34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ec38:	2b00      	cmp	r3, #0
    ec3a:	d03e      	beq.n	ecba <__register_exitproc+0x9e>
    ec3c:	685a      	ldr	r2, [r3, #4]
    ec3e:	2a1f      	cmp	r2, #31
    ec40:	dc1c      	bgt.n	ec7c <__register_exitproc+0x60>
    ec42:	f102 0e01 	add.w	lr, r2, #1
    ec46:	b176      	cbz	r6, ec66 <__register_exitproc+0x4a>
    ec48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ec4c:	2401      	movs	r4, #1
    ec4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ec52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ec56:	4094      	lsls	r4, r2
    ec58:	4320      	orrs	r0, r4
    ec5a:	2e02      	cmp	r6, #2
    ec5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    ec60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ec64:	d023      	beq.n	ecae <__register_exitproc+0x92>
    ec66:	3202      	adds	r2, #2
    ec68:	f8c3 e004 	str.w	lr, [r3, #4]
    ec6c:	6828      	ldr	r0, [r5, #0]
    ec6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ec72:	f000 f861 	bl	ed38 <__retarget_lock_release_recursive>
    ec76:	2000      	movs	r0, #0
    ec78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ec7c:	4b17      	ldr	r3, [pc, #92]	; (ecdc <__register_exitproc+0xc0>)
    ec7e:	b30b      	cbz	r3, ecc4 <__register_exitproc+0xa8>
    ec80:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ec84:	f7ff fbf6 	bl	e474 <malloc>
    ec88:	4603      	mov	r3, r0
    ec8a:	b1d8      	cbz	r0, ecc4 <__register_exitproc+0xa8>
    ec8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ec90:	6002      	str	r2, [r0, #0]
    ec92:	2100      	movs	r1, #0
    ec94:	6041      	str	r1, [r0, #4]
    ec96:	460a      	mov	r2, r1
    ec98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ec9c:	f04f 0e01 	mov.w	lr, #1
    eca0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    eca4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    eca8:	2e00      	cmp	r6, #0
    ecaa:	d0dc      	beq.n	ec66 <__register_exitproc+0x4a>
    ecac:	e7cc      	b.n	ec48 <__register_exitproc+0x2c>
    ecae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ecb2:	430c      	orrs	r4, r1
    ecb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ecb8:	e7d5      	b.n	ec66 <__register_exitproc+0x4a>
    ecba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ecbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ecc2:	e7bb      	b.n	ec3c <__register_exitproc+0x20>
    ecc4:	6828      	ldr	r0, [r5, #0]
    ecc6:	f000 f837 	bl	ed38 <__retarget_lock_release_recursive>
    ecca:	f04f 30ff 	mov.w	r0, #4294967295
    ecce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ecd2:	bf00      	nop
    ecd4:	20000638 	.word	0x20000638
    ecd8:	0000f200 	.word	0x0000f200
    ecdc:	0000e475 	.word	0x0000e475

0000ece0 <register_fini>:
    ece0:	4b02      	ldr	r3, [pc, #8]	; (ecec <register_fini+0xc>)
    ece2:	b113      	cbz	r3, ecea <register_fini+0xa>
    ece4:	4802      	ldr	r0, [pc, #8]	; (ecf0 <register_fini+0x10>)
    ece6:	f000 b805 	b.w	ecf4 <atexit>
    ecea:	4770      	bx	lr
    ecec:	00000000 	.word	0x00000000
    ecf0:	0000ed01 	.word	0x0000ed01

0000ecf4 <atexit>:
    ecf4:	2300      	movs	r3, #0
    ecf6:	4601      	mov	r1, r0
    ecf8:	461a      	mov	r2, r3
    ecfa:	4618      	mov	r0, r3
    ecfc:	f7ff bf8e 	b.w	ec1c <__register_exitproc>

0000ed00 <__libc_fini_array>:
    ed00:	b538      	push	{r3, r4, r5, lr}
    ed02:	4c0a      	ldr	r4, [pc, #40]	; (ed2c <__libc_fini_array+0x2c>)
    ed04:	4d0a      	ldr	r5, [pc, #40]	; (ed30 <__libc_fini_array+0x30>)
    ed06:	1b64      	subs	r4, r4, r5
    ed08:	10a4      	asrs	r4, r4, #2
    ed0a:	d00a      	beq.n	ed22 <__libc_fini_array+0x22>
    ed0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ed10:	3b01      	subs	r3, #1
    ed12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ed16:	3c01      	subs	r4, #1
    ed18:	f855 3904 	ldr.w	r3, [r5], #-4
    ed1c:	4798      	blx	r3
    ed1e:	2c00      	cmp	r4, #0
    ed20:	d1f9      	bne.n	ed16 <__libc_fini_array+0x16>
    ed22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ed26:	f000 ba83 	b.w	f230 <_fini>
    ed2a:	bf00      	nop
    ed2c:	0000f240 	.word	0x0000f240
    ed30:	0000f23c 	.word	0x0000f23c

0000ed34 <__retarget_lock_acquire_recursive>:
    ed34:	4770      	bx	lr
    ed36:	bf00      	nop

0000ed38 <__retarget_lock_release_recursive>:
    ed38:	4770      	bx	lr
    ed3a:	bf00      	nop
    ed3c:	62616e45 	.word	0x62616e45
    ed40:	676e696c 	.word	0x676e696c
    ed44:	61654820 	.word	0x61654820
    ed48:	3a726574 	.word	0x3a726574
    ed4c:	00000020 	.word	0x00000020
    ed50:	00092e20 	.word	0x00092e20
    ed54:	74616548 	.word	0x74616548
    ed58:	00207265 	.word	0x00207265
    ed5c:	61745320 	.word	0x61745320
    ed60:	20737574 	.word	0x20737574
    ed64:	0000003a 	.word	0x0000003a
    ed68:	00000a0d 	.word	0x00000a0d
    ed6c:	682f2e2e 	.word	0x682f2e2e
    ed70:	702f6c70 	.word	0x702f6c70
    ed74:	2f74726f 	.word	0x2f74726f
    ed78:	5f6c7068 	.word	0x5f6c7068
    ed7c:	6f697067 	.word	0x6f697067
    ed80:	7361625f 	.word	0x7361625f
    ed84:	00682e65 	.word	0x00682e65
    ed88:	682f2e2e 	.word	0x682f2e2e
    ed8c:	692f6c61 	.word	0x692f6c61
    ed90:	756c636e 	.word	0x756c636e
    ed94:	682f6564 	.word	0x682f6564
    ed98:	775f6c61 	.word	0x775f6c61
    ed9c:	682e7464 	.word	0x682e7464
    eda0:	00000000 	.word	0x00000000
    eda4:	682f2e2e 	.word	0x682f2e2e
    eda8:	732f6c61 	.word	0x732f6c61
    edac:	682f6372 	.word	0x682f6372
    edb0:	635f6c61 	.word	0x635f6c61
    edb4:	6e656c61 	.word	0x6e656c61
    edb8:	2e726164 	.word	0x2e726164
    edbc:	00000063 	.word	0x00000063
    edc0:	682f2e2e 	.word	0x682f2e2e
    edc4:	732f6c61 	.word	0x732f6c61
    edc8:	682f6372 	.word	0x682f6372
    edcc:	635f6c61 	.word	0x635f6c61
    edd0:	615f6e61 	.word	0x615f6e61
    edd4:	636e7973 	.word	0x636e7973
    edd8:	0000632e 	.word	0x0000632e
    eddc:	682f2e2e 	.word	0x682f2e2e
    ede0:	732f6c61 	.word	0x732f6c61
    ede4:	682f6372 	.word	0x682f6372
    ede8:	635f6c61 	.word	0x635f6c61
    edec:	735f6372 	.word	0x735f6372
    edf0:	2e636e79 	.word	0x2e636e79
    edf4:	00000063 	.word	0x00000063
    edf8:	682f2e2e 	.word	0x682f2e2e
    edfc:	732f6c61 	.word	0x732f6c61
    ee00:	682f6372 	.word	0x682f6372
    ee04:	695f6c61 	.word	0x695f6c61
    ee08:	6d5f6332 	.word	0x6d5f6332
    ee0c:	6e79735f 	.word	0x6e79735f
    ee10:	00632e63 	.word	0x00632e63
    ee14:	682f2e2e 	.word	0x682f2e2e
    ee18:	732f6c61 	.word	0x732f6c61
    ee1c:	682f6372 	.word	0x682f6372
    ee20:	705f6c61 	.word	0x705f6c61
    ee24:	632e6d77 	.word	0x632e6d77
    ee28:	00000000 	.word	0x00000000
    ee2c:	682f2e2e 	.word	0x682f2e2e
    ee30:	732f6c61 	.word	0x732f6c61
    ee34:	682f6372 	.word	0x682f6372
    ee38:	715f6c61 	.word	0x715f6c61
    ee3c:	5f697073 	.word	0x5f697073
    ee40:	636e7973 	.word	0x636e7973
    ee44:	0000632e 	.word	0x0000632e
    ee48:	682f2e2e 	.word	0x682f2e2e
    ee4c:	732f6c61 	.word	0x732f6c61
    ee50:	682f6372 	.word	0x682f6372
    ee54:	735f6c61 	.word	0x735f6c61
    ee58:	6d5f6970 	.word	0x6d5f6970
    ee5c:	6e79735f 	.word	0x6e79735f
    ee60:	00632e63 	.word	0x00632e63
    ee64:	682f2e2e 	.word	0x682f2e2e
    ee68:	732f6c61 	.word	0x732f6c61
    ee6c:	682f6372 	.word	0x682f6372
    ee70:	745f6c61 	.word	0x745f6c61
    ee74:	72656d69 	.word	0x72656d69
    ee78:	0000632e 	.word	0x0000632e
    ee7c:	682f2e2e 	.word	0x682f2e2e
    ee80:	752f6c61 	.word	0x752f6c61
    ee84:	736c6974 	.word	0x736c6974
    ee88:	6372732f 	.word	0x6372732f
    ee8c:	6974752f 	.word	0x6974752f
    ee90:	6c5f736c 	.word	0x6c5f736c
    ee94:	2e747369 	.word	0x2e747369
    ee98:	00000063 	.word	0x00000063

0000ee9c <_map>:
    ee9c:	00000000 00000040 00000001 00000021     ....@.......!...
    eeac:	00000003 00000003 00000004 00000004     ................
    eebc:	00000005 00000005 00000006 00000056     ............V...
    eecc:	00000007 00000057 00000008 00000028     ....W.......(...
    eedc:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    eeec:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000eefc <user_mux_confs>:
    eefc:	00020100 00000000 00000000 00000000     ................
	...

0000ef40 <channel_confs>:
    ef40:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000ef80 <interrupt_cfg>:
	...
    f000:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f010:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f020:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f030:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f040:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    f050:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    f060:	43000400 43000800 43000c00              ...C...C...C

0000f06c <sercomspi_regs>:
    f06c:	0020000c 00020000 00000000 01ff0001     .. .............
    f07c:	30000c04 02000000 00000000 ff001700     ...0............
    f08c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f09c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f0ac:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f0bc:	43001400 43001800                       ...C...C

0000f0c4 <_usb_ep_cfgs>:
    f0c4:	20000a10 00000000 00000040 20000a50     ... ....@...P.. 
    f0d4:	20000a90 00400040 20000ad0 20000b10     ... @.@.... ... 
    f0e4:	00400040 20000b50 20000b90 00400040     @.@.P.. ... @.@.
    f0f4:	20000bd0 20000c10 00400040 00000804     ... ... @.@.....
    f104:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f114:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f124:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f134:	7361625f 00682e65                       _base.h.

0000f13c <n25q256a_interface>:
    f13c:	0000b3a5 0000b449 0000b559 0000b711     ....I...Y.......
    f14c:	0000b7a1 752f2e2e 642f6273 63697665     ....../usb/devic
    f15c:	73752f65 2e636462 00000063              e/usbdc.c...

0000f168 <_ZTV9CDC_Class>:
	...
    f170:	0000dba9 0000dc89 0000d82d 0000db71     ........-...q...
    f180:	0000dd21 0000db35 0000da49 0000da99     !...5...I.......
    f190:	0000db91 0000dbf1                       ........

0000f198 <_ZTV6Stream>:
	...
    f1a0:	0000e489 0000dec9 0000d82d 0000d841     ........-...A...
    f1b0:	0000e489 0000e489 0000e489 2e257830     ............0x%.
    f1c0:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f1d0:	0066766f                                ovf.

0000f1d4 <_ZTV5Print>:
	...
    f1dc:	0000e489 0000dec9 0000d82d 0000d841     ........-...A...
    f1ec:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f1fc:	00632e6f                                o.c.

0000f200 <_global_impure_ptr>:
    f200:	20000210                                ... 

0000f204 <_init>:
    f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f206:	bf00      	nop
    f208:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f20a:	bc08      	pop	{r3}
    f20c:	469e      	mov	lr, r3
    f20e:	4770      	bx	lr

0000f210 <__init_array_start>:
    f210:	0000ece1 	.word	0x0000ece1

0000f214 <__frame_dummy_init_array_entry>:
    f214:	00000289 00000419 000005c1 0000d7f5     ................
    f224:	0000de79 0000e461 0000e801              y...a.......

0000f230 <_fini>:
    f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f232:	bf00      	nop
    f234:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f236:	bc08      	pop	{r3}
    f238:	469e      	mov	lr, r3
    f23a:	4770      	bx	lr

0000f23c <__fini_array_start>:
    f23c:	00000265 	.word	0x00000265
