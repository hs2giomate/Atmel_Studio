
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011dac  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011dac  00011dac  00021dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000054c  20000000  00011db4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003054c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003054c  2**0
                  CONTENTS
  5 .bss          00001e84  20000550  00012308  00030550  2**3
                  ALLOC
  6 .stack        00010004  200023d4  0001418c  00030550  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003054c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003057a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00079200  00000000  00000000  000305d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b494  00000000  00000000  000a97d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e719  00000000  00000000  000b4c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003678  00000000  00000000  000d3380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003298  00000000  00000000  000d69f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00050c14  00000000  00000000  000d9c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00041b03  00000000  00000000  0012a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00140e04  00000000  00000000  0016c3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e92c  00000000  00000000  002ad1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 23 01 20 c1 07 00 00 45 08 00 00 45 08 00 00     .#. ....E...E...
      10:	45 08 00 00 45 08 00 00 45 08 00 00 00 00 00 00     E...E...E.......
	...
      2c:	45 08 00 00 45 08 00 00 00 00 00 00 45 08 00 00     E...E.......E...
      3c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      4c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      5c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      6c:	c1 78 00 00 45 08 00 00 45 08 00 00 45 08 00 00     .x..E...E...E...
      7c:	45 08 00 00 fd 66 00 00 0d 67 00 00 1d 67 00 00     E....f...g...g..
      8c:	2d 67 00 00 45 08 00 00 45 08 00 00 45 08 00 00     -g..E...E...E...
      9c:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      ac:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      bc:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      cc:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
      dc:	45 08 00 00 45 08 00 00 45 08 00 00 00 00 00 00     E...E...E.......
	...
      f4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     104:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     114:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     124:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     134:	45 08 00 00 fd 8c 00 00 19 8d 00 00 35 8d 00 00     E...........5...
     144:	51 8d 00 00 6d 8d 00 00 89 8d 00 00 a5 8d 00 00     Q...m...........
     154:	c1 8d 00 00 45 08 00 00 45 08 00 00 45 08 00 00     ....E...E...E...
     164:	45 08 00 00 dd 8d 00 00 f9 8d 00 00 15 8e 00 00     E...............
     174:	31 8e 00 00 45 08 00 00 81 5c 00 00 95 c7 00 00     1...E....\......
     184:	a5 c7 00 00 b5 c7 00 00 c5 c7 00 00 45 08 00 00     ............E...
     194:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1a4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1b4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1c4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1d4:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     1e4:	45 08 00 00 45 08 00 00 c5 9e 00 00 e1 9e 00 00     E...E...........
     1f4:	fd 9e 00 00 19 9f 00 00 45 08 00 00 45 08 00 00     ........E...E...
     204:	45 08 00 00 35 9f 00 00 45 08 00 00 45 08 00 00     E...5...E...E...
     214:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     224:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     234:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     244:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...
     254:	45 08 00 00 45 08 00 00 45 08 00 00 45 08 00 00     E...E...E...E...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000550 	.word	0x20000550
     280:	00000000 	.word	0x00000000
     284:	00011db4 	.word	0x00011db4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011db4 	.word	0x00011db4
     2c4:	20000554 	.word	0x20000554
     2c8:	00011db4 	.word	0x00011db4
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
{
} //AMMC_Class
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	4618      	mov	r0, r3
     2dc:	370c      	adds	r7, #12
     2de:	46bd      	mov	sp, r7
     2e0:	bc80      	pop	{r7}
     2e2:	4770      	bx	lr

000002e4 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
{
} //~AMMC_Class
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	4618      	mov	r0, r3
     2f0:	370c      	adds	r7, #12
     2f2:	46bd      	mov	sp, r7
     2f4:	bc80      	pop	{r7}
     2f6:	4770      	bx	lr

000002f8 <_Z41__static_initialization_and_destruction_0ii>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	6039      	str	r1, [r7, #0]
     302:	687b      	ldr	r3, [r7, #4]
     304:	2b01      	cmp	r3, #1
     306:	d114      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     30e:	4293      	cmp	r3, r2
     310:	d10f      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     312:	480a      	ldr	r0, [pc, #40]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     316:	4798      	blx	r3
     318:	4a0a      	ldr	r2, [pc, #40]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     31a:	490b      	ldr	r1, [pc, #44]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     31c:	4807      	ldr	r0, [pc, #28]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     320:	4798      	blx	r3
AMMC_Class	ammc2;
     322:	480b      	ldr	r0, [pc, #44]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     326:	4798      	blx	r3
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     32a:	4907      	ldr	r1, [pc, #28]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     32c:	4808      	ldr	r0, [pc, #32]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     32e:	4b07      	ldr	r3, [pc, #28]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     330:	4798      	blx	r3
     332:	bf00      	nop
     334:	3708      	adds	r7, #8
     336:	46bd      	mov	sp, r7
     338:	bd80      	pop	{r7, pc}
     33a:	bf00      	nop
     33c:	2000056c 	.word	0x2000056c
     340:	000002d1 	.word	0x000002d1
     344:	20000000 	.word	0x20000000
     348:	000002e5 	.word	0x000002e5
     34c:	0000ed25 	.word	0x0000ed25
     350:	20000570 	.word	0x20000570

00000354 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     354:	b580      	push	{r7, lr}
     356:	af00      	add	r7, sp, #0
     358:	f64f 71ff 	movw	r1, #65535	; 0xffff
     35c:	2001      	movs	r0, #1
     35e:	4b01      	ldr	r3, [pc, #4]	; (364 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     360:	4798      	blx	r3
     362:	bd80      	pop	{r7, pc}
     364:	000002f9 	.word	0x000002f9

00000368 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
     372:	687b      	ldr	r3, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
     376:	687b      	ldr	r3, [r7, #4]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	00010c44 	.word	0x00010c44

00000388 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
     390:	4a04      	ldr	r2, [pc, #16]	; (3a4 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
     392:	687b      	ldr	r3, [r7, #4]
     394:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
     396:	687b      	ldr	r3, [r7, #4]
     398:	4618      	mov	r0, r3
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	00010c44 	.word	0x00010c44

000003a8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
     3a8:	b5b0      	push	{r4, r5, r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     3b2:	4b0a      	ldr	r3, [pc, #40]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4798      	blx	r3
     3b8:	4604      	mov	r4, r0
     3ba:	460d      	mov	r5, r1
     3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3be:	6838      	ldr	r0, [r7, #0]
     3c0:	4798      	blx	r3
     3c2:	4602      	mov	r2, r0
     3c4:	460b      	mov	r3, r1
     3c6:	4620      	mov	r0, r4
     3c8:	4629      	mov	r1, r5
     3ca:	4c05      	ldr	r4, [pc, #20]	; (3e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
     3cc:	47a0      	blx	r4
     3ce:	4603      	mov	r3, r0
     3d0:	460c      	mov	r4, r1
    }
     3d2:	4618      	mov	r0, r3
     3d4:	4621      	mov	r1, r4
     3d6:	3708      	adds	r7, #8
     3d8:	46bd      	mov	sp, r7
     3da:	bdb0      	pop	{r4, r5, r7, pc}
     3dc:	00010121 	.word	0x00010121
     3e0:	0000ed35 	.word	0x0000ed35

000003e4 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
     3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3e8:	b085      	sub	sp, #20
     3ea:	af00      	add	r7, sp, #0
     3ec:	6078      	str	r0, [r7, #4]
     3ee:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
     3f0:	2300      	movs	r3, #0
     3f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     3f4:	2300      	movs	r3, #0
     3f6:	73bb      	strb	r3, [r7, #14]
     3f8:	7bbb      	ldrb	r3, [r7, #14]
     3fa:	2b02      	cmp	r3, #2
     3fc:	d86d      	bhi.n	4da <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
     3fe:	7bbb      	ldrb	r3, [r7, #14]
     400:	f1c3 0402 	rsb	r4, r3, #2
     404:	4b3c      	ldr	r3, [pc, #240]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     406:	6838      	ldr	r0, [r7, #0]
     408:	4798      	blx	r3
     40a:	4680      	mov	r8, r0
     40c:	4689      	mov	r9, r1
     40e:	7bbb      	ldrb	r3, [r7, #14]
     410:	f1c3 0302 	rsb	r3, r3, #2
     414:	4619      	mov	r1, r3
     416:	200a      	movs	r0, #10
     418:	4b38      	ldr	r3, [pc, #224]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     41a:	4798      	blx	r3
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4d37      	ldr	r5, [pc, #220]	; (500 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
     422:	4640      	mov	r0, r8
     424:	4649      	mov	r1, r9
     426:	47a8      	blx	r5
     428:	4602      	mov	r2, r0
     42a:	460b      	mov	r3, r1
     42c:	4611      	mov	r1, r2
     42e:	461a      	mov	r2, r3
     430:	4b34      	ldr	r3, [pc, #208]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     432:	4608      	mov	r0, r1
     434:	4611      	mov	r1, r2
     436:	4798      	blx	r3
     438:	4603      	mov	r3, r0
     43a:	b2da      	uxtb	r2, r3
     43c:	f107 0310 	add.w	r3, r7, #16
     440:	4423      	add	r3, r4
     442:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
     446:	7bbb      	ldrb	r3, [r7, #14]
     448:	f1c3 0302 	rsb	r3, r3, #2
     44c:	f107 0210 	add.w	r2, r7, #16
     450:	4413      	add	r3, r2
     452:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     456:	461a      	mov	r2, r3
     458:	4b2b      	ldr	r3, [pc, #172]	; (508 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
     45a:	4610      	mov	r0, r2
     45c:	4798      	blx	r3
     45e:	4605      	mov	r5, r0
     460:	460e      	mov	r6, r1
     462:	7bbb      	ldrb	r3, [r7, #14]
     464:	f1c3 0302 	rsb	r3, r3, #2
     468:	4619      	mov	r1, r3
     46a:	200a      	movs	r0, #10
     46c:	4b23      	ldr	r3, [pc, #140]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     46e:	4798      	blx	r3
     470:	4602      	mov	r2, r0
     472:	460b      	mov	r3, r1
     474:	4c25      	ldr	r4, [pc, #148]	; (50c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
     476:	4628      	mov	r0, r5
     478:	4631      	mov	r1, r6
     47a:	47a0      	blx	r4
     47c:	4603      	mov	r3, r0
     47e:	460c      	mov	r4, r1
     480:	461d      	mov	r5, r3
     482:	4626      	mov	r6, r4
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     486:	6838      	ldr	r0, [r7, #0]
     488:	4798      	blx	r3
     48a:	4c21      	ldr	r4, [pc, #132]	; (510 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
     48c:	462a      	mov	r2, r5
     48e:	4633      	mov	r3, r6
     490:	47a0      	blx	r4
     492:	4603      	mov	r3, r0
     494:	460c      	mov	r4, r1
     496:	4619      	mov	r1, r3
     498:	4622      	mov	r2, r4
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     49c:	4608      	mov	r0, r1
     49e:	4611      	mov	r1, r2
     4a0:	4798      	blx	r3
     4a2:	4603      	mov	r3, r0
     4a4:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
     4a6:	7bbb      	ldrb	r3, [r7, #14]
     4a8:	f1c3 0302 	rsb	r3, r3, #2
     4ac:	f107 0210 	add.w	r2, r7, #16
     4b0:	4413      	add	r3, r2
     4b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     4b6:	461a      	mov	r2, r3
     4b8:	7bbb      	ldrb	r3, [r7, #14]
     4ba:	4619      	mov	r1, r3
     4bc:	009b      	lsls	r3, r3, #2
     4be:	1acb      	subs	r3, r1, r3
     4c0:	3306      	adds	r3, #6
     4c2:	fa02 f303 	lsl.w	r3, r2, r3
     4c6:	b25a      	sxtb	r2, r3
     4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     4cc:	4313      	orrs	r3, r2
     4ce:	b25b      	sxtb	r3, r3
     4d0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     4d2:	7bbb      	ldrb	r3, [r7, #14]
     4d4:	3301      	adds	r3, #1
     4d6:	73bb      	strb	r3, [r7, #14]
     4d8:	e78e      	b.n	3f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	7bfa      	ldrb	r2, [r7, #15]
     4e2:	4611      	mov	r1, r2
     4e4:	6878      	ldr	r0, [r7, #4]
     4e6:	4798      	blx	r3
     4e8:	4603      	mov	r3, r0
     4ea:	73fb      	strb	r3, [r7, #15]
	return result;
     4ec:	7bfb      	ldrb	r3, [r7, #15]
	
}
     4ee:	4618      	mov	r0, r3
     4f0:	3714      	adds	r7, #20
     4f2:	46bd      	mov	sp, r7
     4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4f8:	00010101 	.word	0x00010101
     4fc:	000003a9 	.word	0x000003a9
     500:	00010441 	.word	0x00010441
     504:	0001074d 	.word	0x0001074d
     508:	00010121 	.word	0x00010121
     50c:	000101ed 	.word	0x000101ed
     510:	0000fe85 	.word	0x0000fe85

00000514 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
     514:	b480      	push	{r7}
     516:	b085      	sub	sp, #20
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	460b      	mov	r3, r1
     51e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
     520:	2300      	movs	r3, #0
     522:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     524:	2300      	movs	r3, #0
     526:	60bb      	str	r3, [r7, #8]
     528:	68bb      	ldr	r3, [r7, #8]
     52a:	2b07      	cmp	r3, #7
     52c:	dc13      	bgt.n	556 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
     52e:	7bfb      	ldrb	r3, [r7, #15]
     530:	005b      	lsls	r3, r3, #1
     532:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
     534:	78fa      	ldrb	r2, [r7, #3]
     536:	68bb      	ldr	r3, [r7, #8]
     538:	fa42 f303 	asr.w	r3, r2, r3
     53c:	b25b      	sxtb	r3, r3
     53e:	f003 0301 	and.w	r3, r3, #1
     542:	b25a      	sxtb	r2, r3
     544:	f997 300f 	ldrsb.w	r3, [r7, #15]
     548:	4313      	orrs	r3, r2
     54a:	b25b      	sxtb	r3, r3
     54c:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     54e:	68bb      	ldr	r3, [r7, #8]
     550:	3301      	adds	r3, #1
     552:	60bb      	str	r3, [r7, #8]
     554:	e7e8      	b.n	528 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
     556:	7bfb      	ldrb	r3, [r7, #15]
     558:	4618      	mov	r0, r3
     55a:	3714      	adds	r7, #20
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr

00000562 <_ZN14Protocol_ClassC2Ev>:
		{
				ch=0xff;
			usb.println("Command I: Increment data\n\r>");
			BigCounter.Word32++;
			TXBuffer[0] = BigCounter.PayLoad[1];
			TXBuffer[1] = BigCounter.PayLoad[2];
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
			TXBuffer[2] = BigCounter.PayLoad[3];
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
     56a:	6039      	str	r1, [r7, #0]
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	681a      	ldr	r2, [r3, #0]
			TXBuffer[3] = BigCounter.PayLoad[3];               // copy the LSB to the label for testing purposes
     570:	687b      	ldr	r3, [r7, #4]
     572:	601a      	str	r2, [r3, #0]
     574:	687b      	ldr	r3, [r7, #4]
     576:	681b      	ldr	r3, [r3, #0]
     578:	3b14      	subs	r3, #20
			
			cpu_irq_disable();
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	461a      	mov	r2, r3
     57e:	687b      	ldr	r3, [r7, #4]
			HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
     580:	4413      	add	r3, r2
     582:	683a      	ldr	r2, [r7, #0]
     584:	6852      	ldr	r2, [r2, #4]
     586:	601a      	str	r2, [r3, #0]
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4618      	mov	r0, r3
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	bc80      	pop	{r7}
			cpu_irq_enable();
     592:	4770      	bx	lr

00000594 <_ZN15ARINC_InterfaceC1Ev>:
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	4618      	mov	r0, r3
     5a0:	4b10      	ldr	r3, [pc, #64]	; (5e4 <_ZN15ARINC_InterfaceC1Ev+0x50>)
     5a2:	4798      	blx	r3
			//PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
		}
		
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
     5a4:	687b      	ldr	r3, [r7, #4]
     5a6:	4a10      	ldr	r2, [pc, #64]	; (5e8 <_ZN15ARINC_InterfaceC1Ev+0x54>)
     5a8:	4611      	mov	r1, r2
     5aa:	4618      	mov	r0, r3
     5ac:	4b0f      	ldr	r3, [pc, #60]	; (5ec <_ZN15ARINC_InterfaceC1Ev+0x58>)
     5ae:	4798      	blx	r3
     5b0:	4a0f      	ldr	r2, [pc, #60]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	601a      	str	r2, [r3, #0]
     5b6:	4a0e      	ldr	r2, [pc, #56]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
		
		if (newMessageR1)
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	601a      	str	r2, [r3, #0]
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     5c2:	4618      	mov	r0, r3
		{
			reading=ReadArincBuffer();
     5c4:	4b0b      	ldr	r3, [pc, #44]	; (5f4 <_ZN15ARINC_InterfaceC1Ev+0x60>)
     5c6:	4798      	blx	r3
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
			newMessageR1=false;
     5ce:	4618      	mov	r0, r3
     5d0:	4b09      	ldr	r3, [pc, #36]	; (5f8 <_ZN15ARINC_InterfaceC1Ev+0x64>)
		}
	}
     5d2:	4798      	blx	r3
     5d4:	4a09      	ldr	r2, [pc, #36]	; (5fc <_ZN15ARINC_InterfaceC1Ev+0x68>)
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	6013      	str	r3, [r2, #0]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	4618      	mov	r0, r3
     5de:	3708      	adds	r7, #8
     5e0:	46bd      	mov	sp, r7
     5e2:	bd80      	pop	{r7, pc}
     5e4:	00000369 	.word	0x00000369
     5e8:	00011678 	.word	0x00011678
     5ec:	00000563 	.word	0x00000563
     5f0:	00011660 	.word	0x00011660
     5f4:	0000167d 	.word	0x0000167d
     5f8:	0000074d 	.word	0x0000074d
} //ARINC_Interface
     5fc:	20000578 	.word	0x20000578

00000600 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
     600:	b580      	push	{r7, lr}
     602:	b082      	sub	sp, #8
     604:	af00      	add	r7, sp, #0
     606:	6078      	str	r0, [r7, #4]
     608:	4a10      	ldr	r2, [pc, #64]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	601a      	str	r2, [r3, #0]
     60e:	4a0f      	ldr	r2, [pc, #60]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     610:	687b      	ldr	r3, [r7, #4]
     612:	601a      	str	r2, [r3, #0]
     614:	687b      	ldr	r3, [r7, #4]
     616:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
     61a:	4618      	mov	r0, r3
     61c:	4b0c      	ldr	r3, [pc, #48]	; (650 <_ZN15ARINC_InterfaceD1Ev+0x50>)
     61e:	4798      	blx	r3
     620:	687b      	ldr	r3, [r7, #4]
     622:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     626:	4618      	mov	r0, r3
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <_ZN15ARINC_InterfaceD1Ev+0x54>)
     62a:	4798      	blx	r3
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4a0a      	ldr	r2, [pc, #40]	; (658 <_ZN15ARINC_InterfaceD1Ev+0x58>)
     630:	4611      	mov	r1, r2
     632:	4618      	mov	r0, r3
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <_ZN15ARINC_InterfaceD1Ev+0x5c>)
     636:	4798      	blx	r3
     638:	687b      	ldr	r3, [r7, #4]
     63a:	4618      	mov	r0, r3
     63c:	4b08      	ldr	r3, [pc, #32]	; (660 <_ZN15ARINC_InterfaceD1Ev+0x60>)
     63e:	4798      	blx	r3
} //~ARINC_Interface
     640:	687b      	ldr	r3, [r7, #4]
     642:	4618      	mov	r0, r3
     644:	3708      	adds	r7, #8
     646:	46bd      	mov	sp, r7
     648:	bd80      	pop	{r7, pc}
     64a:	bf00      	nop
     64c:	00011660 	.word	0x00011660
     650:	0000076d 	.word	0x0000076d
     654:	000016ed 	.word	0x000016ed
     658:	00011678 	.word	0x00011678
     65c:	0000078d 	.word	0x0000078d
     660:	00000389 	.word	0x00000389

00000664 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
     664:	b580      	push	{r7, lr}
     666:	b082      	sub	sp, #8
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
     66c:	6878      	ldr	r0, [r7, #4]
     66e:	4b06      	ldr	r3, [pc, #24]	; (688 <_ZN15ARINC_InterfaceD0Ev+0x24>)
     670:	4798      	blx	r3
     672:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     676:	6878      	ldr	r0, [r7, #4]
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <_ZN15ARINC_InterfaceD0Ev+0x28>)
     67a:	4798      	blx	r3
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	4618      	mov	r0, r3
     680:	3708      	adds	r7, #8
     682:	46bd      	mov	sp, r7
     684:	bd80      	pop	{r7, pc}
     686:	bf00      	nop
     688:	00000601 	.word	0x00000601
     68c:	0000ed31 	.word	0x0000ed31

00000690 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
     690:	b480      	push	{r7}
     692:	b085      	sub	sp, #20
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	460b      	mov	r3, r1
     69a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     69c:	2300      	movs	r3, #0
     69e:	73fb      	strb	r3, [r7, #15]
     6a0:	7bfb      	ldrb	r3, [r7, #15]
     6a2:	2b3f      	cmp	r3, #63	; 0x3f
     6a4:	dc1e      	bgt.n	6e4 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
     6ac:	7bfb      	ldrb	r3, [r7, #15]
     6ae:	4413      	add	r3, r2
     6b0:	b2db      	uxtb	r3, r3
     6b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6b6:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
     6b8:	7bbb      	ldrb	r3, [r7, #14]
     6ba:	687a      	ldr	r2, [r7, #4]
     6bc:	009b      	lsls	r3, r3, #2
     6be:	4413      	add	r3, r2
     6c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
     6c4:	78fa      	ldrb	r2, [r7, #3]
     6c6:	429a      	cmp	r2, r3
     6c8:	d108      	bne.n	6dc <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
			data=(uint32_t*)receiverBuffer[j];
     6ca:	7bbb      	ldrb	r3, [r7, #14]
     6cc:	3310      	adds	r3, #16
     6ce:	009b      	lsls	r3, r3, #2
     6d0:	687a      	ldr	r2, [r7, #4]
     6d2:	4413      	add	r3, r2
     6d4:	60bb      	str	r3, [r7, #8]
			return *data;
     6d6:	68bb      	ldr	r3, [r7, #8]
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	e004      	b.n	6e6 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     6dc:	7bfb      	ldrb	r3, [r7, #15]
     6de:	3301      	adds	r3, #1
     6e0:	73fb      	strb	r3, [r7, #15]
     6e2:	e7dd      	b.n	6a0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
	return 0;
     6e4:	2300      	movs	r3, #0
}
     6e6:	4618      	mov	r0, r3
     6e8:	3714      	adds	r7, #20
     6ea:	46bd      	mov	sp, r7
     6ec:	bc80      	pop	{r7}
     6ee:	4770      	bx	lr

000006f0 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

     6f0:	b580      	push	{r7, lr}
     6f2:	b082      	sub	sp, #8
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
     6f8:	6039      	str	r1, [r7, #0]
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	2b01      	cmp	r3, #1
     6fe:	d10c      	bne.n	71a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     700:	683b      	ldr	r3, [r7, #0]
     702:	f64f 72ff 	movw	r2, #65535	; 0xffff
     706:	4293      	cmp	r3, r2
     708:	d107      	bne.n	71a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     70a:	4806      	ldr	r0, [pc, #24]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     70c:	4b06      	ldr	r3, [pc, #24]	; (728 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     70e:	4798      	blx	r3
     710:	4a06      	ldr	r2, [pc, #24]	; (72c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     712:	4907      	ldr	r1, [pc, #28]	; (730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     714:	4803      	ldr	r0, [pc, #12]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     716:	4b07      	ldr	r3, [pc, #28]	; (734 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     718:	4798      	blx	r3
     71a:	bf00      	nop
     71c:	3708      	adds	r7, #8
     71e:	46bd      	mov	sp, r7
     720:	bd80      	pop	{r7, pc}
     722:	bf00      	nop
     724:	2000057c 	.word	0x2000057c
     728:	00000595 	.word	0x00000595
     72c:	20000000 	.word	0x20000000
     730:	00000601 	.word	0x00000601
     734:	0000ed25 	.word	0x0000ed25

00000738 <_GLOBAL__sub_I_HexSymbols>:
     738:	b580      	push	{r7, lr}
     73a:	af00      	add	r7, sp, #0
     73c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     740:	2001      	movs	r0, #1
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <_GLOBAL__sub_I_HexSymbols+0x10>)
     744:	4798      	blx	r3
     746:	bd80      	pop	{r7, pc}
     748:	000006f1 	.word	0x000006f1

0000074c <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
     754:	687b      	ldr	r3, [r7, #4]
     756:	4618      	mov	r0, r3
     758:	4b03      	ldr	r3, [pc, #12]	; (768 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
     75a:	4798      	blx	r3
{
} //Holt_3593_Class
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	4618      	mov	r0, r3
     760:	3708      	adds	r7, #8
     762:	46bd      	mov	sp, r7
     764:	bd80      	pop	{r7, pc}
     766:	bf00      	nop
     768:	00001019 	.word	0x00001019

0000076c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	6078      	str	r0, [r7, #4]
     774:	687b      	ldr	r3, [r7, #4]
     776:	4618      	mov	r0, r3
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
     77a:	4798      	blx	r3
{
} //~Holt_3593_Class
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	4618      	mov	r0, r3
     780:	3708      	adds	r7, #8
     782:	46bd      	mov	sp, r7
     784:	bd80      	pop	{r7, pc}
     786:	bf00      	nop
     788:	00001039 	.word	0x00001039

0000078c <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
     78c:	b480      	push	{r7}
     78e:	b083      	sub	sp, #12
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	6039      	str	r1, [r7, #0]
     796:	683b      	ldr	r3, [r7, #0]
     798:	681a      	ldr	r2, [r3, #0]
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	601a      	str	r2, [r3, #0]
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	3b14      	subs	r3, #20
     7a4:	681b      	ldr	r3, [r3, #0]
     7a6:	461a      	mov	r2, r3
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	4413      	add	r3, r2
     7ac:	683a      	ldr	r2, [r7, #0]
     7ae:	6852      	ldr	r2, [r2, #4]
     7b0:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	4618      	mov	r0, r3
     7b6:	370c      	adds	r7, #12
     7b8:	46bd      	mov	sp, r7
     7ba:	bc80      	pop	{r7}
     7bc:	4770      	bx	lr
	...

000007c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     7c0:	b580      	push	{r7, lr}
     7c2:	b082      	sub	sp, #8
     7c4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     7c6:	4b16      	ldr	r3, [pc, #88]	; (820 <Reset_Handler+0x60>)
     7c8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     7ca:	4b16      	ldr	r3, [pc, #88]	; (824 <Reset_Handler+0x64>)
     7cc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     7ce:	687a      	ldr	r2, [r7, #4]
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	429a      	cmp	r2, r3
     7d4:	d00c      	beq.n	7f0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     7d6:	e007      	b.n	7e8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	1d1a      	adds	r2, r3, #4
     7dc:	603a      	str	r2, [r7, #0]
     7de:	687a      	ldr	r2, [r7, #4]
     7e0:	1d11      	adds	r1, r2, #4
     7e2:	6079      	str	r1, [r7, #4]
     7e4:	6812      	ldr	r2, [r2, #0]
     7e6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     7e8:	683b      	ldr	r3, [r7, #0]
     7ea:	4a0f      	ldr	r2, [pc, #60]	; (828 <Reset_Handler+0x68>)
     7ec:	4293      	cmp	r3, r2
     7ee:	d3f3      	bcc.n	7d8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <Reset_Handler+0x6c>)
     7f2:	603b      	str	r3, [r7, #0]
     7f4:	e004      	b.n	800 <Reset_Handler+0x40>
                *pDest++ = 0;
     7f6:	683b      	ldr	r3, [r7, #0]
     7f8:	1d1a      	adds	r2, r3, #4
     7fa:	603a      	str	r2, [r7, #0]
     7fc:	2200      	movs	r2, #0
     7fe:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     800:	683b      	ldr	r3, [r7, #0]
     802:	4a0b      	ldr	r2, [pc, #44]	; (830 <Reset_Handler+0x70>)
     804:	4293      	cmp	r3, r2
     806:	d3f6      	bcc.n	7f6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     808:	4b0a      	ldr	r3, [pc, #40]	; (834 <Reset_Handler+0x74>)
     80a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     80c:	4a0a      	ldr	r2, [pc, #40]	; (838 <Reset_Handler+0x78>)
     80e:	687b      	ldr	r3, [r7, #4]
     810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     814:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <Reset_Handler+0x7c>)
     818:	4798      	blx	r3

        /* Branch to main function */
        main();
     81a:	4b09      	ldr	r3, [pc, #36]	; (840 <Reset_Handler+0x80>)
     81c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     81e:	e7fe      	b.n	81e <Reset_Handler+0x5e>
     820:	00011db4 	.word	0x00011db4
     824:	20000000 	.word	0x20000000
     828:	2000054c 	.word	0x2000054c
     82c:	20000550 	.word	0x20000550
     830:	200023d4 	.word	0x200023d4
     834:	00000000 	.word	0x00000000
     838:	e000ed00 	.word	0xe000ed00
     83c:	000107c1 	.word	0x000107c1
     840:	00000cd1 	.word	0x00000cd1

00000844 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     844:	b480      	push	{r7}
     846:	af00      	add	r7, sp, #0
        while (1) {
     848:	e7fe      	b.n	848 <Dummy_Handler+0x4>

0000084a <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
     84a:	b480      	push	{r7}
     84c:	b083      	sub	sp, #12
     84e:	af00      	add	r7, sp, #0
     850:	6078      	str	r0, [r7, #4]
    return (void *)0;
     852:	2300      	movs	r3, #0
	}
     854:	4618      	mov	r0, r3
     856:	370c      	adds	r7, #12
     858:	46bd      	mov	sp, r7
     85a:	bc80      	pop	{r7}
     85c:	4770      	bx	lr

0000085e <free>:
//............................................................................
extern "C" void free(void *)
	{
     85e:	b480      	push	{r7}
     860:	b083      	sub	sp, #12
     862:	af00      	add	r7, sp, #0
     864:	6078      	str	r0, [r7, #4]
	}
     866:	bf00      	nop
     868:	370c      	adds	r7, #12
     86a:	46bd      	mov	sp, r7
     86c:	bc80      	pop	{r7}
     86e:	4770      	bx	lr

00000870 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
     870:	b480      	push	{r7}
     872:	af00      	add	r7, sp, #0
		}
     874:	bf00      	nop
     876:	46bd      	mov	sp, r7
     878:	bc80      	pop	{r7}
     87a:	4770      	bx	lr

0000087c <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
     87c:	b580      	push	{r7, lr}
     87e:	b082      	sub	sp, #8
     880:	af00      	add	r7, sp, #0
     882:	6078      	str	r0, [r7, #4]
	free(p);
     884:	6878      	ldr	r0, [r7, #4]
     886:	4b03      	ldr	r3, [pc, #12]	; (894 <_ZdlPv+0x18>)
     888:	4798      	blx	r3
	}
     88a:	bf00      	nop
     88c:	3708      	adds	r7, #8
     88e:	46bd      	mov	sp, r7
     890:	bd80      	pop	{r7, pc}
     892:	bf00      	nop
     894:	0000085f 	.word	0x0000085f

00000898 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	4618      	mov	r0, r3
     8a4:	370c      	adds	r7, #12
     8a6:	46bd      	mov	sp, r7
     8a8:	bc80      	pop	{r7}
     8aa:	4770      	bx	lr

000008ac <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
     8ac:	b480      	push	{r7}
     8ae:	b083      	sub	sp, #12
     8b0:	af00      	add	r7, sp, #0
     8b2:	6078      	str	r0, [r7, #4]
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	4618      	mov	r0, r3
     8b8:	370c      	adds	r7, #12
     8ba:	46bd      	mov	sp, r7
     8bc:	bc80      	pop	{r7}
     8be:	4770      	bx	lr

000008c0 <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
     8c0:	b580      	push	{r7, lr}
     8c2:	b082      	sub	sp, #8
     8c4:	af00      	add	r7, sp, #0
     8c6:	6078      	str	r0, [r7, #4]
     8c8:	6039      	str	r1, [r7, #0]
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2b01      	cmp	r3, #1
     8ce:	d10c      	bne.n	8ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8d0:	683b      	ldr	r3, [r7, #0]
     8d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     8d6:	4293      	cmp	r3, r2
     8d8:	d107      	bne.n	8ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8da:	4806      	ldr	r0, [pc, #24]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8dc:	4b06      	ldr	r3, [pc, #24]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     8de:	4798      	blx	r3
     8e0:	4a06      	ldr	r2, [pc, #24]	; (8fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     8e2:	4907      	ldr	r1, [pc, #28]	; (900 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     8e4:	4803      	ldr	r0, [pc, #12]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8e6:	4b07      	ldr	r3, [pc, #28]	; (904 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     8e8:	4798      	blx	r3
     8ea:	bf00      	nop
     8ec:	3708      	adds	r7, #8
     8ee:	46bd      	mov	sp, r7
     8f0:	bd80      	pop	{r7, pc}
     8f2:	bf00      	nop
     8f4:	20000770 	.word	0x20000770
     8f8:	00000899 	.word	0x00000899
     8fc:	20000000 	.word	0x20000000
     900:	000008ad 	.word	0x000008ad
     904:	0000ed25 	.word	0x0000ed25

00000908 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
     908:	b580      	push	{r7, lr}
     90a:	af00      	add	r7, sp, #0
     90c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     910:	2001      	movs	r0, #1
     912:	4b01      	ldr	r3, [pc, #4]	; (918 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
     914:	4798      	blx	r3
     916:	bd80      	pop	{r7, pc}
     918:	000008c1 	.word	0x000008c1

0000091c <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     91c:	b480      	push	{r7}
     91e:	b083      	sub	sp, #12
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
     924:	6039      	str	r1, [r7, #0]
	{
	data = v;
     926:	687b      	ldr	r3, [r7, #4]
     928:	683a      	ldr	r2, [r7, #0]
     92a:	601a      	str	r2, [r3, #0]
	}
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	4618      	mov	r0, r3
     930:	370c      	adds	r7, #12
     932:	46bd      	mov	sp, r7
     934:	bc80      	pop	{r7}
     936:	4770      	bx	lr

00000938 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
     938:	b580      	push	{r7, lr}
     93a:	b082      	sub	sp, #8
     93c:	af00      	add	r7, sp, #0
     93e:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     940:	687b      	ldr	r3, [r7, #4]
     942:	f64f 72ff 	movw	r2, #65535	; 0xffff
     946:	801a      	strh	r2, [r3, #0]
     948:	687b      	ldr	r3, [r7, #4]
     94a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     94e:	805a      	strh	r2, [r3, #2]
     950:	687b      	ldr	r3, [r7, #4]
     952:	2200      	movs	r2, #0
     954:	605a      	str	r2, [r3, #4]
     956:	687b      	ldr	r3, [r7, #4]
     958:	3308      	adds	r3, #8
     95a:	2100      	movs	r1, #0
     95c:	4618      	mov	r0, r3
     95e:	4b05      	ldr	r3, [pc, #20]	; (974 <_ZN5eventC1Ev+0x3c>)
     960:	4798      	blx	r3
     962:	687b      	ldr	r3, [r7, #4]
     964:	2200      	movs	r2, #0
     966:	60da      	str	r2, [r3, #12]
	{
	}
     968:	687b      	ldr	r3, [r7, #4]
     96a:	4618      	mov	r0, r3
     96c:	3708      	adds	r7, #8
     96e:	46bd      	mov	sp, r7
     970:	bd80      	pop	{r7, pc}
     972:	bf00      	nop
     974:	0000091d 	.word	0x0000091d

00000978 <_ZN18EventHandler_ClassC1Ev>:
	ptrEventHandlerClass->eventTimeout=true;
}


// default constructor
EventHandler_Class::EventHandler_Class()
     978:	b480      	push	{r7}
     97a:	b083      	sub	sp, #12
     97c:	af00      	add	r7, sp, #0
     97e:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     980:	4a04      	ldr	r2, [pc, #16]	; (994 <_ZN18EventHandler_ClassC1Ev+0x1c>)
     982:	687b      	ldr	r3, [r7, #4]
     984:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
     986:	687b      	ldr	r3, [r7, #4]
     988:	4618      	mov	r0, r3
     98a:	370c      	adds	r7, #12
     98c:	46bd      	mov	sp, r7
     98e:	bc80      	pop	{r7}
     990:	4770      	bx	lr
     992:	bf00      	nop
     994:	2000177c 	.word	0x2000177c

00000998 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
     998:	b480      	push	{r7}
     99a:	b083      	sub	sp, #12
     99c:	af00      	add	r7, sp, #0
     99e:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     9a0:	4a04      	ldr	r2, [pc, #16]	; (9b4 <_ZN18EventHandler_ClassD1Ev+0x1c>)
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	4618      	mov	r0, r3
     9aa:	370c      	adds	r7, #12
     9ac:	46bd      	mov	sp, r7
     9ae:	bc80      	pop	{r7}
     9b0:	4770      	bx	lr
     9b2:	bf00      	nop
     9b4:	2000177c 	.word	0x2000177c

000009b8 <_Z41__static_initialization_and_destruction_0ii>:
	return	(uint32_t)eventsInUse;
	
}


     9b8:	b5b0      	push	{r4, r5, r7, lr}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
     9c0:	6039      	str	r1, [r7, #0]
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	2b01      	cmp	r3, #1
     9c6:	d117      	bne.n	9f8 <_Z41__static_initialization_and_destruction_0ii+0x40>
     9c8:	683b      	ldr	r3, [r7, #0]
     9ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
     9ce:	4293      	cmp	r3, r2
     9d0:	d112      	bne.n	9f8 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
     9d2:	4b0b      	ldr	r3, [pc, #44]	; (a00 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     9d4:	24ff      	movs	r4, #255	; 0xff
     9d6:	461d      	mov	r5, r3
     9d8:	2c00      	cmp	r4, #0
     9da:	db05      	blt.n	9e8 <_Z41__static_initialization_and_destruction_0ii+0x30>
     9dc:	4628      	mov	r0, r5
     9de:	4b09      	ldr	r3, [pc, #36]	; (a04 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     9e0:	4798      	blx	r3
     9e2:	3510      	adds	r5, #16
     9e4:	3c01      	subs	r4, #1
     9e6:	e7f7      	b.n	9d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
     9e8:	4807      	ldr	r0, [pc, #28]	; (a08 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9ea:	4b08      	ldr	r3, [pc, #32]	; (a0c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     9ec:	4798      	blx	r3
     9ee:	4a08      	ldr	r2, [pc, #32]	; (a10 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     9f0:	4908      	ldr	r1, [pc, #32]	; (a14 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     9f2:	4805      	ldr	r0, [pc, #20]	; (a08 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9f4:	4b08      	ldr	r3, [pc, #32]	; (a18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     9f6:	4798      	blx	r3
     9f8:	bf00      	nop
     9fa:	3708      	adds	r7, #8
     9fc:	46bd      	mov	sp, r7
     9fe:	bdb0      	pop	{r4, r5, r7, pc}
     a00:	20000774 	.word	0x20000774
     a04:	00000939 	.word	0x00000939
     a08:	2000178c 	.word	0x2000178c
     a0c:	00000979 	.word	0x00000979
     a10:	20000000 	.word	0x20000000
     a14:	00000999 	.word	0x00000999
     a18:	0000ed25 	.word	0x0000ed25

00000a1c <_GLOBAL__sub_I_maxEventCount>:
     a1c:	b580      	push	{r7, lr}
     a1e:	af00      	add	r7, sp, #0
     a20:	f64f 71ff 	movw	r1, #65535	; 0xffff
     a24:	2001      	movs	r0, #1
     a26:	4b01      	ldr	r3, [pc, #4]	; (a2c <_GLOBAL__sub_I_maxEventCount+0x10>)
     a28:	4798      	blx	r3
     a2a:	bd80      	pop	{r7, pc}
     a2c:	000009b9 	.word	0x000009b9

00000a30 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
     a30:	b480      	push	{r7}
     a32:	b083      	sub	sp, #12
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
     a38:	4b04      	ldr	r3, [pc, #16]	; (a4c <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
     a3a:	681b      	ldr	r3, [r3, #0]
     a3c:	2201      	movs	r2, #1
     a3e:	701a      	strb	r2, [r3, #0]

}
     a40:	bf00      	nop
     a42:	370c      	adds	r7, #12
     a44:	46bd      	mov	sp, r7
     a46:	bc80      	pop	{r7}
     a48:	4770      	bx	lr
     a4a:	bf00      	nop
     a4c:	200017a8 	.word	0x200017a8

00000a50 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
     a50:	b480      	push	{r7}
     a52:	b083      	sub	sp, #12
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
     a58:	4b04      	ldr	r3, [pc, #16]	; (a6c <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	2201      	movs	r2, #1
     a5e:	705a      	strb	r2, [r3, #1]
}
     a60:	bf00      	nop
     a62:	370c      	adds	r7, #12
     a64:	46bd      	mov	sp, r7
     a66:	bc80      	pop	{r7}
     a68:	4770      	bx	lr
     a6a:	bf00      	nop
     a6c:	200017a8 	.word	0x200017a8

00000a70 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
     a70:	b580      	push	{r7, lr}
     a72:	b082      	sub	sp, #8
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
     a78:	4b08      	ldr	r3, [pc, #32]	; (a9c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a7a:	681b      	ldr	r3, [r3, #0]
     a7c:	4618      	mov	r0, r3
     a7e:	4b08      	ldr	r3, [pc, #32]	; (aa0 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
     a80:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	2201      	movs	r2, #1
     a88:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a8c:	681b      	ldr	r3, [r3, #0]
     a8e:	2201      	movs	r2, #1
     a90:	705a      	strb	r2, [r3, #1]
 }
     a92:	bf00      	nop
     a94:	3708      	adds	r7, #8
     a96:	46bd      	mov	sp, r7
     a98:	bd80      	pop	{r7, pc}
     a9a:	bf00      	nop
     a9c:	200017a8 	.word	0x200017a8
     aa0:	00000c55 	.word	0x00000c55

00000aa4 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
     aa4:	b480      	push	{r7}
     aa6:	b083      	sub	sp, #12
     aa8:	af00      	add	r7, sp, #0
     aaa:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EEPROM;
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	4a05      	ldr	r2, [pc, #20]	; (ac4 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
     ab0:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
     ab2:	4a05      	ldr	r2, [pc, #20]	; (ac8 <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	4618      	mov	r0, r3
     abc:	370c      	adds	r7, #12
     abe:	46bd      	mov	sp, r7
     ac0:	bc80      	pop	{r7}
     ac2:	4770      	bx	lr
     ac4:	20002304 	.word	0x20002304
     ac8:	200017a8 	.word	0x200017a8

00000acc <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
     acc:	b480      	push	{r7}
     ace:	b083      	sub	sp, #12
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	4618      	mov	r0, r3
     ad8:	370c      	adds	r7, #12
     ada:	46bd      	mov	sp, r7
     adc:	bc80      	pop	{r7}
     ade:	4770      	bx	lr

00000ae0 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
     ae0:	b480      	push	{r7}
     ae2:	b083      	sub	sp, #12
     ae4:	af00      	add	r7, sp, #0
     ae6:	6078      	str	r0, [r7, #4]
     ae8:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	683a      	ldr	r2, [r7, #0]
     aee:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
     af0:	4a03      	ldr	r2, [pc, #12]	; (b00 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	6013      	str	r3, [r2, #0]
}
     af6:	bf00      	nop
     af8:	370c      	adds	r7, #12
     afa:	46bd      	mov	sp, r7
     afc:	bc80      	pop	{r7}
     afe:	4770      	bx	lr
     b00:	200017a8 	.word	0x200017a8

00000b04 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
     b04:	b580      	push	{r7, lr}
     b06:	b084      	sub	sp, #16
     b08:	af00      	add	r7, sp, #0
     b0a:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	689a      	ldr	r2, [r3, #8]
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	3304      	adds	r3, #4
     b14:	4619      	mov	r1, r3
     b16:	4610      	mov	r0, r2
     b18:	4b14      	ldr	r3, [pc, #80]	; (b6c <_ZN14I2C_Asyn_Class4InitEv+0x68>)
     b1a:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
     b1c:	687b      	ldr	r3, [r7, #4]
     b1e:	689b      	ldr	r3, [r3, #8]
     b20:	4618      	mov	r0, r3
     b22:	4b13      	ldr	r3, [pc, #76]	; (b70 <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
     b24:	4798      	blx	r3
     b26:	4603      	mov	r3, r0
     b28:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	689b      	ldr	r3, [r3, #8]
     b2e:	4a11      	ldr	r2, [pc, #68]	; (b74 <_ZN14I2C_Asyn_Class4InitEv+0x70>)
     b30:	2101      	movs	r1, #1
     b32:	4618      	mov	r0, r3
     b34:	4b10      	ldr	r3, [pc, #64]	; (b78 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     b36:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	689b      	ldr	r3, [r3, #8]
     b3c:	4a0f      	ldr	r2, [pc, #60]	; (b7c <_ZN14I2C_Asyn_Class4InitEv+0x78>)
     b3e:	2102      	movs	r1, #2
     b40:	4618      	mov	r0, r3
     b42:	4b0d      	ldr	r3, [pc, #52]	; (b78 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     b44:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	689b      	ldr	r3, [r3, #8]
     b4a:	4a0d      	ldr	r2, [pc, #52]	; (b80 <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
     b4c:	2100      	movs	r1, #0
     b4e:	4618      	mov	r0, r3
     b50:	4b09      	ldr	r3, [pc, #36]	; (b78 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     b52:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	2201      	movs	r2, #1
     b58:	701a      	strb	r2, [r3, #0]
	rxReady=true;
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	2201      	movs	r2, #1
     b5e:	705a      	strb	r2, [r3, #1]
	return ena;
     b60:	7bfb      	ldrb	r3, [r7, #15]
	
}
     b62:	4618      	mov	r0, r3
     b64:	3710      	adds	r7, #16
     b66:	46bd      	mov	sp, r7
     b68:	bd80      	pop	{r7, pc}
     b6a:	bf00      	nop
     b6c:	00003f1f 	.word	0x00003f1f
     b70:	00003e31 	.word	0x00003e31
     b74:	00000a31 	.word	0x00000a31
     b78:	00003ed7 	.word	0x00003ed7
     b7c:	00000a51 	.word	0x00000a51
     b80:	00000a71 	.word	0x00000a71

00000b84 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
     b84:	b580      	push	{r7, lr}
     b86:	b084      	sub	sp, #16
     b88:	af00      	add	r7, sp, #0
     b8a:	6078      	str	r0, [r7, #4]
     b8c:	460b      	mov	r3, r1
     b8e:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
     b90:	6878      	ldr	r0, [r7, #4]
     b92:	4b0c      	ldr	r3, [pc, #48]	; (bc4 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
     b94:	4798      	blx	r3
     b96:	4603      	mov	r3, r0
     b98:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	689b      	ldr	r3, [r3, #8]
     b9e:	78fa      	ldrb	r2, [r7, #3]
     ba0:	b211      	sxth	r1, r2
     ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
     ba6:	4618      	mov	r0, r3
     ba8:	4b07      	ldr	r3, [pc, #28]	; (bc8 <_ZN14I2C_Asyn_Class4InitEh+0x44>)
     baa:	4798      	blx	r3
	txReady=true;
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	2201      	movs	r2, #1
     bb0:	701a      	strb	r2, [r3, #0]
	rxReady=true;
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	2201      	movs	r2, #1
     bb6:	705a      	strb	r2, [r3, #1]
	return ena;
     bb8:	7bfb      	ldrb	r3, [r7, #15]
}
     bba:	4618      	mov	r0, r3
     bbc:	3710      	adds	r7, #16
     bbe:	46bd      	mov	sp, r7
     bc0:	bd80      	pop	{r7, pc}
     bc2:	bf00      	nop
     bc4:	00000b05 	.word	0x00000b05
     bc8:	00003e9d 	.word	0x00003e9d

00000bcc <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
     bcc:	b580      	push	{r7, lr}
     bce:	b084      	sub	sp, #16
     bd0:	af00      	add	r7, sp, #0
     bd2:	60f8      	str	r0, [r7, #12]
     bd4:	60b9      	str	r1, [r7, #8]
     bd6:	4613      	mov	r3, r2
     bd8:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
     bda:	68fb      	ldr	r3, [r7, #12]
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	b2db      	uxtb	r3, r3
     be0:	f083 0301 	eor.w	r3, r3, #1
     be4:	b2db      	uxtb	r3, r3
     be6:	2b00      	cmp	r3, #0
     be8:	d000      	beq.n	bec <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
     bea:	e7f6      	b.n	bda <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
     bec:	68fb      	ldr	r3, [r7, #12]
     bee:	2200      	movs	r2, #0
     bf0:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
     bf2:	68fb      	ldr	r3, [r7, #12]
     bf4:	685b      	ldr	r3, [r3, #4]
     bf6:	88fa      	ldrh	r2, [r7, #6]
     bf8:	68b9      	ldr	r1, [r7, #8]
     bfa:	4618      	mov	r0, r3
     bfc:	4b03      	ldr	r3, [pc, #12]	; (c0c <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
     bfe:	4798      	blx	r3
     c00:	4603      	mov	r3, r0
}
     c02:	4618      	mov	r0, r3
     c04:	3710      	adds	r7, #16
     c06:	46bd      	mov	sp, r7
     c08:	bd80      	pop	{r7, pc}
     c0a:	bf00      	nop
     c0c:	00003f41 	.word	0x00003f41

00000c10 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
     c10:	b580      	push	{r7, lr}
     c12:	b084      	sub	sp, #16
     c14:	af00      	add	r7, sp, #0
     c16:	60f8      	str	r0, [r7, #12]
     c18:	60b9      	str	r1, [r7, #8]
     c1a:	4613      	mov	r3, r2
     c1c:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
     c1e:	68fb      	ldr	r3, [r7, #12]
     c20:	785b      	ldrb	r3, [r3, #1]
     c22:	b2db      	uxtb	r3, r3
     c24:	f083 0301 	eor.w	r3, r3, #1
     c28:	b2db      	uxtb	r3, r3
     c2a:	2b00      	cmp	r3, #0
     c2c:	d000      	beq.n	c30 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
     c2e:	e7f6      	b.n	c1e <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	2200      	movs	r2, #0
     c34:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
     c36:	68fb      	ldr	r3, [r7, #12]
     c38:	685b      	ldr	r3, [r3, #4]
     c3a:	88fa      	ldrh	r2, [r7, #6]
     c3c:	68b9      	ldr	r1, [r7, #8]
     c3e:	4618      	mov	r0, r3
     c40:	4b03      	ldr	r3, [pc, #12]	; (c50 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
     c42:	4798      	blx	r3
     c44:	4603      	mov	r3, r0
}
     c46:	4618      	mov	r0, r3
     c48:	3710      	adds	r7, #16
     c4a:	46bd      	mov	sp, r7
     c4c:	bd80      	pop	{r7, pc}
     c4e:	bf00      	nop
     c50:	00003f91 	.word	0x00003f91

00000c54 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
     c54:	b480      	push	{r7}
     c56:	b083      	sub	sp, #12
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
	 ack=false;
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	2200      	movs	r2, #0
     c60:	709a      	strb	r2, [r3, #2]
	 return ack;
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	789b      	ldrb	r3, [r3, #2]
     c66:	b2db      	uxtb	r3, r3
     c68:	4618      	mov	r0, r3
     c6a:	370c      	adds	r7, #12
     c6c:	46bd      	mov	sp, r7
     c6e:	bc80      	pop	{r7}
     c70:	4770      	bx	lr
	...

00000c74 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
     c74:	b580      	push	{r7, lr}
     c76:	b082      	sub	sp, #8
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	6039      	str	r1, [r7, #0]
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	2b01      	cmp	r3, #1
     c82:	d10c      	bne.n	c9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     c84:	683b      	ldr	r3, [r7, #0]
     c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
     c8a:	4293      	cmp	r3, r2
     c8c:	d107      	bne.n	c9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
     c8e:	4806      	ldr	r0, [pc, #24]	; (ca8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     c90:	4b06      	ldr	r3, [pc, #24]	; (cac <_Z41__static_initialization_and_destruction_0ii+0x38>)
     c92:	4798      	blx	r3
     c94:	4a06      	ldr	r2, [pc, #24]	; (cb0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     c96:	4907      	ldr	r1, [pc, #28]	; (cb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     c98:	4803      	ldr	r0, [pc, #12]	; (ca8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     c9a:	4b07      	ldr	r3, [pc, #28]	; (cb8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     c9c:	4798      	blx	r3
}
     c9e:	bf00      	nop
     ca0:	3708      	adds	r7, #8
     ca2:	46bd      	mov	sp, r7
     ca4:	bd80      	pop	{r7, pc}
     ca6:	bf00      	nop
     ca8:	200017b0 	.word	0x200017b0
     cac:	00000fe5 	.word	0x00000fe5
     cb0:	20000000 	.word	0x20000000
     cb4:	00001005 	.word	0x00001005
     cb8:	0000ed25 	.word	0x0000ed25

00000cbc <_GLOBAL__sub_I_ptrLTSPIClass>:
     cbc:	b580      	push	{r7, lr}
     cbe:	af00      	add	r7, sp, #0
     cc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     cc4:	2001      	movs	r0, #1
     cc6:	4b01      	ldr	r3, [pc, #4]	; (ccc <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
     cc8:	4798      	blx	r3
     cca:	bd80      	pop	{r7, pc}
     ccc:	00000c75 	.word	0x00000c75

00000cd0 <main>:
 */ 

#include "main.h"

int main(void)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     cd4:	4b06      	ldr	r3, [pc, #24]	; (cf0 <main+0x20>)
     cd6:	4798      	blx	r3
	
	usb.Init();
     cd8:	4806      	ldr	r0, [pc, #24]	; (cf4 <main+0x24>)
     cda:	4b07      	ldr	r3, [pc, #28]	; (cf8 <main+0x28>)
     cdc:	4798      	blx	r3
	delay_ms(200);
     cde:	20c8      	movs	r0, #200	; 0xc8
     ce0:	4b06      	ldr	r3, [pc, #24]	; (cfc <main+0x2c>)
     ce2:	4798      	blx	r3
	StartLivePulse();
     ce4:	4b06      	ldr	r3, [pc, #24]	; (d00 <main+0x30>)
     ce6:	4798      	blx	r3
	//QSPIDriverTest();
	//DateTimeTest();
	EEPROM_Test();
     ce8:	4b06      	ldr	r3, [pc, #24]	; (d04 <main+0x34>)
     cea:	4798      	blx	r3
	//IO_ExpanderTest();
		/* Replace with your application code */
	while (1) {
     cec:	e7fe      	b.n	cec <main+0x1c>
     cee:	bf00      	nop
     cf0:	0000245d 	.word	0x0000245d
     cf4:	20001b7c 	.word	0x20001b7c
     cf8:	0000196d 	.word	0x0000196d
     cfc:	00003b49 	.word	0x00003b49
     d00:	00000d09 	.word	0x00000d09
     d04:	00000d55 	.word	0x00000d55

00000d08 <_Z14StartLivePulsev>:
		
		
	}
}

uint8_t	StartLivePulse(void){
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     d0e:	490a      	ldr	r1, [pc, #40]	; (d38 <_Z14StartLivePulsev+0x30>)
     d10:	480a      	ldr	r0, [pc, #40]	; (d3c <_Z14StartLivePulsev+0x34>)
     d12:	4b0b      	ldr	r3, [pc, #44]	; (d40 <_Z14StartLivePulsev+0x38>)
     d14:	4798      	blx	r3
     d16:	4603      	mov	r3, r0
     d18:	490a      	ldr	r1, [pc, #40]	; (d44 <_Z14StartLivePulsev+0x3c>)
     d1a:	4618      	mov	r0, r3
     d1c:	4b0a      	ldr	r3, [pc, #40]	; (d48 <_Z14StartLivePulsev+0x40>)
     d1e:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     d20:	480a      	ldr	r0, [pc, #40]	; (d4c <_Z14StartLivePulsev+0x44>)
     d22:	4b0b      	ldr	r3, [pc, #44]	; (d50 <_Z14StartLivePulsev+0x48>)
     d24:	4798      	blx	r3
     d26:	4603      	mov	r3, r0
     d28:	607b      	str	r3, [r7, #4]
	return p;
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	b2db      	uxtb	r3, r3
}
     d2e:	4618      	mov	r0, r3
     d30:	3708      	adds	r7, #8
     d32:	46bd      	mov	sp, r7
     d34:	bd80      	pop	{r7, pc}
     d36:	bf00      	nop
     d38:	000116ac 	.word	0x000116ac
     d3c:	20001b7c 	.word	0x20001b7c
     d40:	00000f3d 	.word	0x00000f3d
     d44:	000116cc 	.word	0x000116cc
     d48:	00000f5d 	.word	0x00000f5d
     d4c:	20002248 	.word	0x20002248
     d50:	00004045 	.word	0x00004045

00000d54 <_Z11EEPROM_Testv>:
			
			usb<<"it does work"<<NEWLINE;
		}
	}
}
uint8_t EEPROM_Test(void){
     d54:	b580      	push	{r7, lr}
     d56:	b08e      	sub	sp, #56	; 0x38
     d58:	af00      	add	r7, sp, #0
	bool	is_corrupted;
	eeprom.Init();
     d5a:	4865      	ldr	r0, [pc, #404]	; (ef0 <_Z11EEPROM_Testv+0x19c>)
     d5c:	4b65      	ldr	r3, [pc, #404]	; (ef4 <_Z11EEPROM_Testv+0x1a0>)
     d5e:	4798      	blx	r3
	uint8_t addr=0x00;
     d60:	2300      	movs	r3, #0
     d62:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t	value;
	usb<<"  Function for testing an i2c EEPROM"<<NEWLINE;
     d66:	4964      	ldr	r1, [pc, #400]	; (ef8 <_Z11EEPROM_Testv+0x1a4>)
     d68:	4864      	ldr	r0, [pc, #400]	; (efc <_Z11EEPROM_Testv+0x1a8>)
     d6a:	4b65      	ldr	r3, [pc, #404]	; (f00 <_Z11EEPROM_Testv+0x1ac>)
     d6c:	4798      	blx	r3
     d6e:	4603      	mov	r3, r0
     d70:	4964      	ldr	r1, [pc, #400]	; (f04 <_Z11EEPROM_Testv+0x1b0>)
     d72:	4618      	mov	r0, r3
     d74:	4b64      	ldr	r3, [pc, #400]	; (f08 <_Z11EEPROM_Testv+0x1b4>)
     d76:	4798      	blx	r3
	/* Replace with your application code */
		uint8_t tx_buffer[ AT24MAC_BUFFER_SIZE] ;
		uint8_t rx_buffer[ AT24MAC_BUFFER_SIZE] ;
	while (1) {
		for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
     d78:	2300      	movs	r3, #0
     d7a:	633b      	str	r3, [r7, #48]	; 0x30
     d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d7e:	2b0f      	cmp	r3, #15
     d80:	dc18      	bgt.n	db4 <_Z11EEPROM_Testv+0x60>
			tx_buffer[i] = (uint8_t)rand();
     d82:	4b62      	ldr	r3, [pc, #392]	; (f0c <_Z11EEPROM_Testv+0x1b8>)
     d84:	4798      	blx	r3
     d86:	4603      	mov	r3, r0
     d88:	b2d9      	uxtb	r1, r3
     d8a:	f107 0218 	add.w	r2, r7, #24
     d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d90:	4413      	add	r3, r2
     d92:	460a      	mov	r2, r1
     d94:	701a      	strb	r2, [r3, #0]
			rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
     d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d98:	b2db      	uxtb	r3, r3
     d9a:	f1c3 0310 	rsb	r3, r3, #16
     d9e:	b2d9      	uxtb	r1, r3
     da0:	f107 0208 	add.w	r2, r7, #8
     da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     da6:	4413      	add	r3, r2
     da8:	460a      	mov	r2, r1
     daa:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
     dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dae:	3301      	adds	r3, #1
     db0:	633b      	str	r3, [r7, #48]	; 0x30
     db2:	e7e3      	b.n	d7c <_Z11EEPROM_Testv+0x28>
		}
// 		while(!eeprom.IsReady());
// 		eeprom.WriteAddress(tx_buffer,addr,AT24MAC_BUFFER_SIZE);
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++)
     db4:	2300      	movs	r3, #0
     db6:	62fb      	str	r3, [r7, #44]	; 0x2c
     db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dba:	2b0f      	cmp	r3, #15
     dbc:	dc1c      	bgt.n	df8 <_Z11EEPROM_Testv+0xa4>
		{
			while(!eeprom.IsReady());			
     dbe:	484c      	ldr	r0, [pc, #304]	; (ef0 <_Z11EEPROM_Testv+0x19c>)
     dc0:	4b53      	ldr	r3, [pc, #332]	; (f10 <_Z11EEPROM_Testv+0x1bc>)
     dc2:	4798      	blx	r3
     dc4:	4603      	mov	r3, r0
     dc6:	f083 0301 	eor.w	r3, r3, #1
     dca:	b2db      	uxtb	r3, r3
     dcc:	2b00      	cmp	r3, #0
     dce:	d000      	beq.n	dd2 <_Z11EEPROM_Testv+0x7e>
     dd0:	e7f5      	b.n	dbe <_Z11EEPROM_Testv+0x6a>
			eeprom.Write_byte(addr+i,tx_buffer[i]);
     dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dd4:	b2da      	uxtb	r2, r3
     dd6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
     dda:	4413      	add	r3, r2
     ddc:	b2d9      	uxtb	r1, r3
     dde:	f107 0218 	add.w	r2, r7, #24
     de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     de4:	4413      	add	r3, r2
     de6:	781b      	ldrb	r3, [r3, #0]
     de8:	461a      	mov	r2, r3
     dea:	4841      	ldr	r0, [pc, #260]	; (ef0 <_Z11EEPROM_Testv+0x19c>)
     dec:	4b49      	ldr	r3, [pc, #292]	; (f14 <_Z11EEPROM_Testv+0x1c0>)
     dee:	4798      	blx	r3
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++)
     df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     df2:	3301      	adds	r3, #1
     df4:	62fb      	str	r3, [r7, #44]	; 0x2c
     df6:	e7df      	b.n	db8 <_Z11EEPROM_Testv+0x64>
			
		}
// 		while(!eeprom.AcknolledgePolling());
// 		eeprom.ReadAddress(rx_buffer,addr,AT24MAC_BUFFER_SIZE);	
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++)
     df8:	2300      	movs	r3, #0
     dfa:	62bb      	str	r3, [r7, #40]	; 0x28
     dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     dfe:	2b0f      	cmp	r3, #15
     e00:	dc1f      	bgt.n	e42 <_Z11EEPROM_Testv+0xee>
		{

			while(!eeprom.IsReady());
     e02:	483b      	ldr	r0, [pc, #236]	; (ef0 <_Z11EEPROM_Testv+0x19c>)
     e04:	4b42      	ldr	r3, [pc, #264]	; (f10 <_Z11EEPROM_Testv+0x1bc>)
     e06:	4798      	blx	r3
     e08:	4603      	mov	r3, r0
     e0a:	f083 0301 	eor.w	r3, r3, #1
     e0e:	b2db      	uxtb	r3, r3
     e10:	2b00      	cmp	r3, #0
     e12:	d000      	beq.n	e16 <_Z11EEPROM_Testv+0xc2>
     e14:	e7f5      	b.n	e02 <_Z11EEPROM_Testv+0xae>
			rx_buffer[i]=eeprom.Read_byte(addr+i);
     e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e18:	b2da      	uxtb	r2, r3
     e1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
     e1e:	4413      	add	r3, r2
     e20:	b2db      	uxtb	r3, r3
     e22:	4619      	mov	r1, r3
     e24:	4832      	ldr	r0, [pc, #200]	; (ef0 <_Z11EEPROM_Testv+0x19c>)
     e26:	4b3c      	ldr	r3, [pc, #240]	; (f18 <_Z11EEPROM_Testv+0x1c4>)
     e28:	4798      	blx	r3
     e2a:	4603      	mov	r3, r0
     e2c:	4619      	mov	r1, r3
     e2e:	f107 0208 	add.w	r2, r7, #8
     e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e34:	4413      	add	r3, r2
     e36:	460a      	mov	r2, r1
     e38:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++)
     e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e3c:	3301      	adds	r3, #1
     e3e:	62bb      	str	r3, [r7, #40]	; 0x28
     e40:	e7dc      	b.n	dfc <_Z11EEPROM_Testv+0xa8>

		}

		is_corrupted = false;
     e42:	2300      	movs	r3, #0
     e44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
     e48:	2300      	movs	r3, #0
     e4a:	607b      	str	r3, [r7, #4]
     e4c:	687b      	ldr	r3, [r7, #4]
     e4e:	2b0f      	cmp	r3, #15
     e50:	dc2f      	bgt.n	eb2 <_Z11EEPROM_Testv+0x15e>
			if (tx_buffer[i] != rx_buffer[i]) {
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	f107 0238 	add.w	r2, r7, #56	; 0x38
     e58:	4413      	add	r3, r2
     e5a:	f813 2c20 	ldrb.w	r2, [r3, #-32]
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	f107 0138 	add.w	r1, r7, #56	; 0x38
     e64:	440b      	add	r3, r1
     e66:	f813 3c30 	ldrb.w	r3, [r3, #-48]
     e6a:	429a      	cmp	r2, r3
     e6c:	d01d      	beq.n	eaa <_Z11EEPROM_Testv+0x156>
				is_corrupted = true;
     e6e:	2301      	movs	r3, #1
     e70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				usb.print("EEPROM verification failed. Address: ");
     e74:	4929      	ldr	r1, [pc, #164]	; (f1c <_Z11EEPROM_Testv+0x1c8>)
     e76:	4821      	ldr	r0, [pc, #132]	; (efc <_Z11EEPROM_Testv+0x1a8>)
     e78:	4b29      	ldr	r3, [pc, #164]	; (f20 <_Z11EEPROM_Testv+0x1cc>)
     e7a:	4798      	blx	r3
				usb.print(addr,HEX);
     e7c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
     e80:	2210      	movs	r2, #16
     e82:	4619      	mov	r1, r3
     e84:	481d      	ldr	r0, [pc, #116]	; (efc <_Z11EEPROM_Testv+0x1a8>)
     e86:	4b27      	ldr	r3, [pc, #156]	; (f24 <_Z11EEPROM_Testv+0x1d0>)
     e88:	4798      	blx	r3
				usb<<" bit :"<<i<<NEWLINE;
     e8a:	4927      	ldr	r1, [pc, #156]	; (f28 <_Z11EEPROM_Testv+0x1d4>)
     e8c:	481b      	ldr	r0, [pc, #108]	; (efc <_Z11EEPROM_Testv+0x1a8>)
     e8e:	4b27      	ldr	r3, [pc, #156]	; (f2c <_Z11EEPROM_Testv+0x1d8>)
     e90:	4798      	blx	r3
     e92:	4602      	mov	r2, r0
     e94:	1d3b      	adds	r3, r7, #4
     e96:	4619      	mov	r1, r3
     e98:	4610      	mov	r0, r2
     e9a:	4b25      	ldr	r3, [pc, #148]	; (f30 <_Z11EEPROM_Testv+0x1dc>)
     e9c:	4798      	blx	r3
     e9e:	4603      	mov	r3, r0
     ea0:	4918      	ldr	r1, [pc, #96]	; (f04 <_Z11EEPROM_Testv+0x1b0>)
     ea2:	4618      	mov	r0, r3
     ea4:	4b18      	ldr	r3, [pc, #96]	; (f08 <_Z11EEPROM_Testv+0x1b4>)
     ea6:	4798      	blx	r3
		    	//flashAddress=0;
			
				break;
     ea8:	e003      	b.n	eb2 <_Z11EEPROM_Testv+0x15e>
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	3301      	adds	r3, #1
     eae:	607b      	str	r3, [r7, #4]
     eb0:	e7cc      	b.n	e4c <_Z11EEPROM_Testv+0xf8>
			}
		
		}

		if (!is_corrupted) {
     eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
     eb6:	f083 0301 	eor.w	r3, r3, #1
     eba:	b2db      	uxtb	r3, r3
     ebc:	2b00      	cmp	r3, #0
     ebe:	f43f af5b 	beq.w	d78 <_Z11EEPROM_Testv+0x24>
			usb.print("Write - Read is successful in EEPROM memory  " );
     ec2:	491c      	ldr	r1, [pc, #112]	; (f34 <_Z11EEPROM_Testv+0x1e0>)
     ec4:	480d      	ldr	r0, [pc, #52]	; (efc <_Z11EEPROM_Testv+0x1a8>)
     ec6:	4b16      	ldr	r3, [pc, #88]	; (f20 <_Z11EEPROM_Testv+0x1cc>)
     ec8:	4798      	blx	r3
			usb.println(addr,HEX);
     eca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
     ece:	2210      	movs	r2, #16
     ed0:	4619      	mov	r1, r3
     ed2:	480a      	ldr	r0, [pc, #40]	; (efc <_Z11EEPROM_Testv+0x1a8>)
     ed4:	4b18      	ldr	r3, [pc, #96]	; (f38 <_Z11EEPROM_Testv+0x1e4>)
     ed6:	4798      	blx	r3
			addr=(addr+AT24MAC_BUFFER_SIZE)%AT24MAC_MEMORY_SIZE;
     ed8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
     edc:	3310      	adds	r3, #16
     ede:	425a      	negs	r2, r3
     ee0:	b2db      	uxtb	r3, r3
     ee2:	b2d2      	uxtb	r2, r2
     ee4:	bf58      	it	pl
     ee6:	4253      	negpl	r3, r2
     ee8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		}
	}
     eec:	e744      	b.n	d78 <_Z11EEPROM_Testv+0x24>
     eee:	bf00      	nop
     ef0:	200017dc 	.word	0x200017dc
     ef4:	000010a1 	.word	0x000010a1
     ef8:	000116f0 	.word	0x000116f0
     efc:	20001b7c 	.word	0x20001b7c
     f00:	00000f7d 	.word	0x00000f7d
     f04:	000116cc 	.word	0x000116cc
     f08:	00000f5d 	.word	0x00000f5d
     f0c:	000109e1 	.word	0x000109e1
     f10:	000011c5 	.word	0x000011c5
     f14:	00001111 	.word	0x00001111
     f18:	00001165 	.word	0x00001165
     f1c:	00011718 	.word	0x00011718
     f20:	00001d1d 	.word	0x00001d1d
     f24:	00001d61 	.word	0x00001d61
     f28:	00011740 	.word	0x00011740
     f2c:	00000f9d 	.word	0x00000f9d
     f30:	00000fbd 	.word	0x00000fbd
     f34:	00011748 	.word	0x00011748
     f38:	00001e9d 	.word	0x00001e9d

00000f3c <_ZlsIA30_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     f3c:	b580      	push	{r7, lr}
     f3e:	b082      	sub	sp, #8
     f40:	af00      	add	r7, sp, #0
     f42:	6078      	str	r0, [r7, #4]
     f44:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     f46:	6839      	ldr	r1, [r7, #0]
     f48:	6878      	ldr	r0, [r7, #4]
     f4a:	4b03      	ldr	r3, [pc, #12]	; (f58 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     f4c:	4798      	blx	r3
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	4618      	mov	r0, r3
     f52:	3708      	adds	r7, #8
     f54:	46bd      	mov	sp, r7
     f56:	bd80      	pop	{r7, pc}
     f58:	00001d1d 	.word	0x00001d1d

00000f5c <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     f5c:	b580      	push	{r7, lr}
     f5e:	b082      	sub	sp, #8
     f60:	af00      	add	r7, sp, #0
     f62:	6078      	str	r0, [r7, #4]
     f64:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     f66:	6839      	ldr	r1, [r7, #0]
     f68:	6878      	ldr	r0, [r7, #4]
     f6a:	4b03      	ldr	r3, [pc, #12]	; (f78 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     f6c:	4798      	blx	r3
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	4618      	mov	r0, r3
     f72:	3708      	adds	r7, #8
     f74:	46bd      	mov	sp, r7
     f76:	bd80      	pop	{r7, pc}
     f78:	00001d1d 	.word	0x00001d1d

00000f7c <_ZlsIA37_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     f7c:	b580      	push	{r7, lr}
     f7e:	b082      	sub	sp, #8
     f80:	af00      	add	r7, sp, #0
     f82:	6078      	str	r0, [r7, #4]
     f84:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     f86:	6839      	ldr	r1, [r7, #0]
     f88:	6878      	ldr	r0, [r7, #4]
     f8a:	4b03      	ldr	r3, [pc, #12]	; (f98 <_ZlsIA37_cER5PrintS2_RKT_+0x1c>)
     f8c:	4798      	blx	r3
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	4618      	mov	r0, r3
     f92:	3708      	adds	r7, #8
     f94:	46bd      	mov	sp, r7
     f96:	bd80      	pop	{r7, pc}
     f98:	00001d1d 	.word	0x00001d1d

00000f9c <_ZlsIA7_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     f9c:	b580      	push	{r7, lr}
     f9e:	b082      	sub	sp, #8
     fa0:	af00      	add	r7, sp, #0
     fa2:	6078      	str	r0, [r7, #4]
     fa4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     fa6:	6839      	ldr	r1, [r7, #0]
     fa8:	6878      	ldr	r0, [r7, #4]
     faa:	4b03      	ldr	r3, [pc, #12]	; (fb8 <_ZlsIA7_cER5PrintS2_RKT_+0x1c>)
     fac:	4798      	blx	r3
     fae:	687b      	ldr	r3, [r7, #4]
     fb0:	4618      	mov	r0, r3
     fb2:	3708      	adds	r7, #8
     fb4:	46bd      	mov	sp, r7
     fb6:	bd80      	pop	{r7, pc}
     fb8:	00001d1d 	.word	0x00001d1d

00000fbc <_ZlsIiER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     fbc:	b580      	push	{r7, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
     fc4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     fc6:	683b      	ldr	r3, [r7, #0]
     fc8:	681b      	ldr	r3, [r3, #0]
     fca:	220a      	movs	r2, #10
     fcc:	4619      	mov	r1, r3
     fce:	6878      	ldr	r0, [r7, #4]
     fd0:	4b03      	ldr	r3, [pc, #12]	; (fe0 <_ZlsIiER5PrintS1_RKT_+0x24>)
     fd2:	4798      	blx	r3
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	4618      	mov	r0, r3
     fd8:	3708      	adds	r7, #8
     fda:	46bd      	mov	sp, r7
     fdc:	bd80      	pop	{r7, pc}
     fde:	bf00      	nop
     fe0:	00001d89 	.word	0x00001d89

00000fe4 <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
     fe4:	b480      	push	{r7}
     fe6:	b083      	sub	sp, #12
     fe8:	af00      	add	r7, sp, #0
     fea:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
     fec:	4a04      	ldr	r2, [pc, #16]	; (1000 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
     fee:	687b      	ldr	r3, [r7, #4]
     ff0:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
     ff2:	687b      	ldr	r3, [r7, #4]
     ff4:	4618      	mov	r0, r3
     ff6:	370c      	adds	r7, #12
     ff8:	46bd      	mov	sp, r7
     ffa:	bc80      	pop	{r7}
     ffc:	4770      	bx	lr
     ffe:	bf00      	nop
    1000:	200017d0 	.word	0x200017d0

00001004 <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
    1004:	b480      	push	{r7}
    1006:	b083      	sub	sp, #12
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	4618      	mov	r0, r3
    1010:	370c      	adds	r7, #12
    1012:	46bd      	mov	sp, r7
    1014:	bc80      	pop	{r7}
    1016:	4770      	bx	lr

00001018 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    1018:	b480      	push	{r7}
    101a:	b083      	sub	sp, #12
    101c:	af00      	add	r7, sp, #0
    101e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    1020:	4a04      	ldr	r2, [pc, #16]	; (1034 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	4618      	mov	r0, r3
    102a:	370c      	adds	r7, #12
    102c:	46bd      	mov	sp, r7
    102e:	bc80      	pop	{r7}
    1030:	4770      	bx	lr
    1032:	bf00      	nop
    1034:	200017d4 	.word	0x200017d4

00001038 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    1038:	b480      	push	{r7}
    103a:	b083      	sub	sp, #12
    103c:	af00      	add	r7, sp, #0
    103e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	4618      	mov	r0, r3
    1044:	370c      	adds	r7, #12
    1046:	46bd      	mov	sp, r7
    1048:	bc80      	pop	{r7}
    104a:	4770      	bx	lr

0000104c <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
    104c:	b580      	push	{r7, lr}
    104e:	b082      	sub	sp, #8
    1050:	af00      	add	r7, sp, #0
    1052:	6078      	str	r0, [r7, #4]
    1054:	6039      	str	r1, [r7, #0]
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	3308      	adds	r3, #8
    105a:	4618      	mov	r0, r3
    105c:	4b06      	ldr	r3, [pc, #24]	; (1078 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
    105e:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	683a      	ldr	r2, [r7, #0]
    1064:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
    1066:	4a05      	ldr	r2, [pc, #20]	; (107c <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    106c:	687b      	ldr	r3, [r7, #4]
    106e:	4618      	mov	r0, r3
    1070:	3708      	adds	r7, #8
    1072:	46bd      	mov	sp, r7
    1074:	bd80      	pop	{r7, pc}
    1076:	bf00      	nop
    1078:	00000aa5 	.word	0x00000aa5
    107c:	200017d8 	.word	0x200017d8

00001080 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
    1080:	b580      	push	{r7, lr}
    1082:	b082      	sub	sp, #8
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
    1088:	687b      	ldr	r3, [r7, #4]
    108a:	3308      	adds	r3, #8
    108c:	4618      	mov	r0, r3
    108e:	4b03      	ldr	r3, [pc, #12]	; (109c <_ZN13AT24MAC_ClassD1Ev+0x1c>)
    1090:	4798      	blx	r3
{
} //~AT24MAC_Class
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	4618      	mov	r0, r3
    1096:	3708      	adds	r7, #8
    1098:	46bd      	mov	sp, r7
    109a:	bd80      	pop	{r7, pc}
    109c:	00000acd 	.word	0x00000acd

000010a0 <_ZN13AT24MAC_Class4InitEv>:


void AT24MAC_Class::Init(void){
    10a0:	b580      	push	{r7, lr}
    10a2:	b082      	sub	sp, #8
    10a4:	af00      	add	r7, sp, #0
    10a6:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
    10a8:	2156      	movs	r1, #86	; 0x56
    10aa:	6878      	ldr	r0, [r7, #4]
    10ac:	4b02      	ldr	r3, [pc, #8]	; (10b8 <_ZN13AT24MAC_Class4InitEv+0x18>)
    10ae:	4798      	blx	r3
}
    10b0:	bf00      	nop
    10b2:	3708      	adds	r7, #8
    10b4:	46bd      	mov	sp, r7
    10b6:	bd80      	pop	{r7, pc}
    10b8:	000010bd 	.word	0x000010bd

000010bc <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
    10bc:	b580      	push	{r7, lr}
    10be:	b082      	sub	sp, #8
    10c0:	af00      	add	r7, sp, #0
    10c2:	6078      	str	r0, [r7, #4]
    10c4:	460b      	mov	r3, r1
    10c6:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
    10c8:	687b      	ldr	r3, [r7, #4]
    10ca:	78fa      	ldrb	r2, [r7, #3]
    10cc:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	f103 0208 	add.w	r2, r3, #8
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	685b      	ldr	r3, [r3, #4]
    10d8:	4619      	mov	r1, r3
    10da:	4610      	mov	r0, r2
    10dc:	4b0a      	ldr	r3, [pc, #40]	; (1108 <_ZN13AT24MAC_Class4InitEh+0x4c>)
    10de:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	3308      	adds	r3, #8
    10e4:	78fa      	ldrb	r2, [r7, #3]
    10e6:	4611      	mov	r1, r2
    10e8:	4618      	mov	r0, r3
    10ea:	4b08      	ldr	r3, [pc, #32]	; (110c <_ZN13AT24MAC_Class4InitEh+0x50>)
    10ec:	4798      	blx	r3
    10ee:	4603      	mov	r3, r0
    10f0:	2b00      	cmp	r3, #0
    10f2:	bf0c      	ite	eq
    10f4:	2301      	moveq	r3, #1
    10f6:	2300      	movne	r3, #0
    10f8:	b2da      	uxtb	r2, r3
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	701a      	strb	r2, [r3, #0]
}
    10fe:	bf00      	nop
    1100:	3708      	adds	r7, #8
    1102:	46bd      	mov	sp, r7
    1104:	bd80      	pop	{r7, pc}
    1106:	bf00      	nop
    1108:	00000ae1 	.word	0x00000ae1
    110c:	00000b85 	.word	0x00000b85

00001110 <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
    1110:	b580      	push	{r7, lr}
    1112:	b084      	sub	sp, #16
    1114:	af00      	add	r7, sp, #0
    1116:	6078      	str	r0, [r7, #4]
    1118:	460b      	mov	r3, r1
    111a:	70fb      	strb	r3, [r7, #3]
    111c:	4613      	mov	r3, r2
    111e:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	2200      	movs	r2, #0
    1124:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
    1126:	78fb      	ldrb	r3, [r7, #3]
    1128:	723b      	strb	r3, [r7, #8]
	array[1]=value;
    112a:	78bb      	ldrb	r3, [r7, #2]
    112c:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	3308      	adds	r3, #8
    1132:	f107 0108 	add.w	r1, r7, #8
    1136:	2202      	movs	r2, #2
    1138:	4618      	mov	r0, r3
    113a:	4b09      	ldr	r3, [pc, #36]	; (1160 <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
    113c:	4798      	blx	r3
    113e:	4603      	mov	r3, r0
    1140:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
    1142:	687b      	ldr	r3, [r7, #4]
    1144:	7a1b      	ldrb	r3, [r3, #8]
    1146:	b2db      	uxtb	r3, r3
    1148:	f083 0301 	eor.w	r3, r3, #1
    114c:	b2db      	uxtb	r3, r3
    114e:	2b00      	cmp	r3, #0
    1150:	d000      	beq.n	1154 <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
    1152:	e7f6      	b.n	1142 <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
    1154:	68fb      	ldr	r3, [r7, #12]
}
    1156:	4618      	mov	r0, r3
    1158:	3710      	adds	r7, #16
    115a:	46bd      	mov	sp, r7
    115c:	bd80      	pop	{r7, pc}
    115e:	bf00      	nop
    1160:	00000bcd 	.word	0x00000bcd

00001164 <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
    1164:	b580      	push	{r7, lr}
    1166:	b084      	sub	sp, #16
    1168:	af00      	add	r7, sp, #0
    116a:	6078      	str	r0, [r7, #4]
    116c:	460b      	mov	r3, r1
    116e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	3308      	adds	r3, #8
    1174:	1cf9      	adds	r1, r7, #3
    1176:	2201      	movs	r2, #1
    1178:	4618      	mov	r0, r3
    117a:	4b10      	ldr	r3, [pc, #64]	; (11bc <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
    117c:	4798      	blx	r3
	while(!i2ca.txReady);
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	7a1b      	ldrb	r3, [r3, #8]
    1182:	b2db      	uxtb	r3, r3
    1184:	f083 0301 	eor.w	r3, r3, #1
    1188:	b2db      	uxtb	r3, r3
    118a:	2b00      	cmp	r3, #0
    118c:	d000      	beq.n	1190 <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
    118e:	e7f6      	b.n	117e <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	3308      	adds	r3, #8
    1194:	f107 010f 	add.w	r1, r7, #15
    1198:	2201      	movs	r2, #1
    119a:	4618      	mov	r0, r3
    119c:	4b08      	ldr	r3, [pc, #32]	; (11c0 <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
    119e:	4798      	blx	r3
	while(!i2ca.rxReady);
    11a0:	687b      	ldr	r3, [r7, #4]
    11a2:	7a5b      	ldrb	r3, [r3, #9]
    11a4:	b2db      	uxtb	r3, r3
    11a6:	f083 0301 	eor.w	r3, r3, #1
    11aa:	b2db      	uxtb	r3, r3
    11ac:	2b00      	cmp	r3, #0
    11ae:	d000      	beq.n	11b2 <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
    11b0:	e7f6      	b.n	11a0 <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
    11b2:	7bfb      	ldrb	r3, [r7, #15]
}
    11b4:	4618      	mov	r0, r3
    11b6:	3710      	adds	r7, #16
    11b8:	46bd      	mov	sp, r7
    11ba:	bd80      	pop	{r7, pc}
    11bc:	00000bcd 	.word	0x00000bcd
    11c0:	00000c11 	.word	0x00000c11

000011c4 <_ZN13AT24MAC_Class7IsReadyEv>:
	} while (!IsReady());
	return isReady;
}


bool AT24MAC_Class::IsReady(void){
    11c4:	b480      	push	{r7}
    11c6:	b083      	sub	sp, #12
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	7a1b      	ldrb	r3, [r3, #8]
    11d0:	b2db      	uxtb	r3, r3
    11d2:	2b00      	cmp	r3, #0
    11d4:	d006      	beq.n	11e4 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	7a5b      	ldrb	r3, [r3, #9]
    11da:	b2db      	uxtb	r3, r3
    11dc:	2b00      	cmp	r3, #0
    11de:	d001      	beq.n	11e4 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
    11e0:	2301      	movs	r3, #1
    11e2:	e000      	b.n	11e6 <_ZN13AT24MAC_Class7IsReadyEv+0x22>
    11e4:	2300      	movs	r3, #0
    11e6:	2b00      	cmp	r3, #0
    11e8:	d003      	beq.n	11f2 <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
    11ea:	687b      	ldr	r3, [r7, #4]
    11ec:	2201      	movs	r2, #1
    11ee:	701a      	strb	r2, [r3, #0]
    11f0:	e002      	b.n	11f8 <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
    11f2:	687b      	ldr	r3, [r7, #4]
    11f4:	2200      	movs	r2, #0
    11f6:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	781b      	ldrb	r3, [r3, #0]
    11fc:	b2db      	uxtb	r3, r3
}
    11fe:	4618      	mov	r0, r3
    1200:	370c      	adds	r7, #12
    1202:	46bd      	mov	sp, r7
    1204:	bc80      	pop	{r7}
    1206:	4770      	bx	lr

00001208 <_Z41__static_initialization_and_destruction_0ii>:

    1208:	b580      	push	{r7, lr}
    120a:	b082      	sub	sp, #8
    120c:	af00      	add	r7, sp, #0
    120e:	6078      	str	r0, [r7, #4]
    1210:	6039      	str	r1, [r7, #0]
    1212:	687b      	ldr	r3, [r7, #4]
    1214:	2b01      	cmp	r3, #1
    1216:	d10d      	bne.n	1234 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1218:	683b      	ldr	r3, [r7, #0]
    121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    121e:	4293      	cmp	r3, r2
    1220:	d108      	bne.n	1234 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1222:	4906      	ldr	r1, [pc, #24]	; (123c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1224:	4806      	ldr	r0, [pc, #24]	; (1240 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1226:	4b07      	ldr	r3, [pc, #28]	; (1244 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1228:	4798      	blx	r3
    122a:	4a07      	ldr	r2, [pc, #28]	; (1248 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    122c:	4907      	ldr	r1, [pc, #28]	; (124c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    122e:	4804      	ldr	r0, [pc, #16]	; (1240 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1230:	4b07      	ldr	r3, [pc, #28]	; (1250 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1232:	4798      	blx	r3
    1234:	bf00      	nop
    1236:	3708      	adds	r7, #8
    1238:	46bd      	mov	sp, r7
    123a:	bd80      	pop	{r7, pc}
    123c:	20002304 	.word	0x20002304
    1240:	200017dc 	.word	0x200017dc
    1244:	0000104d 	.word	0x0000104d
    1248:	20000000 	.word	0x20000000
    124c:	00001081 	.word	0x00001081
    1250:	0000ed25 	.word	0x0000ed25

00001254 <_GLOBAL__sub_I_ptrAT24MACClass>:
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
    1258:	f64f 71ff 	movw	r1, #65535	; 0xffff
    125c:	2001      	movs	r0, #1
    125e:	4b01      	ldr	r3, [pc, #4]	; (1264 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    1260:	4798      	blx	r3
    1262:	bd80      	pop	{r7, pc}
    1264:	00001209 	.word	0x00001209

00001268 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    1268:	b480      	push	{r7}
    126a:	b083      	sub	sp, #12
    126c:	af00      	add	r7, sp, #0
    126e:	6078      	str	r0, [r7, #4]
    1270:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	683a      	ldr	r2, [r7, #0]
    1276:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	4a04      	ldr	r2, [pc, #16]	; (128c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    127c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    1280:	687b      	ldr	r3, [r7, #4]
    1282:	4618      	mov	r0, r3
    1284:	370c      	adds	r7, #12
    1286:	46bd      	mov	sp, r7
    1288:	bc80      	pop	{r7}
    128a:	4770      	bx	lr
    128c:	001fff00 	.word	0x001fff00

00001290 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    1290:	b480      	push	{r7}
    1292:	b083      	sub	sp, #12
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    1298:	687b      	ldr	r3, [r7, #4]
    129a:	4618      	mov	r0, r3
    129c:	370c      	adds	r7, #12
    129e:	46bd      	mov	sp, r7
    12a0:	bc80      	pop	{r7}
    12a2:	4770      	bx	lr

000012a4 <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
    12a4:	b580      	push	{r7, lr}
    12a6:	b082      	sub	sp, #8
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]
    12ac:	6039      	str	r1, [r7, #0]
    12ae:	687b      	ldr	r3, [r7, #4]
    12b0:	2b01      	cmp	r3, #1
    12b2:	d10d      	bne.n	12d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    12b4:	683b      	ldr	r3, [r7, #0]
    12b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ba:	4293      	cmp	r3, r2
    12bc:	d108      	bne.n	12d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    12be:	4906      	ldr	r1, [pc, #24]	; (12d8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    12c0:	4806      	ldr	r0, [pc, #24]	; (12dc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    12c2:	4b07      	ldr	r3, [pc, #28]	; (12e0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    12c4:	4798      	blx	r3
    12c6:	4a07      	ldr	r2, [pc, #28]	; (12e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    12c8:	4907      	ldr	r1, [pc, #28]	; (12e8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    12ca:	4804      	ldr	r0, [pc, #16]	; (12dc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    12cc:	4b07      	ldr	r3, [pc, #28]	; (12ec <_Z41__static_initialization_and_destruction_0ii+0x48>)
    12ce:	4798      	blx	r3
    12d0:	bf00      	nop
    12d2:	3708      	adds	r7, #8
    12d4:	46bd      	mov	sp, r7
    12d6:	bd80      	pop	{r7, pc}
    12d8:	2000220c 	.word	0x2000220c
    12dc:	2000180c 	.word	0x2000180c
    12e0:	00001269 	.word	0x00001269
    12e4:	20000000 	.word	0x20000000
    12e8:	00001291 	.word	0x00001291
    12ec:	0000ed25 	.word	0x0000ed25

000012f0 <_GLOBAL__sub_I_ptrN25Q256Class>:
    12f0:	b580      	push	{r7, lr}
    12f2:	af00      	add	r7, sp, #0
    12f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    12f8:	2001      	movs	r0, #1
    12fa:	4b01      	ldr	r3, [pc, #4]	; (1300 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    12fc:	4798      	blx	r3
    12fe:	bd80      	pop	{r7, pc}
    1300:	000012a5 	.word	0x000012a5

00001304 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    1304:	b580      	push	{r7, lr}
    1306:	b082      	sub	sp, #8
    1308:	af00      	add	r7, sp, #0
    130a:	6078      	str	r0, [r7, #4]
    130c:	6039      	str	r1, [r7, #0]
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	4618      	mov	r0, r3
    1312:	4b08      	ldr	r3, [pc, #32]	; (1334 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    1314:	4798      	blx	r3
    1316:	4a08      	ldr	r2, [pc, #32]	; (1338 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	683a      	ldr	r2, [r7, #0]
    1320:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    1324:	4a05      	ldr	r2, [pc, #20]	; (133c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    1326:	687b      	ldr	r3, [r7, #4]
    1328:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	4618      	mov	r0, r3
    132e:	3708      	adds	r7, #8
    1330:	46bd      	mov	sp, r7
    1332:	bd80      	pop	{r7, pc}
    1334:	00001619 	.word	0x00001619
    1338:	00011894 	.word	0x00011894
    133c:	20001a40 	.word	0x20001a40

00001340 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    1340:	b580      	push	{r7, lr}
    1342:	b082      	sub	sp, #8
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
    1348:	4a05      	ldr	r2, [pc, #20]	; (1360 <_ZN14Calendar_ClassD1Ev+0x20>)
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	601a      	str	r2, [r3, #0]
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	4618      	mov	r0, r3
    1352:	4b04      	ldr	r3, [pc, #16]	; (1364 <_ZN14Calendar_ClassD1Ev+0x24>)
    1354:	4798      	blx	r3
{
} //~Calendar_Class
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	4618      	mov	r0, r3
    135a:	3708      	adds	r7, #8
    135c:	46bd      	mov	sp, r7
    135e:	bd80      	pop	{r7, pc}
    1360:	00011894 	.word	0x00011894
    1364:	00001639 	.word	0x00001639

00001368 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    1368:	b580      	push	{r7, lr}
    136a:	b082      	sub	sp, #8
    136c:	af00      	add	r7, sp, #0
    136e:	6078      	str	r0, [r7, #4]
    1370:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1378:	6839      	ldr	r1, [r7, #0]
    137a:	4618      	mov	r0, r3
    137c:	4b03      	ldr	r3, [pc, #12]	; (138c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    137e:	4798      	blx	r3
    1380:	4603      	mov	r3, r0
}
    1382:	4618      	mov	r0, r3
    1384:	3708      	adds	r7, #8
    1386:	46bd      	mov	sp, r7
    1388:	bd80      	pop	{r7, pc}
    138a:	bf00      	nop
    138c:	0000398d 	.word	0x0000398d

00001390 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    1390:	b480      	push	{r7}
    1392:	b083      	sub	sp, #12
    1394:	af00      	add	r7, sp, #0
    1396:	6078      	str	r0, [r7, #4]
    1398:	460b      	mov	r3, r1
    139a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    139c:	887b      	ldrh	r3, [r7, #2]
    139e:	f003 0303 	and.w	r3, r3, #3
    13a2:	2b00      	cmp	r3, #0
    13a4:	d001      	beq.n	13aa <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    13a6:	2300      	movs	r3, #0
    13a8:	e000      	b.n	13ac <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    13aa:	2301      	movs	r3, #1
	}
}
    13ac:	4618      	mov	r0, r3
    13ae:	370c      	adds	r7, #12
    13b0:	46bd      	mov	sp, r7
    13b2:	bc80      	pop	{r7}
    13b4:	4770      	bx	lr
	...

000013b8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    13b8:	b580      	push	{r7, lr}
    13ba:	b086      	sub	sp, #24
    13bc:	af00      	add	r7, sp, #0
    13be:	6078      	str	r0, [r7, #4]
    13c0:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    13c2:	2300      	movs	r3, #0
    13c4:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    13c6:	2300      	movs	r3, #0
    13c8:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    13ca:	683b      	ldr	r3, [r7, #0]
    13cc:	88db      	ldrh	r3, [r3, #6]
    13ce:	b2da      	uxtb	r2, r3
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    13d6:	699b      	ldr	r3, [r3, #24]
    13d8:	b2db      	uxtb	r3, r3
    13da:	1ad3      	subs	r3, r2, r3
    13dc:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    13de:	683b      	ldr	r3, [r7, #0]
    13e0:	795b      	ldrb	r3, [r3, #5]
    13e2:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    13e4:	683b      	ldr	r3, [r7, #0]
    13e6:	791b      	ldrb	r3, [r3, #4]
    13e8:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    13ea:	683b      	ldr	r3, [r7, #0]
    13ec:	789b      	ldrb	r3, [r3, #2]
    13ee:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    13f0:	683b      	ldr	r3, [r7, #0]
    13f2:	785b      	ldrb	r3, [r3, #1]
    13f4:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    13f6:	683b      	ldr	r3, [r7, #0]
    13f8:	781b      	ldrb	r3, [r3, #0]
    13fa:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    13fc:	2300      	movs	r3, #0
    13fe:	613b      	str	r3, [r7, #16]
    1400:	7bfa      	ldrb	r2, [r7, #15]
    1402:	693b      	ldr	r3, [r7, #16]
    1404:	429a      	cmp	r2, r3
    1406:	d91e      	bls.n	1446 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    140e:	699b      	ldr	r3, [r3, #24]
    1410:	b29a      	uxth	r2, r3
    1412:	693b      	ldr	r3, [r7, #16]
    1414:	b29b      	uxth	r3, r3
    1416:	4413      	add	r3, r2
    1418:	b29b      	uxth	r3, r3
    141a:	4619      	mov	r1, r3
    141c:	6878      	ldr	r0, [r7, #4]
    141e:	4b27      	ldr	r3, [pc, #156]	; (14bc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    1420:	4798      	blx	r3
    1422:	4603      	mov	r3, r0
    1424:	2b00      	cmp	r3, #0
    1426:	d006      	beq.n	1436 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    1428:	697b      	ldr	r3, [r7, #20]
    142a:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    142e:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    1432:	617b      	str	r3, [r7, #20]
    1434:	e003      	b.n	143e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    1436:	697a      	ldr	r2, [r7, #20]
    1438:	4b21      	ldr	r3, [pc, #132]	; (14c0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    143a:	4413      	add	r3, r2
    143c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    143e:	693b      	ldr	r3, [r7, #16]
    1440:	3301      	adds	r3, #1
    1442:	613b      	str	r3, [r7, #16]
    1444:	e7dc      	b.n	1400 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    1446:	2301      	movs	r3, #1
    1448:	613b      	str	r3, [r7, #16]
    144a:	7bba      	ldrb	r2, [r7, #14]
    144c:	693b      	ldr	r3, [r7, #16]
    144e:	429a      	cmp	r2, r3
    1450:	d910      	bls.n	1474 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    1452:	683b      	ldr	r3, [r7, #0]
    1454:	88db      	ldrh	r3, [r3, #6]
    1456:	4619      	mov	r1, r3
    1458:	693b      	ldr	r3, [r7, #16]
    145a:	b2db      	uxtb	r3, r3
    145c:	461a      	mov	r2, r3
    145e:	6878      	ldr	r0, [r7, #4]
    1460:	4b18      	ldr	r3, [pc, #96]	; (14c4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    1462:	4798      	blx	r3
    1464:	4602      	mov	r2, r0
    1466:	697b      	ldr	r3, [r7, #20]
    1468:	4413      	add	r3, r2
    146a:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    146c:	693b      	ldr	r3, [r7, #16]
    146e:	3301      	adds	r3, #1
    1470:	613b      	str	r3, [r7, #16]
    1472:	e7ea      	b.n	144a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    1474:	7b7b      	ldrb	r3, [r7, #13]
    1476:	3b01      	subs	r3, #1
    1478:	4a13      	ldr	r2, [pc, #76]	; (14c8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    147a:	fb02 f303 	mul.w	r3, r2, r3
    147e:	461a      	mov	r2, r3
    1480:	697b      	ldr	r3, [r7, #20]
    1482:	4413      	add	r3, r2
    1484:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    1486:	7b3b      	ldrb	r3, [r7, #12]
    1488:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    148c:	fb02 f303 	mul.w	r3, r2, r3
    1490:	461a      	mov	r2, r3
    1492:	697b      	ldr	r3, [r7, #20]
    1494:	4413      	add	r3, r2
    1496:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1498:	7afa      	ldrb	r2, [r7, #11]
    149a:	4613      	mov	r3, r2
    149c:	011b      	lsls	r3, r3, #4
    149e:	1a9b      	subs	r3, r3, r2
    14a0:	009b      	lsls	r3, r3, #2
    14a2:	461a      	mov	r2, r3
    14a4:	697b      	ldr	r3, [r7, #20]
    14a6:	4413      	add	r3, r2
    14a8:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    14aa:	7abb      	ldrb	r3, [r7, #10]
    14ac:	697a      	ldr	r2, [r7, #20]
    14ae:	4413      	add	r3, r2
    14b0:	617b      	str	r3, [r7, #20]

	return tmp;
    14b2:	697b      	ldr	r3, [r7, #20]
}
    14b4:	4618      	mov	r0, r3
    14b6:	3718      	adds	r7, #24
    14b8:	46bd      	mov	sp, r7
    14ba:	bd80      	pop	{r7, pc}
    14bc:	00001391 	.word	0x00001391
    14c0:	01e13380 	.word	0x01e13380
    14c4:	000014cd 	.word	0x000014cd
    14c8:	00015180 	.word	0x00015180

000014cc <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	b086      	sub	sp, #24
    14d0:	af00      	add	r7, sp, #0
    14d2:	60f8      	str	r0, [r7, #12]
    14d4:	60b9      	str	r1, [r7, #8]
    14d6:	4613      	mov	r3, r2
    14d8:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    14da:	2300      	movs	r3, #0
    14dc:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    14de:	68bb      	ldr	r3, [r7, #8]
    14e0:	b29b      	uxth	r3, r3
    14e2:	4619      	mov	r1, r3
    14e4:	68f8      	ldr	r0, [r7, #12]
    14e6:	4b2f      	ldr	r3, [pc, #188]	; (15a4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    14e8:	4798      	blx	r3
    14ea:	4603      	mov	r3, r0
    14ec:	2b00      	cmp	r3, #0
    14ee:	d028      	beq.n	1542 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    14f0:	79fb      	ldrb	r3, [r7, #7]
    14f2:	3b01      	subs	r3, #1
    14f4:	2b0b      	cmp	r3, #11
    14f6:	d84c      	bhi.n	1592 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    14f8:	a201      	add	r2, pc, #4	; (adr r2, 1500 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    14fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14fe:	bf00      	nop
    1500:	00001531 	.word	0x00001531
    1504:	00001537 	.word	0x00001537
    1508:	00001531 	.word	0x00001531
    150c:	0000153d 	.word	0x0000153d
    1510:	00001531 	.word	0x00001531
    1514:	0000153d 	.word	0x0000153d
    1518:	00001531 	.word	0x00001531
    151c:	00001531 	.word	0x00001531
    1520:	0000153d 	.word	0x0000153d
    1524:	00001531 	.word	0x00001531
    1528:	0000153d 	.word	0x0000153d
    152c:	00001531 	.word	0x00001531
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1530:	4b1d      	ldr	r3, [pc, #116]	; (15a8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1532:	617b      	str	r3, [r7, #20]
			break;
    1534:	e030      	b.n	1598 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    1536:	4b1d      	ldr	r3, [pc, #116]	; (15ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    1538:	617b      	str	r3, [r7, #20]
			break;
    153a:	e02d      	b.n	1598 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    153c:	4b1c      	ldr	r3, [pc, #112]	; (15b0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    153e:	617b      	str	r3, [r7, #20]
			break;
    1540:	e02a      	b.n	1598 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    1542:	79fb      	ldrb	r3, [r7, #7]
    1544:	3b01      	subs	r3, #1
    1546:	2b0b      	cmp	r3, #11
    1548:	d825      	bhi.n	1596 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    154a:	a201      	add	r2, pc, #4	; (adr r2, 1550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1550:	00001581 	.word	0x00001581
    1554:	00001587 	.word	0x00001587
    1558:	00001581 	.word	0x00001581
    155c:	0000158d 	.word	0x0000158d
    1560:	00001581 	.word	0x00001581
    1564:	0000158d 	.word	0x0000158d
    1568:	00001581 	.word	0x00001581
    156c:	00001581 	.word	0x00001581
    1570:	0000158d 	.word	0x0000158d
    1574:	00001581 	.word	0x00001581
    1578:	0000158d 	.word	0x0000158d
    157c:	00001581 	.word	0x00001581
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1580:	4b09      	ldr	r3, [pc, #36]	; (15a8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1582:	617b      	str	r3, [r7, #20]
			break;
    1584:	e008      	b.n	1598 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    1586:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    1588:	617b      	str	r3, [r7, #20]
			break;
    158a:	e005      	b.n	1598 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    158c:	4b08      	ldr	r3, [pc, #32]	; (15b0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    158e:	617b      	str	r3, [r7, #20]
			break;
    1590:	e002      	b.n	1598 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    1592:	bf00      	nop
    1594:	e000      	b.n	1598 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    1596:	bf00      	nop
		}
	}

	return sec_in_month;
    1598:	697b      	ldr	r3, [r7, #20]
}
    159a:	4618      	mov	r0, r3
    159c:	3718      	adds	r7, #24
    159e:	46bd      	mov	sp, r7
    15a0:	bd80      	pop	{r7, pc}
    15a2:	bf00      	nop
    15a4:	00001391 	.word	0x00001391
    15a8:	0028de80 	.word	0x0028de80
    15ac:	00263b80 	.word	0x00263b80
    15b0:	00278d00 	.word	0x00278d00
    15b4:	0024ea00 	.word	0x0024ea00

000015b8 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    15b8:	b580      	push	{r7, lr}
    15ba:	b082      	sub	sp, #8
    15bc:	af00      	add	r7, sp, #0
    15be:	6078      	str	r0, [r7, #4]
    15c0:	6039      	str	r1, [r7, #0]
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	2b01      	cmp	r3, #1
    15c6:	d10d      	bne.n	15e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    15c8:	683b      	ldr	r3, [r7, #0]
    15ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    15ce:	4293      	cmp	r3, r2
    15d0:	d108      	bne.n	15e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    15d2:	4906      	ldr	r1, [pc, #24]	; (15ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
    15d4:	4806      	ldr	r0, [pc, #24]	; (15f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    15d6:	4b07      	ldr	r3, [pc, #28]	; (15f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    15d8:	4798      	blx	r3
    15da:	4a07      	ldr	r2, [pc, #28]	; (15f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    15dc:	4907      	ldr	r1, [pc, #28]	; (15fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    15de:	4804      	ldr	r0, [pc, #16]	; (15f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    15e0:	4b07      	ldr	r3, [pc, #28]	; (1600 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    15e2:	4798      	blx	r3
    15e4:	bf00      	nop
    15e6:	3708      	adds	r7, #8
    15e8:	46bd      	mov	sp, r7
    15ea:	bd80      	pop	{r7, pc}
    15ec:	20002344 	.word	0x20002344
    15f0:	20001a48 	.word	0x20001a48
    15f4:	00001305 	.word	0x00001305
    15f8:	20000000 	.word	0x20000000
    15fc:	00001341 	.word	0x00001341
    1600:	0000ed25 	.word	0x0000ed25

00001604 <_GLOBAL__sub_I_ptrCalendarClass>:
    1604:	b580      	push	{r7, lr}
    1606:	af00      	add	r7, sp, #0
    1608:	f64f 71ff 	movw	r1, #65535	; 0xffff
    160c:	2001      	movs	r0, #1
    160e:	4b01      	ldr	r3, [pc, #4]	; (1614 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    1610:	4798      	blx	r3
    1612:	bd80      	pop	{r7, pc}
    1614:	000015b9 	.word	0x000015b9

00001618 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    1618:	b480      	push	{r7}
    161a:	b083      	sub	sp, #12
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
    1620:	4a04      	ldr	r2, [pc, #16]	; (1634 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	601a      	str	r2, [r3, #0]
{
} //~D
    1626:	687b      	ldr	r3, [r7, #4]
    1628:	4618      	mov	r0, r3
    162a:	370c      	adds	r7, #12
    162c:	46bd      	mov	sp, r7
    162e:	bc80      	pop	{r7}
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	000118a4 	.word	0x000118a4

00001638 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    1638:	b480      	push	{r7}
    163a:	b083      	sub	sp, #12
    163c:	af00      	add	r7, sp, #0
    163e:	6078      	str	r0, [r7, #4]
    1640:	4a04      	ldr	r2, [pc, #16]	; (1654 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	4618      	mov	r0, r3
    164a:	370c      	adds	r7, #12
    164c:	46bd      	mov	sp, r7
    164e:	bc80      	pop	{r7}
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	000118a4 	.word	0x000118a4

00001658 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    1658:	b580      	push	{r7, lr}
    165a:	b082      	sub	sp, #8
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    1660:	4b04      	ldr	r3, [pc, #16]	; (1674 <_ZL7task_cbPK10timer_task+0x1c>)
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	4618      	mov	r0, r3
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <_ZL7task_cbPK10timer_task+0x20>)
    1668:	4798      	blx	r3
}
    166a:	bf00      	nop
    166c:	3708      	adds	r7, #8
    166e:	46bd      	mov	sp, r7
    1670:	bd80      	pop	{r7, pc}
    1672:	bf00      	nop
    1674:	20001af0 	.word	0x20001af0
    1678:	00001707 	.word	0x00001707

0000167c <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
    167c:	b480      	push	{r7}
    167e:	b083      	sub	sp, #12
    1680:	af00      	add	r7, sp, #0
    1682:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	687a      	ldr	r2, [r7, #4]
    1688:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    168a:	4a08      	ldr	r2, [pc, #32]	; (16ac <_ZN11Timer_ClassC1Ev+0x30>)
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1696:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    1698:	687b      	ldr	r3, [r7, #4]
    169a:	4a05      	ldr	r2, [pc, #20]	; (16b0 <_ZN11Timer_ClassC1Ev+0x34>)
    169c:	621a      	str	r2, [r3, #32]
} //Timer_Class
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	4618      	mov	r0, r3
    16a2:	370c      	adds	r7, #12
    16a4:	46bd      	mov	sp, r7
    16a6:	bc80      	pop	{r7}
    16a8:	4770      	bx	lr
    16aa:	bf00      	nop
    16ac:	20001af0 	.word	0x20001af0
    16b0:	00001659 	.word	0x00001659

000016b4 <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    16b4:	b480      	push	{r7}
    16b6:	b083      	sub	sp, #12
    16b8:	af00      	add	r7, sp, #0
    16ba:	6078      	str	r0, [r7, #4]
    16bc:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	683a      	ldr	r2, [r7, #0]
    16c2:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    16c4:	4a07      	ldr	r2, [pc, #28]	; (16e4 <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    16d0:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	4a04      	ldr	r2, [pc, #16]	; (16e8 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    16d6:	621a      	str	r2, [r3, #32]
} //Timer_Class
    16d8:	687b      	ldr	r3, [r7, #4]
    16da:	4618      	mov	r0, r3
    16dc:	370c      	adds	r7, #12
    16de:	46bd      	mov	sp, r7
    16e0:	bc80      	pop	{r7}
    16e2:	4770      	bx	lr
    16e4:	20001af0 	.word	0x20001af0
    16e8:	00001659 	.word	0x00001659

000016ec <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    16ec:	b480      	push	{r7}
    16ee:	b083      	sub	sp, #12
    16f0:	af00      	add	r7, sp, #0
    16f2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	2200      	movs	r2, #0
    16f8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	4618      	mov	r0, r3
    16fe:	370c      	adds	r7, #12
    1700:	46bd      	mov	sp, r7
    1702:	bc80      	pop	{r7}
    1704:	4770      	bx	lr

00001706 <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    1706:	b480      	push	{r7}
    1708:	b083      	sub	sp, #12
    170a:	af00      	add	r7, sp, #0
    170c:	6078      	str	r0, [r7, #4]
	timeout=1;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	2201      	movs	r2, #1
    1712:	705a      	strb	r2, [r3, #1]
}
    1714:	bf00      	nop
    1716:	370c      	adds	r7, #12
    1718:	46bd      	mov	sp, r7
    171a:	bc80      	pop	{r7}
    171c:	4770      	bx	lr
	...

00001720 <_Z41__static_initialization_and_destruction_0ii>:
	return ticks;
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
    1720:	b580      	push	{r7, lr}
    1722:	b082      	sub	sp, #8
    1724:	af00      	add	r7, sp, #0
    1726:	6078      	str	r0, [r7, #4]
    1728:	6039      	str	r1, [r7, #0]
    172a:	687b      	ldr	r3, [r7, #4]
    172c:	2b01      	cmp	r3, #1
    172e:	d11f      	bne.n	1770 <_Z41__static_initialization_and_destruction_0ii+0x50>
    1730:	683b      	ldr	r3, [r7, #0]
    1732:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1736:	4293      	cmp	r3, r2
    1738:	d11a      	bne.n	1770 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
    173a:	490f      	ldr	r1, [pc, #60]	; (1778 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    173c:	480f      	ldr	r0, [pc, #60]	; (177c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    173e:	4b10      	ldr	r3, [pc, #64]	; (1780 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1740:	4798      	blx	r3
    1742:	4a10      	ldr	r2, [pc, #64]	; (1784 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1744:	4910      	ldr	r1, [pc, #64]	; (1788 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1746:	480d      	ldr	r0, [pc, #52]	; (177c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1748:	4b10      	ldr	r3, [pc, #64]	; (178c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    174a:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    174c:	4910      	ldr	r1, [pc, #64]	; (1790 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    174e:	4811      	ldr	r0, [pc, #68]	; (1794 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1750:	4b0b      	ldr	r3, [pc, #44]	; (1780 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1752:	4798      	blx	r3
    1754:	4a0b      	ldr	r2, [pc, #44]	; (1784 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1756:	490c      	ldr	r1, [pc, #48]	; (1788 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1758:	480e      	ldr	r0, [pc, #56]	; (1794 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    175a:	4b0c      	ldr	r3, [pc, #48]	; (178c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    175c:	4798      	blx	r3
    175e:	490e      	ldr	r1, [pc, #56]	; (1798 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1760:	480e      	ldr	r0, [pc, #56]	; (179c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1762:	4b07      	ldr	r3, [pc, #28]	; (1780 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1764:	4798      	blx	r3
    1766:	4a07      	ldr	r2, [pc, #28]	; (1784 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1768:	4907      	ldr	r1, [pc, #28]	; (1788 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    176a:	480c      	ldr	r0, [pc, #48]	; (179c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    176c:	4b07      	ldr	r3, [pc, #28]	; (178c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    176e:	4798      	blx	r3
    1770:	bf00      	nop
    1772:	3708      	adds	r7, #8
    1774:	46bd      	mov	sp, r7
    1776:	bd80      	pop	{r7, pc}
    1778:	20002210 	.word	0x20002210
    177c:	20001af4 	.word	0x20001af4
    1780:	000016b5 	.word	0x000016b5
    1784:	20000000 	.word	0x20000000
    1788:	000016ed 	.word	0x000016ed
    178c:	0000ed25 	.word	0x0000ed25
    1790:	200022e8 	.word	0x200022e8
    1794:	20001b20 	.word	0x20001b20
    1798:	2000222c 	.word	0x2000222c
    179c:	20001b4c 	.word	0x20001b4c

000017a0 <_GLOBAL__sub_I_ptrTimerClass>:
    17a0:	b580      	push	{r7, lr}
    17a2:	af00      	add	r7, sp, #0
    17a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    17a8:	2001      	movs	r0, #1
    17aa:	4b01      	ldr	r3, [pc, #4]	; (17b0 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    17ac:	4798      	blx	r3
    17ae:	bd80      	pop	{r7, pc}
    17b0:	00001721 	.word	0x00001721

000017b4 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    17b4:	b480      	push	{r7}
    17b6:	b083      	sub	sp, #12
    17b8:	af00      	add	r7, sp, #0
    17ba:	6078      	str	r0, [r7, #4]
    17bc:	4a05      	ldr	r2, [pc, #20]	; (17d4 <_ZN5PrintC1Ev+0x20>)
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	601a      	str	r2, [r3, #0]
    17c2:	687b      	ldr	r3, [r7, #4]
    17c4:	2200      	movs	r2, #0
    17c6:	605a      	str	r2, [r3, #4]
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	4618      	mov	r0, r3
    17cc:	370c      	adds	r7, #12
    17ce:	46bd      	mov	sp, r7
    17d0:	bc80      	pop	{r7}
    17d2:	4770      	bx	lr
    17d4:	00011920 	.word	0x00011920

000017d8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    17d8:	b480      	push	{r7}
    17da:	b083      	sub	sp, #12
    17dc:	af00      	add	r7, sp, #0
    17de:	6078      	str	r0, [r7, #4]
    17e0:	2300      	movs	r3, #0
    17e2:	4618      	mov	r0, r3
    17e4:	370c      	adds	r7, #12
    17e6:	46bd      	mov	sp, r7
    17e8:	bc80      	pop	{r7}
    17ea:	4770      	bx	lr

000017ec <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    17ec:	b480      	push	{r7}
    17ee:	b083      	sub	sp, #12
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
    17f4:	bf00      	nop
    17f6:	370c      	adds	r7, #12
    17f8:	46bd      	mov	sp, r7
    17fa:	bc80      	pop	{r7}
    17fc:	4770      	bx	lr
	...

00001800 <_ZN6StreamC1Ev>:
    Stream() {_timeout=1000;}
    1800:	b580      	push	{r7, lr}
    1802:	b082      	sub	sp, #8
    1804:	af00      	add	r7, sp, #0
    1806:	6078      	str	r0, [r7, #4]
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	4618      	mov	r0, r3
    180c:	4b06      	ldr	r3, [pc, #24]	; (1828 <_ZN6StreamC1Ev+0x28>)
    180e:	4798      	blx	r3
    1810:	4a06      	ldr	r2, [pc, #24]	; (182c <_ZN6StreamC1Ev+0x2c>)
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	601a      	str	r2, [r3, #0]
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    181c:	609a      	str	r2, [r3, #8]
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	4618      	mov	r0, r3
    1822:	3708      	adds	r7, #8
    1824:	46bd      	mov	sp, r7
    1826:	bd80      	pop	{r7, pc}
    1828:	000017b5 	.word	0x000017b5
    182c:	000118e4 	.word	0x000118e4

00001830 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1830:	b480      	push	{r7}
    1832:	b083      	sub	sp, #12
    1834:	af00      	add	r7, sp, #0
    1836:	4603      	mov	r3, r0
    1838:	603a      	str	r2, [r7, #0]
    183a:	71fb      	strb	r3, [r7, #7]
    183c:	460b      	mov	r3, r1
    183e:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    1840:	4b08      	ldr	r3, [pc, #32]	; (1864 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1842:	681b      	ldr	r3, [r3, #0]
    1844:	2201      	movs	r2, #1
    1846:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	2201      	movs	r2, #1
    184e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    1850:	4b04      	ldr	r3, [pc, #16]	; (1864 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	2201      	movs	r2, #1
    1856:	741a      	strb	r2, [r3, #16]


	return false;
    1858:	2300      	movs	r3, #0
}
    185a:	4618      	mov	r0, r3
    185c:	370c      	adds	r7, #12
    185e:	46bd      	mov	sp, r7
    1860:	bc80      	pop	{r7}
    1862:	4770      	bx	lr
    1864:	20001b78 	.word	0x20001b78

00001868 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1868:	b480      	push	{r7}
    186a:	b083      	sub	sp, #12
    186c:	af00      	add	r7, sp, #0
    186e:	4603      	mov	r3, r0
    1870:	603a      	str	r2, [r7, #0]
    1872:	71fb      	strb	r3, [r7, #7]
    1874:	460b      	mov	r3, r1
    1876:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    1878:	4b08      	ldr	r3, [pc, #32]	; (189c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	2201      	movs	r2, #1
    187e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    1880:	4b06      	ldr	r3, [pc, #24]	; (189c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1882:	681b      	ldr	r3, [r3, #0]
    1884:	2201      	movs	r2, #1
    1886:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    1888:	4b04      	ldr	r3, [pc, #16]	; (189c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	2201      	movs	r2, #1
    188e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    1890:	2300      	movs	r3, #0
}
    1892:	4618      	mov	r0, r3
    1894:	370c      	adds	r7, #12
    1896:	46bd      	mov	sp, r7
    1898:	bc80      	pop	{r7}
    189a:	4770      	bx	lr
    189c:	20001b78 	.word	0x20001b78

000018a0 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    18a0:	b580      	push	{r7, lr}
    18a2:	b082      	sub	sp, #8
    18a4:	af00      	add	r7, sp, #0
    18a6:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    18a8:	793b      	ldrb	r3, [r7, #4]
    18aa:	f003 0301 	and.w	r3, r3, #1
    18ae:	b2db      	uxtb	r3, r3
    18b0:	2b00      	cmp	r3, #0
    18b2:	d013      	beq.n	18dc <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    18b4:	490c      	ldr	r1, [pc, #48]	; (18e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    18b6:	2000      	movs	r0, #0
    18b8:	4b0c      	ldr	r3, [pc, #48]	; (18ec <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    18ba:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    18bc:	490c      	ldr	r1, [pc, #48]	; (18f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    18be:	2001      	movs	r0, #1
    18c0:	4b0a      	ldr	r3, [pc, #40]	; (18ec <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    18c2:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    18c4:	4b0b      	ldr	r3, [pc, #44]	; (18f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    18c6:	681b      	ldr	r3, [r3, #0]
    18c8:	2201      	movs	r2, #1
    18ca:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    18cc:	4b09      	ldr	r3, [pc, #36]	; (18f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    18ce:	681b      	ldr	r3, [r3, #0]
    18d0:	2201      	movs	r2, #1
    18d2:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    18d4:	4b07      	ldr	r3, [pc, #28]	; (18f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	2201      	movs	r2, #1
    18da:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    18dc:	2300      	movs	r3, #0
}
    18de:	4618      	mov	r0, r3
    18e0:	3708      	adds	r7, #8
    18e2:	46bd      	mov	sp, r7
    18e4:	bd80      	pop	{r7, pc}
    18e6:	bf00      	nop
    18e8:	00001831 	.word	0x00001831
    18ec:	0000dca9 	.word	0x0000dca9
    18f0:	00001869 	.word	0x00001869
    18f4:	20001b78 	.word	0x20001b78

000018f8 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    18f8:	b580      	push	{r7, lr}
    18fa:	b082      	sub	sp, #8
    18fc:	af00      	add	r7, sp, #0
    18fe:	6078      	str	r0, [r7, #4]
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	4618      	mov	r0, r3
    1904:	4b0a      	ldr	r3, [pc, #40]	; (1930 <_ZN9CDC_ClassC1Ev+0x38>)
    1906:	4798      	blx	r3
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	3310      	adds	r3, #16
    190c:	4618      	mov	r0, r3
    190e:	4b09      	ldr	r3, [pc, #36]	; (1934 <_ZN9CDC_ClassC1Ev+0x3c>)
    1910:	4798      	blx	r3
    1912:	4a09      	ldr	r2, [pc, #36]	; (1938 <_ZN9CDC_ClassC1Ev+0x40>)
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	f04f 32ff 	mov.w	r2, #4294967295
    191e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    1920:	4a06      	ldr	r2, [pc, #24]	; (193c <_ZN9CDC_ClassC1Ev+0x44>)
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	4618      	mov	r0, r3
    192a:	3708      	adds	r7, #8
    192c:	46bd      	mov	sp, r7
    192e:	bd80      	pop	{r7, pc}
    1930:	00001801 	.word	0x00001801
    1934:	0000209d 	.word	0x0000209d
    1938:	000118b4 	.word	0x000118b4
    193c:	20001b78 	.word	0x20001b78

00001940 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    1940:	b580      	push	{r7, lr}
    1942:	b082      	sub	sp, #8
    1944:	af00      	add	r7, sp, #0
    1946:	6078      	str	r0, [r7, #4]
    1948:	4a06      	ldr	r2, [pc, #24]	; (1964 <_ZN9CDC_ClassD1Ev+0x24>)
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	601a      	str	r2, [r3, #0]
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	3310      	adds	r3, #16
    1952:	4618      	mov	r0, r3
    1954:	4b04      	ldr	r3, [pc, #16]	; (1968 <_ZN9CDC_ClassD1Ev+0x28>)
    1956:	4798      	blx	r3
{
} //~CDC_Class
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	4618      	mov	r0, r3
    195c:	3708      	adds	r7, #8
    195e:	46bd      	mov	sp, r7
    1960:	bd80      	pop	{r7, pc}
    1962:	bf00      	nop
    1964:	000118b4 	.word	0x000118b4
    1968:	000020bd 	.word	0x000020bd

0000196c <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
	
	OnInit();
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	3310      	adds	r3, #16
    1978:	4618      	mov	r0, r3
    197a:	4b06      	ldr	r3, [pc, #24]	; (1994 <_ZN9CDC_Class4InitEv+0x28>)
    197c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    197e:	4906      	ldr	r1, [pc, #24]	; (1998 <_ZN9CDC_Class4InitEv+0x2c>)
    1980:	2003      	movs	r0, #3
    1982:	4b06      	ldr	r3, [pc, #24]	; (199c <_ZN9CDC_Class4InitEv+0x30>)
    1984:	4798      	blx	r3
	
		
	if (plugged)
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	7c1b      	ldrb	r3, [r3, #16]
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	

}
    198a:	bf00      	nop
    198c:	3708      	adds	r7, #8
    198e:	46bd      	mov	sp, r7
    1990:	bd80      	pop	{r7, pc}
    1992:	bf00      	nop
    1994:	000020d1 	.word	0x000020d1
    1998:	000018a1 	.word	0x000018a1
    199c:	0000dca9 	.word	0x0000dca9

000019a0 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    19a0:	b580      	push	{r7, lr}
    19a2:	b082      	sub	sp, #8
    19a4:	af00      	add	r7, sp, #0
    19a6:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    19a8:	4b03      	ldr	r3, [pc, #12]	; (19b8 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    19aa:	4798      	blx	r3
    19ac:	4603      	mov	r3, r0
	
}
    19ae:	4618      	mov	r0, r3
    19b0:	3708      	adds	r7, #8
    19b2:	46bd      	mov	sp, r7
    19b4:	bd80      	pop	{r7, pc}
    19b6:	bf00      	nop
    19b8:	0000dd21 	.word	0x0000dd21

000019bc <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    19bc:	b580      	push	{r7, lr}
    19be:	b084      	sub	sp, #16
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	699b      	ldr	r3, [r3, #24]
    19c8:	f1b3 3fff 	cmp.w	r3, #4294967295
    19cc:	bf14      	ite	ne
    19ce:	2301      	movne	r3, #1
    19d0:	2300      	moveq	r3, #0
    19d2:	b2db      	uxtb	r3, r3
    19d4:	2b00      	cmp	r3, #0
    19d6:	d002      	beq.n	19de <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	699b      	ldr	r3, [r3, #24]
    19dc:	e011      	b.n	1a02 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	331c      	adds	r3, #28
    19e4:	681b      	ldr	r3, [r3, #0]
    19e6:	f107 010f 	add.w	r1, r7, #15
    19ea:	2201      	movs	r2, #1
    19ec:	6878      	ldr	r0, [r7, #4]
    19ee:	4798      	blx	r3
    19f0:	4602      	mov	r2, r0
    19f2:	687b      	ldr	r3, [r7, #4]
    19f4:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    19f6:	7bfb      	ldrb	r3, [r7, #15]
    19f8:	461a      	mov	r2, r3
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	699b      	ldr	r3, [r3, #24]
}
    1a02:	4618      	mov	r0, r3
    1a04:	3710      	adds	r7, #16
    1a06:	46bd      	mov	sp, r7
    1a08:	bd80      	pop	{r7, pc}
	...

00001a0c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	b086      	sub	sp, #24
    1a10:	af00      	add	r7, sp, #0
    1a12:	60f8      	str	r0, [r7, #12]
    1a14:	60b9      	str	r1, [r7, #8]
    1a16:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    1a18:	68fb      	ldr	r3, [r7, #12]
    1a1a:	2200      	movs	r2, #0
    1a1c:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	4619      	mov	r1, r3
    1a22:	68b8      	ldr	r0, [r7, #8]
    1a24:	4b08      	ldr	r3, [pc, #32]	; (1a48 <_ZN9CDC_Class8readDataEPvl+0x3c>)
    1a26:	4798      	blx	r3
    1a28:	4603      	mov	r3, r0
    1a2a:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    1a2c:	68fb      	ldr	r3, [r7, #12]
    1a2e:	7d5b      	ldrb	r3, [r3, #21]
    1a30:	b2db      	uxtb	r3, r3
    1a32:	f083 0301 	eor.w	r3, r3, #1
    1a36:	b2db      	uxtb	r3, r3
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d000      	beq.n	1a3e <_ZN9CDC_Class8readDataEPvl+0x32>
    1a3c:	e7f6      	b.n	1a2c <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    1a3e:	7dfb      	ldrb	r3, [r7, #23]
}
    1a40:	4618      	mov	r0, r3
    1a42:	3718      	adds	r7, #24
    1a44:	46bd      	mov	sp, r7
    1a46:	bd80      	pop	{r7, pc}
    1a48:	0000dbfd 	.word	0x0000dbfd

00001a4c <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b084      	sub	sp, #16
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	2200      	movs	r2, #0
    1a58:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    1a5a:	f107 030f 	add.w	r3, r7, #15
    1a5e:	2101      	movs	r1, #1
    1a60:	4618      	mov	r0, r3
    1a62:	4b08      	ldr	r3, [pc, #32]	; (1a84 <_ZN9CDC_Class4readEv+0x38>)
    1a64:	4798      	blx	r3
	while(!rxReady);
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	7d5b      	ldrb	r3, [r3, #21]
    1a6a:	b2db      	uxtb	r3, r3
    1a6c:	f083 0301 	eor.w	r3, r3, #1
    1a70:	b2db      	uxtb	r3, r3
    1a72:	2b00      	cmp	r3, #0
    1a74:	d000      	beq.n	1a78 <_ZN9CDC_Class4readEv+0x2c>
    1a76:	e7f6      	b.n	1a66 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    1a78:	7bfb      	ldrb	r3, [r7, #15]
}
    1a7a:	4618      	mov	r0, r3
    1a7c:	3710      	adds	r7, #16
    1a7e:	46bd      	mov	sp, r7
    1a80:	bd80      	pop	{r7, pc}
    1a82:	bf00      	nop
    1a84:	0000dbfd 	.word	0x0000dbfd

00001a88 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    1a88:	b580      	push	{r7, lr}
    1a8a:	b082      	sub	sp, #8
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	331c      	adds	r3, #28
    1a94:	2140      	movs	r1, #64	; 0x40
    1a96:	4618      	mov	r0, r3
    1a98:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <_ZN9CDC_Class5flushEv+0x1c>)
    1a9a:	4798      	blx	r3
}
    1a9c:	bf00      	nop
    1a9e:	3708      	adds	r7, #8
    1aa0:	46bd      	mov	sp, r7
    1aa2:	bd80      	pop	{r7, pc}
    1aa4:	0000dc41 	.word	0x0000dc41

00001aa8 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    1aa8:	b580      	push	{r7, lr}
    1aaa:	b082      	sub	sp, #8
    1aac:	af00      	add	r7, sp, #0
    1aae:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    1ab0:	4b02      	ldr	r3, [pc, #8]	; (1abc <_ZN9CDC_Class5clearEv+0x14>)
    1ab2:	4798      	blx	r3
}
    1ab4:	bf00      	nop
    1ab6:	3708      	adds	r7, #8
    1ab8:	46bd      	mov	sp, r7
    1aba:	bd80      	pop	{r7, pc}
    1abc:	0000dc85 	.word	0x0000dc85

00001ac0 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	6078      	str	r0, [r7, #4]
    1ac8:	460b      	mov	r3, r1
    1aca:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	7d1b      	ldrb	r3, [r3, #20]
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	f083 0301 	eor.w	r3, r3, #1
    1ad6:	b2db      	uxtb	r3, r3
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d000      	beq.n	1ade <_ZN9CDC_Class5writeEh+0x1e>
    1adc:	e7f6      	b.n	1acc <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	3324      	adds	r3, #36	; 0x24
    1ae4:	681b      	ldr	r3, [r3, #0]
    1ae6:	1cf9      	adds	r1, r7, #3
    1ae8:	2201      	movs	r2, #1
    1aea:	6878      	ldr	r0, [r7, #4]
    1aec:	4798      	blx	r3
    1aee:	4603      	mov	r3, r0
}
    1af0:	4618      	mov	r0, r3
    1af2:	3708      	adds	r7, #8
    1af4:	46bd      	mov	sp, r7
    1af6:	bd80      	pop	{r7, pc}

00001af8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	b086      	sub	sp, #24
    1afc:	af00      	add	r7, sp, #0
    1afe:	60f8      	str	r0, [r7, #12]
    1b00:	60b9      	str	r1, [r7, #8]
    1b02:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    1b04:	68fb      	ldr	r3, [r7, #12]
    1b06:	2200      	movs	r2, #0
    1b08:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	3310      	adds	r3, #16
    1b0e:	4618      	mov	r0, r3
    1b10:	4b14      	ldr	r3, [pc, #80]	; (1b64 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    1b12:	4798      	blx	r3
    1b14:	4603      	mov	r3, r0
    1b16:	2b00      	cmp	r3, #0
    1b18:	d01e      	beq.n	1b58 <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	4619      	mov	r1, r3
    1b1e:	68b8      	ldr	r0, [r7, #8]
    1b20:	4b11      	ldr	r3, [pc, #68]	; (1b68 <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    1b22:	4798      	blx	r3
    1b24:	4603      	mov	r3, r0
    1b26:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    1b28:	68fb      	ldr	r3, [r7, #12]
    1b2a:	7d1b      	ldrb	r3, [r3, #20]
    1b2c:	b2db      	uxtb	r3, r3
    1b2e:	f083 0301 	eor.w	r3, r3, #1
    1b32:	b2db      	uxtb	r3, r3
    1b34:	2b00      	cmp	r3, #0
    1b36:	d006      	beq.n	1b46 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    1b38:	68fb      	ldr	r3, [r7, #12]
    1b3a:	7c5b      	ldrb	r3, [r3, #17]
    1b3c:	b2db      	uxtb	r3, r3
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d001      	beq.n	1b46 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    1b42:	2301      	movs	r3, #1
    1b44:	e000      	b.n	1b48 <_ZN9CDC_Class9writeDataEPKvl+0x50>
    1b46:	2300      	movs	r3, #0
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d000      	beq.n	1b4e <_ZN9CDC_Class9writeDataEPKvl+0x56>
    1b4c:	e7ec      	b.n	1b28 <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTimer.Stop();
    1b4e:	4807      	ldr	r0, [pc, #28]	; (1b6c <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    1b50:	4b07      	ldr	r3, [pc, #28]	; (1b70 <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    1b52:	4798      	blx	r3
		return r;
    1b54:	697b      	ldr	r3, [r7, #20]
    1b56:	e000      	b.n	1b5a <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    1b58:	2300      	movs	r3, #0
	}
	

}
    1b5a:	4618      	mov	r0, r3
    1b5c:	3718      	adds	r7, #24
    1b5e:	46bd      	mov	sp, r7
    1b60:	bd80      	pop	{r7, pc}
    1b62:	bf00      	nop
    1b64:	0000216d 	.word	0x0000216d
    1b68:	0000dc41 	.word	0x0000dc41
    1b6c:	20001be4 	.word	0x20001be4
    1b70:	0000232d 	.word	0x0000232d

00001b74 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    1b74:	b580      	push	{r7, lr}
    1b76:	b086      	sub	sp, #24
    1b78:	af00      	add	r7, sp, #0
    1b7a:	60f8      	str	r0, [r7, #12]
    1b7c:	60b9      	str	r1, [r7, #8]
    1b7e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    1b80:	68fb      	ldr	r3, [r7, #12]
    1b82:	2200      	movs	r2, #0
    1b84:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (CheckTerminal(size)){
    1b86:	68fb      	ldr	r3, [r7, #12]
    1b88:	3310      	adds	r3, #16
    1b8a:	6879      	ldr	r1, [r7, #4]
    1b8c:	4618      	mov	r0, r3
    1b8e:	4b14      	ldr	r3, [pc, #80]	; (1be0 <_ZN9CDC_Class5writeEPKhj+0x6c>)
    1b90:	4798      	blx	r3
    1b92:	4603      	mov	r3, r0
    1b94:	2b00      	cmp	r3, #0
    1b96:	d01c      	beq.n	1bd2 <_ZN9CDC_Class5writeEPKhj+0x5e>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    1b98:	6879      	ldr	r1, [r7, #4]
    1b9a:	68b8      	ldr	r0, [r7, #8]
    1b9c:	4b11      	ldr	r3, [pc, #68]	; (1be4 <_ZN9CDC_Class5writeEPKhj+0x70>)
    1b9e:	4798      	blx	r3
    1ba0:	4603      	mov	r3, r0
    1ba2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    1ba4:	68fb      	ldr	r3, [r7, #12]
    1ba6:	7d1b      	ldrb	r3, [r3, #20]
    1ba8:	b2db      	uxtb	r3, r3
    1baa:	f083 0301 	eor.w	r3, r3, #1
    1bae:	b2db      	uxtb	r3, r3
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d006      	beq.n	1bc2 <_ZN9CDC_Class5writeEPKhj+0x4e>
    1bb4:	68fb      	ldr	r3, [r7, #12]
    1bb6:	7c5b      	ldrb	r3, [r3, #17]
    1bb8:	b2db      	uxtb	r3, r3
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d001      	beq.n	1bc2 <_ZN9CDC_Class5writeEPKhj+0x4e>
    1bbe:	2301      	movs	r3, #1
    1bc0:	e000      	b.n	1bc4 <_ZN9CDC_Class5writeEPKhj+0x50>
    1bc2:	2300      	movs	r3, #0
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d000      	beq.n	1bca <_ZN9CDC_Class5writeEPKhj+0x56>
    1bc8:	e7ec      	b.n	1ba4 <_ZN9CDC_Class5writeEPKhj+0x30>
		//while((!txReady));
		usbTimer.Stop();
    1bca:	4807      	ldr	r0, [pc, #28]	; (1be8 <_ZN9CDC_Class5writeEPKhj+0x74>)
    1bcc:	4b07      	ldr	r3, [pc, #28]	; (1bec <_ZN9CDC_Class5writeEPKhj+0x78>)
    1bce:	4798      	blx	r3
    1bd0:	e001      	b.n	1bd6 <_ZN9CDC_Class5writeEPKhj+0x62>
	}else{
 		r=0;
    1bd2:	2300      	movs	r3, #0
    1bd4:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    1bd6:	697b      	ldr	r3, [r7, #20]
}
    1bd8:	4618      	mov	r0, r3
    1bda:	3718      	adds	r7, #24
    1bdc:	46bd      	mov	sp, r7
    1bde:	bd80      	pop	{r7, pc}
    1be0:	000021e5 	.word	0x000021e5
    1be4:	0000dc41 	.word	0x0000dc41
    1be8:	20001be4 	.word	0x20001be4
    1bec:	0000232d 	.word	0x0000232d

00001bf0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    1bf0:	b480      	push	{r7}
    1bf2:	b083      	sub	sp, #12
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	7d5b      	ldrb	r3, [r3, #21]
    1bfc:	b2db      	uxtb	r3, r3
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d006      	beq.n	1c10 <_ZN9CDC_Class9availableEv+0x20>
    1c02:	687b      	ldr	r3, [r7, #4]
    1c04:	7d1b      	ldrb	r3, [r3, #20]
    1c06:	b2db      	uxtb	r3, r3
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d001      	beq.n	1c10 <_ZN9CDC_Class9availableEv+0x20>
    1c0c:	2301      	movs	r3, #1
    1c0e:	e000      	b.n	1c12 <_ZN9CDC_Class9availableEv+0x22>
    1c10:	2300      	movs	r3, #0
    1c12:	2b00      	cmp	r3, #0
    1c14:	d001      	beq.n	1c1a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    1c16:	2301      	movs	r3, #1
    1c18:	e000      	b.n	1c1c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    1c1a:	2300      	movs	r3, #0
	}
	
}
    1c1c:	4618      	mov	r0, r3
    1c1e:	370c      	adds	r7, #12
    1c20:	46bd      	mov	sp, r7
    1c22:	bc80      	pop	{r7}
    1c24:	4770      	bx	lr
	...

00001c28 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    1c28:	b580      	push	{r7, lr}
    1c2a:	b082      	sub	sp, #8
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
    1c30:	6039      	str	r1, [r7, #0]
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	2b01      	cmp	r3, #1
    1c36:	d10c      	bne.n	1c52 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1c38:	683b      	ldr	r3, [r7, #0]
    1c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1c3e:	4293      	cmp	r3, r2
    1c40:	d107      	bne.n	1c52 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1c42:	4806      	ldr	r0, [pc, #24]	; (1c5c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1c44:	4b06      	ldr	r3, [pc, #24]	; (1c60 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1c46:	4798      	blx	r3
    1c48:	4a06      	ldr	r2, [pc, #24]	; (1c64 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1c4a:	4907      	ldr	r1, [pc, #28]	; (1c68 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1c4c:	4803      	ldr	r0, [pc, #12]	; (1c5c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1c4e:	4b07      	ldr	r3, [pc, #28]	; (1c6c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1c50:	4798      	blx	r3
    1c52:	bf00      	nop
    1c54:	3708      	adds	r7, #8
    1c56:	46bd      	mov	sp, r7
    1c58:	bd80      	pop	{r7, pc}
    1c5a:	bf00      	nop
    1c5c:	20001b7c 	.word	0x20001b7c
    1c60:	000018f9 	.word	0x000018f9
    1c64:	20000000 	.word	0x20000000
    1c68:	00001941 	.word	0x00001941
    1c6c:	0000ed25 	.word	0x0000ed25

00001c70 <_GLOBAL__sub_I_ptrCDCClass>:
    1c70:	b580      	push	{r7, lr}
    1c72:	af00      	add	r7, sp, #0
    1c74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c78:	2001      	movs	r0, #1
    1c7a:	4b01      	ldr	r3, [pc, #4]	; (1c80 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    1c7c:	4798      	blx	r3
    1c7e:	bd80      	pop	{r7, pc}
    1c80:	00001c29 	.word	0x00001c29

00001c84 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    1c84:	b590      	push	{r4, r7, lr}
    1c86:	b083      	sub	sp, #12
    1c88:	af00      	add	r7, sp, #0
    1c8a:	6078      	str	r0, [r7, #4]
    1c8c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    1c8e:	683b      	ldr	r3, [r7, #0]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d101      	bne.n	1c98 <_ZN5Print5writeEPKc+0x14>
    1c94:	2300      	movs	r3, #0
    1c96:	e00c      	b.n	1cb2 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	681b      	ldr	r3, [r3, #0]
    1c9c:	3304      	adds	r3, #4
    1c9e:	681c      	ldr	r4, [r3, #0]
    1ca0:	6838      	ldr	r0, [r7, #0]
    1ca2:	4b06      	ldr	r3, [pc, #24]	; (1cbc <_ZN5Print5writeEPKc+0x38>)
    1ca4:	4798      	blx	r3
    1ca6:	4603      	mov	r3, r0
    1ca8:	461a      	mov	r2, r3
    1caa:	6839      	ldr	r1, [r7, #0]
    1cac:	6878      	ldr	r0, [r7, #4]
    1cae:	47a0      	blx	r4
    1cb0:	4603      	mov	r3, r0
    }
    1cb2:	4618      	mov	r0, r3
    1cb4:	370c      	adds	r7, #12
    1cb6:	46bd      	mov	sp, r7
    1cb8:	bd90      	pop	{r4, r7, pc}
    1cba:	bf00      	nop
    1cbc:	00010a41 	.word	0x00010a41

00001cc0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	b086      	sub	sp, #24
    1cc4:	af00      	add	r7, sp, #0
    1cc6:	60f8      	str	r0, [r7, #12]
    1cc8:	60b9      	str	r1, [r7, #8]
    1cca:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    1ccc:	2300      	movs	r3, #0
    1cce:	617b      	str	r3, [r7, #20]
  while (size--) {
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	1e5a      	subs	r2, r3, #1
    1cd4:	607a      	str	r2, [r7, #4]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	bf14      	ite	ne
    1cda:	2301      	movne	r3, #1
    1cdc:	2300      	moveq	r3, #0
    1cde:	b2db      	uxtb	r3, r3
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d016      	beq.n	1d12 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    1ce4:	68fb      	ldr	r3, [r7, #12]
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	681a      	ldr	r2, [r3, #0]
    1cea:	68bb      	ldr	r3, [r7, #8]
    1cec:	1c59      	adds	r1, r3, #1
    1cee:	60b9      	str	r1, [r7, #8]
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	4619      	mov	r1, r3
    1cf4:	68f8      	ldr	r0, [r7, #12]
    1cf6:	4790      	blx	r2
    1cf8:	4603      	mov	r3, r0
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	bf14      	ite	ne
    1cfe:	2301      	movne	r3, #1
    1d00:	2300      	moveq	r3, #0
    1d02:	b2db      	uxtb	r3, r3
    1d04:	2b00      	cmp	r3, #0
    1d06:	d003      	beq.n	1d10 <_ZN5Print5writeEPKhj+0x50>
    1d08:	697b      	ldr	r3, [r7, #20]
    1d0a:	3301      	adds	r3, #1
    1d0c:	617b      	str	r3, [r7, #20]
  while (size--) {
    1d0e:	e7df      	b.n	1cd0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    1d10:	bf00      	nop
  }
  return n;
    1d12:	697b      	ldr	r3, [r7, #20]
}
    1d14:	4618      	mov	r0, r3
    1d16:	3718      	adds	r7, #24
    1d18:	46bd      	mov	sp, r7
    1d1a:	bd80      	pop	{r7, pc}

00001d1c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    1d1c:	b580      	push	{r7, lr}
    1d1e:	b082      	sub	sp, #8
    1d20:	af00      	add	r7, sp, #0
    1d22:	6078      	str	r0, [r7, #4]
    1d24:	6039      	str	r1, [r7, #0]
  return write(str);
    1d26:	6839      	ldr	r1, [r7, #0]
    1d28:	6878      	ldr	r0, [r7, #4]
    1d2a:	4b03      	ldr	r3, [pc, #12]	; (1d38 <_ZN5Print5printEPKc+0x1c>)
    1d2c:	4798      	blx	r3
    1d2e:	4603      	mov	r3, r0
}
    1d30:	4618      	mov	r0, r3
    1d32:	3708      	adds	r7, #8
    1d34:	46bd      	mov	sp, r7
    1d36:	bd80      	pop	{r7, pc}
    1d38:	00001c85 	.word	0x00001c85

00001d3c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    1d3c:	b580      	push	{r7, lr}
    1d3e:	b082      	sub	sp, #8
    1d40:	af00      	add	r7, sp, #0
    1d42:	6078      	str	r0, [r7, #4]
    1d44:	460b      	mov	r3, r1
    1d46:	70fb      	strb	r3, [r7, #3]
  return write(c);
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	681b      	ldr	r3, [r3, #0]
    1d4c:	681b      	ldr	r3, [r3, #0]
    1d4e:	78fa      	ldrb	r2, [r7, #3]
    1d50:	4611      	mov	r1, r2
    1d52:	6878      	ldr	r0, [r7, #4]
    1d54:	4798      	blx	r3
    1d56:	4603      	mov	r3, r0
}
    1d58:	4618      	mov	r0, r3
    1d5a:	3708      	adds	r7, #8
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bd80      	pop	{r7, pc}

00001d60 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	b084      	sub	sp, #16
    1d64:	af00      	add	r7, sp, #0
    1d66:	60f8      	str	r0, [r7, #12]
    1d68:	460b      	mov	r3, r1
    1d6a:	607a      	str	r2, [r7, #4]
    1d6c:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    1d6e:	7afb      	ldrb	r3, [r7, #11]
    1d70:	687a      	ldr	r2, [r7, #4]
    1d72:	4619      	mov	r1, r3
    1d74:	68f8      	ldr	r0, [r7, #12]
    1d76:	4b03      	ldr	r3, [pc, #12]	; (1d84 <_ZN5Print5printEhi+0x24>)
    1d78:	4798      	blx	r3
    1d7a:	4603      	mov	r3, r0
}
    1d7c:	4618      	mov	r0, r3
    1d7e:	3710      	adds	r7, #16
    1d80:	46bd      	mov	sp, r7
    1d82:	bd80      	pop	{r7, pc}
    1d84:	00001e35 	.word	0x00001e35

00001d88 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    1d88:	b580      	push	{r7, lr}
    1d8a:	b084      	sub	sp, #16
    1d8c:	af00      	add	r7, sp, #0
    1d8e:	60f8      	str	r0, [r7, #12]
    1d90:	60b9      	str	r1, [r7, #8]
    1d92:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    1d94:	687a      	ldr	r2, [r7, #4]
    1d96:	68b9      	ldr	r1, [r7, #8]
    1d98:	68f8      	ldr	r0, [r7, #12]
    1d9a:	4b03      	ldr	r3, [pc, #12]	; (1da8 <_ZN5Print5printEii+0x20>)
    1d9c:	4798      	blx	r3
    1d9e:	4603      	mov	r3, r0
}
    1da0:	4618      	mov	r0, r3
    1da2:	3710      	adds	r7, #16
    1da4:	46bd      	mov	sp, r7
    1da6:	bd80      	pop	{r7, pc}
    1da8:	00001dad 	.word	0x00001dad

00001dac <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b086      	sub	sp, #24
    1db0:	af00      	add	r7, sp, #0
    1db2:	60f8      	str	r0, [r7, #12]
    1db4:	60b9      	str	r1, [r7, #8]
    1db6:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d109      	bne.n	1dd2 <_ZN5Print5printEli+0x26>
    return write(n);
    1dbe:	68fb      	ldr	r3, [r7, #12]
    1dc0:	681b      	ldr	r3, [r3, #0]
    1dc2:	681b      	ldr	r3, [r3, #0]
    1dc4:	68ba      	ldr	r2, [r7, #8]
    1dc6:	b2d2      	uxtb	r2, r2
    1dc8:	4611      	mov	r1, r2
    1dca:	68f8      	ldr	r0, [r7, #12]
    1dcc:	4798      	blx	r3
    1dce:	4603      	mov	r3, r0
    1dd0:	e028      	b.n	1e24 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	2b0a      	cmp	r3, #10
    1dd6:	d11d      	bne.n	1e14 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    1dd8:	68bb      	ldr	r3, [r7, #8]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	da12      	bge.n	1e04 <_ZN5Print5printEli+0x58>
      int t = print('-');
    1dde:	212d      	movs	r1, #45	; 0x2d
    1de0:	68f8      	ldr	r0, [r7, #12]
    1de2:	4b12      	ldr	r3, [pc, #72]	; (1e2c <_ZN5Print5printEli+0x80>)
    1de4:	4798      	blx	r3
    1de6:	4603      	mov	r3, r0
    1de8:	617b      	str	r3, [r7, #20]
      n = -n;
    1dea:	68bb      	ldr	r3, [r7, #8]
    1dec:	425b      	negs	r3, r3
    1dee:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    1df0:	68bb      	ldr	r3, [r7, #8]
    1df2:	220a      	movs	r2, #10
    1df4:	4619      	mov	r1, r3
    1df6:	68f8      	ldr	r0, [r7, #12]
    1df8:	4b0d      	ldr	r3, [pc, #52]	; (1e30 <_ZN5Print5printEli+0x84>)
    1dfa:	4798      	blx	r3
    1dfc:	4602      	mov	r2, r0
    1dfe:	697b      	ldr	r3, [r7, #20]
    1e00:	4413      	add	r3, r2
    1e02:	e00f      	b.n	1e24 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    1e04:	68bb      	ldr	r3, [r7, #8]
    1e06:	220a      	movs	r2, #10
    1e08:	4619      	mov	r1, r3
    1e0a:	68f8      	ldr	r0, [r7, #12]
    1e0c:	4b08      	ldr	r3, [pc, #32]	; (1e30 <_ZN5Print5printEli+0x84>)
    1e0e:	4798      	blx	r3
    1e10:	4603      	mov	r3, r0
    1e12:	e007      	b.n	1e24 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    1e14:	68bb      	ldr	r3, [r7, #8]
    1e16:	687a      	ldr	r2, [r7, #4]
    1e18:	b2d2      	uxtb	r2, r2
    1e1a:	4619      	mov	r1, r3
    1e1c:	68f8      	ldr	r0, [r7, #12]
    1e1e:	4b04      	ldr	r3, [pc, #16]	; (1e30 <_ZN5Print5printEli+0x84>)
    1e20:	4798      	blx	r3
    1e22:	4603      	mov	r3, r0
  }
}
    1e24:	4618      	mov	r0, r3
    1e26:	3718      	adds	r7, #24
    1e28:	46bd      	mov	sp, r7
    1e2a:	bd80      	pop	{r7, pc}
    1e2c:	00001d3d 	.word	0x00001d3d
    1e30:	00001ed9 	.word	0x00001ed9

00001e34 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    1e34:	b580      	push	{r7, lr}
    1e36:	b084      	sub	sp, #16
    1e38:	af00      	add	r7, sp, #0
    1e3a:	60f8      	str	r0, [r7, #12]
    1e3c:	60b9      	str	r1, [r7, #8]
    1e3e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	2b00      	cmp	r3, #0
    1e44:	d109      	bne.n	1e5a <_ZN5Print5printEmi+0x26>
    1e46:	68fb      	ldr	r3, [r7, #12]
    1e48:	681b      	ldr	r3, [r3, #0]
    1e4a:	681b      	ldr	r3, [r3, #0]
    1e4c:	68ba      	ldr	r2, [r7, #8]
    1e4e:	b2d2      	uxtb	r2, r2
    1e50:	4611      	mov	r1, r2
    1e52:	68f8      	ldr	r0, [r7, #12]
    1e54:	4798      	blx	r3
    1e56:	4603      	mov	r3, r0
    1e58:	e007      	b.n	1e6a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	b2db      	uxtb	r3, r3
    1e5e:	461a      	mov	r2, r3
    1e60:	68b9      	ldr	r1, [r7, #8]
    1e62:	68f8      	ldr	r0, [r7, #12]
    1e64:	4b03      	ldr	r3, [pc, #12]	; (1e74 <_ZN5Print5printEmi+0x40>)
    1e66:	4798      	blx	r3
    1e68:	4603      	mov	r3, r0
}
    1e6a:	4618      	mov	r0, r3
    1e6c:	3710      	adds	r7, #16
    1e6e:	46bd      	mov	sp, r7
    1e70:	bd80      	pop	{r7, pc}
    1e72:	bf00      	nop
    1e74:	00001ed9 	.word	0x00001ed9

00001e78 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    1e78:	b580      	push	{r7, lr}
    1e7a:	b082      	sub	sp, #8
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    1e80:	4904      	ldr	r1, [pc, #16]	; (1e94 <_ZN5Print7printlnEv+0x1c>)
    1e82:	6878      	ldr	r0, [r7, #4]
    1e84:	4b04      	ldr	r3, [pc, #16]	; (1e98 <_ZN5Print7printlnEv+0x20>)
    1e86:	4798      	blx	r3
    1e88:	4603      	mov	r3, r0
}
    1e8a:	4618      	mov	r0, r3
    1e8c:	3708      	adds	r7, #8
    1e8e:	46bd      	mov	sp, r7
    1e90:	bd80      	pop	{r7, pc}
    1e92:	bf00      	nop
    1e94:	00011908 	.word	0x00011908
    1e98:	00001c85 	.word	0x00001c85

00001e9c <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b086      	sub	sp, #24
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	60f8      	str	r0, [r7, #12]
    1ea4:	460b      	mov	r3, r1
    1ea6:	607a      	str	r2, [r7, #4]
    1ea8:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
    1eaa:	7afb      	ldrb	r3, [r7, #11]
    1eac:	687a      	ldr	r2, [r7, #4]
    1eae:	4619      	mov	r1, r3
    1eb0:	68f8      	ldr	r0, [r7, #12]
    1eb2:	4b07      	ldr	r3, [pc, #28]	; (1ed0 <_ZN5Print7printlnEhi+0x34>)
    1eb4:	4798      	blx	r3
    1eb6:	6178      	str	r0, [r7, #20]
  n += println();
    1eb8:	68f8      	ldr	r0, [r7, #12]
    1eba:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <_ZN5Print7printlnEhi+0x38>)
    1ebc:	4798      	blx	r3
    1ebe:	4602      	mov	r2, r0
    1ec0:	697b      	ldr	r3, [r7, #20]
    1ec2:	4413      	add	r3, r2
    1ec4:	617b      	str	r3, [r7, #20]
  return n;
    1ec6:	697b      	ldr	r3, [r7, #20]
}
    1ec8:	4618      	mov	r0, r3
    1eca:	3718      	adds	r7, #24
    1ecc:	46bd      	mov	sp, r7
    1ece:	bd80      	pop	{r7, pc}
    1ed0:	00001d61 	.word	0x00001d61
    1ed4:	00001e79 	.word	0x00001e79

00001ed8 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b08e      	sub	sp, #56	; 0x38
    1edc:	af00      	add	r7, sp, #0
    1ede:	60f8      	str	r0, [r7, #12]
    1ee0:	60b9      	str	r1, [r7, #8]
    1ee2:	4613      	mov	r3, r2
    1ee4:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    1ee6:	f107 0310 	add.w	r3, r7, #16
    1eea:	3320      	adds	r3, #32
    1eec:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    1eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ef0:	2200      	movs	r2, #0
    1ef2:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1ef4:	79fb      	ldrb	r3, [r7, #7]
    1ef6:	2b01      	cmp	r3, #1
    1ef8:	dc01      	bgt.n	1efe <_ZN5Print11printNumberEmh+0x26>
    1efa:	230a      	movs	r3, #10
    1efc:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    1efe:	79fa      	ldrb	r2, [r7, #7]
    1f00:	68bb      	ldr	r3, [r7, #8]
    1f02:	fbb3 f1f2 	udiv	r1, r3, r2
    1f06:	fb02 f201 	mul.w	r2, r2, r1
    1f0a:	1a9b      	subs	r3, r3, r2
    1f0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    1f10:	79fb      	ldrb	r3, [r7, #7]
    1f12:	68ba      	ldr	r2, [r7, #8]
    1f14:	fbb2 f3f3 	udiv	r3, r2, r3
    1f18:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f1c:	3b01      	subs	r3, #1
    1f1e:	637b      	str	r3, [r7, #52]	; 0x34
    1f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1f24:	2b09      	cmp	r3, #9
    1f26:	dc04      	bgt.n	1f32 <_ZN5Print11printNumberEmh+0x5a>
    1f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1f2c:	3330      	adds	r3, #48	; 0x30
    1f2e:	b2db      	uxtb	r3, r3
    1f30:	e003      	b.n	1f3a <_ZN5Print11printNumberEmh+0x62>
    1f32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1f36:	3337      	adds	r3, #55	; 0x37
    1f38:	b2db      	uxtb	r3, r3
    1f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1f3c:	7013      	strb	r3, [r2, #0]
  } while(n);
    1f3e:	68bb      	ldr	r3, [r7, #8]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d000      	beq.n	1f46 <_ZN5Print11printNumberEmh+0x6e>
  do {
    1f44:	e7db      	b.n	1efe <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    1f46:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1f48:	68f8      	ldr	r0, [r7, #12]
    1f4a:	4b03      	ldr	r3, [pc, #12]	; (1f58 <_ZN5Print11printNumberEmh+0x80>)
    1f4c:	4798      	blx	r3
    1f4e:	4603      	mov	r3, r0
}
    1f50:	4618      	mov	r0, r3
    1f52:	3738      	adds	r7, #56	; 0x38
    1f54:	46bd      	mov	sp, r7
    1f56:	bd80      	pop	{r7, pc}
    1f58:	00001c85 	.word	0x00001c85

00001f5c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    1f5c:	b480      	push	{r7}
    1f5e:	b083      	sub	sp, #12
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
    1f64:	460b      	mov	r3, r1
    1f66:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1f68:	78fb      	ldrb	r3, [r7, #3]
    1f6a:	687a      	ldr	r2, [r7, #4]
    1f6c:	01db      	lsls	r3, r3, #7
    1f6e:	4413      	add	r3, r2
    1f70:	681b      	ldr	r3, [r3, #0]
}
    1f72:	4618      	mov	r0, r3
    1f74:	370c      	adds	r7, #12
    1f76:	46bd      	mov	sp, r7
    1f78:	bc80      	pop	{r7}
    1f7a:	4770      	bx	lr

00001f7c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    1f7c:	b480      	push	{r7}
    1f7e:	b083      	sub	sp, #12
    1f80:	af00      	add	r7, sp, #0
    1f82:	6078      	str	r0, [r7, #4]
    1f84:	460b      	mov	r3, r1
    1f86:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1f88:	78fb      	ldrb	r3, [r7, #3]
    1f8a:	687a      	ldr	r2, [r7, #4]
    1f8c:	01db      	lsls	r3, r3, #7
    1f8e:	4413      	add	r3, r2
    1f90:	3310      	adds	r3, #16
    1f92:	681b      	ldr	r3, [r3, #0]
}
    1f94:	4618      	mov	r0, r3
    1f96:	370c      	adds	r7, #12
    1f98:	46bd      	mov	sp, r7
    1f9a:	bc80      	pop	{r7}
    1f9c:	4770      	bx	lr

00001f9e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    1f9e:	b480      	push	{r7}
    1fa0:	b083      	sub	sp, #12
    1fa2:	af00      	add	r7, sp, #0
    1fa4:	6078      	str	r0, [r7, #4]
    1fa6:	460b      	mov	r3, r1
    1fa8:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1faa:	78fb      	ldrb	r3, [r7, #3]
    1fac:	687a      	ldr	r2, [r7, #4]
    1fae:	01db      	lsls	r3, r3, #7
    1fb0:	4413      	add	r3, r2
    1fb2:	3320      	adds	r3, #32
    1fb4:	681b      	ldr	r3, [r3, #0]
}
    1fb6:	4618      	mov	r0, r3
    1fb8:	370c      	adds	r7, #12
    1fba:	46bd      	mov	sp, r7
    1fbc:	bc80      	pop	{r7}
    1fbe:	4770      	bx	lr

00001fc0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    1fc0:	b580      	push	{r7, lr}
    1fc2:	b086      	sub	sp, #24
    1fc4:	af00      	add	r7, sp, #0
    1fc6:	4603      	mov	r3, r0
    1fc8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1fca:	f107 030c 	add.w	r3, r7, #12
    1fce:	4618      	mov	r0, r3
    1fd0:	4b13      	ldr	r3, [pc, #76]	; (2020 <_gpio_get_level+0x60>)
    1fd2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    1fd4:	79fb      	ldrb	r3, [r7, #7]
    1fd6:	4619      	mov	r1, r3
    1fd8:	4812      	ldr	r0, [pc, #72]	; (2024 <_gpio_get_level+0x64>)
    1fda:	4b13      	ldr	r3, [pc, #76]	; (2028 <_gpio_get_level+0x68>)
    1fdc:	4798      	blx	r3
    1fde:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    1fe0:	79fb      	ldrb	r3, [r7, #7]
    1fe2:	4619      	mov	r1, r3
    1fe4:	480f      	ldr	r0, [pc, #60]	; (2024 <_gpio_get_level+0x64>)
    1fe6:	4b11      	ldr	r3, [pc, #68]	; (202c <_gpio_get_level+0x6c>)
    1fe8:	4798      	blx	r3
    1fea:	4602      	mov	r2, r0
    1fec:	697b      	ldr	r3, [r7, #20]
    1fee:	43db      	mvns	r3, r3
    1ff0:	4013      	ands	r3, r2
    1ff2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    1ff4:	79fb      	ldrb	r3, [r7, #7]
    1ff6:	4619      	mov	r1, r3
    1ff8:	480a      	ldr	r0, [pc, #40]	; (2024 <_gpio_get_level+0x64>)
    1ffa:	4b0d      	ldr	r3, [pc, #52]	; (2030 <_gpio_get_level+0x70>)
    1ffc:	4798      	blx	r3
    1ffe:	4602      	mov	r2, r0
    2000:	697b      	ldr	r3, [r7, #20]
    2002:	4013      	ands	r3, r2
    2004:	693a      	ldr	r2, [r7, #16]
    2006:	4313      	orrs	r3, r2
    2008:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    200a:	f107 030c 	add.w	r3, r7, #12
    200e:	4618      	mov	r0, r3
    2010:	4b08      	ldr	r3, [pc, #32]	; (2034 <_gpio_get_level+0x74>)
    2012:	4798      	blx	r3

	return tmp;
    2014:	693b      	ldr	r3, [r7, #16]
}
    2016:	4618      	mov	r0, r3
    2018:	3718      	adds	r7, #24
    201a:	46bd      	mov	sp, r7
    201c:	bd80      	pop	{r7, pc}
    201e:	bf00      	nop
    2020:	000036b9 	.word	0x000036b9
    2024:	41008000 	.word	0x41008000
    2028:	00001f5d 	.word	0x00001f5d
    202c:	00001f9f 	.word	0x00001f9f
    2030:	00001f7d 	.word	0x00001f7d
    2034:	000036df 	.word	0x000036df

00002038 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    2038:	b580      	push	{r7, lr}
    203a:	b082      	sub	sp, #8
    203c:	af00      	add	r7, sp, #0
    203e:	4603      	mov	r3, r0
    2040:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2042:	79fb      	ldrb	r3, [r7, #7]
    2044:	115b      	asrs	r3, r3, #5
    2046:	b2db      	uxtb	r3, r3
    2048:	4618      	mov	r0, r3
    204a:	4b09      	ldr	r3, [pc, #36]	; (2070 <gpio_get_pin_level+0x38>)
    204c:	4798      	blx	r3
    204e:	4601      	mov	r1, r0
    2050:	79fb      	ldrb	r3, [r7, #7]
    2052:	f003 031f 	and.w	r3, r3, #31
    2056:	2201      	movs	r2, #1
    2058:	fa02 f303 	lsl.w	r3, r2, r3
    205c:	400b      	ands	r3, r1
    205e:	2b00      	cmp	r3, #0
    2060:	bf14      	ite	ne
    2062:	2301      	movne	r3, #1
    2064:	2300      	moveq	r3, #0
    2066:	b2db      	uxtb	r3, r3
}
    2068:	4618      	mov	r0, r3
    206a:	3708      	adds	r7, #8
    206c:	46bd      	mov	sp, r7
    206e:	bd80      	pop	{r7, pc}
    2070:	00001fc1 	.word	0x00001fc1

00002074 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    2074:	b480      	push	{r7}
    2076:	b083      	sub	sp, #12
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    207c:	4b06      	ldr	r3, [pc, #24]	; (2098 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    207e:	681b      	ldr	r3, [r3, #0]
    2080:	2201      	movs	r2, #1
    2082:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    2084:	4b04      	ldr	r3, [pc, #16]	; (2098 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    2086:	681b      	ldr	r3, [r3, #0]
    2088:	2200      	movs	r2, #0
    208a:	705a      	strb	r2, [r3, #1]
}
    208c:	bf00      	nop
    208e:	370c      	adds	r7, #12
    2090:	46bd      	mov	sp, r7
    2092:	bc80      	pop	{r7}
    2094:	4770      	bx	lr
    2096:	bf00      	nop
    2098:	20001bdc 	.word	0x20001bdc

0000209c <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    209c:	b480      	push	{r7}
    209e:	b083      	sub	sp, #12
    20a0:	af00      	add	r7, sp, #0
    20a2:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    20a4:	4a04      	ldr	r2, [pc, #16]	; (20b8 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	4618      	mov	r0, r3
    20ae:	370c      	adds	r7, #12
    20b0:	46bd      	mov	sp, r7
    20b2:	bc80      	pop	{r7}
    20b4:	4770      	bx	lr
    20b6:	bf00      	nop
    20b8:	20001bdc 	.word	0x20001bdc

000020bc <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    20bc:	b480      	push	{r7}
    20be:	b083      	sub	sp, #12
    20c0:	af00      	add	r7, sp, #0
    20c2:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	4618      	mov	r0, r3
    20c8:	370c      	adds	r7, #12
    20ca:	46bd      	mov	sp, r7
    20cc:	bc80      	pop	{r7}
    20ce:	4770      	bx	lr

000020d0 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    20d8:	2040      	movs	r0, #64	; 0x40
    20da:	4b1c      	ldr	r3, [pc, #112]	; (214c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    20dc:	4798      	blx	r3
    20de:	4603      	mov	r3, r0
    20e0:	461a      	mov	r2, r3
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	78db      	ldrb	r3, [r3, #3]
    20ea:	2b00      	cmp	r3, #0
    20ec:	d024      	beq.n	2138 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	2200      	movs	r2, #0
    20f2:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	2201      	movs	r2, #1
    20f8:	705a      	strb	r2, [r3, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    20fa:	f44f 7216 	mov.w	r2, #600	; 0x258
    20fe:	4914      	ldr	r1, [pc, #80]	; (2150 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    2100:	4814      	ldr	r0, [pc, #80]	; (2154 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    2102:	4b15      	ldr	r3, [pc, #84]	; (2158 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    2104:	4798      	blx	r3
			usbTimer.Start();
    2106:	4813      	ldr	r0, [pc, #76]	; (2154 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    2108:	4b14      	ldr	r3, [pc, #80]	; (215c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    210a:	4798      	blx	r3
			while (!usb.IsEnabled()){
    210c:	4814      	ldr	r0, [pc, #80]	; (2160 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    210e:	4b15      	ldr	r3, [pc, #84]	; (2164 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    2110:	4798      	blx	r3
    2112:	4603      	mov	r3, r0
    2114:	f083 0301 	eor.w	r3, r3, #1
    2118:	b2db      	uxtb	r3, r3
    211a:	2b00      	cmp	r3, #0
    211c:	d008      	beq.n	2130 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    211e:	687b      	ldr	r3, [r7, #4]
    2120:	789b      	ldrb	r3, [r3, #2]
    2122:	b2db      	uxtb	r3, r3
    2124:	2b00      	cmp	r3, #0
    2126:	d0f1      	beq.n	210c <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	2200      	movs	r2, #0
    212c:	701a      	strb	r2, [r3, #0]
					return;
    212e:	e009      	b.n	2144 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTimer.Stop();
    2130:	4808      	ldr	r0, [pc, #32]	; (2154 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    2132:	4b0d      	ldr	r3, [pc, #52]	; (2168 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    2134:	4798      	blx	r3
    2136:	e005      	b.n	2144 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    2138:	687b      	ldr	r3, [r7, #4]
    213a:	2200      	movs	r2, #0
    213c:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    213e:	687b      	ldr	r3, [r7, #4]
    2140:	2200      	movs	r2, #0
    2142:	705a      	strb	r2, [r3, #1]
		}
		
}
    2144:	3708      	adds	r7, #8
    2146:	46bd      	mov	sp, r7
    2148:	bd80      	pop	{r7, pc}
    214a:	bf00      	nop
    214c:	00002039 	.word	0x00002039
    2150:	00002075 	.word	0x00002075
    2154:	20001be4 	.word	0x20001be4
    2158:	000023b1 	.word	0x000023b1
    215c:	00002309 	.word	0x00002309
    2160:	20001b7c 	.word	0x20001b7c
    2164:	000019a1 	.word	0x000019a1
    2168:	0000232d 	.word	0x0000232d

0000216c <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    216c:	b580      	push	{r7, lr}
    216e:	b082      	sub	sp, #8
    2170:	af00      	add	r7, sp, #0
    2172:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    2174:	687b      	ldr	r3, [r7, #4]
    2176:	785b      	ldrb	r3, [r3, #1]
    2178:	b2db      	uxtb	r3, r3
    217a:	2b00      	cmp	r3, #0
    217c:	d01f      	beq.n	21be <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	b2db      	uxtb	r3, r3
    2184:	2b00      	cmp	r3, #0
    2186:	d105      	bne.n	2194 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    2188:	4812      	ldr	r0, [pc, #72]	; (21d4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    218a:	4b13      	ldr	r3, [pc, #76]	; (21d8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    218c:	4798      	blx	r3
    218e:	4603      	mov	r3, r0
    2190:	2b00      	cmp	r3, #0
    2192:	d001      	beq.n	2198 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    2194:	2301      	movs	r3, #1
    2196:	e000      	b.n	219a <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    2198:	2300      	movs	r3, #0
    219a:	2b00      	cmp	r3, #0
    219c:	d00b      	beq.n	21b6 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTimer.Start()==0;
    219e:	480f      	ldr	r0, [pc, #60]	; (21dc <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    21a0:	4b0f      	ldr	r3, [pc, #60]	; (21e0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    21a2:	4798      	blx	r3
    21a4:	4603      	mov	r3, r0
    21a6:	2b00      	cmp	r3, #0
    21a8:	bf0c      	ite	eq
    21aa:	2301      	moveq	r3, #1
    21ac:	2300      	movne	r3, #0
    21ae:	b2da      	uxtb	r2, r3
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	705a      	strb	r2, [r3, #1]
    21b4:	e007      	b.n	21c6 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	2200      	movs	r2, #0
    21ba:	705a      	strb	r2, [r3, #1]
    21bc:	e003      	b.n	21c6 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    21be:	687b      	ldr	r3, [r7, #4]
    21c0:	785b      	ldrb	r3, [r3, #1]
    21c2:	b2db      	uxtb	r3, r3
    21c4:	e002      	b.n	21cc <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	785b      	ldrb	r3, [r3, #1]
    21ca:	b2db      	uxtb	r3, r3
}
    21cc:	4618      	mov	r0, r3
    21ce:	3708      	adds	r7, #8
    21d0:	46bd      	mov	sp, r7
    21d2:	bd80      	pop	{r7, pc}
    21d4:	20001b7c 	.word	0x20001b7c
    21d8:	000019a1 	.word	0x000019a1
    21dc:	20001be4 	.word	0x20001be4
    21e0:	00002309 	.word	0x00002309

000021e4 <_ZN20SerialTerminal_Class13CheckTerminalEm>:
bool	SerialTerminal_Class::CheckTerminal(uint32_t size){
    21e4:	b580      	push	{r7, lr}
    21e6:	b082      	sub	sp, #8
    21e8:	af00      	add	r7, sp, #0
    21ea:	6078      	str	r0, [r7, #4]
    21ec:	6039      	str	r1, [r7, #0]
	if (terminalStarted)
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	785b      	ldrb	r3, [r3, #1]
    21f2:	b2db      	uxtb	r3, r3
    21f4:	2b00      	cmp	r3, #0
    21f6:	d02f      	beq.n	2258 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x74>
	{
		if (plugged||usb.IsEnabled())
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	781b      	ldrb	r3, [r3, #0]
    21fc:	b2db      	uxtb	r3, r3
    21fe:	2b00      	cmp	r3, #0
    2200:	d105      	bne.n	220e <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2a>
    2202:	481b      	ldr	r0, [pc, #108]	; (2270 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x8c>)
    2204:	4b1b      	ldr	r3, [pc, #108]	; (2274 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x90>)
    2206:	4798      	blx	r3
    2208:	4603      	mov	r3, r0
    220a:	2b00      	cmp	r3, #0
    220c:	d001      	beq.n	2212 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x2e>
    220e:	2301      	movs	r3, #1
    2210:	e000      	b.n	2214 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x30>
    2212:	2300      	movs	r3, #0
    2214:	2b00      	cmp	r3, #0
    2216:	d01b      	beq.n	2250 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x6c>
		{
			usbTimer.Stop();
    2218:	4817      	ldr	r0, [pc, #92]	; (2278 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    221a:	4b18      	ldr	r3, [pc, #96]	; (227c <_ZN20SerialTerminal_Class13CheckTerminalEm+0x98>)
    221c:	4798      	blx	r3
			usbTimer.Remove_task();
    221e:	4816      	ldr	r0, [pc, #88]	; (2278 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    2220:	4b17      	ldr	r3, [pc, #92]	; (2280 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x9c>)
    2222:	4798      	blx	r3
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*size);
    2224:	683a      	ldr	r2, [r7, #0]
    2226:	4613      	mov	r3, r2
    2228:	009b      	lsls	r3, r3, #2
    222a:	4413      	add	r3, r2
    222c:	005b      	lsls	r3, r3, #1
    222e:	461a      	mov	r2, r3
    2230:	4914      	ldr	r1, [pc, #80]	; (2284 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa0>)
    2232:	4811      	ldr	r0, [pc, #68]	; (2278 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    2234:	4b14      	ldr	r3, [pc, #80]	; (2288 <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa4>)
    2236:	4798      	blx	r3
			terminalStarted=usbTimer.Start()==0;
    2238:	480f      	ldr	r0, [pc, #60]	; (2278 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x94>)
    223a:	4b14      	ldr	r3, [pc, #80]	; (228c <_ZN20SerialTerminal_Class13CheckTerminalEm+0xa8>)
    223c:	4798      	blx	r3
    223e:	4603      	mov	r3, r0
    2240:	2b00      	cmp	r3, #0
    2242:	bf0c      	ite	eq
    2244:	2301      	moveq	r3, #1
    2246:	2300      	movne	r3, #0
    2248:	b2da      	uxtb	r2, r3
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	705a      	strb	r2, [r3, #1]
    224e:	e007      	b.n	2260 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
		else
		{
			terminalStarted=false;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2200      	movs	r2, #0
    2254:	705a      	strb	r2, [r3, #1]
    2256:	e003      	b.n	2260 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x7c>
		}
	}
	else
	{
		return	terminalStarted;
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	785b      	ldrb	r3, [r3, #1]
    225c:	b2db      	uxtb	r3, r3
    225e:	e002      	b.n	2266 <_ZN20SerialTerminal_Class13CheckTerminalEm+0x82>
	}
	
	return	terminalStarted;
    2260:	687b      	ldr	r3, [r7, #4]
    2262:	785b      	ldrb	r3, [r3, #1]
    2264:	b2db      	uxtb	r3, r3
    2266:	4618      	mov	r0, r3
    2268:	3708      	adds	r7, #8
    226a:	46bd      	mov	sp, r7
    226c:	bd80      	pop	{r7, pc}
    226e:	bf00      	nop
    2270:	20001b7c 	.word	0x20001b7c
    2274:	000019a1 	.word	0x000019a1
    2278:	20001be4 	.word	0x20001be4
    227c:	0000232d 	.word	0x0000232d
    2280:	000023d9 	.word	0x000023d9
    2284:	00002075 	.word	0x00002075
    2288:	000023b1 	.word	0x000023b1
    228c:	00002309 	.word	0x00002309

00002290 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    2290:	b580      	push	{r7, lr}
    2292:	b082      	sub	sp, #8
    2294:	af00      	add	r7, sp, #0
    2296:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    2298:	4b04      	ldr	r3, [pc, #16]	; (22ac <_ZL7task_cbPK10timer_task+0x1c>)
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	4618      	mov	r0, r3
    229e:	4b04      	ldr	r3, [pc, #16]	; (22b0 <_ZL7task_cbPK10timer_task+0x20>)
    22a0:	4798      	blx	r3
}
    22a2:	bf00      	nop
    22a4:	3708      	adds	r7, #8
    22a6:	46bd      	mov	sp, r7
    22a8:	bd80      	pop	{r7, pc}
    22aa:	bf00      	nop
    22ac:	20001be0 	.word	0x20001be0
    22b0:	00002355 	.word	0x00002355

000022b4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task.cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    22b4:	b480      	push	{r7}
    22b6:	b083      	sub	sp, #12
    22b8:	af00      	add	r7, sp, #0
    22ba:	6078      	str	r0, [r7, #4]
    22bc:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	683a      	ldr	r2, [r7, #0]
    22c2:	609a      	str	r2, [r3, #8]
	ptrTimerSerialClass=this;
    22c4:	4a07      	ldr	r2, [pc, #28]	; (22e4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x30>)
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    22ca:	687b      	ldr	r3, [r7, #4]
    22cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22d0:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	4a04      	ldr	r2, [pc, #16]	; (22e8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    22d6:	621a      	str	r2, [r3, #32]
} //Timer_Class
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	4618      	mov	r0, r3
    22dc:	370c      	adds	r7, #12
    22de:	46bd      	mov	sp, r7
    22e0:	bc80      	pop	{r7}
    22e2:	4770      	bx	lr
    22e4:	20001be0 	.word	0x20001be0
    22e8:	00002291 	.word	0x00002291

000022ec <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    22ec:	b480      	push	{r7}
    22ee:	b083      	sub	sp, #12
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    22f4:	687b      	ldr	r3, [r7, #4]
    22f6:	2200      	movs	r2, #0
    22f8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    22fa:	687b      	ldr	r3, [r7, #4]
    22fc:	4618      	mov	r0, r3
    22fe:	370c      	adds	r7, #12
    2300:	46bd      	mov	sp, r7
    2302:	bc80      	pop	{r7}
    2304:	4770      	bx	lr
	...

00002308 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    2308:	b580      	push	{r7, lr}
    230a:	b084      	sub	sp, #16
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    2310:	687b      	ldr	r3, [r7, #4]
    2312:	689b      	ldr	r3, [r3, #8]
    2314:	4618      	mov	r0, r3
    2316:	4b04      	ldr	r3, [pc, #16]	; (2328 <_ZN17TimerSerial_Class5StartEv+0x20>)
    2318:	4798      	blx	r3
    231a:	60f8      	str	r0, [r7, #12]
	return status;
    231c:	68fb      	ldr	r3, [r7, #12]
	
}
    231e:	4618      	mov	r0, r3
    2320:	3710      	adds	r7, #16
    2322:	46bd      	mov	sp, r7
    2324:	bd80      	pop	{r7, pc}
    2326:	bf00      	nop
    2328:	000047ed 	.word	0x000047ed

0000232c <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    232c:	b580      	push	{r7, lr}
    232e:	b084      	sub	sp, #16
    2330:	af00      	add	r7, sp, #0
    2332:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	689b      	ldr	r3, [r3, #8]
    2338:	4618      	mov	r0, r3
    233a:	4b05      	ldr	r3, [pc, #20]	; (2350 <_ZN17TimerSerial_Class4StopEv+0x24>)
    233c:	4798      	blx	r3
    233e:	60f8      	str	r0, [r7, #12]
	timeout=0;
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	2200      	movs	r2, #0
    2344:	705a      	strb	r2, [r3, #1]
	return status;
    2346:	68fb      	ldr	r3, [r7, #12]
}
    2348:	4618      	mov	r0, r3
    234a:	3710      	adds	r7, #16
    234c:	46bd      	mov	sp, r7
    234e:	bd80      	pop	{r7, pc}
    2350:	00004841 	.word	0x00004841

00002354 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void TimerSerial_Class::setTimeout(){
    2354:	b480      	push	{r7}
    2356:	b083      	sub	sp, #12
    2358:	af00      	add	r7, sp, #0
    235a:	6078      	str	r0, [r7, #4]
	timeout=1;
    235c:	687b      	ldr	r3, [r7, #4]
    235e:	2201      	movs	r2, #1
    2360:	705a      	strb	r2, [r3, #1]
}
    2362:	bf00      	nop
    2364:	370c      	adds	r7, #12
    2366:	46bd      	mov	sp, r7
    2368:	bc80      	pop	{r7}
    236a:	4770      	bx	lr

0000236c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task.mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, &task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    236c:	b580      	push	{r7, lr}
    236e:	b086      	sub	sp, #24
    2370:	af00      	add	r7, sp, #0
    2372:	60f8      	str	r0, [r7, #12]
    2374:	60b9      	str	r1, [r7, #8]
    2376:	607a      	str	r2, [r7, #4]
    2378:	70fb      	strb	r3, [r7, #3]
	int32_t	status;

	task.interval = interval;
    237a:	68fb      	ldr	r3, [r7, #12]
    237c:	687a      	ldr	r2, [r7, #4]
    237e:	61da      	str	r2, [r3, #28]
	task.cb       = (timer_cb_t)func;
    2380:	68fb      	ldr	r3, [r7, #12]
    2382:	68ba      	ldr	r2, [r7, #8]
    2384:	621a      	str	r2, [r3, #32]
	task.mode     = modeTask;
    2386:	68fb      	ldr	r3, [r7, #12]
    2388:	78fa      	ldrb	r2, [r7, #3]
    238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	status=timer_add_task(timer_descr, &task);
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	689a      	ldr	r2, [r3, #8]
    2392:	68fb      	ldr	r3, [r7, #12]
    2394:	3314      	adds	r3, #20
    2396:	4619      	mov	r1, r3
    2398:	4610      	mov	r0, r2
    239a:	4b04      	ldr	r3, [pc, #16]	; (23ac <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x40>)
    239c:	4798      	blx	r3
    239e:	6178      	str	r0, [r7, #20]
	
	return status;
    23a0:	697b      	ldr	r3, [r7, #20]
}
    23a2:	4618      	mov	r0, r3
    23a4:	3718      	adds	r7, #24
    23a6:	46bd      	mov	sp, r7
    23a8:	bd80      	pop	{r7, pc}
    23aa:	bf00      	nop
    23ac:	0000489d 	.word	0x0000489d

000023b0 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    23b0:	b590      	push	{r4, r7, lr}
    23b2:	b087      	sub	sp, #28
    23b4:	af00      	add	r7, sp, #0
    23b6:	60f8      	str	r0, [r7, #12]
    23b8:	60b9      	str	r1, [r7, #8]
    23ba:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    23bc:	2300      	movs	r3, #0
    23be:	687a      	ldr	r2, [r7, #4]
    23c0:	68b9      	ldr	r1, [r7, #8]
    23c2:	68f8      	ldr	r0, [r7, #12]
    23c4:	4c03      	ldr	r4, [pc, #12]	; (23d4 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    23c6:	47a0      	blx	r4
    23c8:	6178      	str	r0, [r7, #20]
	return status;
    23ca:	697b      	ldr	r3, [r7, #20]
}
    23cc:	4618      	mov	r0, r3
    23ce:	371c      	adds	r7, #28
    23d0:	46bd      	mov	sp, r7
    23d2:	bd90      	pop	{r4, r7, pc}
    23d4:	0000236d 	.word	0x0000236d

000023d8 <_ZN17TimerSerial_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	TimerSerial_Class::Remove_task(void){
    23d8:	b580      	push	{r7, lr}
    23da:	b082      	sub	sp, #8
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
	timer_remove_task(timer_descr, &task);
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	689a      	ldr	r2, [r3, #8]
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	3314      	adds	r3, #20
    23e8:	4619      	mov	r1, r3
    23ea:	4610      	mov	r0, r2
    23ec:	4b02      	ldr	r3, [pc, #8]	; (23f8 <_ZN17TimerSerial_Class11Remove_taskEv+0x20>)
    23ee:	4798      	blx	r3
}
    23f0:	bf00      	nop
    23f2:	3708      	adds	r7, #8
    23f4:	46bd      	mov	sp, r7
    23f6:	bd80      	pop	{r7, pc}
    23f8:	00004995 	.word	0x00004995

000023fc <_Z41__static_initialization_and_destruction_0ii>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

TimerSerial_Class usbTimer(&TIMER_INTERFACE);
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
    2404:	6039      	str	r1, [r7, #0]
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	2b01      	cmp	r3, #1
    240a:	d10d      	bne.n	2428 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    240c:	683b      	ldr	r3, [r7, #0]
    240e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2412:	4293      	cmp	r3, r2
    2414:	d108      	bne.n	2428 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2416:	4906      	ldr	r1, [pc, #24]	; (2430 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2418:	4806      	ldr	r0, [pc, #24]	; (2434 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    241a:	4b07      	ldr	r3, [pc, #28]	; (2438 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    241c:	4798      	blx	r3
    241e:	4a07      	ldr	r2, [pc, #28]	; (243c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2420:	4907      	ldr	r1, [pc, #28]	; (2440 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2422:	4804      	ldr	r0, [pc, #16]	; (2434 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2424:	4b07      	ldr	r3, [pc, #28]	; (2444 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    2426:	4798      	blx	r3
    2428:	bf00      	nop
    242a:	3708      	adds	r7, #8
    242c:	46bd      	mov	sp, r7
    242e:	bd80      	pop	{r7, pc}
    2430:	2000222c 	.word	0x2000222c
    2434:	20001be4 	.word	0x20001be4
    2438:	000022b5 	.word	0x000022b5
    243c:	20000000 	.word	0x20000000
    2440:	000022ed 	.word	0x000022ed
    2444:	0000ed25 	.word	0x0000ed25

00002448 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    2448:	b580      	push	{r7, lr}
    244a:	af00      	add	r7, sp, #0
    244c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2450:	2001      	movs	r0, #1
    2452:	4b01      	ldr	r3, [pc, #4]	; (2458 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    2454:	4798      	blx	r3
    2456:	bd80      	pop	{r7, pc}
    2458:	000023fd 	.word	0x000023fd

0000245c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    245c:	b580      	push	{r7, lr}
    245e:	af00      	add	r7, sp, #0
	system_init();
    2460:	4b03      	ldr	r3, [pc, #12]	; (2470 <atmel_start_init+0x14>)
    2462:	4798      	blx	r3
	usb_init();
    2464:	4b03      	ldr	r3, [pc, #12]	; (2474 <atmel_start_init+0x18>)
    2466:	4798      	blx	r3
	spi_nor_flash_init();
    2468:	4b03      	ldr	r3, [pc, #12]	; (2478 <atmel_start_init+0x1c>)
    246a:	4798      	blx	r3
}
    246c:	bf00      	nop
    246e:	bd80      	pop	{r7, pc}
    2470:	00003559 	.word	0x00003559
    2474:	0000ed15 	.word	0x0000ed15
    2478:	0000d6d5 	.word	0x0000d6d5

0000247c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    247c:	b480      	push	{r7}
    247e:	b085      	sub	sp, #20
    2480:	af00      	add	r7, sp, #0
    2482:	60f8      	str	r0, [r7, #12]
    2484:	460b      	mov	r3, r1
    2486:	607a      	str	r2, [r7, #4]
    2488:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    248a:	7afa      	ldrb	r2, [r7, #11]
    248c:	68fb      	ldr	r3, [r7, #12]
    248e:	3220      	adds	r2, #32
    2490:	6879      	ldr	r1, [r7, #4]
    2492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2496:	bf00      	nop
    2498:	3714      	adds	r7, #20
    249a:	46bd      	mov	sp, r7
    249c:	f85d 7b04 	ldr.w	r7, [sp], #4
    24a0:	4770      	bx	lr

000024a2 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    24a2:	b480      	push	{r7}
    24a4:	b083      	sub	sp, #12
    24a6:	af00      	add	r7, sp, #0
    24a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	691b      	ldr	r3, [r3, #16]
    24ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24b6:	bf00      	nop
    24b8:	370c      	adds	r7, #12
    24ba:	46bd      	mov	sp, r7
    24bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c0:	4770      	bx	lr

000024c2 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    24c2:	b480      	push	{r7}
    24c4:	b083      	sub	sp, #12
    24c6:	af00      	add	r7, sp, #0
    24c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	691b      	ldr	r3, [r3, #16]
    24ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24d6:	bf00      	nop
    24d8:	370c      	adds	r7, #12
    24da:	46bd      	mov	sp, r7
    24dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e0:	4770      	bx	lr

000024e2 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    24e2:	b480      	push	{r7}
    24e4:	b083      	sub	sp, #12
    24e6:	af00      	add	r7, sp, #0
    24e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	691b      	ldr	r3, [r3, #16]
    24ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    24f2:	687b      	ldr	r3, [r7, #4]
    24f4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    24f6:	bf00      	nop
    24f8:	370c      	adds	r7, #12
    24fa:	46bd      	mov	sp, r7
    24fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2500:	4770      	bx	lr

00002502 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2502:	b480      	push	{r7}
    2504:	b083      	sub	sp, #12
    2506:	af00      	add	r7, sp, #0
    2508:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	691b      	ldr	r3, [r3, #16]
    250e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2516:	bf00      	nop
    2518:	370c      	adds	r7, #12
    251a:	46bd      	mov	sp, r7
    251c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2520:	4770      	bx	lr

00002522 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2522:	b480      	push	{r7}
    2524:	b083      	sub	sp, #12
    2526:	af00      	add	r7, sp, #0
    2528:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	695b      	ldr	r3, [r3, #20]
    252e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2536:	bf00      	nop
    2538:	370c      	adds	r7, #12
    253a:	46bd      	mov	sp, r7
    253c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2540:	4770      	bx	lr

00002542 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2542:	b480      	push	{r7}
    2544:	b083      	sub	sp, #12
    2546:	af00      	add	r7, sp, #0
    2548:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	695b      	ldr	r3, [r3, #20]
    254e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2556:	bf00      	nop
    2558:	370c      	adds	r7, #12
    255a:	46bd      	mov	sp, r7
    255c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2560:	4770      	bx	lr

00002562 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2562:	b480      	push	{r7}
    2564:	b083      	sub	sp, #12
    2566:	af00      	add	r7, sp, #0
    2568:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    256a:	687b      	ldr	r3, [r7, #4]
    256c:	695b      	ldr	r3, [r3, #20]
    256e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2576:	bf00      	nop
    2578:	370c      	adds	r7, #12
    257a:	46bd      	mov	sp, r7
    257c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2580:	4770      	bx	lr

00002582 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2582:	b480      	push	{r7}
    2584:	b083      	sub	sp, #12
    2586:	af00      	add	r7, sp, #0
    2588:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	695b      	ldr	r3, [r3, #20]
    258e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2596:	bf00      	nop
    2598:	370c      	adds	r7, #12
    259a:	46bd      	mov	sp, r7
    259c:	f85d 7b04 	ldr.w	r7, [sp], #4
    25a0:	4770      	bx	lr

000025a2 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    25a2:	b480      	push	{r7}
    25a4:	b083      	sub	sp, #12
    25a6:	af00      	add	r7, sp, #0
    25a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	695b      	ldr	r3, [r3, #20]
    25ae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    25b2:	687b      	ldr	r3, [r7, #4]
    25b4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25b6:	bf00      	nop
    25b8:	370c      	adds	r7, #12
    25ba:	46bd      	mov	sp, r7
    25bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    25c0:	4770      	bx	lr

000025c2 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    25c2:	b480      	push	{r7}
    25c4:	b083      	sub	sp, #12
    25c6:	af00      	add	r7, sp, #0
    25c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	699b      	ldr	r3, [r3, #24]
    25ce:	f043 0201 	orr.w	r2, r3, #1
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25d6:	bf00      	nop
    25d8:	370c      	adds	r7, #12
    25da:	46bd      	mov	sp, r7
    25dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    25e0:	4770      	bx	lr

000025e2 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    25e2:	b480      	push	{r7}
    25e4:	b083      	sub	sp, #12
    25e6:	af00      	add	r7, sp, #0
    25e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	699b      	ldr	r3, [r3, #24]
    25ee:	f043 0202 	orr.w	r2, r3, #2
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    25f6:	bf00      	nop
    25f8:	370c      	adds	r7, #12
    25fa:	46bd      	mov	sp, r7
    25fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2600:	4770      	bx	lr

00002602 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2602:	b480      	push	{r7}
    2604:	b083      	sub	sp, #12
    2606:	af00      	add	r7, sp, #0
    2608:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	699b      	ldr	r3, [r3, #24]
    260e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2616:	bf00      	nop
    2618:	370c      	adds	r7, #12
    261a:	46bd      	mov	sp, r7
    261c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2620:	4770      	bx	lr

00002622 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2622:	b480      	push	{r7}
    2624:	b083      	sub	sp, #12
    2626:	af00      	add	r7, sp, #0
    2628:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	699b      	ldr	r3, [r3, #24]
    262e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2636:	bf00      	nop
    2638:	370c      	adds	r7, #12
    263a:	46bd      	mov	sp, r7
    263c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2640:	4770      	bx	lr

00002642 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    2642:	b480      	push	{r7}
    2644:	b083      	sub	sp, #12
    2646:	af00      	add	r7, sp, #0
    2648:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	699b      	ldr	r3, [r3, #24]
    264e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2656:	bf00      	nop
    2658:	370c      	adds	r7, #12
    265a:	46bd      	mov	sp, r7
    265c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2660:	4770      	bx	lr

00002662 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2662:	b480      	push	{r7}
    2664:	b083      	sub	sp, #12
    2666:	af00      	add	r7, sp, #0
    2668:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	69db      	ldr	r3, [r3, #28]
    266e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2676:	bf00      	nop
    2678:	370c      	adds	r7, #12
    267a:	46bd      	mov	sp, r7
    267c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2680:	4770      	bx	lr

00002682 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2682:	b480      	push	{r7}
    2684:	b083      	sub	sp, #12
    2686:	af00      	add	r7, sp, #0
    2688:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	6a1b      	ldr	r3, [r3, #32]
    268e:	f043 0201 	orr.w	r2, r3, #1
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2696:	bf00      	nop
    2698:	370c      	adds	r7, #12
    269a:	46bd      	mov	sp, r7
    269c:	f85d 7b04 	ldr.w	r7, [sp], #4
    26a0:	4770      	bx	lr

000026a2 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    26a2:	b480      	push	{r7}
    26a4:	b083      	sub	sp, #12
    26a6:	af00      	add	r7, sp, #0
    26a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	6a1b      	ldr	r3, [r3, #32]
    26ae:	f043 0202 	orr.w	r2, r3, #2
    26b2:	687b      	ldr	r3, [r7, #4]
    26b4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26b6:	bf00      	nop
    26b8:	370c      	adds	r7, #12
    26ba:	46bd      	mov	sp, r7
    26bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    26c0:	4770      	bx	lr

000026c2 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    26c2:	b480      	push	{r7}
    26c4:	b083      	sub	sp, #12
    26c6:	af00      	add	r7, sp, #0
    26c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	6a1b      	ldr	r3, [r3, #32]
    26ce:	f043 0204 	orr.w	r2, r3, #4
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26d6:	bf00      	nop
    26d8:	370c      	adds	r7, #12
    26da:	46bd      	mov	sp, r7
    26dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    26e0:	4770      	bx	lr

000026e2 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    26e2:	b480      	push	{r7}
    26e4:	b083      	sub	sp, #12
    26e6:	af00      	add	r7, sp, #0
    26e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	6a1b      	ldr	r3, [r3, #32]
    26ee:	f043 0208 	orr.w	r2, r3, #8
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    26f6:	bf00      	nop
    26f8:	370c      	adds	r7, #12
    26fa:	46bd      	mov	sp, r7
    26fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2700:	4770      	bx	lr

00002702 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2702:	b480      	push	{r7}
    2704:	b083      	sub	sp, #12
    2706:	af00      	add	r7, sp, #0
    2708:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	6a1b      	ldr	r3, [r3, #32]
    270e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2716:	bf00      	nop
    2718:	370c      	adds	r7, #12
    271a:	46bd      	mov	sp, r7
    271c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2720:	4770      	bx	lr

00002722 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2722:	b480      	push	{r7}
    2724:	b085      	sub	sp, #20
    2726:	af00      	add	r7, sp, #0
    2728:	60f8      	str	r0, [r7, #12]
    272a:	460b      	mov	r3, r1
    272c:	607a      	str	r2, [r7, #4]
    272e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2730:	7afb      	ldrb	r3, [r7, #11]
    2732:	68fa      	ldr	r2, [r7, #12]
    2734:	01db      	lsls	r3, r3, #7
    2736:	4413      	add	r3, r2
    2738:	3308      	adds	r3, #8
    273a:	687a      	ldr	r2, [r7, #4]
    273c:	601a      	str	r2, [r3, #0]
}
    273e:	bf00      	nop
    2740:	3714      	adds	r7, #20
    2742:	46bd      	mov	sp, r7
    2744:	f85d 7b04 	ldr.w	r7, [sp], #4
    2748:	4770      	bx	lr

0000274a <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    274a:	b480      	push	{r7}
    274c:	b085      	sub	sp, #20
    274e:	af00      	add	r7, sp, #0
    2750:	60f8      	str	r0, [r7, #12]
    2752:	460b      	mov	r3, r1
    2754:	607a      	str	r2, [r7, #4]
    2756:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2758:	7afb      	ldrb	r3, [r7, #11]
    275a:	68fa      	ldr	r2, [r7, #12]
    275c:	01db      	lsls	r3, r3, #7
    275e:	4413      	add	r3, r2
    2760:	3304      	adds	r3, #4
    2762:	687a      	ldr	r2, [r7, #4]
    2764:	601a      	str	r2, [r3, #0]
}
    2766:	bf00      	nop
    2768:	3714      	adds	r7, #20
    276a:	46bd      	mov	sp, r7
    276c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2770:	4770      	bx	lr

00002772 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2772:	b480      	push	{r7}
    2774:	b085      	sub	sp, #20
    2776:	af00      	add	r7, sp, #0
    2778:	60f8      	str	r0, [r7, #12]
    277a:	460b      	mov	r3, r1
    277c:	607a      	str	r2, [r7, #4]
    277e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2780:	7afb      	ldrb	r3, [r7, #11]
    2782:	68fa      	ldr	r2, [r7, #12]
    2784:	01db      	lsls	r3, r3, #7
    2786:	4413      	add	r3, r2
    2788:	3318      	adds	r3, #24
    278a:	687a      	ldr	r2, [r7, #4]
    278c:	601a      	str	r2, [r3, #0]
}
    278e:	bf00      	nop
    2790:	3714      	adds	r7, #20
    2792:	46bd      	mov	sp, r7
    2794:	f85d 7b04 	ldr.w	r7, [sp], #4
    2798:	4770      	bx	lr

0000279a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    279a:	b480      	push	{r7}
    279c:	b085      	sub	sp, #20
    279e:	af00      	add	r7, sp, #0
    27a0:	60f8      	str	r0, [r7, #12]
    27a2:	460b      	mov	r3, r1
    27a4:	607a      	str	r2, [r7, #4]
    27a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27a8:	7afb      	ldrb	r3, [r7, #11]
    27aa:	68fa      	ldr	r2, [r7, #12]
    27ac:	01db      	lsls	r3, r3, #7
    27ae:	4413      	add	r3, r2
    27b0:	3314      	adds	r3, #20
    27b2:	687a      	ldr	r2, [r7, #4]
    27b4:	601a      	str	r2, [r3, #0]
}
    27b6:	bf00      	nop
    27b8:	3714      	adds	r7, #20
    27ba:	46bd      	mov	sp, r7
    27bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    27c0:	4770      	bx	lr

000027c2 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    27c2:	b480      	push	{r7}
    27c4:	b085      	sub	sp, #20
    27c6:	af00      	add	r7, sp, #0
    27c8:	6078      	str	r0, [r7, #4]
    27ca:	4608      	mov	r0, r1
    27cc:	4611      	mov	r1, r2
    27ce:	461a      	mov	r2, r3
    27d0:	4603      	mov	r3, r0
    27d2:	70fb      	strb	r3, [r7, #3]
    27d4:	460b      	mov	r3, r1
    27d6:	70bb      	strb	r3, [r7, #2]
    27d8:	4613      	mov	r3, r2
    27da:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    27dc:	78fa      	ldrb	r2, [r7, #3]
    27de:	78bb      	ldrb	r3, [r7, #2]
    27e0:	6879      	ldr	r1, [r7, #4]
    27e2:	01d2      	lsls	r2, r2, #7
    27e4:	440a      	add	r2, r1
    27e6:	4413      	add	r3, r2
    27e8:	3330      	adds	r3, #48	; 0x30
    27ea:	781b      	ldrb	r3, [r3, #0]
    27ec:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    27ee:	7bfb      	ldrb	r3, [r7, #15]
    27f0:	f023 030f 	bic.w	r3, r3, #15
    27f4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    27f6:	787b      	ldrb	r3, [r7, #1]
    27f8:	f003 030f 	and.w	r3, r3, #15
    27fc:	b2da      	uxtb	r2, r3
    27fe:	7bfb      	ldrb	r3, [r7, #15]
    2800:	4313      	orrs	r3, r2
    2802:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2804:	78fa      	ldrb	r2, [r7, #3]
    2806:	78bb      	ldrb	r3, [r7, #2]
    2808:	6879      	ldr	r1, [r7, #4]
    280a:	01d2      	lsls	r2, r2, #7
    280c:	440a      	add	r2, r1
    280e:	4413      	add	r3, r2
    2810:	3330      	adds	r3, #48	; 0x30
    2812:	7bfa      	ldrb	r2, [r7, #15]
    2814:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2816:	bf00      	nop
    2818:	3714      	adds	r7, #20
    281a:	46bd      	mov	sp, r7
    281c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2820:	4770      	bx	lr

00002822 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2822:	b480      	push	{r7}
    2824:	b085      	sub	sp, #20
    2826:	af00      	add	r7, sp, #0
    2828:	6078      	str	r0, [r7, #4]
    282a:	4608      	mov	r0, r1
    282c:	4611      	mov	r1, r2
    282e:	461a      	mov	r2, r3
    2830:	4603      	mov	r3, r0
    2832:	70fb      	strb	r3, [r7, #3]
    2834:	460b      	mov	r3, r1
    2836:	70bb      	strb	r3, [r7, #2]
    2838:	4613      	mov	r3, r2
    283a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    283c:	78fa      	ldrb	r2, [r7, #3]
    283e:	78bb      	ldrb	r3, [r7, #2]
    2840:	6879      	ldr	r1, [r7, #4]
    2842:	01d2      	lsls	r2, r2, #7
    2844:	440a      	add	r2, r1
    2846:	4413      	add	r3, r2
    2848:	3330      	adds	r3, #48	; 0x30
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    284e:	7bfb      	ldrb	r3, [r7, #15]
    2850:	f003 030f 	and.w	r3, r3, #15
    2854:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    2856:	787b      	ldrb	r3, [r7, #1]
    2858:	011b      	lsls	r3, r3, #4
    285a:	b2da      	uxtb	r2, r3
    285c:	7bfb      	ldrb	r3, [r7, #15]
    285e:	4313      	orrs	r3, r2
    2860:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2862:	78fa      	ldrb	r2, [r7, #3]
    2864:	78bb      	ldrb	r3, [r7, #2]
    2866:	6879      	ldr	r1, [r7, #4]
    2868:	01d2      	lsls	r2, r2, #7
    286a:	440a      	add	r2, r1
    286c:	4413      	add	r3, r2
    286e:	3330      	adds	r3, #48	; 0x30
    2870:	7bfa      	ldrb	r2, [r7, #15]
    2872:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2874:	bf00      	nop
    2876:	3714      	adds	r7, #20
    2878:	46bd      	mov	sp, r7
    287a:	f85d 7b04 	ldr.w	r7, [sp], #4
    287e:	4770      	bx	lr

00002880 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2880:	b480      	push	{r7}
    2882:	b085      	sub	sp, #20
    2884:	af00      	add	r7, sp, #0
    2886:	6078      	str	r0, [r7, #4]
    2888:	4608      	mov	r0, r1
    288a:	4611      	mov	r1, r2
    288c:	461a      	mov	r2, r3
    288e:	4603      	mov	r3, r0
    2890:	70fb      	strb	r3, [r7, #3]
    2892:	460b      	mov	r3, r1
    2894:	70bb      	strb	r3, [r7, #2]
    2896:	4613      	mov	r3, r2
    2898:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    289a:	78fa      	ldrb	r2, [r7, #3]
    289c:	78bb      	ldrb	r3, [r7, #2]
    289e:	6879      	ldr	r1, [r7, #4]
    28a0:	01d2      	lsls	r2, r2, #7
    28a2:	440a      	add	r2, r1
    28a4:	4413      	add	r3, r2
    28a6:	3340      	adds	r3, #64	; 0x40
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    28ac:	7bfb      	ldrb	r3, [r7, #15]
    28ae:	f023 0301 	bic.w	r3, r3, #1
    28b2:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    28b4:	787a      	ldrb	r2, [r7, #1]
    28b6:	7bfb      	ldrb	r3, [r7, #15]
    28b8:	4313      	orrs	r3, r2
    28ba:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    28bc:	78fa      	ldrb	r2, [r7, #3]
    28be:	78bb      	ldrb	r3, [r7, #2]
    28c0:	6879      	ldr	r1, [r7, #4]
    28c2:	01d2      	lsls	r2, r2, #7
    28c4:	440a      	add	r2, r1
    28c6:	4413      	add	r3, r2
    28c8:	3340      	adds	r3, #64	; 0x40
    28ca:	7bfa      	ldrb	r2, [r7, #15]
    28cc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    28ce:	bf00      	nop
    28d0:	3714      	adds	r7, #20
    28d2:	46bd      	mov	sp, r7
    28d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28d8:	4770      	bx	lr

000028da <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    28da:	b490      	push	{r4, r7}
    28dc:	b082      	sub	sp, #8
    28de:	af00      	add	r7, sp, #0
    28e0:	6078      	str	r0, [r7, #4]
    28e2:	460b      	mov	r3, r1
    28e4:	70fb      	strb	r3, [r7, #3]
    28e6:	4613      	mov	r3, r2
    28e8:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    28ea:	78fa      	ldrb	r2, [r7, #3]
    28ec:	78bb      	ldrb	r3, [r7, #2]
    28ee:	78f8      	ldrb	r0, [r7, #3]
    28f0:	78b9      	ldrb	r1, [r7, #2]
    28f2:	687c      	ldr	r4, [r7, #4]
    28f4:	01c0      	lsls	r0, r0, #7
    28f6:	4420      	add	r0, r4
    28f8:	4401      	add	r1, r0
    28fa:	3140      	adds	r1, #64	; 0x40
    28fc:	7809      	ldrb	r1, [r1, #0]
    28fe:	b2c9      	uxtb	r1, r1
    2900:	f041 0104 	orr.w	r1, r1, #4
    2904:	b2c8      	uxtb	r0, r1
    2906:	6879      	ldr	r1, [r7, #4]
    2908:	01d2      	lsls	r2, r2, #7
    290a:	440a      	add	r2, r1
    290c:	4413      	add	r3, r2
    290e:	3340      	adds	r3, #64	; 0x40
    2910:	4602      	mov	r2, r0
    2912:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2914:	bf00      	nop
    2916:	3708      	adds	r7, #8
    2918:	46bd      	mov	sp, r7
    291a:	bc90      	pop	{r4, r7}
    291c:	4770      	bx	lr

0000291e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    291e:	b490      	push	{r4, r7}
    2920:	b082      	sub	sp, #8
    2922:	af00      	add	r7, sp, #0
    2924:	6078      	str	r0, [r7, #4]
    2926:	460b      	mov	r3, r1
    2928:	70fb      	strb	r3, [r7, #3]
    292a:	4613      	mov	r3, r2
    292c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    292e:	78fa      	ldrb	r2, [r7, #3]
    2930:	78bb      	ldrb	r3, [r7, #2]
    2932:	78f8      	ldrb	r0, [r7, #3]
    2934:	78b9      	ldrb	r1, [r7, #2]
    2936:	687c      	ldr	r4, [r7, #4]
    2938:	01c0      	lsls	r0, r0, #7
    293a:	4420      	add	r0, r4
    293c:	4401      	add	r1, r0
    293e:	3140      	adds	r1, #64	; 0x40
    2940:	7809      	ldrb	r1, [r1, #0]
    2942:	b2c9      	uxtb	r1, r1
    2944:	f021 0104 	bic.w	r1, r1, #4
    2948:	b2c8      	uxtb	r0, r1
    294a:	6879      	ldr	r1, [r7, #4]
    294c:	01d2      	lsls	r2, r2, #7
    294e:	440a      	add	r2, r1
    2950:	4413      	add	r3, r2
    2952:	3340      	adds	r3, #64	; 0x40
    2954:	4602      	mov	r2, r0
    2956:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2958:	bf00      	nop
    295a:	3708      	adds	r7, #8
    295c:	46bd      	mov	sp, r7
    295e:	bc90      	pop	{r4, r7}
    2960:	4770      	bx	lr

00002962 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    2962:	b480      	push	{r7}
    2964:	b085      	sub	sp, #20
    2966:	af00      	add	r7, sp, #0
    2968:	60f8      	str	r0, [r7, #12]
    296a:	460b      	mov	r3, r1
    296c:	607a      	str	r2, [r7, #4]
    296e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2970:	7afb      	ldrb	r3, [r7, #11]
    2972:	68fa      	ldr	r2, [r7, #12]
    2974:	01db      	lsls	r3, r3, #7
    2976:	4413      	add	r3, r2
    2978:	3328      	adds	r3, #40	; 0x28
    297a:	687a      	ldr	r2, [r7, #4]
    297c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    297e:	bf00      	nop
    2980:	3714      	adds	r7, #20
    2982:	46bd      	mov	sp, r7
    2984:	f85d 7b04 	ldr.w	r7, [sp], #4
    2988:	4770      	bx	lr
	...

0000298c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    298c:	b580      	push	{r7, lr}
    298e:	b082      	sub	sp, #8
    2990:	af00      	add	r7, sp, #0
    2992:	4603      	mov	r3, r0
    2994:	6039      	str	r1, [r7, #0]
    2996:	71fb      	strb	r3, [r7, #7]
    2998:	4613      	mov	r3, r2
    299a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    299c:	79bb      	ldrb	r3, [r7, #6]
    299e:	2b01      	cmp	r3, #1
    29a0:	d01c      	beq.n	29dc <_gpio_set_direction+0x50>
    29a2:	2b02      	cmp	r3, #2
    29a4:	d037      	beq.n	2a16 <_gpio_set_direction+0x8a>
    29a6:	2b00      	cmp	r3, #0
    29a8:	d14e      	bne.n	2a48 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    29aa:	79fb      	ldrb	r3, [r7, #7]
    29ac:	683a      	ldr	r2, [r7, #0]
    29ae:	4619      	mov	r1, r3
    29b0:	482a      	ldr	r0, [pc, #168]	; (2a5c <_gpio_set_direction+0xd0>)
    29b2:	4b2b      	ldr	r3, [pc, #172]	; (2a60 <_gpio_set_direction+0xd4>)
    29b4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    29b6:	683b      	ldr	r3, [r7, #0]
    29b8:	b29b      	uxth	r3, r3
    29ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    29be:	79fb      	ldrb	r3, [r7, #7]
    29c0:	4619      	mov	r1, r3
    29c2:	4826      	ldr	r0, [pc, #152]	; (2a5c <_gpio_set_direction+0xd0>)
    29c4:	4b27      	ldr	r3, [pc, #156]	; (2a64 <_gpio_set_direction+0xd8>)
    29c6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    29c8:	683b      	ldr	r3, [r7, #0]
    29ca:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    29cc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    29d0:	79fb      	ldrb	r3, [r7, #7]
    29d2:	4619      	mov	r1, r3
    29d4:	4821      	ldr	r0, [pc, #132]	; (2a5c <_gpio_set_direction+0xd0>)
    29d6:	4b23      	ldr	r3, [pc, #140]	; (2a64 <_gpio_set_direction+0xd8>)
    29d8:	4798      	blx	r3
		break;
    29da:	e03a      	b.n	2a52 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    29dc:	79fb      	ldrb	r3, [r7, #7]
    29de:	683a      	ldr	r2, [r7, #0]
    29e0:	4619      	mov	r1, r3
    29e2:	481e      	ldr	r0, [pc, #120]	; (2a5c <_gpio_set_direction+0xd0>)
    29e4:	4b1e      	ldr	r3, [pc, #120]	; (2a60 <_gpio_set_direction+0xd4>)
    29e6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    29e8:	683b      	ldr	r3, [r7, #0]
    29ea:	b29b      	uxth	r3, r3
    29ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    29f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    29f4:	79f9      	ldrb	r1, [r7, #7]
    29f6:	461a      	mov	r2, r3
    29f8:	4818      	ldr	r0, [pc, #96]	; (2a5c <_gpio_set_direction+0xd0>)
    29fa:	4b1a      	ldr	r3, [pc, #104]	; (2a64 <_gpio_set_direction+0xd8>)
    29fc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    29fe:	683b      	ldr	r3, [r7, #0]
    2a00:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    2a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2a0a:	79f9      	ldrb	r1, [r7, #7]
    2a0c:	461a      	mov	r2, r3
    2a0e:	4813      	ldr	r0, [pc, #76]	; (2a5c <_gpio_set_direction+0xd0>)
    2a10:	4b14      	ldr	r3, [pc, #80]	; (2a64 <_gpio_set_direction+0xd8>)
    2a12:	4798      	blx	r3
		break;
    2a14:	e01d      	b.n	2a52 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    2a16:	79fb      	ldrb	r3, [r7, #7]
    2a18:	683a      	ldr	r2, [r7, #0]
    2a1a:	4619      	mov	r1, r3
    2a1c:	480f      	ldr	r0, [pc, #60]	; (2a5c <_gpio_set_direction+0xd0>)
    2a1e:	4b12      	ldr	r3, [pc, #72]	; (2a68 <_gpio_set_direction+0xdc>)
    2a20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    2a22:	683b      	ldr	r3, [r7, #0]
    2a24:	b29b      	uxth	r3, r3
    2a26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    2a2a:	79fb      	ldrb	r3, [r7, #7]
    2a2c:	4619      	mov	r1, r3
    2a2e:	480b      	ldr	r0, [pc, #44]	; (2a5c <_gpio_set_direction+0xd0>)
    2a30:	4b0c      	ldr	r3, [pc, #48]	; (2a64 <_gpio_set_direction+0xd8>)
    2a32:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    2a34:	683b      	ldr	r3, [r7, #0]
    2a36:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    2a38:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    2a3c:	79fb      	ldrb	r3, [r7, #7]
    2a3e:	4619      	mov	r1, r3
    2a40:	4806      	ldr	r0, [pc, #24]	; (2a5c <_gpio_set_direction+0xd0>)
    2a42:	4b08      	ldr	r3, [pc, #32]	; (2a64 <_gpio_set_direction+0xd8>)
    2a44:	4798      	blx	r3
		break;
    2a46:	e004      	b.n	2a52 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    2a48:	2246      	movs	r2, #70	; 0x46
    2a4a:	4908      	ldr	r1, [pc, #32]	; (2a6c <_gpio_set_direction+0xe0>)
    2a4c:	2000      	movs	r0, #0
    2a4e:	4b08      	ldr	r3, [pc, #32]	; (2a70 <_gpio_set_direction+0xe4>)
    2a50:	4798      	blx	r3
	}
}
    2a52:	bf00      	nop
    2a54:	3708      	adds	r7, #8
    2a56:	46bd      	mov	sp, r7
    2a58:	bd80      	pop	{r7, pc}
    2a5a:	bf00      	nop
    2a5c:	41008000 	.word	0x41008000
    2a60:	0000274b 	.word	0x0000274b
    2a64:	00002963 	.word	0x00002963
    2a68:	00002723 	.word	0x00002723
    2a6c:	00011930 	.word	0x00011930
    2a70:	00005545 	.word	0x00005545

00002a74 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    2a74:	b580      	push	{r7, lr}
    2a76:	b082      	sub	sp, #8
    2a78:	af00      	add	r7, sp, #0
    2a7a:	4603      	mov	r3, r0
    2a7c:	6039      	str	r1, [r7, #0]
    2a7e:	71fb      	strb	r3, [r7, #7]
    2a80:	4613      	mov	r3, r2
    2a82:	71bb      	strb	r3, [r7, #6]
	if (level) {
    2a84:	79bb      	ldrb	r3, [r7, #6]
    2a86:	2b00      	cmp	r3, #0
    2a88:	d006      	beq.n	2a98 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    2a8a:	79fb      	ldrb	r3, [r7, #7]
    2a8c:	683a      	ldr	r2, [r7, #0]
    2a8e:	4619      	mov	r1, r3
    2a90:	4806      	ldr	r0, [pc, #24]	; (2aac <_gpio_set_level+0x38>)
    2a92:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <_gpio_set_level+0x3c>)
    2a94:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    2a96:	e005      	b.n	2aa4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    2a98:	79fb      	ldrb	r3, [r7, #7]
    2a9a:	683a      	ldr	r2, [r7, #0]
    2a9c:	4619      	mov	r1, r3
    2a9e:	4803      	ldr	r0, [pc, #12]	; (2aac <_gpio_set_level+0x38>)
    2aa0:	4b04      	ldr	r3, [pc, #16]	; (2ab4 <_gpio_set_level+0x40>)
    2aa2:	4798      	blx	r3
}
    2aa4:	bf00      	nop
    2aa6:	3708      	adds	r7, #8
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bd80      	pop	{r7, pc}
    2aac:	41008000 	.word	0x41008000
    2ab0:	00002773 	.word	0x00002773
    2ab4:	0000279b 	.word	0x0000279b

00002ab8 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0
    2abe:	4603      	mov	r3, r0
    2ac0:	71fb      	strb	r3, [r7, #7]
    2ac2:	460b      	mov	r3, r1
    2ac4:	71bb      	strb	r3, [r7, #6]
    2ac6:	4613      	mov	r3, r2
    2ac8:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    2aca:	797b      	ldrb	r3, [r7, #5]
    2acc:	2b01      	cmp	r3, #1
    2ace:	d00a      	beq.n	2ae6 <_gpio_set_pin_pull_mode+0x2e>
    2ad0:	2b02      	cmp	r3, #2
    2ad2:	d01f      	beq.n	2b14 <_gpio_set_pin_pull_mode+0x5c>
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d134      	bne.n	2b42 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    2ad8:	79ba      	ldrb	r2, [r7, #6]
    2ada:	79fb      	ldrb	r3, [r7, #7]
    2adc:	4619      	mov	r1, r3
    2ade:	481e      	ldr	r0, [pc, #120]	; (2b58 <_gpio_set_pin_pull_mode+0xa0>)
    2ae0:	4b1e      	ldr	r3, [pc, #120]	; (2b5c <_gpio_set_pin_pull_mode+0xa4>)
    2ae2:	4798      	blx	r3
		break;
    2ae4:	e033      	b.n	2b4e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2ae6:	79bb      	ldrb	r3, [r7, #6]
    2ae8:	2201      	movs	r2, #1
    2aea:	409a      	lsls	r2, r3
    2aec:	79fb      	ldrb	r3, [r7, #7]
    2aee:	4619      	mov	r1, r3
    2af0:	4819      	ldr	r0, [pc, #100]	; (2b58 <_gpio_set_pin_pull_mode+0xa0>)
    2af2:	4b1b      	ldr	r3, [pc, #108]	; (2b60 <_gpio_set_pin_pull_mode+0xa8>)
    2af4:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2af6:	79ba      	ldrb	r2, [r7, #6]
    2af8:	79fb      	ldrb	r3, [r7, #7]
    2afa:	4619      	mov	r1, r3
    2afc:	4816      	ldr	r0, [pc, #88]	; (2b58 <_gpio_set_pin_pull_mode+0xa0>)
    2afe:	4b19      	ldr	r3, [pc, #100]	; (2b64 <_gpio_set_pin_pull_mode+0xac>)
    2b00:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    2b02:	79bb      	ldrb	r3, [r7, #6]
    2b04:	2201      	movs	r2, #1
    2b06:	409a      	lsls	r2, r3
    2b08:	79fb      	ldrb	r3, [r7, #7]
    2b0a:	4619      	mov	r1, r3
    2b0c:	4812      	ldr	r0, [pc, #72]	; (2b58 <_gpio_set_pin_pull_mode+0xa0>)
    2b0e:	4b16      	ldr	r3, [pc, #88]	; (2b68 <_gpio_set_pin_pull_mode+0xb0>)
    2b10:	4798      	blx	r3
		break;
    2b12:	e01c      	b.n	2b4e <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    2b14:	79bb      	ldrb	r3, [r7, #6]
    2b16:	2201      	movs	r2, #1
    2b18:	409a      	lsls	r2, r3
    2b1a:	79fb      	ldrb	r3, [r7, #7]
    2b1c:	4619      	mov	r1, r3
    2b1e:	480e      	ldr	r0, [pc, #56]	; (2b58 <_gpio_set_pin_pull_mode+0xa0>)
    2b20:	4b0f      	ldr	r3, [pc, #60]	; (2b60 <_gpio_set_pin_pull_mode+0xa8>)
    2b22:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    2b24:	79ba      	ldrb	r2, [r7, #6]
    2b26:	79fb      	ldrb	r3, [r7, #7]
    2b28:	4619      	mov	r1, r3
    2b2a:	480b      	ldr	r0, [pc, #44]	; (2b58 <_gpio_set_pin_pull_mode+0xa0>)
    2b2c:	4b0d      	ldr	r3, [pc, #52]	; (2b64 <_gpio_set_pin_pull_mode+0xac>)
    2b2e:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    2b30:	79bb      	ldrb	r3, [r7, #6]
    2b32:	2201      	movs	r2, #1
    2b34:	409a      	lsls	r2, r3
    2b36:	79fb      	ldrb	r3, [r7, #7]
    2b38:	4619      	mov	r1, r3
    2b3a:	4807      	ldr	r0, [pc, #28]	; (2b58 <_gpio_set_pin_pull_mode+0xa0>)
    2b3c:	4b0b      	ldr	r3, [pc, #44]	; (2b6c <_gpio_set_pin_pull_mode+0xb4>)
    2b3e:	4798      	blx	r3
		break;
    2b40:	e005      	b.n	2b4e <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    2b42:	2289      	movs	r2, #137	; 0x89
    2b44:	490a      	ldr	r1, [pc, #40]	; (2b70 <_gpio_set_pin_pull_mode+0xb8>)
    2b46:	2000      	movs	r0, #0
    2b48:	4b0a      	ldr	r3, [pc, #40]	; (2b74 <_gpio_set_pin_pull_mode+0xbc>)
    2b4a:	4798      	blx	r3
		break;
    2b4c:	bf00      	nop
	}
}
    2b4e:	bf00      	nop
    2b50:	3708      	adds	r7, #8
    2b52:	46bd      	mov	sp, r7
    2b54:	bd80      	pop	{r7, pc}
    2b56:	bf00      	nop
    2b58:	41008000 	.word	0x41008000
    2b5c:	0000291f 	.word	0x0000291f
    2b60:	0000274b 	.word	0x0000274b
    2b64:	000028db 	.word	0x000028db
    2b68:	00002773 	.word	0x00002773
    2b6c:	0000279b 	.word	0x0000279b
    2b70:	00011930 	.word	0x00011930
    2b74:	00005545 	.word	0x00005545

00002b78 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    2b78:	b590      	push	{r4, r7, lr}
    2b7a:	b085      	sub	sp, #20
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	6078      	str	r0, [r7, #4]
    2b80:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    2b82:	687b      	ldr	r3, [r7, #4]
    2b84:	095b      	lsrs	r3, r3, #5
    2b86:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	b2db      	uxtb	r3, r3
    2b8c:	f003 031f 	and.w	r3, r3, #31
    2b90:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    2b92:	683b      	ldr	r3, [r7, #0]
    2b94:	f1b3 3fff 	cmp.w	r3, #4294967295
    2b98:	d106      	bne.n	2ba8 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    2b9a:	7bba      	ldrb	r2, [r7, #14]
    2b9c:	7bf9      	ldrb	r1, [r7, #15]
    2b9e:	2300      	movs	r3, #0
    2ba0:	4812      	ldr	r0, [pc, #72]	; (2bec <_gpio_set_pin_function+0x74>)
    2ba2:	4c13      	ldr	r4, [pc, #76]	; (2bf0 <_gpio_set_pin_function+0x78>)
    2ba4:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    2ba6:	e01d      	b.n	2be4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    2ba8:	7bba      	ldrb	r2, [r7, #14]
    2baa:	7bf9      	ldrb	r1, [r7, #15]
    2bac:	2301      	movs	r3, #1
    2bae:	480f      	ldr	r0, [pc, #60]	; (2bec <_gpio_set_pin_function+0x74>)
    2bb0:	4c0f      	ldr	r4, [pc, #60]	; (2bf0 <_gpio_set_pin_function+0x78>)
    2bb2:	47a0      	blx	r4
		if (pin & 1) {
    2bb4:	7bbb      	ldrb	r3, [r7, #14]
    2bb6:	f003 0301 	and.w	r3, r3, #1
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d009      	beq.n	2bd2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    2bbe:	7bbb      	ldrb	r3, [r7, #14]
    2bc0:	085b      	lsrs	r3, r3, #1
    2bc2:	b2da      	uxtb	r2, r3
    2bc4:	683b      	ldr	r3, [r7, #0]
    2bc6:	b2db      	uxtb	r3, r3
    2bc8:	7bf9      	ldrb	r1, [r7, #15]
    2bca:	4808      	ldr	r0, [pc, #32]	; (2bec <_gpio_set_pin_function+0x74>)
    2bcc:	4c09      	ldr	r4, [pc, #36]	; (2bf4 <_gpio_set_pin_function+0x7c>)
    2bce:	47a0      	blx	r4
}
    2bd0:	e008      	b.n	2be4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    2bd2:	7bbb      	ldrb	r3, [r7, #14]
    2bd4:	085b      	lsrs	r3, r3, #1
    2bd6:	b2da      	uxtb	r2, r3
    2bd8:	683b      	ldr	r3, [r7, #0]
    2bda:	b2db      	uxtb	r3, r3
    2bdc:	7bf9      	ldrb	r1, [r7, #15]
    2bde:	4803      	ldr	r0, [pc, #12]	; (2bec <_gpio_set_pin_function+0x74>)
    2be0:	4c05      	ldr	r4, [pc, #20]	; (2bf8 <_gpio_set_pin_function+0x80>)
    2be2:	47a0      	blx	r4
}
    2be4:	bf00      	nop
    2be6:	3714      	adds	r7, #20
    2be8:	46bd      	mov	sp, r7
    2bea:	bd90      	pop	{r4, r7, pc}
    2bec:	41008000 	.word	0x41008000
    2bf0:	00002881 	.word	0x00002881
    2bf4:	00002823 	.word	0x00002823
    2bf8:	000027c3 	.word	0x000027c3

00002bfc <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b082      	sub	sp, #8
    2c00:	af00      	add	r7, sp, #0
    2c02:	4603      	mov	r3, r0
    2c04:	460a      	mov	r2, r1
    2c06:	71fb      	strb	r3, [r7, #7]
    2c08:	4613      	mov	r3, r2
    2c0a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    2c0c:	79fb      	ldrb	r3, [r7, #7]
    2c0e:	095b      	lsrs	r3, r3, #5
    2c10:	b2d8      	uxtb	r0, r3
    2c12:	79fb      	ldrb	r3, [r7, #7]
    2c14:	f003 031f 	and.w	r3, r3, #31
    2c18:	b2db      	uxtb	r3, r3
    2c1a:	79ba      	ldrb	r2, [r7, #6]
    2c1c:	4619      	mov	r1, r3
    2c1e:	4b03      	ldr	r3, [pc, #12]	; (2c2c <gpio_set_pin_pull_mode+0x30>)
    2c20:	4798      	blx	r3
}
    2c22:	bf00      	nop
    2c24:	3708      	adds	r7, #8
    2c26:	46bd      	mov	sp, r7
    2c28:	bd80      	pop	{r7, pc}
    2c2a:	bf00      	nop
    2c2c:	00002ab9 	.word	0x00002ab9

00002c30 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	af00      	add	r7, sp, #0
    2c36:	6078      	str	r0, [r7, #4]
    2c38:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    2c3a:	6839      	ldr	r1, [r7, #0]
    2c3c:	6878      	ldr	r0, [r7, #4]
    2c3e:	4b03      	ldr	r3, [pc, #12]	; (2c4c <gpio_set_pin_function+0x1c>)
    2c40:	4798      	blx	r3
}
    2c42:	bf00      	nop
    2c44:	3708      	adds	r7, #8
    2c46:	46bd      	mov	sp, r7
    2c48:	bd80      	pop	{r7, pc}
    2c4a:	bf00      	nop
    2c4c:	00002b79 	.word	0x00002b79

00002c50 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    2c50:	b580      	push	{r7, lr}
    2c52:	b082      	sub	sp, #8
    2c54:	af00      	add	r7, sp, #0
    2c56:	4603      	mov	r3, r0
    2c58:	460a      	mov	r2, r1
    2c5a:	71fb      	strb	r3, [r7, #7]
    2c5c:	4613      	mov	r3, r2
    2c5e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    2c60:	79fb      	ldrb	r3, [r7, #7]
    2c62:	095b      	lsrs	r3, r3, #5
    2c64:	b2d8      	uxtb	r0, r3
    2c66:	79fb      	ldrb	r3, [r7, #7]
    2c68:	f003 031f 	and.w	r3, r3, #31
    2c6c:	2201      	movs	r2, #1
    2c6e:	fa02 f303 	lsl.w	r3, r2, r3
    2c72:	79ba      	ldrb	r2, [r7, #6]
    2c74:	4619      	mov	r1, r3
    2c76:	4b03      	ldr	r3, [pc, #12]	; (2c84 <gpio_set_pin_direction+0x34>)
    2c78:	4798      	blx	r3
}
    2c7a:	bf00      	nop
    2c7c:	3708      	adds	r7, #8
    2c7e:	46bd      	mov	sp, r7
    2c80:	bd80      	pop	{r7, pc}
    2c82:	bf00      	nop
    2c84:	0000298d 	.word	0x0000298d

00002c88 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b082      	sub	sp, #8
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	4603      	mov	r3, r0
    2c90:	460a      	mov	r2, r1
    2c92:	71fb      	strb	r3, [r7, #7]
    2c94:	4613      	mov	r3, r2
    2c96:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2c98:	79fb      	ldrb	r3, [r7, #7]
    2c9a:	095b      	lsrs	r3, r3, #5
    2c9c:	b2d8      	uxtb	r0, r3
    2c9e:	79fb      	ldrb	r3, [r7, #7]
    2ca0:	f003 031f 	and.w	r3, r3, #31
    2ca4:	2201      	movs	r2, #1
    2ca6:	fa02 f303 	lsl.w	r3, r2, r3
    2caa:	79ba      	ldrb	r2, [r7, #6]
    2cac:	4619      	mov	r1, r3
    2cae:	4b03      	ldr	r3, [pc, #12]	; (2cbc <gpio_set_pin_level+0x34>)
    2cb0:	4798      	blx	r3
}
    2cb2:	bf00      	nop
    2cb4:	3708      	adds	r7, #8
    2cb6:	46bd      	mov	sp, r7
    2cb8:	bd80      	pop	{r7, pc}
    2cba:	bf00      	nop
    2cbc:	00002a75 	.word	0x00002a75

00002cc0 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	af00      	add	r7, sp, #0
	_init_chip();
    2cc4:	4b01      	ldr	r3, [pc, #4]	; (2ccc <init_mcu+0xc>)
    2cc6:	4798      	blx	r3
}
    2cc8:	bf00      	nop
    2cca:	bd80      	pop	{r7, pc}
    2ccc:	00006141 	.word	0x00006141

00002cd0 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2cd0:	b580      	push	{r7, lr}
    2cd2:	b082      	sub	sp, #8
    2cd4:	af00      	add	r7, sp, #0
    2cd6:	6078      	str	r0, [r7, #4]
    2cd8:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d004      	beq.n	2cea <wdt_init+0x1a>
    2ce0:	683b      	ldr	r3, [r7, #0]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d001      	beq.n	2cea <wdt_init+0x1a>
    2ce6:	2301      	movs	r3, #1
    2ce8:	e000      	b.n	2cec <wdt_init+0x1c>
    2cea:	2300      	movs	r3, #0
    2cec:	f003 0301 	and.w	r3, r3, #1
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	2248      	movs	r2, #72	; 0x48
    2cf4:	4907      	ldr	r1, [pc, #28]	; (2d14 <wdt_init+0x44>)
    2cf6:	4618      	mov	r0, r3
    2cf8:	4b07      	ldr	r3, [pc, #28]	; (2d18 <wdt_init+0x48>)
    2cfa:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	683a      	ldr	r2, [r7, #0]
    2d00:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    2d02:	687b      	ldr	r3, [r7, #4]
    2d04:	4618      	mov	r0, r3
    2d06:	4b05      	ldr	r3, [pc, #20]	; (2d1c <wdt_init+0x4c>)
    2d08:	4798      	blx	r3
    2d0a:	4603      	mov	r3, r0
}
    2d0c:	4618      	mov	r0, r3
    2d0e:	3708      	adds	r7, #8
    2d10:	46bd      	mov	sp, r7
    2d12:	bd80      	pop	{r7, pc}
    2d14:	0001194c 	.word	0x0001194c
    2d18:	00005545 	.word	0x00005545
    2d1c:	0000c8d1 	.word	0x0000c8d1

00002d20 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2d20:	b580      	push	{r7, lr}
    2d22:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    2d24:	4804      	ldr	r0, [pc, #16]	; (2d38 <CRC_CALC_init+0x18>)
    2d26:	4b05      	ldr	r3, [pc, #20]	; (2d3c <CRC_CALC_init+0x1c>)
    2d28:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    2d2a:	4905      	ldr	r1, [pc, #20]	; (2d40 <CRC_CALC_init+0x20>)
    2d2c:	4805      	ldr	r0, [pc, #20]	; (2d44 <CRC_CALC_init+0x24>)
    2d2e:	4b06      	ldr	r3, [pc, #24]	; (2d48 <CRC_CALC_init+0x28>)
    2d30:	4798      	blx	r3
}
    2d32:	bf00      	nop
    2d34:	bd80      	pop	{r7, pc}
    2d36:	bf00      	nop
    2d38:	40000800 	.word	0x40000800
    2d3c:	000025e3 	.word	0x000025e3
    2d40:	41002000 	.word	0x41002000
    2d44:	20002368 	.word	0x20002368
    2d48:	00003ac9 	.word	0x00003ac9

00002d4c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2d50:	2244      	movs	r2, #68	; 0x44
    2d52:	2104      	movs	r1, #4
    2d54:	481e      	ldr	r0, [pc, #120]	; (2dd0 <EXTERNAL_IRQ_0_init+0x84>)
    2d56:	4b1f      	ldr	r3, [pc, #124]	; (2dd4 <EXTERNAL_IRQ_0_init+0x88>)
    2d58:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    2d5a:	481f      	ldr	r0, [pc, #124]	; (2dd8 <EXTERNAL_IRQ_0_init+0x8c>)
    2d5c:	4b1f      	ldr	r3, [pc, #124]	; (2ddc <EXTERNAL_IRQ_0_init+0x90>)
    2d5e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    2d60:	2101      	movs	r1, #1
    2d62:	2004      	movs	r0, #4
    2d64:	4b1e      	ldr	r3, [pc, #120]	; (2de0 <EXTERNAL_IRQ_0_init+0x94>)
    2d66:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    2d68:	2102      	movs	r1, #2
    2d6a:	2004      	movs	r0, #4
    2d6c:	4b1d      	ldr	r3, [pc, #116]	; (2de4 <EXTERNAL_IRQ_0_init+0x98>)
    2d6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    2d70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2d74:	2004      	movs	r0, #4
    2d76:	4b1c      	ldr	r3, [pc, #112]	; (2de8 <EXTERNAL_IRQ_0_init+0x9c>)
    2d78:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    2d7a:	2101      	movs	r1, #1
    2d7c:	2005      	movs	r0, #5
    2d7e:	4b18      	ldr	r3, [pc, #96]	; (2de0 <EXTERNAL_IRQ_0_init+0x94>)
    2d80:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    2d82:	2102      	movs	r1, #2
    2d84:	2005      	movs	r0, #5
    2d86:	4b17      	ldr	r3, [pc, #92]	; (2de4 <EXTERNAL_IRQ_0_init+0x98>)
    2d88:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    2d8a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    2d8e:	2005      	movs	r0, #5
    2d90:	4b15      	ldr	r3, [pc, #84]	; (2de8 <EXTERNAL_IRQ_0_init+0x9c>)
    2d92:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    2d94:	2101      	movs	r1, #1
    2d96:	2056      	movs	r0, #86	; 0x56
    2d98:	4b11      	ldr	r3, [pc, #68]	; (2de0 <EXTERNAL_IRQ_0_init+0x94>)
    2d9a:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    2d9c:	2102      	movs	r1, #2
    2d9e:	2056      	movs	r0, #86	; 0x56
    2da0:	4b10      	ldr	r3, [pc, #64]	; (2de4 <EXTERNAL_IRQ_0_init+0x98>)
    2da2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    2da4:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    2da8:	2056      	movs	r0, #86	; 0x56
    2daa:	4b0f      	ldr	r3, [pc, #60]	; (2de8 <EXTERNAL_IRQ_0_init+0x9c>)
    2dac:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    2dae:	2101      	movs	r1, #1
    2db0:	2057      	movs	r0, #87	; 0x57
    2db2:	4b0b      	ldr	r3, [pc, #44]	; (2de0 <EXTERNAL_IRQ_0_init+0x94>)
    2db4:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    2db6:	2102      	movs	r1, #2
    2db8:	2057      	movs	r0, #87	; 0x57
    2dba:	4b0a      	ldr	r3, [pc, #40]	; (2de4 <EXTERNAL_IRQ_0_init+0x98>)
    2dbc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    2dbe:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    2dc2:	2057      	movs	r0, #87	; 0x57
    2dc4:	4b08      	ldr	r3, [pc, #32]	; (2de8 <EXTERNAL_IRQ_0_init+0x9c>)
    2dc6:	4798      	blx	r3

	ext_irq_init();
    2dc8:	4b08      	ldr	r3, [pc, #32]	; (2dec <EXTERNAL_IRQ_0_init+0xa0>)
    2dca:	4798      	blx	r3
}
    2dcc:	bf00      	nop
    2dce:	bd80      	pop	{r7, pc}
    2dd0:	40001c00 	.word	0x40001c00
    2dd4:	0000247d 	.word	0x0000247d
    2dd8:	40000800 	.word	0x40000800
    2ddc:	00002563 	.word	0x00002563
    2de0:	00002c51 	.word	0x00002c51
    2de4:	00002bfd 	.word	0x00002bfd
    2de8:	00002c31 	.word	0x00002c31
    2dec:	00003b91 	.word	0x00003b91

00002df0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2df4:	2244      	movs	r2, #68	; 0x44
    2df6:	210b      	movs	r1, #11
    2df8:	4804      	ldr	r0, [pc, #16]	; (2e0c <EVENT_SYSTEM_0_init+0x1c>)
    2dfa:	4b05      	ldr	r3, [pc, #20]	; (2e10 <EVENT_SYSTEM_0_init+0x20>)
    2dfc:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    2dfe:	4805      	ldr	r0, [pc, #20]	; (2e14 <EVENT_SYSTEM_0_init+0x24>)
    2e00:	4b05      	ldr	r3, [pc, #20]	; (2e18 <EVENT_SYSTEM_0_init+0x28>)
    2e02:	4798      	blx	r3

	event_system_init();
    2e04:	4b05      	ldr	r3, [pc, #20]	; (2e1c <EVENT_SYSTEM_0_init+0x2c>)
    2e06:	4798      	blx	r3
}
    2e08:	bf00      	nop
    2e0a:	bd80      	pop	{r7, pc}
    2e0c:	40001c00 	.word	0x40001c00
    2e10:	0000247d 	.word	0x0000247d
    2e14:	40000800 	.word	0x40000800
    2e18:	00002603 	.word	0x00002603
    2e1c:	00003b7d 	.word	0x00003b7d

00002e20 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2e20:	b580      	push	{r7, lr}
    2e22:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    2e24:	2101      	movs	r1, #1
    2e26:	202b      	movs	r0, #43	; 0x2b
    2e28:	4b2b      	ldr	r3, [pc, #172]	; (2ed8 <QSPI_N25Q256_PORT_init+0xb8>)
    2e2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    2e2c:	2100      	movs	r1, #0
    2e2e:	202b      	movs	r0, #43	; 0x2b
    2e30:	4b2a      	ldr	r3, [pc, #168]	; (2edc <QSPI_N25Q256_PORT_init+0xbc>)
    2e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    2e34:	492a      	ldr	r1, [pc, #168]	; (2ee0 <QSPI_N25Q256_PORT_init+0xc0>)
    2e36:	202b      	movs	r0, #43	; 0x2b
    2e38:	4b2a      	ldr	r3, [pc, #168]	; (2ee4 <QSPI_N25Q256_PORT_init+0xc4>)
    2e3a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    2e3c:	2102      	movs	r1, #2
    2e3e:	2008      	movs	r0, #8
    2e40:	4b25      	ldr	r3, [pc, #148]	; (2ed8 <QSPI_N25Q256_PORT_init+0xb8>)
    2e42:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    2e44:	2100      	movs	r1, #0
    2e46:	2008      	movs	r0, #8
    2e48:	4b27      	ldr	r3, [pc, #156]	; (2ee8 <QSPI_N25Q256_PORT_init+0xc8>)
    2e4a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    2e4c:	2100      	movs	r1, #0
    2e4e:	2008      	movs	r0, #8
    2e50:	4b22      	ldr	r3, [pc, #136]	; (2edc <QSPI_N25Q256_PORT_init+0xbc>)
    2e52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    2e54:	4925      	ldr	r1, [pc, #148]	; (2eec <QSPI_N25Q256_PORT_init+0xcc>)
    2e56:	2008      	movs	r0, #8
    2e58:	4b22      	ldr	r3, [pc, #136]	; (2ee4 <QSPI_N25Q256_PORT_init+0xc4>)
    2e5a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    2e5c:	2102      	movs	r1, #2
    2e5e:	2009      	movs	r0, #9
    2e60:	4b1d      	ldr	r3, [pc, #116]	; (2ed8 <QSPI_N25Q256_PORT_init+0xb8>)
    2e62:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    2e64:	2100      	movs	r1, #0
    2e66:	2009      	movs	r0, #9
    2e68:	4b1f      	ldr	r3, [pc, #124]	; (2ee8 <QSPI_N25Q256_PORT_init+0xc8>)
    2e6a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    2e6c:	2100      	movs	r1, #0
    2e6e:	2009      	movs	r0, #9
    2e70:	4b1a      	ldr	r3, [pc, #104]	; (2edc <QSPI_N25Q256_PORT_init+0xbc>)
    2e72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    2e74:	491e      	ldr	r1, [pc, #120]	; (2ef0 <QSPI_N25Q256_PORT_init+0xd0>)
    2e76:	2009      	movs	r0, #9
    2e78:	4b1a      	ldr	r3, [pc, #104]	; (2ee4 <QSPI_N25Q256_PORT_init+0xc4>)
    2e7a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    2e7c:	2102      	movs	r1, #2
    2e7e:	200a      	movs	r0, #10
    2e80:	4b15      	ldr	r3, [pc, #84]	; (2ed8 <QSPI_N25Q256_PORT_init+0xb8>)
    2e82:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    2e84:	2100      	movs	r1, #0
    2e86:	200a      	movs	r0, #10
    2e88:	4b17      	ldr	r3, [pc, #92]	; (2ee8 <QSPI_N25Q256_PORT_init+0xc8>)
    2e8a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    2e8c:	2100      	movs	r1, #0
    2e8e:	200a      	movs	r0, #10
    2e90:	4b12      	ldr	r3, [pc, #72]	; (2edc <QSPI_N25Q256_PORT_init+0xbc>)
    2e92:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    2e94:	4917      	ldr	r1, [pc, #92]	; (2ef4 <QSPI_N25Q256_PORT_init+0xd4>)
    2e96:	200a      	movs	r0, #10
    2e98:	4b12      	ldr	r3, [pc, #72]	; (2ee4 <QSPI_N25Q256_PORT_init+0xc4>)
    2e9a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    2e9c:	2102      	movs	r1, #2
    2e9e:	200b      	movs	r0, #11
    2ea0:	4b0d      	ldr	r3, [pc, #52]	; (2ed8 <QSPI_N25Q256_PORT_init+0xb8>)
    2ea2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    2ea4:	2100      	movs	r1, #0
    2ea6:	200b      	movs	r0, #11
    2ea8:	4b0f      	ldr	r3, [pc, #60]	; (2ee8 <QSPI_N25Q256_PORT_init+0xc8>)
    2eaa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    2eac:	2100      	movs	r1, #0
    2eae:	200b      	movs	r0, #11
    2eb0:	4b0a      	ldr	r3, [pc, #40]	; (2edc <QSPI_N25Q256_PORT_init+0xbc>)
    2eb2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    2eb4:	4910      	ldr	r1, [pc, #64]	; (2ef8 <QSPI_N25Q256_PORT_init+0xd8>)
    2eb6:	200b      	movs	r0, #11
    2eb8:	4b0a      	ldr	r3, [pc, #40]	; (2ee4 <QSPI_N25Q256_PORT_init+0xc4>)
    2eba:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    2ebc:	2101      	movs	r1, #1
    2ebe:	202a      	movs	r0, #42	; 0x2a
    2ec0:	4b05      	ldr	r3, [pc, #20]	; (2ed8 <QSPI_N25Q256_PORT_init+0xb8>)
    2ec2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    2ec4:	2100      	movs	r1, #0
    2ec6:	202a      	movs	r0, #42	; 0x2a
    2ec8:	4b04      	ldr	r3, [pc, #16]	; (2edc <QSPI_N25Q256_PORT_init+0xbc>)
    2eca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    2ecc:	490b      	ldr	r1, [pc, #44]	; (2efc <QSPI_N25Q256_PORT_init+0xdc>)
    2ece:	202a      	movs	r0, #42	; 0x2a
    2ed0:	4b04      	ldr	r3, [pc, #16]	; (2ee4 <QSPI_N25Q256_PORT_init+0xc4>)
    2ed2:	4798      	blx	r3
}
    2ed4:	bf00      	nop
    2ed6:	bd80      	pop	{r7, pc}
    2ed8:	00002c51 	.word	0x00002c51
    2edc:	00002bfd 	.word	0x00002bfd
    2ee0:	002b0007 	.word	0x002b0007
    2ee4:	00002c31 	.word	0x00002c31
    2ee8:	00002c89 	.word	0x00002c89
    2eec:	00080007 	.word	0x00080007
    2ef0:	00090007 	.word	0x00090007
    2ef4:	000a0007 	.word	0x000a0007
    2ef8:	000b0007 	.word	0x000b0007
    2efc:	002a0007 	.word	0x002a0007

00002f00 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    2f04:	4805      	ldr	r0, [pc, #20]	; (2f1c <QSPI_N25Q256_CLOCK_init+0x1c>)
    2f06:	4b06      	ldr	r3, [pc, #24]	; (2f20 <QSPI_N25Q256_CLOCK_init+0x20>)
    2f08:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    2f0a:	4804      	ldr	r0, [pc, #16]	; (2f1c <QSPI_N25Q256_CLOCK_init+0x1c>)
    2f0c:	4b05      	ldr	r3, [pc, #20]	; (2f24 <QSPI_N25Q256_CLOCK_init+0x24>)
    2f0e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    2f10:	4802      	ldr	r0, [pc, #8]	; (2f1c <QSPI_N25Q256_CLOCK_init+0x1c>)
    2f12:	4b05      	ldr	r3, [pc, #20]	; (2f28 <QSPI_N25Q256_CLOCK_init+0x28>)
    2f14:	4798      	blx	r3
}
    2f16:	bf00      	nop
    2f18:	bd80      	pop	{r7, pc}
    2f1a:	bf00      	nop
    2f1c:	40000800 	.word	0x40000800
    2f20:	000024c3 	.word	0x000024c3
    2f24:	00002503 	.word	0x00002503
    2f28:	00002663 	.word	0x00002663

00002f2c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    2f30:	4b04      	ldr	r3, [pc, #16]	; (2f44 <QSPI_N25Q256_init+0x18>)
    2f32:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    2f34:	4904      	ldr	r1, [pc, #16]	; (2f48 <QSPI_N25Q256_init+0x1c>)
    2f36:	4805      	ldr	r0, [pc, #20]	; (2f4c <QSPI_N25Q256_init+0x20>)
    2f38:	4b05      	ldr	r3, [pc, #20]	; (2f50 <QSPI_N25Q256_init+0x24>)
    2f3a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    2f3c:	4b05      	ldr	r3, [pc, #20]	; (2f54 <QSPI_N25Q256_init+0x28>)
    2f3e:	4798      	blx	r3
}
    2f40:	bf00      	nop
    2f42:	bd80      	pop	{r7, pc}
    2f44:	00002f01 	.word	0x00002f01
    2f48:	42003400 	.word	0x42003400
    2f4c:	2000220c 	.word	0x2000220c
    2f50:	000040e1 	.word	0x000040e1
    2f54:	00002e21 	.word	0x00002e21

00002f58 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    2f5c:	4802      	ldr	r0, [pc, #8]	; (2f68 <DATETIME_CLOCK_CLOCK_init+0x10>)
    2f5e:	4b03      	ldr	r3, [pc, #12]	; (2f6c <DATETIME_CLOCK_CLOCK_init+0x14>)
    2f60:	4798      	blx	r3
}
    2f62:	bf00      	nop
    2f64:	bd80      	pop	{r7, pc}
    2f66:	bf00      	nop
    2f68:	40000800 	.word	0x40000800
    2f6c:	00002543 	.word	0x00002543

00002f70 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    2f70:	b580      	push	{r7, lr}
    2f72:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    2f74:	4b03      	ldr	r3, [pc, #12]	; (2f84 <DATETIME_CLOCK_init+0x14>)
    2f76:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    2f78:	4903      	ldr	r1, [pc, #12]	; (2f88 <DATETIME_CLOCK_init+0x18>)
    2f7a:	4804      	ldr	r0, [pc, #16]	; (2f8c <DATETIME_CLOCK_init+0x1c>)
    2f7c:	4b04      	ldr	r3, [pc, #16]	; (2f90 <DATETIME_CLOCK_init+0x20>)
    2f7e:	4798      	blx	r3
}
    2f80:	bf00      	nop
    2f82:	bd80      	pop	{r7, pc}
    2f84:	00002f59 	.word	0x00002f59
    2f88:	40002400 	.word	0x40002400
    2f8c:	20002344 	.word	0x20002344
    2f90:	0000391d 	.word	0x0000391d

00002f94 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    2f94:	b580      	push	{r7, lr}
    2f96:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    2f98:	2100      	movs	r1, #0
    2f9a:	203b      	movs	r0, #59	; 0x3b
    2f9c:	4b11      	ldr	r3, [pc, #68]	; (2fe4 <SPI_TEMP_PORT_init+0x50>)
    2f9e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    2fa0:	2102      	movs	r1, #2
    2fa2:	203b      	movs	r0, #59	; 0x3b
    2fa4:	4b10      	ldr	r3, [pc, #64]	; (2fe8 <SPI_TEMP_PORT_init+0x54>)
    2fa6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2fa8:	4910      	ldr	r1, [pc, #64]	; (2fec <SPI_TEMP_PORT_init+0x58>)
    2faa:	203b      	movs	r0, #59	; 0x3b
    2fac:	4b10      	ldr	r3, [pc, #64]	; (2ff0 <SPI_TEMP_PORT_init+0x5c>)
    2fae:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2fb0:	2100      	movs	r1, #0
    2fb2:	203a      	movs	r0, #58	; 0x3a
    2fb4:	4b0b      	ldr	r3, [pc, #44]	; (2fe4 <SPI_TEMP_PORT_init+0x50>)
    2fb6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2fb8:	2102      	movs	r1, #2
    2fba:	203a      	movs	r0, #58	; 0x3a
    2fbc:	4b0a      	ldr	r3, [pc, #40]	; (2fe8 <SPI_TEMP_PORT_init+0x54>)
    2fbe:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2fc0:	490c      	ldr	r1, [pc, #48]	; (2ff4 <SPI_TEMP_PORT_init+0x60>)
    2fc2:	203a      	movs	r0, #58	; 0x3a
    2fc4:	4b0a      	ldr	r3, [pc, #40]	; (2ff0 <SPI_TEMP_PORT_init+0x5c>)
    2fc6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2fc8:	2101      	movs	r1, #1
    2fca:	203c      	movs	r0, #60	; 0x3c
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <SPI_TEMP_PORT_init+0x54>)
    2fce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2fd0:	2100      	movs	r1, #0
    2fd2:	203c      	movs	r0, #60	; 0x3c
    2fd4:	4b08      	ldr	r3, [pc, #32]	; (2ff8 <SPI_TEMP_PORT_init+0x64>)
    2fd6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2fd8:	4908      	ldr	r1, [pc, #32]	; (2ffc <SPI_TEMP_PORT_init+0x68>)
    2fda:	203c      	movs	r0, #60	; 0x3c
    2fdc:	4b04      	ldr	r3, [pc, #16]	; (2ff0 <SPI_TEMP_PORT_init+0x5c>)
    2fde:	4798      	blx	r3
}
    2fe0:	bf00      	nop
    2fe2:	bd80      	pop	{r7, pc}
    2fe4:	00002c89 	.word	0x00002c89
    2fe8:	00002c51 	.word	0x00002c51
    2fec:	003b0003 	.word	0x003b0003
    2ff0:	00002c31 	.word	0x00002c31
    2ff4:	003a0003 	.word	0x003a0003
    2ff8:	00002bfd 	.word	0x00002bfd
    2ffc:	003c0003 	.word	0x003c0003

00003000 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    3000:	b580      	push	{r7, lr}
    3002:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3004:	2243      	movs	r2, #67	; 0x43
    3006:	2122      	movs	r1, #34	; 0x22
    3008:	4806      	ldr	r0, [pc, #24]	; (3024 <SPI_TEMP_CLOCK_init+0x24>)
    300a:	4b07      	ldr	r3, [pc, #28]	; (3028 <SPI_TEMP_CLOCK_init+0x28>)
    300c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    300e:	224a      	movs	r2, #74	; 0x4a
    3010:	2103      	movs	r1, #3
    3012:	4804      	ldr	r0, [pc, #16]	; (3024 <SPI_TEMP_CLOCK_init+0x24>)
    3014:	4b04      	ldr	r3, [pc, #16]	; (3028 <SPI_TEMP_CLOCK_init+0x28>)
    3016:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3018:	4804      	ldr	r0, [pc, #16]	; (302c <SPI_TEMP_CLOCK_init+0x2c>)
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <SPI_TEMP_CLOCK_init+0x30>)
    301c:	4798      	blx	r3
}
    301e:	bf00      	nop
    3020:	bd80      	pop	{r7, pc}
    3022:	bf00      	nop
    3024:	40001c00 	.word	0x40001c00
    3028:	0000247d 	.word	0x0000247d
    302c:	40000800 	.word	0x40000800
    3030:	00002683 	.word	0x00002683

00003034 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    3034:	b580      	push	{r7, lr}
    3036:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    3038:	4b05      	ldr	r3, [pc, #20]	; (3050 <SPI_TEMP_init+0x1c>)
    303a:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    303c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    3040:	4804      	ldr	r0, [pc, #16]	; (3054 <SPI_TEMP_init+0x20>)
    3042:	4b05      	ldr	r3, [pc, #20]	; (3058 <SPI_TEMP_init+0x24>)
    3044:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    3046:	4b05      	ldr	r3, [pc, #20]	; (305c <SPI_TEMP_init+0x28>)
    3048:	4798      	blx	r3
}
    304a:	bf00      	nop
    304c:	bd80      	pop	{r7, pc}
    304e:	bf00      	nop
    3050:	00003001 	.word	0x00003001
    3054:	200021c4 	.word	0x200021c4
    3058:	00004409 	.word	0x00004409
    305c:	00002f95 	.word	0x00002f95

00003060 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    3060:	b580      	push	{r7, lr}
    3062:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    3064:	2100      	movs	r1, #0
    3066:	2017      	movs	r0, #23
    3068:	4b07      	ldr	r3, [pc, #28]	; (3088 <I2C_EXPANDER_PORT_init+0x28>)
    306a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    306c:	4907      	ldr	r1, [pc, #28]	; (308c <I2C_EXPANDER_PORT_init+0x2c>)
    306e:	2017      	movs	r0, #23
    3070:	4b07      	ldr	r3, [pc, #28]	; (3090 <I2C_EXPANDER_PORT_init+0x30>)
    3072:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    3074:	2100      	movs	r1, #0
    3076:	2016      	movs	r0, #22
    3078:	4b03      	ldr	r3, [pc, #12]	; (3088 <I2C_EXPANDER_PORT_init+0x28>)
    307a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    307c:	4905      	ldr	r1, [pc, #20]	; (3094 <I2C_EXPANDER_PORT_init+0x34>)
    307e:	2016      	movs	r0, #22
    3080:	4b03      	ldr	r3, [pc, #12]	; (3090 <I2C_EXPANDER_PORT_init+0x30>)
    3082:	4798      	blx	r3
}
    3084:	bf00      	nop
    3086:	bd80      	pop	{r7, pc}
    3088:	00002bfd 	.word	0x00002bfd
    308c:	00170003 	.word	0x00170003
    3090:	00002c31 	.word	0x00002c31
    3094:	00160003 	.word	0x00160003

00003098 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    3098:	b580      	push	{r7, lr}
    309a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    309c:	2243      	movs	r2, #67	; 0x43
    309e:	2123      	movs	r1, #35	; 0x23
    30a0:	4806      	ldr	r0, [pc, #24]	; (30bc <I2C_EXPANDER_CLOCK_init+0x24>)
    30a2:	4b07      	ldr	r3, [pc, #28]	; (30c0 <I2C_EXPANDER_CLOCK_init+0x28>)
    30a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    30a6:	224a      	movs	r2, #74	; 0x4a
    30a8:	2103      	movs	r1, #3
    30aa:	4804      	ldr	r0, [pc, #16]	; (30bc <I2C_EXPANDER_CLOCK_init+0x24>)
    30ac:	4b04      	ldr	r3, [pc, #16]	; (30c0 <I2C_EXPANDER_CLOCK_init+0x28>)
    30ae:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    30b0:	4804      	ldr	r0, [pc, #16]	; (30c4 <I2C_EXPANDER_CLOCK_init+0x2c>)
    30b2:	4b05      	ldr	r3, [pc, #20]	; (30c8 <I2C_EXPANDER_CLOCK_init+0x30>)
    30b4:	4798      	blx	r3
}
    30b6:	bf00      	nop
    30b8:	bd80      	pop	{r7, pc}
    30ba:	bf00      	nop
    30bc:	40001c00 	.word	0x40001c00
    30c0:	0000247d 	.word	0x0000247d
    30c4:	40000800 	.word	0x40000800
    30c8:	000026a3 	.word	0x000026a3

000030cc <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    30d0:	4b04      	ldr	r3, [pc, #16]	; (30e4 <I2C_EXPANDER_init+0x18>)
    30d2:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    30d4:	4904      	ldr	r1, [pc, #16]	; (30e8 <I2C_EXPANDER_init+0x1c>)
    30d6:	4805      	ldr	r0, [pc, #20]	; (30ec <I2C_EXPANDER_init+0x20>)
    30d8:	4b05      	ldr	r3, [pc, #20]	; (30f0 <I2C_EXPANDER_init+0x24>)
    30da:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    30dc:	4b05      	ldr	r3, [pc, #20]	; (30f4 <I2C_EXPANDER_init+0x28>)
    30de:	4798      	blx	r3
}
    30e0:	bf00      	nop
    30e2:	bd80      	pop	{r7, pc}
    30e4:	00003099 	.word	0x00003099
    30e8:	43000400 	.word	0x43000400
    30ec:	200022a8 	.word	0x200022a8
    30f0:	00003d9d 	.word	0x00003d9d
    30f4:	00003061 	.word	0x00003061

000030f8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    30f8:	b580      	push	{r7, lr}
    30fa:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    30fc:	2100      	movs	r1, #0
    30fe:	2044      	movs	r0, #68	; 0x44
    3100:	4b11      	ldr	r3, [pc, #68]	; (3148 <SPI_HI3593_PORT_init+0x50>)
    3102:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    3104:	2102      	movs	r1, #2
    3106:	2044      	movs	r0, #68	; 0x44
    3108:	4b10      	ldr	r3, [pc, #64]	; (314c <SPI_HI3593_PORT_init+0x54>)
    310a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    310c:	4910      	ldr	r1, [pc, #64]	; (3150 <SPI_HI3593_PORT_init+0x58>)
    310e:	2044      	movs	r0, #68	; 0x44
    3110:	4b10      	ldr	r3, [pc, #64]	; (3154 <SPI_HI3593_PORT_init+0x5c>)
    3112:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    3114:	2100      	movs	r1, #0
    3116:	2045      	movs	r0, #69	; 0x45
    3118:	4b0b      	ldr	r3, [pc, #44]	; (3148 <SPI_HI3593_PORT_init+0x50>)
    311a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    311c:	2102      	movs	r1, #2
    311e:	2045      	movs	r0, #69	; 0x45
    3120:	4b0a      	ldr	r3, [pc, #40]	; (314c <SPI_HI3593_PORT_init+0x54>)
    3122:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    3124:	490c      	ldr	r1, [pc, #48]	; (3158 <SPI_HI3593_PORT_init+0x60>)
    3126:	2045      	movs	r0, #69	; 0x45
    3128:	4b0a      	ldr	r3, [pc, #40]	; (3154 <SPI_HI3593_PORT_init+0x5c>)
    312a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    312c:	2101      	movs	r1, #1
    312e:	2047      	movs	r0, #71	; 0x47
    3130:	4b06      	ldr	r3, [pc, #24]	; (314c <SPI_HI3593_PORT_init+0x54>)
    3132:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    3134:	2100      	movs	r1, #0
    3136:	2047      	movs	r0, #71	; 0x47
    3138:	4b08      	ldr	r3, [pc, #32]	; (315c <SPI_HI3593_PORT_init+0x64>)
    313a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    313c:	4908      	ldr	r1, [pc, #32]	; (3160 <SPI_HI3593_PORT_init+0x68>)
    313e:	2047      	movs	r0, #71	; 0x47
    3140:	4b04      	ldr	r3, [pc, #16]	; (3154 <SPI_HI3593_PORT_init+0x5c>)
    3142:	4798      	blx	r3
}
    3144:	bf00      	nop
    3146:	bd80      	pop	{r7, pc}
    3148:	00002c89 	.word	0x00002c89
    314c:	00002c51 	.word	0x00002c51
    3150:	00440002 	.word	0x00440002
    3154:	00002c31 	.word	0x00002c31
    3158:	00450002 	.word	0x00450002
    315c:	00002bfd 	.word	0x00002bfd
    3160:	00470002 	.word	0x00470002

00003164 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    3164:	b580      	push	{r7, lr}
    3166:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3168:	2243      	movs	r2, #67	; 0x43
    316a:	2124      	movs	r1, #36	; 0x24
    316c:	4806      	ldr	r0, [pc, #24]	; (3188 <SPI_HI3593_CLOCK_init+0x24>)
    316e:	4b07      	ldr	r3, [pc, #28]	; (318c <SPI_HI3593_CLOCK_init+0x28>)
    3170:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3172:	224a      	movs	r2, #74	; 0x4a
    3174:	2103      	movs	r1, #3
    3176:	4804      	ldr	r0, [pc, #16]	; (3188 <SPI_HI3593_CLOCK_init+0x24>)
    3178:	4b04      	ldr	r3, [pc, #16]	; (318c <SPI_HI3593_CLOCK_init+0x28>)
    317a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    317c:	4804      	ldr	r0, [pc, #16]	; (3190 <SPI_HI3593_CLOCK_init+0x2c>)
    317e:	4b05      	ldr	r3, [pc, #20]	; (3194 <SPI_HI3593_CLOCK_init+0x30>)
    3180:	4798      	blx	r3
}
    3182:	bf00      	nop
    3184:	bd80      	pop	{r7, pc}
    3186:	bf00      	nop
    3188:	40001c00 	.word	0x40001c00
    318c:	0000247d 	.word	0x0000247d
    3190:	40000800 	.word	0x40000800
    3194:	000026c3 	.word	0x000026c3

00003198 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    3198:	b580      	push	{r7, lr}
    319a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    319c:	4b04      	ldr	r3, [pc, #16]	; (31b0 <SPI_HI3593_init+0x18>)
    319e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    31a0:	4904      	ldr	r1, [pc, #16]	; (31b4 <SPI_HI3593_init+0x1c>)
    31a2:	4805      	ldr	r0, [pc, #20]	; (31b8 <SPI_HI3593_init+0x20>)
    31a4:	4b05      	ldr	r3, [pc, #20]	; (31bc <SPI_HI3593_init+0x24>)
    31a6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    31a8:	4b05      	ldr	r3, [pc, #20]	; (31c0 <SPI_HI3593_init+0x28>)
    31aa:	4798      	blx	r3
}
    31ac:	bf00      	nop
    31ae:	bd80      	pop	{r7, pc}
    31b0:	00003165 	.word	0x00003165
    31b4:	43000800 	.word	0x43000800
    31b8:	200021ac 	.word	0x200021ac
    31bc:	000045bd 	.word	0x000045bd
    31c0:	000030f9 	.word	0x000030f9

000031c4 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    31c4:	b580      	push	{r7, lr}
    31c6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    31c8:	2100      	movs	r1, #0
    31ca:	2068      	movs	r0, #104	; 0x68
    31cc:	4b07      	ldr	r3, [pc, #28]	; (31ec <I2C_EEPROM_PORT_init+0x28>)
    31ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    31d0:	4907      	ldr	r1, [pc, #28]	; (31f0 <I2C_EEPROM_PORT_init+0x2c>)
    31d2:	2068      	movs	r0, #104	; 0x68
    31d4:	4b07      	ldr	r3, [pc, #28]	; (31f4 <I2C_EEPROM_PORT_init+0x30>)
    31d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    31d8:	2100      	movs	r1, #0
    31da:	2069      	movs	r0, #105	; 0x69
    31dc:	4b03      	ldr	r3, [pc, #12]	; (31ec <I2C_EEPROM_PORT_init+0x28>)
    31de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    31e0:	4905      	ldr	r1, [pc, #20]	; (31f8 <I2C_EEPROM_PORT_init+0x34>)
    31e2:	2069      	movs	r0, #105	; 0x69
    31e4:	4b03      	ldr	r3, [pc, #12]	; (31f4 <I2C_EEPROM_PORT_init+0x30>)
    31e6:	4798      	blx	r3
}
    31e8:	bf00      	nop
    31ea:	bd80      	pop	{r7, pc}
    31ec:	00002bfd 	.word	0x00002bfd
    31f0:	00680002 	.word	0x00680002
    31f4:	00002c31 	.word	0x00002c31
    31f8:	00690002 	.word	0x00690002

000031fc <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3200:	2244      	movs	r2, #68	; 0x44
    3202:	2125      	movs	r1, #37	; 0x25
    3204:	4806      	ldr	r0, [pc, #24]	; (3220 <I2C_EEPROM_CLOCK_init+0x24>)
    3206:	4b07      	ldr	r3, [pc, #28]	; (3224 <I2C_EEPROM_CLOCK_init+0x28>)
    3208:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    320a:	224a      	movs	r2, #74	; 0x4a
    320c:	2103      	movs	r1, #3
    320e:	4804      	ldr	r0, [pc, #16]	; (3220 <I2C_EEPROM_CLOCK_init+0x24>)
    3210:	4b04      	ldr	r3, [pc, #16]	; (3224 <I2C_EEPROM_CLOCK_init+0x28>)
    3212:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    3214:	4804      	ldr	r0, [pc, #16]	; (3228 <I2C_EEPROM_CLOCK_init+0x2c>)
    3216:	4b05      	ldr	r3, [pc, #20]	; (322c <I2C_EEPROM_CLOCK_init+0x30>)
    3218:	4798      	blx	r3
}
    321a:	bf00      	nop
    321c:	bd80      	pop	{r7, pc}
    321e:	bf00      	nop
    3220:	40001c00 	.word	0x40001c00
    3224:	0000247d 	.word	0x0000247d
    3228:	40000800 	.word	0x40000800
    322c:	000026e3 	.word	0x000026e3

00003230 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3230:	b580      	push	{r7, lr}
    3232:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    3234:	4b04      	ldr	r3, [pc, #16]	; (3248 <I2C_EEPROM_init+0x18>)
    3236:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    3238:	4904      	ldr	r1, [pc, #16]	; (324c <I2C_EEPROM_init+0x1c>)
    323a:	4805      	ldr	r0, [pc, #20]	; (3250 <I2C_EEPROM_init+0x20>)
    323c:	4b05      	ldr	r3, [pc, #20]	; (3254 <I2C_EEPROM_init+0x24>)
    323e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    3240:	4b05      	ldr	r3, [pc, #20]	; (3258 <I2C_EEPROM_init+0x28>)
    3242:	4798      	blx	r3
}
    3244:	bf00      	nop
    3246:	bd80      	pop	{r7, pc}
    3248:	000031fd 	.word	0x000031fd
    324c:	43000c00 	.word	0x43000c00
    3250:	20002304 	.word	0x20002304
    3254:	00003d9d 	.word	0x00003d9d
    3258:	000031c5 	.word	0x000031c5

0000325c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    325c:	b580      	push	{r7, lr}
    325e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3260:	4808      	ldr	r0, [pc, #32]	; (3284 <TIMER_INTERFACE_init+0x28>)
    3262:	4b09      	ldr	r3, [pc, #36]	; (3288 <TIMER_INTERFACE_init+0x2c>)
    3264:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3266:	2243      	movs	r2, #67	; 0x43
    3268:	2109      	movs	r1, #9
    326a:	4808      	ldr	r0, [pc, #32]	; (328c <TIMER_INTERFACE_init+0x30>)
    326c:	4b08      	ldr	r3, [pc, #32]	; (3290 <TIMER_INTERFACE_init+0x34>)
    326e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    3270:	4b08      	ldr	r3, [pc, #32]	; (3294 <TIMER_INTERFACE_init+0x38>)
    3272:	4798      	blx	r3
    3274:	4603      	mov	r3, r0
    3276:	461a      	mov	r2, r3
    3278:	4907      	ldr	r1, [pc, #28]	; (3298 <TIMER_INTERFACE_init+0x3c>)
    327a:	4808      	ldr	r0, [pc, #32]	; (329c <TIMER_INTERFACE_init+0x40>)
    327c:	4b08      	ldr	r3, [pc, #32]	; (32a0 <TIMER_INTERFACE_init+0x44>)
    327e:	4798      	blx	r3
}
    3280:	bf00      	nop
    3282:	bd80      	pop	{r7, pc}
    3284:	40000800 	.word	0x40000800
    3288:	00002583 	.word	0x00002583
    328c:	40001c00 	.word	0x40001c00
    3290:	0000247d 	.word	0x0000247d
    3294:	00009da1 	.word	0x00009da1
    3298:	40003800 	.word	0x40003800
    329c:	2000222c 	.word	0x2000222c
    32a0:	0000478d 	.word	0x0000478d

000032a4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    32a8:	4808      	ldr	r0, [pc, #32]	; (32cc <TIMER_EVENT_init+0x28>)
    32aa:	4b09      	ldr	r3, [pc, #36]	; (32d0 <TIMER_EVENT_init+0x2c>)
    32ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    32ae:	2245      	movs	r2, #69	; 0x45
    32b0:	2109      	movs	r1, #9
    32b2:	4808      	ldr	r0, [pc, #32]	; (32d4 <TIMER_EVENT_init+0x30>)
    32b4:	4b08      	ldr	r3, [pc, #32]	; (32d8 <TIMER_EVENT_init+0x34>)
    32b6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    32b8:	4b08      	ldr	r3, [pc, #32]	; (32dc <TIMER_EVENT_init+0x38>)
    32ba:	4798      	blx	r3
    32bc:	4603      	mov	r3, r0
    32be:	461a      	mov	r2, r3
    32c0:	4907      	ldr	r1, [pc, #28]	; (32e0 <TIMER_EVENT_init+0x3c>)
    32c2:	4808      	ldr	r0, [pc, #32]	; (32e4 <TIMER_EVENT_init+0x40>)
    32c4:	4b08      	ldr	r3, [pc, #32]	; (32e8 <TIMER_EVENT_init+0x44>)
    32c6:	4798      	blx	r3
}
    32c8:	bf00      	nop
    32ca:	bd80      	pop	{r7, pc}
    32cc:	40000800 	.word	0x40000800
    32d0:	000025a3 	.word	0x000025a3
    32d4:	40001c00 	.word	0x40001c00
    32d8:	0000247d 	.word	0x0000247d
    32dc:	00009da1 	.word	0x00009da1
    32e0:	40003c00 	.word	0x40003c00
    32e4:	20002210 	.word	0x20002210
    32e8:	0000478d 	.word	0x0000478d

000032ec <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    32f0:	4808      	ldr	r0, [pc, #32]	; (3314 <TIMER_ARINC_init+0x28>)
    32f2:	4b09      	ldr	r3, [pc, #36]	; (3318 <TIMER_ARINC_init+0x2c>)
    32f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    32f6:	2244      	movs	r2, #68	; 0x44
    32f8:	211a      	movs	r1, #26
    32fa:	4808      	ldr	r0, [pc, #32]	; (331c <TIMER_ARINC_init+0x30>)
    32fc:	4b08      	ldr	r3, [pc, #32]	; (3320 <TIMER_ARINC_init+0x34>)
    32fe:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3300:	4b08      	ldr	r3, [pc, #32]	; (3324 <TIMER_ARINC_init+0x38>)
    3302:	4798      	blx	r3
    3304:	4603      	mov	r3, r0
    3306:	461a      	mov	r2, r3
    3308:	4907      	ldr	r1, [pc, #28]	; (3328 <TIMER_ARINC_init+0x3c>)
    330a:	4808      	ldr	r0, [pc, #32]	; (332c <TIMER_ARINC_init+0x40>)
    330c:	4b08      	ldr	r3, [pc, #32]	; (3330 <TIMER_ARINC_init+0x44>)
    330e:	4798      	blx	r3
}
    3310:	bf00      	nop
    3312:	bd80      	pop	{r7, pc}
    3314:	40000800 	.word	0x40000800
    3318:	00002623 	.word	0x00002623
    331c:	40001c00 	.word	0x40001c00
    3320:	0000247d 	.word	0x0000247d
    3324:	00009da1 	.word	0x00009da1
    3328:	4101a000 	.word	0x4101a000
    332c:	2000228c 	.word	0x2000228c
    3330:	0000478d 	.word	0x0000478d

00003334 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    3334:	b580      	push	{r7, lr}
    3336:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3338:	4808      	ldr	r0, [pc, #32]	; (335c <TIMER_HVAC_init+0x28>)
    333a:	4b09      	ldr	r3, [pc, #36]	; (3360 <TIMER_HVAC_init+0x2c>)
    333c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    333e:	2245      	movs	r2, #69	; 0x45
    3340:	211a      	movs	r1, #26
    3342:	4808      	ldr	r0, [pc, #32]	; (3364 <TIMER_HVAC_init+0x30>)
    3344:	4b08      	ldr	r3, [pc, #32]	; (3368 <TIMER_HVAC_init+0x34>)
    3346:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3348:	4b08      	ldr	r3, [pc, #32]	; (336c <TIMER_HVAC_init+0x38>)
    334a:	4798      	blx	r3
    334c:	4603      	mov	r3, r0
    334e:	461a      	mov	r2, r3
    3350:	4907      	ldr	r1, [pc, #28]	; (3370 <TIMER_HVAC_init+0x3c>)
    3352:	4808      	ldr	r0, [pc, #32]	; (3374 <TIMER_HVAC_init+0x40>)
    3354:	4b08      	ldr	r3, [pc, #32]	; (3378 <TIMER_HVAC_init+0x44>)
    3356:	4798      	blx	r3
}
    3358:	bf00      	nop
    335a:	bd80      	pop	{r7, pc}
    335c:	40000800 	.word	0x40000800
    3360:	00002643 	.word	0x00002643
    3364:	40001c00 	.word	0x40001c00
    3368:	0000247d 	.word	0x0000247d
    336c:	00009da1 	.word	0x00009da1
    3370:	4101c000 	.word	0x4101c000
    3374:	200022e8 	.word	0x200022e8
    3378:	0000478d 	.word	0x0000478d

0000337c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    337c:	b580      	push	{r7, lr}
    337e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    3380:	4904      	ldr	r1, [pc, #16]	; (3394 <LIVE_PULSE_PORT_init+0x18>)
    3382:	2020      	movs	r0, #32
    3384:	4b04      	ldr	r3, [pc, #16]	; (3398 <LIVE_PULSE_PORT_init+0x1c>)
    3386:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    3388:	4904      	ldr	r1, [pc, #16]	; (339c <LIVE_PULSE_PORT_init+0x20>)
    338a:	2021      	movs	r0, #33	; 0x21
    338c:	4b02      	ldr	r3, [pc, #8]	; (3398 <LIVE_PULSE_PORT_init+0x1c>)
    338e:	4798      	blx	r3
}
    3390:	bf00      	nop
    3392:	bd80      	pop	{r7, pc}
    3394:	00200004 	.word	0x00200004
    3398:	00002c31 	.word	0x00002c31
    339c:	00210004 	.word	0x00210004

000033a0 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    33a4:	4804      	ldr	r0, [pc, #16]	; (33b8 <LIVE_PULSE_CLOCK_init+0x18>)
    33a6:	4b05      	ldr	r3, [pc, #20]	; (33bc <LIVE_PULSE_CLOCK_init+0x1c>)
    33a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    33aa:	224b      	movs	r2, #75	; 0x4b
    33ac:	2127      	movs	r1, #39	; 0x27
    33ae:	4804      	ldr	r0, [pc, #16]	; (33c0 <LIVE_PULSE_CLOCK_init+0x20>)
    33b0:	4b04      	ldr	r3, [pc, #16]	; (33c4 <LIVE_PULSE_CLOCK_init+0x24>)
    33b2:	4798      	blx	r3
}
    33b4:	bf00      	nop
    33b6:	bd80      	pop	{r7, pc}
    33b8:	40000800 	.word	0x40000800
    33bc:	00002703 	.word	0x00002703
    33c0:	40001c00 	.word	0x40001c00
    33c4:	0000247d 	.word	0x0000247d

000033c8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    33c8:	b580      	push	{r7, lr}
    33ca:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    33cc:	4b06      	ldr	r3, [pc, #24]	; (33e8 <LIVE_PULSE_init+0x20>)
    33ce:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    33d0:	4b06      	ldr	r3, [pc, #24]	; (33ec <LIVE_PULSE_init+0x24>)
    33d2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    33d4:	4b06      	ldr	r3, [pc, #24]	; (33f0 <LIVE_PULSE_init+0x28>)
    33d6:	4798      	blx	r3
    33d8:	4603      	mov	r3, r0
    33da:	461a      	mov	r2, r3
    33dc:	4905      	ldr	r1, [pc, #20]	; (33f4 <LIVE_PULSE_init+0x2c>)
    33de:	4806      	ldr	r0, [pc, #24]	; (33f8 <LIVE_PULSE_init+0x30>)
    33e0:	4b06      	ldr	r3, [pc, #24]	; (33fc <LIVE_PULSE_init+0x34>)
    33e2:	4798      	blx	r3
}
    33e4:	bf00      	nop
    33e6:	bd80      	pop	{r7, pc}
    33e8:	000033a1 	.word	0x000033a1
    33ec:	0000337d 	.word	0x0000337d
    33f0:	00009db1 	.word	0x00009db1
    33f4:	43001800 	.word	0x43001800
    33f8:	20002248 	.word	0x20002248
    33fc:	00003fe1 	.word	0x00003fe1

00003400 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3400:	b580      	push	{r7, lr}
    3402:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    3404:	2102      	movs	r1, #2
    3406:	2018      	movs	r0, #24
    3408:	4b0f      	ldr	r3, [pc, #60]	; (3448 <CDCUSB_PORT_init+0x48>)
    340a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    340c:	2100      	movs	r1, #0
    340e:	2018      	movs	r0, #24
    3410:	4b0e      	ldr	r3, [pc, #56]	; (344c <CDCUSB_PORT_init+0x4c>)
    3412:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    3414:	2100      	movs	r1, #0
    3416:	2018      	movs	r0, #24
    3418:	4b0d      	ldr	r3, [pc, #52]	; (3450 <CDCUSB_PORT_init+0x50>)
    341a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    341c:	490d      	ldr	r1, [pc, #52]	; (3454 <CDCUSB_PORT_init+0x54>)
    341e:	2018      	movs	r0, #24
    3420:	4b0d      	ldr	r3, [pc, #52]	; (3458 <CDCUSB_PORT_init+0x58>)
    3422:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3424:	2102      	movs	r1, #2
    3426:	2019      	movs	r0, #25
    3428:	4b07      	ldr	r3, [pc, #28]	; (3448 <CDCUSB_PORT_init+0x48>)
    342a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    342c:	2100      	movs	r1, #0
    342e:	2019      	movs	r0, #25
    3430:	4b06      	ldr	r3, [pc, #24]	; (344c <CDCUSB_PORT_init+0x4c>)
    3432:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3434:	2100      	movs	r1, #0
    3436:	2019      	movs	r0, #25
    3438:	4b05      	ldr	r3, [pc, #20]	; (3450 <CDCUSB_PORT_init+0x50>)
    343a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    343c:	4907      	ldr	r1, [pc, #28]	; (345c <CDCUSB_PORT_init+0x5c>)
    343e:	2019      	movs	r0, #25
    3440:	4b05      	ldr	r3, [pc, #20]	; (3458 <CDCUSB_PORT_init+0x58>)
    3442:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3444:	bf00      	nop
    3446:	bd80      	pop	{r7, pc}
    3448:	00002c51 	.word	0x00002c51
    344c:	00002c89 	.word	0x00002c89
    3450:	00002bfd 	.word	0x00002bfd
    3454:	00180007 	.word	0x00180007
    3458:	00002c31 	.word	0x00002c31
    345c:	00190007 	.word	0x00190007

00003460 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3460:	b580      	push	{r7, lr}
    3462:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3464:	2242      	movs	r2, #66	; 0x42
    3466:	210a      	movs	r1, #10
    3468:	4805      	ldr	r0, [pc, #20]	; (3480 <CDCUSB_CLOCK_init+0x20>)
    346a:	4b06      	ldr	r3, [pc, #24]	; (3484 <CDCUSB_CLOCK_init+0x24>)
    346c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    346e:	4806      	ldr	r0, [pc, #24]	; (3488 <CDCUSB_CLOCK_init+0x28>)
    3470:	4b06      	ldr	r3, [pc, #24]	; (348c <CDCUSB_CLOCK_init+0x2c>)
    3472:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3474:	4804      	ldr	r0, [pc, #16]	; (3488 <CDCUSB_CLOCK_init+0x28>)
    3476:	4b06      	ldr	r3, [pc, #24]	; (3490 <CDCUSB_CLOCK_init+0x30>)
    3478:	4798      	blx	r3
}
    347a:	bf00      	nop
    347c:	bd80      	pop	{r7, pc}
    347e:	bf00      	nop
    3480:	40001c00 	.word	0x40001c00
    3484:	0000247d 	.word	0x0000247d
    3488:	40000800 	.word	0x40000800
    348c:	000024a3 	.word	0x000024a3
    3490:	000025c3 	.word	0x000025c3

00003494 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3494:	b580      	push	{r7, lr}
    3496:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3498:	4b03      	ldr	r3, [pc, #12]	; (34a8 <CDCUSB_init+0x14>)
    349a:	4798      	blx	r3
	usb_d_init();
    349c:	4b03      	ldr	r3, [pc, #12]	; (34ac <CDCUSB_init+0x18>)
    349e:	4798      	blx	r3
	CDCUSB_PORT_init();
    34a0:	4b03      	ldr	r3, [pc, #12]	; (34b0 <CDCUSB_init+0x1c>)
    34a2:	4798      	blx	r3
}
    34a4:	bf00      	nop
    34a6:	bd80      	pop	{r7, pc}
    34a8:	00003461 	.word	0x00003461
    34ac:	00004f9d 	.word	0x00004f9d
    34b0:	00003401 	.word	0x00003401

000034b4 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    34b4:	b580      	push	{r7, lr}
    34b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    34b8:	4802      	ldr	r0, [pc, #8]	; (34c4 <WATCHDOG_CLOCK_init+0x10>)
    34ba:	4b03      	ldr	r3, [pc, #12]	; (34c8 <WATCHDOG_CLOCK_init+0x14>)
    34bc:	4798      	blx	r3
}
    34be:	bf00      	nop
    34c0:	bd80      	pop	{r7, pc}
    34c2:	bf00      	nop
    34c4:	40000800 	.word	0x40000800
    34c8:	00002523 	.word	0x00002523

000034cc <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    34cc:	b580      	push	{r7, lr}
    34ce:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    34d0:	4b03      	ldr	r3, [pc, #12]	; (34e0 <WATCHDOG_init+0x14>)
    34d2:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    34d4:	4903      	ldr	r1, [pc, #12]	; (34e4 <WATCHDOG_init+0x18>)
    34d6:	4804      	ldr	r0, [pc, #16]	; (34e8 <WATCHDOG_init+0x1c>)
    34d8:	4b04      	ldr	r3, [pc, #16]	; (34ec <WATCHDOG_init+0x20>)
    34da:	4798      	blx	r3
}
    34dc:	bf00      	nop
    34de:	bd80      	pop	{r7, pc}
    34e0:	000034b5 	.word	0x000034b5
    34e4:	40002000 	.word	0x40002000
    34e8:	20002364 	.word	0x20002364
    34ec:	00002cd1 	.word	0x00002cd1

000034f0 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    34f0:	b580      	push	{r7, lr}
    34f2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    34f4:	4904      	ldr	r1, [pc, #16]	; (3508 <CAN_CCU_PORT_init+0x18>)
    34f6:	202d      	movs	r0, #45	; 0x2d
    34f8:	4b04      	ldr	r3, [pc, #16]	; (350c <CAN_CCU_PORT_init+0x1c>)
    34fa:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    34fc:	4904      	ldr	r1, [pc, #16]	; (3510 <CAN_CCU_PORT_init+0x20>)
    34fe:	202c      	movs	r0, #44	; 0x2c
    3500:	4b02      	ldr	r3, [pc, #8]	; (350c <CAN_CCU_PORT_init+0x1c>)
    3502:	4798      	blx	r3
}
    3504:	bf00      	nop
    3506:	bd80      	pop	{r7, pc}
    3508:	002d0007 	.word	0x002d0007
    350c:	00002c31 	.word	0x00002c31
    3510:	002c0007 	.word	0x002c0007

00003514 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3514:	b580      	push	{r7, lr}
    3516:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3518:	4807      	ldr	r0, [pc, #28]	; (3538 <CAN_CCU_init+0x24>)
    351a:	4b08      	ldr	r3, [pc, #32]	; (353c <CAN_CCU_init+0x28>)
    351c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    351e:	2243      	movs	r2, #67	; 0x43
    3520:	211c      	movs	r1, #28
    3522:	4807      	ldr	r0, [pc, #28]	; (3540 <CAN_CCU_init+0x2c>)
    3524:	4b07      	ldr	r3, [pc, #28]	; (3544 <CAN_CCU_init+0x30>)
    3526:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3528:	4907      	ldr	r1, [pc, #28]	; (3548 <CAN_CCU_init+0x34>)
    352a:	4808      	ldr	r0, [pc, #32]	; (354c <CAN_CCU_init+0x38>)
    352c:	4b08      	ldr	r3, [pc, #32]	; (3550 <CAN_CCU_init+0x3c>)
    352e:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3530:	4b08      	ldr	r3, [pc, #32]	; (3554 <CAN_CCU_init+0x40>)
    3532:	4798      	blx	r3
}
    3534:	bf00      	nop
    3536:	bd80      	pop	{r7, pc}
    3538:	40000800 	.word	0x40000800
    353c:	000024e3 	.word	0x000024e3
    3540:	40001c00 	.word	0x40001c00
    3544:	0000247d 	.word	0x0000247d
    3548:	42000400 	.word	0x42000400
    354c:	20002264 	.word	0x20002264
    3550:	000039dd 	.word	0x000039dd
    3554:	000034f1 	.word	0x000034f1

00003558 <system_init>:

void system_init(void)
{
    3558:	b580      	push	{r7, lr}
    355a:	af00      	add	r7, sp, #0
	init_mcu();
    355c:	4b40      	ldr	r3, [pc, #256]	; (3660 <system_init+0x108>)
    355e:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3560:	2101      	movs	r1, #1
    3562:	2027      	movs	r0, #39	; 0x27
    3564:	4b3f      	ldr	r3, [pc, #252]	; (3664 <system_init+0x10c>)
    3566:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3568:	2102      	movs	r1, #2
    356a:	2027      	movs	r0, #39	; 0x27
    356c:	4b3e      	ldr	r3, [pc, #248]	; (3668 <system_init+0x110>)
    356e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3570:	f04f 31ff 	mov.w	r1, #4294967295
    3574:	2027      	movs	r0, #39	; 0x27
    3576:	4b3d      	ldr	r3, [pc, #244]	; (366c <system_init+0x114>)
    3578:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    357a:	2101      	movs	r1, #1
    357c:	203d      	movs	r0, #61	; 0x3d
    357e:	4b3c      	ldr	r3, [pc, #240]	; (3670 <system_init+0x118>)
    3580:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    3582:	2102      	movs	r1, #2
    3584:	203d      	movs	r0, #61	; 0x3d
    3586:	4b37      	ldr	r3, [pc, #220]	; (3664 <system_init+0x10c>)
    3588:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    358a:	f04f 31ff 	mov.w	r1, #4294967295
    358e:	203d      	movs	r0, #61	; 0x3d
    3590:	4b36      	ldr	r3, [pc, #216]	; (366c <system_init+0x114>)
    3592:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3594:	2101      	movs	r1, #1
    3596:	203f      	movs	r0, #63	; 0x3f
    3598:	4b32      	ldr	r3, [pc, #200]	; (3664 <system_init+0x10c>)
    359a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    359c:	2101      	movs	r1, #1
    359e:	203f      	movs	r0, #63	; 0x3f
    35a0:	4b31      	ldr	r3, [pc, #196]	; (3668 <system_init+0x110>)
    35a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    35a4:	f04f 31ff 	mov.w	r1, #4294967295
    35a8:	203f      	movs	r0, #63	; 0x3f
    35aa:	4b30      	ldr	r3, [pc, #192]	; (366c <system_init+0x114>)
    35ac:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    35ae:	2101      	movs	r1, #1
    35b0:	2040      	movs	r0, #64	; 0x40
    35b2:	4b2c      	ldr	r3, [pc, #176]	; (3664 <system_init+0x10c>)
    35b4:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    35b6:	2102      	movs	r1, #2
    35b8:	2040      	movs	r0, #64	; 0x40
    35ba:	4b2b      	ldr	r3, [pc, #172]	; (3668 <system_init+0x110>)
    35bc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    35be:	f04f 31ff 	mov.w	r1, #4294967295
    35c2:	2040      	movs	r0, #64	; 0x40
    35c4:	4b29      	ldr	r3, [pc, #164]	; (366c <system_init+0x114>)
    35c6:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    35c8:	2101      	movs	r1, #1
    35ca:	204e      	movs	r0, #78	; 0x4e
    35cc:	4b28      	ldr	r3, [pc, #160]	; (3670 <system_init+0x118>)
    35ce:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    35d0:	2102      	movs	r1, #2
    35d2:	204e      	movs	r0, #78	; 0x4e
    35d4:	4b23      	ldr	r3, [pc, #140]	; (3664 <system_init+0x10c>)
    35d6:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    35d8:	f04f 31ff 	mov.w	r1, #4294967295
    35dc:	204e      	movs	r0, #78	; 0x4e
    35de:	4b23      	ldr	r3, [pc, #140]	; (366c <system_init+0x114>)
    35e0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    35e2:	2100      	movs	r1, #0
    35e4:	204f      	movs	r0, #79	; 0x4f
    35e6:	4b22      	ldr	r3, [pc, #136]	; (3670 <system_init+0x118>)
    35e8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    35ea:	2102      	movs	r1, #2
    35ec:	204f      	movs	r0, #79	; 0x4f
    35ee:	4b1d      	ldr	r3, [pc, #116]	; (3664 <system_init+0x10c>)
    35f0:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    35f2:	f04f 31ff 	mov.w	r1, #4294967295
    35f6:	204f      	movs	r0, #79	; 0x4f
    35f8:	4b1c      	ldr	r3, [pc, #112]	; (366c <system_init+0x114>)
    35fa:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    35fc:	2100      	movs	r1, #0
    35fe:	2052      	movs	r0, #82	; 0x52
    3600:	4b1b      	ldr	r3, [pc, #108]	; (3670 <system_init+0x118>)
    3602:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3604:	2102      	movs	r1, #2
    3606:	2052      	movs	r0, #82	; 0x52
    3608:	4b16      	ldr	r3, [pc, #88]	; (3664 <system_init+0x10c>)
    360a:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    360c:	f04f 31ff 	mov.w	r1, #4294967295
    3610:	2052      	movs	r0, #82	; 0x52
    3612:	4b16      	ldr	r3, [pc, #88]	; (366c <system_init+0x114>)
    3614:	4798      	blx	r3

	CRC_CALC_init();
    3616:	4b17      	ldr	r3, [pc, #92]	; (3674 <system_init+0x11c>)
    3618:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    361a:	4b17      	ldr	r3, [pc, #92]	; (3678 <system_init+0x120>)
    361c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    361e:	4b17      	ldr	r3, [pc, #92]	; (367c <system_init+0x124>)
    3620:	4798      	blx	r3

	QSPI_N25Q256_init();
    3622:	4b17      	ldr	r3, [pc, #92]	; (3680 <system_init+0x128>)
    3624:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3626:	4b17      	ldr	r3, [pc, #92]	; (3684 <system_init+0x12c>)
    3628:	4798      	blx	r3

	SPI_TEMP_init();
    362a:	4b17      	ldr	r3, [pc, #92]	; (3688 <system_init+0x130>)
    362c:	4798      	blx	r3

	I2C_EXPANDER_init();
    362e:	4b17      	ldr	r3, [pc, #92]	; (368c <system_init+0x134>)
    3630:	4798      	blx	r3

	SPI_HI3593_init();
    3632:	4b17      	ldr	r3, [pc, #92]	; (3690 <system_init+0x138>)
    3634:	4798      	blx	r3

	I2C_EEPROM_init();
    3636:	4b17      	ldr	r3, [pc, #92]	; (3694 <system_init+0x13c>)
    3638:	4798      	blx	r3

	TIMER_INTERFACE_init();
    363a:	4b17      	ldr	r3, [pc, #92]	; (3698 <system_init+0x140>)
    363c:	4798      	blx	r3
	TIMER_EVENT_init();
    363e:	4b17      	ldr	r3, [pc, #92]	; (369c <system_init+0x144>)
    3640:	4798      	blx	r3
	TIMER_ARINC_init();
    3642:	4b17      	ldr	r3, [pc, #92]	; (36a0 <system_init+0x148>)
    3644:	4798      	blx	r3
	TIMER_HVAC_init();
    3646:	4b17      	ldr	r3, [pc, #92]	; (36a4 <system_init+0x14c>)
    3648:	4798      	blx	r3
	LIVE_PULSE_init();
    364a:	4b17      	ldr	r3, [pc, #92]	; (36a8 <system_init+0x150>)
    364c:	4798      	blx	r3

	CDCUSB_init();
    364e:	4b17      	ldr	r3, [pc, #92]	; (36ac <system_init+0x154>)
    3650:	4798      	blx	r3

	WATCHDOG_init();
    3652:	4b17      	ldr	r3, [pc, #92]	; (36b0 <system_init+0x158>)
    3654:	4798      	blx	r3
	CAN_CCU_init();
    3656:	4b17      	ldr	r3, [pc, #92]	; (36b4 <system_init+0x15c>)
    3658:	4798      	blx	r3
}
    365a:	bf00      	nop
    365c:	bd80      	pop	{r7, pc}
    365e:	bf00      	nop
    3660:	00002cc1 	.word	0x00002cc1
    3664:	00002c51 	.word	0x00002c51
    3668:	00002bfd 	.word	0x00002bfd
    366c:	00002c31 	.word	0x00002c31
    3670:	00002c89 	.word	0x00002c89
    3674:	00002d21 	.word	0x00002d21
    3678:	00002d4d 	.word	0x00002d4d
    367c:	00002df1 	.word	0x00002df1
    3680:	00002f2d 	.word	0x00002f2d
    3684:	00002f71 	.word	0x00002f71
    3688:	00003035 	.word	0x00003035
    368c:	000030cd 	.word	0x000030cd
    3690:	00003199 	.word	0x00003199
    3694:	00003231 	.word	0x00003231
    3698:	0000325d 	.word	0x0000325d
    369c:	000032a5 	.word	0x000032a5
    36a0:	000032ed 	.word	0x000032ed
    36a4:	00003335 	.word	0x00003335
    36a8:	000033c9 	.word	0x000033c9
    36ac:	00003495 	.word	0x00003495
    36b0:	000034cd 	.word	0x000034cd
    36b4:	00003515 	.word	0x00003515

000036b8 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    36b8:	b480      	push	{r7}
    36ba:	b085      	sub	sp, #20
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    36c0:	f3ef 8310 	mrs	r3, PRIMASK
    36c4:	60fb      	str	r3, [r7, #12]
  return(result);
    36c6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    36cc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    36ce:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    36d2:	bf00      	nop
    36d4:	3714      	adds	r7, #20
    36d6:	46bd      	mov	sp, r7
    36d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36dc:	4770      	bx	lr

000036de <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    36de:	b480      	push	{r7}
    36e0:	b085      	sub	sp, #20
    36e2:	af00      	add	r7, sp, #0
    36e4:	6078      	str	r0, [r7, #4]
    36e6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	681b      	ldr	r3, [r3, #0]
    36ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    36f0:	68fb      	ldr	r3, [r7, #12]
    36f2:	f383 8810 	msr	PRIMASK, r3
}
    36f6:	bf00      	nop
    36f8:	3714      	adds	r7, #20
    36fa:	46bd      	mov	sp, r7
    36fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3700:	4770      	bx	lr

00003702 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3702:	b480      	push	{r7}
    3704:	b083      	sub	sp, #12
    3706:	af00      	add	r7, sp, #0
    3708:	4603      	mov	r3, r0
    370a:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    370c:	88fb      	ldrh	r3, [r7, #6]
    370e:	f003 0303 	and.w	r3, r3, #3
    3712:	2b00      	cmp	r3, #0
    3714:	d001      	beq.n	371a <leap_year+0x18>
		return false;
    3716:	2300      	movs	r3, #0
    3718:	e000      	b.n	371c <leap_year+0x1a>
	} else {
		return true;
    371a:	2301      	movs	r3, #1
	}
}
    371c:	4618      	mov	r0, r3
    371e:	370c      	adds	r7, #12
    3720:	46bd      	mov	sp, r7
    3722:	f85d 7b04 	ldr.w	r7, [sp], #4
    3726:	4770      	bx	lr

00003728 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    3728:	b580      	push	{r7, lr}
    372a:	b084      	sub	sp, #16
    372c:	af00      	add	r7, sp, #0
    372e:	6078      	str	r0, [r7, #4]
    3730:	460b      	mov	r3, r1
    3732:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    3734:	2300      	movs	r3, #0
    3736:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    3738:	687b      	ldr	r3, [r7, #4]
    373a:	b29b      	uxth	r3, r3
    373c:	4618      	mov	r0, r3
    373e:	4b2f      	ldr	r3, [pc, #188]	; (37fc <get_secs_in_month+0xd4>)
    3740:	4798      	blx	r3
    3742:	4603      	mov	r3, r0
    3744:	2b00      	cmp	r3, #0
    3746:	d028      	beq.n	379a <get_secs_in_month+0x72>
		switch (month) {
    3748:	78fb      	ldrb	r3, [r7, #3]
    374a:	3b01      	subs	r3, #1
    374c:	2b0b      	cmp	r3, #11
    374e:	d84c      	bhi.n	37ea <get_secs_in_month+0xc2>
    3750:	a201      	add	r2, pc, #4	; (adr r2, 3758 <get_secs_in_month+0x30>)
    3752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3756:	bf00      	nop
    3758:	00003789 	.word	0x00003789
    375c:	0000378f 	.word	0x0000378f
    3760:	00003789 	.word	0x00003789
    3764:	00003795 	.word	0x00003795
    3768:	00003789 	.word	0x00003789
    376c:	00003795 	.word	0x00003795
    3770:	00003789 	.word	0x00003789
    3774:	00003789 	.word	0x00003789
    3778:	00003795 	.word	0x00003795
    377c:	00003789 	.word	0x00003789
    3780:	00003795 	.word	0x00003795
    3784:	00003789 	.word	0x00003789
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    3788:	4b1d      	ldr	r3, [pc, #116]	; (3800 <get_secs_in_month+0xd8>)
    378a:	60fb      	str	r3, [r7, #12]
			break;
    378c:	e030      	b.n	37f0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    378e:	4b1d      	ldr	r3, [pc, #116]	; (3804 <get_secs_in_month+0xdc>)
    3790:	60fb      	str	r3, [r7, #12]
			break;
    3792:	e02d      	b.n	37f0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    3794:	4b1c      	ldr	r3, [pc, #112]	; (3808 <get_secs_in_month+0xe0>)
    3796:	60fb      	str	r3, [r7, #12]
			break;
    3798:	e02a      	b.n	37f0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    379a:	78fb      	ldrb	r3, [r7, #3]
    379c:	3b01      	subs	r3, #1
    379e:	2b0b      	cmp	r3, #11
    37a0:	d825      	bhi.n	37ee <get_secs_in_month+0xc6>
    37a2:	a201      	add	r2, pc, #4	; (adr r2, 37a8 <get_secs_in_month+0x80>)
    37a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    37a8:	000037d9 	.word	0x000037d9
    37ac:	000037df 	.word	0x000037df
    37b0:	000037d9 	.word	0x000037d9
    37b4:	000037e5 	.word	0x000037e5
    37b8:	000037d9 	.word	0x000037d9
    37bc:	000037e5 	.word	0x000037e5
    37c0:	000037d9 	.word	0x000037d9
    37c4:	000037d9 	.word	0x000037d9
    37c8:	000037e5 	.word	0x000037e5
    37cc:	000037d9 	.word	0x000037d9
    37d0:	000037e5 	.word	0x000037e5
    37d4:	000037d9 	.word	0x000037d9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    37d8:	4b09      	ldr	r3, [pc, #36]	; (3800 <get_secs_in_month+0xd8>)
    37da:	60fb      	str	r3, [r7, #12]
			break;
    37dc:	e008      	b.n	37f0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    37de:	4b0b      	ldr	r3, [pc, #44]	; (380c <get_secs_in_month+0xe4>)
    37e0:	60fb      	str	r3, [r7, #12]
			break;
    37e2:	e005      	b.n	37f0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    37e4:	4b08      	ldr	r3, [pc, #32]	; (3808 <get_secs_in_month+0xe0>)
    37e6:	60fb      	str	r3, [r7, #12]
			break;
    37e8:	e002      	b.n	37f0 <get_secs_in_month+0xc8>
			break;
    37ea:	bf00      	nop
    37ec:	e000      	b.n	37f0 <get_secs_in_month+0xc8>
		default:
			break;
    37ee:	bf00      	nop
		}
	}

	return sec_in_month;
    37f0:	68fb      	ldr	r3, [r7, #12]
}
    37f2:	4618      	mov	r0, r3
    37f4:	3710      	adds	r7, #16
    37f6:	46bd      	mov	sp, r7
    37f8:	bd80      	pop	{r7, pc}
    37fa:	bf00      	nop
    37fc:	00003703 	.word	0x00003703
    3800:	0028de80 	.word	0x0028de80
    3804:	00263b80 	.word	0x00263b80
    3808:	00278d00 	.word	0x00278d00
    380c:	0024ea00 	.word	0x0024ea00

00003810 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    3810:	b580      	push	{r7, lr}
    3812:	b08a      	sub	sp, #40	; 0x28
    3814:	af00      	add	r7, sp, #0
    3816:	60f8      	str	r0, [r7, #12]
    3818:	60b9      	str	r1, [r7, #8]
    381a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    381c:	68fb      	ldr	r3, [r7, #12]
    381e:	699b      	ldr	r3, [r3, #24]
    3820:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    3822:	2301      	movs	r3, #1
    3824:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    3826:	2301      	movs	r3, #1
    3828:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    382a:	2300      	movs	r3, #0
    382c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    382e:	2300      	movs	r3, #0
    3830:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    3832:	68bb      	ldr	r3, [r7, #8]
    3834:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    3836:	6a3b      	ldr	r3, [r7, #32]
    3838:	b29b      	uxth	r3, r3
    383a:	4618      	mov	r0, r3
    383c:	4b32      	ldr	r3, [pc, #200]	; (3908 <convert_timestamp_to_datetime+0xf8>)
    383e:	4798      	blx	r3
    3840:	4603      	mov	r3, r0
    3842:	2b00      	cmp	r3, #0
    3844:	d001      	beq.n	384a <convert_timestamp_to_datetime+0x3a>
    3846:	4b31      	ldr	r3, [pc, #196]	; (390c <convert_timestamp_to_datetime+0xfc>)
    3848:	e000      	b.n	384c <convert_timestamp_to_datetime+0x3c>
    384a:	4b31      	ldr	r3, [pc, #196]	; (3910 <convert_timestamp_to_datetime+0x100>)
    384c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3850:	69bb      	ldr	r3, [r7, #24]
    3852:	429a      	cmp	r2, r3
    3854:	d307      	bcc.n	3866 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    3856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3858:	69bb      	ldr	r3, [r7, #24]
    385a:	1ad3      	subs	r3, r2, r3
    385c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    385e:	6a3b      	ldr	r3, [r7, #32]
    3860:	3301      	adds	r3, #1
    3862:	623b      	str	r3, [r7, #32]
    3864:	e7e7      	b.n	3836 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    3866:	7ffb      	ldrb	r3, [r7, #31]
    3868:	4619      	mov	r1, r3
    386a:	6a38      	ldr	r0, [r7, #32]
    386c:	4b29      	ldr	r3, [pc, #164]	; (3914 <convert_timestamp_to_datetime+0x104>)
    386e:	4798      	blx	r3
    3870:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    3872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3874:	697b      	ldr	r3, [r7, #20]
    3876:	429a      	cmp	r2, r3
    3878:	d307      	bcc.n	388a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    387c:	697b      	ldr	r3, [r7, #20]
    387e:	1ad3      	subs	r3, r2, r3
    3880:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    3882:	7ffb      	ldrb	r3, [r7, #31]
    3884:	3301      	adds	r3, #1
    3886:	77fb      	strb	r3, [r7, #31]
    3888:	e7ed      	b.n	3866 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    388c:	4a22      	ldr	r2, [pc, #136]	; (3918 <convert_timestamp_to_datetime+0x108>)
    388e:	4293      	cmp	r3, r2
    3890:	d909      	bls.n	38a6 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    3892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3894:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    3898:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    389c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    389e:	7fbb      	ldrb	r3, [r7, #30]
    38a0:	3301      	adds	r3, #1
    38a2:	77bb      	strb	r3, [r7, #30]
    38a4:	e7f1      	b.n	388a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    38a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38a8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    38ac:	d307      	bcc.n	38be <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    38ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38b0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    38b4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    38b6:	7f7b      	ldrb	r3, [r7, #29]
    38b8:	3301      	adds	r3, #1
    38ba:	777b      	strb	r3, [r7, #29]
    38bc:	e7f3      	b.n	38a6 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    38be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38c0:	2b3b      	cmp	r3, #59	; 0x3b
    38c2:	d906      	bls.n	38d2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    38c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38c6:	3b3c      	subs	r3, #60	; 0x3c
    38c8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    38ca:	7f3b      	ldrb	r3, [r7, #28]
    38cc:	3301      	adds	r3, #1
    38ce:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    38d0:	e7f5      	b.n	38be <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    38d2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    38d4:	6a3b      	ldr	r3, [r7, #32]
    38d6:	b29a      	uxth	r2, r3
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	7ffa      	ldrb	r2, [r7, #31]
    38e0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	7fba      	ldrb	r2, [r7, #30]
    38e6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    38e8:	687b      	ldr	r3, [r7, #4]
    38ea:	7f7a      	ldrb	r2, [r7, #29]
    38ec:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	7f3a      	ldrb	r2, [r7, #28]
    38f2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    38f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38f6:	b2da      	uxtb	r2, r3
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    38fc:	2300      	movs	r3, #0
}
    38fe:	4618      	mov	r0, r3
    3900:	3728      	adds	r7, #40	; 0x28
    3902:	46bd      	mov	sp, r7
    3904:	bd80      	pop	{r7, pc}
    3906:	bf00      	nop
    3908:	00003703 	.word	0x00003703
    390c:	01e28500 	.word	0x01e28500
    3910:	01e13380 	.word	0x01e13380
    3914:	00003729 	.word	0x00003729
    3918:	0001517f 	.word	0x0001517f

0000391c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    391c:	b580      	push	{r7, lr}
    391e:	b084      	sub	sp, #16
    3920:	af00      	add	r7, sp, #0
    3922:	6078      	str	r0, [r7, #4]
    3924:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3926:	2300      	movs	r3, #0
    3928:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    392a:	687b      	ldr	r3, [r7, #4]
    392c:	2b00      	cmp	r3, #0
    392e:	bf14      	ite	ne
    3930:	2301      	movne	r3, #1
    3932:	2300      	moveq	r3, #0
    3934:	b2db      	uxtb	r3, r3
    3936:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    393a:	4911      	ldr	r1, [pc, #68]	; (3980 <calendar_init+0x64>)
    393c:	4618      	mov	r0, r3
    393e:	4b11      	ldr	r3, [pc, #68]	; (3984 <calendar_init+0x68>)
    3940:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    3942:	687b      	ldr	r3, [r7, #4]
    3944:	681a      	ldr	r2, [r3, #0]
    3946:	683b      	ldr	r3, [r7, #0]
    3948:	429a      	cmp	r2, r3
    394a:	d101      	bne.n	3950 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    394c:	2300      	movs	r3, #0
    394e:	e013      	b.n	3978 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	2b00      	cmp	r3, #0
    3956:	d002      	beq.n	395e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3958:	f06f 0311 	mvn.w	r3, #17
    395c:	e00c      	b.n	3978 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	683a      	ldr	r2, [r7, #0]
    3962:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3964:	687b      	ldr	r3, [r7, #4]
    3966:	4618      	mov	r0, r3
    3968:	4b07      	ldr	r3, [pc, #28]	; (3988 <calendar_init+0x6c>)
    396a:	4798      	blx	r3
    396c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3974:	619a      	str	r2, [r3, #24]

	return ret;
    3976:	68fb      	ldr	r3, [r7, #12]
}
    3978:	4618      	mov	r0, r3
    397a:	3710      	adds	r7, #16
    397c:	46bd      	mov	sp, r7
    397e:	bd80      	pop	{r7, pc}
    3980:	00011968 	.word	0x00011968
    3984:	00005545 	.word	0x00005545
    3988:	0000772d 	.word	0x0000772d

0000398c <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    398c:	b580      	push	{r7, lr}
    398e:	b084      	sub	sp, #16
    3990:	af00      	add	r7, sp, #0
    3992:	6078      	str	r0, [r7, #4]
    3994:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3996:	687b      	ldr	r3, [r7, #4]
    3998:	2b00      	cmp	r3, #0
    399a:	bf14      	ite	ne
    399c:	2301      	movne	r3, #1
    399e:	2300      	moveq	r3, #0
    39a0:	b2db      	uxtb	r3, r3
    39a2:	f240 223b 	movw	r2, #571	; 0x23b
    39a6:	4909      	ldr	r1, [pc, #36]	; (39cc <calendar_get_date_time+0x40>)
    39a8:	4618      	mov	r0, r3
    39aa:	4b09      	ldr	r3, [pc, #36]	; (39d0 <calendar_get_date_time+0x44>)
    39ac:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	4618      	mov	r0, r3
    39b2:	4b08      	ldr	r3, [pc, #32]	; (39d4 <calendar_get_date_time+0x48>)
    39b4:	4798      	blx	r3
    39b6:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    39b8:	683a      	ldr	r2, [r7, #0]
    39ba:	68f9      	ldr	r1, [r7, #12]
    39bc:	6878      	ldr	r0, [r7, #4]
    39be:	4b06      	ldr	r3, [pc, #24]	; (39d8 <calendar_get_date_time+0x4c>)
    39c0:	4798      	blx	r3

	return ERR_NONE;
    39c2:	2300      	movs	r3, #0
}
    39c4:	4618      	mov	r0, r3
    39c6:	3710      	adds	r7, #16
    39c8:	46bd      	mov	sp, r7
    39ca:	bd80      	pop	{r7, pc}
    39cc:	00011968 	.word	0x00011968
    39d0:	00005545 	.word	0x00005545
    39d4:	000077f1 	.word	0x000077f1
    39d8:	00003811 	.word	0x00003811

000039dc <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    39dc:	b580      	push	{r7, lr}
    39de:	b084      	sub	sp, #16
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
    39e4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d004      	beq.n	39f6 <can_async_init+0x1a>
    39ec:	683b      	ldr	r3, [r7, #0]
    39ee:	2b00      	cmp	r3, #0
    39f0:	d001      	beq.n	39f6 <can_async_init+0x1a>
    39f2:	2301      	movs	r3, #1
    39f4:	e000      	b.n	39f8 <can_async_init+0x1c>
    39f6:	2300      	movs	r3, #0
    39f8:	f003 0301 	and.w	r3, r3, #1
    39fc:	b2db      	uxtb	r3, r3
    39fe:	2241      	movs	r2, #65	; 0x41
    3a00:	490e      	ldr	r1, [pc, #56]	; (3a3c <can_async_init+0x60>)
    3a02:	4618      	mov	r0, r3
    3a04:	4b0e      	ldr	r3, [pc, #56]	; (3a40 <can_async_init+0x64>)
    3a06:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	6839      	ldr	r1, [r7, #0]
    3a0c:	4618      	mov	r0, r3
    3a0e:	4b0d      	ldr	r3, [pc, #52]	; (3a44 <can_async_init+0x68>)
    3a10:	4798      	blx	r3
    3a12:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d001      	beq.n	3a1e <can_async_init+0x42>
		return rc;
    3a1a:	68fb      	ldr	r3, [r7, #12]
    3a1c:	e009      	b.n	3a32 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    3a1e:	687b      	ldr	r3, [r7, #4]
    3a20:	4a09      	ldr	r2, [pc, #36]	; (3a48 <can_async_init+0x6c>)
    3a22:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    3a24:	687b      	ldr	r3, [r7, #4]
    3a26:	4a09      	ldr	r2, [pc, #36]	; (3a4c <can_async_init+0x70>)
    3a28:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	4a08      	ldr	r2, [pc, #32]	; (3a50 <can_async_init+0x74>)
    3a2e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3a30:	2300      	movs	r3, #0
}
    3a32:	4618      	mov	r0, r3
    3a34:	3710      	adds	r7, #16
    3a36:	46bd      	mov	sp, r7
    3a38:	bd80      	pop	{r7, pc}
    3a3a:	bf00      	nop
    3a3c:	00011984 	.word	0x00011984
    3a40:	00005545 	.word	0x00005545
    3a44:	00005aa1 	.word	0x00005aa1
    3a48:	00003a55 	.word	0x00003a55
    3a4c:	00003a79 	.word	0x00003a79
    3a50:	00003a9d 	.word	0x00003a9d

00003a54 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    3a54:	b580      	push	{r7, lr}
    3a56:	b084      	sub	sp, #16
    3a58:	af00      	add	r7, sp, #0
    3a5a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    3a60:	68fb      	ldr	r3, [r7, #12]
    3a62:	69db      	ldr	r3, [r3, #28]
    3a64:	2b00      	cmp	r3, #0
    3a66:	d003      	beq.n	3a70 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    3a68:	68fb      	ldr	r3, [r7, #12]
    3a6a:	69db      	ldr	r3, [r3, #28]
    3a6c:	68f8      	ldr	r0, [r7, #12]
    3a6e:	4798      	blx	r3
	}
}
    3a70:	bf00      	nop
    3a72:	3710      	adds	r7, #16
    3a74:	46bd      	mov	sp, r7
    3a76:	bd80      	pop	{r7, pc}

00003a78 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    3a78:	b580      	push	{r7, lr}
    3a7a:	b084      	sub	sp, #16
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3a84:	68fb      	ldr	r3, [r7, #12]
    3a86:	6a1b      	ldr	r3, [r3, #32]
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d003      	beq.n	3a94 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    3a8c:	68fb      	ldr	r3, [r7, #12]
    3a8e:	6a1b      	ldr	r3, [r3, #32]
    3a90:	68f8      	ldr	r0, [r7, #12]
    3a92:	4798      	blx	r3
	}
}
    3a94:	bf00      	nop
    3a96:	3710      	adds	r7, #16
    3a98:	46bd      	mov	sp, r7
    3a9a:	bd80      	pop	{r7, pc}

00003a9c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    3a9c:	b580      	push	{r7, lr}
    3a9e:	b084      	sub	sp, #16
    3aa0:	af00      	add	r7, sp, #0
    3aa2:	6078      	str	r0, [r7, #4]
    3aa4:	460b      	mov	r3, r1
    3aa6:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3aa8:	687b      	ldr	r3, [r7, #4]
    3aaa:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    3aac:	68fb      	ldr	r3, [r7, #12]
    3aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d005      	beq.n	3ac0 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    3ab4:	68fb      	ldr	r3, [r7, #12]
    3ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ab8:	78fa      	ldrb	r2, [r7, #3]
    3aba:	4611      	mov	r1, r2
    3abc:	68f8      	ldr	r0, [r7, #12]
    3abe:	4798      	blx	r3
	}
}
    3ac0:	bf00      	nop
    3ac2:	3710      	adds	r7, #16
    3ac4:	46bd      	mov	sp, r7
    3ac6:	bd80      	pop	{r7, pc}

00003ac8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b082      	sub	sp, #8
    3acc:	af00      	add	r7, sp, #0
    3ace:	6078      	str	r0, [r7, #4]
    3ad0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	d004      	beq.n	3ae2 <crc_sync_init+0x1a>
    3ad8:	683b      	ldr	r3, [r7, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d001      	beq.n	3ae2 <crc_sync_init+0x1a>
    3ade:	2301      	movs	r3, #1
    3ae0:	e000      	b.n	3ae4 <crc_sync_init+0x1c>
    3ae2:	2300      	movs	r3, #0
    3ae4:	f003 0301 	and.w	r3, r3, #1
    3ae8:	b2db      	uxtb	r3, r3
    3aea:	222b      	movs	r2, #43	; 0x2b
    3aec:	4906      	ldr	r1, [pc, #24]	; (3b08 <crc_sync_init+0x40>)
    3aee:	4618      	mov	r0, r3
    3af0:	4b06      	ldr	r3, [pc, #24]	; (3b0c <crc_sync_init+0x44>)
    3af2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    3af4:	687b      	ldr	r3, [r7, #4]
    3af6:	6839      	ldr	r1, [r7, #0]
    3af8:	4618      	mov	r0, r3
    3afa:	4b05      	ldr	r3, [pc, #20]	; (3b10 <crc_sync_init+0x48>)
    3afc:	4798      	blx	r3
    3afe:	4603      	mov	r3, r0
}
    3b00:	4618      	mov	r0, r3
    3b02:	3708      	adds	r7, #8
    3b04:	46bd      	mov	sp, r7
    3b06:	bd80      	pop	{r7, pc}
    3b08:	000119a0 	.word	0x000119a0
    3b0c:	00005545 	.word	0x00005545
    3b10:	00006195 	.word	0x00006195

00003b14 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    3b14:	b590      	push	{r4, r7, lr}
    3b16:	b083      	sub	sp, #12
    3b18:	af00      	add	r7, sp, #0
    3b1a:	4603      	mov	r3, r0
    3b1c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    3b1e:	4b07      	ldr	r3, [pc, #28]	; (3b3c <delay_us+0x28>)
    3b20:	681c      	ldr	r4, [r3, #0]
    3b22:	88fb      	ldrh	r3, [r7, #6]
    3b24:	4618      	mov	r0, r3
    3b26:	4b06      	ldr	r3, [pc, #24]	; (3b40 <delay_us+0x2c>)
    3b28:	4798      	blx	r3
    3b2a:	4603      	mov	r3, r0
    3b2c:	4619      	mov	r1, r3
    3b2e:	4620      	mov	r0, r4
    3b30:	4b04      	ldr	r3, [pc, #16]	; (3b44 <delay_us+0x30>)
    3b32:	4798      	blx	r3
}
    3b34:	bf00      	nop
    3b36:	370c      	adds	r7, #12
    3b38:	46bd      	mov	sp, r7
    3b3a:	bd90      	pop	{r4, r7, pc}
    3b3c:	20001c10 	.word	0x20001c10
    3b40:	00005eed 	.word	0x00005eed
    3b44:	00006081 	.word	0x00006081

00003b48 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3b48:	b590      	push	{r4, r7, lr}
    3b4a:	b083      	sub	sp, #12
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	4603      	mov	r3, r0
    3b50:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    3b52:	4b07      	ldr	r3, [pc, #28]	; (3b70 <delay_ms+0x28>)
    3b54:	681c      	ldr	r4, [r3, #0]
    3b56:	88fb      	ldrh	r3, [r7, #6]
    3b58:	4618      	mov	r0, r3
    3b5a:	4b06      	ldr	r3, [pc, #24]	; (3b74 <delay_ms+0x2c>)
    3b5c:	4798      	blx	r3
    3b5e:	4603      	mov	r3, r0
    3b60:	4619      	mov	r1, r3
    3b62:	4620      	mov	r0, r4
    3b64:	4b04      	ldr	r3, [pc, #16]	; (3b78 <delay_ms+0x30>)
    3b66:	4798      	blx	r3
}
    3b68:	bf00      	nop
    3b6a:	370c      	adds	r7, #12
    3b6c:	46bd      	mov	sp, r7
    3b6e:	bd90      	pop	{r4, r7, pc}
    3b70:	20001c10 	.word	0x20001c10
    3b74:	00006059 	.word	0x00006059
    3b78:	00006081 	.word	0x00006081

00003b7c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	af00      	add	r7, sp, #0
	return _event_system_init();
    3b80:	4b02      	ldr	r3, [pc, #8]	; (3b8c <event_system_init+0x10>)
    3b82:	4798      	blx	r3
    3b84:	4603      	mov	r3, r0
}
    3b86:	4618      	mov	r0, r3
    3b88:	bd80      	pop	{r7, pc}
    3b8a:	bf00      	nop
    3b8c:	000067c9 	.word	0x000067c9

00003b90 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b082      	sub	sp, #8
    3b94:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3b96:	2300      	movs	r3, #0
    3b98:	80fb      	strh	r3, [r7, #6]
    3b9a:	e00e      	b.n	3bba <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    3b9c:	88fb      	ldrh	r3, [r7, #6]
    3b9e:	4a0c      	ldr	r2, [pc, #48]	; (3bd0 <ext_irq_init+0x40>)
    3ba0:	00db      	lsls	r3, r3, #3
    3ba2:	4413      	add	r3, r2
    3ba4:	f04f 32ff 	mov.w	r2, #4294967295
    3ba8:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    3baa:	88fb      	ldrh	r3, [r7, #6]
    3bac:	4a08      	ldr	r2, [pc, #32]	; (3bd0 <ext_irq_init+0x40>)
    3bae:	2100      	movs	r1, #0
    3bb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3bb4:	88fb      	ldrh	r3, [r7, #6]
    3bb6:	3301      	adds	r3, #1
    3bb8:	80fb      	strh	r3, [r7, #6]
    3bba:	88fb      	ldrh	r3, [r7, #6]
    3bbc:	2b03      	cmp	r3, #3
    3bbe:	d9ed      	bls.n	3b9c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    3bc0:	4804      	ldr	r0, [pc, #16]	; (3bd4 <ext_irq_init+0x44>)
    3bc2:	4b05      	ldr	r3, [pc, #20]	; (3bd8 <ext_irq_init+0x48>)
    3bc4:	4798      	blx	r3
    3bc6:	4603      	mov	r3, r0
}
    3bc8:	4618      	mov	r0, r3
    3bca:	3708      	adds	r7, #8
    3bcc:	46bd      	mov	sp, r7
    3bce:	bd80      	pop	{r7, pc}
    3bd0:	20001c14 	.word	0x20001c14
    3bd4:	00003bdd 	.word	0x00003bdd
    3bd8:	0000649d 	.word	0x0000649d

00003bdc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b084      	sub	sp, #16
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3be4:	2300      	movs	r3, #0
    3be6:	73fb      	strb	r3, [r7, #15]
    3be8:	2304      	movs	r3, #4
    3bea:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    3bec:	e02a      	b.n	3c44 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    3bee:	7bba      	ldrb	r2, [r7, #14]
    3bf0:	7bfb      	ldrb	r3, [r7, #15]
    3bf2:	4413      	add	r3, r2
    3bf4:	105b      	asrs	r3, r3, #1
    3bf6:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    3bf8:	7b7b      	ldrb	r3, [r7, #13]
    3bfa:	2b03      	cmp	r3, #3
    3bfc:	d827      	bhi.n	3c4e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    3bfe:	7b7b      	ldrb	r3, [r7, #13]
    3c00:	4a16      	ldr	r2, [pc, #88]	; (3c5c <process_ext_irq+0x80>)
    3c02:	00db      	lsls	r3, r3, #3
    3c04:	4413      	add	r3, r2
    3c06:	685a      	ldr	r2, [r3, #4]
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	429a      	cmp	r2, r3
    3c0c:	d10b      	bne.n	3c26 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    3c0e:	7b7b      	ldrb	r3, [r7, #13]
    3c10:	4a12      	ldr	r2, [pc, #72]	; (3c5c <process_ext_irq+0x80>)
    3c12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3c16:	2b00      	cmp	r3, #0
    3c18:	d01b      	beq.n	3c52 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    3c1a:	7b7b      	ldrb	r3, [r7, #13]
    3c1c:	4a0f      	ldr	r2, [pc, #60]	; (3c5c <process_ext_irq+0x80>)
    3c1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3c22:	4798      	blx	r3
			}
			return;
    3c24:	e015      	b.n	3c52 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    3c26:	7b7b      	ldrb	r3, [r7, #13]
    3c28:	4a0c      	ldr	r2, [pc, #48]	; (3c5c <process_ext_irq+0x80>)
    3c2a:	00db      	lsls	r3, r3, #3
    3c2c:	4413      	add	r3, r2
    3c2e:	685a      	ldr	r2, [r3, #4]
    3c30:	687b      	ldr	r3, [r7, #4]
    3c32:	429a      	cmp	r2, r3
    3c34:	d203      	bcs.n	3c3e <process_ext_irq+0x62>
			lower = middle + 1;
    3c36:	7b7b      	ldrb	r3, [r7, #13]
    3c38:	3301      	adds	r3, #1
    3c3a:	73fb      	strb	r3, [r7, #15]
    3c3c:	e002      	b.n	3c44 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    3c3e:	7b7b      	ldrb	r3, [r7, #13]
    3c40:	3b01      	subs	r3, #1
    3c42:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    3c44:	7bba      	ldrb	r2, [r7, #14]
    3c46:	7bfb      	ldrb	r3, [r7, #15]
    3c48:	429a      	cmp	r2, r3
    3c4a:	d2d0      	bcs.n	3bee <process_ext_irq+0x12>
    3c4c:	e002      	b.n	3c54 <process_ext_irq+0x78>
			return;
    3c4e:	bf00      	nop
    3c50:	e000      	b.n	3c54 <process_ext_irq+0x78>
			return;
    3c52:	bf00      	nop
		}
	}
}
    3c54:	3710      	adds	r7, #16
    3c56:	46bd      	mov	sp, r7
    3c58:	bd80      	pop	{r7, pc}
    3c5a:	bf00      	nop
    3c5c:	20001c14 	.word	0x20001c14

00003c60 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b084      	sub	sp, #16
    3c64:	af00      	add	r7, sp, #0
    3c66:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    3c6c:	687b      	ldr	r3, [r7, #4]
    3c6e:	885b      	ldrh	r3, [r3, #2]
    3c70:	b29b      	uxth	r3, r3
    3c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3c76:	2b00      	cmp	r3, #0
    3c78:	d107      	bne.n	3c8a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    3c7a:	68fb      	ldr	r3, [r7, #12]
    3c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d003      	beq.n	3c8a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    3c82:	68fb      	ldr	r3, [r7, #12]
    3c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3c86:	68f8      	ldr	r0, [r7, #12]
    3c88:	4798      	blx	r3
		}
	}
}
    3c8a:	bf00      	nop
    3c8c:	3710      	adds	r7, #16
    3c8e:	46bd      	mov	sp, r7
    3c90:	bd80      	pop	{r7, pc}

00003c92 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    3c92:	b580      	push	{r7, lr}
    3c94:	b084      	sub	sp, #16
    3c96:	af00      	add	r7, sp, #0
    3c98:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    3c9a:	687b      	ldr	r3, [r7, #4]
    3c9c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	885b      	ldrh	r3, [r3, #2]
    3ca2:	b29b      	uxth	r3, r3
    3ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d107      	bne.n	3cbc <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    3cac:	68fb      	ldr	r3, [r7, #12]
    3cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d003      	beq.n	3cbc <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    3cb4:	68fb      	ldr	r3, [r7, #12]
    3cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3cb8:	68f8      	ldr	r0, [r7, #12]
    3cba:	4798      	blx	r3
		}
	}
}
    3cbc:	bf00      	nop
    3cbe:	3710      	adds	r7, #16
    3cc0:	46bd      	mov	sp, r7
    3cc2:	bd80      	pop	{r7, pc}

00003cc4 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    3cc4:	b580      	push	{r7, lr}
    3cc6:	b084      	sub	sp, #16
    3cc8:	af00      	add	r7, sp, #0
    3cca:	6078      	str	r0, [r7, #4]
    3ccc:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    3cce:	687b      	ldr	r3, [r7, #4]
    3cd0:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    3cd2:	687b      	ldr	r3, [r7, #4]
    3cd4:	885b      	ldrh	r3, [r3, #2]
    3cd6:	b29b      	uxth	r3, r3
    3cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d108      	bne.n	3cf2 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    3ce0:	68fb      	ldr	r3, [r7, #12]
    3ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3ce4:	2b00      	cmp	r3, #0
    3ce6:	d004      	beq.n	3cf2 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    3ce8:	68fb      	ldr	r3, [r7, #12]
    3cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3cec:	6839      	ldr	r1, [r7, #0]
    3cee:	68f8      	ldr	r0, [r7, #12]
    3cf0:	4798      	blx	r3
		}
	}
}
    3cf2:	bf00      	nop
    3cf4:	3710      	adds	r7, #16
    3cf6:	46bd      	mov	sp, r7
    3cf8:	bd80      	pop	{r7, pc}
	...

00003cfc <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b08a      	sub	sp, #40	; 0x28
    3d00:	af00      	add	r7, sp, #0
    3d02:	60f8      	str	r0, [r7, #12]
    3d04:	60b9      	str	r1, [r7, #8]
    3d06:	4613      	mov	r3, r2
    3d08:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    3d0a:	68fb      	ldr	r3, [r7, #12]
    3d0c:	3b28      	subs	r3, #40	; 0x28
    3d0e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    3d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d12:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    3d14:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    3d16:	88fb      	ldrh	r3, [r7, #6]
    3d18:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    3d1a:	f248 0301 	movw	r3, #32769	; 0x8001
    3d1e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    3d20:	68bb      	ldr	r3, [r7, #8]
    3d22:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    3d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d26:	f107 0214 	add.w	r2, r7, #20
    3d2a:	4611      	mov	r1, r2
    3d2c:	4618      	mov	r0, r3
    3d2e:	4b06      	ldr	r3, [pc, #24]	; (3d48 <i2c_m_async_read+0x4c>)
    3d30:	4798      	blx	r3
    3d32:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    3d34:	6a3b      	ldr	r3, [r7, #32]
    3d36:	2b00      	cmp	r3, #0
    3d38:	d001      	beq.n	3d3e <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    3d3a:	6a3b      	ldr	r3, [r7, #32]
    3d3c:	e000      	b.n	3d40 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    3d3e:	88fb      	ldrh	r3, [r7, #6]
}
    3d40:	4618      	mov	r0, r3
    3d42:	3728      	adds	r7, #40	; 0x28
    3d44:	46bd      	mov	sp, r7
    3d46:	bd80      	pop	{r7, pc}
    3d48:	00008771 	.word	0x00008771

00003d4c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b08a      	sub	sp, #40	; 0x28
    3d50:	af00      	add	r7, sp, #0
    3d52:	60f8      	str	r0, [r7, #12]
    3d54:	60b9      	str	r1, [r7, #8]
    3d56:	4613      	mov	r3, r2
    3d58:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    3d5a:	68fb      	ldr	r3, [r7, #12]
    3d5c:	3b28      	subs	r3, #40	; 0x28
    3d5e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    3d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d62:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    3d64:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    3d66:	88fb      	ldrh	r3, [r7, #6]
    3d68:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    3d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3d6e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    3d70:	68bb      	ldr	r3, [r7, #8]
    3d72:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    3d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d76:	f107 0214 	add.w	r2, r7, #20
    3d7a:	4611      	mov	r1, r2
    3d7c:	4618      	mov	r0, r3
    3d7e:	4b06      	ldr	r3, [pc, #24]	; (3d98 <i2c_m_async_write+0x4c>)
    3d80:	4798      	blx	r3
    3d82:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    3d84:	6a3b      	ldr	r3, [r7, #32]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d001      	beq.n	3d8e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    3d8a:	6a3b      	ldr	r3, [r7, #32]
    3d8c:	e000      	b.n	3d90 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    3d8e:	88fb      	ldrh	r3, [r7, #6]
}
    3d90:	4618      	mov	r0, r3
    3d92:	3728      	adds	r7, #40	; 0x28
    3d94:	46bd      	mov	sp, r7
    3d96:	bd80      	pop	{r7, pc}
    3d98:	00008771 	.word	0x00008771

00003d9c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b084      	sub	sp, #16
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    3da4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	2b00      	cmp	r3, #0
    3daa:	bf14      	ite	ne
    3dac:	2301      	movne	r3, #1
    3dae:	2300      	moveq	r3, #0
    3db0:	b2db      	uxtb	r3, r3
    3db2:	2289      	movs	r2, #137	; 0x89
    3db4:	4915      	ldr	r1, [pc, #84]	; (3e0c <i2c_m_async_init+0x70>)
    3db6:	4618      	mov	r0, r3
    3db8:	4b15      	ldr	r3, [pc, #84]	; (3e10 <i2c_m_async_init+0x74>)
    3dba:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    3dbc:	687b      	ldr	r3, [r7, #4]
    3dbe:	6839      	ldr	r1, [r7, #0]
    3dc0:	4618      	mov	r0, r3
    3dc2:	4b14      	ldr	r3, [pc, #80]	; (3e14 <i2c_m_async_init+0x78>)
    3dc4:	4798      	blx	r3
    3dc6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    3dc8:	68fb      	ldr	r3, [r7, #12]
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d001      	beq.n	3dd2 <i2c_m_async_init+0x36>
		return init_status;
    3dce:	68fb      	ldr	r3, [r7, #12]
    3dd0:	e018      	b.n	3e04 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    3dd2:	687b      	ldr	r3, [r7, #4]
    3dd4:	4a10      	ldr	r2, [pc, #64]	; (3e18 <i2c_m_async_init+0x7c>)
    3dd6:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    3dd8:	687b      	ldr	r3, [r7, #4]
    3dda:	4a10      	ldr	r2, [pc, #64]	; (3e1c <i2c_m_async_init+0x80>)
    3ddc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	4a0f      	ldr	r2, [pc, #60]	; (3e20 <i2c_m_async_init+0x84>)
    3de2:	2101      	movs	r1, #1
    3de4:	4618      	mov	r0, r3
    3de6:	4b0f      	ldr	r3, [pc, #60]	; (3e24 <i2c_m_async_init+0x88>)
    3de8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	4a0e      	ldr	r2, [pc, #56]	; (3e28 <i2c_m_async_init+0x8c>)
    3dee:	2102      	movs	r1, #2
    3df0:	4618      	mov	r0, r3
    3df2:	4b0c      	ldr	r3, [pc, #48]	; (3e24 <i2c_m_async_init+0x88>)
    3df4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	4a0c      	ldr	r2, [pc, #48]	; (3e2c <i2c_m_async_init+0x90>)
    3dfa:	2100      	movs	r1, #0
    3dfc:	4618      	mov	r0, r3
    3dfe:	4b09      	ldr	r3, [pc, #36]	; (3e24 <i2c_m_async_init+0x88>)
    3e00:	4798      	blx	r3

	return ERR_NONE;
    3e02:	2300      	movs	r3, #0
}
    3e04:	4618      	mov	r0, r3
    3e06:	3710      	adds	r7, #16
    3e08:	46bd      	mov	sp, r7
    3e0a:	bd80      	pop	{r7, pc}
    3e0c:	000119bc 	.word	0x000119bc
    3e10:	00005545 	.word	0x00005545
    3e14:	000085c1 	.word	0x000085c1
    3e18:	00003cfd 	.word	0x00003cfd
    3e1c:	00003d4d 	.word	0x00003d4d
    3e20:	00003c61 	.word	0x00003c61
    3e24:	00008845 	.word	0x00008845
    3e28:	00003c93 	.word	0x00003c93
    3e2c:	00003cc5 	.word	0x00003cc5

00003e30 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    3e30:	b580      	push	{r7, lr}
    3e32:	b084      	sub	sp, #16
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	bf14      	ite	ne
    3e3e:	2301      	movne	r3, #1
    3e40:	2300      	moveq	r3, #0
    3e42:	b2db      	uxtb	r3, r3
    3e44:	22b9      	movs	r2, #185	; 0xb9
    3e46:	4911      	ldr	r1, [pc, #68]	; (3e8c <i2c_m_async_enable+0x5c>)
    3e48:	4618      	mov	r0, r3
    3e4a:	4b11      	ldr	r3, [pc, #68]	; (3e90 <i2c_m_async_enable+0x60>)
    3e4c:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    3e4e:	687b      	ldr	r3, [r7, #4]
    3e50:	4618      	mov	r0, r3
    3e52:	4b10      	ldr	r3, [pc, #64]	; (3e94 <i2c_m_async_enable+0x64>)
    3e54:	4798      	blx	r3
    3e56:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    3e58:	68fb      	ldr	r3, [r7, #12]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d111      	bne.n	3e82 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	2201      	movs	r2, #1
    3e62:	2101      	movs	r1, #1
    3e64:	4618      	mov	r0, r3
    3e66:	4b0c      	ldr	r3, [pc, #48]	; (3e98 <i2c_m_async_enable+0x68>)
    3e68:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	2201      	movs	r2, #1
    3e6e:	2102      	movs	r1, #2
    3e70:	4618      	mov	r0, r3
    3e72:	4b09      	ldr	r3, [pc, #36]	; (3e98 <i2c_m_async_enable+0x68>)
    3e74:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	2201      	movs	r2, #1
    3e7a:	2100      	movs	r1, #0
    3e7c:	4618      	mov	r0, r3
    3e7e:	4b06      	ldr	r3, [pc, #24]	; (3e98 <i2c_m_async_enable+0x68>)
    3e80:	4798      	blx	r3
	}
	return rc;
    3e82:	68fb      	ldr	r3, [r7, #12]
}
    3e84:	4618      	mov	r0, r3
    3e86:	3710      	adds	r7, #16
    3e88:	46bd      	mov	sp, r7
    3e8a:	bd80      	pop	{r7, pc}
    3e8c:	000119bc 	.word	0x000119bc
    3e90:	00005545 	.word	0x00005545
    3e94:	0000855d 	.word	0x0000855d
    3e98:	00008889 	.word	0x00008889

00003e9c <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    3e9c:	b480      	push	{r7}
    3e9e:	b085      	sub	sp, #20
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	60f8      	str	r0, [r7, #12]
    3ea4:	460b      	mov	r3, r1
    3ea6:	607a      	str	r2, [r7, #4]
    3ea8:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    3eaa:	897b      	ldrh	r3, [r7, #10]
    3eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3eb0:	b21a      	sxth	r2, r3
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	b21b      	sxth	r3, r3
    3eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3eba:	b21b      	sxth	r3, r3
    3ebc:	4313      	orrs	r3, r2
    3ebe:	b21b      	sxth	r3, r3
    3ec0:	b29a      	uxth	r2, r3
    3ec2:	68fb      	ldr	r3, [r7, #12]
    3ec4:	879a      	strh	r2, [r3, #60]	; 0x3c
    3ec6:	68fb      	ldr	r3, [r7, #12]
    3ec8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    3eca:	4618      	mov	r0, r3
    3ecc:	3714      	adds	r7, #20
    3ece:	46bd      	mov	sp, r7
    3ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed4:	4770      	bx	lr

00003ed6 <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    3ed6:	b480      	push	{r7}
    3ed8:	b085      	sub	sp, #20
    3eda:	af00      	add	r7, sp, #0
    3edc:	60f8      	str	r0, [r7, #12]
    3ede:	460b      	mov	r3, r1
    3ee0:	607a      	str	r2, [r7, #4]
    3ee2:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    3ee4:	7afb      	ldrb	r3, [r7, #11]
    3ee6:	2b01      	cmp	r3, #1
    3ee8:	d007      	beq.n	3efa <i2c_m_async_register_callback+0x24>
    3eea:	2b02      	cmp	r3, #2
    3eec:	d009      	beq.n	3f02 <i2c_m_async_register_callback+0x2c>
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d10b      	bne.n	3f0a <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    3ef2:	68fb      	ldr	r3, [r7, #12]
    3ef4:	687a      	ldr	r2, [r7, #4]
    3ef6:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    3ef8:	e00a      	b.n	3f10 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    3efa:	68fb      	ldr	r3, [r7, #12]
    3efc:	687a      	ldr	r2, [r7, #4]
    3efe:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    3f00:	e006      	b.n	3f10 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    3f02:	68fb      	ldr	r3, [r7, #12]
    3f04:	687a      	ldr	r2, [r7, #4]
    3f06:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    3f08:	e002      	b.n	3f10 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    3f0a:	f06f 030c 	mvn.w	r3, #12
    3f0e:	e000      	b.n	3f12 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    3f10:	2300      	movs	r3, #0
}
    3f12:	4618      	mov	r0, r3
    3f14:	3714      	adds	r7, #20
    3f16:	46bd      	mov	sp, r7
    3f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1c:	4770      	bx	lr

00003f1e <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    3f1e:	b480      	push	{r7}
    3f20:	b083      	sub	sp, #12
    3f22:	af00      	add	r7, sp, #0
    3f24:	6078      	str	r0, [r7, #4]
    3f26:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    3f2e:	683b      	ldr	r3, [r7, #0]
    3f30:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3f32:	2300      	movs	r3, #0
}
    3f34:	4618      	mov	r0, r3
    3f36:	370c      	adds	r7, #12
    3f38:	46bd      	mov	sp, r7
    3f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f3e:	4770      	bx	lr

00003f40 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b084      	sub	sp, #16
    3f44:	af00      	add	r7, sp, #0
    3f46:	60f8      	str	r0, [r7, #12]
    3f48:	60b9      	str	r1, [r7, #8]
    3f4a:	4613      	mov	r3, r2
    3f4c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    3f4e:	68fb      	ldr	r3, [r7, #12]
    3f50:	2b00      	cmp	r3, #0
    3f52:	d004      	beq.n	3f5e <io_write+0x1e>
    3f54:	68bb      	ldr	r3, [r7, #8]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d001      	beq.n	3f5e <io_write+0x1e>
    3f5a:	2301      	movs	r3, #1
    3f5c:	e000      	b.n	3f60 <io_write+0x20>
    3f5e:	2300      	movs	r3, #0
    3f60:	f003 0301 	and.w	r3, r3, #1
    3f64:	b2db      	uxtb	r3, r3
    3f66:	2234      	movs	r2, #52	; 0x34
    3f68:	4907      	ldr	r1, [pc, #28]	; (3f88 <io_write+0x48>)
    3f6a:	4618      	mov	r0, r3
    3f6c:	4b07      	ldr	r3, [pc, #28]	; (3f8c <io_write+0x4c>)
    3f6e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    3f70:	68fb      	ldr	r3, [r7, #12]
    3f72:	681b      	ldr	r3, [r3, #0]
    3f74:	88fa      	ldrh	r2, [r7, #6]
    3f76:	68b9      	ldr	r1, [r7, #8]
    3f78:	68f8      	ldr	r0, [r7, #12]
    3f7a:	4798      	blx	r3
    3f7c:	4603      	mov	r3, r0
}
    3f7e:	4618      	mov	r0, r3
    3f80:	3710      	adds	r7, #16
    3f82:	46bd      	mov	sp, r7
    3f84:	bd80      	pop	{r7, pc}
    3f86:	bf00      	nop
    3f88:	000119dc 	.word	0x000119dc
    3f8c:	00005545 	.word	0x00005545

00003f90 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    3f90:	b580      	push	{r7, lr}
    3f92:	b084      	sub	sp, #16
    3f94:	af00      	add	r7, sp, #0
    3f96:	60f8      	str	r0, [r7, #12]
    3f98:	60b9      	str	r1, [r7, #8]
    3f9a:	4613      	mov	r3, r2
    3f9c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d004      	beq.n	3fae <io_read+0x1e>
    3fa4:	68bb      	ldr	r3, [r7, #8]
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	d001      	beq.n	3fae <io_read+0x1e>
    3faa:	2301      	movs	r3, #1
    3fac:	e000      	b.n	3fb0 <io_read+0x20>
    3fae:	2300      	movs	r3, #0
    3fb0:	f003 0301 	and.w	r3, r3, #1
    3fb4:	b2db      	uxtb	r3, r3
    3fb6:	223d      	movs	r2, #61	; 0x3d
    3fb8:	4907      	ldr	r1, [pc, #28]	; (3fd8 <io_read+0x48>)
    3fba:	4618      	mov	r0, r3
    3fbc:	4b07      	ldr	r3, [pc, #28]	; (3fdc <io_read+0x4c>)
    3fbe:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    3fc0:	68fb      	ldr	r3, [r7, #12]
    3fc2:	685b      	ldr	r3, [r3, #4]
    3fc4:	88fa      	ldrh	r2, [r7, #6]
    3fc6:	68b9      	ldr	r1, [r7, #8]
    3fc8:	68f8      	ldr	r0, [r7, #12]
    3fca:	4798      	blx	r3
    3fcc:	4603      	mov	r3, r0
}
    3fce:	4618      	mov	r0, r3
    3fd0:	3710      	adds	r7, #16
    3fd2:	46bd      	mov	sp, r7
    3fd4:	bd80      	pop	{r7, pc}
    3fd6:	bf00      	nop
    3fd8:	000119dc 	.word	0x000119dc
    3fdc:	00005545 	.word	0x00005545

00003fe0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	b084      	sub	sp, #16
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	60f8      	str	r0, [r7, #12]
    3fe8:	60b9      	str	r1, [r7, #8]
    3fea:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3fec:	68fb      	ldr	r3, [r7, #12]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d004      	beq.n	3ffc <pwm_init+0x1c>
    3ff2:	68bb      	ldr	r3, [r7, #8]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d001      	beq.n	3ffc <pwm_init+0x1c>
    3ff8:	2301      	movs	r3, #1
    3ffa:	e000      	b.n	3ffe <pwm_init+0x1e>
    3ffc:	2300      	movs	r3, #0
    3ffe:	f003 0301 	and.w	r3, r3, #1
    4002:	b2db      	uxtb	r3, r3
    4004:	2233      	movs	r2, #51	; 0x33
    4006:	490a      	ldr	r1, [pc, #40]	; (4030 <pwm_init+0x50>)
    4008:	4618      	mov	r0, r3
    400a:	4b0a      	ldr	r3, [pc, #40]	; (4034 <pwm_init+0x54>)
    400c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	68b9      	ldr	r1, [r7, #8]
    4012:	4618      	mov	r0, r3
    4014:	4b08      	ldr	r3, [pc, #32]	; (4038 <pwm_init+0x58>)
    4016:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4018:	68fb      	ldr	r3, [r7, #12]
    401a:	4a08      	ldr	r2, [pc, #32]	; (403c <pwm_init+0x5c>)
    401c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    401e:	68fb      	ldr	r3, [r7, #12]
    4020:	4a07      	ldr	r2, [pc, #28]	; (4040 <pwm_init+0x60>)
    4022:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4024:	2300      	movs	r3, #0
}
    4026:	4618      	mov	r0, r3
    4028:	3710      	adds	r7, #16
    402a:	46bd      	mov	sp, r7
    402c:	bd80      	pop	{r7, pc}
    402e:	bf00      	nop
    4030:	000119f0 	.word	0x000119f0
    4034:	00005545 	.word	0x00005545
    4038:	00009ae5 	.word	0x00009ae5
    403c:	00004099 	.word	0x00004099
    4040:	000040bd 	.word	0x000040bd

00004044 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    4044:	b580      	push	{r7, lr}
    4046:	b082      	sub	sp, #8
    4048:	af00      	add	r7, sp, #0
    404a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	2b00      	cmp	r3, #0
    4050:	bf14      	ite	ne
    4052:	2301      	movne	r3, #1
    4054:	2300      	moveq	r3, #0
    4056:	b2db      	uxtb	r3, r3
    4058:	224a      	movs	r2, #74	; 0x4a
    405a:	490b      	ldr	r1, [pc, #44]	; (4088 <pwm_enable+0x44>)
    405c:	4618      	mov	r0, r3
    405e:	4b0b      	ldr	r3, [pc, #44]	; (408c <pwm_enable+0x48>)
    4060:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	4618      	mov	r0, r3
    4066:	4b0a      	ldr	r3, [pc, #40]	; (4090 <pwm_enable+0x4c>)
    4068:	4798      	blx	r3
    406a:	4603      	mov	r3, r0
    406c:	2b00      	cmp	r3, #0
    406e:	d002      	beq.n	4076 <pwm_enable+0x32>
		return ERR_DENIED;
    4070:	f06f 0310 	mvn.w	r3, #16
    4074:	e004      	b.n	4080 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    4076:	687b      	ldr	r3, [r7, #4]
    4078:	4618      	mov	r0, r3
    407a:	4b06      	ldr	r3, [pc, #24]	; (4094 <pwm_enable+0x50>)
    407c:	4798      	blx	r3

	return ERR_NONE;
    407e:	2300      	movs	r3, #0
}
    4080:	4618      	mov	r0, r3
    4082:	3708      	adds	r7, #8
    4084:	46bd      	mov	sp, r7
    4086:	bd80      	pop	{r7, pc}
    4088:	000119f0 	.word	0x000119f0
    408c:	00005545 	.word	0x00005545
    4090:	00009d81 	.word	0x00009d81
    4094:	00009d21 	.word	0x00009d21

00004098 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4098:	b580      	push	{r7, lr}
    409a:	b084      	sub	sp, #16
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    40a4:	68fb      	ldr	r3, [r7, #12]
    40a6:	695b      	ldr	r3, [r3, #20]
    40a8:	2b00      	cmp	r3, #0
    40aa:	d003      	beq.n	40b4 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    40ac:	68fb      	ldr	r3, [r7, #12]
    40ae:	695b      	ldr	r3, [r3, #20]
    40b0:	68f8      	ldr	r0, [r7, #12]
    40b2:	4798      	blx	r3
	}
}
    40b4:	bf00      	nop
    40b6:	3710      	adds	r7, #16
    40b8:	46bd      	mov	sp, r7
    40ba:	bd80      	pop	{r7, pc}

000040bc <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    40bc:	b580      	push	{r7, lr}
    40be:	b084      	sub	sp, #16
    40c0:	af00      	add	r7, sp, #0
    40c2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    40c4:	687b      	ldr	r3, [r7, #4]
    40c6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    40c8:	68fb      	ldr	r3, [r7, #12]
    40ca:	699b      	ldr	r3, [r3, #24]
    40cc:	2b00      	cmp	r3, #0
    40ce:	d003      	beq.n	40d8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    40d0:	68fb      	ldr	r3, [r7, #12]
    40d2:	699b      	ldr	r3, [r3, #24]
    40d4:	68f8      	ldr	r0, [r7, #12]
    40d6:	4798      	blx	r3
	}
}
    40d8:	bf00      	nop
    40da:	3710      	adds	r7, #16
    40dc:	46bd      	mov	sp, r7
    40de:	bd80      	pop	{r7, pc}

000040e0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    40e0:	b580      	push	{r7, lr}
    40e2:	b082      	sub	sp, #8
    40e4:	af00      	add	r7, sp, #0
    40e6:	6078      	str	r0, [r7, #4]
    40e8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	2b00      	cmp	r3, #0
    40ee:	d004      	beq.n	40fa <qspi_sync_init+0x1a>
    40f0:	683b      	ldr	r3, [r7, #0]
    40f2:	2b00      	cmp	r3, #0
    40f4:	d001      	beq.n	40fa <qspi_sync_init+0x1a>
    40f6:	2301      	movs	r3, #1
    40f8:	e000      	b.n	40fc <qspi_sync_init+0x1c>
    40fa:	2300      	movs	r3, #0
    40fc:	f003 0301 	and.w	r3, r3, #1
    4100:	b2db      	uxtb	r3, r3
    4102:	2231      	movs	r2, #49	; 0x31
    4104:	4906      	ldr	r1, [pc, #24]	; (4120 <qspi_sync_init+0x40>)
    4106:	4618      	mov	r0, r3
    4108:	4b06      	ldr	r3, [pc, #24]	; (4124 <qspi_sync_init+0x44>)
    410a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	6839      	ldr	r1, [r7, #0]
    4110:	4618      	mov	r0, r3
    4112:	4b05      	ldr	r3, [pc, #20]	; (4128 <qspi_sync_init+0x48>)
    4114:	4798      	blx	r3
    4116:	4603      	mov	r3, r0
}
    4118:	4618      	mov	r0, r3
    411a:	3708      	adds	r7, #8
    411c:	46bd      	mov	sp, r7
    411e:	bd80      	pop	{r7, pc}
    4120:	00011a08 	.word	0x00011a08
    4124:	00005545 	.word	0x00005545
    4128:	00007349 	.word	0x00007349

0000412c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    412c:	b580      	push	{r7, lr}
    412e:	b082      	sub	sp, #8
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	2b00      	cmp	r3, #0
    4138:	bf14      	ite	ne
    413a:	2301      	movne	r3, #1
    413c:	2300      	moveq	r3, #0
    413e:	b2db      	uxtb	r3, r3
    4140:	223f      	movs	r2, #63	; 0x3f
    4142:	4906      	ldr	r1, [pc, #24]	; (415c <qspi_sync_enable+0x30>)
    4144:	4618      	mov	r0, r3
    4146:	4b06      	ldr	r3, [pc, #24]	; (4160 <qspi_sync_enable+0x34>)
    4148:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	4618      	mov	r0, r3
    414e:	4b05      	ldr	r3, [pc, #20]	; (4164 <qspi_sync_enable+0x38>)
    4150:	4798      	blx	r3
    4152:	4603      	mov	r3, r0
}
    4154:	4618      	mov	r0, r3
    4156:	3708      	adds	r7, #8
    4158:	46bd      	mov	sp, r7
    415a:	bd80      	pop	{r7, pc}
    415c:	00011a08 	.word	0x00011a08
    4160:	00005545 	.word	0x00005545
    4164:	000073bd 	.word	0x000073bd

00004168 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    4168:	b580      	push	{r7, lr}
    416a:	b082      	sub	sp, #8
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	2b00      	cmp	r3, #0
    4174:	bf14      	ite	ne
    4176:	2301      	movne	r3, #1
    4178:	2300      	moveq	r3, #0
    417a:	b2db      	uxtb	r3, r3
    417c:	2246      	movs	r2, #70	; 0x46
    417e:	4906      	ldr	r1, [pc, #24]	; (4198 <qspi_sync_disable+0x30>)
    4180:	4618      	mov	r0, r3
    4182:	4b06      	ldr	r3, [pc, #24]	; (419c <qspi_sync_disable+0x34>)
    4184:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    4186:	687b      	ldr	r3, [r7, #4]
    4188:	4618      	mov	r0, r3
    418a:	4b05      	ldr	r3, [pc, #20]	; (41a0 <qspi_sync_disable+0x38>)
    418c:	4798      	blx	r3
    418e:	4603      	mov	r3, r0
}
    4190:	4618      	mov	r0, r3
    4192:	3708      	adds	r7, #8
    4194:	46bd      	mov	sp, r7
    4196:	bd80      	pop	{r7, pc}
    4198:	00011a08 	.word	0x00011a08
    419c:	00005545 	.word	0x00005545
    41a0:	000073e1 	.word	0x000073e1

000041a4 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    41a4:	b580      	push	{r7, lr}
    41a6:	b082      	sub	sp, #8
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
    41ac:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d004      	beq.n	41be <qspi_sync_serial_run_command+0x1a>
    41b4:	683b      	ldr	r3, [r7, #0]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d001      	beq.n	41be <qspi_sync_serial_run_command+0x1a>
    41ba:	2301      	movs	r3, #1
    41bc:	e000      	b.n	41c0 <qspi_sync_serial_run_command+0x1c>
    41be:	2300      	movs	r3, #0
    41c0:	f003 0301 	and.w	r3, r3, #1
    41c4:	b2db      	uxtb	r3, r3
    41c6:	224d      	movs	r2, #77	; 0x4d
    41c8:	4906      	ldr	r1, [pc, #24]	; (41e4 <qspi_sync_serial_run_command+0x40>)
    41ca:	4618      	mov	r0, r3
    41cc:	4b06      	ldr	r3, [pc, #24]	; (41e8 <qspi_sync_serial_run_command+0x44>)
    41ce:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	6839      	ldr	r1, [r7, #0]
    41d4:	4618      	mov	r0, r3
    41d6:	4b05      	ldr	r3, [pc, #20]	; (41ec <qspi_sync_serial_run_command+0x48>)
    41d8:	4798      	blx	r3
    41da:	4603      	mov	r3, r0
}
    41dc:	4618      	mov	r0, r3
    41de:	3708      	adds	r7, #8
    41e0:	46bd      	mov	sp, r7
    41e2:	bd80      	pop	{r7, pc}
    41e4:	00011a08 	.word	0x00011a08
    41e8:	00005545 	.word	0x00005545
    41ec:	0000752d 	.word	0x0000752d

000041f0 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    41f0:	b580      	push	{r7, lr}
    41f2:	b084      	sub	sp, #16
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	3b04      	subs	r3, #4
    41fc:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	791b      	ldrb	r3, [r3, #4]
    4202:	2b01      	cmp	r3, #1
    4204:	d80e      	bhi.n	4224 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4206:	68fb      	ldr	r3, [r7, #12]
    4208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    420a:	68fb      	ldr	r3, [r7, #12]
    420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    420e:	1c58      	adds	r0, r3, #1
    4210:	68f9      	ldr	r1, [r7, #12]
    4212:	6448      	str	r0, [r1, #68]	; 0x44
    4214:	4413      	add	r3, r2
    4216:	781b      	ldrb	r3, [r3, #0]
    4218:	b29b      	uxth	r3, r3
    421a:	4619      	mov	r1, r3
    421c:	6878      	ldr	r0, [r7, #4]
    421e:	4b11      	ldr	r3, [pc, #68]	; (4264 <_spi_dev_tx+0x74>)
    4220:	4798      	blx	r3
    4222:	e00d      	b.n	4240 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4224:	68fb      	ldr	r3, [r7, #12]
    4226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    422c:	1c58      	adds	r0, r3, #1
    422e:	68f9      	ldr	r1, [r7, #12]
    4230:	6448      	str	r0, [r1, #68]	; 0x44
    4232:	005b      	lsls	r3, r3, #1
    4234:	4413      	add	r3, r2
    4236:	881b      	ldrh	r3, [r3, #0]
    4238:	4619      	mov	r1, r3
    423a:	6878      	ldr	r0, [r7, #4]
    423c:	4b09      	ldr	r3, [pc, #36]	; (4264 <_spi_dev_tx+0x74>)
    423e:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    4240:	68fb      	ldr	r3, [r7, #12]
    4242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4244:	68fb      	ldr	r3, [r7, #12]
    4246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4248:	429a      	cmp	r2, r3
    424a:	d107      	bne.n	425c <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    424c:	2100      	movs	r1, #0
    424e:	6878      	ldr	r0, [r7, #4]
    4250:	4b05      	ldr	r3, [pc, #20]	; (4268 <_spi_dev_tx+0x78>)
    4252:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4254:	2101      	movs	r1, #1
    4256:	6878      	ldr	r0, [r7, #4]
    4258:	4b04      	ldr	r3, [pc, #16]	; (426c <_spi_dev_tx+0x7c>)
    425a:	4798      	blx	r3
	}
}
    425c:	bf00      	nop
    425e:	3710      	adds	r7, #16
    4260:	46bd      	mov	sp, r7
    4262:	bd80      	pop	{r7, pc}
    4264:	00009395 	.word	0x00009395
    4268:	00009259 	.word	0x00009259
    426c:	0000932d 	.word	0x0000932d

00004270 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    4270:	b590      	push	{r4, r7, lr}
    4272:	b085      	sub	sp, #20
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	3b04      	subs	r3, #4
    427c:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    427e:	68fb      	ldr	r3, [r7, #12]
    4280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4282:	2b00      	cmp	r3, #0
    4284:	d021      	beq.n	42ca <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	791b      	ldrb	r3, [r3, #4]
    428a:	2b01      	cmp	r3, #1
    428c:	d80e      	bhi.n	42ac <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    428e:	68fb      	ldr	r3, [r7, #12]
    4290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4292:	68fb      	ldr	r3, [r7, #12]
    4294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4296:	1c58      	adds	r0, r3, #1
    4298:	68f9      	ldr	r1, [r7, #12]
    429a:	6448      	str	r0, [r1, #68]	; 0x44
    429c:	18d4      	adds	r4, r2, r3
    429e:	6878      	ldr	r0, [r7, #4]
    42a0:	4b2e      	ldr	r3, [pc, #184]	; (435c <_spi_dev_rx+0xec>)
    42a2:	4798      	blx	r3
    42a4:	4603      	mov	r3, r0
    42a6:	b2db      	uxtb	r3, r3
    42a8:	7023      	strb	r3, [r4, #0]
    42aa:	e016      	b.n	42da <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    42ac:	68fb      	ldr	r3, [r7, #12]
    42ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    42b0:	68fb      	ldr	r3, [r7, #12]
    42b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    42b4:	1c58      	adds	r0, r3, #1
    42b6:	68f9      	ldr	r1, [r7, #12]
    42b8:	6448      	str	r0, [r1, #68]	; 0x44
    42ba:	005b      	lsls	r3, r3, #1
    42bc:	18d4      	adds	r4, r2, r3
    42be:	6878      	ldr	r0, [r7, #4]
    42c0:	4b26      	ldr	r3, [pc, #152]	; (435c <_spi_dev_rx+0xec>)
    42c2:	4798      	blx	r3
    42c4:	4603      	mov	r3, r0
    42c6:	8023      	strh	r3, [r4, #0]
    42c8:	e007      	b.n	42da <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    42ca:	6878      	ldr	r0, [r7, #4]
    42cc:	4b23      	ldr	r3, [pc, #140]	; (435c <_spi_dev_rx+0xec>)
    42ce:	4798      	blx	r3
		spi->xfercnt++;
    42d0:	68fb      	ldr	r3, [r7, #12]
    42d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    42d4:	1c5a      	adds	r2, r3, #1
    42d6:	68fb      	ldr	r3, [r7, #12]
    42d8:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    42da:	68fb      	ldr	r3, [r7, #12]
    42dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    42de:	68fb      	ldr	r3, [r7, #12]
    42e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42e2:	429a      	cmp	r2, r3
    42e4:	d226      	bcs.n	4334 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    42e6:	68fb      	ldr	r3, [r7, #12]
    42e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42ea:	2b00      	cmp	r3, #0
    42ec:	d01b      	beq.n	4326 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	791b      	ldrb	r3, [r3, #4]
    42f2:	2b01      	cmp	r3, #1
    42f4:	d80b      	bhi.n	430e <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    42f6:	68fb      	ldr	r3, [r7, #12]
    42f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    42fa:	68fb      	ldr	r3, [r7, #12]
    42fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    42fe:	4413      	add	r3, r2
    4300:	781b      	ldrb	r3, [r3, #0]
    4302:	b29b      	uxth	r3, r3
    4304:	4619      	mov	r1, r3
    4306:	6878      	ldr	r0, [r7, #4]
    4308:	4b15      	ldr	r3, [pc, #84]	; (4360 <_spi_dev_rx+0xf0>)
    430a:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    430c:	e022      	b.n	4354 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    430e:	68fb      	ldr	r3, [r7, #12]
    4310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4316:	005b      	lsls	r3, r3, #1
    4318:	4413      	add	r3, r2
    431a:	881b      	ldrh	r3, [r3, #0]
    431c:	4619      	mov	r1, r3
    431e:	6878      	ldr	r0, [r7, #4]
    4320:	4b0f      	ldr	r3, [pc, #60]	; (4360 <_spi_dev_rx+0xf0>)
    4322:	4798      	blx	r3
}
    4324:	e016      	b.n	4354 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	88db      	ldrh	r3, [r3, #6]
    432a:	4619      	mov	r1, r3
    432c:	6878      	ldr	r0, [r7, #4]
    432e:	4b0c      	ldr	r3, [pc, #48]	; (4360 <_spi_dev_rx+0xf0>)
    4330:	4798      	blx	r3
}
    4332:	e00f      	b.n	4354 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    4334:	2100      	movs	r1, #0
    4336:	6878      	ldr	r0, [r7, #4]
    4338:	4b0a      	ldr	r3, [pc, #40]	; (4364 <_spi_dev_rx+0xf4>)
    433a:	4798      	blx	r3
		spi->stat = 0;
    433c:	68fb      	ldr	r3, [r7, #12]
    433e:	2200      	movs	r2, #0
    4340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    4344:	68fb      	ldr	r3, [r7, #12]
    4346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4348:	2b00      	cmp	r3, #0
    434a:	d003      	beq.n	4354 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4350:	68f8      	ldr	r0, [r7, #12]
    4352:	4798      	blx	r3
}
    4354:	bf00      	nop
    4356:	3714      	adds	r7, #20
    4358:	46bd      	mov	sp, r7
    435a:	bd90      	pop	{r4, r7, pc}
    435c:	000093ed 	.word	0x000093ed
    4360:	00009395 	.word	0x00009395
    4364:	000092bd 	.word	0x000092bd

00004368 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    4368:	b580      	push	{r7, lr}
    436a:	b084      	sub	sp, #16
    436c:	af00      	add	r7, sp, #0
    436e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	3b04      	subs	r3, #4
    4374:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    437e:	429a      	cmp	r2, r3
    4380:	d30f      	bcc.n	43a2 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    4382:	2100      	movs	r1, #0
    4384:	6878      	ldr	r0, [r7, #4]
    4386:	4b09      	ldr	r3, [pc, #36]	; (43ac <_spi_dev_complete+0x44>)
    4388:	4798      	blx	r3
		spi->stat = 0;
    438a:	68fb      	ldr	r3, [r7, #12]
    438c:	2200      	movs	r2, #0
    438e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4396:	2b00      	cmp	r3, #0
    4398:	d003      	beq.n	43a2 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    439e:	68f8      	ldr	r0, [r7, #12]
    43a0:	4798      	blx	r3
		}
	}
}
    43a2:	bf00      	nop
    43a4:	3710      	adds	r7, #16
    43a6:	46bd      	mov	sp, r7
    43a8:	bd80      	pop	{r7, pc}
    43aa:	bf00      	nop
    43ac:	0000932d 	.word	0x0000932d

000043b0 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    43b0:	b580      	push	{r7, lr}
    43b2:	b084      	sub	sp, #16
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
    43b8:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    43ba:	687b      	ldr	r3, [r7, #4]
    43bc:	3b04      	subs	r3, #4
    43be:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    43c0:	2100      	movs	r1, #0
    43c2:	6878      	ldr	r0, [r7, #4]
    43c4:	4b0d      	ldr	r3, [pc, #52]	; (43fc <_spi_dev_error+0x4c>)
    43c6:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    43c8:	2100      	movs	r1, #0
    43ca:	6878      	ldr	r0, [r7, #4]
    43cc:	4b0c      	ldr	r3, [pc, #48]	; (4400 <_spi_dev_error+0x50>)
    43ce:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    43d0:	2100      	movs	r1, #0
    43d2:	6878      	ldr	r0, [r7, #4]
    43d4:	4b0b      	ldr	r3, [pc, #44]	; (4404 <_spi_dev_error+0x54>)
    43d6:	4798      	blx	r3
	spi->stat = 0;
    43d8:	68fb      	ldr	r3, [r7, #12]
    43da:	2200      	movs	r2, #0
    43dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    43e4:	2b00      	cmp	r3, #0
    43e6:	d004      	beq.n	43f2 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    43ec:	6839      	ldr	r1, [r7, #0]
    43ee:	68f8      	ldr	r0, [r7, #12]
    43f0:	4798      	blx	r3
	}
}
    43f2:	bf00      	nop
    43f4:	3710      	adds	r7, #16
    43f6:	46bd      	mov	sp, r7
    43f8:	bd80      	pop	{r7, pc}
    43fa:	bf00      	nop
    43fc:	00009259 	.word	0x00009259
    4400:	000092bd 	.word	0x000092bd
    4404:	0000932d 	.word	0x0000932d

00004408 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    4408:	b580      	push	{r7, lr}
    440a:	b084      	sub	sp, #16
    440c:	af00      	add	r7, sp, #0
    440e:	6078      	str	r0, [r7, #4]
    4410:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    4412:	2300      	movs	r3, #0
    4414:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	2b00      	cmp	r3, #0
    441a:	d004      	beq.n	4426 <spi_m_async_init+0x1e>
    441c:	683b      	ldr	r3, [r7, #0]
    441e:	2b00      	cmp	r3, #0
    4420:	d001      	beq.n	4426 <spi_m_async_init+0x1e>
    4422:	2301      	movs	r3, #1
    4424:	e000      	b.n	4428 <spi_m_async_init+0x20>
    4426:	2300      	movs	r3, #0
    4428:	f003 0301 	and.w	r3, r3, #1
    442c:	b2db      	uxtb	r3, r3
    442e:	22a5      	movs	r2, #165	; 0xa5
    4430:	491c      	ldr	r1, [pc, #112]	; (44a4 <spi_m_async_init+0x9c>)
    4432:	4618      	mov	r0, r3
    4434:	4b1c      	ldr	r3, [pc, #112]	; (44a8 <spi_m_async_init+0xa0>)
    4436:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	683a      	ldr	r2, [r7, #0]
    443c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    443e:	687b      	ldr	r3, [r7, #4]
    4440:	3304      	adds	r3, #4
    4442:	6839      	ldr	r1, [r7, #0]
    4444:	4618      	mov	r0, r3
    4446:	4b19      	ldr	r3, [pc, #100]	; (44ac <spi_m_async_init+0xa4>)
    4448:	4798      	blx	r3
    444a:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	2b00      	cmp	r3, #0
    4450:	db23      	blt.n	449a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	3304      	adds	r3, #4
    4456:	4a16      	ldr	r2, [pc, #88]	; (44b0 <spi_m_async_init+0xa8>)
    4458:	2100      	movs	r1, #0
    445a:	4618      	mov	r0, r3
    445c:	4b15      	ldr	r3, [pc, #84]	; (44b4 <spi_m_async_init+0xac>)
    445e:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	3304      	adds	r3, #4
    4464:	4a14      	ldr	r2, [pc, #80]	; (44b8 <spi_m_async_init+0xb0>)
    4466:	2101      	movs	r1, #1
    4468:	4618      	mov	r0, r3
    446a:	4b12      	ldr	r3, [pc, #72]	; (44b4 <spi_m_async_init+0xac>)
    446c:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    446e:	687b      	ldr	r3, [r7, #4]
    4470:	3304      	adds	r3, #4
    4472:	4a12      	ldr	r2, [pc, #72]	; (44bc <spi_m_async_init+0xb4>)
    4474:	2102      	movs	r1, #2
    4476:	4618      	mov	r0, r3
    4478:	4b0e      	ldr	r3, [pc, #56]	; (44b4 <spi_m_async_init+0xac>)
    447a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	3304      	adds	r3, #4
    4480:	4a0f      	ldr	r2, [pc, #60]	; (44c0 <spi_m_async_init+0xb8>)
    4482:	2103      	movs	r1, #3
    4484:	4618      	mov	r0, r3
    4486:	4b0b      	ldr	r3, [pc, #44]	; (44b4 <spi_m_async_init+0xac>)
    4488:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	4a0d      	ldr	r2, [pc, #52]	; (44c4 <spi_m_async_init+0xbc>)
    448e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	4a0d      	ldr	r2, [pc, #52]	; (44c8 <spi_m_async_init+0xc0>)
    4494:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    4496:	2300      	movs	r3, #0
    4498:	e000      	b.n	449c <spi_m_async_init+0x94>
		return rc;
    449a:	68fb      	ldr	r3, [r7, #12]
}
    449c:	4618      	mov	r0, r3
    449e:	3710      	adds	r7, #16
    44a0:	46bd      	mov	sp, r7
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00011a24 	.word	0x00011a24
    44a8:	00005545 	.word	0x00005545
    44ac:	00008f59 	.word	0x00008f59
    44b0:	000041f1 	.word	0x000041f1
    44b4:	0000943d 	.word	0x0000943d
    44b8:	00004271 	.word	0x00004271
    44bc:	00004369 	.word	0x00004369
    44c0:	000043b1 	.word	0x000043b1
    44c4:	000044cd 	.word	0x000044cd
    44c8:	0000454d 	.word	0x0000454d

000044cc <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    44cc:	b580      	push	{r7, lr}
    44ce:	b086      	sub	sp, #24
    44d0:	af00      	add	r7, sp, #0
    44d2:	60f8      	str	r0, [r7, #12]
    44d4:	60b9      	str	r1, [r7, #8]
    44d6:	4613      	mov	r3, r2
    44d8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    44da:	68fb      	ldr	r3, [r7, #12]
    44dc:	2b00      	cmp	r3, #0
    44de:	bf14      	ite	ne
    44e0:	2301      	movne	r3, #1
    44e2:	2300      	moveq	r3, #0
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f240 1205 	movw	r2, #261	; 0x105
    44ea:	4914      	ldr	r1, [pc, #80]	; (453c <_spi_m_async_io_read+0x70>)
    44ec:	4618      	mov	r0, r3
    44ee:	4b14      	ldr	r3, [pc, #80]	; (4540 <_spi_m_async_io_read+0x74>)
    44f0:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    44f2:	68fb      	ldr	r3, [r7, #12]
    44f4:	3b24      	subs	r3, #36	; 0x24
    44f6:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    44f8:	697b      	ldr	r3, [r7, #20]
    44fa:	68ba      	ldr	r2, [r7, #8]
    44fc:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    44fe:	697b      	ldr	r3, [r7, #20]
    4500:	2200      	movs	r2, #0
    4502:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4504:	88fa      	ldrh	r2, [r7, #6]
    4506:	697b      	ldr	r3, [r7, #20]
    4508:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    450a:	697b      	ldr	r3, [r7, #20]
    450c:	2200      	movs	r2, #0
    450e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4510:	697b      	ldr	r3, [r7, #20]
    4512:	2210      	movs	r2, #16
    4514:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4518:	697b      	ldr	r3, [r7, #20]
    451a:	3304      	adds	r3, #4
    451c:	2101      	movs	r1, #1
    451e:	4618      	mov	r0, r3
    4520:	4b08      	ldr	r3, [pc, #32]	; (4544 <_spi_m_async_io_read+0x78>)
    4522:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4524:	697b      	ldr	r3, [r7, #20]
    4526:	3304      	adds	r3, #4
    4528:	f240 11ff 	movw	r1, #511	; 0x1ff
    452c:	4618      	mov	r0, r3
    452e:	4b06      	ldr	r3, [pc, #24]	; (4548 <_spi_m_async_io_read+0x7c>)
    4530:	4798      	blx	r3

	return ERR_NONE;
    4532:	2300      	movs	r3, #0
}
    4534:	4618      	mov	r0, r3
    4536:	3718      	adds	r7, #24
    4538:	46bd      	mov	sp, r7
    453a:	bd80      	pop	{r7, pc}
    453c:	00011a24 	.word	0x00011a24
    4540:	00005545 	.word	0x00005545
    4544:	000092bd 	.word	0x000092bd
    4548:	00009395 	.word	0x00009395

0000454c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    454c:	b580      	push	{r7, lr}
    454e:	b086      	sub	sp, #24
    4550:	af00      	add	r7, sp, #0
    4552:	60f8      	str	r0, [r7, #12]
    4554:	60b9      	str	r1, [r7, #8]
    4556:	4613      	mov	r3, r2
    4558:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    455a:	68fb      	ldr	r3, [r7, #12]
    455c:	2b00      	cmp	r3, #0
    455e:	bf14      	ite	ne
    4560:	2301      	movne	r3, #1
    4562:	2300      	moveq	r3, #0
    4564:	b2db      	uxtb	r3, r3
    4566:	f240 1227 	movw	r2, #295	; 0x127
    456a:	4911      	ldr	r1, [pc, #68]	; (45b0 <_spi_m_async_io_write+0x64>)
    456c:	4618      	mov	r0, r3
    456e:	4b11      	ldr	r3, [pc, #68]	; (45b4 <_spi_m_async_io_write+0x68>)
    4570:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    4572:	68fb      	ldr	r3, [r7, #12]
    4574:	3b24      	subs	r3, #36	; 0x24
    4576:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    4578:	697b      	ldr	r3, [r7, #20]
    457a:	2200      	movs	r2, #0
    457c:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    457e:	697b      	ldr	r3, [r7, #20]
    4580:	68ba      	ldr	r2, [r7, #8]
    4582:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4584:	88fa      	ldrh	r2, [r7, #6]
    4586:	697b      	ldr	r3, [r7, #20]
    4588:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    458a:	697b      	ldr	r3, [r7, #20]
    458c:	2200      	movs	r2, #0
    458e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4590:	697b      	ldr	r3, [r7, #20]
    4592:	2210      	movs	r2, #16
    4594:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    4598:	697b      	ldr	r3, [r7, #20]
    459a:	3304      	adds	r3, #4
    459c:	2101      	movs	r1, #1
    459e:	4618      	mov	r0, r3
    45a0:	4b05      	ldr	r3, [pc, #20]	; (45b8 <_spi_m_async_io_write+0x6c>)
    45a2:	4798      	blx	r3

	return ERR_NONE;
    45a4:	2300      	movs	r3, #0
}
    45a6:	4618      	mov	r0, r3
    45a8:	3718      	adds	r7, #24
    45aa:	46bd      	mov	sp, r7
    45ac:	bd80      	pop	{r7, pc}
    45ae:	bf00      	nop
    45b0:	00011a24 	.word	0x00011a24
    45b4:	00005545 	.word	0x00005545
    45b8:	00009259 	.word	0x00009259

000045bc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    45bc:	b580      	push	{r7, lr}
    45be:	b084      	sub	sp, #16
    45c0:	af00      	add	r7, sp, #0
    45c2:	6078      	str	r0, [r7, #4]
    45c4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    45c6:	2300      	movs	r3, #0
    45c8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	2b00      	cmp	r3, #0
    45ce:	d004      	beq.n	45da <spi_m_sync_init+0x1e>
    45d0:	683b      	ldr	r3, [r7, #0]
    45d2:	2b00      	cmp	r3, #0
    45d4:	d001      	beq.n	45da <spi_m_sync_init+0x1e>
    45d6:	2301      	movs	r3, #1
    45d8:	e000      	b.n	45dc <spi_m_sync_init+0x20>
    45da:	2300      	movs	r3, #0
    45dc:	f003 0301 	and.w	r3, r3, #1
    45e0:	b2db      	uxtb	r3, r3
    45e2:	2240      	movs	r2, #64	; 0x40
    45e4:	4910      	ldr	r1, [pc, #64]	; (4628 <spi_m_sync_init+0x6c>)
    45e6:	4618      	mov	r0, r3
    45e8:	4b10      	ldr	r3, [pc, #64]	; (462c <spi_m_sync_init+0x70>)
    45ea:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	683a      	ldr	r2, [r7, #0]
    45f0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	3304      	adds	r3, #4
    45f6:	6839      	ldr	r1, [r7, #0]
    45f8:	4618      	mov	r0, r3
    45fa:	4b0d      	ldr	r3, [pc, #52]	; (4630 <spi_m_sync_init+0x74>)
    45fc:	4798      	blx	r3
    45fe:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	2b00      	cmp	r3, #0
    4604:	da01      	bge.n	460a <spi_m_sync_init+0x4e>
		return rc;
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	e00a      	b.n	4620 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4610:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	4a07      	ldr	r2, [pc, #28]	; (4634 <spi_m_sync_init+0x78>)
    4616:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	4a07      	ldr	r2, [pc, #28]	; (4638 <spi_m_sync_init+0x7c>)
    461c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    461e:	2300      	movs	r3, #0
}
    4620:	4618      	mov	r0, r3
    4622:	3710      	adds	r7, #16
    4624:	46bd      	mov	sp, r7
    4626:	bd80      	pop	{r7, pc}
    4628:	00011a44 	.word	0x00011a44
    462c:	00005545 	.word	0x00005545
    4630:	00008e4d 	.word	0x00008e4d
    4634:	0000463d 	.word	0x0000463d
    4638:	00004695 	.word	0x00004695

0000463c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    463c:	b580      	push	{r7, lr}
    463e:	b088      	sub	sp, #32
    4640:	af00      	add	r7, sp, #0
    4642:	60f8      	str	r0, [r7, #12]
    4644:	60b9      	str	r1, [r7, #8]
    4646:	4613      	mov	r3, r2
    4648:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    464a:	68fb      	ldr	r3, [r7, #12]
    464c:	2b00      	cmp	r3, #0
    464e:	bf14      	ite	ne
    4650:	2301      	movne	r3, #1
    4652:	2300      	moveq	r3, #0
    4654:	b2db      	uxtb	r3, r3
    4656:	2287      	movs	r2, #135	; 0x87
    4658:	490b      	ldr	r1, [pc, #44]	; (4688 <_spi_m_sync_io_read+0x4c>)
    465a:	4618      	mov	r0, r3
    465c:	4b0b      	ldr	r3, [pc, #44]	; (468c <_spi_m_sync_io_read+0x50>)
    465e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    4660:	68fb      	ldr	r3, [r7, #12]
    4662:	3b0c      	subs	r3, #12
    4664:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    4666:	68bb      	ldr	r3, [r7, #8]
    4668:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    466a:	2300      	movs	r3, #0
    466c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    466e:	88fb      	ldrh	r3, [r7, #6]
    4670:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    4672:	f107 0310 	add.w	r3, r7, #16
    4676:	4619      	mov	r1, r3
    4678:	69f8      	ldr	r0, [r7, #28]
    467a:	4b05      	ldr	r3, [pc, #20]	; (4690 <_spi_m_sync_io_read+0x54>)
    467c:	4798      	blx	r3
    467e:	4603      	mov	r3, r0
}
    4680:	4618      	mov	r0, r3
    4682:	3720      	adds	r7, #32
    4684:	46bd      	mov	sp, r7
    4686:	bd80      	pop	{r7, pc}
    4688:	00011a44 	.word	0x00011a44
    468c:	00005545 	.word	0x00005545
    4690:	000046ed 	.word	0x000046ed

00004694 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    4694:	b580      	push	{r7, lr}
    4696:	b088      	sub	sp, #32
    4698:	af00      	add	r7, sp, #0
    469a:	60f8      	str	r0, [r7, #12]
    469c:	60b9      	str	r1, [r7, #8]
    469e:	4613      	mov	r3, r2
    46a0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    46a2:	68fb      	ldr	r3, [r7, #12]
    46a4:	2b00      	cmp	r3, #0
    46a6:	bf14      	ite	ne
    46a8:	2301      	movne	r3, #1
    46aa:	2300      	moveq	r3, #0
    46ac:	b2db      	uxtb	r3, r3
    46ae:	22a3      	movs	r2, #163	; 0xa3
    46b0:	490b      	ldr	r1, [pc, #44]	; (46e0 <_spi_m_sync_io_write+0x4c>)
    46b2:	4618      	mov	r0, r3
    46b4:	4b0b      	ldr	r3, [pc, #44]	; (46e4 <_spi_m_sync_io_write+0x50>)
    46b6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	3b0c      	subs	r3, #12
    46bc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    46be:	2300      	movs	r3, #0
    46c0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    46c2:	68bb      	ldr	r3, [r7, #8]
    46c4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    46c6:	88fb      	ldrh	r3, [r7, #6]
    46c8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    46ca:	f107 0310 	add.w	r3, r7, #16
    46ce:	4619      	mov	r1, r3
    46d0:	69f8      	ldr	r0, [r7, #28]
    46d2:	4b05      	ldr	r3, [pc, #20]	; (46e8 <_spi_m_sync_io_write+0x54>)
    46d4:	4798      	blx	r3
    46d6:	4603      	mov	r3, r0
}
    46d8:	4618      	mov	r0, r3
    46da:	3720      	adds	r7, #32
    46dc:	46bd      	mov	sp, r7
    46de:	bd80      	pop	{r7, pc}
    46e0:	00011a44 	.word	0x00011a44
    46e4:	00005545 	.word	0x00005545
    46e8:	000046ed 	.word	0x000046ed

000046ec <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    46ec:	b580      	push	{r7, lr}
    46ee:	b086      	sub	sp, #24
    46f0:	af00      	add	r7, sp, #0
    46f2:	6078      	str	r0, [r7, #4]
    46f4:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	2b00      	cmp	r3, #0
    46fa:	d004      	beq.n	4706 <spi_m_sync_transfer+0x1a>
    46fc:	683b      	ldr	r3, [r7, #0]
    46fe:	2b00      	cmp	r3, #0
    4700:	d001      	beq.n	4706 <spi_m_sync_transfer+0x1a>
    4702:	2301      	movs	r3, #1
    4704:	e000      	b.n	4708 <spi_m_sync_transfer+0x1c>
    4706:	2300      	movs	r3, #0
    4708:	f003 0301 	and.w	r3, r3, #1
    470c:	b2db      	uxtb	r3, r3
    470e:	22b3      	movs	r2, #179	; 0xb3
    4710:	490c      	ldr	r1, [pc, #48]	; (4744 <spi_m_sync_transfer+0x58>)
    4712:	4618      	mov	r0, r3
    4714:	4b0c      	ldr	r3, [pc, #48]	; (4748 <spi_m_sync_transfer+0x5c>)
    4716:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    4718:	683b      	ldr	r3, [r7, #0]
    471a:	681b      	ldr	r3, [r3, #0]
    471c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    471e:	683b      	ldr	r3, [r7, #0]
    4720:	685b      	ldr	r3, [r3, #4]
    4722:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    4724:	683b      	ldr	r3, [r7, #0]
    4726:	689b      	ldr	r3, [r3, #8]
    4728:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	3304      	adds	r3, #4
    472e:	f107 020c 	add.w	r2, r7, #12
    4732:	4611      	mov	r1, r2
    4734:	4618      	mov	r0, r3
    4736:	4b05      	ldr	r3, [pc, #20]	; (474c <spi_m_sync_transfer+0x60>)
    4738:	4798      	blx	r3
    473a:	4603      	mov	r3, r0
}
    473c:	4618      	mov	r0, r3
    473e:	3718      	adds	r7, #24
    4740:	46bd      	mov	sp, r7
    4742:	bd80      	pop	{r7, pc}
    4744:	00011a44 	.word	0x00011a44
    4748:	00005545 	.word	0x00005545
    474c:	0000913d 	.word	0x0000913d

00004750 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    4750:	b480      	push	{r7}
    4752:	b083      	sub	sp, #12
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    4758:	687b      	ldr	r3, [r7, #4]
    475a:	681b      	ldr	r3, [r3, #0]
}
    475c:	4618      	mov	r0, r3
    475e:	370c      	adds	r7, #12
    4760:	46bd      	mov	sp, r7
    4762:	f85d 7b04 	ldr.w	r7, [sp], #4
    4766:	4770      	bx	lr

00004768 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    4768:	b480      	push	{r7}
    476a:	b083      	sub	sp, #12
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	2b00      	cmp	r3, #0
    4774:	d002      	beq.n	477c <list_get_next_element+0x14>
    4776:	687b      	ldr	r3, [r7, #4]
    4778:	681b      	ldr	r3, [r3, #0]
    477a:	e000      	b.n	477e <list_get_next_element+0x16>
    477c:	2300      	movs	r3, #0
}
    477e:	4618      	mov	r0, r3
    4780:	370c      	adds	r7, #12
    4782:	46bd      	mov	sp, r7
    4784:	f85d 7b04 	ldr.w	r7, [sp], #4
    4788:	4770      	bx	lr
	...

0000478c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    478c:	b580      	push	{r7, lr}
    478e:	b084      	sub	sp, #16
    4790:	af00      	add	r7, sp, #0
    4792:	60f8      	str	r0, [r7, #12]
    4794:	60b9      	str	r1, [r7, #8]
    4796:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4798:	68fb      	ldr	r3, [r7, #12]
    479a:	2b00      	cmp	r3, #0
    479c:	d004      	beq.n	47a8 <timer_init+0x1c>
    479e:	68bb      	ldr	r3, [r7, #8]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d001      	beq.n	47a8 <timer_init+0x1c>
    47a4:	2301      	movs	r3, #1
    47a6:	e000      	b.n	47aa <timer_init+0x1e>
    47a8:	2300      	movs	r3, #0
    47aa:	f003 0301 	and.w	r3, r3, #1
    47ae:	b2db      	uxtb	r3, r3
    47b0:	223b      	movs	r2, #59	; 0x3b
    47b2:	490a      	ldr	r1, [pc, #40]	; (47dc <timer_init+0x50>)
    47b4:	4618      	mov	r0, r3
    47b6:	4b0a      	ldr	r3, [pc, #40]	; (47e0 <timer_init+0x54>)
    47b8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	68b9      	ldr	r1, [r7, #8]
    47be:	4618      	mov	r0, r3
    47c0:	4b08      	ldr	r3, [pc, #32]	; (47e4 <timer_init+0x58>)
    47c2:	4798      	blx	r3
	descr->time                           = 0;
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	2200      	movs	r2, #0
    47c8:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    47ca:	68fb      	ldr	r3, [r7, #12]
    47cc:	4a06      	ldr	r2, [pc, #24]	; (47e8 <timer_init+0x5c>)
    47ce:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    47d0:	2300      	movs	r3, #0
}
    47d2:	4618      	mov	r0, r3
    47d4:	3710      	adds	r7, #16
    47d6:	46bd      	mov	sp, r7
    47d8:	bd80      	pop	{r7, pc}
    47da:	bf00      	nop
    47dc:	00011a60 	.word	0x00011a60
    47e0:	00005545 	.word	0x00005545
    47e4:	00009835 	.word	0x00009835
    47e8:	00004b35 	.word	0x00004b35

000047ec <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	2b00      	cmp	r3, #0
    47f8:	bf14      	ite	ne
    47fa:	2301      	movne	r3, #1
    47fc:	2300      	moveq	r3, #0
    47fe:	b2db      	uxtb	r3, r3
    4800:	2253      	movs	r2, #83	; 0x53
    4802:	490b      	ldr	r1, [pc, #44]	; (4830 <timer_start+0x44>)
    4804:	4618      	mov	r0, r3
    4806:	4b0b      	ldr	r3, [pc, #44]	; (4834 <timer_start+0x48>)
    4808:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	4618      	mov	r0, r3
    480e:	4b0a      	ldr	r3, [pc, #40]	; (4838 <timer_start+0x4c>)
    4810:	4798      	blx	r3
    4812:	4603      	mov	r3, r0
    4814:	2b00      	cmp	r3, #0
    4816:	d002      	beq.n	481e <timer_start+0x32>
		return ERR_DENIED;
    4818:	f06f 0310 	mvn.w	r3, #16
    481c:	e004      	b.n	4828 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	4618      	mov	r0, r3
    4822:	4b06      	ldr	r3, [pc, #24]	; (483c <timer_start+0x50>)
    4824:	4798      	blx	r3

	return ERR_NONE;
    4826:	2300      	movs	r3, #0
}
    4828:	4618      	mov	r0, r3
    482a:	3708      	adds	r7, #8
    482c:	46bd      	mov	sp, r7
    482e:	bd80      	pop	{r7, pc}
    4830:	00011a60 	.word	0x00011a60
    4834:	00005545 	.word	0x00005545
    4838:	00009d61 	.word	0x00009d61
    483c:	00009d01 	.word	0x00009d01

00004840 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	2b00      	cmp	r3, #0
    484c:	bf14      	ite	ne
    484e:	2301      	movne	r3, #1
    4850:	2300      	moveq	r3, #0
    4852:	b2db      	uxtb	r3, r3
    4854:	2261      	movs	r2, #97	; 0x61
    4856:	490d      	ldr	r1, [pc, #52]	; (488c <timer_stop+0x4c>)
    4858:	4618      	mov	r0, r3
    485a:	4b0d      	ldr	r3, [pc, #52]	; (4890 <timer_stop+0x50>)
    485c:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	4618      	mov	r0, r3
    4862:	4b0c      	ldr	r3, [pc, #48]	; (4894 <timer_stop+0x54>)
    4864:	4798      	blx	r3
    4866:	4603      	mov	r3, r0
    4868:	f083 0301 	eor.w	r3, r3, #1
    486c:	b2db      	uxtb	r3, r3
    486e:	2b00      	cmp	r3, #0
    4870:	d002      	beq.n	4878 <timer_stop+0x38>
		return ERR_DENIED;
    4872:	f06f 0310 	mvn.w	r3, #16
    4876:	e004      	b.n	4882 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	4618      	mov	r0, r3
    487c:	4b06      	ldr	r3, [pc, #24]	; (4898 <timer_stop+0x58>)
    487e:	4798      	blx	r3

	return ERR_NONE;
    4880:	2300      	movs	r3, #0
}
    4882:	4618      	mov	r0, r3
    4884:	3708      	adds	r7, #8
    4886:	46bd      	mov	sp, r7
    4888:	bd80      	pop	{r7, pc}
    488a:	bf00      	nop
    488c:	00011a60 	.word	0x00011a60
    4890:	00005545 	.word	0x00005545
    4894:	00009d61 	.word	0x00009d61
    4898:	00009d41 	.word	0x00009d41

0000489c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    489c:	b580      	push	{r7, lr}
    489e:	b084      	sub	sp, #16
    48a0:	af00      	add	r7, sp, #0
    48a2:	6078      	str	r0, [r7, #4]
    48a4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	2b00      	cmp	r3, #0
    48aa:	d004      	beq.n	48b6 <timer_add_task+0x1a>
    48ac:	683b      	ldr	r3, [r7, #0]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d001      	beq.n	48b6 <timer_add_task+0x1a>
    48b2:	2301      	movs	r3, #1
    48b4:	e000      	b.n	48b8 <timer_add_task+0x1c>
    48b6:	2300      	movs	r3, #0
    48b8:	f003 0301 	and.w	r3, r3, #1
    48bc:	b2db      	uxtb	r3, r3
    48be:	227a      	movs	r2, #122	; 0x7a
    48c0:	492d      	ldr	r1, [pc, #180]	; (4978 <timer_add_task+0xdc>)
    48c2:	4618      	mov	r0, r3
    48c4:	4b2d      	ldr	r3, [pc, #180]	; (497c <timer_add_task+0xe0>)
    48c6:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	7e1b      	ldrb	r3, [r3, #24]
    48cc:	b2db      	uxtb	r3, r3
    48ce:	f043 0301 	orr.w	r3, r3, #1
    48d2:	b2da      	uxtb	r2, r3
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	3314      	adds	r3, #20
    48dc:	6839      	ldr	r1, [r7, #0]
    48de:	4618      	mov	r0, r3
    48e0:	4b27      	ldr	r3, [pc, #156]	; (4980 <timer_add_task+0xe4>)
    48e2:	4798      	blx	r3
    48e4:	4603      	mov	r3, r0
    48e6:	2b00      	cmp	r3, #0
    48e8:	d00f      	beq.n	490a <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    48ea:	687b      	ldr	r3, [r7, #4]
    48ec:	7e1b      	ldrb	r3, [r3, #24]
    48ee:	b2db      	uxtb	r3, r3
    48f0:	f023 0301 	bic.w	r3, r3, #1
    48f4:	b2da      	uxtb	r2, r3
    48f6:	687b      	ldr	r3, [r7, #4]
    48f8:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    48fa:	227f      	movs	r2, #127	; 0x7f
    48fc:	491e      	ldr	r1, [pc, #120]	; (4978 <timer_add_task+0xdc>)
    48fe:	2000      	movs	r0, #0
    4900:	4b1e      	ldr	r3, [pc, #120]	; (497c <timer_add_task+0xe0>)
    4902:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4904:	f06f 0311 	mvn.w	r3, #17
    4908:	e032      	b.n	4970 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    490a:	687b      	ldr	r3, [r7, #4]
    490c:	691a      	ldr	r2, [r3, #16]
    490e:	683b      	ldr	r3, [r7, #0]
    4910:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4912:	687b      	ldr	r3, [r7, #4]
    4914:	f103 0014 	add.w	r0, r3, #20
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	691b      	ldr	r3, [r3, #16]
    491c:	461a      	mov	r2, r3
    491e:	6839      	ldr	r1, [r7, #0]
    4920:	4b18      	ldr	r3, [pc, #96]	; (4984 <timer_add_task+0xe8>)
    4922:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	7e1b      	ldrb	r3, [r3, #24]
    4928:	b2db      	uxtb	r3, r3
    492a:	f023 0301 	bic.w	r3, r3, #1
    492e:	b2da      	uxtb	r2, r3
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	7e1b      	ldrb	r3, [r3, #24]
    4938:	b2db      	uxtb	r3, r3
    493a:	f003 0302 	and.w	r3, r3, #2
    493e:	2b00      	cmp	r3, #0
    4940:	d015      	beq.n	496e <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    4942:	f107 030c 	add.w	r3, r7, #12
    4946:	4618      	mov	r0, r3
    4948:	4b0f      	ldr	r3, [pc, #60]	; (4988 <timer_add_task+0xec>)
    494a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	7e1b      	ldrb	r3, [r3, #24]
    4950:	b2db      	uxtb	r3, r3
    4952:	f023 0302 	bic.w	r3, r3, #2
    4956:	b2da      	uxtb	r2, r3
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	4618      	mov	r0, r3
    4960:	4b0a      	ldr	r3, [pc, #40]	; (498c <timer_add_task+0xf0>)
    4962:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4964:	f107 030c 	add.w	r3, r7, #12
    4968:	4618      	mov	r0, r3
    496a:	4b09      	ldr	r3, [pc, #36]	; (4990 <timer_add_task+0xf4>)
    496c:	4798      	blx	r3
	}

	return ERR_NONE;
    496e:	2300      	movs	r3, #0
}
    4970:	4618      	mov	r0, r3
    4972:	3710      	adds	r7, #16
    4974:	46bd      	mov	sp, r7
    4976:	bd80      	pop	{r7, pc}
    4978:	00011a60 	.word	0x00011a60
    497c:	00005545 	.word	0x00005545
    4980:	0000556d 	.word	0x0000556d
    4984:	00004a85 	.word	0x00004a85
    4988:	000036b9 	.word	0x000036b9
    498c:	00009dc1 	.word	0x00009dc1
    4990:	000036df 	.word	0x000036df

00004994 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    4994:	b580      	push	{r7, lr}
    4996:	b084      	sub	sp, #16
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]
    499c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    499e:	687b      	ldr	r3, [r7, #4]
    49a0:	2b00      	cmp	r3, #0
    49a2:	d004      	beq.n	49ae <timer_remove_task+0x1a>
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d001      	beq.n	49ae <timer_remove_task+0x1a>
    49aa:	2301      	movs	r3, #1
    49ac:	e000      	b.n	49b0 <timer_remove_task+0x1c>
    49ae:	2300      	movs	r3, #0
    49b0:	f003 0301 	and.w	r3, r3, #1
    49b4:	b2db      	uxtb	r3, r3
    49b6:	2295      	movs	r2, #149	; 0x95
    49b8:	492b      	ldr	r1, [pc, #172]	; (4a68 <timer_remove_task+0xd4>)
    49ba:	4618      	mov	r0, r3
    49bc:	4b2b      	ldr	r3, [pc, #172]	; (4a6c <timer_remove_task+0xd8>)
    49be:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    49c0:	687b      	ldr	r3, [r7, #4]
    49c2:	7e1b      	ldrb	r3, [r3, #24]
    49c4:	b2db      	uxtb	r3, r3
    49c6:	f043 0301 	orr.w	r3, r3, #1
    49ca:	b2da      	uxtb	r2, r3
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	3314      	adds	r3, #20
    49d4:	6839      	ldr	r1, [r7, #0]
    49d6:	4618      	mov	r0, r3
    49d8:	4b25      	ldr	r3, [pc, #148]	; (4a70 <timer_remove_task+0xdc>)
    49da:	4798      	blx	r3
    49dc:	4603      	mov	r3, r0
    49de:	f083 0301 	eor.w	r3, r3, #1
    49e2:	b2db      	uxtb	r3, r3
    49e4:	2b00      	cmp	r3, #0
    49e6:	d00f      	beq.n	4a08 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	7e1b      	ldrb	r3, [r3, #24]
    49ec:	b2db      	uxtb	r3, r3
    49ee:	f023 0301 	bic.w	r3, r3, #1
    49f2:	b2da      	uxtb	r2, r3
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    49f8:	229a      	movs	r2, #154	; 0x9a
    49fa:	491b      	ldr	r1, [pc, #108]	; (4a68 <timer_remove_task+0xd4>)
    49fc:	2000      	movs	r0, #0
    49fe:	4b1b      	ldr	r3, [pc, #108]	; (4a6c <timer_remove_task+0xd8>)
    4a00:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4a02:	f06f 0309 	mvn.w	r3, #9
    4a06:	e02b      	b.n	4a60 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	3314      	adds	r3, #20
    4a0c:	6839      	ldr	r1, [r7, #0]
    4a0e:	4618      	mov	r0, r3
    4a10:	4b18      	ldr	r3, [pc, #96]	; (4a74 <timer_remove_task+0xe0>)
    4a12:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	7e1b      	ldrb	r3, [r3, #24]
    4a18:	b2db      	uxtb	r3, r3
    4a1a:	f023 0301 	bic.w	r3, r3, #1
    4a1e:	b2da      	uxtb	r2, r3
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	7e1b      	ldrb	r3, [r3, #24]
    4a28:	b2db      	uxtb	r3, r3
    4a2a:	f003 0302 	and.w	r3, r3, #2
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d015      	beq.n	4a5e <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    4a32:	f107 030c 	add.w	r3, r7, #12
    4a36:	4618      	mov	r0, r3
    4a38:	4b0f      	ldr	r3, [pc, #60]	; (4a78 <timer_remove_task+0xe4>)
    4a3a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	7e1b      	ldrb	r3, [r3, #24]
    4a40:	b2db      	uxtb	r3, r3
    4a42:	f023 0302 	bic.w	r3, r3, #2
    4a46:	b2da      	uxtb	r2, r3
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	4618      	mov	r0, r3
    4a50:	4b0a      	ldr	r3, [pc, #40]	; (4a7c <timer_remove_task+0xe8>)
    4a52:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4a54:	f107 030c 	add.w	r3, r7, #12
    4a58:	4618      	mov	r0, r3
    4a5a:	4b09      	ldr	r3, [pc, #36]	; (4a80 <timer_remove_task+0xec>)
    4a5c:	4798      	blx	r3
	}

	return ERR_NONE;
    4a5e:	2300      	movs	r3, #0
}
    4a60:	4618      	mov	r0, r3
    4a62:	3710      	adds	r7, #16
    4a64:	46bd      	mov	sp, r7
    4a66:	bd80      	pop	{r7, pc}
    4a68:	00011a60 	.word	0x00011a60
    4a6c:	00005545 	.word	0x00005545
    4a70:	0000556d 	.word	0x0000556d
    4a74:	000056cf 	.word	0x000056cf
    4a78:	000036b9 	.word	0x000036b9
    4a7c:	00009dc1 	.word	0x00009dc1
    4a80:	000036df 	.word	0x000036df

00004a84 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4a84:	b580      	push	{r7, lr}
    4a86:	b088      	sub	sp, #32
    4a88:	af00      	add	r7, sp, #0
    4a8a:	60f8      	str	r0, [r7, #12]
    4a8c:	60b9      	str	r1, [r7, #8]
    4a8e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    4a90:	2300      	movs	r3, #0
    4a92:	61bb      	str	r3, [r7, #24]
    4a94:	68f8      	ldr	r0, [r7, #12]
    4a96:	4b23      	ldr	r3, [pc, #140]	; (4b24 <timer_add_timer_task+0xa0>)
    4a98:	4798      	blx	r3
    4a9a:	6138      	str	r0, [r7, #16]

	if (!head) {
    4a9c:	693b      	ldr	r3, [r7, #16]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d104      	bne.n	4aac <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    4aa2:	68b9      	ldr	r1, [r7, #8]
    4aa4:	68f8      	ldr	r0, [r7, #12]
    4aa6:	4b20      	ldr	r3, [pc, #128]	; (4b28 <timer_add_timer_task+0xa4>)
    4aa8:	4798      	blx	r3
		return;
    4aaa:	e037      	b.n	4b1c <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4aac:	693b      	ldr	r3, [r7, #16]
    4aae:	61fb      	str	r3, [r7, #28]
    4ab0:	e022      	b.n	4af8 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    4ab2:	69fb      	ldr	r3, [r7, #28]
    4ab4:	685a      	ldr	r2, [r3, #4]
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	429a      	cmp	r2, r3
    4aba:	d808      	bhi.n	4ace <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4abc:	69fb      	ldr	r3, [r7, #28]
    4abe:	689a      	ldr	r2, [r3, #8]
    4ac0:	69fb      	ldr	r3, [r7, #28]
    4ac2:	6859      	ldr	r1, [r3, #4]
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	1acb      	subs	r3, r1, r3
    4ac8:	4413      	add	r3, r2
    4aca:	617b      	str	r3, [r7, #20]
    4acc:	e009      	b.n	4ae2 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4ace:	69fb      	ldr	r3, [r7, #28]
    4ad0:	689a      	ldr	r2, [r3, #8]
    4ad2:	69fb      	ldr	r3, [r7, #28]
    4ad4:	685b      	ldr	r3, [r3, #4]
    4ad6:	441a      	add	r2, r3
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	425b      	negs	r3, r3
    4adc:	4413      	add	r3, r2
    4ade:	3301      	adds	r3, #1
    4ae0:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    4ae2:	68bb      	ldr	r3, [r7, #8]
    4ae4:	689a      	ldr	r2, [r3, #8]
    4ae6:	697b      	ldr	r3, [r7, #20]
    4ae8:	429a      	cmp	r2, r3
    4aea:	d909      	bls.n	4b00 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4aec:	69fb      	ldr	r3, [r7, #28]
    4aee:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4af0:	69f8      	ldr	r0, [r7, #28]
    4af2:	4b0e      	ldr	r3, [pc, #56]	; (4b2c <timer_add_timer_task+0xa8>)
    4af4:	4798      	blx	r3
    4af6:	61f8      	str	r0, [r7, #28]
    4af8:	69fb      	ldr	r3, [r7, #28]
    4afa:	2b00      	cmp	r3, #0
    4afc:	d1d9      	bne.n	4ab2 <timer_add_timer_task+0x2e>
    4afe:	e000      	b.n	4b02 <timer_add_timer_task+0x7e>
			break;
    4b00:	bf00      	nop
	}

	if (it == head) {
    4b02:	69fa      	ldr	r2, [r7, #28]
    4b04:	693b      	ldr	r3, [r7, #16]
    4b06:	429a      	cmp	r2, r3
    4b08:	d104      	bne.n	4b14 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    4b0a:	68b9      	ldr	r1, [r7, #8]
    4b0c:	68f8      	ldr	r0, [r7, #12]
    4b0e:	4b06      	ldr	r3, [pc, #24]	; (4b28 <timer_add_timer_task+0xa4>)
    4b10:	4798      	blx	r3
    4b12:	e003      	b.n	4b1c <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    4b14:	68b9      	ldr	r1, [r7, #8]
    4b16:	69b8      	ldr	r0, [r7, #24]
    4b18:	4b05      	ldr	r3, [pc, #20]	; (4b30 <timer_add_timer_task+0xac>)
    4b1a:	4798      	blx	r3
	}
}
    4b1c:	3720      	adds	r7, #32
    4b1e:	46bd      	mov	sp, r7
    4b20:	bd80      	pop	{r7, pc}
    4b22:	bf00      	nop
    4b24:	00004751 	.word	0x00004751
    4b28:	000055a5 	.word	0x000055a5
    4b2c:	00004769 	.word	0x00004769
    4b30:	000055fd 	.word	0x000055fd

00004b34 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    4b34:	b580      	push	{r7, lr}
    4b36:	b086      	sub	sp, #24
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    4b40:	693b      	ldr	r3, [r7, #16]
    4b42:	3314      	adds	r3, #20
    4b44:	4618      	mov	r0, r3
    4b46:	4b27      	ldr	r3, [pc, #156]	; (4be4 <timer_process_counted+0xb0>)
    4b48:	4798      	blx	r3
    4b4a:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    4b4c:	693b      	ldr	r3, [r7, #16]
    4b4e:	691b      	ldr	r3, [r3, #16]
    4b50:	1c5a      	adds	r2, r3, #1
    4b52:	693b      	ldr	r3, [r7, #16]
    4b54:	611a      	str	r2, [r3, #16]
    4b56:	693b      	ldr	r3, [r7, #16]
    4b58:	691b      	ldr	r3, [r3, #16]
    4b5a:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4b5c:	693b      	ldr	r3, [r7, #16]
    4b5e:	7e1b      	ldrb	r3, [r3, #24]
    4b60:	b2db      	uxtb	r3, r3
    4b62:	f003 0301 	and.w	r3, r3, #1
    4b66:	2b00      	cmp	r3, #0
    4b68:	d106      	bne.n	4b78 <timer_process_counted+0x44>
    4b6a:	693b      	ldr	r3, [r7, #16]
    4b6c:	7e1b      	ldrb	r3, [r3, #24]
    4b6e:	b2db      	uxtb	r3, r3
    4b70:	f003 0302 	and.w	r3, r3, #2
    4b74:	2b00      	cmp	r3, #0
    4b76:	d027      	beq.n	4bc8 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    4b78:	693b      	ldr	r3, [r7, #16]
    4b7a:	7e1b      	ldrb	r3, [r3, #24]
    4b7c:	b2db      	uxtb	r3, r3
    4b7e:	f043 0302 	orr.w	r3, r3, #2
    4b82:	b2da      	uxtb	r2, r3
    4b84:	693b      	ldr	r3, [r7, #16]
    4b86:	761a      	strb	r2, [r3, #24]
		return;
    4b88:	e029      	b.n	4bde <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    4b8a:	697b      	ldr	r3, [r7, #20]
    4b8c:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    4b8e:	693b      	ldr	r3, [r7, #16]
    4b90:	3314      	adds	r3, #20
    4b92:	4618      	mov	r0, r3
    4b94:	4b14      	ldr	r3, [pc, #80]	; (4be8 <timer_process_counted+0xb4>)
    4b96:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    4b98:	68bb      	ldr	r3, [r7, #8]
    4b9a:	7c1b      	ldrb	r3, [r3, #16]
    4b9c:	2b01      	cmp	r3, #1
    4b9e:	d109      	bne.n	4bb4 <timer_process_counted+0x80>
			tmp->time_label = time;
    4ba0:	68bb      	ldr	r3, [r7, #8]
    4ba2:	68fa      	ldr	r2, [r7, #12]
    4ba4:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    4ba6:	693b      	ldr	r3, [r7, #16]
    4ba8:	3314      	adds	r3, #20
    4baa:	68fa      	ldr	r2, [r7, #12]
    4bac:	68b9      	ldr	r1, [r7, #8]
    4bae:	4618      	mov	r0, r3
    4bb0:	4b0e      	ldr	r3, [pc, #56]	; (4bec <timer_process_counted+0xb8>)
    4bb2:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    4bb4:	693b      	ldr	r3, [r7, #16]
    4bb6:	3314      	adds	r3, #20
    4bb8:	4618      	mov	r0, r3
    4bba:	4b0a      	ldr	r3, [pc, #40]	; (4be4 <timer_process_counted+0xb0>)
    4bbc:	4798      	blx	r3
    4bbe:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    4bc0:	68bb      	ldr	r3, [r7, #8]
    4bc2:	68db      	ldr	r3, [r3, #12]
    4bc4:	68b8      	ldr	r0, [r7, #8]
    4bc6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4bc8:	697b      	ldr	r3, [r7, #20]
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d007      	beq.n	4bde <timer_process_counted+0xaa>
    4bce:	697b      	ldr	r3, [r7, #20]
    4bd0:	685b      	ldr	r3, [r3, #4]
    4bd2:	68fa      	ldr	r2, [r7, #12]
    4bd4:	1ad2      	subs	r2, r2, r3
    4bd6:	697b      	ldr	r3, [r7, #20]
    4bd8:	689b      	ldr	r3, [r3, #8]
    4bda:	429a      	cmp	r2, r3
    4bdc:	d2d5      	bcs.n	4b8a <timer_process_counted+0x56>
	}
}
    4bde:	3718      	adds	r7, #24
    4be0:	46bd      	mov	sp, r7
    4be2:	bd80      	pop	{r7, pc}
    4be4:	00004751 	.word	0x00004751
    4be8:	0000569d 	.word	0x0000569d
    4bec:	00004a85 	.word	0x00004a85

00004bf0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    4bf0:	b480      	push	{r7}
    4bf2:	b085      	sub	sp, #20
    4bf4:	af00      	add	r7, sp, #0
    4bf6:	4603      	mov	r3, r0
    4bf8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4bfa:	2300      	movs	r3, #0
    4bfc:	73fb      	strb	r3, [r7, #15]
    4bfe:	e029      	b.n	4c54 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c04:	4a19      	ldr	r2, [pc, #100]	; (4c6c <_usb_d_find_ep+0x7c>)
    4c06:	015b      	lsls	r3, r3, #5
    4c08:	4413      	add	r3, r2
    4c0a:	3301      	adds	r3, #1
    4c0c:	781b      	ldrb	r3, [r3, #0]
    4c0e:	79fa      	ldrb	r2, [r7, #7]
    4c10:	429a      	cmp	r2, r3
    4c12:	d102      	bne.n	4c1a <_usb_d_find_ep+0x2a>
			return i;
    4c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c18:	e022      	b.n	4c60 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c1e:	4a13      	ldr	r2, [pc, #76]	; (4c6c <_usb_d_find_ep+0x7c>)
    4c20:	015b      	lsls	r3, r3, #5
    4c22:	4413      	add	r3, r2
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d10e      	bne.n	4c48 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4c2a:	79fb      	ldrb	r3, [r7, #7]
    4c2c:	f003 030f 	and.w	r3, r3, #15
    4c30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    4c34:	490d      	ldr	r1, [pc, #52]	; (4c6c <_usb_d_find_ep+0x7c>)
    4c36:	0152      	lsls	r2, r2, #5
    4c38:	440a      	add	r2, r1
    4c3a:	3201      	adds	r2, #1
    4c3c:	7812      	ldrb	r2, [r2, #0]
    4c3e:	4293      	cmp	r3, r2
    4c40:	d102      	bne.n	4c48 <_usb_d_find_ep+0x58>
			return i;
    4c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c46:	e00b      	b.n	4c60 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c4c:	b2db      	uxtb	r3, r3
    4c4e:	3301      	adds	r3, #1
    4c50:	b2db      	uxtb	r3, r3
    4c52:	73fb      	strb	r3, [r7, #15]
    4c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c58:	2b03      	cmp	r3, #3
    4c5a:	ddd1      	ble.n	4c00 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    4c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
    4c60:	4618      	mov	r0, r3
    4c62:	3714      	adds	r7, #20
    4c64:	46bd      	mov	sp, r7
    4c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6a:	4770      	bx	lr
    4c6c:	20001c34 	.word	0x20001c34

00004c70 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b088      	sub	sp, #32
    4c74:	af00      	add	r7, sp, #0
    4c76:	60ba      	str	r2, [r7, #8]
    4c78:	607b      	str	r3, [r7, #4]
    4c7a:	4603      	mov	r3, r0
    4c7c:	73fb      	strb	r3, [r7, #15]
    4c7e:	460b      	mov	r3, r1
    4c80:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    4c82:	68bb      	ldr	r3, [r7, #8]
    4c84:	617b      	str	r3, [r7, #20]
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	61bb      	str	r3, [r7, #24]
    4c8a:	7bbb      	ldrb	r3, [r7, #14]
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d004      	beq.n	4c9a <_usb_d_trans+0x2a>
    4c90:	7bfb      	ldrb	r3, [r7, #15]
    4c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c96:	b2db      	uxtb	r3, r3
    4c98:	e003      	b.n	4ca2 <_usb_d_trans+0x32>
    4c9a:	7bfb      	ldrb	r3, [r7, #15]
    4c9c:	f003 030f 	and.w	r3, r3, #15
    4ca0:	b2db      	uxtb	r3, r3
    4ca2:	773b      	strb	r3, [r7, #28]
    4ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    4ca8:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    4caa:	f107 0314 	add.w	r3, r7, #20
    4cae:	4618      	mov	r0, r3
    4cb0:	4b03      	ldr	r3, [pc, #12]	; (4cc0 <_usb_d_trans+0x50>)
    4cb2:	4798      	blx	r3
    4cb4:	4603      	mov	r3, r0
}
    4cb6:	4618      	mov	r0, r3
    4cb8:	3720      	adds	r7, #32
    4cba:	46bd      	mov	sp, r7
    4cbc:	bd80      	pop	{r7, pc}
    4cbe:	bf00      	nop
    4cc0:	0000c4dd 	.word	0x0000c4dd

00004cc4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    4cc4:	b480      	push	{r7}
    4cc6:	b085      	sub	sp, #20
    4cc8:	af00      	add	r7, sp, #0
    4cca:	60f8      	str	r0, [r7, #12]
    4ccc:	60b9      	str	r1, [r7, #8]
    4cce:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    4cd0:	2300      	movs	r3, #0
}
    4cd2:	4618      	mov	r0, r3
    4cd4:	3714      	adds	r7, #20
    4cd6:	46bd      	mov	sp, r7
    4cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cdc:	4770      	bx	lr
	...

00004ce0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    4ce0:	b580      	push	{r7, lr}
    4ce2:	b086      	sub	sp, #24
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	4603      	mov	r3, r0
    4ce8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4cea:	79fb      	ldrb	r3, [r7, #7]
    4cec:	4618      	mov	r0, r3
    4cee:	4b2a      	ldr	r3, [pc, #168]	; (4d98 <usb_d_cb_trans_setup+0xb8>)
    4cf0:	4798      	blx	r3
    4cf2:	4603      	mov	r3, r0
    4cf4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4cfa:	015b      	lsls	r3, r3, #5
    4cfc:	4a27      	ldr	r2, [pc, #156]	; (4d9c <usb_d_cb_trans_setup+0xbc>)
    4cfe:	4413      	add	r3, r2
    4d00:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    4d02:	693b      	ldr	r3, [r7, #16]
    4d04:	330c      	adds	r3, #12
    4d06:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4d08:	79fb      	ldrb	r3, [r7, #7]
    4d0a:	68f9      	ldr	r1, [r7, #12]
    4d0c:	4618      	mov	r0, r3
    4d0e:	4b24      	ldr	r3, [pc, #144]	; (4da0 <usb_d_cb_trans_setup+0xc0>)
    4d10:	4798      	blx	r3
    4d12:	4603      	mov	r3, r0
    4d14:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    4d16:	7afb      	ldrb	r3, [r7, #11]
    4d18:	2b08      	cmp	r3, #8
    4d1a:	d00d      	beq.n	4d38 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4d1c:	79fb      	ldrb	r3, [r7, #7]
    4d1e:	2101      	movs	r1, #1
    4d20:	4618      	mov	r0, r3
    4d22:	4b20      	ldr	r3, [pc, #128]	; (4da4 <usb_d_cb_trans_setup+0xc4>)
    4d24:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4d26:	79fb      	ldrb	r3, [r7, #7]
    4d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d2c:	b2db      	uxtb	r3, r3
    4d2e:	2101      	movs	r1, #1
    4d30:	4618      	mov	r0, r3
    4d32:	4b1c      	ldr	r3, [pc, #112]	; (4da4 <usb_d_cb_trans_setup+0xc4>)
    4d34:	4798      	blx	r3
		return;
    4d36:	e02b      	b.n	4d90 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4d38:	79fb      	ldrb	r3, [r7, #7]
    4d3a:	2100      	movs	r1, #0
    4d3c:	4618      	mov	r0, r3
    4d3e:	4b19      	ldr	r3, [pc, #100]	; (4da4 <usb_d_cb_trans_setup+0xc4>)
    4d40:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    4d42:	79fb      	ldrb	r3, [r7, #7]
    4d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d48:	b2db      	uxtb	r3, r3
    4d4a:	2100      	movs	r1, #0
    4d4c:	4618      	mov	r0, r3
    4d4e:	4b15      	ldr	r3, [pc, #84]	; (4da4 <usb_d_cb_trans_setup+0xc4>)
    4d50:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    4d52:	693b      	ldr	r3, [r7, #16]
    4d54:	2201      	movs	r2, #1
    4d56:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4d58:	693b      	ldr	r3, [r7, #16]
    4d5a:	695b      	ldr	r3, [r3, #20]
    4d5c:	79fa      	ldrb	r2, [r7, #7]
    4d5e:	68f9      	ldr	r1, [r7, #12]
    4d60:	4610      	mov	r0, r2
    4d62:	4798      	blx	r3
    4d64:	4603      	mov	r3, r0
    4d66:	f083 0301 	eor.w	r3, r3, #1
    4d6a:	b2db      	uxtb	r3, r3
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d00f      	beq.n	4d90 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4d70:	693b      	ldr	r3, [r7, #16]
    4d72:	2205      	movs	r2, #5
    4d74:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4d76:	79fb      	ldrb	r3, [r7, #7]
    4d78:	2101      	movs	r1, #1
    4d7a:	4618      	mov	r0, r3
    4d7c:	4b09      	ldr	r3, [pc, #36]	; (4da4 <usb_d_cb_trans_setup+0xc4>)
    4d7e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4d80:	79fb      	ldrb	r3, [r7, #7]
    4d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d86:	b2db      	uxtb	r3, r3
    4d88:	2101      	movs	r1, #1
    4d8a:	4618      	mov	r0, r3
    4d8c:	4b05      	ldr	r3, [pc, #20]	; (4da4 <usb_d_cb_trans_setup+0xc4>)
    4d8e:	4798      	blx	r3
	}
}
    4d90:	3718      	adds	r7, #24
    4d92:	46bd      	mov	sp, r7
    4d94:	bd80      	pop	{r7, pc}
    4d96:	bf00      	nop
    4d98:	00004bf1 	.word	0x00004bf1
    4d9c:	20001c34 	.word	0x20001c34
    4da0:	0000c435 	.word	0x0000c435
    4da4:	0000c2ad 	.word	0x0000c2ad

00004da8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	4603      	mov	r3, r0
    4db0:	6039      	str	r1, [r7, #0]
    4db2:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4db4:	79fb      	ldrb	r3, [r7, #7]
    4db6:	4618      	mov	r0, r3
    4db8:	4b0d      	ldr	r3, [pc, #52]	; (4df0 <usb_d_cb_trans_more+0x48>)
    4dba:	4798      	blx	r3
    4dbc:	4603      	mov	r3, r0
    4dbe:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4dc4:	015b      	lsls	r3, r3, #5
    4dc6:	4a0b      	ldr	r2, [pc, #44]	; (4df4 <usb_d_cb_trans_more+0x4c>)
    4dc8:	4413      	add	r3, r2
    4dca:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4dcc:	68bb      	ldr	r3, [r7, #8]
    4dce:	789b      	ldrb	r3, [r3, #2]
    4dd0:	2b03      	cmp	r3, #3
    4dd2:	d107      	bne.n	4de4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    4dd4:	68bb      	ldr	r3, [r7, #8]
    4dd6:	699b      	ldr	r3, [r3, #24]
    4dd8:	79fa      	ldrb	r2, [r7, #7]
    4dda:	6839      	ldr	r1, [r7, #0]
    4ddc:	4610      	mov	r0, r2
    4dde:	4798      	blx	r3
    4de0:	4603      	mov	r3, r0
    4de2:	e000      	b.n	4de6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    4de4:	2300      	movs	r3, #0
}
    4de6:	4618      	mov	r0, r3
    4de8:	3710      	adds	r7, #16
    4dea:	46bd      	mov	sp, r7
    4dec:	bd80      	pop	{r7, pc}
    4dee:	bf00      	nop
    4df0:	00004bf1 	.word	0x00004bf1
    4df4:	20001c34 	.word	0x20001c34

00004df8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4df8:	b590      	push	{r4, r7, lr}
    4dfa:	b087      	sub	sp, #28
    4dfc:	af02      	add	r7, sp, #8
    4dfe:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    4e00:	687b      	ldr	r3, [r7, #4]
    4e02:	789b      	ldrb	r3, [r3, #2]
    4e04:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4e06:	687b      	ldr	r3, [r7, #4]
    4e08:	7b1b      	ldrb	r3, [r3, #12]
    4e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e0e:	2b00      	cmp	r3, #0
    4e10:	bf14      	ite	ne
    4e12:	2301      	movne	r3, #1
    4e14:	2300      	moveq	r3, #0
    4e16:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    4e18:	7bfb      	ldrb	r3, [r7, #15]
    4e1a:	2b03      	cmp	r3, #3
    4e1c:	d13a      	bne.n	4e94 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	69db      	ldr	r3, [r3, #28]
    4e22:	687a      	ldr	r2, [r7, #4]
    4e24:	7850      	ldrb	r0, [r2, #1]
    4e26:	687a      	ldr	r2, [r7, #4]
    4e28:	320c      	adds	r2, #12
    4e2a:	2101      	movs	r1, #1
    4e2c:	4798      	blx	r3
    4e2e:	4603      	mov	r3, r0
    4e30:	737b      	strb	r3, [r7, #13]
		if (err) {
    4e32:	7b7b      	ldrb	r3, [r7, #13]
    4e34:	2b00      	cmp	r3, #0
    4e36:	d015      	beq.n	4e64 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2205      	movs	r2, #5
    4e3c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	2202      	movs	r2, #2
    4e42:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4e44:	7bbb      	ldrb	r3, [r7, #14]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d002      	beq.n	4e50 <usb_d_ctrl_trans_done+0x58>
    4e4a:	687b      	ldr	r3, [r7, #4]
    4e4c:	785b      	ldrb	r3, [r3, #1]
    4e4e:	e004      	b.n	4e5a <usb_d_ctrl_trans_done+0x62>
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	785b      	ldrb	r3, [r3, #1]
    4e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4e58:	b2db      	uxtb	r3, r3
    4e5a:	2101      	movs	r1, #1
    4e5c:	4618      	mov	r0, r3
    4e5e:	4b15      	ldr	r3, [pc, #84]	; (4eb4 <usb_d_ctrl_trans_done+0xbc>)
    4e60:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    4e62:	e022      	b.n	4eaa <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	2204      	movs	r2, #4
    4e68:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	7858      	ldrb	r0, [r3, #1]
    4e6e:	7bbb      	ldrb	r3, [r7, #14]
    4e70:	2b00      	cmp	r3, #0
    4e72:	bf14      	ite	ne
    4e74:	2301      	movne	r3, #1
    4e76:	2300      	moveq	r3, #0
    4e78:	b2db      	uxtb	r3, r3
    4e7a:	f083 0301 	eor.w	r3, r3, #1
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	f003 0301 	and.w	r3, r3, #1
    4e84:	b2d9      	uxtb	r1, r3
    4e86:	2301      	movs	r3, #1
    4e88:	9300      	str	r3, [sp, #0]
    4e8a:	2300      	movs	r3, #0
    4e8c:	2200      	movs	r2, #0
    4e8e:	4c0a      	ldr	r4, [pc, #40]	; (4eb8 <usb_d_ctrl_trans_done+0xc0>)
    4e90:	47a0      	blx	r4
}
    4e92:	e00a      	b.n	4eaa <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	69db      	ldr	r3, [r3, #28]
    4e98:	687a      	ldr	r2, [r7, #4]
    4e9a:	7850      	ldrb	r0, [r2, #1]
    4e9c:	687a      	ldr	r2, [r7, #4]
    4e9e:	320c      	adds	r2, #12
    4ea0:	2100      	movs	r1, #0
    4ea2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	2202      	movs	r2, #2
    4ea8:	709a      	strb	r2, [r3, #2]
}
    4eaa:	bf00      	nop
    4eac:	3714      	adds	r7, #20
    4eae:	46bd      	mov	sp, r7
    4eb0:	bd90      	pop	{r4, r7, pc}
    4eb2:	bf00      	nop
    4eb4:	0000c2ad 	.word	0x0000c2ad
    4eb8:	00004c71 	.word	0x00004c71

00004ebc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4ebc:	b580      	push	{r7, lr}
    4ebe:	b086      	sub	sp, #24
    4ec0:	af00      	add	r7, sp, #0
    4ec2:	4603      	mov	r3, r0
    4ec4:	60b9      	str	r1, [r7, #8]
    4ec6:	607a      	str	r2, [r7, #4]
    4ec8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4eca:	7bfb      	ldrb	r3, [r7, #15]
    4ecc:	4618      	mov	r0, r3
    4ece:	4b2f      	ldr	r3, [pc, #188]	; (4f8c <_usb_d_cb_trans_done+0xd0>)
    4ed0:	4798      	blx	r3
    4ed2:	4603      	mov	r3, r0
    4ed4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4eda:	015b      	lsls	r3, r3, #5
    4edc:	4a2c      	ldr	r2, [pc, #176]	; (4f90 <_usb_d_cb_trans_done+0xd4>)
    4ede:	4413      	add	r3, r2
    4ee0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    4ee2:	68bb      	ldr	r3, [r7, #8]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d10e      	bne.n	4f06 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4ee8:	693b      	ldr	r3, [r7, #16]
    4eea:	2200      	movs	r2, #0
    4eec:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4eee:	693b      	ldr	r3, [r7, #16]
    4ef0:	781b      	ldrb	r3, [r3, #0]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d103      	bne.n	4efe <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    4ef6:	6938      	ldr	r0, [r7, #16]
    4ef8:	4b26      	ldr	r3, [pc, #152]	; (4f94 <_usb_d_cb_trans_done+0xd8>)
    4efa:	4798      	blx	r3
			return;
    4efc:	e043      	b.n	4f86 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4efe:	693b      	ldr	r3, [r7, #16]
    4f00:	2201      	movs	r2, #1
    4f02:	709a      	strb	r2, [r3, #2]
    4f04:	e038      	b.n	4f78 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    4f06:	68bb      	ldr	r3, [r7, #8]
    4f08:	2b01      	cmp	r3, #1
    4f0a:	d113      	bne.n	4f34 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4f0c:	693b      	ldr	r3, [r7, #16]
    4f0e:	2202      	movs	r2, #2
    4f10:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4f12:	693b      	ldr	r3, [r7, #16]
    4f14:	781b      	ldrb	r3, [r3, #0]
    4f16:	2b00      	cmp	r3, #0
    4f18:	d108      	bne.n	4f2c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4f1a:	693b      	ldr	r3, [r7, #16]
    4f1c:	2202      	movs	r2, #2
    4f1e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4f20:	7bfb      	ldrb	r3, [r7, #15]
    4f22:	2100      	movs	r1, #0
    4f24:	4618      	mov	r0, r3
    4f26:	4b1c      	ldr	r3, [pc, #112]	; (4f98 <_usb_d_cb_trans_done+0xdc>)
    4f28:	4798      	blx	r3
    4f2a:	e025      	b.n	4f78 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4f2c:	693b      	ldr	r3, [r7, #16]
    4f2e:	2205      	movs	r2, #5
    4f30:	709a      	strb	r2, [r3, #2]
    4f32:	e021      	b.n	4f78 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    4f34:	68bb      	ldr	r3, [r7, #8]
    4f36:	2b02      	cmp	r3, #2
    4f38:	d10e      	bne.n	4f58 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4f3a:	693b      	ldr	r3, [r7, #16]
    4f3c:	2204      	movs	r2, #4
    4f3e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4f40:	693b      	ldr	r3, [r7, #16]
    4f42:	781b      	ldrb	r3, [r3, #0]
    4f44:	2b00      	cmp	r3, #0
    4f46:	d103      	bne.n	4f50 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4f48:	693b      	ldr	r3, [r7, #16]
    4f4a:	2202      	movs	r2, #2
    4f4c:	709a      	strb	r2, [r3, #2]
			return;
    4f4e:	e01a      	b.n	4f86 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	2201      	movs	r2, #1
    4f54:	709a      	strb	r2, [r3, #2]
    4f56:	e00f      	b.n	4f78 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    4f58:	68bb      	ldr	r3, [r7, #8]
    4f5a:	2b03      	cmp	r3, #3
    4f5c:	d106      	bne.n	4f6c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    4f5e:	693b      	ldr	r3, [r7, #16]
    4f60:	2200      	movs	r2, #0
    4f62:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    4f64:	693b      	ldr	r3, [r7, #16]
    4f66:	2205      	movs	r2, #5
    4f68:	70da      	strb	r2, [r3, #3]
    4f6a:	e005      	b.n	4f78 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4f6c:	693b      	ldr	r3, [r7, #16]
    4f6e:	2206      	movs	r2, #6
    4f70:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    4f72:	693b      	ldr	r3, [r7, #16]
    4f74:	2206      	movs	r2, #6
    4f76:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4f78:	693b      	ldr	r3, [r7, #16]
    4f7a:	69db      	ldr	r3, [r3, #28]
    4f7c:	693a      	ldr	r2, [r7, #16]
    4f7e:	78d1      	ldrb	r1, [r2, #3]
    4f80:	687a      	ldr	r2, [r7, #4]
    4f82:	7bf8      	ldrb	r0, [r7, #15]
    4f84:	4798      	blx	r3
}
    4f86:	3718      	adds	r7, #24
    4f88:	46bd      	mov	sp, r7
    4f8a:	bd80      	pop	{r7, pc}
    4f8c:	00004bf1 	.word	0x00004bf1
    4f90:	20001c34 	.word	0x20001c34
    4f94:	00004df9 	.word	0x00004df9
    4f98:	0000c2ad 	.word	0x0000c2ad

00004f9c <usb_d_init>:

int32_t usb_d_init(void)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b082      	sub	sp, #8
    4fa0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    4fa2:	4b21      	ldr	r3, [pc, #132]	; (5028 <usb_d_init+0x8c>)
    4fa4:	4798      	blx	r3
    4fa6:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    4fa8:	683b      	ldr	r3, [r7, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	da01      	bge.n	4fb2 <usb_d_init+0x16>
		return rc;
    4fae:	683b      	ldr	r3, [r7, #0]
    4fb0:	e036      	b.n	5020 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    4fb2:	2280      	movs	r2, #128	; 0x80
    4fb4:	2100      	movs	r1, #0
    4fb6:	481d      	ldr	r0, [pc, #116]	; (502c <usb_d_init+0x90>)
    4fb8:	4b1d      	ldr	r3, [pc, #116]	; (5030 <usb_d_init+0x94>)
    4fba:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4fbc:	2300      	movs	r3, #0
    4fbe:	71fb      	strb	r3, [r7, #7]
    4fc0:	e01e      	b.n	5000 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    4fc2:	79fb      	ldrb	r3, [r7, #7]
    4fc4:	4a19      	ldr	r2, [pc, #100]	; (502c <usb_d_init+0x90>)
    4fc6:	015b      	lsls	r3, r3, #5
    4fc8:	4413      	add	r3, r2
    4fca:	3301      	adds	r3, #1
    4fcc:	22ff      	movs	r2, #255	; 0xff
    4fce:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4fd0:	79fb      	ldrb	r3, [r7, #7]
    4fd2:	4a16      	ldr	r2, [pc, #88]	; (502c <usb_d_init+0x90>)
    4fd4:	015b      	lsls	r3, r3, #5
    4fd6:	4413      	add	r3, r2
    4fd8:	3314      	adds	r3, #20
    4fda:	4a16      	ldr	r2, [pc, #88]	; (5034 <usb_d_init+0x98>)
    4fdc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4fde:	79fb      	ldrb	r3, [r7, #7]
    4fe0:	4a12      	ldr	r2, [pc, #72]	; (502c <usb_d_init+0x90>)
    4fe2:	015b      	lsls	r3, r3, #5
    4fe4:	4413      	add	r3, r2
    4fe6:	3318      	adds	r3, #24
    4fe8:	4a12      	ldr	r2, [pc, #72]	; (5034 <usb_d_init+0x98>)
    4fea:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4fec:	79fb      	ldrb	r3, [r7, #7]
    4fee:	4a0f      	ldr	r2, [pc, #60]	; (502c <usb_d_init+0x90>)
    4ff0:	015b      	lsls	r3, r3, #5
    4ff2:	4413      	add	r3, r2
    4ff4:	331c      	adds	r3, #28
    4ff6:	4a0f      	ldr	r2, [pc, #60]	; (5034 <usb_d_init+0x98>)
    4ff8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4ffa:	79fb      	ldrb	r3, [r7, #7]
    4ffc:	3301      	adds	r3, #1
    4ffe:	71fb      	strb	r3, [r7, #7]
    5000:	79fb      	ldrb	r3, [r7, #7]
    5002:	2b03      	cmp	r3, #3
    5004:	d9dd      	bls.n	4fc2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5006:	490c      	ldr	r1, [pc, #48]	; (5038 <usb_d_init+0x9c>)
    5008:	2000      	movs	r0, #0
    500a:	4b0c      	ldr	r3, [pc, #48]	; (503c <usb_d_init+0xa0>)
    500c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    500e:	490c      	ldr	r1, [pc, #48]	; (5040 <usb_d_init+0xa4>)
    5010:	2001      	movs	r0, #1
    5012:	4b0a      	ldr	r3, [pc, #40]	; (503c <usb_d_init+0xa0>)
    5014:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5016:	490b      	ldr	r1, [pc, #44]	; (5044 <usb_d_init+0xa8>)
    5018:	2002      	movs	r0, #2
    501a:	4b08      	ldr	r3, [pc, #32]	; (503c <usb_d_init+0xa0>)
    501c:	4798      	blx	r3
	return ERR_NONE;
    501e:	2300      	movs	r3, #0
}
    5020:	4618      	mov	r0, r3
    5022:	3708      	adds	r7, #8
    5024:	46bd      	mov	sp, r7
    5026:	bd80      	pop	{r7, pc}
    5028:	0000baf5 	.word	0x0000baf5
    502c:	20001c34 	.word	0x20001c34
    5030:	00010945 	.word	0x00010945
    5034:	00004cc5 	.word	0x00004cc5
    5038:	00004ce1 	.word	0x00004ce1
    503c:	0000c73d 	.word	0x0000c73d
    5040:	00004da9 	.word	0x00004da9
    5044:	00004ebd 	.word	0x00004ebd

00005048 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5048:	b580      	push	{r7, lr}
    504a:	b082      	sub	sp, #8
    504c:	af00      	add	r7, sp, #0
    504e:	4603      	mov	r3, r0
    5050:	6039      	str	r1, [r7, #0]
    5052:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5054:	79fb      	ldrb	r3, [r7, #7]
    5056:	6839      	ldr	r1, [r7, #0]
    5058:	4618      	mov	r0, r3
    505a:	4b03      	ldr	r3, [pc, #12]	; (5068 <usb_d_register_callback+0x20>)
    505c:	4798      	blx	r3
}
    505e:	bf00      	nop
    5060:	3708      	adds	r7, #8
    5062:	46bd      	mov	sp, r7
    5064:	bd80      	pop	{r7, pc}
    5066:	bf00      	nop
    5068:	0000c6f5 	.word	0x0000c6f5

0000506c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    506c:	b580      	push	{r7, lr}
    506e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5070:	4b02      	ldr	r3, [pc, #8]	; (507c <usb_d_enable+0x10>)
    5072:	4798      	blx	r3
    5074:	4603      	mov	r3, r0
}
    5076:	4618      	mov	r0, r3
    5078:	bd80      	pop	{r7, pc}
    507a:	bf00      	nop
    507c:	0000bbe5 	.word	0x0000bbe5

00005080 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5080:	b580      	push	{r7, lr}
    5082:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    5084:	4b01      	ldr	r3, [pc, #4]	; (508c <usb_d_attach+0xc>)
    5086:	4798      	blx	r3
}
    5088:	bf00      	nop
    508a:	bd80      	pop	{r7, pc}
    508c:	0000bc69 	.word	0x0000bc69

00005090 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5090:	b580      	push	{r7, lr}
    5092:	b082      	sub	sp, #8
    5094:	af00      	add	r7, sp, #0
    5096:	4603      	mov	r3, r0
    5098:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    509a:	79fb      	ldrb	r3, [r7, #7]
    509c:	4618      	mov	r0, r3
    509e:	4b03      	ldr	r3, [pc, #12]	; (50ac <usb_d_set_address+0x1c>)
    50a0:	4798      	blx	r3
}
    50a2:	bf00      	nop
    50a4:	3708      	adds	r7, #8
    50a6:	46bd      	mov	sp, r7
    50a8:	bd80      	pop	{r7, pc}
    50aa:	bf00      	nop
    50ac:	0000bc7d 	.word	0x0000bc7d

000050b0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    50b0:	b580      	push	{r7, lr}
    50b2:	b082      	sub	sp, #8
    50b4:	af00      	add	r7, sp, #0
    50b6:	4603      	mov	r3, r0
    50b8:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    50ba:	79fb      	ldrb	r3, [r7, #7]
    50bc:	b29b      	uxth	r3, r3
    50be:	461a      	mov	r2, r3
    50c0:	2100      	movs	r1, #0
    50c2:	2000      	movs	r0, #0
    50c4:	4b03      	ldr	r3, [pc, #12]	; (50d4 <usb_d_ep0_init+0x24>)
    50c6:	4798      	blx	r3
    50c8:	4603      	mov	r3, r0
}
    50ca:	4618      	mov	r0, r3
    50cc:	3708      	adds	r7, #8
    50ce:	46bd      	mov	sp, r7
    50d0:	bd80      	pop	{r7, pc}
    50d2:	bf00      	nop
    50d4:	000050d9 	.word	0x000050d9

000050d8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    50d8:	b580      	push	{r7, lr}
    50da:	b086      	sub	sp, #24
    50dc:	af00      	add	r7, sp, #0
    50de:	4603      	mov	r3, r0
    50e0:	71fb      	strb	r3, [r7, #7]
    50e2:	460b      	mov	r3, r1
    50e4:	71bb      	strb	r3, [r7, #6]
    50e6:	4613      	mov	r3, r2
    50e8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    50ea:	79fb      	ldrb	r3, [r7, #7]
    50ec:	4618      	mov	r0, r3
    50ee:	4b1e      	ldr	r3, [pc, #120]	; (5168 <usb_d_ep_init+0x90>)
    50f0:	4798      	blx	r3
    50f2:	4603      	mov	r3, r0
    50f4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    50f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    50fa:	015b      	lsls	r3, r3, #5
    50fc:	4a1b      	ldr	r2, [pc, #108]	; (516c <usb_d_ep_init+0x94>)
    50fe:	4413      	add	r3, r2
    5100:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    5102:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5106:	2b00      	cmp	r3, #0
    5108:	db02      	blt.n	5110 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    510a:	f06f 0313 	mvn.w	r3, #19
    510e:	e027      	b.n	5160 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5110:	20ff      	movs	r0, #255	; 0xff
    5112:	4b15      	ldr	r3, [pc, #84]	; (5168 <usb_d_ep_init+0x90>)
    5114:	4798      	blx	r3
    5116:	4603      	mov	r3, r0
    5118:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    511a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    511e:	2b00      	cmp	r3, #0
    5120:	da02      	bge.n	5128 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    5122:	f06f 0314 	mvn.w	r3, #20
    5126:	e01b      	b.n	5160 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5128:	f997 3017 	ldrsb.w	r3, [r7, #23]
    512c:	015b      	lsls	r3, r3, #5
    512e:	4a0f      	ldr	r2, [pc, #60]	; (516c <usb_d_ep_init+0x94>)
    5130:	4413      	add	r3, r2
    5132:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5134:	88ba      	ldrh	r2, [r7, #4]
    5136:	79b9      	ldrb	r1, [r7, #6]
    5138:	79fb      	ldrb	r3, [r7, #7]
    513a:	4618      	mov	r0, r3
    513c:	4b0c      	ldr	r3, [pc, #48]	; (5170 <usb_d_ep_init+0x98>)
    513e:	4798      	blx	r3
    5140:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5142:	68fb      	ldr	r3, [r7, #12]
    5144:	2b00      	cmp	r3, #0
    5146:	da01      	bge.n	514c <usb_d_ep_init+0x74>
		return rc;
    5148:	68fb      	ldr	r3, [r7, #12]
    514a:	e009      	b.n	5160 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    514c:	693b      	ldr	r3, [r7, #16]
    514e:	79fa      	ldrb	r2, [r7, #7]
    5150:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5152:	79bb      	ldrb	r3, [r7, #6]
    5154:	f003 0303 	and.w	r3, r3, #3
    5158:	b2da      	uxtb	r2, r3
    515a:	693b      	ldr	r3, [r7, #16]
    515c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    515e:	2300      	movs	r3, #0
}
    5160:	4618      	mov	r0, r3
    5162:	3718      	adds	r7, #24
    5164:	46bd      	mov	sp, r7
    5166:	bd80      	pop	{r7, pc}
    5168:	00004bf1 	.word	0x00004bf1
    516c:	20001c34 	.word	0x20001c34
    5170:	0000bd1d 	.word	0x0000bd1d

00005174 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5174:	b580      	push	{r7, lr}
    5176:	b084      	sub	sp, #16
    5178:	af00      	add	r7, sp, #0
    517a:	4603      	mov	r3, r0
    517c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    517e:	79fb      	ldrb	r3, [r7, #7]
    5180:	4618      	mov	r0, r3
    5182:	4b0d      	ldr	r3, [pc, #52]	; (51b8 <usb_d_ep_deinit+0x44>)
    5184:	4798      	blx	r3
    5186:	4603      	mov	r3, r0
    5188:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    518a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    518e:	015b      	lsls	r3, r3, #5
    5190:	4a0a      	ldr	r2, [pc, #40]	; (51bc <usb_d_ep_deinit+0x48>)
    5192:	4413      	add	r3, r2
    5194:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5196:	f997 300f 	ldrsb.w	r3, [r7, #15]
    519a:	2b00      	cmp	r3, #0
    519c:	db07      	blt.n	51ae <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    519e:	79fb      	ldrb	r3, [r7, #7]
    51a0:	4618      	mov	r0, r3
    51a2:	4b07      	ldr	r3, [pc, #28]	; (51c0 <usb_d_ep_deinit+0x4c>)
    51a4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    51a6:	68bb      	ldr	r3, [r7, #8]
    51a8:	22ff      	movs	r2, #255	; 0xff
    51aa:	705a      	strb	r2, [r3, #1]
    51ac:	e000      	b.n	51b0 <usb_d_ep_deinit+0x3c>
		return;
    51ae:	bf00      	nop
}
    51b0:	3710      	adds	r7, #16
    51b2:	46bd      	mov	sp, r7
    51b4:	bd80      	pop	{r7, pc}
    51b6:	bf00      	nop
    51b8:	00004bf1 	.word	0x00004bf1
    51bc:	20001c34 	.word	0x20001c34
    51c0:	0000be51 	.word	0x0000be51

000051c4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    51c4:	b580      	push	{r7, lr}
    51c6:	b086      	sub	sp, #24
    51c8:	af00      	add	r7, sp, #0
    51ca:	4603      	mov	r3, r0
    51cc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    51ce:	79fb      	ldrb	r3, [r7, #7]
    51d0:	4618      	mov	r0, r3
    51d2:	4b15      	ldr	r3, [pc, #84]	; (5228 <usb_d_ep_enable+0x64>)
    51d4:	4798      	blx	r3
    51d6:	4603      	mov	r3, r0
    51d8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    51da:	f997 3017 	ldrsb.w	r3, [r7, #23]
    51de:	015b      	lsls	r3, r3, #5
    51e0:	4a12      	ldr	r2, [pc, #72]	; (522c <usb_d_ep_enable+0x68>)
    51e2:	4413      	add	r3, r2
    51e4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    51e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    51ea:	2b00      	cmp	r3, #0
    51ec:	da02      	bge.n	51f4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    51ee:	f06f 0311 	mvn.w	r3, #17
    51f2:	e014      	b.n	521e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    51f4:	693b      	ldr	r3, [r7, #16]
    51f6:	781b      	ldrb	r3, [r3, #0]
    51f8:	2b00      	cmp	r3, #0
    51fa:	d101      	bne.n	5200 <usb_d_ep_enable+0x3c>
    51fc:	2202      	movs	r2, #2
    51fe:	e000      	b.n	5202 <usb_d_ep_enable+0x3e>
    5200:	2201      	movs	r2, #1
    5202:	693b      	ldr	r3, [r7, #16]
    5204:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5206:	79fb      	ldrb	r3, [r7, #7]
    5208:	4618      	mov	r0, r3
    520a:	4b09      	ldr	r3, [pc, #36]	; (5230 <usb_d_ep_enable+0x6c>)
    520c:	4798      	blx	r3
    520e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5210:	68fb      	ldr	r3, [r7, #12]
    5212:	2b00      	cmp	r3, #0
    5214:	da02      	bge.n	521c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5216:	693b      	ldr	r3, [r7, #16]
    5218:	2200      	movs	r2, #0
    521a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    521c:	68fb      	ldr	r3, [r7, #12]
}
    521e:	4618      	mov	r0, r3
    5220:	3718      	adds	r7, #24
    5222:	46bd      	mov	sp, r7
    5224:	bd80      	pop	{r7, pc}
    5226:	bf00      	nop
    5228:	00004bf1 	.word	0x00004bf1
    522c:	20001c34 	.word	0x20001c34
    5230:	0000bf35 	.word	0x0000bf35

00005234 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5234:	b590      	push	{r4, r7, lr}
    5236:	b08d      	sub	sp, #52	; 0x34
    5238:	af02      	add	r7, sp, #8
    523a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    523c:	687b      	ldr	r3, [r7, #4]
    523e:	7a1b      	ldrb	r3, [r3, #8]
    5240:	4618      	mov	r0, r3
    5242:	4b51      	ldr	r3, [pc, #324]	; (5388 <usb_d_ep_transfer+0x154>)
    5244:	4798      	blx	r3
    5246:	4603      	mov	r3, r0
    5248:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    524a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    524e:	015b      	lsls	r3, r3, #5
    5250:	4a4e      	ldr	r2, [pc, #312]	; (538c <usb_d_ep_transfer+0x158>)
    5252:	4413      	add	r3, r2
    5254:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	7a1b      	ldrb	r3, [r3, #8]
    525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    525e:	2b00      	cmp	r3, #0
    5260:	bf14      	ite	ne
    5262:	2301      	movne	r3, #1
    5264:	2300      	moveq	r3, #0
    5266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	7a5b      	ldrb	r3, [r3, #9]
    526e:	2b00      	cmp	r3, #0
    5270:	bf14      	ite	ne
    5272:	2301      	movne	r3, #1
    5274:	2300      	moveq	r3, #0
    5276:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	685b      	ldr	r3, [r3, #4]
    527e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5280:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5284:	2b00      	cmp	r3, #0
    5286:	da02      	bge.n	528e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    5288:	f06f 0311 	mvn.w	r3, #17
    528c:	e077      	b.n	537e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    528e:	f107 0308 	add.w	r3, r7, #8
    5292:	4618      	mov	r0, r3
    5294:	4b3e      	ldr	r3, [pc, #248]	; (5390 <usb_d_ep_transfer+0x15c>)
    5296:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5298:	69bb      	ldr	r3, [r7, #24]
    529a:	789b      	ldrb	r3, [r3, #2]
    529c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    529e:	7bfb      	ldrb	r3, [r7, #15]
    52a0:	b2db      	uxtb	r3, r3
    52a2:	2b01      	cmp	r3, #1
    52a4:	d10c      	bne.n	52c0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    52a6:	69bb      	ldr	r3, [r7, #24]
    52a8:	2203      	movs	r2, #3
    52aa:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    52ac:	f107 0308 	add.w	r3, r7, #8
    52b0:	4618      	mov	r0, r3
    52b2:	4b38      	ldr	r3, [pc, #224]	; (5394 <usb_d_ep_transfer+0x160>)
    52b4:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    52b6:	69bb      	ldr	r3, [r7, #24]
    52b8:	781b      	ldrb	r3, [r3, #0]
    52ba:	2b00      	cmp	r3, #0
    52bc:	d151      	bne.n	5362 <usb_d_ep_transfer+0x12e>
    52be:	e017      	b.n	52f0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    52c0:	f107 0308 	add.w	r3, r7, #8
    52c4:	4618      	mov	r0, r3
    52c6:	4b33      	ldr	r3, [pc, #204]	; (5394 <usb_d_ep_transfer+0x160>)
    52c8:	4798      	blx	r3
		switch (state) {
    52ca:	7bfb      	ldrb	r3, [r7, #15]
    52cc:	b2db      	uxtb	r3, r3
    52ce:	2b05      	cmp	r3, #5
    52d0:	d004      	beq.n	52dc <usb_d_ep_transfer+0xa8>
    52d2:	2b06      	cmp	r3, #6
    52d4:	d004      	beq.n	52e0 <usb_d_ep_transfer+0xac>
    52d6:	2b00      	cmp	r3, #0
    52d8:	d005      	beq.n	52e6 <usb_d_ep_transfer+0xb2>
    52da:	e007      	b.n	52ec <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    52dc:	2302      	movs	r3, #2
    52de:	e04e      	b.n	537e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    52e0:	f06f 030f 	mvn.w	r3, #15
    52e4:	e04b      	b.n	537e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    52e6:	f06f 0312 	mvn.w	r3, #18
    52ea:	e048      	b.n	537e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    52ec:	2301      	movs	r3, #1
    52ee:	e046      	b.n	537e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    52f0:	69bb      	ldr	r3, [r7, #24]
    52f2:	7c9b      	ldrb	r3, [r3, #18]
    52f4:	b29a      	uxth	r2, r3
    52f6:	69bb      	ldr	r3, [r7, #24]
    52f8:	7cdb      	ldrb	r3, [r3, #19]
    52fa:	b29b      	uxth	r3, r3
    52fc:	021b      	lsls	r3, r3, #8
    52fe:	b29b      	uxth	r3, r3
    5300:	4413      	add	r3, r2
    5302:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    5304:	8afb      	ldrh	r3, [r7, #22]
    5306:	2b00      	cmp	r3, #0
    5308:	d10b      	bne.n	5322 <usb_d_ep_transfer+0xee>
			dir                 = true;
    530a:	2301      	movs	r3, #1
    530c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    5310:	2300      	movs	r3, #0
    5312:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    5314:	2301      	movs	r3, #1
    5316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    531a:	69bb      	ldr	r3, [r7, #24]
    531c:	2204      	movs	r2, #4
    531e:	709a      	strb	r2, [r3, #2]
    5320:	e01f      	b.n	5362 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5322:	69bb      	ldr	r3, [r7, #24]
    5324:	7b1b      	ldrb	r3, [r3, #12]
    5326:	f003 0380 	and.w	r3, r3, #128	; 0x80
    532a:	2b00      	cmp	r3, #0
    532c:	bf14      	ite	ne
    532e:	2301      	movne	r3, #1
    5330:	2300      	moveq	r3, #0
    5332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    5336:	8afa      	ldrh	r2, [r7, #22]
    5338:	6a3b      	ldr	r3, [r7, #32]
    533a:	429a      	cmp	r2, r3
    533c:	d201      	bcs.n	5342 <usb_d_ep_transfer+0x10e>
				len = req_len;
    533e:	8afb      	ldrh	r3, [r7, #22]
    5340:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    5342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    5346:	2b00      	cmp	r3, #0
    5348:	d008      	beq.n	535c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    534a:	8afa      	ldrh	r2, [r7, #22]
    534c:	6a3b      	ldr	r3, [r7, #32]
    534e:	429a      	cmp	r2, r3
    5350:	bf8c      	ite	hi
    5352:	2301      	movhi	r3, #1
    5354:	2300      	movls	r3, #0
    5356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    535a:	e002      	b.n	5362 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    535c:	2300      	movs	r3, #0
    535e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5362:	687b      	ldr	r3, [r7, #4]
    5364:	7a18      	ldrb	r0, [r3, #8]
    5366:	687b      	ldr	r3, [r7, #4]
    5368:	681a      	ldr	r2, [r3, #0]
    536a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    536e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    5372:	9300      	str	r3, [sp, #0]
    5374:	6a3b      	ldr	r3, [r7, #32]
    5376:	4c08      	ldr	r4, [pc, #32]	; (5398 <usb_d_ep_transfer+0x164>)
    5378:	47a0      	blx	r4
    537a:	6138      	str	r0, [r7, #16]
	return rc;
    537c:	693b      	ldr	r3, [r7, #16]
}
    537e:	4618      	mov	r0, r3
    5380:	372c      	adds	r7, #44	; 0x2c
    5382:	46bd      	mov	sp, r7
    5384:	bd90      	pop	{r4, r7, pc}
    5386:	bf00      	nop
    5388:	00004bf1 	.word	0x00004bf1
    538c:	20001c34 	.word	0x20001c34
    5390:	000036b9 	.word	0x000036b9
    5394:	000036df 	.word	0x000036df
    5398:	00004c71 	.word	0x00004c71

0000539c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    539c:	b580      	push	{r7, lr}
    539e:	b084      	sub	sp, #16
    53a0:	af00      	add	r7, sp, #0
    53a2:	4603      	mov	r3, r0
    53a4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    53a6:	79fb      	ldrb	r3, [r7, #7]
    53a8:	4618      	mov	r0, r3
    53aa:	4b0e      	ldr	r3, [pc, #56]	; (53e4 <usb_d_ep_abort+0x48>)
    53ac:	4798      	blx	r3
    53ae:	4603      	mov	r3, r0
    53b0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    53b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53b6:	015b      	lsls	r3, r3, #5
    53b8:	4a0b      	ldr	r2, [pc, #44]	; (53e8 <usb_d_ep_abort+0x4c>)
    53ba:	4413      	add	r3, r2
    53bc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    53be:	f997 300f 	ldrsb.w	r3, [r7, #15]
    53c2:	2b00      	cmp	r3, #0
    53c4:	db0a      	blt.n	53dc <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    53c6:	79fb      	ldrb	r3, [r7, #7]
    53c8:	4618      	mov	r0, r3
    53ca:	4b08      	ldr	r3, [pc, #32]	; (53ec <usb_d_ep_abort+0x50>)
    53cc:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    53ce:	68bb      	ldr	r3, [r7, #8]
    53d0:	2201      	movs	r2, #1
    53d2:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    53d4:	68bb      	ldr	r3, [r7, #8]
    53d6:	2204      	movs	r2, #4
    53d8:	70da      	strb	r2, [r3, #3]
    53da:	e000      	b.n	53de <usb_d_ep_abort+0x42>
		return;
    53dc:	bf00      	nop
}
    53de:	3710      	adds	r7, #16
    53e0:	46bd      	mov	sp, r7
    53e2:	bd80      	pop	{r7, pc}
    53e4:	00004bf1 	.word	0x00004bf1
    53e8:	20001c34 	.word	0x20001c34
    53ec:	0000c6a1 	.word	0x0000c6a1

000053f0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    53f0:	b580      	push	{r7, lr}
    53f2:	b086      	sub	sp, #24
    53f4:	af00      	add	r7, sp, #0
    53f6:	4603      	mov	r3, r0
    53f8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    53fa:	79fb      	ldrb	r3, [r7, #7]
    53fc:	4618      	mov	r0, r3
    53fe:	4b1a      	ldr	r3, [pc, #104]	; (5468 <_usb_d_ep_halt_clr+0x78>)
    5400:	4798      	blx	r3
    5402:	4603      	mov	r3, r0
    5404:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5406:	f997 3017 	ldrsb.w	r3, [r7, #23]
    540a:	015b      	lsls	r3, r3, #5
    540c:	4a17      	ldr	r2, [pc, #92]	; (546c <_usb_d_ep_halt_clr+0x7c>)
    540e:	4413      	add	r3, r2
    5410:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5412:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5416:	2b00      	cmp	r3, #0
    5418:	da02      	bge.n	5420 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    541a:	f06f 0311 	mvn.w	r3, #17
    541e:	e01f      	b.n	5460 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5420:	79fb      	ldrb	r3, [r7, #7]
    5422:	2102      	movs	r1, #2
    5424:	4618      	mov	r0, r3
    5426:	4b12      	ldr	r3, [pc, #72]	; (5470 <_usb_d_ep_halt_clr+0x80>)
    5428:	4798      	blx	r3
    542a:	4603      	mov	r3, r0
    542c:	2b00      	cmp	r3, #0
    542e:	d016      	beq.n	545e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5430:	79fb      	ldrb	r3, [r7, #7]
    5432:	2100      	movs	r1, #0
    5434:	4618      	mov	r0, r3
    5436:	4b0e      	ldr	r3, [pc, #56]	; (5470 <_usb_d_ep_halt_clr+0x80>)
    5438:	4798      	blx	r3
    543a:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    543c:	68fb      	ldr	r3, [r7, #12]
    543e:	2b00      	cmp	r3, #0
    5440:	da01      	bge.n	5446 <_usb_d_ep_halt_clr+0x56>
			return rc;
    5442:	68fb      	ldr	r3, [r7, #12]
    5444:	e00c      	b.n	5460 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5446:	693b      	ldr	r3, [r7, #16]
    5448:	2201      	movs	r2, #1
    544a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    544c:	693b      	ldr	r3, [r7, #16]
    544e:	2203      	movs	r2, #3
    5450:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5452:	693b      	ldr	r3, [r7, #16]
    5454:	69db      	ldr	r3, [r3, #28]
    5456:	79f8      	ldrb	r0, [r7, #7]
    5458:	2200      	movs	r2, #0
    545a:	2103      	movs	r1, #3
    545c:	4798      	blx	r3
	}
	return ERR_NONE;
    545e:	2300      	movs	r3, #0
}
    5460:	4618      	mov	r0, r3
    5462:	3718      	adds	r7, #24
    5464:	46bd      	mov	sp, r7
    5466:	bd80      	pop	{r7, pc}
    5468:	00004bf1 	.word	0x00004bf1
    546c:	20001c34 	.word	0x20001c34
    5470:	0000c2ad 	.word	0x0000c2ad

00005474 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5474:	b580      	push	{r7, lr}
    5476:	b082      	sub	sp, #8
    5478:	af00      	add	r7, sp, #0
    547a:	4603      	mov	r3, r0
    547c:	460a      	mov	r2, r1
    547e:	71fb      	strb	r3, [r7, #7]
    5480:	4613      	mov	r3, r2
    5482:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    5484:	79bb      	ldrb	r3, [r7, #6]
    5486:	2b00      	cmp	r3, #0
    5488:	d105      	bne.n	5496 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    548a:	79fb      	ldrb	r3, [r7, #7]
    548c:	4618      	mov	r0, r3
    548e:	4b0c      	ldr	r3, [pc, #48]	; (54c0 <usb_d_ep_halt+0x4c>)
    5490:	4798      	blx	r3
    5492:	4603      	mov	r3, r0
    5494:	e00f      	b.n	54b6 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    5496:	79bb      	ldrb	r3, [r7, #6]
    5498:	2b01      	cmp	r3, #1
    549a:	d106      	bne.n	54aa <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    549c:	79fb      	ldrb	r3, [r7, #7]
    549e:	2101      	movs	r1, #1
    54a0:	4618      	mov	r0, r3
    54a2:	4b08      	ldr	r3, [pc, #32]	; (54c4 <usb_d_ep_halt+0x50>)
    54a4:	4798      	blx	r3
    54a6:	4603      	mov	r3, r0
    54a8:	e005      	b.n	54b6 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    54aa:	79fb      	ldrb	r3, [r7, #7]
    54ac:	2102      	movs	r1, #2
    54ae:	4618      	mov	r0, r3
    54b0:	4b04      	ldr	r3, [pc, #16]	; (54c4 <usb_d_ep_halt+0x50>)
    54b2:	4798      	blx	r3
    54b4:	4603      	mov	r3, r0
	}
}
    54b6:	4618      	mov	r0, r3
    54b8:	3708      	adds	r7, #8
    54ba:	46bd      	mov	sp, r7
    54bc:	bd80      	pop	{r7, pc}
    54be:	bf00      	nop
    54c0:	000053f1 	.word	0x000053f1
    54c4:	0000c2ad 	.word	0x0000c2ad

000054c8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    54c8:	b580      	push	{r7, lr}
    54ca:	b086      	sub	sp, #24
    54cc:	af00      	add	r7, sp, #0
    54ce:	4603      	mov	r3, r0
    54d0:	603a      	str	r2, [r7, #0]
    54d2:	71fb      	strb	r3, [r7, #7]
    54d4:	460b      	mov	r3, r1
    54d6:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    54d8:	79fb      	ldrb	r3, [r7, #7]
    54da:	4618      	mov	r0, r3
    54dc:	4b16      	ldr	r3, [pc, #88]	; (5538 <usb_d_ep_register_callback+0x70>)
    54de:	4798      	blx	r3
    54e0:	4603      	mov	r3, r0
    54e2:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    54e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    54e8:	015b      	lsls	r3, r3, #5
    54ea:	4a14      	ldr	r2, [pc, #80]	; (553c <usb_d_ep_register_callback+0x74>)
    54ec:	4413      	add	r3, r2
    54ee:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    54f0:	683b      	ldr	r3, [r7, #0]
    54f2:	2b00      	cmp	r3, #0
    54f4:	d001      	beq.n	54fa <usb_d_ep_register_callback+0x32>
    54f6:	683b      	ldr	r3, [r7, #0]
    54f8:	e000      	b.n	54fc <usb_d_ep_register_callback+0x34>
    54fa:	4b11      	ldr	r3, [pc, #68]	; (5540 <usb_d_ep_register_callback+0x78>)
    54fc:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    54fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5502:	2b00      	cmp	r3, #0
    5504:	db13      	blt.n	552e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    5506:	79bb      	ldrb	r3, [r7, #6]
    5508:	2b01      	cmp	r3, #1
    550a:	d008      	beq.n	551e <usb_d_ep_register_callback+0x56>
    550c:	2b02      	cmp	r3, #2
    550e:	d00a      	beq.n	5526 <usb_d_ep_register_callback+0x5e>
    5510:	2b00      	cmp	r3, #0
    5512:	d000      	beq.n	5516 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    5514:	e00c      	b.n	5530 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5516:	693b      	ldr	r3, [r7, #16]
    5518:	68fa      	ldr	r2, [r7, #12]
    551a:	615a      	str	r2, [r3, #20]
		break;
    551c:	e008      	b.n	5530 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    551e:	693b      	ldr	r3, [r7, #16]
    5520:	68fa      	ldr	r2, [r7, #12]
    5522:	619a      	str	r2, [r3, #24]
		break;
    5524:	e004      	b.n	5530 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5526:	693b      	ldr	r3, [r7, #16]
    5528:	68fa      	ldr	r2, [r7, #12]
    552a:	61da      	str	r2, [r3, #28]
		break;
    552c:	e000      	b.n	5530 <usb_d_ep_register_callback+0x68>
		return;
    552e:	bf00      	nop
	}
}
    5530:	3718      	adds	r7, #24
    5532:	46bd      	mov	sp, r7
    5534:	bd80      	pop	{r7, pc}
    5536:	bf00      	nop
    5538:	00004bf1 	.word	0x00004bf1
    553c:	20001c34 	.word	0x20001c34
    5540:	00004cc5 	.word	0x00004cc5

00005544 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    5544:	b480      	push	{r7}
    5546:	b085      	sub	sp, #20
    5548:	af00      	add	r7, sp, #0
    554a:	4603      	mov	r3, r0
    554c:	60b9      	str	r1, [r7, #8]
    554e:	607a      	str	r2, [r7, #4]
    5550:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    5552:	7bfb      	ldrb	r3, [r7, #15]
    5554:	f083 0301 	eor.w	r3, r3, #1
    5558:	b2db      	uxtb	r3, r3
    555a:	2b00      	cmp	r3, #0
    555c:	d000      	beq.n	5560 <assert+0x1c>
		__asm("BKPT #0");
    555e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    5560:	bf00      	nop
    5562:	3714      	adds	r7, #20
    5564:	46bd      	mov	sp, r7
    5566:	f85d 7b04 	ldr.w	r7, [sp], #4
    556a:	4770      	bx	lr

0000556c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    556c:	b480      	push	{r7}
    556e:	b085      	sub	sp, #20
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
    5574:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	60fb      	str	r3, [r7, #12]
    557c:	e008      	b.n	5590 <is_list_element+0x24>
		if (it == element) {
    557e:	68fa      	ldr	r2, [r7, #12]
    5580:	683b      	ldr	r3, [r7, #0]
    5582:	429a      	cmp	r2, r3
    5584:	d101      	bne.n	558a <is_list_element+0x1e>
			return true;
    5586:	2301      	movs	r3, #1
    5588:	e006      	b.n	5598 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    558a:	68fb      	ldr	r3, [r7, #12]
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	60fb      	str	r3, [r7, #12]
    5590:	68fb      	ldr	r3, [r7, #12]
    5592:	2b00      	cmp	r3, #0
    5594:	d1f3      	bne.n	557e <is_list_element+0x12>
		}
	}

	return false;
    5596:	2300      	movs	r3, #0
}
    5598:	4618      	mov	r0, r3
    559a:	3714      	adds	r7, #20
    559c:	46bd      	mov	sp, r7
    559e:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a2:	4770      	bx	lr

000055a4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b082      	sub	sp, #8
    55a8:	af00      	add	r7, sp, #0
    55aa:	6078      	str	r0, [r7, #4]
    55ac:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    55ae:	6839      	ldr	r1, [r7, #0]
    55b0:	6878      	ldr	r0, [r7, #4]
    55b2:	4b0f      	ldr	r3, [pc, #60]	; (55f0 <list_insert_as_head+0x4c>)
    55b4:	4798      	blx	r3
    55b6:	4603      	mov	r3, r0
    55b8:	2b00      	cmp	r3, #0
    55ba:	bf14      	ite	ne
    55bc:	2301      	movne	r3, #1
    55be:	2300      	moveq	r3, #0
    55c0:	b2db      	uxtb	r3, r3
    55c2:	f083 0301 	eor.w	r3, r3, #1
    55c6:	b2db      	uxtb	r3, r3
    55c8:	f003 0301 	and.w	r3, r3, #1
    55cc:	b2db      	uxtb	r3, r3
    55ce:	2239      	movs	r2, #57	; 0x39
    55d0:	4908      	ldr	r1, [pc, #32]	; (55f4 <list_insert_as_head+0x50>)
    55d2:	4618      	mov	r0, r3
    55d4:	4b08      	ldr	r3, [pc, #32]	; (55f8 <list_insert_as_head+0x54>)
    55d6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	681a      	ldr	r2, [r3, #0]
    55dc:	683b      	ldr	r3, [r7, #0]
    55de:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	683a      	ldr	r2, [r7, #0]
    55e4:	601a      	str	r2, [r3, #0]
}
    55e6:	bf00      	nop
    55e8:	3708      	adds	r7, #8
    55ea:	46bd      	mov	sp, r7
    55ec:	bd80      	pop	{r7, pc}
    55ee:	bf00      	nop
    55f0:	0000556d 	.word	0x0000556d
    55f4:	00011a78 	.word	0x00011a78
    55f8:	00005545 	.word	0x00005545

000055fc <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    55fc:	b480      	push	{r7}
    55fe:	b083      	sub	sp, #12
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
    5604:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    5606:	687b      	ldr	r3, [r7, #4]
    5608:	681a      	ldr	r2, [r3, #0]
    560a:	683b      	ldr	r3, [r7, #0]
    560c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	683a      	ldr	r2, [r7, #0]
    5612:	601a      	str	r2, [r3, #0]
}
    5614:	bf00      	nop
    5616:	370c      	adds	r7, #12
    5618:	46bd      	mov	sp, r7
    561a:	f85d 7b04 	ldr.w	r7, [sp], #4
    561e:	4770      	bx	lr

00005620 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    5620:	b580      	push	{r7, lr}
    5622:	b084      	sub	sp, #16
    5624:	af00      	add	r7, sp, #0
    5626:	6078      	str	r0, [r7, #4]
    5628:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    562a:	687b      	ldr	r3, [r7, #4]
    562c:	681b      	ldr	r3, [r3, #0]
    562e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    5630:	6839      	ldr	r1, [r7, #0]
    5632:	6878      	ldr	r0, [r7, #4]
    5634:	4b16      	ldr	r3, [pc, #88]	; (5690 <list_insert_at_end+0x70>)
    5636:	4798      	blx	r3
    5638:	4603      	mov	r3, r0
    563a:	2b00      	cmp	r3, #0
    563c:	bf14      	ite	ne
    563e:	2301      	movne	r3, #1
    5640:	2300      	moveq	r3, #0
    5642:	b2db      	uxtb	r3, r3
    5644:	f083 0301 	eor.w	r3, r3, #1
    5648:	b2db      	uxtb	r3, r3
    564a:	f003 0301 	and.w	r3, r3, #1
    564e:	b2db      	uxtb	r3, r3
    5650:	224f      	movs	r2, #79	; 0x4f
    5652:	4910      	ldr	r1, [pc, #64]	; (5694 <list_insert_at_end+0x74>)
    5654:	4618      	mov	r0, r3
    5656:	4b10      	ldr	r3, [pc, #64]	; (5698 <list_insert_at_end+0x78>)
    5658:	4798      	blx	r3

	if (!list->head) {
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	681b      	ldr	r3, [r3, #0]
    565e:	2b00      	cmp	r3, #0
    5660:	d109      	bne.n	5676 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	683a      	ldr	r2, [r7, #0]
    5666:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    5668:	683b      	ldr	r3, [r7, #0]
    566a:	2200      	movs	r2, #0
    566c:	601a      	str	r2, [r3, #0]
		return;
    566e:	e00c      	b.n	568a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    5670:	68fb      	ldr	r3, [r7, #12]
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    5676:	68fb      	ldr	r3, [r7, #12]
    5678:	681b      	ldr	r3, [r3, #0]
    567a:	2b00      	cmp	r3, #0
    567c:	d1f8      	bne.n	5670 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    567e:	68fb      	ldr	r3, [r7, #12]
    5680:	683a      	ldr	r2, [r7, #0]
    5682:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    5684:	683b      	ldr	r3, [r7, #0]
    5686:	2200      	movs	r2, #0
    5688:	601a      	str	r2, [r3, #0]
}
    568a:	3710      	adds	r7, #16
    568c:	46bd      	mov	sp, r7
    568e:	bd80      	pop	{r7, pc}
    5690:	0000556d 	.word	0x0000556d
    5694:	00011a78 	.word	0x00011a78
    5698:	00005545 	.word	0x00005545

0000569c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    569c:	b480      	push	{r7}
    569e:	b085      	sub	sp, #20
    56a0:	af00      	add	r7, sp, #0
    56a2:	6078      	str	r0, [r7, #4]
	if (list->head) {
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d009      	beq.n	56c0 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	681b      	ldr	r3, [r3, #0]
    56b0:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    56b2:	687b      	ldr	r3, [r7, #4]
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	681a      	ldr	r2, [r3, #0]
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    56bc:	68fb      	ldr	r3, [r7, #12]
    56be:	e000      	b.n	56c2 <list_remove_head+0x26>
	}

	return NULL;
    56c0:	2300      	movs	r3, #0
}
    56c2:	4618      	mov	r0, r3
    56c4:	3714      	adds	r7, #20
    56c6:	46bd      	mov	sp, r7
    56c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56cc:	4770      	bx	lr

000056ce <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    56ce:	b480      	push	{r7}
    56d0:	b085      	sub	sp, #20
    56d2:	af00      	add	r7, sp, #0
    56d4:	6078      	str	r0, [r7, #4]
    56d6:	6039      	str	r1, [r7, #0]
	if (!element) {
    56d8:	683b      	ldr	r3, [r7, #0]
    56da:	2b00      	cmp	r3, #0
    56dc:	d101      	bne.n	56e2 <list_delete_element+0x14>
		return false;
    56de:	2300      	movs	r3, #0
    56e0:	e024      	b.n	572c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    56e2:	687b      	ldr	r3, [r7, #4]
    56e4:	681a      	ldr	r2, [r3, #0]
    56e6:	683b      	ldr	r3, [r7, #0]
    56e8:	429a      	cmp	r2, r3
    56ea:	d106      	bne.n	56fa <list_delete_element+0x2c>
		list->head = list->head->next;
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	681b      	ldr	r3, [r3, #0]
    56f0:	681a      	ldr	r2, [r3, #0]
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	601a      	str	r2, [r3, #0]
		return true;
    56f6:	2301      	movs	r3, #1
    56f8:	e018      	b.n	572c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    5700:	e002      	b.n	5708 <list_delete_element+0x3a>
			it = it->next;
    5702:	68fb      	ldr	r3, [r7, #12]
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    5708:	68fb      	ldr	r3, [r7, #12]
    570a:	2b00      	cmp	r3, #0
    570c:	d004      	beq.n	5718 <list_delete_element+0x4a>
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	681a      	ldr	r2, [r3, #0]
    5712:	683b      	ldr	r3, [r7, #0]
    5714:	429a      	cmp	r2, r3
    5716:	d1f4      	bne.n	5702 <list_delete_element+0x34>
		}
		if (it) {
    5718:	68fb      	ldr	r3, [r7, #12]
    571a:	2b00      	cmp	r3, #0
    571c:	d005      	beq.n	572a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    571e:	683b      	ldr	r3, [r7, #0]
    5720:	681a      	ldr	r2, [r3, #0]
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	601a      	str	r2, [r3, #0]
			return true;
    5726:	2301      	movs	r3, #1
    5728:	e000      	b.n	572c <list_delete_element+0x5e>
		}
	}

	return false;
    572a:	2300      	movs	r3, #0
}
    572c:	4618      	mov	r0, r3
    572e:	3714      	adds	r7, #20
    5730:	46bd      	mov	sp, r7
    5732:	f85d 7b04 	ldr.w	r7, [sp], #4
    5736:	4770      	bx	lr

00005738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    5738:	b480      	push	{r7}
    573a:	b083      	sub	sp, #12
    573c:	af00      	add	r7, sp, #0
    573e:	4603      	mov	r3, r0
    5740:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5746:	2b00      	cmp	r3, #0
    5748:	db0b      	blt.n	5762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    574a:	4909      	ldr	r1, [pc, #36]	; (5770 <__NVIC_EnableIRQ+0x38>)
    574c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5750:	095b      	lsrs	r3, r3, #5
    5752:	88fa      	ldrh	r2, [r7, #6]
    5754:	f002 021f 	and.w	r2, r2, #31
    5758:	2001      	movs	r0, #1
    575a:	fa00 f202 	lsl.w	r2, r0, r2
    575e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    5762:	bf00      	nop
    5764:	370c      	adds	r7, #12
    5766:	46bd      	mov	sp, r7
    5768:	f85d 7b04 	ldr.w	r7, [sp], #4
    576c:	4770      	bx	lr
    576e:	bf00      	nop
    5770:	e000e100 	.word	0xe000e100

00005774 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    5774:	b480      	push	{r7}
    5776:	b083      	sub	sp, #12
    5778:	af00      	add	r7, sp, #0
    577a:	4603      	mov	r3, r0
    577c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    577e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5782:	2b00      	cmp	r3, #0
    5784:	db10      	blt.n	57a8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5786:	490b      	ldr	r1, [pc, #44]	; (57b4 <__NVIC_DisableIRQ+0x40>)
    5788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    578c:	095b      	lsrs	r3, r3, #5
    578e:	88fa      	ldrh	r2, [r7, #6]
    5790:	f002 021f 	and.w	r2, r2, #31
    5794:	2001      	movs	r0, #1
    5796:	fa00 f202 	lsl.w	r2, r0, r2
    579a:	3320      	adds	r3, #32
    579c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    57a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    57a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    57a8:	bf00      	nop
    57aa:	370c      	adds	r7, #12
    57ac:	46bd      	mov	sp, r7
    57ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b2:	4770      	bx	lr
    57b4:	e000e100 	.word	0xe000e100

000057b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    57b8:	b480      	push	{r7}
    57ba:	b083      	sub	sp, #12
    57bc:	af00      	add	r7, sp, #0
    57be:	4603      	mov	r3, r0
    57c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57c6:	2b00      	cmp	r3, #0
    57c8:	db0c      	blt.n	57e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57ca:	4909      	ldr	r1, [pc, #36]	; (57f0 <__NVIC_ClearPendingIRQ+0x38>)
    57cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57d0:	095b      	lsrs	r3, r3, #5
    57d2:	88fa      	ldrh	r2, [r7, #6]
    57d4:	f002 021f 	and.w	r2, r2, #31
    57d8:	2001      	movs	r0, #1
    57da:	fa00 f202 	lsl.w	r2, r0, r2
    57de:	3360      	adds	r3, #96	; 0x60
    57e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    57e4:	bf00      	nop
    57e6:	370c      	adds	r7, #12
    57e8:	46bd      	mov	sp, r7
    57ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ee:	4770      	bx	lr
    57f0:	e000e100 	.word	0xe000e100

000057f4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    57f4:	b480      	push	{r7}
    57f6:	b083      	sub	sp, #12
    57f8:	af00      	add	r7, sp, #0
    57fa:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    57fc:	687b      	ldr	r3, [r7, #4]
    57fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5800:	095b      	lsrs	r3, r3, #5
    5802:	f003 0301 	and.w	r3, r3, #1
    5806:	2b00      	cmp	r3, #0
    5808:	bf14      	ite	ne
    580a:	2301      	movne	r3, #1
    580c:	2300      	moveq	r3, #0
    580e:	b2db      	uxtb	r3, r3
}
    5810:	4618      	mov	r0, r3
    5812:	370c      	adds	r7, #12
    5814:	46bd      	mov	sp, r7
    5816:	f85d 7b04 	ldr.w	r7, [sp], #4
    581a:	4770      	bx	lr

0000581c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    581c:	b480      	push	{r7}
    581e:	b083      	sub	sp, #12
    5820:	af00      	add	r7, sp, #0
    5822:	6078      	str	r0, [r7, #4]
    5824:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	683a      	ldr	r2, [r7, #0]
    582a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    582c:	bf00      	nop
    582e:	370c      	adds	r7, #12
    5830:	46bd      	mov	sp, r7
    5832:	f85d 7b04 	ldr.w	r7, [sp], #4
    5836:	4770      	bx	lr

00005838 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    5838:	b480      	push	{r7}
    583a:	b083      	sub	sp, #12
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
    5840:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    5842:	687b      	ldr	r3, [r7, #4]
    5844:	683a      	ldr	r2, [r7, #0]
    5846:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5848:	bf00      	nop
    584a:	370c      	adds	r7, #12
    584c:	46bd      	mov	sp, r7
    584e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5852:	4770      	bx	lr

00005854 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    5854:	b480      	push	{r7}
    5856:	b083      	sub	sp, #12
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    585c:	687b      	ldr	r3, [r7, #4]
    585e:	699b      	ldr	r3, [r3, #24]
    5860:	f043 0201 	orr.w	r2, r3, #1
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5868:	bf00      	nop
    586a:	370c      	adds	r7, #12
    586c:	46bd      	mov	sp, r7
    586e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5872:	4770      	bx	lr

00005874 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5874:	b480      	push	{r7}
    5876:	b085      	sub	sp, #20
    5878:	af00      	add	r7, sp, #0
    587a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	699b      	ldr	r3, [r3, #24]
    5880:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    5882:	68fb      	ldr	r3, [r7, #12]
    5884:	f003 0301 	and.w	r3, r3, #1
    5888:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    588a:	68fb      	ldr	r3, [r7, #12]
    588c:	2b00      	cmp	r3, #0
    588e:	bf14      	ite	ne
    5890:	2301      	movne	r3, #1
    5892:	2300      	moveq	r3, #0
    5894:	b2db      	uxtb	r3, r3
}
    5896:	4618      	mov	r0, r3
    5898:	3714      	adds	r7, #20
    589a:	46bd      	mov	sp, r7
    589c:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a0:	4770      	bx	lr

000058a2 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    58a2:	b480      	push	{r7}
    58a4:	b083      	sub	sp, #12
    58a6:	af00      	add	r7, sp, #0
    58a8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    58aa:	687b      	ldr	r3, [r7, #4]
    58ac:	699b      	ldr	r3, [r3, #24]
    58ae:	f023 0201 	bic.w	r2, r3, #1
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    58b6:	bf00      	nop
    58b8:	370c      	adds	r7, #12
    58ba:	46bd      	mov	sp, r7
    58bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c0:	4770      	bx	lr

000058c2 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    58c2:	b480      	push	{r7}
    58c4:	b083      	sub	sp, #12
    58c6:	af00      	add	r7, sp, #0
    58c8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    58ca:	687b      	ldr	r3, [r7, #4]
    58cc:	699b      	ldr	r3, [r3, #24]
    58ce:	f043 0202 	orr.w	r2, r3, #2
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    58d6:	bf00      	nop
    58d8:	370c      	adds	r7, #12
    58da:	46bd      	mov	sp, r7
    58dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    58e0:	4770      	bx	lr

000058e2 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    58e2:	b480      	push	{r7}
    58e4:	b083      	sub	sp, #12
    58e6:	af00      	add	r7, sp, #0
    58e8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	699b      	ldr	r3, [r3, #24]
    58ee:	f023 0202 	bic.w	r2, r3, #2
    58f2:	687b      	ldr	r3, [r7, #4]
    58f4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    58f6:	bf00      	nop
    58f8:	370c      	adds	r7, #12
    58fa:	46bd      	mov	sp, r7
    58fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5900:	4770      	bx	lr

00005902 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    5902:	b480      	push	{r7}
    5904:	b083      	sub	sp, #12
    5906:	af00      	add	r7, sp, #0
    5908:	6078      	str	r0, [r7, #4]
    590a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	699a      	ldr	r2, [r3, #24]
    5910:	683b      	ldr	r3, [r7, #0]
    5912:	431a      	orrs	r2, r3
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5918:	bf00      	nop
    591a:	370c      	adds	r7, #12
    591c:	46bd      	mov	sp, r7
    591e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5922:	4770      	bx	lr

00005924 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    5924:	b480      	push	{r7}
    5926:	b083      	sub	sp, #12
    5928:	af00      	add	r7, sp, #0
    592a:	6078      	str	r0, [r7, #4]
    592c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	683a      	ldr	r2, [r7, #0]
    5932:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5934:	bf00      	nop
    5936:	370c      	adds	r7, #12
    5938:	46bd      	mov	sp, r7
    593a:	f85d 7b04 	ldr.w	r7, [sp], #4
    593e:	4770      	bx	lr

00005940 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    5940:	b480      	push	{r7}
    5942:	b083      	sub	sp, #12
    5944:	af00      	add	r7, sp, #0
    5946:	6078      	str	r0, [r7, #4]
    5948:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    594a:	687b      	ldr	r3, [r7, #4]
    594c:	683a      	ldr	r2, [r7, #0]
    594e:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    5950:	bf00      	nop
    5952:	370c      	adds	r7, #12
    5954:	46bd      	mov	sp, r7
    5956:	f85d 7b04 	ldr.w	r7, [sp], #4
    595a:	4770      	bx	lr

0000595c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    595c:	b480      	push	{r7}
    595e:	b083      	sub	sp, #12
    5960:	af00      	add	r7, sp, #0
    5962:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    5968:	4618      	mov	r0, r3
    596a:	370c      	adds	r7, #12
    596c:	46bd      	mov	sp, r7
    596e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5972:	4770      	bx	lr

00005974 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5974:	b480      	push	{r7}
    5976:	b083      	sub	sp, #12
    5978:	af00      	add	r7, sp, #0
    597a:	6078      	str	r0, [r7, #4]
    597c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    597e:	687b      	ldr	r3, [r7, #4]
    5980:	683a      	ldr	r2, [r7, #0]
    5982:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    5984:	bf00      	nop
    5986:	370c      	adds	r7, #12
    5988:	46bd      	mov	sp, r7
    598a:	f85d 7b04 	ldr.w	r7, [sp], #4
    598e:	4770      	bx	lr

00005990 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    5990:	b480      	push	{r7}
    5992:	b083      	sub	sp, #12
    5994:	af00      	add	r7, sp, #0
    5996:	6078      	str	r0, [r7, #4]
    5998:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    599a:	687b      	ldr	r3, [r7, #4]
    599c:	683a      	ldr	r2, [r7, #0]
    599e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    59a2:	bf00      	nop
    59a4:	370c      	adds	r7, #12
    59a6:	46bd      	mov	sp, r7
    59a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ac:	4770      	bx	lr

000059ae <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    59ae:	b480      	push	{r7}
    59b0:	b083      	sub	sp, #12
    59b2:	af00      	add	r7, sp, #0
    59b4:	6078      	str	r0, [r7, #4]
    59b6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	683a      	ldr	r2, [r7, #0]
    59bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    59c0:	bf00      	nop
    59c2:	370c      	adds	r7, #12
    59c4:	46bd      	mov	sp, r7
    59c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ca:	4770      	bx	lr

000059cc <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    59cc:	b480      	push	{r7}
    59ce:	b083      	sub	sp, #12
    59d0:	af00      	add	r7, sp, #0
    59d2:	6078      	str	r0, [r7, #4]
    59d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	683a      	ldr	r2, [r7, #0]
    59da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    59de:	bf00      	nop
    59e0:	370c      	adds	r7, #12
    59e2:	46bd      	mov	sp, r7
    59e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e8:	4770      	bx	lr

000059ea <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    59ea:	b480      	push	{r7}
    59ec:	b083      	sub	sp, #12
    59ee:	af00      	add	r7, sp, #0
    59f0:	6078      	str	r0, [r7, #4]
    59f2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	683a      	ldr	r2, [r7, #0]
    59f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    59fc:	bf00      	nop
    59fe:	370c      	adds	r7, #12
    5a00:	46bd      	mov	sp, r7
    5a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a06:	4770      	bx	lr

00005a08 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    5a08:	b480      	push	{r7}
    5a0a:	b083      	sub	sp, #12
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
    5a10:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5a12:	687b      	ldr	r3, [r7, #4]
    5a14:	683a      	ldr	r2, [r7, #0]
    5a16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a1a:	bf00      	nop
    5a1c:	370c      	adds	r7, #12
    5a1e:	46bd      	mov	sp, r7
    5a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a24:	4770      	bx	lr

00005a26 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    5a26:	b480      	push	{r7}
    5a28:	b083      	sub	sp, #12
    5a2a:	af00      	add	r7, sp, #0
    5a2c:	6078      	str	r0, [r7, #4]
    5a2e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	683a      	ldr	r2, [r7, #0]
    5a34:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a38:	bf00      	nop
    5a3a:	370c      	adds	r7, #12
    5a3c:	46bd      	mov	sp, r7
    5a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a42:	4770      	bx	lr

00005a44 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    5a44:	b480      	push	{r7}
    5a46:	b083      	sub	sp, #12
    5a48:	af00      	add	r7, sp, #0
    5a4a:	6078      	str	r0, [r7, #4]
    5a4c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	683a      	ldr	r2, [r7, #0]
    5a52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a56:	bf00      	nop
    5a58:	370c      	adds	r7, #12
    5a5a:	46bd      	mov	sp, r7
    5a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a60:	4770      	bx	lr

00005a62 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    5a62:	b480      	push	{r7}
    5a64:	b083      	sub	sp, #12
    5a66:	af00      	add	r7, sp, #0
    5a68:	6078      	str	r0, [r7, #4]
    5a6a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	683a      	ldr	r2, [r7, #0]
    5a70:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a74:	bf00      	nop
    5a76:	370c      	adds	r7, #12
    5a78:	46bd      	mov	sp, r7
    5a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a7e:	4770      	bx	lr

00005a80 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    5a80:	b480      	push	{r7}
    5a82:	b083      	sub	sp, #12
    5a84:	af00      	add	r7, sp, #0
    5a86:	6078      	str	r0, [r7, #4]
    5a88:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    5a8a:	687b      	ldr	r3, [r7, #4]
    5a8c:	683a      	ldr	r2, [r7, #0]
    5a8e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5a92:	bf00      	nop
    5a94:	370c      	adds	r7, #12
    5a96:	46bd      	mov	sp, r7
    5a98:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a9c:	4770      	bx	lr
	...

00005aa0 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    5aa0:	b580      	push	{r7, lr}
    5aa2:	b082      	sub	sp, #8
    5aa4:	af00      	add	r7, sp, #0
    5aa6:	6078      	str	r0, [r7, #4]
    5aa8:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	683a      	ldr	r2, [r7, #0]
    5aae:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	681b      	ldr	r3, [r3, #0]
    5ab4:	4618      	mov	r0, r3
    5ab6:	4b53      	ldr	r3, [pc, #332]	; (5c04 <_can_async_init+0x164>)
    5ab8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    5aba:	bf00      	nop
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	681b      	ldr	r3, [r3, #0]
    5ac0:	4618      	mov	r0, r3
    5ac2:	4b51      	ldr	r3, [pc, #324]	; (5c08 <_can_async_init+0x168>)
    5ac4:	4798      	blx	r3
    5ac6:	4603      	mov	r3, r0
    5ac8:	f083 0301 	eor.w	r3, r3, #1
    5acc:	b2db      	uxtb	r3, r3
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d1f4      	bne.n	5abc <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    5ad2:	687b      	ldr	r3, [r7, #4]
    5ad4:	681b      	ldr	r3, [r3, #0]
    5ad6:	4618      	mov	r0, r3
    5ad8:	4b4c      	ldr	r3, [pc, #304]	; (5c0c <_can_async_init+0x16c>)
    5ada:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    5adc:	683b      	ldr	r3, [r7, #0]
    5ade:	4a4c      	ldr	r2, [pc, #304]	; (5c10 <_can_async_init+0x170>)
    5ae0:	4293      	cmp	r3, r2
    5ae2:	d177      	bne.n	5bd4 <_can_async_init+0x134>
		_can1_dev    = dev;
    5ae4:	4a4b      	ldr	r2, [pc, #300]	; (5c14 <_can_async_init+0x174>)
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    5aea:	687b      	ldr	r3, [r7, #4]
    5aec:	4a4a      	ldr	r2, [pc, #296]	; (5c18 <_can_async_init+0x178>)
    5aee:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	2100      	movs	r1, #0
    5af6:	4618      	mov	r0, r3
    5af8:	4b48      	ldr	r3, [pc, #288]	; (5c1c <_can_async_init+0x17c>)
    5afa:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	681b      	ldr	r3, [r3, #0]
    5b00:	2100      	movs	r1, #0
    5b02:	4618      	mov	r0, r3
    5b04:	4b46      	ldr	r3, [pc, #280]	; (5c20 <_can_async_init+0x180>)
    5b06:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	681b      	ldr	r3, [r3, #0]
    5b0c:	4945      	ldr	r1, [pc, #276]	; (5c24 <_can_async_init+0x184>)
    5b0e:	4618      	mov	r0, r3
    5b10:	4b45      	ldr	r3, [pc, #276]	; (5c28 <_can_async_init+0x188>)
    5b12:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	681b      	ldr	r3, [r3, #0]
    5b18:	f640 2133 	movw	r1, #2611	; 0xa33
    5b1c:	4618      	mov	r0, r3
    5b1e:	4b43      	ldr	r3, [pc, #268]	; (5c2c <_can_async_init+0x18c>)
    5b20:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	681a      	ldr	r2, [r3, #0]
    5b26:	4b42      	ldr	r3, [pc, #264]	; (5c30 <_can_async_init+0x190>)
    5b28:	b29b      	uxth	r3, r3
    5b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5b2e:	4619      	mov	r1, r3
    5b30:	4610      	mov	r0, r2
    5b32:	4b40      	ldr	r3, [pc, #256]	; (5c34 <_can_async_init+0x194>)
    5b34:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	2100      	movs	r1, #0
    5b3c:	4618      	mov	r0, r3
    5b3e:	4b3e      	ldr	r3, [pc, #248]	; (5c38 <_can_async_init+0x198>)
    5b40:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	681b      	ldr	r3, [r3, #0]
    5b46:	2100      	movs	r1, #0
    5b48:	4618      	mov	r0, r3
    5b4a:	4b3c      	ldr	r3, [pc, #240]	; (5c3c <_can_async_init+0x19c>)
    5b4c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    5b4e:	687b      	ldr	r3, [r7, #4]
    5b50:	681a      	ldr	r2, [r3, #0]
    5b52:	4b3b      	ldr	r3, [pc, #236]	; (5c40 <_can_async_init+0x1a0>)
    5b54:	b29b      	uxth	r3, r3
    5b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    5b5a:	4619      	mov	r1, r3
    5b5c:	4610      	mov	r0, r2
    5b5e:	4b39      	ldr	r3, [pc, #228]	; (5c44 <_can_async_init+0x1a4>)
    5b60:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    5b62:	687b      	ldr	r3, [r7, #4]
    5b64:	681a      	ldr	r2, [r3, #0]
    5b66:	4b38      	ldr	r3, [pc, #224]	; (5c48 <_can_async_init+0x1a8>)
    5b68:	b29b      	uxth	r3, r3
    5b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5b6e:	4619      	mov	r1, r3
    5b70:	4610      	mov	r0, r2
    5b72:	4b36      	ldr	r3, [pc, #216]	; (5c4c <_can_async_init+0x1ac>)
    5b74:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    5b76:	687b      	ldr	r3, [r7, #4]
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	2128      	movs	r1, #40	; 0x28
    5b7c:	4618      	mov	r0, r3
    5b7e:	4b34      	ldr	r3, [pc, #208]	; (5c50 <_can_async_init+0x1b0>)
    5b80:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	681a      	ldr	r2, [r3, #0]
    5b86:	4b33      	ldr	r3, [pc, #204]	; (5c54 <_can_async_init+0x1b4>)
    5b88:	b29b      	uxth	r3, r3
    5b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5b8e:	4619      	mov	r1, r3
    5b90:	4610      	mov	r0, r2
    5b92:	4b31      	ldr	r3, [pc, #196]	; (5c58 <_can_async_init+0x1b8>)
    5b94:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    5b96:	687b      	ldr	r3, [r7, #4]
    5b98:	681a      	ldr	r2, [r3, #0]
    5b9a:	4b30      	ldr	r3, [pc, #192]	; (5c5c <_can_async_init+0x1bc>)
    5b9c:	b29b      	uxth	r3, r3
    5b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5ba2:	4619      	mov	r1, r3
    5ba4:	4610      	mov	r0, r2
    5ba6:	4b2e      	ldr	r3, [pc, #184]	; (5c60 <_can_async_init+0x1c0>)
    5ba8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    5baa:	687b      	ldr	r3, [r7, #4]
    5bac:	681b      	ldr	r3, [r3, #0]
    5bae:	2100      	movs	r1, #0
    5bb0:	4618      	mov	r0, r3
    5bb2:	4b2c      	ldr	r3, [pc, #176]	; (5c64 <_can_async_init+0x1c4>)
    5bb4:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    5bb6:	204f      	movs	r0, #79	; 0x4f
    5bb8:	4b2b      	ldr	r3, [pc, #172]	; (5c68 <_can_async_init+0x1c8>)
    5bba:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    5bbc:	204f      	movs	r0, #79	; 0x4f
    5bbe:	4b2b      	ldr	r3, [pc, #172]	; (5c6c <_can_async_init+0x1cc>)
    5bc0:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5bc2:	204f      	movs	r0, #79	; 0x4f
    5bc4:	4b2a      	ldr	r3, [pc, #168]	; (5c70 <_can_async_init+0x1d0>)
    5bc6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	2101      	movs	r1, #1
    5bce:	4618      	mov	r0, r3
    5bd0:	4b28      	ldr	r3, [pc, #160]	; (5c74 <_can_async_init+0x1d4>)
    5bd2:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    5bd4:	687b      	ldr	r3, [r7, #4]
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	4618      	mov	r0, r3
    5bda:	4b27      	ldr	r3, [pc, #156]	; (5c78 <_can_async_init+0x1d8>)
    5bdc:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	4618      	mov	r0, r3
    5be4:	4b25      	ldr	r3, [pc, #148]	; (5c7c <_can_async_init+0x1dc>)
    5be6:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    5be8:	bf00      	nop
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	681b      	ldr	r3, [r3, #0]
    5bee:	4618      	mov	r0, r3
    5bf0:	4b05      	ldr	r3, [pc, #20]	; (5c08 <_can_async_init+0x168>)
    5bf2:	4798      	blx	r3
    5bf4:	4603      	mov	r3, r0
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d1f7      	bne.n	5bea <_can_async_init+0x14a>
	};

	return ERR_NONE;
    5bfa:	2300      	movs	r3, #0
}
    5bfc:	4618      	mov	r0, r3
    5bfe:	3708      	adds	r7, #8
    5c00:	46bd      	mov	sp, r7
    5c02:	bd80      	pop	{r7, pc}
    5c04:	00005855 	.word	0x00005855
    5c08:	00005875 	.word	0x00005875
    5c0c:	000058c3 	.word	0x000058c3
    5c10:	42000400 	.word	0x42000400
    5c14:	20001cdc 	.word	0x20001cdc
    5c18:	20000004 	.word	0x20000004
    5c1c:	00005903 	.word	0x00005903
    5c20:	0000581d 	.word	0x0000581d
    5c24:	06020a07 	.word	0x06020a07
    5c28:	00005925 	.word	0x00005925
    5c2c:	00005839 	.word	0x00005839
    5c30:	2000238c 	.word	0x2000238c
    5c34:	00005a09 	.word	0x00005a09
    5c38:	00005a27 	.word	0x00005a27
    5c3c:	00005a63 	.word	0x00005a63
    5c40:	2000236c 	.word	0x2000236c
    5c44:	00005a45 	.word	0x00005a45
    5c48:	20001cb4 	.word	0x20001cb4
    5c4c:	00005a81 	.word	0x00005a81
    5c50:	00005991 	.word	0x00005991
    5c54:	20001cc4 	.word	0x20001cc4
    5c58:	000059af 	.word	0x000059af
    5c5c:	20001ccc 	.word	0x20001ccc
    5c60:	000059cd 	.word	0x000059cd
    5c64:	000059eb 	.word	0x000059eb
    5c68:	00005775 	.word	0x00005775
    5c6c:	000057b9 	.word	0x000057b9
    5c70:	00005739 	.word	0x00005739
    5c74:	00005975 	.word	0x00005975
    5c78:	000058e3 	.word	0x000058e3
    5c7c:	000058a3 	.word	0x000058a3

00005c80 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5c80:	b590      	push	{r4, r7, lr}
    5c82:	b083      	sub	sp, #12
    5c84:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5c86:	4b2c      	ldr	r3, [pc, #176]	; (5d38 <CAN1_Handler+0xb8>)
    5c88:	681b      	ldr	r3, [r3, #0]
    5c8a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	4618      	mov	r0, r3
    5c92:	4b2a      	ldr	r3, [pc, #168]	; (5d3c <CAN1_Handler+0xbc>)
    5c94:	4798      	blx	r3
    5c96:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5c98:	683b      	ldr	r3, [r7, #0]
    5c9a:	f003 0301 	and.w	r3, r3, #1
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	d003      	beq.n	5caa <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	689b      	ldr	r3, [r3, #8]
    5ca6:	6878      	ldr	r0, [r7, #4]
    5ca8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    5caa:	683b      	ldr	r3, [r7, #0]
    5cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	d003      	beq.n	5cbc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	685b      	ldr	r3, [r3, #4]
    5cb8:	6878      	ldr	r0, [r7, #4]
    5cba:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5cbc:	683b      	ldr	r3, [r7, #0]
    5cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d004      	beq.n	5cd0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	68db      	ldr	r3, [r3, #12]
    5cca:	2103      	movs	r1, #3
    5ccc:	6878      	ldr	r0, [r7, #4]
    5cce:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    5cd0:	683b      	ldr	r3, [r7, #0]
    5cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d004      	beq.n	5ce4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	68db      	ldr	r3, [r3, #12]
    5cde:	2100      	movs	r1, #0
    5ce0:	6878      	ldr	r0, [r7, #4]
    5ce2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5ce4:	683b      	ldr	r3, [r7, #0]
    5ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    5cea:	2b00      	cmp	r3, #0
    5cec:	d00f      	beq.n	5d0e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    5cee:	687b      	ldr	r3, [r7, #4]
    5cf0:	68dc      	ldr	r4, [r3, #12]
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	681b      	ldr	r3, [r3, #0]
    5cf6:	4618      	mov	r0, r3
    5cf8:	4b11      	ldr	r3, [pc, #68]	; (5d40 <CAN1_Handler+0xc0>)
    5cfa:	4798      	blx	r3
    5cfc:	4603      	mov	r3, r0
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d001      	beq.n	5d06 <CAN1_Handler+0x86>
    5d02:	2302      	movs	r3, #2
    5d04:	e000      	b.n	5d08 <CAN1_Handler+0x88>
    5d06:	2301      	movs	r3, #1
    5d08:	4619      	mov	r1, r3
    5d0a:	6878      	ldr	r0, [r7, #4]
    5d0c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    5d0e:	683b      	ldr	r3, [r7, #0]
    5d10:	f003 0308 	and.w	r3, r3, #8
    5d14:	2b00      	cmp	r3, #0
    5d16:	d004      	beq.n	5d22 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5d18:	687b      	ldr	r3, [r7, #4]
    5d1a:	68db      	ldr	r3, [r3, #12]
    5d1c:	2104      	movs	r1, #4
    5d1e:	6878      	ldr	r0, [r7, #4]
    5d20:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	681b      	ldr	r3, [r3, #0]
    5d26:	6839      	ldr	r1, [r7, #0]
    5d28:	4618      	mov	r0, r3
    5d2a:	4b06      	ldr	r3, [pc, #24]	; (5d44 <CAN1_Handler+0xc4>)
    5d2c:	4798      	blx	r3
}
    5d2e:	bf00      	nop
    5d30:	370c      	adds	r7, #12
    5d32:	46bd      	mov	sp, r7
    5d34:	bd90      	pop	{r4, r7, pc}
    5d36:	bf00      	nop
    5d38:	20001cdc 	.word	0x20001cdc
    5d3c:	0000595d 	.word	0x0000595d
    5d40:	000057f5 	.word	0x000057f5
    5d44:	00005941 	.word	0x00005941

00005d48 <__NVIC_SetPendingIRQ>:
{
    5d48:	b480      	push	{r7}
    5d4a:	b083      	sub	sp, #12
    5d4c:	af00      	add	r7, sp, #0
    5d4e:	4603      	mov	r3, r0
    5d50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d56:	2b00      	cmp	r3, #0
    5d58:	db0c      	blt.n	5d74 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d5a:	4909      	ldr	r1, [pc, #36]	; (5d80 <__NVIC_SetPendingIRQ+0x38>)
    5d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d60:	095b      	lsrs	r3, r3, #5
    5d62:	88fa      	ldrh	r2, [r7, #6]
    5d64:	f002 021f 	and.w	r2, r2, #31
    5d68:	2001      	movs	r0, #1
    5d6a:	fa00 f202 	lsl.w	r2, r0, r2
    5d6e:	3340      	adds	r3, #64	; 0x40
    5d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d74:	bf00      	nop
    5d76:	370c      	adds	r7, #12
    5d78:	46bd      	mov	sp, r7
    5d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d7e:	4770      	bx	lr
    5d80:	e000e100 	.word	0xe000e100

00005d84 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5d84:	b580      	push	{r7, lr}
    5d86:	b082      	sub	sp, #8
    5d88:	af00      	add	r7, sp, #0
    5d8a:	4603      	mov	r3, r0
    5d8c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5d8e:	79fb      	ldrb	r3, [r7, #7]
    5d90:	b21b      	sxth	r3, r3
    5d92:	4618      	mov	r0, r3
    5d94:	4b02      	ldr	r3, [pc, #8]	; (5da0 <_irq_set+0x1c>)
    5d96:	4798      	blx	r3
}
    5d98:	bf00      	nop
    5d9a:	3708      	adds	r7, #8
    5d9c:	46bd      	mov	sp, r7
    5d9e:	bd80      	pop	{r7, pc}
    5da0:	00005d49 	.word	0x00005d49

00005da4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5da4:	b480      	push	{r7}
    5da6:	b083      	sub	sp, #12
    5da8:	af00      	add	r7, sp, #0
    5daa:	4603      	mov	r3, r0
    5dac:	6039      	str	r1, [r7, #0]
    5dae:	80fb      	strh	r3, [r7, #6]
    5db0:	4613      	mov	r3, r2
    5db2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5db4:	797b      	ldrb	r3, [r7, #5]
    5db6:	3b04      	subs	r3, #4
    5db8:	2b05      	cmp	r3, #5
    5dba:	d86b      	bhi.n	5e94 <_get_cycles_for_us_internal+0xf0>
    5dbc:	a201      	add	r2, pc, #4	; (adr r2, 5dc4 <_get_cycles_for_us_internal+0x20>)
    5dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5dc2:	bf00      	nop
    5dc4:	00005e73 	.word	0x00005e73
    5dc8:	00005e53 	.word	0x00005e53
    5dcc:	00005e35 	.word	0x00005e35
    5dd0:	00005e17 	.word	0x00005e17
    5dd4:	00005df9 	.word	0x00005df9
    5dd8:	00005ddd 	.word	0x00005ddd
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5ddc:	88fb      	ldrh	r3, [r7, #6]
    5dde:	683a      	ldr	r2, [r7, #0]
    5de0:	4935      	ldr	r1, [pc, #212]	; (5eb8 <_get_cycles_for_us_internal+0x114>)
    5de2:	fba1 1202 	umull	r1, r2, r1, r2
    5de6:	0c92      	lsrs	r2, r2, #18
    5de8:	fb02 f303 	mul.w	r3, r2, r3
    5dec:	3302      	adds	r3, #2
    5dee:	4a33      	ldr	r2, [pc, #204]	; (5ebc <_get_cycles_for_us_internal+0x118>)
    5df0:	fba2 2303 	umull	r2, r3, r2, r3
    5df4:	085b      	lsrs	r3, r3, #1
    5df6:	e059      	b.n	5eac <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5df8:	88fb      	ldrh	r3, [r7, #6]
    5dfa:	683a      	ldr	r2, [r7, #0]
    5dfc:	0952      	lsrs	r2, r2, #5
    5dfe:	4930      	ldr	r1, [pc, #192]	; (5ec0 <_get_cycles_for_us_internal+0x11c>)
    5e00:	fba1 1202 	umull	r1, r2, r1, r2
    5e04:	09d2      	lsrs	r2, r2, #7
    5e06:	fb02 f303 	mul.w	r3, r2, r3
    5e0a:	331d      	adds	r3, #29
    5e0c:	4a2d      	ldr	r2, [pc, #180]	; (5ec4 <_get_cycles_for_us_internal+0x120>)
    5e0e:	fba2 2303 	umull	r2, r3, r2, r3
    5e12:	091b      	lsrs	r3, r3, #4
    5e14:	e04a      	b.n	5eac <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5e16:	88fb      	ldrh	r3, [r7, #6]
    5e18:	683a      	ldr	r2, [r7, #0]
    5e1a:	492b      	ldr	r1, [pc, #172]	; (5ec8 <_get_cycles_for_us_internal+0x124>)
    5e1c:	fba1 1202 	umull	r1, r2, r1, r2
    5e20:	0b52      	lsrs	r2, r2, #13
    5e22:	fb02 f303 	mul.w	r3, r2, r3
    5e26:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5e2a:	4a28      	ldr	r2, [pc, #160]	; (5ecc <_get_cycles_for_us_internal+0x128>)
    5e2c:	fba2 2303 	umull	r2, r3, r2, r3
    5e30:	095b      	lsrs	r3, r3, #5
    5e32:	e03b      	b.n	5eac <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5e34:	88fb      	ldrh	r3, [r7, #6]
    5e36:	683a      	ldr	r2, [r7, #0]
    5e38:	4925      	ldr	r1, [pc, #148]	; (5ed0 <_get_cycles_for_us_internal+0x12c>)
    5e3a:	fba1 1202 	umull	r1, r2, r1, r2
    5e3e:	0992      	lsrs	r2, r2, #6
    5e40:	fb02 f303 	mul.w	r3, r2, r3
    5e44:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5e48:	4a22      	ldr	r2, [pc, #136]	; (5ed4 <_get_cycles_for_us_internal+0x130>)
    5e4a:	fba2 2303 	umull	r2, r3, r2, r3
    5e4e:	099b      	lsrs	r3, r3, #6
    5e50:	e02c      	b.n	5eac <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    5e52:	88fb      	ldrh	r3, [r7, #6]
    5e54:	683a      	ldr	r2, [r7, #0]
    5e56:	4920      	ldr	r1, [pc, #128]	; (5ed8 <_get_cycles_for_us_internal+0x134>)
    5e58:	fba1 1202 	umull	r1, r2, r1, r2
    5e5c:	0952      	lsrs	r2, r2, #5
    5e5e:	fb02 f303 	mul.w	r3, r2, r3
    5e62:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    5e66:	332f      	adds	r3, #47	; 0x2f
    5e68:	4a1c      	ldr	r2, [pc, #112]	; (5edc <_get_cycles_for_us_internal+0x138>)
    5e6a:	fba2 2303 	umull	r2, r3, r2, r3
    5e6e:	0b5b      	lsrs	r3, r3, #13
    5e70:	e01c      	b.n	5eac <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5e72:	88fb      	ldrh	r3, [r7, #6]
    5e74:	683a      	ldr	r2, [r7, #0]
    5e76:	491a      	ldr	r1, [pc, #104]	; (5ee0 <_get_cycles_for_us_internal+0x13c>)
    5e78:	fba1 1202 	umull	r1, r2, r1, r2
    5e7c:	08d2      	lsrs	r2, r2, #3
    5e7e:	fb02 f303 	mul.w	r3, r2, r3
    5e82:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    5e86:	f203 33df 	addw	r3, r3, #991	; 0x3df
    5e8a:	4a16      	ldr	r2, [pc, #88]	; (5ee4 <_get_cycles_for_us_internal+0x140>)
    5e8c:	fba2 2303 	umull	r2, r3, r2, r3
    5e90:	0c5b      	lsrs	r3, r3, #17
    5e92:	e00b      	b.n	5eac <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5e94:	88fb      	ldrh	r3, [r7, #6]
    5e96:	683a      	ldr	r2, [r7, #0]
    5e98:	fb02 f303 	mul.w	r3, r2, r3
    5e9c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5ea0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5ea4:	4a10      	ldr	r2, [pc, #64]	; (5ee8 <_get_cycles_for_us_internal+0x144>)
    5ea6:	fba2 2303 	umull	r2, r3, r2, r3
    5eaa:	0c9b      	lsrs	r3, r3, #18
	}
}
    5eac:	4618      	mov	r0, r3
    5eae:	370c      	adds	r7, #12
    5eb0:	46bd      	mov	sp, r7
    5eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eb6:	4770      	bx	lr
    5eb8:	431bde83 	.word	0x431bde83
    5ebc:	aaaaaaab 	.word	0xaaaaaaab
    5ec0:	0a7c5ac5 	.word	0x0a7c5ac5
    5ec4:	88888889 	.word	0x88888889
    5ec8:	d1b71759 	.word	0xd1b71759
    5ecc:	1b4e81b5 	.word	0x1b4e81b5
    5ed0:	10624dd3 	.word	0x10624dd3
    5ed4:	057619f1 	.word	0x057619f1
    5ed8:	51eb851f 	.word	0x51eb851f
    5edc:	45e7b273 	.word	0x45e7b273
    5ee0:	cccccccd 	.word	0xcccccccd
    5ee4:	6fd91d85 	.word	0x6fd91d85
    5ee8:	165e9f81 	.word	0x165e9f81

00005eec <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5eec:	b580      	push	{r7, lr}
    5eee:	b082      	sub	sp, #8
    5ef0:	af00      	add	r7, sp, #0
    5ef2:	4603      	mov	r3, r0
    5ef4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5ef6:	88fb      	ldrh	r3, [r7, #6]
    5ef8:	2209      	movs	r2, #9
    5efa:	4904      	ldr	r1, [pc, #16]	; (5f0c <_get_cycles_for_us+0x20>)
    5efc:	4618      	mov	r0, r3
    5efe:	4b04      	ldr	r3, [pc, #16]	; (5f10 <_get_cycles_for_us+0x24>)
    5f00:	4798      	blx	r3
    5f02:	4603      	mov	r3, r0
}
    5f04:	4618      	mov	r0, r3
    5f06:	3708      	adds	r7, #8
    5f08:	46bd      	mov	sp, r7
    5f0a:	bd80      	pop	{r7, pc}
    5f0c:	07270e00 	.word	0x07270e00
    5f10:	00005da5 	.word	0x00005da5

00005f14 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5f14:	b480      	push	{r7}
    5f16:	b083      	sub	sp, #12
    5f18:	af00      	add	r7, sp, #0
    5f1a:	4603      	mov	r3, r0
    5f1c:	6039      	str	r1, [r7, #0]
    5f1e:	80fb      	strh	r3, [r7, #6]
    5f20:	4613      	mov	r3, r2
    5f22:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5f24:	797b      	ldrb	r3, [r7, #5]
    5f26:	3b04      	subs	r3, #4
    5f28:	2b05      	cmp	r3, #5
    5f2a:	d870      	bhi.n	600e <_get_cycles_for_ms_internal+0xfa>
    5f2c:	a201      	add	r2, pc, #4	; (adr r2, 5f34 <_get_cycles_for_ms_internal+0x20>)
    5f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f32:	bf00      	nop
    5f34:	00005ff1 	.word	0x00005ff1
    5f38:	00005fd5 	.word	0x00005fd5
    5f3c:	00005fb9 	.word	0x00005fb9
    5f40:	00005f95 	.word	0x00005f95
    5f44:	00005f71 	.word	0x00005f71
    5f48:	00005f4d 	.word	0x00005f4d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    5f4c:	88fb      	ldrh	r3, [r7, #6]
    5f4e:	683a      	ldr	r2, [r7, #0]
    5f50:	4937      	ldr	r1, [pc, #220]	; (6030 <_get_cycles_for_ms_internal+0x11c>)
    5f52:	fba1 1202 	umull	r1, r2, r1, r2
    5f56:	0c92      	lsrs	r2, r2, #18
    5f58:	fb02 f303 	mul.w	r3, r2, r3
    5f5c:	3302      	adds	r3, #2
    5f5e:	4a35      	ldr	r2, [pc, #212]	; (6034 <_get_cycles_for_ms_internal+0x120>)
    5f60:	fba2 2303 	umull	r2, r3, r2, r3
    5f64:	085b      	lsrs	r3, r3, #1
    5f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f6a:	fb02 f303 	mul.w	r3, r2, r3
    5f6e:	e058      	b.n	6022 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5f70:	88fb      	ldrh	r3, [r7, #6]
    5f72:	683a      	ldr	r2, [r7, #0]
    5f74:	0952      	lsrs	r2, r2, #5
    5f76:	4930      	ldr	r1, [pc, #192]	; (6038 <_get_cycles_for_ms_internal+0x124>)
    5f78:	fba1 1202 	umull	r1, r2, r1, r2
    5f7c:	09d2      	lsrs	r2, r2, #7
    5f7e:	fb02 f303 	mul.w	r3, r2, r3
    5f82:	3302      	adds	r3, #2
    5f84:	4a2b      	ldr	r2, [pc, #172]	; (6034 <_get_cycles_for_ms_internal+0x120>)
    5f86:	fba2 2303 	umull	r2, r3, r2, r3
    5f8a:	085b      	lsrs	r3, r3, #1
    5f8c:	2264      	movs	r2, #100	; 0x64
    5f8e:	fb02 f303 	mul.w	r3, r2, r3
    5f92:	e046      	b.n	6022 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5f94:	88fb      	ldrh	r3, [r7, #6]
    5f96:	683a      	ldr	r2, [r7, #0]
    5f98:	4928      	ldr	r1, [pc, #160]	; (603c <_get_cycles_for_ms_internal+0x128>)
    5f9a:	fba1 1202 	umull	r1, r2, r1, r2
    5f9e:	0b52      	lsrs	r2, r2, #13
    5fa0:	fb02 f303 	mul.w	r3, r2, r3
    5fa4:	3302      	adds	r3, #2
    5fa6:	4a23      	ldr	r2, [pc, #140]	; (6034 <_get_cycles_for_ms_internal+0x120>)
    5fa8:	fba2 2303 	umull	r2, r3, r2, r3
    5fac:	085a      	lsrs	r2, r3, #1
    5fae:	4613      	mov	r3, r2
    5fb0:	009b      	lsls	r3, r3, #2
    5fb2:	4413      	add	r3, r2
    5fb4:	005b      	lsls	r3, r3, #1
    5fb6:	e034      	b.n	6022 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5fb8:	88fb      	ldrh	r3, [r7, #6]
    5fba:	683a      	ldr	r2, [r7, #0]
    5fbc:	4920      	ldr	r1, [pc, #128]	; (6040 <_get_cycles_for_ms_internal+0x12c>)
    5fbe:	fba1 1202 	umull	r1, r2, r1, r2
    5fc2:	0992      	lsrs	r2, r2, #6
    5fc4:	fb02 f303 	mul.w	r3, r2, r3
    5fc8:	3302      	adds	r3, #2
    5fca:	4a1a      	ldr	r2, [pc, #104]	; (6034 <_get_cycles_for_ms_internal+0x120>)
    5fcc:	fba2 2303 	umull	r2, r3, r2, r3
    5fd0:	085b      	lsrs	r3, r3, #1
    5fd2:	e026      	b.n	6022 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5fd4:	88fb      	ldrh	r3, [r7, #6]
    5fd6:	683a      	ldr	r2, [r7, #0]
    5fd8:	491a      	ldr	r1, [pc, #104]	; (6044 <_get_cycles_for_ms_internal+0x130>)
    5fda:	fba1 1202 	umull	r1, r2, r1, r2
    5fde:	0952      	lsrs	r2, r2, #5
    5fe0:	fb02 f303 	mul.w	r3, r2, r3
    5fe4:	331d      	adds	r3, #29
    5fe6:	4a18      	ldr	r2, [pc, #96]	; (6048 <_get_cycles_for_ms_internal+0x134>)
    5fe8:	fba2 2303 	umull	r2, r3, r2, r3
    5fec:	091b      	lsrs	r3, r3, #4
    5fee:	e018      	b.n	6022 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    5ff0:	88fb      	ldrh	r3, [r7, #6]
    5ff2:	683a      	ldr	r2, [r7, #0]
    5ff4:	4915      	ldr	r1, [pc, #84]	; (604c <_get_cycles_for_ms_internal+0x138>)
    5ff6:	fba1 1202 	umull	r1, r2, r1, r2
    5ffa:	08d2      	lsrs	r2, r2, #3
    5ffc:	fb02 f303 	mul.w	r3, r2, r3
    6000:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6004:	4a12      	ldr	r2, [pc, #72]	; (6050 <_get_cycles_for_ms_internal+0x13c>)
    6006:	fba2 2303 	umull	r2, r3, r2, r3
    600a:	095b      	lsrs	r3, r3, #5
    600c:	e009      	b.n	6022 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    600e:	88fb      	ldrh	r3, [r7, #6]
    6010:	683a      	ldr	r2, [r7, #0]
    6012:	fb02 f303 	mul.w	r3, r2, r3
    6016:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    601a:	4a0e      	ldr	r2, [pc, #56]	; (6054 <_get_cycles_for_ms_internal+0x140>)
    601c:	fba2 2303 	umull	r2, r3, r2, r3
    6020:	099b      	lsrs	r3, r3, #6
	}
}
    6022:	4618      	mov	r0, r3
    6024:	370c      	adds	r7, #12
    6026:	46bd      	mov	sp, r7
    6028:	f85d 7b04 	ldr.w	r7, [sp], #4
    602c:	4770      	bx	lr
    602e:	bf00      	nop
    6030:	431bde83 	.word	0x431bde83
    6034:	aaaaaaab 	.word	0xaaaaaaab
    6038:	0a7c5ac5 	.word	0x0a7c5ac5
    603c:	d1b71759 	.word	0xd1b71759
    6040:	10624dd3 	.word	0x10624dd3
    6044:	51eb851f 	.word	0x51eb851f
    6048:	88888889 	.word	0x88888889
    604c:	cccccccd 	.word	0xcccccccd
    6050:	1b4e81b5 	.word	0x1b4e81b5
    6054:	057619f1 	.word	0x057619f1

00006058 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    6058:	b580      	push	{r7, lr}
    605a:	b082      	sub	sp, #8
    605c:	af00      	add	r7, sp, #0
    605e:	4603      	mov	r3, r0
    6060:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6062:	88fb      	ldrh	r3, [r7, #6]
    6064:	2209      	movs	r2, #9
    6066:	4904      	ldr	r1, [pc, #16]	; (6078 <_get_cycles_for_ms+0x20>)
    6068:	4618      	mov	r0, r3
    606a:	4b04      	ldr	r3, [pc, #16]	; (607c <_get_cycles_for_ms+0x24>)
    606c:	4798      	blx	r3
    606e:	4603      	mov	r3, r0
}
    6070:	4618      	mov	r0, r3
    6072:	3708      	adds	r7, #8
    6074:	46bd      	mov	sp, r7
    6076:	bd80      	pop	{r7, pc}
    6078:	07270e00 	.word	0x07270e00
    607c:	00005f15 	.word	0x00005f15

00006080 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    6080:	b480      	push	{r7}
    6082:	b083      	sub	sp, #12
    6084:	af00      	add	r7, sp, #0
    6086:	6078      	str	r0, [r7, #4]
    6088:	6039      	str	r1, [r7, #0]
    608a:	bf00      	nop
    608c:	f3af 8000 	nop.w

00006090 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    6090:	3901      	subs	r1, #1
    6092:	d8fd      	bhi.n	6090 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    6094:	bf00      	nop
    6096:	370c      	adds	r7, #12
    6098:	46bd      	mov	sp, r7
    609a:	f85d 7b04 	ldr.w	r7, [sp], #4
    609e:	4770      	bx	lr

000060a0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    60a0:	b480      	push	{r7}
    60a2:	b083      	sub	sp, #12
    60a4:	af00      	add	r7, sp, #0
    60a6:	6078      	str	r0, [r7, #4]
    60a8:	460b      	mov	r3, r1
    60aa:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	881b      	ldrh	r3, [r3, #0]
    60b0:	b29a      	uxth	r2, r3
    60b2:	887b      	ldrh	r3, [r7, #2]
    60b4:	021b      	lsls	r3, r3, #8
    60b6:	b29b      	uxth	r3, r3
    60b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    60bc:	b29b      	uxth	r3, r3
    60be:	4313      	orrs	r3, r2
    60c0:	b29a      	uxth	r2, r3
    60c2:	687b      	ldr	r3, [r7, #4]
    60c4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    60c6:	bf00      	nop
    60c8:	370c      	adds	r7, #12
    60ca:	46bd      	mov	sp, r7
    60cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    60d0:	4770      	bx	lr

000060d2 <hri_port_set_EVCTRL_reg>:
{
    60d2:	b480      	push	{r7}
    60d4:	b085      	sub	sp, #20
    60d6:	af00      	add	r7, sp, #0
    60d8:	60f8      	str	r0, [r7, #12]
    60da:	460b      	mov	r3, r1
    60dc:	607a      	str	r2, [r7, #4]
    60de:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    60e0:	7afb      	ldrb	r3, [r7, #11]
    60e2:	7afa      	ldrb	r2, [r7, #11]
    60e4:	68f9      	ldr	r1, [r7, #12]
    60e6:	01d2      	lsls	r2, r2, #7
    60e8:	440a      	add	r2, r1
    60ea:	322c      	adds	r2, #44	; 0x2c
    60ec:	6811      	ldr	r1, [r2, #0]
    60ee:	687a      	ldr	r2, [r7, #4]
    60f0:	430a      	orrs	r2, r1
    60f2:	68f9      	ldr	r1, [r7, #12]
    60f4:	01db      	lsls	r3, r3, #7
    60f6:	440b      	add	r3, r1
    60f8:	332c      	adds	r3, #44	; 0x2c
    60fa:	601a      	str	r2, [r3, #0]
}
    60fc:	bf00      	nop
    60fe:	3714      	adds	r7, #20
    6100:	46bd      	mov	sp, r7
    6102:	f85d 7b04 	ldr.w	r7, [sp], #4
    6106:	4770      	bx	lr

00006108 <_port_event_init>:

static inline void _port_event_init()
{
    6108:	b580      	push	{r7, lr}
    610a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    610c:	2200      	movs	r2, #0
    610e:	2100      	movs	r1, #0
    6110:	4809      	ldr	r0, [pc, #36]	; (6138 <_port_event_init+0x30>)
    6112:	4b0a      	ldr	r3, [pc, #40]	; (613c <_port_event_init+0x34>)
    6114:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    6116:	2200      	movs	r2, #0
    6118:	2101      	movs	r1, #1
    611a:	4807      	ldr	r0, [pc, #28]	; (6138 <_port_event_init+0x30>)
    611c:	4b07      	ldr	r3, [pc, #28]	; (613c <_port_event_init+0x34>)
    611e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6120:	22ef      	movs	r2, #239	; 0xef
    6122:	2102      	movs	r1, #2
    6124:	4804      	ldr	r0, [pc, #16]	; (6138 <_port_event_init+0x30>)
    6126:	4b05      	ldr	r3, [pc, #20]	; (613c <_port_event_init+0x34>)
    6128:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    612a:	2200      	movs	r2, #0
    612c:	2103      	movs	r1, #3
    612e:	4802      	ldr	r0, [pc, #8]	; (6138 <_port_event_init+0x30>)
    6130:	4b02      	ldr	r3, [pc, #8]	; (613c <_port_event_init+0x34>)
    6132:	4798      	blx	r3
}
    6134:	bf00      	nop
    6136:	bd80      	pop	{r7, pc}
    6138:	41008000 	.word	0x41008000
    613c:	000060d3 	.word	0x000060d3

00006140 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6140:	b580      	push	{r7, lr}
    6142:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6144:	2104      	movs	r1, #4
    6146:	480b      	ldr	r0, [pc, #44]	; (6174 <_init_chip+0x34>)
    6148:	4b0b      	ldr	r3, [pc, #44]	; (6178 <_init_chip+0x38>)
    614a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    614c:	4b0b      	ldr	r3, [pc, #44]	; (617c <_init_chip+0x3c>)
    614e:	4798      	blx	r3
	_oscctrl_init_sources();
    6150:	4b0b      	ldr	r3, [pc, #44]	; (6180 <_init_chip+0x40>)
    6152:	4798      	blx	r3
	_mclk_init();
    6154:	4b0b      	ldr	r3, [pc, #44]	; (6184 <_init_chip+0x44>)
    6156:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6158:	f44f 6084 	mov.w	r0, #1056	; 0x420
    615c:	4b0a      	ldr	r3, [pc, #40]	; (6188 <_init_chip+0x48>)
    615e:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6160:	4b0a      	ldr	r3, [pc, #40]	; (618c <_init_chip+0x4c>)
    6162:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6164:	f640 30df 	movw	r0, #3039	; 0xbdf
    6168:	4b07      	ldr	r3, [pc, #28]	; (6188 <_init_chip+0x48>)
    616a:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    616c:	4b08      	ldr	r3, [pc, #32]	; (6190 <_init_chip+0x50>)
    616e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6170:	bf00      	nop
    6172:	bd80      	pop	{r7, pc}
    6174:	41004000 	.word	0x41004000
    6178:	000060a1 	.word	0x000060a1
    617c:	00006a81 	.word	0x00006a81
    6180:	00006f49 	.word	0x00006f49
    6184:	000069a1 	.word	0x000069a1
    6188:	000068a9 	.word	0x000068a9
    618c:	00006f89 	.word	0x00006f89
    6190:	00006109 	.word	0x00006109

00006194 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    6194:	b480      	push	{r7}
    6196:	b083      	sub	sp, #12
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
    619c:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	683a      	ldr	r2, [r7, #0]
    61a2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    61a4:	2300      	movs	r3, #0
}
    61a6:	4618      	mov	r0, r3
    61a8:	370c      	adds	r7, #12
    61aa:	46bd      	mov	sp, r7
    61ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    61b0:	4770      	bx	lr
	...

000061b4 <__NVIC_EnableIRQ>:
{
    61b4:	b480      	push	{r7}
    61b6:	b083      	sub	sp, #12
    61b8:	af00      	add	r7, sp, #0
    61ba:	4603      	mov	r3, r0
    61bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    61be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61c2:	2b00      	cmp	r3, #0
    61c4:	db0b      	blt.n	61de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61c6:	4909      	ldr	r1, [pc, #36]	; (61ec <__NVIC_EnableIRQ+0x38>)
    61c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61cc:	095b      	lsrs	r3, r3, #5
    61ce:	88fa      	ldrh	r2, [r7, #6]
    61d0:	f002 021f 	and.w	r2, r2, #31
    61d4:	2001      	movs	r0, #1
    61d6:	fa00 f202 	lsl.w	r2, r0, r2
    61da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    61de:	bf00      	nop
    61e0:	370c      	adds	r7, #12
    61e2:	46bd      	mov	sp, r7
    61e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e8:	4770      	bx	lr
    61ea:	bf00      	nop
    61ec:	e000e100 	.word	0xe000e100

000061f0 <__NVIC_DisableIRQ>:
{
    61f0:	b480      	push	{r7}
    61f2:	b083      	sub	sp, #12
    61f4:	af00      	add	r7, sp, #0
    61f6:	4603      	mov	r3, r0
    61f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    61fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61fe:	2b00      	cmp	r3, #0
    6200:	db10      	blt.n	6224 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6202:	490b      	ldr	r1, [pc, #44]	; (6230 <__NVIC_DisableIRQ+0x40>)
    6204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6208:	095b      	lsrs	r3, r3, #5
    620a:	88fa      	ldrh	r2, [r7, #6]
    620c:	f002 021f 	and.w	r2, r2, #31
    6210:	2001      	movs	r0, #1
    6212:	fa00 f202 	lsl.w	r2, r0, r2
    6216:	3320      	adds	r3, #32
    6218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    621c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6220:	f3bf 8f6f 	isb	sy
}
    6224:	bf00      	nop
    6226:	370c      	adds	r7, #12
    6228:	46bd      	mov	sp, r7
    622a:	f85d 7b04 	ldr.w	r7, [sp], #4
    622e:	4770      	bx	lr
    6230:	e000e100 	.word	0xe000e100

00006234 <__NVIC_ClearPendingIRQ>:
{
    6234:	b480      	push	{r7}
    6236:	b083      	sub	sp, #12
    6238:	af00      	add	r7, sp, #0
    623a:	4603      	mov	r3, r0
    623c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    623e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6242:	2b00      	cmp	r3, #0
    6244:	db0c      	blt.n	6260 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6246:	4909      	ldr	r1, [pc, #36]	; (626c <__NVIC_ClearPendingIRQ+0x38>)
    6248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    624c:	095b      	lsrs	r3, r3, #5
    624e:	88fa      	ldrh	r2, [r7, #6]
    6250:	f002 021f 	and.w	r2, r2, #31
    6254:	2001      	movs	r0, #1
    6256:	fa00 f202 	lsl.w	r2, r0, r2
    625a:	3360      	adds	r3, #96	; 0x60
    625c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6260:	bf00      	nop
    6262:	370c      	adds	r7, #12
    6264:	46bd      	mov	sp, r7
    6266:	f85d 7b04 	ldr.w	r7, [sp], #4
    626a:	4770      	bx	lr
    626c:	e000e100 	.word	0xe000e100

00006270 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6270:	b480      	push	{r7}
    6272:	b083      	sub	sp, #12
    6274:	af00      	add	r7, sp, #0
    6276:	6078      	str	r0, [r7, #4]
    6278:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    627a:	bf00      	nop
    627c:	687b      	ldr	r3, [r7, #4]
    627e:	685a      	ldr	r2, [r3, #4]
    6280:	683b      	ldr	r3, [r7, #0]
    6282:	4013      	ands	r3, r2
    6284:	2b00      	cmp	r3, #0
    6286:	d1f9      	bne.n	627c <hri_eic_wait_for_sync+0xc>
	};
}
    6288:	bf00      	nop
    628a:	370c      	adds	r7, #12
    628c:	46bd      	mov	sp, r7
    628e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6292:	4770      	bx	lr

00006294 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6294:	b480      	push	{r7}
    6296:	b083      	sub	sp, #12
    6298:	af00      	add	r7, sp, #0
    629a:	6078      	str	r0, [r7, #4]
    629c:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    629e:	687b      	ldr	r3, [r7, #4]
    62a0:	685a      	ldr	r2, [r3, #4]
    62a2:	683b      	ldr	r3, [r7, #0]
    62a4:	4013      	ands	r3, r2
    62a6:	2b00      	cmp	r3, #0
    62a8:	bf14      	ite	ne
    62aa:	2301      	movne	r3, #1
    62ac:	2300      	moveq	r3, #0
    62ae:	b2db      	uxtb	r3, r3
}
    62b0:	4618      	mov	r0, r3
    62b2:	370c      	adds	r7, #12
    62b4:	46bd      	mov	sp, r7
    62b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ba:	4770      	bx	lr

000062bc <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    62bc:	b480      	push	{r7}
    62be:	b083      	sub	sp, #12
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	695b      	ldr	r3, [r3, #20]
}
    62c8:	4618      	mov	r0, r3
    62ca:	370c      	adds	r7, #12
    62cc:	46bd      	mov	sp, r7
    62ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    62d2:	4770      	bx	lr

000062d4 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    62d4:	b480      	push	{r7}
    62d6:	b083      	sub	sp, #12
    62d8:	af00      	add	r7, sp, #0
    62da:	6078      	str	r0, [r7, #4]
    62dc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	683a      	ldr	r2, [r7, #0]
    62e2:	615a      	str	r2, [r3, #20]
}
    62e4:	bf00      	nop
    62e6:	370c      	adds	r7, #12
    62e8:	46bd      	mov	sp, r7
    62ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ee:	4770      	bx	lr

000062f0 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    62f0:	b580      	push	{r7, lr}
    62f2:	b082      	sub	sp, #8
    62f4:	af00      	add	r7, sp, #0
    62f6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    62f8:	687b      	ldr	r3, [r7, #4]
    62fa:	781b      	ldrb	r3, [r3, #0]
    62fc:	b2db      	uxtb	r3, r3
    62fe:	f043 0302 	orr.w	r3, r3, #2
    6302:	b2da      	uxtb	r2, r3
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6308:	2103      	movs	r1, #3
    630a:	6878      	ldr	r0, [r7, #4]
    630c:	4b02      	ldr	r3, [pc, #8]	; (6318 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    630e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6310:	bf00      	nop
    6312:	3708      	adds	r7, #8
    6314:	46bd      	mov	sp, r7
    6316:	bd80      	pop	{r7, pc}
    6318:	00006271 	.word	0x00006271

0000631c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    631c:	b580      	push	{r7, lr}
    631e:	b082      	sub	sp, #8
    6320:	af00      	add	r7, sp, #0
    6322:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	b2db      	uxtb	r3, r3
    632a:	f023 0302 	bic.w	r3, r3, #2
    632e:	b2da      	uxtb	r2, r3
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6334:	2103      	movs	r1, #3
    6336:	6878      	ldr	r0, [r7, #4]
    6338:	4b02      	ldr	r3, [pc, #8]	; (6344 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    633a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    633c:	bf00      	nop
    633e:	3708      	adds	r7, #8
    6340:	46bd      	mov	sp, r7
    6342:	bd80      	pop	{r7, pc}
    6344:	00006271 	.word	0x00006271

00006348 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    6348:	b580      	push	{r7, lr}
    634a:	b084      	sub	sp, #16
    634c:	af00      	add	r7, sp, #0
    634e:	6078      	str	r0, [r7, #4]
    6350:	460b      	mov	r3, r1
    6352:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	781b      	ldrb	r3, [r3, #0]
    6358:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    635a:	7bfb      	ldrb	r3, [r7, #15]
    635c:	f023 0310 	bic.w	r3, r3, #16
    6360:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    6362:	78fb      	ldrb	r3, [r7, #3]
    6364:	011b      	lsls	r3, r3, #4
    6366:	b25a      	sxtb	r2, r3
    6368:	f997 300f 	ldrsb.w	r3, [r7, #15]
    636c:	4313      	orrs	r3, r2
    636e:	b25b      	sxtb	r3, r3
    6370:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    6372:	687b      	ldr	r3, [r7, #4]
    6374:	7bfa      	ldrb	r2, [r7, #15]
    6376:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6378:	2103      	movs	r1, #3
    637a:	6878      	ldr	r0, [r7, #4]
    637c:	4b02      	ldr	r3, [pc, #8]	; (6388 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    637e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6380:	bf00      	nop
    6382:	3710      	adds	r7, #16
    6384:	46bd      	mov	sp, r7
    6386:	bd80      	pop	{r7, pc}
    6388:	00006271 	.word	0x00006271

0000638c <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    638c:	b580      	push	{r7, lr}
    638e:	b084      	sub	sp, #16
    6390:	af00      	add	r7, sp, #0
    6392:	6078      	str	r0, [r7, #4]
    6394:	460b      	mov	r3, r1
    6396:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6398:	2103      	movs	r1, #3
    639a:	6878      	ldr	r0, [r7, #4]
    639c:	4b06      	ldr	r3, [pc, #24]	; (63b8 <hri_eic_get_CTRLA_reg+0x2c>)
    639e:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	781b      	ldrb	r3, [r3, #0]
    63a4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    63a6:	7bfa      	ldrb	r2, [r7, #15]
    63a8:	78fb      	ldrb	r3, [r7, #3]
    63aa:	4013      	ands	r3, r2
    63ac:	73fb      	strb	r3, [r7, #15]
	return tmp;
    63ae:	7bfb      	ldrb	r3, [r7, #15]
}
    63b0:	4618      	mov	r0, r3
    63b2:	3710      	adds	r7, #16
    63b4:	46bd      	mov	sp, r7
    63b6:	bd80      	pop	{r7, pc}
    63b8:	00006271 	.word	0x00006271

000063bc <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b082      	sub	sp, #8
    63c0:	af00      	add	r7, sp, #0
    63c2:	6078      	str	r0, [r7, #4]
    63c4:	460b      	mov	r3, r1
    63c6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	78fa      	ldrb	r2, [r7, #3]
    63cc:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    63ce:	2103      	movs	r1, #3
    63d0:	6878      	ldr	r0, [r7, #4]
    63d2:	4b03      	ldr	r3, [pc, #12]	; (63e0 <hri_eic_write_CTRLA_reg+0x24>)
    63d4:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    63d6:	bf00      	nop
    63d8:	3708      	adds	r7, #8
    63da:	46bd      	mov	sp, r7
    63dc:	bd80      	pop	{r7, pc}
    63de:	bf00      	nop
    63e0:	00006271 	.word	0x00006271

000063e4 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    63e4:	b480      	push	{r7}
    63e6:	b083      	sub	sp, #12
    63e8:	af00      	add	r7, sp, #0
    63ea:	6078      	str	r0, [r7, #4]
    63ec:	460b      	mov	r3, r1
    63ee:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	78fa      	ldrb	r2, [r7, #3]
    63f4:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    63f6:	bf00      	nop
    63f8:	370c      	adds	r7, #12
    63fa:	46bd      	mov	sp, r7
    63fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6400:	4770      	bx	lr

00006402 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    6402:	b480      	push	{r7}
    6404:	b083      	sub	sp, #12
    6406:	af00      	add	r7, sp, #0
    6408:	6078      	str	r0, [r7, #4]
    640a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    640c:	687b      	ldr	r3, [r7, #4]
    640e:	683a      	ldr	r2, [r7, #0]
    6410:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6412:	bf00      	nop
    6414:	370c      	adds	r7, #12
    6416:	46bd      	mov	sp, r7
    6418:	f85d 7b04 	ldr.w	r7, [sp], #4
    641c:	4770      	bx	lr

0000641e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    641e:	b480      	push	{r7}
    6420:	b083      	sub	sp, #12
    6422:	af00      	add	r7, sp, #0
    6424:	6078      	str	r0, [r7, #4]
    6426:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	683a      	ldr	r2, [r7, #0]
    642c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    642e:	bf00      	nop
    6430:	370c      	adds	r7, #12
    6432:	46bd      	mov	sp, r7
    6434:	f85d 7b04 	ldr.w	r7, [sp], #4
    6438:	4770      	bx	lr

0000643a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    643a:	b480      	push	{r7}
    643c:	b085      	sub	sp, #20
    643e:	af00      	add	r7, sp, #0
    6440:	60f8      	str	r0, [r7, #12]
    6442:	460b      	mov	r3, r1
    6444:	607a      	str	r2, [r7, #4]
    6446:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    6448:	7afb      	ldrb	r3, [r7, #11]
    644a:	68fa      	ldr	r2, [r7, #12]
    644c:	3306      	adds	r3, #6
    644e:	009b      	lsls	r3, r3, #2
    6450:	4413      	add	r3, r2
    6452:	687a      	ldr	r2, [r7, #4]
    6454:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6456:	bf00      	nop
    6458:	3714      	adds	r7, #20
    645a:	46bd      	mov	sp, r7
    645c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6460:	4770      	bx	lr

00006462 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    6462:	b480      	push	{r7}
    6464:	b083      	sub	sp, #12
    6466:	af00      	add	r7, sp, #0
    6468:	6078      	str	r0, [r7, #4]
    646a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    646c:	687b      	ldr	r3, [r7, #4]
    646e:	683a      	ldr	r2, [r7, #0]
    6470:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    6472:	bf00      	nop
    6474:	370c      	adds	r7, #12
    6476:	46bd      	mov	sp, r7
    6478:	f85d 7b04 	ldr.w	r7, [sp], #4
    647c:	4770      	bx	lr

0000647e <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    647e:	b480      	push	{r7}
    6480:	b083      	sub	sp, #12
    6482:	af00      	add	r7, sp, #0
    6484:	6078      	str	r0, [r7, #4]
    6486:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    6488:	687b      	ldr	r3, [r7, #4]
    648a:	683a      	ldr	r2, [r7, #0]
    648c:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    648e:	bf00      	nop
    6490:	370c      	adds	r7, #12
    6492:	46bd      	mov	sp, r7
    6494:	f85d 7b04 	ldr.w	r7, [sp], #4
    6498:	4770      	bx	lr
	...

0000649c <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    649c:	b580      	push	{r7, lr}
    649e:	b082      	sub	sp, #8
    64a0:	af00      	add	r7, sp, #0
    64a2:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    64a4:	2101      	movs	r1, #1
    64a6:	4838      	ldr	r0, [pc, #224]	; (6588 <_ext_irq_init+0xec>)
    64a8:	4b38      	ldr	r3, [pc, #224]	; (658c <_ext_irq_init+0xf0>)
    64aa:	4798      	blx	r3
    64ac:	4603      	mov	r3, r0
    64ae:	f083 0301 	eor.w	r3, r3, #1
    64b2:	b2db      	uxtb	r3, r3
    64b4:	2b00      	cmp	r3, #0
    64b6:	d011      	beq.n	64dc <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    64b8:	2102      	movs	r1, #2
    64ba:	4833      	ldr	r0, [pc, #204]	; (6588 <_ext_irq_init+0xec>)
    64bc:	4b34      	ldr	r3, [pc, #208]	; (6590 <_ext_irq_init+0xf4>)
    64be:	4798      	blx	r3
    64c0:	4603      	mov	r3, r0
    64c2:	2b00      	cmp	r3, #0
    64c4:	d006      	beq.n	64d4 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    64c6:	4830      	ldr	r0, [pc, #192]	; (6588 <_ext_irq_init+0xec>)
    64c8:	4b32      	ldr	r3, [pc, #200]	; (6594 <_ext_irq_init+0xf8>)
    64ca:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    64cc:	2102      	movs	r1, #2
    64ce:	482e      	ldr	r0, [pc, #184]	; (6588 <_ext_irq_init+0xec>)
    64d0:	4b31      	ldr	r3, [pc, #196]	; (6598 <_ext_irq_init+0xfc>)
    64d2:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    64d4:	2101      	movs	r1, #1
    64d6:	482c      	ldr	r0, [pc, #176]	; (6588 <_ext_irq_init+0xec>)
    64d8:	4b30      	ldr	r3, [pc, #192]	; (659c <_ext_irq_init+0x100>)
    64da:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    64dc:	2101      	movs	r1, #1
    64de:	482a      	ldr	r0, [pc, #168]	; (6588 <_ext_irq_init+0xec>)
    64e0:	4b2d      	ldr	r3, [pc, #180]	; (6598 <_ext_irq_init+0xfc>)
    64e2:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    64e4:	2100      	movs	r1, #0
    64e6:	4828      	ldr	r0, [pc, #160]	; (6588 <_ext_irq_init+0xec>)
    64e8:	4b2d      	ldr	r3, [pc, #180]	; (65a0 <_ext_irq_init+0x104>)
    64ea:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    64ec:	2100      	movs	r1, #0
    64ee:	4826      	ldr	r0, [pc, #152]	; (6588 <_ext_irq_init+0xec>)
    64f0:	4b2c      	ldr	r3, [pc, #176]	; (65a4 <_ext_irq_init+0x108>)
    64f2:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    64f4:	2100      	movs	r1, #0
    64f6:	4824      	ldr	r0, [pc, #144]	; (6588 <_ext_irq_init+0xec>)
    64f8:	4b2b      	ldr	r3, [pc, #172]	; (65a8 <_ext_irq_init+0x10c>)
    64fa:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    64fc:	2130      	movs	r1, #48	; 0x30
    64fe:	4822      	ldr	r0, [pc, #136]	; (6588 <_ext_irq_init+0xec>)
    6500:	4b2a      	ldr	r3, [pc, #168]	; (65ac <_ext_irq_init+0x110>)
    6502:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    6504:	2130      	movs	r1, #48	; 0x30
    6506:	4820      	ldr	r0, [pc, #128]	; (6588 <_ext_irq_init+0xec>)
    6508:	4b29      	ldr	r3, [pc, #164]	; (65b0 <_ext_irq_init+0x114>)
    650a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    650c:	2100      	movs	r1, #0
    650e:	481e      	ldr	r0, [pc, #120]	; (6588 <_ext_irq_init+0xec>)
    6510:	4b28      	ldr	r3, [pc, #160]	; (65b4 <_ext_irq_init+0x118>)
    6512:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6514:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    6518:	2100      	movs	r1, #0
    651a:	481b      	ldr	r0, [pc, #108]	; (6588 <_ext_irq_init+0xec>)
    651c:	4b26      	ldr	r3, [pc, #152]	; (65b8 <_ext_irq_init+0x11c>)
    651e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6520:	2200      	movs	r2, #0
    6522:	2101      	movs	r1, #1
    6524:	4818      	ldr	r0, [pc, #96]	; (6588 <_ext_irq_init+0xec>)
    6526:	4b24      	ldr	r3, [pc, #144]	; (65b8 <_ext_irq_init+0x11c>)
    6528:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    652a:	4817      	ldr	r0, [pc, #92]	; (6588 <_ext_irq_init+0xec>)
    652c:	4b23      	ldr	r3, [pc, #140]	; (65bc <_ext_irq_init+0x120>)
    652e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    6530:	2010      	movs	r0, #16
    6532:	4b23      	ldr	r3, [pc, #140]	; (65c0 <_ext_irq_init+0x124>)
    6534:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    6536:	2010      	movs	r0, #16
    6538:	4b22      	ldr	r3, [pc, #136]	; (65c4 <_ext_irq_init+0x128>)
    653a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    653c:	2010      	movs	r0, #16
    653e:	4b22      	ldr	r3, [pc, #136]	; (65c8 <_ext_irq_init+0x12c>)
    6540:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    6542:	2011      	movs	r0, #17
    6544:	4b1e      	ldr	r3, [pc, #120]	; (65c0 <_ext_irq_init+0x124>)
    6546:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    6548:	2011      	movs	r0, #17
    654a:	4b1e      	ldr	r3, [pc, #120]	; (65c4 <_ext_irq_init+0x128>)
    654c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    654e:	2011      	movs	r0, #17
    6550:	4b1d      	ldr	r3, [pc, #116]	; (65c8 <_ext_irq_init+0x12c>)
    6552:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6554:	2012      	movs	r0, #18
    6556:	4b1a      	ldr	r3, [pc, #104]	; (65c0 <_ext_irq_init+0x124>)
    6558:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    655a:	2012      	movs	r0, #18
    655c:	4b19      	ldr	r3, [pc, #100]	; (65c4 <_ext_irq_init+0x128>)
    655e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    6560:	2012      	movs	r0, #18
    6562:	4b19      	ldr	r3, [pc, #100]	; (65c8 <_ext_irq_init+0x12c>)
    6564:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    6566:	2013      	movs	r0, #19
    6568:	4b15      	ldr	r3, [pc, #84]	; (65c0 <_ext_irq_init+0x124>)
    656a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    656c:	2013      	movs	r0, #19
    656e:	4b15      	ldr	r3, [pc, #84]	; (65c4 <_ext_irq_init+0x128>)
    6570:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    6572:	2013      	movs	r0, #19
    6574:	4b14      	ldr	r3, [pc, #80]	; (65c8 <_ext_irq_init+0x12c>)
    6576:	4798      	blx	r3

	callback = cb;
    6578:	4a14      	ldr	r2, [pc, #80]	; (65cc <_ext_irq_init+0x130>)
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    657e:	2300      	movs	r3, #0
}
    6580:	4618      	mov	r0, r3
    6582:	3708      	adds	r7, #8
    6584:	46bd      	mov	sp, r7
    6586:	bd80      	pop	{r7, pc}
    6588:	40002800 	.word	0x40002800
    658c:	00006295 	.word	0x00006295
    6590:	0000638d 	.word	0x0000638d
    6594:	0000631d 	.word	0x0000631d
    6598:	00006271 	.word	0x00006271
    659c:	000063bd 	.word	0x000063bd
    65a0:	00006349 	.word	0x00006349
    65a4:	000063e5 	.word	0x000063e5
    65a8:	00006403 	.word	0x00006403
    65ac:	0000641f 	.word	0x0000641f
    65b0:	00006463 	.word	0x00006463
    65b4:	0000647f 	.word	0x0000647f
    65b8:	0000643b 	.word	0x0000643b
    65bc:	000062f1 	.word	0x000062f1
    65c0:	000061f1 	.word	0x000061f1
    65c4:	00006235 	.word	0x00006235
    65c8:	000061b5 	.word	0x000061b5
    65cc:	20001ce0 	.word	0x20001ce0

000065d0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    65d0:	b580      	push	{r7, lr}
    65d2:	b084      	sub	sp, #16
    65d4:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    65d6:	4841      	ldr	r0, [pc, #260]	; (66dc <_ext_irq_handler+0x10c>)
    65d8:	4b41      	ldr	r3, [pc, #260]	; (66e0 <_ext_irq_handler+0x110>)
    65da:	4798      	blx	r3
    65dc:	4603      	mov	r3, r0
    65de:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    65e0:	f04f 33ff 	mov.w	r3, #4294967295
    65e4:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    65e6:	683b      	ldr	r3, [r7, #0]
    65e8:	4619      	mov	r1, r3
    65ea:	483c      	ldr	r0, [pc, #240]	; (66dc <_ext_irq_handler+0x10c>)
    65ec:	4b3d      	ldr	r3, [pc, #244]	; (66e4 <_ext_irq_handler+0x114>)
    65ee:	4798      	blx	r3

	ASSERT(callback);
    65f0:	4b3d      	ldr	r3, [pc, #244]	; (66e8 <_ext_irq_handler+0x118>)
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	2b00      	cmp	r3, #0
    65f6:	bf14      	ite	ne
    65f8:	2301      	movne	r3, #1
    65fa:	2300      	moveq	r3, #0
    65fc:	b2db      	uxtb	r3, r3
    65fe:	22f4      	movs	r2, #244	; 0xf4
    6600:	493a      	ldr	r1, [pc, #232]	; (66ec <_ext_irq_handler+0x11c>)
    6602:	4618      	mov	r0, r3
    6604:	4b3a      	ldr	r3, [pc, #232]	; (66f0 <_ext_irq_handler+0x120>)
    6606:	4798      	blx	r3

	while (flags) {
    6608:	e060      	b.n	66cc <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    660a:	683b      	ldr	r3, [r7, #0]
    660c:	4618      	mov	r0, r3
    660e:	4b39      	ldr	r3, [pc, #228]	; (66f4 <_ext_irq_handler+0x124>)
    6610:	4798      	blx	r3
    6612:	4603      	mov	r3, r0
    6614:	b2db      	uxtb	r3, r3
    6616:	3b01      	subs	r3, #1
    6618:	b2db      	uxtb	r3, r3
    661a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    661c:	e047      	b.n	66ae <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    661e:	2300      	movs	r3, #0
    6620:	71fb      	strb	r3, [r7, #7]
    6622:	2304      	movs	r3, #4
    6624:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    6626:	e024      	b.n	6672 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    6628:	79ba      	ldrb	r2, [r7, #6]
    662a:	79fb      	ldrb	r3, [r7, #7]
    662c:	4413      	add	r3, r2
    662e:	105b      	asrs	r3, r3, #1
    6630:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    6632:	797b      	ldrb	r3, [r7, #5]
    6634:	4a30      	ldr	r2, [pc, #192]	; (66f8 <_ext_irq_handler+0x128>)
    6636:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    663a:	461a      	mov	r2, r3
    663c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6640:	429a      	cmp	r2, r3
    6642:	d106      	bne.n	6652 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    6644:	797b      	ldrb	r3, [r7, #5]
    6646:	4a2c      	ldr	r2, [pc, #176]	; (66f8 <_ext_irq_handler+0x128>)
    6648:	00db      	lsls	r3, r3, #3
    664a:	4413      	add	r3, r2
    664c:	685b      	ldr	r3, [r3, #4]
    664e:	60bb      	str	r3, [r7, #8]
					break;
    6650:	e013      	b.n	667a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    6652:	797b      	ldrb	r3, [r7, #5]
    6654:	4a28      	ldr	r2, [pc, #160]	; (66f8 <_ext_irq_handler+0x128>)
    6656:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    665a:	461a      	mov	r2, r3
    665c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6660:	429a      	cmp	r2, r3
    6662:	da03      	bge.n	666c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    6664:	797b      	ldrb	r3, [r7, #5]
    6666:	3301      	adds	r3, #1
    6668:	71fb      	strb	r3, [r7, #7]
    666a:	e002      	b.n	6672 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    666c:	797b      	ldrb	r3, [r7, #5]
    666e:	3b01      	subs	r3, #1
    6670:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    6672:	79ba      	ldrb	r2, [r7, #6]
    6674:	79fb      	ldrb	r3, [r7, #7]
    6676:	429a      	cmp	r2, r3
    6678:	d2d6      	bcs.n	6628 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    667a:	68bb      	ldr	r3, [r7, #8]
    667c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6680:	d003      	beq.n	668a <_ext_irq_handler+0xba>
				callback(pin);
    6682:	4b19      	ldr	r3, [pc, #100]	; (66e8 <_ext_irq_handler+0x118>)
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	68b8      	ldr	r0, [r7, #8]
    6688:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    668a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    668e:	2201      	movs	r2, #1
    6690:	fa02 f303 	lsl.w	r3, r2, r3
    6694:	43da      	mvns	r2, r3
    6696:	683b      	ldr	r3, [r7, #0]
    6698:	4013      	ands	r3, r2
    669a:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    669c:	683b      	ldr	r3, [r7, #0]
    669e:	4618      	mov	r0, r3
    66a0:	4b14      	ldr	r3, [pc, #80]	; (66f4 <_ext_irq_handler+0x124>)
    66a2:	4798      	blx	r3
    66a4:	4603      	mov	r3, r0
    66a6:	b2db      	uxtb	r3, r3
    66a8:	3b01      	subs	r3, #1
    66aa:	b2db      	uxtb	r3, r3
    66ac:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    66ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    66b2:	f1b3 3fff 	cmp.w	r3, #4294967295
    66b6:	d1b2      	bne.n	661e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    66b8:	4808      	ldr	r0, [pc, #32]	; (66dc <_ext_irq_handler+0x10c>)
    66ba:	4b09      	ldr	r3, [pc, #36]	; (66e0 <_ext_irq_handler+0x110>)
    66bc:	4798      	blx	r3
    66be:	4603      	mov	r3, r0
    66c0:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    66c2:	683b      	ldr	r3, [r7, #0]
    66c4:	4619      	mov	r1, r3
    66c6:	4805      	ldr	r0, [pc, #20]	; (66dc <_ext_irq_handler+0x10c>)
    66c8:	4b06      	ldr	r3, [pc, #24]	; (66e4 <_ext_irq_handler+0x114>)
    66ca:	4798      	blx	r3
	while (flags) {
    66cc:	683b      	ldr	r3, [r7, #0]
    66ce:	2b00      	cmp	r3, #0
    66d0:	d19b      	bne.n	660a <_ext_irq_handler+0x3a>
	}
}
    66d2:	bf00      	nop
    66d4:	3710      	adds	r7, #16
    66d6:	46bd      	mov	sp, r7
    66d8:	bd80      	pop	{r7, pc}
    66da:	bf00      	nop
    66dc:	40002800 	.word	0x40002800
    66e0:	000062bd 	.word	0x000062bd
    66e4:	000062d5 	.word	0x000062d5
    66e8:	20001ce0 	.word	0x20001ce0
    66ec:	00011ab8 	.word	0x00011ab8
    66f0:	00005545 	.word	0x00005545
    66f4:	000107a5 	.word	0x000107a5
    66f8:	00011a98 	.word	0x00011a98

000066fc <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    66fc:	b580      	push	{r7, lr}
    66fe:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6700:	4b01      	ldr	r3, [pc, #4]	; (6708 <EIC_4_Handler+0xc>)
    6702:	4798      	blx	r3
} /**
    6704:	bf00      	nop
    6706:	bd80      	pop	{r7, pc}
    6708:	000065d1 	.word	0x000065d1

0000670c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    670c:	b580      	push	{r7, lr}
    670e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6710:	4b01      	ldr	r3, [pc, #4]	; (6718 <EIC_5_Handler+0xc>)
    6712:	4798      	blx	r3
} /**
    6714:	bf00      	nop
    6716:	bd80      	pop	{r7, pc}
    6718:	000065d1 	.word	0x000065d1

0000671c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    671c:	b580      	push	{r7, lr}
    671e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6720:	4b01      	ldr	r3, [pc, #4]	; (6728 <EIC_6_Handler+0xc>)
    6722:	4798      	blx	r3
} /**
    6724:	bf00      	nop
    6726:	bd80      	pop	{r7, pc}
    6728:	000065d1 	.word	0x000065d1

0000672c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    672c:	b580      	push	{r7, lr}
    672e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6730:	4b01      	ldr	r3, [pc, #4]	; (6738 <EIC_7_Handler+0xc>)
    6732:	4798      	blx	r3
}
    6734:	bf00      	nop
    6736:	bd80      	pop	{r7, pc}
    6738:	000065d1 	.word	0x000065d1

0000673c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    673c:	b480      	push	{r7}
    673e:	b085      	sub	sp, #20
    6740:	af00      	add	r7, sp, #0
    6742:	60f8      	str	r0, [r7, #12]
    6744:	460b      	mov	r3, r1
    6746:	607a      	str	r2, [r7, #4]
    6748:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    674a:	7afa      	ldrb	r2, [r7, #11]
    674c:	68fb      	ldr	r3, [r7, #12]
    674e:	3248      	adds	r2, #72	; 0x48
    6750:	6879      	ldr	r1, [r7, #4]
    6752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    6756:	bf00      	nop
    6758:	3714      	adds	r7, #20
    675a:	46bd      	mov	sp, r7
    675c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6760:	4770      	bx	lr

00006762 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    6762:	b480      	push	{r7}
    6764:	b083      	sub	sp, #12
    6766:	af00      	add	r7, sp, #0
    6768:	6078      	str	r0, [r7, #4]
    676a:	460b      	mov	r3, r1
    676c:	70fb      	strb	r3, [r7, #3]
    676e:	4613      	mov	r3, r2
    6770:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6772:	78fb      	ldrb	r3, [r7, #3]
    6774:	687a      	ldr	r2, [r7, #4]
    6776:	3304      	adds	r3, #4
    6778:	00db      	lsls	r3, r3, #3
    677a:	4413      	add	r3, r2
    677c:	78ba      	ldrb	r2, [r7, #2]
    677e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6780:	78fb      	ldrb	r3, [r7, #3]
    6782:	78ba      	ldrb	r2, [r7, #2]
    6784:	43d2      	mvns	r2, r2
    6786:	b2d1      	uxtb	r1, r2
    6788:	687a      	ldr	r2, [r7, #4]
    678a:	3304      	adds	r3, #4
    678c:	00db      	lsls	r3, r3, #3
    678e:	4413      	add	r3, r2
    6790:	460a      	mov	r2, r1
    6792:	711a      	strb	r2, [r3, #4]
}
    6794:	bf00      	nop
    6796:	370c      	adds	r7, #12
    6798:	46bd      	mov	sp, r7
    679a:	f85d 7b04 	ldr.w	r7, [sp], #4
    679e:	4770      	bx	lr

000067a0 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    67a0:	b480      	push	{r7}
    67a2:	b085      	sub	sp, #20
    67a4:	af00      	add	r7, sp, #0
    67a6:	60f8      	str	r0, [r7, #12]
    67a8:	460b      	mov	r3, r1
    67aa:	607a      	str	r2, [r7, #4]
    67ac:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    67ae:	7afa      	ldrb	r2, [r7, #11]
    67b0:	68fb      	ldr	r3, [r7, #12]
    67b2:	3204      	adds	r2, #4
    67b4:	6879      	ldr	r1, [r7, #4]
    67b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    67ba:	bf00      	nop
    67bc:	3714      	adds	r7, #20
    67be:	46bd      	mov	sp, r7
    67c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    67c4:	4770      	bx	lr
	...

000067c8 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    67c8:	b580      	push	{r7, lr}
    67ca:	b082      	sub	sp, #8
    67cc:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    67ce:	2300      	movs	r3, #0
    67d0:	71fb      	strb	r3, [r7, #7]
    67d2:	e00b      	b.n	67ec <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    67d4:	79fb      	ldrb	r3, [r7, #7]
    67d6:	4a18      	ldr	r2, [pc, #96]	; (6838 <_event_system_init+0x70>)
    67d8:	5cd3      	ldrb	r3, [r2, r3]
    67da:	461a      	mov	r2, r3
    67dc:	79fb      	ldrb	r3, [r7, #7]
    67de:	4619      	mov	r1, r3
    67e0:	4816      	ldr	r0, [pc, #88]	; (683c <_event_system_init+0x74>)
    67e2:	4b17      	ldr	r3, [pc, #92]	; (6840 <_event_system_init+0x78>)
    67e4:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    67e6:	79fb      	ldrb	r3, [r7, #7]
    67e8:	3301      	adds	r3, #1
    67ea:	71fb      	strb	r3, [r7, #7]
    67ec:	79fb      	ldrb	r3, [r7, #7]
    67ee:	2b42      	cmp	r3, #66	; 0x42
    67f0:	d9f0      	bls.n	67d4 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    67f2:	2300      	movs	r3, #0
    67f4:	71fb      	strb	r3, [r7, #7]
    67f6:	e016      	b.n	6826 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    67f8:	79fb      	ldrb	r3, [r7, #7]
    67fa:	4a12      	ldr	r2, [pc, #72]	; (6844 <_event_system_init+0x7c>)
    67fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6800:	461a      	mov	r2, r3
    6802:	79fb      	ldrb	r3, [r7, #7]
    6804:	4619      	mov	r1, r3
    6806:	480d      	ldr	r0, [pc, #52]	; (683c <_event_system_init+0x74>)
    6808:	4b0f      	ldr	r3, [pc, #60]	; (6848 <_event_system_init+0x80>)
    680a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    680c:	79fb      	ldrb	r3, [r7, #7]
    680e:	4a0f      	ldr	r2, [pc, #60]	; (684c <_event_system_init+0x84>)
    6810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6814:	b2da      	uxtb	r2, r3
    6816:	79fb      	ldrb	r3, [r7, #7]
    6818:	4619      	mov	r1, r3
    681a:	4808      	ldr	r0, [pc, #32]	; (683c <_event_system_init+0x74>)
    681c:	4b0c      	ldr	r3, [pc, #48]	; (6850 <_event_system_init+0x88>)
    681e:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6820:	79fb      	ldrb	r3, [r7, #7]
    6822:	3301      	adds	r3, #1
    6824:	71fb      	strb	r3, [r7, #7]
    6826:	79fb      	ldrb	r3, [r7, #7]
    6828:	2b1f      	cmp	r3, #31
    682a:	d9e5      	bls.n	67f8 <_event_system_init+0x30>
	}

	return ERR_NONE;
    682c:	2300      	movs	r3, #0
}
    682e:	4618      	mov	r0, r3
    6830:	3708      	adds	r7, #8
    6832:	46bd      	mov	sp, r7
    6834:	bd80      	pop	{r7, pc}
    6836:	bf00      	nop
    6838:	00011ad0 	.word	0x00011ad0
    683c:	4100e000 	.word	0x4100e000
    6840:	0000673d 	.word	0x0000673d
    6844:	00011b14 	.word	0x00011b14
    6848:	000067a1 	.word	0x000067a1
    684c:	00011b54 	.word	0x00011b54
    6850:	00006763 	.word	0x00006763

00006854 <hri_gclk_wait_for_sync>:
{
    6854:	b480      	push	{r7}
    6856:	b083      	sub	sp, #12
    6858:	af00      	add	r7, sp, #0
    685a:	6078      	str	r0, [r7, #4]
    685c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    685e:	bf00      	nop
    6860:	687b      	ldr	r3, [r7, #4]
    6862:	685a      	ldr	r2, [r3, #4]
    6864:	683b      	ldr	r3, [r7, #0]
    6866:	4013      	ands	r3, r2
    6868:	2b00      	cmp	r3, #0
    686a:	d1f9      	bne.n	6860 <hri_gclk_wait_for_sync+0xc>
}
    686c:	bf00      	nop
    686e:	370c      	adds	r7, #12
    6870:	46bd      	mov	sp, r7
    6872:	f85d 7b04 	ldr.w	r7, [sp], #4
    6876:	4770      	bx	lr

00006878 <hri_gclk_write_GENCTRL_reg>:
{
    6878:	b580      	push	{r7, lr}
    687a:	b084      	sub	sp, #16
    687c:	af00      	add	r7, sp, #0
    687e:	60f8      	str	r0, [r7, #12]
    6880:	460b      	mov	r3, r1
    6882:	607a      	str	r2, [r7, #4]
    6884:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6886:	7afa      	ldrb	r2, [r7, #11]
    6888:	68fb      	ldr	r3, [r7, #12]
    688a:	3208      	adds	r2, #8
    688c:	6879      	ldr	r1, [r7, #4]
    688e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6892:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6896:	68f8      	ldr	r0, [r7, #12]
    6898:	4b02      	ldr	r3, [pc, #8]	; (68a4 <hri_gclk_write_GENCTRL_reg+0x2c>)
    689a:	4798      	blx	r3
}
    689c:	bf00      	nop
    689e:	3710      	adds	r7, #16
    68a0:	46bd      	mov	sp, r7
    68a2:	bd80      	pop	{r7, pc}
    68a4:	00006855 	.word	0x00006855

000068a8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    68a8:	b580      	push	{r7, lr}
    68aa:	b082      	sub	sp, #8
    68ac:	af00      	add	r7, sp, #0
    68ae:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    68b0:	687b      	ldr	r3, [r7, #4]
    68b2:	f003 0301 	and.w	r3, r3, #1
    68b6:	2b00      	cmp	r3, #0
    68b8:	d004      	beq.n	68c4 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    68ba:	4a27      	ldr	r2, [pc, #156]	; (6958 <_gclk_init_generators_by_fref+0xb0>)
    68bc:	2100      	movs	r1, #0
    68be:	4827      	ldr	r0, [pc, #156]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    68c0:	4b27      	ldr	r3, [pc, #156]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    68c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    68c4:	687b      	ldr	r3, [r7, #4]
    68c6:	f003 0302 	and.w	r3, r3, #2
    68ca:	2b00      	cmp	r3, #0
    68cc:	d004      	beq.n	68d8 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    68ce:	4a25      	ldr	r2, [pc, #148]	; (6964 <_gclk_init_generators_by_fref+0xbc>)
    68d0:	2101      	movs	r1, #1
    68d2:	4822      	ldr	r0, [pc, #136]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    68d4:	4b22      	ldr	r3, [pc, #136]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    68d6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	f003 0304 	and.w	r3, r3, #4
    68de:	2b00      	cmp	r3, #0
    68e0:	d004      	beq.n	68ec <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    68e2:	4a21      	ldr	r2, [pc, #132]	; (6968 <_gclk_init_generators_by_fref+0xc0>)
    68e4:	2102      	movs	r1, #2
    68e6:	481d      	ldr	r0, [pc, #116]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    68e8:	4b1d      	ldr	r3, [pc, #116]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    68ea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    68ec:	687b      	ldr	r3, [r7, #4]
    68ee:	f003 0308 	and.w	r3, r3, #8
    68f2:	2b00      	cmp	r3, #0
    68f4:	d004      	beq.n	6900 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    68f6:	4a1d      	ldr	r2, [pc, #116]	; (696c <_gclk_init_generators_by_fref+0xc4>)
    68f8:	2103      	movs	r1, #3
    68fa:	4818      	ldr	r0, [pc, #96]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    68fc:	4b18      	ldr	r3, [pc, #96]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    68fe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	f003 0310 	and.w	r3, r3, #16
    6906:	2b00      	cmp	r3, #0
    6908:	d004      	beq.n	6914 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    690a:	4a19      	ldr	r2, [pc, #100]	; (6970 <_gclk_init_generators_by_fref+0xc8>)
    690c:	2104      	movs	r1, #4
    690e:	4813      	ldr	r0, [pc, #76]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    6910:	4b13      	ldr	r3, [pc, #76]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    6912:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    6914:	687b      	ldr	r3, [r7, #4]
    6916:	f003 0320 	and.w	r3, r3, #32
    691a:	2b00      	cmp	r3, #0
    691c:	d004      	beq.n	6928 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    691e:	4a15      	ldr	r2, [pc, #84]	; (6974 <_gclk_init_generators_by_fref+0xcc>)
    6920:	2105      	movs	r1, #5
    6922:	480e      	ldr	r0, [pc, #56]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    6924:	4b0e      	ldr	r3, [pc, #56]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    6926:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    692e:	2b00      	cmp	r3, #0
    6930:	d004      	beq.n	693c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    6932:	4a11      	ldr	r2, [pc, #68]	; (6978 <_gclk_init_generators_by_fref+0xd0>)
    6934:	210a      	movs	r1, #10
    6936:	4809      	ldr	r0, [pc, #36]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    6938:	4b09      	ldr	r3, [pc, #36]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    693a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6942:	2b00      	cmp	r3, #0
    6944:	d004      	beq.n	6950 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    6946:	4a0d      	ldr	r2, [pc, #52]	; (697c <_gclk_init_generators_by_fref+0xd4>)
    6948:	210b      	movs	r1, #11
    694a:	4804      	ldr	r0, [pc, #16]	; (695c <_gclk_init_generators_by_fref+0xb4>)
    694c:	4b04      	ldr	r3, [pc, #16]	; (6960 <_gclk_init_generators_by_fref+0xb8>)
    694e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    6950:	bf00      	nop
    6952:	3708      	adds	r7, #8
    6954:	46bd      	mov	sp, r7
    6956:	bd80      	pop	{r7, pc}
    6958:	00010107 	.word	0x00010107
    695c:	40001c00 	.word	0x40001c00
    6960:	00006879 	.word	0x00006879
    6964:	00010907 	.word	0x00010907
    6968:	00010906 	.word	0x00010906
    696c:	00011908 	.word	0x00011908
    6970:	00010901 	.word	0x00010901
    6974:	00062901 	.word	0x00062901
    6978:	00010905 	.word	0x00010905
    697c:	00041905 	.word	0x00041905

00006980 <hri_mclk_write_CPUDIV_reg>:
{
    6980:	b480      	push	{r7}
    6982:	b083      	sub	sp, #12
    6984:	af00      	add	r7, sp, #0
    6986:	6078      	str	r0, [r7, #4]
    6988:	460b      	mov	r3, r1
    698a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	78fa      	ldrb	r2, [r7, #3]
    6990:	715a      	strb	r2, [r3, #5]
}
    6992:	bf00      	nop
    6994:	370c      	adds	r7, #12
    6996:	46bd      	mov	sp, r7
    6998:	f85d 7b04 	ldr.w	r7, [sp], #4
    699c:	4770      	bx	lr
	...

000069a0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b082      	sub	sp, #8
    69a4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    69a6:	4b05      	ldr	r3, [pc, #20]	; (69bc <_mclk_init+0x1c>)
    69a8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    69aa:	2101      	movs	r1, #1
    69ac:	6878      	ldr	r0, [r7, #4]
    69ae:	4b04      	ldr	r3, [pc, #16]	; (69c0 <_mclk_init+0x20>)
    69b0:	4798      	blx	r3
}
    69b2:	bf00      	nop
    69b4:	3708      	adds	r7, #8
    69b6:	46bd      	mov	sp, r7
    69b8:	bd80      	pop	{r7, pc}
    69ba:	bf00      	nop
    69bc:	40000800 	.word	0x40000800
    69c0:	00006981 	.word	0x00006981

000069c4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    69c4:	b480      	push	{r7}
    69c6:	b083      	sub	sp, #12
    69c8:	af00      	add	r7, sp, #0
    69ca:	6078      	str	r0, [r7, #4]
    69cc:	460b      	mov	r3, r1
    69ce:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    69d0:	687b      	ldr	r3, [r7, #4]
    69d2:	78fa      	ldrb	r2, [r7, #3]
    69d4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    69d6:	bf00      	nop
    69d8:	370c      	adds	r7, #12
    69da:	46bd      	mov	sp, r7
    69dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    69e0:	4770      	bx	lr

000069e2 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    69e2:	b480      	push	{r7}
    69e4:	b083      	sub	sp, #12
    69e6:	af00      	add	r7, sp, #0
    69e8:	6078      	str	r0, [r7, #4]
    69ea:	460b      	mov	r3, r1
    69ec:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	887a      	ldrh	r2, [r7, #2]
    69f2:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    69f4:	bf00      	nop
    69f6:	370c      	adds	r7, #12
    69f8:	46bd      	mov	sp, r7
    69fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fe:	4770      	bx	lr

00006a00 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6a00:	b480      	push	{r7}
    6a02:	b083      	sub	sp, #12
    6a04:	af00      	add	r7, sp, #0
    6a06:	6078      	str	r0, [r7, #4]
    6a08:	460b      	mov	r3, r1
    6a0a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6a0c:	687b      	ldr	r3, [r7, #4]
    6a0e:	78fa      	ldrb	r2, [r7, #3]
    6a10:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a12:	bf00      	nop
    6a14:	370c      	adds	r7, #12
    6a16:	46bd      	mov	sp, r7
    6a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a1c:	4770      	bx	lr

00006a1e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    6a1e:	b480      	push	{r7}
    6a20:	b083      	sub	sp, #12
    6a22:	af00      	add	r7, sp, #0
    6a24:	6078      	str	r0, [r7, #4]
    6a26:	460b      	mov	r3, r1
    6a28:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    6a2a:	687b      	ldr	r3, [r7, #4]
    6a2c:	78fa      	ldrb	r2, [r7, #3]
    6a2e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a30:	bf00      	nop
    6a32:	370c      	adds	r7, #12
    6a34:	46bd      	mov	sp, r7
    6a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a3a:	4770      	bx	lr

00006a3c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    6a3c:	b480      	push	{r7}
    6a3e:	b085      	sub	sp, #20
    6a40:	af00      	add	r7, sp, #0
    6a42:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	69db      	ldr	r3, [r3, #28]
    6a48:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    6a4a:	68fb      	ldr	r3, [r7, #12]
    6a4c:	0a1b      	lsrs	r3, r3, #8
    6a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a52:	60fb      	str	r3, [r7, #12]
	return tmp;
    6a54:	68fb      	ldr	r3, [r7, #12]
}
    6a56:	4618      	mov	r0, r3
    6a58:	3714      	adds	r7, #20
    6a5a:	46bd      	mov	sp, r7
    6a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a60:	4770      	bx	lr

00006a62 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    6a62:	b480      	push	{r7}
    6a64:	b083      	sub	sp, #12
    6a66:	af00      	add	r7, sp, #0
    6a68:	6078      	str	r0, [r7, #4]
    6a6a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6a6c:	687b      	ldr	r3, [r7, #4]
    6a6e:	683a      	ldr	r2, [r7, #0]
    6a70:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a72:	bf00      	nop
    6a74:	370c      	adds	r7, #12
    6a76:	46bd      	mov	sp, r7
    6a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a7c:	4770      	bx	lr
	...

00006a80 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b082      	sub	sp, #8
    6a84:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    6a86:	4b13      	ldr	r3, [pc, #76]	; (6ad4 <_osc32kctrl_init_sources+0x54>)
    6a88:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6a8a:	2300      	movs	r3, #0
    6a8c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    6a8e:	f242 018e 	movw	r1, #8334	; 0x208e
    6a92:	6878      	ldr	r0, [r7, #4]
    6a94:	4b10      	ldr	r3, [pc, #64]	; (6ad8 <_osc32kctrl_init_sources+0x58>)
    6a96:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6a98:	2100      	movs	r1, #0
    6a9a:	6878      	ldr	r0, [r7, #4]
    6a9c:	4b0f      	ldr	r3, [pc, #60]	; (6adc <_osc32kctrl_init_sources+0x5c>)
    6a9e:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    6aa0:	2100      	movs	r1, #0
    6aa2:	6878      	ldr	r0, [r7, #4]
    6aa4:	4b0e      	ldr	r3, [pc, #56]	; (6ae0 <_osc32kctrl_init_sources+0x60>)
    6aa6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6aa8:	6878      	ldr	r0, [r7, #4]
    6aaa:	4b0e      	ldr	r3, [pc, #56]	; (6ae4 <_osc32kctrl_init_sources+0x64>)
    6aac:	4798      	blx	r3
    6aae:	4603      	mov	r3, r0
    6ab0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6ab2:	887b      	ldrh	r3, [r7, #2]
    6ab4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6ab6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6aba:	4619      	mov	r1, r3
    6abc:	6878      	ldr	r0, [r7, #4]
    6abe:	4b0a      	ldr	r3, [pc, #40]	; (6ae8 <_osc32kctrl_init_sources+0x68>)
    6ac0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    6ac2:	2100      	movs	r1, #0
    6ac4:	6878      	ldr	r0, [r7, #4]
    6ac6:	4b09      	ldr	r3, [pc, #36]	; (6aec <_osc32kctrl_init_sources+0x6c>)
    6ac8:	4798      	blx	r3
	(void)calib;
}
    6aca:	bf00      	nop
    6acc:	3708      	adds	r7, #8
    6ace:	46bd      	mov	sp, r7
    6ad0:	bd80      	pop	{r7, pc}
    6ad2:	bf00      	nop
    6ad4:	40001400 	.word	0x40001400
    6ad8:	000069e3 	.word	0x000069e3
    6adc:	00006a01 	.word	0x00006a01
    6ae0:	00006a1f 	.word	0x00006a1f
    6ae4:	00006a3d 	.word	0x00006a3d
    6ae8:	00006a63 	.word	0x00006a63
    6aec:	000069c5 	.word	0x000069c5

00006af0 <hri_gclk_wait_for_sync>:
{
    6af0:	b480      	push	{r7}
    6af2:	b083      	sub	sp, #12
    6af4:	af00      	add	r7, sp, #0
    6af6:	6078      	str	r0, [r7, #4]
    6af8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6afa:	bf00      	nop
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	685a      	ldr	r2, [r3, #4]
    6b00:	683b      	ldr	r3, [r7, #0]
    6b02:	4013      	ands	r3, r2
    6b04:	2b00      	cmp	r3, #0
    6b06:	d1f9      	bne.n	6afc <hri_gclk_wait_for_sync+0xc>
}
    6b08:	bf00      	nop
    6b0a:	370c      	adds	r7, #12
    6b0c:	46bd      	mov	sp, r7
    6b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b12:	4770      	bx	lr

00006b14 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6b14:	b480      	push	{r7}
    6b16:	b083      	sub	sp, #12
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	685b      	ldr	r3, [r3, #4]
    6b20:	089b      	lsrs	r3, r3, #2
    6b22:	f003 0301 	and.w	r3, r3, #1
    6b26:	2b00      	cmp	r3, #0
    6b28:	bf14      	ite	ne
    6b2a:	2301      	movne	r3, #1
    6b2c:	2300      	moveq	r3, #0
    6b2e:	b2db      	uxtb	r3, r3
}
    6b30:	4618      	mov	r0, r3
    6b32:	370c      	adds	r7, #12
    6b34:	46bd      	mov	sp, r7
    6b36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b3a:	4770      	bx	lr

00006b3c <hri_gclk_read_SYNCBUSY_reg>:
{
    6b3c:	b480      	push	{r7}
    6b3e:	b083      	sub	sp, #12
    6b40:	af00      	add	r7, sp, #0
    6b42:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	685b      	ldr	r3, [r3, #4]
}
    6b48:	4618      	mov	r0, r3
    6b4a:	370c      	adds	r7, #12
    6b4c:	46bd      	mov	sp, r7
    6b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b52:	4770      	bx	lr

00006b54 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6b54:	b580      	push	{r7, lr}
    6b56:	b086      	sub	sp, #24
    6b58:	af00      	add	r7, sp, #0
    6b5a:	60f8      	str	r0, [r7, #12]
    6b5c:	460b      	mov	r3, r1
    6b5e:	607a      	str	r2, [r7, #4]
    6b60:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6b62:	7afa      	ldrb	r2, [r7, #11]
    6b64:	68fb      	ldr	r3, [r7, #12]
    6b66:	3208      	adds	r2, #8
    6b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b6c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6b6e:	697b      	ldr	r3, [r7, #20]
    6b70:	f023 030f 	bic.w	r3, r3, #15
    6b74:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	f003 030f 	and.w	r3, r3, #15
    6b7c:	697a      	ldr	r2, [r7, #20]
    6b7e:	4313      	orrs	r3, r2
    6b80:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6b82:	7afa      	ldrb	r2, [r7, #11]
    6b84:	68fb      	ldr	r3, [r7, #12]
    6b86:	3208      	adds	r2, #8
    6b88:	6979      	ldr	r1, [r7, #20]
    6b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6b8e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6b92:	68f8      	ldr	r0, [r7, #12]
    6b94:	4b02      	ldr	r3, [pc, #8]	; (6ba0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    6b96:	4798      	blx	r3
}
    6b98:	bf00      	nop
    6b9a:	3718      	adds	r7, #24
    6b9c:	46bd      	mov	sp, r7
    6b9e:	bd80      	pop	{r7, pc}
    6ba0:	00006af1 	.word	0x00006af1

00006ba4 <hri_gclk_write_PCHCTRL_reg>:
{
    6ba4:	b480      	push	{r7}
    6ba6:	b085      	sub	sp, #20
    6ba8:	af00      	add	r7, sp, #0
    6baa:	60f8      	str	r0, [r7, #12]
    6bac:	460b      	mov	r3, r1
    6bae:	607a      	str	r2, [r7, #4]
    6bb0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6bb2:	7afa      	ldrb	r2, [r7, #11]
    6bb4:	68fb      	ldr	r3, [r7, #12]
    6bb6:	3220      	adds	r2, #32
    6bb8:	6879      	ldr	r1, [r7, #4]
    6bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6bbe:	bf00      	nop
    6bc0:	3714      	adds	r7, #20
    6bc2:	46bd      	mov	sp, r7
    6bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bc8:	4770      	bx	lr

00006bca <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    6bca:	b480      	push	{r7}
    6bcc:	b085      	sub	sp, #20
    6bce:	af00      	add	r7, sp, #0
    6bd0:	60f8      	str	r0, [r7, #12]
    6bd2:	460b      	mov	r3, r1
    6bd4:	607a      	str	r2, [r7, #4]
    6bd6:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6bd8:	bf00      	nop
    6bda:	7afa      	ldrb	r2, [r7, #11]
    6bdc:	68f9      	ldr	r1, [r7, #12]
    6bde:	4613      	mov	r3, r2
    6be0:	009b      	lsls	r3, r3, #2
    6be2:	4413      	add	r3, r2
    6be4:	009b      	lsls	r3, r3, #2
    6be6:	440b      	add	r3, r1
    6be8:	333c      	adds	r3, #60	; 0x3c
    6bea:	681a      	ldr	r2, [r3, #0]
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	4013      	ands	r3, r2
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d1f2      	bne.n	6bda <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6bf4:	bf00      	nop
    6bf6:	3714      	adds	r7, #20
    6bf8:	46bd      	mov	sp, r7
    6bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bfe:	4770      	bx	lr

00006c00 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6c00:	b480      	push	{r7}
    6c02:	b083      	sub	sp, #12
    6c04:	af00      	add	r7, sp, #0
    6c06:	6078      	str	r0, [r7, #4]
    6c08:	460b      	mov	r3, r1
    6c0a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6c0c:	78fa      	ldrb	r2, [r7, #3]
    6c0e:	6879      	ldr	r1, [r7, #4]
    6c10:	4613      	mov	r3, r2
    6c12:	009b      	lsls	r3, r3, #2
    6c14:	4413      	add	r3, r2
    6c16:	009b      	lsls	r3, r3, #2
    6c18:	440b      	add	r3, r1
    6c1a:	3340      	adds	r3, #64	; 0x40
    6c1c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6c1e:	f003 0301 	and.w	r3, r3, #1
    6c22:	2b00      	cmp	r3, #0
    6c24:	bf14      	ite	ne
    6c26:	2301      	movne	r3, #1
    6c28:	2300      	moveq	r3, #0
    6c2a:	b2db      	uxtb	r3, r3
}
    6c2c:	4618      	mov	r0, r3
    6c2e:	370c      	adds	r7, #12
    6c30:	46bd      	mov	sp, r7
    6c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c36:	4770      	bx	lr

00006c38 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    6c38:	b480      	push	{r7}
    6c3a:	b083      	sub	sp, #12
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	6078      	str	r0, [r7, #4]
    6c40:	460b      	mov	r3, r1
    6c42:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6c44:	78fa      	ldrb	r2, [r7, #3]
    6c46:	6879      	ldr	r1, [r7, #4]
    6c48:	4613      	mov	r3, r2
    6c4a:	009b      	lsls	r3, r3, #2
    6c4c:	4413      	add	r3, r2
    6c4e:	009b      	lsls	r3, r3, #2
    6c50:	440b      	add	r3, r1
    6c52:	3340      	adds	r3, #64	; 0x40
    6c54:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    6c56:	085b      	lsrs	r3, r3, #1
    6c58:	f003 0301 	and.w	r3, r3, #1
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	bf14      	ite	ne
    6c60:	2301      	movne	r3, #1
    6c62:	2300      	moveq	r3, #0
    6c64:	b2db      	uxtb	r3, r3
}
    6c66:	4618      	mov	r0, r3
    6c68:	370c      	adds	r7, #12
    6c6a:	46bd      	mov	sp, r7
    6c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c70:	4770      	bx	lr
	...

00006c74 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
    6c7c:	460b      	mov	r3, r1
    6c7e:	70fb      	strb	r3, [r7, #3]
    6c80:	4613      	mov	r3, r2
    6c82:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6c84:	78fa      	ldrb	r2, [r7, #3]
    6c86:	6879      	ldr	r1, [r7, #4]
    6c88:	4613      	mov	r3, r2
    6c8a:	009b      	lsls	r3, r3, #2
    6c8c:	4413      	add	r3, r2
    6c8e:	009b      	lsls	r3, r3, #2
    6c90:	440b      	add	r3, r1
    6c92:	3330      	adds	r3, #48	; 0x30
    6c94:	78ba      	ldrb	r2, [r7, #2]
    6c96:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6c98:	78fb      	ldrb	r3, [r7, #3]
    6c9a:	2202      	movs	r2, #2
    6c9c:	4619      	mov	r1, r3
    6c9e:	6878      	ldr	r0, [r7, #4]
    6ca0:	4b02      	ldr	r3, [pc, #8]	; (6cac <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    6ca2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6ca4:	bf00      	nop
    6ca6:	3708      	adds	r7, #8
    6ca8:	46bd      	mov	sp, r7
    6caa:	bd80      	pop	{r7, pc}
    6cac:	00006bcb 	.word	0x00006bcb

00006cb0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6cb0:	b580      	push	{r7, lr}
    6cb2:	b084      	sub	sp, #16
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	60f8      	str	r0, [r7, #12]
    6cb8:	460b      	mov	r3, r1
    6cba:	607a      	str	r2, [r7, #4]
    6cbc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6cbe:	7afa      	ldrb	r2, [r7, #11]
    6cc0:	68f9      	ldr	r1, [r7, #12]
    6cc2:	4613      	mov	r3, r2
    6cc4:	009b      	lsls	r3, r3, #2
    6cc6:	4413      	add	r3, r2
    6cc8:	009b      	lsls	r3, r3, #2
    6cca:	440b      	add	r3, r1
    6ccc:	3334      	adds	r3, #52	; 0x34
    6cce:	687a      	ldr	r2, [r7, #4]
    6cd0:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6cd2:	7afb      	ldrb	r3, [r7, #11]
    6cd4:	2206      	movs	r2, #6
    6cd6:	4619      	mov	r1, r3
    6cd8:	68f8      	ldr	r0, [r7, #12]
    6cda:	4b03      	ldr	r3, [pc, #12]	; (6ce8 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6cdc:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6cde:	bf00      	nop
    6ce0:	3710      	adds	r7, #16
    6ce2:	46bd      	mov	sp, r7
    6ce4:	bd80      	pop	{r7, pc}
    6ce6:	bf00      	nop
    6ce8:	00006bcb 	.word	0x00006bcb

00006cec <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6cec:	b480      	push	{r7}
    6cee:	b085      	sub	sp, #20
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	60f8      	str	r0, [r7, #12]
    6cf4:	460b      	mov	r3, r1
    6cf6:	607a      	str	r2, [r7, #4]
    6cf8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6cfa:	7afa      	ldrb	r2, [r7, #11]
    6cfc:	68f9      	ldr	r1, [r7, #12]
    6cfe:	4613      	mov	r3, r2
    6d00:	009b      	lsls	r3, r3, #2
    6d02:	4413      	add	r3, r2
    6d04:	009b      	lsls	r3, r3, #2
    6d06:	440b      	add	r3, r1
    6d08:	3338      	adds	r3, #56	; 0x38
    6d0a:	687a      	ldr	r2, [r7, #4]
    6d0c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d0e:	bf00      	nop
    6d10:	3714      	adds	r7, #20
    6d12:	46bd      	mov	sp, r7
    6d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d18:	4770      	bx	lr

00006d1a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    6d1a:	b480      	push	{r7}
    6d1c:	b083      	sub	sp, #12
    6d1e:	af00      	add	r7, sp, #0
    6d20:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	691b      	ldr	r3, [r3, #16]
    6d26:	085b      	lsrs	r3, r3, #1
    6d28:	f003 0301 	and.w	r3, r3, #1
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	bf14      	ite	ne
    6d30:	2301      	movne	r3, #1
    6d32:	2300      	moveq	r3, #0
    6d34:	b2db      	uxtb	r3, r3
}
    6d36:	4618      	mov	r0, r3
    6d38:	370c      	adds	r7, #12
    6d3a:	46bd      	mov	sp, r7
    6d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d40:	4770      	bx	lr

00006d42 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6d42:	b480      	push	{r7}
    6d44:	b083      	sub	sp, #12
    6d46:	af00      	add	r7, sp, #0
    6d48:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	691b      	ldr	r3, [r3, #16]
    6d4e:	0a1b      	lsrs	r3, r3, #8
    6d50:	f003 0301 	and.w	r3, r3, #1
    6d54:	2b00      	cmp	r3, #0
    6d56:	bf14      	ite	ne
    6d58:	2301      	movne	r3, #1
    6d5a:	2300      	moveq	r3, #0
    6d5c:	b2db      	uxtb	r3, r3
}
    6d5e:	4618      	mov	r0, r3
    6d60:	370c      	adds	r7, #12
    6d62:	46bd      	mov	sp, r7
    6d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d68:	4770      	bx	lr

00006d6a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6d6a:	b480      	push	{r7}
    6d6c:	b085      	sub	sp, #20
    6d6e:	af00      	add	r7, sp, #0
    6d70:	6078      	str	r0, [r7, #4]
    6d72:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	691b      	ldr	r3, [r3, #16]
    6d78:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6d7a:	68fa      	ldr	r2, [r7, #12]
    6d7c:	683b      	ldr	r3, [r7, #0]
    6d7e:	4013      	ands	r3, r2
    6d80:	60fb      	str	r3, [r7, #12]
	return tmp;
    6d82:	68fb      	ldr	r3, [r7, #12]
}
    6d84:	4618      	mov	r0, r3
    6d86:	3714      	adds	r7, #20
    6d88:	46bd      	mov	sp, r7
    6d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d8e:	4770      	bx	lr

00006d90 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6d90:	b480      	push	{r7}
    6d92:	b085      	sub	sp, #20
    6d94:	af00      	add	r7, sp, #0
    6d96:	60f8      	str	r0, [r7, #12]
    6d98:	460b      	mov	r3, r1
    6d9a:	607a      	str	r2, [r7, #4]
    6d9c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6d9e:	7afb      	ldrb	r3, [r7, #11]
    6da0:	68fa      	ldr	r2, [r7, #12]
    6da2:	3304      	adds	r3, #4
    6da4:	009b      	lsls	r3, r3, #2
    6da6:	4413      	add	r3, r2
    6da8:	687a      	ldr	r2, [r7, #4]
    6daa:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6dac:	bf00      	nop
    6dae:	3714      	adds	r7, #20
    6db0:	46bd      	mov	sp, r7
    6db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6db6:	4770      	bx	lr

00006db8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    6db8:	b480      	push	{r7}
    6dba:	b083      	sub	sp, #12
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
    6dc0:	460b      	mov	r3, r1
    6dc2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	78fa      	ldrb	r2, [r7, #3]
    6dc8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6dca:	bf00      	nop
    6dcc:	370c      	adds	r7, #12
    6dce:	46bd      	mov	sp, r7
    6dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dd4:	4770      	bx	lr

00006dd6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    6dd6:	b480      	push	{r7}
    6dd8:	b085      	sub	sp, #20
    6dda:	af00      	add	r7, sp, #0
    6ddc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6dde:	687b      	ldr	r3, [r7, #4]
    6de0:	f893 3020 	ldrb.w	r3, [r3, #32]
    6de4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    6de6:	7bfb      	ldrb	r3, [r7, #15]
    6de8:	f003 0301 	and.w	r3, r3, #1
    6dec:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6dee:	7bfb      	ldrb	r3, [r7, #15]
    6df0:	2b00      	cmp	r3, #0
    6df2:	bf14      	ite	ne
    6df4:	2301      	movne	r3, #1
    6df6:	2300      	moveq	r3, #0
    6df8:	b2db      	uxtb	r3, r3
}
    6dfa:	4618      	mov	r0, r3
    6dfc:	3714      	adds	r7, #20
    6dfe:	46bd      	mov	sp, r7
    6e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e04:	4770      	bx	lr

00006e06 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    6e06:	b480      	push	{r7}
    6e08:	b083      	sub	sp, #12
    6e0a:	af00      	add	r7, sp, #0
    6e0c:	6078      	str	r0, [r7, #4]
    6e0e:	460b      	mov	r3, r1
    6e10:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	78fa      	ldrb	r2, [r7, #3]
    6e16:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e1a:	bf00      	nop
    6e1c:	370c      	adds	r7, #12
    6e1e:	46bd      	mov	sp, r7
    6e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e24:	4770      	bx	lr

00006e26 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    6e26:	b480      	push	{r7}
    6e28:	b083      	sub	sp, #12
    6e2a:	af00      	add	r7, sp, #0
    6e2c:	6078      	str	r0, [r7, #4]
    6e2e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	683a      	ldr	r2, [r7, #0]
    6e34:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e36:	bf00      	nop
    6e38:	370c      	adds	r7, #12
    6e3a:	46bd      	mov	sp, r7
    6e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e40:	4770      	bx	lr

00006e42 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    6e42:	b480      	push	{r7}
    6e44:	b083      	sub	sp, #12
    6e46:	af00      	add	r7, sp, #0
    6e48:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6e4e:	4618      	mov	r0, r3
    6e50:	370c      	adds	r7, #12
    6e52:	46bd      	mov	sp, r7
    6e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e58:	4770      	bx	lr

00006e5a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    6e5a:	b480      	push	{r7}
    6e5c:	b083      	sub	sp, #12
    6e5e:	af00      	add	r7, sp, #0
    6e60:	6078      	str	r0, [r7, #4]
    6e62:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	683a      	ldr	r2, [r7, #0]
    6e68:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e6a:	bf00      	nop
    6e6c:	370c      	adds	r7, #12
    6e6e:	46bd      	mov	sp, r7
    6e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e74:	4770      	bx	lr

00006e76 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    6e76:	b480      	push	{r7}
    6e78:	b085      	sub	sp, #20
    6e7a:	af00      	add	r7, sp, #0
    6e7c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6e84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    6e86:	7bfb      	ldrb	r3, [r7, #15]
    6e88:	085b      	lsrs	r3, r3, #1
    6e8a:	b2db      	uxtb	r3, r3
    6e8c:	f003 0301 	and.w	r3, r3, #1
    6e90:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6e92:	7bfb      	ldrb	r3, [r7, #15]
    6e94:	2b00      	cmp	r3, #0
    6e96:	bf14      	ite	ne
    6e98:	2301      	movne	r3, #1
    6e9a:	2300      	moveq	r3, #0
    6e9c:	b2db      	uxtb	r3, r3
}
    6e9e:	4618      	mov	r0, r3
    6ea0:	3714      	adds	r7, #20
    6ea2:	46bd      	mov	sp, r7
    6ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea8:	4770      	bx	lr

00006eaa <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    6eaa:	b480      	push	{r7}
    6eac:	b085      	sub	sp, #20
    6eae:	af00      	add	r7, sp, #0
    6eb0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6eb8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    6eba:	7bfb      	ldrb	r3, [r7, #15]
    6ebc:	089b      	lsrs	r3, r3, #2
    6ebe:	b2db      	uxtb	r3, r3
    6ec0:	f003 0301 	and.w	r3, r3, #1
    6ec4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6ec6:	7bfb      	ldrb	r3, [r7, #15]
    6ec8:	2b00      	cmp	r3, #0
    6eca:	bf14      	ite	ne
    6ecc:	2301      	movne	r3, #1
    6ece:	2300      	moveq	r3, #0
    6ed0:	b2db      	uxtb	r3, r3
}
    6ed2:	4618      	mov	r0, r3
    6ed4:	3714      	adds	r7, #20
    6ed6:	46bd      	mov	sp, r7
    6ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6edc:	4770      	bx	lr

00006ede <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6ede:	b480      	push	{r7}
    6ee0:	b085      	sub	sp, #20
    6ee2:	af00      	add	r7, sp, #0
    6ee4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6eec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6eee:	7bfb      	ldrb	r3, [r7, #15]
    6ef0:	08db      	lsrs	r3, r3, #3
    6ef2:	b2db      	uxtb	r3, r3
    6ef4:	f003 0301 	and.w	r3, r3, #1
    6ef8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6efa:	7bfb      	ldrb	r3, [r7, #15]
    6efc:	2b00      	cmp	r3, #0
    6efe:	bf14      	ite	ne
    6f00:	2301      	movne	r3, #1
    6f02:	2300      	moveq	r3, #0
    6f04:	b2db      	uxtb	r3, r3
}
    6f06:	4618      	mov	r0, r3
    6f08:	3714      	adds	r7, #20
    6f0a:	46bd      	mov	sp, r7
    6f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f10:	4770      	bx	lr

00006f12 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    6f12:	b480      	push	{r7}
    6f14:	b085      	sub	sp, #20
    6f16:	af00      	add	r7, sp, #0
    6f18:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6f20:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    6f22:	7bfb      	ldrb	r3, [r7, #15]
    6f24:	091b      	lsrs	r3, r3, #4
    6f26:	b2db      	uxtb	r3, r3
    6f28:	f003 0301 	and.w	r3, r3, #1
    6f2c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6f2e:	7bfb      	ldrb	r3, [r7, #15]
    6f30:	2b00      	cmp	r3, #0
    6f32:	bf14      	ite	ne
    6f34:	2301      	movne	r3, #1
    6f36:	2300      	moveq	r3, #0
    6f38:	b2db      	uxtb	r3, r3
}
    6f3a:	4618      	mov	r0, r3
    6f3c:	3714      	adds	r7, #20
    6f3e:	46bd      	mov	sp, r7
    6f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f44:	4770      	bx	lr
	...

00006f48 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6f48:	b580      	push	{r7, lr}
    6f4a:	b082      	sub	sp, #8
    6f4c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6f4e:	4b0a      	ldr	r3, [pc, #40]	; (6f78 <_oscctrl_init_sources+0x30>)
    6f50:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    6f52:	4a0a      	ldr	r2, [pc, #40]	; (6f7c <_oscctrl_init_sources+0x34>)
    6f54:	2101      	movs	r1, #1
    6f56:	6878      	ldr	r0, [r7, #4]
    6f58:	4b09      	ldr	r3, [pc, #36]	; (6f80 <_oscctrl_init_sources+0x38>)
    6f5a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6f5c:	bf00      	nop
    6f5e:	6878      	ldr	r0, [r7, #4]
    6f60:	4b08      	ldr	r3, [pc, #32]	; (6f84 <_oscctrl_init_sources+0x3c>)
    6f62:	4798      	blx	r3
    6f64:	4603      	mov	r3, r0
    6f66:	f083 0301 	eor.w	r3, r3, #1
    6f6a:	b2db      	uxtb	r3, r3
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d1f6      	bne.n	6f5e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    6f70:	bf00      	nop
    6f72:	3708      	adds	r7, #8
    6f74:	46bd      	mov	sp, r7
    6f76:	bd80      	pop	{r7, pc}
    6f78:	40001000 	.word	0x40001000
    6f7c:	03002606 	.word	0x03002606
    6f80:	00006d91 	.word	0x00006d91
    6f84:	00006d1b 	.word	0x00006d1b

00006f88 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b084      	sub	sp, #16
    6f8c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6f8e:	4b6b      	ldr	r3, [pc, #428]	; (713c <_oscctrl_init_referenced_generators+0x1b4>)
    6f90:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    6f92:	2204      	movs	r2, #4
    6f94:	2100      	movs	r1, #0
    6f96:	486a      	ldr	r0, [pc, #424]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    6f98:	4b6a      	ldr	r3, [pc, #424]	; (7144 <_oscctrl_init_referenced_generators+0x1bc>)
    6f9a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6f9c:	bf00      	nop
    6f9e:	4868      	ldr	r0, [pc, #416]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    6fa0:	4b69      	ldr	r3, [pc, #420]	; (7148 <_oscctrl_init_referenced_generators+0x1c0>)
    6fa2:	4798      	blx	r3
    6fa4:	4603      	mov	r3, r0
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d1f9      	bne.n	6f9e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6faa:	2100      	movs	r1, #0
    6fac:	68f8      	ldr	r0, [r7, #12]
    6fae:	4b67      	ldr	r3, [pc, #412]	; (714c <_oscctrl_init_referenced_generators+0x1c4>)
    6fb0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    6fb2:	4967      	ldr	r1, [pc, #412]	; (7150 <_oscctrl_init_referenced_generators+0x1c8>)
    6fb4:	68f8      	ldr	r0, [r7, #12]
    6fb6:	4b67      	ldr	r3, [pc, #412]	; (7154 <_oscctrl_init_referenced_generators+0x1cc>)
    6fb8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6fba:	bf00      	nop
    6fbc:	68f8      	ldr	r0, [r7, #12]
    6fbe:	4b66      	ldr	r3, [pc, #408]	; (7158 <_oscctrl_init_referenced_generators+0x1d0>)
    6fc0:	4798      	blx	r3
    6fc2:	4603      	mov	r3, r0
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d1f9      	bne.n	6fbc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    6fc8:	2100      	movs	r1, #0
    6fca:	68f8      	ldr	r0, [r7, #12]
    6fcc:	4b63      	ldr	r3, [pc, #396]	; (715c <_oscctrl_init_referenced_generators+0x1d4>)
    6fce:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6fd0:	bf00      	nop
    6fd2:	68f8      	ldr	r0, [r7, #12]
    6fd4:	4b62      	ldr	r3, [pc, #392]	; (7160 <_oscctrl_init_referenced_generators+0x1d8>)
    6fd6:	4798      	blx	r3
    6fd8:	4603      	mov	r3, r0
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d1f9      	bne.n	6fd2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    6fde:	2302      	movs	r3, #2
    6fe0:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    6fe2:	7afb      	ldrb	r3, [r7, #11]
    6fe4:	4619      	mov	r1, r3
    6fe6:	68f8      	ldr	r0, [r7, #12]
    6fe8:	4b58      	ldr	r3, [pc, #352]	; (714c <_oscctrl_init_referenced_generators+0x1c4>)
    6fea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6fec:	bf00      	nop
    6fee:	68f8      	ldr	r0, [r7, #12]
    6ff0:	4b5c      	ldr	r3, [pc, #368]	; (7164 <_oscctrl_init_referenced_generators+0x1dc>)
    6ff2:	4798      	blx	r3
    6ff4:	4603      	mov	r3, r0
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d1f9      	bne.n	6fee <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    6ffa:	68f8      	ldr	r0, [r7, #12]
    6ffc:	4b5a      	ldr	r3, [pc, #360]	; (7168 <_oscctrl_init_referenced_generators+0x1e0>)
    6ffe:	4798      	blx	r3
    7000:	4603      	mov	r3, r0
    7002:	4619      	mov	r1, r3
    7004:	68f8      	ldr	r0, [r7, #12]
    7006:	4b59      	ldr	r3, [pc, #356]	; (716c <_oscctrl_init_referenced_generators+0x1e4>)
    7008:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    700a:	bf00      	nop
    700c:	68f8      	ldr	r0, [r7, #12]
    700e:	4b58      	ldr	r3, [pc, #352]	; (7170 <_oscctrl_init_referenced_generators+0x1e8>)
    7010:	4798      	blx	r3
    7012:	4603      	mov	r3, r0
    7014:	2b00      	cmp	r3, #0
    7016:	d1f9      	bne.n	700c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    7018:	2319      	movs	r3, #25
    701a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    701c:	7afb      	ldrb	r3, [r7, #11]
    701e:	4619      	mov	r1, r3
    7020:	68f8      	ldr	r0, [r7, #12]
    7022:	4b4e      	ldr	r3, [pc, #312]	; (715c <_oscctrl_init_referenced_generators+0x1d4>)
    7024:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7026:	bf00      	nop
    7028:	68f8      	ldr	r0, [r7, #12]
    702a:	4b4d      	ldr	r3, [pc, #308]	; (7160 <_oscctrl_init_referenced_generators+0x1d8>)
    702c:	4798      	blx	r3
    702e:	4603      	mov	r3, r0
    7030:	2b00      	cmp	r3, #0
    7032:	d1f9      	bne.n	7028 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    7034:	2245      	movs	r2, #69	; 0x45
    7036:	2101      	movs	r1, #1
    7038:	4841      	ldr	r0, [pc, #260]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    703a:	4b4e      	ldr	r3, [pc, #312]	; (7174 <_oscctrl_init_referenced_generators+0x1ec>)
    703c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    703e:	223b      	movs	r2, #59	; 0x3b
    7040:	2100      	movs	r1, #0
    7042:	68f8      	ldr	r0, [r7, #12]
    7044:	4b4c      	ldr	r3, [pc, #304]	; (7178 <_oscctrl_init_referenced_generators+0x1f0>)
    7046:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7048:	f44f 6201 	mov.w	r2, #2064	; 0x810
    704c:	2100      	movs	r1, #0
    704e:	68f8      	ldr	r0, [r7, #12]
    7050:	4b4a      	ldr	r3, [pc, #296]	; (717c <_oscctrl_init_referenced_generators+0x1f4>)
    7052:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7054:	2242      	movs	r2, #66	; 0x42
    7056:	2100      	movs	r1, #0
    7058:	68f8      	ldr	r0, [r7, #12]
    705a:	4b49      	ldr	r3, [pc, #292]	; (7180 <_oscctrl_init_referenced_generators+0x1f8>)
    705c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    705e:	4a49      	ldr	r2, [pc, #292]	; (7184 <_oscctrl_init_referenced_generators+0x1fc>)
    7060:	2101      	movs	r1, #1
    7062:	68f8      	ldr	r0, [r7, #12]
    7064:	4b44      	ldr	r3, [pc, #272]	; (7178 <_oscctrl_init_referenced_generators+0x1f0>)
    7066:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7068:	f44f 6203 	mov.w	r2, #2096	; 0x830
    706c:	2101      	movs	r1, #1
    706e:	68f8      	ldr	r0, [r7, #12]
    7070:	4b42      	ldr	r3, [pc, #264]	; (717c <_oscctrl_init_referenced_generators+0x1f4>)
    7072:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7074:	2202      	movs	r2, #2
    7076:	2101      	movs	r1, #1
    7078:	68f8      	ldr	r0, [r7, #12]
    707a:	4b41      	ldr	r3, [pc, #260]	; (7180 <_oscctrl_init_referenced_generators+0x1f8>)
    707c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    707e:	68f8      	ldr	r0, [r7, #12]
    7080:	4b41      	ldr	r3, [pc, #260]	; (7188 <_oscctrl_init_referenced_generators+0x200>)
    7082:	4798      	blx	r3
    7084:	4603      	mov	r3, r0
    7086:	2b00      	cmp	r3, #0
    7088:	d00c      	beq.n	70a4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    708a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    708e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7090:	bf00      	nop
    7092:	6879      	ldr	r1, [r7, #4]
    7094:	68f8      	ldr	r0, [r7, #12]
    7096:	4b3d      	ldr	r3, [pc, #244]	; (718c <_oscctrl_init_referenced_generators+0x204>)
    7098:	4798      	blx	r3
    709a:	4602      	mov	r2, r0
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	429a      	cmp	r2, r3
    70a0:	d1f7      	bne.n	7092 <_oscctrl_init_referenced_generators+0x10a>
    70a2:	e009      	b.n	70b8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    70a4:	bf00      	nop
    70a6:	68f8      	ldr	r0, [r7, #12]
    70a8:	4b39      	ldr	r3, [pc, #228]	; (7190 <_oscctrl_init_referenced_generators+0x208>)
    70aa:	4798      	blx	r3
    70ac:	4603      	mov	r3, r0
    70ae:	f083 0301 	eor.w	r3, r3, #1
    70b2:	b2db      	uxtb	r3, r3
    70b4:	2b00      	cmp	r3, #0
    70b6:	d1f6      	bne.n	70a6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    70b8:	bf00      	nop
    70ba:	2100      	movs	r1, #0
    70bc:	68f8      	ldr	r0, [r7, #12]
    70be:	4b35      	ldr	r3, [pc, #212]	; (7194 <_oscctrl_init_referenced_generators+0x20c>)
    70c0:	4798      	blx	r3
    70c2:	4603      	mov	r3, r0
    70c4:	f083 0301 	eor.w	r3, r3, #1
    70c8:	b2db      	uxtb	r3, r3
    70ca:	2b00      	cmp	r3, #0
    70cc:	d009      	beq.n	70e2 <_oscctrl_init_referenced_generators+0x15a>
    70ce:	2100      	movs	r1, #0
    70d0:	68f8      	ldr	r0, [r7, #12]
    70d2:	4b31      	ldr	r3, [pc, #196]	; (7198 <_oscctrl_init_referenced_generators+0x210>)
    70d4:	4798      	blx	r3
    70d6:	4603      	mov	r3, r0
    70d8:	f083 0301 	eor.w	r3, r3, #1
    70dc:	b2db      	uxtb	r3, r3
    70de:	2b00      	cmp	r3, #0
    70e0:	d1eb      	bne.n	70ba <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    70e2:	bf00      	nop
    70e4:	2101      	movs	r1, #1
    70e6:	68f8      	ldr	r0, [r7, #12]
    70e8:	4b2a      	ldr	r3, [pc, #168]	; (7194 <_oscctrl_init_referenced_generators+0x20c>)
    70ea:	4798      	blx	r3
    70ec:	4603      	mov	r3, r0
    70ee:	f083 0301 	eor.w	r3, r3, #1
    70f2:	b2db      	uxtb	r3, r3
    70f4:	2b00      	cmp	r3, #0
    70f6:	d009      	beq.n	710c <_oscctrl_init_referenced_generators+0x184>
    70f8:	2101      	movs	r1, #1
    70fa:	68f8      	ldr	r0, [r7, #12]
    70fc:	4b26      	ldr	r3, [pc, #152]	; (7198 <_oscctrl_init_referenced_generators+0x210>)
    70fe:	4798      	blx	r3
    7100:	4603      	mov	r3, r0
    7102:	f083 0301 	eor.w	r3, r3, #1
    7106:	b2db      	uxtb	r3, r3
    7108:	2b00      	cmp	r3, #0
    710a:	d1eb      	bne.n	70e4 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    710c:	bf00      	nop
    710e:	480c      	ldr	r0, [pc, #48]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    7110:	4b22      	ldr	r3, [pc, #136]	; (719c <_oscctrl_init_referenced_generators+0x214>)
    7112:	4798      	blx	r3
    7114:	4603      	mov	r3, r0
    7116:	2b00      	cmp	r3, #0
    7118:	d1f9      	bne.n	710e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    711a:	2207      	movs	r2, #7
    711c:	2100      	movs	r1, #0
    711e:	4808      	ldr	r0, [pc, #32]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    7120:	4b08      	ldr	r3, [pc, #32]	; (7144 <_oscctrl_init_referenced_generators+0x1bc>)
    7122:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7124:	bf00      	nop
    7126:	4806      	ldr	r0, [pc, #24]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    7128:	4b07      	ldr	r3, [pc, #28]	; (7148 <_oscctrl_init_referenced_generators+0x1c0>)
    712a:	4798      	blx	r3
    712c:	4603      	mov	r3, r0
    712e:	2b00      	cmp	r3, #0
    7130:	d1f9      	bne.n	7126 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    7132:	bf00      	nop
    7134:	3710      	adds	r7, #16
    7136:	46bd      	mov	sp, r7
    7138:	bd80      	pop	{r7, pc}
    713a:	bf00      	nop
    713c:	40001000 	.word	0x40001000
    7140:	40001c00 	.word	0x40001c00
    7144:	00006b55 	.word	0x00006b55
    7148:	00006b15 	.word	0x00006b15
    714c:	00006db9 	.word	0x00006db9
    7150:	0401bb80 	.word	0x0401bb80
    7154:	00006e5b 	.word	0x00006e5b
    7158:	00006f13 	.word	0x00006f13
    715c:	00006e07 	.word	0x00006e07
    7160:	00006eab 	.word	0x00006eab
    7164:	00006e77 	.word	0x00006e77
    7168:	00006e43 	.word	0x00006e43
    716c:	00006e27 	.word	0x00006e27
    7170:	00006edf 	.word	0x00006edf
    7174:	00006ba5 	.word	0x00006ba5
    7178:	00006cb1 	.word	0x00006cb1
    717c:	00006ced 	.word	0x00006ced
    7180:	00006c75 	.word	0x00006c75
    7184:	000407a0 	.word	0x000407a0
    7188:	00006dd7 	.word	0x00006dd7
    718c:	00006d6b 	.word	0x00006d6b
    7190:	00006d43 	.word	0x00006d43
    7194:	00006c01 	.word	0x00006c01
    7198:	00006c39 	.word	0x00006c39
    719c:	00006b3d 	.word	0x00006b3d

000071a0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    71a0:	b480      	push	{r7}
    71a2:	b083      	sub	sp, #12
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	69db      	ldr	r3, [r3, #28]
    71ac:	0a9b      	lsrs	r3, r3, #10
    71ae:	f003 0301 	and.w	r3, r3, #1
    71b2:	2b00      	cmp	r3, #0
    71b4:	bf14      	ite	ne
    71b6:	2301      	movne	r3, #1
    71b8:	2300      	moveq	r3, #0
    71ba:	b2db      	uxtb	r3, r3
}
    71bc:	4618      	mov	r0, r3
    71be:	370c      	adds	r7, #12
    71c0:	46bd      	mov	sp, r7
    71c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71c6:	4770      	bx	lr

000071c8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    71c8:	b480      	push	{r7}
    71ca:	b083      	sub	sp, #12
    71cc:	af00      	add	r7, sp, #0
    71ce:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    71d6:	61da      	str	r2, [r3, #28]
}
    71d8:	bf00      	nop
    71da:	370c      	adds	r7, #12
    71dc:	46bd      	mov	sp, r7
    71de:	f85d 7b04 	ldr.w	r7, [sp], #4
    71e2:	4770      	bx	lr

000071e4 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    71e4:	b480      	push	{r7}
    71e6:	b083      	sub	sp, #12
    71e8:	af00      	add	r7, sp, #0
    71ea:	6078      	str	r0, [r7, #4]
    71ec:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	683a      	ldr	r2, [r7, #0]
    71f2:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    71f4:	bf00      	nop
    71f6:	370c      	adds	r7, #12
    71f8:	46bd      	mov	sp, r7
    71fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    71fe:	4770      	bx	lr

00007200 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7200:	b480      	push	{r7}
    7202:	b083      	sub	sp, #12
    7204:	af00      	add	r7, sp, #0
    7206:	6078      	str	r0, [r7, #4]
    7208:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	683a      	ldr	r2, [r7, #0]
    720e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7210:	bf00      	nop
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	f85d 7b04 	ldr.w	r7, [sp], #4
    721a:	4770      	bx	lr

0000721c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    721c:	b480      	push	{r7}
    721e:	b083      	sub	sp, #12
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
    7224:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	683a      	ldr	r2, [r7, #0]
    722a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    722c:	bf00      	nop
    722e:	370c      	adds	r7, #12
    7230:	46bd      	mov	sp, r7
    7232:	f85d 7b04 	ldr.w	r7, [sp], #4
    7236:	4770      	bx	lr

00007238 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    7238:	b480      	push	{r7}
    723a:	b083      	sub	sp, #12
    723c:	af00      	add	r7, sp, #0
    723e:	6078      	str	r0, [r7, #4]
    7240:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    7242:	687b      	ldr	r3, [r7, #4]
    7244:	683a      	ldr	r2, [r7, #0]
    7246:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7248:	bf00      	nop
    724a:	370c      	adds	r7, #12
    724c:	46bd      	mov	sp, r7
    724e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7252:	4770      	bx	lr

00007254 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7254:	b480      	push	{r7}
    7256:	b085      	sub	sp, #20
    7258:	af00      	add	r7, sp, #0
    725a:	6078      	str	r0, [r7, #4]
    725c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7262:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    7264:	68fb      	ldr	r3, [r7, #12]
    7266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    726a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    726c:	683b      	ldr	r3, [r7, #0]
    726e:	b2db      	uxtb	r3, r3
    7270:	68fa      	ldr	r2, [r7, #12]
    7272:	4313      	orrs	r3, r2
    7274:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	68fa      	ldr	r2, [r7, #12]
    727a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    727c:	bf00      	nop
    727e:	3714      	adds	r7, #20
    7280:	46bd      	mov	sp, r7
    7282:	f85d 7b04 	ldr.w	r7, [sp], #4
    7286:	4770      	bx	lr

00007288 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7288:	b480      	push	{r7}
    728a:	b085      	sub	sp, #20
    728c:	af00      	add	r7, sp, #0
    728e:	6078      	str	r0, [r7, #4]
    7290:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7292:	687b      	ldr	r3, [r7, #4]
    7294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7296:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    7298:	68fb      	ldr	r3, [r7, #12]
    729a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    729e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    72a0:	683b      	ldr	r3, [r7, #0]
    72a2:	041b      	lsls	r3, r3, #16
    72a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    72a8:	68fa      	ldr	r2, [r7, #12]
    72aa:	4313      	orrs	r3, r2
    72ac:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    72ae:	687b      	ldr	r3, [r7, #4]
    72b0:	68fa      	ldr	r2, [r7, #12]
    72b2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    72b4:	bf00      	nop
    72b6:	3714      	adds	r7, #20
    72b8:	46bd      	mov	sp, r7
    72ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    72be:	4770      	bx	lr

000072c0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    72c0:	b480      	push	{r7}
    72c2:	b083      	sub	sp, #12
    72c4:	af00      	add	r7, sp, #0
    72c6:	6078      	str	r0, [r7, #4]
    72c8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    72ca:	687b      	ldr	r3, [r7, #4]
    72cc:	683a      	ldr	r2, [r7, #0]
    72ce:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    72d0:	bf00      	nop
    72d2:	370c      	adds	r7, #12
    72d4:	46bd      	mov	sp, r7
    72d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72da:	4770      	bx	lr

000072dc <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    72dc:	b480      	push	{r7}
    72de:	b083      	sub	sp, #12
    72e0:	af00      	add	r7, sp, #0
    72e2:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    72e8:	4618      	mov	r0, r3
    72ea:	370c      	adds	r7, #12
    72ec:	46bd      	mov	sp, r7
    72ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    72f2:	4770      	bx	lr

000072f4 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    72f4:	b480      	push	{r7}
    72f6:	b085      	sub	sp, #20
    72f8:	af00      	add	r7, sp, #0
    72fa:	60f8      	str	r0, [r7, #12]
    72fc:	60b9      	str	r1, [r7, #8]
    72fe:	607a      	str	r2, [r7, #4]
	while (count--) {
    7300:	e007      	b.n	7312 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7302:	68fb      	ldr	r3, [r7, #12]
    7304:	1c5a      	adds	r2, r3, #1
    7306:	60fa      	str	r2, [r7, #12]
    7308:	68ba      	ldr	r2, [r7, #8]
    730a:	1c51      	adds	r1, r2, #1
    730c:	60b9      	str	r1, [r7, #8]
    730e:	7812      	ldrb	r2, [r2, #0]
    7310:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	1e5a      	subs	r2, r3, #1
    7316:	607a      	str	r2, [r7, #4]
    7318:	2b00      	cmp	r3, #0
    731a:	d1f2      	bne.n	7302 <_qspi_memcpy+0xe>
	}
}
    731c:	bf00      	nop
    731e:	3714      	adds	r7, #20
    7320:	46bd      	mov	sp, r7
    7322:	f85d 7b04 	ldr.w	r7, [sp], #4
    7326:	4770      	bx	lr

00007328 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7328:	b580      	push	{r7, lr}
    732a:	b082      	sub	sp, #8
    732c:	af00      	add	r7, sp, #0
    732e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7330:	4903      	ldr	r1, [pc, #12]	; (7340 <_qspi_end_transfer+0x18>)
    7332:	6878      	ldr	r0, [r7, #4]
    7334:	4b03      	ldr	r3, [pc, #12]	; (7344 <_qspi_end_transfer+0x1c>)
    7336:	4798      	blx	r3
}
    7338:	bf00      	nop
    733a:	3708      	adds	r7, #8
    733c:	46bd      	mov	sp, r7
    733e:	bd80      	pop	{r7, pc}
    7340:	01000002 	.word	0x01000002
    7344:	000071e5 	.word	0x000071e5

00007348 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7348:	b580      	push	{r7, lr}
    734a:	b082      	sub	sp, #8
    734c:	af00      	add	r7, sp, #0
    734e:	6078      	str	r0, [r7, #4]
    7350:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    7352:	687b      	ldr	r3, [r7, #4]
    7354:	2b00      	cmp	r3, #0
    7356:	d004      	beq.n	7362 <_qspi_sync_init+0x1a>
    7358:	683b      	ldr	r3, [r7, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d001      	beq.n	7362 <_qspi_sync_init+0x1a>
    735e:	2301      	movs	r3, #1
    7360:	e000      	b.n	7364 <_qspi_sync_init+0x1c>
    7362:	2300      	movs	r3, #0
    7364:	f003 0301 	and.w	r3, r3, #1
    7368:	b2db      	uxtb	r3, r3
    736a:	2240      	movs	r2, #64	; 0x40
    736c:	490c      	ldr	r1, [pc, #48]	; (73a0 <_qspi_sync_init+0x58>)
    736e:	4618      	mov	r0, r3
    7370:	4b0c      	ldr	r3, [pc, #48]	; (73a4 <_qspi_sync_init+0x5c>)
    7372:	4798      	blx	r3
	dev->prvt = hw;
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	683a      	ldr	r2, [r7, #0]
    7378:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    737a:	687b      	ldr	r3, [r7, #4]
    737c:	681b      	ldr	r3, [r3, #0]
    737e:	2101      	movs	r1, #1
    7380:	4618      	mov	r0, r3
    7382:	4b09      	ldr	r3, [pc, #36]	; (73a8 <_qspi_sync_init+0x60>)
    7384:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    7386:	4909      	ldr	r1, [pc, #36]	; (73ac <_qspi_sync_init+0x64>)
    7388:	6838      	ldr	r0, [r7, #0]
    738a:	4b09      	ldr	r3, [pc, #36]	; (73b0 <_qspi_sync_init+0x68>)
    738c:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    738e:	4909      	ldr	r1, [pc, #36]	; (73b4 <_qspi_sync_init+0x6c>)
    7390:	6838      	ldr	r0, [r7, #0]
    7392:	4b09      	ldr	r3, [pc, #36]	; (73b8 <_qspi_sync_init+0x70>)
    7394:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    7396:	2300      	movs	r3, #0
}
    7398:	4618      	mov	r0, r3
    739a:	3708      	adds	r7, #8
    739c:	46bd      	mov	sp, r7
    739e:	bd80      	pop	{r7, pc}
    73a0:	00011bd4 	.word	0x00011bd4
    73a4:	00005545 	.word	0x00005545
    73a8:	000071e5 	.word	0x000071e5
    73ac:	06000011 	.word	0x06000011
    73b0:	00007201 	.word	0x00007201
    73b4:	0024c700 	.word	0x0024c700
    73b8:	0000721d 	.word	0x0000721d

000073bc <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    73bc:	b580      	push	{r7, lr}
    73be:	b082      	sub	sp, #8
    73c0:	af00      	add	r7, sp, #0
    73c2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    73c4:	687b      	ldr	r3, [r7, #4]
    73c6:	681b      	ldr	r3, [r3, #0]
    73c8:	2102      	movs	r1, #2
    73ca:	4618      	mov	r0, r3
    73cc:	4b03      	ldr	r3, [pc, #12]	; (73dc <_qspi_sync_enable+0x20>)
    73ce:	4798      	blx	r3
	return ERR_NONE;
    73d0:	2300      	movs	r3, #0
}
    73d2:	4618      	mov	r0, r3
    73d4:	3708      	adds	r7, #8
    73d6:	46bd      	mov	sp, r7
    73d8:	bd80      	pop	{r7, pc}
    73da:	bf00      	nop
    73dc:	000071e5 	.word	0x000071e5

000073e0 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    73e0:	b580      	push	{r7, lr}
    73e2:	b082      	sub	sp, #8
    73e4:	af00      	add	r7, sp, #0
    73e6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    73e8:	687b      	ldr	r3, [r7, #4]
    73ea:	681b      	ldr	r3, [r3, #0]
    73ec:	2100      	movs	r1, #0
    73ee:	4618      	mov	r0, r3
    73f0:	4b03      	ldr	r3, [pc, #12]	; (7400 <_qspi_sync_disable+0x20>)
    73f2:	4798      	blx	r3
	return ERR_NONE;
    73f4:	2300      	movs	r3, #0
}
    73f6:	4618      	mov	r0, r3
    73f8:	3708      	adds	r7, #8
    73fa:	46bd      	mov	sp, r7
    73fc:	bd80      	pop	{r7, pc}
    73fe:	bf00      	nop
    7400:	000071e5 	.word	0x000071e5

00007404 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7404:	b580      	push	{r7, lr}
    7406:	b084      	sub	sp, #16
    7408:	af00      	add	r7, sp, #0
    740a:	6078      	str	r0, [r7, #4]
    740c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    740e:	687b      	ldr	r3, [r7, #4]
    7410:	681b      	ldr	r3, [r3, #0]
    7412:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7414:	683b      	ldr	r3, [r7, #0]
    7416:	781b      	ldrb	r3, [r3, #0]
    7418:	f003 0320 	and.w	r3, r3, #32
    741c:	b2db      	uxtb	r3, r3
    741e:	2b00      	cmp	r3, #0
    7420:	d005      	beq.n	742e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    7422:	683b      	ldr	r3, [r7, #0]
    7424:	689b      	ldr	r3, [r3, #8]
    7426:	4619      	mov	r1, r3
    7428:	68f8      	ldr	r0, [r7, #12]
    742a:	4b13      	ldr	r3, [pc, #76]	; (7478 <_qspi_sync_command_set_ifr+0x74>)
    742c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    742e:	683b      	ldr	r3, [r7, #0]
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	f003 0310 	and.w	r3, r3, #16
    7436:	b2db      	uxtb	r3, r3
    7438:	2b00      	cmp	r3, #0
    743a:	d005      	beq.n	7448 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    743c:	683b      	ldr	r3, [r7, #0]
    743e:	791b      	ldrb	r3, [r3, #4]
    7440:	4619      	mov	r1, r3
    7442:	68f8      	ldr	r0, [r7, #12]
    7444:	4b0d      	ldr	r3, [pc, #52]	; (747c <_qspi_sync_command_set_ifr+0x78>)
    7446:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7448:	683b      	ldr	r3, [r7, #0]
    744a:	781b      	ldrb	r3, [r3, #0]
    744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7450:	b2db      	uxtb	r3, r3
    7452:	2b00      	cmp	r3, #0
    7454:	d005      	beq.n	7462 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    7456:	683b      	ldr	r3, [r7, #0]
    7458:	795b      	ldrb	r3, [r3, #5]
    745a:	4619      	mov	r1, r3
    745c:	68f8      	ldr	r0, [r7, #12]
    745e:	4b08      	ldr	r3, [pc, #32]	; (7480 <_qspi_sync_command_set_ifr+0x7c>)
    7460:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    7462:	683b      	ldr	r3, [r7, #0]
    7464:	681b      	ldr	r3, [r3, #0]
    7466:	4619      	mov	r1, r3
    7468:	68f8      	ldr	r0, [r7, #12]
    746a:	4b06      	ldr	r3, [pc, #24]	; (7484 <_qspi_sync_command_set_ifr+0x80>)
    746c:	4798      	blx	r3
}
    746e:	bf00      	nop
    7470:	3710      	adds	r7, #16
    7472:	46bd      	mov	sp, r7
    7474:	bd80      	pop	{r7, pc}
    7476:	bf00      	nop
    7478:	00007239 	.word	0x00007239
    747c:	00007255 	.word	0x00007255
    7480:	00007289 	.word	0x00007289
    7484:	000072c1 	.word	0x000072c1

00007488 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7488:	b580      	push	{r7, lr}
    748a:	b084      	sub	sp, #16
    748c:	af00      	add	r7, sp, #0
    748e:	6078      	str	r0, [r7, #4]
    7490:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    7492:	687b      	ldr	r3, [r7, #4]
    7494:	681b      	ldr	r3, [r3, #0]
    7496:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    7498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    749c:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    749e:	683b      	ldr	r3, [r7, #0]
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	f003 0320 	and.w	r3, r3, #32
    74a6:	b2db      	uxtb	r3, r3
    74a8:	2b00      	cmp	r3, #0
    74aa:	d004      	beq.n	74b6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    74ac:	683b      	ldr	r3, [r7, #0]
    74ae:	689b      	ldr	r3, [r3, #8]
    74b0:	68fa      	ldr	r2, [r7, #12]
    74b2:	4413      	add	r3, r2
    74b4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    74b6:	68b8      	ldr	r0, [r7, #8]
    74b8:	4b18      	ldr	r3, [pc, #96]	; (751c <_qspi_sync_run_transfer+0x94>)
    74ba:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    74bc:	683b      	ldr	r3, [r7, #0]
    74be:	691b      	ldr	r3, [r3, #16]
    74c0:	2b00      	cmp	r3, #0
    74c2:	d103      	bne.n	74cc <_qspi_sync_run_transfer+0x44>
    74c4:	683b      	ldr	r3, [r7, #0]
    74c6:	695b      	ldr	r3, [r3, #20]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d001      	beq.n	74d0 <_qspi_sync_run_transfer+0x48>
    74cc:	2301      	movs	r3, #1
    74ce:	e000      	b.n	74d2 <_qspi_sync_run_transfer+0x4a>
    74d0:	2300      	movs	r3, #0
    74d2:	f003 0301 	and.w	r3, r3, #1
    74d6:	b2db      	uxtb	r3, r3
    74d8:	2282      	movs	r2, #130	; 0x82
    74da:	4911      	ldr	r1, [pc, #68]	; (7520 <_qspi_sync_run_transfer+0x98>)
    74dc:	4618      	mov	r0, r3
    74de:	4b11      	ldr	r3, [pc, #68]	; (7524 <_qspi_sync_run_transfer+0x9c>)
    74e0:	4798      	blx	r3

	if (cmd->tx_buf) {
    74e2:	683b      	ldr	r3, [r7, #0]
    74e4:	691b      	ldr	r3, [r3, #16]
    74e6:	2b00      	cmp	r3, #0
    74e8:	d008      	beq.n	74fc <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    74ea:	683b      	ldr	r3, [r7, #0]
    74ec:	6919      	ldr	r1, [r3, #16]
    74ee:	683b      	ldr	r3, [r7, #0]
    74f0:	68db      	ldr	r3, [r3, #12]
    74f2:	461a      	mov	r2, r3
    74f4:	68f8      	ldr	r0, [r7, #12]
    74f6:	4b0c      	ldr	r3, [pc, #48]	; (7528 <_qspi_sync_run_transfer+0xa0>)
    74f8:	4798      	blx	r3
    74fa:	e007      	b.n	750c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    74fc:	683b      	ldr	r3, [r7, #0]
    74fe:	6958      	ldr	r0, [r3, #20]
    7500:	683b      	ldr	r3, [r7, #0]
    7502:	68db      	ldr	r3, [r3, #12]
    7504:	461a      	mov	r2, r3
    7506:	68f9      	ldr	r1, [r7, #12]
    7508:	4b07      	ldr	r3, [pc, #28]	; (7528 <_qspi_sync_run_transfer+0xa0>)
    750a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    750c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7510:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    7514:	bf00      	nop
    7516:	3710      	adds	r7, #16
    7518:	46bd      	mov	sp, r7
    751a:	bd80      	pop	{r7, pc}
    751c:	000072dd 	.word	0x000072dd
    7520:	00011bd4 	.word	0x00011bd4
    7524:	00005545 	.word	0x00005545
    7528:	000072f5 	.word	0x000072f5

0000752c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    752c:	b580      	push	{r7, lr}
    752e:	b082      	sub	sp, #8
    7530:	af00      	add	r7, sp, #0
    7532:	6078      	str	r0, [r7, #4]
    7534:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    7536:	6839      	ldr	r1, [r7, #0]
    7538:	6878      	ldr	r0, [r7, #4]
    753a:	4b14      	ldr	r3, [pc, #80]	; (758c <_qspi_sync_serial_run_command+0x60>)
    753c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    753e:	683b      	ldr	r3, [r7, #0]
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7546:	b2db      	uxtb	r3, r3
    7548:	2b00      	cmp	r3, #0
    754a:	d003      	beq.n	7554 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    754c:	6839      	ldr	r1, [r7, #0]
    754e:	6878      	ldr	r0, [r7, #4]
    7550:	4b0f      	ldr	r3, [pc, #60]	; (7590 <_qspi_sync_serial_run_command+0x64>)
    7552:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	681b      	ldr	r3, [r3, #0]
    7558:	4618      	mov	r0, r3
    755a:	4b0e      	ldr	r3, [pc, #56]	; (7594 <_qspi_sync_serial_run_command+0x68>)
    755c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    755e:	bf00      	nop
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	681b      	ldr	r3, [r3, #0]
    7564:	4618      	mov	r0, r3
    7566:	4b0c      	ldr	r3, [pc, #48]	; (7598 <_qspi_sync_serial_run_command+0x6c>)
    7568:	4798      	blx	r3
    756a:	4603      	mov	r3, r0
    756c:	f083 0301 	eor.w	r3, r3, #1
    7570:	b2db      	uxtb	r3, r3
    7572:	2b00      	cmp	r3, #0
    7574:	d1f4      	bne.n	7560 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	681b      	ldr	r3, [r3, #0]
    757a:	4618      	mov	r0, r3
    757c:	4b07      	ldr	r3, [pc, #28]	; (759c <_qspi_sync_serial_run_command+0x70>)
    757e:	4798      	blx	r3
	return ERR_NONE;
    7580:	2300      	movs	r3, #0
}
    7582:	4618      	mov	r0, r3
    7584:	3708      	adds	r7, #8
    7586:	46bd      	mov	sp, r7
    7588:	bd80      	pop	{r7, pc}
    758a:	bf00      	nop
    758c:	00007405 	.word	0x00007405
    7590:	00007489 	.word	0x00007489
    7594:	00007329 	.word	0x00007329
    7598:	000071a1 	.word	0x000071a1
    759c:	000071c9 	.word	0x000071c9

000075a0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    75a0:	b480      	push	{r7}
    75a2:	b083      	sub	sp, #12
    75a4:	af00      	add	r7, sp, #0
    75a6:	6078      	str	r0, [r7, #4]
    75a8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    75aa:	bf00      	nop
    75ac:	687b      	ldr	r3, [r7, #4]
    75ae:	691a      	ldr	r2, [r3, #16]
    75b0:	683b      	ldr	r3, [r7, #0]
    75b2:	4013      	ands	r3, r2
    75b4:	2b00      	cmp	r3, #0
    75b6:	d1f9      	bne.n	75ac <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    75b8:	bf00      	nop
    75ba:	370c      	adds	r7, #12
    75bc:	46bd      	mov	sp, r7
    75be:	f85d 7b04 	ldr.w	r7, [sp], #4
    75c2:	4770      	bx	lr

000075c4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    75c4:	b480      	push	{r7}
    75c6:	b083      	sub	sp, #12
    75c8:	af00      	add	r7, sp, #0
    75ca:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    75cc:	687b      	ldr	r3, [r7, #4]
    75ce:	f44f 7280 	mov.w	r2, #256	; 0x100
    75d2:	819a      	strh	r2, [r3, #12]
}
    75d4:	bf00      	nop
    75d6:	370c      	adds	r7, #12
    75d8:	46bd      	mov	sp, r7
    75da:	f85d 7b04 	ldr.w	r7, [sp], #4
    75de:	4770      	bx	lr

000075e0 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    75e0:	b480      	push	{r7}
    75e2:	b083      	sub	sp, #12
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    75ee:	819a      	strh	r2, [r3, #12]
}
    75f0:	bf00      	nop
    75f2:	370c      	adds	r7, #12
    75f4:	46bd      	mov	sp, r7
    75f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75fa:	4770      	bx	lr

000075fc <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    75fc:	b480      	push	{r7}
    75fe:	b083      	sub	sp, #12
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	899b      	ldrh	r3, [r3, #12]
    7608:	b29b      	uxth	r3, r3
}
    760a:	4618      	mov	r0, r3
    760c:	370c      	adds	r7, #12
    760e:	46bd      	mov	sp, r7
    7610:	f85d 7b04 	ldr.w	r7, [sp], #4
    7614:	4770      	bx	lr

00007616 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    7616:	b480      	push	{r7}
    7618:	b083      	sub	sp, #12
    761a:	af00      	add	r7, sp, #0
    761c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	895b      	ldrh	r3, [r3, #10]
    7622:	b29b      	uxth	r3, r3
}
    7624:	4618      	mov	r0, r3
    7626:	370c      	adds	r7, #12
    7628:	46bd      	mov	sp, r7
    762a:	f85d 7b04 	ldr.w	r7, [sp], #4
    762e:	4770      	bx	lr

00007630 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    7630:	b580      	push	{r7, lr}
    7632:	b082      	sub	sp, #8
    7634:	af00      	add	r7, sp, #0
    7636:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    7638:	687b      	ldr	r3, [r7, #4]
    763a:	881b      	ldrh	r3, [r3, #0]
    763c:	b29b      	uxth	r3, r3
    763e:	f043 0301 	orr.w	r3, r3, #1
    7642:	b29a      	uxth	r2, r3
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    7648:	2101      	movs	r1, #1
    764a:	6878      	ldr	r0, [r7, #4]
    764c:	4b02      	ldr	r3, [pc, #8]	; (7658 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    764e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7650:	bf00      	nop
    7652:	3708      	adds	r7, #8
    7654:	46bd      	mov	sp, r7
    7656:	bd80      	pop	{r7, pc}
    7658:	000075a1 	.word	0x000075a1

0000765c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    765c:	b580      	push	{r7, lr}
    765e:	b084      	sub	sp, #16
    7660:	af00      	add	r7, sp, #0
    7662:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7664:	f248 0103 	movw	r1, #32771	; 0x8003
    7668:	6878      	ldr	r0, [r7, #4]
    766a:	4b0a      	ldr	r3, [pc, #40]	; (7694 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    766c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	881b      	ldrh	r3, [r3, #0]
    7672:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    7674:	89fb      	ldrh	r3, [r7, #14]
    7676:	085b      	lsrs	r3, r3, #1
    7678:	b29b      	uxth	r3, r3
    767a:	f003 0301 	and.w	r3, r3, #1
    767e:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    7680:	89fb      	ldrh	r3, [r7, #14]
    7682:	2b00      	cmp	r3, #0
    7684:	bf14      	ite	ne
    7686:	2301      	movne	r3, #1
    7688:	2300      	moveq	r3, #0
    768a:	b2db      	uxtb	r3, r3
}
    768c:	4618      	mov	r0, r3
    768e:	3710      	adds	r7, #16
    7690:	46bd      	mov	sp, r7
    7692:	bd80      	pop	{r7, pc}
    7694:	000075a1 	.word	0x000075a1

00007698 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7698:	b580      	push	{r7, lr}
    769a:	b082      	sub	sp, #8
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	881b      	ldrh	r3, [r3, #0]
    76a4:	b29b      	uxth	r3, r3
    76a6:	f023 0302 	bic.w	r3, r3, #2
    76aa:	b29a      	uxth	r2, r3
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    76b0:	f248 0103 	movw	r1, #32771	; 0x8003
    76b4:	6878      	ldr	r0, [r7, #4]
    76b6:	4b03      	ldr	r3, [pc, #12]	; (76c4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    76b8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    76ba:	bf00      	nop
    76bc:	3708      	adds	r7, #8
    76be:	46bd      	mov	sp, r7
    76c0:	bd80      	pop	{r7, pc}
    76c2:	bf00      	nop
    76c4:	000075a1 	.word	0x000075a1

000076c8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    76c8:	b580      	push	{r7, lr}
    76ca:	b082      	sub	sp, #8
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
    76d0:	460b      	mov	r3, r1
    76d2:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	887a      	ldrh	r2, [r7, #2]
    76d8:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    76da:	f248 0103 	movw	r1, #32771	; 0x8003
    76de:	6878      	ldr	r0, [r7, #4]
    76e0:	4b02      	ldr	r3, [pc, #8]	; (76ec <hri_rtcmode0_write_CTRLA_reg+0x24>)
    76e2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    76e4:	bf00      	nop
    76e6:	3708      	adds	r7, #8
    76e8:	46bd      	mov	sp, r7
    76ea:	bd80      	pop	{r7, pc}
    76ec:	000075a1 	.word	0x000075a1

000076f0 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    76f0:	b580      	push	{r7, lr}
    76f2:	b082      	sub	sp, #8
    76f4:	af00      	add	r7, sp, #0
    76f6:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    76f8:	2108      	movs	r1, #8
    76fa:	6878      	ldr	r0, [r7, #4]
    76fc:	4b03      	ldr	r3, [pc, #12]	; (770c <hri_rtcmode0_read_COUNT_reg+0x1c>)
    76fe:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	699b      	ldr	r3, [r3, #24]
}
    7704:	4618      	mov	r0, r3
    7706:	3708      	adds	r7, #8
    7708:	46bd      	mov	sp, r7
    770a:	bd80      	pop	{r7, pc}
    770c:	000075a1 	.word	0x000075a1

00007710 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    7710:	b480      	push	{r7}
    7712:	b083      	sub	sp, #12
    7714:	af00      	add	r7, sp, #0
    7716:	6078      	str	r0, [r7, #4]
    7718:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    771a:	687b      	ldr	r3, [r7, #4]
    771c:	683a      	ldr	r2, [r7, #0]
    771e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    7720:	bf00      	nop
    7722:	370c      	adds	r7, #12
    7724:	46bd      	mov	sp, r7
    7726:	f85d 7b04 	ldr.w	r7, [sp], #4
    772a:	4770      	bx	lr

0000772c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    772c:	b580      	push	{r7, lr}
    772e:	b082      	sub	sp, #8
    7730:	af00      	add	r7, sp, #0
    7732:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7734:	687b      	ldr	r3, [r7, #4]
    7736:	2b00      	cmp	r3, #0
    7738:	d005      	beq.n	7746 <_calendar_init+0x1a>
    773a:	687b      	ldr	r3, [r7, #4]
    773c:	681b      	ldr	r3, [r3, #0]
    773e:	2b00      	cmp	r3, #0
    7740:	d001      	beq.n	7746 <_calendar_init+0x1a>
    7742:	2301      	movs	r3, #1
    7744:	e000      	b.n	7748 <_calendar_init+0x1c>
    7746:	2300      	movs	r3, #0
    7748:	f003 0301 	and.w	r3, r3, #1
    774c:	b2db      	uxtb	r3, r3
    774e:	222f      	movs	r2, #47	; 0x2f
    7750:	491e      	ldr	r1, [pc, #120]	; (77cc <_calendar_init+0xa0>)
    7752:	4618      	mov	r0, r3
    7754:	4b1e      	ldr	r3, [pc, #120]	; (77d0 <_calendar_init+0xa4>)
    7756:	4798      	blx	r3

	_rtc_dev = dev;
    7758:	4a1e      	ldr	r2, [pc, #120]	; (77d4 <_calendar_init+0xa8>)
    775a:	687b      	ldr	r3, [r7, #4]
    775c:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    775e:	687b      	ldr	r3, [r7, #4]
    7760:	681b      	ldr	r3, [r3, #0]
    7762:	2101      	movs	r1, #1
    7764:	4618      	mov	r0, r3
    7766:	4b1c      	ldr	r3, [pc, #112]	; (77d8 <_calendar_init+0xac>)
    7768:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	681b      	ldr	r3, [r3, #0]
    776e:	4618      	mov	r0, r3
    7770:	4b1a      	ldr	r3, [pc, #104]	; (77dc <_calendar_init+0xb0>)
    7772:	4798      	blx	r3
    7774:	4603      	mov	r3, r0
    7776:	2b00      	cmp	r3, #0
    7778:	d00a      	beq.n	7790 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    777a:	687b      	ldr	r3, [r7, #4]
    777c:	681b      	ldr	r3, [r3, #0]
    777e:	4618      	mov	r0, r3
    7780:	4b17      	ldr	r3, [pc, #92]	; (77e0 <_calendar_init+0xb4>)
    7782:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	681b      	ldr	r3, [r3, #0]
    7788:	2102      	movs	r1, #2
    778a:	4618      	mov	r0, r3
    778c:	4b12      	ldr	r3, [pc, #72]	; (77d8 <_calendar_init+0xac>)
    778e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    7790:	687b      	ldr	r3, [r7, #4]
    7792:	681b      	ldr	r3, [r3, #0]
    7794:	4618      	mov	r0, r3
    7796:	4b13      	ldr	r3, [pc, #76]	; (77e4 <_calendar_init+0xb8>)
    7798:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	681b      	ldr	r3, [r3, #0]
    779e:	2101      	movs	r1, #1
    77a0:	4618      	mov	r0, r3
    77a2:	4b0d      	ldr	r3, [pc, #52]	; (77d8 <_calendar_init+0xac>)
    77a4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    77a6:	687b      	ldr	r3, [r7, #4]
    77a8:	681b      	ldr	r3, [r3, #0]
    77aa:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    77ae:	4618      	mov	r0, r3
    77b0:	4b0d      	ldr	r3, [pc, #52]	; (77e8 <_calendar_init+0xbc>)
    77b2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    77b4:	687b      	ldr	r3, [r7, #4]
    77b6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    77b8:	2100      	movs	r1, #0
    77ba:	4618      	mov	r0, r3
    77bc:	4b0b      	ldr	r3, [pc, #44]	; (77ec <_calendar_init+0xc0>)
    77be:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    77c0:	2300      	movs	r3, #0
}
    77c2:	4618      	mov	r0, r3
    77c4:	3708      	adds	r7, #8
    77c6:	46bd      	mov	sp, r7
    77c8:	bd80      	pop	{r7, pc}
    77ca:	bf00      	nop
    77cc:	00011bec 	.word	0x00011bec
    77d0:	00005545 	.word	0x00005545
    77d4:	20001ce4 	.word	0x20001ce4
    77d8:	000075a1 	.word	0x000075a1
    77dc:	0000765d 	.word	0x0000765d
    77e0:	00007699 	.word	0x00007699
    77e4:	00007631 	.word	0x00007631
    77e8:	000076c9 	.word	0x000076c9
    77ec:	00007711 	.word	0x00007711

000077f0 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    77f0:	b580      	push	{r7, lr}
    77f2:	b082      	sub	sp, #8
    77f4:	af00      	add	r7, sp, #0
    77f6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    77f8:	687b      	ldr	r3, [r7, #4]
    77fa:	2b00      	cmp	r3, #0
    77fc:	d005      	beq.n	780a <_calendar_get_counter+0x1a>
    77fe:	687b      	ldr	r3, [r7, #4]
    7800:	681b      	ldr	r3, [r3, #0]
    7802:	2b00      	cmp	r3, #0
    7804:	d001      	beq.n	780a <_calendar_get_counter+0x1a>
    7806:	2301      	movs	r3, #1
    7808:	e000      	b.n	780c <_calendar_get_counter+0x1c>
    780a:	2300      	movs	r3, #0
    780c:	f003 0301 	and.w	r3, r3, #1
    7810:	b2db      	uxtb	r3, r3
    7812:	229a      	movs	r2, #154	; 0x9a
    7814:	4906      	ldr	r1, [pc, #24]	; (7830 <_calendar_get_counter+0x40>)
    7816:	4618      	mov	r0, r3
    7818:	4b06      	ldr	r3, [pc, #24]	; (7834 <_calendar_get_counter+0x44>)
    781a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    781c:	687b      	ldr	r3, [r7, #4]
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	4618      	mov	r0, r3
    7822:	4b05      	ldr	r3, [pc, #20]	; (7838 <_calendar_get_counter+0x48>)
    7824:	4798      	blx	r3
    7826:	4603      	mov	r3, r0
}
    7828:	4618      	mov	r0, r3
    782a:	3708      	adds	r7, #8
    782c:	46bd      	mov	sp, r7
    782e:	bd80      	pop	{r7, pc}
    7830:	00011bec 	.word	0x00011bec
    7834:	00005545 	.word	0x00005545
    7838:	000076f1 	.word	0x000076f1

0000783c <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    783c:	b580      	push	{r7, lr}
    783e:	b084      	sub	sp, #16
    7840:	af00      	add	r7, sp, #0
    7842:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	681b      	ldr	r3, [r3, #0]
    7848:	4618      	mov	r0, r3
    784a:	4b19      	ldr	r3, [pc, #100]	; (78b0 <_rtc_interrupt_handler+0x74>)
    784c:	4798      	blx	r3
    784e:	4603      	mov	r3, r0
    7850:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	681b      	ldr	r3, [r3, #0]
    7856:	4618      	mov	r0, r3
    7858:	4b16      	ldr	r3, [pc, #88]	; (78b4 <_rtc_interrupt_handler+0x78>)
    785a:	4798      	blx	r3
    785c:	4603      	mov	r3, r0
    785e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7860:	89fa      	ldrh	r2, [r7, #14]
    7862:	89bb      	ldrh	r3, [r7, #12]
    7864:	4013      	ands	r3, r2
    7866:	b29b      	uxth	r3, r3
    7868:	f403 7380 	and.w	r3, r3, #256	; 0x100
    786c:	2b00      	cmp	r3, #0
    786e:	d009      	beq.n	7884 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7870:	687b      	ldr	r3, [r7, #4]
    7872:	685b      	ldr	r3, [r3, #4]
    7874:	6878      	ldr	r0, [r7, #4]
    7876:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	681b      	ldr	r3, [r3, #0]
    787c:	4618      	mov	r0, r3
    787e:	4b0e      	ldr	r3, [pc, #56]	; (78b8 <_rtc_interrupt_handler+0x7c>)
    7880:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    7882:	e010      	b.n	78a6 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    7884:	89fa      	ldrh	r2, [r7, #14]
    7886:	89bb      	ldrh	r3, [r7, #12]
    7888:	4013      	ands	r3, r2
    788a:	b29b      	uxth	r3, r3
    788c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7890:	2b00      	cmp	r3, #0
    7892:	d008      	beq.n	78a6 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    7894:	687b      	ldr	r3, [r7, #4]
    7896:	689b      	ldr	r3, [r3, #8]
    7898:	6878      	ldr	r0, [r7, #4]
    789a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    789c:	687b      	ldr	r3, [r7, #4]
    789e:	681b      	ldr	r3, [r3, #0]
    78a0:	4618      	mov	r0, r3
    78a2:	4b06      	ldr	r3, [pc, #24]	; (78bc <_rtc_interrupt_handler+0x80>)
    78a4:	4798      	blx	r3
}
    78a6:	bf00      	nop
    78a8:	3710      	adds	r7, #16
    78aa:	46bd      	mov	sp, r7
    78ac:	bd80      	pop	{r7, pc}
    78ae:	bf00      	nop
    78b0:	000075fd 	.word	0x000075fd
    78b4:	00007617 	.word	0x00007617
    78b8:	000075c5 	.word	0x000075c5
    78bc:	000075e1 	.word	0x000075e1

000078c0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    78c0:	b580      	push	{r7, lr}
    78c2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    78c4:	4b03      	ldr	r3, [pc, #12]	; (78d4 <RTC_Handler+0x14>)
    78c6:	681b      	ldr	r3, [r3, #0]
    78c8:	4618      	mov	r0, r3
    78ca:	4b03      	ldr	r3, [pc, #12]	; (78d8 <RTC_Handler+0x18>)
    78cc:	4798      	blx	r3
}
    78ce:	bf00      	nop
    78d0:	bd80      	pop	{r7, pc}
    78d2:	bf00      	nop
    78d4:	20001ce4 	.word	0x20001ce4
    78d8:	0000783d 	.word	0x0000783d

000078dc <__NVIC_EnableIRQ>:
{
    78dc:	b480      	push	{r7}
    78de:	b083      	sub	sp, #12
    78e0:	af00      	add	r7, sp, #0
    78e2:	4603      	mov	r3, r0
    78e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78ea:	2b00      	cmp	r3, #0
    78ec:	db0b      	blt.n	7906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78ee:	4909      	ldr	r1, [pc, #36]	; (7914 <__NVIC_EnableIRQ+0x38>)
    78f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78f4:	095b      	lsrs	r3, r3, #5
    78f6:	88fa      	ldrh	r2, [r7, #6]
    78f8:	f002 021f 	and.w	r2, r2, #31
    78fc:	2001      	movs	r0, #1
    78fe:	fa00 f202 	lsl.w	r2, r0, r2
    7902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7906:	bf00      	nop
    7908:	370c      	adds	r7, #12
    790a:	46bd      	mov	sp, r7
    790c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7910:	4770      	bx	lr
    7912:	bf00      	nop
    7914:	e000e100 	.word	0xe000e100

00007918 <__NVIC_DisableIRQ>:
{
    7918:	b480      	push	{r7}
    791a:	b083      	sub	sp, #12
    791c:	af00      	add	r7, sp, #0
    791e:	4603      	mov	r3, r0
    7920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7926:	2b00      	cmp	r3, #0
    7928:	db10      	blt.n	794c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    792a:	490b      	ldr	r1, [pc, #44]	; (7958 <__NVIC_DisableIRQ+0x40>)
    792c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7930:	095b      	lsrs	r3, r3, #5
    7932:	88fa      	ldrh	r2, [r7, #6]
    7934:	f002 021f 	and.w	r2, r2, #31
    7938:	2001      	movs	r0, #1
    793a:	fa00 f202 	lsl.w	r2, r0, r2
    793e:	3320      	adds	r3, #32
    7940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7944:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7948:	f3bf 8f6f 	isb	sy
}
    794c:	bf00      	nop
    794e:	370c      	adds	r7, #12
    7950:	46bd      	mov	sp, r7
    7952:	f85d 7b04 	ldr.w	r7, [sp], #4
    7956:	4770      	bx	lr
    7958:	e000e100 	.word	0xe000e100

0000795c <__NVIC_ClearPendingIRQ>:
{
    795c:	b480      	push	{r7}
    795e:	b083      	sub	sp, #12
    7960:	af00      	add	r7, sp, #0
    7962:	4603      	mov	r3, r0
    7964:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    796a:	2b00      	cmp	r3, #0
    796c:	db0c      	blt.n	7988 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    796e:	4909      	ldr	r1, [pc, #36]	; (7994 <__NVIC_ClearPendingIRQ+0x38>)
    7970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7974:	095b      	lsrs	r3, r3, #5
    7976:	88fa      	ldrh	r2, [r7, #6]
    7978:	f002 021f 	and.w	r2, r2, #31
    797c:	2001      	movs	r0, #1
    797e:	fa00 f202 	lsl.w	r2, r0, r2
    7982:	3360      	adds	r3, #96	; 0x60
    7984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7988:	bf00      	nop
    798a:	370c      	adds	r7, #12
    798c:	46bd      	mov	sp, r7
    798e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7992:	4770      	bx	lr
    7994:	e000e100 	.word	0xe000e100

00007998 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7998:	b480      	push	{r7}
    799a:	b083      	sub	sp, #12
    799c:	af00      	add	r7, sp, #0
    799e:	6078      	str	r0, [r7, #4]
    79a0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    79a2:	bf00      	nop
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	69da      	ldr	r2, [r3, #28]
    79a8:	683b      	ldr	r3, [r7, #0]
    79aa:	4013      	ands	r3, r2
    79ac:	2b00      	cmp	r3, #0
    79ae:	d1f9      	bne.n	79a4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    79b0:	bf00      	nop
    79b2:	370c      	adds	r7, #12
    79b4:	46bd      	mov	sp, r7
    79b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ba:	4770      	bx	lr

000079bc <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    79bc:	b480      	push	{r7}
    79be:	b083      	sub	sp, #12
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
    79c4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	69da      	ldr	r2, [r3, #28]
    79ca:	683b      	ldr	r3, [r7, #0]
    79cc:	4013      	ands	r3, r2
    79ce:	2b00      	cmp	r3, #0
    79d0:	bf14      	ite	ne
    79d2:	2301      	movne	r3, #1
    79d4:	2300      	moveq	r3, #0
    79d6:	b2db      	uxtb	r3, r3
}
    79d8:	4618      	mov	r0, r3
    79da:	370c      	adds	r7, #12
    79dc:	46bd      	mov	sp, r7
    79de:	f85d 7b04 	ldr.w	r7, [sp], #4
    79e2:	4770      	bx	lr

000079e4 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    79e4:	b480      	push	{r7}
    79e6:	b083      	sub	sp, #12
    79e8:	af00      	add	r7, sp, #0
    79ea:	6078      	str	r0, [r7, #4]
    79ec:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    79ee:	bf00      	nop
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	69da      	ldr	r2, [r3, #28]
    79f4:	683b      	ldr	r3, [r7, #0]
    79f6:	4013      	ands	r3, r2
    79f8:	2b00      	cmp	r3, #0
    79fa:	d1f9      	bne.n	79f0 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    79fc:	bf00      	nop
    79fe:	370c      	adds	r7, #12
    7a00:	46bd      	mov	sp, r7
    7a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a06:	4770      	bx	lr

00007a08 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7a08:	b480      	push	{r7}
    7a0a:	b083      	sub	sp, #12
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	6078      	str	r0, [r7, #4]
    7a10:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	69da      	ldr	r2, [r3, #28]
    7a16:	683b      	ldr	r3, [r7, #0]
    7a18:	4013      	ands	r3, r2
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	bf14      	ite	ne
    7a1e:	2301      	movne	r3, #1
    7a20:	2300      	moveq	r3, #0
    7a22:	b2db      	uxtb	r3, r3
}
    7a24:	4618      	mov	r0, r3
    7a26:	370c      	adds	r7, #12
    7a28:	46bd      	mov	sp, r7
    7a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a2e:	4770      	bx	lr

00007a30 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    7a30:	b480      	push	{r7}
    7a32:	b083      	sub	sp, #12
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	2201      	movs	r2, #1
    7a3c:	761a      	strb	r2, [r3, #24]
}
    7a3e:	bf00      	nop
    7a40:	370c      	adds	r7, #12
    7a42:	46bd      	mov	sp, r7
    7a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a48:	4770      	bx	lr

00007a4a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    7a4a:	b480      	push	{r7}
    7a4c:	b083      	sub	sp, #12
    7a4e:	af00      	add	r7, sp, #0
    7a50:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7a52:	687b      	ldr	r3, [r7, #4]
    7a54:	2202      	movs	r2, #2
    7a56:	761a      	strb	r2, [r3, #24]
}
    7a58:	bf00      	nop
    7a5a:	370c      	adds	r7, #12
    7a5c:	46bd      	mov	sp, r7
    7a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a62:	4770      	bx	lr

00007a64 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    7a64:	b480      	push	{r7}
    7a66:	b083      	sub	sp, #12
    7a68:	af00      	add	r7, sp, #0
    7a6a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	7e1b      	ldrb	r3, [r3, #24]
    7a70:	b2db      	uxtb	r3, r3
}
    7a72:	4618      	mov	r0, r3
    7a74:	370c      	adds	r7, #12
    7a76:	46bd      	mov	sp, r7
    7a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a7c:	4770      	bx	lr

00007a7e <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    7a7e:	b480      	push	{r7}
    7a80:	b083      	sub	sp, #12
    7a82:	af00      	add	r7, sp, #0
    7a84:	6078      	str	r0, [r7, #4]
    7a86:	460b      	mov	r3, r1
    7a88:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    7a8a:	687b      	ldr	r3, [r7, #4]
    7a8c:	78fa      	ldrb	r2, [r7, #3]
    7a8e:	761a      	strb	r2, [r3, #24]
}
    7a90:	bf00      	nop
    7a92:	370c      	adds	r7, #12
    7a94:	46bd      	mov	sp, r7
    7a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a9a:	4770      	bx	lr

00007a9c <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    7a9c:	b480      	push	{r7}
    7a9e:	b085      	sub	sp, #20
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	6078      	str	r0, [r7, #4]
    7aa4:	460b      	mov	r3, r1
    7aa6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	7e1b      	ldrb	r3, [r3, #24]
    7aac:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7aae:	7bfa      	ldrb	r2, [r7, #15]
    7ab0:	78fb      	ldrb	r3, [r7, #3]
    7ab2:	4013      	ands	r3, r2
    7ab4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7ab6:	7bfb      	ldrb	r3, [r7, #15]
}
    7ab8:	4618      	mov	r0, r3
    7aba:	3714      	adds	r7, #20
    7abc:	46bd      	mov	sp, r7
    7abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ac2:	4770      	bx	lr

00007ac4 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    7ac4:	b480      	push	{r7}
    7ac6:	b083      	sub	sp, #12
    7ac8:	af00      	add	r7, sp, #0
    7aca:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7acc:	687b      	ldr	r3, [r7, #4]
    7ace:	7e1b      	ldrb	r3, [r3, #24]
    7ad0:	b2db      	uxtb	r3, r3
}
    7ad2:	4618      	mov	r0, r3
    7ad4:	370c      	adds	r7, #12
    7ad6:	46bd      	mov	sp, r7
    7ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7adc:	4770      	bx	lr

00007ade <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    7ade:	b480      	push	{r7}
    7ae0:	b083      	sub	sp, #12
    7ae2:	af00      	add	r7, sp, #0
    7ae4:	6078      	str	r0, [r7, #4]
    7ae6:	460b      	mov	r3, r1
    7ae8:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7aea:	687b      	ldr	r3, [r7, #4]
    7aec:	78fa      	ldrb	r2, [r7, #3]
    7aee:	761a      	strb	r2, [r3, #24]
}
    7af0:	bf00      	nop
    7af2:	370c      	adds	r7, #12
    7af4:	46bd      	mov	sp, r7
    7af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7afa:	4770      	bx	lr

00007afc <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    7afc:	b480      	push	{r7}
    7afe:	b083      	sub	sp, #12
    7b00:	af00      	add	r7, sp, #0
    7b02:	6078      	str	r0, [r7, #4]
    7b04:	460b      	mov	r3, r1
    7b06:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    7b08:	78fb      	ldrb	r3, [r7, #3]
    7b0a:	f083 0301 	eor.w	r3, r3, #1
    7b0e:	b2db      	uxtb	r3, r3
    7b10:	2b00      	cmp	r3, #0
    7b12:	d003      	beq.n	7b1c <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	2201      	movs	r2, #1
    7b18:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    7b1a:	e002      	b.n	7b22 <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	2201      	movs	r2, #1
    7b20:	759a      	strb	r2, [r3, #22]
}
    7b22:	bf00      	nop
    7b24:	370c      	adds	r7, #12
    7b26:	46bd      	mov	sp, r7
    7b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b2c:	4770      	bx	lr

00007b2e <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    7b2e:	b480      	push	{r7}
    7b30:	b083      	sub	sp, #12
    7b32:	af00      	add	r7, sp, #0
    7b34:	6078      	str	r0, [r7, #4]
    7b36:	460b      	mov	r3, r1
    7b38:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    7b3a:	78fb      	ldrb	r3, [r7, #3]
    7b3c:	f083 0301 	eor.w	r3, r3, #1
    7b40:	b2db      	uxtb	r3, r3
    7b42:	2b00      	cmp	r3, #0
    7b44:	d003      	beq.n	7b4e <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	2202      	movs	r2, #2
    7b4a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    7b4c:	e002      	b.n	7b54 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	2202      	movs	r2, #2
    7b52:	759a      	strb	r2, [r3, #22]
}
    7b54:	bf00      	nop
    7b56:	370c      	adds	r7, #12
    7b58:	46bd      	mov	sp, r7
    7b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b5e:	4770      	bx	lr

00007b60 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    7b60:	b480      	push	{r7}
    7b62:	b083      	sub	sp, #12
    7b64:	af00      	add	r7, sp, #0
    7b66:	6078      	str	r0, [r7, #4]
    7b68:	460b      	mov	r3, r1
    7b6a:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    7b6c:	78fb      	ldrb	r3, [r7, #3]
    7b6e:	f083 0301 	eor.w	r3, r3, #1
    7b72:	b2db      	uxtb	r3, r3
    7b74:	2b00      	cmp	r3, #0
    7b76:	d003      	beq.n	7b80 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    7b78:	687b      	ldr	r3, [r7, #4]
    7b7a:	2280      	movs	r2, #128	; 0x80
    7b7c:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    7b7e:	e002      	b.n	7b86 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    7b80:	687b      	ldr	r3, [r7, #4]
    7b82:	2280      	movs	r2, #128	; 0x80
    7b84:	759a      	strb	r2, [r3, #22]
}
    7b86:	bf00      	nop
    7b88:	370c      	adds	r7, #12
    7b8a:	46bd      	mov	sp, r7
    7b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b90:	4770      	bx	lr

00007b92 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    7b92:	b480      	push	{r7}
    7b94:	b083      	sub	sp, #12
    7b96:	af00      	add	r7, sp, #0
    7b98:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    7b9a:	687b      	ldr	r3, [r7, #4]
    7b9c:	2201      	movs	r2, #1
    7b9e:	759a      	strb	r2, [r3, #22]
}
    7ba0:	bf00      	nop
    7ba2:	370c      	adds	r7, #12
    7ba4:	46bd      	mov	sp, r7
    7ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7baa:	4770      	bx	lr

00007bac <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    7bac:	b480      	push	{r7}
    7bae:	b083      	sub	sp, #12
    7bb0:	af00      	add	r7, sp, #0
    7bb2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	2201      	movs	r2, #1
    7bb8:	751a      	strb	r2, [r3, #20]
}
    7bba:	bf00      	nop
    7bbc:	370c      	adds	r7, #12
    7bbe:	46bd      	mov	sp, r7
    7bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc4:	4770      	bx	lr

00007bc6 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    7bc6:	b480      	push	{r7}
    7bc8:	b083      	sub	sp, #12
    7bca:	af00      	add	r7, sp, #0
    7bcc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	2202      	movs	r2, #2
    7bd2:	759a      	strb	r2, [r3, #22]
}
    7bd4:	bf00      	nop
    7bd6:	370c      	adds	r7, #12
    7bd8:	46bd      	mov	sp, r7
    7bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bde:	4770      	bx	lr

00007be0 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    7be0:	b480      	push	{r7}
    7be2:	b083      	sub	sp, #12
    7be4:	af00      	add	r7, sp, #0
    7be6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	2202      	movs	r2, #2
    7bec:	751a      	strb	r2, [r3, #20]
}
    7bee:	bf00      	nop
    7bf0:	370c      	adds	r7, #12
    7bf2:	46bd      	mov	sp, r7
    7bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf8:	4770      	bx	lr

00007bfa <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    7bfa:	b480      	push	{r7}
    7bfc:	b083      	sub	sp, #12
    7bfe:	af00      	add	r7, sp, #0
    7c00:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    7c02:	687b      	ldr	r3, [r7, #4]
    7c04:	2204      	movs	r2, #4
    7c06:	759a      	strb	r2, [r3, #22]
}
    7c08:	bf00      	nop
    7c0a:	370c      	adds	r7, #12
    7c0c:	46bd      	mov	sp, r7
    7c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c12:	4770      	bx	lr

00007c14 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    7c14:	b480      	push	{r7}
    7c16:	b083      	sub	sp, #12
    7c18:	af00      	add	r7, sp, #0
    7c1a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	2204      	movs	r2, #4
    7c20:	751a      	strb	r2, [r3, #20]
}
    7c22:	bf00      	nop
    7c24:	370c      	adds	r7, #12
    7c26:	46bd      	mov	sp, r7
    7c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c2c:	4770      	bx	lr

00007c2e <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    7c2e:	b480      	push	{r7}
    7c30:	b083      	sub	sp, #12
    7c32:	af00      	add	r7, sp, #0
    7c34:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    7c36:	687b      	ldr	r3, [r7, #4]
    7c38:	7d9b      	ldrb	r3, [r3, #22]
    7c3a:	b2db      	uxtb	r3, r3
}
    7c3c:	4618      	mov	r0, r3
    7c3e:	370c      	adds	r7, #12
    7c40:	46bd      	mov	sp, r7
    7c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c46:	4770      	bx	lr

00007c48 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7c48:	b580      	push	{r7, lr}
    7c4a:	b082      	sub	sp, #8
    7c4c:	af00      	add	r7, sp, #0
    7c4e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    7c50:	687b      	ldr	r3, [r7, #4]
    7c52:	681b      	ldr	r3, [r3, #0]
    7c54:	f043 0202 	orr.w	r2, r3, #2
    7c58:	687b      	ldr	r3, [r7, #4]
    7c5a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7c5c:	2103      	movs	r1, #3
    7c5e:	6878      	ldr	r0, [r7, #4]
    7c60:	4b02      	ldr	r3, [pc, #8]	; (7c6c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    7c62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c64:	bf00      	nop
    7c66:	3708      	adds	r7, #8
    7c68:	46bd      	mov	sp, r7
    7c6a:	bd80      	pop	{r7, pc}
    7c6c:	00007999 	.word	0x00007999

00007c70 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c70:	b580      	push	{r7, lr}
    7c72:	b082      	sub	sp, #8
    7c74:	af00      	add	r7, sp, #0
    7c76:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7c78:	687b      	ldr	r3, [r7, #4]
    7c7a:	681b      	ldr	r3, [r3, #0]
    7c7c:	f023 0202 	bic.w	r2, r3, #2
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7c84:	2103      	movs	r1, #3
    7c86:	6878      	ldr	r0, [r7, #4]
    7c88:	4b02      	ldr	r3, [pc, #8]	; (7c94 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7c8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c8c:	bf00      	nop
    7c8e:	3708      	adds	r7, #8
    7c90:	46bd      	mov	sp, r7
    7c92:	bd80      	pop	{r7, pc}
    7c94:	00007999 	.word	0x00007999

00007c98 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7c98:	b480      	push	{r7}
    7c9a:	b085      	sub	sp, #20
    7c9c:	af00      	add	r7, sp, #0
    7c9e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7ca0:	687b      	ldr	r3, [r7, #4]
    7ca2:	681b      	ldr	r3, [r3, #0]
    7ca4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7ca6:	68fb      	ldr	r3, [r7, #12]
    7ca8:	0edb      	lsrs	r3, r3, #27
    7caa:	f003 0301 	and.w	r3, r3, #1
    7cae:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7cb0:	68fb      	ldr	r3, [r7, #12]
    7cb2:	2b00      	cmp	r3, #0
    7cb4:	bf14      	ite	ne
    7cb6:	2301      	movne	r3, #1
    7cb8:	2300      	moveq	r3, #0
    7cba:	b2db      	uxtb	r3, r3
}
    7cbc:	4618      	mov	r0, r3
    7cbe:	3714      	adds	r7, #20
    7cc0:	46bd      	mov	sp, r7
    7cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cc6:	4770      	bx	lr

00007cc8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7cc8:	b580      	push	{r7, lr}
    7cca:	b084      	sub	sp, #16
    7ccc:	af00      	add	r7, sp, #0
    7cce:	6078      	str	r0, [r7, #4]
    7cd0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7cd2:	2103      	movs	r1, #3
    7cd4:	6878      	ldr	r0, [r7, #4]
    7cd6:	4b07      	ldr	r3, [pc, #28]	; (7cf4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7cd8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7cda:	687b      	ldr	r3, [r7, #4]
    7cdc:	681b      	ldr	r3, [r3, #0]
    7cde:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7ce0:	68fa      	ldr	r2, [r7, #12]
    7ce2:	683b      	ldr	r3, [r7, #0]
    7ce4:	4013      	ands	r3, r2
    7ce6:	60fb      	str	r3, [r7, #12]
	return tmp;
    7ce8:	68fb      	ldr	r3, [r7, #12]
}
    7cea:	4618      	mov	r0, r3
    7cec:	3710      	adds	r7, #16
    7cee:	46bd      	mov	sp, r7
    7cf0:	bd80      	pop	{r7, pc}
    7cf2:	bf00      	nop
    7cf4:	00007999 	.word	0x00007999

00007cf8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    7cf8:	b580      	push	{r7, lr}
    7cfa:	b082      	sub	sp, #8
    7cfc:	af00      	add	r7, sp, #0
    7cfe:	6078      	str	r0, [r7, #4]
    7d00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	683a      	ldr	r2, [r7, #0]
    7d06:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7d08:	2103      	movs	r1, #3
    7d0a:	6878      	ldr	r0, [r7, #4]
    7d0c:	4b02      	ldr	r3, [pc, #8]	; (7d18 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    7d0e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d10:	bf00      	nop
    7d12:	3708      	adds	r7, #8
    7d14:	46bd      	mov	sp, r7
    7d16:	bd80      	pop	{r7, pc}
    7d18:	00007999 	.word	0x00007999

00007d1c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7d1c:	b580      	push	{r7, lr}
    7d1e:	b084      	sub	sp, #16
    7d20:	af00      	add	r7, sp, #0
    7d22:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7d24:	2103      	movs	r1, #3
    7d26:	6878      	ldr	r0, [r7, #4]
    7d28:	4b09      	ldr	r3, [pc, #36]	; (7d50 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    7d2a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7d2c:	687b      	ldr	r3, [r7, #4]
    7d2e:	681b      	ldr	r3, [r3, #0]
    7d30:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    7d32:	68fb      	ldr	r3, [r7, #12]
    7d34:	085b      	lsrs	r3, r3, #1
    7d36:	f003 0301 	and.w	r3, r3, #1
    7d3a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7d3c:	68fb      	ldr	r3, [r7, #12]
    7d3e:	2b00      	cmp	r3, #0
    7d40:	bf14      	ite	ne
    7d42:	2301      	movne	r3, #1
    7d44:	2300      	moveq	r3, #0
    7d46:	b2db      	uxtb	r3, r3
}
    7d48:	4618      	mov	r0, r3
    7d4a:	3710      	adds	r7, #16
    7d4c:	46bd      	mov	sp, r7
    7d4e:	bd80      	pop	{r7, pc}
    7d50:	000079e5 	.word	0x000079e5

00007d54 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7d54:	b580      	push	{r7, lr}
    7d56:	b082      	sub	sp, #8
    7d58:	af00      	add	r7, sp, #0
    7d5a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	681b      	ldr	r3, [r3, #0]
    7d60:	f023 0202 	bic.w	r2, r3, #2
    7d64:	687b      	ldr	r3, [r7, #4]
    7d66:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7d68:	2103      	movs	r1, #3
    7d6a:	6878      	ldr	r0, [r7, #4]
    7d6c:	4b02      	ldr	r3, [pc, #8]	; (7d78 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7d6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d70:	bf00      	nop
    7d72:	3708      	adds	r7, #8
    7d74:	46bd      	mov	sp, r7
    7d76:	bd80      	pop	{r7, pc}
    7d78:	000079e5 	.word	0x000079e5

00007d7c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7d7c:	b580      	push	{r7, lr}
    7d7e:	b084      	sub	sp, #16
    7d80:	af00      	add	r7, sp, #0
    7d82:	6078      	str	r0, [r7, #4]
    7d84:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7d86:	2103      	movs	r1, #3
    7d88:	6878      	ldr	r0, [r7, #4]
    7d8a:	4b07      	ldr	r3, [pc, #28]	; (7da8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7d8c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7d8e:	687b      	ldr	r3, [r7, #4]
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7d94:	68fa      	ldr	r2, [r7, #12]
    7d96:	683b      	ldr	r3, [r7, #0]
    7d98:	4013      	ands	r3, r2
    7d9a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7d9c:	68fb      	ldr	r3, [r7, #12]
}
    7d9e:	4618      	mov	r0, r3
    7da0:	3710      	adds	r7, #16
    7da2:	46bd      	mov	sp, r7
    7da4:	bd80      	pop	{r7, pc}
    7da6:	bf00      	nop
    7da8:	000079e5 	.word	0x000079e5

00007dac <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7dac:	b580      	push	{r7, lr}
    7dae:	b082      	sub	sp, #8
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7db6:	687b      	ldr	r3, [r7, #4]
    7db8:	683a      	ldr	r2, [r7, #0]
    7dba:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7dbc:	2103      	movs	r1, #3
    7dbe:	6878      	ldr	r0, [r7, #4]
    7dc0:	4b02      	ldr	r3, [pc, #8]	; (7dcc <hri_sercomspi_write_CTRLA_reg+0x20>)
    7dc2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7dc4:	bf00      	nop
    7dc6:	3708      	adds	r7, #8
    7dc8:	46bd      	mov	sp, r7
    7dca:	bd80      	pop	{r7, pc}
    7dcc:	000079e5 	.word	0x000079e5

00007dd0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7dd0:	b580      	push	{r7, lr}
    7dd2:	b082      	sub	sp, #8
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7dd8:	687b      	ldr	r3, [r7, #4]
    7dda:	685b      	ldr	r3, [r3, #4]
    7ddc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7de0:	687b      	ldr	r3, [r7, #4]
    7de2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7de4:	2104      	movs	r1, #4
    7de6:	6878      	ldr	r0, [r7, #4]
    7de8:	4b02      	ldr	r3, [pc, #8]	; (7df4 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7dea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7dec:	bf00      	nop
    7dee:	3708      	adds	r7, #8
    7df0:	46bd      	mov	sp, r7
    7df2:	bd80      	pop	{r7, pc}
    7df4:	00007999 	.word	0x00007999

00007df8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    7df8:	b580      	push	{r7, lr}
    7dfa:	b082      	sub	sp, #8
    7dfc:	af00      	add	r7, sp, #0
    7dfe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	685b      	ldr	r3, [r3, #4]
    7e04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e0c:	2104      	movs	r1, #4
    7e0e:	6878      	ldr	r0, [r7, #4]
    7e10:	4b02      	ldr	r3, [pc, #8]	; (7e1c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    7e12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e14:	bf00      	nop
    7e16:	3708      	adds	r7, #8
    7e18:	46bd      	mov	sp, r7
    7e1a:	bd80      	pop	{r7, pc}
    7e1c:	00007999 	.word	0x00007999

00007e20 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    7e20:	b580      	push	{r7, lr}
    7e22:	b082      	sub	sp, #8
    7e24:	af00      	add	r7, sp, #0
    7e26:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7e28:	687b      	ldr	r3, [r7, #4]
    7e2a:	685b      	ldr	r3, [r3, #4]
    7e2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    7e30:	687b      	ldr	r3, [r7, #4]
    7e32:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e34:	2104      	movs	r1, #4
    7e36:	6878      	ldr	r0, [r7, #4]
    7e38:	4b02      	ldr	r3, [pc, #8]	; (7e44 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    7e3a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e3c:	bf00      	nop
    7e3e:	3708      	adds	r7, #8
    7e40:	46bd      	mov	sp, r7
    7e42:	bd80      	pop	{r7, pc}
    7e44:	00007999 	.word	0x00007999

00007e48 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    7e48:	b580      	push	{r7, lr}
    7e4a:	b082      	sub	sp, #8
    7e4c:	af00      	add	r7, sp, #0
    7e4e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7e50:	687b      	ldr	r3, [r7, #4]
    7e52:	685b      	ldr	r3, [r3, #4]
    7e54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7e58:	687b      	ldr	r3, [r7, #4]
    7e5a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e5c:	2104      	movs	r1, #4
    7e5e:	6878      	ldr	r0, [r7, #4]
    7e60:	4b02      	ldr	r3, [pc, #8]	; (7e6c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    7e62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e64:	bf00      	nop
    7e66:	3708      	adds	r7, #8
    7e68:	46bd      	mov	sp, r7
    7e6a:	bd80      	pop	{r7, pc}
    7e6c:	00007999 	.word	0x00007999

00007e70 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7e70:	b580      	push	{r7, lr}
    7e72:	b082      	sub	sp, #8
    7e74:	af00      	add	r7, sp, #0
    7e76:	6078      	str	r0, [r7, #4]
    7e78:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	685a      	ldr	r2, [r3, #4]
    7e7e:	683b      	ldr	r3, [r7, #0]
    7e80:	041b      	lsls	r3, r3, #16
    7e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    7e86:	431a      	orrs	r2, r3
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e8c:	2104      	movs	r1, #4
    7e8e:	6878      	ldr	r0, [r7, #4]
    7e90:	4b02      	ldr	r3, [pc, #8]	; (7e9c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    7e92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e94:	bf00      	nop
    7e96:	3708      	adds	r7, #8
    7e98:	46bd      	mov	sp, r7
    7e9a:	bd80      	pop	{r7, pc}
    7e9c:	00007999 	.word	0x00007999

00007ea0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7ea0:	b580      	push	{r7, lr}
    7ea2:	b082      	sub	sp, #8
    7ea4:	af00      	add	r7, sp, #0
    7ea6:	6078      	str	r0, [r7, #4]
    7ea8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7eaa:	687b      	ldr	r3, [r7, #4]
    7eac:	683a      	ldr	r2, [r7, #0]
    7eae:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7eb0:	2104      	movs	r1, #4
    7eb2:	6878      	ldr	r0, [r7, #4]
    7eb4:	4b02      	ldr	r3, [pc, #8]	; (7ec0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    7eb6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7eb8:	bf00      	nop
    7eba:	3708      	adds	r7, #8
    7ebc:	46bd      	mov	sp, r7
    7ebe:	bd80      	pop	{r7, pc}
    7ec0:	00007999 	.word	0x00007999

00007ec4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    7ec4:	b580      	push	{r7, lr}
    7ec6:	b082      	sub	sp, #8
    7ec8:	af00      	add	r7, sp, #0
    7eca:	6078      	str	r0, [r7, #4]
    7ecc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7ece:	687b      	ldr	r3, [r7, #4]
    7ed0:	683a      	ldr	r2, [r7, #0]
    7ed2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    7ed4:	2117      	movs	r1, #23
    7ed6:	6878      	ldr	r0, [r7, #4]
    7ed8:	4b02      	ldr	r3, [pc, #8]	; (7ee4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    7eda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7edc:	bf00      	nop
    7ede:	3708      	adds	r7, #8
    7ee0:	46bd      	mov	sp, r7
    7ee2:	bd80      	pop	{r7, pc}
    7ee4:	000079e5 	.word	0x000079e5

00007ee8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7ee8:	b480      	push	{r7}
    7eea:	b083      	sub	sp, #12
    7eec:	af00      	add	r7, sp, #0
    7eee:	6078      	str	r0, [r7, #4]
    7ef0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7ef2:	687b      	ldr	r3, [r7, #4]
    7ef4:	683a      	ldr	r2, [r7, #0]
    7ef6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ef8:	bf00      	nop
    7efa:	370c      	adds	r7, #12
    7efc:	46bd      	mov	sp, r7
    7efe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f02:	4770      	bx	lr

00007f04 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    7f04:	b480      	push	{r7}
    7f06:	b083      	sub	sp, #12
    7f08:	af00      	add	r7, sp, #0
    7f0a:	6078      	str	r0, [r7, #4]
    7f0c:	460b      	mov	r3, r1
    7f0e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	78fa      	ldrb	r2, [r7, #3]
    7f14:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f16:	bf00      	nop
    7f18:	370c      	adds	r7, #12
    7f1a:	46bd      	mov	sp, r7
    7f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f20:	4770      	bx	lr
	...

00007f24 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    7f24:	b580      	push	{r7, lr}
    7f26:	b084      	sub	sp, #16
    7f28:	af00      	add	r7, sp, #0
    7f2a:	6078      	str	r0, [r7, #4]
    7f2c:	460b      	mov	r3, r1
    7f2e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f34:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7f36:	68fb      	ldr	r3, [r7, #12]
    7f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    7f3c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7f3e:	78fb      	ldrb	r3, [r7, #3]
    7f40:	039b      	lsls	r3, r3, #14
    7f42:	461a      	mov	r2, r3
    7f44:	68fb      	ldr	r3, [r7, #12]
    7f46:	4313      	orrs	r3, r2
    7f48:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	68fa      	ldr	r2, [r7, #12]
    7f4e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f50:	2104      	movs	r1, #4
    7f52:	6878      	ldr	r0, [r7, #4]
    7f54:	4b02      	ldr	r3, [pc, #8]	; (7f60 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    7f56:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f58:	bf00      	nop
    7f5a:	3710      	adds	r7, #16
    7f5c:	46bd      	mov	sp, r7
    7f5e:	bd80      	pop	{r7, pc}
    7f60:	00007999 	.word	0x00007999

00007f64 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    7f64:	b580      	push	{r7, lr}
    7f66:	b082      	sub	sp, #8
    7f68:	af00      	add	r7, sp, #0
    7f6a:	6078      	str	r0, [r7, #4]
    7f6c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	683a      	ldr	r2, [r7, #0]
    7f72:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f74:	2104      	movs	r1, #4
    7f76:	6878      	ldr	r0, [r7, #4]
    7f78:	4b02      	ldr	r3, [pc, #8]	; (7f84 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7f7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f7c:	bf00      	nop
    7f7e:	3708      	adds	r7, #8
    7f80:	46bd      	mov	sp, r7
    7f82:	bd80      	pop	{r7, pc}
    7f84:	00007999 	.word	0x00007999

00007f88 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7f88:	b580      	push	{r7, lr}
    7f8a:	b082      	sub	sp, #8
    7f8c:	af00      	add	r7, sp, #0
    7f8e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f90:	2104      	movs	r1, #4
    7f92:	6878      	ldr	r0, [r7, #4]
    7f94:	4b03      	ldr	r3, [pc, #12]	; (7fa4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    7f96:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7f9c:	4618      	mov	r0, r3
    7f9e:	3708      	adds	r7, #8
    7fa0:	46bd      	mov	sp, r7
    7fa2:	bd80      	pop	{r7, pc}
    7fa4:	00007999 	.word	0x00007999

00007fa8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7fa8:	b480      	push	{r7}
    7faa:	b083      	sub	sp, #12
    7fac:	af00      	add	r7, sp, #0
    7fae:	6078      	str	r0, [r7, #4]
    7fb0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7fb2:	687b      	ldr	r3, [r7, #4]
    7fb4:	683a      	ldr	r2, [r7, #0]
    7fb6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7fb8:	bf00      	nop
    7fba:	370c      	adds	r7, #12
    7fbc:	46bd      	mov	sp, r7
    7fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc2:	4770      	bx	lr

00007fc4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    7fc4:	b580      	push	{r7, lr}
    7fc6:	b082      	sub	sp, #8
    7fc8:	af00      	add	r7, sp, #0
    7fca:	6078      	str	r0, [r7, #4]
    7fcc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	683a      	ldr	r2, [r7, #0]
    7fd2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7fd4:	2104      	movs	r1, #4
    7fd6:	6878      	ldr	r0, [r7, #4]
    7fd8:	4b02      	ldr	r3, [pc, #8]	; (7fe4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    7fda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7fdc:	bf00      	nop
    7fde:	3708      	adds	r7, #8
    7fe0:	46bd      	mov	sp, r7
    7fe2:	bd80      	pop	{r7, pc}
    7fe4:	00007999 	.word	0x00007999

00007fe8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7fe8:	b580      	push	{r7, lr}
    7fea:	b082      	sub	sp, #8
    7fec:	af00      	add	r7, sp, #0
    7fee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ff0:	2104      	movs	r1, #4
    7ff2:	6878      	ldr	r0, [r7, #4]
    7ff4:	4b03      	ldr	r3, [pc, #12]	; (8004 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    7ff6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7ffc:	4618      	mov	r0, r3
    7ffe:	3708      	adds	r7, #8
    8000:	46bd      	mov	sp, r7
    8002:	bd80      	pop	{r7, pc}
    8004:	00007999 	.word	0x00007999

00008008 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    8008:	b480      	push	{r7}
    800a:	b083      	sub	sp, #12
    800c:	af00      	add	r7, sp, #0
    800e:	6078      	str	r0, [r7, #4]
    8010:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	683a      	ldr	r2, [r7, #0]
    8016:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8018:	bf00      	nop
    801a:	370c      	adds	r7, #12
    801c:	46bd      	mov	sp, r7
    801e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8022:	4770      	bx	lr

00008024 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    8024:	b480      	push	{r7}
    8026:	b083      	sub	sp, #12
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    802c:	687b      	ldr	r3, [r7, #4]
    802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8030:	4618      	mov	r0, r3
    8032:	370c      	adds	r7, #12
    8034:	46bd      	mov	sp, r7
    8036:	f85d 7b04 	ldr.w	r7, [sp], #4
    803a:	4770      	bx	lr

0000803c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    803c:	b480      	push	{r7}
    803e:	b083      	sub	sp, #12
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
    8044:	460b      	mov	r3, r1
    8046:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	78fa      	ldrb	r2, [r7, #3]
    804c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8050:	bf00      	nop
    8052:	370c      	adds	r7, #12
    8054:	46bd      	mov	sp, r7
    8056:	f85d 7b04 	ldr.w	r7, [sp], #4
    805a:	4770      	bx	lr

0000805c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    805c:	b480      	push	{r7}
    805e:	b083      	sub	sp, #12
    8060:	af00      	add	r7, sp, #0
    8062:	6078      	str	r0, [r7, #4]
    8064:	460b      	mov	r3, r1
    8066:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	887a      	ldrh	r2, [r7, #2]
    806c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    806e:	bf00      	nop
    8070:	370c      	adds	r7, #12
    8072:	46bd      	mov	sp, r7
    8074:	f85d 7b04 	ldr.w	r7, [sp], #4
    8078:	4770      	bx	lr
	...

0000807c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    807c:	b580      	push	{r7, lr}
    807e:	b082      	sub	sp, #8
    8080:	af00      	add	r7, sp, #0
    8082:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8084:	2104      	movs	r1, #4
    8086:	6878      	ldr	r0, [r7, #4]
    8088:	4b06      	ldr	r3, [pc, #24]	; (80a4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    808a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	8b5b      	ldrh	r3, [r3, #26]
    8090:	b29b      	uxth	r3, r3
    8092:	091b      	lsrs	r3, r3, #4
    8094:	b29b      	uxth	r3, r3
    8096:	f003 0303 	and.w	r3, r3, #3
    809a:	b29b      	uxth	r3, r3
}
    809c:	4618      	mov	r0, r3
    809e:	3708      	adds	r7, #8
    80a0:	46bd      	mov	sp, r7
    80a2:	bd80      	pop	{r7, pc}
    80a4:	00007999 	.word	0x00007999

000080a8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    80a8:	b580      	push	{r7, lr}
    80aa:	b082      	sub	sp, #8
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    80b0:	2104      	movs	r1, #4
    80b2:	6878      	ldr	r0, [r7, #4]
    80b4:	4b04      	ldr	r3, [pc, #16]	; (80c8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    80b6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    80b8:	687b      	ldr	r3, [r7, #4]
    80ba:	8b5b      	ldrh	r3, [r3, #26]
    80bc:	b29b      	uxth	r3, r3
}
    80be:	4618      	mov	r0, r3
    80c0:	3708      	adds	r7, #8
    80c2:	46bd      	mov	sp, r7
    80c4:	bd80      	pop	{r7, pc}
    80c6:	bf00      	nop
    80c8:	00007999 	.word	0x00007999

000080cc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	b082      	sub	sp, #8
    80d0:	af00      	add	r7, sp, #0
    80d2:	6078      	str	r0, [r7, #4]
    80d4:	460b      	mov	r3, r1
    80d6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	887a      	ldrh	r2, [r7, #2]
    80dc:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    80de:	2104      	movs	r1, #4
    80e0:	6878      	ldr	r0, [r7, #4]
    80e2:	4b03      	ldr	r3, [pc, #12]	; (80f0 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    80e4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    80e6:	bf00      	nop
    80e8:	3708      	adds	r7, #8
    80ea:	46bd      	mov	sp, r7
    80ec:	bd80      	pop	{r7, pc}
    80ee:	bf00      	nop
    80f0:	00007999 	.word	0x00007999

000080f4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    80f4:	b4b0      	push	{r4, r5, r7}
    80f6:	b08d      	sub	sp, #52	; 0x34
    80f8:	af00      	add	r7, sp, #0
    80fa:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    80fc:	4b13      	ldr	r3, [pc, #76]	; (814c <_sercom_get_hardware_index+0x58>)
    80fe:	f107 040c 	add.w	r4, r7, #12
    8102:	461d      	mov	r5, r3
    8104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8108:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    810c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8110:	2300      	movs	r3, #0
    8112:	62fb      	str	r3, [r7, #44]	; 0x2c
    8114:	e010      	b.n	8138 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    8116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8118:	009b      	lsls	r3, r3, #2
    811a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    811e:	4413      	add	r3, r2
    8120:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8124:	461a      	mov	r2, r3
    8126:	687b      	ldr	r3, [r7, #4]
    8128:	429a      	cmp	r2, r3
    812a:	d102      	bne.n	8132 <_sercom_get_hardware_index+0x3e>
			return i;
    812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    812e:	b2db      	uxtb	r3, r3
    8130:	e006      	b.n	8140 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8134:	3301      	adds	r3, #1
    8136:	62fb      	str	r3, [r7, #44]	; 0x2c
    8138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    813a:	2b07      	cmp	r3, #7
    813c:	d9eb      	bls.n	8116 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    813e:	2300      	movs	r3, #0
}
    8140:	4618      	mov	r0, r3
    8142:	3734      	adds	r7, #52	; 0x34
    8144:	46bd      	mov	sp, r7
    8146:	bcb0      	pop	{r4, r5, r7}
    8148:	4770      	bx	lr
    814a:	bf00      	nop
    814c:	00011c20 	.word	0x00011c20

00008150 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    8150:	b480      	push	{r7}
    8152:	b083      	sub	sp, #12
    8154:	af00      	add	r7, sp, #0
    8156:	6078      	str	r0, [r7, #4]
    8158:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    815a:	687b      	ldr	r3, [r7, #4]
    815c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    8160:	d102      	bne.n	8168 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    8162:	4a0b      	ldr	r2, [pc, #44]	; (8190 <_sercom_init_irq_param+0x40>)
    8164:	683b      	ldr	r3, [r7, #0]
    8166:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    8168:	687b      	ldr	r3, [r7, #4]
    816a:	4a0a      	ldr	r2, [pc, #40]	; (8194 <_sercom_init_irq_param+0x44>)
    816c:	4293      	cmp	r3, r2
    816e:	d102      	bne.n	8176 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    8170:	4a09      	ldr	r2, [pc, #36]	; (8198 <_sercom_init_irq_param+0x48>)
    8172:	683b      	ldr	r3, [r7, #0]
    8174:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    8176:	687b      	ldr	r3, [r7, #4]
    8178:	4a08      	ldr	r2, [pc, #32]	; (819c <_sercom_init_irq_param+0x4c>)
    817a:	4293      	cmp	r3, r2
    817c:	d102      	bne.n	8184 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    817e:	4a08      	ldr	r2, [pc, #32]	; (81a0 <_sercom_init_irq_param+0x50>)
    8180:	683b      	ldr	r3, [r7, #0]
    8182:	6013      	str	r3, [r2, #0]
	}
}
    8184:	bf00      	nop
    8186:	370c      	adds	r7, #12
    8188:	46bd      	mov	sp, r7
    818a:	f85d 7b04 	ldr.w	r7, [sp], #4
    818e:	4770      	bx	lr
    8190:	20001d00 	.word	0x20001d00
    8194:	43000400 	.word	0x43000400
    8198:	20001d04 	.word	0x20001d04
    819c:	43000c00 	.word	0x43000c00
    81a0:	20001d08 	.word	0x20001d08

000081a4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    81a4:	b580      	push	{r7, lr}
    81a6:	b084      	sub	sp, #16
    81a8:	af00      	add	r7, sp, #0
    81aa:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    81ac:	6878      	ldr	r0, [r7, #4]
    81ae:	4b13      	ldr	r3, [pc, #76]	; (81fc <_get_i2cm_index+0x58>)
    81b0:	4798      	blx	r3
    81b2:	4603      	mov	r3, r0
    81b4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    81b6:	2300      	movs	r3, #0
    81b8:	73fb      	strb	r3, [r7, #15]
    81ba:	e010      	b.n	81de <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    81bc:	7bfa      	ldrb	r2, [r7, #15]
    81be:	4910      	ldr	r1, [pc, #64]	; (8200 <_get_i2cm_index+0x5c>)
    81c0:	4613      	mov	r3, r2
    81c2:	005b      	lsls	r3, r3, #1
    81c4:	4413      	add	r3, r2
    81c6:	00db      	lsls	r3, r3, #3
    81c8:	440b      	add	r3, r1
    81ca:	781b      	ldrb	r3, [r3, #0]
    81cc:	7bba      	ldrb	r2, [r7, #14]
    81ce:	429a      	cmp	r2, r3
    81d0:	d102      	bne.n	81d8 <_get_i2cm_index+0x34>
			return i;
    81d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    81d6:	e00d      	b.n	81f4 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    81d8:	7bfb      	ldrb	r3, [r7, #15]
    81da:	3301      	adds	r3, #1
    81dc:	73fb      	strb	r3, [r7, #15]
    81de:	7bfb      	ldrb	r3, [r7, #15]
    81e0:	2b01      	cmp	r3, #1
    81e2:	d9eb      	bls.n	81bc <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    81e4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    81e8:	4906      	ldr	r1, [pc, #24]	; (8204 <_get_i2cm_index+0x60>)
    81ea:	2000      	movs	r0, #0
    81ec:	4b06      	ldr	r3, [pc, #24]	; (8208 <_get_i2cm_index+0x64>)
    81ee:	4798      	blx	r3
	return -1;
    81f0:	f04f 33ff 	mov.w	r3, #4294967295
}
    81f4:	4618      	mov	r0, r3
    81f6:	3710      	adds	r7, #16
    81f8:	46bd      	mov	sp, r7
    81fa:	bd80      	pop	{r7, pc}
    81fc:	000080f5 	.word	0x000080f5
    8200:	20000018 	.word	0x20000018
    8204:	00011c04 	.word	0x00011c04
    8208:	00005545 	.word	0x00005545

0000820c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    820c:	b580      	push	{r7, lr}
    820e:	b082      	sub	sp, #8
    8210:	af00      	add	r7, sp, #0
    8212:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    8214:	2103      	movs	r1, #3
    8216:	6878      	ldr	r0, [r7, #4]
    8218:	4b02      	ldr	r3, [pc, #8]	; (8224 <_sercom_i2c_send_stop+0x18>)
    821a:	4798      	blx	r3
}
    821c:	bf00      	nop
    821e:	3708      	adds	r7, #8
    8220:	46bd      	mov	sp, r7
    8222:	bd80      	pop	{r7, pc}
    8224:	00007e71 	.word	0x00007e71

00008228 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    8228:	b590      	push	{r4, r7, lr}
    822a:	b087      	sub	sp, #28
    822c:	af00      	add	r7, sp, #0
    822e:	60f8      	str	r0, [r7, #12]
    8230:	60b9      	str	r1, [r7, #8]
    8232:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8234:	68f8      	ldr	r0, [r7, #12]
    8236:	4b7d      	ldr	r3, [pc, #500]	; (842c <_sercom_i2c_sync_analyse_flags+0x204>)
    8238:	4798      	blx	r3
    823a:	4603      	mov	r3, r0
    823c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    823e:	68f8      	ldr	r0, [r7, #12]
    8240:	4b7b      	ldr	r3, [pc, #492]	; (8430 <_sercom_i2c_sync_analyse_flags+0x208>)
    8242:	4798      	blx	r3
    8244:	4603      	mov	r3, r0
    8246:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8248:	68bb      	ldr	r3, [r7, #8]
    824a:	f003 0301 	and.w	r3, r3, #1
    824e:	2b00      	cmp	r3, #0
    8250:	f000 8095 	beq.w	837e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8254:	8a7b      	ldrh	r3, [r7, #18]
    8256:	f003 0302 	and.w	r3, r3, #2
    825a:	2b00      	cmp	r3, #0
    825c:	d01d      	beq.n	829a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    825e:	68f8      	ldr	r0, [r7, #12]
    8260:	4b74      	ldr	r3, [pc, #464]	; (8434 <_sercom_i2c_sync_analyse_flags+0x20c>)
    8262:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    8264:	687b      	ldr	r3, [r7, #4]
    8266:	885b      	ldrh	r3, [r3, #2]
    8268:	b29b      	uxth	r3, r3
    826a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    826e:	b29a      	uxth	r2, r3
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    8274:	687b      	ldr	r3, [r7, #4]
    8276:	885b      	ldrh	r3, [r3, #2]
    8278:	b29b      	uxth	r3, r3
    827a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    827e:	b29a      	uxth	r2, r3
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8284:	8a7b      	ldrh	r3, [r7, #18]
    8286:	f003 0301 	and.w	r3, r3, #1
    828a:	2b00      	cmp	r3, #0
    828c:	d002      	beq.n	8294 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    828e:	f06f 0304 	mvn.w	r3, #4
    8292:	e0c6      	b.n	8422 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    8294:	f06f 0303 	mvn.w	r3, #3
    8298:	e0c3      	b.n	8422 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    829a:	8a7b      	ldrh	r3, [r7, #18]
    829c:	f003 0304 	and.w	r3, r3, #4
    82a0:	2b00      	cmp	r3, #0
    82a2:	d01f      	beq.n	82e4 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	685b      	ldr	r3, [r3, #4]
    82a8:	2b00      	cmp	r3, #0
    82aa:	dd07      	ble.n	82bc <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	885b      	ldrh	r3, [r3, #2]
    82b0:	b29b      	uxth	r3, r3
    82b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    82b6:	b29a      	uxth	r2, r3
    82b8:	687b      	ldr	r3, [r7, #4]
    82ba:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    82bc:	687b      	ldr	r3, [r7, #4]
    82be:	885b      	ldrh	r3, [r3, #2]
    82c0:	b29b      	uxth	r3, r3
    82c2:	b21b      	sxth	r3, r3
    82c4:	2b00      	cmp	r3, #0
    82c6:	da02      	bge.n	82ce <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    82c8:	68f8      	ldr	r0, [r7, #12]
    82ca:	4b5b      	ldr	r3, [pc, #364]	; (8438 <_sercom_i2c_sync_analyse_flags+0x210>)
    82cc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    82ce:	687b      	ldr	r3, [r7, #4]
    82d0:	885b      	ldrh	r3, [r3, #2]
    82d2:	b29b      	uxth	r3, r3
    82d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    82d8:	b29a      	uxth	r2, r3
    82da:	687b      	ldr	r3, [r7, #4]
    82dc:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    82de:	f06f 0301 	mvn.w	r3, #1
    82e2:	e09e      	b.n	8422 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    82e4:	687b      	ldr	r3, [r7, #4]
    82e6:	885b      	ldrh	r3, [r3, #2]
    82e8:	b29b      	uxth	r3, r3
    82ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    82ee:	2b00      	cmp	r3, #0
    82f0:	d01c      	beq.n	832c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    82f2:	687b      	ldr	r3, [r7, #4]
    82f4:	881b      	ldrh	r3, [r3, #0]
    82f6:	121b      	asrs	r3, r3, #8
    82f8:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    82fa:	f003 0406 	and.w	r4, r3, #6
    82fe:	68f8      	ldr	r0, [r7, #12]
    8300:	4b4e      	ldr	r3, [pc, #312]	; (843c <_sercom_i2c_sync_analyse_flags+0x214>)
    8302:	4798      	blx	r3
    8304:	4603      	mov	r3, r0
    8306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    830a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    830c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    8310:	4619      	mov	r1, r3
    8312:	68f8      	ldr	r0, [r7, #12]
    8314:	4b4a      	ldr	r3, [pc, #296]	; (8440 <_sercom_i2c_sync_analyse_flags+0x218>)
    8316:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	885b      	ldrh	r3, [r3, #2]
    831c:	b29b      	uxth	r3, r3
    831e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    8322:	b29a      	uxth	r2, r3
    8324:	687b      	ldr	r3, [r7, #4]
    8326:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8328:	2300      	movs	r3, #0
    832a:	e07a      	b.n	8422 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    832c:	687b      	ldr	r3, [r7, #4]
    832e:	685b      	ldr	r3, [r3, #4]
    8330:	2b00      	cmp	r3, #0
    8332:	d111      	bne.n	8358 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    8334:	687b      	ldr	r3, [r7, #4]
    8336:	885b      	ldrh	r3, [r3, #2]
    8338:	b29b      	uxth	r3, r3
    833a:	b21b      	sxth	r3, r3
    833c:	2b00      	cmp	r3, #0
    833e:	da02      	bge.n	8346 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    8340:	68f8      	ldr	r0, [r7, #12]
    8342:	4b3d      	ldr	r3, [pc, #244]	; (8438 <_sercom_i2c_sync_analyse_flags+0x210>)
    8344:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8346:	687b      	ldr	r3, [r7, #4]
    8348:	885b      	ldrh	r3, [r3, #2]
    834a:	b29b      	uxth	r3, r3
    834c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8350:	b29a      	uxth	r2, r3
    8352:	687b      	ldr	r3, [r7, #4]
    8354:	805a      	strh	r2, [r3, #2]
    8356:	e010      	b.n	837a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	689b      	ldr	r3, [r3, #8]
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	4619      	mov	r1, r3
    8360:	68f8      	ldr	r0, [r7, #12]
    8362:	4b38      	ldr	r3, [pc, #224]	; (8444 <_sercom_i2c_sync_analyse_flags+0x21c>)
    8364:	4798      	blx	r3
				msg->buffer++;
    8366:	687b      	ldr	r3, [r7, #4]
    8368:	689b      	ldr	r3, [r3, #8]
    836a:	1c5a      	adds	r2, r3, #1
    836c:	687b      	ldr	r3, [r7, #4]
    836e:	609a      	str	r2, [r3, #8]
				msg->len--;
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	685b      	ldr	r3, [r3, #4]
    8374:	1e5a      	subs	r2, r3, #1
    8376:	687b      	ldr	r3, [r7, #4]
    8378:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    837a:	2300      	movs	r3, #0
    837c:	e051      	b.n	8422 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    837e:	68bb      	ldr	r3, [r7, #8]
    8380:	f003 0302 	and.w	r3, r3, #2
    8384:	2b00      	cmp	r3, #0
    8386:	d04b      	beq.n	8420 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	685b      	ldr	r3, [r3, #4]
    838c:	2b00      	cmp	r3, #0
    838e:	d041      	beq.n	8414 <_sercom_i2c_sync_analyse_flags+0x1ec>
    8390:	8a7b      	ldrh	r3, [r7, #18]
    8392:	f003 0304 	and.w	r3, r3, #4
    8396:	2b00      	cmp	r3, #0
    8398:	d13c      	bne.n	8414 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	685b      	ldr	r3, [r3, #4]
    839e:	1e5a      	subs	r2, r3, #1
    83a0:	687b      	ldr	r3, [r7, #4]
    83a2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    83a4:	687b      	ldr	r3, [r7, #4]
    83a6:	685b      	ldr	r3, [r3, #4]
    83a8:	2b00      	cmp	r3, #0
    83aa:	d102      	bne.n	83b2 <_sercom_i2c_sync_analyse_flags+0x18a>
    83ac:	697b      	ldr	r3, [r7, #20]
    83ae:	2b00      	cmp	r3, #0
    83b0:	d006      	beq.n	83c0 <_sercom_i2c_sync_analyse_flags+0x198>
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	685b      	ldr	r3, [r3, #4]
    83b6:	2b01      	cmp	r3, #1
    83b8:	d105      	bne.n	83c6 <_sercom_i2c_sync_analyse_flags+0x19e>
    83ba:	697b      	ldr	r3, [r7, #20]
    83bc:	2b00      	cmp	r3, #0
    83be:	d002      	beq.n	83c6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    83c0:	68f8      	ldr	r0, [r7, #12]
    83c2:	4b21      	ldr	r3, [pc, #132]	; (8448 <_sercom_i2c_sync_analyse_flags+0x220>)
    83c4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	685b      	ldr	r3, [r3, #4]
    83ca:	2b00      	cmp	r3, #0
    83cc:	d113      	bne.n	83f6 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    83ce:	687b      	ldr	r3, [r7, #4]
    83d0:	885b      	ldrh	r3, [r3, #2]
    83d2:	b29b      	uxth	r3, r3
    83d4:	b21b      	sxth	r3, r3
    83d6:	2b00      	cmp	r3, #0
    83d8:	da05      	bge.n	83e6 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    83da:	68f8      	ldr	r0, [r7, #12]
    83dc:	4b1b      	ldr	r3, [pc, #108]	; (844c <_sercom_i2c_sync_analyse_flags+0x224>)
    83de:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    83e0:	68f8      	ldr	r0, [r7, #12]
    83e2:	4b15      	ldr	r3, [pc, #84]	; (8438 <_sercom_i2c_sync_analyse_flags+0x210>)
    83e4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    83e6:	687b      	ldr	r3, [r7, #4]
    83e8:	885b      	ldrh	r3, [r3, #2]
    83ea:	b29b      	uxth	r3, r3
    83ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    83f0:	b29a      	uxth	r2, r3
    83f2:	687b      	ldr	r3, [r7, #4]
    83f4:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    83f6:	687b      	ldr	r3, [r7, #4]
    83f8:	689c      	ldr	r4, [r3, #8]
    83fa:	1c62      	adds	r2, r4, #1
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	609a      	str	r2, [r3, #8]
    8400:	68f8      	ldr	r0, [r7, #12]
    8402:	4b13      	ldr	r3, [pc, #76]	; (8450 <_sercom_i2c_sync_analyse_flags+0x228>)
    8404:	4798      	blx	r3
    8406:	4603      	mov	r3, r0
    8408:	b2db      	uxtb	r3, r3
    840a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    840c:	68f8      	ldr	r0, [r7, #12]
    840e:	4b11      	ldr	r3, [pc, #68]	; (8454 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8410:	4798      	blx	r3
    8412:	e005      	b.n	8420 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8414:	68f8      	ldr	r0, [r7, #12]
    8416:	4b0f      	ldr	r3, [pc, #60]	; (8454 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8418:	4798      	blx	r3
			return I2C_NACK;
    841a:	f06f 0301 	mvn.w	r3, #1
    841e:	e000      	b.n	8422 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    8420:	2300      	movs	r3, #0
}
    8422:	4618      	mov	r0, r3
    8424:	371c      	adds	r7, #28
    8426:	46bd      	mov	sp, r7
    8428:	bd90      	pop	{r4, r7, pc}
    842a:	bf00      	nop
    842c:	00007c99 	.word	0x00007c99
    8430:	000080a9 	.word	0x000080a9
    8434:	00007a31 	.word	0x00007a31
    8438:	0000820d 	.word	0x0000820d
    843c:	00007f89 	.word	0x00007f89
    8440:	00007f65 	.word	0x00007f65
    8444:	00007fc5 	.word	0x00007fc5
    8448:	00007e21 	.word	0x00007e21
    844c:	00007df9 	.word	0x00007df9
    8450:	00007fe9 	.word	0x00007fe9
    8454:	00007a4b 	.word	0x00007a4b

00008458 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    8458:	b580      	push	{r7, lr}
    845a:	b086      	sub	sp, #24
    845c:	af00      	add	r7, sp, #0
    845e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	691b      	ldr	r3, [r3, #16]
    8464:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    8466:	6938      	ldr	r0, [r7, #16]
    8468:	4b37      	ldr	r3, [pc, #220]	; (8548 <_sercom_i2c_m_irq_handler+0xf0>)
    846a:	4798      	blx	r3
    846c:	4603      	mov	r3, r0
    846e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    8470:	2300      	movs	r3, #0
    8472:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	2b00      	cmp	r3, #0
    8478:	bf14      	ite	ne
    847a:	2301      	movne	r3, #1
    847c:	2300      	moveq	r3, #0
    847e:	b2db      	uxtb	r3, r3
    8480:	f240 422a 	movw	r2, #1066	; 0x42a
    8484:	4931      	ldr	r1, [pc, #196]	; (854c <_sercom_i2c_m_irq_handler+0xf4>)
    8486:	4618      	mov	r0, r3
    8488:	4b31      	ldr	r3, [pc, #196]	; (8550 <_sercom_i2c_m_irq_handler+0xf8>)
    848a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    848c:	687b      	ldr	r3, [r7, #4]
    848e:	691b      	ldr	r3, [r3, #16]
    8490:	2b00      	cmp	r3, #0
    8492:	bf14      	ite	ne
    8494:	2301      	movne	r3, #1
    8496:	2300      	moveq	r3, #0
    8498:	b2db      	uxtb	r3, r3
    849a:	f240 422b 	movw	r2, #1067	; 0x42b
    849e:	492b      	ldr	r1, [pc, #172]	; (854c <_sercom_i2c_m_irq_handler+0xf4>)
    84a0:	4618      	mov	r0, r3
    84a2:	4b2b      	ldr	r3, [pc, #172]	; (8550 <_sercom_i2c_m_irq_handler+0xf8>)
    84a4:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    84a6:	bf00      	nop
    84a8:	68fb      	ldr	r3, [r7, #12]
    84aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    84ae:	2b00      	cmp	r3, #0
    84b0:	d126      	bne.n	8500 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	461a      	mov	r2, r3
    84b6:	68f9      	ldr	r1, [r7, #12]
    84b8:	6938      	ldr	r0, [r7, #16]
    84ba:	4b26      	ldr	r3, [pc, #152]	; (8554 <_sercom_i2c_m_irq_handler+0xfc>)
    84bc:	4798      	blx	r3
    84be:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    84c0:	697b      	ldr	r3, [r7, #20]
    84c2:	2b00      	cmp	r3, #0
    84c4:	d11b      	bne.n	84fe <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    84c6:	68fb      	ldr	r3, [r7, #12]
    84c8:	f003 0301 	and.w	r3, r3, #1
    84cc:	2b00      	cmp	r3, #0
    84ce:	d008      	beq.n	84e2 <_sercom_i2c_m_irq_handler+0x8a>
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	699b      	ldr	r3, [r3, #24]
    84d4:	2b00      	cmp	r3, #0
    84d6:	d004      	beq.n	84e2 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    84d8:	687b      	ldr	r3, [r7, #4]
    84da:	699b      	ldr	r3, [r3, #24]
    84dc:	6878      	ldr	r0, [r7, #4]
    84de:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    84e0:	e02e      	b.n	8540 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    84e2:	68fb      	ldr	r3, [r7, #12]
    84e4:	f003 0302 	and.w	r3, r3, #2
    84e8:	2b00      	cmp	r3, #0
    84ea:	d029      	beq.n	8540 <_sercom_i2c_m_irq_handler+0xe8>
    84ec:	687b      	ldr	r3, [r7, #4]
    84ee:	69db      	ldr	r3, [r3, #28]
    84f0:	2b00      	cmp	r3, #0
    84f2:	d025      	beq.n	8540 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    84f4:	687b      	ldr	r3, [r7, #4]
    84f6:	69db      	ldr	r3, [r3, #28]
    84f8:	6878      	ldr	r0, [r7, #4]
    84fa:	4798      	blx	r3
		return;
    84fc:	e020      	b.n	8540 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    84fe:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	885b      	ldrh	r3, [r3, #2]
    8504:	b29b      	uxth	r3, r3
    8506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    850a:	b29a      	uxth	r2, r3
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	695b      	ldr	r3, [r3, #20]
    8514:	2b00      	cmp	r3, #0
    8516:	d014      	beq.n	8542 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    8518:	697b      	ldr	r3, [r7, #20]
    851a:	2b00      	cmp	r3, #0
    851c:	d005      	beq.n	852a <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    851e:	687b      	ldr	r3, [r7, #4]
    8520:	695b      	ldr	r3, [r3, #20]
    8522:	6979      	ldr	r1, [r7, #20]
    8524:	6878      	ldr	r0, [r7, #4]
    8526:	4798      	blx	r3
    8528:	e005      	b.n	8536 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	695b      	ldr	r3, [r3, #20]
    852e:	f06f 0104 	mvn.w	r1, #4
    8532:	6878      	ldr	r0, [r7, #4]
    8534:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    8536:	2180      	movs	r1, #128	; 0x80
    8538:	6938      	ldr	r0, [r7, #16]
    853a:	4b07      	ldr	r3, [pc, #28]	; (8558 <_sercom_i2c_m_irq_handler+0x100>)
    853c:	4798      	blx	r3
    853e:	e000      	b.n	8542 <_sercom_i2c_m_irq_handler+0xea>
		return;
    8540:	bf00      	nop
	}
}
    8542:	3718      	adds	r7, #24
    8544:	46bd      	mov	sp, r7
    8546:	bd80      	pop	{r7, pc}
    8548:	00007a65 	.word	0x00007a65
    854c:	00011c04 	.word	0x00011c04
    8550:	00005545 	.word	0x00005545
    8554:	00008229 	.word	0x00008229
    8558:	00007a7f 	.word	0x00007a7f

0000855c <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    855c:	b580      	push	{r7, lr}
    855e:	b082      	sub	sp, #8
    8560:	af00      	add	r7, sp, #0
    8562:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    8564:	687b      	ldr	r3, [r7, #4]
    8566:	2b00      	cmp	r3, #0
    8568:	bf14      	ite	ne
    856a:	2301      	movne	r3, #1
    856c:	2300      	moveq	r3, #0
    856e:	b2db      	uxtb	r3, r3
    8570:	f44f 628a 	mov.w	r2, #1104	; 0x450
    8574:	4906      	ldr	r1, [pc, #24]	; (8590 <_i2c_m_async_enable+0x34>)
    8576:	4618      	mov	r0, r3
    8578:	4b06      	ldr	r3, [pc, #24]	; (8594 <_i2c_m_async_enable+0x38>)
    857a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	691b      	ldr	r3, [r3, #16]
    8580:	4618      	mov	r0, r3
    8582:	4b05      	ldr	r3, [pc, #20]	; (8598 <_i2c_m_async_enable+0x3c>)
    8584:	4798      	blx	r3
    8586:	4603      	mov	r3, r0
}
    8588:	4618      	mov	r0, r3
    858a:	3708      	adds	r7, #8
    858c:	46bd      	mov	sp, r7
    858e:	bd80      	pop	{r7, pc}
    8590:	00011c04 	.word	0x00011c04
    8594:	00005545 	.word	0x00005545
    8598:	000088ed 	.word	0x000088ed

0000859c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    859c:	b580      	push	{r7, lr}
    859e:	b082      	sub	sp, #8
    85a0:	af00      	add	r7, sp, #0
    85a2:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    85a4:	6878      	ldr	r0, [r7, #4]
    85a6:	4b05      	ldr	r3, [pc, #20]	; (85bc <_sercom_get_irq_num+0x20>)
    85a8:	4798      	blx	r3
    85aa:	4603      	mov	r3, r0
    85ac:	009b      	lsls	r3, r3, #2
    85ae:	b2db      	uxtb	r3, r3
    85b0:	332e      	adds	r3, #46	; 0x2e
    85b2:	b2db      	uxtb	r3, r3
}
    85b4:	4618      	mov	r0, r3
    85b6:	3708      	adds	r7, #8
    85b8:	46bd      	mov	sp, r7
    85ba:	bd80      	pop	{r7, pc}
    85bc:	000080f5 	.word	0x000080f5

000085c0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    85c0:	b580      	push	{r7, lr}
    85c2:	b086      	sub	sp, #24
    85c4:	af00      	add	r7, sp, #0
    85c6:	6078      	str	r0, [r7, #4]
    85c8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    85ca:	687b      	ldr	r3, [r7, #4]
    85cc:	2b00      	cmp	r3, #0
    85ce:	bf14      	ite	ne
    85d0:	2301      	movne	r3, #1
    85d2:	2300      	moveq	r3, #0
    85d4:	b2db      	uxtb	r3, r3
    85d6:	f240 429e 	movw	r2, #1182	; 0x49e
    85da:	491d      	ldr	r1, [pc, #116]	; (8650 <_i2c_m_async_init+0x90>)
    85dc:	4618      	mov	r0, r3
    85de:	4b1d      	ldr	r3, [pc, #116]	; (8654 <_i2c_m_async_init+0x94>)
    85e0:	4798      	blx	r3

	i2c_dev->hw = hw;
    85e2:	687b      	ldr	r3, [r7, #4]
    85e4:	683a      	ldr	r2, [r7, #0]
    85e6:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    85e8:	687b      	ldr	r3, [r7, #4]
    85ea:	6839      	ldr	r1, [r7, #0]
    85ec:	4618      	mov	r0, r3
    85ee:	4b1a      	ldr	r3, [pc, #104]	; (8658 <_i2c_m_async_init+0x98>)
    85f0:	4798      	blx	r3
    85f2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    85f4:	68fb      	ldr	r3, [r7, #12]
    85f6:	2b00      	cmp	r3, #0
    85f8:	d001      	beq.n	85fe <_i2c_m_async_init+0x3e>
		return init_status;
    85fa:	68fb      	ldr	r3, [r7, #12]
    85fc:	e024      	b.n	8648 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    85fe:	6879      	ldr	r1, [r7, #4]
    8600:	6838      	ldr	r0, [r7, #0]
    8602:	4b16      	ldr	r3, [pc, #88]	; (865c <_i2c_m_async_init+0x9c>)
    8604:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    8606:	6838      	ldr	r0, [r7, #0]
    8608:	4b15      	ldr	r3, [pc, #84]	; (8660 <_i2c_m_async_init+0xa0>)
    860a:	4798      	blx	r3
    860c:	4603      	mov	r3, r0
    860e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8610:	2300      	movs	r3, #0
    8612:	613b      	str	r3, [r7, #16]
    8614:	e014      	b.n	8640 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    8616:	7dfb      	ldrb	r3, [r7, #23]
    8618:	b21b      	sxth	r3, r3
    861a:	4618      	mov	r0, r3
    861c:	4b11      	ldr	r3, [pc, #68]	; (8664 <_i2c_m_async_init+0xa4>)
    861e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    8620:	7dfb      	ldrb	r3, [r7, #23]
    8622:	b21b      	sxth	r3, r3
    8624:	4618      	mov	r0, r3
    8626:	4b10      	ldr	r3, [pc, #64]	; (8668 <_i2c_m_async_init+0xa8>)
    8628:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    862a:	7dfb      	ldrb	r3, [r7, #23]
    862c:	b21b      	sxth	r3, r3
    862e:	4618      	mov	r0, r3
    8630:	4b0e      	ldr	r3, [pc, #56]	; (866c <_i2c_m_async_init+0xac>)
    8632:	4798      	blx	r3
		irq++;
    8634:	7dfb      	ldrb	r3, [r7, #23]
    8636:	3301      	adds	r3, #1
    8638:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    863a:	693b      	ldr	r3, [r7, #16]
    863c:	3301      	adds	r3, #1
    863e:	613b      	str	r3, [r7, #16]
    8640:	693b      	ldr	r3, [r7, #16]
    8642:	2b03      	cmp	r3, #3
    8644:	d9e7      	bls.n	8616 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    8646:	2300      	movs	r3, #0
}
    8648:	4618      	mov	r0, r3
    864a:	3718      	adds	r7, #24
    864c:	46bd      	mov	sp, r7
    864e:	bd80      	pop	{r7, pc}
    8650:	00011c04 	.word	0x00011c04
    8654:	00005545 	.word	0x00005545
    8658:	00008979 	.word	0x00008979
    865c:	00008151 	.word	0x00008151
    8660:	0000859d 	.word	0x0000859d
    8664:	00007919 	.word	0x00007919
    8668:	0000795d 	.word	0x0000795d
    866c:	000078dd 	.word	0x000078dd

00008670 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    8670:	b590      	push	{r4, r7, lr}
    8672:	b087      	sub	sp, #28
    8674:	af00      	add	r7, sp, #0
    8676:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    8678:	687b      	ldr	r3, [r7, #4]
    867a:	691b      	ldr	r3, [r3, #16]
    867c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    867e:	687b      	ldr	r3, [r7, #4]
    8680:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8682:	6978      	ldr	r0, [r7, #20]
    8684:	4b33      	ldr	r3, [pc, #204]	; (8754 <_sercom_i2c_send_address+0xe4>)
    8686:	4798      	blx	r3
    8688:	4603      	mov	r3, r0
    868a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	2b00      	cmp	r3, #0
    8690:	bf14      	ite	ne
    8692:	2301      	movne	r3, #1
    8694:	2300      	moveq	r3, #0
    8696:	b2db      	uxtb	r3, r3
    8698:	f240 42cc 	movw	r2, #1228	; 0x4cc
    869c:	492e      	ldr	r1, [pc, #184]	; (8758 <_sercom_i2c_send_address+0xe8>)
    869e:	4618      	mov	r0, r3
    86a0:	4b2e      	ldr	r3, [pc, #184]	; (875c <_sercom_i2c_send_address+0xec>)
    86a2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    86a4:	693b      	ldr	r3, [r7, #16]
    86a6:	685b      	ldr	r3, [r3, #4]
    86a8:	2b01      	cmp	r3, #1
    86aa:	d106      	bne.n	86ba <_sercom_i2c_send_address+0x4a>
    86ac:	68fb      	ldr	r3, [r7, #12]
    86ae:	2b00      	cmp	r3, #0
    86b0:	d003      	beq.n	86ba <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    86b2:	6978      	ldr	r0, [r7, #20]
    86b4:	4b2a      	ldr	r3, [pc, #168]	; (8760 <_sercom_i2c_send_address+0xf0>)
    86b6:	4798      	blx	r3
    86b8:	e002      	b.n	86c0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    86ba:	6978      	ldr	r0, [r7, #20]
    86bc:	4b29      	ldr	r3, [pc, #164]	; (8764 <_sercom_i2c_send_address+0xf4>)
    86be:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    86c0:	693b      	ldr	r3, [r7, #16]
    86c2:	881b      	ldrh	r3, [r3, #0]
    86c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    86c8:	2b00      	cmp	r3, #0
    86ca:	d022      	beq.n	8712 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    86cc:	693b      	ldr	r3, [r7, #16]
    86ce:	885b      	ldrh	r3, [r3, #2]
    86d0:	b29b      	uxth	r3, r3
    86d2:	f003 0301 	and.w	r3, r3, #1
    86d6:	2b00      	cmp	r3, #0
    86d8:	d007      	beq.n	86ea <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    86da:	693b      	ldr	r3, [r7, #16]
    86dc:	885b      	ldrh	r3, [r3, #2]
    86de:	b29b      	uxth	r3, r3
    86e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    86e4:	b29a      	uxth	r2, r3
    86e6:	693b      	ldr	r3, [r7, #16]
    86e8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    86ea:	693b      	ldr	r3, [r7, #16]
    86ec:	881b      	ldrh	r3, [r3, #0]
    86ee:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    86f0:	f240 74fe 	movw	r4, #2046	; 0x7fe
    86f4:	401c      	ands	r4, r3
    86f6:	6978      	ldr	r0, [r7, #20]
    86f8:	4b1b      	ldr	r3, [pc, #108]	; (8768 <_sercom_i2c_send_address+0xf8>)
    86fa:	4798      	blx	r3
    86fc:	4603      	mov	r3, r0
    86fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8702:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    8704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8708:	4619      	mov	r1, r3
    870a:	6978      	ldr	r0, [r7, #20]
    870c:	4b17      	ldr	r3, [pc, #92]	; (876c <_sercom_i2c_send_address+0xfc>)
    870e:	4798      	blx	r3
    8710:	e01a      	b.n	8748 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    8712:	693b      	ldr	r3, [r7, #16]
    8714:	881b      	ldrh	r3, [r3, #0]
    8716:	005b      	lsls	r3, r3, #1
    8718:	b2db      	uxtb	r3, r3
    871a:	693a      	ldr	r2, [r7, #16]
    871c:	8852      	ldrh	r2, [r2, #2]
    871e:	b292      	uxth	r2, r2
    8720:	f002 0201 	and.w	r2, r2, #1
    8724:	2a00      	cmp	r2, #0
    8726:	bf14      	ite	ne
    8728:	2201      	movne	r2, #1
    872a:	2200      	moveq	r2, #0
    872c:	b2d2      	uxtb	r2, r2
    872e:	4313      	orrs	r3, r2
    8730:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8732:	6978      	ldr	r0, [r7, #20]
    8734:	4b0c      	ldr	r3, [pc, #48]	; (8768 <_sercom_i2c_send_address+0xf8>)
    8736:	4798      	blx	r3
    8738:	4603      	mov	r3, r0
    873a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    873e:	4323      	orrs	r3, r4
    8740:	4619      	mov	r1, r3
    8742:	6978      	ldr	r0, [r7, #20]
    8744:	4b09      	ldr	r3, [pc, #36]	; (876c <_sercom_i2c_send_address+0xfc>)
    8746:	4798      	blx	r3
	}

	return ERR_NONE;
    8748:	2300      	movs	r3, #0
}
    874a:	4618      	mov	r0, r3
    874c:	371c      	adds	r7, #28
    874e:	46bd      	mov	sp, r7
    8750:	bd90      	pop	{r4, r7, pc}
    8752:	bf00      	nop
    8754:	00007c99 	.word	0x00007c99
    8758:	00011c04 	.word	0x00011c04
    875c:	00005545 	.word	0x00005545
    8760:	00007e21 	.word	0x00007e21
    8764:	00007e49 	.word	0x00007e49
    8768:	00007f89 	.word	0x00007f89
    876c:	00007f65 	.word	0x00007f65

00008770 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    8770:	b580      	push	{r7, lr}
    8772:	b084      	sub	sp, #16
    8774:	af00      	add	r7, sp, #0
    8776:	6078      	str	r0, [r7, #4]
    8778:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	2b00      	cmp	r3, #0
    877e:	bf14      	ite	ne
    8780:	2301      	movne	r3, #1
    8782:	2300      	moveq	r3, #0
    8784:	b2db      	uxtb	r3, r3
    8786:	f240 42f4 	movw	r2, #1268	; 0x4f4
    878a:	492a      	ldr	r1, [pc, #168]	; (8834 <_i2c_m_async_transfer+0xc4>)
    878c:	4618      	mov	r0, r3
    878e:	4b2a      	ldr	r3, [pc, #168]	; (8838 <_i2c_m_async_transfer+0xc8>)
    8790:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8792:	687b      	ldr	r3, [r7, #4]
    8794:	691b      	ldr	r3, [r3, #16]
    8796:	2b00      	cmp	r3, #0
    8798:	bf14      	ite	ne
    879a:	2301      	movne	r3, #1
    879c:	2300      	moveq	r3, #0
    879e:	b2db      	uxtb	r3, r3
    87a0:	f240 42f5 	movw	r2, #1269	; 0x4f5
    87a4:	4923      	ldr	r1, [pc, #140]	; (8834 <_i2c_m_async_transfer+0xc4>)
    87a6:	4618      	mov	r0, r3
    87a8:	4b23      	ldr	r3, [pc, #140]	; (8838 <_i2c_m_async_transfer+0xc8>)
    87aa:	4798      	blx	r3
	ASSERT(msg);
    87ac:	683b      	ldr	r3, [r7, #0]
    87ae:	2b00      	cmp	r3, #0
    87b0:	bf14      	ite	ne
    87b2:	2301      	movne	r3, #1
    87b4:	2300      	moveq	r3, #0
    87b6:	b2db      	uxtb	r3, r3
    87b8:	f240 42f6 	movw	r2, #1270	; 0x4f6
    87bc:	491d      	ldr	r1, [pc, #116]	; (8834 <_i2c_m_async_transfer+0xc4>)
    87be:	4618      	mov	r0, r3
    87c0:	4b1d      	ldr	r3, [pc, #116]	; (8838 <_i2c_m_async_transfer+0xc8>)
    87c2:	4798      	blx	r3

	if (msg->len == 0) {
    87c4:	683b      	ldr	r3, [r7, #0]
    87c6:	685b      	ldr	r3, [r3, #4]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d101      	bne.n	87d0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    87cc:	2300      	movs	r3, #0
    87ce:	e02d      	b.n	882c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    87d0:	687b      	ldr	r3, [r7, #4]
    87d2:	885b      	ldrh	r3, [r3, #2]
    87d4:	b29b      	uxth	r3, r3
    87d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    87da:	2b00      	cmp	r3, #0
    87dc:	d002      	beq.n	87e4 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    87de:	f06f 0303 	mvn.w	r3, #3
    87e2:	e023      	b.n	882c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    87e4:	683b      	ldr	r3, [r7, #0]
    87e6:	885b      	ldrh	r3, [r3, #2]
    87e8:	b29b      	uxth	r3, r3
    87ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    87ee:	b29a      	uxth	r2, r3
    87f0:	683b      	ldr	r3, [r7, #0]
    87f2:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	683a      	ldr	r2, [r7, #0]
    87f8:	ca07      	ldmia	r2, {r0, r1, r2}
    87fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    87fe:	687b      	ldr	r3, [r7, #4]
    8800:	691b      	ldr	r3, [r3, #16]
    8802:	4618      	mov	r0, r3
    8804:	4b0d      	ldr	r3, [pc, #52]	; (883c <_i2c_m_async_transfer+0xcc>)
    8806:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    8808:	6878      	ldr	r0, [r7, #4]
    880a:	4b0d      	ldr	r3, [pc, #52]	; (8840 <_i2c_m_async_transfer+0xd0>)
    880c:	4798      	blx	r3
    880e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    8810:	68fb      	ldr	r3, [r7, #12]
    8812:	2b00      	cmp	r3, #0
    8814:	d009      	beq.n	882a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8816:	687b      	ldr	r3, [r7, #4]
    8818:	885b      	ldrh	r3, [r3, #2]
    881a:	b29b      	uxth	r3, r3
    881c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8820:	b29a      	uxth	r2, r3
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	805a      	strh	r2, [r3, #2]

		return ret;
    8826:	68fb      	ldr	r3, [r7, #12]
    8828:	e000      	b.n	882c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    882a:	2300      	movs	r3, #0
}
    882c:	4618      	mov	r0, r3
    882e:	3710      	adds	r7, #16
    8830:	46bd      	mov	sp, r7
    8832:	bd80      	pop	{r7, pc}
    8834:	00011c04 	.word	0x00011c04
    8838:	00005545 	.word	0x00005545
    883c:	00007dd1 	.word	0x00007dd1
    8840:	00008671 	.word	0x00008671

00008844 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    8844:	b480      	push	{r7}
    8846:	b085      	sub	sp, #20
    8848:	af00      	add	r7, sp, #0
    884a:	60f8      	str	r0, [r7, #12]
    884c:	460b      	mov	r3, r1
    884e:	607a      	str	r2, [r7, #4]
    8850:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    8852:	7afb      	ldrb	r3, [r7, #11]
    8854:	2b01      	cmp	r3, #1
    8856:	d008      	beq.n	886a <_i2c_m_async_register_callback+0x26>
    8858:	2b02      	cmp	r3, #2
    885a:	d00a      	beq.n	8872 <_i2c_m_async_register_callback+0x2e>
    885c:	2b00      	cmp	r3, #0
    885e:	d000      	beq.n	8862 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    8860:	e00b      	b.n	887a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    8862:	68fb      	ldr	r3, [r7, #12]
    8864:	687a      	ldr	r2, [r7, #4]
    8866:	615a      	str	r2, [r3, #20]
		break;
    8868:	e007      	b.n	887a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    886a:	68fb      	ldr	r3, [r7, #12]
    886c:	687a      	ldr	r2, [r7, #4]
    886e:	619a      	str	r2, [r3, #24]
		break;
    8870:	e003      	b.n	887a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    8872:	68fb      	ldr	r3, [r7, #12]
    8874:	687a      	ldr	r2, [r7, #4]
    8876:	61da      	str	r2, [r3, #28]
		break;
    8878:	bf00      	nop
	}

	return ERR_NONE;
    887a:	2300      	movs	r3, #0
}
    887c:	4618      	mov	r0, r3
    887e:	3714      	adds	r7, #20
    8880:	46bd      	mov	sp, r7
    8882:	f85d 7b04 	ldr.w	r7, [sp], #4
    8886:	4770      	bx	lr

00008888 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    8888:	b580      	push	{r7, lr}
    888a:	b082      	sub	sp, #8
    888c:	af00      	add	r7, sp, #0
    888e:	6078      	str	r0, [r7, #4]
    8890:	460b      	mov	r3, r1
    8892:	70fb      	strb	r3, [r7, #3]
    8894:	4613      	mov	r3, r2
    8896:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    8898:	78fb      	ldrb	r3, [r7, #3]
    889a:	2b01      	cmp	r3, #1
    889c:	d002      	beq.n	88a4 <_i2c_m_async_set_irq_state+0x1c>
    889e:	78fb      	ldrb	r3, [r7, #3]
    88a0:	2b02      	cmp	r3, #2
    88a2:	d10e      	bne.n	88c2 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    88a4:	687b      	ldr	r3, [r7, #4]
    88a6:	691b      	ldr	r3, [r3, #16]
    88a8:	78ba      	ldrb	r2, [r7, #2]
    88aa:	4611      	mov	r1, r2
    88ac:	4618      	mov	r0, r3
    88ae:	4b0c      	ldr	r3, [pc, #48]	; (88e0 <_i2c_m_async_set_irq_state+0x58>)
    88b0:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    88b2:	687b      	ldr	r3, [r7, #4]
    88b4:	691b      	ldr	r3, [r3, #16]
    88b6:	78ba      	ldrb	r2, [r7, #2]
    88b8:	4611      	mov	r1, r2
    88ba:	4618      	mov	r0, r3
    88bc:	4b09      	ldr	r3, [pc, #36]	; (88e4 <_i2c_m_async_set_irq_state+0x5c>)
    88be:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    88c0:	e009      	b.n	88d6 <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    88c2:	78fb      	ldrb	r3, [r7, #3]
    88c4:	2b00      	cmp	r3, #0
    88c6:	d106      	bne.n	88d6 <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	691b      	ldr	r3, [r3, #16]
    88cc:	78ba      	ldrb	r2, [r7, #2]
    88ce:	4611      	mov	r1, r2
    88d0:	4618      	mov	r0, r3
    88d2:	4b05      	ldr	r3, [pc, #20]	; (88e8 <_i2c_m_async_set_irq_state+0x60>)
    88d4:	4798      	blx	r3
}
    88d6:	bf00      	nop
    88d8:	3708      	adds	r7, #8
    88da:	46bd      	mov	sp, r7
    88dc:	bd80      	pop	{r7, pc}
    88de:	bf00      	nop
    88e0:	00007b2f 	.word	0x00007b2f
    88e4:	00007afd 	.word	0x00007afd
    88e8:	00007b61 	.word	0x00007b61

000088ec <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    88ec:	b580      	push	{r7, lr}
    88ee:	b084      	sub	sp, #16
    88f0:	af00      	add	r7, sp, #0
    88f2:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    88f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    88f8:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    88fa:	2304      	movs	r3, #4
    88fc:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    88fe:	687b      	ldr	r3, [r7, #4]
    8900:	2b00      	cmp	r3, #0
    8902:	bf14      	ite	ne
    8904:	2301      	movne	r3, #1
    8906:	2300      	moveq	r3, #0
    8908:	b2db      	uxtb	r3, r3
    890a:	f240 6241 	movw	r2, #1601	; 0x641
    890e:	4915      	ldr	r1, [pc, #84]	; (8964 <_i2c_m_enable_implementation+0x78>)
    8910:	4618      	mov	r0, r3
    8912:	4b15      	ldr	r3, [pc, #84]	; (8968 <_i2c_m_enable_implementation+0x7c>)
    8914:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    8916:	6878      	ldr	r0, [r7, #4]
    8918:	4b14      	ldr	r3, [pc, #80]	; (896c <_i2c_m_enable_implementation+0x80>)
    891a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    891c:	e016      	b.n	894c <_i2c_m_enable_implementation+0x60>
		timeout--;
    891e:	68fb      	ldr	r3, [r7, #12]
    8920:	3b01      	subs	r3, #1
    8922:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    8924:	68fb      	ldr	r3, [r7, #12]
    8926:	2b00      	cmp	r3, #0
    8928:	dc10      	bgt.n	894c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    892a:	68bb      	ldr	r3, [r7, #8]
    892c:	3b01      	subs	r3, #1
    892e:	60bb      	str	r3, [r7, #8]
    8930:	68bb      	ldr	r3, [r7, #8]
    8932:	2b00      	cmp	r3, #0
    8934:	d007      	beq.n	8946 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    8936:	f64f 73ff 	movw	r3, #65535	; 0xffff
    893a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    893c:	2110      	movs	r1, #16
    893e:	6878      	ldr	r0, [r7, #4]
    8940:	4b0b      	ldr	r3, [pc, #44]	; (8970 <_i2c_m_enable_implementation+0x84>)
    8942:	4798      	blx	r3
    8944:	e002      	b.n	894c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    8946:	f06f 0305 	mvn.w	r3, #5
    894a:	e006      	b.n	895a <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    894c:	6878      	ldr	r0, [r7, #4]
    894e:	4b09      	ldr	r3, [pc, #36]	; (8974 <_i2c_m_enable_implementation+0x88>)
    8950:	4798      	blx	r3
    8952:	4603      	mov	r3, r0
    8954:	2b01      	cmp	r3, #1
    8956:	d1e2      	bne.n	891e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    8958:	2300      	movs	r3, #0
}
    895a:	4618      	mov	r0, r3
    895c:	3710      	adds	r7, #16
    895e:	46bd      	mov	sp, r7
    8960:	bd80      	pop	{r7, pc}
    8962:	bf00      	nop
    8964:	00011c04 	.word	0x00011c04
    8968:	00005545 	.word	0x00005545
    896c:	00007c49 	.word	0x00007c49
    8970:	000080cd 	.word	0x000080cd
    8974:	0000807d 	.word	0x0000807d

00008978 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8978:	b580      	push	{r7, lr}
    897a:	b084      	sub	sp, #16
    897c:	af00      	add	r7, sp, #0
    897e:	6078      	str	r0, [r7, #4]
    8980:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    8982:	6838      	ldr	r0, [r7, #0]
    8984:	4b42      	ldr	r3, [pc, #264]	; (8a90 <_i2c_m_sync_init_impl+0x118>)
    8986:	4798      	blx	r3
    8988:	4603      	mov	r3, r0
    898a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    898c:	2101      	movs	r1, #1
    898e:	6838      	ldr	r0, [r7, #0]
    8990:	4b40      	ldr	r3, [pc, #256]	; (8a94 <_i2c_m_sync_init_impl+0x11c>)
    8992:	4798      	blx	r3
    8994:	4603      	mov	r3, r0
    8996:	f083 0301 	eor.w	r3, r3, #1
    899a:	b2db      	uxtb	r3, r3
    899c:	2b00      	cmp	r3, #0
    899e:	d020      	beq.n	89e2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    89a0:	7bfa      	ldrb	r2, [r7, #15]
    89a2:	493d      	ldr	r1, [pc, #244]	; (8a98 <_i2c_m_sync_init_impl+0x120>)
    89a4:	4613      	mov	r3, r2
    89a6:	005b      	lsls	r3, r3, #1
    89a8:	4413      	add	r3, r2
    89aa:	00db      	lsls	r3, r3, #3
    89ac:	440b      	add	r3, r1
    89ae:	3304      	adds	r3, #4
    89b0:	681b      	ldr	r3, [r3, #0]
    89b2:	f003 031c 	and.w	r3, r3, #28
    89b6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    89b8:	2102      	movs	r1, #2
    89ba:	6838      	ldr	r0, [r7, #0]
    89bc:	4b37      	ldr	r3, [pc, #220]	; (8a9c <_i2c_m_sync_init_impl+0x124>)
    89be:	4798      	blx	r3
    89c0:	4603      	mov	r3, r0
    89c2:	2b00      	cmp	r3, #0
    89c4:	d006      	beq.n	89d4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    89c6:	6838      	ldr	r0, [r7, #0]
    89c8:	4b35      	ldr	r3, [pc, #212]	; (8aa0 <_i2c_m_sync_init_impl+0x128>)
    89ca:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    89cc:	2102      	movs	r1, #2
    89ce:	6838      	ldr	r0, [r7, #0]
    89d0:	4b34      	ldr	r3, [pc, #208]	; (8aa4 <_i2c_m_sync_init_impl+0x12c>)
    89d2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    89d4:	68bb      	ldr	r3, [r7, #8]
    89d6:	f043 0301 	orr.w	r3, r3, #1
    89da:	4619      	mov	r1, r3
    89dc:	6838      	ldr	r0, [r7, #0]
    89de:	4b32      	ldr	r3, [pc, #200]	; (8aa8 <_i2c_m_sync_init_impl+0x130>)
    89e0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    89e2:	2101      	movs	r1, #1
    89e4:	6838      	ldr	r0, [r7, #0]
    89e6:	4b2f      	ldr	r3, [pc, #188]	; (8aa4 <_i2c_m_sync_init_impl+0x12c>)
    89e8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    89ea:	7bfa      	ldrb	r2, [r7, #15]
    89ec:	492a      	ldr	r1, [pc, #168]	; (8a98 <_i2c_m_sync_init_impl+0x120>)
    89ee:	4613      	mov	r3, r2
    89f0:	005b      	lsls	r3, r3, #1
    89f2:	4413      	add	r3, r2
    89f4:	00db      	lsls	r3, r3, #3
    89f6:	440b      	add	r3, r1
    89f8:	3304      	adds	r3, #4
    89fa:	681b      	ldr	r3, [r3, #0]
    89fc:	4619      	mov	r1, r3
    89fe:	6838      	ldr	r0, [r7, #0]
    8a00:	4b29      	ldr	r3, [pc, #164]	; (8aa8 <_i2c_m_sync_init_impl+0x130>)
    8a02:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    8a04:	7bfa      	ldrb	r2, [r7, #15]
    8a06:	4924      	ldr	r1, [pc, #144]	; (8a98 <_i2c_m_sync_init_impl+0x120>)
    8a08:	4613      	mov	r3, r2
    8a0a:	005b      	lsls	r3, r3, #1
    8a0c:	4413      	add	r3, r2
    8a0e:	00db      	lsls	r3, r3, #3
    8a10:	440b      	add	r3, r1
    8a12:	3308      	adds	r3, #8
    8a14:	681b      	ldr	r3, [r3, #0]
    8a16:	4619      	mov	r1, r3
    8a18:	6838      	ldr	r0, [r7, #0]
    8a1a:	4b24      	ldr	r3, [pc, #144]	; (8aac <_i2c_m_sync_init_impl+0x134>)
    8a1c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    8a1e:	7bfa      	ldrb	r2, [r7, #15]
    8a20:	491d      	ldr	r1, [pc, #116]	; (8a98 <_i2c_m_sync_init_impl+0x120>)
    8a22:	4613      	mov	r3, r2
    8a24:	005b      	lsls	r3, r3, #1
    8a26:	4413      	add	r3, r2
    8a28:	00db      	lsls	r3, r3, #3
    8a2a:	440b      	add	r3, r1
    8a2c:	330c      	adds	r3, #12
    8a2e:	681b      	ldr	r3, [r3, #0]
    8a30:	4619      	mov	r1, r3
    8a32:	6838      	ldr	r0, [r7, #0]
    8a34:	4b1e      	ldr	r3, [pc, #120]	; (8ab0 <_i2c_m_sync_init_impl+0x138>)
    8a36:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    8a38:	7bfa      	ldrb	r2, [r7, #15]
    8a3a:	4917      	ldr	r1, [pc, #92]	; (8a98 <_i2c_m_sync_init_impl+0x120>)
    8a3c:	4613      	mov	r3, r2
    8a3e:	005b      	lsls	r3, r3, #1
    8a40:	4413      	add	r3, r2
    8a42:	00db      	lsls	r3, r3, #3
    8a44:	440b      	add	r3, r1
    8a46:	3304      	adds	r3, #4
    8a48:	681b      	ldr	r3, [r3, #0]
    8a4a:	0e1b      	lsrs	r3, r3, #24
    8a4c:	b29b      	uxth	r3, r3
    8a4e:	f003 0303 	and.w	r3, r3, #3
    8a52:	b29a      	uxth	r2, r3
    8a54:	687b      	ldr	r3, [r7, #4]
    8a56:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	899b      	ldrh	r3, [r3, #12]
    8a5c:	2b01      	cmp	r3, #1
    8a5e:	bf8c      	ite	hi
    8a60:	2301      	movhi	r3, #1
    8a62:	2300      	movls	r3, #0
    8a64:	b2db      	uxtb	r3, r3
    8a66:	4619      	mov	r1, r3
    8a68:	6838      	ldr	r0, [r7, #0]
    8a6a:	4b12      	ldr	r3, [pc, #72]	; (8ab4 <_i2c_m_sync_init_impl+0x13c>)
    8a6c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    8a6e:	7bfa      	ldrb	r2, [r7, #15]
    8a70:	4909      	ldr	r1, [pc, #36]	; (8a98 <_i2c_m_sync_init_impl+0x120>)
    8a72:	4613      	mov	r3, r2
    8a74:	005b      	lsls	r3, r3, #1
    8a76:	4413      	add	r3, r2
    8a78:	00db      	lsls	r3, r3, #3
    8a7a:	440b      	add	r3, r1
    8a7c:	3312      	adds	r3, #18
    8a7e:	881a      	ldrh	r2, [r3, #0]
    8a80:	687b      	ldr	r3, [r7, #4]
    8a82:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    8a84:	2300      	movs	r3, #0
}
    8a86:	4618      	mov	r0, r3
    8a88:	3710      	adds	r7, #16
    8a8a:	46bd      	mov	sp, r7
    8a8c:	bd80      	pop	{r7, pc}
    8a8e:	bf00      	nop
    8a90:	000081a5 	.word	0x000081a5
    8a94:	000079bd 	.word	0x000079bd
    8a98:	20000018 	.word	0x20000018
    8a9c:	00007cc9 	.word	0x00007cc9
    8aa0:	00007c71 	.word	0x00007c71
    8aa4:	00007999 	.word	0x00007999
    8aa8:	00007cf9 	.word	0x00007cf9
    8aac:	00007ea1 	.word	0x00007ea1
    8ab0:	00007ee9 	.word	0x00007ee9
    8ab4:	00007f25 	.word	0x00007f25

00008ab8 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8ab8:	b580      	push	{r7, lr}
    8aba:	b082      	sub	sp, #8
    8abc:	af00      	add	r7, sp, #0
    8abe:	6078      	str	r0, [r7, #4]
    8ac0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8ac2:	687b      	ldr	r3, [r7, #4]
    8ac4:	2b00      	cmp	r3, #0
    8ac6:	d004      	beq.n	8ad2 <_spi_load_regs_master+0x1a>
    8ac8:	683b      	ldr	r3, [r7, #0]
    8aca:	2b00      	cmp	r3, #0
    8acc:	d001      	beq.n	8ad2 <_spi_load_regs_master+0x1a>
    8ace:	2301      	movs	r3, #1
    8ad0:	e000      	b.n	8ad4 <_spi_load_regs_master+0x1c>
    8ad2:	2300      	movs	r3, #0
    8ad4:	f003 0301 	and.w	r3, r3, #1
    8ad8:	b2db      	uxtb	r3, r3
    8ada:	f640 1242 	movw	r2, #2370	; 0x942
    8ade:	4915      	ldr	r1, [pc, #84]	; (8b34 <_spi_load_regs_master+0x7c>)
    8ae0:	4618      	mov	r0, r3
    8ae2:	4b15      	ldr	r3, [pc, #84]	; (8b38 <_spi_load_regs_master+0x80>)
    8ae4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8ae6:	683b      	ldr	r3, [r7, #0]
    8ae8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8aea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8aee:	f023 0301 	bic.w	r3, r3, #1
    8af2:	4619      	mov	r1, r3
    8af4:	6878      	ldr	r0, [r7, #4]
    8af6:	4b11      	ldr	r3, [pc, #68]	; (8b3c <_spi_load_regs_master+0x84>)
    8af8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    8afa:	683b      	ldr	r3, [r7, #0]
    8afc:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    8afe:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    8b02:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    8b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8b0a:	4619      	mov	r1, r3
    8b0c:	6878      	ldr	r0, [r7, #4]
    8b0e:	4b0c      	ldr	r3, [pc, #48]	; (8b40 <_spi_load_regs_master+0x88>)
    8b10:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8b12:	683b      	ldr	r3, [r7, #0]
    8b14:	7b1b      	ldrb	r3, [r3, #12]
    8b16:	4619      	mov	r1, r3
    8b18:	6878      	ldr	r0, [r7, #4]
    8b1a:	4b0a      	ldr	r3, [pc, #40]	; (8b44 <_spi_load_regs_master+0x8c>)
    8b1c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8b1e:	683b      	ldr	r3, [r7, #0]
    8b20:	7b5b      	ldrb	r3, [r3, #13]
    8b22:	4619      	mov	r1, r3
    8b24:	6878      	ldr	r0, [r7, #4]
    8b26:	4b08      	ldr	r3, [pc, #32]	; (8b48 <_spi_load_regs_master+0x90>)
    8b28:	4798      	blx	r3
}
    8b2a:	bf00      	nop
    8b2c:	3708      	adds	r7, #8
    8b2e:	46bd      	mov	sp, r7
    8b30:	bd80      	pop	{r7, pc}
    8b32:	bf00      	nop
    8b34:	00011c04 	.word	0x00011c04
    8b38:	00005545 	.word	0x00005545
    8b3c:	00007dad 	.word	0x00007dad
    8b40:	00007ec5 	.word	0x00007ec5
    8b44:	00007f05 	.word	0x00007f05
    8b48:	0000803d 	.word	0x0000803d

00008b4c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8b4c:	b580      	push	{r7, lr}
    8b4e:	b082      	sub	sp, #8
    8b50:	af00      	add	r7, sp, #0
    8b52:	6078      	str	r0, [r7, #4]
    8b54:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    8b56:	687b      	ldr	r3, [r7, #4]
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d004      	beq.n	8b66 <_spi_load_regs_slave+0x1a>
    8b5c:	683b      	ldr	r3, [r7, #0]
    8b5e:	2b00      	cmp	r3, #0
    8b60:	d001      	beq.n	8b66 <_spi_load_regs_slave+0x1a>
    8b62:	2301      	movs	r3, #1
    8b64:	e000      	b.n	8b68 <_spi_load_regs_slave+0x1c>
    8b66:	2300      	movs	r3, #0
    8b68:	f003 0301 	and.w	r3, r3, #1
    8b6c:	b2db      	uxtb	r3, r3
    8b6e:	f640 1256 	movw	r2, #2390	; 0x956
    8b72:	491a      	ldr	r1, [pc, #104]	; (8bdc <_spi_load_regs_slave+0x90>)
    8b74:	4618      	mov	r0, r3
    8b76:	4b1a      	ldr	r3, [pc, #104]	; (8be0 <_spi_load_regs_slave+0x94>)
    8b78:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    8b7a:	683b      	ldr	r3, [r7, #0]
    8b7c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8b7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8b82:	f023 0301 	bic.w	r3, r3, #1
    8b86:	4619      	mov	r1, r3
    8b88:	6878      	ldr	r0, [r7, #4]
    8b8a:	4b16      	ldr	r3, [pc, #88]	; (8be4 <_spi_load_regs_slave+0x98>)
    8b8c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8b8e:	683b      	ldr	r3, [r7, #0]
    8b90:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    8b92:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    8b96:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8b9e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    8ba2:	4619      	mov	r1, r3
    8ba4:	6878      	ldr	r0, [r7, #4]
    8ba6:	4b10      	ldr	r3, [pc, #64]	; (8be8 <_spi_load_regs_slave+0x9c>)
    8ba8:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8baa:	683b      	ldr	r3, [r7, #0]
    8bac:	689b      	ldr	r3, [r3, #8]
    8bae:	4619      	mov	r1, r3
    8bb0:	6878      	ldr	r0, [r7, #4]
    8bb2:	4b0e      	ldr	r3, [pc, #56]	; (8bec <_spi_load_regs_slave+0xa0>)
    8bb4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8bb6:	683b      	ldr	r3, [r7, #0]
    8bb8:	7b5b      	ldrb	r3, [r3, #13]
    8bba:	4619      	mov	r1, r3
    8bbc:	6878      	ldr	r0, [r7, #4]
    8bbe:	4b0c      	ldr	r3, [pc, #48]	; (8bf0 <_spi_load_regs_slave+0xa4>)
    8bc0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    8bc2:	bf00      	nop
    8bc4:	f04f 31ff 	mov.w	r1, #4294967295
    8bc8:	6878      	ldr	r0, [r7, #4]
    8bca:	4b0a      	ldr	r3, [pc, #40]	; (8bf4 <_spi_load_regs_slave+0xa8>)
    8bcc:	4798      	blx	r3
    8bce:	4603      	mov	r3, r0
    8bd0:	2b00      	cmp	r3, #0
    8bd2:	d1f7      	bne.n	8bc4 <_spi_load_regs_slave+0x78>
		;
}
    8bd4:	bf00      	nop
    8bd6:	3708      	adds	r7, #8
    8bd8:	46bd      	mov	sp, r7
    8bda:	bd80      	pop	{r7, pc}
    8bdc:	00011c04 	.word	0x00011c04
    8be0:	00005545 	.word	0x00005545
    8be4:	00007dad 	.word	0x00007dad
    8be8:	00007ec5 	.word	0x00007ec5
    8bec:	00007fa9 	.word	0x00007fa9
    8bf0:	0000803d 	.word	0x0000803d
    8bf4:	00007a09 	.word	0x00007a09

00008bf8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    8bf8:	b580      	push	{r7, lr}
    8bfa:	b084      	sub	sp, #16
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	4618      	mov	r0, r3
    8c04:	4b11      	ldr	r3, [pc, #68]	; (8c4c <_spi_get_regs+0x54>)
    8c06:	4798      	blx	r3
    8c08:	4603      	mov	r3, r0
    8c0a:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8c0c:	2300      	movs	r3, #0
    8c0e:	73fb      	strb	r3, [r7, #15]
    8c10:	e014      	b.n	8c3c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    8c12:	7bfa      	ldrb	r2, [r7, #15]
    8c14:	490e      	ldr	r1, [pc, #56]	; (8c50 <_spi_get_regs+0x58>)
    8c16:	4613      	mov	r3, r2
    8c18:	011b      	lsls	r3, r3, #4
    8c1a:	4413      	add	r3, r2
    8c1c:	440b      	add	r3, r1
    8c1e:	3310      	adds	r3, #16
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	7bba      	ldrb	r2, [r7, #14]
    8c24:	429a      	cmp	r2, r3
    8c26:	d106      	bne.n	8c36 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    8c28:	7bfa      	ldrb	r2, [r7, #15]
    8c2a:	4613      	mov	r3, r2
    8c2c:	011b      	lsls	r3, r3, #4
    8c2e:	4413      	add	r3, r2
    8c30:	4a07      	ldr	r2, [pc, #28]	; (8c50 <_spi_get_regs+0x58>)
    8c32:	4413      	add	r3, r2
    8c34:	e006      	b.n	8c44 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8c36:	7bfb      	ldrb	r3, [r7, #15]
    8c38:	3301      	adds	r3, #1
    8c3a:	73fb      	strb	r3, [r7, #15]
    8c3c:	7bfb      	ldrb	r3, [r7, #15]
    8c3e:	2b01      	cmp	r3, #1
    8c40:	d9e7      	bls.n	8c12 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    8c42:	2300      	movs	r3, #0
}
    8c44:	4618      	mov	r0, r3
    8c46:	3710      	adds	r7, #16
    8c48:	46bd      	mov	sp, r7
    8c4a:	bd80      	pop	{r7, pc}
    8c4c:	000080f5 	.word	0x000080f5
    8c50:	00011c40 	.word	0x00011c40

00008c54 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    8c54:	b580      	push	{r7, lr}
    8c56:	b084      	sub	sp, #16
    8c58:	af00      	add	r7, sp, #0
    8c5a:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	681b      	ldr	r3, [r3, #0]
    8c60:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    8c62:	68f8      	ldr	r0, [r7, #12]
    8c64:	4b21      	ldr	r3, [pc, #132]	; (8cec <_spi_handler+0x98>)
    8c66:	4798      	blx	r3
    8c68:	4603      	mov	r3, r0
    8c6a:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    8c6c:	68f8      	ldr	r0, [r7, #12]
    8c6e:	4b20      	ldr	r3, [pc, #128]	; (8cf0 <_spi_handler+0x9c>)
    8c70:	4798      	blx	r3
    8c72:	4603      	mov	r3, r0
    8c74:	461a      	mov	r2, r3
    8c76:	7afb      	ldrb	r3, [r7, #11]
    8c78:	4013      	ands	r3, r2
    8c7a:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    8c7c:	7afb      	ldrb	r3, [r7, #11]
    8c7e:	f003 0301 	and.w	r3, r3, #1
    8c82:	2b00      	cmp	r3, #0
    8c84:	d004      	beq.n	8c90 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    8c86:	687b      	ldr	r3, [r7, #4]
    8c88:	689b      	ldr	r3, [r3, #8]
    8c8a:	6878      	ldr	r0, [r7, #4]
    8c8c:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    8c8e:	e029      	b.n	8ce4 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    8c90:	7afb      	ldrb	r3, [r7, #11]
    8c92:	f003 0304 	and.w	r3, r3, #4
    8c96:	2b00      	cmp	r3, #0
    8c98:	d004      	beq.n	8ca4 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    8c9a:	687b      	ldr	r3, [r7, #4]
    8c9c:	68db      	ldr	r3, [r3, #12]
    8c9e:	6878      	ldr	r0, [r7, #4]
    8ca0:	4798      	blx	r3
}
    8ca2:	e01f      	b.n	8ce4 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    8ca4:	7afb      	ldrb	r3, [r7, #11]
    8ca6:	f003 0302 	and.w	r3, r3, #2
    8caa:	2b00      	cmp	r3, #0
    8cac:	d008      	beq.n	8cc0 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    8cae:	2102      	movs	r1, #2
    8cb0:	68f8      	ldr	r0, [r7, #12]
    8cb2:	4b10      	ldr	r3, [pc, #64]	; (8cf4 <_spi_handler+0xa0>)
    8cb4:	4798      	blx	r3
		dev->callbacks.complete(dev);
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	691b      	ldr	r3, [r3, #16]
    8cba:	6878      	ldr	r0, [r7, #4]
    8cbc:	4798      	blx	r3
}
    8cbe:	e011      	b.n	8ce4 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    8cc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	da0d      	bge.n	8ce4 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    8cc8:	2104      	movs	r1, #4
    8cca:	68f8      	ldr	r0, [r7, #12]
    8ccc:	4b0a      	ldr	r3, [pc, #40]	; (8cf8 <_spi_handler+0xa4>)
    8cce:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8cd0:	2180      	movs	r1, #128	; 0x80
    8cd2:	68f8      	ldr	r0, [r7, #12]
    8cd4:	4b07      	ldr	r3, [pc, #28]	; (8cf4 <_spi_handler+0xa0>)
    8cd6:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    8cd8:	687b      	ldr	r3, [r7, #4]
    8cda:	695b      	ldr	r3, [r3, #20]
    8cdc:	f06f 0112 	mvn.w	r1, #18
    8ce0:	6878      	ldr	r0, [r7, #4]
    8ce2:	4798      	blx	r3
}
    8ce4:	bf00      	nop
    8ce6:	3710      	adds	r7, #16
    8ce8:	46bd      	mov	sp, r7
    8cea:	bd80      	pop	{r7, pc}
    8cec:	00007ac5 	.word	0x00007ac5
    8cf0:	00007c2f 	.word	0x00007c2f
    8cf4:	00007adf 	.word	0x00007adf
    8cf8:	0000805d 	.word	0x0000805d

00008cfc <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    8cfc:	b580      	push	{r7, lr}
    8cfe:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d00:	4b03      	ldr	r3, [pc, #12]	; (8d10 <SERCOM4_0_Handler+0x14>)
    8d02:	681b      	ldr	r3, [r3, #0]
    8d04:	4618      	mov	r0, r3
    8d06:	4b03      	ldr	r3, [pc, #12]	; (8d14 <SERCOM4_0_Handler+0x18>)
    8d08:	4798      	blx	r3
}
    8d0a:	bf00      	nop
    8d0c:	bd80      	pop	{r7, pc}
    8d0e:	bf00      	nop
    8d10:	20001d00 	.word	0x20001d00
    8d14:	00008c55 	.word	0x00008c55

00008d18 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    8d18:	b580      	push	{r7, lr}
    8d1a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d1c:	4b03      	ldr	r3, [pc, #12]	; (8d2c <SERCOM4_1_Handler+0x14>)
    8d1e:	681b      	ldr	r3, [r3, #0]
    8d20:	4618      	mov	r0, r3
    8d22:	4b03      	ldr	r3, [pc, #12]	; (8d30 <SERCOM4_1_Handler+0x18>)
    8d24:	4798      	blx	r3
}
    8d26:	bf00      	nop
    8d28:	bd80      	pop	{r7, pc}
    8d2a:	bf00      	nop
    8d2c:	20001d00 	.word	0x20001d00
    8d30:	00008c55 	.word	0x00008c55

00008d34 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    8d34:	b580      	push	{r7, lr}
    8d36:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d38:	4b03      	ldr	r3, [pc, #12]	; (8d48 <SERCOM4_2_Handler+0x14>)
    8d3a:	681b      	ldr	r3, [r3, #0]
    8d3c:	4618      	mov	r0, r3
    8d3e:	4b03      	ldr	r3, [pc, #12]	; (8d4c <SERCOM4_2_Handler+0x18>)
    8d40:	4798      	blx	r3
}
    8d42:	bf00      	nop
    8d44:	bd80      	pop	{r7, pc}
    8d46:	bf00      	nop
    8d48:	20001d00 	.word	0x20001d00
    8d4c:	00008c55 	.word	0x00008c55

00008d50 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    8d50:	b580      	push	{r7, lr}
    8d52:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    8d54:	4b03      	ldr	r3, [pc, #12]	; (8d64 <SERCOM4_3_Handler+0x14>)
    8d56:	681b      	ldr	r3, [r3, #0]
    8d58:	4618      	mov	r0, r3
    8d5a:	4b03      	ldr	r3, [pc, #12]	; (8d68 <SERCOM4_3_Handler+0x18>)
    8d5c:	4798      	blx	r3
}
    8d5e:	bf00      	nop
    8d60:	bd80      	pop	{r7, pc}
    8d62:	bf00      	nop
    8d64:	20001d00 	.word	0x20001d00
    8d68:	00008c55 	.word	0x00008c55

00008d6c <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    8d6c:	b580      	push	{r7, lr}
    8d6e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8d70:	4b03      	ldr	r3, [pc, #12]	; (8d80 <SERCOM5_0_Handler+0x14>)
    8d72:	681b      	ldr	r3, [r3, #0]
    8d74:	4618      	mov	r0, r3
    8d76:	4b03      	ldr	r3, [pc, #12]	; (8d84 <SERCOM5_0_Handler+0x18>)
    8d78:	4798      	blx	r3
}
    8d7a:	bf00      	nop
    8d7c:	bd80      	pop	{r7, pc}
    8d7e:	bf00      	nop
    8d80:	20001d04 	.word	0x20001d04
    8d84:	00008459 	.word	0x00008459

00008d88 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    8d88:	b580      	push	{r7, lr}
    8d8a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8d8c:	4b03      	ldr	r3, [pc, #12]	; (8d9c <SERCOM5_1_Handler+0x14>)
    8d8e:	681b      	ldr	r3, [r3, #0]
    8d90:	4618      	mov	r0, r3
    8d92:	4b03      	ldr	r3, [pc, #12]	; (8da0 <SERCOM5_1_Handler+0x18>)
    8d94:	4798      	blx	r3
}
    8d96:	bf00      	nop
    8d98:	bd80      	pop	{r7, pc}
    8d9a:	bf00      	nop
    8d9c:	20001d04 	.word	0x20001d04
    8da0:	00008459 	.word	0x00008459

00008da4 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    8da4:	b580      	push	{r7, lr}
    8da6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8da8:	4b03      	ldr	r3, [pc, #12]	; (8db8 <SERCOM5_2_Handler+0x14>)
    8daa:	681b      	ldr	r3, [r3, #0]
    8dac:	4618      	mov	r0, r3
    8dae:	4b03      	ldr	r3, [pc, #12]	; (8dbc <SERCOM5_2_Handler+0x18>)
    8db0:	4798      	blx	r3
}
    8db2:	bf00      	nop
    8db4:	bd80      	pop	{r7, pc}
    8db6:	bf00      	nop
    8db8:	20001d04 	.word	0x20001d04
    8dbc:	00008459 	.word	0x00008459

00008dc0 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    8dc0:	b580      	push	{r7, lr}
    8dc2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    8dc4:	4b03      	ldr	r3, [pc, #12]	; (8dd4 <SERCOM5_3_Handler+0x14>)
    8dc6:	681b      	ldr	r3, [r3, #0]
    8dc8:	4618      	mov	r0, r3
    8dca:	4b03      	ldr	r3, [pc, #12]	; (8dd8 <SERCOM5_3_Handler+0x18>)
    8dcc:	4798      	blx	r3
}
    8dce:	bf00      	nop
    8dd0:	bd80      	pop	{r7, pc}
    8dd2:	bf00      	nop
    8dd4:	20001d04 	.word	0x20001d04
    8dd8:	00008459 	.word	0x00008459

00008ddc <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    8ddc:	b580      	push	{r7, lr}
    8dde:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8de0:	4b03      	ldr	r3, [pc, #12]	; (8df0 <SERCOM7_0_Handler+0x14>)
    8de2:	681b      	ldr	r3, [r3, #0]
    8de4:	4618      	mov	r0, r3
    8de6:	4b03      	ldr	r3, [pc, #12]	; (8df4 <SERCOM7_0_Handler+0x18>)
    8de8:	4798      	blx	r3
}
    8dea:	bf00      	nop
    8dec:	bd80      	pop	{r7, pc}
    8dee:	bf00      	nop
    8df0:	20001d08 	.word	0x20001d08
    8df4:	00008459 	.word	0x00008459

00008df8 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    8df8:	b580      	push	{r7, lr}
    8dfa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8dfc:	4b03      	ldr	r3, [pc, #12]	; (8e0c <SERCOM7_1_Handler+0x14>)
    8dfe:	681b      	ldr	r3, [r3, #0]
    8e00:	4618      	mov	r0, r3
    8e02:	4b03      	ldr	r3, [pc, #12]	; (8e10 <SERCOM7_1_Handler+0x18>)
    8e04:	4798      	blx	r3
}
    8e06:	bf00      	nop
    8e08:	bd80      	pop	{r7, pc}
    8e0a:	bf00      	nop
    8e0c:	20001d08 	.word	0x20001d08
    8e10:	00008459 	.word	0x00008459

00008e14 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    8e14:	b580      	push	{r7, lr}
    8e16:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8e18:	4b03      	ldr	r3, [pc, #12]	; (8e28 <SERCOM7_2_Handler+0x14>)
    8e1a:	681b      	ldr	r3, [r3, #0]
    8e1c:	4618      	mov	r0, r3
    8e1e:	4b03      	ldr	r3, [pc, #12]	; (8e2c <SERCOM7_2_Handler+0x18>)
    8e20:	4798      	blx	r3
}
    8e22:	bf00      	nop
    8e24:	bd80      	pop	{r7, pc}
    8e26:	bf00      	nop
    8e28:	20001d08 	.word	0x20001d08
    8e2c:	00008459 	.word	0x00008459

00008e30 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    8e30:	b580      	push	{r7, lr}
    8e32:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    8e34:	4b03      	ldr	r3, [pc, #12]	; (8e44 <SERCOM7_3_Handler+0x14>)
    8e36:	681b      	ldr	r3, [r3, #0]
    8e38:	4618      	mov	r0, r3
    8e3a:	4b03      	ldr	r3, [pc, #12]	; (8e48 <SERCOM7_3_Handler+0x18>)
    8e3c:	4798      	blx	r3
}
    8e3e:	bf00      	nop
    8e40:	bd80      	pop	{r7, pc}
    8e42:	bf00      	nop
    8e44:	20001d08 	.word	0x20001d08
    8e48:	00008459 	.word	0x00008459

00008e4c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	b084      	sub	sp, #16
    8e50:	af00      	add	r7, sp, #0
    8e52:	6078      	str	r0, [r7, #4]
    8e54:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    8e56:	683b      	ldr	r3, [r7, #0]
    8e58:	4618      	mov	r0, r3
    8e5a:	4b35      	ldr	r3, [pc, #212]	; (8f30 <_spi_m_sync_init+0xe4>)
    8e5c:	4798      	blx	r3
    8e5e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	2b00      	cmp	r3, #0
    8e64:	d004      	beq.n	8e70 <_spi_m_sync_init+0x24>
    8e66:	683b      	ldr	r3, [r7, #0]
    8e68:	2b00      	cmp	r3, #0
    8e6a:	d001      	beq.n	8e70 <_spi_m_sync_init+0x24>
    8e6c:	2301      	movs	r3, #1
    8e6e:	e000      	b.n	8e72 <_spi_m_sync_init+0x26>
    8e70:	2300      	movs	r3, #0
    8e72:	f003 0301 	and.w	r3, r3, #1
    8e76:	b2db      	uxtb	r3, r3
    8e78:	f640 12e9 	movw	r2, #2537	; 0x9e9
    8e7c:	492d      	ldr	r1, [pc, #180]	; (8f34 <_spi_m_sync_init+0xe8>)
    8e7e:	4618      	mov	r0, r3
    8e80:	4b2d      	ldr	r3, [pc, #180]	; (8f38 <_spi_m_sync_init+0xec>)
    8e82:	4798      	blx	r3

	if (regs == NULL) {
    8e84:	68fb      	ldr	r3, [r7, #12]
    8e86:	2b00      	cmp	r3, #0
    8e88:	d102      	bne.n	8e90 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8e8a:	f06f 030c 	mvn.w	r3, #12
    8e8e:	e04a      	b.n	8f26 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8e90:	2101      	movs	r1, #1
    8e92:	6838      	ldr	r0, [r7, #0]
    8e94:	4b29      	ldr	r3, [pc, #164]	; (8f3c <_spi_m_sync_init+0xf0>)
    8e96:	4798      	blx	r3
    8e98:	4603      	mov	r3, r0
    8e9a:	f083 0301 	eor.w	r3, r3, #1
    8e9e:	b2db      	uxtb	r3, r3
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d019      	beq.n	8ed8 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8ea4:	68fb      	ldr	r3, [r7, #12]
    8ea6:	681b      	ldr	r3, [r3, #0]
    8ea8:	f003 031c 	and.w	r3, r3, #28
    8eac:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8eae:	2102      	movs	r1, #2
    8eb0:	6838      	ldr	r0, [r7, #0]
    8eb2:	4b23      	ldr	r3, [pc, #140]	; (8f40 <_spi_m_sync_init+0xf4>)
    8eb4:	4798      	blx	r3
    8eb6:	4603      	mov	r3, r0
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d006      	beq.n	8eca <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8ebc:	6838      	ldr	r0, [r7, #0]
    8ebe:	4b21      	ldr	r3, [pc, #132]	; (8f44 <_spi_m_sync_init+0xf8>)
    8ec0:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    8ec2:	2102      	movs	r1, #2
    8ec4:	6838      	ldr	r0, [r7, #0]
    8ec6:	4b20      	ldr	r3, [pc, #128]	; (8f48 <_spi_m_sync_init+0xfc>)
    8ec8:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8eca:	68bb      	ldr	r3, [r7, #8]
    8ecc:	f043 0301 	orr.w	r3, r3, #1
    8ed0:	4619      	mov	r1, r3
    8ed2:	6838      	ldr	r0, [r7, #0]
    8ed4:	4b1d      	ldr	r3, [pc, #116]	; (8f4c <_spi_m_sync_init+0x100>)
    8ed6:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8ed8:	2101      	movs	r1, #1
    8eda:	6838      	ldr	r0, [r7, #0]
    8edc:	4b1a      	ldr	r3, [pc, #104]	; (8f48 <_spi_m_sync_init+0xfc>)
    8ede:	4798      	blx	r3

	dev->prvt = hw;
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	683a      	ldr	r2, [r7, #0]
    8ee4:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8ee6:	68fb      	ldr	r3, [r7, #12]
    8ee8:	681b      	ldr	r3, [r3, #0]
    8eea:	f003 031c 	and.w	r3, r3, #28
    8eee:	2b08      	cmp	r3, #8
    8ef0:	d104      	bne.n	8efc <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    8ef2:	68f9      	ldr	r1, [r7, #12]
    8ef4:	6838      	ldr	r0, [r7, #0]
    8ef6:	4b16      	ldr	r3, [pc, #88]	; (8f50 <_spi_m_sync_init+0x104>)
    8ef8:	4798      	blx	r3
    8efa:	e003      	b.n	8f04 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    8efc:	68f9      	ldr	r1, [r7, #12]
    8efe:	6838      	ldr	r0, [r7, #0]
    8f00:	4b14      	ldr	r3, [pc, #80]	; (8f54 <_spi_m_sync_init+0x108>)
    8f02:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    8f04:	68fb      	ldr	r3, [r7, #12]
    8f06:	685b      	ldr	r3, [r3, #4]
    8f08:	f003 0307 	and.w	r3, r3, #7
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	d101      	bne.n	8f14 <_spi_m_sync_init+0xc8>
    8f10:	2201      	movs	r2, #1
    8f12:	e000      	b.n	8f16 <_spi_m_sync_init+0xca>
    8f14:	2202      	movs	r2, #2
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    8f1a:	68fb      	ldr	r3, [r7, #12]
    8f1c:	89db      	ldrh	r3, [r3, #14]
    8f1e:	b29a      	uxth	r2, r3
    8f20:	687b      	ldr	r3, [r7, #4]
    8f22:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    8f24:	2300      	movs	r3, #0
}
    8f26:	4618      	mov	r0, r3
    8f28:	3710      	adds	r7, #16
    8f2a:	46bd      	mov	sp, r7
    8f2c:	bd80      	pop	{r7, pc}
    8f2e:	bf00      	nop
    8f30:	00008bf9 	.word	0x00008bf9
    8f34:	00011c04 	.word	0x00011c04
    8f38:	00005545 	.word	0x00005545
    8f3c:	00007a09 	.word	0x00007a09
    8f40:	00007d7d 	.word	0x00007d7d
    8f44:	00007d55 	.word	0x00007d55
    8f48:	000079e5 	.word	0x000079e5
    8f4c:	00007dad 	.word	0x00007dad
    8f50:	00008b4d 	.word	0x00008b4d
    8f54:	00008ab9 	.word	0x00008ab9

00008f58 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b086      	sub	sp, #24
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	6078      	str	r0, [r7, #4]
    8f60:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    8f66:	6839      	ldr	r1, [r7, #0]
    8f68:	6878      	ldr	r0, [r7, #4]
    8f6a:	4b1a      	ldr	r3, [pc, #104]	; (8fd4 <_spi_m_async_init+0x7c>)
    8f6c:	4798      	blx	r3
    8f6e:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    8f70:	68bb      	ldr	r3, [r7, #8]
    8f72:	2b00      	cmp	r3, #0
    8f74:	da01      	bge.n	8f7a <_spi_m_async_init+0x22>
		return rc;
    8f76:	68bb      	ldr	r3, [r7, #8]
    8f78:	e028      	b.n	8fcc <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    8f7a:	6879      	ldr	r1, [r7, #4]
    8f7c:	6838      	ldr	r0, [r7, #0]
    8f7e:	4b16      	ldr	r3, [pc, #88]	; (8fd8 <_spi_m_async_init+0x80>)
    8f80:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    8f82:	68fb      	ldr	r3, [r7, #12]
    8f84:	2200      	movs	r2, #0
    8f86:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    8f88:	68fb      	ldr	r3, [r7, #12]
    8f8a:	2200      	movs	r2, #0
    8f8c:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    8f8e:	68fb      	ldr	r3, [r7, #12]
    8f90:	2200      	movs	r2, #0
    8f92:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    8f94:	6838      	ldr	r0, [r7, #0]
    8f96:	4b11      	ldr	r3, [pc, #68]	; (8fdc <_spi_m_async_init+0x84>)
    8f98:	4798      	blx	r3
    8f9a:	4603      	mov	r3, r0
    8f9c:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8f9e:	2300      	movs	r3, #0
    8fa0:	613b      	str	r3, [r7, #16]
    8fa2:	e00f      	b.n	8fc4 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    8fa4:	7dfb      	ldrb	r3, [r7, #23]
    8fa6:	b21b      	sxth	r3, r3
    8fa8:	4618      	mov	r0, r3
    8faa:	4b0d      	ldr	r3, [pc, #52]	; (8fe0 <_spi_m_async_init+0x88>)
    8fac:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    8fae:	7dfb      	ldrb	r3, [r7, #23]
    8fb0:	b21b      	sxth	r3, r3
    8fb2:	4618      	mov	r0, r3
    8fb4:	4b0b      	ldr	r3, [pc, #44]	; (8fe4 <_spi_m_async_init+0x8c>)
    8fb6:	4798      	blx	r3
		irq++;
    8fb8:	7dfb      	ldrb	r3, [r7, #23]
    8fba:	3301      	adds	r3, #1
    8fbc:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    8fbe:	693b      	ldr	r3, [r7, #16]
    8fc0:	3301      	adds	r3, #1
    8fc2:	613b      	str	r3, [r7, #16]
    8fc4:	693b      	ldr	r3, [r7, #16]
    8fc6:	2b03      	cmp	r3, #3
    8fc8:	d9ec      	bls.n	8fa4 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    8fca:	2300      	movs	r3, #0
}
    8fcc:	4618      	mov	r0, r3
    8fce:	3718      	adds	r7, #24
    8fd0:	46bd      	mov	sp, r7
    8fd2:	bd80      	pop	{r7, pc}
    8fd4:	00008e4d 	.word	0x00008e4d
    8fd8:	00008151 	.word	0x00008151
    8fdc:	0000859d 	.word	0x0000859d
    8fe0:	00007919 	.word	0x00007919
    8fe4:	0000795d 	.word	0x0000795d

00008fe8 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    8fe8:	b580      	push	{r7, lr}
    8fea:	b082      	sub	sp, #8
    8fec:	af00      	add	r7, sp, #0
    8fee:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    8ff0:	bf00      	nop
    8ff2:	2103      	movs	r1, #3
    8ff4:	6878      	ldr	r0, [r7, #4]
    8ff6:	4b06      	ldr	r3, [pc, #24]	; (9010 <_spi_wait_bus_idle+0x28>)
    8ff8:	4798      	blx	r3
    8ffa:	4603      	mov	r3, r0
    8ffc:	2b00      	cmp	r3, #0
    8ffe:	d0f8      	beq.n	8ff2 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    9000:	2103      	movs	r1, #3
    9002:	6878      	ldr	r0, [r7, #4]
    9004:	4b03      	ldr	r3, [pc, #12]	; (9014 <_spi_wait_bus_idle+0x2c>)
    9006:	4798      	blx	r3
}
    9008:	bf00      	nop
    900a:	3708      	adds	r7, #8
    900c:	46bd      	mov	sp, r7
    900e:	bd80      	pop	{r7, pc}
    9010:	00007a9d 	.word	0x00007a9d
    9014:	00007adf 	.word	0x00007adf

00009018 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    9018:	b580      	push	{r7, lr}
    901a:	b086      	sub	sp, #24
    901c:	af00      	add	r7, sp, #0
    901e:	60f8      	str	r0, [r7, #12]
    9020:	60b9      	str	r1, [r7, #8]
    9022:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    9024:	68bb      	ldr	r3, [r7, #8]
    9026:	f003 0304 	and.w	r3, r3, #4
    902a:	2b00      	cmp	r3, #0
    902c:	d101      	bne.n	9032 <_spi_rx_check_and_receive+0x1a>
		return false;
    902e:	2300      	movs	r3, #0
    9030:	e022      	b.n	9078 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    9032:	68f8      	ldr	r0, [r7, #12]
    9034:	4b12      	ldr	r3, [pc, #72]	; (9080 <_spi_rx_check_and_receive+0x68>)
    9036:	4798      	blx	r3
    9038:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    903a:	687b      	ldr	r3, [r7, #4]
    903c:	685b      	ldr	r3, [r3, #4]
    903e:	2b00      	cmp	r3, #0
    9040:	d014      	beq.n	906c <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	685b      	ldr	r3, [r3, #4]
    9046:	1c59      	adds	r1, r3, #1
    9048:	687a      	ldr	r2, [r7, #4]
    904a:	6051      	str	r1, [r2, #4]
    904c:	697a      	ldr	r2, [r7, #20]
    904e:	b2d2      	uxtb	r2, r2
    9050:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	7c1b      	ldrb	r3, [r3, #16]
    9056:	2b01      	cmp	r3, #1
    9058:	d908      	bls.n	906c <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    905a:	687b      	ldr	r3, [r7, #4]
    905c:	685b      	ldr	r3, [r3, #4]
    905e:	1c59      	adds	r1, r3, #1
    9060:	687a      	ldr	r2, [r7, #4]
    9062:	6051      	str	r1, [r2, #4]
    9064:	697a      	ldr	r2, [r7, #20]
    9066:	0a12      	lsrs	r2, r2, #8
    9068:	b2d2      	uxtb	r2, r2
    906a:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    906c:	687b      	ldr	r3, [r7, #4]
    906e:	68db      	ldr	r3, [r3, #12]
    9070:	1c5a      	adds	r2, r3, #1
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	60da      	str	r2, [r3, #12]

	return true;
    9076:	2301      	movs	r3, #1
}
    9078:	4618      	mov	r0, r3
    907a:	3718      	adds	r7, #24
    907c:	46bd      	mov	sp, r7
    907e:	bd80      	pop	{r7, pc}
    9080:	00008025 	.word	0x00008025

00009084 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    9084:	b580      	push	{r7, lr}
    9086:	b086      	sub	sp, #24
    9088:	af00      	add	r7, sp, #0
    908a:	60f8      	str	r0, [r7, #12]
    908c:	60b9      	str	r1, [r7, #8]
    908e:	607a      	str	r2, [r7, #4]
    9090:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    9092:	68bb      	ldr	r3, [r7, #8]
    9094:	f003 0301 	and.w	r3, r3, #1
    9098:	2b00      	cmp	r3, #0
    909a:	d028      	beq.n	90ee <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    909c:	687b      	ldr	r3, [r7, #4]
    909e:	681b      	ldr	r3, [r3, #0]
    90a0:	2b00      	cmp	r3, #0
    90a2:	d018      	beq.n	90d6 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    90a4:	687b      	ldr	r3, [r7, #4]
    90a6:	681b      	ldr	r3, [r3, #0]
    90a8:	1c59      	adds	r1, r3, #1
    90aa:	687a      	ldr	r2, [r7, #4]
    90ac:	6011      	str	r1, [r2, #0]
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    90b2:	687b      	ldr	r3, [r7, #4]
    90b4:	7c1b      	ldrb	r3, [r3, #16]
    90b6:	2b01      	cmp	r3, #1
    90b8:	d90f      	bls.n	90da <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    90ba:	687b      	ldr	r3, [r7, #4]
    90bc:	681b      	ldr	r3, [r3, #0]
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	021b      	lsls	r3, r3, #8
    90c2:	461a      	mov	r2, r3
    90c4:	697b      	ldr	r3, [r7, #20]
    90c6:	4313      	orrs	r3, r2
    90c8:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    90ca:	687b      	ldr	r3, [r7, #4]
    90cc:	681b      	ldr	r3, [r3, #0]
    90ce:	1c5a      	adds	r2, r3, #1
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	601a      	str	r2, [r3, #0]
    90d4:	e001      	b.n	90da <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    90d6:	887b      	ldrh	r3, [r7, #2]
    90d8:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    90da:	687b      	ldr	r3, [r7, #4]
    90dc:	689b      	ldr	r3, [r3, #8]
    90de:	1c5a      	adds	r2, r3, #1
    90e0:	687b      	ldr	r3, [r7, #4]
    90e2:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    90e4:	6979      	ldr	r1, [r7, #20]
    90e6:	68f8      	ldr	r0, [r7, #12]
    90e8:	4b03      	ldr	r3, [pc, #12]	; (90f8 <_spi_tx_check_and_send+0x74>)
    90ea:	4798      	blx	r3
    90ec:	e000      	b.n	90f0 <_spi_tx_check_and_send+0x6c>
		return;
    90ee:	bf00      	nop
}
    90f0:	3718      	adds	r7, #24
    90f2:	46bd      	mov	sp, r7
    90f4:	bd80      	pop	{r7, pc}
    90f6:	bf00      	nop
    90f8:	00008009 	.word	0x00008009

000090fc <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    90fc:	b580      	push	{r7, lr}
    90fe:	b082      	sub	sp, #8
    9100:	af00      	add	r7, sp, #0
    9102:	6078      	str	r0, [r7, #4]
    9104:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	f003 0380 	and.w	r3, r3, #128	; 0x80
    910c:	2b00      	cmp	r3, #0
    910e:	d00b      	beq.n	9128 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    9110:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9114:	6838      	ldr	r0, [r7, #0]
    9116:	4b07      	ldr	r3, [pc, #28]	; (9134 <_spi_err_check+0x38>)
    9118:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    911a:	2180      	movs	r1, #128	; 0x80
    911c:	6838      	ldr	r0, [r7, #0]
    911e:	4b06      	ldr	r3, [pc, #24]	; (9138 <_spi_err_check+0x3c>)
    9120:	4798      	blx	r3
		return ERR_OVERFLOW;
    9122:	f06f 0312 	mvn.w	r3, #18
    9126:	e000      	b.n	912a <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    9128:	2300      	movs	r3, #0
}
    912a:	4618      	mov	r0, r3
    912c:	3708      	adds	r7, #8
    912e:	46bd      	mov	sp, r7
    9130:	bd80      	pop	{r7, pc}
    9132:	bf00      	nop
    9134:	0000805d 	.word	0x0000805d
    9138:	00007adf 	.word	0x00007adf

0000913c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    913c:	b590      	push	{r4, r7, lr}
    913e:	b08b      	sub	sp, #44	; 0x2c
    9140:	af00      	add	r7, sp, #0
    9142:	6078      	str	r0, [r7, #4]
    9144:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    9146:	687b      	ldr	r3, [r7, #4]
    9148:	681b      	ldr	r3, [r3, #0]
    914a:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    914c:	2300      	movs	r3, #0
    914e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    9150:	683b      	ldr	r3, [r7, #0]
    9152:	681b      	ldr	r3, [r3, #0]
    9154:	60bb      	str	r3, [r7, #8]
    9156:	683b      	ldr	r3, [r7, #0]
    9158:	685b      	ldr	r3, [r3, #4]
    915a:	60fb      	str	r3, [r7, #12]
    915c:	2300      	movs	r3, #0
    915e:	613b      	str	r3, [r7, #16]
    9160:	2300      	movs	r3, #0
    9162:	617b      	str	r3, [r7, #20]
    9164:	687b      	ldr	r3, [r7, #4]
    9166:	791b      	ldrb	r3, [r3, #4]
    9168:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    916a:	687b      	ldr	r3, [r7, #4]
    916c:	2b00      	cmp	r3, #0
    916e:	d004      	beq.n	917a <_spi_m_sync_trans+0x3e>
    9170:	6a3b      	ldr	r3, [r7, #32]
    9172:	2b00      	cmp	r3, #0
    9174:	d001      	beq.n	917a <_spi_m_sync_trans+0x3e>
    9176:	2301      	movs	r3, #1
    9178:	e000      	b.n	917c <_spi_m_sync_trans+0x40>
    917a:	2300      	movs	r3, #0
    917c:	f003 0301 	and.w	r3, r3, #1
    9180:	b2db      	uxtb	r3, r3
    9182:	f640 324d 	movw	r2, #2893	; 0xb4d
    9186:	492b      	ldr	r1, [pc, #172]	; (9234 <_spi_m_sync_trans+0xf8>)
    9188:	4618      	mov	r0, r3
    918a:	4b2b      	ldr	r3, [pc, #172]	; (9238 <_spi_m_sync_trans+0xfc>)
    918c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    918e:	2107      	movs	r1, #7
    9190:	6a38      	ldr	r0, [r7, #32]
    9192:	4b2a      	ldr	r3, [pc, #168]	; (923c <_spi_m_sync_trans+0x100>)
    9194:	4798      	blx	r3
    9196:	4603      	mov	r3, r0
    9198:	2b00      	cmp	r3, #0
    919a:	d002      	beq.n	91a2 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    919c:	f06f 0303 	mvn.w	r3, #3
    91a0:	e043      	b.n	922a <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    91a2:	6a38      	ldr	r0, [r7, #32]
    91a4:	4b26      	ldr	r3, [pc, #152]	; (9240 <_spi_m_sync_trans+0x104>)
    91a6:	4798      	blx	r3
    91a8:	4603      	mov	r3, r0
    91aa:	f083 0301 	eor.w	r3, r3, #1
    91ae:	b2db      	uxtb	r3, r3
    91b0:	2b00      	cmp	r3, #0
    91b2:	d002      	beq.n	91ba <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    91b4:	f06f 0313 	mvn.w	r3, #19
    91b8:	e037      	b.n	922a <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    91ba:	6a38      	ldr	r0, [r7, #32]
    91bc:	4b21      	ldr	r3, [pc, #132]	; (9244 <_spi_m_sync_trans+0x108>)
    91be:	4798      	blx	r3
    91c0:	4603      	mov	r3, r0
    91c2:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    91c4:	f107 0308 	add.w	r3, r7, #8
    91c8:	461a      	mov	r2, r3
    91ca:	69f9      	ldr	r1, [r7, #28]
    91cc:	6a38      	ldr	r0, [r7, #32]
    91ce:	4b1e      	ldr	r3, [pc, #120]	; (9248 <_spi_m_sync_trans+0x10c>)
    91d0:	4798      	blx	r3
    91d2:	4603      	mov	r3, r0
    91d4:	f083 0301 	eor.w	r3, r3, #1
    91d8:	b2db      	uxtb	r3, r3
    91da:	2b00      	cmp	r3, #0
    91dc:	d00b      	beq.n	91f6 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    91de:	697a      	ldr	r2, [r7, #20]
    91e0:	693b      	ldr	r3, [r7, #16]
    91e2:	429a      	cmp	r2, r3
    91e4:	d307      	bcc.n	91f6 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    91e6:	687b      	ldr	r3, [r7, #4]
    91e8:	88db      	ldrh	r3, [r3, #6]
    91ea:	f107 0208 	add.w	r2, r7, #8
    91ee:	69f9      	ldr	r1, [r7, #28]
    91f0:	6a38      	ldr	r0, [r7, #32]
    91f2:	4c16      	ldr	r4, [pc, #88]	; (924c <_spi_m_sync_trans+0x110>)
    91f4:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    91f6:	6a39      	ldr	r1, [r7, #32]
    91f8:	69f8      	ldr	r0, [r7, #28]
    91fa:	4b15      	ldr	r3, [pc, #84]	; (9250 <_spi_m_sync_trans+0x114>)
    91fc:	4798      	blx	r3
    91fe:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    9200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9202:	2b00      	cmp	r3, #0
    9204:	db0c      	blt.n	9220 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    9206:	693a      	ldr	r2, [r7, #16]
    9208:	683b      	ldr	r3, [r7, #0]
    920a:	689b      	ldr	r3, [r3, #8]
    920c:	429a      	cmp	r2, r3
    920e:	d3d4      	bcc.n	91ba <_spi_m_sync_trans+0x7e>
    9210:	697a      	ldr	r2, [r7, #20]
    9212:	683b      	ldr	r3, [r7, #0]
    9214:	689b      	ldr	r3, [r3, #8]
    9216:	429a      	cmp	r2, r3
    9218:	d3cf      	bcc.n	91ba <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    921a:	693b      	ldr	r3, [r7, #16]
    921c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    921e:	e000      	b.n	9222 <_spi_m_sync_trans+0xe6>
			break;
    9220:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    9222:	6a38      	ldr	r0, [r7, #32]
    9224:	4b0b      	ldr	r3, [pc, #44]	; (9254 <_spi_m_sync_trans+0x118>)
    9226:	4798      	blx	r3

	return rc;
    9228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    922a:	4618      	mov	r0, r3
    922c:	372c      	adds	r7, #44	; 0x2c
    922e:	46bd      	mov	sp, r7
    9230:	bd90      	pop	{r4, r7, pc}
    9232:	bf00      	nop
    9234:	00011c04 	.word	0x00011c04
    9238:	00005545 	.word	0x00005545
    923c:	00007a09 	.word	0x00007a09
    9240:	00007d1d 	.word	0x00007d1d
    9244:	00007ac5 	.word	0x00007ac5
    9248:	00009019 	.word	0x00009019
    924c:	00009085 	.word	0x00009085
    9250:	000090fd 	.word	0x000090fd
    9254:	00008fe9 	.word	0x00008fe9

00009258 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    9258:	b580      	push	{r7, lr}
    925a:	b084      	sub	sp, #16
    925c:	af00      	add	r7, sp, #0
    925e:	6078      	str	r0, [r7, #4]
    9260:	460b      	mov	r3, r1
    9262:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	681b      	ldr	r3, [r3, #0]
    9268:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	2b00      	cmp	r3, #0
    926e:	d004      	beq.n	927a <_spi_m_async_enable_tx+0x22>
    9270:	68fb      	ldr	r3, [r7, #12]
    9272:	2b00      	cmp	r3, #0
    9274:	d001      	beq.n	927a <_spi_m_async_enable_tx+0x22>
    9276:	2301      	movs	r3, #1
    9278:	e000      	b.n	927c <_spi_m_async_enable_tx+0x24>
    927a:	2300      	movs	r3, #0
    927c:	f003 0301 	and.w	r3, r3, #1
    9280:	b2db      	uxtb	r3, r3
    9282:	f640 3279 	movw	r2, #2937	; 0xb79
    9286:	4909      	ldr	r1, [pc, #36]	; (92ac <_spi_m_async_enable_tx+0x54>)
    9288:	4618      	mov	r0, r3
    928a:	4b09      	ldr	r3, [pc, #36]	; (92b0 <_spi_m_async_enable_tx+0x58>)
    928c:	4798      	blx	r3

	if (state) {
    928e:	78fb      	ldrb	r3, [r7, #3]
    9290:	2b00      	cmp	r3, #0
    9292:	d003      	beq.n	929c <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    9294:	68f8      	ldr	r0, [r7, #12]
    9296:	4b07      	ldr	r3, [pc, #28]	; (92b4 <_spi_m_async_enable_tx+0x5c>)
    9298:	4798      	blx	r3
    929a:	e002      	b.n	92a2 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    929c:	68f8      	ldr	r0, [r7, #12]
    929e:	4b06      	ldr	r3, [pc, #24]	; (92b8 <_spi_m_async_enable_tx+0x60>)
    92a0:	4798      	blx	r3
	}

	return ERR_NONE;
    92a2:	2300      	movs	r3, #0
}
    92a4:	4618      	mov	r0, r3
    92a6:	3710      	adds	r7, #16
    92a8:	46bd      	mov	sp, r7
    92aa:	bd80      	pop	{r7, pc}
    92ac:	00011c04 	.word	0x00011c04
    92b0:	00005545 	.word	0x00005545
    92b4:	00007b93 	.word	0x00007b93
    92b8:	00007bad 	.word	0x00007bad

000092bc <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    92bc:	b580      	push	{r7, lr}
    92be:	b084      	sub	sp, #16
    92c0:	af00      	add	r7, sp, #0
    92c2:	6078      	str	r0, [r7, #4]
    92c4:	460b      	mov	r3, r1
    92c6:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    92c8:	687b      	ldr	r3, [r7, #4]
    92ca:	681b      	ldr	r3, [r3, #0]
    92cc:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    92ce:	687b      	ldr	r3, [r7, #4]
    92d0:	2b00      	cmp	r3, #0
    92d2:	bf14      	ite	ne
    92d4:	2301      	movne	r3, #1
    92d6:	2300      	moveq	r3, #0
    92d8:	b2db      	uxtb	r3, r3
    92da:	f640 328d 	movw	r2, #2957	; 0xb8d
    92de:	490f      	ldr	r1, [pc, #60]	; (931c <_spi_m_async_enable_rx+0x60>)
    92e0:	4618      	mov	r0, r3
    92e2:	4b0f      	ldr	r3, [pc, #60]	; (9320 <_spi_m_async_enable_rx+0x64>)
    92e4:	4798      	blx	r3
	ASSERT(hw);
    92e6:	68fb      	ldr	r3, [r7, #12]
    92e8:	2b00      	cmp	r3, #0
    92ea:	bf14      	ite	ne
    92ec:	2301      	movne	r3, #1
    92ee:	2300      	moveq	r3, #0
    92f0:	b2db      	uxtb	r3, r3
    92f2:	f640 328e 	movw	r2, #2958	; 0xb8e
    92f6:	4909      	ldr	r1, [pc, #36]	; (931c <_spi_m_async_enable_rx+0x60>)
    92f8:	4618      	mov	r0, r3
    92fa:	4b09      	ldr	r3, [pc, #36]	; (9320 <_spi_m_async_enable_rx+0x64>)
    92fc:	4798      	blx	r3

	if (state) {
    92fe:	78fb      	ldrb	r3, [r7, #3]
    9300:	2b00      	cmp	r3, #0
    9302:	d003      	beq.n	930c <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    9304:	68f8      	ldr	r0, [r7, #12]
    9306:	4b07      	ldr	r3, [pc, #28]	; (9324 <_spi_m_async_enable_rx+0x68>)
    9308:	4798      	blx	r3
    930a:	e002      	b.n	9312 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    930c:	68f8      	ldr	r0, [r7, #12]
    930e:	4b06      	ldr	r3, [pc, #24]	; (9328 <_spi_m_async_enable_rx+0x6c>)
    9310:	4798      	blx	r3
	}

	return ERR_NONE;
    9312:	2300      	movs	r3, #0
}
    9314:	4618      	mov	r0, r3
    9316:	3710      	adds	r7, #16
    9318:	46bd      	mov	sp, r7
    931a:	bd80      	pop	{r7, pc}
    931c:	00011c04 	.word	0x00011c04
    9320:	00005545 	.word	0x00005545
    9324:	00007bfb 	.word	0x00007bfb
    9328:	00007c15 	.word	0x00007c15

0000932c <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    932c:	b580      	push	{r7, lr}
    932e:	b082      	sub	sp, #8
    9330:	af00      	add	r7, sp, #0
    9332:	6078      	str	r0, [r7, #4]
    9334:	460b      	mov	r3, r1
    9336:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	2b00      	cmp	r3, #0
    933c:	d005      	beq.n	934a <_spi_m_async_enable_tx_complete+0x1e>
    933e:	687b      	ldr	r3, [r7, #4]
    9340:	681b      	ldr	r3, [r3, #0]
    9342:	2b00      	cmp	r3, #0
    9344:	d001      	beq.n	934a <_spi_m_async_enable_tx_complete+0x1e>
    9346:	2301      	movs	r3, #1
    9348:	e000      	b.n	934c <_spi_m_async_enable_tx_complete+0x20>
    934a:	2300      	movs	r3, #0
    934c:	f003 0301 	and.w	r3, r3, #1
    9350:	b2db      	uxtb	r3, r3
    9352:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    9356:	490b      	ldr	r1, [pc, #44]	; (9384 <_spi_m_async_enable_tx_complete+0x58>)
    9358:	4618      	mov	r0, r3
    935a:	4b0b      	ldr	r3, [pc, #44]	; (9388 <_spi_m_async_enable_tx_complete+0x5c>)
    935c:	4798      	blx	r3

	if (state) {
    935e:	78fb      	ldrb	r3, [r7, #3]
    9360:	2b00      	cmp	r3, #0
    9362:	d005      	beq.n	9370 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    9364:	687b      	ldr	r3, [r7, #4]
    9366:	681b      	ldr	r3, [r3, #0]
    9368:	4618      	mov	r0, r3
    936a:	4b08      	ldr	r3, [pc, #32]	; (938c <_spi_m_async_enable_tx_complete+0x60>)
    936c:	4798      	blx	r3
    936e:	e004      	b.n	937a <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    9370:	687b      	ldr	r3, [r7, #4]
    9372:	681b      	ldr	r3, [r3, #0]
    9374:	4618      	mov	r0, r3
    9376:	4b06      	ldr	r3, [pc, #24]	; (9390 <_spi_m_async_enable_tx_complete+0x64>)
    9378:	4798      	blx	r3
	}

	return ERR_NONE;
    937a:	2300      	movs	r3, #0
}
    937c:	4618      	mov	r0, r3
    937e:	3708      	adds	r7, #8
    9380:	46bd      	mov	sp, r7
    9382:	bd80      	pop	{r7, pc}
    9384:	00011c04 	.word	0x00011c04
    9388:	00005545 	.word	0x00005545
    938c:	00007bc7 	.word	0x00007bc7
    9390:	00007be1 	.word	0x00007be1

00009394 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    9394:	b580      	push	{r7, lr}
    9396:	b082      	sub	sp, #8
    9398:	af00      	add	r7, sp, #0
    939a:	6078      	str	r0, [r7, #4]
    939c:	460b      	mov	r3, r1
    939e:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    93a0:	687b      	ldr	r3, [r7, #4]
    93a2:	2b00      	cmp	r3, #0
    93a4:	d005      	beq.n	93b2 <_spi_m_async_write_one+0x1e>
    93a6:	687b      	ldr	r3, [r7, #4]
    93a8:	681b      	ldr	r3, [r3, #0]
    93aa:	2b00      	cmp	r3, #0
    93ac:	d001      	beq.n	93b2 <_spi_m_async_write_one+0x1e>
    93ae:	2301      	movs	r3, #1
    93b0:	e000      	b.n	93b4 <_spi_m_async_write_one+0x20>
    93b2:	2300      	movs	r3, #0
    93b4:	f003 0301 	and.w	r3, r3, #1
    93b8:	b2db      	uxtb	r3, r3
    93ba:	f640 32b2 	movw	r2, #2994	; 0xbb2
    93be:	4908      	ldr	r1, [pc, #32]	; (93e0 <_spi_m_async_write_one+0x4c>)
    93c0:	4618      	mov	r0, r3
    93c2:	4b08      	ldr	r3, [pc, #32]	; (93e4 <_spi_m_async_write_one+0x50>)
    93c4:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	681b      	ldr	r3, [r3, #0]
    93ca:	887a      	ldrh	r2, [r7, #2]
    93cc:	4611      	mov	r1, r2
    93ce:	4618      	mov	r0, r3
    93d0:	4b05      	ldr	r3, [pc, #20]	; (93e8 <_spi_m_async_write_one+0x54>)
    93d2:	4798      	blx	r3

	return ERR_NONE;
    93d4:	2300      	movs	r3, #0
}
    93d6:	4618      	mov	r0, r3
    93d8:	3708      	adds	r7, #8
    93da:	46bd      	mov	sp, r7
    93dc:	bd80      	pop	{r7, pc}
    93de:	bf00      	nop
    93e0:	00011c04 	.word	0x00011c04
    93e4:	00005545 	.word	0x00005545
    93e8:	00008009 	.word	0x00008009

000093ec <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    93ec:	b580      	push	{r7, lr}
    93ee:	b082      	sub	sp, #8
    93f0:	af00      	add	r7, sp, #0
    93f2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    93f4:	687b      	ldr	r3, [r7, #4]
    93f6:	2b00      	cmp	r3, #0
    93f8:	d005      	beq.n	9406 <_spi_m_async_read_one+0x1a>
    93fa:	687b      	ldr	r3, [r7, #4]
    93fc:	681b      	ldr	r3, [r3, #0]
    93fe:	2b00      	cmp	r3, #0
    9400:	d001      	beq.n	9406 <_spi_m_async_read_one+0x1a>
    9402:	2301      	movs	r3, #1
    9404:	e000      	b.n	9408 <_spi_m_async_read_one+0x1c>
    9406:	2300      	movs	r3, #0
    9408:	f003 0301 	and.w	r3, r3, #1
    940c:	b2db      	uxtb	r3, r3
    940e:	f640 32cd 	movw	r2, #3021	; 0xbcd
    9412:	4907      	ldr	r1, [pc, #28]	; (9430 <_spi_m_async_read_one+0x44>)
    9414:	4618      	mov	r0, r3
    9416:	4b07      	ldr	r3, [pc, #28]	; (9434 <_spi_m_async_read_one+0x48>)
    9418:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	681b      	ldr	r3, [r3, #0]
    941e:	4618      	mov	r0, r3
    9420:	4b05      	ldr	r3, [pc, #20]	; (9438 <_spi_m_async_read_one+0x4c>)
    9422:	4798      	blx	r3
    9424:	4603      	mov	r3, r0
    9426:	b29b      	uxth	r3, r3
}
    9428:	4618      	mov	r0, r3
    942a:	3708      	adds	r7, #8
    942c:	46bd      	mov	sp, r7
    942e:	bd80      	pop	{r7, pc}
    9430:	00011c04 	.word	0x00011c04
    9434:	00005545 	.word	0x00005545
    9438:	00008025 	.word	0x00008025

0000943c <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    943c:	b580      	push	{r7, lr}
    943e:	b086      	sub	sp, #24
    9440:	af00      	add	r7, sp, #0
    9442:	60f8      	str	r0, [r7, #12]
    9444:	460b      	mov	r3, r1
    9446:	607a      	str	r2, [r7, #4]
    9448:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    944a:	68fb      	ldr	r3, [r7, #12]
    944c:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    944e:	68fb      	ldr	r3, [r7, #12]
    9450:	2b00      	cmp	r3, #0
    9452:	d004      	beq.n	945e <_spi_m_async_register_callback+0x22>
    9454:	7afb      	ldrb	r3, [r7, #11]
    9456:	2b03      	cmp	r3, #3
    9458:	d801      	bhi.n	945e <_spi_m_async_register_callback+0x22>
    945a:	2301      	movs	r3, #1
    945c:	e000      	b.n	9460 <_spi_m_async_register_callback+0x24>
    945e:	2300      	movs	r3, #0
    9460:	f003 0301 	and.w	r3, r3, #1
    9464:	b2db      	uxtb	r3, r3
    9466:	f640 32e6 	movw	r2, #3046	; 0xbe6
    946a:	4909      	ldr	r1, [pc, #36]	; (9490 <_spi_m_async_register_callback+0x54>)
    946c:	4618      	mov	r0, r3
    946e:	4b09      	ldr	r3, [pc, #36]	; (9494 <_spi_m_async_register_callback+0x58>)
    9470:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    9472:	697b      	ldr	r3, [r7, #20]
    9474:	3308      	adds	r3, #8
    9476:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    9478:	7afb      	ldrb	r3, [r7, #11]
    947a:	009b      	lsls	r3, r3, #2
    947c:	693a      	ldr	r2, [r7, #16]
    947e:	4413      	add	r3, r2
    9480:	687a      	ldr	r2, [r7, #4]
    9482:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    9484:	2300      	movs	r3, #0
}
    9486:	4618      	mov	r0, r3
    9488:	3718      	adds	r7, #24
    948a:	46bd      	mov	sp, r7
    948c:	bd80      	pop	{r7, pc}
    948e:	bf00      	nop
    9490:	00011c04 	.word	0x00011c04
    9494:	00005545 	.word	0x00005545

00009498 <__NVIC_EnableIRQ>:
{
    9498:	b480      	push	{r7}
    949a:	b083      	sub	sp, #12
    949c:	af00      	add	r7, sp, #0
    949e:	4603      	mov	r3, r0
    94a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    94a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94a6:	2b00      	cmp	r3, #0
    94a8:	db0b      	blt.n	94c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94aa:	4909      	ldr	r1, [pc, #36]	; (94d0 <__NVIC_EnableIRQ+0x38>)
    94ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94b0:	095b      	lsrs	r3, r3, #5
    94b2:	88fa      	ldrh	r2, [r7, #6]
    94b4:	f002 021f 	and.w	r2, r2, #31
    94b8:	2001      	movs	r0, #1
    94ba:	fa00 f202 	lsl.w	r2, r0, r2
    94be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94c2:	bf00      	nop
    94c4:	370c      	adds	r7, #12
    94c6:	46bd      	mov	sp, r7
    94c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    94cc:	4770      	bx	lr
    94ce:	bf00      	nop
    94d0:	e000e100 	.word	0xe000e100

000094d4 <__NVIC_DisableIRQ>:
{
    94d4:	b480      	push	{r7}
    94d6:	b083      	sub	sp, #12
    94d8:	af00      	add	r7, sp, #0
    94da:	4603      	mov	r3, r0
    94dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    94de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94e2:	2b00      	cmp	r3, #0
    94e4:	db10      	blt.n	9508 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94e6:	490b      	ldr	r1, [pc, #44]	; (9514 <__NVIC_DisableIRQ+0x40>)
    94e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94ec:	095b      	lsrs	r3, r3, #5
    94ee:	88fa      	ldrh	r2, [r7, #6]
    94f0:	f002 021f 	and.w	r2, r2, #31
    94f4:	2001      	movs	r0, #1
    94f6:	fa00 f202 	lsl.w	r2, r0, r2
    94fa:	3320      	adds	r3, #32
    94fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9500:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9504:	f3bf 8f6f 	isb	sy
}
    9508:	bf00      	nop
    950a:	370c      	adds	r7, #12
    950c:	46bd      	mov	sp, r7
    950e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9512:	4770      	bx	lr
    9514:	e000e100 	.word	0xe000e100

00009518 <__NVIC_ClearPendingIRQ>:
{
    9518:	b480      	push	{r7}
    951a:	b083      	sub	sp, #12
    951c:	af00      	add	r7, sp, #0
    951e:	4603      	mov	r3, r0
    9520:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9526:	2b00      	cmp	r3, #0
    9528:	db0c      	blt.n	9544 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    952a:	4909      	ldr	r1, [pc, #36]	; (9550 <__NVIC_ClearPendingIRQ+0x38>)
    952c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9530:	095b      	lsrs	r3, r3, #5
    9532:	88fa      	ldrh	r2, [r7, #6]
    9534:	f002 021f 	and.w	r2, r2, #31
    9538:	2001      	movs	r0, #1
    953a:	fa00 f202 	lsl.w	r2, r0, r2
    953e:	3360      	adds	r3, #96	; 0x60
    9540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9544:	bf00      	nop
    9546:	370c      	adds	r7, #12
    9548:	46bd      	mov	sp, r7
    954a:	f85d 7b04 	ldr.w	r7, [sp], #4
    954e:	4770      	bx	lr
    9550:	e000e100 	.word	0xe000e100

00009554 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9554:	b480      	push	{r7}
    9556:	b083      	sub	sp, #12
    9558:	af00      	add	r7, sp, #0
    955a:	6078      	str	r0, [r7, #4]
    955c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    955e:	bf00      	nop
    9560:	687b      	ldr	r3, [r7, #4]
    9562:	691a      	ldr	r2, [r3, #16]
    9564:	683b      	ldr	r3, [r7, #0]
    9566:	4013      	ands	r3, r2
    9568:	2b00      	cmp	r3, #0
    956a:	d1f9      	bne.n	9560 <hri_tc_wait_for_sync+0xc>
	};
}
    956c:	bf00      	nop
    956e:	370c      	adds	r7, #12
    9570:	46bd      	mov	sp, r7
    9572:	f85d 7b04 	ldr.w	r7, [sp], #4
    9576:	4770      	bx	lr

00009578 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9578:	b480      	push	{r7}
    957a:	b083      	sub	sp, #12
    957c:	af00      	add	r7, sp, #0
    957e:	6078      	str	r0, [r7, #4]
    9580:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    9582:	687b      	ldr	r3, [r7, #4]
    9584:	691a      	ldr	r2, [r3, #16]
    9586:	683b      	ldr	r3, [r7, #0]
    9588:	4013      	ands	r3, r2
    958a:	2b00      	cmp	r3, #0
    958c:	bf14      	ite	ne
    958e:	2301      	movne	r3, #1
    9590:	2300      	moveq	r3, #0
    9592:	b2db      	uxtb	r3, r3
}
    9594:	4618      	mov	r0, r3
    9596:	370c      	adds	r7, #12
    9598:	46bd      	mov	sp, r7
    959a:	f85d 7b04 	ldr.w	r7, [sp], #4
    959e:	4770      	bx	lr

000095a0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    95a0:	b480      	push	{r7}
    95a2:	b083      	sub	sp, #12
    95a4:	af00      	add	r7, sp, #0
    95a6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    95a8:	687b      	ldr	r3, [r7, #4]
    95aa:	7a9b      	ldrb	r3, [r3, #10]
    95ac:	b2db      	uxtb	r3, r3
    95ae:	f003 0301 	and.w	r3, r3, #1
    95b2:	2b00      	cmp	r3, #0
    95b4:	bf14      	ite	ne
    95b6:	2301      	movne	r3, #1
    95b8:	2300      	moveq	r3, #0
    95ba:	b2db      	uxtb	r3, r3
}
    95bc:	4618      	mov	r0, r3
    95be:	370c      	adds	r7, #12
    95c0:	46bd      	mov	sp, r7
    95c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95c6:	4770      	bx	lr

000095c8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    95c8:	b480      	push	{r7}
    95ca:	b083      	sub	sp, #12
    95cc:	af00      	add	r7, sp, #0
    95ce:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    95d0:	687b      	ldr	r3, [r7, #4]
    95d2:	2201      	movs	r2, #1
    95d4:	729a      	strb	r2, [r3, #10]
}
    95d6:	bf00      	nop
    95d8:	370c      	adds	r7, #12
    95da:	46bd      	mov	sp, r7
    95dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    95e0:	4770      	bx	lr

000095e2 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    95e2:	b480      	push	{r7}
    95e4:	b083      	sub	sp, #12
    95e6:	af00      	add	r7, sp, #0
    95e8:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    95ea:	687b      	ldr	r3, [r7, #4]
    95ec:	2202      	movs	r2, #2
    95ee:	729a      	strb	r2, [r3, #10]
}
    95f0:	bf00      	nop
    95f2:	370c      	adds	r7, #12
    95f4:	46bd      	mov	sp, r7
    95f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    95fa:	4770      	bx	lr

000095fc <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    95fc:	b480      	push	{r7}
    95fe:	b083      	sub	sp, #12
    9600:	af00      	add	r7, sp, #0
    9602:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9604:	687b      	ldr	r3, [r7, #4]
    9606:	2201      	movs	r2, #1
    9608:	725a      	strb	r2, [r3, #9]
}
    960a:	bf00      	nop
    960c:	370c      	adds	r7, #12
    960e:	46bd      	mov	sp, r7
    9610:	f85d 7b04 	ldr.w	r7, [sp], #4
    9614:	4770      	bx	lr

00009616 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    9616:	b480      	push	{r7}
    9618:	b083      	sub	sp, #12
    961a:	af00      	add	r7, sp, #0
    961c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    961e:	687b      	ldr	r3, [r7, #4]
    9620:	7a5b      	ldrb	r3, [r3, #9]
    9622:	b2db      	uxtb	r3, r3
    9624:	085b      	lsrs	r3, r3, #1
    9626:	f003 0301 	and.w	r3, r3, #1
    962a:	2b00      	cmp	r3, #0
    962c:	bf14      	ite	ne
    962e:	2301      	movne	r3, #1
    9630:	2300      	moveq	r3, #0
    9632:	b2db      	uxtb	r3, r3
}
    9634:	4618      	mov	r0, r3
    9636:	370c      	adds	r7, #12
    9638:	46bd      	mov	sp, r7
    963a:	f85d 7b04 	ldr.w	r7, [sp], #4
    963e:	4770      	bx	lr

00009640 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9640:	b580      	push	{r7, lr}
    9642:	b082      	sub	sp, #8
    9644:	af00      	add	r7, sp, #0
    9646:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9648:	687b      	ldr	r3, [r7, #4]
    964a:	681b      	ldr	r3, [r3, #0]
    964c:	f043 0202 	orr.w	r2, r3, #2
    9650:	687b      	ldr	r3, [r7, #4]
    9652:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9654:	2103      	movs	r1, #3
    9656:	6878      	ldr	r0, [r7, #4]
    9658:	4b02      	ldr	r3, [pc, #8]	; (9664 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    965a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    965c:	bf00      	nop
    965e:	3708      	adds	r7, #8
    9660:	46bd      	mov	sp, r7
    9662:	bd80      	pop	{r7, pc}
    9664:	00009555 	.word	0x00009555

00009668 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9668:	b580      	push	{r7, lr}
    966a:	b084      	sub	sp, #16
    966c:	af00      	add	r7, sp, #0
    966e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9670:	2103      	movs	r1, #3
    9672:	6878      	ldr	r0, [r7, #4]
    9674:	4b09      	ldr	r3, [pc, #36]	; (969c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    9676:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9678:	687b      	ldr	r3, [r7, #4]
    967a:	681b      	ldr	r3, [r3, #0]
    967c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    967e:	68fb      	ldr	r3, [r7, #12]
    9680:	085b      	lsrs	r3, r3, #1
    9682:	f003 0301 	and.w	r3, r3, #1
    9686:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9688:	68fb      	ldr	r3, [r7, #12]
    968a:	2b00      	cmp	r3, #0
    968c:	bf14      	ite	ne
    968e:	2301      	movne	r3, #1
    9690:	2300      	moveq	r3, #0
    9692:	b2db      	uxtb	r3, r3
}
    9694:	4618      	mov	r0, r3
    9696:	3710      	adds	r7, #16
    9698:	46bd      	mov	sp, r7
    969a:	bd80      	pop	{r7, pc}
    969c:	00009555 	.word	0x00009555

000096a0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	b082      	sub	sp, #8
    96a4:	af00      	add	r7, sp, #0
    96a6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    96a8:	687b      	ldr	r3, [r7, #4]
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	f023 0202 	bic.w	r2, r3, #2
    96b0:	687b      	ldr	r3, [r7, #4]
    96b2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    96b4:	2103      	movs	r1, #3
    96b6:	6878      	ldr	r0, [r7, #4]
    96b8:	4b02      	ldr	r3, [pc, #8]	; (96c4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    96ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    96bc:	bf00      	nop
    96be:	3708      	adds	r7, #8
    96c0:	46bd      	mov	sp, r7
    96c2:	bd80      	pop	{r7, pc}
    96c4:	00009555 	.word	0x00009555

000096c8 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    96c8:	b580      	push	{r7, lr}
    96ca:	b084      	sub	sp, #16
    96cc:	af00      	add	r7, sp, #0
    96ce:	6078      	str	r0, [r7, #4]
    96d0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    96d2:	2103      	movs	r1, #3
    96d4:	6878      	ldr	r0, [r7, #4]
    96d6:	4b07      	ldr	r3, [pc, #28]	; (96f4 <hri_tc_get_CTRLA_reg+0x2c>)
    96d8:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	681b      	ldr	r3, [r3, #0]
    96de:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    96e0:	68fa      	ldr	r2, [r7, #12]
    96e2:	683b      	ldr	r3, [r7, #0]
    96e4:	4013      	ands	r3, r2
    96e6:	60fb      	str	r3, [r7, #12]
	return tmp;
    96e8:	68fb      	ldr	r3, [r7, #12]
}
    96ea:	4618      	mov	r0, r3
    96ec:	3710      	adds	r7, #16
    96ee:	46bd      	mov	sp, r7
    96f0:	bd80      	pop	{r7, pc}
    96f2:	bf00      	nop
    96f4:	00009555 	.word	0x00009555

000096f8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    96f8:	b580      	push	{r7, lr}
    96fa:	b082      	sub	sp, #8
    96fc:	af00      	add	r7, sp, #0
    96fe:	6078      	str	r0, [r7, #4]
    9700:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	683a      	ldr	r2, [r7, #0]
    9706:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9708:	2103      	movs	r1, #3
    970a:	6878      	ldr	r0, [r7, #4]
    970c:	4b02      	ldr	r3, [pc, #8]	; (9718 <hri_tc_write_CTRLA_reg+0x20>)
    970e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9710:	bf00      	nop
    9712:	3708      	adds	r7, #8
    9714:	46bd      	mov	sp, r7
    9716:	bd80      	pop	{r7, pc}
    9718:	00009555 	.word	0x00009555

0000971c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    971c:	b480      	push	{r7}
    971e:	b083      	sub	sp, #12
    9720:	af00      	add	r7, sp, #0
    9722:	6078      	str	r0, [r7, #4]
    9724:	460b      	mov	r3, r1
    9726:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    9728:	687b      	ldr	r3, [r7, #4]
    972a:	887a      	ldrh	r2, [r7, #2]
    972c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    972e:	bf00      	nop
    9730:	370c      	adds	r7, #12
    9732:	46bd      	mov	sp, r7
    9734:	f85d 7b04 	ldr.w	r7, [sp], #4
    9738:	4770      	bx	lr

0000973a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    973a:	b480      	push	{r7}
    973c:	b083      	sub	sp, #12
    973e:	af00      	add	r7, sp, #0
    9740:	6078      	str	r0, [r7, #4]
    9742:	460b      	mov	r3, r1
    9744:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    9746:	687b      	ldr	r3, [r7, #4]
    9748:	78fa      	ldrb	r2, [r7, #3]
    974a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    974c:	bf00      	nop
    974e:	370c      	adds	r7, #12
    9750:	46bd      	mov	sp, r7
    9752:	f85d 7b04 	ldr.w	r7, [sp], #4
    9756:	4770      	bx	lr

00009758 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    9758:	b480      	push	{r7}
    975a:	b083      	sub	sp, #12
    975c:	af00      	add	r7, sp, #0
    975e:	6078      	str	r0, [r7, #4]
    9760:	460b      	mov	r3, r1
    9762:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9764:	687b      	ldr	r3, [r7, #4]
    9766:	78fa      	ldrb	r2, [r7, #3]
    9768:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    976a:	bf00      	nop
    976c:	370c      	adds	r7, #12
    976e:	46bd      	mov	sp, r7
    9770:	f85d 7b04 	ldr.w	r7, [sp], #4
    9774:	4770      	bx	lr
	...

00009778 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    9778:	b580      	push	{r7, lr}
    977a:	b082      	sub	sp, #8
    977c:	af00      	add	r7, sp, #0
    977e:	6078      	str	r0, [r7, #4]
    9780:	460b      	mov	r3, r1
    9782:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	78fa      	ldrb	r2, [r7, #3]
    9788:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    978a:	2120      	movs	r1, #32
    978c:	6878      	ldr	r0, [r7, #4]
    978e:	4b03      	ldr	r3, [pc, #12]	; (979c <hri_tccount8_write_PER_reg+0x24>)
    9790:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9792:	bf00      	nop
    9794:	3708      	adds	r7, #8
    9796:	46bd      	mov	sp, r7
    9798:	bd80      	pop	{r7, pc}
    979a:	bf00      	nop
    979c:	00009555 	.word	0x00009555

000097a0 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    97a0:	b580      	push	{r7, lr}
    97a2:	b082      	sub	sp, #8
    97a4:	af00      	add	r7, sp, #0
    97a6:	6078      	str	r0, [r7, #4]
    97a8:	460b      	mov	r3, r1
    97aa:	70fb      	strb	r3, [r7, #3]
    97ac:	4613      	mov	r3, r2
    97ae:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    97b0:	78fb      	ldrb	r3, [r7, #3]
    97b2:	687a      	ldr	r2, [r7, #4]
    97b4:	4413      	add	r3, r2
    97b6:	78ba      	ldrb	r2, [r7, #2]
    97b8:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    97ba:	21c0      	movs	r1, #192	; 0xc0
    97bc:	6878      	ldr	r0, [r7, #4]
    97be:	4b03      	ldr	r3, [pc, #12]	; (97cc <hri_tccount8_write_CC_reg+0x2c>)
    97c0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    97c2:	bf00      	nop
    97c4:	3708      	adds	r7, #8
    97c6:	46bd      	mov	sp, r7
    97c8:	bd80      	pop	{r7, pc}
    97ca:	bf00      	nop
    97cc:	00009555 	.word	0x00009555

000097d0 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    97d0:	b580      	push	{r7, lr}
    97d2:	b082      	sub	sp, #8
    97d4:	af00      	add	r7, sp, #0
    97d6:	6078      	str	r0, [r7, #4]
    97d8:	460b      	mov	r3, r1
    97da:	70fb      	strb	r3, [r7, #3]
    97dc:	4613      	mov	r3, r2
    97de:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    97e0:	78fb      	ldrb	r3, [r7, #3]
    97e2:	687a      	ldr	r2, [r7, #4]
    97e4:	330c      	adds	r3, #12
    97e6:	005b      	lsls	r3, r3, #1
    97e8:	4413      	add	r3, r2
    97ea:	883a      	ldrh	r2, [r7, #0]
    97ec:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    97ee:	21c0      	movs	r1, #192	; 0xc0
    97f0:	6878      	ldr	r0, [r7, #4]
    97f2:	4b03      	ldr	r3, [pc, #12]	; (9800 <hri_tccount16_write_CC_reg+0x30>)
    97f4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    97f6:	bf00      	nop
    97f8:	3708      	adds	r7, #8
    97fa:	46bd      	mov	sp, r7
    97fc:	bd80      	pop	{r7, pc}
    97fe:	bf00      	nop
    9800:	00009555 	.word	0x00009555

00009804 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    9804:	b580      	push	{r7, lr}
    9806:	b084      	sub	sp, #16
    9808:	af00      	add	r7, sp, #0
    980a:	60f8      	str	r0, [r7, #12]
    980c:	460b      	mov	r3, r1
    980e:	607a      	str	r2, [r7, #4]
    9810:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    9812:	7afb      	ldrb	r3, [r7, #11]
    9814:	68fa      	ldr	r2, [r7, #12]
    9816:	3306      	adds	r3, #6
    9818:	009b      	lsls	r3, r3, #2
    981a:	4413      	add	r3, r2
    981c:	687a      	ldr	r2, [r7, #4]
    981e:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9820:	21c0      	movs	r1, #192	; 0xc0
    9822:	68f8      	ldr	r0, [r7, #12]
    9824:	4b02      	ldr	r3, [pc, #8]	; (9830 <hri_tccount32_write_CC_reg+0x2c>)
    9826:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9828:	bf00      	nop
    982a:	3710      	adds	r7, #16
    982c:	46bd      	mov	sp, r7
    982e:	bd80      	pop	{r7, pc}
    9830:	00009555 	.word	0x00009555

00009834 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    9834:	b580      	push	{r7, lr}
    9836:	b084      	sub	sp, #16
    9838:	af00      	add	r7, sp, #0
    983a:	6078      	str	r0, [r7, #4]
    983c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    983e:	6838      	ldr	r0, [r7, #0]
    9840:	4b93      	ldr	r3, [pc, #588]	; (9a90 <_timer_init+0x25c>)
    9842:	4798      	blx	r3
    9844:	4603      	mov	r3, r0
    9846:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	683a      	ldr	r2, [r7, #0]
    984c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    984e:	2295      	movs	r2, #149	; 0x95
    9850:	4990      	ldr	r1, [pc, #576]	; (9a94 <_timer_init+0x260>)
    9852:	2001      	movs	r0, #1
    9854:	4b90      	ldr	r3, [pc, #576]	; (9a98 <_timer_init+0x264>)
    9856:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9858:	2101      	movs	r1, #1
    985a:	6838      	ldr	r0, [r7, #0]
    985c:	4b8f      	ldr	r3, [pc, #572]	; (9a9c <_timer_init+0x268>)
    985e:	4798      	blx	r3
    9860:	4603      	mov	r3, r0
    9862:	f083 0301 	eor.w	r3, r3, #1
    9866:	b2db      	uxtb	r3, r3
    9868:	2b00      	cmp	r3, #0
    986a:	d011      	beq.n	9890 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    986c:	2102      	movs	r1, #2
    986e:	6838      	ldr	r0, [r7, #0]
    9870:	4b8b      	ldr	r3, [pc, #556]	; (9aa0 <_timer_init+0x26c>)
    9872:	4798      	blx	r3
    9874:	4603      	mov	r3, r0
    9876:	2b00      	cmp	r3, #0
    9878:	d006      	beq.n	9888 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    987a:	6838      	ldr	r0, [r7, #0]
    987c:	4b89      	ldr	r3, [pc, #548]	; (9aa4 <_timer_init+0x270>)
    987e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9880:	2102      	movs	r1, #2
    9882:	6838      	ldr	r0, [r7, #0]
    9884:	4b88      	ldr	r3, [pc, #544]	; (9aa8 <_timer_init+0x274>)
    9886:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9888:	2101      	movs	r1, #1
    988a:	6838      	ldr	r0, [r7, #0]
    988c:	4b87      	ldr	r3, [pc, #540]	; (9aac <_timer_init+0x278>)
    988e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9890:	2101      	movs	r1, #1
    9892:	6838      	ldr	r0, [r7, #0]
    9894:	4b84      	ldr	r3, [pc, #528]	; (9aa8 <_timer_init+0x274>)
    9896:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9898:	f997 200f 	ldrsb.w	r2, [r7, #15]
    989c:	4984      	ldr	r1, [pc, #528]	; (9ab0 <_timer_init+0x27c>)
    989e:	4613      	mov	r3, r2
    98a0:	009b      	lsls	r3, r3, #2
    98a2:	4413      	add	r3, r2
    98a4:	009b      	lsls	r3, r3, #2
    98a6:	440b      	add	r3, r1
    98a8:	3304      	adds	r3, #4
    98aa:	681b      	ldr	r3, [r3, #0]
    98ac:	4619      	mov	r1, r3
    98ae:	6838      	ldr	r0, [r7, #0]
    98b0:	4b7e      	ldr	r3, [pc, #504]	; (9aac <_timer_init+0x278>)
    98b2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    98b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98b8:	497d      	ldr	r1, [pc, #500]	; (9ab0 <_timer_init+0x27c>)
    98ba:	4613      	mov	r3, r2
    98bc:	009b      	lsls	r3, r3, #2
    98be:	4413      	add	r3, r2
    98c0:	009b      	lsls	r3, r3, #2
    98c2:	440b      	add	r3, r1
    98c4:	330a      	adds	r3, #10
    98c6:	781b      	ldrb	r3, [r3, #0]
    98c8:	4619      	mov	r1, r3
    98ca:	6838      	ldr	r0, [r7, #0]
    98cc:	4b79      	ldr	r3, [pc, #484]	; (9ab4 <_timer_init+0x280>)
    98ce:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    98d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98d4:	4976      	ldr	r1, [pc, #472]	; (9ab0 <_timer_init+0x27c>)
    98d6:	4613      	mov	r3, r2
    98d8:	009b      	lsls	r3, r3, #2
    98da:	4413      	add	r3, r2
    98dc:	009b      	lsls	r3, r3, #2
    98de:	440b      	add	r3, r1
    98e0:	3308      	adds	r3, #8
    98e2:	881b      	ldrh	r3, [r3, #0]
    98e4:	4619      	mov	r1, r3
    98e6:	6838      	ldr	r0, [r7, #0]
    98e8:	4b73      	ldr	r3, [pc, #460]	; (9ab8 <_timer_init+0x284>)
    98ea:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    98ec:	2101      	movs	r1, #1
    98ee:	6838      	ldr	r0, [r7, #0]
    98f0:	4b72      	ldr	r3, [pc, #456]	; (9abc <_timer_init+0x288>)
    98f2:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    98f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    98f8:	496d      	ldr	r1, [pc, #436]	; (9ab0 <_timer_init+0x27c>)
    98fa:	4613      	mov	r3, r2
    98fc:	009b      	lsls	r3, r3, #2
    98fe:	4413      	add	r3, r2
    9900:	009b      	lsls	r3, r3, #2
    9902:	440b      	add	r3, r1
    9904:	3304      	adds	r3, #4
    9906:	681b      	ldr	r3, [r3, #0]
    9908:	f003 030c 	and.w	r3, r3, #12
    990c:	2b08      	cmp	r3, #8
    990e:	d11e      	bne.n	994e <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9910:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9914:	4966      	ldr	r1, [pc, #408]	; (9ab0 <_timer_init+0x27c>)
    9916:	4613      	mov	r3, r2
    9918:	009b      	lsls	r3, r3, #2
    991a:	4413      	add	r3, r2
    991c:	009b      	lsls	r3, r3, #2
    991e:	440b      	add	r3, r1
    9920:	330c      	adds	r3, #12
    9922:	681b      	ldr	r3, [r3, #0]
    9924:	461a      	mov	r2, r3
    9926:	2100      	movs	r1, #0
    9928:	6838      	ldr	r0, [r7, #0]
    992a:	4b65      	ldr	r3, [pc, #404]	; (9ac0 <_timer_init+0x28c>)
    992c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    992e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9932:	495f      	ldr	r1, [pc, #380]	; (9ab0 <_timer_init+0x27c>)
    9934:	4613      	mov	r3, r2
    9936:	009b      	lsls	r3, r3, #2
    9938:	4413      	add	r3, r2
    993a:	009b      	lsls	r3, r3, #2
    993c:	440b      	add	r3, r1
    993e:	3310      	adds	r3, #16
    9940:	681b      	ldr	r3, [r3, #0]
    9942:	461a      	mov	r2, r3
    9944:	2101      	movs	r1, #1
    9946:	6838      	ldr	r0, [r7, #0]
    9948:	4b5d      	ldr	r3, [pc, #372]	; (9ac0 <_timer_init+0x28c>)
    994a:	4798      	blx	r3
    994c:	e06a      	b.n	9a24 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    994e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9952:	4957      	ldr	r1, [pc, #348]	; (9ab0 <_timer_init+0x27c>)
    9954:	4613      	mov	r3, r2
    9956:	009b      	lsls	r3, r3, #2
    9958:	4413      	add	r3, r2
    995a:	009b      	lsls	r3, r3, #2
    995c:	440b      	add	r3, r1
    995e:	3304      	adds	r3, #4
    9960:	681b      	ldr	r3, [r3, #0]
    9962:	f003 030c 	and.w	r3, r3, #12
    9966:	2b00      	cmp	r3, #0
    9968:	d120      	bne.n	99ac <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    996a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    996e:	4950      	ldr	r1, [pc, #320]	; (9ab0 <_timer_init+0x27c>)
    9970:	4613      	mov	r3, r2
    9972:	009b      	lsls	r3, r3, #2
    9974:	4413      	add	r3, r2
    9976:	009b      	lsls	r3, r3, #2
    9978:	440b      	add	r3, r1
    997a:	330c      	adds	r3, #12
    997c:	681b      	ldr	r3, [r3, #0]
    997e:	b29b      	uxth	r3, r3
    9980:	461a      	mov	r2, r3
    9982:	2100      	movs	r1, #0
    9984:	6838      	ldr	r0, [r7, #0]
    9986:	4b4f      	ldr	r3, [pc, #316]	; (9ac4 <_timer_init+0x290>)
    9988:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    998a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    998e:	4948      	ldr	r1, [pc, #288]	; (9ab0 <_timer_init+0x27c>)
    9990:	4613      	mov	r3, r2
    9992:	009b      	lsls	r3, r3, #2
    9994:	4413      	add	r3, r2
    9996:	009b      	lsls	r3, r3, #2
    9998:	440b      	add	r3, r1
    999a:	3310      	adds	r3, #16
    999c:	681b      	ldr	r3, [r3, #0]
    999e:	b29b      	uxth	r3, r3
    99a0:	461a      	mov	r2, r3
    99a2:	2101      	movs	r1, #1
    99a4:	6838      	ldr	r0, [r7, #0]
    99a6:	4b47      	ldr	r3, [pc, #284]	; (9ac4 <_timer_init+0x290>)
    99a8:	4798      	blx	r3
    99aa:	e03b      	b.n	9a24 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    99ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99b0:	493f      	ldr	r1, [pc, #252]	; (9ab0 <_timer_init+0x27c>)
    99b2:	4613      	mov	r3, r2
    99b4:	009b      	lsls	r3, r3, #2
    99b6:	4413      	add	r3, r2
    99b8:	009b      	lsls	r3, r3, #2
    99ba:	440b      	add	r3, r1
    99bc:	3304      	adds	r3, #4
    99be:	681b      	ldr	r3, [r3, #0]
    99c0:	f003 030c 	and.w	r3, r3, #12
    99c4:	2b04      	cmp	r3, #4
    99c6:	d12d      	bne.n	9a24 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    99c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99cc:	4938      	ldr	r1, [pc, #224]	; (9ab0 <_timer_init+0x27c>)
    99ce:	4613      	mov	r3, r2
    99d0:	009b      	lsls	r3, r3, #2
    99d2:	4413      	add	r3, r2
    99d4:	009b      	lsls	r3, r3, #2
    99d6:	440b      	add	r3, r1
    99d8:	330c      	adds	r3, #12
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	b2db      	uxtb	r3, r3
    99de:	461a      	mov	r2, r3
    99e0:	2100      	movs	r1, #0
    99e2:	6838      	ldr	r0, [r7, #0]
    99e4:	4b38      	ldr	r3, [pc, #224]	; (9ac8 <_timer_init+0x294>)
    99e6:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    99e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99ec:	4930      	ldr	r1, [pc, #192]	; (9ab0 <_timer_init+0x27c>)
    99ee:	4613      	mov	r3, r2
    99f0:	009b      	lsls	r3, r3, #2
    99f2:	4413      	add	r3, r2
    99f4:	009b      	lsls	r3, r3, #2
    99f6:	440b      	add	r3, r1
    99f8:	3310      	adds	r3, #16
    99fa:	681b      	ldr	r3, [r3, #0]
    99fc:	b2db      	uxtb	r3, r3
    99fe:	461a      	mov	r2, r3
    9a00:	2101      	movs	r1, #1
    9a02:	6838      	ldr	r0, [r7, #0]
    9a04:	4b30      	ldr	r3, [pc, #192]	; (9ac8 <_timer_init+0x294>)
    9a06:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    9a08:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a0c:	4928      	ldr	r1, [pc, #160]	; (9ab0 <_timer_init+0x27c>)
    9a0e:	4613      	mov	r3, r2
    9a10:	009b      	lsls	r3, r3, #2
    9a12:	4413      	add	r3, r2
    9a14:	009b      	lsls	r3, r3, #2
    9a16:	440b      	add	r3, r1
    9a18:	330b      	adds	r3, #11
    9a1a:	781b      	ldrb	r3, [r3, #0]
    9a1c:	4619      	mov	r1, r3
    9a1e:	6838      	ldr	r0, [r7, #0]
    9a20:	4b2a      	ldr	r3, [pc, #168]	; (9acc <_timer_init+0x298>)
    9a22:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    9a24:	6838      	ldr	r0, [r7, #0]
    9a26:	4b2a      	ldr	r3, [pc, #168]	; (9ad0 <_timer_init+0x29c>)
    9a28:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    9a2a:	6879      	ldr	r1, [r7, #4]
    9a2c:	6838      	ldr	r0, [r7, #0]
    9a2e:	4b29      	ldr	r3, [pc, #164]	; (9ad4 <_timer_init+0x2a0>)
    9a30:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9a32:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a36:	491e      	ldr	r1, [pc, #120]	; (9ab0 <_timer_init+0x27c>)
    9a38:	4613      	mov	r3, r2
    9a3a:	009b      	lsls	r3, r3, #2
    9a3c:	4413      	add	r3, r2
    9a3e:	009b      	lsls	r3, r3, #2
    9a40:	440b      	add	r3, r1
    9a42:	3302      	adds	r3, #2
    9a44:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a48:	4618      	mov	r0, r3
    9a4a:	4b23      	ldr	r3, [pc, #140]	; (9ad8 <_timer_init+0x2a4>)
    9a4c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9a4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a52:	4917      	ldr	r1, [pc, #92]	; (9ab0 <_timer_init+0x27c>)
    9a54:	4613      	mov	r3, r2
    9a56:	009b      	lsls	r3, r3, #2
    9a58:	4413      	add	r3, r2
    9a5a:	009b      	lsls	r3, r3, #2
    9a5c:	440b      	add	r3, r1
    9a5e:	3302      	adds	r3, #2
    9a60:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a64:	4618      	mov	r0, r3
    9a66:	4b1d      	ldr	r3, [pc, #116]	; (9adc <_timer_init+0x2a8>)
    9a68:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9a6a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a6e:	4910      	ldr	r1, [pc, #64]	; (9ab0 <_timer_init+0x27c>)
    9a70:	4613      	mov	r3, r2
    9a72:	009b      	lsls	r3, r3, #2
    9a74:	4413      	add	r3, r2
    9a76:	009b      	lsls	r3, r3, #2
    9a78:	440b      	add	r3, r1
    9a7a:	3302      	adds	r3, #2
    9a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a80:	4618      	mov	r0, r3
    9a82:	4b17      	ldr	r3, [pc, #92]	; (9ae0 <_timer_init+0x2ac>)
    9a84:	4798      	blx	r3

	return ERR_NONE;
    9a86:	2300      	movs	r3, #0
}
    9a88:	4618      	mov	r0, r3
    9a8a:	3710      	adds	r7, #16
    9a8c:	46bd      	mov	sp, r7
    9a8e:	bd80      	pop	{r7, pc}
    9a90:	00009f51 	.word	0x00009f51
    9a94:	00011c64 	.word	0x00011c64
    9a98:	00005545 	.word	0x00005545
    9a9c:	00009579 	.word	0x00009579
    9aa0:	000096c9 	.word	0x000096c9
    9aa4:	000096a1 	.word	0x000096a1
    9aa8:	00009555 	.word	0x00009555
    9aac:	000096f9 	.word	0x000096f9
    9ab0:	20000048 	.word	0x20000048
    9ab4:	00009759 	.word	0x00009759
    9ab8:	0000971d 	.word	0x0000971d
    9abc:	0000973b 	.word	0x0000973b
    9ac0:	00009805 	.word	0x00009805
    9ac4:	000097d1 	.word	0x000097d1
    9ac8:	000097a1 	.word	0x000097a1
    9acc:	00009779 	.word	0x00009779
    9ad0:	000095fd 	.word	0x000095fd
    9ad4:	00009fb9 	.word	0x00009fb9
    9ad8:	000094d5 	.word	0x000094d5
    9adc:	00009519 	.word	0x00009519
    9ae0:	00009499 	.word	0x00009499

00009ae4 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b084      	sub	sp, #16
    9ae8:	af00      	add	r7, sp, #0
    9aea:	6078      	str	r0, [r7, #4]
    9aec:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9aee:	6838      	ldr	r0, [r7, #0]
    9af0:	4b73      	ldr	r3, [pc, #460]	; (9cc0 <_pwm_init+0x1dc>)
    9af2:	4798      	blx	r3
    9af4:	4603      	mov	r3, r0
    9af6:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    9af8:	687b      	ldr	r3, [r7, #4]
    9afa:	683a      	ldr	r2, [r7, #0]
    9afc:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9afe:	2101      	movs	r1, #1
    9b00:	6838      	ldr	r0, [r7, #0]
    9b02:	4b70      	ldr	r3, [pc, #448]	; (9cc4 <_pwm_init+0x1e0>)
    9b04:	4798      	blx	r3
    9b06:	4603      	mov	r3, r0
    9b08:	f083 0301 	eor.w	r3, r3, #1
    9b0c:	b2db      	uxtb	r3, r3
    9b0e:	2b00      	cmp	r3, #0
    9b10:	d011      	beq.n	9b36 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9b12:	2102      	movs	r1, #2
    9b14:	6838      	ldr	r0, [r7, #0]
    9b16:	4b6c      	ldr	r3, [pc, #432]	; (9cc8 <_pwm_init+0x1e4>)
    9b18:	4798      	blx	r3
    9b1a:	4603      	mov	r3, r0
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d006      	beq.n	9b2e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9b20:	6838      	ldr	r0, [r7, #0]
    9b22:	4b6a      	ldr	r3, [pc, #424]	; (9ccc <_pwm_init+0x1e8>)
    9b24:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9b26:	2102      	movs	r1, #2
    9b28:	6838      	ldr	r0, [r7, #0]
    9b2a:	4b69      	ldr	r3, [pc, #420]	; (9cd0 <_pwm_init+0x1ec>)
    9b2c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9b2e:	2101      	movs	r1, #1
    9b30:	6838      	ldr	r0, [r7, #0]
    9b32:	4b68      	ldr	r3, [pc, #416]	; (9cd4 <_pwm_init+0x1f0>)
    9b34:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9b36:	2101      	movs	r1, #1
    9b38:	6838      	ldr	r0, [r7, #0]
    9b3a:	4b65      	ldr	r3, [pc, #404]	; (9cd0 <_pwm_init+0x1ec>)
    9b3c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9b3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b42:	4965      	ldr	r1, [pc, #404]	; (9cd8 <_pwm_init+0x1f4>)
    9b44:	4613      	mov	r3, r2
    9b46:	009b      	lsls	r3, r3, #2
    9b48:	4413      	add	r3, r2
    9b4a:	009b      	lsls	r3, r3, #2
    9b4c:	440b      	add	r3, r1
    9b4e:	3304      	adds	r3, #4
    9b50:	681b      	ldr	r3, [r3, #0]
    9b52:	4619      	mov	r1, r3
    9b54:	6838      	ldr	r0, [r7, #0]
    9b56:	4b5f      	ldr	r3, [pc, #380]	; (9cd4 <_pwm_init+0x1f0>)
    9b58:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9b5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b5e:	495e      	ldr	r1, [pc, #376]	; (9cd8 <_pwm_init+0x1f4>)
    9b60:	4613      	mov	r3, r2
    9b62:	009b      	lsls	r3, r3, #2
    9b64:	4413      	add	r3, r2
    9b66:	009b      	lsls	r3, r3, #2
    9b68:	440b      	add	r3, r1
    9b6a:	330a      	adds	r3, #10
    9b6c:	781b      	ldrb	r3, [r3, #0]
    9b6e:	4619      	mov	r1, r3
    9b70:	6838      	ldr	r0, [r7, #0]
    9b72:	4b5a      	ldr	r3, [pc, #360]	; (9cdc <_pwm_init+0x1f8>)
    9b74:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9b76:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b7a:	4957      	ldr	r1, [pc, #348]	; (9cd8 <_pwm_init+0x1f4>)
    9b7c:	4613      	mov	r3, r2
    9b7e:	009b      	lsls	r3, r3, #2
    9b80:	4413      	add	r3, r2
    9b82:	009b      	lsls	r3, r3, #2
    9b84:	440b      	add	r3, r1
    9b86:	3308      	adds	r3, #8
    9b88:	881b      	ldrh	r3, [r3, #0]
    9b8a:	4619      	mov	r1, r3
    9b8c:	6838      	ldr	r0, [r7, #0]
    9b8e:	4b54      	ldr	r3, [pc, #336]	; (9ce0 <_pwm_init+0x1fc>)
    9b90:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    9b92:	2103      	movs	r1, #3
    9b94:	6838      	ldr	r0, [r7, #0]
    9b96:	4b53      	ldr	r3, [pc, #332]	; (9ce4 <_pwm_init+0x200>)
    9b98:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9b9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b9e:	494e      	ldr	r1, [pc, #312]	; (9cd8 <_pwm_init+0x1f4>)
    9ba0:	4613      	mov	r3, r2
    9ba2:	009b      	lsls	r3, r3, #2
    9ba4:	4413      	add	r3, r2
    9ba6:	009b      	lsls	r3, r3, #2
    9ba8:	440b      	add	r3, r1
    9baa:	3304      	adds	r3, #4
    9bac:	681b      	ldr	r3, [r3, #0]
    9bae:	f003 030c 	and.w	r3, r3, #12
    9bb2:	2b08      	cmp	r3, #8
    9bb4:	d11e      	bne.n	9bf4 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9bb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bba:	4947      	ldr	r1, [pc, #284]	; (9cd8 <_pwm_init+0x1f4>)
    9bbc:	4613      	mov	r3, r2
    9bbe:	009b      	lsls	r3, r3, #2
    9bc0:	4413      	add	r3, r2
    9bc2:	009b      	lsls	r3, r3, #2
    9bc4:	440b      	add	r3, r1
    9bc6:	330c      	adds	r3, #12
    9bc8:	681b      	ldr	r3, [r3, #0]
    9bca:	461a      	mov	r2, r3
    9bcc:	2100      	movs	r1, #0
    9bce:	6838      	ldr	r0, [r7, #0]
    9bd0:	4b45      	ldr	r3, [pc, #276]	; (9ce8 <_pwm_init+0x204>)
    9bd2:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9bd4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bd8:	493f      	ldr	r1, [pc, #252]	; (9cd8 <_pwm_init+0x1f4>)
    9bda:	4613      	mov	r3, r2
    9bdc:	009b      	lsls	r3, r3, #2
    9bde:	4413      	add	r3, r2
    9be0:	009b      	lsls	r3, r3, #2
    9be2:	440b      	add	r3, r1
    9be4:	3310      	adds	r3, #16
    9be6:	681b      	ldr	r3, [r3, #0]
    9be8:	461a      	mov	r2, r3
    9bea:	2101      	movs	r1, #1
    9bec:	6838      	ldr	r0, [r7, #0]
    9bee:	4b3e      	ldr	r3, [pc, #248]	; (9ce8 <_pwm_init+0x204>)
    9bf0:	4798      	blx	r3
    9bf2:	e031      	b.n	9c58 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9bf4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bf8:	4937      	ldr	r1, [pc, #220]	; (9cd8 <_pwm_init+0x1f4>)
    9bfa:	4613      	mov	r3, r2
    9bfc:	009b      	lsls	r3, r3, #2
    9bfe:	4413      	add	r3, r2
    9c00:	009b      	lsls	r3, r3, #2
    9c02:	440b      	add	r3, r1
    9c04:	3304      	adds	r3, #4
    9c06:	681b      	ldr	r3, [r3, #0]
    9c08:	f003 030c 	and.w	r3, r3, #12
    9c0c:	2b00      	cmp	r3, #0
    9c0e:	d120      	bne.n	9c52 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9c10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c14:	4930      	ldr	r1, [pc, #192]	; (9cd8 <_pwm_init+0x1f4>)
    9c16:	4613      	mov	r3, r2
    9c18:	009b      	lsls	r3, r3, #2
    9c1a:	4413      	add	r3, r2
    9c1c:	009b      	lsls	r3, r3, #2
    9c1e:	440b      	add	r3, r1
    9c20:	330c      	adds	r3, #12
    9c22:	681b      	ldr	r3, [r3, #0]
    9c24:	b29b      	uxth	r3, r3
    9c26:	461a      	mov	r2, r3
    9c28:	2100      	movs	r1, #0
    9c2a:	6838      	ldr	r0, [r7, #0]
    9c2c:	4b2f      	ldr	r3, [pc, #188]	; (9cec <_pwm_init+0x208>)
    9c2e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9c30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c34:	4928      	ldr	r1, [pc, #160]	; (9cd8 <_pwm_init+0x1f4>)
    9c36:	4613      	mov	r3, r2
    9c38:	009b      	lsls	r3, r3, #2
    9c3a:	4413      	add	r3, r2
    9c3c:	009b      	lsls	r3, r3, #2
    9c3e:	440b      	add	r3, r1
    9c40:	3310      	adds	r3, #16
    9c42:	681b      	ldr	r3, [r3, #0]
    9c44:	b29b      	uxth	r3, r3
    9c46:	461a      	mov	r2, r3
    9c48:	2101      	movs	r1, #1
    9c4a:	6838      	ldr	r0, [r7, #0]
    9c4c:	4b27      	ldr	r3, [pc, #156]	; (9cec <_pwm_init+0x208>)
    9c4e:	4798      	blx	r3
    9c50:	e002      	b.n	9c58 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    9c52:	f04f 33ff 	mov.w	r3, #4294967295
    9c56:	e02e      	b.n	9cb6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    9c58:	6879      	ldr	r1, [r7, #4]
    9c5a:	6838      	ldr	r0, [r7, #0]
    9c5c:	4b24      	ldr	r3, [pc, #144]	; (9cf0 <_pwm_init+0x20c>)
    9c5e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9c60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c64:	491c      	ldr	r1, [pc, #112]	; (9cd8 <_pwm_init+0x1f4>)
    9c66:	4613      	mov	r3, r2
    9c68:	009b      	lsls	r3, r3, #2
    9c6a:	4413      	add	r3, r2
    9c6c:	009b      	lsls	r3, r3, #2
    9c6e:	440b      	add	r3, r1
    9c70:	3302      	adds	r3, #2
    9c72:	f9b3 3000 	ldrsh.w	r3, [r3]
    9c76:	4618      	mov	r0, r3
    9c78:	4b1e      	ldr	r3, [pc, #120]	; (9cf4 <_pwm_init+0x210>)
    9c7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9c7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c80:	4915      	ldr	r1, [pc, #84]	; (9cd8 <_pwm_init+0x1f4>)
    9c82:	4613      	mov	r3, r2
    9c84:	009b      	lsls	r3, r3, #2
    9c86:	4413      	add	r3, r2
    9c88:	009b      	lsls	r3, r3, #2
    9c8a:	440b      	add	r3, r1
    9c8c:	3302      	adds	r3, #2
    9c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
    9c92:	4618      	mov	r0, r3
    9c94:	4b18      	ldr	r3, [pc, #96]	; (9cf8 <_pwm_init+0x214>)
    9c96:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9c98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c9c:	490e      	ldr	r1, [pc, #56]	; (9cd8 <_pwm_init+0x1f4>)
    9c9e:	4613      	mov	r3, r2
    9ca0:	009b      	lsls	r3, r3, #2
    9ca2:	4413      	add	r3, r2
    9ca4:	009b      	lsls	r3, r3, #2
    9ca6:	440b      	add	r3, r1
    9ca8:	3302      	adds	r3, #2
    9caa:	f9b3 3000 	ldrsh.w	r3, [r3]
    9cae:	4618      	mov	r0, r3
    9cb0:	4b12      	ldr	r3, [pc, #72]	; (9cfc <_pwm_init+0x218>)
    9cb2:	4798      	blx	r3

	return 0;
    9cb4:	2300      	movs	r3, #0
}
    9cb6:	4618      	mov	r0, r3
    9cb8:	3710      	adds	r7, #16
    9cba:	46bd      	mov	sp, r7
    9cbc:	bd80      	pop	{r7, pc}
    9cbe:	bf00      	nop
    9cc0:	00009f51 	.word	0x00009f51
    9cc4:	00009579 	.word	0x00009579
    9cc8:	000096c9 	.word	0x000096c9
    9ccc:	000096a1 	.word	0x000096a1
    9cd0:	00009555 	.word	0x00009555
    9cd4:	000096f9 	.word	0x000096f9
    9cd8:	20000048 	.word	0x20000048
    9cdc:	00009759 	.word	0x00009759
    9ce0:	0000971d 	.word	0x0000971d
    9ce4:	0000973b 	.word	0x0000973b
    9ce8:	00009805 	.word	0x00009805
    9cec:	000097d1 	.word	0x000097d1
    9cf0:	00009fb9 	.word	0x00009fb9
    9cf4:	000094d5 	.word	0x000094d5
    9cf8:	00009519 	.word	0x00009519
    9cfc:	00009499 	.word	0x00009499

00009d00 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    9d00:	b580      	push	{r7, lr}
    9d02:	b082      	sub	sp, #8
    9d04:	af00      	add	r7, sp, #0
    9d06:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9d08:	687b      	ldr	r3, [r7, #4]
    9d0a:	68db      	ldr	r3, [r3, #12]
    9d0c:	4618      	mov	r0, r3
    9d0e:	4b03      	ldr	r3, [pc, #12]	; (9d1c <_timer_start+0x1c>)
    9d10:	4798      	blx	r3
}
    9d12:	bf00      	nop
    9d14:	3708      	adds	r7, #8
    9d16:	46bd      	mov	sp, r7
    9d18:	bd80      	pop	{r7, pc}
    9d1a:	bf00      	nop
    9d1c:	00009641 	.word	0x00009641

00009d20 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    9d20:	b580      	push	{r7, lr}
    9d22:	b082      	sub	sp, #8
    9d24:	af00      	add	r7, sp, #0
    9d26:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9d28:	687b      	ldr	r3, [r7, #4]
    9d2a:	691b      	ldr	r3, [r3, #16]
    9d2c:	4618      	mov	r0, r3
    9d2e:	4b03      	ldr	r3, [pc, #12]	; (9d3c <_pwm_enable+0x1c>)
    9d30:	4798      	blx	r3
}
    9d32:	bf00      	nop
    9d34:	3708      	adds	r7, #8
    9d36:	46bd      	mov	sp, r7
    9d38:	bd80      	pop	{r7, pc}
    9d3a:	bf00      	nop
    9d3c:	00009641 	.word	0x00009641

00009d40 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    9d40:	b580      	push	{r7, lr}
    9d42:	b082      	sub	sp, #8
    9d44:	af00      	add	r7, sp, #0
    9d46:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	68db      	ldr	r3, [r3, #12]
    9d4c:	4618      	mov	r0, r3
    9d4e:	4b03      	ldr	r3, [pc, #12]	; (9d5c <_timer_stop+0x1c>)
    9d50:	4798      	blx	r3
}
    9d52:	bf00      	nop
    9d54:	3708      	adds	r7, #8
    9d56:	46bd      	mov	sp, r7
    9d58:	bd80      	pop	{r7, pc}
    9d5a:	bf00      	nop
    9d5c:	000096a1 	.word	0x000096a1

00009d60 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    9d60:	b580      	push	{r7, lr}
    9d62:	b082      	sub	sp, #8
    9d64:	af00      	add	r7, sp, #0
    9d66:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9d68:	687b      	ldr	r3, [r7, #4]
    9d6a:	68db      	ldr	r3, [r3, #12]
    9d6c:	4618      	mov	r0, r3
    9d6e:	4b03      	ldr	r3, [pc, #12]	; (9d7c <_timer_is_started+0x1c>)
    9d70:	4798      	blx	r3
    9d72:	4603      	mov	r3, r0
}
    9d74:	4618      	mov	r0, r3
    9d76:	3708      	adds	r7, #8
    9d78:	46bd      	mov	sp, r7
    9d7a:	bd80      	pop	{r7, pc}
    9d7c:	00009669 	.word	0x00009669

00009d80 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    9d80:	b580      	push	{r7, lr}
    9d82:	b082      	sub	sp, #8
    9d84:	af00      	add	r7, sp, #0
    9d86:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9d88:	687b      	ldr	r3, [r7, #4]
    9d8a:	691b      	ldr	r3, [r3, #16]
    9d8c:	4618      	mov	r0, r3
    9d8e:	4b03      	ldr	r3, [pc, #12]	; (9d9c <_pwm_is_enabled+0x1c>)
    9d90:	4798      	blx	r3
    9d92:	4603      	mov	r3, r0
}
    9d94:	4618      	mov	r0, r3
    9d96:	3708      	adds	r7, #8
    9d98:	46bd      	mov	sp, r7
    9d9a:	bd80      	pop	{r7, pc}
    9d9c:	00009669 	.word	0x00009669

00009da0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9da0:	b480      	push	{r7}
    9da2:	af00      	add	r7, sp, #0
	return NULL;
    9da4:	2300      	movs	r3, #0
}
    9da6:	4618      	mov	r0, r3
    9da8:	46bd      	mov	sp, r7
    9daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dae:	4770      	bx	lr

00009db0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9db0:	b480      	push	{r7}
    9db2:	af00      	add	r7, sp, #0
	return NULL;
    9db4:	2300      	movs	r3, #0
}
    9db6:	4618      	mov	r0, r3
    9db8:	46bd      	mov	sp, r7
    9dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dbe:	4770      	bx	lr

00009dc0 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    9dc0:	b580      	push	{r7, lr}
    9dc2:	b084      	sub	sp, #16
    9dc4:	af00      	add	r7, sp, #0
    9dc6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9dc8:	687b      	ldr	r3, [r7, #4]
    9dca:	68db      	ldr	r3, [r3, #12]
    9dcc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9dce:	68f8      	ldr	r0, [r7, #12]
    9dd0:	4b0e      	ldr	r3, [pc, #56]	; (9e0c <_timer_set_irq+0x4c>)
    9dd2:	4798      	blx	r3
    9dd4:	4603      	mov	r3, r0
    9dd6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9dd8:	f240 12a3 	movw	r2, #419	; 0x1a3
    9ddc:	490c      	ldr	r1, [pc, #48]	; (9e10 <_timer_set_irq+0x50>)
    9dde:	2001      	movs	r0, #1
    9de0:	4b0c      	ldr	r3, [pc, #48]	; (9e14 <_timer_set_irq+0x54>)
    9de2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    9de4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9de8:	490b      	ldr	r1, [pc, #44]	; (9e18 <_timer_set_irq+0x58>)
    9dea:	4613      	mov	r3, r2
    9dec:	009b      	lsls	r3, r3, #2
    9dee:	4413      	add	r3, r2
    9df0:	009b      	lsls	r3, r3, #2
    9df2:	440b      	add	r3, r1
    9df4:	3302      	adds	r3, #2
    9df6:	f9b3 3000 	ldrsh.w	r3, [r3]
    9dfa:	b2db      	uxtb	r3, r3
    9dfc:	4618      	mov	r0, r3
    9dfe:	4b07      	ldr	r3, [pc, #28]	; (9e1c <_timer_set_irq+0x5c>)
    9e00:	4798      	blx	r3
}
    9e02:	bf00      	nop
    9e04:	3710      	adds	r7, #16
    9e06:	46bd      	mov	sp, r7
    9e08:	bd80      	pop	{r7, pc}
    9e0a:	bf00      	nop
    9e0c:	00009f51 	.word	0x00009f51
    9e10:	00011c64 	.word	0x00011c64
    9e14:	00005545 	.word	0x00005545
    9e18:	20000048 	.word	0x20000048
    9e1c:	00005d85 	.word	0x00005d85

00009e20 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    9e20:	b580      	push	{r7, lr}
    9e22:	b084      	sub	sp, #16
    9e24:	af00      	add	r7, sp, #0
    9e26:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9e28:	687b      	ldr	r3, [r7, #4]
    9e2a:	68db      	ldr	r3, [r3, #12]
    9e2c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9e2e:	68f8      	ldr	r0, [r7, #12]
    9e30:	4b07      	ldr	r3, [pc, #28]	; (9e50 <tc_interrupt_handler+0x30>)
    9e32:	4798      	blx	r3
    9e34:	4603      	mov	r3, r0
    9e36:	2b00      	cmp	r3, #0
    9e38:	d006      	beq.n	9e48 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9e3a:	68f8      	ldr	r0, [r7, #12]
    9e3c:	4b05      	ldr	r3, [pc, #20]	; (9e54 <tc_interrupt_handler+0x34>)
    9e3e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	681b      	ldr	r3, [r3, #0]
    9e44:	6878      	ldr	r0, [r7, #4]
    9e46:	4798      	blx	r3
	}
}
    9e48:	bf00      	nop
    9e4a:	3710      	adds	r7, #16
    9e4c:	46bd      	mov	sp, r7
    9e4e:	bd80      	pop	{r7, pc}
    9e50:	000095a1 	.word	0x000095a1
    9e54:	000095c9 	.word	0x000095c9

00009e58 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    9e58:	b580      	push	{r7, lr}
    9e5a:	b084      	sub	sp, #16
    9e5c:	af00      	add	r7, sp, #0
    9e5e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	691b      	ldr	r3, [r3, #16]
    9e64:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9e66:	68f8      	ldr	r0, [r7, #12]
    9e68:	4b12      	ldr	r3, [pc, #72]	; (9eb4 <tc_pwm_interrupt_handler+0x5c>)
    9e6a:	4798      	blx	r3
    9e6c:	4603      	mov	r3, r0
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d00a      	beq.n	9e88 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    9e72:	68f8      	ldr	r0, [r7, #12]
    9e74:	4b10      	ldr	r3, [pc, #64]	; (9eb8 <tc_pwm_interrupt_handler+0x60>)
    9e76:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	681b      	ldr	r3, [r3, #0]
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d003      	beq.n	9e88 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	681b      	ldr	r3, [r3, #0]
    9e84:	6878      	ldr	r0, [r7, #4]
    9e86:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    9e88:	68f8      	ldr	r0, [r7, #12]
    9e8a:	4b0c      	ldr	r3, [pc, #48]	; (9ebc <tc_pwm_interrupt_handler+0x64>)
    9e8c:	4798      	blx	r3
    9e8e:	4603      	mov	r3, r0
    9e90:	2b00      	cmp	r3, #0
    9e92:	d00a      	beq.n	9eaa <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    9e94:	68f8      	ldr	r0, [r7, #12]
    9e96:	4b0a      	ldr	r3, [pc, #40]	; (9ec0 <tc_pwm_interrupt_handler+0x68>)
    9e98:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    9e9a:	687b      	ldr	r3, [r7, #4]
    9e9c:	685b      	ldr	r3, [r3, #4]
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d003      	beq.n	9eaa <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    9ea2:	687b      	ldr	r3, [r7, #4]
    9ea4:	685b      	ldr	r3, [r3, #4]
    9ea6:	6878      	ldr	r0, [r7, #4]
    9ea8:	4798      	blx	r3
		}
	}
}
    9eaa:	bf00      	nop
    9eac:	3710      	adds	r7, #16
    9eae:	46bd      	mov	sp, r7
    9eb0:	bd80      	pop	{r7, pc}
    9eb2:	bf00      	nop
    9eb4:	000095a1 	.word	0x000095a1
    9eb8:	000095c9 	.word	0x000095c9
    9ebc:	00009617 	.word	0x00009617
    9ec0:	000095e3 	.word	0x000095e3

00009ec4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    9ec4:	b580      	push	{r7, lr}
    9ec6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    9ec8:	4b03      	ldr	r3, [pc, #12]	; (9ed8 <TC0_Handler+0x14>)
    9eca:	681b      	ldr	r3, [r3, #0]
    9ecc:	4618      	mov	r0, r3
    9ece:	4b03      	ldr	r3, [pc, #12]	; (9edc <TC0_Handler+0x18>)
    9ed0:	4798      	blx	r3
}
    9ed2:	bf00      	nop
    9ed4:	bd80      	pop	{r7, pc}
    9ed6:	bf00      	nop
    9ed8:	20001d1c 	.word	0x20001d1c
    9edc:	00009e21 	.word	0x00009e21

00009ee0 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    9ee0:	b580      	push	{r7, lr}
    9ee2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    9ee4:	4b03      	ldr	r3, [pc, #12]	; (9ef4 <TC1_Handler+0x14>)
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	4618      	mov	r0, r3
    9eea:	4b03      	ldr	r3, [pc, #12]	; (9ef8 <TC1_Handler+0x18>)
    9eec:	4798      	blx	r3
}
    9eee:	bf00      	nop
    9ef0:	bd80      	pop	{r7, pc}
    9ef2:	bf00      	nop
    9ef4:	20001d20 	.word	0x20001d20
    9ef8:	00009e21 	.word	0x00009e21

00009efc <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    9efc:	b580      	push	{r7, lr}
    9efe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    9f00:	4b03      	ldr	r3, [pc, #12]	; (9f10 <TC2_Handler+0x14>)
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	4618      	mov	r0, r3
    9f06:	4b03      	ldr	r3, [pc, #12]	; (9f14 <TC2_Handler+0x18>)
    9f08:	4798      	blx	r3
}
    9f0a:	bf00      	nop
    9f0c:	bd80      	pop	{r7, pc}
    9f0e:	bf00      	nop
    9f10:	20001d24 	.word	0x20001d24
    9f14:	00009e21 	.word	0x00009e21

00009f18 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    9f18:	b580      	push	{r7, lr}
    9f1a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    9f1c:	4b03      	ldr	r3, [pc, #12]	; (9f2c <TC3_Handler+0x14>)
    9f1e:	681b      	ldr	r3, [r3, #0]
    9f20:	4618      	mov	r0, r3
    9f22:	4b03      	ldr	r3, [pc, #12]	; (9f30 <TC3_Handler+0x18>)
    9f24:	4798      	blx	r3
}
    9f26:	bf00      	nop
    9f28:	bd80      	pop	{r7, pc}
    9f2a:	bf00      	nop
    9f2c:	20001d28 	.word	0x20001d28
    9f30:	00009e21 	.word	0x00009e21

00009f34 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    9f34:	b580      	push	{r7, lr}
    9f36:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    9f38:	4b03      	ldr	r3, [pc, #12]	; (9f48 <TC7_Handler+0x14>)
    9f3a:	681b      	ldr	r3, [r3, #0]
    9f3c:	4618      	mov	r0, r3
    9f3e:	4b03      	ldr	r3, [pc, #12]	; (9f4c <TC7_Handler+0x18>)
    9f40:	4798      	blx	r3
}
    9f42:	bf00      	nop
    9f44:	bd80      	pop	{r7, pc}
    9f46:	bf00      	nop
    9f48:	20001d2c 	.word	0x20001d2c
    9f4c:	00009e59 	.word	0x00009e59

00009f50 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9f50:	b580      	push	{r7, lr}
    9f52:	b084      	sub	sp, #16
    9f54:	af00      	add	r7, sp, #0
    9f56:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    9f58:	6878      	ldr	r0, [r7, #4]
    9f5a:	4b13      	ldr	r3, [pc, #76]	; (9fa8 <get_tc_index+0x58>)
    9f5c:	4798      	blx	r3
    9f5e:	4603      	mov	r3, r0
    9f60:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9f62:	2300      	movs	r3, #0
    9f64:	73fb      	strb	r3, [r7, #15]
    9f66:	e010      	b.n	9f8a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    9f68:	7bfa      	ldrb	r2, [r7, #15]
    9f6a:	4910      	ldr	r1, [pc, #64]	; (9fac <get_tc_index+0x5c>)
    9f6c:	4613      	mov	r3, r2
    9f6e:	009b      	lsls	r3, r3, #2
    9f70:	4413      	add	r3, r2
    9f72:	009b      	lsls	r3, r3, #2
    9f74:	440b      	add	r3, r1
    9f76:	781b      	ldrb	r3, [r3, #0]
    9f78:	7bba      	ldrb	r2, [r7, #14]
    9f7a:	429a      	cmp	r2, r3
    9f7c:	d102      	bne.n	9f84 <get_tc_index+0x34>
			return i;
    9f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9f82:	e00d      	b.n	9fa0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9f84:	7bfb      	ldrb	r3, [r7, #15]
    9f86:	3301      	adds	r3, #1
    9f88:	73fb      	strb	r3, [r7, #15]
    9f8a:	7bfb      	ldrb	r3, [r7, #15]
    9f8c:	2b04      	cmp	r3, #4
    9f8e:	d9eb      	bls.n	9f68 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9f90:	f240 2206 	movw	r2, #518	; 0x206
    9f94:	4906      	ldr	r1, [pc, #24]	; (9fb0 <get_tc_index+0x60>)
    9f96:	2000      	movs	r0, #0
    9f98:	4b06      	ldr	r3, [pc, #24]	; (9fb4 <get_tc_index+0x64>)
    9f9a:	4798      	blx	r3
	return -1;
    9f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
    9fa0:	4618      	mov	r0, r3
    9fa2:	3710      	adds	r7, #16
    9fa4:	46bd      	mov	sp, r7
    9fa6:	bd80      	pop	{r7, pc}
    9fa8:	0000a03d 	.word	0x0000a03d
    9fac:	20000048 	.word	0x20000048
    9fb0:	00011c64 	.word	0x00011c64
    9fb4:	00005545 	.word	0x00005545

00009fb8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    9fb8:	b480      	push	{r7}
    9fba:	b083      	sub	sp, #12
    9fbc:	af00      	add	r7, sp, #0
    9fbe:	6078      	str	r0, [r7, #4]
    9fc0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    9fc2:	687b      	ldr	r3, [r7, #4]
    9fc4:	4a13      	ldr	r2, [pc, #76]	; (a014 <_tc_init_irq_param+0x5c>)
    9fc6:	4293      	cmp	r3, r2
    9fc8:	d102      	bne.n	9fd0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    9fca:	4a13      	ldr	r2, [pc, #76]	; (a018 <_tc_init_irq_param+0x60>)
    9fcc:	683b      	ldr	r3, [r7, #0]
    9fce:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    9fd0:	687b      	ldr	r3, [r7, #4]
    9fd2:	4a12      	ldr	r2, [pc, #72]	; (a01c <_tc_init_irq_param+0x64>)
    9fd4:	4293      	cmp	r3, r2
    9fd6:	d102      	bne.n	9fde <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    9fd8:	4a11      	ldr	r2, [pc, #68]	; (a020 <_tc_init_irq_param+0x68>)
    9fda:	683b      	ldr	r3, [r7, #0]
    9fdc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    9fde:	687b      	ldr	r3, [r7, #4]
    9fe0:	4a10      	ldr	r2, [pc, #64]	; (a024 <_tc_init_irq_param+0x6c>)
    9fe2:	4293      	cmp	r3, r2
    9fe4:	d102      	bne.n	9fec <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    9fe6:	4a10      	ldr	r2, [pc, #64]	; (a028 <_tc_init_irq_param+0x70>)
    9fe8:	683b      	ldr	r3, [r7, #0]
    9fea:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    9fec:	687b      	ldr	r3, [r7, #4]
    9fee:	4a0f      	ldr	r2, [pc, #60]	; (a02c <_tc_init_irq_param+0x74>)
    9ff0:	4293      	cmp	r3, r2
    9ff2:	d102      	bne.n	9ffa <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    9ff4:	4a0e      	ldr	r2, [pc, #56]	; (a030 <_tc_init_irq_param+0x78>)
    9ff6:	683b      	ldr	r3, [r7, #0]
    9ff8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    9ffa:	687b      	ldr	r3, [r7, #4]
    9ffc:	4a0d      	ldr	r2, [pc, #52]	; (a034 <_tc_init_irq_param+0x7c>)
    9ffe:	4293      	cmp	r3, r2
    a000:	d102      	bne.n	a008 <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    a002:	4a0d      	ldr	r2, [pc, #52]	; (a038 <_tc_init_irq_param+0x80>)
    a004:	683b      	ldr	r3, [r7, #0]
    a006:	6013      	str	r3, [r2, #0]
	}
}
    a008:	bf00      	nop
    a00a:	370c      	adds	r7, #12
    a00c:	46bd      	mov	sp, r7
    a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a012:	4770      	bx	lr
    a014:	40003800 	.word	0x40003800
    a018:	20001d1c 	.word	0x20001d1c
    a01c:	40003c00 	.word	0x40003c00
    a020:	20001d20 	.word	0x20001d20
    a024:	4101a000 	.word	0x4101a000
    a028:	20001d24 	.word	0x20001d24
    a02c:	4101c000 	.word	0x4101c000
    a030:	20001d28 	.word	0x20001d28
    a034:	43001800 	.word	0x43001800
    a038:	20001d2c 	.word	0x20001d2c

0000a03c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a03c:	b4b0      	push	{r4, r5, r7}
    a03e:	b08d      	sub	sp, #52	; 0x34
    a040:	af00      	add	r7, sp, #0
    a042:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a044:	4b13      	ldr	r3, [pc, #76]	; (a094 <_get_hardware_offset+0x58>)
    a046:	f107 040c 	add.w	r4, r7, #12
    a04a:	461d      	mov	r5, r3
    a04c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a04e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a058:	2300      	movs	r3, #0
    a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
    a05c:	e010      	b.n	a080 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a060:	009b      	lsls	r3, r3, #2
    a062:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a066:	4413      	add	r3, r2
    a068:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a06c:	461a      	mov	r2, r3
    a06e:	687b      	ldr	r3, [r7, #4]
    a070:	429a      	cmp	r2, r3
    a072:	d102      	bne.n	a07a <_get_hardware_offset+0x3e>
			return i;
    a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a076:	b2db      	uxtb	r3, r3
    a078:	e006      	b.n	a088 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a07c:	3301      	adds	r3, #1
    a07e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a082:	2b07      	cmp	r3, #7
    a084:	d9eb      	bls.n	a05e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a086:	2300      	movs	r3, #0
}
    a088:	4618      	mov	r0, r3
    a08a:	3734      	adds	r7, #52	; 0x34
    a08c:	46bd      	mov	sp, r7
    a08e:	bcb0      	pop	{r4, r5, r7}
    a090:	4770      	bx	lr
    a092:	bf00      	nop
    a094:	00011c78 	.word	0x00011c78

0000a098 <__NVIC_EnableIRQ>:
{
    a098:	b480      	push	{r7}
    a09a:	b083      	sub	sp, #12
    a09c:	af00      	add	r7, sp, #0
    a09e:	4603      	mov	r3, r0
    a0a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a0a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	db0b      	blt.n	a0c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a0aa:	4909      	ldr	r1, [pc, #36]	; (a0d0 <__NVIC_EnableIRQ+0x38>)
    a0ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a0b0:	095b      	lsrs	r3, r3, #5
    a0b2:	88fa      	ldrh	r2, [r7, #6]
    a0b4:	f002 021f 	and.w	r2, r2, #31
    a0b8:	2001      	movs	r0, #1
    a0ba:	fa00 f202 	lsl.w	r2, r0, r2
    a0be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0c2:	bf00      	nop
    a0c4:	370c      	adds	r7, #12
    a0c6:	46bd      	mov	sp, r7
    a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0cc:	4770      	bx	lr
    a0ce:	bf00      	nop
    a0d0:	e000e100 	.word	0xe000e100

0000a0d4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a0d4:	b480      	push	{r7}
    a0d6:	b087      	sub	sp, #28
    a0d8:	af00      	add	r7, sp, #0
    a0da:	60f8      	str	r0, [r7, #12]
    a0dc:	460b      	mov	r3, r1
    a0de:	607a      	str	r2, [r7, #4]
    a0e0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a0e2:	7afa      	ldrb	r2, [r7, #11]
    a0e4:	68f9      	ldr	r1, [r7, #12]
    a0e6:	4613      	mov	r3, r2
    a0e8:	009b      	lsls	r3, r3, #2
    a0ea:	4413      	add	r3, r2
    a0ec:	009b      	lsls	r3, r3, #2
    a0ee:	440b      	add	r3, r1
    a0f0:	3340      	adds	r3, #64	; 0x40
    a0f2:	681b      	ldr	r3, [r3, #0]
    a0f4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a0f6:	697a      	ldr	r2, [r7, #20]
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	4013      	ands	r3, r2
    a0fc:	617b      	str	r3, [r7, #20]
	return tmp;
    a0fe:	697b      	ldr	r3, [r7, #20]
}
    a100:	4618      	mov	r0, r3
    a102:	371c      	adds	r7, #28
    a104:	46bd      	mov	sp, r7
    a106:	f85d 7b04 	ldr.w	r7, [sp], #4
    a10a:	4770      	bx	lr

0000a10c <hri_oscctrl_get_STATUS_reg>:
{
    a10c:	b480      	push	{r7}
    a10e:	b085      	sub	sp, #20
    a110:	af00      	add	r7, sp, #0
    a112:	6078      	str	r0, [r7, #4]
    a114:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a116:	687b      	ldr	r3, [r7, #4]
    a118:	691b      	ldr	r3, [r3, #16]
    a11a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a11c:	68fa      	ldr	r2, [r7, #12]
    a11e:	683b      	ldr	r3, [r7, #0]
    a120:	4013      	ands	r3, r2
    a122:	60fb      	str	r3, [r7, #12]
	return tmp;
    a124:	68fb      	ldr	r3, [r7, #12]
}
    a126:	4618      	mov	r0, r3
    a128:	3714      	adds	r7, #20
    a12a:	46bd      	mov	sp, r7
    a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a130:	4770      	bx	lr

0000a132 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a132:	b480      	push	{r7}
    a134:	b085      	sub	sp, #20
    a136:	af00      	add	r7, sp, #0
    a138:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a13a:	687b      	ldr	r3, [r7, #4]
    a13c:	f893 3020 	ldrb.w	r3, [r3, #32]
    a140:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a142:	7bfb      	ldrb	r3, [r7, #15]
    a144:	f003 0301 	and.w	r3, r3, #1
    a148:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a14a:	7bfb      	ldrb	r3, [r7, #15]
    a14c:	2b00      	cmp	r3, #0
    a14e:	bf14      	ite	ne
    a150:	2301      	movne	r3, #1
    a152:	2300      	moveq	r3, #0
    a154:	b2db      	uxtb	r3, r3
}
    a156:	4618      	mov	r0, r3
    a158:	3714      	adds	r7, #20
    a15a:	46bd      	mov	sp, r7
    a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a160:	4770      	bx	lr

0000a162 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a162:	b480      	push	{r7}
    a164:	b083      	sub	sp, #12
    a166:	af00      	add	r7, sp, #0
    a168:	6078      	str	r0, [r7, #4]
    a16a:	460b      	mov	r3, r1
    a16c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a16e:	bf00      	nop
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	789b      	ldrb	r3, [r3, #2]
    a174:	b2da      	uxtb	r2, r3
    a176:	78fb      	ldrb	r3, [r7, #3]
    a178:	4013      	ands	r3, r2
    a17a:	b2db      	uxtb	r3, r3
    a17c:	2b00      	cmp	r3, #0
    a17e:	d1f7      	bne.n	a170 <hri_usb_wait_for_sync+0xe>
	};
}
    a180:	bf00      	nop
    a182:	370c      	adds	r7, #12
    a184:	46bd      	mov	sp, r7
    a186:	f85d 7b04 	ldr.w	r7, [sp], #4
    a18a:	4770      	bx	lr

0000a18c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a18c:	b480      	push	{r7}
    a18e:	b083      	sub	sp, #12
    a190:	af00      	add	r7, sp, #0
    a192:	6078      	str	r0, [r7, #4]
    a194:	460b      	mov	r3, r1
    a196:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	789b      	ldrb	r3, [r3, #2]
    a19c:	b2da      	uxtb	r2, r3
    a19e:	78fb      	ldrb	r3, [r7, #3]
    a1a0:	4013      	ands	r3, r2
    a1a2:	b2db      	uxtb	r3, r3
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	bf14      	ite	ne
    a1a8:	2301      	movne	r3, #1
    a1aa:	2300      	moveq	r3, #0
    a1ac:	b2db      	uxtb	r3, r3
}
    a1ae:	4618      	mov	r0, r3
    a1b0:	370c      	adds	r7, #12
    a1b2:	46bd      	mov	sp, r7
    a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1b8:	4770      	bx	lr

0000a1ba <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a1ba:	b480      	push	{r7}
    a1bc:	b085      	sub	sp, #20
    a1be:	af00      	add	r7, sp, #0
    a1c0:	6078      	str	r0, [r7, #4]
    a1c2:	460b      	mov	r3, r1
    a1c4:	70fb      	strb	r3, [r7, #3]
    a1c6:	4613      	mov	r3, r2
    a1c8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a1ca:	78fb      	ldrb	r3, [r7, #3]
    a1cc:	687a      	ldr	r2, [r7, #4]
    a1ce:	3308      	adds	r3, #8
    a1d0:	015b      	lsls	r3, r3, #5
    a1d2:	4413      	add	r3, r2
    a1d4:	3307      	adds	r3, #7
    a1d6:	781b      	ldrb	r3, [r3, #0]
    a1d8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a1da:	7bfa      	ldrb	r2, [r7, #15]
    a1dc:	78bb      	ldrb	r3, [r7, #2]
    a1de:	4013      	ands	r3, r2
    a1e0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a1e2:	7bfb      	ldrb	r3, [r7, #15]
}
    a1e4:	4618      	mov	r0, r3
    a1e6:	3714      	adds	r7, #20
    a1e8:	46bd      	mov	sp, r7
    a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1ee:	4770      	bx	lr

0000a1f0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a1f0:	b480      	push	{r7}
    a1f2:	b083      	sub	sp, #12
    a1f4:	af00      	add	r7, sp, #0
    a1f6:	6078      	str	r0, [r7, #4]
    a1f8:	460b      	mov	r3, r1
    a1fa:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a1fc:	78fb      	ldrb	r3, [r7, #3]
    a1fe:	687a      	ldr	r2, [r7, #4]
    a200:	3308      	adds	r3, #8
    a202:	015b      	lsls	r3, r3, #5
    a204:	4413      	add	r3, r2
    a206:	3307      	adds	r3, #7
    a208:	781b      	ldrb	r3, [r3, #0]
    a20a:	b2db      	uxtb	r3, r3
}
    a20c:	4618      	mov	r0, r3
    a20e:	370c      	adds	r7, #12
    a210:	46bd      	mov	sp, r7
    a212:	f85d 7b04 	ldr.w	r7, [sp], #4
    a216:	4770      	bx	lr

0000a218 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a218:	b480      	push	{r7}
    a21a:	b083      	sub	sp, #12
    a21c:	af00      	add	r7, sp, #0
    a21e:	6078      	str	r0, [r7, #4]
    a220:	460b      	mov	r3, r1
    a222:	70fb      	strb	r3, [r7, #3]
    a224:	4613      	mov	r3, r2
    a226:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a228:	78fb      	ldrb	r3, [r7, #3]
    a22a:	687a      	ldr	r2, [r7, #4]
    a22c:	3308      	adds	r3, #8
    a22e:	015b      	lsls	r3, r3, #5
    a230:	4413      	add	r3, r2
    a232:	3307      	adds	r3, #7
    a234:	78ba      	ldrb	r2, [r7, #2]
    a236:	701a      	strb	r2, [r3, #0]
}
    a238:	bf00      	nop
    a23a:	370c      	adds	r7, #12
    a23c:	46bd      	mov	sp, r7
    a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a242:	4770      	bx	lr

0000a244 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a244:	b480      	push	{r7}
    a246:	b083      	sub	sp, #12
    a248:	af00      	add	r7, sp, #0
    a24a:	6078      	str	r0, [r7, #4]
    a24c:	460b      	mov	r3, r1
    a24e:	70fb      	strb	r3, [r7, #3]
    a250:	4613      	mov	r3, r2
    a252:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a254:	78fb      	ldrb	r3, [r7, #3]
    a256:	687a      	ldr	r2, [r7, #4]
    a258:	3308      	adds	r3, #8
    a25a:	015b      	lsls	r3, r3, #5
    a25c:	4413      	add	r3, r2
    a25e:	3305      	adds	r3, #5
    a260:	78ba      	ldrb	r2, [r7, #2]
    a262:	701a      	strb	r2, [r3, #0]
}
    a264:	bf00      	nop
    a266:	370c      	adds	r7, #12
    a268:	46bd      	mov	sp, r7
    a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a26e:	4770      	bx	lr

0000a270 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a270:	b480      	push	{r7}
    a272:	b083      	sub	sp, #12
    a274:	af00      	add	r7, sp, #0
    a276:	6078      	str	r0, [r7, #4]
    a278:	460b      	mov	r3, r1
    a27a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a27c:	78fb      	ldrb	r3, [r7, #3]
    a27e:	687a      	ldr	r2, [r7, #4]
    a280:	3308      	adds	r3, #8
    a282:	015b      	lsls	r3, r3, #5
    a284:	4413      	add	r3, r2
    a286:	3306      	adds	r3, #6
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	b2db      	uxtb	r3, r3
}
    a28c:	4618      	mov	r0, r3
    a28e:	370c      	adds	r7, #12
    a290:	46bd      	mov	sp, r7
    a292:	f85d 7b04 	ldr.w	r7, [sp], #4
    a296:	4770      	bx	lr

0000a298 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    a298:	b480      	push	{r7}
    a29a:	b083      	sub	sp, #12
    a29c:	af00      	add	r7, sp, #0
    a29e:	6078      	str	r0, [r7, #4]
    a2a0:	460b      	mov	r3, r1
    a2a2:	70fb      	strb	r3, [r7, #3]
    a2a4:	4613      	mov	r3, r2
    a2a6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a2a8:	78fb      	ldrb	r3, [r7, #3]
    a2aa:	687a      	ldr	r2, [r7, #4]
    a2ac:	3308      	adds	r3, #8
    a2ae:	015b      	lsls	r3, r3, #5
    a2b0:	4413      	add	r3, r2
    a2b2:	3304      	adds	r3, #4
    a2b4:	78ba      	ldrb	r2, [r7, #2]
    a2b6:	701a      	strb	r2, [r3, #0]
}
    a2b8:	bf00      	nop
    a2ba:	370c      	adds	r7, #12
    a2bc:	46bd      	mov	sp, r7
    a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2c2:	4770      	bx	lr

0000a2c4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    a2c4:	b480      	push	{r7}
    a2c6:	b083      	sub	sp, #12
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	6078      	str	r0, [r7, #4]
    a2cc:	460b      	mov	r3, r1
    a2ce:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    a2d0:	78fb      	ldrb	r3, [r7, #3]
    a2d2:	687a      	ldr	r2, [r7, #4]
    a2d4:	015b      	lsls	r3, r3, #5
    a2d6:	4413      	add	r3, r2
    a2d8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a2dc:	2210      	movs	r2, #16
    a2de:	701a      	strb	r2, [r3, #0]
}
    a2e0:	bf00      	nop
    a2e2:	370c      	adds	r7, #12
    a2e4:	46bd      	mov	sp, r7
    a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2ea:	4770      	bx	lr

0000a2ec <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    a2ec:	b480      	push	{r7}
    a2ee:	b083      	sub	sp, #12
    a2f0:	af00      	add	r7, sp, #0
    a2f2:	6078      	str	r0, [r7, #4]
    a2f4:	460b      	mov	r3, r1
    a2f6:	70fb      	strb	r3, [r7, #3]
    a2f8:	4613      	mov	r3, r2
    a2fa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a2fc:	78fb      	ldrb	r3, [r7, #3]
    a2fe:	687a      	ldr	r2, [r7, #4]
    a300:	015b      	lsls	r3, r3, #5
    a302:	4413      	add	r3, r2
    a304:	f203 1309 	addw	r3, r3, #265	; 0x109
    a308:	78ba      	ldrb	r2, [r7, #2]
    a30a:	701a      	strb	r2, [r3, #0]
}
    a30c:	bf00      	nop
    a30e:	370c      	adds	r7, #12
    a310:	46bd      	mov	sp, r7
    a312:	f85d 7b04 	ldr.w	r7, [sp], #4
    a316:	4770      	bx	lr

0000a318 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    a318:	b480      	push	{r7}
    a31a:	b083      	sub	sp, #12
    a31c:	af00      	add	r7, sp, #0
    a31e:	6078      	str	r0, [r7, #4]
    a320:	460b      	mov	r3, r1
    a322:	70fb      	strb	r3, [r7, #3]
    a324:	4613      	mov	r3, r2
    a326:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a328:	78fb      	ldrb	r3, [r7, #3]
    a32a:	687a      	ldr	r2, [r7, #4]
    a32c:	015b      	lsls	r3, r3, #5
    a32e:	4413      	add	r3, r2
    a330:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a334:	78ba      	ldrb	r2, [r7, #2]
    a336:	701a      	strb	r2, [r3, #0]
}
    a338:	bf00      	nop
    a33a:	370c      	adds	r7, #12
    a33c:	46bd      	mov	sp, r7
    a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a342:	4770      	bx	lr

0000a344 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a344:	b480      	push	{r7}
    a346:	b085      	sub	sp, #20
    a348:	af00      	add	r7, sp, #0
    a34a:	6078      	str	r0, [r7, #4]
    a34c:	460b      	mov	r3, r1
    a34e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a350:	78fb      	ldrb	r3, [r7, #3]
    a352:	687a      	ldr	r2, [r7, #4]
    a354:	3308      	adds	r3, #8
    a356:	015b      	lsls	r3, r3, #5
    a358:	4413      	add	r3, r2
    a35a:	781b      	ldrb	r3, [r3, #0]
    a35c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    a35e:	7bfb      	ldrb	r3, [r7, #15]
    a360:	f003 0307 	and.w	r3, r3, #7
    a364:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a366:	7bfb      	ldrb	r3, [r7, #15]
}
    a368:	4618      	mov	r0, r3
    a36a:	3714      	adds	r7, #20
    a36c:	46bd      	mov	sp, r7
    a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a372:	4770      	bx	lr

0000a374 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a374:	b480      	push	{r7}
    a376:	b085      	sub	sp, #20
    a378:	af00      	add	r7, sp, #0
    a37a:	6078      	str	r0, [r7, #4]
    a37c:	460b      	mov	r3, r1
    a37e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a380:	78fb      	ldrb	r3, [r7, #3]
    a382:	687a      	ldr	r2, [r7, #4]
    a384:	3308      	adds	r3, #8
    a386:	015b      	lsls	r3, r3, #5
    a388:	4413      	add	r3, r2
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    a38e:	7bfb      	ldrb	r3, [r7, #15]
    a390:	091b      	lsrs	r3, r3, #4
    a392:	b2db      	uxtb	r3, r3
    a394:	f003 0307 	and.w	r3, r3, #7
    a398:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a39a:	7bfb      	ldrb	r3, [r7, #15]
}
    a39c:	4618      	mov	r0, r3
    a39e:	3714      	adds	r7, #20
    a3a0:	46bd      	mov	sp, r7
    a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3a6:	4770      	bx	lr

0000a3a8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    a3a8:	b480      	push	{r7}
    a3aa:	b083      	sub	sp, #12
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
    a3b0:	460b      	mov	r3, r1
    a3b2:	70fb      	strb	r3, [r7, #3]
    a3b4:	4613      	mov	r3, r2
    a3b6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a3b8:	78fb      	ldrb	r3, [r7, #3]
    a3ba:	687a      	ldr	r2, [r7, #4]
    a3bc:	3308      	adds	r3, #8
    a3be:	015b      	lsls	r3, r3, #5
    a3c0:	4413      	add	r3, r2
    a3c2:	78ba      	ldrb	r2, [r7, #2]
    a3c4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    a3c6:	bf00      	nop
    a3c8:	370c      	adds	r7, #12
    a3ca:	46bd      	mov	sp, r7
    a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3d0:	4770      	bx	lr

0000a3d2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    a3d2:	b480      	push	{r7}
    a3d4:	b083      	sub	sp, #12
    a3d6:	af00      	add	r7, sp, #0
    a3d8:	6078      	str	r0, [r7, #4]
    a3da:	460b      	mov	r3, r1
    a3dc:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a3de:	78fb      	ldrb	r3, [r7, #3]
    a3e0:	687a      	ldr	r2, [r7, #4]
    a3e2:	3308      	adds	r3, #8
    a3e4:	015b      	lsls	r3, r3, #5
    a3e6:	4413      	add	r3, r2
    a3e8:	781b      	ldrb	r3, [r3, #0]
    a3ea:	b2db      	uxtb	r3, r3
}
    a3ec:	4618      	mov	r0, r3
    a3ee:	370c      	adds	r7, #12
    a3f0:	46bd      	mov	sp, r7
    a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3f6:	4770      	bx	lr

0000a3f8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    a3f8:	b480      	push	{r7}
    a3fa:	b083      	sub	sp, #12
    a3fc:	af00      	add	r7, sp, #0
    a3fe:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a400:	687b      	ldr	r3, [r7, #4]
    a402:	8b9b      	ldrh	r3, [r3, #28]
    a404:	b29b      	uxth	r3, r3
}
    a406:	4618      	mov	r0, r3
    a408:	370c      	adds	r7, #12
    a40a:	46bd      	mov	sp, r7
    a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a410:	4770      	bx	lr

0000a412 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    a412:	b480      	push	{r7}
    a414:	b083      	sub	sp, #12
    a416:	af00      	add	r7, sp, #0
    a418:	6078      	str	r0, [r7, #4]
    a41a:	460b      	mov	r3, r1
    a41c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	887a      	ldrh	r2, [r7, #2]
    a422:	839a      	strh	r2, [r3, #28]
}
    a424:	bf00      	nop
    a426:	370c      	adds	r7, #12
    a428:	46bd      	mov	sp, r7
    a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a42e:	4770      	bx	lr

0000a430 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a430:	b480      	push	{r7}
    a432:	b083      	sub	sp, #12
    a434:	af00      	add	r7, sp, #0
    a436:	6078      	str	r0, [r7, #4]
    a438:	460b      	mov	r3, r1
    a43a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a43c:	687b      	ldr	r3, [r7, #4]
    a43e:	887a      	ldrh	r2, [r7, #2]
    a440:	831a      	strh	r2, [r3, #24]
}
    a442:	bf00      	nop
    a444:	370c      	adds	r7, #12
    a446:	46bd      	mov	sp, r7
    a448:	f85d 7b04 	ldr.w	r7, [sp], #4
    a44c:	4770      	bx	lr

0000a44e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    a44e:	b480      	push	{r7}
    a450:	b083      	sub	sp, #12
    a452:	af00      	add	r7, sp, #0
    a454:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a456:	687b      	ldr	r3, [r7, #4]
    a458:	8b1b      	ldrh	r3, [r3, #24]
    a45a:	b29b      	uxth	r3, r3
}
    a45c:	4618      	mov	r0, r3
    a45e:	370c      	adds	r7, #12
    a460:	46bd      	mov	sp, r7
    a462:	f85d 7b04 	ldr.w	r7, [sp], #4
    a466:	4770      	bx	lr

0000a468 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a468:	b480      	push	{r7}
    a46a:	b083      	sub	sp, #12
    a46c:	af00      	add	r7, sp, #0
    a46e:	6078      	str	r0, [r7, #4]
    a470:	460b      	mov	r3, r1
    a472:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a474:	687b      	ldr	r3, [r7, #4]
    a476:	887a      	ldrh	r2, [r7, #2]
    a478:	829a      	strh	r2, [r3, #20]
}
    a47a:	bf00      	nop
    a47c:	370c      	adds	r7, #12
    a47e:	46bd      	mov	sp, r7
    a480:	f85d 7b04 	ldr.w	r7, [sp], #4
    a484:	4770      	bx	lr

0000a486 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    a486:	b480      	push	{r7}
    a488:	b085      	sub	sp, #20
    a48a:	af00      	add	r7, sp, #0
    a48c:	6078      	str	r0, [r7, #4]
    a48e:	460b      	mov	r3, r1
    a490:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a492:	687b      	ldr	r3, [r7, #4]
    a494:	789b      	ldrb	r3, [r3, #2]
    a496:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a498:	7bfa      	ldrb	r2, [r7, #15]
    a49a:	78fb      	ldrb	r3, [r7, #3]
    a49c:	4013      	ands	r3, r2
    a49e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
    a4a2:	4618      	mov	r0, r3
    a4a4:	3714      	adds	r7, #20
    a4a6:	46bd      	mov	sp, r7
    a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ac:	4770      	bx	lr
	...

0000a4b0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a4b0:	b580      	push	{r7, lr}
    a4b2:	b082      	sub	sp, #8
    a4b4:	af00      	add	r7, sp, #0
    a4b6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	781b      	ldrb	r3, [r3, #0]
    a4bc:	b2db      	uxtb	r3, r3
    a4be:	f023 0302 	bic.w	r3, r3, #2
    a4c2:	b2da      	uxtb	r2, r3
    a4c4:	687b      	ldr	r3, [r7, #4]
    a4c6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    a4c8:	2103      	movs	r1, #3
    a4ca:	6878      	ldr	r0, [r7, #4]
    a4cc:	4b02      	ldr	r3, [pc, #8]	; (a4d8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    a4ce:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a4d0:	bf00      	nop
    a4d2:	3708      	adds	r7, #8
    a4d4:	46bd      	mov	sp, r7
    a4d6:	bd80      	pop	{r7, pc}
    a4d8:	0000a163 	.word	0x0000a163

0000a4dc <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    a4dc:	b580      	push	{r7, lr}
    a4de:	b084      	sub	sp, #16
    a4e0:	af00      	add	r7, sp, #0
    a4e2:	6078      	str	r0, [r7, #4]
    a4e4:	460b      	mov	r3, r1
    a4e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a4e8:	2103      	movs	r1, #3
    a4ea:	6878      	ldr	r0, [r7, #4]
    a4ec:	4b06      	ldr	r3, [pc, #24]	; (a508 <hri_usb_get_CTRLA_reg+0x2c>)
    a4ee:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a4f0:	687b      	ldr	r3, [r7, #4]
    a4f2:	781b      	ldrb	r3, [r3, #0]
    a4f4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a4f6:	7bfa      	ldrb	r2, [r7, #15]
    a4f8:	78fb      	ldrb	r3, [r7, #3]
    a4fa:	4013      	ands	r3, r2
    a4fc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a4fe:	7bfb      	ldrb	r3, [r7, #15]
}
    a500:	4618      	mov	r0, r3
    a502:	3710      	adds	r7, #16
    a504:	46bd      	mov	sp, r7
    a506:	bd80      	pop	{r7, pc}
    a508:	0000a163 	.word	0x0000a163

0000a50c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    a50c:	b580      	push	{r7, lr}
    a50e:	b082      	sub	sp, #8
    a510:	af00      	add	r7, sp, #0
    a512:	6078      	str	r0, [r7, #4]
    a514:	460b      	mov	r3, r1
    a516:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a518:	687b      	ldr	r3, [r7, #4]
    a51a:	78fa      	ldrb	r2, [r7, #3]
    a51c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a51e:	2103      	movs	r1, #3
    a520:	6878      	ldr	r0, [r7, #4]
    a522:	4b03      	ldr	r3, [pc, #12]	; (a530 <hri_usb_write_CTRLA_reg+0x24>)
    a524:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a526:	bf00      	nop
    a528:	3708      	adds	r7, #8
    a52a:	46bd      	mov	sp, r7
    a52c:	bd80      	pop	{r7, pc}
    a52e:	bf00      	nop
    a530:	0000a163 	.word	0x0000a163

0000a534 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    a534:	b580      	push	{r7, lr}
    a536:	b082      	sub	sp, #8
    a538:	af00      	add	r7, sp, #0
    a53a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a53c:	2103      	movs	r1, #3
    a53e:	6878      	ldr	r0, [r7, #4]
    a540:	4b04      	ldr	r3, [pc, #16]	; (a554 <hri_usb_read_CTRLA_reg+0x20>)
    a542:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a544:	687b      	ldr	r3, [r7, #4]
    a546:	781b      	ldrb	r3, [r3, #0]
    a548:	b2db      	uxtb	r3, r3
}
    a54a:	4618      	mov	r0, r3
    a54c:	3708      	adds	r7, #8
    a54e:	46bd      	mov	sp, r7
    a550:	bd80      	pop	{r7, pc}
    a552:	bf00      	nop
    a554:	0000a163 	.word	0x0000a163

0000a558 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    a558:	b480      	push	{r7}
    a55a:	b083      	sub	sp, #12
    a55c:	af00      	add	r7, sp, #0
    a55e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a560:	687b      	ldr	r3, [r7, #4]
    a562:	891b      	ldrh	r3, [r3, #8]
    a564:	b29b      	uxth	r3, r3
    a566:	f023 0301 	bic.w	r3, r3, #1
    a56a:	b29a      	uxth	r2, r3
    a56c:	687b      	ldr	r3, [r7, #4]
    a56e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a570:	bf00      	nop
    a572:	370c      	adds	r7, #12
    a574:	46bd      	mov	sp, r7
    a576:	f85d 7b04 	ldr.w	r7, [sp], #4
    a57a:	4770      	bx	lr

0000a57c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    a57c:	b480      	push	{r7}
    a57e:	b083      	sub	sp, #12
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
    a584:	460b      	mov	r3, r1
    a586:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	887a      	ldrh	r2, [r7, #2]
    a58c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a58e:	bf00      	nop
    a590:	370c      	adds	r7, #12
    a592:	46bd      	mov	sp, r7
    a594:	f85d 7b04 	ldr.w	r7, [sp], #4
    a598:	4770      	bx	lr

0000a59a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    a59a:	b480      	push	{r7}
    a59c:	b083      	sub	sp, #12
    a59e:	af00      	add	r7, sp, #0
    a5a0:	6078      	str	r0, [r7, #4]
    a5a2:	460b      	mov	r3, r1
    a5a4:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a5a6:	687b      	ldr	r3, [r7, #4]
    a5a8:	78fa      	ldrb	r2, [r7, #3]
    a5aa:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    a5ac:	bf00      	nop
    a5ae:	370c      	adds	r7, #12
    a5b0:	46bd      	mov	sp, r7
    a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5b6:	4770      	bx	lr

0000a5b8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    a5b8:	b480      	push	{r7}
    a5ba:	b083      	sub	sp, #12
    a5bc:	af00      	add	r7, sp, #0
    a5be:	6078      	str	r0, [r7, #4]
    a5c0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a5c2:	687b      	ldr	r3, [r7, #4]
    a5c4:	683a      	ldr	r2, [r7, #0]
    a5c6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    a5c8:	bf00      	nop
    a5ca:	370c      	adds	r7, #12
    a5cc:	46bd      	mov	sp, r7
    a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5d2:	4770      	bx	lr

0000a5d4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    a5d4:	b480      	push	{r7}
    a5d6:	b083      	sub	sp, #12
    a5d8:	af00      	add	r7, sp, #0
    a5da:	6078      	str	r0, [r7, #4]
    a5dc:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    a5de:	2300      	movs	r3, #0
}
    a5e0:	4618      	mov	r0, r3
    a5e2:	370c      	adds	r7, #12
    a5e4:	46bd      	mov	sp, r7
    a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5ea:	4770      	bx	lr

0000a5ec <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    a5ec:	b480      	push	{r7}
    a5ee:	b085      	sub	sp, #20
    a5f0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    a5f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a5f6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a5f8:	4b28      	ldr	r3, [pc, #160]	; (a69c <_usb_load_calib+0xb0>)
    a5fa:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    a5fc:	f003 031f 	and.w	r3, r3, #31
    a600:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    a602:	4b26      	ldr	r3, [pc, #152]	; (a69c <_usb_load_calib+0xb0>)
    a604:	681b      	ldr	r3, [r3, #0]
    a606:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    a608:	f003 031f 	and.w	r3, r3, #31
    a60c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a60e:	4b23      	ldr	r3, [pc, #140]	; (a69c <_usb_load_calib+0xb0>)
    a610:	681b      	ldr	r3, [r3, #0]
    a612:	0a9b      	lsrs	r3, r3, #10
    a614:	f003 0307 	and.w	r3, r3, #7
    a618:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a61a:	68fb      	ldr	r3, [r7, #12]
    a61c:	2b00      	cmp	r3, #0
    a61e:	d002      	beq.n	a626 <_usb_load_calib+0x3a>
    a620:	68fb      	ldr	r3, [r7, #12]
    a622:	2b1f      	cmp	r3, #31
    a624:	d101      	bne.n	a62a <_usb_load_calib+0x3e>
		pad_transn = 9;
    a626:	2309      	movs	r3, #9
    a628:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a62a:	68bb      	ldr	r3, [r7, #8]
    a62c:	2b00      	cmp	r3, #0
    a62e:	d002      	beq.n	a636 <_usb_load_calib+0x4a>
    a630:	68bb      	ldr	r3, [r7, #8]
    a632:	2b1f      	cmp	r3, #31
    a634:	d101      	bne.n	a63a <_usb_load_calib+0x4e>
		pad_transp = 25;
    a636:	2319      	movs	r3, #25
    a638:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    a63a:	687b      	ldr	r3, [r7, #4]
    a63c:	2b00      	cmp	r3, #0
    a63e:	d002      	beq.n	a646 <_usb_load_calib+0x5a>
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	2b07      	cmp	r3, #7
    a644:	d101      	bne.n	a64a <_usb_load_calib+0x5e>
		pad_trim = 6;
    a646:	2306      	movs	r3, #6
    a648:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a64a:	68fb      	ldr	r3, [r7, #12]
    a64c:	b29b      	uxth	r3, r3
    a64e:	019b      	lsls	r3, r3, #6
    a650:	b29b      	uxth	r3, r3
    a652:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    a656:	b29a      	uxth	r2, r3
    a658:	68bb      	ldr	r3, [r7, #8]
    a65a:	b29b      	uxth	r3, r3
    a65c:	f003 031f 	and.w	r3, r3, #31
    a660:	b29b      	uxth	r3, r3
    a662:	4313      	orrs	r3, r2
    a664:	b29a      	uxth	r2, r3
    a666:	687b      	ldr	r3, [r7, #4]
    a668:	b29b      	uxth	r3, r3
    a66a:	031b      	lsls	r3, r3, #12
    a66c:	b29b      	uxth	r3, r3
    a66e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a672:	b29b      	uxth	r3, r3
    a674:	4313      	orrs	r3, r2
    a676:	b29a      	uxth	r2, r3
    a678:	683b      	ldr	r3, [r7, #0]
    a67a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a67c:	683a      	ldr	r2, [r7, #0]
    a67e:	78d3      	ldrb	r3, [r2, #3]
    a680:	f043 0303 	orr.w	r3, r3, #3
    a684:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a686:	683a      	ldr	r2, [r7, #0]
    a688:	78d3      	ldrb	r3, [r2, #3]
    a68a:	f043 030c 	orr.w	r3, r3, #12
    a68e:	70d3      	strb	r3, [r2, #3]
}
    a690:	bf00      	nop
    a692:	3714      	adds	r7, #20
    a694:	46bd      	mov	sp, r7
    a696:	f85d 7b04 	ldr.w	r7, [sp], #4
    a69a:	4770      	bx	lr
    a69c:	00800084 	.word	0x00800084

0000a6a0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a6a0:	b580      	push	{r7, lr}
    a6a2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a6a4:	bf00      	nop
    a6a6:	2203      	movs	r2, #3
    a6a8:	2100      	movs	r1, #0
    a6aa:	4804      	ldr	r0, [pc, #16]	; (a6bc <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a6ac:	4b04      	ldr	r3, [pc, #16]	; (a6c0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    a6ae:	4798      	blx	r3
    a6b0:	4603      	mov	r3, r0
    a6b2:	2b03      	cmp	r3, #3
    a6b4:	d1f7      	bne.n	a6a6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a6b6:	bf00      	nop
    a6b8:	bd80      	pop	{r7, pc}
    a6ba:	bf00      	nop
    a6bc:	40001000 	.word	0x40001000
    a6c0:	0000a0d5 	.word	0x0000a0d5

0000a6c4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a6c4:	b580      	push	{r7, lr}
    a6c6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a6c8:	480e      	ldr	r0, [pc, #56]	; (a704 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a6ca:	4b0f      	ldr	r3, [pc, #60]	; (a708 <_usb_d_dev_wait_dfll_rdy+0x44>)
    a6cc:	4798      	blx	r3
    a6ce:	4603      	mov	r3, r0
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d00a      	beq.n	a6ea <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a6d4:	bf00      	nop
    a6d6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a6da:	480a      	ldr	r0, [pc, #40]	; (a704 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a6dc:	4b0b      	ldr	r3, [pc, #44]	; (a70c <_usb_d_dev_wait_dfll_rdy+0x48>)
    a6de:	4798      	blx	r3
    a6e0:	4603      	mov	r3, r0
    a6e2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a6e6:	d1f6      	bne.n	a6d6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a6e8:	e009      	b.n	a6fe <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a6ea:	bf00      	nop
    a6ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    a6f0:	4804      	ldr	r0, [pc, #16]	; (a704 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a6f2:	4b06      	ldr	r3, [pc, #24]	; (a70c <_usb_d_dev_wait_dfll_rdy+0x48>)
    a6f4:	4798      	blx	r3
    a6f6:	4603      	mov	r3, r0
    a6f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a6fc:	d1f6      	bne.n	a6ec <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a6fe:	bf00      	nop
    a700:	bd80      	pop	{r7, pc}
    a702:	bf00      	nop
    a704:	40001000 	.word	0x40001000
    a708:	0000a133 	.word	0x0000a133
    a70c:	0000a10d 	.word	0x0000a10d

0000a710 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a710:	b580      	push	{r7, lr}
    a712:	b082      	sub	sp, #8
    a714:	af00      	add	r7, sp, #0
    a716:	4603      	mov	r3, r0
    a718:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a71a:	79fb      	ldrb	r3, [r7, #7]
    a71c:	2b00      	cmp	r3, #0
    a71e:	d102      	bne.n	a726 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a720:	4b05      	ldr	r3, [pc, #20]	; (a738 <_usb_d_dev_wait_clk_rdy+0x28>)
    a722:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a724:	e004      	b.n	a730 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a726:	79fb      	ldrb	r3, [r7, #7]
    a728:	2b01      	cmp	r3, #1
    a72a:	d101      	bne.n	a730 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a72c:	4b03      	ldr	r3, [pc, #12]	; (a73c <_usb_d_dev_wait_clk_rdy+0x2c>)
    a72e:	4798      	blx	r3
}
    a730:	bf00      	nop
    a732:	3708      	adds	r7, #8
    a734:	46bd      	mov	sp, r7
    a736:	bd80      	pop	{r7, pc}
    a738:	0000a6c5 	.word	0x0000a6c5
    a73c:	0000a6a1 	.word	0x0000a6a1

0000a740 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    a740:	b580      	push	{r7, lr}
    a742:	b082      	sub	sp, #8
    a744:	af00      	add	r7, sp, #0
    a746:	4603      	mov	r3, r0
    a748:	6039      	str	r1, [r7, #0]
    a74a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    a74c:	683b      	ldr	r3, [r7, #0]
    a74e:	b2da      	uxtb	r2, r3
    a750:	79fb      	ldrb	r3, [r7, #7]
    a752:	4619      	mov	r1, r3
    a754:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a758:	4b02      	ldr	r3, [pc, #8]	; (a764 <_usbd_ep_int_ack+0x24>)
    a75a:	4798      	blx	r3
}
    a75c:	bf00      	nop
    a75e:	3708      	adds	r7, #8
    a760:	46bd      	mov	sp, r7
    a762:	bd80      	pop	{r7, pc}
    a764:	0000a219 	.word	0x0000a219

0000a768 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    a768:	b580      	push	{r7, lr}
    a76a:	b082      	sub	sp, #8
    a76c:	af00      	add	r7, sp, #0
    a76e:	4603      	mov	r3, r0
    a770:	6039      	str	r1, [r7, #0]
    a772:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a774:	683b      	ldr	r3, [r7, #0]
    a776:	b2da      	uxtb	r2, r3
    a778:	79fb      	ldrb	r3, [r7, #7]
    a77a:	4619      	mov	r1, r3
    a77c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a780:	4b02      	ldr	r3, [pc, #8]	; (a78c <_usbd_ep_int_en+0x24>)
    a782:	4798      	blx	r3
}
    a784:	bf00      	nop
    a786:	3708      	adds	r7, #8
    a788:	46bd      	mov	sp, r7
    a78a:	bd80      	pop	{r7, pc}
    a78c:	0000a2ed 	.word	0x0000a2ed

0000a790 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    a790:	b580      	push	{r7, lr}
    a792:	b082      	sub	sp, #8
    a794:	af00      	add	r7, sp, #0
    a796:	4603      	mov	r3, r0
    a798:	6039      	str	r1, [r7, #0]
    a79a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    a79c:	683b      	ldr	r3, [r7, #0]
    a79e:	b2da      	uxtb	r2, r3
    a7a0:	79fb      	ldrb	r3, [r7, #7]
    a7a2:	4619      	mov	r1, r3
    a7a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7a8:	4b02      	ldr	r3, [pc, #8]	; (a7b4 <_usbd_ep_int_dis+0x24>)
    a7aa:	4798      	blx	r3
}
    a7ac:	bf00      	nop
    a7ae:	3708      	adds	r7, #8
    a7b0:	46bd      	mov	sp, r7
    a7b2:	bd80      	pop	{r7, pc}
    a7b4:	0000a319 	.word	0x0000a319

0000a7b8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    a7b8:	b580      	push	{r7, lr}
    a7ba:	b082      	sub	sp, #8
    a7bc:	af00      	add	r7, sp, #0
    a7be:	4603      	mov	r3, r0
    a7c0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    a7c2:	79fb      	ldrb	r3, [r7, #7]
    a7c4:	4619      	mov	r1, r3
    a7c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7ca:	4b06      	ldr	r3, [pc, #24]	; (a7e4 <_usbd_ep_is_ctrl+0x2c>)
    a7cc:	4798      	blx	r3
    a7ce:	4603      	mov	r3, r0
    a7d0:	2b11      	cmp	r3, #17
    a7d2:	bf0c      	ite	eq
    a7d4:	2301      	moveq	r3, #1
    a7d6:	2300      	movne	r3, #0
    a7d8:	b2db      	uxtb	r3, r3
}
    a7da:	4618      	mov	r0, r3
    a7dc:	3708      	adds	r7, #8
    a7de:	46bd      	mov	sp, r7
    a7e0:	bd80      	pop	{r7, pc}
    a7e2:	bf00      	nop
    a7e4:	0000a3d3 	.word	0x0000a3d3

0000a7e8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    a7e8:	b580      	push	{r7, lr}
    a7ea:	b082      	sub	sp, #8
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	4603      	mov	r3, r0
    a7f0:	71fb      	strb	r3, [r7, #7]
    a7f2:	460b      	mov	r3, r1
    a7f4:	71bb      	strb	r3, [r7, #6]
    a7f6:	4613      	mov	r3, r2
    a7f8:	717b      	strb	r3, [r7, #5]
	if (st) {
    a7fa:	797b      	ldrb	r3, [r7, #5]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d00b      	beq.n	a818 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a800:	79bb      	ldrb	r3, [r7, #6]
    a802:	2210      	movs	r2, #16
    a804:	fa02 f303 	lsl.w	r3, r2, r3
    a808:	b2da      	uxtb	r2, r3
    a80a:	79fb      	ldrb	r3, [r7, #7]
    a80c:	4619      	mov	r1, r3
    a80e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a812:	4b09      	ldr	r3, [pc, #36]	; (a838 <_usbd_ep_set_stall+0x50>)
    a814:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    a816:	e00a      	b.n	a82e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a818:	79bb      	ldrb	r3, [r7, #6]
    a81a:	2210      	movs	r2, #16
    a81c:	fa02 f303 	lsl.w	r3, r2, r3
    a820:	b2da      	uxtb	r2, r3
    a822:	79fb      	ldrb	r3, [r7, #7]
    a824:	4619      	mov	r1, r3
    a826:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a82a:	4b04      	ldr	r3, [pc, #16]	; (a83c <_usbd_ep_set_stall+0x54>)
    a82c:	4798      	blx	r3
}
    a82e:	bf00      	nop
    a830:	3708      	adds	r7, #8
    a832:	46bd      	mov	sp, r7
    a834:	bd80      	pop	{r7, pc}
    a836:	bf00      	nop
    a838:	0000a245 	.word	0x0000a245
    a83c:	0000a299 	.word	0x0000a299

0000a840 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    a840:	b580      	push	{r7, lr}
    a842:	b084      	sub	sp, #16
    a844:	af00      	add	r7, sp, #0
    a846:	4603      	mov	r3, r0
    a848:	460a      	mov	r2, r1
    a84a:	71fb      	strb	r3, [r7, #7]
    a84c:	4613      	mov	r3, r2
    a84e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a850:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a854:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    a856:	79fb      	ldrb	r3, [r7, #7]
    a858:	4619      	mov	r1, r3
    a85a:	68f8      	ldr	r0, [r7, #12]
    a85c:	4b08      	ldr	r3, [pc, #32]	; (a880 <_usbd_ep_is_stalled+0x40>)
    a85e:	4798      	blx	r3
    a860:	4603      	mov	r3, r0
    a862:	4619      	mov	r1, r3
    a864:	79bb      	ldrb	r3, [r7, #6]
    a866:	2210      	movs	r2, #16
    a868:	fa02 f303 	lsl.w	r3, r2, r3
    a86c:	400b      	ands	r3, r1
    a86e:	2b00      	cmp	r3, #0
    a870:	bf14      	ite	ne
    a872:	2301      	movne	r3, #1
    a874:	2300      	moveq	r3, #0
    a876:	b2db      	uxtb	r3, r3
}
    a878:	4618      	mov	r0, r3
    a87a:	3710      	adds	r7, #16
    a87c:	46bd      	mov	sp, r7
    a87e:	bd80      	pop	{r7, pc}
    a880:	0000a271 	.word	0x0000a271

0000a884 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    a884:	b580      	push	{r7, lr}
    a886:	b084      	sub	sp, #16
    a888:	af00      	add	r7, sp, #0
    a88a:	4603      	mov	r3, r0
    a88c:	460a      	mov	r2, r1
    a88e:	71fb      	strb	r3, [r7, #7]
    a890:	4613      	mov	r3, r2
    a892:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    a894:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a898:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a89a:	79fb      	ldrb	r3, [r7, #7]
    a89c:	4619      	mov	r1, r3
    a89e:	68f8      	ldr	r0, [r7, #12]
    a8a0:	4b08      	ldr	r3, [pc, #32]	; (a8c4 <_usbd_ep_is_stall_sent+0x40>)
    a8a2:	4798      	blx	r3
    a8a4:	4603      	mov	r3, r0
    a8a6:	4619      	mov	r1, r3
    a8a8:	79bb      	ldrb	r3, [r7, #6]
    a8aa:	2220      	movs	r2, #32
    a8ac:	fa02 f303 	lsl.w	r3, r2, r3
    a8b0:	400b      	ands	r3, r1
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	bf14      	ite	ne
    a8b6:	2301      	movne	r3, #1
    a8b8:	2300      	moveq	r3, #0
    a8ba:	b2db      	uxtb	r3, r3
}
    a8bc:	4618      	mov	r0, r3
    a8be:	3710      	adds	r7, #16
    a8c0:	46bd      	mov	sp, r7
    a8c2:	bd80      	pop	{r7, pc}
    a8c4:	0000a1f1 	.word	0x0000a1f1

0000a8c8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    a8c8:	b580      	push	{r7, lr}
    a8ca:	b082      	sub	sp, #8
    a8cc:	af00      	add	r7, sp, #0
    a8ce:	4603      	mov	r3, r0
    a8d0:	460a      	mov	r2, r1
    a8d2:	71fb      	strb	r3, [r7, #7]
    a8d4:	4613      	mov	r3, r2
    a8d6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    a8d8:	79bb      	ldrb	r3, [r7, #6]
    a8da:	2220      	movs	r2, #32
    a8dc:	409a      	lsls	r2, r3
    a8de:	79fb      	ldrb	r3, [r7, #7]
    a8e0:	4611      	mov	r1, r2
    a8e2:	4618      	mov	r0, r3
    a8e4:	4b02      	ldr	r3, [pc, #8]	; (a8f0 <_usbd_ep_ack_stall+0x28>)
    a8e6:	4798      	blx	r3
}
    a8e8:	bf00      	nop
    a8ea:	3708      	adds	r7, #8
    a8ec:	46bd      	mov	sp, r7
    a8ee:	bd80      	pop	{r7, pc}
    a8f0:	0000a741 	.word	0x0000a741

0000a8f4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    a8f4:	b580      	push	{r7, lr}
    a8f6:	b082      	sub	sp, #8
    a8f8:	af00      	add	r7, sp, #0
    a8fa:	4603      	mov	r3, r0
    a8fc:	71fb      	strb	r3, [r7, #7]
    a8fe:	460b      	mov	r3, r1
    a900:	71bb      	strb	r3, [r7, #6]
    a902:	4613      	mov	r3, r2
    a904:	717b      	strb	r3, [r7, #5]
	if (en) {
    a906:	797b      	ldrb	r3, [r7, #5]
    a908:	2b00      	cmp	r3, #0
    a90a:	d008      	beq.n	a91e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a90c:	79bb      	ldrb	r3, [r7, #6]
    a90e:	2220      	movs	r2, #32
    a910:	409a      	lsls	r2, r3
    a912:	79fb      	ldrb	r3, [r7, #7]
    a914:	4611      	mov	r1, r2
    a916:	4618      	mov	r0, r3
    a918:	4b07      	ldr	r3, [pc, #28]	; (a938 <_usbd_ep_int_stall_en+0x44>)
    a91a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    a91c:	e007      	b.n	a92e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    a91e:	79bb      	ldrb	r3, [r7, #6]
    a920:	2220      	movs	r2, #32
    a922:	409a      	lsls	r2, r3
    a924:	79fb      	ldrb	r3, [r7, #7]
    a926:	4611      	mov	r1, r2
    a928:	4618      	mov	r0, r3
    a92a:	4b04      	ldr	r3, [pc, #16]	; (a93c <_usbd_ep_int_stall_en+0x48>)
    a92c:	4798      	blx	r3
}
    a92e:	bf00      	nop
    a930:	3708      	adds	r7, #8
    a932:	46bd      	mov	sp, r7
    a934:	bd80      	pop	{r7, pc}
    a936:	bf00      	nop
    a938:	0000a769 	.word	0x0000a769
    a93c:	0000a791 	.word	0x0000a791

0000a940 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    a940:	b580      	push	{r7, lr}
    a942:	b082      	sub	sp, #8
    a944:	af00      	add	r7, sp, #0
    a946:	4603      	mov	r3, r0
    a948:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    a94a:	79fb      	ldrb	r3, [r7, #7]
    a94c:	4619      	mov	r1, r3
    a94e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a952:	4b03      	ldr	r3, [pc, #12]	; (a960 <_usbd_ep_stop_setup+0x20>)
    a954:	4798      	blx	r3
}
    a956:	bf00      	nop
    a958:	3708      	adds	r7, #8
    a95a:	46bd      	mov	sp, r7
    a95c:	bd80      	pop	{r7, pc}
    a95e:	bf00      	nop
    a960:	0000a2c5 	.word	0x0000a2c5

0000a964 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    a964:	b580      	push	{r7, lr}
    a966:	b082      	sub	sp, #8
    a968:	af00      	add	r7, sp, #0
    a96a:	4603      	mov	r3, r0
    a96c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a96e:	79fb      	ldrb	r3, [r7, #7]
    a970:	2210      	movs	r2, #16
    a972:	4619      	mov	r1, r3
    a974:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a978:	4b05      	ldr	r3, [pc, #20]	; (a990 <_usbd_ep_is_setup+0x2c>)
    a97a:	4798      	blx	r3
    a97c:	4603      	mov	r3, r0
    a97e:	2b00      	cmp	r3, #0
    a980:	bf14      	ite	ne
    a982:	2301      	movne	r3, #1
    a984:	2300      	moveq	r3, #0
    a986:	b2db      	uxtb	r3, r3
}
    a988:	4618      	mov	r0, r3
    a98a:	3708      	adds	r7, #8
    a98c:	46bd      	mov	sp, r7
    a98e:	bd80      	pop	{r7, pc}
    a990:	0000a1bb 	.word	0x0000a1bb

0000a994 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    a994:	b580      	push	{r7, lr}
    a996:	b082      	sub	sp, #8
    a998:	af00      	add	r7, sp, #0
    a99a:	4603      	mov	r3, r0
    a99c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    a99e:	79fb      	ldrb	r3, [r7, #7]
    a9a0:	2110      	movs	r1, #16
    a9a2:	4618      	mov	r0, r3
    a9a4:	4b02      	ldr	r3, [pc, #8]	; (a9b0 <_usbd_ep_ack_setup+0x1c>)
    a9a6:	4798      	blx	r3
}
    a9a8:	bf00      	nop
    a9aa:	3708      	adds	r7, #8
    a9ac:	46bd      	mov	sp, r7
    a9ae:	bd80      	pop	{r7, pc}
    a9b0:	0000a741 	.word	0x0000a741

0000a9b4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    a9b4:	b580      	push	{r7, lr}
    a9b6:	b082      	sub	sp, #8
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	4603      	mov	r3, r0
    a9bc:	71fb      	strb	r3, [r7, #7]
    a9be:	460b      	mov	r3, r1
    a9c0:	71bb      	strb	r3, [r7, #6]
    a9c2:	4613      	mov	r3, r2
    a9c4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    a9c6:	797b      	ldrb	r3, [r7, #5]
    a9c8:	2b00      	cmp	r3, #0
    a9ca:	d00b      	beq.n	a9e4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a9cc:	79bb      	ldrb	r3, [r7, #6]
    a9ce:	2201      	movs	r2, #1
    a9d0:	fa02 f303 	lsl.w	r3, r2, r3
    a9d4:	b2da      	uxtb	r2, r3
    a9d6:	79fb      	ldrb	r3, [r7, #7]
    a9d8:	4619      	mov	r1, r3
    a9da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9de:	4b09      	ldr	r3, [pc, #36]	; (aa04 <_usbd_ep_set_toggle+0x50>)
    a9e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    a9e2:	e00a      	b.n	a9fa <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    a9e4:	79bb      	ldrb	r3, [r7, #6]
    a9e6:	2201      	movs	r2, #1
    a9e8:	fa02 f303 	lsl.w	r3, r2, r3
    a9ec:	b2da      	uxtb	r2, r3
    a9ee:	79fb      	ldrb	r3, [r7, #7]
    a9f0:	4619      	mov	r1, r3
    a9f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9f6:	4b04      	ldr	r3, [pc, #16]	; (aa08 <_usbd_ep_set_toggle+0x54>)
    a9f8:	4798      	blx	r3
}
    a9fa:	bf00      	nop
    a9fc:	3708      	adds	r7, #8
    a9fe:	46bd      	mov	sp, r7
    aa00:	bd80      	pop	{r7, pc}
    aa02:	bf00      	nop
    aa04:	0000a245 	.word	0x0000a245
    aa08:	0000a299 	.word	0x0000a299

0000aa0c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    aa0c:	b580      	push	{r7, lr}
    aa0e:	b082      	sub	sp, #8
    aa10:	af00      	add	r7, sp, #0
    aa12:	4603      	mov	r3, r0
    aa14:	460a      	mov	r2, r1
    aa16:	71fb      	strb	r3, [r7, #7]
    aa18:	4613      	mov	r3, r2
    aa1a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    aa1c:	79bb      	ldrb	r3, [r7, #6]
    aa1e:	2201      	movs	r2, #1
    aa20:	409a      	lsls	r2, r3
    aa22:	79fb      	ldrb	r3, [r7, #7]
    aa24:	4611      	mov	r1, r2
    aa26:	4618      	mov	r0, r3
    aa28:	4b02      	ldr	r3, [pc, #8]	; (aa34 <_usbd_ep_ack_io_cpt+0x28>)
    aa2a:	4798      	blx	r3
}
    aa2c:	bf00      	nop
    aa2e:	3708      	adds	r7, #8
    aa30:	46bd      	mov	sp, r7
    aa32:	bd80      	pop	{r7, pc}
    aa34:	0000a741 	.word	0x0000a741

0000aa38 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    aa38:	b480      	push	{r7}
    aa3a:	b085      	sub	sp, #20
    aa3c:	af00      	add	r7, sp, #0
    aa3e:	4603      	mov	r3, r0
    aa40:	603a      	str	r2, [r7, #0]
    aa42:	71fb      	strb	r3, [r7, #7]
    aa44:	460b      	mov	r3, r1
    aa46:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aa48:	79fa      	ldrb	r2, [r7, #7]
    aa4a:	79bb      	ldrb	r3, [r7, #6]
    aa4c:	0052      	lsls	r2, r2, #1
    aa4e:	4413      	add	r3, r2
    aa50:	011b      	lsls	r3, r3, #4
    aa52:	4a06      	ldr	r2, [pc, #24]	; (aa6c <_usbd_ep_set_buf+0x34>)
    aa54:	4413      	add	r3, r2
    aa56:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    aa58:	68fb      	ldr	r3, [r7, #12]
    aa5a:	683a      	ldr	r2, [r7, #0]
    aa5c:	601a      	str	r2, [r3, #0]
}
    aa5e:	bf00      	nop
    aa60:	3714      	adds	r7, #20
    aa62:	46bd      	mov	sp, r7
    aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa68:	4770      	bx	lr
    aa6a:	bf00      	nop
    aa6c:	20002038 	.word	0x20002038

0000aa70 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    aa70:	b480      	push	{r7}
    aa72:	b085      	sub	sp, #20
    aa74:	af00      	add	r7, sp, #0
    aa76:	4603      	mov	r3, r0
    aa78:	71fb      	strb	r3, [r7, #7]
    aa7a:	460b      	mov	r3, r1
    aa7c:	71bb      	strb	r3, [r7, #6]
    aa7e:	4613      	mov	r3, r2
    aa80:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aa82:	79fa      	ldrb	r2, [r7, #7]
    aa84:	79bb      	ldrb	r3, [r7, #6]
    aa86:	0052      	lsls	r2, r2, #1
    aa88:	4413      	add	r3, r2
    aa8a:	011b      	lsls	r3, r3, #4
    aa8c:	4a08      	ldr	r2, [pc, #32]	; (aab0 <_usbd_ep_set_in_count+0x40>)
    aa8e:	4413      	add	r3, r2
    aa90:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    aa92:	88bb      	ldrh	r3, [r7, #4]
    aa94:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aa98:	b299      	uxth	r1, r3
    aa9a:	68fa      	ldr	r2, [r7, #12]
    aa9c:	6853      	ldr	r3, [r2, #4]
    aa9e:	f361 339b 	bfi	r3, r1, #14, #14
    aaa2:	6053      	str	r3, [r2, #4]
}
    aaa4:	bf00      	nop
    aaa6:	3714      	adds	r7, #20
    aaa8:	46bd      	mov	sp, r7
    aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaae:	4770      	bx	lr
    aab0:	20002038 	.word	0x20002038

0000aab4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    aab4:	b480      	push	{r7}
    aab6:	b085      	sub	sp, #20
    aab8:	af00      	add	r7, sp, #0
    aaba:	4603      	mov	r3, r0
    aabc:	71fb      	strb	r3, [r7, #7]
    aabe:	460b      	mov	r3, r1
    aac0:	71bb      	strb	r3, [r7, #6]
    aac2:	4613      	mov	r3, r2
    aac4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    aac6:	79fa      	ldrb	r2, [r7, #7]
    aac8:	79bb      	ldrb	r3, [r7, #6]
    aaca:	0052      	lsls	r2, r2, #1
    aacc:	4413      	add	r3, r2
    aace:	011b      	lsls	r3, r3, #4
    aad0:	4a08      	ldr	r2, [pc, #32]	; (aaf4 <_usbd_ep_set_in_size+0x40>)
    aad2:	4413      	add	r3, r2
    aad4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    aad6:	88bb      	ldrh	r3, [r7, #4]
    aad8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aadc:	b299      	uxth	r1, r3
    aade:	68fa      	ldr	r2, [r7, #12]
    aae0:	6853      	ldr	r3, [r2, #4]
    aae2:	f361 030d 	bfi	r3, r1, #0, #14
    aae6:	6053      	str	r3, [r2, #4]
}
    aae8:	bf00      	nop
    aaea:	3714      	adds	r7, #20
    aaec:	46bd      	mov	sp, r7
    aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaf2:	4770      	bx	lr
    aaf4:	20002038 	.word	0x20002038

0000aaf8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    aaf8:	b480      	push	{r7}
    aafa:	b085      	sub	sp, #20
    aafc:	af00      	add	r7, sp, #0
    aafe:	4603      	mov	r3, r0
    ab00:	71fb      	strb	r3, [r7, #7]
    ab02:	460b      	mov	r3, r1
    ab04:	71bb      	strb	r3, [r7, #6]
    ab06:	4613      	mov	r3, r2
    ab08:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ab0a:	79fa      	ldrb	r2, [r7, #7]
    ab0c:	79bb      	ldrb	r3, [r7, #6]
    ab0e:	0052      	lsls	r2, r2, #1
    ab10:	4413      	add	r3, r2
    ab12:	011b      	lsls	r3, r3, #4
    ab14:	4a08      	ldr	r2, [pc, #32]	; (ab38 <_usbd_ep_set_out_count+0x40>)
    ab16:	4413      	add	r3, r2
    ab18:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    ab1a:	88bb      	ldrh	r3, [r7, #4]
    ab1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ab20:	b299      	uxth	r1, r3
    ab22:	68fa      	ldr	r2, [r7, #12]
    ab24:	6853      	ldr	r3, [r2, #4]
    ab26:	f361 030d 	bfi	r3, r1, #0, #14
    ab2a:	6053      	str	r3, [r2, #4]
}
    ab2c:	bf00      	nop
    ab2e:	3714      	adds	r7, #20
    ab30:	46bd      	mov	sp, r7
    ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab36:	4770      	bx	lr
    ab38:	20002038 	.word	0x20002038

0000ab3c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ab3c:	b480      	push	{r7}
    ab3e:	b085      	sub	sp, #20
    ab40:	af00      	add	r7, sp, #0
    ab42:	4603      	mov	r3, r0
    ab44:	71fb      	strb	r3, [r7, #7]
    ab46:	460b      	mov	r3, r1
    ab48:	71bb      	strb	r3, [r7, #6]
    ab4a:	4613      	mov	r3, r2
    ab4c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ab4e:	79fa      	ldrb	r2, [r7, #7]
    ab50:	79bb      	ldrb	r3, [r7, #6]
    ab52:	0052      	lsls	r2, r2, #1
    ab54:	4413      	add	r3, r2
    ab56:	011b      	lsls	r3, r3, #4
    ab58:	4a08      	ldr	r2, [pc, #32]	; (ab7c <_usbd_ep_set_out_size+0x40>)
    ab5a:	4413      	add	r3, r2
    ab5c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    ab5e:	88bb      	ldrh	r3, [r7, #4]
    ab60:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ab64:	b299      	uxth	r1, r3
    ab66:	68fa      	ldr	r2, [r7, #12]
    ab68:	6853      	ldr	r3, [r2, #4]
    ab6a:	f361 339b 	bfi	r3, r1, #14, #14
    ab6e:	6053      	str	r3, [r2, #4]
}
    ab70:	bf00      	nop
    ab72:	3714      	adds	r7, #20
    ab74:	46bd      	mov	sp, r7
    ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab7a:	4770      	bx	lr
    ab7c:	20002038 	.word	0x20002038

0000ab80 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ab80:	b580      	push	{r7, lr}
    ab82:	b084      	sub	sp, #16
    ab84:	af00      	add	r7, sp, #0
    ab86:	60ba      	str	r2, [r7, #8]
    ab88:	607b      	str	r3, [r7, #4]
    ab8a:	4603      	mov	r3, r0
    ab8c:	73fb      	strb	r3, [r7, #15]
    ab8e:	460b      	mov	r3, r1
    ab90:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    ab92:	68bb      	ldr	r3, [r7, #8]
    ab94:	b29a      	uxth	r2, r3
    ab96:	7bb9      	ldrb	r1, [r7, #14]
    ab98:	7bfb      	ldrb	r3, [r7, #15]
    ab9a:	4618      	mov	r0, r3
    ab9c:	4b06      	ldr	r3, [pc, #24]	; (abb8 <_usbd_ep_set_in_trans+0x38>)
    ab9e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    aba0:	687b      	ldr	r3, [r7, #4]
    aba2:	b29a      	uxth	r2, r3
    aba4:	7bb9      	ldrb	r1, [r7, #14]
    aba6:	7bfb      	ldrb	r3, [r7, #15]
    aba8:	4618      	mov	r0, r3
    abaa:	4b04      	ldr	r3, [pc, #16]	; (abbc <_usbd_ep_set_in_trans+0x3c>)
    abac:	4798      	blx	r3
}
    abae:	bf00      	nop
    abb0:	3710      	adds	r7, #16
    abb2:	46bd      	mov	sp, r7
    abb4:	bd80      	pop	{r7, pc}
    abb6:	bf00      	nop
    abb8:	0000aab5 	.word	0x0000aab5
    abbc:	0000aa71 	.word	0x0000aa71

0000abc0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    abc0:	b580      	push	{r7, lr}
    abc2:	b084      	sub	sp, #16
    abc4:	af00      	add	r7, sp, #0
    abc6:	60ba      	str	r2, [r7, #8]
    abc8:	607b      	str	r3, [r7, #4]
    abca:	4603      	mov	r3, r0
    abcc:	73fb      	strb	r3, [r7, #15]
    abce:	460b      	mov	r3, r1
    abd0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    abd2:	68bb      	ldr	r3, [r7, #8]
    abd4:	b29a      	uxth	r2, r3
    abd6:	7bb9      	ldrb	r1, [r7, #14]
    abd8:	7bfb      	ldrb	r3, [r7, #15]
    abda:	4618      	mov	r0, r3
    abdc:	4b06      	ldr	r3, [pc, #24]	; (abf8 <_usbd_ep_set_out_trans+0x38>)
    abde:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	b29a      	uxth	r2, r3
    abe4:	7bb9      	ldrb	r1, [r7, #14]
    abe6:	7bfb      	ldrb	r3, [r7, #15]
    abe8:	4618      	mov	r0, r3
    abea:	4b04      	ldr	r3, [pc, #16]	; (abfc <_usbd_ep_set_out_trans+0x3c>)
    abec:	4798      	blx	r3
}
    abee:	bf00      	nop
    abf0:	3710      	adds	r7, #16
    abf2:	46bd      	mov	sp, r7
    abf4:	bd80      	pop	{r7, pc}
    abf6:	bf00      	nop
    abf8:	0000ab3d 	.word	0x0000ab3d
    abfc:	0000aaf9 	.word	0x0000aaf9

0000ac00 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ac00:	b480      	push	{r7}
    ac02:	b085      	sub	sp, #20
    ac04:	af00      	add	r7, sp, #0
    ac06:	4603      	mov	r3, r0
    ac08:	460a      	mov	r2, r1
    ac0a:	71fb      	strb	r3, [r7, #7]
    ac0c:	4613      	mov	r3, r2
    ac0e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ac10:	79fa      	ldrb	r2, [r7, #7]
    ac12:	79bb      	ldrb	r3, [r7, #6]
    ac14:	0052      	lsls	r2, r2, #1
    ac16:	4413      	add	r3, r2
    ac18:	011b      	lsls	r3, r3, #4
    ac1a:	4a06      	ldr	r2, [pc, #24]	; (ac34 <_usbd_ep_clear_bank_status+0x34>)
    ac1c:	4413      	add	r3, r2
    ac1e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ac20:	68fb      	ldr	r3, [r7, #12]
    ac22:	2200      	movs	r2, #0
    ac24:	729a      	strb	r2, [r3, #10]
}
    ac26:	bf00      	nop
    ac28:	3714      	adds	r7, #20
    ac2a:	46bd      	mov	sp, r7
    ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac30:	4770      	bx	lr
    ac32:	bf00      	nop
    ac34:	20002038 	.word	0x20002038

0000ac38 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ac38:	b580      	push	{r7, lr}
    ac3a:	b082      	sub	sp, #8
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	4603      	mov	r3, r0
    ac40:	71fb      	strb	r3, [r7, #7]
    ac42:	460b      	mov	r3, r1
    ac44:	71bb      	strb	r3, [r7, #6]
    ac46:	4613      	mov	r3, r2
    ac48:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ac4a:	797b      	ldrb	r3, [r7, #5]
    ac4c:	2b00      	cmp	r3, #0
    ac4e:	d00b      	beq.n	ac68 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ac50:	79bb      	ldrb	r3, [r7, #6]
    ac52:	2240      	movs	r2, #64	; 0x40
    ac54:	fa02 f303 	lsl.w	r3, r2, r3
    ac58:	b2da      	uxtb	r2, r3
    ac5a:	79fb      	ldrb	r3, [r7, #7]
    ac5c:	4619      	mov	r1, r3
    ac5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac62:	4b09      	ldr	r3, [pc, #36]	; (ac88 <_usbd_ep_set_in_rdy+0x50>)
    ac64:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ac66:	e00a      	b.n	ac7e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ac68:	79bb      	ldrb	r3, [r7, #6]
    ac6a:	2240      	movs	r2, #64	; 0x40
    ac6c:	fa02 f303 	lsl.w	r3, r2, r3
    ac70:	b2da      	uxtb	r2, r3
    ac72:	79fb      	ldrb	r3, [r7, #7]
    ac74:	4619      	mov	r1, r3
    ac76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac7a:	4b04      	ldr	r3, [pc, #16]	; (ac8c <_usbd_ep_set_in_rdy+0x54>)
    ac7c:	4798      	blx	r3
}
    ac7e:	bf00      	nop
    ac80:	3708      	adds	r7, #8
    ac82:	46bd      	mov	sp, r7
    ac84:	bd80      	pop	{r7, pc}
    ac86:	bf00      	nop
    ac88:	0000a245 	.word	0x0000a245
    ac8c:	0000a299 	.word	0x0000a299

0000ac90 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ac90:	b580      	push	{r7, lr}
    ac92:	b082      	sub	sp, #8
    ac94:	af00      	add	r7, sp, #0
    ac96:	4603      	mov	r3, r0
    ac98:	71fb      	strb	r3, [r7, #7]
    ac9a:	460b      	mov	r3, r1
    ac9c:	71bb      	strb	r3, [r7, #6]
    ac9e:	4613      	mov	r3, r2
    aca0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    aca2:	797b      	ldrb	r3, [r7, #5]
    aca4:	2b00      	cmp	r3, #0
    aca6:	d00b      	beq.n	acc0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    aca8:	79bb      	ldrb	r3, [r7, #6]
    acaa:	2240      	movs	r2, #64	; 0x40
    acac:	fa02 f303 	lsl.w	r3, r2, r3
    acb0:	b2da      	uxtb	r2, r3
    acb2:	79fb      	ldrb	r3, [r7, #7]
    acb4:	4619      	mov	r1, r3
    acb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acba:	4b09      	ldr	r3, [pc, #36]	; (ace0 <_usbd_ep_set_out_rdy+0x50>)
    acbc:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    acbe:	e00a      	b.n	acd6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    acc0:	79bb      	ldrb	r3, [r7, #6]
    acc2:	2240      	movs	r2, #64	; 0x40
    acc4:	fa02 f303 	lsl.w	r3, r2, r3
    acc8:	b2da      	uxtb	r2, r3
    acca:	79fb      	ldrb	r3, [r7, #7]
    accc:	4619      	mov	r1, r3
    acce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    acd2:	4b04      	ldr	r3, [pc, #16]	; (ace4 <_usbd_ep_set_out_rdy+0x54>)
    acd4:	4798      	blx	r3
}
    acd6:	bf00      	nop
    acd8:	3708      	adds	r7, #8
    acda:	46bd      	mov	sp, r7
    acdc:	bd80      	pop	{r7, pc}
    acde:	bf00      	nop
    ace0:	0000a299 	.word	0x0000a299
    ace4:	0000a245 	.word	0x0000a245

0000ace8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    ace8:	b480      	push	{r7}
    acea:	b083      	sub	sp, #12
    acec:	af00      	add	r7, sp, #0
    acee:	4603      	mov	r3, r0
    acf0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    acf2:	88fb      	ldrh	r3, [r7, #6]
    acf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    acf8:	d820      	bhi.n	ad3c <_usbd_ep_pcksize_size+0x54>
    acfa:	88fb      	ldrh	r3, [r7, #6]
    acfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ad00:	d81a      	bhi.n	ad38 <_usbd_ep_pcksize_size+0x50>
    ad02:	88fb      	ldrh	r3, [r7, #6]
    ad04:	2b80      	cmp	r3, #128	; 0x80
    ad06:	d815      	bhi.n	ad34 <_usbd_ep_pcksize_size+0x4c>
    ad08:	88fb      	ldrh	r3, [r7, #6]
    ad0a:	2b40      	cmp	r3, #64	; 0x40
    ad0c:	d810      	bhi.n	ad30 <_usbd_ep_pcksize_size+0x48>
    ad0e:	88fb      	ldrh	r3, [r7, #6]
    ad10:	2b20      	cmp	r3, #32
    ad12:	d80b      	bhi.n	ad2c <_usbd_ep_pcksize_size+0x44>
    ad14:	88fb      	ldrh	r3, [r7, #6]
    ad16:	2b10      	cmp	r3, #16
    ad18:	d806      	bhi.n	ad28 <_usbd_ep_pcksize_size+0x40>
    ad1a:	88fb      	ldrh	r3, [r7, #6]
    ad1c:	2b08      	cmp	r3, #8
    ad1e:	bf8c      	ite	hi
    ad20:	2301      	movhi	r3, #1
    ad22:	2300      	movls	r3, #0
    ad24:	b2db      	uxtb	r3, r3
    ad26:	e00a      	b.n	ad3e <_usbd_ep_pcksize_size+0x56>
    ad28:	2302      	movs	r3, #2
    ad2a:	e008      	b.n	ad3e <_usbd_ep_pcksize_size+0x56>
    ad2c:	2303      	movs	r3, #3
    ad2e:	e006      	b.n	ad3e <_usbd_ep_pcksize_size+0x56>
    ad30:	2304      	movs	r3, #4
    ad32:	e004      	b.n	ad3e <_usbd_ep_pcksize_size+0x56>
    ad34:	2305      	movs	r3, #5
    ad36:	e002      	b.n	ad3e <_usbd_ep_pcksize_size+0x56>
    ad38:	2306      	movs	r3, #6
    ad3a:	e000      	b.n	ad3e <_usbd_ep_pcksize_size+0x56>
    ad3c:	2307      	movs	r3, #7
}
    ad3e:	4618      	mov	r0, r3
    ad40:	370c      	adds	r7, #12
    ad42:	46bd      	mov	sp, r7
    ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad48:	4770      	bx	lr
	...

0000ad4c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    ad4c:	b480      	push	{r7}
    ad4e:	b085      	sub	sp, #20
    ad50:	af00      	add	r7, sp, #0
    ad52:	4603      	mov	r3, r0
    ad54:	460a      	mov	r2, r1
    ad56:	71fb      	strb	r3, [r7, #7]
    ad58:	4613      	mov	r3, r2
    ad5a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    ad5c:	79fb      	ldrb	r3, [r7, #7]
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d008      	beq.n	ad74 <_usb_d_dev_ept+0x28>
    ad62:	79bb      	ldrb	r3, [r7, #6]
    ad64:	2b00      	cmp	r3, #0
    ad66:	d003      	beq.n	ad70 <_usb_d_dev_ept+0x24>
    ad68:	79fb      	ldrb	r3, [r7, #7]
    ad6a:	3304      	adds	r3, #4
    ad6c:	b2db      	uxtb	r3, r3
    ad6e:	e002      	b.n	ad76 <_usb_d_dev_ept+0x2a>
    ad70:	79fb      	ldrb	r3, [r7, #7]
    ad72:	e000      	b.n	ad76 <_usb_d_dev_ept+0x2a>
    ad74:	2300      	movs	r3, #0
    ad76:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    ad78:	7bfa      	ldrb	r2, [r7, #15]
    ad7a:	4613      	mov	r3, r2
    ad7c:	009b      	lsls	r3, r3, #2
    ad7e:	4413      	add	r3, r2
    ad80:	009b      	lsls	r3, r3, #2
    ad82:	3310      	adds	r3, #16
    ad84:	4a04      	ldr	r2, [pc, #16]	; (ad98 <_usb_d_dev_ept+0x4c>)
    ad86:	4413      	add	r3, r2
    ad88:	3304      	adds	r3, #4
}
    ad8a:	4618      	mov	r0, r3
    ad8c:	3714      	adds	r7, #20
    ad8e:	46bd      	mov	sp, r7
    ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad94:	4770      	bx	lr
    ad96:	bf00      	nop
    ad98:	20001f70 	.word	0x20001f70

0000ad9c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    ad9c:	b580      	push	{r7, lr}
    ad9e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    ada0:	2104      	movs	r1, #4
    ada2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ada6:	4b03      	ldr	r3, [pc, #12]	; (adb4 <_usb_d_dev_sof+0x18>)
    ada8:	4798      	blx	r3
	dev_inst.callbacks.sof();
    adaa:	4b03      	ldr	r3, [pc, #12]	; (adb8 <_usb_d_dev_sof+0x1c>)
    adac:	681b      	ldr	r3, [r3, #0]
    adae:	4798      	blx	r3
}
    adb0:	bf00      	nop
    adb2:	bd80      	pop	{r7, pc}
    adb4:	0000a413 	.word	0x0000a413
    adb8:	20001f70 	.word	0x20001f70

0000adbc <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    adbc:	b580      	push	{r7, lr}
    adbe:	b084      	sub	sp, #16
    adc0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    adc2:	2300      	movs	r3, #0
    adc4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    adc6:	f240 2101 	movw	r1, #513	; 0x201
    adca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adce:	4b1a      	ldr	r3, [pc, #104]	; (ae38 <_usb_d_dev_lpmsusp+0x7c>)
    add0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    add2:	f240 2101 	movw	r1, #513	; 0x201
    add6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adda:	4b18      	ldr	r3, [pc, #96]	; (ae3c <_usb_d_dev_lpmsusp+0x80>)
    addc:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    adde:	2170      	movs	r1, #112	; 0x70
    ade0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ade4:	4b16      	ldr	r3, [pc, #88]	; (ae40 <_usb_d_dev_lpmsusp+0x84>)
    ade6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ade8:	2300      	movs	r3, #0
    adea:	73fb      	strb	r3, [r7, #15]
    adec:	e018      	b.n	ae20 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    adee:	7bfb      	ldrb	r3, [r7, #15]
    adf0:	015b      	lsls	r3, r3, #5
    adf2:	4a14      	ldr	r2, [pc, #80]	; (ae44 <_usb_d_dev_lpmsusp+0x88>)
    adf4:	4413      	add	r3, r2
    adf6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    adf8:	687b      	ldr	r3, [r7, #4]
    adfa:	891b      	ldrh	r3, [r3, #8]
    adfc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    ae00:	b2db      	uxtb	r3, r3
    ae02:	2b03      	cmp	r3, #3
    ae04:	d109      	bne.n	ae1a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    ae06:	687b      	ldr	r3, [r7, #4]
    ae08:	891b      	ldrh	r3, [r3, #8]
    ae0a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ae0e:	b29b      	uxth	r3, r3
    ae10:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ae12:	687b      	ldr	r3, [r7, #4]
    ae14:	2200      	movs	r2, #0
    ae16:	811a      	strh	r2, [r3, #8]
			break;
    ae18:	e005      	b.n	ae26 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ae1a:	7bfb      	ldrb	r3, [r7, #15]
    ae1c:	3301      	adds	r3, #1
    ae1e:	73fb      	strb	r3, [r7, #15]
    ae20:	7bfb      	ldrb	r3, [r7, #15]
    ae22:	2b03      	cmp	r3, #3
    ae24:	d9e3      	bls.n	adee <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ae26:	4b08      	ldr	r3, [pc, #32]	; (ae48 <_usb_d_dev_lpmsusp+0x8c>)
    ae28:	685b      	ldr	r3, [r3, #4]
    ae2a:	68b9      	ldr	r1, [r7, #8]
    ae2c:	2003      	movs	r0, #3
    ae2e:	4798      	blx	r3
}
    ae30:	bf00      	nop
    ae32:	3710      	adds	r7, #16
    ae34:	46bd      	mov	sp, r7
    ae36:	bd80      	pop	{r7, pc}
    ae38:	0000a413 	.word	0x0000a413
    ae3c:	0000a469 	.word	0x0000a469
    ae40:	0000a431 	.word	0x0000a431
    ae44:	20002038 	.word	0x20002038
    ae48:	20001f70 	.word	0x20001f70

0000ae4c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    ae4c:	b580      	push	{r7, lr}
    ae4e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    ae50:	2180      	movs	r1, #128	; 0x80
    ae52:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae56:	4b04      	ldr	r3, [pc, #16]	; (ae68 <_usb_d_dev_ramerr+0x1c>)
    ae58:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    ae5a:	4b04      	ldr	r3, [pc, #16]	; (ae6c <_usb_d_dev_ramerr+0x20>)
    ae5c:	685b      	ldr	r3, [r3, #4]
    ae5e:	2100      	movs	r1, #0
    ae60:	2005      	movs	r0, #5
    ae62:	4798      	blx	r3
}
    ae64:	bf00      	nop
    ae66:	bd80      	pop	{r7, pc}
    ae68:	0000a413 	.word	0x0000a413
    ae6c:	20001f70 	.word	0x20001f70

0000ae70 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    ae70:	b580      	push	{r7, lr}
    ae72:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ae74:	2170      	movs	r1, #112	; 0x70
    ae76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae7a:	4b0b      	ldr	r3, [pc, #44]	; (aea8 <_usb_d_dev_wakeup+0x38>)
    ae7c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ae7e:	2170      	movs	r1, #112	; 0x70
    ae80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae84:	4b09      	ldr	r3, [pc, #36]	; (aeac <_usb_d_dev_wakeup+0x3c>)
    ae86:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ae88:	f240 2101 	movw	r1, #513	; 0x201
    ae8c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae90:	4b07      	ldr	r3, [pc, #28]	; (aeb0 <_usb_d_dev_wakeup+0x40>)
    ae92:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    ae94:	2000      	movs	r0, #0
    ae96:	4b07      	ldr	r3, [pc, #28]	; (aeb4 <_usb_d_dev_wakeup+0x44>)
    ae98:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    ae9a:	4b07      	ldr	r3, [pc, #28]	; (aeb8 <_usb_d_dev_wakeup+0x48>)
    ae9c:	685b      	ldr	r3, [r3, #4]
    ae9e:	2100      	movs	r1, #0
    aea0:	2002      	movs	r0, #2
    aea2:	4798      	blx	r3
}
    aea4:	bf00      	nop
    aea6:	bd80      	pop	{r7, pc}
    aea8:	0000a413 	.word	0x0000a413
    aeac:	0000a469 	.word	0x0000a469
    aeb0:	0000a431 	.word	0x0000a431
    aeb4:	0000a711 	.word	0x0000a711
    aeb8:	20001f70 	.word	0x20001f70

0000aebc <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    aebc:	b580      	push	{r7, lr}
    aebe:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    aec0:	2200      	movs	r2, #0
    aec2:	2100      	movs	r1, #0
    aec4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aec8:	4b0d      	ldr	r3, [pc, #52]	; (af00 <_usb_d_dev_reset+0x44>)
    aeca:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    aecc:	2108      	movs	r1, #8
    aece:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aed2:	4b0c      	ldr	r3, [pc, #48]	; (af04 <_usb_d_dev_reset+0x48>)
    aed4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    aed6:	2170      	movs	r1, #112	; 0x70
    aed8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aedc:	4b0a      	ldr	r3, [pc, #40]	; (af08 <_usb_d_dev_reset+0x4c>)
    aede:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    aee0:	f240 2101 	movw	r1, #513	; 0x201
    aee4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aee8:	4b08      	ldr	r3, [pc, #32]	; (af0c <_usb_d_dev_reset+0x50>)
    aeea:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    aeec:	4b08      	ldr	r3, [pc, #32]	; (af10 <_usb_d_dev_reset+0x54>)
    aeee:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    aef0:	4b08      	ldr	r3, [pc, #32]	; (af14 <_usb_d_dev_reset+0x58>)
    aef2:	685b      	ldr	r3, [r3, #4]
    aef4:	2100      	movs	r1, #0
    aef6:	2001      	movs	r0, #1
    aef8:	4798      	blx	r3
}
    aefa:	bf00      	nop
    aefc:	bd80      	pop	{r7, pc}
    aefe:	bf00      	nop
    af00:	0000a3a9 	.word	0x0000a3a9
    af04:	0000a413 	.word	0x0000a413
    af08:	0000a469 	.word	0x0000a469
    af0c:	0000a431 	.word	0x0000a431
    af10:	0000ba79 	.word	0x0000ba79
    af14:	20001f70 	.word	0x20001f70

0000af18 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    af18:	b580      	push	{r7, lr}
    af1a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    af1c:	f240 2101 	movw	r1, #513	; 0x201
    af20:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af24:	4b09      	ldr	r3, [pc, #36]	; (af4c <_usb_d_dev_suspend+0x34>)
    af26:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    af28:	f240 2101 	movw	r1, #513	; 0x201
    af2c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af30:	4b07      	ldr	r3, [pc, #28]	; (af50 <_usb_d_dev_suspend+0x38>)
    af32:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    af34:	2170      	movs	r1, #112	; 0x70
    af36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af3a:	4b06      	ldr	r3, [pc, #24]	; (af54 <_usb_d_dev_suspend+0x3c>)
    af3c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    af3e:	4b06      	ldr	r3, [pc, #24]	; (af58 <_usb_d_dev_suspend+0x40>)
    af40:	685b      	ldr	r3, [r3, #4]
    af42:	2100      	movs	r1, #0
    af44:	2004      	movs	r0, #4
    af46:	4798      	blx	r3
}
    af48:	bf00      	nop
    af4a:	bd80      	pop	{r7, pc}
    af4c:	0000a413 	.word	0x0000a413
    af50:	0000a469 	.word	0x0000a469
    af54:	0000a431 	.word	0x0000a431
    af58:	20001f70 	.word	0x20001f70

0000af5c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    af5c:	b580      	push	{r7, lr}
    af5e:	b082      	sub	sp, #8
    af60:	af00      	add	r7, sp, #0
	bool     rc    = true;
    af62:	2301      	movs	r3, #1
    af64:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    af66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af6a:	4b22      	ldr	r3, [pc, #136]	; (aff4 <_usb_d_dev_handle_nep+0x98>)
    af6c:	4798      	blx	r3
    af6e:	4603      	mov	r3, r0
    af70:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    af72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af76:	4b20      	ldr	r3, [pc, #128]	; (aff8 <_usb_d_dev_handle_nep+0x9c>)
    af78:	4798      	blx	r3
    af7a:	4603      	mov	r3, r0
    af7c:	461a      	mov	r2, r3
    af7e:	88bb      	ldrh	r3, [r7, #4]
    af80:	4013      	ands	r3, r2
    af82:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    af84:	88bb      	ldrh	r3, [r7, #4]
    af86:	f003 0304 	and.w	r3, r3, #4
    af8a:	2b00      	cmp	r3, #0
    af8c:	d003      	beq.n	af96 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    af8e:	4b1b      	ldr	r3, [pc, #108]	; (affc <_usb_d_dev_handle_nep+0xa0>)
    af90:	4798      	blx	r3
		return true;
    af92:	2301      	movs	r3, #1
    af94:	e02a      	b.n	afec <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    af96:	88bb      	ldrh	r3, [r7, #4]
    af98:	f403 7300 	and.w	r3, r3, #512	; 0x200
    af9c:	2b00      	cmp	r3, #0
    af9e:	d002      	beq.n	afa6 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    afa0:	4b17      	ldr	r3, [pc, #92]	; (b000 <_usb_d_dev_handle_nep+0xa4>)
    afa2:	4798      	blx	r3
    afa4:	e021      	b.n	afea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    afa6:	88bb      	ldrh	r3, [r7, #4]
    afa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afac:	2b00      	cmp	r3, #0
    afae:	d002      	beq.n	afb6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    afb0:	4b14      	ldr	r3, [pc, #80]	; (b004 <_usb_d_dev_handle_nep+0xa8>)
    afb2:	4798      	blx	r3
    afb4:	e019      	b.n	afea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    afb6:	88bb      	ldrh	r3, [r7, #4]
    afb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    afbc:	2b00      	cmp	r3, #0
    afbe:	d002      	beq.n	afc6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    afc0:	4b11      	ldr	r3, [pc, #68]	; (b008 <_usb_d_dev_handle_nep+0xac>)
    afc2:	4798      	blx	r3
    afc4:	e011      	b.n	afea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    afc6:	88bb      	ldrh	r3, [r7, #4]
    afc8:	f003 0308 	and.w	r3, r3, #8
    afcc:	2b00      	cmp	r3, #0
    afce:	d002      	beq.n	afd6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    afd0:	4b0e      	ldr	r3, [pc, #56]	; (b00c <_usb_d_dev_handle_nep+0xb0>)
    afd2:	4798      	blx	r3
    afd4:	e009      	b.n	afea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    afd6:	88bb      	ldrh	r3, [r7, #4]
    afd8:	f003 0301 	and.w	r3, r3, #1
    afdc:	2b00      	cmp	r3, #0
    afde:	d002      	beq.n	afe6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    afe0:	4b0b      	ldr	r3, [pc, #44]	; (b010 <_usb_d_dev_handle_nep+0xb4>)
    afe2:	4798      	blx	r3
    afe4:	e001      	b.n	afea <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    afe6:	2300      	movs	r3, #0
    afe8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    afea:	79fb      	ldrb	r3, [r7, #7]
}
    afec:	4618      	mov	r0, r3
    afee:	3708      	adds	r7, #8
    aff0:	46bd      	mov	sp, r7
    aff2:	bd80      	pop	{r7, pc}
    aff4:	0000a3f9 	.word	0x0000a3f9
    aff8:	0000a44f 	.word	0x0000a44f
    affc:	0000ad9d 	.word	0x0000ad9d
    b000:	0000adbd 	.word	0x0000adbd
    b004:	0000ae4d 	.word	0x0000ae4d
    b008:	0000ae71 	.word	0x0000ae71
    b00c:	0000aebd 	.word	0x0000aebd
    b010:	0000af19 	.word	0x0000af19

0000b014 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b014:	b590      	push	{r4, r7, lr}
    b016:	b089      	sub	sp, #36	; 0x24
    b018:	af00      	add	r7, sp, #0
    b01a:	6078      	str	r0, [r7, #4]
    b01c:	460b      	mov	r3, r1
    b01e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b020:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b024:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b026:	687b      	ldr	r3, [r7, #4]
    b028:	7c9b      	ldrb	r3, [r3, #18]
    b02a:	f003 030f 	and.w	r3, r3, #15
    b02e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b030:	7dfb      	ldrb	r3, [r7, #23]
    b032:	015b      	lsls	r3, r3, #5
    b034:	4a73      	ldr	r2, [pc, #460]	; (b204 <_usb_d_dev_in_next+0x1f0>)
    b036:	4413      	add	r3, r2
    b038:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b03a:	78fb      	ldrb	r3, [r7, #3]
    b03c:	2b00      	cmp	r3, #0
    b03e:	d006      	beq.n	b04e <_usb_d_dev_in_next+0x3a>
    b040:	693b      	ldr	r3, [r7, #16]
    b042:	3310      	adds	r3, #16
    b044:	685b      	ldr	r3, [r3, #4]
    b046:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b04a:	b29b      	uxth	r3, r3
    b04c:	e000      	b.n	b050 <_usb_d_dev_in_next+0x3c>
    b04e:	2300      	movs	r3, #0
    b050:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b052:	687b      	ldr	r3, [r7, #4]
    b054:	8a1b      	ldrh	r3, [r3, #16]
    b056:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b05a:	4293      	cmp	r3, r2
    b05c:	d103      	bne.n	b066 <_usb_d_dev_in_next+0x52>
    b05e:	687b      	ldr	r3, [r7, #4]
    b060:	8a1b      	ldrh	r3, [r3, #16]
    b062:	b21b      	sxth	r3, r3
    b064:	e004      	b.n	b070 <_usb_d_dev_in_next+0x5c>
    b066:	687b      	ldr	r3, [r7, #4]
    b068:	8a1b      	ldrh	r3, [r3, #16]
    b06a:	3b01      	subs	r3, #1
    b06c:	b29b      	uxth	r3, r3
    b06e:	b21b      	sxth	r3, r3
    b070:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b074:	4013      	ands	r3, r2
    b076:	b21b      	sxth	r3, r3
    b078:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b07a:	2300      	movs	r3, #0
    b07c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b07e:	687b      	ldr	r3, [r7, #4]
    b080:	7cdb      	ldrb	r3, [r3, #19]
    b082:	f003 0307 	and.w	r3, r3, #7
    b086:	b2db      	uxtb	r3, r3
    b088:	2b01      	cmp	r3, #1
    b08a:	bf0c      	ite	eq
    b08c:	2301      	moveq	r3, #1
    b08e:	2300      	movne	r3, #0
    b090:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b092:	78fb      	ldrb	r3, [r7, #3]
    b094:	2b00      	cmp	r3, #0
    b096:	d004      	beq.n	b0a2 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b098:	7dfb      	ldrb	r3, [r7, #23]
    b09a:	2101      	movs	r1, #1
    b09c:	4618      	mov	r0, r3
    b09e:	4b5a      	ldr	r3, [pc, #360]	; (b208 <_usb_d_dev_in_next+0x1f4>)
    b0a0:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b0a2:	687b      	ldr	r3, [r7, #4]
    b0a4:	689a      	ldr	r2, [r3, #8]
    b0a6:	89fb      	ldrh	r3, [r7, #14]
    b0a8:	441a      	add	r2, r3
    b0aa:	687b      	ldr	r3, [r7, #4]
    b0ac:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b0ae:	687b      	ldr	r3, [r7, #4]
    b0b0:	689a      	ldr	r2, [r3, #8]
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	685b      	ldr	r3, [r3, #4]
    b0b6:	429a      	cmp	r2, r3
    b0b8:	d243      	bcs.n	b142 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	685b      	ldr	r3, [r3, #4]
    b0be:	b29a      	uxth	r2, r3
    b0c0:	687b      	ldr	r3, [r7, #4]
    b0c2:	689b      	ldr	r3, [r3, #8]
    b0c4:	b29b      	uxth	r3, r3
    b0c6:	1ad3      	subs	r3, r2, r3
    b0c8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	7cdb      	ldrb	r3, [r3, #19]
    b0ce:	f003 0320 	and.w	r3, r3, #32
    b0d2:	b2db      	uxtb	r3, r3
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d01b      	beq.n	b110 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	8a1b      	ldrh	r3, [r3, #16]
    b0dc:	8bfa      	ldrh	r2, [r7, #30]
    b0de:	429a      	cmp	r2, r3
    b0e0:	d902      	bls.n	b0e8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	8a1b      	ldrh	r3, [r3, #16]
    b0e6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b0e8:	687b      	ldr	r3, [r7, #4]
    b0ea:	68d8      	ldr	r0, [r3, #12]
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	681a      	ldr	r2, [r3, #0]
    b0f0:	687b      	ldr	r3, [r7, #4]
    b0f2:	689b      	ldr	r3, [r3, #8]
    b0f4:	4413      	add	r3, r2
    b0f6:	8bfa      	ldrh	r2, [r7, #30]
    b0f8:	4619      	mov	r1, r3
    b0fa:	4b44      	ldr	r3, [pc, #272]	; (b20c <_usb_d_dev_in_next+0x1f8>)
    b0fc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b0fe:	687b      	ldr	r3, [r7, #4]
    b100:	68db      	ldr	r3, [r3, #12]
    b102:	461a      	mov	r2, r3
    b104:	7dfb      	ldrb	r3, [r7, #23]
    b106:	2101      	movs	r1, #1
    b108:	4618      	mov	r0, r3
    b10a:	4b41      	ldr	r3, [pc, #260]	; (b210 <_usb_d_dev_in_next+0x1fc>)
    b10c:	4798      	blx	r3
    b10e:	e011      	b.n	b134 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b110:	8bfb      	ldrh	r3, [r7, #30]
    b112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b116:	d902      	bls.n	b11e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b11c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b11e:	687b      	ldr	r3, [r7, #4]
    b120:	681a      	ldr	r2, [r3, #0]
    b122:	687b      	ldr	r3, [r7, #4]
    b124:	689b      	ldr	r3, [r3, #8]
    b126:	4413      	add	r3, r2
    b128:	461a      	mov	r2, r3
    b12a:	7dfb      	ldrb	r3, [r7, #23]
    b12c:	2101      	movs	r1, #1
    b12e:	4618      	mov	r0, r3
    b130:	4b37      	ldr	r3, [pc, #220]	; (b210 <_usb_d_dev_in_next+0x1fc>)
    b132:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b134:	8bfa      	ldrh	r2, [r7, #30]
    b136:	7df8      	ldrb	r0, [r7, #23]
    b138:	2300      	movs	r3, #0
    b13a:	2101      	movs	r1, #1
    b13c:	4c35      	ldr	r4, [pc, #212]	; (b214 <_usb_d_dev_in_next+0x200>)
    b13e:	47a0      	blx	r4
		goto _in_tx_exec;
    b140:	e041      	b.n	b1c6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b142:	687b      	ldr	r3, [r7, #4]
    b144:	7cdb      	ldrb	r3, [r3, #19]
    b146:	f003 0310 	and.w	r3, r3, #16
    b14a:	b2db      	uxtb	r3, r3
    b14c:	2b00      	cmp	r3, #0
    b14e:	d00b      	beq.n	b168 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b150:	687a      	ldr	r2, [r7, #4]
    b152:	7cd3      	ldrb	r3, [r2, #19]
    b154:	f36f 1304 	bfc	r3, #4, #1
    b158:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    b15a:	7df8      	ldrb	r0, [r7, #23]
    b15c:	2300      	movs	r3, #0
    b15e:	2200      	movs	r2, #0
    b160:	2101      	movs	r1, #1
    b162:	4c2c      	ldr	r4, [pc, #176]	; (b214 <_usb_d_dev_in_next+0x200>)
    b164:	47a0      	blx	r4
		goto _in_tx_exec;
    b166:	e02e      	b.n	b1c6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    b168:	7afb      	ldrb	r3, [r7, #11]
    b16a:	2b00      	cmp	r3, #0
    b16c:	d006      	beq.n	b17c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    b16e:	7dfb      	ldrb	r3, [r7, #23]
    b170:	224b      	movs	r2, #75	; 0x4b
    b172:	4619      	mov	r1, r3
    b174:	69b8      	ldr	r0, [r7, #24]
    b176:	4b28      	ldr	r3, [pc, #160]	; (b218 <_usb_d_dev_in_next+0x204>)
    b178:	4798      	blx	r3
    b17a:	e005      	b.n	b188 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    b17c:	7dfb      	ldrb	r3, [r7, #23]
    b17e:	224a      	movs	r2, #74	; 0x4a
    b180:	4619      	mov	r1, r3
    b182:	69b8      	ldr	r0, [r7, #24]
    b184:	4b24      	ldr	r3, [pc, #144]	; (b218 <_usb_d_dev_in_next+0x204>)
    b186:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    b188:	687b      	ldr	r3, [r7, #4]
    b18a:	8a1b      	ldrh	r3, [r3, #16]
    b18c:	89ba      	ldrh	r2, [r7, #12]
    b18e:	429a      	cmp	r2, r3
    b190:	d114      	bne.n	b1bc <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b192:	687a      	ldr	r2, [r7, #4]
    b194:	7cd3      	ldrb	r3, [r2, #19]
    b196:	f36f 1386 	bfc	r3, #6, #1
    b19a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b19c:	4b1f      	ldr	r3, [pc, #124]	; (b21c <_usb_d_dev_in_next+0x208>)
    b19e:	68db      	ldr	r3, [r3, #12]
    b1a0:	687a      	ldr	r2, [r7, #4]
    b1a2:	7c90      	ldrb	r0, [r2, #18]
    b1a4:	687a      	ldr	r2, [r7, #4]
    b1a6:	6892      	ldr	r2, [r2, #8]
    b1a8:	4611      	mov	r1, r2
    b1aa:	4798      	blx	r3
    b1ac:	4603      	mov	r3, r0
    b1ae:	2b00      	cmp	r3, #0
    b1b0:	d124      	bne.n	b1fc <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b1b2:	687a      	ldr	r2, [r7, #4]
    b1b4:	7cd3      	ldrb	r3, [r2, #19]
    b1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b1ba:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b1bc:	2100      	movs	r1, #0
    b1be:	6878      	ldr	r0, [r7, #4]
    b1c0:	4b17      	ldr	r3, [pc, #92]	; (b220 <_usb_d_dev_in_next+0x20c>)
    b1c2:	4798      	blx	r3
	return;
    b1c4:	e01b      	b.n	b1fe <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b1c6:	78fb      	ldrb	r3, [r7, #3]
    b1c8:	f083 0301 	eor.w	r3, r3, #1
    b1cc:	b2db      	uxtb	r3, r3
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	d00d      	beq.n	b1ee <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b1d2:	7afb      	ldrb	r3, [r7, #11]
    b1d4:	2b00      	cmp	r3, #0
    b1d6:	d002      	beq.n	b1de <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b1d8:	234e      	movs	r3, #78	; 0x4e
    b1da:	777b      	strb	r3, [r7, #29]
    b1dc:	e001      	b.n	b1e2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b1de:	234a      	movs	r3, #74	; 0x4a
    b1e0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b1e2:	7f7a      	ldrb	r2, [r7, #29]
    b1e4:	7dfb      	ldrb	r3, [r7, #23]
    b1e6:	4619      	mov	r1, r3
    b1e8:	69b8      	ldr	r0, [r7, #24]
    b1ea:	4b0e      	ldr	r3, [pc, #56]	; (b224 <_usb_d_dev_in_next+0x210>)
    b1ec:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b1ee:	7dfb      	ldrb	r3, [r7, #23]
    b1f0:	2201      	movs	r2, #1
    b1f2:	2101      	movs	r1, #1
    b1f4:	4618      	mov	r0, r3
    b1f6:	4b0c      	ldr	r3, [pc, #48]	; (b228 <_usb_d_dev_in_next+0x214>)
    b1f8:	4798      	blx	r3
    b1fa:	e000      	b.n	b1fe <_usb_d_dev_in_next+0x1ea>
			return;
    b1fc:	bf00      	nop
}
    b1fe:	3724      	adds	r7, #36	; 0x24
    b200:	46bd      	mov	sp, r7
    b202:	bd90      	pop	{r4, r7, pc}
    b204:	20002038 	.word	0x20002038
    b208:	0000aa0d 	.word	0x0000aa0d
    b20c:	00010811 	.word	0x00010811
    b210:	0000aa39 	.word	0x0000aa39
    b214:	0000ab81 	.word	0x0000ab81
    b218:	0000a319 	.word	0x0000a319
    b21c:	20001f70 	.word	0x20001f70
    b220:	0000c33d 	.word	0x0000c33d
    b224:	0000a2ed 	.word	0x0000a2ed
    b228:	0000ac39 	.word	0x0000ac39

0000b22c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b22c:	b590      	push	{r4, r7, lr}
    b22e:	b08b      	sub	sp, #44	; 0x2c
    b230:	af00      	add	r7, sp, #0
    b232:	6078      	str	r0, [r7, #4]
    b234:	460b      	mov	r3, r1
    b236:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b238:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b23c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b23e:	687b      	ldr	r3, [r7, #4]
    b240:	7c9b      	ldrb	r3, [r3, #18]
    b242:	f003 030f 	and.w	r3, r3, #15
    b246:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b248:	7ffb      	ldrb	r3, [r7, #31]
    b24a:	015b      	lsls	r3, r3, #5
    b24c:	4a94      	ldr	r2, [pc, #592]	; (b4a0 <_usb_d_dev_out_next+0x274>)
    b24e:	4413      	add	r3, r2
    b250:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b252:	78fb      	ldrb	r3, [r7, #3]
    b254:	2b00      	cmp	r3, #0
    b256:	d005      	beq.n	b264 <_usb_d_dev_out_next+0x38>
    b258:	69bb      	ldr	r3, [r7, #24]
    b25a:	685b      	ldr	r3, [r3, #4]
    b25c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b260:	b29b      	uxth	r3, r3
    b262:	e000      	b.n	b266 <_usb_d_dev_out_next+0x3a>
    b264:	2300      	movs	r3, #0
    b266:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b268:	78fb      	ldrb	r3, [r7, #3]
    b26a:	2b00      	cmp	r3, #0
    b26c:	d005      	beq.n	b27a <_usb_d_dev_out_next+0x4e>
    b26e:	69bb      	ldr	r3, [r7, #24]
    b270:	685b      	ldr	r3, [r3, #4]
    b272:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b276:	b29b      	uxth	r3, r3
    b278:	e000      	b.n	b27c <_usb_d_dev_out_next+0x50>
    b27a:	2300      	movs	r3, #0
    b27c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b27e:	687b      	ldr	r3, [r7, #4]
    b280:	8a1b      	ldrh	r3, [r3, #16]
    b282:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b286:	4293      	cmp	r3, r2
    b288:	d004      	beq.n	b294 <_usb_d_dev_out_next+0x68>
    b28a:	687b      	ldr	r3, [r7, #4]
    b28c:	8a1b      	ldrh	r3, [r3, #16]
    b28e:	3b01      	subs	r3, #1
    b290:	b29b      	uxth	r3, r3
    b292:	e001      	b.n	b298 <_usb_d_dev_out_next+0x6c>
    b294:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b298:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    b29a:	8aba      	ldrh	r2, [r7, #20]
    b29c:	8a7b      	ldrh	r3, [r7, #18]
    b29e:	4013      	ands	r3, r2
    b2a0:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b2a2:	687b      	ldr	r3, [r7, #4]
    b2a4:	7cdb      	ldrb	r3, [r3, #19]
    b2a6:	f003 0307 	and.w	r3, r3, #7
    b2aa:	b2db      	uxtb	r3, r3
    b2ac:	2b01      	cmp	r3, #1
    b2ae:	bf0c      	ite	eq
    b2b0:	2301      	moveq	r3, #1
    b2b2:	2300      	movne	r3, #0
    b2b4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    b2b6:	78fb      	ldrb	r3, [r7, #3]
    b2b8:	2b00      	cmp	r3, #0
    b2ba:	d004      	beq.n	b2c6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    b2bc:	7ffb      	ldrb	r3, [r7, #31]
    b2be:	2100      	movs	r1, #0
    b2c0:	4618      	mov	r0, r3
    b2c2:	4b78      	ldr	r3, [pc, #480]	; (b4a4 <_usb_d_dev_out_next+0x278>)
    b2c4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    b2c6:	687b      	ldr	r3, [r7, #4]
    b2c8:	7cdb      	ldrb	r3, [r3, #19]
    b2ca:	f003 0320 	and.w	r3, r3, #32
    b2ce:	b2db      	uxtb	r3, r3
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d01c      	beq.n	b30e <_usb_d_dev_out_next+0xe2>
    b2d4:	687b      	ldr	r3, [r7, #4]
    b2d6:	685b      	ldr	r3, [r3, #4]
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d018      	beq.n	b30e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b2dc:	687b      	ldr	r3, [r7, #4]
    b2de:	685b      	ldr	r3, [r3, #4]
    b2e0:	b29a      	uxth	r2, r3
    b2e2:	687b      	ldr	r3, [r7, #4]
    b2e4:	689b      	ldr	r3, [r3, #8]
    b2e6:	b29b      	uxth	r3, r3
    b2e8:	1ad3      	subs	r3, r2, r3
    b2ea:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b2ec:	687b      	ldr	r3, [r7, #4]
    b2ee:	681a      	ldr	r2, [r3, #0]
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	689b      	ldr	r3, [r3, #8]
    b2f4:	18d0      	adds	r0, r2, r3
    b2f6:	687b      	ldr	r3, [r7, #4]
    b2f8:	68d9      	ldr	r1, [r3, #12]
    b2fa:	89ba      	ldrh	r2, [r7, #12]
    b2fc:	8a3b      	ldrh	r3, [r7, #16]
    b2fe:	429a      	cmp	r2, r3
    b300:	d901      	bls.n	b306 <_usb_d_dev_out_next+0xda>
    b302:	8a3b      	ldrh	r3, [r7, #16]
    b304:	e000      	b.n	b308 <_usb_d_dev_out_next+0xdc>
    b306:	89bb      	ldrh	r3, [r7, #12]
    b308:	461a      	mov	r2, r3
    b30a:	4b67      	ldr	r3, [pc, #412]	; (b4a8 <_usb_d_dev_out_next+0x27c>)
    b30c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	685b      	ldr	r3, [r3, #4]
    b312:	2b00      	cmp	r3, #0
    b314:	d121      	bne.n	b35a <_usb_d_dev_out_next+0x12e>
    b316:	687b      	ldr	r3, [r7, #4]
    b318:	7cdb      	ldrb	r3, [r3, #19]
    b31a:	f003 0310 	and.w	r3, r3, #16
    b31e:	b2db      	uxtb	r3, r3
    b320:	2b00      	cmp	r3, #0
    b322:	d01a      	beq.n	b35a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    b324:	687a      	ldr	r2, [r7, #4]
    b326:	7cd3      	ldrb	r3, [r2, #19]
    b328:	f36f 1304 	bfc	r3, #4, #1
    b32c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    b32e:	687a      	ldr	r2, [r7, #4]
    b330:	7cd3      	ldrb	r3, [r2, #19]
    b332:	f043 0320 	orr.w	r3, r3, #32
    b336:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b338:	687b      	ldr	r3, [r7, #4]
    b33a:	68db      	ldr	r3, [r3, #12]
    b33c:	461a      	mov	r2, r3
    b33e:	7ffb      	ldrb	r3, [r7, #31]
    b340:	2100      	movs	r1, #0
    b342:	4618      	mov	r0, r3
    b344:	4b59      	ldr	r3, [pc, #356]	; (b4ac <_usb_d_dev_out_next+0x280>)
    b346:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b348:	687b      	ldr	r3, [r7, #4]
    b34a:	8a1b      	ldrh	r3, [r3, #16]
    b34c:	461a      	mov	r2, r3
    b34e:	7ff8      	ldrb	r0, [r7, #31]
    b350:	2300      	movs	r3, #0
    b352:	2100      	movs	r1, #0
    b354:	4c56      	ldr	r4, [pc, #344]	; (b4b0 <_usb_d_dev_out_next+0x284>)
    b356:	47a0      	blx	r4
		goto _out_rx_exec;
    b358:	e090      	b.n	b47c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    b35a:	78fb      	ldrb	r3, [r7, #3]
    b35c:	2b00      	cmp	r3, #0
    b35e:	d010      	beq.n	b382 <_usb_d_dev_out_next+0x156>
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	8a1b      	ldrh	r3, [r3, #16]
    b364:	8a3a      	ldrh	r2, [r7, #16]
    b366:	429a      	cmp	r2, r3
    b368:	d20b      	bcs.n	b382 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    b36a:	687a      	ldr	r2, [r7, #4]
    b36c:	7cd3      	ldrb	r3, [r2, #19]
    b36e:	f36f 1304 	bfc	r3, #4, #1
    b372:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	689a      	ldr	r2, [r3, #8]
    b378:	8abb      	ldrh	r3, [r7, #20]
    b37a:	441a      	add	r2, r3
    b37c:	687b      	ldr	r3, [r7, #4]
    b37e:	609a      	str	r2, [r3, #8]
    b380:	e05c      	b.n	b43c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    b382:	687b      	ldr	r3, [r7, #4]
    b384:	689a      	ldr	r2, [r3, #8]
    b386:	8afb      	ldrh	r3, [r7, #22]
    b388:	441a      	add	r2, r3
    b38a:	687b      	ldr	r3, [r7, #4]
    b38c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	689a      	ldr	r2, [r3, #8]
    b392:	687b      	ldr	r3, [r7, #4]
    b394:	685b      	ldr	r3, [r3, #4]
    b396:	429a      	cmp	r2, r3
    b398:	d250      	bcs.n	b43c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    b39a:	687b      	ldr	r3, [r7, #4]
    b39c:	685b      	ldr	r3, [r3, #4]
    b39e:	b29a      	uxth	r2, r3
    b3a0:	687b      	ldr	r3, [r7, #4]
    b3a2:	689b      	ldr	r3, [r3, #8]
    b3a4:	b29b      	uxth	r3, r3
    b3a6:	1ad3      	subs	r3, r2, r3
    b3a8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    b3aa:	687b      	ldr	r3, [r7, #4]
    b3ac:	7cdb      	ldrb	r3, [r3, #19]
    b3ae:	f003 0320 	and.w	r3, r3, #32
    b3b2:	b2db      	uxtb	r3, r3
    b3b4:	2b00      	cmp	r3, #0
    b3b6:	d010      	beq.n	b3da <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	8a1b      	ldrh	r3, [r3, #16]
    b3bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b3be:	429a      	cmp	r2, r3
    b3c0:	d902      	bls.n	b3c8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    b3c2:	687b      	ldr	r3, [r7, #4]
    b3c4:	8a1b      	ldrh	r3, [r3, #16]
    b3c6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b3c8:	687b      	ldr	r3, [r7, #4]
    b3ca:	68db      	ldr	r3, [r3, #12]
    b3cc:	461a      	mov	r2, r3
    b3ce:	7ffb      	ldrb	r3, [r7, #31]
    b3d0:	2100      	movs	r1, #0
    b3d2:	4618      	mov	r0, r3
    b3d4:	4b35      	ldr	r3, [pc, #212]	; (b4ac <_usb_d_dev_out_next+0x280>)
    b3d6:	4798      	blx	r3
    b3d8:	e029      	b.n	b42e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	8a1b      	ldrh	r3, [r3, #16]
    b3de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b3e0:	429a      	cmp	r2, r3
    b3e2:	d90f      	bls.n	b404 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b3e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b3e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b3ea:	d903      	bls.n	b3f4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    b3ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b3f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    b3f2:	e011      	b.n	b418 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    b3f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b3f6:	8a7b      	ldrh	r3, [r7, #18]
    b3f8:	4013      	ands	r3, r2
    b3fa:	b29b      	uxth	r3, r3
    b3fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b3fe:	1ad3      	subs	r3, r2, r3
    b400:	84fb      	strh	r3, [r7, #38]	; 0x26
    b402:	e009      	b.n	b418 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    b404:	687b      	ldr	r3, [r7, #4]
    b406:	8a1b      	ldrh	r3, [r3, #16]
    b408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b40a:	429a      	cmp	r2, r3
    b40c:	d204      	bcs.n	b418 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    b40e:	687a      	ldr	r2, [r7, #4]
    b410:	7cd3      	ldrb	r3, [r2, #19]
    b412:	f043 0320 	orr.w	r3, r3, #32
    b416:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b418:	687b      	ldr	r3, [r7, #4]
    b41a:	681a      	ldr	r2, [r3, #0]
    b41c:	687b      	ldr	r3, [r7, #4]
    b41e:	689b      	ldr	r3, [r3, #8]
    b420:	4413      	add	r3, r2
    b422:	461a      	mov	r2, r3
    b424:	7ffb      	ldrb	r3, [r7, #31]
    b426:	2100      	movs	r1, #0
    b428:	4618      	mov	r0, r3
    b42a:	4b20      	ldr	r3, [pc, #128]	; (b4ac <_usb_d_dev_out_next+0x280>)
    b42c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    b42e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b430:	7ff8      	ldrb	r0, [r7, #31]
    b432:	2300      	movs	r3, #0
    b434:	2100      	movs	r1, #0
    b436:	4c1e      	ldr	r4, [pc, #120]	; (b4b0 <_usb_d_dev_out_next+0x284>)
    b438:	47a0      	blx	r4
			goto _out_rx_exec;
    b43a:	e01f      	b.n	b47c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    b43c:	7bfb      	ldrb	r3, [r7, #15]
    b43e:	2b00      	cmp	r3, #0
    b440:	d006      	beq.n	b450 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    b442:	7ffb      	ldrb	r3, [r7, #31]
    b444:	222d      	movs	r2, #45	; 0x2d
    b446:	4619      	mov	r1, r3
    b448:	6a38      	ldr	r0, [r7, #32]
    b44a:	4b1a      	ldr	r3, [pc, #104]	; (b4b4 <_usb_d_dev_out_next+0x288>)
    b44c:	4798      	blx	r3
    b44e:	e005      	b.n	b45c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    b450:	7ffb      	ldrb	r3, [r7, #31]
    b452:	2225      	movs	r2, #37	; 0x25
    b454:	4619      	mov	r1, r3
    b456:	6a38      	ldr	r0, [r7, #32]
    b458:	4b16      	ldr	r3, [pc, #88]	; (b4b4 <_usb_d_dev_out_next+0x288>)
    b45a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    b45c:	7ffb      	ldrb	r3, [r7, #31]
    b45e:	2b00      	cmp	r3, #0
    b460:	d107      	bne.n	b472 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b462:	687b      	ldr	r3, [r7, #4]
    b464:	68db      	ldr	r3, [r3, #12]
    b466:	461a      	mov	r2, r3
    b468:	7ffb      	ldrb	r3, [r7, #31]
    b46a:	2100      	movs	r1, #0
    b46c:	4618      	mov	r0, r3
    b46e:	4b0f      	ldr	r3, [pc, #60]	; (b4ac <_usb_d_dev_out_next+0x280>)
    b470:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b472:	2100      	movs	r1, #0
    b474:	6878      	ldr	r0, [r7, #4]
    b476:	4b10      	ldr	r3, [pc, #64]	; (b4b8 <_usb_d_dev_out_next+0x28c>)
    b478:	4798      	blx	r3
	return;
    b47a:	e031      	b.n	b4e0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    b47c:	78fb      	ldrb	r3, [r7, #3]
    b47e:	f083 0301 	eor.w	r3, r3, #1
    b482:	b2db      	uxtb	r3, r3
    b484:	2b00      	cmp	r3, #0
    b486:	d025      	beq.n	b4d4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    b488:	7bfb      	ldrb	r3, [r7, #15]
    b48a:	2b00      	cmp	r3, #0
    b48c:	d018      	beq.n	b4c0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    b48e:	7ffb      	ldrb	r3, [r7, #31]
    b490:	2101      	movs	r1, #1
    b492:	4618      	mov	r0, r3
    b494:	4b09      	ldr	r3, [pc, #36]	; (b4bc <_usb_d_dev_out_next+0x290>)
    b496:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b498:	232d      	movs	r3, #45	; 0x2d
    b49a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    b49e:	e012      	b.n	b4c6 <_usb_d_dev_out_next+0x29a>
    b4a0:	20002038 	.word	0x20002038
    b4a4:	0000aa0d 	.word	0x0000aa0d
    b4a8:	00010811 	.word	0x00010811
    b4ac:	0000aa39 	.word	0x0000aa39
    b4b0:	0000abc1 	.word	0x0000abc1
    b4b4:	0000a319 	.word	0x0000a319
    b4b8:	0000c33d 	.word	0x0000c33d
    b4bc:	0000ac01 	.word	0x0000ac01
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    b4c0:	2325      	movs	r3, #37	; 0x25
    b4c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b4c6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    b4ca:	7ffb      	ldrb	r3, [r7, #31]
    b4cc:	4619      	mov	r1, r3
    b4ce:	6a38      	ldr	r0, [r7, #32]
    b4d0:	4b05      	ldr	r3, [pc, #20]	; (b4e8 <_usb_d_dev_out_next+0x2bc>)
    b4d2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    b4d4:	7ffb      	ldrb	r3, [r7, #31]
    b4d6:	2201      	movs	r2, #1
    b4d8:	2100      	movs	r1, #0
    b4da:	4618      	mov	r0, r3
    b4dc:	4b03      	ldr	r3, [pc, #12]	; (b4ec <_usb_d_dev_out_next+0x2c0>)
    b4de:	4798      	blx	r3
}
    b4e0:	372c      	adds	r7, #44	; 0x2c
    b4e2:	46bd      	mov	sp, r7
    b4e4:	bd90      	pop	{r4, r7, pc}
    b4e6:	bf00      	nop
    b4e8:	0000a2ed 	.word	0x0000a2ed
    b4ec:	0000ac91 	.word	0x0000ac91

0000b4f0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b4f0:	b580      	push	{r7, lr}
    b4f2:	b084      	sub	sp, #16
    b4f4:	af00      	add	r7, sp, #0
    b4f6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b4f8:	687b      	ldr	r3, [r7, #4]
    b4fa:	7c9b      	ldrb	r3, [r3, #18]
    b4fc:	f003 030f 	and.w	r3, r3, #15
    b500:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b502:	687b      	ldr	r3, [r7, #4]
    b504:	7cdb      	ldrb	r3, [r3, #19]
    b506:	f003 0307 	and.w	r3, r3, #7
    b50a:	b2db      	uxtb	r3, r3
    b50c:	2b01      	cmp	r3, #1
    b50e:	bf0c      	ite	eq
    b510:	2301      	moveq	r3, #1
    b512:	2300      	movne	r3, #0
    b514:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    b516:	7bbb      	ldrb	r3, [r7, #14]
    b518:	f083 0301 	eor.w	r3, r3, #1
    b51c:	b2db      	uxtb	r3, r3
    b51e:	2b00      	cmp	r3, #0
    b520:	d008      	beq.n	b534 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    b522:	7bfb      	ldrb	r3, [r7, #15]
    b524:	4618      	mov	r0, r3
    b526:	4b20      	ldr	r3, [pc, #128]	; (b5a8 <_usb_d_dev_handle_setup+0xb8>)
    b528:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    b52a:	7bfb      	ldrb	r3, [r7, #15]
    b52c:	4618      	mov	r0, r3
    b52e:	4b1f      	ldr	r3, [pc, #124]	; (b5ac <_usb_d_dev_handle_setup+0xbc>)
    b530:	4798      	blx	r3
		return;
    b532:	e036      	b.n	b5a2 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    b534:	687b      	ldr	r3, [r7, #4]
    b536:	7cdb      	ldrb	r3, [r3, #19]
    b538:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b53c:	b2db      	uxtb	r3, r3
    b53e:	2b00      	cmp	r3, #0
    b540:	d010      	beq.n	b564 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    b542:	687a      	ldr	r2, [r7, #4]
    b544:	7cd3      	ldrb	r3, [r2, #19]
    b546:	f36f 1386 	bfc	r3, #6, #1
    b54a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b54c:	7bfb      	ldrb	r3, [r7, #15]
    b54e:	2200      	movs	r2, #0
    b550:	2101      	movs	r1, #1
    b552:	4618      	mov	r0, r3
    b554:	4b16      	ldr	r3, [pc, #88]	; (b5b0 <_usb_d_dev_handle_setup+0xc0>)
    b556:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    b558:	7bfb      	ldrb	r3, [r7, #15]
    b55a:	2200      	movs	r2, #0
    b55c:	2100      	movs	r1, #0
    b55e:	4618      	mov	r0, r3
    b560:	4b14      	ldr	r3, [pc, #80]	; (b5b4 <_usb_d_dev_handle_setup+0xc4>)
    b562:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    b564:	687a      	ldr	r2, [r7, #4]
    b566:	7cd3      	ldrb	r3, [r2, #19]
    b568:	f36f 03c3 	bfc	r3, #3, #1
    b56c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    b56e:	7bfb      	ldrb	r3, [r7, #15]
    b570:	2100      	movs	r1, #0
    b572:	4618      	mov	r0, r3
    b574:	4b10      	ldr	r3, [pc, #64]	; (b5b8 <_usb_d_dev_handle_setup+0xc8>)
    b576:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    b578:	7bfb      	ldrb	r3, [r7, #15]
    b57a:	2101      	movs	r1, #1
    b57c:	4618      	mov	r0, r3
    b57e:	4b0e      	ldr	r3, [pc, #56]	; (b5b8 <_usb_d_dev_handle_setup+0xc8>)
    b580:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b582:	7bfb      	ldrb	r3, [r7, #15]
    b584:	216f      	movs	r1, #111	; 0x6f
    b586:	4618      	mov	r0, r3
    b588:	4b0c      	ldr	r3, [pc, #48]	; (b5bc <_usb_d_dev_handle_setup+0xcc>)
    b58a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b58c:	7bfb      	ldrb	r3, [r7, #15]
    b58e:	216f      	movs	r1, #111	; 0x6f
    b590:	4618      	mov	r0, r3
    b592:	4b0b      	ldr	r3, [pc, #44]	; (b5c0 <_usb_d_dev_handle_setup+0xd0>)
    b594:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    b596:	4b0b      	ldr	r3, [pc, #44]	; (b5c4 <_usb_d_dev_handle_setup+0xd4>)
    b598:	689b      	ldr	r3, [r3, #8]
    b59a:	687a      	ldr	r2, [r7, #4]
    b59c:	7c92      	ldrb	r2, [r2, #18]
    b59e:	4610      	mov	r0, r2
    b5a0:	4798      	blx	r3
}
    b5a2:	3710      	adds	r7, #16
    b5a4:	46bd      	mov	sp, r7
    b5a6:	bd80      	pop	{r7, pc}
    b5a8:	0000a995 	.word	0x0000a995
    b5ac:	0000a941 	.word	0x0000a941
    b5b0:	0000ac39 	.word	0x0000ac39
    b5b4:	0000ac91 	.word	0x0000ac91
    b5b8:	0000ac01 	.word	0x0000ac01
    b5bc:	0000a741 	.word	0x0000a741
    b5c0:	0000a791 	.word	0x0000a791
    b5c4:	20001f70 	.word	0x20001f70

0000b5c8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b5c8:	b580      	push	{r7, lr}
    b5ca:	b084      	sub	sp, #16
    b5cc:	af00      	add	r7, sp, #0
    b5ce:	6078      	str	r0, [r7, #4]
    b5d0:	460b      	mov	r3, r1
    b5d2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b5d4:	687b      	ldr	r3, [r7, #4]
    b5d6:	7c9b      	ldrb	r3, [r3, #18]
    b5d8:	f003 030f 	and.w	r3, r3, #15
    b5dc:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    b5de:	78f9      	ldrb	r1, [r7, #3]
    b5e0:	7bfb      	ldrb	r3, [r7, #15]
    b5e2:	2200      	movs	r2, #0
    b5e4:	4618      	mov	r0, r3
    b5e6:	4b07      	ldr	r3, [pc, #28]	; (b604 <_usb_d_dev_handle_stall+0x3c>)
    b5e8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    b5ea:	4b07      	ldr	r3, [pc, #28]	; (b608 <_usb_d_dev_handle_stall+0x40>)
    b5ec:	691b      	ldr	r3, [r3, #16]
    b5ee:	687a      	ldr	r2, [r7, #4]
    b5f0:	7c90      	ldrb	r0, [r2, #18]
    b5f2:	687a      	ldr	r2, [r7, #4]
    b5f4:	6892      	ldr	r2, [r2, #8]
    b5f6:	2101      	movs	r1, #1
    b5f8:	4798      	blx	r3
}
    b5fa:	bf00      	nop
    b5fc:	3710      	adds	r7, #16
    b5fe:	46bd      	mov	sp, r7
    b600:	bd80      	pop	{r7, pc}
    b602:	bf00      	nop
    b604:	0000a8f5 	.word	0x0000a8f5
    b608:	20001f70 	.word	0x20001f70

0000b60c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b60c:	b580      	push	{r7, lr}
    b60e:	b088      	sub	sp, #32
    b610:	af00      	add	r7, sp, #0
    b612:	6078      	str	r0, [r7, #4]
    b614:	460b      	mov	r3, r1
    b616:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    b618:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b61c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    b61e:	687b      	ldr	r3, [r7, #4]
    b620:	7c9b      	ldrb	r3, [r3, #18]
    b622:	f003 030f 	and.w	r3, r3, #15
    b626:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    b628:	4b61      	ldr	r3, [pc, #388]	; (b7b0 <_usb_d_dev_handle_trfail+0x1a4>)
    b62a:	881b      	ldrh	r3, [r3, #0]
    b62c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    b62e:	7efb      	ldrb	r3, [r7, #27]
    b630:	015b      	lsls	r3, r3, #5
    b632:	4a60      	ldr	r2, [pc, #384]	; (b7b4 <_usb_d_dev_handle_trfail+0x1a8>)
    b634:	4413      	add	r3, r2
    b636:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    b638:	78fb      	ldrb	r3, [r7, #3]
    b63a:	2b00      	cmp	r3, #0
    b63c:	d006      	beq.n	b64c <_usb_d_dev_handle_trfail+0x40>
    b63e:	7efb      	ldrb	r3, [r7, #27]
    b640:	4619      	mov	r1, r3
    b642:	69f8      	ldr	r0, [r7, #28]
    b644:	4b5c      	ldr	r3, [pc, #368]	; (b7b8 <_usb_d_dev_handle_trfail+0x1ac>)
    b646:	4798      	blx	r3
    b648:	4603      	mov	r3, r0
    b64a:	e005      	b.n	b658 <_usb_d_dev_handle_trfail+0x4c>
    b64c:	7efb      	ldrb	r3, [r7, #27]
    b64e:	4619      	mov	r1, r3
    b650:	69f8      	ldr	r0, [r7, #28]
    b652:	4b5a      	ldr	r3, [pc, #360]	; (b7bc <_usb_d_dev_handle_trfail+0x1b0>)
    b654:	4798      	blx	r3
    b656:	4603      	mov	r3, r0
    b658:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b65a:	687b      	ldr	r3, [r7, #4]
    b65c:	7cdb      	ldrb	r3, [r3, #19]
    b65e:	f003 0307 	and.w	r3, r3, #7
    b662:	b2db      	uxtb	r3, r3
    b664:	2b01      	cmp	r3, #1
    b666:	bf0c      	ite	eq
    b668:	2301      	moveq	r3, #1
    b66a:	2300      	movne	r3, #0
    b66c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b66e:	78fb      	ldrb	r3, [r7, #3]
    b670:	011b      	lsls	r3, r3, #4
    b672:	697a      	ldr	r2, [r7, #20]
    b674:	4413      	add	r3, r2
    b676:	7a9b      	ldrb	r3, [r3, #10]
    b678:	b2db      	uxtb	r3, r3
    b67a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b67c:	7cfb      	ldrb	r3, [r7, #19]
    b67e:	2b02      	cmp	r3, #2
    b680:	d12f      	bne.n	b6e2 <_usb_d_dev_handle_trfail+0xd6>
    b682:	7b3b      	ldrb	r3, [r7, #12]
    b684:	f003 0301 	and.w	r3, r3, #1
    b688:	b2db      	uxtb	r3, r3
    b68a:	2b00      	cmp	r3, #0
    b68c:	d029      	beq.n	b6e2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b68e:	78fb      	ldrb	r3, [r7, #3]
    b690:	011b      	lsls	r3, r3, #4
    b692:	697a      	ldr	r2, [r7, #20]
    b694:	441a      	add	r2, r3
    b696:	7a93      	ldrb	r3, [r2, #10]
    b698:	f36f 0300 	bfc	r3, #0, #1
    b69c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b69e:	78fb      	ldrb	r3, [r7, #3]
    b6a0:	f107 0220 	add.w	r2, r7, #32
    b6a4:	4413      	add	r3, r2
    b6a6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b6aa:	7efb      	ldrb	r3, [r7, #27]
    b6ac:	4619      	mov	r1, r3
    b6ae:	69f8      	ldr	r0, [r7, #28]
    b6b0:	4b43      	ldr	r3, [pc, #268]	; (b7c0 <_usb_d_dev_handle_trfail+0x1b4>)
    b6b2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b6b4:	78fb      	ldrb	r3, [r7, #3]
    b6b6:	f107 0220 	add.w	r2, r7, #32
    b6ba:	4413      	add	r3, r2
    b6bc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b6c0:	7efb      	ldrb	r3, [r7, #27]
    b6c2:	4619      	mov	r1, r3
    b6c4:	69f8      	ldr	r0, [r7, #28]
    b6c6:	4b3f      	ldr	r3, [pc, #252]	; (b7c4 <_usb_d_dev_handle_trfail+0x1b8>)
    b6c8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b6ca:	78fb      	ldrb	r3, [r7, #3]
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	bf14      	ite	ne
    b6d0:	2301      	movne	r3, #1
    b6d2:	2300      	moveq	r3, #0
    b6d4:	b2db      	uxtb	r3, r3
    b6d6:	2204      	movs	r2, #4
    b6d8:	4619      	mov	r1, r3
    b6da:	6878      	ldr	r0, [r7, #4]
    b6dc:	4b3a      	ldr	r3, [pc, #232]	; (b7c8 <_usb_d_dev_handle_trfail+0x1bc>)
    b6de:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b6e0:	e062      	b.n	b7a8 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b6e2:	7b3b      	ldrb	r3, [r7, #12]
    b6e4:	f003 0302 	and.w	r3, r3, #2
    b6e8:	b2db      	uxtb	r3, r3
    b6ea:	2b00      	cmp	r3, #0
    b6ec:	d040      	beq.n	b770 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b6ee:	78fb      	ldrb	r3, [r7, #3]
    b6f0:	011b      	lsls	r3, r3, #4
    b6f2:	697a      	ldr	r2, [r7, #20]
    b6f4:	441a      	add	r2, r3
    b6f6:	7a93      	ldrb	r3, [r2, #10]
    b6f8:	f36f 0341 	bfc	r3, #1, #1
    b6fc:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b6fe:	78fb      	ldrb	r3, [r7, #3]
    b700:	f107 0220 	add.w	r2, r7, #32
    b704:	4413      	add	r3, r2
    b706:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b70a:	7efb      	ldrb	r3, [r7, #27]
    b70c:	4619      	mov	r1, r3
    b70e:	69f8      	ldr	r0, [r7, #28]
    b710:	4b2b      	ldr	r3, [pc, #172]	; (b7c0 <_usb_d_dev_handle_trfail+0x1b4>)
    b712:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b714:	78fb      	ldrb	r3, [r7, #3]
    b716:	f107 0220 	add.w	r2, r7, #32
    b71a:	4413      	add	r3, r2
    b71c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b720:	7efb      	ldrb	r3, [r7, #27]
    b722:	4619      	mov	r1, r3
    b724:	69f8      	ldr	r0, [r7, #28]
    b726:	4b27      	ldr	r3, [pc, #156]	; (b7c4 <_usb_d_dev_handle_trfail+0x1b8>)
    b728:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b72a:	7cbb      	ldrb	r3, [r7, #18]
    b72c:	2b00      	cmp	r3, #0
    b72e:	d03b      	beq.n	b7a8 <_usb_d_dev_handle_trfail+0x19c>
    b730:	687b      	ldr	r3, [r7, #4]
    b732:	7cdb      	ldrb	r3, [r3, #19]
    b734:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b738:	b2db      	uxtb	r3, r3
    b73a:	2b00      	cmp	r3, #0
    b73c:	d034      	beq.n	b7a8 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    b73e:	687b      	ldr	r3, [r7, #4]
    b740:	7cdb      	ldrb	r3, [r3, #19]
    b742:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b746:	b2db      	uxtb	r3, r3
    b748:	461a      	mov	r2, r3
    b74a:	78fb      	ldrb	r3, [r7, #3]
    b74c:	4293      	cmp	r3, r2
    b74e:	d02b      	beq.n	b7a8 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    b750:	687b      	ldr	r3, [r7, #4]
    b752:	7cdb      	ldrb	r3, [r3, #19]
    b754:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b758:	b2db      	uxtb	r3, r3
    b75a:	2b00      	cmp	r3, #0
    b75c:	bf14      	ite	ne
    b75e:	2301      	movne	r3, #1
    b760:	2300      	moveq	r3, #0
    b762:	b2db      	uxtb	r3, r3
    b764:	2200      	movs	r2, #0
    b766:	4619      	mov	r1, r3
    b768:	6878      	ldr	r0, [r7, #4]
    b76a:	4b17      	ldr	r3, [pc, #92]	; (b7c8 <_usb_d_dev_handle_trfail+0x1bc>)
    b76c:	4798      	blx	r3
}
    b76e:	e01b      	b.n	b7a8 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    b770:	78fa      	ldrb	r2, [r7, #3]
    b772:	7efb      	ldrb	r3, [r7, #27]
    b774:	4611      	mov	r1, r2
    b776:	4618      	mov	r0, r3
    b778:	4b14      	ldr	r3, [pc, #80]	; (b7cc <_usb_d_dev_handle_trfail+0x1c0>)
    b77a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b77c:	78fb      	ldrb	r3, [r7, #3]
    b77e:	f107 0220 	add.w	r2, r7, #32
    b782:	4413      	add	r3, r2
    b784:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b788:	7efb      	ldrb	r3, [r7, #27]
    b78a:	4619      	mov	r1, r3
    b78c:	69f8      	ldr	r0, [r7, #28]
    b78e:	4b0c      	ldr	r3, [pc, #48]	; (b7c0 <_usb_d_dev_handle_trfail+0x1b4>)
    b790:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b792:	78fb      	ldrb	r3, [r7, #3]
    b794:	f107 0220 	add.w	r2, r7, #32
    b798:	4413      	add	r3, r2
    b79a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b79e:	7efb      	ldrb	r3, [r7, #27]
    b7a0:	4619      	mov	r1, r3
    b7a2:	69f8      	ldr	r0, [r7, #28]
    b7a4:	4b07      	ldr	r3, [pc, #28]	; (b7c4 <_usb_d_dev_handle_trfail+0x1b8>)
    b7a6:	4798      	blx	r3
}
    b7a8:	bf00      	nop
    b7aa:	3720      	adds	r7, #32
    b7ac:	46bd      	mov	sp, r7
    b7ae:	bd80      	pop	{r7, pc}
    b7b0:	00011cd4 	.word	0x00011cd4
    b7b4:	20002038 	.word	0x20002038
    b7b8:	0000a375 	.word	0x0000a375
    b7bc:	0000a345 	.word	0x0000a345
    b7c0:	0000a219 	.word	0x0000a219
    b7c4:	0000a319 	.word	0x0000a319
    b7c8:	0000c385 	.word	0x0000c385
    b7cc:	0000ac01 	.word	0x0000ac01

0000b7d0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b7d0:	b580      	push	{r7, lr}
    b7d2:	b082      	sub	sp, #8
    b7d4:	af00      	add	r7, sp, #0
    b7d6:	6078      	str	r0, [r7, #4]
    b7d8:	460b      	mov	r3, r1
    b7da:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b7dc:	78fb      	ldrb	r3, [r7, #3]
    b7de:	f003 0310 	and.w	r3, r3, #16
    b7e2:	2b00      	cmp	r3, #0
    b7e4:	d003      	beq.n	b7ee <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    b7e6:	6878      	ldr	r0, [r7, #4]
    b7e8:	4b0c      	ldr	r3, [pc, #48]	; (b81c <_usb_d_dev_trans_setup_isr+0x4c>)
    b7ea:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    b7ec:	e012      	b.n	b814 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b7ee:	78fb      	ldrb	r3, [r7, #3]
    b7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b7f4:	2b00      	cmp	r3, #0
    b7f6:	d004      	beq.n	b802 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    b7f8:	2101      	movs	r1, #1
    b7fa:	6878      	ldr	r0, [r7, #4]
    b7fc:	4b08      	ldr	r3, [pc, #32]	; (b820 <_usb_d_dev_trans_setup_isr+0x50>)
    b7fe:	4798      	blx	r3
}
    b800:	e008      	b.n	b814 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b802:	78fb      	ldrb	r3, [r7, #3]
    b804:	f003 0320 	and.w	r3, r3, #32
    b808:	2b00      	cmp	r3, #0
    b80a:	d003      	beq.n	b814 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    b80c:	2100      	movs	r1, #0
    b80e:	6878      	ldr	r0, [r7, #4]
    b810:	4b03      	ldr	r3, [pc, #12]	; (b820 <_usb_d_dev_trans_setup_isr+0x50>)
    b812:	4798      	blx	r3
}
    b814:	bf00      	nop
    b816:	3708      	adds	r7, #8
    b818:	46bd      	mov	sp, r7
    b81a:	bd80      	pop	{r7, pc}
    b81c:	0000b4f1 	.word	0x0000b4f1
    b820:	0000b5c9 	.word	0x0000b5c9

0000b824 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b824:	b580      	push	{r7, lr}
    b826:	b082      	sub	sp, #8
    b828:	af00      	add	r7, sp, #0
    b82a:	6078      	str	r0, [r7, #4]
    b82c:	460b      	mov	r3, r1
    b82e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b830:	78fb      	ldrb	r3, [r7, #3]
    b832:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b836:	2b00      	cmp	r3, #0
    b838:	d004      	beq.n	b844 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    b83a:	2101      	movs	r1, #1
    b83c:	6878      	ldr	r0, [r7, #4]
    b83e:	4b1a      	ldr	r3, [pc, #104]	; (b8a8 <_usb_d_dev_trans_in_isr+0x84>)
    b840:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b842:	e02c      	b.n	b89e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b844:	78fb      	ldrb	r3, [r7, #3]
    b846:	f003 0308 	and.w	r3, r3, #8
    b84a:	2b00      	cmp	r3, #0
    b84c:	d004      	beq.n	b858 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    b84e:	2101      	movs	r1, #1
    b850:	6878      	ldr	r0, [r7, #4]
    b852:	4b16      	ldr	r3, [pc, #88]	; (b8ac <_usb_d_dev_trans_in_isr+0x88>)
    b854:	4798      	blx	r3
}
    b856:	e022      	b.n	b89e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    b858:	78fb      	ldrb	r3, [r7, #3]
    b85a:	f003 0302 	and.w	r3, r3, #2
    b85e:	2b00      	cmp	r3, #0
    b860:	d004      	beq.n	b86c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    b862:	2101      	movs	r1, #1
    b864:	6878      	ldr	r0, [r7, #4]
    b866:	4b12      	ldr	r3, [pc, #72]	; (b8b0 <_usb_d_dev_trans_in_isr+0x8c>)
    b868:	4798      	blx	r3
}
    b86a:	e018      	b.n	b89e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b86c:	687b      	ldr	r3, [r7, #4]
    b86e:	7cdb      	ldrb	r3, [r3, #19]
    b870:	f003 0307 	and.w	r3, r3, #7
    b874:	b2db      	uxtb	r3, r3
    b876:	2b01      	cmp	r3, #1
    b878:	d111      	bne.n	b89e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b87a:	78fb      	ldrb	r3, [r7, #3]
    b87c:	f003 0304 	and.w	r3, r3, #4
    b880:	2b00      	cmp	r3, #0
    b882:	d004      	beq.n	b88e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    b884:	2100      	movs	r1, #0
    b886:	6878      	ldr	r0, [r7, #4]
    b888:	4b08      	ldr	r3, [pc, #32]	; (b8ac <_usb_d_dev_trans_in_isr+0x88>)
    b88a:	4798      	blx	r3
}
    b88c:	e007      	b.n	b89e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b88e:	78fb      	ldrb	r3, [r7, #3]
    b890:	f003 0310 	and.w	r3, r3, #16
    b894:	2b00      	cmp	r3, #0
    b896:	d002      	beq.n	b89e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b898:	6878      	ldr	r0, [r7, #4]
    b89a:	4b06      	ldr	r3, [pc, #24]	; (b8b4 <_usb_d_dev_trans_in_isr+0x90>)
    b89c:	4798      	blx	r3
}
    b89e:	bf00      	nop
    b8a0:	3708      	adds	r7, #8
    b8a2:	46bd      	mov	sp, r7
    b8a4:	bd80      	pop	{r7, pc}
    b8a6:	bf00      	nop
    b8a8:	0000b5c9 	.word	0x0000b5c9
    b8ac:	0000b60d 	.word	0x0000b60d
    b8b0:	0000b015 	.word	0x0000b015
    b8b4:	0000b4f1 	.word	0x0000b4f1

0000b8b8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b8b8:	b580      	push	{r7, lr}
    b8ba:	b082      	sub	sp, #8
    b8bc:	af00      	add	r7, sp, #0
    b8be:	6078      	str	r0, [r7, #4]
    b8c0:	460b      	mov	r3, r1
    b8c2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    b8c4:	78fb      	ldrb	r3, [r7, #3]
    b8c6:	f003 0320 	and.w	r3, r3, #32
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d004      	beq.n	b8d8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    b8ce:	2100      	movs	r1, #0
    b8d0:	6878      	ldr	r0, [r7, #4]
    b8d2:	4b1a      	ldr	r3, [pc, #104]	; (b93c <_usb_d_dev_trans_out_isr+0x84>)
    b8d4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    b8d6:	e02c      	b.n	b932 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    b8d8:	78fb      	ldrb	r3, [r7, #3]
    b8da:	f003 0304 	and.w	r3, r3, #4
    b8de:	2b00      	cmp	r3, #0
    b8e0:	d004      	beq.n	b8ec <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    b8e2:	2100      	movs	r1, #0
    b8e4:	6878      	ldr	r0, [r7, #4]
    b8e6:	4b16      	ldr	r3, [pc, #88]	; (b940 <_usb_d_dev_trans_out_isr+0x88>)
    b8e8:	4798      	blx	r3
}
    b8ea:	e022      	b.n	b932 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    b8ec:	78fb      	ldrb	r3, [r7, #3]
    b8ee:	f003 0301 	and.w	r3, r3, #1
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	d004      	beq.n	b900 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    b8f6:	2101      	movs	r1, #1
    b8f8:	6878      	ldr	r0, [r7, #4]
    b8fa:	4b12      	ldr	r3, [pc, #72]	; (b944 <_usb_d_dev_trans_out_isr+0x8c>)
    b8fc:	4798      	blx	r3
}
    b8fe:	e018      	b.n	b932 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    b900:	687b      	ldr	r3, [r7, #4]
    b902:	7cdb      	ldrb	r3, [r3, #19]
    b904:	f003 0307 	and.w	r3, r3, #7
    b908:	b2db      	uxtb	r3, r3
    b90a:	2b01      	cmp	r3, #1
    b90c:	d111      	bne.n	b932 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    b90e:	78fb      	ldrb	r3, [r7, #3]
    b910:	f003 0308 	and.w	r3, r3, #8
    b914:	2b00      	cmp	r3, #0
    b916:	d004      	beq.n	b922 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    b918:	2101      	movs	r1, #1
    b91a:	6878      	ldr	r0, [r7, #4]
    b91c:	4b08      	ldr	r3, [pc, #32]	; (b940 <_usb_d_dev_trans_out_isr+0x88>)
    b91e:	4798      	blx	r3
}
    b920:	e007      	b.n	b932 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b922:	78fb      	ldrb	r3, [r7, #3]
    b924:	f003 0310 	and.w	r3, r3, #16
    b928:	2b00      	cmp	r3, #0
    b92a:	d002      	beq.n	b932 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    b92c:	6878      	ldr	r0, [r7, #4]
    b92e:	4b06      	ldr	r3, [pc, #24]	; (b948 <_usb_d_dev_trans_out_isr+0x90>)
    b930:	4798      	blx	r3
}
    b932:	bf00      	nop
    b934:	3708      	adds	r7, #8
    b936:	46bd      	mov	sp, r7
    b938:	bd80      	pop	{r7, pc}
    b93a:	bf00      	nop
    b93c:	0000b5c9 	.word	0x0000b5c9
    b940:	0000b60d 	.word	0x0000b60d
    b944:	0000b22d 	.word	0x0000b22d
    b948:	0000b4f1 	.word	0x0000b4f1

0000b94c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    b94c:	b580      	push	{r7, lr}
    b94e:	b084      	sub	sp, #16
    b950:	af00      	add	r7, sp, #0
    b952:	6078      	str	r0, [r7, #4]
    b954:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    b956:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b95a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b95c:	683b      	ldr	r3, [r7, #0]
    b95e:	7c9b      	ldrb	r3, [r3, #18]
    b960:	f003 030f 	and.w	r3, r3, #15
    b964:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    b966:	7afb      	ldrb	r3, [r7, #11]
    b968:	2201      	movs	r2, #1
    b96a:	409a      	lsls	r2, r3
    b96c:	687b      	ldr	r3, [r7, #4]
    b96e:	4013      	ands	r3, r2
    b970:	2b00      	cmp	r3, #0
    b972:	d03d      	beq.n	b9f0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    b974:	7afb      	ldrb	r3, [r7, #11]
    b976:	68fa      	ldr	r2, [r7, #12]
    b978:	3308      	adds	r3, #8
    b97a:	015b      	lsls	r3, r3, #5
    b97c:	4413      	add	r3, r2
    b97e:	3307      	adds	r3, #7
    b980:	781b      	ldrb	r3, [r3, #0]
    b982:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    b984:	7afb      	ldrb	r3, [r7, #11]
    b986:	68fa      	ldr	r2, [r7, #12]
    b988:	015b      	lsls	r3, r3, #5
    b98a:	4413      	add	r3, r2
    b98c:	f203 1309 	addw	r3, r3, #265	; 0x109
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    b994:	7aba      	ldrb	r2, [r7, #10]
    b996:	7a7b      	ldrb	r3, [r7, #9]
    b998:	4013      	ands	r3, r2
    b99a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    b99c:	7abb      	ldrb	r3, [r7, #10]
    b99e:	2b00      	cmp	r3, #0
    b9a0:	d027      	beq.n	b9f2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    b9a2:	683b      	ldr	r3, [r7, #0]
    b9a4:	7cdb      	ldrb	r3, [r3, #19]
    b9a6:	f003 0307 	and.w	r3, r3, #7
    b9aa:	b2db      	uxtb	r3, r3
    b9ac:	2b01      	cmp	r3, #1
    b9ae:	d10c      	bne.n	b9ca <_usb_d_dev_handle_eps+0x7e>
    b9b0:	683b      	ldr	r3, [r7, #0]
    b9b2:	7cdb      	ldrb	r3, [r3, #19]
    b9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b9b8:	b2db      	uxtb	r3, r3
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d105      	bne.n	b9ca <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    b9be:	7abb      	ldrb	r3, [r7, #10]
    b9c0:	4619      	mov	r1, r3
    b9c2:	6838      	ldr	r0, [r7, #0]
    b9c4:	4b0c      	ldr	r3, [pc, #48]	; (b9f8 <_usb_d_dev_handle_eps+0xac>)
    b9c6:	4798      	blx	r3
    b9c8:	e013      	b.n	b9f2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    b9ca:	683b      	ldr	r3, [r7, #0]
    b9cc:	7cdb      	ldrb	r3, [r3, #19]
    b9ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b9d2:	b2db      	uxtb	r3, r3
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	d005      	beq.n	b9e4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    b9d8:	7abb      	ldrb	r3, [r7, #10]
    b9da:	4619      	mov	r1, r3
    b9dc:	6838      	ldr	r0, [r7, #0]
    b9de:	4b07      	ldr	r3, [pc, #28]	; (b9fc <_usb_d_dev_handle_eps+0xb0>)
    b9e0:	4798      	blx	r3
    b9e2:	e006      	b.n	b9f2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    b9e4:	7abb      	ldrb	r3, [r7, #10]
    b9e6:	4619      	mov	r1, r3
    b9e8:	6838      	ldr	r0, [r7, #0]
    b9ea:	4b05      	ldr	r3, [pc, #20]	; (ba00 <_usb_d_dev_handle_eps+0xb4>)
    b9ec:	4798      	blx	r3
    b9ee:	e000      	b.n	b9f2 <_usb_d_dev_handle_eps+0xa6>
		return;
    b9f0:	bf00      	nop
		}
	}
}
    b9f2:	3710      	adds	r7, #16
    b9f4:	46bd      	mov	sp, r7
    b9f6:	bd80      	pop	{r7, pc}
    b9f8:	0000b7d1 	.word	0x0000b7d1
    b9fc:	0000b825 	.word	0x0000b825
    ba00:	0000b8b9 	.word	0x0000b8b9

0000ba04 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    ba04:	b580      	push	{r7, lr}
    ba06:	b084      	sub	sp, #16
    ba08:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ba0a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ba0e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    ba10:	68bb      	ldr	r3, [r7, #8]
    ba12:	8c1b      	ldrh	r3, [r3, #32]
    ba14:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    ba16:	88fb      	ldrh	r3, [r7, #6]
    ba18:	2b00      	cmp	r3, #0
    ba1a:	d104      	bne.n	ba26 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    ba1c:	4b13      	ldr	r3, [pc, #76]	; (ba6c <_usb_d_dev_handler+0x68>)
    ba1e:	4798      	blx	r3
    ba20:	4603      	mov	r3, r0
    ba22:	2b00      	cmp	r3, #0
    ba24:	d11e      	bne.n	ba64 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    ba26:	2300      	movs	r3, #0
    ba28:	73fb      	strb	r3, [r7, #15]
    ba2a:	e017      	b.n	ba5c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    ba2c:	7bfa      	ldrb	r2, [r7, #15]
    ba2e:	4613      	mov	r3, r2
    ba30:	009b      	lsls	r3, r3, #2
    ba32:	4413      	add	r3, r2
    ba34:	009b      	lsls	r3, r3, #2
    ba36:	3310      	adds	r3, #16
    ba38:	4a0d      	ldr	r2, [pc, #52]	; (ba70 <_usb_d_dev_handler+0x6c>)
    ba3a:	4413      	add	r3, r2
    ba3c:	3304      	adds	r3, #4
    ba3e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    ba40:	683b      	ldr	r3, [r7, #0]
    ba42:	7c9b      	ldrb	r3, [r3, #18]
    ba44:	2bff      	cmp	r3, #255	; 0xff
    ba46:	d005      	beq.n	ba54 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    ba48:	88fb      	ldrh	r3, [r7, #6]
    ba4a:	6839      	ldr	r1, [r7, #0]
    ba4c:	4618      	mov	r0, r3
    ba4e:	4b09      	ldr	r3, [pc, #36]	; (ba74 <_usb_d_dev_handler+0x70>)
    ba50:	4798      	blx	r3
    ba52:	e000      	b.n	ba56 <_usb_d_dev_handler+0x52>
			continue;
    ba54:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    ba56:	7bfb      	ldrb	r3, [r7, #15]
    ba58:	3301      	adds	r3, #1
    ba5a:	73fb      	strb	r3, [r7, #15]
    ba5c:	7bfb      	ldrb	r3, [r7, #15]
    ba5e:	2b08      	cmp	r3, #8
    ba60:	d9e4      	bls.n	ba2c <_usb_d_dev_handler+0x28>
    ba62:	e000      	b.n	ba66 <_usb_d_dev_handler+0x62>
			return;
    ba64:	bf00      	nop
	}
}
    ba66:	3710      	adds	r7, #16
    ba68:	46bd      	mov	sp, r7
    ba6a:	bd80      	pop	{r7, pc}
    ba6c:	0000af5d 	.word	0x0000af5d
    ba70:	20001f70 	.word	0x20001f70
    ba74:	0000b94d 	.word	0x0000b94d

0000ba78 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    ba78:	b580      	push	{r7, lr}
    ba7a:	b082      	sub	sp, #8
    ba7c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    ba7e:	2300      	movs	r3, #0
    ba80:	71fb      	strb	r3, [r7, #7]
    ba82:	e023      	b.n	bacc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    ba84:	79fa      	ldrb	r2, [r7, #7]
    ba86:	4613      	mov	r3, r2
    ba88:	009b      	lsls	r3, r3, #2
    ba8a:	4413      	add	r3, r2
    ba8c:	009b      	lsls	r3, r3, #2
    ba8e:	3310      	adds	r3, #16
    ba90:	4a14      	ldr	r2, [pc, #80]	; (bae4 <_usb_d_dev_reset_epts+0x6c>)
    ba92:	4413      	add	r3, r2
    ba94:	3304      	adds	r3, #4
    ba96:	2103      	movs	r1, #3
    ba98:	4618      	mov	r0, r3
    ba9a:	4b13      	ldr	r3, [pc, #76]	; (bae8 <_usb_d_dev_reset_epts+0x70>)
    ba9c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    ba9e:	79fa      	ldrb	r2, [r7, #7]
    baa0:	4910      	ldr	r1, [pc, #64]	; (bae4 <_usb_d_dev_reset_epts+0x6c>)
    baa2:	4613      	mov	r3, r2
    baa4:	009b      	lsls	r3, r3, #2
    baa6:	4413      	add	r3, r2
    baa8:	009b      	lsls	r3, r3, #2
    baaa:	440b      	add	r3, r1
    baac:	3326      	adds	r3, #38	; 0x26
    baae:	22ff      	movs	r2, #255	; 0xff
    bab0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    bab2:	79fa      	ldrb	r2, [r7, #7]
    bab4:	490b      	ldr	r1, [pc, #44]	; (bae4 <_usb_d_dev_reset_epts+0x6c>)
    bab6:	4613      	mov	r3, r2
    bab8:	009b      	lsls	r3, r3, #2
    baba:	4413      	add	r3, r2
    babc:	009b      	lsls	r3, r3, #2
    babe:	440b      	add	r3, r1
    bac0:	3327      	adds	r3, #39	; 0x27
    bac2:	2200      	movs	r2, #0
    bac4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    bac6:	79fb      	ldrb	r3, [r7, #7]
    bac8:	3301      	adds	r3, #1
    baca:	71fb      	strb	r3, [r7, #7]
    bacc:	79fb      	ldrb	r3, [r7, #7]
    bace:	2b08      	cmp	r3, #8
    bad0:	d9d8      	bls.n	ba84 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    bad2:	22a0      	movs	r2, #160	; 0xa0
    bad4:	2100      	movs	r1, #0
    bad6:	4805      	ldr	r0, [pc, #20]	; (baec <_usb_d_dev_reset_epts+0x74>)
    bad8:	4b05      	ldr	r3, [pc, #20]	; (baf0 <_usb_d_dev_reset_epts+0x78>)
    bada:	4798      	blx	r3
}
    badc:	bf00      	nop
    bade:	3708      	adds	r7, #8
    bae0:	46bd      	mov	sp, r7
    bae2:	bd80      	pop	{r7, pc}
    bae4:	20001f70 	.word	0x20001f70
    bae8:	0000c33d 	.word	0x0000c33d
    baec:	20002038 	.word	0x20002038
    baf0:	00010945 	.word	0x00010945

0000baf4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    baf4:	b580      	push	{r7, lr}
    baf6:	b084      	sub	sp, #16
    baf8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    bafa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bafe:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    bb00:	2301      	movs	r3, #1
    bb02:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    bb04:	2304      	movs	r3, #4
    bb06:	713b      	strb	r3, [r7, #4]
    bb08:	2300      	movs	r3, #0
    bb0a:	717b      	strb	r3, [r7, #5]
    bb0c:	2300      	movs	r3, #0
    bb0e:	71bb      	strb	r3, [r7, #6]
    bb10:	2300      	movs	r3, #0
    bb12:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    bb14:	2101      	movs	r1, #1
    bb16:	68f8      	ldr	r0, [r7, #12]
    bb18:	4b26      	ldr	r3, [pc, #152]	; (bbb4 <_usb_d_dev_init+0xc0>)
    bb1a:	4798      	blx	r3
    bb1c:	4603      	mov	r3, r0
    bb1e:	f083 0301 	eor.w	r3, r3, #1
    bb22:	b2db      	uxtb	r3, r3
    bb24:	2b00      	cmp	r3, #0
    bb26:	d011      	beq.n	bb4c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    bb28:	2102      	movs	r1, #2
    bb2a:	68f8      	ldr	r0, [r7, #12]
    bb2c:	4b22      	ldr	r3, [pc, #136]	; (bbb8 <_usb_d_dev_init+0xc4>)
    bb2e:	4798      	blx	r3
    bb30:	4603      	mov	r3, r0
    bb32:	2b00      	cmp	r3, #0
    bb34:	d006      	beq.n	bb44 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    bb36:	68f8      	ldr	r0, [r7, #12]
    bb38:	4b20      	ldr	r3, [pc, #128]	; (bbbc <_usb_d_dev_init+0xc8>)
    bb3a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    bb3c:	2102      	movs	r1, #2
    bb3e:	68f8      	ldr	r0, [r7, #12]
    bb40:	4b1f      	ldr	r3, [pc, #124]	; (bbc0 <_usb_d_dev_init+0xcc>)
    bb42:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    bb44:	2101      	movs	r1, #1
    bb46:	68f8      	ldr	r0, [r7, #12]
    bb48:	4b1e      	ldr	r3, [pc, #120]	; (bbc4 <_usb_d_dev_init+0xd0>)
    bb4a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    bb4c:	2101      	movs	r1, #1
    bb4e:	68f8      	ldr	r0, [r7, #12]
    bb50:	4b1b      	ldr	r3, [pc, #108]	; (bbc0 <_usb_d_dev_init+0xcc>)
    bb52:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    bb54:	4b1c      	ldr	r3, [pc, #112]	; (bbc8 <_usb_d_dev_init+0xd4>)
    bb56:	4a1d      	ldr	r2, [pc, #116]	; (bbcc <_usb_d_dev_init+0xd8>)
    bb58:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    bb5a:	4b1b      	ldr	r3, [pc, #108]	; (bbc8 <_usb_d_dev_init+0xd4>)
    bb5c:	4a1b      	ldr	r2, [pc, #108]	; (bbcc <_usb_d_dev_init+0xd8>)
    bb5e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    bb60:	4b19      	ldr	r3, [pc, #100]	; (bbc8 <_usb_d_dev_init+0xd4>)
    bb62:	4a1a      	ldr	r2, [pc, #104]	; (bbcc <_usb_d_dev_init+0xd8>)
    bb64:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    bb66:	4b18      	ldr	r3, [pc, #96]	; (bbc8 <_usb_d_dev_init+0xd4>)
    bb68:	4a18      	ldr	r2, [pc, #96]	; (bbcc <_usb_d_dev_init+0xd8>)
    bb6a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    bb6c:	4b16      	ldr	r3, [pc, #88]	; (bbc8 <_usb_d_dev_init+0xd4>)
    bb6e:	4a17      	ldr	r2, [pc, #92]	; (bbcc <_usb_d_dev_init+0xd8>)
    bb70:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    bb72:	4b17      	ldr	r3, [pc, #92]	; (bbd0 <_usb_d_dev_init+0xdc>)
    bb74:	4798      	blx	r3

	_usb_load_calib();
    bb76:	4b17      	ldr	r3, [pc, #92]	; (bbd4 <_usb_d_dev_init+0xe0>)
    bb78:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    bb7a:	2104      	movs	r1, #4
    bb7c:	68f8      	ldr	r0, [r7, #12]
    bb7e:	4b11      	ldr	r3, [pc, #68]	; (bbc4 <_usb_d_dev_init+0xd0>)
    bb80:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    bb82:	4b15      	ldr	r3, [pc, #84]	; (bbd8 <_usb_d_dev_init+0xe4>)
    bb84:	4619      	mov	r1, r3
    bb86:	68f8      	ldr	r0, [r7, #12]
    bb88:	4b14      	ldr	r3, [pc, #80]	; (bbdc <_usb_d_dev_init+0xe8>)
    bb8a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    bb8c:	7afb      	ldrb	r3, [r7, #11]
    bb8e:	f107 0210 	add.w	r2, r7, #16
    bb92:	4413      	add	r3, r2
    bb94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    bb98:	f043 0301 	orr.w	r3, r3, #1
    bb9c:	b2db      	uxtb	r3, r3
    bb9e:	b29b      	uxth	r3, r3
    bba0:	4619      	mov	r1, r3
    bba2:	68f8      	ldr	r0, [r7, #12]
    bba4:	4b0e      	ldr	r3, [pc, #56]	; (bbe0 <_usb_d_dev_init+0xec>)
    bba6:	4798      	blx	r3

	return ERR_NONE;
    bba8:	2300      	movs	r3, #0
}
    bbaa:	4618      	mov	r0, r3
    bbac:	3710      	adds	r7, #16
    bbae:	46bd      	mov	sp, r7
    bbb0:	bd80      	pop	{r7, pc}
    bbb2:	bf00      	nop
    bbb4:	0000a18d 	.word	0x0000a18d
    bbb8:	0000a4dd 	.word	0x0000a4dd
    bbbc:	0000a4b1 	.word	0x0000a4b1
    bbc0:	0000a163 	.word	0x0000a163
    bbc4:	0000a50d 	.word	0x0000a50d
    bbc8:	20001f70 	.word	0x20001f70
    bbcc:	0000a5d5 	.word	0x0000a5d5
    bbd0:	0000ba79 	.word	0x0000ba79
    bbd4:	0000a5ed 	.word	0x0000a5ed
    bbd8:	20002038 	.word	0x20002038
    bbdc:	0000a5b9 	.word	0x0000a5b9
    bbe0:	0000a57d 	.word	0x0000a57d

0000bbe4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    bbe4:	b580      	push	{r7, lr}
    bbe6:	b082      	sub	sp, #8
    bbe8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bbea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bbee:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    bbf0:	2103      	movs	r1, #3
    bbf2:	6878      	ldr	r0, [r7, #4]
    bbf4:	4b17      	ldr	r3, [pc, #92]	; (bc54 <_usb_d_dev_enable+0x70>)
    bbf6:	4798      	blx	r3
    bbf8:	4603      	mov	r3, r0
    bbfa:	2b00      	cmp	r3, #0
    bbfc:	d002      	beq.n	bc04 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    bbfe:	f06f 0310 	mvn.w	r3, #16
    bc02:	e023      	b.n	bc4c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    bc04:	6878      	ldr	r0, [r7, #4]
    bc06:	4b14      	ldr	r3, [pc, #80]	; (bc58 <_usb_d_dev_enable+0x74>)
    bc08:	4798      	blx	r3
    bc0a:	4603      	mov	r3, r0
    bc0c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    bc0e:	78fb      	ldrb	r3, [r7, #3]
    bc10:	f003 0302 	and.w	r3, r3, #2
    bc14:	2b00      	cmp	r3, #0
    bc16:	d107      	bne.n	bc28 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    bc18:	78fb      	ldrb	r3, [r7, #3]
    bc1a:	f043 0302 	orr.w	r3, r3, #2
    bc1e:	b2db      	uxtb	r3, r3
    bc20:	4619      	mov	r1, r3
    bc22:	6878      	ldr	r0, [r7, #4]
    bc24:	4b0d      	ldr	r3, [pc, #52]	; (bc5c <_usb_d_dev_enable+0x78>)
    bc26:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    bc28:	2050      	movs	r0, #80	; 0x50
    bc2a:	4b0d      	ldr	r3, [pc, #52]	; (bc60 <_usb_d_dev_enable+0x7c>)
    bc2c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    bc2e:	2051      	movs	r0, #81	; 0x51
    bc30:	4b0b      	ldr	r3, [pc, #44]	; (bc60 <_usb_d_dev_enable+0x7c>)
    bc32:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    bc34:	2052      	movs	r0, #82	; 0x52
    bc36:	4b0a      	ldr	r3, [pc, #40]	; (bc60 <_usb_d_dev_enable+0x7c>)
    bc38:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    bc3a:	2053      	movs	r0, #83	; 0x53
    bc3c:	4b08      	ldr	r3, [pc, #32]	; (bc60 <_usb_d_dev_enable+0x7c>)
    bc3e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    bc40:	f240 218d 	movw	r1, #653	; 0x28d
    bc44:	6878      	ldr	r0, [r7, #4]
    bc46:	4b07      	ldr	r3, [pc, #28]	; (bc64 <_usb_d_dev_enable+0x80>)
    bc48:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    bc4a:	2300      	movs	r3, #0
}
    bc4c:	4618      	mov	r0, r3
    bc4e:	3708      	adds	r7, #8
    bc50:	46bd      	mov	sp, r7
    bc52:	bd80      	pop	{r7, pc}
    bc54:	0000a487 	.word	0x0000a487
    bc58:	0000a535 	.word	0x0000a535
    bc5c:	0000a50d 	.word	0x0000a50d
    bc60:	0000a099 	.word	0x0000a099
    bc64:	0000a431 	.word	0x0000a431

0000bc68 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    bc68:	b580      	push	{r7, lr}
    bc6a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    bc6c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bc70:	4b01      	ldr	r3, [pc, #4]	; (bc78 <_usb_d_dev_attach+0x10>)
    bc72:	4798      	blx	r3
}
    bc74:	bf00      	nop
    bc76:	bd80      	pop	{r7, pc}
    bc78:	0000a559 	.word	0x0000a559

0000bc7c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    bc7c:	b580      	push	{r7, lr}
    bc7e:	b082      	sub	sp, #8
    bc80:	af00      	add	r7, sp, #0
    bc82:	4603      	mov	r3, r0
    bc84:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    bc86:	79fb      	ldrb	r3, [r7, #7]
    bc88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bc8c:	b2db      	uxtb	r3, r3
    bc8e:	4619      	mov	r1, r3
    bc90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bc94:	4b02      	ldr	r3, [pc, #8]	; (bca0 <_usb_d_dev_set_address+0x24>)
    bc96:	4798      	blx	r3
}
    bc98:	bf00      	nop
    bc9a:	3708      	adds	r7, #8
    bc9c:	46bd      	mov	sp, r7
    bc9e:	bd80      	pop	{r7, pc}
    bca0:	0000a59b 	.word	0x0000a59b

0000bca4 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    bca4:	b590      	push	{r4, r7, lr}
    bca6:	b085      	sub	sp, #20
    bca8:	af00      	add	r7, sp, #0
    bcaa:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    bcac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bcb0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bcb2:	687b      	ldr	r3, [r7, #4]
    bcb4:	7c9b      	ldrb	r3, [r3, #18]
    bcb6:	f003 030f 	and.w	r3, r3, #15
    bcba:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bcbc:	687b      	ldr	r3, [r7, #4]
    bcbe:	68db      	ldr	r3, [r3, #12]
    bcc0:	461a      	mov	r2, r3
    bcc2:	7afb      	ldrb	r3, [r7, #11]
    bcc4:	2100      	movs	r1, #0
    bcc6:	4618      	mov	r0, r3
    bcc8:	4b0f      	ldr	r3, [pc, #60]	; (bd08 <_usb_d_dev_trans_setup+0x64>)
    bcca:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bccc:	687b      	ldr	r3, [r7, #4]
    bcce:	8a1b      	ldrh	r3, [r3, #16]
    bcd0:	461a      	mov	r2, r3
    bcd2:	7af8      	ldrb	r0, [r7, #11]
    bcd4:	2300      	movs	r3, #0
    bcd6:	2100      	movs	r1, #0
    bcd8:	4c0c      	ldr	r4, [pc, #48]	; (bd0c <_usb_d_dev_trans_setup+0x68>)
    bcda:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    bcdc:	7afb      	ldrb	r3, [r7, #11]
    bcde:	22b0      	movs	r2, #176	; 0xb0
    bce0:	4619      	mov	r1, r3
    bce2:	68f8      	ldr	r0, [r7, #12]
    bce4:	4b0a      	ldr	r3, [pc, #40]	; (bd10 <_usb_d_dev_trans_setup+0x6c>)
    bce6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    bce8:	7afb      	ldrb	r3, [r7, #11]
    bcea:	2200      	movs	r2, #0
    bcec:	2100      	movs	r1, #0
    bcee:	4618      	mov	r0, r3
    bcf0:	4b08      	ldr	r3, [pc, #32]	; (bd14 <_usb_d_dev_trans_setup+0x70>)
    bcf2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    bcf4:	7afb      	ldrb	r3, [r7, #11]
    bcf6:	2210      	movs	r2, #16
    bcf8:	4619      	mov	r1, r3
    bcfa:	68f8      	ldr	r0, [r7, #12]
    bcfc:	4b06      	ldr	r3, [pc, #24]	; (bd18 <_usb_d_dev_trans_setup+0x74>)
    bcfe:	4798      	blx	r3
}
    bd00:	bf00      	nop
    bd02:	3714      	adds	r7, #20
    bd04:	46bd      	mov	sp, r7
    bd06:	bd90      	pop	{r4, r7, pc}
    bd08:	0000aa39 	.word	0x0000aa39
    bd0c:	0000abc1 	.word	0x0000abc1
    bd10:	0000a299 	.word	0x0000a299
    bd14:	0000ac91 	.word	0x0000ac91
    bd18:	0000a2ed 	.word	0x0000a2ed

0000bd1c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    bd1c:	b580      	push	{r7, lr}
    bd1e:	b088      	sub	sp, #32
    bd20:	af00      	add	r7, sp, #0
    bd22:	4603      	mov	r3, r0
    bd24:	71fb      	strb	r3, [r7, #7]
    bd26:	460b      	mov	r3, r1
    bd28:	71bb      	strb	r3, [r7, #6]
    bd2a:	4613      	mov	r3, r2
    bd2c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    bd2e:	79fb      	ldrb	r3, [r7, #7]
    bd30:	f003 030f 	and.w	r3, r3, #15
    bd34:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    bd36:	79fb      	ldrb	r3, [r7, #7]
    bd38:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd3c:	2b00      	cmp	r3, #0
    bd3e:	bf14      	ite	ne
    bd40:	2301      	movne	r3, #1
    bd42:	2300      	moveq	r3, #0
    bd44:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bd46:	7fba      	ldrb	r2, [r7, #30]
    bd48:	7ffb      	ldrb	r3, [r7, #31]
    bd4a:	4611      	mov	r1, r2
    bd4c:	4618      	mov	r0, r3
    bd4e:	4b3e      	ldr	r3, [pc, #248]	; (be48 <_usb_d_dev_ep_init+0x12c>)
    bd50:	4798      	blx	r3
    bd52:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    bd54:	79bb      	ldrb	r3, [r7, #6]
    bd56:	f003 0303 	and.w	r3, r3, #3
    bd5a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    bd5c:	7ffa      	ldrb	r2, [r7, #31]
    bd5e:	4613      	mov	r3, r2
    bd60:	005b      	lsls	r3, r3, #1
    bd62:	4413      	add	r3, r2
    bd64:	009b      	lsls	r3, r3, #2
    bd66:	4a39      	ldr	r2, [pc, #228]	; (be4c <_usb_d_dev_ep_init+0x130>)
    bd68:	4413      	add	r3, r2
    bd6a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    bd6c:	7ffb      	ldrb	r3, [r7, #31]
    bd6e:	2b04      	cmp	r3, #4
    bd70:	d902      	bls.n	bd78 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    bd72:	f06f 0311 	mvn.w	r3, #17
    bd76:	e063      	b.n	be40 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    bd78:	69bb      	ldr	r3, [r7, #24]
    bd7a:	7c9b      	ldrb	r3, [r3, #18]
    bd7c:	2bff      	cmp	r3, #255	; 0xff
    bd7e:	d002      	beq.n	bd86 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    bd80:	f06f 0313 	mvn.w	r3, #19
    bd84:	e05c      	b.n	be40 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    bd86:	7dfb      	ldrb	r3, [r7, #23]
    bd88:	2b00      	cmp	r3, #0
    bd8a:	d11f      	bne.n	bdcc <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    bd8c:	7fbb      	ldrb	r3, [r7, #30]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	bf14      	ite	ne
    bd92:	2301      	movne	r3, #1
    bd94:	2300      	moveq	r3, #0
    bd96:	b2db      	uxtb	r3, r3
    bd98:	f083 0301 	eor.w	r3, r3, #1
    bd9c:	b2db      	uxtb	r3, r3
    bd9e:	f003 0301 	and.w	r3, r3, #1
    bda2:	b2da      	uxtb	r2, r3
    bda4:	7ffb      	ldrb	r3, [r7, #31]
    bda6:	4611      	mov	r1, r2
    bda8:	4618      	mov	r0, r3
    bdaa:	4b27      	ldr	r3, [pc, #156]	; (be48 <_usb_d_dev_ep_init+0x12c>)
    bdac:	4798      	blx	r3
    bdae:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    bdb0:	68fb      	ldr	r3, [r7, #12]
    bdb2:	7c9b      	ldrb	r3, [r3, #18]
    bdb4:	2bff      	cmp	r3, #255	; 0xff
    bdb6:	d002      	beq.n	bdbe <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    bdb8:	f06f 0313 	mvn.w	r3, #19
    bdbc:	e040      	b.n	be40 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    bdbe:	693b      	ldr	r3, [r7, #16]
    bdc0:	681b      	ldr	r3, [r3, #0]
    bdc2:	2b00      	cmp	r3, #0
    bdc4:	d102      	bne.n	bdcc <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    bdc6:	f06f 0312 	mvn.w	r3, #18
    bdca:	e039      	b.n	be40 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    bdcc:	7fbb      	ldrb	r3, [r7, #30]
    bdce:	2b00      	cmp	r3, #0
    bdd0:	d007      	beq.n	bde2 <_usb_d_dev_ep_init+0xc6>
    bdd2:	693b      	ldr	r3, [r7, #16]
    bdd4:	685b      	ldr	r3, [r3, #4]
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	bf14      	ite	ne
    bdda:	2301      	movne	r3, #1
    bddc:	2300      	moveq	r3, #0
    bdde:	b2db      	uxtb	r3, r3
    bde0:	e006      	b.n	bdf0 <_usb_d_dev_ep_init+0xd4>
    bde2:	693b      	ldr	r3, [r7, #16]
    bde4:	681b      	ldr	r3, [r3, #0]
    bde6:	2b00      	cmp	r3, #0
    bde8:	bf14      	ite	ne
    bdea:	2301      	movne	r3, #1
    bdec:	2300      	moveq	r3, #0
    bdee:	b2db      	uxtb	r3, r3
    bdf0:	2b00      	cmp	r3, #0
    bdf2:	d00f      	beq.n	be14 <_usb_d_dev_ep_init+0xf8>
    bdf4:	7fbb      	ldrb	r3, [r7, #30]
    bdf6:	2b00      	cmp	r3, #0
    bdf8:	d003      	beq.n	be02 <_usb_d_dev_ep_init+0xe6>
    bdfa:	693b      	ldr	r3, [r7, #16]
    bdfc:	895b      	ldrh	r3, [r3, #10]
    bdfe:	461a      	mov	r2, r3
    be00:	e002      	b.n	be08 <_usb_d_dev_ep_init+0xec>
    be02:	693b      	ldr	r3, [r7, #16]
    be04:	891b      	ldrh	r3, [r3, #8]
    be06:	461a      	mov	r2, r3
    be08:	88bb      	ldrh	r3, [r7, #4]
    be0a:	429a      	cmp	r2, r3
    be0c:	da02      	bge.n	be14 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    be0e:	f06f 0312 	mvn.w	r3, #18
    be12:	e015      	b.n	be40 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    be14:	7fbb      	ldrb	r3, [r7, #30]
    be16:	2b00      	cmp	r3, #0
    be18:	d002      	beq.n	be20 <_usb_d_dev_ep_init+0x104>
    be1a:	693b      	ldr	r3, [r7, #16]
    be1c:	685b      	ldr	r3, [r3, #4]
    be1e:	e001      	b.n	be24 <_usb_d_dev_ep_init+0x108>
    be20:	693b      	ldr	r3, [r7, #16]
    be22:	681b      	ldr	r3, [r3, #0]
    be24:	69ba      	ldr	r2, [r7, #24]
    be26:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    be28:	69bb      	ldr	r3, [r7, #24]
    be2a:	88ba      	ldrh	r2, [r7, #4]
    be2c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    be2e:	7dfb      	ldrb	r3, [r7, #23]
    be30:	3301      	adds	r3, #1
    be32:	b2da      	uxtb	r2, r3
    be34:	69bb      	ldr	r3, [r7, #24]
    be36:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    be38:	69bb      	ldr	r3, [r7, #24]
    be3a:	79fa      	ldrb	r2, [r7, #7]
    be3c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    be3e:	2300      	movs	r3, #0
}
    be40:	4618      	mov	r0, r3
    be42:	3720      	adds	r7, #32
    be44:	46bd      	mov	sp, r7
    be46:	bd80      	pop	{r7, pc}
    be48:	0000ad4d 	.word	0x0000ad4d
    be4c:	00011c98 	.word	0x00011c98

0000be50 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    be50:	b580      	push	{r7, lr}
    be52:	b086      	sub	sp, #24
    be54:	af00      	add	r7, sp, #0
    be56:	4603      	mov	r3, r0
    be58:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    be5a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    be5e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    be60:	79fb      	ldrb	r3, [r7, #7]
    be62:	f003 030f 	and.w	r3, r3, #15
    be66:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    be68:	79fb      	ldrb	r3, [r7, #7]
    be6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    be6e:	2b00      	cmp	r3, #0
    be70:	bf14      	ite	ne
    be72:	2301      	movne	r3, #1
    be74:	2300      	moveq	r3, #0
    be76:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    be78:	7cba      	ldrb	r2, [r7, #18]
    be7a:	7cfb      	ldrb	r3, [r7, #19]
    be7c:	4611      	mov	r1, r2
    be7e:	4618      	mov	r0, r3
    be80:	4b2a      	ldr	r3, [pc, #168]	; (bf2c <_usb_d_dev_ep_deinit+0xdc>)
    be82:	4798      	blx	r3
    be84:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    be86:	7cfb      	ldrb	r3, [r7, #19]
    be88:	2b04      	cmp	r3, #4
    be8a:	d84a      	bhi.n	bf22 <_usb_d_dev_ep_deinit+0xd2>
    be8c:	68fb      	ldr	r3, [r7, #12]
    be8e:	7c9b      	ldrb	r3, [r3, #18]
    be90:	2bff      	cmp	r3, #255	; 0xff
    be92:	d046      	beq.n	bf22 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    be94:	7cbb      	ldrb	r3, [r7, #18]
    be96:	2203      	movs	r2, #3
    be98:	4619      	mov	r1, r3
    be9a:	68f8      	ldr	r0, [r7, #12]
    be9c:	4b24      	ldr	r3, [pc, #144]	; (bf30 <_usb_d_dev_ep_deinit+0xe0>)
    be9e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    bea0:	68fb      	ldr	r3, [r7, #12]
    bea2:	7cdb      	ldrb	r3, [r3, #19]
    bea4:	f003 0307 	and.w	r3, r3, #7
    bea8:	b2db      	uxtb	r3, r3
    beaa:	2b01      	cmp	r3, #1
    beac:	d107      	bne.n	bebe <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    beae:	79fb      	ldrb	r3, [r7, #7]
    beb0:	697a      	ldr	r2, [r7, #20]
    beb2:	3308      	adds	r3, #8
    beb4:	015b      	lsls	r3, r3, #5
    beb6:	4413      	add	r3, r2
    beb8:	2200      	movs	r2, #0
    beba:	701a      	strb	r2, [r3, #0]
    bebc:	e02a      	b.n	bf14 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    bebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
    bec2:	2b00      	cmp	r3, #0
    bec4:	da15      	bge.n	bef2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    bec6:	79fb      	ldrb	r3, [r7, #7]
    bec8:	f003 030f 	and.w	r3, r3, #15
    becc:	79fa      	ldrb	r2, [r7, #7]
    bece:	f002 020f 	and.w	r2, r2, #15
    bed2:	6979      	ldr	r1, [r7, #20]
    bed4:	3208      	adds	r2, #8
    bed6:	0152      	lsls	r2, r2, #5
    bed8:	440a      	add	r2, r1
    beda:	7812      	ldrb	r2, [r2, #0]
    bedc:	b2d2      	uxtb	r2, r2
    bede:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    bee2:	b2d1      	uxtb	r1, r2
    bee4:	697a      	ldr	r2, [r7, #20]
    bee6:	3308      	adds	r3, #8
    bee8:	015b      	lsls	r3, r3, #5
    beea:	4413      	add	r3, r2
    beec:	460a      	mov	r2, r1
    beee:	701a      	strb	r2, [r3, #0]
    bef0:	e010      	b.n	bf14 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    bef2:	79fb      	ldrb	r3, [r7, #7]
    bef4:	79fa      	ldrb	r2, [r7, #7]
    bef6:	6979      	ldr	r1, [r7, #20]
    bef8:	3208      	adds	r2, #8
    befa:	0152      	lsls	r2, r2, #5
    befc:	440a      	add	r2, r1
    befe:	7812      	ldrb	r2, [r2, #0]
    bf00:	b2d2      	uxtb	r2, r2
    bf02:	f022 0207 	bic.w	r2, r2, #7
    bf06:	b2d1      	uxtb	r1, r2
    bf08:	697a      	ldr	r2, [r7, #20]
    bf0a:	3308      	adds	r3, #8
    bf0c:	015b      	lsls	r3, r3, #5
    bf0e:	4413      	add	r3, r2
    bf10:	460a      	mov	r2, r1
    bf12:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    bf14:	68fb      	ldr	r3, [r7, #12]
    bf16:	2200      	movs	r2, #0
    bf18:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    bf1a:	68fb      	ldr	r3, [r7, #12]
    bf1c:	22ff      	movs	r2, #255	; 0xff
    bf1e:	749a      	strb	r2, [r3, #18]
    bf20:	e000      	b.n	bf24 <_usb_d_dev_ep_deinit+0xd4>
		return;
    bf22:	bf00      	nop
}
    bf24:	3718      	adds	r7, #24
    bf26:	46bd      	mov	sp, r7
    bf28:	bd80      	pop	{r7, pc}
    bf2a:	bf00      	nop
    bf2c:	0000ad4d 	.word	0x0000ad4d
    bf30:	0000c385 	.word	0x0000c385

0000bf34 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    bf34:	b5b0      	push	{r4, r5, r7, lr}
    bf36:	b088      	sub	sp, #32
    bf38:	af00      	add	r7, sp, #0
    bf3a:	4603      	mov	r3, r0
    bf3c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    bf3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf42:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    bf44:	79fb      	ldrb	r3, [r7, #7]
    bf46:	f003 030f 	and.w	r3, r3, #15
    bf4a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    bf4c:	79fb      	ldrb	r3, [r7, #7]
    bf4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf52:	2b00      	cmp	r3, #0
    bf54:	bf14      	ite	ne
    bf56:	2301      	movne	r3, #1
    bf58:	2300      	moveq	r3, #0
    bf5a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    bf5c:	7eba      	ldrb	r2, [r7, #26]
    bf5e:	7efb      	ldrb	r3, [r7, #27]
    bf60:	4611      	mov	r1, r2
    bf62:	4618      	mov	r0, r3
    bf64:	4b70      	ldr	r3, [pc, #448]	; (c128 <_usb_d_dev_ep_enable+0x1f4>)
    bf66:	4798      	blx	r3
    bf68:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    bf6a:	7efb      	ldrb	r3, [r7, #27]
    bf6c:	4619      	mov	r1, r3
    bf6e:	69f8      	ldr	r0, [r7, #28]
    bf70:	4b6e      	ldr	r3, [pc, #440]	; (c12c <_usb_d_dev_ep_enable+0x1f8>)
    bf72:	4798      	blx	r3
    bf74:	4603      	mov	r3, r0
    bf76:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    bf78:	7efb      	ldrb	r3, [r7, #27]
    bf7a:	2b04      	cmp	r3, #4
    bf7c:	d803      	bhi.n	bf86 <_usb_d_dev_ep_enable+0x52>
    bf7e:	697b      	ldr	r3, [r7, #20]
    bf80:	7c9b      	ldrb	r3, [r3, #18]
    bf82:	2bff      	cmp	r3, #255	; 0xff
    bf84:	d102      	bne.n	bf8c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    bf86:	f06f 0311 	mvn.w	r3, #17
    bf8a:	e0c8      	b.n	c11e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    bf8c:	7efb      	ldrb	r3, [r7, #27]
    bf8e:	015b      	lsls	r3, r3, #5
    bf90:	4a67      	ldr	r2, [pc, #412]	; (c130 <_usb_d_dev_ep_enable+0x1fc>)
    bf92:	4413      	add	r3, r2
    bf94:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    bf96:	697b      	ldr	r3, [r7, #20]
    bf98:	7cdb      	ldrb	r3, [r3, #19]
    bf9a:	f003 0307 	and.w	r3, r3, #7
    bf9e:	b2db      	uxtb	r3, r3
    bfa0:	2b01      	cmp	r3, #1
    bfa2:	d14b      	bne.n	c03c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    bfa4:	7cfb      	ldrb	r3, [r7, #19]
    bfa6:	f003 0377 	and.w	r3, r3, #119	; 0x77
    bfaa:	2b00      	cmp	r3, #0
    bfac:	d002      	beq.n	bfb4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    bfae:	f06f 0313 	mvn.w	r3, #19
    bfb2:	e0b4      	b.n	c11e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    bfb4:	7efb      	ldrb	r3, [r7, #27]
    bfb6:	2211      	movs	r2, #17
    bfb8:	4619      	mov	r1, r3
    bfba:	69f8      	ldr	r0, [r7, #28]
    bfbc:	4b5d      	ldr	r3, [pc, #372]	; (c134 <_usb_d_dev_ep_enable+0x200>)
    bfbe:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    bfc0:	697b      	ldr	r3, [r7, #20]
    bfc2:	8a1b      	ldrh	r3, [r3, #16]
    bfc4:	039b      	lsls	r3, r3, #14
    bfc6:	4c5c      	ldr	r4, [pc, #368]	; (c138 <_usb_d_dev_ep_enable+0x204>)
    bfc8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    bfca:	697b      	ldr	r3, [r7, #20]
    bfcc:	8a1b      	ldrh	r3, [r3, #16]
    bfce:	4618      	mov	r0, r3
    bfd0:	4b5a      	ldr	r3, [pc, #360]	; (c13c <_usb_d_dev_ep_enable+0x208>)
    bfd2:	4798      	blx	r3
    bfd4:	4603      	mov	r3, r0
    bfd6:	071b      	lsls	r3, r3, #28
    bfd8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    bfdc:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    bfe0:	68fb      	ldr	r3, [r7, #12]
    bfe2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    bfe4:	68fb      	ldr	r3, [r7, #12]
    bfe6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    bfea:	697b      	ldr	r3, [r7, #20]
    bfec:	8a1b      	ldrh	r3, [r3, #16]
    bfee:	f3c3 050d 	ubfx	r5, r3, #0, #14
    bff2:	697b      	ldr	r3, [r7, #20]
    bff4:	8a1b      	ldrh	r3, [r3, #16]
    bff6:	4618      	mov	r0, r3
    bff8:	4b50      	ldr	r3, [pc, #320]	; (c13c <_usb_d_dev_ep_enable+0x208>)
    bffa:	4798      	blx	r3
    bffc:	4603      	mov	r3, r0
    bffe:	071b      	lsls	r3, r3, #28
    c000:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c004:	432b      	orrs	r3, r5
    c006:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c008:	7efb      	ldrb	r3, [r7, #27]
    c00a:	2200      	movs	r2, #0
    c00c:	2100      	movs	r1, #0
    c00e:	4618      	mov	r0, r3
    c010:	4b4b      	ldr	r3, [pc, #300]	; (c140 <_usb_d_dev_ep_enable+0x20c>)
    c012:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c014:	7efb      	ldrb	r3, [r7, #27]
    c016:	2200      	movs	r2, #0
    c018:	2101      	movs	r1, #1
    c01a:	4618      	mov	r0, r3
    c01c:	4b49      	ldr	r3, [pc, #292]	; (c144 <_usb_d_dev_ep_enable+0x210>)
    c01e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c020:	7efb      	ldrb	r3, [r7, #27]
    c022:	2100      	movs	r1, #0
    c024:	4618      	mov	r0, r3
    c026:	4b48      	ldr	r3, [pc, #288]	; (c148 <_usb_d_dev_ep_enable+0x214>)
    c028:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c02a:	7efb      	ldrb	r3, [r7, #27]
    c02c:	2101      	movs	r1, #1
    c02e:	4618      	mov	r0, r3
    c030:	4b45      	ldr	r3, [pc, #276]	; (c148 <_usb_d_dev_ep_enable+0x214>)
    c032:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c034:	6978      	ldr	r0, [r7, #20]
    c036:	4b45      	ldr	r3, [pc, #276]	; (c14c <_usb_d_dev_ep_enable+0x218>)
    c038:	4798      	blx	r3
    c03a:	e06f      	b.n	c11c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c03c:	7ebb      	ldrb	r3, [r7, #26]
    c03e:	2b00      	cmp	r3, #0
    c040:	d038      	beq.n	c0b4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c042:	7cfb      	ldrb	r3, [r7, #19]
    c044:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c048:	2b00      	cmp	r3, #0
    c04a:	d002      	beq.n	c052 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c04c:	f06f 0313 	mvn.w	r3, #19
    c050:	e065      	b.n	c11e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c052:	697b      	ldr	r3, [r7, #20]
    c054:	7cdb      	ldrb	r3, [r3, #19]
    c056:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c05a:	b2db      	uxtb	r3, r3
    c05c:	011b      	lsls	r3, r3, #4
    c05e:	b2db      	uxtb	r3, r3
    c060:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c064:	b2da      	uxtb	r2, r3
    c066:	7cfb      	ldrb	r3, [r7, #19]
    c068:	4313      	orrs	r3, r2
    c06a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c06c:	7cfa      	ldrb	r2, [r7, #19]
    c06e:	7efb      	ldrb	r3, [r7, #27]
    c070:	4619      	mov	r1, r3
    c072:	69f8      	ldr	r0, [r7, #28]
    c074:	4b2f      	ldr	r3, [pc, #188]	; (c134 <_usb_d_dev_ep_enable+0x200>)
    c076:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c078:	68fb      	ldr	r3, [r7, #12]
    c07a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c07e:	697b      	ldr	r3, [r7, #20]
    c080:	8a1b      	ldrh	r3, [r3, #16]
    c082:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c086:	697b      	ldr	r3, [r7, #20]
    c088:	8a1b      	ldrh	r3, [r3, #16]
    c08a:	4618      	mov	r0, r3
    c08c:	4b2b      	ldr	r3, [pc, #172]	; (c13c <_usb_d_dev_ep_enable+0x208>)
    c08e:	4798      	blx	r3
    c090:	4603      	mov	r3, r0
    c092:	071b      	lsls	r3, r3, #28
    c094:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c098:	432b      	orrs	r3, r5
    c09a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c09c:	7efb      	ldrb	r3, [r7, #27]
    c09e:	2200      	movs	r2, #0
    c0a0:	2101      	movs	r1, #1
    c0a2:	4618      	mov	r0, r3
    c0a4:	4b27      	ldr	r3, [pc, #156]	; (c144 <_usb_d_dev_ep_enable+0x210>)
    c0a6:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c0a8:	7efb      	ldrb	r3, [r7, #27]
    c0aa:	2101      	movs	r1, #1
    c0ac:	4618      	mov	r0, r3
    c0ae:	4b26      	ldr	r3, [pc, #152]	; (c148 <_usb_d_dev_ep_enable+0x214>)
    c0b0:	4798      	blx	r3
    c0b2:	e033      	b.n	c11c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c0b4:	7cfb      	ldrb	r3, [r7, #19]
    c0b6:	f003 0307 	and.w	r3, r3, #7
    c0ba:	2b00      	cmp	r3, #0
    c0bc:	d002      	beq.n	c0c4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c0be:	f06f 0313 	mvn.w	r3, #19
    c0c2:	e02c      	b.n	c11e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c0c4:	697b      	ldr	r3, [r7, #20]
    c0c6:	7cdb      	ldrb	r3, [r3, #19]
    c0c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c0cc:	b2db      	uxtb	r3, r3
    c0ce:	461a      	mov	r2, r3
    c0d0:	7cfb      	ldrb	r3, [r7, #19]
    c0d2:	4313      	orrs	r3, r2
    c0d4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c0d6:	7cfa      	ldrb	r2, [r7, #19]
    c0d8:	7efb      	ldrb	r3, [r7, #27]
    c0da:	4619      	mov	r1, r3
    c0dc:	69f8      	ldr	r0, [r7, #28]
    c0de:	4b15      	ldr	r3, [pc, #84]	; (c134 <_usb_d_dev_ep_enable+0x200>)
    c0e0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c0e2:	697b      	ldr	r3, [r7, #20]
    c0e4:	8a1b      	ldrh	r3, [r3, #16]
    c0e6:	039b      	lsls	r3, r3, #14
    c0e8:	4c13      	ldr	r4, [pc, #76]	; (c138 <_usb_d_dev_ep_enable+0x204>)
    c0ea:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c0ec:	697b      	ldr	r3, [r7, #20]
    c0ee:	8a1b      	ldrh	r3, [r3, #16]
    c0f0:	4618      	mov	r0, r3
    c0f2:	4b12      	ldr	r3, [pc, #72]	; (c13c <_usb_d_dev_ep_enable+0x208>)
    c0f4:	4798      	blx	r3
    c0f6:	4603      	mov	r3, r0
    c0f8:	071b      	lsls	r3, r3, #28
    c0fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c0fe:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c102:	68fb      	ldr	r3, [r7, #12]
    c104:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c106:	7efb      	ldrb	r3, [r7, #27]
    c108:	2200      	movs	r2, #0
    c10a:	2100      	movs	r1, #0
    c10c:	4618      	mov	r0, r3
    c10e:	4b0c      	ldr	r3, [pc, #48]	; (c140 <_usb_d_dev_ep_enable+0x20c>)
    c110:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c112:	7efb      	ldrb	r3, [r7, #27]
    c114:	2100      	movs	r1, #0
    c116:	4618      	mov	r0, r3
    c118:	4b0b      	ldr	r3, [pc, #44]	; (c148 <_usb_d_dev_ep_enable+0x214>)
    c11a:	4798      	blx	r3
	}

	return USB_OK;
    c11c:	2300      	movs	r3, #0
}
    c11e:	4618      	mov	r0, r3
    c120:	3720      	adds	r7, #32
    c122:	46bd      	mov	sp, r7
    c124:	bdb0      	pop	{r4, r5, r7, pc}
    c126:	bf00      	nop
    c128:	0000ad4d 	.word	0x0000ad4d
    c12c:	0000a3d3 	.word	0x0000a3d3
    c130:	20002038 	.word	0x20002038
    c134:	0000a3a9 	.word	0x0000a3a9
    c138:	0fffc000 	.word	0x0fffc000
    c13c:	0000ace9 	.word	0x0000ace9
    c140:	0000ac91 	.word	0x0000ac91
    c144:	0000ac39 	.word	0x0000ac39
    c148:	0000ac01 	.word	0x0000ac01
    c14c:	0000bca5 	.word	0x0000bca5

0000c150 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c150:	b580      	push	{r7, lr}
    c152:	b084      	sub	sp, #16
    c154:	af00      	add	r7, sp, #0
    c156:	6078      	str	r0, [r7, #4]
    c158:	460b      	mov	r3, r1
    c15a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c15c:	687b      	ldr	r3, [r7, #4]
    c15e:	7c9b      	ldrb	r3, [r3, #18]
    c160:	f003 030f 	and.w	r3, r3, #15
    c164:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    c166:	78fa      	ldrb	r2, [r7, #3]
    c168:	7bfb      	ldrb	r3, [r7, #15]
    c16a:	4611      	mov	r1, r2
    c16c:	4618      	mov	r0, r3
    c16e:	4b03      	ldr	r3, [pc, #12]	; (c17c <_usb_d_dev_ep_stall_get+0x2c>)
    c170:	4798      	blx	r3
    c172:	4603      	mov	r3, r0
}
    c174:	4618      	mov	r0, r3
    c176:	3710      	adds	r7, #16
    c178:	46bd      	mov	sp, r7
    c17a:	bd80      	pop	{r7, pc}
    c17c:	0000a841 	.word	0x0000a841

0000c180 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    c180:	b580      	push	{r7, lr}
    c182:	b084      	sub	sp, #16
    c184:	af00      	add	r7, sp, #0
    c186:	6078      	str	r0, [r7, #4]
    c188:	460b      	mov	r3, r1
    c18a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c18c:	687b      	ldr	r3, [r7, #4]
    c18e:	7c9b      	ldrb	r3, [r3, #18]
    c190:	f003 030f 	and.w	r3, r3, #15
    c194:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c196:	78f9      	ldrb	r1, [r7, #3]
    c198:	7bfb      	ldrb	r3, [r7, #15]
    c19a:	2201      	movs	r2, #1
    c19c:	4618      	mov	r0, r3
    c19e:	4b0a      	ldr	r3, [pc, #40]	; (c1c8 <_usb_d_dev_ep_stall_set+0x48>)
    c1a0:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c1a2:	78fb      	ldrb	r3, [r7, #3]
    c1a4:	2220      	movs	r2, #32
    c1a6:	409a      	lsls	r2, r3
    c1a8:	7bfb      	ldrb	r3, [r7, #15]
    c1aa:	4611      	mov	r1, r2
    c1ac:	4618      	mov	r0, r3
    c1ae:	4b07      	ldr	r3, [pc, #28]	; (c1cc <_usb_d_dev_ep_stall_set+0x4c>)
    c1b0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c1b2:	687a      	ldr	r2, [r7, #4]
    c1b4:	7cd3      	ldrb	r3, [r2, #19]
    c1b6:	f043 0308 	orr.w	r3, r3, #8
    c1ba:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c1bc:	2300      	movs	r3, #0
}
    c1be:	4618      	mov	r0, r3
    c1c0:	3710      	adds	r7, #16
    c1c2:	46bd      	mov	sp, r7
    c1c4:	bd80      	pop	{r7, pc}
    c1c6:	bf00      	nop
    c1c8:	0000a7e9 	.word	0x0000a7e9
    c1cc:	0000a769 	.word	0x0000a769

0000c1d0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c1d0:	b580      	push	{r7, lr}
    c1d2:	b084      	sub	sp, #16
    c1d4:	af00      	add	r7, sp, #0
    c1d6:	6078      	str	r0, [r7, #4]
    c1d8:	460b      	mov	r3, r1
    c1da:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	7c9b      	ldrb	r3, [r3, #18]
    c1e0:	f003 030f 	and.w	r3, r3, #15
    c1e4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c1e6:	78fa      	ldrb	r2, [r7, #3]
    c1e8:	7bfb      	ldrb	r3, [r7, #15]
    c1ea:	4611      	mov	r1, r2
    c1ec:	4618      	mov	r0, r3
    c1ee:	4b28      	ldr	r3, [pc, #160]	; (c290 <_usb_d_dev_ep_stall_clr+0xc0>)
    c1f0:	4798      	blx	r3
    c1f2:	4603      	mov	r3, r0
    c1f4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c1f6:	7bbb      	ldrb	r3, [r7, #14]
    c1f8:	f083 0301 	eor.w	r3, r3, #1
    c1fc:	b2db      	uxtb	r3, r3
    c1fe:	2b00      	cmp	r3, #0
    c200:	d001      	beq.n	c206 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c202:	2300      	movs	r3, #0
    c204:	e040      	b.n	c288 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c206:	78f9      	ldrb	r1, [r7, #3]
    c208:	7bfb      	ldrb	r3, [r7, #15]
    c20a:	2200      	movs	r2, #0
    c20c:	4618      	mov	r0, r3
    c20e:	4b21      	ldr	r3, [pc, #132]	; (c294 <_usb_d_dev_ep_stall_clr+0xc4>)
    c210:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c212:	78fb      	ldrb	r3, [r7, #3]
    c214:	2220      	movs	r2, #32
    c216:	409a      	lsls	r2, r3
    c218:	7bfb      	ldrb	r3, [r7, #15]
    c21a:	4611      	mov	r1, r2
    c21c:	4618      	mov	r0, r3
    c21e:	4b1e      	ldr	r3, [pc, #120]	; (c298 <_usb_d_dev_ep_stall_clr+0xc8>)
    c220:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c222:	78fa      	ldrb	r2, [r7, #3]
    c224:	7bfb      	ldrb	r3, [r7, #15]
    c226:	4611      	mov	r1, r2
    c228:	4618      	mov	r0, r3
    c22a:	4b1c      	ldr	r3, [pc, #112]	; (c29c <_usb_d_dev_ep_stall_clr+0xcc>)
    c22c:	4798      	blx	r3
    c22e:	4603      	mov	r3, r0
    c230:	2b00      	cmp	r3, #0
    c232:	d00b      	beq.n	c24c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c234:	78fa      	ldrb	r2, [r7, #3]
    c236:	7bfb      	ldrb	r3, [r7, #15]
    c238:	4611      	mov	r1, r2
    c23a:	4618      	mov	r0, r3
    c23c:	4b18      	ldr	r3, [pc, #96]	; (c2a0 <_usb_d_dev_ep_stall_clr+0xd0>)
    c23e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c240:	78f9      	ldrb	r1, [r7, #3]
    c242:	7bfb      	ldrb	r3, [r7, #15]
    c244:	2200      	movs	r2, #0
    c246:	4618      	mov	r0, r3
    c248:	4b16      	ldr	r3, [pc, #88]	; (c2a4 <_usb_d_dev_ep_stall_clr+0xd4>)
    c24a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c24c:	687b      	ldr	r3, [r7, #4]
    c24e:	7cdb      	ldrb	r3, [r3, #19]
    c250:	f003 0307 	and.w	r3, r3, #7
    c254:	b2db      	uxtb	r3, r3
    c256:	2b01      	cmp	r3, #1
    c258:	d110      	bne.n	c27c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c25a:	7bfb      	ldrb	r3, [r7, #15]
    c25c:	4619      	mov	r1, r3
    c25e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c262:	4b11      	ldr	r3, [pc, #68]	; (c2a8 <_usb_d_dev_ep_stall_clr+0xd8>)
    c264:	4798      	blx	r3
    c266:	4603      	mov	r3, r0
    c268:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c26c:	2b00      	cmp	r3, #0
    c26e:	d10a      	bne.n	c286 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c270:	687a      	ldr	r2, [r7, #4]
    c272:	7cd3      	ldrb	r3, [r2, #19]
    c274:	f36f 03c3 	bfc	r3, #3, #1
    c278:	74d3      	strb	r3, [r2, #19]
    c27a:	e004      	b.n	c286 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    c27c:	687a      	ldr	r2, [r7, #4]
    c27e:	7cd3      	ldrb	r3, [r2, #19]
    c280:	f36f 03c3 	bfc	r3, #3, #1
    c284:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    c286:	2300      	movs	r3, #0
}
    c288:	4618      	mov	r0, r3
    c28a:	3710      	adds	r7, #16
    c28c:	46bd      	mov	sp, r7
    c28e:	bd80      	pop	{r7, pc}
    c290:	0000a841 	.word	0x0000a841
    c294:	0000a7e9 	.word	0x0000a7e9
    c298:	0000a791 	.word	0x0000a791
    c29c:	0000a885 	.word	0x0000a885
    c2a0:	0000a8c9 	.word	0x0000a8c9
    c2a4:	0000a9b5 	.word	0x0000a9b5
    c2a8:	0000a271 	.word	0x0000a271

0000c2ac <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    c2ac:	b580      	push	{r7, lr}
    c2ae:	b086      	sub	sp, #24
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	4603      	mov	r3, r0
    c2b4:	460a      	mov	r2, r1
    c2b6:	71fb      	strb	r3, [r7, #7]
    c2b8:	4613      	mov	r3, r2
    c2ba:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    c2bc:	79fb      	ldrb	r3, [r7, #7]
    c2be:	f003 030f 	and.w	r3, r3, #15
    c2c2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c2c4:	79fb      	ldrb	r3, [r7, #7]
    c2c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	bf14      	ite	ne
    c2ce:	2301      	movne	r3, #1
    c2d0:	2300      	moveq	r3, #0
    c2d2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c2d4:	7cba      	ldrb	r2, [r7, #18]
    c2d6:	7cfb      	ldrb	r3, [r7, #19]
    c2d8:	4611      	mov	r1, r2
    c2da:	4618      	mov	r0, r3
    c2dc:	4b13      	ldr	r3, [pc, #76]	; (c32c <_usb_d_dev_ep_stall+0x80>)
    c2de:	4798      	blx	r3
    c2e0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c2e2:	7cfb      	ldrb	r3, [r7, #19]
    c2e4:	2b04      	cmp	r3, #4
    c2e6:	d902      	bls.n	c2ee <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    c2e8:	f06f 0311 	mvn.w	r3, #17
    c2ec:	e01a      	b.n	c324 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    c2ee:	79bb      	ldrb	r3, [r7, #6]
    c2f0:	2b01      	cmp	r3, #1
    c2f2:	d106      	bne.n	c302 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    c2f4:	7cbb      	ldrb	r3, [r7, #18]
    c2f6:	4619      	mov	r1, r3
    c2f8:	68f8      	ldr	r0, [r7, #12]
    c2fa:	4b0d      	ldr	r3, [pc, #52]	; (c330 <_usb_d_dev_ep_stall+0x84>)
    c2fc:	4798      	blx	r3
    c2fe:	6178      	str	r0, [r7, #20]
    c300:	e00f      	b.n	c322 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    c302:	79bb      	ldrb	r3, [r7, #6]
    c304:	2b00      	cmp	r3, #0
    c306:	d106      	bne.n	c316 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c308:	7cbb      	ldrb	r3, [r7, #18]
    c30a:	4619      	mov	r1, r3
    c30c:	68f8      	ldr	r0, [r7, #12]
    c30e:	4b09      	ldr	r3, [pc, #36]	; (c334 <_usb_d_dev_ep_stall+0x88>)
    c310:	4798      	blx	r3
    c312:	6178      	str	r0, [r7, #20]
    c314:	e005      	b.n	c322 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    c316:	7cbb      	ldrb	r3, [r7, #18]
    c318:	4619      	mov	r1, r3
    c31a:	68f8      	ldr	r0, [r7, #12]
    c31c:	4b06      	ldr	r3, [pc, #24]	; (c338 <_usb_d_dev_ep_stall+0x8c>)
    c31e:	4798      	blx	r3
    c320:	6178      	str	r0, [r7, #20]
	}
	return rc;
    c322:	697b      	ldr	r3, [r7, #20]
}
    c324:	4618      	mov	r0, r3
    c326:	3718      	adds	r7, #24
    c328:	46bd      	mov	sp, r7
    c32a:	bd80      	pop	{r7, pc}
    c32c:	0000ad4d 	.word	0x0000ad4d
    c330:	0000c181 	.word	0x0000c181
    c334:	0000c1d1 	.word	0x0000c1d1
    c338:	0000c151 	.word	0x0000c151

0000c33c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c33c:	b580      	push	{r7, lr}
    c33e:	b082      	sub	sp, #8
    c340:	af00      	add	r7, sp, #0
    c342:	6078      	str	r0, [r7, #4]
    c344:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c346:	687b      	ldr	r3, [r7, #4]
    c348:	7c9b      	ldrb	r3, [r3, #18]
    c34a:	2bff      	cmp	r3, #255	; 0xff
    c34c:	d014      	beq.n	c378 <_usb_d_dev_trans_done+0x3c>
    c34e:	687b      	ldr	r3, [r7, #4]
    c350:	7cdb      	ldrb	r3, [r3, #19]
    c352:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c356:	b2db      	uxtb	r3, r3
    c358:	2b00      	cmp	r3, #0
    c35a:	d00d      	beq.n	c378 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c35c:	687a      	ldr	r2, [r7, #4]
    c35e:	7cd3      	ldrb	r3, [r2, #19]
    c360:	f36f 1386 	bfc	r3, #6, #1
    c364:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c366:	4b06      	ldr	r3, [pc, #24]	; (c380 <_usb_d_dev_trans_done+0x44>)
    c368:	691b      	ldr	r3, [r3, #16]
    c36a:	687a      	ldr	r2, [r7, #4]
    c36c:	7c90      	ldrb	r0, [r2, #18]
    c36e:	687a      	ldr	r2, [r7, #4]
    c370:	6892      	ldr	r2, [r2, #8]
    c372:	6839      	ldr	r1, [r7, #0]
    c374:	4798      	blx	r3
    c376:	e000      	b.n	c37a <_usb_d_dev_trans_done+0x3e>
		return;
    c378:	bf00      	nop
}
    c37a:	3708      	adds	r7, #8
    c37c:	46bd      	mov	sp, r7
    c37e:	bd80      	pop	{r7, pc}
    c380:	20001f70 	.word	0x20001f70

0000c384 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c384:	b580      	push	{r7, lr}
    c386:	b086      	sub	sp, #24
    c388:	af00      	add	r7, sp, #0
    c38a:	60f8      	str	r0, [r7, #12]
    c38c:	460b      	mov	r3, r1
    c38e:	607a      	str	r2, [r7, #4]
    c390:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c392:	68fb      	ldr	r3, [r7, #12]
    c394:	7c9b      	ldrb	r3, [r3, #18]
    c396:	f003 030f 	and.w	r3, r3, #15
    c39a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c39c:	4b1f      	ldr	r3, [pc, #124]	; (c41c <_usb_d_dev_trans_stop+0x98>)
    c39e:	881b      	ldrh	r3, [r3, #0]
    c3a0:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c3a2:	68fb      	ldr	r3, [r7, #12]
    c3a4:	7c9b      	ldrb	r3, [r3, #18]
    c3a6:	2bff      	cmp	r3, #255	; 0xff
    c3a8:	d033      	beq.n	c412 <_usb_d_dev_trans_stop+0x8e>
    c3aa:	68fb      	ldr	r3, [r7, #12]
    c3ac:	7cdb      	ldrb	r3, [r3, #19]
    c3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c3b2:	b2db      	uxtb	r3, r3
    c3b4:	2b00      	cmp	r3, #0
    c3b6:	d02c      	beq.n	c412 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c3b8:	7afb      	ldrb	r3, [r7, #11]
    c3ba:	2b00      	cmp	r3, #0
    c3bc:	d006      	beq.n	c3cc <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c3be:	7dfb      	ldrb	r3, [r7, #23]
    c3c0:	2200      	movs	r2, #0
    c3c2:	2101      	movs	r1, #1
    c3c4:	4618      	mov	r0, r3
    c3c6:	4b16      	ldr	r3, [pc, #88]	; (c420 <_usb_d_dev_trans_stop+0x9c>)
    c3c8:	4798      	blx	r3
    c3ca:	e005      	b.n	c3d8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c3cc:	7dfb      	ldrb	r3, [r7, #23]
    c3ce:	2200      	movs	r2, #0
    c3d0:	2100      	movs	r1, #0
    c3d2:	4618      	mov	r0, r3
    c3d4:	4b13      	ldr	r3, [pc, #76]	; (c424 <_usb_d_dev_trans_stop+0xa0>)
    c3d6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c3d8:	7afb      	ldrb	r3, [r7, #11]
    c3da:	f107 0218 	add.w	r2, r7, #24
    c3de:	4413      	add	r3, r2
    c3e0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c3e4:	461a      	mov	r2, r3
    c3e6:	7dfb      	ldrb	r3, [r7, #23]
    c3e8:	4611      	mov	r1, r2
    c3ea:	4618      	mov	r0, r3
    c3ec:	4b0e      	ldr	r3, [pc, #56]	; (c428 <_usb_d_dev_trans_stop+0xa4>)
    c3ee:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    c3f0:	7afb      	ldrb	r3, [r7, #11]
    c3f2:	f107 0218 	add.w	r2, r7, #24
    c3f6:	4413      	add	r3, r2
    c3f8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c3fc:	461a      	mov	r2, r3
    c3fe:	7dfb      	ldrb	r3, [r7, #23]
    c400:	4611      	mov	r1, r2
    c402:	4618      	mov	r0, r3
    c404:	4b09      	ldr	r3, [pc, #36]	; (c42c <_usb_d_dev_trans_stop+0xa8>)
    c406:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    c408:	6879      	ldr	r1, [r7, #4]
    c40a:	68f8      	ldr	r0, [r7, #12]
    c40c:	4b08      	ldr	r3, [pc, #32]	; (c430 <_usb_d_dev_trans_stop+0xac>)
    c40e:	4798      	blx	r3
    c410:	e000      	b.n	c414 <_usb_d_dev_trans_stop+0x90>
		return;
    c412:	bf00      	nop
}
    c414:	3718      	adds	r7, #24
    c416:	46bd      	mov	sp, r7
    c418:	bd80      	pop	{r7, pc}
    c41a:	bf00      	nop
    c41c:	00011cd8 	.word	0x00011cd8
    c420:	0000ac39 	.word	0x0000ac39
    c424:	0000ac91 	.word	0x0000ac91
    c428:	0000a741 	.word	0x0000a741
    c42c:	0000a791 	.word	0x0000a791
    c430:	0000c33d 	.word	0x0000c33d

0000c434 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c434:	b580      	push	{r7, lr}
    c436:	b086      	sub	sp, #24
    c438:	af00      	add	r7, sp, #0
    c43a:	4603      	mov	r3, r0
    c43c:	6039      	str	r1, [r7, #0]
    c43e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    c440:	79fb      	ldrb	r3, [r7, #7]
    c442:	f003 030f 	and.w	r3, r3, #15
    c446:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c448:	7dfb      	ldrb	r3, [r7, #23]
    c44a:	015b      	lsls	r3, r3, #5
    c44c:	4a1e      	ldr	r2, [pc, #120]	; (c4c8 <_usb_d_dev_ep_read_req+0x94>)
    c44e:	4413      	add	r3, r2
    c450:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    c452:	693b      	ldr	r3, [r7, #16]
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c458:	693b      	ldr	r3, [r7, #16]
    c45a:	685b      	ldr	r3, [r3, #4]
    c45c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c460:	b29b      	uxth	r3, r3
    c462:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c464:	7dfb      	ldrb	r3, [r7, #23]
    c466:	2b04      	cmp	r3, #4
    c468:	d802      	bhi.n	c470 <_usb_d_dev_ep_read_req+0x3c>
    c46a:	683b      	ldr	r3, [r7, #0]
    c46c:	2b00      	cmp	r3, #0
    c46e:	d102      	bne.n	c476 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    c470:	f06f 0311 	mvn.w	r3, #17
    c474:	e023      	b.n	c4be <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c476:	7dfb      	ldrb	r3, [r7, #23]
    c478:	4618      	mov	r0, r3
    c47a:	4b14      	ldr	r3, [pc, #80]	; (c4cc <_usb_d_dev_ep_read_req+0x98>)
    c47c:	4798      	blx	r3
    c47e:	4603      	mov	r3, r0
    c480:	f083 0301 	eor.w	r3, r3, #1
    c484:	b2db      	uxtb	r3, r3
    c486:	2b00      	cmp	r3, #0
    c488:	d002      	beq.n	c490 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    c48a:	f06f 0312 	mvn.w	r3, #18
    c48e:	e016      	b.n	c4be <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    c490:	7dfb      	ldrb	r3, [r7, #23]
    c492:	4618      	mov	r0, r3
    c494:	4b0e      	ldr	r3, [pc, #56]	; (c4d0 <_usb_d_dev_ep_read_req+0x9c>)
    c496:	4798      	blx	r3
    c498:	4603      	mov	r3, r0
    c49a:	f083 0301 	eor.w	r3, r3, #1
    c49e:	b2db      	uxtb	r3, r3
    c4a0:	2b00      	cmp	r3, #0
    c4a2:	d001      	beq.n	c4a8 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    c4a4:	2300      	movs	r3, #0
    c4a6:	e00a      	b.n	c4be <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    c4a8:	68fb      	ldr	r3, [r7, #12]
    c4aa:	2208      	movs	r2, #8
    c4ac:	4619      	mov	r1, r3
    c4ae:	6838      	ldr	r0, [r7, #0]
    c4b0:	4b08      	ldr	r3, [pc, #32]	; (c4d4 <_usb_d_dev_ep_read_req+0xa0>)
    c4b2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    c4b4:	7dfb      	ldrb	r3, [r7, #23]
    c4b6:	4618      	mov	r0, r3
    c4b8:	4b07      	ldr	r3, [pc, #28]	; (c4d8 <_usb_d_dev_ep_read_req+0xa4>)
    c4ba:	4798      	blx	r3

	return bytes;
    c4bc:	897b      	ldrh	r3, [r7, #10]
}
    c4be:	4618      	mov	r0, r3
    c4c0:	3718      	adds	r7, #24
    c4c2:	46bd      	mov	sp, r7
    c4c4:	bd80      	pop	{r7, pc}
    c4c6:	bf00      	nop
    c4c8:	20002038 	.word	0x20002038
    c4cc:	0000a7b9 	.word	0x0000a7b9
    c4d0:	0000a965 	.word	0x0000a965
    c4d4:	00010811 	.word	0x00010811
    c4d8:	0000a995 	.word	0x0000a995

0000c4dc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c4dc:	b580      	push	{r7, lr}
    c4de:	b086      	sub	sp, #24
    c4e0:	af00      	add	r7, sp, #0
    c4e2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c4e4:	687b      	ldr	r3, [r7, #4]
    c4e6:	7a1b      	ldrb	r3, [r3, #8]
    c4e8:	f003 030f 	and.w	r3, r3, #15
    c4ec:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c4ee:	687b      	ldr	r3, [r7, #4]
    c4f0:	7a1b      	ldrb	r3, [r3, #8]
    c4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	bf14      	ite	ne
    c4fa:	2301      	movne	r3, #1
    c4fc:	2300      	moveq	r3, #0
    c4fe:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c500:	7d7a      	ldrb	r2, [r7, #21]
    c502:	7dbb      	ldrb	r3, [r7, #22]
    c504:	4611      	mov	r1, r2
    c506:	4618      	mov	r0, r3
    c508:	4b5f      	ldr	r3, [pc, #380]	; (c688 <_usb_d_dev_ep_trans+0x1ac>)
    c50a:	4798      	blx	r3
    c50c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c50e:	693b      	ldr	r3, [r7, #16]
    c510:	8a1b      	ldrh	r3, [r3, #16]
    c512:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c516:	4293      	cmp	r3, r2
    c518:	d004      	beq.n	c524 <_usb_d_dev_ep_trans+0x48>
    c51a:	693b      	ldr	r3, [r7, #16]
    c51c:	8a1b      	ldrh	r3, [r3, #16]
    c51e:	3b01      	subs	r3, #1
    c520:	b29b      	uxth	r3, r3
    c522:	e001      	b.n	c528 <_usb_d_dev_ep_trans+0x4c>
    c524:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c528:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    c52a:	687b      	ldr	r3, [r7, #4]
    c52c:	685a      	ldr	r2, [r3, #4]
    c52e:	89fb      	ldrh	r3, [r7, #14]
    c530:	4013      	ands	r3, r2
    c532:	2b00      	cmp	r3, #0
    c534:	bf14      	ite	ne
    c536:	2301      	movne	r3, #1
    c538:	2300      	moveq	r3, #0
    c53a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    c53c:	2300      	movs	r3, #0
    c53e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c540:	7dbb      	ldrb	r3, [r7, #22]
    c542:	2b04      	cmp	r3, #4
    c544:	d902      	bls.n	c54c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    c546:	f06f 0311 	mvn.w	r3, #17
    c54a:	e098      	b.n	c67e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c54c:	687b      	ldr	r3, [r7, #4]
    c54e:	681b      	ldr	r3, [r3, #0]
    c550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    c554:	d31a      	bcc.n	c58c <_usb_d_dev_ep_trans+0xb0>
    c556:	687b      	ldr	r3, [r7, #4]
    c558:	681b      	ldr	r3, [r3, #0]
    c55a:	461a      	mov	r2, r3
    c55c:	687b      	ldr	r3, [r7, #4]
    c55e:	685b      	ldr	r3, [r3, #4]
    c560:	4413      	add	r3, r2
    c562:	4a4a      	ldr	r2, [pc, #296]	; (c68c <_usb_d_dev_ep_trans+0x1b0>)
    c564:	4293      	cmp	r3, r2
    c566:	d811      	bhi.n	c58c <_usb_d_dev_ep_trans+0xb0>
    c568:	687b      	ldr	r3, [r7, #4]
    c56a:	681b      	ldr	r3, [r3, #0]
    c56c:	f003 0303 	and.w	r3, r3, #3
    c570:	2b00      	cmp	r3, #0
    c572:	d10b      	bne.n	c58c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    c574:	7d7b      	ldrb	r3, [r7, #21]
    c576:	f083 0301 	eor.w	r3, r3, #1
    c57a:	b2db      	uxtb	r3, r3
    c57c:	2b00      	cmp	r3, #0
    c57e:	d00e      	beq.n	c59e <_usb_d_dev_ep_trans+0xc2>
    c580:	687b      	ldr	r3, [r7, #4]
    c582:	685b      	ldr	r3, [r3, #4]
    c584:	693a      	ldr	r2, [r7, #16]
    c586:	8a12      	ldrh	r2, [r2, #16]
    c588:	4293      	cmp	r3, r2
    c58a:	d208      	bcs.n	c59e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    c58c:	693b      	ldr	r3, [r7, #16]
    c58e:	68db      	ldr	r3, [r3, #12]
    c590:	2b00      	cmp	r3, #0
    c592:	d102      	bne.n	c59a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    c594:	f06f 0312 	mvn.w	r3, #18
    c598:	e071      	b.n	c67e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    c59a:	2301      	movs	r3, #1
    c59c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    c59e:	7d7b      	ldrb	r3, [r7, #21]
    c5a0:	f083 0301 	eor.w	r3, r3, #1
    c5a4:	b2db      	uxtb	r3, r3
    c5a6:	2b00      	cmp	r3, #0
    c5a8:	d009      	beq.n	c5be <_usb_d_dev_ep_trans+0xe2>
    c5aa:	7b7b      	ldrb	r3, [r7, #13]
    c5ac:	2b00      	cmp	r3, #0
    c5ae:	d006      	beq.n	c5be <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    c5b0:	693b      	ldr	r3, [r7, #16]
    c5b2:	68db      	ldr	r3, [r3, #12]
    c5b4:	2b00      	cmp	r3, #0
    c5b6:	d102      	bne.n	c5be <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    c5b8:	f06f 0311 	mvn.w	r3, #17
    c5bc:	e05f      	b.n	c67e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c5be:	693b      	ldr	r3, [r7, #16]
    c5c0:	7cdb      	ldrb	r3, [r3, #19]
    c5c2:	f003 0308 	and.w	r3, r3, #8
    c5c6:	b2db      	uxtb	r3, r3
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d001      	beq.n	c5d0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    c5cc:	2302      	movs	r3, #2
    c5ce:	e056      	b.n	c67e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c5d0:	f107 0308 	add.w	r3, r7, #8
    c5d4:	4618      	mov	r0, r3
    c5d6:	4b2e      	ldr	r3, [pc, #184]	; (c690 <_usb_d_dev_ep_trans+0x1b4>)
    c5d8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c5da:	693b      	ldr	r3, [r7, #16]
    c5dc:	7cdb      	ldrb	r3, [r3, #19]
    c5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c5e2:	b2db      	uxtb	r3, r3
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d006      	beq.n	c5f6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    c5e8:	f107 0308 	add.w	r3, r7, #8
    c5ec:	4618      	mov	r0, r3
    c5ee:	4b29      	ldr	r3, [pc, #164]	; (c694 <_usb_d_dev_ep_trans+0x1b8>)
    c5f0:	4798      	blx	r3
		return USB_BUSY;
    c5f2:	2301      	movs	r3, #1
    c5f4:	e043      	b.n	c67e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    c5f6:	693a      	ldr	r2, [r7, #16]
    c5f8:	7cd3      	ldrb	r3, [r2, #19]
    c5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c5fe:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    c600:	f107 0308 	add.w	r3, r7, #8
    c604:	4618      	mov	r0, r3
    c606:	4b23      	ldr	r3, [pc, #140]	; (c694 <_usb_d_dev_ep_trans+0x1b8>)
    c608:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	681a      	ldr	r2, [r3, #0]
    c60e:	693b      	ldr	r3, [r7, #16]
    c610:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	685a      	ldr	r2, [r3, #4]
    c616:	693b      	ldr	r3, [r7, #16]
    c618:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    c61a:	693b      	ldr	r3, [r7, #16]
    c61c:	2200      	movs	r2, #0
    c61e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    c620:	693a      	ldr	r2, [r7, #16]
    c622:	7cd3      	ldrb	r3, [r2, #19]
    c624:	7d79      	ldrb	r1, [r7, #21]
    c626:	f361 13c7 	bfi	r3, r1, #7, #1
    c62a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    c62c:	693a      	ldr	r2, [r7, #16]
    c62e:	7cd3      	ldrb	r3, [r2, #19]
    c630:	7df9      	ldrb	r1, [r7, #23]
    c632:	f361 1345 	bfi	r3, r1, #5, #1
    c636:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c638:	687b      	ldr	r3, [r7, #4]
    c63a:	7a5b      	ldrb	r3, [r3, #9]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d007      	beq.n	c650 <_usb_d_dev_ep_trans+0x174>
    c640:	7b7b      	ldrb	r3, [r7, #13]
    c642:	f083 0301 	eor.w	r3, r3, #1
    c646:	b2db      	uxtb	r3, r3
    c648:	2b00      	cmp	r3, #0
    c64a:	d001      	beq.n	c650 <_usb_d_dev_ep_trans+0x174>
    c64c:	2301      	movs	r3, #1
    c64e:	e000      	b.n	c652 <_usb_d_dev_ep_trans+0x176>
    c650:	2300      	movs	r3, #0
    c652:	b2db      	uxtb	r3, r3
    c654:	f003 0301 	and.w	r3, r3, #1
    c658:	b2d9      	uxtb	r1, r3
    c65a:	693a      	ldr	r2, [r7, #16]
    c65c:	7cd3      	ldrb	r3, [r2, #19]
    c65e:	f361 1304 	bfi	r3, r1, #4, #1
    c662:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c664:	7d7b      	ldrb	r3, [r7, #21]
    c666:	2b00      	cmp	r3, #0
    c668:	d004      	beq.n	c674 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c66a:	2100      	movs	r1, #0
    c66c:	6938      	ldr	r0, [r7, #16]
    c66e:	4b0a      	ldr	r3, [pc, #40]	; (c698 <_usb_d_dev_ep_trans+0x1bc>)
    c670:	4798      	blx	r3
    c672:	e003      	b.n	c67c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c674:	2100      	movs	r1, #0
    c676:	6938      	ldr	r0, [r7, #16]
    c678:	4b08      	ldr	r3, [pc, #32]	; (c69c <_usb_d_dev_ep_trans+0x1c0>)
    c67a:	4798      	blx	r3
	}

	return ERR_NONE;
    c67c:	2300      	movs	r3, #0
}
    c67e:	4618      	mov	r0, r3
    c680:	3718      	adds	r7, #24
    c682:	46bd      	mov	sp, r7
    c684:	bd80      	pop	{r7, pc}
    c686:	bf00      	nop
    c688:	0000ad4d 	.word	0x0000ad4d
    c68c:	20041fff 	.word	0x20041fff
    c690:	000036b9 	.word	0x000036b9
    c694:	000036df 	.word	0x000036df
    c698:	0000b015 	.word	0x0000b015
    c69c:	0000b22d 	.word	0x0000b22d

0000c6a0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    c6a0:	b580      	push	{r7, lr}
    c6a2:	b084      	sub	sp, #16
    c6a4:	af00      	add	r7, sp, #0
    c6a6:	4603      	mov	r3, r0
    c6a8:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    c6aa:	79fb      	ldrb	r3, [r7, #7]
    c6ac:	f003 030f 	and.w	r3, r3, #15
    c6b0:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    c6b2:	79fb      	ldrb	r3, [r7, #7]
    c6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c6b8:	2b00      	cmp	r3, #0
    c6ba:	bf14      	ite	ne
    c6bc:	2301      	movne	r3, #1
    c6be:	2300      	moveq	r3, #0
    c6c0:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c6c2:	7bba      	ldrb	r2, [r7, #14]
    c6c4:	7bfb      	ldrb	r3, [r7, #15]
    c6c6:	4611      	mov	r1, r2
    c6c8:	4618      	mov	r0, r3
    c6ca:	4b08      	ldr	r3, [pc, #32]	; (c6ec <_usb_d_dev_ep_abort+0x4c>)
    c6cc:	4798      	blx	r3
    c6ce:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    c6d0:	7bfb      	ldrb	r3, [r7, #15]
    c6d2:	2b04      	cmp	r3, #4
    c6d4:	d806      	bhi.n	c6e4 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    c6d6:	7bbb      	ldrb	r3, [r7, #14]
    c6d8:	2202      	movs	r2, #2
    c6da:	4619      	mov	r1, r3
    c6dc:	68b8      	ldr	r0, [r7, #8]
    c6de:	4b04      	ldr	r3, [pc, #16]	; (c6f0 <_usb_d_dev_ep_abort+0x50>)
    c6e0:	4798      	blx	r3
    c6e2:	e000      	b.n	c6e6 <_usb_d_dev_ep_abort+0x46>
		return;
    c6e4:	bf00      	nop
}
    c6e6:	3710      	adds	r7, #16
    c6e8:	46bd      	mov	sp, r7
    c6ea:	bd80      	pop	{r7, pc}
    c6ec:	0000ad4d 	.word	0x0000ad4d
    c6f0:	0000c385 	.word	0x0000c385

0000c6f4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c6f4:	b480      	push	{r7}
    c6f6:	b085      	sub	sp, #20
    c6f8:	af00      	add	r7, sp, #0
    c6fa:	4603      	mov	r3, r0
    c6fc:	6039      	str	r1, [r7, #0]
    c6fe:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c700:	683b      	ldr	r3, [r7, #0]
    c702:	2b00      	cmp	r3, #0
    c704:	d001      	beq.n	c70a <_usb_d_dev_register_callback+0x16>
    c706:	683b      	ldr	r3, [r7, #0]
    c708:	e000      	b.n	c70c <_usb_d_dev_register_callback+0x18>
    c70a:	4b0a      	ldr	r3, [pc, #40]	; (c734 <_usb_d_dev_register_callback+0x40>)
    c70c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c70e:	79fb      	ldrb	r3, [r7, #7]
    c710:	2b01      	cmp	r3, #1
    c712:	d103      	bne.n	c71c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c714:	4a08      	ldr	r2, [pc, #32]	; (c738 <_usb_d_dev_register_callback+0x44>)
    c716:	68fb      	ldr	r3, [r7, #12]
    c718:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c71a:	e005      	b.n	c728 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c71c:	79fb      	ldrb	r3, [r7, #7]
    c71e:	2b00      	cmp	r3, #0
    c720:	d102      	bne.n	c728 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c722:	4a05      	ldr	r2, [pc, #20]	; (c738 <_usb_d_dev_register_callback+0x44>)
    c724:	68fb      	ldr	r3, [r7, #12]
    c726:	6013      	str	r3, [r2, #0]
}
    c728:	bf00      	nop
    c72a:	3714      	adds	r7, #20
    c72c:	46bd      	mov	sp, r7
    c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c732:	4770      	bx	lr
    c734:	0000a5d5 	.word	0x0000a5d5
    c738:	20001f70 	.word	0x20001f70

0000c73c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    c73c:	b480      	push	{r7}
    c73e:	b085      	sub	sp, #20
    c740:	af00      	add	r7, sp, #0
    c742:	4603      	mov	r3, r0
    c744:	6039      	str	r1, [r7, #0]
    c746:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c748:	683b      	ldr	r3, [r7, #0]
    c74a:	2b00      	cmp	r3, #0
    c74c:	d001      	beq.n	c752 <_usb_d_dev_register_ep_callback+0x16>
    c74e:	683b      	ldr	r3, [r7, #0]
    c750:	e000      	b.n	c754 <_usb_d_dev_register_ep_callback+0x18>
    c752:	4b0e      	ldr	r3, [pc, #56]	; (c78c <_usb_d_dev_register_ep_callback+0x50>)
    c754:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c756:	79fb      	ldrb	r3, [r7, #7]
    c758:	2b00      	cmp	r3, #0
    c75a:	d103      	bne.n	c764 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c75c:	4a0c      	ldr	r2, [pc, #48]	; (c790 <_usb_d_dev_register_ep_callback+0x54>)
    c75e:	68fb      	ldr	r3, [r7, #12]
    c760:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    c762:	e00c      	b.n	c77e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c764:	79fb      	ldrb	r3, [r7, #7]
    c766:	2b01      	cmp	r3, #1
    c768:	d103      	bne.n	c772 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c76a:	4a09      	ldr	r2, [pc, #36]	; (c790 <_usb_d_dev_register_ep_callback+0x54>)
    c76c:	68fb      	ldr	r3, [r7, #12]
    c76e:	60d3      	str	r3, [r2, #12]
}
    c770:	e005      	b.n	c77e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c772:	79fb      	ldrb	r3, [r7, #7]
    c774:	2b02      	cmp	r3, #2
    c776:	d102      	bne.n	c77e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c778:	4a05      	ldr	r2, [pc, #20]	; (c790 <_usb_d_dev_register_ep_callback+0x54>)
    c77a:	68fb      	ldr	r3, [r7, #12]
    c77c:	6113      	str	r3, [r2, #16]
}
    c77e:	bf00      	nop
    c780:	3714      	adds	r7, #20
    c782:	46bd      	mov	sp, r7
    c784:	f85d 7b04 	ldr.w	r7, [sp], #4
    c788:	4770      	bx	lr
    c78a:	bf00      	nop
    c78c:	0000a5d5 	.word	0x0000a5d5
    c790:	20001f70 	.word	0x20001f70

0000c794 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    c794:	b580      	push	{r7, lr}
    c796:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c798:	4b01      	ldr	r3, [pc, #4]	; (c7a0 <USB_0_Handler+0xc>)
    c79a:	4798      	blx	r3
}
    c79c:	bf00      	nop
    c79e:	bd80      	pop	{r7, pc}
    c7a0:	0000ba05 	.word	0x0000ba05

0000c7a4 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    c7a4:	b580      	push	{r7, lr}
    c7a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c7a8:	4b01      	ldr	r3, [pc, #4]	; (c7b0 <USB_1_Handler+0xc>)
    c7aa:	4798      	blx	r3
}
    c7ac:	bf00      	nop
    c7ae:	bd80      	pop	{r7, pc}
    c7b0:	0000ba05 	.word	0x0000ba05

0000c7b4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    c7b4:	b580      	push	{r7, lr}
    c7b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c7b8:	4b01      	ldr	r3, [pc, #4]	; (c7c0 <USB_2_Handler+0xc>)
    c7ba:	4798      	blx	r3
}
    c7bc:	bf00      	nop
    c7be:	bd80      	pop	{r7, pc}
    c7c0:	0000ba05 	.word	0x0000ba05

0000c7c4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    c7c4:	b580      	push	{r7, lr}
    c7c6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c7c8:	4b01      	ldr	r3, [pc, #4]	; (c7d0 <USB_3_Handler+0xc>)
    c7ca:	4798      	blx	r3
}
    c7cc:	bf00      	nop
    c7ce:	bd80      	pop	{r7, pc}
    c7d0:	0000ba05 	.word	0x0000ba05

0000c7d4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    c7d4:	b480      	push	{r7}
    c7d6:	b083      	sub	sp, #12
    c7d8:	af00      	add	r7, sp, #0
    c7da:	6078      	str	r0, [r7, #4]
    c7dc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    c7de:	bf00      	nop
    c7e0:	687b      	ldr	r3, [r7, #4]
    c7e2:	689a      	ldr	r2, [r3, #8]
    c7e4:	683b      	ldr	r3, [r7, #0]
    c7e6:	4013      	ands	r3, r2
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	d1f9      	bne.n	c7e0 <hri_wdt_wait_for_sync+0xc>
	};
}
    c7ec:	bf00      	nop
    c7ee:	370c      	adds	r7, #12
    c7f0:	46bd      	mov	sp, r7
    c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7f6:	4770      	bx	lr

0000c7f8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c7f8:	b580      	push	{r7, lr}
    c7fa:	b084      	sub	sp, #16
    c7fc:	af00      	add	r7, sp, #0
    c7fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c800:	210e      	movs	r1, #14
    c802:	6878      	ldr	r0, [r7, #4]
    c804:	4b0a      	ldr	r3, [pc, #40]	; (c830 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    c806:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c808:	687b      	ldr	r3, [r7, #4]
    c80a:	781b      	ldrb	r3, [r3, #0]
    c80c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    c80e:	7bfb      	ldrb	r3, [r7, #15]
    c810:	085b      	lsrs	r3, r3, #1
    c812:	b2db      	uxtb	r3, r3
    c814:	f003 0301 	and.w	r3, r3, #1
    c818:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c81a:	7bfb      	ldrb	r3, [r7, #15]
    c81c:	2b00      	cmp	r3, #0
    c81e:	bf14      	ite	ne
    c820:	2301      	movne	r3, #1
    c822:	2300      	moveq	r3, #0
    c824:	b2db      	uxtb	r3, r3
}
    c826:	4618      	mov	r0, r3
    c828:	3710      	adds	r7, #16
    c82a:	46bd      	mov	sp, r7
    c82c:	bd80      	pop	{r7, pc}
    c82e:	bf00      	nop
    c830:	0000c7d5 	.word	0x0000c7d5

0000c834 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    c834:	b580      	push	{r7, lr}
    c836:	b082      	sub	sp, #8
    c838:	af00      	add	r7, sp, #0
    c83a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    c83c:	687b      	ldr	r3, [r7, #4]
    c83e:	781b      	ldrb	r3, [r3, #0]
    c840:	b2db      	uxtb	r3, r3
    c842:	f023 0304 	bic.w	r3, r3, #4
    c846:	b2da      	uxtb	r2, r3
    c848:	687b      	ldr	r3, [r7, #4]
    c84a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c84c:	210e      	movs	r1, #14
    c84e:	6878      	ldr	r0, [r7, #4]
    c850:	4b02      	ldr	r3, [pc, #8]	; (c85c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    c852:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    c854:	bf00      	nop
    c856:	3708      	adds	r7, #8
    c858:	46bd      	mov	sp, r7
    c85a:	bd80      	pop	{r7, pc}
    c85c:	0000c7d5 	.word	0x0000c7d5

0000c860 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    c860:	b580      	push	{r7, lr}
    c862:	b084      	sub	sp, #16
    c864:	af00      	add	r7, sp, #0
    c866:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    c868:	210e      	movs	r1, #14
    c86a:	6878      	ldr	r0, [r7, #4]
    c86c:	4b08      	ldr	r3, [pc, #32]	; (c890 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    c86e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    c870:	687b      	ldr	r3, [r7, #4]
    c872:	781b      	ldrb	r3, [r3, #0]
    c874:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    c876:	7bfb      	ldrb	r3, [r7, #15]
    c878:	09db      	lsrs	r3, r3, #7
    c87a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c87c:	7bfb      	ldrb	r3, [r7, #15]
    c87e:	2b00      	cmp	r3, #0
    c880:	bf14      	ite	ne
    c882:	2301      	movne	r3, #1
    c884:	2300      	moveq	r3, #0
    c886:	b2db      	uxtb	r3, r3
}
    c888:	4618      	mov	r0, r3
    c88a:	3710      	adds	r7, #16
    c88c:	46bd      	mov	sp, r7
    c88e:	bd80      	pop	{r7, pc}
    c890:	0000c7d5 	.word	0x0000c7d5

0000c894 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    c894:	b480      	push	{r7}
    c896:	b085      	sub	sp, #20
    c898:	af00      	add	r7, sp, #0
    c89a:	6078      	str	r0, [r7, #4]
    c89c:	460b      	mov	r3, r1
    c89e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    c8a0:	687b      	ldr	r3, [r7, #4]
    c8a2:	785b      	ldrb	r3, [r3, #1]
    c8a4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    c8a6:	7bfb      	ldrb	r3, [r7, #15]
    c8a8:	f023 030f 	bic.w	r3, r3, #15
    c8ac:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    c8ae:	78fb      	ldrb	r3, [r7, #3]
    c8b0:	f003 030f 	and.w	r3, r3, #15
    c8b4:	b2da      	uxtb	r2, r3
    c8b6:	7bfb      	ldrb	r3, [r7, #15]
    c8b8:	4313      	orrs	r3, r2
    c8ba:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	7bfa      	ldrb	r2, [r7, #15]
    c8c0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    c8c2:	bf00      	nop
    c8c4:	3714      	adds	r7, #20
    c8c6:	46bd      	mov	sp, r7
    c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8cc:	4770      	bx	lr
	...

0000c8d0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    c8d0:	b580      	push	{r7, lr}
    c8d2:	b082      	sub	sp, #8
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    c8d8:	687b      	ldr	r3, [r7, #4]
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d005      	beq.n	c8ea <_wdt_init+0x1a>
    c8de:	687b      	ldr	r3, [r7, #4]
    c8e0:	681b      	ldr	r3, [r3, #0]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d001      	beq.n	c8ea <_wdt_init+0x1a>
    c8e6:	2301      	movs	r3, #1
    c8e8:	e000      	b.n	c8ec <_wdt_init+0x1c>
    c8ea:	2300      	movs	r3, #0
    c8ec:	f003 0301 	and.w	r3, r3, #1
    c8f0:	b2db      	uxtb	r3, r3
    c8f2:	2250      	movs	r2, #80	; 0x50
    c8f4:	4913      	ldr	r1, [pc, #76]	; (c944 <_wdt_init+0x74>)
    c8f6:	4618      	mov	r0, r3
    c8f8:	4b13      	ldr	r3, [pc, #76]	; (c948 <_wdt_init+0x78>)
    c8fa:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    c8fc:	687b      	ldr	r3, [r7, #4]
    c8fe:	681b      	ldr	r3, [r3, #0]
    c900:	4618      	mov	r0, r3
    c902:	4b12      	ldr	r3, [pc, #72]	; (c94c <_wdt_init+0x7c>)
    c904:	4798      	blx	r3
    c906:	4603      	mov	r3, r0
    c908:	2b00      	cmp	r3, #0
    c90a:	d107      	bne.n	c91c <_wdt_init+0x4c>
    c90c:	687b      	ldr	r3, [r7, #4]
    c90e:	681b      	ldr	r3, [r3, #0]
    c910:	4618      	mov	r0, r3
    c912:	4b0f      	ldr	r3, [pc, #60]	; (c950 <_wdt_init+0x80>)
    c914:	4798      	blx	r3
    c916:	4603      	mov	r3, r0
    c918:	2b00      	cmp	r3, #0
    c91a:	d002      	beq.n	c922 <_wdt_init+0x52>
		return ERR_DENIED;
    c91c:	f06f 0310 	mvn.w	r3, #16
    c920:	e00b      	b.n	c93a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    c922:	687b      	ldr	r3, [r7, #4]
    c924:	681b      	ldr	r3, [r3, #0]
    c926:	4618      	mov	r0, r3
    c928:	4b0a      	ldr	r3, [pc, #40]	; (c954 <_wdt_init+0x84>)
    c92a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    c92c:	687b      	ldr	r3, [r7, #4]
    c92e:	681b      	ldr	r3, [r3, #0]
    c930:	210b      	movs	r1, #11
    c932:	4618      	mov	r0, r3
    c934:	4b08      	ldr	r3, [pc, #32]	; (c958 <_wdt_init+0x88>)
    c936:	4798      	blx	r3
	}

	return ERR_NONE;
    c938:	2300      	movs	r3, #0
}
    c93a:	4618      	mov	r0, r3
    c93c:	3708      	adds	r7, #8
    c93e:	46bd      	mov	sp, r7
    c940:	bd80      	pop	{r7, pc}
    c942:	bf00      	nop
    c944:	00011cdc 	.word	0x00011cdc
    c948:	00005545 	.word	0x00005545
    c94c:	0000c861 	.word	0x0000c861
    c950:	0000c7f9 	.word	0x0000c7f9
    c954:	0000c835 	.word	0x0000c835
    c958:	0000c895 	.word	0x0000c895

0000c95c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b08c      	sub	sp, #48	; 0x30
    c960:	af00      	add	r7, sp, #0
    c962:	6078      	str	r0, [r7, #4]
    c964:	460b      	mov	r3, r1
    c966:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c96c:	687b      	ldr	r3, [r7, #4]
    c96e:	681b      	ldr	r3, [r3, #0]
    c970:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c972:	f107 030c 	add.w	r3, r7, #12
    c976:	2200      	movs	r2, #0
    c978:	601a      	str	r2, [r3, #0]
    c97a:	605a      	str	r2, [r3, #4]
    c97c:	609a      	str	r2, [r3, #8]
    c97e:	60da      	str	r2, [r3, #12]
    c980:	611a      	str	r2, [r3, #16]
    c982:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c986:	7b1b      	ldrb	r3, [r3, #12]
    c988:	2b00      	cmp	r3, #0
    c98a:	d001      	beq.n	c990 <n25q256a_xip_confirm+0x34>
    c98c:	2206      	movs	r2, #6
    c98e:	e000      	b.n	c992 <n25q256a_xip_confirm+0x36>
    c990:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c992:	7b3b      	ldrb	r3, [r7, #12]
    c994:	f362 0302 	bfi	r3, r2, #0, #3
    c998:	733b      	strb	r3, [r7, #12]
    c99a:	7b3b      	ldrb	r3, [r7, #12]
    c99c:	f043 0310 	orr.w	r3, r3, #16
    c9a0:	733b      	strb	r3, [r7, #12]
    c9a2:	7b3b      	ldrb	r3, [r7, #12]
    c9a4:	f043 0320 	orr.w	r3, r3, #32
    c9a8:	733b      	strb	r3, [r7, #12]
    c9aa:	7b3b      	ldrb	r3, [r7, #12]
    c9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c9b0:	733b      	strb	r3, [r7, #12]
    c9b2:	7b3b      	ldrb	r3, [r7, #12]
    c9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c9b8:	733b      	strb	r3, [r7, #12]
    c9ba:	7b7b      	ldrb	r3, [r7, #13]
    c9bc:	f043 0303 	orr.w	r3, r3, #3
    c9c0:	737b      	strb	r3, [r7, #13]
    c9c2:	7b7b      	ldrb	r3, [r7, #13]
    c9c4:	2201      	movs	r2, #1
    c9c6:	f362 1305 	bfi	r3, r2, #4, #2
    c9ca:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9ce:	7b1b      	ldrb	r3, [r3, #12]
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d001      	beq.n	c9d8 <n25q256a_xip_confirm+0x7c>
    c9d4:	2208      	movs	r2, #8
    c9d6:	e000      	b.n	c9da <n25q256a_xip_confirm+0x7e>
    c9d8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c9da:	7bbb      	ldrb	r3, [r7, #14]
    c9dc:	f362 0304 	bfi	r3, r2, #0, #5
    c9e0:	73bb      	strb	r3, [r7, #14]
    c9e2:	230b      	movs	r3, #11
    c9e4:	743b      	strb	r3, [r7, #16]
    c9e6:	78fb      	ldrb	r3, [r7, #3]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d001      	beq.n	c9f0 <n25q256a_xip_confirm+0x94>
    c9ec:	2300      	movs	r3, #0
    c9ee:	e000      	b.n	c9f2 <n25q256a_xip_confirm+0x96>
    c9f0:	23ff      	movs	r3, #255	; 0xff
    c9f2:	747b      	strb	r3, [r7, #17]
    c9f4:	2301      	movs	r3, #1
    c9f6:	61bb      	str	r3, [r7, #24]
    c9f8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    c9fc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    c9fe:	f107 030c 	add.w	r3, r7, #12
    ca02:	4619      	mov	r1, r3
    ca04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ca06:	4b07      	ldr	r3, [pc, #28]	; (ca24 <n25q256a_xip_confirm+0xc8>)
    ca08:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    ca0a:	78fb      	ldrb	r3, [r7, #3]
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d001      	beq.n	ca14 <n25q256a_xip_confirm+0xb8>
    ca10:	2202      	movs	r2, #2
    ca12:	e000      	b.n	ca16 <n25q256a_xip_confirm+0xba>
    ca14:	2201      	movs	r2, #1
    ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca18:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ca1a:	2300      	movs	r3, #0
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	3730      	adds	r7, #48	; 0x30
    ca20:	46bd      	mov	sp, r7
    ca22:	bd80      	pop	{r7, pc}
    ca24:	000041a5 	.word	0x000041a5

0000ca28 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    ca28:	b580      	push	{r7, lr}
    ca2a:	b08c      	sub	sp, #48	; 0x30
    ca2c:	af00      	add	r7, sp, #0
    ca2e:	6078      	str	r0, [r7, #4]
    ca30:	460b      	mov	r3, r1
    ca32:	70fb      	strb	r3, [r7, #3]
    ca34:	4613      	mov	r3, r2
    ca36:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    ca38:	2300      	movs	r3, #0
    ca3a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    ca3c:	687b      	ldr	r3, [r7, #4]
    ca3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    ca40:	687b      	ldr	r3, [r7, #4]
    ca42:	681b      	ldr	r3, [r3, #0]
    ca44:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    ca46:	f107 030c 	add.w	r3, r7, #12
    ca4a:	2200      	movs	r2, #0
    ca4c:	601a      	str	r2, [r3, #0]
    ca4e:	605a      	str	r2, [r3, #4]
    ca50:	609a      	str	r2, [r3, #8]
    ca52:	60da      	str	r2, [r3, #12]
    ca54:	611a      	str	r2, [r3, #16]
    ca56:	615a      	str	r2, [r3, #20]
    ca58:	78fb      	ldrb	r3, [r7, #3]
    ca5a:	f003 0307 	and.w	r3, r3, #7
    ca5e:	b2da      	uxtb	r2, r3
    ca60:	7b3b      	ldrb	r3, [r7, #12]
    ca62:	f362 0302 	bfi	r3, r2, #0, #3
    ca66:	733b      	strb	r3, [r7, #12]
    ca68:	7b3b      	ldrb	r3, [r7, #12]
    ca6a:	f043 0310 	orr.w	r3, r3, #16
    ca6e:	733b      	strb	r3, [r7, #12]
    ca70:	7b3b      	ldrb	r3, [r7, #12]
    ca72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ca76:	733b      	strb	r3, [r7, #12]
    ca78:	78bb      	ldrb	r3, [r7, #2]
    ca7a:	743b      	strb	r3, [r7, #16]
    ca7c:	2301      	movs	r3, #1
    ca7e:	61bb      	str	r3, [r7, #24]
    ca80:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ca84:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca88:	7b5b      	ldrb	r3, [r3, #13]
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d003      	beq.n	ca96 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    ca8e:	2100      	movs	r1, #0
    ca90:	6878      	ldr	r0, [r7, #4]
    ca92:	4b0a      	ldr	r3, [pc, #40]	; (cabc <n25q256a_read_reg+0x94>)
    ca94:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ca96:	f107 030c 	add.w	r3, r7, #12
    ca9a:	4619      	mov	r1, r3
    ca9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ca9e:	4b08      	ldr	r3, [pc, #32]	; (cac0 <n25q256a_read_reg+0x98>)
    caa0:	4798      	blx	r3
	if (n25q->xip_mode) {
    caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    caa4:	7b5b      	ldrb	r3, [r3, #13]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d003      	beq.n	cab2 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    caaa:	2101      	movs	r1, #1
    caac:	6878      	ldr	r0, [r7, #4]
    caae:	4b03      	ldr	r3, [pc, #12]	; (cabc <n25q256a_read_reg+0x94>)
    cab0:	4798      	blx	r3
	}
	return status;
    cab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cab4:	4618      	mov	r0, r3
    cab6:	3730      	adds	r7, #48	; 0x30
    cab8:	46bd      	mov	sp, r7
    caba:	bd80      	pop	{r7, pc}
    cabc:	0000c95d 	.word	0x0000c95d
    cac0:	000041a5 	.word	0x000041a5

0000cac4 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    cac4:	b580      	push	{r7, lr}
    cac6:	b08c      	sub	sp, #48	; 0x30
    cac8:	af00      	add	r7, sp, #0
    caca:	60f8      	str	r0, [r7, #12]
    cacc:	607b      	str	r3, [r7, #4]
    cace:	460b      	mov	r3, r1
    cad0:	72fb      	strb	r3, [r7, #11]
    cad2:	4613      	mov	r3, r2
    cad4:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cad6:	68fb      	ldr	r3, [r7, #12]
    cad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cada:	68fb      	ldr	r3, [r7, #12]
    cadc:	681b      	ldr	r3, [r3, #0]
    cade:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    cae0:	f107 0310 	add.w	r3, r7, #16
    cae4:	2200      	movs	r2, #0
    cae6:	601a      	str	r2, [r3, #0]
    cae8:	605a      	str	r2, [r3, #4]
    caea:	609a      	str	r2, [r3, #8]
    caec:	60da      	str	r2, [r3, #12]
    caee:	611a      	str	r2, [r3, #16]
    caf0:	615a      	str	r2, [r3, #20]
    caf2:	7afb      	ldrb	r3, [r7, #11]
    caf4:	f003 0307 	and.w	r3, r3, #7
    caf8:	b2da      	uxtb	r2, r3
    cafa:	7c3b      	ldrb	r3, [r7, #16]
    cafc:	f362 0302 	bfi	r3, r2, #0, #3
    cb00:	743b      	strb	r3, [r7, #16]
    cb02:	7c3b      	ldrb	r3, [r7, #16]
    cb04:	f043 0310 	orr.w	r3, r3, #16
    cb08:	743b      	strb	r3, [r7, #16]
    cb0a:	7c3b      	ldrb	r3, [r7, #16]
    cb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cb10:	743b      	strb	r3, [r7, #16]
    cb12:	7c7b      	ldrb	r3, [r7, #17]
    cb14:	2202      	movs	r2, #2
    cb16:	f362 1305 	bfi	r3, r2, #4, #2
    cb1a:	747b      	strb	r3, [r7, #17]
    cb1c:	7abb      	ldrb	r3, [r7, #10]
    cb1e:	753b      	strb	r3, [r7, #20]
    cb20:	2301      	movs	r3, #1
    cb22:	61fb      	str	r3, [r7, #28]
    cb24:	1d3b      	adds	r3, r7, #4
    cb26:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb2a:	7b5b      	ldrb	r3, [r3, #13]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d003      	beq.n	cb38 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    cb30:	2100      	movs	r1, #0
    cb32:	68f8      	ldr	r0, [r7, #12]
    cb34:	4b09      	ldr	r3, [pc, #36]	; (cb5c <n25q256a_write_reg+0x98>)
    cb36:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    cb38:	f107 0310 	add.w	r3, r7, #16
    cb3c:	4619      	mov	r1, r3
    cb3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cb40:	4b07      	ldr	r3, [pc, #28]	; (cb60 <n25q256a_write_reg+0x9c>)
    cb42:	4798      	blx	r3
	if (n25q->xip_mode) {
    cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb46:	7b5b      	ldrb	r3, [r3, #13]
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d003      	beq.n	cb54 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    cb4c:	2101      	movs	r1, #1
    cb4e:	68f8      	ldr	r0, [r7, #12]
    cb50:	4b02      	ldr	r3, [pc, #8]	; (cb5c <n25q256a_write_reg+0x98>)
    cb52:	4798      	blx	r3
	}
}
    cb54:	bf00      	nop
    cb56:	3730      	adds	r7, #48	; 0x30
    cb58:	46bd      	mov	sp, r7
    cb5a:	bd80      	pop	{r7, pc}
    cb5c:	0000c95d 	.word	0x0000c95d
    cb60:	000041a5 	.word	0x000041a5

0000cb64 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    cb64:	b580      	push	{r7, lr}
    cb66:	b090      	sub	sp, #64	; 0x40
    cb68:	af00      	add	r7, sp, #0
    cb6a:	6078      	str	r0, [r7, #4]
    cb6c:	460b      	mov	r3, r1
    cb6e:	70fb      	strb	r3, [r7, #3]
    cb70:	4613      	mov	r3, r2
    cb72:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cb74:	687b      	ldr	r3, [r7, #4]
    cb76:	681b      	ldr	r3, [r3, #0]
    cb78:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    cb7a:	78bb      	ldrb	r3, [r7, #2]
    cb7c:	2b00      	cmp	r3, #0
    cb7e:	d001      	beq.n	cb84 <n25q256a_write_enable+0x20>
    cb80:	2306      	movs	r3, #6
    cb82:	e000      	b.n	cb86 <n25q256a_write_enable+0x22>
    cb84:	2304      	movs	r3, #4
    cb86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    cb8a:	f107 0320 	add.w	r3, r7, #32
    cb8e:	2200      	movs	r2, #0
    cb90:	601a      	str	r2, [r3, #0]
    cb92:	605a      	str	r2, [r3, #4]
    cb94:	609a      	str	r2, [r3, #8]
    cb96:	60da      	str	r2, [r3, #12]
    cb98:	611a      	str	r2, [r3, #16]
    cb9a:	615a      	str	r2, [r3, #20]
    cb9c:	78fb      	ldrb	r3, [r7, #3]
    cb9e:	f003 0307 	and.w	r3, r3, #7
    cba2:	b2da      	uxtb	r2, r3
    cba4:	f897 3020 	ldrb.w	r3, [r7, #32]
    cba8:	f362 0302 	bfi	r3, r2, #0, #3
    cbac:	f887 3020 	strb.w	r3, [r7, #32]
    cbb0:	f897 3020 	ldrb.w	r3, [r7, #32]
    cbb4:	f043 0310 	orr.w	r3, r3, #16
    cbb8:	f887 3020 	strb.w	r3, [r7, #32]
    cbbc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    cbc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    cbc4:	f107 0308 	add.w	r3, r7, #8
    cbc8:	2200      	movs	r2, #0
    cbca:	601a      	str	r2, [r3, #0]
    cbcc:	605a      	str	r2, [r3, #4]
    cbce:	609a      	str	r2, [r3, #8]
    cbd0:	60da      	str	r2, [r3, #12]
    cbd2:	611a      	str	r2, [r3, #16]
    cbd4:	615a      	str	r2, [r3, #20]
    cbd6:	78fb      	ldrb	r3, [r7, #3]
    cbd8:	f003 0307 	and.w	r3, r3, #7
    cbdc:	b2da      	uxtb	r2, r3
    cbde:	7a3b      	ldrb	r3, [r7, #8]
    cbe0:	f362 0302 	bfi	r3, r2, #0, #3
    cbe4:	723b      	strb	r3, [r7, #8]
    cbe6:	7a3b      	ldrb	r3, [r7, #8]
    cbe8:	f043 0310 	orr.w	r3, r3, #16
    cbec:	723b      	strb	r3, [r7, #8]
    cbee:	7a3b      	ldrb	r3, [r7, #8]
    cbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cbf4:	723b      	strb	r3, [r7, #8]
    cbf6:	2305      	movs	r3, #5
    cbf8:	733b      	strb	r3, [r7, #12]
    cbfa:	2301      	movs	r3, #1
    cbfc:	617b      	str	r3, [r7, #20]
    cbfe:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    cc02:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    cc04:	f107 0320 	add.w	r3, r7, #32
    cc08:	4619      	mov	r1, r3
    cc0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cc0c:	4b08      	ldr	r3, [pc, #32]	; (cc30 <n25q256a_write_enable+0xcc>)
    cc0e:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    cc10:	f107 0308 	add.w	r3, r7, #8
    cc14:	4619      	mov	r1, r3
    cc16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cc18:	4b05      	ldr	r3, [pc, #20]	; (cc30 <n25q256a_write_enable+0xcc>)
    cc1a:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    cc1c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    cc20:	f003 0302 	and.w	r3, r3, #2
    cc24:	2b00      	cmp	r3, #0
    cc26:	d0ed      	beq.n	cc04 <n25q256a_write_enable+0xa0>
}
    cc28:	bf00      	nop
    cc2a:	3740      	adds	r7, #64	; 0x40
    cc2c:	46bd      	mov	sp, r7
    cc2e:	bd80      	pop	{r7, pc}
    cc30:	000041a5 	.word	0x000041a5

0000cc34 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    cc34:	b590      	push	{r4, r7, lr}
    cc36:	b087      	sub	sp, #28
    cc38:	af00      	add	r7, sp, #0
    cc3a:	6078      	str	r0, [r7, #4]
    cc3c:	460b      	mov	r3, r1
    cc3e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    cc44:	68fb      	ldr	r3, [r7, #12]
    cc46:	7b1b      	ldrb	r3, [r3, #12]
    cc48:	2b00      	cmp	r3, #0
    cc4a:	d001      	beq.n	cc50 <n25q256a_switch_mode+0x1c>
    cc4c:	2306      	movs	r3, #6
    cc4e:	e000      	b.n	cc52 <n25q256a_switch_mode+0x1e>
    cc50:	2300      	movs	r3, #0
    cc52:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    cc54:	7afb      	ldrb	r3, [r7, #11]
    cc56:	2265      	movs	r2, #101	; 0x65
    cc58:	4619      	mov	r1, r3
    cc5a:	6878      	ldr	r0, [r7, #4]
    cc5c:	4b25      	ldr	r3, [pc, #148]	; (ccf4 <n25q256a_switch_mode+0xc0>)
    cc5e:	4798      	blx	r3
    cc60:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    cc62:	2300      	movs	r3, #0
    cc64:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    cc66:	68fb      	ldr	r3, [r7, #12]
    cc68:	7b1b      	ldrb	r3, [r3, #12]
    cc6a:	78fa      	ldrb	r2, [r7, #3]
    cc6c:	429a      	cmp	r2, r3
    cc6e:	d03d      	beq.n	ccec <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    cc70:	78fb      	ldrb	r3, [r7, #3]
    cc72:	2b00      	cmp	r3, #0
    cc74:	d00b      	beq.n	cc8e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    cc76:	697b      	ldr	r3, [r7, #20]
    cc78:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	d011      	beq.n	cca4 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    cc80:	697b      	ldr	r3, [r7, #20]
    cc82:	f003 031f 	and.w	r3, r3, #31
    cc86:	617b      	str	r3, [r7, #20]
			modify = 1;
    cc88:	2301      	movs	r3, #1
    cc8a:	74fb      	strb	r3, [r7, #19]
    cc8c:	e00a      	b.n	cca4 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    cc8e:	697b      	ldr	r3, [r7, #20]
    cc90:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cc94:	2b00      	cmp	r3, #0
    cc96:	d105      	bne.n	cca4 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    cc98:	697b      	ldr	r3, [r7, #20]
    cc9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    cc9e:	617b      	str	r3, [r7, #20]
			modify = 1;
    cca0:	2301      	movs	r3, #1
    cca2:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    cca4:	7cfb      	ldrb	r3, [r7, #19]
    cca6:	2b00      	cmp	r3, #0
    cca8:	d021      	beq.n	ccee <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ccaa:	68fb      	ldr	r3, [r7, #12]
    ccac:	78fa      	ldrb	r2, [r7, #3]
    ccae:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ccb0:	7afb      	ldrb	r3, [r7, #11]
    ccb2:	2201      	movs	r2, #1
    ccb4:	4619      	mov	r1, r3
    ccb6:	6878      	ldr	r0, [r7, #4]
    ccb8:	4b0f      	ldr	r3, [pc, #60]	; (ccf8 <n25q256a_switch_mode+0xc4>)
    ccba:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ccbc:	7af9      	ldrb	r1, [r7, #11]
    ccbe:	697b      	ldr	r3, [r7, #20]
    ccc0:	2261      	movs	r2, #97	; 0x61
    ccc2:	6878      	ldr	r0, [r7, #4]
    ccc4:	4c0d      	ldr	r4, [pc, #52]	; (ccfc <n25q256a_switch_mode+0xc8>)
    ccc6:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ccc8:	78fb      	ldrb	r3, [r7, #3]
    ccca:	2b00      	cmp	r3, #0
    cccc:	d001      	beq.n	ccd2 <n25q256a_switch_mode+0x9e>
    ccce:	2306      	movs	r3, #6
    ccd0:	e000      	b.n	ccd4 <n25q256a_switch_mode+0xa0>
    ccd2:	2300      	movs	r3, #0
    ccd4:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ccd6:	7afb      	ldrb	r3, [r7, #11]
    ccd8:	2265      	movs	r2, #101	; 0x65
    ccda:	4619      	mov	r1, r3
    ccdc:	6878      	ldr	r0, [r7, #4]
    ccde:	4b05      	ldr	r3, [pc, #20]	; (ccf4 <n25q256a_switch_mode+0xc0>)
    cce0:	4798      	blx	r3
    cce2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    cce4:	68fb      	ldr	r3, [r7, #12]
    cce6:	78fa      	ldrb	r2, [r7, #3]
    cce8:	731a      	strb	r2, [r3, #12]
    ccea:	e000      	b.n	ccee <n25q256a_switch_mode+0xba>
		return;
    ccec:	bf00      	nop
	}
}
    ccee:	371c      	adds	r7, #28
    ccf0:	46bd      	mov	sp, r7
    ccf2:	bd90      	pop	{r4, r7, pc}
    ccf4:	0000ca29 	.word	0x0000ca29
    ccf8:	0000cb65 	.word	0x0000cb65
    ccfc:	0000cac5 	.word	0x0000cac5

0000cd00 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    cd00:	b580      	push	{r7, lr}
    cd02:	b086      	sub	sp, #24
    cd04:	af00      	add	r7, sp, #0
    cd06:	60f8      	str	r0, [r7, #12]
    cd08:	60b9      	str	r1, [r7, #8]
    cd0a:	607a      	str	r2, [r7, #4]
    cd0c:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    cd0e:	68fb      	ldr	r3, [r7, #12]
    cd10:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    cd12:	4a0c      	ldr	r2, [pc, #48]	; (cd44 <n25q256a_construct+0x44>)
    cd14:	68b9      	ldr	r1, [r7, #8]
    cd16:	68f8      	ldr	r0, [r7, #12]
    cd18:	4b0b      	ldr	r3, [pc, #44]	; (cd48 <n25q256a_construct+0x48>)
    cd1a:	4798      	blx	r3
	n25q->quad_mode    = 0;
    cd1c:	697b      	ldr	r3, [r7, #20]
    cd1e:	2200      	movs	r2, #0
    cd20:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    cd22:	697b      	ldr	r3, [r7, #20]
    cd24:	2200      	movs	r2, #0
    cd26:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    cd28:	697b      	ldr	r3, [r7, #20]
    cd2a:	687a      	ldr	r2, [r7, #4]
    cd2c:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    cd2e:	78fb      	ldrb	r3, [r7, #3]
    cd30:	4619      	mov	r1, r3
    cd32:	68f8      	ldr	r0, [r7, #12]
    cd34:	4b05      	ldr	r3, [pc, #20]	; (cd4c <n25q256a_construct+0x4c>)
    cd36:	4798      	blx	r3
	return me;
    cd38:	68fb      	ldr	r3, [r7, #12]
}
    cd3a:	4618      	mov	r0, r3
    cd3c:	3718      	adds	r7, #24
    cd3e:	46bd      	mov	sp, r7
    cd40:	bd80      	pop	{r7, pc}
    cd42:	bf00      	nop
    cd44:	00011cf4 	.word	0x00011cf4
    cd48:	0000d1dd 	.word	0x0000d1dd
    cd4c:	0000cc35 	.word	0x0000cc35

0000cd50 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    cd50:	b580      	push	{r7, lr}
    cd52:	b08c      	sub	sp, #48	; 0x30
    cd54:	af00      	add	r7, sp, #0
    cd56:	60f8      	str	r0, [r7, #12]
    cd58:	60b9      	str	r1, [r7, #8]
    cd5a:	607a      	str	r2, [r7, #4]
    cd5c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cd5e:	68fb      	ldr	r3, [r7, #12]
    cd60:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cd62:	68fb      	ldr	r3, [r7, #12]
    cd64:	681b      	ldr	r3, [r3, #0]
    cd66:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    cd68:	f107 0310 	add.w	r3, r7, #16
    cd6c:	2200      	movs	r2, #0
    cd6e:	601a      	str	r2, [r3, #0]
    cd70:	605a      	str	r2, [r3, #4]
    cd72:	609a      	str	r2, [r3, #8]
    cd74:	60da      	str	r2, [r3, #12]
    cd76:	611a      	str	r2, [r3, #16]
    cd78:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cd7c:	7b1b      	ldrb	r3, [r3, #12]
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d001      	beq.n	cd86 <n25q256a_read+0x36>
    cd82:	2206      	movs	r2, #6
    cd84:	e000      	b.n	cd88 <n25q256a_read+0x38>
    cd86:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    cd88:	7c3b      	ldrb	r3, [r7, #16]
    cd8a:	f362 0302 	bfi	r3, r2, #0, #3
    cd8e:	743b      	strb	r3, [r7, #16]
    cd90:	7c3b      	ldrb	r3, [r7, #16]
    cd92:	f043 0310 	orr.w	r3, r3, #16
    cd96:	743b      	strb	r3, [r7, #16]
    cd98:	7c3b      	ldrb	r3, [r7, #16]
    cd9a:	f043 0320 	orr.w	r3, r3, #32
    cd9e:	743b      	strb	r3, [r7, #16]
    cda0:	7c3b      	ldrb	r3, [r7, #16]
    cda2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cda6:	743b      	strb	r3, [r7, #16]
    cda8:	7c7b      	ldrb	r3, [r7, #17]
    cdaa:	2201      	movs	r2, #1
    cdac:	f362 1305 	bfi	r3, r2, #4, #2
    cdb0:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cdb4:	7b1b      	ldrb	r3, [r3, #12]
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d001      	beq.n	cdbe <n25q256a_read+0x6e>
    cdba:	220a      	movs	r2, #10
    cdbc:	e000      	b.n	cdc0 <n25q256a_read+0x70>
    cdbe:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    cdc0:	7cbb      	ldrb	r3, [r7, #18]
    cdc2:	f362 0304 	bfi	r3, r2, #0, #5
    cdc6:	74bb      	strb	r3, [r7, #18]
    cdc8:	230b      	movs	r3, #11
    cdca:	753b      	strb	r3, [r7, #20]
    cdcc:	687b      	ldr	r3, [r7, #4]
    cdce:	61bb      	str	r3, [r7, #24]
    cdd0:	683b      	ldr	r3, [r7, #0]
    cdd2:	61fb      	str	r3, [r7, #28]
    cdd4:	68bb      	ldr	r3, [r7, #8]
    cdd6:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    cdd8:	f107 0310 	add.w	r3, r7, #16
    cddc:	4619      	mov	r1, r3
    cdde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cde0:	4b03      	ldr	r3, [pc, #12]	; (cdf0 <n25q256a_read+0xa0>)
    cde2:	4798      	blx	r3
	return ERR_NONE;
    cde4:	2300      	movs	r3, #0
}
    cde6:	4618      	mov	r0, r3
    cde8:	3730      	adds	r7, #48	; 0x30
    cdea:	46bd      	mov	sp, r7
    cdec:	bd80      	pop	{r7, pc}
    cdee:	bf00      	nop
    cdf0:	000041a5 	.word	0x000041a5

0000cdf4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    cdf4:	b580      	push	{r7, lr}
    cdf6:	b08c      	sub	sp, #48	; 0x30
    cdf8:	af00      	add	r7, sp, #0
    cdfa:	60f8      	str	r0, [r7, #12]
    cdfc:	60b9      	str	r1, [r7, #8]
    cdfe:	607a      	str	r2, [r7, #4]
    ce00:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ce02:	68fb      	ldr	r3, [r7, #12]
    ce04:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ce06:	68fb      	ldr	r3, [r7, #12]
    ce08:	681b      	ldr	r3, [r3, #0]
    ce0a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ce0c:	f107 0310 	add.w	r3, r7, #16
    ce10:	2200      	movs	r2, #0
    ce12:	601a      	str	r2, [r3, #0]
    ce14:	605a      	str	r2, [r3, #4]
    ce16:	609a      	str	r2, [r3, #8]
    ce18:	60da      	str	r2, [r3, #12]
    ce1a:	611a      	str	r2, [r3, #16]
    ce1c:	615a      	str	r2, [r3, #20]
    ce1e:	7c3b      	ldrb	r3, [r7, #16]
    ce20:	f043 0310 	orr.w	r3, r3, #16
    ce24:	743b      	strb	r3, [r7, #16]
    ce26:	7c3b      	ldrb	r3, [r7, #16]
    ce28:	f043 0320 	orr.w	r3, r3, #32
    ce2c:	743b      	strb	r3, [r7, #16]
    ce2e:	7c3b      	ldrb	r3, [r7, #16]
    ce30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce34:	743b      	strb	r3, [r7, #16]
    ce36:	7c7b      	ldrb	r3, [r7, #17]
    ce38:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ce3c:	747b      	strb	r3, [r7, #17]
    ce3e:	2302      	movs	r3, #2
    ce40:	753b      	strb	r3, [r7, #20]
    ce42:	687b      	ldr	r3, [r7, #4]
    ce44:	61bb      	str	r3, [r7, #24]
    ce46:	683b      	ldr	r3, [r7, #0]
    ce48:	61fb      	str	r3, [r7, #28]
    ce4a:	68bb      	ldr	r3, [r7, #8]
    ce4c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce50:	7b1b      	ldrb	r3, [r3, #12]
    ce52:	2b00      	cmp	r3, #0
    ce54:	d001      	beq.n	ce5a <n25q256a_write+0x66>
    ce56:	2206      	movs	r2, #6
    ce58:	e000      	b.n	ce5c <n25q256a_write+0x68>
    ce5a:	2200      	movs	r2, #0
    ce5c:	7c3b      	ldrb	r3, [r7, #16]
    ce5e:	f362 0302 	bfi	r3, r2, #0, #3
    ce62:	743b      	strb	r3, [r7, #16]
	while (length) {
    ce64:	e035      	b.n	ced2 <n25q256a_write+0xde>
		cmd.address = address;
    ce66:	687b      	ldr	r3, [r7, #4]
    ce68:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ce6a:	683b      	ldr	r3, [r7, #0]
    ce6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ce70:	d802      	bhi.n	ce78 <n25q256a_write+0x84>
			cmd.buf_len = length;
    ce72:	683b      	ldr	r3, [r7, #0]
    ce74:	61fb      	str	r3, [r7, #28]
    ce76:	e002      	b.n	ce7e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ce78:	f44f 7380 	mov.w	r3, #256	; 0x100
    ce7c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ce7e:	7c3b      	ldrb	r3, [r7, #16]
    ce80:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ce84:	b2db      	uxtb	r3, r3
    ce86:	2201      	movs	r2, #1
    ce88:	4619      	mov	r1, r3
    ce8a:	68f8      	ldr	r0, [r7, #12]
    ce8c:	4b19      	ldr	r3, [pc, #100]	; (cef4 <n25q256a_write+0x100>)
    ce8e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ce90:	f107 0310 	add.w	r3, r7, #16
    ce94:	4619      	mov	r1, r3
    ce96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ce98:	4b17      	ldr	r3, [pc, #92]	; (cef8 <n25q256a_write+0x104>)
    ce9a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ce9c:	bf00      	nop
    ce9e:	7c3b      	ldrb	r3, [r7, #16]
    cea0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cea4:	b2db      	uxtb	r3, r3
    cea6:	2270      	movs	r2, #112	; 0x70
    cea8:	4619      	mov	r1, r3
    ceaa:	68f8      	ldr	r0, [r7, #12]
    ceac:	4b13      	ldr	r3, [pc, #76]	; (cefc <n25q256a_write+0x108>)
    ceae:	4798      	blx	r3
    ceb0:	4603      	mov	r3, r0
    ceb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d0f1      	beq.n	ce9e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ceba:	6a3a      	ldr	r2, [r7, #32]
    cebc:	69fb      	ldr	r3, [r7, #28]
    cebe:	4413      	add	r3, r2
    cec0:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    cec2:	69fb      	ldr	r3, [r7, #28]
    cec4:	683a      	ldr	r2, [r7, #0]
    cec6:	1ad3      	subs	r3, r2, r3
    cec8:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ceca:	69fb      	ldr	r3, [r7, #28]
    cecc:	687a      	ldr	r2, [r7, #4]
    cece:	4413      	add	r3, r2
    ced0:	607b      	str	r3, [r7, #4]
	while (length) {
    ced2:	683b      	ldr	r3, [r7, #0]
    ced4:	2b00      	cmp	r3, #0
    ced6:	d1c6      	bne.n	ce66 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ced8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceda:	7b5b      	ldrb	r3, [r3, #13]
    cedc:	2b00      	cmp	r3, #0
    cede:	d003      	beq.n	cee8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    cee0:	2101      	movs	r1, #1
    cee2:	68f8      	ldr	r0, [r7, #12]
    cee4:	4b06      	ldr	r3, [pc, #24]	; (cf00 <n25q256a_write+0x10c>)
    cee6:	4798      	blx	r3
	}
	return ERR_NONE;
    cee8:	2300      	movs	r3, #0
}
    ceea:	4618      	mov	r0, r3
    ceec:	3730      	adds	r7, #48	; 0x30
    ceee:	46bd      	mov	sp, r7
    cef0:	bd80      	pop	{r7, pc}
    cef2:	bf00      	nop
    cef4:	0000cb65 	.word	0x0000cb65
    cef8:	000041a5 	.word	0x000041a5
    cefc:	0000ca29 	.word	0x0000ca29
    cf00:	0000c95d 	.word	0x0000c95d

0000cf04 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    cf04:	b580      	push	{r7, lr}
    cf06:	b090      	sub	sp, #64	; 0x40
    cf08:	af00      	add	r7, sp, #0
    cf0a:	60f8      	str	r0, [r7, #12]
    cf0c:	60b9      	str	r1, [r7, #8]
    cf0e:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    cf10:	68fb      	ldr	r3, [r7, #12]
    cf12:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    cf14:	68fb      	ldr	r3, [r7, #12]
    cf16:	681b      	ldr	r3, [r3, #0]
    cf18:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    cf1a:	f107 0314 	add.w	r3, r7, #20
    cf1e:	2200      	movs	r2, #0
    cf20:	601a      	str	r2, [r3, #0]
    cf22:	605a      	str	r2, [r3, #4]
    cf24:	609a      	str	r2, [r3, #8]
    cf26:	60da      	str	r2, [r3, #12]
    cf28:	611a      	str	r2, [r3, #16]
    cf2a:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    cf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cf2e:	7b1b      	ldrb	r3, [r3, #12]
    cf30:	2b00      	cmp	r3, #0
    cf32:	d001      	beq.n	cf38 <n25q256a_erase+0x34>
    cf34:	2206      	movs	r2, #6
    cf36:	e000      	b.n	cf3a <n25q256a_erase+0x36>
    cf38:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    cf3a:	7d3b      	ldrb	r3, [r7, #20]
    cf3c:	f362 0302 	bfi	r3, r2, #0, #3
    cf40:	753b      	strb	r3, [r7, #20]
    cf42:	7d3b      	ldrb	r3, [r7, #20]
    cf44:	f043 0310 	orr.w	r3, r3, #16
    cf48:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    cf4a:	687b      	ldr	r3, [r7, #4]
    cf4c:	4a56      	ldr	r2, [pc, #344]	; (d0a8 <n25q256a_erase+0x1a4>)
    cf4e:	4293      	cmp	r3, r2
    cf50:	bf94      	ite	ls
    cf52:	2301      	movls	r3, #1
    cf54:	2300      	movhi	r3, #0
    cf56:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    cf58:	7d3b      	ldrb	r3, [r7, #20]
    cf5a:	f362 1345 	bfi	r3, r2, #5, #1
    cf5e:	753b      	strb	r3, [r7, #20]
    cf60:	7d7b      	ldrb	r3, [r7, #21]
    cf62:	2202      	movs	r2, #2
    cf64:	f362 1305 	bfi	r3, r2, #4, #2
    cf68:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    cf6a:	68bb      	ldr	r3, [r7, #8]
    cf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    cf6e:	687b      	ldr	r3, [r7, #4]
    cf70:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    cf72:	2300      	movs	r3, #0
    cf74:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    cf76:	687b      	ldr	r3, [r7, #4]
    cf78:	f3c3 030b 	ubfx	r3, r3, #0, #12
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	d104      	bne.n	cf8a <n25q256a_erase+0x86>
    cf80:	68bb      	ldr	r3, [r7, #8]
    cf82:	f3c3 030b 	ubfx	r3, r3, #0, #12
    cf86:	2b00      	cmp	r3, #0
    cf88:	d002      	beq.n	cf90 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    cf8a:	f06f 030c 	mvn.w	r3, #12
    cf8e:	e087      	b.n	d0a0 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    cf96:	d368      	bcc.n	d06a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    cf98:	23c7      	movs	r3, #199	; 0xc7
    cf9a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    cf9c:	7d3b      	ldrb	r3, [r7, #20]
    cf9e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cfa2:	b2db      	uxtb	r3, r3
    cfa4:	2201      	movs	r2, #1
    cfa6:	4619      	mov	r1, r3
    cfa8:	68f8      	ldr	r0, [r7, #12]
    cfaa:	4b40      	ldr	r3, [pc, #256]	; (d0ac <n25q256a_erase+0x1a8>)
    cfac:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    cfae:	f107 0314 	add.w	r3, r7, #20
    cfb2:	4619      	mov	r1, r3
    cfb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cfb6:	4b3e      	ldr	r3, [pc, #248]	; (d0b0 <n25q256a_erase+0x1ac>)
    cfb8:	4798      	blx	r3
    cfba:	e059      	b.n	d070 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    cfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cfbe:	b29b      	uxth	r3, r3
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d11f      	bne.n	d004 <n25q256a_erase+0x100>
    cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cfca:	d31b      	bcc.n	d004 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    cfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cfce:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    cfd0:	23d8      	movs	r3, #216	; 0xd8
    cfd2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    cfd4:	7d3b      	ldrb	r3, [r7, #20]
    cfd6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cfda:	b2db      	uxtb	r3, r3
    cfdc:	2201      	movs	r2, #1
    cfde:	4619      	mov	r1, r3
    cfe0:	68f8      	ldr	r0, [r7, #12]
    cfe2:	4b32      	ldr	r3, [pc, #200]	; (d0ac <n25q256a_erase+0x1a8>)
    cfe4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    cfe6:	f107 0314 	add.w	r3, r7, #20
    cfea:	4619      	mov	r1, r3
    cfec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cfee:	4b30      	ldr	r3, [pc, #192]	; (d0b0 <n25q256a_erase+0x1ac>)
    cff0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    cff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cff4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    cff8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cffc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d000:	63bb      	str	r3, [r7, #56]	; 0x38
    d002:	e023      	b.n	d04c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d00a:	d31b      	bcc.n	d044 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d00e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d010:	2320      	movs	r3, #32
    d012:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d014:	7d3b      	ldrb	r3, [r7, #20]
    d016:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d01a:	b2db      	uxtb	r3, r3
    d01c:	2201      	movs	r2, #1
    d01e:	4619      	mov	r1, r3
    d020:	68f8      	ldr	r0, [r7, #12]
    d022:	4b22      	ldr	r3, [pc, #136]	; (d0ac <n25q256a_erase+0x1a8>)
    d024:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d026:	f107 0314 	add.w	r3, r7, #20
    d02a:	4619      	mov	r1, r3
    d02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d02e:	4b20      	ldr	r3, [pc, #128]	; (d0b0 <n25q256a_erase+0x1ac>)
    d030:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d038:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d03c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d040:	63bb      	str	r3, [r7, #56]	; 0x38
    d042:	e003      	b.n	d04c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d044:	f06f 030c 	mvn.w	r3, #12
    d048:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d04a:	e011      	b.n	d070 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d04c:	bf00      	nop
    d04e:	7d3b      	ldrb	r3, [r7, #20]
    d050:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d054:	b2db      	uxtb	r3, r3
    d056:	2270      	movs	r2, #112	; 0x70
    d058:	4619      	mov	r1, r3
    d05a:	68f8      	ldr	r0, [r7, #12]
    d05c:	4b15      	ldr	r3, [pc, #84]	; (d0b4 <n25q256a_erase+0x1b0>)
    d05e:	4798      	blx	r3
    d060:	4603      	mov	r3, r0
    d062:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d066:	2b00      	cmp	r3, #0
    d068:	d0f1      	beq.n	d04e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d06c:	2b00      	cmp	r3, #0
    d06e:	d1a5      	bne.n	cfbc <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d070:	bf00      	nop
    d072:	7d3b      	ldrb	r3, [r7, #20]
    d074:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d078:	b2db      	uxtb	r3, r3
    d07a:	2270      	movs	r2, #112	; 0x70
    d07c:	4619      	mov	r1, r3
    d07e:	68f8      	ldr	r0, [r7, #12]
    d080:	4b0c      	ldr	r3, [pc, #48]	; (d0b4 <n25q256a_erase+0x1b0>)
    d082:	4798      	blx	r3
    d084:	4603      	mov	r3, r0
    d086:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d08a:	2b00      	cmp	r3, #0
    d08c:	d0f1      	beq.n	d072 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d090:	7b5b      	ldrb	r3, [r3, #13]
    d092:	2b00      	cmp	r3, #0
    d094:	d003      	beq.n	d09e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d096:	2101      	movs	r1, #1
    d098:	68f8      	ldr	r0, [r7, #12]
    d09a:	4b07      	ldr	r3, [pc, #28]	; (d0b8 <n25q256a_erase+0x1b4>)
    d09c:	4798      	blx	r3
	}
	return rc;
    d09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d0a0:	4618      	mov	r0, r3
    d0a2:	3740      	adds	r7, #64	; 0x40
    d0a4:	46bd      	mov	sp, r7
    d0a6:	bd80      	pop	{r7, pc}
    d0a8:	001fffff 	.word	0x001fffff
    d0ac:	0000cb65 	.word	0x0000cb65
    d0b0:	000041a5 	.word	0x000041a5
    d0b4:	0000ca29 	.word	0x0000ca29
    d0b8:	0000c95d 	.word	0x0000c95d

0000d0bc <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d0bc:	b590      	push	{r4, r7, lr}
    d0be:	b085      	sub	sp, #20
    d0c0:	af00      	add	r7, sp, #0
    d0c2:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d0c4:	687b      	ldr	r3, [r7, #4]
    d0c6:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d0c8:	68fb      	ldr	r3, [r7, #12]
    d0ca:	7b1b      	ldrb	r3, [r3, #12]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d001      	beq.n	d0d4 <n25q256a_enable_xip+0x18>
    d0d0:	2306      	movs	r3, #6
    d0d2:	e000      	b.n	d0d6 <n25q256a_enable_xip+0x1a>
    d0d4:	2300      	movs	r3, #0
    d0d6:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d0d8:	68fb      	ldr	r3, [r7, #12]
    d0da:	7b5b      	ldrb	r3, [r3, #13]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d129      	bne.n	d134 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d0e0:	7afb      	ldrb	r3, [r7, #11]
    d0e2:	2285      	movs	r2, #133	; 0x85
    d0e4:	4619      	mov	r1, r3
    d0e6:	6878      	ldr	r0, [r7, #4]
    d0e8:	4b15      	ldr	r3, [pc, #84]	; (d140 <n25q256a_enable_xip+0x84>)
    d0ea:	4798      	blx	r3
    d0ec:	4603      	mov	r3, r0
    d0ee:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d0f0:	7abb      	ldrb	r3, [r7, #10]
    d0f2:	f003 0308 	and.w	r3, r3, #8
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d015      	beq.n	d126 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d0fa:	7abb      	ldrb	r3, [r7, #10]
    d0fc:	f023 0308 	bic.w	r3, r3, #8
    d100:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d102:	7abb      	ldrb	r3, [r7, #10]
    d104:	7af9      	ldrb	r1, [r7, #11]
    d106:	2281      	movs	r2, #129	; 0x81
    d108:	6878      	ldr	r0, [r7, #4]
    d10a:	4c0e      	ldr	r4, [pc, #56]	; (d144 <n25q256a_enable_xip+0x88>)
    d10c:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d10e:	bf00      	nop
    d110:	7afb      	ldrb	r3, [r7, #11]
    d112:	2270      	movs	r2, #112	; 0x70
    d114:	4619      	mov	r1, r3
    d116:	6878      	ldr	r0, [r7, #4]
    d118:	4b09      	ldr	r3, [pc, #36]	; (d140 <n25q256a_enable_xip+0x84>)
    d11a:	4798      	blx	r3
    d11c:	4603      	mov	r3, r0
    d11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d122:	2b00      	cmp	r3, #0
    d124:	d0f4      	beq.n	d110 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d126:	68fb      	ldr	r3, [r7, #12]
    d128:	2201      	movs	r2, #1
    d12a:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d12c:	2101      	movs	r1, #1
    d12e:	6878      	ldr	r0, [r7, #4]
    d130:	4b05      	ldr	r3, [pc, #20]	; (d148 <n25q256a_enable_xip+0x8c>)
    d132:	4798      	blx	r3
	}
	return ERR_NONE;
    d134:	2300      	movs	r3, #0
}
    d136:	4618      	mov	r0, r3
    d138:	3714      	adds	r7, #20
    d13a:	46bd      	mov	sp, r7
    d13c:	bd90      	pop	{r4, r7, pc}
    d13e:	bf00      	nop
    d140:	0000ca29 	.word	0x0000ca29
    d144:	0000cac5 	.word	0x0000cac5
    d148:	0000c95d 	.word	0x0000c95d

0000d14c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d14c:	b580      	push	{r7, lr}
    d14e:	b086      	sub	sp, #24
    d150:	af00      	add	r7, sp, #0
    d152:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d154:	687b      	ldr	r3, [r7, #4]
    d156:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d158:	687b      	ldr	r3, [r7, #4]
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d15e:	697b      	ldr	r3, [r7, #20]
    d160:	7b1b      	ldrb	r3, [r3, #12]
    d162:	2b00      	cmp	r3, #0
    d164:	d001      	beq.n	d16a <n25q256a_disable_xip+0x1e>
    d166:	2306      	movs	r3, #6
    d168:	e000      	b.n	d16c <n25q256a_disable_xip+0x20>
    d16a:	2300      	movs	r3, #0
    d16c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d16e:	2100      	movs	r1, #0
    d170:	6878      	ldr	r0, [r7, #4]
    d172:	4b15      	ldr	r3, [pc, #84]	; (d1c8 <n25q256a_disable_xip+0x7c>)
    d174:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d176:	7bfb      	ldrb	r3, [r7, #15]
    d178:	2285      	movs	r2, #133	; 0x85
    d17a:	4619      	mov	r1, r3
    d17c:	6878      	ldr	r0, [r7, #4]
    d17e:	4b13      	ldr	r3, [pc, #76]	; (d1cc <n25q256a_disable_xip+0x80>)
    d180:	4798      	blx	r3
    d182:	4603      	mov	r3, r0
    d184:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d186:	7bbb      	ldrb	r3, [r7, #14]
    d188:	f003 0308 	and.w	r3, r3, #8
    d18c:	2b00      	cmp	r3, #0
    d18e:	d113      	bne.n	d1b8 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d190:	697b      	ldr	r3, [r7, #20]
    d192:	689b      	ldr	r3, [r3, #8]
    d194:	2b00      	cmp	r3, #0
    d196:	d00f      	beq.n	d1b8 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d198:	693b      	ldr	r3, [r7, #16]
    d19a:	681b      	ldr	r3, [r3, #0]
    d19c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d19e:	6938      	ldr	r0, [r7, #16]
    d1a0:	4b0b      	ldr	r3, [pc, #44]	; (d1d0 <n25q256a_disable_xip+0x84>)
    d1a2:	4798      	blx	r3
			n25q->pin_exit_xip();
    d1a4:	697b      	ldr	r3, [r7, #20]
    d1a6:	689b      	ldr	r3, [r3, #8]
    d1a8:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    d1aa:	68b9      	ldr	r1, [r7, #8]
    d1ac:	6938      	ldr	r0, [r7, #16]
    d1ae:	4b09      	ldr	r3, [pc, #36]	; (d1d4 <n25q256a_disable_xip+0x88>)
    d1b0:	4798      	blx	r3
			qspi_sync_enable(descr);
    d1b2:	6938      	ldr	r0, [r7, #16]
    d1b4:	4b08      	ldr	r3, [pc, #32]	; (d1d8 <n25q256a_disable_xip+0x8c>)
    d1b6:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    d1b8:	697b      	ldr	r3, [r7, #20]
    d1ba:	2200      	movs	r2, #0
    d1bc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d1be:	2300      	movs	r3, #0
}
    d1c0:	4618      	mov	r0, r3
    d1c2:	3718      	adds	r7, #24
    d1c4:	46bd      	mov	sp, r7
    d1c6:	bd80      	pop	{r7, pc}
    d1c8:	0000c95d 	.word	0x0000c95d
    d1cc:	0000ca29 	.word	0x0000ca29
    d1d0:	00004169 	.word	0x00004169
    d1d4:	000040e1 	.word	0x000040e1
    d1d8:	0000412d 	.word	0x0000412d

0000d1dc <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    d1dc:	b480      	push	{r7}
    d1de:	b085      	sub	sp, #20
    d1e0:	af00      	add	r7, sp, #0
    d1e2:	60f8      	str	r0, [r7, #12]
    d1e4:	60b9      	str	r1, [r7, #8]
    d1e6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    d1e8:	68fb      	ldr	r3, [r7, #12]
    d1ea:	68ba      	ldr	r2, [r7, #8]
    d1ec:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    d1ee:	68fb      	ldr	r3, [r7, #12]
    d1f0:	687a      	ldr	r2, [r7, #4]
    d1f2:	605a      	str	r2, [r3, #4]

	return me;
    d1f4:	68fb      	ldr	r3, [r7, #12]
}
    d1f6:	4618      	mov	r0, r3
    d1f8:	3714      	adds	r7, #20
    d1fa:	46bd      	mov	sp, r7
    d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d200:	4770      	bx	lr

0000d202 <hri_port_set_DIR_reg>:
{
    d202:	b480      	push	{r7}
    d204:	b085      	sub	sp, #20
    d206:	af00      	add	r7, sp, #0
    d208:	60f8      	str	r0, [r7, #12]
    d20a:	460b      	mov	r3, r1
    d20c:	607a      	str	r2, [r7, #4]
    d20e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    d210:	7afb      	ldrb	r3, [r7, #11]
    d212:	68fa      	ldr	r2, [r7, #12]
    d214:	01db      	lsls	r3, r3, #7
    d216:	4413      	add	r3, r2
    d218:	3308      	adds	r3, #8
    d21a:	687a      	ldr	r2, [r7, #4]
    d21c:	601a      	str	r2, [r3, #0]
}
    d21e:	bf00      	nop
    d220:	3714      	adds	r7, #20
    d222:	46bd      	mov	sp, r7
    d224:	f85d 7b04 	ldr.w	r7, [sp], #4
    d228:	4770      	bx	lr

0000d22a <hri_port_clear_DIR_reg>:
{
    d22a:	b480      	push	{r7}
    d22c:	b085      	sub	sp, #20
    d22e:	af00      	add	r7, sp, #0
    d230:	60f8      	str	r0, [r7, #12]
    d232:	460b      	mov	r3, r1
    d234:	607a      	str	r2, [r7, #4]
    d236:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    d238:	7afb      	ldrb	r3, [r7, #11]
    d23a:	68fa      	ldr	r2, [r7, #12]
    d23c:	01db      	lsls	r3, r3, #7
    d23e:	4413      	add	r3, r2
    d240:	3304      	adds	r3, #4
    d242:	687a      	ldr	r2, [r7, #4]
    d244:	601a      	str	r2, [r3, #0]
}
    d246:	bf00      	nop
    d248:	3714      	adds	r7, #20
    d24a:	46bd      	mov	sp, r7
    d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d250:	4770      	bx	lr

0000d252 <hri_port_set_OUT_reg>:
{
    d252:	b480      	push	{r7}
    d254:	b085      	sub	sp, #20
    d256:	af00      	add	r7, sp, #0
    d258:	60f8      	str	r0, [r7, #12]
    d25a:	460b      	mov	r3, r1
    d25c:	607a      	str	r2, [r7, #4]
    d25e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d260:	7afb      	ldrb	r3, [r7, #11]
    d262:	68fa      	ldr	r2, [r7, #12]
    d264:	01db      	lsls	r3, r3, #7
    d266:	4413      	add	r3, r2
    d268:	3318      	adds	r3, #24
    d26a:	687a      	ldr	r2, [r7, #4]
    d26c:	601a      	str	r2, [r3, #0]
}
    d26e:	bf00      	nop
    d270:	3714      	adds	r7, #20
    d272:	46bd      	mov	sp, r7
    d274:	f85d 7b04 	ldr.w	r7, [sp], #4
    d278:	4770      	bx	lr

0000d27a <hri_port_clear_OUT_reg>:
{
    d27a:	b480      	push	{r7}
    d27c:	b085      	sub	sp, #20
    d27e:	af00      	add	r7, sp, #0
    d280:	60f8      	str	r0, [r7, #12]
    d282:	460b      	mov	r3, r1
    d284:	607a      	str	r2, [r7, #4]
    d286:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d288:	7afb      	ldrb	r3, [r7, #11]
    d28a:	68fa      	ldr	r2, [r7, #12]
    d28c:	01db      	lsls	r3, r3, #7
    d28e:	4413      	add	r3, r2
    d290:	3314      	adds	r3, #20
    d292:	687a      	ldr	r2, [r7, #4]
    d294:	601a      	str	r2, [r3, #0]
}
    d296:	bf00      	nop
    d298:	3714      	adds	r7, #20
    d29a:	46bd      	mov	sp, r7
    d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2a0:	4770      	bx	lr

0000d2a2 <hri_port_write_PMUX_PMUXE_bf>:
{
    d2a2:	b480      	push	{r7}
    d2a4:	b085      	sub	sp, #20
    d2a6:	af00      	add	r7, sp, #0
    d2a8:	6078      	str	r0, [r7, #4]
    d2aa:	4608      	mov	r0, r1
    d2ac:	4611      	mov	r1, r2
    d2ae:	461a      	mov	r2, r3
    d2b0:	4603      	mov	r3, r0
    d2b2:	70fb      	strb	r3, [r7, #3]
    d2b4:	460b      	mov	r3, r1
    d2b6:	70bb      	strb	r3, [r7, #2]
    d2b8:	4613      	mov	r3, r2
    d2ba:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d2bc:	78fa      	ldrb	r2, [r7, #3]
    d2be:	78bb      	ldrb	r3, [r7, #2]
    d2c0:	6879      	ldr	r1, [r7, #4]
    d2c2:	01d2      	lsls	r2, r2, #7
    d2c4:	440a      	add	r2, r1
    d2c6:	4413      	add	r3, r2
    d2c8:	3330      	adds	r3, #48	; 0x30
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    d2ce:	7bfb      	ldrb	r3, [r7, #15]
    d2d0:	f023 030f 	bic.w	r3, r3, #15
    d2d4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    d2d6:	787b      	ldrb	r3, [r7, #1]
    d2d8:	f003 030f 	and.w	r3, r3, #15
    d2dc:	b2da      	uxtb	r2, r3
    d2de:	7bfb      	ldrb	r3, [r7, #15]
    d2e0:	4313      	orrs	r3, r2
    d2e2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d2e4:	78fa      	ldrb	r2, [r7, #3]
    d2e6:	78bb      	ldrb	r3, [r7, #2]
    d2e8:	6879      	ldr	r1, [r7, #4]
    d2ea:	01d2      	lsls	r2, r2, #7
    d2ec:	440a      	add	r2, r1
    d2ee:	4413      	add	r3, r2
    d2f0:	3330      	adds	r3, #48	; 0x30
    d2f2:	7bfa      	ldrb	r2, [r7, #15]
    d2f4:	701a      	strb	r2, [r3, #0]
}
    d2f6:	bf00      	nop
    d2f8:	3714      	adds	r7, #20
    d2fa:	46bd      	mov	sp, r7
    d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d300:	4770      	bx	lr

0000d302 <hri_port_write_PMUX_PMUXO_bf>:
{
    d302:	b480      	push	{r7}
    d304:	b085      	sub	sp, #20
    d306:	af00      	add	r7, sp, #0
    d308:	6078      	str	r0, [r7, #4]
    d30a:	4608      	mov	r0, r1
    d30c:	4611      	mov	r1, r2
    d30e:	461a      	mov	r2, r3
    d310:	4603      	mov	r3, r0
    d312:	70fb      	strb	r3, [r7, #3]
    d314:	460b      	mov	r3, r1
    d316:	70bb      	strb	r3, [r7, #2]
    d318:	4613      	mov	r3, r2
    d31a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d31c:	78fa      	ldrb	r2, [r7, #3]
    d31e:	78bb      	ldrb	r3, [r7, #2]
    d320:	6879      	ldr	r1, [r7, #4]
    d322:	01d2      	lsls	r2, r2, #7
    d324:	440a      	add	r2, r1
    d326:	4413      	add	r3, r2
    d328:	3330      	adds	r3, #48	; 0x30
    d32a:	781b      	ldrb	r3, [r3, #0]
    d32c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    d32e:	7bfb      	ldrb	r3, [r7, #15]
    d330:	f003 030f 	and.w	r3, r3, #15
    d334:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    d336:	787b      	ldrb	r3, [r7, #1]
    d338:	011b      	lsls	r3, r3, #4
    d33a:	b2da      	uxtb	r2, r3
    d33c:	7bfb      	ldrb	r3, [r7, #15]
    d33e:	4313      	orrs	r3, r2
    d340:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d342:	78fa      	ldrb	r2, [r7, #3]
    d344:	78bb      	ldrb	r3, [r7, #2]
    d346:	6879      	ldr	r1, [r7, #4]
    d348:	01d2      	lsls	r2, r2, #7
    d34a:	440a      	add	r2, r1
    d34c:	4413      	add	r3, r2
    d34e:	3330      	adds	r3, #48	; 0x30
    d350:	7bfa      	ldrb	r2, [r7, #15]
    d352:	701a      	strb	r2, [r3, #0]
}
    d354:	bf00      	nop
    d356:	3714      	adds	r7, #20
    d358:	46bd      	mov	sp, r7
    d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d35e:	4770      	bx	lr

0000d360 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    d360:	b480      	push	{r7}
    d362:	b085      	sub	sp, #20
    d364:	af00      	add	r7, sp, #0
    d366:	6078      	str	r0, [r7, #4]
    d368:	4608      	mov	r0, r1
    d36a:	4611      	mov	r1, r2
    d36c:	461a      	mov	r2, r3
    d36e:	4603      	mov	r3, r0
    d370:	70fb      	strb	r3, [r7, #3]
    d372:	460b      	mov	r3, r1
    d374:	70bb      	strb	r3, [r7, #2]
    d376:	4613      	mov	r3, r2
    d378:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    d37a:	78fa      	ldrb	r2, [r7, #3]
    d37c:	78bb      	ldrb	r3, [r7, #2]
    d37e:	6879      	ldr	r1, [r7, #4]
    d380:	01d2      	lsls	r2, r2, #7
    d382:	440a      	add	r2, r1
    d384:	4413      	add	r3, r2
    d386:	3340      	adds	r3, #64	; 0x40
    d388:	781b      	ldrb	r3, [r3, #0]
    d38a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    d38c:	7bfb      	ldrb	r3, [r7, #15]
    d38e:	f023 0301 	bic.w	r3, r3, #1
    d392:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    d394:	787a      	ldrb	r2, [r7, #1]
    d396:	7bfb      	ldrb	r3, [r7, #15]
    d398:	4313      	orrs	r3, r2
    d39a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    d39c:	78fa      	ldrb	r2, [r7, #3]
    d39e:	78bb      	ldrb	r3, [r7, #2]
    d3a0:	6879      	ldr	r1, [r7, #4]
    d3a2:	01d2      	lsls	r2, r2, #7
    d3a4:	440a      	add	r2, r1
    d3a6:	4413      	add	r3, r2
    d3a8:	3340      	adds	r3, #64	; 0x40
    d3aa:	7bfa      	ldrb	r2, [r7, #15]
    d3ac:	701a      	strb	r2, [r3, #0]
}
    d3ae:	bf00      	nop
    d3b0:	3714      	adds	r7, #20
    d3b2:	46bd      	mov	sp, r7
    d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3b8:	4770      	bx	lr

0000d3ba <hri_port_write_WRCONFIG_reg>:
{
    d3ba:	b480      	push	{r7}
    d3bc:	b085      	sub	sp, #20
    d3be:	af00      	add	r7, sp, #0
    d3c0:	60f8      	str	r0, [r7, #12]
    d3c2:	460b      	mov	r3, r1
    d3c4:	607a      	str	r2, [r7, #4]
    d3c6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    d3c8:	7afb      	ldrb	r3, [r7, #11]
    d3ca:	68fa      	ldr	r2, [r7, #12]
    d3cc:	01db      	lsls	r3, r3, #7
    d3ce:	4413      	add	r3, r2
    d3d0:	3328      	adds	r3, #40	; 0x28
    d3d2:	687a      	ldr	r2, [r7, #4]
    d3d4:	601a      	str	r2, [r3, #0]
}
    d3d6:	bf00      	nop
    d3d8:	3714      	adds	r7, #20
    d3da:	46bd      	mov	sp, r7
    d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3e0:	4770      	bx	lr
	...

0000d3e4 <_gpio_set_direction>:
{
    d3e4:	b580      	push	{r7, lr}
    d3e6:	b082      	sub	sp, #8
    d3e8:	af00      	add	r7, sp, #0
    d3ea:	4603      	mov	r3, r0
    d3ec:	6039      	str	r1, [r7, #0]
    d3ee:	71fb      	strb	r3, [r7, #7]
    d3f0:	4613      	mov	r3, r2
    d3f2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    d3f4:	79bb      	ldrb	r3, [r7, #6]
    d3f6:	2b01      	cmp	r3, #1
    d3f8:	d01c      	beq.n	d434 <_gpio_set_direction+0x50>
    d3fa:	2b02      	cmp	r3, #2
    d3fc:	d037      	beq.n	d46e <_gpio_set_direction+0x8a>
    d3fe:	2b00      	cmp	r3, #0
    d400:	d14e      	bne.n	d4a0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    d402:	79fb      	ldrb	r3, [r7, #7]
    d404:	683a      	ldr	r2, [r7, #0]
    d406:	4619      	mov	r1, r3
    d408:	482a      	ldr	r0, [pc, #168]	; (d4b4 <_gpio_set_direction+0xd0>)
    d40a:	4b2b      	ldr	r3, [pc, #172]	; (d4b8 <_gpio_set_direction+0xd4>)
    d40c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d40e:	683b      	ldr	r3, [r7, #0]
    d410:	b29b      	uxth	r3, r3
    d412:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d416:	79fb      	ldrb	r3, [r7, #7]
    d418:	4619      	mov	r1, r3
    d41a:	4826      	ldr	r0, [pc, #152]	; (d4b4 <_gpio_set_direction+0xd0>)
    d41c:	4b27      	ldr	r3, [pc, #156]	; (d4bc <_gpio_set_direction+0xd8>)
    d41e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d420:	683b      	ldr	r3, [r7, #0]
    d422:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d424:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    d428:	79fb      	ldrb	r3, [r7, #7]
    d42a:	4619      	mov	r1, r3
    d42c:	4821      	ldr	r0, [pc, #132]	; (d4b4 <_gpio_set_direction+0xd0>)
    d42e:	4b23      	ldr	r3, [pc, #140]	; (d4bc <_gpio_set_direction+0xd8>)
    d430:	4798      	blx	r3
		break;
    d432:	e03a      	b.n	d4aa <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    d434:	79fb      	ldrb	r3, [r7, #7]
    d436:	683a      	ldr	r2, [r7, #0]
    d438:	4619      	mov	r1, r3
    d43a:	481e      	ldr	r0, [pc, #120]	; (d4b4 <_gpio_set_direction+0xd0>)
    d43c:	4b1e      	ldr	r3, [pc, #120]	; (d4b8 <_gpio_set_direction+0xd4>)
    d43e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    d440:	683b      	ldr	r3, [r7, #0]
    d442:	b29b      	uxth	r3, r3
    d444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    d448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d44c:	79f9      	ldrb	r1, [r7, #7]
    d44e:	461a      	mov	r2, r3
    d450:	4818      	ldr	r0, [pc, #96]	; (d4b4 <_gpio_set_direction+0xd0>)
    d452:	4b1a      	ldr	r3, [pc, #104]	; (d4bc <_gpio_set_direction+0xd8>)
    d454:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    d456:	683b      	ldr	r3, [r7, #0]
    d458:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    d45a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    d45e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d462:	79f9      	ldrb	r1, [r7, #7]
    d464:	461a      	mov	r2, r3
    d466:	4813      	ldr	r0, [pc, #76]	; (d4b4 <_gpio_set_direction+0xd0>)
    d468:	4b14      	ldr	r3, [pc, #80]	; (d4bc <_gpio_set_direction+0xd8>)
    d46a:	4798      	blx	r3
		break;
    d46c:	e01d      	b.n	d4aa <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    d46e:	79fb      	ldrb	r3, [r7, #7]
    d470:	683a      	ldr	r2, [r7, #0]
    d472:	4619      	mov	r1, r3
    d474:	480f      	ldr	r0, [pc, #60]	; (d4b4 <_gpio_set_direction+0xd0>)
    d476:	4b12      	ldr	r3, [pc, #72]	; (d4c0 <_gpio_set_direction+0xdc>)
    d478:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d47a:	683b      	ldr	r3, [r7, #0]
    d47c:	b29b      	uxth	r3, r3
    d47e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d482:	79fb      	ldrb	r3, [r7, #7]
    d484:	4619      	mov	r1, r3
    d486:	480b      	ldr	r0, [pc, #44]	; (d4b4 <_gpio_set_direction+0xd0>)
    d488:	4b0c      	ldr	r3, [pc, #48]	; (d4bc <_gpio_set_direction+0xd8>)
    d48a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d48c:	683b      	ldr	r3, [r7, #0]
    d48e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d490:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    d494:	79fb      	ldrb	r3, [r7, #7]
    d496:	4619      	mov	r1, r3
    d498:	4806      	ldr	r0, [pc, #24]	; (d4b4 <_gpio_set_direction+0xd0>)
    d49a:	4b08      	ldr	r3, [pc, #32]	; (d4bc <_gpio_set_direction+0xd8>)
    d49c:	4798      	blx	r3
		break;
    d49e:	e004      	b.n	d4aa <_gpio_set_direction+0xc6>
		ASSERT(false);
    d4a0:	2246      	movs	r2, #70	; 0x46
    d4a2:	4908      	ldr	r1, [pc, #32]	; (d4c4 <_gpio_set_direction+0xe0>)
    d4a4:	2000      	movs	r0, #0
    d4a6:	4b08      	ldr	r3, [pc, #32]	; (d4c8 <_gpio_set_direction+0xe4>)
    d4a8:	4798      	blx	r3
}
    d4aa:	bf00      	nop
    d4ac:	3708      	adds	r7, #8
    d4ae:	46bd      	mov	sp, r7
    d4b0:	bd80      	pop	{r7, pc}
    d4b2:	bf00      	nop
    d4b4:	41008000 	.word	0x41008000
    d4b8:	0000d22b 	.word	0x0000d22b
    d4bc:	0000d3bb 	.word	0x0000d3bb
    d4c0:	0000d203 	.word	0x0000d203
    d4c4:	00011d08 	.word	0x00011d08
    d4c8:	00005545 	.word	0x00005545

0000d4cc <_gpio_set_level>:
{
    d4cc:	b580      	push	{r7, lr}
    d4ce:	b082      	sub	sp, #8
    d4d0:	af00      	add	r7, sp, #0
    d4d2:	4603      	mov	r3, r0
    d4d4:	6039      	str	r1, [r7, #0]
    d4d6:	71fb      	strb	r3, [r7, #7]
    d4d8:	4613      	mov	r3, r2
    d4da:	71bb      	strb	r3, [r7, #6]
	if (level) {
    d4dc:	79bb      	ldrb	r3, [r7, #6]
    d4de:	2b00      	cmp	r3, #0
    d4e0:	d006      	beq.n	d4f0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    d4e2:	79fb      	ldrb	r3, [r7, #7]
    d4e4:	683a      	ldr	r2, [r7, #0]
    d4e6:	4619      	mov	r1, r3
    d4e8:	4806      	ldr	r0, [pc, #24]	; (d504 <_gpio_set_level+0x38>)
    d4ea:	4b07      	ldr	r3, [pc, #28]	; (d508 <_gpio_set_level+0x3c>)
    d4ec:	4798      	blx	r3
}
    d4ee:	e005      	b.n	d4fc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    d4f0:	79fb      	ldrb	r3, [r7, #7]
    d4f2:	683a      	ldr	r2, [r7, #0]
    d4f4:	4619      	mov	r1, r3
    d4f6:	4803      	ldr	r0, [pc, #12]	; (d504 <_gpio_set_level+0x38>)
    d4f8:	4b04      	ldr	r3, [pc, #16]	; (d50c <_gpio_set_level+0x40>)
    d4fa:	4798      	blx	r3
}
    d4fc:	bf00      	nop
    d4fe:	3708      	adds	r7, #8
    d500:	46bd      	mov	sp, r7
    d502:	bd80      	pop	{r7, pc}
    d504:	41008000 	.word	0x41008000
    d508:	0000d253 	.word	0x0000d253
    d50c:	0000d27b 	.word	0x0000d27b

0000d510 <_gpio_set_pin_function>:
{
    d510:	b590      	push	{r4, r7, lr}
    d512:	b085      	sub	sp, #20
    d514:	af00      	add	r7, sp, #0
    d516:	6078      	str	r0, [r7, #4]
    d518:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    d51a:	687b      	ldr	r3, [r7, #4]
    d51c:	095b      	lsrs	r3, r3, #5
    d51e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    d520:	687b      	ldr	r3, [r7, #4]
    d522:	b2db      	uxtb	r3, r3
    d524:	f003 031f 	and.w	r3, r3, #31
    d528:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    d52a:	683b      	ldr	r3, [r7, #0]
    d52c:	f1b3 3fff 	cmp.w	r3, #4294967295
    d530:	d106      	bne.n	d540 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    d532:	7bba      	ldrb	r2, [r7, #14]
    d534:	7bf9      	ldrb	r1, [r7, #15]
    d536:	2300      	movs	r3, #0
    d538:	4812      	ldr	r0, [pc, #72]	; (d584 <_gpio_set_pin_function+0x74>)
    d53a:	4c13      	ldr	r4, [pc, #76]	; (d588 <_gpio_set_pin_function+0x78>)
    d53c:	47a0      	blx	r4
}
    d53e:	e01d      	b.n	d57c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    d540:	7bba      	ldrb	r2, [r7, #14]
    d542:	7bf9      	ldrb	r1, [r7, #15]
    d544:	2301      	movs	r3, #1
    d546:	480f      	ldr	r0, [pc, #60]	; (d584 <_gpio_set_pin_function+0x74>)
    d548:	4c0f      	ldr	r4, [pc, #60]	; (d588 <_gpio_set_pin_function+0x78>)
    d54a:	47a0      	blx	r4
		if (pin & 1) {
    d54c:	7bbb      	ldrb	r3, [r7, #14]
    d54e:	f003 0301 	and.w	r3, r3, #1
    d552:	2b00      	cmp	r3, #0
    d554:	d009      	beq.n	d56a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    d556:	7bbb      	ldrb	r3, [r7, #14]
    d558:	085b      	lsrs	r3, r3, #1
    d55a:	b2da      	uxtb	r2, r3
    d55c:	683b      	ldr	r3, [r7, #0]
    d55e:	b2db      	uxtb	r3, r3
    d560:	7bf9      	ldrb	r1, [r7, #15]
    d562:	4808      	ldr	r0, [pc, #32]	; (d584 <_gpio_set_pin_function+0x74>)
    d564:	4c09      	ldr	r4, [pc, #36]	; (d58c <_gpio_set_pin_function+0x7c>)
    d566:	47a0      	blx	r4
}
    d568:	e008      	b.n	d57c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    d56a:	7bbb      	ldrb	r3, [r7, #14]
    d56c:	085b      	lsrs	r3, r3, #1
    d56e:	b2da      	uxtb	r2, r3
    d570:	683b      	ldr	r3, [r7, #0]
    d572:	b2db      	uxtb	r3, r3
    d574:	7bf9      	ldrb	r1, [r7, #15]
    d576:	4803      	ldr	r0, [pc, #12]	; (d584 <_gpio_set_pin_function+0x74>)
    d578:	4c05      	ldr	r4, [pc, #20]	; (d590 <_gpio_set_pin_function+0x80>)
    d57a:	47a0      	blx	r4
}
    d57c:	bf00      	nop
    d57e:	3714      	adds	r7, #20
    d580:	46bd      	mov	sp, r7
    d582:	bd90      	pop	{r4, r7, pc}
    d584:	41008000 	.word	0x41008000
    d588:	0000d361 	.word	0x0000d361
    d58c:	0000d303 	.word	0x0000d303
    d590:	0000d2a3 	.word	0x0000d2a3

0000d594 <gpio_set_pin_function>:
{
    d594:	b580      	push	{r7, lr}
    d596:	b082      	sub	sp, #8
    d598:	af00      	add	r7, sp, #0
    d59a:	6078      	str	r0, [r7, #4]
    d59c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    d59e:	6839      	ldr	r1, [r7, #0]
    d5a0:	6878      	ldr	r0, [r7, #4]
    d5a2:	4b03      	ldr	r3, [pc, #12]	; (d5b0 <gpio_set_pin_function+0x1c>)
    d5a4:	4798      	blx	r3
}
    d5a6:	bf00      	nop
    d5a8:	3708      	adds	r7, #8
    d5aa:	46bd      	mov	sp, r7
    d5ac:	bd80      	pop	{r7, pc}
    d5ae:	bf00      	nop
    d5b0:	0000d511 	.word	0x0000d511

0000d5b4 <gpio_set_pin_direction>:
{
    d5b4:	b580      	push	{r7, lr}
    d5b6:	b082      	sub	sp, #8
    d5b8:	af00      	add	r7, sp, #0
    d5ba:	4603      	mov	r3, r0
    d5bc:	460a      	mov	r2, r1
    d5be:	71fb      	strb	r3, [r7, #7]
    d5c0:	4613      	mov	r3, r2
    d5c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    d5c4:	79fb      	ldrb	r3, [r7, #7]
    d5c6:	095b      	lsrs	r3, r3, #5
    d5c8:	b2d8      	uxtb	r0, r3
    d5ca:	79fb      	ldrb	r3, [r7, #7]
    d5cc:	f003 031f 	and.w	r3, r3, #31
    d5d0:	2201      	movs	r2, #1
    d5d2:	fa02 f303 	lsl.w	r3, r2, r3
    d5d6:	79ba      	ldrb	r2, [r7, #6]
    d5d8:	4619      	mov	r1, r3
    d5da:	4b03      	ldr	r3, [pc, #12]	; (d5e8 <gpio_set_pin_direction+0x34>)
    d5dc:	4798      	blx	r3
}
    d5de:	bf00      	nop
    d5e0:	3708      	adds	r7, #8
    d5e2:	46bd      	mov	sp, r7
    d5e4:	bd80      	pop	{r7, pc}
    d5e6:	bf00      	nop
    d5e8:	0000d3e5 	.word	0x0000d3e5

0000d5ec <gpio_set_pin_level>:
{
    d5ec:	b580      	push	{r7, lr}
    d5ee:	b082      	sub	sp, #8
    d5f0:	af00      	add	r7, sp, #0
    d5f2:	4603      	mov	r3, r0
    d5f4:	460a      	mov	r2, r1
    d5f6:	71fb      	strb	r3, [r7, #7]
    d5f8:	4613      	mov	r3, r2
    d5fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    d5fc:	79fb      	ldrb	r3, [r7, #7]
    d5fe:	095b      	lsrs	r3, r3, #5
    d600:	b2d8      	uxtb	r0, r3
    d602:	79fb      	ldrb	r3, [r7, #7]
    d604:	f003 031f 	and.w	r3, r3, #31
    d608:	2201      	movs	r2, #1
    d60a:	fa02 f303 	lsl.w	r3, r2, r3
    d60e:	79ba      	ldrb	r2, [r7, #6]
    d610:	4619      	mov	r1, r3
    d612:	4b03      	ldr	r3, [pc, #12]	; (d620 <gpio_set_pin_level+0x34>)
    d614:	4798      	blx	r3
}
    d616:	bf00      	nop
    d618:	3708      	adds	r7, #8
    d61a:	46bd      	mov	sp, r7
    d61c:	bd80      	pop	{r7, pc}
    d61e:	bf00      	nop
    d620:	0000d4cd 	.word	0x0000d4cd

0000d624 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    d624:	b580      	push	{r7, lr}
    d626:	b082      	sub	sp, #8
    d628:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    d62a:	2100      	movs	r1, #0
    d62c:	2008      	movs	r0, #8
    d62e:	4b24      	ldr	r3, [pc, #144]	; (d6c0 <QSPI_N25Q256_exit_xip+0x9c>)
    d630:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    d632:	2100      	movs	r1, #0
    d634:	202b      	movs	r0, #43	; 0x2b
    d636:	4b22      	ldr	r3, [pc, #136]	; (d6c0 <QSPI_N25Q256_exit_xip+0x9c>)
    d638:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    d63a:	2100      	movs	r1, #0
    d63c:	202a      	movs	r0, #42	; 0x2a
    d63e:	4b20      	ldr	r3, [pc, #128]	; (d6c0 <QSPI_N25Q256_exit_xip+0x9c>)
    d640:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    d642:	2102      	movs	r1, #2
    d644:	2008      	movs	r0, #8
    d646:	4b1f      	ldr	r3, [pc, #124]	; (d6c4 <QSPI_N25Q256_exit_xip+0xa0>)
    d648:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    d64a:	2102      	movs	r1, #2
    d64c:	202b      	movs	r0, #43	; 0x2b
    d64e:	4b1d      	ldr	r3, [pc, #116]	; (d6c4 <QSPI_N25Q256_exit_xip+0xa0>)
    d650:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    d652:	2102      	movs	r1, #2
    d654:	202a      	movs	r0, #42	; 0x2a
    d656:	4b1b      	ldr	r3, [pc, #108]	; (d6c4 <QSPI_N25Q256_exit_xip+0xa0>)
    d658:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    d65a:	2101      	movs	r1, #1
    d65c:	2008      	movs	r0, #8
    d65e:	4b1a      	ldr	r3, [pc, #104]	; (d6c8 <QSPI_N25Q256_exit_xip+0xa4>)
    d660:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    d662:	2100      	movs	r1, #0
    d664:	202b      	movs	r0, #43	; 0x2b
    d666:	4b18      	ldr	r3, [pc, #96]	; (d6c8 <QSPI_N25Q256_exit_xip+0xa4>)
    d668:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    d66a:	2100      	movs	r1, #0
    d66c:	202a      	movs	r0, #42	; 0x2a
    d66e:	4b16      	ldr	r3, [pc, #88]	; (d6c8 <QSPI_N25Q256_exit_xip+0xa4>)
    d670:	4798      	blx	r3

	delay_us(1);
    d672:	2001      	movs	r0, #1
    d674:	4b15      	ldr	r3, [pc, #84]	; (d6cc <QSPI_N25Q256_exit_xip+0xa8>)
    d676:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    d678:	2300      	movs	r3, #0
    d67a:	607b      	str	r3, [r7, #4]
    d67c:	e010      	b.n	d6a0 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    d67e:	2101      	movs	r1, #1
    d680:	202a      	movs	r0, #42	; 0x2a
    d682:	4b11      	ldr	r3, [pc, #68]	; (d6c8 <QSPI_N25Q256_exit_xip+0xa4>)
    d684:	4798      	blx	r3
		delay_us(1);
    d686:	2001      	movs	r0, #1
    d688:	4b10      	ldr	r3, [pc, #64]	; (d6cc <QSPI_N25Q256_exit_xip+0xa8>)
    d68a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    d68c:	2100      	movs	r1, #0
    d68e:	202a      	movs	r0, #42	; 0x2a
    d690:	4b0d      	ldr	r3, [pc, #52]	; (d6c8 <QSPI_N25Q256_exit_xip+0xa4>)
    d692:	4798      	blx	r3
		delay_us(1);
    d694:	2001      	movs	r0, #1
    d696:	4b0d      	ldr	r3, [pc, #52]	; (d6cc <QSPI_N25Q256_exit_xip+0xa8>)
    d698:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    d69a:	687b      	ldr	r3, [r7, #4]
    d69c:	3301      	adds	r3, #1
    d69e:	607b      	str	r3, [r7, #4]
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	2b06      	cmp	r3, #6
    d6a4:	ddeb      	ble.n	d67e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    d6a6:	2101      	movs	r1, #1
    d6a8:	202b      	movs	r0, #43	; 0x2b
    d6aa:	4b07      	ldr	r3, [pc, #28]	; (d6c8 <QSPI_N25Q256_exit_xip+0xa4>)
    d6ac:	4798      	blx	r3
	delay_us(1);
    d6ae:	2001      	movs	r0, #1
    d6b0:	4b06      	ldr	r3, [pc, #24]	; (d6cc <QSPI_N25Q256_exit_xip+0xa8>)
    d6b2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d6b4:	4b06      	ldr	r3, [pc, #24]	; (d6d0 <QSPI_N25Q256_exit_xip+0xac>)
    d6b6:	4798      	blx	r3
}
    d6b8:	bf00      	nop
    d6ba:	3708      	adds	r7, #8
    d6bc:	46bd      	mov	sp, r7
    d6be:	bd80      	pop	{r7, pc}
    d6c0:	0000d595 	.word	0x0000d595
    d6c4:	0000d5b5 	.word	0x0000d5b5
    d6c8:	0000d5ed 	.word	0x0000d5ed
    d6cc:	00003b15 	.word	0x00003b15
    d6d0:	00002e21 	.word	0x00002e21

0000d6d4 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    d6d4:	b598      	push	{r3, r4, r7, lr}
    d6d6:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    d6d8:	4806      	ldr	r0, [pc, #24]	; (d6f4 <spi_nor_flash_init+0x20>)
    d6da:	4b07      	ldr	r3, [pc, #28]	; (d6f8 <spi_nor_flash_init+0x24>)
    d6dc:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    d6de:	2300      	movs	r3, #0
    d6e0:	4a06      	ldr	r2, [pc, #24]	; (d6fc <spi_nor_flash_init+0x28>)
    d6e2:	4904      	ldr	r1, [pc, #16]	; (d6f4 <spi_nor_flash_init+0x20>)
    d6e4:	4806      	ldr	r0, [pc, #24]	; (d700 <spi_nor_flash_init+0x2c>)
    d6e6:	4c07      	ldr	r4, [pc, #28]	; (d704 <spi_nor_flash_init+0x30>)
    d6e8:	47a0      	blx	r4
    d6ea:	4602      	mov	r2, r0
    d6ec:	4b06      	ldr	r3, [pc, #24]	; (d708 <spi_nor_flash_init+0x34>)
    d6ee:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    d6f0:	bf00      	nop
    d6f2:	bd98      	pop	{r3, r4, r7, pc}
    d6f4:	2000220c 	.word	0x2000220c
    d6f8:	0000412d 	.word	0x0000412d
    d6fc:	0000d625 	.word	0x0000d625
    d700:	200020d8 	.word	0x200020d8
    d704:	0000cd01 	.word	0x0000cd01
    d708:	200023ac 	.word	0x200023ac

0000d70c <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    d70c:	b480      	push	{r7}
    d70e:	b083      	sub	sp, #12
    d710:	af00      	add	r7, sp, #0
    d712:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d714:	687b      	ldr	r3, [r7, #4]
    d716:	781b      	ldrb	r3, [r3, #0]
    d718:	b29a      	uxth	r2, r3
    d71a:	687b      	ldr	r3, [r7, #4]
    d71c:	3301      	adds	r3, #1
    d71e:	781b      	ldrb	r3, [r3, #0]
    d720:	b29b      	uxth	r3, r3
    d722:	021b      	lsls	r3, r3, #8
    d724:	b29b      	uxth	r3, r3
    d726:	4413      	add	r3, r2
    d728:	b29b      	uxth	r3, r3
}
    d72a:	4618      	mov	r0, r3
    d72c:	370c      	adds	r7, #12
    d72e:	46bd      	mov	sp, r7
    d730:	f85d 7b04 	ldr.w	r7, [sp], #4
    d734:	4770      	bx	lr

0000d736 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    d736:	b480      	push	{r7}
    d738:	b083      	sub	sp, #12
    d73a:	af00      	add	r7, sp, #0
    d73c:	6078      	str	r0, [r7, #4]
	return desc[0];
    d73e:	687b      	ldr	r3, [r7, #4]
    d740:	781b      	ldrb	r3, [r3, #0]
}
    d742:	4618      	mov	r0, r3
    d744:	370c      	adds	r7, #12
    d746:	46bd      	mov	sp, r7
    d748:	f85d 7b04 	ldr.w	r7, [sp], #4
    d74c:	4770      	bx	lr
	...

0000d750 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    d750:	b580      	push	{r7, lr}
    d752:	b082      	sub	sp, #8
    d754:	af00      	add	r7, sp, #0
    d756:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d758:	6878      	ldr	r0, [r7, #4]
    d75a:	4b05      	ldr	r3, [pc, #20]	; (d770 <usb_desc_next+0x20>)
    d75c:	4798      	blx	r3
    d75e:	4603      	mov	r3, r0
    d760:	461a      	mov	r2, r3
    d762:	687b      	ldr	r3, [r7, #4]
    d764:	4413      	add	r3, r2
}
    d766:	4618      	mov	r0, r3
    d768:	3708      	adds	r7, #8
    d76a:	46bd      	mov	sp, r7
    d76c:	bd80      	pop	{r7, pc}
    d76e:	bf00      	nop
    d770:	0000d737 	.word	0x0000d737

0000d774 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d774:	b580      	push	{r7, lr}
    d776:	b08c      	sub	sp, #48	; 0x30
    d778:	af00      	add	r7, sp, #0
    d77a:	6078      	str	r0, [r7, #4]
    d77c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d77e:	687b      	ldr	r3, [r7, #4]
    d780:	689b      	ldr	r3, [r3, #8]
    d782:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    d784:	683b      	ldr	r3, [r7, #0]
    d786:	681b      	ldr	r3, [r3, #0]
    d788:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d78a:	2300      	movs	r3, #0
    d78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d790:	e08f      	b.n	d8b2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d794:	2b00      	cmp	r3, #0
    d796:	d102      	bne.n	d79e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    d798:	f06f 0309 	mvn.w	r3, #9
    d79c:	e092      	b.n	d8c4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7a0:	789b      	ldrb	r3, [r3, #2]
    d7a2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7a6:	795b      	ldrb	r3, [r3, #5]
    d7a8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d7aa:	7c7b      	ldrb	r3, [r7, #17]
    d7ac:	2b02      	cmp	r3, #2
    d7ae:	d002      	beq.n	d7b6 <cdcdf_acm_enable+0x42>
    d7b0:	7c7b      	ldrb	r3, [r7, #17]
    d7b2:	2b0a      	cmp	r3, #10
    d7b4:	d121      	bne.n	d7fa <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d7ba:	6a3a      	ldr	r2, [r7, #32]
    d7bc:	5cd2      	ldrb	r2, [r2, r3]
    d7be:	7bbb      	ldrb	r3, [r7, #14]
    d7c0:	429a      	cmp	r2, r3
    d7c2:	d102      	bne.n	d7ca <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    d7c4:	f06f 0311 	mvn.w	r3, #17
    d7c8:	e07c      	b.n	d8c4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    d7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d7ce:	6a3a      	ldr	r2, [r7, #32]
    d7d0:	5cd3      	ldrb	r3, [r2, r3]
    d7d2:	2bff      	cmp	r3, #255	; 0xff
    d7d4:	d002      	beq.n	d7dc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    d7d6:	f06f 031b 	mvn.w	r3, #27
    d7da:	e073      	b.n	d8c4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    d7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d7e0:	7bb9      	ldrb	r1, [r7, #14]
    d7e2:	6a3a      	ldr	r2, [r7, #32]
    d7e4:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d7e6:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    d7e8:	683b      	ldr	r3, [r7, #0]
    d7ea:	685b      	ldr	r3, [r3, #4]
    d7ec:	2205      	movs	r2, #5
    d7ee:	4619      	mov	r1, r3
    d7f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d7f2:	4b36      	ldr	r3, [pc, #216]	; (d8cc <cdcdf_acm_enable+0x158>)
    d7f4:	4798      	blx	r3
    d7f6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d7f8:	e047      	b.n	d88a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    d7fa:	f06f 0309 	mvn.w	r3, #9
    d7fe:	e061      	b.n	d8c4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d802:	789b      	ldrb	r3, [r3, #2]
    d804:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d808:	78db      	ldrb	r3, [r3, #3]
    d80a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d80e:	3304      	adds	r3, #4
    d810:	4618      	mov	r0, r3
    d812:	4b2f      	ldr	r3, [pc, #188]	; (d8d0 <cdcdf_acm_enable+0x15c>)
    d814:	4798      	blx	r3
    d816:	4603      	mov	r3, r0
    d818:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d81a:	7ebb      	ldrb	r3, [r7, #26]
    d81c:	7ef9      	ldrb	r1, [r7, #27]
    d81e:	8bba      	ldrh	r2, [r7, #28]
    d820:	4618      	mov	r0, r3
    d822:	4b2c      	ldr	r3, [pc, #176]	; (d8d4 <cdcdf_acm_enable+0x160>)
    d824:	4798      	blx	r3
    d826:	4603      	mov	r3, r0
    d828:	2b00      	cmp	r3, #0
    d82a:	d002      	beq.n	d832 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    d82c:	f06f 0313 	mvn.w	r3, #19
    d830:	e048      	b.n	d8c4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d832:	7ebb      	ldrb	r3, [r7, #26]
    d834:	b25b      	sxtb	r3, r3
    d836:	2b00      	cmp	r3, #0
    d838:	da0f      	bge.n	d85a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    d83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d83e:	7eb9      	ldrb	r1, [r7, #26]
    d840:	6a3a      	ldr	r2, [r7, #32]
    d842:	4413      	add	r3, r2
    d844:	460a      	mov	r2, r1
    d846:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    d848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d84c:	6a3a      	ldr	r2, [r7, #32]
    d84e:	4413      	add	r3, r2
    d850:	789b      	ldrb	r3, [r3, #2]
    d852:	4618      	mov	r0, r3
    d854:	4b20      	ldr	r3, [pc, #128]	; (d8d8 <cdcdf_acm_enable+0x164>)
    d856:	4798      	blx	r3
    d858:	e007      	b.n	d86a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    d85a:	7eba      	ldrb	r2, [r7, #26]
    d85c:	6a3b      	ldr	r3, [r7, #32]
    d85e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    d860:	6a3b      	ldr	r3, [r7, #32]
    d862:	791b      	ldrb	r3, [r3, #4]
    d864:	4618      	mov	r0, r3
    d866:	4b1c      	ldr	r3, [pc, #112]	; (d8d8 <cdcdf_acm_enable+0x164>)
    d868:	4798      	blx	r3
			}
			desc->sod = ep;
    d86a:	683b      	ldr	r3, [r7, #0]
    d86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d86e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d870:	683b      	ldr	r3, [r7, #0]
    d872:	681b      	ldr	r3, [r3, #0]
    d874:	4618      	mov	r0, r3
    d876:	4b19      	ldr	r3, [pc, #100]	; (d8dc <cdcdf_acm_enable+0x168>)
    d878:	4798      	blx	r3
    d87a:	4602      	mov	r2, r0
    d87c:	683b      	ldr	r3, [r7, #0]
    d87e:	685b      	ldr	r3, [r3, #4]
    d880:	4619      	mov	r1, r3
    d882:	4610      	mov	r0, r2
    d884:	4b16      	ldr	r3, [pc, #88]	; (d8e0 <cdcdf_acm_enable+0x16c>)
    d886:	4798      	blx	r3
    d888:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d88c:	2b00      	cmp	r3, #0
    d88e:	d1b7      	bne.n	d800 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    d890:	683b      	ldr	r3, [r7, #0]
    d892:	681b      	ldr	r3, [r3, #0]
    d894:	4618      	mov	r0, r3
    d896:	4b11      	ldr	r3, [pc, #68]	; (d8dc <cdcdf_acm_enable+0x168>)
    d898:	4798      	blx	r3
    d89a:	683b      	ldr	r3, [r7, #0]
    d89c:	685b      	ldr	r3, [r3, #4]
    d89e:	2204      	movs	r2, #4
    d8a0:	4619      	mov	r1, r3
    d8a2:	4b0a      	ldr	r3, [pc, #40]	; (d8cc <cdcdf_acm_enable+0x158>)
    d8a4:	4798      	blx	r3
    d8a6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    d8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d8ac:	3301      	adds	r3, #1
    d8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    d8b6:	2b01      	cmp	r3, #1
    d8b8:	f67f af6b 	bls.w	d792 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    d8bc:	4b09      	ldr	r3, [pc, #36]	; (d8e4 <cdcdf_acm_enable+0x170>)
    d8be:	2201      	movs	r2, #1
    d8c0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d8c2:	2300      	movs	r3, #0
}
    d8c4:	4618      	mov	r0, r3
    d8c6:	3730      	adds	r7, #48	; 0x30
    d8c8:	46bd      	mov	sp, r7
    d8ca:	bd80      	pop	{r7, pc}
    d8cc:	0000eb35 	.word	0x0000eb35
    d8d0:	0000d70d 	.word	0x0000d70d
    d8d4:	000050d9 	.word	0x000050d9
    d8d8:	000051c5 	.word	0x000051c5
    d8dc:	0000d751 	.word	0x0000d751
    d8e0:	0000eb91 	.word	0x0000eb91
    d8e4:	200020f4 	.word	0x200020f4

0000d8e8 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    d8e8:	b580      	push	{r7, lr}
    d8ea:	b088      	sub	sp, #32
    d8ec:	af00      	add	r7, sp, #0
    d8ee:	6078      	str	r0, [r7, #4]
    d8f0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d8f2:	687b      	ldr	r3, [r7, #4]
    d8f4:	689b      	ldr	r3, [r3, #8]
    d8f6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    d8f8:	683b      	ldr	r3, [r7, #0]
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d00c      	beq.n	d918 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d8fe:	683b      	ldr	r3, [r7, #0]
    d900:	681b      	ldr	r3, [r3, #0]
    d902:	795b      	ldrb	r3, [r3, #5]
    d904:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    d906:	7c7b      	ldrb	r3, [r7, #17]
    d908:	2b02      	cmp	r3, #2
    d90a:	d005      	beq.n	d918 <cdcdf_acm_disable+0x30>
    d90c:	7c7b      	ldrb	r3, [r7, #17]
    d90e:	2b0a      	cmp	r3, #10
    d910:	d002      	beq.n	d918 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    d912:	f06f 0309 	mvn.w	r3, #9
    d916:	e035      	b.n	d984 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    d918:	2300      	movs	r3, #0
    d91a:	77fb      	strb	r3, [r7, #31]
    d91c:	e01f      	b.n	d95e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    d91e:	7ffb      	ldrb	r3, [r7, #31]
    d920:	69ba      	ldr	r2, [r7, #24]
    d922:	5cd3      	ldrb	r3, [r2, r3]
    d924:	2bff      	cmp	r3, #255	; 0xff
    d926:	d016      	beq.n	d956 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    d928:	7ffb      	ldrb	r3, [r7, #31]
    d92a:	69ba      	ldr	r2, [r7, #24]
    d92c:	21ff      	movs	r1, #255	; 0xff
    d92e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    d930:	7ffb      	ldrb	r3, [r7, #31]
    d932:	69ba      	ldr	r2, [r7, #24]
    d934:	4413      	add	r3, r2
    d936:	789b      	ldrb	r3, [r3, #2]
    d938:	2bff      	cmp	r3, #255	; 0xff
    d93a:	d00d      	beq.n	d958 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d93c:	7ffb      	ldrb	r3, [r7, #31]
    d93e:	69ba      	ldr	r2, [r7, #24]
    d940:	4413      	add	r3, r2
    d942:	789b      	ldrb	r3, [r3, #2]
    d944:	4618      	mov	r0, r3
    d946:	4b11      	ldr	r3, [pc, #68]	; (d98c <cdcdf_acm_disable+0xa4>)
    d948:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    d94a:	7ffb      	ldrb	r3, [r7, #31]
    d94c:	69ba      	ldr	r2, [r7, #24]
    d94e:	4413      	add	r3, r2
    d950:	22ff      	movs	r2, #255	; 0xff
    d952:	709a      	strb	r2, [r3, #2]
    d954:	e000      	b.n	d958 <cdcdf_acm_disable+0x70>
			continue;
    d956:	bf00      	nop
	for (i = 0; i < 2; i++) {
    d958:	7ffb      	ldrb	r3, [r7, #31]
    d95a:	3301      	adds	r3, #1
    d95c:	77fb      	strb	r3, [r7, #31]
    d95e:	7ffb      	ldrb	r3, [r7, #31]
    d960:	2b01      	cmp	r3, #1
    d962:	d9dc      	bls.n	d91e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    d964:	69bb      	ldr	r3, [r7, #24]
    d966:	791b      	ldrb	r3, [r3, #4]
    d968:	2bff      	cmp	r3, #255	; 0xff
    d96a:	d007      	beq.n	d97c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    d96c:	69bb      	ldr	r3, [r7, #24]
    d96e:	791b      	ldrb	r3, [r3, #4]
    d970:	4618      	mov	r0, r3
    d972:	4b06      	ldr	r3, [pc, #24]	; (d98c <cdcdf_acm_disable+0xa4>)
    d974:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    d976:	69bb      	ldr	r3, [r7, #24]
    d978:	22ff      	movs	r2, #255	; 0xff
    d97a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    d97c:	4b04      	ldr	r3, [pc, #16]	; (d990 <cdcdf_acm_disable+0xa8>)
    d97e:	2200      	movs	r2, #0
    d980:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d982:	2300      	movs	r3, #0
}
    d984:	4618      	mov	r0, r3
    d986:	3720      	adds	r7, #32
    d988:	46bd      	mov	sp, r7
    d98a:	bd80      	pop	{r7, pc}
    d98c:	00005175 	.word	0x00005175
    d990:	200020f4 	.word	0x200020f4

0000d994 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    d994:	b580      	push	{r7, lr}
    d996:	b084      	sub	sp, #16
    d998:	af00      	add	r7, sp, #0
    d99a:	60f8      	str	r0, [r7, #12]
    d99c:	460b      	mov	r3, r1
    d99e:	607a      	str	r2, [r7, #4]
    d9a0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    d9a2:	7afb      	ldrb	r3, [r7, #11]
    d9a4:	2b01      	cmp	r3, #1
    d9a6:	d009      	beq.n	d9bc <cdcdf_acm_ctrl+0x28>
    d9a8:	2b02      	cmp	r3, #2
    d9aa:	d00d      	beq.n	d9c8 <cdcdf_acm_ctrl+0x34>
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d10e      	bne.n	d9ce <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    d9b0:	6879      	ldr	r1, [r7, #4]
    d9b2:	68f8      	ldr	r0, [r7, #12]
    d9b4:	4b09      	ldr	r3, [pc, #36]	; (d9dc <cdcdf_acm_ctrl+0x48>)
    d9b6:	4798      	blx	r3
    d9b8:	4603      	mov	r3, r0
    d9ba:	e00a      	b.n	d9d2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    d9bc:	6879      	ldr	r1, [r7, #4]
    d9be:	68f8      	ldr	r0, [r7, #12]
    d9c0:	4b07      	ldr	r3, [pc, #28]	; (d9e0 <cdcdf_acm_ctrl+0x4c>)
    d9c2:	4798      	blx	r3
    d9c4:	4603      	mov	r3, r0
    d9c6:	e004      	b.n	d9d2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    d9c8:	f06f 031a 	mvn.w	r3, #26
    d9cc:	e001      	b.n	d9d2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    d9ce:	f06f 030c 	mvn.w	r3, #12
	}
}
    d9d2:	4618      	mov	r0, r3
    d9d4:	3710      	adds	r7, #16
    d9d6:	46bd      	mov	sp, r7
    d9d8:	bd80      	pop	{r7, pc}
    d9da:	bf00      	nop
    d9dc:	0000d775 	.word	0x0000d775
    d9e0:	0000d8e9 	.word	0x0000d8e9

0000d9e4 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d9e4:	b590      	push	{r4, r7, lr}
    d9e6:	b087      	sub	sp, #28
    d9e8:	af00      	add	r7, sp, #0
    d9ea:	4603      	mov	r3, r0
    d9ec:	6039      	str	r1, [r7, #0]
    d9ee:	71fb      	strb	r3, [r7, #7]
    d9f0:	4613      	mov	r3, r2
    d9f2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    d9f4:	683b      	ldr	r3, [r7, #0]
    d9f6:	799a      	ldrb	r2, [r3, #6]
    d9f8:	79db      	ldrb	r3, [r3, #7]
    d9fa:	021b      	lsls	r3, r3, #8
    d9fc:	4313      	orrs	r3, r2
    d9fe:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    da00:	4b2b      	ldr	r3, [pc, #172]	; (dab0 <cdcdf_acm_set_req+0xcc>)
    da02:	4798      	blx	r3
    da04:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    da06:	683b      	ldr	r3, [r7, #0]
    da08:	785b      	ldrb	r3, [r3, #1]
    da0a:	2b20      	cmp	r3, #32
    da0c:	d002      	beq.n	da14 <cdcdf_acm_set_req+0x30>
    da0e:	2b22      	cmp	r3, #34	; 0x22
    da10:	d034      	beq.n	da7c <cdcdf_acm_set_req+0x98>
    da12:	e046      	b.n	daa2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    da14:	8afb      	ldrh	r3, [r7, #22]
    da16:	2b07      	cmp	r3, #7
    da18:	d002      	beq.n	da20 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    da1a:	f04f 33ff 	mov.w	r3, #4294967295
    da1e:	e042      	b.n	daa6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    da20:	79bb      	ldrb	r3, [r7, #6]
    da22:	2b00      	cmp	r3, #0
    da24:	d107      	bne.n	da36 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    da26:	8afa      	ldrh	r2, [r7, #22]
    da28:	79f8      	ldrb	r0, [r7, #7]
    da2a:	2300      	movs	r3, #0
    da2c:	6939      	ldr	r1, [r7, #16]
    da2e:	4c21      	ldr	r4, [pc, #132]	; (dab4 <cdcdf_acm_set_req+0xd0>)
    da30:	47a0      	blx	r4
    da32:	4603      	mov	r3, r0
    da34:	e037      	b.n	daa6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    da36:	693a      	ldr	r2, [r7, #16]
    da38:	f107 0308 	add.w	r3, r7, #8
    da3c:	6810      	ldr	r0, [r2, #0]
    da3e:	6018      	str	r0, [r3, #0]
    da40:	8891      	ldrh	r1, [r2, #4]
    da42:	7992      	ldrb	r2, [r2, #6]
    da44:	8099      	strh	r1, [r3, #4]
    da46:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    da48:	4b1b      	ldr	r3, [pc, #108]	; (dab8 <cdcdf_acm_set_req+0xd4>)
    da4a:	681b      	ldr	r3, [r3, #0]
    da4c:	2b00      	cmp	r3, #0
    da4e:	d008      	beq.n	da62 <cdcdf_acm_set_req+0x7e>
    da50:	4b19      	ldr	r3, [pc, #100]	; (dab8 <cdcdf_acm_set_req+0xd4>)
    da52:	681b      	ldr	r3, [r3, #0]
    da54:	f107 0208 	add.w	r2, r7, #8
    da58:	4610      	mov	r0, r2
    da5a:	4798      	blx	r3
    da5c:	4603      	mov	r3, r0
    da5e:	2b00      	cmp	r3, #0
    da60:	d00a      	beq.n	da78 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    da62:	4b16      	ldr	r3, [pc, #88]	; (dabc <cdcdf_acm_set_req+0xd8>)
    da64:	f107 0208 	add.w	r2, r7, #8
    da68:	e892 0003 	ldmia.w	r2, {r0, r1}
    da6c:	6018      	str	r0, [r3, #0]
    da6e:	3304      	adds	r3, #4
    da70:	8019      	strh	r1, [r3, #0]
    da72:	3302      	adds	r3, #2
    da74:	0c0a      	lsrs	r2, r1, #16
    da76:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    da78:	2300      	movs	r3, #0
    da7a:	e014      	b.n	daa6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    da7c:	2300      	movs	r3, #0
    da7e:	2200      	movs	r2, #0
    da80:	2100      	movs	r1, #0
    da82:	2000      	movs	r0, #0
    da84:	4c0b      	ldr	r4, [pc, #44]	; (dab4 <cdcdf_acm_set_req+0xd0>)
    da86:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    da88:	4b0d      	ldr	r3, [pc, #52]	; (dac0 <cdcdf_acm_set_req+0xdc>)
    da8a:	681b      	ldr	r3, [r3, #0]
    da8c:	2b00      	cmp	r3, #0
    da8e:	d006      	beq.n	da9e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    da90:	4b0b      	ldr	r3, [pc, #44]	; (dac0 <cdcdf_acm_set_req+0xdc>)
    da92:	681b      	ldr	r3, [r3, #0]
    da94:	683a      	ldr	r2, [r7, #0]
    da96:	8852      	ldrh	r2, [r2, #2]
    da98:	b292      	uxth	r2, r2
    da9a:	4610      	mov	r0, r2
    da9c:	4798      	blx	r3
		}
		return ERR_NONE;
    da9e:	2300      	movs	r3, #0
    daa0:	e001      	b.n	daa6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    daa2:	f06f 030c 	mvn.w	r3, #12
	}
}
    daa6:	4618      	mov	r0, r3
    daa8:	371c      	adds	r7, #28
    daaa:	46bd      	mov	sp, r7
    daac:	bd90      	pop	{r4, r7, pc}
    daae:	bf00      	nop
    dab0:	0000ea31 	.word	0x0000ea31
    dab4:	0000e8a5 	.word	0x0000e8a5
    dab8:	20002108 	.word	0x20002108
    dabc:	200020fc 	.word	0x200020fc
    dac0:	20002104 	.word	0x20002104

0000dac4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dac4:	b590      	push	{r4, r7, lr}
    dac6:	b085      	sub	sp, #20
    dac8:	af00      	add	r7, sp, #0
    daca:	4603      	mov	r3, r0
    dacc:	6039      	str	r1, [r7, #0]
    dace:	71fb      	strb	r3, [r7, #7]
    dad0:	4613      	mov	r3, r2
    dad2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    dad4:	683b      	ldr	r3, [r7, #0]
    dad6:	799a      	ldrb	r2, [r3, #6]
    dad8:	79db      	ldrb	r3, [r3, #7]
    dada:	021b      	lsls	r3, r3, #8
    dadc:	4313      	orrs	r3, r2
    dade:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    dae0:	79bb      	ldrb	r3, [r7, #6]
    dae2:	2b01      	cmp	r3, #1
    dae4:	d101      	bne.n	daea <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    dae6:	2300      	movs	r3, #0
    dae8:	e013      	b.n	db12 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    daea:	683b      	ldr	r3, [r7, #0]
    daec:	785b      	ldrb	r3, [r3, #1]
    daee:	2b21      	cmp	r3, #33	; 0x21
    daf0:	d10d      	bne.n	db0e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    daf2:	89fb      	ldrh	r3, [r7, #14]
    daf4:	2b07      	cmp	r3, #7
    daf6:	d002      	beq.n	dafe <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    daf8:	f04f 33ff 	mov.w	r3, #4294967295
    dafc:	e009      	b.n	db12 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    dafe:	89fa      	ldrh	r2, [r7, #14]
    db00:	79f8      	ldrb	r0, [r7, #7]
    db02:	2300      	movs	r3, #0
    db04:	4905      	ldr	r1, [pc, #20]	; (db1c <cdcdf_acm_get_req+0x58>)
    db06:	4c06      	ldr	r4, [pc, #24]	; (db20 <cdcdf_acm_get_req+0x5c>)
    db08:	47a0      	blx	r4
    db0a:	4603      	mov	r3, r0
    db0c:	e001      	b.n	db12 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    db0e:	f06f 030c 	mvn.w	r3, #12
	}
}
    db12:	4618      	mov	r0, r3
    db14:	3714      	adds	r7, #20
    db16:	46bd      	mov	sp, r7
    db18:	bd90      	pop	{r4, r7, pc}
    db1a:	bf00      	nop
    db1c:	200020fc 	.word	0x200020fc
    db20:	0000e8a5 	.word	0x0000e8a5

0000db24 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    db24:	b580      	push	{r7, lr}
    db26:	b082      	sub	sp, #8
    db28:	af00      	add	r7, sp, #0
    db2a:	4603      	mov	r3, r0
    db2c:	6039      	str	r1, [r7, #0]
    db2e:	71fb      	strb	r3, [r7, #7]
    db30:	4613      	mov	r3, r2
    db32:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    db34:	683b      	ldr	r3, [r7, #0]
    db36:	781b      	ldrb	r3, [r3, #0]
    db38:	095b      	lsrs	r3, r3, #5
    db3a:	b2db      	uxtb	r3, r3
    db3c:	f003 0303 	and.w	r3, r3, #3
    db40:	2b01      	cmp	r3, #1
    db42:	d002      	beq.n	db4a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    db44:	f06f 0309 	mvn.w	r3, #9
    db48:	e026      	b.n	db98 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    db4a:	683b      	ldr	r3, [r7, #0]
    db4c:	889b      	ldrh	r3, [r3, #4]
    db4e:	b29a      	uxth	r2, r3
    db50:	4b13      	ldr	r3, [pc, #76]	; (dba0 <cdcdf_acm_req+0x7c>)
    db52:	781b      	ldrb	r3, [r3, #0]
    db54:	b29b      	uxth	r3, r3
    db56:	429a      	cmp	r2, r3
    db58:	d007      	beq.n	db6a <cdcdf_acm_req+0x46>
    db5a:	683b      	ldr	r3, [r7, #0]
    db5c:	889b      	ldrh	r3, [r3, #4]
    db5e:	b29a      	uxth	r2, r3
    db60:	4b0f      	ldr	r3, [pc, #60]	; (dba0 <cdcdf_acm_req+0x7c>)
    db62:	785b      	ldrb	r3, [r3, #1]
    db64:	b29b      	uxth	r3, r3
    db66:	429a      	cmp	r2, r3
    db68:	d114      	bne.n	db94 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    db6a:	683b      	ldr	r3, [r7, #0]
    db6c:	781b      	ldrb	r3, [r3, #0]
    db6e:	b25b      	sxtb	r3, r3
    db70:	2b00      	cmp	r3, #0
    db72:	da07      	bge.n	db84 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    db74:	79ba      	ldrb	r2, [r7, #6]
    db76:	79fb      	ldrb	r3, [r7, #7]
    db78:	6839      	ldr	r1, [r7, #0]
    db7a:	4618      	mov	r0, r3
    db7c:	4b09      	ldr	r3, [pc, #36]	; (dba4 <cdcdf_acm_req+0x80>)
    db7e:	4798      	blx	r3
    db80:	4603      	mov	r3, r0
    db82:	e009      	b.n	db98 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    db84:	79ba      	ldrb	r2, [r7, #6]
    db86:	79fb      	ldrb	r3, [r7, #7]
    db88:	6839      	ldr	r1, [r7, #0]
    db8a:	4618      	mov	r0, r3
    db8c:	4b06      	ldr	r3, [pc, #24]	; (dba8 <cdcdf_acm_req+0x84>)
    db8e:	4798      	blx	r3
    db90:	4603      	mov	r3, r0
    db92:	e001      	b.n	db98 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    db94:	f06f 0309 	mvn.w	r3, #9
	}
}
    db98:	4618      	mov	r0, r3
    db9a:	3708      	adds	r7, #8
    db9c:	46bd      	mov	sp, r7
    db9e:	bd80      	pop	{r7, pc}
    dba0:	200020f4 	.word	0x200020f4
    dba4:	0000dac5 	.word	0x0000dac5
    dba8:	0000d9e5 	.word	0x0000d9e5

0000dbac <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    dbac:	b580      	push	{r7, lr}
    dbae:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    dbb0:	4b0b      	ldr	r3, [pc, #44]	; (dbe0 <cdcdf_acm_init+0x34>)
    dbb2:	4798      	blx	r3
    dbb4:	4603      	mov	r3, r0
    dbb6:	2b01      	cmp	r3, #1
    dbb8:	d902      	bls.n	dbc0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    dbba:	f06f 0310 	mvn.w	r3, #16
    dbbe:	e00d      	b.n	dbdc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    dbc0:	4b08      	ldr	r3, [pc, #32]	; (dbe4 <cdcdf_acm_init+0x38>)
    dbc2:	4a09      	ldr	r2, [pc, #36]	; (dbe8 <cdcdf_acm_init+0x3c>)
    dbc4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    dbc6:	4b07      	ldr	r3, [pc, #28]	; (dbe4 <cdcdf_acm_init+0x38>)
    dbc8:	4a08      	ldr	r2, [pc, #32]	; (dbec <cdcdf_acm_init+0x40>)
    dbca:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    dbcc:	4805      	ldr	r0, [pc, #20]	; (dbe4 <cdcdf_acm_init+0x38>)
    dbce:	4b08      	ldr	r3, [pc, #32]	; (dbf0 <cdcdf_acm_init+0x44>)
    dbd0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    dbd2:	4908      	ldr	r1, [pc, #32]	; (dbf4 <cdcdf_acm_init+0x48>)
    dbd4:	2001      	movs	r0, #1
    dbd6:	4b08      	ldr	r3, [pc, #32]	; (dbf8 <cdcdf_acm_init+0x4c>)
    dbd8:	4798      	blx	r3
	return ERR_NONE;
    dbda:	2300      	movs	r3, #0
}
    dbdc:	4618      	mov	r0, r3
    dbde:	bd80      	pop	{r7, pc}
    dbe0:	0000ea49 	.word	0x0000ea49
    dbe4:	200020e8 	.word	0x200020e8
    dbe8:	0000d995 	.word	0x0000d995
    dbec:	200020f4 	.word	0x200020f4
    dbf0:	0000e9b1 	.word	0x0000e9b1
    dbf4:	200000ac 	.word	0x200000ac
    dbf8:	0000e8e1 	.word	0x0000e8e1

0000dbfc <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    dbfc:	b590      	push	{r4, r7, lr}
    dbfe:	b083      	sub	sp, #12
    dc00:	af00      	add	r7, sp, #0
    dc02:	6078      	str	r0, [r7, #4]
    dc04:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    dc06:	4b0b      	ldr	r3, [pc, #44]	; (dc34 <cdcdf_acm_read+0x38>)
    dc08:	4798      	blx	r3
    dc0a:	4603      	mov	r3, r0
    dc0c:	f083 0301 	eor.w	r3, r3, #1
    dc10:	b2db      	uxtb	r3, r3
    dc12:	2b00      	cmp	r3, #0
    dc14:	d002      	beq.n	dc1c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    dc16:	f06f 0310 	mvn.w	r3, #16
    dc1a:	e007      	b.n	dc2c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    dc1c:	4b06      	ldr	r3, [pc, #24]	; (dc38 <cdcdf_acm_read+0x3c>)
    dc1e:	7918      	ldrb	r0, [r3, #4]
    dc20:	2300      	movs	r3, #0
    dc22:	683a      	ldr	r2, [r7, #0]
    dc24:	6879      	ldr	r1, [r7, #4]
    dc26:	4c05      	ldr	r4, [pc, #20]	; (dc3c <cdcdf_acm_read+0x40>)
    dc28:	47a0      	blx	r4
    dc2a:	4603      	mov	r3, r0
}
    dc2c:	4618      	mov	r0, r3
    dc2e:	370c      	adds	r7, #12
    dc30:	46bd      	mov	sp, r7
    dc32:	bd90      	pop	{r4, r7, pc}
    dc34:	0000dd21 	.word	0x0000dd21
    dc38:	200020f4 	.word	0x200020f4
    dc3c:	0000e8a5 	.word	0x0000e8a5

0000dc40 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    dc40:	b590      	push	{r4, r7, lr}
    dc42:	b083      	sub	sp, #12
    dc44:	af00      	add	r7, sp, #0
    dc46:	6078      	str	r0, [r7, #4]
    dc48:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    dc4a:	4b0b      	ldr	r3, [pc, #44]	; (dc78 <cdcdf_acm_write+0x38>)
    dc4c:	4798      	blx	r3
    dc4e:	4603      	mov	r3, r0
    dc50:	f083 0301 	eor.w	r3, r3, #1
    dc54:	b2db      	uxtb	r3, r3
    dc56:	2b00      	cmp	r3, #0
    dc58:	d002      	beq.n	dc60 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    dc5a:	f06f 0310 	mvn.w	r3, #16
    dc5e:	e007      	b.n	dc70 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    dc60:	4b06      	ldr	r3, [pc, #24]	; (dc7c <cdcdf_acm_write+0x3c>)
    dc62:	78d8      	ldrb	r0, [r3, #3]
    dc64:	2301      	movs	r3, #1
    dc66:	683a      	ldr	r2, [r7, #0]
    dc68:	6879      	ldr	r1, [r7, #4]
    dc6a:	4c05      	ldr	r4, [pc, #20]	; (dc80 <cdcdf_acm_write+0x40>)
    dc6c:	47a0      	blx	r4
    dc6e:	4603      	mov	r3, r0
}
    dc70:	4618      	mov	r0, r3
    dc72:	370c      	adds	r7, #12
    dc74:	46bd      	mov	sp, r7
    dc76:	bd90      	pop	{r4, r7, pc}
    dc78:	0000dd21 	.word	0x0000dd21
    dc7c:	200020f4 	.word	0x200020f4
    dc80:	0000e8a5 	.word	0x0000e8a5

0000dc84 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    dc84:	b580      	push	{r7, lr}
    dc86:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    dc88:	4b05      	ldr	r3, [pc, #20]	; (dca0 <cdcdf_acm_stop_xfer+0x1c>)
    dc8a:	78db      	ldrb	r3, [r3, #3]
    dc8c:	4618      	mov	r0, r3
    dc8e:	4b05      	ldr	r3, [pc, #20]	; (dca4 <cdcdf_acm_stop_xfer+0x20>)
    dc90:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    dc92:	4b03      	ldr	r3, [pc, #12]	; (dca0 <cdcdf_acm_stop_xfer+0x1c>)
    dc94:	791b      	ldrb	r3, [r3, #4]
    dc96:	4618      	mov	r0, r3
    dc98:	4b02      	ldr	r3, [pc, #8]	; (dca4 <cdcdf_acm_stop_xfer+0x20>)
    dc9a:	4798      	blx	r3
}
    dc9c:	bf00      	nop
    dc9e:	bd80      	pop	{r7, pc}
    dca0:	200020f4 	.word	0x200020f4
    dca4:	0000539d 	.word	0x0000539d

0000dca8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    dca8:	b580      	push	{r7, lr}
    dcaa:	b082      	sub	sp, #8
    dcac:	af00      	add	r7, sp, #0
    dcae:	4603      	mov	r3, r0
    dcb0:	6039      	str	r1, [r7, #0]
    dcb2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    dcb4:	79fb      	ldrb	r3, [r7, #7]
    dcb6:	2b03      	cmp	r3, #3
    dcb8:	d822      	bhi.n	dd00 <cdcdf_acm_register_callback+0x58>
    dcba:	a201      	add	r2, pc, #4	; (adr r2, dcc0 <cdcdf_acm_register_callback+0x18>)
    dcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dcc0:	0000dcd1 	.word	0x0000dcd1
    dcc4:	0000dce1 	.word	0x0000dce1
    dcc8:	0000dcf1 	.word	0x0000dcf1
    dccc:	0000dcf9 	.word	0x0000dcf9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    dcd0:	4b0f      	ldr	r3, [pc, #60]	; (dd10 <cdcdf_acm_register_callback+0x68>)
    dcd2:	791b      	ldrb	r3, [r3, #4]
    dcd4:	683a      	ldr	r2, [r7, #0]
    dcd6:	2102      	movs	r1, #2
    dcd8:	4618      	mov	r0, r3
    dcda:	4b0e      	ldr	r3, [pc, #56]	; (dd14 <cdcdf_acm_register_callback+0x6c>)
    dcdc:	4798      	blx	r3
		break;
    dcde:	e012      	b.n	dd06 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    dce0:	4b0b      	ldr	r3, [pc, #44]	; (dd10 <cdcdf_acm_register_callback+0x68>)
    dce2:	78db      	ldrb	r3, [r3, #3]
    dce4:	683a      	ldr	r2, [r7, #0]
    dce6:	2102      	movs	r1, #2
    dce8:	4618      	mov	r0, r3
    dcea:	4b0a      	ldr	r3, [pc, #40]	; (dd14 <cdcdf_acm_register_callback+0x6c>)
    dcec:	4798      	blx	r3
		break;
    dcee:	e00a      	b.n	dd06 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    dcf0:	4a09      	ldr	r2, [pc, #36]	; (dd18 <cdcdf_acm_register_callback+0x70>)
    dcf2:	683b      	ldr	r3, [r7, #0]
    dcf4:	6013      	str	r3, [r2, #0]
		break;
    dcf6:	e006      	b.n	dd06 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    dcf8:	4a08      	ldr	r2, [pc, #32]	; (dd1c <cdcdf_acm_register_callback+0x74>)
    dcfa:	683b      	ldr	r3, [r7, #0]
    dcfc:	6013      	str	r3, [r2, #0]
		break;
    dcfe:	e002      	b.n	dd06 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    dd00:	f06f 030c 	mvn.w	r3, #12
    dd04:	e000      	b.n	dd08 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    dd06:	2300      	movs	r3, #0
}
    dd08:	4618      	mov	r0, r3
    dd0a:	3708      	adds	r7, #8
    dd0c:	46bd      	mov	sp, r7
    dd0e:	bd80      	pop	{r7, pc}
    dd10:	200020f4 	.word	0x200020f4
    dd14:	000054c9 	.word	0x000054c9
    dd18:	20002108 	.word	0x20002108
    dd1c:	20002104 	.word	0x20002104

0000dd20 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    dd20:	b480      	push	{r7}
    dd22:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    dd24:	4b03      	ldr	r3, [pc, #12]	; (dd34 <cdcdf_acm_is_enabled+0x14>)
    dd26:	795b      	ldrb	r3, [r3, #5]
}
    dd28:	4618      	mov	r0, r3
    dd2a:	46bd      	mov	sp, r7
    dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd30:	4770      	bx	lr
    dd32:	bf00      	nop
    dd34:	200020f4 	.word	0x200020f4

0000dd38 <usb_get_u16>:
{
    dd38:	b480      	push	{r7}
    dd3a:	b083      	sub	sp, #12
    dd3c:	af00      	add	r7, sp, #0
    dd3e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dd40:	687b      	ldr	r3, [r7, #4]
    dd42:	781b      	ldrb	r3, [r3, #0]
    dd44:	b29a      	uxth	r2, r3
    dd46:	687b      	ldr	r3, [r7, #4]
    dd48:	3301      	adds	r3, #1
    dd4a:	781b      	ldrb	r3, [r3, #0]
    dd4c:	b29b      	uxth	r3, r3
    dd4e:	021b      	lsls	r3, r3, #8
    dd50:	b29b      	uxth	r3, r3
    dd52:	4413      	add	r3, r2
    dd54:	b29b      	uxth	r3, r3
}
    dd56:	4618      	mov	r0, r3
    dd58:	370c      	adds	r7, #12
    dd5a:	46bd      	mov	sp, r7
    dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd60:	4770      	bx	lr

0000dd62 <usb_desc_len>:
{
    dd62:	b480      	push	{r7}
    dd64:	b083      	sub	sp, #12
    dd66:	af00      	add	r7, sp, #0
    dd68:	6078      	str	r0, [r7, #4]
	return desc[0];
    dd6a:	687b      	ldr	r3, [r7, #4]
    dd6c:	781b      	ldrb	r3, [r3, #0]
}
    dd6e:	4618      	mov	r0, r3
    dd70:	370c      	adds	r7, #12
    dd72:	46bd      	mov	sp, r7
    dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd78:	4770      	bx	lr
	...

0000dd7c <usb_desc_next>:
{
    dd7c:	b580      	push	{r7, lr}
    dd7e:	b082      	sub	sp, #8
    dd80:	af00      	add	r7, sp, #0
    dd82:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    dd84:	6878      	ldr	r0, [r7, #4]
    dd86:	4b05      	ldr	r3, [pc, #20]	; (dd9c <usb_desc_next+0x20>)
    dd88:	4798      	blx	r3
    dd8a:	4603      	mov	r3, r0
    dd8c:	461a      	mov	r2, r3
    dd8e:	687b      	ldr	r3, [r7, #4]
    dd90:	4413      	add	r3, r2
}
    dd92:	4618      	mov	r0, r3
    dd94:	3708      	adds	r7, #8
    dd96:	46bd      	mov	sp, r7
    dd98:	bd80      	pop	{r7, pc}
    dd9a:	bf00      	nop
    dd9c:	0000dd63 	.word	0x0000dd63

0000dda0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    dda0:	b580      	push	{r7, lr}
    dda2:	b082      	sub	sp, #8
    dda4:	af00      	add	r7, sp, #0
    dda6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    dda8:	687b      	ldr	r3, [r7, #4]
    ddaa:	3302      	adds	r3, #2
    ddac:	4618      	mov	r0, r3
    ddae:	4b03      	ldr	r3, [pc, #12]	; (ddbc <usb_cfg_desc_total_len+0x1c>)
    ddb0:	4798      	blx	r3
    ddb2:	4603      	mov	r3, r0
}
    ddb4:	4618      	mov	r0, r3
    ddb6:	3708      	adds	r7, #8
    ddb8:	46bd      	mov	sp, r7
    ddba:	bd80      	pop	{r7, pc}
    ddbc:	0000dd39 	.word	0x0000dd39

0000ddc0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ddc0:	b590      	push	{r4, r7, lr}
    ddc2:	b085      	sub	sp, #20
    ddc4:	af00      	add	r7, sp, #0
    ddc6:	4603      	mov	r3, r0
    ddc8:	6039      	str	r1, [r7, #0]
    ddca:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    ddcc:	2300      	movs	r3, #0
    ddce:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    ddd0:	683b      	ldr	r3, [r7, #0]
    ddd2:	799a      	ldrb	r2, [r3, #6]
    ddd4:	79db      	ldrb	r3, [r3, #7]
    ddd6:	021b      	lsls	r3, r3, #8
    ddd8:	4313      	orrs	r3, r2
    ddda:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    dddc:	897b      	ldrh	r3, [r7, #10]
    ddde:	2b12      	cmp	r3, #18
    dde0:	d901      	bls.n	dde6 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    dde2:	2312      	movs	r3, #18
    dde4:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    dde6:	68fb      	ldr	r3, [r7, #12]
    dde8:	2b00      	cmp	r3, #0
    ddea:	d10a      	bne.n	de02 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ddec:	4b0f      	ldr	r3, [pc, #60]	; (de2c <usbdc_get_dev_desc+0x6c>)
    ddee:	681b      	ldr	r3, [r3, #0]
    ddf0:	6818      	ldr	r0, [r3, #0]
    ddf2:	4b0e      	ldr	r3, [pc, #56]	; (de2c <usbdc_get_dev_desc+0x6c>)
    ddf4:	681b      	ldr	r3, [r3, #0]
    ddf6:	685b      	ldr	r3, [r3, #4]
    ddf8:	2201      	movs	r2, #1
    ddfa:	4619      	mov	r1, r3
    ddfc:	4b0c      	ldr	r3, [pc, #48]	; (de30 <usbdc_get_dev_desc+0x70>)
    ddfe:	4798      	blx	r3
    de00:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    de02:	68fb      	ldr	r3, [r7, #12]
    de04:	2b00      	cmp	r3, #0
    de06:	d101      	bne.n	de0c <usbdc_get_dev_desc+0x4c>
		return false;
    de08:	2300      	movs	r3, #0
    de0a:	e00b      	b.n	de24 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    de0c:	897a      	ldrh	r2, [r7, #10]
    de0e:	79f8      	ldrb	r0, [r7, #7]
    de10:	2300      	movs	r3, #0
    de12:	68f9      	ldr	r1, [r7, #12]
    de14:	4c07      	ldr	r4, [pc, #28]	; (de34 <usbdc_get_dev_desc+0x74>)
    de16:	47a0      	blx	r4
    de18:	4603      	mov	r3, r0
    de1a:	2b00      	cmp	r3, #0
    de1c:	d001      	beq.n	de22 <usbdc_get_dev_desc+0x62>
		return false;
    de1e:	2300      	movs	r3, #0
    de20:	e000      	b.n	de24 <usbdc_get_dev_desc+0x64>
	}
	return true;
    de22:	2301      	movs	r3, #1
}
    de24:	4618      	mov	r0, r3
    de26:	3714      	adds	r7, #20
    de28:	46bd      	mov	sp, r7
    de2a:	bd90      	pop	{r4, r7, pc}
    de2c:	2000210c 	.word	0x2000210c
    de30:	0000eb35 	.word	0x0000eb35
    de34:	0000e8a5 	.word	0x0000e8a5

0000de38 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    de38:	b590      	push	{r4, r7, lr}
    de3a:	b087      	sub	sp, #28
    de3c:	af00      	add	r7, sp, #0
    de3e:	4603      	mov	r3, r0
    de40:	6039      	str	r1, [r7, #0]
    de42:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    de44:	2300      	movs	r3, #0
    de46:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    de48:	683b      	ldr	r3, [r7, #0]
    de4a:	799a      	ldrb	r2, [r3, #6]
    de4c:	79db      	ldrb	r3, [r3, #7]
    de4e:	021b      	lsls	r3, r3, #8
    de50:	4313      	orrs	r3, r2
    de52:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    de54:	683b      	ldr	r3, [r7, #0]
    de56:	885b      	ldrh	r3, [r3, #2]
    de58:	b29b      	uxth	r3, r3
    de5a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    de5c:	8a7a      	ldrh	r2, [r7, #18]
    de5e:	4b1e      	ldr	r3, [pc, #120]	; (ded8 <usbdc_get_cfg_desc+0xa0>)
    de60:	7f1b      	ldrb	r3, [r3, #28]
    de62:	3b01      	subs	r3, #1
    de64:	4013      	ands	r3, r2
    de66:	2b00      	cmp	r3, #0
    de68:	bf0c      	ite	eq
    de6a:	2301      	moveq	r3, #1
    de6c:	2300      	movne	r3, #0
    de6e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    de70:	697b      	ldr	r3, [r7, #20]
    de72:	2b00      	cmp	r3, #0
    de74:	d10c      	bne.n	de90 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    de76:	4b18      	ldr	r3, [pc, #96]	; (ded8 <usbdc_get_cfg_desc+0xa0>)
    de78:	681b      	ldr	r3, [r3, #0]
    de7a:	6818      	ldr	r0, [r3, #0]
    de7c:	4b16      	ldr	r3, [pc, #88]	; (ded8 <usbdc_get_cfg_desc+0xa0>)
    de7e:	681b      	ldr	r3, [r3, #0]
    de80:	6859      	ldr	r1, [r3, #4]
    de82:	7c3b      	ldrb	r3, [r7, #16]
    de84:	3301      	adds	r3, #1
    de86:	b2db      	uxtb	r3, r3
    de88:	461a      	mov	r2, r3
    de8a:	4b14      	ldr	r3, [pc, #80]	; (dedc <usbdc_get_cfg_desc+0xa4>)
    de8c:	4798      	blx	r3
    de8e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    de90:	697b      	ldr	r3, [r7, #20]
    de92:	2b00      	cmp	r3, #0
    de94:	d101      	bne.n	de9a <usbdc_get_cfg_desc+0x62>
		return false;
    de96:	2300      	movs	r3, #0
    de98:	e019      	b.n	dece <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    de9a:	6978      	ldr	r0, [r7, #20]
    de9c:	4b10      	ldr	r3, [pc, #64]	; (dee0 <usbdc_get_cfg_desc+0xa8>)
    de9e:	4798      	blx	r3
    dea0:	4603      	mov	r3, r0
    dea2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    dea4:	8a7a      	ldrh	r2, [r7, #18]
    dea6:	89fb      	ldrh	r3, [r7, #14]
    dea8:	429a      	cmp	r2, r3
    deaa:	d802      	bhi.n	deb2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    deac:	2300      	movs	r3, #0
    deae:	747b      	strb	r3, [r7, #17]
    deb0:	e001      	b.n	deb6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    deb2:	89fb      	ldrh	r3, [r7, #14]
    deb4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    deb6:	8a7a      	ldrh	r2, [r7, #18]
    deb8:	7c7b      	ldrb	r3, [r7, #17]
    deba:	79f8      	ldrb	r0, [r7, #7]
    debc:	6979      	ldr	r1, [r7, #20]
    debe:	4c09      	ldr	r4, [pc, #36]	; (dee4 <usbdc_get_cfg_desc+0xac>)
    dec0:	47a0      	blx	r4
    dec2:	4603      	mov	r3, r0
    dec4:	2b00      	cmp	r3, #0
    dec6:	d001      	beq.n	decc <usbdc_get_cfg_desc+0x94>
		return false;
    dec8:	2300      	movs	r3, #0
    deca:	e000      	b.n	dece <usbdc_get_cfg_desc+0x96>
	}
	return true;
    decc:	2301      	movs	r3, #1
}
    dece:	4618      	mov	r0, r3
    ded0:	371c      	adds	r7, #28
    ded2:	46bd      	mov	sp, r7
    ded4:	bd90      	pop	{r4, r7, pc}
    ded6:	bf00      	nop
    ded8:	2000210c 	.word	0x2000210c
    dedc:	0000ebf5 	.word	0x0000ebf5
    dee0:	0000dda1 	.word	0x0000dda1
    dee4:	0000e8a5 	.word	0x0000e8a5

0000dee8 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    dee8:	b590      	push	{r4, r7, lr}
    deea:	b085      	sub	sp, #20
    deec:	af00      	add	r7, sp, #0
    deee:	4603      	mov	r3, r0
    def0:	6039      	str	r1, [r7, #0]
    def2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    def4:	683b      	ldr	r3, [r7, #0]
    def6:	799a      	ldrb	r2, [r3, #6]
    def8:	79db      	ldrb	r3, [r3, #7]
    defa:	021b      	lsls	r3, r3, #8
    defc:	4313      	orrs	r3, r2
    defe:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    df00:	683b      	ldr	r3, [r7, #0]
    df02:	885b      	ldrh	r3, [r3, #2]
    df04:	b29b      	uxth	r3, r3
    df06:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    df08:	89fa      	ldrh	r2, [r7, #14]
    df0a:	4b1a      	ldr	r3, [pc, #104]	; (df74 <usbdc_get_str_desc+0x8c>)
    df0c:	7f1b      	ldrb	r3, [r3, #28]
    df0e:	3b01      	subs	r3, #1
    df10:	4013      	ands	r3, r2
    df12:	2b00      	cmp	r3, #0
    df14:	bf0c      	ite	eq
    df16:	2301      	moveq	r3, #1
    df18:	2300      	movne	r3, #0
    df1a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    df1c:	4b15      	ldr	r3, [pc, #84]	; (df74 <usbdc_get_str_desc+0x8c>)
    df1e:	681b      	ldr	r3, [r3, #0]
    df20:	6818      	ldr	r0, [r3, #0]
    df22:	4b14      	ldr	r3, [pc, #80]	; (df74 <usbdc_get_str_desc+0x8c>)
    df24:	681b      	ldr	r3, [r3, #0]
    df26:	685b      	ldr	r3, [r3, #4]
    df28:	7b3a      	ldrb	r2, [r7, #12]
    df2a:	4619      	mov	r1, r3
    df2c:	4b12      	ldr	r3, [pc, #72]	; (df78 <usbdc_get_str_desc+0x90>)
    df2e:	4798      	blx	r3
    df30:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    df32:	68bb      	ldr	r3, [r7, #8]
    df34:	2b00      	cmp	r3, #0
    df36:	d101      	bne.n	df3c <usbdc_get_str_desc+0x54>
		return false;
    df38:	2300      	movs	r3, #0
    df3a:	e017      	b.n	df6c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    df3c:	68bb      	ldr	r3, [r7, #8]
    df3e:	781b      	ldrb	r3, [r3, #0]
    df40:	b29b      	uxth	r3, r3
    df42:	89fa      	ldrh	r2, [r7, #14]
    df44:	429a      	cmp	r2, r3
    df46:	d802      	bhi.n	df4e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    df48:	2300      	movs	r3, #0
    df4a:	737b      	strb	r3, [r7, #13]
    df4c:	e002      	b.n	df54 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    df4e:	68bb      	ldr	r3, [r7, #8]
    df50:	781b      	ldrb	r3, [r3, #0]
    df52:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    df54:	89fa      	ldrh	r2, [r7, #14]
    df56:	7b7b      	ldrb	r3, [r7, #13]
    df58:	79f8      	ldrb	r0, [r7, #7]
    df5a:	68b9      	ldr	r1, [r7, #8]
    df5c:	4c07      	ldr	r4, [pc, #28]	; (df7c <usbdc_get_str_desc+0x94>)
    df5e:	47a0      	blx	r4
    df60:	4603      	mov	r3, r0
    df62:	2b00      	cmp	r3, #0
    df64:	d001      	beq.n	df6a <usbdc_get_str_desc+0x82>
		return false;
    df66:	2300      	movs	r3, #0
    df68:	e000      	b.n	df6c <usbdc_get_str_desc+0x84>
	}
	return true;
    df6a:	2301      	movs	r3, #1
}
    df6c:	4618      	mov	r0, r3
    df6e:	3714      	adds	r7, #20
    df70:	46bd      	mov	sp, r7
    df72:	bd90      	pop	{r4, r7, pc}
    df74:	2000210c 	.word	0x2000210c
    df78:	0000ec6d 	.word	0x0000ec6d
    df7c:	0000e8a5 	.word	0x0000e8a5

0000df80 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    df80:	b580      	push	{r7, lr}
    df82:	b084      	sub	sp, #16
    df84:	af00      	add	r7, sp, #0
    df86:	4603      	mov	r3, r0
    df88:	6039      	str	r1, [r7, #0]
    df8a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    df8c:	683b      	ldr	r3, [r7, #0]
    df8e:	885b      	ldrh	r3, [r3, #2]
    df90:	b29b      	uxth	r3, r3
    df92:	0a1b      	lsrs	r3, r3, #8
    df94:	b29b      	uxth	r3, r3
    df96:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    df98:	7bfb      	ldrb	r3, [r7, #15]
    df9a:	2b02      	cmp	r3, #2
    df9c:	d00d      	beq.n	dfba <usbdc_get_desc_req+0x3a>
    df9e:	2b03      	cmp	r3, #3
    dfa0:	d012      	beq.n	dfc8 <usbdc_get_desc_req+0x48>
    dfa2:	2b01      	cmp	r3, #1
    dfa4:	d002      	beq.n	dfac <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    dfa6:	bf00      	nop
	}
	return false;
    dfa8:	2300      	movs	r3, #0
    dfaa:	e013      	b.n	dfd4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    dfac:	79fb      	ldrb	r3, [r7, #7]
    dfae:	6839      	ldr	r1, [r7, #0]
    dfb0:	4618      	mov	r0, r3
    dfb2:	4b0a      	ldr	r3, [pc, #40]	; (dfdc <usbdc_get_desc_req+0x5c>)
    dfb4:	4798      	blx	r3
    dfb6:	4603      	mov	r3, r0
    dfb8:	e00c      	b.n	dfd4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    dfba:	79fb      	ldrb	r3, [r7, #7]
    dfbc:	6839      	ldr	r1, [r7, #0]
    dfbe:	4618      	mov	r0, r3
    dfc0:	4b07      	ldr	r3, [pc, #28]	; (dfe0 <usbdc_get_desc_req+0x60>)
    dfc2:	4798      	blx	r3
    dfc4:	4603      	mov	r3, r0
    dfc6:	e005      	b.n	dfd4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    dfc8:	79fb      	ldrb	r3, [r7, #7]
    dfca:	6839      	ldr	r1, [r7, #0]
    dfcc:	4618      	mov	r0, r3
    dfce:	4b05      	ldr	r3, [pc, #20]	; (dfe4 <usbdc_get_desc_req+0x64>)
    dfd0:	4798      	blx	r3
    dfd2:	4603      	mov	r3, r0
}
    dfd4:	4618      	mov	r0, r3
    dfd6:	3710      	adds	r7, #16
    dfd8:	46bd      	mov	sp, r7
    dfda:	bd80      	pop	{r7, pc}
    dfdc:	0000ddc1 	.word	0x0000ddc1
    dfe0:	0000de39 	.word	0x0000de39
    dfe4:	0000dee9 	.word	0x0000dee9

0000dfe8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    dfe8:	b590      	push	{r4, r7, lr}
    dfea:	b085      	sub	sp, #20
    dfec:	af00      	add	r7, sp, #0
    dfee:	4603      	mov	r3, r0
    dff0:	6039      	str	r1, [r7, #0]
    dff2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    dff4:	683b      	ldr	r3, [r7, #0]
    dff6:	781b      	ldrb	r3, [r3, #0]
    dff8:	f003 031f 	and.w	r3, r3, #31
    dffc:	2b00      	cmp	r3, #0
    dffe:	db1b      	blt.n	e038 <usbdc_get_status_req+0x50>
    e000:	2b01      	cmp	r3, #1
    e002:	dd02      	ble.n	e00a <usbdc_get_status_req+0x22>
    e004:	2b02      	cmp	r3, #2
    e006:	d003      	beq.n	e010 <usbdc_get_status_req+0x28>
    e008:	e016      	b.n	e038 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    e00a:	2300      	movs	r3, #0
    e00c:	60fb      	str	r3, [r7, #12]
		break;
    e00e:	e015      	b.n	e03c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    e010:	683b      	ldr	r3, [r7, #0]
    e012:	889b      	ldrh	r3, [r3, #4]
    e014:	b29b      	uxth	r3, r3
    e016:	b2db      	uxtb	r3, r3
    e018:	2102      	movs	r1, #2
    e01a:	4618      	mov	r0, r3
    e01c:	4b0f      	ldr	r3, [pc, #60]	; (e05c <usbdc_get_status_req+0x74>)
    e01e:	4798      	blx	r3
    e020:	4603      	mov	r3, r0
    e022:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    e024:	68fb      	ldr	r3, [r7, #12]
    e026:	2b00      	cmp	r3, #0
    e028:	da01      	bge.n	e02e <usbdc_get_status_req+0x46>
			return false;
    e02a:	2300      	movs	r3, #0
    e02c:	e012      	b.n	e054 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    e02e:	68fb      	ldr	r3, [r7, #12]
    e030:	f003 0301 	and.w	r3, r3, #1
    e034:	60fb      	str	r3, [r7, #12]
		break;
    e036:	e001      	b.n	e03c <usbdc_get_status_req+0x54>
	default:
		return false;
    e038:	2300      	movs	r3, #0
    e03a:	e00b      	b.n	e054 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    e03c:	4b08      	ldr	r3, [pc, #32]	; (e060 <usbdc_get_status_req+0x78>)
    e03e:	695b      	ldr	r3, [r3, #20]
    e040:	89ba      	ldrh	r2, [r7, #12]
    e042:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    e044:	4b06      	ldr	r3, [pc, #24]	; (e060 <usbdc_get_status_req+0x78>)
    e046:	6959      	ldr	r1, [r3, #20]
    e048:	79f8      	ldrb	r0, [r7, #7]
    e04a:	2300      	movs	r3, #0
    e04c:	2202      	movs	r2, #2
    e04e:	4c05      	ldr	r4, [pc, #20]	; (e064 <usbdc_get_status_req+0x7c>)
    e050:	47a0      	blx	r4
	return true;
    e052:	2301      	movs	r3, #1
}
    e054:	4618      	mov	r0, r3
    e056:	3714      	adds	r7, #20
    e058:	46bd      	mov	sp, r7
    e05a:	bd90      	pop	{r4, r7, pc}
    e05c:	00005475 	.word	0x00005475
    e060:	2000210c 	.word	0x2000210c
    e064:	0000e8a5 	.word	0x0000e8a5

0000e068 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    e068:	b590      	push	{r4, r7, lr}
    e06a:	b085      	sub	sp, #20
    e06c:	af00      	add	r7, sp, #0
    e06e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e070:	4b1f      	ldr	r3, [pc, #124]	; (e0f0 <usbdc_get_interface+0x88>)
    e072:	691b      	ldr	r3, [r3, #16]
    e074:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    e076:	4b1e      	ldr	r3, [pc, #120]	; (e0f0 <usbdc_get_interface+0x88>)
    e078:	7f5b      	ldrb	r3, [r3, #29]
    e07a:	461a      	mov	r2, r3
    e07c:	687b      	ldr	r3, [r7, #4]
    e07e:	889b      	ldrh	r3, [r3, #4]
    e080:	b29b      	uxth	r3, r3
    e082:	fa42 f303 	asr.w	r3, r2, r3
    e086:	f003 0301 	and.w	r3, r3, #1
    e08a:	2b00      	cmp	r3, #0
    e08c:	d128      	bne.n	e0e0 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    e08e:	4b18      	ldr	r3, [pc, #96]	; (e0f0 <usbdc_get_interface+0x88>)
    e090:	695b      	ldr	r3, [r3, #20]
    e092:	2200      	movs	r2, #0
    e094:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e096:	4b16      	ldr	r3, [pc, #88]	; (e0f0 <usbdc_get_interface+0x88>)
    e098:	6959      	ldr	r1, [r3, #20]
    e09a:	2300      	movs	r3, #0
    e09c:	2201      	movs	r2, #1
    e09e:	2000      	movs	r0, #0
    e0a0:	4c14      	ldr	r4, [pc, #80]	; (e0f4 <usbdc_get_interface+0x8c>)
    e0a2:	47a0      	blx	r4
		return true;
    e0a4:	2301      	movs	r3, #1
    e0a6:	e01f      	b.n	e0e8 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    e0a8:	68fb      	ldr	r3, [r7, #12]
    e0aa:	685b      	ldr	r3, [r3, #4]
    e0ac:	687a      	ldr	r2, [r7, #4]
    e0ae:	2102      	movs	r1, #2
    e0b0:	68f8      	ldr	r0, [r7, #12]
    e0b2:	4798      	blx	r3
    e0b4:	60b8      	str	r0, [r7, #8]
    e0b6:	68bb      	ldr	r3, [r7, #8]
    e0b8:	2b00      	cmp	r3, #0
    e0ba:	da03      	bge.n	e0c4 <usbdc_get_interface+0x5c>
			func = func->next;
    e0bc:	68fb      	ldr	r3, [r7, #12]
    e0be:	681b      	ldr	r3, [r3, #0]
    e0c0:	60fb      	str	r3, [r7, #12]
    e0c2:	e00d      	b.n	e0e0 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    e0c4:	4b0a      	ldr	r3, [pc, #40]	; (e0f0 <usbdc_get_interface+0x88>)
    e0c6:	695b      	ldr	r3, [r3, #20]
    e0c8:	68ba      	ldr	r2, [r7, #8]
    e0ca:	b2d2      	uxtb	r2, r2
    e0cc:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e0ce:	4b08      	ldr	r3, [pc, #32]	; (e0f0 <usbdc_get_interface+0x88>)
    e0d0:	6959      	ldr	r1, [r3, #20]
    e0d2:	2300      	movs	r3, #0
    e0d4:	2201      	movs	r2, #1
    e0d6:	2000      	movs	r0, #0
    e0d8:	4c06      	ldr	r4, [pc, #24]	; (e0f4 <usbdc_get_interface+0x8c>)
    e0da:	47a0      	blx	r4
			return true;
    e0dc:	2301      	movs	r3, #1
    e0de:	e003      	b.n	e0e8 <usbdc_get_interface+0x80>
	while (NULL != func) {
    e0e0:	68fb      	ldr	r3, [r7, #12]
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	d1e0      	bne.n	e0a8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    e0e6:	2300      	movs	r3, #0
}
    e0e8:	4618      	mov	r0, r3
    e0ea:	3714      	adds	r7, #20
    e0ec:	46bd      	mov	sp, r7
    e0ee:	bd90      	pop	{r4, r7, pc}
    e0f0:	2000210c 	.word	0x2000210c
    e0f4:	0000e8a5 	.word	0x0000e8a5

0000e0f8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    e0f8:	b590      	push	{r4, r7, lr}
    e0fa:	b083      	sub	sp, #12
    e0fc:	af00      	add	r7, sp, #0
    e0fe:	4603      	mov	r3, r0
    e100:	6039      	str	r1, [r7, #0]
    e102:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e104:	683b      	ldr	r3, [r7, #0]
    e106:	785b      	ldrb	r3, [r3, #1]
    e108:	2b0a      	cmp	r3, #10
    e10a:	d83a      	bhi.n	e182 <usbdc_get_req+0x8a>
    e10c:	a201      	add	r2, pc, #4	; (adr r2, e114 <usbdc_get_req+0x1c>)
    e10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e112:	bf00      	nop
    e114:	0000e16b 	.word	0x0000e16b
    e118:	0000e183 	.word	0x0000e183
    e11c:	0000e183 	.word	0x0000e183
    e120:	0000e183 	.word	0x0000e183
    e124:	0000e183 	.word	0x0000e183
    e128:	0000e183 	.word	0x0000e183
    e12c:	0000e141 	.word	0x0000e141
    e130:	0000e183 	.word	0x0000e183
    e134:	0000e14f 	.word	0x0000e14f
    e138:	0000e183 	.word	0x0000e183
    e13c:	0000e179 	.word	0x0000e179
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    e140:	79fb      	ldrb	r3, [r7, #7]
    e142:	6839      	ldr	r1, [r7, #0]
    e144:	4618      	mov	r0, r3
    e146:	4b11      	ldr	r3, [pc, #68]	; (e18c <usbdc_get_req+0x94>)
    e148:	4798      	blx	r3
    e14a:	4603      	mov	r3, r0
    e14c:	e01a      	b.n	e184 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    e14e:	4b10      	ldr	r3, [pc, #64]	; (e190 <usbdc_get_req+0x98>)
    e150:	695b      	ldr	r3, [r3, #20]
    e152:	4a0f      	ldr	r2, [pc, #60]	; (e190 <usbdc_get_req+0x98>)
    e154:	7ed2      	ldrb	r2, [r2, #27]
    e156:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    e158:	4b0d      	ldr	r3, [pc, #52]	; (e190 <usbdc_get_req+0x98>)
    e15a:	6959      	ldr	r1, [r3, #20]
    e15c:	79f8      	ldrb	r0, [r7, #7]
    e15e:	2300      	movs	r3, #0
    e160:	2201      	movs	r2, #1
    e162:	4c0c      	ldr	r4, [pc, #48]	; (e194 <usbdc_get_req+0x9c>)
    e164:	47a0      	blx	r4
		return true;
    e166:	2301      	movs	r3, #1
    e168:	e00c      	b.n	e184 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    e16a:	79fb      	ldrb	r3, [r7, #7]
    e16c:	6839      	ldr	r1, [r7, #0]
    e16e:	4618      	mov	r0, r3
    e170:	4b09      	ldr	r3, [pc, #36]	; (e198 <usbdc_get_req+0xa0>)
    e172:	4798      	blx	r3
    e174:	4603      	mov	r3, r0
    e176:	e005      	b.n	e184 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    e178:	6838      	ldr	r0, [r7, #0]
    e17a:	4b08      	ldr	r3, [pc, #32]	; (e19c <usbdc_get_req+0xa4>)
    e17c:	4798      	blx	r3
    e17e:	4603      	mov	r3, r0
    e180:	e000      	b.n	e184 <usbdc_get_req+0x8c>
	default:
		return false;
    e182:	2300      	movs	r3, #0
	}
}
    e184:	4618      	mov	r0, r3
    e186:	370c      	adds	r7, #12
    e188:	46bd      	mov	sp, r7
    e18a:	bd90      	pop	{r4, r7, pc}
    e18c:	0000df81 	.word	0x0000df81
    e190:	2000210c 	.word	0x2000210c
    e194:	0000e8a5 	.word	0x0000e8a5
    e198:	0000dfe9 	.word	0x0000dfe9
    e19c:	0000e069 	.word	0x0000e069

0000e1a0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e1a0:	b590      	push	{r4, r7, lr}
    e1a2:	b083      	sub	sp, #12
    e1a4:	af00      	add	r7, sp, #0
    e1a6:	4603      	mov	r3, r0
    e1a8:	6039      	str	r1, [r7, #0]
    e1aa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e1ac:	683b      	ldr	r3, [r7, #0]
    e1ae:	781b      	ldrb	r3, [r3, #0]
    e1b0:	f003 031f 	and.w	r3, r3, #31
    e1b4:	2b02      	cmp	r3, #2
    e1b6:	d116      	bne.n	e1e6 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e1b8:	683b      	ldr	r3, [r7, #0]
    e1ba:	88db      	ldrh	r3, [r3, #6]
    e1bc:	b29b      	uxth	r3, r3
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d001      	beq.n	e1c6 <usbdc_clear_ftr_req+0x26>
			return false;
    e1c2:	2300      	movs	r3, #0
    e1c4:	e010      	b.n	e1e8 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    e1c6:	683b      	ldr	r3, [r7, #0]
    e1c8:	889b      	ldrh	r3, [r3, #4]
    e1ca:	b29b      	uxth	r3, r3
    e1cc:	b2db      	uxtb	r3, r3
    e1ce:	2100      	movs	r1, #0
    e1d0:	4618      	mov	r0, r3
    e1d2:	4b07      	ldr	r3, [pc, #28]	; (e1f0 <usbdc_clear_ftr_req+0x50>)
    e1d4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e1d6:	79f8      	ldrb	r0, [r7, #7]
    e1d8:	2301      	movs	r3, #1
    e1da:	2200      	movs	r2, #0
    e1dc:	2100      	movs	r1, #0
    e1de:	4c05      	ldr	r4, [pc, #20]	; (e1f4 <usbdc_clear_ftr_req+0x54>)
    e1e0:	47a0      	blx	r4
		return true;
    e1e2:	2301      	movs	r3, #1
    e1e4:	e000      	b.n	e1e8 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    e1e6:	2300      	movs	r3, #0
	}
}
    e1e8:	4618      	mov	r0, r3
    e1ea:	370c      	adds	r7, #12
    e1ec:	46bd      	mov	sp, r7
    e1ee:	bd90      	pop	{r4, r7, pc}
    e1f0:	00005475 	.word	0x00005475
    e1f4:	0000e8a5 	.word	0x0000e8a5

0000e1f8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e1f8:	b590      	push	{r4, r7, lr}
    e1fa:	b083      	sub	sp, #12
    e1fc:	af00      	add	r7, sp, #0
    e1fe:	4603      	mov	r3, r0
    e200:	6039      	str	r1, [r7, #0]
    e202:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e204:	683b      	ldr	r3, [r7, #0]
    e206:	781b      	ldrb	r3, [r3, #0]
    e208:	f003 031f 	and.w	r3, r3, #31
    e20c:	2b02      	cmp	r3, #2
    e20e:	d116      	bne.n	e23e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e210:	683b      	ldr	r3, [r7, #0]
    e212:	88db      	ldrh	r3, [r3, #6]
    e214:	b29b      	uxth	r3, r3
    e216:	2b00      	cmp	r3, #0
    e218:	d001      	beq.n	e21e <usbdc_set_ftr_req+0x26>
			return false;
    e21a:	2300      	movs	r3, #0
    e21c:	e010      	b.n	e240 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    e21e:	683b      	ldr	r3, [r7, #0]
    e220:	889b      	ldrh	r3, [r3, #4]
    e222:	b29b      	uxth	r3, r3
    e224:	b2db      	uxtb	r3, r3
    e226:	2101      	movs	r1, #1
    e228:	4618      	mov	r0, r3
    e22a:	4b07      	ldr	r3, [pc, #28]	; (e248 <usbdc_set_ftr_req+0x50>)
    e22c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e22e:	79f8      	ldrb	r0, [r7, #7]
    e230:	2301      	movs	r3, #1
    e232:	2200      	movs	r2, #0
    e234:	2100      	movs	r1, #0
    e236:	4c05      	ldr	r4, [pc, #20]	; (e24c <usbdc_set_ftr_req+0x54>)
    e238:	47a0      	blx	r4
		return true;
    e23a:	2301      	movs	r3, #1
    e23c:	e000      	b.n	e240 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    e23e:	2300      	movs	r3, #0
	}
}
    e240:	4618      	mov	r0, r3
    e242:	370c      	adds	r7, #12
    e244:	46bd      	mov	sp, r7
    e246:	bd90      	pop	{r4, r7, pc}
    e248:	00005475 	.word	0x00005475
    e24c:	0000e8a5 	.word	0x0000e8a5

0000e250 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    e250:	b580      	push	{r7, lr}
    e252:	b082      	sub	sp, #8
    e254:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e256:	4b0a      	ldr	r3, [pc, #40]	; (e280 <usbdc_unconfig+0x30>)
    e258:	691b      	ldr	r3, [r3, #16]
    e25a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e25c:	e008      	b.n	e270 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    e25e:	687b      	ldr	r3, [r7, #4]
    e260:	685b      	ldr	r3, [r3, #4]
    e262:	2200      	movs	r2, #0
    e264:	2101      	movs	r1, #1
    e266:	6878      	ldr	r0, [r7, #4]
    e268:	4798      	blx	r3
		func = func->next;
    e26a:	687b      	ldr	r3, [r7, #4]
    e26c:	681b      	ldr	r3, [r3, #0]
    e26e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e270:	687b      	ldr	r3, [r7, #4]
    e272:	2b00      	cmp	r3, #0
    e274:	d1f3      	bne.n	e25e <usbdc_unconfig+0xe>
	}
}
    e276:	bf00      	nop
    e278:	3708      	adds	r7, #8
    e27a:	46bd      	mov	sp, r7
    e27c:	bd80      	pop	{r7, pc}
    e27e:	bf00      	nop
    e280:	2000210c 	.word	0x2000210c

0000e284 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    e284:	b580      	push	{r7, lr}
    e286:	b088      	sub	sp, #32
    e288:	af00      	add	r7, sp, #0
    e28a:	4603      	mov	r3, r0
    e28c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    e28e:	2300      	movs	r3, #0
    e290:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    e292:	23ff      	movs	r3, #255	; 0xff
    e294:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    e296:	79fb      	ldrb	r3, [r7, #7]
    e298:	2b00      	cmp	r3, #0
    e29a:	d103      	bne.n	e2a4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    e29c:	4b2e      	ldr	r3, [pc, #184]	; (e358 <usbdc_set_config+0xd4>)
    e29e:	4798      	blx	r3
		return true;
    e2a0:	2301      	movs	r3, #1
    e2a2:	e055      	b.n	e350 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e2a4:	69bb      	ldr	r3, [r7, #24]
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d10a      	bne.n	e2c0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    e2aa:	4b2c      	ldr	r3, [pc, #176]	; (e35c <usbdc_set_config+0xd8>)
    e2ac:	681b      	ldr	r3, [r3, #0]
    e2ae:	6818      	ldr	r0, [r3, #0]
    e2b0:	4b2a      	ldr	r3, [pc, #168]	; (e35c <usbdc_set_config+0xd8>)
    e2b2:	681b      	ldr	r3, [r3, #0]
    e2b4:	685b      	ldr	r3, [r3, #4]
    e2b6:	79fa      	ldrb	r2, [r7, #7]
    e2b8:	4619      	mov	r1, r3
    e2ba:	4b29      	ldr	r3, [pc, #164]	; (e360 <usbdc_set_config+0xdc>)
    e2bc:	4798      	blx	r3
    e2be:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    e2c0:	69bb      	ldr	r3, [r7, #24]
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d101      	bne.n	e2ca <usbdc_set_config+0x46>
		return false;
    e2c6:	2300      	movs	r3, #0
    e2c8:	e042      	b.n	e350 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    e2ca:	69b8      	ldr	r0, [r7, #24]
    e2cc:	4b25      	ldr	r3, [pc, #148]	; (e364 <usbdc_set_config+0xe0>)
    e2ce:	4798      	blx	r3
    e2d0:	4603      	mov	r3, r0
    e2d2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    e2d4:	8abb      	ldrh	r3, [r7, #20]
    e2d6:	69ba      	ldr	r2, [r7, #24]
    e2d8:	4413      	add	r3, r2
    e2da:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    e2dc:	693b      	ldr	r3, [r7, #16]
    e2de:	2204      	movs	r2, #4
    e2e0:	4619      	mov	r1, r3
    e2e2:	69b8      	ldr	r0, [r7, #24]
    e2e4:	4b20      	ldr	r3, [pc, #128]	; (e368 <usbdc_set_config+0xe4>)
    e2e6:	4798      	blx	r3
    e2e8:	4603      	mov	r3, r0
    e2ea:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    e2ec:	e02c      	b.n	e348 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    e2ee:	68fb      	ldr	r3, [r7, #12]
    e2f0:	3302      	adds	r3, #2
    e2f2:	781b      	ldrb	r3, [r3, #0]
    e2f4:	7dfa      	ldrb	r2, [r7, #23]
    e2f6:	429a      	cmp	r2, r3
    e2f8:	d018      	beq.n	e32c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    e2fa:	68fb      	ldr	r3, [r7, #12]
    e2fc:	789b      	ldrb	r3, [r3, #2]
    e2fe:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    e300:	4b16      	ldr	r3, [pc, #88]	; (e35c <usbdc_set_config+0xd8>)
    e302:	691b      	ldr	r3, [r3, #16]
    e304:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e306:	e00c      	b.n	e322 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    e308:	69fb      	ldr	r3, [r7, #28]
    e30a:	685b      	ldr	r3, [r3, #4]
    e30c:	f107 020c 	add.w	r2, r7, #12
    e310:	2100      	movs	r1, #0
    e312:	69f8      	ldr	r0, [r7, #28]
    e314:	4798      	blx	r3
    e316:	4603      	mov	r3, r0
    e318:	2b00      	cmp	r3, #0
    e31a:	d006      	beq.n	e32a <usbdc_set_config+0xa6>
					func = func->next;
    e31c:	69fb      	ldr	r3, [r7, #28]
    e31e:	681b      	ldr	r3, [r3, #0]
    e320:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e322:	69fb      	ldr	r3, [r7, #28]
    e324:	2b00      	cmp	r3, #0
    e326:	d1ef      	bne.n	e308 <usbdc_set_config+0x84>
    e328:	e000      	b.n	e32c <usbdc_set_config+0xa8>
				} else {
					break;
    e32a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    e32c:	68fb      	ldr	r3, [r7, #12]
    e32e:	4618      	mov	r0, r3
    e330:	4b0e      	ldr	r3, [pc, #56]	; (e36c <usbdc_set_config+0xe8>)
    e332:	4798      	blx	r3
    e334:	4603      	mov	r3, r0
    e336:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e338:	68fb      	ldr	r3, [r7, #12]
    e33a:	6939      	ldr	r1, [r7, #16]
    e33c:	2204      	movs	r2, #4
    e33e:	4618      	mov	r0, r3
    e340:	4b09      	ldr	r3, [pc, #36]	; (e368 <usbdc_set_config+0xe4>)
    e342:	4798      	blx	r3
    e344:	4603      	mov	r3, r0
    e346:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    e348:	68fb      	ldr	r3, [r7, #12]
    e34a:	2b00      	cmp	r3, #0
    e34c:	d1cf      	bne.n	e2ee <usbdc_set_config+0x6a>
	}
	return true;
    e34e:	2301      	movs	r3, #1
}
    e350:	4618      	mov	r0, r3
    e352:	3720      	adds	r7, #32
    e354:	46bd      	mov	sp, r7
    e356:	bd80      	pop	{r7, pc}
    e358:	0000e251 	.word	0x0000e251
    e35c:	2000210c 	.word	0x2000210c
    e360:	0000ebf5 	.word	0x0000ebf5
    e364:	0000dda1 	.word	0x0000dda1
    e368:	0000eb35 	.word	0x0000eb35
    e36c:	0000dd7d 	.word	0x0000dd7d

0000e370 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    e370:	b580      	push	{r7, lr}
    e372:	b082      	sub	sp, #8
    e374:	af00      	add	r7, sp, #0
    e376:	4603      	mov	r3, r0
    e378:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    e37a:	79fb      	ldrb	r3, [r7, #7]
    e37c:	4618      	mov	r0, r3
    e37e:	4b03      	ldr	r3, [pc, #12]	; (e38c <usbdc_set_address+0x1c>)
    e380:	4798      	blx	r3
}
    e382:	bf00      	nop
    e384:	3708      	adds	r7, #8
    e386:	46bd      	mov	sp, r7
    e388:	bd80      	pop	{r7, pc}
    e38a:	bf00      	nop
    e38c:	00005091 	.word	0x00005091

0000e390 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    e390:	b590      	push	{r4, r7, lr}
    e392:	b087      	sub	sp, #28
    e394:	af00      	add	r7, sp, #0
    e396:	4603      	mov	r3, r0
    e398:	460a      	mov	r2, r1
    e39a:	80fb      	strh	r3, [r7, #6]
    e39c:	4613      	mov	r3, r2
    e39e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    e3a0:	2300      	movs	r3, #0
    e3a2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    e3a4:	693b      	ldr	r3, [r7, #16]
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d10b      	bne.n	e3c2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    e3aa:	4b43      	ldr	r3, [pc, #268]	; (e4b8 <usbdc_set_interface+0x128>)
    e3ac:	681b      	ldr	r3, [r3, #0]
    e3ae:	6818      	ldr	r0, [r3, #0]
    e3b0:	4b41      	ldr	r3, [pc, #260]	; (e4b8 <usbdc_set_interface+0x128>)
    e3b2:	681b      	ldr	r3, [r3, #0]
    e3b4:	6859      	ldr	r1, [r3, #4]
    e3b6:	4b40      	ldr	r3, [pc, #256]	; (e4b8 <usbdc_set_interface+0x128>)
    e3b8:	7edb      	ldrb	r3, [r3, #27]
    e3ba:	461a      	mov	r2, r3
    e3bc:	4b3f      	ldr	r3, [pc, #252]	; (e4bc <usbdc_set_interface+0x12c>)
    e3be:	4798      	blx	r3
    e3c0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    e3c2:	693b      	ldr	r3, [r7, #16]
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d101      	bne.n	e3cc <usbdc_set_interface+0x3c>
		return false;
    e3c8:	2300      	movs	r3, #0
    e3ca:	e071      	b.n	e4b0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    e3cc:	693b      	ldr	r3, [r7, #16]
    e3ce:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    e3d0:	6938      	ldr	r0, [r7, #16]
    e3d2:	4b3b      	ldr	r3, [pc, #236]	; (e4c0 <usbdc_set_interface+0x130>)
    e3d4:	4798      	blx	r3
    e3d6:	4603      	mov	r3, r0
    e3d8:	461a      	mov	r2, r3
    e3da:	693b      	ldr	r3, [r7, #16]
    e3dc:	4413      	add	r3, r2
    e3de:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    e3e0:	68bb      	ldr	r3, [r7, #8]
    e3e2:	68f9      	ldr	r1, [r7, #12]
    e3e4:	2204      	movs	r2, #4
    e3e6:	4618      	mov	r0, r3
    e3e8:	4b36      	ldr	r3, [pc, #216]	; (e4c4 <usbdc_set_interface+0x134>)
    e3ea:	4798      	blx	r3
    e3ec:	6138      	str	r0, [r7, #16]
    e3ee:	693b      	ldr	r3, [r7, #16]
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d113      	bne.n	e41c <usbdc_set_interface+0x8c>
		return false;
    e3f4:	2300      	movs	r3, #0
    e3f6:	e05b      	b.n	e4b0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    e3f8:	68bb      	ldr	r3, [r7, #8]
    e3fa:	4618      	mov	r0, r3
    e3fc:	4b32      	ldr	r3, [pc, #200]	; (e4c8 <usbdc_set_interface+0x138>)
    e3fe:	4798      	blx	r3
    e400:	4603      	mov	r3, r0
    e402:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e404:	68bb      	ldr	r3, [r7, #8]
    e406:	68f9      	ldr	r1, [r7, #12]
    e408:	2204      	movs	r2, #4
    e40a:	4618      	mov	r0, r3
    e40c:	4b2d      	ldr	r3, [pc, #180]	; (e4c4 <usbdc_set_interface+0x134>)
    e40e:	4798      	blx	r3
    e410:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    e412:	693b      	ldr	r3, [r7, #16]
    e414:	2b00      	cmp	r3, #0
    e416:	d101      	bne.n	e41c <usbdc_set_interface+0x8c>
			return false;
    e418:	2300      	movs	r3, #0
    e41a:	e049      	b.n	e4b0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    e41c:	693b      	ldr	r3, [r7, #16]
    e41e:	3302      	adds	r3, #2
    e420:	781b      	ldrb	r3, [r3, #0]
    e422:	b29b      	uxth	r3, r3
    e424:	88ba      	ldrh	r2, [r7, #4]
    e426:	429a      	cmp	r2, r3
    e428:	d1e6      	bne.n	e3f8 <usbdc_set_interface+0x68>
    e42a:	693b      	ldr	r3, [r7, #16]
    e42c:	3303      	adds	r3, #3
    e42e:	781b      	ldrb	r3, [r3, #0]
    e430:	b29b      	uxth	r3, r3
    e432:	88fa      	ldrh	r2, [r7, #6]
    e434:	429a      	cmp	r2, r3
    e436:	d1df      	bne.n	e3f8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    e438:	693b      	ldr	r3, [r7, #16]
    e43a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    e43c:	4b1e      	ldr	r3, [pc, #120]	; (e4b8 <usbdc_set_interface+0x128>)
    e43e:	691b      	ldr	r3, [r3, #16]
    e440:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    e442:	e031      	b.n	e4a8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    e444:	697b      	ldr	r3, [r7, #20]
    e446:	685b      	ldr	r3, [r3, #4]
    e448:	f107 0208 	add.w	r2, r7, #8
    e44c:	2101      	movs	r1, #1
    e44e:	6978      	ldr	r0, [r7, #20]
    e450:	4798      	blx	r3
    e452:	4603      	mov	r3, r0
    e454:	2b00      	cmp	r3, #0
    e456:	d003      	beq.n	e460 <usbdc_set_interface+0xd0>
			func = func->next;
    e458:	697b      	ldr	r3, [r7, #20]
    e45a:	681b      	ldr	r3, [r3, #0]
    e45c:	617b      	str	r3, [r7, #20]
    e45e:	e023      	b.n	e4a8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    e460:	697b      	ldr	r3, [r7, #20]
    e462:	685b      	ldr	r3, [r3, #4]
    e464:	f107 0208 	add.w	r2, r7, #8
    e468:	2100      	movs	r1, #0
    e46a:	6978      	ldr	r0, [r7, #20]
    e46c:	4798      	blx	r3
    e46e:	4603      	mov	r3, r0
    e470:	2b00      	cmp	r3, #0
    e472:	d117      	bne.n	e4a4 <usbdc_set_interface+0x114>
			if (alt_set) {
    e474:	88fb      	ldrh	r3, [r7, #6]
    e476:	2b00      	cmp	r3, #0
    e478:	d00c      	beq.n	e494 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    e47a:	4b0f      	ldr	r3, [pc, #60]	; (e4b8 <usbdc_set_interface+0x128>)
    e47c:	7f5b      	ldrb	r3, [r3, #29]
    e47e:	b25a      	sxtb	r2, r3
    e480:	88bb      	ldrh	r3, [r7, #4]
    e482:	2101      	movs	r1, #1
    e484:	fa01 f303 	lsl.w	r3, r1, r3
    e488:	b25b      	sxtb	r3, r3
    e48a:	4313      	orrs	r3, r2
    e48c:	b25b      	sxtb	r3, r3
    e48e:	b2da      	uxtb	r2, r3
    e490:	4b09      	ldr	r3, [pc, #36]	; (e4b8 <usbdc_set_interface+0x128>)
    e492:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    e494:	2300      	movs	r3, #0
    e496:	2200      	movs	r2, #0
    e498:	2100      	movs	r1, #0
    e49a:	2000      	movs	r0, #0
    e49c:	4c0b      	ldr	r4, [pc, #44]	; (e4cc <usbdc_set_interface+0x13c>)
    e49e:	47a0      	blx	r4
			return true;
    e4a0:	2301      	movs	r3, #1
    e4a2:	e005      	b.n	e4b0 <usbdc_set_interface+0x120>
		} else {
			return false;
    e4a4:	2300      	movs	r3, #0
    e4a6:	e003      	b.n	e4b0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    e4a8:	697b      	ldr	r3, [r7, #20]
    e4aa:	2b00      	cmp	r3, #0
    e4ac:	d1ca      	bne.n	e444 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    e4ae:	2300      	movs	r3, #0
}
    e4b0:	4618      	mov	r0, r3
    e4b2:	371c      	adds	r7, #28
    e4b4:	46bd      	mov	sp, r7
    e4b6:	bd90      	pop	{r4, r7, pc}
    e4b8:	2000210c 	.word	0x2000210c
    e4bc:	0000ebf5 	.word	0x0000ebf5
    e4c0:	0000dda1 	.word	0x0000dda1
    e4c4:	0000eb35 	.word	0x0000eb35
    e4c8:	0000dd7d 	.word	0x0000dd7d
    e4cc:	0000e8a5 	.word	0x0000e8a5

0000e4d0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    e4d0:	b590      	push	{r4, r7, lr}
    e4d2:	b083      	sub	sp, #12
    e4d4:	af00      	add	r7, sp, #0
    e4d6:	4603      	mov	r3, r0
    e4d8:	6039      	str	r1, [r7, #0]
    e4da:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e4dc:	683b      	ldr	r3, [r7, #0]
    e4de:	785b      	ldrb	r3, [r3, #1]
    e4e0:	3b01      	subs	r3, #1
    e4e2:	2b0a      	cmp	r3, #10
    e4e4:	d85b      	bhi.n	e59e <usbdc_set_req+0xce>
    e4e6:	a201      	add	r2, pc, #4	; (adr r2, e4ec <usbdc_set_req+0x1c>)
    e4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e4ec:	0000e56b 	.word	0x0000e56b
    e4f0:	0000e59f 	.word	0x0000e59f
    e4f4:	0000e579 	.word	0x0000e579
    e4f8:	0000e59f 	.word	0x0000e59f
    e4fc:	0000e519 	.word	0x0000e519
    e500:	0000e59f 	.word	0x0000e59f
    e504:	0000e59f 	.word	0x0000e59f
    e508:	0000e59f 	.word	0x0000e59f
    e50c:	0000e533 	.word	0x0000e533
    e510:	0000e59f 	.word	0x0000e59f
    e514:	0000e587 	.word	0x0000e587
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e518:	79f8      	ldrb	r0, [r7, #7]
    e51a:	2301      	movs	r3, #1
    e51c:	2200      	movs	r2, #0
    e51e:	2100      	movs	r1, #0
    e520:	4c21      	ldr	r4, [pc, #132]	; (e5a8 <usbdc_set_req+0xd8>)
    e522:	47a0      	blx	r4
    e524:	4603      	mov	r3, r0
    e526:	2b00      	cmp	r3, #0
    e528:	bf0c      	ite	eq
    e52a:	2301      	moveq	r3, #1
    e52c:	2300      	movne	r3, #0
    e52e:	b2db      	uxtb	r3, r3
    e530:	e036      	b.n	e5a0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    e532:	683b      	ldr	r3, [r7, #0]
    e534:	885b      	ldrh	r3, [r3, #2]
    e536:	b29b      	uxth	r3, r3
    e538:	b2db      	uxtb	r3, r3
    e53a:	4618      	mov	r0, r3
    e53c:	4b1b      	ldr	r3, [pc, #108]	; (e5ac <usbdc_set_req+0xdc>)
    e53e:	4798      	blx	r3
    e540:	4603      	mov	r3, r0
    e542:	f083 0301 	eor.w	r3, r3, #1
    e546:	b2db      	uxtb	r3, r3
    e548:	2b00      	cmp	r3, #0
    e54a:	d001      	beq.n	e550 <usbdc_set_req+0x80>
			return false;
    e54c:	2300      	movs	r3, #0
    e54e:	e027      	b.n	e5a0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e550:	79f8      	ldrb	r0, [r7, #7]
    e552:	2301      	movs	r3, #1
    e554:	2200      	movs	r2, #0
    e556:	2100      	movs	r1, #0
    e558:	4c13      	ldr	r4, [pc, #76]	; (e5a8 <usbdc_set_req+0xd8>)
    e55a:	47a0      	blx	r4
    e55c:	4603      	mov	r3, r0
    e55e:	2b00      	cmp	r3, #0
    e560:	bf0c      	ite	eq
    e562:	2301      	moveq	r3, #1
    e564:	2300      	movne	r3, #0
    e566:	b2db      	uxtb	r3, r3
    e568:	e01a      	b.n	e5a0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    e56a:	79fb      	ldrb	r3, [r7, #7]
    e56c:	6839      	ldr	r1, [r7, #0]
    e56e:	4618      	mov	r0, r3
    e570:	4b0f      	ldr	r3, [pc, #60]	; (e5b0 <usbdc_set_req+0xe0>)
    e572:	4798      	blx	r3
    e574:	4603      	mov	r3, r0
    e576:	e013      	b.n	e5a0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    e578:	79fb      	ldrb	r3, [r7, #7]
    e57a:	6839      	ldr	r1, [r7, #0]
    e57c:	4618      	mov	r0, r3
    e57e:	4b0d      	ldr	r3, [pc, #52]	; (e5b4 <usbdc_set_req+0xe4>)
    e580:	4798      	blx	r3
    e582:	4603      	mov	r3, r0
    e584:	e00c      	b.n	e5a0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    e586:	683b      	ldr	r3, [r7, #0]
    e588:	885b      	ldrh	r3, [r3, #2]
    e58a:	b29a      	uxth	r2, r3
    e58c:	683b      	ldr	r3, [r7, #0]
    e58e:	889b      	ldrh	r3, [r3, #4]
    e590:	b29b      	uxth	r3, r3
    e592:	4619      	mov	r1, r3
    e594:	4610      	mov	r0, r2
    e596:	4b08      	ldr	r3, [pc, #32]	; (e5b8 <usbdc_set_req+0xe8>)
    e598:	4798      	blx	r3
    e59a:	4603      	mov	r3, r0
    e59c:	e000      	b.n	e5a0 <usbdc_set_req+0xd0>
	default:
		return false;
    e59e:	2300      	movs	r3, #0
	}
}
    e5a0:	4618      	mov	r0, r3
    e5a2:	370c      	adds	r7, #12
    e5a4:	46bd      	mov	sp, r7
    e5a6:	bd90      	pop	{r4, r7, pc}
    e5a8:	0000e8a5 	.word	0x0000e8a5
    e5ac:	0000e285 	.word	0x0000e285
    e5b0:	0000e1a1 	.word	0x0000e1a1
    e5b4:	0000e1f9 	.word	0x0000e1f9
    e5b8:	0000e391 	.word	0x0000e391

0000e5bc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    e5bc:	b580      	push	{r7, lr}
    e5be:	b082      	sub	sp, #8
    e5c0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    e5c2:	4b0a      	ldr	r3, [pc, #40]	; (e5ec <usbdc_sof_notify+0x30>)
    e5c4:	685b      	ldr	r3, [r3, #4]
    e5c6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    e5c8:	e009      	b.n	e5de <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    e5ca:	687b      	ldr	r3, [r7, #4]
    e5cc:	685b      	ldr	r3, [r3, #4]
    e5ce:	2b00      	cmp	r3, #0
    e5d0:	d002      	beq.n	e5d8 <usbdc_sof_notify+0x1c>
			sof->cb();
    e5d2:	687b      	ldr	r3, [r7, #4]
    e5d4:	685b      	ldr	r3, [r3, #4]
    e5d6:	4798      	blx	r3
		}
		sof = sof->next;
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	681b      	ldr	r3, [r3, #0]
    e5dc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	2b00      	cmp	r3, #0
    e5e2:	d1f2      	bne.n	e5ca <usbdc_sof_notify+0xe>
	}
}
    e5e4:	bf00      	nop
    e5e6:	3708      	adds	r7, #8
    e5e8:	46bd      	mov	sp, r7
    e5ea:	bd80      	pop	{r7, pc}
    e5ec:	2000210c 	.word	0x2000210c

0000e5f0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    e5f0:	b580      	push	{r7, lr}
    e5f2:	b084      	sub	sp, #16
    e5f4:	af00      	add	r7, sp, #0
    e5f6:	4603      	mov	r3, r0
    e5f8:	6039      	str	r1, [r7, #0]
    e5fa:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    e5fc:	4b0b      	ldr	r3, [pc, #44]	; (e62c <usbdc_change_notify+0x3c>)
    e5fe:	68db      	ldr	r3, [r3, #12]
    e600:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    e602:	e00c      	b.n	e61e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    e604:	68fb      	ldr	r3, [r7, #12]
    e606:	685b      	ldr	r3, [r3, #4]
    e608:	2b00      	cmp	r3, #0
    e60a:	d005      	beq.n	e618 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    e60c:	68fb      	ldr	r3, [r7, #12]
    e60e:	685b      	ldr	r3, [r3, #4]
    e610:	79fa      	ldrb	r2, [r7, #7]
    e612:	6839      	ldr	r1, [r7, #0]
    e614:	4610      	mov	r0, r2
    e616:	4798      	blx	r3
		}
		cg = cg->next;
    e618:	68fb      	ldr	r3, [r7, #12]
    e61a:	681b      	ldr	r3, [r3, #0]
    e61c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    e61e:	68fb      	ldr	r3, [r7, #12]
    e620:	2b00      	cmp	r3, #0
    e622:	d1ef      	bne.n	e604 <usbdc_change_notify+0x14>
	}
}
    e624:	bf00      	nop
    e626:	3710      	adds	r7, #16
    e628:	46bd      	mov	sp, r7
    e62a:	bd80      	pop	{r7, pc}
    e62c:	2000210c 	.word	0x2000210c

0000e630 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e630:	b580      	push	{r7, lr}
    e632:	b084      	sub	sp, #16
    e634:	af00      	add	r7, sp, #0
    e636:	4603      	mov	r3, r0
    e638:	6039      	str	r1, [r7, #0]
    e63a:	71fb      	strb	r3, [r7, #7]
    e63c:	4613      	mov	r3, r2
    e63e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    e640:	4b12      	ldr	r3, [pc, #72]	; (e68c <usbdc_request_handler+0x5c>)
    e642:	689b      	ldr	r3, [r3, #8]
    e644:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    e646:	e019      	b.n	e67c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    e648:	68fb      	ldr	r3, [r7, #12]
    e64a:	685b      	ldr	r3, [r3, #4]
    e64c:	2b00      	cmp	r3, #0
    e64e:	d012      	beq.n	e676 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    e650:	68fb      	ldr	r3, [r7, #12]
    e652:	685b      	ldr	r3, [r3, #4]
    e654:	79ba      	ldrb	r2, [r7, #6]
    e656:	79f8      	ldrb	r0, [r7, #7]
    e658:	6839      	ldr	r1, [r7, #0]
    e65a:	4798      	blx	r3
    e65c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e65e:	68bb      	ldr	r3, [r7, #8]
    e660:	2b00      	cmp	r3, #0
    e662:	d101      	bne.n	e668 <usbdc_request_handler+0x38>
				return true;
    e664:	2301      	movs	r3, #1
    e666:	e00d      	b.n	e684 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e668:	68bb      	ldr	r3, [r7, #8]
    e66a:	f113 0f0a 	cmn.w	r3, #10
    e66e:	d002      	beq.n	e676 <usbdc_request_handler+0x46>
				return -1;
    e670:	f04f 33ff 	mov.w	r3, #4294967295
    e674:	e006      	b.n	e684 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e676:	68fb      	ldr	r3, [r7, #12]
    e678:	681b      	ldr	r3, [r3, #0]
    e67a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e67c:	68fb      	ldr	r3, [r7, #12]
    e67e:	2b00      	cmp	r3, #0
    e680:	d1e2      	bne.n	e648 <usbdc_request_handler+0x18>
	}
	return false;
    e682:	2300      	movs	r3, #0
}
    e684:	4618      	mov	r0, r3
    e686:	3710      	adds	r7, #16
    e688:	46bd      	mov	sp, r7
    e68a:	bd80      	pop	{r7, pc}
    e68c:	2000210c 	.word	0x2000210c

0000e690 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e690:	b580      	push	{r7, lr}
    e692:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e694:	4b01      	ldr	r3, [pc, #4]	; (e69c <usbd_sof_cb+0xc>)
    e696:	4798      	blx	r3
}
    e698:	bf00      	nop
    e69a:	bd80      	pop	{r7, pc}
    e69c:	0000e5bd 	.word	0x0000e5bd

0000e6a0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e6a0:	b580      	push	{r7, lr}
    e6a2:	b082      	sub	sp, #8
    e6a4:	af00      	add	r7, sp, #0
    e6a6:	4603      	mov	r3, r0
    e6a8:	6039      	str	r1, [r7, #0]
    e6aa:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e6ac:	79fb      	ldrb	r3, [r7, #7]
    e6ae:	2200      	movs	r2, #0
    e6b0:	6839      	ldr	r1, [r7, #0]
    e6b2:	4618      	mov	r0, r3
    e6b4:	4b14      	ldr	r3, [pc, #80]	; (e708 <usbdc_cb_ctl_req+0x68>)
    e6b6:	4798      	blx	r3
    e6b8:	4603      	mov	r3, r0
    e6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    e6be:	d00b      	beq.n	e6d8 <usbdc_cb_ctl_req+0x38>
    e6c0:	2b01      	cmp	r3, #1
    e6c2:	d007      	beq.n	e6d4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    e6c4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e6c6:	683b      	ldr	r3, [r7, #0]
    e6c8:	781b      	ldrb	r3, [r3, #0]
    e6ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e6ce:	2b00      	cmp	r3, #0
    e6d0:	d007      	beq.n	e6e2 <usbdc_cb_ctl_req+0x42>
    e6d2:	e003      	b.n	e6dc <usbdc_cb_ctl_req+0x3c>
		return true;
    e6d4:	2301      	movs	r3, #1
    e6d6:	e013      	b.n	e700 <usbdc_cb_ctl_req+0x60>
		return false;
    e6d8:	2300      	movs	r3, #0
    e6da:	e011      	b.n	e700 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e6dc:	2b80      	cmp	r3, #128	; 0x80
    e6de:	d007      	beq.n	e6f0 <usbdc_cb_ctl_req+0x50>
    e6e0:	e00d      	b.n	e6fe <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    e6e2:	79fb      	ldrb	r3, [r7, #7]
    e6e4:	6839      	ldr	r1, [r7, #0]
    e6e6:	4618      	mov	r0, r3
    e6e8:	4b08      	ldr	r3, [pc, #32]	; (e70c <usbdc_cb_ctl_req+0x6c>)
    e6ea:	4798      	blx	r3
    e6ec:	4603      	mov	r3, r0
    e6ee:	e007      	b.n	e700 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    e6f0:	79fb      	ldrb	r3, [r7, #7]
    e6f2:	6839      	ldr	r1, [r7, #0]
    e6f4:	4618      	mov	r0, r3
    e6f6:	4b06      	ldr	r3, [pc, #24]	; (e710 <usbdc_cb_ctl_req+0x70>)
    e6f8:	4798      	blx	r3
    e6fa:	4603      	mov	r3, r0
    e6fc:	e000      	b.n	e700 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    e6fe:	2300      	movs	r3, #0
	}
}
    e700:	4618      	mov	r0, r3
    e702:	3708      	adds	r7, #8
    e704:	46bd      	mov	sp, r7
    e706:	bd80      	pop	{r7, pc}
    e708:	0000e631 	.word	0x0000e631
    e70c:	0000e4d1 	.word	0x0000e4d1
    e710:	0000e0f9 	.word	0x0000e0f9

0000e714 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    e714:	b580      	push	{r7, lr}
    e716:	b082      	sub	sp, #8
    e718:	af00      	add	r7, sp, #0
    e71a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    e71c:	687b      	ldr	r3, [r7, #4]
    e71e:	781b      	ldrb	r3, [r3, #0]
    e720:	2b00      	cmp	r3, #0
    e722:	d135      	bne.n	e790 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    e724:	687b      	ldr	r3, [r7, #4]
    e726:	785b      	ldrb	r3, [r3, #1]
    e728:	2b05      	cmp	r3, #5
    e72a:	d019      	beq.n	e760 <usbdc_ctrl_status_end+0x4c>
    e72c:	2b09      	cmp	r3, #9
    e72e:	d000      	beq.n	e732 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    e730:	e02f      	b.n	e792 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    e732:	687b      	ldr	r3, [r7, #4]
    e734:	885b      	ldrh	r3, [r3, #2]
    e736:	b29b      	uxth	r3, r3
    e738:	b2da      	uxtb	r2, r3
    e73a:	4b17      	ldr	r3, [pc, #92]	; (e798 <usbdc_ctrl_status_end+0x84>)
    e73c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    e73e:	687b      	ldr	r3, [r7, #4]
    e740:	885b      	ldrh	r3, [r3, #2]
    e742:	b29b      	uxth	r3, r3
    e744:	2b00      	cmp	r3, #0
    e746:	d001      	beq.n	e74c <usbdc_ctrl_status_end+0x38>
    e748:	2204      	movs	r2, #4
    e74a:	e000      	b.n	e74e <usbdc_ctrl_status_end+0x3a>
    e74c:	2203      	movs	r2, #3
    e74e:	4b12      	ldr	r3, [pc, #72]	; (e798 <usbdc_ctrl_status_end+0x84>)
    e750:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e752:	4b11      	ldr	r3, [pc, #68]	; (e798 <usbdc_ctrl_status_end+0x84>)
    e754:	7e9b      	ldrb	r3, [r3, #26]
    e756:	4619      	mov	r1, r3
    e758:	2001      	movs	r0, #1
    e75a:	4b10      	ldr	r3, [pc, #64]	; (e79c <usbdc_ctrl_status_end+0x88>)
    e75c:	4798      	blx	r3
		break;
    e75e:	e018      	b.n	e792 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    e760:	687b      	ldr	r3, [r7, #4]
    e762:	885b      	ldrh	r3, [r3, #2]
    e764:	b29b      	uxth	r3, r3
    e766:	b2db      	uxtb	r3, r3
    e768:	4618      	mov	r0, r3
    e76a:	4b0d      	ldr	r3, [pc, #52]	; (e7a0 <usbdc_ctrl_status_end+0x8c>)
    e76c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    e76e:	687b      	ldr	r3, [r7, #4]
    e770:	885b      	ldrh	r3, [r3, #2]
    e772:	b29b      	uxth	r3, r3
    e774:	2b00      	cmp	r3, #0
    e776:	d001      	beq.n	e77c <usbdc_ctrl_status_end+0x68>
    e778:	2203      	movs	r2, #3
    e77a:	e000      	b.n	e77e <usbdc_ctrl_status_end+0x6a>
    e77c:	2202      	movs	r2, #2
    e77e:	4b06      	ldr	r3, [pc, #24]	; (e798 <usbdc_ctrl_status_end+0x84>)
    e780:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e782:	4b05      	ldr	r3, [pc, #20]	; (e798 <usbdc_ctrl_status_end+0x84>)
    e784:	7e9b      	ldrb	r3, [r3, #26]
    e786:	4619      	mov	r1, r3
    e788:	2001      	movs	r0, #1
    e78a:	4b04      	ldr	r3, [pc, #16]	; (e79c <usbdc_ctrl_status_end+0x88>)
    e78c:	4798      	blx	r3
		break;
    e78e:	e000      	b.n	e792 <usbdc_ctrl_status_end+0x7e>
		return;
    e790:	bf00      	nop
	}
}
    e792:	3708      	adds	r7, #8
    e794:	46bd      	mov	sp, r7
    e796:	bd80      	pop	{r7, pc}
    e798:	2000210c 	.word	0x2000210c
    e79c:	0000e5f1 	.word	0x0000e5f1
    e7a0:	0000e371 	.word	0x0000e371

0000e7a4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    e7a4:	b580      	push	{r7, lr}
    e7a6:	b082      	sub	sp, #8
    e7a8:	af00      	add	r7, sp, #0
    e7aa:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    e7ac:	2201      	movs	r2, #1
    e7ae:	6879      	ldr	r1, [r7, #4]
    e7b0:	2000      	movs	r0, #0
    e7b2:	4b03      	ldr	r3, [pc, #12]	; (e7c0 <usbdc_ctrl_data_end+0x1c>)
    e7b4:	4798      	blx	r3
	return false;
    e7b6:	2300      	movs	r3, #0
}
    e7b8:	4618      	mov	r0, r3
    e7ba:	3708      	adds	r7, #8
    e7bc:	46bd      	mov	sp, r7
    e7be:	bd80      	pop	{r7, pc}
    e7c0:	0000e631 	.word	0x0000e631

0000e7c4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    e7c4:	b580      	push	{r7, lr}
    e7c6:	b082      	sub	sp, #8
    e7c8:	af00      	add	r7, sp, #0
    e7ca:	4603      	mov	r3, r0
    e7cc:	603a      	str	r2, [r7, #0]
    e7ce:	71fb      	strb	r3, [r7, #7]
    e7d0:	460b      	mov	r3, r1
    e7d2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    e7d4:	79bb      	ldrb	r3, [r7, #6]
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d002      	beq.n	e7e0 <usbdc_cb_ctl_done+0x1c>
    e7da:	2b01      	cmp	r3, #1
    e7dc:	d004      	beq.n	e7e8 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    e7de:	e008      	b.n	e7f2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    e7e0:	6838      	ldr	r0, [r7, #0]
    e7e2:	4b06      	ldr	r3, [pc, #24]	; (e7fc <usbdc_cb_ctl_done+0x38>)
    e7e4:	4798      	blx	r3
		break;
    e7e6:	e004      	b.n	e7f2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    e7e8:	6838      	ldr	r0, [r7, #0]
    e7ea:	4b05      	ldr	r3, [pc, #20]	; (e800 <usbdc_cb_ctl_done+0x3c>)
    e7ec:	4798      	blx	r3
    e7ee:	4603      	mov	r3, r0
    e7f0:	e000      	b.n	e7f4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    e7f2:	2300      	movs	r3, #0
}
    e7f4:	4618      	mov	r0, r3
    e7f6:	3708      	adds	r7, #8
    e7f8:	46bd      	mov	sp, r7
    e7fa:	bd80      	pop	{r7, pc}
    e7fc:	0000e715 	.word	0x0000e715
    e800:	0000e7a5 	.word	0x0000e7a5

0000e804 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    e804:	b580      	push	{r7, lr}
    e806:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    e808:	4b10      	ldr	r3, [pc, #64]	; (e84c <usbdc_reset+0x48>)
    e80a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    e80c:	4b10      	ldr	r3, [pc, #64]	; (e850 <usbdc_reset+0x4c>)
    e80e:	2202      	movs	r2, #2
    e810:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    e812:	4b0f      	ldr	r3, [pc, #60]	; (e850 <usbdc_reset+0x4c>)
    e814:	2200      	movs	r2, #0
    e816:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    e818:	4b0d      	ldr	r3, [pc, #52]	; (e850 <usbdc_reset+0x4c>)
    e81a:	2200      	movs	r2, #0
    e81c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    e81e:	2000      	movs	r0, #0
    e820:	4b0c      	ldr	r3, [pc, #48]	; (e854 <usbdc_reset+0x50>)
    e822:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    e824:	4b0a      	ldr	r3, [pc, #40]	; (e850 <usbdc_reset+0x4c>)
    e826:	7f1b      	ldrb	r3, [r3, #28]
    e828:	4618      	mov	r0, r3
    e82a:	4b0b      	ldr	r3, [pc, #44]	; (e858 <usbdc_reset+0x54>)
    e82c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    e82e:	4a0b      	ldr	r2, [pc, #44]	; (e85c <usbdc_reset+0x58>)
    e830:	2100      	movs	r1, #0
    e832:	2000      	movs	r0, #0
    e834:	4b0a      	ldr	r3, [pc, #40]	; (e860 <usbdc_reset+0x5c>)
    e836:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    e838:	4a0a      	ldr	r2, [pc, #40]	; (e864 <usbdc_reset+0x60>)
    e83a:	2102      	movs	r1, #2
    e83c:	2000      	movs	r0, #0
    e83e:	4b08      	ldr	r3, [pc, #32]	; (e860 <usbdc_reset+0x5c>)
    e840:	4798      	blx	r3
	usb_d_ep_enable(0);
    e842:	2000      	movs	r0, #0
    e844:	4b08      	ldr	r3, [pc, #32]	; (e868 <usbdc_reset+0x64>)
    e846:	4798      	blx	r3
}
    e848:	bf00      	nop
    e84a:	bd80      	pop	{r7, pc}
    e84c:	0000e251 	.word	0x0000e251
    e850:	2000210c 	.word	0x2000210c
    e854:	00005175 	.word	0x00005175
    e858:	000050b1 	.word	0x000050b1
    e85c:	0000e6a1 	.word	0x0000e6a1
    e860:	000054c9 	.word	0x000054c9
    e864:	0000e7c5 	.word	0x0000e7c5
    e868:	000051c5 	.word	0x000051c5

0000e86c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    e86c:	b580      	push	{r7, lr}
    e86e:	b082      	sub	sp, #8
    e870:	af00      	add	r7, sp, #0
    e872:	4603      	mov	r3, r0
    e874:	6039      	str	r1, [r7, #0]
    e876:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    e878:	79fb      	ldrb	r3, [r7, #7]
    e87a:	2b00      	cmp	r3, #0
    e87c:	d002      	beq.n	e884 <usbd_event_cb+0x18>
    e87e:	2b01      	cmp	r3, #1
    e880:	d005      	beq.n	e88e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    e882:	e007      	b.n	e894 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    e884:	6839      	ldr	r1, [r7, #0]
    e886:	2000      	movs	r0, #0
    e888:	4b04      	ldr	r3, [pc, #16]	; (e89c <usbd_event_cb+0x30>)
    e88a:	4798      	blx	r3
		break;
    e88c:	e002      	b.n	e894 <usbd_event_cb+0x28>
		usbdc_reset();
    e88e:	4b04      	ldr	r3, [pc, #16]	; (e8a0 <usbd_event_cb+0x34>)
    e890:	4798      	blx	r3
		break;
    e892:	bf00      	nop
	}
}
    e894:	bf00      	nop
    e896:	3708      	adds	r7, #8
    e898:	46bd      	mov	sp, r7
    e89a:	bd80      	pop	{r7, pc}
    e89c:	0000e5f1 	.word	0x0000e5f1
    e8a0:	0000e805 	.word	0x0000e805

0000e8a4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    e8a4:	b580      	push	{r7, lr}
    e8a6:	b088      	sub	sp, #32
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	60b9      	str	r1, [r7, #8]
    e8ac:	607a      	str	r2, [r7, #4]
    e8ae:	461a      	mov	r2, r3
    e8b0:	4603      	mov	r3, r0
    e8b2:	73fb      	strb	r3, [r7, #15]
    e8b4:	4613      	mov	r3, r2
    e8b6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    e8b8:	68bb      	ldr	r3, [r7, #8]
    e8ba:	617b      	str	r3, [r7, #20]
    e8bc:	687b      	ldr	r3, [r7, #4]
    e8be:	61bb      	str	r3, [r7, #24]
    e8c0:	7bfb      	ldrb	r3, [r7, #15]
    e8c2:	773b      	strb	r3, [r7, #28]
    e8c4:	7bbb      	ldrb	r3, [r7, #14]
    e8c6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    e8c8:	f107 0314 	add.w	r3, r7, #20
    e8cc:	4618      	mov	r0, r3
    e8ce:	4b03      	ldr	r3, [pc, #12]	; (e8dc <usbdc_xfer+0x38>)
    e8d0:	4798      	blx	r3
    e8d2:	4603      	mov	r3, r0
}
    e8d4:	4618      	mov	r0, r3
    e8d6:	3720      	adds	r7, #32
    e8d8:	46bd      	mov	sp, r7
    e8da:	bd80      	pop	{r7, pc}
    e8dc:	00005235 	.word	0x00005235

0000e8e0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    e8e0:	b580      	push	{r7, lr}
    e8e2:	b082      	sub	sp, #8
    e8e4:	af00      	add	r7, sp, #0
    e8e6:	4603      	mov	r3, r0
    e8e8:	6039      	str	r1, [r7, #0]
    e8ea:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    e8ec:	79fb      	ldrb	r3, [r7, #7]
    e8ee:	2b01      	cmp	r3, #1
    e8f0:	d009      	beq.n	e906 <usbdc_register_handler+0x26>
    e8f2:	2b02      	cmp	r3, #2
    e8f4:	d00c      	beq.n	e910 <usbdc_register_handler+0x30>
    e8f6:	2b00      	cmp	r3, #0
    e8f8:	d000      	beq.n	e8fc <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    e8fa:	e00e      	b.n	e91a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    e8fc:	6839      	ldr	r1, [r7, #0]
    e8fe:	4809      	ldr	r0, [pc, #36]	; (e924 <usbdc_register_handler+0x44>)
    e900:	4b09      	ldr	r3, [pc, #36]	; (e928 <usbdc_register_handler+0x48>)
    e902:	4798      	blx	r3
		break;
    e904:	e009      	b.n	e91a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    e906:	6839      	ldr	r1, [r7, #0]
    e908:	4808      	ldr	r0, [pc, #32]	; (e92c <usbdc_register_handler+0x4c>)
    e90a:	4b07      	ldr	r3, [pc, #28]	; (e928 <usbdc_register_handler+0x48>)
    e90c:	4798      	blx	r3
		break;
    e90e:	e004      	b.n	e91a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    e910:	6839      	ldr	r1, [r7, #0]
    e912:	4807      	ldr	r0, [pc, #28]	; (e930 <usbdc_register_handler+0x50>)
    e914:	4b04      	ldr	r3, [pc, #16]	; (e928 <usbdc_register_handler+0x48>)
    e916:	4798      	blx	r3
		break;
    e918:	bf00      	nop
	}
}
    e91a:	bf00      	nop
    e91c:	3708      	adds	r7, #8
    e91e:	46bd      	mov	sp, r7
    e920:	bd80      	pop	{r7, pc}
    e922:	bf00      	nop
    e924:	20002110 	.word	0x20002110
    e928:	00005621 	.word	0x00005621
    e92c:	20002114 	.word	0x20002114
    e930:	20002118 	.word	0x20002118

0000e934 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    e934:	b580      	push	{r7, lr}
    e936:	b084      	sub	sp, #16
    e938:	af00      	add	r7, sp, #0
    e93a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    e93c:	687b      	ldr	r3, [r7, #4]
    e93e:	2b00      	cmp	r3, #0
    e940:	bf14      	ite	ne
    e942:	2301      	movne	r3, #1
    e944:	2300      	moveq	r3, #0
    e946:	b2db      	uxtb	r3, r3
    e948:	f240 3255 	movw	r2, #853	; 0x355
    e94c:	4910      	ldr	r1, [pc, #64]	; (e990 <usbdc_init+0x5c>)
    e94e:	4618      	mov	r0, r3
    e950:	4b10      	ldr	r3, [pc, #64]	; (e994 <usbdc_init+0x60>)
    e952:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    e954:	4b10      	ldr	r3, [pc, #64]	; (e998 <usbdc_init+0x64>)
    e956:	4798      	blx	r3
    e958:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    e95a:	68fb      	ldr	r3, [r7, #12]
    e95c:	2b00      	cmp	r3, #0
    e95e:	da01      	bge.n	e964 <usbdc_init+0x30>
		return rc;
    e960:	68fb      	ldr	r3, [r7, #12]
    e962:	e010      	b.n	e986 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    e964:	2220      	movs	r2, #32
    e966:	2100      	movs	r1, #0
    e968:	480c      	ldr	r0, [pc, #48]	; (e99c <usbdc_init+0x68>)
    e96a:	4b0d      	ldr	r3, [pc, #52]	; (e9a0 <usbdc_init+0x6c>)
    e96c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    e96e:	4a0b      	ldr	r2, [pc, #44]	; (e99c <usbdc_init+0x68>)
    e970:	687b      	ldr	r3, [r7, #4]
    e972:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    e974:	490b      	ldr	r1, [pc, #44]	; (e9a4 <usbdc_init+0x70>)
    e976:	2000      	movs	r0, #0
    e978:	4b0b      	ldr	r3, [pc, #44]	; (e9a8 <usbdc_init+0x74>)
    e97a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    e97c:	490b      	ldr	r1, [pc, #44]	; (e9ac <usbdc_init+0x78>)
    e97e:	2001      	movs	r0, #1
    e980:	4b09      	ldr	r3, [pc, #36]	; (e9a8 <usbdc_init+0x74>)
    e982:	4798      	blx	r3

	return 0;
    e984:	2300      	movs	r3, #0
}
    e986:	4618      	mov	r0, r3
    e988:	3710      	adds	r7, #16
    e98a:	46bd      	mov	sp, r7
    e98c:	bd80      	pop	{r7, pc}
    e98e:	bf00      	nop
    e990:	00011d24 	.word	0x00011d24
    e994:	00005545 	.word	0x00005545
    e998:	00004f9d 	.word	0x00004f9d
    e99c:	2000210c 	.word	0x2000210c
    e9a0:	00010945 	.word	0x00010945
    e9a4:	0000e691 	.word	0x0000e691
    e9a8:	00005049 	.word	0x00005049
    e9ac:	0000e86d 	.word	0x0000e86d

0000e9b0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b082      	sub	sp, #8
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    e9b8:	6879      	ldr	r1, [r7, #4]
    e9ba:	4803      	ldr	r0, [pc, #12]	; (e9c8 <usbdc_register_function+0x18>)
    e9bc:	4b03      	ldr	r3, [pc, #12]	; (e9cc <usbdc_register_function+0x1c>)
    e9be:	4798      	blx	r3
}
    e9c0:	bf00      	nop
    e9c2:	3708      	adds	r7, #8
    e9c4:	46bd      	mov	sp, r7
    e9c6:	bd80      	pop	{r7, pc}
    e9c8:	2000211c 	.word	0x2000211c
    e9cc:	00005621 	.word	0x00005621

0000e9d0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    e9d0:	b580      	push	{r7, lr}
    e9d2:	b082      	sub	sp, #8
    e9d4:	af00      	add	r7, sp, #0
    e9d6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    e9d8:	4b0f      	ldr	r3, [pc, #60]	; (ea18 <usbdc_start+0x48>)
    e9da:	7e9b      	ldrb	r3, [r3, #26]
    e9dc:	2b00      	cmp	r3, #0
    e9de:	d002      	beq.n	e9e6 <usbdc_start+0x16>
		return ERR_BUSY;
    e9e0:	f06f 0303 	mvn.w	r3, #3
    e9e4:	e013      	b.n	ea0e <usbdc_start+0x3e>
	}

	if (desces) {
    e9e6:	687b      	ldr	r3, [r7, #4]
    e9e8:	2b00      	cmp	r3, #0
    e9ea:	d00e      	beq.n	ea0a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    e9ec:	4a0a      	ldr	r2, [pc, #40]	; (ea18 <usbdc_start+0x48>)
    e9ee:	687b      	ldr	r3, [r7, #4]
    e9f0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    e9f2:	687b      	ldr	r3, [r7, #4]
    e9f4:	681b      	ldr	r3, [r3, #0]
    e9f6:	79da      	ldrb	r2, [r3, #7]
    e9f8:	4b07      	ldr	r3, [pc, #28]	; (ea18 <usbdc_start+0x48>)
    e9fa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    e9fc:	4b06      	ldr	r3, [pc, #24]	; (ea18 <usbdc_start+0x48>)
    e9fe:	2201      	movs	r2, #1
    ea00:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ea02:	4b06      	ldr	r3, [pc, #24]	; (ea1c <usbdc_start+0x4c>)
    ea04:	4798      	blx	r3
	return ERR_NONE;
    ea06:	2300      	movs	r3, #0
    ea08:	e001      	b.n	ea0e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ea0a:	f06f 0308 	mvn.w	r3, #8
}
    ea0e:	4618      	mov	r0, r3
    ea10:	3708      	adds	r7, #8
    ea12:	46bd      	mov	sp, r7
    ea14:	bd80      	pop	{r7, pc}
    ea16:	bf00      	nop
    ea18:	2000210c 	.word	0x2000210c
    ea1c:	0000506d 	.word	0x0000506d

0000ea20 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ea20:	b580      	push	{r7, lr}
    ea22:	af00      	add	r7, sp, #0
	usb_d_attach();
    ea24:	4b01      	ldr	r3, [pc, #4]	; (ea2c <usbdc_attach+0xc>)
    ea26:	4798      	blx	r3
}
    ea28:	bf00      	nop
    ea2a:	bd80      	pop	{r7, pc}
    ea2c:	00005081 	.word	0x00005081

0000ea30 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ea30:	b480      	push	{r7}
    ea32:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ea34:	4b03      	ldr	r3, [pc, #12]	; (ea44 <usbdc_get_ctrl_buffer+0x14>)
    ea36:	695b      	ldr	r3, [r3, #20]
}
    ea38:	4618      	mov	r0, r3
    ea3a:	46bd      	mov	sp, r7
    ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea40:	4770      	bx	lr
    ea42:	bf00      	nop
    ea44:	2000210c 	.word	0x2000210c

0000ea48 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ea48:	b480      	push	{r7}
    ea4a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ea4c:	4b07      	ldr	r3, [pc, #28]	; (ea6c <usbdc_get_state+0x24>)
    ea4e:	7e9b      	ldrb	r3, [r3, #26]
    ea50:	f003 0310 	and.w	r3, r3, #16
    ea54:	2b00      	cmp	r3, #0
    ea56:	d001      	beq.n	ea5c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ea58:	2310      	movs	r3, #16
    ea5a:	e001      	b.n	ea60 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ea5c:	4b03      	ldr	r3, [pc, #12]	; (ea6c <usbdc_get_state+0x24>)
    ea5e:	7e9b      	ldrb	r3, [r3, #26]
}
    ea60:	4618      	mov	r0, r3
    ea62:	46bd      	mov	sp, r7
    ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea68:	4770      	bx	lr
    ea6a:	bf00      	nop
    ea6c:	2000210c 	.word	0x2000210c

0000ea70 <usb_get_u16>:
{
    ea70:	b480      	push	{r7}
    ea72:	b083      	sub	sp, #12
    ea74:	af00      	add	r7, sp, #0
    ea76:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ea78:	687b      	ldr	r3, [r7, #4]
    ea7a:	781b      	ldrb	r3, [r3, #0]
    ea7c:	b29a      	uxth	r2, r3
    ea7e:	687b      	ldr	r3, [r7, #4]
    ea80:	3301      	adds	r3, #1
    ea82:	781b      	ldrb	r3, [r3, #0]
    ea84:	b29b      	uxth	r3, r3
    ea86:	021b      	lsls	r3, r3, #8
    ea88:	b29b      	uxth	r3, r3
    ea8a:	4413      	add	r3, r2
    ea8c:	b29b      	uxth	r3, r3
}
    ea8e:	4618      	mov	r0, r3
    ea90:	370c      	adds	r7, #12
    ea92:	46bd      	mov	sp, r7
    ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea98:	4770      	bx	lr

0000ea9a <usb_desc_len>:
{
    ea9a:	b480      	push	{r7}
    ea9c:	b083      	sub	sp, #12
    ea9e:	af00      	add	r7, sp, #0
    eaa0:	6078      	str	r0, [r7, #4]
	return desc[0];
    eaa2:	687b      	ldr	r3, [r7, #4]
    eaa4:	781b      	ldrb	r3, [r3, #0]
}
    eaa6:	4618      	mov	r0, r3
    eaa8:	370c      	adds	r7, #12
    eaaa:	46bd      	mov	sp, r7
    eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
    eab0:	4770      	bx	lr

0000eab2 <usb_desc_type>:
{
    eab2:	b480      	push	{r7}
    eab4:	b083      	sub	sp, #12
    eab6:	af00      	add	r7, sp, #0
    eab8:	6078      	str	r0, [r7, #4]
	return desc[1];
    eaba:	687b      	ldr	r3, [r7, #4]
    eabc:	3301      	adds	r3, #1
    eabe:	781b      	ldrb	r3, [r3, #0]
}
    eac0:	4618      	mov	r0, r3
    eac2:	370c      	adds	r7, #12
    eac4:	46bd      	mov	sp, r7
    eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    eaca:	4770      	bx	lr

0000eacc <usb_desc_next>:
{
    eacc:	b580      	push	{r7, lr}
    eace:	b082      	sub	sp, #8
    ead0:	af00      	add	r7, sp, #0
    ead2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ead4:	6878      	ldr	r0, [r7, #4]
    ead6:	4b05      	ldr	r3, [pc, #20]	; (eaec <usb_desc_next+0x20>)
    ead8:	4798      	blx	r3
    eada:	4603      	mov	r3, r0
    eadc:	461a      	mov	r2, r3
    eade:	687b      	ldr	r3, [r7, #4]
    eae0:	4413      	add	r3, r2
}
    eae2:	4618      	mov	r0, r3
    eae4:	3708      	adds	r7, #8
    eae6:	46bd      	mov	sp, r7
    eae8:	bd80      	pop	{r7, pc}
    eaea:	bf00      	nop
    eaec:	0000ea9b 	.word	0x0000ea9b

0000eaf0 <usb_cfg_desc_total_len>:
{
    eaf0:	b580      	push	{r7, lr}
    eaf2:	b082      	sub	sp, #8
    eaf4:	af00      	add	r7, sp, #0
    eaf6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    eaf8:	687b      	ldr	r3, [r7, #4]
    eafa:	3302      	adds	r3, #2
    eafc:	4618      	mov	r0, r3
    eafe:	4b03      	ldr	r3, [pc, #12]	; (eb0c <usb_cfg_desc_total_len+0x1c>)
    eb00:	4798      	blx	r3
    eb02:	4603      	mov	r3, r0
}
    eb04:	4618      	mov	r0, r3
    eb06:	3708      	adds	r7, #8
    eb08:	46bd      	mov	sp, r7
    eb0a:	bd80      	pop	{r7, pc}
    eb0c:	0000ea71 	.word	0x0000ea71

0000eb10 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    eb10:	b580      	push	{r7, lr}
    eb12:	b082      	sub	sp, #8
    eb14:	af00      	add	r7, sp, #0
    eb16:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    eb18:	6878      	ldr	r0, [r7, #4]
    eb1a:	4b05      	ldr	r3, [pc, #20]	; (eb30 <usb_cfg_desc_next+0x20>)
    eb1c:	4798      	blx	r3
    eb1e:	4603      	mov	r3, r0
    eb20:	461a      	mov	r2, r3
    eb22:	687b      	ldr	r3, [r7, #4]
    eb24:	4413      	add	r3, r2
}
    eb26:	4618      	mov	r0, r3
    eb28:	3708      	adds	r7, #8
    eb2a:	46bd      	mov	sp, r7
    eb2c:	bd80      	pop	{r7, pc}
    eb2e:	bf00      	nop
    eb30:	0000eaf1 	.word	0x0000eaf1

0000eb34 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    eb34:	b580      	push	{r7, lr}
    eb36:	b084      	sub	sp, #16
    eb38:	af00      	add	r7, sp, #0
    eb3a:	60f8      	str	r0, [r7, #12]
    eb3c:	60b9      	str	r1, [r7, #8]
    eb3e:	4613      	mov	r3, r2
    eb40:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    eb42:	e015      	b.n	eb70 <usb_find_desc+0x3c>
		_desc_len_check();
    eb44:	68f8      	ldr	r0, [r7, #12]
    eb46:	4b0f      	ldr	r3, [pc, #60]	; (eb84 <usb_find_desc+0x50>)
    eb48:	4798      	blx	r3
    eb4a:	4603      	mov	r3, r0
    eb4c:	2b01      	cmp	r3, #1
    eb4e:	d801      	bhi.n	eb54 <usb_find_desc+0x20>
    eb50:	2300      	movs	r3, #0
    eb52:	e012      	b.n	eb7a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    eb54:	68f8      	ldr	r0, [r7, #12]
    eb56:	4b0c      	ldr	r3, [pc, #48]	; (eb88 <usb_find_desc+0x54>)
    eb58:	4798      	blx	r3
    eb5a:	4603      	mov	r3, r0
    eb5c:	461a      	mov	r2, r3
    eb5e:	79fb      	ldrb	r3, [r7, #7]
    eb60:	4293      	cmp	r3, r2
    eb62:	d101      	bne.n	eb68 <usb_find_desc+0x34>
			return desc;
    eb64:	68fb      	ldr	r3, [r7, #12]
    eb66:	e008      	b.n	eb7a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    eb68:	68f8      	ldr	r0, [r7, #12]
    eb6a:	4b08      	ldr	r3, [pc, #32]	; (eb8c <usb_find_desc+0x58>)
    eb6c:	4798      	blx	r3
    eb6e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    eb70:	68fa      	ldr	r2, [r7, #12]
    eb72:	68bb      	ldr	r3, [r7, #8]
    eb74:	429a      	cmp	r2, r3
    eb76:	d3e5      	bcc.n	eb44 <usb_find_desc+0x10>
	}
	return NULL;
    eb78:	2300      	movs	r3, #0
}
    eb7a:	4618      	mov	r0, r3
    eb7c:	3710      	adds	r7, #16
    eb7e:	46bd      	mov	sp, r7
    eb80:	bd80      	pop	{r7, pc}
    eb82:	bf00      	nop
    eb84:	0000ea9b 	.word	0x0000ea9b
    eb88:	0000eab3 	.word	0x0000eab3
    eb8c:	0000eacd 	.word	0x0000eacd

0000eb90 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    eb90:	b580      	push	{r7, lr}
    eb92:	b082      	sub	sp, #8
    eb94:	af00      	add	r7, sp, #0
    eb96:	6078      	str	r0, [r7, #4]
    eb98:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    eb9a:	e019      	b.n	ebd0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    eb9c:	6878      	ldr	r0, [r7, #4]
    eb9e:	4b12      	ldr	r3, [pc, #72]	; (ebe8 <usb_find_ep_desc+0x58>)
    eba0:	4798      	blx	r3
    eba2:	4603      	mov	r3, r0
    eba4:	2b01      	cmp	r3, #1
    eba6:	d801      	bhi.n	ebac <usb_find_ep_desc+0x1c>
    eba8:	2300      	movs	r3, #0
    ebaa:	e018      	b.n	ebde <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ebac:	6878      	ldr	r0, [r7, #4]
    ebae:	4b0f      	ldr	r3, [pc, #60]	; (ebec <usb_find_ep_desc+0x5c>)
    ebb0:	4798      	blx	r3
    ebb2:	4603      	mov	r3, r0
    ebb4:	2b04      	cmp	r3, #4
    ebb6:	d010      	beq.n	ebda <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ebb8:	6878      	ldr	r0, [r7, #4]
    ebba:	4b0c      	ldr	r3, [pc, #48]	; (ebec <usb_find_ep_desc+0x5c>)
    ebbc:	4798      	blx	r3
    ebbe:	4603      	mov	r3, r0
    ebc0:	2b05      	cmp	r3, #5
    ebc2:	d101      	bne.n	ebc8 <usb_find_ep_desc+0x38>
			return desc;
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	e00a      	b.n	ebde <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    ebc8:	6878      	ldr	r0, [r7, #4]
    ebca:	4b09      	ldr	r3, [pc, #36]	; (ebf0 <usb_find_ep_desc+0x60>)
    ebcc:	4798      	blx	r3
    ebce:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    ebd0:	687a      	ldr	r2, [r7, #4]
    ebd2:	683b      	ldr	r3, [r7, #0]
    ebd4:	429a      	cmp	r2, r3
    ebd6:	d3e1      	bcc.n	eb9c <usb_find_ep_desc+0xc>
    ebd8:	e000      	b.n	ebdc <usb_find_ep_desc+0x4c>
			break;
    ebda:	bf00      	nop
	}
	return NULL;
    ebdc:	2300      	movs	r3, #0
}
    ebde:	4618      	mov	r0, r3
    ebe0:	3708      	adds	r7, #8
    ebe2:	46bd      	mov	sp, r7
    ebe4:	bd80      	pop	{r7, pc}
    ebe6:	bf00      	nop
    ebe8:	0000ea9b 	.word	0x0000ea9b
    ebec:	0000eab3 	.word	0x0000eab3
    ebf0:	0000eacd 	.word	0x0000eacd

0000ebf4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ebf4:	b580      	push	{r7, lr}
    ebf6:	b084      	sub	sp, #16
    ebf8:	af00      	add	r7, sp, #0
    ebfa:	60f8      	str	r0, [r7, #12]
    ebfc:	60b9      	str	r1, [r7, #8]
    ebfe:	4613      	mov	r3, r2
    ec00:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ec02:	2202      	movs	r2, #2
    ec04:	68b9      	ldr	r1, [r7, #8]
    ec06:	68f8      	ldr	r0, [r7, #12]
    ec08:	4b15      	ldr	r3, [pc, #84]	; (ec60 <usb_find_cfg_desc+0x6c>)
    ec0a:	4798      	blx	r3
    ec0c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ec0e:	68fb      	ldr	r3, [r7, #12]
    ec10:	2b00      	cmp	r3, #0
    ec12:	d11a      	bne.n	ec4a <usb_find_cfg_desc+0x56>
		return NULL;
    ec14:	2300      	movs	r3, #0
    ec16:	e01f      	b.n	ec58 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    ec18:	68f8      	ldr	r0, [r7, #12]
    ec1a:	4b12      	ldr	r3, [pc, #72]	; (ec64 <usb_find_cfg_desc+0x70>)
    ec1c:	4798      	blx	r3
    ec1e:	4603      	mov	r3, r0
    ec20:	2b01      	cmp	r3, #1
    ec22:	d801      	bhi.n	ec28 <usb_find_cfg_desc+0x34>
    ec24:	2300      	movs	r3, #0
    ec26:	e017      	b.n	ec58 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    ec28:	68fb      	ldr	r3, [r7, #12]
    ec2a:	3301      	adds	r3, #1
    ec2c:	781b      	ldrb	r3, [r3, #0]
    ec2e:	2b02      	cmp	r3, #2
    ec30:	d110      	bne.n	ec54 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    ec32:	68fb      	ldr	r3, [r7, #12]
    ec34:	3305      	adds	r3, #5
    ec36:	781b      	ldrb	r3, [r3, #0]
    ec38:	79fa      	ldrb	r2, [r7, #7]
    ec3a:	429a      	cmp	r2, r3
    ec3c:	d101      	bne.n	ec42 <usb_find_cfg_desc+0x4e>
			return desc;
    ec3e:	68fb      	ldr	r3, [r7, #12]
    ec40:	e00a      	b.n	ec58 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ec42:	68f8      	ldr	r0, [r7, #12]
    ec44:	4b08      	ldr	r3, [pc, #32]	; (ec68 <usb_find_cfg_desc+0x74>)
    ec46:	4798      	blx	r3
    ec48:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ec4a:	68fa      	ldr	r2, [r7, #12]
    ec4c:	68bb      	ldr	r3, [r7, #8]
    ec4e:	429a      	cmp	r2, r3
    ec50:	d3e2      	bcc.n	ec18 <usb_find_cfg_desc+0x24>
    ec52:	e000      	b.n	ec56 <usb_find_cfg_desc+0x62>
			break;
    ec54:	bf00      	nop
	}
	return NULL;
    ec56:	2300      	movs	r3, #0
}
    ec58:	4618      	mov	r0, r3
    ec5a:	3710      	adds	r7, #16
    ec5c:	46bd      	mov	sp, r7
    ec5e:	bd80      	pop	{r7, pc}
    ec60:	0000eb35 	.word	0x0000eb35
    ec64:	0000ea9b 	.word	0x0000ea9b
    ec68:	0000eb11 	.word	0x0000eb11

0000ec6c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    ec6c:	b580      	push	{r7, lr}
    ec6e:	b086      	sub	sp, #24
    ec70:	af00      	add	r7, sp, #0
    ec72:	60f8      	str	r0, [r7, #12]
    ec74:	60b9      	str	r1, [r7, #8]
    ec76:	4613      	mov	r3, r2
    ec78:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ec7a:	2300      	movs	r3, #0
    ec7c:	75fb      	strb	r3, [r7, #23]
    ec7e:	e020      	b.n	ecc2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ec80:	2203      	movs	r2, #3
    ec82:	68b9      	ldr	r1, [r7, #8]
    ec84:	68f8      	ldr	r0, [r7, #12]
    ec86:	4b13      	ldr	r3, [pc, #76]	; (ecd4 <usb_find_str_desc+0x68>)
    ec88:	4798      	blx	r3
    ec8a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    ec8c:	68fb      	ldr	r3, [r7, #12]
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d015      	beq.n	ecbe <usb_find_str_desc+0x52>
			_desc_len_check();
    ec92:	68f8      	ldr	r0, [r7, #12]
    ec94:	4b10      	ldr	r3, [pc, #64]	; (ecd8 <usb_find_str_desc+0x6c>)
    ec96:	4798      	blx	r3
    ec98:	4603      	mov	r3, r0
    ec9a:	2b01      	cmp	r3, #1
    ec9c:	d801      	bhi.n	eca2 <usb_find_str_desc+0x36>
    ec9e:	2300      	movs	r3, #0
    eca0:	e014      	b.n	eccc <usb_find_str_desc+0x60>
			if (i == str_index) {
    eca2:	7dfa      	ldrb	r2, [r7, #23]
    eca4:	79fb      	ldrb	r3, [r7, #7]
    eca6:	429a      	cmp	r2, r3
    eca8:	d101      	bne.n	ecae <usb_find_str_desc+0x42>
				return desc;
    ecaa:	68fb      	ldr	r3, [r7, #12]
    ecac:	e00e      	b.n	eccc <usb_find_str_desc+0x60>
			}
			i++;
    ecae:	7dfb      	ldrb	r3, [r7, #23]
    ecb0:	3301      	adds	r3, #1
    ecb2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    ecb4:	68f8      	ldr	r0, [r7, #12]
    ecb6:	4b09      	ldr	r3, [pc, #36]	; (ecdc <usb_find_str_desc+0x70>)
    ecb8:	4798      	blx	r3
    ecba:	60f8      	str	r0, [r7, #12]
    ecbc:	e001      	b.n	ecc2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    ecbe:	2300      	movs	r3, #0
    ecc0:	e004      	b.n	eccc <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    ecc2:	68fa      	ldr	r2, [r7, #12]
    ecc4:	68bb      	ldr	r3, [r7, #8]
    ecc6:	429a      	cmp	r2, r3
    ecc8:	d3da      	bcc.n	ec80 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    ecca:	2300      	movs	r3, #0
}
    eccc:	4618      	mov	r0, r3
    ecce:	3718      	adds	r7, #24
    ecd0:	46bd      	mov	sp, r7
    ecd2:	bd80      	pop	{r7, pc}
    ecd4:	0000eb35 	.word	0x0000eb35
    ecd8:	0000ea9b 	.word	0x0000ea9b
    ecdc:	0000eacd 	.word	0x0000eacd

0000ece0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    ece0:	b580      	push	{r7, lr}
    ece2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ece4:	4805      	ldr	r0, [pc, #20]	; (ecfc <cdc_device_acm_init+0x1c>)
    ece6:	4b06      	ldr	r3, [pc, #24]	; (ed00 <cdc_device_acm_init+0x20>)
    ece8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    ecea:	4b06      	ldr	r3, [pc, #24]	; (ed04 <cdc_device_acm_init+0x24>)
    ecec:	4798      	blx	r3

	usbdc_start(single_desc);
    ecee:	4806      	ldr	r0, [pc, #24]	; (ed08 <cdc_device_acm_init+0x28>)
    ecf0:	4b06      	ldr	r3, [pc, #24]	; (ed0c <cdc_device_acm_init+0x2c>)
    ecf2:	4798      	blx	r3
	usbdc_attach();
    ecf4:	4b06      	ldr	r3, [pc, #24]	; (ed10 <cdc_device_acm_init+0x30>)
    ecf6:	4798      	blx	r3
}
    ecf8:	bf00      	nop
    ecfa:	bd80      	pop	{r7, pc}
    ecfc:	2000216c 	.word	0x2000216c
    ed00:	0000e935 	.word	0x0000e935
    ed04:	0000dbad 	.word	0x0000dbad
    ed08:	2000010c 	.word	0x2000010c
    ed0c:	0000e9d1 	.word	0x0000e9d1
    ed10:	0000ea21 	.word	0x0000ea21

0000ed14 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ed14:	b580      	push	{r7, lr}
    ed16:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ed18:	4b01      	ldr	r3, [pc, #4]	; (ed20 <usb_init+0xc>)
    ed1a:	4798      	blx	r3
}
    ed1c:	bf00      	nop
    ed1e:	bd80      	pop	{r7, pc}
    ed20:	0000ece1 	.word	0x0000ece1

0000ed24 <__aeabi_atexit>:
    ed24:	460b      	mov	r3, r1
    ed26:	4601      	mov	r1, r0
    ed28:	4618      	mov	r0, r3
    ed2a:	f001 bd2f 	b.w	1078c <__cxa_atexit>
    ed2e:	bf00      	nop

0000ed30 <_ZdlPvj>:
    ed30:	f7f1 bda4 	b.w	87c <_ZdlPv>

0000ed34 <pow>:
    ed34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed38:	f8df 92f0 	ldr.w	r9, [pc, #752]	; f02c <pow+0x2f8>
    ed3c:	b08d      	sub	sp, #52	; 0x34
    ed3e:	4606      	mov	r6, r0
    ed40:	460f      	mov	r7, r1
    ed42:	4614      	mov	r4, r2
    ed44:	461d      	mov	r5, r3
    ed46:	f000 f973 	bl	f030 <__ieee754_pow>
    ed4a:	f999 8000 	ldrsb.w	r8, [r9]
    ed4e:	f1b8 3fff 	cmp.w	r8, #4294967295
    ed52:	e9cd 0100 	strd	r0, r1, [sp]
    ed56:	d036      	beq.n	edc6 <pow+0x92>
    ed58:	4622      	mov	r2, r4
    ed5a:	462b      	mov	r3, r5
    ed5c:	4620      	mov	r0, r4
    ed5e:	4629      	mov	r1, r5
    ed60:	f001 fcde 	bl	10720 <__aeabi_dcmpun>
    ed64:	4683      	mov	fp, r0
    ed66:	bb70      	cbnz	r0, edc6 <pow+0x92>
    ed68:	4632      	mov	r2, r6
    ed6a:	463b      	mov	r3, r7
    ed6c:	4630      	mov	r0, r6
    ed6e:	4639      	mov	r1, r7
    ed70:	f001 fcd6 	bl	10720 <__aeabi_dcmpun>
    ed74:	2200      	movs	r2, #0
    ed76:	4682      	mov	sl, r0
    ed78:	2300      	movs	r3, #0
    ed7a:	2800      	cmp	r0, #0
    ed7c:	f040 80a0 	bne.w	eec0 <pow+0x18c>
    ed80:	4630      	mov	r0, r6
    ed82:	4639      	mov	r1, r7
    ed84:	f001 fc9a 	bl	106bc <__aeabi_dcmpeq>
    ed88:	b310      	cbz	r0, edd0 <pow+0x9c>
    ed8a:	2200      	movs	r2, #0
    ed8c:	2300      	movs	r3, #0
    ed8e:	4620      	mov	r0, r4
    ed90:	4629      	mov	r1, r5
    ed92:	f001 fc93 	bl	106bc <__aeabi_dcmpeq>
    ed96:	4683      	mov	fp, r0
    ed98:	2800      	cmp	r0, #0
    ed9a:	d06a      	beq.n	ee72 <pow+0x13e>
    ed9c:	2201      	movs	r2, #1
    ed9e:	4b9c      	ldr	r3, [pc, #624]	; (f010 <pow+0x2dc>)
    eda0:	9202      	str	r2, [sp, #8]
    eda2:	2100      	movs	r1, #0
    eda4:	2200      	movs	r2, #0
    eda6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    edaa:	e9cd 6704 	strd	r6, r7, [sp, #16]
    edae:	e9cd 4506 	strd	r4, r5, [sp, #24]
    edb2:	e9cd 1208 	strd	r1, r2, [sp, #32]
    edb6:	9303      	str	r3, [sp, #12]
    edb8:	f1b8 0f00 	cmp.w	r8, #0
    edbc:	d045      	beq.n	ee4a <pow+0x116>
    edbe:	4c95      	ldr	r4, [pc, #596]	; (f014 <pow+0x2e0>)
    edc0:	2300      	movs	r3, #0
    edc2:	e9cd 3400 	strd	r3, r4, [sp]
    edc6:	e9dd 0100 	ldrd	r0, r1, [sp]
    edca:	b00d      	add	sp, #52	; 0x34
    edcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edd0:	e9dd 0100 	ldrd	r0, r1, [sp]
    edd4:	f000 ff32 	bl	fc3c <finite>
    edd8:	4680      	mov	r8, r0
    edda:	2800      	cmp	r0, #0
    eddc:	f000 808b 	beq.w	eef6 <pow+0x1c2>
    ede0:	f04f 0a00 	mov.w	sl, #0
    ede4:	f04f 0b00 	mov.w	fp, #0
    ede8:	4652      	mov	r2, sl
    edea:	465b      	mov	r3, fp
    edec:	e9dd 0100 	ldrd	r0, r1, [sp]
    edf0:	f001 fc64 	bl	106bc <__aeabi_dcmpeq>
    edf4:	2800      	cmp	r0, #0
    edf6:	d0e6      	beq.n	edc6 <pow+0x92>
    edf8:	4630      	mov	r0, r6
    edfa:	4639      	mov	r1, r7
    edfc:	f000 ff1e 	bl	fc3c <finite>
    ee00:	2800      	cmp	r0, #0
    ee02:	d0e0      	beq.n	edc6 <pow+0x92>
    ee04:	4620      	mov	r0, r4
    ee06:	4629      	mov	r1, r5
    ee08:	f000 ff18 	bl	fc3c <finite>
    ee0c:	2800      	cmp	r0, #0
    ee0e:	d0da      	beq.n	edc6 <pow+0x92>
    ee10:	f999 3000 	ldrsb.w	r3, [r9]
    ee14:	4a7e      	ldr	r2, [pc, #504]	; (f010 <pow+0x2dc>)
    ee16:	9203      	str	r2, [sp, #12]
    ee18:	2104      	movs	r1, #4
    ee1a:	2200      	movs	r2, #0
    ee1c:	2b02      	cmp	r3, #2
    ee1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    ee22:	e9cd 4506 	strd	r4, r5, [sp, #24]
    ee26:	e9cd ab08 	strd	sl, fp, [sp, #32]
    ee2a:	9102      	str	r1, [sp, #8]
    ee2c:	920a      	str	r2, [sp, #40]	; 0x28
    ee2e:	d003      	beq.n	ee38 <pow+0x104>
    ee30:	a802      	add	r0, sp, #8
    ee32:	f000 ff09 	bl	fc48 <matherr>
    ee36:	b968      	cbnz	r0, ee54 <pow+0x120>
    ee38:	f001 fcae 	bl	10798 <__errno>
    ee3c:	2322      	movs	r3, #34	; 0x22
    ee3e:	6003      	str	r3, [r0, #0]
    ee40:	e008      	b.n	ee54 <pow+0x120>
    ee42:	2300      	movs	r3, #0
    ee44:	2400      	movs	r4, #0
    ee46:	e9cd 3408 	strd	r3, r4, [sp, #32]
    ee4a:	a802      	add	r0, sp, #8
    ee4c:	f000 fefc 	bl	fc48 <matherr>
    ee50:	2800      	cmp	r0, #0
    ee52:	d030      	beq.n	eeb6 <pow+0x182>
    ee54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee56:	b11b      	cbz	r3, ee60 <pow+0x12c>
    ee58:	f001 fc9e 	bl	10798 <__errno>
    ee5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee5e:	6003      	str	r3, [r0, #0]
    ee60:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    ee64:	e9cd 3400 	strd	r3, r4, [sp]
    ee68:	e9dd 0100 	ldrd	r0, r1, [sp]
    ee6c:	b00d      	add	sp, #52	; 0x34
    ee6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee72:	4620      	mov	r0, r4
    ee74:	4629      	mov	r1, r5
    ee76:	f000 fee1 	bl	fc3c <finite>
    ee7a:	2800      	cmp	r0, #0
    ee7c:	d0a3      	beq.n	edc6 <pow+0x92>
    ee7e:	2200      	movs	r2, #0
    ee80:	2300      	movs	r3, #0
    ee82:	4620      	mov	r0, r4
    ee84:	4629      	mov	r1, r5
    ee86:	f001 fc23 	bl	106d0 <__aeabi_dcmplt>
    ee8a:	2800      	cmp	r0, #0
    ee8c:	d09b      	beq.n	edc6 <pow+0x92>
    ee8e:	f999 3000 	ldrsb.w	r3, [r9]
    ee92:	4a5f      	ldr	r2, [pc, #380]	; (f010 <pow+0x2dc>)
    ee94:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    ee98:	2101      	movs	r1, #1
    ee9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    ee9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    eea2:	9102      	str	r1, [sp, #8]
    eea4:	9203      	str	r2, [sp, #12]
    eea6:	2b00      	cmp	r3, #0
    eea8:	d0cb      	beq.n	ee42 <pow+0x10e>
    eeaa:	495b      	ldr	r1, [pc, #364]	; (f018 <pow+0x2e4>)
    eeac:	2000      	movs	r0, #0
    eeae:	2b02      	cmp	r3, #2
    eeb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    eeb4:	d1c9      	bne.n	ee4a <pow+0x116>
    eeb6:	f001 fc6f 	bl	10798 <__errno>
    eeba:	2321      	movs	r3, #33	; 0x21
    eebc:	6003      	str	r3, [r0, #0]
    eebe:	e7c9      	b.n	ee54 <pow+0x120>
    eec0:	4620      	mov	r0, r4
    eec2:	4629      	mov	r1, r5
    eec4:	f001 fbfa 	bl	106bc <__aeabi_dcmpeq>
    eec8:	2800      	cmp	r0, #0
    eeca:	f43f af7c 	beq.w	edc6 <pow+0x92>
    eece:	4b51      	ldr	r3, [pc, #324]	; (f014 <pow+0x2e0>)
    eed0:	494f      	ldr	r1, [pc, #316]	; (f010 <pow+0x2dc>)
    eed2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    eed6:	2001      	movs	r0, #1
    eed8:	2200      	movs	r2, #0
    eeda:	f1b8 0f02 	cmp.w	r8, #2
    eede:	e9cd 6704 	strd	r6, r7, [sp, #16]
    eee2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    eee6:	9002      	str	r0, [sp, #8]
    eee8:	9103      	str	r1, [sp, #12]
    eeea:	e9cd 2308 	strd	r2, r3, [sp, #32]
    eeee:	d1ac      	bne.n	ee4a <pow+0x116>
    eef0:	e9cd 2300 	strd	r2, r3, [sp]
    eef4:	e767      	b.n	edc6 <pow+0x92>
    eef6:	4630      	mov	r0, r6
    eef8:	4639      	mov	r1, r7
    eefa:	f000 fe9f 	bl	fc3c <finite>
    eefe:	2800      	cmp	r0, #0
    ef00:	f43f af6e 	beq.w	ede0 <pow+0xac>
    ef04:	4620      	mov	r0, r4
    ef06:	4629      	mov	r1, r5
    ef08:	f000 fe98 	bl	fc3c <finite>
    ef0c:	2800      	cmp	r0, #0
    ef0e:	f43f af67 	beq.w	ede0 <pow+0xac>
    ef12:	e9dd 2300 	ldrd	r2, r3, [sp]
    ef16:	4610      	mov	r0, r2
    ef18:	4619      	mov	r1, r3
    ef1a:	f001 fc01 	bl	10720 <__aeabi_dcmpun>
    ef1e:	2800      	cmp	r0, #0
    ef20:	d158      	bne.n	efd4 <pow+0x2a0>
    ef22:	2303      	movs	r3, #3
    ef24:	f999 8000 	ldrsb.w	r8, [r9]
    ef28:	9302      	str	r3, [sp, #8]
    ef2a:	4b39      	ldr	r3, [pc, #228]	; (f010 <pow+0x2dc>)
    ef2c:	900a      	str	r0, [sp, #40]	; 0x28
    ef2e:	9303      	str	r3, [sp, #12]
    ef30:	e9cd 6704 	strd	r6, r7, [sp, #16]
    ef34:	e9cd 4506 	strd	r4, r5, [sp, #24]
    ef38:	2200      	movs	r2, #0
    ef3a:	2300      	movs	r3, #0
    ef3c:	4630      	mov	r0, r6
    ef3e:	4639      	mov	r1, r7
    ef40:	f1b8 0f00 	cmp.w	r8, #0
    ef44:	d126      	bne.n	ef94 <pow+0x260>
    ef46:	4f35      	ldr	r7, [pc, #212]	; (f01c <pow+0x2e8>)
    ef48:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    ef4c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    ef50:	f001 fbbe 	bl	106d0 <__aeabi_dcmplt>
    ef54:	2800      	cmp	r0, #0
    ef56:	f43f af6b 	beq.w	ee30 <pow+0xfc>
    ef5a:	2200      	movs	r2, #0
    ef5c:	4b30      	ldr	r3, [pc, #192]	; (f020 <pow+0x2ec>)
    ef5e:	4620      	mov	r0, r4
    ef60:	4629      	mov	r1, r5
    ef62:	f001 f943 	bl	101ec <__aeabi_dmul>
    ef66:	4604      	mov	r4, r0
    ef68:	460d      	mov	r5, r1
    ef6a:	f000 fe75 	bl	fc58 <rint>
    ef6e:	4602      	mov	r2, r0
    ef70:	460b      	mov	r3, r1
    ef72:	4620      	mov	r0, r4
    ef74:	4629      	mov	r1, r5
    ef76:	f001 fba1 	bl	106bc <__aeabi_dcmpeq>
    ef7a:	bb40      	cbnz	r0, efce <pow+0x29a>
    ef7c:	4b29      	ldr	r3, [pc, #164]	; (f024 <pow+0x2f0>)
    ef7e:	f999 8000 	ldrsb.w	r8, [r9]
    ef82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ef86:	e9cd 2308 	strd	r2, r3, [sp, #32]
    ef8a:	f1b8 0f02 	cmp.w	r8, #2
    ef8e:	f47f af4f 	bne.w	ee30 <pow+0xfc>
    ef92:	e751      	b.n	ee38 <pow+0x104>
    ef94:	4f24      	ldr	r7, [pc, #144]	; (f028 <pow+0x2f4>)
    ef96:	2600      	movs	r6, #0
    ef98:	e9cd 6708 	strd	r6, r7, [sp, #32]
    ef9c:	f001 fb98 	bl	106d0 <__aeabi_dcmplt>
    efa0:	2800      	cmp	r0, #0
    efa2:	d0f2      	beq.n	ef8a <pow+0x256>
    efa4:	2200      	movs	r2, #0
    efa6:	4b1e      	ldr	r3, [pc, #120]	; (f020 <pow+0x2ec>)
    efa8:	4620      	mov	r0, r4
    efaa:	4629      	mov	r1, r5
    efac:	f001 f91e 	bl	101ec <__aeabi_dmul>
    efb0:	4604      	mov	r4, r0
    efb2:	460d      	mov	r5, r1
    efb4:	f000 fe50 	bl	fc58 <rint>
    efb8:	4602      	mov	r2, r0
    efba:	460b      	mov	r3, r1
    efbc:	4620      	mov	r0, r4
    efbe:	4629      	mov	r1, r5
    efc0:	f001 fb7c 	bl	106bc <__aeabi_dcmpeq>
    efc4:	b918      	cbnz	r0, efce <pow+0x29a>
    efc6:	4b14      	ldr	r3, [pc, #80]	; (f018 <pow+0x2e4>)
    efc8:	2200      	movs	r2, #0
    efca:	e9cd 2308 	strd	r2, r3, [sp, #32]
    efce:	f999 8000 	ldrsb.w	r8, [r9]
    efd2:	e7da      	b.n	ef8a <pow+0x256>
    efd4:	f999 9000 	ldrsb.w	r9, [r9]
    efd8:	4b0d      	ldr	r3, [pc, #52]	; (f010 <pow+0x2dc>)
    efda:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    efde:	2201      	movs	r2, #1
    efe0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    efe4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    efe8:	9202      	str	r2, [sp, #8]
    efea:	9303      	str	r3, [sp, #12]
    efec:	f1b9 0f00 	cmp.w	r9, #0
    eff0:	f43f af27 	beq.w	ee42 <pow+0x10e>
    eff4:	2200      	movs	r2, #0
    eff6:	2300      	movs	r3, #0
    eff8:	4610      	mov	r0, r2
    effa:	4619      	mov	r1, r3
    effc:	f001 fa20 	bl	10440 <__aeabi_ddiv>
    f000:	f1b9 0f02 	cmp.w	r9, #2
    f004:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f008:	f43f af55 	beq.w	eeb6 <pow+0x182>
    f00c:	e71d      	b.n	ee4a <pow+0x116>
    f00e:	bf00      	nop
    f010:	00011d3c 	.word	0x00011d3c
    f014:	3ff00000 	.word	0x3ff00000
    f018:	fff00000 	.word	0xfff00000
    f01c:	47efffff 	.word	0x47efffff
    f020:	3fe00000 	.word	0x3fe00000
    f024:	c7efffff 	.word	0xc7efffff
    f028:	7ff00000 	.word	0x7ff00000
    f02c:	20000114 	.word	0x20000114

0000f030 <__ieee754_pow>:
    f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f034:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    f038:	ea57 0402 	orrs.w	r4, r7, r2
    f03c:	b093      	sub	sp, #76	; 0x4c
    f03e:	d037      	beq.n	f0b0 <__ieee754_pow+0x80>
    f040:	4c67      	ldr	r4, [pc, #412]	; (f1e0 <__ieee754_pow+0x1b0>)
    f042:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    f046:	42a6      	cmp	r6, r4
    f048:	4683      	mov	fp, r0
    f04a:	460d      	mov	r5, r1
    f04c:	dc29      	bgt.n	f0a2 <__ieee754_pow+0x72>
    f04e:	469a      	mov	sl, r3
    f050:	4696      	mov	lr, r2
    f052:	d025      	beq.n	f0a0 <__ieee754_pow+0x70>
    f054:	42a7      	cmp	r7, r4
    f056:	dc24      	bgt.n	f0a2 <__ieee754_pow+0x72>
    f058:	4c61      	ldr	r4, [pc, #388]	; (f1e0 <__ieee754_pow+0x1b0>)
    f05a:	42a7      	cmp	r7, r4
    f05c:	d079      	beq.n	f152 <__ieee754_pow+0x122>
    f05e:	2d00      	cmp	r5, #0
    f060:	4689      	mov	r9, r1
    f062:	4680      	mov	r8, r0
    f064:	e9cd 2300 	strd	r2, r3, [sp]
    f068:	db77      	blt.n	f15a <__ieee754_pow+0x12a>
    f06a:	2400      	movs	r4, #0
    f06c:	f1be 0f00 	cmp.w	lr, #0
    f070:	d12c      	bne.n	f0cc <__ieee754_pow+0x9c>
    f072:	4b5b      	ldr	r3, [pc, #364]	; (f1e0 <__ieee754_pow+0x1b0>)
    f074:	429f      	cmp	r7, r3
    f076:	f000 808b 	beq.w	f190 <__ieee754_pow+0x160>
    f07a:	4b5a      	ldr	r3, [pc, #360]	; (f1e4 <__ieee754_pow+0x1b4>)
    f07c:	429f      	cmp	r7, r3
    f07e:	d061      	beq.n	f144 <__ieee754_pow+0x114>
    f080:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    f084:	f000 83ba 	beq.w	f7fc <__ieee754_pow+0x7cc>
    f088:	4b57      	ldr	r3, [pc, #348]	; (f1e8 <__ieee754_pow+0x1b8>)
    f08a:	459a      	cmp	sl, r3
    f08c:	d11e      	bne.n	f0cc <__ieee754_pow+0x9c>
    f08e:	2d00      	cmp	r5, #0
    f090:	db1c      	blt.n	f0cc <__ieee754_pow+0x9c>
    f092:	4640      	mov	r0, r8
    f094:	4649      	mov	r1, r9
    f096:	b013      	add	sp, #76	; 0x4c
    f098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f09c:	f000 bd0e 	b.w	fabc <__ieee754_sqrt>
    f0a0:	b158      	cbz	r0, f0ba <__ieee754_pow+0x8a>
    f0a2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    f0a6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    f0aa:	ea56 030b 	orrs.w	r3, r6, fp
    f0ae:	d106      	bne.n	f0be <__ieee754_pow+0x8e>
    f0b0:	494c      	ldr	r1, [pc, #304]	; (f1e4 <__ieee754_pow+0x1b4>)
    f0b2:	2000      	movs	r0, #0
    f0b4:	b013      	add	sp, #76	; 0x4c
    f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0ba:	42b7      	cmp	r7, r6
    f0bc:	ddcc      	ble.n	f058 <__ieee754_pow+0x28>
    f0be:	484b      	ldr	r0, [pc, #300]	; (f1ec <__ieee754_pow+0x1bc>)
    f0c0:	b013      	add	sp, #76	; 0x4c
    f0c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0c6:	f000 bdc1 	b.w	fc4c <nan>
    f0ca:	2400      	movs	r4, #0
    f0cc:	4640      	mov	r0, r8
    f0ce:	4649      	mov	r1, r9
    f0d0:	f000 fdb0 	bl	fc34 <fabs>
    f0d4:	f1bb 0f00 	cmp.w	fp, #0
    f0d8:	d119      	bne.n	f10e <__ieee754_pow+0xde>
    f0da:	b126      	cbz	r6, f0e6 <__ieee754_pow+0xb6>
    f0dc:	4b41      	ldr	r3, [pc, #260]	; (f1e4 <__ieee754_pow+0x1b4>)
    f0de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    f0e2:	429a      	cmp	r2, r3
    f0e4:	d113      	bne.n	f10e <__ieee754_pow+0xde>
    f0e6:	f1ba 0f00 	cmp.w	sl, #0
    f0ea:	f2c0 83bc 	blt.w	f866 <__ieee754_pow+0x836>
    f0ee:	2d00      	cmp	r5, #0
    f0f0:	dae0      	bge.n	f0b4 <__ieee754_pow+0x84>
    f0f2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    f0f6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    f0fa:	ea56 0304 	orrs.w	r3, r6, r4
    f0fe:	f000 848f 	beq.w	fa20 <__ieee754_pow+0x9f0>
    f102:	2c01      	cmp	r4, #1
    f104:	d1d6      	bne.n	f0b4 <__ieee754_pow+0x84>
    f106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    f10a:	4619      	mov	r1, r3
    f10c:	e7d2      	b.n	f0b4 <__ieee754_pow+0x84>
    f10e:	0fed      	lsrs	r5, r5, #31
    f110:	3d01      	subs	r5, #1
    f112:	ea54 0305 	orrs.w	r3, r4, r5
    f116:	d04e      	beq.n	f1b6 <__ieee754_pow+0x186>
    f118:	4b35      	ldr	r3, [pc, #212]	; (f1f0 <__ieee754_pow+0x1c0>)
    f11a:	429f      	cmp	r7, r3
    f11c:	dd6e      	ble.n	f1fc <__ieee754_pow+0x1cc>
    f11e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    f122:	429f      	cmp	r7, r3
    f124:	f340 83e8 	ble.w	f8f8 <__ieee754_pow+0x8c8>
    f128:	4b32      	ldr	r3, [pc, #200]	; (f1f4 <__ieee754_pow+0x1c4>)
    f12a:	429e      	cmp	r6, r3
    f12c:	dd4e      	ble.n	f1cc <__ieee754_pow+0x19c>
    f12e:	f1ba 0f00 	cmp.w	sl, #0
    f132:	dd4e      	ble.n	f1d2 <__ieee754_pow+0x1a2>
    f134:	a328      	add	r3, pc, #160	; (adr r3, f1d8 <__ieee754_pow+0x1a8>)
    f136:	e9d3 2300 	ldrd	r2, r3, [r3]
    f13a:	4610      	mov	r0, r2
    f13c:	4619      	mov	r1, r3
    f13e:	f001 f855 	bl	101ec <__aeabi_dmul>
    f142:	e7b7      	b.n	f0b4 <__ieee754_pow+0x84>
    f144:	f1ba 0f00 	cmp.w	sl, #0
    f148:	f2c0 843c 	blt.w	f9c4 <__ieee754_pow+0x994>
    f14c:	4640      	mov	r0, r8
    f14e:	4649      	mov	r1, r9
    f150:	e7b0      	b.n	f0b4 <__ieee754_pow+0x84>
    f152:	f1be 0f00 	cmp.w	lr, #0
    f156:	d082      	beq.n	f05e <__ieee754_pow+0x2e>
    f158:	e7a3      	b.n	f0a2 <__ieee754_pow+0x72>
    f15a:	4b27      	ldr	r3, [pc, #156]	; (f1f8 <__ieee754_pow+0x1c8>)
    f15c:	429f      	cmp	r7, r3
    f15e:	dc28      	bgt.n	f1b2 <__ieee754_pow+0x182>
    f160:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    f164:	429f      	cmp	r7, r3
    f166:	dd80      	ble.n	f06a <__ieee754_pow+0x3a>
    f168:	153b      	asrs	r3, r7, #20
    f16a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    f16e:	2b14      	cmp	r3, #20
    f170:	f340 843e 	ble.w	f9f0 <__ieee754_pow+0x9c0>
    f174:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    f178:	fa2e f203 	lsr.w	r2, lr, r3
    f17c:	fa02 f303 	lsl.w	r3, r2, r3
    f180:	459e      	cmp	lr, r3
    f182:	f47f af72 	bne.w	f06a <__ieee754_pow+0x3a>
    f186:	f002 0201 	and.w	r2, r2, #1
    f18a:	f1c2 0402 	rsb	r4, r2, #2
    f18e:	e76d      	b.n	f06c <__ieee754_pow+0x3c>
    f190:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    f194:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    f198:	ea53 030b 	orrs.w	r3, r3, fp
    f19c:	d088      	beq.n	f0b0 <__ieee754_pow+0x80>
    f19e:	4b15      	ldr	r3, [pc, #84]	; (f1f4 <__ieee754_pow+0x1c4>)
    f1a0:	429e      	cmp	r6, r3
    f1a2:	f340 8332 	ble.w	f80a <__ieee754_pow+0x7da>
    f1a6:	f1ba 0f00 	cmp.w	sl, #0
    f1aa:	db12      	blt.n	f1d2 <__ieee754_pow+0x1a2>
    f1ac:	e9dd 0100 	ldrd	r0, r1, [sp]
    f1b0:	e780      	b.n	f0b4 <__ieee754_pow+0x84>
    f1b2:	2402      	movs	r4, #2
    f1b4:	e75a      	b.n	f06c <__ieee754_pow+0x3c>
    f1b6:	4642      	mov	r2, r8
    f1b8:	464b      	mov	r3, r9
    f1ba:	4640      	mov	r0, r8
    f1bc:	4649      	mov	r1, r9
    f1be:	f000 fe61 	bl	fe84 <__aeabi_dsub>
    f1c2:	4602      	mov	r2, r0
    f1c4:	460b      	mov	r3, r1
    f1c6:	f001 f93b 	bl	10440 <__aeabi_ddiv>
    f1ca:	e773      	b.n	f0b4 <__ieee754_pow+0x84>
    f1cc:	f1ba 0f00 	cmp.w	sl, #0
    f1d0:	dbb0      	blt.n	f134 <__ieee754_pow+0x104>
    f1d2:	2000      	movs	r0, #0
    f1d4:	2100      	movs	r1, #0
    f1d6:	e76d      	b.n	f0b4 <__ieee754_pow+0x84>
    f1d8:	8800759c 	.word	0x8800759c
    f1dc:	7e37e43c 	.word	0x7e37e43c
    f1e0:	7ff00000 	.word	0x7ff00000
    f1e4:	3ff00000 	.word	0x3ff00000
    f1e8:	3fe00000 	.word	0x3fe00000
    f1ec:	00011d40 	.word	0x00011d40
    f1f0:	41e00000 	.word	0x41e00000
    f1f4:	3fefffff 	.word	0x3fefffff
    f1f8:	433fffff 	.word	0x433fffff
    f1fc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    f200:	f04f 0200 	mov.w	r2, #0
    f204:	da05      	bge.n	f212 <__ieee754_pow+0x1e2>
    f206:	4bd4      	ldr	r3, [pc, #848]	; (f558 <__ieee754_pow+0x528>)
    f208:	f000 fff0 	bl	101ec <__aeabi_dmul>
    f20c:	f06f 0234 	mvn.w	r2, #52	; 0x34
    f210:	460e      	mov	r6, r1
    f212:	1533      	asrs	r3, r6, #20
    f214:	4fd1      	ldr	r7, [pc, #836]	; (f55c <__ieee754_pow+0x52c>)
    f216:	f3c6 0613 	ubfx	r6, r6, #0, #20
    f21a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    f21e:	4413      	add	r3, r2
    f220:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    f224:	42be      	cmp	r6, r7
    f226:	461a      	mov	r2, r3
    f228:	930d      	str	r3, [sp, #52]	; 0x34
    f22a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    f22e:	f340 8321 	ble.w	f874 <__ieee754_pow+0x844>
    f232:	4bcb      	ldr	r3, [pc, #812]	; (f560 <__ieee754_pow+0x530>)
    f234:	429e      	cmp	r6, r3
    f236:	f340 83fd 	ble.w	fa34 <__ieee754_pow+0xa04>
    f23a:	4613      	mov	r3, r2
    f23c:	3301      	adds	r3, #1
    f23e:	930d      	str	r3, [sp, #52]	; 0x34
    f240:	4bc8      	ldr	r3, [pc, #800]	; (f564 <__ieee754_pow+0x534>)
    f242:	2200      	movs	r2, #0
    f244:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f248:	2700      	movs	r7, #0
    f24a:	2600      	movs	r6, #0
    f24c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    f250:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    f254:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    f258:	2700      	movs	r7, #0
    f25a:	4602      	mov	r2, r0
    f25c:	4653      	mov	r3, sl
    f25e:	4651      	mov	r1, sl
    f260:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    f264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f268:	f000 fe0c 	bl	fe84 <__aeabi_dsub>
    f26c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f270:	4680      	mov	r8, r0
    f272:	4689      	mov	r9, r1
    f274:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f278:	f000 fe06 	bl	fe88 <__adddf3>
    f27c:	4602      	mov	r2, r0
    f27e:	460b      	mov	r3, r1
    f280:	2000      	movs	r0, #0
    f282:	49b8      	ldr	r1, [pc, #736]	; (f564 <__ieee754_pow+0x534>)
    f284:	f001 f8dc 	bl	10440 <__aeabi_ddiv>
    f288:	460a      	mov	r2, r1
    f28a:	4601      	mov	r1, r0
    f28c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    f290:	4613      	mov	r3, r2
    f292:	4649      	mov	r1, r9
    f294:	4602      	mov	r2, r0
    f296:	4640      	mov	r0, r8
    f298:	f000 ffa8 	bl	101ec <__aeabi_dmul>
    f29c:	ea4f 036a 	mov.w	r3, sl, asr #1
    f2a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    f2a4:	468c      	mov	ip, r1
    f2a6:	4683      	mov	fp, r0
    f2a8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    f2ac:	e9cd bc04 	strd	fp, ip, [sp, #16]
    f2b0:	46da      	mov	sl, fp
    f2b2:	468b      	mov	fp, r1
    f2b4:	19d9      	adds	r1, r3, r7
    f2b6:	2300      	movs	r3, #0
    f2b8:	e9cd ab02 	strd	sl, fp, [sp, #8]
    f2bc:	9302      	str	r3, [sp, #8]
    f2be:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    f2c2:	2000      	movs	r0, #0
    f2c4:	4606      	mov	r6, r0
    f2c6:	460f      	mov	r7, r1
    f2c8:	4602      	mov	r2, r0
    f2ca:	460b      	mov	r3, r1
    f2cc:	4650      	mov	r0, sl
    f2ce:	4659      	mov	r1, fp
    f2d0:	f000 ff8c 	bl	101ec <__aeabi_dmul>
    f2d4:	4602      	mov	r2, r0
    f2d6:	460b      	mov	r3, r1
    f2d8:	4640      	mov	r0, r8
    f2da:	4649      	mov	r1, r9
    f2dc:	f000 fdd2 	bl	fe84 <__aeabi_dsub>
    f2e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f2e4:	4680      	mov	r8, r0
    f2e6:	4689      	mov	r9, r1
    f2e8:	4630      	mov	r0, r6
    f2ea:	4639      	mov	r1, r7
    f2ec:	f000 fdca 	bl	fe84 <__aeabi_dsub>
    f2f0:	4602      	mov	r2, r0
    f2f2:	460b      	mov	r3, r1
    f2f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f2f8:	f000 fdc4 	bl	fe84 <__aeabi_dsub>
    f2fc:	4652      	mov	r2, sl
    f2fe:	465b      	mov	r3, fp
    f300:	f000 ff74 	bl	101ec <__aeabi_dmul>
    f304:	4602      	mov	r2, r0
    f306:	460b      	mov	r3, r1
    f308:	4640      	mov	r0, r8
    f30a:	4649      	mov	r1, r9
    f30c:	f000 fdba 	bl	fe84 <__aeabi_dsub>
    f310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    f314:	f000 ff6a 	bl	101ec <__aeabi_dmul>
    f318:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f31c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    f320:	4632      	mov	r2, r6
    f322:	463b      	mov	r3, r7
    f324:	4630      	mov	r0, r6
    f326:	4639      	mov	r1, r7
    f328:	f000 ff60 	bl	101ec <__aeabi_dmul>
    f32c:	a378      	add	r3, pc, #480	; (adr r3, f510 <__ieee754_pow+0x4e0>)
    f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f332:	4606      	mov	r6, r0
    f334:	460f      	mov	r7, r1
    f336:	f000 ff59 	bl	101ec <__aeabi_dmul>
    f33a:	a377      	add	r3, pc, #476	; (adr r3, f518 <__ieee754_pow+0x4e8>)
    f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f340:	f000 fda2 	bl	fe88 <__adddf3>
    f344:	4632      	mov	r2, r6
    f346:	463b      	mov	r3, r7
    f348:	f000 ff50 	bl	101ec <__aeabi_dmul>
    f34c:	a374      	add	r3, pc, #464	; (adr r3, f520 <__ieee754_pow+0x4f0>)
    f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f352:	f000 fd99 	bl	fe88 <__adddf3>
    f356:	4632      	mov	r2, r6
    f358:	463b      	mov	r3, r7
    f35a:	f000 ff47 	bl	101ec <__aeabi_dmul>
    f35e:	a372      	add	r3, pc, #456	; (adr r3, f528 <__ieee754_pow+0x4f8>)
    f360:	e9d3 2300 	ldrd	r2, r3, [r3]
    f364:	f000 fd90 	bl	fe88 <__adddf3>
    f368:	4632      	mov	r2, r6
    f36a:	463b      	mov	r3, r7
    f36c:	f000 ff3e 	bl	101ec <__aeabi_dmul>
    f370:	a36f      	add	r3, pc, #444	; (adr r3, f530 <__ieee754_pow+0x500>)
    f372:	e9d3 2300 	ldrd	r2, r3, [r3]
    f376:	f000 fd87 	bl	fe88 <__adddf3>
    f37a:	4632      	mov	r2, r6
    f37c:	463b      	mov	r3, r7
    f37e:	f000 ff35 	bl	101ec <__aeabi_dmul>
    f382:	a36d      	add	r3, pc, #436	; (adr r3, f538 <__ieee754_pow+0x508>)
    f384:	e9d3 2300 	ldrd	r2, r3, [r3]
    f388:	f000 fd7e 	bl	fe88 <__adddf3>
    f38c:	4632      	mov	r2, r6
    f38e:	4680      	mov	r8, r0
    f390:	4689      	mov	r9, r1
    f392:	463b      	mov	r3, r7
    f394:	4630      	mov	r0, r6
    f396:	4639      	mov	r1, r7
    f398:	f000 ff28 	bl	101ec <__aeabi_dmul>
    f39c:	4602      	mov	r2, r0
    f39e:	460b      	mov	r3, r1
    f3a0:	4640      	mov	r0, r8
    f3a2:	4649      	mov	r1, r9
    f3a4:	f000 ff22 	bl	101ec <__aeabi_dmul>
    f3a8:	4652      	mov	r2, sl
    f3aa:	4606      	mov	r6, r0
    f3ac:	460f      	mov	r7, r1
    f3ae:	465b      	mov	r3, fp
    f3b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f3b4:	f000 fd68 	bl	fe88 <__adddf3>
    f3b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f3bc:	f000 ff16 	bl	101ec <__aeabi_dmul>
    f3c0:	4632      	mov	r2, r6
    f3c2:	463b      	mov	r3, r7
    f3c4:	f000 fd60 	bl	fe88 <__adddf3>
    f3c8:	4652      	mov	r2, sl
    f3ca:	4680      	mov	r8, r0
    f3cc:	4689      	mov	r9, r1
    f3ce:	465b      	mov	r3, fp
    f3d0:	4650      	mov	r0, sl
    f3d2:	4659      	mov	r1, fp
    f3d4:	f000 ff0a 	bl	101ec <__aeabi_dmul>
    f3d8:	2200      	movs	r2, #0
    f3da:	4b63      	ldr	r3, [pc, #396]	; (f568 <__ieee754_pow+0x538>)
    f3dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    f3e0:	f000 fd52 	bl	fe88 <__adddf3>
    f3e4:	4642      	mov	r2, r8
    f3e6:	464b      	mov	r3, r9
    f3e8:	f000 fd4e 	bl	fe88 <__adddf3>
    f3ec:	9802      	ldr	r0, [sp, #8]
    f3ee:	460f      	mov	r7, r1
    f3f0:	4606      	mov	r6, r0
    f3f2:	4632      	mov	r2, r6
    f3f4:	463b      	mov	r3, r7
    f3f6:	4650      	mov	r0, sl
    f3f8:	4659      	mov	r1, fp
    f3fa:	f000 fef7 	bl	101ec <__aeabi_dmul>
    f3fe:	2200      	movs	r2, #0
    f400:	4682      	mov	sl, r0
    f402:	468b      	mov	fp, r1
    f404:	4b58      	ldr	r3, [pc, #352]	; (f568 <__ieee754_pow+0x538>)
    f406:	4630      	mov	r0, r6
    f408:	4639      	mov	r1, r7
    f40a:	f000 fd3b 	bl	fe84 <__aeabi_dsub>
    f40e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    f412:	f000 fd37 	bl	fe84 <__aeabi_dsub>
    f416:	4602      	mov	r2, r0
    f418:	460b      	mov	r3, r1
    f41a:	4640      	mov	r0, r8
    f41c:	4649      	mov	r1, r9
    f41e:	f000 fd31 	bl	fe84 <__aeabi_dsub>
    f422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f426:	f000 fee1 	bl	101ec <__aeabi_dmul>
    f42a:	4632      	mov	r2, r6
    f42c:	4680      	mov	r8, r0
    f42e:	4689      	mov	r9, r1
    f430:	463b      	mov	r3, r7
    f432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f436:	f000 fed9 	bl	101ec <__aeabi_dmul>
    f43a:	4602      	mov	r2, r0
    f43c:	460b      	mov	r3, r1
    f43e:	4640      	mov	r0, r8
    f440:	4649      	mov	r1, r9
    f442:	f000 fd21 	bl	fe88 <__adddf3>
    f446:	4680      	mov	r8, r0
    f448:	4689      	mov	r9, r1
    f44a:	4602      	mov	r2, r0
    f44c:	460b      	mov	r3, r1
    f44e:	4650      	mov	r0, sl
    f450:	4659      	mov	r1, fp
    f452:	e9cd ab04 	strd	sl, fp, [sp, #16]
    f456:	f000 fd17 	bl	fe88 <__adddf3>
    f45a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    f45e:	a338      	add	r3, pc, #224	; (adr r3, f540 <__ieee754_pow+0x510>)
    f460:	e9d3 2300 	ldrd	r2, r3, [r3]
    f464:	4650      	mov	r0, sl
    f466:	460f      	mov	r7, r1
    f468:	f000 fec0 	bl	101ec <__aeabi_dmul>
    f46c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f470:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f474:	4639      	mov	r1, r7
    f476:	4650      	mov	r0, sl
    f478:	f000 fd04 	bl	fe84 <__aeabi_dsub>
    f47c:	4602      	mov	r2, r0
    f47e:	460b      	mov	r3, r1
    f480:	4640      	mov	r0, r8
    f482:	4649      	mov	r1, r9
    f484:	f000 fcfe 	bl	fe84 <__aeabi_dsub>
    f488:	a32f      	add	r3, pc, #188	; (adr r3, f548 <__ieee754_pow+0x518>)
    f48a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f48e:	f000 fead 	bl	101ec <__aeabi_dmul>
    f492:	a32f      	add	r3, pc, #188	; (adr r3, f550 <__ieee754_pow+0x520>)
    f494:	e9d3 2300 	ldrd	r2, r3, [r3]
    f498:	4680      	mov	r8, r0
    f49a:	4689      	mov	r9, r1
    f49c:	4650      	mov	r0, sl
    f49e:	4639      	mov	r1, r7
    f4a0:	f000 fea4 	bl	101ec <__aeabi_dmul>
    f4a4:	4602      	mov	r2, r0
    f4a6:	460b      	mov	r3, r1
    f4a8:	4640      	mov	r0, r8
    f4aa:	4649      	mov	r1, r9
    f4ac:	f000 fcec 	bl	fe88 <__adddf3>
    f4b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    f4b4:	f000 fce8 	bl	fe88 <__adddf3>
    f4b8:	4680      	mov	r8, r0
    f4ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    f4bc:	4689      	mov	r9, r1
    f4be:	f000 fe2f 	bl	10120 <__aeabi_i2d>
    f4c2:	4642      	mov	r2, r8
    f4c4:	4606      	mov	r6, r0
    f4c6:	460f      	mov	r7, r1
    f4c8:	464b      	mov	r3, r9
    f4ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f4ce:	f000 fcdb 	bl	fe88 <__adddf3>
    f4d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f4d6:	f000 fcd7 	bl	fe88 <__adddf3>
    f4da:	4632      	mov	r2, r6
    f4dc:	463b      	mov	r3, r7
    f4de:	f000 fcd3 	bl	fe88 <__adddf3>
    f4e2:	4632      	mov	r2, r6
    f4e4:	463b      	mov	r3, r7
    f4e6:	4650      	mov	r0, sl
    f4e8:	468b      	mov	fp, r1
    f4ea:	f000 fccb 	bl	fe84 <__aeabi_dsub>
    f4ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f4f2:	f000 fcc7 	bl	fe84 <__aeabi_dsub>
    f4f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f4fa:	f000 fcc3 	bl	fe84 <__aeabi_dsub>
    f4fe:	4602      	mov	r2, r0
    f500:	460b      	mov	r3, r1
    f502:	4640      	mov	r0, r8
    f504:	4649      	mov	r1, r9
    f506:	f000 fcbd 	bl	fe84 <__aeabi_dsub>
    f50a:	4680      	mov	r8, r0
    f50c:	e02e      	b.n	f56c <__ieee754_pow+0x53c>
    f50e:	bf00      	nop
    f510:	4a454eef 	.word	0x4a454eef
    f514:	3fca7e28 	.word	0x3fca7e28
    f518:	93c9db65 	.word	0x93c9db65
    f51c:	3fcd864a 	.word	0x3fcd864a
    f520:	a91d4101 	.word	0xa91d4101
    f524:	3fd17460 	.word	0x3fd17460
    f528:	518f264d 	.word	0x518f264d
    f52c:	3fd55555 	.word	0x3fd55555
    f530:	db6fabff 	.word	0xdb6fabff
    f534:	3fdb6db6 	.word	0x3fdb6db6
    f538:	33333303 	.word	0x33333303
    f53c:	3fe33333 	.word	0x3fe33333
    f540:	e0000000 	.word	0xe0000000
    f544:	3feec709 	.word	0x3feec709
    f548:	dc3a03fd 	.word	0xdc3a03fd
    f54c:	3feec709 	.word	0x3feec709
    f550:	145b01f5 	.word	0x145b01f5
    f554:	be3e2fe0 	.word	0xbe3e2fe0
    f558:	43400000 	.word	0x43400000
    f55c:	0003988e 	.word	0x0003988e
    f560:	000bb679 	.word	0x000bb679
    f564:	3ff00000 	.word	0x3ff00000
    f568:	40080000 	.word	0x40080000
    f56c:	4689      	mov	r9, r1
    f56e:	3c01      	subs	r4, #1
    f570:	ea54 0305 	orrs.w	r3, r4, r5
    f574:	e9dd 0100 	ldrd	r0, r1, [sp]
    f578:	bf14      	ite	ne
    f57a:	4cd9      	ldrne	r4, [pc, #868]	; (f8e0 <__ieee754_pow+0x8b0>)
    f57c:	4cd9      	ldreq	r4, [pc, #868]	; (f8e4 <__ieee754_pow+0x8b4>)
    f57e:	2300      	movs	r3, #0
    f580:	e9cd 3404 	strd	r3, r4, [sp, #16]
    f584:	4603      	mov	r3, r0
    f586:	460c      	mov	r4, r1
    f588:	e9cd 3402 	strd	r3, r4, [sp, #8]
    f58c:	2300      	movs	r3, #0
    f58e:	9302      	str	r3, [sp, #8]
    f590:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    f594:	4622      	mov	r2, r4
    f596:	462b      	mov	r3, r5
    f598:	f000 fc74 	bl	fe84 <__aeabi_dsub>
    f59c:	4652      	mov	r2, sl
    f59e:	465b      	mov	r3, fp
    f5a0:	f000 fe24 	bl	101ec <__aeabi_dmul>
    f5a4:	e9dd 2300 	ldrd	r2, r3, [sp]
    f5a8:	4606      	mov	r6, r0
    f5aa:	460f      	mov	r7, r1
    f5ac:	4640      	mov	r0, r8
    f5ae:	4649      	mov	r1, r9
    f5b0:	f000 fe1c 	bl	101ec <__aeabi_dmul>
    f5b4:	4602      	mov	r2, r0
    f5b6:	460b      	mov	r3, r1
    f5b8:	4630      	mov	r0, r6
    f5ba:	4639      	mov	r1, r7
    f5bc:	f000 fc64 	bl	fe88 <__adddf3>
    f5c0:	4622      	mov	r2, r4
    f5c2:	4680      	mov	r8, r0
    f5c4:	4689      	mov	r9, r1
    f5c6:	462b      	mov	r3, r5
    f5c8:	4650      	mov	r0, sl
    f5ca:	4659      	mov	r1, fp
    f5cc:	e9cd 8900 	strd	r8, r9, [sp]
    f5d0:	f000 fe0c 	bl	101ec <__aeabi_dmul>
    f5d4:	460b      	mov	r3, r1
    f5d6:	4602      	mov	r2, r0
    f5d8:	4606      	mov	r6, r0
    f5da:	460f      	mov	r7, r1
    f5dc:	4640      	mov	r0, r8
    f5de:	4649      	mov	r1, r9
    f5e0:	f000 fc52 	bl	fe88 <__adddf3>
    f5e4:	4bc0      	ldr	r3, [pc, #768]	; (f8e8 <__ieee754_pow+0x8b8>)
    f5e6:	4299      	cmp	r1, r3
    f5e8:	4604      	mov	r4, r0
    f5ea:	460d      	mov	r5, r1
    f5ec:	468a      	mov	sl, r1
    f5ee:	f340 8116 	ble.w	f81e <__ieee754_pow+0x7ee>
    f5f2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    f5f6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    f5fa:	4303      	orrs	r3, r0
    f5fc:	f040 81ea 	bne.w	f9d4 <__ieee754_pow+0x9a4>
    f600:	a3a3      	add	r3, pc, #652	; (adr r3, f890 <__ieee754_pow+0x860>)
    f602:	e9d3 2300 	ldrd	r2, r3, [r3]
    f606:	e9dd 0100 	ldrd	r0, r1, [sp]
    f60a:	f000 fc3d 	bl	fe88 <__adddf3>
    f60e:	4632      	mov	r2, r6
    f610:	4680      	mov	r8, r0
    f612:	4689      	mov	r9, r1
    f614:	463b      	mov	r3, r7
    f616:	4620      	mov	r0, r4
    f618:	4629      	mov	r1, r5
    f61a:	f000 fc33 	bl	fe84 <__aeabi_dsub>
    f61e:	4602      	mov	r2, r0
    f620:	460b      	mov	r3, r1
    f622:	4640      	mov	r0, r8
    f624:	4649      	mov	r1, r9
    f626:	f001 f871 	bl	1070c <__aeabi_dcmpgt>
    f62a:	2800      	cmp	r0, #0
    f62c:	f040 81d2 	bne.w	f9d4 <__ieee754_pow+0x9a4>
    f630:	46a8      	mov	r8, r5
    f632:	ea4f 5328 	mov.w	r3, r8, asr #20
    f636:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    f63a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    f63e:	fa42 f303 	asr.w	r3, r2, r3
    f642:	4453      	add	r3, sl
    f644:	f3c3 520a 	ubfx	r2, r3, #20, #11
    f648:	4da8      	ldr	r5, [pc, #672]	; (f8ec <__ieee754_pow+0x8bc>)
    f64a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    f64e:	4115      	asrs	r5, r2
    f650:	f3c3 0413 	ubfx	r4, r3, #0, #20
    f654:	ea23 0105 	bic.w	r1, r3, r5
    f658:	2000      	movs	r0, #0
    f65a:	f1c2 0b14 	rsb	fp, r2, #20
    f65e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    f662:	f1ba 0f00 	cmp.w	sl, #0
    f666:	4602      	mov	r2, r0
    f668:	460b      	mov	r3, r1
    f66a:	fa44 fb0b 	asr.w	fp, r4, fp
    f66e:	4630      	mov	r0, r6
    f670:	4639      	mov	r1, r7
    f672:	bfb8      	it	lt
    f674:	f1cb 0b00 	rsblt	fp, fp, #0
    f678:	f000 fc04 	bl	fe84 <__aeabi_dsub>
    f67c:	4602      	mov	r2, r0
    f67e:	460b      	mov	r3, r1
    f680:	4606      	mov	r6, r0
    f682:	460f      	mov	r7, r1
    f684:	e9dd 0100 	ldrd	r0, r1, [sp]
    f688:	f000 fbfe 	bl	fe88 <__adddf3>
    f68c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    f690:	460d      	mov	r5, r1
    f692:	2400      	movs	r4, #0
    f694:	a380      	add	r3, pc, #512	; (adr r3, f898 <__ieee754_pow+0x868>)
    f696:	e9d3 2300 	ldrd	r2, r3, [r3]
    f69a:	4620      	mov	r0, r4
    f69c:	4629      	mov	r1, r5
    f69e:	f000 fda5 	bl	101ec <__aeabi_dmul>
    f6a2:	4632      	mov	r2, r6
    f6a4:	4680      	mov	r8, r0
    f6a6:	4689      	mov	r9, r1
    f6a8:	463b      	mov	r3, r7
    f6aa:	4620      	mov	r0, r4
    f6ac:	4629      	mov	r1, r5
    f6ae:	f000 fbe9 	bl	fe84 <__aeabi_dsub>
    f6b2:	4602      	mov	r2, r0
    f6b4:	460b      	mov	r3, r1
    f6b6:	e9dd 0100 	ldrd	r0, r1, [sp]
    f6ba:	f000 fbe3 	bl	fe84 <__aeabi_dsub>
    f6be:	a378      	add	r3, pc, #480	; (adr r3, f8a0 <__ieee754_pow+0x870>)
    f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6c4:	f000 fd92 	bl	101ec <__aeabi_dmul>
    f6c8:	a377      	add	r3, pc, #476	; (adr r3, f8a8 <__ieee754_pow+0x878>)
    f6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6ce:	4606      	mov	r6, r0
    f6d0:	460f      	mov	r7, r1
    f6d2:	4620      	mov	r0, r4
    f6d4:	4629      	mov	r1, r5
    f6d6:	f000 fd89 	bl	101ec <__aeabi_dmul>
    f6da:	4602      	mov	r2, r0
    f6dc:	460b      	mov	r3, r1
    f6de:	4630      	mov	r0, r6
    f6e0:	4639      	mov	r1, r7
    f6e2:	f000 fbd1 	bl	fe88 <__adddf3>
    f6e6:	4606      	mov	r6, r0
    f6e8:	460f      	mov	r7, r1
    f6ea:	4602      	mov	r2, r0
    f6ec:	460b      	mov	r3, r1
    f6ee:	4640      	mov	r0, r8
    f6f0:	4649      	mov	r1, r9
    f6f2:	f000 fbc9 	bl	fe88 <__adddf3>
    f6f6:	4642      	mov	r2, r8
    f6f8:	464b      	mov	r3, r9
    f6fa:	4604      	mov	r4, r0
    f6fc:	460d      	mov	r5, r1
    f6fe:	f000 fbc1 	bl	fe84 <__aeabi_dsub>
    f702:	4602      	mov	r2, r0
    f704:	460b      	mov	r3, r1
    f706:	4630      	mov	r0, r6
    f708:	4639      	mov	r1, r7
    f70a:	f000 fbbb 	bl	fe84 <__aeabi_dsub>
    f70e:	4622      	mov	r2, r4
    f710:	4680      	mov	r8, r0
    f712:	4689      	mov	r9, r1
    f714:	462b      	mov	r3, r5
    f716:	4620      	mov	r0, r4
    f718:	4629      	mov	r1, r5
    f71a:	f000 fd67 	bl	101ec <__aeabi_dmul>
    f71e:	a364      	add	r3, pc, #400	; (adr r3, f8b0 <__ieee754_pow+0x880>)
    f720:	e9d3 2300 	ldrd	r2, r3, [r3]
    f724:	4606      	mov	r6, r0
    f726:	460f      	mov	r7, r1
    f728:	f000 fd60 	bl	101ec <__aeabi_dmul>
    f72c:	a362      	add	r3, pc, #392	; (adr r3, f8b8 <__ieee754_pow+0x888>)
    f72e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f732:	f000 fba7 	bl	fe84 <__aeabi_dsub>
    f736:	4632      	mov	r2, r6
    f738:	463b      	mov	r3, r7
    f73a:	f000 fd57 	bl	101ec <__aeabi_dmul>
    f73e:	a360      	add	r3, pc, #384	; (adr r3, f8c0 <__ieee754_pow+0x890>)
    f740:	e9d3 2300 	ldrd	r2, r3, [r3]
    f744:	f000 fba0 	bl	fe88 <__adddf3>
    f748:	4632      	mov	r2, r6
    f74a:	463b      	mov	r3, r7
    f74c:	f000 fd4e 	bl	101ec <__aeabi_dmul>
    f750:	a35d      	add	r3, pc, #372	; (adr r3, f8c8 <__ieee754_pow+0x898>)
    f752:	e9d3 2300 	ldrd	r2, r3, [r3]
    f756:	f000 fb95 	bl	fe84 <__aeabi_dsub>
    f75a:	4632      	mov	r2, r6
    f75c:	463b      	mov	r3, r7
    f75e:	f000 fd45 	bl	101ec <__aeabi_dmul>
    f762:	a35b      	add	r3, pc, #364	; (adr r3, f8d0 <__ieee754_pow+0x8a0>)
    f764:	e9d3 2300 	ldrd	r2, r3, [r3]
    f768:	f000 fb8e 	bl	fe88 <__adddf3>
    f76c:	4632      	mov	r2, r6
    f76e:	463b      	mov	r3, r7
    f770:	f000 fd3c 	bl	101ec <__aeabi_dmul>
    f774:	4602      	mov	r2, r0
    f776:	460b      	mov	r3, r1
    f778:	4620      	mov	r0, r4
    f77a:	4629      	mov	r1, r5
    f77c:	f000 fb82 	bl	fe84 <__aeabi_dsub>
    f780:	4606      	mov	r6, r0
    f782:	460f      	mov	r7, r1
    f784:	4602      	mov	r2, r0
    f786:	460b      	mov	r3, r1
    f788:	4620      	mov	r0, r4
    f78a:	4629      	mov	r1, r5
    f78c:	f000 fd2e 	bl	101ec <__aeabi_dmul>
    f790:	2200      	movs	r2, #0
    f792:	e9cd 0100 	strd	r0, r1, [sp]
    f796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f79a:	4630      	mov	r0, r6
    f79c:	4639      	mov	r1, r7
    f79e:	f000 fb71 	bl	fe84 <__aeabi_dsub>
    f7a2:	4602      	mov	r2, r0
    f7a4:	460b      	mov	r3, r1
    f7a6:	e9dd 0100 	ldrd	r0, r1, [sp]
    f7aa:	f000 fe49 	bl	10440 <__aeabi_ddiv>
    f7ae:	4642      	mov	r2, r8
    f7b0:	4606      	mov	r6, r0
    f7b2:	460f      	mov	r7, r1
    f7b4:	464b      	mov	r3, r9
    f7b6:	4620      	mov	r0, r4
    f7b8:	4629      	mov	r1, r5
    f7ba:	f000 fd17 	bl	101ec <__aeabi_dmul>
    f7be:	4642      	mov	r2, r8
    f7c0:	464b      	mov	r3, r9
    f7c2:	f000 fb61 	bl	fe88 <__adddf3>
    f7c6:	4602      	mov	r2, r0
    f7c8:	460b      	mov	r3, r1
    f7ca:	4630      	mov	r0, r6
    f7cc:	4639      	mov	r1, r7
    f7ce:	f000 fb59 	bl	fe84 <__aeabi_dsub>
    f7d2:	4622      	mov	r2, r4
    f7d4:	462b      	mov	r3, r5
    f7d6:	f000 fb55 	bl	fe84 <__aeabi_dsub>
    f7da:	4602      	mov	r2, r0
    f7dc:	460b      	mov	r3, r1
    f7de:	2000      	movs	r0, #0
    f7e0:	493f      	ldr	r1, [pc, #252]	; (f8e0 <__ieee754_pow+0x8b0>)
    f7e2:	f000 fb4f 	bl	fe84 <__aeabi_dsub>
    f7e6:	448a      	add	sl, r1
    f7e8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    f7ec:	f2c0 8133 	blt.w	fa56 <__ieee754_pow+0xa26>
    f7f0:	4651      	mov	r1, sl
    f7f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f7f6:	f000 fcf9 	bl	101ec <__aeabi_dmul>
    f7fa:	e45b      	b.n	f0b4 <__ieee754_pow+0x84>
    f7fc:	4642      	mov	r2, r8
    f7fe:	4640      	mov	r0, r8
    f800:	464b      	mov	r3, r9
    f802:	4649      	mov	r1, r9
    f804:	f000 fcf2 	bl	101ec <__aeabi_dmul>
    f808:	e454      	b.n	f0b4 <__ieee754_pow+0x84>
    f80a:	f1ba 0f00 	cmp.w	sl, #0
    f80e:	f6bf ace0 	bge.w	f1d2 <__ieee754_pow+0x1a2>
    f812:	e9dd 3400 	ldrd	r3, r4, [sp]
    f816:	4618      	mov	r0, r3
    f818:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    f81c:	e44a      	b.n	f0b4 <__ieee754_pow+0x84>
    f81e:	4b34      	ldr	r3, [pc, #208]	; (f8f0 <__ieee754_pow+0x8c0>)
    f820:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    f824:	4598      	cmp	r8, r3
    f826:	f340 80f2 	ble.w	fa0e <__ieee754_pow+0x9de>
    f82a:	4b32      	ldr	r3, [pc, #200]	; (f8f4 <__ieee754_pow+0x8c4>)
    f82c:	440b      	add	r3, r1
    f82e:	4303      	orrs	r3, r0
    f830:	d10c      	bne.n	f84c <__ieee754_pow+0x81c>
    f832:	4632      	mov	r2, r6
    f834:	463b      	mov	r3, r7
    f836:	f000 fb25 	bl	fe84 <__aeabi_dsub>
    f83a:	4602      	mov	r2, r0
    f83c:	460b      	mov	r3, r1
    f83e:	e9dd 0100 	ldrd	r0, r1, [sp]
    f842:	f000 ff4f 	bl	106e4 <__aeabi_dcmple>
    f846:	2800      	cmp	r0, #0
    f848:	f43f aef3 	beq.w	f632 <__ieee754_pow+0x602>
    f84c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f850:	a321      	add	r3, pc, #132	; (adr r3, f8d8 <__ieee754_pow+0x8a8>)
    f852:	e9d3 2300 	ldrd	r2, r3, [r3]
    f856:	f000 fcc9 	bl	101ec <__aeabi_dmul>
    f85a:	a31f      	add	r3, pc, #124	; (adr r3, f8d8 <__ieee754_pow+0x8a8>)
    f85c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f860:	f000 fcc4 	bl	101ec <__aeabi_dmul>
    f864:	e426      	b.n	f0b4 <__ieee754_pow+0x84>
    f866:	4602      	mov	r2, r0
    f868:	460b      	mov	r3, r1
    f86a:	2000      	movs	r0, #0
    f86c:	491c      	ldr	r1, [pc, #112]	; (f8e0 <__ieee754_pow+0x8b0>)
    f86e:	f000 fde7 	bl	10440 <__aeabi_ddiv>
    f872:	e43c      	b.n	f0ee <__ieee754_pow+0xbe>
    f874:	2200      	movs	r2, #0
    f876:	2300      	movs	r3, #0
    f878:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f87c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    f880:	4b17      	ldr	r3, [pc, #92]	; (f8e0 <__ieee754_pow+0x8b0>)
    f882:	2200      	movs	r2, #0
    f884:	2700      	movs	r7, #0
    f886:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f88a:	e4e6      	b.n	f25a <__ieee754_pow+0x22a>
    f88c:	f3af 8000 	nop.w
    f890:	652b82fe 	.word	0x652b82fe
    f894:	3c971547 	.word	0x3c971547
    f898:	00000000 	.word	0x00000000
    f89c:	3fe62e43 	.word	0x3fe62e43
    f8a0:	fefa39ef 	.word	0xfefa39ef
    f8a4:	3fe62e42 	.word	0x3fe62e42
    f8a8:	0ca86c39 	.word	0x0ca86c39
    f8ac:	be205c61 	.word	0xbe205c61
    f8b0:	72bea4d0 	.word	0x72bea4d0
    f8b4:	3e663769 	.word	0x3e663769
    f8b8:	c5d26bf1 	.word	0xc5d26bf1
    f8bc:	3ebbbd41 	.word	0x3ebbbd41
    f8c0:	af25de2c 	.word	0xaf25de2c
    f8c4:	3f11566a 	.word	0x3f11566a
    f8c8:	16bebd93 	.word	0x16bebd93
    f8cc:	3f66c16c 	.word	0x3f66c16c
    f8d0:	5555553e 	.word	0x5555553e
    f8d4:	3fc55555 	.word	0x3fc55555
    f8d8:	c2f8f359 	.word	0xc2f8f359
    f8dc:	01a56e1f 	.word	0x01a56e1f
    f8e0:	3ff00000 	.word	0x3ff00000
    f8e4:	bff00000 	.word	0xbff00000
    f8e8:	408fffff 	.word	0x408fffff
    f8ec:	000fffff 	.word	0x000fffff
    f8f0:	4090cbff 	.word	0x4090cbff
    f8f4:	3f6f3400 	.word	0x3f6f3400
    f8f8:	4b6b      	ldr	r3, [pc, #428]	; (faa8 <__ieee754_pow+0xa78>)
    f8fa:	429e      	cmp	r6, r3
    f8fc:	f77f ac66 	ble.w	f1cc <__ieee754_pow+0x19c>
    f900:	4b6a      	ldr	r3, [pc, #424]	; (faac <__ieee754_pow+0xa7c>)
    f902:	429e      	cmp	r6, r3
    f904:	f73f ac13 	bgt.w	f12e <__ieee754_pow+0xfe>
    f908:	2200      	movs	r2, #0
    f90a:	4b68      	ldr	r3, [pc, #416]	; (faac <__ieee754_pow+0xa7c>)
    f90c:	f000 faba 	bl	fe84 <__aeabi_dsub>
    f910:	a357      	add	r3, pc, #348	; (adr r3, fa70 <__ieee754_pow+0xa40>)
    f912:	e9d3 2300 	ldrd	r2, r3, [r3]
    f916:	4606      	mov	r6, r0
    f918:	460f      	mov	r7, r1
    f91a:	f000 fc67 	bl	101ec <__aeabi_dmul>
    f91e:	a356      	add	r3, pc, #344	; (adr r3, fa78 <__ieee754_pow+0xa48>)
    f920:	e9d3 2300 	ldrd	r2, r3, [r3]
    f924:	4680      	mov	r8, r0
    f926:	4689      	mov	r9, r1
    f928:	4630      	mov	r0, r6
    f92a:	4639      	mov	r1, r7
    f92c:	f000 fc5e 	bl	101ec <__aeabi_dmul>
    f930:	2200      	movs	r2, #0
    f932:	4682      	mov	sl, r0
    f934:	468b      	mov	fp, r1
    f936:	4b5e      	ldr	r3, [pc, #376]	; (fab0 <__ieee754_pow+0xa80>)
    f938:	4630      	mov	r0, r6
    f93a:	4639      	mov	r1, r7
    f93c:	f000 fc56 	bl	101ec <__aeabi_dmul>
    f940:	4602      	mov	r2, r0
    f942:	460b      	mov	r3, r1
    f944:	a14e      	add	r1, pc, #312	; (adr r1, fa80 <__ieee754_pow+0xa50>)
    f946:	e9d1 0100 	ldrd	r0, r1, [r1]
    f94a:	f000 fa9b 	bl	fe84 <__aeabi_dsub>
    f94e:	4632      	mov	r2, r6
    f950:	463b      	mov	r3, r7
    f952:	f000 fc4b 	bl	101ec <__aeabi_dmul>
    f956:	4602      	mov	r2, r0
    f958:	460b      	mov	r3, r1
    f95a:	2000      	movs	r0, #0
    f95c:	4955      	ldr	r1, [pc, #340]	; (fab4 <__ieee754_pow+0xa84>)
    f95e:	f000 fa91 	bl	fe84 <__aeabi_dsub>
    f962:	4632      	mov	r2, r6
    f964:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f968:	463b      	mov	r3, r7
    f96a:	4630      	mov	r0, r6
    f96c:	4639      	mov	r1, r7
    f96e:	f000 fc3d 	bl	101ec <__aeabi_dmul>
    f972:	4602      	mov	r2, r0
    f974:	460b      	mov	r3, r1
    f976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f97a:	f000 fc37 	bl	101ec <__aeabi_dmul>
    f97e:	a342      	add	r3, pc, #264	; (adr r3, fa88 <__ieee754_pow+0xa58>)
    f980:	e9d3 2300 	ldrd	r2, r3, [r3]
    f984:	f000 fc32 	bl	101ec <__aeabi_dmul>
    f988:	4602      	mov	r2, r0
    f98a:	460b      	mov	r3, r1
    f98c:	4650      	mov	r0, sl
    f98e:	4659      	mov	r1, fp
    f990:	f000 fa78 	bl	fe84 <__aeabi_dsub>
    f994:	4602      	mov	r2, r0
    f996:	460b      	mov	r3, r1
    f998:	4606      	mov	r6, r0
    f99a:	460f      	mov	r7, r1
    f99c:	4640      	mov	r0, r8
    f99e:	4649      	mov	r1, r9
    f9a0:	f000 fa72 	bl	fe88 <__adddf3>
    f9a4:	4642      	mov	r2, r8
    f9a6:	464b      	mov	r3, r9
    f9a8:	2000      	movs	r0, #0
    f9aa:	4682      	mov	sl, r0
    f9ac:	468b      	mov	fp, r1
    f9ae:	f000 fa69 	bl	fe84 <__aeabi_dsub>
    f9b2:	4602      	mov	r2, r0
    f9b4:	460b      	mov	r3, r1
    f9b6:	4630      	mov	r0, r6
    f9b8:	4639      	mov	r1, r7
    f9ba:	f000 fa63 	bl	fe84 <__aeabi_dsub>
    f9be:	4680      	mov	r8, r0
    f9c0:	4689      	mov	r9, r1
    f9c2:	e5d4      	b.n	f56e <__ieee754_pow+0x53e>
    f9c4:	4642      	mov	r2, r8
    f9c6:	464b      	mov	r3, r9
    f9c8:	2000      	movs	r0, #0
    f9ca:	4938      	ldr	r1, [pc, #224]	; (faac <__ieee754_pow+0xa7c>)
    f9cc:	f000 fd38 	bl	10440 <__aeabi_ddiv>
    f9d0:	f7ff bb70 	b.w	f0b4 <__ieee754_pow+0x84>
    f9d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f9d8:	a32d      	add	r3, pc, #180	; (adr r3, fa90 <__ieee754_pow+0xa60>)
    f9da:	e9d3 2300 	ldrd	r2, r3, [r3]
    f9de:	f000 fc05 	bl	101ec <__aeabi_dmul>
    f9e2:	a32b      	add	r3, pc, #172	; (adr r3, fa90 <__ieee754_pow+0xa60>)
    f9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    f9e8:	f000 fc00 	bl	101ec <__aeabi_dmul>
    f9ec:	f7ff bb62 	b.w	f0b4 <__ieee754_pow+0x84>
    f9f0:	f1be 0f00 	cmp.w	lr, #0
    f9f4:	f47f ab69 	bne.w	f0ca <__ieee754_pow+0x9a>
    f9f8:	f1c3 0314 	rsb	r3, r3, #20
    f9fc:	fa47 f203 	asr.w	r2, r7, r3
    fa00:	fa02 f303 	lsl.w	r3, r2, r3
    fa04:	429f      	cmp	r7, r3
    fa06:	d02a      	beq.n	fa5e <__ieee754_pow+0xa2e>
    fa08:	4674      	mov	r4, lr
    fa0a:	f7ff bb36 	b.w	f07a <__ieee754_pow+0x4a>
    fa0e:	4b29      	ldr	r3, [pc, #164]	; (fab4 <__ieee754_pow+0xa84>)
    fa10:	4598      	cmp	r8, r3
    fa12:	f73f ae0e 	bgt.w	f632 <__ieee754_pow+0x602>
    fa16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fa1a:	4692      	mov	sl, r2
    fa1c:	4693      	mov	fp, r2
    fa1e:	e638      	b.n	f692 <__ieee754_pow+0x662>
    fa20:	4602      	mov	r2, r0
    fa22:	460b      	mov	r3, r1
    fa24:	f000 fa2e 	bl	fe84 <__aeabi_dsub>
    fa28:	4602      	mov	r2, r0
    fa2a:	460b      	mov	r3, r1
    fa2c:	f000 fd08 	bl	10440 <__aeabi_ddiv>
    fa30:	f7ff bb40 	b.w	f0b4 <__ieee754_pow+0x84>
    fa34:	a318      	add	r3, pc, #96	; (adr r3, fa98 <__ieee754_pow+0xa68>)
    fa36:	e9d3 2300 	ldrd	r2, r3, [r3]
    fa3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fa3e:	a318      	add	r3, pc, #96	; (adr r3, faa0 <__ieee754_pow+0xa70>)
    fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
    fa44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    fa48:	4b1b      	ldr	r3, [pc, #108]	; (fab8 <__ieee754_pow+0xa88>)
    fa4a:	2200      	movs	r2, #0
    fa4c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    fa50:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fa54:	e401      	b.n	f25a <__ieee754_pow+0x22a>
    fa56:	465a      	mov	r2, fp
    fa58:	f000 f98a 	bl	fd70 <scalbn>
    fa5c:	e6c9      	b.n	f7f2 <__ieee754_pow+0x7c2>
    fa5e:	f002 0201 	and.w	r2, r2, #1
    fa62:	f1c2 0402 	rsb	r4, r2, #2
    fa66:	f7ff bb08 	b.w	f07a <__ieee754_pow+0x4a>
    fa6a:	bf00      	nop
    fa6c:	f3af 8000 	nop.w
    fa70:	60000000 	.word	0x60000000
    fa74:	3ff71547 	.word	0x3ff71547
    fa78:	f85ddf44 	.word	0xf85ddf44
    fa7c:	3e54ae0b 	.word	0x3e54ae0b
    fa80:	55555555 	.word	0x55555555
    fa84:	3fd55555 	.word	0x3fd55555
    fa88:	652b82fe 	.word	0x652b82fe
    fa8c:	3ff71547 	.word	0x3ff71547
    fa90:	8800759c 	.word	0x8800759c
    fa94:	7e37e43c 	.word	0x7e37e43c
    fa98:	40000000 	.word	0x40000000
    fa9c:	3fe2b803 	.word	0x3fe2b803
    faa0:	43cfd006 	.word	0x43cfd006
    faa4:	3e4cfdeb 	.word	0x3e4cfdeb
    faa8:	3feffffe 	.word	0x3feffffe
    faac:	3ff00000 	.word	0x3ff00000
    fab0:	3fd00000 	.word	0x3fd00000
    fab4:	3fe00000 	.word	0x3fe00000
    fab8:	3ff80000 	.word	0x3ff80000

0000fabc <__ieee754_sqrt>:
    fabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fac0:	4f5b      	ldr	r7, [pc, #364]	; (fc30 <__ieee754_sqrt+0x174>)
    fac2:	438f      	bics	r7, r1
    fac4:	4605      	mov	r5, r0
    fac6:	460c      	mov	r4, r1
    fac8:	f000 8092 	beq.w	fbf0 <__ieee754_sqrt+0x134>
    facc:	2900      	cmp	r1, #0
    face:	460b      	mov	r3, r1
    fad0:	4602      	mov	r2, r0
    fad2:	dd6f      	ble.n	fbb4 <__ieee754_sqrt+0xf8>
    fad4:	150f      	asrs	r7, r1, #20
    fad6:	d07b      	beq.n	fbd0 <__ieee754_sqrt+0x114>
    fad8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    fadc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    fae0:	07f8      	lsls	r0, r7, #31
    fae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    fae6:	d45c      	bmi.n	fba2 <__ieee754_sqrt+0xe6>
    fae8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    faec:	2600      	movs	r6, #0
    faee:	440b      	add	r3, r1
    faf0:	107f      	asrs	r7, r7, #1
    faf2:	0052      	lsls	r2, r2, #1
    faf4:	46b6      	mov	lr, r6
    faf6:	2016      	movs	r0, #22
    faf8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    fafc:	eb0e 0401 	add.w	r4, lr, r1
    fb00:	429c      	cmp	r4, r3
    fb02:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    fb06:	ea4f 0242 	mov.w	r2, r2, lsl #1
    fb0a:	dc03      	bgt.n	fb14 <__ieee754_sqrt+0x58>
    fb0c:	1b1b      	subs	r3, r3, r4
    fb0e:	eb04 0e01 	add.w	lr, r4, r1
    fb12:	440e      	add	r6, r1
    fb14:	3801      	subs	r0, #1
    fb16:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    fb1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    fb1e:	d1ed      	bne.n	fafc <__ieee754_sqrt+0x40>
    fb20:	4684      	mov	ip, r0
    fb22:	2420      	movs	r4, #32
    fb24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    fb28:	e009      	b.n	fb3e <__ieee754_sqrt+0x82>
    fb2a:	d020      	beq.n	fb6e <__ieee754_sqrt+0xb2>
    fb2c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    fb30:	3c01      	subs	r4, #1
    fb32:	ea4f 0151 	mov.w	r1, r1, lsr #1
    fb36:	442b      	add	r3, r5
    fb38:	ea4f 0242 	mov.w	r2, r2, lsl #1
    fb3c:	d020      	beq.n	fb80 <__ieee754_sqrt+0xc4>
    fb3e:	4573      	cmp	r3, lr
    fb40:	eb01 050c 	add.w	r5, r1, ip
    fb44:	ddf1      	ble.n	fb2a <__ieee754_sqrt+0x6e>
    fb46:	2d00      	cmp	r5, #0
    fb48:	eb05 0c01 	add.w	ip, r5, r1
    fb4c:	db09      	blt.n	fb62 <__ieee754_sqrt+0xa6>
    fb4e:	46f0      	mov	r8, lr
    fb50:	4295      	cmp	r5, r2
    fb52:	eba3 030e 	sub.w	r3, r3, lr
    fb56:	d900      	bls.n	fb5a <__ieee754_sqrt+0x9e>
    fb58:	3b01      	subs	r3, #1
    fb5a:	1b52      	subs	r2, r2, r5
    fb5c:	4408      	add	r0, r1
    fb5e:	46c6      	mov	lr, r8
    fb60:	e7e4      	b.n	fb2c <__ieee754_sqrt+0x70>
    fb62:	f1bc 0f00 	cmp.w	ip, #0
    fb66:	dbf2      	blt.n	fb4e <__ieee754_sqrt+0x92>
    fb68:	f10e 0801 	add.w	r8, lr, #1
    fb6c:	e7f0      	b.n	fb50 <__ieee754_sqrt+0x94>
    fb6e:	4295      	cmp	r5, r2
    fb70:	d8dc      	bhi.n	fb2c <__ieee754_sqrt+0x70>
    fb72:	2d00      	cmp	r5, #0
    fb74:	eb05 0c01 	add.w	ip, r5, r1
    fb78:	db44      	blt.n	fc04 <__ieee754_sqrt+0x148>
    fb7a:	4698      	mov	r8, r3
    fb7c:	2300      	movs	r3, #0
    fb7e:	e7ec      	b.n	fb5a <__ieee754_sqrt+0x9e>
    fb80:	4313      	orrs	r3, r2
    fb82:	d113      	bne.n	fbac <__ieee754_sqrt+0xf0>
    fb84:	0840      	lsrs	r0, r0, #1
    fb86:	1073      	asrs	r3, r6, #1
    fb88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    fb8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    fb90:	07f2      	lsls	r2, r6, #31
    fb92:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    fb96:	bf48      	it	mi
    fb98:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    fb9c:	4649      	mov	r1, r9
    fb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fba2:	005b      	lsls	r3, r3, #1
    fba4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    fba8:	0052      	lsls	r2, r2, #1
    fbaa:	e79d      	b.n	fae8 <__ieee754_sqrt+0x2c>
    fbac:	1c41      	adds	r1, r0, #1
    fbae:	d02d      	beq.n	fc0c <__ieee754_sqrt+0x150>
    fbb0:	3001      	adds	r0, #1
    fbb2:	e7e7      	b.n	fb84 <__ieee754_sqrt+0xc8>
    fbb4:	4606      	mov	r6, r0
    fbb6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    fbba:	433e      	orrs	r6, r7
    fbbc:	d0ef      	beq.n	fb9e <__ieee754_sqrt+0xe2>
    fbbe:	bb69      	cbnz	r1, fc1c <__ieee754_sqrt+0x160>
    fbc0:	460f      	mov	r7, r1
    fbc2:	0ad3      	lsrs	r3, r2, #11
    fbc4:	3f15      	subs	r7, #21
    fbc6:	0552      	lsls	r2, r2, #21
    fbc8:	2b00      	cmp	r3, #0
    fbca:	d0fa      	beq.n	fbc2 <__ieee754_sqrt+0x106>
    fbcc:	02de      	lsls	r6, r3, #11
    fbce:	d420      	bmi.n	fc12 <__ieee754_sqrt+0x156>
    fbd0:	2400      	movs	r4, #0
    fbd2:	e000      	b.n	fbd6 <__ieee754_sqrt+0x11a>
    fbd4:	4604      	mov	r4, r0
    fbd6:	005b      	lsls	r3, r3, #1
    fbd8:	02dd      	lsls	r5, r3, #11
    fbda:	f104 0001 	add.w	r0, r4, #1
    fbde:	d5f9      	bpl.n	fbd4 <__ieee754_sqrt+0x118>
    fbe0:	f1c0 0120 	rsb	r1, r0, #32
    fbe4:	fa22 f101 	lsr.w	r1, r2, r1
    fbe8:	430b      	orrs	r3, r1
    fbea:	1b3f      	subs	r7, r7, r4
    fbec:	4082      	lsls	r2, r0
    fbee:	e773      	b.n	fad8 <__ieee754_sqrt+0x1c>
    fbf0:	4602      	mov	r2, r0
    fbf2:	460b      	mov	r3, r1
    fbf4:	f000 fafa 	bl	101ec <__aeabi_dmul>
    fbf8:	462a      	mov	r2, r5
    fbfa:	4623      	mov	r3, r4
    fbfc:	f000 f944 	bl	fe88 <__adddf3>
    fc00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fc04:	f1bc 0f00 	cmp.w	ip, #0
    fc08:	daae      	bge.n	fb68 <__ieee754_sqrt+0xac>
    fc0a:	e7b6      	b.n	fb7a <__ieee754_sqrt+0xbe>
    fc0c:	3601      	adds	r6, #1
    fc0e:	4620      	mov	r0, r4
    fc10:	e7b9      	b.n	fb86 <__ieee754_sqrt+0xca>
    fc12:	2000      	movs	r0, #0
    fc14:	2120      	movs	r1, #32
    fc16:	f04f 34ff 	mov.w	r4, #4294967295
    fc1a:	e7e3      	b.n	fbe4 <__ieee754_sqrt+0x128>
    fc1c:	4602      	mov	r2, r0
    fc1e:	460b      	mov	r3, r1
    fc20:	f000 f930 	bl	fe84 <__aeabi_dsub>
    fc24:	4602      	mov	r2, r0
    fc26:	460b      	mov	r3, r1
    fc28:	f000 fc0a 	bl	10440 <__aeabi_ddiv>
    fc2c:	e7b7      	b.n	fb9e <__ieee754_sqrt+0xe2>
    fc2e:	bf00      	nop
    fc30:	7ff00000 	.word	0x7ff00000

0000fc34 <fabs>:
    fc34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fc38:	4770      	bx	lr
    fc3a:	bf00      	nop

0000fc3c <finite>:
    fc3c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    fc40:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    fc44:	0fc0      	lsrs	r0, r0, #31
    fc46:	4770      	bx	lr

0000fc48 <matherr>:
    fc48:	2000      	movs	r0, #0
    fc4a:	4770      	bx	lr

0000fc4c <nan>:
    fc4c:	2000      	movs	r0, #0
    fc4e:	4901      	ldr	r1, [pc, #4]	; (fc54 <nan+0x8>)
    fc50:	4770      	bx	lr
    fc52:	bf00      	nop
    fc54:	7ff80000 	.word	0x7ff80000

0000fc58 <rint>:
    fc58:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc5a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
    fc5e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
    fc62:	2e13      	cmp	r6, #19
    fc64:	b083      	sub	sp, #12
    fc66:	4602      	mov	r2, r0
    fc68:	460b      	mov	r3, r1
    fc6a:	460c      	mov	r4, r1
    fc6c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
    fc70:	4607      	mov	r7, r0
    fc72:	dc2e      	bgt.n	fcd2 <rint+0x7a>
    fc74:	2e00      	cmp	r6, #0
    fc76:	db49      	blt.n	fd0c <rint+0xb4>
    fc78:	493a      	ldr	r1, [pc, #232]	; (fd64 <rint+0x10c>)
    fc7a:	4131      	asrs	r1, r6
    fc7c:	ea03 0001 	and.w	r0, r3, r1
    fc80:	4310      	orrs	r0, r2
    fc82:	d02b      	beq.n	fcdc <rint+0x84>
    fc84:	0849      	lsrs	r1, r1, #1
    fc86:	400b      	ands	r3, r1
    fc88:	ea53 0702 	orrs.w	r7, r3, r2
    fc8c:	d00c      	beq.n	fca8 <rint+0x50>
    fc8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fc92:	2e13      	cmp	r6, #19
    fc94:	ea24 0101 	bic.w	r1, r4, r1
    fc98:	fa43 f406 	asr.w	r4, r3, r6
    fc9c:	ea44 0401 	orr.w	r4, r4, r1
    fca0:	bf0c      	ite	eq
    fca2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
    fca6:	2700      	movne	r7, #0
    fca8:	4b2f      	ldr	r3, [pc, #188]	; (fd68 <rint+0x110>)
    fcaa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    fcae:	4621      	mov	r1, r4
    fcb0:	e9d5 4500 	ldrd	r4, r5, [r5]
    fcb4:	4638      	mov	r0, r7
    fcb6:	4622      	mov	r2, r4
    fcb8:	462b      	mov	r3, r5
    fcba:	f000 f8e5 	bl	fe88 <__adddf3>
    fcbe:	e9cd 0100 	strd	r0, r1, [sp]
    fcc2:	4622      	mov	r2, r4
    fcc4:	462b      	mov	r3, r5
    fcc6:	e9dd 0100 	ldrd	r0, r1, [sp]
    fcca:	f000 f8db 	bl	fe84 <__aeabi_dsub>
    fcce:	b003      	add	sp, #12
    fcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcd2:	2e33      	cmp	r6, #51	; 0x33
    fcd4:	dd06      	ble.n	fce4 <rint+0x8c>
    fcd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    fcda:	d040      	beq.n	fd5e <rint+0x106>
    fcdc:	4610      	mov	r0, r2
    fcde:	4619      	mov	r1, r3
    fce0:	b003      	add	sp, #12
    fce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fce4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
    fce8:	f04f 31ff 	mov.w	r1, #4294967295
    fcec:	fa21 f10e 	lsr.w	r1, r1, lr
    fcf0:	4208      	tst	r0, r1
    fcf2:	d0f3      	beq.n	fcdc <rint+0x84>
    fcf4:	0849      	lsrs	r1, r1, #1
    fcf6:	4208      	tst	r0, r1
    fcf8:	d0d6      	beq.n	fca8 <rint+0x50>
    fcfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fcfe:	ea20 0101 	bic.w	r1, r0, r1
    fd02:	fa43 fe0e 	asr.w	lr, r3, lr
    fd06:	ea4e 0701 	orr.w	r7, lr, r1
    fd0a:	e7cd      	b.n	fca8 <rint+0x50>
    fd0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fd10:	4301      	orrs	r1, r0
    fd12:	d0e3      	beq.n	fcdc <rint+0x84>
    fd14:	f3c3 0113 	ubfx	r1, r3, #0, #20
    fd18:	4e13      	ldr	r6, [pc, #76]	; (fd68 <rint+0x110>)
    fd1a:	4301      	orrs	r1, r0
    fd1c:	f1c1 0c00 	rsb	ip, r1, #0
    fd20:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    fd24:	e9d6 6700 	ldrd	r6, r7, [r6]
    fd28:	ea4c 0c01 	orr.w	ip, ip, r1
    fd2c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
    fd30:	0c5c      	lsrs	r4, r3, #17
    fd32:	0464      	lsls	r4, r4, #17
    fd34:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
    fd38:	ea43 0104 	orr.w	r1, r3, r4
    fd3c:	4632      	mov	r2, r6
    fd3e:	463b      	mov	r3, r7
    fd40:	f000 f8a2 	bl	fe88 <__adddf3>
    fd44:	e9cd 0100 	strd	r0, r1, [sp]
    fd48:	4632      	mov	r2, r6
    fd4a:	463b      	mov	r3, r7
    fd4c:	e9dd 0100 	ldrd	r0, r1, [sp]
    fd50:	f000 f898 	bl	fe84 <__aeabi_dsub>
    fd54:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    fd58:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
    fd5c:	e7c0      	b.n	fce0 <rint+0x88>
    fd5e:	f000 f893 	bl	fe88 <__adddf3>
    fd62:	e7bd      	b.n	fce0 <rint+0x88>
    fd64:	000fffff 	.word	0x000fffff
    fd68:	00011d48 	.word	0x00011d48
    fd6c:	00000000 	.word	0x00000000

0000fd70 <scalbn>:
    fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd72:	f3c1 560a 	ubfx	r6, r1, #20, #11
    fd76:	4604      	mov	r4, r0
    fd78:	460d      	mov	r5, r1
    fd7a:	460b      	mov	r3, r1
    fd7c:	4617      	mov	r7, r2
    fd7e:	bb0e      	cbnz	r6, fdc4 <scalbn+0x54>
    fd80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    fd84:	4303      	orrs	r3, r0
    fd86:	4686      	mov	lr, r0
    fd88:	d025      	beq.n	fdd6 <scalbn+0x66>
    fd8a:	2200      	movs	r2, #0
    fd8c:	4b34      	ldr	r3, [pc, #208]	; (fe60 <scalbn+0xf0>)
    fd8e:	f000 fa2d 	bl	101ec <__aeabi_dmul>
    fd92:	4a34      	ldr	r2, [pc, #208]	; (fe64 <scalbn+0xf4>)
    fd94:	4297      	cmp	r7, r2
    fd96:	4604      	mov	r4, r0
    fd98:	460d      	mov	r5, r1
    fd9a:	460b      	mov	r3, r1
    fd9c:	db2a      	blt.n	fdf4 <scalbn+0x84>
    fd9e:	f3c1 560a 	ubfx	r6, r1, #20, #11
    fda2:	3e36      	subs	r6, #54	; 0x36
    fda4:	443e      	add	r6, r7
    fda6:	f240 72fe 	movw	r2, #2046	; 0x7fe
    fdaa:	4296      	cmp	r6, r2
    fdac:	dc28      	bgt.n	fe00 <scalbn+0x90>
    fdae:	2e00      	cmp	r6, #0
    fdb0:	dd12      	ble.n	fdd8 <scalbn+0x68>
    fdb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    fdb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    fdba:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    fdbe:	4620      	mov	r0, r4
    fdc0:	4629      	mov	r1, r5
    fdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdc4:	f240 72ff 	movw	r2, #2047	; 0x7ff
    fdc8:	4296      	cmp	r6, r2
    fdca:	d1eb      	bne.n	fda4 <scalbn+0x34>
    fdcc:	4602      	mov	r2, r0
    fdce:	460b      	mov	r3, r1
    fdd0:	f000 f85a 	bl	fe88 <__adddf3>
    fdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdd8:	f116 0f35 	cmn.w	r6, #53	; 0x35
    fddc:	da1d      	bge.n	fe1a <scalbn+0xaa>
    fdde:	f24c 3350 	movw	r3, #50000	; 0xc350
    fde2:	429f      	cmp	r7, r3
    fde4:	4622      	mov	r2, r4
    fde6:	462b      	mov	r3, r5
    fde8:	dc25      	bgt.n	fe36 <scalbn+0xc6>
    fdea:	a119      	add	r1, pc, #100	; (adr r1, fe50 <scalbn+0xe0>)
    fdec:	e9d1 0100 	ldrd	r0, r1, [r1]
    fdf0:	f000 f83c 	bl	fe6c <copysign>
    fdf4:	a316      	add	r3, pc, #88	; (adr r3, fe50 <scalbn+0xe0>)
    fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
    fdfa:	f000 f9f7 	bl	101ec <__aeabi_dmul>
    fdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe00:	4622      	mov	r2, r4
    fe02:	462b      	mov	r3, r5
    fe04:	a114      	add	r1, pc, #80	; (adr r1, fe58 <scalbn+0xe8>)
    fe06:	e9d1 0100 	ldrd	r0, r1, [r1]
    fe0a:	f000 f82f 	bl	fe6c <copysign>
    fe0e:	a312      	add	r3, pc, #72	; (adr r3, fe58 <scalbn+0xe8>)
    fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe14:	f000 f9ea 	bl	101ec <__aeabi_dmul>
    fe18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    fe1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    fe22:	3636      	adds	r6, #54	; 0x36
    fe24:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    fe28:	4620      	mov	r0, r4
    fe2a:	4629      	mov	r1, r5
    fe2c:	2200      	movs	r2, #0
    fe2e:	4b0e      	ldr	r3, [pc, #56]	; (fe68 <scalbn+0xf8>)
    fe30:	f000 f9dc 	bl	101ec <__aeabi_dmul>
    fe34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe36:	a108      	add	r1, pc, #32	; (adr r1, fe58 <scalbn+0xe8>)
    fe38:	e9d1 0100 	ldrd	r0, r1, [r1]
    fe3c:	f000 f816 	bl	fe6c <copysign>
    fe40:	a305      	add	r3, pc, #20	; (adr r3, fe58 <scalbn+0xe8>)
    fe42:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe46:	f000 f9d1 	bl	101ec <__aeabi_dmul>
    fe4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe4c:	f3af 8000 	nop.w
    fe50:	c2f8f359 	.word	0xc2f8f359
    fe54:	01a56e1f 	.word	0x01a56e1f
    fe58:	8800759c 	.word	0x8800759c
    fe5c:	7e37e43c 	.word	0x7e37e43c
    fe60:	43500000 	.word	0x43500000
    fe64:	ffff3cb0 	.word	0xffff3cb0
    fe68:	3c900000 	.word	0x3c900000

0000fe6c <copysign>:
    fe6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    fe70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    fe74:	ea42 0103 	orr.w	r1, r2, r3
    fe78:	4770      	bx	lr
    fe7a:	bf00      	nop

0000fe7c <__aeabi_drsub>:
    fe7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    fe80:	e002      	b.n	fe88 <__adddf3>
    fe82:	bf00      	nop

0000fe84 <__aeabi_dsub>:
    fe84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000fe88 <__adddf3>:
    fe88:	b530      	push	{r4, r5, lr}
    fe8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    fe8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    fe92:	ea94 0f05 	teq	r4, r5
    fe96:	bf08      	it	eq
    fe98:	ea90 0f02 	teqeq	r0, r2
    fe9c:	bf1f      	itttt	ne
    fe9e:	ea54 0c00 	orrsne.w	ip, r4, r0
    fea2:	ea55 0c02 	orrsne.w	ip, r5, r2
    fea6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    feaa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    feae:	f000 80e2 	beq.w	10076 <STACK_SIZE+0x76>
    feb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    feb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    feba:	bfb8      	it	lt
    febc:	426d      	neglt	r5, r5
    febe:	dd0c      	ble.n	feda <__adddf3+0x52>
    fec0:	442c      	add	r4, r5
    fec2:	ea80 0202 	eor.w	r2, r0, r2
    fec6:	ea81 0303 	eor.w	r3, r1, r3
    feca:	ea82 0000 	eor.w	r0, r2, r0
    fece:	ea83 0101 	eor.w	r1, r3, r1
    fed2:	ea80 0202 	eor.w	r2, r0, r2
    fed6:	ea81 0303 	eor.w	r3, r1, r3
    feda:	2d36      	cmp	r5, #54	; 0x36
    fedc:	bf88      	it	hi
    fede:	bd30      	pophi	{r4, r5, pc}
    fee0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    fee4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    fee8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    feec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    fef0:	d002      	beq.n	fef8 <__adddf3+0x70>
    fef2:	4240      	negs	r0, r0
    fef4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fef8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    fefc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ff00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    ff04:	d002      	beq.n	ff0c <__adddf3+0x84>
    ff06:	4252      	negs	r2, r2
    ff08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ff0c:	ea94 0f05 	teq	r4, r5
    ff10:	f000 80a7 	beq.w	10062 <STACK_SIZE+0x62>
    ff14:	f1a4 0401 	sub.w	r4, r4, #1
    ff18:	f1d5 0e20 	rsbs	lr, r5, #32
    ff1c:	db0d      	blt.n	ff3a <__adddf3+0xb2>
    ff1e:	fa02 fc0e 	lsl.w	ip, r2, lr
    ff22:	fa22 f205 	lsr.w	r2, r2, r5
    ff26:	1880      	adds	r0, r0, r2
    ff28:	f141 0100 	adc.w	r1, r1, #0
    ff2c:	fa03 f20e 	lsl.w	r2, r3, lr
    ff30:	1880      	adds	r0, r0, r2
    ff32:	fa43 f305 	asr.w	r3, r3, r5
    ff36:	4159      	adcs	r1, r3
    ff38:	e00e      	b.n	ff58 <__adddf3+0xd0>
    ff3a:	f1a5 0520 	sub.w	r5, r5, #32
    ff3e:	f10e 0e20 	add.w	lr, lr, #32
    ff42:	2a01      	cmp	r2, #1
    ff44:	fa03 fc0e 	lsl.w	ip, r3, lr
    ff48:	bf28      	it	cs
    ff4a:	f04c 0c02 	orrcs.w	ip, ip, #2
    ff4e:	fa43 f305 	asr.w	r3, r3, r5
    ff52:	18c0      	adds	r0, r0, r3
    ff54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ff58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ff5c:	d507      	bpl.n	ff6e <__adddf3+0xe6>
    ff5e:	f04f 0e00 	mov.w	lr, #0
    ff62:	f1dc 0c00 	rsbs	ip, ip, #0
    ff66:	eb7e 0000 	sbcs.w	r0, lr, r0
    ff6a:	eb6e 0101 	sbc.w	r1, lr, r1
    ff6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ff72:	d31b      	bcc.n	ffac <__adddf3+0x124>
    ff74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ff78:	d30c      	bcc.n	ff94 <__adddf3+0x10c>
    ff7a:	0849      	lsrs	r1, r1, #1
    ff7c:	ea5f 0030 	movs.w	r0, r0, rrx
    ff80:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ff84:	f104 0401 	add.w	r4, r4, #1
    ff88:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ff8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ff90:	f080 809a 	bcs.w	100c8 <STACK_SIZE+0xc8>
    ff94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ff98:	bf08      	it	eq
    ff9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ff9e:	f150 0000 	adcs.w	r0, r0, #0
    ffa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ffa6:	ea41 0105 	orr.w	r1, r1, r5
    ffaa:	bd30      	pop	{r4, r5, pc}
    ffac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    ffb0:	4140      	adcs	r0, r0
    ffb2:	eb41 0101 	adc.w	r1, r1, r1
    ffb6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ffba:	f1a4 0401 	sub.w	r4, r4, #1
    ffbe:	d1e9      	bne.n	ff94 <__adddf3+0x10c>
    ffc0:	f091 0f00 	teq	r1, #0
    ffc4:	bf04      	itt	eq
    ffc6:	4601      	moveq	r1, r0
    ffc8:	2000      	moveq	r0, #0
    ffca:	fab1 f381 	clz	r3, r1
    ffce:	bf08      	it	eq
    ffd0:	3320      	addeq	r3, #32
    ffd2:	f1a3 030b 	sub.w	r3, r3, #11
    ffd6:	f1b3 0220 	subs.w	r2, r3, #32
    ffda:	da0c      	bge.n	fff6 <__adddf3+0x16e>
    ffdc:	320c      	adds	r2, #12
    ffde:	dd08      	ble.n	fff2 <__adddf3+0x16a>
    ffe0:	f102 0c14 	add.w	ip, r2, #20
    ffe4:	f1c2 020c 	rsb	r2, r2, #12
    ffe8:	fa01 f00c 	lsl.w	r0, r1, ip
    ffec:	fa21 f102 	lsr.w	r1, r1, r2
    fff0:	e00c      	b.n	1000c <STACK_SIZE+0xc>
    fff2:	f102 0214 	add.w	r2, r2, #20
    fff6:	bfd8      	it	le
    fff8:	f1c2 0c20 	rsble	ip, r2, #32
    fffc:	fa01 f102 	lsl.w	r1, r1, r2
   10000:	fa20 fc0c 	lsr.w	ip, r0, ip
   10004:	bfdc      	itt	le
   10006:	ea41 010c 	orrle.w	r1, r1, ip
   1000a:	4090      	lslle	r0, r2
   1000c:	1ae4      	subs	r4, r4, r3
   1000e:	bfa2      	ittt	ge
   10010:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10014:	4329      	orrge	r1, r5
   10016:	bd30      	popge	{r4, r5, pc}
   10018:	ea6f 0404 	mvn.w	r4, r4
   1001c:	3c1f      	subs	r4, #31
   1001e:	da1c      	bge.n	1005a <STACK_SIZE+0x5a>
   10020:	340c      	adds	r4, #12
   10022:	dc0e      	bgt.n	10042 <STACK_SIZE+0x42>
   10024:	f104 0414 	add.w	r4, r4, #20
   10028:	f1c4 0220 	rsb	r2, r4, #32
   1002c:	fa20 f004 	lsr.w	r0, r0, r4
   10030:	fa01 f302 	lsl.w	r3, r1, r2
   10034:	ea40 0003 	orr.w	r0, r0, r3
   10038:	fa21 f304 	lsr.w	r3, r1, r4
   1003c:	ea45 0103 	orr.w	r1, r5, r3
   10040:	bd30      	pop	{r4, r5, pc}
   10042:	f1c4 040c 	rsb	r4, r4, #12
   10046:	f1c4 0220 	rsb	r2, r4, #32
   1004a:	fa20 f002 	lsr.w	r0, r0, r2
   1004e:	fa01 f304 	lsl.w	r3, r1, r4
   10052:	ea40 0003 	orr.w	r0, r0, r3
   10056:	4629      	mov	r1, r5
   10058:	bd30      	pop	{r4, r5, pc}
   1005a:	fa21 f004 	lsr.w	r0, r1, r4
   1005e:	4629      	mov	r1, r5
   10060:	bd30      	pop	{r4, r5, pc}
   10062:	f094 0f00 	teq	r4, #0
   10066:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1006a:	bf06      	itte	eq
   1006c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10070:	3401      	addeq	r4, #1
   10072:	3d01      	subne	r5, #1
   10074:	e74e      	b.n	ff14 <__adddf3+0x8c>
   10076:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1007a:	bf18      	it	ne
   1007c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10080:	d029      	beq.n	100d6 <STACK_SIZE+0xd6>
   10082:	ea94 0f05 	teq	r4, r5
   10086:	bf08      	it	eq
   10088:	ea90 0f02 	teqeq	r0, r2
   1008c:	d005      	beq.n	1009a <STACK_SIZE+0x9a>
   1008e:	ea54 0c00 	orrs.w	ip, r4, r0
   10092:	bf04      	itt	eq
   10094:	4619      	moveq	r1, r3
   10096:	4610      	moveq	r0, r2
   10098:	bd30      	pop	{r4, r5, pc}
   1009a:	ea91 0f03 	teq	r1, r3
   1009e:	bf1e      	ittt	ne
   100a0:	2100      	movne	r1, #0
   100a2:	2000      	movne	r0, #0
   100a4:	bd30      	popne	{r4, r5, pc}
   100a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   100aa:	d105      	bne.n	100b8 <STACK_SIZE+0xb8>
   100ac:	0040      	lsls	r0, r0, #1
   100ae:	4149      	adcs	r1, r1
   100b0:	bf28      	it	cs
   100b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   100b6:	bd30      	pop	{r4, r5, pc}
   100b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   100bc:	bf3c      	itt	cc
   100be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   100c2:	bd30      	popcc	{r4, r5, pc}
   100c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   100c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   100cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   100d0:	f04f 0000 	mov.w	r0, #0
   100d4:	bd30      	pop	{r4, r5, pc}
   100d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   100da:	bf1a      	itte	ne
   100dc:	4619      	movne	r1, r3
   100de:	4610      	movne	r0, r2
   100e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   100e4:	bf1c      	itt	ne
   100e6:	460b      	movne	r3, r1
   100e8:	4602      	movne	r2, r0
   100ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   100ee:	bf06      	itte	eq
   100f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   100f4:	ea91 0f03 	teqeq	r1, r3
   100f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   100fc:	bd30      	pop	{r4, r5, pc}
   100fe:	bf00      	nop

00010100 <__aeabi_ui2d>:
   10100:	f090 0f00 	teq	r0, #0
   10104:	bf04      	itt	eq
   10106:	2100      	moveq	r1, #0
   10108:	4770      	bxeq	lr
   1010a:	b530      	push	{r4, r5, lr}
   1010c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10110:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10114:	f04f 0500 	mov.w	r5, #0
   10118:	f04f 0100 	mov.w	r1, #0
   1011c:	e750      	b.n	ffc0 <__adddf3+0x138>
   1011e:	bf00      	nop

00010120 <__aeabi_i2d>:
   10120:	f090 0f00 	teq	r0, #0
   10124:	bf04      	itt	eq
   10126:	2100      	moveq	r1, #0
   10128:	4770      	bxeq	lr
   1012a:	b530      	push	{r4, r5, lr}
   1012c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10130:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10134:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   10138:	bf48      	it	mi
   1013a:	4240      	negmi	r0, r0
   1013c:	f04f 0100 	mov.w	r1, #0
   10140:	e73e      	b.n	ffc0 <__adddf3+0x138>
   10142:	bf00      	nop

00010144 <__aeabi_f2d>:
   10144:	0042      	lsls	r2, r0, #1
   10146:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1014a:	ea4f 0131 	mov.w	r1, r1, rrx
   1014e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10152:	bf1f      	itttt	ne
   10154:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10158:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1015c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10160:	4770      	bxne	lr
   10162:	f092 0f00 	teq	r2, #0
   10166:	bf14      	ite	ne
   10168:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1016c:	4770      	bxeq	lr
   1016e:	b530      	push	{r4, r5, lr}
   10170:	f44f 7460 	mov.w	r4, #896	; 0x380
   10174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10178:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1017c:	e720      	b.n	ffc0 <__adddf3+0x138>
   1017e:	bf00      	nop

00010180 <__aeabi_ul2d>:
   10180:	ea50 0201 	orrs.w	r2, r0, r1
   10184:	bf08      	it	eq
   10186:	4770      	bxeq	lr
   10188:	b530      	push	{r4, r5, lr}
   1018a:	f04f 0500 	mov.w	r5, #0
   1018e:	e00a      	b.n	101a6 <__aeabi_l2d+0x16>

00010190 <__aeabi_l2d>:
   10190:	ea50 0201 	orrs.w	r2, r0, r1
   10194:	bf08      	it	eq
   10196:	4770      	bxeq	lr
   10198:	b530      	push	{r4, r5, lr}
   1019a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1019e:	d502      	bpl.n	101a6 <__aeabi_l2d+0x16>
   101a0:	4240      	negs	r0, r0
   101a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   101a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   101aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   101ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   101b2:	f43f aedc 	beq.w	ff6e <__adddf3+0xe6>
   101b6:	f04f 0203 	mov.w	r2, #3
   101ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   101be:	bf18      	it	ne
   101c0:	3203      	addne	r2, #3
   101c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   101c6:	bf18      	it	ne
   101c8:	3203      	addne	r2, #3
   101ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   101ce:	f1c2 0320 	rsb	r3, r2, #32
   101d2:	fa00 fc03 	lsl.w	ip, r0, r3
   101d6:	fa20 f002 	lsr.w	r0, r0, r2
   101da:	fa01 fe03 	lsl.w	lr, r1, r3
   101de:	ea40 000e 	orr.w	r0, r0, lr
   101e2:	fa21 f102 	lsr.w	r1, r1, r2
   101e6:	4414      	add	r4, r2
   101e8:	e6c1      	b.n	ff6e <__adddf3+0xe6>
   101ea:	bf00      	nop

000101ec <__aeabi_dmul>:
   101ec:	b570      	push	{r4, r5, r6, lr}
   101ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   101f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   101f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   101fa:	bf1d      	ittte	ne
   101fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10200:	ea94 0f0c 	teqne	r4, ip
   10204:	ea95 0f0c 	teqne	r5, ip
   10208:	f000 f8de 	bleq	103c8 <__aeabi_dmul+0x1dc>
   1020c:	442c      	add	r4, r5
   1020e:	ea81 0603 	eor.w	r6, r1, r3
   10212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   10216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1021e:	bf18      	it	ne
   10220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   10224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1022c:	d038      	beq.n	102a0 <__aeabi_dmul+0xb4>
   1022e:	fba0 ce02 	umull	ip, lr, r0, r2
   10232:	f04f 0500 	mov.w	r5, #0
   10236:	fbe1 e502 	umlal	lr, r5, r1, r2
   1023a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1023e:	fbe0 e503 	umlal	lr, r5, r0, r3
   10242:	f04f 0600 	mov.w	r6, #0
   10246:	fbe1 5603 	umlal	r5, r6, r1, r3
   1024a:	f09c 0f00 	teq	ip, #0
   1024e:	bf18      	it	ne
   10250:	f04e 0e01 	orrne.w	lr, lr, #1
   10254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1025c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10260:	d204      	bcs.n	1026c <__aeabi_dmul+0x80>
   10262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10266:	416d      	adcs	r5, r5
   10268:	eb46 0606 	adc.w	r6, r6, r6
   1026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   10270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   10280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10284:	bf88      	it	hi
   10286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1028a:	d81e      	bhi.n	102ca <__aeabi_dmul+0xde>
   1028c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   10290:	bf08      	it	eq
   10292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10296:	f150 0000 	adcs.w	r0, r0, #0
   1029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1029e:	bd70      	pop	{r4, r5, r6, pc}
   102a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   102a4:	ea46 0101 	orr.w	r1, r6, r1
   102a8:	ea40 0002 	orr.w	r0, r0, r2
   102ac:	ea81 0103 	eor.w	r1, r1, r3
   102b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   102b4:	bfc2      	ittt	gt
   102b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   102ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   102be:	bd70      	popgt	{r4, r5, r6, pc}
   102c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   102c4:	f04f 0e00 	mov.w	lr, #0
   102c8:	3c01      	subs	r4, #1
   102ca:	f300 80ab 	bgt.w	10424 <__aeabi_dmul+0x238>
   102ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   102d2:	bfde      	ittt	le
   102d4:	2000      	movle	r0, #0
   102d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   102da:	bd70      	pople	{r4, r5, r6, pc}
   102dc:	f1c4 0400 	rsb	r4, r4, #0
   102e0:	3c20      	subs	r4, #32
   102e2:	da35      	bge.n	10350 <__aeabi_dmul+0x164>
   102e4:	340c      	adds	r4, #12
   102e6:	dc1b      	bgt.n	10320 <__aeabi_dmul+0x134>
   102e8:	f104 0414 	add.w	r4, r4, #20
   102ec:	f1c4 0520 	rsb	r5, r4, #32
   102f0:	fa00 f305 	lsl.w	r3, r0, r5
   102f4:	fa20 f004 	lsr.w	r0, r0, r4
   102f8:	fa01 f205 	lsl.w	r2, r1, r5
   102fc:	ea40 0002 	orr.w	r0, r0, r2
   10300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   10304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1030c:	fa21 f604 	lsr.w	r6, r1, r4
   10310:	eb42 0106 	adc.w	r1, r2, r6
   10314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10318:	bf08      	it	eq
   1031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1031e:	bd70      	pop	{r4, r5, r6, pc}
   10320:	f1c4 040c 	rsb	r4, r4, #12
   10324:	f1c4 0520 	rsb	r5, r4, #32
   10328:	fa00 f304 	lsl.w	r3, r0, r4
   1032c:	fa20 f005 	lsr.w	r0, r0, r5
   10330:	fa01 f204 	lsl.w	r2, r1, r4
   10334:	ea40 0002 	orr.w	r0, r0, r2
   10338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10340:	f141 0100 	adc.w	r1, r1, #0
   10344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10348:	bf08      	it	eq
   1034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1034e:	bd70      	pop	{r4, r5, r6, pc}
   10350:	f1c4 0520 	rsb	r5, r4, #32
   10354:	fa00 f205 	lsl.w	r2, r0, r5
   10358:	ea4e 0e02 	orr.w	lr, lr, r2
   1035c:	fa20 f304 	lsr.w	r3, r0, r4
   10360:	fa01 f205 	lsl.w	r2, r1, r5
   10364:	ea43 0302 	orr.w	r3, r3, r2
   10368:	fa21 f004 	lsr.w	r0, r1, r4
   1036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10370:	fa21 f204 	lsr.w	r2, r1, r4
   10374:	ea20 0002 	bic.w	r0, r0, r2
   10378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10380:	bf08      	it	eq
   10382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10386:	bd70      	pop	{r4, r5, r6, pc}
   10388:	f094 0f00 	teq	r4, #0
   1038c:	d10f      	bne.n	103ae <__aeabi_dmul+0x1c2>
   1038e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   10392:	0040      	lsls	r0, r0, #1
   10394:	eb41 0101 	adc.w	r1, r1, r1
   10398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1039c:	bf08      	it	eq
   1039e:	3c01      	subeq	r4, #1
   103a0:	d0f7      	beq.n	10392 <__aeabi_dmul+0x1a6>
   103a2:	ea41 0106 	orr.w	r1, r1, r6
   103a6:	f095 0f00 	teq	r5, #0
   103aa:	bf18      	it	ne
   103ac:	4770      	bxne	lr
   103ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   103b2:	0052      	lsls	r2, r2, #1
   103b4:	eb43 0303 	adc.w	r3, r3, r3
   103b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   103bc:	bf08      	it	eq
   103be:	3d01      	subeq	r5, #1
   103c0:	d0f7      	beq.n	103b2 <__aeabi_dmul+0x1c6>
   103c2:	ea43 0306 	orr.w	r3, r3, r6
   103c6:	4770      	bx	lr
   103c8:	ea94 0f0c 	teq	r4, ip
   103cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   103d0:	bf18      	it	ne
   103d2:	ea95 0f0c 	teqne	r5, ip
   103d6:	d00c      	beq.n	103f2 <__aeabi_dmul+0x206>
   103d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   103dc:	bf18      	it	ne
   103de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   103e2:	d1d1      	bne.n	10388 <__aeabi_dmul+0x19c>
   103e4:	ea81 0103 	eor.w	r1, r1, r3
   103e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   103ec:	f04f 0000 	mov.w	r0, #0
   103f0:	bd70      	pop	{r4, r5, r6, pc}
   103f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   103f6:	bf06      	itte	eq
   103f8:	4610      	moveq	r0, r2
   103fa:	4619      	moveq	r1, r3
   103fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10400:	d019      	beq.n	10436 <__aeabi_dmul+0x24a>
   10402:	ea94 0f0c 	teq	r4, ip
   10406:	d102      	bne.n	1040e <__aeabi_dmul+0x222>
   10408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1040c:	d113      	bne.n	10436 <__aeabi_dmul+0x24a>
   1040e:	ea95 0f0c 	teq	r5, ip
   10412:	d105      	bne.n	10420 <__aeabi_dmul+0x234>
   10414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   10418:	bf1c      	itt	ne
   1041a:	4610      	movne	r0, r2
   1041c:	4619      	movne	r1, r3
   1041e:	d10a      	bne.n	10436 <__aeabi_dmul+0x24a>
   10420:	ea81 0103 	eor.w	r1, r1, r3
   10424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10430:	f04f 0000 	mov.w	r0, #0
   10434:	bd70      	pop	{r4, r5, r6, pc}
   10436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1043a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1043e:	bd70      	pop	{r4, r5, r6, pc}

00010440 <__aeabi_ddiv>:
   10440:	b570      	push	{r4, r5, r6, lr}
   10442:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10446:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1044a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1044e:	bf1d      	ittte	ne
   10450:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10454:	ea94 0f0c 	teqne	r4, ip
   10458:	ea95 0f0c 	teqne	r5, ip
   1045c:	f000 f8a7 	bleq	105ae <__aeabi_ddiv+0x16e>
   10460:	eba4 0405 	sub.w	r4, r4, r5
   10464:	ea81 0e03 	eor.w	lr, r1, r3
   10468:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1046c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10470:	f000 8088 	beq.w	10584 <__aeabi_ddiv+0x144>
   10474:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10478:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1047c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   10480:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10484:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10488:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1048c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   10490:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10494:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10498:	429d      	cmp	r5, r3
   1049a:	bf08      	it	eq
   1049c:	4296      	cmpeq	r6, r2
   1049e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   104a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   104a6:	d202      	bcs.n	104ae <__aeabi_ddiv+0x6e>
   104a8:	085b      	lsrs	r3, r3, #1
   104aa:	ea4f 0232 	mov.w	r2, r2, rrx
   104ae:	1ab6      	subs	r6, r6, r2
   104b0:	eb65 0503 	sbc.w	r5, r5, r3
   104b4:	085b      	lsrs	r3, r3, #1
   104b6:	ea4f 0232 	mov.w	r2, r2, rrx
   104ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   104be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   104c2:	ebb6 0e02 	subs.w	lr, r6, r2
   104c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   104ca:	bf22      	ittt	cs
   104cc:	1ab6      	subcs	r6, r6, r2
   104ce:	4675      	movcs	r5, lr
   104d0:	ea40 000c 	orrcs.w	r0, r0, ip
   104d4:	085b      	lsrs	r3, r3, #1
   104d6:	ea4f 0232 	mov.w	r2, r2, rrx
   104da:	ebb6 0e02 	subs.w	lr, r6, r2
   104de:	eb75 0e03 	sbcs.w	lr, r5, r3
   104e2:	bf22      	ittt	cs
   104e4:	1ab6      	subcs	r6, r6, r2
   104e6:	4675      	movcs	r5, lr
   104e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   104ec:	085b      	lsrs	r3, r3, #1
   104ee:	ea4f 0232 	mov.w	r2, r2, rrx
   104f2:	ebb6 0e02 	subs.w	lr, r6, r2
   104f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   104fa:	bf22      	ittt	cs
   104fc:	1ab6      	subcs	r6, r6, r2
   104fe:	4675      	movcs	r5, lr
   10500:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10504:	085b      	lsrs	r3, r3, #1
   10506:	ea4f 0232 	mov.w	r2, r2, rrx
   1050a:	ebb6 0e02 	subs.w	lr, r6, r2
   1050e:	eb75 0e03 	sbcs.w	lr, r5, r3
   10512:	bf22      	ittt	cs
   10514:	1ab6      	subcs	r6, r6, r2
   10516:	4675      	movcs	r5, lr
   10518:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1051c:	ea55 0e06 	orrs.w	lr, r5, r6
   10520:	d018      	beq.n	10554 <__aeabi_ddiv+0x114>
   10522:	ea4f 1505 	mov.w	r5, r5, lsl #4
   10526:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1052a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1052e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   10532:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10536:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1053a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1053e:	d1c0      	bne.n	104c2 <__aeabi_ddiv+0x82>
   10540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10544:	d10b      	bne.n	1055e <__aeabi_ddiv+0x11e>
   10546:	ea41 0100 	orr.w	r1, r1, r0
   1054a:	f04f 0000 	mov.w	r0, #0
   1054e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   10552:	e7b6      	b.n	104c2 <__aeabi_ddiv+0x82>
   10554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10558:	bf04      	itt	eq
   1055a:	4301      	orreq	r1, r0
   1055c:	2000      	moveq	r0, #0
   1055e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10562:	bf88      	it	hi
   10564:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10568:	f63f aeaf 	bhi.w	102ca <__aeabi_dmul+0xde>
   1056c:	ebb5 0c03 	subs.w	ip, r5, r3
   10570:	bf04      	itt	eq
   10572:	ebb6 0c02 	subseq.w	ip, r6, r2
   10576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1057a:	f150 0000 	adcs.w	r0, r0, #0
   1057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10582:	bd70      	pop	{r4, r5, r6, pc}
   10584:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10588:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1058c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   10590:	bfc2      	ittt	gt
   10592:	ebd4 050c 	rsbsgt	r5, r4, ip
   10596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1059a:	bd70      	popgt	{r4, r5, r6, pc}
   1059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105a0:	f04f 0e00 	mov.w	lr, #0
   105a4:	3c01      	subs	r4, #1
   105a6:	e690      	b.n	102ca <__aeabi_dmul+0xde>
   105a8:	ea45 0e06 	orr.w	lr, r5, r6
   105ac:	e68d      	b.n	102ca <__aeabi_dmul+0xde>
   105ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   105b2:	ea94 0f0c 	teq	r4, ip
   105b6:	bf08      	it	eq
   105b8:	ea95 0f0c 	teqeq	r5, ip
   105bc:	f43f af3b 	beq.w	10436 <__aeabi_dmul+0x24a>
   105c0:	ea94 0f0c 	teq	r4, ip
   105c4:	d10a      	bne.n	105dc <__aeabi_ddiv+0x19c>
   105c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   105ca:	f47f af34 	bne.w	10436 <__aeabi_dmul+0x24a>
   105ce:	ea95 0f0c 	teq	r5, ip
   105d2:	f47f af25 	bne.w	10420 <__aeabi_dmul+0x234>
   105d6:	4610      	mov	r0, r2
   105d8:	4619      	mov	r1, r3
   105da:	e72c      	b.n	10436 <__aeabi_dmul+0x24a>
   105dc:	ea95 0f0c 	teq	r5, ip
   105e0:	d106      	bne.n	105f0 <__aeabi_ddiv+0x1b0>
   105e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   105e6:	f43f aefd 	beq.w	103e4 <__aeabi_dmul+0x1f8>
   105ea:	4610      	mov	r0, r2
   105ec:	4619      	mov	r1, r3
   105ee:	e722      	b.n	10436 <__aeabi_dmul+0x24a>
   105f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   105f4:	bf18      	it	ne
   105f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   105fa:	f47f aec5 	bne.w	10388 <__aeabi_dmul+0x19c>
   105fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   10602:	f47f af0d 	bne.w	10420 <__aeabi_dmul+0x234>
   10606:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1060a:	f47f aeeb 	bne.w	103e4 <__aeabi_dmul+0x1f8>
   1060e:	e712      	b.n	10436 <__aeabi_dmul+0x24a>

00010610 <__gedf2>:
   10610:	f04f 3cff 	mov.w	ip, #4294967295
   10614:	e006      	b.n	10624 <__cmpdf2+0x4>
   10616:	bf00      	nop

00010618 <__ledf2>:
   10618:	f04f 0c01 	mov.w	ip, #1
   1061c:	e002      	b.n	10624 <__cmpdf2+0x4>
   1061e:	bf00      	nop

00010620 <__cmpdf2>:
   10620:	f04f 0c01 	mov.w	ip, #1
   10624:	f84d cd04 	str.w	ip, [sp, #-4]!
   10628:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1062c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10630:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10634:	bf18      	it	ne
   10636:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1063a:	d01b      	beq.n	10674 <__cmpdf2+0x54>
   1063c:	b001      	add	sp, #4
   1063e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10642:	bf0c      	ite	eq
   10644:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10648:	ea91 0f03 	teqne	r1, r3
   1064c:	bf02      	ittt	eq
   1064e:	ea90 0f02 	teqeq	r0, r2
   10652:	2000      	moveq	r0, #0
   10654:	4770      	bxeq	lr
   10656:	f110 0f00 	cmn.w	r0, #0
   1065a:	ea91 0f03 	teq	r1, r3
   1065e:	bf58      	it	pl
   10660:	4299      	cmppl	r1, r3
   10662:	bf08      	it	eq
   10664:	4290      	cmpeq	r0, r2
   10666:	bf2c      	ite	cs
   10668:	17d8      	asrcs	r0, r3, #31
   1066a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1066e:	f040 0001 	orr.w	r0, r0, #1
   10672:	4770      	bx	lr
   10674:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10678:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1067c:	d102      	bne.n	10684 <__cmpdf2+0x64>
   1067e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10682:	d107      	bne.n	10694 <__cmpdf2+0x74>
   10684:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1068c:	d1d6      	bne.n	1063c <__cmpdf2+0x1c>
   1068e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10692:	d0d3      	beq.n	1063c <__cmpdf2+0x1c>
   10694:	f85d 0b04 	ldr.w	r0, [sp], #4
   10698:	4770      	bx	lr
   1069a:	bf00      	nop

0001069c <__aeabi_cdrcmple>:
   1069c:	4684      	mov	ip, r0
   1069e:	4610      	mov	r0, r2
   106a0:	4662      	mov	r2, ip
   106a2:	468c      	mov	ip, r1
   106a4:	4619      	mov	r1, r3
   106a6:	4663      	mov	r3, ip
   106a8:	e000      	b.n	106ac <__aeabi_cdcmpeq>
   106aa:	bf00      	nop

000106ac <__aeabi_cdcmpeq>:
   106ac:	b501      	push	{r0, lr}
   106ae:	f7ff ffb7 	bl	10620 <__cmpdf2>
   106b2:	2800      	cmp	r0, #0
   106b4:	bf48      	it	mi
   106b6:	f110 0f00 	cmnmi.w	r0, #0
   106ba:	bd01      	pop	{r0, pc}

000106bc <__aeabi_dcmpeq>:
   106bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   106c0:	f7ff fff4 	bl	106ac <__aeabi_cdcmpeq>
   106c4:	bf0c      	ite	eq
   106c6:	2001      	moveq	r0, #1
   106c8:	2000      	movne	r0, #0
   106ca:	f85d fb08 	ldr.w	pc, [sp], #8
   106ce:	bf00      	nop

000106d0 <__aeabi_dcmplt>:
   106d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   106d4:	f7ff ffea 	bl	106ac <__aeabi_cdcmpeq>
   106d8:	bf34      	ite	cc
   106da:	2001      	movcc	r0, #1
   106dc:	2000      	movcs	r0, #0
   106de:	f85d fb08 	ldr.w	pc, [sp], #8
   106e2:	bf00      	nop

000106e4 <__aeabi_dcmple>:
   106e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   106e8:	f7ff ffe0 	bl	106ac <__aeabi_cdcmpeq>
   106ec:	bf94      	ite	ls
   106ee:	2001      	movls	r0, #1
   106f0:	2000      	movhi	r0, #0
   106f2:	f85d fb08 	ldr.w	pc, [sp], #8
   106f6:	bf00      	nop

000106f8 <__aeabi_dcmpge>:
   106f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   106fc:	f7ff ffce 	bl	1069c <__aeabi_cdrcmple>
   10700:	bf94      	ite	ls
   10702:	2001      	movls	r0, #1
   10704:	2000      	movhi	r0, #0
   10706:	f85d fb08 	ldr.w	pc, [sp], #8
   1070a:	bf00      	nop

0001070c <__aeabi_dcmpgt>:
   1070c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10710:	f7ff ffc4 	bl	1069c <__aeabi_cdrcmple>
   10714:	bf34      	ite	cc
   10716:	2001      	movcc	r0, #1
   10718:	2000      	movcs	r0, #0
   1071a:	f85d fb08 	ldr.w	pc, [sp], #8
   1071e:	bf00      	nop

00010720 <__aeabi_dcmpun>:
   10720:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10724:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10728:	d102      	bne.n	10730 <__aeabi_dcmpun+0x10>
   1072a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1072e:	d10a      	bne.n	10746 <__aeabi_dcmpun+0x26>
   10730:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10734:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10738:	d102      	bne.n	10740 <__aeabi_dcmpun+0x20>
   1073a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1073e:	d102      	bne.n	10746 <__aeabi_dcmpun+0x26>
   10740:	f04f 0000 	mov.w	r0, #0
   10744:	4770      	bx	lr
   10746:	f04f 0001 	mov.w	r0, #1
   1074a:	4770      	bx	lr

0001074c <__aeabi_d2uiz>:
   1074c:	004a      	lsls	r2, r1, #1
   1074e:	d211      	bcs.n	10774 <__aeabi_d2uiz+0x28>
   10750:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10754:	d211      	bcs.n	1077a <__aeabi_d2uiz+0x2e>
   10756:	d50d      	bpl.n	10774 <__aeabi_d2uiz+0x28>
   10758:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1075c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10760:	d40e      	bmi.n	10780 <__aeabi_d2uiz+0x34>
   10762:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1076a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1076e:	fa23 f002 	lsr.w	r0, r3, r2
   10772:	4770      	bx	lr
   10774:	f04f 0000 	mov.w	r0, #0
   10778:	4770      	bx	lr
   1077a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1077e:	d102      	bne.n	10786 <__aeabi_d2uiz+0x3a>
   10780:	f04f 30ff 	mov.w	r0, #4294967295
   10784:	4770      	bx	lr
   10786:	f04f 0000 	mov.w	r0, #0
   1078a:	4770      	bx	lr

0001078c <__cxa_atexit>:
   1078c:	4613      	mov	r3, r2
   1078e:	460a      	mov	r2, r1
   10790:	4601      	mov	r1, r0
   10792:	2002      	movs	r0, #2
   10794:	f000 b9c2 	b.w	10b1c <__register_exitproc>

00010798 <__errno>:
   10798:	4b01      	ldr	r3, [pc, #4]	; (107a0 <__errno+0x8>)
   1079a:	6818      	ldr	r0, [r3, #0]
   1079c:	4770      	bx	lr
   1079e:	bf00      	nop
   107a0:	20000118 	.word	0x20000118

000107a4 <ffs>:
   107a4:	b140      	cbz	r0, 107b8 <ffs+0x14>
   107a6:	2300      	movs	r3, #0
   107a8:	fa40 f103 	asr.w	r1, r0, r3
   107ac:	1c5a      	adds	r2, r3, #1
   107ae:	07c9      	lsls	r1, r1, #31
   107b0:	4613      	mov	r3, r2
   107b2:	d5f9      	bpl.n	107a8 <ffs+0x4>
   107b4:	4610      	mov	r0, r2
   107b6:	4770      	bx	lr
   107b8:	4602      	mov	r2, r0
   107ba:	4610      	mov	r0, r2
   107bc:	4770      	bx	lr
   107be:	bf00      	nop

000107c0 <__libc_init_array>:
   107c0:	b570      	push	{r4, r5, r6, lr}
   107c2:	4e0f      	ldr	r6, [pc, #60]	; (10800 <__libc_init_array+0x40>)
   107c4:	4d0f      	ldr	r5, [pc, #60]	; (10804 <__libc_init_array+0x44>)
   107c6:	1b76      	subs	r6, r6, r5
   107c8:	10b6      	asrs	r6, r6, #2
   107ca:	bf18      	it	ne
   107cc:	2400      	movne	r4, #0
   107ce:	d005      	beq.n	107dc <__libc_init_array+0x1c>
   107d0:	3401      	adds	r4, #1
   107d2:	f855 3b04 	ldr.w	r3, [r5], #4
   107d6:	4798      	blx	r3
   107d8:	42a6      	cmp	r6, r4
   107da:	d1f9      	bne.n	107d0 <__libc_init_array+0x10>
   107dc:	4e0a      	ldr	r6, [pc, #40]	; (10808 <__libc_init_array+0x48>)
   107de:	4d0b      	ldr	r5, [pc, #44]	; (1080c <__libc_init_array+0x4c>)
   107e0:	1b76      	subs	r6, r6, r5
   107e2:	f001 fabb 	bl	11d5c <_init>
   107e6:	10b6      	asrs	r6, r6, #2
   107e8:	bf18      	it	ne
   107ea:	2400      	movne	r4, #0
   107ec:	d006      	beq.n	107fc <__libc_init_array+0x3c>
   107ee:	3401      	adds	r4, #1
   107f0:	f855 3b04 	ldr.w	r3, [r5], #4
   107f4:	4798      	blx	r3
   107f6:	42a6      	cmp	r6, r4
   107f8:	d1f9      	bne.n	107ee <__libc_init_array+0x2e>
   107fa:	bd70      	pop	{r4, r5, r6, pc}
   107fc:	bd70      	pop	{r4, r5, r6, pc}
   107fe:	bf00      	nop
   10800:	00011d68 	.word	0x00011d68
   10804:	00011d68 	.word	0x00011d68
   10808:	00011d9c 	.word	0x00011d9c
   1080c:	00011d68 	.word	0x00011d68

00010810 <memcpy>:
   10810:	4684      	mov	ip, r0
   10812:	ea41 0300 	orr.w	r3, r1, r0
   10816:	f013 0303 	ands.w	r3, r3, #3
   1081a:	d16d      	bne.n	108f8 <memcpy+0xe8>
   1081c:	3a40      	subs	r2, #64	; 0x40
   1081e:	d341      	bcc.n	108a4 <memcpy+0x94>
   10820:	f851 3b04 	ldr.w	r3, [r1], #4
   10824:	f840 3b04 	str.w	r3, [r0], #4
   10828:	f851 3b04 	ldr.w	r3, [r1], #4
   1082c:	f840 3b04 	str.w	r3, [r0], #4
   10830:	f851 3b04 	ldr.w	r3, [r1], #4
   10834:	f840 3b04 	str.w	r3, [r0], #4
   10838:	f851 3b04 	ldr.w	r3, [r1], #4
   1083c:	f840 3b04 	str.w	r3, [r0], #4
   10840:	f851 3b04 	ldr.w	r3, [r1], #4
   10844:	f840 3b04 	str.w	r3, [r0], #4
   10848:	f851 3b04 	ldr.w	r3, [r1], #4
   1084c:	f840 3b04 	str.w	r3, [r0], #4
   10850:	f851 3b04 	ldr.w	r3, [r1], #4
   10854:	f840 3b04 	str.w	r3, [r0], #4
   10858:	f851 3b04 	ldr.w	r3, [r1], #4
   1085c:	f840 3b04 	str.w	r3, [r0], #4
   10860:	f851 3b04 	ldr.w	r3, [r1], #4
   10864:	f840 3b04 	str.w	r3, [r0], #4
   10868:	f851 3b04 	ldr.w	r3, [r1], #4
   1086c:	f840 3b04 	str.w	r3, [r0], #4
   10870:	f851 3b04 	ldr.w	r3, [r1], #4
   10874:	f840 3b04 	str.w	r3, [r0], #4
   10878:	f851 3b04 	ldr.w	r3, [r1], #4
   1087c:	f840 3b04 	str.w	r3, [r0], #4
   10880:	f851 3b04 	ldr.w	r3, [r1], #4
   10884:	f840 3b04 	str.w	r3, [r0], #4
   10888:	f851 3b04 	ldr.w	r3, [r1], #4
   1088c:	f840 3b04 	str.w	r3, [r0], #4
   10890:	f851 3b04 	ldr.w	r3, [r1], #4
   10894:	f840 3b04 	str.w	r3, [r0], #4
   10898:	f851 3b04 	ldr.w	r3, [r1], #4
   1089c:	f840 3b04 	str.w	r3, [r0], #4
   108a0:	3a40      	subs	r2, #64	; 0x40
   108a2:	d2bd      	bcs.n	10820 <memcpy+0x10>
   108a4:	3230      	adds	r2, #48	; 0x30
   108a6:	d311      	bcc.n	108cc <memcpy+0xbc>
   108a8:	f851 3b04 	ldr.w	r3, [r1], #4
   108ac:	f840 3b04 	str.w	r3, [r0], #4
   108b0:	f851 3b04 	ldr.w	r3, [r1], #4
   108b4:	f840 3b04 	str.w	r3, [r0], #4
   108b8:	f851 3b04 	ldr.w	r3, [r1], #4
   108bc:	f840 3b04 	str.w	r3, [r0], #4
   108c0:	f851 3b04 	ldr.w	r3, [r1], #4
   108c4:	f840 3b04 	str.w	r3, [r0], #4
   108c8:	3a10      	subs	r2, #16
   108ca:	d2ed      	bcs.n	108a8 <memcpy+0x98>
   108cc:	320c      	adds	r2, #12
   108ce:	d305      	bcc.n	108dc <memcpy+0xcc>
   108d0:	f851 3b04 	ldr.w	r3, [r1], #4
   108d4:	f840 3b04 	str.w	r3, [r0], #4
   108d8:	3a04      	subs	r2, #4
   108da:	d2f9      	bcs.n	108d0 <memcpy+0xc0>
   108dc:	3204      	adds	r2, #4
   108de:	d008      	beq.n	108f2 <memcpy+0xe2>
   108e0:	07d2      	lsls	r2, r2, #31
   108e2:	bf1c      	itt	ne
   108e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   108e8:	f800 3b01 	strbne.w	r3, [r0], #1
   108ec:	d301      	bcc.n	108f2 <memcpy+0xe2>
   108ee:	880b      	ldrh	r3, [r1, #0]
   108f0:	8003      	strh	r3, [r0, #0]
   108f2:	4660      	mov	r0, ip
   108f4:	4770      	bx	lr
   108f6:	bf00      	nop
   108f8:	2a08      	cmp	r2, #8
   108fa:	d313      	bcc.n	10924 <memcpy+0x114>
   108fc:	078b      	lsls	r3, r1, #30
   108fe:	d08d      	beq.n	1081c <memcpy+0xc>
   10900:	f010 0303 	ands.w	r3, r0, #3
   10904:	d08a      	beq.n	1081c <memcpy+0xc>
   10906:	f1c3 0304 	rsb	r3, r3, #4
   1090a:	1ad2      	subs	r2, r2, r3
   1090c:	07db      	lsls	r3, r3, #31
   1090e:	bf1c      	itt	ne
   10910:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10914:	f800 3b01 	strbne.w	r3, [r0], #1
   10918:	d380      	bcc.n	1081c <memcpy+0xc>
   1091a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1091e:	f820 3b02 	strh.w	r3, [r0], #2
   10922:	e77b      	b.n	1081c <memcpy+0xc>
   10924:	3a04      	subs	r2, #4
   10926:	d3d9      	bcc.n	108dc <memcpy+0xcc>
   10928:	3a01      	subs	r2, #1
   1092a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1092e:	f800 3b01 	strb.w	r3, [r0], #1
   10932:	d2f9      	bcs.n	10928 <memcpy+0x118>
   10934:	780b      	ldrb	r3, [r1, #0]
   10936:	7003      	strb	r3, [r0, #0]
   10938:	784b      	ldrb	r3, [r1, #1]
   1093a:	7043      	strb	r3, [r0, #1]
   1093c:	788b      	ldrb	r3, [r1, #2]
   1093e:	7083      	strb	r3, [r0, #2]
   10940:	4660      	mov	r0, ip
   10942:	4770      	bx	lr

00010944 <memset>:
   10944:	b470      	push	{r4, r5, r6}
   10946:	0786      	lsls	r6, r0, #30
   10948:	d046      	beq.n	109d8 <memset+0x94>
   1094a:	1e54      	subs	r4, r2, #1
   1094c:	2a00      	cmp	r2, #0
   1094e:	d041      	beq.n	109d4 <memset+0x90>
   10950:	b2ca      	uxtb	r2, r1
   10952:	4603      	mov	r3, r0
   10954:	e002      	b.n	1095c <memset+0x18>
   10956:	f114 34ff 	adds.w	r4, r4, #4294967295
   1095a:	d33b      	bcc.n	109d4 <memset+0x90>
   1095c:	f803 2b01 	strb.w	r2, [r3], #1
   10960:	079d      	lsls	r5, r3, #30
   10962:	d1f8      	bne.n	10956 <memset+0x12>
   10964:	2c03      	cmp	r4, #3
   10966:	d92e      	bls.n	109c6 <memset+0x82>
   10968:	b2cd      	uxtb	r5, r1
   1096a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1096e:	2c0f      	cmp	r4, #15
   10970:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10974:	d919      	bls.n	109aa <memset+0x66>
   10976:	f103 0210 	add.w	r2, r3, #16
   1097a:	4626      	mov	r6, r4
   1097c:	3e10      	subs	r6, #16
   1097e:	2e0f      	cmp	r6, #15
   10980:	f842 5c10 	str.w	r5, [r2, #-16]
   10984:	f842 5c0c 	str.w	r5, [r2, #-12]
   10988:	f842 5c08 	str.w	r5, [r2, #-8]
   1098c:	f842 5c04 	str.w	r5, [r2, #-4]
   10990:	f102 0210 	add.w	r2, r2, #16
   10994:	d8f2      	bhi.n	1097c <memset+0x38>
   10996:	f1a4 0210 	sub.w	r2, r4, #16
   1099a:	f022 020f 	bic.w	r2, r2, #15
   1099e:	f004 040f 	and.w	r4, r4, #15
   109a2:	3210      	adds	r2, #16
   109a4:	2c03      	cmp	r4, #3
   109a6:	4413      	add	r3, r2
   109a8:	d90d      	bls.n	109c6 <memset+0x82>
   109aa:	461e      	mov	r6, r3
   109ac:	4622      	mov	r2, r4
   109ae:	3a04      	subs	r2, #4
   109b0:	2a03      	cmp	r2, #3
   109b2:	f846 5b04 	str.w	r5, [r6], #4
   109b6:	d8fa      	bhi.n	109ae <memset+0x6a>
   109b8:	1f22      	subs	r2, r4, #4
   109ba:	f022 0203 	bic.w	r2, r2, #3
   109be:	3204      	adds	r2, #4
   109c0:	4413      	add	r3, r2
   109c2:	f004 0403 	and.w	r4, r4, #3
   109c6:	b12c      	cbz	r4, 109d4 <memset+0x90>
   109c8:	b2c9      	uxtb	r1, r1
   109ca:	441c      	add	r4, r3
   109cc:	f803 1b01 	strb.w	r1, [r3], #1
   109d0:	429c      	cmp	r4, r3
   109d2:	d1fb      	bne.n	109cc <memset+0x88>
   109d4:	bc70      	pop	{r4, r5, r6}
   109d6:	4770      	bx	lr
   109d8:	4614      	mov	r4, r2
   109da:	4603      	mov	r3, r0
   109dc:	e7c2      	b.n	10964 <memset+0x20>
   109de:	bf00      	nop

000109e0 <rand>:
   109e0:	b410      	push	{r4}
   109e2:	4b0c      	ldr	r3, [pc, #48]	; (10a14 <rand+0x34>)
   109e4:	480c      	ldr	r0, [pc, #48]	; (10a18 <rand+0x38>)
   109e6:	6819      	ldr	r1, [r3, #0]
   109e8:	4c0c      	ldr	r4, [pc, #48]	; (10a1c <rand+0x3c>)
   109ea:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   109ee:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   109f2:	fb00 f002 	mul.w	r0, r0, r2
   109f6:	fb04 0003 	mla	r0, r4, r3, r0
   109fa:	fba2 2304 	umull	r2, r3, r2, r4
   109fe:	4403      	add	r3, r0
   10a00:	3201      	adds	r2, #1
   10a02:	f143 0300 	adc.w	r3, r3, #0
   10a06:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   10a0a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   10a0e:	bc10      	pop	{r4}
   10a10:	4770      	bx	lr
   10a12:	bf00      	nop
   10a14:	20000118 	.word	0x20000118
   10a18:	5851f42d 	.word	0x5851f42d
   10a1c:	4c957f2d 	.word	0x4c957f2d
	...

00010a40 <strlen>:
   10a40:	f890 f000 	pld	[r0]
   10a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10a48:	f020 0107 	bic.w	r1, r0, #7
   10a4c:	f06f 0c00 	mvn.w	ip, #0
   10a50:	f010 0407 	ands.w	r4, r0, #7
   10a54:	f891 f020 	pld	[r1, #32]
   10a58:	f040 8049 	bne.w	10aee <strlen+0xae>
   10a5c:	f04f 0400 	mov.w	r4, #0
   10a60:	f06f 0007 	mvn.w	r0, #7
   10a64:	e9d1 2300 	ldrd	r2, r3, [r1]
   10a68:	f891 f040 	pld	[r1, #64]	; 0x40
   10a6c:	f100 0008 	add.w	r0, r0, #8
   10a70:	fa82 f24c 	uadd8	r2, r2, ip
   10a74:	faa4 f28c 	sel	r2, r4, ip
   10a78:	fa83 f34c 	uadd8	r3, r3, ip
   10a7c:	faa2 f38c 	sel	r3, r2, ip
   10a80:	bb4b      	cbnz	r3, 10ad6 <strlen+0x96>
   10a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10a86:	fa82 f24c 	uadd8	r2, r2, ip
   10a8a:	f100 0008 	add.w	r0, r0, #8
   10a8e:	faa4 f28c 	sel	r2, r4, ip
   10a92:	fa83 f34c 	uadd8	r3, r3, ip
   10a96:	faa2 f38c 	sel	r3, r2, ip
   10a9a:	b9e3      	cbnz	r3, 10ad6 <strlen+0x96>
   10a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10aa0:	fa82 f24c 	uadd8	r2, r2, ip
   10aa4:	f100 0008 	add.w	r0, r0, #8
   10aa8:	faa4 f28c 	sel	r2, r4, ip
   10aac:	fa83 f34c 	uadd8	r3, r3, ip
   10ab0:	faa2 f38c 	sel	r3, r2, ip
   10ab4:	b97b      	cbnz	r3, 10ad6 <strlen+0x96>
   10ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10aba:	f101 0120 	add.w	r1, r1, #32
   10abe:	fa82 f24c 	uadd8	r2, r2, ip
   10ac2:	f100 0008 	add.w	r0, r0, #8
   10ac6:	faa4 f28c 	sel	r2, r4, ip
   10aca:	fa83 f34c 	uadd8	r3, r3, ip
   10ace:	faa2 f38c 	sel	r3, r2, ip
   10ad2:	2b00      	cmp	r3, #0
   10ad4:	d0c6      	beq.n	10a64 <strlen+0x24>
   10ad6:	2a00      	cmp	r2, #0
   10ad8:	bf04      	itt	eq
   10ada:	3004      	addeq	r0, #4
   10adc:	461a      	moveq	r2, r3
   10ade:	ba12      	rev	r2, r2
   10ae0:	fab2 f282 	clz	r2, r2
   10ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10aec:	4770      	bx	lr
   10aee:	e9d1 2300 	ldrd	r2, r3, [r1]
   10af2:	f004 0503 	and.w	r5, r4, #3
   10af6:	f1c4 0000 	rsb	r0, r4, #0
   10afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10afe:	f014 0f04 	tst.w	r4, #4
   10b02:	f891 f040 	pld	[r1, #64]	; 0x40
   10b06:	fa0c f505 	lsl.w	r5, ip, r5
   10b0a:	ea62 0205 	orn	r2, r2, r5
   10b0e:	bf1c      	itt	ne
   10b10:	ea63 0305 	ornne	r3, r3, r5
   10b14:	4662      	movne	r2, ip
   10b16:	f04f 0400 	mov.w	r4, #0
   10b1a:	e7a9      	b.n	10a70 <strlen+0x30>

00010b1c <__register_exitproc>:
   10b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10b20:	4d2c      	ldr	r5, [pc, #176]	; (10bd4 <__register_exitproc+0xb8>)
   10b22:	4606      	mov	r6, r0
   10b24:	6828      	ldr	r0, [r5, #0]
   10b26:	4698      	mov	r8, r3
   10b28:	460f      	mov	r7, r1
   10b2a:	4691      	mov	r9, r2
   10b2c:	f000 f882 	bl	10c34 <__retarget_lock_acquire_recursive>
   10b30:	4b29      	ldr	r3, [pc, #164]	; (10bd8 <__register_exitproc+0xbc>)
   10b32:	681c      	ldr	r4, [r3, #0]
   10b34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10b38:	2b00      	cmp	r3, #0
   10b3a:	d03e      	beq.n	10bba <__register_exitproc+0x9e>
   10b3c:	685a      	ldr	r2, [r3, #4]
   10b3e:	2a1f      	cmp	r2, #31
   10b40:	dc1c      	bgt.n	10b7c <__register_exitproc+0x60>
   10b42:	f102 0e01 	add.w	lr, r2, #1
   10b46:	b176      	cbz	r6, 10b66 <__register_exitproc+0x4a>
   10b48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10b4c:	2401      	movs	r4, #1
   10b4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10b52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10b56:	4094      	lsls	r4, r2
   10b58:	4320      	orrs	r0, r4
   10b5a:	2e02      	cmp	r6, #2
   10b5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10b60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10b64:	d023      	beq.n	10bae <__register_exitproc+0x92>
   10b66:	3202      	adds	r2, #2
   10b68:	f8c3 e004 	str.w	lr, [r3, #4]
   10b6c:	6828      	ldr	r0, [r5, #0]
   10b6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10b72:	f000 f861 	bl	10c38 <__retarget_lock_release_recursive>
   10b76:	2000      	movs	r0, #0
   10b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b7c:	4b17      	ldr	r3, [pc, #92]	; (10bdc <__register_exitproc+0xc0>)
   10b7e:	b30b      	cbz	r3, 10bc4 <__register_exitproc+0xa8>
   10b80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10b84:	f7ef fe61 	bl	84a <malloc>
   10b88:	4603      	mov	r3, r0
   10b8a:	b1d8      	cbz	r0, 10bc4 <__register_exitproc+0xa8>
   10b8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10b90:	6002      	str	r2, [r0, #0]
   10b92:	2100      	movs	r1, #0
   10b94:	6041      	str	r1, [r0, #4]
   10b96:	460a      	mov	r2, r1
   10b98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   10b9c:	f04f 0e01 	mov.w	lr, #1
   10ba0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10ba4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10ba8:	2e00      	cmp	r6, #0
   10baa:	d0dc      	beq.n	10b66 <__register_exitproc+0x4a>
   10bac:	e7cc      	b.n	10b48 <__register_exitproc+0x2c>
   10bae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10bb2:	430c      	orrs	r4, r1
   10bb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10bb8:	e7d5      	b.n	10b66 <__register_exitproc+0x4a>
   10bba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   10bbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10bc2:	e7bb      	b.n	10b3c <__register_exitproc+0x20>
   10bc4:	6828      	ldr	r0, [r5, #0]
   10bc6:	f000 f837 	bl	10c38 <__retarget_lock_release_recursive>
   10bca:	f04f 30ff 	mov.w	r0, #4294967295
   10bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10bd2:	bf00      	nop
   10bd4:	20000548 	.word	0x20000548
   10bd8:	00011d58 	.word	0x00011d58
   10bdc:	0000084b 	.word	0x0000084b

00010be0 <register_fini>:
   10be0:	4b02      	ldr	r3, [pc, #8]	; (10bec <register_fini+0xc>)
   10be2:	b113      	cbz	r3, 10bea <register_fini+0xa>
   10be4:	4802      	ldr	r0, [pc, #8]	; (10bf0 <register_fini+0x10>)
   10be6:	f000 b805 	b.w	10bf4 <atexit>
   10bea:	4770      	bx	lr
   10bec:	00000000 	.word	0x00000000
   10bf0:	00010c01 	.word	0x00010c01

00010bf4 <atexit>:
   10bf4:	2300      	movs	r3, #0
   10bf6:	4601      	mov	r1, r0
   10bf8:	461a      	mov	r2, r3
   10bfa:	4618      	mov	r0, r3
   10bfc:	f7ff bf8e 	b.w	10b1c <__register_exitproc>

00010c00 <__libc_fini_array>:
   10c00:	b538      	push	{r3, r4, r5, lr}
   10c02:	4c0a      	ldr	r4, [pc, #40]	; (10c2c <__libc_fini_array+0x2c>)
   10c04:	4d0a      	ldr	r5, [pc, #40]	; (10c30 <__libc_fini_array+0x30>)
   10c06:	1b64      	subs	r4, r4, r5
   10c08:	10a4      	asrs	r4, r4, #2
   10c0a:	d00a      	beq.n	10c22 <__libc_fini_array+0x22>
   10c0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   10c10:	3b01      	subs	r3, #1
   10c12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10c16:	3c01      	subs	r4, #1
   10c18:	f855 3904 	ldr.w	r3, [r5], #-4
   10c1c:	4798      	blx	r3
   10c1e:	2c00      	cmp	r4, #0
   10c20:	d1f9      	bne.n	10c16 <__libc_fini_array+0x16>
   10c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c26:	f001 b8b9 	b.w	11d9c <_fini>
   10c2a:	bf00      	nop
   10c2c:	00011dac 	.word	0x00011dac
   10c30:	00011da8 	.word	0x00011da8

00010c34 <__retarget_lock_acquire_recursive>:
   10c34:	4770      	bx	lr
   10c36:	bf00      	nop

00010c38 <__retarget_lock_release_recursive>:
   10c38:	4770      	bx	lr
   10c3a:	bf00      	nop

00010c3c <_ZTV17ARINC_Conversions>:
	...
   10c44:	0515 0000 03e5 0000                         ........

00010c4c <_ZL5Mesg1>:
   10c4c:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

00010c5c <_ZL5Mesg2>:
   10c5c:	6144 6174 203a 0000                         Data: ..

00010c64 <_ZL10HexToAscii>:
   10c64:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

00010c74 <_ZL11HistoryMesg>:
   10c74:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
   10c84:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   10c94:	7420 206f 6e69 7469 6c69 7a69 0a65 000d      to initilize...
   10ca4:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
   10cb4:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
   10cc4:	0d0a 0000 0a72 2d2d 212d 6f67 2074 656d     ....r.---!got me
   10cd4:	7373 6761 2165 2d2d 2d2d 0000 0d0a 7254     ssage!----....Tr
   10ce4:	6e61 6d73 7469 2620 5220 6365 6965 6576     ansmit & Receive
   10cf4:	5720 7469 2068 614c 6562 736c 4d20 646f      With Labels Mod
   10d04:	0a65 000d 0d0a 4553 464c 542d 5345 2c54     e.....SELF-TEST,
   10d14:	4920 746e 7265 616e 206c 6944 6967 6174      Internal Digita
   10d24:	206c 6f4c 706f 622d 6361 2c6b 4e20 206f     l Loop-back, No 
   10d34:	6164 6174 6920 2073 7274 6e61 6d73 7469     data is transmit
   10d44:	6574 2064 7865 6574 6e72 6c61 796c 0d0a     ted externally..
   10d54:	0000 0000 0d0a 6f20 206e 6154 6c62 2065     ...... on Table 
   10d64:	616c 6562 736c 6120 6572 4520 616e 6c62     labels are Enabl
   10d74:	6465 0000 0d0a 500a 6572 7373 5320 2d57     ed.....Press SW-
   10d84:	2031 6f74 7320 6174 7472 6920 696e 6974     1 to start initi
   10d94:	6c61 796c 0d0a 000a 2d2d 202d 7542 7474     ally....--- Butt
   10da4:	6e6f 4320 6d6f 616d 646e 2073 2d2d 0a2d     on Commands ---.
   10db4:	000d 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   10dc4:	6f74 4420 7369 6c70 7961 5320 6174 7574     to Display Statu
   10dd4:	2073 6e61 2064 6f43 746e 6f72 206c 6552     s and Control Re
   10de4:	6967 7473 7265 0a73 000d 0000 2020 2070     gisters.....  p 
   10df4:	6f74 5020 7561 6573 0d0a 0000 2020 206d     to Pause....  m 
   10e04:	6f74 4420 7369 6c70 7961 4c20 6261 6c65     to Display Label
   10e14:	4d20 6d65 726f 0079 0d0a 003e 0d0a 7254      Memory...>...Tr
   10e24:	6e61 6d73 7469 6974 676e 0d0a 003e 0000     ansmitting..>...
   10e34:	0d0a 4948 332d 3935 2033 7453 7461 7375     ..HI-3593 Status
   10e44:	202c 6f43 746e 6f72 206c 6552 6967 7473     , Control Regist
   10e54:	7265 0d73 000a 0000 0d0a 2009 2a20 2a2a     ers........  ***
   10e64:	2a2a 5020 6572 7373 2020 7073 6361 6265     ** Press  spaceb
   10e74:	7261 7420 206f 6f63 746e 6e69 6575 2a20     ar to continue *
   10e84:	2a2a 2a2a 002a 0000 0a0a 540d 6172 736e     *****......Trans
   10e94:	696d 2074 6150 7375 6465 0d0a 0000 0000     mit Paused......
   10ea4:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
   10eb4:	4f54 2d4e 2032 6f74 7420 6172 736e 696d     TON-2 to transmi
   10ec4:	2074 6e6f 2065 7266 6d61 2065 6e61 2064     t one frame and 
   10ed4:	6170 7375 0a65 000d 0d0a 7250 7365 2073     pause.....Press 
   10ee4:	4c4f 4445 425f 5455 4f54 2d4e 2033 6f74     OLED_BUTTON-3 to
   10ef4:	5220 7365 6d75 0a65 000d 0000 0d0a 7254      Resume.......Tr
   10f04:	6e61 6d73 7469 6574 2072 6552 7573 656d     ansmitter Resume
   10f14:	2e64 2e2e 0d0a 0000 0d0a 6552 6563 7669     d.........Receiv
   10f24:	7265 3120 4c20 6261 6c65 0a73 000d 0000     er 1 Labels.....
   10f34:	0d0a 6552 6563 7669 7265 3220 4c20 6261     ..Receiver 2 Lab
   10f44:	6c65 0a73 000d 0000 0d0a 7254 6e61 6d73     els.......Transm
   10f54:	7469 2620 5220 6365 6965 6576 4520 6863     it & Receive Ech
   10f64:	206f 6f4d 6564 0d0a 0000 0000 0d0a 6c53     o Mode........Sl
   10f74:	776f 5320 6570 6465 0000 0000 0d0a 6146     ow Speed......Fa
   10f84:	7473 5320 6570 6465 0000 0000 0d0a 7254     st Speed......Tr
   10f94:	6e61 6d73 7469 6574 2072 6150 6972 7974     ansmitter Parity
   10fa4:	4520 616e 6c62 6465 0000 0000 0d0a 6154      Enabled......Ta
   10fb4:	6c62 2065 616c 6562 736c 6120 6572 4520     ble labels are E
   10fc4:	616e 6c62 6465 0000 0d0a 2d0a 2d2d 4320     nabled.....--- C
   10fd4:	6e6f 6f73 656c 4320 6d6f 616d 646e 2073     onsole Commands 
   10fe4:	6548 706c 2d20 2d2d 0000 0000 2020 2050     Help ---....  P 
   10ff4:	203d 6150 6972 7974 5420 676f 6c67 2065     = Parity Toggle 
   11004:	6e6f 6f2f 6666 0000 2020 2054 203d 4654     on/off..  T = TF
   11014:	494c 2050 5420 676f 6c67 2065 6e6f 6f2f     LIP  Toggle on/o
   11024:	6666 0000 2020 2052 203d 4652 494c 2050     ff..  R = RFLIP 
   11034:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   11044:	2020 2053 203d 4453 4e4f 202c 4453 2c39       S = SDON, SD9,
   11054:	5320 3144 2030 6f54 6767 656c 6f20 2f6e      SD10 Toggle on/
   11064:	666f 0066 2020 2048 203d 6854 7369 4820     off.  H = This H
   11074:	6c65 2070 6150 6567 0000 0000 2020 7053     elp Page....  Sp
   11084:	6361 2065 6142 2072 203d 6944 7073 616c     ace Bar = Displa
   11094:	2079 7453 7461 7375 6120 646e 4320 6e6f     y Status and Con
   110a4:	7274 6c6f 7220 6765 0073 0000 2020 2049     trol regs...  I 
   110b4:	203d 6e49 7263 6d65 6e65 2074 654d 7373     = Increment Mess
   110c4:	6761 2065 6e61 2064 7254 6e61 6d73 7469     age and Transmit
   110d4:	202e 7845 6c70 726f 7265 4d20 646f 2065     . Explorer Mode 
   110e4:	2d20 4f20 4c4e 2159 0000 0000 2020 204d      - ONLY!....  M 
   110f4:	203d 6e45 6574 2072 7543 7473 6d6f 4d20     = Enter Custom M
   11104:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   11114:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   11124:	2020 4e45 4554 3d52 5420 6172 736e 696d       ENTER= Transmi
   11134:	2074 656e 7478 6d20 7365 6173 6567 202e     t next message. 
   11144:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   11154:	4f20 4c4e 2159 0000 7830 0020 7826 3030      ONLY!..0x .&x00
   11164:	2030 0000 5854 5020 7261 7469 2079 4e4f     0 ..TX Parity ON
   11174:	0d0a 003e 5854 5020 7261 7469 2079 464f     ..>.TX Parity OF
   11184:	0a46 3e0d 0000 0000 4654 494c 2050 6553     F..>....TFLIP Se
   11194:	0a74 3e0d 0000 0000 4654 494c 2050 6c43     t..>....TFLIP Cl
   111a4:	6165 6572 0a64 3e0d 0000 0000 4552 2d43     eared..>....REC-
   111b4:	2031 4652 494c 2050 6553 0a74 3e0d 0000     1 RFLIP Set..>..
   111c4:	4552 2d43 2031 4652 494c 2050 6c43 6165     REC-1 RFLIP Clea
   111d4:	6572 0a64 3e0d 0000 4552 2d43 2032 4652     red..>..REC-2 RF
   111e4:	494c 2050 6553 0a74 3e0d 0000 4552 2d43     LIP Set..>..REC-
   111f4:	2032 4652 494c 2050 6c43 6165 6572 0a64     2 RFLIP Cleared.
   11204:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   11214:	3944 6120 646e 5320 3144 2030 6553 0a74     D9 and SD10 Set.
   11224:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   11234:	3944 6120 646e 5320 3144 2030 6c43 6165     D9 and SD10 Clea
   11244:	6572 0a64 3e0d 0000 4552 2d43 2032 4453     red..>..REC-2 SD
   11254:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   11264:	6553 0a74 3e0d 0000 4552 2d43 2032 4453     Set..>..REC-2 SD
   11274:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   11284:	6c43 6165 6572 0a64 3e0d 0000 0d0a 500a     Cleared..>.....P
   11294:	6572 7373 5320 6170 6563 4220 7261 6f20     ress Space Bar o
   112a4:	2072 5753 342d 7420 206f 6572 7573 656d     r SW-4 to resume
   112b4:	0000 0000 614c 6562 736c 2020 2030 202d     ....Labels  0 - 
   112c4:	3336 203a 0020 0000 0020 0000 0d0a 614c     63:  ... .....La
   112d4:	6562 736c 2020 3436 312d 3732 203a 0020     bels  64-127:  .
   112e4:	0d0a 614c 6562 736c 3120 3832 312d 3139     ..Labels 128-191
   112f4:	203a 0020 0d0a 614c 6562 736c 3120 3239     :  ...Labels 192
   11304:	322d 3535 203a 0020 0d0a 614c 6562 736c     -255:  ...Labels
   11314:	2020 2030 202d 3336 203a 0020 0d0a 543e       0 - 63:  ...>T
   11324:	2058 2020 4420 7461 3a61 0000 614c 6562     X    Data:..Labe
   11334:	3a6c 0000 003e 0000 6552 2d63 2031 6144     l:..>...Rec-1 Da
   11344:	6174 003a 4c50 2d31 2031 6144 6174 003a     ta:.PL1-1 Data:.
   11354:	614d 6374 3a68 0000 4c50 2d31 2032 6144     Match:..PL1-2 Da
   11364:	6174 003a 4c50 2d31 2033 6144 6174 003a     ta:.PL1-3 Data:.
   11374:	6552 2d63 2032 6144 6174 003a 4c50 2d32     Rec-2 Data:.PL2-
   11384:	2031 6144 6174 003a 4c50 2d32 2032 6144     1 Data:.PL2-2 Da
   11394:	6174 003a 4c50 2d32 2033 6144 6174 003a     ta:.PL2-3 Data:.
   113a4:	0d0a 0000 0d0a 7845 6c70 726f 7265 4d20     ......Explorer M
   113b4:	646f 0a65 000d 0000 0d0a 6c20 6261 6c65     ode....... label
   113c4:	2073 6154 6c62 2065 7369 4520 616e 6c62     s Table is Enabl
   113d4:	6465 0000 0d0a 2d0a 2d2d 4220 7475 6f74     ed.....--- Butto
   113e4:	206e 6f43 6d6d 6e61 7364 2d20 2d2d 0000     n Commands ---..
   113f4:	0d0a 2020 7073 6361 6265 7261 7420 206f     ..  spacebar to 
   11404:	6944 7073 616c 2079 7453 7461 7375 6120     Display Status a
   11414:	646e 4320 6e6f 7274 6c6f 5220 6765 7369     nd Control Regis
   11424:	6574 7372 0000 0000 0d0a 2020 4c4f 4445     ters......  OLED
   11434:	422d 5455 4f54 324e 7420 6172 736e 696d     -BUTTON2 transmi
   11444:	2074 6e6f 2065 656d 7373 6761 2065 7266     t one message fr
   11454:	6d6f 7420 6172 736e 696d 2074 7562 6666     om transmit buff
   11464:	7265 0000 0d0a 2020 204c 6f74 5020 6972     er....  L to Pri
   11474:	746e 4c20 6261 6c65 4d20 6d65 726f 0a79     nt Label Memory.
   11484:	000d 0000 0d0a 7250 7365 2073 4e45 4554     ......Press ENTE
   11494:	2052 6f74 5420 6172 736e 696d 2074 726f     R to Transmit or
   114a4:	7520 6573 7420 6568 2820 294d 6320 6d6f      use the (M) com
   114b4:	616d 646e 7420 206f 6e65 6574 2072 2061     mand to enter a 
   114c4:	7563 7473 6d6f 6d20 7365 6173 6567 0000     custom message..
   114d4:	7250 7365 2073 5753 2034 726f 7320 6170     Press SW4 or spa
   114e4:	6563 6162 2072 6f74 6320 6e6f 6974 756e     cebar to continu
   114f4:	0065 0000 7250 7365 2073 7073 6361 6265     e...Press spaceb
   11504:	7261 7420 206f 6f63 746e 6e69 6575 0000     ar to continue..
   11514:	0d0a 433e 6d6f 616d 646e 4d20 0000 0000     ..>Command M....
   11524:	0d0a 6e45 6574 2072 2033 7962 6574 2073     ..Enter 3 bytes 
   11534:	202b 414c 4542 204c 6f74 5420 6172 736e     + LABEL to Trans
   11544:	696d 2074 6f66 6c6c 776f 6465 6220 2079     mit followed by 
   11554:	4e45 4554 0a52 000d 0d0a 6f54 5420 6172     ENTER.....To Tra
   11564:	736e 696d 2c74 6520 746e 7265 3320 6220     nsmit, enter 3 b
   11574:	7479 7365 6620 6c6f 6f6c 6577 2064 7962     ytes followed by
   11584:	6120 4c20 6261 6c65 6220 7479 2065 6f66      a Label byte fo
   11594:	6c6c 776f 6465 6220 2079 4e45 4554 0a52     llowed by ENTER.
   115a4:	000d 0000 6f46 6d72 7461 203a 6942 7374     ....Format: Bits
   115b4:	3233 322d 2c35 4220 7469 3273 2d34 3731     32-25, Bits24-17
   115c4:	202c 6942 7374 3631 392d 202c 414c 4542     , Bits16-9, LABE
   115d4:	0a4c 3a0d 0000 0000 7845 6d61 6c70 3a65     L..:....Example:
   115e4:	3020 2031 3332 3420 2035 3736 4520 544e      01 23 45 67 ENT
   115f4:	5245 0d0a 003a 0000 5020 6572 7373 5220     ER..:... Press R
   11604:	5445 5255 004e 0000 5420 6172 736e 696d     ETURN... Transmi
   11614:	6974 676e 2e2e 002e 5420 6172 736e 696d     ting.... Transmi
   11624:	6574 2164 0000 0000 6f43 6d6d 6e61 2064     ted!....Command 
   11634:	3a49 4920 636e 6572 656d 746e 6420 7461     I: Increment dat
   11644:	0a61 3e0d 0000 0000                         a..>....

0001164c <_ZTV15ARINC_Interface>:
	...
   11660:	0515 0000 03e5 0000 0601 0000 0665 0000     ............e...
   11670:	0691 0000                                   ....

00011674 <_ZTT15ARINC_Interface>:
   11674:	1660 0001 1698 0001 1698 0001 1660 0001     `...........`...

00011684 <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
   11698:	0515 0000 03e5 0000 0000 0000 0000 0000     ................
   116a8:	0871 0000 2a2a 2a2a 4c20 6669 2065 7550     q...**** Life Pu
   116b8:	736c 2065 6341 6974 6176 6574 2a64 2a2a     lse Activated***
   116c8:	002a 0000 0a0d 0000 7469 7320 6f68 6c75     *.......it shoul
   116d8:	2064 6f77 6b72 0000 7469 6420 656f 2073     d work..it does 
   116e8:	6f77 6b72 0000 0000 2020 7546 636e 6974     work....  Functi
   116f8:	6e6f 6620 726f 7420 7365 6974 676e 6120     on for testing a
   11708:	206e 3269 2063 4545 5250 4d4f 0000 0000     n i2c EEPROM....
   11718:	4545 5250 4d4f 7620 7265 6669 6369 7461     EEPROM verificat
   11728:	6f69 206e 6166 6c69 6465 202e 6441 7264     ion failed. Addr
   11738:	7365 3a73 0020 0000 6220 7469 3a20 0000     ess: ... bit :..
   11748:	7257 7469 2065 202d 6552 6461 6920 2073     Write - Read is 
   11758:	7573 6363 7365 6673 6c75 6920 206e 4545     successful in EE
   11768:	5250 4d4f 6d20 6d65 726f 2079 0020 0000     PROM memory  ...
   11778:	5351 4950 5020 6f72 7267 6d61 5320 6174     QSPI Program Sta
   11788:	7472 6465 0d0a 0000 6c46 7361 2068 6164     rted....Flash da
   11798:	6174 7620 7265 6669 6369 7461 6f69 206e     ta verification 
   117a8:	6166 6c69 6465 202e 6441 7264 7365 3a73     failed. Address:
   117b8:	0020 0000 7257 7469 2065 202d 6552 6461      ...Write - Read
   117c8:	6920 2073 7573 6363 7365 6673 6c75 6920      is successful i
   117d8:	206e 5351 4950 4620 616c 6873 6d20 6d65     n QSPI Flash mem
   117e8:	726f 2079 0020 0000 2a2a 2a2a 2020 6143     ory  ...****  Ca
   117f8:	656c 646e 7261 5520 6470 7461 2065 6554     lendar Update Te
   11808:	7473 2a2a 002a 0000 6854 2075 754a 206c     st***...Thu Jul 
   11818:	3033 3120 3a36 3534 333a 2035 3032 3032     30 16:45:35 2020
   11828:	0000 0000 2a2a 2a2a 616c 7473 6420 7461     ....****last dat
   11838:	2061 6974 656d 003a 7909 6165 2072 003a     a time:..year :.
   11848:	6d09 6e6f 6874 3a20 0000 0000 6409 7961     .month :.....day
   11858:	203a 0000 6809 756f 2072 003a 6d09 6e69     : ...hour :..min
   11868:	3a20 0000 7309 6365 203a 0000 2a2a 7563      :...sec: ..**cu
   11878:	7272 6e65 2074 6164 6174 7420 6d69 3a65     rrent data time:
   11888:	0000 0000                                   ....

0001188c <_ZTV14Calendar_Class>:
	...
   11894:	1369 0000 13b9 0000                         i.......

0001189c <_ZTV17DateTimeLog_Class>:
	...
   118a4:	0871 0000 0871 0000                         q...q...

000118ac <_ZTV9CDC_Class>:
	...
   118b4:	1ac1 0000 1b75 0000 17d9 0000 1a89 0000     ....u...........
   118c4:	1bf1 0000 1a4d 0000 19bd 0000 1a0d 0000     ....M...........
   118d4:	1aa9 0000 1af9 0000                         ........

000118dc <_ZTV6Stream>:
	...
   118e4:	0871 0000 1cc1 0000 17d9 0000 17ed 0000     q...............
   118f4:	0871 0000 0871 0000 0871 0000 7830 2e25     q...q...q...0x%.
   11904:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   11914:	766f 0066                                   ovf.

00011918 <_ZTV5Print>:
	...
   11920:	0871 0000 1cc1 0000 17d9 0000 17ed 0000     q...............
   11930:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   11940:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   11950:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   11960:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   11970:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   11980:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   11990:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   119a0:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   119b0:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   119c0:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   119d0:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
   119e0:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.
   119f0:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
   11a00:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
   11a10:	6372 682f 6c61 715f 7073 5f69 7973 636e     rc/hal_qspi_sync
   11a20:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   11a30:	6c61 735f 6970 6d5f 615f 7973 636e 632e     al_spi_m_async.c
   11a40:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   11a50:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
   11a60:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
   11a70:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
   11a80:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
   11a90:	7369 2e74 0063 0000                         ist.c...

00011a98 <_map>:
   11a98:	0004 0000 0004 0000 0005 0000 0005 0000     ................
   11aa8:	0006 0000 0056 0000 0007 0000 0057 0000     ....V.......W...
   11ab8:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
   11ac8:	6369 632e 0000 0000                         ic.c....

00011ad0 <user_mux_confs>:
   11ad0:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

00011b14 <channel_confs>:
   11b14:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

00011b54 <interrupt_cfg>:
	...
   11bd4:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   11be4:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   11bf4:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   11c04:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   11c14:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   11c24:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   11c34:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00011c40 <sercomspi_regs>:
   11c40:	000c 0020 0000 0002 0000 0000 004f 01ff     .. .........O...
   11c50:	0c04 3000 0000 0200 0000 0000 4f00 ff00     ...0.........O..
   11c60:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   11c70:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   11c80:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   11c90:	1400 4300 1800 4300                         ...C...C

00011c98 <_usb_ep_cfgs>:
   11c98:	1d30 2000 0000 0000 0040 0000 1d70 2000     0.. ....@...p.. 
   11ca8:	1db0 2000 0040 0040 1df0 2000 1e30 2000     ... @.@.... 0.. 
   11cb8:	0040 0040 1e70 2000 1eb0 2000 0040 0040     @.@.p.. ... @.@.
   11cc8:	1ef0 2000 1f30 2000 0040 0040 0804 0000     ... 0.. @.@.....
   11cd8:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   11ce8:	6c70 775f 7464 632e 0000 0000               pl_wdt.c....

00011cf4 <n25q256a_interface>:
   11cf4:	cd51 0000 cdf5 0000 cf05 0000 d0bd 0000     Q...............
   11d04:	d14d 0000 2e2e 682f 6c70 702f 726f 2f74     M...../hpl/port/
   11d14:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   11d24:	2e2e 752f 6273 642f 7665 6369 2f65 7375     ../usb/device/us
   11d34:	6462 2e63 0063 0000 6f70 0077 0000 0000     bdc.c...pow.....
   11d44:	0000 0000                                   ....

00011d48 <TWO52>:
   11d48:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

00011d58 <_global_impure_ptr>:
   11d58:	0120 2000                                    .. 

00011d5c <_init>:
   11d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d5e:	bf00      	nop
   11d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11d62:	bc08      	pop	{r3}
   11d64:	469e      	mov	lr, r3
   11d66:	4770      	bx	lr

00011d68 <__init_array_start>:
   11d68:	00010be1 	.word	0x00010be1

00011d6c <__frame_dummy_init_array_entry>:
   11d6c:	00000289 00000355 00000739 00000909     ....U...9.......
   11d7c:	00000a1d 00000cbd 00001255 000012f1     ........U.......
   11d8c:	00001605 000017a1 00001c71 00002449     ........q...I$..

00011d9c <_fini>:
   11d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d9e:	bf00      	nop
   11da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11da2:	bc08      	pop	{r3}
   11da4:	469e      	mov	lr, r3
   11da6:	4770      	bx	lr

00011da8 <__fini_array_start>:
   11da8:	00000265 	.word	0x00000265
