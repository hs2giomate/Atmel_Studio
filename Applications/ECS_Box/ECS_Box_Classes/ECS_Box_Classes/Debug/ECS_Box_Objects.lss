
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013ec4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00013ec4  00013ec4  00023ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000058c  20000000  00013ecc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003058c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003058c  2**0
                  CONTENTS
  5 .bss          00001c44  20000590  00014460  00030590  2**3
                  ALLOC
  6 .stack        00010004  200021d4  000160a4  00030590  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003058c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000305ba  2**0
                  CONTENTS, READONLY
  9 .debug_info   00091979  00000000  00000000  00030613  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000d4fb  00000000  00000000  000c1f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002263f  00000000  00000000  000cf487  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003d80  00000000  00000000  000f1ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003928  00000000  00000000  000f5846  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005600c  00000000  00000000  000f916e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004b195  00000000  00000000  0014f17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00144119  00000000  00000000  0019a30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00010708  00000000  00000000  002de428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 21 01 20 bd 07 00 00 41 08 00 00 41 08 00 00     .!. ....A...A...
      10:	41 08 00 00 41 08 00 00 41 08 00 00 00 00 00 00     A...A...A.......
	...
      2c:	41 08 00 00 41 08 00 00 00 00 00 00 41 08 00 00     A...A.......A...
      3c:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
      4c:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
      5c:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
      6c:	09 8f 00 00 f9 7c 00 00 41 08 00 00 41 08 00 00     .....|..A...A...
      7c:	41 08 00 00 09 7d 00 00 19 7d 00 00 29 7d 00 00     A....}...}..)}..
      8c:	39 7d 00 00 41 08 00 00 41 08 00 00 41 08 00 00     9}..A...A...A...
      9c:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
      ac:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
      bc:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
      cc:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
      dc:	41 08 00 00 41 08 00 00 41 08 00 00 00 00 00 00     A...A...A.......
	...
      f4:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     104:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     114:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     124:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     134:	41 08 00 00 d1 a4 00 00 ed a4 00 00 09 a5 00 00     A...............
     144:	25 a5 00 00 41 a5 00 00 5d a5 00 00 79 a5 00 00     %...A...]...y...
     154:	95 a5 00 00 41 08 00 00 41 08 00 00 41 08 00 00     ....A...A...A...
     164:	41 08 00 00 b1 a5 00 00 cd a5 00 00 e9 a5 00 00     A...............
     174:	05 a6 00 00 41 08 00 00 89 71 00 00 6d e0 00 00     ....A....q..m...
     184:	7d e0 00 00 8d e0 00 00 9d e0 00 00 41 08 00 00     }...........A...
     194:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     1a4:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     1b4:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     1c4:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     1d4:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     1e4:	41 08 00 00 41 08 00 00 39 b7 00 00 55 b7 00 00     A...A...9...U...
     1f4:	71 b7 00 00 8d b7 00 00 a9 b7 00 00 c5 b7 00 00     q...............
     204:	e1 b7 00 00 41 08 00 00 41 08 00 00 41 08 00 00     ....A...A...A...
     214:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     224:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     234:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     244:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...
     254:	41 08 00 00 41 08 00 00 41 08 00 00 41 08 00 00     A...A...A...A...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000590 	.word	0x20000590
     280:	00000000 	.word	0x00000000
     284:	00013ecc 	.word	0x00013ecc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00013ecc 	.word	0x00013ecc
     2c4:	20000594 	.word	0x20000594
     2c8:	00013ecc 	.word	0x00013ecc
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
{
} //AMMC_Class
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	4618      	mov	r0, r3
     2dc:	370c      	adds	r7, #12
     2de:	46bd      	mov	sp, r7
     2e0:	bc80      	pop	{r7}
     2e2:	4770      	bx	lr

000002e4 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
{
} //~AMMC_Class
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	4618      	mov	r0, r3
     2f0:	370c      	adds	r7, #12
     2f2:	46bd      	mov	sp, r7
     2f4:	bc80      	pop	{r7}
     2f6:	4770      	bx	lr

000002f8 <_Z41__static_initialization_and_destruction_0ii>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	6039      	str	r1, [r7, #0]
     302:	687b      	ldr	r3, [r7, #4]
     304:	2b01      	cmp	r3, #1
     306:	d114      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     30e:	4293      	cmp	r3, r2
     310:	d10f      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     312:	480a      	ldr	r0, [pc, #40]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     316:	4798      	blx	r3
     318:	4a0a      	ldr	r2, [pc, #40]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     31a:	490b      	ldr	r1, [pc, #44]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     31c:	4807      	ldr	r0, [pc, #28]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     320:	4798      	blx	r3
AMMC_Class	ammc2;
     322:	480b      	ldr	r0, [pc, #44]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     326:	4798      	blx	r3
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     32a:	4907      	ldr	r1, [pc, #28]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     32c:	4808      	ldr	r0, [pc, #32]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     32e:	4b07      	ldr	r3, [pc, #28]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     330:	4798      	blx	r3
     332:	bf00      	nop
     334:	3708      	adds	r7, #8
     336:	46bd      	mov	sp, r7
     338:	bd80      	pop	{r7, pc}
     33a:	bf00      	nop
     33c:	200005ac 	.word	0x200005ac
     340:	000002d1 	.word	0x000002d1
     344:	20000000 	.word	0x20000000
     348:	000002e5 	.word	0x000002e5
     34c:	000105fd 	.word	0x000105fd
     350:	200005b0 	.word	0x200005b0

00000354 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     354:	b580      	push	{r7, lr}
     356:	af00      	add	r7, sp, #0
     358:	f64f 71ff 	movw	r1, #65535	; 0xffff
     35c:	2001      	movs	r0, #1
     35e:	4b01      	ldr	r3, [pc, #4]	; (364 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     360:	4798      	blx	r3
     362:	bd80      	pop	{r7, pc}
     364:	000002f9 	.word	0x000002f9

00000368 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
     372:	687b      	ldr	r3, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
     376:	687b      	ldr	r3, [r7, #4]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	00012984 	.word	0x00012984

00000388 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
     390:	4a04      	ldr	r2, [pc, #16]	; (3a4 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
     392:	687b      	ldr	r3, [r7, #4]
     394:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
     396:	687b      	ldr	r3, [r7, #4]
     398:	4618      	mov	r0, r3
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	00012984 	.word	0x00012984

000003a8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
     3a8:	b5b0      	push	{r4, r5, r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     3b2:	4b0a      	ldr	r3, [pc, #40]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4798      	blx	r3
     3b8:	4604      	mov	r4, r0
     3ba:	460d      	mov	r5, r1
     3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3be:	6838      	ldr	r0, [r7, #0]
     3c0:	4798      	blx	r3
     3c2:	4602      	mov	r2, r0
     3c4:	460b      	mov	r3, r1
     3c6:	4620      	mov	r0, r4
     3c8:	4629      	mov	r1, r5
     3ca:	4c05      	ldr	r4, [pc, #20]	; (3e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
     3cc:	47a0      	blx	r4
     3ce:	4603      	mov	r3, r0
     3d0:	460c      	mov	r4, r1
    }
     3d2:	4618      	mov	r0, r3
     3d4:	4621      	mov	r1, r4
     3d6:	3708      	adds	r7, #8
     3d8:	46bd      	mov	sp, r7
     3da:	bdb0      	pop	{r4, r5, r7, pc}
     3dc:	000119f9 	.word	0x000119f9
     3e0:	0001060d 	.word	0x0001060d

000003e4 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
     3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3e8:	b085      	sub	sp, #20
     3ea:	af00      	add	r7, sp, #0
     3ec:	6078      	str	r0, [r7, #4]
     3ee:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
     3f0:	2300      	movs	r3, #0
     3f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     3f4:	2300      	movs	r3, #0
     3f6:	73bb      	strb	r3, [r7, #14]
     3f8:	7bbb      	ldrb	r3, [r7, #14]
     3fa:	2b02      	cmp	r3, #2
     3fc:	d86d      	bhi.n	4da <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
     3fe:	7bbb      	ldrb	r3, [r7, #14]
     400:	f1c3 0402 	rsb	r4, r3, #2
     404:	4b3c      	ldr	r3, [pc, #240]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     406:	6838      	ldr	r0, [r7, #0]
     408:	4798      	blx	r3
     40a:	4680      	mov	r8, r0
     40c:	4689      	mov	r9, r1
     40e:	7bbb      	ldrb	r3, [r7, #14]
     410:	f1c3 0302 	rsb	r3, r3, #2
     414:	4619      	mov	r1, r3
     416:	200a      	movs	r0, #10
     418:	4b38      	ldr	r3, [pc, #224]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     41a:	4798      	blx	r3
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4d37      	ldr	r5, [pc, #220]	; (500 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
     422:	4640      	mov	r0, r8
     424:	4649      	mov	r1, r9
     426:	47a8      	blx	r5
     428:	4602      	mov	r2, r0
     42a:	460b      	mov	r3, r1
     42c:	4611      	mov	r1, r2
     42e:	461a      	mov	r2, r3
     430:	4b34      	ldr	r3, [pc, #208]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     432:	4608      	mov	r0, r1
     434:	4611      	mov	r1, r2
     436:	4798      	blx	r3
     438:	4603      	mov	r3, r0
     43a:	b2da      	uxtb	r2, r3
     43c:	f107 0310 	add.w	r3, r7, #16
     440:	4423      	add	r3, r4
     442:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
     446:	7bbb      	ldrb	r3, [r7, #14]
     448:	f1c3 0302 	rsb	r3, r3, #2
     44c:	f107 0210 	add.w	r2, r7, #16
     450:	4413      	add	r3, r2
     452:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     456:	461a      	mov	r2, r3
     458:	4b2b      	ldr	r3, [pc, #172]	; (508 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
     45a:	4610      	mov	r0, r2
     45c:	4798      	blx	r3
     45e:	4605      	mov	r5, r0
     460:	460e      	mov	r6, r1
     462:	7bbb      	ldrb	r3, [r7, #14]
     464:	f1c3 0302 	rsb	r3, r3, #2
     468:	4619      	mov	r1, r3
     46a:	200a      	movs	r0, #10
     46c:	4b23      	ldr	r3, [pc, #140]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     46e:	4798      	blx	r3
     470:	4602      	mov	r2, r0
     472:	460b      	mov	r3, r1
     474:	4c25      	ldr	r4, [pc, #148]	; (50c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
     476:	4628      	mov	r0, r5
     478:	4631      	mov	r1, r6
     47a:	47a0      	blx	r4
     47c:	4603      	mov	r3, r0
     47e:	460c      	mov	r4, r1
     480:	461d      	mov	r5, r3
     482:	4626      	mov	r6, r4
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     486:	6838      	ldr	r0, [r7, #0]
     488:	4798      	blx	r3
     48a:	4c21      	ldr	r4, [pc, #132]	; (510 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
     48c:	462a      	mov	r2, r5
     48e:	4633      	mov	r3, r6
     490:	47a0      	blx	r4
     492:	4603      	mov	r3, r0
     494:	460c      	mov	r4, r1
     496:	4619      	mov	r1, r3
     498:	4622      	mov	r2, r4
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     49c:	4608      	mov	r0, r1
     49e:	4611      	mov	r1, r2
     4a0:	4798      	blx	r3
     4a2:	4603      	mov	r3, r0
     4a4:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
     4a6:	7bbb      	ldrb	r3, [r7, #14]
     4a8:	f1c3 0302 	rsb	r3, r3, #2
     4ac:	f107 0210 	add.w	r2, r7, #16
     4b0:	4413      	add	r3, r2
     4b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     4b6:	461a      	mov	r2, r3
     4b8:	7bbb      	ldrb	r3, [r7, #14]
     4ba:	4619      	mov	r1, r3
     4bc:	009b      	lsls	r3, r3, #2
     4be:	1acb      	subs	r3, r1, r3
     4c0:	3306      	adds	r3, #6
     4c2:	fa02 f303 	lsl.w	r3, r2, r3
     4c6:	b25a      	sxtb	r2, r3
     4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     4cc:	4313      	orrs	r3, r2
     4ce:	b25b      	sxtb	r3, r3
     4d0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     4d2:	7bbb      	ldrb	r3, [r7, #14]
     4d4:	3301      	adds	r3, #1
     4d6:	73bb      	strb	r3, [r7, #14]
     4d8:	e78e      	b.n	3f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	7bfa      	ldrb	r2, [r7, #15]
     4e2:	4611      	mov	r1, r2
     4e4:	6878      	ldr	r0, [r7, #4]
     4e6:	4798      	blx	r3
     4e8:	4603      	mov	r3, r0
     4ea:	73fb      	strb	r3, [r7, #15]
	return result;
     4ec:	7bfb      	ldrb	r3, [r7, #15]
	
}
     4ee:	4618      	mov	r0, r3
     4f0:	3714      	adds	r7, #20
     4f2:	46bd      	mov	sp, r7
     4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4f8:	000119d9 	.word	0x000119d9
     4fc:	000003a9 	.word	0x000003a9
     500:	00011d19 	.word	0x00011d19
     504:	00012025 	.word	0x00012025
     508:	000119f9 	.word	0x000119f9
     50c:	00011ac5 	.word	0x00011ac5
     510:	0001175d 	.word	0x0001175d

00000514 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
     514:	b480      	push	{r7}
     516:	b085      	sub	sp, #20
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	460b      	mov	r3, r1
     51e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
     520:	2300      	movs	r3, #0
     522:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     524:	2300      	movs	r3, #0
     526:	60bb      	str	r3, [r7, #8]
     528:	68bb      	ldr	r3, [r7, #8]
     52a:	2b07      	cmp	r3, #7
     52c:	dc13      	bgt.n	556 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
     52e:	7bfb      	ldrb	r3, [r7, #15]
     530:	005b      	lsls	r3, r3, #1
     532:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
     534:	78fa      	ldrb	r2, [r7, #3]
     536:	68bb      	ldr	r3, [r7, #8]
     538:	fa42 f303 	asr.w	r3, r2, r3
     53c:	b25b      	sxtb	r3, r3
     53e:	f003 0301 	and.w	r3, r3, #1
     542:	b25a      	sxtb	r2, r3
     544:	f997 300f 	ldrsb.w	r3, [r7, #15]
     548:	4313      	orrs	r3, r2
     54a:	b25b      	sxtb	r3, r3
     54c:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     54e:	68bb      	ldr	r3, [r7, #8]
     550:	3301      	adds	r3, #1
     552:	60bb      	str	r3, [r7, #8]
     554:	e7e8      	b.n	528 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
     556:	7bfb      	ldrb	r3, [r7, #15]
}
     558:	4618      	mov	r0, r3
     55a:	3714      	adds	r7, #20
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr

00000562 <_ZN14Protocol_ClassC2Ev>:
		{
				ch=0xff;
			usb.println("Command I: Increment data\n\r>");
			BigCounter.Word32++;
			TXBuffer[0] = BigCounter.PayLoad[1];
			TXBuffer[1] = BigCounter.PayLoad[2];
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
			TXBuffer[2] = BigCounter.PayLoad[3];
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
     56a:	6039      	str	r1, [r7, #0]
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	681a      	ldr	r2, [r3, #0]
			TXBuffer[3] = BigCounter.PayLoad[3];               // copy the LSB to the label for testing purposes
     570:	687b      	ldr	r3, [r7, #4]
     572:	601a      	str	r2, [r3, #0]
     574:	687b      	ldr	r3, [r7, #4]
     576:	681b      	ldr	r3, [r3, #0]
     578:	3b0c      	subs	r3, #12
			
			cpu_irq_disable();
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	461a      	mov	r2, r3
     57e:	687b      	ldr	r3, [r7, #4]
			HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
     580:	4413      	add	r3, r2
     582:	683a      	ldr	r2, [r7, #0]
     584:	6852      	ldr	r2, [r2, #4]
     586:	601a      	str	r2, [r3, #0]
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4618      	mov	r0, r3
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	bc80      	pop	{r7}
			cpu_irq_enable();
     592:	4770      	bx	lr

00000594 <_ZN15ARINC_InterfaceC1Ev>:
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	f503 7340 	add.w	r3, r3, #768	; 0x300
     5a2:	4618      	mov	r0, r3
			//PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
		}
		
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
     5a4:	4b0e      	ldr	r3, [pc, #56]	; (5e0 <_ZN15ARINC_InterfaceC1Ev+0x4c>)
     5a6:	4798      	blx	r3
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	4a0e      	ldr	r2, [pc, #56]	; (5e4 <_ZN15ARINC_InterfaceC1Ev+0x50>)
     5ac:	4611      	mov	r1, r2
     5ae:	4618      	mov	r0, r3
     5b0:	4b0d      	ldr	r3, [pc, #52]	; (5e8 <_ZN15ARINC_InterfaceC1Ev+0x54>)
     5b2:	4798      	blx	r3
     5b4:	4a0d      	ldr	r2, [pc, #52]	; (5ec <_ZN15ARINC_InterfaceC1Ev+0x58>)
     5b6:	687b      	ldr	r3, [r7, #4]
		
		if (newMessageR1)
     5b8:	601a      	str	r2, [r3, #0]
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
     5c0:	4a0b      	ldr	r2, [pc, #44]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
     5c2:	601a      	str	r2, [r3, #0]
		{
			reading=ReadRXBuffer();
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
     5ca:	4618      	mov	r0, r3
     5cc:	4b09      	ldr	r3, [pc, #36]	; (5f4 <_ZN15ARINC_InterfaceC1Ev+0x60>)
			newMessageR1=false;
     5ce:	4798      	blx	r3
     5d0:	4a09      	ldr	r2, [pc, #36]	; (5f8 <_ZN15ARINC_InterfaceC1Ev+0x64>)
     5d2:	687b      	ldr	r3, [r7, #4]
		}
	}
     5d4:	6013      	str	r3, [r2, #0]
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	4618      	mov	r0, r3
     5da:	3708      	adds	r7, #8
     5dc:	46bd      	mov	sp, r7
     5de:	bd80      	pop	{r7, pc}
     5e0:	00000369 	.word	0x00000369
     5e4:	00013404 	.word	0x00013404
     5e8:	00000563 	.word	0x00000563
     5ec:	000133dc 	.word	0x000133dc
     5f0:	000133f8 	.word	0x000133f8
     5f4:	00000749 	.word	0x00000749
     5f8:	200005b8 	.word	0x200005b8

000005fc <_ZN15ARINC_InterfaceD1Ev>:
     5fc:	b580      	push	{r7, lr}
     5fe:	b082      	sub	sp, #8
ARINC_Interface::~ARINC_Interface()
     600:	af00      	add	r7, sp, #0
     602:	6078      	str	r0, [r7, #4]
     604:	4a0f      	ldr	r2, [pc, #60]	; (644 <_ZN15ARINC_InterfaceD1Ev+0x48>)
     606:	687b      	ldr	r3, [r7, #4]
     608:	601a      	str	r2, [r3, #0]
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	f503 7340 	add.w	r3, r3, #768	; 0x300
     610:	4a0d      	ldr	r2, [pc, #52]	; (648 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     612:	601a      	str	r2, [r3, #0]
     614:	687b      	ldr	r3, [r7, #4]
     616:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
     61a:	4618      	mov	r0, r3
     61c:	4b0b      	ldr	r3, [pc, #44]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x50>)
     61e:	4798      	blx	r3
     620:	687b      	ldr	r3, [r7, #4]
     622:	4a0b      	ldr	r2, [pc, #44]	; (650 <_ZN15ARINC_InterfaceD1Ev+0x54>)
     624:	4611      	mov	r1, r2
     626:	4618      	mov	r0, r3
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <_ZN15ARINC_InterfaceD1Ev+0x58>)
     62a:	4798      	blx	r3
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	f503 7340 	add.w	r3, r3, #768	; 0x300
     632:	4618      	mov	r0, r3
     634:	4b08      	ldr	r3, [pc, #32]	; (658 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
     636:	4798      	blx	r3
} //~ARINC_Interface
     638:	687b      	ldr	r3, [r7, #4]
     63a:	4618      	mov	r0, r3
     63c:	3708      	adds	r7, #8
     63e:	46bd      	mov	sp, r7
     640:	bd80      	pop	{r7, pc}
     642:	bf00      	nop
     644:	000133dc 	.word	0x000133dc
     648:	000133f8 	.word	0x000133f8
     64c:	00000769 	.word	0x00000769
     650:	00013404 	.word	0x00013404
     654:	00000789 	.word	0x00000789
     658:	00000389 	.word	0x00000389

0000065c <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
     65c:	b580      	push	{r7, lr}
     65e:	b082      	sub	sp, #8
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
     664:	6878      	ldr	r0, [r7, #4]
     666:	4b06      	ldr	r3, [pc, #24]	; (680 <_ZN15ARINC_InterfaceD0Ev+0x24>)
     668:	4798      	blx	r3
     66a:	f44f 7143 	mov.w	r1, #780	; 0x30c
     66e:	6878      	ldr	r0, [r7, #4]
     670:	4b04      	ldr	r3, [pc, #16]	; (684 <_ZN15ARINC_InterfaceD0Ev+0x28>)
     672:	4798      	blx	r3
     674:	687b      	ldr	r3, [r7, #4]
     676:	4618      	mov	r0, r3
     678:	3708      	adds	r7, #8
     67a:	46bd      	mov	sp, r7
     67c:	bd80      	pop	{r7, pc}
     67e:	bf00      	nop
     680:	000005fd 	.word	0x000005fd
     684:	00010609 	.word	0x00010609

00000688 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
     688:	b480      	push	{r7}
     68a:	b085      	sub	sp, #20
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
     690:	460b      	mov	r3, r1
     692:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     694:	2300      	movs	r3, #0
     696:	73fb      	strb	r3, [r7, #15]
     698:	7bfb      	ldrb	r3, [r7, #15]
     69a:	2b1f      	cmp	r3, #31
     69c:	dc1f      	bgt.n	6de <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	f893 219d 	ldrb.w	r2, [r3, #413]	; 0x19d
     6a4:	7bfb      	ldrb	r3, [r7, #15]
     6a6:	4413      	add	r3, r2
     6a8:	b2db      	uxtb	r3, r3
     6aa:	f003 031f 	and.w	r3, r3, #31
     6ae:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
     6b0:	7bbb      	ldrb	r3, [r7, #14]
     6b2:	687a      	ldr	r2, [r7, #4]
     6b4:	009b      	lsls	r3, r3, #2
     6b6:	4413      	add	r3, r2
     6b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
     6bc:	78fa      	ldrb	r2, [r7, #3]
     6be:	429a      	cmp	r2, r3
     6c0:	d109      	bne.n	6d6 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4e>
			data=(uint32_t*)receiverBuffer[j];
     6c2:	7bbb      	ldrb	r3, [r7, #14]
     6c4:	3306      	adds	r3, #6
     6c6:	009b      	lsls	r3, r3, #2
     6c8:	687a      	ldr	r2, [r7, #4]
     6ca:	4413      	add	r3, r2
     6cc:	3307      	adds	r3, #7
     6ce:	60bb      	str	r3, [r7, #8]
			return *data;
     6d0:	68bb      	ldr	r3, [r7, #8]
     6d2:	681b      	ldr	r3, [r3, #0]
     6d4:	e004      	b.n	6e0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x58>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     6d6:	7bfb      	ldrb	r3, [r7, #15]
     6d8:	3301      	adds	r3, #1
     6da:	73fb      	strb	r3, [r7, #15]
     6dc:	e7dc      	b.n	698 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
	return 0;
     6de:	2300      	movs	r3, #0
}
     6e0:	4618      	mov	r0, r3
     6e2:	3714      	adds	r7, #20
     6e4:	46bd      	mov	sp, r7
     6e6:	bc80      	pop	{r7}
     6e8:	4770      	bx	lr
	...

000006ec <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

     6ec:	b580      	push	{r7, lr}
     6ee:	b082      	sub	sp, #8
     6f0:	af00      	add	r7, sp, #0
     6f2:	6078      	str	r0, [r7, #4]
     6f4:	6039      	str	r1, [r7, #0]
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	2b01      	cmp	r3, #1
     6fa:	d10c      	bne.n	716 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
     702:	4293      	cmp	r3, r2
     704:	d107      	bne.n	716 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     706:	4806      	ldr	r0, [pc, #24]	; (720 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     708:	4b06      	ldr	r3, [pc, #24]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     70a:	4798      	blx	r3
     70c:	4a06      	ldr	r2, [pc, #24]	; (728 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     70e:	4907      	ldr	r1, [pc, #28]	; (72c <_Z41__static_initialization_and_destruction_0ii+0x40>)
     710:	4803      	ldr	r0, [pc, #12]	; (720 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     712:	4b07      	ldr	r3, [pc, #28]	; (730 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     714:	4798      	blx	r3
     716:	bf00      	nop
     718:	3708      	adds	r7, #8
     71a:	46bd      	mov	sp, r7
     71c:	bd80      	pop	{r7, pc}
     71e:	bf00      	nop
     720:	200005bc 	.word	0x200005bc
     724:	00000595 	.word	0x00000595
     728:	20000000 	.word	0x20000000
     72c:	000005fd 	.word	0x000005fd
     730:	000105fd 	.word	0x000105fd

00000734 <_GLOBAL__sub_I_HexSymbols>:
     734:	b580      	push	{r7, lr}
     736:	af00      	add	r7, sp, #0
     738:	f64f 71ff 	movw	r1, #65535	; 0xffff
     73c:	2001      	movs	r0, #1
     73e:	4b01      	ldr	r3, [pc, #4]	; (744 <_GLOBAL__sub_I_HexSymbols+0x10>)
     740:	4798      	blx	r3
     742:	bd80      	pop	{r7, pc}
     744:	000006ed 	.word	0x000006ed

00000748 <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
     748:	b580      	push	{r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
     750:	687b      	ldr	r3, [r7, #4]
     752:	4618      	mov	r0, r3
     754:	4b03      	ldr	r3, [pc, #12]	; (764 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
     756:	4798      	blx	r3
{
} //Holt_3593_Class
     758:	687b      	ldr	r3, [r7, #4]
     75a:	4618      	mov	r0, r3
     75c:	3708      	adds	r7, #8
     75e:	46bd      	mov	sp, r7
     760:	bd80      	pop	{r7, pc}
     762:	bf00      	nop
     764:	00001a8d 	.word	0x00001a8d

00000768 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
     768:	b580      	push	{r7, lr}
     76a:	b082      	sub	sp, #8
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
     770:	687b      	ldr	r3, [r7, #4]
     772:	4618      	mov	r0, r3
     774:	4b03      	ldr	r3, [pc, #12]	; (784 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
     776:	4798      	blx	r3
{
} //~Holt_3593_Class
     778:	687b      	ldr	r3, [r7, #4]
     77a:	4618      	mov	r0, r3
     77c:	3708      	adds	r7, #8
     77e:	46bd      	mov	sp, r7
     780:	bd80      	pop	{r7, pc}
     782:	bf00      	nop
     784:	00001aad 	.word	0x00001aad

00000788 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
     788:	b480      	push	{r7}
     78a:	b083      	sub	sp, #12
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
     790:	6039      	str	r1, [r7, #0]
     792:	683b      	ldr	r3, [r7, #0]
     794:	681a      	ldr	r2, [r3, #0]
     796:	687b      	ldr	r3, [r7, #4]
     798:	601a      	str	r2, [r3, #0]
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	681b      	ldr	r3, [r3, #0]
     79e:	3b0c      	subs	r3, #12
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	461a      	mov	r2, r3
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	4413      	add	r3, r2
     7a8:	683a      	ldr	r2, [r7, #0]
     7aa:	6852      	ldr	r2, [r2, #4]
     7ac:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	4618      	mov	r0, r3
     7b2:	370c      	adds	r7, #12
     7b4:	46bd      	mov	sp, r7
     7b6:	bc80      	pop	{r7}
     7b8:	4770      	bx	lr
	...

000007bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     7bc:	b580      	push	{r7, lr}
     7be:	b082      	sub	sp, #8
     7c0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     7c2:	4b16      	ldr	r3, [pc, #88]	; (81c <Reset_Handler+0x60>)
     7c4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     7c6:	4b16      	ldr	r3, [pc, #88]	; (820 <Reset_Handler+0x64>)
     7c8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     7ca:	687a      	ldr	r2, [r7, #4]
     7cc:	683b      	ldr	r3, [r7, #0]
     7ce:	429a      	cmp	r2, r3
     7d0:	d00c      	beq.n	7ec <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     7d2:	e007      	b.n	7e4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     7d4:	683b      	ldr	r3, [r7, #0]
     7d6:	1d1a      	adds	r2, r3, #4
     7d8:	603a      	str	r2, [r7, #0]
     7da:	687a      	ldr	r2, [r7, #4]
     7dc:	1d11      	adds	r1, r2, #4
     7de:	6079      	str	r1, [r7, #4]
     7e0:	6812      	ldr	r2, [r2, #0]
     7e2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     7e4:	683b      	ldr	r3, [r7, #0]
     7e6:	4a0f      	ldr	r2, [pc, #60]	; (824 <Reset_Handler+0x68>)
     7e8:	4293      	cmp	r3, r2
     7ea:	d3f3      	bcc.n	7d4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7ec:	4b0e      	ldr	r3, [pc, #56]	; (828 <Reset_Handler+0x6c>)
     7ee:	603b      	str	r3, [r7, #0]
     7f0:	e004      	b.n	7fc <Reset_Handler+0x40>
                *pDest++ = 0;
     7f2:	683b      	ldr	r3, [r7, #0]
     7f4:	1d1a      	adds	r2, r3, #4
     7f6:	603a      	str	r2, [r7, #0]
     7f8:	2200      	movs	r2, #0
     7fa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     7fc:	683b      	ldr	r3, [r7, #0]
     7fe:	4a0b      	ldr	r2, [pc, #44]	; (82c <Reset_Handler+0x70>)
     800:	4293      	cmp	r3, r2
     802:	d3f6      	bcc.n	7f2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     804:	4b0a      	ldr	r3, [pc, #40]	; (830 <Reset_Handler+0x74>)
     806:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     808:	4a0a      	ldr	r2, [pc, #40]	; (834 <Reset_Handler+0x78>)
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     810:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     812:	4b09      	ldr	r3, [pc, #36]	; (838 <Reset_Handler+0x7c>)
     814:	4798      	blx	r3

        /* Branch to main function */
        main();
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <Reset_Handler+0x80>)
     818:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     81a:	e7fe      	b.n	81a <Reset_Handler+0x5e>
     81c:	00013ecc 	.word	0x00013ecc
     820:	20000000 	.word	0x20000000
     824:	2000058c 	.word	0x2000058c
     828:	20000590 	.word	0x20000590
     82c:	200021d4 	.word	0x200021d4
     830:	00000000 	.word	0x00000000
     834:	e000ed00 	.word	0xe000ed00
     838:	00012555 	.word	0x00012555
     83c:	00001781 	.word	0x00001781

00000840 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     840:	b480      	push	{r7}
     842:	af00      	add	r7, sp, #0
        while (1) {
     844:	e7fe      	b.n	844 <Dummy_Handler+0x4>

00000846 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
     846:	b480      	push	{r7}
     848:	b083      	sub	sp, #12
     84a:	af00      	add	r7, sp, #0
     84c:	6078      	str	r0, [r7, #4]
    return (void *)0;
     84e:	2300      	movs	r3, #0
	}
     850:	4618      	mov	r0, r3
     852:	370c      	adds	r7, #12
     854:	46bd      	mov	sp, r7
     856:	bc80      	pop	{r7}
     858:	4770      	bx	lr

0000085a <free>:
//............................................................................
extern "C" void free(void *)
	{
     85a:	b480      	push	{r7}
     85c:	b083      	sub	sp, #12
     85e:	af00      	add	r7, sp, #0
     860:	6078      	str	r0, [r7, #4]
	}
     862:	bf00      	nop
     864:	370c      	adds	r7, #12
     866:	46bd      	mov	sp, r7
     868:	bc80      	pop	{r7}
     86a:	4770      	bx	lr

0000086c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
     86c:	b480      	push	{r7}
     86e:	af00      	add	r7, sp, #0
		}
     870:	bf00      	nop
     872:	46bd      	mov	sp, r7
     874:	bc80      	pop	{r7}
     876:	4770      	bx	lr

00000878 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
     87e:	6078      	str	r0, [r7, #4]
	free(p);
     880:	6878      	ldr	r0, [r7, #4]
     882:	4b03      	ldr	r3, [pc, #12]	; (890 <_ZdlPv+0x18>)
     884:	4798      	blx	r3
	}
     886:	bf00      	nop
     888:	3708      	adds	r7, #8
     88a:	46bd      	mov	sp, r7
     88c:	bd80      	pop	{r7, pc}
     88e:	bf00      	nop
     890:	0000085b 	.word	0x0000085b

00000894 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
     894:	b480      	push	{r7}
     896:	b083      	sub	sp, #12
     898:	af00      	add	r7, sp, #0
     89a:	6078      	str	r0, [r7, #4]
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	4618      	mov	r0, r3
     8a0:	370c      	adds	r7, #12
     8a2:	46bd      	mov	sp, r7
     8a4:	bc80      	pop	{r7}
     8a6:	4770      	bx	lr

000008a8 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
     8a8:	b480      	push	{r7}
     8aa:	b083      	sub	sp, #12
     8ac:	af00      	add	r7, sp, #0
     8ae:	6078      	str	r0, [r7, #4]
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	4618      	mov	r0, r3
     8b4:	370c      	adds	r7, #12
     8b6:	46bd      	mov	sp, r7
     8b8:	bc80      	pop	{r7}
     8ba:	4770      	bx	lr

000008bc <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
     8bc:	b580      	push	{r7, lr}
     8be:	b082      	sub	sp, #8
     8c0:	af00      	add	r7, sp, #0
     8c2:	6078      	str	r0, [r7, #4]
     8c4:	6039      	str	r1, [r7, #0]
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	2b01      	cmp	r3, #1
     8ca:	d10c      	bne.n	8e6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8cc:	683b      	ldr	r3, [r7, #0]
     8ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
     8d2:	4293      	cmp	r3, r2
     8d4:	d107      	bne.n	8e6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8d6:	4806      	ldr	r0, [pc, #24]	; (8f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8d8:	4b06      	ldr	r3, [pc, #24]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     8da:	4798      	blx	r3
     8dc:	4a06      	ldr	r2, [pc, #24]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     8de:	4907      	ldr	r1, [pc, #28]	; (8fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
     8e0:	4803      	ldr	r0, [pc, #12]	; (8f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8e2:	4b07      	ldr	r3, [pc, #28]	; (900 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     8e4:	4798      	blx	r3
     8e6:	bf00      	nop
     8e8:	3708      	adds	r7, #8
     8ea:	46bd      	mov	sp, r7
     8ec:	bd80      	pop	{r7, pc}
     8ee:	bf00      	nop
     8f0:	200008c8 	.word	0x200008c8
     8f4:	00000895 	.word	0x00000895
     8f8:	20000000 	.word	0x20000000
     8fc:	000008a9 	.word	0x000008a9
     900:	000105fd 	.word	0x000105fd

00000904 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
     904:	b580      	push	{r7, lr}
     906:	af00      	add	r7, sp, #0
     908:	f64f 71ff 	movw	r1, #65535	; 0xffff
     90c:	2001      	movs	r0, #1
     90e:	4b01      	ldr	r3, [pc, #4]	; (914 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
     910:	4798      	blx	r3
     912:	bd80      	pop	{r7, pc}
     914:	000008bd 	.word	0x000008bd

00000918 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     918:	b480      	push	{r7}
     91a:	b083      	sub	sp, #12
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	6039      	str	r1, [r7, #0]
	{
	data = v;
     922:	687b      	ldr	r3, [r7, #4]
     924:	683a      	ldr	r2, [r7, #0]
     926:	601a      	str	r2, [r3, #0]
	}
     928:	687b      	ldr	r3, [r7, #4]
     92a:	4618      	mov	r0, r3
     92c:	370c      	adds	r7, #12
     92e:	46bd      	mov	sp, r7
     930:	bc80      	pop	{r7}
     932:	4770      	bx	lr

00000934 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     934:	b580      	push	{r7, lr}
     936:	b082      	sub	sp, #8
     938:	af00      	add	r7, sp, #0
     93a:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     942:	801a      	strh	r2, [r3, #0]
     944:	687b      	ldr	r3, [r7, #4]
     946:	f64f 72ff 	movw	r2, #65535	; 0xffff
     94a:	805a      	strh	r2, [r3, #2]
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	2200      	movs	r2, #0
     950:	605a      	str	r2, [r3, #4]
     952:	687b      	ldr	r3, [r7, #4]
     954:	3308      	adds	r3, #8
     956:	2100      	movs	r1, #0
     958:	4618      	mov	r0, r3
     95a:	4b05      	ldr	r3, [pc, #20]	; (970 <_ZN5eventC1Ev+0x3c>)
     95c:	4798      	blx	r3
     95e:	687b      	ldr	r3, [r7, #4]
     960:	2200      	movs	r2, #0
     962:	60da      	str	r2, [r3, #12]
	{
		
	}
     964:	687b      	ldr	r3, [r7, #4]
     966:	4618      	mov	r0, r3
     968:	3708      	adds	r7, #8
     96a:	46bd      	mov	sp, r7
     96c:	bd80      	pop	{r7, pc}
     96e:	bf00      	nop
     970:	00000919 	.word	0x00000919

00000974 <_ZN18EventHandler_ClassC1Ev>:
{
	eventTimer.ticks++;
}

// default constructor
EventHandler_Class::EventHandler_Class()
     974:	b580      	push	{r7, lr}
     976:	b082      	sub	sp, #8
     978:	af00      	add	r7, sp, #0
     97a:	6078      	str	r0, [r7, #4]
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	4618      	mov	r0, r3
     980:	4b06      	ldr	r3, [pc, #24]	; (99c <_ZN18EventHandler_ClassC1Ev+0x28>)
     982:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
     984:	4a06      	ldr	r2, [pc, #24]	; (9a0 <_ZN18EventHandler_ClassC1Ev+0x2c>)
     986:	687b      	ldr	r3, [r7, #4]
     988:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	4a05      	ldr	r2, [pc, #20]	; (9a4 <_ZN18EventHandler_ClassC1Ev+0x30>)
     98e:	635a      	str	r2, [r3, #52]	; 0x34
} //EventHandler_Class
     990:	687b      	ldr	r3, [r7, #4]
     992:	4618      	mov	r0, r3
     994:	3708      	adds	r7, #8
     996:	46bd      	mov	sp, r7
     998:	bd80      	pop	{r7, pc}
     99a:	bf00      	nop
     99c:	00000935 	.word	0x00000935
     9a0:	200010d0 	.word	0x200010d0
     9a4:	200008cc 	.word	0x200008cc

000009a8 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
     9a8:	b480      	push	{r7}
     9aa:	b083      	sub	sp, #12
     9ac:	af00      	add	r7, sp, #0
     9ae:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     9b0:	4a04      	ldr	r2, [pc, #16]	; (9c4 <_ZN18EventHandler_ClassD1Ev+0x1c>)
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	4618      	mov	r0, r3
     9ba:	370c      	adds	r7, #12
     9bc:	46bd      	mov	sp, r7
     9be:	bc80      	pop	{r7}
     9c0:	4770      	bx	lr
     9c2:	bf00      	nop
     9c4:	200010d0 	.word	0x200010d0

000009c8 <_Z41__static_initialization_and_destruction_0ii>:
	return	(uint32_t)eventsInUse;
	
}


     9c8:	b5b0      	push	{r4, r5, r7, lr}
     9ca:	b082      	sub	sp, #8
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
     9d0:	6039      	str	r1, [r7, #0]
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	2b01      	cmp	r3, #1
     9d6:	d117      	bne.n	a08 <_Z41__static_initialization_and_destruction_0ii+0x40>
     9d8:	683b      	ldr	r3, [r7, #0]
     9da:	f64f 72ff 	movw	r2, #65535	; 0xffff
     9de:	4293      	cmp	r3, r2
     9e0:	d112      	bne.n	a08 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
     9e2:	4b0b      	ldr	r3, [pc, #44]	; (a10 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     9e4:	247f      	movs	r4, #127	; 0x7f
     9e6:	461d      	mov	r5, r3
     9e8:	2c00      	cmp	r4, #0
     9ea:	db05      	blt.n	9f8 <_Z41__static_initialization_and_destruction_0ii+0x30>
     9ec:	4628      	mov	r0, r5
     9ee:	4b09      	ldr	r3, [pc, #36]	; (a14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     9f0:	4798      	blx	r3
     9f2:	3510      	adds	r5, #16
     9f4:	3c01      	subs	r4, #1
     9f6:	e7f7      	b.n	9e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
     9f8:	4807      	ldr	r0, [pc, #28]	; (a18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9fa:	4b08      	ldr	r3, [pc, #32]	; (a1c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     9fc:	4798      	blx	r3
     9fe:	4a08      	ldr	r2, [pc, #32]	; (a20 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     a00:	4908      	ldr	r1, [pc, #32]	; (a24 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     a02:	4805      	ldr	r0, [pc, #20]	; (a18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     a04:	4b08      	ldr	r3, [pc, #32]	; (a28 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     a06:	4798      	blx	r3
     a08:	bf00      	nop
     a0a:	3708      	adds	r7, #8
     a0c:	46bd      	mov	sp, r7
     a0e:	bdb0      	pop	{r4, r5, r7, pc}
     a10:	200008cc 	.word	0x200008cc
     a14:	00000935 	.word	0x00000935
     a18:	200010e0 	.word	0x200010e0
     a1c:	00000975 	.word	0x00000975
     a20:	20000000 	.word	0x20000000
     a24:	000009a9 	.word	0x000009a9
     a28:	000105fd 	.word	0x000105fd

00000a2c <_GLOBAL__sub_I_maxEventCount>:
     a2c:	b580      	push	{r7, lr}
     a2e:	af00      	add	r7, sp, #0
     a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
     a34:	2001      	movs	r0, #1
     a36:	4b01      	ldr	r3, [pc, #4]	; (a3c <_GLOBAL__sub_I_maxEventCount+0x10>)
     a38:	4798      	blx	r3
     a3a:	bd80      	pop	{r7, pc}
     a3c:	000009c9 	.word	0x000009c9

00000a40 <_ZN14I2C_Asyn_ClassC1Ev>:
		ptrI2C_Asyn_Class->txReady=true;
		ptrI2C_Asyn_Class->rxReady=true;
 }

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
     a40:	b580      	push	{r7, lr}
     a42:	b082      	sub	sp, #8
     a44:	af00      	add	r7, sp, #0
     a46:	6078      	str	r0, [r7, #4]
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	4618      	mov	r0, r3
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
     a4e:	4798      	blx	r3
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	4a07      	ldr	r2, [pc, #28]	; (a70 <_ZN14I2C_Asyn_ClassC1Ev+0x30>)
     a54:	625a      	str	r2, [r3, #36]	; 0x24
	ptrClass=this;
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	687a      	ldr	r2, [r7, #4]
     a5a:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
     a5c:	4a05      	ldr	r2, [pc, #20]	; (a74 <_ZN14I2C_Asyn_ClassC1Ev+0x34>)
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	4618      	mov	r0, r3
     a66:	3708      	adds	r7, #8
     a68:	46bd      	mov	sp, r7
     a6a:	bd80      	pop	{r7, pc}
     a6c:	00000a99 	.word	0x00000a99
     a70:	20002038 	.word	0x20002038
     a74:	20001118 	.word	0x20001118

00000a78 <_ZN14I2C_Asyn_ClassD1Ev>:
	isOK=false;
	initiated=false;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
     a78:	b580      	push	{r7, lr}
     a7a:	b082      	sub	sp, #8
     a7c:	af00      	add	r7, sp, #0
     a7e:	6078      	str	r0, [r7, #4]
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	4618      	mov	r0, r3
     a84:	4b03      	ldr	r3, [pc, #12]	; (a94 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
     a86:	4798      	blx	r3
{

} //~I2C_Asyn_Class
     a88:	687b      	ldr	r3, [r7, #4]
     a8a:	4618      	mov	r0, r3
     a8c:	3708      	adds	r7, #8
     a8e:	46bd      	mov	sp, r7
     a90:	bd80      	pop	{r7, pc}
     a92:	bf00      	nop
     a94:	00000ab9 	.word	0x00000ab9

00000a98 <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	4a04      	ldr	r2, [pc, #16]	; (ab4 <_ZN14I2C_ObjectListC1Ev+0x1c>)
     aa4:	611a      	str	r2, [r3, #16]
} //I2C_ObjectList
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	4618      	mov	r0, r3
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	bc80      	pop	{r7}
     ab0:	4770      	bx	lr
     ab2:	bf00      	nop
     ab4:	2000111c 	.word	0x2000111c

00000ab8 <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
     ab8:	b480      	push	{r7}
     aba:	b083      	sub	sp, #12
     abc:	af00      	add	r7, sp, #0
     abe:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	4618      	mov	r0, r3
     ac4:	370c      	adds	r7, #12
     ac6:	46bd      	mov	sp, r7
     ac8:	bc80      	pop	{r7}
     aca:	4770      	bx	lr

00000acc <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
     acc:	b580      	push	{r7, lr}
     ace:	b082      	sub	sp, #8
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
     ad4:	6039      	str	r1, [r7, #0]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	3304      	adds	r3, #4
     ada:	4618      	mov	r0, r3
     adc:	4b06      	ldr	r3, [pc, #24]	; (af8 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
     ade:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	683a      	ldr	r2, [r7, #0]
     ae4:	641a      	str	r2, [r3, #64]	; 0x40
	ptrMCP23017Class=this;
     ae6:	4a05      	ldr	r2, [pc, #20]	; (afc <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
     ae8:	687b      	ldr	r3, [r7, #4]
     aea:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	4618      	mov	r0, r3
     af0:	3708      	adds	r7, #8
     af2:	46bd      	mov	sp, r7
     af4:	bd80      	pop	{r7, pc}
     af6:	bf00      	nop
     af8:	00000a41 	.word	0x00000a41
     afc:	20001120 	.word	0x20001120

00000b00 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
     b00:	b580      	push	{r7, lr}
     b02:	b082      	sub	sp, #8
     b04:	af00      	add	r7, sp, #0
     b06:	6078      	str	r0, [r7, #4]
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	3304      	adds	r3, #4
     b0c:	4618      	mov	r0, r3
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <_ZN14MCP23017_ClassD1Ev+0x1c>)
     b10:	4798      	blx	r3
{
} //~AT24MAC_Class
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	4618      	mov	r0, r3
     b16:	3708      	adds	r7, #8
     b18:	46bd      	mov	sp, r7
     b1a:	bd80      	pop	{r7, pc}
     b1c:	00000a79 	.word	0x00000a79

00000b20 <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
     b28:	6039      	str	r1, [r7, #0]
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	2b01      	cmp	r3, #1
     b2e:	d10d      	bne.n	b4c <_Z41__static_initialization_and_destruction_0ii+0x2c>
     b30:	683b      	ldr	r3, [r7, #0]
     b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b36:	4293      	cmp	r3, r2
     b38:	d108      	bne.n	b4c <_Z41__static_initialization_and_destruction_0ii+0x2c>
     b3a:	4906      	ldr	r1, [pc, #24]	; (b54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b3c:	4806      	ldr	r0, [pc, #24]	; (b58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     b3e:	4b07      	ldr	r3, [pc, #28]	; (b5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     b40:	4798      	blx	r3
     b42:	4a07      	ldr	r2, [pc, #28]	; (b60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     b44:	4907      	ldr	r1, [pc, #28]	; (b64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     b46:	4804      	ldr	r0, [pc, #16]	; (b58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     b48:	4b07      	ldr	r3, [pc, #28]	; (b68 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     b4a:	4798      	blx	r3
     b4c:	bf00      	nop
     b4e:	3708      	adds	r7, #8
     b50:	46bd      	mov	sp, r7
     b52:	bd80      	pop	{r7, pc}
     b54:	20002038 	.word	0x20002038
     b58:	20001124 	.word	0x20001124
     b5c:	00000acd 	.word	0x00000acd
     b60:	20000000 	.word	0x20000000
     b64:	00000b01 	.word	0x00000b01
     b68:	000105fd 	.word	0x000105fd

00000b6c <_GLOBAL__sub_I_ptrMCP23017Class>:
     b6c:	b580      	push	{r7, lr}
     b6e:	af00      	add	r7, sp, #0
     b70:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b74:	2001      	movs	r0, #1
     b76:	4b01      	ldr	r3, [pc, #4]	; (b7c <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
     b78:	4798      	blx	r3
     b7a:	bd80      	pop	{r7, pc}
     b7c:	00000b21 	.word	0x00000b21

00000b80 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
     b80:	b480      	push	{r7}
     b82:	b083      	sub	sp, #12
     b84:	af00      	add	r7, sp, #0
     b86:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
     b88:	4b04      	ldr	r3, [pc, #16]	; (b9c <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	2201      	movs	r2, #1
     b8e:	729a      	strb	r2, [r3, #10]
}
     b90:	bf00      	nop
     b92:	370c      	adds	r7, #12
     b94:	46bd      	mov	sp, r7
     b96:	bc80      	pop	{r7}
     b98:	4770      	bx	lr
     b9a:	bf00      	nop
     b9c:	20001174 	.word	0x20001174

00000ba0 <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
     ba0:	b580      	push	{r7, lr}
     ba2:	b082      	sub	sp, #8
     ba4:	af00      	add	r7, sp, #0
     ba6:	6078      	str	r0, [r7, #4]
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	4618      	mov	r0, r3
     bac:	4b03      	ldr	r3, [pc, #12]	; (bbc <_ZN13LTC2983_ClassD1Ev+0x1c>)
     bae:	4798      	blx	r3
{
} //~LTC2983_Class
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	4618      	mov	r0, r3
     bb4:	3708      	adds	r7, #8
     bb6:	46bd      	mov	sp, r7
     bb8:	bd80      	pop	{r7, pc}
     bba:	bf00      	nop
     bbc:	000015b9 	.word	0x000015b9

00000bc0 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_async_descriptor *SPI_LTC){
     bc0:	b580      	push	{r7, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
     bc8:	6039      	str	r1, [r7, #0]
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	4618      	mov	r0, r3
     bce:	4b06      	ldr	r3, [pc, #24]	; (be8 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x28>)
     bd0:	4798      	blx	r3
	ptrLTCClass=this;
     bd2:	4a06      	ldr	r2, [pc, #24]	; (bec <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x2c>)
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	683a      	ldr	r2, [r7, #0]
     bdc:	619a      	str	r2, [r3, #24]
	};
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	4618      	mov	r0, r3
     be2:	3708      	adds	r7, #8
     be4:	46bd      	mov	sp, r7
     be6:	bd80      	pop	{r7, pc}
     be8:	00001599 	.word	0x00001599
     bec:	20001174 	.word	0x20001174

00000bf0 <_ZN13LTC2983_Class4InitEv>:

bool LTC2983_Class::Init(){
     bf0:	b580      	push	{r7, lr}
     bf2:	b082      	sub	sp, #8
     bf4:	af00      	add	r7, sp, #0
     bf6:	6078      	str	r0, [r7, #4]
	auxTimer=&hvacTimer;
     bf8:	687b      	ldr	r3, [r7, #4]
     bfa:	4a13      	ldr	r2, [pc, #76]	; (c48 <_ZN13LTC2983_Class4InitEv+0x58>)
     bfc:	611a      	str	r2, [r3, #16]
	activeChannels[0]=4;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	2204      	movs	r2, #4
     c02:	72da      	strb	r2, [r3, #11]
	activeChannels[1]=8;
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	2208      	movs	r2, #8
     c08:	731a      	strb	r2, [r3, #12]
	activeChannels[2]=15;
     c0a:	687b      	ldr	r3, [r7, #4]
     c0c:	220f      	movs	r2, #15
     c0e:	735a      	strb	r2, [r3, #13]
	spiLT.set_descriptor(SPIA);
     c10:	687a      	ldr	r2, [r7, #4]
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	699b      	ldr	r3, [r3, #24]
     c16:	4619      	mov	r1, r3
     c18:	4610      	mov	r0, r2
     c1a:	4b0c      	ldr	r3, [pc, #48]	; (c4c <_ZN13LTC2983_Class4InitEv+0x5c>)
     c1c:	4798      	blx	r3
	spiLT.init();
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	4618      	mov	r0, r3
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <_ZN13LTC2983_Class4InitEv+0x60>)
     c24:	4798      	blx	r3
	configure_channels();
     c26:	6878      	ldr	r0, [r7, #4]
     c28:	4b0a      	ldr	r3, [pc, #40]	; (c54 <_ZN13LTC2983_Class4InitEv+0x64>)
     c2a:	4798      	blx	r3
	configure_global_parameters();
     c2c:	6878      	ldr	r0, [r7, #4]
     c2e:	4b0a      	ldr	r3, [pc, #40]	; (c58 <_ZN13LTC2983_Class4InitEv+0x68>)
     c30:	4798      	blx	r3
	ready=true;	
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	2201      	movs	r2, #1
     c36:	721a      	strb	r2, [r3, #8]
	return	SelfTest();
     c38:	6878      	ldr	r0, [r7, #4]
     c3a:	4b08      	ldr	r3, [pc, #32]	; (c5c <_ZN13LTC2983_Class4InitEv+0x6c>)
     c3c:	4798      	blx	r3
     c3e:	4603      	mov	r3, r0
}
     c40:	4618      	mov	r0, r3
     c42:	3708      	adds	r7, #8
     c44:	46bd      	mov	sp, r7
     c46:	bd80      	pop	{r7, pc}
     c48:	2000176c 	.word	0x2000176c
     c4c:	0000160d 	.word	0x0000160d
     c50:	000015cd 	.word	0x000015cd
     c54:	000012f1 	.word	0x000012f1
     c58:	00001375 	.word	0x00001375
     c5c:	000013a9 	.word	0x000013a9

00000c60 <_ZN13LTC2983_Class11print_titleEv>:

void LTC2983_Class::print_title()
{
     c60:	b580      	push	{r7, lr}
     c62:	b082      	sub	sp, #8
     c64:	af00      	add	r7, sp, #0
     c66:	6078      	str	r0, [r7, #4]
	usb.print(F("\n******************************************************************\n\r"));
     c68:	4911      	ldr	r1, [pc, #68]	; (cb0 <_ZN13LTC2983_Class11print_titleEv+0x50>)
     c6a:	4812      	ldr	r0, [pc, #72]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     c6c:	4b12      	ldr	r3, [pc, #72]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     c6e:	4798      	blx	r3
	usb.print(F(" LTC2983 Demonstration Program                      \n\r"));
     c70:	4912      	ldr	r1, [pc, #72]	; (cbc <_ZN13LTC2983_Class11print_titleEv+0x5c>)
     c72:	4810      	ldr	r0, [pc, #64]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     c74:	4b10      	ldr	r3, [pc, #64]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     c76:	4798      	blx	r3
	usb.print(F("                                                                \n\r"));
     c78:	4911      	ldr	r1, [pc, #68]	; (cc0 <_ZN13LTC2983_Class11print_titleEv+0x60>)
     c7a:	480e      	ldr	r0, [pc, #56]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     c7c:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     c7e:	4798      	blx	r3
	usb.print(F(" This program demonstrates how to read the multi-sensor         \n\r"));
     c80:	4910      	ldr	r1, [pc, #64]	; (cc4 <_ZN13LTC2983_Class11print_titleEv+0x64>)
     c82:	480c      	ldr	r0, [pc, #48]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     c84:	4b0c      	ldr	r3, [pc, #48]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     c86:	4798      	blx	r3
	usb.print(F(" temperature measurement system.                                \n\r"));
     c88:	490f      	ldr	r1, [pc, #60]	; (cc8 <_ZN13LTC2983_Class11print_titleEv+0x68>)
     c8a:	480a      	ldr	r0, [pc, #40]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     c8c:	4b0a      	ldr	r3, [pc, #40]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     c8e:	4798      	blx	r3
	usb.print(F("                                                                \n\r"));
     c90:	490b      	ldr	r1, [pc, #44]	; (cc0 <_ZN13LTC2983_Class11print_titleEv+0x60>)
     c92:	4808      	ldr	r0, [pc, #32]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     c94:	4b08      	ldr	r3, [pc, #32]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     c96:	4798      	blx	r3
	usb.print(F(" Set the baud rate to 115200 and select the newline terminator. \n\r"));
     c98:	490c      	ldr	r1, [pc, #48]	; (ccc <_ZN13LTC2983_Class11print_titleEv+0x6c>)
     c9a:	4806      	ldr	r0, [pc, #24]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     c9c:	4b06      	ldr	r3, [pc, #24]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     c9e:	4798      	blx	r3
	usb.print(F("******************************************************************\n\r"));
     ca0:	490b      	ldr	r1, [pc, #44]	; (cd0 <_ZN13LTC2983_Class11print_titleEv+0x70>)
     ca2:	4804      	ldr	r0, [pc, #16]	; (cb4 <_ZN13LTC2983_Class11print_titleEv+0x54>)
     ca4:	4b04      	ldr	r3, [pc, #16]	; (cb8 <_ZN13LTC2983_Class11print_titleEv+0x58>)
     ca6:	4798      	blx	r3
}
     ca8:	bf00      	nop
     caa:	3708      	adds	r7, #8
     cac:	46bd      	mov	sp, r7
     cae:	bd80      	pop	{r7, pc}
     cb0:	00013440 	.word	0x00013440
     cb4:	200017d0 	.word	0x200017d0
     cb8:	00002999 	.word	0x00002999
     cbc:	00013488 	.word	0x00013488
     cc0:	000134c0 	.word	0x000134c0
     cc4:	00013504 	.word	0x00013504
     cc8:	00013548 	.word	0x00013548
     ccc:	0001358c 	.word	0x0001358c
     cd0:	000135d0 	.word	0x000135d0

00000cd4 <_ZN13LTC2983_Class14assign_channelEhhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint8_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
     cd4:	b590      	push	{r4, r7, lr}
     cd6:	b089      	sub	sp, #36	; 0x24
     cd8:	af02      	add	r7, sp, #8
     cda:	60f8      	str	r0, [r7, #12]
     cdc:	607b      	str	r3, [r7, #4]
     cde:	460b      	mov	r3, r1
     ce0:	72fb      	strb	r3, [r7, #11]
     ce2:	4613      	mov	r3, r2
     ce4:	72bb      	strb	r3, [r7, #10]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
     ce6:	7abb      	ldrb	r3, [r7, #10]
     ce8:	461a      	mov	r2, r3
     cea:	f44f 7100 	mov.w	r1, #512	; 0x200
     cee:	68f8      	ldr	r0, [r7, #12]
     cf0:	4b0b      	ldr	r3, [pc, #44]	; (d20 <_ZN13LTC2983_Class14assign_channelEhhm+0x4c>)
     cf2:	4798      	blx	r3
     cf4:	4603      	mov	r3, r0
     cf6:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
     cf8:	8afa      	ldrh	r2, [r7, #22]
     cfa:	7af9      	ldrb	r1, [r7, #11]
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	9300      	str	r3, [sp, #0]
     d00:	4613      	mov	r3, r2
     d02:	2202      	movs	r2, #2
     d04:	68f8      	ldr	r0, [r7, #12]
     d06:	4c07      	ldr	r4, [pc, #28]	; (d24 <_ZN13LTC2983_Class14assign_channelEhhm+0x50>)
     d08:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
     d0a:	8afb      	ldrh	r3, [r7, #22]
     d0c:	7aba      	ldrb	r2, [r7, #10]
     d0e:	7af9      	ldrb	r1, [r7, #11]
     d10:	68f8      	ldr	r0, [r7, #12]
     d12:	4c05      	ldr	r4, [pc, #20]	; (d28 <_ZN13LTC2983_Class14assign_channelEhhm+0x54>)
     d14:	47a0      	blx	r4
}
     d16:	bf00      	nop
     d18:	371c      	adds	r7, #28
     d1a:	46bd      	mov	sp, r7
     d1c:	bd90      	pop	{r4, r7, pc}
     d1e:	bf00      	nop
     d20:	000012c5 	.word	0x000012c5
     d24:	000011e1 	.word	0x000011e1
     d28:	00000e1d 	.word	0x00000e1d

00000d2c <_ZN13LTC2983_Class15measure_channelEhhh>:

// *****************
// Measure channel
// *****************
void LTC2983_Class::measure_channel(uint8_t chip_select, uint8_t channel_number, uint8_t channel_output)
{
     d2c:	b590      	push	{r4, r7, lr}
     d2e:	b083      	sub	sp, #12
     d30:	af00      	add	r7, sp, #0
     d32:	6078      	str	r0, [r7, #4]
     d34:	4608      	mov	r0, r1
     d36:	4611      	mov	r1, r2
     d38:	461a      	mov	r2, r3
     d3a:	4603      	mov	r3, r0
     d3c:	70fb      	strb	r3, [r7, #3]
     d3e:	460b      	mov	r3, r1
     d40:	70bb      	strb	r3, [r7, #2]
     d42:	4613      	mov	r3, r2
     d44:	707b      	strb	r3, [r7, #1]
	convert_channel(chip_select, channel_number);
     d46:	78ba      	ldrb	r2, [r7, #2]
     d48:	78fb      	ldrb	r3, [r7, #3]
     d4a:	4619      	mov	r1, r3
     d4c:	6878      	ldr	r0, [r7, #4]
     d4e:	4b07      	ldr	r3, [pc, #28]	; (d6c <_ZN13LTC2983_Class15measure_channelEhhh+0x40>)
     d50:	4798      	blx	r3
	delay_ms(1);
     d52:	2001      	movs	r0, #1
     d54:	4b06      	ldr	r3, [pc, #24]	; (d70 <_ZN13LTC2983_Class15measure_channelEhhh+0x44>)
     d56:	4798      	blx	r3
	get_result(chip_select, channel_number, channel_output);
     d58:	787b      	ldrb	r3, [r7, #1]
     d5a:	78ba      	ldrb	r2, [r7, #2]
     d5c:	78f9      	ldrb	r1, [r7, #3]
     d5e:	6878      	ldr	r0, [r7, #4]
     d60:	4c04      	ldr	r4, [pc, #16]	; (d74 <_ZN13LTC2983_Class15measure_channelEhhh+0x48>)
     d62:	47a0      	blx	r4
}
     d64:	bf00      	nop
     d66:	370c      	adds	r7, #12
     d68:	46bd      	mov	sp, r7
     d6a:	bd90      	pop	{r4, r7, pc}
     d6c:	00000d79 	.word	0x00000d79
     d70:	00004e01 	.word	0x00004e01
     d74:	00000e99 	.word	0x00000e99

00000d78 <_ZN13LTC2983_Class15convert_channelEhh>:


void LTC2983_Class::convert_channel(uint8_t chip_select, uint8_t channel_number)
{
     d78:	b590      	push	{r4, r7, lr}
     d7a:	b085      	sub	sp, #20
     d7c:	af02      	add	r7, sp, #8
     d7e:	6078      	str	r0, [r7, #4]
     d80:	460b      	mov	r3, r1
     d82:	70fb      	strb	r3, [r7, #3]
     d84:	4613      	mov	r3, r2
     d86:	70bb      	strb	r3, [r7, #2]
	// Start conversion
	conversionFinished=0;
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	2200      	movs	r2, #0
     d8c:	725a      	strb	r2, [r3, #9]
	transfer_byte(chip_select, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
     d8e:	78bb      	ldrb	r3, [r7, #2]
     d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
     d94:	b2db      	uxtb	r3, r3
     d96:	78f9      	ldrb	r1, [r7, #3]
     d98:	9300      	str	r3, [sp, #0]
     d9a:	2300      	movs	r3, #0
     d9c:	2202      	movs	r2, #2
     d9e:	6878      	ldr	r0, [r7, #4]
     da0:	4c06      	ldr	r4, [pc, #24]	; (dbc <_ZN13LTC2983_Class15convert_channelEhh+0x44>)
     da2:	47a0      	blx	r4
	channelOnProcess=channel_number;
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	78ba      	ldrb	r2, [r7, #2]
     da8:	739a      	strb	r2, [r3, #14]
	wait_for_process_to_finish(chip_select);
     daa:	78fb      	ldrb	r3, [r7, #3]
     dac:	4619      	mov	r1, r3
     dae:	6878      	ldr	r0, [r7, #4]
     db0:	4b03      	ldr	r3, [pc, #12]	; (dc0 <_ZN13LTC2983_Class15convert_channelEhh+0x48>)
     db2:	4798      	blx	r3
}
     db4:	bf00      	nop
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	bd90      	pop	{r4, r7, pc}
     dbc:	0000126d 	.word	0x0000126d
     dc0:	00000dc5 	.word	0x00000dc5

00000dc4 <_ZN13LTC2983_Class26wait_for_process_to_finishEh>:


void LTC2983_Class::wait_for_process_to_finish(uint8_t chip_select)
{
     dc4:	b590      	push	{r4, r7, lr}
     dc6:	b087      	sub	sp, #28
     dc8:	af02      	add	r7, sp, #8
     dca:	6078      	str	r0, [r7, #4]
     dcc:	460b      	mov	r3, r1
     dce:	70fb      	strb	r3, [r7, #3]
	process_finished = 0;
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	2200      	movs	r2, #0
     dd4:	751a      	strb	r2, [r3, #20]
	uint8_t data;
	//while(!gpio_get_pin_level(INT_LTC2983));
	while (process_finished == 0)
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	7d1b      	ldrb	r3, [r3, #20]
     dda:	2b00      	cmp	r3, #0
     ddc:	d113      	bne.n	e06 <_ZN13LTC2983_Class26wait_for_process_to_finishEh+0x42>
	{
		data = transfer_byte(chip_select, READ_FROM_RAM, COMMAND_STATUS_REGISTER, 0);
     dde:	78f9      	ldrb	r1, [r7, #3]
     de0:	2300      	movs	r3, #0
     de2:	9300      	str	r3, [sp, #0]
     de4:	2300      	movs	r3, #0
     de6:	2203      	movs	r2, #3
     de8:	6878      	ldr	r0, [r7, #4]
     dea:	4c0a      	ldr	r4, [pc, #40]	; (e14 <_ZN13LTC2983_Class26wait_for_process_to_finishEh+0x50>)
     dec:	47a0      	blx	r4
     dee:	4603      	mov	r3, r0
     df0:	73fb      	strb	r3, [r7, #15]
		process_finished  = data & 0x40;
     df2:	7bfb      	ldrb	r3, [r7, #15]
     df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     df8:	b2da      	uxtb	r2, r3
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	751a      	strb	r2, [r3, #20]
		delay_ms(1);
     dfe:	2001      	movs	r0, #1
     e00:	4b05      	ldr	r3, [pc, #20]	; (e18 <_ZN13LTC2983_Class26wait_for_process_to_finishEh+0x54>)
     e02:	4798      	blx	r3
	while (process_finished == 0)
     e04:	e7e7      	b.n	dd6 <_ZN13LTC2983_Class26wait_for_process_to_finishEh+0x12>
	}
	conversionFinished=1;
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	2201      	movs	r2, #1
     e0a:	725a      	strb	r2, [r3, #9]
}
     e0c:	bf00      	nop
     e0e:	3714      	adds	r7, #20
     e10:	46bd      	mov	sp, r7
     e12:	bd90      	pop	{r4, r7, pc}
     e14:	0000126d 	.word	0x0000126d
     e18:	00004e01 	.word	0x00004e01

00000e1c <_ZN13LTC2983_Class20print_config_channelEhht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint8_t chip_select, uint8_t channel_number, uint16_t start_address)
{
     e1c:	b590      	push	{r4, r7, lr}
     e1e:	b087      	sub	sp, #28
     e20:	af02      	add	r7, sp, #8
     e22:	6078      	str	r0, [r7, #4]
     e24:	4608      	mov	r0, r1
     e26:	4611      	mov	r1, r2
     e28:	461a      	mov	r2, r3
     e2a:	4603      	mov	r3, r0
     e2c:	70fb      	strb	r3, [r7, #3]
     e2e:	460b      	mov	r3, r1
     e30:	70bb      	strb	r3, [r7, #2]
     e32:	4613      	mov	r3, r2
     e34:	803b      	strh	r3, [r7, #0]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
     e36:	883a      	ldrh	r2, [r7, #0]
     e38:	78f9      	ldrb	r1, [r7, #3]
     e3a:	2300      	movs	r3, #0
     e3c:	9300      	str	r3, [sp, #0]
     e3e:	4613      	mov	r3, r2
     e40:	2203      	movs	r2, #3
     e42:	6878      	ldr	r0, [r7, #4]
     e44:	4c0c      	ldr	r4, [pc, #48]	; (e78 <_ZN13LTC2983_Class20print_config_channelEhht+0x5c>)
     e46:	47a0      	blx	r4
     e48:	60f8      	str	r0, [r7, #12]

	usb.print(F("\nChannel Config "));
     e4a:	490c      	ldr	r1, [pc, #48]	; (e7c <_ZN13LTC2983_Class20print_config_channelEhht+0x60>)
     e4c:	480c      	ldr	r0, [pc, #48]	; (e80 <_ZN13LTC2983_Class20print_config_channelEhht+0x64>)
     e4e:	4b0d      	ldr	r3, [pc, #52]	; (e84 <_ZN13LTC2983_Class20print_config_channelEhht+0x68>)
     e50:	4798      	blx	r3
	usb.println(channel_number);
     e52:	78bb      	ldrb	r3, [r7, #2]
     e54:	220a      	movs	r2, #10
     e56:	4619      	mov	r1, r3
     e58:	4809      	ldr	r0, [pc, #36]	; (e80 <_ZN13LTC2983_Class20print_config_channelEhht+0x64>)
     e5a:	4b0b      	ldr	r3, [pc, #44]	; (e88 <_ZN13LTC2983_Class20print_config_channelEhht+0x6c>)
     e5c:	4798      	blx	r3

	// 24 LSB's are conversion result
	
	usb<<"register value: ";
     e5e:	490b      	ldr	r1, [pc, #44]	; (e8c <_ZN13LTC2983_Class20print_config_channelEhht+0x70>)
     e60:	4807      	ldr	r0, [pc, #28]	; (e80 <_ZN13LTC2983_Class20print_config_channelEhht+0x64>)
     e62:	4b0b      	ldr	r3, [pc, #44]	; (e90 <_ZN13LTC2983_Class20print_config_channelEhht+0x74>)
     e64:	4798      	blx	r3
	usb.println(raw_data,HEX);
     e66:	2210      	movs	r2, #16
     e68:	68f9      	ldr	r1, [r7, #12]
     e6a:	4805      	ldr	r0, [pc, #20]	; (e80 <_ZN13LTC2983_Class20print_config_channelEhht+0x64>)
     e6c:	4b09      	ldr	r3, [pc, #36]	; (e94 <_ZN13LTC2983_Class20print_config_channelEhht+0x78>)
     e6e:	4798      	blx	r3
	
}
     e70:	bf00      	nop
     e72:	3714      	adds	r7, #20
     e74:	46bd      	mov	sp, r7
     e76:	bd90      	pop	{r4, r7, pc}
     e78:	000011e1 	.word	0x000011e1
     e7c:	00013618 	.word	0x00013618
     e80:	200017d0 	.word	0x200017d0
     e84:	00002999 	.word	0x00002999
     e88:	00002b11 	.word	0x00002b11
     e8c:	0001362c 	.word	0x0001362c
     e90:	00001451 	.word	0x00001451
     e94:	00002b4d 	.word	0x00002b4d

00000e98 <_ZN13LTC2983_Class10get_resultEhhh>:
void LTC2983_Class::get_result(uint8_t chip_select, uint8_t channel_number, uint8_t channel_output)
{
     e98:	b590      	push	{r4, r7, lr}
     e9a:	b085      	sub	sp, #20
     e9c:	af02      	add	r7, sp, #8
     e9e:	6078      	str	r0, [r7, #4]
     ea0:	4608      	mov	r0, r1
     ea2:	4611      	mov	r1, r2
     ea4:	461a      	mov	r2, r3
     ea6:	4603      	mov	r3, r0
     ea8:	70fb      	strb	r3, [r7, #3]
     eaa:	460b      	mov	r3, r1
     eac:	70bb      	strb	r3, [r7, #2]
     eae:	4613      	mov	r3, r2
     eb0:	707b      	strb	r3, [r7, #1]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
     eb2:	78bb      	ldrb	r3, [r7, #2]
     eb4:	461a      	mov	r2, r3
     eb6:	2110      	movs	r1, #16
     eb8:	6878      	ldr	r0, [r7, #4]
     eba:	4b21      	ldr	r3, [pc, #132]	; (f40 <_ZN13LTC2983_Class10get_resultEhhh+0xa8>)
     ebc:	4798      	blx	r3
     ebe:	4603      	mov	r3, r0
     ec0:	461a      	mov	r2, r3
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	871a      	strh	r2, [r3, #56]	; 0x38
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
     eca:	78f9      	ldrb	r1, [r7, #3]
     ecc:	2300      	movs	r3, #0
     ece:	9300      	str	r3, [sp, #0]
     ed0:	4613      	mov	r3, r2
     ed2:	2203      	movs	r2, #3
     ed4:	6878      	ldr	r0, [r7, #4]
     ed6:	4c1b      	ldr	r4, [pc, #108]	; (f44 <_ZN13LTC2983_Class10get_resultEhhh+0xac>)
     ed8:	47a0      	blx	r4
     eda:	4602      	mov	r2, r0
     edc:	687b      	ldr	r3, [r7, #4]
     ede:	62da      	str	r2, [r3, #44]	; 0x2c

	usb.print(F("\nChannel "));
     ee0:	4919      	ldr	r1, [pc, #100]	; (f48 <_ZN13LTC2983_Class10get_resultEhhh+0xb0>)
     ee2:	481a      	ldr	r0, [pc, #104]	; (f4c <_ZN13LTC2983_Class10get_resultEhhh+0xb4>)
     ee4:	4b1a      	ldr	r3, [pc, #104]	; (f50 <_ZN13LTC2983_Class10get_resultEhhh+0xb8>)
     ee6:	4798      	blx	r3
	usb.println(channel_number);
     ee8:	78bb      	ldrb	r3, [r7, #2]
     eea:	220a      	movs	r2, #10
     eec:	4619      	mov	r1, r3
     eee:	4817      	ldr	r0, [pc, #92]	; (f4c <_ZN13LTC2983_Class10get_resultEhhh+0xb4>)
     ef0:	4b18      	ldr	r3, [pc, #96]	; (f54 <_ZN13LTC2983_Class10get_resultEhhh+0xbc>)
     ef2:	4798      	blx	r3

	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ef8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	629a      	str	r2, [r3, #40]	; 0x28
	print_conversion_result(raw_conversion_result, channel_output);
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f04:	787a      	ldrb	r2, [r7, #1]
     f06:	4619      	mov	r1, r3
     f08:	6878      	ldr	r0, [r7, #4]
     f0a:	4b13      	ldr	r3, [pc, #76]	; (f58 <_ZN13LTC2983_Class10get_resultEhhh+0xc0>)
     f0c:	4798      	blx	r3

	// If you're interested in the raw voltage or resistance, use the following
	if (channel_output != VOLTAGE)
     f0e:	787b      	ldrb	r3, [r7, #1]
     f10:	2b01      	cmp	r3, #1
     f12:	d005      	beq.n	f20 <_ZN13LTC2983_Class10get_resultEhhh+0x88>
	{
		read_voltage_or_resistance_results(chip_select, channel_number);
     f14:	78ba      	ldrb	r2, [r7, #2]
     f16:	78fb      	ldrb	r3, [r7, #3]
     f18:	4619      	mov	r1, r3
     f1a:	6878      	ldr	r0, [r7, #4]
     f1c:	4b0f      	ldr	r3, [pc, #60]	; (f5c <_ZN13LTC2983_Class10get_resultEhhh+0xc4>)
     f1e:	4798      	blx	r3
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f24:	0e1b      	lsrs	r3, r3, #24
     f26:	b2da      	uxtb	r2, r3
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	759a      	strb	r2, [r3, #22]
	print_fault_data(fault_data);
     f2c:	687b      	ldr	r3, [r7, #4]
     f2e:	7d9b      	ldrb	r3, [r3, #22]
     f30:	4619      	mov	r1, r3
     f32:	6878      	ldr	r0, [r7, #4]
     f34:	4b0a      	ldr	r3, [pc, #40]	; (f60 <_ZN13LTC2983_Class10get_resultEhhh+0xc8>)
     f36:	4798      	blx	r3
}
     f38:	bf00      	nop
     f3a:	370c      	adds	r7, #12
     f3c:	46bd      	mov	sp, r7
     f3e:	bd90      	pop	{r4, r7, pc}
     f40:	000012c5 	.word	0x000012c5
     f44:	000011e1 	.word	0x000011e1
     f48:	00013640 	.word	0x00013640
     f4c:	200017d0 	.word	0x200017d0
     f50:	00002999 	.word	0x00002999
     f54:	00002b11 	.word	0x00002b11
     f58:	00000f65 	.word	0x00000f65
     f5c:	0000104d 	.word	0x0000104d
     f60:	000010e5 	.word	0x000010e5

00000f64 <_ZN13LTC2983_Class23print_conversion_resultEmh>:
		return	raw_data;
}


void LTC2983_Class::print_conversion_result(uint32_t raw_conversion_result, uint8_t channel_output)
{
     f64:	b580      	push	{r7, lr}
     f66:	b086      	sub	sp, #24
     f68:	af02      	add	r7, sp, #8
     f6a:	60f8      	str	r0, [r7, #12]
     f6c:	60b9      	str	r1, [r7, #8]
     f6e:	4613      	mov	r3, r2
     f70:	71fb      	strb	r3, [r7, #7]
	signed_data = raw_conversion_result;
     f72:	68ba      	ldr	r2, [r7, #8]
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	635a      	str	r2, [r3, #52]	; 0x34
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
     f78:	68fb      	ldr	r3, [r7, #12]
     f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
     f80:	2b00      	cmp	r3, #0
     f82:	d006      	beq.n	f92 <_ZN13LTC2983_Class23print_conversion_resultEmh+0x2e>
		signed_data = signed_data | 0xFF000000;
     f84:	68fb      	ldr	r3, [r7, #12]
     f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
     f8c:	461a      	mov	r2, r3
     f8e:	68fb      	ldr	r3, [r7, #12]
     f90:	635a      	str	r2, [r3, #52]	; 0x34

	// Translate and print result
	if (channel_output == TEMPERATURE)
     f92:	79fb      	ldrb	r3, [r7, #7]
     f94:	2b02      	cmp	r3, #2
     f96:	d121      	bne.n	fdc <_ZN13LTC2983_Class23print_conversion_resultEmh+0x78>
	{
		scaled_result = float(signed_data) / 1024;
     f98:	68fb      	ldr	r3, [r7, #12]
     f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     f9c:	4b23      	ldr	r3, [pc, #140]	; (102c <_ZN13LTC2983_Class23print_conversion_resultEmh+0xc8>)
     f9e:	4610      	mov	r0, r2
     fa0:	4798      	blx	r3
     fa2:	4602      	mov	r2, r0
     fa4:	4b22      	ldr	r3, [pc, #136]	; (1030 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xcc>)
     fa6:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
     faa:	4610      	mov	r0, r2
     fac:	4798      	blx	r3
     fae:	4603      	mov	r3, r0
     fb0:	461a      	mov	r2, r3
     fb2:	68fb      	ldr	r3, [r7, #12]
     fb4:	631a      	str	r2, [r3, #48]	; 0x30
		usb.print(F("  Temperature = "));
     fb6:	491f      	ldr	r1, [pc, #124]	; (1034 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xd0>)
     fb8:	481f      	ldr	r0, [pc, #124]	; (1038 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xd4>)
     fba:	4b20      	ldr	r3, [pc, #128]	; (103c <_ZN13LTC2983_Class23print_conversion_resultEmh+0xd8>)
     fbc:	4798      	blx	r3
		usb.println(scaled_result);
     fbe:	68fb      	ldr	r3, [r7, #12]
     fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     fc2:	4b1f      	ldr	r3, [pc, #124]	; (1040 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xdc>)
     fc4:	4610      	mov	r0, r2
     fc6:	4798      	blx	r3
     fc8:	460a      	mov	r2, r1
     fca:	4601      	mov	r1, r0
     fcc:	2302      	movs	r3, #2
     fce:	9300      	str	r3, [sp, #0]
     fd0:	4613      	mov	r3, r2
     fd2:	460a      	mov	r2, r1
     fd4:	4818      	ldr	r0, [pc, #96]	; (1038 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xd4>)
     fd6:	491b      	ldr	r1, [pc, #108]	; (1044 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xe0>)
     fd8:	4788      	blx	r1
		scaled_result = float(signed_data) / 2097152;
		usb.print(F("  Direct ADC reading in V = "));
		usb.println(scaled_result);
	}
	
}
     fda:	e023      	b.n	1024 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xc0>
	else if (channel_output == VOLTAGE)
     fdc:	79fb      	ldrb	r3, [r7, #7]
     fde:	2b01      	cmp	r3, #1
     fe0:	d120      	bne.n	1024 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xc0>
		scaled_result = float(signed_data) / 2097152;
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     fe6:	4b11      	ldr	r3, [pc, #68]	; (102c <_ZN13LTC2983_Class23print_conversion_resultEmh+0xc8>)
     fe8:	4610      	mov	r0, r2
     fea:	4798      	blx	r3
     fec:	4602      	mov	r2, r0
     fee:	4b10      	ldr	r3, [pc, #64]	; (1030 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xcc>)
     ff0:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
     ff4:	4610      	mov	r0, r2
     ff6:	4798      	blx	r3
     ff8:	4603      	mov	r3, r0
     ffa:	461a      	mov	r2, r3
     ffc:	68fb      	ldr	r3, [r7, #12]
     ffe:	631a      	str	r2, [r3, #48]	; 0x30
		usb.print(F("  Direct ADC reading in V = "));
    1000:	4911      	ldr	r1, [pc, #68]	; (1048 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xe4>)
    1002:	480d      	ldr	r0, [pc, #52]	; (1038 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xd4>)
    1004:	4b0d      	ldr	r3, [pc, #52]	; (103c <_ZN13LTC2983_Class23print_conversion_resultEmh+0xd8>)
    1006:	4798      	blx	r3
		usb.println(scaled_result);
    1008:	68fb      	ldr	r3, [r7, #12]
    100a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    100c:	4b0c      	ldr	r3, [pc, #48]	; (1040 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xdc>)
    100e:	4610      	mov	r0, r2
    1010:	4798      	blx	r3
    1012:	460a      	mov	r2, r1
    1014:	4601      	mov	r1, r0
    1016:	2302      	movs	r3, #2
    1018:	9300      	str	r3, [sp, #0]
    101a:	4613      	mov	r3, r2
    101c:	460a      	mov	r2, r1
    101e:	4806      	ldr	r0, [pc, #24]	; (1038 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xd4>)
    1020:	4908      	ldr	r1, [pc, #32]	; (1044 <_ZN13LTC2983_Class23print_conversion_resultEmh+0xe0>)
    1022:	4788      	blx	r1
}
    1024:	bf00      	nop
    1026:	3710      	adds	r7, #16
    1028:	46bd      	mov	sp, r7
    102a:	bd80      	pop	{r7, pc}
    102c:	000121d9 	.word	0x000121d9
    1030:	000123e9 	.word	0x000123e9
    1034:	0001364c 	.word	0x0001364c
    1038:	200017d0 	.word	0x200017d0
    103c:	00002999 	.word	0x00002999
    1040:	00011a1d 	.word	0x00011a1d
    1044:	00002b85 	.word	0x00002b85
    1048:	00013660 	.word	0x00013660

0000104c <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh>:


void LTC2983_Class::read_voltage_or_resistance_results(uint8_t chip_select, uint8_t channel_number)
{
    104c:	b590      	push	{r4, r7, lr}
    104e:	b089      	sub	sp, #36	; 0x24
    1050:	af02      	add	r7, sp, #8
    1052:	6078      	str	r0, [r7, #4]
    1054:	460b      	mov	r3, r1
    1056:	70fb      	strb	r3, [r7, #3]
    1058:	4613      	mov	r3, r2
    105a:	70bb      	strb	r3, [r7, #2]
	int32_t raw_data;
	float voltage_or_resistance_result;
	uint16_t start_address = get_start_address(VOUT_CH_BASE, channel_number);
    105c:	78bb      	ldrb	r3, [r7, #2]
    105e:	461a      	mov	r2, r3
    1060:	2160      	movs	r1, #96	; 0x60
    1062:	6878      	ldr	r0, [r7, #4]
    1064:	4b16      	ldr	r3, [pc, #88]	; (10c0 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x74>)
    1066:	4798      	blx	r3
    1068:	4603      	mov	r3, r0
    106a:	82fb      	strh	r3, [r7, #22]

	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
    106c:	8afa      	ldrh	r2, [r7, #22]
    106e:	78f9      	ldrb	r1, [r7, #3]
    1070:	2300      	movs	r3, #0
    1072:	9300      	str	r3, [sp, #0]
    1074:	4613      	mov	r3, r2
    1076:	2203      	movs	r2, #3
    1078:	6878      	ldr	r0, [r7, #4]
    107a:	4c12      	ldr	r4, [pc, #72]	; (10c4 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x78>)
    107c:	47a0      	blx	r4
    107e:	4603      	mov	r3, r0
    1080:	613b      	str	r3, [r7, #16]
	voltage_or_resistance_result = (float)raw_data/1024;
    1082:	4b11      	ldr	r3, [pc, #68]	; (10c8 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x7c>)
    1084:	6938      	ldr	r0, [r7, #16]
    1086:	4798      	blx	r3
    1088:	4602      	mov	r2, r0
    108a:	4b10      	ldr	r3, [pc, #64]	; (10cc <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x80>)
    108c:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
    1090:	4610      	mov	r0, r2
    1092:	4798      	blx	r3
    1094:	4603      	mov	r3, r0
    1096:	60fb      	str	r3, [r7, #12]
	usb.print(F("  Voltage or resistance = "));
    1098:	490d      	ldr	r1, [pc, #52]	; (10d0 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x84>)
    109a:	480e      	ldr	r0, [pc, #56]	; (10d4 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x88>)
    109c:	4b0e      	ldr	r3, [pc, #56]	; (10d8 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x8c>)
    109e:	4798      	blx	r3
	usb.println(voltage_or_resistance_result);
    10a0:	4b0e      	ldr	r3, [pc, #56]	; (10dc <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x90>)
    10a2:	68f8      	ldr	r0, [r7, #12]
    10a4:	4798      	blx	r3
    10a6:	460a      	mov	r2, r1
    10a8:	4601      	mov	r1, r0
    10aa:	2302      	movs	r3, #2
    10ac:	9300      	str	r3, [sp, #0]
    10ae:	4613      	mov	r3, r2
    10b0:	460a      	mov	r2, r1
    10b2:	4808      	ldr	r0, [pc, #32]	; (10d4 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x88>)
    10b4:	490a      	ldr	r1, [pc, #40]	; (10e0 <_ZN13LTC2983_Class34read_voltage_or_resistance_resultsEhh+0x94>)
    10b6:	4788      	blx	r1
}
    10b8:	bf00      	nop
    10ba:	371c      	adds	r7, #28
    10bc:	46bd      	mov	sp, r7
    10be:	bd90      	pop	{r4, r7, pc}
    10c0:	000012c5 	.word	0x000012c5
    10c4:	000011e1 	.word	0x000011e1
    10c8:	000121d9 	.word	0x000121d9
    10cc:	000123e9 	.word	0x000123e9
    10d0:	00013680 	.word	0x00013680
    10d4:	200017d0 	.word	0x200017d0
    10d8:	00002999 	.word	0x00002999
    10dc:	00011a1d 	.word	0x00011a1d
    10e0:	00002b85 	.word	0x00002b85

000010e4 <_ZN13LTC2983_Class16print_fault_dataEh>:


// Translate the fault byte into usable fault data and print it out
void LTC2983_Class::print_fault_data(uint8_t fault_byte)
{
    10e4:	b580      	push	{r7, lr}
    10e6:	b082      	sub	sp, #8
    10e8:	af00      	add	r7, sp, #0
    10ea:	6078      	str	r0, [r7, #4]
    10ec:	460b      	mov	r3, r1
    10ee:	70fb      	strb	r3, [r7, #3]
	//
	usb.print(F("  FAULT DATA = "));
    10f0:	492d      	ldr	r1, [pc, #180]	; (11a8 <_ZN13LTC2983_Class16print_fault_dataEh+0xc4>)
    10f2:	482e      	ldr	r0, [pc, #184]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    10f4:	4b2e      	ldr	r3, [pc, #184]	; (11b0 <_ZN13LTC2983_Class16print_fault_dataEh+0xcc>)
    10f6:	4798      	blx	r3
	usb.println(fault_byte, BIN);
    10f8:	78fb      	ldrb	r3, [r7, #3]
    10fa:	2202      	movs	r2, #2
    10fc:	4619      	mov	r1, r3
    10fe:	482b      	ldr	r0, [pc, #172]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    1100:	4b2c      	ldr	r3, [pc, #176]	; (11b4 <_ZN13LTC2983_Class16print_fault_dataEh+0xd0>)
    1102:	4798      	blx	r3

	if (fault_byte & SENSOR_HARD_FAILURE)
    1104:	f997 3003 	ldrsb.w	r3, [r7, #3]
    1108:	2b00      	cmp	r3, #0
    110a:	da03      	bge.n	1114 <_ZN13LTC2983_Class16print_fault_dataEh+0x30>
	usb.println(F("  - SENSOR HARD FALURE"));
    110c:	492a      	ldr	r1, [pc, #168]	; (11b8 <_ZN13LTC2983_Class16print_fault_dataEh+0xd4>)
    110e:	4827      	ldr	r0, [pc, #156]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    1110:	4b2a      	ldr	r3, [pc, #168]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    1112:	4798      	blx	r3
	if (fault_byte & ADC_HARD_FAILURE)
    1114:	78fb      	ldrb	r3, [r7, #3]
    1116:	f003 0340 	and.w	r3, r3, #64	; 0x40
    111a:	2b00      	cmp	r3, #0
    111c:	d003      	beq.n	1126 <_ZN13LTC2983_Class16print_fault_dataEh+0x42>
	usb.println(F("  - ADC_HARD_FAILURE"));
    111e:	4928      	ldr	r1, [pc, #160]	; (11c0 <_ZN13LTC2983_Class16print_fault_dataEh+0xdc>)
    1120:	4822      	ldr	r0, [pc, #136]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    1122:	4b26      	ldr	r3, [pc, #152]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    1124:	4798      	blx	r3
	if (fault_byte & CJ_HARD_FAILURE)
    1126:	78fb      	ldrb	r3, [r7, #3]
    1128:	f003 0320 	and.w	r3, r3, #32
    112c:	2b00      	cmp	r3, #0
    112e:	d003      	beq.n	1138 <_ZN13LTC2983_Class16print_fault_dataEh+0x54>
	usb.println(F("  - CJ_HARD_FAILURE"));
    1130:	4924      	ldr	r1, [pc, #144]	; (11c4 <_ZN13LTC2983_Class16print_fault_dataEh+0xe0>)
    1132:	481e      	ldr	r0, [pc, #120]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    1134:	4b21      	ldr	r3, [pc, #132]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    1136:	4798      	blx	r3
	if (fault_byte & CJ_SOFT_FAILURE)
    1138:	78fb      	ldrb	r3, [r7, #3]
    113a:	f003 0310 	and.w	r3, r3, #16
    113e:	2b00      	cmp	r3, #0
    1140:	d003      	beq.n	114a <_ZN13LTC2983_Class16print_fault_dataEh+0x66>
	usb.println(F("  - CJ_SOFT_FAILURE"));
    1142:	4921      	ldr	r1, [pc, #132]	; (11c8 <_ZN13LTC2983_Class16print_fault_dataEh+0xe4>)
    1144:	4819      	ldr	r0, [pc, #100]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    1146:	4b1d      	ldr	r3, [pc, #116]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    1148:	4798      	blx	r3
	if (fault_byte & SENSOR_ABOVE)
    114a:	78fb      	ldrb	r3, [r7, #3]
    114c:	f003 0308 	and.w	r3, r3, #8
    1150:	2b00      	cmp	r3, #0
    1152:	d003      	beq.n	115c <_ZN13LTC2983_Class16print_fault_dataEh+0x78>
	usb.println(F("  - SENSOR_ABOVE"));
    1154:	491d      	ldr	r1, [pc, #116]	; (11cc <_ZN13LTC2983_Class16print_fault_dataEh+0xe8>)
    1156:	4815      	ldr	r0, [pc, #84]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    1158:	4b18      	ldr	r3, [pc, #96]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    115a:	4798      	blx	r3
	if (fault_byte & SENSOR_BELOW)
    115c:	78fb      	ldrb	r3, [r7, #3]
    115e:	f003 0304 	and.w	r3, r3, #4
    1162:	2b00      	cmp	r3, #0
    1164:	d003      	beq.n	116e <_ZN13LTC2983_Class16print_fault_dataEh+0x8a>
	usb.println(F("  - SENSOR_BELOW"));
    1166:	491a      	ldr	r1, [pc, #104]	; (11d0 <_ZN13LTC2983_Class16print_fault_dataEh+0xec>)
    1168:	4810      	ldr	r0, [pc, #64]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    116a:	4b14      	ldr	r3, [pc, #80]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    116c:	4798      	blx	r3
	if (fault_byte & ADC_RANGE_ERROR)
    116e:	78fb      	ldrb	r3, [r7, #3]
    1170:	f003 0302 	and.w	r3, r3, #2
    1174:	2b00      	cmp	r3, #0
    1176:	d003      	beq.n	1180 <_ZN13LTC2983_Class16print_fault_dataEh+0x9c>
	usb.println(F("  - ADC_RANGE_ERROR"));
    1178:	4916      	ldr	r1, [pc, #88]	; (11d4 <_ZN13LTC2983_Class16print_fault_dataEh+0xf0>)
    117a:	480c      	ldr	r0, [pc, #48]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    117c:	4b0f      	ldr	r3, [pc, #60]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    117e:	4798      	blx	r3
	if (!(fault_byte & VALID))
    1180:	78fb      	ldrb	r3, [r7, #3]
    1182:	f003 0301 	and.w	r3, r3, #1
    1186:	2b00      	cmp	r3, #0
    1188:	d103      	bne.n	1192 <_ZN13LTC2983_Class16print_fault_dataEh+0xae>
	usb.println(F("INVALID READING !!!!!!"));
    118a:	4913      	ldr	r1, [pc, #76]	; (11d8 <_ZN13LTC2983_Class16print_fault_dataEh+0xf4>)
    118c:	4807      	ldr	r0, [pc, #28]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    118e:	4b0b      	ldr	r3, [pc, #44]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    1190:	4798      	blx	r3
	if (fault_byte == 0b11111111)
    1192:	78fb      	ldrb	r3, [r7, #3]
    1194:	2bff      	cmp	r3, #255	; 0xff
    1196:	d103      	bne.n	11a0 <_ZN13LTC2983_Class16print_fault_dataEh+0xbc>
	usb.println(F("CONFIGURATION ERROR !!!!!!"));
    1198:	4910      	ldr	r1, [pc, #64]	; (11dc <_ZN13LTC2983_Class16print_fault_dataEh+0xf8>)
    119a:	4804      	ldr	r0, [pc, #16]	; (11ac <_ZN13LTC2983_Class16print_fault_dataEh+0xc8>)
    119c:	4b07      	ldr	r3, [pc, #28]	; (11bc <_ZN13LTC2983_Class16print_fault_dataEh+0xd8>)
    119e:	4798      	blx	r3
}
    11a0:	bf00      	nop
    11a2:	3708      	adds	r7, #8
    11a4:	46bd      	mov	sp, r7
    11a6:	bd80      	pop	{r7, pc}
    11a8:	0001369c 	.word	0x0001369c
    11ac:	200017d0 	.word	0x200017d0
    11b0:	00002999 	.word	0x00002999
    11b4:	00002b11 	.word	0x00002b11
    11b8:	000136ac 	.word	0x000136ac
    11bc:	00002ab9 	.word	0x00002ab9
    11c0:	000136c4 	.word	0x000136c4
    11c4:	000136dc 	.word	0x000136dc
    11c8:	000136f0 	.word	0x000136f0
    11cc:	00013704 	.word	0x00013704
    11d0:	00013718 	.word	0x00013718
    11d4:	0001372c 	.word	0x0001372c
    11d8:	00013740 	.word	0x00013740
    11dc:	00013758 	.word	0x00013758

000011e0 <_ZN13LTC2983_Class19transfer_four_bytesEhhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint8_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
    11e0:	b590      	push	{r4, r7, lr}
    11e2:	b08b      	sub	sp, #44	; 0x2c
    11e4:	af02      	add	r7, sp, #8
    11e6:	6078      	str	r0, [r7, #4]
    11e8:	4608      	mov	r0, r1
    11ea:	4611      	mov	r1, r2
    11ec:	461a      	mov	r2, r3
    11ee:	4603      	mov	r3, r0
    11f0:	70fb      	strb	r3, [r7, #3]
    11f2:	460b      	mov	r3, r1
    11f4:	70bb      	strb	r3, [r7, #2]
    11f6:	4613      	mov	r3, r2
    11f8:	803b      	strh	r3, [r7, #0]
	uint32_t output_data;
	volatile uint8_t tx[7], rx[7];

	tx[0] = ram_read_or_write;
    11fa:	78bb      	ldrb	r3, [r7, #2]
    11fc:	753b      	strb	r3, [r7, #20]
	tx[1] = highByte(start_address);
    11fe:	883b      	ldrh	r3, [r7, #0]
    1200:	121b      	asrs	r3, r3, #8
    1202:	b2db      	uxtb	r3, r3
    1204:	757b      	strb	r3, [r7, #21]
	tx[2] = lowByte(start_address);
    1206:	883b      	ldrh	r3, [r7, #0]
    1208:	b2db      	uxtb	r3, r3
    120a:	75bb      	strb	r3, [r7, #22]
	tx[3] = (uint8_t)(input_data >> 24);
    120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    120e:	0e1b      	lsrs	r3, r3, #24
    1210:	b2db      	uxtb	r3, r3
    1212:	75fb      	strb	r3, [r7, #23]
	tx[4] = (uint8_t)(input_data >> 16);
    1214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1216:	0c1b      	lsrs	r3, r3, #16
    1218:	b2db      	uxtb	r3, r3
    121a:	763b      	strb	r3, [r7, #24]
	tx[5] = (uint8_t)(input_data >> 8);
    121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    121e:	0a1b      	lsrs	r3, r3, #8
    1220:	b2db      	uxtb	r3, r3
    1222:	767b      	strb	r3, [r7, #25]
	tx[6] = (uint8_t) input_data;
    1224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1226:	b2db      	uxtb	r3, r3
    1228:	76bb      	strb	r3, [r7, #26]

	spiLT.spi_transfer_block(chip_select,(uint8_t*)tx,(uint8_t*)rx, 7);
    122a:	6878      	ldr	r0, [r7, #4]
    122c:	f107 040c 	add.w	r4, r7, #12
    1230:	f107 0214 	add.w	r2, r7, #20
    1234:	78f9      	ldrb	r1, [r7, #3]
    1236:	2307      	movs	r3, #7
    1238:	9300      	str	r3, [sp, #0]
    123a:	4623      	mov	r3, r4
    123c:	4c0a      	ldr	r4, [pc, #40]	; (1268 <_ZN13LTC2983_Class19transfer_four_bytesEhhtm+0x88>)
    123e:	47a0      	blx	r4

	output_data = (uint32_t) rx[3] << 24 |
    1240:	7bfb      	ldrb	r3, [r7, #15]
    1242:	b2db      	uxtb	r3, r3
    1244:	061a      	lsls	r2, r3, #24
	(uint32_t) rx[4] << 16 |
    1246:	7c3b      	ldrb	r3, [r7, #16]
    1248:	b2db      	uxtb	r3, r3
    124a:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx[3] << 24 |
    124c:	431a      	orrs	r2, r3
	(uint32_t) rx[5] << 8  |
    124e:	7c7b      	ldrb	r3, [r7, #17]
    1250:	b2db      	uxtb	r3, r3
    1252:	021b      	lsls	r3, r3, #8
	(uint32_t) rx[4] << 16 |
    1254:	4313      	orrs	r3, r2
	(uint32_t) rx[6];
    1256:	7cba      	ldrb	r2, [r7, #18]
    1258:	b2d2      	uxtb	r2, r2
	output_data = (uint32_t) rx[3] << 24 |
    125a:	4313      	orrs	r3, r2
    125c:	61fb      	str	r3, [r7, #28]

	return output_data;
    125e:	69fb      	ldr	r3, [r7, #28]
}
    1260:	4618      	mov	r0, r3
    1262:	3724      	adds	r7, #36	; 0x24
    1264:	46bd      	mov	sp, r7
    1266:	bd90      	pop	{r4, r7, pc}
    1268:	00001631 	.word	0x00001631

0000126c <_ZN13LTC2983_Class13transfer_byteEhhth>:


uint8_t LTC2983_Class::transfer_byte(uint8_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
    126c:	b590      	push	{r4, r7, lr}
    126e:	b087      	sub	sp, #28
    1270:	af02      	add	r7, sp, #8
    1272:	6078      	str	r0, [r7, #4]
    1274:	4608      	mov	r0, r1
    1276:	4611      	mov	r1, r2
    1278:	461a      	mov	r2, r3
    127a:	4603      	mov	r3, r0
    127c:	70fb      	strb	r3, [r7, #3]
    127e:	460b      	mov	r3, r1
    1280:	70bb      	strb	r3, [r7, #2]
    1282:	4613      	mov	r3, r2
    1284:	803b      	strh	r3, [r7, #0]
	volatile uint8_t tx[4], rx[4];

	tx[0] = ram_read_or_write;
    1286:	78bb      	ldrb	r3, [r7, #2]
    1288:	733b      	strb	r3, [r7, #12]
	tx[1] = (uint8_t)(start_address >> 8);
    128a:	883b      	ldrh	r3, [r7, #0]
    128c:	121b      	asrs	r3, r3, #8
    128e:	b2db      	uxtb	r3, r3
    1290:	737b      	strb	r3, [r7, #13]
	tx[2] = (uint8_t)start_address;
    1292:	883b      	ldrh	r3, [r7, #0]
    1294:	b2db      	uxtb	r3, r3
    1296:	73bb      	strb	r3, [r7, #14]
	tx[3] = input_data;
    1298:	f897 3020 	ldrb.w	r3, [r7, #32]
    129c:	73fb      	strb	r3, [r7, #15]
	spiLT.spi_transfer_block(chip_select, (uint8_t*)tx, (uint8_t*)rx, 4);
    129e:	6878      	ldr	r0, [r7, #4]
    12a0:	f107 0408 	add.w	r4, r7, #8
    12a4:	f107 020c 	add.w	r2, r7, #12
    12a8:	78f9      	ldrb	r1, [r7, #3]
    12aa:	2304      	movs	r3, #4
    12ac:	9300      	str	r3, [sp, #0]
    12ae:	4623      	mov	r3, r4
    12b0:	4c03      	ldr	r4, [pc, #12]	; (12c0 <_ZN13LTC2983_Class13transfer_byteEhhth+0x54>)
    12b2:	47a0      	blx	r4
	return rx[0];
    12b4:	7a3b      	ldrb	r3, [r7, #8]
    12b6:	b2db      	uxtb	r3, r3
}
    12b8:	4618      	mov	r0, r3
    12ba:	3714      	adds	r7, #20
    12bc:	46bd      	mov	sp, r7
    12be:	bd90      	pop	{r4, r7, pc}
    12c0:	00001631 	.word	0x00001631

000012c4 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
    12c4:	b480      	push	{r7}
    12c6:	b083      	sub	sp, #12
    12c8:	af00      	add	r7, sp, #0
    12ca:	6078      	str	r0, [r7, #4]
    12cc:	460b      	mov	r3, r1
    12ce:	807b      	strh	r3, [r7, #2]
    12d0:	4613      	mov	r3, r2
    12d2:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
    12d4:	787b      	ldrb	r3, [r7, #1]
    12d6:	3b01      	subs	r3, #1
    12d8:	b29b      	uxth	r3, r3
    12da:	009b      	lsls	r3, r3, #2
    12dc:	b29a      	uxth	r2, r3
    12de:	887b      	ldrh	r3, [r7, #2]
    12e0:	4413      	add	r3, r2
    12e2:	b29b      	uxth	r3, r3
}
    12e4:	4618      	mov	r0, r3
    12e6:	370c      	adds	r7, #12
    12e8:	46bd      	mov	sp, r7
    12ea:	bc80      	pop	{r7}
    12ec:	4770      	bx	lr
	...

000012f0 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
    12f0:	b590      	push	{r4, r7, lr}
    12f2:	b085      	sub	sp, #20
    12f4:	af00      	add	r7, sp, #0
    12f6:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	// ----- Channel 2: Assign Sense Resistor -----
	channel_assignment_data =
    12f8:	4b19      	ldr	r3, [pc, #100]	; (1360 <_ZN13LTC2983_Class18configure_channelsEv+0x70>)
    12fa:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(CHIP_SELECT, 2, channel_assignment_data);
    12fc:	68fb      	ldr	r3, [r7, #12]
    12fe:	2202      	movs	r2, #2
    1300:	213d      	movs	r1, #61	; 0x3d
    1302:	6878      	ldr	r0, [r7, #4]
    1304:	4c17      	ldr	r4, [pc, #92]	; (1364 <_ZN13LTC2983_Class18configure_channelsEv+0x74>)
    1306:	47a0      	blx	r4
	// ----- Channel 4: Assign RTD PT-100 -----
	channel_assignment_data =
    1308:	4b17      	ldr	r3, [pc, #92]	; (1368 <_ZN13LTC2983_Class18configure_channelsEv+0x78>)
    130a:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__2 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(CHIP_SELECT, 4, channel_assignment_data);
    130c:	68fb      	ldr	r3, [r7, #12]
    130e:	2204      	movs	r2, #4
    1310:	213d      	movs	r1, #61	; 0x3d
    1312:	6878      	ldr	r0, [r7, #4]
    1314:	4c13      	ldr	r4, [pc, #76]	; (1364 <_ZN13LTC2983_Class18configure_channelsEv+0x74>)
    1316:	47a0      	blx	r4
	// ----- Channel 6: Assign Sense Resistor -----
	channel_assignment_data =
    1318:	4b11      	ldr	r3, [pc, #68]	; (1360 <_ZN13LTC2983_Class18configure_channelsEv+0x70>)
    131a:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(CHIP_SELECT, 6, channel_assignment_data);
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	2206      	movs	r2, #6
    1320:	213d      	movs	r1, #61	; 0x3d
    1322:	6878      	ldr	r0, [r7, #4]
    1324:	4c0f      	ldr	r4, [pc, #60]	; (1364 <_ZN13LTC2983_Class18configure_channelsEv+0x74>)
    1326:	47a0      	blx	r4
	// ----- Channel 8: Assign RTD PT-100 -----
	channel_assignment_data =
    1328:	4b10      	ldr	r3, [pc, #64]	; (136c <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
    132a:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__6 |
	RTD_NUM_WIRES__4_WIRE |
	RTD_EXCITATION_MODE__ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(CHIP_SELECT, 8, channel_assignment_data);
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	2208      	movs	r2, #8
    1330:	213d      	movs	r1, #61	; 0x3d
    1332:	6878      	ldr	r0, [r7, #4]
    1334:	4c0b      	ldr	r4, [pc, #44]	; (1364 <_ZN13LTC2983_Class18configure_channelsEv+0x74>)
    1336:	47a0      	blx	r4
	// ----- Channel 13: Assign Sense Resistor -----
	channel_assignment_data =
    1338:	4b09      	ldr	r3, [pc, #36]	; (1360 <_ZN13LTC2983_Class18configure_channelsEv+0x70>)
    133a:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(CHIP_SELECT, 13, channel_assignment_data);
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	220d      	movs	r2, #13
    1340:	213d      	movs	r1, #61	; 0x3d
    1342:	6878      	ldr	r0, [r7, #4]
    1344:	4c07      	ldr	r4, [pc, #28]	; (1364 <_ZN13LTC2983_Class18configure_channelsEv+0x74>)
    1346:	47a0      	blx	r4
	// ----- Channel 15: Assign RTD PT-100 -----
	channel_assignment_data =
    1348:	4b09      	ldr	r3, [pc, #36]	; (1370 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
    134a:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__13 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(CHIP_SELECT, 15, channel_assignment_data);
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	220f      	movs	r2, #15
    1350:	213d      	movs	r1, #61	; 0x3d
    1352:	6878      	ldr	r0, [r7, #4]
    1354:	4c03      	ldr	r4, [pc, #12]	; (1364 <_ZN13LTC2983_Class18configure_channelsEv+0x74>)
    1356:	47a0      	blx	r4

}
    1358:	bf00      	nop
    135a:	3714      	adds	r7, #20
    135c:	46bd      	mov	sp, r7
    135e:	bd90      	pop	{r4, r7, pc}
    1360:	e89c4000 	.word	0xe89c4000
    1364:	00000cd5 	.word	0x00000cd5
    1368:	60851000 	.word	0x60851000
    136c:	61a91000 	.word	0x61a91000
    1370:	63451000 	.word	0x63451000

00001374 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
    1374:	b590      	push	{r4, r7, lr}
    1376:	b085      	sub	sp, #20
    1378:	af02      	add	r7, sp, #8
    137a:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(CHIP_SELECT, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
	REJECTION__50_60_HZ);
    137c:	2300      	movs	r3, #0
    137e:	9300      	str	r3, [sp, #0]
    1380:	23f0      	movs	r3, #240	; 0xf0
    1382:	2202      	movs	r2, #2
    1384:	213d      	movs	r1, #61	; 0x3d
    1386:	6878      	ldr	r0, [r7, #4]
    1388:	4c06      	ldr	r4, [pc, #24]	; (13a4 <_ZN13LTC2983_Class27configure_global_parametersEv+0x30>)
    138a:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(CHIP_SELECT, WRITE_TO_RAM, 0xFF, 0);
    138c:	2300      	movs	r3, #0
    138e:	9300      	str	r3, [sp, #0]
    1390:	23ff      	movs	r3, #255	; 0xff
    1392:	2202      	movs	r2, #2
    1394:	213d      	movs	r1, #61	; 0x3d
    1396:	6878      	ldr	r0, [r7, #4]
    1398:	4c02      	ldr	r4, [pc, #8]	; (13a4 <_ZN13LTC2983_Class27configure_global_parametersEv+0x30>)
    139a:	47a0      	blx	r4
}
    139c:	bf00      	nop
    139e:	370c      	adds	r7, #12
    13a0:	46bd      	mov	sp, r7
    13a2:	bd90      	pop	{r4, r7, pc}
    13a4:	0000126d 	.word	0x0000126d

000013a8 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
    13a8:	b590      	push	{r4, r7, lr}
    13aa:	b087      	sub	sp, #28
    13ac:	af02      	add	r7, sp, #8
    13ae:	6078      	str	r0, [r7, #4]
	process_finished = 0;
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	2200      	movs	r2, #0
    13b4:	751a      	strb	r2, [r3, #20]
	uint32_t	timeCounter=0;
    13b6:	2300      	movs	r3, #0
    13b8:	60fb      	str	r3, [r7, #12]
	meassureTimeout=false;
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	2200      	movs	r2, #0
    13be:	729a      	strb	r2, [r3, #10]
	auxTimer->Start_oneShot_task((FUNC_PTR)MeassureTimeout,5000);
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	691b      	ldr	r3, [r3, #16]
    13c4:	f241 3288 	movw	r2, #5000	; 0x1388
    13c8:	491d      	ldr	r1, [pc, #116]	; (1440 <_ZN13LTC2983_Class8SelfTestEv+0x98>)
    13ca:	4618      	mov	r0, r3
    13cc:	4b1d      	ldr	r3, [pc, #116]	; (1444 <_ZN13LTC2983_Class8SelfTestEv+0x9c>)
    13ce:	4798      	blx	r3
	while ((process_finished == 0)&&(!meassureTimeout))
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	7d1b      	ldrb	r3, [r3, #20]
    13d4:	2b00      	cmp	r3, #0
    13d6:	d109      	bne.n	13ec <_ZN13LTC2983_Class8SelfTestEv+0x44>
    13d8:	687b      	ldr	r3, [r7, #4]
    13da:	7a9b      	ldrb	r3, [r3, #10]
    13dc:	b2db      	uxtb	r3, r3
    13de:	f083 0301 	eor.w	r3, r3, #1
    13e2:	b2db      	uxtb	r3, r3
    13e4:	2b00      	cmp	r3, #0
    13e6:	d001      	beq.n	13ec <_ZN13LTC2983_Class8SelfTestEv+0x44>
    13e8:	2301      	movs	r3, #1
    13ea:	e000      	b.n	13ee <_ZN13LTC2983_Class8SelfTestEv+0x46>
    13ec:	2300      	movs	r3, #0
    13ee:	2b00      	cmp	r3, #0
    13f0:	d016      	beq.n	1420 <_ZN13LTC2983_Class8SelfTestEv+0x78>
	{
		data = transfer_byte(CHIP_SELECT, READ_FROM_RAM, COMMAND_STATUS_REGISTER, 0);
    13f2:	2300      	movs	r3, #0
    13f4:	9300      	str	r3, [sp, #0]
    13f6:	2300      	movs	r3, #0
    13f8:	2203      	movs	r2, #3
    13fa:	213d      	movs	r1, #61	; 0x3d
    13fc:	6878      	ldr	r0, [r7, #4]
    13fe:	4c12      	ldr	r4, [pc, #72]	; (1448 <_ZN13LTC2983_Class8SelfTestEv+0xa0>)
    1400:	47a0      	blx	r4
    1402:	4603      	mov	r3, r0
    1404:	461a      	mov	r2, r3
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	755a      	strb	r2, [r3, #21]
		process_finished  = data & 0x40;
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	7d5b      	ldrb	r3, [r3, #21]
    140e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1412:	b2da      	uxtb	r2, r3
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	751a      	strb	r2, [r3, #20]
		delay_ms(1);
    1418:	2001      	movs	r0, #1
    141a:	4b0c      	ldr	r3, [pc, #48]	; (144c <_ZN13LTC2983_Class8SelfTestEv+0xa4>)
    141c:	4798      	blx	r3
	while ((process_finished == 0)&&(!meassureTimeout))
    141e:	e7d7      	b.n	13d0 <_ZN13LTC2983_Class8SelfTestEv+0x28>

	}
	isOK=process_finished==1;
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	7d1b      	ldrb	r3, [r3, #20]
    1424:	2b01      	cmp	r3, #1
    1426:	bf0c      	ite	eq
    1428:	2301      	moveq	r3, #1
    142a:	2300      	movne	r3, #0
    142c:	b2da      	uxtb	r2, r3
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	75da      	strb	r2, [r3, #23]
	return	isOK;
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	7ddb      	ldrb	r3, [r3, #23]
	}
    1436:	4618      	mov	r0, r3
    1438:	3714      	adds	r7, #20
    143a:	46bd      	mov	sp, r7
    143c:	bd90      	pop	{r4, r7, pc}
    143e:	bf00      	nop
    1440:	00000b81 	.word	0x00000b81
    1444:	00002181 	.word	0x00002181
    1448:	0000126d 	.word	0x0000126d
    144c:	00004e01 	.word	0x00004e01

00001450 <_ZlsIA17_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
    1450:	b580      	push	{r7, lr}
    1452:	b082      	sub	sp, #8
    1454:	af00      	add	r7, sp, #0
    1456:	6078      	str	r0, [r7, #4]
    1458:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    145a:	6839      	ldr	r1, [r7, #0]
    145c:	6878      	ldr	r0, [r7, #4]
    145e:	4b03      	ldr	r3, [pc, #12]	; (146c <_ZlsIA17_cER5PrintS2_RKT_+0x1c>)
    1460:	4798      	blx	r3
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	4618      	mov	r0, r3
    1466:	3708      	adds	r7, #8
    1468:	46bd      	mov	sp, r7
    146a:	bd80      	pop	{r7, pc}
    146c:	000029b9 	.word	0x000029b9

00001470 <_Z41__static_initialization_and_destruction_0ii>:

LTC2983_Class	temperatures(&SPI_TEMP);
    1470:	b580      	push	{r7, lr}
    1472:	b082      	sub	sp, #8
    1474:	af00      	add	r7, sp, #0
    1476:	6078      	str	r0, [r7, #4]
    1478:	6039      	str	r1, [r7, #0]
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	2b01      	cmp	r3, #1
    147e:	d10d      	bne.n	149c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1480:	683b      	ldr	r3, [r7, #0]
    1482:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1486:	4293      	cmp	r3, r2
    1488:	d108      	bne.n	149c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    148a:	4906      	ldr	r1, [pc, #24]	; (14a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    148c:	4806      	ldr	r0, [pc, #24]	; (14a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    148e:	4b07      	ldr	r3, [pc, #28]	; (14ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1490:	4798      	blx	r3
    1492:	4a07      	ldr	r2, [pc, #28]	; (14b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1494:	4907      	ldr	r1, [pc, #28]	; (14b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1496:	4804      	ldr	r0, [pc, #16]	; (14a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1498:	4b07      	ldr	r3, [pc, #28]	; (14b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    149a:	4798      	blx	r3
    149c:	bf00      	nop
    149e:	3708      	adds	r7, #8
    14a0:	46bd      	mov	sp, r7
    14a2:	bd80      	pop	{r7, pc}
    14a4:	20001f1c 	.word	0x20001f1c
    14a8:	20001178 	.word	0x20001178
    14ac:	00000bc1 	.word	0x00000bc1
    14b0:	20000000 	.word	0x20000000
    14b4:	00000ba1 	.word	0x00000ba1
    14b8:	000105fd 	.word	0x000105fd

000014bc <_GLOBAL__sub_I_ptrLTCClass>:
    14bc:	b580      	push	{r7, lr}
    14be:	af00      	add	r7, sp, #0
    14c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    14c4:	2001      	movs	r0, #1
    14c6:	4b01      	ldr	r3, [pc, #4]	; (14cc <_GLOBAL__sub_I_ptrLTCClass+0x10>)
    14c8:	4798      	blx	r3
    14ca:	bd80      	pop	{r7, pc}
    14cc:	00001471 	.word	0x00001471

000014d0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    14d0:	b480      	push	{r7}
    14d2:	b085      	sub	sp, #20
    14d4:	af00      	add	r7, sp, #0
    14d6:	60f8      	str	r0, [r7, #12]
    14d8:	460b      	mov	r3, r1
    14da:	607a      	str	r2, [r7, #4]
    14dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14de:	7afb      	ldrb	r3, [r7, #11]
    14e0:	68fa      	ldr	r2, [r7, #12]
    14e2:	01db      	lsls	r3, r3, #7
    14e4:	4413      	add	r3, r2
    14e6:	3318      	adds	r3, #24
    14e8:	687a      	ldr	r2, [r7, #4]
    14ea:	601a      	str	r2, [r3, #0]
}
    14ec:	bf00      	nop
    14ee:	3714      	adds	r7, #20
    14f0:	46bd      	mov	sp, r7
    14f2:	bc80      	pop	{r7}
    14f4:	4770      	bx	lr

000014f6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    14f6:	b480      	push	{r7}
    14f8:	b085      	sub	sp, #20
    14fa:	af00      	add	r7, sp, #0
    14fc:	60f8      	str	r0, [r7, #12]
    14fe:	460b      	mov	r3, r1
    1500:	607a      	str	r2, [r7, #4]
    1502:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1504:	7afb      	ldrb	r3, [r7, #11]
    1506:	68fa      	ldr	r2, [r7, #12]
    1508:	01db      	lsls	r3, r3, #7
    150a:	4413      	add	r3, r2
    150c:	3314      	adds	r3, #20
    150e:	687a      	ldr	r2, [r7, #4]
    1510:	601a      	str	r2, [r3, #0]
}
    1512:	bf00      	nop
    1514:	3714      	adds	r7, #20
    1516:	46bd      	mov	sp, r7
    1518:	bc80      	pop	{r7}
    151a:	4770      	bx	lr

0000151c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    151c:	b580      	push	{r7, lr}
    151e:	b082      	sub	sp, #8
    1520:	af00      	add	r7, sp, #0
    1522:	4603      	mov	r3, r0
    1524:	6039      	str	r1, [r7, #0]
    1526:	71fb      	strb	r3, [r7, #7]
    1528:	4613      	mov	r3, r2
    152a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    152c:	79bb      	ldrb	r3, [r7, #6]
    152e:	2b00      	cmp	r3, #0
    1530:	d006      	beq.n	1540 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1532:	79fb      	ldrb	r3, [r7, #7]
    1534:	683a      	ldr	r2, [r7, #0]
    1536:	4619      	mov	r1, r3
    1538:	4806      	ldr	r0, [pc, #24]	; (1554 <_gpio_set_level+0x38>)
    153a:	4b07      	ldr	r3, [pc, #28]	; (1558 <_gpio_set_level+0x3c>)
    153c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    153e:	e005      	b.n	154c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1540:	79fb      	ldrb	r3, [r7, #7]
    1542:	683a      	ldr	r2, [r7, #0]
    1544:	4619      	mov	r1, r3
    1546:	4803      	ldr	r0, [pc, #12]	; (1554 <_gpio_set_level+0x38>)
    1548:	4b04      	ldr	r3, [pc, #16]	; (155c <_gpio_set_level+0x40>)
    154a:	4798      	blx	r3
}
    154c:	bf00      	nop
    154e:	3708      	adds	r7, #8
    1550:	46bd      	mov	sp, r7
    1552:	bd80      	pop	{r7, pc}
    1554:	41008000 	.word	0x41008000
    1558:	000014d1 	.word	0x000014d1
    155c:	000014f7 	.word	0x000014f7

00001560 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1560:	b580      	push	{r7, lr}
    1562:	b082      	sub	sp, #8
    1564:	af00      	add	r7, sp, #0
    1566:	4603      	mov	r3, r0
    1568:	460a      	mov	r2, r1
    156a:	71fb      	strb	r3, [r7, #7]
    156c:	4613      	mov	r3, r2
    156e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1570:	79fb      	ldrb	r3, [r7, #7]
    1572:	115b      	asrs	r3, r3, #5
    1574:	b2d8      	uxtb	r0, r3
    1576:	79fb      	ldrb	r3, [r7, #7]
    1578:	f003 031f 	and.w	r3, r3, #31
    157c:	2201      	movs	r2, #1
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	79ba      	ldrb	r2, [r7, #6]
    1584:	4619      	mov	r1, r3
    1586:	4b03      	ldr	r3, [pc, #12]	; (1594 <gpio_set_pin_level+0x34>)
    1588:	4798      	blx	r3
}
    158a:	bf00      	nop
    158c:	3708      	adds	r7, #8
    158e:	46bd      	mov	sp, r7
    1590:	bd80      	pop	{r7, pc}
    1592:	bf00      	nop
    1594:	0000151d 	.word	0x0000151d

00001598 <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
    1598:	b480      	push	{r7}
    159a:	b083      	sub	sp, #12
    159c:	af00      	add	r7, sp, #0
    159e:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
    15a0:	4a04      	ldr	r2, [pc, #16]	; (15b4 <_ZN6LT_SPIC1Ev+0x1c>)
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	6013      	str	r3, [r2, #0]
} //LT_SPI
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	4618      	mov	r0, r3
    15aa:	370c      	adds	r7, #12
    15ac:	46bd      	mov	sp, r7
    15ae:	bc80      	pop	{r7}
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop
    15b4:	200011b4 	.word	0x200011b4

000015b8 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
    15b8:	b480      	push	{r7}
    15ba:	b083      	sub	sp, #12
    15bc:	af00      	add	r7, sp, #0
    15be:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
    15c0:	687b      	ldr	r3, [r7, #4]
    15c2:	4618      	mov	r0, r3
    15c4:	370c      	adds	r7, #12
    15c6:	46bd      	mov	sp, r7
    15c8:	bc80      	pop	{r7}
    15ca:	4770      	bx	lr

000015cc <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
    15cc:	b580      	push	{r7, lr}
    15ce:	b082      	sub	sp, #8
    15d0:	af00      	add	r7, sp, #0
    15d2:	6078      	str	r0, [r7, #4]
	spiTemp.set_descriptor(SPIA);
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	685b      	ldr	r3, [r3, #4]
    15d8:	4619      	mov	r1, r3
    15da:	4808      	ldr	r0, [pc, #32]	; (15fc <_ZN6LT_SPI4initEv+0x30>)
    15dc:	4b08      	ldr	r3, [pc, #32]	; (1600 <_ZN6LT_SPI4initEv+0x34>)
    15de:	4798      	blx	r3
	spiTemp.init();
    15e0:	4806      	ldr	r0, [pc, #24]	; (15fc <_ZN6LT_SPI4initEv+0x30>)
    15e2:	4b08      	ldr	r3, [pc, #32]	; (1604 <_ZN6LT_SPI4initEv+0x38>)
    15e4:	4798      	blx	r3
	spiTemp.enable();
    15e6:	4805      	ldr	r0, [pc, #20]	; (15fc <_ZN6LT_SPI4initEv+0x30>)
    15e8:	4b07      	ldr	r3, [pc, #28]	; (1608 <_ZN6LT_SPI4initEv+0x3c>)
    15ea:	4798      	blx	r3
	ready=true;
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	2201      	movs	r2, #1
    15f0:	701a      	strb	r2, [r3, #0]
}
    15f2:	bf00      	nop
    15f4:	3708      	adds	r7, #8
    15f6:	46bd      	mov	sp, r7
    15f8:	bd80      	pop	{r7, pc}
    15fa:	bf00      	nop
    15fc:	200011b8 	.word	0x200011b8
    1600:	00001951 	.word	0x00001951
    1604:	00001975 	.word	0x00001975
    1608:	000019c9 	.word	0x000019c9

0000160c <_ZN6LT_SPI14set_descriptorEP22spi_m_async_descriptor>:
void	LT_SPI::set_descriptor(spi_m_async_descriptor * i2c_a){
    160c:	b480      	push	{r7}
    160e:	b083      	sub	sp, #12
    1610:	af00      	add	r7, sp, #0
    1612:	6078      	str	r0, [r7, #4]
    1614:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	683a      	ldr	r2, [r7, #0]
    161a:	605a      	str	r2, [r3, #4]
	ptrLTSPIClass=this;
    161c:	4a03      	ldr	r2, [pc, #12]	; (162c <_ZN6LT_SPI14set_descriptorEP22spi_m_async_descriptor+0x20>)
    161e:	687b      	ldr	r3, [r7, #4]
    1620:	6013      	str	r3, [r2, #0]
}
    1622:	bf00      	nop
    1624:	370c      	adds	r7, #12
    1626:	46bd      	mov	sp, r7
    1628:	bc80      	pop	{r7}
    162a:	4770      	bx	lr
    162c:	200011b4 	.word	0x200011b4

00001630 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint8_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
    1630:	b580      	push	{r7, lr}
    1632:	b086      	sub	sp, #24
    1634:	af00      	add	r7, sp, #0
    1636:	60f8      	str	r0, [r7, #12]
    1638:	607a      	str	r2, [r7, #4]
    163a:	603b      	str	r3, [r7, #0]
    163c:	460b      	mov	r3, r1
    163e:	72fb      	strb	r3, [r7, #11]
	uint8_t rOrw=*tx;
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	75bb      	strb	r3, [r7, #22]
	gpio_set_pin_level(cs_pin,false)  ;               //! 1) Pull CS low
    1646:	7afb      	ldrb	r3, [r7, #11]
    1648:	2100      	movs	r1, #0
    164a:	4618      	mov	r0, r3
    164c:	4b31      	ldr	r3, [pc, #196]	; (1714 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe4>)
    164e:	4798      	blx	r3
	
	switch(rOrw){
    1650:	7dbb      	ldrb	r3, [r7, #22]
    1652:	2b02      	cmp	r3, #2
    1654:	d002      	beq.n	165c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x2c>
    1656:	2b03      	cmp	r3, #3
    1658:	d010      	beq.n	167c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x4c>
    165a:	e038      	b.n	16ce <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x9e>
		case WRITE_TO_RAM:
			spiTemp.write(tx,length);				//! 2) Read byte and send byte
    165c:	f897 3020 	ldrb.w	r3, [r7, #32]
    1660:	461a      	mov	r2, r3
    1662:	6879      	ldr	r1, [r7, #4]
    1664:	482c      	ldr	r0, [pc, #176]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    1666:	4b2d      	ldr	r3, [pc, #180]	; (171c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
    1668:	4798      	blx	r3
			while(!spiTemp.xferDone);
    166a:	4b2b      	ldr	r3, [pc, #172]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    166c:	781b      	ldrb	r3, [r3, #0]
    166e:	b2db      	uxtb	r3, r3
    1670:	f083 0301 	eor.w	r3, r3, #1
    1674:	b2db      	uxtb	r3, r3
    1676:	2b00      	cmp	r3, #0
    1678:	d042      	beq.n	1700 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd0>
    167a:	e7f6      	b.n	166a <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x3a>
			break;
		case READ_FROM_RAM:
			spiTemp.write(tx,3); 
    167c:	2203      	movs	r2, #3
    167e:	6879      	ldr	r1, [r7, #4]
    1680:	4825      	ldr	r0, [pc, #148]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    1682:	4b26      	ldr	r3, [pc, #152]	; (171c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
    1684:	4798      	blx	r3
			//while(!spiTemp.xferDone);
			if (length>4)
    1686:	f897 3020 	ldrb.w	r3, [r7, #32]
    168a:	2b04      	cmp	r3, #4
    168c:	dd19      	ble.n	16c2 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x92>
			{
				for (uint8_t i=0;i<length;i++)
    168e:	2300      	movs	r3, #0
    1690:	75fb      	strb	r3, [r7, #23]
    1692:	7dfa      	ldrb	r2, [r7, #23]
    1694:	f897 3020 	ldrb.w	r3, [r7, #32]
    1698:	429a      	cmp	r2, r3
    169a:	da0b      	bge.n	16b4 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x84>
				{
					//spiTemp.write(tx,1); tx++;
					//while(!spiTemp.xferDone);
					spiTemp.read(rx,1); rx++;
    169c:	2201      	movs	r2, #1
    169e:	6839      	ldr	r1, [r7, #0]
    16a0:	481d      	ldr	r0, [pc, #116]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    16a2:	4b1f      	ldr	r3, [pc, #124]	; (1720 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
    16a4:	4798      	blx	r3
    16a6:	683b      	ldr	r3, [r7, #0]
    16a8:	3301      	adds	r3, #1
    16aa:	603b      	str	r3, [r7, #0]
				for (uint8_t i=0;i<length;i++)
    16ac:	7dfb      	ldrb	r3, [r7, #23]
    16ae:	3301      	adds	r3, #1
    16b0:	75fb      	strb	r3, [r7, #23]
    16b2:	e7ee      	b.n	1692 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0x62>
							
				}
				rx-=length;
    16b4:	f897 3020 	ldrb.w	r3, [r7, #32]
    16b8:	425b      	negs	r3, r3
    16ba:	683a      	ldr	r2, [r7, #0]
    16bc:	4413      	add	r3, r2
    16be:	603b      	str	r3, [r7, #0]
			else
			{
				spiTemp.read(rx,1);
			}
	
			break;
    16c0:	e01f      	b.n	1702 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
				spiTemp.read(rx,1);
    16c2:	2201      	movs	r2, #1
    16c4:	6839      	ldr	r1, [r7, #0]
    16c6:	4814      	ldr	r0, [pc, #80]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    16c8:	4b15      	ldr	r3, [pc, #84]	; (1720 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
    16ca:	4798      	blx	r3
			break;
    16cc:	e019      	b.n	1702 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
		default:
			spiTemp.write(tx,length);             //! 2) Read byte and send byte
    16ce:	f897 3020 	ldrb.w	r3, [r7, #32]
    16d2:	461a      	mov	r2, r3
    16d4:	6879      	ldr	r1, [r7, #4]
    16d6:	4810      	ldr	r0, [pc, #64]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    16d8:	4b10      	ldr	r3, [pc, #64]	; (171c <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xec>)
    16da:	4798      	blx	r3
			while(!spiTemp.xferDone);
    16dc:	4b0e      	ldr	r3, [pc, #56]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    16de:	781b      	ldrb	r3, [r3, #0]
    16e0:	b2db      	uxtb	r3, r3
    16e2:	f083 0301 	eor.w	r3, r3, #1
    16e6:	b2db      	uxtb	r3, r3
    16e8:	2b00      	cmp	r3, #0
    16ea:	d000      	beq.n	16ee <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xbe>
    16ec:	e7f6      	b.n	16dc <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xac>
			spiTemp.read(rx,length-3);
    16ee:	f897 3020 	ldrb.w	r3, [r7, #32]
    16f2:	3b03      	subs	r3, #3
    16f4:	461a      	mov	r2, r3
    16f6:	6839      	ldr	r1, [r7, #0]
    16f8:	4807      	ldr	r0, [pc, #28]	; (1718 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe8>)
    16fa:	4b09      	ldr	r3, [pc, #36]	; (1720 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xf0>)
    16fc:	4798      	blx	r3
			break;
    16fe:	e000      	b.n	1702 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xd2>
			break;
    1700:	bf00      	nop


	


	gpio_set_pin_level(cs_pin,true)   ;              //! 3) Pull CS high
    1702:	7afb      	ldrb	r3, [r7, #11]
    1704:	2101      	movs	r1, #1
    1706:	4618      	mov	r0, r3
    1708:	4b02      	ldr	r3, [pc, #8]	; (1714 <_ZN6LT_SPI18spi_transfer_blockEhPhS0_h+0xe4>)
    170a:	4798      	blx	r3
}
    170c:	bf00      	nop
    170e:	3718      	adds	r7, #24
    1710:	46bd      	mov	sp, r7
    1712:	bd80      	pop	{r7, pc}
    1714:	00001561 	.word	0x00001561
    1718:	200011b8 	.word	0x200011b8
    171c:	000019f1 	.word	0x000019f1
    1720:	00001a35 	.word	0x00001a35

00001724 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
    1724:	b580      	push	{r7, lr}
    1726:	b082      	sub	sp, #8
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
    172c:	6039      	str	r1, [r7, #0]
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	2b01      	cmp	r3, #1
    1732:	d10c      	bne.n	174e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1734:	683b      	ldr	r3, [r7, #0]
    1736:	f64f 72ff 	movw	r2, #65535	; 0xffff
    173a:	4293      	cmp	r3, r2
    173c:	d107      	bne.n	174e <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
    173e:	4806      	ldr	r0, [pc, #24]	; (1758 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1742:	4798      	blx	r3
    1744:	4a06      	ldr	r2, [pc, #24]	; (1760 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1746:	4907      	ldr	r1, [pc, #28]	; (1764 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1748:	4803      	ldr	r0, [pc, #12]	; (1758 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    174a:	4b07      	ldr	r3, [pc, #28]	; (1768 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    174c:	4798      	blx	r3
}
    174e:	bf00      	nop
    1750:	3708      	adds	r7, #8
    1752:	46bd      	mov	sp, r7
    1754:	bd80      	pop	{r7, pc}
    1756:	bf00      	nop
    1758:	200011b8 	.word	0x200011b8
    175c:	0000191d 	.word	0x0000191d
    1760:	20000000 	.word	0x20000000
    1764:	0000193d 	.word	0x0000193d
    1768:	000105fd 	.word	0x000105fd

0000176c <_GLOBAL__sub_I_ptrLTSPIClass>:
    176c:	b580      	push	{r7, lr}
    176e:	af00      	add	r7, sp, #0
    1770:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1774:	2001      	movs	r0, #1
    1776:	4b01      	ldr	r3, [pc, #4]	; (177c <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
    1778:	4798      	blx	r3
    177a:	bd80      	pop	{r7, pc}
    177c:	00001725 	.word	0x00001725

00001780 <main>:
 */ 

#include "main.h"

int main(void)
{
    1780:	b580      	push	{r7, lr}
    1782:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1784:	4b06      	ldr	r3, [pc, #24]	; (17a0 <main+0x20>)
    1786:	4798      	blx	r3
	
	usb.Init();
    1788:	4806      	ldr	r0, [pc, #24]	; (17a4 <main+0x24>)
    178a:	4b07      	ldr	r3, [pc, #28]	; (17a8 <main+0x28>)
    178c:	4798      	blx	r3
	delay_ms(100);
    178e:	2064      	movs	r0, #100	; 0x64
    1790:	4b06      	ldr	r3, [pc, #24]	; (17ac <main+0x2c>)
    1792:	4798      	blx	r3
	StartLivePulse();
    1794:	4b06      	ldr	r3, [pc, #24]	; (17b0 <main+0x30>)
    1796:	4798      	blx	r3
	LTC2983_test();
    1798:	4b06      	ldr	r3, [pc, #24]	; (17b4 <main+0x34>)
    179a:	4798      	blx	r3
	//QSPIDriverTest();
	//DateTimeTest();
//	EEPROM_Test();
//	IO_ExpanderTest();
		/* Replace with your application code */
	while (1) {
    179c:	e7fe      	b.n	179c <main+0x1c>
    179e:	bf00      	nop
    17a0:	00003439 	.word	0x00003439
    17a4:	200017d0 	.word	0x200017d0
    17a8:	000024b1 	.word	0x000024b1
    17ac:	00004e01 	.word	0x00004e01
    17b0:	000017b9 	.word	0x000017b9
    17b4:	00001805 	.word	0x00001805

000017b8 <_Z14StartLivePulsev>:
		
		
	}
}

uint8_t	StartLivePulse(void){
    17b8:	b580      	push	{r7, lr}
    17ba:	b082      	sub	sp, #8
    17bc:	af00      	add	r7, sp, #0
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
    17be:	490a      	ldr	r1, [pc, #40]	; (17e8 <_Z14StartLivePulsev+0x30>)
    17c0:	480a      	ldr	r0, [pc, #40]	; (17ec <_Z14StartLivePulsev+0x34>)
    17c2:	4b0b      	ldr	r3, [pc, #44]	; (17f0 <_Z14StartLivePulsev+0x38>)
    17c4:	4798      	blx	r3
    17c6:	4603      	mov	r3, r0
    17c8:	490a      	ldr	r1, [pc, #40]	; (17f4 <_Z14StartLivePulsev+0x3c>)
    17ca:	4618      	mov	r0, r3
    17cc:	4b0a      	ldr	r3, [pc, #40]	; (17f8 <_Z14StartLivePulsev+0x40>)
    17ce:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
    17d0:	480a      	ldr	r0, [pc, #40]	; (17fc <_Z14StartLivePulsev+0x44>)
    17d2:	4b0b      	ldr	r3, [pc, #44]	; (1800 <_Z14StartLivePulsev+0x48>)
    17d4:	4798      	blx	r3
    17d6:	4603      	mov	r3, r0
    17d8:	607b      	str	r3, [r7, #4]
	return p;
    17da:	687b      	ldr	r3, [r7, #4]
    17dc:	b2db      	uxtb	r3, r3
}
    17de:	4618      	mov	r0, r3
    17e0:	3708      	adds	r7, #8
    17e2:	46bd      	mov	sp, r7
    17e4:	bd80      	pop	{r7, pc}
    17e6:	bf00      	nop
    17e8:	00013774 	.word	0x00013774
    17ec:	200017d0 	.word	0x200017d0
    17f0:	000018a9 	.word	0x000018a9
    17f4:	00013794 	.word	0x00013794
    17f8:	000018c9 	.word	0x000018c9
    17fc:	20001fbc 	.word	0x20001fbc
    1800:	00005445 	.word	0x00005445

00001804 <_Z12LTC2983_testv>:
		}
	}
	return	 value;
}

void	LTC2983_test(void){
    1804:	b590      	push	{r4, r7, lr}
    1806:	b091      	sub	sp, #68	; 0x44
    1808:	af00      	add	r7, sp, #0
	LTC2983_Class	LTC(&SPI_TEMP);
    180a:	1d3b      	adds	r3, r7, #4
    180c:	491d      	ldr	r1, [pc, #116]	; (1884 <_Z12LTC2983_testv+0x80>)
    180e:	4618      	mov	r0, r3
    1810:	4b1d      	ldr	r3, [pc, #116]	; (1888 <_Z12LTC2983_testv+0x84>)
    1812:	4798      	blx	r3
	LTC.Init();
    1814:	1d3b      	adds	r3, r7, #4
    1816:	4618      	mov	r0, r3
    1818:	4b1c      	ldr	r3, [pc, #112]	; (188c <_Z12LTC2983_testv+0x88>)
    181a:	4798      	blx	r3
	LTC.print_title();
    181c:	1d3b      	adds	r3, r7, #4
    181e:	4618      	mov	r0, r3
    1820:	4b1b      	ldr	r3, [pc, #108]	; (1890 <_Z12LTC2983_testv+0x8c>)
    1822:	4798      	blx	r3
	LTC.configure_channels();
    1824:	1d3b      	adds	r3, r7, #4
    1826:	4618      	mov	r0, r3
    1828:	4b1a      	ldr	r3, [pc, #104]	; (1894 <_Z12LTC2983_testv+0x90>)
    182a:	4798      	blx	r3
	LTC.configure_global_parameters();
    182c:	1d3b      	adds	r3, r7, #4
    182e:	4618      	mov	r0, r3
    1830:	4b19      	ldr	r3, [pc, #100]	; (1898 <_Z12LTC2983_testv+0x94>)
    1832:	4798      	blx	r3
	while (LTC.ready)
    1834:	7b3b      	ldrb	r3, [r7, #12]
    1836:	b2db      	uxtb	r3, r3
    1838:	2b00      	cmp	r3, #0
    183a:	d01b      	beq.n	1874 <_Z12LTC2983_testv+0x70>
	{
		 LTC.measure_channel(CHIP_SELECT, 4, TEMPERATURE);      // Ch 4: RTD PT-100
    183c:	1d38      	adds	r0, r7, #4
    183e:	2302      	movs	r3, #2
    1840:	2204      	movs	r2, #4
    1842:	213d      	movs	r1, #61	; 0x3d
    1844:	4c15      	ldr	r4, [pc, #84]	; (189c <_Z12LTC2983_testv+0x98>)
    1846:	47a0      	blx	r4
		 delay_ms(1);
    1848:	2001      	movs	r0, #1
    184a:	4b15      	ldr	r3, [pc, #84]	; (18a0 <_Z12LTC2983_testv+0x9c>)
    184c:	4798      	blx	r3
		 LTC.measure_channel(CHIP_SELECT, 8, TEMPERATURE);      // Ch 8: RTD PT-100
    184e:	1d38      	adds	r0, r7, #4
    1850:	2302      	movs	r3, #2
    1852:	2208      	movs	r2, #8
    1854:	213d      	movs	r1, #61	; 0x3d
    1856:	4c11      	ldr	r4, [pc, #68]	; (189c <_Z12LTC2983_testv+0x98>)
    1858:	47a0      	blx	r4
		  delay_ms(1);
    185a:	2001      	movs	r0, #1
    185c:	4b10      	ldr	r3, [pc, #64]	; (18a0 <_Z12LTC2983_testv+0x9c>)
    185e:	4798      	blx	r3
		 LTC.measure_channel(CHIP_SELECT, 15, TEMPERATURE);     // Ch 15: RTD PT-100
    1860:	1d38      	adds	r0, r7, #4
    1862:	2302      	movs	r3, #2
    1864:	220f      	movs	r2, #15
    1866:	213d      	movs	r1, #61	; 0x3d
    1868:	4c0c      	ldr	r4, [pc, #48]	; (189c <_Z12LTC2983_testv+0x98>)
    186a:	47a0      	blx	r4
		  delay_ms(1);
    186c:	2001      	movs	r0, #1
    186e:	4b0c      	ldr	r3, [pc, #48]	; (18a0 <_Z12LTC2983_testv+0x9c>)
    1870:	4798      	blx	r3
	while (LTC.ready)
    1872:	e7df      	b.n	1834 <_Z12LTC2983_testv+0x30>
	LTC2983_Class	LTC(&SPI_TEMP);
    1874:	1d3b      	adds	r3, r7, #4
    1876:	4618      	mov	r0, r3
    1878:	4b0a      	ldr	r3, [pc, #40]	; (18a4 <_Z12LTC2983_testv+0xa0>)
    187a:	4798      	blx	r3
	}
	
}
    187c:	bf00      	nop
    187e:	3744      	adds	r7, #68	; 0x44
    1880:	46bd      	mov	sp, r7
    1882:	bd90      	pop	{r4, r7, pc}
    1884:	20001f1c 	.word	0x20001f1c
    1888:	00000bc1 	.word	0x00000bc1
    188c:	00000bf1 	.word	0x00000bf1
    1890:	00000c61 	.word	0x00000c61
    1894:	000012f1 	.word	0x000012f1
    1898:	00001375 	.word	0x00001375
    189c:	00000d2d 	.word	0x00000d2d
    18a0:	00004e01 	.word	0x00004e01
    18a4:	00000ba1 	.word	0x00000ba1

000018a8 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    18a8:	b580      	push	{r7, lr}
    18aa:	b082      	sub	sp, #8
    18ac:	af00      	add	r7, sp, #0
    18ae:	6078      	str	r0, [r7, #4]
    18b0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    18b2:	6839      	ldr	r1, [r7, #0]
    18b4:	6878      	ldr	r0, [r7, #4]
    18b6:	4b03      	ldr	r3, [pc, #12]	; (18c4 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
    18b8:	4798      	blx	r3
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	4618      	mov	r0, r3
    18be:	3708      	adds	r7, #8
    18c0:	46bd      	mov	sp, r7
    18c2:	bd80      	pop	{r7, pc}
    18c4:	000029b9 	.word	0x000029b9

000018c8 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    18c8:	b580      	push	{r7, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
    18d0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    18d2:	6839      	ldr	r1, [r7, #0]
    18d4:	6878      	ldr	r0, [r7, #4]
    18d6:	4b03      	ldr	r3, [pc, #12]	; (18e4 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
    18d8:	4798      	blx	r3
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	4618      	mov	r0, r3
    18de:	3708      	adds	r7, #8
    18e0:	46bd      	mov	sp, r7
    18e2:	bd80      	pop	{r7, pc}
    18e4:	000029b9 	.word	0x000029b9

000018e8 <_ZL15complete_cb_SPIPK22spi_m_async_descriptor>:

#include "SPI_Asyn_Class.h"

 SPI_Asyn_Class* ptrSPIAClass;
static void complete_cb_SPI(const struct spi_m_async_descriptor *const io_descr)
{
    18e8:	b480      	push	{r7}
    18ea:	b083      	sub	sp, #12
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]

	ptrSPIAClass->xferDone=true;
    18f0:	4b04      	ldr	r3, [pc, #16]	; (1904 <_ZL15complete_cb_SPIPK22spi_m_async_descriptor+0x1c>)
    18f2:	681b      	ldr	r3, [r3, #0]
    18f4:	2201      	movs	r2, #1
    18f6:	701a      	strb	r2, [r3, #0]

}
    18f8:	bf00      	nop
    18fa:	370c      	adds	r7, #12
    18fc:	46bd      	mov	sp, r7
    18fe:	bc80      	pop	{r7}
    1900:	4770      	bx	lr
    1902:	bf00      	nop
    1904:	200011d8 	.word	0x200011d8

00001908 <_ZL12error_cb_SPIPK22spi_m_async_descriptor>:
static void error_cb_SPI(const struct spi_m_async_descriptor *const io_descr)
{
    1908:	b480      	push	{r7}
    190a:	b083      	sub	sp, #12
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]

	//ptrSPIAClass->xferDone=true;

}
    1910:	bf00      	nop
    1912:	370c      	adds	r7, #12
    1914:	46bd      	mov	sp, r7
    1916:	bc80      	pop	{r7}
    1918:	4770      	bx	lr
	...

0000191c <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
    191c:	b480      	push	{r7}
    191e:	b083      	sub	sp, #12
    1920:	af00      	add	r7, sp, #0
    1922:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
    1924:	4a04      	ldr	r2, [pc, #16]	; (1938 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	4618      	mov	r0, r3
    192e:	370c      	adds	r7, #12
    1930:	46bd      	mov	sp, r7
    1932:	bc80      	pop	{r7}
    1934:	4770      	bx	lr
    1936:	bf00      	nop
    1938:	200011d8 	.word	0x200011d8

0000193c <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
    193c:	b480      	push	{r7}
    193e:	b083      	sub	sp, #12
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	4618      	mov	r0, r3
    1948:	370c      	adds	r7, #12
    194a:	46bd      	mov	sp, r7
    194c:	bc80      	pop	{r7}
    194e:	4770      	bx	lr

00001950 <_ZN14SPI_Asyn_Class14set_descriptorEP22spi_m_async_descriptor>:



void SPI_Asyn_Class::set_descriptor(spi_m_async_descriptor *spi){
    1950:	b480      	push	{r7}
    1952:	b083      	sub	sp, #12
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
    1958:	6039      	str	r1, [r7, #0]
	ptrSPIAClass=this;
    195a:	4a05      	ldr	r2, [pc, #20]	; (1970 <_ZN14SPI_Asyn_Class14set_descriptorEP22spi_m_async_descriptor+0x20>)
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	6013      	str	r3, [r2, #0]
	SPIA=spi;
    1960:	687b      	ldr	r3, [r7, #4]
    1962:	683a      	ldr	r2, [r7, #0]
    1964:	615a      	str	r2, [r3, #20]
}
    1966:	bf00      	nop
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr
    1970:	200011d8 	.word	0x200011d8

00001974 <_ZN14SPI_Asyn_Class4initEv>:

void SPI_Asyn_Class::init(){
    1974:	b580      	push	{r7, lr}
    1976:	b082      	sub	sp, #8
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]

	spi_m_async_get_io_descriptor(SPIA, &spio);
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	695a      	ldr	r2, [r3, #20]
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	3310      	adds	r3, #16
    1984:	4619      	mov	r1, r3
    1986:	4610      	mov	r0, r2
    1988:	4b0b      	ldr	r3, [pc, #44]	; (19b8 <_ZN14SPI_Asyn_Class4initEv+0x44>)
    198a:	4798      	blx	r3
	spi_m_async_register_callback(SPIA, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(complete_cb_SPI));
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	695b      	ldr	r3, [r3, #20]
    1990:	4a0a      	ldr	r2, [pc, #40]	; (19bc <_ZN14SPI_Asyn_Class4initEv+0x48>)
    1992:	2100      	movs	r1, #0
    1994:	4618      	mov	r0, r3
    1996:	4b0a      	ldr	r3, [pc, #40]	; (19c0 <_ZN14SPI_Asyn_Class4initEv+0x4c>)
    1998:	4798      	blx	r3
	spi_m_async_register_callback(SPIA, SPI_M_ASYNC_CB_ERROR, (FUNC_PTR)(error_cb_SPI));
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	695b      	ldr	r3, [r3, #20]
    199e:	4a09      	ldr	r2, [pc, #36]	; (19c4 <_ZN14SPI_Asyn_Class4initEv+0x50>)
    19a0:	2101      	movs	r1, #1
    19a2:	4618      	mov	r0, r3
    19a4:	4b06      	ldr	r3, [pc, #24]	; (19c0 <_ZN14SPI_Asyn_Class4initEv+0x4c>)
    19a6:	4798      	blx	r3
	xferDone=true;
    19a8:	687b      	ldr	r3, [r7, #4]
    19aa:	2201      	movs	r2, #1
    19ac:	701a      	strb	r2, [r3, #0]
}
    19ae:	bf00      	nop
    19b0:	3708      	adds	r7, #8
    19b2:	46bd      	mov	sp, r7
    19b4:	bd80      	pop	{r7, pc}
    19b6:	bf00      	nop
    19b8:	00005a6d 	.word	0x00005a6d
    19bc:	000018e9 	.word	0x000018e9
    19c0:	000059f9 	.word	0x000059f9
    19c4:	00001909 	.word	0x00001909

000019c8 <_ZN14SPI_Asyn_Class6enableEv>:

int32_t SPI_Asyn_Class::enable(){
    19c8:	b580      	push	{r7, lr}
    19ca:	b082      	sub	sp, #8
    19cc:	af00      	add	r7, sp, #0
    19ce:	6078      	str	r0, [r7, #4]

	spi_m_async_enable(SPIA);
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	695b      	ldr	r3, [r3, #20]
    19d4:	4618      	mov	r0, r3
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <_ZN14SPI_Asyn_Class6enableEv+0x24>)
    19d8:	4798      	blx	r3
	xferDone=true;
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	2201      	movs	r2, #1
    19de:	701a      	strb	r2, [r3, #0]

	return 0;
    19e0:	2300      	movs	r3, #0
}
    19e2:	4618      	mov	r0, r3
    19e4:	3708      	adds	r7, #8
    19e6:	46bd      	mov	sp, r7
    19e8:	bd80      	pop	{r7, pc}
    19ea:	bf00      	nop
    19ec:	000058cd 	.word	0x000058cd

000019f0 <_ZN14SPI_Asyn_Class5writeEPKhl>:

int32_t  SPI_Asyn_Class::write(const uint8_t * p, int32_t n){
    19f0:	b580      	push	{r7, lr}
    19f2:	b086      	sub	sp, #24
    19f4:	af00      	add	r7, sp, #0
    19f6:	60f8      	str	r0, [r7, #12]
    19f8:	60b9      	str	r1, [r7, #8]
    19fa:	607a      	str	r2, [r7, #4]

	while(!xferDone);
    19fc:	68fb      	ldr	r3, [r7, #12]
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	b2db      	uxtb	r3, r3
    1a02:	f083 0301 	eor.w	r3, r3, #1
    1a06:	b2db      	uxtb	r3, r3
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d000      	beq.n	1a0e <_ZN14SPI_Asyn_Class5writeEPKhl+0x1e>
    1a0c:	e7f6      	b.n	19fc <_ZN14SPI_Asyn_Class5writeEPKhl+0xc>
	xferDone=false;
    1a0e:	68fb      	ldr	r3, [r7, #12]
    1a10:	2200      	movs	r2, #0
    1a12:	701a      	strb	r2, [r3, #0]
	int32_t w= io_write(spio,p,(uint16_t)n);
    1a14:	68fb      	ldr	r3, [r7, #12]
    1a16:	691b      	ldr	r3, [r3, #16]
    1a18:	687a      	ldr	r2, [r7, #4]
    1a1a:	b292      	uxth	r2, r2
    1a1c:	68b9      	ldr	r1, [r7, #8]
    1a1e:	4618      	mov	r0, r3
    1a20:	4b03      	ldr	r3, [pc, #12]	; (1a30 <_ZN14SPI_Asyn_Class5writeEPKhl+0x40>)
    1a22:	4798      	blx	r3
    1a24:	6178      	str	r0, [r7, #20]
	 return w;
    1a26:	697b      	ldr	r3, [r7, #20]
	
}
    1a28:	4618      	mov	r0, r3
    1a2a:	3718      	adds	r7, #24
    1a2c:	46bd      	mov	sp, r7
    1a2e:	bd80      	pop	{r7, pc}
    1a30:	00005341 	.word	0x00005341

00001a34 <_ZN14SPI_Asyn_Class4readEPhl>:
int32_t  SPI_Asyn_Class::read(uint8_t * p, int32_t n){
    1a34:	b580      	push	{r7, lr}
    1a36:	b086      	sub	sp, #24
    1a38:	af00      	add	r7, sp, #0
    1a3a:	60f8      	str	r0, [r7, #12]
    1a3c:	60b9      	str	r1, [r7, #8]
    1a3e:	607a      	str	r2, [r7, #4]
	while(!xferDone);
    1a40:	68fb      	ldr	r3, [r7, #12]
    1a42:	781b      	ldrb	r3, [r3, #0]
    1a44:	b2db      	uxtb	r3, r3
    1a46:	f083 0301 	eor.w	r3, r3, #1
    1a4a:	b2db      	uxtb	r3, r3
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d000      	beq.n	1a52 <_ZN14SPI_Asyn_Class4readEPhl+0x1e>
    1a50:	e7f6      	b.n	1a40 <_ZN14SPI_Asyn_Class4readEPhl+0xc>
	xferDone=false;
    1a52:	68fb      	ldr	r3, [r7, #12]
    1a54:	2200      	movs	r2, #0
    1a56:	701a      	strb	r2, [r3, #0]
	int32_t r=io_read(spio,p,(uint16_t)n);
    1a58:	68fb      	ldr	r3, [r7, #12]
    1a5a:	691b      	ldr	r3, [r3, #16]
    1a5c:	687a      	ldr	r2, [r7, #4]
    1a5e:	b292      	uxth	r2, r2
    1a60:	68b9      	ldr	r1, [r7, #8]
    1a62:	4618      	mov	r0, r3
    1a64:	4b08      	ldr	r3, [pc, #32]	; (1a88 <_ZN14SPI_Asyn_Class4readEPhl+0x54>)
    1a66:	4798      	blx	r3
    1a68:	6178      	str	r0, [r7, #20]
	while((!xferDone));
    1a6a:	68fb      	ldr	r3, [r7, #12]
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	b2db      	uxtb	r3, r3
    1a70:	f083 0301 	eor.w	r3, r3, #1
    1a74:	b2db      	uxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	d000      	beq.n	1a7c <_ZN14SPI_Asyn_Class4readEPhl+0x48>
    1a7a:	e7f6      	b.n	1a6a <_ZN14SPI_Asyn_Class4readEPhl+0x36>
	return  r;
    1a7c:	697b      	ldr	r3, [r7, #20]
}
    1a7e:	4618      	mov	r0, r3
    1a80:	3718      	adds	r7, #24
    1a82:	46bd      	mov	sp, r7
    1a84:	bd80      	pop	{r7, pc}
    1a86:	bf00      	nop
    1a88:	00005391 	.word	0x00005391

00001a8c <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    1a94:	4a04      	ldr	r2, [pc, #16]	; (1aa8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    1a9a:	687b      	ldr	r3, [r7, #4]
    1a9c:	4618      	mov	r0, r3
    1a9e:	370c      	adds	r7, #12
    1aa0:	46bd      	mov	sp, r7
    1aa2:	bc80      	pop	{r7}
    1aa4:	4770      	bx	lr
    1aa6:	bf00      	nop
    1aa8:	200011dc 	.word	0x200011dc

00001aac <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    1aac:	b480      	push	{r7}
    1aae:	b083      	sub	sp, #12
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	4618      	mov	r0, r3
    1ab8:	370c      	adds	r7, #12
    1aba:	46bd      	mov	sp, r7
    1abc:	bc80      	pop	{r7}
    1abe:	4770      	bx	lr

00001ac0 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	6078      	str	r0, [r7, #4]
    1ac8:	6039      	str	r1, [r7, #0]
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	3304      	adds	r3, #4
    1ace:	4618      	mov	r0, r3
    1ad0:	4b06      	ldr	r3, [pc, #24]	; (1aec <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
    1ad2:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	683a      	ldr	r2, [r7, #0]
    1ad8:	641a      	str	r2, [r3, #64]	; 0x40
	ptrAT24MACClass=this;
    1ada:	4a05      	ldr	r2, [pc, #20]	; (1af0 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	4618      	mov	r0, r3
    1ae4:	3708      	adds	r7, #8
    1ae6:	46bd      	mov	sp, r7
    1ae8:	bd80      	pop	{r7, pc}
    1aea:	bf00      	nop
    1aec:	00000a41 	.word	0x00000a41
    1af0:	200011e0 	.word	0x200011e0

00001af4 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
    1af4:	b580      	push	{r7, lr}
    1af6:	b082      	sub	sp, #8
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	3304      	adds	r3, #4
    1b00:	4618      	mov	r0, r3
    1b02:	4b03      	ldr	r3, [pc, #12]	; (1b10 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
    1b04:	4798      	blx	r3
{
} //~AT24MAC_Class
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	4618      	mov	r0, r3
    1b0a:	3708      	adds	r7, #8
    1b0c:	46bd      	mov	sp, r7
    1b0e:	bd80      	pop	{r7, pc}
    1b10:	00000a79 	.word	0x00000a79

00001b14 <_Z41__static_initialization_and_destruction_0ii>:
		isReady=false;
	}
	return isReady;	
}

    1b14:	b580      	push	{r7, lr}
    1b16:	b082      	sub	sp, #8
    1b18:	af00      	add	r7, sp, #0
    1b1a:	6078      	str	r0, [r7, #4]
    1b1c:	6039      	str	r1, [r7, #0]
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	2b01      	cmp	r3, #1
    1b22:	d10d      	bne.n	1b40 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1b24:	683b      	ldr	r3, [r7, #0]
    1b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1b2a:	4293      	cmp	r3, r2
    1b2c:	d108      	bne.n	1b40 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1b2e:	4906      	ldr	r1, [pc, #24]	; (1b48 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1b30:	4806      	ldr	r0, [pc, #24]	; (1b4c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1b32:	4b07      	ldr	r3, [pc, #28]	; (1b50 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1b34:	4798      	blx	r3
    1b36:	4a07      	ldr	r2, [pc, #28]	; (1b54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1b38:	4907      	ldr	r1, [pc, #28]	; (1b58 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1b3a:	4804      	ldr	r0, [pc, #16]	; (1b4c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1b3c:	4b07      	ldr	r3, [pc, #28]	; (1b5c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1b3e:	4798      	blx	r3
    1b40:	bf00      	nop
    1b42:	3708      	adds	r7, #8
    1b44:	46bd      	mov	sp, r7
    1b46:	bd80      	pop	{r7, pc}
    1b48:	200020b4 	.word	0x200020b4
    1b4c:	200011e8 	.word	0x200011e8
    1b50:	00001ac1 	.word	0x00001ac1
    1b54:	20000000 	.word	0x20000000
    1b58:	00001af5 	.word	0x00001af5
    1b5c:	000105fd 	.word	0x000105fd

00001b60 <_GLOBAL__sub_I_ptrAT24MACClass>:
    1b60:	b580      	push	{r7, lr}
    1b62:	af00      	add	r7, sp, #0
    1b64:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1b68:	2001      	movs	r0, #1
    1b6a:	4b01      	ldr	r3, [pc, #4]	; (1b70 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    1b6c:	4798      	blx	r3
    1b6e:	bd80      	pop	{r7, pc}
    1b70:	00001b15 	.word	0x00001b15

00001b74 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    1b74:	b580      	push	{r7, lr}
    1b76:	b082      	sub	sp, #8
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	6039      	str	r1, [r7, #0]
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	3318      	adds	r3, #24
    1b82:	4618      	mov	r0, r3
    1b84:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    1b86:	4798      	blx	r3
{
	appParameters=defaultParameters;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	4a08      	ldr	r2, [pc, #32]	; (1bac <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    1b8c:	7812      	ldrb	r2, [r2, #0]
    1b8e:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	683a      	ldr	r2, [r7, #0]
    1b94:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    1b96:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    1b98:	681a      	ldr	r2, [r3, #0]
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    1b9e:	687b      	ldr	r3, [r7, #4]
    1ba0:	4618      	mov	r0, r3
    1ba2:	3708      	adds	r7, #8
    1ba4:	46bd      	mov	sp, r7
    1ba6:	bd80      	pop	{r7, pc}
    1ba8:	00001a8d 	.word	0x00001a8d
    1bac:	00013954 	.word	0x00013954
    1bb0:	20001254 	.word	0x20001254

00001bb4 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b082      	sub	sp, #8
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	3318      	adds	r3, #24
    1bc0:	4618      	mov	r0, r3
    1bc2:	4b03      	ldr	r3, [pc, #12]	; (1bd0 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    1bc4:	4798      	blx	r3
{
} //~FlashMemoryClass
    1bc6:	687b      	ldr	r3, [r7, #4]
    1bc8:	4618      	mov	r0, r3
    1bca:	3708      	adds	r7, #8
    1bcc:	46bd      	mov	sp, r7
    1bce:	bd80      	pop	{r7, pc}
    1bd0:	00001aad 	.word	0x00001aad

00001bd4 <_Z41__static_initialization_and_destruction_0ii>:
	flashClose();
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    1bd4:	b580      	push	{r7, lr}
    1bd6:	b082      	sub	sp, #8
    1bd8:	af00      	add	r7, sp, #0
    1bda:	6078      	str	r0, [r7, #4]
    1bdc:	6039      	str	r1, [r7, #0]
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	2b01      	cmp	r3, #1
    1be2:	d10d      	bne.n	1c00 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1be4:	683b      	ldr	r3, [r7, #0]
    1be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1bea:	4293      	cmp	r3, r2
    1bec:	d108      	bne.n	1c00 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1bee:	4906      	ldr	r1, [pc, #24]	; (1c08 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1bf0:	4806      	ldr	r0, [pc, #24]	; (1c0c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1bf2:	4b07      	ldr	r3, [pc, #28]	; (1c10 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1bf4:	4798      	blx	r3
    1bf6:	4a07      	ldr	r2, [pc, #28]	; (1c14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1bf8:	4907      	ldr	r1, [pc, #28]	; (1c18 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1bfa:	4804      	ldr	r0, [pc, #16]	; (1c0c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1bfc:	4b07      	ldr	r3, [pc, #28]	; (1c1c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1bfe:	4798      	blx	r3
    1c00:	bf00      	nop
    1c02:	3708      	adds	r7, #8
    1c04:	46bd      	mov	sp, r7
    1c06:	bd80      	pop	{r7, pc}
    1c08:	20001eec 	.word	0x20001eec
    1c0c:	20001258 	.word	0x20001258
    1c10:	00001b75 	.word	0x00001b75
    1c14:	20000000 	.word	0x20000000
    1c18:	00001bb5 	.word	0x00001bb5
    1c1c:	000105fd 	.word	0x000105fd

00001c20 <_GLOBAL__sub_I_flashLayout>:
    1c20:	b580      	push	{r7, lr}
    1c22:	af00      	add	r7, sp, #0
    1c24:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c28:	2001      	movs	r0, #1
    1c2a:	4b01      	ldr	r3, [pc, #4]	; (1c30 <_GLOBAL__sub_I_flashLayout+0x10>)
    1c2c:	4798      	blx	r3
    1c2e:	bd80      	pop	{r7, pc}
    1c30:	00001bd5 	.word	0x00001bd5

00001c34 <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
    1c34:	b580      	push	{r7, lr}
    1c36:	b082      	sub	sp, #8
    1c38:	af00      	add	r7, sp, #0
    1c3a:	6078      	str	r0, [r7, #4]
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	3318      	adds	r3, #24
    1c40:	4618      	mov	r0, r3
    1c42:	4b03      	ldr	r3, [pc, #12]	; (1c50 <_ZN17FRAM_Memory_ClassD1Ev+0x1c>)
    1c44:	4798      	blx	r3
{
} //~FRAM_Memory_Class
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	4618      	mov	r0, r3
    1c4a:	3708      	adds	r7, #8
    1c4c:	46bd      	mov	sp, r7
    1c4e:	bd80      	pop	{r7, pc}
    1c50:	00001aad 	.word	0x00001aad

00001c54 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
    1c54:	b580      	push	{r7, lr}
    1c56:	b082      	sub	sp, #8
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
    1c5c:	6039      	str	r1, [r7, #0]
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	3318      	adds	r3, #24
    1c62:	4618      	mov	r0, r3
    1c64:	4b08      	ldr	r3, [pc, #32]	; (1c88 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x34>)
    1c66:	4798      	blx	r3
{
	appParameters=defaultParameters;
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	4a08      	ldr	r2, [pc, #32]	; (1c8c <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x38>)
    1c6c:	7812      	ldrb	r2, [r2, #0]
    1c6e:	741a      	strb	r2, [r3, #16]
	spi_descriptor=spi_des;
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	683a      	ldr	r2, [r7, #0]
    1c74:	615a      	str	r2, [r3, #20]
	memoryAddress=framMemory;
    1c76:	4b06      	ldr	r3, [pc, #24]	; (1c90 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x3c>)
    1c78:	681a      	ldr	r2, [r3, #0]
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	60da      	str	r2, [r3, #12]
} //FlashMemoryClass
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	4618      	mov	r0, r3
    1c82:	3708      	adds	r7, #8
    1c84:	46bd      	mov	sp, r7
    1c86:	bd80      	pop	{r7, pc}
    1c88:	00001a8d 	.word	0x00001a8d
    1c8c:	00013954 	.word	0x00013954
    1c90:	200012a0 	.word	0x200012a0

00001c94 <_Z41__static_initialization_and_destruction_0ii>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

    1c94:	b580      	push	{r7, lr}
    1c96:	b082      	sub	sp, #8
    1c98:	af00      	add	r7, sp, #0
    1c9a:	6078      	str	r0, [r7, #4]
    1c9c:	6039      	str	r1, [r7, #0]
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	2b01      	cmp	r3, #1
    1ca2:	d10d      	bne.n	1cc0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1caa:	4293      	cmp	r3, r2
    1cac:	d108      	bne.n	1cc0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1cae:	4906      	ldr	r1, [pc, #24]	; (1cc8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1cb0:	4806      	ldr	r0, [pc, #24]	; (1ccc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1cb2:	4b07      	ldr	r3, [pc, #28]	; (1cd0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1cb4:	4798      	blx	r3
    1cb6:	4a07      	ldr	r2, [pc, #28]	; (1cd4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1cb8:	4907      	ldr	r1, [pc, #28]	; (1cd8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1cba:	4804      	ldr	r0, [pc, #16]	; (1ccc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1cbc:	4b07      	ldr	r3, [pc, #28]	; (1cdc <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1cbe:	4798      	blx	r3
    1cc0:	bf00      	nop
    1cc2:	3708      	adds	r7, #8
    1cc4:	46bd      	mov	sp, r7
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	20001eec 	.word	0x20001eec
    1ccc:	200012a4 	.word	0x200012a4
    1cd0:	00001c55 	.word	0x00001c55
    1cd4:	20000000 	.word	0x20000000
    1cd8:	00001c35 	.word	0x00001c35
    1cdc:	000105fd 	.word	0x000105fd

00001ce0 <_GLOBAL__sub_I_framMemory>:
    1ce0:	b580      	push	{r7, lr}
    1ce2:	af00      	add	r7, sp, #0
    1ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1ce8:	2001      	movs	r0, #1
    1cea:	4b01      	ldr	r3, [pc, #4]	; (1cf0 <_GLOBAL__sub_I_framMemory+0x10>)
    1cec:	4798      	blx	r3
    1cee:	bd80      	pop	{r7, pc}
    1cf0:	00001c95 	.word	0x00001c95

00001cf4 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    1cf4:	b480      	push	{r7}
    1cf6:	b083      	sub	sp, #12
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	6078      	str	r0, [r7, #4]
    1cfc:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	683a      	ldr	r2, [r7, #0]
    1d02:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	4a04      	ldr	r2, [pc, #16]	; (1d18 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    1d08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	4618      	mov	r0, r3
    1d10:	370c      	adds	r7, #12
    1d12:	46bd      	mov	sp, r7
    1d14:	bc80      	pop	{r7}
    1d16:	4770      	bx	lr
    1d18:	001fff00 	.word	0x001fff00

00001d1c <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    1d1c:	b480      	push	{r7}
    1d1e:	b083      	sub	sp, #12
    1d20:	af00      	add	r7, sp, #0
    1d22:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	4618      	mov	r0, r3
    1d28:	370c      	adds	r7, #12
    1d2a:	46bd      	mov	sp, r7
    1d2c:	bc80      	pop	{r7}
    1d2e:	4770      	bx	lr

00001d30 <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
    1d30:	b580      	push	{r7, lr}
    1d32:	b082      	sub	sp, #8
    1d34:	af00      	add	r7, sp, #0
    1d36:	6078      	str	r0, [r7, #4]
    1d38:	6039      	str	r1, [r7, #0]
    1d3a:	687b      	ldr	r3, [r7, #4]
    1d3c:	2b01      	cmp	r3, #1
    1d3e:	d10d      	bne.n	1d5c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1d40:	683b      	ldr	r3, [r7, #0]
    1d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d46:	4293      	cmp	r3, r2
    1d48:	d108      	bne.n	1d5c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1d4a:	4906      	ldr	r1, [pc, #24]	; (1d64 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1d4c:	4806      	ldr	r0, [pc, #24]	; (1d68 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1d4e:	4b07      	ldr	r3, [pc, #28]	; (1d6c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1d50:	4798      	blx	r3
    1d52:	4a07      	ldr	r2, [pc, #28]	; (1d70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1d54:	4907      	ldr	r1, [pc, #28]	; (1d74 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1d56:	4804      	ldr	r0, [pc, #16]	; (1d68 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1d58:	4b07      	ldr	r3, [pc, #28]	; (1d78 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1d5a:	4798      	blx	r3
    1d5c:	bf00      	nop
    1d5e:	3708      	adds	r7, #8
    1d60:	46bd      	mov	sp, r7
    1d62:	bd80      	pop	{r7, pc}
    1d64:	20001f80 	.word	0x20001f80
    1d68:	20001328 	.word	0x20001328
    1d6c:	00001cf5 	.word	0x00001cf5
    1d70:	20000000 	.word	0x20000000
    1d74:	00001d1d 	.word	0x00001d1d
    1d78:	000105fd 	.word	0x000105fd

00001d7c <_GLOBAL__sub_I_ptrN25Q256Class>:
    1d7c:	b580      	push	{r7, lr}
    1d7e:	af00      	add	r7, sp, #0
    1d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1d84:	2001      	movs	r0, #1
    1d86:	4b01      	ldr	r3, [pc, #4]	; (1d8c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    1d88:	4798      	blx	r3
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	00001d31 	.word	0x00001d31

00001d90 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
    1d98:	6039      	str	r1, [r7, #0]
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	4618      	mov	r0, r3
    1d9e:	4b08      	ldr	r3, [pc, #32]	; (1dc0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    1da0:	4798      	blx	r3
    1da2:	4a08      	ldr	r2, [pc, #32]	; (1dc4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    1da4:	687b      	ldr	r3, [r7, #4]
    1da6:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	683a      	ldr	r2, [r7, #0]
    1dac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    1db0:	4a05      	ldr	r2, [pc, #20]	; (1dc8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	4618      	mov	r0, r3
    1dba:	3708      	adds	r7, #8
    1dbc:	46bd      	mov	sp, r7
    1dbe:	bd80      	pop	{r7, pc}
    1dc0:	000020a5 	.word	0x000020a5
    1dc4:	00013968 	.word	0x00013968
    1dc8:	20001558 	.word	0x20001558

00001dcc <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    1dcc:	b580      	push	{r7, lr}
    1dce:	b082      	sub	sp, #8
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	6078      	str	r0, [r7, #4]
    1dd4:	4a05      	ldr	r2, [pc, #20]	; (1dec <_ZN14Calendar_ClassD1Ev+0x20>)
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	601a      	str	r2, [r3, #0]
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	4618      	mov	r0, r3
    1dde:	4b04      	ldr	r3, [pc, #16]	; (1df0 <_ZN14Calendar_ClassD1Ev+0x24>)
    1de0:	4798      	blx	r3
{
} //~Calendar_Class
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	4618      	mov	r0, r3
    1de6:	3708      	adds	r7, #8
    1de8:	46bd      	mov	sp, r7
    1dea:	bd80      	pop	{r7, pc}
    1dec:	00013968 	.word	0x00013968
    1df0:	000020c5 	.word	0x000020c5

00001df4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    1df4:	b580      	push	{r7, lr}
    1df6:	b082      	sub	sp, #8
    1df8:	af00      	add	r7, sp, #0
    1dfa:	6078      	str	r0, [r7, #4]
    1dfc:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1e04:	6839      	ldr	r1, [r7, #0]
    1e06:	4618      	mov	r0, r3
    1e08:	4b03      	ldr	r3, [pc, #12]	; (1e18 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    1e0a:	4798      	blx	r3
    1e0c:	4603      	mov	r3, r0
}
    1e0e:	4618      	mov	r0, r3
    1e10:	3708      	adds	r7, #8
    1e12:	46bd      	mov	sp, r7
    1e14:	bd80      	pop	{r7, pc}
    1e16:	bf00      	nop
    1e18:	00004c45 	.word	0x00004c45

00001e1c <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    1e1c:	b480      	push	{r7}
    1e1e:	b083      	sub	sp, #12
    1e20:	af00      	add	r7, sp, #0
    1e22:	6078      	str	r0, [r7, #4]
    1e24:	460b      	mov	r3, r1
    1e26:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    1e28:	887b      	ldrh	r3, [r7, #2]
    1e2a:	f003 0303 	and.w	r3, r3, #3
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d001      	beq.n	1e36 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    1e32:	2300      	movs	r3, #0
    1e34:	e000      	b.n	1e38 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    1e36:	2301      	movs	r3, #1
	}
}
    1e38:	4618      	mov	r0, r3
    1e3a:	370c      	adds	r7, #12
    1e3c:	46bd      	mov	sp, r7
    1e3e:	bc80      	pop	{r7}
    1e40:	4770      	bx	lr
	...

00001e44 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    1e44:	b580      	push	{r7, lr}
    1e46:	b086      	sub	sp, #24
    1e48:	af00      	add	r7, sp, #0
    1e4a:	6078      	str	r0, [r7, #4]
    1e4c:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    1e4e:	2300      	movs	r3, #0
    1e50:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    1e52:	2300      	movs	r3, #0
    1e54:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    1e56:	683b      	ldr	r3, [r7, #0]
    1e58:	88db      	ldrh	r3, [r3, #6]
    1e5a:	b2da      	uxtb	r2, r3
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1e62:	699b      	ldr	r3, [r3, #24]
    1e64:	b2db      	uxtb	r3, r3
    1e66:	1ad3      	subs	r3, r2, r3
    1e68:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    1e6a:	683b      	ldr	r3, [r7, #0]
    1e6c:	795b      	ldrb	r3, [r3, #5]
    1e6e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    1e70:	683b      	ldr	r3, [r7, #0]
    1e72:	791b      	ldrb	r3, [r3, #4]
    1e74:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    1e76:	683b      	ldr	r3, [r7, #0]
    1e78:	789b      	ldrb	r3, [r3, #2]
    1e7a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    1e7c:	683b      	ldr	r3, [r7, #0]
    1e7e:	785b      	ldrb	r3, [r3, #1]
    1e80:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    1e82:	683b      	ldr	r3, [r7, #0]
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    1e88:	2300      	movs	r3, #0
    1e8a:	613b      	str	r3, [r7, #16]
    1e8c:	7bfa      	ldrb	r2, [r7, #15]
    1e8e:	693b      	ldr	r3, [r7, #16]
    1e90:	429a      	cmp	r2, r3
    1e92:	d91e      	bls.n	1ed2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    1e9a:	699b      	ldr	r3, [r3, #24]
    1e9c:	b29a      	uxth	r2, r3
    1e9e:	693b      	ldr	r3, [r7, #16]
    1ea0:	b29b      	uxth	r3, r3
    1ea2:	4413      	add	r3, r2
    1ea4:	b29b      	uxth	r3, r3
    1ea6:	4619      	mov	r1, r3
    1ea8:	6878      	ldr	r0, [r7, #4]
    1eaa:	4b27      	ldr	r3, [pc, #156]	; (1f48 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    1eac:	4798      	blx	r3
    1eae:	4603      	mov	r3, r0
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d006      	beq.n	1ec2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    1eb4:	697b      	ldr	r3, [r7, #20]
    1eb6:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    1eba:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    1ebe:	617b      	str	r3, [r7, #20]
    1ec0:	e003      	b.n	1eca <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    1ec2:	697a      	ldr	r2, [r7, #20]
    1ec4:	4b21      	ldr	r3, [pc, #132]	; (1f4c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    1ec6:	4413      	add	r3, r2
    1ec8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    1eca:	693b      	ldr	r3, [r7, #16]
    1ecc:	3301      	adds	r3, #1
    1ece:	613b      	str	r3, [r7, #16]
    1ed0:	e7dc      	b.n	1e8c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    1ed2:	2301      	movs	r3, #1
    1ed4:	613b      	str	r3, [r7, #16]
    1ed6:	7bba      	ldrb	r2, [r7, #14]
    1ed8:	693b      	ldr	r3, [r7, #16]
    1eda:	429a      	cmp	r2, r3
    1edc:	d910      	bls.n	1f00 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    1ede:	683b      	ldr	r3, [r7, #0]
    1ee0:	88db      	ldrh	r3, [r3, #6]
    1ee2:	4619      	mov	r1, r3
    1ee4:	693b      	ldr	r3, [r7, #16]
    1ee6:	b2db      	uxtb	r3, r3
    1ee8:	461a      	mov	r2, r3
    1eea:	6878      	ldr	r0, [r7, #4]
    1eec:	4b18      	ldr	r3, [pc, #96]	; (1f50 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    1eee:	4798      	blx	r3
    1ef0:	4602      	mov	r2, r0
    1ef2:	697b      	ldr	r3, [r7, #20]
    1ef4:	4413      	add	r3, r2
    1ef6:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    1ef8:	693b      	ldr	r3, [r7, #16]
    1efa:	3301      	adds	r3, #1
    1efc:	613b      	str	r3, [r7, #16]
    1efe:	e7ea      	b.n	1ed6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    1f00:	7b7b      	ldrb	r3, [r7, #13]
    1f02:	3b01      	subs	r3, #1
    1f04:	4a13      	ldr	r2, [pc, #76]	; (1f54 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    1f06:	fb02 f303 	mul.w	r3, r2, r3
    1f0a:	461a      	mov	r2, r3
    1f0c:	697b      	ldr	r3, [r7, #20]
    1f0e:	4413      	add	r3, r2
    1f10:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    1f12:	7b3b      	ldrb	r3, [r7, #12]
    1f14:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1f18:	fb02 f303 	mul.w	r3, r2, r3
    1f1c:	461a      	mov	r2, r3
    1f1e:	697b      	ldr	r3, [r7, #20]
    1f20:	4413      	add	r3, r2
    1f22:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1f24:	7afa      	ldrb	r2, [r7, #11]
    1f26:	4613      	mov	r3, r2
    1f28:	011b      	lsls	r3, r3, #4
    1f2a:	1a9b      	subs	r3, r3, r2
    1f2c:	009b      	lsls	r3, r3, #2
    1f2e:	461a      	mov	r2, r3
    1f30:	697b      	ldr	r3, [r7, #20]
    1f32:	4413      	add	r3, r2
    1f34:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    1f36:	7abb      	ldrb	r3, [r7, #10]
    1f38:	697a      	ldr	r2, [r7, #20]
    1f3a:	4413      	add	r3, r2
    1f3c:	617b      	str	r3, [r7, #20]

	return tmp;
    1f3e:	697b      	ldr	r3, [r7, #20]
}
    1f40:	4618      	mov	r0, r3
    1f42:	3718      	adds	r7, #24
    1f44:	46bd      	mov	sp, r7
    1f46:	bd80      	pop	{r7, pc}
    1f48:	00001e1d 	.word	0x00001e1d
    1f4c:	01e13380 	.word	0x01e13380
    1f50:	00001f59 	.word	0x00001f59
    1f54:	00015180 	.word	0x00015180

00001f58 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	b086      	sub	sp, #24
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	60f8      	str	r0, [r7, #12]
    1f60:	60b9      	str	r1, [r7, #8]
    1f62:	4613      	mov	r3, r2
    1f64:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    1f66:	2300      	movs	r3, #0
    1f68:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    1f6a:	68bb      	ldr	r3, [r7, #8]
    1f6c:	b29b      	uxth	r3, r3
    1f6e:	4619      	mov	r1, r3
    1f70:	68f8      	ldr	r0, [r7, #12]
    1f72:	4b2f      	ldr	r3, [pc, #188]	; (2030 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    1f74:	4798      	blx	r3
    1f76:	4603      	mov	r3, r0
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d028      	beq.n	1fce <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    1f7c:	79fb      	ldrb	r3, [r7, #7]
    1f7e:	3b01      	subs	r3, #1
    1f80:	2b0b      	cmp	r3, #11
    1f82:	d84c      	bhi.n	201e <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    1f84:	a201      	add	r2, pc, #4	; (adr r2, 1f8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    1f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f8a:	bf00      	nop
    1f8c:	00001fbd 	.word	0x00001fbd
    1f90:	00001fc3 	.word	0x00001fc3
    1f94:	00001fbd 	.word	0x00001fbd
    1f98:	00001fc9 	.word	0x00001fc9
    1f9c:	00001fbd 	.word	0x00001fbd
    1fa0:	00001fc9 	.word	0x00001fc9
    1fa4:	00001fbd 	.word	0x00001fbd
    1fa8:	00001fbd 	.word	0x00001fbd
    1fac:	00001fc9 	.word	0x00001fc9
    1fb0:	00001fbd 	.word	0x00001fbd
    1fb4:	00001fc9 	.word	0x00001fc9
    1fb8:	00001fbd 	.word	0x00001fbd
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1fbc:	4b1d      	ldr	r3, [pc, #116]	; (2034 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1fbe:	617b      	str	r3, [r7, #20]
			break;
    1fc0:	e030      	b.n	2024 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    1fc2:	4b1d      	ldr	r3, [pc, #116]	; (2038 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    1fc4:	617b      	str	r3, [r7, #20]
			break;
    1fc6:	e02d      	b.n	2024 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1fc8:	4b1c      	ldr	r3, [pc, #112]	; (203c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    1fca:	617b      	str	r3, [r7, #20]
			break;
    1fcc:	e02a      	b.n	2024 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    1fce:	79fb      	ldrb	r3, [r7, #7]
    1fd0:	3b01      	subs	r3, #1
    1fd2:	2b0b      	cmp	r3, #11
    1fd4:	d825      	bhi.n	2022 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    1fd6:	a201      	add	r2, pc, #4	; (adr r2, 1fdc <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    1fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1fdc:	0000200d 	.word	0x0000200d
    1fe0:	00002013 	.word	0x00002013
    1fe4:	0000200d 	.word	0x0000200d
    1fe8:	00002019 	.word	0x00002019
    1fec:	0000200d 	.word	0x0000200d
    1ff0:	00002019 	.word	0x00002019
    1ff4:	0000200d 	.word	0x0000200d
    1ff8:	0000200d 	.word	0x0000200d
    1ffc:	00002019 	.word	0x00002019
    2000:	0000200d 	.word	0x0000200d
    2004:	00002019 	.word	0x00002019
    2008:	0000200d 	.word	0x0000200d
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    200c:	4b09      	ldr	r3, [pc, #36]	; (2034 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    200e:	617b      	str	r3, [r7, #20]
			break;
    2010:	e008      	b.n	2024 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    2012:	4b0b      	ldr	r3, [pc, #44]	; (2040 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    2014:	617b      	str	r3, [r7, #20]
			break;
    2016:	e005      	b.n	2024 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    2018:	4b08      	ldr	r3, [pc, #32]	; (203c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    201a:	617b      	str	r3, [r7, #20]
			break;
    201c:	e002      	b.n	2024 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    201e:	bf00      	nop
    2020:	e000      	b.n	2024 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    2022:	bf00      	nop
		}
	}

	return sec_in_month;
    2024:	697b      	ldr	r3, [r7, #20]
}
    2026:	4618      	mov	r0, r3
    2028:	3718      	adds	r7, #24
    202a:	46bd      	mov	sp, r7
    202c:	bd80      	pop	{r7, pc}
    202e:	bf00      	nop
    2030:	00001e1d 	.word	0x00001e1d
    2034:	0028de80 	.word	0x0028de80
    2038:	00263b80 	.word	0x00263b80
    203c:	00278d00 	.word	0x00278d00
    2040:	0024ea00 	.word	0x0024ea00

00002044 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    2044:	b580      	push	{r7, lr}
    2046:	b082      	sub	sp, #8
    2048:	af00      	add	r7, sp, #0
    204a:	6078      	str	r0, [r7, #4]
    204c:	6039      	str	r1, [r7, #0]
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	2b01      	cmp	r3, #1
    2052:	d10d      	bne.n	2070 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2054:	683b      	ldr	r3, [r7, #0]
    2056:	f64f 72ff 	movw	r2, #65535	; 0xffff
    205a:	4293      	cmp	r3, r2
    205c:	d108      	bne.n	2070 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    205e:	4906      	ldr	r1, [pc, #24]	; (2078 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2060:	4806      	ldr	r0, [pc, #24]	; (207c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2062:	4b07      	ldr	r3, [pc, #28]	; (2080 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2064:	4798      	blx	r3
    2066:	4a07      	ldr	r2, [pc, #28]	; (2084 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2068:	4907      	ldr	r1, [pc, #28]	; (2088 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    206a:	4804      	ldr	r0, [pc, #16]	; (207c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    206e:	4798      	blx	r3
    2070:	bf00      	nop
    2072:	3708      	adds	r7, #8
    2074:	46bd      	mov	sp, r7
    2076:	bd80      	pop	{r7, pc}
    2078:	200020f4 	.word	0x200020f4
    207c:	20001560 	.word	0x20001560
    2080:	00001d91 	.word	0x00001d91
    2084:	20000000 	.word	0x20000000
    2088:	00001dcd 	.word	0x00001dcd
    208c:	000105fd 	.word	0x000105fd

00002090 <_GLOBAL__sub_I_ptrCalendarClass>:
    2090:	b580      	push	{r7, lr}
    2092:	af00      	add	r7, sp, #0
    2094:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2098:	2001      	movs	r0, #1
    209a:	4b01      	ldr	r3, [pc, #4]	; (20a0 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    209c:	4798      	blx	r3
    209e:	bd80      	pop	{r7, pc}
    20a0:	00002045 	.word	0x00002045

000020a4 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    20a4:	b480      	push	{r7}
    20a6:	b083      	sub	sp, #12
    20a8:	af00      	add	r7, sp, #0
    20aa:	6078      	str	r0, [r7, #4]
    20ac:	4a04      	ldr	r2, [pc, #16]	; (20c0 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	601a      	str	r2, [r3, #0]
{
} //~D
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	4618      	mov	r0, r3
    20b6:	370c      	adds	r7, #12
    20b8:	46bd      	mov	sp, r7
    20ba:	bc80      	pop	{r7}
    20bc:	4770      	bx	lr
    20be:	bf00      	nop
    20c0:	00013978 	.word	0x00013978

000020c4 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    20c4:	b480      	push	{r7}
    20c6:	b083      	sub	sp, #12
    20c8:	af00      	add	r7, sp, #0
    20ca:	6078      	str	r0, [r7, #4]
    20cc:	4a04      	ldr	r2, [pc, #16]	; (20e0 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	4618      	mov	r0, r3
    20d6:	370c      	adds	r7, #12
    20d8:	46bd      	mov	sp, r7
    20da:	bc80      	pop	{r7}
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	00013978 	.word	0x00013978

000020e4 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    20e4:	b480      	push	{r7}
    20e6:	b083      	sub	sp, #12
    20e8:	af00      	add	r7, sp, #0
    20ea:	6078      	str	r0, [r7, #4]
    20ec:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	683a      	ldr	r2, [r7, #0]
    20f2:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    20f4:	4a06      	ldr	r2, [pc, #24]	; (2110 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2100:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	4618      	mov	r0, r3
    2106:	370c      	adds	r7, #12
    2108:	46bd      	mov	sp, r7
    210a:	bc80      	pop	{r7}
    210c:	4770      	bx	lr
    210e:	bf00      	nop
    2110:	20001608 	.word	0x20001608

00002114 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    2114:	b480      	push	{r7}
    2116:	b083      	sub	sp, #12
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	4618      	mov	r0, r3
    2126:	370c      	adds	r7, #12
    2128:	46bd      	mov	sp, r7
    212a:	bc80      	pop	{r7}
    212c:	4770      	bx	lr
	...

00002130 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    2130:	b580      	push	{r7, lr}
    2132:	b086      	sub	sp, #24
    2134:	af00      	add	r7, sp, #0
    2136:	60f8      	str	r0, [r7, #12]
    2138:	60b9      	str	r1, [r7, #8]
    213a:	607a      	str	r2, [r7, #4]
    213c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    213e:	68f8      	ldr	r0, [r7, #12]
    2140:	4b0d      	ldr	r3, [pc, #52]	; (2178 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    2142:	4798      	blx	r3
	task->interval = interval;
    2144:	68fb      	ldr	r3, [r7, #12]
    2146:	699b      	ldr	r3, [r3, #24]
    2148:	687a      	ldr	r2, [r7, #4]
    214a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    214c:	68fb      	ldr	r3, [r7, #12]
    214e:	699b      	ldr	r3, [r3, #24]
    2150:	68ba      	ldr	r2, [r7, #8]
    2152:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    2154:	68fb      	ldr	r3, [r7, #12]
    2156:	699b      	ldr	r3, [r3, #24]
    2158:	78fa      	ldrb	r2, [r7, #3]
    215a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    215c:	68fb      	ldr	r3, [r7, #12]
    215e:	68da      	ldr	r2, [r3, #12]
    2160:	68fb      	ldr	r3, [r7, #12]
    2162:	699b      	ldr	r3, [r3, #24]
    2164:	4619      	mov	r1, r3
    2166:	4610      	mov	r0, r2
    2168:	4b04      	ldr	r3, [pc, #16]	; (217c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    216a:	4798      	blx	r3
    216c:	6178      	str	r0, [r7, #20]
	
	return status;
    216e:	697b      	ldr	r3, [r7, #20]
}
    2170:	4618      	mov	r0, r3
    2172:	3718      	adds	r7, #24
    2174:	46bd      	mov	sp, r7
    2176:	bd80      	pop	{r7, pc}
    2178:	000021b9 	.word	0x000021b9
    217c:	00005d99 	.word	0x00005d99

00002180 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    2180:	b590      	push	{r4, r7, lr}
    2182:	b087      	sub	sp, #28
    2184:	af00      	add	r7, sp, #0
    2186:	60f8      	str	r0, [r7, #12]
    2188:	60b9      	str	r1, [r7, #8]
    218a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    218c:	2300      	movs	r3, #0
    218e:	687a      	ldr	r2, [r7, #4]
    2190:	68b9      	ldr	r1, [r7, #8]
    2192:	68f8      	ldr	r0, [r7, #12]
    2194:	4c06      	ldr	r4, [pc, #24]	; (21b0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x30>)
    2196:	47a0      	blx	r4
    2198:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    219a:	68fb      	ldr	r3, [r7, #12]
    219c:	68db      	ldr	r3, [r3, #12]
    219e:	4618      	mov	r0, r3
    21a0:	4b04      	ldr	r3, [pc, #16]	; (21b4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x34>)
    21a2:	4798      	blx	r3
    21a4:	6178      	str	r0, [r7, #20]
	return status;
    21a6:	697b      	ldr	r3, [r7, #20]
}
    21a8:	4618      	mov	r0, r3
    21aa:	371c      	adds	r7, #28
    21ac:	46bd      	mov	sp, r7
    21ae:	bd90      	pop	{r4, r7, pc}
    21b0:	00002131 	.word	0x00002131
    21b4:	00005ce9 	.word	0x00005ce9

000021b8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    21b8:	b480      	push	{r7}
    21ba:	b083      	sub	sp, #12
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	2200      	movs	r2, #0
    21c4:	771a      	strb	r2, [r3, #28]
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	7f1b      	ldrb	r3, [r3, #28]
    21ca:	2b0f      	cmp	r3, #15
    21cc:	dc1f      	bgt.n	220e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x56>
	{
		if (taskArray[i].cb==NULL)
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	7f1b      	ldrb	r3, [r3, #28]
    21d2:	4619      	mov	r1, r3
    21d4:	4a11      	ldr	r2, [pc, #68]	; (221c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
    21d6:	460b      	mov	r3, r1
    21d8:	009b      	lsls	r3, r3, #2
    21da:	440b      	add	r3, r1
    21dc:	009b      	lsls	r3, r3, #2
    21de:	4413      	add	r3, r2
    21e0:	330c      	adds	r3, #12
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	2b00      	cmp	r3, #0
    21e6:	d10b      	bne.n	2200 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x48>
		{
			
			task=&taskArray[i];
    21e8:	687b      	ldr	r3, [r7, #4]
    21ea:	7f1b      	ldrb	r3, [r3, #28]
    21ec:	461a      	mov	r2, r3
    21ee:	4613      	mov	r3, r2
    21f0:	009b      	lsls	r3, r3, #2
    21f2:	4413      	add	r3, r2
    21f4:	009b      	lsls	r3, r3, #2
    21f6:	4a09      	ldr	r2, [pc, #36]	; (221c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
    21f8:	441a      	add	r2, r3
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	619a      	str	r2, [r3, #24]
			return;
    21fe:	e009      	b.n	2214 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
    2200:	687b      	ldr	r3, [r7, #4]
    2202:	7f1b      	ldrb	r3, [r3, #28]
    2204:	3301      	adds	r3, #1
    2206:	b2da      	uxtb	r2, r3
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	771a      	strb	r2, [r3, #28]
    220c:	e7db      	b.n	21c6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xe>
			
		}
	}
	task=&taskArray[0];
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	4a02      	ldr	r2, [pc, #8]	; (221c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x64>)
    2212:	619a      	str	r2, [r3, #24]

}
    2214:	370c      	adds	r7, #12
    2216:	46bd      	mov	sp, r7
    2218:	bc80      	pop	{r7}
    221a:	4770      	bx	lr
    221c:	2000160c 	.word	0x2000160c

00002220 <_Z41__static_initialization_and_destruction_0ii>:
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
    2220:	b580      	push	{r7, lr}
    2222:	b082      	sub	sp, #8
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	6039      	str	r1, [r7, #0]
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	2b01      	cmp	r3, #1
    222e:	d128      	bne.n	2282 <_Z41__static_initialization_and_destruction_0ii+0x62>
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2236:	4293      	cmp	r3, r2
    2238:	d123      	bne.n	2282 <_Z41__static_initialization_and_destruction_0ii+0x62>
Timer_Class eventTimer(&TIMER_EVENT);
    223a:	4914      	ldr	r1, [pc, #80]	; (228c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    223c:	4814      	ldr	r0, [pc, #80]	; (2290 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    223e:	4b15      	ldr	r3, [pc, #84]	; (2294 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    2240:	4798      	blx	r3
    2242:	4a15      	ldr	r2, [pc, #84]	; (2298 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    2244:	4915      	ldr	r1, [pc, #84]	; (229c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    2246:	4812      	ldr	r0, [pc, #72]	; (2290 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    2248:	4b15      	ldr	r3, [pc, #84]	; (22a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    224a:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    224c:	4915      	ldr	r1, [pc, #84]	; (22a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    224e:	4816      	ldr	r0, [pc, #88]	; (22a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    2250:	4b10      	ldr	r3, [pc, #64]	; (2294 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    2252:	4798      	blx	r3
    2254:	4a10      	ldr	r2, [pc, #64]	; (2298 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    2256:	4911      	ldr	r1, [pc, #68]	; (229c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    2258:	4813      	ldr	r0, [pc, #76]	; (22a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    225a:	4b11      	ldr	r3, [pc, #68]	; (22a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    225c:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    225e:	4913      	ldr	r1, [pc, #76]	; (22ac <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    2260:	4813      	ldr	r0, [pc, #76]	; (22b0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    2262:	4b0c      	ldr	r3, [pc, #48]	; (2294 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    2264:	4798      	blx	r3
    2266:	4a0c      	ldr	r2, [pc, #48]	; (2298 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    2268:	490c      	ldr	r1, [pc, #48]	; (229c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    226a:	4811      	ldr	r0, [pc, #68]	; (22b0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    226c:	4b0c      	ldr	r3, [pc, #48]	; (22a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    226e:	4798      	blx	r3
    2270:	4910      	ldr	r1, [pc, #64]	; (22b4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    2272:	4811      	ldr	r0, [pc, #68]	; (22b8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    2274:	4b07      	ldr	r3, [pc, #28]	; (2294 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    2276:	4798      	blx	r3
    2278:	4a07      	ldr	r2, [pc, #28]	; (2298 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    227a:	4908      	ldr	r1, [pc, #32]	; (229c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    227c:	480e      	ldr	r0, [pc, #56]	; (22b8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    227e:	4b08      	ldr	r3, [pc, #32]	; (22a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    2280:	4798      	blx	r3
    2282:	bf00      	nop
    2284:	3708      	adds	r7, #8
    2286:	46bd      	mov	sp, r7
    2288:	bd80      	pop	{r7, pc}
    228a:	bf00      	nop
    228c:	20001f84 	.word	0x20001f84
    2290:	2000174c 	.word	0x2000174c
    2294:	000020e5 	.word	0x000020e5
    2298:	20000000 	.word	0x20000000
    229c:	00002115 	.word	0x00002115
    22a0:	000105fd 	.word	0x000105fd
    22a4:	20002098 	.word	0x20002098
    22a8:	2000176c 	.word	0x2000176c
    22ac:	20001fa0 	.word	0x20001fa0
    22b0:	2000178c 	.word	0x2000178c
    22b4:	20002000 	.word	0x20002000
    22b8:	200017ac 	.word	0x200017ac

000022bc <_GLOBAL__sub_I_ptrTimerClass>:
    22bc:	b580      	push	{r7, lr}
    22be:	af00      	add	r7, sp, #0
    22c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    22c4:	2001      	movs	r0, #1
    22c6:	4b01      	ldr	r3, [pc, #4]	; (22cc <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    22c8:	4798      	blx	r3
    22ca:	bd80      	pop	{r7, pc}
    22cc:	00002221 	.word	0x00002221

000022d0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    22d0:	b480      	push	{r7}
    22d2:	b083      	sub	sp, #12
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
    22d8:	4a05      	ldr	r2, [pc, #20]	; (22f0 <_ZN5PrintC1Ev+0x20>)
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	601a      	str	r2, [r3, #0]
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	2200      	movs	r2, #0
    22e2:	605a      	str	r2, [r3, #4]
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	4618      	mov	r0, r3
    22e8:	370c      	adds	r7, #12
    22ea:	46bd      	mov	sp, r7
    22ec:	bc80      	pop	{r7}
    22ee:	4770      	bx	lr
    22f0:	000139f4 	.word	0x000139f4

000022f4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    22f4:	b480      	push	{r7}
    22f6:	b083      	sub	sp, #12
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
    22fc:	2300      	movs	r3, #0
    22fe:	4618      	mov	r0, r3
    2300:	370c      	adds	r7, #12
    2302:	46bd      	mov	sp, r7
    2304:	bc80      	pop	{r7}
    2306:	4770      	bx	lr

00002308 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2308:	b480      	push	{r7}
    230a:	b083      	sub	sp, #12
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
    2310:	bf00      	nop
    2312:	370c      	adds	r7, #12
    2314:	46bd      	mov	sp, r7
    2316:	bc80      	pop	{r7}
    2318:	4770      	bx	lr
	...

0000231c <_ZN6StreamC1Ev>:
    Stream() {_timeout=1000;}
    231c:	b580      	push	{r7, lr}
    231e:	b082      	sub	sp, #8
    2320:	af00      	add	r7, sp, #0
    2322:	6078      	str	r0, [r7, #4]
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	4618      	mov	r0, r3
    2328:	4b06      	ldr	r3, [pc, #24]	; (2344 <_ZN6StreamC1Ev+0x28>)
    232a:	4798      	blx	r3
    232c:	4a06      	ldr	r2, [pc, #24]	; (2348 <_ZN6StreamC1Ev+0x2c>)
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	601a      	str	r2, [r3, #0]
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2338:	609a      	str	r2, [r3, #8]
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	4618      	mov	r0, r3
    233e:	3708      	adds	r7, #8
    2340:	46bd      	mov	sp, r7
    2342:	bd80      	pop	{r7, pc}
    2344:	000022d1 	.word	0x000022d1
    2348:	000139b8 	.word	0x000139b8

0000234c <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    2354:	4b06      	ldr	r3, [pc, #24]	; (2370 <_ZL10USBTimeoutPK10timer_task+0x24>)
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	2201      	movs	r2, #1
    235a:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    235c:	4b04      	ldr	r3, [pc, #16]	; (2370 <_ZL10USBTimeoutPK10timer_task+0x24>)
    235e:	681b      	ldr	r3, [r3, #0]
    2360:	2200      	movs	r2, #0
    2362:	741a      	strb	r2, [r3, #16]
	
}
    2364:	bf00      	nop
    2366:	370c      	adds	r7, #12
    2368:	46bd      	mov	sp, r7
    236a:	bc80      	pop	{r7}
    236c:	4770      	bx	lr
    236e:	bf00      	nop
    2370:	200017cc 	.word	0x200017cc

00002374 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    2374:	b480      	push	{r7}
    2376:	b083      	sub	sp, #12
    2378:	af00      	add	r7, sp, #0
    237a:	4603      	mov	r3, r0
    237c:	603a      	str	r2, [r7, #0]
    237e:	71fb      	strb	r3, [r7, #7]
    2380:	460b      	mov	r3, r1
    2382:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    2384:	4b08      	ldr	r3, [pc, #32]	; (23a8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    2386:	681b      	ldr	r3, [r3, #0]
    2388:	2201      	movs	r2, #1
    238a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    238c:	4b06      	ldr	r3, [pc, #24]	; (23a8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    238e:	681b      	ldr	r3, [r3, #0]
    2390:	2201      	movs	r2, #1
    2392:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    2394:	4b04      	ldr	r3, [pc, #16]	; (23a8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    2396:	681b      	ldr	r3, [r3, #0]
    2398:	2201      	movs	r2, #1
    239a:	741a      	strb	r2, [r3, #16]


	return false;
    239c:	2300      	movs	r3, #0
}
    239e:	4618      	mov	r0, r3
    23a0:	370c      	adds	r7, #12
    23a2:	46bd      	mov	sp, r7
    23a4:	bc80      	pop	{r7}
    23a6:	4770      	bx	lr
    23a8:	200017cc 	.word	0x200017cc

000023ac <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    23ac:	b480      	push	{r7}
    23ae:	b083      	sub	sp, #12
    23b0:	af00      	add	r7, sp, #0
    23b2:	4603      	mov	r3, r0
    23b4:	603a      	str	r2, [r7, #0]
    23b6:	71fb      	strb	r3, [r7, #7]
    23b8:	460b      	mov	r3, r1
    23ba:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    23bc:	4b08      	ldr	r3, [pc, #32]	; (23e0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    23be:	681b      	ldr	r3, [r3, #0]
    23c0:	2201      	movs	r2, #1
    23c2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    23c4:	4b06      	ldr	r3, [pc, #24]	; (23e0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    23c6:	681b      	ldr	r3, [r3, #0]
    23c8:	2201      	movs	r2, #1
    23ca:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    23cc:	4b04      	ldr	r3, [pc, #16]	; (23e0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    23ce:	681b      	ldr	r3, [r3, #0]
    23d0:	2201      	movs	r2, #1
    23d2:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    23d4:	2300      	movs	r3, #0
}
    23d6:	4618      	mov	r0, r3
    23d8:	370c      	adds	r7, #12
    23da:	46bd      	mov	sp, r7
    23dc:	bc80      	pop	{r7}
    23de:	4770      	bx	lr
    23e0:	200017cc 	.word	0x200017cc

000023e4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    23e4:	b580      	push	{r7, lr}
    23e6:	b082      	sub	sp, #8
    23e8:	af00      	add	r7, sp, #0
    23ea:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    23ec:	793b      	ldrb	r3, [r7, #4]
    23ee:	f003 0301 	and.w	r3, r3, #1
    23f2:	b2db      	uxtb	r3, r3
    23f4:	2b00      	cmp	r3, #0
    23f6:	d013      	beq.n	2420 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    23f8:	490c      	ldr	r1, [pc, #48]	; (242c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    23fa:	2000      	movs	r0, #0
    23fc:	4b0c      	ldr	r3, [pc, #48]	; (2430 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    23fe:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    2400:	490c      	ldr	r1, [pc, #48]	; (2434 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    2402:	2001      	movs	r0, #1
    2404:	4b0a      	ldr	r3, [pc, #40]	; (2430 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    2406:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    2408:	4b0b      	ldr	r3, [pc, #44]	; (2438 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    240a:	681b      	ldr	r3, [r3, #0]
    240c:	2201      	movs	r2, #1
    240e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    2410:	4b09      	ldr	r3, [pc, #36]	; (2438 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    2412:	681b      	ldr	r3, [r3, #0]
    2414:	2201      	movs	r2, #1
    2416:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    2418:	4b07      	ldr	r3, [pc, #28]	; (2438 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    241a:	681b      	ldr	r3, [r3, #0]
    241c:	2201      	movs	r2, #1
    241e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    2420:	2300      	movs	r3, #0
}
    2422:	4618      	mov	r0, r3
    2424:	3708      	adds	r7, #8
    2426:	46bd      	mov	sp, r7
    2428:	bd80      	pop	{r7, pc}
    242a:	bf00      	nop
    242c:	00002375 	.word	0x00002375
    2430:	0000f581 	.word	0x0000f581
    2434:	000023ad 	.word	0x000023ad
    2438:	200017cc 	.word	0x200017cc

0000243c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    243c:	b580      	push	{r7, lr}
    243e:	b082      	sub	sp, #8
    2440:	af00      	add	r7, sp, #0
    2442:	6078      	str	r0, [r7, #4]
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	4618      	mov	r0, r3
    2448:	4b0a      	ldr	r3, [pc, #40]	; (2474 <_ZN9CDC_ClassC1Ev+0x38>)
    244a:	4798      	blx	r3
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	3310      	adds	r3, #16
    2450:	4618      	mov	r0, r3
    2452:	4b09      	ldr	r3, [pc, #36]	; (2478 <_ZN9CDC_ClassC1Ev+0x3c>)
    2454:	4798      	blx	r3
    2456:	4a09      	ldr	r2, [pc, #36]	; (247c <_ZN9CDC_ClassC1Ev+0x40>)
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	f04f 32ff 	mov.w	r2, #4294967295
    2462:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    2464:	4a06      	ldr	r2, [pc, #24]	; (2480 <_ZN9CDC_ClassC1Ev+0x44>)
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    246a:	687b      	ldr	r3, [r7, #4]
    246c:	4618      	mov	r0, r3
    246e:	3708      	adds	r7, #8
    2470:	46bd      	mov	sp, r7
    2472:	bd80      	pop	{r7, pc}
    2474:	0000231d 	.word	0x0000231d
    2478:	00002fe5 	.word	0x00002fe5
    247c:	00013988 	.word	0x00013988
    2480:	200017cc 	.word	0x200017cc

00002484 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    2484:	b580      	push	{r7, lr}
    2486:	b082      	sub	sp, #8
    2488:	af00      	add	r7, sp, #0
    248a:	6078      	str	r0, [r7, #4]
    248c:	4a06      	ldr	r2, [pc, #24]	; (24a8 <_ZN9CDC_ClassD1Ev+0x24>)
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	601a      	str	r2, [r3, #0]
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	3310      	adds	r3, #16
    2496:	4618      	mov	r0, r3
    2498:	4b04      	ldr	r3, [pc, #16]	; (24ac <_ZN9CDC_ClassD1Ev+0x28>)
    249a:	4798      	blx	r3
{
} //~CDC_Class
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	4618      	mov	r0, r3
    24a0:	3708      	adds	r7, #8
    24a2:	46bd      	mov	sp, r7
    24a4:	bd80      	pop	{r7, pc}
    24a6:	bf00      	nop
    24a8:	00013988 	.word	0x00013988
    24ac:	00003005 	.word	0x00003005

000024b0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    24b0:	b580      	push	{r7, lr}
    24b2:	b082      	sub	sp, #8
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
	
	OnInit();
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	3310      	adds	r3, #16
    24bc:	4618      	mov	r0, r3
    24be:	4b07      	ldr	r3, [pc, #28]	; (24dc <_ZN9CDC_Class4InitEv+0x2c>)
    24c0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    24c2:	4907      	ldr	r1, [pc, #28]	; (24e0 <_ZN9CDC_Class4InitEv+0x30>)
    24c4:	2003      	movs	r0, #3
    24c6:	4b07      	ldr	r3, [pc, #28]	; (24e4 <_ZN9CDC_Class4InitEv+0x34>)
    24c8:	4798      	blx	r3
	
		
	if (connected)
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
    24ce:	20c8      	movs	r0, #200	; 0xc8
    24d0:	4b05      	ldr	r3, [pc, #20]	; (24e8 <_ZN9CDC_Class4InitEv+0x38>)
    24d2:	4798      	blx	r3

	

}
    24d4:	bf00      	nop
    24d6:	3708      	adds	r7, #8
    24d8:	46bd      	mov	sp, r7
    24da:	bd80      	pop	{r7, pc}
    24dc:	00003019 	.word	0x00003019
    24e0:	000023e5 	.word	0x000023e5
    24e4:	0000f581 	.word	0x0000f581
    24e8:	00004e01 	.word	0x00004e01

000024ec <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    24ec:	b580      	push	{r7, lr}
    24ee:	b082      	sub	sp, #8
    24f0:	af00      	add	r7, sp, #0
    24f2:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    24f4:	4b03      	ldr	r3, [pc, #12]	; (2504 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    24f6:	4798      	blx	r3
    24f8:	4603      	mov	r3, r0
	
}
    24fa:	4618      	mov	r0, r3
    24fc:	3708      	adds	r7, #8
    24fe:	46bd      	mov	sp, r7
    2500:	bd80      	pop	{r7, pc}
    2502:	bf00      	nop
    2504:	0000f5f9 	.word	0x0000f5f9

00002508 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    2508:	b580      	push	{r7, lr}
    250a:	b084      	sub	sp, #16
    250c:	af00      	add	r7, sp, #0
    250e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	699b      	ldr	r3, [r3, #24]
    2514:	f1b3 3fff 	cmp.w	r3, #4294967295
    2518:	bf14      	ite	ne
    251a:	2301      	movne	r3, #1
    251c:	2300      	moveq	r3, #0
    251e:	b2db      	uxtb	r3, r3
    2520:	2b00      	cmp	r3, #0
    2522:	d002      	beq.n	252a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	699b      	ldr	r3, [r3, #24]
    2528:	e011      	b.n	254e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	681b      	ldr	r3, [r3, #0]
    252e:	331c      	adds	r3, #28
    2530:	681b      	ldr	r3, [r3, #0]
    2532:	f107 010f 	add.w	r1, r7, #15
    2536:	2201      	movs	r2, #1
    2538:	6878      	ldr	r0, [r7, #4]
    253a:	4798      	blx	r3
    253c:	4602      	mov	r2, r0
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    2542:	7bfb      	ldrb	r3, [r7, #15]
    2544:	461a      	mov	r2, r3
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	699b      	ldr	r3, [r3, #24]
}
    254e:	4618      	mov	r0, r3
    2550:	3710      	adds	r7, #16
    2552:	46bd      	mov	sp, r7
    2554:	bd80      	pop	{r7, pc}
	...

00002558 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    2558:	b580      	push	{r7, lr}
    255a:	b086      	sub	sp, #24
    255c:	af00      	add	r7, sp, #0
    255e:	60f8      	str	r0, [r7, #12]
    2560:	60b9      	str	r1, [r7, #8]
    2562:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    2564:	68fb      	ldr	r3, [r7, #12]
    2566:	7c1b      	ldrb	r3, [r3, #16]
    2568:	b2db      	uxtb	r3, r3
    256a:	2b00      	cmp	r3, #0
    256c:	d02e      	beq.n	25cc <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    256e:	687a      	ldr	r2, [r7, #4]
    2570:	4613      	mov	r3, r2
    2572:	009b      	lsls	r3, r3, #2
    2574:	4413      	add	r3, r2
    2576:	005b      	lsls	r3, r3, #1
    2578:	461a      	mov	r2, r3
    257a:	4918      	ldr	r1, [pc, #96]	; (25dc <_ZN9CDC_Class8readDataEPvl+0x84>)
    257c:	4818      	ldr	r0, [pc, #96]	; (25e0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    257e:	4b19      	ldr	r3, [pc, #100]	; (25e4 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    2580:	4798      	blx	r3
		rxReady=false;
    2582:	68fb      	ldr	r3, [r7, #12]
    2584:	2200      	movs	r2, #0
    2586:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	4619      	mov	r1, r3
    258c:	68b8      	ldr	r0, [r7, #8]
    258e:	4b16      	ldr	r3, [pc, #88]	; (25e8 <_ZN9CDC_Class8readDataEPvl+0x90>)
    2590:	4798      	blx	r3
    2592:	4603      	mov	r3, r0
    2594:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    2596:	68fb      	ldr	r3, [r7, #12]
    2598:	7d5b      	ldrb	r3, [r3, #21]
    259a:	b2db      	uxtb	r3, r3
    259c:	f083 0301 	eor.w	r3, r3, #1
    25a0:	b2db      	uxtb	r3, r3
    25a2:	2b00      	cmp	r3, #0
    25a4:	d006      	beq.n	25b4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    25a6:	68fb      	ldr	r3, [r7, #12]
    25a8:	7c1b      	ldrb	r3, [r3, #16]
    25aa:	b2db      	uxtb	r3, r3
    25ac:	2b00      	cmp	r3, #0
    25ae:	d001      	beq.n	25b4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    25b0:	2301      	movs	r3, #1
    25b2:	e000      	b.n	25b6 <_ZN9CDC_Class8readDataEPvl+0x5e>
    25b4:	2300      	movs	r3, #0
    25b6:	2b00      	cmp	r3, #0
    25b8:	d000      	beq.n	25bc <_ZN9CDC_Class8readDataEPvl+0x64>
    25ba:	e7ec      	b.n	2596 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    25bc:	4808      	ldr	r0, [pc, #32]	; (25e0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    25be:	4b0b      	ldr	r3, [pc, #44]	; (25ec <_ZN9CDC_Class8readDataEPvl+0x94>)
    25c0:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    25c2:	4906      	ldr	r1, [pc, #24]	; (25dc <_ZN9CDC_Class8readDataEPvl+0x84>)
    25c4:	4806      	ldr	r0, [pc, #24]	; (25e0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    25c6:	4b0a      	ldr	r3, [pc, #40]	; (25f0 <_ZN9CDC_Class8readDataEPvl+0x98>)
    25c8:	4798      	blx	r3
    25ca:	e001      	b.n	25d0 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    25cc:	2300      	movs	r3, #0
    25ce:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    25d0:	7dfb      	ldrb	r3, [r7, #23]
}
    25d2:	4618      	mov	r0, r3
    25d4:	3718      	adds	r7, #24
    25d6:	46bd      	mov	sp, r7
    25d8:	bd80      	pop	{r7, pc}
    25da:	bf00      	nop
    25dc:	0000234d 	.word	0x0000234d
    25e0:	20001888 	.word	0x20001888
    25e4:	0000325d 	.word	0x0000325d
    25e8:	0000f4d5 	.word	0x0000f4d5
    25ec:	000031a5 	.word	0x000031a5
    25f0:	00003295 	.word	0x00003295

000025f4 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    25f4:	b580      	push	{r7, lr}
    25f6:	b084      	sub	sp, #16
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	2200      	movs	r2, #0
    2600:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    2602:	f107 030f 	add.w	r3, r7, #15
    2606:	2101      	movs	r1, #1
    2608:	4618      	mov	r0, r3
    260a:	4b08      	ldr	r3, [pc, #32]	; (262c <_ZN9CDC_Class4readEv+0x38>)
    260c:	4798      	blx	r3
	while(!rxReady);
    260e:	687b      	ldr	r3, [r7, #4]
    2610:	7d5b      	ldrb	r3, [r3, #21]
    2612:	b2db      	uxtb	r3, r3
    2614:	f083 0301 	eor.w	r3, r3, #1
    2618:	b2db      	uxtb	r3, r3
    261a:	2b00      	cmp	r3, #0
    261c:	d000      	beq.n	2620 <_ZN9CDC_Class4readEv+0x2c>
    261e:	e7f6      	b.n	260e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    2620:	7bfb      	ldrb	r3, [r7, #15]
}
    2622:	4618      	mov	r0, r3
    2624:	3710      	adds	r7, #16
    2626:	46bd      	mov	sp, r7
    2628:	bd80      	pop	{r7, pc}
    262a:	bf00      	nop
    262c:	0000f4d5 	.word	0x0000f4d5

00002630 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    2630:	b580      	push	{r7, lr}
    2632:	b082      	sub	sp, #8
    2634:	af00      	add	r7, sp, #0
    2636:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    2638:	687b      	ldr	r3, [r7, #4]
    263a:	331c      	adds	r3, #28
    263c:	2140      	movs	r1, #64	; 0x40
    263e:	4618      	mov	r0, r3
    2640:	4b02      	ldr	r3, [pc, #8]	; (264c <_ZN9CDC_Class5flushEv+0x1c>)
    2642:	4798      	blx	r3
}
    2644:	bf00      	nop
    2646:	3708      	adds	r7, #8
    2648:	46bd      	mov	sp, r7
    264a:	bd80      	pop	{r7, pc}
    264c:	0000f519 	.word	0x0000f519

00002650 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    2658:	4b02      	ldr	r3, [pc, #8]	; (2664 <_ZN9CDC_Class5clearEv+0x14>)
    265a:	4798      	blx	r3
}
    265c:	bf00      	nop
    265e:	3708      	adds	r7, #8
    2660:	46bd      	mov	sp, r7
    2662:	bd80      	pop	{r7, pc}
    2664:	0000f55d 	.word	0x0000f55d

00002668 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    2668:	b580      	push	{r7, lr}
    266a:	b082      	sub	sp, #8
    266c:	af00      	add	r7, sp, #0
    266e:	6078      	str	r0, [r7, #4]
    2670:	460b      	mov	r3, r1
    2672:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	7d1b      	ldrb	r3, [r3, #20]
    2678:	b2db      	uxtb	r3, r3
    267a:	f083 0301 	eor.w	r3, r3, #1
    267e:	b2db      	uxtb	r3, r3
    2680:	2b00      	cmp	r3, #0
    2682:	d000      	beq.n	2686 <_ZN9CDC_Class5writeEh+0x1e>
    2684:	e7f6      	b.n	2674 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	681b      	ldr	r3, [r3, #0]
    268a:	3324      	adds	r3, #36	; 0x24
    268c:	681b      	ldr	r3, [r3, #0]
    268e:	1cf9      	adds	r1, r7, #3
    2690:	2201      	movs	r2, #1
    2692:	6878      	ldr	r0, [r7, #4]
    2694:	4798      	blx	r3
    2696:	4603      	mov	r3, r0
}
    2698:	4618      	mov	r0, r3
    269a:	3708      	adds	r7, #8
    269c:	46bd      	mov	sp, r7
    269e:	bd80      	pop	{r7, pc}

000026a0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    26a0:	b580      	push	{r7, lr}
    26a2:	b086      	sub	sp, #24
    26a4:	af00      	add	r7, sp, #0
    26a6:	60f8      	str	r0, [r7, #12]
    26a8:	60b9      	str	r1, [r7, #8]
    26aa:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    26ac:	68fb      	ldr	r3, [r7, #12]
    26ae:	7c1b      	ldrb	r3, [r3, #16]
    26b0:	b2db      	uxtb	r3, r3
    26b2:	2b00      	cmp	r3, #0
    26b4:	d02f      	beq.n	2716 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    26b6:	687a      	ldr	r2, [r7, #4]
    26b8:	4613      	mov	r3, r2
    26ba:	009b      	lsls	r3, r3, #2
    26bc:	4413      	add	r3, r2
    26be:	005b      	lsls	r3, r3, #1
    26c0:	461a      	mov	r2, r3
    26c2:	4917      	ldr	r1, [pc, #92]	; (2720 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    26c4:	4817      	ldr	r0, [pc, #92]	; (2724 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    26c6:	4b18      	ldr	r3, [pc, #96]	; (2728 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    26c8:	4798      	blx	r3
		txReady=false;
    26ca:	68fb      	ldr	r3, [r7, #12]
    26cc:	2200      	movs	r2, #0
    26ce:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	4619      	mov	r1, r3
    26d4:	68b8      	ldr	r0, [r7, #8]
    26d6:	4b15      	ldr	r3, [pc, #84]	; (272c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    26d8:	4798      	blx	r3
    26da:	4603      	mov	r3, r0
    26dc:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    26de:	68fb      	ldr	r3, [r7, #12]
    26e0:	7d1b      	ldrb	r3, [r3, #20]
    26e2:	b2db      	uxtb	r3, r3
    26e4:	f083 0301 	eor.w	r3, r3, #1
    26e8:	b2db      	uxtb	r3, r3
    26ea:	2b00      	cmp	r3, #0
    26ec:	d006      	beq.n	26fc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    26ee:	68fb      	ldr	r3, [r7, #12]
    26f0:	7c1b      	ldrb	r3, [r3, #16]
    26f2:	b2db      	uxtb	r3, r3
    26f4:	2b00      	cmp	r3, #0
    26f6:	d001      	beq.n	26fc <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    26f8:	2301      	movs	r3, #1
    26fa:	e000      	b.n	26fe <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    26fc:	2300      	movs	r3, #0
    26fe:	2b00      	cmp	r3, #0
    2700:	d000      	beq.n	2704 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    2702:	e7ec      	b.n	26de <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    2704:	4807      	ldr	r0, [pc, #28]	; (2724 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    2706:	4b0a      	ldr	r3, [pc, #40]	; (2730 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    2708:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    270a:	4905      	ldr	r1, [pc, #20]	; (2720 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    270c:	4805      	ldr	r0, [pc, #20]	; (2724 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    270e:	4b09      	ldr	r3, [pc, #36]	; (2734 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    2710:	4798      	blx	r3
		return r;
    2712:	697b      	ldr	r3, [r7, #20]
    2714:	e000      	b.n	2718 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    2716:	2300      	movs	r3, #0
	}
	

}
    2718:	4618      	mov	r0, r3
    271a:	3718      	adds	r7, #24
    271c:	46bd      	mov	sp, r7
    271e:	bd80      	pop	{r7, pc}
    2720:	0000234d 	.word	0x0000234d
    2724:	20001888 	.word	0x20001888
    2728:	0000325d 	.word	0x0000325d
    272c:	0000f519 	.word	0x0000f519
    2730:	000031a5 	.word	0x000031a5
    2734:	00003295 	.word	0x00003295

00002738 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    2738:	b580      	push	{r7, lr}
    273a:	b086      	sub	sp, #24
    273c:	af00      	add	r7, sp, #0
    273e:	60f8      	str	r0, [r7, #12]
    2740:	60b9      	str	r1, [r7, #8]
    2742:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    2744:	68fb      	ldr	r3, [r7, #12]
    2746:	2200      	movs	r2, #0
    2748:	751a      	strb	r2, [r3, #20]

 	if (connected){
    274a:	68fb      	ldr	r3, [r7, #12]
    274c:	7c1b      	ldrb	r3, [r3, #16]
    274e:	b2db      	uxtb	r3, r3
    2750:	2b00      	cmp	r3, #0
    2752:	d02a      	beq.n	27aa <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    2754:	687a      	ldr	r2, [r7, #4]
    2756:	4613      	mov	r3, r2
    2758:	009b      	lsls	r3, r3, #2
    275a:	4413      	add	r3, r2
    275c:	005b      	lsls	r3, r3, #1
    275e:	461a      	mov	r2, r3
    2760:	4915      	ldr	r1, [pc, #84]	; (27b8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    2762:	4816      	ldr	r0, [pc, #88]	; (27bc <_ZN9CDC_Class5writeEPKhj+0x84>)
    2764:	4b16      	ldr	r3, [pc, #88]	; (27c0 <_ZN9CDC_Class5writeEPKhj+0x88>)
    2766:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    2768:	6879      	ldr	r1, [r7, #4]
    276a:	68b8      	ldr	r0, [r7, #8]
    276c:	4b15      	ldr	r3, [pc, #84]	; (27c4 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    276e:	4798      	blx	r3
    2770:	4603      	mov	r3, r0
    2772:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    2774:	68fb      	ldr	r3, [r7, #12]
    2776:	7d1b      	ldrb	r3, [r3, #20]
    2778:	b2db      	uxtb	r3, r3
    277a:	f083 0301 	eor.w	r3, r3, #1
    277e:	b2db      	uxtb	r3, r3
    2780:	2b00      	cmp	r3, #0
    2782:	d006      	beq.n	2792 <_ZN9CDC_Class5writeEPKhj+0x5a>
    2784:	68fb      	ldr	r3, [r7, #12]
    2786:	7c1b      	ldrb	r3, [r3, #16]
    2788:	b2db      	uxtb	r3, r3
    278a:	2b00      	cmp	r3, #0
    278c:	d001      	beq.n	2792 <_ZN9CDC_Class5writeEPKhj+0x5a>
    278e:	2301      	movs	r3, #1
    2790:	e000      	b.n	2794 <_ZN9CDC_Class5writeEPKhj+0x5c>
    2792:	2300      	movs	r3, #0
    2794:	2b00      	cmp	r3, #0
    2796:	d000      	beq.n	279a <_ZN9CDC_Class5writeEPKhj+0x62>
    2798:	e7ec      	b.n	2774 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    279a:	4808      	ldr	r0, [pc, #32]	; (27bc <_ZN9CDC_Class5writeEPKhj+0x84>)
    279c:	4b0a      	ldr	r3, [pc, #40]	; (27c8 <_ZN9CDC_Class5writeEPKhj+0x90>)
    279e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    27a0:	4905      	ldr	r1, [pc, #20]	; (27b8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    27a2:	4806      	ldr	r0, [pc, #24]	; (27bc <_ZN9CDC_Class5writeEPKhj+0x84>)
    27a4:	4b09      	ldr	r3, [pc, #36]	; (27cc <_ZN9CDC_Class5writeEPKhj+0x94>)
    27a6:	4798      	blx	r3
    27a8:	e001      	b.n	27ae <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    27aa:	2300      	movs	r3, #0
    27ac:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    27ae:	697b      	ldr	r3, [r7, #20]
}
    27b0:	4618      	mov	r0, r3
    27b2:	3718      	adds	r7, #24
    27b4:	46bd      	mov	sp, r7
    27b6:	bd80      	pop	{r7, pc}
    27b8:	0000234d 	.word	0x0000234d
    27bc:	20001888 	.word	0x20001888
    27c0:	0000325d 	.word	0x0000325d
    27c4:	0000f519 	.word	0x0000f519
    27c8:	000031a5 	.word	0x000031a5
    27cc:	00003295 	.word	0x00003295

000027d0 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    27d0:	b480      	push	{r7}
    27d2:	b083      	sub	sp, #12
    27d4:	af00      	add	r7, sp, #0
    27d6:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	7d5b      	ldrb	r3, [r3, #21]
    27dc:	b2db      	uxtb	r3, r3
    27de:	2b00      	cmp	r3, #0
    27e0:	d006      	beq.n	27f0 <_ZN9CDC_Class9availableEv+0x20>
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	7d1b      	ldrb	r3, [r3, #20]
    27e6:	b2db      	uxtb	r3, r3
    27e8:	2b00      	cmp	r3, #0
    27ea:	d001      	beq.n	27f0 <_ZN9CDC_Class9availableEv+0x20>
    27ec:	2301      	movs	r3, #1
    27ee:	e000      	b.n	27f2 <_ZN9CDC_Class9availableEv+0x22>
    27f0:	2300      	movs	r3, #0
    27f2:	2b00      	cmp	r3, #0
    27f4:	d001      	beq.n	27fa <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    27f6:	2301      	movs	r3, #1
    27f8:	e000      	b.n	27fc <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    27fa:	2300      	movs	r3, #0
	}
	
}
    27fc:	4618      	mov	r0, r3
    27fe:	370c      	adds	r7, #12
    2800:	46bd      	mov	sp, r7
    2802:	bc80      	pop	{r7}
    2804:	4770      	bx	lr
	...

00002808 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    2808:	b580      	push	{r7, lr}
    280a:	b082      	sub	sp, #8
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
    2810:	6039      	str	r1, [r7, #0]
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	2b01      	cmp	r3, #1
    2816:	d10c      	bne.n	2832 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2818:	683b      	ldr	r3, [r7, #0]
    281a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    281e:	4293      	cmp	r3, r2
    2820:	d107      	bne.n	2832 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2822:	4806      	ldr	r0, [pc, #24]	; (283c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2824:	4b06      	ldr	r3, [pc, #24]	; (2840 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2826:	4798      	blx	r3
    2828:	4a06      	ldr	r2, [pc, #24]	; (2844 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    282a:	4907      	ldr	r1, [pc, #28]	; (2848 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    282c:	4803      	ldr	r0, [pc, #12]	; (283c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    282e:	4b07      	ldr	r3, [pc, #28]	; (284c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2830:	4798      	blx	r3
    2832:	bf00      	nop
    2834:	3708      	adds	r7, #8
    2836:	46bd      	mov	sp, r7
    2838:	bd80      	pop	{r7, pc}
    283a:	bf00      	nop
    283c:	200017d0 	.word	0x200017d0
    2840:	0000243d 	.word	0x0000243d
    2844:	20000000 	.word	0x20000000
    2848:	00002485 	.word	0x00002485
    284c:	000105fd 	.word	0x000105fd

00002850 <_GLOBAL__sub_I_ptrCDCClass>:
    2850:	b580      	push	{r7, lr}
    2852:	af00      	add	r7, sp, #0
    2854:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2858:	2001      	movs	r0, #1
    285a:	4b01      	ldr	r3, [pc, #4]	; (2860 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    285c:	4798      	blx	r3
    285e:	bd80      	pop	{r7, pc}
    2860:	00002809 	.word	0x00002809

00002864 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    2864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2868:	b082      	sub	sp, #8
    286a:	af00      	add	r7, sp, #0
    286c:	e9c7 0100 	strd	r0, r1, [r7]
    2870:	683c      	ldr	r4, [r7, #0]
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    2878:	2301      	movs	r3, #1
    287a:	4698      	mov	r8, r3
    287c:	4e11      	ldr	r6, [pc, #68]	; (28c4 <_ZSt5isinfd+0x60>)
    287e:	f04f 32ff 	mov.w	r2, #4294967295
    2882:	4b11      	ldr	r3, [pc, #68]	; (28c8 <_ZSt5isinfd+0x64>)
    2884:	4620      	mov	r0, r4
    2886:	4629      	mov	r1, r5
    2888:	47b0      	blx	r6
    288a:	4603      	mov	r3, r0
    288c:	2b00      	cmp	r3, #0
    288e:	d10b      	bne.n	28a8 <_ZSt5isinfd+0x44>
    2890:	4e0e      	ldr	r6, [pc, #56]	; (28cc <_ZSt5isinfd+0x68>)
    2892:	f04f 32ff 	mov.w	r2, #4294967295
    2896:	4b0c      	ldr	r3, [pc, #48]	; (28c8 <_ZSt5isinfd+0x64>)
    2898:	4620      	mov	r0, r4
    289a:	4629      	mov	r1, r5
    289c:	47b0      	blx	r6
    289e:	4603      	mov	r3, r0
    28a0:	2b00      	cmp	r3, #0
    28a2:	d101      	bne.n	28a8 <_ZSt5isinfd+0x44>
    28a4:	2300      	movs	r3, #0
    28a6:	4698      	mov	r8, r3
    28a8:	fa5f f388 	uxtb.w	r3, r8
    28ac:	f083 0301 	eor.w	r3, r3, #1
    28b0:	b2db      	uxtb	r3, r3
    28b2:	f003 0301 	and.w	r3, r3, #1
    28b6:	b2db      	uxtb	r3, r3
    28b8:	4618      	mov	r0, r3
    28ba:	3708      	adds	r7, #8
    28bc:	46bd      	mov	sp, r7
    28be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28c2:	bf00      	nop
    28c4:	00011ff9 	.word	0x00011ff9
    28c8:	7fefffff 	.word	0x7fefffff
    28cc:	00011fbd 	.word	0x00011fbd

000028d0 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
    28d0:	b590      	push	{r4, r7, lr}
    28d2:	b083      	sub	sp, #12
    28d4:	af00      	add	r7, sp, #0
    28d6:	e9c7 0100 	strd	r0, r1, [r7]
    28da:	4c08      	ldr	r4, [pc, #32]	; (28fc <_ZSt5isnand+0x2c>)
    28dc:	e9d7 2300 	ldrd	r2, r3, [r7]
    28e0:	e9d7 0100 	ldrd	r0, r1, [r7]
    28e4:	47a0      	blx	r4
    28e6:	4603      	mov	r3, r0
    28e8:	2b00      	cmp	r3, #0
    28ea:	d001      	beq.n	28f0 <_ZSt5isnand+0x20>
    28ec:	2301      	movs	r3, #1
    28ee:	e000      	b.n	28f2 <_ZSt5isnand+0x22>
    28f0:	2300      	movs	r3, #0
    28f2:	4618      	mov	r0, r3
    28f4:	370c      	adds	r7, #12
    28f6:	46bd      	mov	sp, r7
    28f8:	bd90      	pop	{r4, r7, pc}
    28fa:	bf00      	nop
    28fc:	00011ff9 	.word	0x00011ff9

00002900 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    2900:	b590      	push	{r4, r7, lr}
    2902:	b083      	sub	sp, #12
    2904:	af00      	add	r7, sp, #0
    2906:	6078      	str	r0, [r7, #4]
    2908:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    290a:	683b      	ldr	r3, [r7, #0]
    290c:	2b00      	cmp	r3, #0
    290e:	d101      	bne.n	2914 <_ZN5Print5writeEPKc+0x14>
    2910:	2300      	movs	r3, #0
    2912:	e00c      	b.n	292e <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	3304      	adds	r3, #4
    291a:	681c      	ldr	r4, [r3, #0]
    291c:	6838      	ldr	r0, [r7, #0]
    291e:	4b06      	ldr	r3, [pc, #24]	; (2938 <_ZN5Print5writeEPKc+0x38>)
    2920:	4798      	blx	r3
    2922:	4603      	mov	r3, r0
    2924:	461a      	mov	r2, r3
    2926:	6839      	ldr	r1, [r7, #0]
    2928:	6878      	ldr	r0, [r7, #4]
    292a:	47a0      	blx	r4
    292c:	4603      	mov	r3, r0
    }
    292e:	4618      	mov	r0, r3
    2930:	370c      	adds	r7, #12
    2932:	46bd      	mov	sp, r7
    2934:	bd90      	pop	{r4, r7, pc}
    2936:	bf00      	nop
    2938:	00012781 	.word	0x00012781

0000293c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    293c:	b580      	push	{r7, lr}
    293e:	b086      	sub	sp, #24
    2940:	af00      	add	r7, sp, #0
    2942:	60f8      	str	r0, [r7, #12]
    2944:	60b9      	str	r1, [r7, #8]
    2946:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    2948:	2300      	movs	r3, #0
    294a:	617b      	str	r3, [r7, #20]
  while (size--) {
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	1e5a      	subs	r2, r3, #1
    2950:	607a      	str	r2, [r7, #4]
    2952:	2b00      	cmp	r3, #0
    2954:	bf14      	ite	ne
    2956:	2301      	movne	r3, #1
    2958:	2300      	moveq	r3, #0
    295a:	b2db      	uxtb	r3, r3
    295c:	2b00      	cmp	r3, #0
    295e:	d016      	beq.n	298e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	681b      	ldr	r3, [r3, #0]
    2964:	681a      	ldr	r2, [r3, #0]
    2966:	68bb      	ldr	r3, [r7, #8]
    2968:	1c59      	adds	r1, r3, #1
    296a:	60b9      	str	r1, [r7, #8]
    296c:	781b      	ldrb	r3, [r3, #0]
    296e:	4619      	mov	r1, r3
    2970:	68f8      	ldr	r0, [r7, #12]
    2972:	4790      	blx	r2
    2974:	4603      	mov	r3, r0
    2976:	2b00      	cmp	r3, #0
    2978:	bf14      	ite	ne
    297a:	2301      	movne	r3, #1
    297c:	2300      	moveq	r3, #0
    297e:	b2db      	uxtb	r3, r3
    2980:	2b00      	cmp	r3, #0
    2982:	d003      	beq.n	298c <_ZN5Print5writeEPKhj+0x50>
    2984:	697b      	ldr	r3, [r7, #20]
    2986:	3301      	adds	r3, #1
    2988:	617b      	str	r3, [r7, #20]
  while (size--) {
    298a:	e7df      	b.n	294c <_ZN5Print5writeEPKhj+0x10>
    else break;
    298c:	bf00      	nop
  }
  return n;
    298e:	697b      	ldr	r3, [r7, #20]
}
    2990:	4618      	mov	r0, r3
    2992:	3718      	adds	r7, #24
    2994:	46bd      	mov	sp, r7
    2996:	bd80      	pop	{r7, pc}

00002998 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    2998:	b580      	push	{r7, lr}
    299a:	b082      	sub	sp, #8
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    29a0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
    29a2:	6839      	ldr	r1, [r7, #0]
    29a4:	6878      	ldr	r0, [r7, #4]
    29a6:	4b03      	ldr	r3, [pc, #12]	; (29b4 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
    29a8:	4798      	blx	r3
    29aa:	4603      	mov	r3, r0
}
    29ac:	4618      	mov	r0, r3
    29ae:	3708      	adds	r7, #8
    29b0:	46bd      	mov	sp, r7
    29b2:	bd80      	pop	{r7, pc}
    29b4:	000029b9 	.word	0x000029b9

000029b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    29b8:	b580      	push	{r7, lr}
    29ba:	b082      	sub	sp, #8
    29bc:	af00      	add	r7, sp, #0
    29be:	6078      	str	r0, [r7, #4]
    29c0:	6039      	str	r1, [r7, #0]
  return write(str);
    29c2:	6839      	ldr	r1, [r7, #0]
    29c4:	6878      	ldr	r0, [r7, #4]
    29c6:	4b03      	ldr	r3, [pc, #12]	; (29d4 <_ZN5Print5printEPKc+0x1c>)
    29c8:	4798      	blx	r3
    29ca:	4603      	mov	r3, r0
}
    29cc:	4618      	mov	r0, r3
    29ce:	3708      	adds	r7, #8
    29d0:	46bd      	mov	sp, r7
    29d2:	bd80      	pop	{r7, pc}
    29d4:	00002901 	.word	0x00002901

000029d8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b082      	sub	sp, #8
    29dc:	af00      	add	r7, sp, #0
    29de:	6078      	str	r0, [r7, #4]
    29e0:	460b      	mov	r3, r1
    29e2:	70fb      	strb	r3, [r7, #3]
  return write(c);
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	681b      	ldr	r3, [r3, #0]
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	78fa      	ldrb	r2, [r7, #3]
    29ec:	4611      	mov	r1, r2
    29ee:	6878      	ldr	r0, [r7, #4]
    29f0:	4798      	blx	r3
    29f2:	4603      	mov	r3, r0
}
    29f4:	4618      	mov	r0, r3
    29f6:	3708      	adds	r7, #8
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    29fc:	b580      	push	{r7, lr}
    29fe:	b084      	sub	sp, #16
    2a00:	af00      	add	r7, sp, #0
    2a02:	60f8      	str	r0, [r7, #12]
    2a04:	460b      	mov	r3, r1
    2a06:	607a      	str	r2, [r7, #4]
    2a08:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    2a0a:	7afb      	ldrb	r3, [r7, #11]
    2a0c:	687a      	ldr	r2, [r7, #4]
    2a0e:	4619      	mov	r1, r3
    2a10:	68f8      	ldr	r0, [r7, #12]
    2a12:	4b03      	ldr	r3, [pc, #12]	; (2a20 <_ZN5Print5printEhi+0x24>)
    2a14:	4798      	blx	r3
    2a16:	4603      	mov	r3, r0
}
    2a18:	4618      	mov	r0, r3
    2a1a:	3710      	adds	r7, #16
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}
    2a20:	00002a49 	.word	0x00002a49

00002a24 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    2a24:	b580      	push	{r7, lr}
    2a26:	b084      	sub	sp, #16
    2a28:	af00      	add	r7, sp, #0
    2a2a:	60f8      	str	r0, [r7, #12]
    2a2c:	60b9      	str	r1, [r7, #8]
    2a2e:	607a      	str	r2, [r7, #4]
  return print((unsigned long) n, base);
    2a30:	687a      	ldr	r2, [r7, #4]
    2a32:	68b9      	ldr	r1, [r7, #8]
    2a34:	68f8      	ldr	r0, [r7, #12]
    2a36:	4b03      	ldr	r3, [pc, #12]	; (2a44 <_ZN5Print5printEji+0x20>)
    2a38:	4798      	blx	r3
    2a3a:	4603      	mov	r3, r0
}
    2a3c:	4618      	mov	r0, r3
    2a3e:	3710      	adds	r7, #16
    2a40:	46bd      	mov	sp, r7
    2a42:	bd80      	pop	{r7, pc}
    2a44:	00002a49 	.word	0x00002a49

00002a48 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b084      	sub	sp, #16
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	60f8      	str	r0, [r7, #12]
    2a50:	60b9      	str	r1, [r7, #8]
    2a52:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d109      	bne.n	2a6e <_ZN5Print5printEmi+0x26>
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	68ba      	ldr	r2, [r7, #8]
    2a62:	b2d2      	uxtb	r2, r2
    2a64:	4611      	mov	r1, r2
    2a66:	68f8      	ldr	r0, [r7, #12]
    2a68:	4798      	blx	r3
    2a6a:	4603      	mov	r3, r0
    2a6c:	e007      	b.n	2a7e <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	b2db      	uxtb	r3, r3
    2a72:	461a      	mov	r2, r3
    2a74:	68b9      	ldr	r1, [r7, #8]
    2a76:	68f8      	ldr	r0, [r7, #12]
    2a78:	4b03      	ldr	r3, [pc, #12]	; (2a88 <_ZN5Print5printEmi+0x40>)
    2a7a:	4798      	blx	r3
    2a7c:	4603      	mov	r3, r0
}
    2a7e:	4618      	mov	r0, r3
    2a80:	3710      	adds	r7, #16
    2a82:	46bd      	mov	sp, r7
    2a84:	bd80      	pop	{r7, pc}
    2a86:	bf00      	nop
    2a88:	00002bc1 	.word	0x00002bc1

00002a8c <_ZN5Print5printEdi>:

size_t Print::print(double n, int digits)
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	b086      	sub	sp, #24
    2a90:	af02      	add	r7, sp, #8
    2a92:	60f8      	str	r0, [r7, #12]
    2a94:	e9c7 2300 	strd	r2, r3, [r7]
  return printFloat(n, digits);
    2a98:	69bb      	ldr	r3, [r7, #24]
    2a9a:	b2db      	uxtb	r3, r3
    2a9c:	9300      	str	r3, [sp, #0]
    2a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
    2aa2:	68f8      	ldr	r0, [r7, #12]
    2aa4:	4903      	ldr	r1, [pc, #12]	; (2ab4 <_ZN5Print5printEdi+0x28>)
    2aa6:	4788      	blx	r1
    2aa8:	4603      	mov	r3, r0
}
    2aaa:	4618      	mov	r0, r3
    2aac:	3710      	adds	r7, #16
    2aae:	46bd      	mov	sp, r7
    2ab0:	bd80      	pop	{r7, pc}
    2ab2:	bf00      	nop
    2ab4:	00002c45 	.word	0x00002c45

00002ab8 <_ZN5Print7printlnEPK19__FlashStringHelper>:

size_t Print::println(const __FlashStringHelper *ifsh)
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b084      	sub	sp, #16
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
    2ac2:	6839      	ldr	r1, [r7, #0]
    2ac4:	6878      	ldr	r0, [r7, #4]
    2ac6:	4b07      	ldr	r3, [pc, #28]	; (2ae4 <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
    2ac8:	4798      	blx	r3
    2aca:	60f8      	str	r0, [r7, #12]
  n += println();
    2acc:	6878      	ldr	r0, [r7, #4]
    2ace:	4b06      	ldr	r3, [pc, #24]	; (2ae8 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
    2ad0:	4798      	blx	r3
    2ad2:	4602      	mov	r2, r0
    2ad4:	68fb      	ldr	r3, [r7, #12]
    2ad6:	4413      	add	r3, r2
    2ad8:	60fb      	str	r3, [r7, #12]
  return n;
    2ada:	68fb      	ldr	r3, [r7, #12]
}
    2adc:	4618      	mov	r0, r3
    2ade:	3710      	adds	r7, #16
    2ae0:	46bd      	mov	sp, r7
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	00002999 	.word	0x00002999
    2ae8:	00002aed 	.word	0x00002aed

00002aec <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    2af4:	4904      	ldr	r1, [pc, #16]	; (2b08 <_ZN5Print7printlnEv+0x1c>)
    2af6:	6878      	ldr	r0, [r7, #4]
    2af8:	4b04      	ldr	r3, [pc, #16]	; (2b0c <_ZN5Print7printlnEv+0x20>)
    2afa:	4798      	blx	r3
    2afc:	4603      	mov	r3, r0
}
    2afe:	4618      	mov	r0, r3
    2b00:	3708      	adds	r7, #8
    2b02:	46bd      	mov	sp, r7
    2b04:	bd80      	pop	{r7, pc}
    2b06:	bf00      	nop
    2b08:	000139dc 	.word	0x000139dc
    2b0c:	00002901 	.word	0x00002901

00002b10 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    2b10:	b580      	push	{r7, lr}
    2b12:	b086      	sub	sp, #24
    2b14:	af00      	add	r7, sp, #0
    2b16:	60f8      	str	r0, [r7, #12]
    2b18:	460b      	mov	r3, r1
    2b1a:	607a      	str	r2, [r7, #4]
    2b1c:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
    2b1e:	7afb      	ldrb	r3, [r7, #11]
    2b20:	687a      	ldr	r2, [r7, #4]
    2b22:	4619      	mov	r1, r3
    2b24:	68f8      	ldr	r0, [r7, #12]
    2b26:	4b07      	ldr	r3, [pc, #28]	; (2b44 <_ZN5Print7printlnEhi+0x34>)
    2b28:	4798      	blx	r3
    2b2a:	6178      	str	r0, [r7, #20]
  n += println();
    2b2c:	68f8      	ldr	r0, [r7, #12]
    2b2e:	4b06      	ldr	r3, [pc, #24]	; (2b48 <_ZN5Print7printlnEhi+0x38>)
    2b30:	4798      	blx	r3
    2b32:	4602      	mov	r2, r0
    2b34:	697b      	ldr	r3, [r7, #20]
    2b36:	4413      	add	r3, r2
    2b38:	617b      	str	r3, [r7, #20]
  return n;
    2b3a:	697b      	ldr	r3, [r7, #20]
}
    2b3c:	4618      	mov	r0, r3
    2b3e:	3718      	adds	r7, #24
    2b40:	46bd      	mov	sp, r7
    2b42:	bd80      	pop	{r7, pc}
    2b44:	000029fd 	.word	0x000029fd
    2b48:	00002aed 	.word	0x00002aed

00002b4c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    2b4c:	b580      	push	{r7, lr}
    2b4e:	b086      	sub	sp, #24
    2b50:	af00      	add	r7, sp, #0
    2b52:	60f8      	str	r0, [r7, #12]
    2b54:	60b9      	str	r1, [r7, #8]
    2b56:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    2b58:	687a      	ldr	r2, [r7, #4]
    2b5a:	68b9      	ldr	r1, [r7, #8]
    2b5c:	68f8      	ldr	r0, [r7, #12]
    2b5e:	4b07      	ldr	r3, [pc, #28]	; (2b7c <_ZN5Print7printlnEmi+0x30>)
    2b60:	4798      	blx	r3
    2b62:	6178      	str	r0, [r7, #20]
  n += println();
    2b64:	68f8      	ldr	r0, [r7, #12]
    2b66:	4b06      	ldr	r3, [pc, #24]	; (2b80 <_ZN5Print7printlnEmi+0x34>)
    2b68:	4798      	blx	r3
    2b6a:	4602      	mov	r2, r0
    2b6c:	697b      	ldr	r3, [r7, #20]
    2b6e:	4413      	add	r3, r2
    2b70:	617b      	str	r3, [r7, #20]
  return n;
    2b72:	697b      	ldr	r3, [r7, #20]
}
    2b74:	4618      	mov	r0, r3
    2b76:	3718      	adds	r7, #24
    2b78:	46bd      	mov	sp, r7
    2b7a:	bd80      	pop	{r7, pc}
    2b7c:	00002a49 	.word	0x00002a49
    2b80:	00002aed 	.word	0x00002aed

00002b84 <_ZN5Print7printlnEdi>:

size_t Print::println(double num, int digits)
{
    2b84:	b580      	push	{r7, lr}
    2b86:	b088      	sub	sp, #32
    2b88:	af02      	add	r7, sp, #8
    2b8a:	60f8      	str	r0, [r7, #12]
    2b8c:	e9c7 2300 	strd	r2, r3, [r7]
  size_t n = print(num, digits);
    2b90:	6a3b      	ldr	r3, [r7, #32]
    2b92:	9300      	str	r3, [sp, #0]
    2b94:	e9d7 2300 	ldrd	r2, r3, [r7]
    2b98:	68f8      	ldr	r0, [r7, #12]
    2b9a:	4907      	ldr	r1, [pc, #28]	; (2bb8 <_ZN5Print7printlnEdi+0x34>)
    2b9c:	4788      	blx	r1
    2b9e:	6178      	str	r0, [r7, #20]
  n += println();
    2ba0:	68f8      	ldr	r0, [r7, #12]
    2ba2:	4b06      	ldr	r3, [pc, #24]	; (2bbc <_ZN5Print7printlnEdi+0x38>)
    2ba4:	4798      	blx	r3
    2ba6:	4602      	mov	r2, r0
    2ba8:	697b      	ldr	r3, [r7, #20]
    2baa:	4413      	add	r3, r2
    2bac:	617b      	str	r3, [r7, #20]
  return n;
    2bae:	697b      	ldr	r3, [r7, #20]
}
    2bb0:	4618      	mov	r0, r3
    2bb2:	3718      	adds	r7, #24
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bd80      	pop	{r7, pc}
    2bb8:	00002a8d 	.word	0x00002a8d
    2bbc:	00002aed 	.word	0x00002aed

00002bc0 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    2bc0:	b580      	push	{r7, lr}
    2bc2:	b08e      	sub	sp, #56	; 0x38
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	60f8      	str	r0, [r7, #12]
    2bc8:	60b9      	str	r1, [r7, #8]
    2bca:	4613      	mov	r3, r2
    2bcc:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    2bce:	f107 0310 	add.w	r3, r7, #16
    2bd2:	3320      	adds	r3, #32
    2bd4:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    2bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2bd8:	2200      	movs	r2, #0
    2bda:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2bdc:	79fb      	ldrb	r3, [r7, #7]
    2bde:	2b01      	cmp	r3, #1
    2be0:	dc01      	bgt.n	2be6 <_ZN5Print11printNumberEmh+0x26>
    2be2:	230a      	movs	r3, #10
    2be4:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    2be6:	79fa      	ldrb	r2, [r7, #7]
    2be8:	68bb      	ldr	r3, [r7, #8]
    2bea:	fbb3 f1f2 	udiv	r1, r3, r2
    2bee:	fb02 f201 	mul.w	r2, r2, r1
    2bf2:	1a9b      	subs	r3, r3, r2
    2bf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    2bf8:	79fb      	ldrb	r3, [r7, #7]
    2bfa:	68ba      	ldr	r2, [r7, #8]
    2bfc:	fbb2 f3f3 	udiv	r3, r2, r3
    2c00:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2c04:	3b01      	subs	r3, #1
    2c06:	637b      	str	r3, [r7, #52]	; 0x34
    2c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2c0c:	2b09      	cmp	r3, #9
    2c0e:	dc04      	bgt.n	2c1a <_ZN5Print11printNumberEmh+0x5a>
    2c10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2c14:	3330      	adds	r3, #48	; 0x30
    2c16:	b2db      	uxtb	r3, r3
    2c18:	e003      	b.n	2c22 <_ZN5Print11printNumberEmh+0x62>
    2c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2c1e:	3337      	adds	r3, #55	; 0x37
    2c20:	b2db      	uxtb	r3, r3
    2c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2c24:	7013      	strb	r3, [r2, #0]
  } while(n);
    2c26:	68bb      	ldr	r3, [r7, #8]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d000      	beq.n	2c2e <_ZN5Print11printNumberEmh+0x6e>
  do {
    2c2c:	e7db      	b.n	2be6 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    2c2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2c30:	68f8      	ldr	r0, [r7, #12]
    2c32:	4b03      	ldr	r3, [pc, #12]	; (2c40 <_ZN5Print11printNumberEmh+0x80>)
    2c34:	4798      	blx	r3
    2c36:	4603      	mov	r3, r0
}
    2c38:	4618      	mov	r0, r3
    2c3a:	3738      	adds	r7, #56	; 0x38
    2c3c:	46bd      	mov	sp, r7
    2c3e:	bd80      	pop	{r7, pc}
    2c40:	00002901 	.word	0x00002901

00002c44 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
    2c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c46:	b08f      	sub	sp, #60	; 0x3c
    2c48:	af00      	add	r7, sp, #0
    2c4a:	60f8      	str	r0, [r7, #12]
    2c4c:	e9c7 2300 	strd	r2, r3, [r7]
  size_t n = 0;
    2c50:	2300      	movs	r3, #0
    2c52:	637b      	str	r3, [r7, #52]	; 0x34

  if (isnan(number)) return print("nan");
    2c54:	e9d7 0100 	ldrd	r0, r1, [r7]
    2c58:	4b6f      	ldr	r3, [pc, #444]	; (2e18 <_ZN5Print10printFloatEdh+0x1d4>)
    2c5a:	4798      	blx	r3
    2c5c:	4603      	mov	r3, r0
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d005      	beq.n	2c6e <_ZN5Print10printFloatEdh+0x2a>
    2c62:	496e      	ldr	r1, [pc, #440]	; (2e1c <_ZN5Print10printFloatEdh+0x1d8>)
    2c64:	68f8      	ldr	r0, [r7, #12]
    2c66:	4b6e      	ldr	r3, [pc, #440]	; (2e20 <_ZN5Print10printFloatEdh+0x1dc>)
    2c68:	4798      	blx	r3
    2c6a:	4603      	mov	r3, r0
    2c6c:	e0cf      	b.n	2e0e <_ZN5Print10printFloatEdh+0x1ca>
  if (isinf(number)) return print("inf");
    2c6e:	e9d7 0100 	ldrd	r0, r1, [r7]
    2c72:	4b6c      	ldr	r3, [pc, #432]	; (2e24 <_ZN5Print10printFloatEdh+0x1e0>)
    2c74:	4798      	blx	r3
    2c76:	4603      	mov	r3, r0
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d005      	beq.n	2c88 <_ZN5Print10printFloatEdh+0x44>
    2c7c:	496a      	ldr	r1, [pc, #424]	; (2e28 <_ZN5Print10printFloatEdh+0x1e4>)
    2c7e:	68f8      	ldr	r0, [r7, #12]
    2c80:	4b67      	ldr	r3, [pc, #412]	; (2e20 <_ZN5Print10printFloatEdh+0x1dc>)
    2c82:	4798      	blx	r3
    2c84:	4603      	mov	r3, r0
    2c86:	e0c2      	b.n	2e0e <_ZN5Print10printFloatEdh+0x1ca>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2c88:	4c68      	ldr	r4, [pc, #416]	; (2e2c <_ZN5Print10printFloatEdh+0x1e8>)
    2c8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    2c8e:	4b68      	ldr	r3, [pc, #416]	; (2e30 <_ZN5Print10printFloatEdh+0x1ec>)
    2c90:	e9d7 0100 	ldrd	r0, r1, [r7]
    2c94:	47a0      	blx	r4
    2c96:	4603      	mov	r3, r0
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d005      	beq.n	2ca8 <_ZN5Print10printFloatEdh+0x64>
    2c9c:	4965      	ldr	r1, [pc, #404]	; (2e34 <_ZN5Print10printFloatEdh+0x1f0>)
    2c9e:	68f8      	ldr	r0, [r7, #12]
    2ca0:	4b5f      	ldr	r3, [pc, #380]	; (2e20 <_ZN5Print10printFloatEdh+0x1dc>)
    2ca2:	4798      	blx	r3
    2ca4:	4603      	mov	r3, r0
    2ca6:	e0b2      	b.n	2e0e <_ZN5Print10printFloatEdh+0x1ca>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2ca8:	4c63      	ldr	r4, [pc, #396]	; (2e38 <_ZN5Print10printFloatEdh+0x1f4>)
    2caa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    2cae:	4b63      	ldr	r3, [pc, #396]	; (2e3c <_ZN5Print10printFloatEdh+0x1f8>)
    2cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
    2cb4:	47a0      	blx	r4
    2cb6:	4603      	mov	r3, r0
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d005      	beq.n	2cc8 <_ZN5Print10printFloatEdh+0x84>
    2cbc:	495d      	ldr	r1, [pc, #372]	; (2e34 <_ZN5Print10printFloatEdh+0x1f0>)
    2cbe:	68f8      	ldr	r0, [r7, #12]
    2cc0:	4b57      	ldr	r3, [pc, #348]	; (2e20 <_ZN5Print10printFloatEdh+0x1dc>)
    2cc2:	4798      	blx	r3
    2cc4:	4603      	mov	r3, r0
    2cc6:	e0a2      	b.n	2e0e <_ZN5Print10printFloatEdh+0x1ca>

  // Handle negative numbers
  if (number < 0.0)
    2cc8:	4c5b      	ldr	r4, [pc, #364]	; (2e38 <_ZN5Print10printFloatEdh+0x1f4>)
    2cca:	f04f 0200 	mov.w	r2, #0
    2cce:	f04f 0300 	mov.w	r3, #0
    2cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
    2cd6:	47a0      	blx	r4
    2cd8:	4603      	mov	r3, r0
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d00d      	beq.n	2cfa <_ZN5Print10printFloatEdh+0xb6>
  {
     n += print('-');
    2cde:	212d      	movs	r1, #45	; 0x2d
    2ce0:	68f8      	ldr	r0, [r7, #12]
    2ce2:	4b57      	ldr	r3, [pc, #348]	; (2e40 <_ZN5Print10printFloatEdh+0x1fc>)
    2ce4:	4798      	blx	r3
    2ce6:	4602      	mov	r2, r0
    2ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2cea:	4413      	add	r3, r2
    2cec:	637b      	str	r3, [r7, #52]	; 0x34
     number = -number;
    2cee:	683b      	ldr	r3, [r7, #0]
    2cf0:	603b      	str	r3, [r7, #0]
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    2cf8:	607b      	str	r3, [r7, #4]
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2cfa:	f04f 0300 	mov.w	r3, #0
    2cfe:	4c51      	ldr	r4, [pc, #324]	; (2e44 <_ZN5Print10printFloatEdh+0x200>)
    2d00:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
    2d04:	2300      	movs	r3, #0
    2d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2d0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2d0e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    2d12:	429a      	cmp	r2, r3
    2d14:	da10      	bge.n	2d38 <_ZN5Print10printFloatEdh+0xf4>
    rounding /= 10.0;
    2d16:	4c4c      	ldr	r4, [pc, #304]	; (2e48 <_ZN5Print10printFloatEdh+0x204>)
    2d18:	f04f 0200 	mov.w	r2, #0
    2d1c:	4b4b      	ldr	r3, [pc, #300]	; (2e4c <_ZN5Print10printFloatEdh+0x208>)
    2d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    2d22:	47a0      	blx	r4
    2d24:	4603      	mov	r3, r0
    2d26:	460c      	mov	r4, r1
    2d28:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
    2d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2d30:	3301      	adds	r3, #1
    2d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2d36:	e7e8      	b.n	2d0a <_ZN5Print10printFloatEdh+0xc6>

  number += rounding;
    2d38:	4c45      	ldr	r4, [pc, #276]	; (2e50 <_ZN5Print10printFloatEdh+0x20c>)
    2d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    2d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
    2d42:	47a0      	blx	r4
    2d44:	4603      	mov	r3, r0
    2d46:	460c      	mov	r4, r1
    2d48:	e9c7 3400 	strd	r3, r4, [r7]

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2d4c:	4b41      	ldr	r3, [pc, #260]	; (2e54 <_ZN5Print10printFloatEdh+0x210>)
    2d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
    2d52:	4798      	blx	r3
    2d54:	4603      	mov	r3, r0
    2d56:	623b      	str	r3, [r7, #32]
  double remainder = number - (double)int_part;
    2d58:	4b3f      	ldr	r3, [pc, #252]	; (2e58 <_ZN5Print10printFloatEdh+0x214>)
    2d5a:	6a38      	ldr	r0, [r7, #32]
    2d5c:	4798      	blx	r3
    2d5e:	4602      	mov	r2, r0
    2d60:	460b      	mov	r3, r1
    2d62:	4c3e      	ldr	r4, [pc, #248]	; (2e5c <_ZN5Print10printFloatEdh+0x218>)
    2d64:	e9d7 0100 	ldrd	r0, r1, [r7]
    2d68:	47a0      	blx	r4
    2d6a:	4603      	mov	r3, r0
    2d6c:	460c      	mov	r4, r1
    2d6e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  n += print(int_part);
    2d72:	220a      	movs	r2, #10
    2d74:	6a39      	ldr	r1, [r7, #32]
    2d76:	68f8      	ldr	r0, [r7, #12]
    2d78:	4b39      	ldr	r3, [pc, #228]	; (2e60 <_ZN5Print10printFloatEdh+0x21c>)
    2d7a:	4798      	blx	r3
    2d7c:	4602      	mov	r2, r0
    2d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d80:	4413      	add	r3, r2
    2d82:	637b      	str	r3, [r7, #52]	; 0x34

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2d84:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    2d88:	2b00      	cmp	r3, #0
    2d8a:	dd07      	ble.n	2d9c <_ZN5Print10printFloatEdh+0x158>
    n += print('.');
    2d8c:	212e      	movs	r1, #46	; 0x2e
    2d8e:	68f8      	ldr	r0, [r7, #12]
    2d90:	4b2b      	ldr	r3, [pc, #172]	; (2e40 <_ZN5Print10printFloatEdh+0x1fc>)
    2d92:	4798      	blx	r3
    2d94:	4602      	mov	r2, r0
    2d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d98:	4413      	add	r3, r2
    2d9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2d9c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    2da0:	1e5a      	subs	r2, r3, #1
    2da2:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
    2da6:	2b00      	cmp	r3, #0
    2da8:	bfcc      	ite	gt
    2daa:	2301      	movgt	r3, #1
    2dac:	2300      	movle	r3, #0
    2dae:	b2db      	uxtb	r3, r3
    2db0:	2b00      	cmp	r3, #0
    2db2:	d02b      	beq.n	2e0c <_ZN5Print10printFloatEdh+0x1c8>
  {
    remainder *= 10.0;
    2db4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    2db8:	4c2a      	ldr	r4, [pc, #168]	; (2e64 <_ZN5Print10printFloatEdh+0x220>)
    2dba:	f04f 0200 	mov.w	r2, #0
    2dbe:	4b23      	ldr	r3, [pc, #140]	; (2e4c <_ZN5Print10printFloatEdh+0x208>)
    2dc0:	47a0      	blx	r4
    2dc2:	4603      	mov	r3, r0
    2dc4:	460c      	mov	r4, r1
    2dc6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    unsigned int toPrint = (unsigned int)(remainder);
    2dca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    2dce:	4a21      	ldr	r2, [pc, #132]	; (2e54 <_ZN5Print10printFloatEdh+0x210>)
    2dd0:	4618      	mov	r0, r3
    2dd2:	4621      	mov	r1, r4
    2dd4:	4790      	blx	r2
    2dd6:	4603      	mov	r3, r0
    2dd8:	61fb      	str	r3, [r7, #28]
    n += print(toPrint);
    2dda:	220a      	movs	r2, #10
    2ddc:	69f9      	ldr	r1, [r7, #28]
    2dde:	68f8      	ldr	r0, [r7, #12]
    2de0:	4b21      	ldr	r3, [pc, #132]	; (2e68 <_ZN5Print10printFloatEdh+0x224>)
    2de2:	4798      	blx	r3
    2de4:	4602      	mov	r2, r0
    2de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2de8:	4413      	add	r3, r2
    2dea:	637b      	str	r3, [r7, #52]	; 0x34
    remainder -= toPrint;
    2dec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
    2df0:	4b19      	ldr	r3, [pc, #100]	; (2e58 <_ZN5Print10printFloatEdh+0x214>)
    2df2:	69f8      	ldr	r0, [r7, #28]
    2df4:	4798      	blx	r3
    2df6:	4602      	mov	r2, r0
    2df8:	460b      	mov	r3, r1
    2dfa:	4e18      	ldr	r6, [pc, #96]	; (2e5c <_ZN5Print10printFloatEdh+0x218>)
    2dfc:	4620      	mov	r0, r4
    2dfe:	4629      	mov	r1, r5
    2e00:	47b0      	blx	r6
    2e02:	4603      	mov	r3, r0
    2e04:	460c      	mov	r4, r1
    2e06:	e9c7 3404 	strd	r3, r4, [r7, #16]
  while (digits-- > 0)
    2e0a:	e7c7      	b.n	2d9c <_ZN5Print10printFloatEdh+0x158>
  }

  return n;
    2e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    2e0e:	4618      	mov	r0, r3
    2e10:	373c      	adds	r7, #60	; 0x3c
    2e12:	46bd      	mov	sp, r7
    2e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e16:	bf00      	nop
    2e18:	000028d1 	.word	0x000028d1
    2e1c:	000139e0 	.word	0x000139e0
    2e20:	000029b9 	.word	0x000029b9
    2e24:	00002865 	.word	0x00002865
    2e28:	000139e4 	.word	0x000139e4
    2e2c:	00011fe5 	.word	0x00011fe5
    2e30:	41efffff 	.word	0x41efffff
    2e34:	000139e8 	.word	0x000139e8
    2e38:	00011fa9 	.word	0x00011fa9
    2e3c:	c1efffff 	.word	0xc1efffff
    2e40:	000029d9 	.word	0x000029d9
    2e44:	3fe00000 	.word	0x3fe00000
    2e48:	00011d19 	.word	0x00011d19
    2e4c:	40240000 	.word	0x40240000
    2e50:	00011761 	.word	0x00011761
    2e54:	00012025 	.word	0x00012025
    2e58:	000119d9 	.word	0x000119d9
    2e5c:	0001175d 	.word	0x0001175d
    2e60:	00002a49 	.word	0x00002a49
    2e64:	00011ac5 	.word	0x00011ac5
    2e68:	00002a25 	.word	0x00002a25

00002e6c <hri_port_read_DIR_reg>:
{
    2e6c:	b480      	push	{r7}
    2e6e:	b083      	sub	sp, #12
    2e70:	af00      	add	r7, sp, #0
    2e72:	6078      	str	r0, [r7, #4]
    2e74:	460b      	mov	r3, r1
    2e76:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2e78:	78fb      	ldrb	r3, [r7, #3]
    2e7a:	687a      	ldr	r2, [r7, #4]
    2e7c:	01db      	lsls	r3, r3, #7
    2e7e:	4413      	add	r3, r2
    2e80:	681b      	ldr	r3, [r3, #0]
}
    2e82:	4618      	mov	r0, r3
    2e84:	370c      	adds	r7, #12
    2e86:	46bd      	mov	sp, r7
    2e88:	bc80      	pop	{r7}
    2e8a:	4770      	bx	lr

00002e8c <hri_port_read_OUT_reg>:
{
    2e8c:	b480      	push	{r7}
    2e8e:	b083      	sub	sp, #12
    2e90:	af00      	add	r7, sp, #0
    2e92:	6078      	str	r0, [r7, #4]
    2e94:	460b      	mov	r3, r1
    2e96:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e98:	78fb      	ldrb	r3, [r7, #3]
    2e9a:	687a      	ldr	r2, [r7, #4]
    2e9c:	01db      	lsls	r3, r3, #7
    2e9e:	4413      	add	r3, r2
    2ea0:	3310      	adds	r3, #16
    2ea2:	681b      	ldr	r3, [r3, #0]
}
    2ea4:	4618      	mov	r0, r3
    2ea6:	370c      	adds	r7, #12
    2ea8:	46bd      	mov	sp, r7
    2eaa:	bc80      	pop	{r7}
    2eac:	4770      	bx	lr

00002eae <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    2eae:	b480      	push	{r7}
    2eb0:	b083      	sub	sp, #12
    2eb2:	af00      	add	r7, sp, #0
    2eb4:	6078      	str	r0, [r7, #4]
    2eb6:	460b      	mov	r3, r1
    2eb8:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2eba:	78fb      	ldrb	r3, [r7, #3]
    2ebc:	687a      	ldr	r2, [r7, #4]
    2ebe:	01db      	lsls	r3, r3, #7
    2ec0:	4413      	add	r3, r2
    2ec2:	3320      	adds	r3, #32
    2ec4:	681b      	ldr	r3, [r3, #0]
}
    2ec6:	4618      	mov	r0, r3
    2ec8:	370c      	adds	r7, #12
    2eca:	46bd      	mov	sp, r7
    2ecc:	bc80      	pop	{r7}
    2ece:	4770      	bx	lr

00002ed0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b086      	sub	sp, #24
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	4603      	mov	r3, r0
    2ed8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2eda:	f107 030c 	add.w	r3, r7, #12
    2ede:	4618      	mov	r0, r3
    2ee0:	4b13      	ldr	r3, [pc, #76]	; (2f30 <_gpio_get_level+0x60>)
    2ee2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    2ee4:	79fb      	ldrb	r3, [r7, #7]
    2ee6:	4619      	mov	r1, r3
    2ee8:	4812      	ldr	r0, [pc, #72]	; (2f34 <_gpio_get_level+0x64>)
    2eea:	4b13      	ldr	r3, [pc, #76]	; (2f38 <_gpio_get_level+0x68>)
    2eec:	4798      	blx	r3
    2eee:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    2ef0:	79fb      	ldrb	r3, [r7, #7]
    2ef2:	4619      	mov	r1, r3
    2ef4:	480f      	ldr	r0, [pc, #60]	; (2f34 <_gpio_get_level+0x64>)
    2ef6:	4b11      	ldr	r3, [pc, #68]	; (2f3c <_gpio_get_level+0x6c>)
    2ef8:	4798      	blx	r3
    2efa:	4602      	mov	r2, r0
    2efc:	697b      	ldr	r3, [r7, #20]
    2efe:	43db      	mvns	r3, r3
    2f00:	4013      	ands	r3, r2
    2f02:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2f04:	79fb      	ldrb	r3, [r7, #7]
    2f06:	4619      	mov	r1, r3
    2f08:	480a      	ldr	r0, [pc, #40]	; (2f34 <_gpio_get_level+0x64>)
    2f0a:	4b0d      	ldr	r3, [pc, #52]	; (2f40 <_gpio_get_level+0x70>)
    2f0c:	4798      	blx	r3
    2f0e:	4602      	mov	r2, r0
    2f10:	697b      	ldr	r3, [r7, #20]
    2f12:	4013      	ands	r3, r2
    2f14:	693a      	ldr	r2, [r7, #16]
    2f16:	4313      	orrs	r3, r2
    2f18:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    2f1a:	f107 030c 	add.w	r3, r7, #12
    2f1e:	4618      	mov	r0, r3
    2f20:	4b08      	ldr	r3, [pc, #32]	; (2f44 <_gpio_get_level+0x74>)
    2f22:	4798      	blx	r3

	return tmp;
    2f24:	693b      	ldr	r3, [r7, #16]
}
    2f26:	4618      	mov	r0, r3
    2f28:	3718      	adds	r7, #24
    2f2a:	46bd      	mov	sp, r7
    2f2c:	bd80      	pop	{r7, pc}
    2f2e:	bf00      	nop
    2f30:	00004971 	.word	0x00004971
    2f34:	41008000 	.word	0x41008000
    2f38:	00002e6d 	.word	0x00002e6d
    2f3c:	00002eaf 	.word	0x00002eaf
    2f40:	00002e8d 	.word	0x00002e8d
    2f44:	00004997 	.word	0x00004997

00002f48 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    2f48:	b580      	push	{r7, lr}
    2f4a:	b082      	sub	sp, #8
    2f4c:	af00      	add	r7, sp, #0
    2f4e:	4603      	mov	r3, r0
    2f50:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2f52:	79fb      	ldrb	r3, [r7, #7]
    2f54:	115b      	asrs	r3, r3, #5
    2f56:	b2db      	uxtb	r3, r3
    2f58:	4618      	mov	r0, r3
    2f5a:	4b09      	ldr	r3, [pc, #36]	; (2f80 <gpio_get_pin_level+0x38>)
    2f5c:	4798      	blx	r3
    2f5e:	4601      	mov	r1, r0
    2f60:	79fb      	ldrb	r3, [r7, #7]
    2f62:	f003 031f 	and.w	r3, r3, #31
    2f66:	2201      	movs	r2, #1
    2f68:	fa02 f303 	lsl.w	r3, r2, r3
    2f6c:	400b      	ands	r3, r1
    2f6e:	2b00      	cmp	r3, #0
    2f70:	bf14      	ite	ne
    2f72:	2301      	movne	r3, #1
    2f74:	2300      	moveq	r3, #0
    2f76:	b2db      	uxtb	r3, r3
}
    2f78:	4618      	mov	r0, r3
    2f7a:	3708      	adds	r7, #8
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bd80      	pop	{r7, pc}
    2f80:	00002ed1 	.word	0x00002ed1

00002f84 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    2f84:	b480      	push	{r7}
    2f86:	b083      	sub	sp, #12
    2f88:	af00      	add	r7, sp, #0
    2f8a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	2201      	movs	r2, #1
    2f92:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    2f94:	4b04      	ldr	r3, [pc, #16]	; (2fa8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	2200      	movs	r2, #0
    2f9a:	705a      	strb	r2, [r3, #1]
}
    2f9c:	bf00      	nop
    2f9e:	370c      	adds	r7, #12
    2fa0:	46bd      	mov	sp, r7
    2fa2:	bc80      	pop	{r7}
    2fa4:	4770      	bx	lr
    2fa6:	bf00      	nop
    2fa8:	20001830 	.word	0x20001830

00002fac <_ZL10USBPluggedv>:

static void USBPlugged(void){
    2fac:	b580      	push	{r7, lr}
    2fae:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    2fb0:	2040      	movs	r0, #64	; 0x40
    2fb2:	4b0a      	ldr	r3, [pc, #40]	; (2fdc <_ZL10USBPluggedv+0x30>)
    2fb4:	4798      	blx	r3
    2fb6:	4603      	mov	r3, r0
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d004      	beq.n	2fc6 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    2fbc:	4b08      	ldr	r3, [pc, #32]	; (2fe0 <_ZL10USBPluggedv+0x34>)
    2fbe:	681b      	ldr	r3, [r3, #0]
    2fc0:	2201      	movs	r2, #1
    2fc2:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    2fc4:	e007      	b.n	2fd6 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    2fc6:	4b06      	ldr	r3, [pc, #24]	; (2fe0 <_ZL10USBPluggedv+0x34>)
    2fc8:	681b      	ldr	r3, [r3, #0]
    2fca:	2200      	movs	r2, #0
    2fcc:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    2fce:	4b04      	ldr	r3, [pc, #16]	; (2fe0 <_ZL10USBPluggedv+0x34>)
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	2200      	movs	r2, #0
    2fd4:	701a      	strb	r2, [r3, #0]
}
    2fd6:	bf00      	nop
    2fd8:	bd80      	pop	{r7, pc}
    2fda:	bf00      	nop
    2fdc:	00002f49 	.word	0x00002f49
    2fe0:	20001830 	.word	0x20001830

00002fe4 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    2fe4:	b480      	push	{r7}
    2fe6:	b083      	sub	sp, #12
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    2fec:	4a04      	ldr	r2, [pc, #16]	; (3000 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	4618      	mov	r0, r3
    2ff6:	370c      	adds	r7, #12
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bc80      	pop	{r7}
    2ffc:	4770      	bx	lr
    2ffe:	bf00      	nop
    3000:	20001830 	.word	0x20001830

00003004 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    3004:	b480      	push	{r7}
    3006:	b083      	sub	sp, #12
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	4618      	mov	r0, r3
    3010:	370c      	adds	r7, #12
    3012:	46bd      	mov	sp, r7
    3014:	bc80      	pop	{r7}
    3016:	4770      	bx	lr

00003018 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    3018:	b580      	push	{r7, lr}
    301a:	b082      	sub	sp, #8
    301c:	af00      	add	r7, sp, #0
    301e:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    3020:	491f      	ldr	r1, [pc, #124]	; (30a0 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    3022:	2040      	movs	r0, #64	; 0x40
    3024:	4b1f      	ldr	r3, [pc, #124]	; (30a4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    3026:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    3028:	481f      	ldr	r0, [pc, #124]	; (30a8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    302a:	4b20      	ldr	r3, [pc, #128]	; (30ac <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    302c:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    302e:	2040      	movs	r0, #64	; 0x40
    3030:	4b1f      	ldr	r3, [pc, #124]	; (30b0 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    3032:	4798      	blx	r3
    3034:	4603      	mov	r3, r0
    3036:	461a      	mov	r2, r3
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	78db      	ldrb	r3, [r3, #3]
    3040:	2b00      	cmp	r3, #0
    3042:	d024      	beq.n	308e <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	2200      	movs	r2, #0
    3048:	709a      	strb	r2, [r3, #2]
			plugged=true;
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	2201      	movs	r2, #1
    304e:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    3050:	f44f 7216 	mov.w	r2, #600	; 0x258
    3054:	4917      	ldr	r1, [pc, #92]	; (30b4 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    3056:	4814      	ldr	r0, [pc, #80]	; (30a8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    3058:	4b17      	ldr	r3, [pc, #92]	; (30b8 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    305a:	4798      	blx	r3
			usbTerminalTimer.Start();
    305c:	4812      	ldr	r0, [pc, #72]	; (30a8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    305e:	4b17      	ldr	r3, [pc, #92]	; (30bc <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    3060:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    3062:	4817      	ldr	r0, [pc, #92]	; (30c0 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    3064:	4b17      	ldr	r3, [pc, #92]	; (30c4 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    3066:	4798      	blx	r3
    3068:	4603      	mov	r3, r0
    306a:	f083 0301 	eor.w	r3, r3, #1
    306e:	b2db      	uxtb	r3, r3
    3070:	2b00      	cmp	r3, #0
    3072:	d008      	beq.n	3086 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	789b      	ldrb	r3, [r3, #2]
    3078:	b2db      	uxtb	r3, r3
    307a:	2b00      	cmp	r3, #0
    307c:	d0f1      	beq.n	3062 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	2200      	movs	r2, #0
    3082:	701a      	strb	r2, [r3, #0]
					return;
    3084:	e009      	b.n	309a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    3086:	4808      	ldr	r0, [pc, #32]	; (30a8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    3088:	4b0f      	ldr	r3, [pc, #60]	; (30c8 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    308a:	4798      	blx	r3
    308c:	e005      	b.n	309a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    308e:	687b      	ldr	r3, [r7, #4]
    3090:	2200      	movs	r2, #0
    3092:	701a      	strb	r2, [r3, #0]
			plugged=false;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	2200      	movs	r2, #0
    3098:	705a      	strb	r2, [r3, #1]
		}
		
}
    309a:	3708      	adds	r7, #8
    309c:	46bd      	mov	sp, r7
    309e:	bd80      	pop	{r7, pc}
    30a0:	00002fad 	.word	0x00002fad
    30a4:	00004e95 	.word	0x00004e95
    30a8:	20001888 	.word	0x20001888
    30ac:	00003149 	.word	0x00003149
    30b0:	00002f49 	.word	0x00002f49
    30b4:	00002f85 	.word	0x00002f85
    30b8:	00003235 	.word	0x00003235
    30bc:	00003181 	.word	0x00003181
    30c0:	200017d0 	.word	0x200017d0
    30c4:	000024ed 	.word	0x000024ed
    30c8:	000031a5 	.word	0x000031a5

000030cc <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b082      	sub	sp, #8
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    30d4:	4b04      	ldr	r3, [pc, #16]	; (30e8 <_ZL7task_cbPK10timer_task+0x1c>)
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	4618      	mov	r0, r3
    30da:	4b04      	ldr	r3, [pc, #16]	; (30ec <_ZL7task_cbPK10timer_task+0x20>)
    30dc:	4798      	blx	r3
}
    30de:	bf00      	nop
    30e0:	3708      	adds	r7, #8
    30e2:	46bd      	mov	sp, r7
    30e4:	bd80      	pop	{r7, pc}
    30e6:	bf00      	nop
    30e8:	20001834 	.word	0x20001834
    30ec:	000031cd 	.word	0x000031cd

000030f0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    30f0:	b480      	push	{r7}
    30f2:	b083      	sub	sp, #12
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	683a      	ldr	r2, [r7, #0]
    30fe:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    3100:	4a08      	ldr	r2, [pc, #32]	; (3124 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	f44f 6280 	mov.w	r2, #1024	; 0x400
    310c:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	689b      	ldr	r3, [r3, #8]
    3112:	4a05      	ldr	r2, [pc, #20]	; (3128 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    3114:	60da      	str	r2, [r3, #12]
} //Timer_Class
    3116:	687b      	ldr	r3, [r7, #4]
    3118:	4618      	mov	r0, r3
    311a:	370c      	adds	r7, #12
    311c:	46bd      	mov	sp, r7
    311e:	bc80      	pop	{r7}
    3120:	4770      	bx	lr
    3122:	bf00      	nop
    3124:	20001834 	.word	0x20001834
    3128:	000030cd 	.word	0x000030cd

0000312c <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    312c:	b480      	push	{r7}
    312e:	b083      	sub	sp, #12
    3130:	af00      	add	r7, sp, #0
    3132:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	2200      	movs	r2, #0
    3138:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	4618      	mov	r0, r3
    313e:	370c      	adds	r7, #12
    3140:	46bd      	mov	sp, r7
    3142:	bc80      	pop	{r7}
    3144:	4770      	bx	lr
	...

00003148 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    3148:	b580      	push	{r7, lr}
    314a:	b082      	sub	sp, #8
    314c:	af00      	add	r7, sp, #0
    314e:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    3150:	687b      	ldr	r3, [r7, #4]
    3152:	2200      	movs	r2, #0
    3154:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    3156:	6878      	ldr	r0, [r7, #4]
    3158:	4b08      	ldr	r3, [pc, #32]	; (317c <_ZN17TimerSerial_Class4InitEv+0x34>)
    315a:	4798      	blx	r3
    315c:	4603      	mov	r3, r0
    315e:	2b00      	cmp	r3, #0
    3160:	bf0c      	ite	eq
    3162:	2301      	moveq	r3, #1
    3164:	2300      	movne	r3, #0
    3166:	b2da      	uxtb	r2, r3
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	709a      	strb	r2, [r3, #2]
	return isOK;
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	789b      	ldrb	r3, [r3, #2]
    3170:	b2db      	uxtb	r3, r3
}
    3172:	4618      	mov	r0, r3
    3174:	3708      	adds	r7, #8
    3176:	46bd      	mov	sp, r7
    3178:	bd80      	pop	{r7, pc}
    317a:	bf00      	nop
    317c:	00003181 	.word	0x00003181

00003180 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    3180:	b580      	push	{r7, lr}
    3182:	b084      	sub	sp, #16
    3184:	af00      	add	r7, sp, #0
    3186:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	691b      	ldr	r3, [r3, #16]
    318c:	4618      	mov	r0, r3
    318e:	4b04      	ldr	r3, [pc, #16]	; (31a0 <_ZN17TimerSerial_Class5StartEv+0x20>)
    3190:	4798      	blx	r3
    3192:	60f8      	str	r0, [r7, #12]
	return status;
    3194:	68fb      	ldr	r3, [r7, #12]
	
}
    3196:	4618      	mov	r0, r3
    3198:	3710      	adds	r7, #16
    319a:	46bd      	mov	sp, r7
    319c:	bd80      	pop	{r7, pc}
    319e:	bf00      	nop
    31a0:	00005ce9 	.word	0x00005ce9

000031a4 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    31a4:	b580      	push	{r7, lr}
    31a6:	b084      	sub	sp, #16
    31a8:	af00      	add	r7, sp, #0
    31aa:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	691b      	ldr	r3, [r3, #16]
    31b0:	4618      	mov	r0, r3
    31b2:	4b05      	ldr	r3, [pc, #20]	; (31c8 <_ZN17TimerSerial_Class4StopEv+0x24>)
    31b4:	4798      	blx	r3
    31b6:	60f8      	str	r0, [r7, #12]
	timeout=0;
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	2200      	movs	r2, #0
    31bc:	705a      	strb	r2, [r3, #1]
	return status;
    31be:	68fb      	ldr	r3, [r7, #12]
}
    31c0:	4618      	mov	r0, r3
    31c2:	3710      	adds	r7, #16
    31c4:	46bd      	mov	sp, r7
    31c6:	bd80      	pop	{r7, pc}
    31c8:	00005d3d 	.word	0x00005d3d

000031cc <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    31cc:	b480      	push	{r7}
    31ce:	b083      	sub	sp, #12
    31d0:	af00      	add	r7, sp, #0
    31d2:	6078      	str	r0, [r7, #4]
	timeout=1;
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	2201      	movs	r2, #1
    31d8:	705a      	strb	r2, [r3, #1]
}
    31da:	bf00      	nop
    31dc:	370c      	adds	r7, #12
    31de:	46bd      	mov	sp, r7
    31e0:	bc80      	pop	{r7}
    31e2:	4770      	bx	lr

000031e4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    31e4:	b580      	push	{r7, lr}
    31e6:	b086      	sub	sp, #24
    31e8:	af00      	add	r7, sp, #0
    31ea:	60f8      	str	r0, [r7, #12]
    31ec:	60b9      	str	r1, [r7, #8]
    31ee:	607a      	str	r2, [r7, #4]
    31f0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    31f2:	68f8      	ldr	r0, [r7, #12]
    31f4:	4b0d      	ldr	r3, [pc, #52]	; (322c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    31f6:	4798      	blx	r3
	task->interval = interval;
    31f8:	68fb      	ldr	r3, [r7, #12]
    31fa:	689b      	ldr	r3, [r3, #8]
    31fc:	687a      	ldr	r2, [r7, #4]
    31fe:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    3200:	68fb      	ldr	r3, [r7, #12]
    3202:	689b      	ldr	r3, [r3, #8]
    3204:	68ba      	ldr	r2, [r7, #8]
    3206:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    3208:	68fb      	ldr	r3, [r7, #12]
    320a:	689b      	ldr	r3, [r3, #8]
    320c:	78fa      	ldrb	r2, [r7, #3]
    320e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    3210:	68fb      	ldr	r3, [r7, #12]
    3212:	691a      	ldr	r2, [r3, #16]
    3214:	68fb      	ldr	r3, [r7, #12]
    3216:	689b      	ldr	r3, [r3, #8]
    3218:	4619      	mov	r1, r3
    321a:	4610      	mov	r0, r2
    321c:	4b04      	ldr	r3, [pc, #16]	; (3230 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    321e:	4798      	blx	r3
    3220:	6178      	str	r0, [r7, #20]
	
	return status;
    3222:	697b      	ldr	r3, [r7, #20]
}
    3224:	4618      	mov	r0, r3
    3226:	3718      	adds	r7, #24
    3228:	46bd      	mov	sp, r7
    322a:	bd80      	pop	{r7, pc}
    322c:	000032ed 	.word	0x000032ed
    3230:	00005d99 	.word	0x00005d99

00003234 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    3234:	b590      	push	{r4, r7, lr}
    3236:	b087      	sub	sp, #28
    3238:	af00      	add	r7, sp, #0
    323a:	60f8      	str	r0, [r7, #12]
    323c:	60b9      	str	r1, [r7, #8]
    323e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    3240:	2300      	movs	r3, #0
    3242:	687a      	ldr	r2, [r7, #4]
    3244:	68b9      	ldr	r1, [r7, #8]
    3246:	68f8      	ldr	r0, [r7, #12]
    3248:	4c03      	ldr	r4, [pc, #12]	; (3258 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    324a:	47a0      	blx	r4
    324c:	6178      	str	r0, [r7, #20]
	return status;
    324e:	697b      	ldr	r3, [r7, #20]
}
    3250:	4618      	mov	r0, r3
    3252:	371c      	adds	r7, #28
    3254:	46bd      	mov	sp, r7
    3256:	bd90      	pop	{r4, r7, pc}
    3258:	000031e5 	.word	0x000031e5

0000325c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    325c:	b590      	push	{r4, r7, lr}
    325e:	b087      	sub	sp, #28
    3260:	af00      	add	r7, sp, #0
    3262:	60f8      	str	r0, [r7, #12]
    3264:	60b9      	str	r1, [r7, #8]
    3266:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    3268:	2300      	movs	r3, #0
    326a:	687a      	ldr	r2, [r7, #4]
    326c:	68b9      	ldr	r1, [r7, #8]
    326e:	68f8      	ldr	r0, [r7, #12]
    3270:	4c06      	ldr	r4, [pc, #24]	; (328c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    3272:	47a0      	blx	r4
    3274:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    3276:	68fb      	ldr	r3, [r7, #12]
    3278:	691b      	ldr	r3, [r3, #16]
    327a:	4618      	mov	r0, r3
    327c:	4b04      	ldr	r3, [pc, #16]	; (3290 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    327e:	4798      	blx	r3
    3280:	6178      	str	r0, [r7, #20]
	return status;
    3282:	697b      	ldr	r3, [r7, #20]
}
    3284:	4618      	mov	r0, r3
    3286:	371c      	adds	r7, #28
    3288:	46bd      	mov	sp, r7
    328a:	bd90      	pop	{r4, r7, pc}
    328c:	000031e5 	.word	0x000031e5
    3290:	00005ce9 	.word	0x00005ce9

00003294 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
    329c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    329e:	6839      	ldr	r1, [r7, #0]
    32a0:	6878      	ldr	r0, [r7, #4]
    32a2:	4b0f      	ldr	r3, [pc, #60]	; (32e0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    32a4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	691b      	ldr	r3, [r3, #16]
    32aa:	f103 0214 	add.w	r2, r3, #20
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	689b      	ldr	r3, [r3, #8]
    32b2:	4619      	mov	r1, r3
    32b4:	4610      	mov	r0, r2
    32b6:	4b0b      	ldr	r3, [pc, #44]	; (32e4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    32b8:	4798      	blx	r3
    32ba:	4603      	mov	r3, r0
    32bc:	2b00      	cmp	r3, #0
    32be:	d007      	beq.n	32d0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	691a      	ldr	r2, [r3, #16]
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	689b      	ldr	r3, [r3, #8]
    32c8:	4619      	mov	r1, r3
    32ca:	4610      	mov	r0, r2
    32cc:	4b06      	ldr	r3, [pc, #24]	; (32e8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    32ce:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    32d0:	687b      	ldr	r3, [r7, #4]
    32d2:	689b      	ldr	r3, [r3, #8]
    32d4:	2200      	movs	r2, #0
    32d6:	60da      	str	r2, [r3, #12]
}
    32d8:	bf00      	nop
    32da:	3708      	adds	r7, #8
    32dc:	46bd      	mov	sp, r7
    32de:	bd80      	pop	{r7, pc}
    32e0:	00003355 	.word	0x00003355
    32e4:	00006a69 	.word	0x00006a69
    32e8:	00005e91 	.word	0x00005e91

000032ec <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    32ec:	b480      	push	{r7}
    32ee:	b083      	sub	sp, #12
    32f0:	af00      	add	r7, sp, #0
    32f2:	6078      	str	r0, [r7, #4]
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	2200      	movs	r2, #0
    32f8:	771a      	strb	r2, [r3, #28]
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	7f1b      	ldrb	r3, [r3, #28]
    32fe:	2b03      	cmp	r3, #3
    3300:	dc1f      	bgt.n	3342 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
    3302:	687b      	ldr	r3, [r7, #4]
    3304:	7f1b      	ldrb	r3, [r3, #28]
    3306:	4619      	mov	r1, r3
    3308:	4a11      	ldr	r2, [pc, #68]	; (3350 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    330a:	460b      	mov	r3, r1
    330c:	009b      	lsls	r3, r3, #2
    330e:	440b      	add	r3, r1
    3310:	009b      	lsls	r3, r3, #2
    3312:	4413      	add	r3, r2
    3314:	330c      	adds	r3, #12
    3316:	681b      	ldr	r3, [r3, #0]
    3318:	2b00      	cmp	r3, #0
    331a:	d10b      	bne.n	3334 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	7f1b      	ldrb	r3, [r3, #28]
    3320:	461a      	mov	r2, r3
    3322:	4613      	mov	r3, r2
    3324:	009b      	lsls	r3, r3, #2
    3326:	4413      	add	r3, r2
    3328:	009b      	lsls	r3, r3, #2
    332a:	4a09      	ldr	r2, [pc, #36]	; (3350 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    332c:	441a      	add	r2, r3
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	609a      	str	r2, [r3, #8]
			return;
    3332:	e009      	b.n	3348 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	7f1b      	ldrb	r3, [r3, #28]
    3338:	3301      	adds	r3, #1
    333a:	b2da      	uxtb	r2, r3
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	771a      	strb	r2, [r3, #28]
    3340:	e7db      	b.n	32fa <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
    3342:	687b      	ldr	r3, [r7, #4]
    3344:	4a02      	ldr	r2, [pc, #8]	; (3350 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    3346:	609a      	str	r2, [r3, #8]

}
    3348:	370c      	adds	r7, #12
    334a:	46bd      	mov	sp, r7
    334c:	bc80      	pop	{r7}
    334e:	4770      	bx	lr
    3350:	20001838 	.word	0x20001838

00003354 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    3354:	b480      	push	{r7}
    3356:	b083      	sub	sp, #12
    3358:	af00      	add	r7, sp, #0
    335a:	6078      	str	r0, [r7, #4]
    335c:	6039      	str	r1, [r7, #0]
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	2200      	movs	r2, #0
    3362:	771a      	strb	r2, [r3, #28]
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	7f1b      	ldrb	r3, [r3, #28]
    3368:	2b03      	cmp	r3, #3
    336a:	dc20      	bgt.n	33ae <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	7f1b      	ldrb	r3, [r3, #28]
    3370:	4619      	mov	r1, r3
    3372:	4a11      	ldr	r2, [pc, #68]	; (33b8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    3374:	460b      	mov	r3, r1
    3376:	009b      	lsls	r3, r3, #2
    3378:	440b      	add	r3, r1
    337a:	009b      	lsls	r3, r3, #2
    337c:	4413      	add	r3, r2
    337e:	330c      	adds	r3, #12
    3380:	681a      	ldr	r2, [r3, #0]
    3382:	683b      	ldr	r3, [r7, #0]
    3384:	429a      	cmp	r2, r3
    3386:	d10b      	bne.n	33a0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	7f1b      	ldrb	r3, [r3, #28]
    338c:	461a      	mov	r2, r3
    338e:	4613      	mov	r3, r2
    3390:	009b      	lsls	r3, r3, #2
    3392:	4413      	add	r3, r2
    3394:	009b      	lsls	r3, r3, #2
    3396:	4a08      	ldr	r2, [pc, #32]	; (33b8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    3398:	441a      	add	r2, r3
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	609a      	str	r2, [r3, #8]
			return;
    339e:	e006      	b.n	33ae <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < SERIAL_TASK_NUMBER; i++)
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	7f1b      	ldrb	r3, [r3, #28]
    33a4:	3301      	adds	r3, #1
    33a6:	b2da      	uxtb	r2, r3
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	771a      	strb	r2, [r3, #28]
    33ac:	e7da      	b.n	3364 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
    33ae:	370c      	adds	r7, #12
    33b0:	46bd      	mov	sp, r7
    33b2:	bc80      	pop	{r7}
    33b4:	4770      	bx	lr
    33b6:	bf00      	nop
    33b8:	20001838 	.word	0x20001838

000033bc <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    33bc:	b580      	push	{r7, lr}
    33be:	b082      	sub	sp, #8
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
    33c4:	6039      	str	r1, [r7, #0]
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	2b01      	cmp	r3, #1
    33ca:	d116      	bne.n	33fa <_Z41__static_initialization_and_destruction_0ii+0x3e>
    33cc:	683b      	ldr	r3, [r7, #0]
    33ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    33d2:	4293      	cmp	r3, r2
    33d4:	d111      	bne.n	33fa <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    33d6:	490b      	ldr	r1, [pc, #44]	; (3404 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    33d8:	480b      	ldr	r0, [pc, #44]	; (3408 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    33da:	4b0c      	ldr	r3, [pc, #48]	; (340c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    33dc:	4798      	blx	r3
    33de:	4a0c      	ldr	r2, [pc, #48]	; (3410 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    33e0:	490c      	ldr	r1, [pc, #48]	; (3414 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    33e2:	4809      	ldr	r0, [pc, #36]	; (3408 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    33e4:	4b0c      	ldr	r3, [pc, #48]	; (3418 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    33e6:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    33e8:	490c      	ldr	r1, [pc, #48]	; (341c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    33ea:	480d      	ldr	r0, [pc, #52]	; (3420 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    33ec:	4b07      	ldr	r3, [pc, #28]	; (340c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    33ee:	4798      	blx	r3
    33f0:	4a07      	ldr	r2, [pc, #28]	; (3410 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    33f2:	4908      	ldr	r1, [pc, #32]	; (3414 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    33f4:	480a      	ldr	r0, [pc, #40]	; (3420 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    33f6:	4b08      	ldr	r3, [pc, #32]	; (3418 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    33f8:	4798      	blx	r3
    33fa:	bf00      	nop
    33fc:	3708      	adds	r7, #8
    33fe:	46bd      	mov	sp, r7
    3400:	bd80      	pop	{r7, pc}
    3402:	bf00      	nop
    3404:	2000201c 	.word	0x2000201c
    3408:	20001888 	.word	0x20001888
    340c:	000030f1 	.word	0x000030f1
    3410:	20000000 	.word	0x20000000
    3414:	0000312d 	.word	0x0000312d
    3418:	000105fd 	.word	0x000105fd
    341c:	20001f64 	.word	0x20001f64
    3420:	200018a8 	.word	0x200018a8

00003424 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    3424:	b580      	push	{r7, lr}
    3426:	af00      	add	r7, sp, #0
    3428:	f64f 71ff 	movw	r1, #65535	; 0xffff
    342c:	2001      	movs	r0, #1
    342e:	4b01      	ldr	r3, [pc, #4]	; (3434 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    3430:	4798      	blx	r3
    3432:	bd80      	pop	{r7, pc}
    3434:	000033bd 	.word	0x000033bd

00003438 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    3438:	b580      	push	{r7, lr}
    343a:	af00      	add	r7, sp, #0
	system_init();
    343c:	4b03      	ldr	r3, [pc, #12]	; (344c <atmel_start_init+0x14>)
    343e:	4798      	blx	r3
	usb_init();
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <atmel_start_init+0x18>)
    3442:	4798      	blx	r3
	spi_nor_flash_init();
    3444:	4b03      	ldr	r3, [pc, #12]	; (3454 <atmel_start_init+0x1c>)
    3446:	4798      	blx	r3
}
    3448:	bf00      	nop
    344a:	bd80      	pop	{r7, pc}
    344c:	000047bd 	.word	0x000047bd
    3450:	000105ed 	.word	0x000105ed
    3454:	0000efad 	.word	0x0000efad

00003458 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    3458:	b480      	push	{r7}
    345a:	b085      	sub	sp, #20
    345c:	af00      	add	r7, sp, #0
    345e:	60f8      	str	r0, [r7, #12]
    3460:	460b      	mov	r3, r1
    3462:	607a      	str	r2, [r7, #4]
    3464:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    3466:	7afa      	ldrb	r2, [r7, #11]
    3468:	68fb      	ldr	r3, [r7, #12]
    346a:	3220      	adds	r2, #32
    346c:	6879      	ldr	r1, [r7, #4]
    346e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    3472:	bf00      	nop
    3474:	3714      	adds	r7, #20
    3476:	46bd      	mov	sp, r7
    3478:	f85d 7b04 	ldr.w	r7, [sp], #4
    347c:	4770      	bx	lr

0000347e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    347e:	b480      	push	{r7}
    3480:	b083      	sub	sp, #12
    3482:	af00      	add	r7, sp, #0
    3484:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	691b      	ldr	r3, [r3, #16]
    348a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3492:	bf00      	nop
    3494:	370c      	adds	r7, #12
    3496:	46bd      	mov	sp, r7
    3498:	f85d 7b04 	ldr.w	r7, [sp], #4
    349c:	4770      	bx	lr

0000349e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    349e:	b480      	push	{r7}
    34a0:	b083      	sub	sp, #12
    34a2:	af00      	add	r7, sp, #0
    34a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	691b      	ldr	r3, [r3, #16]
    34aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    34ae:	687b      	ldr	r3, [r7, #4]
    34b0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    34b2:	bf00      	nop
    34b4:	370c      	adds	r7, #12
    34b6:	46bd      	mov	sp, r7
    34b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    34bc:	4770      	bx	lr

000034be <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    34be:	b480      	push	{r7}
    34c0:	b083      	sub	sp, #12
    34c2:	af00      	add	r7, sp, #0
    34c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	691b      	ldr	r3, [r3, #16]
    34ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    34d2:	bf00      	nop
    34d4:	370c      	adds	r7, #12
    34d6:	46bd      	mov	sp, r7
    34d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    34dc:	4770      	bx	lr

000034de <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    34de:	b480      	push	{r7}
    34e0:	b083      	sub	sp, #12
    34e2:	af00      	add	r7, sp, #0
    34e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	691b      	ldr	r3, [r3, #16]
    34ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    34f2:	bf00      	nop
    34f4:	370c      	adds	r7, #12
    34f6:	46bd      	mov	sp, r7
    34f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    34fc:	4770      	bx	lr

000034fe <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    34fe:	b480      	push	{r7}
    3500:	b083      	sub	sp, #12
    3502:	af00      	add	r7, sp, #0
    3504:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    3506:	687b      	ldr	r3, [r7, #4]
    3508:	695b      	ldr	r3, [r3, #20]
    350a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3512:	bf00      	nop
    3514:	370c      	adds	r7, #12
    3516:	46bd      	mov	sp, r7
    3518:	f85d 7b04 	ldr.w	r7, [sp], #4
    351c:	4770      	bx	lr

0000351e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    351e:	b480      	push	{r7}
    3520:	b083      	sub	sp, #12
    3522:	af00      	add	r7, sp, #0
    3524:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	695b      	ldr	r3, [r3, #20]
    352a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3532:	bf00      	nop
    3534:	370c      	adds	r7, #12
    3536:	46bd      	mov	sp, r7
    3538:	f85d 7b04 	ldr.w	r7, [sp], #4
    353c:	4770      	bx	lr

0000353e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    353e:	b480      	push	{r7}
    3540:	b083      	sub	sp, #12
    3542:	af00      	add	r7, sp, #0
    3544:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	695b      	ldr	r3, [r3, #20]
    354a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3552:	bf00      	nop
    3554:	370c      	adds	r7, #12
    3556:	46bd      	mov	sp, r7
    3558:	f85d 7b04 	ldr.w	r7, [sp], #4
    355c:	4770      	bx	lr

0000355e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    355e:	b480      	push	{r7}
    3560:	b083      	sub	sp, #12
    3562:	af00      	add	r7, sp, #0
    3564:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	695b      	ldr	r3, [r3, #20]
    356a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3572:	bf00      	nop
    3574:	370c      	adds	r7, #12
    3576:	46bd      	mov	sp, r7
    3578:	f85d 7b04 	ldr.w	r7, [sp], #4
    357c:	4770      	bx	lr

0000357e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    357e:	b480      	push	{r7}
    3580:	b083      	sub	sp, #12
    3582:	af00      	add	r7, sp, #0
    3584:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	695b      	ldr	r3, [r3, #20]
    358a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    358e:	687b      	ldr	r3, [r7, #4]
    3590:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3592:	bf00      	nop
    3594:	370c      	adds	r7, #12
    3596:	46bd      	mov	sp, r7
    3598:	f85d 7b04 	ldr.w	r7, [sp], #4
    359c:	4770      	bx	lr

0000359e <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    359e:	b480      	push	{r7}
    35a0:	b083      	sub	sp, #12
    35a2:	af00      	add	r7, sp, #0
    35a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    35a6:	687b      	ldr	r3, [r7, #4]
    35a8:	695b      	ldr	r3, [r3, #20]
    35aa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    35b2:	bf00      	nop
    35b4:	370c      	adds	r7, #12
    35b6:	46bd      	mov	sp, r7
    35b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    35bc:	4770      	bx	lr

000035be <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    35be:	b480      	push	{r7}
    35c0:	b083      	sub	sp, #12
    35c2:	af00      	add	r7, sp, #0
    35c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	699b      	ldr	r3, [r3, #24]
    35ca:	f043 0201 	orr.w	r2, r3, #1
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    35d2:	bf00      	nop
    35d4:	370c      	adds	r7, #12
    35d6:	46bd      	mov	sp, r7
    35d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    35dc:	4770      	bx	lr

000035de <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    35de:	b480      	push	{r7}
    35e0:	b083      	sub	sp, #12
    35e2:	af00      	add	r7, sp, #0
    35e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	699b      	ldr	r3, [r3, #24]
    35ea:	f043 0202 	orr.w	r2, r3, #2
    35ee:	687b      	ldr	r3, [r7, #4]
    35f0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    35f2:	bf00      	nop
    35f4:	370c      	adds	r7, #12
    35f6:	46bd      	mov	sp, r7
    35f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    35fc:	4770      	bx	lr

000035fe <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    35fe:	b480      	push	{r7}
    3600:	b083      	sub	sp, #12
    3602:	af00      	add	r7, sp, #0
    3604:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	699b      	ldr	r3, [r3, #24]
    360a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3612:	bf00      	nop
    3614:	370c      	adds	r7, #12
    3616:	46bd      	mov	sp, r7
    3618:	f85d 7b04 	ldr.w	r7, [sp], #4
    361c:	4770      	bx	lr

0000361e <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    361e:	b480      	push	{r7}
    3620:	b083      	sub	sp, #12
    3622:	af00      	add	r7, sp, #0
    3624:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	699b      	ldr	r3, [r3, #24]
    362a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3632:	bf00      	nop
    3634:	370c      	adds	r7, #12
    3636:	46bd      	mov	sp, r7
    3638:	f85d 7b04 	ldr.w	r7, [sp], #4
    363c:	4770      	bx	lr

0000363e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    363e:	b480      	push	{r7}
    3640:	b083      	sub	sp, #12
    3642:	af00      	add	r7, sp, #0
    3644:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	699b      	ldr	r3, [r3, #24]
    364a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3652:	bf00      	nop
    3654:	370c      	adds	r7, #12
    3656:	46bd      	mov	sp, r7
    3658:	f85d 7b04 	ldr.w	r7, [sp], #4
    365c:	4770      	bx	lr

0000365e <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    365e:	b480      	push	{r7}
    3660:	b083      	sub	sp, #12
    3662:	af00      	add	r7, sp, #0
    3664:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	699b      	ldr	r3, [r3, #24]
    366a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    366e:	687b      	ldr	r3, [r7, #4]
    3670:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3672:	bf00      	nop
    3674:	370c      	adds	r7, #12
    3676:	46bd      	mov	sp, r7
    3678:	f85d 7b04 	ldr.w	r7, [sp], #4
    367c:	4770      	bx	lr

0000367e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    367e:	b480      	push	{r7}
    3680:	b083      	sub	sp, #12
    3682:	af00      	add	r7, sp, #0
    3684:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    3686:	687b      	ldr	r3, [r7, #4]
    3688:	69db      	ldr	r3, [r3, #28]
    368a:	f043 0220 	orr.w	r2, r3, #32
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3692:	bf00      	nop
    3694:	370c      	adds	r7, #12
    3696:	46bd      	mov	sp, r7
    3698:	f85d 7b04 	ldr.w	r7, [sp], #4
    369c:	4770      	bx	lr

0000369e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    369e:	b480      	push	{r7}
    36a0:	b083      	sub	sp, #12
    36a2:	af00      	add	r7, sp, #0
    36a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    36a6:	687b      	ldr	r3, [r7, #4]
    36a8:	69db      	ldr	r3, [r3, #28]
    36aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    36b2:	bf00      	nop
    36b4:	370c      	adds	r7, #12
    36b6:	46bd      	mov	sp, r7
    36b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36bc:	4770      	bx	lr

000036be <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    36be:	b480      	push	{r7}
    36c0:	b083      	sub	sp, #12
    36c2:	af00      	add	r7, sp, #0
    36c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	69db      	ldr	r3, [r3, #28]
    36ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    36d2:	bf00      	nop
    36d4:	370c      	adds	r7, #12
    36d6:	46bd      	mov	sp, r7
    36d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36dc:	4770      	bx	lr

000036de <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    36de:	b480      	push	{r7}
    36e0:	b083      	sub	sp, #12
    36e2:	af00      	add	r7, sp, #0
    36e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	6a1b      	ldr	r3, [r3, #32]
    36ea:	f043 0201 	orr.w	r2, r3, #1
    36ee:	687b      	ldr	r3, [r7, #4]
    36f0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    36f2:	bf00      	nop
    36f4:	370c      	adds	r7, #12
    36f6:	46bd      	mov	sp, r7
    36f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36fc:	4770      	bx	lr

000036fe <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    36fe:	b480      	push	{r7}
    3700:	b083      	sub	sp, #12
    3702:	af00      	add	r7, sp, #0
    3704:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    3706:	687b      	ldr	r3, [r7, #4]
    3708:	6a1b      	ldr	r3, [r3, #32]
    370a:	f043 0202 	orr.w	r2, r3, #2
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3712:	bf00      	nop
    3714:	370c      	adds	r7, #12
    3716:	46bd      	mov	sp, r7
    3718:	f85d 7b04 	ldr.w	r7, [sp], #4
    371c:	4770      	bx	lr

0000371e <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    371e:	b480      	push	{r7}
    3720:	b083      	sub	sp, #12
    3722:	af00      	add	r7, sp, #0
    3724:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    3726:	687b      	ldr	r3, [r7, #4]
    3728:	6a1b      	ldr	r3, [r3, #32]
    372a:	f043 0204 	orr.w	r2, r3, #4
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3732:	bf00      	nop
    3734:	370c      	adds	r7, #12
    3736:	46bd      	mov	sp, r7
    3738:	f85d 7b04 	ldr.w	r7, [sp], #4
    373c:	4770      	bx	lr

0000373e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    373e:	b480      	push	{r7}
    3740:	b083      	sub	sp, #12
    3742:	af00      	add	r7, sp, #0
    3744:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    3746:	687b      	ldr	r3, [r7, #4]
    3748:	6a1b      	ldr	r3, [r3, #32]
    374a:	f043 0208 	orr.w	r2, r3, #8
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3752:	bf00      	nop
    3754:	370c      	adds	r7, #12
    3756:	46bd      	mov	sp, r7
    3758:	f85d 7b04 	ldr.w	r7, [sp], #4
    375c:	4770      	bx	lr

0000375e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    375e:	b480      	push	{r7}
    3760:	b083      	sub	sp, #12
    3762:	af00      	add	r7, sp, #0
    3764:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	6a1b      	ldr	r3, [r3, #32]
    376a:	f043 0220 	orr.w	r2, r3, #32
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    3772:	bf00      	nop
    3774:	370c      	adds	r7, #12
    3776:	46bd      	mov	sp, r7
    3778:	f85d 7b04 	ldr.w	r7, [sp], #4
    377c:	4770      	bx	lr

0000377e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    377e:	b480      	push	{r7}
    3780:	b085      	sub	sp, #20
    3782:	af00      	add	r7, sp, #0
    3784:	60f8      	str	r0, [r7, #12]
    3786:	460b      	mov	r3, r1
    3788:	607a      	str	r2, [r7, #4]
    378a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    378c:	7afb      	ldrb	r3, [r7, #11]
    378e:	68fa      	ldr	r2, [r7, #12]
    3790:	01db      	lsls	r3, r3, #7
    3792:	4413      	add	r3, r2
    3794:	3308      	adds	r3, #8
    3796:	687a      	ldr	r2, [r7, #4]
    3798:	601a      	str	r2, [r3, #0]
}
    379a:	bf00      	nop
    379c:	3714      	adds	r7, #20
    379e:	46bd      	mov	sp, r7
    37a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37a4:	4770      	bx	lr

000037a6 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    37a6:	b480      	push	{r7}
    37a8:	b085      	sub	sp, #20
    37aa:	af00      	add	r7, sp, #0
    37ac:	60f8      	str	r0, [r7, #12]
    37ae:	460b      	mov	r3, r1
    37b0:	607a      	str	r2, [r7, #4]
    37b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37b4:	7afb      	ldrb	r3, [r7, #11]
    37b6:	68fa      	ldr	r2, [r7, #12]
    37b8:	01db      	lsls	r3, r3, #7
    37ba:	4413      	add	r3, r2
    37bc:	3304      	adds	r3, #4
    37be:	687a      	ldr	r2, [r7, #4]
    37c0:	601a      	str	r2, [r3, #0]
}
    37c2:	bf00      	nop
    37c4:	3714      	adds	r7, #20
    37c6:	46bd      	mov	sp, r7
    37c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    37cc:	4770      	bx	lr

000037ce <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    37ce:	b480      	push	{r7}
    37d0:	b085      	sub	sp, #20
    37d2:	af00      	add	r7, sp, #0
    37d4:	60f8      	str	r0, [r7, #12]
    37d6:	460b      	mov	r3, r1
    37d8:	607a      	str	r2, [r7, #4]
    37da:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37dc:	7afb      	ldrb	r3, [r7, #11]
    37de:	68fa      	ldr	r2, [r7, #12]
    37e0:	01db      	lsls	r3, r3, #7
    37e2:	4413      	add	r3, r2
    37e4:	3318      	adds	r3, #24
    37e6:	687a      	ldr	r2, [r7, #4]
    37e8:	601a      	str	r2, [r3, #0]
}
    37ea:	bf00      	nop
    37ec:	3714      	adds	r7, #20
    37ee:	46bd      	mov	sp, r7
    37f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f4:	4770      	bx	lr

000037f6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    37f6:	b480      	push	{r7}
    37f8:	b085      	sub	sp, #20
    37fa:	af00      	add	r7, sp, #0
    37fc:	60f8      	str	r0, [r7, #12]
    37fe:	460b      	mov	r3, r1
    3800:	607a      	str	r2, [r7, #4]
    3802:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3804:	7afb      	ldrb	r3, [r7, #11]
    3806:	68fa      	ldr	r2, [r7, #12]
    3808:	01db      	lsls	r3, r3, #7
    380a:	4413      	add	r3, r2
    380c:	3314      	adds	r3, #20
    380e:	687a      	ldr	r2, [r7, #4]
    3810:	601a      	str	r2, [r3, #0]
}
    3812:	bf00      	nop
    3814:	3714      	adds	r7, #20
    3816:	46bd      	mov	sp, r7
    3818:	f85d 7b04 	ldr.w	r7, [sp], #4
    381c:	4770      	bx	lr

0000381e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    381e:	b480      	push	{r7}
    3820:	b085      	sub	sp, #20
    3822:	af00      	add	r7, sp, #0
    3824:	6078      	str	r0, [r7, #4]
    3826:	4608      	mov	r0, r1
    3828:	4611      	mov	r1, r2
    382a:	461a      	mov	r2, r3
    382c:	4603      	mov	r3, r0
    382e:	70fb      	strb	r3, [r7, #3]
    3830:	460b      	mov	r3, r1
    3832:	70bb      	strb	r3, [r7, #2]
    3834:	4613      	mov	r3, r2
    3836:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3838:	78fa      	ldrb	r2, [r7, #3]
    383a:	78bb      	ldrb	r3, [r7, #2]
    383c:	6879      	ldr	r1, [r7, #4]
    383e:	01d2      	lsls	r2, r2, #7
    3840:	440a      	add	r2, r1
    3842:	4413      	add	r3, r2
    3844:	3330      	adds	r3, #48	; 0x30
    3846:	781b      	ldrb	r3, [r3, #0]
    3848:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    384a:	7bfb      	ldrb	r3, [r7, #15]
    384c:	f023 030f 	bic.w	r3, r3, #15
    3850:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    3852:	787b      	ldrb	r3, [r7, #1]
    3854:	f003 030f 	and.w	r3, r3, #15
    3858:	b2da      	uxtb	r2, r3
    385a:	7bfb      	ldrb	r3, [r7, #15]
    385c:	4313      	orrs	r3, r2
    385e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3860:	78fa      	ldrb	r2, [r7, #3]
    3862:	78bb      	ldrb	r3, [r7, #2]
    3864:	6879      	ldr	r1, [r7, #4]
    3866:	01d2      	lsls	r2, r2, #7
    3868:	440a      	add	r2, r1
    386a:	4413      	add	r3, r2
    386c:	3330      	adds	r3, #48	; 0x30
    386e:	7bfa      	ldrb	r2, [r7, #15]
    3870:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3872:	bf00      	nop
    3874:	3714      	adds	r7, #20
    3876:	46bd      	mov	sp, r7
    3878:	f85d 7b04 	ldr.w	r7, [sp], #4
    387c:	4770      	bx	lr

0000387e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    387e:	b480      	push	{r7}
    3880:	b085      	sub	sp, #20
    3882:	af00      	add	r7, sp, #0
    3884:	6078      	str	r0, [r7, #4]
    3886:	4608      	mov	r0, r1
    3888:	4611      	mov	r1, r2
    388a:	461a      	mov	r2, r3
    388c:	4603      	mov	r3, r0
    388e:	70fb      	strb	r3, [r7, #3]
    3890:	460b      	mov	r3, r1
    3892:	70bb      	strb	r3, [r7, #2]
    3894:	4613      	mov	r3, r2
    3896:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3898:	78fa      	ldrb	r2, [r7, #3]
    389a:	78bb      	ldrb	r3, [r7, #2]
    389c:	6879      	ldr	r1, [r7, #4]
    389e:	01d2      	lsls	r2, r2, #7
    38a0:	440a      	add	r2, r1
    38a2:	4413      	add	r3, r2
    38a4:	3330      	adds	r3, #48	; 0x30
    38a6:	781b      	ldrb	r3, [r3, #0]
    38a8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    38aa:	7bfb      	ldrb	r3, [r7, #15]
    38ac:	f003 030f 	and.w	r3, r3, #15
    38b0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    38b2:	787b      	ldrb	r3, [r7, #1]
    38b4:	011b      	lsls	r3, r3, #4
    38b6:	b2da      	uxtb	r2, r3
    38b8:	7bfb      	ldrb	r3, [r7, #15]
    38ba:	4313      	orrs	r3, r2
    38bc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    38be:	78fa      	ldrb	r2, [r7, #3]
    38c0:	78bb      	ldrb	r3, [r7, #2]
    38c2:	6879      	ldr	r1, [r7, #4]
    38c4:	01d2      	lsls	r2, r2, #7
    38c6:	440a      	add	r2, r1
    38c8:	4413      	add	r3, r2
    38ca:	3330      	adds	r3, #48	; 0x30
    38cc:	7bfa      	ldrb	r2, [r7, #15]
    38ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    38d0:	bf00      	nop
    38d2:	3714      	adds	r7, #20
    38d4:	46bd      	mov	sp, r7
    38d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    38da:	4770      	bx	lr

000038dc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    38dc:	b480      	push	{r7}
    38de:	b085      	sub	sp, #20
    38e0:	af00      	add	r7, sp, #0
    38e2:	6078      	str	r0, [r7, #4]
    38e4:	4608      	mov	r0, r1
    38e6:	4611      	mov	r1, r2
    38e8:	461a      	mov	r2, r3
    38ea:	4603      	mov	r3, r0
    38ec:	70fb      	strb	r3, [r7, #3]
    38ee:	460b      	mov	r3, r1
    38f0:	70bb      	strb	r3, [r7, #2]
    38f2:	4613      	mov	r3, r2
    38f4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    38f6:	78fa      	ldrb	r2, [r7, #3]
    38f8:	78bb      	ldrb	r3, [r7, #2]
    38fa:	6879      	ldr	r1, [r7, #4]
    38fc:	01d2      	lsls	r2, r2, #7
    38fe:	440a      	add	r2, r1
    3900:	4413      	add	r3, r2
    3902:	3340      	adds	r3, #64	; 0x40
    3904:	781b      	ldrb	r3, [r3, #0]
    3906:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3908:	7bfb      	ldrb	r3, [r7, #15]
    390a:	f023 0301 	bic.w	r3, r3, #1
    390e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3910:	787a      	ldrb	r2, [r7, #1]
    3912:	7bfb      	ldrb	r3, [r7, #15]
    3914:	4313      	orrs	r3, r2
    3916:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3918:	78fa      	ldrb	r2, [r7, #3]
    391a:	78bb      	ldrb	r3, [r7, #2]
    391c:	6879      	ldr	r1, [r7, #4]
    391e:	01d2      	lsls	r2, r2, #7
    3920:	440a      	add	r2, r1
    3922:	4413      	add	r3, r2
    3924:	3340      	adds	r3, #64	; 0x40
    3926:	7bfa      	ldrb	r2, [r7, #15]
    3928:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    392a:	bf00      	nop
    392c:	3714      	adds	r7, #20
    392e:	46bd      	mov	sp, r7
    3930:	f85d 7b04 	ldr.w	r7, [sp], #4
    3934:	4770      	bx	lr

00003936 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    3936:	b490      	push	{r4, r7}
    3938:	b082      	sub	sp, #8
    393a:	af00      	add	r7, sp, #0
    393c:	6078      	str	r0, [r7, #4]
    393e:	460b      	mov	r3, r1
    3940:	70fb      	strb	r3, [r7, #3]
    3942:	4613      	mov	r3, r2
    3944:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3946:	78fa      	ldrb	r2, [r7, #3]
    3948:	78bb      	ldrb	r3, [r7, #2]
    394a:	78f8      	ldrb	r0, [r7, #3]
    394c:	78b9      	ldrb	r1, [r7, #2]
    394e:	687c      	ldr	r4, [r7, #4]
    3950:	01c0      	lsls	r0, r0, #7
    3952:	4420      	add	r0, r4
    3954:	4401      	add	r1, r0
    3956:	3140      	adds	r1, #64	; 0x40
    3958:	7809      	ldrb	r1, [r1, #0]
    395a:	b2c9      	uxtb	r1, r1
    395c:	f041 0104 	orr.w	r1, r1, #4
    3960:	b2c8      	uxtb	r0, r1
    3962:	6879      	ldr	r1, [r7, #4]
    3964:	01d2      	lsls	r2, r2, #7
    3966:	440a      	add	r2, r1
    3968:	4413      	add	r3, r2
    396a:	3340      	adds	r3, #64	; 0x40
    396c:	4602      	mov	r2, r0
    396e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3970:	bf00      	nop
    3972:	3708      	adds	r7, #8
    3974:	46bd      	mov	sp, r7
    3976:	bc90      	pop	{r4, r7}
    3978:	4770      	bx	lr

0000397a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    397a:	b490      	push	{r4, r7}
    397c:	b082      	sub	sp, #8
    397e:	af00      	add	r7, sp, #0
    3980:	6078      	str	r0, [r7, #4]
    3982:	460b      	mov	r3, r1
    3984:	70fb      	strb	r3, [r7, #3]
    3986:	4613      	mov	r3, r2
    3988:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    398a:	78fa      	ldrb	r2, [r7, #3]
    398c:	78bb      	ldrb	r3, [r7, #2]
    398e:	78f8      	ldrb	r0, [r7, #3]
    3990:	78b9      	ldrb	r1, [r7, #2]
    3992:	687c      	ldr	r4, [r7, #4]
    3994:	01c0      	lsls	r0, r0, #7
    3996:	4420      	add	r0, r4
    3998:	4401      	add	r1, r0
    399a:	3140      	adds	r1, #64	; 0x40
    399c:	7809      	ldrb	r1, [r1, #0]
    399e:	b2c9      	uxtb	r1, r1
    39a0:	f021 0104 	bic.w	r1, r1, #4
    39a4:	b2c8      	uxtb	r0, r1
    39a6:	6879      	ldr	r1, [r7, #4]
    39a8:	01d2      	lsls	r2, r2, #7
    39aa:	440a      	add	r2, r1
    39ac:	4413      	add	r3, r2
    39ae:	3340      	adds	r3, #64	; 0x40
    39b0:	4602      	mov	r2, r0
    39b2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    39b4:	bf00      	nop
    39b6:	3708      	adds	r7, #8
    39b8:	46bd      	mov	sp, r7
    39ba:	bc90      	pop	{r4, r7}
    39bc:	4770      	bx	lr

000039be <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    39be:	b480      	push	{r7}
    39c0:	b085      	sub	sp, #20
    39c2:	af00      	add	r7, sp, #0
    39c4:	60f8      	str	r0, [r7, #12]
    39c6:	460b      	mov	r3, r1
    39c8:	607a      	str	r2, [r7, #4]
    39ca:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    39cc:	7afb      	ldrb	r3, [r7, #11]
    39ce:	68fa      	ldr	r2, [r7, #12]
    39d0:	01db      	lsls	r3, r3, #7
    39d2:	4413      	add	r3, r2
    39d4:	3328      	adds	r3, #40	; 0x28
    39d6:	687a      	ldr	r2, [r7, #4]
    39d8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    39da:	bf00      	nop
    39dc:	3714      	adds	r7, #20
    39de:	46bd      	mov	sp, r7
    39e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39e4:	4770      	bx	lr
	...

000039e8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    39e8:	b580      	push	{r7, lr}
    39ea:	b082      	sub	sp, #8
    39ec:	af00      	add	r7, sp, #0
    39ee:	4603      	mov	r3, r0
    39f0:	6039      	str	r1, [r7, #0]
    39f2:	71fb      	strb	r3, [r7, #7]
    39f4:	4613      	mov	r3, r2
    39f6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    39f8:	79bb      	ldrb	r3, [r7, #6]
    39fa:	2b01      	cmp	r3, #1
    39fc:	d01c      	beq.n	3a38 <_gpio_set_direction+0x50>
    39fe:	2b02      	cmp	r3, #2
    3a00:	d037      	beq.n	3a72 <_gpio_set_direction+0x8a>
    3a02:	2b00      	cmp	r3, #0
    3a04:	d14e      	bne.n	3aa4 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3a06:	79fb      	ldrb	r3, [r7, #7]
    3a08:	683a      	ldr	r2, [r7, #0]
    3a0a:	4619      	mov	r1, r3
    3a0c:	482a      	ldr	r0, [pc, #168]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a0e:	4b2b      	ldr	r3, [pc, #172]	; (3abc <_gpio_set_direction+0xd4>)
    3a10:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    3a12:	683b      	ldr	r3, [r7, #0]
    3a14:	b29b      	uxth	r3, r3
    3a16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3a1a:	79fb      	ldrb	r3, [r7, #7]
    3a1c:	4619      	mov	r1, r3
    3a1e:	4826      	ldr	r0, [pc, #152]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a20:	4b27      	ldr	r3, [pc, #156]	; (3ac0 <_gpio_set_direction+0xd8>)
    3a22:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3a24:	683b      	ldr	r3, [r7, #0]
    3a26:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3a28:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3a2c:	79fb      	ldrb	r3, [r7, #7]
    3a2e:	4619      	mov	r1, r3
    3a30:	4821      	ldr	r0, [pc, #132]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a32:	4b23      	ldr	r3, [pc, #140]	; (3ac0 <_gpio_set_direction+0xd8>)
    3a34:	4798      	blx	r3
		break;
    3a36:	e03a      	b.n	3aae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3a38:	79fb      	ldrb	r3, [r7, #7]
    3a3a:	683a      	ldr	r2, [r7, #0]
    3a3c:	4619      	mov	r1, r3
    3a3e:	481e      	ldr	r0, [pc, #120]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a40:	4b1e      	ldr	r3, [pc, #120]	; (3abc <_gpio_set_direction+0xd4>)
    3a42:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    3a44:	683b      	ldr	r3, [r7, #0]
    3a46:	b29b      	uxth	r3, r3
    3a48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    3a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3a50:	79f9      	ldrb	r1, [r7, #7]
    3a52:	461a      	mov	r2, r3
    3a54:	4818      	ldr	r0, [pc, #96]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a56:	4b1a      	ldr	r3, [pc, #104]	; (3ac0 <_gpio_set_direction+0xd8>)
    3a58:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    3a5a:	683b      	ldr	r3, [r7, #0]
    3a5c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    3a5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    3a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3a66:	79f9      	ldrb	r1, [r7, #7]
    3a68:	461a      	mov	r2, r3
    3a6a:	4813      	ldr	r0, [pc, #76]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a6c:	4b14      	ldr	r3, [pc, #80]	; (3ac0 <_gpio_set_direction+0xd8>)
    3a6e:	4798      	blx	r3
		break;
    3a70:	e01d      	b.n	3aae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    3a72:	79fb      	ldrb	r3, [r7, #7]
    3a74:	683a      	ldr	r2, [r7, #0]
    3a76:	4619      	mov	r1, r3
    3a78:	480f      	ldr	r0, [pc, #60]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a7a:	4b12      	ldr	r3, [pc, #72]	; (3ac4 <_gpio_set_direction+0xdc>)
    3a7c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    3a7e:	683b      	ldr	r3, [r7, #0]
    3a80:	b29b      	uxth	r3, r3
    3a82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3a86:	79fb      	ldrb	r3, [r7, #7]
    3a88:	4619      	mov	r1, r3
    3a8a:	480b      	ldr	r0, [pc, #44]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a8c:	4b0c      	ldr	r3, [pc, #48]	; (3ac0 <_gpio_set_direction+0xd8>)
    3a8e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3a90:	683b      	ldr	r3, [r7, #0]
    3a92:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3a94:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3a98:	79fb      	ldrb	r3, [r7, #7]
    3a9a:	4619      	mov	r1, r3
    3a9c:	4806      	ldr	r0, [pc, #24]	; (3ab8 <_gpio_set_direction+0xd0>)
    3a9e:	4b08      	ldr	r3, [pc, #32]	; (3ac0 <_gpio_set_direction+0xd8>)
    3aa0:	4798      	blx	r3
		break;
    3aa2:	e004      	b.n	3aae <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    3aa4:	2246      	movs	r2, #70	; 0x46
    3aa6:	4908      	ldr	r1, [pc, #32]	; (3ac8 <_gpio_set_direction+0xe0>)
    3aa8:	2000      	movs	r0, #0
    3aaa:	4b08      	ldr	r3, [pc, #32]	; (3acc <_gpio_set_direction+0xe4>)
    3aac:	4798      	blx	r3
	}
}
    3aae:	bf00      	nop
    3ab0:	3708      	adds	r7, #8
    3ab2:	46bd      	mov	sp, r7
    3ab4:	bd80      	pop	{r7, pc}
    3ab6:	bf00      	nop
    3ab8:	41008000 	.word	0x41008000
    3abc:	000037a7 	.word	0x000037a7
    3ac0:	000039bf 	.word	0x000039bf
    3ac4:	0000377f 	.word	0x0000377f
    3ac8:	00013a04 	.word	0x00013a04
    3acc:	00006a41 	.word	0x00006a41

00003ad0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    3ad0:	b580      	push	{r7, lr}
    3ad2:	b082      	sub	sp, #8
    3ad4:	af00      	add	r7, sp, #0
    3ad6:	4603      	mov	r3, r0
    3ad8:	6039      	str	r1, [r7, #0]
    3ada:	71fb      	strb	r3, [r7, #7]
    3adc:	4613      	mov	r3, r2
    3ade:	71bb      	strb	r3, [r7, #6]
	if (level) {
    3ae0:	79bb      	ldrb	r3, [r7, #6]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d006      	beq.n	3af4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    3ae6:	79fb      	ldrb	r3, [r7, #7]
    3ae8:	683a      	ldr	r2, [r7, #0]
    3aea:	4619      	mov	r1, r3
    3aec:	4806      	ldr	r0, [pc, #24]	; (3b08 <_gpio_set_level+0x38>)
    3aee:	4b07      	ldr	r3, [pc, #28]	; (3b0c <_gpio_set_level+0x3c>)
    3af0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    3af2:	e005      	b.n	3b00 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    3af4:	79fb      	ldrb	r3, [r7, #7]
    3af6:	683a      	ldr	r2, [r7, #0]
    3af8:	4619      	mov	r1, r3
    3afa:	4803      	ldr	r0, [pc, #12]	; (3b08 <_gpio_set_level+0x38>)
    3afc:	4b04      	ldr	r3, [pc, #16]	; (3b10 <_gpio_set_level+0x40>)
    3afe:	4798      	blx	r3
}
    3b00:	bf00      	nop
    3b02:	3708      	adds	r7, #8
    3b04:	46bd      	mov	sp, r7
    3b06:	bd80      	pop	{r7, pc}
    3b08:	41008000 	.word	0x41008000
    3b0c:	000037cf 	.word	0x000037cf
    3b10:	000037f7 	.word	0x000037f7

00003b14 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    3b14:	b580      	push	{r7, lr}
    3b16:	b082      	sub	sp, #8
    3b18:	af00      	add	r7, sp, #0
    3b1a:	4603      	mov	r3, r0
    3b1c:	71fb      	strb	r3, [r7, #7]
    3b1e:	460b      	mov	r3, r1
    3b20:	71bb      	strb	r3, [r7, #6]
    3b22:	4613      	mov	r3, r2
    3b24:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    3b26:	797b      	ldrb	r3, [r7, #5]
    3b28:	2b01      	cmp	r3, #1
    3b2a:	d00a      	beq.n	3b42 <_gpio_set_pin_pull_mode+0x2e>
    3b2c:	2b02      	cmp	r3, #2
    3b2e:	d01f      	beq.n	3b70 <_gpio_set_pin_pull_mode+0x5c>
    3b30:	2b00      	cmp	r3, #0
    3b32:	d134      	bne.n	3b9e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    3b34:	79ba      	ldrb	r2, [r7, #6]
    3b36:	79fb      	ldrb	r3, [r7, #7]
    3b38:	4619      	mov	r1, r3
    3b3a:	481e      	ldr	r0, [pc, #120]	; (3bb4 <_gpio_set_pin_pull_mode+0xa0>)
    3b3c:	4b1e      	ldr	r3, [pc, #120]	; (3bb8 <_gpio_set_pin_pull_mode+0xa4>)
    3b3e:	4798      	blx	r3
		break;
    3b40:	e033      	b.n	3baa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    3b42:	79bb      	ldrb	r3, [r7, #6]
    3b44:	2201      	movs	r2, #1
    3b46:	409a      	lsls	r2, r3
    3b48:	79fb      	ldrb	r3, [r7, #7]
    3b4a:	4619      	mov	r1, r3
    3b4c:	4819      	ldr	r0, [pc, #100]	; (3bb4 <_gpio_set_pin_pull_mode+0xa0>)
    3b4e:	4b1b      	ldr	r3, [pc, #108]	; (3bbc <_gpio_set_pin_pull_mode+0xa8>)
    3b50:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3b52:	79ba      	ldrb	r2, [r7, #6]
    3b54:	79fb      	ldrb	r3, [r7, #7]
    3b56:	4619      	mov	r1, r3
    3b58:	4816      	ldr	r0, [pc, #88]	; (3bb4 <_gpio_set_pin_pull_mode+0xa0>)
    3b5a:	4b19      	ldr	r3, [pc, #100]	; (3bc0 <_gpio_set_pin_pull_mode+0xac>)
    3b5c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    3b5e:	79bb      	ldrb	r3, [r7, #6]
    3b60:	2201      	movs	r2, #1
    3b62:	409a      	lsls	r2, r3
    3b64:	79fb      	ldrb	r3, [r7, #7]
    3b66:	4619      	mov	r1, r3
    3b68:	4812      	ldr	r0, [pc, #72]	; (3bb4 <_gpio_set_pin_pull_mode+0xa0>)
    3b6a:	4b16      	ldr	r3, [pc, #88]	; (3bc4 <_gpio_set_pin_pull_mode+0xb0>)
    3b6c:	4798      	blx	r3
		break;
    3b6e:	e01c      	b.n	3baa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    3b70:	79bb      	ldrb	r3, [r7, #6]
    3b72:	2201      	movs	r2, #1
    3b74:	409a      	lsls	r2, r3
    3b76:	79fb      	ldrb	r3, [r7, #7]
    3b78:	4619      	mov	r1, r3
    3b7a:	480e      	ldr	r0, [pc, #56]	; (3bb4 <_gpio_set_pin_pull_mode+0xa0>)
    3b7c:	4b0f      	ldr	r3, [pc, #60]	; (3bbc <_gpio_set_pin_pull_mode+0xa8>)
    3b7e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3b80:	79ba      	ldrb	r2, [r7, #6]
    3b82:	79fb      	ldrb	r3, [r7, #7]
    3b84:	4619      	mov	r1, r3
    3b86:	480b      	ldr	r0, [pc, #44]	; (3bb4 <_gpio_set_pin_pull_mode+0xa0>)
    3b88:	4b0d      	ldr	r3, [pc, #52]	; (3bc0 <_gpio_set_pin_pull_mode+0xac>)
    3b8a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    3b8c:	79bb      	ldrb	r3, [r7, #6]
    3b8e:	2201      	movs	r2, #1
    3b90:	409a      	lsls	r2, r3
    3b92:	79fb      	ldrb	r3, [r7, #7]
    3b94:	4619      	mov	r1, r3
    3b96:	4807      	ldr	r0, [pc, #28]	; (3bb4 <_gpio_set_pin_pull_mode+0xa0>)
    3b98:	4b0b      	ldr	r3, [pc, #44]	; (3bc8 <_gpio_set_pin_pull_mode+0xb4>)
    3b9a:	4798      	blx	r3
		break;
    3b9c:	e005      	b.n	3baa <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    3b9e:	2289      	movs	r2, #137	; 0x89
    3ba0:	490a      	ldr	r1, [pc, #40]	; (3bcc <_gpio_set_pin_pull_mode+0xb8>)
    3ba2:	2000      	movs	r0, #0
    3ba4:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <_gpio_set_pin_pull_mode+0xbc>)
    3ba6:	4798      	blx	r3
		break;
    3ba8:	bf00      	nop
	}
}
    3baa:	bf00      	nop
    3bac:	3708      	adds	r7, #8
    3bae:	46bd      	mov	sp, r7
    3bb0:	bd80      	pop	{r7, pc}
    3bb2:	bf00      	nop
    3bb4:	41008000 	.word	0x41008000
    3bb8:	0000397b 	.word	0x0000397b
    3bbc:	000037a7 	.word	0x000037a7
    3bc0:	00003937 	.word	0x00003937
    3bc4:	000037cf 	.word	0x000037cf
    3bc8:	000037f7 	.word	0x000037f7
    3bcc:	00013a04 	.word	0x00013a04
    3bd0:	00006a41 	.word	0x00006a41

00003bd4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    3bd4:	b590      	push	{r4, r7, lr}
    3bd6:	b085      	sub	sp, #20
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
    3bdc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	095b      	lsrs	r3, r3, #5
    3be2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    3be4:	687b      	ldr	r3, [r7, #4]
    3be6:	b2db      	uxtb	r3, r3
    3be8:	f003 031f 	and.w	r3, r3, #31
    3bec:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    3bee:	683b      	ldr	r3, [r7, #0]
    3bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bf4:	d106      	bne.n	3c04 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    3bf6:	7bba      	ldrb	r2, [r7, #14]
    3bf8:	7bf9      	ldrb	r1, [r7, #15]
    3bfa:	2300      	movs	r3, #0
    3bfc:	4812      	ldr	r0, [pc, #72]	; (3c48 <_gpio_set_pin_function+0x74>)
    3bfe:	4c13      	ldr	r4, [pc, #76]	; (3c4c <_gpio_set_pin_function+0x78>)
    3c00:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    3c02:	e01d      	b.n	3c40 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    3c04:	7bba      	ldrb	r2, [r7, #14]
    3c06:	7bf9      	ldrb	r1, [r7, #15]
    3c08:	2301      	movs	r3, #1
    3c0a:	480f      	ldr	r0, [pc, #60]	; (3c48 <_gpio_set_pin_function+0x74>)
    3c0c:	4c0f      	ldr	r4, [pc, #60]	; (3c4c <_gpio_set_pin_function+0x78>)
    3c0e:	47a0      	blx	r4
		if (pin & 1) {
    3c10:	7bbb      	ldrb	r3, [r7, #14]
    3c12:	f003 0301 	and.w	r3, r3, #1
    3c16:	2b00      	cmp	r3, #0
    3c18:	d009      	beq.n	3c2e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    3c1a:	7bbb      	ldrb	r3, [r7, #14]
    3c1c:	085b      	lsrs	r3, r3, #1
    3c1e:	b2da      	uxtb	r2, r3
    3c20:	683b      	ldr	r3, [r7, #0]
    3c22:	b2db      	uxtb	r3, r3
    3c24:	7bf9      	ldrb	r1, [r7, #15]
    3c26:	4808      	ldr	r0, [pc, #32]	; (3c48 <_gpio_set_pin_function+0x74>)
    3c28:	4c09      	ldr	r4, [pc, #36]	; (3c50 <_gpio_set_pin_function+0x7c>)
    3c2a:	47a0      	blx	r4
}
    3c2c:	e008      	b.n	3c40 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    3c2e:	7bbb      	ldrb	r3, [r7, #14]
    3c30:	085b      	lsrs	r3, r3, #1
    3c32:	b2da      	uxtb	r2, r3
    3c34:	683b      	ldr	r3, [r7, #0]
    3c36:	b2db      	uxtb	r3, r3
    3c38:	7bf9      	ldrb	r1, [r7, #15]
    3c3a:	4803      	ldr	r0, [pc, #12]	; (3c48 <_gpio_set_pin_function+0x74>)
    3c3c:	4c05      	ldr	r4, [pc, #20]	; (3c54 <_gpio_set_pin_function+0x80>)
    3c3e:	47a0      	blx	r4
}
    3c40:	bf00      	nop
    3c42:	3714      	adds	r7, #20
    3c44:	46bd      	mov	sp, r7
    3c46:	bd90      	pop	{r4, r7, pc}
    3c48:	41008000 	.word	0x41008000
    3c4c:	000038dd 	.word	0x000038dd
    3c50:	0000387f 	.word	0x0000387f
    3c54:	0000381f 	.word	0x0000381f

00003c58 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b082      	sub	sp, #8
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	4603      	mov	r3, r0
    3c60:	460a      	mov	r2, r1
    3c62:	71fb      	strb	r3, [r7, #7]
    3c64:	4613      	mov	r3, r2
    3c66:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3c68:	79fb      	ldrb	r3, [r7, #7]
    3c6a:	095b      	lsrs	r3, r3, #5
    3c6c:	b2d8      	uxtb	r0, r3
    3c6e:	79fb      	ldrb	r3, [r7, #7]
    3c70:	f003 031f 	and.w	r3, r3, #31
    3c74:	b2db      	uxtb	r3, r3
    3c76:	79ba      	ldrb	r2, [r7, #6]
    3c78:	4619      	mov	r1, r3
    3c7a:	4b03      	ldr	r3, [pc, #12]	; (3c88 <gpio_set_pin_pull_mode+0x30>)
    3c7c:	4798      	blx	r3
}
    3c7e:	bf00      	nop
    3c80:	3708      	adds	r7, #8
    3c82:	46bd      	mov	sp, r7
    3c84:	bd80      	pop	{r7, pc}
    3c86:	bf00      	nop
    3c88:	00003b15 	.word	0x00003b15

00003c8c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b082      	sub	sp, #8
    3c90:	af00      	add	r7, sp, #0
    3c92:	6078      	str	r0, [r7, #4]
    3c94:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3c96:	6839      	ldr	r1, [r7, #0]
    3c98:	6878      	ldr	r0, [r7, #4]
    3c9a:	4b03      	ldr	r3, [pc, #12]	; (3ca8 <gpio_set_pin_function+0x1c>)
    3c9c:	4798      	blx	r3
}
    3c9e:	bf00      	nop
    3ca0:	3708      	adds	r7, #8
    3ca2:	46bd      	mov	sp, r7
    3ca4:	bd80      	pop	{r7, pc}
    3ca6:	bf00      	nop
    3ca8:	00003bd5 	.word	0x00003bd5

00003cac <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    3cac:	b580      	push	{r7, lr}
    3cae:	b082      	sub	sp, #8
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	4603      	mov	r3, r0
    3cb4:	460a      	mov	r2, r1
    3cb6:	71fb      	strb	r3, [r7, #7]
    3cb8:	4613      	mov	r3, r2
    3cba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    3cbc:	79fb      	ldrb	r3, [r7, #7]
    3cbe:	095b      	lsrs	r3, r3, #5
    3cc0:	b2d8      	uxtb	r0, r3
    3cc2:	79fb      	ldrb	r3, [r7, #7]
    3cc4:	f003 031f 	and.w	r3, r3, #31
    3cc8:	2201      	movs	r2, #1
    3cca:	fa02 f303 	lsl.w	r3, r2, r3
    3cce:	79ba      	ldrb	r2, [r7, #6]
    3cd0:	4619      	mov	r1, r3
    3cd2:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <gpio_set_pin_direction+0x34>)
    3cd4:	4798      	blx	r3
}
    3cd6:	bf00      	nop
    3cd8:	3708      	adds	r7, #8
    3cda:	46bd      	mov	sp, r7
    3cdc:	bd80      	pop	{r7, pc}
    3cde:	bf00      	nop
    3ce0:	000039e9 	.word	0x000039e9

00003ce4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b082      	sub	sp, #8
    3ce8:	af00      	add	r7, sp, #0
    3cea:	4603      	mov	r3, r0
    3cec:	460a      	mov	r2, r1
    3cee:	71fb      	strb	r3, [r7, #7]
    3cf0:	4613      	mov	r3, r2
    3cf2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3cf4:	79fb      	ldrb	r3, [r7, #7]
    3cf6:	095b      	lsrs	r3, r3, #5
    3cf8:	b2d8      	uxtb	r0, r3
    3cfa:	79fb      	ldrb	r3, [r7, #7]
    3cfc:	f003 031f 	and.w	r3, r3, #31
    3d00:	2201      	movs	r2, #1
    3d02:	fa02 f303 	lsl.w	r3, r2, r3
    3d06:	79ba      	ldrb	r2, [r7, #6]
    3d08:	4619      	mov	r1, r3
    3d0a:	4b03      	ldr	r3, [pc, #12]	; (3d18 <gpio_set_pin_level+0x34>)
    3d0c:	4798      	blx	r3
}
    3d0e:	bf00      	nop
    3d10:	3708      	adds	r7, #8
    3d12:	46bd      	mov	sp, r7
    3d14:	bd80      	pop	{r7, pc}
    3d16:	bf00      	nop
    3d18:	00003ad1 	.word	0x00003ad1

00003d1c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	af00      	add	r7, sp, #0
	_init_chip();
    3d20:	4b01      	ldr	r3, [pc, #4]	; (3d28 <init_mcu+0xc>)
    3d22:	4798      	blx	r3
}
    3d24:	bf00      	nop
    3d26:	bd80      	pop	{r7, pc}
    3d28:	0000764d 	.word	0x0000764d

00003d2c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b082      	sub	sp, #8
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    3d34:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d004      	beq.n	3d46 <wdt_init+0x1a>
    3d3c:	683b      	ldr	r3, [r7, #0]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d001      	beq.n	3d46 <wdt_init+0x1a>
    3d42:	2301      	movs	r3, #1
    3d44:	e000      	b.n	3d48 <wdt_init+0x1c>
    3d46:	2300      	movs	r3, #0
    3d48:	f003 0301 	and.w	r3, r3, #1
    3d4c:	b2db      	uxtb	r3, r3
    3d4e:	2248      	movs	r2, #72	; 0x48
    3d50:	4907      	ldr	r1, [pc, #28]	; (3d70 <wdt_init+0x44>)
    3d52:	4618      	mov	r0, r3
    3d54:	4b07      	ldr	r3, [pc, #28]	; (3d74 <wdt_init+0x48>)
    3d56:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	683a      	ldr	r2, [r7, #0]
    3d5c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	4618      	mov	r0, r3
    3d62:	4b05      	ldr	r3, [pc, #20]	; (3d78 <wdt_init+0x4c>)
    3d64:	4798      	blx	r3
    3d66:	4603      	mov	r3, r0
}
    3d68:	4618      	mov	r0, r3
    3d6a:	3708      	adds	r7, #8
    3d6c:	46bd      	mov	sp, r7
    3d6e:	bd80      	pop	{r7, pc}
    3d70:	00013a20 	.word	0x00013a20
    3d74:	00006a41 	.word	0x00006a41
    3d78:	0000e1a9 	.word	0x0000e1a9

00003d7c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    3d80:	4804      	ldr	r0, [pc, #16]	; (3d94 <CRC_CALC_init+0x18>)
    3d82:	4b05      	ldr	r3, [pc, #20]	; (3d98 <CRC_CALC_init+0x1c>)
    3d84:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    3d86:	4905      	ldr	r1, [pc, #20]	; (3d9c <CRC_CALC_init+0x20>)
    3d88:	4805      	ldr	r0, [pc, #20]	; (3da0 <CRC_CALC_init+0x24>)
    3d8a:	4b06      	ldr	r3, [pc, #24]	; (3da4 <CRC_CALC_init+0x28>)
    3d8c:	4798      	blx	r3
}
    3d8e:	bf00      	nop
    3d90:	bd80      	pop	{r7, pc}
    3d92:	bf00      	nop
    3d94:	40000800 	.word	0x40000800
    3d98:	000035df 	.word	0x000035df
    3d9c:	41002000 	.word	0x41002000
    3da0:	20002118 	.word	0x20002118
    3da4:	00004d81 	.word	0x00004d81

00003da8 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3da8:	b580      	push	{r7, lr}
    3daa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3dac:	2244      	movs	r2, #68	; 0x44
    3dae:	2104      	movs	r1, #4
    3db0:	4825      	ldr	r0, [pc, #148]	; (3e48 <EXTERNAL_IRQ_0_init+0xa0>)
    3db2:	4b26      	ldr	r3, [pc, #152]	; (3e4c <EXTERNAL_IRQ_0_init+0xa4>)
    3db4:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3db6:	4826      	ldr	r0, [pc, #152]	; (3e50 <EXTERNAL_IRQ_0_init+0xa8>)
    3db8:	4b26      	ldr	r3, [pc, #152]	; (3e54 <EXTERNAL_IRQ_0_init+0xac>)
    3dba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    3dbc:	2101      	movs	r1, #1
    3dbe:	2040      	movs	r0, #64	; 0x40
    3dc0:	4b25      	ldr	r3, [pc, #148]	; (3e58 <EXTERNAL_IRQ_0_init+0xb0>)
    3dc2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    3dc4:	2100      	movs	r1, #0
    3dc6:	2040      	movs	r0, #64	; 0x40
    3dc8:	4b24      	ldr	r3, [pc, #144]	; (3e5c <EXTERNAL_IRQ_0_init+0xb4>)
    3dca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    3dcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    3dd0:	2040      	movs	r0, #64	; 0x40
    3dd2:	4b23      	ldr	r3, [pc, #140]	; (3e60 <EXTERNAL_IRQ_0_init+0xb8>)
    3dd4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    3dd6:	2101      	movs	r1, #1
    3dd8:	2004      	movs	r0, #4
    3dda:	4b1f      	ldr	r3, [pc, #124]	; (3e58 <EXTERNAL_IRQ_0_init+0xb0>)
    3ddc:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    3dde:	2102      	movs	r1, #2
    3de0:	2004      	movs	r0, #4
    3de2:	4b1e      	ldr	r3, [pc, #120]	; (3e5c <EXTERNAL_IRQ_0_init+0xb4>)
    3de4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    3de6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    3dea:	2004      	movs	r0, #4
    3dec:	4b1c      	ldr	r3, [pc, #112]	; (3e60 <EXTERNAL_IRQ_0_init+0xb8>)
    3dee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    3df0:	2101      	movs	r1, #1
    3df2:	2005      	movs	r0, #5
    3df4:	4b18      	ldr	r3, [pc, #96]	; (3e58 <EXTERNAL_IRQ_0_init+0xb0>)
    3df6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    3df8:	2102      	movs	r1, #2
    3dfa:	2005      	movs	r0, #5
    3dfc:	4b17      	ldr	r3, [pc, #92]	; (3e5c <EXTERNAL_IRQ_0_init+0xb4>)
    3dfe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    3e00:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    3e04:	2005      	movs	r0, #5
    3e06:	4b16      	ldr	r3, [pc, #88]	; (3e60 <EXTERNAL_IRQ_0_init+0xb8>)
    3e08:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    3e0a:	2101      	movs	r1, #1
    3e0c:	2056      	movs	r0, #86	; 0x56
    3e0e:	4b12      	ldr	r3, [pc, #72]	; (3e58 <EXTERNAL_IRQ_0_init+0xb0>)
    3e10:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    3e12:	2102      	movs	r1, #2
    3e14:	2056      	movs	r0, #86	; 0x56
    3e16:	4b11      	ldr	r3, [pc, #68]	; (3e5c <EXTERNAL_IRQ_0_init+0xb4>)
    3e18:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    3e1a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    3e1e:	2056      	movs	r0, #86	; 0x56
    3e20:	4b0f      	ldr	r3, [pc, #60]	; (3e60 <EXTERNAL_IRQ_0_init+0xb8>)
    3e22:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    3e24:	2101      	movs	r1, #1
    3e26:	2057      	movs	r0, #87	; 0x57
    3e28:	4b0b      	ldr	r3, [pc, #44]	; (3e58 <EXTERNAL_IRQ_0_init+0xb0>)
    3e2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    3e2c:	2102      	movs	r1, #2
    3e2e:	2057      	movs	r0, #87	; 0x57
    3e30:	4b0a      	ldr	r3, [pc, #40]	; (3e5c <EXTERNAL_IRQ_0_init+0xb4>)
    3e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    3e34:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    3e38:	2057      	movs	r0, #87	; 0x57
    3e3a:	4b09      	ldr	r3, [pc, #36]	; (3e60 <EXTERNAL_IRQ_0_init+0xb8>)
    3e3c:	4798      	blx	r3

	ext_irq_init();
    3e3e:	4b09      	ldr	r3, [pc, #36]	; (3e64 <EXTERNAL_IRQ_0_init+0xbc>)
    3e40:	4798      	blx	r3
}
    3e42:	bf00      	nop
    3e44:	bd80      	pop	{r7, pc}
    3e46:	bf00      	nop
    3e48:	40001c00 	.word	0x40001c00
    3e4c:	00003459 	.word	0x00003459
    3e50:	40000800 	.word	0x40000800
    3e54:	0000353f 	.word	0x0000353f
    3e58:	00003cad 	.word	0x00003cad
    3e5c:	00003c59 	.word	0x00003c59
    3e60:	00003c8d 	.word	0x00003c8d
    3e64:	00004e49 	.word	0x00004e49

00003e68 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    3e68:	b580      	push	{r7, lr}
    3e6a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e6c:	2244      	movs	r2, #68	; 0x44
    3e6e:	210b      	movs	r1, #11
    3e70:	4807      	ldr	r0, [pc, #28]	; (3e90 <EVENT_SYSTEM_0_init+0x28>)
    3e72:	4b08      	ldr	r3, [pc, #32]	; (3e94 <EVENT_SYSTEM_0_init+0x2c>)
    3e74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3e76:	2244      	movs	r2, #68	; 0x44
    3e78:	210c      	movs	r1, #12
    3e7a:	4805      	ldr	r0, [pc, #20]	; (3e90 <EVENT_SYSTEM_0_init+0x28>)
    3e7c:	4b05      	ldr	r3, [pc, #20]	; (3e94 <EVENT_SYSTEM_0_init+0x2c>)
    3e7e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    3e80:	4805      	ldr	r0, [pc, #20]	; (3e98 <EVENT_SYSTEM_0_init+0x30>)
    3e82:	4b06      	ldr	r3, [pc, #24]	; (3e9c <EVENT_SYSTEM_0_init+0x34>)
    3e84:	4798      	blx	r3

	event_system_init();
    3e86:	4b06      	ldr	r3, [pc, #24]	; (3ea0 <EVENT_SYSTEM_0_init+0x38>)
    3e88:	4798      	blx	r3
}
    3e8a:	bf00      	nop
    3e8c:	bd80      	pop	{r7, pc}
    3e8e:	bf00      	nop
    3e90:	40001c00 	.word	0x40001c00
    3e94:	00003459 	.word	0x00003459
    3e98:	40000800 	.word	0x40000800
    3e9c:	000035ff 	.word	0x000035ff
    3ea0:	00004e35 	.word	0x00004e35

00003ea4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    3ea4:	b580      	push	{r7, lr}
    3ea6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    3ea8:	2101      	movs	r1, #1
    3eaa:	202b      	movs	r0, #43	; 0x2b
    3eac:	4b2b      	ldr	r3, [pc, #172]	; (3f5c <QSPI_N25Q256_PORT_init+0xb8>)
    3eae:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3eb0:	2100      	movs	r1, #0
    3eb2:	202b      	movs	r0, #43	; 0x2b
    3eb4:	4b2a      	ldr	r3, [pc, #168]	; (3f60 <QSPI_N25Q256_PORT_init+0xbc>)
    3eb6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    3eb8:	492a      	ldr	r1, [pc, #168]	; (3f64 <QSPI_N25Q256_PORT_init+0xc0>)
    3eba:	202b      	movs	r0, #43	; 0x2b
    3ebc:	4b2a      	ldr	r3, [pc, #168]	; (3f68 <QSPI_N25Q256_PORT_init+0xc4>)
    3ebe:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3ec0:	2102      	movs	r1, #2
    3ec2:	2008      	movs	r0, #8
    3ec4:	4b25      	ldr	r3, [pc, #148]	; (3f5c <QSPI_N25Q256_PORT_init+0xb8>)
    3ec6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    3ec8:	2100      	movs	r1, #0
    3eca:	2008      	movs	r0, #8
    3ecc:	4b27      	ldr	r3, [pc, #156]	; (3f6c <QSPI_N25Q256_PORT_init+0xc8>)
    3ece:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    3ed0:	2100      	movs	r1, #0
    3ed2:	2008      	movs	r0, #8
    3ed4:	4b22      	ldr	r3, [pc, #136]	; (3f60 <QSPI_N25Q256_PORT_init+0xbc>)
    3ed6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    3ed8:	4925      	ldr	r1, [pc, #148]	; (3f70 <QSPI_N25Q256_PORT_init+0xcc>)
    3eda:	2008      	movs	r0, #8
    3edc:	4b22      	ldr	r3, [pc, #136]	; (3f68 <QSPI_N25Q256_PORT_init+0xc4>)
    3ede:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    3ee0:	2102      	movs	r1, #2
    3ee2:	2009      	movs	r0, #9
    3ee4:	4b1d      	ldr	r3, [pc, #116]	; (3f5c <QSPI_N25Q256_PORT_init+0xb8>)
    3ee6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    3ee8:	2100      	movs	r1, #0
    3eea:	2009      	movs	r0, #9
    3eec:	4b1f      	ldr	r3, [pc, #124]	; (3f6c <QSPI_N25Q256_PORT_init+0xc8>)
    3eee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    3ef0:	2100      	movs	r1, #0
    3ef2:	2009      	movs	r0, #9
    3ef4:	4b1a      	ldr	r3, [pc, #104]	; (3f60 <QSPI_N25Q256_PORT_init+0xbc>)
    3ef6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    3ef8:	491e      	ldr	r1, [pc, #120]	; (3f74 <QSPI_N25Q256_PORT_init+0xd0>)
    3efa:	2009      	movs	r0, #9
    3efc:	4b1a      	ldr	r3, [pc, #104]	; (3f68 <QSPI_N25Q256_PORT_init+0xc4>)
    3efe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    3f00:	2102      	movs	r1, #2
    3f02:	200a      	movs	r0, #10
    3f04:	4b15      	ldr	r3, [pc, #84]	; (3f5c <QSPI_N25Q256_PORT_init+0xb8>)
    3f06:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    3f08:	2100      	movs	r1, #0
    3f0a:	200a      	movs	r0, #10
    3f0c:	4b17      	ldr	r3, [pc, #92]	; (3f6c <QSPI_N25Q256_PORT_init+0xc8>)
    3f0e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    3f10:	2100      	movs	r1, #0
    3f12:	200a      	movs	r0, #10
    3f14:	4b12      	ldr	r3, [pc, #72]	; (3f60 <QSPI_N25Q256_PORT_init+0xbc>)
    3f16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    3f18:	4917      	ldr	r1, [pc, #92]	; (3f78 <QSPI_N25Q256_PORT_init+0xd4>)
    3f1a:	200a      	movs	r0, #10
    3f1c:	4b12      	ldr	r3, [pc, #72]	; (3f68 <QSPI_N25Q256_PORT_init+0xc4>)
    3f1e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    3f20:	2102      	movs	r1, #2
    3f22:	200b      	movs	r0, #11
    3f24:	4b0d      	ldr	r3, [pc, #52]	; (3f5c <QSPI_N25Q256_PORT_init+0xb8>)
    3f26:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    3f28:	2100      	movs	r1, #0
    3f2a:	200b      	movs	r0, #11
    3f2c:	4b0f      	ldr	r3, [pc, #60]	; (3f6c <QSPI_N25Q256_PORT_init+0xc8>)
    3f2e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    3f30:	2100      	movs	r1, #0
    3f32:	200b      	movs	r0, #11
    3f34:	4b0a      	ldr	r3, [pc, #40]	; (3f60 <QSPI_N25Q256_PORT_init+0xbc>)
    3f36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    3f38:	4910      	ldr	r1, [pc, #64]	; (3f7c <QSPI_N25Q256_PORT_init+0xd8>)
    3f3a:	200b      	movs	r0, #11
    3f3c:	4b0a      	ldr	r3, [pc, #40]	; (3f68 <QSPI_N25Q256_PORT_init+0xc4>)
    3f3e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    3f40:	2101      	movs	r1, #1
    3f42:	202a      	movs	r0, #42	; 0x2a
    3f44:	4b05      	ldr	r3, [pc, #20]	; (3f5c <QSPI_N25Q256_PORT_init+0xb8>)
    3f46:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    3f48:	2100      	movs	r1, #0
    3f4a:	202a      	movs	r0, #42	; 0x2a
    3f4c:	4b04      	ldr	r3, [pc, #16]	; (3f60 <QSPI_N25Q256_PORT_init+0xbc>)
    3f4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    3f50:	490b      	ldr	r1, [pc, #44]	; (3f80 <QSPI_N25Q256_PORT_init+0xdc>)
    3f52:	202a      	movs	r0, #42	; 0x2a
    3f54:	4b04      	ldr	r3, [pc, #16]	; (3f68 <QSPI_N25Q256_PORT_init+0xc4>)
    3f56:	4798      	blx	r3
}
    3f58:	bf00      	nop
    3f5a:	bd80      	pop	{r7, pc}
    3f5c:	00003cad 	.word	0x00003cad
    3f60:	00003c59 	.word	0x00003c59
    3f64:	002b0007 	.word	0x002b0007
    3f68:	00003c8d 	.word	0x00003c8d
    3f6c:	00003ce5 	.word	0x00003ce5
    3f70:	00080007 	.word	0x00080007
    3f74:	00090007 	.word	0x00090007
    3f78:	000a0007 	.word	0x000a0007
    3f7c:	000b0007 	.word	0x000b0007
    3f80:	002a0007 	.word	0x002a0007

00003f84 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3f84:	b580      	push	{r7, lr}
    3f86:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    3f88:	4805      	ldr	r0, [pc, #20]	; (3fa0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3f8a:	4b06      	ldr	r3, [pc, #24]	; (3fa4 <QSPI_N25Q256_CLOCK_init+0x20>)
    3f8c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    3f8e:	4804      	ldr	r0, [pc, #16]	; (3fa0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3f90:	4b05      	ldr	r3, [pc, #20]	; (3fa8 <QSPI_N25Q256_CLOCK_init+0x24>)
    3f92:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3f94:	4802      	ldr	r0, [pc, #8]	; (3fa0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3f96:	4b05      	ldr	r3, [pc, #20]	; (3fac <QSPI_N25Q256_CLOCK_init+0x28>)
    3f98:	4798      	blx	r3
}
    3f9a:	bf00      	nop
    3f9c:	bd80      	pop	{r7, pc}
    3f9e:	bf00      	nop
    3fa0:	40000800 	.word	0x40000800
    3fa4:	0000349f 	.word	0x0000349f
    3fa8:	000034df 	.word	0x000034df
    3fac:	000036bf 	.word	0x000036bf

00003fb0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3fb0:	b580      	push	{r7, lr}
    3fb2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3fb4:	4b04      	ldr	r3, [pc, #16]	; (3fc8 <QSPI_N25Q256_init+0x18>)
    3fb6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    3fb8:	4904      	ldr	r1, [pc, #16]	; (3fcc <QSPI_N25Q256_init+0x1c>)
    3fba:	4805      	ldr	r0, [pc, #20]	; (3fd0 <QSPI_N25Q256_init+0x20>)
    3fbc:	4b05      	ldr	r3, [pc, #20]	; (3fd4 <QSPI_N25Q256_init+0x24>)
    3fbe:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3fc0:	4b05      	ldr	r3, [pc, #20]	; (3fd8 <QSPI_N25Q256_init+0x28>)
    3fc2:	4798      	blx	r3
}
    3fc4:	bf00      	nop
    3fc6:	bd80      	pop	{r7, pc}
    3fc8:	00003f85 	.word	0x00003f85
    3fcc:	42003400 	.word	0x42003400
    3fd0:	20001f80 	.word	0x20001f80
    3fd4:	000054e1 	.word	0x000054e1
    3fd8:	00003ea5 	.word	0x00003ea5

00003fdc <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    3fe0:	4802      	ldr	r0, [pc, #8]	; (3fec <DATETIME_CLOCK_CLOCK_init+0x10>)
    3fe2:	4b03      	ldr	r3, [pc, #12]	; (3ff0 <DATETIME_CLOCK_CLOCK_init+0x14>)
    3fe4:	4798      	blx	r3
}
    3fe6:	bf00      	nop
    3fe8:	bd80      	pop	{r7, pc}
    3fea:	bf00      	nop
    3fec:	40000800 	.word	0x40000800
    3ff0:	0000351f 	.word	0x0000351f

00003ff4 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    3ff8:	4b03      	ldr	r3, [pc, #12]	; (4008 <DATETIME_CLOCK_init+0x14>)
    3ffa:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    3ffc:	4903      	ldr	r1, [pc, #12]	; (400c <DATETIME_CLOCK_init+0x18>)
    3ffe:	4804      	ldr	r0, [pc, #16]	; (4010 <DATETIME_CLOCK_init+0x1c>)
    4000:	4b04      	ldr	r3, [pc, #16]	; (4014 <DATETIME_CLOCK_init+0x20>)
    4002:	4798      	blx	r3
}
    4004:	bf00      	nop
    4006:	bd80      	pop	{r7, pc}
    4008:	00003fdd 	.word	0x00003fdd
    400c:	40002400 	.word	0x40002400
    4010:	200020f4 	.word	0x200020f4
    4014:	00004bd5 	.word	0x00004bd5

00004018 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    4018:	b580      	push	{r7, lr}
    401a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    401c:	2100      	movs	r1, #0
    401e:	2010      	movs	r0, #16
    4020:	4b11      	ldr	r3, [pc, #68]	; (4068 <SPI_MEMORIES_PORT_init+0x50>)
    4022:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    4024:	2102      	movs	r1, #2
    4026:	2010      	movs	r0, #16
    4028:	4b10      	ldr	r3, [pc, #64]	; (406c <SPI_MEMORIES_PORT_init+0x54>)
    402a:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    402c:	4910      	ldr	r1, [pc, #64]	; (4070 <SPI_MEMORIES_PORT_init+0x58>)
    402e:	2010      	movs	r0, #16
    4030:	4b10      	ldr	r3, [pc, #64]	; (4074 <SPI_MEMORIES_PORT_init+0x5c>)
    4032:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    4034:	2100      	movs	r1, #0
    4036:	2011      	movs	r0, #17
    4038:	4b0b      	ldr	r3, [pc, #44]	; (4068 <SPI_MEMORIES_PORT_init+0x50>)
    403a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    403c:	2102      	movs	r1, #2
    403e:	2011      	movs	r0, #17
    4040:	4b0a      	ldr	r3, [pc, #40]	; (406c <SPI_MEMORIES_PORT_init+0x54>)
    4042:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    4044:	490c      	ldr	r1, [pc, #48]	; (4078 <SPI_MEMORIES_PORT_init+0x60>)
    4046:	2011      	movs	r0, #17
    4048:	4b0a      	ldr	r3, [pc, #40]	; (4074 <SPI_MEMORIES_PORT_init+0x5c>)
    404a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    404c:	2101      	movs	r1, #1
    404e:	2012      	movs	r0, #18
    4050:	4b06      	ldr	r3, [pc, #24]	; (406c <SPI_MEMORIES_PORT_init+0x54>)
    4052:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    4054:	2100      	movs	r1, #0
    4056:	2012      	movs	r0, #18
    4058:	4b08      	ldr	r3, [pc, #32]	; (407c <SPI_MEMORIES_PORT_init+0x64>)
    405a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    405c:	4908      	ldr	r1, [pc, #32]	; (4080 <SPI_MEMORIES_PORT_init+0x68>)
    405e:	2012      	movs	r0, #18
    4060:	4b04      	ldr	r3, [pc, #16]	; (4074 <SPI_MEMORIES_PORT_init+0x5c>)
    4062:	4798      	blx	r3
}
    4064:	bf00      	nop
    4066:	bd80      	pop	{r7, pc}
    4068:	00003ce5 	.word	0x00003ce5
    406c:	00003cad 	.word	0x00003cad
    4070:	00100002 	.word	0x00100002
    4074:	00003c8d 	.word	0x00003c8d
    4078:	00110002 	.word	0x00110002
    407c:	00003c59 	.word	0x00003c59
    4080:	00120002 	.word	0x00120002

00004084 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    4084:	b580      	push	{r7, lr}
    4086:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4088:	2245      	movs	r2, #69	; 0x45
    408a:	2108      	movs	r1, #8
    408c:	4806      	ldr	r0, [pc, #24]	; (40a8 <SPI_MEMORIES_CLOCK_init+0x24>)
    408e:	4b07      	ldr	r3, [pc, #28]	; (40ac <SPI_MEMORIES_CLOCK_init+0x28>)
    4090:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4092:	224a      	movs	r2, #74	; 0x4a
    4094:	2103      	movs	r1, #3
    4096:	4804      	ldr	r0, [pc, #16]	; (40a8 <SPI_MEMORIES_CLOCK_init+0x24>)
    4098:	4b04      	ldr	r3, [pc, #16]	; (40ac <SPI_MEMORIES_CLOCK_init+0x28>)
    409a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    409c:	4804      	ldr	r0, [pc, #16]	; (40b0 <SPI_MEMORIES_CLOCK_init+0x2c>)
    409e:	4b05      	ldr	r3, [pc, #20]	; (40b4 <SPI_MEMORIES_CLOCK_init+0x30>)
    40a0:	4798      	blx	r3
}
    40a2:	bf00      	nop
    40a4:	bd80      	pop	{r7, pc}
    40a6:	bf00      	nop
    40a8:	40001c00 	.word	0x40001c00
    40ac:	00003459 	.word	0x00003459
    40b0:	40000800 	.word	0x40000800
    40b4:	0000355f 	.word	0x0000355f

000040b8 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    40bc:	4b04      	ldr	r3, [pc, #16]	; (40d0 <SPI_MEMORIES_init+0x18>)
    40be:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    40c0:	4904      	ldr	r1, [pc, #16]	; (40d4 <SPI_MEMORIES_init+0x1c>)
    40c2:	4805      	ldr	r0, [pc, #20]	; (40d8 <SPI_MEMORIES_init+0x20>)
    40c4:	4b05      	ldr	r3, [pc, #20]	; (40dc <SPI_MEMORIES_init+0x24>)
    40c6:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    40c8:	4b05      	ldr	r3, [pc, #20]	; (40e0 <SPI_MEMORIES_init+0x28>)
    40ca:	4798      	blx	r3
}
    40cc:	bf00      	nop
    40ce:	bd80      	pop	{r7, pc}
    40d0:	00004085 	.word	0x00004085
    40d4:	40003400 	.word	0x40003400
    40d8:	20001eec 	.word	0x20001eec
    40dc:	00005ab9 	.word	0x00005ab9
    40e0:	00004019 	.word	0x00004019

000040e4 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    40e4:	b580      	push	{r7, lr}
    40e6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    40e8:	2100      	movs	r1, #0
    40ea:	200c      	movs	r0, #12
    40ec:	4b07      	ldr	r3, [pc, #28]	; (410c <I2C_SHARED_PORT_init+0x28>)
    40ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    40f0:	4907      	ldr	r1, [pc, #28]	; (4110 <I2C_SHARED_PORT_init+0x2c>)
    40f2:	200c      	movs	r0, #12
    40f4:	4b07      	ldr	r3, [pc, #28]	; (4114 <I2C_SHARED_PORT_init+0x30>)
    40f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    40f8:	2100      	movs	r1, #0
    40fa:	200d      	movs	r0, #13
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <I2C_SHARED_PORT_init+0x28>)
    40fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    4100:	4905      	ldr	r1, [pc, #20]	; (4118 <I2C_SHARED_PORT_init+0x34>)
    4102:	200d      	movs	r0, #13
    4104:	4b03      	ldr	r3, [pc, #12]	; (4114 <I2C_SHARED_PORT_init+0x30>)
    4106:	4798      	blx	r3
}
    4108:	bf00      	nop
    410a:	bd80      	pop	{r7, pc}
    410c:	00003c59 	.word	0x00003c59
    4110:	000c0002 	.word	0x000c0002
    4114:	00003c8d 	.word	0x00003c8d
    4118:	000d0002 	.word	0x000d0002

0000411c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    411c:	b580      	push	{r7, lr}
    411e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4120:	2242      	movs	r2, #66	; 0x42
    4122:	2117      	movs	r1, #23
    4124:	4806      	ldr	r0, [pc, #24]	; (4140 <I2C_SHARED_CLOCK_init+0x24>)
    4126:	4b07      	ldr	r3, [pc, #28]	; (4144 <I2C_SHARED_CLOCK_init+0x28>)
    4128:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    412a:	224a      	movs	r2, #74	; 0x4a
    412c:	2103      	movs	r1, #3
    412e:	4804      	ldr	r0, [pc, #16]	; (4140 <I2C_SHARED_CLOCK_init+0x24>)
    4130:	4b04      	ldr	r3, [pc, #16]	; (4144 <I2C_SHARED_CLOCK_init+0x28>)
    4132:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    4134:	4804      	ldr	r0, [pc, #16]	; (4148 <I2C_SHARED_CLOCK_init+0x2c>)
    4136:	4b05      	ldr	r3, [pc, #20]	; (414c <I2C_SHARED_CLOCK_init+0x30>)
    4138:	4798      	blx	r3
}
    413a:	bf00      	nop
    413c:	bd80      	pop	{r7, pc}
    413e:	bf00      	nop
    4140:	40001c00 	.word	0x40001c00
    4144:	00003459 	.word	0x00003459
    4148:	40000800 	.word	0x40000800
    414c:	0000361f 	.word	0x0000361f

00004150 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    4150:	b580      	push	{r7, lr}
    4152:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    4154:	4b04      	ldr	r3, [pc, #16]	; (4168 <I2C_SHARED_init+0x18>)
    4156:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    4158:	4904      	ldr	r1, [pc, #16]	; (416c <I2C_SHARED_init+0x1c>)
    415a:	4805      	ldr	r0, [pc, #20]	; (4170 <I2C_SHARED_init+0x20>)
    415c:	4b05      	ldr	r3, [pc, #20]	; (4174 <I2C_SHARED_init+0x24>)
    415e:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    4160:	4b05      	ldr	r3, [pc, #20]	; (4178 <I2C_SHARED_init+0x28>)
    4162:	4798      	blx	r3
}
    4164:	bf00      	nop
    4166:	bd80      	pop	{r7, pc}
    4168:	0000411d 	.word	0x0000411d
    416c:	41012000 	.word	0x41012000
    4170:	20002078 	.word	0x20002078
    4174:	000052e1 	.word	0x000052e1
    4178:	000040e5 	.word	0x000040e5

0000417c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    417c:	b580      	push	{r7, lr}
    417e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    4180:	2100      	movs	r1, #0
    4182:	203b      	movs	r0, #59	; 0x3b
    4184:	4b11      	ldr	r3, [pc, #68]	; (41cc <SPI_TEMP_PORT_init+0x50>)
    4186:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    4188:	2102      	movs	r1, #2
    418a:	203b      	movs	r0, #59	; 0x3b
    418c:	4b10      	ldr	r3, [pc, #64]	; (41d0 <SPI_TEMP_PORT_init+0x54>)
    418e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    4190:	4910      	ldr	r1, [pc, #64]	; (41d4 <SPI_TEMP_PORT_init+0x58>)
    4192:	203b      	movs	r0, #59	; 0x3b
    4194:	4b10      	ldr	r3, [pc, #64]	; (41d8 <SPI_TEMP_PORT_init+0x5c>)
    4196:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    4198:	2100      	movs	r1, #0
    419a:	203a      	movs	r0, #58	; 0x3a
    419c:	4b0b      	ldr	r3, [pc, #44]	; (41cc <SPI_TEMP_PORT_init+0x50>)
    419e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    41a0:	2102      	movs	r1, #2
    41a2:	203a      	movs	r0, #58	; 0x3a
    41a4:	4b0a      	ldr	r3, [pc, #40]	; (41d0 <SPI_TEMP_PORT_init+0x54>)
    41a6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    41a8:	490c      	ldr	r1, [pc, #48]	; (41dc <SPI_TEMP_PORT_init+0x60>)
    41aa:	203a      	movs	r0, #58	; 0x3a
    41ac:	4b0a      	ldr	r3, [pc, #40]	; (41d8 <SPI_TEMP_PORT_init+0x5c>)
    41ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    41b0:	2101      	movs	r1, #1
    41b2:	203c      	movs	r0, #60	; 0x3c
    41b4:	4b06      	ldr	r3, [pc, #24]	; (41d0 <SPI_TEMP_PORT_init+0x54>)
    41b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    41b8:	2100      	movs	r1, #0
    41ba:	203c      	movs	r0, #60	; 0x3c
    41bc:	4b08      	ldr	r3, [pc, #32]	; (41e0 <SPI_TEMP_PORT_init+0x64>)
    41be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    41c0:	4908      	ldr	r1, [pc, #32]	; (41e4 <SPI_TEMP_PORT_init+0x68>)
    41c2:	203c      	movs	r0, #60	; 0x3c
    41c4:	4b04      	ldr	r3, [pc, #16]	; (41d8 <SPI_TEMP_PORT_init+0x5c>)
    41c6:	4798      	blx	r3
}
    41c8:	bf00      	nop
    41ca:	bd80      	pop	{r7, pc}
    41cc:	00003ce5 	.word	0x00003ce5
    41d0:	00003cad 	.word	0x00003cad
    41d4:	003b0003 	.word	0x003b0003
    41d8:	00003c8d 	.word	0x00003c8d
    41dc:	003a0003 	.word	0x003a0003
    41e0:	00003c59 	.word	0x00003c59
    41e4:	003c0003 	.word	0x003c0003

000041e8 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    41e8:	b580      	push	{r7, lr}
    41ea:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    41ec:	2242      	movs	r2, #66	; 0x42
    41ee:	2122      	movs	r1, #34	; 0x22
    41f0:	4806      	ldr	r0, [pc, #24]	; (420c <SPI_TEMP_CLOCK_init+0x24>)
    41f2:	4b07      	ldr	r3, [pc, #28]	; (4210 <SPI_TEMP_CLOCK_init+0x28>)
    41f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    41f6:	224a      	movs	r2, #74	; 0x4a
    41f8:	2103      	movs	r1, #3
    41fa:	4804      	ldr	r0, [pc, #16]	; (420c <SPI_TEMP_CLOCK_init+0x24>)
    41fc:	4b04      	ldr	r3, [pc, #16]	; (4210 <SPI_TEMP_CLOCK_init+0x28>)
    41fe:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    4200:	4804      	ldr	r0, [pc, #16]	; (4214 <SPI_TEMP_CLOCK_init+0x2c>)
    4202:	4b05      	ldr	r3, [pc, #20]	; (4218 <SPI_TEMP_CLOCK_init+0x30>)
    4204:	4798      	blx	r3
}
    4206:	bf00      	nop
    4208:	bd80      	pop	{r7, pc}
    420a:	bf00      	nop
    420c:	40001c00 	.word	0x40001c00
    4210:	00003459 	.word	0x00003459
    4214:	40000800 	.word	0x40000800
    4218:	000036df 	.word	0x000036df

0000421c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    421c:	b580      	push	{r7, lr}
    421e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    4220:	4b05      	ldr	r3, [pc, #20]	; (4238 <SPI_TEMP_init+0x1c>)
    4222:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    4224:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    4228:	4804      	ldr	r0, [pc, #16]	; (423c <SPI_TEMP_init+0x20>)
    422a:	4b05      	ldr	r3, [pc, #20]	; (4240 <SPI_TEMP_init+0x24>)
    422c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    422e:	4b05      	ldr	r3, [pc, #20]	; (4244 <SPI_TEMP_init+0x28>)
    4230:	4798      	blx	r3
}
    4232:	bf00      	nop
    4234:	bd80      	pop	{r7, pc}
    4236:	bf00      	nop
    4238:	000041e9 	.word	0x000041e9
    423c:	20001f1c 	.word	0x20001f1c
    4240:	00005809 	.word	0x00005809
    4244:	0000417d 	.word	0x0000417d

00004248 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    4248:	b580      	push	{r7, lr}
    424a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    424c:	2100      	movs	r1, #0
    424e:	2017      	movs	r0, #23
    4250:	4b07      	ldr	r3, [pc, #28]	; (4270 <I2C_EXPANDER_PORT_init+0x28>)
    4252:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    4254:	4907      	ldr	r1, [pc, #28]	; (4274 <I2C_EXPANDER_PORT_init+0x2c>)
    4256:	2017      	movs	r0, #23
    4258:	4b07      	ldr	r3, [pc, #28]	; (4278 <I2C_EXPANDER_PORT_init+0x30>)
    425a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    425c:	2100      	movs	r1, #0
    425e:	2016      	movs	r0, #22
    4260:	4b03      	ldr	r3, [pc, #12]	; (4270 <I2C_EXPANDER_PORT_init+0x28>)
    4262:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    4264:	4905      	ldr	r1, [pc, #20]	; (427c <I2C_EXPANDER_PORT_init+0x34>)
    4266:	2016      	movs	r0, #22
    4268:	4b03      	ldr	r3, [pc, #12]	; (4278 <I2C_EXPANDER_PORT_init+0x30>)
    426a:	4798      	blx	r3
}
    426c:	bf00      	nop
    426e:	bd80      	pop	{r7, pc}
    4270:	00003c59 	.word	0x00003c59
    4274:	00170003 	.word	0x00170003
    4278:	00003c8d 	.word	0x00003c8d
    427c:	00160003 	.word	0x00160003

00004280 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    4280:	b580      	push	{r7, lr}
    4282:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4284:	2242      	movs	r2, #66	; 0x42
    4286:	2123      	movs	r1, #35	; 0x23
    4288:	4806      	ldr	r0, [pc, #24]	; (42a4 <I2C_EXPANDER_CLOCK_init+0x24>)
    428a:	4b07      	ldr	r3, [pc, #28]	; (42a8 <I2C_EXPANDER_CLOCK_init+0x28>)
    428c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    428e:	2246      	movs	r2, #70	; 0x46
    4290:	2103      	movs	r1, #3
    4292:	4804      	ldr	r0, [pc, #16]	; (42a4 <I2C_EXPANDER_CLOCK_init+0x24>)
    4294:	4b04      	ldr	r3, [pc, #16]	; (42a8 <I2C_EXPANDER_CLOCK_init+0x28>)
    4296:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    4298:	4804      	ldr	r0, [pc, #16]	; (42ac <I2C_EXPANDER_CLOCK_init+0x2c>)
    429a:	4b05      	ldr	r3, [pc, #20]	; (42b0 <I2C_EXPANDER_CLOCK_init+0x30>)
    429c:	4798      	blx	r3
}
    429e:	bf00      	nop
    42a0:	bd80      	pop	{r7, pc}
    42a2:	bf00      	nop
    42a4:	40001c00 	.word	0x40001c00
    42a8:	00003459 	.word	0x00003459
    42ac:	40000800 	.word	0x40000800
    42b0:	000036ff 	.word	0x000036ff

000042b4 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    42b8:	4b04      	ldr	r3, [pc, #16]	; (42cc <I2C_EXPANDER_init+0x18>)
    42ba:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    42bc:	4904      	ldr	r1, [pc, #16]	; (42d0 <I2C_EXPANDER_init+0x1c>)
    42be:	4805      	ldr	r0, [pc, #20]	; (42d4 <I2C_EXPANDER_init+0x20>)
    42c0:	4b05      	ldr	r3, [pc, #20]	; (42d8 <I2C_EXPANDER_init+0x24>)
    42c2:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    42c4:	4b05      	ldr	r3, [pc, #20]	; (42dc <I2C_EXPANDER_init+0x28>)
    42c6:	4798      	blx	r3
}
    42c8:	bf00      	nop
    42ca:	bd80      	pop	{r7, pc}
    42cc:	00004281 	.word	0x00004281
    42d0:	43000400 	.word	0x43000400
    42d4:	20002038 	.word	0x20002038
    42d8:	000051ad 	.word	0x000051ad
    42dc:	00004249 	.word	0x00004249

000042e0 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    42e0:	b580      	push	{r7, lr}
    42e2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    42e4:	2100      	movs	r1, #0
    42e6:	2044      	movs	r0, #68	; 0x44
    42e8:	4b11      	ldr	r3, [pc, #68]	; (4330 <SPI_HI3593_PORT_init+0x50>)
    42ea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    42ec:	2102      	movs	r1, #2
    42ee:	2044      	movs	r0, #68	; 0x44
    42f0:	4b10      	ldr	r3, [pc, #64]	; (4334 <SPI_HI3593_PORT_init+0x54>)
    42f2:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    42f4:	4910      	ldr	r1, [pc, #64]	; (4338 <SPI_HI3593_PORT_init+0x58>)
    42f6:	2044      	movs	r0, #68	; 0x44
    42f8:	4b10      	ldr	r3, [pc, #64]	; (433c <SPI_HI3593_PORT_init+0x5c>)
    42fa:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    42fc:	2100      	movs	r1, #0
    42fe:	2045      	movs	r0, #69	; 0x45
    4300:	4b0b      	ldr	r3, [pc, #44]	; (4330 <SPI_HI3593_PORT_init+0x50>)
    4302:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    4304:	2102      	movs	r1, #2
    4306:	2045      	movs	r0, #69	; 0x45
    4308:	4b0a      	ldr	r3, [pc, #40]	; (4334 <SPI_HI3593_PORT_init+0x54>)
    430a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    430c:	490c      	ldr	r1, [pc, #48]	; (4340 <SPI_HI3593_PORT_init+0x60>)
    430e:	2045      	movs	r0, #69	; 0x45
    4310:	4b0a      	ldr	r3, [pc, #40]	; (433c <SPI_HI3593_PORT_init+0x5c>)
    4312:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    4314:	2101      	movs	r1, #1
    4316:	2047      	movs	r0, #71	; 0x47
    4318:	4b06      	ldr	r3, [pc, #24]	; (4334 <SPI_HI3593_PORT_init+0x54>)
    431a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    431c:	2100      	movs	r1, #0
    431e:	2047      	movs	r0, #71	; 0x47
    4320:	4b08      	ldr	r3, [pc, #32]	; (4344 <SPI_HI3593_PORT_init+0x64>)
    4322:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    4324:	4908      	ldr	r1, [pc, #32]	; (4348 <SPI_HI3593_PORT_init+0x68>)
    4326:	2047      	movs	r0, #71	; 0x47
    4328:	4b04      	ldr	r3, [pc, #16]	; (433c <SPI_HI3593_PORT_init+0x5c>)
    432a:	4798      	blx	r3
}
    432c:	bf00      	nop
    432e:	bd80      	pop	{r7, pc}
    4330:	00003ce5 	.word	0x00003ce5
    4334:	00003cad 	.word	0x00003cad
    4338:	00440002 	.word	0x00440002
    433c:	00003c8d 	.word	0x00003c8d
    4340:	00450002 	.word	0x00450002
    4344:	00003c59 	.word	0x00003c59
    4348:	00470002 	.word	0x00470002

0000434c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    434c:	b580      	push	{r7, lr}
    434e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4350:	2242      	movs	r2, #66	; 0x42
    4352:	2124      	movs	r1, #36	; 0x24
    4354:	4806      	ldr	r0, [pc, #24]	; (4370 <SPI_HI3593_CLOCK_init+0x24>)
    4356:	4b07      	ldr	r3, [pc, #28]	; (4374 <SPI_HI3593_CLOCK_init+0x28>)
    4358:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    435a:	224a      	movs	r2, #74	; 0x4a
    435c:	2103      	movs	r1, #3
    435e:	4804      	ldr	r0, [pc, #16]	; (4370 <SPI_HI3593_CLOCK_init+0x24>)
    4360:	4b04      	ldr	r3, [pc, #16]	; (4374 <SPI_HI3593_CLOCK_init+0x28>)
    4362:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    4364:	4804      	ldr	r0, [pc, #16]	; (4378 <SPI_HI3593_CLOCK_init+0x2c>)
    4366:	4b05      	ldr	r3, [pc, #20]	; (437c <SPI_HI3593_CLOCK_init+0x30>)
    4368:	4798      	blx	r3
}
    436a:	bf00      	nop
    436c:	bd80      	pop	{r7, pc}
    436e:	bf00      	nop
    4370:	40001c00 	.word	0x40001c00
    4374:	00003459 	.word	0x00003459
    4378:	40000800 	.word	0x40000800
    437c:	0000371f 	.word	0x0000371f

00004380 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    4380:	b580      	push	{r7, lr}
    4382:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    4384:	4b04      	ldr	r3, [pc, #16]	; (4398 <SPI_HI3593_init+0x18>)
    4386:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    4388:	4904      	ldr	r1, [pc, #16]	; (439c <SPI_HI3593_init+0x1c>)
    438a:	4805      	ldr	r0, [pc, #20]	; (43a0 <SPI_HI3593_init+0x20>)
    438c:	4b05      	ldr	r3, [pc, #20]	; (43a4 <SPI_HI3593_init+0x24>)
    438e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    4390:	4b05      	ldr	r3, [pc, #20]	; (43a8 <SPI_HI3593_init+0x28>)
    4392:	4798      	blx	r3
}
    4394:	bf00      	nop
    4396:	bd80      	pop	{r7, pc}
    4398:	0000434d 	.word	0x0000434d
    439c:	43000800 	.word	0x43000800
    43a0:	20001f04 	.word	0x20001f04
    43a4:	00005ab9 	.word	0x00005ab9
    43a8:	000042e1 	.word	0x000042e1

000043ac <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    43ac:	b580      	push	{r7, lr}
    43ae:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    43b0:	2100      	movs	r1, #0
    43b2:	2068      	movs	r0, #104	; 0x68
    43b4:	4b07      	ldr	r3, [pc, #28]	; (43d4 <I2C_EEPROM_PORT_init+0x28>)
    43b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    43b8:	4907      	ldr	r1, [pc, #28]	; (43d8 <I2C_EEPROM_PORT_init+0x2c>)
    43ba:	2068      	movs	r0, #104	; 0x68
    43bc:	4b07      	ldr	r3, [pc, #28]	; (43dc <I2C_EEPROM_PORT_init+0x30>)
    43be:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    43c0:	2100      	movs	r1, #0
    43c2:	2069      	movs	r0, #105	; 0x69
    43c4:	4b03      	ldr	r3, [pc, #12]	; (43d4 <I2C_EEPROM_PORT_init+0x28>)
    43c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    43c8:	4905      	ldr	r1, [pc, #20]	; (43e0 <I2C_EEPROM_PORT_init+0x34>)
    43ca:	2069      	movs	r0, #105	; 0x69
    43cc:	4b03      	ldr	r3, [pc, #12]	; (43dc <I2C_EEPROM_PORT_init+0x30>)
    43ce:	4798      	blx	r3
}
    43d0:	bf00      	nop
    43d2:	bd80      	pop	{r7, pc}
    43d4:	00003c59 	.word	0x00003c59
    43d8:	00680002 	.word	0x00680002
    43dc:	00003c8d 	.word	0x00003c8d
    43e0:	00690002 	.word	0x00690002

000043e4 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    43e4:	b580      	push	{r7, lr}
    43e6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    43e8:	2242      	movs	r2, #66	; 0x42
    43ea:	2125      	movs	r1, #37	; 0x25
    43ec:	4806      	ldr	r0, [pc, #24]	; (4408 <I2C_EEPROM_CLOCK_init+0x24>)
    43ee:	4b07      	ldr	r3, [pc, #28]	; (440c <I2C_EEPROM_CLOCK_init+0x28>)
    43f0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    43f2:	224a      	movs	r2, #74	; 0x4a
    43f4:	2103      	movs	r1, #3
    43f6:	4804      	ldr	r0, [pc, #16]	; (4408 <I2C_EEPROM_CLOCK_init+0x24>)
    43f8:	4b04      	ldr	r3, [pc, #16]	; (440c <I2C_EEPROM_CLOCK_init+0x28>)
    43fa:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    43fc:	4804      	ldr	r0, [pc, #16]	; (4410 <I2C_EEPROM_CLOCK_init+0x2c>)
    43fe:	4b05      	ldr	r3, [pc, #20]	; (4414 <I2C_EEPROM_CLOCK_init+0x30>)
    4400:	4798      	blx	r3
}
    4402:	bf00      	nop
    4404:	bd80      	pop	{r7, pc}
    4406:	bf00      	nop
    4408:	40001c00 	.word	0x40001c00
    440c:	00003459 	.word	0x00003459
    4410:	40000800 	.word	0x40000800
    4414:	0000373f 	.word	0x0000373f

00004418 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    4418:	b580      	push	{r7, lr}
    441a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    441c:	4b04      	ldr	r3, [pc, #16]	; (4430 <I2C_EEPROM_init+0x18>)
    441e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    4420:	4904      	ldr	r1, [pc, #16]	; (4434 <I2C_EEPROM_init+0x1c>)
    4422:	4805      	ldr	r0, [pc, #20]	; (4438 <I2C_EEPROM_init+0x20>)
    4424:	4b05      	ldr	r3, [pc, #20]	; (443c <I2C_EEPROM_init+0x24>)
    4426:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    4428:	4b05      	ldr	r3, [pc, #20]	; (4440 <I2C_EEPROM_init+0x28>)
    442a:	4798      	blx	r3
}
    442c:	bf00      	nop
    442e:	bd80      	pop	{r7, pc}
    4430:	000043e5 	.word	0x000043e5
    4434:	43000c00 	.word	0x43000c00
    4438:	200020b4 	.word	0x200020b4
    443c:	000051ad 	.word	0x000051ad
    4440:	000043ad 	.word	0x000043ad

00004444 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    4444:	b580      	push	{r7, lr}
    4446:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    4448:	4808      	ldr	r0, [pc, #32]	; (446c <TIMER_USB_init+0x28>)
    444a:	4b09      	ldr	r3, [pc, #36]	; (4470 <TIMER_USB_init+0x2c>)
    444c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    444e:	2243      	movs	r2, #67	; 0x43
    4450:	2109      	movs	r1, #9
    4452:	4808      	ldr	r0, [pc, #32]	; (4474 <TIMER_USB_init+0x30>)
    4454:	4b08      	ldr	r3, [pc, #32]	; (4478 <TIMER_USB_init+0x34>)
    4456:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    4458:	4b08      	ldr	r3, [pc, #32]	; (447c <TIMER_USB_init+0x38>)
    445a:	4798      	blx	r3
    445c:	4603      	mov	r3, r0
    445e:	461a      	mov	r2, r3
    4460:	4907      	ldr	r1, [pc, #28]	; (4480 <TIMER_USB_init+0x3c>)
    4462:	4808      	ldr	r0, [pc, #32]	; (4484 <TIMER_USB_init+0x40>)
    4464:	4b08      	ldr	r3, [pc, #32]	; (4488 <TIMER_USB_init+0x44>)
    4466:	4798      	blx	r3
}
    4468:	bf00      	nop
    446a:	bd80      	pop	{r7, pc}
    446c:	40000800 	.word	0x40000800
    4470:	0000357f 	.word	0x0000357f
    4474:	40001c00 	.word	0x40001c00
    4478:	00003459 	.word	0x00003459
    447c:	0000b615 	.word	0x0000b615
    4480:	40003800 	.word	0x40003800
    4484:	2000201c 	.word	0x2000201c
    4488:	00005c89 	.word	0x00005c89

0000448c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    448c:	b480      	push	{r7}
    448e:	af00      	add	r7, sp, #0
}
    4490:	bf00      	nop
    4492:	46bd      	mov	sp, r7
    4494:	f85d 7b04 	ldr.w	r7, [sp], #4
    4498:	4770      	bx	lr
	...

0000449c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    449c:	b580      	push	{r7, lr}
    449e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    44a0:	4804      	ldr	r0, [pc, #16]	; (44b4 <LIVE_PULSE_CLOCK_init+0x18>)
    44a2:	4b05      	ldr	r3, [pc, #20]	; (44b8 <LIVE_PULSE_CLOCK_init+0x1c>)
    44a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    44a6:	2244      	movs	r2, #68	; 0x44
    44a8:	2109      	movs	r1, #9
    44aa:	4804      	ldr	r0, [pc, #16]	; (44bc <LIVE_PULSE_CLOCK_init+0x20>)
    44ac:	4b04      	ldr	r3, [pc, #16]	; (44c0 <LIVE_PULSE_CLOCK_init+0x24>)
    44ae:	4798      	blx	r3
}
    44b0:	bf00      	nop
    44b2:	bd80      	pop	{r7, pc}
    44b4:	40000800 	.word	0x40000800
    44b8:	0000359f 	.word	0x0000359f
    44bc:	40001c00 	.word	0x40001c00
    44c0:	00003459 	.word	0x00003459

000044c4 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    44c4:	b580      	push	{r7, lr}
    44c6:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    44c8:	4b06      	ldr	r3, [pc, #24]	; (44e4 <LIVE_PULSE_init+0x20>)
    44ca:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    44cc:	4b06      	ldr	r3, [pc, #24]	; (44e8 <LIVE_PULSE_init+0x24>)
    44ce:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC1, _tc_get_pwm());
    44d0:	4b06      	ldr	r3, [pc, #24]	; (44ec <LIVE_PULSE_init+0x28>)
    44d2:	4798      	blx	r3
    44d4:	4603      	mov	r3, r0
    44d6:	461a      	mov	r2, r3
    44d8:	4905      	ldr	r1, [pc, #20]	; (44f0 <LIVE_PULSE_init+0x2c>)
    44da:	4806      	ldr	r0, [pc, #24]	; (44f4 <LIVE_PULSE_init+0x30>)
    44dc:	4b06      	ldr	r3, [pc, #24]	; (44f8 <LIVE_PULSE_init+0x34>)
    44de:	4798      	blx	r3
}
    44e0:	bf00      	nop
    44e2:	bd80      	pop	{r7, pc}
    44e4:	0000449d 	.word	0x0000449d
    44e8:	0000448d 	.word	0x0000448d
    44ec:	0000b625 	.word	0x0000b625
    44f0:	40003c00 	.word	0x40003c00
    44f4:	20001fbc 	.word	0x20001fbc
    44f8:	000053e1 	.word	0x000053e1

000044fc <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    44fc:	b580      	push	{r7, lr}
    44fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    4500:	4808      	ldr	r0, [pc, #32]	; (4524 <TIMER_ARINC_init+0x28>)
    4502:	4b09      	ldr	r3, [pc, #36]	; (4528 <TIMER_ARINC_init+0x2c>)
    4504:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4506:	2244      	movs	r2, #68	; 0x44
    4508:	211a      	movs	r1, #26
    450a:	4808      	ldr	r0, [pc, #32]	; (452c <TIMER_ARINC_init+0x30>)
    450c:	4b08      	ldr	r3, [pc, #32]	; (4530 <TIMER_ARINC_init+0x34>)
    450e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    4510:	4b08      	ldr	r3, [pc, #32]	; (4534 <TIMER_ARINC_init+0x38>)
    4512:	4798      	blx	r3
    4514:	4603      	mov	r3, r0
    4516:	461a      	mov	r2, r3
    4518:	4907      	ldr	r1, [pc, #28]	; (4538 <TIMER_ARINC_init+0x3c>)
    451a:	4808      	ldr	r0, [pc, #32]	; (453c <TIMER_ARINC_init+0x40>)
    451c:	4b08      	ldr	r3, [pc, #32]	; (4540 <TIMER_ARINC_init+0x44>)
    451e:	4798      	blx	r3
}
    4520:	bf00      	nop
    4522:	bd80      	pop	{r7, pc}
    4524:	40000800 	.word	0x40000800
    4528:	0000363f 	.word	0x0000363f
    452c:	40001c00 	.word	0x40001c00
    4530:	00003459 	.word	0x00003459
    4534:	0000b615 	.word	0x0000b615
    4538:	4101a000 	.word	0x4101a000
    453c:	20002000 	.word	0x20002000
    4540:	00005c89 	.word	0x00005c89

00004544 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    4544:	b580      	push	{r7, lr}
    4546:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    4548:	4808      	ldr	r0, [pc, #32]	; (456c <TIMER_HVAC_init+0x28>)
    454a:	4b09      	ldr	r3, [pc, #36]	; (4570 <TIMER_HVAC_init+0x2c>)
    454c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    454e:	2246      	movs	r2, #70	; 0x46
    4550:	211a      	movs	r1, #26
    4552:	4808      	ldr	r0, [pc, #32]	; (4574 <TIMER_HVAC_init+0x30>)
    4554:	4b08      	ldr	r3, [pc, #32]	; (4578 <TIMER_HVAC_init+0x34>)
    4556:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    4558:	4b08      	ldr	r3, [pc, #32]	; (457c <TIMER_HVAC_init+0x38>)
    455a:	4798      	blx	r3
    455c:	4603      	mov	r3, r0
    455e:	461a      	mov	r2, r3
    4560:	4907      	ldr	r1, [pc, #28]	; (4580 <TIMER_HVAC_init+0x3c>)
    4562:	4808      	ldr	r0, [pc, #32]	; (4584 <TIMER_HVAC_init+0x40>)
    4564:	4b08      	ldr	r3, [pc, #32]	; (4588 <TIMER_HVAC_init+0x44>)
    4566:	4798      	blx	r3
}
    4568:	bf00      	nop
    456a:	bd80      	pop	{r7, pc}
    456c:	40000800 	.word	0x40000800
    4570:	0000365f 	.word	0x0000365f
    4574:	40001c00 	.word	0x40001c00
    4578:	00003459 	.word	0x00003459
    457c:	0000b615 	.word	0x0000b615
    4580:	4101c000 	.word	0x4101c000
    4584:	20002098 	.word	0x20002098
    4588:	00005c89 	.word	0x00005c89

0000458c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    458c:	b580      	push	{r7, lr}
    458e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    4590:	4808      	ldr	r0, [pc, #32]	; (45b4 <TIMER_MAINTENANCE_init+0x28>)
    4592:	4b09      	ldr	r3, [pc, #36]	; (45b8 <TIMER_MAINTENANCE_init+0x2c>)
    4594:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4596:	2246      	movs	r2, #70	; 0x46
    4598:	211e      	movs	r1, #30
    459a:	4808      	ldr	r0, [pc, #32]	; (45bc <TIMER_MAINTENANCE_init+0x30>)
    459c:	4b08      	ldr	r3, [pc, #32]	; (45c0 <TIMER_MAINTENANCE_init+0x34>)
    459e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    45a0:	4b08      	ldr	r3, [pc, #32]	; (45c4 <TIMER_MAINTENANCE_init+0x38>)
    45a2:	4798      	blx	r3
    45a4:	4603      	mov	r3, r0
    45a6:	461a      	mov	r2, r3
    45a8:	4907      	ldr	r1, [pc, #28]	; (45c8 <TIMER_MAINTENANCE_init+0x3c>)
    45aa:	4808      	ldr	r0, [pc, #32]	; (45cc <TIMER_MAINTENANCE_init+0x40>)
    45ac:	4b08      	ldr	r3, [pc, #32]	; (45d0 <TIMER_MAINTENANCE_init+0x44>)
    45ae:	4798      	blx	r3
}
    45b0:	bf00      	nop
    45b2:	bd80      	pop	{r7, pc}
    45b4:	40000800 	.word	0x40000800
    45b8:	0000367f 	.word	0x0000367f
    45bc:	40001c00 	.word	0x40001c00
    45c0:	00003459 	.word	0x00003459
    45c4:	0000b615 	.word	0x0000b615
    45c8:	42001400 	.word	0x42001400
    45cc:	20001f64 	.word	0x20001f64
    45d0:	00005c89 	.word	0x00005c89

000045d4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    45d4:	b580      	push	{r7, lr}
    45d6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    45d8:	4808      	ldr	r0, [pc, #32]	; (45fc <TIMER_INTERFACE_init+0x28>)
    45da:	4b09      	ldr	r3, [pc, #36]	; (4600 <TIMER_INTERFACE_init+0x2c>)
    45dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    45de:	2246      	movs	r2, #70	; 0x46
    45e0:	211e      	movs	r1, #30
    45e2:	4808      	ldr	r0, [pc, #32]	; (4604 <TIMER_INTERFACE_init+0x30>)
    45e4:	4b08      	ldr	r3, [pc, #32]	; (4608 <TIMER_INTERFACE_init+0x34>)
    45e6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    45e8:	4b08      	ldr	r3, [pc, #32]	; (460c <TIMER_INTERFACE_init+0x38>)
    45ea:	4798      	blx	r3
    45ec:	4603      	mov	r3, r0
    45ee:	461a      	mov	r2, r3
    45f0:	4907      	ldr	r1, [pc, #28]	; (4610 <TIMER_INTERFACE_init+0x3c>)
    45f2:	4808      	ldr	r0, [pc, #32]	; (4614 <TIMER_INTERFACE_init+0x40>)
    45f4:	4b08      	ldr	r3, [pc, #32]	; (4618 <TIMER_INTERFACE_init+0x44>)
    45f6:	4798      	blx	r3
}
    45f8:	bf00      	nop
    45fa:	bd80      	pop	{r7, pc}
    45fc:	40000800 	.word	0x40000800
    4600:	0000369f 	.word	0x0000369f
    4604:	40001c00 	.word	0x40001c00
    4608:	00003459 	.word	0x00003459
    460c:	0000b615 	.word	0x0000b615
    4610:	42001800 	.word	0x42001800
    4614:	20001fa0 	.word	0x20001fa0
    4618:	00005c89 	.word	0x00005c89

0000461c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    461c:	b580      	push	{r7, lr}
    461e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    4620:	4808      	ldr	r0, [pc, #32]	; (4644 <TIMER_EVENT_init+0x28>)
    4622:	4b09      	ldr	r3, [pc, #36]	; (4648 <TIMER_EVENT_init+0x2c>)
    4624:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4626:	2246      	movs	r2, #70	; 0x46
    4628:	2127      	movs	r1, #39	; 0x27
    462a:	4808      	ldr	r0, [pc, #32]	; (464c <TIMER_EVENT_init+0x30>)
    462c:	4b08      	ldr	r3, [pc, #32]	; (4650 <TIMER_EVENT_init+0x34>)
    462e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    4630:	4b08      	ldr	r3, [pc, #32]	; (4654 <TIMER_EVENT_init+0x38>)
    4632:	4798      	blx	r3
    4634:	4603      	mov	r3, r0
    4636:	461a      	mov	r2, r3
    4638:	4907      	ldr	r1, [pc, #28]	; (4658 <TIMER_EVENT_init+0x3c>)
    463a:	4808      	ldr	r0, [pc, #32]	; (465c <TIMER_EVENT_init+0x40>)
    463c:	4b08      	ldr	r3, [pc, #32]	; (4660 <TIMER_EVENT_init+0x44>)
    463e:	4798      	blx	r3
}
    4640:	bf00      	nop
    4642:	bd80      	pop	{r7, pc}
    4644:	40000800 	.word	0x40000800
    4648:	0000375f 	.word	0x0000375f
    464c:	40001c00 	.word	0x40001c00
    4650:	00003459 	.word	0x00003459
    4654:	0000b615 	.word	0x0000b615
    4658:	43001400 	.word	0x43001400
    465c:	20001f84 	.word	0x20001f84
    4660:	00005c89 	.word	0x00005c89

00004664 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    4664:	b580      	push	{r7, lr}
    4666:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    4668:	2102      	movs	r1, #2
    466a:	2018      	movs	r0, #24
    466c:	4b0f      	ldr	r3, [pc, #60]	; (46ac <CDCUSB_PORT_init+0x48>)
    466e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    4670:	2100      	movs	r1, #0
    4672:	2018      	movs	r0, #24
    4674:	4b0e      	ldr	r3, [pc, #56]	; (46b0 <CDCUSB_PORT_init+0x4c>)
    4676:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    4678:	2100      	movs	r1, #0
    467a:	2018      	movs	r0, #24
    467c:	4b0d      	ldr	r3, [pc, #52]	; (46b4 <CDCUSB_PORT_init+0x50>)
    467e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    4680:	490d      	ldr	r1, [pc, #52]	; (46b8 <CDCUSB_PORT_init+0x54>)
    4682:	2018      	movs	r0, #24
    4684:	4b0d      	ldr	r3, [pc, #52]	; (46bc <CDCUSB_PORT_init+0x58>)
    4686:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    4688:	2102      	movs	r1, #2
    468a:	2019      	movs	r0, #25
    468c:	4b07      	ldr	r3, [pc, #28]	; (46ac <CDCUSB_PORT_init+0x48>)
    468e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    4690:	2100      	movs	r1, #0
    4692:	2019      	movs	r0, #25
    4694:	4b06      	ldr	r3, [pc, #24]	; (46b0 <CDCUSB_PORT_init+0x4c>)
    4696:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    4698:	2100      	movs	r1, #0
    469a:	2019      	movs	r0, #25
    469c:	4b05      	ldr	r3, [pc, #20]	; (46b4 <CDCUSB_PORT_init+0x50>)
    469e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    46a0:	4907      	ldr	r1, [pc, #28]	; (46c0 <CDCUSB_PORT_init+0x5c>)
    46a2:	2019      	movs	r0, #25
    46a4:	4b05      	ldr	r3, [pc, #20]	; (46bc <CDCUSB_PORT_init+0x58>)
    46a6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    46a8:	bf00      	nop
    46aa:	bd80      	pop	{r7, pc}
    46ac:	00003cad 	.word	0x00003cad
    46b0:	00003ce5 	.word	0x00003ce5
    46b4:	00003c59 	.word	0x00003c59
    46b8:	00180007 	.word	0x00180007
    46bc:	00003c8d 	.word	0x00003c8d
    46c0:	00190007 	.word	0x00190007

000046c4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    46c4:	b580      	push	{r7, lr}
    46c6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    46c8:	2242      	movs	r2, #66	; 0x42
    46ca:	210a      	movs	r1, #10
    46cc:	4805      	ldr	r0, [pc, #20]	; (46e4 <CDCUSB_CLOCK_init+0x20>)
    46ce:	4b06      	ldr	r3, [pc, #24]	; (46e8 <CDCUSB_CLOCK_init+0x24>)
    46d0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    46d2:	4806      	ldr	r0, [pc, #24]	; (46ec <CDCUSB_CLOCK_init+0x28>)
    46d4:	4b06      	ldr	r3, [pc, #24]	; (46f0 <CDCUSB_CLOCK_init+0x2c>)
    46d6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    46d8:	4804      	ldr	r0, [pc, #16]	; (46ec <CDCUSB_CLOCK_init+0x28>)
    46da:	4b06      	ldr	r3, [pc, #24]	; (46f4 <CDCUSB_CLOCK_init+0x30>)
    46dc:	4798      	blx	r3
}
    46de:	bf00      	nop
    46e0:	bd80      	pop	{r7, pc}
    46e2:	bf00      	nop
    46e4:	40001c00 	.word	0x40001c00
    46e8:	00003459 	.word	0x00003459
    46ec:	40000800 	.word	0x40000800
    46f0:	0000347f 	.word	0x0000347f
    46f4:	000035bf 	.word	0x000035bf

000046f8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    46fc:	4b03      	ldr	r3, [pc, #12]	; (470c <CDCUSB_init+0x14>)
    46fe:	4798      	blx	r3
	usb_d_init();
    4700:	4b03      	ldr	r3, [pc, #12]	; (4710 <CDCUSB_init+0x18>)
    4702:	4798      	blx	r3
	CDCUSB_PORT_init();
    4704:	4b03      	ldr	r3, [pc, #12]	; (4714 <CDCUSB_init+0x1c>)
    4706:	4798      	blx	r3
}
    4708:	bf00      	nop
    470a:	bd80      	pop	{r7, pc}
    470c:	000046c5 	.word	0x000046c5
    4710:	00006499 	.word	0x00006499
    4714:	00004665 	.word	0x00004665

00004718 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    4718:	b580      	push	{r7, lr}
    471a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    471c:	4802      	ldr	r0, [pc, #8]	; (4728 <WATCHDOG_CLOCK_init+0x10>)
    471e:	4b03      	ldr	r3, [pc, #12]	; (472c <WATCHDOG_CLOCK_init+0x14>)
    4720:	4798      	blx	r3
}
    4722:	bf00      	nop
    4724:	bd80      	pop	{r7, pc}
    4726:	bf00      	nop
    4728:	40000800 	.word	0x40000800
    472c:	000034ff 	.word	0x000034ff

00004730 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    4730:	b580      	push	{r7, lr}
    4732:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    4734:	4b03      	ldr	r3, [pc, #12]	; (4744 <WATCHDOG_init+0x14>)
    4736:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    4738:	4903      	ldr	r1, [pc, #12]	; (4748 <WATCHDOG_init+0x18>)
    473a:	4804      	ldr	r0, [pc, #16]	; (474c <WATCHDOG_init+0x1c>)
    473c:	4b04      	ldr	r3, [pc, #16]	; (4750 <WATCHDOG_init+0x20>)
    473e:	4798      	blx	r3
}
    4740:	bf00      	nop
    4742:	bd80      	pop	{r7, pc}
    4744:	00004719 	.word	0x00004719
    4748:	40002000 	.word	0x40002000
    474c:	20002114 	.word	0x20002114
    4750:	00003d2d 	.word	0x00003d2d

00004754 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    4754:	b580      	push	{r7, lr}
    4756:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    4758:	4904      	ldr	r1, [pc, #16]	; (476c <CAN_CCU_PORT_init+0x18>)
    475a:	202d      	movs	r0, #45	; 0x2d
    475c:	4b04      	ldr	r3, [pc, #16]	; (4770 <CAN_CCU_PORT_init+0x1c>)
    475e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    4760:	4904      	ldr	r1, [pc, #16]	; (4774 <CAN_CCU_PORT_init+0x20>)
    4762:	202c      	movs	r0, #44	; 0x2c
    4764:	4b02      	ldr	r3, [pc, #8]	; (4770 <CAN_CCU_PORT_init+0x1c>)
    4766:	4798      	blx	r3
}
    4768:	bf00      	nop
    476a:	bd80      	pop	{r7, pc}
    476c:	002d0007 	.word	0x002d0007
    4770:	00003c8d 	.word	0x00003c8d
    4774:	002c0007 	.word	0x002c0007

00004778 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    4778:	b580      	push	{r7, lr}
    477a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    477c:	4807      	ldr	r0, [pc, #28]	; (479c <CAN_CCU_init+0x24>)
    477e:	4b08      	ldr	r3, [pc, #32]	; (47a0 <CAN_CCU_init+0x28>)
    4780:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4782:	2243      	movs	r2, #67	; 0x43
    4784:	211c      	movs	r1, #28
    4786:	4807      	ldr	r0, [pc, #28]	; (47a4 <CAN_CCU_init+0x2c>)
    4788:	4b07      	ldr	r3, [pc, #28]	; (47a8 <CAN_CCU_init+0x30>)
    478a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    478c:	4907      	ldr	r1, [pc, #28]	; (47ac <CAN_CCU_init+0x34>)
    478e:	4808      	ldr	r0, [pc, #32]	; (47b0 <CAN_CCU_init+0x38>)
    4790:	4b08      	ldr	r3, [pc, #32]	; (47b4 <CAN_CCU_init+0x3c>)
    4792:	4798      	blx	r3
	CAN_CCU_PORT_init();
    4794:	4b08      	ldr	r3, [pc, #32]	; (47b8 <CAN_CCU_init+0x40>)
    4796:	4798      	blx	r3
}
    4798:	bf00      	nop
    479a:	bd80      	pop	{r7, pc}
    479c:	40000800 	.word	0x40000800
    47a0:	000034bf 	.word	0x000034bf
    47a4:	40001c00 	.word	0x40001c00
    47a8:	00003459 	.word	0x00003459
    47ac:	42000400 	.word	0x42000400
    47b0:	20001fd8 	.word	0x20001fd8
    47b4:	00004c95 	.word	0x00004c95
    47b8:	00004755 	.word	0x00004755

000047bc <system_init>:

void system_init(void)
{
    47bc:	b580      	push	{r7, lr}
    47be:	af00      	add	r7, sp, #0
	init_mcu();
    47c0:	4b51      	ldr	r3, [pc, #324]	; (4908 <system_init+0x14c>)
    47c2:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    47c4:	2101      	movs	r1, #1
    47c6:	200f      	movs	r0, #15
    47c8:	4b50      	ldr	r3, [pc, #320]	; (490c <system_init+0x150>)
    47ca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    47cc:	2102      	movs	r1, #2
    47ce:	200f      	movs	r0, #15
    47d0:	4b4f      	ldr	r3, [pc, #316]	; (4910 <system_init+0x154>)
    47d2:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    47d4:	f04f 31ff 	mov.w	r1, #4294967295
    47d8:	200f      	movs	r0, #15
    47da:	4b4e      	ldr	r3, [pc, #312]	; (4914 <system_init+0x158>)
    47dc:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    47de:	2101      	movs	r1, #1
    47e0:	2013      	movs	r0, #19
    47e2:	4b4a      	ldr	r3, [pc, #296]	; (490c <system_init+0x150>)
    47e4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    47e6:	2102      	movs	r1, #2
    47e8:	2013      	movs	r0, #19
    47ea:	4b49      	ldr	r3, [pc, #292]	; (4910 <system_init+0x154>)
    47ec:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    47ee:	f04f 31ff 	mov.w	r1, #4294967295
    47f2:	2013      	movs	r0, #19
    47f4:	4b47      	ldr	r3, [pc, #284]	; (4914 <system_init+0x158>)
    47f6:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    47f8:	2101      	movs	r1, #1
    47fa:	2027      	movs	r0, #39	; 0x27
    47fc:	4b44      	ldr	r3, [pc, #272]	; (4910 <system_init+0x154>)
    47fe:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    4800:	2102      	movs	r1, #2
    4802:	2027      	movs	r0, #39	; 0x27
    4804:	4b44      	ldr	r3, [pc, #272]	; (4918 <system_init+0x15c>)
    4806:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    4808:	f04f 31ff 	mov.w	r1, #4294967295
    480c:	2027      	movs	r0, #39	; 0x27
    480e:	4b41      	ldr	r3, [pc, #260]	; (4914 <system_init+0x158>)
    4810:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    4812:	2101      	movs	r1, #1
    4814:	203d      	movs	r0, #61	; 0x3d
    4816:	4b3d      	ldr	r3, [pc, #244]	; (490c <system_init+0x150>)
    4818:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    481a:	2102      	movs	r1, #2
    481c:	203d      	movs	r0, #61	; 0x3d
    481e:	4b3c      	ldr	r3, [pc, #240]	; (4910 <system_init+0x154>)
    4820:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    4822:	f04f 31ff 	mov.w	r1, #4294967295
    4826:	203d      	movs	r0, #61	; 0x3d
    4828:	4b3a      	ldr	r3, [pc, #232]	; (4914 <system_init+0x158>)
    482a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    482c:	2101      	movs	r1, #1
    482e:	203f      	movs	r0, #63	; 0x3f
    4830:	4b37      	ldr	r3, [pc, #220]	; (4910 <system_init+0x154>)
    4832:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    4834:	2101      	movs	r1, #1
    4836:	203f      	movs	r0, #63	; 0x3f
    4838:	4b37      	ldr	r3, [pc, #220]	; (4918 <system_init+0x15c>)
    483a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    483c:	f04f 31ff 	mov.w	r1, #4294967295
    4840:	203f      	movs	r0, #63	; 0x3f
    4842:	4b34      	ldr	r3, [pc, #208]	; (4914 <system_init+0x158>)
    4844:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    4846:	2100      	movs	r1, #0
    4848:	204d      	movs	r0, #77	; 0x4d
    484a:	4b30      	ldr	r3, [pc, #192]	; (490c <system_init+0x150>)
    484c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    484e:	2102      	movs	r1, #2
    4850:	204d      	movs	r0, #77	; 0x4d
    4852:	4b2f      	ldr	r3, [pc, #188]	; (4910 <system_init+0x154>)
    4854:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    4856:	f04f 31ff 	mov.w	r1, #4294967295
    485a:	204d      	movs	r0, #77	; 0x4d
    485c:	4b2d      	ldr	r3, [pc, #180]	; (4914 <system_init+0x158>)
    485e:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    4860:	2101      	movs	r1, #1
    4862:	204e      	movs	r0, #78	; 0x4e
    4864:	4b29      	ldr	r3, [pc, #164]	; (490c <system_init+0x150>)
    4866:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    4868:	2102      	movs	r1, #2
    486a:	204e      	movs	r0, #78	; 0x4e
    486c:	4b28      	ldr	r3, [pc, #160]	; (4910 <system_init+0x154>)
    486e:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    4870:	f04f 31ff 	mov.w	r1, #4294967295
    4874:	204e      	movs	r0, #78	; 0x4e
    4876:	4b27      	ldr	r3, [pc, #156]	; (4914 <system_init+0x158>)
    4878:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    487a:	2100      	movs	r1, #0
    487c:	204f      	movs	r0, #79	; 0x4f
    487e:	4b23      	ldr	r3, [pc, #140]	; (490c <system_init+0x150>)
    4880:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    4882:	2102      	movs	r1, #2
    4884:	204f      	movs	r0, #79	; 0x4f
    4886:	4b22      	ldr	r3, [pc, #136]	; (4910 <system_init+0x154>)
    4888:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    488a:	f04f 31ff 	mov.w	r1, #4294967295
    488e:	204f      	movs	r0, #79	; 0x4f
    4890:	4b20      	ldr	r3, [pc, #128]	; (4914 <system_init+0x158>)
    4892:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    4894:	2100      	movs	r1, #0
    4896:	2052      	movs	r0, #82	; 0x52
    4898:	4b1c      	ldr	r3, [pc, #112]	; (490c <system_init+0x150>)
    489a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    489c:	2102      	movs	r1, #2
    489e:	2052      	movs	r0, #82	; 0x52
    48a0:	4b1b      	ldr	r3, [pc, #108]	; (4910 <system_init+0x154>)
    48a2:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    48a4:	f04f 31ff 	mov.w	r1, #4294967295
    48a8:	2052      	movs	r0, #82	; 0x52
    48aa:	4b1a      	ldr	r3, [pc, #104]	; (4914 <system_init+0x158>)
    48ac:	4798      	blx	r3

	CRC_CALC_init();
    48ae:	4b1b      	ldr	r3, [pc, #108]	; (491c <system_init+0x160>)
    48b0:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    48b2:	4b1b      	ldr	r3, [pc, #108]	; (4920 <system_init+0x164>)
    48b4:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    48b6:	4b1b      	ldr	r3, [pc, #108]	; (4924 <system_init+0x168>)
    48b8:	4798      	blx	r3

	QSPI_N25Q256_init();
    48ba:	4b1b      	ldr	r3, [pc, #108]	; (4928 <system_init+0x16c>)
    48bc:	4798      	blx	r3

	DATETIME_CLOCK_init();
    48be:	4b1b      	ldr	r3, [pc, #108]	; (492c <system_init+0x170>)
    48c0:	4798      	blx	r3

	SPI_MEMORIES_init();
    48c2:	4b1b      	ldr	r3, [pc, #108]	; (4930 <system_init+0x174>)
    48c4:	4798      	blx	r3

	I2C_SHARED_init();
    48c6:	4b1b      	ldr	r3, [pc, #108]	; (4934 <system_init+0x178>)
    48c8:	4798      	blx	r3

	SPI_TEMP_init();
    48ca:	4b1b      	ldr	r3, [pc, #108]	; (4938 <system_init+0x17c>)
    48cc:	4798      	blx	r3

	I2C_EXPANDER_init();
    48ce:	4b1b      	ldr	r3, [pc, #108]	; (493c <system_init+0x180>)
    48d0:	4798      	blx	r3

	SPI_HI3593_init();
    48d2:	4b1b      	ldr	r3, [pc, #108]	; (4940 <system_init+0x184>)
    48d4:	4798      	blx	r3

	I2C_EEPROM_init();
    48d6:	4b1b      	ldr	r3, [pc, #108]	; (4944 <system_init+0x188>)
    48d8:	4798      	blx	r3

	TIMER_USB_init();
    48da:	4b1b      	ldr	r3, [pc, #108]	; (4948 <system_init+0x18c>)
    48dc:	4798      	blx	r3
	LIVE_PULSE_init();
    48de:	4b1b      	ldr	r3, [pc, #108]	; (494c <system_init+0x190>)
    48e0:	4798      	blx	r3

	TIMER_ARINC_init();
    48e2:	4b1b      	ldr	r3, [pc, #108]	; (4950 <system_init+0x194>)
    48e4:	4798      	blx	r3
	TIMER_HVAC_init();
    48e6:	4b1b      	ldr	r3, [pc, #108]	; (4954 <system_init+0x198>)
    48e8:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    48ea:	4b1b      	ldr	r3, [pc, #108]	; (4958 <system_init+0x19c>)
    48ec:	4798      	blx	r3
	TIMER_INTERFACE_init();
    48ee:	4b1b      	ldr	r3, [pc, #108]	; (495c <system_init+0x1a0>)
    48f0:	4798      	blx	r3
	TIMER_EVENT_init();
    48f2:	4b1b      	ldr	r3, [pc, #108]	; (4960 <system_init+0x1a4>)
    48f4:	4798      	blx	r3
	CDCUSB_init();
    48f6:	4b1b      	ldr	r3, [pc, #108]	; (4964 <system_init+0x1a8>)
    48f8:	4798      	blx	r3

	WATCHDOG_init();
    48fa:	4b1b      	ldr	r3, [pc, #108]	; (4968 <system_init+0x1ac>)
    48fc:	4798      	blx	r3
	CAN_CCU_init();
    48fe:	4b1b      	ldr	r3, [pc, #108]	; (496c <system_init+0x1b0>)
    4900:	4798      	blx	r3
}
    4902:	bf00      	nop
    4904:	bd80      	pop	{r7, pc}
    4906:	bf00      	nop
    4908:	00003d1d 	.word	0x00003d1d
    490c:	00003ce5 	.word	0x00003ce5
    4910:	00003cad 	.word	0x00003cad
    4914:	00003c8d 	.word	0x00003c8d
    4918:	00003c59 	.word	0x00003c59
    491c:	00003d7d 	.word	0x00003d7d
    4920:	00003da9 	.word	0x00003da9
    4924:	00003e69 	.word	0x00003e69
    4928:	00003fb1 	.word	0x00003fb1
    492c:	00003ff5 	.word	0x00003ff5
    4930:	000040b9 	.word	0x000040b9
    4934:	00004151 	.word	0x00004151
    4938:	0000421d 	.word	0x0000421d
    493c:	000042b5 	.word	0x000042b5
    4940:	00004381 	.word	0x00004381
    4944:	00004419 	.word	0x00004419
    4948:	00004445 	.word	0x00004445
    494c:	000044c5 	.word	0x000044c5
    4950:	000044fd 	.word	0x000044fd
    4954:	00004545 	.word	0x00004545
    4958:	0000458d 	.word	0x0000458d
    495c:	000045d5 	.word	0x000045d5
    4960:	0000461d 	.word	0x0000461d
    4964:	000046f9 	.word	0x000046f9
    4968:	00004731 	.word	0x00004731
    496c:	00004779 	.word	0x00004779

00004970 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    4970:	b480      	push	{r7}
    4972:	b085      	sub	sp, #20
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4978:	f3ef 8310 	mrs	r3, PRIMASK
    497c:	60fb      	str	r3, [r7, #12]
  return(result);
    497e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4984:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4986:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    498a:	bf00      	nop
    498c:	3714      	adds	r7, #20
    498e:	46bd      	mov	sp, r7
    4990:	f85d 7b04 	ldr.w	r7, [sp], #4
    4994:	4770      	bx	lr

00004996 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    4996:	b480      	push	{r7}
    4998:	b085      	sub	sp, #20
    499a:	af00      	add	r7, sp, #0
    499c:	6078      	str	r0, [r7, #4]
    499e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	681b      	ldr	r3, [r3, #0]
    49a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	f383 8810 	msr	PRIMASK, r3
}
    49ae:	bf00      	nop
    49b0:	3714      	adds	r7, #20
    49b2:	46bd      	mov	sp, r7
    49b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b8:	4770      	bx	lr

000049ba <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    49ba:	b480      	push	{r7}
    49bc:	b083      	sub	sp, #12
    49be:	af00      	add	r7, sp, #0
    49c0:	4603      	mov	r3, r0
    49c2:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    49c4:	88fb      	ldrh	r3, [r7, #6]
    49c6:	f003 0303 	and.w	r3, r3, #3
    49ca:	2b00      	cmp	r3, #0
    49cc:	d001      	beq.n	49d2 <leap_year+0x18>
		return false;
    49ce:	2300      	movs	r3, #0
    49d0:	e000      	b.n	49d4 <leap_year+0x1a>
	} else {
		return true;
    49d2:	2301      	movs	r3, #1
	}
}
    49d4:	4618      	mov	r0, r3
    49d6:	370c      	adds	r7, #12
    49d8:	46bd      	mov	sp, r7
    49da:	f85d 7b04 	ldr.w	r7, [sp], #4
    49de:	4770      	bx	lr

000049e0 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    49e0:	b580      	push	{r7, lr}
    49e2:	b084      	sub	sp, #16
    49e4:	af00      	add	r7, sp, #0
    49e6:	6078      	str	r0, [r7, #4]
    49e8:	460b      	mov	r3, r1
    49ea:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    49ec:	2300      	movs	r3, #0
    49ee:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	b29b      	uxth	r3, r3
    49f4:	4618      	mov	r0, r3
    49f6:	4b2f      	ldr	r3, [pc, #188]	; (4ab4 <get_secs_in_month+0xd4>)
    49f8:	4798      	blx	r3
    49fa:	4603      	mov	r3, r0
    49fc:	2b00      	cmp	r3, #0
    49fe:	d028      	beq.n	4a52 <get_secs_in_month+0x72>
		switch (month) {
    4a00:	78fb      	ldrb	r3, [r7, #3]
    4a02:	3b01      	subs	r3, #1
    4a04:	2b0b      	cmp	r3, #11
    4a06:	d84c      	bhi.n	4aa2 <get_secs_in_month+0xc2>
    4a08:	a201      	add	r2, pc, #4	; (adr r2, 4a10 <get_secs_in_month+0x30>)
    4a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4a0e:	bf00      	nop
    4a10:	00004a41 	.word	0x00004a41
    4a14:	00004a47 	.word	0x00004a47
    4a18:	00004a41 	.word	0x00004a41
    4a1c:	00004a4d 	.word	0x00004a4d
    4a20:	00004a41 	.word	0x00004a41
    4a24:	00004a4d 	.word	0x00004a4d
    4a28:	00004a41 	.word	0x00004a41
    4a2c:	00004a41 	.word	0x00004a41
    4a30:	00004a4d 	.word	0x00004a4d
    4a34:	00004a41 	.word	0x00004a41
    4a38:	00004a4d 	.word	0x00004a4d
    4a3c:	00004a41 	.word	0x00004a41
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4a40:	4b1d      	ldr	r3, [pc, #116]	; (4ab8 <get_secs_in_month+0xd8>)
    4a42:	60fb      	str	r3, [r7, #12]
			break;
    4a44:	e030      	b.n	4aa8 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    4a46:	4b1d      	ldr	r3, [pc, #116]	; (4abc <get_secs_in_month+0xdc>)
    4a48:	60fb      	str	r3, [r7, #12]
			break;
    4a4a:	e02d      	b.n	4aa8 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4a4c:	4b1c      	ldr	r3, [pc, #112]	; (4ac0 <get_secs_in_month+0xe0>)
    4a4e:	60fb      	str	r3, [r7, #12]
			break;
    4a50:	e02a      	b.n	4aa8 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    4a52:	78fb      	ldrb	r3, [r7, #3]
    4a54:	3b01      	subs	r3, #1
    4a56:	2b0b      	cmp	r3, #11
    4a58:	d825      	bhi.n	4aa6 <get_secs_in_month+0xc6>
    4a5a:	a201      	add	r2, pc, #4	; (adr r2, 4a60 <get_secs_in_month+0x80>)
    4a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4a60:	00004a91 	.word	0x00004a91
    4a64:	00004a97 	.word	0x00004a97
    4a68:	00004a91 	.word	0x00004a91
    4a6c:	00004a9d 	.word	0x00004a9d
    4a70:	00004a91 	.word	0x00004a91
    4a74:	00004a9d 	.word	0x00004a9d
    4a78:	00004a91 	.word	0x00004a91
    4a7c:	00004a91 	.word	0x00004a91
    4a80:	00004a9d 	.word	0x00004a9d
    4a84:	00004a91 	.word	0x00004a91
    4a88:	00004a9d 	.word	0x00004a9d
    4a8c:	00004a91 	.word	0x00004a91
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4a90:	4b09      	ldr	r3, [pc, #36]	; (4ab8 <get_secs_in_month+0xd8>)
    4a92:	60fb      	str	r3, [r7, #12]
			break;
    4a94:	e008      	b.n	4aa8 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    4a96:	4b0b      	ldr	r3, [pc, #44]	; (4ac4 <get_secs_in_month+0xe4>)
    4a98:	60fb      	str	r3, [r7, #12]
			break;
    4a9a:	e005      	b.n	4aa8 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4a9c:	4b08      	ldr	r3, [pc, #32]	; (4ac0 <get_secs_in_month+0xe0>)
    4a9e:	60fb      	str	r3, [r7, #12]
			break;
    4aa0:	e002      	b.n	4aa8 <get_secs_in_month+0xc8>
			break;
    4aa2:	bf00      	nop
    4aa4:	e000      	b.n	4aa8 <get_secs_in_month+0xc8>
		default:
			break;
    4aa6:	bf00      	nop
		}
	}

	return sec_in_month;
    4aa8:	68fb      	ldr	r3, [r7, #12]
}
    4aaa:	4618      	mov	r0, r3
    4aac:	3710      	adds	r7, #16
    4aae:	46bd      	mov	sp, r7
    4ab0:	bd80      	pop	{r7, pc}
    4ab2:	bf00      	nop
    4ab4:	000049bb 	.word	0x000049bb
    4ab8:	0028de80 	.word	0x0028de80
    4abc:	00263b80 	.word	0x00263b80
    4ac0:	00278d00 	.word	0x00278d00
    4ac4:	0024ea00 	.word	0x0024ea00

00004ac8 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    4ac8:	b580      	push	{r7, lr}
    4aca:	b08a      	sub	sp, #40	; 0x28
    4acc:	af00      	add	r7, sp, #0
    4ace:	60f8      	str	r0, [r7, #12]
    4ad0:	60b9      	str	r1, [r7, #8]
    4ad2:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    4ad4:	68fb      	ldr	r3, [r7, #12]
    4ad6:	699b      	ldr	r3, [r3, #24]
    4ad8:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    4ada:	2301      	movs	r3, #1
    4adc:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    4ade:	2301      	movs	r3, #1
    4ae0:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    4ae2:	2300      	movs	r3, #0
    4ae4:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    4ae6:	2300      	movs	r3, #0
    4ae8:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    4aea:	68bb      	ldr	r3, [r7, #8]
    4aec:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    4aee:	6a3b      	ldr	r3, [r7, #32]
    4af0:	b29b      	uxth	r3, r3
    4af2:	4618      	mov	r0, r3
    4af4:	4b32      	ldr	r3, [pc, #200]	; (4bc0 <convert_timestamp_to_datetime+0xf8>)
    4af6:	4798      	blx	r3
    4af8:	4603      	mov	r3, r0
    4afa:	2b00      	cmp	r3, #0
    4afc:	d001      	beq.n	4b02 <convert_timestamp_to_datetime+0x3a>
    4afe:	4b31      	ldr	r3, [pc, #196]	; (4bc4 <convert_timestamp_to_datetime+0xfc>)
    4b00:	e000      	b.n	4b04 <convert_timestamp_to_datetime+0x3c>
    4b02:	4b31      	ldr	r3, [pc, #196]	; (4bc8 <convert_timestamp_to_datetime+0x100>)
    4b04:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    4b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4b08:	69bb      	ldr	r3, [r7, #24]
    4b0a:	429a      	cmp	r2, r3
    4b0c:	d307      	bcc.n	4b1e <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    4b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4b10:	69bb      	ldr	r3, [r7, #24]
    4b12:	1ad3      	subs	r3, r2, r3
    4b14:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    4b16:	6a3b      	ldr	r3, [r7, #32]
    4b18:	3301      	adds	r3, #1
    4b1a:	623b      	str	r3, [r7, #32]
    4b1c:	e7e7      	b.n	4aee <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    4b1e:	7ffb      	ldrb	r3, [r7, #31]
    4b20:	4619      	mov	r1, r3
    4b22:	6a38      	ldr	r0, [r7, #32]
    4b24:	4b29      	ldr	r3, [pc, #164]	; (4bcc <convert_timestamp_to_datetime+0x104>)
    4b26:	4798      	blx	r3
    4b28:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    4b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4b2c:	697b      	ldr	r3, [r7, #20]
    4b2e:	429a      	cmp	r2, r3
    4b30:	d307      	bcc.n	4b42 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    4b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4b34:	697b      	ldr	r3, [r7, #20]
    4b36:	1ad3      	subs	r3, r2, r3
    4b38:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    4b3a:	7ffb      	ldrb	r3, [r7, #31]
    4b3c:	3301      	adds	r3, #1
    4b3e:	77fb      	strb	r3, [r7, #31]
    4b40:	e7ed      	b.n	4b1e <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    4b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b44:	4a22      	ldr	r2, [pc, #136]	; (4bd0 <convert_timestamp_to_datetime+0x108>)
    4b46:	4293      	cmp	r3, r2
    4b48:	d909      	bls.n	4b5e <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    4b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b4c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    4b50:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    4b54:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    4b56:	7fbb      	ldrb	r3, [r7, #30]
    4b58:	3301      	adds	r3, #1
    4b5a:	77bb      	strb	r3, [r7, #30]
    4b5c:	e7f1      	b.n	4b42 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    4b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b60:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    4b64:	d307      	bcc.n	4b76 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    4b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b68:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    4b6c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    4b6e:	7f7b      	ldrb	r3, [r7, #29]
    4b70:	3301      	adds	r3, #1
    4b72:	777b      	strb	r3, [r7, #29]
    4b74:	e7f3      	b.n	4b5e <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    4b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b78:	2b3b      	cmp	r3, #59	; 0x3b
    4b7a:	d906      	bls.n	4b8a <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    4b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b7e:	3b3c      	subs	r3, #60	; 0x3c
    4b80:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    4b82:	7f3b      	ldrb	r3, [r7, #28]
    4b84:	3301      	adds	r3, #1
    4b86:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    4b88:	e7f5      	b.n	4b76 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    4b8a:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    4b8c:	6a3b      	ldr	r3, [r7, #32]
    4b8e:	b29a      	uxth	r2, r3
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    4b94:	687b      	ldr	r3, [r7, #4]
    4b96:	7ffa      	ldrb	r2, [r7, #31]
    4b98:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    4b9a:	687b      	ldr	r3, [r7, #4]
    4b9c:	7fba      	ldrb	r2, [r7, #30]
    4b9e:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    4ba0:	687b      	ldr	r3, [r7, #4]
    4ba2:	7f7a      	ldrb	r2, [r7, #29]
    4ba4:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    4ba6:	687b      	ldr	r3, [r7, #4]
    4ba8:	7f3a      	ldrb	r2, [r7, #28]
    4baa:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    4bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4bae:	b2da      	uxtb	r2, r3
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    4bb4:	2300      	movs	r3, #0
}
    4bb6:	4618      	mov	r0, r3
    4bb8:	3728      	adds	r7, #40	; 0x28
    4bba:	46bd      	mov	sp, r7
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	bf00      	nop
    4bc0:	000049bb 	.word	0x000049bb
    4bc4:	01e28500 	.word	0x01e28500
    4bc8:	01e13380 	.word	0x01e13380
    4bcc:	000049e1 	.word	0x000049e1
    4bd0:	0001517f 	.word	0x0001517f

00004bd4 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    4bd4:	b580      	push	{r7, lr}
    4bd6:	b084      	sub	sp, #16
    4bd8:	af00      	add	r7, sp, #0
    4bda:	6078      	str	r0, [r7, #4]
    4bdc:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    4bde:	2300      	movs	r3, #0
    4be0:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	2b00      	cmp	r3, #0
    4be6:	bf14      	ite	ne
    4be8:	2301      	movne	r3, #1
    4bea:	2300      	moveq	r3, #0
    4bec:	b2db      	uxtb	r3, r3
    4bee:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4bf2:	4911      	ldr	r1, [pc, #68]	; (4c38 <calendar_init+0x64>)
    4bf4:	4618      	mov	r0, r3
    4bf6:	4b11      	ldr	r3, [pc, #68]	; (4c3c <calendar_init+0x68>)
    4bf8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	681a      	ldr	r2, [r3, #0]
    4bfe:	683b      	ldr	r3, [r7, #0]
    4c00:	429a      	cmp	r2, r3
    4c02:	d101      	bne.n	4c08 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4c04:	2300      	movs	r3, #0
    4c06:	e013      	b.n	4c30 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	681b      	ldr	r3, [r3, #0]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d002      	beq.n	4c16 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    4c10:	f06f 0311 	mvn.w	r3, #17
    4c14:	e00c      	b.n	4c30 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	683a      	ldr	r2, [r7, #0]
    4c1a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	4618      	mov	r0, r3
    4c20:	4b07      	ldr	r3, [pc, #28]	; (4c40 <calendar_init+0x6c>)
    4c22:	4798      	blx	r3
    4c24:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    4c26:	687b      	ldr	r3, [r7, #4]
    4c28:	f240 72b2 	movw	r2, #1970	; 0x7b2
    4c2c:	619a      	str	r2, [r3, #24]

	return ret;
    4c2e:	68fb      	ldr	r3, [r7, #12]
}
    4c30:	4618      	mov	r0, r3
    4c32:	3710      	adds	r7, #16
    4c34:	46bd      	mov	sp, r7
    4c36:	bd80      	pop	{r7, pc}
    4c38:	00013a3c 	.word	0x00013a3c
    4c3c:	00006a41 	.word	0x00006a41
    4c40:	00008d81 	.word	0x00008d81

00004c44 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    4c44:	b580      	push	{r7, lr}
    4c46:	b084      	sub	sp, #16
    4c48:	af00      	add	r7, sp, #0
    4c4a:	6078      	str	r0, [r7, #4]
    4c4c:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	2b00      	cmp	r3, #0
    4c52:	bf14      	ite	ne
    4c54:	2301      	movne	r3, #1
    4c56:	2300      	moveq	r3, #0
    4c58:	b2db      	uxtb	r3, r3
    4c5a:	f240 223b 	movw	r2, #571	; 0x23b
    4c5e:	4909      	ldr	r1, [pc, #36]	; (4c84 <calendar_get_date_time+0x40>)
    4c60:	4618      	mov	r0, r3
    4c62:	4b09      	ldr	r3, [pc, #36]	; (4c88 <calendar_get_date_time+0x44>)
    4c64:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	4618      	mov	r0, r3
    4c6a:	4b08      	ldr	r3, [pc, #32]	; (4c8c <calendar_get_date_time+0x48>)
    4c6c:	4798      	blx	r3
    4c6e:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    4c70:	683a      	ldr	r2, [r7, #0]
    4c72:	68f9      	ldr	r1, [r7, #12]
    4c74:	6878      	ldr	r0, [r7, #4]
    4c76:	4b06      	ldr	r3, [pc, #24]	; (4c90 <calendar_get_date_time+0x4c>)
    4c78:	4798      	blx	r3

	return ERR_NONE;
    4c7a:	2300      	movs	r3, #0
}
    4c7c:	4618      	mov	r0, r3
    4c7e:	3710      	adds	r7, #16
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	00013a3c 	.word	0x00013a3c
    4c88:	00006a41 	.word	0x00006a41
    4c8c:	00008e39 	.word	0x00008e39
    4c90:	00004ac9 	.word	0x00004ac9

00004c94 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    4c94:	b580      	push	{r7, lr}
    4c96:	b084      	sub	sp, #16
    4c98:	af00      	add	r7, sp, #0
    4c9a:	6078      	str	r0, [r7, #4]
    4c9c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    4c9e:	687b      	ldr	r3, [r7, #4]
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d004      	beq.n	4cae <can_async_init+0x1a>
    4ca4:	683b      	ldr	r3, [r7, #0]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d001      	beq.n	4cae <can_async_init+0x1a>
    4caa:	2301      	movs	r3, #1
    4cac:	e000      	b.n	4cb0 <can_async_init+0x1c>
    4cae:	2300      	movs	r3, #0
    4cb0:	f003 0301 	and.w	r3, r3, #1
    4cb4:	b2db      	uxtb	r3, r3
    4cb6:	2241      	movs	r2, #65	; 0x41
    4cb8:	490e      	ldr	r1, [pc, #56]	; (4cf4 <can_async_init+0x60>)
    4cba:	4618      	mov	r0, r3
    4cbc:	4b0e      	ldr	r3, [pc, #56]	; (4cf8 <can_async_init+0x64>)
    4cbe:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	6839      	ldr	r1, [r7, #0]
    4cc4:	4618      	mov	r0, r3
    4cc6:	4b0d      	ldr	r3, [pc, #52]	; (4cfc <can_async_init+0x68>)
    4cc8:	4798      	blx	r3
    4cca:	60f8      	str	r0, [r7, #12]
	if (rc) {
    4ccc:	68fb      	ldr	r3, [r7, #12]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d001      	beq.n	4cd6 <can_async_init+0x42>
		return rc;
    4cd2:	68fb      	ldr	r3, [r7, #12]
    4cd4:	e009      	b.n	4cea <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	4a09      	ldr	r2, [pc, #36]	; (4d00 <can_async_init+0x6c>)
    4cda:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	4a09      	ldr	r2, [pc, #36]	; (4d04 <can_async_init+0x70>)
    4ce0:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	4a08      	ldr	r2, [pc, #32]	; (4d08 <can_async_init+0x74>)
    4ce6:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    4ce8:	2300      	movs	r3, #0
}
    4cea:	4618      	mov	r0, r3
    4cec:	3710      	adds	r7, #16
    4cee:	46bd      	mov	sp, r7
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	bf00      	nop
    4cf4:	00013a58 	.word	0x00013a58
    4cf8:	00006a41 	.word	0x00006a41
    4cfc:	00006f9d 	.word	0x00006f9d
    4d00:	00004d0d 	.word	0x00004d0d
    4d04:	00004d31 	.word	0x00004d31
    4d08:	00004d55 	.word	0x00004d55

00004d0c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    4d0c:	b580      	push	{r7, lr}
    4d0e:	b084      	sub	sp, #16
    4d10:	af00      	add	r7, sp, #0
    4d12:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4d14:	687b      	ldr	r3, [r7, #4]
    4d16:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    4d18:	68fb      	ldr	r3, [r7, #12]
    4d1a:	69db      	ldr	r3, [r3, #28]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d003      	beq.n	4d28 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    4d20:	68fb      	ldr	r3, [r7, #12]
    4d22:	69db      	ldr	r3, [r3, #28]
    4d24:	68f8      	ldr	r0, [r7, #12]
    4d26:	4798      	blx	r3
	}
}
    4d28:	bf00      	nop
    4d2a:	3710      	adds	r7, #16
    4d2c:	46bd      	mov	sp, r7
    4d2e:	bd80      	pop	{r7, pc}

00004d30 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b084      	sub	sp, #16
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    4d3c:	68fb      	ldr	r3, [r7, #12]
    4d3e:	6a1b      	ldr	r3, [r3, #32]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d003      	beq.n	4d4c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	6a1b      	ldr	r3, [r3, #32]
    4d48:	68f8      	ldr	r0, [r7, #12]
    4d4a:	4798      	blx	r3
	}
}
    4d4c:	bf00      	nop
    4d4e:	3710      	adds	r7, #16
    4d50:	46bd      	mov	sp, r7
    4d52:	bd80      	pop	{r7, pc}

00004d54 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    4d54:	b580      	push	{r7, lr}
    4d56:	b084      	sub	sp, #16
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    4d64:	68fb      	ldr	r3, [r7, #12]
    4d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d005      	beq.n	4d78 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    4d6c:	68fb      	ldr	r3, [r7, #12]
    4d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d70:	78fa      	ldrb	r2, [r7, #3]
    4d72:	4611      	mov	r1, r2
    4d74:	68f8      	ldr	r0, [r7, #12]
    4d76:	4798      	blx	r3
	}
}
    4d78:	bf00      	nop
    4d7a:	3710      	adds	r7, #16
    4d7c:	46bd      	mov	sp, r7
    4d7e:	bd80      	pop	{r7, pc}

00004d80 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    4d80:	b580      	push	{r7, lr}
    4d82:	b082      	sub	sp, #8
    4d84:	af00      	add	r7, sp, #0
    4d86:	6078      	str	r0, [r7, #4]
    4d88:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d004      	beq.n	4d9a <crc_sync_init+0x1a>
    4d90:	683b      	ldr	r3, [r7, #0]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d001      	beq.n	4d9a <crc_sync_init+0x1a>
    4d96:	2301      	movs	r3, #1
    4d98:	e000      	b.n	4d9c <crc_sync_init+0x1c>
    4d9a:	2300      	movs	r3, #0
    4d9c:	f003 0301 	and.w	r3, r3, #1
    4da0:	b2db      	uxtb	r3, r3
    4da2:	222b      	movs	r2, #43	; 0x2b
    4da4:	4906      	ldr	r1, [pc, #24]	; (4dc0 <crc_sync_init+0x40>)
    4da6:	4618      	mov	r0, r3
    4da8:	4b06      	ldr	r3, [pc, #24]	; (4dc4 <crc_sync_init+0x44>)
    4daa:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	6839      	ldr	r1, [r7, #0]
    4db0:	4618      	mov	r0, r3
    4db2:	4b05      	ldr	r3, [pc, #20]	; (4dc8 <crc_sync_init+0x48>)
    4db4:	4798      	blx	r3
    4db6:	4603      	mov	r3, r0
}
    4db8:	4618      	mov	r0, r3
    4dba:	3708      	adds	r7, #8
    4dbc:	46bd      	mov	sp, r7
    4dbe:	bd80      	pop	{r7, pc}
    4dc0:	00013a74 	.word	0x00013a74
    4dc4:	00006a41 	.word	0x00006a41
    4dc8:	000076a1 	.word	0x000076a1

00004dcc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4dcc:	b590      	push	{r4, r7, lr}
    4dce:	b083      	sub	sp, #12
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	4603      	mov	r3, r0
    4dd4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    4dd6:	4b07      	ldr	r3, [pc, #28]	; (4df4 <delay_us+0x28>)
    4dd8:	681c      	ldr	r4, [r3, #0]
    4dda:	88fb      	ldrh	r3, [r7, #6]
    4ddc:	4618      	mov	r0, r3
    4dde:	4b06      	ldr	r3, [pc, #24]	; (4df8 <delay_us+0x2c>)
    4de0:	4798      	blx	r3
    4de2:	4603      	mov	r3, r0
    4de4:	4619      	mov	r1, r3
    4de6:	4620      	mov	r0, r4
    4de8:	4b04      	ldr	r3, [pc, #16]	; (4dfc <delay_us+0x30>)
    4dea:	4798      	blx	r3
}
    4dec:	bf00      	nop
    4dee:	370c      	adds	r7, #12
    4df0:	46bd      	mov	sp, r7
    4df2:	bd90      	pop	{r4, r7, pc}
    4df4:	200018c8 	.word	0x200018c8
    4df8:	000073f5 	.word	0x000073f5
    4dfc:	00007589 	.word	0x00007589

00004e00 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4e00:	b590      	push	{r4, r7, lr}
    4e02:	b083      	sub	sp, #12
    4e04:	af00      	add	r7, sp, #0
    4e06:	4603      	mov	r3, r0
    4e08:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    4e0a:	4b07      	ldr	r3, [pc, #28]	; (4e28 <delay_ms+0x28>)
    4e0c:	681c      	ldr	r4, [r3, #0]
    4e0e:	88fb      	ldrh	r3, [r7, #6]
    4e10:	4618      	mov	r0, r3
    4e12:	4b06      	ldr	r3, [pc, #24]	; (4e2c <delay_ms+0x2c>)
    4e14:	4798      	blx	r3
    4e16:	4603      	mov	r3, r0
    4e18:	4619      	mov	r1, r3
    4e1a:	4620      	mov	r0, r4
    4e1c:	4b04      	ldr	r3, [pc, #16]	; (4e30 <delay_ms+0x30>)
    4e1e:	4798      	blx	r3
}
    4e20:	bf00      	nop
    4e22:	370c      	adds	r7, #12
    4e24:	46bd      	mov	sp, r7
    4e26:	bd90      	pop	{r4, r7, pc}
    4e28:	200018c8 	.word	0x200018c8
    4e2c:	00007561 	.word	0x00007561
    4e30:	00007589 	.word	0x00007589

00004e34 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4e34:	b580      	push	{r7, lr}
    4e36:	af00      	add	r7, sp, #0
	return _event_system_init();
    4e38:	4b02      	ldr	r3, [pc, #8]	; (4e44 <event_system_init+0x10>)
    4e3a:	4798      	blx	r3
    4e3c:	4603      	mov	r3, r0
}
    4e3e:	4618      	mov	r0, r3
    4e40:	bd80      	pop	{r7, pc}
    4e42:	bf00      	nop
    4e44:	00007dd5 	.word	0x00007dd5

00004e48 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    4e48:	b580      	push	{r7, lr}
    4e4a:	b082      	sub	sp, #8
    4e4c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4e4e:	2300      	movs	r3, #0
    4e50:	80fb      	strh	r3, [r7, #6]
    4e52:	e00e      	b.n	4e72 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    4e54:	88fb      	ldrh	r3, [r7, #6]
    4e56:	4a0c      	ldr	r2, [pc, #48]	; (4e88 <ext_irq_init+0x40>)
    4e58:	00db      	lsls	r3, r3, #3
    4e5a:	4413      	add	r3, r2
    4e5c:	f04f 32ff 	mov.w	r2, #4294967295
    4e60:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    4e62:	88fb      	ldrh	r3, [r7, #6]
    4e64:	4a08      	ldr	r2, [pc, #32]	; (4e88 <ext_irq_init+0x40>)
    4e66:	2100      	movs	r1, #0
    4e68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4e6c:	88fb      	ldrh	r3, [r7, #6]
    4e6e:	3301      	adds	r3, #1
    4e70:	80fb      	strh	r3, [r7, #6]
    4e72:	88fb      	ldrh	r3, [r7, #6]
    4e74:	2b04      	cmp	r3, #4
    4e76:	d9ed      	bls.n	4e54 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    4e78:	4804      	ldr	r0, [pc, #16]	; (4e8c <ext_irq_init+0x44>)
    4e7a:	4b05      	ldr	r3, [pc, #20]	; (4e90 <ext_irq_init+0x48>)
    4e7c:	4798      	blx	r3
    4e7e:	4603      	mov	r3, r0
}
    4e80:	4618      	mov	r0, r3
    4e82:	3708      	adds	r7, #8
    4e84:	46bd      	mov	sp, r7
    4e86:	bd80      	pop	{r7, pc}
    4e88:	200018cc 	.word	0x200018cc
    4e8c:	00004fed 	.word	0x00004fed
    4e90:	000079e1 	.word	0x000079e1

00004e94 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    4e94:	b580      	push	{r7, lr}
    4e96:	b086      	sub	sp, #24
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
    4e9c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    4e9e:	2300      	movs	r3, #0
    4ea0:	75fb      	strb	r3, [r7, #23]
    4ea2:	2300      	movs	r3, #0
    4ea4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    4ea6:	2300      	movs	r3, #0
    4ea8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    4eaa:	e012      	b.n	4ed2 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    4eac:	7dfb      	ldrb	r3, [r7, #23]
    4eae:	4a4d      	ldr	r2, [pc, #308]	; (4fe4 <ext_irq_register+0x150>)
    4eb0:	00db      	lsls	r3, r3, #3
    4eb2:	4413      	add	r3, r2
    4eb4:	685a      	ldr	r2, [r3, #4]
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	429a      	cmp	r2, r3
    4eba:	d107      	bne.n	4ecc <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    4ebc:	7dfb      	ldrb	r3, [r7, #23]
    4ebe:	4949      	ldr	r1, [pc, #292]	; (4fe4 <ext_irq_register+0x150>)
    4ec0:	683a      	ldr	r2, [r7, #0]
    4ec2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    4ec6:	2301      	movs	r3, #1
    4ec8:	757b      	strb	r3, [r7, #21]
			break;
    4eca:	e005      	b.n	4ed8 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    4ecc:	7dfb      	ldrb	r3, [r7, #23]
    4ece:	3301      	adds	r3, #1
    4ed0:	75fb      	strb	r3, [r7, #23]
    4ed2:	7dfb      	ldrb	r3, [r7, #23]
    4ed4:	2b04      	cmp	r3, #4
    4ed6:	d9e9      	bls.n	4eac <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    4ed8:	683b      	ldr	r3, [r7, #0]
    4eda:	2b00      	cmp	r3, #0
    4edc:	d10e      	bne.n	4efc <ext_irq_register+0x68>
		if (!found) {
    4ede:	7d7b      	ldrb	r3, [r7, #21]
    4ee0:	f083 0301 	eor.w	r3, r3, #1
    4ee4:	b2db      	uxtb	r3, r3
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d002      	beq.n	4ef0 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    4eea:	f06f 030c 	mvn.w	r3, #12
    4eee:	e074      	b.n	4fda <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    4ef0:	2100      	movs	r1, #0
    4ef2:	6878      	ldr	r0, [r7, #4]
    4ef4:	4b3c      	ldr	r3, [pc, #240]	; (4fe8 <ext_irq_register+0x154>)
    4ef6:	4798      	blx	r3
    4ef8:	4603      	mov	r3, r0
    4efa:	e06e      	b.n	4fda <ext_irq_register+0x146>
	}

	if (!found) {
    4efc:	7d7b      	ldrb	r3, [r7, #21]
    4efe:	f083 0301 	eor.w	r3, r3, #1
    4f02:	b2db      	uxtb	r3, r3
    4f04:	2b00      	cmp	r3, #0
    4f06:	d05a      	beq.n	4fbe <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4f08:	2300      	movs	r3, #0
    4f0a:	75fb      	strb	r3, [r7, #23]
    4f0c:	e016      	b.n	4f3c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    4f0e:	7dfb      	ldrb	r3, [r7, #23]
    4f10:	4a34      	ldr	r2, [pc, #208]	; (4fe4 <ext_irq_register+0x150>)
    4f12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4f16:	2b00      	cmp	r3, #0
    4f18:	d10d      	bne.n	4f36 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    4f1a:	7dfb      	ldrb	r3, [r7, #23]
    4f1c:	4931      	ldr	r1, [pc, #196]	; (4fe4 <ext_irq_register+0x150>)
    4f1e:	683a      	ldr	r2, [r7, #0]
    4f20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    4f24:	7dfb      	ldrb	r3, [r7, #23]
    4f26:	4a2f      	ldr	r2, [pc, #188]	; (4fe4 <ext_irq_register+0x150>)
    4f28:	00db      	lsls	r3, r3, #3
    4f2a:	4413      	add	r3, r2
    4f2c:	687a      	ldr	r2, [r7, #4]
    4f2e:	605a      	str	r2, [r3, #4]
				found           = true;
    4f30:	2301      	movs	r3, #1
    4f32:	757b      	strb	r3, [r7, #21]
				break;
    4f34:	e005      	b.n	4f42 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4f36:	7dfb      	ldrb	r3, [r7, #23]
    4f38:	3301      	adds	r3, #1
    4f3a:	75fb      	strb	r3, [r7, #23]
    4f3c:	7dfb      	ldrb	r3, [r7, #23]
    4f3e:	2b04      	cmp	r3, #4
    4f40:	d9e5      	bls.n	4f0e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4f42:	e036      	b.n	4fb2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    4f44:	7dfb      	ldrb	r3, [r7, #23]
    4f46:	4a27      	ldr	r2, [pc, #156]	; (4fe4 <ext_irq_register+0x150>)
    4f48:	00db      	lsls	r3, r3, #3
    4f4a:	4413      	add	r3, r2
    4f4c:	685a      	ldr	r2, [r3, #4]
    4f4e:	7dbb      	ldrb	r3, [r7, #22]
    4f50:	4924      	ldr	r1, [pc, #144]	; (4fe4 <ext_irq_register+0x150>)
    4f52:	00db      	lsls	r3, r3, #3
    4f54:	440b      	add	r3, r1
    4f56:	685b      	ldr	r3, [r3, #4]
    4f58:	429a      	cmp	r2, r3
    4f5a:	d227      	bcs.n	4fac <ext_irq_register+0x118>
    4f5c:	7dbb      	ldrb	r3, [r7, #22]
    4f5e:	4a21      	ldr	r2, [pc, #132]	; (4fe4 <ext_irq_register+0x150>)
    4f60:	00db      	lsls	r3, r3, #3
    4f62:	4413      	add	r3, r2
    4f64:	685b      	ldr	r3, [r3, #4]
    4f66:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f6a:	d01f      	beq.n	4fac <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    4f6c:	7dbb      	ldrb	r3, [r7, #22]
    4f6e:	491d      	ldr	r1, [pc, #116]	; (4fe4 <ext_irq_register+0x150>)
    4f70:	f107 020c 	add.w	r2, r7, #12
    4f74:	00db      	lsls	r3, r3, #3
    4f76:	440b      	add	r3, r1
    4f78:	e893 0003 	ldmia.w	r3, {r0, r1}
    4f7c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    4f80:	7dbb      	ldrb	r3, [r7, #22]
    4f82:	7dfa      	ldrb	r2, [r7, #23]
    4f84:	4817      	ldr	r0, [pc, #92]	; (4fe4 <ext_irq_register+0x150>)
    4f86:	4917      	ldr	r1, [pc, #92]	; (4fe4 <ext_irq_register+0x150>)
    4f88:	00db      	lsls	r3, r3, #3
    4f8a:	4403      	add	r3, r0
    4f8c:	00d2      	lsls	r2, r2, #3
    4f8e:	440a      	add	r2, r1
    4f90:	e892 0003 	ldmia.w	r2, {r0, r1}
    4f94:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    4f98:	7dfb      	ldrb	r3, [r7, #23]
    4f9a:	4a12      	ldr	r2, [pc, #72]	; (4fe4 <ext_irq_register+0x150>)
    4f9c:	00db      	lsls	r3, r3, #3
    4f9e:	4413      	add	r3, r2
    4fa0:	f107 020c 	add.w	r2, r7, #12
    4fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
    4fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4fac:	7dbb      	ldrb	r3, [r7, #22]
    4fae:	3301      	adds	r3, #1
    4fb0:	75bb      	strb	r3, [r7, #22]
    4fb2:	7dbb      	ldrb	r3, [r7, #22]
    4fb4:	2b04      	cmp	r3, #4
    4fb6:	d802      	bhi.n	4fbe <ext_irq_register+0x12a>
    4fb8:	7dfb      	ldrb	r3, [r7, #23]
    4fba:	2b04      	cmp	r3, #4
    4fbc:	d9c2      	bls.n	4f44 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    4fbe:	7d7b      	ldrb	r3, [r7, #21]
    4fc0:	f083 0301 	eor.w	r3, r3, #1
    4fc4:	b2db      	uxtb	r3, r3
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d002      	beq.n	4fd0 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    4fca:	f06f 030c 	mvn.w	r3, #12
    4fce:	e004      	b.n	4fda <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    4fd0:	2101      	movs	r1, #1
    4fd2:	6878      	ldr	r0, [r7, #4]
    4fd4:	4b04      	ldr	r3, [pc, #16]	; (4fe8 <ext_irq_register+0x154>)
    4fd6:	4798      	blx	r3
    4fd8:	4603      	mov	r3, r0
}
    4fda:	4618      	mov	r0, r3
    4fdc:	3718      	adds	r7, #24
    4fde:	46bd      	mov	sp, r7
    4fe0:	bd80      	pop	{r7, pc}
    4fe2:	bf00      	nop
    4fe4:	200018cc 	.word	0x200018cc
    4fe8:	00007b2d 	.word	0x00007b2d

00004fec <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    4fec:	b580      	push	{r7, lr}
    4fee:	b084      	sub	sp, #16
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4ff4:	2300      	movs	r3, #0
    4ff6:	73fb      	strb	r3, [r7, #15]
    4ff8:	2305      	movs	r3, #5
    4ffa:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    4ffc:	e02a      	b.n	5054 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    4ffe:	7bba      	ldrb	r2, [r7, #14]
    5000:	7bfb      	ldrb	r3, [r7, #15]
    5002:	4413      	add	r3, r2
    5004:	105b      	asrs	r3, r3, #1
    5006:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    5008:	7b7b      	ldrb	r3, [r7, #13]
    500a:	2b04      	cmp	r3, #4
    500c:	d827      	bhi.n	505e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    500e:	7b7b      	ldrb	r3, [r7, #13]
    5010:	4a16      	ldr	r2, [pc, #88]	; (506c <process_ext_irq+0x80>)
    5012:	00db      	lsls	r3, r3, #3
    5014:	4413      	add	r3, r2
    5016:	685a      	ldr	r2, [r3, #4]
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	429a      	cmp	r2, r3
    501c:	d10b      	bne.n	5036 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    501e:	7b7b      	ldrb	r3, [r7, #13]
    5020:	4a12      	ldr	r2, [pc, #72]	; (506c <process_ext_irq+0x80>)
    5022:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5026:	2b00      	cmp	r3, #0
    5028:	d01b      	beq.n	5062 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    502a:	7b7b      	ldrb	r3, [r7, #13]
    502c:	4a0f      	ldr	r2, [pc, #60]	; (506c <process_ext_irq+0x80>)
    502e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5032:	4798      	blx	r3
			}
			return;
    5034:	e015      	b.n	5062 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    5036:	7b7b      	ldrb	r3, [r7, #13]
    5038:	4a0c      	ldr	r2, [pc, #48]	; (506c <process_ext_irq+0x80>)
    503a:	00db      	lsls	r3, r3, #3
    503c:	4413      	add	r3, r2
    503e:	685a      	ldr	r2, [r3, #4]
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	429a      	cmp	r2, r3
    5044:	d203      	bcs.n	504e <process_ext_irq+0x62>
			lower = middle + 1;
    5046:	7b7b      	ldrb	r3, [r7, #13]
    5048:	3301      	adds	r3, #1
    504a:	73fb      	strb	r3, [r7, #15]
    504c:	e002      	b.n	5054 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    504e:	7b7b      	ldrb	r3, [r7, #13]
    5050:	3b01      	subs	r3, #1
    5052:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    5054:	7bba      	ldrb	r2, [r7, #14]
    5056:	7bfb      	ldrb	r3, [r7, #15]
    5058:	429a      	cmp	r2, r3
    505a:	d2d0      	bcs.n	4ffe <process_ext_irq+0x12>
    505c:	e002      	b.n	5064 <process_ext_irq+0x78>
			return;
    505e:	bf00      	nop
    5060:	e000      	b.n	5064 <process_ext_irq+0x78>
			return;
    5062:	bf00      	nop
		}
	}
}
    5064:	3710      	adds	r7, #16
    5066:	46bd      	mov	sp, r7
    5068:	bd80      	pop	{r7, pc}
    506a:	bf00      	nop
    506c:	200018cc 	.word	0x200018cc

00005070 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    5070:	b580      	push	{r7, lr}
    5072:	b084      	sub	sp, #16
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    5078:	687b      	ldr	r3, [r7, #4]
    507a:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	885b      	ldrh	r3, [r3, #2]
    5080:	b29b      	uxth	r3, r3
    5082:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5086:	2b00      	cmp	r3, #0
    5088:	d107      	bne.n	509a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    508a:	68fb      	ldr	r3, [r7, #12]
    508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    508e:	2b00      	cmp	r3, #0
    5090:	d003      	beq.n	509a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    5092:	68fb      	ldr	r3, [r7, #12]
    5094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5096:	68f8      	ldr	r0, [r7, #12]
    5098:	4798      	blx	r3
		}
	}
}
    509a:	bf00      	nop
    509c:	3710      	adds	r7, #16
    509e:	46bd      	mov	sp, r7
    50a0:	bd80      	pop	{r7, pc}

000050a2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    50a2:	b580      	push	{r7, lr}
    50a4:	b084      	sub	sp, #16
    50a6:	af00      	add	r7, sp, #0
    50a8:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    50aa:	687b      	ldr	r3, [r7, #4]
    50ac:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	885b      	ldrh	r3, [r3, #2]
    50b2:	b29b      	uxth	r3, r3
    50b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    50b8:	2b00      	cmp	r3, #0
    50ba:	d107      	bne.n	50cc <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    50bc:	68fb      	ldr	r3, [r7, #12]
    50be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    50c0:	2b00      	cmp	r3, #0
    50c2:	d003      	beq.n	50cc <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    50c4:	68fb      	ldr	r3, [r7, #12]
    50c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    50c8:	68f8      	ldr	r0, [r7, #12]
    50ca:	4798      	blx	r3
		}
	}
}
    50cc:	bf00      	nop
    50ce:	3710      	adds	r7, #16
    50d0:	46bd      	mov	sp, r7
    50d2:	bd80      	pop	{r7, pc}

000050d4 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    50d4:	b580      	push	{r7, lr}
    50d6:	b084      	sub	sp, #16
    50d8:	af00      	add	r7, sp, #0
    50da:	6078      	str	r0, [r7, #4]
    50dc:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    50de:	687b      	ldr	r3, [r7, #4]
    50e0:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    50e2:	687b      	ldr	r3, [r7, #4]
    50e4:	885b      	ldrh	r3, [r3, #2]
    50e6:	b29b      	uxth	r3, r3
    50e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    50ec:	2b00      	cmp	r3, #0
    50ee:	d108      	bne.n	5102 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    50f0:	68fb      	ldr	r3, [r7, #12]
    50f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    50f4:	2b00      	cmp	r3, #0
    50f6:	d004      	beq.n	5102 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    50f8:	68fb      	ldr	r3, [r7, #12]
    50fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    50fc:	6839      	ldr	r1, [r7, #0]
    50fe:	68f8      	ldr	r0, [r7, #12]
    5100:	4798      	blx	r3
		}
	}
}
    5102:	bf00      	nop
    5104:	3710      	adds	r7, #16
    5106:	46bd      	mov	sp, r7
    5108:	bd80      	pop	{r7, pc}
	...

0000510c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    510c:	b580      	push	{r7, lr}
    510e:	b08a      	sub	sp, #40	; 0x28
    5110:	af00      	add	r7, sp, #0
    5112:	60f8      	str	r0, [r7, #12]
    5114:	60b9      	str	r1, [r7, #8]
    5116:	4613      	mov	r3, r2
    5118:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    511a:	68fb      	ldr	r3, [r7, #12]
    511c:	3b28      	subs	r3, #40	; 0x28
    511e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    5120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5122:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    5124:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    5126:	88fb      	ldrh	r3, [r7, #6]
    5128:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    512a:	f248 0301 	movw	r3, #32769	; 0x8001
    512e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    5130:	68bb      	ldr	r3, [r7, #8]
    5132:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5136:	f107 0214 	add.w	r2, r7, #20
    513a:	4611      	mov	r1, r2
    513c:	4618      	mov	r0, r3
    513e:	4b06      	ldr	r3, [pc, #24]	; (5158 <i2c_m_async_read+0x4c>)
    5140:	4798      	blx	r3
    5142:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    5144:	6a3b      	ldr	r3, [r7, #32]
    5146:	2b00      	cmp	r3, #0
    5148:	d001      	beq.n	514e <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    514a:	6a3b      	ldr	r3, [r7, #32]
    514c:	e000      	b.n	5150 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    514e:	88fb      	ldrh	r3, [r7, #6]
}
    5150:	4618      	mov	r0, r3
    5152:	3728      	adds	r7, #40	; 0x28
    5154:	46bd      	mov	sp, r7
    5156:	bd80      	pop	{r7, pc}
    5158:	00009cc1 	.word	0x00009cc1

0000515c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    515c:	b580      	push	{r7, lr}
    515e:	b08a      	sub	sp, #40	; 0x28
    5160:	af00      	add	r7, sp, #0
    5162:	60f8      	str	r0, [r7, #12]
    5164:	60b9      	str	r1, [r7, #8]
    5166:	4613      	mov	r3, r2
    5168:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    516a:	68fb      	ldr	r3, [r7, #12]
    516c:	3b28      	subs	r3, #40	; 0x28
    516e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    5170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5172:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    5174:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    5176:	88fb      	ldrh	r3, [r7, #6]
    5178:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    517e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    5180:	68bb      	ldr	r3, [r7, #8]
    5182:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    5184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5186:	f107 0214 	add.w	r2, r7, #20
    518a:	4611      	mov	r1, r2
    518c:	4618      	mov	r0, r3
    518e:	4b06      	ldr	r3, [pc, #24]	; (51a8 <i2c_m_async_write+0x4c>)
    5190:	4798      	blx	r3
    5192:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    5194:	6a3b      	ldr	r3, [r7, #32]
    5196:	2b00      	cmp	r3, #0
    5198:	d001      	beq.n	519e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    519a:	6a3b      	ldr	r3, [r7, #32]
    519c:	e000      	b.n	51a0 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    519e:	88fb      	ldrh	r3, [r7, #6]
}
    51a0:	4618      	mov	r0, r3
    51a2:	3728      	adds	r7, #40	; 0x28
    51a4:	46bd      	mov	sp, r7
    51a6:	bd80      	pop	{r7, pc}
    51a8:	00009cc1 	.word	0x00009cc1

000051ac <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    51ac:	b580      	push	{r7, lr}
    51ae:	b084      	sub	sp, #16
    51b0:	af00      	add	r7, sp, #0
    51b2:	6078      	str	r0, [r7, #4]
    51b4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    51b6:	687b      	ldr	r3, [r7, #4]
    51b8:	2b00      	cmp	r3, #0
    51ba:	bf14      	ite	ne
    51bc:	2301      	movne	r3, #1
    51be:	2300      	moveq	r3, #0
    51c0:	b2db      	uxtb	r3, r3
    51c2:	2289      	movs	r2, #137	; 0x89
    51c4:	4915      	ldr	r1, [pc, #84]	; (521c <i2c_m_async_init+0x70>)
    51c6:	4618      	mov	r0, r3
    51c8:	4b15      	ldr	r3, [pc, #84]	; (5220 <i2c_m_async_init+0x74>)
    51ca:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	6839      	ldr	r1, [r7, #0]
    51d0:	4618      	mov	r0, r3
    51d2:	4b14      	ldr	r3, [pc, #80]	; (5224 <i2c_m_async_init+0x78>)
    51d4:	4798      	blx	r3
    51d6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    51d8:	68fb      	ldr	r3, [r7, #12]
    51da:	2b00      	cmp	r3, #0
    51dc:	d001      	beq.n	51e2 <i2c_m_async_init+0x36>
		return init_status;
    51de:	68fb      	ldr	r3, [r7, #12]
    51e0:	e018      	b.n	5214 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    51e2:	687b      	ldr	r3, [r7, #4]
    51e4:	4a10      	ldr	r2, [pc, #64]	; (5228 <i2c_m_async_init+0x7c>)
    51e6:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	4a10      	ldr	r2, [pc, #64]	; (522c <i2c_m_async_init+0x80>)
    51ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    51ee:	687b      	ldr	r3, [r7, #4]
    51f0:	4a0f      	ldr	r2, [pc, #60]	; (5230 <i2c_m_async_init+0x84>)
    51f2:	2101      	movs	r1, #1
    51f4:	4618      	mov	r0, r3
    51f6:	4b0f      	ldr	r3, [pc, #60]	; (5234 <i2c_m_async_init+0x88>)
    51f8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	4a0e      	ldr	r2, [pc, #56]	; (5238 <i2c_m_async_init+0x8c>)
    51fe:	2102      	movs	r1, #2
    5200:	4618      	mov	r0, r3
    5202:	4b0c      	ldr	r3, [pc, #48]	; (5234 <i2c_m_async_init+0x88>)
    5204:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	4a0c      	ldr	r2, [pc, #48]	; (523c <i2c_m_async_init+0x90>)
    520a:	2100      	movs	r1, #0
    520c:	4618      	mov	r0, r3
    520e:	4b09      	ldr	r3, [pc, #36]	; (5234 <i2c_m_async_init+0x88>)
    5210:	4798      	blx	r3

	return ERR_NONE;
    5212:	2300      	movs	r3, #0
}
    5214:	4618      	mov	r0, r3
    5216:	3710      	adds	r7, #16
    5218:	46bd      	mov	sp, r7
    521a:	bd80      	pop	{r7, pc}
    521c:	00013a90 	.word	0x00013a90
    5220:	00006a41 	.word	0x00006a41
    5224:	00009b11 	.word	0x00009b11
    5228:	0000510d 	.word	0x0000510d
    522c:	0000515d 	.word	0x0000515d
    5230:	00005071 	.word	0x00005071
    5234:	00009d95 	.word	0x00009d95
    5238:	000050a3 	.word	0x000050a3
    523c:	000050d5 	.word	0x000050d5

00005240 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    5240:	b580      	push	{r7, lr}
    5242:	b08a      	sub	sp, #40	; 0x28
    5244:	af00      	add	r7, sp, #0
    5246:	60f8      	str	r0, [r7, #12]
    5248:	60b9      	str	r1, [r7, #8]
    524a:	4613      	mov	r3, r2
    524c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    524e:	68fb      	ldr	r3, [r7, #12]
    5250:	3b14      	subs	r3, #20
    5252:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    5254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5256:	8b9b      	ldrh	r3, [r3, #28]
    5258:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    525a:	88fb      	ldrh	r3, [r7, #6]
    525c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    525e:	f248 0301 	movw	r3, #32769	; 0x8001
    5262:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    5264:	68bb      	ldr	r3, [r7, #8]
    5266:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    5268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    526a:	f107 0214 	add.w	r2, r7, #20
    526e:	4611      	mov	r1, r2
    5270:	4618      	mov	r0, r3
    5272:	4b06      	ldr	r3, [pc, #24]	; (528c <i2c_m_sync_read+0x4c>)
    5274:	4798      	blx	r3
    5276:	6238      	str	r0, [r7, #32]

	if (ret) {
    5278:	6a3b      	ldr	r3, [r7, #32]
    527a:	2b00      	cmp	r3, #0
    527c:	d001      	beq.n	5282 <i2c_m_sync_read+0x42>
		return ret;
    527e:	6a3b      	ldr	r3, [r7, #32]
    5280:	e000      	b.n	5284 <i2c_m_sync_read+0x44>
	}

	return n;
    5282:	88fb      	ldrh	r3, [r7, #6]
}
    5284:	4618      	mov	r0, r3
    5286:	3728      	adds	r7, #40	; 0x28
    5288:	46bd      	mov	sp, r7
    528a:	bd80      	pop	{r7, pc}
    528c:	00009f9d 	.word	0x00009f9d

00005290 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    5290:	b580      	push	{r7, lr}
    5292:	b08a      	sub	sp, #40	; 0x28
    5294:	af00      	add	r7, sp, #0
    5296:	60f8      	str	r0, [r7, #12]
    5298:	60b9      	str	r1, [r7, #8]
    529a:	4613      	mov	r3, r2
    529c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    529e:	68fb      	ldr	r3, [r7, #12]
    52a0:	3b14      	subs	r3, #20
    52a2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    52a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52a6:	8b9b      	ldrh	r3, [r3, #28]
    52a8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    52aa:	88fb      	ldrh	r3, [r7, #6]
    52ac:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    52ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    52b2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    52b4:	68bb      	ldr	r3, [r7, #8]
    52b6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    52b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52ba:	f107 0214 	add.w	r2, r7, #20
    52be:	4611      	mov	r1, r2
    52c0:	4618      	mov	r0, r3
    52c2:	4b06      	ldr	r3, [pc, #24]	; (52dc <i2c_m_sync_write+0x4c>)
    52c4:	4798      	blx	r3
    52c6:	6238      	str	r0, [r7, #32]

	if (ret) {
    52c8:	6a3b      	ldr	r3, [r7, #32]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d001      	beq.n	52d2 <i2c_m_sync_write+0x42>
		return ret;
    52ce:	6a3b      	ldr	r3, [r7, #32]
    52d0:	e000      	b.n	52d4 <i2c_m_sync_write+0x44>
	}

	return n;
    52d2:	88fb      	ldrh	r3, [r7, #6]
}
    52d4:	4618      	mov	r0, r3
    52d6:	3728      	adds	r7, #40	; 0x28
    52d8:	46bd      	mov	sp, r7
    52da:	bd80      	pop	{r7, pc}
    52dc:	00009f9d 	.word	0x00009f9d

000052e0 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    52e0:	b580      	push	{r7, lr}
    52e2:	b084      	sub	sp, #16
    52e4:	af00      	add	r7, sp, #0
    52e6:	6078      	str	r0, [r7, #4]
    52e8:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    52ea:	687b      	ldr	r3, [r7, #4]
    52ec:	2b00      	cmp	r3, #0
    52ee:	bf14      	ite	ne
    52f0:	2301      	movne	r3, #1
    52f2:	2300      	moveq	r3, #0
    52f4:	b2db      	uxtb	r3, r3
    52f6:	225e      	movs	r2, #94	; 0x5e
    52f8:	490c      	ldr	r1, [pc, #48]	; (532c <i2c_m_sync_init+0x4c>)
    52fa:	4618      	mov	r0, r3
    52fc:	4b0c      	ldr	r3, [pc, #48]	; (5330 <i2c_m_sync_init+0x50>)
    52fe:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	6839      	ldr	r1, [r7, #0]
    5304:	4618      	mov	r0, r3
    5306:	4b0b      	ldr	r3, [pc, #44]	; (5334 <i2c_m_sync_init+0x54>)
    5308:	4798      	blx	r3
    530a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    530c:	68fb      	ldr	r3, [r7, #12]
    530e:	2b00      	cmp	r3, #0
    5310:	d001      	beq.n	5316 <i2c_m_sync_init+0x36>
		return init_status;
    5312:	68fb      	ldr	r3, [r7, #12]
    5314:	e006      	b.n	5324 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    5316:	687b      	ldr	r3, [r7, #4]
    5318:	4a07      	ldr	r2, [pc, #28]	; (5338 <i2c_m_sync_init+0x58>)
    531a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	4a07      	ldr	r2, [pc, #28]	; (533c <i2c_m_sync_init+0x5c>)
    5320:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    5322:	2300      	movs	r3, #0
}
    5324:	4618      	mov	r0, r3
    5326:	3710      	adds	r7, #16
    5328:	46bd      	mov	sp, r7
    532a:	bd80      	pop	{r7, pc}
    532c:	00013ab0 	.word	0x00013ab0
    5330:	00006a41 	.word	0x00006a41
    5334:	00009dd9 	.word	0x00009dd9
    5338:	00005241 	.word	0x00005241
    533c:	00005291 	.word	0x00005291

00005340 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    5340:	b580      	push	{r7, lr}
    5342:	b084      	sub	sp, #16
    5344:	af00      	add	r7, sp, #0
    5346:	60f8      	str	r0, [r7, #12]
    5348:	60b9      	str	r1, [r7, #8]
    534a:	4613      	mov	r3, r2
    534c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	2b00      	cmp	r3, #0
    5352:	d004      	beq.n	535e <io_write+0x1e>
    5354:	68bb      	ldr	r3, [r7, #8]
    5356:	2b00      	cmp	r3, #0
    5358:	d001      	beq.n	535e <io_write+0x1e>
    535a:	2301      	movs	r3, #1
    535c:	e000      	b.n	5360 <io_write+0x20>
    535e:	2300      	movs	r3, #0
    5360:	f003 0301 	and.w	r3, r3, #1
    5364:	b2db      	uxtb	r3, r3
    5366:	2234      	movs	r2, #52	; 0x34
    5368:	4907      	ldr	r1, [pc, #28]	; (5388 <io_write+0x48>)
    536a:	4618      	mov	r0, r3
    536c:	4b07      	ldr	r3, [pc, #28]	; (538c <io_write+0x4c>)
    536e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    5370:	68fb      	ldr	r3, [r7, #12]
    5372:	681b      	ldr	r3, [r3, #0]
    5374:	88fa      	ldrh	r2, [r7, #6]
    5376:	68b9      	ldr	r1, [r7, #8]
    5378:	68f8      	ldr	r0, [r7, #12]
    537a:	4798      	blx	r3
    537c:	4603      	mov	r3, r0
}
    537e:	4618      	mov	r0, r3
    5380:	3710      	adds	r7, #16
    5382:	46bd      	mov	sp, r7
    5384:	bd80      	pop	{r7, pc}
    5386:	bf00      	nop
    5388:	00013acc 	.word	0x00013acc
    538c:	00006a41 	.word	0x00006a41

00005390 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    5390:	b580      	push	{r7, lr}
    5392:	b084      	sub	sp, #16
    5394:	af00      	add	r7, sp, #0
    5396:	60f8      	str	r0, [r7, #12]
    5398:	60b9      	str	r1, [r7, #8]
    539a:	4613      	mov	r3, r2
    539c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    539e:	68fb      	ldr	r3, [r7, #12]
    53a0:	2b00      	cmp	r3, #0
    53a2:	d004      	beq.n	53ae <io_read+0x1e>
    53a4:	68bb      	ldr	r3, [r7, #8]
    53a6:	2b00      	cmp	r3, #0
    53a8:	d001      	beq.n	53ae <io_read+0x1e>
    53aa:	2301      	movs	r3, #1
    53ac:	e000      	b.n	53b0 <io_read+0x20>
    53ae:	2300      	movs	r3, #0
    53b0:	f003 0301 	and.w	r3, r3, #1
    53b4:	b2db      	uxtb	r3, r3
    53b6:	223d      	movs	r2, #61	; 0x3d
    53b8:	4907      	ldr	r1, [pc, #28]	; (53d8 <io_read+0x48>)
    53ba:	4618      	mov	r0, r3
    53bc:	4b07      	ldr	r3, [pc, #28]	; (53dc <io_read+0x4c>)
    53be:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    53c0:	68fb      	ldr	r3, [r7, #12]
    53c2:	685b      	ldr	r3, [r3, #4]
    53c4:	88fa      	ldrh	r2, [r7, #6]
    53c6:	68b9      	ldr	r1, [r7, #8]
    53c8:	68f8      	ldr	r0, [r7, #12]
    53ca:	4798      	blx	r3
    53cc:	4603      	mov	r3, r0
}
    53ce:	4618      	mov	r0, r3
    53d0:	3710      	adds	r7, #16
    53d2:	46bd      	mov	sp, r7
    53d4:	bd80      	pop	{r7, pc}
    53d6:	bf00      	nop
    53d8:	00013acc 	.word	0x00013acc
    53dc:	00006a41 	.word	0x00006a41

000053e0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    53e0:	b580      	push	{r7, lr}
    53e2:	b084      	sub	sp, #16
    53e4:	af00      	add	r7, sp, #0
    53e6:	60f8      	str	r0, [r7, #12]
    53e8:	60b9      	str	r1, [r7, #8]
    53ea:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d004      	beq.n	53fc <pwm_init+0x1c>
    53f2:	68bb      	ldr	r3, [r7, #8]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d001      	beq.n	53fc <pwm_init+0x1c>
    53f8:	2301      	movs	r3, #1
    53fa:	e000      	b.n	53fe <pwm_init+0x1e>
    53fc:	2300      	movs	r3, #0
    53fe:	f003 0301 	and.w	r3, r3, #1
    5402:	b2db      	uxtb	r3, r3
    5404:	2233      	movs	r2, #51	; 0x33
    5406:	490a      	ldr	r1, [pc, #40]	; (5430 <pwm_init+0x50>)
    5408:	4618      	mov	r0, r3
    540a:	4b0a      	ldr	r3, [pc, #40]	; (5434 <pwm_init+0x54>)
    540c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    540e:	68fb      	ldr	r3, [r7, #12]
    5410:	68b9      	ldr	r1, [r7, #8]
    5412:	4618      	mov	r0, r3
    5414:	4b08      	ldr	r3, [pc, #32]	; (5438 <pwm_init+0x58>)
    5416:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    5418:	68fb      	ldr	r3, [r7, #12]
    541a:	4a08      	ldr	r2, [pc, #32]	; (543c <pwm_init+0x5c>)
    541c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    541e:	68fb      	ldr	r3, [r7, #12]
    5420:	4a07      	ldr	r2, [pc, #28]	; (5440 <pwm_init+0x60>)
    5422:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    5424:	2300      	movs	r3, #0
}
    5426:	4618      	mov	r0, r3
    5428:	3710      	adds	r7, #16
    542a:	46bd      	mov	sp, r7
    542c:	bd80      	pop	{r7, pc}
    542e:	bf00      	nop
    5430:	00013ae0 	.word	0x00013ae0
    5434:	00006a41 	.word	0x00006a41
    5438:	0000b359 	.word	0x0000b359
    543c:	00005499 	.word	0x00005499
    5440:	000054bd 	.word	0x000054bd

00005444 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    5444:	b580      	push	{r7, lr}
    5446:	b082      	sub	sp, #8
    5448:	af00      	add	r7, sp, #0
    544a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    544c:	687b      	ldr	r3, [r7, #4]
    544e:	2b00      	cmp	r3, #0
    5450:	bf14      	ite	ne
    5452:	2301      	movne	r3, #1
    5454:	2300      	moveq	r3, #0
    5456:	b2db      	uxtb	r3, r3
    5458:	224a      	movs	r2, #74	; 0x4a
    545a:	490b      	ldr	r1, [pc, #44]	; (5488 <pwm_enable+0x44>)
    545c:	4618      	mov	r0, r3
    545e:	4b0b      	ldr	r3, [pc, #44]	; (548c <pwm_enable+0x48>)
    5460:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    5462:	687b      	ldr	r3, [r7, #4]
    5464:	4618      	mov	r0, r3
    5466:	4b0a      	ldr	r3, [pc, #40]	; (5490 <pwm_enable+0x4c>)
    5468:	4798      	blx	r3
    546a:	4603      	mov	r3, r0
    546c:	2b00      	cmp	r3, #0
    546e:	d002      	beq.n	5476 <pwm_enable+0x32>
		return ERR_DENIED;
    5470:	f06f 0310 	mvn.w	r3, #16
    5474:	e004      	b.n	5480 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	4618      	mov	r0, r3
    547a:	4b06      	ldr	r3, [pc, #24]	; (5494 <pwm_enable+0x50>)
    547c:	4798      	blx	r3

	return ERR_NONE;
    547e:	2300      	movs	r3, #0
}
    5480:	4618      	mov	r0, r3
    5482:	3708      	adds	r7, #8
    5484:	46bd      	mov	sp, r7
    5486:	bd80      	pop	{r7, pc}
    5488:	00013ae0 	.word	0x00013ae0
    548c:	00006a41 	.word	0x00006a41
    5490:	0000b5f5 	.word	0x0000b5f5
    5494:	0000b595 	.word	0x0000b595

00005498 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    5498:	b580      	push	{r7, lr}
    549a:	b084      	sub	sp, #16
    549c:	af00      	add	r7, sp, #0
    549e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    54a4:	68fb      	ldr	r3, [r7, #12]
    54a6:	695b      	ldr	r3, [r3, #20]
    54a8:	2b00      	cmp	r3, #0
    54aa:	d003      	beq.n	54b4 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    54ac:	68fb      	ldr	r3, [r7, #12]
    54ae:	695b      	ldr	r3, [r3, #20]
    54b0:	68f8      	ldr	r0, [r7, #12]
    54b2:	4798      	blx	r3
	}
}
    54b4:	bf00      	nop
    54b6:	3710      	adds	r7, #16
    54b8:	46bd      	mov	sp, r7
    54ba:	bd80      	pop	{r7, pc}

000054bc <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    54bc:	b580      	push	{r7, lr}
    54be:	b084      	sub	sp, #16
    54c0:	af00      	add	r7, sp, #0
    54c2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    54c4:	687b      	ldr	r3, [r7, #4]
    54c6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    54c8:	68fb      	ldr	r3, [r7, #12]
    54ca:	699b      	ldr	r3, [r3, #24]
    54cc:	2b00      	cmp	r3, #0
    54ce:	d003      	beq.n	54d8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    54d0:	68fb      	ldr	r3, [r7, #12]
    54d2:	699b      	ldr	r3, [r3, #24]
    54d4:	68f8      	ldr	r0, [r7, #12]
    54d6:	4798      	blx	r3
	}
}
    54d8:	bf00      	nop
    54da:	3710      	adds	r7, #16
    54dc:	46bd      	mov	sp, r7
    54de:	bd80      	pop	{r7, pc}

000054e0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    54e0:	b580      	push	{r7, lr}
    54e2:	b082      	sub	sp, #8
    54e4:	af00      	add	r7, sp, #0
    54e6:	6078      	str	r0, [r7, #4]
    54e8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    54ea:	687b      	ldr	r3, [r7, #4]
    54ec:	2b00      	cmp	r3, #0
    54ee:	d004      	beq.n	54fa <qspi_sync_init+0x1a>
    54f0:	683b      	ldr	r3, [r7, #0]
    54f2:	2b00      	cmp	r3, #0
    54f4:	d001      	beq.n	54fa <qspi_sync_init+0x1a>
    54f6:	2301      	movs	r3, #1
    54f8:	e000      	b.n	54fc <qspi_sync_init+0x1c>
    54fa:	2300      	movs	r3, #0
    54fc:	f003 0301 	and.w	r3, r3, #1
    5500:	b2db      	uxtb	r3, r3
    5502:	2231      	movs	r2, #49	; 0x31
    5504:	4906      	ldr	r1, [pc, #24]	; (5520 <qspi_sync_init+0x40>)
    5506:	4618      	mov	r0, r3
    5508:	4b06      	ldr	r3, [pc, #24]	; (5524 <qspi_sync_init+0x44>)
    550a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	6839      	ldr	r1, [r7, #0]
    5510:	4618      	mov	r0, r3
    5512:	4b05      	ldr	r3, [pc, #20]	; (5528 <qspi_sync_init+0x48>)
    5514:	4798      	blx	r3
    5516:	4603      	mov	r3, r0
}
    5518:	4618      	mov	r0, r3
    551a:	3708      	adds	r7, #8
    551c:	46bd      	mov	sp, r7
    551e:	bd80      	pop	{r7, pc}
    5520:	00013af8 	.word	0x00013af8
    5524:	00006a41 	.word	0x00006a41
    5528:	0000899d 	.word	0x0000899d

0000552c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    552c:	b580      	push	{r7, lr}
    552e:	b082      	sub	sp, #8
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	2b00      	cmp	r3, #0
    5538:	bf14      	ite	ne
    553a:	2301      	movne	r3, #1
    553c:	2300      	moveq	r3, #0
    553e:	b2db      	uxtb	r3, r3
    5540:	223f      	movs	r2, #63	; 0x3f
    5542:	4906      	ldr	r1, [pc, #24]	; (555c <qspi_sync_enable+0x30>)
    5544:	4618      	mov	r0, r3
    5546:	4b06      	ldr	r3, [pc, #24]	; (5560 <qspi_sync_enable+0x34>)
    5548:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    554a:	687b      	ldr	r3, [r7, #4]
    554c:	4618      	mov	r0, r3
    554e:	4b05      	ldr	r3, [pc, #20]	; (5564 <qspi_sync_enable+0x38>)
    5550:	4798      	blx	r3
    5552:	4603      	mov	r3, r0
}
    5554:	4618      	mov	r0, r3
    5556:	3708      	adds	r7, #8
    5558:	46bd      	mov	sp, r7
    555a:	bd80      	pop	{r7, pc}
    555c:	00013af8 	.word	0x00013af8
    5560:	00006a41 	.word	0x00006a41
    5564:	00008a11 	.word	0x00008a11

00005568 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    5568:	b580      	push	{r7, lr}
    556a:	b082      	sub	sp, #8
    556c:	af00      	add	r7, sp, #0
    556e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	2b00      	cmp	r3, #0
    5574:	bf14      	ite	ne
    5576:	2301      	movne	r3, #1
    5578:	2300      	moveq	r3, #0
    557a:	b2db      	uxtb	r3, r3
    557c:	2246      	movs	r2, #70	; 0x46
    557e:	4906      	ldr	r1, [pc, #24]	; (5598 <qspi_sync_disable+0x30>)
    5580:	4618      	mov	r0, r3
    5582:	4b06      	ldr	r3, [pc, #24]	; (559c <qspi_sync_disable+0x34>)
    5584:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	4618      	mov	r0, r3
    558a:	4b05      	ldr	r3, [pc, #20]	; (55a0 <qspi_sync_disable+0x38>)
    558c:	4798      	blx	r3
    558e:	4603      	mov	r3, r0
}
    5590:	4618      	mov	r0, r3
    5592:	3708      	adds	r7, #8
    5594:	46bd      	mov	sp, r7
    5596:	bd80      	pop	{r7, pc}
    5598:	00013af8 	.word	0x00013af8
    559c:	00006a41 	.word	0x00006a41
    55a0:	00008a35 	.word	0x00008a35

000055a4 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b082      	sub	sp, #8
    55a8:	af00      	add	r7, sp, #0
    55aa:	6078      	str	r0, [r7, #4]
    55ac:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d004      	beq.n	55be <qspi_sync_serial_run_command+0x1a>
    55b4:	683b      	ldr	r3, [r7, #0]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d001      	beq.n	55be <qspi_sync_serial_run_command+0x1a>
    55ba:	2301      	movs	r3, #1
    55bc:	e000      	b.n	55c0 <qspi_sync_serial_run_command+0x1c>
    55be:	2300      	movs	r3, #0
    55c0:	f003 0301 	and.w	r3, r3, #1
    55c4:	b2db      	uxtb	r3, r3
    55c6:	224d      	movs	r2, #77	; 0x4d
    55c8:	4906      	ldr	r1, [pc, #24]	; (55e4 <qspi_sync_serial_run_command+0x40>)
    55ca:	4618      	mov	r0, r3
    55cc:	4b06      	ldr	r3, [pc, #24]	; (55e8 <qspi_sync_serial_run_command+0x44>)
    55ce:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	6839      	ldr	r1, [r7, #0]
    55d4:	4618      	mov	r0, r3
    55d6:	4b05      	ldr	r3, [pc, #20]	; (55ec <qspi_sync_serial_run_command+0x48>)
    55d8:	4798      	blx	r3
    55da:	4603      	mov	r3, r0
}
    55dc:	4618      	mov	r0, r3
    55de:	3708      	adds	r7, #8
    55e0:	46bd      	mov	sp, r7
    55e2:	bd80      	pop	{r7, pc}
    55e4:	00013af8 	.word	0x00013af8
    55e8:	00006a41 	.word	0x00006a41
    55ec:	00008b81 	.word	0x00008b81

000055f0 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    55f0:	b580      	push	{r7, lr}
    55f2:	b084      	sub	sp, #16
    55f4:	af00      	add	r7, sp, #0
    55f6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	3b04      	subs	r3, #4
    55fc:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    55fe:	687b      	ldr	r3, [r7, #4]
    5600:	791b      	ldrb	r3, [r3, #4]
    5602:	2b01      	cmp	r3, #1
    5604:	d80e      	bhi.n	5624 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    5606:	68fb      	ldr	r3, [r7, #12]
    5608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    560a:	68fb      	ldr	r3, [r7, #12]
    560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    560e:	1c58      	adds	r0, r3, #1
    5610:	68f9      	ldr	r1, [r7, #12]
    5612:	6448      	str	r0, [r1, #68]	; 0x44
    5614:	4413      	add	r3, r2
    5616:	781b      	ldrb	r3, [r3, #0]
    5618:	b29b      	uxth	r3, r3
    561a:	4619      	mov	r1, r3
    561c:	6878      	ldr	r0, [r7, #4]
    561e:	4b11      	ldr	r3, [pc, #68]	; (5664 <_spi_dev_tx+0x74>)
    5620:	4798      	blx	r3
    5622:	e00d      	b.n	5640 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    5624:	68fb      	ldr	r3, [r7, #12]
    5626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5628:	68fb      	ldr	r3, [r7, #12]
    562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    562c:	1c58      	adds	r0, r3, #1
    562e:	68f9      	ldr	r1, [r7, #12]
    5630:	6448      	str	r0, [r1, #68]	; 0x44
    5632:	005b      	lsls	r3, r3, #1
    5634:	4413      	add	r3, r2
    5636:	881b      	ldrh	r3, [r3, #0]
    5638:	4619      	mov	r1, r3
    563a:	6878      	ldr	r0, [r7, #4]
    563c:	4b09      	ldr	r3, [pc, #36]	; (5664 <_spi_dev_tx+0x74>)
    563e:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    5640:	68fb      	ldr	r3, [r7, #12]
    5642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5644:	68fb      	ldr	r3, [r7, #12]
    5646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5648:	429a      	cmp	r2, r3
    564a:	d107      	bne.n	565c <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    564c:	2100      	movs	r1, #0
    564e:	6878      	ldr	r0, [r7, #4]
    5650:	4b05      	ldr	r3, [pc, #20]	; (5668 <_spi_dev_tx+0x78>)
    5652:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    5654:	2101      	movs	r1, #1
    5656:	6878      	ldr	r0, [r7, #4]
    5658:	4b04      	ldr	r3, [pc, #16]	; (566c <_spi_dev_tx+0x7c>)
    565a:	4798      	blx	r3
	}
}
    565c:	bf00      	nop
    565e:	3710      	adds	r7, #16
    5660:	46bd      	mov	sp, r7
    5662:	bd80      	pop	{r7, pc}
    5664:	0000abb9 	.word	0x0000abb9
    5668:	0000aa7d 	.word	0x0000aa7d
    566c:	0000ab51 	.word	0x0000ab51

00005670 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    5670:	b590      	push	{r4, r7, lr}
    5672:	b085      	sub	sp, #20
    5674:	af00      	add	r7, sp, #0
    5676:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	3b04      	subs	r3, #4
    567c:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    567e:	68fb      	ldr	r3, [r7, #12]
    5680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5682:	2b00      	cmp	r3, #0
    5684:	d021      	beq.n	56ca <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	791b      	ldrb	r3, [r3, #4]
    568a:	2b01      	cmp	r3, #1
    568c:	d80e      	bhi.n	56ac <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    568e:	68fb      	ldr	r3, [r7, #12]
    5690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    5692:	68fb      	ldr	r3, [r7, #12]
    5694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5696:	1c58      	adds	r0, r3, #1
    5698:	68f9      	ldr	r1, [r7, #12]
    569a:	6448      	str	r0, [r1, #68]	; 0x44
    569c:	18d4      	adds	r4, r2, r3
    569e:	6878      	ldr	r0, [r7, #4]
    56a0:	4b2e      	ldr	r3, [pc, #184]	; (575c <_spi_dev_rx+0xec>)
    56a2:	4798      	blx	r3
    56a4:	4603      	mov	r3, r0
    56a6:	b2db      	uxtb	r3, r3
    56a8:	7023      	strb	r3, [r4, #0]
    56aa:	e016      	b.n	56da <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    56ac:	68fb      	ldr	r3, [r7, #12]
    56ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    56b0:	68fb      	ldr	r3, [r7, #12]
    56b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    56b4:	1c58      	adds	r0, r3, #1
    56b6:	68f9      	ldr	r1, [r7, #12]
    56b8:	6448      	str	r0, [r1, #68]	; 0x44
    56ba:	005b      	lsls	r3, r3, #1
    56bc:	18d4      	adds	r4, r2, r3
    56be:	6878      	ldr	r0, [r7, #4]
    56c0:	4b26      	ldr	r3, [pc, #152]	; (575c <_spi_dev_rx+0xec>)
    56c2:	4798      	blx	r3
    56c4:	4603      	mov	r3, r0
    56c6:	8023      	strh	r3, [r4, #0]
    56c8:	e007      	b.n	56da <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    56ca:	6878      	ldr	r0, [r7, #4]
    56cc:	4b23      	ldr	r3, [pc, #140]	; (575c <_spi_dev_rx+0xec>)
    56ce:	4798      	blx	r3
		spi->xfercnt++;
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    56d4:	1c5a      	adds	r2, r3, #1
    56d6:	68fb      	ldr	r3, [r7, #12]
    56d8:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    56e2:	429a      	cmp	r2, r3
    56e4:	d226      	bcs.n	5734 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    56e6:	68fb      	ldr	r3, [r7, #12]
    56e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    56ea:	2b00      	cmp	r3, #0
    56ec:	d01b      	beq.n	5726 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	791b      	ldrb	r3, [r3, #4]
    56f2:	2b01      	cmp	r3, #1
    56f4:	d80b      	bhi.n	570e <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    56f6:	68fb      	ldr	r3, [r7, #12]
    56f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    56fe:	4413      	add	r3, r2
    5700:	781b      	ldrb	r3, [r3, #0]
    5702:	b29b      	uxth	r3, r3
    5704:	4619      	mov	r1, r3
    5706:	6878      	ldr	r0, [r7, #4]
    5708:	4b15      	ldr	r3, [pc, #84]	; (5760 <_spi_dev_rx+0xf0>)
    570a:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    570c:	e022      	b.n	5754 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5716:	005b      	lsls	r3, r3, #1
    5718:	4413      	add	r3, r2
    571a:	881b      	ldrh	r3, [r3, #0]
    571c:	4619      	mov	r1, r3
    571e:	6878      	ldr	r0, [r7, #4]
    5720:	4b0f      	ldr	r3, [pc, #60]	; (5760 <_spi_dev_rx+0xf0>)
    5722:	4798      	blx	r3
}
    5724:	e016      	b.n	5754 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	88db      	ldrh	r3, [r3, #6]
    572a:	4619      	mov	r1, r3
    572c:	6878      	ldr	r0, [r7, #4]
    572e:	4b0c      	ldr	r3, [pc, #48]	; (5760 <_spi_dev_rx+0xf0>)
    5730:	4798      	blx	r3
}
    5732:	e00f      	b.n	5754 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    5734:	2100      	movs	r1, #0
    5736:	6878      	ldr	r0, [r7, #4]
    5738:	4b0a      	ldr	r3, [pc, #40]	; (5764 <_spi_dev_rx+0xf4>)
    573a:	4798      	blx	r3
		spi->stat = 0;
    573c:	68fb      	ldr	r3, [r7, #12]
    573e:	2200      	movs	r2, #0
    5740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    5744:	68fb      	ldr	r3, [r7, #12]
    5746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5748:	2b00      	cmp	r3, #0
    574a:	d003      	beq.n	5754 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    574c:	68fb      	ldr	r3, [r7, #12]
    574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5750:	68f8      	ldr	r0, [r7, #12]
    5752:	4798      	blx	r3
}
    5754:	bf00      	nop
    5756:	3714      	adds	r7, #20
    5758:	46bd      	mov	sp, r7
    575a:	bd90      	pop	{r4, r7, pc}
    575c:	0000ac11 	.word	0x0000ac11
    5760:	0000abb9 	.word	0x0000abb9
    5764:	0000aae1 	.word	0x0000aae1

00005768 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    5768:	b580      	push	{r7, lr}
    576a:	b084      	sub	sp, #16
    576c:	af00      	add	r7, sp, #0
    576e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	3b04      	subs	r3, #4
    5774:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    5776:	68fb      	ldr	r3, [r7, #12]
    5778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    577a:	68fb      	ldr	r3, [r7, #12]
    577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    577e:	429a      	cmp	r2, r3
    5780:	d30f      	bcc.n	57a2 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    5782:	2100      	movs	r1, #0
    5784:	6878      	ldr	r0, [r7, #4]
    5786:	4b09      	ldr	r3, [pc, #36]	; (57ac <_spi_dev_complete+0x44>)
    5788:	4798      	blx	r3
		spi->stat = 0;
    578a:	68fb      	ldr	r3, [r7, #12]
    578c:	2200      	movs	r2, #0
    578e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    5792:	68fb      	ldr	r3, [r7, #12]
    5794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5796:	2b00      	cmp	r3, #0
    5798:	d003      	beq.n	57a2 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    579e:	68f8      	ldr	r0, [r7, #12]
    57a0:	4798      	blx	r3
		}
	}
}
    57a2:	bf00      	nop
    57a4:	3710      	adds	r7, #16
    57a6:	46bd      	mov	sp, r7
    57a8:	bd80      	pop	{r7, pc}
    57aa:	bf00      	nop
    57ac:	0000ab51 	.word	0x0000ab51

000057b0 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    57b0:	b580      	push	{r7, lr}
    57b2:	b084      	sub	sp, #16
    57b4:	af00      	add	r7, sp, #0
    57b6:	6078      	str	r0, [r7, #4]
    57b8:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    57ba:	687b      	ldr	r3, [r7, #4]
    57bc:	3b04      	subs	r3, #4
    57be:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    57c0:	2100      	movs	r1, #0
    57c2:	6878      	ldr	r0, [r7, #4]
    57c4:	4b0d      	ldr	r3, [pc, #52]	; (57fc <_spi_dev_error+0x4c>)
    57c6:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    57c8:	2100      	movs	r1, #0
    57ca:	6878      	ldr	r0, [r7, #4]
    57cc:	4b0c      	ldr	r3, [pc, #48]	; (5800 <_spi_dev_error+0x50>)
    57ce:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    57d0:	2100      	movs	r1, #0
    57d2:	6878      	ldr	r0, [r7, #4]
    57d4:	4b0b      	ldr	r3, [pc, #44]	; (5804 <_spi_dev_error+0x54>)
    57d6:	4798      	blx	r3
	spi->stat = 0;
    57d8:	68fb      	ldr	r3, [r7, #12]
    57da:	2200      	movs	r2, #0
    57dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    57e0:	68fb      	ldr	r3, [r7, #12]
    57e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    57e4:	2b00      	cmp	r3, #0
    57e6:	d004      	beq.n	57f2 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    57ec:	6839      	ldr	r1, [r7, #0]
    57ee:	68f8      	ldr	r0, [r7, #12]
    57f0:	4798      	blx	r3
	}
}
    57f2:	bf00      	nop
    57f4:	3710      	adds	r7, #16
    57f6:	46bd      	mov	sp, r7
    57f8:	bd80      	pop	{r7, pc}
    57fa:	bf00      	nop
    57fc:	0000aa7d 	.word	0x0000aa7d
    5800:	0000aae1 	.word	0x0000aae1
    5804:	0000ab51 	.word	0x0000ab51

00005808 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    5808:	b580      	push	{r7, lr}
    580a:	b084      	sub	sp, #16
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
    5810:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    5812:	2300      	movs	r3, #0
    5814:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    5816:	687b      	ldr	r3, [r7, #4]
    5818:	2b00      	cmp	r3, #0
    581a:	d004      	beq.n	5826 <spi_m_async_init+0x1e>
    581c:	683b      	ldr	r3, [r7, #0]
    581e:	2b00      	cmp	r3, #0
    5820:	d001      	beq.n	5826 <spi_m_async_init+0x1e>
    5822:	2301      	movs	r3, #1
    5824:	e000      	b.n	5828 <spi_m_async_init+0x20>
    5826:	2300      	movs	r3, #0
    5828:	f003 0301 	and.w	r3, r3, #1
    582c:	b2db      	uxtb	r3, r3
    582e:	22a5      	movs	r2, #165	; 0xa5
    5830:	491c      	ldr	r1, [pc, #112]	; (58a4 <spi_m_async_init+0x9c>)
    5832:	4618      	mov	r0, r3
    5834:	4b1c      	ldr	r3, [pc, #112]	; (58a8 <spi_m_async_init+0xa0>)
    5836:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	683a      	ldr	r2, [r7, #0]
    583c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	3304      	adds	r3, #4
    5842:	6839      	ldr	r1, [r7, #0]
    5844:	4618      	mov	r0, r3
    5846:	4b19      	ldr	r3, [pc, #100]	; (58ac <spi_m_async_init+0xa4>)
    5848:	4798      	blx	r3
    584a:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    584c:	68fb      	ldr	r3, [r7, #12]
    584e:	2b00      	cmp	r3, #0
    5850:	db23      	blt.n	589a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    5852:	687b      	ldr	r3, [r7, #4]
    5854:	3304      	adds	r3, #4
    5856:	4a16      	ldr	r2, [pc, #88]	; (58b0 <spi_m_async_init+0xa8>)
    5858:	2100      	movs	r1, #0
    585a:	4618      	mov	r0, r3
    585c:	4b15      	ldr	r3, [pc, #84]	; (58b4 <spi_m_async_init+0xac>)
    585e:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	3304      	adds	r3, #4
    5864:	4a14      	ldr	r2, [pc, #80]	; (58b8 <spi_m_async_init+0xb0>)
    5866:	2101      	movs	r1, #1
    5868:	4618      	mov	r0, r3
    586a:	4b12      	ldr	r3, [pc, #72]	; (58b4 <spi_m_async_init+0xac>)
    586c:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	3304      	adds	r3, #4
    5872:	4a12      	ldr	r2, [pc, #72]	; (58bc <spi_m_async_init+0xb4>)
    5874:	2102      	movs	r1, #2
    5876:	4618      	mov	r0, r3
    5878:	4b0e      	ldr	r3, [pc, #56]	; (58b4 <spi_m_async_init+0xac>)
    587a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	3304      	adds	r3, #4
    5880:	4a0f      	ldr	r2, [pc, #60]	; (58c0 <spi_m_async_init+0xb8>)
    5882:	2103      	movs	r1, #3
    5884:	4618      	mov	r0, r3
    5886:	4b0b      	ldr	r3, [pc, #44]	; (58b4 <spi_m_async_init+0xac>)
    5888:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    588a:	687b      	ldr	r3, [r7, #4]
    588c:	4a0d      	ldr	r2, [pc, #52]	; (58c4 <spi_m_async_init+0xbc>)
    588e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    5890:	687b      	ldr	r3, [r7, #4]
    5892:	4a0d      	ldr	r2, [pc, #52]	; (58c8 <spi_m_async_init+0xc0>)
    5894:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    5896:	2300      	movs	r3, #0
    5898:	e000      	b.n	589c <spi_m_async_init+0x94>
		return rc;
    589a:	68fb      	ldr	r3, [r7, #12]
}
    589c:	4618      	mov	r0, r3
    589e:	3710      	adds	r7, #16
    58a0:	46bd      	mov	sp, r7
    58a2:	bd80      	pop	{r7, pc}
    58a4:	00013b14 	.word	0x00013b14
    58a8:	00006a41 	.word	0x00006a41
    58ac:	0000a72d 	.word	0x0000a72d
    58b0:	000055f1 	.word	0x000055f1
    58b4:	0000ac61 	.word	0x0000ac61
    58b8:	00005671 	.word	0x00005671
    58bc:	00005769 	.word	0x00005769
    58c0:	000057b1 	.word	0x000057b1
    58c4:	00005909 	.word	0x00005909
    58c8:	00005989 	.word	0x00005989

000058cc <spi_m_async_enable>:
	spi->callbacks.cb_error = NULL;
	spi->callbacks.cb_xfer  = NULL;
}

void spi_m_async_enable(struct spi_m_async_descriptor *spi)
{
    58cc:	b580      	push	{r7, lr}
    58ce:	b082      	sub	sp, #8
    58d0:	af00      	add	r7, sp, #0
    58d2:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	2b00      	cmp	r3, #0
    58d8:	bf14      	ite	ne
    58da:	2301      	movne	r3, #1
    58dc:	2300      	moveq	r3, #0
    58de:	b2db      	uxtb	r3, r3
    58e0:	22c1      	movs	r2, #193	; 0xc1
    58e2:	4906      	ldr	r1, [pc, #24]	; (58fc <spi_m_async_enable+0x30>)
    58e4:	4618      	mov	r0, r3
    58e6:	4b06      	ldr	r3, [pc, #24]	; (5900 <spi_m_async_enable+0x34>)
    58e8:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	3304      	adds	r3, #4
    58ee:	4618      	mov	r0, r3
    58f0:	4b04      	ldr	r3, [pc, #16]	; (5904 <spi_m_async_enable+0x38>)
    58f2:	4798      	blx	r3
}
    58f4:	bf00      	nop
    58f6:	3708      	adds	r7, #8
    58f8:	46bd      	mov	sp, r7
    58fa:	bd80      	pop	{r7, pc}
    58fc:	00013b14 	.word	0x00013b14
    5900:	00006a41 	.word	0x00006a41
    5904:	0000a7bd 	.word	0x0000a7bd

00005908 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    5908:	b580      	push	{r7, lr}
    590a:	b086      	sub	sp, #24
    590c:	af00      	add	r7, sp, #0
    590e:	60f8      	str	r0, [r7, #12]
    5910:	60b9      	str	r1, [r7, #8]
    5912:	4613      	mov	r3, r2
    5914:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5916:	68fb      	ldr	r3, [r7, #12]
    5918:	2b00      	cmp	r3, #0
    591a:	bf14      	ite	ne
    591c:	2301      	movne	r3, #1
    591e:	2300      	moveq	r3, #0
    5920:	b2db      	uxtb	r3, r3
    5922:	f240 1205 	movw	r2, #261	; 0x105
    5926:	4914      	ldr	r1, [pc, #80]	; (5978 <_spi_m_async_io_read+0x70>)
    5928:	4618      	mov	r0, r3
    592a:	4b14      	ldr	r3, [pc, #80]	; (597c <_spi_m_async_io_read+0x74>)
    592c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    592e:	68fb      	ldr	r3, [r7, #12]
    5930:	3b24      	subs	r3, #36	; 0x24
    5932:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    5934:	697b      	ldr	r3, [r7, #20]
    5936:	68ba      	ldr	r2, [r7, #8]
    5938:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    593a:	697b      	ldr	r3, [r7, #20]
    593c:	2200      	movs	r2, #0
    593e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    5940:	88fa      	ldrh	r2, [r7, #6]
    5942:	697b      	ldr	r3, [r7, #20]
    5944:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    5946:	697b      	ldr	r3, [r7, #20]
    5948:	2200      	movs	r2, #0
    594a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    594c:	697b      	ldr	r3, [r7, #20]
    594e:	2210      	movs	r2, #16
    5950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    5954:	697b      	ldr	r3, [r7, #20]
    5956:	3304      	adds	r3, #4
    5958:	2101      	movs	r1, #1
    595a:	4618      	mov	r0, r3
    595c:	4b08      	ldr	r3, [pc, #32]	; (5980 <_spi_m_async_io_read+0x78>)
    595e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    5960:	697b      	ldr	r3, [r7, #20]
    5962:	3304      	adds	r3, #4
    5964:	f240 11ff 	movw	r1, #511	; 0x1ff
    5968:	4618      	mov	r0, r3
    596a:	4b06      	ldr	r3, [pc, #24]	; (5984 <_spi_m_async_io_read+0x7c>)
    596c:	4798      	blx	r3

	return ERR_NONE;
    596e:	2300      	movs	r3, #0
}
    5970:	4618      	mov	r0, r3
    5972:	3718      	adds	r7, #24
    5974:	46bd      	mov	sp, r7
    5976:	bd80      	pop	{r7, pc}
    5978:	00013b14 	.word	0x00013b14
    597c:	00006a41 	.word	0x00006a41
    5980:	0000aae1 	.word	0x0000aae1
    5984:	0000abb9 	.word	0x0000abb9

00005988 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    5988:	b580      	push	{r7, lr}
    598a:	b086      	sub	sp, #24
    598c:	af00      	add	r7, sp, #0
    598e:	60f8      	str	r0, [r7, #12]
    5990:	60b9      	str	r1, [r7, #8]
    5992:	4613      	mov	r3, r2
    5994:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5996:	68fb      	ldr	r3, [r7, #12]
    5998:	2b00      	cmp	r3, #0
    599a:	bf14      	ite	ne
    599c:	2301      	movne	r3, #1
    599e:	2300      	moveq	r3, #0
    59a0:	b2db      	uxtb	r3, r3
    59a2:	f240 1227 	movw	r2, #295	; 0x127
    59a6:	4911      	ldr	r1, [pc, #68]	; (59ec <_spi_m_async_io_write+0x64>)
    59a8:	4618      	mov	r0, r3
    59aa:	4b11      	ldr	r3, [pc, #68]	; (59f0 <_spi_m_async_io_write+0x68>)
    59ac:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    59ae:	68fb      	ldr	r3, [r7, #12]
    59b0:	3b24      	subs	r3, #36	; 0x24
    59b2:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    59b4:	697b      	ldr	r3, [r7, #20]
    59b6:	2200      	movs	r2, #0
    59b8:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    59ba:	697b      	ldr	r3, [r7, #20]
    59bc:	68ba      	ldr	r2, [r7, #8]
    59be:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    59c0:	88fa      	ldrh	r2, [r7, #6]
    59c2:	697b      	ldr	r3, [r7, #20]
    59c4:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    59c6:	697b      	ldr	r3, [r7, #20]
    59c8:	2200      	movs	r2, #0
    59ca:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    59cc:	697b      	ldr	r3, [r7, #20]
    59ce:	2210      	movs	r2, #16
    59d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    59d4:	697b      	ldr	r3, [r7, #20]
    59d6:	3304      	adds	r3, #4
    59d8:	2101      	movs	r1, #1
    59da:	4618      	mov	r0, r3
    59dc:	4b05      	ldr	r3, [pc, #20]	; (59f4 <_spi_m_async_io_write+0x6c>)
    59de:	4798      	blx	r3

	return ERR_NONE;
    59e0:	2300      	movs	r3, #0
}
    59e2:	4618      	mov	r0, r3
    59e4:	3718      	adds	r7, #24
    59e6:	46bd      	mov	sp, r7
    59e8:	bd80      	pop	{r7, pc}
    59ea:	bf00      	nop
    59ec:	00013b14 	.word	0x00013b14
    59f0:	00006a41 	.word	0x00006a41
    59f4:	0000aa7d 	.word	0x0000aa7d

000059f8 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    59f8:	b580      	push	{r7, lr}
    59fa:	b084      	sub	sp, #16
    59fc:	af00      	add	r7, sp, #0
    59fe:	60f8      	str	r0, [r7, #12]
    5a00:	460b      	mov	r3, r1
    5a02:	607a      	str	r2, [r7, #4]
    5a04:	72fb      	strb	r3, [r7, #11]
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    5a06:	68fb      	ldr	r3, [r7, #12]
    5a08:	2b00      	cmp	r3, #0
    5a0a:	d004      	beq.n	5a16 <spi_m_async_register_callback+0x1e>
    5a0c:	7afb      	ldrb	r3, [r7, #11]
    5a0e:	2b01      	cmp	r3, #1
    5a10:	d801      	bhi.n	5a16 <spi_m_async_register_callback+0x1e>
    5a12:	2301      	movs	r3, #1
    5a14:	e000      	b.n	5a18 <spi_m_async_register_callback+0x20>
    5a16:	2300      	movs	r3, #0
    5a18:	f003 0301 	and.w	r3, r3, #1
    5a1c:	b2db      	uxtb	r3, r3
    5a1e:	f240 1263 	movw	r2, #355	; 0x163
    5a22:	490f      	ldr	r1, [pc, #60]	; (5a60 <spi_m_async_register_callback+0x68>)
    5a24:	4618      	mov	r0, r3
    5a26:	4b0f      	ldr	r3, [pc, #60]	; (5a64 <spi_m_async_register_callback+0x6c>)
    5a28:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    5a2a:	7afb      	ldrb	r3, [r7, #11]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d103      	bne.n	5a38 <spi_m_async_register_callback+0x40>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    5a30:	68fb      	ldr	r3, [r7, #12]
    5a32:	687a      	ldr	r2, [r7, #4]
    5a34:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    5a36:	e00e      	b.n	5a56 <spi_m_async_register_callback+0x5e>
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    5a38:	68fb      	ldr	r3, [r7, #12]
    5a3a:	687a      	ldr	r2, [r7, #4]
    5a3c:	635a      	str	r2, [r3, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    5a3e:	68fb      	ldr	r3, [r7, #12]
    5a40:	1d18      	adds	r0, r3, #4
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	2b00      	cmp	r3, #0
    5a46:	bf14      	ite	ne
    5a48:	2301      	movne	r3, #1
    5a4a:	2300      	moveq	r3, #0
    5a4c:	b2db      	uxtb	r3, r3
    5a4e:	461a      	mov	r2, r3
    5a50:	2103      	movs	r1, #3
    5a52:	4b05      	ldr	r3, [pc, #20]	; (5a68 <spi_m_async_register_callback+0x70>)
    5a54:	4798      	blx	r3
}
    5a56:	bf00      	nop
    5a58:	3710      	adds	r7, #16
    5a5a:	46bd      	mov	sp, r7
    5a5c:	bd80      	pop	{r7, pc}
    5a5e:	bf00      	nop
    5a60:	00013b14 	.word	0x00013b14
    5a64:	00006a41 	.word	0x00006a41
    5a68:	0000acbd 	.word	0x0000acbd

00005a6c <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    5a6c:	b580      	push	{r7, lr}
    5a6e:	b082      	sub	sp, #8
    5a70:	af00      	add	r7, sp, #0
    5a72:	6078      	str	r0, [r7, #4]
    5a74:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    5a76:	687b      	ldr	r3, [r7, #4]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d004      	beq.n	5a86 <spi_m_async_get_io_descriptor+0x1a>
    5a7c:	683b      	ldr	r3, [r7, #0]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d001      	beq.n	5a86 <spi_m_async_get_io_descriptor+0x1a>
    5a82:	2301      	movs	r3, #1
    5a84:	e000      	b.n	5a88 <spi_m_async_get_io_descriptor+0x1c>
    5a86:	2300      	movs	r3, #0
    5a88:	f003 0301 	and.w	r3, r3, #1
    5a8c:	b2db      	uxtb	r3, r3
    5a8e:	f240 126f 	movw	r2, #367	; 0x16f
    5a92:	4907      	ldr	r1, [pc, #28]	; (5ab0 <spi_m_async_get_io_descriptor+0x44>)
    5a94:	4618      	mov	r0, r3
    5a96:	4b07      	ldr	r3, [pc, #28]	; (5ab4 <spi_m_async_get_io_descriptor+0x48>)
    5a98:	4798      	blx	r3
	*io = &spi->io;
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	f103 0224 	add.w	r2, r3, #36	; 0x24
    5aa0:	683b      	ldr	r3, [r7, #0]
    5aa2:	601a      	str	r2, [r3, #0]
	return 0;
    5aa4:	2300      	movs	r3, #0
}
    5aa6:	4618      	mov	r0, r3
    5aa8:	3708      	adds	r7, #8
    5aaa:	46bd      	mov	sp, r7
    5aac:	bd80      	pop	{r7, pc}
    5aae:	bf00      	nop
    5ab0:	00013b14 	.word	0x00013b14
    5ab4:	00006a41 	.word	0x00006a41

00005ab8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    5ab8:	b580      	push	{r7, lr}
    5aba:	b084      	sub	sp, #16
    5abc:	af00      	add	r7, sp, #0
    5abe:	6078      	str	r0, [r7, #4]
    5ac0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    5ac2:	2300      	movs	r3, #0
    5ac4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	2b00      	cmp	r3, #0
    5aca:	d004      	beq.n	5ad6 <spi_m_sync_init+0x1e>
    5acc:	683b      	ldr	r3, [r7, #0]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d001      	beq.n	5ad6 <spi_m_sync_init+0x1e>
    5ad2:	2301      	movs	r3, #1
    5ad4:	e000      	b.n	5ad8 <spi_m_sync_init+0x20>
    5ad6:	2300      	movs	r3, #0
    5ad8:	f003 0301 	and.w	r3, r3, #1
    5adc:	b2db      	uxtb	r3, r3
    5ade:	2240      	movs	r2, #64	; 0x40
    5ae0:	4910      	ldr	r1, [pc, #64]	; (5b24 <spi_m_sync_init+0x6c>)
    5ae2:	4618      	mov	r0, r3
    5ae4:	4b10      	ldr	r3, [pc, #64]	; (5b28 <spi_m_sync_init+0x70>)
    5ae6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	683a      	ldr	r2, [r7, #0]
    5aec:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	3304      	adds	r3, #4
    5af2:	6839      	ldr	r1, [r7, #0]
    5af4:	4618      	mov	r0, r3
    5af6:	4b0d      	ldr	r3, [pc, #52]	; (5b2c <spi_m_sync_init+0x74>)
    5af8:	4798      	blx	r3
    5afa:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    5afc:	68fb      	ldr	r3, [r7, #12]
    5afe:	2b00      	cmp	r3, #0
    5b00:	da01      	bge.n	5b06 <spi_m_sync_init+0x4e>
		return rc;
    5b02:	68fb      	ldr	r3, [r7, #12]
    5b04:	e00a      	b.n	5b1c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5b0c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	4a07      	ldr	r2, [pc, #28]	; (5b30 <spi_m_sync_init+0x78>)
    5b12:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	4a07      	ldr	r2, [pc, #28]	; (5b34 <spi_m_sync_init+0x7c>)
    5b18:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    5b1a:	2300      	movs	r3, #0
}
    5b1c:	4618      	mov	r0, r3
    5b1e:	3710      	adds	r7, #16
    5b20:	46bd      	mov	sp, r7
    5b22:	bd80      	pop	{r7, pc}
    5b24:	00013b34 	.word	0x00013b34
    5b28:	00006a41 	.word	0x00006a41
    5b2c:	0000a621 	.word	0x0000a621
    5b30:	00005b39 	.word	0x00005b39
    5b34:	00005b91 	.word	0x00005b91

00005b38 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b088      	sub	sp, #32
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	60f8      	str	r0, [r7, #12]
    5b40:	60b9      	str	r1, [r7, #8]
    5b42:	4613      	mov	r3, r2
    5b44:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5b46:	68fb      	ldr	r3, [r7, #12]
    5b48:	2b00      	cmp	r3, #0
    5b4a:	bf14      	ite	ne
    5b4c:	2301      	movne	r3, #1
    5b4e:	2300      	moveq	r3, #0
    5b50:	b2db      	uxtb	r3, r3
    5b52:	2287      	movs	r2, #135	; 0x87
    5b54:	490b      	ldr	r1, [pc, #44]	; (5b84 <_spi_m_sync_io_read+0x4c>)
    5b56:	4618      	mov	r0, r3
    5b58:	4b0b      	ldr	r3, [pc, #44]	; (5b88 <_spi_m_sync_io_read+0x50>)
    5b5a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    5b5c:	68fb      	ldr	r3, [r7, #12]
    5b5e:	3b0c      	subs	r3, #12
    5b60:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    5b62:	68bb      	ldr	r3, [r7, #8]
    5b64:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    5b66:	2300      	movs	r3, #0
    5b68:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    5b6a:	88fb      	ldrh	r3, [r7, #6]
    5b6c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    5b6e:	f107 0310 	add.w	r3, r7, #16
    5b72:	4619      	mov	r1, r3
    5b74:	69f8      	ldr	r0, [r7, #28]
    5b76:	4b05      	ldr	r3, [pc, #20]	; (5b8c <_spi_m_sync_io_read+0x54>)
    5b78:	4798      	blx	r3
    5b7a:	4603      	mov	r3, r0
}
    5b7c:	4618      	mov	r0, r3
    5b7e:	3720      	adds	r7, #32
    5b80:	46bd      	mov	sp, r7
    5b82:	bd80      	pop	{r7, pc}
    5b84:	00013b34 	.word	0x00013b34
    5b88:	00006a41 	.word	0x00006a41
    5b8c:	00005be9 	.word	0x00005be9

00005b90 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    5b90:	b580      	push	{r7, lr}
    5b92:	b088      	sub	sp, #32
    5b94:	af00      	add	r7, sp, #0
    5b96:	60f8      	str	r0, [r7, #12]
    5b98:	60b9      	str	r1, [r7, #8]
    5b9a:	4613      	mov	r3, r2
    5b9c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    5b9e:	68fb      	ldr	r3, [r7, #12]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	bf14      	ite	ne
    5ba4:	2301      	movne	r3, #1
    5ba6:	2300      	moveq	r3, #0
    5ba8:	b2db      	uxtb	r3, r3
    5baa:	22a3      	movs	r2, #163	; 0xa3
    5bac:	490b      	ldr	r1, [pc, #44]	; (5bdc <_spi_m_sync_io_write+0x4c>)
    5bae:	4618      	mov	r0, r3
    5bb0:	4b0b      	ldr	r3, [pc, #44]	; (5be0 <_spi_m_sync_io_write+0x50>)
    5bb2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    5bb4:	68fb      	ldr	r3, [r7, #12]
    5bb6:	3b0c      	subs	r3, #12
    5bb8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    5bba:	2300      	movs	r3, #0
    5bbc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    5bbe:	68bb      	ldr	r3, [r7, #8]
    5bc0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    5bc2:	88fb      	ldrh	r3, [r7, #6]
    5bc4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    5bc6:	f107 0310 	add.w	r3, r7, #16
    5bca:	4619      	mov	r1, r3
    5bcc:	69f8      	ldr	r0, [r7, #28]
    5bce:	4b05      	ldr	r3, [pc, #20]	; (5be4 <_spi_m_sync_io_write+0x54>)
    5bd0:	4798      	blx	r3
    5bd2:	4603      	mov	r3, r0
}
    5bd4:	4618      	mov	r0, r3
    5bd6:	3720      	adds	r7, #32
    5bd8:	46bd      	mov	sp, r7
    5bda:	bd80      	pop	{r7, pc}
    5bdc:	00013b34 	.word	0x00013b34
    5be0:	00006a41 	.word	0x00006a41
    5be4:	00005be9 	.word	0x00005be9

00005be8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	b086      	sub	sp, #24
    5bec:	af00      	add	r7, sp, #0
    5bee:	6078      	str	r0, [r7, #4]
    5bf0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d004      	beq.n	5c02 <spi_m_sync_transfer+0x1a>
    5bf8:	683b      	ldr	r3, [r7, #0]
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d001      	beq.n	5c02 <spi_m_sync_transfer+0x1a>
    5bfe:	2301      	movs	r3, #1
    5c00:	e000      	b.n	5c04 <spi_m_sync_transfer+0x1c>
    5c02:	2300      	movs	r3, #0
    5c04:	f003 0301 	and.w	r3, r3, #1
    5c08:	b2db      	uxtb	r3, r3
    5c0a:	22b3      	movs	r2, #179	; 0xb3
    5c0c:	490c      	ldr	r1, [pc, #48]	; (5c40 <spi_m_sync_transfer+0x58>)
    5c0e:	4618      	mov	r0, r3
    5c10:	4b0c      	ldr	r3, [pc, #48]	; (5c44 <spi_m_sync_transfer+0x5c>)
    5c12:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    5c14:	683b      	ldr	r3, [r7, #0]
    5c16:	681b      	ldr	r3, [r3, #0]
    5c18:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    5c1a:	683b      	ldr	r3, [r7, #0]
    5c1c:	685b      	ldr	r3, [r3, #4]
    5c1e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    5c20:	683b      	ldr	r3, [r7, #0]
    5c22:	689b      	ldr	r3, [r3, #8]
    5c24:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	3304      	adds	r3, #4
    5c2a:	f107 020c 	add.w	r2, r7, #12
    5c2e:	4611      	mov	r1, r2
    5c30:	4618      	mov	r0, r3
    5c32:	4b05      	ldr	r3, [pc, #20]	; (5c48 <spi_m_sync_transfer+0x60>)
    5c34:	4798      	blx	r3
    5c36:	4603      	mov	r3, r0
}
    5c38:	4618      	mov	r0, r3
    5c3a:	3718      	adds	r7, #24
    5c3c:	46bd      	mov	sp, r7
    5c3e:	bd80      	pop	{r7, pc}
    5c40:	00013b34 	.word	0x00013b34
    5c44:	00006a41 	.word	0x00006a41
    5c48:	0000a961 	.word	0x0000a961

00005c4c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    5c4c:	b480      	push	{r7}
    5c4e:	b083      	sub	sp, #12
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	681b      	ldr	r3, [r3, #0]
}
    5c58:	4618      	mov	r0, r3
    5c5a:	370c      	adds	r7, #12
    5c5c:	46bd      	mov	sp, r7
    5c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c62:	4770      	bx	lr

00005c64 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    5c64:	b480      	push	{r7}
    5c66:	b083      	sub	sp, #12
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d002      	beq.n	5c78 <list_get_next_element+0x14>
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	e000      	b.n	5c7a <list_get_next_element+0x16>
    5c78:	2300      	movs	r3, #0
}
    5c7a:	4618      	mov	r0, r3
    5c7c:	370c      	adds	r7, #12
    5c7e:	46bd      	mov	sp, r7
    5c80:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c84:	4770      	bx	lr
	...

00005c88 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	b084      	sub	sp, #16
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	60f8      	str	r0, [r7, #12]
    5c90:	60b9      	str	r1, [r7, #8]
    5c92:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	2b00      	cmp	r3, #0
    5c98:	d004      	beq.n	5ca4 <timer_init+0x1c>
    5c9a:	68bb      	ldr	r3, [r7, #8]
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d001      	beq.n	5ca4 <timer_init+0x1c>
    5ca0:	2301      	movs	r3, #1
    5ca2:	e000      	b.n	5ca6 <timer_init+0x1e>
    5ca4:	2300      	movs	r3, #0
    5ca6:	f003 0301 	and.w	r3, r3, #1
    5caa:	b2db      	uxtb	r3, r3
    5cac:	223b      	movs	r2, #59	; 0x3b
    5cae:	490a      	ldr	r1, [pc, #40]	; (5cd8 <timer_init+0x50>)
    5cb0:	4618      	mov	r0, r3
    5cb2:	4b0a      	ldr	r3, [pc, #40]	; (5cdc <timer_init+0x54>)
    5cb4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    5cb6:	68fb      	ldr	r3, [r7, #12]
    5cb8:	68b9      	ldr	r1, [r7, #8]
    5cba:	4618      	mov	r0, r3
    5cbc:	4b08      	ldr	r3, [pc, #32]	; (5ce0 <timer_init+0x58>)
    5cbe:	4798      	blx	r3
	descr->time                           = 0;
    5cc0:	68fb      	ldr	r3, [r7, #12]
    5cc2:	2200      	movs	r2, #0
    5cc4:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    5cc6:	68fb      	ldr	r3, [r7, #12]
    5cc8:	4a06      	ldr	r2, [pc, #24]	; (5ce4 <timer_init+0x5c>)
    5cca:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5ccc:	2300      	movs	r3, #0
}
    5cce:	4618      	mov	r0, r3
    5cd0:	3710      	adds	r7, #16
    5cd2:	46bd      	mov	sp, r7
    5cd4:	bd80      	pop	{r7, pc}
    5cd6:	bf00      	nop
    5cd8:	00013b50 	.word	0x00013b50
    5cdc:	00006a41 	.word	0x00006a41
    5ce0:	0000b0a9 	.word	0x0000b0a9
    5ce4:	00006031 	.word	0x00006031

00005ce8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    5ce8:	b580      	push	{r7, lr}
    5cea:	b082      	sub	sp, #8
    5cec:	af00      	add	r7, sp, #0
    5cee:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	bf14      	ite	ne
    5cf6:	2301      	movne	r3, #1
    5cf8:	2300      	moveq	r3, #0
    5cfa:	b2db      	uxtb	r3, r3
    5cfc:	2253      	movs	r2, #83	; 0x53
    5cfe:	490b      	ldr	r1, [pc, #44]	; (5d2c <timer_start+0x44>)
    5d00:	4618      	mov	r0, r3
    5d02:	4b0b      	ldr	r3, [pc, #44]	; (5d30 <timer_start+0x48>)
    5d04:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    5d06:	687b      	ldr	r3, [r7, #4]
    5d08:	4618      	mov	r0, r3
    5d0a:	4b0a      	ldr	r3, [pc, #40]	; (5d34 <timer_start+0x4c>)
    5d0c:	4798      	blx	r3
    5d0e:	4603      	mov	r3, r0
    5d10:	2b00      	cmp	r3, #0
    5d12:	d002      	beq.n	5d1a <timer_start+0x32>
		return ERR_DENIED;
    5d14:	f06f 0310 	mvn.w	r3, #16
    5d18:	e004      	b.n	5d24 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	4618      	mov	r0, r3
    5d1e:	4b06      	ldr	r3, [pc, #24]	; (5d38 <timer_start+0x50>)
    5d20:	4798      	blx	r3

	return ERR_NONE;
    5d22:	2300      	movs	r3, #0
}
    5d24:	4618      	mov	r0, r3
    5d26:	3708      	adds	r7, #8
    5d28:	46bd      	mov	sp, r7
    5d2a:	bd80      	pop	{r7, pc}
    5d2c:	00013b50 	.word	0x00013b50
    5d30:	00006a41 	.word	0x00006a41
    5d34:	0000b5d5 	.word	0x0000b5d5
    5d38:	0000b575 	.word	0x0000b575

00005d3c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    5d3c:	b580      	push	{r7, lr}
    5d3e:	b082      	sub	sp, #8
    5d40:	af00      	add	r7, sp, #0
    5d42:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5d44:	687b      	ldr	r3, [r7, #4]
    5d46:	2b00      	cmp	r3, #0
    5d48:	bf14      	ite	ne
    5d4a:	2301      	movne	r3, #1
    5d4c:	2300      	moveq	r3, #0
    5d4e:	b2db      	uxtb	r3, r3
    5d50:	2261      	movs	r2, #97	; 0x61
    5d52:	490d      	ldr	r1, [pc, #52]	; (5d88 <timer_stop+0x4c>)
    5d54:	4618      	mov	r0, r3
    5d56:	4b0d      	ldr	r3, [pc, #52]	; (5d8c <timer_stop+0x50>)
    5d58:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	4618      	mov	r0, r3
    5d5e:	4b0c      	ldr	r3, [pc, #48]	; (5d90 <timer_stop+0x54>)
    5d60:	4798      	blx	r3
    5d62:	4603      	mov	r3, r0
    5d64:	f083 0301 	eor.w	r3, r3, #1
    5d68:	b2db      	uxtb	r3, r3
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d002      	beq.n	5d74 <timer_stop+0x38>
		return ERR_DENIED;
    5d6e:	f06f 0310 	mvn.w	r3, #16
    5d72:	e004      	b.n	5d7e <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	4618      	mov	r0, r3
    5d78:	4b06      	ldr	r3, [pc, #24]	; (5d94 <timer_stop+0x58>)
    5d7a:	4798      	blx	r3

	return ERR_NONE;
    5d7c:	2300      	movs	r3, #0
}
    5d7e:	4618      	mov	r0, r3
    5d80:	3708      	adds	r7, #8
    5d82:	46bd      	mov	sp, r7
    5d84:	bd80      	pop	{r7, pc}
    5d86:	bf00      	nop
    5d88:	00013b50 	.word	0x00013b50
    5d8c:	00006a41 	.word	0x00006a41
    5d90:	0000b5d5 	.word	0x0000b5d5
    5d94:	0000b5b5 	.word	0x0000b5b5

00005d98 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b084      	sub	sp, #16
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
    5da0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	2b00      	cmp	r3, #0
    5da6:	d004      	beq.n	5db2 <timer_add_task+0x1a>
    5da8:	683b      	ldr	r3, [r7, #0]
    5daa:	2b00      	cmp	r3, #0
    5dac:	d001      	beq.n	5db2 <timer_add_task+0x1a>
    5dae:	2301      	movs	r3, #1
    5db0:	e000      	b.n	5db4 <timer_add_task+0x1c>
    5db2:	2300      	movs	r3, #0
    5db4:	f003 0301 	and.w	r3, r3, #1
    5db8:	b2db      	uxtb	r3, r3
    5dba:	227a      	movs	r2, #122	; 0x7a
    5dbc:	492d      	ldr	r1, [pc, #180]	; (5e74 <timer_add_task+0xdc>)
    5dbe:	4618      	mov	r0, r3
    5dc0:	4b2d      	ldr	r3, [pc, #180]	; (5e78 <timer_add_task+0xe0>)
    5dc2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	7e1b      	ldrb	r3, [r3, #24]
    5dc8:	b2db      	uxtb	r3, r3
    5dca:	f043 0301 	orr.w	r3, r3, #1
    5dce:	b2da      	uxtb	r2, r3
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	3314      	adds	r3, #20
    5dd8:	6839      	ldr	r1, [r7, #0]
    5dda:	4618      	mov	r0, r3
    5ddc:	4b27      	ldr	r3, [pc, #156]	; (5e7c <timer_add_task+0xe4>)
    5dde:	4798      	blx	r3
    5de0:	4603      	mov	r3, r0
    5de2:	2b00      	cmp	r3, #0
    5de4:	d00f      	beq.n	5e06 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	7e1b      	ldrb	r3, [r3, #24]
    5dea:	b2db      	uxtb	r3, r3
    5dec:	f023 0301 	bic.w	r3, r3, #1
    5df0:	b2da      	uxtb	r2, r3
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    5df6:	227f      	movs	r2, #127	; 0x7f
    5df8:	491e      	ldr	r1, [pc, #120]	; (5e74 <timer_add_task+0xdc>)
    5dfa:	2000      	movs	r0, #0
    5dfc:	4b1e      	ldr	r3, [pc, #120]	; (5e78 <timer_add_task+0xe0>)
    5dfe:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5e00:	f06f 0311 	mvn.w	r3, #17
    5e04:	e032      	b.n	5e6c <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    5e06:	687b      	ldr	r3, [r7, #4]
    5e08:	691a      	ldr	r2, [r3, #16]
    5e0a:	683b      	ldr	r3, [r7, #0]
    5e0c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    5e0e:	687b      	ldr	r3, [r7, #4]
    5e10:	f103 0014 	add.w	r0, r3, #20
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	691b      	ldr	r3, [r3, #16]
    5e18:	461a      	mov	r2, r3
    5e1a:	6839      	ldr	r1, [r7, #0]
    5e1c:	4b18      	ldr	r3, [pc, #96]	; (5e80 <timer_add_task+0xe8>)
    5e1e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	7e1b      	ldrb	r3, [r3, #24]
    5e24:	b2db      	uxtb	r3, r3
    5e26:	f023 0301 	bic.w	r3, r3, #1
    5e2a:	b2da      	uxtb	r2, r3
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5e30:	687b      	ldr	r3, [r7, #4]
    5e32:	7e1b      	ldrb	r3, [r3, #24]
    5e34:	b2db      	uxtb	r3, r3
    5e36:	f003 0302 	and.w	r3, r3, #2
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d015      	beq.n	5e6a <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    5e3e:	f107 030c 	add.w	r3, r7, #12
    5e42:	4618      	mov	r0, r3
    5e44:	4b0f      	ldr	r3, [pc, #60]	; (5e84 <timer_add_task+0xec>)
    5e46:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	7e1b      	ldrb	r3, [r3, #24]
    5e4c:	b2db      	uxtb	r3, r3
    5e4e:	f023 0302 	bic.w	r3, r3, #2
    5e52:	b2da      	uxtb	r2, r3
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	4618      	mov	r0, r3
    5e5c:	4b0a      	ldr	r3, [pc, #40]	; (5e88 <timer_add_task+0xf0>)
    5e5e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5e60:	f107 030c 	add.w	r3, r7, #12
    5e64:	4618      	mov	r0, r3
    5e66:	4b09      	ldr	r3, [pc, #36]	; (5e8c <timer_add_task+0xf4>)
    5e68:	4798      	blx	r3
	}

	return ERR_NONE;
    5e6a:	2300      	movs	r3, #0
}
    5e6c:	4618      	mov	r0, r3
    5e6e:	3710      	adds	r7, #16
    5e70:	46bd      	mov	sp, r7
    5e72:	bd80      	pop	{r7, pc}
    5e74:	00013b50 	.word	0x00013b50
    5e78:	00006a41 	.word	0x00006a41
    5e7c:	00006a69 	.word	0x00006a69
    5e80:	00005f81 	.word	0x00005f81
    5e84:	00004971 	.word	0x00004971
    5e88:	0000b635 	.word	0x0000b635
    5e8c:	00004997 	.word	0x00004997

00005e90 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    5e90:	b580      	push	{r7, lr}
    5e92:	b084      	sub	sp, #16
    5e94:	af00      	add	r7, sp, #0
    5e96:	6078      	str	r0, [r7, #4]
    5e98:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d004      	beq.n	5eaa <timer_remove_task+0x1a>
    5ea0:	683b      	ldr	r3, [r7, #0]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d001      	beq.n	5eaa <timer_remove_task+0x1a>
    5ea6:	2301      	movs	r3, #1
    5ea8:	e000      	b.n	5eac <timer_remove_task+0x1c>
    5eaa:	2300      	movs	r3, #0
    5eac:	f003 0301 	and.w	r3, r3, #1
    5eb0:	b2db      	uxtb	r3, r3
    5eb2:	2295      	movs	r2, #149	; 0x95
    5eb4:	492b      	ldr	r1, [pc, #172]	; (5f64 <timer_remove_task+0xd4>)
    5eb6:	4618      	mov	r0, r3
    5eb8:	4b2b      	ldr	r3, [pc, #172]	; (5f68 <timer_remove_task+0xd8>)
    5eba:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	7e1b      	ldrb	r3, [r3, #24]
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	f043 0301 	orr.w	r3, r3, #1
    5ec6:	b2da      	uxtb	r2, r3
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	3314      	adds	r3, #20
    5ed0:	6839      	ldr	r1, [r7, #0]
    5ed2:	4618      	mov	r0, r3
    5ed4:	4b25      	ldr	r3, [pc, #148]	; (5f6c <timer_remove_task+0xdc>)
    5ed6:	4798      	blx	r3
    5ed8:	4603      	mov	r3, r0
    5eda:	f083 0301 	eor.w	r3, r3, #1
    5ede:	b2db      	uxtb	r3, r3
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d00f      	beq.n	5f04 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	7e1b      	ldrb	r3, [r3, #24]
    5ee8:	b2db      	uxtb	r3, r3
    5eea:	f023 0301 	bic.w	r3, r3, #1
    5eee:	b2da      	uxtb	r2, r3
    5ef0:	687b      	ldr	r3, [r7, #4]
    5ef2:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    5ef4:	229a      	movs	r2, #154	; 0x9a
    5ef6:	491b      	ldr	r1, [pc, #108]	; (5f64 <timer_remove_task+0xd4>)
    5ef8:	2000      	movs	r0, #0
    5efa:	4b1b      	ldr	r3, [pc, #108]	; (5f68 <timer_remove_task+0xd8>)
    5efc:	4798      	blx	r3
		return ERR_NOT_FOUND;
    5efe:	f06f 0309 	mvn.w	r3, #9
    5f02:	e02b      	b.n	5f5c <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    5f04:	687b      	ldr	r3, [r7, #4]
    5f06:	3314      	adds	r3, #20
    5f08:	6839      	ldr	r1, [r7, #0]
    5f0a:	4618      	mov	r0, r3
    5f0c:	4b18      	ldr	r3, [pc, #96]	; (5f70 <timer_remove_task+0xe0>)
    5f0e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	7e1b      	ldrb	r3, [r3, #24]
    5f14:	b2db      	uxtb	r3, r3
    5f16:	f023 0301 	bic.w	r3, r3, #1
    5f1a:	b2da      	uxtb	r2, r3
    5f1c:	687b      	ldr	r3, [r7, #4]
    5f1e:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	7e1b      	ldrb	r3, [r3, #24]
    5f24:	b2db      	uxtb	r3, r3
    5f26:	f003 0302 	and.w	r3, r3, #2
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d015      	beq.n	5f5a <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    5f2e:	f107 030c 	add.w	r3, r7, #12
    5f32:	4618      	mov	r0, r3
    5f34:	4b0f      	ldr	r3, [pc, #60]	; (5f74 <timer_remove_task+0xe4>)
    5f36:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	7e1b      	ldrb	r3, [r3, #24]
    5f3c:	b2db      	uxtb	r3, r3
    5f3e:	f023 0302 	bic.w	r3, r3, #2
    5f42:	b2da      	uxtb	r2, r3
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	4618      	mov	r0, r3
    5f4c:	4b0a      	ldr	r3, [pc, #40]	; (5f78 <timer_remove_task+0xe8>)
    5f4e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5f50:	f107 030c 	add.w	r3, r7, #12
    5f54:	4618      	mov	r0, r3
    5f56:	4b09      	ldr	r3, [pc, #36]	; (5f7c <timer_remove_task+0xec>)
    5f58:	4798      	blx	r3
	}

	return ERR_NONE;
    5f5a:	2300      	movs	r3, #0
}
    5f5c:	4618      	mov	r0, r3
    5f5e:	3710      	adds	r7, #16
    5f60:	46bd      	mov	sp, r7
    5f62:	bd80      	pop	{r7, pc}
    5f64:	00013b50 	.word	0x00013b50
    5f68:	00006a41 	.word	0x00006a41
    5f6c:	00006a69 	.word	0x00006a69
    5f70:	00006bcb 	.word	0x00006bcb
    5f74:	00004971 	.word	0x00004971
    5f78:	0000b635 	.word	0x0000b635
    5f7c:	00004997 	.word	0x00004997

00005f80 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    5f80:	b580      	push	{r7, lr}
    5f82:	b088      	sub	sp, #32
    5f84:	af00      	add	r7, sp, #0
    5f86:	60f8      	str	r0, [r7, #12]
    5f88:	60b9      	str	r1, [r7, #8]
    5f8a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    5f8c:	2300      	movs	r3, #0
    5f8e:	61bb      	str	r3, [r7, #24]
    5f90:	68f8      	ldr	r0, [r7, #12]
    5f92:	4b23      	ldr	r3, [pc, #140]	; (6020 <timer_add_timer_task+0xa0>)
    5f94:	4798      	blx	r3
    5f96:	6138      	str	r0, [r7, #16]

	if (!head) {
    5f98:	693b      	ldr	r3, [r7, #16]
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d104      	bne.n	5fa8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    5f9e:	68b9      	ldr	r1, [r7, #8]
    5fa0:	68f8      	ldr	r0, [r7, #12]
    5fa2:	4b20      	ldr	r3, [pc, #128]	; (6024 <timer_add_timer_task+0xa4>)
    5fa4:	4798      	blx	r3
		return;
    5fa6:	e037      	b.n	6018 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5fa8:	693b      	ldr	r3, [r7, #16]
    5faa:	61fb      	str	r3, [r7, #28]
    5fac:	e022      	b.n	5ff4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    5fae:	69fb      	ldr	r3, [r7, #28]
    5fb0:	685a      	ldr	r2, [r3, #4]
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	429a      	cmp	r2, r3
    5fb6:	d808      	bhi.n	5fca <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    5fb8:	69fb      	ldr	r3, [r7, #28]
    5fba:	689a      	ldr	r2, [r3, #8]
    5fbc:	69fb      	ldr	r3, [r7, #28]
    5fbe:	6859      	ldr	r1, [r3, #4]
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	1acb      	subs	r3, r1, r3
    5fc4:	4413      	add	r3, r2
    5fc6:	617b      	str	r3, [r7, #20]
    5fc8:	e009      	b.n	5fde <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5fca:	69fb      	ldr	r3, [r7, #28]
    5fcc:	689a      	ldr	r2, [r3, #8]
    5fce:	69fb      	ldr	r3, [r7, #28]
    5fd0:	685b      	ldr	r3, [r3, #4]
    5fd2:	441a      	add	r2, r3
    5fd4:	687b      	ldr	r3, [r7, #4]
    5fd6:	425b      	negs	r3, r3
    5fd8:	4413      	add	r3, r2
    5fda:	3301      	adds	r3, #1
    5fdc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    5fde:	68bb      	ldr	r3, [r7, #8]
    5fe0:	689a      	ldr	r2, [r3, #8]
    5fe2:	697b      	ldr	r3, [r7, #20]
    5fe4:	429a      	cmp	r2, r3
    5fe6:	d909      	bls.n	5ffc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    5fe8:	69fb      	ldr	r3, [r7, #28]
    5fea:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5fec:	69f8      	ldr	r0, [r7, #28]
    5fee:	4b0e      	ldr	r3, [pc, #56]	; (6028 <timer_add_timer_task+0xa8>)
    5ff0:	4798      	blx	r3
    5ff2:	61f8      	str	r0, [r7, #28]
    5ff4:	69fb      	ldr	r3, [r7, #28]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d1d9      	bne.n	5fae <timer_add_timer_task+0x2e>
    5ffa:	e000      	b.n	5ffe <timer_add_timer_task+0x7e>
			break;
    5ffc:	bf00      	nop
	}

	if (it == head) {
    5ffe:	69fa      	ldr	r2, [r7, #28]
    6000:	693b      	ldr	r3, [r7, #16]
    6002:	429a      	cmp	r2, r3
    6004:	d104      	bne.n	6010 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    6006:	68b9      	ldr	r1, [r7, #8]
    6008:	68f8      	ldr	r0, [r7, #12]
    600a:	4b06      	ldr	r3, [pc, #24]	; (6024 <timer_add_timer_task+0xa4>)
    600c:	4798      	blx	r3
    600e:	e003      	b.n	6018 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    6010:	68b9      	ldr	r1, [r7, #8]
    6012:	69b8      	ldr	r0, [r7, #24]
    6014:	4b05      	ldr	r3, [pc, #20]	; (602c <timer_add_timer_task+0xac>)
    6016:	4798      	blx	r3
	}
}
    6018:	3720      	adds	r7, #32
    601a:	46bd      	mov	sp, r7
    601c:	bd80      	pop	{r7, pc}
    601e:	bf00      	nop
    6020:	00005c4d 	.word	0x00005c4d
    6024:	00006aa1 	.word	0x00006aa1
    6028:	00005c65 	.word	0x00005c65
    602c:	00006af9 	.word	0x00006af9

00006030 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    6030:	b580      	push	{r7, lr}
    6032:	b086      	sub	sp, #24
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    603c:	693b      	ldr	r3, [r7, #16]
    603e:	3314      	adds	r3, #20
    6040:	4618      	mov	r0, r3
    6042:	4b27      	ldr	r3, [pc, #156]	; (60e0 <timer_process_counted+0xb0>)
    6044:	4798      	blx	r3
    6046:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    6048:	693b      	ldr	r3, [r7, #16]
    604a:	691b      	ldr	r3, [r3, #16]
    604c:	1c5a      	adds	r2, r3, #1
    604e:	693b      	ldr	r3, [r7, #16]
    6050:	611a      	str	r2, [r3, #16]
    6052:	693b      	ldr	r3, [r7, #16]
    6054:	691b      	ldr	r3, [r3, #16]
    6056:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    6058:	693b      	ldr	r3, [r7, #16]
    605a:	7e1b      	ldrb	r3, [r3, #24]
    605c:	b2db      	uxtb	r3, r3
    605e:	f003 0301 	and.w	r3, r3, #1
    6062:	2b00      	cmp	r3, #0
    6064:	d106      	bne.n	6074 <timer_process_counted+0x44>
    6066:	693b      	ldr	r3, [r7, #16]
    6068:	7e1b      	ldrb	r3, [r3, #24]
    606a:	b2db      	uxtb	r3, r3
    606c:	f003 0302 	and.w	r3, r3, #2
    6070:	2b00      	cmp	r3, #0
    6072:	d027      	beq.n	60c4 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    6074:	693b      	ldr	r3, [r7, #16]
    6076:	7e1b      	ldrb	r3, [r3, #24]
    6078:	b2db      	uxtb	r3, r3
    607a:	f043 0302 	orr.w	r3, r3, #2
    607e:	b2da      	uxtb	r2, r3
    6080:	693b      	ldr	r3, [r7, #16]
    6082:	761a      	strb	r2, [r3, #24]
		return;
    6084:	e029      	b.n	60da <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    6086:	697b      	ldr	r3, [r7, #20]
    6088:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    608a:	693b      	ldr	r3, [r7, #16]
    608c:	3314      	adds	r3, #20
    608e:	4618      	mov	r0, r3
    6090:	4b14      	ldr	r3, [pc, #80]	; (60e4 <timer_process_counted+0xb4>)
    6092:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6094:	68bb      	ldr	r3, [r7, #8]
    6096:	7c1b      	ldrb	r3, [r3, #16]
    6098:	2b01      	cmp	r3, #1
    609a:	d109      	bne.n	60b0 <timer_process_counted+0x80>
			tmp->time_label = time;
    609c:	68bb      	ldr	r3, [r7, #8]
    609e:	68fa      	ldr	r2, [r7, #12]
    60a0:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    60a2:	693b      	ldr	r3, [r7, #16]
    60a4:	3314      	adds	r3, #20
    60a6:	68fa      	ldr	r2, [r7, #12]
    60a8:	68b9      	ldr	r1, [r7, #8]
    60aa:	4618      	mov	r0, r3
    60ac:	4b0e      	ldr	r3, [pc, #56]	; (60e8 <timer_process_counted+0xb8>)
    60ae:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    60b0:	693b      	ldr	r3, [r7, #16]
    60b2:	3314      	adds	r3, #20
    60b4:	4618      	mov	r0, r3
    60b6:	4b0a      	ldr	r3, [pc, #40]	; (60e0 <timer_process_counted+0xb0>)
    60b8:	4798      	blx	r3
    60ba:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    60bc:	68bb      	ldr	r3, [r7, #8]
    60be:	68db      	ldr	r3, [r3, #12]
    60c0:	68b8      	ldr	r0, [r7, #8]
    60c2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    60c4:	697b      	ldr	r3, [r7, #20]
    60c6:	2b00      	cmp	r3, #0
    60c8:	d007      	beq.n	60da <timer_process_counted+0xaa>
    60ca:	697b      	ldr	r3, [r7, #20]
    60cc:	685b      	ldr	r3, [r3, #4]
    60ce:	68fa      	ldr	r2, [r7, #12]
    60d0:	1ad2      	subs	r2, r2, r3
    60d2:	697b      	ldr	r3, [r7, #20]
    60d4:	689b      	ldr	r3, [r3, #8]
    60d6:	429a      	cmp	r2, r3
    60d8:	d2d5      	bcs.n	6086 <timer_process_counted+0x56>
	}
}
    60da:	3718      	adds	r7, #24
    60dc:	46bd      	mov	sp, r7
    60de:	bd80      	pop	{r7, pc}
    60e0:	00005c4d 	.word	0x00005c4d
    60e4:	00006b99 	.word	0x00006b99
    60e8:	00005f81 	.word	0x00005f81

000060ec <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    60ec:	b480      	push	{r7}
    60ee:	b085      	sub	sp, #20
    60f0:	af00      	add	r7, sp, #0
    60f2:	4603      	mov	r3, r0
    60f4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    60f6:	2300      	movs	r3, #0
    60f8:	73fb      	strb	r3, [r7, #15]
    60fa:	e029      	b.n	6150 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    60fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6100:	4a19      	ldr	r2, [pc, #100]	; (6168 <_usb_d_find_ep+0x7c>)
    6102:	015b      	lsls	r3, r3, #5
    6104:	4413      	add	r3, r2
    6106:	3301      	adds	r3, #1
    6108:	781b      	ldrb	r3, [r3, #0]
    610a:	79fa      	ldrb	r2, [r7, #7]
    610c:	429a      	cmp	r2, r3
    610e:	d102      	bne.n	6116 <_usb_d_find_ep+0x2a>
			return i;
    6110:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6114:	e022      	b.n	615c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    6116:	f997 300f 	ldrsb.w	r3, [r7, #15]
    611a:	4a13      	ldr	r2, [pc, #76]	; (6168 <_usb_d_find_ep+0x7c>)
    611c:	015b      	lsls	r3, r3, #5
    611e:	4413      	add	r3, r2
    6120:	781b      	ldrb	r3, [r3, #0]
    6122:	2b00      	cmp	r3, #0
    6124:	d10e      	bne.n	6144 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6126:	79fb      	ldrb	r3, [r7, #7]
    6128:	f003 030f 	and.w	r3, r3, #15
    612c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6130:	490d      	ldr	r1, [pc, #52]	; (6168 <_usb_d_find_ep+0x7c>)
    6132:	0152      	lsls	r2, r2, #5
    6134:	440a      	add	r2, r1
    6136:	3201      	adds	r2, #1
    6138:	7812      	ldrb	r2, [r2, #0]
    613a:	4293      	cmp	r3, r2
    613c:	d102      	bne.n	6144 <_usb_d_find_ep+0x58>
			return i;
    613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6142:	e00b      	b.n	615c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6144:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6148:	b2db      	uxtb	r3, r3
    614a:	3301      	adds	r3, #1
    614c:	b2db      	uxtb	r3, r3
    614e:	73fb      	strb	r3, [r7, #15]
    6150:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6154:	2b03      	cmp	r3, #3
    6156:	ddd1      	ble.n	60fc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    6158:	f04f 33ff 	mov.w	r3, #4294967295
}
    615c:	4618      	mov	r0, r3
    615e:	3714      	adds	r7, #20
    6160:	46bd      	mov	sp, r7
    6162:	f85d 7b04 	ldr.w	r7, [sp], #4
    6166:	4770      	bx	lr
    6168:	200018f4 	.word	0x200018f4

0000616c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    616c:	b580      	push	{r7, lr}
    616e:	b088      	sub	sp, #32
    6170:	af00      	add	r7, sp, #0
    6172:	60ba      	str	r2, [r7, #8]
    6174:	607b      	str	r3, [r7, #4]
    6176:	4603      	mov	r3, r0
    6178:	73fb      	strb	r3, [r7, #15]
    617a:	460b      	mov	r3, r1
    617c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    617e:	68bb      	ldr	r3, [r7, #8]
    6180:	617b      	str	r3, [r7, #20]
    6182:	687b      	ldr	r3, [r7, #4]
    6184:	61bb      	str	r3, [r7, #24]
    6186:	7bbb      	ldrb	r3, [r7, #14]
    6188:	2b00      	cmp	r3, #0
    618a:	d004      	beq.n	6196 <_usb_d_trans+0x2a>
    618c:	7bfb      	ldrb	r3, [r7, #15]
    618e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6192:	b2db      	uxtb	r3, r3
    6194:	e003      	b.n	619e <_usb_d_trans+0x32>
    6196:	7bfb      	ldrb	r3, [r7, #15]
    6198:	f003 030f 	and.w	r3, r3, #15
    619c:	b2db      	uxtb	r3, r3
    619e:	773b      	strb	r3, [r7, #28]
    61a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    61a4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    61a6:	f107 0314 	add.w	r3, r7, #20
    61aa:	4618      	mov	r0, r3
    61ac:	4b03      	ldr	r3, [pc, #12]	; (61bc <_usb_d_trans+0x50>)
    61ae:	4798      	blx	r3
    61b0:	4603      	mov	r3, r0
}
    61b2:	4618      	mov	r0, r3
    61b4:	3720      	adds	r7, #32
    61b6:	46bd      	mov	sp, r7
    61b8:	bd80      	pop	{r7, pc}
    61ba:	bf00      	nop
    61bc:	0000ddb5 	.word	0x0000ddb5

000061c0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    61c0:	b480      	push	{r7}
    61c2:	b085      	sub	sp, #20
    61c4:	af00      	add	r7, sp, #0
    61c6:	60f8      	str	r0, [r7, #12]
    61c8:	60b9      	str	r1, [r7, #8]
    61ca:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    61cc:	2300      	movs	r3, #0
}
    61ce:	4618      	mov	r0, r3
    61d0:	3714      	adds	r7, #20
    61d2:	46bd      	mov	sp, r7
    61d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    61d8:	4770      	bx	lr
	...

000061dc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    61dc:	b580      	push	{r7, lr}
    61de:	b086      	sub	sp, #24
    61e0:	af00      	add	r7, sp, #0
    61e2:	4603      	mov	r3, r0
    61e4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    61e6:	79fb      	ldrb	r3, [r7, #7]
    61e8:	4618      	mov	r0, r3
    61ea:	4b2a      	ldr	r3, [pc, #168]	; (6294 <usb_d_cb_trans_setup+0xb8>)
    61ec:	4798      	blx	r3
    61ee:	4603      	mov	r3, r0
    61f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    61f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    61f6:	015b      	lsls	r3, r3, #5
    61f8:	4a27      	ldr	r2, [pc, #156]	; (6298 <usb_d_cb_trans_setup+0xbc>)
    61fa:	4413      	add	r3, r2
    61fc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    61fe:	693b      	ldr	r3, [r7, #16]
    6200:	330c      	adds	r3, #12
    6202:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6204:	79fb      	ldrb	r3, [r7, #7]
    6206:	68f9      	ldr	r1, [r7, #12]
    6208:	4618      	mov	r0, r3
    620a:	4b24      	ldr	r3, [pc, #144]	; (629c <usb_d_cb_trans_setup+0xc0>)
    620c:	4798      	blx	r3
    620e:	4603      	mov	r3, r0
    6210:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    6212:	7afb      	ldrb	r3, [r7, #11]
    6214:	2b08      	cmp	r3, #8
    6216:	d00d      	beq.n	6234 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6218:	79fb      	ldrb	r3, [r7, #7]
    621a:	2101      	movs	r1, #1
    621c:	4618      	mov	r0, r3
    621e:	4b20      	ldr	r3, [pc, #128]	; (62a0 <usb_d_cb_trans_setup+0xc4>)
    6220:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6222:	79fb      	ldrb	r3, [r7, #7]
    6224:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6228:	b2db      	uxtb	r3, r3
    622a:	2101      	movs	r1, #1
    622c:	4618      	mov	r0, r3
    622e:	4b1c      	ldr	r3, [pc, #112]	; (62a0 <usb_d_cb_trans_setup+0xc4>)
    6230:	4798      	blx	r3
		return;
    6232:	e02b      	b.n	628c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6234:	79fb      	ldrb	r3, [r7, #7]
    6236:	2100      	movs	r1, #0
    6238:	4618      	mov	r0, r3
    623a:	4b19      	ldr	r3, [pc, #100]	; (62a0 <usb_d_cb_trans_setup+0xc4>)
    623c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    623e:	79fb      	ldrb	r3, [r7, #7]
    6240:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6244:	b2db      	uxtb	r3, r3
    6246:	2100      	movs	r1, #0
    6248:	4618      	mov	r0, r3
    624a:	4b15      	ldr	r3, [pc, #84]	; (62a0 <usb_d_cb_trans_setup+0xc4>)
    624c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    624e:	693b      	ldr	r3, [r7, #16]
    6250:	2201      	movs	r2, #1
    6252:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    6254:	693b      	ldr	r3, [r7, #16]
    6256:	695b      	ldr	r3, [r3, #20]
    6258:	79fa      	ldrb	r2, [r7, #7]
    625a:	68f9      	ldr	r1, [r7, #12]
    625c:	4610      	mov	r0, r2
    625e:	4798      	blx	r3
    6260:	4603      	mov	r3, r0
    6262:	f083 0301 	eor.w	r3, r3, #1
    6266:	b2db      	uxtb	r3, r3
    6268:	2b00      	cmp	r3, #0
    626a:	d00f      	beq.n	628c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    626c:	693b      	ldr	r3, [r7, #16]
    626e:	2205      	movs	r2, #5
    6270:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6272:	79fb      	ldrb	r3, [r7, #7]
    6274:	2101      	movs	r1, #1
    6276:	4618      	mov	r0, r3
    6278:	4b09      	ldr	r3, [pc, #36]	; (62a0 <usb_d_cb_trans_setup+0xc4>)
    627a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    627c:	79fb      	ldrb	r3, [r7, #7]
    627e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6282:	b2db      	uxtb	r3, r3
    6284:	2101      	movs	r1, #1
    6286:	4618      	mov	r0, r3
    6288:	4b05      	ldr	r3, [pc, #20]	; (62a0 <usb_d_cb_trans_setup+0xc4>)
    628a:	4798      	blx	r3
	}
}
    628c:	3718      	adds	r7, #24
    628e:	46bd      	mov	sp, r7
    6290:	bd80      	pop	{r7, pc}
    6292:	bf00      	nop
    6294:	000060ed 	.word	0x000060ed
    6298:	200018f4 	.word	0x200018f4
    629c:	0000dd0d 	.word	0x0000dd0d
    62a0:	0000db85 	.word	0x0000db85

000062a4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    62a4:	b580      	push	{r7, lr}
    62a6:	b084      	sub	sp, #16
    62a8:	af00      	add	r7, sp, #0
    62aa:	4603      	mov	r3, r0
    62ac:	6039      	str	r1, [r7, #0]
    62ae:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    62b0:	79fb      	ldrb	r3, [r7, #7]
    62b2:	4618      	mov	r0, r3
    62b4:	4b0d      	ldr	r3, [pc, #52]	; (62ec <usb_d_cb_trans_more+0x48>)
    62b6:	4798      	blx	r3
    62b8:	4603      	mov	r3, r0
    62ba:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    62bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    62c0:	015b      	lsls	r3, r3, #5
    62c2:	4a0b      	ldr	r2, [pc, #44]	; (62f0 <usb_d_cb_trans_more+0x4c>)
    62c4:	4413      	add	r3, r2
    62c6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    62c8:	68bb      	ldr	r3, [r7, #8]
    62ca:	789b      	ldrb	r3, [r3, #2]
    62cc:	2b03      	cmp	r3, #3
    62ce:	d107      	bne.n	62e0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    62d0:	68bb      	ldr	r3, [r7, #8]
    62d2:	699b      	ldr	r3, [r3, #24]
    62d4:	79fa      	ldrb	r2, [r7, #7]
    62d6:	6839      	ldr	r1, [r7, #0]
    62d8:	4610      	mov	r0, r2
    62da:	4798      	blx	r3
    62dc:	4603      	mov	r3, r0
    62de:	e000      	b.n	62e2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    62e0:	2300      	movs	r3, #0
}
    62e2:	4618      	mov	r0, r3
    62e4:	3710      	adds	r7, #16
    62e6:	46bd      	mov	sp, r7
    62e8:	bd80      	pop	{r7, pc}
    62ea:	bf00      	nop
    62ec:	000060ed 	.word	0x000060ed
    62f0:	200018f4 	.word	0x200018f4

000062f4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    62f4:	b590      	push	{r4, r7, lr}
    62f6:	b087      	sub	sp, #28
    62f8:	af02      	add	r7, sp, #8
    62fa:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    62fc:	687b      	ldr	r3, [r7, #4]
    62fe:	789b      	ldrb	r3, [r3, #2]
    6300:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	7b1b      	ldrb	r3, [r3, #12]
    6306:	f003 0380 	and.w	r3, r3, #128	; 0x80
    630a:	2b00      	cmp	r3, #0
    630c:	bf14      	ite	ne
    630e:	2301      	movne	r3, #1
    6310:	2300      	moveq	r3, #0
    6312:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    6314:	7bfb      	ldrb	r3, [r7, #15]
    6316:	2b03      	cmp	r3, #3
    6318:	d13a      	bne.n	6390 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	69db      	ldr	r3, [r3, #28]
    631e:	687a      	ldr	r2, [r7, #4]
    6320:	7850      	ldrb	r0, [r2, #1]
    6322:	687a      	ldr	r2, [r7, #4]
    6324:	320c      	adds	r2, #12
    6326:	2101      	movs	r1, #1
    6328:	4798      	blx	r3
    632a:	4603      	mov	r3, r0
    632c:	737b      	strb	r3, [r7, #13]
		if (err) {
    632e:	7b7b      	ldrb	r3, [r7, #13]
    6330:	2b00      	cmp	r3, #0
    6332:	d015      	beq.n	6360 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	2205      	movs	r2, #5
    6338:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    633a:	687b      	ldr	r3, [r7, #4]
    633c:	2202      	movs	r2, #2
    633e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    6340:	7bbb      	ldrb	r3, [r7, #14]
    6342:	2b00      	cmp	r3, #0
    6344:	d002      	beq.n	634c <usb_d_ctrl_trans_done+0x58>
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	785b      	ldrb	r3, [r3, #1]
    634a:	e004      	b.n	6356 <usb_d_ctrl_trans_done+0x62>
    634c:	687b      	ldr	r3, [r7, #4]
    634e:	785b      	ldrb	r3, [r3, #1]
    6350:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6354:	b2db      	uxtb	r3, r3
    6356:	2101      	movs	r1, #1
    6358:	4618      	mov	r0, r3
    635a:	4b15      	ldr	r3, [pc, #84]	; (63b0 <usb_d_ctrl_trans_done+0xbc>)
    635c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    635e:	e022      	b.n	63a6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	2204      	movs	r2, #4
    6364:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	7858      	ldrb	r0, [r3, #1]
    636a:	7bbb      	ldrb	r3, [r7, #14]
    636c:	2b00      	cmp	r3, #0
    636e:	bf14      	ite	ne
    6370:	2301      	movne	r3, #1
    6372:	2300      	moveq	r3, #0
    6374:	b2db      	uxtb	r3, r3
    6376:	f083 0301 	eor.w	r3, r3, #1
    637a:	b2db      	uxtb	r3, r3
    637c:	f003 0301 	and.w	r3, r3, #1
    6380:	b2d9      	uxtb	r1, r3
    6382:	2301      	movs	r3, #1
    6384:	9300      	str	r3, [sp, #0]
    6386:	2300      	movs	r3, #0
    6388:	2200      	movs	r2, #0
    638a:	4c0a      	ldr	r4, [pc, #40]	; (63b4 <usb_d_ctrl_trans_done+0xc0>)
    638c:	47a0      	blx	r4
}
    638e:	e00a      	b.n	63a6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	69db      	ldr	r3, [r3, #28]
    6394:	687a      	ldr	r2, [r7, #4]
    6396:	7850      	ldrb	r0, [r2, #1]
    6398:	687a      	ldr	r2, [r7, #4]
    639a:	320c      	adds	r2, #12
    639c:	2100      	movs	r1, #0
    639e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	2202      	movs	r2, #2
    63a4:	709a      	strb	r2, [r3, #2]
}
    63a6:	bf00      	nop
    63a8:	3714      	adds	r7, #20
    63aa:	46bd      	mov	sp, r7
    63ac:	bd90      	pop	{r4, r7, pc}
    63ae:	bf00      	nop
    63b0:	0000db85 	.word	0x0000db85
    63b4:	0000616d 	.word	0x0000616d

000063b8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    63b8:	b580      	push	{r7, lr}
    63ba:	b086      	sub	sp, #24
    63bc:	af00      	add	r7, sp, #0
    63be:	4603      	mov	r3, r0
    63c0:	60b9      	str	r1, [r7, #8]
    63c2:	607a      	str	r2, [r7, #4]
    63c4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    63c6:	7bfb      	ldrb	r3, [r7, #15]
    63c8:	4618      	mov	r0, r3
    63ca:	4b2f      	ldr	r3, [pc, #188]	; (6488 <_usb_d_cb_trans_done+0xd0>)
    63cc:	4798      	blx	r3
    63ce:	4603      	mov	r3, r0
    63d0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    63d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    63d6:	015b      	lsls	r3, r3, #5
    63d8:	4a2c      	ldr	r2, [pc, #176]	; (648c <_usb_d_cb_trans_done+0xd4>)
    63da:	4413      	add	r3, r2
    63dc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    63de:	68bb      	ldr	r3, [r7, #8]
    63e0:	2b00      	cmp	r3, #0
    63e2:	d10e      	bne.n	6402 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    63e4:	693b      	ldr	r3, [r7, #16]
    63e6:	2200      	movs	r2, #0
    63e8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    63ea:	693b      	ldr	r3, [r7, #16]
    63ec:	781b      	ldrb	r3, [r3, #0]
    63ee:	2b00      	cmp	r3, #0
    63f0:	d103      	bne.n	63fa <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    63f2:	6938      	ldr	r0, [r7, #16]
    63f4:	4b26      	ldr	r3, [pc, #152]	; (6490 <_usb_d_cb_trans_done+0xd8>)
    63f6:	4798      	blx	r3
			return;
    63f8:	e043      	b.n	6482 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    63fa:	693b      	ldr	r3, [r7, #16]
    63fc:	2201      	movs	r2, #1
    63fe:	709a      	strb	r2, [r3, #2]
    6400:	e038      	b.n	6474 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    6402:	68bb      	ldr	r3, [r7, #8]
    6404:	2b01      	cmp	r3, #1
    6406:	d113      	bne.n	6430 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6408:	693b      	ldr	r3, [r7, #16]
    640a:	2202      	movs	r2, #2
    640c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    640e:	693b      	ldr	r3, [r7, #16]
    6410:	781b      	ldrb	r3, [r3, #0]
    6412:	2b00      	cmp	r3, #0
    6414:	d108      	bne.n	6428 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6416:	693b      	ldr	r3, [r7, #16]
    6418:	2202      	movs	r2, #2
    641a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    641c:	7bfb      	ldrb	r3, [r7, #15]
    641e:	2100      	movs	r1, #0
    6420:	4618      	mov	r0, r3
    6422:	4b1c      	ldr	r3, [pc, #112]	; (6494 <_usb_d_cb_trans_done+0xdc>)
    6424:	4798      	blx	r3
    6426:	e025      	b.n	6474 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6428:	693b      	ldr	r3, [r7, #16]
    642a:	2205      	movs	r2, #5
    642c:	709a      	strb	r2, [r3, #2]
    642e:	e021      	b.n	6474 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    6430:	68bb      	ldr	r3, [r7, #8]
    6432:	2b02      	cmp	r3, #2
    6434:	d10e      	bne.n	6454 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    6436:	693b      	ldr	r3, [r7, #16]
    6438:	2204      	movs	r2, #4
    643a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    643c:	693b      	ldr	r3, [r7, #16]
    643e:	781b      	ldrb	r3, [r3, #0]
    6440:	2b00      	cmp	r3, #0
    6442:	d103      	bne.n	644c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6444:	693b      	ldr	r3, [r7, #16]
    6446:	2202      	movs	r2, #2
    6448:	709a      	strb	r2, [r3, #2]
			return;
    644a:	e01a      	b.n	6482 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    644c:	693b      	ldr	r3, [r7, #16]
    644e:	2201      	movs	r2, #1
    6450:	709a      	strb	r2, [r3, #2]
    6452:	e00f      	b.n	6474 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    6454:	68bb      	ldr	r3, [r7, #8]
    6456:	2b03      	cmp	r3, #3
    6458:	d106      	bne.n	6468 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    645a:	693b      	ldr	r3, [r7, #16]
    645c:	2200      	movs	r2, #0
    645e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6460:	693b      	ldr	r3, [r7, #16]
    6462:	2205      	movs	r2, #5
    6464:	70da      	strb	r2, [r3, #3]
    6466:	e005      	b.n	6474 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6468:	693b      	ldr	r3, [r7, #16]
    646a:	2206      	movs	r2, #6
    646c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    646e:	693b      	ldr	r3, [r7, #16]
    6470:	2206      	movs	r2, #6
    6472:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6474:	693b      	ldr	r3, [r7, #16]
    6476:	69db      	ldr	r3, [r3, #28]
    6478:	693a      	ldr	r2, [r7, #16]
    647a:	78d1      	ldrb	r1, [r2, #3]
    647c:	687a      	ldr	r2, [r7, #4]
    647e:	7bf8      	ldrb	r0, [r7, #15]
    6480:	4798      	blx	r3
}
    6482:	3718      	adds	r7, #24
    6484:	46bd      	mov	sp, r7
    6486:	bd80      	pop	{r7, pc}
    6488:	000060ed 	.word	0x000060ed
    648c:	200018f4 	.word	0x200018f4
    6490:	000062f5 	.word	0x000062f5
    6494:	0000db85 	.word	0x0000db85

00006498 <usb_d_init>:

int32_t usb_d_init(void)
{
    6498:	b580      	push	{r7, lr}
    649a:	b082      	sub	sp, #8
    649c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    649e:	4b21      	ldr	r3, [pc, #132]	; (6524 <usb_d_init+0x8c>)
    64a0:	4798      	blx	r3
    64a2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    64a4:	683b      	ldr	r3, [r7, #0]
    64a6:	2b00      	cmp	r3, #0
    64a8:	da01      	bge.n	64ae <usb_d_init+0x16>
		return rc;
    64aa:	683b      	ldr	r3, [r7, #0]
    64ac:	e036      	b.n	651c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    64ae:	2280      	movs	r2, #128	; 0x80
    64b0:	2100      	movs	r1, #0
    64b2:	481d      	ldr	r0, [pc, #116]	; (6528 <usb_d_init+0x90>)
    64b4:	4b1d      	ldr	r3, [pc, #116]	; (652c <usb_d_init+0x94>)
    64b6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    64b8:	2300      	movs	r3, #0
    64ba:	71fb      	strb	r3, [r7, #7]
    64bc:	e01e      	b.n	64fc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    64be:	79fb      	ldrb	r3, [r7, #7]
    64c0:	4a19      	ldr	r2, [pc, #100]	; (6528 <usb_d_init+0x90>)
    64c2:	015b      	lsls	r3, r3, #5
    64c4:	4413      	add	r3, r2
    64c6:	3301      	adds	r3, #1
    64c8:	22ff      	movs	r2, #255	; 0xff
    64ca:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    64cc:	79fb      	ldrb	r3, [r7, #7]
    64ce:	4a16      	ldr	r2, [pc, #88]	; (6528 <usb_d_init+0x90>)
    64d0:	015b      	lsls	r3, r3, #5
    64d2:	4413      	add	r3, r2
    64d4:	3314      	adds	r3, #20
    64d6:	4a16      	ldr	r2, [pc, #88]	; (6530 <usb_d_init+0x98>)
    64d8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    64da:	79fb      	ldrb	r3, [r7, #7]
    64dc:	4a12      	ldr	r2, [pc, #72]	; (6528 <usb_d_init+0x90>)
    64de:	015b      	lsls	r3, r3, #5
    64e0:	4413      	add	r3, r2
    64e2:	3318      	adds	r3, #24
    64e4:	4a12      	ldr	r2, [pc, #72]	; (6530 <usb_d_init+0x98>)
    64e6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    64e8:	79fb      	ldrb	r3, [r7, #7]
    64ea:	4a0f      	ldr	r2, [pc, #60]	; (6528 <usb_d_init+0x90>)
    64ec:	015b      	lsls	r3, r3, #5
    64ee:	4413      	add	r3, r2
    64f0:	331c      	adds	r3, #28
    64f2:	4a0f      	ldr	r2, [pc, #60]	; (6530 <usb_d_init+0x98>)
    64f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    64f6:	79fb      	ldrb	r3, [r7, #7]
    64f8:	3301      	adds	r3, #1
    64fa:	71fb      	strb	r3, [r7, #7]
    64fc:	79fb      	ldrb	r3, [r7, #7]
    64fe:	2b03      	cmp	r3, #3
    6500:	d9dd      	bls.n	64be <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6502:	490c      	ldr	r1, [pc, #48]	; (6534 <usb_d_init+0x9c>)
    6504:	2000      	movs	r0, #0
    6506:	4b0c      	ldr	r3, [pc, #48]	; (6538 <usb_d_init+0xa0>)
    6508:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    650a:	490c      	ldr	r1, [pc, #48]	; (653c <usb_d_init+0xa4>)
    650c:	2001      	movs	r0, #1
    650e:	4b0a      	ldr	r3, [pc, #40]	; (6538 <usb_d_init+0xa0>)
    6510:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6512:	490b      	ldr	r1, [pc, #44]	; (6540 <usb_d_init+0xa8>)
    6514:	2002      	movs	r0, #2
    6516:	4b08      	ldr	r3, [pc, #32]	; (6538 <usb_d_init+0xa0>)
    6518:	4798      	blx	r3
	return ERR_NONE;
    651a:	2300      	movs	r3, #0
}
    651c:	4618      	mov	r0, r3
    651e:	3708      	adds	r7, #8
    6520:	46bd      	mov	sp, r7
    6522:	bd80      	pop	{r7, pc}
    6524:	0000d3cd 	.word	0x0000d3cd
    6528:	200018f4 	.word	0x200018f4
    652c:	000126d9 	.word	0x000126d9
    6530:	000061c1 	.word	0x000061c1
    6534:	000061dd 	.word	0x000061dd
    6538:	0000e015 	.word	0x0000e015
    653c:	000062a5 	.word	0x000062a5
    6540:	000063b9 	.word	0x000063b9

00006544 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    6544:	b580      	push	{r7, lr}
    6546:	b082      	sub	sp, #8
    6548:	af00      	add	r7, sp, #0
    654a:	4603      	mov	r3, r0
    654c:	6039      	str	r1, [r7, #0]
    654e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    6550:	79fb      	ldrb	r3, [r7, #7]
    6552:	6839      	ldr	r1, [r7, #0]
    6554:	4618      	mov	r0, r3
    6556:	4b03      	ldr	r3, [pc, #12]	; (6564 <usb_d_register_callback+0x20>)
    6558:	4798      	blx	r3
}
    655a:	bf00      	nop
    655c:	3708      	adds	r7, #8
    655e:	46bd      	mov	sp, r7
    6560:	bd80      	pop	{r7, pc}
    6562:	bf00      	nop
    6564:	0000dfcd 	.word	0x0000dfcd

00006568 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    6568:	b580      	push	{r7, lr}
    656a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    656c:	4b02      	ldr	r3, [pc, #8]	; (6578 <usb_d_enable+0x10>)
    656e:	4798      	blx	r3
    6570:	4603      	mov	r3, r0
}
    6572:	4618      	mov	r0, r3
    6574:	bd80      	pop	{r7, pc}
    6576:	bf00      	nop
    6578:	0000d4bd 	.word	0x0000d4bd

0000657c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    657c:	b580      	push	{r7, lr}
    657e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    6580:	4b01      	ldr	r3, [pc, #4]	; (6588 <usb_d_attach+0xc>)
    6582:	4798      	blx	r3
}
    6584:	bf00      	nop
    6586:	bd80      	pop	{r7, pc}
    6588:	0000d541 	.word	0x0000d541

0000658c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    658c:	b580      	push	{r7, lr}
    658e:	b082      	sub	sp, #8
    6590:	af00      	add	r7, sp, #0
    6592:	4603      	mov	r3, r0
    6594:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    6596:	79fb      	ldrb	r3, [r7, #7]
    6598:	4618      	mov	r0, r3
    659a:	4b03      	ldr	r3, [pc, #12]	; (65a8 <usb_d_set_address+0x1c>)
    659c:	4798      	blx	r3
}
    659e:	bf00      	nop
    65a0:	3708      	adds	r7, #8
    65a2:	46bd      	mov	sp, r7
    65a4:	bd80      	pop	{r7, pc}
    65a6:	bf00      	nop
    65a8:	0000d555 	.word	0x0000d555

000065ac <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	b082      	sub	sp, #8
    65b0:	af00      	add	r7, sp, #0
    65b2:	4603      	mov	r3, r0
    65b4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    65b6:	79fb      	ldrb	r3, [r7, #7]
    65b8:	b29b      	uxth	r3, r3
    65ba:	461a      	mov	r2, r3
    65bc:	2100      	movs	r1, #0
    65be:	2000      	movs	r0, #0
    65c0:	4b03      	ldr	r3, [pc, #12]	; (65d0 <usb_d_ep0_init+0x24>)
    65c2:	4798      	blx	r3
    65c4:	4603      	mov	r3, r0
}
    65c6:	4618      	mov	r0, r3
    65c8:	3708      	adds	r7, #8
    65ca:	46bd      	mov	sp, r7
    65cc:	bd80      	pop	{r7, pc}
    65ce:	bf00      	nop
    65d0:	000065d5 	.word	0x000065d5

000065d4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    65d4:	b580      	push	{r7, lr}
    65d6:	b086      	sub	sp, #24
    65d8:	af00      	add	r7, sp, #0
    65da:	4603      	mov	r3, r0
    65dc:	71fb      	strb	r3, [r7, #7]
    65de:	460b      	mov	r3, r1
    65e0:	71bb      	strb	r3, [r7, #6]
    65e2:	4613      	mov	r3, r2
    65e4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    65e6:	79fb      	ldrb	r3, [r7, #7]
    65e8:	4618      	mov	r0, r3
    65ea:	4b1e      	ldr	r3, [pc, #120]	; (6664 <usb_d_ep_init+0x90>)
    65ec:	4798      	blx	r3
    65ee:	4603      	mov	r3, r0
    65f0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    65f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    65f6:	015b      	lsls	r3, r3, #5
    65f8:	4a1b      	ldr	r2, [pc, #108]	; (6668 <usb_d_ep_init+0x94>)
    65fa:	4413      	add	r3, r2
    65fc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    65fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6602:	2b00      	cmp	r3, #0
    6604:	db02      	blt.n	660c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    6606:	f06f 0313 	mvn.w	r3, #19
    660a:	e027      	b.n	665c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    660c:	20ff      	movs	r0, #255	; 0xff
    660e:	4b15      	ldr	r3, [pc, #84]	; (6664 <usb_d_ep_init+0x90>)
    6610:	4798      	blx	r3
    6612:	4603      	mov	r3, r0
    6614:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    6616:	f997 3017 	ldrsb.w	r3, [r7, #23]
    661a:	2b00      	cmp	r3, #0
    661c:	da02      	bge.n	6624 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    661e:	f06f 0314 	mvn.w	r3, #20
    6622:	e01b      	b.n	665c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    6624:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6628:	015b      	lsls	r3, r3, #5
    662a:	4a0f      	ldr	r2, [pc, #60]	; (6668 <usb_d_ep_init+0x94>)
    662c:	4413      	add	r3, r2
    662e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    6630:	88ba      	ldrh	r2, [r7, #4]
    6632:	79b9      	ldrb	r1, [r7, #6]
    6634:	79fb      	ldrb	r3, [r7, #7]
    6636:	4618      	mov	r0, r3
    6638:	4b0c      	ldr	r3, [pc, #48]	; (666c <usb_d_ep_init+0x98>)
    663a:	4798      	blx	r3
    663c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    663e:	68fb      	ldr	r3, [r7, #12]
    6640:	2b00      	cmp	r3, #0
    6642:	da01      	bge.n	6648 <usb_d_ep_init+0x74>
		return rc;
    6644:	68fb      	ldr	r3, [r7, #12]
    6646:	e009      	b.n	665c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    6648:	693b      	ldr	r3, [r7, #16]
    664a:	79fa      	ldrb	r2, [r7, #7]
    664c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    664e:	79bb      	ldrb	r3, [r7, #6]
    6650:	f003 0303 	and.w	r3, r3, #3
    6654:	b2da      	uxtb	r2, r3
    6656:	693b      	ldr	r3, [r7, #16]
    6658:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    665a:	2300      	movs	r3, #0
}
    665c:	4618      	mov	r0, r3
    665e:	3718      	adds	r7, #24
    6660:	46bd      	mov	sp, r7
    6662:	bd80      	pop	{r7, pc}
    6664:	000060ed 	.word	0x000060ed
    6668:	200018f4 	.word	0x200018f4
    666c:	0000d5f5 	.word	0x0000d5f5

00006670 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    6670:	b580      	push	{r7, lr}
    6672:	b084      	sub	sp, #16
    6674:	af00      	add	r7, sp, #0
    6676:	4603      	mov	r3, r0
    6678:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    667a:	79fb      	ldrb	r3, [r7, #7]
    667c:	4618      	mov	r0, r3
    667e:	4b0d      	ldr	r3, [pc, #52]	; (66b4 <usb_d_ep_deinit+0x44>)
    6680:	4798      	blx	r3
    6682:	4603      	mov	r3, r0
    6684:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6686:	f997 300f 	ldrsb.w	r3, [r7, #15]
    668a:	015b      	lsls	r3, r3, #5
    668c:	4a0a      	ldr	r2, [pc, #40]	; (66b8 <usb_d_ep_deinit+0x48>)
    668e:	4413      	add	r3, r2
    6690:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    6692:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6696:	2b00      	cmp	r3, #0
    6698:	db07      	blt.n	66aa <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    669a:	79fb      	ldrb	r3, [r7, #7]
    669c:	4618      	mov	r0, r3
    669e:	4b07      	ldr	r3, [pc, #28]	; (66bc <usb_d_ep_deinit+0x4c>)
    66a0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    66a2:	68bb      	ldr	r3, [r7, #8]
    66a4:	22ff      	movs	r2, #255	; 0xff
    66a6:	705a      	strb	r2, [r3, #1]
    66a8:	e000      	b.n	66ac <usb_d_ep_deinit+0x3c>
		return;
    66aa:	bf00      	nop
}
    66ac:	3710      	adds	r7, #16
    66ae:	46bd      	mov	sp, r7
    66b0:	bd80      	pop	{r7, pc}
    66b2:	bf00      	nop
    66b4:	000060ed 	.word	0x000060ed
    66b8:	200018f4 	.word	0x200018f4
    66bc:	0000d729 	.word	0x0000d729

000066c0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    66c0:	b580      	push	{r7, lr}
    66c2:	b086      	sub	sp, #24
    66c4:	af00      	add	r7, sp, #0
    66c6:	4603      	mov	r3, r0
    66c8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    66ca:	79fb      	ldrb	r3, [r7, #7]
    66cc:	4618      	mov	r0, r3
    66ce:	4b15      	ldr	r3, [pc, #84]	; (6724 <usb_d_ep_enable+0x64>)
    66d0:	4798      	blx	r3
    66d2:	4603      	mov	r3, r0
    66d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    66d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    66da:	015b      	lsls	r3, r3, #5
    66dc:	4a12      	ldr	r2, [pc, #72]	; (6728 <usb_d_ep_enable+0x68>)
    66de:	4413      	add	r3, r2
    66e0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    66e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    66e6:	2b00      	cmp	r3, #0
    66e8:	da02      	bge.n	66f0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    66ea:	f06f 0311 	mvn.w	r3, #17
    66ee:	e014      	b.n	671a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    66f0:	693b      	ldr	r3, [r7, #16]
    66f2:	781b      	ldrb	r3, [r3, #0]
    66f4:	2b00      	cmp	r3, #0
    66f6:	d101      	bne.n	66fc <usb_d_ep_enable+0x3c>
    66f8:	2202      	movs	r2, #2
    66fa:	e000      	b.n	66fe <usb_d_ep_enable+0x3e>
    66fc:	2201      	movs	r2, #1
    66fe:	693b      	ldr	r3, [r7, #16]
    6700:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    6702:	79fb      	ldrb	r3, [r7, #7]
    6704:	4618      	mov	r0, r3
    6706:	4b09      	ldr	r3, [pc, #36]	; (672c <usb_d_ep_enable+0x6c>)
    6708:	4798      	blx	r3
    670a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    670c:	68fb      	ldr	r3, [r7, #12]
    670e:	2b00      	cmp	r3, #0
    6710:	da02      	bge.n	6718 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    6712:	693b      	ldr	r3, [r7, #16]
    6714:	2200      	movs	r2, #0
    6716:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    6718:	68fb      	ldr	r3, [r7, #12]
}
    671a:	4618      	mov	r0, r3
    671c:	3718      	adds	r7, #24
    671e:	46bd      	mov	sp, r7
    6720:	bd80      	pop	{r7, pc}
    6722:	bf00      	nop
    6724:	000060ed 	.word	0x000060ed
    6728:	200018f4 	.word	0x200018f4
    672c:	0000d80d 	.word	0x0000d80d

00006730 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    6730:	b590      	push	{r4, r7, lr}
    6732:	b08d      	sub	sp, #52	; 0x34
    6734:	af02      	add	r7, sp, #8
    6736:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	7a1b      	ldrb	r3, [r3, #8]
    673c:	4618      	mov	r0, r3
    673e:	4b51      	ldr	r3, [pc, #324]	; (6884 <usb_d_ep_transfer+0x154>)
    6740:	4798      	blx	r3
    6742:	4603      	mov	r3, r0
    6744:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    6746:	f997 301f 	ldrsb.w	r3, [r7, #31]
    674a:	015b      	lsls	r3, r3, #5
    674c:	4a4e      	ldr	r2, [pc, #312]	; (6888 <usb_d_ep_transfer+0x158>)
    674e:	4413      	add	r3, r2
    6750:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	7a1b      	ldrb	r3, [r3, #8]
    6756:	f003 0380 	and.w	r3, r3, #128	; 0x80
    675a:	2b00      	cmp	r3, #0
    675c:	bf14      	ite	ne
    675e:	2301      	movne	r3, #1
    6760:	2300      	moveq	r3, #0
    6762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    6766:	687b      	ldr	r3, [r7, #4]
    6768:	7a5b      	ldrb	r3, [r3, #9]
    676a:	2b00      	cmp	r3, #0
    676c:	bf14      	ite	ne
    676e:	2301      	movne	r3, #1
    6770:	2300      	moveq	r3, #0
    6772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    6776:	687b      	ldr	r3, [r7, #4]
    6778:	685b      	ldr	r3, [r3, #4]
    677a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    677c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6780:	2b00      	cmp	r3, #0
    6782:	da02      	bge.n	678a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    6784:	f06f 0311 	mvn.w	r3, #17
    6788:	e077      	b.n	687a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    678a:	f107 0308 	add.w	r3, r7, #8
    678e:	4618      	mov	r0, r3
    6790:	4b3e      	ldr	r3, [pc, #248]	; (688c <usb_d_ep_transfer+0x15c>)
    6792:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    6794:	69bb      	ldr	r3, [r7, #24]
    6796:	789b      	ldrb	r3, [r3, #2]
    6798:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    679a:	7bfb      	ldrb	r3, [r7, #15]
    679c:	b2db      	uxtb	r3, r3
    679e:	2b01      	cmp	r3, #1
    67a0:	d10c      	bne.n	67bc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    67a2:	69bb      	ldr	r3, [r7, #24]
    67a4:	2203      	movs	r2, #3
    67a6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    67a8:	f107 0308 	add.w	r3, r7, #8
    67ac:	4618      	mov	r0, r3
    67ae:	4b38      	ldr	r3, [pc, #224]	; (6890 <usb_d_ep_transfer+0x160>)
    67b0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    67b2:	69bb      	ldr	r3, [r7, #24]
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	2b00      	cmp	r3, #0
    67b8:	d151      	bne.n	685e <usb_d_ep_transfer+0x12e>
    67ba:	e017      	b.n	67ec <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    67bc:	f107 0308 	add.w	r3, r7, #8
    67c0:	4618      	mov	r0, r3
    67c2:	4b33      	ldr	r3, [pc, #204]	; (6890 <usb_d_ep_transfer+0x160>)
    67c4:	4798      	blx	r3
		switch (state) {
    67c6:	7bfb      	ldrb	r3, [r7, #15]
    67c8:	b2db      	uxtb	r3, r3
    67ca:	2b05      	cmp	r3, #5
    67cc:	d004      	beq.n	67d8 <usb_d_ep_transfer+0xa8>
    67ce:	2b06      	cmp	r3, #6
    67d0:	d004      	beq.n	67dc <usb_d_ep_transfer+0xac>
    67d2:	2b00      	cmp	r3, #0
    67d4:	d005      	beq.n	67e2 <usb_d_ep_transfer+0xb2>
    67d6:	e007      	b.n	67e8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    67d8:	2302      	movs	r3, #2
    67da:	e04e      	b.n	687a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    67dc:	f06f 030f 	mvn.w	r3, #15
    67e0:	e04b      	b.n	687a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    67e2:	f06f 0312 	mvn.w	r3, #18
    67e6:	e048      	b.n	687a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    67e8:	2301      	movs	r3, #1
    67ea:	e046      	b.n	687a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    67ec:	69bb      	ldr	r3, [r7, #24]
    67ee:	7c9b      	ldrb	r3, [r3, #18]
    67f0:	b29a      	uxth	r2, r3
    67f2:	69bb      	ldr	r3, [r7, #24]
    67f4:	7cdb      	ldrb	r3, [r3, #19]
    67f6:	b29b      	uxth	r3, r3
    67f8:	021b      	lsls	r3, r3, #8
    67fa:	b29b      	uxth	r3, r3
    67fc:	4413      	add	r3, r2
    67fe:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    6800:	8afb      	ldrh	r3, [r7, #22]
    6802:	2b00      	cmp	r3, #0
    6804:	d10b      	bne.n	681e <usb_d_ep_transfer+0xee>
			dir                 = true;
    6806:	2301      	movs	r3, #1
    6808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    680c:	2300      	movs	r3, #0
    680e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    6810:	2301      	movs	r3, #1
    6812:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6816:	69bb      	ldr	r3, [r7, #24]
    6818:	2204      	movs	r2, #4
    681a:	709a      	strb	r2, [r3, #2]
    681c:	e01f      	b.n	685e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    681e:	69bb      	ldr	r3, [r7, #24]
    6820:	7b1b      	ldrb	r3, [r3, #12]
    6822:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6826:	2b00      	cmp	r3, #0
    6828:	bf14      	ite	ne
    682a:	2301      	movne	r3, #1
    682c:	2300      	moveq	r3, #0
    682e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    6832:	8afa      	ldrh	r2, [r7, #22]
    6834:	6a3b      	ldr	r3, [r7, #32]
    6836:	429a      	cmp	r2, r3
    6838:	d201      	bcs.n	683e <usb_d_ep_transfer+0x10e>
				len = req_len;
    683a:	8afb      	ldrh	r3, [r7, #22]
    683c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    683e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    6842:	2b00      	cmp	r3, #0
    6844:	d008      	beq.n	6858 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    6846:	8afa      	ldrh	r2, [r7, #22]
    6848:	6a3b      	ldr	r3, [r7, #32]
    684a:	429a      	cmp	r2, r3
    684c:	bf8c      	ite	hi
    684e:	2301      	movhi	r3, #1
    6850:	2300      	movls	r3, #0
    6852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    6856:	e002      	b.n	685e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    6858:	2300      	movs	r3, #0
    685a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    685e:	687b      	ldr	r3, [r7, #4]
    6860:	7a18      	ldrb	r0, [r3, #8]
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	681a      	ldr	r2, [r3, #0]
    6866:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    686a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    686e:	9300      	str	r3, [sp, #0]
    6870:	6a3b      	ldr	r3, [r7, #32]
    6872:	4c08      	ldr	r4, [pc, #32]	; (6894 <usb_d_ep_transfer+0x164>)
    6874:	47a0      	blx	r4
    6876:	6138      	str	r0, [r7, #16]
	return rc;
    6878:	693b      	ldr	r3, [r7, #16]
}
    687a:	4618      	mov	r0, r3
    687c:	372c      	adds	r7, #44	; 0x2c
    687e:	46bd      	mov	sp, r7
    6880:	bd90      	pop	{r4, r7, pc}
    6882:	bf00      	nop
    6884:	000060ed 	.word	0x000060ed
    6888:	200018f4 	.word	0x200018f4
    688c:	00004971 	.word	0x00004971
    6890:	00004997 	.word	0x00004997
    6894:	0000616d 	.word	0x0000616d

00006898 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    6898:	b580      	push	{r7, lr}
    689a:	b084      	sub	sp, #16
    689c:	af00      	add	r7, sp, #0
    689e:	4603      	mov	r3, r0
    68a0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    68a2:	79fb      	ldrb	r3, [r7, #7]
    68a4:	4618      	mov	r0, r3
    68a6:	4b0e      	ldr	r3, [pc, #56]	; (68e0 <usb_d_ep_abort+0x48>)
    68a8:	4798      	blx	r3
    68aa:	4603      	mov	r3, r0
    68ac:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    68ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    68b2:	015b      	lsls	r3, r3, #5
    68b4:	4a0b      	ldr	r2, [pc, #44]	; (68e4 <usb_d_ep_abort+0x4c>)
    68b6:	4413      	add	r3, r2
    68b8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    68ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    68be:	2b00      	cmp	r3, #0
    68c0:	db0a      	blt.n	68d8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    68c2:	79fb      	ldrb	r3, [r7, #7]
    68c4:	4618      	mov	r0, r3
    68c6:	4b08      	ldr	r3, [pc, #32]	; (68e8 <usb_d_ep_abort+0x50>)
    68c8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    68ca:	68bb      	ldr	r3, [r7, #8]
    68cc:	2201      	movs	r2, #1
    68ce:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    68d0:	68bb      	ldr	r3, [r7, #8]
    68d2:	2204      	movs	r2, #4
    68d4:	70da      	strb	r2, [r3, #3]
    68d6:	e000      	b.n	68da <usb_d_ep_abort+0x42>
		return;
    68d8:	bf00      	nop
}
    68da:	3710      	adds	r7, #16
    68dc:	46bd      	mov	sp, r7
    68de:	bd80      	pop	{r7, pc}
    68e0:	000060ed 	.word	0x000060ed
    68e4:	200018f4 	.word	0x200018f4
    68e8:	0000df79 	.word	0x0000df79

000068ec <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    68ec:	b580      	push	{r7, lr}
    68ee:	b086      	sub	sp, #24
    68f0:	af00      	add	r7, sp, #0
    68f2:	4603      	mov	r3, r0
    68f4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    68f6:	79fb      	ldrb	r3, [r7, #7]
    68f8:	4618      	mov	r0, r3
    68fa:	4b1a      	ldr	r3, [pc, #104]	; (6964 <_usb_d_ep_halt_clr+0x78>)
    68fc:	4798      	blx	r3
    68fe:	4603      	mov	r3, r0
    6900:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6902:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6906:	015b      	lsls	r3, r3, #5
    6908:	4a17      	ldr	r2, [pc, #92]	; (6968 <_usb_d_ep_halt_clr+0x7c>)
    690a:	4413      	add	r3, r2
    690c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    690e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6912:	2b00      	cmp	r3, #0
    6914:	da02      	bge.n	691c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    6916:	f06f 0311 	mvn.w	r3, #17
    691a:	e01f      	b.n	695c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    691c:	79fb      	ldrb	r3, [r7, #7]
    691e:	2102      	movs	r1, #2
    6920:	4618      	mov	r0, r3
    6922:	4b12      	ldr	r3, [pc, #72]	; (696c <_usb_d_ep_halt_clr+0x80>)
    6924:	4798      	blx	r3
    6926:	4603      	mov	r3, r0
    6928:	2b00      	cmp	r3, #0
    692a:	d016      	beq.n	695a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    692c:	79fb      	ldrb	r3, [r7, #7]
    692e:	2100      	movs	r1, #0
    6930:	4618      	mov	r0, r3
    6932:	4b0e      	ldr	r3, [pc, #56]	; (696c <_usb_d_ep_halt_clr+0x80>)
    6934:	4798      	blx	r3
    6936:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    6938:	68fb      	ldr	r3, [r7, #12]
    693a:	2b00      	cmp	r3, #0
    693c:	da01      	bge.n	6942 <_usb_d_ep_halt_clr+0x56>
			return rc;
    693e:	68fb      	ldr	r3, [r7, #12]
    6940:	e00c      	b.n	695c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    6942:	693b      	ldr	r3, [r7, #16]
    6944:	2201      	movs	r2, #1
    6946:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    6948:	693b      	ldr	r3, [r7, #16]
    694a:	2203      	movs	r2, #3
    694c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    694e:	693b      	ldr	r3, [r7, #16]
    6950:	69db      	ldr	r3, [r3, #28]
    6952:	79f8      	ldrb	r0, [r7, #7]
    6954:	2200      	movs	r2, #0
    6956:	2103      	movs	r1, #3
    6958:	4798      	blx	r3
	}
	return ERR_NONE;
    695a:	2300      	movs	r3, #0
}
    695c:	4618      	mov	r0, r3
    695e:	3718      	adds	r7, #24
    6960:	46bd      	mov	sp, r7
    6962:	bd80      	pop	{r7, pc}
    6964:	000060ed 	.word	0x000060ed
    6968:	200018f4 	.word	0x200018f4
    696c:	0000db85 	.word	0x0000db85

00006970 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    6970:	b580      	push	{r7, lr}
    6972:	b082      	sub	sp, #8
    6974:	af00      	add	r7, sp, #0
    6976:	4603      	mov	r3, r0
    6978:	460a      	mov	r2, r1
    697a:	71fb      	strb	r3, [r7, #7]
    697c:	4613      	mov	r3, r2
    697e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    6980:	79bb      	ldrb	r3, [r7, #6]
    6982:	2b00      	cmp	r3, #0
    6984:	d105      	bne.n	6992 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    6986:	79fb      	ldrb	r3, [r7, #7]
    6988:	4618      	mov	r0, r3
    698a:	4b0c      	ldr	r3, [pc, #48]	; (69bc <usb_d_ep_halt+0x4c>)
    698c:	4798      	blx	r3
    698e:	4603      	mov	r3, r0
    6990:	e00f      	b.n	69b2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    6992:	79bb      	ldrb	r3, [r7, #6]
    6994:	2b01      	cmp	r3, #1
    6996:	d106      	bne.n	69a6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6998:	79fb      	ldrb	r3, [r7, #7]
    699a:	2101      	movs	r1, #1
    699c:	4618      	mov	r0, r3
    699e:	4b08      	ldr	r3, [pc, #32]	; (69c0 <usb_d_ep_halt+0x50>)
    69a0:	4798      	blx	r3
    69a2:	4603      	mov	r3, r0
    69a4:	e005      	b.n	69b2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    69a6:	79fb      	ldrb	r3, [r7, #7]
    69a8:	2102      	movs	r1, #2
    69aa:	4618      	mov	r0, r3
    69ac:	4b04      	ldr	r3, [pc, #16]	; (69c0 <usb_d_ep_halt+0x50>)
    69ae:	4798      	blx	r3
    69b0:	4603      	mov	r3, r0
	}
}
    69b2:	4618      	mov	r0, r3
    69b4:	3708      	adds	r7, #8
    69b6:	46bd      	mov	sp, r7
    69b8:	bd80      	pop	{r7, pc}
    69ba:	bf00      	nop
    69bc:	000068ed 	.word	0x000068ed
    69c0:	0000db85 	.word	0x0000db85

000069c4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    69c4:	b580      	push	{r7, lr}
    69c6:	b086      	sub	sp, #24
    69c8:	af00      	add	r7, sp, #0
    69ca:	4603      	mov	r3, r0
    69cc:	603a      	str	r2, [r7, #0]
    69ce:	71fb      	strb	r3, [r7, #7]
    69d0:	460b      	mov	r3, r1
    69d2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    69d4:	79fb      	ldrb	r3, [r7, #7]
    69d6:	4618      	mov	r0, r3
    69d8:	4b16      	ldr	r3, [pc, #88]	; (6a34 <usb_d_ep_register_callback+0x70>)
    69da:	4798      	blx	r3
    69dc:	4603      	mov	r3, r0
    69de:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    69e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    69e4:	015b      	lsls	r3, r3, #5
    69e6:	4a14      	ldr	r2, [pc, #80]	; (6a38 <usb_d_ep_register_callback+0x74>)
    69e8:	4413      	add	r3, r2
    69ea:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    69ec:	683b      	ldr	r3, [r7, #0]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d001      	beq.n	69f6 <usb_d_ep_register_callback+0x32>
    69f2:	683b      	ldr	r3, [r7, #0]
    69f4:	e000      	b.n	69f8 <usb_d_ep_register_callback+0x34>
    69f6:	4b11      	ldr	r3, [pc, #68]	; (6a3c <usb_d_ep_register_callback+0x78>)
    69f8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    69fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    69fe:	2b00      	cmp	r3, #0
    6a00:	db13      	blt.n	6a2a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    6a02:	79bb      	ldrb	r3, [r7, #6]
    6a04:	2b01      	cmp	r3, #1
    6a06:	d008      	beq.n	6a1a <usb_d_ep_register_callback+0x56>
    6a08:	2b02      	cmp	r3, #2
    6a0a:	d00a      	beq.n	6a22 <usb_d_ep_register_callback+0x5e>
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d000      	beq.n	6a12 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    6a10:	e00c      	b.n	6a2c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    6a12:	693b      	ldr	r3, [r7, #16]
    6a14:	68fa      	ldr	r2, [r7, #12]
    6a16:	615a      	str	r2, [r3, #20]
		break;
    6a18:	e008      	b.n	6a2c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    6a1a:	693b      	ldr	r3, [r7, #16]
    6a1c:	68fa      	ldr	r2, [r7, #12]
    6a1e:	619a      	str	r2, [r3, #24]
		break;
    6a20:	e004      	b.n	6a2c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    6a22:	693b      	ldr	r3, [r7, #16]
    6a24:	68fa      	ldr	r2, [r7, #12]
    6a26:	61da      	str	r2, [r3, #28]
		break;
    6a28:	e000      	b.n	6a2c <usb_d_ep_register_callback+0x68>
		return;
    6a2a:	bf00      	nop
	}
}
    6a2c:	3718      	adds	r7, #24
    6a2e:	46bd      	mov	sp, r7
    6a30:	bd80      	pop	{r7, pc}
    6a32:	bf00      	nop
    6a34:	000060ed 	.word	0x000060ed
    6a38:	200018f4 	.word	0x200018f4
    6a3c:	000061c1 	.word	0x000061c1

00006a40 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    6a40:	b480      	push	{r7}
    6a42:	b085      	sub	sp, #20
    6a44:	af00      	add	r7, sp, #0
    6a46:	4603      	mov	r3, r0
    6a48:	60b9      	str	r1, [r7, #8]
    6a4a:	607a      	str	r2, [r7, #4]
    6a4c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    6a4e:	7bfb      	ldrb	r3, [r7, #15]
    6a50:	f083 0301 	eor.w	r3, r3, #1
    6a54:	b2db      	uxtb	r3, r3
    6a56:	2b00      	cmp	r3, #0
    6a58:	d000      	beq.n	6a5c <assert+0x1c>
		__asm("BKPT #0");
    6a5a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    6a5c:	bf00      	nop
    6a5e:	3714      	adds	r7, #20
    6a60:	46bd      	mov	sp, r7
    6a62:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a66:	4770      	bx	lr

00006a68 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    6a68:	b480      	push	{r7}
    6a6a:	b085      	sub	sp, #20
    6a6c:	af00      	add	r7, sp, #0
    6a6e:	6078      	str	r0, [r7, #4]
    6a70:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    6a72:	687b      	ldr	r3, [r7, #4]
    6a74:	681b      	ldr	r3, [r3, #0]
    6a76:	60fb      	str	r3, [r7, #12]
    6a78:	e008      	b.n	6a8c <is_list_element+0x24>
		if (it == element) {
    6a7a:	68fa      	ldr	r2, [r7, #12]
    6a7c:	683b      	ldr	r3, [r7, #0]
    6a7e:	429a      	cmp	r2, r3
    6a80:	d101      	bne.n	6a86 <is_list_element+0x1e>
			return true;
    6a82:	2301      	movs	r3, #1
    6a84:	e006      	b.n	6a94 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    6a86:	68fb      	ldr	r3, [r7, #12]
    6a88:	681b      	ldr	r3, [r3, #0]
    6a8a:	60fb      	str	r3, [r7, #12]
    6a8c:	68fb      	ldr	r3, [r7, #12]
    6a8e:	2b00      	cmp	r3, #0
    6a90:	d1f3      	bne.n	6a7a <is_list_element+0x12>
		}
	}

	return false;
    6a92:	2300      	movs	r3, #0
}
    6a94:	4618      	mov	r0, r3
    6a96:	3714      	adds	r7, #20
    6a98:	46bd      	mov	sp, r7
    6a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a9e:	4770      	bx	lr

00006aa0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    6aa0:	b580      	push	{r7, lr}
    6aa2:	b082      	sub	sp, #8
    6aa4:	af00      	add	r7, sp, #0
    6aa6:	6078      	str	r0, [r7, #4]
    6aa8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    6aaa:	6839      	ldr	r1, [r7, #0]
    6aac:	6878      	ldr	r0, [r7, #4]
    6aae:	4b0f      	ldr	r3, [pc, #60]	; (6aec <list_insert_as_head+0x4c>)
    6ab0:	4798      	blx	r3
    6ab2:	4603      	mov	r3, r0
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	bf14      	ite	ne
    6ab8:	2301      	movne	r3, #1
    6aba:	2300      	moveq	r3, #0
    6abc:	b2db      	uxtb	r3, r3
    6abe:	f083 0301 	eor.w	r3, r3, #1
    6ac2:	b2db      	uxtb	r3, r3
    6ac4:	f003 0301 	and.w	r3, r3, #1
    6ac8:	b2db      	uxtb	r3, r3
    6aca:	2239      	movs	r2, #57	; 0x39
    6acc:	4908      	ldr	r1, [pc, #32]	; (6af0 <list_insert_as_head+0x50>)
    6ace:	4618      	mov	r0, r3
    6ad0:	4b08      	ldr	r3, [pc, #32]	; (6af4 <list_insert_as_head+0x54>)
    6ad2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    6ad4:	687b      	ldr	r3, [r7, #4]
    6ad6:	681a      	ldr	r2, [r3, #0]
    6ad8:	683b      	ldr	r3, [r7, #0]
    6ada:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    6adc:	687b      	ldr	r3, [r7, #4]
    6ade:	683a      	ldr	r2, [r7, #0]
    6ae0:	601a      	str	r2, [r3, #0]
}
    6ae2:	bf00      	nop
    6ae4:	3708      	adds	r7, #8
    6ae6:	46bd      	mov	sp, r7
    6ae8:	bd80      	pop	{r7, pc}
    6aea:	bf00      	nop
    6aec:	00006a69 	.word	0x00006a69
    6af0:	00013b68 	.word	0x00013b68
    6af4:	00006a41 	.word	0x00006a41

00006af8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    6af8:	b480      	push	{r7}
    6afa:	b083      	sub	sp, #12
    6afc:	af00      	add	r7, sp, #0
    6afe:	6078      	str	r0, [r7, #4]
    6b00:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	681a      	ldr	r2, [r3, #0]
    6b06:	683b      	ldr	r3, [r7, #0]
    6b08:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	683a      	ldr	r2, [r7, #0]
    6b0e:	601a      	str	r2, [r3, #0]
}
    6b10:	bf00      	nop
    6b12:	370c      	adds	r7, #12
    6b14:	46bd      	mov	sp, r7
    6b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b1a:	4770      	bx	lr

00006b1c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    6b1c:	b580      	push	{r7, lr}
    6b1e:	b084      	sub	sp, #16
    6b20:	af00      	add	r7, sp, #0
    6b22:	6078      	str	r0, [r7, #4]
    6b24:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	681b      	ldr	r3, [r3, #0]
    6b2a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    6b2c:	6839      	ldr	r1, [r7, #0]
    6b2e:	6878      	ldr	r0, [r7, #4]
    6b30:	4b16      	ldr	r3, [pc, #88]	; (6b8c <list_insert_at_end+0x70>)
    6b32:	4798      	blx	r3
    6b34:	4603      	mov	r3, r0
    6b36:	2b00      	cmp	r3, #0
    6b38:	bf14      	ite	ne
    6b3a:	2301      	movne	r3, #1
    6b3c:	2300      	moveq	r3, #0
    6b3e:	b2db      	uxtb	r3, r3
    6b40:	f083 0301 	eor.w	r3, r3, #1
    6b44:	b2db      	uxtb	r3, r3
    6b46:	f003 0301 	and.w	r3, r3, #1
    6b4a:	b2db      	uxtb	r3, r3
    6b4c:	224f      	movs	r2, #79	; 0x4f
    6b4e:	4910      	ldr	r1, [pc, #64]	; (6b90 <list_insert_at_end+0x74>)
    6b50:	4618      	mov	r0, r3
    6b52:	4b10      	ldr	r3, [pc, #64]	; (6b94 <list_insert_at_end+0x78>)
    6b54:	4798      	blx	r3

	if (!list->head) {
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d109      	bne.n	6b72 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    6b5e:	687b      	ldr	r3, [r7, #4]
    6b60:	683a      	ldr	r2, [r7, #0]
    6b62:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    6b64:	683b      	ldr	r3, [r7, #0]
    6b66:	2200      	movs	r2, #0
    6b68:	601a      	str	r2, [r3, #0]
		return;
    6b6a:	e00c      	b.n	6b86 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    6b6c:	68fb      	ldr	r3, [r7, #12]
    6b6e:	681b      	ldr	r3, [r3, #0]
    6b70:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    6b72:	68fb      	ldr	r3, [r7, #12]
    6b74:	681b      	ldr	r3, [r3, #0]
    6b76:	2b00      	cmp	r3, #0
    6b78:	d1f8      	bne.n	6b6c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    6b7a:	68fb      	ldr	r3, [r7, #12]
    6b7c:	683a      	ldr	r2, [r7, #0]
    6b7e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    6b80:	683b      	ldr	r3, [r7, #0]
    6b82:	2200      	movs	r2, #0
    6b84:	601a      	str	r2, [r3, #0]
}
    6b86:	3710      	adds	r7, #16
    6b88:	46bd      	mov	sp, r7
    6b8a:	bd80      	pop	{r7, pc}
    6b8c:	00006a69 	.word	0x00006a69
    6b90:	00013b68 	.word	0x00013b68
    6b94:	00006a41 	.word	0x00006a41

00006b98 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    6b98:	b480      	push	{r7}
    6b9a:	b085      	sub	sp, #20
    6b9c:	af00      	add	r7, sp, #0
    6b9e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d009      	beq.n	6bbc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	681b      	ldr	r3, [r3, #0]
    6bac:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    6bae:	687b      	ldr	r3, [r7, #4]
    6bb0:	681b      	ldr	r3, [r3, #0]
    6bb2:	681a      	ldr	r2, [r3, #0]
    6bb4:	687b      	ldr	r3, [r7, #4]
    6bb6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    6bb8:	68fb      	ldr	r3, [r7, #12]
    6bba:	e000      	b.n	6bbe <list_remove_head+0x26>
	}

	return NULL;
    6bbc:	2300      	movs	r3, #0
}
    6bbe:	4618      	mov	r0, r3
    6bc0:	3714      	adds	r7, #20
    6bc2:	46bd      	mov	sp, r7
    6bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bc8:	4770      	bx	lr

00006bca <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    6bca:	b480      	push	{r7}
    6bcc:	b085      	sub	sp, #20
    6bce:	af00      	add	r7, sp, #0
    6bd0:	6078      	str	r0, [r7, #4]
    6bd2:	6039      	str	r1, [r7, #0]
	if (!element) {
    6bd4:	683b      	ldr	r3, [r7, #0]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d101      	bne.n	6bde <list_delete_element+0x14>
		return false;
    6bda:	2300      	movs	r3, #0
    6bdc:	e024      	b.n	6c28 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	681a      	ldr	r2, [r3, #0]
    6be2:	683b      	ldr	r3, [r7, #0]
    6be4:	429a      	cmp	r2, r3
    6be6:	d106      	bne.n	6bf6 <list_delete_element+0x2c>
		list->head = list->head->next;
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	681a      	ldr	r2, [r3, #0]
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	601a      	str	r2, [r3, #0]
		return true;
    6bf2:	2301      	movs	r3, #1
    6bf4:	e018      	b.n	6c28 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    6bf6:	687b      	ldr	r3, [r7, #4]
    6bf8:	681b      	ldr	r3, [r3, #0]
    6bfa:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    6bfc:	e002      	b.n	6c04 <list_delete_element+0x3a>
			it = it->next;
    6bfe:	68fb      	ldr	r3, [r7, #12]
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    6c04:	68fb      	ldr	r3, [r7, #12]
    6c06:	2b00      	cmp	r3, #0
    6c08:	d004      	beq.n	6c14 <list_delete_element+0x4a>
    6c0a:	68fb      	ldr	r3, [r7, #12]
    6c0c:	681a      	ldr	r2, [r3, #0]
    6c0e:	683b      	ldr	r3, [r7, #0]
    6c10:	429a      	cmp	r2, r3
    6c12:	d1f4      	bne.n	6bfe <list_delete_element+0x34>
		}
		if (it) {
    6c14:	68fb      	ldr	r3, [r7, #12]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d005      	beq.n	6c26 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    6c1a:	683b      	ldr	r3, [r7, #0]
    6c1c:	681a      	ldr	r2, [r3, #0]
    6c1e:	68fb      	ldr	r3, [r7, #12]
    6c20:	601a      	str	r2, [r3, #0]
			return true;
    6c22:	2301      	movs	r3, #1
    6c24:	e000      	b.n	6c28 <list_delete_element+0x5e>
		}
	}

	return false;
    6c26:	2300      	movs	r3, #0
}
    6c28:	4618      	mov	r0, r3
    6c2a:	3714      	adds	r7, #20
    6c2c:	46bd      	mov	sp, r7
    6c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c32:	4770      	bx	lr

00006c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    6c34:	b480      	push	{r7}
    6c36:	b083      	sub	sp, #12
    6c38:	af00      	add	r7, sp, #0
    6c3a:	4603      	mov	r3, r0
    6c3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c42:	2b00      	cmp	r3, #0
    6c44:	db0b      	blt.n	6c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c46:	4909      	ldr	r1, [pc, #36]	; (6c6c <__NVIC_EnableIRQ+0x38>)
    6c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c4c:	095b      	lsrs	r3, r3, #5
    6c4e:	88fa      	ldrh	r2, [r7, #6]
    6c50:	f002 021f 	and.w	r2, r2, #31
    6c54:	2001      	movs	r0, #1
    6c56:	fa00 f202 	lsl.w	r2, r0, r2
    6c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6c5e:	bf00      	nop
    6c60:	370c      	adds	r7, #12
    6c62:	46bd      	mov	sp, r7
    6c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c68:	4770      	bx	lr
    6c6a:	bf00      	nop
    6c6c:	e000e100 	.word	0xe000e100

00006c70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    6c70:	b480      	push	{r7}
    6c72:	b083      	sub	sp, #12
    6c74:	af00      	add	r7, sp, #0
    6c76:	4603      	mov	r3, r0
    6c78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c7e:	2b00      	cmp	r3, #0
    6c80:	db10      	blt.n	6ca4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c82:	490b      	ldr	r1, [pc, #44]	; (6cb0 <__NVIC_DisableIRQ+0x40>)
    6c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c88:	095b      	lsrs	r3, r3, #5
    6c8a:	88fa      	ldrh	r2, [r7, #6]
    6c8c:	f002 021f 	and.w	r2, r2, #31
    6c90:	2001      	movs	r0, #1
    6c92:	fa00 f202 	lsl.w	r2, r0, r2
    6c96:	3320      	adds	r3, #32
    6c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6ca0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    6ca4:	bf00      	nop
    6ca6:	370c      	adds	r7, #12
    6ca8:	46bd      	mov	sp, r7
    6caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cae:	4770      	bx	lr
    6cb0:	e000e100 	.word	0xe000e100

00006cb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    6cb4:	b480      	push	{r7}
    6cb6:	b083      	sub	sp, #12
    6cb8:	af00      	add	r7, sp, #0
    6cba:	4603      	mov	r3, r0
    6cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	db0c      	blt.n	6ce0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6cc6:	4909      	ldr	r1, [pc, #36]	; (6cec <__NVIC_ClearPendingIRQ+0x38>)
    6cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6ccc:	095b      	lsrs	r3, r3, #5
    6cce:	88fa      	ldrh	r2, [r7, #6]
    6cd0:	f002 021f 	and.w	r2, r2, #31
    6cd4:	2001      	movs	r0, #1
    6cd6:	fa00 f202 	lsl.w	r2, r0, r2
    6cda:	3360      	adds	r3, #96	; 0x60
    6cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6ce0:	bf00      	nop
    6ce2:	370c      	adds	r7, #12
    6ce4:	46bd      	mov	sp, r7
    6ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cea:	4770      	bx	lr
    6cec:	e000e100 	.word	0xe000e100

00006cf0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    6cf0:	b480      	push	{r7}
    6cf2:	b083      	sub	sp, #12
    6cf4:	af00      	add	r7, sp, #0
    6cf6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6cfc:	095b      	lsrs	r3, r3, #5
    6cfe:	f003 0301 	and.w	r3, r3, #1
    6d02:	2b00      	cmp	r3, #0
    6d04:	bf14      	ite	ne
    6d06:	2301      	movne	r3, #1
    6d08:	2300      	moveq	r3, #0
    6d0a:	b2db      	uxtb	r3, r3
}
    6d0c:	4618      	mov	r0, r3
    6d0e:	370c      	adds	r7, #12
    6d10:	46bd      	mov	sp, r7
    6d12:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d16:	4770      	bx	lr

00006d18 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    6d18:	b480      	push	{r7}
    6d1a:	b083      	sub	sp, #12
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	6078      	str	r0, [r7, #4]
    6d20:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	683a      	ldr	r2, [r7, #0]
    6d26:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d28:	bf00      	nop
    6d2a:	370c      	adds	r7, #12
    6d2c:	46bd      	mov	sp, r7
    6d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d32:	4770      	bx	lr

00006d34 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    6d34:	b480      	push	{r7}
    6d36:	b083      	sub	sp, #12
    6d38:	af00      	add	r7, sp, #0
    6d3a:	6078      	str	r0, [r7, #4]
    6d3c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	683a      	ldr	r2, [r7, #0]
    6d42:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d44:	bf00      	nop
    6d46:	370c      	adds	r7, #12
    6d48:	46bd      	mov	sp, r7
    6d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d4e:	4770      	bx	lr

00006d50 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    6d50:	b480      	push	{r7}
    6d52:	b083      	sub	sp, #12
    6d54:	af00      	add	r7, sp, #0
    6d56:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	699b      	ldr	r3, [r3, #24]
    6d5c:	f043 0201 	orr.w	r2, r3, #1
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6d64:	bf00      	nop
    6d66:	370c      	adds	r7, #12
    6d68:	46bd      	mov	sp, r7
    6d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d6e:	4770      	bx	lr

00006d70 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    6d70:	b480      	push	{r7}
    6d72:	b085      	sub	sp, #20
    6d74:	af00      	add	r7, sp, #0
    6d76:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	699b      	ldr	r3, [r3, #24]
    6d7c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    6d7e:	68fb      	ldr	r3, [r7, #12]
    6d80:	f003 0301 	and.w	r3, r3, #1
    6d84:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6d86:	68fb      	ldr	r3, [r7, #12]
    6d88:	2b00      	cmp	r3, #0
    6d8a:	bf14      	ite	ne
    6d8c:	2301      	movne	r3, #1
    6d8e:	2300      	moveq	r3, #0
    6d90:	b2db      	uxtb	r3, r3
}
    6d92:	4618      	mov	r0, r3
    6d94:	3714      	adds	r7, #20
    6d96:	46bd      	mov	sp, r7
    6d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d9c:	4770      	bx	lr

00006d9e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    6d9e:	b480      	push	{r7}
    6da0:	b083      	sub	sp, #12
    6da2:	af00      	add	r7, sp, #0
    6da4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    6da6:	687b      	ldr	r3, [r7, #4]
    6da8:	699b      	ldr	r3, [r3, #24]
    6daa:	f023 0201 	bic.w	r2, r3, #1
    6dae:	687b      	ldr	r3, [r7, #4]
    6db0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6db2:	bf00      	nop
    6db4:	370c      	adds	r7, #12
    6db6:	46bd      	mov	sp, r7
    6db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dbc:	4770      	bx	lr

00006dbe <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    6dbe:	b480      	push	{r7}
    6dc0:	b083      	sub	sp, #12
    6dc2:	af00      	add	r7, sp, #0
    6dc4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    6dc6:	687b      	ldr	r3, [r7, #4]
    6dc8:	699b      	ldr	r3, [r3, #24]
    6dca:	f043 0202 	orr.w	r2, r3, #2
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6dd2:	bf00      	nop
    6dd4:	370c      	adds	r7, #12
    6dd6:	46bd      	mov	sp, r7
    6dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ddc:	4770      	bx	lr

00006dde <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    6dde:	b480      	push	{r7}
    6de0:	b083      	sub	sp, #12
    6de2:	af00      	add	r7, sp, #0
    6de4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	699b      	ldr	r3, [r3, #24]
    6dea:	f023 0202 	bic.w	r2, r3, #2
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6df2:	bf00      	nop
    6df4:	370c      	adds	r7, #12
    6df6:	46bd      	mov	sp, r7
    6df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dfc:	4770      	bx	lr

00006dfe <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    6dfe:	b480      	push	{r7}
    6e00:	b083      	sub	sp, #12
    6e02:	af00      	add	r7, sp, #0
    6e04:	6078      	str	r0, [r7, #4]
    6e06:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	699a      	ldr	r2, [r3, #24]
    6e0c:	683b      	ldr	r3, [r7, #0]
    6e0e:	431a      	orrs	r2, r3
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e14:	bf00      	nop
    6e16:	370c      	adds	r7, #12
    6e18:	46bd      	mov	sp, r7
    6e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e1e:	4770      	bx	lr

00006e20 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    6e20:	b480      	push	{r7}
    6e22:	b083      	sub	sp, #12
    6e24:	af00      	add	r7, sp, #0
    6e26:	6078      	str	r0, [r7, #4]
    6e28:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	683a      	ldr	r2, [r7, #0]
    6e2e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e30:	bf00      	nop
    6e32:	370c      	adds	r7, #12
    6e34:	46bd      	mov	sp, r7
    6e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e3a:	4770      	bx	lr

00006e3c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    6e3c:	b480      	push	{r7}
    6e3e:	b083      	sub	sp, #12
    6e40:	af00      	add	r7, sp, #0
    6e42:	6078      	str	r0, [r7, #4]
    6e44:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    6e46:	687b      	ldr	r3, [r7, #4]
    6e48:	683a      	ldr	r2, [r7, #0]
    6e4a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e4c:	bf00      	nop
    6e4e:	370c      	adds	r7, #12
    6e50:	46bd      	mov	sp, r7
    6e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e56:	4770      	bx	lr

00006e58 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    6e58:	b480      	push	{r7}
    6e5a:	b083      	sub	sp, #12
    6e5c:	af00      	add	r7, sp, #0
    6e5e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    6e64:	4618      	mov	r0, r3
    6e66:	370c      	adds	r7, #12
    6e68:	46bd      	mov	sp, r7
    6e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e6e:	4770      	bx	lr

00006e70 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    6e70:	b480      	push	{r7}
    6e72:	b083      	sub	sp, #12
    6e74:	af00      	add	r7, sp, #0
    6e76:	6078      	str	r0, [r7, #4]
    6e78:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    6e7a:	687b      	ldr	r3, [r7, #4]
    6e7c:	683a      	ldr	r2, [r7, #0]
    6e7e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e80:	bf00      	nop
    6e82:	370c      	adds	r7, #12
    6e84:	46bd      	mov	sp, r7
    6e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e8a:	4770      	bx	lr

00006e8c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    6e8c:	b480      	push	{r7}
    6e8e:	b083      	sub	sp, #12
    6e90:	af00      	add	r7, sp, #0
    6e92:	6078      	str	r0, [r7, #4]
    6e94:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	683a      	ldr	r2, [r7, #0]
    6e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    6e9e:	bf00      	nop
    6ea0:	370c      	adds	r7, #12
    6ea2:	46bd      	mov	sp, r7
    6ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea8:	4770      	bx	lr

00006eaa <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    6eaa:	b480      	push	{r7}
    6eac:	b083      	sub	sp, #12
    6eae:	af00      	add	r7, sp, #0
    6eb0:	6078      	str	r0, [r7, #4]
    6eb2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	683a      	ldr	r2, [r7, #0]
    6eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    6ebc:	bf00      	nop
    6ebe:	370c      	adds	r7, #12
    6ec0:	46bd      	mov	sp, r7
    6ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec6:	4770      	bx	lr

00006ec8 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    6ec8:	b480      	push	{r7}
    6eca:	b083      	sub	sp, #12
    6ecc:	af00      	add	r7, sp, #0
    6ece:	6078      	str	r0, [r7, #4]
    6ed0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	683a      	ldr	r2, [r7, #0]
    6ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    6eda:	bf00      	nop
    6edc:	370c      	adds	r7, #12
    6ede:	46bd      	mov	sp, r7
    6ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee4:	4770      	bx	lr

00006ee6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    6ee6:	b480      	push	{r7}
    6ee8:	b083      	sub	sp, #12
    6eea:	af00      	add	r7, sp, #0
    6eec:	6078      	str	r0, [r7, #4]
    6eee:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    6ef0:	687b      	ldr	r3, [r7, #4]
    6ef2:	683a      	ldr	r2, [r7, #0]
    6ef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    6ef8:	bf00      	nop
    6efa:	370c      	adds	r7, #12
    6efc:	46bd      	mov	sp, r7
    6efe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f02:	4770      	bx	lr

00006f04 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    6f04:	b480      	push	{r7}
    6f06:	b083      	sub	sp, #12
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
    6f0c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    6f0e:	687b      	ldr	r3, [r7, #4]
    6f10:	683a      	ldr	r2, [r7, #0]
    6f12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6f16:	bf00      	nop
    6f18:	370c      	adds	r7, #12
    6f1a:	46bd      	mov	sp, r7
    6f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f20:	4770      	bx	lr

00006f22 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    6f22:	b480      	push	{r7}
    6f24:	b083      	sub	sp, #12
    6f26:	af00      	add	r7, sp, #0
    6f28:	6078      	str	r0, [r7, #4]
    6f2a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	683a      	ldr	r2, [r7, #0]
    6f30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    6f34:	bf00      	nop
    6f36:	370c      	adds	r7, #12
    6f38:	46bd      	mov	sp, r7
    6f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f3e:	4770      	bx	lr

00006f40 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    6f40:	b480      	push	{r7}
    6f42:	b083      	sub	sp, #12
    6f44:	af00      	add	r7, sp, #0
    6f46:	6078      	str	r0, [r7, #4]
    6f48:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    6f4a:	687b      	ldr	r3, [r7, #4]
    6f4c:	683a      	ldr	r2, [r7, #0]
    6f4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6f52:	bf00      	nop
    6f54:	370c      	adds	r7, #12
    6f56:	46bd      	mov	sp, r7
    6f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f5c:	4770      	bx	lr

00006f5e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    6f5e:	b480      	push	{r7}
    6f60:	b083      	sub	sp, #12
    6f62:	af00      	add	r7, sp, #0
    6f64:	6078      	str	r0, [r7, #4]
    6f66:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	683a      	ldr	r2, [r7, #0]
    6f6c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    6f70:	bf00      	nop
    6f72:	370c      	adds	r7, #12
    6f74:	46bd      	mov	sp, r7
    6f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f7a:	4770      	bx	lr

00006f7c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    6f7c:	b480      	push	{r7}
    6f7e:	b083      	sub	sp, #12
    6f80:	af00      	add	r7, sp, #0
    6f82:	6078      	str	r0, [r7, #4]
    6f84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	683a      	ldr	r2, [r7, #0]
    6f8a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    6f8e:	bf00      	nop
    6f90:	370c      	adds	r7, #12
    6f92:	46bd      	mov	sp, r7
    6f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f98:	4770      	bx	lr
	...

00006f9c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    6f9c:	b580      	push	{r7, lr}
    6f9e:	b082      	sub	sp, #8
    6fa0:	af00      	add	r7, sp, #0
    6fa2:	6078      	str	r0, [r7, #4]
    6fa4:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    6fa6:	687b      	ldr	r3, [r7, #4]
    6fa8:	683a      	ldr	r2, [r7, #0]
    6faa:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    6fac:	687b      	ldr	r3, [r7, #4]
    6fae:	681b      	ldr	r3, [r3, #0]
    6fb0:	4618      	mov	r0, r3
    6fb2:	4b55      	ldr	r3, [pc, #340]	; (7108 <_can_async_init+0x16c>)
    6fb4:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    6fb6:	bf00      	nop
    6fb8:	687b      	ldr	r3, [r7, #4]
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	4618      	mov	r0, r3
    6fbe:	4b53      	ldr	r3, [pc, #332]	; (710c <_can_async_init+0x170>)
    6fc0:	4798      	blx	r3
    6fc2:	4603      	mov	r3, r0
    6fc4:	f083 0301 	eor.w	r3, r3, #1
    6fc8:	b2db      	uxtb	r3, r3
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d1f4      	bne.n	6fb8 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	681b      	ldr	r3, [r3, #0]
    6fd2:	4618      	mov	r0, r3
    6fd4:	4b4e      	ldr	r3, [pc, #312]	; (7110 <_can_async_init+0x174>)
    6fd6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    6fd8:	683b      	ldr	r3, [r7, #0]
    6fda:	4a4e      	ldr	r2, [pc, #312]	; (7114 <_can_async_init+0x178>)
    6fdc:	4293      	cmp	r3, r2
    6fde:	d17a      	bne.n	70d6 <_can_async_init+0x13a>
		_can1_dev    = dev;
    6fe0:	4a4d      	ldr	r2, [pc, #308]	; (7118 <_can_async_init+0x17c>)
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	4a4c      	ldr	r2, [pc, #304]	; (711c <_can_async_init+0x180>)
    6fea:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	681b      	ldr	r3, [r3, #0]
    6ff0:	f44f 7140 	mov.w	r1, #768	; 0x300
    6ff4:	4618      	mov	r0, r3
    6ff6:	4b4a      	ldr	r3, [pc, #296]	; (7120 <_can_async_init+0x184>)
    6ff8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	681b      	ldr	r3, [r3, #0]
    6ffe:	2102      	movs	r1, #2
    7000:	4618      	mov	r0, r3
    7002:	4b48      	ldr	r3, [pc, #288]	; (7124 <_can_async_init+0x188>)
    7004:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	681b      	ldr	r3, [r3, #0]
    700a:	4947      	ldr	r1, [pc, #284]	; (7128 <_can_async_init+0x18c>)
    700c:	4618      	mov	r0, r3
    700e:	4b47      	ldr	r3, [pc, #284]	; (712c <_can_async_init+0x190>)
    7010:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	681b      	ldr	r3, [r3, #0]
    7016:	4946      	ldr	r1, [pc, #280]	; (7130 <_can_async_init+0x194>)
    7018:	4618      	mov	r0, r3
    701a:	4b46      	ldr	r3, [pc, #280]	; (7134 <_can_async_init+0x198>)
    701c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	681a      	ldr	r2, [r3, #0]
    7022:	4b45      	ldr	r3, [pc, #276]	; (7138 <_can_async_init+0x19c>)
    7024:	b29b      	uxth	r3, r3
    7026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    702a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    702e:	4619      	mov	r1, r3
    7030:	4610      	mov	r0, r2
    7032:	4b42      	ldr	r3, [pc, #264]	; (713c <_can_async_init+0x1a0>)
    7034:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	681b      	ldr	r3, [r3, #0]
    703a:	2107      	movs	r1, #7
    703c:	4618      	mov	r0, r3
    703e:	4b40      	ldr	r3, [pc, #256]	; (7140 <_can_async_init+0x1a4>)
    7040:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	681b      	ldr	r3, [r3, #0]
    7046:	2107      	movs	r1, #7
    7048:	4618      	mov	r0, r3
    704a:	4b3e      	ldr	r3, [pc, #248]	; (7144 <_can_async_init+0x1a8>)
    704c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    704e:	687b      	ldr	r3, [r7, #4]
    7050:	681a      	ldr	r2, [r3, #0]
    7052:	4b3d      	ldr	r3, [pc, #244]	; (7148 <_can_async_init+0x1ac>)
    7054:	b29b      	uxth	r3, r3
    7056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    705a:	4619      	mov	r1, r3
    705c:	4610      	mov	r0, r2
    705e:	4b3b      	ldr	r3, [pc, #236]	; (714c <_can_async_init+0x1b0>)
    7060:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	681a      	ldr	r2, [r3, #0]
    7066:	4b3a      	ldr	r3, [pc, #232]	; (7150 <_can_async_init+0x1b4>)
    7068:	b29b      	uxth	r3, r3
    706a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    706e:	4619      	mov	r1, r3
    7070:	4610      	mov	r0, r2
    7072:	4b38      	ldr	r3, [pc, #224]	; (7154 <_can_async_init+0x1b8>)
    7074:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	2108      	movs	r1, #8
    707c:	4618      	mov	r0, r3
    707e:	4b36      	ldr	r3, [pc, #216]	; (7158 <_can_async_init+0x1bc>)
    7080:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    7082:	687b      	ldr	r3, [r7, #4]
    7084:	681a      	ldr	r2, [r3, #0]
    7086:	4b35      	ldr	r3, [pc, #212]	; (715c <_can_async_init+0x1c0>)
    7088:	b29b      	uxth	r3, r3
    708a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    708e:	4619      	mov	r1, r3
    7090:	4610      	mov	r0, r2
    7092:	4b33      	ldr	r3, [pc, #204]	; (7160 <_can_async_init+0x1c4>)
    7094:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	681a      	ldr	r2, [r3, #0]
    709a:	4b32      	ldr	r3, [pc, #200]	; (7164 <_can_async_init+0x1c8>)
    709c:	b29b      	uxth	r3, r3
    709e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    70a2:	4619      	mov	r1, r3
    70a4:	4610      	mov	r0, r2
    70a6:	4b30      	ldr	r3, [pc, #192]	; (7168 <_can_async_init+0x1cc>)
    70a8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	681b      	ldr	r3, [r3, #0]
    70ae:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    70b2:	4618      	mov	r0, r3
    70b4:	4b2d      	ldr	r3, [pc, #180]	; (716c <_can_async_init+0x1d0>)
    70b6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    70b8:	204f      	movs	r0, #79	; 0x4f
    70ba:	4b2d      	ldr	r3, [pc, #180]	; (7170 <_can_async_init+0x1d4>)
    70bc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    70be:	204f      	movs	r0, #79	; 0x4f
    70c0:	4b2c      	ldr	r3, [pc, #176]	; (7174 <_can_async_init+0x1d8>)
    70c2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    70c4:	204f      	movs	r0, #79	; 0x4f
    70c6:	4b2c      	ldr	r3, [pc, #176]	; (7178 <_can_async_init+0x1dc>)
    70c8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    70ca:	687b      	ldr	r3, [r7, #4]
    70cc:	681b      	ldr	r3, [r3, #0]
    70ce:	2101      	movs	r1, #1
    70d0:	4618      	mov	r0, r3
    70d2:	4b2a      	ldr	r3, [pc, #168]	; (717c <_can_async_init+0x1e0>)
    70d4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    70d6:	687b      	ldr	r3, [r7, #4]
    70d8:	681b      	ldr	r3, [r3, #0]
    70da:	4618      	mov	r0, r3
    70dc:	4b28      	ldr	r3, [pc, #160]	; (7180 <_can_async_init+0x1e4>)
    70de:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	681b      	ldr	r3, [r3, #0]
    70e4:	4618      	mov	r0, r3
    70e6:	4b27      	ldr	r3, [pc, #156]	; (7184 <_can_async_init+0x1e8>)
    70e8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    70ea:	bf00      	nop
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	681b      	ldr	r3, [r3, #0]
    70f0:	4618      	mov	r0, r3
    70f2:	4b06      	ldr	r3, [pc, #24]	; (710c <_can_async_init+0x170>)
    70f4:	4798      	blx	r3
    70f6:	4603      	mov	r3, r0
    70f8:	2b00      	cmp	r3, #0
    70fa:	d1f7      	bne.n	70ec <_can_async_init+0x150>
	};

	return ERR_NONE;
    70fc:	2300      	movs	r3, #0
}
    70fe:	4618      	mov	r0, r3
    7100:	3708      	adds	r7, #8
    7102:	46bd      	mov	sp, r7
    7104:	bd80      	pop	{r7, pc}
    7106:	bf00      	nop
    7108:	00006d51 	.word	0x00006d51
    710c:	00006d71 	.word	0x00006d71
    7110:	00006dbf 	.word	0x00006dbf
    7114:	42000400 	.word	0x42000400
    7118:	20001a14 	.word	0x20001a14
    711c:	20000004 	.word	0x20000004
    7120:	00006dff 	.word	0x00006dff
    7124:	00006d19 	.word	0x00006d19
    7128:	00010c01 	.word	0x00010c01
    712c:	00006e21 	.word	0x00006e21
    7130:	00010c10 	.word	0x00010c10
    7134:	00006d35 	.word	0x00006d35
    7138:	20002164 	.word	0x20002164
    713c:	00006f05 	.word	0x00006f05
    7140:	00006f23 	.word	0x00006f23
    7144:	00006f5f 	.word	0x00006f5f
    7148:	2000211c 	.word	0x2000211c
    714c:	00006f41 	.word	0x00006f41
    7150:	20001974 	.word	0x20001974
    7154:	00006f7d 	.word	0x00006f7d
    7158:	00006e8d 	.word	0x00006e8d
    715c:	20001984 	.word	0x20001984
    7160:	00006eab 	.word	0x00006eab
    7164:	20001a04 	.word	0x20001a04
    7168:	00006ec9 	.word	0x00006ec9
    716c:	00006ee7 	.word	0x00006ee7
    7170:	00006c71 	.word	0x00006c71
    7174:	00006cb5 	.word	0x00006cb5
    7178:	00006c35 	.word	0x00006c35
    717c:	00006e71 	.word	0x00006e71
    7180:	00006ddf 	.word	0x00006ddf
    7184:	00006d9f 	.word	0x00006d9f

00007188 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    7188:	b590      	push	{r4, r7, lr}
    718a:	b083      	sub	sp, #12
    718c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    718e:	4b2c      	ldr	r3, [pc, #176]	; (7240 <CAN1_Handler+0xb8>)
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    7194:	687b      	ldr	r3, [r7, #4]
    7196:	681b      	ldr	r3, [r3, #0]
    7198:	4618      	mov	r0, r3
    719a:	4b2a      	ldr	r3, [pc, #168]	; (7244 <CAN1_Handler+0xbc>)
    719c:	4798      	blx	r3
    719e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    71a0:	683b      	ldr	r3, [r7, #0]
    71a2:	f003 0301 	and.w	r3, r3, #1
    71a6:	2b00      	cmp	r3, #0
    71a8:	d003      	beq.n	71b2 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    71aa:	687b      	ldr	r3, [r7, #4]
    71ac:	689b      	ldr	r3, [r3, #8]
    71ae:	6878      	ldr	r0, [r7, #4]
    71b0:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    71b2:	683b      	ldr	r3, [r7, #0]
    71b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    71b8:	2b00      	cmp	r3, #0
    71ba:	d003      	beq.n	71c4 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	685b      	ldr	r3, [r3, #4]
    71c0:	6878      	ldr	r0, [r7, #4]
    71c2:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    71c4:	683b      	ldr	r3, [r7, #0]
    71c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    71ca:	2b00      	cmp	r3, #0
    71cc:	d004      	beq.n	71d8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	68db      	ldr	r3, [r3, #12]
    71d2:	2103      	movs	r1, #3
    71d4:	6878      	ldr	r0, [r7, #4]
    71d6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    71d8:	683b      	ldr	r3, [r7, #0]
    71da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    71de:	2b00      	cmp	r3, #0
    71e0:	d004      	beq.n	71ec <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	68db      	ldr	r3, [r3, #12]
    71e6:	2100      	movs	r1, #0
    71e8:	6878      	ldr	r0, [r7, #4]
    71ea:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    71ec:	683b      	ldr	r3, [r7, #0]
    71ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    71f2:	2b00      	cmp	r3, #0
    71f4:	d00f      	beq.n	7216 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    71f6:	687b      	ldr	r3, [r7, #4]
    71f8:	68dc      	ldr	r4, [r3, #12]
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	681b      	ldr	r3, [r3, #0]
    71fe:	4618      	mov	r0, r3
    7200:	4b11      	ldr	r3, [pc, #68]	; (7248 <CAN1_Handler+0xc0>)
    7202:	4798      	blx	r3
    7204:	4603      	mov	r3, r0
    7206:	2b00      	cmp	r3, #0
    7208:	d001      	beq.n	720e <CAN1_Handler+0x86>
    720a:	2302      	movs	r3, #2
    720c:	e000      	b.n	7210 <CAN1_Handler+0x88>
    720e:	2301      	movs	r3, #1
    7210:	4619      	mov	r1, r3
    7212:	6878      	ldr	r0, [r7, #4]
    7214:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    7216:	683b      	ldr	r3, [r7, #0]
    7218:	f003 0308 	and.w	r3, r3, #8
    721c:	2b00      	cmp	r3, #0
    721e:	d004      	beq.n	722a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    7220:	687b      	ldr	r3, [r7, #4]
    7222:	68db      	ldr	r3, [r3, #12]
    7224:	2104      	movs	r1, #4
    7226:	6878      	ldr	r0, [r7, #4]
    7228:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	681b      	ldr	r3, [r3, #0]
    722e:	6839      	ldr	r1, [r7, #0]
    7230:	4618      	mov	r0, r3
    7232:	4b06      	ldr	r3, [pc, #24]	; (724c <CAN1_Handler+0xc4>)
    7234:	4798      	blx	r3
}
    7236:	bf00      	nop
    7238:	370c      	adds	r7, #12
    723a:	46bd      	mov	sp, r7
    723c:	bd90      	pop	{r4, r7, pc}
    723e:	bf00      	nop
    7240:	20001a14 	.word	0x20001a14
    7244:	00006e59 	.word	0x00006e59
    7248:	00006cf1 	.word	0x00006cf1
    724c:	00006e3d 	.word	0x00006e3d

00007250 <__NVIC_SetPendingIRQ>:
{
    7250:	b480      	push	{r7}
    7252:	b083      	sub	sp, #12
    7254:	af00      	add	r7, sp, #0
    7256:	4603      	mov	r3, r0
    7258:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    725a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    725e:	2b00      	cmp	r3, #0
    7260:	db0c      	blt.n	727c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7262:	4909      	ldr	r1, [pc, #36]	; (7288 <__NVIC_SetPendingIRQ+0x38>)
    7264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7268:	095b      	lsrs	r3, r3, #5
    726a:	88fa      	ldrh	r2, [r7, #6]
    726c:	f002 021f 	and.w	r2, r2, #31
    7270:	2001      	movs	r0, #1
    7272:	fa00 f202 	lsl.w	r2, r0, r2
    7276:	3340      	adds	r3, #64	; 0x40
    7278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    727c:	bf00      	nop
    727e:	370c      	adds	r7, #12
    7280:	46bd      	mov	sp, r7
    7282:	f85d 7b04 	ldr.w	r7, [sp], #4
    7286:	4770      	bx	lr
    7288:	e000e100 	.word	0xe000e100

0000728c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    728c:	b580      	push	{r7, lr}
    728e:	b082      	sub	sp, #8
    7290:	af00      	add	r7, sp, #0
    7292:	4603      	mov	r3, r0
    7294:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    7296:	79fb      	ldrb	r3, [r7, #7]
    7298:	b21b      	sxth	r3, r3
    729a:	4618      	mov	r0, r3
    729c:	4b02      	ldr	r3, [pc, #8]	; (72a8 <_irq_set+0x1c>)
    729e:	4798      	blx	r3
}
    72a0:	bf00      	nop
    72a2:	3708      	adds	r7, #8
    72a4:	46bd      	mov	sp, r7
    72a6:	bd80      	pop	{r7, pc}
    72a8:	00007251 	.word	0x00007251

000072ac <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    72ac:	b480      	push	{r7}
    72ae:	b083      	sub	sp, #12
    72b0:	af00      	add	r7, sp, #0
    72b2:	4603      	mov	r3, r0
    72b4:	6039      	str	r1, [r7, #0]
    72b6:	80fb      	strh	r3, [r7, #6]
    72b8:	4613      	mov	r3, r2
    72ba:	717b      	strb	r3, [r7, #5]
	switch (power) {
    72bc:	797b      	ldrb	r3, [r7, #5]
    72be:	3b04      	subs	r3, #4
    72c0:	2b05      	cmp	r3, #5
    72c2:	d86b      	bhi.n	739c <_get_cycles_for_us_internal+0xf0>
    72c4:	a201      	add	r2, pc, #4	; (adr r2, 72cc <_get_cycles_for_us_internal+0x20>)
    72c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    72ca:	bf00      	nop
    72cc:	0000737b 	.word	0x0000737b
    72d0:	0000735b 	.word	0x0000735b
    72d4:	0000733d 	.word	0x0000733d
    72d8:	0000731f 	.word	0x0000731f
    72dc:	00007301 	.word	0x00007301
    72e0:	000072e5 	.word	0x000072e5
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    72e4:	88fb      	ldrh	r3, [r7, #6]
    72e6:	683a      	ldr	r2, [r7, #0]
    72e8:	4935      	ldr	r1, [pc, #212]	; (73c0 <_get_cycles_for_us_internal+0x114>)
    72ea:	fba1 1202 	umull	r1, r2, r1, r2
    72ee:	0c92      	lsrs	r2, r2, #18
    72f0:	fb02 f303 	mul.w	r3, r2, r3
    72f4:	3302      	adds	r3, #2
    72f6:	4a33      	ldr	r2, [pc, #204]	; (73c4 <_get_cycles_for_us_internal+0x118>)
    72f8:	fba2 2303 	umull	r2, r3, r2, r3
    72fc:	085b      	lsrs	r3, r3, #1
    72fe:	e059      	b.n	73b4 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    7300:	88fb      	ldrh	r3, [r7, #6]
    7302:	683a      	ldr	r2, [r7, #0]
    7304:	0952      	lsrs	r2, r2, #5
    7306:	4930      	ldr	r1, [pc, #192]	; (73c8 <_get_cycles_for_us_internal+0x11c>)
    7308:	fba1 1202 	umull	r1, r2, r1, r2
    730c:	09d2      	lsrs	r2, r2, #7
    730e:	fb02 f303 	mul.w	r3, r2, r3
    7312:	331d      	adds	r3, #29
    7314:	4a2d      	ldr	r2, [pc, #180]	; (73cc <_get_cycles_for_us_internal+0x120>)
    7316:	fba2 2303 	umull	r2, r3, r2, r3
    731a:	091b      	lsrs	r3, r3, #4
    731c:	e04a      	b.n	73b4 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    731e:	88fb      	ldrh	r3, [r7, #6]
    7320:	683a      	ldr	r2, [r7, #0]
    7322:	492b      	ldr	r1, [pc, #172]	; (73d0 <_get_cycles_for_us_internal+0x124>)
    7324:	fba1 1202 	umull	r1, r2, r1, r2
    7328:	0b52      	lsrs	r2, r2, #13
    732a:	fb02 f303 	mul.w	r3, r2, r3
    732e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    7332:	4a28      	ldr	r2, [pc, #160]	; (73d4 <_get_cycles_for_us_internal+0x128>)
    7334:	fba2 2303 	umull	r2, r3, r2, r3
    7338:	095b      	lsrs	r3, r3, #5
    733a:	e03b      	b.n	73b4 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    733c:	88fb      	ldrh	r3, [r7, #6]
    733e:	683a      	ldr	r2, [r7, #0]
    7340:	4925      	ldr	r1, [pc, #148]	; (73d8 <_get_cycles_for_us_internal+0x12c>)
    7342:	fba1 1202 	umull	r1, r2, r1, r2
    7346:	0992      	lsrs	r2, r2, #6
    7348:	fb02 f303 	mul.w	r3, r2, r3
    734c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    7350:	4a22      	ldr	r2, [pc, #136]	; (73dc <_get_cycles_for_us_internal+0x130>)
    7352:	fba2 2303 	umull	r2, r3, r2, r3
    7356:	099b      	lsrs	r3, r3, #6
    7358:	e02c      	b.n	73b4 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    735a:	88fb      	ldrh	r3, [r7, #6]
    735c:	683a      	ldr	r2, [r7, #0]
    735e:	4920      	ldr	r1, [pc, #128]	; (73e0 <_get_cycles_for_us_internal+0x134>)
    7360:	fba1 1202 	umull	r1, r2, r1, r2
    7364:	0952      	lsrs	r2, r2, #5
    7366:	fb02 f303 	mul.w	r3, r2, r3
    736a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    736e:	332f      	adds	r3, #47	; 0x2f
    7370:	4a1c      	ldr	r2, [pc, #112]	; (73e4 <_get_cycles_for_us_internal+0x138>)
    7372:	fba2 2303 	umull	r2, r3, r2, r3
    7376:	0b5b      	lsrs	r3, r3, #13
    7378:	e01c      	b.n	73b4 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    737a:	88fb      	ldrh	r3, [r7, #6]
    737c:	683a      	ldr	r2, [r7, #0]
    737e:	491a      	ldr	r1, [pc, #104]	; (73e8 <_get_cycles_for_us_internal+0x13c>)
    7380:	fba1 1202 	umull	r1, r2, r1, r2
    7384:	08d2      	lsrs	r2, r2, #3
    7386:	fb02 f303 	mul.w	r3, r2, r3
    738a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    738e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    7392:	4a16      	ldr	r2, [pc, #88]	; (73ec <_get_cycles_for_us_internal+0x140>)
    7394:	fba2 2303 	umull	r2, r3, r2, r3
    7398:	0c5b      	lsrs	r3, r3, #17
    739a:	e00b      	b.n	73b4 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    739c:	88fb      	ldrh	r3, [r7, #6]
    739e:	683a      	ldr	r2, [r7, #0]
    73a0:	fb02 f303 	mul.w	r3, r2, r3
    73a4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    73a8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    73ac:	4a10      	ldr	r2, [pc, #64]	; (73f0 <_get_cycles_for_us_internal+0x144>)
    73ae:	fba2 2303 	umull	r2, r3, r2, r3
    73b2:	0c9b      	lsrs	r3, r3, #18
	}
}
    73b4:	4618      	mov	r0, r3
    73b6:	370c      	adds	r7, #12
    73b8:	46bd      	mov	sp, r7
    73ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    73be:	4770      	bx	lr
    73c0:	431bde83 	.word	0x431bde83
    73c4:	aaaaaaab 	.word	0xaaaaaaab
    73c8:	0a7c5ac5 	.word	0x0a7c5ac5
    73cc:	88888889 	.word	0x88888889
    73d0:	d1b71759 	.word	0xd1b71759
    73d4:	1b4e81b5 	.word	0x1b4e81b5
    73d8:	10624dd3 	.word	0x10624dd3
    73dc:	057619f1 	.word	0x057619f1
    73e0:	51eb851f 	.word	0x51eb851f
    73e4:	45e7b273 	.word	0x45e7b273
    73e8:	cccccccd 	.word	0xcccccccd
    73ec:	6fd91d85 	.word	0x6fd91d85
    73f0:	165e9f81 	.word	0x165e9f81

000073f4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    73f4:	b580      	push	{r7, lr}
    73f6:	b082      	sub	sp, #8
    73f8:	af00      	add	r7, sp, #0
    73fa:	4603      	mov	r3, r0
    73fc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    73fe:	88fb      	ldrh	r3, [r7, #6]
    7400:	2209      	movs	r2, #9
    7402:	4904      	ldr	r1, [pc, #16]	; (7414 <_get_cycles_for_us+0x20>)
    7404:	4618      	mov	r0, r3
    7406:	4b04      	ldr	r3, [pc, #16]	; (7418 <_get_cycles_for_us+0x24>)
    7408:	4798      	blx	r3
    740a:	4603      	mov	r3, r0
}
    740c:	4618      	mov	r0, r3
    740e:	3708      	adds	r7, #8
    7410:	46bd      	mov	sp, r7
    7412:	bd80      	pop	{r7, pc}
    7414:	07270e00 	.word	0x07270e00
    7418:	000072ad 	.word	0x000072ad

0000741c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    741c:	b480      	push	{r7}
    741e:	b083      	sub	sp, #12
    7420:	af00      	add	r7, sp, #0
    7422:	4603      	mov	r3, r0
    7424:	6039      	str	r1, [r7, #0]
    7426:	80fb      	strh	r3, [r7, #6]
    7428:	4613      	mov	r3, r2
    742a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    742c:	797b      	ldrb	r3, [r7, #5]
    742e:	3b04      	subs	r3, #4
    7430:	2b05      	cmp	r3, #5
    7432:	d870      	bhi.n	7516 <_get_cycles_for_ms_internal+0xfa>
    7434:	a201      	add	r2, pc, #4	; (adr r2, 743c <_get_cycles_for_ms_internal+0x20>)
    7436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    743a:	bf00      	nop
    743c:	000074f9 	.word	0x000074f9
    7440:	000074dd 	.word	0x000074dd
    7444:	000074c1 	.word	0x000074c1
    7448:	0000749d 	.word	0x0000749d
    744c:	00007479 	.word	0x00007479
    7450:	00007455 	.word	0x00007455
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    7454:	88fb      	ldrh	r3, [r7, #6]
    7456:	683a      	ldr	r2, [r7, #0]
    7458:	4937      	ldr	r1, [pc, #220]	; (7538 <_get_cycles_for_ms_internal+0x11c>)
    745a:	fba1 1202 	umull	r1, r2, r1, r2
    745e:	0c92      	lsrs	r2, r2, #18
    7460:	fb02 f303 	mul.w	r3, r2, r3
    7464:	3302      	adds	r3, #2
    7466:	4a35      	ldr	r2, [pc, #212]	; (753c <_get_cycles_for_ms_internal+0x120>)
    7468:	fba2 2303 	umull	r2, r3, r2, r3
    746c:	085b      	lsrs	r3, r3, #1
    746e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7472:	fb02 f303 	mul.w	r3, r2, r3
    7476:	e058      	b.n	752a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    7478:	88fb      	ldrh	r3, [r7, #6]
    747a:	683a      	ldr	r2, [r7, #0]
    747c:	0952      	lsrs	r2, r2, #5
    747e:	4930      	ldr	r1, [pc, #192]	; (7540 <_get_cycles_for_ms_internal+0x124>)
    7480:	fba1 1202 	umull	r1, r2, r1, r2
    7484:	09d2      	lsrs	r2, r2, #7
    7486:	fb02 f303 	mul.w	r3, r2, r3
    748a:	3302      	adds	r3, #2
    748c:	4a2b      	ldr	r2, [pc, #172]	; (753c <_get_cycles_for_ms_internal+0x120>)
    748e:	fba2 2303 	umull	r2, r3, r2, r3
    7492:	085b      	lsrs	r3, r3, #1
    7494:	2264      	movs	r2, #100	; 0x64
    7496:	fb02 f303 	mul.w	r3, r2, r3
    749a:	e046      	b.n	752a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    749c:	88fb      	ldrh	r3, [r7, #6]
    749e:	683a      	ldr	r2, [r7, #0]
    74a0:	4928      	ldr	r1, [pc, #160]	; (7544 <_get_cycles_for_ms_internal+0x128>)
    74a2:	fba1 1202 	umull	r1, r2, r1, r2
    74a6:	0b52      	lsrs	r2, r2, #13
    74a8:	fb02 f303 	mul.w	r3, r2, r3
    74ac:	3302      	adds	r3, #2
    74ae:	4a23      	ldr	r2, [pc, #140]	; (753c <_get_cycles_for_ms_internal+0x120>)
    74b0:	fba2 2303 	umull	r2, r3, r2, r3
    74b4:	085a      	lsrs	r2, r3, #1
    74b6:	4613      	mov	r3, r2
    74b8:	009b      	lsls	r3, r3, #2
    74ba:	4413      	add	r3, r2
    74bc:	005b      	lsls	r3, r3, #1
    74be:	e034      	b.n	752a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    74c0:	88fb      	ldrh	r3, [r7, #6]
    74c2:	683a      	ldr	r2, [r7, #0]
    74c4:	4920      	ldr	r1, [pc, #128]	; (7548 <_get_cycles_for_ms_internal+0x12c>)
    74c6:	fba1 1202 	umull	r1, r2, r1, r2
    74ca:	0992      	lsrs	r2, r2, #6
    74cc:	fb02 f303 	mul.w	r3, r2, r3
    74d0:	3302      	adds	r3, #2
    74d2:	4a1a      	ldr	r2, [pc, #104]	; (753c <_get_cycles_for_ms_internal+0x120>)
    74d4:	fba2 2303 	umull	r2, r3, r2, r3
    74d8:	085b      	lsrs	r3, r3, #1
    74da:	e026      	b.n	752a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    74dc:	88fb      	ldrh	r3, [r7, #6]
    74de:	683a      	ldr	r2, [r7, #0]
    74e0:	491a      	ldr	r1, [pc, #104]	; (754c <_get_cycles_for_ms_internal+0x130>)
    74e2:	fba1 1202 	umull	r1, r2, r1, r2
    74e6:	0952      	lsrs	r2, r2, #5
    74e8:	fb02 f303 	mul.w	r3, r2, r3
    74ec:	331d      	adds	r3, #29
    74ee:	4a18      	ldr	r2, [pc, #96]	; (7550 <_get_cycles_for_ms_internal+0x134>)
    74f0:	fba2 2303 	umull	r2, r3, r2, r3
    74f4:	091b      	lsrs	r3, r3, #4
    74f6:	e018      	b.n	752a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    74f8:	88fb      	ldrh	r3, [r7, #6]
    74fa:	683a      	ldr	r2, [r7, #0]
    74fc:	4915      	ldr	r1, [pc, #84]	; (7554 <_get_cycles_for_ms_internal+0x138>)
    74fe:	fba1 1202 	umull	r1, r2, r1, r2
    7502:	08d2      	lsrs	r2, r2, #3
    7504:	fb02 f303 	mul.w	r3, r2, r3
    7508:	f203 132b 	addw	r3, r3, #299	; 0x12b
    750c:	4a12      	ldr	r2, [pc, #72]	; (7558 <_get_cycles_for_ms_internal+0x13c>)
    750e:	fba2 2303 	umull	r2, r3, r2, r3
    7512:	095b      	lsrs	r3, r3, #5
    7514:	e009      	b.n	752a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    7516:	88fb      	ldrh	r3, [r7, #6]
    7518:	683a      	ldr	r2, [r7, #0]
    751a:	fb02 f303 	mul.w	r3, r2, r3
    751e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    7522:	4a0e      	ldr	r2, [pc, #56]	; (755c <_get_cycles_for_ms_internal+0x140>)
    7524:	fba2 2303 	umull	r2, r3, r2, r3
    7528:	099b      	lsrs	r3, r3, #6
	}
}
    752a:	4618      	mov	r0, r3
    752c:	370c      	adds	r7, #12
    752e:	46bd      	mov	sp, r7
    7530:	f85d 7b04 	ldr.w	r7, [sp], #4
    7534:	4770      	bx	lr
    7536:	bf00      	nop
    7538:	431bde83 	.word	0x431bde83
    753c:	aaaaaaab 	.word	0xaaaaaaab
    7540:	0a7c5ac5 	.word	0x0a7c5ac5
    7544:	d1b71759 	.word	0xd1b71759
    7548:	10624dd3 	.word	0x10624dd3
    754c:	51eb851f 	.word	0x51eb851f
    7550:	88888889 	.word	0x88888889
    7554:	cccccccd 	.word	0xcccccccd
    7558:	1b4e81b5 	.word	0x1b4e81b5
    755c:	057619f1 	.word	0x057619f1

00007560 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    7560:	b580      	push	{r7, lr}
    7562:	b082      	sub	sp, #8
    7564:	af00      	add	r7, sp, #0
    7566:	4603      	mov	r3, r0
    7568:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    756a:	88fb      	ldrh	r3, [r7, #6]
    756c:	2209      	movs	r2, #9
    756e:	4904      	ldr	r1, [pc, #16]	; (7580 <_get_cycles_for_ms+0x20>)
    7570:	4618      	mov	r0, r3
    7572:	4b04      	ldr	r3, [pc, #16]	; (7584 <_get_cycles_for_ms+0x24>)
    7574:	4798      	blx	r3
    7576:	4603      	mov	r3, r0
}
    7578:	4618      	mov	r0, r3
    757a:	3708      	adds	r7, #8
    757c:	46bd      	mov	sp, r7
    757e:	bd80      	pop	{r7, pc}
    7580:	07270e00 	.word	0x07270e00
    7584:	0000741d 	.word	0x0000741d

00007588 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    7588:	b480      	push	{r7}
    758a:	b083      	sub	sp, #12
    758c:	af00      	add	r7, sp, #0
    758e:	6078      	str	r0, [r7, #4]
    7590:	6039      	str	r1, [r7, #0]
    7592:	bf00      	nop
    7594:	f3af 8000 	nop.w

00007598 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    7598:	3901      	subs	r1, #1
    759a:	d8fd      	bhi.n	7598 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    759c:	bf00      	nop
    759e:	370c      	adds	r7, #12
    75a0:	46bd      	mov	sp, r7
    75a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    75a6:	4770      	bx	lr

000075a8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    75a8:	b480      	push	{r7}
    75aa:	b083      	sub	sp, #12
    75ac:	af00      	add	r7, sp, #0
    75ae:	6078      	str	r0, [r7, #4]
    75b0:	460b      	mov	r3, r1
    75b2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	881b      	ldrh	r3, [r3, #0]
    75b8:	b29a      	uxth	r2, r3
    75ba:	887b      	ldrh	r3, [r7, #2]
    75bc:	021b      	lsls	r3, r3, #8
    75be:	b29b      	uxth	r3, r3
    75c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    75c4:	b29b      	uxth	r3, r3
    75c6:	4313      	orrs	r3, r2
    75c8:	b29a      	uxth	r2, r3
    75ca:	687b      	ldr	r3, [r7, #4]
    75cc:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    75ce:	bf00      	nop
    75d0:	370c      	adds	r7, #12
    75d2:	46bd      	mov	sp, r7
    75d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    75d8:	4770      	bx	lr

000075da <hri_port_set_EVCTRL_reg>:
{
    75da:	b480      	push	{r7}
    75dc:	b085      	sub	sp, #20
    75de:	af00      	add	r7, sp, #0
    75e0:	60f8      	str	r0, [r7, #12]
    75e2:	460b      	mov	r3, r1
    75e4:	607a      	str	r2, [r7, #4]
    75e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    75e8:	7afb      	ldrb	r3, [r7, #11]
    75ea:	7afa      	ldrb	r2, [r7, #11]
    75ec:	68f9      	ldr	r1, [r7, #12]
    75ee:	01d2      	lsls	r2, r2, #7
    75f0:	440a      	add	r2, r1
    75f2:	322c      	adds	r2, #44	; 0x2c
    75f4:	6811      	ldr	r1, [r2, #0]
    75f6:	687a      	ldr	r2, [r7, #4]
    75f8:	430a      	orrs	r2, r1
    75fa:	68f9      	ldr	r1, [r7, #12]
    75fc:	01db      	lsls	r3, r3, #7
    75fe:	440b      	add	r3, r1
    7600:	332c      	adds	r3, #44	; 0x2c
    7602:	601a      	str	r2, [r3, #0]
}
    7604:	bf00      	nop
    7606:	3714      	adds	r7, #20
    7608:	46bd      	mov	sp, r7
    760a:	f85d 7b04 	ldr.w	r7, [sp], #4
    760e:	4770      	bx	lr

00007610 <_port_event_init>:

static inline void _port_event_init()
{
    7610:	b580      	push	{r7, lr}
    7612:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    7614:	2200      	movs	r2, #0
    7616:	2100      	movs	r1, #0
    7618:	480a      	ldr	r0, [pc, #40]	; (7644 <_port_event_init+0x34>)
    761a:	4b0b      	ldr	r3, [pc, #44]	; (7648 <_port_event_init+0x38>)
    761c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    761e:	2200      	movs	r2, #0
    7620:	2101      	movs	r1, #1
    7622:	4808      	ldr	r0, [pc, #32]	; (7644 <_port_event_init+0x34>)
    7624:	4b08      	ldr	r3, [pc, #32]	; (7648 <_port_event_init+0x38>)
    7626:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    7628:	f64e 72ef 	movw	r2, #61423	; 0xefef
    762c:	2102      	movs	r1, #2
    762e:	4805      	ldr	r0, [pc, #20]	; (7644 <_port_event_init+0x34>)
    7630:	4b05      	ldr	r3, [pc, #20]	; (7648 <_port_event_init+0x38>)
    7632:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    7634:	2200      	movs	r2, #0
    7636:	2103      	movs	r1, #3
    7638:	4802      	ldr	r0, [pc, #8]	; (7644 <_port_event_init+0x34>)
    763a:	4b03      	ldr	r3, [pc, #12]	; (7648 <_port_event_init+0x38>)
    763c:	4798      	blx	r3
}
    763e:	bf00      	nop
    7640:	bd80      	pop	{r7, pc}
    7642:	bf00      	nop
    7644:	41008000 	.word	0x41008000
    7648:	000075db 	.word	0x000075db

0000764c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    764c:	b580      	push	{r7, lr}
    764e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    7650:	2104      	movs	r1, #4
    7652:	480b      	ldr	r0, [pc, #44]	; (7680 <_init_chip+0x34>)
    7654:	4b0b      	ldr	r3, [pc, #44]	; (7684 <_init_chip+0x38>)
    7656:	4798      	blx	r3

	_osc32kctrl_init_sources();
    7658:	4b0b      	ldr	r3, [pc, #44]	; (7688 <_init_chip+0x3c>)
    765a:	4798      	blx	r3
	_oscctrl_init_sources();
    765c:	4b0b      	ldr	r3, [pc, #44]	; (768c <_init_chip+0x40>)
    765e:	4798      	blx	r3
	_mclk_init();
    7660:	4b0b      	ldr	r3, [pc, #44]	; (7690 <_init_chip+0x44>)
    7662:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    7664:	f44f 6084 	mov.w	r0, #1056	; 0x420
    7668:	4b0a      	ldr	r3, [pc, #40]	; (7694 <_init_chip+0x48>)
    766a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    766c:	4b0a      	ldr	r3, [pc, #40]	; (7698 <_init_chip+0x4c>)
    766e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    7670:	f640 30df 	movw	r0, #3039	; 0xbdf
    7674:	4b07      	ldr	r3, [pc, #28]	; (7694 <_init_chip+0x48>)
    7676:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    7678:	4b08      	ldr	r3, [pc, #32]	; (769c <_init_chip+0x50>)
    767a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    767c:	bf00      	nop
    767e:	bd80      	pop	{r7, pc}
    7680:	41004000 	.word	0x41004000
    7684:	000075a9 	.word	0x000075a9
    7688:	000080d5 	.word	0x000080d5
    768c:	0000859d 	.word	0x0000859d
    7690:	00007ff5 	.word	0x00007ff5
    7694:	00007eb5 	.word	0x00007eb5
    7698:	000085dd 	.word	0x000085dd
    769c:	00007611 	.word	0x00007611

000076a0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    76a0:	b480      	push	{r7}
    76a2:	b083      	sub	sp, #12
    76a4:	af00      	add	r7, sp, #0
    76a6:	6078      	str	r0, [r7, #4]
    76a8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	683a      	ldr	r2, [r7, #0]
    76ae:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    76b0:	2300      	movs	r3, #0
}
    76b2:	4618      	mov	r0, r3
    76b4:	370c      	adds	r7, #12
    76b6:	46bd      	mov	sp, r7
    76b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    76bc:	4770      	bx	lr
	...

000076c0 <__NVIC_EnableIRQ>:
{
    76c0:	b480      	push	{r7}
    76c2:	b083      	sub	sp, #12
    76c4:	af00      	add	r7, sp, #0
    76c6:	4603      	mov	r3, r0
    76c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    76ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    76ce:	2b00      	cmp	r3, #0
    76d0:	db0b      	blt.n	76ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76d2:	4909      	ldr	r1, [pc, #36]	; (76f8 <__NVIC_EnableIRQ+0x38>)
    76d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    76d8:	095b      	lsrs	r3, r3, #5
    76da:	88fa      	ldrh	r2, [r7, #6]
    76dc:	f002 021f 	and.w	r2, r2, #31
    76e0:	2001      	movs	r0, #1
    76e2:	fa00 f202 	lsl.w	r2, r0, r2
    76e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76ea:	bf00      	nop
    76ec:	370c      	adds	r7, #12
    76ee:	46bd      	mov	sp, r7
    76f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    76f4:	4770      	bx	lr
    76f6:	bf00      	nop
    76f8:	e000e100 	.word	0xe000e100

000076fc <__NVIC_DisableIRQ>:
{
    76fc:	b480      	push	{r7}
    76fe:	b083      	sub	sp, #12
    7700:	af00      	add	r7, sp, #0
    7702:	4603      	mov	r3, r0
    7704:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    770a:	2b00      	cmp	r3, #0
    770c:	db10      	blt.n	7730 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    770e:	490b      	ldr	r1, [pc, #44]	; (773c <__NVIC_DisableIRQ+0x40>)
    7710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7714:	095b      	lsrs	r3, r3, #5
    7716:	88fa      	ldrh	r2, [r7, #6]
    7718:	f002 021f 	and.w	r2, r2, #31
    771c:	2001      	movs	r0, #1
    771e:	fa00 f202 	lsl.w	r2, r0, r2
    7722:	3320      	adds	r3, #32
    7724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7728:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    772c:	f3bf 8f6f 	isb	sy
}
    7730:	bf00      	nop
    7732:	370c      	adds	r7, #12
    7734:	46bd      	mov	sp, r7
    7736:	f85d 7b04 	ldr.w	r7, [sp], #4
    773a:	4770      	bx	lr
    773c:	e000e100 	.word	0xe000e100

00007740 <__NVIC_ClearPendingIRQ>:
{
    7740:	b480      	push	{r7}
    7742:	b083      	sub	sp, #12
    7744:	af00      	add	r7, sp, #0
    7746:	4603      	mov	r3, r0
    7748:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    774a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    774e:	2b00      	cmp	r3, #0
    7750:	db0c      	blt.n	776c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7752:	4909      	ldr	r1, [pc, #36]	; (7778 <__NVIC_ClearPendingIRQ+0x38>)
    7754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7758:	095b      	lsrs	r3, r3, #5
    775a:	88fa      	ldrh	r2, [r7, #6]
    775c:	f002 021f 	and.w	r2, r2, #31
    7760:	2001      	movs	r0, #1
    7762:	fa00 f202 	lsl.w	r2, r0, r2
    7766:	3360      	adds	r3, #96	; 0x60
    7768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    776c:	bf00      	nop
    776e:	370c      	adds	r7, #12
    7770:	46bd      	mov	sp, r7
    7772:	f85d 7b04 	ldr.w	r7, [sp], #4
    7776:	4770      	bx	lr
    7778:	e000e100 	.word	0xe000e100

0000777c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    777c:	b480      	push	{r7}
    777e:	b083      	sub	sp, #12
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
    7784:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    7786:	bf00      	nop
    7788:	687b      	ldr	r3, [r7, #4]
    778a:	685a      	ldr	r2, [r3, #4]
    778c:	683b      	ldr	r3, [r7, #0]
    778e:	4013      	ands	r3, r2
    7790:	2b00      	cmp	r3, #0
    7792:	d1f9      	bne.n	7788 <hri_eic_wait_for_sync+0xc>
	};
}
    7794:	bf00      	nop
    7796:	370c      	adds	r7, #12
    7798:	46bd      	mov	sp, r7
    779a:	f85d 7b04 	ldr.w	r7, [sp], #4
    779e:	4770      	bx	lr

000077a0 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    77a0:	b480      	push	{r7}
    77a2:	b083      	sub	sp, #12
    77a4:	af00      	add	r7, sp, #0
    77a6:	6078      	str	r0, [r7, #4]
    77a8:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	685a      	ldr	r2, [r3, #4]
    77ae:	683b      	ldr	r3, [r7, #0]
    77b0:	4013      	ands	r3, r2
    77b2:	2b00      	cmp	r3, #0
    77b4:	bf14      	ite	ne
    77b6:	2301      	movne	r3, #1
    77b8:	2300      	moveq	r3, #0
    77ba:	b2db      	uxtb	r3, r3
}
    77bc:	4618      	mov	r0, r3
    77be:	370c      	adds	r7, #12
    77c0:	46bd      	mov	sp, r7
    77c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77c6:	4770      	bx	lr

000077c8 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    77c8:	b480      	push	{r7}
    77ca:	b083      	sub	sp, #12
    77cc:	af00      	add	r7, sp, #0
    77ce:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	695b      	ldr	r3, [r3, #20]
}
    77d4:	4618      	mov	r0, r3
    77d6:	370c      	adds	r7, #12
    77d8:	46bd      	mov	sp, r7
    77da:	f85d 7b04 	ldr.w	r7, [sp], #4
    77de:	4770      	bx	lr

000077e0 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    77e0:	b480      	push	{r7}
    77e2:	b083      	sub	sp, #12
    77e4:	af00      	add	r7, sp, #0
    77e6:	6078      	str	r0, [r7, #4]
    77e8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    77ea:	687b      	ldr	r3, [r7, #4]
    77ec:	683a      	ldr	r2, [r7, #0]
    77ee:	615a      	str	r2, [r3, #20]
}
    77f0:	bf00      	nop
    77f2:	370c      	adds	r7, #12
    77f4:	46bd      	mov	sp, r7
    77f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    77fa:	4770      	bx	lr

000077fc <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    77fc:	b480      	push	{r7}
    77fe:	b083      	sub	sp, #12
    7800:	af00      	add	r7, sp, #0
    7802:	6078      	str	r0, [r7, #4]
    7804:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    7806:	687b      	ldr	r3, [r7, #4]
    7808:	683a      	ldr	r2, [r7, #0]
    780a:	611a      	str	r2, [r3, #16]
}
    780c:	bf00      	nop
    780e:	370c      	adds	r7, #12
    7810:	46bd      	mov	sp, r7
    7812:	f85d 7b04 	ldr.w	r7, [sp], #4
    7816:	4770      	bx	lr

00007818 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    7818:	b480      	push	{r7}
    781a:	b083      	sub	sp, #12
    781c:	af00      	add	r7, sp, #0
    781e:	6078      	str	r0, [r7, #4]
    7820:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    7822:	687b      	ldr	r3, [r7, #4]
    7824:	683a      	ldr	r2, [r7, #0]
    7826:	60da      	str	r2, [r3, #12]
}
    7828:	bf00      	nop
    782a:	370c      	adds	r7, #12
    782c:	46bd      	mov	sp, r7
    782e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7832:	4770      	bx	lr

00007834 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7834:	b580      	push	{r7, lr}
    7836:	b082      	sub	sp, #8
    7838:	af00      	add	r7, sp, #0
    783a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    783c:	687b      	ldr	r3, [r7, #4]
    783e:	781b      	ldrb	r3, [r3, #0]
    7840:	b2db      	uxtb	r3, r3
    7842:	f043 0302 	orr.w	r3, r3, #2
    7846:	b2da      	uxtb	r2, r3
    7848:	687b      	ldr	r3, [r7, #4]
    784a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    784c:	2103      	movs	r1, #3
    784e:	6878      	ldr	r0, [r7, #4]
    7850:	4b02      	ldr	r3, [pc, #8]	; (785c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    7852:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7854:	bf00      	nop
    7856:	3708      	adds	r7, #8
    7858:	46bd      	mov	sp, r7
    785a:	bd80      	pop	{r7, pc}
    785c:	0000777d 	.word	0x0000777d

00007860 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7860:	b580      	push	{r7, lr}
    7862:	b082      	sub	sp, #8
    7864:	af00      	add	r7, sp, #0
    7866:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    7868:	687b      	ldr	r3, [r7, #4]
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	b2db      	uxtb	r3, r3
    786e:	f023 0302 	bic.w	r3, r3, #2
    7872:	b2da      	uxtb	r2, r3
    7874:	687b      	ldr	r3, [r7, #4]
    7876:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    7878:	2103      	movs	r1, #3
    787a:	6878      	ldr	r0, [r7, #4]
    787c:	4b02      	ldr	r3, [pc, #8]	; (7888 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    787e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    7880:	bf00      	nop
    7882:	3708      	adds	r7, #8
    7884:	46bd      	mov	sp, r7
    7886:	bd80      	pop	{r7, pc}
    7888:	0000777d 	.word	0x0000777d

0000788c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    788c:	b580      	push	{r7, lr}
    788e:	b084      	sub	sp, #16
    7890:	af00      	add	r7, sp, #0
    7892:	6078      	str	r0, [r7, #4]
    7894:	460b      	mov	r3, r1
    7896:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	781b      	ldrb	r3, [r3, #0]
    789c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    789e:	7bfb      	ldrb	r3, [r7, #15]
    78a0:	f023 0310 	bic.w	r3, r3, #16
    78a4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    78a6:	78fb      	ldrb	r3, [r7, #3]
    78a8:	011b      	lsls	r3, r3, #4
    78aa:	b25a      	sxtb	r2, r3
    78ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    78b0:	4313      	orrs	r3, r2
    78b2:	b25b      	sxtb	r3, r3
    78b4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    78b6:	687b      	ldr	r3, [r7, #4]
    78b8:	7bfa      	ldrb	r2, [r7, #15]
    78ba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    78bc:	2103      	movs	r1, #3
    78be:	6878      	ldr	r0, [r7, #4]
    78c0:	4b02      	ldr	r3, [pc, #8]	; (78cc <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    78c2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    78c4:	bf00      	nop
    78c6:	3710      	adds	r7, #16
    78c8:	46bd      	mov	sp, r7
    78ca:	bd80      	pop	{r7, pc}
    78cc:	0000777d 	.word	0x0000777d

000078d0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    78d0:	b580      	push	{r7, lr}
    78d2:	b084      	sub	sp, #16
    78d4:	af00      	add	r7, sp, #0
    78d6:	6078      	str	r0, [r7, #4]
    78d8:	460b      	mov	r3, r1
    78da:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    78dc:	2103      	movs	r1, #3
    78de:	6878      	ldr	r0, [r7, #4]
    78e0:	4b06      	ldr	r3, [pc, #24]	; (78fc <hri_eic_get_CTRLA_reg+0x2c>)
    78e2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    78e4:	687b      	ldr	r3, [r7, #4]
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    78ea:	7bfa      	ldrb	r2, [r7, #15]
    78ec:	78fb      	ldrb	r3, [r7, #3]
    78ee:	4013      	ands	r3, r2
    78f0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    78f2:	7bfb      	ldrb	r3, [r7, #15]
}
    78f4:	4618      	mov	r0, r3
    78f6:	3710      	adds	r7, #16
    78f8:	46bd      	mov	sp, r7
    78fa:	bd80      	pop	{r7, pc}
    78fc:	0000777d 	.word	0x0000777d

00007900 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    7900:	b580      	push	{r7, lr}
    7902:	b082      	sub	sp, #8
    7904:	af00      	add	r7, sp, #0
    7906:	6078      	str	r0, [r7, #4]
    7908:	460b      	mov	r3, r1
    790a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	78fa      	ldrb	r2, [r7, #3]
    7910:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    7912:	2103      	movs	r1, #3
    7914:	6878      	ldr	r0, [r7, #4]
    7916:	4b03      	ldr	r3, [pc, #12]	; (7924 <hri_eic_write_CTRLA_reg+0x24>)
    7918:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    791a:	bf00      	nop
    791c:	3708      	adds	r7, #8
    791e:	46bd      	mov	sp, r7
    7920:	bd80      	pop	{r7, pc}
    7922:	bf00      	nop
    7924:	0000777d 	.word	0x0000777d

00007928 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    7928:	b480      	push	{r7}
    792a:	b083      	sub	sp, #12
    792c:	af00      	add	r7, sp, #0
    792e:	6078      	str	r0, [r7, #4]
    7930:	460b      	mov	r3, r1
    7932:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	78fa      	ldrb	r2, [r7, #3]
    7938:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    793a:	bf00      	nop
    793c:	370c      	adds	r7, #12
    793e:	46bd      	mov	sp, r7
    7940:	f85d 7b04 	ldr.w	r7, [sp], #4
    7944:	4770      	bx	lr

00007946 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    7946:	b480      	push	{r7}
    7948:	b083      	sub	sp, #12
    794a:	af00      	add	r7, sp, #0
    794c:	6078      	str	r0, [r7, #4]
    794e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	683a      	ldr	r2, [r7, #0]
    7954:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7956:	bf00      	nop
    7958:	370c      	adds	r7, #12
    795a:	46bd      	mov	sp, r7
    795c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7960:	4770      	bx	lr

00007962 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    7962:	b480      	push	{r7}
    7964:	b083      	sub	sp, #12
    7966:	af00      	add	r7, sp, #0
    7968:	6078      	str	r0, [r7, #4]
    796a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	683a      	ldr	r2, [r7, #0]
    7970:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    7972:	bf00      	nop
    7974:	370c      	adds	r7, #12
    7976:	46bd      	mov	sp, r7
    7978:	f85d 7b04 	ldr.w	r7, [sp], #4
    797c:	4770      	bx	lr

0000797e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    797e:	b480      	push	{r7}
    7980:	b085      	sub	sp, #20
    7982:	af00      	add	r7, sp, #0
    7984:	60f8      	str	r0, [r7, #12]
    7986:	460b      	mov	r3, r1
    7988:	607a      	str	r2, [r7, #4]
    798a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    798c:	7afb      	ldrb	r3, [r7, #11]
    798e:	68fa      	ldr	r2, [r7, #12]
    7990:	3306      	adds	r3, #6
    7992:	009b      	lsls	r3, r3, #2
    7994:	4413      	add	r3, r2
    7996:	687a      	ldr	r2, [r7, #4]
    7998:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    799a:	bf00      	nop
    799c:	3714      	adds	r7, #20
    799e:	46bd      	mov	sp, r7
    79a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    79a4:	4770      	bx	lr

000079a6 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    79a6:	b480      	push	{r7}
    79a8:	b083      	sub	sp, #12
    79aa:	af00      	add	r7, sp, #0
    79ac:	6078      	str	r0, [r7, #4]
    79ae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	683a      	ldr	r2, [r7, #0]
    79b4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    79b6:	bf00      	nop
    79b8:	370c      	adds	r7, #12
    79ba:	46bd      	mov	sp, r7
    79bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c0:	4770      	bx	lr

000079c2 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    79c2:	b480      	push	{r7}
    79c4:	b083      	sub	sp, #12
    79c6:	af00      	add	r7, sp, #0
    79c8:	6078      	str	r0, [r7, #4]
    79ca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	683a      	ldr	r2, [r7, #0]
    79d0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    79d2:	bf00      	nop
    79d4:	370c      	adds	r7, #12
    79d6:	46bd      	mov	sp, r7
    79d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79dc:	4770      	bx	lr
	...

000079e0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    79e0:	b580      	push	{r7, lr}
    79e2:	b082      	sub	sp, #8
    79e4:	af00      	add	r7, sp, #0
    79e6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    79e8:	2101      	movs	r1, #1
    79ea:	483d      	ldr	r0, [pc, #244]	; (7ae0 <_ext_irq_init+0x100>)
    79ec:	4b3d      	ldr	r3, [pc, #244]	; (7ae4 <_ext_irq_init+0x104>)
    79ee:	4798      	blx	r3
    79f0:	4603      	mov	r3, r0
    79f2:	f083 0301 	eor.w	r3, r3, #1
    79f6:	b2db      	uxtb	r3, r3
    79f8:	2b00      	cmp	r3, #0
    79fa:	d011      	beq.n	7a20 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    79fc:	2102      	movs	r1, #2
    79fe:	4838      	ldr	r0, [pc, #224]	; (7ae0 <_ext_irq_init+0x100>)
    7a00:	4b39      	ldr	r3, [pc, #228]	; (7ae8 <_ext_irq_init+0x108>)
    7a02:	4798      	blx	r3
    7a04:	4603      	mov	r3, r0
    7a06:	2b00      	cmp	r3, #0
    7a08:	d006      	beq.n	7a18 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    7a0a:	4835      	ldr	r0, [pc, #212]	; (7ae0 <_ext_irq_init+0x100>)
    7a0c:	4b37      	ldr	r3, [pc, #220]	; (7aec <_ext_irq_init+0x10c>)
    7a0e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    7a10:	2102      	movs	r1, #2
    7a12:	4833      	ldr	r0, [pc, #204]	; (7ae0 <_ext_irq_init+0x100>)
    7a14:	4b36      	ldr	r3, [pc, #216]	; (7af0 <_ext_irq_init+0x110>)
    7a16:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    7a18:	2101      	movs	r1, #1
    7a1a:	4831      	ldr	r0, [pc, #196]	; (7ae0 <_ext_irq_init+0x100>)
    7a1c:	4b35      	ldr	r3, [pc, #212]	; (7af4 <_ext_irq_init+0x114>)
    7a1e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    7a20:	2101      	movs	r1, #1
    7a22:	482f      	ldr	r0, [pc, #188]	; (7ae0 <_ext_irq_init+0x100>)
    7a24:	4b32      	ldr	r3, [pc, #200]	; (7af0 <_ext_irq_init+0x110>)
    7a26:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    7a28:	2100      	movs	r1, #0
    7a2a:	482d      	ldr	r0, [pc, #180]	; (7ae0 <_ext_irq_init+0x100>)
    7a2c:	4b32      	ldr	r3, [pc, #200]	; (7af8 <_ext_irq_init+0x118>)
    7a2e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    7a30:	2100      	movs	r1, #0
    7a32:	482b      	ldr	r0, [pc, #172]	; (7ae0 <_ext_irq_init+0x100>)
    7a34:	4b31      	ldr	r3, [pc, #196]	; (7afc <_ext_irq_init+0x11c>)
    7a36:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    7a38:	2100      	movs	r1, #0
    7a3a:	4829      	ldr	r0, [pc, #164]	; (7ae0 <_ext_irq_init+0x100>)
    7a3c:	4b30      	ldr	r3, [pc, #192]	; (7b00 <_ext_irq_init+0x120>)
    7a3e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    7a40:	f240 31b1 	movw	r1, #945	; 0x3b1
    7a44:	4826      	ldr	r0, [pc, #152]	; (7ae0 <_ext_irq_init+0x100>)
    7a46:	4b2f      	ldr	r3, [pc, #188]	; (7b04 <_ext_irq_init+0x124>)
    7a48:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    7a4a:	f240 3131 	movw	r1, #817	; 0x331
    7a4e:	4824      	ldr	r0, [pc, #144]	; (7ae0 <_ext_irq_init+0x100>)
    7a50:	4b2d      	ldr	r3, [pc, #180]	; (7b08 <_ext_irq_init+0x128>)
    7a52:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    7a54:	2100      	movs	r1, #0
    7a56:	4822      	ldr	r0, [pc, #136]	; (7ae0 <_ext_irq_init+0x100>)
    7a58:	4b2c      	ldr	r3, [pc, #176]	; (7b0c <_ext_irq_init+0x12c>)
    7a5a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7a5c:	4a2c      	ldr	r2, [pc, #176]	; (7b10 <_ext_irq_init+0x130>)
    7a5e:	2100      	movs	r1, #0
    7a60:	481f      	ldr	r0, [pc, #124]	; (7ae0 <_ext_irq_init+0x100>)
    7a62:	4b2c      	ldr	r3, [pc, #176]	; (7b14 <_ext_irq_init+0x134>)
    7a64:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    7a66:	2211      	movs	r2, #17
    7a68:	2101      	movs	r1, #1
    7a6a:	481d      	ldr	r0, [pc, #116]	; (7ae0 <_ext_irq_init+0x100>)
    7a6c:	4b29      	ldr	r3, [pc, #164]	; (7b14 <_ext_irq_init+0x134>)
    7a6e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    7a70:	481b      	ldr	r0, [pc, #108]	; (7ae0 <_ext_irq_init+0x100>)
    7a72:	4b29      	ldr	r3, [pc, #164]	; (7b18 <_ext_irq_init+0x138>)
    7a74:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    7a76:	200c      	movs	r0, #12
    7a78:	4b28      	ldr	r3, [pc, #160]	; (7b1c <_ext_irq_init+0x13c>)
    7a7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    7a7c:	200c      	movs	r0, #12
    7a7e:	4b28      	ldr	r3, [pc, #160]	; (7b20 <_ext_irq_init+0x140>)
    7a80:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    7a82:	200c      	movs	r0, #12
    7a84:	4b27      	ldr	r3, [pc, #156]	; (7b24 <_ext_irq_init+0x144>)
    7a86:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    7a88:	2010      	movs	r0, #16
    7a8a:	4b24      	ldr	r3, [pc, #144]	; (7b1c <_ext_irq_init+0x13c>)
    7a8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    7a8e:	2010      	movs	r0, #16
    7a90:	4b23      	ldr	r3, [pc, #140]	; (7b20 <_ext_irq_init+0x140>)
    7a92:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    7a94:	2010      	movs	r0, #16
    7a96:	4b23      	ldr	r3, [pc, #140]	; (7b24 <_ext_irq_init+0x144>)
    7a98:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    7a9a:	2011      	movs	r0, #17
    7a9c:	4b1f      	ldr	r3, [pc, #124]	; (7b1c <_ext_irq_init+0x13c>)
    7a9e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    7aa0:	2011      	movs	r0, #17
    7aa2:	4b1f      	ldr	r3, [pc, #124]	; (7b20 <_ext_irq_init+0x140>)
    7aa4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    7aa6:	2011      	movs	r0, #17
    7aa8:	4b1e      	ldr	r3, [pc, #120]	; (7b24 <_ext_irq_init+0x144>)
    7aaa:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    7aac:	2012      	movs	r0, #18
    7aae:	4b1b      	ldr	r3, [pc, #108]	; (7b1c <_ext_irq_init+0x13c>)
    7ab0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    7ab2:	2012      	movs	r0, #18
    7ab4:	4b1a      	ldr	r3, [pc, #104]	; (7b20 <_ext_irq_init+0x140>)
    7ab6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    7ab8:	2012      	movs	r0, #18
    7aba:	4b1a      	ldr	r3, [pc, #104]	; (7b24 <_ext_irq_init+0x144>)
    7abc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    7abe:	2013      	movs	r0, #19
    7ac0:	4b16      	ldr	r3, [pc, #88]	; (7b1c <_ext_irq_init+0x13c>)
    7ac2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    7ac4:	2013      	movs	r0, #19
    7ac6:	4b16      	ldr	r3, [pc, #88]	; (7b20 <_ext_irq_init+0x140>)
    7ac8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    7aca:	2013      	movs	r0, #19
    7acc:	4b15      	ldr	r3, [pc, #84]	; (7b24 <_ext_irq_init+0x144>)
    7ace:	4798      	blx	r3

	callback = cb;
    7ad0:	4a15      	ldr	r2, [pc, #84]	; (7b28 <_ext_irq_init+0x148>)
    7ad2:	687b      	ldr	r3, [r7, #4]
    7ad4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    7ad6:	2300      	movs	r3, #0
}
    7ad8:	4618      	mov	r0, r3
    7ada:	3708      	adds	r7, #8
    7adc:	46bd      	mov	sp, r7
    7ade:	bd80      	pop	{r7, pc}
    7ae0:	40002800 	.word	0x40002800
    7ae4:	000077a1 	.word	0x000077a1
    7ae8:	000078d1 	.word	0x000078d1
    7aec:	00007861 	.word	0x00007861
    7af0:	0000777d 	.word	0x0000777d
    7af4:	00007901 	.word	0x00007901
    7af8:	0000788d 	.word	0x0000788d
    7afc:	00007929 	.word	0x00007929
    7b00:	00007947 	.word	0x00007947
    7b04:	00007963 	.word	0x00007963
    7b08:	000079a7 	.word	0x000079a7
    7b0c:	000079c3 	.word	0x000079c3
    7b10:	90990003 	.word	0x90990003
    7b14:	0000797f 	.word	0x0000797f
    7b18:	00007835 	.word	0x00007835
    7b1c:	000076fd 	.word	0x000076fd
    7b20:	00007741 	.word	0x00007741
    7b24:	000076c1 	.word	0x000076c1
    7b28:	20001a18 	.word	0x20001a18

00007b2c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    7b2c:	b580      	push	{r7, lr}
    7b2e:	b084      	sub	sp, #16
    7b30:	af00      	add	r7, sp, #0
    7b32:	6078      	str	r0, [r7, #4]
    7b34:	460b      	mov	r3, r1
    7b36:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    7b38:	23ff      	movs	r3, #255	; 0xff
    7b3a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    7b3c:	2300      	movs	r3, #0
    7b3e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    7b40:	e010      	b.n	7b64 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    7b42:	7bbb      	ldrb	r3, [r7, #14]
    7b44:	4a1c      	ldr	r2, [pc, #112]	; (7bb8 <_ext_irq_enable+0x8c>)
    7b46:	00db      	lsls	r3, r3, #3
    7b48:	4413      	add	r3, r2
    7b4a:	685a      	ldr	r2, [r3, #4]
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	429a      	cmp	r2, r3
    7b50:	d105      	bne.n	7b5e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    7b52:	7bbb      	ldrb	r3, [r7, #14]
    7b54:	4a18      	ldr	r2, [pc, #96]	; (7bb8 <_ext_irq_enable+0x8c>)
    7b56:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7b5a:	73fb      	strb	r3, [r7, #15]
			break;
    7b5c:	e005      	b.n	7b6a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    7b5e:	7bbb      	ldrb	r3, [r7, #14]
    7b60:	3301      	adds	r3, #1
    7b62:	73bb      	strb	r3, [r7, #14]
    7b64:	7bbb      	ldrb	r3, [r7, #14]
    7b66:	2b04      	cmp	r3, #4
    7b68:	d9eb      	bls.n	7b42 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    7b6a:	7bfb      	ldrb	r3, [r7, #15]
    7b6c:	2bff      	cmp	r3, #255	; 0xff
    7b6e:	d102      	bne.n	7b76 <_ext_irq_enable+0x4a>
		return -1;
    7b70:	f04f 33ff 	mov.w	r3, #4294967295
    7b74:	e01c      	b.n	7bb0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    7b76:	78fb      	ldrb	r3, [r7, #3]
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d008      	beq.n	7b8e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    7b7c:	7bfb      	ldrb	r3, [r7, #15]
    7b7e:	2201      	movs	r2, #1
    7b80:	fa02 f303 	lsl.w	r3, r2, r3
    7b84:	4619      	mov	r1, r3
    7b86:	480d      	ldr	r0, [pc, #52]	; (7bbc <_ext_irq_enable+0x90>)
    7b88:	4b0d      	ldr	r3, [pc, #52]	; (7bc0 <_ext_irq_enable+0x94>)
    7b8a:	4798      	blx	r3
    7b8c:	e00f      	b.n	7bae <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    7b8e:	7bfb      	ldrb	r3, [r7, #15]
    7b90:	2201      	movs	r2, #1
    7b92:	fa02 f303 	lsl.w	r3, r2, r3
    7b96:	4619      	mov	r1, r3
    7b98:	4808      	ldr	r0, [pc, #32]	; (7bbc <_ext_irq_enable+0x90>)
    7b9a:	4b0a      	ldr	r3, [pc, #40]	; (7bc4 <_ext_irq_enable+0x98>)
    7b9c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    7b9e:	7bfb      	ldrb	r3, [r7, #15]
    7ba0:	2201      	movs	r2, #1
    7ba2:	fa02 f303 	lsl.w	r3, r2, r3
    7ba6:	4619      	mov	r1, r3
    7ba8:	4804      	ldr	r0, [pc, #16]	; (7bbc <_ext_irq_enable+0x90>)
    7baa:	4b07      	ldr	r3, [pc, #28]	; (7bc8 <_ext_irq_enable+0x9c>)
    7bac:	4798      	blx	r3
	}

	return ERR_NONE;
    7bae:	2300      	movs	r3, #0
}
    7bb0:	4618      	mov	r0, r3
    7bb2:	3710      	adds	r7, #16
    7bb4:	46bd      	mov	sp, r7
    7bb6:	bd80      	pop	{r7, pc}
    7bb8:	00013b88 	.word	0x00013b88
    7bbc:	40002800 	.word	0x40002800
    7bc0:	000077fd 	.word	0x000077fd
    7bc4:	00007819 	.word	0x00007819
    7bc8:	000077e1 	.word	0x000077e1

00007bcc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    7bcc:	b580      	push	{r7, lr}
    7bce:	b084      	sub	sp, #16
    7bd0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    7bd2:	4841      	ldr	r0, [pc, #260]	; (7cd8 <_ext_irq_handler+0x10c>)
    7bd4:	4b41      	ldr	r3, [pc, #260]	; (7cdc <_ext_irq_handler+0x110>)
    7bd6:	4798      	blx	r3
    7bd8:	4603      	mov	r3, r0
    7bda:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    7bdc:	f04f 33ff 	mov.w	r3, #4294967295
    7be0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    7be2:	683b      	ldr	r3, [r7, #0]
    7be4:	4619      	mov	r1, r3
    7be6:	483c      	ldr	r0, [pc, #240]	; (7cd8 <_ext_irq_handler+0x10c>)
    7be8:	4b3d      	ldr	r3, [pc, #244]	; (7ce0 <_ext_irq_handler+0x114>)
    7bea:	4798      	blx	r3

	ASSERT(callback);
    7bec:	4b3d      	ldr	r3, [pc, #244]	; (7ce4 <_ext_irq_handler+0x118>)
    7bee:	681b      	ldr	r3, [r3, #0]
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	bf14      	ite	ne
    7bf4:	2301      	movne	r3, #1
    7bf6:	2300      	moveq	r3, #0
    7bf8:	b2db      	uxtb	r3, r3
    7bfa:	22f8      	movs	r2, #248	; 0xf8
    7bfc:	493a      	ldr	r1, [pc, #232]	; (7ce8 <_ext_irq_handler+0x11c>)
    7bfe:	4618      	mov	r0, r3
    7c00:	4b3a      	ldr	r3, [pc, #232]	; (7cec <_ext_irq_handler+0x120>)
    7c02:	4798      	blx	r3

	while (flags) {
    7c04:	e060      	b.n	7cc8 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    7c06:	683b      	ldr	r3, [r7, #0]
    7c08:	4618      	mov	r0, r3
    7c0a:	4b39      	ldr	r3, [pc, #228]	; (7cf0 <_ext_irq_handler+0x124>)
    7c0c:	4798      	blx	r3
    7c0e:	4603      	mov	r3, r0
    7c10:	b2db      	uxtb	r3, r3
    7c12:	3b01      	subs	r3, #1
    7c14:	b2db      	uxtb	r3, r3
    7c16:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    7c18:	e047      	b.n	7caa <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    7c1a:	2300      	movs	r3, #0
    7c1c:	71fb      	strb	r3, [r7, #7]
    7c1e:	2305      	movs	r3, #5
    7c20:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    7c22:	e024      	b.n	7c6e <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    7c24:	79ba      	ldrb	r2, [r7, #6]
    7c26:	79fb      	ldrb	r3, [r7, #7]
    7c28:	4413      	add	r3, r2
    7c2a:	105b      	asrs	r3, r3, #1
    7c2c:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    7c2e:	797b      	ldrb	r3, [r7, #5]
    7c30:	4a30      	ldr	r2, [pc, #192]	; (7cf4 <_ext_irq_handler+0x128>)
    7c32:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7c36:	461a      	mov	r2, r3
    7c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c3c:	429a      	cmp	r2, r3
    7c3e:	d106      	bne.n	7c4e <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    7c40:	797b      	ldrb	r3, [r7, #5]
    7c42:	4a2c      	ldr	r2, [pc, #176]	; (7cf4 <_ext_irq_handler+0x128>)
    7c44:	00db      	lsls	r3, r3, #3
    7c46:	4413      	add	r3, r2
    7c48:	685b      	ldr	r3, [r3, #4]
    7c4a:	60bb      	str	r3, [r7, #8]
					break;
    7c4c:	e013      	b.n	7c76 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    7c4e:	797b      	ldrb	r3, [r7, #5]
    7c50:	4a28      	ldr	r2, [pc, #160]	; (7cf4 <_ext_irq_handler+0x128>)
    7c52:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    7c56:	461a      	mov	r2, r3
    7c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c5c:	429a      	cmp	r2, r3
    7c5e:	da03      	bge.n	7c68 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    7c60:	797b      	ldrb	r3, [r7, #5]
    7c62:	3301      	adds	r3, #1
    7c64:	71fb      	strb	r3, [r7, #7]
    7c66:	e002      	b.n	7c6e <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    7c68:	797b      	ldrb	r3, [r7, #5]
    7c6a:	3b01      	subs	r3, #1
    7c6c:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    7c6e:	79ba      	ldrb	r2, [r7, #6]
    7c70:	79fb      	ldrb	r3, [r7, #7]
    7c72:	429a      	cmp	r2, r3
    7c74:	d2d6      	bcs.n	7c24 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    7c76:	68bb      	ldr	r3, [r7, #8]
    7c78:	f1b3 3fff 	cmp.w	r3, #4294967295
    7c7c:	d003      	beq.n	7c86 <_ext_irq_handler+0xba>
				callback(pin);
    7c7e:	4b19      	ldr	r3, [pc, #100]	; (7ce4 <_ext_irq_handler+0x118>)
    7c80:	681b      	ldr	r3, [r3, #0]
    7c82:	68b8      	ldr	r0, [r7, #8]
    7c84:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    7c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c8a:	2201      	movs	r2, #1
    7c8c:	fa02 f303 	lsl.w	r3, r2, r3
    7c90:	43da      	mvns	r2, r3
    7c92:	683b      	ldr	r3, [r7, #0]
    7c94:	4013      	ands	r3, r2
    7c96:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    7c98:	683b      	ldr	r3, [r7, #0]
    7c9a:	4618      	mov	r0, r3
    7c9c:	4b14      	ldr	r3, [pc, #80]	; (7cf0 <_ext_irq_handler+0x124>)
    7c9e:	4798      	blx	r3
    7ca0:	4603      	mov	r3, r0
    7ca2:	b2db      	uxtb	r3, r3
    7ca4:	3b01      	subs	r3, #1
    7ca6:	b2db      	uxtb	r3, r3
    7ca8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    7caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7cae:	f1b3 3fff 	cmp.w	r3, #4294967295
    7cb2:	d1b2      	bne.n	7c1a <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    7cb4:	4808      	ldr	r0, [pc, #32]	; (7cd8 <_ext_irq_handler+0x10c>)
    7cb6:	4b09      	ldr	r3, [pc, #36]	; (7cdc <_ext_irq_handler+0x110>)
    7cb8:	4798      	blx	r3
    7cba:	4603      	mov	r3, r0
    7cbc:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    7cbe:	683b      	ldr	r3, [r7, #0]
    7cc0:	4619      	mov	r1, r3
    7cc2:	4805      	ldr	r0, [pc, #20]	; (7cd8 <_ext_irq_handler+0x10c>)
    7cc4:	4b06      	ldr	r3, [pc, #24]	; (7ce0 <_ext_irq_handler+0x114>)
    7cc6:	4798      	blx	r3
	while (flags) {
    7cc8:	683b      	ldr	r3, [r7, #0]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d19b      	bne.n	7c06 <_ext_irq_handler+0x3a>
	}
}
    7cce:	bf00      	nop
    7cd0:	3710      	adds	r7, #16
    7cd2:	46bd      	mov	sp, r7
    7cd4:	bd80      	pop	{r7, pc}
    7cd6:	bf00      	nop
    7cd8:	40002800 	.word	0x40002800
    7cdc:	000077c9 	.word	0x000077c9
    7ce0:	000077e1 	.word	0x000077e1
    7ce4:	20001a18 	.word	0x20001a18
    7ce8:	00013bb0 	.word	0x00013bb0
    7cec:	00006a41 	.word	0x00006a41
    7cf0:	00012539 	.word	0x00012539
    7cf4:	00013b88 	.word	0x00013b88

00007cf8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    7cf8:	b580      	push	{r7, lr}
    7cfa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7cfc:	4b01      	ldr	r3, [pc, #4]	; (7d04 <EIC_0_Handler+0xc>)
    7cfe:	4798      	blx	r3
} /**
    7d00:	bf00      	nop
    7d02:	bd80      	pop	{r7, pc}
    7d04:	00007bcd 	.word	0x00007bcd

00007d08 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    7d08:	b580      	push	{r7, lr}
    7d0a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7d0c:	4b01      	ldr	r3, [pc, #4]	; (7d14 <EIC_4_Handler+0xc>)
    7d0e:	4798      	blx	r3
} /**
    7d10:	bf00      	nop
    7d12:	bd80      	pop	{r7, pc}
    7d14:	00007bcd 	.word	0x00007bcd

00007d18 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    7d18:	b580      	push	{r7, lr}
    7d1a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7d1c:	4b01      	ldr	r3, [pc, #4]	; (7d24 <EIC_5_Handler+0xc>)
    7d1e:	4798      	blx	r3
} /**
    7d20:	bf00      	nop
    7d22:	bd80      	pop	{r7, pc}
    7d24:	00007bcd 	.word	0x00007bcd

00007d28 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    7d28:	b580      	push	{r7, lr}
    7d2a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7d2c:	4b01      	ldr	r3, [pc, #4]	; (7d34 <EIC_6_Handler+0xc>)
    7d2e:	4798      	blx	r3
} /**
    7d30:	bf00      	nop
    7d32:	bd80      	pop	{r7, pc}
    7d34:	00007bcd 	.word	0x00007bcd

00007d38 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    7d38:	b580      	push	{r7, lr}
    7d3a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7d3c:	4b01      	ldr	r3, [pc, #4]	; (7d44 <EIC_7_Handler+0xc>)
    7d3e:	4798      	blx	r3
}
    7d40:	bf00      	nop
    7d42:	bd80      	pop	{r7, pc}
    7d44:	00007bcd 	.word	0x00007bcd

00007d48 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    7d48:	b480      	push	{r7}
    7d4a:	b085      	sub	sp, #20
    7d4c:	af00      	add	r7, sp, #0
    7d4e:	60f8      	str	r0, [r7, #12]
    7d50:	460b      	mov	r3, r1
    7d52:	607a      	str	r2, [r7, #4]
    7d54:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    7d56:	7afa      	ldrb	r2, [r7, #11]
    7d58:	68fb      	ldr	r3, [r7, #12]
    7d5a:	3248      	adds	r2, #72	; 0x48
    7d5c:	6879      	ldr	r1, [r7, #4]
    7d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7d62:	bf00      	nop
    7d64:	3714      	adds	r7, #20
    7d66:	46bd      	mov	sp, r7
    7d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d6c:	4770      	bx	lr

00007d6e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    7d6e:	b480      	push	{r7}
    7d70:	b083      	sub	sp, #12
    7d72:	af00      	add	r7, sp, #0
    7d74:	6078      	str	r0, [r7, #4]
    7d76:	460b      	mov	r3, r1
    7d78:	70fb      	strb	r3, [r7, #3]
    7d7a:	4613      	mov	r3, r2
    7d7c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    7d7e:	78fb      	ldrb	r3, [r7, #3]
    7d80:	687a      	ldr	r2, [r7, #4]
    7d82:	3304      	adds	r3, #4
    7d84:	00db      	lsls	r3, r3, #3
    7d86:	4413      	add	r3, r2
    7d88:	78ba      	ldrb	r2, [r7, #2]
    7d8a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    7d8c:	78fb      	ldrb	r3, [r7, #3]
    7d8e:	78ba      	ldrb	r2, [r7, #2]
    7d90:	43d2      	mvns	r2, r2
    7d92:	b2d1      	uxtb	r1, r2
    7d94:	687a      	ldr	r2, [r7, #4]
    7d96:	3304      	adds	r3, #4
    7d98:	00db      	lsls	r3, r3, #3
    7d9a:	4413      	add	r3, r2
    7d9c:	460a      	mov	r2, r1
    7d9e:	711a      	strb	r2, [r3, #4]
}
    7da0:	bf00      	nop
    7da2:	370c      	adds	r7, #12
    7da4:	46bd      	mov	sp, r7
    7da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7daa:	4770      	bx	lr

00007dac <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    7dac:	b480      	push	{r7}
    7dae:	b085      	sub	sp, #20
    7db0:	af00      	add	r7, sp, #0
    7db2:	60f8      	str	r0, [r7, #12]
    7db4:	460b      	mov	r3, r1
    7db6:	607a      	str	r2, [r7, #4]
    7db8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    7dba:	7afa      	ldrb	r2, [r7, #11]
    7dbc:	68fb      	ldr	r3, [r7, #12]
    7dbe:	3204      	adds	r2, #4
    7dc0:	6879      	ldr	r1, [r7, #4]
    7dc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    7dc6:	bf00      	nop
    7dc8:	3714      	adds	r7, #20
    7dca:	46bd      	mov	sp, r7
    7dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dd0:	4770      	bx	lr
	...

00007dd4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    7dd4:	b580      	push	{r7, lr}
    7dd6:	b082      	sub	sp, #8
    7dd8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    7dda:	2300      	movs	r3, #0
    7ddc:	71fb      	strb	r3, [r7, #7]
    7dde:	e00b      	b.n	7df8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7de0:	79fb      	ldrb	r3, [r7, #7]
    7de2:	4a18      	ldr	r2, [pc, #96]	; (7e44 <_event_system_init+0x70>)
    7de4:	5cd3      	ldrb	r3, [r2, r3]
    7de6:	461a      	mov	r2, r3
    7de8:	79fb      	ldrb	r3, [r7, #7]
    7dea:	4619      	mov	r1, r3
    7dec:	4816      	ldr	r0, [pc, #88]	; (7e48 <_event_system_init+0x74>)
    7dee:	4b17      	ldr	r3, [pc, #92]	; (7e4c <_event_system_init+0x78>)
    7df0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    7df2:	79fb      	ldrb	r3, [r7, #7]
    7df4:	3301      	adds	r3, #1
    7df6:	71fb      	strb	r3, [r7, #7]
    7df8:	79fb      	ldrb	r3, [r7, #7]
    7dfa:	2b42      	cmp	r3, #66	; 0x42
    7dfc:	d9f0      	bls.n	7de0 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7dfe:	2300      	movs	r3, #0
    7e00:	71fb      	strb	r3, [r7, #7]
    7e02:	e016      	b.n	7e32 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7e04:	79fb      	ldrb	r3, [r7, #7]
    7e06:	4a12      	ldr	r2, [pc, #72]	; (7e50 <_event_system_init+0x7c>)
    7e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7e0c:	461a      	mov	r2, r3
    7e0e:	79fb      	ldrb	r3, [r7, #7]
    7e10:	4619      	mov	r1, r3
    7e12:	480d      	ldr	r0, [pc, #52]	; (7e48 <_event_system_init+0x74>)
    7e14:	4b0f      	ldr	r3, [pc, #60]	; (7e54 <_event_system_init+0x80>)
    7e16:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    7e18:	79fb      	ldrb	r3, [r7, #7]
    7e1a:	4a0f      	ldr	r2, [pc, #60]	; (7e58 <_event_system_init+0x84>)
    7e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e20:	b2da      	uxtb	r2, r3
    7e22:	79fb      	ldrb	r3, [r7, #7]
    7e24:	4619      	mov	r1, r3
    7e26:	4808      	ldr	r0, [pc, #32]	; (7e48 <_event_system_init+0x74>)
    7e28:	4b0c      	ldr	r3, [pc, #48]	; (7e5c <_event_system_init+0x88>)
    7e2a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7e2c:	79fb      	ldrb	r3, [r7, #7]
    7e2e:	3301      	adds	r3, #1
    7e30:	71fb      	strb	r3, [r7, #7]
    7e32:	79fb      	ldrb	r3, [r7, #7]
    7e34:	2b1f      	cmp	r3, #31
    7e36:	d9e5      	bls.n	7e04 <_event_system_init+0x30>
	}

	return ERR_NONE;
    7e38:	2300      	movs	r3, #0
}
    7e3a:	4618      	mov	r0, r3
    7e3c:	3708      	adds	r7, #8
    7e3e:	46bd      	mov	sp, r7
    7e40:	bd80      	pop	{r7, pc}
    7e42:	bf00      	nop
    7e44:	00013bc8 	.word	0x00013bc8
    7e48:	4100e000 	.word	0x4100e000
    7e4c:	00007d49 	.word	0x00007d49
    7e50:	00013c0c 	.word	0x00013c0c
    7e54:	00007dad 	.word	0x00007dad
    7e58:	00013c4c 	.word	0x00013c4c
    7e5c:	00007d6f 	.word	0x00007d6f

00007e60 <hri_gclk_wait_for_sync>:
{
    7e60:	b480      	push	{r7}
    7e62:	b083      	sub	sp, #12
    7e64:	af00      	add	r7, sp, #0
    7e66:	6078      	str	r0, [r7, #4]
    7e68:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7e6a:	bf00      	nop
    7e6c:	687b      	ldr	r3, [r7, #4]
    7e6e:	685a      	ldr	r2, [r3, #4]
    7e70:	683b      	ldr	r3, [r7, #0]
    7e72:	4013      	ands	r3, r2
    7e74:	2b00      	cmp	r3, #0
    7e76:	d1f9      	bne.n	7e6c <hri_gclk_wait_for_sync+0xc>
}
    7e78:	bf00      	nop
    7e7a:	370c      	adds	r7, #12
    7e7c:	46bd      	mov	sp, r7
    7e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e82:	4770      	bx	lr

00007e84 <hri_gclk_write_GENCTRL_reg>:
{
    7e84:	b580      	push	{r7, lr}
    7e86:	b084      	sub	sp, #16
    7e88:	af00      	add	r7, sp, #0
    7e8a:	60f8      	str	r0, [r7, #12]
    7e8c:	460b      	mov	r3, r1
    7e8e:	607a      	str	r2, [r7, #4]
    7e90:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    7e92:	7afa      	ldrb	r2, [r7, #11]
    7e94:	68fb      	ldr	r3, [r7, #12]
    7e96:	3208      	adds	r2, #8
    7e98:	6879      	ldr	r1, [r7, #4]
    7e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7e9e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    7ea2:	68f8      	ldr	r0, [r7, #12]
    7ea4:	4b02      	ldr	r3, [pc, #8]	; (7eb0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    7ea6:	4798      	blx	r3
}
    7ea8:	bf00      	nop
    7eaa:	3710      	adds	r7, #16
    7eac:	46bd      	mov	sp, r7
    7eae:	bd80      	pop	{r7, pc}
    7eb0:	00007e61 	.word	0x00007e61

00007eb4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    7eb4:	b580      	push	{r7, lr}
    7eb6:	b082      	sub	sp, #8
    7eb8:	af00      	add	r7, sp, #0
    7eba:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	f003 0301 	and.w	r3, r3, #1
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d004      	beq.n	7ed0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    7ec6:	4a36      	ldr	r2, [pc, #216]	; (7fa0 <_gclk_init_generators_by_fref+0xec>)
    7ec8:	2100      	movs	r1, #0
    7eca:	4836      	ldr	r0, [pc, #216]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7ecc:	4b36      	ldr	r3, [pc, #216]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7ece:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	f003 0302 	and.w	r3, r3, #2
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d004      	beq.n	7ee4 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    7eda:	4a34      	ldr	r2, [pc, #208]	; (7fac <_gclk_init_generators_by_fref+0xf8>)
    7edc:	2101      	movs	r1, #1
    7ede:	4831      	ldr	r0, [pc, #196]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7ee0:	4b31      	ldr	r3, [pc, #196]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7ee2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	f003 0304 	and.w	r3, r3, #4
    7eea:	2b00      	cmp	r3, #0
    7eec:	d004      	beq.n	7ef8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    7eee:	4a30      	ldr	r2, [pc, #192]	; (7fb0 <_gclk_init_generators_by_fref+0xfc>)
    7ef0:	2102      	movs	r1, #2
    7ef2:	482c      	ldr	r0, [pc, #176]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7ef4:	4b2c      	ldr	r3, [pc, #176]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7ef6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    7ef8:	687b      	ldr	r3, [r7, #4]
    7efa:	f003 0308 	and.w	r3, r3, #8
    7efe:	2b00      	cmp	r3, #0
    7f00:	d004      	beq.n	7f0c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    7f02:	4a2c      	ldr	r2, [pc, #176]	; (7fb4 <_gclk_init_generators_by_fref+0x100>)
    7f04:	2103      	movs	r1, #3
    7f06:	4827      	ldr	r0, [pc, #156]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f08:	4b27      	ldr	r3, [pc, #156]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f0a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	f003 0310 	and.w	r3, r3, #16
    7f12:	2b00      	cmp	r3, #0
    7f14:	d004      	beq.n	7f20 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    7f16:	4a28      	ldr	r2, [pc, #160]	; (7fb8 <_gclk_init_generators_by_fref+0x104>)
    7f18:	2104      	movs	r1, #4
    7f1a:	4822      	ldr	r0, [pc, #136]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f1c:	4b22      	ldr	r3, [pc, #136]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f1e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    7f20:	687b      	ldr	r3, [r7, #4]
    7f22:	f003 0320 	and.w	r3, r3, #32
    7f26:	2b00      	cmp	r3, #0
    7f28:	d004      	beq.n	7f34 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    7f2a:	4a24      	ldr	r2, [pc, #144]	; (7fbc <_gclk_init_generators_by_fref+0x108>)
    7f2c:	2105      	movs	r1, #5
    7f2e:	481d      	ldr	r0, [pc, #116]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f30:	4b1d      	ldr	r3, [pc, #116]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f32:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    7f34:	687b      	ldr	r3, [r7, #4]
    7f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d004      	beq.n	7f48 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    7f3e:	4a20      	ldr	r2, [pc, #128]	; (7fc0 <_gclk_init_generators_by_fref+0x10c>)
    7f40:	2106      	movs	r1, #6
    7f42:	4818      	ldr	r0, [pc, #96]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f44:	4b18      	ldr	r3, [pc, #96]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f46:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    7f48:	687b      	ldr	r3, [r7, #4]
    7f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7f4e:	2b00      	cmp	r3, #0
    7f50:	d004      	beq.n	7f5c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    7f52:	4a1c      	ldr	r2, [pc, #112]	; (7fc4 <_gclk_init_generators_by_fref+0x110>)
    7f54:	2107      	movs	r1, #7
    7f56:	4813      	ldr	r0, [pc, #76]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f58:	4b13      	ldr	r3, [pc, #76]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f5a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7f62:	2b00      	cmp	r3, #0
    7f64:	d004      	beq.n	7f70 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    7f66:	4a18      	ldr	r2, [pc, #96]	; (7fc8 <_gclk_init_generators_by_fref+0x114>)
    7f68:	2108      	movs	r1, #8
    7f6a:	480e      	ldr	r0, [pc, #56]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f6c:	4b0e      	ldr	r3, [pc, #56]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f6e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    7f76:	2b00      	cmp	r3, #0
    7f78:	d004      	beq.n	7f84 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    7f7a:	4a14      	ldr	r2, [pc, #80]	; (7fcc <_gclk_init_generators_by_fref+0x118>)
    7f7c:	210a      	movs	r1, #10
    7f7e:	4809      	ldr	r0, [pc, #36]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f80:	4b09      	ldr	r3, [pc, #36]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f82:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d004      	beq.n	7f98 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    7f8e:	4a10      	ldr	r2, [pc, #64]	; (7fd0 <_gclk_init_generators_by_fref+0x11c>)
    7f90:	210b      	movs	r1, #11
    7f92:	4804      	ldr	r0, [pc, #16]	; (7fa4 <_gclk_init_generators_by_fref+0xf0>)
    7f94:	4b04      	ldr	r3, [pc, #16]	; (7fa8 <_gclk_init_generators_by_fref+0xf4>)
    7f96:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    7f98:	bf00      	nop
    7f9a:	3708      	adds	r7, #8
    7f9c:	46bd      	mov	sp, r7
    7f9e:	bd80      	pop	{r7, pc}
    7fa0:	00010107 	.word	0x00010107
    7fa4:	40001c00 	.word	0x40001c00
    7fa8:	00007e85 	.word	0x00007e85
    7fac:	00010907 	.word	0x00010907
    7fb0:	00010906 	.word	0x00010906
    7fb4:	00020908 	.word	0x00020908
    7fb8:	00010901 	.word	0x00010901
    7fbc:	00062901 	.word	0x00062901
    7fc0:	000c2901 	.word	0x000c2901
    7fc4:	00082908 	.word	0x00082908
    7fc8:	00032901 	.word	0x00032901
    7fcc:	00010905 	.word	0x00010905
    7fd0:	00041905 	.word	0x00041905

00007fd4 <hri_mclk_write_CPUDIV_reg>:
{
    7fd4:	b480      	push	{r7}
    7fd6:	b083      	sub	sp, #12
    7fd8:	af00      	add	r7, sp, #0
    7fda:	6078      	str	r0, [r7, #4]
    7fdc:	460b      	mov	r3, r1
    7fde:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	78fa      	ldrb	r2, [r7, #3]
    7fe4:	715a      	strb	r2, [r3, #5]
}
    7fe6:	bf00      	nop
    7fe8:	370c      	adds	r7, #12
    7fea:	46bd      	mov	sp, r7
    7fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ff0:	4770      	bx	lr
	...

00007ff4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    7ff4:	b580      	push	{r7, lr}
    7ff6:	b082      	sub	sp, #8
    7ff8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    7ffa:	4b05      	ldr	r3, [pc, #20]	; (8010 <_mclk_init+0x1c>)
    7ffc:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    7ffe:	2101      	movs	r1, #1
    8000:	6878      	ldr	r0, [r7, #4]
    8002:	4b04      	ldr	r3, [pc, #16]	; (8014 <_mclk_init+0x20>)
    8004:	4798      	blx	r3
}
    8006:	bf00      	nop
    8008:	3708      	adds	r7, #8
    800a:	46bd      	mov	sp, r7
    800c:	bd80      	pop	{r7, pc}
    800e:	bf00      	nop
    8010:	40000800 	.word	0x40000800
    8014:	00007fd5 	.word	0x00007fd5

00008018 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    8018:	b480      	push	{r7}
    801a:	b083      	sub	sp, #12
    801c:	af00      	add	r7, sp, #0
    801e:	6078      	str	r0, [r7, #4]
    8020:	460b      	mov	r3, r1
    8022:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	78fa      	ldrb	r2, [r7, #3]
    8028:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    802a:	bf00      	nop
    802c:	370c      	adds	r7, #12
    802e:	46bd      	mov	sp, r7
    8030:	f85d 7b04 	ldr.w	r7, [sp], #4
    8034:	4770      	bx	lr

00008036 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    8036:	b480      	push	{r7}
    8038:	b083      	sub	sp, #12
    803a:	af00      	add	r7, sp, #0
    803c:	6078      	str	r0, [r7, #4]
    803e:	460b      	mov	r3, r1
    8040:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    8042:	687b      	ldr	r3, [r7, #4]
    8044:	887a      	ldrh	r2, [r7, #2]
    8046:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8048:	bf00      	nop
    804a:	370c      	adds	r7, #12
    804c:	46bd      	mov	sp, r7
    804e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8052:	4770      	bx	lr

00008054 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    8054:	b480      	push	{r7}
    8056:	b083      	sub	sp, #12
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
    805c:	460b      	mov	r3, r1
    805e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	78fa      	ldrb	r2, [r7, #3]
    8064:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8066:	bf00      	nop
    8068:	370c      	adds	r7, #12
    806a:	46bd      	mov	sp, r7
    806c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8070:	4770      	bx	lr

00008072 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    8072:	b480      	push	{r7}
    8074:	b083      	sub	sp, #12
    8076:	af00      	add	r7, sp, #0
    8078:	6078      	str	r0, [r7, #4]
    807a:	460b      	mov	r3, r1
    807c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    807e:	687b      	ldr	r3, [r7, #4]
    8080:	78fa      	ldrb	r2, [r7, #3]
    8082:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8084:	bf00      	nop
    8086:	370c      	adds	r7, #12
    8088:	46bd      	mov	sp, r7
    808a:	f85d 7b04 	ldr.w	r7, [sp], #4
    808e:	4770      	bx	lr

00008090 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    8090:	b480      	push	{r7}
    8092:	b085      	sub	sp, #20
    8094:	af00      	add	r7, sp, #0
    8096:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    8098:	687b      	ldr	r3, [r7, #4]
    809a:	69db      	ldr	r3, [r3, #28]
    809c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    809e:	68fb      	ldr	r3, [r7, #12]
    80a0:	0a1b      	lsrs	r3, r3, #8
    80a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    80a6:	60fb      	str	r3, [r7, #12]
	return tmp;
    80a8:	68fb      	ldr	r3, [r7, #12]
}
    80aa:	4618      	mov	r0, r3
    80ac:	3714      	adds	r7, #20
    80ae:	46bd      	mov	sp, r7
    80b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80b4:	4770      	bx	lr

000080b6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    80b6:	b480      	push	{r7}
    80b8:	b083      	sub	sp, #12
    80ba:	af00      	add	r7, sp, #0
    80bc:	6078      	str	r0, [r7, #4]
    80be:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    80c0:	687b      	ldr	r3, [r7, #4]
    80c2:	683a      	ldr	r2, [r7, #0]
    80c4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    80c6:	bf00      	nop
    80c8:	370c      	adds	r7, #12
    80ca:	46bd      	mov	sp, r7
    80cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    80d0:	4770      	bx	lr
	...

000080d4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    80d4:	b580      	push	{r7, lr}
    80d6:	b082      	sub	sp, #8
    80d8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    80da:	4b13      	ldr	r3, [pc, #76]	; (8128 <_osc32kctrl_init_sources+0x54>)
    80dc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    80de:	2300      	movs	r3, #0
    80e0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    80e2:	f242 018e 	movw	r1, #8334	; 0x208e
    80e6:	6878      	ldr	r0, [r7, #4]
    80e8:	4b10      	ldr	r3, [pc, #64]	; (812c <_osc32kctrl_init_sources+0x58>)
    80ea:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    80ec:	2100      	movs	r1, #0
    80ee:	6878      	ldr	r0, [r7, #4]
    80f0:	4b0f      	ldr	r3, [pc, #60]	; (8130 <_osc32kctrl_init_sources+0x5c>)
    80f2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    80f4:	2100      	movs	r1, #0
    80f6:	6878      	ldr	r0, [r7, #4]
    80f8:	4b0e      	ldr	r3, [pc, #56]	; (8134 <_osc32kctrl_init_sources+0x60>)
    80fa:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    80fc:	6878      	ldr	r0, [r7, #4]
    80fe:	4b0e      	ldr	r3, [pc, #56]	; (8138 <_osc32kctrl_init_sources+0x64>)
    8100:	4798      	blx	r3
    8102:	4603      	mov	r3, r0
    8104:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    8106:	887b      	ldrh	r3, [r7, #2]
    8108:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    810a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    810e:	4619      	mov	r1, r3
    8110:	6878      	ldr	r0, [r7, #4]
    8112:	4b0a      	ldr	r3, [pc, #40]	; (813c <_osc32kctrl_init_sources+0x68>)
    8114:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    8116:	2100      	movs	r1, #0
    8118:	6878      	ldr	r0, [r7, #4]
    811a:	4b09      	ldr	r3, [pc, #36]	; (8140 <_osc32kctrl_init_sources+0x6c>)
    811c:	4798      	blx	r3
	(void)calib;
}
    811e:	bf00      	nop
    8120:	3708      	adds	r7, #8
    8122:	46bd      	mov	sp, r7
    8124:	bd80      	pop	{r7, pc}
    8126:	bf00      	nop
    8128:	40001400 	.word	0x40001400
    812c:	00008037 	.word	0x00008037
    8130:	00008055 	.word	0x00008055
    8134:	00008073 	.word	0x00008073
    8138:	00008091 	.word	0x00008091
    813c:	000080b7 	.word	0x000080b7
    8140:	00008019 	.word	0x00008019

00008144 <hri_gclk_wait_for_sync>:
{
    8144:	b480      	push	{r7}
    8146:	b083      	sub	sp, #12
    8148:	af00      	add	r7, sp, #0
    814a:	6078      	str	r0, [r7, #4]
    814c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    814e:	bf00      	nop
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	685a      	ldr	r2, [r3, #4]
    8154:	683b      	ldr	r3, [r7, #0]
    8156:	4013      	ands	r3, r2
    8158:	2b00      	cmp	r3, #0
    815a:	d1f9      	bne.n	8150 <hri_gclk_wait_for_sync+0xc>
}
    815c:	bf00      	nop
    815e:	370c      	adds	r7, #12
    8160:	46bd      	mov	sp, r7
    8162:	f85d 7b04 	ldr.w	r7, [sp], #4
    8166:	4770      	bx	lr

00008168 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    8168:	b480      	push	{r7}
    816a:	b083      	sub	sp, #12
    816c:	af00      	add	r7, sp, #0
    816e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    8170:	687b      	ldr	r3, [r7, #4]
    8172:	685b      	ldr	r3, [r3, #4]
    8174:	089b      	lsrs	r3, r3, #2
    8176:	f003 0301 	and.w	r3, r3, #1
    817a:	2b00      	cmp	r3, #0
    817c:	bf14      	ite	ne
    817e:	2301      	movne	r3, #1
    8180:	2300      	moveq	r3, #0
    8182:	b2db      	uxtb	r3, r3
}
    8184:	4618      	mov	r0, r3
    8186:	370c      	adds	r7, #12
    8188:	46bd      	mov	sp, r7
    818a:	f85d 7b04 	ldr.w	r7, [sp], #4
    818e:	4770      	bx	lr

00008190 <hri_gclk_read_SYNCBUSY_reg>:
{
    8190:	b480      	push	{r7}
    8192:	b083      	sub	sp, #12
    8194:	af00      	add	r7, sp, #0
    8196:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    8198:	687b      	ldr	r3, [r7, #4]
    819a:	685b      	ldr	r3, [r3, #4]
}
    819c:	4618      	mov	r0, r3
    819e:	370c      	adds	r7, #12
    81a0:	46bd      	mov	sp, r7
    81a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a6:	4770      	bx	lr

000081a8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    81a8:	b580      	push	{r7, lr}
    81aa:	b086      	sub	sp, #24
    81ac:	af00      	add	r7, sp, #0
    81ae:	60f8      	str	r0, [r7, #12]
    81b0:	460b      	mov	r3, r1
    81b2:	607a      	str	r2, [r7, #4]
    81b4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    81b6:	7afa      	ldrb	r2, [r7, #11]
    81b8:	68fb      	ldr	r3, [r7, #12]
    81ba:	3208      	adds	r2, #8
    81bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81c0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    81c2:	697b      	ldr	r3, [r7, #20]
    81c4:	f023 030f 	bic.w	r3, r3, #15
    81c8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	f003 030f 	and.w	r3, r3, #15
    81d0:	697a      	ldr	r2, [r7, #20]
    81d2:	4313      	orrs	r3, r2
    81d4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    81d6:	7afa      	ldrb	r2, [r7, #11]
    81d8:	68fb      	ldr	r3, [r7, #12]
    81da:	3208      	adds	r2, #8
    81dc:	6979      	ldr	r1, [r7, #20]
    81de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    81e2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    81e6:	68f8      	ldr	r0, [r7, #12]
    81e8:	4b02      	ldr	r3, [pc, #8]	; (81f4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    81ea:	4798      	blx	r3
}
    81ec:	bf00      	nop
    81ee:	3718      	adds	r7, #24
    81f0:	46bd      	mov	sp, r7
    81f2:	bd80      	pop	{r7, pc}
    81f4:	00008145 	.word	0x00008145

000081f8 <hri_gclk_write_PCHCTRL_reg>:
{
    81f8:	b480      	push	{r7}
    81fa:	b085      	sub	sp, #20
    81fc:	af00      	add	r7, sp, #0
    81fe:	60f8      	str	r0, [r7, #12]
    8200:	460b      	mov	r3, r1
    8202:	607a      	str	r2, [r7, #4]
    8204:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    8206:	7afa      	ldrb	r2, [r7, #11]
    8208:	68fb      	ldr	r3, [r7, #12]
    820a:	3220      	adds	r2, #32
    820c:	6879      	ldr	r1, [r7, #4]
    820e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8212:	bf00      	nop
    8214:	3714      	adds	r7, #20
    8216:	46bd      	mov	sp, r7
    8218:	f85d 7b04 	ldr.w	r7, [sp], #4
    821c:	4770      	bx	lr

0000821e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    821e:	b480      	push	{r7}
    8220:	b085      	sub	sp, #20
    8222:	af00      	add	r7, sp, #0
    8224:	60f8      	str	r0, [r7, #12]
    8226:	460b      	mov	r3, r1
    8228:	607a      	str	r2, [r7, #4]
    822a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    822c:	bf00      	nop
    822e:	7afa      	ldrb	r2, [r7, #11]
    8230:	68f9      	ldr	r1, [r7, #12]
    8232:	4613      	mov	r3, r2
    8234:	009b      	lsls	r3, r3, #2
    8236:	4413      	add	r3, r2
    8238:	009b      	lsls	r3, r3, #2
    823a:	440b      	add	r3, r1
    823c:	333c      	adds	r3, #60	; 0x3c
    823e:	681a      	ldr	r2, [r3, #0]
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	4013      	ands	r3, r2
    8244:	2b00      	cmp	r3, #0
    8246:	d1f2      	bne.n	822e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    8248:	bf00      	nop
    824a:	3714      	adds	r7, #20
    824c:	46bd      	mov	sp, r7
    824e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8252:	4770      	bx	lr

00008254 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    8254:	b480      	push	{r7}
    8256:	b083      	sub	sp, #12
    8258:	af00      	add	r7, sp, #0
    825a:	6078      	str	r0, [r7, #4]
    825c:	460b      	mov	r3, r1
    825e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    8260:	78fa      	ldrb	r2, [r7, #3]
    8262:	6879      	ldr	r1, [r7, #4]
    8264:	4613      	mov	r3, r2
    8266:	009b      	lsls	r3, r3, #2
    8268:	4413      	add	r3, r2
    826a:	009b      	lsls	r3, r3, #2
    826c:	440b      	add	r3, r1
    826e:	3340      	adds	r3, #64	; 0x40
    8270:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    8272:	f003 0301 	and.w	r3, r3, #1
    8276:	2b00      	cmp	r3, #0
    8278:	bf14      	ite	ne
    827a:	2301      	movne	r3, #1
    827c:	2300      	moveq	r3, #0
    827e:	b2db      	uxtb	r3, r3
}
    8280:	4618      	mov	r0, r3
    8282:	370c      	adds	r7, #12
    8284:	46bd      	mov	sp, r7
    8286:	f85d 7b04 	ldr.w	r7, [sp], #4
    828a:	4770      	bx	lr

0000828c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    828c:	b480      	push	{r7}
    828e:	b083      	sub	sp, #12
    8290:	af00      	add	r7, sp, #0
    8292:	6078      	str	r0, [r7, #4]
    8294:	460b      	mov	r3, r1
    8296:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    8298:	78fa      	ldrb	r2, [r7, #3]
    829a:	6879      	ldr	r1, [r7, #4]
    829c:	4613      	mov	r3, r2
    829e:	009b      	lsls	r3, r3, #2
    82a0:	4413      	add	r3, r2
    82a2:	009b      	lsls	r3, r3, #2
    82a4:	440b      	add	r3, r1
    82a6:	3340      	adds	r3, #64	; 0x40
    82a8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    82aa:	085b      	lsrs	r3, r3, #1
    82ac:	f003 0301 	and.w	r3, r3, #1
    82b0:	2b00      	cmp	r3, #0
    82b2:	bf14      	ite	ne
    82b4:	2301      	movne	r3, #1
    82b6:	2300      	moveq	r3, #0
    82b8:	b2db      	uxtb	r3, r3
}
    82ba:	4618      	mov	r0, r3
    82bc:	370c      	adds	r7, #12
    82be:	46bd      	mov	sp, r7
    82c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c4:	4770      	bx	lr
	...

000082c8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    82c8:	b580      	push	{r7, lr}
    82ca:	b082      	sub	sp, #8
    82cc:	af00      	add	r7, sp, #0
    82ce:	6078      	str	r0, [r7, #4]
    82d0:	460b      	mov	r3, r1
    82d2:	70fb      	strb	r3, [r7, #3]
    82d4:	4613      	mov	r3, r2
    82d6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    82d8:	78fa      	ldrb	r2, [r7, #3]
    82da:	6879      	ldr	r1, [r7, #4]
    82dc:	4613      	mov	r3, r2
    82de:	009b      	lsls	r3, r3, #2
    82e0:	4413      	add	r3, r2
    82e2:	009b      	lsls	r3, r3, #2
    82e4:	440b      	add	r3, r1
    82e6:	3330      	adds	r3, #48	; 0x30
    82e8:	78ba      	ldrb	r2, [r7, #2]
    82ea:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    82ec:	78fb      	ldrb	r3, [r7, #3]
    82ee:	2202      	movs	r2, #2
    82f0:	4619      	mov	r1, r3
    82f2:	6878      	ldr	r0, [r7, #4]
    82f4:	4b02      	ldr	r3, [pc, #8]	; (8300 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    82f6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    82f8:	bf00      	nop
    82fa:	3708      	adds	r7, #8
    82fc:	46bd      	mov	sp, r7
    82fe:	bd80      	pop	{r7, pc}
    8300:	0000821f 	.word	0x0000821f

00008304 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    8304:	b580      	push	{r7, lr}
    8306:	b084      	sub	sp, #16
    8308:	af00      	add	r7, sp, #0
    830a:	60f8      	str	r0, [r7, #12]
    830c:	460b      	mov	r3, r1
    830e:	607a      	str	r2, [r7, #4]
    8310:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    8312:	7afa      	ldrb	r2, [r7, #11]
    8314:	68f9      	ldr	r1, [r7, #12]
    8316:	4613      	mov	r3, r2
    8318:	009b      	lsls	r3, r3, #2
    831a:	4413      	add	r3, r2
    831c:	009b      	lsls	r3, r3, #2
    831e:	440b      	add	r3, r1
    8320:	3334      	adds	r3, #52	; 0x34
    8322:	687a      	ldr	r2, [r7, #4]
    8324:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    8326:	7afb      	ldrb	r3, [r7, #11]
    8328:	2206      	movs	r2, #6
    832a:	4619      	mov	r1, r3
    832c:	68f8      	ldr	r0, [r7, #12]
    832e:	4b03      	ldr	r3, [pc, #12]	; (833c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    8330:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    8332:	bf00      	nop
    8334:	3710      	adds	r7, #16
    8336:	46bd      	mov	sp, r7
    8338:	bd80      	pop	{r7, pc}
    833a:	bf00      	nop
    833c:	0000821f 	.word	0x0000821f

00008340 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    8340:	b480      	push	{r7}
    8342:	b085      	sub	sp, #20
    8344:	af00      	add	r7, sp, #0
    8346:	60f8      	str	r0, [r7, #12]
    8348:	460b      	mov	r3, r1
    834a:	607a      	str	r2, [r7, #4]
    834c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    834e:	7afa      	ldrb	r2, [r7, #11]
    8350:	68f9      	ldr	r1, [r7, #12]
    8352:	4613      	mov	r3, r2
    8354:	009b      	lsls	r3, r3, #2
    8356:	4413      	add	r3, r2
    8358:	009b      	lsls	r3, r3, #2
    835a:	440b      	add	r3, r1
    835c:	3338      	adds	r3, #56	; 0x38
    835e:	687a      	ldr	r2, [r7, #4]
    8360:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    8362:	bf00      	nop
    8364:	3714      	adds	r7, #20
    8366:	46bd      	mov	sp, r7
    8368:	f85d 7b04 	ldr.w	r7, [sp], #4
    836c:	4770      	bx	lr

0000836e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    836e:	b480      	push	{r7}
    8370:	b083      	sub	sp, #12
    8372:	af00      	add	r7, sp, #0
    8374:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    8376:	687b      	ldr	r3, [r7, #4]
    8378:	691b      	ldr	r3, [r3, #16]
    837a:	085b      	lsrs	r3, r3, #1
    837c:	f003 0301 	and.w	r3, r3, #1
    8380:	2b00      	cmp	r3, #0
    8382:	bf14      	ite	ne
    8384:	2301      	movne	r3, #1
    8386:	2300      	moveq	r3, #0
    8388:	b2db      	uxtb	r3, r3
}
    838a:	4618      	mov	r0, r3
    838c:	370c      	adds	r7, #12
    838e:	46bd      	mov	sp, r7
    8390:	f85d 7b04 	ldr.w	r7, [sp], #4
    8394:	4770      	bx	lr

00008396 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    8396:	b480      	push	{r7}
    8398:	b083      	sub	sp, #12
    839a:	af00      	add	r7, sp, #0
    839c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    839e:	687b      	ldr	r3, [r7, #4]
    83a0:	691b      	ldr	r3, [r3, #16]
    83a2:	0a1b      	lsrs	r3, r3, #8
    83a4:	f003 0301 	and.w	r3, r3, #1
    83a8:	2b00      	cmp	r3, #0
    83aa:	bf14      	ite	ne
    83ac:	2301      	movne	r3, #1
    83ae:	2300      	moveq	r3, #0
    83b0:	b2db      	uxtb	r3, r3
}
    83b2:	4618      	mov	r0, r3
    83b4:	370c      	adds	r7, #12
    83b6:	46bd      	mov	sp, r7
    83b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83bc:	4770      	bx	lr

000083be <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    83be:	b480      	push	{r7}
    83c0:	b085      	sub	sp, #20
    83c2:	af00      	add	r7, sp, #0
    83c4:	6078      	str	r0, [r7, #4]
    83c6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    83c8:	687b      	ldr	r3, [r7, #4]
    83ca:	691b      	ldr	r3, [r3, #16]
    83cc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    83ce:	68fa      	ldr	r2, [r7, #12]
    83d0:	683b      	ldr	r3, [r7, #0]
    83d2:	4013      	ands	r3, r2
    83d4:	60fb      	str	r3, [r7, #12]
	return tmp;
    83d6:	68fb      	ldr	r3, [r7, #12]
}
    83d8:	4618      	mov	r0, r3
    83da:	3714      	adds	r7, #20
    83dc:	46bd      	mov	sp, r7
    83de:	f85d 7b04 	ldr.w	r7, [sp], #4
    83e2:	4770      	bx	lr

000083e4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    83e4:	b480      	push	{r7}
    83e6:	b085      	sub	sp, #20
    83e8:	af00      	add	r7, sp, #0
    83ea:	60f8      	str	r0, [r7, #12]
    83ec:	460b      	mov	r3, r1
    83ee:	607a      	str	r2, [r7, #4]
    83f0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    83f2:	7afb      	ldrb	r3, [r7, #11]
    83f4:	68fa      	ldr	r2, [r7, #12]
    83f6:	3304      	adds	r3, #4
    83f8:	009b      	lsls	r3, r3, #2
    83fa:	4413      	add	r3, r2
    83fc:	687a      	ldr	r2, [r7, #4]
    83fe:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    8400:	bf00      	nop
    8402:	3714      	adds	r7, #20
    8404:	46bd      	mov	sp, r7
    8406:	f85d 7b04 	ldr.w	r7, [sp], #4
    840a:	4770      	bx	lr

0000840c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    840c:	b480      	push	{r7}
    840e:	b083      	sub	sp, #12
    8410:	af00      	add	r7, sp, #0
    8412:	6078      	str	r0, [r7, #4]
    8414:	460b      	mov	r3, r1
    8416:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	78fa      	ldrb	r2, [r7, #3]
    841c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    841e:	bf00      	nop
    8420:	370c      	adds	r7, #12
    8422:	46bd      	mov	sp, r7
    8424:	f85d 7b04 	ldr.w	r7, [sp], #4
    8428:	4770      	bx	lr

0000842a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    842a:	b480      	push	{r7}
    842c:	b085      	sub	sp, #20
    842e:	af00      	add	r7, sp, #0
    8430:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8432:	687b      	ldr	r3, [r7, #4]
    8434:	f893 3020 	ldrb.w	r3, [r3, #32]
    8438:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    843a:	7bfb      	ldrb	r3, [r7, #15]
    843c:	f003 0301 	and.w	r3, r3, #1
    8440:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8442:	7bfb      	ldrb	r3, [r7, #15]
    8444:	2b00      	cmp	r3, #0
    8446:	bf14      	ite	ne
    8448:	2301      	movne	r3, #1
    844a:	2300      	moveq	r3, #0
    844c:	b2db      	uxtb	r3, r3
}
    844e:	4618      	mov	r0, r3
    8450:	3714      	adds	r7, #20
    8452:	46bd      	mov	sp, r7
    8454:	f85d 7b04 	ldr.w	r7, [sp], #4
    8458:	4770      	bx	lr

0000845a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    845a:	b480      	push	{r7}
    845c:	b083      	sub	sp, #12
    845e:	af00      	add	r7, sp, #0
    8460:	6078      	str	r0, [r7, #4]
    8462:	460b      	mov	r3, r1
    8464:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    8466:	687b      	ldr	r3, [r7, #4]
    8468:	78fa      	ldrb	r2, [r7, #3]
    846a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    846e:	bf00      	nop
    8470:	370c      	adds	r7, #12
    8472:	46bd      	mov	sp, r7
    8474:	f85d 7b04 	ldr.w	r7, [sp], #4
    8478:	4770      	bx	lr

0000847a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    847a:	b480      	push	{r7}
    847c:	b083      	sub	sp, #12
    847e:	af00      	add	r7, sp, #0
    8480:	6078      	str	r0, [r7, #4]
    8482:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    8484:	687b      	ldr	r3, [r7, #4]
    8486:	683a      	ldr	r2, [r7, #0]
    8488:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    848a:	bf00      	nop
    848c:	370c      	adds	r7, #12
    848e:	46bd      	mov	sp, r7
    8490:	f85d 7b04 	ldr.w	r7, [sp], #4
    8494:	4770      	bx	lr

00008496 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    8496:	b480      	push	{r7}
    8498:	b083      	sub	sp, #12
    849a:	af00      	add	r7, sp, #0
    849c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    84a2:	4618      	mov	r0, r3
    84a4:	370c      	adds	r7, #12
    84a6:	46bd      	mov	sp, r7
    84a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ac:	4770      	bx	lr

000084ae <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    84ae:	b480      	push	{r7}
    84b0:	b083      	sub	sp, #12
    84b2:	af00      	add	r7, sp, #0
    84b4:	6078      	str	r0, [r7, #4]
    84b6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    84b8:	687b      	ldr	r3, [r7, #4]
    84ba:	683a      	ldr	r2, [r7, #0]
    84bc:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    84be:	bf00      	nop
    84c0:	370c      	adds	r7, #12
    84c2:	46bd      	mov	sp, r7
    84c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c8:	4770      	bx	lr

000084ca <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    84ca:	b480      	push	{r7}
    84cc:	b085      	sub	sp, #20
    84ce:	af00      	add	r7, sp, #0
    84d0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    84d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    84da:	7bfb      	ldrb	r3, [r7, #15]
    84dc:	085b      	lsrs	r3, r3, #1
    84de:	b2db      	uxtb	r3, r3
    84e0:	f003 0301 	and.w	r3, r3, #1
    84e4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    84e6:	7bfb      	ldrb	r3, [r7, #15]
    84e8:	2b00      	cmp	r3, #0
    84ea:	bf14      	ite	ne
    84ec:	2301      	movne	r3, #1
    84ee:	2300      	moveq	r3, #0
    84f0:	b2db      	uxtb	r3, r3
}
    84f2:	4618      	mov	r0, r3
    84f4:	3714      	adds	r7, #20
    84f6:	46bd      	mov	sp, r7
    84f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84fc:	4770      	bx	lr

000084fe <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    84fe:	b480      	push	{r7}
    8500:	b085      	sub	sp, #20
    8502:	af00      	add	r7, sp, #0
    8504:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    8506:	687b      	ldr	r3, [r7, #4]
    8508:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    850c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    850e:	7bfb      	ldrb	r3, [r7, #15]
    8510:	089b      	lsrs	r3, r3, #2
    8512:	b2db      	uxtb	r3, r3
    8514:	f003 0301 	and.w	r3, r3, #1
    8518:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    851a:	7bfb      	ldrb	r3, [r7, #15]
    851c:	2b00      	cmp	r3, #0
    851e:	bf14      	ite	ne
    8520:	2301      	movne	r3, #1
    8522:	2300      	moveq	r3, #0
    8524:	b2db      	uxtb	r3, r3
}
    8526:	4618      	mov	r0, r3
    8528:	3714      	adds	r7, #20
    852a:	46bd      	mov	sp, r7
    852c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8530:	4770      	bx	lr

00008532 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    8532:	b480      	push	{r7}
    8534:	b085      	sub	sp, #20
    8536:	af00      	add	r7, sp, #0
    8538:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    8540:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    8542:	7bfb      	ldrb	r3, [r7, #15]
    8544:	08db      	lsrs	r3, r3, #3
    8546:	b2db      	uxtb	r3, r3
    8548:	f003 0301 	and.w	r3, r3, #1
    854c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    854e:	7bfb      	ldrb	r3, [r7, #15]
    8550:	2b00      	cmp	r3, #0
    8552:	bf14      	ite	ne
    8554:	2301      	movne	r3, #1
    8556:	2300      	moveq	r3, #0
    8558:	b2db      	uxtb	r3, r3
}
    855a:	4618      	mov	r0, r3
    855c:	3714      	adds	r7, #20
    855e:	46bd      	mov	sp, r7
    8560:	f85d 7b04 	ldr.w	r7, [sp], #4
    8564:	4770      	bx	lr

00008566 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    8566:	b480      	push	{r7}
    8568:	b085      	sub	sp, #20
    856a:	af00      	add	r7, sp, #0
    856c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    856e:	687b      	ldr	r3, [r7, #4]
    8570:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    8574:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    8576:	7bfb      	ldrb	r3, [r7, #15]
    8578:	091b      	lsrs	r3, r3, #4
    857a:	b2db      	uxtb	r3, r3
    857c:	f003 0301 	and.w	r3, r3, #1
    8580:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8582:	7bfb      	ldrb	r3, [r7, #15]
    8584:	2b00      	cmp	r3, #0
    8586:	bf14      	ite	ne
    8588:	2301      	movne	r3, #1
    858a:	2300      	moveq	r3, #0
    858c:	b2db      	uxtb	r3, r3
}
    858e:	4618      	mov	r0, r3
    8590:	3714      	adds	r7, #20
    8592:	46bd      	mov	sp, r7
    8594:	f85d 7b04 	ldr.w	r7, [sp], #4
    8598:	4770      	bx	lr
	...

0000859c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    859c:	b580      	push	{r7, lr}
    859e:	b082      	sub	sp, #8
    85a0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    85a2:	4b0a      	ldr	r3, [pc, #40]	; (85cc <_oscctrl_init_sources+0x30>)
    85a4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    85a6:	4a0a      	ldr	r2, [pc, #40]	; (85d0 <_oscctrl_init_sources+0x34>)
    85a8:	2101      	movs	r1, #1
    85aa:	6878      	ldr	r0, [r7, #4]
    85ac:	4b09      	ldr	r3, [pc, #36]	; (85d4 <_oscctrl_init_sources+0x38>)
    85ae:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    85b0:	bf00      	nop
    85b2:	6878      	ldr	r0, [r7, #4]
    85b4:	4b08      	ldr	r3, [pc, #32]	; (85d8 <_oscctrl_init_sources+0x3c>)
    85b6:	4798      	blx	r3
    85b8:	4603      	mov	r3, r0
    85ba:	f083 0301 	eor.w	r3, r3, #1
    85be:	b2db      	uxtb	r3, r3
    85c0:	2b00      	cmp	r3, #0
    85c2:	d1f6      	bne.n	85b2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    85c4:	bf00      	nop
    85c6:	3708      	adds	r7, #8
    85c8:	46bd      	mov	sp, r7
    85ca:	bd80      	pop	{r7, pc}
    85cc:	40001000 	.word	0x40001000
    85d0:	03002646 	.word	0x03002646
    85d4:	000083e5 	.word	0x000083e5
    85d8:	0000836f 	.word	0x0000836f

000085dc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    85dc:	b580      	push	{r7, lr}
    85de:	b084      	sub	sp, #16
    85e0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    85e2:	4b6b      	ldr	r3, [pc, #428]	; (8790 <_oscctrl_init_referenced_generators+0x1b4>)
    85e4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    85e6:	2204      	movs	r2, #4
    85e8:	2100      	movs	r1, #0
    85ea:	486a      	ldr	r0, [pc, #424]	; (8794 <_oscctrl_init_referenced_generators+0x1b8>)
    85ec:	4b6a      	ldr	r3, [pc, #424]	; (8798 <_oscctrl_init_referenced_generators+0x1bc>)
    85ee:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    85f0:	bf00      	nop
    85f2:	4868      	ldr	r0, [pc, #416]	; (8794 <_oscctrl_init_referenced_generators+0x1b8>)
    85f4:	4b69      	ldr	r3, [pc, #420]	; (879c <_oscctrl_init_referenced_generators+0x1c0>)
    85f6:	4798      	blx	r3
    85f8:	4603      	mov	r3, r0
    85fa:	2b00      	cmp	r3, #0
    85fc:	d1f9      	bne.n	85f2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    85fe:	2100      	movs	r1, #0
    8600:	68f8      	ldr	r0, [r7, #12]
    8602:	4b67      	ldr	r3, [pc, #412]	; (87a0 <_oscctrl_init_referenced_generators+0x1c4>)
    8604:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    8606:	4967      	ldr	r1, [pc, #412]	; (87a4 <_oscctrl_init_referenced_generators+0x1c8>)
    8608:	68f8      	ldr	r0, [r7, #12]
    860a:	4b67      	ldr	r3, [pc, #412]	; (87a8 <_oscctrl_init_referenced_generators+0x1cc>)
    860c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    860e:	bf00      	nop
    8610:	68f8      	ldr	r0, [r7, #12]
    8612:	4b66      	ldr	r3, [pc, #408]	; (87ac <_oscctrl_init_referenced_generators+0x1d0>)
    8614:	4798      	blx	r3
    8616:	4603      	mov	r3, r0
    8618:	2b00      	cmp	r3, #0
    861a:	d1f9      	bne.n	8610 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    861c:	2100      	movs	r1, #0
    861e:	68f8      	ldr	r0, [r7, #12]
    8620:	4b63      	ldr	r3, [pc, #396]	; (87b0 <_oscctrl_init_referenced_generators+0x1d4>)
    8622:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    8624:	bf00      	nop
    8626:	68f8      	ldr	r0, [r7, #12]
    8628:	4b62      	ldr	r3, [pc, #392]	; (87b4 <_oscctrl_init_referenced_generators+0x1d8>)
    862a:	4798      	blx	r3
    862c:	4603      	mov	r3, r0
    862e:	2b00      	cmp	r3, #0
    8630:	d1f9      	bne.n	8626 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    8632:	2302      	movs	r3, #2
    8634:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    8636:	7afb      	ldrb	r3, [r7, #11]
    8638:	4619      	mov	r1, r3
    863a:	68f8      	ldr	r0, [r7, #12]
    863c:	4b58      	ldr	r3, [pc, #352]	; (87a0 <_oscctrl_init_referenced_generators+0x1c4>)
    863e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    8640:	bf00      	nop
    8642:	68f8      	ldr	r0, [r7, #12]
    8644:	4b5c      	ldr	r3, [pc, #368]	; (87b8 <_oscctrl_init_referenced_generators+0x1dc>)
    8646:	4798      	blx	r3
    8648:	4603      	mov	r3, r0
    864a:	2b00      	cmp	r3, #0
    864c:	d1f9      	bne.n	8642 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    864e:	68f8      	ldr	r0, [r7, #12]
    8650:	4b5a      	ldr	r3, [pc, #360]	; (87bc <_oscctrl_init_referenced_generators+0x1e0>)
    8652:	4798      	blx	r3
    8654:	4603      	mov	r3, r0
    8656:	4619      	mov	r1, r3
    8658:	68f8      	ldr	r0, [r7, #12]
    865a:	4b59      	ldr	r3, [pc, #356]	; (87c0 <_oscctrl_init_referenced_generators+0x1e4>)
    865c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    865e:	bf00      	nop
    8660:	68f8      	ldr	r0, [r7, #12]
    8662:	4b58      	ldr	r3, [pc, #352]	; (87c4 <_oscctrl_init_referenced_generators+0x1e8>)
    8664:	4798      	blx	r3
    8666:	4603      	mov	r3, r0
    8668:	2b00      	cmp	r3, #0
    866a:	d1f9      	bne.n	8660 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    866c:	2319      	movs	r3, #25
    866e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    8670:	7afb      	ldrb	r3, [r7, #11]
    8672:	4619      	mov	r1, r3
    8674:	68f8      	ldr	r0, [r7, #12]
    8676:	4b4e      	ldr	r3, [pc, #312]	; (87b0 <_oscctrl_init_referenced_generators+0x1d4>)
    8678:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    867a:	bf00      	nop
    867c:	68f8      	ldr	r0, [r7, #12]
    867e:	4b4d      	ldr	r3, [pc, #308]	; (87b4 <_oscctrl_init_referenced_generators+0x1d8>)
    8680:	4798      	blx	r3
    8682:	4603      	mov	r3, r0
    8684:	2b00      	cmp	r3, #0
    8686:	d1f9      	bne.n	867c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    8688:	2245      	movs	r2, #69	; 0x45
    868a:	2101      	movs	r1, #1
    868c:	4841      	ldr	r0, [pc, #260]	; (8794 <_oscctrl_init_referenced_generators+0x1b8>)
    868e:	4b4e      	ldr	r3, [pc, #312]	; (87c8 <_oscctrl_init_referenced_generators+0x1ec>)
    8690:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    8692:	223b      	movs	r2, #59	; 0x3b
    8694:	2100      	movs	r1, #0
    8696:	68f8      	ldr	r0, [r7, #12]
    8698:	4b4c      	ldr	r3, [pc, #304]	; (87cc <_oscctrl_init_referenced_generators+0x1f0>)
    869a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    869c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    86a0:	2100      	movs	r1, #0
    86a2:	68f8      	ldr	r0, [r7, #12]
    86a4:	4b4a      	ldr	r3, [pc, #296]	; (87d0 <_oscctrl_init_referenced_generators+0x1f4>)
    86a6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    86a8:	2242      	movs	r2, #66	; 0x42
    86aa:	2100      	movs	r1, #0
    86ac:	68f8      	ldr	r0, [r7, #12]
    86ae:	4b49      	ldr	r3, [pc, #292]	; (87d4 <_oscctrl_init_referenced_generators+0x1f8>)
    86b0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    86b2:	4a49      	ldr	r2, [pc, #292]	; (87d8 <_oscctrl_init_referenced_generators+0x1fc>)
    86b4:	2101      	movs	r1, #1
    86b6:	68f8      	ldr	r0, [r7, #12]
    86b8:	4b44      	ldr	r3, [pc, #272]	; (87cc <_oscctrl_init_referenced_generators+0x1f0>)
    86ba:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    86bc:	f44f 6203 	mov.w	r2, #2096	; 0x830
    86c0:	2101      	movs	r1, #1
    86c2:	68f8      	ldr	r0, [r7, #12]
    86c4:	4b42      	ldr	r3, [pc, #264]	; (87d0 <_oscctrl_init_referenced_generators+0x1f4>)
    86c6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    86c8:	2202      	movs	r2, #2
    86ca:	2101      	movs	r1, #1
    86cc:	68f8      	ldr	r0, [r7, #12]
    86ce:	4b41      	ldr	r3, [pc, #260]	; (87d4 <_oscctrl_init_referenced_generators+0x1f8>)
    86d0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    86d2:	68f8      	ldr	r0, [r7, #12]
    86d4:	4b41      	ldr	r3, [pc, #260]	; (87dc <_oscctrl_init_referenced_generators+0x200>)
    86d6:	4798      	blx	r3
    86d8:	4603      	mov	r3, r0
    86da:	2b00      	cmp	r3, #0
    86dc:	d00c      	beq.n	86f8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    86de:	f44f 6310 	mov.w	r3, #2304	; 0x900
    86e2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    86e4:	bf00      	nop
    86e6:	6879      	ldr	r1, [r7, #4]
    86e8:	68f8      	ldr	r0, [r7, #12]
    86ea:	4b3d      	ldr	r3, [pc, #244]	; (87e0 <_oscctrl_init_referenced_generators+0x204>)
    86ec:	4798      	blx	r3
    86ee:	4602      	mov	r2, r0
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	429a      	cmp	r2, r3
    86f4:	d1f7      	bne.n	86e6 <_oscctrl_init_referenced_generators+0x10a>
    86f6:	e009      	b.n	870c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    86f8:	bf00      	nop
    86fa:	68f8      	ldr	r0, [r7, #12]
    86fc:	4b39      	ldr	r3, [pc, #228]	; (87e4 <_oscctrl_init_referenced_generators+0x208>)
    86fe:	4798      	blx	r3
    8700:	4603      	mov	r3, r0
    8702:	f083 0301 	eor.w	r3, r3, #1
    8706:	b2db      	uxtb	r3, r3
    8708:	2b00      	cmp	r3, #0
    870a:	d1f6      	bne.n	86fa <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    870c:	bf00      	nop
    870e:	2100      	movs	r1, #0
    8710:	68f8      	ldr	r0, [r7, #12]
    8712:	4b35      	ldr	r3, [pc, #212]	; (87e8 <_oscctrl_init_referenced_generators+0x20c>)
    8714:	4798      	blx	r3
    8716:	4603      	mov	r3, r0
    8718:	f083 0301 	eor.w	r3, r3, #1
    871c:	b2db      	uxtb	r3, r3
    871e:	2b00      	cmp	r3, #0
    8720:	d009      	beq.n	8736 <_oscctrl_init_referenced_generators+0x15a>
    8722:	2100      	movs	r1, #0
    8724:	68f8      	ldr	r0, [r7, #12]
    8726:	4b31      	ldr	r3, [pc, #196]	; (87ec <_oscctrl_init_referenced_generators+0x210>)
    8728:	4798      	blx	r3
    872a:	4603      	mov	r3, r0
    872c:	f083 0301 	eor.w	r3, r3, #1
    8730:	b2db      	uxtb	r3, r3
    8732:	2b00      	cmp	r3, #0
    8734:	d1eb      	bne.n	870e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    8736:	bf00      	nop
    8738:	2101      	movs	r1, #1
    873a:	68f8      	ldr	r0, [r7, #12]
    873c:	4b2a      	ldr	r3, [pc, #168]	; (87e8 <_oscctrl_init_referenced_generators+0x20c>)
    873e:	4798      	blx	r3
    8740:	4603      	mov	r3, r0
    8742:	f083 0301 	eor.w	r3, r3, #1
    8746:	b2db      	uxtb	r3, r3
    8748:	2b00      	cmp	r3, #0
    874a:	d009      	beq.n	8760 <_oscctrl_init_referenced_generators+0x184>
    874c:	2101      	movs	r1, #1
    874e:	68f8      	ldr	r0, [r7, #12]
    8750:	4b26      	ldr	r3, [pc, #152]	; (87ec <_oscctrl_init_referenced_generators+0x210>)
    8752:	4798      	blx	r3
    8754:	4603      	mov	r3, r0
    8756:	f083 0301 	eor.w	r3, r3, #1
    875a:	b2db      	uxtb	r3, r3
    875c:	2b00      	cmp	r3, #0
    875e:	d1eb      	bne.n	8738 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    8760:	bf00      	nop
    8762:	480c      	ldr	r0, [pc, #48]	; (8794 <_oscctrl_init_referenced_generators+0x1b8>)
    8764:	4b22      	ldr	r3, [pc, #136]	; (87f0 <_oscctrl_init_referenced_generators+0x214>)
    8766:	4798      	blx	r3
    8768:	4603      	mov	r3, r0
    876a:	2b00      	cmp	r3, #0
    876c:	d1f9      	bne.n	8762 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    876e:	2207      	movs	r2, #7
    8770:	2100      	movs	r1, #0
    8772:	4808      	ldr	r0, [pc, #32]	; (8794 <_oscctrl_init_referenced_generators+0x1b8>)
    8774:	4b08      	ldr	r3, [pc, #32]	; (8798 <_oscctrl_init_referenced_generators+0x1bc>)
    8776:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    8778:	bf00      	nop
    877a:	4806      	ldr	r0, [pc, #24]	; (8794 <_oscctrl_init_referenced_generators+0x1b8>)
    877c:	4b07      	ldr	r3, [pc, #28]	; (879c <_oscctrl_init_referenced_generators+0x1c0>)
    877e:	4798      	blx	r3
    8780:	4603      	mov	r3, r0
    8782:	2b00      	cmp	r3, #0
    8784:	d1f9      	bne.n	877a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    8786:	bf00      	nop
    8788:	3710      	adds	r7, #16
    878a:	46bd      	mov	sp, r7
    878c:	bd80      	pop	{r7, pc}
    878e:	bf00      	nop
    8790:	40001000 	.word	0x40001000
    8794:	40001c00 	.word	0x40001c00
    8798:	000081a9 	.word	0x000081a9
    879c:	00008169 	.word	0x00008169
    87a0:	0000840d 	.word	0x0000840d
    87a4:	0401bb80 	.word	0x0401bb80
    87a8:	000084af 	.word	0x000084af
    87ac:	00008567 	.word	0x00008567
    87b0:	0000845b 	.word	0x0000845b
    87b4:	000084ff 	.word	0x000084ff
    87b8:	000084cb 	.word	0x000084cb
    87bc:	00008497 	.word	0x00008497
    87c0:	0000847b 	.word	0x0000847b
    87c4:	00008533 	.word	0x00008533
    87c8:	000081f9 	.word	0x000081f9
    87cc:	00008305 	.word	0x00008305
    87d0:	00008341 	.word	0x00008341
    87d4:	000082c9 	.word	0x000082c9
    87d8:	000407a0 	.word	0x000407a0
    87dc:	0000842b 	.word	0x0000842b
    87e0:	000083bf 	.word	0x000083bf
    87e4:	00008397 	.word	0x00008397
    87e8:	00008255 	.word	0x00008255
    87ec:	0000828d 	.word	0x0000828d
    87f0:	00008191 	.word	0x00008191

000087f4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    87f4:	b480      	push	{r7}
    87f6:	b083      	sub	sp, #12
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    87fc:	687b      	ldr	r3, [r7, #4]
    87fe:	69db      	ldr	r3, [r3, #28]
    8800:	0a9b      	lsrs	r3, r3, #10
    8802:	f003 0301 	and.w	r3, r3, #1
    8806:	2b00      	cmp	r3, #0
    8808:	bf14      	ite	ne
    880a:	2301      	movne	r3, #1
    880c:	2300      	moveq	r3, #0
    880e:	b2db      	uxtb	r3, r3
}
    8810:	4618      	mov	r0, r3
    8812:	370c      	adds	r7, #12
    8814:	46bd      	mov	sp, r7
    8816:	f85d 7b04 	ldr.w	r7, [sp], #4
    881a:	4770      	bx	lr

0000881c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    881c:	b480      	push	{r7}
    881e:	b083      	sub	sp, #12
    8820:	af00      	add	r7, sp, #0
    8822:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    8824:	687b      	ldr	r3, [r7, #4]
    8826:	f44f 6280 	mov.w	r2, #1024	; 0x400
    882a:	61da      	str	r2, [r3, #28]
}
    882c:	bf00      	nop
    882e:	370c      	adds	r7, #12
    8830:	46bd      	mov	sp, r7
    8832:	f85d 7b04 	ldr.w	r7, [sp], #4
    8836:	4770      	bx	lr

00008838 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    8838:	b480      	push	{r7}
    883a:	b083      	sub	sp, #12
    883c:	af00      	add	r7, sp, #0
    883e:	6078      	str	r0, [r7, #4]
    8840:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    8842:	687b      	ldr	r3, [r7, #4]
    8844:	683a      	ldr	r2, [r7, #0]
    8846:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8848:	bf00      	nop
    884a:	370c      	adds	r7, #12
    884c:	46bd      	mov	sp, r7
    884e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8852:	4770      	bx	lr

00008854 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    8854:	b480      	push	{r7}
    8856:	b083      	sub	sp, #12
    8858:	af00      	add	r7, sp, #0
    885a:	6078      	str	r0, [r7, #4]
    885c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	683a      	ldr	r2, [r7, #0]
    8862:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8864:	bf00      	nop
    8866:	370c      	adds	r7, #12
    8868:	46bd      	mov	sp, r7
    886a:	f85d 7b04 	ldr.w	r7, [sp], #4
    886e:	4770      	bx	lr

00008870 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    8870:	b480      	push	{r7}
    8872:	b083      	sub	sp, #12
    8874:	af00      	add	r7, sp, #0
    8876:	6078      	str	r0, [r7, #4]
    8878:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    887a:	687b      	ldr	r3, [r7, #4]
    887c:	683a      	ldr	r2, [r7, #0]
    887e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8880:	bf00      	nop
    8882:	370c      	adds	r7, #12
    8884:	46bd      	mov	sp, r7
    8886:	f85d 7b04 	ldr.w	r7, [sp], #4
    888a:	4770      	bx	lr

0000888c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    888c:	b480      	push	{r7}
    888e:	b083      	sub	sp, #12
    8890:	af00      	add	r7, sp, #0
    8892:	6078      	str	r0, [r7, #4]
    8894:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    8896:	687b      	ldr	r3, [r7, #4]
    8898:	683a      	ldr	r2, [r7, #0]
    889a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    889c:	bf00      	nop
    889e:	370c      	adds	r7, #12
    88a0:	46bd      	mov	sp, r7
    88a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88a6:	4770      	bx	lr

000088a8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    88a8:	b480      	push	{r7}
    88aa:	b085      	sub	sp, #20
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
    88b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    88b2:	687b      	ldr	r3, [r7, #4]
    88b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    88b6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    88b8:	68fb      	ldr	r3, [r7, #12]
    88ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    88be:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    88c0:	683b      	ldr	r3, [r7, #0]
    88c2:	b2db      	uxtb	r3, r3
    88c4:	68fa      	ldr	r2, [r7, #12]
    88c6:	4313      	orrs	r3, r2
    88c8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	68fa      	ldr	r2, [r7, #12]
    88ce:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    88d0:	bf00      	nop
    88d2:	3714      	adds	r7, #20
    88d4:	46bd      	mov	sp, r7
    88d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88da:	4770      	bx	lr

000088dc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    88dc:	b480      	push	{r7}
    88de:	b085      	sub	sp, #20
    88e0:	af00      	add	r7, sp, #0
    88e2:	6078      	str	r0, [r7, #4]
    88e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    88e6:	687b      	ldr	r3, [r7, #4]
    88e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    88ea:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    88ec:	68fb      	ldr	r3, [r7, #12]
    88ee:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    88f2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    88f4:	683b      	ldr	r3, [r7, #0]
    88f6:	041b      	lsls	r3, r3, #16
    88f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    88fc:	68fa      	ldr	r2, [r7, #12]
    88fe:	4313      	orrs	r3, r2
    8900:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    8902:	687b      	ldr	r3, [r7, #4]
    8904:	68fa      	ldr	r2, [r7, #12]
    8906:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8908:	bf00      	nop
    890a:	3714      	adds	r7, #20
    890c:	46bd      	mov	sp, r7
    890e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8912:	4770      	bx	lr

00008914 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    8914:	b480      	push	{r7}
    8916:	b083      	sub	sp, #12
    8918:	af00      	add	r7, sp, #0
    891a:	6078      	str	r0, [r7, #4]
    891c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    891e:	687b      	ldr	r3, [r7, #4]
    8920:	683a      	ldr	r2, [r7, #0]
    8922:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    8924:	bf00      	nop
    8926:	370c      	adds	r7, #12
    8928:	46bd      	mov	sp, r7
    892a:	f85d 7b04 	ldr.w	r7, [sp], #4
    892e:	4770      	bx	lr

00008930 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    8930:	b480      	push	{r7}
    8932:	b083      	sub	sp, #12
    8934:	af00      	add	r7, sp, #0
    8936:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    8938:	687b      	ldr	r3, [r7, #4]
    893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    893c:	4618      	mov	r0, r3
    893e:	370c      	adds	r7, #12
    8940:	46bd      	mov	sp, r7
    8942:	f85d 7b04 	ldr.w	r7, [sp], #4
    8946:	4770      	bx	lr

00008948 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    8948:	b480      	push	{r7}
    894a:	b085      	sub	sp, #20
    894c:	af00      	add	r7, sp, #0
    894e:	60f8      	str	r0, [r7, #12]
    8950:	60b9      	str	r1, [r7, #8]
    8952:	607a      	str	r2, [r7, #4]
	while (count--) {
    8954:	e007      	b.n	8966 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    8956:	68fb      	ldr	r3, [r7, #12]
    8958:	1c5a      	adds	r2, r3, #1
    895a:	60fa      	str	r2, [r7, #12]
    895c:	68ba      	ldr	r2, [r7, #8]
    895e:	1c51      	adds	r1, r2, #1
    8960:	60b9      	str	r1, [r7, #8]
    8962:	7812      	ldrb	r2, [r2, #0]
    8964:	701a      	strb	r2, [r3, #0]
	while (count--) {
    8966:	687b      	ldr	r3, [r7, #4]
    8968:	1e5a      	subs	r2, r3, #1
    896a:	607a      	str	r2, [r7, #4]
    896c:	2b00      	cmp	r3, #0
    896e:	d1f2      	bne.n	8956 <_qspi_memcpy+0xe>
	}
}
    8970:	bf00      	nop
    8972:	3714      	adds	r7, #20
    8974:	46bd      	mov	sp, r7
    8976:	f85d 7b04 	ldr.w	r7, [sp], #4
    897a:	4770      	bx	lr

0000897c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    897c:	b580      	push	{r7, lr}
    897e:	b082      	sub	sp, #8
    8980:	af00      	add	r7, sp, #0
    8982:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    8984:	4903      	ldr	r1, [pc, #12]	; (8994 <_qspi_end_transfer+0x18>)
    8986:	6878      	ldr	r0, [r7, #4]
    8988:	4b03      	ldr	r3, [pc, #12]	; (8998 <_qspi_end_transfer+0x1c>)
    898a:	4798      	blx	r3
}
    898c:	bf00      	nop
    898e:	3708      	adds	r7, #8
    8990:	46bd      	mov	sp, r7
    8992:	bd80      	pop	{r7, pc}
    8994:	01000002 	.word	0x01000002
    8998:	00008839 	.word	0x00008839

0000899c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    899c:	b580      	push	{r7, lr}
    899e:	b082      	sub	sp, #8
    89a0:	af00      	add	r7, sp, #0
    89a2:	6078      	str	r0, [r7, #4]
    89a4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    89a6:	687b      	ldr	r3, [r7, #4]
    89a8:	2b00      	cmp	r3, #0
    89aa:	d004      	beq.n	89b6 <_qspi_sync_init+0x1a>
    89ac:	683b      	ldr	r3, [r7, #0]
    89ae:	2b00      	cmp	r3, #0
    89b0:	d001      	beq.n	89b6 <_qspi_sync_init+0x1a>
    89b2:	2301      	movs	r3, #1
    89b4:	e000      	b.n	89b8 <_qspi_sync_init+0x1c>
    89b6:	2300      	movs	r3, #0
    89b8:	f003 0301 	and.w	r3, r3, #1
    89bc:	b2db      	uxtb	r3, r3
    89be:	2240      	movs	r2, #64	; 0x40
    89c0:	490c      	ldr	r1, [pc, #48]	; (89f4 <_qspi_sync_init+0x58>)
    89c2:	4618      	mov	r0, r3
    89c4:	4b0c      	ldr	r3, [pc, #48]	; (89f8 <_qspi_sync_init+0x5c>)
    89c6:	4798      	blx	r3
	dev->prvt = hw;
    89c8:	687b      	ldr	r3, [r7, #4]
    89ca:	683a      	ldr	r2, [r7, #0]
    89cc:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	681b      	ldr	r3, [r3, #0]
    89d2:	2101      	movs	r1, #1
    89d4:	4618      	mov	r0, r3
    89d6:	4b09      	ldr	r3, [pc, #36]	; (89fc <_qspi_sync_init+0x60>)
    89d8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    89da:	4909      	ldr	r1, [pc, #36]	; (8a00 <_qspi_sync_init+0x64>)
    89dc:	6838      	ldr	r0, [r7, #0]
    89de:	4b09      	ldr	r3, [pc, #36]	; (8a04 <_qspi_sync_init+0x68>)
    89e0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    89e2:	4909      	ldr	r1, [pc, #36]	; (8a08 <_qspi_sync_init+0x6c>)
    89e4:	6838      	ldr	r0, [r7, #0]
    89e6:	4b09      	ldr	r3, [pc, #36]	; (8a0c <_qspi_sync_init+0x70>)
    89e8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    89ea:	2300      	movs	r3, #0
}
    89ec:	4618      	mov	r0, r3
    89ee:	3708      	adds	r7, #8
    89f0:	46bd      	mov	sp, r7
    89f2:	bd80      	pop	{r7, pc}
    89f4:	00013ccc 	.word	0x00013ccc
    89f8:	00006a41 	.word	0x00006a41
    89fc:	00008839 	.word	0x00008839
    8a00:	06000011 	.word	0x06000011
    8a04:	00008855 	.word	0x00008855
    8a08:	00241300 	.word	0x00241300
    8a0c:	00008871 	.word	0x00008871

00008a10 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    8a10:	b580      	push	{r7, lr}
    8a12:	b082      	sub	sp, #8
    8a14:	af00      	add	r7, sp, #0
    8a16:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    8a18:	687b      	ldr	r3, [r7, #4]
    8a1a:	681b      	ldr	r3, [r3, #0]
    8a1c:	2102      	movs	r1, #2
    8a1e:	4618      	mov	r0, r3
    8a20:	4b03      	ldr	r3, [pc, #12]	; (8a30 <_qspi_sync_enable+0x20>)
    8a22:	4798      	blx	r3
	return ERR_NONE;
    8a24:	2300      	movs	r3, #0
}
    8a26:	4618      	mov	r0, r3
    8a28:	3708      	adds	r7, #8
    8a2a:	46bd      	mov	sp, r7
    8a2c:	bd80      	pop	{r7, pc}
    8a2e:	bf00      	nop
    8a30:	00008839 	.word	0x00008839

00008a34 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    8a34:	b580      	push	{r7, lr}
    8a36:	b082      	sub	sp, #8
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	681b      	ldr	r3, [r3, #0]
    8a40:	2100      	movs	r1, #0
    8a42:	4618      	mov	r0, r3
    8a44:	4b03      	ldr	r3, [pc, #12]	; (8a54 <_qspi_sync_disable+0x20>)
    8a46:	4798      	blx	r3
	return ERR_NONE;
    8a48:	2300      	movs	r3, #0
}
    8a4a:	4618      	mov	r0, r3
    8a4c:	3708      	adds	r7, #8
    8a4e:	46bd      	mov	sp, r7
    8a50:	bd80      	pop	{r7, pc}
    8a52:	bf00      	nop
    8a54:	00008839 	.word	0x00008839

00008a58 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8a58:	b580      	push	{r7, lr}
    8a5a:	b084      	sub	sp, #16
    8a5c:	af00      	add	r7, sp, #0
    8a5e:	6078      	str	r0, [r7, #4]
    8a60:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    8a62:	687b      	ldr	r3, [r7, #4]
    8a64:	681b      	ldr	r3, [r3, #0]
    8a66:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    8a68:	683b      	ldr	r3, [r7, #0]
    8a6a:	781b      	ldrb	r3, [r3, #0]
    8a6c:	f003 0320 	and.w	r3, r3, #32
    8a70:	b2db      	uxtb	r3, r3
    8a72:	2b00      	cmp	r3, #0
    8a74:	d005      	beq.n	8a82 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    8a76:	683b      	ldr	r3, [r7, #0]
    8a78:	689b      	ldr	r3, [r3, #8]
    8a7a:	4619      	mov	r1, r3
    8a7c:	68f8      	ldr	r0, [r7, #12]
    8a7e:	4b13      	ldr	r3, [pc, #76]	; (8acc <_qspi_sync_command_set_ifr+0x74>)
    8a80:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    8a82:	683b      	ldr	r3, [r7, #0]
    8a84:	781b      	ldrb	r3, [r3, #0]
    8a86:	f003 0310 	and.w	r3, r3, #16
    8a8a:	b2db      	uxtb	r3, r3
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d005      	beq.n	8a9c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    8a90:	683b      	ldr	r3, [r7, #0]
    8a92:	791b      	ldrb	r3, [r3, #4]
    8a94:	4619      	mov	r1, r3
    8a96:	68f8      	ldr	r0, [r7, #12]
    8a98:	4b0d      	ldr	r3, [pc, #52]	; (8ad0 <_qspi_sync_command_set_ifr+0x78>)
    8a9a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    8a9c:	683b      	ldr	r3, [r7, #0]
    8a9e:	781b      	ldrb	r3, [r3, #0]
    8aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8aa4:	b2db      	uxtb	r3, r3
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d005      	beq.n	8ab6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    8aaa:	683b      	ldr	r3, [r7, #0]
    8aac:	795b      	ldrb	r3, [r3, #5]
    8aae:	4619      	mov	r1, r3
    8ab0:	68f8      	ldr	r0, [r7, #12]
    8ab2:	4b08      	ldr	r3, [pc, #32]	; (8ad4 <_qspi_sync_command_set_ifr+0x7c>)
    8ab4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    8ab6:	683b      	ldr	r3, [r7, #0]
    8ab8:	681b      	ldr	r3, [r3, #0]
    8aba:	4619      	mov	r1, r3
    8abc:	68f8      	ldr	r0, [r7, #12]
    8abe:	4b06      	ldr	r3, [pc, #24]	; (8ad8 <_qspi_sync_command_set_ifr+0x80>)
    8ac0:	4798      	blx	r3
}
    8ac2:	bf00      	nop
    8ac4:	3710      	adds	r7, #16
    8ac6:	46bd      	mov	sp, r7
    8ac8:	bd80      	pop	{r7, pc}
    8aca:	bf00      	nop
    8acc:	0000888d 	.word	0x0000888d
    8ad0:	000088a9 	.word	0x000088a9
    8ad4:	000088dd 	.word	0x000088dd
    8ad8:	00008915 	.word	0x00008915

00008adc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8adc:	b580      	push	{r7, lr}
    8ade:	b084      	sub	sp, #16
    8ae0:	af00      	add	r7, sp, #0
    8ae2:	6078      	str	r0, [r7, #4]
    8ae4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    8ae6:	687b      	ldr	r3, [r7, #4]
    8ae8:	681b      	ldr	r3, [r3, #0]
    8aea:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    8aec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8af0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    8af2:	683b      	ldr	r3, [r7, #0]
    8af4:	781b      	ldrb	r3, [r3, #0]
    8af6:	f003 0320 	and.w	r3, r3, #32
    8afa:	b2db      	uxtb	r3, r3
    8afc:	2b00      	cmp	r3, #0
    8afe:	d004      	beq.n	8b0a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    8b00:	683b      	ldr	r3, [r7, #0]
    8b02:	689b      	ldr	r3, [r3, #8]
    8b04:	68fa      	ldr	r2, [r7, #12]
    8b06:	4413      	add	r3, r2
    8b08:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    8b0a:	68b8      	ldr	r0, [r7, #8]
    8b0c:	4b18      	ldr	r3, [pc, #96]	; (8b70 <_qspi_sync_run_transfer+0x94>)
    8b0e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    8b10:	683b      	ldr	r3, [r7, #0]
    8b12:	691b      	ldr	r3, [r3, #16]
    8b14:	2b00      	cmp	r3, #0
    8b16:	d103      	bne.n	8b20 <_qspi_sync_run_transfer+0x44>
    8b18:	683b      	ldr	r3, [r7, #0]
    8b1a:	695b      	ldr	r3, [r3, #20]
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	d001      	beq.n	8b24 <_qspi_sync_run_transfer+0x48>
    8b20:	2301      	movs	r3, #1
    8b22:	e000      	b.n	8b26 <_qspi_sync_run_transfer+0x4a>
    8b24:	2300      	movs	r3, #0
    8b26:	f003 0301 	and.w	r3, r3, #1
    8b2a:	b2db      	uxtb	r3, r3
    8b2c:	2282      	movs	r2, #130	; 0x82
    8b2e:	4911      	ldr	r1, [pc, #68]	; (8b74 <_qspi_sync_run_transfer+0x98>)
    8b30:	4618      	mov	r0, r3
    8b32:	4b11      	ldr	r3, [pc, #68]	; (8b78 <_qspi_sync_run_transfer+0x9c>)
    8b34:	4798      	blx	r3

	if (cmd->tx_buf) {
    8b36:	683b      	ldr	r3, [r7, #0]
    8b38:	691b      	ldr	r3, [r3, #16]
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d008      	beq.n	8b50 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    8b3e:	683b      	ldr	r3, [r7, #0]
    8b40:	6919      	ldr	r1, [r3, #16]
    8b42:	683b      	ldr	r3, [r7, #0]
    8b44:	68db      	ldr	r3, [r3, #12]
    8b46:	461a      	mov	r2, r3
    8b48:	68f8      	ldr	r0, [r7, #12]
    8b4a:	4b0c      	ldr	r3, [pc, #48]	; (8b7c <_qspi_sync_run_transfer+0xa0>)
    8b4c:	4798      	blx	r3
    8b4e:	e007      	b.n	8b60 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    8b50:	683b      	ldr	r3, [r7, #0]
    8b52:	6958      	ldr	r0, [r3, #20]
    8b54:	683b      	ldr	r3, [r7, #0]
    8b56:	68db      	ldr	r3, [r3, #12]
    8b58:	461a      	mov	r2, r3
    8b5a:	68f9      	ldr	r1, [r7, #12]
    8b5c:	4b07      	ldr	r3, [pc, #28]	; (8b7c <_qspi_sync_run_transfer+0xa0>)
    8b5e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    8b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8b64:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    8b68:	bf00      	nop
    8b6a:	3710      	adds	r7, #16
    8b6c:	46bd      	mov	sp, r7
    8b6e:	bd80      	pop	{r7, pc}
    8b70:	00008931 	.word	0x00008931
    8b74:	00013ccc 	.word	0x00013ccc
    8b78:	00006a41 	.word	0x00006a41
    8b7c:	00008949 	.word	0x00008949

00008b80 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b082      	sub	sp, #8
    8b84:	af00      	add	r7, sp, #0
    8b86:	6078      	str	r0, [r7, #4]
    8b88:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    8b8a:	6839      	ldr	r1, [r7, #0]
    8b8c:	6878      	ldr	r0, [r7, #4]
    8b8e:	4b14      	ldr	r3, [pc, #80]	; (8be0 <_qspi_sync_serial_run_command+0x60>)
    8b90:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    8b92:	683b      	ldr	r3, [r7, #0]
    8b94:	781b      	ldrb	r3, [r3, #0]
    8b96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8b9a:	b2db      	uxtb	r3, r3
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d003      	beq.n	8ba8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    8ba0:	6839      	ldr	r1, [r7, #0]
    8ba2:	6878      	ldr	r0, [r7, #4]
    8ba4:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <_qspi_sync_serial_run_command+0x64>)
    8ba6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    8ba8:	687b      	ldr	r3, [r7, #4]
    8baa:	681b      	ldr	r3, [r3, #0]
    8bac:	4618      	mov	r0, r3
    8bae:	4b0e      	ldr	r3, [pc, #56]	; (8be8 <_qspi_sync_serial_run_command+0x68>)
    8bb0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    8bb2:	bf00      	nop
    8bb4:	687b      	ldr	r3, [r7, #4]
    8bb6:	681b      	ldr	r3, [r3, #0]
    8bb8:	4618      	mov	r0, r3
    8bba:	4b0c      	ldr	r3, [pc, #48]	; (8bec <_qspi_sync_serial_run_command+0x6c>)
    8bbc:	4798      	blx	r3
    8bbe:	4603      	mov	r3, r0
    8bc0:	f083 0301 	eor.w	r3, r3, #1
    8bc4:	b2db      	uxtb	r3, r3
    8bc6:	2b00      	cmp	r3, #0
    8bc8:	d1f4      	bne.n	8bb4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	681b      	ldr	r3, [r3, #0]
    8bce:	4618      	mov	r0, r3
    8bd0:	4b07      	ldr	r3, [pc, #28]	; (8bf0 <_qspi_sync_serial_run_command+0x70>)
    8bd2:	4798      	blx	r3
	return ERR_NONE;
    8bd4:	2300      	movs	r3, #0
}
    8bd6:	4618      	mov	r0, r3
    8bd8:	3708      	adds	r7, #8
    8bda:	46bd      	mov	sp, r7
    8bdc:	bd80      	pop	{r7, pc}
    8bde:	bf00      	nop
    8be0:	00008a59 	.word	0x00008a59
    8be4:	00008add 	.word	0x00008add
    8be8:	0000897d 	.word	0x0000897d
    8bec:	000087f5 	.word	0x000087f5
    8bf0:	0000881d 	.word	0x0000881d

00008bf4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    8bf4:	b480      	push	{r7}
    8bf6:	b083      	sub	sp, #12
    8bf8:	af00      	add	r7, sp, #0
    8bfa:	6078      	str	r0, [r7, #4]
    8bfc:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8bfe:	bf00      	nop
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	691a      	ldr	r2, [r3, #16]
    8c04:	683b      	ldr	r3, [r7, #0]
    8c06:	4013      	ands	r3, r2
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d1f9      	bne.n	8c00 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    8c0c:	bf00      	nop
    8c0e:	370c      	adds	r7, #12
    8c10:	46bd      	mov	sp, r7
    8c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c16:	4770      	bx	lr

00008c18 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    8c18:	b480      	push	{r7}
    8c1a:	b083      	sub	sp, #12
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	f44f 7280 	mov.w	r2, #256	; 0x100
    8c26:	819a      	strh	r2, [r3, #12]
}
    8c28:	bf00      	nop
    8c2a:	370c      	adds	r7, #12
    8c2c:	46bd      	mov	sp, r7
    8c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c32:	4770      	bx	lr

00008c34 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    8c34:	b480      	push	{r7}
    8c36:	b083      	sub	sp, #12
    8c38:	af00      	add	r7, sp, #0
    8c3a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    8c3c:	687b      	ldr	r3, [r7, #4]
    8c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8c42:	819a      	strh	r2, [r3, #12]
}
    8c44:	bf00      	nop
    8c46:	370c      	adds	r7, #12
    8c48:	46bd      	mov	sp, r7
    8c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c4e:	4770      	bx	lr

00008c50 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    8c50:	b480      	push	{r7}
    8c52:	b083      	sub	sp, #12
    8c54:	af00      	add	r7, sp, #0
    8c56:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	899b      	ldrh	r3, [r3, #12]
    8c5c:	b29b      	uxth	r3, r3
}
    8c5e:	4618      	mov	r0, r3
    8c60:	370c      	adds	r7, #12
    8c62:	46bd      	mov	sp, r7
    8c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c68:	4770      	bx	lr

00008c6a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    8c6a:	b480      	push	{r7}
    8c6c:	b083      	sub	sp, #12
    8c6e:	af00      	add	r7, sp, #0
    8c70:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    8c72:	687b      	ldr	r3, [r7, #4]
    8c74:	895b      	ldrh	r3, [r3, #10]
    8c76:	b29b      	uxth	r3, r3
}
    8c78:	4618      	mov	r0, r3
    8c7a:	370c      	adds	r7, #12
    8c7c:	46bd      	mov	sp, r7
    8c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c82:	4770      	bx	lr

00008c84 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    8c84:	b580      	push	{r7, lr}
    8c86:	b082      	sub	sp, #8
    8c88:	af00      	add	r7, sp, #0
    8c8a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	881b      	ldrh	r3, [r3, #0]
    8c90:	b29b      	uxth	r3, r3
    8c92:	f043 0301 	orr.w	r3, r3, #1
    8c96:	b29a      	uxth	r2, r3
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    8c9c:	2101      	movs	r1, #1
    8c9e:	6878      	ldr	r0, [r7, #4]
    8ca0:	4b02      	ldr	r3, [pc, #8]	; (8cac <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    8ca2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8ca4:	bf00      	nop
    8ca6:	3708      	adds	r7, #8
    8ca8:	46bd      	mov	sp, r7
    8caa:	bd80      	pop	{r7, pc}
    8cac:	00008bf5 	.word	0x00008bf5

00008cb0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8cb0:	b580      	push	{r7, lr}
    8cb2:	b084      	sub	sp, #16
    8cb4:	af00      	add	r7, sp, #0
    8cb6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8cb8:	f248 0103 	movw	r1, #32771	; 0x8003
    8cbc:	6878      	ldr	r0, [r7, #4]
    8cbe:	4b0a      	ldr	r3, [pc, #40]	; (8ce8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    8cc0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	881b      	ldrh	r3, [r3, #0]
    8cc6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    8cc8:	89fb      	ldrh	r3, [r7, #14]
    8cca:	085b      	lsrs	r3, r3, #1
    8ccc:	b29b      	uxth	r3, r3
    8cce:	f003 0301 	and.w	r3, r3, #1
    8cd2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    8cd4:	89fb      	ldrh	r3, [r7, #14]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	bf14      	ite	ne
    8cda:	2301      	movne	r3, #1
    8cdc:	2300      	moveq	r3, #0
    8cde:	b2db      	uxtb	r3, r3
}
    8ce0:	4618      	mov	r0, r3
    8ce2:	3710      	adds	r7, #16
    8ce4:	46bd      	mov	sp, r7
    8ce6:	bd80      	pop	{r7, pc}
    8ce8:	00008bf5 	.word	0x00008bf5

00008cec <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8cec:	b580      	push	{r7, lr}
    8cee:	b082      	sub	sp, #8
    8cf0:	af00      	add	r7, sp, #0
    8cf2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	881b      	ldrh	r3, [r3, #0]
    8cf8:	b29b      	uxth	r3, r3
    8cfa:	f023 0302 	bic.w	r3, r3, #2
    8cfe:	b29a      	uxth	r2, r3
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8d04:	f248 0103 	movw	r1, #32771	; 0x8003
    8d08:	6878      	ldr	r0, [r7, #4]
    8d0a:	4b03      	ldr	r3, [pc, #12]	; (8d18 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    8d0c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8d0e:	bf00      	nop
    8d10:	3708      	adds	r7, #8
    8d12:	46bd      	mov	sp, r7
    8d14:	bd80      	pop	{r7, pc}
    8d16:	bf00      	nop
    8d18:	00008bf5 	.word	0x00008bf5

00008d1c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	b082      	sub	sp, #8
    8d20:	af00      	add	r7, sp, #0
    8d22:	6078      	str	r0, [r7, #4]
    8d24:	460b      	mov	r3, r1
    8d26:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    8d28:	687b      	ldr	r3, [r7, #4]
    8d2a:	887a      	ldrh	r2, [r7, #2]
    8d2c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8d2e:	f248 0103 	movw	r1, #32771	; 0x8003
    8d32:	6878      	ldr	r0, [r7, #4]
    8d34:	4b02      	ldr	r3, [pc, #8]	; (8d40 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    8d36:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8d38:	bf00      	nop
    8d3a:	3708      	adds	r7, #8
    8d3c:	46bd      	mov	sp, r7
    8d3e:	bd80      	pop	{r7, pc}
    8d40:	00008bf5 	.word	0x00008bf5

00008d44 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    8d44:	b580      	push	{r7, lr}
    8d46:	b082      	sub	sp, #8
    8d48:	af00      	add	r7, sp, #0
    8d4a:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8d4c:	2108      	movs	r1, #8
    8d4e:	6878      	ldr	r0, [r7, #4]
    8d50:	4b03      	ldr	r3, [pc, #12]	; (8d60 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    8d52:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    8d54:	687b      	ldr	r3, [r7, #4]
    8d56:	699b      	ldr	r3, [r3, #24]
}
    8d58:	4618      	mov	r0, r3
    8d5a:	3708      	adds	r7, #8
    8d5c:	46bd      	mov	sp, r7
    8d5e:	bd80      	pop	{r7, pc}
    8d60:	00008bf5 	.word	0x00008bf5

00008d64 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    8d64:	b480      	push	{r7}
    8d66:	b083      	sub	sp, #12
    8d68:	af00      	add	r7, sp, #0
    8d6a:	6078      	str	r0, [r7, #4]
    8d6c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    8d6e:	687b      	ldr	r3, [r7, #4]
    8d70:	683a      	ldr	r2, [r7, #0]
    8d72:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    8d74:	bf00      	nop
    8d76:	370c      	adds	r7, #12
    8d78:	46bd      	mov	sp, r7
    8d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d7e:	4770      	bx	lr

00008d80 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    8d80:	b580      	push	{r7, lr}
    8d82:	b082      	sub	sp, #8
    8d84:	af00      	add	r7, sp, #0
    8d86:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8d88:	687b      	ldr	r3, [r7, #4]
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d005      	beq.n	8d9a <_calendar_init+0x1a>
    8d8e:	687b      	ldr	r3, [r7, #4]
    8d90:	681b      	ldr	r3, [r3, #0]
    8d92:	2b00      	cmp	r3, #0
    8d94:	d001      	beq.n	8d9a <_calendar_init+0x1a>
    8d96:	2301      	movs	r3, #1
    8d98:	e000      	b.n	8d9c <_calendar_init+0x1c>
    8d9a:	2300      	movs	r3, #0
    8d9c:	f003 0301 	and.w	r3, r3, #1
    8da0:	b2db      	uxtb	r3, r3
    8da2:	222f      	movs	r2, #47	; 0x2f
    8da4:	491b      	ldr	r1, [pc, #108]	; (8e14 <_calendar_init+0x94>)
    8da6:	4618      	mov	r0, r3
    8da8:	4b1b      	ldr	r3, [pc, #108]	; (8e18 <_calendar_init+0x98>)
    8daa:	4798      	blx	r3

	_rtc_dev = dev;
    8dac:	4a1b      	ldr	r2, [pc, #108]	; (8e1c <_calendar_init+0x9c>)
    8dae:	687b      	ldr	r3, [r7, #4]
    8db0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	681b      	ldr	r3, [r3, #0]
    8db6:	4618      	mov	r0, r3
    8db8:	4b19      	ldr	r3, [pc, #100]	; (8e20 <_calendar_init+0xa0>)
    8dba:	4798      	blx	r3
    8dbc:	4603      	mov	r3, r0
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d00a      	beq.n	8dd8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	681b      	ldr	r3, [r3, #0]
    8dc6:	4618      	mov	r0, r3
    8dc8:	4b16      	ldr	r3, [pc, #88]	; (8e24 <_calendar_init+0xa4>)
    8dca:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    8dcc:	687b      	ldr	r3, [r7, #4]
    8dce:	681b      	ldr	r3, [r3, #0]
    8dd0:	2102      	movs	r1, #2
    8dd2:	4618      	mov	r0, r3
    8dd4:	4b14      	ldr	r3, [pc, #80]	; (8e28 <_calendar_init+0xa8>)
    8dd6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	4618      	mov	r0, r3
    8dde:	4b13      	ldr	r3, [pc, #76]	; (8e2c <_calendar_init+0xac>)
    8de0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8de2:	687b      	ldr	r3, [r7, #4]
    8de4:	681b      	ldr	r3, [r3, #0]
    8de6:	2101      	movs	r1, #1
    8de8:	4618      	mov	r0, r3
    8dea:	4b0f      	ldr	r3, [pc, #60]	; (8e28 <_calendar_init+0xa8>)
    8dec:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	681b      	ldr	r3, [r3, #0]
    8df2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    8df6:	4618      	mov	r0, r3
    8df8:	4b0d      	ldr	r3, [pc, #52]	; (8e30 <_calendar_init+0xb0>)
    8dfa:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    8e00:	2100      	movs	r1, #0
    8e02:	4618      	mov	r0, r3
    8e04:	4b0b      	ldr	r3, [pc, #44]	; (8e34 <_calendar_init+0xb4>)
    8e06:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    8e08:	2300      	movs	r3, #0
}
    8e0a:	4618      	mov	r0, r3
    8e0c:	3708      	adds	r7, #8
    8e0e:	46bd      	mov	sp, r7
    8e10:	bd80      	pop	{r7, pc}
    8e12:	bf00      	nop
    8e14:	00013ce4 	.word	0x00013ce4
    8e18:	00006a41 	.word	0x00006a41
    8e1c:	20001a1c 	.word	0x20001a1c
    8e20:	00008cb1 	.word	0x00008cb1
    8e24:	00008ced 	.word	0x00008ced
    8e28:	00008bf5 	.word	0x00008bf5
    8e2c:	00008c85 	.word	0x00008c85
    8e30:	00008d1d 	.word	0x00008d1d
    8e34:	00008d65 	.word	0x00008d65

00008e38 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    8e38:	b580      	push	{r7, lr}
    8e3a:	b082      	sub	sp, #8
    8e3c:	af00      	add	r7, sp, #0
    8e3e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8e40:	687b      	ldr	r3, [r7, #4]
    8e42:	2b00      	cmp	r3, #0
    8e44:	d005      	beq.n	8e52 <_calendar_get_counter+0x1a>
    8e46:	687b      	ldr	r3, [r7, #4]
    8e48:	681b      	ldr	r3, [r3, #0]
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d001      	beq.n	8e52 <_calendar_get_counter+0x1a>
    8e4e:	2301      	movs	r3, #1
    8e50:	e000      	b.n	8e54 <_calendar_get_counter+0x1c>
    8e52:	2300      	movs	r3, #0
    8e54:	f003 0301 	and.w	r3, r3, #1
    8e58:	b2db      	uxtb	r3, r3
    8e5a:	2299      	movs	r2, #153	; 0x99
    8e5c:	4906      	ldr	r1, [pc, #24]	; (8e78 <_calendar_get_counter+0x40>)
    8e5e:	4618      	mov	r0, r3
    8e60:	4b06      	ldr	r3, [pc, #24]	; (8e7c <_calendar_get_counter+0x44>)
    8e62:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    8e64:	687b      	ldr	r3, [r7, #4]
    8e66:	681b      	ldr	r3, [r3, #0]
    8e68:	4618      	mov	r0, r3
    8e6a:	4b05      	ldr	r3, [pc, #20]	; (8e80 <_calendar_get_counter+0x48>)
    8e6c:	4798      	blx	r3
    8e6e:	4603      	mov	r3, r0
}
    8e70:	4618      	mov	r0, r3
    8e72:	3708      	adds	r7, #8
    8e74:	46bd      	mov	sp, r7
    8e76:	bd80      	pop	{r7, pc}
    8e78:	00013ce4 	.word	0x00013ce4
    8e7c:	00006a41 	.word	0x00006a41
    8e80:	00008d45 	.word	0x00008d45

00008e84 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    8e84:	b580      	push	{r7, lr}
    8e86:	b084      	sub	sp, #16
    8e88:	af00      	add	r7, sp, #0
    8e8a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    8e8c:	687b      	ldr	r3, [r7, #4]
    8e8e:	681b      	ldr	r3, [r3, #0]
    8e90:	4618      	mov	r0, r3
    8e92:	4b19      	ldr	r3, [pc, #100]	; (8ef8 <_rtc_interrupt_handler+0x74>)
    8e94:	4798      	blx	r3
    8e96:	4603      	mov	r3, r0
    8e98:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    8e9a:	687b      	ldr	r3, [r7, #4]
    8e9c:	681b      	ldr	r3, [r3, #0]
    8e9e:	4618      	mov	r0, r3
    8ea0:	4b16      	ldr	r3, [pc, #88]	; (8efc <_rtc_interrupt_handler+0x78>)
    8ea2:	4798      	blx	r3
    8ea4:	4603      	mov	r3, r0
    8ea6:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    8ea8:	89fa      	ldrh	r2, [r7, #14]
    8eaa:	89bb      	ldrh	r3, [r7, #12]
    8eac:	4013      	ands	r3, r2
    8eae:	b29b      	uxth	r3, r3
    8eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8eb4:	2b00      	cmp	r3, #0
    8eb6:	d009      	beq.n	8ecc <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	685b      	ldr	r3, [r3, #4]
    8ebc:	6878      	ldr	r0, [r7, #4]
    8ebe:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8ec0:	687b      	ldr	r3, [r7, #4]
    8ec2:	681b      	ldr	r3, [r3, #0]
    8ec4:	4618      	mov	r0, r3
    8ec6:	4b0e      	ldr	r3, [pc, #56]	; (8f00 <_rtc_interrupt_handler+0x7c>)
    8ec8:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    8eca:	e010      	b.n	8eee <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    8ecc:	89fa      	ldrh	r2, [r7, #14]
    8ece:	89bb      	ldrh	r3, [r7, #12]
    8ed0:	4013      	ands	r3, r2
    8ed2:	b29b      	uxth	r3, r3
    8ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d008      	beq.n	8eee <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	689b      	ldr	r3, [r3, #8]
    8ee0:	6878      	ldr	r0, [r7, #4]
    8ee2:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	681b      	ldr	r3, [r3, #0]
    8ee8:	4618      	mov	r0, r3
    8eea:	4b06      	ldr	r3, [pc, #24]	; (8f04 <_rtc_interrupt_handler+0x80>)
    8eec:	4798      	blx	r3
}
    8eee:	bf00      	nop
    8ef0:	3710      	adds	r7, #16
    8ef2:	46bd      	mov	sp, r7
    8ef4:	bd80      	pop	{r7, pc}
    8ef6:	bf00      	nop
    8ef8:	00008c51 	.word	0x00008c51
    8efc:	00008c6b 	.word	0x00008c6b
    8f00:	00008c19 	.word	0x00008c19
    8f04:	00008c35 	.word	0x00008c35

00008f08 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    8f0c:	4b03      	ldr	r3, [pc, #12]	; (8f1c <RTC_Handler+0x14>)
    8f0e:	681b      	ldr	r3, [r3, #0]
    8f10:	4618      	mov	r0, r3
    8f12:	4b03      	ldr	r3, [pc, #12]	; (8f20 <RTC_Handler+0x18>)
    8f14:	4798      	blx	r3
}
    8f16:	bf00      	nop
    8f18:	bd80      	pop	{r7, pc}
    8f1a:	bf00      	nop
    8f1c:	20001a1c 	.word	0x20001a1c
    8f20:	00008e85 	.word	0x00008e85

00008f24 <__NVIC_EnableIRQ>:
{
    8f24:	b480      	push	{r7}
    8f26:	b083      	sub	sp, #12
    8f28:	af00      	add	r7, sp, #0
    8f2a:	4603      	mov	r3, r0
    8f2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f32:	2b00      	cmp	r3, #0
    8f34:	db0b      	blt.n	8f4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f36:	4909      	ldr	r1, [pc, #36]	; (8f5c <__NVIC_EnableIRQ+0x38>)
    8f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f3c:	095b      	lsrs	r3, r3, #5
    8f3e:	88fa      	ldrh	r2, [r7, #6]
    8f40:	f002 021f 	and.w	r2, r2, #31
    8f44:	2001      	movs	r0, #1
    8f46:	fa00 f202 	lsl.w	r2, r0, r2
    8f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f4e:	bf00      	nop
    8f50:	370c      	adds	r7, #12
    8f52:	46bd      	mov	sp, r7
    8f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f58:	4770      	bx	lr
    8f5a:	bf00      	nop
    8f5c:	e000e100 	.word	0xe000e100

00008f60 <__NVIC_DisableIRQ>:
{
    8f60:	b480      	push	{r7}
    8f62:	b083      	sub	sp, #12
    8f64:	af00      	add	r7, sp, #0
    8f66:	4603      	mov	r3, r0
    8f68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f6e:	2b00      	cmp	r3, #0
    8f70:	db10      	blt.n	8f94 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f72:	490b      	ldr	r1, [pc, #44]	; (8fa0 <__NVIC_DisableIRQ+0x40>)
    8f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f78:	095b      	lsrs	r3, r3, #5
    8f7a:	88fa      	ldrh	r2, [r7, #6]
    8f7c:	f002 021f 	and.w	r2, r2, #31
    8f80:	2001      	movs	r0, #1
    8f82:	fa00 f202 	lsl.w	r2, r0, r2
    8f86:	3320      	adds	r3, #32
    8f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8f90:	f3bf 8f6f 	isb	sy
}
    8f94:	bf00      	nop
    8f96:	370c      	adds	r7, #12
    8f98:	46bd      	mov	sp, r7
    8f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f9e:	4770      	bx	lr
    8fa0:	e000e100 	.word	0xe000e100

00008fa4 <__NVIC_ClearPendingIRQ>:
{
    8fa4:	b480      	push	{r7}
    8fa6:	b083      	sub	sp, #12
    8fa8:	af00      	add	r7, sp, #0
    8faa:	4603      	mov	r3, r0
    8fac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	db0c      	blt.n	8fd0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8fb6:	4909      	ldr	r1, [pc, #36]	; (8fdc <__NVIC_ClearPendingIRQ+0x38>)
    8fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8fbc:	095b      	lsrs	r3, r3, #5
    8fbe:	88fa      	ldrh	r2, [r7, #6]
    8fc0:	f002 021f 	and.w	r2, r2, #31
    8fc4:	2001      	movs	r0, #1
    8fc6:	fa00 f202 	lsl.w	r2, r0, r2
    8fca:	3360      	adds	r3, #96	; 0x60
    8fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8fd0:	bf00      	nop
    8fd2:	370c      	adds	r7, #12
    8fd4:	46bd      	mov	sp, r7
    8fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fda:	4770      	bx	lr
    8fdc:	e000e100 	.word	0xe000e100

00008fe0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8fe0:	b480      	push	{r7}
    8fe2:	b083      	sub	sp, #12
    8fe4:	af00      	add	r7, sp, #0
    8fe6:	6078      	str	r0, [r7, #4]
    8fe8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    8fea:	bf00      	nop
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	69da      	ldr	r2, [r3, #28]
    8ff0:	683b      	ldr	r3, [r7, #0]
    8ff2:	4013      	ands	r3, r2
    8ff4:	2b00      	cmp	r3, #0
    8ff6:	d1f9      	bne.n	8fec <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    8ff8:	bf00      	nop
    8ffa:	370c      	adds	r7, #12
    8ffc:	46bd      	mov	sp, r7
    8ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9002:	4770      	bx	lr

00009004 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    9004:	b480      	push	{r7}
    9006:	b083      	sub	sp, #12
    9008:	af00      	add	r7, sp, #0
    900a:	6078      	str	r0, [r7, #4]
    900c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	69da      	ldr	r2, [r3, #28]
    9012:	683b      	ldr	r3, [r7, #0]
    9014:	4013      	ands	r3, r2
    9016:	2b00      	cmp	r3, #0
    9018:	bf14      	ite	ne
    901a:	2301      	movne	r3, #1
    901c:	2300      	moveq	r3, #0
    901e:	b2db      	uxtb	r3, r3
}
    9020:	4618      	mov	r0, r3
    9022:	370c      	adds	r7, #12
    9024:	46bd      	mov	sp, r7
    9026:	f85d 7b04 	ldr.w	r7, [sp], #4
    902a:	4770      	bx	lr

0000902c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    902c:	b480      	push	{r7}
    902e:	b083      	sub	sp, #12
    9030:	af00      	add	r7, sp, #0
    9032:	6078      	str	r0, [r7, #4]
    9034:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9036:	bf00      	nop
    9038:	687b      	ldr	r3, [r7, #4]
    903a:	69da      	ldr	r2, [r3, #28]
    903c:	683b      	ldr	r3, [r7, #0]
    903e:	4013      	ands	r3, r2
    9040:	2b00      	cmp	r3, #0
    9042:	d1f9      	bne.n	9038 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    9044:	bf00      	nop
    9046:	370c      	adds	r7, #12
    9048:	46bd      	mov	sp, r7
    904a:	f85d 7b04 	ldr.w	r7, [sp], #4
    904e:	4770      	bx	lr

00009050 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    9050:	b480      	push	{r7}
    9052:	b083      	sub	sp, #12
    9054:	af00      	add	r7, sp, #0
    9056:	6078      	str	r0, [r7, #4]
    9058:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    905a:	687b      	ldr	r3, [r7, #4]
    905c:	69da      	ldr	r2, [r3, #28]
    905e:	683b      	ldr	r3, [r7, #0]
    9060:	4013      	ands	r3, r2
    9062:	2b00      	cmp	r3, #0
    9064:	bf14      	ite	ne
    9066:	2301      	movne	r3, #1
    9068:	2300      	moveq	r3, #0
    906a:	b2db      	uxtb	r3, r3
}
    906c:	4618      	mov	r0, r3
    906e:	370c      	adds	r7, #12
    9070:	46bd      	mov	sp, r7
    9072:	f85d 7b04 	ldr.w	r7, [sp], #4
    9076:	4770      	bx	lr

00009078 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    9078:	b480      	push	{r7}
    907a:	b083      	sub	sp, #12
    907c:	af00      	add	r7, sp, #0
    907e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	2201      	movs	r2, #1
    9084:	761a      	strb	r2, [r3, #24]
}
    9086:	bf00      	nop
    9088:	370c      	adds	r7, #12
    908a:	46bd      	mov	sp, r7
    908c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9090:	4770      	bx	lr

00009092 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    9092:	b480      	push	{r7}
    9094:	b083      	sub	sp, #12
    9096:	af00      	add	r7, sp, #0
    9098:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	2202      	movs	r2, #2
    909e:	761a      	strb	r2, [r3, #24]
}
    90a0:	bf00      	nop
    90a2:	370c      	adds	r7, #12
    90a4:	46bd      	mov	sp, r7
    90a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90aa:	4770      	bx	lr

000090ac <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    90ac:	b480      	push	{r7}
    90ae:	b083      	sub	sp, #12
    90b0:	af00      	add	r7, sp, #0
    90b2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	7e1b      	ldrb	r3, [r3, #24]
    90b8:	b2db      	uxtb	r3, r3
}
    90ba:	4618      	mov	r0, r3
    90bc:	370c      	adds	r7, #12
    90be:	46bd      	mov	sp, r7
    90c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c4:	4770      	bx	lr

000090c6 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    90c6:	b480      	push	{r7}
    90c8:	b083      	sub	sp, #12
    90ca:	af00      	add	r7, sp, #0
    90cc:	6078      	str	r0, [r7, #4]
    90ce:	460b      	mov	r3, r1
    90d0:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	78fa      	ldrb	r2, [r7, #3]
    90d6:	761a      	strb	r2, [r3, #24]
}
    90d8:	bf00      	nop
    90da:	370c      	adds	r7, #12
    90dc:	46bd      	mov	sp, r7
    90de:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e2:	4770      	bx	lr

000090e4 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    90e4:	b480      	push	{r7}
    90e6:	b085      	sub	sp, #20
    90e8:	af00      	add	r7, sp, #0
    90ea:	6078      	str	r0, [r7, #4]
    90ec:	460b      	mov	r3, r1
    90ee:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	7e1b      	ldrb	r3, [r3, #24]
    90f4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    90f6:	7bfa      	ldrb	r2, [r7, #15]
    90f8:	78fb      	ldrb	r3, [r7, #3]
    90fa:	4013      	ands	r3, r2
    90fc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    90fe:	7bfb      	ldrb	r3, [r7, #15]
}
    9100:	4618      	mov	r0, r3
    9102:	3714      	adds	r7, #20
    9104:	46bd      	mov	sp, r7
    9106:	f85d 7b04 	ldr.w	r7, [sp], #4
    910a:	4770      	bx	lr

0000910c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    910c:	b480      	push	{r7}
    910e:	b083      	sub	sp, #12
    9110:	af00      	add	r7, sp, #0
    9112:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    9114:	687b      	ldr	r3, [r7, #4]
    9116:	7e1b      	ldrb	r3, [r3, #24]
    9118:	b2db      	uxtb	r3, r3
}
    911a:	4618      	mov	r0, r3
    911c:	370c      	adds	r7, #12
    911e:	46bd      	mov	sp, r7
    9120:	f85d 7b04 	ldr.w	r7, [sp], #4
    9124:	4770      	bx	lr

00009126 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    9126:	b480      	push	{r7}
    9128:	b083      	sub	sp, #12
    912a:	af00      	add	r7, sp, #0
    912c:	6078      	str	r0, [r7, #4]
    912e:	460b      	mov	r3, r1
    9130:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    9132:	687b      	ldr	r3, [r7, #4]
    9134:	78fa      	ldrb	r2, [r7, #3]
    9136:	761a      	strb	r2, [r3, #24]
}
    9138:	bf00      	nop
    913a:	370c      	adds	r7, #12
    913c:	46bd      	mov	sp, r7
    913e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9142:	4770      	bx	lr

00009144 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    9144:	b480      	push	{r7}
    9146:	b083      	sub	sp, #12
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	2201      	movs	r2, #1
    9150:	759a      	strb	r2, [r3, #22]
}
    9152:	bf00      	nop
    9154:	370c      	adds	r7, #12
    9156:	46bd      	mov	sp, r7
    9158:	f85d 7b04 	ldr.w	r7, [sp], #4
    915c:	4770      	bx	lr

0000915e <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    915e:	b480      	push	{r7}
    9160:	b083      	sub	sp, #12
    9162:	af00      	add	r7, sp, #0
    9164:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    9166:	687b      	ldr	r3, [r7, #4]
    9168:	2201      	movs	r2, #1
    916a:	751a      	strb	r2, [r3, #20]
}
    916c:	bf00      	nop
    916e:	370c      	adds	r7, #12
    9170:	46bd      	mov	sp, r7
    9172:	f85d 7b04 	ldr.w	r7, [sp], #4
    9176:	4770      	bx	lr

00009178 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    9178:	b480      	push	{r7}
    917a:	b083      	sub	sp, #12
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	2202      	movs	r2, #2
    9184:	759a      	strb	r2, [r3, #22]
}
    9186:	bf00      	nop
    9188:	370c      	adds	r7, #12
    918a:	46bd      	mov	sp, r7
    918c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9190:	4770      	bx	lr

00009192 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    9192:	b480      	push	{r7}
    9194:	b083      	sub	sp, #12
    9196:	af00      	add	r7, sp, #0
    9198:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    919a:	687b      	ldr	r3, [r7, #4]
    919c:	2202      	movs	r2, #2
    919e:	751a      	strb	r2, [r3, #20]
}
    91a0:	bf00      	nop
    91a2:	370c      	adds	r7, #12
    91a4:	46bd      	mov	sp, r7
    91a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91aa:	4770      	bx	lr

000091ac <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    91ac:	b480      	push	{r7}
    91ae:	b083      	sub	sp, #12
    91b0:	af00      	add	r7, sp, #0
    91b2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	2204      	movs	r2, #4
    91b8:	759a      	strb	r2, [r3, #22]
}
    91ba:	bf00      	nop
    91bc:	370c      	adds	r7, #12
    91be:	46bd      	mov	sp, r7
    91c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c4:	4770      	bx	lr

000091c6 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    91c6:	b480      	push	{r7}
    91c8:	b083      	sub	sp, #12
    91ca:	af00      	add	r7, sp, #0
    91cc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    91ce:	687b      	ldr	r3, [r7, #4]
    91d0:	2204      	movs	r2, #4
    91d2:	751a      	strb	r2, [r3, #20]
}
    91d4:	bf00      	nop
    91d6:	370c      	adds	r7, #12
    91d8:	46bd      	mov	sp, r7
    91da:	f85d 7b04 	ldr.w	r7, [sp], #4
    91de:	4770      	bx	lr

000091e0 <hri_sercomspi_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->SPI.INTENSET.reg & SERCOM_SPI_INTENSET_ERROR) >> SERCOM_SPI_INTENSET_ERROR_Pos;
}

static inline void hri_sercomspi_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    91e0:	b480      	push	{r7}
    91e2:	b083      	sub	sp, #12
    91e4:	af00      	add	r7, sp, #0
    91e6:	6078      	str	r0, [r7, #4]
    91e8:	460b      	mov	r3, r1
    91ea:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    91ec:	78fb      	ldrb	r3, [r7, #3]
    91ee:	f083 0301 	eor.w	r3, r3, #1
    91f2:	b2db      	uxtb	r3, r3
    91f4:	2b00      	cmp	r3, #0
    91f6:	d003      	beq.n	9200 <hri_sercomspi_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    91f8:	687b      	ldr	r3, [r7, #4]
    91fa:	2280      	movs	r2, #128	; 0x80
    91fc:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
	}
}
    91fe:	e002      	b.n	9206 <hri_sercomspi_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    9200:	687b      	ldr	r3, [r7, #4]
    9202:	2280      	movs	r2, #128	; 0x80
    9204:	759a      	strb	r2, [r3, #22]
}
    9206:	bf00      	nop
    9208:	370c      	adds	r7, #12
    920a:	46bd      	mov	sp, r7
    920c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9210:	4770      	bx	lr

00009212 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    9212:	b480      	push	{r7}
    9214:	b083      	sub	sp, #12
    9216:	af00      	add	r7, sp, #0
    9218:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    921a:	687b      	ldr	r3, [r7, #4]
    921c:	7d9b      	ldrb	r3, [r3, #22]
    921e:	b2db      	uxtb	r3, r3
}
    9220:	4618      	mov	r0, r3
    9222:	370c      	adds	r7, #12
    9224:	46bd      	mov	sp, r7
    9226:	f85d 7b04 	ldr.w	r7, [sp], #4
    922a:	4770      	bx	lr

0000922c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    922c:	b580      	push	{r7, lr}
    922e:	b082      	sub	sp, #8
    9230:	af00      	add	r7, sp, #0
    9232:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	681b      	ldr	r3, [r3, #0]
    9238:	f023 0202 	bic.w	r2, r3, #2
    923c:	687b      	ldr	r3, [r7, #4]
    923e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9240:	2103      	movs	r1, #3
    9242:	6878      	ldr	r0, [r7, #4]
    9244:	4b02      	ldr	r3, [pc, #8]	; (9250 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    9246:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9248:	bf00      	nop
    924a:	3708      	adds	r7, #8
    924c:	46bd      	mov	sp, r7
    924e:	bd80      	pop	{r7, pc}
    9250:	00008fe1 	.word	0x00008fe1

00009254 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    9254:	b480      	push	{r7}
    9256:	b085      	sub	sp, #20
    9258:	af00      	add	r7, sp, #0
    925a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	681b      	ldr	r3, [r3, #0]
    9260:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    9262:	68fb      	ldr	r3, [r7, #12]
    9264:	0edb      	lsrs	r3, r3, #27
    9266:	f003 0301 	and.w	r3, r3, #1
    926a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    926c:	68fb      	ldr	r3, [r7, #12]
    926e:	2b00      	cmp	r3, #0
    9270:	bf14      	ite	ne
    9272:	2301      	movne	r3, #1
    9274:	2300      	moveq	r3, #0
    9276:	b2db      	uxtb	r3, r3
}
    9278:	4618      	mov	r0, r3
    927a:	3714      	adds	r7, #20
    927c:	46bd      	mov	sp, r7
    927e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9282:	4770      	bx	lr

00009284 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    9284:	b580      	push	{r7, lr}
    9286:	b084      	sub	sp, #16
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
    928c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    928e:	2103      	movs	r1, #3
    9290:	6878      	ldr	r0, [r7, #4]
    9292:	4b07      	ldr	r3, [pc, #28]	; (92b0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    9294:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9296:	687b      	ldr	r3, [r7, #4]
    9298:	681b      	ldr	r3, [r3, #0]
    929a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    929c:	68fa      	ldr	r2, [r7, #12]
    929e:	683b      	ldr	r3, [r7, #0]
    92a0:	4013      	ands	r3, r2
    92a2:	60fb      	str	r3, [r7, #12]
	return tmp;
    92a4:	68fb      	ldr	r3, [r7, #12]
}
    92a6:	4618      	mov	r0, r3
    92a8:	3710      	adds	r7, #16
    92aa:	46bd      	mov	sp, r7
    92ac:	bd80      	pop	{r7, pc}
    92ae:	bf00      	nop
    92b0:	00008fe1 	.word	0x00008fe1

000092b4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    92b4:	b580      	push	{r7, lr}
    92b6:	b082      	sub	sp, #8
    92b8:	af00      	add	r7, sp, #0
    92ba:	6078      	str	r0, [r7, #4]
    92bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	683a      	ldr	r2, [r7, #0]
    92c2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    92c4:	2103      	movs	r1, #3
    92c6:	6878      	ldr	r0, [r7, #4]
    92c8:	4b02      	ldr	r3, [pc, #8]	; (92d4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    92ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92cc:	bf00      	nop
    92ce:	3708      	adds	r7, #8
    92d0:	46bd      	mov	sp, r7
    92d2:	bd80      	pop	{r7, pc}
    92d4:	00008fe1 	.word	0x00008fe1

000092d8 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    92d8:	b580      	push	{r7, lr}
    92da:	b082      	sub	sp, #8
    92dc:	af00      	add	r7, sp, #0
    92de:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    92e0:	687b      	ldr	r3, [r7, #4]
    92e2:	681b      	ldr	r3, [r3, #0]
    92e4:	f043 0202 	orr.w	r2, r3, #2
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    92ec:	2103      	movs	r1, #3
    92ee:	6878      	ldr	r0, [r7, #4]
    92f0:	4b02      	ldr	r3, [pc, #8]	; (92fc <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    92f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    92f4:	bf00      	nop
    92f6:	3708      	adds	r7, #8
    92f8:	46bd      	mov	sp, r7
    92fa:	bd80      	pop	{r7, pc}
    92fc:	0000902d 	.word	0x0000902d

00009300 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9300:	b580      	push	{r7, lr}
    9302:	b084      	sub	sp, #16
    9304:	af00      	add	r7, sp, #0
    9306:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    9308:	2103      	movs	r1, #3
    930a:	6878      	ldr	r0, [r7, #4]
    930c:	4b09      	ldr	r3, [pc, #36]	; (9334 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    930e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9310:	687b      	ldr	r3, [r7, #4]
    9312:	681b      	ldr	r3, [r3, #0]
    9314:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    9316:	68fb      	ldr	r3, [r7, #12]
    9318:	085b      	lsrs	r3, r3, #1
    931a:	f003 0301 	and.w	r3, r3, #1
    931e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9320:	68fb      	ldr	r3, [r7, #12]
    9322:	2b00      	cmp	r3, #0
    9324:	bf14      	ite	ne
    9326:	2301      	movne	r3, #1
    9328:	2300      	moveq	r3, #0
    932a:	b2db      	uxtb	r3, r3
}
    932c:	4618      	mov	r0, r3
    932e:	3710      	adds	r7, #16
    9330:	46bd      	mov	sp, r7
    9332:	bd80      	pop	{r7, pc}
    9334:	0000902d 	.word	0x0000902d

00009338 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9338:	b580      	push	{r7, lr}
    933a:	b082      	sub	sp, #8
    933c:	af00      	add	r7, sp, #0
    933e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    9340:	687b      	ldr	r3, [r7, #4]
    9342:	681b      	ldr	r3, [r3, #0]
    9344:	f023 0202 	bic.w	r2, r3, #2
    9348:	687b      	ldr	r3, [r7, #4]
    934a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    934c:	2103      	movs	r1, #3
    934e:	6878      	ldr	r0, [r7, #4]
    9350:	4b02      	ldr	r3, [pc, #8]	; (935c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    9352:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9354:	bf00      	nop
    9356:	3708      	adds	r7, #8
    9358:	46bd      	mov	sp, r7
    935a:	bd80      	pop	{r7, pc}
    935c:	0000902d 	.word	0x0000902d

00009360 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    9360:	b580      	push	{r7, lr}
    9362:	b084      	sub	sp, #16
    9364:	af00      	add	r7, sp, #0
    9366:	6078      	str	r0, [r7, #4]
    9368:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    936a:	2103      	movs	r1, #3
    936c:	6878      	ldr	r0, [r7, #4]
    936e:	4b07      	ldr	r3, [pc, #28]	; (938c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    9370:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    9372:	687b      	ldr	r3, [r7, #4]
    9374:	681b      	ldr	r3, [r3, #0]
    9376:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9378:	68fa      	ldr	r2, [r7, #12]
    937a:	683b      	ldr	r3, [r7, #0]
    937c:	4013      	ands	r3, r2
    937e:	60fb      	str	r3, [r7, #12]
	return tmp;
    9380:	68fb      	ldr	r3, [r7, #12]
}
    9382:	4618      	mov	r0, r3
    9384:	3710      	adds	r7, #16
    9386:	46bd      	mov	sp, r7
    9388:	bd80      	pop	{r7, pc}
    938a:	bf00      	nop
    938c:	0000902d 	.word	0x0000902d

00009390 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    9390:	b580      	push	{r7, lr}
    9392:	b082      	sub	sp, #8
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
    9398:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	683a      	ldr	r2, [r7, #0]
    939e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    93a0:	2103      	movs	r1, #3
    93a2:	6878      	ldr	r0, [r7, #4]
    93a4:	4b02      	ldr	r3, [pc, #8]	; (93b0 <hri_sercomspi_write_CTRLA_reg+0x20>)
    93a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93a8:	bf00      	nop
    93aa:	3708      	adds	r7, #8
    93ac:	46bd      	mov	sp, r7
    93ae:	bd80      	pop	{r7, pc}
    93b0:	0000902d 	.word	0x0000902d

000093b4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    93b4:	b580      	push	{r7, lr}
    93b6:	b082      	sub	sp, #8
    93b8:	af00      	add	r7, sp, #0
    93ba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	685b      	ldr	r3, [r3, #4]
    93c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    93c8:	2104      	movs	r1, #4
    93ca:	6878      	ldr	r0, [r7, #4]
    93cc:	4b02      	ldr	r3, [pc, #8]	; (93d8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    93ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93d0:	bf00      	nop
    93d2:	3708      	adds	r7, #8
    93d4:	46bd      	mov	sp, r7
    93d6:	bd80      	pop	{r7, pc}
    93d8:	00008fe1 	.word	0x00008fe1

000093dc <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    93dc:	b580      	push	{r7, lr}
    93de:	b082      	sub	sp, #8
    93e0:	af00      	add	r7, sp, #0
    93e2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	685b      	ldr	r3, [r3, #4]
    93e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    93ec:	687b      	ldr	r3, [r7, #4]
    93ee:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    93f0:	2104      	movs	r1, #4
    93f2:	6878      	ldr	r0, [r7, #4]
    93f4:	4b02      	ldr	r3, [pc, #8]	; (9400 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    93f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    93f8:	bf00      	nop
    93fa:	3708      	adds	r7, #8
    93fc:	46bd      	mov	sp, r7
    93fe:	bd80      	pop	{r7, pc}
    9400:	00008fe1 	.word	0x00008fe1

00009404 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    9404:	b580      	push	{r7, lr}
    9406:	b082      	sub	sp, #8
    9408:	af00      	add	r7, sp, #0
    940a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	685b      	ldr	r3, [r3, #4]
    9410:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    9414:	687b      	ldr	r3, [r7, #4]
    9416:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9418:	2104      	movs	r1, #4
    941a:	6878      	ldr	r0, [r7, #4]
    941c:	4b02      	ldr	r3, [pc, #8]	; (9428 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    941e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9420:	bf00      	nop
    9422:	3708      	adds	r7, #8
    9424:	46bd      	mov	sp, r7
    9426:	bd80      	pop	{r7, pc}
    9428:	00008fe1 	.word	0x00008fe1

0000942c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    942c:	b580      	push	{r7, lr}
    942e:	b082      	sub	sp, #8
    9430:	af00      	add	r7, sp, #0
    9432:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    9434:	687b      	ldr	r3, [r7, #4]
    9436:	685b      	ldr	r3, [r3, #4]
    9438:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    943c:	687b      	ldr	r3, [r7, #4]
    943e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9440:	2104      	movs	r1, #4
    9442:	6878      	ldr	r0, [r7, #4]
    9444:	4b02      	ldr	r3, [pc, #8]	; (9450 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    9446:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9448:	bf00      	nop
    944a:	3708      	adds	r7, #8
    944c:	46bd      	mov	sp, r7
    944e:	bd80      	pop	{r7, pc}
    9450:	00008fe1 	.word	0x00008fe1

00009454 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    9454:	b580      	push	{r7, lr}
    9456:	b082      	sub	sp, #8
    9458:	af00      	add	r7, sp, #0
    945a:	6078      	str	r0, [r7, #4]
    945c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    945e:	687b      	ldr	r3, [r7, #4]
    9460:	685a      	ldr	r2, [r3, #4]
    9462:	683b      	ldr	r3, [r7, #0]
    9464:	041b      	lsls	r3, r3, #16
    9466:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    946a:	431a      	orrs	r2, r3
    946c:	687b      	ldr	r3, [r7, #4]
    946e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9470:	2104      	movs	r1, #4
    9472:	6878      	ldr	r0, [r7, #4]
    9474:	4b02      	ldr	r3, [pc, #8]	; (9480 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    9476:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9478:	bf00      	nop
    947a:	3708      	adds	r7, #8
    947c:	46bd      	mov	sp, r7
    947e:	bd80      	pop	{r7, pc}
    9480:	00008fe1 	.word	0x00008fe1

00009484 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    9484:	b580      	push	{r7, lr}
    9486:	b082      	sub	sp, #8
    9488:	af00      	add	r7, sp, #0
    948a:	6078      	str	r0, [r7, #4]
    948c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    948e:	687b      	ldr	r3, [r7, #4]
    9490:	683a      	ldr	r2, [r7, #0]
    9492:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9494:	2104      	movs	r1, #4
    9496:	6878      	ldr	r0, [r7, #4]
    9498:	4b02      	ldr	r3, [pc, #8]	; (94a4 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    949a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    949c:	bf00      	nop
    949e:	3708      	adds	r7, #8
    94a0:	46bd      	mov	sp, r7
    94a2:	bd80      	pop	{r7, pc}
    94a4:	00008fe1 	.word	0x00008fe1

000094a8 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    94a8:	b580      	push	{r7, lr}
    94aa:	b082      	sub	sp, #8
    94ac:	af00      	add	r7, sp, #0
    94ae:	6078      	str	r0, [r7, #4]
    94b0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    94b2:	687b      	ldr	r3, [r7, #4]
    94b4:	683a      	ldr	r2, [r7, #0]
    94b6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    94b8:	2117      	movs	r1, #23
    94ba:	6878      	ldr	r0, [r7, #4]
    94bc:	4b02      	ldr	r3, [pc, #8]	; (94c8 <hri_sercomspi_write_CTRLB_reg+0x20>)
    94be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94c0:	bf00      	nop
    94c2:	3708      	adds	r7, #8
    94c4:	46bd      	mov	sp, r7
    94c6:	bd80      	pop	{r7, pc}
    94c8:	0000902d 	.word	0x0000902d

000094cc <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    94cc:	b480      	push	{r7}
    94ce:	b083      	sub	sp, #12
    94d0:	af00      	add	r7, sp, #0
    94d2:	6078      	str	r0, [r7, #4]
    94d4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    94d6:	687b      	ldr	r3, [r7, #4]
    94d8:	683a      	ldr	r2, [r7, #0]
    94da:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94dc:	bf00      	nop
    94de:	370c      	adds	r7, #12
    94e0:	46bd      	mov	sp, r7
    94e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    94e6:	4770      	bx	lr

000094e8 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    94e8:	b480      	push	{r7}
    94ea:	b083      	sub	sp, #12
    94ec:	af00      	add	r7, sp, #0
    94ee:	6078      	str	r0, [r7, #4]
    94f0:	460b      	mov	r3, r1
    94f2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	78fa      	ldrb	r2, [r7, #3]
    94f8:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    94fa:	bf00      	nop
    94fc:	370c      	adds	r7, #12
    94fe:	46bd      	mov	sp, r7
    9500:	f85d 7b04 	ldr.w	r7, [sp], #4
    9504:	4770      	bx	lr
	...

00009508 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    9508:	b580      	push	{r7, lr}
    950a:	b084      	sub	sp, #16
    950c:	af00      	add	r7, sp, #0
    950e:	6078      	str	r0, [r7, #4]
    9510:	460b      	mov	r3, r1
    9512:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    9514:	687b      	ldr	r3, [r7, #4]
    9516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9518:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    951a:	68fb      	ldr	r3, [r7, #12]
    951c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    9520:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    9522:	78fb      	ldrb	r3, [r7, #3]
    9524:	039b      	lsls	r3, r3, #14
    9526:	461a      	mov	r2, r3
    9528:	68fb      	ldr	r3, [r7, #12]
    952a:	4313      	orrs	r3, r2
    952c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	68fa      	ldr	r2, [r7, #12]
    9532:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9534:	2104      	movs	r1, #4
    9536:	6878      	ldr	r0, [r7, #4]
    9538:	4b02      	ldr	r3, [pc, #8]	; (9544 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    953a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    953c:	bf00      	nop
    953e:	3710      	adds	r7, #16
    9540:	46bd      	mov	sp, r7
    9542:	bd80      	pop	{r7, pc}
    9544:	00008fe1 	.word	0x00008fe1

00009548 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    9548:	b580      	push	{r7, lr}
    954a:	b082      	sub	sp, #8
    954c:	af00      	add	r7, sp, #0
    954e:	6078      	str	r0, [r7, #4]
    9550:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    9552:	687b      	ldr	r3, [r7, #4]
    9554:	683a      	ldr	r2, [r7, #0]
    9556:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9558:	2104      	movs	r1, #4
    955a:	6878      	ldr	r0, [r7, #4]
    955c:	4b02      	ldr	r3, [pc, #8]	; (9568 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    955e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9560:	bf00      	nop
    9562:	3708      	adds	r7, #8
    9564:	46bd      	mov	sp, r7
    9566:	bd80      	pop	{r7, pc}
    9568:	00008fe1 	.word	0x00008fe1

0000956c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    956c:	b580      	push	{r7, lr}
    956e:	b082      	sub	sp, #8
    9570:	af00      	add	r7, sp, #0
    9572:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9574:	2104      	movs	r1, #4
    9576:	6878      	ldr	r0, [r7, #4]
    9578:	4b03      	ldr	r3, [pc, #12]	; (9588 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    957a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    957c:	687b      	ldr	r3, [r7, #4]
    957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9580:	4618      	mov	r0, r3
    9582:	3708      	adds	r7, #8
    9584:	46bd      	mov	sp, r7
    9586:	bd80      	pop	{r7, pc}
    9588:	00008fe1 	.word	0x00008fe1

0000958c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    958c:	b480      	push	{r7}
    958e:	b083      	sub	sp, #12
    9590:	af00      	add	r7, sp, #0
    9592:	6078      	str	r0, [r7, #4]
    9594:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    9596:	687b      	ldr	r3, [r7, #4]
    9598:	683a      	ldr	r2, [r7, #0]
    959a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    959c:	bf00      	nop
    959e:	370c      	adds	r7, #12
    95a0:	46bd      	mov	sp, r7
    95a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95a6:	4770      	bx	lr

000095a8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    95a8:	b580      	push	{r7, lr}
    95aa:	b082      	sub	sp, #8
    95ac:	af00      	add	r7, sp, #0
    95ae:	6078      	str	r0, [r7, #4]
    95b0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	683a      	ldr	r2, [r7, #0]
    95b6:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    95b8:	2104      	movs	r1, #4
    95ba:	6878      	ldr	r0, [r7, #4]
    95bc:	4b02      	ldr	r3, [pc, #8]	; (95c8 <hri_sercomi2cm_write_DATA_reg+0x20>)
    95be:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    95c0:	bf00      	nop
    95c2:	3708      	adds	r7, #8
    95c4:	46bd      	mov	sp, r7
    95c6:	bd80      	pop	{r7, pc}
    95c8:	00008fe1 	.word	0x00008fe1

000095cc <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    95cc:	b580      	push	{r7, lr}
    95ce:	b082      	sub	sp, #8
    95d0:	af00      	add	r7, sp, #0
    95d2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    95d4:	2104      	movs	r1, #4
    95d6:	6878      	ldr	r0, [r7, #4]
    95d8:	4b03      	ldr	r3, [pc, #12]	; (95e8 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    95da:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    95dc:	687b      	ldr	r3, [r7, #4]
    95de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    95e0:	4618      	mov	r0, r3
    95e2:	3708      	adds	r7, #8
    95e4:	46bd      	mov	sp, r7
    95e6:	bd80      	pop	{r7, pc}
    95e8:	00008fe1 	.word	0x00008fe1

000095ec <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    95ec:	b480      	push	{r7}
    95ee:	b083      	sub	sp, #12
    95f0:	af00      	add	r7, sp, #0
    95f2:	6078      	str	r0, [r7, #4]
    95f4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    95f6:	687b      	ldr	r3, [r7, #4]
    95f8:	683a      	ldr	r2, [r7, #0]
    95fa:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    95fc:	bf00      	nop
    95fe:	370c      	adds	r7, #12
    9600:	46bd      	mov	sp, r7
    9602:	f85d 7b04 	ldr.w	r7, [sp], #4
    9606:	4770      	bx	lr

00009608 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    9608:	b480      	push	{r7}
    960a:	b083      	sub	sp, #12
    960c:	af00      	add	r7, sp, #0
    960e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    9614:	4618      	mov	r0, r3
    9616:	370c      	adds	r7, #12
    9618:	46bd      	mov	sp, r7
    961a:	f85d 7b04 	ldr.w	r7, [sp], #4
    961e:	4770      	bx	lr

00009620 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    9620:	b480      	push	{r7}
    9622:	b083      	sub	sp, #12
    9624:	af00      	add	r7, sp, #0
    9626:	6078      	str	r0, [r7, #4]
    9628:	460b      	mov	r3, r1
    962a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    962c:	687b      	ldr	r3, [r7, #4]
    962e:	78fa      	ldrb	r2, [r7, #3]
    9630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9634:	bf00      	nop
    9636:	370c      	adds	r7, #12
    9638:	46bd      	mov	sp, r7
    963a:	f85d 7b04 	ldr.w	r7, [sp], #4
    963e:	4770      	bx	lr

00009640 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    9640:	b480      	push	{r7}
    9642:	b083      	sub	sp, #12
    9644:	af00      	add	r7, sp, #0
    9646:	6078      	str	r0, [r7, #4]
    9648:	460b      	mov	r3, r1
    964a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    964c:	687b      	ldr	r3, [r7, #4]
    964e:	887a      	ldrh	r2, [r7, #2]
    9650:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9652:	bf00      	nop
    9654:	370c      	adds	r7, #12
    9656:	46bd      	mov	sp, r7
    9658:	f85d 7b04 	ldr.w	r7, [sp], #4
    965c:	4770      	bx	lr
	...

00009660 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    9660:	b580      	push	{r7, lr}
    9662:	b082      	sub	sp, #8
    9664:	af00      	add	r7, sp, #0
    9666:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    9668:	2104      	movs	r1, #4
    966a:	6878      	ldr	r0, [r7, #4]
    966c:	4b04      	ldr	r3, [pc, #16]	; (9680 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    966e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    9670:	687b      	ldr	r3, [r7, #4]
    9672:	8b5b      	ldrh	r3, [r3, #26]
    9674:	b29b      	uxth	r3, r3
}
    9676:	4618      	mov	r0, r3
    9678:	3708      	adds	r7, #8
    967a:	46bd      	mov	sp, r7
    967c:	bd80      	pop	{r7, pc}
    967e:	bf00      	nop
    9680:	00008fe1 	.word	0x00008fe1

00009684 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    9684:	b4b0      	push	{r4, r5, r7}
    9686:	b08d      	sub	sp, #52	; 0x34
    9688:	af00      	add	r7, sp, #0
    968a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    968c:	4b13      	ldr	r3, [pc, #76]	; (96dc <_sercom_get_hardware_index+0x58>)
    968e:	f107 040c 	add.w	r4, r7, #12
    9692:	461d      	mov	r5, r3
    9694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9698:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    969c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    96a0:	2300      	movs	r3, #0
    96a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    96a4:	e010      	b.n	96c8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    96a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    96a8:	009b      	lsls	r3, r3, #2
    96aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
    96ae:	4413      	add	r3, r2
    96b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    96b4:	461a      	mov	r2, r3
    96b6:	687b      	ldr	r3, [r7, #4]
    96b8:	429a      	cmp	r2, r3
    96ba:	d102      	bne.n	96c2 <_sercom_get_hardware_index+0x3e>
			return i;
    96bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    96be:	b2db      	uxtb	r3, r3
    96c0:	e006      	b.n	96d0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    96c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    96c4:	3301      	adds	r3, #1
    96c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    96c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    96ca:	2b07      	cmp	r3, #7
    96cc:	d9eb      	bls.n	96a6 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    96ce:	2300      	movs	r3, #0
}
    96d0:	4618      	mov	r0, r3
    96d2:	3734      	adds	r7, #52	; 0x34
    96d4:	46bd      	mov	sp, r7
    96d6:	bcb0      	pop	{r4, r5, r7}
    96d8:	4770      	bx	lr
    96da:	bf00      	nop
    96dc:	00013d18 	.word	0x00013d18

000096e0 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    96e0:	b480      	push	{r7}
    96e2:	b083      	sub	sp, #12
    96e4:	af00      	add	r7, sp, #0
    96e6:	6078      	str	r0, [r7, #4]
    96e8:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    96f0:	d102      	bne.n	96f8 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    96f2:	4a0b      	ldr	r2, [pc, #44]	; (9720 <_sercom_init_irq_param+0x40>)
    96f4:	683b      	ldr	r3, [r7, #0]
    96f6:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    96f8:	687b      	ldr	r3, [r7, #4]
    96fa:	4a0a      	ldr	r2, [pc, #40]	; (9724 <_sercom_init_irq_param+0x44>)
    96fc:	4293      	cmp	r3, r2
    96fe:	d102      	bne.n	9706 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    9700:	4a09      	ldr	r2, [pc, #36]	; (9728 <_sercom_init_irq_param+0x48>)
    9702:	683b      	ldr	r3, [r7, #0]
    9704:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    9706:	687b      	ldr	r3, [r7, #4]
    9708:	4a08      	ldr	r2, [pc, #32]	; (972c <_sercom_init_irq_param+0x4c>)
    970a:	4293      	cmp	r3, r2
    970c:	d102      	bne.n	9714 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    970e:	4a08      	ldr	r2, [pc, #32]	; (9730 <_sercom_init_irq_param+0x50>)
    9710:	683b      	ldr	r3, [r7, #0]
    9712:	6013      	str	r3, [r2, #0]
	}
}
    9714:	bf00      	nop
    9716:	370c      	adds	r7, #12
    9718:	46bd      	mov	sp, r7
    971a:	f85d 7b04 	ldr.w	r7, [sp], #4
    971e:	4770      	bx	lr
    9720:	20001a38 	.word	0x20001a38
    9724:	43000400 	.word	0x43000400
    9728:	20001a3c 	.word	0x20001a3c
    972c:	43000c00 	.word	0x43000c00
    9730:	20001a40 	.word	0x20001a40

00009734 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    9734:	b580      	push	{r7, lr}
    9736:	b084      	sub	sp, #16
    9738:	af00      	add	r7, sp, #0
    973a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    973c:	6878      	ldr	r0, [r7, #4]
    973e:	4b13      	ldr	r3, [pc, #76]	; (978c <_get_i2cm_index+0x58>)
    9740:	4798      	blx	r3
    9742:	4603      	mov	r3, r0
    9744:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    9746:	2300      	movs	r3, #0
    9748:	73fb      	strb	r3, [r7, #15]
    974a:	e010      	b.n	976e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    974c:	7bfa      	ldrb	r2, [r7, #15]
    974e:	4910      	ldr	r1, [pc, #64]	; (9790 <_get_i2cm_index+0x5c>)
    9750:	4613      	mov	r3, r2
    9752:	005b      	lsls	r3, r3, #1
    9754:	4413      	add	r3, r2
    9756:	00db      	lsls	r3, r3, #3
    9758:	440b      	add	r3, r1
    975a:	781b      	ldrb	r3, [r3, #0]
    975c:	7bba      	ldrb	r2, [r7, #14]
    975e:	429a      	cmp	r2, r3
    9760:	d102      	bne.n	9768 <_get_i2cm_index+0x34>
			return i;
    9762:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9766:	e00d      	b.n	9784 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    9768:	7bfb      	ldrb	r3, [r7, #15]
    976a:	3301      	adds	r3, #1
    976c:	73fb      	strb	r3, [r7, #15]
    976e:	7bfb      	ldrb	r3, [r7, #15]
    9770:	2b02      	cmp	r3, #2
    9772:	d9eb      	bls.n	974c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    9774:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    9778:	4906      	ldr	r1, [pc, #24]	; (9794 <_get_i2cm_index+0x60>)
    977a:	2000      	movs	r0, #0
    977c:	4b06      	ldr	r3, [pc, #24]	; (9798 <_get_i2cm_index+0x64>)
    977e:	4798      	blx	r3
	return -1;
    9780:	f04f 33ff 	mov.w	r3, #4294967295
}
    9784:	4618      	mov	r0, r3
    9786:	3710      	adds	r7, #16
    9788:	46bd      	mov	sp, r7
    978a:	bd80      	pop	{r7, pc}
    978c:	00009685 	.word	0x00009685
    9790:	20000018 	.word	0x20000018
    9794:	00013cfc 	.word	0x00013cfc
    9798:	00006a41 	.word	0x00006a41

0000979c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    979c:	b580      	push	{r7, lr}
    979e:	b082      	sub	sp, #8
    97a0:	af00      	add	r7, sp, #0
    97a2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    97a4:	2103      	movs	r1, #3
    97a6:	6878      	ldr	r0, [r7, #4]
    97a8:	4b02      	ldr	r3, [pc, #8]	; (97b4 <_sercom_i2c_send_stop+0x18>)
    97aa:	4798      	blx	r3
}
    97ac:	bf00      	nop
    97ae:	3708      	adds	r7, #8
    97b0:	46bd      	mov	sp, r7
    97b2:	bd80      	pop	{r7, pc}
    97b4:	00009455 	.word	0x00009455

000097b8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    97b8:	b590      	push	{r4, r7, lr}
    97ba:	b087      	sub	sp, #28
    97bc:	af00      	add	r7, sp, #0
    97be:	60f8      	str	r0, [r7, #12]
    97c0:	60b9      	str	r1, [r7, #8]
    97c2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    97c4:	68f8      	ldr	r0, [r7, #12]
    97c6:	4b7d      	ldr	r3, [pc, #500]	; (99bc <_sercom_i2c_sync_analyse_flags+0x204>)
    97c8:	4798      	blx	r3
    97ca:	4603      	mov	r3, r0
    97cc:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    97ce:	68f8      	ldr	r0, [r7, #12]
    97d0:	4b7b      	ldr	r3, [pc, #492]	; (99c0 <_sercom_i2c_sync_analyse_flags+0x208>)
    97d2:	4798      	blx	r3
    97d4:	4603      	mov	r3, r0
    97d6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    97d8:	68bb      	ldr	r3, [r7, #8]
    97da:	f003 0301 	and.w	r3, r3, #1
    97de:	2b00      	cmp	r3, #0
    97e0:	f000 8095 	beq.w	990e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    97e4:	8a7b      	ldrh	r3, [r7, #18]
    97e6:	f003 0302 	and.w	r3, r3, #2
    97ea:	2b00      	cmp	r3, #0
    97ec:	d01d      	beq.n	982a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    97ee:	68f8      	ldr	r0, [r7, #12]
    97f0:	4b74      	ldr	r3, [pc, #464]	; (99c4 <_sercom_i2c_sync_analyse_flags+0x20c>)
    97f2:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	885b      	ldrh	r3, [r3, #2]
    97f8:	b29b      	uxth	r3, r3
    97fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    97fe:	b29a      	uxth	r2, r3
    9800:	687b      	ldr	r3, [r7, #4]
    9802:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    9804:	687b      	ldr	r3, [r7, #4]
    9806:	885b      	ldrh	r3, [r3, #2]
    9808:	b29b      	uxth	r3, r3
    980a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    980e:	b29a      	uxth	r2, r3
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    9814:	8a7b      	ldrh	r3, [r7, #18]
    9816:	f003 0301 	and.w	r3, r3, #1
    981a:	2b00      	cmp	r3, #0
    981c:	d002      	beq.n	9824 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    981e:	f06f 0304 	mvn.w	r3, #4
    9822:	e0c6      	b.n	99b2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    9824:	f06f 0303 	mvn.w	r3, #3
    9828:	e0c3      	b.n	99b2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    982a:	8a7b      	ldrh	r3, [r7, #18]
    982c:	f003 0304 	and.w	r3, r3, #4
    9830:	2b00      	cmp	r3, #0
    9832:	d01f      	beq.n	9874 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	685b      	ldr	r3, [r3, #4]
    9838:	2b00      	cmp	r3, #0
    983a:	dd07      	ble.n	984c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    983c:	687b      	ldr	r3, [r7, #4]
    983e:	885b      	ldrh	r3, [r3, #2]
    9840:	b29b      	uxth	r3, r3
    9842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9846:	b29a      	uxth	r2, r3
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    984c:	687b      	ldr	r3, [r7, #4]
    984e:	885b      	ldrh	r3, [r3, #2]
    9850:	b29b      	uxth	r3, r3
    9852:	b21b      	sxth	r3, r3
    9854:	2b00      	cmp	r3, #0
    9856:	da02      	bge.n	985e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    9858:	68f8      	ldr	r0, [r7, #12]
    985a:	4b5b      	ldr	r3, [pc, #364]	; (99c8 <_sercom_i2c_sync_analyse_flags+0x210>)
    985c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    985e:	687b      	ldr	r3, [r7, #4]
    9860:	885b      	ldrh	r3, [r3, #2]
    9862:	b29b      	uxth	r3, r3
    9864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9868:	b29a      	uxth	r2, r3
    986a:	687b      	ldr	r3, [r7, #4]
    986c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    986e:	f06f 0301 	mvn.w	r3, #1
    9872:	e09e      	b.n	99b2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    9874:	687b      	ldr	r3, [r7, #4]
    9876:	885b      	ldrh	r3, [r3, #2]
    9878:	b29b      	uxth	r3, r3
    987a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    987e:	2b00      	cmp	r3, #0
    9880:	d01c      	beq.n	98bc <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    9882:	687b      	ldr	r3, [r7, #4]
    9884:	881b      	ldrh	r3, [r3, #0]
    9886:	121b      	asrs	r3, r3, #8
    9888:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    988a:	f003 0406 	and.w	r4, r3, #6
    988e:	68f8      	ldr	r0, [r7, #12]
    9890:	4b4e      	ldr	r3, [pc, #312]	; (99cc <_sercom_i2c_sync_analyse_flags+0x214>)
    9892:	4798      	blx	r3
    9894:	4603      	mov	r3, r0
    9896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    989a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    989c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    98a0:	4619      	mov	r1, r3
    98a2:	68f8      	ldr	r0, [r7, #12]
    98a4:	4b4a      	ldr	r3, [pc, #296]	; (99d0 <_sercom_i2c_sync_analyse_flags+0x218>)
    98a6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	885b      	ldrh	r3, [r3, #2]
    98ac:	b29b      	uxth	r3, r3
    98ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    98b2:	b29a      	uxth	r2, r3
    98b4:	687b      	ldr	r3, [r7, #4]
    98b6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    98b8:	2300      	movs	r3, #0
    98ba:	e07a      	b.n	99b2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    98bc:	687b      	ldr	r3, [r7, #4]
    98be:	685b      	ldr	r3, [r3, #4]
    98c0:	2b00      	cmp	r3, #0
    98c2:	d111      	bne.n	98e8 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    98c4:	687b      	ldr	r3, [r7, #4]
    98c6:	885b      	ldrh	r3, [r3, #2]
    98c8:	b29b      	uxth	r3, r3
    98ca:	b21b      	sxth	r3, r3
    98cc:	2b00      	cmp	r3, #0
    98ce:	da02      	bge.n	98d6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    98d0:	68f8      	ldr	r0, [r7, #12]
    98d2:	4b3d      	ldr	r3, [pc, #244]	; (99c8 <_sercom_i2c_sync_analyse_flags+0x210>)
    98d4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    98d6:	687b      	ldr	r3, [r7, #4]
    98d8:	885b      	ldrh	r3, [r3, #2]
    98da:	b29b      	uxth	r3, r3
    98dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    98e0:	b29a      	uxth	r2, r3
    98e2:	687b      	ldr	r3, [r7, #4]
    98e4:	805a      	strh	r2, [r3, #2]
    98e6:	e010      	b.n	990a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    98e8:	687b      	ldr	r3, [r7, #4]
    98ea:	689b      	ldr	r3, [r3, #8]
    98ec:	781b      	ldrb	r3, [r3, #0]
    98ee:	4619      	mov	r1, r3
    98f0:	68f8      	ldr	r0, [r7, #12]
    98f2:	4b38      	ldr	r3, [pc, #224]	; (99d4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    98f4:	4798      	blx	r3
				msg->buffer++;
    98f6:	687b      	ldr	r3, [r7, #4]
    98f8:	689b      	ldr	r3, [r3, #8]
    98fa:	1c5a      	adds	r2, r3, #1
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	609a      	str	r2, [r3, #8]
				msg->len--;
    9900:	687b      	ldr	r3, [r7, #4]
    9902:	685b      	ldr	r3, [r3, #4]
    9904:	1e5a      	subs	r2, r3, #1
    9906:	687b      	ldr	r3, [r7, #4]
    9908:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    990a:	2300      	movs	r3, #0
    990c:	e051      	b.n	99b2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    990e:	68bb      	ldr	r3, [r7, #8]
    9910:	f003 0302 	and.w	r3, r3, #2
    9914:	2b00      	cmp	r3, #0
    9916:	d04b      	beq.n	99b0 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    9918:	687b      	ldr	r3, [r7, #4]
    991a:	685b      	ldr	r3, [r3, #4]
    991c:	2b00      	cmp	r3, #0
    991e:	d041      	beq.n	99a4 <_sercom_i2c_sync_analyse_flags+0x1ec>
    9920:	8a7b      	ldrh	r3, [r7, #18]
    9922:	f003 0304 	and.w	r3, r3, #4
    9926:	2b00      	cmp	r3, #0
    9928:	d13c      	bne.n	99a4 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    992a:	687b      	ldr	r3, [r7, #4]
    992c:	685b      	ldr	r3, [r3, #4]
    992e:	1e5a      	subs	r2, r3, #1
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	685b      	ldr	r3, [r3, #4]
    9938:	2b00      	cmp	r3, #0
    993a:	d102      	bne.n	9942 <_sercom_i2c_sync_analyse_flags+0x18a>
    993c:	697b      	ldr	r3, [r7, #20]
    993e:	2b00      	cmp	r3, #0
    9940:	d006      	beq.n	9950 <_sercom_i2c_sync_analyse_flags+0x198>
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	685b      	ldr	r3, [r3, #4]
    9946:	2b01      	cmp	r3, #1
    9948:	d105      	bne.n	9956 <_sercom_i2c_sync_analyse_flags+0x19e>
    994a:	697b      	ldr	r3, [r7, #20]
    994c:	2b00      	cmp	r3, #0
    994e:	d002      	beq.n	9956 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9950:	68f8      	ldr	r0, [r7, #12]
    9952:	4b21      	ldr	r3, [pc, #132]	; (99d8 <_sercom_i2c_sync_analyse_flags+0x220>)
    9954:	4798      	blx	r3
			}

			if (msg->len == 0) {
    9956:	687b      	ldr	r3, [r7, #4]
    9958:	685b      	ldr	r3, [r3, #4]
    995a:	2b00      	cmp	r3, #0
    995c:	d113      	bne.n	9986 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    995e:	687b      	ldr	r3, [r7, #4]
    9960:	885b      	ldrh	r3, [r3, #2]
    9962:	b29b      	uxth	r3, r3
    9964:	b21b      	sxth	r3, r3
    9966:	2b00      	cmp	r3, #0
    9968:	da05      	bge.n	9976 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    996a:	68f8      	ldr	r0, [r7, #12]
    996c:	4b1b      	ldr	r3, [pc, #108]	; (99dc <_sercom_i2c_sync_analyse_flags+0x224>)
    996e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    9970:	68f8      	ldr	r0, [r7, #12]
    9972:	4b15      	ldr	r3, [pc, #84]	; (99c8 <_sercom_i2c_sync_analyse_flags+0x210>)
    9974:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    9976:	687b      	ldr	r3, [r7, #4]
    9978:	885b      	ldrh	r3, [r3, #2]
    997a:	b29b      	uxth	r3, r3
    997c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9980:	b29a      	uxth	r2, r3
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    9986:	687b      	ldr	r3, [r7, #4]
    9988:	689c      	ldr	r4, [r3, #8]
    998a:	1c62      	adds	r2, r4, #1
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	609a      	str	r2, [r3, #8]
    9990:	68f8      	ldr	r0, [r7, #12]
    9992:	4b13      	ldr	r3, [pc, #76]	; (99e0 <_sercom_i2c_sync_analyse_flags+0x228>)
    9994:	4798      	blx	r3
    9996:	4603      	mov	r3, r0
    9998:	b2db      	uxtb	r3, r3
    999a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    999c:	68f8      	ldr	r0, [r7, #12]
    999e:	4b11      	ldr	r3, [pc, #68]	; (99e4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    99a0:	4798      	blx	r3
    99a2:	e005      	b.n	99b0 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    99a4:	68f8      	ldr	r0, [r7, #12]
    99a6:	4b0f      	ldr	r3, [pc, #60]	; (99e4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    99a8:	4798      	blx	r3
			return I2C_NACK;
    99aa:	f06f 0301 	mvn.w	r3, #1
    99ae:	e000      	b.n	99b2 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    99b0:	2300      	movs	r3, #0
}
    99b2:	4618      	mov	r0, r3
    99b4:	371c      	adds	r7, #28
    99b6:	46bd      	mov	sp, r7
    99b8:	bd90      	pop	{r4, r7, pc}
    99ba:	bf00      	nop
    99bc:	00009255 	.word	0x00009255
    99c0:	00009661 	.word	0x00009661
    99c4:	00009079 	.word	0x00009079
    99c8:	0000979d 	.word	0x0000979d
    99cc:	0000956d 	.word	0x0000956d
    99d0:	00009549 	.word	0x00009549
    99d4:	000095a9 	.word	0x000095a9
    99d8:	00009405 	.word	0x00009405
    99dc:	000093dd 	.word	0x000093dd
    99e0:	000095cd 	.word	0x000095cd
    99e4:	00009093 	.word	0x00009093

000099e8 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    99e8:	b580      	push	{r7, lr}
    99ea:	b086      	sub	sp, #24
    99ec:	af00      	add	r7, sp, #0
    99ee:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	691b      	ldr	r3, [r3, #16]
    99f4:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    99f6:	6938      	ldr	r0, [r7, #16]
    99f8:	4b37      	ldr	r3, [pc, #220]	; (9ad8 <_sercom_i2c_m_irq_handler+0xf0>)
    99fa:	4798      	blx	r3
    99fc:	4603      	mov	r3, r0
    99fe:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    9a00:	2300      	movs	r3, #0
    9a02:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    9a04:	687b      	ldr	r3, [r7, #4]
    9a06:	2b00      	cmp	r3, #0
    9a08:	bf14      	ite	ne
    9a0a:	2301      	movne	r3, #1
    9a0c:	2300      	moveq	r3, #0
    9a0e:	b2db      	uxtb	r3, r3
    9a10:	f240 422a 	movw	r2, #1066	; 0x42a
    9a14:	4931      	ldr	r1, [pc, #196]	; (9adc <_sercom_i2c_m_irq_handler+0xf4>)
    9a16:	4618      	mov	r0, r3
    9a18:	4b31      	ldr	r3, [pc, #196]	; (9ae0 <_sercom_i2c_m_irq_handler+0xf8>)
    9a1a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9a1c:	687b      	ldr	r3, [r7, #4]
    9a1e:	691b      	ldr	r3, [r3, #16]
    9a20:	2b00      	cmp	r3, #0
    9a22:	bf14      	ite	ne
    9a24:	2301      	movne	r3, #1
    9a26:	2300      	moveq	r3, #0
    9a28:	b2db      	uxtb	r3, r3
    9a2a:	f240 422b 	movw	r2, #1067	; 0x42b
    9a2e:	492b      	ldr	r1, [pc, #172]	; (9adc <_sercom_i2c_m_irq_handler+0xf4>)
    9a30:	4618      	mov	r0, r3
    9a32:	4b2b      	ldr	r3, [pc, #172]	; (9ae0 <_sercom_i2c_m_irq_handler+0xf8>)
    9a34:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    9a36:	bf00      	nop
    9a38:	68fb      	ldr	r3, [r7, #12]
    9a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9a3e:	2b00      	cmp	r3, #0
    9a40:	d126      	bne.n	9a90 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    9a42:	687b      	ldr	r3, [r7, #4]
    9a44:	461a      	mov	r2, r3
    9a46:	68f9      	ldr	r1, [r7, #12]
    9a48:	6938      	ldr	r0, [r7, #16]
    9a4a:	4b26      	ldr	r3, [pc, #152]	; (9ae4 <_sercom_i2c_m_irq_handler+0xfc>)
    9a4c:	4798      	blx	r3
    9a4e:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    9a50:	697b      	ldr	r3, [r7, #20]
    9a52:	2b00      	cmp	r3, #0
    9a54:	d11b      	bne.n	9a8e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    9a56:	68fb      	ldr	r3, [r7, #12]
    9a58:	f003 0301 	and.w	r3, r3, #1
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	d008      	beq.n	9a72 <_sercom_i2c_m_irq_handler+0x8a>
    9a60:	687b      	ldr	r3, [r7, #4]
    9a62:	699b      	ldr	r3, [r3, #24]
    9a64:	2b00      	cmp	r3, #0
    9a66:	d004      	beq.n	9a72 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    9a68:	687b      	ldr	r3, [r7, #4]
    9a6a:	699b      	ldr	r3, [r3, #24]
    9a6c:	6878      	ldr	r0, [r7, #4]
    9a6e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    9a70:	e02e      	b.n	9ad0 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    9a72:	68fb      	ldr	r3, [r7, #12]
    9a74:	f003 0302 	and.w	r3, r3, #2
    9a78:	2b00      	cmp	r3, #0
    9a7a:	d029      	beq.n	9ad0 <_sercom_i2c_m_irq_handler+0xe8>
    9a7c:	687b      	ldr	r3, [r7, #4]
    9a7e:	69db      	ldr	r3, [r3, #28]
    9a80:	2b00      	cmp	r3, #0
    9a82:	d025      	beq.n	9ad0 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    9a84:	687b      	ldr	r3, [r7, #4]
    9a86:	69db      	ldr	r3, [r3, #28]
    9a88:	6878      	ldr	r0, [r7, #4]
    9a8a:	4798      	blx	r3
		return;
    9a8c:	e020      	b.n	9ad0 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    9a8e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	885b      	ldrh	r3, [r3, #2]
    9a94:	b29b      	uxth	r3, r3
    9a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9a9a:	b29a      	uxth	r2, r3
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    9aa0:	687b      	ldr	r3, [r7, #4]
    9aa2:	695b      	ldr	r3, [r3, #20]
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	d014      	beq.n	9ad2 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    9aa8:	697b      	ldr	r3, [r7, #20]
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d005      	beq.n	9aba <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	695b      	ldr	r3, [r3, #20]
    9ab2:	6979      	ldr	r1, [r7, #20]
    9ab4:	6878      	ldr	r0, [r7, #4]
    9ab6:	4798      	blx	r3
    9ab8:	e005      	b.n	9ac6 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    9aba:	687b      	ldr	r3, [r7, #4]
    9abc:	695b      	ldr	r3, [r3, #20]
    9abe:	f06f 0104 	mvn.w	r1, #4
    9ac2:	6878      	ldr	r0, [r7, #4]
    9ac4:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    9ac6:	2180      	movs	r1, #128	; 0x80
    9ac8:	6938      	ldr	r0, [r7, #16]
    9aca:	4b07      	ldr	r3, [pc, #28]	; (9ae8 <_sercom_i2c_m_irq_handler+0x100>)
    9acc:	4798      	blx	r3
    9ace:	e000      	b.n	9ad2 <_sercom_i2c_m_irq_handler+0xea>
		return;
    9ad0:	bf00      	nop
	}
}
    9ad2:	3718      	adds	r7, #24
    9ad4:	46bd      	mov	sp, r7
    9ad6:	bd80      	pop	{r7, pc}
    9ad8:	000090ad 	.word	0x000090ad
    9adc:	00013cfc 	.word	0x00013cfc
    9ae0:	00006a41 	.word	0x00006a41
    9ae4:	000097b9 	.word	0x000097b9
    9ae8:	000090c7 	.word	0x000090c7

00009aec <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    9aec:	b580      	push	{r7, lr}
    9aee:	b082      	sub	sp, #8
    9af0:	af00      	add	r7, sp, #0
    9af2:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    9af4:	6878      	ldr	r0, [r7, #4]
    9af6:	4b05      	ldr	r3, [pc, #20]	; (9b0c <_sercom_get_irq_num+0x20>)
    9af8:	4798      	blx	r3
    9afa:	4603      	mov	r3, r0
    9afc:	009b      	lsls	r3, r3, #2
    9afe:	b2db      	uxtb	r3, r3
    9b00:	332e      	adds	r3, #46	; 0x2e
    9b02:	b2db      	uxtb	r3, r3
}
    9b04:	4618      	mov	r0, r3
    9b06:	3708      	adds	r7, #8
    9b08:	46bd      	mov	sp, r7
    9b0a:	bd80      	pop	{r7, pc}
    9b0c:	00009685 	.word	0x00009685

00009b10 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    9b10:	b580      	push	{r7, lr}
    9b12:	b086      	sub	sp, #24
    9b14:	af00      	add	r7, sp, #0
    9b16:	6078      	str	r0, [r7, #4]
    9b18:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    9b1a:	687b      	ldr	r3, [r7, #4]
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	bf14      	ite	ne
    9b20:	2301      	movne	r3, #1
    9b22:	2300      	moveq	r3, #0
    9b24:	b2db      	uxtb	r3, r3
    9b26:	f240 429e 	movw	r2, #1182	; 0x49e
    9b2a:	491d      	ldr	r1, [pc, #116]	; (9ba0 <_i2c_m_async_init+0x90>)
    9b2c:	4618      	mov	r0, r3
    9b2e:	4b1d      	ldr	r3, [pc, #116]	; (9ba4 <_i2c_m_async_init+0x94>)
    9b30:	4798      	blx	r3

	i2c_dev->hw = hw;
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	683a      	ldr	r2, [r7, #0]
    9b36:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	6839      	ldr	r1, [r7, #0]
    9b3c:	4618      	mov	r0, r3
    9b3e:	4b1a      	ldr	r3, [pc, #104]	; (9ba8 <_i2c_m_async_init+0x98>)
    9b40:	4798      	blx	r3
    9b42:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    9b44:	68fb      	ldr	r3, [r7, #12]
    9b46:	2b00      	cmp	r3, #0
    9b48:	d001      	beq.n	9b4e <_i2c_m_async_init+0x3e>
		return init_status;
    9b4a:	68fb      	ldr	r3, [r7, #12]
    9b4c:	e024      	b.n	9b98 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    9b4e:	6879      	ldr	r1, [r7, #4]
    9b50:	6838      	ldr	r0, [r7, #0]
    9b52:	4b16      	ldr	r3, [pc, #88]	; (9bac <_i2c_m_async_init+0x9c>)
    9b54:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    9b56:	6838      	ldr	r0, [r7, #0]
    9b58:	4b15      	ldr	r3, [pc, #84]	; (9bb0 <_i2c_m_async_init+0xa0>)
    9b5a:	4798      	blx	r3
    9b5c:	4603      	mov	r3, r0
    9b5e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9b60:	2300      	movs	r3, #0
    9b62:	613b      	str	r3, [r7, #16]
    9b64:	e014      	b.n	9b90 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    9b66:	7dfb      	ldrb	r3, [r7, #23]
    9b68:	b21b      	sxth	r3, r3
    9b6a:	4618      	mov	r0, r3
    9b6c:	4b11      	ldr	r3, [pc, #68]	; (9bb4 <_i2c_m_async_init+0xa4>)
    9b6e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    9b70:	7dfb      	ldrb	r3, [r7, #23]
    9b72:	b21b      	sxth	r3, r3
    9b74:	4618      	mov	r0, r3
    9b76:	4b10      	ldr	r3, [pc, #64]	; (9bb8 <_i2c_m_async_init+0xa8>)
    9b78:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    9b7a:	7dfb      	ldrb	r3, [r7, #23]
    9b7c:	b21b      	sxth	r3, r3
    9b7e:	4618      	mov	r0, r3
    9b80:	4b0e      	ldr	r3, [pc, #56]	; (9bbc <_i2c_m_async_init+0xac>)
    9b82:	4798      	blx	r3
		irq++;
    9b84:	7dfb      	ldrb	r3, [r7, #23]
    9b86:	3301      	adds	r3, #1
    9b88:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9b8a:	693b      	ldr	r3, [r7, #16]
    9b8c:	3301      	adds	r3, #1
    9b8e:	613b      	str	r3, [r7, #16]
    9b90:	693b      	ldr	r3, [r7, #16]
    9b92:	2b03      	cmp	r3, #3
    9b94:	d9e7      	bls.n	9b66 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    9b96:	2300      	movs	r3, #0
}
    9b98:	4618      	mov	r0, r3
    9b9a:	3718      	adds	r7, #24
    9b9c:	46bd      	mov	sp, r7
    9b9e:	bd80      	pop	{r7, pc}
    9ba0:	00013cfc 	.word	0x00013cfc
    9ba4:	00006a41 	.word	0x00006a41
    9ba8:	0000a0c9 	.word	0x0000a0c9
    9bac:	000096e1 	.word	0x000096e1
    9bb0:	00009aed 	.word	0x00009aed
    9bb4:	00008f61 	.word	0x00008f61
    9bb8:	00008fa5 	.word	0x00008fa5
    9bbc:	00008f25 	.word	0x00008f25

00009bc0 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    9bc0:	b590      	push	{r4, r7, lr}
    9bc2:	b087      	sub	sp, #28
    9bc4:	af00      	add	r7, sp, #0
    9bc6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	691b      	ldr	r3, [r3, #16]
    9bcc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9bd2:	6978      	ldr	r0, [r7, #20]
    9bd4:	4b33      	ldr	r3, [pc, #204]	; (9ca4 <_sercom_i2c_send_address+0xe4>)
    9bd6:	4798      	blx	r3
    9bd8:	4603      	mov	r3, r0
    9bda:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    9bdc:	687b      	ldr	r3, [r7, #4]
    9bde:	2b00      	cmp	r3, #0
    9be0:	bf14      	ite	ne
    9be2:	2301      	movne	r3, #1
    9be4:	2300      	moveq	r3, #0
    9be6:	b2db      	uxtb	r3, r3
    9be8:	f240 42cc 	movw	r2, #1228	; 0x4cc
    9bec:	492e      	ldr	r1, [pc, #184]	; (9ca8 <_sercom_i2c_send_address+0xe8>)
    9bee:	4618      	mov	r0, r3
    9bf0:	4b2e      	ldr	r3, [pc, #184]	; (9cac <_sercom_i2c_send_address+0xec>)
    9bf2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9bf4:	693b      	ldr	r3, [r7, #16]
    9bf6:	685b      	ldr	r3, [r3, #4]
    9bf8:	2b01      	cmp	r3, #1
    9bfa:	d106      	bne.n	9c0a <_sercom_i2c_send_address+0x4a>
    9bfc:	68fb      	ldr	r3, [r7, #12]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d003      	beq.n	9c0a <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9c02:	6978      	ldr	r0, [r7, #20]
    9c04:	4b2a      	ldr	r3, [pc, #168]	; (9cb0 <_sercom_i2c_send_address+0xf0>)
    9c06:	4798      	blx	r3
    9c08:	e002      	b.n	9c10 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9c0a:	6978      	ldr	r0, [r7, #20]
    9c0c:	4b29      	ldr	r3, [pc, #164]	; (9cb4 <_sercom_i2c_send_address+0xf4>)
    9c0e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    9c10:	693b      	ldr	r3, [r7, #16]
    9c12:	881b      	ldrh	r3, [r3, #0]
    9c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d022      	beq.n	9c62 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    9c1c:	693b      	ldr	r3, [r7, #16]
    9c1e:	885b      	ldrh	r3, [r3, #2]
    9c20:	b29b      	uxth	r3, r3
    9c22:	f003 0301 	and.w	r3, r3, #1
    9c26:	2b00      	cmp	r3, #0
    9c28:	d007      	beq.n	9c3a <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    9c2a:	693b      	ldr	r3, [r7, #16]
    9c2c:	885b      	ldrh	r3, [r3, #2]
    9c2e:	b29b      	uxth	r3, r3
    9c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9c34:	b29a      	uxth	r2, r3
    9c36:	693b      	ldr	r3, [r7, #16]
    9c38:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    9c3a:	693b      	ldr	r3, [r7, #16]
    9c3c:	881b      	ldrh	r3, [r3, #0]
    9c3e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9c40:	f240 74fe 	movw	r4, #2046	; 0x7fe
    9c44:	401c      	ands	r4, r3
    9c46:	6978      	ldr	r0, [r7, #20]
    9c48:	4b1b      	ldr	r3, [pc, #108]	; (9cb8 <_sercom_i2c_send_address+0xf8>)
    9c4a:	4798      	blx	r3
    9c4c:	4603      	mov	r3, r0
    9c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9c52:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9c58:	4619      	mov	r1, r3
    9c5a:	6978      	ldr	r0, [r7, #20]
    9c5c:	4b17      	ldr	r3, [pc, #92]	; (9cbc <_sercom_i2c_send_address+0xfc>)
    9c5e:	4798      	blx	r3
    9c60:	e01a      	b.n	9c98 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    9c62:	693b      	ldr	r3, [r7, #16]
    9c64:	881b      	ldrh	r3, [r3, #0]
    9c66:	005b      	lsls	r3, r3, #1
    9c68:	b2db      	uxtb	r3, r3
    9c6a:	693a      	ldr	r2, [r7, #16]
    9c6c:	8852      	ldrh	r2, [r2, #2]
    9c6e:	b292      	uxth	r2, r2
    9c70:	f002 0201 	and.w	r2, r2, #1
    9c74:	2a00      	cmp	r2, #0
    9c76:	bf14      	ite	ne
    9c78:	2201      	movne	r2, #1
    9c7a:	2200      	moveq	r2, #0
    9c7c:	b2d2      	uxtb	r2, r2
    9c7e:	4313      	orrs	r3, r2
    9c80:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9c82:	6978      	ldr	r0, [r7, #20]
    9c84:	4b0c      	ldr	r3, [pc, #48]	; (9cb8 <_sercom_i2c_send_address+0xf8>)
    9c86:	4798      	blx	r3
    9c88:	4603      	mov	r3, r0
    9c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    9c8e:	4323      	orrs	r3, r4
    9c90:	4619      	mov	r1, r3
    9c92:	6978      	ldr	r0, [r7, #20]
    9c94:	4b09      	ldr	r3, [pc, #36]	; (9cbc <_sercom_i2c_send_address+0xfc>)
    9c96:	4798      	blx	r3
	}

	return ERR_NONE;
    9c98:	2300      	movs	r3, #0
}
    9c9a:	4618      	mov	r0, r3
    9c9c:	371c      	adds	r7, #28
    9c9e:	46bd      	mov	sp, r7
    9ca0:	bd90      	pop	{r4, r7, pc}
    9ca2:	bf00      	nop
    9ca4:	00009255 	.word	0x00009255
    9ca8:	00013cfc 	.word	0x00013cfc
    9cac:	00006a41 	.word	0x00006a41
    9cb0:	00009405 	.word	0x00009405
    9cb4:	0000942d 	.word	0x0000942d
    9cb8:	0000956d 	.word	0x0000956d
    9cbc:	00009549 	.word	0x00009549

00009cc0 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    9cc0:	b580      	push	{r7, lr}
    9cc2:	b084      	sub	sp, #16
    9cc4:	af00      	add	r7, sp, #0
    9cc6:	6078      	str	r0, [r7, #4]
    9cc8:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    9cca:	687b      	ldr	r3, [r7, #4]
    9ccc:	2b00      	cmp	r3, #0
    9cce:	bf14      	ite	ne
    9cd0:	2301      	movne	r3, #1
    9cd2:	2300      	moveq	r3, #0
    9cd4:	b2db      	uxtb	r3, r3
    9cd6:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9cda:	492a      	ldr	r1, [pc, #168]	; (9d84 <_i2c_m_async_transfer+0xc4>)
    9cdc:	4618      	mov	r0, r3
    9cde:	4b2a      	ldr	r3, [pc, #168]	; (9d88 <_i2c_m_async_transfer+0xc8>)
    9ce0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9ce2:	687b      	ldr	r3, [r7, #4]
    9ce4:	691b      	ldr	r3, [r3, #16]
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	bf14      	ite	ne
    9cea:	2301      	movne	r3, #1
    9cec:	2300      	moveq	r3, #0
    9cee:	b2db      	uxtb	r3, r3
    9cf0:	f240 42f5 	movw	r2, #1269	; 0x4f5
    9cf4:	4923      	ldr	r1, [pc, #140]	; (9d84 <_i2c_m_async_transfer+0xc4>)
    9cf6:	4618      	mov	r0, r3
    9cf8:	4b23      	ldr	r3, [pc, #140]	; (9d88 <_i2c_m_async_transfer+0xc8>)
    9cfa:	4798      	blx	r3
	ASSERT(msg);
    9cfc:	683b      	ldr	r3, [r7, #0]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	bf14      	ite	ne
    9d02:	2301      	movne	r3, #1
    9d04:	2300      	moveq	r3, #0
    9d06:	b2db      	uxtb	r3, r3
    9d08:	f240 42f6 	movw	r2, #1270	; 0x4f6
    9d0c:	491d      	ldr	r1, [pc, #116]	; (9d84 <_i2c_m_async_transfer+0xc4>)
    9d0e:	4618      	mov	r0, r3
    9d10:	4b1d      	ldr	r3, [pc, #116]	; (9d88 <_i2c_m_async_transfer+0xc8>)
    9d12:	4798      	blx	r3

	if (msg->len == 0) {
    9d14:	683b      	ldr	r3, [r7, #0]
    9d16:	685b      	ldr	r3, [r3, #4]
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d101      	bne.n	9d20 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    9d1c:	2300      	movs	r3, #0
    9d1e:	e02d      	b.n	9d7c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	885b      	ldrh	r3, [r3, #2]
    9d24:	b29b      	uxth	r3, r3
    9d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9d2a:	2b00      	cmp	r3, #0
    9d2c:	d002      	beq.n	9d34 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    9d2e:	f06f 0303 	mvn.w	r3, #3
    9d32:	e023      	b.n	9d7c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    9d34:	683b      	ldr	r3, [r7, #0]
    9d36:	885b      	ldrh	r3, [r3, #2]
    9d38:	b29b      	uxth	r3, r3
    9d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9d3e:	b29a      	uxth	r2, r3
    9d40:	683b      	ldr	r3, [r7, #0]
    9d42:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    9d44:	687b      	ldr	r3, [r7, #4]
    9d46:	683a      	ldr	r2, [r7, #0]
    9d48:	ca07      	ldmia	r2, {r0, r1, r2}
    9d4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    9d4e:	687b      	ldr	r3, [r7, #4]
    9d50:	691b      	ldr	r3, [r3, #16]
    9d52:	4618      	mov	r0, r3
    9d54:	4b0d      	ldr	r3, [pc, #52]	; (9d8c <_i2c_m_async_transfer+0xcc>)
    9d56:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    9d58:	6878      	ldr	r0, [r7, #4]
    9d5a:	4b0d      	ldr	r3, [pc, #52]	; (9d90 <_i2c_m_async_transfer+0xd0>)
    9d5c:	4798      	blx	r3
    9d5e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    9d60:	68fb      	ldr	r3, [r7, #12]
    9d62:	2b00      	cmp	r3, #0
    9d64:	d009      	beq.n	9d7a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	885b      	ldrh	r3, [r3, #2]
    9d6a:	b29b      	uxth	r3, r3
    9d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9d70:	b29a      	uxth	r2, r3
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	805a      	strh	r2, [r3, #2]

		return ret;
    9d76:	68fb      	ldr	r3, [r7, #12]
    9d78:	e000      	b.n	9d7c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    9d7a:	2300      	movs	r3, #0
}
    9d7c:	4618      	mov	r0, r3
    9d7e:	3710      	adds	r7, #16
    9d80:	46bd      	mov	sp, r7
    9d82:	bd80      	pop	{r7, pc}
    9d84:	00013cfc 	.word	0x00013cfc
    9d88:	00006a41 	.word	0x00006a41
    9d8c:	000093b5 	.word	0x000093b5
    9d90:	00009bc1 	.word	0x00009bc1

00009d94 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    9d94:	b480      	push	{r7}
    9d96:	b085      	sub	sp, #20
    9d98:	af00      	add	r7, sp, #0
    9d9a:	60f8      	str	r0, [r7, #12]
    9d9c:	460b      	mov	r3, r1
    9d9e:	607a      	str	r2, [r7, #4]
    9da0:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    9da2:	7afb      	ldrb	r3, [r7, #11]
    9da4:	2b01      	cmp	r3, #1
    9da6:	d008      	beq.n	9dba <_i2c_m_async_register_callback+0x26>
    9da8:	2b02      	cmp	r3, #2
    9daa:	d00a      	beq.n	9dc2 <_i2c_m_async_register_callback+0x2e>
    9dac:	2b00      	cmp	r3, #0
    9dae:	d000      	beq.n	9db2 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    9db0:	e00b      	b.n	9dca <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    9db2:	68fb      	ldr	r3, [r7, #12]
    9db4:	687a      	ldr	r2, [r7, #4]
    9db6:	615a      	str	r2, [r3, #20]
		break;
    9db8:	e007      	b.n	9dca <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    9dba:	68fb      	ldr	r3, [r7, #12]
    9dbc:	687a      	ldr	r2, [r7, #4]
    9dbe:	619a      	str	r2, [r3, #24]
		break;
    9dc0:	e003      	b.n	9dca <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    9dc2:	68fb      	ldr	r3, [r7, #12]
    9dc4:	687a      	ldr	r2, [r7, #4]
    9dc6:	61da      	str	r2, [r3, #28]
		break;
    9dc8:	bf00      	nop
	}

	return ERR_NONE;
    9dca:	2300      	movs	r3, #0
}
    9dcc:	4618      	mov	r0, r3
    9dce:	3714      	adds	r7, #20
    9dd0:	46bd      	mov	sp, r7
    9dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd6:	4770      	bx	lr

00009dd8 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    9dd8:	b580      	push	{r7, lr}
    9dda:	b082      	sub	sp, #8
    9ddc:	af00      	add	r7, sp, #0
    9dde:	6078      	str	r0, [r7, #4]
    9de0:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    9de2:	687b      	ldr	r3, [r7, #4]
    9de4:	2b00      	cmp	r3, #0
    9de6:	bf14      	ite	ne
    9de8:	2301      	movne	r3, #1
    9dea:	2300      	moveq	r3, #0
    9dec:	b2db      	uxtb	r3, r3
    9dee:	f240 5254 	movw	r2, #1364	; 0x554
    9df2:	4908      	ldr	r1, [pc, #32]	; (9e14 <_i2c_m_sync_init+0x3c>)
    9df4:	4618      	mov	r0, r3
    9df6:	4b08      	ldr	r3, [pc, #32]	; (9e18 <_i2c_m_sync_init+0x40>)
    9df8:	4798      	blx	r3

	i2c_dev->hw = hw;
    9dfa:	687b      	ldr	r3, [r7, #4]
    9dfc:	683a      	ldr	r2, [r7, #0]
    9dfe:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	6839      	ldr	r1, [r7, #0]
    9e04:	4618      	mov	r0, r3
    9e06:	4b05      	ldr	r3, [pc, #20]	; (9e1c <_i2c_m_sync_init+0x44>)
    9e08:	4798      	blx	r3
    9e0a:	4603      	mov	r3, r0
}
    9e0c:	4618      	mov	r0, r3
    9e0e:	3708      	adds	r7, #8
    9e10:	46bd      	mov	sp, r7
    9e12:	bd80      	pop	{r7, pc}
    9e14:	00013cfc 	.word	0x00013cfc
    9e18:	00006a41 	.word	0x00006a41
    9e1c:	0000a0c9 	.word	0x0000a0c9

00009e20 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    9e20:	b580      	push	{r7, lr}
    9e22:	b084      	sub	sp, #16
    9e24:	af00      	add	r7, sp, #0
    9e26:	6078      	str	r0, [r7, #4]
    9e28:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    9e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9e2e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    9e30:	687b      	ldr	r3, [r7, #4]
    9e32:	691b      	ldr	r3, [r3, #16]
    9e34:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    9e36:	68b8      	ldr	r0, [r7, #8]
    9e38:	4b0f      	ldr	r3, [pc, #60]	; (9e78 <_sercom_i2c_sync_wait_bus+0x58>)
    9e3a:	4798      	blx	r3
    9e3c:	4603      	mov	r3, r0
    9e3e:	461a      	mov	r2, r3
    9e40:	683b      	ldr	r3, [r7, #0]
    9e42:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    9e44:	68fb      	ldr	r3, [r7, #12]
    9e46:	1e5a      	subs	r2, r3, #1
    9e48:	60fa      	str	r2, [r7, #12]
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	d102      	bne.n	9e54 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    9e4e:	f06f 0304 	mvn.w	r3, #4
    9e52:	e00c      	b.n	9e6e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    9e54:	683b      	ldr	r3, [r7, #0]
    9e56:	681b      	ldr	r3, [r3, #0]
    9e58:	f003 0301 	and.w	r3, r3, #1
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d105      	bne.n	9e6c <_sercom_i2c_sync_wait_bus+0x4c>
    9e60:	683b      	ldr	r3, [r7, #0]
    9e62:	681b      	ldr	r3, [r3, #0]
    9e64:	f003 0302 	and.w	r3, r3, #2
    9e68:	2b00      	cmp	r3, #0
    9e6a:	d0e4      	beq.n	9e36 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    9e6c:	2300      	movs	r3, #0
}
    9e6e:	4618      	mov	r0, r3
    9e70:	3710      	adds	r7, #16
    9e72:	46bd      	mov	sp, r7
    9e74:	bd80      	pop	{r7, pc}
    9e76:	bf00      	nop
    9e78:	000090ad 	.word	0x000090ad

00009e7c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    9e7c:	b590      	push	{r4, r7, lr}
    9e7e:	b087      	sub	sp, #28
    9e80:	af00      	add	r7, sp, #0
    9e82:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9e84:	687b      	ldr	r3, [r7, #4]
    9e86:	691b      	ldr	r3, [r3, #16]
    9e88:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    9e8e:	6978      	ldr	r0, [r7, #20]
    9e90:	4b39      	ldr	r3, [pc, #228]	; (9f78 <_sercom_i2c_sync_send_address+0xfc>)
    9e92:	4798      	blx	r3
    9e94:	4603      	mov	r3, r0
    9e96:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    9e98:	687b      	ldr	r3, [r7, #4]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	bf14      	ite	ne
    9e9e:	2301      	movne	r3, #1
    9ea0:	2300      	moveq	r3, #0
    9ea2:	b2db      	uxtb	r3, r3
    9ea4:	f240 52e1 	movw	r2, #1505	; 0x5e1
    9ea8:	4934      	ldr	r1, [pc, #208]	; (9f7c <_sercom_i2c_sync_send_address+0x100>)
    9eaa:	4618      	mov	r0, r3
    9eac:	4b34      	ldr	r3, [pc, #208]	; (9f80 <_sercom_i2c_sync_send_address+0x104>)
    9eae:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9eb0:	693b      	ldr	r3, [r7, #16]
    9eb2:	685b      	ldr	r3, [r3, #4]
    9eb4:	2b01      	cmp	r3, #1
    9eb6:	d106      	bne.n	9ec6 <_sercom_i2c_sync_send_address+0x4a>
    9eb8:	68fb      	ldr	r3, [r7, #12]
    9eba:	2b00      	cmp	r3, #0
    9ebc:	d003      	beq.n	9ec6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    9ebe:	6978      	ldr	r0, [r7, #20]
    9ec0:	4b30      	ldr	r3, [pc, #192]	; (9f84 <_sercom_i2c_sync_send_address+0x108>)
    9ec2:	4798      	blx	r3
    9ec4:	e002      	b.n	9ecc <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9ec6:	6978      	ldr	r0, [r7, #20]
    9ec8:	4b2f      	ldr	r3, [pc, #188]	; (9f88 <_sercom_i2c_sync_send_address+0x10c>)
    9eca:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    9ecc:	693b      	ldr	r3, [r7, #16]
    9ece:	881b      	ldrh	r3, [r3, #0]
    9ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d022      	beq.n	9f1e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    9ed8:	693b      	ldr	r3, [r7, #16]
    9eda:	885b      	ldrh	r3, [r3, #2]
    9edc:	b29b      	uxth	r3, r3
    9ede:	f003 0301 	and.w	r3, r3, #1
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	d007      	beq.n	9ef6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    9ee6:	693b      	ldr	r3, [r7, #16]
    9ee8:	885b      	ldrh	r3, [r3, #2]
    9eea:	b29b      	uxth	r3, r3
    9eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9ef0:	b29a      	uxth	r2, r3
    9ef2:	693b      	ldr	r3, [r7, #16]
    9ef4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    9ef6:	693b      	ldr	r3, [r7, #16]
    9ef8:	881b      	ldrh	r3, [r3, #0]
    9efa:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9efc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    9f00:	401c      	ands	r4, r3
    9f02:	6978      	ldr	r0, [r7, #20]
    9f04:	4b21      	ldr	r3, [pc, #132]	; (9f8c <_sercom_i2c_sync_send_address+0x110>)
    9f06:	4798      	blx	r3
    9f08:	4603      	mov	r3, r0
    9f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9f0e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9f14:	4619      	mov	r1, r3
    9f16:	6978      	ldr	r0, [r7, #20]
    9f18:	4b1d      	ldr	r3, [pc, #116]	; (9f90 <_sercom_i2c_sync_send_address+0x114>)
    9f1a:	4798      	blx	r3
    9f1c:	e01a      	b.n	9f54 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    9f1e:	693b      	ldr	r3, [r7, #16]
    9f20:	881b      	ldrh	r3, [r3, #0]
    9f22:	005b      	lsls	r3, r3, #1
    9f24:	b2db      	uxtb	r3, r3
    9f26:	693a      	ldr	r2, [r7, #16]
    9f28:	8852      	ldrh	r2, [r2, #2]
    9f2a:	b292      	uxth	r2, r2
    9f2c:	f002 0201 	and.w	r2, r2, #1
    9f30:	2a00      	cmp	r2, #0
    9f32:	bf14      	ite	ne
    9f34:	2201      	movne	r2, #1
    9f36:	2200      	moveq	r2, #0
    9f38:	b2d2      	uxtb	r2, r2
    9f3a:	4313      	orrs	r3, r2
    9f3c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    9f3e:	6978      	ldr	r0, [r7, #20]
    9f40:	4b12      	ldr	r3, [pc, #72]	; (9f8c <_sercom_i2c_sync_send_address+0x110>)
    9f42:	4798      	blx	r3
    9f44:	4603      	mov	r3, r0
    9f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    9f4a:	4323      	orrs	r3, r4
    9f4c:	4619      	mov	r1, r3
    9f4e:	6978      	ldr	r0, [r7, #20]
    9f50:	4b0f      	ldr	r3, [pc, #60]	; (9f90 <_sercom_i2c_sync_send_address+0x114>)
    9f52:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    9f54:	f107 0308 	add.w	r3, r7, #8
    9f58:	4619      	mov	r1, r3
    9f5a:	6878      	ldr	r0, [r7, #4]
    9f5c:	4b0d      	ldr	r3, [pc, #52]	; (9f94 <_sercom_i2c_sync_send_address+0x118>)
    9f5e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    9f60:	68bb      	ldr	r3, [r7, #8]
    9f62:	693a      	ldr	r2, [r7, #16]
    9f64:	4619      	mov	r1, r3
    9f66:	6978      	ldr	r0, [r7, #20]
    9f68:	4b0b      	ldr	r3, [pc, #44]	; (9f98 <_sercom_i2c_sync_send_address+0x11c>)
    9f6a:	4798      	blx	r3
    9f6c:	4603      	mov	r3, r0
}
    9f6e:	4618      	mov	r0, r3
    9f70:	371c      	adds	r7, #28
    9f72:	46bd      	mov	sp, r7
    9f74:	bd90      	pop	{r4, r7, pc}
    9f76:	bf00      	nop
    9f78:	00009255 	.word	0x00009255
    9f7c:	00013cfc 	.word	0x00013cfc
    9f80:	00006a41 	.word	0x00006a41
    9f84:	00009405 	.word	0x00009405
    9f88:	0000942d 	.word	0x0000942d
    9f8c:	0000956d 	.word	0x0000956d
    9f90:	00009549 	.word	0x00009549
    9f94:	00009e21 	.word	0x00009e21
    9f98:	000097b9 	.word	0x000097b9

00009f9c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    9f9c:	b580      	push	{r7, lr}
    9f9e:	b086      	sub	sp, #24
    9fa0:	af00      	add	r7, sp, #0
    9fa2:	6078      	str	r0, [r7, #4]
    9fa4:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    9fa6:	687b      	ldr	r3, [r7, #4]
    9fa8:	691b      	ldr	r3, [r3, #16]
    9faa:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    9fac:	687b      	ldr	r3, [r7, #4]
    9fae:	2b00      	cmp	r3, #0
    9fb0:	bf14      	ite	ne
    9fb2:	2301      	movne	r3, #1
    9fb4:	2300      	moveq	r3, #0
    9fb6:	b2db      	uxtb	r3, r3
    9fb8:	f240 620c 	movw	r2, #1548	; 0x60c
    9fbc:	493b      	ldr	r1, [pc, #236]	; (a0ac <_i2c_m_sync_transfer+0x110>)
    9fbe:	4618      	mov	r0, r3
    9fc0:	4b3b      	ldr	r3, [pc, #236]	; (a0b0 <_i2c_m_sync_transfer+0x114>)
    9fc2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9fc4:	687b      	ldr	r3, [r7, #4]
    9fc6:	691b      	ldr	r3, [r3, #16]
    9fc8:	2b00      	cmp	r3, #0
    9fca:	bf14      	ite	ne
    9fcc:	2301      	movne	r3, #1
    9fce:	2300      	moveq	r3, #0
    9fd0:	b2db      	uxtb	r3, r3
    9fd2:	f240 620d 	movw	r2, #1549	; 0x60d
    9fd6:	4935      	ldr	r1, [pc, #212]	; (a0ac <_i2c_m_sync_transfer+0x110>)
    9fd8:	4618      	mov	r0, r3
    9fda:	4b35      	ldr	r3, [pc, #212]	; (a0b0 <_i2c_m_sync_transfer+0x114>)
    9fdc:	4798      	blx	r3
	ASSERT(msg);
    9fde:	683b      	ldr	r3, [r7, #0]
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	bf14      	ite	ne
    9fe4:	2301      	movne	r3, #1
    9fe6:	2300      	moveq	r3, #0
    9fe8:	b2db      	uxtb	r3, r3
    9fea:	f240 620e 	movw	r2, #1550	; 0x60e
    9fee:	492f      	ldr	r1, [pc, #188]	; (a0ac <_i2c_m_sync_transfer+0x110>)
    9ff0:	4618      	mov	r0, r3
    9ff2:	4b2f      	ldr	r3, [pc, #188]	; (a0b0 <_i2c_m_sync_transfer+0x114>)
    9ff4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    9ff6:	687b      	ldr	r3, [r7, #4]
    9ff8:	885b      	ldrh	r3, [r3, #2]
    9ffa:	b29b      	uxth	r3, r3
    9ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a000:	2b00      	cmp	r3, #0
    a002:	d002      	beq.n	a00a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    a004:	f06f 0305 	mvn.w	r3, #5
    a008:	e04c      	b.n	a0a4 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    a00a:	683b      	ldr	r3, [r7, #0]
    a00c:	885b      	ldrh	r3, [r3, #2]
    a00e:	b29b      	uxth	r3, r3
    a010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a014:	b29a      	uxth	r2, r3
    a016:	683b      	ldr	r3, [r7, #0]
    a018:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    a01a:	687b      	ldr	r3, [r7, #4]
    a01c:	683a      	ldr	r2, [r7, #0]
    a01e:	ca07      	ldmia	r2, {r0, r1, r2}
    a020:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    a024:	6938      	ldr	r0, [r7, #16]
    a026:	4b23      	ldr	r3, [pc, #140]	; (a0b4 <_i2c_m_sync_transfer+0x118>)
    a028:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    a02a:	6878      	ldr	r0, [r7, #4]
    a02c:	4b22      	ldr	r3, [pc, #136]	; (a0b8 <_i2c_m_sync_transfer+0x11c>)
    a02e:	4798      	blx	r3
    a030:	6178      	str	r0, [r7, #20]

	if (ret) {
    a032:	697b      	ldr	r3, [r7, #20]
    a034:	2b00      	cmp	r3, #0
    a036:	d02d      	beq.n	a094 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a038:	687b      	ldr	r3, [r7, #4]
    a03a:	885b      	ldrh	r3, [r3, #2]
    a03c:	b29b      	uxth	r3, r3
    a03e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a042:	b29a      	uxth	r2, r3
    a044:	687b      	ldr	r3, [r7, #4]
    a046:	805a      	strh	r2, [r3, #2]

		return ret;
    a048:	697b      	ldr	r3, [r7, #20]
    a04a:	e02b      	b.n	a0a4 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    a04c:	f107 030c 	add.w	r3, r7, #12
    a050:	4619      	mov	r1, r3
    a052:	6878      	ldr	r0, [r7, #4]
    a054:	4b19      	ldr	r3, [pc, #100]	; (a0bc <_i2c_m_sync_transfer+0x120>)
    a056:	4798      	blx	r3
    a058:	6178      	str	r0, [r7, #20]

		if (ret) {
    a05a:	697b      	ldr	r3, [r7, #20]
    a05c:	2b00      	cmp	r3, #0
    a05e:	d012      	beq.n	a086 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    a060:	683b      	ldr	r3, [r7, #0]
    a062:	885b      	ldrh	r3, [r3, #2]
    a064:	b29b      	uxth	r3, r3
    a066:	b21b      	sxth	r3, r3
    a068:	2b00      	cmp	r3, #0
    a06a:	da02      	bge.n	a072 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    a06c:	6938      	ldr	r0, [r7, #16]
    a06e:	4b14      	ldr	r3, [pc, #80]	; (a0c0 <_i2c_m_sync_transfer+0x124>)
    a070:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	885b      	ldrh	r3, [r3, #2]
    a076:	b29b      	uxth	r3, r3
    a078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a07c:	b29a      	uxth	r2, r3
    a07e:	687b      	ldr	r3, [r7, #4]
    a080:	805a      	strh	r2, [r3, #2]

			return ret;
    a082:	697b      	ldr	r3, [r7, #20]
    a084:	e00e      	b.n	a0a4 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    a086:	68fb      	ldr	r3, [r7, #12]
    a088:	687a      	ldr	r2, [r7, #4]
    a08a:	4619      	mov	r1, r3
    a08c:	6938      	ldr	r0, [r7, #16]
    a08e:	4b0d      	ldr	r3, [pc, #52]	; (a0c4 <_i2c_m_sync_transfer+0x128>)
    a090:	4798      	blx	r3
    a092:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a094:	687b      	ldr	r3, [r7, #4]
    a096:	885b      	ldrh	r3, [r3, #2]
    a098:	b29b      	uxth	r3, r3
    a09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a09e:	2b00      	cmp	r3, #0
    a0a0:	d1d4      	bne.n	a04c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    a0a2:	697b      	ldr	r3, [r7, #20]
}
    a0a4:	4618      	mov	r0, r3
    a0a6:	3718      	adds	r7, #24
    a0a8:	46bd      	mov	sp, r7
    a0aa:	bd80      	pop	{r7, pc}
    a0ac:	00013cfc 	.word	0x00013cfc
    a0b0:	00006a41 	.word	0x00006a41
    a0b4:	000093b5 	.word	0x000093b5
    a0b8:	00009e7d 	.word	0x00009e7d
    a0bc:	00009e21 	.word	0x00009e21
    a0c0:	0000979d 	.word	0x0000979d
    a0c4:	000097b9 	.word	0x000097b9

0000a0c8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    a0c8:	b580      	push	{r7, lr}
    a0ca:	b084      	sub	sp, #16
    a0cc:	af00      	add	r7, sp, #0
    a0ce:	6078      	str	r0, [r7, #4]
    a0d0:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    a0d2:	6838      	ldr	r0, [r7, #0]
    a0d4:	4b42      	ldr	r3, [pc, #264]	; (a1e0 <_i2c_m_sync_init_impl+0x118>)
    a0d6:	4798      	blx	r3
    a0d8:	4603      	mov	r3, r0
    a0da:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    a0dc:	2101      	movs	r1, #1
    a0de:	6838      	ldr	r0, [r7, #0]
    a0e0:	4b40      	ldr	r3, [pc, #256]	; (a1e4 <_i2c_m_sync_init_impl+0x11c>)
    a0e2:	4798      	blx	r3
    a0e4:	4603      	mov	r3, r0
    a0e6:	f083 0301 	eor.w	r3, r3, #1
    a0ea:	b2db      	uxtb	r3, r3
    a0ec:	2b00      	cmp	r3, #0
    a0ee:	d020      	beq.n	a132 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    a0f0:	7bfa      	ldrb	r2, [r7, #15]
    a0f2:	493d      	ldr	r1, [pc, #244]	; (a1e8 <_i2c_m_sync_init_impl+0x120>)
    a0f4:	4613      	mov	r3, r2
    a0f6:	005b      	lsls	r3, r3, #1
    a0f8:	4413      	add	r3, r2
    a0fa:	00db      	lsls	r3, r3, #3
    a0fc:	440b      	add	r3, r1
    a0fe:	3304      	adds	r3, #4
    a100:	681b      	ldr	r3, [r3, #0]
    a102:	f003 031c 	and.w	r3, r3, #28
    a106:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    a108:	2102      	movs	r1, #2
    a10a:	6838      	ldr	r0, [r7, #0]
    a10c:	4b37      	ldr	r3, [pc, #220]	; (a1ec <_i2c_m_sync_init_impl+0x124>)
    a10e:	4798      	blx	r3
    a110:	4603      	mov	r3, r0
    a112:	2b00      	cmp	r3, #0
    a114:	d006      	beq.n	a124 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    a116:	6838      	ldr	r0, [r7, #0]
    a118:	4b35      	ldr	r3, [pc, #212]	; (a1f0 <_i2c_m_sync_init_impl+0x128>)
    a11a:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    a11c:	2102      	movs	r1, #2
    a11e:	6838      	ldr	r0, [r7, #0]
    a120:	4b34      	ldr	r3, [pc, #208]	; (a1f4 <_i2c_m_sync_init_impl+0x12c>)
    a122:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    a124:	68bb      	ldr	r3, [r7, #8]
    a126:	f043 0301 	orr.w	r3, r3, #1
    a12a:	4619      	mov	r1, r3
    a12c:	6838      	ldr	r0, [r7, #0]
    a12e:	4b32      	ldr	r3, [pc, #200]	; (a1f8 <_i2c_m_sync_init_impl+0x130>)
    a130:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    a132:	2101      	movs	r1, #1
    a134:	6838      	ldr	r0, [r7, #0]
    a136:	4b2f      	ldr	r3, [pc, #188]	; (a1f4 <_i2c_m_sync_init_impl+0x12c>)
    a138:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    a13a:	7bfa      	ldrb	r2, [r7, #15]
    a13c:	492a      	ldr	r1, [pc, #168]	; (a1e8 <_i2c_m_sync_init_impl+0x120>)
    a13e:	4613      	mov	r3, r2
    a140:	005b      	lsls	r3, r3, #1
    a142:	4413      	add	r3, r2
    a144:	00db      	lsls	r3, r3, #3
    a146:	440b      	add	r3, r1
    a148:	3304      	adds	r3, #4
    a14a:	681b      	ldr	r3, [r3, #0]
    a14c:	4619      	mov	r1, r3
    a14e:	6838      	ldr	r0, [r7, #0]
    a150:	4b29      	ldr	r3, [pc, #164]	; (a1f8 <_i2c_m_sync_init_impl+0x130>)
    a152:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    a154:	7bfa      	ldrb	r2, [r7, #15]
    a156:	4924      	ldr	r1, [pc, #144]	; (a1e8 <_i2c_m_sync_init_impl+0x120>)
    a158:	4613      	mov	r3, r2
    a15a:	005b      	lsls	r3, r3, #1
    a15c:	4413      	add	r3, r2
    a15e:	00db      	lsls	r3, r3, #3
    a160:	440b      	add	r3, r1
    a162:	3308      	adds	r3, #8
    a164:	681b      	ldr	r3, [r3, #0]
    a166:	4619      	mov	r1, r3
    a168:	6838      	ldr	r0, [r7, #0]
    a16a:	4b24      	ldr	r3, [pc, #144]	; (a1fc <_i2c_m_sync_init_impl+0x134>)
    a16c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    a16e:	7bfa      	ldrb	r2, [r7, #15]
    a170:	491d      	ldr	r1, [pc, #116]	; (a1e8 <_i2c_m_sync_init_impl+0x120>)
    a172:	4613      	mov	r3, r2
    a174:	005b      	lsls	r3, r3, #1
    a176:	4413      	add	r3, r2
    a178:	00db      	lsls	r3, r3, #3
    a17a:	440b      	add	r3, r1
    a17c:	330c      	adds	r3, #12
    a17e:	681b      	ldr	r3, [r3, #0]
    a180:	4619      	mov	r1, r3
    a182:	6838      	ldr	r0, [r7, #0]
    a184:	4b1e      	ldr	r3, [pc, #120]	; (a200 <_i2c_m_sync_init_impl+0x138>)
    a186:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    a188:	7bfa      	ldrb	r2, [r7, #15]
    a18a:	4917      	ldr	r1, [pc, #92]	; (a1e8 <_i2c_m_sync_init_impl+0x120>)
    a18c:	4613      	mov	r3, r2
    a18e:	005b      	lsls	r3, r3, #1
    a190:	4413      	add	r3, r2
    a192:	00db      	lsls	r3, r3, #3
    a194:	440b      	add	r3, r1
    a196:	3304      	adds	r3, #4
    a198:	681b      	ldr	r3, [r3, #0]
    a19a:	0e1b      	lsrs	r3, r3, #24
    a19c:	b29b      	uxth	r3, r3
    a19e:	f003 0303 	and.w	r3, r3, #3
    a1a2:	b29a      	uxth	r2, r3
    a1a4:	687b      	ldr	r3, [r7, #4]
    a1a6:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    a1a8:	687b      	ldr	r3, [r7, #4]
    a1aa:	899b      	ldrh	r3, [r3, #12]
    a1ac:	2b01      	cmp	r3, #1
    a1ae:	bf8c      	ite	hi
    a1b0:	2301      	movhi	r3, #1
    a1b2:	2300      	movls	r3, #0
    a1b4:	b2db      	uxtb	r3, r3
    a1b6:	4619      	mov	r1, r3
    a1b8:	6838      	ldr	r0, [r7, #0]
    a1ba:	4b12      	ldr	r3, [pc, #72]	; (a204 <_i2c_m_sync_init_impl+0x13c>)
    a1bc:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    a1be:	7bfa      	ldrb	r2, [r7, #15]
    a1c0:	4909      	ldr	r1, [pc, #36]	; (a1e8 <_i2c_m_sync_init_impl+0x120>)
    a1c2:	4613      	mov	r3, r2
    a1c4:	005b      	lsls	r3, r3, #1
    a1c6:	4413      	add	r3, r2
    a1c8:	00db      	lsls	r3, r3, #3
    a1ca:	440b      	add	r3, r1
    a1cc:	3312      	adds	r3, #18
    a1ce:	881a      	ldrh	r2, [r3, #0]
    a1d0:	687b      	ldr	r3, [r7, #4]
    a1d2:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    a1d4:	2300      	movs	r3, #0
}
    a1d6:	4618      	mov	r0, r3
    a1d8:	3710      	adds	r7, #16
    a1da:	46bd      	mov	sp, r7
    a1dc:	bd80      	pop	{r7, pc}
    a1de:	bf00      	nop
    a1e0:	00009735 	.word	0x00009735
    a1e4:	00009005 	.word	0x00009005
    a1e8:	20000018 	.word	0x20000018
    a1ec:	00009285 	.word	0x00009285
    a1f0:	0000922d 	.word	0x0000922d
    a1f4:	00008fe1 	.word	0x00008fe1
    a1f8:	000092b5 	.word	0x000092b5
    a1fc:	00009485 	.word	0x00009485
    a200:	000094cd 	.word	0x000094cd
    a204:	00009509 	.word	0x00009509

0000a208 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    a208:	b580      	push	{r7, lr}
    a20a:	b082      	sub	sp, #8
    a20c:	af00      	add	r7, sp, #0
    a20e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a210:	2101      	movs	r1, #1
    a212:	6878      	ldr	r0, [r7, #4]
    a214:	4b07      	ldr	r3, [pc, #28]	; (a234 <_spi_sync_enable+0x2c>)
    a216:	4798      	blx	r3
    a218:	4603      	mov	r3, r0
    a21a:	2b00      	cmp	r3, #0
    a21c:	d002      	beq.n	a224 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    a21e:	f06f 0303 	mvn.w	r3, #3
    a222:	e003      	b.n	a22c <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    a224:	6878      	ldr	r0, [r7, #4]
    a226:	4b04      	ldr	r3, [pc, #16]	; (a238 <_spi_sync_enable+0x30>)
    a228:	4798      	blx	r3

	return ERR_NONE;
    a22a:	2300      	movs	r3, #0
}
    a22c:	4618      	mov	r0, r3
    a22e:	3708      	adds	r7, #8
    a230:	46bd      	mov	sp, r7
    a232:	bd80      	pop	{r7, pc}
    a234:	00009051 	.word	0x00009051
    a238:	000092d9 	.word	0x000092d9

0000a23c <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    a23c:	b580      	push	{r7, lr}
    a23e:	b084      	sub	sp, #16
    a240:	af00      	add	r7, sp, #0
    a242:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
    a244:	6878      	ldr	r0, [r7, #4]
    a246:	4b0e      	ldr	r3, [pc, #56]	; (a280 <_spi_async_enable+0x44>)
    a248:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    a24a:	6878      	ldr	r0, [r7, #4]
    a24c:	4b0d      	ldr	r3, [pc, #52]	; (a284 <_spi_async_enable+0x48>)
    a24e:	4798      	blx	r3
    a250:	4603      	mov	r3, r0
    a252:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < 4; i++) {
    a254:	2300      	movs	r3, #0
    a256:	60bb      	str	r3, [r7, #8]
    a258:	e009      	b.n	a26e <_spi_async_enable+0x32>
		NVIC_EnableIRQ((IRQn_Type)irq++);
    a25a:	7bfb      	ldrb	r3, [r7, #15]
    a25c:	1c5a      	adds	r2, r3, #1
    a25e:	73fa      	strb	r2, [r7, #15]
    a260:	b21b      	sxth	r3, r3
    a262:	4618      	mov	r0, r3
    a264:	4b08      	ldr	r3, [pc, #32]	; (a288 <_spi_async_enable+0x4c>)
    a266:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    a268:	68bb      	ldr	r3, [r7, #8]
    a26a:	3301      	adds	r3, #1
    a26c:	60bb      	str	r3, [r7, #8]
    a26e:	68bb      	ldr	r3, [r7, #8]
    a270:	2b03      	cmp	r3, #3
    a272:	d9f2      	bls.n	a25a <_spi_async_enable+0x1e>
	}

	return ERR_NONE;
    a274:	2300      	movs	r3, #0
}
    a276:	4618      	mov	r0, r3
    a278:	3710      	adds	r7, #16
    a27a:	46bd      	mov	sp, r7
    a27c:	bd80      	pop	{r7, pc}
    a27e:	bf00      	nop
    a280:	0000a209 	.word	0x0000a209
    a284:	00009aed 	.word	0x00009aed
    a288:	00008f25 	.word	0x00008f25

0000a28c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    a28c:	b580      	push	{r7, lr}
    a28e:	b082      	sub	sp, #8
    a290:	af00      	add	r7, sp, #0
    a292:	6078      	str	r0, [r7, #4]
    a294:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	2b00      	cmp	r3, #0
    a29a:	d004      	beq.n	a2a6 <_spi_load_regs_master+0x1a>
    a29c:	683b      	ldr	r3, [r7, #0]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d001      	beq.n	a2a6 <_spi_load_regs_master+0x1a>
    a2a2:	2301      	movs	r3, #1
    a2a4:	e000      	b.n	a2a8 <_spi_load_regs_master+0x1c>
    a2a6:	2300      	movs	r3, #0
    a2a8:	f003 0301 	and.w	r3, r3, #1
    a2ac:	b2db      	uxtb	r3, r3
    a2ae:	f640 1245 	movw	r2, #2373	; 0x945
    a2b2:	4915      	ldr	r1, [pc, #84]	; (a308 <_spi_load_regs_master+0x7c>)
    a2b4:	4618      	mov	r0, r3
    a2b6:	4b15      	ldr	r3, [pc, #84]	; (a30c <_spi_load_regs_master+0x80>)
    a2b8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    a2ba:	683b      	ldr	r3, [r7, #0]
    a2bc:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    a2be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    a2c2:	f023 0301 	bic.w	r3, r3, #1
    a2c6:	4619      	mov	r1, r3
    a2c8:	6878      	ldr	r0, [r7, #4]
    a2ca:	4b11      	ldr	r3, [pc, #68]	; (a310 <_spi_load_regs_master+0x84>)
    a2cc:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    a2ce:	683b      	ldr	r3, [r7, #0]
    a2d0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    a2d2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    a2d6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    a2da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a2de:	4619      	mov	r1, r3
    a2e0:	6878      	ldr	r0, [r7, #4]
    a2e2:	4b0c      	ldr	r3, [pc, #48]	; (a314 <_spi_load_regs_master+0x88>)
    a2e4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    a2e6:	683b      	ldr	r3, [r7, #0]
    a2e8:	7b1b      	ldrb	r3, [r3, #12]
    a2ea:	4619      	mov	r1, r3
    a2ec:	6878      	ldr	r0, [r7, #4]
    a2ee:	4b0a      	ldr	r3, [pc, #40]	; (a318 <_spi_load_regs_master+0x8c>)
    a2f0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a2f2:	683b      	ldr	r3, [r7, #0]
    a2f4:	7b5b      	ldrb	r3, [r3, #13]
    a2f6:	4619      	mov	r1, r3
    a2f8:	6878      	ldr	r0, [r7, #4]
    a2fa:	4b08      	ldr	r3, [pc, #32]	; (a31c <_spi_load_regs_master+0x90>)
    a2fc:	4798      	blx	r3
}
    a2fe:	bf00      	nop
    a300:	3708      	adds	r7, #8
    a302:	46bd      	mov	sp, r7
    a304:	bd80      	pop	{r7, pc}
    a306:	bf00      	nop
    a308:	00013cfc 	.word	0x00013cfc
    a30c:	00006a41 	.word	0x00006a41
    a310:	00009391 	.word	0x00009391
    a314:	000094a9 	.word	0x000094a9
    a318:	000094e9 	.word	0x000094e9
    a31c:	00009621 	.word	0x00009621

0000a320 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    a320:	b580      	push	{r7, lr}
    a322:	b082      	sub	sp, #8
    a324:	af00      	add	r7, sp, #0
    a326:	6078      	str	r0, [r7, #4]
    a328:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	2b00      	cmp	r3, #0
    a32e:	d004      	beq.n	a33a <_spi_load_regs_slave+0x1a>
    a330:	683b      	ldr	r3, [r7, #0]
    a332:	2b00      	cmp	r3, #0
    a334:	d001      	beq.n	a33a <_spi_load_regs_slave+0x1a>
    a336:	2301      	movs	r3, #1
    a338:	e000      	b.n	a33c <_spi_load_regs_slave+0x1c>
    a33a:	2300      	movs	r3, #0
    a33c:	f003 0301 	and.w	r3, r3, #1
    a340:	b2db      	uxtb	r3, r3
    a342:	f640 1259 	movw	r2, #2393	; 0x959
    a346:	491a      	ldr	r1, [pc, #104]	; (a3b0 <_spi_load_regs_slave+0x90>)
    a348:	4618      	mov	r0, r3
    a34a:	4b1a      	ldr	r3, [pc, #104]	; (a3b4 <_spi_load_regs_slave+0x94>)
    a34c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    a34e:	683b      	ldr	r3, [r7, #0]
    a350:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    a352:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    a356:	f023 0301 	bic.w	r3, r3, #1
    a35a:	4619      	mov	r1, r3
    a35c:	6878      	ldr	r0, [r7, #4]
    a35e:	4b16      	ldr	r3, [pc, #88]	; (a3b8 <_spi_load_regs_slave+0x98>)
    a360:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    a362:	683b      	ldr	r3, [r7, #0]
    a364:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    a366:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    a36a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    a36e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a372:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    a376:	4619      	mov	r1, r3
    a378:	6878      	ldr	r0, [r7, #4]
    a37a:	4b10      	ldr	r3, [pc, #64]	; (a3bc <_spi_load_regs_slave+0x9c>)
    a37c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    a37e:	683b      	ldr	r3, [r7, #0]
    a380:	689b      	ldr	r3, [r3, #8]
    a382:	4619      	mov	r1, r3
    a384:	6878      	ldr	r0, [r7, #4]
    a386:	4b0e      	ldr	r3, [pc, #56]	; (a3c0 <_spi_load_regs_slave+0xa0>)
    a388:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    a38a:	683b      	ldr	r3, [r7, #0]
    a38c:	7b5b      	ldrb	r3, [r3, #13]
    a38e:	4619      	mov	r1, r3
    a390:	6878      	ldr	r0, [r7, #4]
    a392:	4b0c      	ldr	r3, [pc, #48]	; (a3c4 <_spi_load_regs_slave+0xa4>)
    a394:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    a396:	bf00      	nop
    a398:	f04f 31ff 	mov.w	r1, #4294967295
    a39c:	6878      	ldr	r0, [r7, #4]
    a39e:	4b0a      	ldr	r3, [pc, #40]	; (a3c8 <_spi_load_regs_slave+0xa8>)
    a3a0:	4798      	blx	r3
    a3a2:	4603      	mov	r3, r0
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	d1f7      	bne.n	a398 <_spi_load_regs_slave+0x78>
		;
}
    a3a8:	bf00      	nop
    a3aa:	3708      	adds	r7, #8
    a3ac:	46bd      	mov	sp, r7
    a3ae:	bd80      	pop	{r7, pc}
    a3b0:	00013cfc 	.word	0x00013cfc
    a3b4:	00006a41 	.word	0x00006a41
    a3b8:	00009391 	.word	0x00009391
    a3bc:	000094a9 	.word	0x000094a9
    a3c0:	0000958d 	.word	0x0000958d
    a3c4:	00009621 	.word	0x00009621
    a3c8:	00009051 	.word	0x00009051

0000a3cc <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    a3cc:	b580      	push	{r7, lr}
    a3ce:	b084      	sub	sp, #16
    a3d0:	af00      	add	r7, sp, #0
    a3d2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	4618      	mov	r0, r3
    a3d8:	4b11      	ldr	r3, [pc, #68]	; (a420 <_spi_get_regs+0x54>)
    a3da:	4798      	blx	r3
    a3dc:	4603      	mov	r3, r0
    a3de:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a3e0:	2300      	movs	r3, #0
    a3e2:	73fb      	strb	r3, [r7, #15]
    a3e4:	e014      	b.n	a410 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    a3e6:	7bfa      	ldrb	r2, [r7, #15]
    a3e8:	490e      	ldr	r1, [pc, #56]	; (a424 <_spi_get_regs+0x58>)
    a3ea:	4613      	mov	r3, r2
    a3ec:	011b      	lsls	r3, r3, #4
    a3ee:	4413      	add	r3, r2
    a3f0:	440b      	add	r3, r1
    a3f2:	3310      	adds	r3, #16
    a3f4:	781b      	ldrb	r3, [r3, #0]
    a3f6:	7bba      	ldrb	r2, [r7, #14]
    a3f8:	429a      	cmp	r2, r3
    a3fa:	d106      	bne.n	a40a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    a3fc:	7bfa      	ldrb	r2, [r7, #15]
    a3fe:	4613      	mov	r3, r2
    a400:	011b      	lsls	r3, r3, #4
    a402:	4413      	add	r3, r2
    a404:	4a07      	ldr	r2, [pc, #28]	; (a424 <_spi_get_regs+0x58>)
    a406:	4413      	add	r3, r2
    a408:	e006      	b.n	a418 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    a40a:	7bfb      	ldrb	r3, [r7, #15]
    a40c:	3301      	adds	r3, #1
    a40e:	73fb      	strb	r3, [r7, #15]
    a410:	7bfb      	ldrb	r3, [r7, #15]
    a412:	2b02      	cmp	r3, #2
    a414:	d9e7      	bls.n	a3e6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    a416:	2300      	movs	r3, #0
}
    a418:	4618      	mov	r0, r3
    a41a:	3710      	adds	r7, #16
    a41c:	46bd      	mov	sp, r7
    a41e:	bd80      	pop	{r7, pc}
    a420:	00009685 	.word	0x00009685
    a424:	00013d38 	.word	0x00013d38

0000a428 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    a428:	b580      	push	{r7, lr}
    a42a:	b084      	sub	sp, #16
    a42c:	af00      	add	r7, sp, #0
    a42e:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    a430:	687b      	ldr	r3, [r7, #4]
    a432:	681b      	ldr	r3, [r3, #0]
    a434:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    a436:	68f8      	ldr	r0, [r7, #12]
    a438:	4b21      	ldr	r3, [pc, #132]	; (a4c0 <_spi_handler+0x98>)
    a43a:	4798      	blx	r3
    a43c:	4603      	mov	r3, r0
    a43e:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    a440:	68f8      	ldr	r0, [r7, #12]
    a442:	4b20      	ldr	r3, [pc, #128]	; (a4c4 <_spi_handler+0x9c>)
    a444:	4798      	blx	r3
    a446:	4603      	mov	r3, r0
    a448:	461a      	mov	r2, r3
    a44a:	7afb      	ldrb	r3, [r7, #11]
    a44c:	4013      	ands	r3, r2
    a44e:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    a450:	7afb      	ldrb	r3, [r7, #11]
    a452:	f003 0301 	and.w	r3, r3, #1
    a456:	2b00      	cmp	r3, #0
    a458:	d004      	beq.n	a464 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    a45a:	687b      	ldr	r3, [r7, #4]
    a45c:	689b      	ldr	r3, [r3, #8]
    a45e:	6878      	ldr	r0, [r7, #4]
    a460:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    a462:	e029      	b.n	a4b8 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    a464:	7afb      	ldrb	r3, [r7, #11]
    a466:	f003 0304 	and.w	r3, r3, #4
    a46a:	2b00      	cmp	r3, #0
    a46c:	d004      	beq.n	a478 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	68db      	ldr	r3, [r3, #12]
    a472:	6878      	ldr	r0, [r7, #4]
    a474:	4798      	blx	r3
}
    a476:	e01f      	b.n	a4b8 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    a478:	7afb      	ldrb	r3, [r7, #11]
    a47a:	f003 0302 	and.w	r3, r3, #2
    a47e:	2b00      	cmp	r3, #0
    a480:	d008      	beq.n	a494 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    a482:	2102      	movs	r1, #2
    a484:	68f8      	ldr	r0, [r7, #12]
    a486:	4b10      	ldr	r3, [pc, #64]	; (a4c8 <_spi_handler+0xa0>)
    a488:	4798      	blx	r3
		dev->callbacks.complete(dev);
    a48a:	687b      	ldr	r3, [r7, #4]
    a48c:	691b      	ldr	r3, [r3, #16]
    a48e:	6878      	ldr	r0, [r7, #4]
    a490:	4798      	blx	r3
}
    a492:	e011      	b.n	a4b8 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    a494:	f997 300b 	ldrsb.w	r3, [r7, #11]
    a498:	2b00      	cmp	r3, #0
    a49a:	da0d      	bge.n	a4b8 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    a49c:	2104      	movs	r1, #4
    a49e:	68f8      	ldr	r0, [r7, #12]
    a4a0:	4b0a      	ldr	r3, [pc, #40]	; (a4cc <_spi_handler+0xa4>)
    a4a2:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a4a4:	2180      	movs	r1, #128	; 0x80
    a4a6:	68f8      	ldr	r0, [r7, #12]
    a4a8:	4b07      	ldr	r3, [pc, #28]	; (a4c8 <_spi_handler+0xa0>)
    a4aa:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    a4ac:	687b      	ldr	r3, [r7, #4]
    a4ae:	695b      	ldr	r3, [r3, #20]
    a4b0:	f06f 0112 	mvn.w	r1, #18
    a4b4:	6878      	ldr	r0, [r7, #4]
    a4b6:	4798      	blx	r3
}
    a4b8:	bf00      	nop
    a4ba:	3710      	adds	r7, #16
    a4bc:	46bd      	mov	sp, r7
    a4be:	bd80      	pop	{r7, pc}
    a4c0:	0000910d 	.word	0x0000910d
    a4c4:	00009213 	.word	0x00009213
    a4c8:	00009127 	.word	0x00009127
    a4cc:	00009641 	.word	0x00009641

0000a4d0 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    a4d0:	b580      	push	{r7, lr}
    a4d2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a4d4:	4b03      	ldr	r3, [pc, #12]	; (a4e4 <SERCOM4_0_Handler+0x14>)
    a4d6:	681b      	ldr	r3, [r3, #0]
    a4d8:	4618      	mov	r0, r3
    a4da:	4b03      	ldr	r3, [pc, #12]	; (a4e8 <SERCOM4_0_Handler+0x18>)
    a4dc:	4798      	blx	r3
}
    a4de:	bf00      	nop
    a4e0:	bd80      	pop	{r7, pc}
    a4e2:	bf00      	nop
    a4e4:	20001a38 	.word	0x20001a38
    a4e8:	0000a429 	.word	0x0000a429

0000a4ec <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    a4ec:	b580      	push	{r7, lr}
    a4ee:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a4f0:	4b03      	ldr	r3, [pc, #12]	; (a500 <SERCOM4_1_Handler+0x14>)
    a4f2:	681b      	ldr	r3, [r3, #0]
    a4f4:	4618      	mov	r0, r3
    a4f6:	4b03      	ldr	r3, [pc, #12]	; (a504 <SERCOM4_1_Handler+0x18>)
    a4f8:	4798      	blx	r3
}
    a4fa:	bf00      	nop
    a4fc:	bd80      	pop	{r7, pc}
    a4fe:	bf00      	nop
    a500:	20001a38 	.word	0x20001a38
    a504:	0000a429 	.word	0x0000a429

0000a508 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    a508:	b580      	push	{r7, lr}
    a50a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a50c:	4b03      	ldr	r3, [pc, #12]	; (a51c <SERCOM4_2_Handler+0x14>)
    a50e:	681b      	ldr	r3, [r3, #0]
    a510:	4618      	mov	r0, r3
    a512:	4b03      	ldr	r3, [pc, #12]	; (a520 <SERCOM4_2_Handler+0x18>)
    a514:	4798      	blx	r3
}
    a516:	bf00      	nop
    a518:	bd80      	pop	{r7, pc}
    a51a:	bf00      	nop
    a51c:	20001a38 	.word	0x20001a38
    a520:	0000a429 	.word	0x0000a429

0000a524 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    a524:	b580      	push	{r7, lr}
    a526:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    a528:	4b03      	ldr	r3, [pc, #12]	; (a538 <SERCOM4_3_Handler+0x14>)
    a52a:	681b      	ldr	r3, [r3, #0]
    a52c:	4618      	mov	r0, r3
    a52e:	4b03      	ldr	r3, [pc, #12]	; (a53c <SERCOM4_3_Handler+0x18>)
    a530:	4798      	blx	r3
}
    a532:	bf00      	nop
    a534:	bd80      	pop	{r7, pc}
    a536:	bf00      	nop
    a538:	20001a38 	.word	0x20001a38
    a53c:	0000a429 	.word	0x0000a429

0000a540 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    a540:	b580      	push	{r7, lr}
    a542:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a544:	4b03      	ldr	r3, [pc, #12]	; (a554 <SERCOM5_0_Handler+0x14>)
    a546:	681b      	ldr	r3, [r3, #0]
    a548:	4618      	mov	r0, r3
    a54a:	4b03      	ldr	r3, [pc, #12]	; (a558 <SERCOM5_0_Handler+0x18>)
    a54c:	4798      	blx	r3
}
    a54e:	bf00      	nop
    a550:	bd80      	pop	{r7, pc}
    a552:	bf00      	nop
    a554:	20001a3c 	.word	0x20001a3c
    a558:	000099e9 	.word	0x000099e9

0000a55c <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    a55c:	b580      	push	{r7, lr}
    a55e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a560:	4b03      	ldr	r3, [pc, #12]	; (a570 <SERCOM5_1_Handler+0x14>)
    a562:	681b      	ldr	r3, [r3, #0]
    a564:	4618      	mov	r0, r3
    a566:	4b03      	ldr	r3, [pc, #12]	; (a574 <SERCOM5_1_Handler+0x18>)
    a568:	4798      	blx	r3
}
    a56a:	bf00      	nop
    a56c:	bd80      	pop	{r7, pc}
    a56e:	bf00      	nop
    a570:	20001a3c 	.word	0x20001a3c
    a574:	000099e9 	.word	0x000099e9

0000a578 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    a578:	b580      	push	{r7, lr}
    a57a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a57c:	4b03      	ldr	r3, [pc, #12]	; (a58c <SERCOM5_2_Handler+0x14>)
    a57e:	681b      	ldr	r3, [r3, #0]
    a580:	4618      	mov	r0, r3
    a582:	4b03      	ldr	r3, [pc, #12]	; (a590 <SERCOM5_2_Handler+0x18>)
    a584:	4798      	blx	r3
}
    a586:	bf00      	nop
    a588:	bd80      	pop	{r7, pc}
    a58a:	bf00      	nop
    a58c:	20001a3c 	.word	0x20001a3c
    a590:	000099e9 	.word	0x000099e9

0000a594 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    a594:	b580      	push	{r7, lr}
    a596:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    a598:	4b03      	ldr	r3, [pc, #12]	; (a5a8 <SERCOM5_3_Handler+0x14>)
    a59a:	681b      	ldr	r3, [r3, #0]
    a59c:	4618      	mov	r0, r3
    a59e:	4b03      	ldr	r3, [pc, #12]	; (a5ac <SERCOM5_3_Handler+0x18>)
    a5a0:	4798      	blx	r3
}
    a5a2:	bf00      	nop
    a5a4:	bd80      	pop	{r7, pc}
    a5a6:	bf00      	nop
    a5a8:	20001a3c 	.word	0x20001a3c
    a5ac:	000099e9 	.word	0x000099e9

0000a5b0 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a5b4:	4b03      	ldr	r3, [pc, #12]	; (a5c4 <SERCOM7_0_Handler+0x14>)
    a5b6:	681b      	ldr	r3, [r3, #0]
    a5b8:	4618      	mov	r0, r3
    a5ba:	4b03      	ldr	r3, [pc, #12]	; (a5c8 <SERCOM7_0_Handler+0x18>)
    a5bc:	4798      	blx	r3
}
    a5be:	bf00      	nop
    a5c0:	bd80      	pop	{r7, pc}
    a5c2:	bf00      	nop
    a5c4:	20001a40 	.word	0x20001a40
    a5c8:	000099e9 	.word	0x000099e9

0000a5cc <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    a5cc:	b580      	push	{r7, lr}
    a5ce:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a5d0:	4b03      	ldr	r3, [pc, #12]	; (a5e0 <SERCOM7_1_Handler+0x14>)
    a5d2:	681b      	ldr	r3, [r3, #0]
    a5d4:	4618      	mov	r0, r3
    a5d6:	4b03      	ldr	r3, [pc, #12]	; (a5e4 <SERCOM7_1_Handler+0x18>)
    a5d8:	4798      	blx	r3
}
    a5da:	bf00      	nop
    a5dc:	bd80      	pop	{r7, pc}
    a5de:	bf00      	nop
    a5e0:	20001a40 	.word	0x20001a40
    a5e4:	000099e9 	.word	0x000099e9

0000a5e8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    a5e8:	b580      	push	{r7, lr}
    a5ea:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a5ec:	4b03      	ldr	r3, [pc, #12]	; (a5fc <SERCOM7_2_Handler+0x14>)
    a5ee:	681b      	ldr	r3, [r3, #0]
    a5f0:	4618      	mov	r0, r3
    a5f2:	4b03      	ldr	r3, [pc, #12]	; (a600 <SERCOM7_2_Handler+0x18>)
    a5f4:	4798      	blx	r3
}
    a5f6:	bf00      	nop
    a5f8:	bd80      	pop	{r7, pc}
    a5fa:	bf00      	nop
    a5fc:	20001a40 	.word	0x20001a40
    a600:	000099e9 	.word	0x000099e9

0000a604 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    a604:	b580      	push	{r7, lr}
    a606:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    a608:	4b03      	ldr	r3, [pc, #12]	; (a618 <SERCOM7_3_Handler+0x14>)
    a60a:	681b      	ldr	r3, [r3, #0]
    a60c:	4618      	mov	r0, r3
    a60e:	4b03      	ldr	r3, [pc, #12]	; (a61c <SERCOM7_3_Handler+0x18>)
    a610:	4798      	blx	r3
}
    a612:	bf00      	nop
    a614:	bd80      	pop	{r7, pc}
    a616:	bf00      	nop
    a618:	20001a40 	.word	0x20001a40
    a61c:	000099e9 	.word	0x000099e9

0000a620 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    a620:	b580      	push	{r7, lr}
    a622:	b084      	sub	sp, #16
    a624:	af00      	add	r7, sp, #0
    a626:	6078      	str	r0, [r7, #4]
    a628:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    a62a:	683b      	ldr	r3, [r7, #0]
    a62c:	4618      	mov	r0, r3
    a62e:	4b35      	ldr	r3, [pc, #212]	; (a704 <_spi_m_sync_init+0xe4>)
    a630:	4798      	blx	r3
    a632:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	2b00      	cmp	r3, #0
    a638:	d004      	beq.n	a644 <_spi_m_sync_init+0x24>
    a63a:	683b      	ldr	r3, [r7, #0]
    a63c:	2b00      	cmp	r3, #0
    a63e:	d001      	beq.n	a644 <_spi_m_sync_init+0x24>
    a640:	2301      	movs	r3, #1
    a642:	e000      	b.n	a646 <_spi_m_sync_init+0x26>
    a644:	2300      	movs	r3, #0
    a646:	f003 0301 	and.w	r3, r3, #1
    a64a:	b2db      	uxtb	r3, r3
    a64c:	f640 12ec 	movw	r2, #2540	; 0x9ec
    a650:	492d      	ldr	r1, [pc, #180]	; (a708 <_spi_m_sync_init+0xe8>)
    a652:	4618      	mov	r0, r3
    a654:	4b2d      	ldr	r3, [pc, #180]	; (a70c <_spi_m_sync_init+0xec>)
    a656:	4798      	blx	r3

	if (regs == NULL) {
    a658:	68fb      	ldr	r3, [r7, #12]
    a65a:	2b00      	cmp	r3, #0
    a65c:	d102      	bne.n	a664 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    a65e:	f06f 030c 	mvn.w	r3, #12
    a662:	e04a      	b.n	a6fa <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a664:	2101      	movs	r1, #1
    a666:	6838      	ldr	r0, [r7, #0]
    a668:	4b29      	ldr	r3, [pc, #164]	; (a710 <_spi_m_sync_init+0xf0>)
    a66a:	4798      	blx	r3
    a66c:	4603      	mov	r3, r0
    a66e:	f083 0301 	eor.w	r3, r3, #1
    a672:	b2db      	uxtb	r3, r3
    a674:	2b00      	cmp	r3, #0
    a676:	d019      	beq.n	a6ac <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    a678:	68fb      	ldr	r3, [r7, #12]
    a67a:	681b      	ldr	r3, [r3, #0]
    a67c:	f003 031c 	and.w	r3, r3, #28
    a680:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    a682:	2102      	movs	r1, #2
    a684:	6838      	ldr	r0, [r7, #0]
    a686:	4b23      	ldr	r3, [pc, #140]	; (a714 <_spi_m_sync_init+0xf4>)
    a688:	4798      	blx	r3
    a68a:	4603      	mov	r3, r0
    a68c:	2b00      	cmp	r3, #0
    a68e:	d006      	beq.n	a69e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    a690:	6838      	ldr	r0, [r7, #0]
    a692:	4b21      	ldr	r3, [pc, #132]	; (a718 <_spi_m_sync_init+0xf8>)
    a694:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    a696:	2102      	movs	r1, #2
    a698:	6838      	ldr	r0, [r7, #0]
    a69a:	4b20      	ldr	r3, [pc, #128]	; (a71c <_spi_m_sync_init+0xfc>)
    a69c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    a69e:	68bb      	ldr	r3, [r7, #8]
    a6a0:	f043 0301 	orr.w	r3, r3, #1
    a6a4:	4619      	mov	r1, r3
    a6a6:	6838      	ldr	r0, [r7, #0]
    a6a8:	4b1d      	ldr	r3, [pc, #116]	; (a720 <_spi_m_sync_init+0x100>)
    a6aa:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    a6ac:	2101      	movs	r1, #1
    a6ae:	6838      	ldr	r0, [r7, #0]
    a6b0:	4b1a      	ldr	r3, [pc, #104]	; (a71c <_spi_m_sync_init+0xfc>)
    a6b2:	4798      	blx	r3

	dev->prvt = hw;
    a6b4:	687b      	ldr	r3, [r7, #4]
    a6b6:	683a      	ldr	r2, [r7, #0]
    a6b8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    a6ba:	68fb      	ldr	r3, [r7, #12]
    a6bc:	681b      	ldr	r3, [r3, #0]
    a6be:	f003 031c 	and.w	r3, r3, #28
    a6c2:	2b08      	cmp	r3, #8
    a6c4:	d104      	bne.n	a6d0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    a6c6:	68f9      	ldr	r1, [r7, #12]
    a6c8:	6838      	ldr	r0, [r7, #0]
    a6ca:	4b16      	ldr	r3, [pc, #88]	; (a724 <_spi_m_sync_init+0x104>)
    a6cc:	4798      	blx	r3
    a6ce:	e003      	b.n	a6d8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    a6d0:	68f9      	ldr	r1, [r7, #12]
    a6d2:	6838      	ldr	r0, [r7, #0]
    a6d4:	4b14      	ldr	r3, [pc, #80]	; (a728 <_spi_m_sync_init+0x108>)
    a6d6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    a6d8:	68fb      	ldr	r3, [r7, #12]
    a6da:	685b      	ldr	r3, [r3, #4]
    a6dc:	f003 0307 	and.w	r3, r3, #7
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	d101      	bne.n	a6e8 <_spi_m_sync_init+0xc8>
    a6e4:	2201      	movs	r2, #1
    a6e6:	e000      	b.n	a6ea <_spi_m_sync_init+0xca>
    a6e8:	2202      	movs	r2, #2
    a6ea:	687b      	ldr	r3, [r7, #4]
    a6ec:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    a6ee:	68fb      	ldr	r3, [r7, #12]
    a6f0:	89db      	ldrh	r3, [r3, #14]
    a6f2:	b29a      	uxth	r2, r3
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    a6f8:	2300      	movs	r3, #0
}
    a6fa:	4618      	mov	r0, r3
    a6fc:	3710      	adds	r7, #16
    a6fe:	46bd      	mov	sp, r7
    a700:	bd80      	pop	{r7, pc}
    a702:	bf00      	nop
    a704:	0000a3cd 	.word	0x0000a3cd
    a708:	00013cfc 	.word	0x00013cfc
    a70c:	00006a41 	.word	0x00006a41
    a710:	00009051 	.word	0x00009051
    a714:	00009361 	.word	0x00009361
    a718:	00009339 	.word	0x00009339
    a71c:	0000902d 	.word	0x0000902d
    a720:	00009391 	.word	0x00009391
    a724:	0000a321 	.word	0x0000a321
    a728:	0000a28d 	.word	0x0000a28d

0000a72c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    a72c:	b580      	push	{r7, lr}
    a72e:	b086      	sub	sp, #24
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
    a734:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    a736:	687b      	ldr	r3, [r7, #4]
    a738:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    a73a:	6839      	ldr	r1, [r7, #0]
    a73c:	6878      	ldr	r0, [r7, #4]
    a73e:	4b1a      	ldr	r3, [pc, #104]	; (a7a8 <_spi_m_async_init+0x7c>)
    a740:	4798      	blx	r3
    a742:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    a744:	68bb      	ldr	r3, [r7, #8]
    a746:	2b00      	cmp	r3, #0
    a748:	da01      	bge.n	a74e <_spi_m_async_init+0x22>
		return rc;
    a74a:	68bb      	ldr	r3, [r7, #8]
    a74c:	e028      	b.n	a7a0 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    a74e:	6879      	ldr	r1, [r7, #4]
    a750:	6838      	ldr	r0, [r7, #0]
    a752:	4b16      	ldr	r3, [pc, #88]	; (a7ac <_spi_m_async_init+0x80>)
    a754:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    a756:	68fb      	ldr	r3, [r7, #12]
    a758:	2200      	movs	r2, #0
    a75a:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    a75c:	68fb      	ldr	r3, [r7, #12]
    a75e:	2200      	movs	r2, #0
    a760:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    a762:	68fb      	ldr	r3, [r7, #12]
    a764:	2200      	movs	r2, #0
    a766:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    a768:	6838      	ldr	r0, [r7, #0]
    a76a:	4b11      	ldr	r3, [pc, #68]	; (a7b0 <_spi_m_async_init+0x84>)
    a76c:	4798      	blx	r3
    a76e:	4603      	mov	r3, r0
    a770:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a772:	2300      	movs	r3, #0
    a774:	613b      	str	r3, [r7, #16]
    a776:	e00f      	b.n	a798 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    a778:	7dfb      	ldrb	r3, [r7, #23]
    a77a:	b21b      	sxth	r3, r3
    a77c:	4618      	mov	r0, r3
    a77e:	4b0d      	ldr	r3, [pc, #52]	; (a7b4 <_spi_m_async_init+0x88>)
    a780:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    a782:	7dfb      	ldrb	r3, [r7, #23]
    a784:	b21b      	sxth	r3, r3
    a786:	4618      	mov	r0, r3
    a788:	4b0b      	ldr	r3, [pc, #44]	; (a7b8 <_spi_m_async_init+0x8c>)
    a78a:	4798      	blx	r3
		irq++;
    a78c:	7dfb      	ldrb	r3, [r7, #23]
    a78e:	3301      	adds	r3, #1
    a790:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    a792:	693b      	ldr	r3, [r7, #16]
    a794:	3301      	adds	r3, #1
    a796:	613b      	str	r3, [r7, #16]
    a798:	693b      	ldr	r3, [r7, #16]
    a79a:	2b03      	cmp	r3, #3
    a79c:	d9ec      	bls.n	a778 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    a79e:	2300      	movs	r3, #0
}
    a7a0:	4618      	mov	r0, r3
    a7a2:	3718      	adds	r7, #24
    a7a4:	46bd      	mov	sp, r7
    a7a6:	bd80      	pop	{r7, pc}
    a7a8:	0000a621 	.word	0x0000a621
    a7ac:	000096e1 	.word	0x000096e1
    a7b0:	00009aed 	.word	0x00009aed
    a7b4:	00008f61 	.word	0x00008f61
    a7b8:	00008fa5 	.word	0x00008fa5

0000a7bc <_spi_m_async_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_m_async_enable(struct _spi_async_dev *dev)
{
    a7bc:	b580      	push	{r7, lr}
    a7be:	b082      	sub	sp, #8
    a7c0:	af00      	add	r7, sp, #0
    a7c2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    a7c4:	687b      	ldr	r3, [r7, #4]
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d005      	beq.n	a7d6 <_spi_m_async_enable+0x1a>
    a7ca:	687b      	ldr	r3, [r7, #4]
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	d001      	beq.n	a7d6 <_spi_m_async_enable+0x1a>
    a7d2:	2301      	movs	r3, #1
    a7d4:	e000      	b.n	a7d8 <_spi_m_async_enable+0x1c>
    a7d6:	2300      	movs	r3, #0
    a7d8:	f003 0301 	and.w	r3, r3, #1
    a7dc:	b2db      	uxtb	r3, r3
    a7de:	f640 2259 	movw	r2, #2649	; 0xa59
    a7e2:	4907      	ldr	r1, [pc, #28]	; (a800 <_spi_m_async_enable+0x44>)
    a7e4:	4618      	mov	r0, r3
    a7e6:	4b07      	ldr	r3, [pc, #28]	; (a804 <_spi_m_async_enable+0x48>)
    a7e8:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	681b      	ldr	r3, [r3, #0]
    a7ee:	4618      	mov	r0, r3
    a7f0:	4b05      	ldr	r3, [pc, #20]	; (a808 <_spi_m_async_enable+0x4c>)
    a7f2:	4798      	blx	r3
    a7f4:	4603      	mov	r3, r0
}
    a7f6:	4618      	mov	r0, r3
    a7f8:	3708      	adds	r7, #8
    a7fa:	46bd      	mov	sp, r7
    a7fc:	bd80      	pop	{r7, pc}
    a7fe:	bf00      	nop
    a800:	00013cfc 	.word	0x00013cfc
    a804:	00006a41 	.word	0x00006a41
    a808:	0000a23d 	.word	0x0000a23d

0000a80c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    a80c:	b580      	push	{r7, lr}
    a80e:	b082      	sub	sp, #8
    a810:	af00      	add	r7, sp, #0
    a812:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    a814:	bf00      	nop
    a816:	2103      	movs	r1, #3
    a818:	6878      	ldr	r0, [r7, #4]
    a81a:	4b06      	ldr	r3, [pc, #24]	; (a834 <_spi_wait_bus_idle+0x28>)
    a81c:	4798      	blx	r3
    a81e:	4603      	mov	r3, r0
    a820:	2b00      	cmp	r3, #0
    a822:	d0f8      	beq.n	a816 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    a824:	2103      	movs	r1, #3
    a826:	6878      	ldr	r0, [r7, #4]
    a828:	4b03      	ldr	r3, [pc, #12]	; (a838 <_spi_wait_bus_idle+0x2c>)
    a82a:	4798      	blx	r3
}
    a82c:	bf00      	nop
    a82e:	3708      	adds	r7, #8
    a830:	46bd      	mov	sp, r7
    a832:	bd80      	pop	{r7, pc}
    a834:	000090e5 	.word	0x000090e5
    a838:	00009127 	.word	0x00009127

0000a83c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    a83c:	b580      	push	{r7, lr}
    a83e:	b086      	sub	sp, #24
    a840:	af00      	add	r7, sp, #0
    a842:	60f8      	str	r0, [r7, #12]
    a844:	60b9      	str	r1, [r7, #8]
    a846:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    a848:	68bb      	ldr	r3, [r7, #8]
    a84a:	f003 0304 	and.w	r3, r3, #4
    a84e:	2b00      	cmp	r3, #0
    a850:	d101      	bne.n	a856 <_spi_rx_check_and_receive+0x1a>
		return false;
    a852:	2300      	movs	r3, #0
    a854:	e022      	b.n	a89c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    a856:	68f8      	ldr	r0, [r7, #12]
    a858:	4b12      	ldr	r3, [pc, #72]	; (a8a4 <_spi_rx_check_and_receive+0x68>)
    a85a:	4798      	blx	r3
    a85c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    a85e:	687b      	ldr	r3, [r7, #4]
    a860:	685b      	ldr	r3, [r3, #4]
    a862:	2b00      	cmp	r3, #0
    a864:	d014      	beq.n	a890 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    a866:	687b      	ldr	r3, [r7, #4]
    a868:	685b      	ldr	r3, [r3, #4]
    a86a:	1c59      	adds	r1, r3, #1
    a86c:	687a      	ldr	r2, [r7, #4]
    a86e:	6051      	str	r1, [r2, #4]
    a870:	697a      	ldr	r2, [r7, #20]
    a872:	b2d2      	uxtb	r2, r2
    a874:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    a876:	687b      	ldr	r3, [r7, #4]
    a878:	7c1b      	ldrb	r3, [r3, #16]
    a87a:	2b01      	cmp	r3, #1
    a87c:	d908      	bls.n	a890 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    a87e:	687b      	ldr	r3, [r7, #4]
    a880:	685b      	ldr	r3, [r3, #4]
    a882:	1c59      	adds	r1, r3, #1
    a884:	687a      	ldr	r2, [r7, #4]
    a886:	6051      	str	r1, [r2, #4]
    a888:	697a      	ldr	r2, [r7, #20]
    a88a:	0a12      	lsrs	r2, r2, #8
    a88c:	b2d2      	uxtb	r2, r2
    a88e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    a890:	687b      	ldr	r3, [r7, #4]
    a892:	68db      	ldr	r3, [r3, #12]
    a894:	1c5a      	adds	r2, r3, #1
    a896:	687b      	ldr	r3, [r7, #4]
    a898:	60da      	str	r2, [r3, #12]

	return true;
    a89a:	2301      	movs	r3, #1
}
    a89c:	4618      	mov	r0, r3
    a89e:	3718      	adds	r7, #24
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}
    a8a4:	00009609 	.word	0x00009609

0000a8a8 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    a8a8:	b580      	push	{r7, lr}
    a8aa:	b086      	sub	sp, #24
    a8ac:	af00      	add	r7, sp, #0
    a8ae:	60f8      	str	r0, [r7, #12]
    a8b0:	60b9      	str	r1, [r7, #8]
    a8b2:	607a      	str	r2, [r7, #4]
    a8b4:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    a8b6:	68bb      	ldr	r3, [r7, #8]
    a8b8:	f003 0301 	and.w	r3, r3, #1
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d028      	beq.n	a912 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    a8c0:	687b      	ldr	r3, [r7, #4]
    a8c2:	681b      	ldr	r3, [r3, #0]
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	d018      	beq.n	a8fa <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    a8c8:	687b      	ldr	r3, [r7, #4]
    a8ca:	681b      	ldr	r3, [r3, #0]
    a8cc:	1c59      	adds	r1, r3, #1
    a8ce:	687a      	ldr	r2, [r7, #4]
    a8d0:	6011      	str	r1, [r2, #0]
    a8d2:	781b      	ldrb	r3, [r3, #0]
    a8d4:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    a8d6:	687b      	ldr	r3, [r7, #4]
    a8d8:	7c1b      	ldrb	r3, [r3, #16]
    a8da:	2b01      	cmp	r3, #1
    a8dc:	d90f      	bls.n	a8fe <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    a8de:	687b      	ldr	r3, [r7, #4]
    a8e0:	681b      	ldr	r3, [r3, #0]
    a8e2:	781b      	ldrb	r3, [r3, #0]
    a8e4:	021b      	lsls	r3, r3, #8
    a8e6:	461a      	mov	r2, r3
    a8e8:	697b      	ldr	r3, [r7, #20]
    a8ea:	4313      	orrs	r3, r2
    a8ec:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    a8ee:	687b      	ldr	r3, [r7, #4]
    a8f0:	681b      	ldr	r3, [r3, #0]
    a8f2:	1c5a      	adds	r2, r3, #1
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	601a      	str	r2, [r3, #0]
    a8f8:	e001      	b.n	a8fe <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    a8fa:	887b      	ldrh	r3, [r7, #2]
    a8fc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    a8fe:	687b      	ldr	r3, [r7, #4]
    a900:	689b      	ldr	r3, [r3, #8]
    a902:	1c5a      	adds	r2, r3, #1
    a904:	687b      	ldr	r3, [r7, #4]
    a906:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    a908:	6979      	ldr	r1, [r7, #20]
    a90a:	68f8      	ldr	r0, [r7, #12]
    a90c:	4b03      	ldr	r3, [pc, #12]	; (a91c <_spi_tx_check_and_send+0x74>)
    a90e:	4798      	blx	r3
    a910:	e000      	b.n	a914 <_spi_tx_check_and_send+0x6c>
		return;
    a912:	bf00      	nop
}
    a914:	3718      	adds	r7, #24
    a916:	46bd      	mov	sp, r7
    a918:	bd80      	pop	{r7, pc}
    a91a:	bf00      	nop
    a91c:	000095ed 	.word	0x000095ed

0000a920 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    a920:	b580      	push	{r7, lr}
    a922:	b082      	sub	sp, #8
    a924:	af00      	add	r7, sp, #0
    a926:	6078      	str	r0, [r7, #4]
    a928:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    a92a:	687b      	ldr	r3, [r7, #4]
    a92c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a930:	2b00      	cmp	r3, #0
    a932:	d00b      	beq.n	a94c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    a934:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a938:	6838      	ldr	r0, [r7, #0]
    a93a:	4b07      	ldr	r3, [pc, #28]	; (a958 <_spi_err_check+0x38>)
    a93c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    a93e:	2180      	movs	r1, #128	; 0x80
    a940:	6838      	ldr	r0, [r7, #0]
    a942:	4b06      	ldr	r3, [pc, #24]	; (a95c <_spi_err_check+0x3c>)
    a944:	4798      	blx	r3
		return ERR_OVERFLOW;
    a946:	f06f 0312 	mvn.w	r3, #18
    a94a:	e000      	b.n	a94e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    a94c:	2300      	movs	r3, #0
}
    a94e:	4618      	mov	r0, r3
    a950:	3708      	adds	r7, #8
    a952:	46bd      	mov	sp, r7
    a954:	bd80      	pop	{r7, pc}
    a956:	bf00      	nop
    a958:	00009641 	.word	0x00009641
    a95c:	00009127 	.word	0x00009127

0000a960 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    a960:	b590      	push	{r4, r7, lr}
    a962:	b08b      	sub	sp, #44	; 0x2c
    a964:	af00      	add	r7, sp, #0
    a966:	6078      	str	r0, [r7, #4]
    a968:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    a96a:	687b      	ldr	r3, [r7, #4]
    a96c:	681b      	ldr	r3, [r3, #0]
    a96e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    a970:	2300      	movs	r3, #0
    a972:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    a974:	683b      	ldr	r3, [r7, #0]
    a976:	681b      	ldr	r3, [r3, #0]
    a978:	60bb      	str	r3, [r7, #8]
    a97a:	683b      	ldr	r3, [r7, #0]
    a97c:	685b      	ldr	r3, [r3, #4]
    a97e:	60fb      	str	r3, [r7, #12]
    a980:	2300      	movs	r3, #0
    a982:	613b      	str	r3, [r7, #16]
    a984:	2300      	movs	r3, #0
    a986:	617b      	str	r3, [r7, #20]
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	791b      	ldrb	r3, [r3, #4]
    a98c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    a98e:	687b      	ldr	r3, [r7, #4]
    a990:	2b00      	cmp	r3, #0
    a992:	d004      	beq.n	a99e <_spi_m_sync_trans+0x3e>
    a994:	6a3b      	ldr	r3, [r7, #32]
    a996:	2b00      	cmp	r3, #0
    a998:	d001      	beq.n	a99e <_spi_m_sync_trans+0x3e>
    a99a:	2301      	movs	r3, #1
    a99c:	e000      	b.n	a9a0 <_spi_m_sync_trans+0x40>
    a99e:	2300      	movs	r3, #0
    a9a0:	f003 0301 	and.w	r3, r3, #1
    a9a4:	b2db      	uxtb	r3, r3
    a9a6:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    a9aa:	492b      	ldr	r1, [pc, #172]	; (aa58 <_spi_m_sync_trans+0xf8>)
    a9ac:	4618      	mov	r0, r3
    a9ae:	4b2b      	ldr	r3, [pc, #172]	; (aa5c <_spi_m_sync_trans+0xfc>)
    a9b0:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    a9b2:	2107      	movs	r1, #7
    a9b4:	6a38      	ldr	r0, [r7, #32]
    a9b6:	4b2a      	ldr	r3, [pc, #168]	; (aa60 <_spi_m_sync_trans+0x100>)
    a9b8:	4798      	blx	r3
    a9ba:	4603      	mov	r3, r0
    a9bc:	2b00      	cmp	r3, #0
    a9be:	d002      	beq.n	a9c6 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    a9c0:	f06f 0303 	mvn.w	r3, #3
    a9c4:	e043      	b.n	aa4e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    a9c6:	6a38      	ldr	r0, [r7, #32]
    a9c8:	4b26      	ldr	r3, [pc, #152]	; (aa64 <_spi_m_sync_trans+0x104>)
    a9ca:	4798      	blx	r3
    a9cc:	4603      	mov	r3, r0
    a9ce:	f083 0301 	eor.w	r3, r3, #1
    a9d2:	b2db      	uxtb	r3, r3
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d002      	beq.n	a9de <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    a9d8:	f06f 0313 	mvn.w	r3, #19
    a9dc:	e037      	b.n	aa4e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    a9de:	6a38      	ldr	r0, [r7, #32]
    a9e0:	4b21      	ldr	r3, [pc, #132]	; (aa68 <_spi_m_sync_trans+0x108>)
    a9e2:	4798      	blx	r3
    a9e4:	4603      	mov	r3, r0
    a9e6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    a9e8:	f107 0308 	add.w	r3, r7, #8
    a9ec:	461a      	mov	r2, r3
    a9ee:	69f9      	ldr	r1, [r7, #28]
    a9f0:	6a38      	ldr	r0, [r7, #32]
    a9f2:	4b1e      	ldr	r3, [pc, #120]	; (aa6c <_spi_m_sync_trans+0x10c>)
    a9f4:	4798      	blx	r3
    a9f6:	4603      	mov	r3, r0
    a9f8:	f083 0301 	eor.w	r3, r3, #1
    a9fc:	b2db      	uxtb	r3, r3
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d00b      	beq.n	aa1a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    aa02:	697a      	ldr	r2, [r7, #20]
    aa04:	693b      	ldr	r3, [r7, #16]
    aa06:	429a      	cmp	r2, r3
    aa08:	d307      	bcc.n	aa1a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    aa0a:	687b      	ldr	r3, [r7, #4]
    aa0c:	88db      	ldrh	r3, [r3, #6]
    aa0e:	f107 0208 	add.w	r2, r7, #8
    aa12:	69f9      	ldr	r1, [r7, #28]
    aa14:	6a38      	ldr	r0, [r7, #32]
    aa16:	4c16      	ldr	r4, [pc, #88]	; (aa70 <_spi_m_sync_trans+0x110>)
    aa18:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    aa1a:	6a39      	ldr	r1, [r7, #32]
    aa1c:	69f8      	ldr	r0, [r7, #28]
    aa1e:	4b15      	ldr	r3, [pc, #84]	; (aa74 <_spi_m_sync_trans+0x114>)
    aa20:	4798      	blx	r3
    aa22:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aa26:	2b00      	cmp	r3, #0
    aa28:	db0c      	blt.n	aa44 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    aa2a:	693a      	ldr	r2, [r7, #16]
    aa2c:	683b      	ldr	r3, [r7, #0]
    aa2e:	689b      	ldr	r3, [r3, #8]
    aa30:	429a      	cmp	r2, r3
    aa32:	d3d4      	bcc.n	a9de <_spi_m_sync_trans+0x7e>
    aa34:	697a      	ldr	r2, [r7, #20]
    aa36:	683b      	ldr	r3, [r7, #0]
    aa38:	689b      	ldr	r3, [r3, #8]
    aa3a:	429a      	cmp	r2, r3
    aa3c:	d3cf      	bcc.n	a9de <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    aa3e:	693b      	ldr	r3, [r7, #16]
    aa40:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    aa42:	e000      	b.n	aa46 <_spi_m_sync_trans+0xe6>
			break;
    aa44:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    aa46:	6a38      	ldr	r0, [r7, #32]
    aa48:	4b0b      	ldr	r3, [pc, #44]	; (aa78 <_spi_m_sync_trans+0x118>)
    aa4a:	4798      	blx	r3

	return rc;
    aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    aa4e:	4618      	mov	r0, r3
    aa50:	372c      	adds	r7, #44	; 0x2c
    aa52:	46bd      	mov	sp, r7
    aa54:	bd90      	pop	{r4, r7, pc}
    aa56:	bf00      	nop
    aa58:	00013cfc 	.word	0x00013cfc
    aa5c:	00006a41 	.word	0x00006a41
    aa60:	00009051 	.word	0x00009051
    aa64:	00009301 	.word	0x00009301
    aa68:	0000910d 	.word	0x0000910d
    aa6c:	0000a83d 	.word	0x0000a83d
    aa70:	0000a8a9 	.word	0x0000a8a9
    aa74:	0000a921 	.word	0x0000a921
    aa78:	0000a80d 	.word	0x0000a80d

0000aa7c <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	b084      	sub	sp, #16
    aa80:	af00      	add	r7, sp, #0
    aa82:	6078      	str	r0, [r7, #4]
    aa84:	460b      	mov	r3, r1
    aa86:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    aa88:	687b      	ldr	r3, [r7, #4]
    aa8a:	681b      	ldr	r3, [r3, #0]
    aa8c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    aa8e:	687b      	ldr	r3, [r7, #4]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d004      	beq.n	aa9e <_spi_m_async_enable_tx+0x22>
    aa94:	68fb      	ldr	r3, [r7, #12]
    aa96:	2b00      	cmp	r3, #0
    aa98:	d001      	beq.n	aa9e <_spi_m_async_enable_tx+0x22>
    aa9a:	2301      	movs	r3, #1
    aa9c:	e000      	b.n	aaa0 <_spi_m_async_enable_tx+0x24>
    aa9e:	2300      	movs	r3, #0
    aaa0:	f003 0301 	and.w	r3, r3, #1
    aaa4:	b2db      	uxtb	r3, r3
    aaa6:	f640 327c 	movw	r2, #2940	; 0xb7c
    aaaa:	4909      	ldr	r1, [pc, #36]	; (aad0 <_spi_m_async_enable_tx+0x54>)
    aaac:	4618      	mov	r0, r3
    aaae:	4b09      	ldr	r3, [pc, #36]	; (aad4 <_spi_m_async_enable_tx+0x58>)
    aab0:	4798      	blx	r3

	if (state) {
    aab2:	78fb      	ldrb	r3, [r7, #3]
    aab4:	2b00      	cmp	r3, #0
    aab6:	d003      	beq.n	aac0 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    aab8:	68f8      	ldr	r0, [r7, #12]
    aaba:	4b07      	ldr	r3, [pc, #28]	; (aad8 <_spi_m_async_enable_tx+0x5c>)
    aabc:	4798      	blx	r3
    aabe:	e002      	b.n	aac6 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    aac0:	68f8      	ldr	r0, [r7, #12]
    aac2:	4b06      	ldr	r3, [pc, #24]	; (aadc <_spi_m_async_enable_tx+0x60>)
    aac4:	4798      	blx	r3
	}

	return ERR_NONE;
    aac6:	2300      	movs	r3, #0
}
    aac8:	4618      	mov	r0, r3
    aaca:	3710      	adds	r7, #16
    aacc:	46bd      	mov	sp, r7
    aace:	bd80      	pop	{r7, pc}
    aad0:	00013cfc 	.word	0x00013cfc
    aad4:	00006a41 	.word	0x00006a41
    aad8:	00009145 	.word	0x00009145
    aadc:	0000915f 	.word	0x0000915f

0000aae0 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    aae0:	b580      	push	{r7, lr}
    aae2:	b084      	sub	sp, #16
    aae4:	af00      	add	r7, sp, #0
    aae6:	6078      	str	r0, [r7, #4]
    aae8:	460b      	mov	r3, r1
    aaea:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    aaec:	687b      	ldr	r3, [r7, #4]
    aaee:	681b      	ldr	r3, [r3, #0]
    aaf0:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    aaf2:	687b      	ldr	r3, [r7, #4]
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	bf14      	ite	ne
    aaf8:	2301      	movne	r3, #1
    aafa:	2300      	moveq	r3, #0
    aafc:	b2db      	uxtb	r3, r3
    aafe:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    ab02:	490f      	ldr	r1, [pc, #60]	; (ab40 <_spi_m_async_enable_rx+0x60>)
    ab04:	4618      	mov	r0, r3
    ab06:	4b0f      	ldr	r3, [pc, #60]	; (ab44 <_spi_m_async_enable_rx+0x64>)
    ab08:	4798      	blx	r3
	ASSERT(hw);
    ab0a:	68fb      	ldr	r3, [r7, #12]
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	bf14      	ite	ne
    ab10:	2301      	movne	r3, #1
    ab12:	2300      	moveq	r3, #0
    ab14:	b2db      	uxtb	r3, r3
    ab16:	f640 3291 	movw	r2, #2961	; 0xb91
    ab1a:	4909      	ldr	r1, [pc, #36]	; (ab40 <_spi_m_async_enable_rx+0x60>)
    ab1c:	4618      	mov	r0, r3
    ab1e:	4b09      	ldr	r3, [pc, #36]	; (ab44 <_spi_m_async_enable_rx+0x64>)
    ab20:	4798      	blx	r3

	if (state) {
    ab22:	78fb      	ldrb	r3, [r7, #3]
    ab24:	2b00      	cmp	r3, #0
    ab26:	d003      	beq.n	ab30 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    ab28:	68f8      	ldr	r0, [r7, #12]
    ab2a:	4b07      	ldr	r3, [pc, #28]	; (ab48 <_spi_m_async_enable_rx+0x68>)
    ab2c:	4798      	blx	r3
    ab2e:	e002      	b.n	ab36 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    ab30:	68f8      	ldr	r0, [r7, #12]
    ab32:	4b06      	ldr	r3, [pc, #24]	; (ab4c <_spi_m_async_enable_rx+0x6c>)
    ab34:	4798      	blx	r3
	}

	return ERR_NONE;
    ab36:	2300      	movs	r3, #0
}
    ab38:	4618      	mov	r0, r3
    ab3a:	3710      	adds	r7, #16
    ab3c:	46bd      	mov	sp, r7
    ab3e:	bd80      	pop	{r7, pc}
    ab40:	00013cfc 	.word	0x00013cfc
    ab44:	00006a41 	.word	0x00006a41
    ab48:	000091ad 	.word	0x000091ad
    ab4c:	000091c7 	.word	0x000091c7

0000ab50 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    ab50:	b580      	push	{r7, lr}
    ab52:	b082      	sub	sp, #8
    ab54:	af00      	add	r7, sp, #0
    ab56:	6078      	str	r0, [r7, #4]
    ab58:	460b      	mov	r3, r1
    ab5a:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    ab5c:	687b      	ldr	r3, [r7, #4]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d005      	beq.n	ab6e <_spi_m_async_enable_tx_complete+0x1e>
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	681b      	ldr	r3, [r3, #0]
    ab66:	2b00      	cmp	r3, #0
    ab68:	d001      	beq.n	ab6e <_spi_m_async_enable_tx_complete+0x1e>
    ab6a:	2301      	movs	r3, #1
    ab6c:	e000      	b.n	ab70 <_spi_m_async_enable_tx_complete+0x20>
    ab6e:	2300      	movs	r3, #0
    ab70:	f003 0301 	and.w	r3, r3, #1
    ab74:	b2db      	uxtb	r3, r3
    ab76:	f640 32a3 	movw	r2, #2979	; 0xba3
    ab7a:	490b      	ldr	r1, [pc, #44]	; (aba8 <_spi_m_async_enable_tx_complete+0x58>)
    ab7c:	4618      	mov	r0, r3
    ab7e:	4b0b      	ldr	r3, [pc, #44]	; (abac <_spi_m_async_enable_tx_complete+0x5c>)
    ab80:	4798      	blx	r3

	if (state) {
    ab82:	78fb      	ldrb	r3, [r7, #3]
    ab84:	2b00      	cmp	r3, #0
    ab86:	d005      	beq.n	ab94 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    ab88:	687b      	ldr	r3, [r7, #4]
    ab8a:	681b      	ldr	r3, [r3, #0]
    ab8c:	4618      	mov	r0, r3
    ab8e:	4b08      	ldr	r3, [pc, #32]	; (abb0 <_spi_m_async_enable_tx_complete+0x60>)
    ab90:	4798      	blx	r3
    ab92:	e004      	b.n	ab9e <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	681b      	ldr	r3, [r3, #0]
    ab98:	4618      	mov	r0, r3
    ab9a:	4b06      	ldr	r3, [pc, #24]	; (abb4 <_spi_m_async_enable_tx_complete+0x64>)
    ab9c:	4798      	blx	r3
	}

	return ERR_NONE;
    ab9e:	2300      	movs	r3, #0
}
    aba0:	4618      	mov	r0, r3
    aba2:	3708      	adds	r7, #8
    aba4:	46bd      	mov	sp, r7
    aba6:	bd80      	pop	{r7, pc}
    aba8:	00013cfc 	.word	0x00013cfc
    abac:	00006a41 	.word	0x00006a41
    abb0:	00009179 	.word	0x00009179
    abb4:	00009193 	.word	0x00009193

0000abb8 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    abb8:	b580      	push	{r7, lr}
    abba:	b082      	sub	sp, #8
    abbc:	af00      	add	r7, sp, #0
    abbe:	6078      	str	r0, [r7, #4]
    abc0:	460b      	mov	r3, r1
    abc2:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	2b00      	cmp	r3, #0
    abc8:	d005      	beq.n	abd6 <_spi_m_async_write_one+0x1e>
    abca:	687b      	ldr	r3, [r7, #4]
    abcc:	681b      	ldr	r3, [r3, #0]
    abce:	2b00      	cmp	r3, #0
    abd0:	d001      	beq.n	abd6 <_spi_m_async_write_one+0x1e>
    abd2:	2301      	movs	r3, #1
    abd4:	e000      	b.n	abd8 <_spi_m_async_write_one+0x20>
    abd6:	2300      	movs	r3, #0
    abd8:	f003 0301 	and.w	r3, r3, #1
    abdc:	b2db      	uxtb	r3, r3
    abde:	f640 32b5 	movw	r2, #2997	; 0xbb5
    abe2:	4908      	ldr	r1, [pc, #32]	; (ac04 <_spi_m_async_write_one+0x4c>)
    abe4:	4618      	mov	r0, r3
    abe6:	4b08      	ldr	r3, [pc, #32]	; (ac08 <_spi_m_async_write_one+0x50>)
    abe8:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    abea:	687b      	ldr	r3, [r7, #4]
    abec:	681b      	ldr	r3, [r3, #0]
    abee:	887a      	ldrh	r2, [r7, #2]
    abf0:	4611      	mov	r1, r2
    abf2:	4618      	mov	r0, r3
    abf4:	4b05      	ldr	r3, [pc, #20]	; (ac0c <_spi_m_async_write_one+0x54>)
    abf6:	4798      	blx	r3

	return ERR_NONE;
    abf8:	2300      	movs	r3, #0
}
    abfa:	4618      	mov	r0, r3
    abfc:	3708      	adds	r7, #8
    abfe:	46bd      	mov	sp, r7
    ac00:	bd80      	pop	{r7, pc}
    ac02:	bf00      	nop
    ac04:	00013cfc 	.word	0x00013cfc
    ac08:	00006a41 	.word	0x00006a41
    ac0c:	000095ed 	.word	0x000095ed

0000ac10 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    ac10:	b580      	push	{r7, lr}
    ac12:	b082      	sub	sp, #8
    ac14:	af00      	add	r7, sp, #0
    ac16:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    ac18:	687b      	ldr	r3, [r7, #4]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d005      	beq.n	ac2a <_spi_m_async_read_one+0x1a>
    ac1e:	687b      	ldr	r3, [r7, #4]
    ac20:	681b      	ldr	r3, [r3, #0]
    ac22:	2b00      	cmp	r3, #0
    ac24:	d001      	beq.n	ac2a <_spi_m_async_read_one+0x1a>
    ac26:	2301      	movs	r3, #1
    ac28:	e000      	b.n	ac2c <_spi_m_async_read_one+0x1c>
    ac2a:	2300      	movs	r3, #0
    ac2c:	f003 0301 	and.w	r3, r3, #1
    ac30:	b2db      	uxtb	r3, r3
    ac32:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    ac36:	4907      	ldr	r1, [pc, #28]	; (ac54 <_spi_m_async_read_one+0x44>)
    ac38:	4618      	mov	r0, r3
    ac3a:	4b07      	ldr	r3, [pc, #28]	; (ac58 <_spi_m_async_read_one+0x48>)
    ac3c:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    ac3e:	687b      	ldr	r3, [r7, #4]
    ac40:	681b      	ldr	r3, [r3, #0]
    ac42:	4618      	mov	r0, r3
    ac44:	4b05      	ldr	r3, [pc, #20]	; (ac5c <_spi_m_async_read_one+0x4c>)
    ac46:	4798      	blx	r3
    ac48:	4603      	mov	r3, r0
    ac4a:	b29b      	uxth	r3, r3
}
    ac4c:	4618      	mov	r0, r3
    ac4e:	3708      	adds	r7, #8
    ac50:	46bd      	mov	sp, r7
    ac52:	bd80      	pop	{r7, pc}
    ac54:	00013cfc 	.word	0x00013cfc
    ac58:	00006a41 	.word	0x00006a41
    ac5c:	00009609 	.word	0x00009609

0000ac60 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    ac60:	b580      	push	{r7, lr}
    ac62:	b086      	sub	sp, #24
    ac64:	af00      	add	r7, sp, #0
    ac66:	60f8      	str	r0, [r7, #12]
    ac68:	460b      	mov	r3, r1
    ac6a:	607a      	str	r2, [r7, #4]
    ac6c:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    ac6e:	68fb      	ldr	r3, [r7, #12]
    ac70:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    ac72:	68fb      	ldr	r3, [r7, #12]
    ac74:	2b00      	cmp	r3, #0
    ac76:	d004      	beq.n	ac82 <_spi_m_async_register_callback+0x22>
    ac78:	7afb      	ldrb	r3, [r7, #11]
    ac7a:	2b03      	cmp	r3, #3
    ac7c:	d801      	bhi.n	ac82 <_spi_m_async_register_callback+0x22>
    ac7e:	2301      	movs	r3, #1
    ac80:	e000      	b.n	ac84 <_spi_m_async_register_callback+0x24>
    ac82:	2300      	movs	r3, #0
    ac84:	f003 0301 	and.w	r3, r3, #1
    ac88:	b2db      	uxtb	r3, r3
    ac8a:	f640 32e9 	movw	r2, #3049	; 0xbe9
    ac8e:	4909      	ldr	r1, [pc, #36]	; (acb4 <_spi_m_async_register_callback+0x54>)
    ac90:	4618      	mov	r0, r3
    ac92:	4b09      	ldr	r3, [pc, #36]	; (acb8 <_spi_m_async_register_callback+0x58>)
    ac94:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    ac96:	697b      	ldr	r3, [r7, #20]
    ac98:	3308      	adds	r3, #8
    ac9a:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    ac9c:	7afb      	ldrb	r3, [r7, #11]
    ac9e:	009b      	lsls	r3, r3, #2
    aca0:	693a      	ldr	r2, [r7, #16]
    aca2:	4413      	add	r3, r2
    aca4:	687a      	ldr	r2, [r7, #4]
    aca6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    aca8:	2300      	movs	r3, #0
}
    acaa:	4618      	mov	r0, r3
    acac:	3718      	adds	r7, #24
    acae:	46bd      	mov	sp, r7
    acb0:	bd80      	pop	{r7, pc}
    acb2:	bf00      	nop
    acb4:	00013cfc 	.word	0x00013cfc
    acb8:	00006a41 	.word	0x00006a41

0000acbc <_spi_m_async_set_irq_state>:
 * param[in] type The type of interrupt to disable/enable if applicable
 * param[in] state Enable or disable
 */
void _spi_m_async_set_irq_state(struct _spi_async_dev *const device, const enum _spi_async_dev_cb_type type,
                                const bool state)
{
    acbc:	b580      	push	{r7, lr}
    acbe:	b082      	sub	sp, #8
    acc0:	af00      	add	r7, sp, #0
    acc2:	6078      	str	r0, [r7, #4]
    acc4:	460b      	mov	r3, r1
    acc6:	70fb      	strb	r3, [r7, #3]
    acc8:	4613      	mov	r3, r2
    acca:	70bb      	strb	r3, [r7, #2]
	ASSERT(device);
    accc:	687b      	ldr	r3, [r7, #4]
    acce:	2b00      	cmp	r3, #0
    acd0:	bf14      	ite	ne
    acd2:	2301      	movne	r3, #1
    acd4:	2300      	moveq	r3, #0
    acd6:	b2db      	uxtb	r3, r3
    acd8:	f640 422a 	movw	r2, #3114	; 0xc2a
    acdc:	4908      	ldr	r1, [pc, #32]	; (ad00 <_spi_m_async_set_irq_state+0x44>)
    acde:	4618      	mov	r0, r3
    ace0:	4b08      	ldr	r3, [pc, #32]	; (ad04 <_spi_m_async_set_irq_state+0x48>)
    ace2:	4798      	blx	r3

	if (SPI_DEV_CB_ERROR == type) {
    ace4:	78fb      	ldrb	r3, [r7, #3]
    ace6:	2b03      	cmp	r3, #3
    ace8:	d106      	bne.n	acf8 <_spi_m_async_set_irq_state+0x3c>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    acea:	687b      	ldr	r3, [r7, #4]
    acec:	681b      	ldr	r3, [r3, #0]
    acee:	78ba      	ldrb	r2, [r7, #2]
    acf0:	4611      	mov	r1, r2
    acf2:	4618      	mov	r0, r3
    acf4:	4b04      	ldr	r3, [pc, #16]	; (ad08 <_spi_m_async_set_irq_state+0x4c>)
    acf6:	4798      	blx	r3
	}
}
    acf8:	bf00      	nop
    acfa:	3708      	adds	r7, #8
    acfc:	46bd      	mov	sp, r7
    acfe:	bd80      	pop	{r7, pc}
    ad00:	00013cfc 	.word	0x00013cfc
    ad04:	00006a41 	.word	0x00006a41
    ad08:	000091e1 	.word	0x000091e1

0000ad0c <__NVIC_EnableIRQ>:
{
    ad0c:	b480      	push	{r7}
    ad0e:	b083      	sub	sp, #12
    ad10:	af00      	add	r7, sp, #0
    ad12:	4603      	mov	r3, r0
    ad14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ad16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	db0b      	blt.n	ad36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ad1e:	4909      	ldr	r1, [pc, #36]	; (ad44 <__NVIC_EnableIRQ+0x38>)
    ad20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad24:	095b      	lsrs	r3, r3, #5
    ad26:	88fa      	ldrh	r2, [r7, #6]
    ad28:	f002 021f 	and.w	r2, r2, #31
    ad2c:	2001      	movs	r0, #1
    ad2e:	fa00 f202 	lsl.w	r2, r0, r2
    ad32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad36:	bf00      	nop
    ad38:	370c      	adds	r7, #12
    ad3a:	46bd      	mov	sp, r7
    ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad40:	4770      	bx	lr
    ad42:	bf00      	nop
    ad44:	e000e100 	.word	0xe000e100

0000ad48 <__NVIC_DisableIRQ>:
{
    ad48:	b480      	push	{r7}
    ad4a:	b083      	sub	sp, #12
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	4603      	mov	r3, r0
    ad50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ad52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad56:	2b00      	cmp	r3, #0
    ad58:	db10      	blt.n	ad7c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ad5a:	490b      	ldr	r1, [pc, #44]	; (ad88 <__NVIC_DisableIRQ+0x40>)
    ad5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad60:	095b      	lsrs	r3, r3, #5
    ad62:	88fa      	ldrh	r2, [r7, #6]
    ad64:	f002 021f 	and.w	r2, r2, #31
    ad68:	2001      	movs	r0, #1
    ad6a:	fa00 f202 	lsl.w	r2, r0, r2
    ad6e:	3320      	adds	r3, #32
    ad70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ad74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ad78:	f3bf 8f6f 	isb	sy
}
    ad7c:	bf00      	nop
    ad7e:	370c      	adds	r7, #12
    ad80:	46bd      	mov	sp, r7
    ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad86:	4770      	bx	lr
    ad88:	e000e100 	.word	0xe000e100

0000ad8c <__NVIC_ClearPendingIRQ>:
{
    ad8c:	b480      	push	{r7}
    ad8e:	b083      	sub	sp, #12
    ad90:	af00      	add	r7, sp, #0
    ad92:	4603      	mov	r3, r0
    ad94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ad96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	db0c      	blt.n	adb8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ad9e:	4909      	ldr	r1, [pc, #36]	; (adc4 <__NVIC_ClearPendingIRQ+0x38>)
    ada0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ada4:	095b      	lsrs	r3, r3, #5
    ada6:	88fa      	ldrh	r2, [r7, #6]
    ada8:	f002 021f 	and.w	r2, r2, #31
    adac:	2001      	movs	r0, #1
    adae:	fa00 f202 	lsl.w	r2, r0, r2
    adb2:	3360      	adds	r3, #96	; 0x60
    adb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    adb8:	bf00      	nop
    adba:	370c      	adds	r7, #12
    adbc:	46bd      	mov	sp, r7
    adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    adc2:	4770      	bx	lr
    adc4:	e000e100 	.word	0xe000e100

0000adc8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    adc8:	b480      	push	{r7}
    adca:	b083      	sub	sp, #12
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
    add0:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    add2:	bf00      	nop
    add4:	687b      	ldr	r3, [r7, #4]
    add6:	691a      	ldr	r2, [r3, #16]
    add8:	683b      	ldr	r3, [r7, #0]
    adda:	4013      	ands	r3, r2
    addc:	2b00      	cmp	r3, #0
    adde:	d1f9      	bne.n	add4 <hri_tc_wait_for_sync+0xc>
	};
}
    ade0:	bf00      	nop
    ade2:	370c      	adds	r7, #12
    ade4:	46bd      	mov	sp, r7
    ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
    adea:	4770      	bx	lr

0000adec <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    adec:	b480      	push	{r7}
    adee:	b083      	sub	sp, #12
    adf0:	af00      	add	r7, sp, #0
    adf2:	6078      	str	r0, [r7, #4]
    adf4:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    adf6:	687b      	ldr	r3, [r7, #4]
    adf8:	691a      	ldr	r2, [r3, #16]
    adfa:	683b      	ldr	r3, [r7, #0]
    adfc:	4013      	ands	r3, r2
    adfe:	2b00      	cmp	r3, #0
    ae00:	bf14      	ite	ne
    ae02:	2301      	movne	r3, #1
    ae04:	2300      	moveq	r3, #0
    ae06:	b2db      	uxtb	r3, r3
}
    ae08:	4618      	mov	r0, r3
    ae0a:	370c      	adds	r7, #12
    ae0c:	46bd      	mov	sp, r7
    ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae12:	4770      	bx	lr

0000ae14 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    ae14:	b480      	push	{r7}
    ae16:	b083      	sub	sp, #12
    ae18:	af00      	add	r7, sp, #0
    ae1a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    ae1c:	687b      	ldr	r3, [r7, #4]
    ae1e:	7a9b      	ldrb	r3, [r3, #10]
    ae20:	b2db      	uxtb	r3, r3
    ae22:	f003 0301 	and.w	r3, r3, #1
    ae26:	2b00      	cmp	r3, #0
    ae28:	bf14      	ite	ne
    ae2a:	2301      	movne	r3, #1
    ae2c:	2300      	moveq	r3, #0
    ae2e:	b2db      	uxtb	r3, r3
}
    ae30:	4618      	mov	r0, r3
    ae32:	370c      	adds	r7, #12
    ae34:	46bd      	mov	sp, r7
    ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae3a:	4770      	bx	lr

0000ae3c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    ae3c:	b480      	push	{r7}
    ae3e:	b083      	sub	sp, #12
    ae40:	af00      	add	r7, sp, #0
    ae42:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    ae44:	687b      	ldr	r3, [r7, #4]
    ae46:	2201      	movs	r2, #1
    ae48:	729a      	strb	r2, [r3, #10]
}
    ae4a:	bf00      	nop
    ae4c:	370c      	adds	r7, #12
    ae4e:	46bd      	mov	sp, r7
    ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae54:	4770      	bx	lr

0000ae56 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    ae56:	b480      	push	{r7}
    ae58:	b083      	sub	sp, #12
    ae5a:	af00      	add	r7, sp, #0
    ae5c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    ae5e:	687b      	ldr	r3, [r7, #4]
    ae60:	2202      	movs	r2, #2
    ae62:	729a      	strb	r2, [r3, #10]
}
    ae64:	bf00      	nop
    ae66:	370c      	adds	r7, #12
    ae68:	46bd      	mov	sp, r7
    ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae6e:	4770      	bx	lr

0000ae70 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    ae70:	b480      	push	{r7}
    ae72:	b083      	sub	sp, #12
    ae74:	af00      	add	r7, sp, #0
    ae76:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	2201      	movs	r2, #1
    ae7c:	725a      	strb	r2, [r3, #9]
}
    ae7e:	bf00      	nop
    ae80:	370c      	adds	r7, #12
    ae82:	46bd      	mov	sp, r7
    ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae88:	4770      	bx	lr

0000ae8a <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    ae8a:	b480      	push	{r7}
    ae8c:	b083      	sub	sp, #12
    ae8e:	af00      	add	r7, sp, #0
    ae90:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    ae92:	687b      	ldr	r3, [r7, #4]
    ae94:	7a5b      	ldrb	r3, [r3, #9]
    ae96:	b2db      	uxtb	r3, r3
    ae98:	085b      	lsrs	r3, r3, #1
    ae9a:	f003 0301 	and.w	r3, r3, #1
    ae9e:	2b00      	cmp	r3, #0
    aea0:	bf14      	ite	ne
    aea2:	2301      	movne	r3, #1
    aea4:	2300      	moveq	r3, #0
    aea6:	b2db      	uxtb	r3, r3
}
    aea8:	4618      	mov	r0, r3
    aeaa:	370c      	adds	r7, #12
    aeac:	46bd      	mov	sp, r7
    aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeb2:	4770      	bx	lr

0000aeb4 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    aeb4:	b580      	push	{r7, lr}
    aeb6:	b082      	sub	sp, #8
    aeb8:	af00      	add	r7, sp, #0
    aeba:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	681b      	ldr	r3, [r3, #0]
    aec0:	f043 0202 	orr.w	r2, r3, #2
    aec4:	687b      	ldr	r3, [r7, #4]
    aec6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    aec8:	2103      	movs	r1, #3
    aeca:	6878      	ldr	r0, [r7, #4]
    aecc:	4b02      	ldr	r3, [pc, #8]	; (aed8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    aece:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    aed0:	bf00      	nop
    aed2:	3708      	adds	r7, #8
    aed4:	46bd      	mov	sp, r7
    aed6:	bd80      	pop	{r7, pc}
    aed8:	0000adc9 	.word	0x0000adc9

0000aedc <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    aedc:	b580      	push	{r7, lr}
    aede:	b084      	sub	sp, #16
    aee0:	af00      	add	r7, sp, #0
    aee2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    aee4:	2103      	movs	r1, #3
    aee6:	6878      	ldr	r0, [r7, #4]
    aee8:	4b09      	ldr	r3, [pc, #36]	; (af10 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    aeea:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    aeec:	687b      	ldr	r3, [r7, #4]
    aeee:	681b      	ldr	r3, [r3, #0]
    aef0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    aef2:	68fb      	ldr	r3, [r7, #12]
    aef4:	085b      	lsrs	r3, r3, #1
    aef6:	f003 0301 	and.w	r3, r3, #1
    aefa:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    aefc:	68fb      	ldr	r3, [r7, #12]
    aefe:	2b00      	cmp	r3, #0
    af00:	bf14      	ite	ne
    af02:	2301      	movne	r3, #1
    af04:	2300      	moveq	r3, #0
    af06:	b2db      	uxtb	r3, r3
}
    af08:	4618      	mov	r0, r3
    af0a:	3710      	adds	r7, #16
    af0c:	46bd      	mov	sp, r7
    af0e:	bd80      	pop	{r7, pc}
    af10:	0000adc9 	.word	0x0000adc9

0000af14 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    af14:	b580      	push	{r7, lr}
    af16:	b082      	sub	sp, #8
    af18:	af00      	add	r7, sp, #0
    af1a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    af1c:	687b      	ldr	r3, [r7, #4]
    af1e:	681b      	ldr	r3, [r3, #0]
    af20:	f023 0202 	bic.w	r2, r3, #2
    af24:	687b      	ldr	r3, [r7, #4]
    af26:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    af28:	2103      	movs	r1, #3
    af2a:	6878      	ldr	r0, [r7, #4]
    af2c:	4b02      	ldr	r3, [pc, #8]	; (af38 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    af2e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    af30:	bf00      	nop
    af32:	3708      	adds	r7, #8
    af34:	46bd      	mov	sp, r7
    af36:	bd80      	pop	{r7, pc}
    af38:	0000adc9 	.word	0x0000adc9

0000af3c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    af3c:	b580      	push	{r7, lr}
    af3e:	b084      	sub	sp, #16
    af40:	af00      	add	r7, sp, #0
    af42:	6078      	str	r0, [r7, #4]
    af44:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    af46:	2103      	movs	r1, #3
    af48:	6878      	ldr	r0, [r7, #4]
    af4a:	4b07      	ldr	r3, [pc, #28]	; (af68 <hri_tc_get_CTRLA_reg+0x2c>)
    af4c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    af4e:	687b      	ldr	r3, [r7, #4]
    af50:	681b      	ldr	r3, [r3, #0]
    af52:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    af54:	68fa      	ldr	r2, [r7, #12]
    af56:	683b      	ldr	r3, [r7, #0]
    af58:	4013      	ands	r3, r2
    af5a:	60fb      	str	r3, [r7, #12]
	return tmp;
    af5c:	68fb      	ldr	r3, [r7, #12]
}
    af5e:	4618      	mov	r0, r3
    af60:	3710      	adds	r7, #16
    af62:	46bd      	mov	sp, r7
    af64:	bd80      	pop	{r7, pc}
    af66:	bf00      	nop
    af68:	0000adc9 	.word	0x0000adc9

0000af6c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    af6c:	b580      	push	{r7, lr}
    af6e:	b082      	sub	sp, #8
    af70:	af00      	add	r7, sp, #0
    af72:	6078      	str	r0, [r7, #4]
    af74:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    af76:	687b      	ldr	r3, [r7, #4]
    af78:	683a      	ldr	r2, [r7, #0]
    af7a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    af7c:	2103      	movs	r1, #3
    af7e:	6878      	ldr	r0, [r7, #4]
    af80:	4b02      	ldr	r3, [pc, #8]	; (af8c <hri_tc_write_CTRLA_reg+0x20>)
    af82:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    af84:	bf00      	nop
    af86:	3708      	adds	r7, #8
    af88:	46bd      	mov	sp, r7
    af8a:	bd80      	pop	{r7, pc}
    af8c:	0000adc9 	.word	0x0000adc9

0000af90 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    af90:	b480      	push	{r7}
    af92:	b083      	sub	sp, #12
    af94:	af00      	add	r7, sp, #0
    af96:	6078      	str	r0, [r7, #4]
    af98:	460b      	mov	r3, r1
    af9a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	887a      	ldrh	r2, [r7, #2]
    afa0:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    afa2:	bf00      	nop
    afa4:	370c      	adds	r7, #12
    afa6:	46bd      	mov	sp, r7
    afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    afac:	4770      	bx	lr

0000afae <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    afae:	b480      	push	{r7}
    afb0:	b083      	sub	sp, #12
    afb2:	af00      	add	r7, sp, #0
    afb4:	6078      	str	r0, [r7, #4]
    afb6:	460b      	mov	r3, r1
    afb8:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    afba:	687b      	ldr	r3, [r7, #4]
    afbc:	78fa      	ldrb	r2, [r7, #3]
    afbe:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    afc0:	bf00      	nop
    afc2:	370c      	adds	r7, #12
    afc4:	46bd      	mov	sp, r7
    afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    afca:	4770      	bx	lr

0000afcc <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    afcc:	b480      	push	{r7}
    afce:	b083      	sub	sp, #12
    afd0:	af00      	add	r7, sp, #0
    afd2:	6078      	str	r0, [r7, #4]
    afd4:	460b      	mov	r3, r1
    afd6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	78fa      	ldrb	r2, [r7, #3]
    afdc:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    afde:	bf00      	nop
    afe0:	370c      	adds	r7, #12
    afe2:	46bd      	mov	sp, r7
    afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    afe8:	4770      	bx	lr
	...

0000afec <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    afec:	b580      	push	{r7, lr}
    afee:	b082      	sub	sp, #8
    aff0:	af00      	add	r7, sp, #0
    aff2:	6078      	str	r0, [r7, #4]
    aff4:	460b      	mov	r3, r1
    aff6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	78fa      	ldrb	r2, [r7, #3]
    affc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    affe:	2120      	movs	r1, #32
    b000:	6878      	ldr	r0, [r7, #4]
    b002:	4b03      	ldr	r3, [pc, #12]	; (b010 <hri_tccount8_write_PER_reg+0x24>)
    b004:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b006:	bf00      	nop
    b008:	3708      	adds	r7, #8
    b00a:	46bd      	mov	sp, r7
    b00c:	bd80      	pop	{r7, pc}
    b00e:	bf00      	nop
    b010:	0000adc9 	.word	0x0000adc9

0000b014 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    b014:	b580      	push	{r7, lr}
    b016:	b082      	sub	sp, #8
    b018:	af00      	add	r7, sp, #0
    b01a:	6078      	str	r0, [r7, #4]
    b01c:	460b      	mov	r3, r1
    b01e:	70fb      	strb	r3, [r7, #3]
    b020:	4613      	mov	r3, r2
    b022:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    b024:	78fb      	ldrb	r3, [r7, #3]
    b026:	687a      	ldr	r2, [r7, #4]
    b028:	4413      	add	r3, r2
    b02a:	78ba      	ldrb	r2, [r7, #2]
    b02c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b02e:	21c0      	movs	r1, #192	; 0xc0
    b030:	6878      	ldr	r0, [r7, #4]
    b032:	4b03      	ldr	r3, [pc, #12]	; (b040 <hri_tccount8_write_CC_reg+0x2c>)
    b034:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b036:	bf00      	nop
    b038:	3708      	adds	r7, #8
    b03a:	46bd      	mov	sp, r7
    b03c:	bd80      	pop	{r7, pc}
    b03e:	bf00      	nop
    b040:	0000adc9 	.word	0x0000adc9

0000b044 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    b044:	b580      	push	{r7, lr}
    b046:	b082      	sub	sp, #8
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
    b04c:	460b      	mov	r3, r1
    b04e:	70fb      	strb	r3, [r7, #3]
    b050:	4613      	mov	r3, r2
    b052:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    b054:	78fb      	ldrb	r3, [r7, #3]
    b056:	687a      	ldr	r2, [r7, #4]
    b058:	330c      	adds	r3, #12
    b05a:	005b      	lsls	r3, r3, #1
    b05c:	4413      	add	r3, r2
    b05e:	883a      	ldrh	r2, [r7, #0]
    b060:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b062:	21c0      	movs	r1, #192	; 0xc0
    b064:	6878      	ldr	r0, [r7, #4]
    b066:	4b03      	ldr	r3, [pc, #12]	; (b074 <hri_tccount16_write_CC_reg+0x30>)
    b068:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b06a:	bf00      	nop
    b06c:	3708      	adds	r7, #8
    b06e:	46bd      	mov	sp, r7
    b070:	bd80      	pop	{r7, pc}
    b072:	bf00      	nop
    b074:	0000adc9 	.word	0x0000adc9

0000b078 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    b078:	b580      	push	{r7, lr}
    b07a:	b084      	sub	sp, #16
    b07c:	af00      	add	r7, sp, #0
    b07e:	60f8      	str	r0, [r7, #12]
    b080:	460b      	mov	r3, r1
    b082:	607a      	str	r2, [r7, #4]
    b084:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    b086:	7afb      	ldrb	r3, [r7, #11]
    b088:	68fa      	ldr	r2, [r7, #12]
    b08a:	3306      	adds	r3, #6
    b08c:	009b      	lsls	r3, r3, #2
    b08e:	4413      	add	r3, r2
    b090:	687a      	ldr	r2, [r7, #4]
    b092:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    b094:	21c0      	movs	r1, #192	; 0xc0
    b096:	68f8      	ldr	r0, [r7, #12]
    b098:	4b02      	ldr	r3, [pc, #8]	; (b0a4 <hri_tccount32_write_CC_reg+0x2c>)
    b09a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b09c:	bf00      	nop
    b09e:	3710      	adds	r7, #16
    b0a0:	46bd      	mov	sp, r7
    b0a2:	bd80      	pop	{r7, pc}
    b0a4:	0000adc9 	.word	0x0000adc9

0000b0a8 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    b0a8:	b580      	push	{r7, lr}
    b0aa:	b084      	sub	sp, #16
    b0ac:	af00      	add	r7, sp, #0
    b0ae:	6078      	str	r0, [r7, #4]
    b0b0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    b0b2:	6838      	ldr	r0, [r7, #0]
    b0b4:	4b93      	ldr	r3, [pc, #588]	; (b304 <_timer_init+0x25c>)
    b0b6:	4798      	blx	r3
    b0b8:	4603      	mov	r3, r0
    b0ba:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    b0bc:	687b      	ldr	r3, [r7, #4]
    b0be:	683a      	ldr	r2, [r7, #0]
    b0c0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    b0c2:	2299      	movs	r2, #153	; 0x99
    b0c4:	4990      	ldr	r1, [pc, #576]	; (b308 <_timer_init+0x260>)
    b0c6:	2001      	movs	r0, #1
    b0c8:	4b90      	ldr	r3, [pc, #576]	; (b30c <_timer_init+0x264>)
    b0ca:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b0cc:	2101      	movs	r1, #1
    b0ce:	6838      	ldr	r0, [r7, #0]
    b0d0:	4b8f      	ldr	r3, [pc, #572]	; (b310 <_timer_init+0x268>)
    b0d2:	4798      	blx	r3
    b0d4:	4603      	mov	r3, r0
    b0d6:	f083 0301 	eor.w	r3, r3, #1
    b0da:	b2db      	uxtb	r3, r3
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d011      	beq.n	b104 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b0e0:	2102      	movs	r1, #2
    b0e2:	6838      	ldr	r0, [r7, #0]
    b0e4:	4b8b      	ldr	r3, [pc, #556]	; (b314 <_timer_init+0x26c>)
    b0e6:	4798      	blx	r3
    b0e8:	4603      	mov	r3, r0
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d006      	beq.n	b0fc <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b0ee:	6838      	ldr	r0, [r7, #0]
    b0f0:	4b89      	ldr	r3, [pc, #548]	; (b318 <_timer_init+0x270>)
    b0f2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b0f4:	2102      	movs	r1, #2
    b0f6:	6838      	ldr	r0, [r7, #0]
    b0f8:	4b88      	ldr	r3, [pc, #544]	; (b31c <_timer_init+0x274>)
    b0fa:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b0fc:	2101      	movs	r1, #1
    b0fe:	6838      	ldr	r0, [r7, #0]
    b100:	4b87      	ldr	r3, [pc, #540]	; (b320 <_timer_init+0x278>)
    b102:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b104:	2101      	movs	r1, #1
    b106:	6838      	ldr	r0, [r7, #0]
    b108:	4b84      	ldr	r3, [pc, #528]	; (b31c <_timer_init+0x274>)
    b10a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b10c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b110:	4984      	ldr	r1, [pc, #528]	; (b324 <_timer_init+0x27c>)
    b112:	4613      	mov	r3, r2
    b114:	009b      	lsls	r3, r3, #2
    b116:	4413      	add	r3, r2
    b118:	009b      	lsls	r3, r3, #2
    b11a:	440b      	add	r3, r1
    b11c:	3304      	adds	r3, #4
    b11e:	681b      	ldr	r3, [r3, #0]
    b120:	4619      	mov	r1, r3
    b122:	6838      	ldr	r0, [r7, #0]
    b124:	4b7e      	ldr	r3, [pc, #504]	; (b320 <_timer_init+0x278>)
    b126:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b128:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b12c:	497d      	ldr	r1, [pc, #500]	; (b324 <_timer_init+0x27c>)
    b12e:	4613      	mov	r3, r2
    b130:	009b      	lsls	r3, r3, #2
    b132:	4413      	add	r3, r2
    b134:	009b      	lsls	r3, r3, #2
    b136:	440b      	add	r3, r1
    b138:	330a      	adds	r3, #10
    b13a:	781b      	ldrb	r3, [r3, #0]
    b13c:	4619      	mov	r1, r3
    b13e:	6838      	ldr	r0, [r7, #0]
    b140:	4b79      	ldr	r3, [pc, #484]	; (b328 <_timer_init+0x280>)
    b142:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b144:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b148:	4976      	ldr	r1, [pc, #472]	; (b324 <_timer_init+0x27c>)
    b14a:	4613      	mov	r3, r2
    b14c:	009b      	lsls	r3, r3, #2
    b14e:	4413      	add	r3, r2
    b150:	009b      	lsls	r3, r3, #2
    b152:	440b      	add	r3, r1
    b154:	3308      	adds	r3, #8
    b156:	881b      	ldrh	r3, [r3, #0]
    b158:	4619      	mov	r1, r3
    b15a:	6838      	ldr	r0, [r7, #0]
    b15c:	4b73      	ldr	r3, [pc, #460]	; (b32c <_timer_init+0x284>)
    b15e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    b160:	2101      	movs	r1, #1
    b162:	6838      	ldr	r0, [r7, #0]
    b164:	4b72      	ldr	r3, [pc, #456]	; (b330 <_timer_init+0x288>)
    b166:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b168:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b16c:	496d      	ldr	r1, [pc, #436]	; (b324 <_timer_init+0x27c>)
    b16e:	4613      	mov	r3, r2
    b170:	009b      	lsls	r3, r3, #2
    b172:	4413      	add	r3, r2
    b174:	009b      	lsls	r3, r3, #2
    b176:	440b      	add	r3, r1
    b178:	3304      	adds	r3, #4
    b17a:	681b      	ldr	r3, [r3, #0]
    b17c:	f003 030c 	and.w	r3, r3, #12
    b180:	2b08      	cmp	r3, #8
    b182:	d11e      	bne.n	b1c2 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b184:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b188:	4966      	ldr	r1, [pc, #408]	; (b324 <_timer_init+0x27c>)
    b18a:	4613      	mov	r3, r2
    b18c:	009b      	lsls	r3, r3, #2
    b18e:	4413      	add	r3, r2
    b190:	009b      	lsls	r3, r3, #2
    b192:	440b      	add	r3, r1
    b194:	330c      	adds	r3, #12
    b196:	681b      	ldr	r3, [r3, #0]
    b198:	461a      	mov	r2, r3
    b19a:	2100      	movs	r1, #0
    b19c:	6838      	ldr	r0, [r7, #0]
    b19e:	4b65      	ldr	r3, [pc, #404]	; (b334 <_timer_init+0x28c>)
    b1a0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b1a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1a6:	495f      	ldr	r1, [pc, #380]	; (b324 <_timer_init+0x27c>)
    b1a8:	4613      	mov	r3, r2
    b1aa:	009b      	lsls	r3, r3, #2
    b1ac:	4413      	add	r3, r2
    b1ae:	009b      	lsls	r3, r3, #2
    b1b0:	440b      	add	r3, r1
    b1b2:	3310      	adds	r3, #16
    b1b4:	681b      	ldr	r3, [r3, #0]
    b1b6:	461a      	mov	r2, r3
    b1b8:	2101      	movs	r1, #1
    b1ba:	6838      	ldr	r0, [r7, #0]
    b1bc:	4b5d      	ldr	r3, [pc, #372]	; (b334 <_timer_init+0x28c>)
    b1be:	4798      	blx	r3
    b1c0:	e06a      	b.n	b298 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b1c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1c6:	4957      	ldr	r1, [pc, #348]	; (b324 <_timer_init+0x27c>)
    b1c8:	4613      	mov	r3, r2
    b1ca:	009b      	lsls	r3, r3, #2
    b1cc:	4413      	add	r3, r2
    b1ce:	009b      	lsls	r3, r3, #2
    b1d0:	440b      	add	r3, r1
    b1d2:	3304      	adds	r3, #4
    b1d4:	681b      	ldr	r3, [r3, #0]
    b1d6:	f003 030c 	and.w	r3, r3, #12
    b1da:	2b00      	cmp	r3, #0
    b1dc:	d120      	bne.n	b220 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b1de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b1e2:	4950      	ldr	r1, [pc, #320]	; (b324 <_timer_init+0x27c>)
    b1e4:	4613      	mov	r3, r2
    b1e6:	009b      	lsls	r3, r3, #2
    b1e8:	4413      	add	r3, r2
    b1ea:	009b      	lsls	r3, r3, #2
    b1ec:	440b      	add	r3, r1
    b1ee:	330c      	adds	r3, #12
    b1f0:	681b      	ldr	r3, [r3, #0]
    b1f2:	b29b      	uxth	r3, r3
    b1f4:	461a      	mov	r2, r3
    b1f6:	2100      	movs	r1, #0
    b1f8:	6838      	ldr	r0, [r7, #0]
    b1fa:	4b4f      	ldr	r3, [pc, #316]	; (b338 <_timer_init+0x290>)
    b1fc:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b1fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b202:	4948      	ldr	r1, [pc, #288]	; (b324 <_timer_init+0x27c>)
    b204:	4613      	mov	r3, r2
    b206:	009b      	lsls	r3, r3, #2
    b208:	4413      	add	r3, r2
    b20a:	009b      	lsls	r3, r3, #2
    b20c:	440b      	add	r3, r1
    b20e:	3310      	adds	r3, #16
    b210:	681b      	ldr	r3, [r3, #0]
    b212:	b29b      	uxth	r3, r3
    b214:	461a      	mov	r2, r3
    b216:	2101      	movs	r1, #1
    b218:	6838      	ldr	r0, [r7, #0]
    b21a:	4b47      	ldr	r3, [pc, #284]	; (b338 <_timer_init+0x290>)
    b21c:	4798      	blx	r3
    b21e:	e03b      	b.n	b298 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    b220:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b224:	493f      	ldr	r1, [pc, #252]	; (b324 <_timer_init+0x27c>)
    b226:	4613      	mov	r3, r2
    b228:	009b      	lsls	r3, r3, #2
    b22a:	4413      	add	r3, r2
    b22c:	009b      	lsls	r3, r3, #2
    b22e:	440b      	add	r3, r1
    b230:	3304      	adds	r3, #4
    b232:	681b      	ldr	r3, [r3, #0]
    b234:	f003 030c 	and.w	r3, r3, #12
    b238:	2b04      	cmp	r3, #4
    b23a:	d12d      	bne.n	b298 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    b23c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b240:	4938      	ldr	r1, [pc, #224]	; (b324 <_timer_init+0x27c>)
    b242:	4613      	mov	r3, r2
    b244:	009b      	lsls	r3, r3, #2
    b246:	4413      	add	r3, r2
    b248:	009b      	lsls	r3, r3, #2
    b24a:	440b      	add	r3, r1
    b24c:	330c      	adds	r3, #12
    b24e:	681b      	ldr	r3, [r3, #0]
    b250:	b2db      	uxtb	r3, r3
    b252:	461a      	mov	r2, r3
    b254:	2100      	movs	r1, #0
    b256:	6838      	ldr	r0, [r7, #0]
    b258:	4b38      	ldr	r3, [pc, #224]	; (b33c <_timer_init+0x294>)
    b25a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    b25c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b260:	4930      	ldr	r1, [pc, #192]	; (b324 <_timer_init+0x27c>)
    b262:	4613      	mov	r3, r2
    b264:	009b      	lsls	r3, r3, #2
    b266:	4413      	add	r3, r2
    b268:	009b      	lsls	r3, r3, #2
    b26a:	440b      	add	r3, r1
    b26c:	3310      	adds	r3, #16
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	b2db      	uxtb	r3, r3
    b272:	461a      	mov	r2, r3
    b274:	2101      	movs	r1, #1
    b276:	6838      	ldr	r0, [r7, #0]
    b278:	4b30      	ldr	r3, [pc, #192]	; (b33c <_timer_init+0x294>)
    b27a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    b27c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b280:	4928      	ldr	r1, [pc, #160]	; (b324 <_timer_init+0x27c>)
    b282:	4613      	mov	r3, r2
    b284:	009b      	lsls	r3, r3, #2
    b286:	4413      	add	r3, r2
    b288:	009b      	lsls	r3, r3, #2
    b28a:	440b      	add	r3, r1
    b28c:	330b      	adds	r3, #11
    b28e:	781b      	ldrb	r3, [r3, #0]
    b290:	4619      	mov	r1, r3
    b292:	6838      	ldr	r0, [r7, #0]
    b294:	4b2a      	ldr	r3, [pc, #168]	; (b340 <_timer_init+0x298>)
    b296:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    b298:	6838      	ldr	r0, [r7, #0]
    b29a:	4b2a      	ldr	r3, [pc, #168]	; (b344 <_timer_init+0x29c>)
    b29c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    b29e:	6879      	ldr	r1, [r7, #4]
    b2a0:	6838      	ldr	r0, [r7, #0]
    b2a2:	4b29      	ldr	r3, [pc, #164]	; (b348 <_timer_init+0x2a0>)
    b2a4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b2a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2aa:	491e      	ldr	r1, [pc, #120]	; (b324 <_timer_init+0x27c>)
    b2ac:	4613      	mov	r3, r2
    b2ae:	009b      	lsls	r3, r3, #2
    b2b0:	4413      	add	r3, r2
    b2b2:	009b      	lsls	r3, r3, #2
    b2b4:	440b      	add	r3, r1
    b2b6:	3302      	adds	r3, #2
    b2b8:	f9b3 3000 	ldrsh.w	r3, [r3]
    b2bc:	4618      	mov	r0, r3
    b2be:	4b23      	ldr	r3, [pc, #140]	; (b34c <_timer_init+0x2a4>)
    b2c0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b2c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2c6:	4917      	ldr	r1, [pc, #92]	; (b324 <_timer_init+0x27c>)
    b2c8:	4613      	mov	r3, r2
    b2ca:	009b      	lsls	r3, r3, #2
    b2cc:	4413      	add	r3, r2
    b2ce:	009b      	lsls	r3, r3, #2
    b2d0:	440b      	add	r3, r1
    b2d2:	3302      	adds	r3, #2
    b2d4:	f9b3 3000 	ldrsh.w	r3, [r3]
    b2d8:	4618      	mov	r0, r3
    b2da:	4b1d      	ldr	r3, [pc, #116]	; (b350 <_timer_init+0x2a8>)
    b2dc:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b2de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b2e2:	4910      	ldr	r1, [pc, #64]	; (b324 <_timer_init+0x27c>)
    b2e4:	4613      	mov	r3, r2
    b2e6:	009b      	lsls	r3, r3, #2
    b2e8:	4413      	add	r3, r2
    b2ea:	009b      	lsls	r3, r3, #2
    b2ec:	440b      	add	r3, r1
    b2ee:	3302      	adds	r3, #2
    b2f0:	f9b3 3000 	ldrsh.w	r3, [r3]
    b2f4:	4618      	mov	r0, r3
    b2f6:	4b17      	ldr	r3, [pc, #92]	; (b354 <_timer_init+0x2ac>)
    b2f8:	4798      	blx	r3

	return ERR_NONE;
    b2fa:	2300      	movs	r3, #0
}
    b2fc:	4618      	mov	r0, r3
    b2fe:	3710      	adds	r7, #16
    b300:	46bd      	mov	sp, r7
    b302:	bd80      	pop	{r7, pc}
    b304:	0000b7fd 	.word	0x0000b7fd
    b308:	00013d6c 	.word	0x00013d6c
    b30c:	00006a41 	.word	0x00006a41
    b310:	0000aded 	.word	0x0000aded
    b314:	0000af3d 	.word	0x0000af3d
    b318:	0000af15 	.word	0x0000af15
    b31c:	0000adc9 	.word	0x0000adc9
    b320:	0000af6d 	.word	0x0000af6d
    b324:	20000060 	.word	0x20000060
    b328:	0000afcd 	.word	0x0000afcd
    b32c:	0000af91 	.word	0x0000af91
    b330:	0000afaf 	.word	0x0000afaf
    b334:	0000b079 	.word	0x0000b079
    b338:	0000b045 	.word	0x0000b045
    b33c:	0000b015 	.word	0x0000b015
    b340:	0000afed 	.word	0x0000afed
    b344:	0000ae71 	.word	0x0000ae71
    b348:	0000b865 	.word	0x0000b865
    b34c:	0000ad49 	.word	0x0000ad49
    b350:	0000ad8d 	.word	0x0000ad8d
    b354:	0000ad0d 	.word	0x0000ad0d

0000b358 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    b358:	b580      	push	{r7, lr}
    b35a:	b084      	sub	sp, #16
    b35c:	af00      	add	r7, sp, #0
    b35e:	6078      	str	r0, [r7, #4]
    b360:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    b362:	6838      	ldr	r0, [r7, #0]
    b364:	4b73      	ldr	r3, [pc, #460]	; (b534 <_pwm_init+0x1dc>)
    b366:	4798      	blx	r3
    b368:	4603      	mov	r3, r0
    b36a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    b36c:	687b      	ldr	r3, [r7, #4]
    b36e:	683a      	ldr	r2, [r7, #0]
    b370:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    b372:	2101      	movs	r1, #1
    b374:	6838      	ldr	r0, [r7, #0]
    b376:	4b70      	ldr	r3, [pc, #448]	; (b538 <_pwm_init+0x1e0>)
    b378:	4798      	blx	r3
    b37a:	4603      	mov	r3, r0
    b37c:	f083 0301 	eor.w	r3, r3, #1
    b380:	b2db      	uxtb	r3, r3
    b382:	2b00      	cmp	r3, #0
    b384:	d011      	beq.n	b3aa <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    b386:	2102      	movs	r1, #2
    b388:	6838      	ldr	r0, [r7, #0]
    b38a:	4b6c      	ldr	r3, [pc, #432]	; (b53c <_pwm_init+0x1e4>)
    b38c:	4798      	blx	r3
    b38e:	4603      	mov	r3, r0
    b390:	2b00      	cmp	r3, #0
    b392:	d006      	beq.n	b3a2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    b394:	6838      	ldr	r0, [r7, #0]
    b396:	4b6a      	ldr	r3, [pc, #424]	; (b540 <_pwm_init+0x1e8>)
    b398:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    b39a:	2102      	movs	r1, #2
    b39c:	6838      	ldr	r0, [r7, #0]
    b39e:	4b69      	ldr	r3, [pc, #420]	; (b544 <_pwm_init+0x1ec>)
    b3a0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    b3a2:	2101      	movs	r1, #1
    b3a4:	6838      	ldr	r0, [r7, #0]
    b3a6:	4b68      	ldr	r3, [pc, #416]	; (b548 <_pwm_init+0x1f0>)
    b3a8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b3aa:	2101      	movs	r1, #1
    b3ac:	6838      	ldr	r0, [r7, #0]
    b3ae:	4b65      	ldr	r3, [pc, #404]	; (b544 <_pwm_init+0x1ec>)
    b3b0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    b3b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b3b6:	4965      	ldr	r1, [pc, #404]	; (b54c <_pwm_init+0x1f4>)
    b3b8:	4613      	mov	r3, r2
    b3ba:	009b      	lsls	r3, r3, #2
    b3bc:	4413      	add	r3, r2
    b3be:	009b      	lsls	r3, r3, #2
    b3c0:	440b      	add	r3, r1
    b3c2:	3304      	adds	r3, #4
    b3c4:	681b      	ldr	r3, [r3, #0]
    b3c6:	4619      	mov	r1, r3
    b3c8:	6838      	ldr	r0, [r7, #0]
    b3ca:	4b5f      	ldr	r3, [pc, #380]	; (b548 <_pwm_init+0x1f0>)
    b3cc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    b3ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b3d2:	495e      	ldr	r1, [pc, #376]	; (b54c <_pwm_init+0x1f4>)
    b3d4:	4613      	mov	r3, r2
    b3d6:	009b      	lsls	r3, r3, #2
    b3d8:	4413      	add	r3, r2
    b3da:	009b      	lsls	r3, r3, #2
    b3dc:	440b      	add	r3, r1
    b3de:	330a      	adds	r3, #10
    b3e0:	781b      	ldrb	r3, [r3, #0]
    b3e2:	4619      	mov	r1, r3
    b3e4:	6838      	ldr	r0, [r7, #0]
    b3e6:	4b5a      	ldr	r3, [pc, #360]	; (b550 <_pwm_init+0x1f8>)
    b3e8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    b3ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b3ee:	4957      	ldr	r1, [pc, #348]	; (b54c <_pwm_init+0x1f4>)
    b3f0:	4613      	mov	r3, r2
    b3f2:	009b      	lsls	r3, r3, #2
    b3f4:	4413      	add	r3, r2
    b3f6:	009b      	lsls	r3, r3, #2
    b3f8:	440b      	add	r3, r1
    b3fa:	3308      	adds	r3, #8
    b3fc:	881b      	ldrh	r3, [r3, #0]
    b3fe:	4619      	mov	r1, r3
    b400:	6838      	ldr	r0, [r7, #0]
    b402:	4b54      	ldr	r3, [pc, #336]	; (b554 <_pwm_init+0x1fc>)
    b404:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    b406:	2103      	movs	r1, #3
    b408:	6838      	ldr	r0, [r7, #0]
    b40a:	4b53      	ldr	r3, [pc, #332]	; (b558 <_pwm_init+0x200>)
    b40c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    b40e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b412:	494e      	ldr	r1, [pc, #312]	; (b54c <_pwm_init+0x1f4>)
    b414:	4613      	mov	r3, r2
    b416:	009b      	lsls	r3, r3, #2
    b418:	4413      	add	r3, r2
    b41a:	009b      	lsls	r3, r3, #2
    b41c:	440b      	add	r3, r1
    b41e:	3304      	adds	r3, #4
    b420:	681b      	ldr	r3, [r3, #0]
    b422:	f003 030c 	and.w	r3, r3, #12
    b426:	2b08      	cmp	r3, #8
    b428:	d11e      	bne.n	b468 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    b42a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b42e:	4947      	ldr	r1, [pc, #284]	; (b54c <_pwm_init+0x1f4>)
    b430:	4613      	mov	r3, r2
    b432:	009b      	lsls	r3, r3, #2
    b434:	4413      	add	r3, r2
    b436:	009b      	lsls	r3, r3, #2
    b438:	440b      	add	r3, r1
    b43a:	330c      	adds	r3, #12
    b43c:	681b      	ldr	r3, [r3, #0]
    b43e:	461a      	mov	r2, r3
    b440:	2100      	movs	r1, #0
    b442:	6838      	ldr	r0, [r7, #0]
    b444:	4b45      	ldr	r3, [pc, #276]	; (b55c <_pwm_init+0x204>)
    b446:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    b448:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b44c:	493f      	ldr	r1, [pc, #252]	; (b54c <_pwm_init+0x1f4>)
    b44e:	4613      	mov	r3, r2
    b450:	009b      	lsls	r3, r3, #2
    b452:	4413      	add	r3, r2
    b454:	009b      	lsls	r3, r3, #2
    b456:	440b      	add	r3, r1
    b458:	3310      	adds	r3, #16
    b45a:	681b      	ldr	r3, [r3, #0]
    b45c:	461a      	mov	r2, r3
    b45e:	2101      	movs	r1, #1
    b460:	6838      	ldr	r0, [r7, #0]
    b462:	4b3e      	ldr	r3, [pc, #248]	; (b55c <_pwm_init+0x204>)
    b464:	4798      	blx	r3
    b466:	e031      	b.n	b4cc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    b468:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b46c:	4937      	ldr	r1, [pc, #220]	; (b54c <_pwm_init+0x1f4>)
    b46e:	4613      	mov	r3, r2
    b470:	009b      	lsls	r3, r3, #2
    b472:	4413      	add	r3, r2
    b474:	009b      	lsls	r3, r3, #2
    b476:	440b      	add	r3, r1
    b478:	3304      	adds	r3, #4
    b47a:	681b      	ldr	r3, [r3, #0]
    b47c:	f003 030c 	and.w	r3, r3, #12
    b480:	2b00      	cmp	r3, #0
    b482:	d120      	bne.n	b4c6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    b484:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b488:	4930      	ldr	r1, [pc, #192]	; (b54c <_pwm_init+0x1f4>)
    b48a:	4613      	mov	r3, r2
    b48c:	009b      	lsls	r3, r3, #2
    b48e:	4413      	add	r3, r2
    b490:	009b      	lsls	r3, r3, #2
    b492:	440b      	add	r3, r1
    b494:	330c      	adds	r3, #12
    b496:	681b      	ldr	r3, [r3, #0]
    b498:	b29b      	uxth	r3, r3
    b49a:	461a      	mov	r2, r3
    b49c:	2100      	movs	r1, #0
    b49e:	6838      	ldr	r0, [r7, #0]
    b4a0:	4b2f      	ldr	r3, [pc, #188]	; (b560 <_pwm_init+0x208>)
    b4a2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    b4a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b4a8:	4928      	ldr	r1, [pc, #160]	; (b54c <_pwm_init+0x1f4>)
    b4aa:	4613      	mov	r3, r2
    b4ac:	009b      	lsls	r3, r3, #2
    b4ae:	4413      	add	r3, r2
    b4b0:	009b      	lsls	r3, r3, #2
    b4b2:	440b      	add	r3, r1
    b4b4:	3310      	adds	r3, #16
    b4b6:	681b      	ldr	r3, [r3, #0]
    b4b8:	b29b      	uxth	r3, r3
    b4ba:	461a      	mov	r2, r3
    b4bc:	2101      	movs	r1, #1
    b4be:	6838      	ldr	r0, [r7, #0]
    b4c0:	4b27      	ldr	r3, [pc, #156]	; (b560 <_pwm_init+0x208>)
    b4c2:	4798      	blx	r3
    b4c4:	e002      	b.n	b4cc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    b4c6:	f04f 33ff 	mov.w	r3, #4294967295
    b4ca:	e02e      	b.n	b52a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    b4cc:	6879      	ldr	r1, [r7, #4]
    b4ce:	6838      	ldr	r0, [r7, #0]
    b4d0:	4b24      	ldr	r3, [pc, #144]	; (b564 <_pwm_init+0x20c>)
    b4d2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    b4d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b4d8:	491c      	ldr	r1, [pc, #112]	; (b54c <_pwm_init+0x1f4>)
    b4da:	4613      	mov	r3, r2
    b4dc:	009b      	lsls	r3, r3, #2
    b4de:	4413      	add	r3, r2
    b4e0:	009b      	lsls	r3, r3, #2
    b4e2:	440b      	add	r3, r1
    b4e4:	3302      	adds	r3, #2
    b4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
    b4ea:	4618      	mov	r0, r3
    b4ec:	4b1e      	ldr	r3, [pc, #120]	; (b568 <_pwm_init+0x210>)
    b4ee:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    b4f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b4f4:	4915      	ldr	r1, [pc, #84]	; (b54c <_pwm_init+0x1f4>)
    b4f6:	4613      	mov	r3, r2
    b4f8:	009b      	lsls	r3, r3, #2
    b4fa:	4413      	add	r3, r2
    b4fc:	009b      	lsls	r3, r3, #2
    b4fe:	440b      	add	r3, r1
    b500:	3302      	adds	r3, #2
    b502:	f9b3 3000 	ldrsh.w	r3, [r3]
    b506:	4618      	mov	r0, r3
    b508:	4b18      	ldr	r3, [pc, #96]	; (b56c <_pwm_init+0x214>)
    b50a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    b50c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    b510:	490e      	ldr	r1, [pc, #56]	; (b54c <_pwm_init+0x1f4>)
    b512:	4613      	mov	r3, r2
    b514:	009b      	lsls	r3, r3, #2
    b516:	4413      	add	r3, r2
    b518:	009b      	lsls	r3, r3, #2
    b51a:	440b      	add	r3, r1
    b51c:	3302      	adds	r3, #2
    b51e:	f9b3 3000 	ldrsh.w	r3, [r3]
    b522:	4618      	mov	r0, r3
    b524:	4b12      	ldr	r3, [pc, #72]	; (b570 <_pwm_init+0x218>)
    b526:	4798      	blx	r3

	return 0;
    b528:	2300      	movs	r3, #0
}
    b52a:	4618      	mov	r0, r3
    b52c:	3710      	adds	r7, #16
    b52e:	46bd      	mov	sp, r7
    b530:	bd80      	pop	{r7, pc}
    b532:	bf00      	nop
    b534:	0000b7fd 	.word	0x0000b7fd
    b538:	0000aded 	.word	0x0000aded
    b53c:	0000af3d 	.word	0x0000af3d
    b540:	0000af15 	.word	0x0000af15
    b544:	0000adc9 	.word	0x0000adc9
    b548:	0000af6d 	.word	0x0000af6d
    b54c:	20000060 	.word	0x20000060
    b550:	0000afcd 	.word	0x0000afcd
    b554:	0000af91 	.word	0x0000af91
    b558:	0000afaf 	.word	0x0000afaf
    b55c:	0000b079 	.word	0x0000b079
    b560:	0000b045 	.word	0x0000b045
    b564:	0000b865 	.word	0x0000b865
    b568:	0000ad49 	.word	0x0000ad49
    b56c:	0000ad8d 	.word	0x0000ad8d
    b570:	0000ad0d 	.word	0x0000ad0d

0000b574 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    b574:	b580      	push	{r7, lr}
    b576:	b082      	sub	sp, #8
    b578:	af00      	add	r7, sp, #0
    b57a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	68db      	ldr	r3, [r3, #12]
    b580:	4618      	mov	r0, r3
    b582:	4b03      	ldr	r3, [pc, #12]	; (b590 <_timer_start+0x1c>)
    b584:	4798      	blx	r3
}
    b586:	bf00      	nop
    b588:	3708      	adds	r7, #8
    b58a:	46bd      	mov	sp, r7
    b58c:	bd80      	pop	{r7, pc}
    b58e:	bf00      	nop
    b590:	0000aeb5 	.word	0x0000aeb5

0000b594 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    b594:	b580      	push	{r7, lr}
    b596:	b082      	sub	sp, #8
    b598:	af00      	add	r7, sp, #0
    b59a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	691b      	ldr	r3, [r3, #16]
    b5a0:	4618      	mov	r0, r3
    b5a2:	4b03      	ldr	r3, [pc, #12]	; (b5b0 <_pwm_enable+0x1c>)
    b5a4:	4798      	blx	r3
}
    b5a6:	bf00      	nop
    b5a8:	3708      	adds	r7, #8
    b5aa:	46bd      	mov	sp, r7
    b5ac:	bd80      	pop	{r7, pc}
    b5ae:	bf00      	nop
    b5b0:	0000aeb5 	.word	0x0000aeb5

0000b5b4 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    b5b4:	b580      	push	{r7, lr}
    b5b6:	b082      	sub	sp, #8
    b5b8:	af00      	add	r7, sp, #0
    b5ba:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    b5bc:	687b      	ldr	r3, [r7, #4]
    b5be:	68db      	ldr	r3, [r3, #12]
    b5c0:	4618      	mov	r0, r3
    b5c2:	4b03      	ldr	r3, [pc, #12]	; (b5d0 <_timer_stop+0x1c>)
    b5c4:	4798      	blx	r3
}
    b5c6:	bf00      	nop
    b5c8:	3708      	adds	r7, #8
    b5ca:	46bd      	mov	sp, r7
    b5cc:	bd80      	pop	{r7, pc}
    b5ce:	bf00      	nop
    b5d0:	0000af15 	.word	0x0000af15

0000b5d4 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    b5d4:	b580      	push	{r7, lr}
    b5d6:	b082      	sub	sp, #8
    b5d8:	af00      	add	r7, sp, #0
    b5da:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b5dc:	687b      	ldr	r3, [r7, #4]
    b5de:	68db      	ldr	r3, [r3, #12]
    b5e0:	4618      	mov	r0, r3
    b5e2:	4b03      	ldr	r3, [pc, #12]	; (b5f0 <_timer_is_started+0x1c>)
    b5e4:	4798      	blx	r3
    b5e6:	4603      	mov	r3, r0
}
    b5e8:	4618      	mov	r0, r3
    b5ea:	3708      	adds	r7, #8
    b5ec:	46bd      	mov	sp, r7
    b5ee:	bd80      	pop	{r7, pc}
    b5f0:	0000aedd 	.word	0x0000aedd

0000b5f4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    b5f4:	b580      	push	{r7, lr}
    b5f6:	b082      	sub	sp, #8
    b5f8:	af00      	add	r7, sp, #0
    b5fa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	691b      	ldr	r3, [r3, #16]
    b600:	4618      	mov	r0, r3
    b602:	4b03      	ldr	r3, [pc, #12]	; (b610 <_pwm_is_enabled+0x1c>)
    b604:	4798      	blx	r3
    b606:	4603      	mov	r3, r0
}
    b608:	4618      	mov	r0, r3
    b60a:	3708      	adds	r7, #8
    b60c:	46bd      	mov	sp, r7
    b60e:	bd80      	pop	{r7, pc}
    b610:	0000aedd 	.word	0x0000aedd

0000b614 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    b614:	b480      	push	{r7}
    b616:	af00      	add	r7, sp, #0
	return NULL;
    b618:	2300      	movs	r3, #0
}
    b61a:	4618      	mov	r0, r3
    b61c:	46bd      	mov	sp, r7
    b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b622:	4770      	bx	lr

0000b624 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    b624:	b480      	push	{r7}
    b626:	af00      	add	r7, sp, #0
	return NULL;
    b628:	2300      	movs	r3, #0
}
    b62a:	4618      	mov	r0, r3
    b62c:	46bd      	mov	sp, r7
    b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b632:	4770      	bx	lr

0000b634 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    b634:	b580      	push	{r7, lr}
    b636:	b084      	sub	sp, #16
    b638:	af00      	add	r7, sp, #0
    b63a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	68db      	ldr	r3, [r3, #12]
    b640:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    b642:	68f8      	ldr	r0, [r7, #12]
    b644:	4b0e      	ldr	r3, [pc, #56]	; (b680 <_timer_set_irq+0x4c>)
    b646:	4798      	blx	r3
    b648:	4603      	mov	r3, r0
    b64a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    b64c:	f240 12a7 	movw	r2, #423	; 0x1a7
    b650:	490c      	ldr	r1, [pc, #48]	; (b684 <_timer_set_irq+0x50>)
    b652:	2001      	movs	r0, #1
    b654:	4b0c      	ldr	r3, [pc, #48]	; (b688 <_timer_set_irq+0x54>)
    b656:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    b658:	f997 200b 	ldrsb.w	r2, [r7, #11]
    b65c:	490b      	ldr	r1, [pc, #44]	; (b68c <_timer_set_irq+0x58>)
    b65e:	4613      	mov	r3, r2
    b660:	009b      	lsls	r3, r3, #2
    b662:	4413      	add	r3, r2
    b664:	009b      	lsls	r3, r3, #2
    b666:	440b      	add	r3, r1
    b668:	3302      	adds	r3, #2
    b66a:	f9b3 3000 	ldrsh.w	r3, [r3]
    b66e:	b2db      	uxtb	r3, r3
    b670:	4618      	mov	r0, r3
    b672:	4b07      	ldr	r3, [pc, #28]	; (b690 <_timer_set_irq+0x5c>)
    b674:	4798      	blx	r3
}
    b676:	bf00      	nop
    b678:	3710      	adds	r7, #16
    b67a:	46bd      	mov	sp, r7
    b67c:	bd80      	pop	{r7, pc}
    b67e:	bf00      	nop
    b680:	0000b7fd 	.word	0x0000b7fd
    b684:	00013d6c 	.word	0x00013d6c
    b688:	00006a41 	.word	0x00006a41
    b68c:	20000060 	.word	0x20000060
    b690:	0000728d 	.word	0x0000728d

0000b694 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    b694:	b580      	push	{r7, lr}
    b696:	b084      	sub	sp, #16
    b698:	af00      	add	r7, sp, #0
    b69a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	68db      	ldr	r3, [r3, #12]
    b6a0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b6a2:	68f8      	ldr	r0, [r7, #12]
    b6a4:	4b07      	ldr	r3, [pc, #28]	; (b6c4 <tc_interrupt_handler+0x30>)
    b6a6:	4798      	blx	r3
    b6a8:	4603      	mov	r3, r0
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d006      	beq.n	b6bc <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b6ae:	68f8      	ldr	r0, [r7, #12]
    b6b0:	4b05      	ldr	r3, [pc, #20]	; (b6c8 <tc_interrupt_handler+0x34>)
    b6b2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	681b      	ldr	r3, [r3, #0]
    b6b8:	6878      	ldr	r0, [r7, #4]
    b6ba:	4798      	blx	r3
	}
}
    b6bc:	bf00      	nop
    b6be:	3710      	adds	r7, #16
    b6c0:	46bd      	mov	sp, r7
    b6c2:	bd80      	pop	{r7, pc}
    b6c4:	0000ae15 	.word	0x0000ae15
    b6c8:	0000ae3d 	.word	0x0000ae3d

0000b6cc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    b6cc:	b580      	push	{r7, lr}
    b6ce:	b084      	sub	sp, #16
    b6d0:	af00      	add	r7, sp, #0
    b6d2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b6d4:	687b      	ldr	r3, [r7, #4]
    b6d6:	691b      	ldr	r3, [r3, #16]
    b6d8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    b6da:	68f8      	ldr	r0, [r7, #12]
    b6dc:	4b12      	ldr	r3, [pc, #72]	; (b728 <tc_pwm_interrupt_handler+0x5c>)
    b6de:	4798      	blx	r3
    b6e0:	4603      	mov	r3, r0
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	d00a      	beq.n	b6fc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    b6e6:	68f8      	ldr	r0, [r7, #12]
    b6e8:	4b10      	ldr	r3, [pc, #64]	; (b72c <tc_pwm_interrupt_handler+0x60>)
    b6ea:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    b6ec:	687b      	ldr	r3, [r7, #4]
    b6ee:	681b      	ldr	r3, [r3, #0]
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	d003      	beq.n	b6fc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	681b      	ldr	r3, [r3, #0]
    b6f8:	6878      	ldr	r0, [r7, #4]
    b6fa:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    b6fc:	68f8      	ldr	r0, [r7, #12]
    b6fe:	4b0c      	ldr	r3, [pc, #48]	; (b730 <tc_pwm_interrupt_handler+0x64>)
    b700:	4798      	blx	r3
    b702:	4603      	mov	r3, r0
    b704:	2b00      	cmp	r3, #0
    b706:	d00a      	beq.n	b71e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    b708:	68f8      	ldr	r0, [r7, #12]
    b70a:	4b0a      	ldr	r3, [pc, #40]	; (b734 <tc_pwm_interrupt_handler+0x68>)
    b70c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    b70e:	687b      	ldr	r3, [r7, #4]
    b710:	685b      	ldr	r3, [r3, #4]
    b712:	2b00      	cmp	r3, #0
    b714:	d003      	beq.n	b71e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    b716:	687b      	ldr	r3, [r7, #4]
    b718:	685b      	ldr	r3, [r3, #4]
    b71a:	6878      	ldr	r0, [r7, #4]
    b71c:	4798      	blx	r3
		}
	}
}
    b71e:	bf00      	nop
    b720:	3710      	adds	r7, #16
    b722:	46bd      	mov	sp, r7
    b724:	bd80      	pop	{r7, pc}
    b726:	bf00      	nop
    b728:	0000ae15 	.word	0x0000ae15
    b72c:	0000ae3d 	.word	0x0000ae3d
    b730:	0000ae8b 	.word	0x0000ae8b
    b734:	0000ae57 	.word	0x0000ae57

0000b738 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    b738:	b580      	push	{r7, lr}
    b73a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    b73c:	4b03      	ldr	r3, [pc, #12]	; (b74c <TC0_Handler+0x14>)
    b73e:	681b      	ldr	r3, [r3, #0]
    b740:	4618      	mov	r0, r3
    b742:	4b03      	ldr	r3, [pc, #12]	; (b750 <TC0_Handler+0x18>)
    b744:	4798      	blx	r3
}
    b746:	bf00      	nop
    b748:	bd80      	pop	{r7, pc}
    b74a:	bf00      	nop
    b74c:	20001a54 	.word	0x20001a54
    b750:	0000b695 	.word	0x0000b695

0000b754 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    b754:	b580      	push	{r7, lr}
    b756:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc1_dev);
    b758:	4b03      	ldr	r3, [pc, #12]	; (b768 <TC1_Handler+0x14>)
    b75a:	681b      	ldr	r3, [r3, #0]
    b75c:	4618      	mov	r0, r3
    b75e:	4b03      	ldr	r3, [pc, #12]	; (b76c <TC1_Handler+0x18>)
    b760:	4798      	blx	r3
}
    b762:	bf00      	nop
    b764:	bd80      	pop	{r7, pc}
    b766:	bf00      	nop
    b768:	20001a58 	.word	0x20001a58
    b76c:	0000b6cd 	.word	0x0000b6cd

0000b770 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    b770:	b580      	push	{r7, lr}
    b772:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    b774:	4b03      	ldr	r3, [pc, #12]	; (b784 <TC2_Handler+0x14>)
    b776:	681b      	ldr	r3, [r3, #0]
    b778:	4618      	mov	r0, r3
    b77a:	4b03      	ldr	r3, [pc, #12]	; (b788 <TC2_Handler+0x18>)
    b77c:	4798      	blx	r3
}
    b77e:	bf00      	nop
    b780:	bd80      	pop	{r7, pc}
    b782:	bf00      	nop
    b784:	20001a5c 	.word	0x20001a5c
    b788:	0000b695 	.word	0x0000b695

0000b78c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    b78c:	b580      	push	{r7, lr}
    b78e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    b790:	4b03      	ldr	r3, [pc, #12]	; (b7a0 <TC3_Handler+0x14>)
    b792:	681b      	ldr	r3, [r3, #0]
    b794:	4618      	mov	r0, r3
    b796:	4b03      	ldr	r3, [pc, #12]	; (b7a4 <TC3_Handler+0x18>)
    b798:	4798      	blx	r3
}
    b79a:	bf00      	nop
    b79c:	bd80      	pop	{r7, pc}
    b79e:	bf00      	nop
    b7a0:	20001a60 	.word	0x20001a60
    b7a4:	0000b695 	.word	0x0000b695

0000b7a8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    b7a8:	b580      	push	{r7, lr}
    b7aa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    b7ac:	4b03      	ldr	r3, [pc, #12]	; (b7bc <TC4_Handler+0x14>)
    b7ae:	681b      	ldr	r3, [r3, #0]
    b7b0:	4618      	mov	r0, r3
    b7b2:	4b03      	ldr	r3, [pc, #12]	; (b7c0 <TC4_Handler+0x18>)
    b7b4:	4798      	blx	r3
}
    b7b6:	bf00      	nop
    b7b8:	bd80      	pop	{r7, pc}
    b7ba:	bf00      	nop
    b7bc:	20001a64 	.word	0x20001a64
    b7c0:	0000b695 	.word	0x0000b695

0000b7c4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    b7c4:	b580      	push	{r7, lr}
    b7c6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    b7c8:	4b03      	ldr	r3, [pc, #12]	; (b7d8 <TC5_Handler+0x14>)
    b7ca:	681b      	ldr	r3, [r3, #0]
    b7cc:	4618      	mov	r0, r3
    b7ce:	4b03      	ldr	r3, [pc, #12]	; (b7dc <TC5_Handler+0x18>)
    b7d0:	4798      	blx	r3
}
    b7d2:	bf00      	nop
    b7d4:	bd80      	pop	{r7, pc}
    b7d6:	bf00      	nop
    b7d8:	20001a68 	.word	0x20001a68
    b7dc:	0000b695 	.word	0x0000b695

0000b7e0 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    b7e0:	b580      	push	{r7, lr}
    b7e2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    b7e4:	4b03      	ldr	r3, [pc, #12]	; (b7f4 <TC6_Handler+0x14>)
    b7e6:	681b      	ldr	r3, [r3, #0]
    b7e8:	4618      	mov	r0, r3
    b7ea:	4b03      	ldr	r3, [pc, #12]	; (b7f8 <TC6_Handler+0x18>)
    b7ec:	4798      	blx	r3
}
    b7ee:	bf00      	nop
    b7f0:	bd80      	pop	{r7, pc}
    b7f2:	bf00      	nop
    b7f4:	20001a6c 	.word	0x20001a6c
    b7f8:	0000b695 	.word	0x0000b695

0000b7fc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    b7fc:	b580      	push	{r7, lr}
    b7fe:	b084      	sub	sp, #16
    b800:	af00      	add	r7, sp, #0
    b802:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    b804:	6878      	ldr	r0, [r7, #4]
    b806:	4b13      	ldr	r3, [pc, #76]	; (b854 <get_tc_index+0x58>)
    b808:	4798      	blx	r3
    b80a:	4603      	mov	r3, r0
    b80c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b80e:	2300      	movs	r3, #0
    b810:	73fb      	strb	r3, [r7, #15]
    b812:	e010      	b.n	b836 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    b814:	7bfa      	ldrb	r2, [r7, #15]
    b816:	4910      	ldr	r1, [pc, #64]	; (b858 <get_tc_index+0x5c>)
    b818:	4613      	mov	r3, r2
    b81a:	009b      	lsls	r3, r3, #2
    b81c:	4413      	add	r3, r2
    b81e:	009b      	lsls	r3, r3, #2
    b820:	440b      	add	r3, r1
    b822:	781b      	ldrb	r3, [r3, #0]
    b824:	7bba      	ldrb	r2, [r7, #14]
    b826:	429a      	cmp	r2, r3
    b828:	d102      	bne.n	b830 <get_tc_index+0x34>
			return i;
    b82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b82e:	e00d      	b.n	b84c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    b830:	7bfb      	ldrb	r3, [r7, #15]
    b832:	3301      	adds	r3, #1
    b834:	73fb      	strb	r3, [r7, #15]
    b836:	7bfb      	ldrb	r3, [r7, #15]
    b838:	2b06      	cmp	r3, #6
    b83a:	d9eb      	bls.n	b814 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    b83c:	f240 221a 	movw	r2, #538	; 0x21a
    b840:	4906      	ldr	r1, [pc, #24]	; (b85c <get_tc_index+0x60>)
    b842:	2000      	movs	r0, #0
    b844:	4b06      	ldr	r3, [pc, #24]	; (b860 <get_tc_index+0x64>)
    b846:	4798      	blx	r3
	return -1;
    b848:	f04f 33ff 	mov.w	r3, #4294967295
}
    b84c:	4618      	mov	r0, r3
    b84e:	3710      	adds	r7, #16
    b850:	46bd      	mov	sp, r7
    b852:	bd80      	pop	{r7, pc}
    b854:	0000b915 	.word	0x0000b915
    b858:	20000060 	.word	0x20000060
    b85c:	00013d6c 	.word	0x00013d6c
    b860:	00006a41 	.word	0x00006a41

0000b864 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    b864:	b480      	push	{r7}
    b866:	b083      	sub	sp, #12
    b868:	af00      	add	r7, sp, #0
    b86a:	6078      	str	r0, [r7, #4]
    b86c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    b86e:	687b      	ldr	r3, [r7, #4]
    b870:	4a1a      	ldr	r2, [pc, #104]	; (b8dc <_tc_init_irq_param+0x78>)
    b872:	4293      	cmp	r3, r2
    b874:	d102      	bne.n	b87c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    b876:	4a1a      	ldr	r2, [pc, #104]	; (b8e0 <_tc_init_irq_param+0x7c>)
    b878:	683b      	ldr	r3, [r7, #0]
    b87a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    b87c:	687b      	ldr	r3, [r7, #4]
    b87e:	4a19      	ldr	r2, [pc, #100]	; (b8e4 <_tc_init_irq_param+0x80>)
    b880:	4293      	cmp	r3, r2
    b882:	d102      	bne.n	b88a <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _pwm_device *)dev;
    b884:	4a18      	ldr	r2, [pc, #96]	; (b8e8 <_tc_init_irq_param+0x84>)
    b886:	683b      	ldr	r3, [r7, #0]
    b888:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	4a17      	ldr	r2, [pc, #92]	; (b8ec <_tc_init_irq_param+0x88>)
    b88e:	4293      	cmp	r3, r2
    b890:	d102      	bne.n	b898 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    b892:	4a17      	ldr	r2, [pc, #92]	; (b8f0 <_tc_init_irq_param+0x8c>)
    b894:	683b      	ldr	r3, [r7, #0]
    b896:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    b898:	687b      	ldr	r3, [r7, #4]
    b89a:	4a16      	ldr	r2, [pc, #88]	; (b8f4 <_tc_init_irq_param+0x90>)
    b89c:	4293      	cmp	r3, r2
    b89e:	d102      	bne.n	b8a6 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    b8a0:	4a15      	ldr	r2, [pc, #84]	; (b8f8 <_tc_init_irq_param+0x94>)
    b8a2:	683b      	ldr	r3, [r7, #0]
    b8a4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    b8a6:	687b      	ldr	r3, [r7, #4]
    b8a8:	4a14      	ldr	r2, [pc, #80]	; (b8fc <_tc_init_irq_param+0x98>)
    b8aa:	4293      	cmp	r3, r2
    b8ac:	d102      	bne.n	b8b4 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    b8ae:	4a14      	ldr	r2, [pc, #80]	; (b900 <_tc_init_irq_param+0x9c>)
    b8b0:	683b      	ldr	r3, [r7, #0]
    b8b2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    b8b4:	687b      	ldr	r3, [r7, #4]
    b8b6:	4a13      	ldr	r2, [pc, #76]	; (b904 <_tc_init_irq_param+0xa0>)
    b8b8:	4293      	cmp	r3, r2
    b8ba:	d102      	bne.n	b8c2 <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    b8bc:	4a12      	ldr	r2, [pc, #72]	; (b908 <_tc_init_irq_param+0xa4>)
    b8be:	683b      	ldr	r3, [r7, #0]
    b8c0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    b8c2:	687b      	ldr	r3, [r7, #4]
    b8c4:	4a11      	ldr	r2, [pc, #68]	; (b90c <_tc_init_irq_param+0xa8>)
    b8c6:	4293      	cmp	r3, r2
    b8c8:	d102      	bne.n	b8d0 <_tc_init_irq_param+0x6c>
		_tc6_dev = (struct _timer_device *)dev;
    b8ca:	4a11      	ldr	r2, [pc, #68]	; (b910 <_tc_init_irq_param+0xac>)
    b8cc:	683b      	ldr	r3, [r7, #0]
    b8ce:	6013      	str	r3, [r2, #0]
	}
}
    b8d0:	bf00      	nop
    b8d2:	370c      	adds	r7, #12
    b8d4:	46bd      	mov	sp, r7
    b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8da:	4770      	bx	lr
    b8dc:	40003800 	.word	0x40003800
    b8e0:	20001a54 	.word	0x20001a54
    b8e4:	40003c00 	.word	0x40003c00
    b8e8:	20001a58 	.word	0x20001a58
    b8ec:	4101a000 	.word	0x4101a000
    b8f0:	20001a5c 	.word	0x20001a5c
    b8f4:	4101c000 	.word	0x4101c000
    b8f8:	20001a60 	.word	0x20001a60
    b8fc:	42001400 	.word	0x42001400
    b900:	20001a64 	.word	0x20001a64
    b904:	42001800 	.word	0x42001800
    b908:	20001a68 	.word	0x20001a68
    b90c:	43001400 	.word	0x43001400
    b910:	20001a6c 	.word	0x20001a6c

0000b914 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    b914:	b4b0      	push	{r4, r5, r7}
    b916:	b08d      	sub	sp, #52	; 0x34
    b918:	af00      	add	r7, sp, #0
    b91a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    b91c:	4b13      	ldr	r3, [pc, #76]	; (b96c <_get_hardware_offset+0x58>)
    b91e:	f107 040c 	add.w	r4, r7, #12
    b922:	461d      	mov	r5, r3
    b924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b928:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b92c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b930:	2300      	movs	r3, #0
    b932:	62fb      	str	r3, [r7, #44]	; 0x2c
    b934:	e010      	b.n	b958 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b938:	009b      	lsls	r3, r3, #2
    b93a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b93e:	4413      	add	r3, r2
    b940:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b944:	461a      	mov	r2, r3
    b946:	687b      	ldr	r3, [r7, #4]
    b948:	429a      	cmp	r2, r3
    b94a:	d102      	bne.n	b952 <_get_hardware_offset+0x3e>
			return i;
    b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b94e:	b2db      	uxtb	r3, r3
    b950:	e006      	b.n	b960 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b954:	3301      	adds	r3, #1
    b956:	62fb      	str	r3, [r7, #44]	; 0x2c
    b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b95a:	2b07      	cmp	r3, #7
    b95c:	d9eb      	bls.n	b936 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    b95e:	2300      	movs	r3, #0
}
    b960:	4618      	mov	r0, r3
    b962:	3734      	adds	r7, #52	; 0x34
    b964:	46bd      	mov	sp, r7
    b966:	bcb0      	pop	{r4, r5, r7}
    b968:	4770      	bx	lr
    b96a:	bf00      	nop
    b96c:	00013d80 	.word	0x00013d80

0000b970 <__NVIC_EnableIRQ>:
{
    b970:	b480      	push	{r7}
    b972:	b083      	sub	sp, #12
    b974:	af00      	add	r7, sp, #0
    b976:	4603      	mov	r3, r0
    b978:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b97a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b97e:	2b00      	cmp	r3, #0
    b980:	db0b      	blt.n	b99a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b982:	4909      	ldr	r1, [pc, #36]	; (b9a8 <__NVIC_EnableIRQ+0x38>)
    b984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b988:	095b      	lsrs	r3, r3, #5
    b98a:	88fa      	ldrh	r2, [r7, #6]
    b98c:	f002 021f 	and.w	r2, r2, #31
    b990:	2001      	movs	r0, #1
    b992:	fa00 f202 	lsl.w	r2, r0, r2
    b996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b99a:	bf00      	nop
    b99c:	370c      	adds	r7, #12
    b99e:	46bd      	mov	sp, r7
    b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9a4:	4770      	bx	lr
    b9a6:	bf00      	nop
    b9a8:	e000e100 	.word	0xe000e100

0000b9ac <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    b9ac:	b480      	push	{r7}
    b9ae:	b087      	sub	sp, #28
    b9b0:	af00      	add	r7, sp, #0
    b9b2:	60f8      	str	r0, [r7, #12]
    b9b4:	460b      	mov	r3, r1
    b9b6:	607a      	str	r2, [r7, #4]
    b9b8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    b9ba:	7afa      	ldrb	r2, [r7, #11]
    b9bc:	68f9      	ldr	r1, [r7, #12]
    b9be:	4613      	mov	r3, r2
    b9c0:	009b      	lsls	r3, r3, #2
    b9c2:	4413      	add	r3, r2
    b9c4:	009b      	lsls	r3, r3, #2
    b9c6:	440b      	add	r3, r1
    b9c8:	3340      	adds	r3, #64	; 0x40
    b9ca:	681b      	ldr	r3, [r3, #0]
    b9cc:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    b9ce:	697a      	ldr	r2, [r7, #20]
    b9d0:	687b      	ldr	r3, [r7, #4]
    b9d2:	4013      	ands	r3, r2
    b9d4:	617b      	str	r3, [r7, #20]
	return tmp;
    b9d6:	697b      	ldr	r3, [r7, #20]
}
    b9d8:	4618      	mov	r0, r3
    b9da:	371c      	adds	r7, #28
    b9dc:	46bd      	mov	sp, r7
    b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9e2:	4770      	bx	lr

0000b9e4 <hri_oscctrl_get_STATUS_reg>:
{
    b9e4:	b480      	push	{r7}
    b9e6:	b085      	sub	sp, #20
    b9e8:	af00      	add	r7, sp, #0
    b9ea:	6078      	str	r0, [r7, #4]
    b9ec:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b9ee:	687b      	ldr	r3, [r7, #4]
    b9f0:	691b      	ldr	r3, [r3, #16]
    b9f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b9f4:	68fa      	ldr	r2, [r7, #12]
    b9f6:	683b      	ldr	r3, [r7, #0]
    b9f8:	4013      	ands	r3, r2
    b9fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    b9fc:	68fb      	ldr	r3, [r7, #12]
}
    b9fe:	4618      	mov	r0, r3
    ba00:	3714      	adds	r7, #20
    ba02:	46bd      	mov	sp, r7
    ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba08:	4770      	bx	lr

0000ba0a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    ba0a:	b480      	push	{r7}
    ba0c:	b085      	sub	sp, #20
    ba0e:	af00      	add	r7, sp, #0
    ba10:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    ba12:	687b      	ldr	r3, [r7, #4]
    ba14:	f893 3020 	ldrb.w	r3, [r3, #32]
    ba18:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    ba1a:	7bfb      	ldrb	r3, [r7, #15]
    ba1c:	f003 0301 	and.w	r3, r3, #1
    ba20:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ba22:	7bfb      	ldrb	r3, [r7, #15]
    ba24:	2b00      	cmp	r3, #0
    ba26:	bf14      	ite	ne
    ba28:	2301      	movne	r3, #1
    ba2a:	2300      	moveq	r3, #0
    ba2c:	b2db      	uxtb	r3, r3
}
    ba2e:	4618      	mov	r0, r3
    ba30:	3714      	adds	r7, #20
    ba32:	46bd      	mov	sp, r7
    ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba38:	4770      	bx	lr

0000ba3a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    ba3a:	b480      	push	{r7}
    ba3c:	b083      	sub	sp, #12
    ba3e:	af00      	add	r7, sp, #0
    ba40:	6078      	str	r0, [r7, #4]
    ba42:	460b      	mov	r3, r1
    ba44:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    ba46:	bf00      	nop
    ba48:	687b      	ldr	r3, [r7, #4]
    ba4a:	789b      	ldrb	r3, [r3, #2]
    ba4c:	b2da      	uxtb	r2, r3
    ba4e:	78fb      	ldrb	r3, [r7, #3]
    ba50:	4013      	ands	r3, r2
    ba52:	b2db      	uxtb	r3, r3
    ba54:	2b00      	cmp	r3, #0
    ba56:	d1f7      	bne.n	ba48 <hri_usb_wait_for_sync+0xe>
	};
}
    ba58:	bf00      	nop
    ba5a:	370c      	adds	r7, #12
    ba5c:	46bd      	mov	sp, r7
    ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba62:	4770      	bx	lr

0000ba64 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    ba64:	b480      	push	{r7}
    ba66:	b083      	sub	sp, #12
    ba68:	af00      	add	r7, sp, #0
    ba6a:	6078      	str	r0, [r7, #4]
    ba6c:	460b      	mov	r3, r1
    ba6e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    ba70:	687b      	ldr	r3, [r7, #4]
    ba72:	789b      	ldrb	r3, [r3, #2]
    ba74:	b2da      	uxtb	r2, r3
    ba76:	78fb      	ldrb	r3, [r7, #3]
    ba78:	4013      	ands	r3, r2
    ba7a:	b2db      	uxtb	r3, r3
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	bf14      	ite	ne
    ba80:	2301      	movne	r3, #1
    ba82:	2300      	moveq	r3, #0
    ba84:	b2db      	uxtb	r3, r3
}
    ba86:	4618      	mov	r0, r3
    ba88:	370c      	adds	r7, #12
    ba8a:	46bd      	mov	sp, r7
    ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba90:	4770      	bx	lr

0000ba92 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    ba92:	b480      	push	{r7}
    ba94:	b085      	sub	sp, #20
    ba96:	af00      	add	r7, sp, #0
    ba98:	6078      	str	r0, [r7, #4]
    ba9a:	460b      	mov	r3, r1
    ba9c:	70fb      	strb	r3, [r7, #3]
    ba9e:	4613      	mov	r3, r2
    baa0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    baa2:	78fb      	ldrb	r3, [r7, #3]
    baa4:	687a      	ldr	r2, [r7, #4]
    baa6:	3308      	adds	r3, #8
    baa8:	015b      	lsls	r3, r3, #5
    baaa:	4413      	add	r3, r2
    baac:	3307      	adds	r3, #7
    baae:	781b      	ldrb	r3, [r3, #0]
    bab0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bab2:	7bfa      	ldrb	r2, [r7, #15]
    bab4:	78bb      	ldrb	r3, [r7, #2]
    bab6:	4013      	ands	r3, r2
    bab8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    baba:	7bfb      	ldrb	r3, [r7, #15]
}
    babc:	4618      	mov	r0, r3
    babe:	3714      	adds	r7, #20
    bac0:	46bd      	mov	sp, r7
    bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bac6:	4770      	bx	lr

0000bac8 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    bac8:	b480      	push	{r7}
    baca:	b083      	sub	sp, #12
    bacc:	af00      	add	r7, sp, #0
    bace:	6078      	str	r0, [r7, #4]
    bad0:	460b      	mov	r3, r1
    bad2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    bad4:	78fb      	ldrb	r3, [r7, #3]
    bad6:	687a      	ldr	r2, [r7, #4]
    bad8:	3308      	adds	r3, #8
    bada:	015b      	lsls	r3, r3, #5
    badc:	4413      	add	r3, r2
    bade:	3307      	adds	r3, #7
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	b2db      	uxtb	r3, r3
}
    bae4:	4618      	mov	r0, r3
    bae6:	370c      	adds	r7, #12
    bae8:	46bd      	mov	sp, r7
    baea:	f85d 7b04 	ldr.w	r7, [sp], #4
    baee:	4770      	bx	lr

0000baf0 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    baf0:	b480      	push	{r7}
    baf2:	b083      	sub	sp, #12
    baf4:	af00      	add	r7, sp, #0
    baf6:	6078      	str	r0, [r7, #4]
    baf8:	460b      	mov	r3, r1
    bafa:	70fb      	strb	r3, [r7, #3]
    bafc:	4613      	mov	r3, r2
    bafe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bb00:	78fb      	ldrb	r3, [r7, #3]
    bb02:	687a      	ldr	r2, [r7, #4]
    bb04:	3308      	adds	r3, #8
    bb06:	015b      	lsls	r3, r3, #5
    bb08:	4413      	add	r3, r2
    bb0a:	3307      	adds	r3, #7
    bb0c:	78ba      	ldrb	r2, [r7, #2]
    bb0e:	701a      	strb	r2, [r3, #0]
}
    bb10:	bf00      	nop
    bb12:	370c      	adds	r7, #12
    bb14:	46bd      	mov	sp, r7
    bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb1a:	4770      	bx	lr

0000bb1c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    bb1c:	b480      	push	{r7}
    bb1e:	b083      	sub	sp, #12
    bb20:	af00      	add	r7, sp, #0
    bb22:	6078      	str	r0, [r7, #4]
    bb24:	460b      	mov	r3, r1
    bb26:	70fb      	strb	r3, [r7, #3]
    bb28:	4613      	mov	r3, r2
    bb2a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    bb2c:	78fb      	ldrb	r3, [r7, #3]
    bb2e:	687a      	ldr	r2, [r7, #4]
    bb30:	3308      	adds	r3, #8
    bb32:	015b      	lsls	r3, r3, #5
    bb34:	4413      	add	r3, r2
    bb36:	3305      	adds	r3, #5
    bb38:	78ba      	ldrb	r2, [r7, #2]
    bb3a:	701a      	strb	r2, [r3, #0]
}
    bb3c:	bf00      	nop
    bb3e:	370c      	adds	r7, #12
    bb40:	46bd      	mov	sp, r7
    bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb46:	4770      	bx	lr

0000bb48 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    bb48:	b480      	push	{r7}
    bb4a:	b083      	sub	sp, #12
    bb4c:	af00      	add	r7, sp, #0
    bb4e:	6078      	str	r0, [r7, #4]
    bb50:	460b      	mov	r3, r1
    bb52:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    bb54:	78fb      	ldrb	r3, [r7, #3]
    bb56:	687a      	ldr	r2, [r7, #4]
    bb58:	3308      	adds	r3, #8
    bb5a:	015b      	lsls	r3, r3, #5
    bb5c:	4413      	add	r3, r2
    bb5e:	3306      	adds	r3, #6
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	b2db      	uxtb	r3, r3
}
    bb64:	4618      	mov	r0, r3
    bb66:	370c      	adds	r7, #12
    bb68:	46bd      	mov	sp, r7
    bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb6e:	4770      	bx	lr

0000bb70 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    bb70:	b480      	push	{r7}
    bb72:	b083      	sub	sp, #12
    bb74:	af00      	add	r7, sp, #0
    bb76:	6078      	str	r0, [r7, #4]
    bb78:	460b      	mov	r3, r1
    bb7a:	70fb      	strb	r3, [r7, #3]
    bb7c:	4613      	mov	r3, r2
    bb7e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    bb80:	78fb      	ldrb	r3, [r7, #3]
    bb82:	687a      	ldr	r2, [r7, #4]
    bb84:	3308      	adds	r3, #8
    bb86:	015b      	lsls	r3, r3, #5
    bb88:	4413      	add	r3, r2
    bb8a:	3304      	adds	r3, #4
    bb8c:	78ba      	ldrb	r2, [r7, #2]
    bb8e:	701a      	strb	r2, [r3, #0]
}
    bb90:	bf00      	nop
    bb92:	370c      	adds	r7, #12
    bb94:	46bd      	mov	sp, r7
    bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb9a:	4770      	bx	lr

0000bb9c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    bb9c:	b480      	push	{r7}
    bb9e:	b083      	sub	sp, #12
    bba0:	af00      	add	r7, sp, #0
    bba2:	6078      	str	r0, [r7, #4]
    bba4:	460b      	mov	r3, r1
    bba6:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    bba8:	78fb      	ldrb	r3, [r7, #3]
    bbaa:	687a      	ldr	r2, [r7, #4]
    bbac:	015b      	lsls	r3, r3, #5
    bbae:	4413      	add	r3, r2
    bbb0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    bbb4:	2210      	movs	r2, #16
    bbb6:	701a      	strb	r2, [r3, #0]
}
    bbb8:	bf00      	nop
    bbba:	370c      	adds	r7, #12
    bbbc:	46bd      	mov	sp, r7
    bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbc2:	4770      	bx	lr

0000bbc4 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    bbc4:	b480      	push	{r7}
    bbc6:	b083      	sub	sp, #12
    bbc8:	af00      	add	r7, sp, #0
    bbca:	6078      	str	r0, [r7, #4]
    bbcc:	460b      	mov	r3, r1
    bbce:	70fb      	strb	r3, [r7, #3]
    bbd0:	4613      	mov	r3, r2
    bbd2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    bbd4:	78fb      	ldrb	r3, [r7, #3]
    bbd6:	687a      	ldr	r2, [r7, #4]
    bbd8:	015b      	lsls	r3, r3, #5
    bbda:	4413      	add	r3, r2
    bbdc:	f203 1309 	addw	r3, r3, #265	; 0x109
    bbe0:	78ba      	ldrb	r2, [r7, #2]
    bbe2:	701a      	strb	r2, [r3, #0]
}
    bbe4:	bf00      	nop
    bbe6:	370c      	adds	r7, #12
    bbe8:	46bd      	mov	sp, r7
    bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbee:	4770      	bx	lr

0000bbf0 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    bbf0:	b480      	push	{r7}
    bbf2:	b083      	sub	sp, #12
    bbf4:	af00      	add	r7, sp, #0
    bbf6:	6078      	str	r0, [r7, #4]
    bbf8:	460b      	mov	r3, r1
    bbfa:	70fb      	strb	r3, [r7, #3]
    bbfc:	4613      	mov	r3, r2
    bbfe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bc00:	78fb      	ldrb	r3, [r7, #3]
    bc02:	687a      	ldr	r2, [r7, #4]
    bc04:	015b      	lsls	r3, r3, #5
    bc06:	4413      	add	r3, r2
    bc08:	f503 7384 	add.w	r3, r3, #264	; 0x108
    bc0c:	78ba      	ldrb	r2, [r7, #2]
    bc0e:	701a      	strb	r2, [r3, #0]
}
    bc10:	bf00      	nop
    bc12:	370c      	adds	r7, #12
    bc14:	46bd      	mov	sp, r7
    bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc1a:	4770      	bx	lr

0000bc1c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    bc1c:	b480      	push	{r7}
    bc1e:	b085      	sub	sp, #20
    bc20:	af00      	add	r7, sp, #0
    bc22:	6078      	str	r0, [r7, #4]
    bc24:	460b      	mov	r3, r1
    bc26:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bc28:	78fb      	ldrb	r3, [r7, #3]
    bc2a:	687a      	ldr	r2, [r7, #4]
    bc2c:	3308      	adds	r3, #8
    bc2e:	015b      	lsls	r3, r3, #5
    bc30:	4413      	add	r3, r2
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    bc36:	7bfb      	ldrb	r3, [r7, #15]
    bc38:	f003 0307 	and.w	r3, r3, #7
    bc3c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bc3e:	7bfb      	ldrb	r3, [r7, #15]
}
    bc40:	4618      	mov	r0, r3
    bc42:	3714      	adds	r7, #20
    bc44:	46bd      	mov	sp, r7
    bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc4a:	4770      	bx	lr

0000bc4c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    bc4c:	b480      	push	{r7}
    bc4e:	b085      	sub	sp, #20
    bc50:	af00      	add	r7, sp, #0
    bc52:	6078      	str	r0, [r7, #4]
    bc54:	460b      	mov	r3, r1
    bc56:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bc58:	78fb      	ldrb	r3, [r7, #3]
    bc5a:	687a      	ldr	r2, [r7, #4]
    bc5c:	3308      	adds	r3, #8
    bc5e:	015b      	lsls	r3, r3, #5
    bc60:	4413      	add	r3, r2
    bc62:	781b      	ldrb	r3, [r3, #0]
    bc64:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    bc66:	7bfb      	ldrb	r3, [r7, #15]
    bc68:	091b      	lsrs	r3, r3, #4
    bc6a:	b2db      	uxtb	r3, r3
    bc6c:	f003 0307 	and.w	r3, r3, #7
    bc70:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bc72:	7bfb      	ldrb	r3, [r7, #15]
}
    bc74:	4618      	mov	r0, r3
    bc76:	3714      	adds	r7, #20
    bc78:	46bd      	mov	sp, r7
    bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc7e:	4770      	bx	lr

0000bc80 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    bc80:	b480      	push	{r7}
    bc82:	b083      	sub	sp, #12
    bc84:	af00      	add	r7, sp, #0
    bc86:	6078      	str	r0, [r7, #4]
    bc88:	460b      	mov	r3, r1
    bc8a:	70fb      	strb	r3, [r7, #3]
    bc8c:	4613      	mov	r3, r2
    bc8e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    bc90:	78fb      	ldrb	r3, [r7, #3]
    bc92:	687a      	ldr	r2, [r7, #4]
    bc94:	3308      	adds	r3, #8
    bc96:	015b      	lsls	r3, r3, #5
    bc98:	4413      	add	r3, r2
    bc9a:	78ba      	ldrb	r2, [r7, #2]
    bc9c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    bc9e:	bf00      	nop
    bca0:	370c      	adds	r7, #12
    bca2:	46bd      	mov	sp, r7
    bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bca8:	4770      	bx	lr

0000bcaa <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    bcaa:	b480      	push	{r7}
    bcac:	b083      	sub	sp, #12
    bcae:	af00      	add	r7, sp, #0
    bcb0:	6078      	str	r0, [r7, #4]
    bcb2:	460b      	mov	r3, r1
    bcb4:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bcb6:	78fb      	ldrb	r3, [r7, #3]
    bcb8:	687a      	ldr	r2, [r7, #4]
    bcba:	3308      	adds	r3, #8
    bcbc:	015b      	lsls	r3, r3, #5
    bcbe:	4413      	add	r3, r2
    bcc0:	781b      	ldrb	r3, [r3, #0]
    bcc2:	b2db      	uxtb	r3, r3
}
    bcc4:	4618      	mov	r0, r3
    bcc6:	370c      	adds	r7, #12
    bcc8:	46bd      	mov	sp, r7
    bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcce:	4770      	bx	lr

0000bcd0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    bcd0:	b480      	push	{r7}
    bcd2:	b083      	sub	sp, #12
    bcd4:	af00      	add	r7, sp, #0
    bcd6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    bcd8:	687b      	ldr	r3, [r7, #4]
    bcda:	8b9b      	ldrh	r3, [r3, #28]
    bcdc:	b29b      	uxth	r3, r3
}
    bcde:	4618      	mov	r0, r3
    bce0:	370c      	adds	r7, #12
    bce2:	46bd      	mov	sp, r7
    bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bce8:	4770      	bx	lr

0000bcea <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    bcea:	b480      	push	{r7}
    bcec:	b083      	sub	sp, #12
    bcee:	af00      	add	r7, sp, #0
    bcf0:	6078      	str	r0, [r7, #4]
    bcf2:	460b      	mov	r3, r1
    bcf4:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bcf6:	687b      	ldr	r3, [r7, #4]
    bcf8:	887a      	ldrh	r2, [r7, #2]
    bcfa:	839a      	strh	r2, [r3, #28]
}
    bcfc:	bf00      	nop
    bcfe:	370c      	adds	r7, #12
    bd00:	46bd      	mov	sp, r7
    bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd06:	4770      	bx	lr

0000bd08 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    bd08:	b480      	push	{r7}
    bd0a:	b083      	sub	sp, #12
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	6078      	str	r0, [r7, #4]
    bd10:	460b      	mov	r3, r1
    bd12:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bd14:	687b      	ldr	r3, [r7, #4]
    bd16:	887a      	ldrh	r2, [r7, #2]
    bd18:	831a      	strh	r2, [r3, #24]
}
    bd1a:	bf00      	nop
    bd1c:	370c      	adds	r7, #12
    bd1e:	46bd      	mov	sp, r7
    bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd24:	4770      	bx	lr

0000bd26 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    bd26:	b480      	push	{r7}
    bd28:	b083      	sub	sp, #12
    bd2a:	af00      	add	r7, sp, #0
    bd2c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    bd2e:	687b      	ldr	r3, [r7, #4]
    bd30:	8b1b      	ldrh	r3, [r3, #24]
    bd32:	b29b      	uxth	r3, r3
}
    bd34:	4618      	mov	r0, r3
    bd36:	370c      	adds	r7, #12
    bd38:	46bd      	mov	sp, r7
    bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd3e:	4770      	bx	lr

0000bd40 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    bd40:	b480      	push	{r7}
    bd42:	b083      	sub	sp, #12
    bd44:	af00      	add	r7, sp, #0
    bd46:	6078      	str	r0, [r7, #4]
    bd48:	460b      	mov	r3, r1
    bd4a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bd4c:	687b      	ldr	r3, [r7, #4]
    bd4e:	887a      	ldrh	r2, [r7, #2]
    bd50:	829a      	strh	r2, [r3, #20]
}
    bd52:	bf00      	nop
    bd54:	370c      	adds	r7, #12
    bd56:	46bd      	mov	sp, r7
    bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd5c:	4770      	bx	lr

0000bd5e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    bd5e:	b480      	push	{r7}
    bd60:	b085      	sub	sp, #20
    bd62:	af00      	add	r7, sp, #0
    bd64:	6078      	str	r0, [r7, #4]
    bd66:	460b      	mov	r3, r1
    bd68:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    bd6a:	687b      	ldr	r3, [r7, #4]
    bd6c:	789b      	ldrb	r3, [r3, #2]
    bd6e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bd70:	7bfa      	ldrb	r2, [r7, #15]
    bd72:	78fb      	ldrb	r3, [r7, #3]
    bd74:	4013      	ands	r3, r2
    bd76:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bd78:	7bfb      	ldrb	r3, [r7, #15]
}
    bd7a:	4618      	mov	r0, r3
    bd7c:	3714      	adds	r7, #20
    bd7e:	46bd      	mov	sp, r7
    bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd84:	4770      	bx	lr
	...

0000bd88 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    bd88:	b580      	push	{r7, lr}
    bd8a:	b082      	sub	sp, #8
    bd8c:	af00      	add	r7, sp, #0
    bd8e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    bd90:	687b      	ldr	r3, [r7, #4]
    bd92:	781b      	ldrb	r3, [r3, #0]
    bd94:	b2db      	uxtb	r3, r3
    bd96:	f023 0302 	bic.w	r3, r3, #2
    bd9a:	b2da      	uxtb	r2, r3
    bd9c:	687b      	ldr	r3, [r7, #4]
    bd9e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    bda0:	2103      	movs	r1, #3
    bda2:	6878      	ldr	r0, [r7, #4]
    bda4:	4b02      	ldr	r3, [pc, #8]	; (bdb0 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    bda6:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bda8:	bf00      	nop
    bdaa:	3708      	adds	r7, #8
    bdac:	46bd      	mov	sp, r7
    bdae:	bd80      	pop	{r7, pc}
    bdb0:	0000ba3b 	.word	0x0000ba3b

0000bdb4 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    bdb4:	b580      	push	{r7, lr}
    bdb6:	b084      	sub	sp, #16
    bdb8:	af00      	add	r7, sp, #0
    bdba:	6078      	str	r0, [r7, #4]
    bdbc:	460b      	mov	r3, r1
    bdbe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bdc0:	2103      	movs	r1, #3
    bdc2:	6878      	ldr	r0, [r7, #4]
    bdc4:	4b06      	ldr	r3, [pc, #24]	; (bde0 <hri_usb_get_CTRLA_reg+0x2c>)
    bdc6:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    bdc8:	687b      	ldr	r3, [r7, #4]
    bdca:	781b      	ldrb	r3, [r3, #0]
    bdcc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    bdce:	7bfa      	ldrb	r2, [r7, #15]
    bdd0:	78fb      	ldrb	r3, [r7, #3]
    bdd2:	4013      	ands	r3, r2
    bdd4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    bdd6:	7bfb      	ldrb	r3, [r7, #15]
}
    bdd8:	4618      	mov	r0, r3
    bdda:	3710      	adds	r7, #16
    bddc:	46bd      	mov	sp, r7
    bdde:	bd80      	pop	{r7, pc}
    bde0:	0000ba3b 	.word	0x0000ba3b

0000bde4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    bde4:	b580      	push	{r7, lr}
    bde6:	b082      	sub	sp, #8
    bde8:	af00      	add	r7, sp, #0
    bdea:	6078      	str	r0, [r7, #4]
    bdec:	460b      	mov	r3, r1
    bdee:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    bdf0:	687b      	ldr	r3, [r7, #4]
    bdf2:	78fa      	ldrb	r2, [r7, #3]
    bdf4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    bdf6:	2103      	movs	r1, #3
    bdf8:	6878      	ldr	r0, [r7, #4]
    bdfa:	4b03      	ldr	r3, [pc, #12]	; (be08 <hri_usb_write_CTRLA_reg+0x24>)
    bdfc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    bdfe:	bf00      	nop
    be00:	3708      	adds	r7, #8
    be02:	46bd      	mov	sp, r7
    be04:	bd80      	pop	{r7, pc}
    be06:	bf00      	nop
    be08:	0000ba3b 	.word	0x0000ba3b

0000be0c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    be0c:	b580      	push	{r7, lr}
    be0e:	b082      	sub	sp, #8
    be10:	af00      	add	r7, sp, #0
    be12:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    be14:	2103      	movs	r1, #3
    be16:	6878      	ldr	r0, [r7, #4]
    be18:	4b04      	ldr	r3, [pc, #16]	; (be2c <hri_usb_read_CTRLA_reg+0x20>)
    be1a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    be1c:	687b      	ldr	r3, [r7, #4]
    be1e:	781b      	ldrb	r3, [r3, #0]
    be20:	b2db      	uxtb	r3, r3
}
    be22:	4618      	mov	r0, r3
    be24:	3708      	adds	r7, #8
    be26:	46bd      	mov	sp, r7
    be28:	bd80      	pop	{r7, pc}
    be2a:	bf00      	nop
    be2c:	0000ba3b 	.word	0x0000ba3b

0000be30 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    be30:	b480      	push	{r7}
    be32:	b083      	sub	sp, #12
    be34:	af00      	add	r7, sp, #0
    be36:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    be38:	687b      	ldr	r3, [r7, #4]
    be3a:	891b      	ldrh	r3, [r3, #8]
    be3c:	b29b      	uxth	r3, r3
    be3e:	f023 0301 	bic.w	r3, r3, #1
    be42:	b29a      	uxth	r2, r3
    be44:	687b      	ldr	r3, [r7, #4]
    be46:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    be48:	bf00      	nop
    be4a:	370c      	adds	r7, #12
    be4c:	46bd      	mov	sp, r7
    be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    be52:	4770      	bx	lr

0000be54 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    be54:	b480      	push	{r7}
    be56:	b083      	sub	sp, #12
    be58:	af00      	add	r7, sp, #0
    be5a:	6078      	str	r0, [r7, #4]
    be5c:	460b      	mov	r3, r1
    be5e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    be60:	687b      	ldr	r3, [r7, #4]
    be62:	887a      	ldrh	r2, [r7, #2]
    be64:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    be66:	bf00      	nop
    be68:	370c      	adds	r7, #12
    be6a:	46bd      	mov	sp, r7
    be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    be70:	4770      	bx	lr

0000be72 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    be72:	b480      	push	{r7}
    be74:	b083      	sub	sp, #12
    be76:	af00      	add	r7, sp, #0
    be78:	6078      	str	r0, [r7, #4]
    be7a:	460b      	mov	r3, r1
    be7c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    be7e:	687b      	ldr	r3, [r7, #4]
    be80:	78fa      	ldrb	r2, [r7, #3]
    be82:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    be84:	bf00      	nop
    be86:	370c      	adds	r7, #12
    be88:	46bd      	mov	sp, r7
    be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    be8e:	4770      	bx	lr

0000be90 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    be90:	b480      	push	{r7}
    be92:	b083      	sub	sp, #12
    be94:	af00      	add	r7, sp, #0
    be96:	6078      	str	r0, [r7, #4]
    be98:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    be9a:	687b      	ldr	r3, [r7, #4]
    be9c:	683a      	ldr	r2, [r7, #0]
    be9e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    bea0:	bf00      	nop
    bea2:	370c      	adds	r7, #12
    bea4:	46bd      	mov	sp, r7
    bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    beaa:	4770      	bx	lr

0000beac <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    beac:	b480      	push	{r7}
    beae:	b083      	sub	sp, #12
    beb0:	af00      	add	r7, sp, #0
    beb2:	6078      	str	r0, [r7, #4]
    beb4:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    beb6:	2300      	movs	r3, #0
}
    beb8:	4618      	mov	r0, r3
    beba:	370c      	adds	r7, #12
    bebc:	46bd      	mov	sp, r7
    bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    bec2:	4770      	bx	lr

0000bec4 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    bec4:	b480      	push	{r7}
    bec6:	b085      	sub	sp, #20
    bec8:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    beca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bece:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    bed0:	4b28      	ldr	r3, [pc, #160]	; (bf74 <_usb_load_calib+0xb0>)
    bed2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    bed4:	f003 031f 	and.w	r3, r3, #31
    bed8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    beda:	4b26      	ldr	r3, [pc, #152]	; (bf74 <_usb_load_calib+0xb0>)
    bedc:	681b      	ldr	r3, [r3, #0]
    bede:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    bee0:	f003 031f 	and.w	r3, r3, #31
    bee4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    bee6:	4b23      	ldr	r3, [pc, #140]	; (bf74 <_usb_load_calib+0xb0>)
    bee8:	681b      	ldr	r3, [r3, #0]
    beea:	0a9b      	lsrs	r3, r3, #10
    beec:	f003 0307 	and.w	r3, r3, #7
    bef0:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    bef2:	68fb      	ldr	r3, [r7, #12]
    bef4:	2b00      	cmp	r3, #0
    bef6:	d002      	beq.n	befe <_usb_load_calib+0x3a>
    bef8:	68fb      	ldr	r3, [r7, #12]
    befa:	2b1f      	cmp	r3, #31
    befc:	d101      	bne.n	bf02 <_usb_load_calib+0x3e>
		pad_transn = 9;
    befe:	2309      	movs	r3, #9
    bf00:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    bf02:	68bb      	ldr	r3, [r7, #8]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d002      	beq.n	bf0e <_usb_load_calib+0x4a>
    bf08:	68bb      	ldr	r3, [r7, #8]
    bf0a:	2b1f      	cmp	r3, #31
    bf0c:	d101      	bne.n	bf12 <_usb_load_calib+0x4e>
		pad_transp = 25;
    bf0e:	2319      	movs	r3, #25
    bf10:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    bf12:	687b      	ldr	r3, [r7, #4]
    bf14:	2b00      	cmp	r3, #0
    bf16:	d002      	beq.n	bf1e <_usb_load_calib+0x5a>
    bf18:	687b      	ldr	r3, [r7, #4]
    bf1a:	2b07      	cmp	r3, #7
    bf1c:	d101      	bne.n	bf22 <_usb_load_calib+0x5e>
		pad_trim = 6;
    bf1e:	2306      	movs	r3, #6
    bf20:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    bf22:	68fb      	ldr	r3, [r7, #12]
    bf24:	b29b      	uxth	r3, r3
    bf26:	019b      	lsls	r3, r3, #6
    bf28:	b29b      	uxth	r3, r3
    bf2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    bf2e:	b29a      	uxth	r2, r3
    bf30:	68bb      	ldr	r3, [r7, #8]
    bf32:	b29b      	uxth	r3, r3
    bf34:	f003 031f 	and.w	r3, r3, #31
    bf38:	b29b      	uxth	r3, r3
    bf3a:	4313      	orrs	r3, r2
    bf3c:	b29a      	uxth	r2, r3
    bf3e:	687b      	ldr	r3, [r7, #4]
    bf40:	b29b      	uxth	r3, r3
    bf42:	031b      	lsls	r3, r3, #12
    bf44:	b29b      	uxth	r3, r3
    bf46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    bf4a:	b29b      	uxth	r3, r3
    bf4c:	4313      	orrs	r3, r2
    bf4e:	b29a      	uxth	r2, r3
    bf50:	683b      	ldr	r3, [r7, #0]
    bf52:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    bf54:	683a      	ldr	r2, [r7, #0]
    bf56:	78d3      	ldrb	r3, [r2, #3]
    bf58:	f043 0303 	orr.w	r3, r3, #3
    bf5c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    bf5e:	683a      	ldr	r2, [r7, #0]
    bf60:	78d3      	ldrb	r3, [r2, #3]
    bf62:	f043 030c 	orr.w	r3, r3, #12
    bf66:	70d3      	strb	r3, [r2, #3]
}
    bf68:	bf00      	nop
    bf6a:	3714      	adds	r7, #20
    bf6c:	46bd      	mov	sp, r7
    bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf72:	4770      	bx	lr
    bf74:	00800084 	.word	0x00800084

0000bf78 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    bf78:	b580      	push	{r7, lr}
    bf7a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    bf7c:	bf00      	nop
    bf7e:	2203      	movs	r2, #3
    bf80:	2100      	movs	r1, #0
    bf82:	4804      	ldr	r0, [pc, #16]	; (bf94 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    bf84:	4b04      	ldr	r3, [pc, #16]	; (bf98 <_usb_d_dev_wait_dpll_rdy+0x20>)
    bf86:	4798      	blx	r3
    bf88:	4603      	mov	r3, r0
    bf8a:	2b03      	cmp	r3, #3
    bf8c:	d1f7      	bne.n	bf7e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    bf8e:	bf00      	nop
    bf90:	bd80      	pop	{r7, pc}
    bf92:	bf00      	nop
    bf94:	40001000 	.word	0x40001000
    bf98:	0000b9ad 	.word	0x0000b9ad

0000bf9c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    bf9c:	b580      	push	{r7, lr}
    bf9e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    bfa0:	480e      	ldr	r0, [pc, #56]	; (bfdc <_usb_d_dev_wait_dfll_rdy+0x40>)
    bfa2:	4b0f      	ldr	r3, [pc, #60]	; (bfe0 <_usb_d_dev_wait_dfll_rdy+0x44>)
    bfa4:	4798      	blx	r3
    bfa6:	4603      	mov	r3, r0
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d00a      	beq.n	bfc2 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    bfac:	bf00      	nop
    bfae:	f44f 6110 	mov.w	r1, #2304	; 0x900
    bfb2:	480a      	ldr	r0, [pc, #40]	; (bfdc <_usb_d_dev_wait_dfll_rdy+0x40>)
    bfb4:	4b0b      	ldr	r3, [pc, #44]	; (bfe4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bfb6:	4798      	blx	r3
    bfb8:	4603      	mov	r3, r0
    bfba:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    bfbe:	d1f6      	bne.n	bfae <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    bfc0:	e009      	b.n	bfd6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    bfc2:	bf00      	nop
    bfc4:	f44f 7180 	mov.w	r1, #256	; 0x100
    bfc8:	4804      	ldr	r0, [pc, #16]	; (bfdc <_usb_d_dev_wait_dfll_rdy+0x40>)
    bfca:	4b06      	ldr	r3, [pc, #24]	; (bfe4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    bfcc:	4798      	blx	r3
    bfce:	4603      	mov	r3, r0
    bfd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bfd4:	d1f6      	bne.n	bfc4 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    bfd6:	bf00      	nop
    bfd8:	bd80      	pop	{r7, pc}
    bfda:	bf00      	nop
    bfdc:	40001000 	.word	0x40001000
    bfe0:	0000ba0b 	.word	0x0000ba0b
    bfe4:	0000b9e5 	.word	0x0000b9e5

0000bfe8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    bfe8:	b580      	push	{r7, lr}
    bfea:	b082      	sub	sp, #8
    bfec:	af00      	add	r7, sp, #0
    bfee:	4603      	mov	r3, r0
    bff0:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    bff2:	79fb      	ldrb	r3, [r7, #7]
    bff4:	2b00      	cmp	r3, #0
    bff6:	d102      	bne.n	bffe <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    bff8:	4b05      	ldr	r3, [pc, #20]	; (c010 <_usb_d_dev_wait_clk_rdy+0x28>)
    bffa:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    bffc:	e004      	b.n	c008 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    bffe:	79fb      	ldrb	r3, [r7, #7]
    c000:	2b01      	cmp	r3, #1
    c002:	d101      	bne.n	c008 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    c004:	4b03      	ldr	r3, [pc, #12]	; (c014 <_usb_d_dev_wait_clk_rdy+0x2c>)
    c006:	4798      	blx	r3
}
    c008:	bf00      	nop
    c00a:	3708      	adds	r7, #8
    c00c:	46bd      	mov	sp, r7
    c00e:	bd80      	pop	{r7, pc}
    c010:	0000bf9d 	.word	0x0000bf9d
    c014:	0000bf79 	.word	0x0000bf79

0000c018 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    c018:	b580      	push	{r7, lr}
    c01a:	b082      	sub	sp, #8
    c01c:	af00      	add	r7, sp, #0
    c01e:	4603      	mov	r3, r0
    c020:	6039      	str	r1, [r7, #0]
    c022:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    c024:	683b      	ldr	r3, [r7, #0]
    c026:	b2da      	uxtb	r2, r3
    c028:	79fb      	ldrb	r3, [r7, #7]
    c02a:	4619      	mov	r1, r3
    c02c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c030:	4b02      	ldr	r3, [pc, #8]	; (c03c <_usbd_ep_int_ack+0x24>)
    c032:	4798      	blx	r3
}
    c034:	bf00      	nop
    c036:	3708      	adds	r7, #8
    c038:	46bd      	mov	sp, r7
    c03a:	bd80      	pop	{r7, pc}
    c03c:	0000baf1 	.word	0x0000baf1

0000c040 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    c040:	b580      	push	{r7, lr}
    c042:	b082      	sub	sp, #8
    c044:	af00      	add	r7, sp, #0
    c046:	4603      	mov	r3, r0
    c048:	6039      	str	r1, [r7, #0]
    c04a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    c04c:	683b      	ldr	r3, [r7, #0]
    c04e:	b2da      	uxtb	r2, r3
    c050:	79fb      	ldrb	r3, [r7, #7]
    c052:	4619      	mov	r1, r3
    c054:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c058:	4b02      	ldr	r3, [pc, #8]	; (c064 <_usbd_ep_int_en+0x24>)
    c05a:	4798      	blx	r3
}
    c05c:	bf00      	nop
    c05e:	3708      	adds	r7, #8
    c060:	46bd      	mov	sp, r7
    c062:	bd80      	pop	{r7, pc}
    c064:	0000bbc5 	.word	0x0000bbc5

0000c068 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    c068:	b580      	push	{r7, lr}
    c06a:	b082      	sub	sp, #8
    c06c:	af00      	add	r7, sp, #0
    c06e:	4603      	mov	r3, r0
    c070:	6039      	str	r1, [r7, #0]
    c072:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    c074:	683b      	ldr	r3, [r7, #0]
    c076:	b2da      	uxtb	r2, r3
    c078:	79fb      	ldrb	r3, [r7, #7]
    c07a:	4619      	mov	r1, r3
    c07c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c080:	4b02      	ldr	r3, [pc, #8]	; (c08c <_usbd_ep_int_dis+0x24>)
    c082:	4798      	blx	r3
}
    c084:	bf00      	nop
    c086:	3708      	adds	r7, #8
    c088:	46bd      	mov	sp, r7
    c08a:	bd80      	pop	{r7, pc}
    c08c:	0000bbf1 	.word	0x0000bbf1

0000c090 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    c090:	b580      	push	{r7, lr}
    c092:	b082      	sub	sp, #8
    c094:	af00      	add	r7, sp, #0
    c096:	4603      	mov	r3, r0
    c098:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    c09a:	79fb      	ldrb	r3, [r7, #7]
    c09c:	4619      	mov	r1, r3
    c09e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c0a2:	4b06      	ldr	r3, [pc, #24]	; (c0bc <_usbd_ep_is_ctrl+0x2c>)
    c0a4:	4798      	blx	r3
    c0a6:	4603      	mov	r3, r0
    c0a8:	2b11      	cmp	r3, #17
    c0aa:	bf0c      	ite	eq
    c0ac:	2301      	moveq	r3, #1
    c0ae:	2300      	movne	r3, #0
    c0b0:	b2db      	uxtb	r3, r3
}
    c0b2:	4618      	mov	r0, r3
    c0b4:	3708      	adds	r7, #8
    c0b6:	46bd      	mov	sp, r7
    c0b8:	bd80      	pop	{r7, pc}
    c0ba:	bf00      	nop
    c0bc:	0000bcab 	.word	0x0000bcab

0000c0c0 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    c0c0:	b580      	push	{r7, lr}
    c0c2:	b082      	sub	sp, #8
    c0c4:	af00      	add	r7, sp, #0
    c0c6:	4603      	mov	r3, r0
    c0c8:	71fb      	strb	r3, [r7, #7]
    c0ca:	460b      	mov	r3, r1
    c0cc:	71bb      	strb	r3, [r7, #6]
    c0ce:	4613      	mov	r3, r2
    c0d0:	717b      	strb	r3, [r7, #5]
	if (st) {
    c0d2:	797b      	ldrb	r3, [r7, #5]
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	d00b      	beq.n	c0f0 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c0d8:	79bb      	ldrb	r3, [r7, #6]
    c0da:	2210      	movs	r2, #16
    c0dc:	fa02 f303 	lsl.w	r3, r2, r3
    c0e0:	b2da      	uxtb	r2, r3
    c0e2:	79fb      	ldrb	r3, [r7, #7]
    c0e4:	4619      	mov	r1, r3
    c0e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c0ea:	4b09      	ldr	r3, [pc, #36]	; (c110 <_usbd_ep_set_stall+0x50>)
    c0ec:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    c0ee:	e00a      	b.n	c106 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c0f0:	79bb      	ldrb	r3, [r7, #6]
    c0f2:	2210      	movs	r2, #16
    c0f4:	fa02 f303 	lsl.w	r3, r2, r3
    c0f8:	b2da      	uxtb	r2, r3
    c0fa:	79fb      	ldrb	r3, [r7, #7]
    c0fc:	4619      	mov	r1, r3
    c0fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c102:	4b04      	ldr	r3, [pc, #16]	; (c114 <_usbd_ep_set_stall+0x54>)
    c104:	4798      	blx	r3
}
    c106:	bf00      	nop
    c108:	3708      	adds	r7, #8
    c10a:	46bd      	mov	sp, r7
    c10c:	bd80      	pop	{r7, pc}
    c10e:	bf00      	nop
    c110:	0000bb1d 	.word	0x0000bb1d
    c114:	0000bb71 	.word	0x0000bb71

0000c118 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    c118:	b580      	push	{r7, lr}
    c11a:	b084      	sub	sp, #16
    c11c:	af00      	add	r7, sp, #0
    c11e:	4603      	mov	r3, r0
    c120:	460a      	mov	r2, r1
    c122:	71fb      	strb	r3, [r7, #7]
    c124:	4613      	mov	r3, r2
    c126:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    c128:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c12c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c12e:	79fb      	ldrb	r3, [r7, #7]
    c130:	4619      	mov	r1, r3
    c132:	68f8      	ldr	r0, [r7, #12]
    c134:	4b08      	ldr	r3, [pc, #32]	; (c158 <_usbd_ep_is_stalled+0x40>)
    c136:	4798      	blx	r3
    c138:	4603      	mov	r3, r0
    c13a:	4619      	mov	r1, r3
    c13c:	79bb      	ldrb	r3, [r7, #6]
    c13e:	2210      	movs	r2, #16
    c140:	fa02 f303 	lsl.w	r3, r2, r3
    c144:	400b      	ands	r3, r1
    c146:	2b00      	cmp	r3, #0
    c148:	bf14      	ite	ne
    c14a:	2301      	movne	r3, #1
    c14c:	2300      	moveq	r3, #0
    c14e:	b2db      	uxtb	r3, r3
}
    c150:	4618      	mov	r0, r3
    c152:	3710      	adds	r7, #16
    c154:	46bd      	mov	sp, r7
    c156:	bd80      	pop	{r7, pc}
    c158:	0000bb49 	.word	0x0000bb49

0000c15c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    c15c:	b580      	push	{r7, lr}
    c15e:	b084      	sub	sp, #16
    c160:	af00      	add	r7, sp, #0
    c162:	4603      	mov	r3, r0
    c164:	460a      	mov	r2, r1
    c166:	71fb      	strb	r3, [r7, #7]
    c168:	4613      	mov	r3, r2
    c16a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    c16c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c170:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    c172:	79fb      	ldrb	r3, [r7, #7]
    c174:	4619      	mov	r1, r3
    c176:	68f8      	ldr	r0, [r7, #12]
    c178:	4b08      	ldr	r3, [pc, #32]	; (c19c <_usbd_ep_is_stall_sent+0x40>)
    c17a:	4798      	blx	r3
    c17c:	4603      	mov	r3, r0
    c17e:	4619      	mov	r1, r3
    c180:	79bb      	ldrb	r3, [r7, #6]
    c182:	2220      	movs	r2, #32
    c184:	fa02 f303 	lsl.w	r3, r2, r3
    c188:	400b      	ands	r3, r1
    c18a:	2b00      	cmp	r3, #0
    c18c:	bf14      	ite	ne
    c18e:	2301      	movne	r3, #1
    c190:	2300      	moveq	r3, #0
    c192:	b2db      	uxtb	r3, r3
}
    c194:	4618      	mov	r0, r3
    c196:	3710      	adds	r7, #16
    c198:	46bd      	mov	sp, r7
    c19a:	bd80      	pop	{r7, pc}
    c19c:	0000bac9 	.word	0x0000bac9

0000c1a0 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b082      	sub	sp, #8
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	460a      	mov	r2, r1
    c1aa:	71fb      	strb	r3, [r7, #7]
    c1ac:	4613      	mov	r3, r2
    c1ae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    c1b0:	79bb      	ldrb	r3, [r7, #6]
    c1b2:	2220      	movs	r2, #32
    c1b4:	409a      	lsls	r2, r3
    c1b6:	79fb      	ldrb	r3, [r7, #7]
    c1b8:	4611      	mov	r1, r2
    c1ba:	4618      	mov	r0, r3
    c1bc:	4b02      	ldr	r3, [pc, #8]	; (c1c8 <_usbd_ep_ack_stall+0x28>)
    c1be:	4798      	blx	r3
}
    c1c0:	bf00      	nop
    c1c2:	3708      	adds	r7, #8
    c1c4:	46bd      	mov	sp, r7
    c1c6:	bd80      	pop	{r7, pc}
    c1c8:	0000c019 	.word	0x0000c019

0000c1cc <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    c1cc:	b580      	push	{r7, lr}
    c1ce:	b082      	sub	sp, #8
    c1d0:	af00      	add	r7, sp, #0
    c1d2:	4603      	mov	r3, r0
    c1d4:	71fb      	strb	r3, [r7, #7]
    c1d6:	460b      	mov	r3, r1
    c1d8:	71bb      	strb	r3, [r7, #6]
    c1da:	4613      	mov	r3, r2
    c1dc:	717b      	strb	r3, [r7, #5]
	if (en) {
    c1de:	797b      	ldrb	r3, [r7, #5]
    c1e0:	2b00      	cmp	r3, #0
    c1e2:	d008      	beq.n	c1f6 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c1e4:	79bb      	ldrb	r3, [r7, #6]
    c1e6:	2220      	movs	r2, #32
    c1e8:	409a      	lsls	r2, r3
    c1ea:	79fb      	ldrb	r3, [r7, #7]
    c1ec:	4611      	mov	r1, r2
    c1ee:	4618      	mov	r0, r3
    c1f0:	4b07      	ldr	r3, [pc, #28]	; (c210 <_usbd_ep_int_stall_en+0x44>)
    c1f2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    c1f4:	e007      	b.n	c206 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c1f6:	79bb      	ldrb	r3, [r7, #6]
    c1f8:	2220      	movs	r2, #32
    c1fa:	409a      	lsls	r2, r3
    c1fc:	79fb      	ldrb	r3, [r7, #7]
    c1fe:	4611      	mov	r1, r2
    c200:	4618      	mov	r0, r3
    c202:	4b04      	ldr	r3, [pc, #16]	; (c214 <_usbd_ep_int_stall_en+0x48>)
    c204:	4798      	blx	r3
}
    c206:	bf00      	nop
    c208:	3708      	adds	r7, #8
    c20a:	46bd      	mov	sp, r7
    c20c:	bd80      	pop	{r7, pc}
    c20e:	bf00      	nop
    c210:	0000c041 	.word	0x0000c041
    c214:	0000c069 	.word	0x0000c069

0000c218 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    c218:	b580      	push	{r7, lr}
    c21a:	b082      	sub	sp, #8
    c21c:	af00      	add	r7, sp, #0
    c21e:	4603      	mov	r3, r0
    c220:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    c222:	79fb      	ldrb	r3, [r7, #7]
    c224:	4619      	mov	r1, r3
    c226:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c22a:	4b03      	ldr	r3, [pc, #12]	; (c238 <_usbd_ep_stop_setup+0x20>)
    c22c:	4798      	blx	r3
}
    c22e:	bf00      	nop
    c230:	3708      	adds	r7, #8
    c232:	46bd      	mov	sp, r7
    c234:	bd80      	pop	{r7, pc}
    c236:	bf00      	nop
    c238:	0000bb9d 	.word	0x0000bb9d

0000c23c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    c23c:	b580      	push	{r7, lr}
    c23e:	b082      	sub	sp, #8
    c240:	af00      	add	r7, sp, #0
    c242:	4603      	mov	r3, r0
    c244:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c246:	79fb      	ldrb	r3, [r7, #7]
    c248:	2210      	movs	r2, #16
    c24a:	4619      	mov	r1, r3
    c24c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c250:	4b05      	ldr	r3, [pc, #20]	; (c268 <_usbd_ep_is_setup+0x2c>)
    c252:	4798      	blx	r3
    c254:	4603      	mov	r3, r0
    c256:	2b00      	cmp	r3, #0
    c258:	bf14      	ite	ne
    c25a:	2301      	movne	r3, #1
    c25c:	2300      	moveq	r3, #0
    c25e:	b2db      	uxtb	r3, r3
}
    c260:	4618      	mov	r0, r3
    c262:	3708      	adds	r7, #8
    c264:	46bd      	mov	sp, r7
    c266:	bd80      	pop	{r7, pc}
    c268:	0000ba93 	.word	0x0000ba93

0000c26c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    c26c:	b580      	push	{r7, lr}
    c26e:	b082      	sub	sp, #8
    c270:	af00      	add	r7, sp, #0
    c272:	4603      	mov	r3, r0
    c274:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    c276:	79fb      	ldrb	r3, [r7, #7]
    c278:	2110      	movs	r1, #16
    c27a:	4618      	mov	r0, r3
    c27c:	4b02      	ldr	r3, [pc, #8]	; (c288 <_usbd_ep_ack_setup+0x1c>)
    c27e:	4798      	blx	r3
}
    c280:	bf00      	nop
    c282:	3708      	adds	r7, #8
    c284:	46bd      	mov	sp, r7
    c286:	bd80      	pop	{r7, pc}
    c288:	0000c019 	.word	0x0000c019

0000c28c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    c28c:	b580      	push	{r7, lr}
    c28e:	b082      	sub	sp, #8
    c290:	af00      	add	r7, sp, #0
    c292:	4603      	mov	r3, r0
    c294:	71fb      	strb	r3, [r7, #7]
    c296:	460b      	mov	r3, r1
    c298:	71bb      	strb	r3, [r7, #6]
    c29a:	4613      	mov	r3, r2
    c29c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    c29e:	797b      	ldrb	r3, [r7, #5]
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	d00b      	beq.n	c2bc <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c2a4:	79bb      	ldrb	r3, [r7, #6]
    c2a6:	2201      	movs	r2, #1
    c2a8:	fa02 f303 	lsl.w	r3, r2, r3
    c2ac:	b2da      	uxtb	r2, r3
    c2ae:	79fb      	ldrb	r3, [r7, #7]
    c2b0:	4619      	mov	r1, r3
    c2b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c2b6:	4b09      	ldr	r3, [pc, #36]	; (c2dc <_usbd_ep_set_toggle+0x50>)
    c2b8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    c2ba:	e00a      	b.n	c2d2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c2bc:	79bb      	ldrb	r3, [r7, #6]
    c2be:	2201      	movs	r2, #1
    c2c0:	fa02 f303 	lsl.w	r3, r2, r3
    c2c4:	b2da      	uxtb	r2, r3
    c2c6:	79fb      	ldrb	r3, [r7, #7]
    c2c8:	4619      	mov	r1, r3
    c2ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c2ce:	4b04      	ldr	r3, [pc, #16]	; (c2e0 <_usbd_ep_set_toggle+0x54>)
    c2d0:	4798      	blx	r3
}
    c2d2:	bf00      	nop
    c2d4:	3708      	adds	r7, #8
    c2d6:	46bd      	mov	sp, r7
    c2d8:	bd80      	pop	{r7, pc}
    c2da:	bf00      	nop
    c2dc:	0000bb1d 	.word	0x0000bb1d
    c2e0:	0000bb71 	.word	0x0000bb71

0000c2e4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    c2e4:	b580      	push	{r7, lr}
    c2e6:	b082      	sub	sp, #8
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	4603      	mov	r3, r0
    c2ec:	460a      	mov	r2, r1
    c2ee:	71fb      	strb	r3, [r7, #7]
    c2f0:	4613      	mov	r3, r2
    c2f2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    c2f4:	79bb      	ldrb	r3, [r7, #6]
    c2f6:	2201      	movs	r2, #1
    c2f8:	409a      	lsls	r2, r3
    c2fa:	79fb      	ldrb	r3, [r7, #7]
    c2fc:	4611      	mov	r1, r2
    c2fe:	4618      	mov	r0, r3
    c300:	4b02      	ldr	r3, [pc, #8]	; (c30c <_usbd_ep_ack_io_cpt+0x28>)
    c302:	4798      	blx	r3
}
    c304:	bf00      	nop
    c306:	3708      	adds	r7, #8
    c308:	46bd      	mov	sp, r7
    c30a:	bd80      	pop	{r7, pc}
    c30c:	0000c019 	.word	0x0000c019

0000c310 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    c310:	b480      	push	{r7}
    c312:	b085      	sub	sp, #20
    c314:	af00      	add	r7, sp, #0
    c316:	4603      	mov	r3, r0
    c318:	603a      	str	r2, [r7, #0]
    c31a:	71fb      	strb	r3, [r7, #7]
    c31c:	460b      	mov	r3, r1
    c31e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c320:	79fa      	ldrb	r2, [r7, #7]
    c322:	79bb      	ldrb	r3, [r7, #6]
    c324:	0052      	lsls	r2, r2, #1
    c326:	4413      	add	r3, r2
    c328:	011b      	lsls	r3, r3, #4
    c32a:	4a06      	ldr	r2, [pc, #24]	; (c344 <_usbd_ep_set_buf+0x34>)
    c32c:	4413      	add	r3, r2
    c32e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    c330:	68fb      	ldr	r3, [r7, #12]
    c332:	683a      	ldr	r2, [r7, #0]
    c334:	601a      	str	r2, [r3, #0]
}
    c336:	bf00      	nop
    c338:	3714      	adds	r7, #20
    c33a:	46bd      	mov	sp, r7
    c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c340:	4770      	bx	lr
    c342:	bf00      	nop
    c344:	20001d78 	.word	0x20001d78

0000c348 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c348:	b480      	push	{r7}
    c34a:	b085      	sub	sp, #20
    c34c:	af00      	add	r7, sp, #0
    c34e:	4603      	mov	r3, r0
    c350:	71fb      	strb	r3, [r7, #7]
    c352:	460b      	mov	r3, r1
    c354:	71bb      	strb	r3, [r7, #6]
    c356:	4613      	mov	r3, r2
    c358:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c35a:	79fa      	ldrb	r2, [r7, #7]
    c35c:	79bb      	ldrb	r3, [r7, #6]
    c35e:	0052      	lsls	r2, r2, #1
    c360:	4413      	add	r3, r2
    c362:	011b      	lsls	r3, r3, #4
    c364:	4a08      	ldr	r2, [pc, #32]	; (c388 <_usbd_ep_set_in_count+0x40>)
    c366:	4413      	add	r3, r2
    c368:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c36a:	88bb      	ldrh	r3, [r7, #4]
    c36c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c370:	b299      	uxth	r1, r3
    c372:	68fa      	ldr	r2, [r7, #12]
    c374:	6853      	ldr	r3, [r2, #4]
    c376:	f361 339b 	bfi	r3, r1, #14, #14
    c37a:	6053      	str	r3, [r2, #4]
}
    c37c:	bf00      	nop
    c37e:	3714      	adds	r7, #20
    c380:	46bd      	mov	sp, r7
    c382:	f85d 7b04 	ldr.w	r7, [sp], #4
    c386:	4770      	bx	lr
    c388:	20001d78 	.word	0x20001d78

0000c38c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c38c:	b480      	push	{r7}
    c38e:	b085      	sub	sp, #20
    c390:	af00      	add	r7, sp, #0
    c392:	4603      	mov	r3, r0
    c394:	71fb      	strb	r3, [r7, #7]
    c396:	460b      	mov	r3, r1
    c398:	71bb      	strb	r3, [r7, #6]
    c39a:	4613      	mov	r3, r2
    c39c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c39e:	79fa      	ldrb	r2, [r7, #7]
    c3a0:	79bb      	ldrb	r3, [r7, #6]
    c3a2:	0052      	lsls	r2, r2, #1
    c3a4:	4413      	add	r3, r2
    c3a6:	011b      	lsls	r3, r3, #4
    c3a8:	4a08      	ldr	r2, [pc, #32]	; (c3cc <_usbd_ep_set_in_size+0x40>)
    c3aa:	4413      	add	r3, r2
    c3ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c3ae:	88bb      	ldrh	r3, [r7, #4]
    c3b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c3b4:	b299      	uxth	r1, r3
    c3b6:	68fa      	ldr	r2, [r7, #12]
    c3b8:	6853      	ldr	r3, [r2, #4]
    c3ba:	f361 030d 	bfi	r3, r1, #0, #14
    c3be:	6053      	str	r3, [r2, #4]
}
    c3c0:	bf00      	nop
    c3c2:	3714      	adds	r7, #20
    c3c4:	46bd      	mov	sp, r7
    c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3ca:	4770      	bx	lr
    c3cc:	20001d78 	.word	0x20001d78

0000c3d0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    c3d0:	b480      	push	{r7}
    c3d2:	b085      	sub	sp, #20
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	4603      	mov	r3, r0
    c3d8:	71fb      	strb	r3, [r7, #7]
    c3da:	460b      	mov	r3, r1
    c3dc:	71bb      	strb	r3, [r7, #6]
    c3de:	4613      	mov	r3, r2
    c3e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c3e2:	79fa      	ldrb	r2, [r7, #7]
    c3e4:	79bb      	ldrb	r3, [r7, #6]
    c3e6:	0052      	lsls	r2, r2, #1
    c3e8:	4413      	add	r3, r2
    c3ea:	011b      	lsls	r3, r3, #4
    c3ec:	4a08      	ldr	r2, [pc, #32]	; (c410 <_usbd_ep_set_out_count+0x40>)
    c3ee:	4413      	add	r3, r2
    c3f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c3f2:	88bb      	ldrh	r3, [r7, #4]
    c3f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c3f8:	b299      	uxth	r1, r3
    c3fa:	68fa      	ldr	r2, [r7, #12]
    c3fc:	6853      	ldr	r3, [r2, #4]
    c3fe:	f361 030d 	bfi	r3, r1, #0, #14
    c402:	6053      	str	r3, [r2, #4]
}
    c404:	bf00      	nop
    c406:	3714      	adds	r7, #20
    c408:	46bd      	mov	sp, r7
    c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c40e:	4770      	bx	lr
    c410:	20001d78 	.word	0x20001d78

0000c414 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    c414:	b480      	push	{r7}
    c416:	b085      	sub	sp, #20
    c418:	af00      	add	r7, sp, #0
    c41a:	4603      	mov	r3, r0
    c41c:	71fb      	strb	r3, [r7, #7]
    c41e:	460b      	mov	r3, r1
    c420:	71bb      	strb	r3, [r7, #6]
    c422:	4613      	mov	r3, r2
    c424:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c426:	79fa      	ldrb	r2, [r7, #7]
    c428:	79bb      	ldrb	r3, [r7, #6]
    c42a:	0052      	lsls	r2, r2, #1
    c42c:	4413      	add	r3, r2
    c42e:	011b      	lsls	r3, r3, #4
    c430:	4a08      	ldr	r2, [pc, #32]	; (c454 <_usbd_ep_set_out_size+0x40>)
    c432:	4413      	add	r3, r2
    c434:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c436:	88bb      	ldrh	r3, [r7, #4]
    c438:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c43c:	b299      	uxth	r1, r3
    c43e:	68fa      	ldr	r2, [r7, #12]
    c440:	6853      	ldr	r3, [r2, #4]
    c442:	f361 339b 	bfi	r3, r1, #14, #14
    c446:	6053      	str	r3, [r2, #4]
}
    c448:	bf00      	nop
    c44a:	3714      	adds	r7, #20
    c44c:	46bd      	mov	sp, r7
    c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c452:	4770      	bx	lr
    c454:	20001d78 	.word	0x20001d78

0000c458 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c458:	b580      	push	{r7, lr}
    c45a:	b084      	sub	sp, #16
    c45c:	af00      	add	r7, sp, #0
    c45e:	60ba      	str	r2, [r7, #8]
    c460:	607b      	str	r3, [r7, #4]
    c462:	4603      	mov	r3, r0
    c464:	73fb      	strb	r3, [r7, #15]
    c466:	460b      	mov	r3, r1
    c468:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    c46a:	68bb      	ldr	r3, [r7, #8]
    c46c:	b29a      	uxth	r2, r3
    c46e:	7bb9      	ldrb	r1, [r7, #14]
    c470:	7bfb      	ldrb	r3, [r7, #15]
    c472:	4618      	mov	r0, r3
    c474:	4b06      	ldr	r3, [pc, #24]	; (c490 <_usbd_ep_set_in_trans+0x38>)
    c476:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    c478:	687b      	ldr	r3, [r7, #4]
    c47a:	b29a      	uxth	r2, r3
    c47c:	7bb9      	ldrb	r1, [r7, #14]
    c47e:	7bfb      	ldrb	r3, [r7, #15]
    c480:	4618      	mov	r0, r3
    c482:	4b04      	ldr	r3, [pc, #16]	; (c494 <_usbd_ep_set_in_trans+0x3c>)
    c484:	4798      	blx	r3
}
    c486:	bf00      	nop
    c488:	3710      	adds	r7, #16
    c48a:	46bd      	mov	sp, r7
    c48c:	bd80      	pop	{r7, pc}
    c48e:	bf00      	nop
    c490:	0000c38d 	.word	0x0000c38d
    c494:	0000c349 	.word	0x0000c349

0000c498 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    c498:	b580      	push	{r7, lr}
    c49a:	b084      	sub	sp, #16
    c49c:	af00      	add	r7, sp, #0
    c49e:	60ba      	str	r2, [r7, #8]
    c4a0:	607b      	str	r3, [r7, #4]
    c4a2:	4603      	mov	r3, r0
    c4a4:	73fb      	strb	r3, [r7, #15]
    c4a6:	460b      	mov	r3, r1
    c4a8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    c4aa:	68bb      	ldr	r3, [r7, #8]
    c4ac:	b29a      	uxth	r2, r3
    c4ae:	7bb9      	ldrb	r1, [r7, #14]
    c4b0:	7bfb      	ldrb	r3, [r7, #15]
    c4b2:	4618      	mov	r0, r3
    c4b4:	4b06      	ldr	r3, [pc, #24]	; (c4d0 <_usbd_ep_set_out_trans+0x38>)
    c4b6:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    c4b8:	687b      	ldr	r3, [r7, #4]
    c4ba:	b29a      	uxth	r2, r3
    c4bc:	7bb9      	ldrb	r1, [r7, #14]
    c4be:	7bfb      	ldrb	r3, [r7, #15]
    c4c0:	4618      	mov	r0, r3
    c4c2:	4b04      	ldr	r3, [pc, #16]	; (c4d4 <_usbd_ep_set_out_trans+0x3c>)
    c4c4:	4798      	blx	r3
}
    c4c6:	bf00      	nop
    c4c8:	3710      	adds	r7, #16
    c4ca:	46bd      	mov	sp, r7
    c4cc:	bd80      	pop	{r7, pc}
    c4ce:	bf00      	nop
    c4d0:	0000c415 	.word	0x0000c415
    c4d4:	0000c3d1 	.word	0x0000c3d1

0000c4d8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    c4d8:	b480      	push	{r7}
    c4da:	b085      	sub	sp, #20
    c4dc:	af00      	add	r7, sp, #0
    c4de:	4603      	mov	r3, r0
    c4e0:	460a      	mov	r2, r1
    c4e2:	71fb      	strb	r3, [r7, #7]
    c4e4:	4613      	mov	r3, r2
    c4e6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    c4e8:	79fa      	ldrb	r2, [r7, #7]
    c4ea:	79bb      	ldrb	r3, [r7, #6]
    c4ec:	0052      	lsls	r2, r2, #1
    c4ee:	4413      	add	r3, r2
    c4f0:	011b      	lsls	r3, r3, #4
    c4f2:	4a06      	ldr	r2, [pc, #24]	; (c50c <_usbd_ep_clear_bank_status+0x34>)
    c4f4:	4413      	add	r3, r2
    c4f6:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    c4f8:	68fb      	ldr	r3, [r7, #12]
    c4fa:	2200      	movs	r2, #0
    c4fc:	729a      	strb	r2, [r3, #10]
}
    c4fe:	bf00      	nop
    c500:	3714      	adds	r7, #20
    c502:	46bd      	mov	sp, r7
    c504:	f85d 7b04 	ldr.w	r7, [sp], #4
    c508:	4770      	bx	lr
    c50a:	bf00      	nop
    c50c:	20001d78 	.word	0x20001d78

0000c510 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c510:	b580      	push	{r7, lr}
    c512:	b082      	sub	sp, #8
    c514:	af00      	add	r7, sp, #0
    c516:	4603      	mov	r3, r0
    c518:	71fb      	strb	r3, [r7, #7]
    c51a:	460b      	mov	r3, r1
    c51c:	71bb      	strb	r3, [r7, #6]
    c51e:	4613      	mov	r3, r2
    c520:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c522:	797b      	ldrb	r3, [r7, #5]
    c524:	2b00      	cmp	r3, #0
    c526:	d00b      	beq.n	c540 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c528:	79bb      	ldrb	r3, [r7, #6]
    c52a:	2240      	movs	r2, #64	; 0x40
    c52c:	fa02 f303 	lsl.w	r3, r2, r3
    c530:	b2da      	uxtb	r2, r3
    c532:	79fb      	ldrb	r3, [r7, #7]
    c534:	4619      	mov	r1, r3
    c536:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c53a:	4b09      	ldr	r3, [pc, #36]	; (c560 <_usbd_ep_set_in_rdy+0x50>)
    c53c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c53e:	e00a      	b.n	c556 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c540:	79bb      	ldrb	r3, [r7, #6]
    c542:	2240      	movs	r2, #64	; 0x40
    c544:	fa02 f303 	lsl.w	r3, r2, r3
    c548:	b2da      	uxtb	r2, r3
    c54a:	79fb      	ldrb	r3, [r7, #7]
    c54c:	4619      	mov	r1, r3
    c54e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c552:	4b04      	ldr	r3, [pc, #16]	; (c564 <_usbd_ep_set_in_rdy+0x54>)
    c554:	4798      	blx	r3
}
    c556:	bf00      	nop
    c558:	3708      	adds	r7, #8
    c55a:	46bd      	mov	sp, r7
    c55c:	bd80      	pop	{r7, pc}
    c55e:	bf00      	nop
    c560:	0000bb1d 	.word	0x0000bb1d
    c564:	0000bb71 	.word	0x0000bb71

0000c568 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    c568:	b580      	push	{r7, lr}
    c56a:	b082      	sub	sp, #8
    c56c:	af00      	add	r7, sp, #0
    c56e:	4603      	mov	r3, r0
    c570:	71fb      	strb	r3, [r7, #7]
    c572:	460b      	mov	r3, r1
    c574:	71bb      	strb	r3, [r7, #6]
    c576:	4613      	mov	r3, r2
    c578:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    c57a:	797b      	ldrb	r3, [r7, #5]
    c57c:	2b00      	cmp	r3, #0
    c57e:	d00b      	beq.n	c598 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c580:	79bb      	ldrb	r3, [r7, #6]
    c582:	2240      	movs	r2, #64	; 0x40
    c584:	fa02 f303 	lsl.w	r3, r2, r3
    c588:	b2da      	uxtb	r2, r3
    c58a:	79fb      	ldrb	r3, [r7, #7]
    c58c:	4619      	mov	r1, r3
    c58e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c592:	4b09      	ldr	r3, [pc, #36]	; (c5b8 <_usbd_ep_set_out_rdy+0x50>)
    c594:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    c596:	e00a      	b.n	c5ae <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    c598:	79bb      	ldrb	r3, [r7, #6]
    c59a:	2240      	movs	r2, #64	; 0x40
    c59c:	fa02 f303 	lsl.w	r3, r2, r3
    c5a0:	b2da      	uxtb	r2, r3
    c5a2:	79fb      	ldrb	r3, [r7, #7]
    c5a4:	4619      	mov	r1, r3
    c5a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c5aa:	4b04      	ldr	r3, [pc, #16]	; (c5bc <_usbd_ep_set_out_rdy+0x54>)
    c5ac:	4798      	blx	r3
}
    c5ae:	bf00      	nop
    c5b0:	3708      	adds	r7, #8
    c5b2:	46bd      	mov	sp, r7
    c5b4:	bd80      	pop	{r7, pc}
    c5b6:	bf00      	nop
    c5b8:	0000bb71 	.word	0x0000bb71
    c5bc:	0000bb1d 	.word	0x0000bb1d

0000c5c0 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    c5c0:	b480      	push	{r7}
    c5c2:	b083      	sub	sp, #12
    c5c4:	af00      	add	r7, sp, #0
    c5c6:	4603      	mov	r3, r0
    c5c8:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c5ca:	88fb      	ldrh	r3, [r7, #6]
    c5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c5d0:	d820      	bhi.n	c614 <_usbd_ep_pcksize_size+0x54>
    c5d2:	88fb      	ldrh	r3, [r7, #6]
    c5d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c5d8:	d81a      	bhi.n	c610 <_usbd_ep_pcksize_size+0x50>
    c5da:	88fb      	ldrh	r3, [r7, #6]
    c5dc:	2b80      	cmp	r3, #128	; 0x80
    c5de:	d815      	bhi.n	c60c <_usbd_ep_pcksize_size+0x4c>
    c5e0:	88fb      	ldrh	r3, [r7, #6]
    c5e2:	2b40      	cmp	r3, #64	; 0x40
    c5e4:	d810      	bhi.n	c608 <_usbd_ep_pcksize_size+0x48>
    c5e6:	88fb      	ldrh	r3, [r7, #6]
    c5e8:	2b20      	cmp	r3, #32
    c5ea:	d80b      	bhi.n	c604 <_usbd_ep_pcksize_size+0x44>
    c5ec:	88fb      	ldrh	r3, [r7, #6]
    c5ee:	2b10      	cmp	r3, #16
    c5f0:	d806      	bhi.n	c600 <_usbd_ep_pcksize_size+0x40>
    c5f2:	88fb      	ldrh	r3, [r7, #6]
    c5f4:	2b08      	cmp	r3, #8
    c5f6:	bf8c      	ite	hi
    c5f8:	2301      	movhi	r3, #1
    c5fa:	2300      	movls	r3, #0
    c5fc:	b2db      	uxtb	r3, r3
    c5fe:	e00a      	b.n	c616 <_usbd_ep_pcksize_size+0x56>
    c600:	2302      	movs	r3, #2
    c602:	e008      	b.n	c616 <_usbd_ep_pcksize_size+0x56>
    c604:	2303      	movs	r3, #3
    c606:	e006      	b.n	c616 <_usbd_ep_pcksize_size+0x56>
    c608:	2304      	movs	r3, #4
    c60a:	e004      	b.n	c616 <_usbd_ep_pcksize_size+0x56>
    c60c:	2305      	movs	r3, #5
    c60e:	e002      	b.n	c616 <_usbd_ep_pcksize_size+0x56>
    c610:	2306      	movs	r3, #6
    c612:	e000      	b.n	c616 <_usbd_ep_pcksize_size+0x56>
    c614:	2307      	movs	r3, #7
}
    c616:	4618      	mov	r0, r3
    c618:	370c      	adds	r7, #12
    c61a:	46bd      	mov	sp, r7
    c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c620:	4770      	bx	lr
	...

0000c624 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    c624:	b480      	push	{r7}
    c626:	b085      	sub	sp, #20
    c628:	af00      	add	r7, sp, #0
    c62a:	4603      	mov	r3, r0
    c62c:	460a      	mov	r2, r1
    c62e:	71fb      	strb	r3, [r7, #7]
    c630:	4613      	mov	r3, r2
    c632:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    c634:	79fb      	ldrb	r3, [r7, #7]
    c636:	2b00      	cmp	r3, #0
    c638:	d008      	beq.n	c64c <_usb_d_dev_ept+0x28>
    c63a:	79bb      	ldrb	r3, [r7, #6]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d003      	beq.n	c648 <_usb_d_dev_ept+0x24>
    c640:	79fb      	ldrb	r3, [r7, #7]
    c642:	3304      	adds	r3, #4
    c644:	b2db      	uxtb	r3, r3
    c646:	e002      	b.n	c64e <_usb_d_dev_ept+0x2a>
    c648:	79fb      	ldrb	r3, [r7, #7]
    c64a:	e000      	b.n	c64e <_usb_d_dev_ept+0x2a>
    c64c:	2300      	movs	r3, #0
    c64e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    c650:	7bfa      	ldrb	r2, [r7, #15]
    c652:	4613      	mov	r3, r2
    c654:	009b      	lsls	r3, r3, #2
    c656:	4413      	add	r3, r2
    c658:	009b      	lsls	r3, r3, #2
    c65a:	3310      	adds	r3, #16
    c65c:	4a04      	ldr	r2, [pc, #16]	; (c670 <_usb_d_dev_ept+0x4c>)
    c65e:	4413      	add	r3, r2
    c660:	3304      	adds	r3, #4
}
    c662:	4618      	mov	r0, r3
    c664:	3714      	adds	r7, #20
    c666:	46bd      	mov	sp, r7
    c668:	f85d 7b04 	ldr.w	r7, [sp], #4
    c66c:	4770      	bx	lr
    c66e:	bf00      	nop
    c670:	20001cb0 	.word	0x20001cb0

0000c674 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    c674:	b580      	push	{r7, lr}
    c676:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    c678:	2104      	movs	r1, #4
    c67a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c67e:	4b03      	ldr	r3, [pc, #12]	; (c68c <_usb_d_dev_sof+0x18>)
    c680:	4798      	blx	r3
	dev_inst.callbacks.sof();
    c682:	4b03      	ldr	r3, [pc, #12]	; (c690 <_usb_d_dev_sof+0x1c>)
    c684:	681b      	ldr	r3, [r3, #0]
    c686:	4798      	blx	r3
}
    c688:	bf00      	nop
    c68a:	bd80      	pop	{r7, pc}
    c68c:	0000bceb 	.word	0x0000bceb
    c690:	20001cb0 	.word	0x20001cb0

0000c694 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    c694:	b580      	push	{r7, lr}
    c696:	b084      	sub	sp, #16
    c698:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    c69a:	2300      	movs	r3, #0
    c69c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c69e:	f240 2101 	movw	r1, #513	; 0x201
    c6a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c6a6:	4b1a      	ldr	r3, [pc, #104]	; (c710 <_usb_d_dev_lpmsusp+0x7c>)
    c6a8:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c6aa:	f240 2101 	movw	r1, #513	; 0x201
    c6ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c6b2:	4b18      	ldr	r3, [pc, #96]	; (c714 <_usb_d_dev_lpmsusp+0x80>)
    c6b4:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c6b6:	2170      	movs	r1, #112	; 0x70
    c6b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c6bc:	4b16      	ldr	r3, [pc, #88]	; (c718 <_usb_d_dev_lpmsusp+0x84>)
    c6be:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c6c0:	2300      	movs	r3, #0
    c6c2:	73fb      	strb	r3, [r7, #15]
    c6c4:	e018      	b.n	c6f8 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    c6c6:	7bfb      	ldrb	r3, [r7, #15]
    c6c8:	015b      	lsls	r3, r3, #5
    c6ca:	4a14      	ldr	r2, [pc, #80]	; (c71c <_usb_d_dev_lpmsusp+0x88>)
    c6cc:	4413      	add	r3, r2
    c6ce:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c6d0:	687b      	ldr	r3, [r7, #4]
    c6d2:	891b      	ldrh	r3, [r3, #8]
    c6d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    c6d8:	b2db      	uxtb	r3, r3
    c6da:	2b03      	cmp	r3, #3
    c6dc:	d109      	bne.n	c6f2 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	891b      	ldrh	r3, [r3, #8]
    c6e2:	f3c3 130a 	ubfx	r3, r3, #4, #11
    c6e6:	b29b      	uxth	r3, r3
    c6e8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    c6ea:	687b      	ldr	r3, [r7, #4]
    c6ec:	2200      	movs	r2, #0
    c6ee:	811a      	strh	r2, [r3, #8]
			break;
    c6f0:	e005      	b.n	c6fe <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c6f2:	7bfb      	ldrb	r3, [r7, #15]
    c6f4:	3301      	adds	r3, #1
    c6f6:	73fb      	strb	r3, [r7, #15]
    c6f8:	7bfb      	ldrb	r3, [r7, #15]
    c6fa:	2b03      	cmp	r3, #3
    c6fc:	d9e3      	bls.n	c6c6 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c6fe:	4b08      	ldr	r3, [pc, #32]	; (c720 <_usb_d_dev_lpmsusp+0x8c>)
    c700:	685b      	ldr	r3, [r3, #4]
    c702:	68b9      	ldr	r1, [r7, #8]
    c704:	2003      	movs	r0, #3
    c706:	4798      	blx	r3
}
    c708:	bf00      	nop
    c70a:	3710      	adds	r7, #16
    c70c:	46bd      	mov	sp, r7
    c70e:	bd80      	pop	{r7, pc}
    c710:	0000bceb 	.word	0x0000bceb
    c714:	0000bd41 	.word	0x0000bd41
    c718:	0000bd09 	.word	0x0000bd09
    c71c:	20001d78 	.word	0x20001d78
    c720:	20001cb0 	.word	0x20001cb0

0000c724 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    c724:	b580      	push	{r7, lr}
    c726:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    c728:	2180      	movs	r1, #128	; 0x80
    c72a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c72e:	4b04      	ldr	r3, [pc, #16]	; (c740 <_usb_d_dev_ramerr+0x1c>)
    c730:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c732:	4b04      	ldr	r3, [pc, #16]	; (c744 <_usb_d_dev_ramerr+0x20>)
    c734:	685b      	ldr	r3, [r3, #4]
    c736:	2100      	movs	r1, #0
    c738:	2005      	movs	r0, #5
    c73a:	4798      	blx	r3
}
    c73c:	bf00      	nop
    c73e:	bd80      	pop	{r7, pc}
    c740:	0000bceb 	.word	0x0000bceb
    c744:	20001cb0 	.word	0x20001cb0

0000c748 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    c748:	b580      	push	{r7, lr}
    c74a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c74c:	2170      	movs	r1, #112	; 0x70
    c74e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c752:	4b0b      	ldr	r3, [pc, #44]	; (c780 <_usb_d_dev_wakeup+0x38>)
    c754:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c756:	2170      	movs	r1, #112	; 0x70
    c758:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c75c:	4b09      	ldr	r3, [pc, #36]	; (c784 <_usb_d_dev_wakeup+0x3c>)
    c75e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c760:	f240 2101 	movw	r1, #513	; 0x201
    c764:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c768:	4b07      	ldr	r3, [pc, #28]	; (c788 <_usb_d_dev_wakeup+0x40>)
    c76a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    c76c:	2000      	movs	r0, #0
    c76e:	4b07      	ldr	r3, [pc, #28]	; (c78c <_usb_d_dev_wakeup+0x44>)
    c770:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c772:	4b07      	ldr	r3, [pc, #28]	; (c790 <_usb_d_dev_wakeup+0x48>)
    c774:	685b      	ldr	r3, [r3, #4]
    c776:	2100      	movs	r1, #0
    c778:	2002      	movs	r0, #2
    c77a:	4798      	blx	r3
}
    c77c:	bf00      	nop
    c77e:	bd80      	pop	{r7, pc}
    c780:	0000bceb 	.word	0x0000bceb
    c784:	0000bd41 	.word	0x0000bd41
    c788:	0000bd09 	.word	0x0000bd09
    c78c:	0000bfe9 	.word	0x0000bfe9
    c790:	20001cb0 	.word	0x20001cb0

0000c794 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    c794:	b580      	push	{r7, lr}
    c796:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    c798:	2200      	movs	r2, #0
    c79a:	2100      	movs	r1, #0
    c79c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7a0:	4b0d      	ldr	r3, [pc, #52]	; (c7d8 <_usb_d_dev_reset+0x44>)
    c7a2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    c7a4:	2108      	movs	r1, #8
    c7a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7aa:	4b0c      	ldr	r3, [pc, #48]	; (c7dc <_usb_d_dev_reset+0x48>)
    c7ac:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c7ae:	2170      	movs	r1, #112	; 0x70
    c7b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7b4:	4b0a      	ldr	r3, [pc, #40]	; (c7e0 <_usb_d_dev_reset+0x4c>)
    c7b6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c7b8:	f240 2101 	movw	r1, #513	; 0x201
    c7bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7c0:	4b08      	ldr	r3, [pc, #32]	; (c7e4 <_usb_d_dev_reset+0x50>)
    c7c2:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    c7c4:	4b08      	ldr	r3, [pc, #32]	; (c7e8 <_usb_d_dev_reset+0x54>)
    c7c6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c7c8:	4b08      	ldr	r3, [pc, #32]	; (c7ec <_usb_d_dev_reset+0x58>)
    c7ca:	685b      	ldr	r3, [r3, #4]
    c7cc:	2100      	movs	r1, #0
    c7ce:	2001      	movs	r0, #1
    c7d0:	4798      	blx	r3
}
    c7d2:	bf00      	nop
    c7d4:	bd80      	pop	{r7, pc}
    c7d6:	bf00      	nop
    c7d8:	0000bc81 	.word	0x0000bc81
    c7dc:	0000bceb 	.word	0x0000bceb
    c7e0:	0000bd41 	.word	0x0000bd41
    c7e4:	0000bd09 	.word	0x0000bd09
    c7e8:	0000d351 	.word	0x0000d351
    c7ec:	20001cb0 	.word	0x20001cb0

0000c7f0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c7f4:	f240 2101 	movw	r1, #513	; 0x201
    c7f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c7fc:	4b09      	ldr	r3, [pc, #36]	; (c824 <_usb_d_dev_suspend+0x34>)
    c7fe:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    c800:	f240 2101 	movw	r1, #513	; 0x201
    c804:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c808:	4b07      	ldr	r3, [pc, #28]	; (c828 <_usb_d_dev_suspend+0x38>)
    c80a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    c80c:	2170      	movs	r1, #112	; 0x70
    c80e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c812:	4b06      	ldr	r3, [pc, #24]	; (c82c <_usb_d_dev_suspend+0x3c>)
    c814:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c816:	4b06      	ldr	r3, [pc, #24]	; (c830 <_usb_d_dev_suspend+0x40>)
    c818:	685b      	ldr	r3, [r3, #4]
    c81a:	2100      	movs	r1, #0
    c81c:	2004      	movs	r0, #4
    c81e:	4798      	blx	r3
}
    c820:	bf00      	nop
    c822:	bd80      	pop	{r7, pc}
    c824:	0000bceb 	.word	0x0000bceb
    c828:	0000bd41 	.word	0x0000bd41
    c82c:	0000bd09 	.word	0x0000bd09
    c830:	20001cb0 	.word	0x20001cb0

0000c834 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    c834:	b580      	push	{r7, lr}
    c836:	b082      	sub	sp, #8
    c838:	af00      	add	r7, sp, #0
	bool     rc    = true;
    c83a:	2301      	movs	r3, #1
    c83c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    c83e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c842:	4b22      	ldr	r3, [pc, #136]	; (c8cc <_usb_d_dev_handle_nep+0x98>)
    c844:	4798      	blx	r3
    c846:	4603      	mov	r3, r0
    c848:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c84a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c84e:	4b20      	ldr	r3, [pc, #128]	; (c8d0 <_usb_d_dev_handle_nep+0x9c>)
    c850:	4798      	blx	r3
    c852:	4603      	mov	r3, r0
    c854:	461a      	mov	r2, r3
    c856:	88bb      	ldrh	r3, [r7, #4]
    c858:	4013      	ands	r3, r2
    c85a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c85c:	88bb      	ldrh	r3, [r7, #4]
    c85e:	f003 0304 	and.w	r3, r3, #4
    c862:	2b00      	cmp	r3, #0
    c864:	d003      	beq.n	c86e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    c866:	4b1b      	ldr	r3, [pc, #108]	; (c8d4 <_usb_d_dev_handle_nep+0xa0>)
    c868:	4798      	blx	r3
		return true;
    c86a:	2301      	movs	r3, #1
    c86c:	e02a      	b.n	c8c4 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c86e:	88bb      	ldrh	r3, [r7, #4]
    c870:	f403 7300 	and.w	r3, r3, #512	; 0x200
    c874:	2b00      	cmp	r3, #0
    c876:	d002      	beq.n	c87e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    c878:	4b17      	ldr	r3, [pc, #92]	; (c8d8 <_usb_d_dev_handle_nep+0xa4>)
    c87a:	4798      	blx	r3
    c87c:	e021      	b.n	c8c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c87e:	88bb      	ldrh	r3, [r7, #4]
    c880:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c884:	2b00      	cmp	r3, #0
    c886:	d002      	beq.n	c88e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    c888:	4b14      	ldr	r3, [pc, #80]	; (c8dc <_usb_d_dev_handle_nep+0xa8>)
    c88a:	4798      	blx	r3
    c88c:	e019      	b.n	c8c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c88e:	88bb      	ldrh	r3, [r7, #4]
    c890:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c894:	2b00      	cmp	r3, #0
    c896:	d002      	beq.n	c89e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    c898:	4b11      	ldr	r3, [pc, #68]	; (c8e0 <_usb_d_dev_handle_nep+0xac>)
    c89a:	4798      	blx	r3
    c89c:	e011      	b.n	c8c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c89e:	88bb      	ldrh	r3, [r7, #4]
    c8a0:	f003 0308 	and.w	r3, r3, #8
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d002      	beq.n	c8ae <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    c8a8:	4b0e      	ldr	r3, [pc, #56]	; (c8e4 <_usb_d_dev_handle_nep+0xb0>)
    c8aa:	4798      	blx	r3
    c8ac:	e009      	b.n	c8c2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c8ae:	88bb      	ldrh	r3, [r7, #4]
    c8b0:	f003 0301 	and.w	r3, r3, #1
    c8b4:	2b00      	cmp	r3, #0
    c8b6:	d002      	beq.n	c8be <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    c8b8:	4b0b      	ldr	r3, [pc, #44]	; (c8e8 <_usb_d_dev_handle_nep+0xb4>)
    c8ba:	4798      	blx	r3
    c8bc:	e001      	b.n	c8c2 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    c8be:	2300      	movs	r3, #0
    c8c0:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    c8c2:	79fb      	ldrb	r3, [r7, #7]
}
    c8c4:	4618      	mov	r0, r3
    c8c6:	3708      	adds	r7, #8
    c8c8:	46bd      	mov	sp, r7
    c8ca:	bd80      	pop	{r7, pc}
    c8cc:	0000bcd1 	.word	0x0000bcd1
    c8d0:	0000bd27 	.word	0x0000bd27
    c8d4:	0000c675 	.word	0x0000c675
    c8d8:	0000c695 	.word	0x0000c695
    c8dc:	0000c725 	.word	0x0000c725
    c8e0:	0000c749 	.word	0x0000c749
    c8e4:	0000c795 	.word	0x0000c795
    c8e8:	0000c7f1 	.word	0x0000c7f1

0000c8ec <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    c8ec:	b590      	push	{r4, r7, lr}
    c8ee:	b089      	sub	sp, #36	; 0x24
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	6078      	str	r0, [r7, #4]
    c8f4:	460b      	mov	r3, r1
    c8f6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    c8f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c8fc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c8fe:	687b      	ldr	r3, [r7, #4]
    c900:	7c9b      	ldrb	r3, [r3, #18]
    c902:	f003 030f 	and.w	r3, r3, #15
    c906:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c908:	7dfb      	ldrb	r3, [r7, #23]
    c90a:	015b      	lsls	r3, r3, #5
    c90c:	4a73      	ldr	r2, [pc, #460]	; (cadc <_usb_d_dev_in_next+0x1f0>)
    c90e:	4413      	add	r3, r2
    c910:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c912:	78fb      	ldrb	r3, [r7, #3]
    c914:	2b00      	cmp	r3, #0
    c916:	d006      	beq.n	c926 <_usb_d_dev_in_next+0x3a>
    c918:	693b      	ldr	r3, [r7, #16]
    c91a:	3310      	adds	r3, #16
    c91c:	685b      	ldr	r3, [r3, #4]
    c91e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c922:	b29b      	uxth	r3, r3
    c924:	e000      	b.n	c928 <_usb_d_dev_in_next+0x3c>
    c926:	2300      	movs	r3, #0
    c928:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c92a:	687b      	ldr	r3, [r7, #4]
    c92c:	8a1b      	ldrh	r3, [r3, #16]
    c92e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c932:	4293      	cmp	r3, r2
    c934:	d103      	bne.n	c93e <_usb_d_dev_in_next+0x52>
    c936:	687b      	ldr	r3, [r7, #4]
    c938:	8a1b      	ldrh	r3, [r3, #16]
    c93a:	b21b      	sxth	r3, r3
    c93c:	e004      	b.n	c948 <_usb_d_dev_in_next+0x5c>
    c93e:	687b      	ldr	r3, [r7, #4]
    c940:	8a1b      	ldrh	r3, [r3, #16]
    c942:	3b01      	subs	r3, #1
    c944:	b29b      	uxth	r3, r3
    c946:	b21b      	sxth	r3, r3
    c948:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    c94c:	4013      	ands	r3, r2
    c94e:	b21b      	sxth	r3, r3
    c950:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    c952:	2300      	movs	r3, #0
    c954:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c956:	687b      	ldr	r3, [r7, #4]
    c958:	7cdb      	ldrb	r3, [r3, #19]
    c95a:	f003 0307 	and.w	r3, r3, #7
    c95e:	b2db      	uxtb	r3, r3
    c960:	2b01      	cmp	r3, #1
    c962:	bf0c      	ite	eq
    c964:	2301      	moveq	r3, #1
    c966:	2300      	movne	r3, #0
    c968:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    c96a:	78fb      	ldrb	r3, [r7, #3]
    c96c:	2b00      	cmp	r3, #0
    c96e:	d004      	beq.n	c97a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    c970:	7dfb      	ldrb	r3, [r7, #23]
    c972:	2101      	movs	r1, #1
    c974:	4618      	mov	r0, r3
    c976:	4b5a      	ldr	r3, [pc, #360]	; (cae0 <_usb_d_dev_in_next+0x1f4>)
    c978:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    c97a:	687b      	ldr	r3, [r7, #4]
    c97c:	689a      	ldr	r2, [r3, #8]
    c97e:	89fb      	ldrh	r3, [r7, #14]
    c980:	441a      	add	r2, r3
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    c986:	687b      	ldr	r3, [r7, #4]
    c988:	689a      	ldr	r2, [r3, #8]
    c98a:	687b      	ldr	r3, [r7, #4]
    c98c:	685b      	ldr	r3, [r3, #4]
    c98e:	429a      	cmp	r2, r3
    c990:	d243      	bcs.n	ca1a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    c992:	687b      	ldr	r3, [r7, #4]
    c994:	685b      	ldr	r3, [r3, #4]
    c996:	b29a      	uxth	r2, r3
    c998:	687b      	ldr	r3, [r7, #4]
    c99a:	689b      	ldr	r3, [r3, #8]
    c99c:	b29b      	uxth	r3, r3
    c99e:	1ad3      	subs	r3, r2, r3
    c9a0:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    c9a2:	687b      	ldr	r3, [r7, #4]
    c9a4:	7cdb      	ldrb	r3, [r3, #19]
    c9a6:	f003 0320 	and.w	r3, r3, #32
    c9aa:	b2db      	uxtb	r3, r3
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d01b      	beq.n	c9e8 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    c9b0:	687b      	ldr	r3, [r7, #4]
    c9b2:	8a1b      	ldrh	r3, [r3, #16]
    c9b4:	8bfa      	ldrh	r2, [r7, #30]
    c9b6:	429a      	cmp	r2, r3
    c9b8:	d902      	bls.n	c9c0 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    c9ba:	687b      	ldr	r3, [r7, #4]
    c9bc:	8a1b      	ldrh	r3, [r3, #16]
    c9be:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    c9c0:	687b      	ldr	r3, [r7, #4]
    c9c2:	68d8      	ldr	r0, [r3, #12]
    c9c4:	687b      	ldr	r3, [r7, #4]
    c9c6:	681a      	ldr	r2, [r3, #0]
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	689b      	ldr	r3, [r3, #8]
    c9cc:	4413      	add	r3, r2
    c9ce:	8bfa      	ldrh	r2, [r7, #30]
    c9d0:	4619      	mov	r1, r3
    c9d2:	4b44      	ldr	r3, [pc, #272]	; (cae4 <_usb_d_dev_in_next+0x1f8>)
    c9d4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    c9d6:	687b      	ldr	r3, [r7, #4]
    c9d8:	68db      	ldr	r3, [r3, #12]
    c9da:	461a      	mov	r2, r3
    c9dc:	7dfb      	ldrb	r3, [r7, #23]
    c9de:	2101      	movs	r1, #1
    c9e0:	4618      	mov	r0, r3
    c9e2:	4b41      	ldr	r3, [pc, #260]	; (cae8 <_usb_d_dev_in_next+0x1fc>)
    c9e4:	4798      	blx	r3
    c9e6:	e011      	b.n	ca0c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    c9e8:	8bfb      	ldrh	r3, [r7, #30]
    c9ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c9ee:	d902      	bls.n	c9f6 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    c9f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c9f4:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c9f6:	687b      	ldr	r3, [r7, #4]
    c9f8:	681a      	ldr	r2, [r3, #0]
    c9fa:	687b      	ldr	r3, [r7, #4]
    c9fc:	689b      	ldr	r3, [r3, #8]
    c9fe:	4413      	add	r3, r2
    ca00:	461a      	mov	r2, r3
    ca02:	7dfb      	ldrb	r3, [r7, #23]
    ca04:	2101      	movs	r1, #1
    ca06:	4618      	mov	r0, r3
    ca08:	4b37      	ldr	r3, [pc, #220]	; (cae8 <_usb_d_dev_in_next+0x1fc>)
    ca0a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    ca0c:	8bfa      	ldrh	r2, [r7, #30]
    ca0e:	7df8      	ldrb	r0, [r7, #23]
    ca10:	2300      	movs	r3, #0
    ca12:	2101      	movs	r1, #1
    ca14:	4c35      	ldr	r4, [pc, #212]	; (caec <_usb_d_dev_in_next+0x200>)
    ca16:	47a0      	blx	r4
		goto _in_tx_exec;
    ca18:	e041      	b.n	ca9e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    ca1a:	687b      	ldr	r3, [r7, #4]
    ca1c:	7cdb      	ldrb	r3, [r3, #19]
    ca1e:	f003 0310 	and.w	r3, r3, #16
    ca22:	b2db      	uxtb	r3, r3
    ca24:	2b00      	cmp	r3, #0
    ca26:	d00b      	beq.n	ca40 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    ca28:	687a      	ldr	r2, [r7, #4]
    ca2a:	7cd3      	ldrb	r3, [r2, #19]
    ca2c:	f36f 1304 	bfc	r3, #4, #1
    ca30:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    ca32:	7df8      	ldrb	r0, [r7, #23]
    ca34:	2300      	movs	r3, #0
    ca36:	2200      	movs	r2, #0
    ca38:	2101      	movs	r1, #1
    ca3a:	4c2c      	ldr	r4, [pc, #176]	; (caec <_usb_d_dev_in_next+0x200>)
    ca3c:	47a0      	blx	r4
		goto _in_tx_exec;
    ca3e:	e02e      	b.n	ca9e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    ca40:	7afb      	ldrb	r3, [r7, #11]
    ca42:	2b00      	cmp	r3, #0
    ca44:	d006      	beq.n	ca54 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    ca46:	7dfb      	ldrb	r3, [r7, #23]
    ca48:	224b      	movs	r2, #75	; 0x4b
    ca4a:	4619      	mov	r1, r3
    ca4c:	69b8      	ldr	r0, [r7, #24]
    ca4e:	4b28      	ldr	r3, [pc, #160]	; (caf0 <_usb_d_dev_in_next+0x204>)
    ca50:	4798      	blx	r3
    ca52:	e005      	b.n	ca60 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    ca54:	7dfb      	ldrb	r3, [r7, #23]
    ca56:	224a      	movs	r2, #74	; 0x4a
    ca58:	4619      	mov	r1, r3
    ca5a:	69b8      	ldr	r0, [r7, #24]
    ca5c:	4b24      	ldr	r3, [pc, #144]	; (caf0 <_usb_d_dev_in_next+0x204>)
    ca5e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    ca60:	687b      	ldr	r3, [r7, #4]
    ca62:	8a1b      	ldrh	r3, [r3, #16]
    ca64:	89ba      	ldrh	r2, [r7, #12]
    ca66:	429a      	cmp	r2, r3
    ca68:	d114      	bne.n	ca94 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    ca6a:	687a      	ldr	r2, [r7, #4]
    ca6c:	7cd3      	ldrb	r3, [r2, #19]
    ca6e:	f36f 1386 	bfc	r3, #6, #1
    ca72:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    ca74:	4b1f      	ldr	r3, [pc, #124]	; (caf4 <_usb_d_dev_in_next+0x208>)
    ca76:	68db      	ldr	r3, [r3, #12]
    ca78:	687a      	ldr	r2, [r7, #4]
    ca7a:	7c90      	ldrb	r0, [r2, #18]
    ca7c:	687a      	ldr	r2, [r7, #4]
    ca7e:	6892      	ldr	r2, [r2, #8]
    ca80:	4611      	mov	r1, r2
    ca82:	4798      	blx	r3
    ca84:	4603      	mov	r3, r0
    ca86:	2b00      	cmp	r3, #0
    ca88:	d124      	bne.n	cad4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    ca8a:	687a      	ldr	r2, [r7, #4]
    ca8c:	7cd3      	ldrb	r3, [r2, #19]
    ca8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ca92:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    ca94:	2100      	movs	r1, #0
    ca96:	6878      	ldr	r0, [r7, #4]
    ca98:	4b17      	ldr	r3, [pc, #92]	; (caf8 <_usb_d_dev_in_next+0x20c>)
    ca9a:	4798      	blx	r3
	return;
    ca9c:	e01b      	b.n	cad6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    ca9e:	78fb      	ldrb	r3, [r7, #3]
    caa0:	f083 0301 	eor.w	r3, r3, #1
    caa4:	b2db      	uxtb	r3, r3
    caa6:	2b00      	cmp	r3, #0
    caa8:	d00d      	beq.n	cac6 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    caaa:	7afb      	ldrb	r3, [r7, #11]
    caac:	2b00      	cmp	r3, #0
    caae:	d002      	beq.n	cab6 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    cab0:	234e      	movs	r3, #78	; 0x4e
    cab2:	777b      	strb	r3, [r7, #29]
    cab4:	e001      	b.n	caba <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    cab6:	234a      	movs	r3, #74	; 0x4a
    cab8:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    caba:	7f7a      	ldrb	r2, [r7, #29]
    cabc:	7dfb      	ldrb	r3, [r7, #23]
    cabe:	4619      	mov	r1, r3
    cac0:	69b8      	ldr	r0, [r7, #24]
    cac2:	4b0e      	ldr	r3, [pc, #56]	; (cafc <_usb_d_dev_in_next+0x210>)
    cac4:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    cac6:	7dfb      	ldrb	r3, [r7, #23]
    cac8:	2201      	movs	r2, #1
    caca:	2101      	movs	r1, #1
    cacc:	4618      	mov	r0, r3
    cace:	4b0c      	ldr	r3, [pc, #48]	; (cb00 <_usb_d_dev_in_next+0x214>)
    cad0:	4798      	blx	r3
    cad2:	e000      	b.n	cad6 <_usb_d_dev_in_next+0x1ea>
			return;
    cad4:	bf00      	nop
}
    cad6:	3724      	adds	r7, #36	; 0x24
    cad8:	46bd      	mov	sp, r7
    cada:	bd90      	pop	{r4, r7, pc}
    cadc:	20001d78 	.word	0x20001d78
    cae0:	0000c2e5 	.word	0x0000c2e5
    cae4:	000125a5 	.word	0x000125a5
    cae8:	0000c311 	.word	0x0000c311
    caec:	0000c459 	.word	0x0000c459
    caf0:	0000bbf1 	.word	0x0000bbf1
    caf4:	20001cb0 	.word	0x20001cb0
    caf8:	0000dc15 	.word	0x0000dc15
    cafc:	0000bbc5 	.word	0x0000bbc5
    cb00:	0000c511 	.word	0x0000c511

0000cb04 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    cb04:	b590      	push	{r4, r7, lr}
    cb06:	b08b      	sub	sp, #44	; 0x2c
    cb08:	af00      	add	r7, sp, #0
    cb0a:	6078      	str	r0, [r7, #4]
    cb0c:	460b      	mov	r3, r1
    cb0e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    cb10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb14:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	7c9b      	ldrb	r3, [r3, #18]
    cb1a:	f003 030f 	and.w	r3, r3, #15
    cb1e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    cb20:	7ffb      	ldrb	r3, [r7, #31]
    cb22:	015b      	lsls	r3, r3, #5
    cb24:	4a94      	ldr	r2, [pc, #592]	; (cd78 <_usb_d_dev_out_next+0x274>)
    cb26:	4413      	add	r3, r2
    cb28:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    cb2a:	78fb      	ldrb	r3, [r7, #3]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d005      	beq.n	cb3c <_usb_d_dev_out_next+0x38>
    cb30:	69bb      	ldr	r3, [r7, #24]
    cb32:	685b      	ldr	r3, [r3, #4]
    cb34:	f3c3 338d 	ubfx	r3, r3, #14, #14
    cb38:	b29b      	uxth	r3, r3
    cb3a:	e000      	b.n	cb3e <_usb_d_dev_out_next+0x3a>
    cb3c:	2300      	movs	r3, #0
    cb3e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    cb40:	78fb      	ldrb	r3, [r7, #3]
    cb42:	2b00      	cmp	r3, #0
    cb44:	d005      	beq.n	cb52 <_usb_d_dev_out_next+0x4e>
    cb46:	69bb      	ldr	r3, [r7, #24]
    cb48:	685b      	ldr	r3, [r3, #4]
    cb4a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cb4e:	b29b      	uxth	r3, r3
    cb50:	e000      	b.n	cb54 <_usb_d_dev_out_next+0x50>
    cb52:	2300      	movs	r3, #0
    cb54:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    cb56:	687b      	ldr	r3, [r7, #4]
    cb58:	8a1b      	ldrh	r3, [r3, #16]
    cb5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    cb5e:	4293      	cmp	r3, r2
    cb60:	d004      	beq.n	cb6c <_usb_d_dev_out_next+0x68>
    cb62:	687b      	ldr	r3, [r7, #4]
    cb64:	8a1b      	ldrh	r3, [r3, #16]
    cb66:	3b01      	subs	r3, #1
    cb68:	b29b      	uxth	r3, r3
    cb6a:	e001      	b.n	cb70 <_usb_d_dev_out_next+0x6c>
    cb6c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cb70:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    cb72:	8aba      	ldrh	r2, [r7, #20]
    cb74:	8a7b      	ldrh	r3, [r7, #18]
    cb76:	4013      	ands	r3, r2
    cb78:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cb7a:	687b      	ldr	r3, [r7, #4]
    cb7c:	7cdb      	ldrb	r3, [r3, #19]
    cb7e:	f003 0307 	and.w	r3, r3, #7
    cb82:	b2db      	uxtb	r3, r3
    cb84:	2b01      	cmp	r3, #1
    cb86:	bf0c      	ite	eq
    cb88:	2301      	moveq	r3, #1
    cb8a:	2300      	movne	r3, #0
    cb8c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    cb8e:	78fb      	ldrb	r3, [r7, #3]
    cb90:	2b00      	cmp	r3, #0
    cb92:	d004      	beq.n	cb9e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    cb94:	7ffb      	ldrb	r3, [r7, #31]
    cb96:	2100      	movs	r1, #0
    cb98:	4618      	mov	r0, r3
    cb9a:	4b78      	ldr	r3, [pc, #480]	; (cd7c <_usb_d_dev_out_next+0x278>)
    cb9c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    cb9e:	687b      	ldr	r3, [r7, #4]
    cba0:	7cdb      	ldrb	r3, [r3, #19]
    cba2:	f003 0320 	and.w	r3, r3, #32
    cba6:	b2db      	uxtb	r3, r3
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d01c      	beq.n	cbe6 <_usb_d_dev_out_next+0xe2>
    cbac:	687b      	ldr	r3, [r7, #4]
    cbae:	685b      	ldr	r3, [r3, #4]
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	d018      	beq.n	cbe6 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    cbb4:	687b      	ldr	r3, [r7, #4]
    cbb6:	685b      	ldr	r3, [r3, #4]
    cbb8:	b29a      	uxth	r2, r3
    cbba:	687b      	ldr	r3, [r7, #4]
    cbbc:	689b      	ldr	r3, [r3, #8]
    cbbe:	b29b      	uxth	r3, r3
    cbc0:	1ad3      	subs	r3, r2, r3
    cbc2:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    cbc4:	687b      	ldr	r3, [r7, #4]
    cbc6:	681a      	ldr	r2, [r3, #0]
    cbc8:	687b      	ldr	r3, [r7, #4]
    cbca:	689b      	ldr	r3, [r3, #8]
    cbcc:	18d0      	adds	r0, r2, r3
    cbce:	687b      	ldr	r3, [r7, #4]
    cbd0:	68d9      	ldr	r1, [r3, #12]
    cbd2:	89ba      	ldrh	r2, [r7, #12]
    cbd4:	8a3b      	ldrh	r3, [r7, #16]
    cbd6:	429a      	cmp	r2, r3
    cbd8:	d901      	bls.n	cbde <_usb_d_dev_out_next+0xda>
    cbda:	8a3b      	ldrh	r3, [r7, #16]
    cbdc:	e000      	b.n	cbe0 <_usb_d_dev_out_next+0xdc>
    cbde:	89bb      	ldrh	r3, [r7, #12]
    cbe0:	461a      	mov	r2, r3
    cbe2:	4b67      	ldr	r3, [pc, #412]	; (cd80 <_usb_d_dev_out_next+0x27c>)
    cbe4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    cbe6:	687b      	ldr	r3, [r7, #4]
    cbe8:	685b      	ldr	r3, [r3, #4]
    cbea:	2b00      	cmp	r3, #0
    cbec:	d121      	bne.n	cc32 <_usb_d_dev_out_next+0x12e>
    cbee:	687b      	ldr	r3, [r7, #4]
    cbf0:	7cdb      	ldrb	r3, [r3, #19]
    cbf2:	f003 0310 	and.w	r3, r3, #16
    cbf6:	b2db      	uxtb	r3, r3
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d01a      	beq.n	cc32 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    cbfc:	687a      	ldr	r2, [r7, #4]
    cbfe:	7cd3      	ldrb	r3, [r2, #19]
    cc00:	f36f 1304 	bfc	r3, #4, #1
    cc04:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    cc06:	687a      	ldr	r2, [r7, #4]
    cc08:	7cd3      	ldrb	r3, [r2, #19]
    cc0a:	f043 0320 	orr.w	r3, r3, #32
    cc0e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	68db      	ldr	r3, [r3, #12]
    cc14:	461a      	mov	r2, r3
    cc16:	7ffb      	ldrb	r3, [r7, #31]
    cc18:	2100      	movs	r1, #0
    cc1a:	4618      	mov	r0, r3
    cc1c:	4b59      	ldr	r3, [pc, #356]	; (cd84 <_usb_d_dev_out_next+0x280>)
    cc1e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    cc20:	687b      	ldr	r3, [r7, #4]
    cc22:	8a1b      	ldrh	r3, [r3, #16]
    cc24:	461a      	mov	r2, r3
    cc26:	7ff8      	ldrb	r0, [r7, #31]
    cc28:	2300      	movs	r3, #0
    cc2a:	2100      	movs	r1, #0
    cc2c:	4c56      	ldr	r4, [pc, #344]	; (cd88 <_usb_d_dev_out_next+0x284>)
    cc2e:	47a0      	blx	r4
		goto _out_rx_exec;
    cc30:	e090      	b.n	cd54 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    cc32:	78fb      	ldrb	r3, [r7, #3]
    cc34:	2b00      	cmp	r3, #0
    cc36:	d010      	beq.n	cc5a <_usb_d_dev_out_next+0x156>
    cc38:	687b      	ldr	r3, [r7, #4]
    cc3a:	8a1b      	ldrh	r3, [r3, #16]
    cc3c:	8a3a      	ldrh	r2, [r7, #16]
    cc3e:	429a      	cmp	r2, r3
    cc40:	d20b      	bcs.n	cc5a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    cc42:	687a      	ldr	r2, [r7, #4]
    cc44:	7cd3      	ldrb	r3, [r2, #19]
    cc46:	f36f 1304 	bfc	r3, #4, #1
    cc4a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    cc4c:	687b      	ldr	r3, [r7, #4]
    cc4e:	689a      	ldr	r2, [r3, #8]
    cc50:	8abb      	ldrh	r3, [r7, #20]
    cc52:	441a      	add	r2, r3
    cc54:	687b      	ldr	r3, [r7, #4]
    cc56:	609a      	str	r2, [r3, #8]
    cc58:	e05c      	b.n	cd14 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    cc5a:	687b      	ldr	r3, [r7, #4]
    cc5c:	689a      	ldr	r2, [r3, #8]
    cc5e:	8afb      	ldrh	r3, [r7, #22]
    cc60:	441a      	add	r2, r3
    cc62:	687b      	ldr	r3, [r7, #4]
    cc64:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    cc66:	687b      	ldr	r3, [r7, #4]
    cc68:	689a      	ldr	r2, [r3, #8]
    cc6a:	687b      	ldr	r3, [r7, #4]
    cc6c:	685b      	ldr	r3, [r3, #4]
    cc6e:	429a      	cmp	r2, r3
    cc70:	d250      	bcs.n	cd14 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    cc72:	687b      	ldr	r3, [r7, #4]
    cc74:	685b      	ldr	r3, [r3, #4]
    cc76:	b29a      	uxth	r2, r3
    cc78:	687b      	ldr	r3, [r7, #4]
    cc7a:	689b      	ldr	r3, [r3, #8]
    cc7c:	b29b      	uxth	r3, r3
    cc7e:	1ad3      	subs	r3, r2, r3
    cc80:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    cc82:	687b      	ldr	r3, [r7, #4]
    cc84:	7cdb      	ldrb	r3, [r3, #19]
    cc86:	f003 0320 	and.w	r3, r3, #32
    cc8a:	b2db      	uxtb	r3, r3
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d010      	beq.n	ccb2 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    cc90:	687b      	ldr	r3, [r7, #4]
    cc92:	8a1b      	ldrh	r3, [r3, #16]
    cc94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cc96:	429a      	cmp	r2, r3
    cc98:	d902      	bls.n	cca0 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    cc9a:	687b      	ldr	r3, [r7, #4]
    cc9c:	8a1b      	ldrh	r3, [r3, #16]
    cc9e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cca0:	687b      	ldr	r3, [r7, #4]
    cca2:	68db      	ldr	r3, [r3, #12]
    cca4:	461a      	mov	r2, r3
    cca6:	7ffb      	ldrb	r3, [r7, #31]
    cca8:	2100      	movs	r1, #0
    ccaa:	4618      	mov	r0, r3
    ccac:	4b35      	ldr	r3, [pc, #212]	; (cd84 <_usb_d_dev_out_next+0x280>)
    ccae:	4798      	blx	r3
    ccb0:	e029      	b.n	cd06 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    ccb2:	687b      	ldr	r3, [r7, #4]
    ccb4:	8a1b      	ldrh	r3, [r3, #16]
    ccb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ccb8:	429a      	cmp	r2, r3
    ccba:	d90f      	bls.n	ccdc <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    ccbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    ccbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ccc2:	d903      	bls.n	cccc <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    ccc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ccc8:	84fb      	strh	r3, [r7, #38]	; 0x26
    ccca:	e011      	b.n	ccf0 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    cccc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ccce:	8a7b      	ldrh	r3, [r7, #18]
    ccd0:	4013      	ands	r3, r2
    ccd2:	b29b      	uxth	r3, r3
    ccd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    ccd6:	1ad3      	subs	r3, r2, r3
    ccd8:	84fb      	strh	r3, [r7, #38]	; 0x26
    ccda:	e009      	b.n	ccf0 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    ccdc:	687b      	ldr	r3, [r7, #4]
    ccde:	8a1b      	ldrh	r3, [r3, #16]
    cce0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cce2:	429a      	cmp	r2, r3
    cce4:	d204      	bcs.n	ccf0 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    cce6:	687a      	ldr	r2, [r7, #4]
    cce8:	7cd3      	ldrb	r3, [r2, #19]
    ccea:	f043 0320 	orr.w	r3, r3, #32
    ccee:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ccf0:	687b      	ldr	r3, [r7, #4]
    ccf2:	681a      	ldr	r2, [r3, #0]
    ccf4:	687b      	ldr	r3, [r7, #4]
    ccf6:	689b      	ldr	r3, [r3, #8]
    ccf8:	4413      	add	r3, r2
    ccfa:	461a      	mov	r2, r3
    ccfc:	7ffb      	ldrb	r3, [r7, #31]
    ccfe:	2100      	movs	r1, #0
    cd00:	4618      	mov	r0, r3
    cd02:	4b20      	ldr	r3, [pc, #128]	; (cd84 <_usb_d_dev_out_next+0x280>)
    cd04:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    cd06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    cd08:	7ff8      	ldrb	r0, [r7, #31]
    cd0a:	2300      	movs	r3, #0
    cd0c:	2100      	movs	r1, #0
    cd0e:	4c1e      	ldr	r4, [pc, #120]	; (cd88 <_usb_d_dev_out_next+0x284>)
    cd10:	47a0      	blx	r4
			goto _out_rx_exec;
    cd12:	e01f      	b.n	cd54 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    cd14:	7bfb      	ldrb	r3, [r7, #15]
    cd16:	2b00      	cmp	r3, #0
    cd18:	d006      	beq.n	cd28 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    cd1a:	7ffb      	ldrb	r3, [r7, #31]
    cd1c:	222d      	movs	r2, #45	; 0x2d
    cd1e:	4619      	mov	r1, r3
    cd20:	6a38      	ldr	r0, [r7, #32]
    cd22:	4b1a      	ldr	r3, [pc, #104]	; (cd8c <_usb_d_dev_out_next+0x288>)
    cd24:	4798      	blx	r3
    cd26:	e005      	b.n	cd34 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    cd28:	7ffb      	ldrb	r3, [r7, #31]
    cd2a:	2225      	movs	r2, #37	; 0x25
    cd2c:	4619      	mov	r1, r3
    cd2e:	6a38      	ldr	r0, [r7, #32]
    cd30:	4b16      	ldr	r3, [pc, #88]	; (cd8c <_usb_d_dev_out_next+0x288>)
    cd32:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    cd34:	7ffb      	ldrb	r3, [r7, #31]
    cd36:	2b00      	cmp	r3, #0
    cd38:	d107      	bne.n	cd4a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cd3a:	687b      	ldr	r3, [r7, #4]
    cd3c:	68db      	ldr	r3, [r3, #12]
    cd3e:	461a      	mov	r2, r3
    cd40:	7ffb      	ldrb	r3, [r7, #31]
    cd42:	2100      	movs	r1, #0
    cd44:	4618      	mov	r0, r3
    cd46:	4b0f      	ldr	r3, [pc, #60]	; (cd84 <_usb_d_dev_out_next+0x280>)
    cd48:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    cd4a:	2100      	movs	r1, #0
    cd4c:	6878      	ldr	r0, [r7, #4]
    cd4e:	4b10      	ldr	r3, [pc, #64]	; (cd90 <_usb_d_dev_out_next+0x28c>)
    cd50:	4798      	blx	r3
	return;
    cd52:	e031      	b.n	cdb8 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    cd54:	78fb      	ldrb	r3, [r7, #3]
    cd56:	f083 0301 	eor.w	r3, r3, #1
    cd5a:	b2db      	uxtb	r3, r3
    cd5c:	2b00      	cmp	r3, #0
    cd5e:	d025      	beq.n	cdac <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    cd60:	7bfb      	ldrb	r3, [r7, #15]
    cd62:	2b00      	cmp	r3, #0
    cd64:	d018      	beq.n	cd98 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    cd66:	7ffb      	ldrb	r3, [r7, #31]
    cd68:	2101      	movs	r1, #1
    cd6a:	4618      	mov	r0, r3
    cd6c:	4b09      	ldr	r3, [pc, #36]	; (cd94 <_usb_d_dev_out_next+0x290>)
    cd6e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    cd70:	232d      	movs	r3, #45	; 0x2d
    cd72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    cd76:	e012      	b.n	cd9e <_usb_d_dev_out_next+0x29a>
    cd78:	20001d78 	.word	0x20001d78
    cd7c:	0000c2e5 	.word	0x0000c2e5
    cd80:	000125a5 	.word	0x000125a5
    cd84:	0000c311 	.word	0x0000c311
    cd88:	0000c499 	.word	0x0000c499
    cd8c:	0000bbf1 	.word	0x0000bbf1
    cd90:	0000dc15 	.word	0x0000dc15
    cd94:	0000c4d9 	.word	0x0000c4d9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    cd98:	2325      	movs	r3, #37	; 0x25
    cd9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    cd9e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    cda2:	7ffb      	ldrb	r3, [r7, #31]
    cda4:	4619      	mov	r1, r3
    cda6:	6a38      	ldr	r0, [r7, #32]
    cda8:	4b05      	ldr	r3, [pc, #20]	; (cdc0 <_usb_d_dev_out_next+0x2bc>)
    cdaa:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    cdac:	7ffb      	ldrb	r3, [r7, #31]
    cdae:	2201      	movs	r2, #1
    cdb0:	2100      	movs	r1, #0
    cdb2:	4618      	mov	r0, r3
    cdb4:	4b03      	ldr	r3, [pc, #12]	; (cdc4 <_usb_d_dev_out_next+0x2c0>)
    cdb6:	4798      	blx	r3
}
    cdb8:	372c      	adds	r7, #44	; 0x2c
    cdba:	46bd      	mov	sp, r7
    cdbc:	bd90      	pop	{r4, r7, pc}
    cdbe:	bf00      	nop
    cdc0:	0000bbc5 	.word	0x0000bbc5
    cdc4:	0000c569 	.word	0x0000c569

0000cdc8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    cdc8:	b580      	push	{r7, lr}
    cdca:	b084      	sub	sp, #16
    cdcc:	af00      	add	r7, sp, #0
    cdce:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    cdd0:	687b      	ldr	r3, [r7, #4]
    cdd2:	7c9b      	ldrb	r3, [r3, #18]
    cdd4:	f003 030f 	and.w	r3, r3, #15
    cdd8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cdda:	687b      	ldr	r3, [r7, #4]
    cddc:	7cdb      	ldrb	r3, [r3, #19]
    cdde:	f003 0307 	and.w	r3, r3, #7
    cde2:	b2db      	uxtb	r3, r3
    cde4:	2b01      	cmp	r3, #1
    cde6:	bf0c      	ite	eq
    cde8:	2301      	moveq	r3, #1
    cdea:	2300      	movne	r3, #0
    cdec:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    cdee:	7bbb      	ldrb	r3, [r7, #14]
    cdf0:	f083 0301 	eor.w	r3, r3, #1
    cdf4:	b2db      	uxtb	r3, r3
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d008      	beq.n	ce0c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    cdfa:	7bfb      	ldrb	r3, [r7, #15]
    cdfc:	4618      	mov	r0, r3
    cdfe:	4b20      	ldr	r3, [pc, #128]	; (ce80 <_usb_d_dev_handle_setup+0xb8>)
    ce00:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    ce02:	7bfb      	ldrb	r3, [r7, #15]
    ce04:	4618      	mov	r0, r3
    ce06:	4b1f      	ldr	r3, [pc, #124]	; (ce84 <_usb_d_dev_handle_setup+0xbc>)
    ce08:	4798      	blx	r3
		return;
    ce0a:	e036      	b.n	ce7a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    ce0c:	687b      	ldr	r3, [r7, #4]
    ce0e:	7cdb      	ldrb	r3, [r3, #19]
    ce10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ce14:	b2db      	uxtb	r3, r3
    ce16:	2b00      	cmp	r3, #0
    ce18:	d010      	beq.n	ce3c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    ce1a:	687a      	ldr	r2, [r7, #4]
    ce1c:	7cd3      	ldrb	r3, [r2, #19]
    ce1e:	f36f 1386 	bfc	r3, #6, #1
    ce22:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ce24:	7bfb      	ldrb	r3, [r7, #15]
    ce26:	2200      	movs	r2, #0
    ce28:	2101      	movs	r1, #1
    ce2a:	4618      	mov	r0, r3
    ce2c:	4b16      	ldr	r3, [pc, #88]	; (ce88 <_usb_d_dev_handle_setup+0xc0>)
    ce2e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    ce30:	7bfb      	ldrb	r3, [r7, #15]
    ce32:	2200      	movs	r2, #0
    ce34:	2100      	movs	r1, #0
    ce36:	4618      	mov	r0, r3
    ce38:	4b14      	ldr	r3, [pc, #80]	; (ce8c <_usb_d_dev_handle_setup+0xc4>)
    ce3a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    ce3c:	687a      	ldr	r2, [r7, #4]
    ce3e:	7cd3      	ldrb	r3, [r2, #19]
    ce40:	f36f 03c3 	bfc	r3, #3, #1
    ce44:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    ce46:	7bfb      	ldrb	r3, [r7, #15]
    ce48:	2100      	movs	r1, #0
    ce4a:	4618      	mov	r0, r3
    ce4c:	4b10      	ldr	r3, [pc, #64]	; (ce90 <_usb_d_dev_handle_setup+0xc8>)
    ce4e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    ce50:	7bfb      	ldrb	r3, [r7, #15]
    ce52:	2101      	movs	r1, #1
    ce54:	4618      	mov	r0, r3
    ce56:	4b0e      	ldr	r3, [pc, #56]	; (ce90 <_usb_d_dev_handle_setup+0xc8>)
    ce58:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    ce5a:	7bfb      	ldrb	r3, [r7, #15]
    ce5c:	216f      	movs	r1, #111	; 0x6f
    ce5e:	4618      	mov	r0, r3
    ce60:	4b0c      	ldr	r3, [pc, #48]	; (ce94 <_usb_d_dev_handle_setup+0xcc>)
    ce62:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    ce64:	7bfb      	ldrb	r3, [r7, #15]
    ce66:	216f      	movs	r1, #111	; 0x6f
    ce68:	4618      	mov	r0, r3
    ce6a:	4b0b      	ldr	r3, [pc, #44]	; (ce98 <_usb_d_dev_handle_setup+0xd0>)
    ce6c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    ce6e:	4b0b      	ldr	r3, [pc, #44]	; (ce9c <_usb_d_dev_handle_setup+0xd4>)
    ce70:	689b      	ldr	r3, [r3, #8]
    ce72:	687a      	ldr	r2, [r7, #4]
    ce74:	7c92      	ldrb	r2, [r2, #18]
    ce76:	4610      	mov	r0, r2
    ce78:	4798      	blx	r3
}
    ce7a:	3710      	adds	r7, #16
    ce7c:	46bd      	mov	sp, r7
    ce7e:	bd80      	pop	{r7, pc}
    ce80:	0000c26d 	.word	0x0000c26d
    ce84:	0000c219 	.word	0x0000c219
    ce88:	0000c511 	.word	0x0000c511
    ce8c:	0000c569 	.word	0x0000c569
    ce90:	0000c4d9 	.word	0x0000c4d9
    ce94:	0000c019 	.word	0x0000c019
    ce98:	0000c069 	.word	0x0000c069
    ce9c:	20001cb0 	.word	0x20001cb0

0000cea0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cea0:	b580      	push	{r7, lr}
    cea2:	b084      	sub	sp, #16
    cea4:	af00      	add	r7, sp, #0
    cea6:	6078      	str	r0, [r7, #4]
    cea8:	460b      	mov	r3, r1
    ceaa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ceac:	687b      	ldr	r3, [r7, #4]
    ceae:	7c9b      	ldrb	r3, [r3, #18]
    ceb0:	f003 030f 	and.w	r3, r3, #15
    ceb4:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    ceb6:	78f9      	ldrb	r1, [r7, #3]
    ceb8:	7bfb      	ldrb	r3, [r7, #15]
    ceba:	2200      	movs	r2, #0
    cebc:	4618      	mov	r0, r3
    cebe:	4b07      	ldr	r3, [pc, #28]	; (cedc <_usb_d_dev_handle_stall+0x3c>)
    cec0:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    cec2:	4b07      	ldr	r3, [pc, #28]	; (cee0 <_usb_d_dev_handle_stall+0x40>)
    cec4:	691b      	ldr	r3, [r3, #16]
    cec6:	687a      	ldr	r2, [r7, #4]
    cec8:	7c90      	ldrb	r0, [r2, #18]
    ceca:	687a      	ldr	r2, [r7, #4]
    cecc:	6892      	ldr	r2, [r2, #8]
    cece:	2101      	movs	r1, #1
    ced0:	4798      	blx	r3
}
    ced2:	bf00      	nop
    ced4:	3710      	adds	r7, #16
    ced6:	46bd      	mov	sp, r7
    ced8:	bd80      	pop	{r7, pc}
    ceda:	bf00      	nop
    cedc:	0000c1cd 	.word	0x0000c1cd
    cee0:	20001cb0 	.word	0x20001cb0

0000cee4 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    cee4:	b580      	push	{r7, lr}
    cee6:	b088      	sub	sp, #32
    cee8:	af00      	add	r7, sp, #0
    ceea:	6078      	str	r0, [r7, #4]
    ceec:	460b      	mov	r3, r1
    ceee:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    cef0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cef4:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    cef6:	687b      	ldr	r3, [r7, #4]
    cef8:	7c9b      	ldrb	r3, [r3, #18]
    cefa:	f003 030f 	and.w	r3, r3, #15
    cefe:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    cf00:	4b61      	ldr	r3, [pc, #388]	; (d088 <_usb_d_dev_handle_trfail+0x1a4>)
    cf02:	881b      	ldrh	r3, [r3, #0]
    cf04:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    cf06:	7efb      	ldrb	r3, [r7, #27]
    cf08:	015b      	lsls	r3, r3, #5
    cf0a:	4a60      	ldr	r2, [pc, #384]	; (d08c <_usb_d_dev_handle_trfail+0x1a8>)
    cf0c:	4413      	add	r3, r2
    cf0e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    cf10:	78fb      	ldrb	r3, [r7, #3]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d006      	beq.n	cf24 <_usb_d_dev_handle_trfail+0x40>
    cf16:	7efb      	ldrb	r3, [r7, #27]
    cf18:	4619      	mov	r1, r3
    cf1a:	69f8      	ldr	r0, [r7, #28]
    cf1c:	4b5c      	ldr	r3, [pc, #368]	; (d090 <_usb_d_dev_handle_trfail+0x1ac>)
    cf1e:	4798      	blx	r3
    cf20:	4603      	mov	r3, r0
    cf22:	e005      	b.n	cf30 <_usb_d_dev_handle_trfail+0x4c>
    cf24:	7efb      	ldrb	r3, [r7, #27]
    cf26:	4619      	mov	r1, r3
    cf28:	69f8      	ldr	r0, [r7, #28]
    cf2a:	4b5a      	ldr	r3, [pc, #360]	; (d094 <_usb_d_dev_handle_trfail+0x1b0>)
    cf2c:	4798      	blx	r3
    cf2e:	4603      	mov	r3, r0
    cf30:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    cf32:	687b      	ldr	r3, [r7, #4]
    cf34:	7cdb      	ldrb	r3, [r3, #19]
    cf36:	f003 0307 	and.w	r3, r3, #7
    cf3a:	b2db      	uxtb	r3, r3
    cf3c:	2b01      	cmp	r3, #1
    cf3e:	bf0c      	ite	eq
    cf40:	2301      	moveq	r3, #1
    cf42:	2300      	movne	r3, #0
    cf44:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    cf46:	78fb      	ldrb	r3, [r7, #3]
    cf48:	011b      	lsls	r3, r3, #4
    cf4a:	697a      	ldr	r2, [r7, #20]
    cf4c:	4413      	add	r3, r2
    cf4e:	7a9b      	ldrb	r3, [r3, #10]
    cf50:	b2db      	uxtb	r3, r3
    cf52:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    cf54:	7cfb      	ldrb	r3, [r7, #19]
    cf56:	2b02      	cmp	r3, #2
    cf58:	d12f      	bne.n	cfba <_usb_d_dev_handle_trfail+0xd6>
    cf5a:	7b3b      	ldrb	r3, [r7, #12]
    cf5c:	f003 0301 	and.w	r3, r3, #1
    cf60:	b2db      	uxtb	r3, r3
    cf62:	2b00      	cmp	r3, #0
    cf64:	d029      	beq.n	cfba <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    cf66:	78fb      	ldrb	r3, [r7, #3]
    cf68:	011b      	lsls	r3, r3, #4
    cf6a:	697a      	ldr	r2, [r7, #20]
    cf6c:	441a      	add	r2, r3
    cf6e:	7a93      	ldrb	r3, [r2, #10]
    cf70:	f36f 0300 	bfc	r3, #0, #1
    cf74:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cf76:	78fb      	ldrb	r3, [r7, #3]
    cf78:	f107 0220 	add.w	r2, r7, #32
    cf7c:	4413      	add	r3, r2
    cf7e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cf82:	7efb      	ldrb	r3, [r7, #27]
    cf84:	4619      	mov	r1, r3
    cf86:	69f8      	ldr	r0, [r7, #28]
    cf88:	4b43      	ldr	r3, [pc, #268]	; (d098 <_usb_d_dev_handle_trfail+0x1b4>)
    cf8a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    cf8c:	78fb      	ldrb	r3, [r7, #3]
    cf8e:	f107 0220 	add.w	r2, r7, #32
    cf92:	4413      	add	r3, r2
    cf94:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cf98:	7efb      	ldrb	r3, [r7, #27]
    cf9a:	4619      	mov	r1, r3
    cf9c:	69f8      	ldr	r0, [r7, #28]
    cf9e:	4b3f      	ldr	r3, [pc, #252]	; (d09c <_usb_d_dev_handle_trfail+0x1b8>)
    cfa0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    cfa2:	78fb      	ldrb	r3, [r7, #3]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	bf14      	ite	ne
    cfa8:	2301      	movne	r3, #1
    cfaa:	2300      	moveq	r3, #0
    cfac:	b2db      	uxtb	r3, r3
    cfae:	2204      	movs	r2, #4
    cfb0:	4619      	mov	r1, r3
    cfb2:	6878      	ldr	r0, [r7, #4]
    cfb4:	4b3a      	ldr	r3, [pc, #232]	; (d0a0 <_usb_d_dev_handle_trfail+0x1bc>)
    cfb6:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    cfb8:	e062      	b.n	d080 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    cfba:	7b3b      	ldrb	r3, [r7, #12]
    cfbc:	f003 0302 	and.w	r3, r3, #2
    cfc0:	b2db      	uxtb	r3, r3
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	d040      	beq.n	d048 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    cfc6:	78fb      	ldrb	r3, [r7, #3]
    cfc8:	011b      	lsls	r3, r3, #4
    cfca:	697a      	ldr	r2, [r7, #20]
    cfcc:	441a      	add	r2, r3
    cfce:	7a93      	ldrb	r3, [r2, #10]
    cfd0:	f36f 0341 	bfc	r3, #1, #1
    cfd4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    cfd6:	78fb      	ldrb	r3, [r7, #3]
    cfd8:	f107 0220 	add.w	r2, r7, #32
    cfdc:	4413      	add	r3, r2
    cfde:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cfe2:	7efb      	ldrb	r3, [r7, #27]
    cfe4:	4619      	mov	r1, r3
    cfe6:	69f8      	ldr	r0, [r7, #28]
    cfe8:	4b2b      	ldr	r3, [pc, #172]	; (d098 <_usb_d_dev_handle_trfail+0x1b4>)
    cfea:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    cfec:	78fb      	ldrb	r3, [r7, #3]
    cfee:	f107 0220 	add.w	r2, r7, #32
    cff2:	4413      	add	r3, r2
    cff4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    cff8:	7efb      	ldrb	r3, [r7, #27]
    cffa:	4619      	mov	r1, r3
    cffc:	69f8      	ldr	r0, [r7, #28]
    cffe:	4b27      	ldr	r3, [pc, #156]	; (d09c <_usb_d_dev_handle_trfail+0x1b8>)
    d000:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    d002:	7cbb      	ldrb	r3, [r7, #18]
    d004:	2b00      	cmp	r3, #0
    d006:	d03b      	beq.n	d080 <_usb_d_dev_handle_trfail+0x19c>
    d008:	687b      	ldr	r3, [r7, #4]
    d00a:	7cdb      	ldrb	r3, [r3, #19]
    d00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d010:	b2db      	uxtb	r3, r3
    d012:	2b00      	cmp	r3, #0
    d014:	d034      	beq.n	d080 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    d016:	687b      	ldr	r3, [r7, #4]
    d018:	7cdb      	ldrb	r3, [r3, #19]
    d01a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d01e:	b2db      	uxtb	r3, r3
    d020:	461a      	mov	r2, r3
    d022:	78fb      	ldrb	r3, [r7, #3]
    d024:	4293      	cmp	r3, r2
    d026:	d02b      	beq.n	d080 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    d028:	687b      	ldr	r3, [r7, #4]
    d02a:	7cdb      	ldrb	r3, [r3, #19]
    d02c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d030:	b2db      	uxtb	r3, r3
    d032:	2b00      	cmp	r3, #0
    d034:	bf14      	ite	ne
    d036:	2301      	movne	r3, #1
    d038:	2300      	moveq	r3, #0
    d03a:	b2db      	uxtb	r3, r3
    d03c:	2200      	movs	r2, #0
    d03e:	4619      	mov	r1, r3
    d040:	6878      	ldr	r0, [r7, #4]
    d042:	4b17      	ldr	r3, [pc, #92]	; (d0a0 <_usb_d_dev_handle_trfail+0x1bc>)
    d044:	4798      	blx	r3
}
    d046:	e01b      	b.n	d080 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    d048:	78fa      	ldrb	r2, [r7, #3]
    d04a:	7efb      	ldrb	r3, [r7, #27]
    d04c:	4611      	mov	r1, r2
    d04e:	4618      	mov	r0, r3
    d050:	4b14      	ldr	r3, [pc, #80]	; (d0a4 <_usb_d_dev_handle_trfail+0x1c0>)
    d052:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    d054:	78fb      	ldrb	r3, [r7, #3]
    d056:	f107 0220 	add.w	r2, r7, #32
    d05a:	4413      	add	r3, r2
    d05c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d060:	7efb      	ldrb	r3, [r7, #27]
    d062:	4619      	mov	r1, r3
    d064:	69f8      	ldr	r0, [r7, #28]
    d066:	4b0c      	ldr	r3, [pc, #48]	; (d098 <_usb_d_dev_handle_trfail+0x1b4>)
    d068:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    d06a:	78fb      	ldrb	r3, [r7, #3]
    d06c:	f107 0220 	add.w	r2, r7, #32
    d070:	4413      	add	r3, r2
    d072:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    d076:	7efb      	ldrb	r3, [r7, #27]
    d078:	4619      	mov	r1, r3
    d07a:	69f8      	ldr	r0, [r7, #28]
    d07c:	4b07      	ldr	r3, [pc, #28]	; (d09c <_usb_d_dev_handle_trfail+0x1b8>)
    d07e:	4798      	blx	r3
}
    d080:	bf00      	nop
    d082:	3720      	adds	r7, #32
    d084:	46bd      	mov	sp, r7
    d086:	bd80      	pop	{r7, pc}
    d088:	00013ddc 	.word	0x00013ddc
    d08c:	20001d78 	.word	0x20001d78
    d090:	0000bc4d 	.word	0x0000bc4d
    d094:	0000bc1d 	.word	0x0000bc1d
    d098:	0000baf1 	.word	0x0000baf1
    d09c:	0000bbf1 	.word	0x0000bbf1
    d0a0:	0000dc5d 	.word	0x0000dc5d
    d0a4:	0000c4d9 	.word	0x0000c4d9

0000d0a8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d0a8:	b580      	push	{r7, lr}
    d0aa:	b082      	sub	sp, #8
    d0ac:	af00      	add	r7, sp, #0
    d0ae:	6078      	str	r0, [r7, #4]
    d0b0:	460b      	mov	r3, r1
    d0b2:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d0b4:	78fb      	ldrb	r3, [r7, #3]
    d0b6:	f003 0310 	and.w	r3, r3, #16
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d003      	beq.n	d0c6 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    d0be:	6878      	ldr	r0, [r7, #4]
    d0c0:	4b0c      	ldr	r3, [pc, #48]	; (d0f4 <_usb_d_dev_trans_setup_isr+0x4c>)
    d0c2:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    d0c4:	e012      	b.n	d0ec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    d0c6:	78fb      	ldrb	r3, [r7, #3]
    d0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d004      	beq.n	d0da <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    d0d0:	2101      	movs	r1, #1
    d0d2:	6878      	ldr	r0, [r7, #4]
    d0d4:	4b08      	ldr	r3, [pc, #32]	; (d0f8 <_usb_d_dev_trans_setup_isr+0x50>)
    d0d6:	4798      	blx	r3
}
    d0d8:	e008      	b.n	d0ec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    d0da:	78fb      	ldrb	r3, [r7, #3]
    d0dc:	f003 0320 	and.w	r3, r3, #32
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d003      	beq.n	d0ec <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    d0e4:	2100      	movs	r1, #0
    d0e6:	6878      	ldr	r0, [r7, #4]
    d0e8:	4b03      	ldr	r3, [pc, #12]	; (d0f8 <_usb_d_dev_trans_setup_isr+0x50>)
    d0ea:	4798      	blx	r3
}
    d0ec:	bf00      	nop
    d0ee:	3708      	adds	r7, #8
    d0f0:	46bd      	mov	sp, r7
    d0f2:	bd80      	pop	{r7, pc}
    d0f4:	0000cdc9 	.word	0x0000cdc9
    d0f8:	0000cea1 	.word	0x0000cea1

0000d0fc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d0fc:	b580      	push	{r7, lr}
    d0fe:	b082      	sub	sp, #8
    d100:	af00      	add	r7, sp, #0
    d102:	6078      	str	r0, [r7, #4]
    d104:	460b      	mov	r3, r1
    d106:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    d108:	78fb      	ldrb	r3, [r7, #3]
    d10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d10e:	2b00      	cmp	r3, #0
    d110:	d004      	beq.n	d11c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    d112:	2101      	movs	r1, #1
    d114:	6878      	ldr	r0, [r7, #4]
    d116:	4b1a      	ldr	r3, [pc, #104]	; (d180 <_usb_d_dev_trans_in_isr+0x84>)
    d118:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    d11a:	e02c      	b.n	d176 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d11c:	78fb      	ldrb	r3, [r7, #3]
    d11e:	f003 0308 	and.w	r3, r3, #8
    d122:	2b00      	cmp	r3, #0
    d124:	d004      	beq.n	d130 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    d126:	2101      	movs	r1, #1
    d128:	6878      	ldr	r0, [r7, #4]
    d12a:	4b16      	ldr	r3, [pc, #88]	; (d184 <_usb_d_dev_trans_in_isr+0x88>)
    d12c:	4798      	blx	r3
}
    d12e:	e022      	b.n	d176 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    d130:	78fb      	ldrb	r3, [r7, #3]
    d132:	f003 0302 	and.w	r3, r3, #2
    d136:	2b00      	cmp	r3, #0
    d138:	d004      	beq.n	d144 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    d13a:	2101      	movs	r1, #1
    d13c:	6878      	ldr	r0, [r7, #4]
    d13e:	4b12      	ldr	r3, [pc, #72]	; (d188 <_usb_d_dev_trans_in_isr+0x8c>)
    d140:	4798      	blx	r3
}
    d142:	e018      	b.n	d176 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    d144:	687b      	ldr	r3, [r7, #4]
    d146:	7cdb      	ldrb	r3, [r3, #19]
    d148:	f003 0307 	and.w	r3, r3, #7
    d14c:	b2db      	uxtb	r3, r3
    d14e:	2b01      	cmp	r3, #1
    d150:	d111      	bne.n	d176 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    d152:	78fb      	ldrb	r3, [r7, #3]
    d154:	f003 0304 	and.w	r3, r3, #4
    d158:	2b00      	cmp	r3, #0
    d15a:	d004      	beq.n	d166 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    d15c:	2100      	movs	r1, #0
    d15e:	6878      	ldr	r0, [r7, #4]
    d160:	4b08      	ldr	r3, [pc, #32]	; (d184 <_usb_d_dev_trans_in_isr+0x88>)
    d162:	4798      	blx	r3
}
    d164:	e007      	b.n	d176 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d166:	78fb      	ldrb	r3, [r7, #3]
    d168:	f003 0310 	and.w	r3, r3, #16
    d16c:	2b00      	cmp	r3, #0
    d16e:	d002      	beq.n	d176 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    d170:	6878      	ldr	r0, [r7, #4]
    d172:	4b06      	ldr	r3, [pc, #24]	; (d18c <_usb_d_dev_trans_in_isr+0x90>)
    d174:	4798      	blx	r3
}
    d176:	bf00      	nop
    d178:	3708      	adds	r7, #8
    d17a:	46bd      	mov	sp, r7
    d17c:	bd80      	pop	{r7, pc}
    d17e:	bf00      	nop
    d180:	0000cea1 	.word	0x0000cea1
    d184:	0000cee5 	.word	0x0000cee5
    d188:	0000c8ed 	.word	0x0000c8ed
    d18c:	0000cdc9 	.word	0x0000cdc9

0000d190 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    d190:	b580      	push	{r7, lr}
    d192:	b082      	sub	sp, #8
    d194:	af00      	add	r7, sp, #0
    d196:	6078      	str	r0, [r7, #4]
    d198:	460b      	mov	r3, r1
    d19a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    d19c:	78fb      	ldrb	r3, [r7, #3]
    d19e:	f003 0320 	and.w	r3, r3, #32
    d1a2:	2b00      	cmp	r3, #0
    d1a4:	d004      	beq.n	d1b0 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    d1a6:	2100      	movs	r1, #0
    d1a8:	6878      	ldr	r0, [r7, #4]
    d1aa:	4b1a      	ldr	r3, [pc, #104]	; (d214 <_usb_d_dev_trans_out_isr+0x84>)
    d1ac:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    d1ae:	e02c      	b.n	d20a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    d1b0:	78fb      	ldrb	r3, [r7, #3]
    d1b2:	f003 0304 	and.w	r3, r3, #4
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	d004      	beq.n	d1c4 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    d1ba:	2100      	movs	r1, #0
    d1bc:	6878      	ldr	r0, [r7, #4]
    d1be:	4b16      	ldr	r3, [pc, #88]	; (d218 <_usb_d_dev_trans_out_isr+0x88>)
    d1c0:	4798      	blx	r3
}
    d1c2:	e022      	b.n	d20a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    d1c4:	78fb      	ldrb	r3, [r7, #3]
    d1c6:	f003 0301 	and.w	r3, r3, #1
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d004      	beq.n	d1d8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    d1ce:	2101      	movs	r1, #1
    d1d0:	6878      	ldr	r0, [r7, #4]
    d1d2:	4b12      	ldr	r3, [pc, #72]	; (d21c <_usb_d_dev_trans_out_isr+0x8c>)
    d1d4:	4798      	blx	r3
}
    d1d6:	e018      	b.n	d20a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    d1d8:	687b      	ldr	r3, [r7, #4]
    d1da:	7cdb      	ldrb	r3, [r3, #19]
    d1dc:	f003 0307 	and.w	r3, r3, #7
    d1e0:	b2db      	uxtb	r3, r3
    d1e2:	2b01      	cmp	r3, #1
    d1e4:	d111      	bne.n	d20a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d1e6:	78fb      	ldrb	r3, [r7, #3]
    d1e8:	f003 0308 	and.w	r3, r3, #8
    d1ec:	2b00      	cmp	r3, #0
    d1ee:	d004      	beq.n	d1fa <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    d1f0:	2101      	movs	r1, #1
    d1f2:	6878      	ldr	r0, [r7, #4]
    d1f4:	4b08      	ldr	r3, [pc, #32]	; (d218 <_usb_d_dev_trans_out_isr+0x88>)
    d1f6:	4798      	blx	r3
}
    d1f8:	e007      	b.n	d20a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    d1fa:	78fb      	ldrb	r3, [r7, #3]
    d1fc:	f003 0310 	and.w	r3, r3, #16
    d200:	2b00      	cmp	r3, #0
    d202:	d002      	beq.n	d20a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    d204:	6878      	ldr	r0, [r7, #4]
    d206:	4b06      	ldr	r3, [pc, #24]	; (d220 <_usb_d_dev_trans_out_isr+0x90>)
    d208:	4798      	blx	r3
}
    d20a:	bf00      	nop
    d20c:	3708      	adds	r7, #8
    d20e:	46bd      	mov	sp, r7
    d210:	bd80      	pop	{r7, pc}
    d212:	bf00      	nop
    d214:	0000cea1 	.word	0x0000cea1
    d218:	0000cee5 	.word	0x0000cee5
    d21c:	0000cb05 	.word	0x0000cb05
    d220:	0000cdc9 	.word	0x0000cdc9

0000d224 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    d224:	b580      	push	{r7, lr}
    d226:	b084      	sub	sp, #16
    d228:	af00      	add	r7, sp, #0
    d22a:	6078      	str	r0, [r7, #4]
    d22c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    d22e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d232:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d234:	683b      	ldr	r3, [r7, #0]
    d236:	7c9b      	ldrb	r3, [r3, #18]
    d238:	f003 030f 	and.w	r3, r3, #15
    d23c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    d23e:	7afb      	ldrb	r3, [r7, #11]
    d240:	2201      	movs	r2, #1
    d242:	409a      	lsls	r2, r3
    d244:	687b      	ldr	r3, [r7, #4]
    d246:	4013      	ands	r3, r2
    d248:	2b00      	cmp	r3, #0
    d24a:	d03d      	beq.n	d2c8 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    d24c:	7afb      	ldrb	r3, [r7, #11]
    d24e:	68fa      	ldr	r2, [r7, #12]
    d250:	3308      	adds	r3, #8
    d252:	015b      	lsls	r3, r3, #5
    d254:	4413      	add	r3, r2
    d256:	3307      	adds	r3, #7
    d258:	781b      	ldrb	r3, [r3, #0]
    d25a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    d25c:	7afb      	ldrb	r3, [r7, #11]
    d25e:	68fa      	ldr	r2, [r7, #12]
    d260:	015b      	lsls	r3, r3, #5
    d262:	4413      	add	r3, r2
    d264:	f203 1309 	addw	r3, r3, #265	; 0x109
    d268:	781b      	ldrb	r3, [r3, #0]
    d26a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    d26c:	7aba      	ldrb	r2, [r7, #10]
    d26e:	7a7b      	ldrb	r3, [r7, #9]
    d270:	4013      	ands	r3, r2
    d272:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    d274:	7abb      	ldrb	r3, [r7, #10]
    d276:	2b00      	cmp	r3, #0
    d278:	d027      	beq.n	d2ca <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    d27a:	683b      	ldr	r3, [r7, #0]
    d27c:	7cdb      	ldrb	r3, [r3, #19]
    d27e:	f003 0307 	and.w	r3, r3, #7
    d282:	b2db      	uxtb	r3, r3
    d284:	2b01      	cmp	r3, #1
    d286:	d10c      	bne.n	d2a2 <_usb_d_dev_handle_eps+0x7e>
    d288:	683b      	ldr	r3, [r7, #0]
    d28a:	7cdb      	ldrb	r3, [r3, #19]
    d28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d290:	b2db      	uxtb	r3, r3
    d292:	2b00      	cmp	r3, #0
    d294:	d105      	bne.n	d2a2 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    d296:	7abb      	ldrb	r3, [r7, #10]
    d298:	4619      	mov	r1, r3
    d29a:	6838      	ldr	r0, [r7, #0]
    d29c:	4b0c      	ldr	r3, [pc, #48]	; (d2d0 <_usb_d_dev_handle_eps+0xac>)
    d29e:	4798      	blx	r3
    d2a0:	e013      	b.n	d2ca <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    d2a2:	683b      	ldr	r3, [r7, #0]
    d2a4:	7cdb      	ldrb	r3, [r3, #19]
    d2a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d2aa:	b2db      	uxtb	r3, r3
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d005      	beq.n	d2bc <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    d2b0:	7abb      	ldrb	r3, [r7, #10]
    d2b2:	4619      	mov	r1, r3
    d2b4:	6838      	ldr	r0, [r7, #0]
    d2b6:	4b07      	ldr	r3, [pc, #28]	; (d2d4 <_usb_d_dev_handle_eps+0xb0>)
    d2b8:	4798      	blx	r3
    d2ba:	e006      	b.n	d2ca <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    d2bc:	7abb      	ldrb	r3, [r7, #10]
    d2be:	4619      	mov	r1, r3
    d2c0:	6838      	ldr	r0, [r7, #0]
    d2c2:	4b05      	ldr	r3, [pc, #20]	; (d2d8 <_usb_d_dev_handle_eps+0xb4>)
    d2c4:	4798      	blx	r3
    d2c6:	e000      	b.n	d2ca <_usb_d_dev_handle_eps+0xa6>
		return;
    d2c8:	bf00      	nop
		}
	}
}
    d2ca:	3710      	adds	r7, #16
    d2cc:	46bd      	mov	sp, r7
    d2ce:	bd80      	pop	{r7, pc}
    d2d0:	0000d0a9 	.word	0x0000d0a9
    d2d4:	0000d0fd 	.word	0x0000d0fd
    d2d8:	0000d191 	.word	0x0000d191

0000d2dc <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	b084      	sub	sp, #16
    d2e0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d2e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d2e6:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    d2e8:	68bb      	ldr	r3, [r7, #8]
    d2ea:	8c1b      	ldrh	r3, [r3, #32]
    d2ec:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    d2ee:	88fb      	ldrh	r3, [r7, #6]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d104      	bne.n	d2fe <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    d2f4:	4b13      	ldr	r3, [pc, #76]	; (d344 <_usb_d_dev_handler+0x68>)
    d2f6:	4798      	blx	r3
    d2f8:	4603      	mov	r3, r0
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	d11e      	bne.n	d33c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    d2fe:	2300      	movs	r3, #0
    d300:	73fb      	strb	r3, [r7, #15]
    d302:	e017      	b.n	d334 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    d304:	7bfa      	ldrb	r2, [r7, #15]
    d306:	4613      	mov	r3, r2
    d308:	009b      	lsls	r3, r3, #2
    d30a:	4413      	add	r3, r2
    d30c:	009b      	lsls	r3, r3, #2
    d30e:	3310      	adds	r3, #16
    d310:	4a0d      	ldr	r2, [pc, #52]	; (d348 <_usb_d_dev_handler+0x6c>)
    d312:	4413      	add	r3, r2
    d314:	3304      	adds	r3, #4
    d316:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    d318:	683b      	ldr	r3, [r7, #0]
    d31a:	7c9b      	ldrb	r3, [r3, #18]
    d31c:	2bff      	cmp	r3, #255	; 0xff
    d31e:	d005      	beq.n	d32c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    d320:	88fb      	ldrh	r3, [r7, #6]
    d322:	6839      	ldr	r1, [r7, #0]
    d324:	4618      	mov	r0, r3
    d326:	4b09      	ldr	r3, [pc, #36]	; (d34c <_usb_d_dev_handler+0x70>)
    d328:	4798      	blx	r3
    d32a:	e000      	b.n	d32e <_usb_d_dev_handler+0x52>
			continue;
    d32c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    d32e:	7bfb      	ldrb	r3, [r7, #15]
    d330:	3301      	adds	r3, #1
    d332:	73fb      	strb	r3, [r7, #15]
    d334:	7bfb      	ldrb	r3, [r7, #15]
    d336:	2b08      	cmp	r3, #8
    d338:	d9e4      	bls.n	d304 <_usb_d_dev_handler+0x28>
    d33a:	e000      	b.n	d33e <_usb_d_dev_handler+0x62>
			return;
    d33c:	bf00      	nop
	}
}
    d33e:	3710      	adds	r7, #16
    d340:	46bd      	mov	sp, r7
    d342:	bd80      	pop	{r7, pc}
    d344:	0000c835 	.word	0x0000c835
    d348:	20001cb0 	.word	0x20001cb0
    d34c:	0000d225 	.word	0x0000d225

0000d350 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    d350:	b580      	push	{r7, lr}
    d352:	b082      	sub	sp, #8
    d354:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    d356:	2300      	movs	r3, #0
    d358:	71fb      	strb	r3, [r7, #7]
    d35a:	e023      	b.n	d3a4 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    d35c:	79fa      	ldrb	r2, [r7, #7]
    d35e:	4613      	mov	r3, r2
    d360:	009b      	lsls	r3, r3, #2
    d362:	4413      	add	r3, r2
    d364:	009b      	lsls	r3, r3, #2
    d366:	3310      	adds	r3, #16
    d368:	4a14      	ldr	r2, [pc, #80]	; (d3bc <_usb_d_dev_reset_epts+0x6c>)
    d36a:	4413      	add	r3, r2
    d36c:	3304      	adds	r3, #4
    d36e:	2103      	movs	r1, #3
    d370:	4618      	mov	r0, r3
    d372:	4b13      	ldr	r3, [pc, #76]	; (d3c0 <_usb_d_dev_reset_epts+0x70>)
    d374:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    d376:	79fa      	ldrb	r2, [r7, #7]
    d378:	4910      	ldr	r1, [pc, #64]	; (d3bc <_usb_d_dev_reset_epts+0x6c>)
    d37a:	4613      	mov	r3, r2
    d37c:	009b      	lsls	r3, r3, #2
    d37e:	4413      	add	r3, r2
    d380:	009b      	lsls	r3, r3, #2
    d382:	440b      	add	r3, r1
    d384:	3326      	adds	r3, #38	; 0x26
    d386:	22ff      	movs	r2, #255	; 0xff
    d388:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    d38a:	79fa      	ldrb	r2, [r7, #7]
    d38c:	490b      	ldr	r1, [pc, #44]	; (d3bc <_usb_d_dev_reset_epts+0x6c>)
    d38e:	4613      	mov	r3, r2
    d390:	009b      	lsls	r3, r3, #2
    d392:	4413      	add	r3, r2
    d394:	009b      	lsls	r3, r3, #2
    d396:	440b      	add	r3, r1
    d398:	3327      	adds	r3, #39	; 0x27
    d39a:	2200      	movs	r2, #0
    d39c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    d39e:	79fb      	ldrb	r3, [r7, #7]
    d3a0:	3301      	adds	r3, #1
    d3a2:	71fb      	strb	r3, [r7, #7]
    d3a4:	79fb      	ldrb	r3, [r7, #7]
    d3a6:	2b08      	cmp	r3, #8
    d3a8:	d9d8      	bls.n	d35c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    d3aa:	22a0      	movs	r2, #160	; 0xa0
    d3ac:	2100      	movs	r1, #0
    d3ae:	4805      	ldr	r0, [pc, #20]	; (d3c4 <_usb_d_dev_reset_epts+0x74>)
    d3b0:	4b05      	ldr	r3, [pc, #20]	; (d3c8 <_usb_d_dev_reset_epts+0x78>)
    d3b2:	4798      	blx	r3
}
    d3b4:	bf00      	nop
    d3b6:	3708      	adds	r7, #8
    d3b8:	46bd      	mov	sp, r7
    d3ba:	bd80      	pop	{r7, pc}
    d3bc:	20001cb0 	.word	0x20001cb0
    d3c0:	0000dc15 	.word	0x0000dc15
    d3c4:	20001d78 	.word	0x20001d78
    d3c8:	000126d9 	.word	0x000126d9

0000d3cc <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    d3cc:	b580      	push	{r7, lr}
    d3ce:	b084      	sub	sp, #16
    d3d0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    d3d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d3d6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    d3d8:	2301      	movs	r3, #1
    d3da:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    d3dc:	2304      	movs	r3, #4
    d3de:	713b      	strb	r3, [r7, #4]
    d3e0:	2300      	movs	r3, #0
    d3e2:	717b      	strb	r3, [r7, #5]
    d3e4:	2300      	movs	r3, #0
    d3e6:	71bb      	strb	r3, [r7, #6]
    d3e8:	2300      	movs	r3, #0
    d3ea:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    d3ec:	2101      	movs	r1, #1
    d3ee:	68f8      	ldr	r0, [r7, #12]
    d3f0:	4b26      	ldr	r3, [pc, #152]	; (d48c <_usb_d_dev_init+0xc0>)
    d3f2:	4798      	blx	r3
    d3f4:	4603      	mov	r3, r0
    d3f6:	f083 0301 	eor.w	r3, r3, #1
    d3fa:	b2db      	uxtb	r3, r3
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d011      	beq.n	d424 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    d400:	2102      	movs	r1, #2
    d402:	68f8      	ldr	r0, [r7, #12]
    d404:	4b22      	ldr	r3, [pc, #136]	; (d490 <_usb_d_dev_init+0xc4>)
    d406:	4798      	blx	r3
    d408:	4603      	mov	r3, r0
    d40a:	2b00      	cmp	r3, #0
    d40c:	d006      	beq.n	d41c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    d40e:	68f8      	ldr	r0, [r7, #12]
    d410:	4b20      	ldr	r3, [pc, #128]	; (d494 <_usb_d_dev_init+0xc8>)
    d412:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    d414:	2102      	movs	r1, #2
    d416:	68f8      	ldr	r0, [r7, #12]
    d418:	4b1f      	ldr	r3, [pc, #124]	; (d498 <_usb_d_dev_init+0xcc>)
    d41a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    d41c:	2101      	movs	r1, #1
    d41e:	68f8      	ldr	r0, [r7, #12]
    d420:	4b1e      	ldr	r3, [pc, #120]	; (d49c <_usb_d_dev_init+0xd0>)
    d422:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    d424:	2101      	movs	r1, #1
    d426:	68f8      	ldr	r0, [r7, #12]
    d428:	4b1b      	ldr	r3, [pc, #108]	; (d498 <_usb_d_dev_init+0xcc>)
    d42a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    d42c:	4b1c      	ldr	r3, [pc, #112]	; (d4a0 <_usb_d_dev_init+0xd4>)
    d42e:	4a1d      	ldr	r2, [pc, #116]	; (d4a4 <_usb_d_dev_init+0xd8>)
    d430:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    d432:	4b1b      	ldr	r3, [pc, #108]	; (d4a0 <_usb_d_dev_init+0xd4>)
    d434:	4a1b      	ldr	r2, [pc, #108]	; (d4a4 <_usb_d_dev_init+0xd8>)
    d436:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    d438:	4b19      	ldr	r3, [pc, #100]	; (d4a0 <_usb_d_dev_init+0xd4>)
    d43a:	4a1a      	ldr	r2, [pc, #104]	; (d4a4 <_usb_d_dev_init+0xd8>)
    d43c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    d43e:	4b18      	ldr	r3, [pc, #96]	; (d4a0 <_usb_d_dev_init+0xd4>)
    d440:	4a18      	ldr	r2, [pc, #96]	; (d4a4 <_usb_d_dev_init+0xd8>)
    d442:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    d444:	4b16      	ldr	r3, [pc, #88]	; (d4a0 <_usb_d_dev_init+0xd4>)
    d446:	4a17      	ldr	r2, [pc, #92]	; (d4a4 <_usb_d_dev_init+0xd8>)
    d448:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    d44a:	4b17      	ldr	r3, [pc, #92]	; (d4a8 <_usb_d_dev_init+0xdc>)
    d44c:	4798      	blx	r3

	_usb_load_calib();
    d44e:	4b17      	ldr	r3, [pc, #92]	; (d4ac <_usb_d_dev_init+0xe0>)
    d450:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    d452:	2104      	movs	r1, #4
    d454:	68f8      	ldr	r0, [r7, #12]
    d456:	4b11      	ldr	r3, [pc, #68]	; (d49c <_usb_d_dev_init+0xd0>)
    d458:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    d45a:	4b15      	ldr	r3, [pc, #84]	; (d4b0 <_usb_d_dev_init+0xe4>)
    d45c:	4619      	mov	r1, r3
    d45e:	68f8      	ldr	r0, [r7, #12]
    d460:	4b14      	ldr	r3, [pc, #80]	; (d4b4 <_usb_d_dev_init+0xe8>)
    d462:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    d464:	7afb      	ldrb	r3, [r7, #11]
    d466:	f107 0210 	add.w	r2, r7, #16
    d46a:	4413      	add	r3, r2
    d46c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    d470:	f043 0301 	orr.w	r3, r3, #1
    d474:	b2db      	uxtb	r3, r3
    d476:	b29b      	uxth	r3, r3
    d478:	4619      	mov	r1, r3
    d47a:	68f8      	ldr	r0, [r7, #12]
    d47c:	4b0e      	ldr	r3, [pc, #56]	; (d4b8 <_usb_d_dev_init+0xec>)
    d47e:	4798      	blx	r3

	return ERR_NONE;
    d480:	2300      	movs	r3, #0
}
    d482:	4618      	mov	r0, r3
    d484:	3710      	adds	r7, #16
    d486:	46bd      	mov	sp, r7
    d488:	bd80      	pop	{r7, pc}
    d48a:	bf00      	nop
    d48c:	0000ba65 	.word	0x0000ba65
    d490:	0000bdb5 	.word	0x0000bdb5
    d494:	0000bd89 	.word	0x0000bd89
    d498:	0000ba3b 	.word	0x0000ba3b
    d49c:	0000bde5 	.word	0x0000bde5
    d4a0:	20001cb0 	.word	0x20001cb0
    d4a4:	0000bead 	.word	0x0000bead
    d4a8:	0000d351 	.word	0x0000d351
    d4ac:	0000bec5 	.word	0x0000bec5
    d4b0:	20001d78 	.word	0x20001d78
    d4b4:	0000be91 	.word	0x0000be91
    d4b8:	0000be55 	.word	0x0000be55

0000d4bc <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    d4bc:	b580      	push	{r7, lr}
    d4be:	b082      	sub	sp, #8
    d4c0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    d4c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d4c6:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    d4c8:	2103      	movs	r1, #3
    d4ca:	6878      	ldr	r0, [r7, #4]
    d4cc:	4b17      	ldr	r3, [pc, #92]	; (d52c <_usb_d_dev_enable+0x70>)
    d4ce:	4798      	blx	r3
    d4d0:	4603      	mov	r3, r0
    d4d2:	2b00      	cmp	r3, #0
    d4d4:	d002      	beq.n	d4dc <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    d4d6:	f06f 0310 	mvn.w	r3, #16
    d4da:	e023      	b.n	d524 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    d4dc:	6878      	ldr	r0, [r7, #4]
    d4de:	4b14      	ldr	r3, [pc, #80]	; (d530 <_usb_d_dev_enable+0x74>)
    d4e0:	4798      	blx	r3
    d4e2:	4603      	mov	r3, r0
    d4e4:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    d4e6:	78fb      	ldrb	r3, [r7, #3]
    d4e8:	f003 0302 	and.w	r3, r3, #2
    d4ec:	2b00      	cmp	r3, #0
    d4ee:	d107      	bne.n	d500 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    d4f0:	78fb      	ldrb	r3, [r7, #3]
    d4f2:	f043 0302 	orr.w	r3, r3, #2
    d4f6:	b2db      	uxtb	r3, r3
    d4f8:	4619      	mov	r1, r3
    d4fa:	6878      	ldr	r0, [r7, #4]
    d4fc:	4b0d      	ldr	r3, [pc, #52]	; (d534 <_usb_d_dev_enable+0x78>)
    d4fe:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    d500:	2050      	movs	r0, #80	; 0x50
    d502:	4b0d      	ldr	r3, [pc, #52]	; (d538 <_usb_d_dev_enable+0x7c>)
    d504:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    d506:	2051      	movs	r0, #81	; 0x51
    d508:	4b0b      	ldr	r3, [pc, #44]	; (d538 <_usb_d_dev_enable+0x7c>)
    d50a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    d50c:	2052      	movs	r0, #82	; 0x52
    d50e:	4b0a      	ldr	r3, [pc, #40]	; (d538 <_usb_d_dev_enable+0x7c>)
    d510:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    d512:	2053      	movs	r0, #83	; 0x53
    d514:	4b08      	ldr	r3, [pc, #32]	; (d538 <_usb_d_dev_enable+0x7c>)
    d516:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    d518:	f240 218d 	movw	r1, #653	; 0x28d
    d51c:	6878      	ldr	r0, [r7, #4]
    d51e:	4b07      	ldr	r3, [pc, #28]	; (d53c <_usb_d_dev_enable+0x80>)
    d520:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    d522:	2300      	movs	r3, #0
}
    d524:	4618      	mov	r0, r3
    d526:	3708      	adds	r7, #8
    d528:	46bd      	mov	sp, r7
    d52a:	bd80      	pop	{r7, pc}
    d52c:	0000bd5f 	.word	0x0000bd5f
    d530:	0000be0d 	.word	0x0000be0d
    d534:	0000bde5 	.word	0x0000bde5
    d538:	0000b971 	.word	0x0000b971
    d53c:	0000bd09 	.word	0x0000bd09

0000d540 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    d540:	b580      	push	{r7, lr}
    d542:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    d544:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d548:	4b01      	ldr	r3, [pc, #4]	; (d550 <_usb_d_dev_attach+0x10>)
    d54a:	4798      	blx	r3
}
    d54c:	bf00      	nop
    d54e:	bd80      	pop	{r7, pc}
    d550:	0000be31 	.word	0x0000be31

0000d554 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    d554:	b580      	push	{r7, lr}
    d556:	b082      	sub	sp, #8
    d558:	af00      	add	r7, sp, #0
    d55a:	4603      	mov	r3, r0
    d55c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    d55e:	79fb      	ldrb	r3, [r7, #7]
    d560:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d564:	b2db      	uxtb	r3, r3
    d566:	4619      	mov	r1, r3
    d568:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d56c:	4b02      	ldr	r3, [pc, #8]	; (d578 <_usb_d_dev_set_address+0x24>)
    d56e:	4798      	blx	r3
}
    d570:	bf00      	nop
    d572:	3708      	adds	r7, #8
    d574:	46bd      	mov	sp, r7
    d576:	bd80      	pop	{r7, pc}
    d578:	0000be73 	.word	0x0000be73

0000d57c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    d57c:	b590      	push	{r4, r7, lr}
    d57e:	b085      	sub	sp, #20
    d580:	af00      	add	r7, sp, #0
    d582:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    d584:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d588:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d58a:	687b      	ldr	r3, [r7, #4]
    d58c:	7c9b      	ldrb	r3, [r3, #18]
    d58e:	f003 030f 	and.w	r3, r3, #15
    d592:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d594:	687b      	ldr	r3, [r7, #4]
    d596:	68db      	ldr	r3, [r3, #12]
    d598:	461a      	mov	r2, r3
    d59a:	7afb      	ldrb	r3, [r7, #11]
    d59c:	2100      	movs	r1, #0
    d59e:	4618      	mov	r0, r3
    d5a0:	4b0f      	ldr	r3, [pc, #60]	; (d5e0 <_usb_d_dev_trans_setup+0x64>)
    d5a2:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d5a4:	687b      	ldr	r3, [r7, #4]
    d5a6:	8a1b      	ldrh	r3, [r3, #16]
    d5a8:	461a      	mov	r2, r3
    d5aa:	7af8      	ldrb	r0, [r7, #11]
    d5ac:	2300      	movs	r3, #0
    d5ae:	2100      	movs	r1, #0
    d5b0:	4c0c      	ldr	r4, [pc, #48]	; (d5e4 <_usb_d_dev_trans_setup+0x68>)
    d5b2:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    d5b4:	7afb      	ldrb	r3, [r7, #11]
    d5b6:	22b0      	movs	r2, #176	; 0xb0
    d5b8:	4619      	mov	r1, r3
    d5ba:	68f8      	ldr	r0, [r7, #12]
    d5bc:	4b0a      	ldr	r3, [pc, #40]	; (d5e8 <_usb_d_dev_trans_setup+0x6c>)
    d5be:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    d5c0:	7afb      	ldrb	r3, [r7, #11]
    d5c2:	2200      	movs	r2, #0
    d5c4:	2100      	movs	r1, #0
    d5c6:	4618      	mov	r0, r3
    d5c8:	4b08      	ldr	r3, [pc, #32]	; (d5ec <_usb_d_dev_trans_setup+0x70>)
    d5ca:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    d5cc:	7afb      	ldrb	r3, [r7, #11]
    d5ce:	2210      	movs	r2, #16
    d5d0:	4619      	mov	r1, r3
    d5d2:	68f8      	ldr	r0, [r7, #12]
    d5d4:	4b06      	ldr	r3, [pc, #24]	; (d5f0 <_usb_d_dev_trans_setup+0x74>)
    d5d6:	4798      	blx	r3
}
    d5d8:	bf00      	nop
    d5da:	3714      	adds	r7, #20
    d5dc:	46bd      	mov	sp, r7
    d5de:	bd90      	pop	{r4, r7, pc}
    d5e0:	0000c311 	.word	0x0000c311
    d5e4:	0000c499 	.word	0x0000c499
    d5e8:	0000bb71 	.word	0x0000bb71
    d5ec:	0000c569 	.word	0x0000c569
    d5f0:	0000bbc5 	.word	0x0000bbc5

0000d5f4 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    d5f4:	b580      	push	{r7, lr}
    d5f6:	b088      	sub	sp, #32
    d5f8:	af00      	add	r7, sp, #0
    d5fa:	4603      	mov	r3, r0
    d5fc:	71fb      	strb	r3, [r7, #7]
    d5fe:	460b      	mov	r3, r1
    d600:	71bb      	strb	r3, [r7, #6]
    d602:	4613      	mov	r3, r2
    d604:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    d606:	79fb      	ldrb	r3, [r7, #7]
    d608:	f003 030f 	and.w	r3, r3, #15
    d60c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    d60e:	79fb      	ldrb	r3, [r7, #7]
    d610:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d614:	2b00      	cmp	r3, #0
    d616:	bf14      	ite	ne
    d618:	2301      	movne	r3, #1
    d61a:	2300      	moveq	r3, #0
    d61c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d61e:	7fba      	ldrb	r2, [r7, #30]
    d620:	7ffb      	ldrb	r3, [r7, #31]
    d622:	4611      	mov	r1, r2
    d624:	4618      	mov	r0, r3
    d626:	4b3e      	ldr	r3, [pc, #248]	; (d720 <_usb_d_dev_ep_init+0x12c>)
    d628:	4798      	blx	r3
    d62a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    d62c:	79bb      	ldrb	r3, [r7, #6]
    d62e:	f003 0303 	and.w	r3, r3, #3
    d632:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    d634:	7ffa      	ldrb	r2, [r7, #31]
    d636:	4613      	mov	r3, r2
    d638:	005b      	lsls	r3, r3, #1
    d63a:	4413      	add	r3, r2
    d63c:	009b      	lsls	r3, r3, #2
    d63e:	4a39      	ldr	r2, [pc, #228]	; (d724 <_usb_d_dev_ep_init+0x130>)
    d640:	4413      	add	r3, r2
    d642:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    d644:	7ffb      	ldrb	r3, [r7, #31]
    d646:	2b04      	cmp	r3, #4
    d648:	d902      	bls.n	d650 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    d64a:	f06f 0311 	mvn.w	r3, #17
    d64e:	e063      	b.n	d718 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    d650:	69bb      	ldr	r3, [r7, #24]
    d652:	7c9b      	ldrb	r3, [r3, #18]
    d654:	2bff      	cmp	r3, #255	; 0xff
    d656:	d002      	beq.n	d65e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    d658:	f06f 0313 	mvn.w	r3, #19
    d65c:	e05c      	b.n	d718 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    d65e:	7dfb      	ldrb	r3, [r7, #23]
    d660:	2b00      	cmp	r3, #0
    d662:	d11f      	bne.n	d6a4 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    d664:	7fbb      	ldrb	r3, [r7, #30]
    d666:	2b00      	cmp	r3, #0
    d668:	bf14      	ite	ne
    d66a:	2301      	movne	r3, #1
    d66c:	2300      	moveq	r3, #0
    d66e:	b2db      	uxtb	r3, r3
    d670:	f083 0301 	eor.w	r3, r3, #1
    d674:	b2db      	uxtb	r3, r3
    d676:	f003 0301 	and.w	r3, r3, #1
    d67a:	b2da      	uxtb	r2, r3
    d67c:	7ffb      	ldrb	r3, [r7, #31]
    d67e:	4611      	mov	r1, r2
    d680:	4618      	mov	r0, r3
    d682:	4b27      	ldr	r3, [pc, #156]	; (d720 <_usb_d_dev_ep_init+0x12c>)
    d684:	4798      	blx	r3
    d686:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    d688:	68fb      	ldr	r3, [r7, #12]
    d68a:	7c9b      	ldrb	r3, [r3, #18]
    d68c:	2bff      	cmp	r3, #255	; 0xff
    d68e:	d002      	beq.n	d696 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    d690:	f06f 0313 	mvn.w	r3, #19
    d694:	e040      	b.n	d718 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    d696:	693b      	ldr	r3, [r7, #16]
    d698:	681b      	ldr	r3, [r3, #0]
    d69a:	2b00      	cmp	r3, #0
    d69c:	d102      	bne.n	d6a4 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    d69e:	f06f 0312 	mvn.w	r3, #18
    d6a2:	e039      	b.n	d718 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    d6a4:	7fbb      	ldrb	r3, [r7, #30]
    d6a6:	2b00      	cmp	r3, #0
    d6a8:	d007      	beq.n	d6ba <_usb_d_dev_ep_init+0xc6>
    d6aa:	693b      	ldr	r3, [r7, #16]
    d6ac:	685b      	ldr	r3, [r3, #4]
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	bf14      	ite	ne
    d6b2:	2301      	movne	r3, #1
    d6b4:	2300      	moveq	r3, #0
    d6b6:	b2db      	uxtb	r3, r3
    d6b8:	e006      	b.n	d6c8 <_usb_d_dev_ep_init+0xd4>
    d6ba:	693b      	ldr	r3, [r7, #16]
    d6bc:	681b      	ldr	r3, [r3, #0]
    d6be:	2b00      	cmp	r3, #0
    d6c0:	bf14      	ite	ne
    d6c2:	2301      	movne	r3, #1
    d6c4:	2300      	moveq	r3, #0
    d6c6:	b2db      	uxtb	r3, r3
    d6c8:	2b00      	cmp	r3, #0
    d6ca:	d00f      	beq.n	d6ec <_usb_d_dev_ep_init+0xf8>
    d6cc:	7fbb      	ldrb	r3, [r7, #30]
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	d003      	beq.n	d6da <_usb_d_dev_ep_init+0xe6>
    d6d2:	693b      	ldr	r3, [r7, #16]
    d6d4:	895b      	ldrh	r3, [r3, #10]
    d6d6:	461a      	mov	r2, r3
    d6d8:	e002      	b.n	d6e0 <_usb_d_dev_ep_init+0xec>
    d6da:	693b      	ldr	r3, [r7, #16]
    d6dc:	891b      	ldrh	r3, [r3, #8]
    d6de:	461a      	mov	r2, r3
    d6e0:	88bb      	ldrh	r3, [r7, #4]
    d6e2:	429a      	cmp	r2, r3
    d6e4:	da02      	bge.n	d6ec <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    d6e6:	f06f 0312 	mvn.w	r3, #18
    d6ea:	e015      	b.n	d718 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    d6ec:	7fbb      	ldrb	r3, [r7, #30]
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	d002      	beq.n	d6f8 <_usb_d_dev_ep_init+0x104>
    d6f2:	693b      	ldr	r3, [r7, #16]
    d6f4:	685b      	ldr	r3, [r3, #4]
    d6f6:	e001      	b.n	d6fc <_usb_d_dev_ep_init+0x108>
    d6f8:	693b      	ldr	r3, [r7, #16]
    d6fa:	681b      	ldr	r3, [r3, #0]
    d6fc:	69ba      	ldr	r2, [r7, #24]
    d6fe:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    d700:	69bb      	ldr	r3, [r7, #24]
    d702:	88ba      	ldrh	r2, [r7, #4]
    d704:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    d706:	7dfb      	ldrb	r3, [r7, #23]
    d708:	3301      	adds	r3, #1
    d70a:	b2da      	uxtb	r2, r3
    d70c:	69bb      	ldr	r3, [r7, #24]
    d70e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    d710:	69bb      	ldr	r3, [r7, #24]
    d712:	79fa      	ldrb	r2, [r7, #7]
    d714:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    d716:	2300      	movs	r3, #0
}
    d718:	4618      	mov	r0, r3
    d71a:	3720      	adds	r7, #32
    d71c:	46bd      	mov	sp, r7
    d71e:	bd80      	pop	{r7, pc}
    d720:	0000c625 	.word	0x0000c625
    d724:	00013da0 	.word	0x00013da0

0000d728 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    d728:	b580      	push	{r7, lr}
    d72a:	b086      	sub	sp, #24
    d72c:	af00      	add	r7, sp, #0
    d72e:	4603      	mov	r3, r0
    d730:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    d732:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d736:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    d738:	79fb      	ldrb	r3, [r7, #7]
    d73a:	f003 030f 	and.w	r3, r3, #15
    d73e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    d740:	79fb      	ldrb	r3, [r7, #7]
    d742:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d746:	2b00      	cmp	r3, #0
    d748:	bf14      	ite	ne
    d74a:	2301      	movne	r3, #1
    d74c:	2300      	moveq	r3, #0
    d74e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d750:	7cba      	ldrb	r2, [r7, #18]
    d752:	7cfb      	ldrb	r3, [r7, #19]
    d754:	4611      	mov	r1, r2
    d756:	4618      	mov	r0, r3
    d758:	4b2a      	ldr	r3, [pc, #168]	; (d804 <_usb_d_dev_ep_deinit+0xdc>)
    d75a:	4798      	blx	r3
    d75c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d75e:	7cfb      	ldrb	r3, [r7, #19]
    d760:	2b04      	cmp	r3, #4
    d762:	d84a      	bhi.n	d7fa <_usb_d_dev_ep_deinit+0xd2>
    d764:	68fb      	ldr	r3, [r7, #12]
    d766:	7c9b      	ldrb	r3, [r3, #18]
    d768:	2bff      	cmp	r3, #255	; 0xff
    d76a:	d046      	beq.n	d7fa <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    d76c:	7cbb      	ldrb	r3, [r7, #18]
    d76e:	2203      	movs	r2, #3
    d770:	4619      	mov	r1, r3
    d772:	68f8      	ldr	r0, [r7, #12]
    d774:	4b24      	ldr	r3, [pc, #144]	; (d808 <_usb_d_dev_ep_deinit+0xe0>)
    d776:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d778:	68fb      	ldr	r3, [r7, #12]
    d77a:	7cdb      	ldrb	r3, [r3, #19]
    d77c:	f003 0307 	and.w	r3, r3, #7
    d780:	b2db      	uxtb	r3, r3
    d782:	2b01      	cmp	r3, #1
    d784:	d107      	bne.n	d796 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    d786:	79fb      	ldrb	r3, [r7, #7]
    d788:	697a      	ldr	r2, [r7, #20]
    d78a:	3308      	adds	r3, #8
    d78c:	015b      	lsls	r3, r3, #5
    d78e:	4413      	add	r3, r2
    d790:	2200      	movs	r2, #0
    d792:	701a      	strb	r2, [r3, #0]
    d794:	e02a      	b.n	d7ec <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    d796:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d79a:	2b00      	cmp	r3, #0
    d79c:	da15      	bge.n	d7ca <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    d79e:	79fb      	ldrb	r3, [r7, #7]
    d7a0:	f003 030f 	and.w	r3, r3, #15
    d7a4:	79fa      	ldrb	r2, [r7, #7]
    d7a6:	f002 020f 	and.w	r2, r2, #15
    d7aa:	6979      	ldr	r1, [r7, #20]
    d7ac:	3208      	adds	r2, #8
    d7ae:	0152      	lsls	r2, r2, #5
    d7b0:	440a      	add	r2, r1
    d7b2:	7812      	ldrb	r2, [r2, #0]
    d7b4:	b2d2      	uxtb	r2, r2
    d7b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    d7ba:	b2d1      	uxtb	r1, r2
    d7bc:	697a      	ldr	r2, [r7, #20]
    d7be:	3308      	adds	r3, #8
    d7c0:	015b      	lsls	r3, r3, #5
    d7c2:	4413      	add	r3, r2
    d7c4:	460a      	mov	r2, r1
    d7c6:	701a      	strb	r2, [r3, #0]
    d7c8:	e010      	b.n	d7ec <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    d7ca:	79fb      	ldrb	r3, [r7, #7]
    d7cc:	79fa      	ldrb	r2, [r7, #7]
    d7ce:	6979      	ldr	r1, [r7, #20]
    d7d0:	3208      	adds	r2, #8
    d7d2:	0152      	lsls	r2, r2, #5
    d7d4:	440a      	add	r2, r1
    d7d6:	7812      	ldrb	r2, [r2, #0]
    d7d8:	b2d2      	uxtb	r2, r2
    d7da:	f022 0207 	bic.w	r2, r2, #7
    d7de:	b2d1      	uxtb	r1, r2
    d7e0:	697a      	ldr	r2, [r7, #20]
    d7e2:	3308      	adds	r3, #8
    d7e4:	015b      	lsls	r3, r3, #5
    d7e6:	4413      	add	r3, r2
    d7e8:	460a      	mov	r2, r1
    d7ea:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    d7ec:	68fb      	ldr	r3, [r7, #12]
    d7ee:	2200      	movs	r2, #0
    d7f0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    d7f2:	68fb      	ldr	r3, [r7, #12]
    d7f4:	22ff      	movs	r2, #255	; 0xff
    d7f6:	749a      	strb	r2, [r3, #18]
    d7f8:	e000      	b.n	d7fc <_usb_d_dev_ep_deinit+0xd4>
		return;
    d7fa:	bf00      	nop
}
    d7fc:	3718      	adds	r7, #24
    d7fe:	46bd      	mov	sp, r7
    d800:	bd80      	pop	{r7, pc}
    d802:	bf00      	nop
    d804:	0000c625 	.word	0x0000c625
    d808:	0000dc5d 	.word	0x0000dc5d

0000d80c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    d80c:	b5b0      	push	{r4, r5, r7, lr}
    d80e:	b088      	sub	sp, #32
    d810:	af00      	add	r7, sp, #0
    d812:	4603      	mov	r3, r0
    d814:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    d816:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d81a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    d81c:	79fb      	ldrb	r3, [r7, #7]
    d81e:	f003 030f 	and.w	r3, r3, #15
    d822:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    d824:	79fb      	ldrb	r3, [r7, #7]
    d826:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d82a:	2b00      	cmp	r3, #0
    d82c:	bf14      	ite	ne
    d82e:	2301      	movne	r3, #1
    d830:	2300      	moveq	r3, #0
    d832:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    d834:	7eba      	ldrb	r2, [r7, #26]
    d836:	7efb      	ldrb	r3, [r7, #27]
    d838:	4611      	mov	r1, r2
    d83a:	4618      	mov	r0, r3
    d83c:	4b70      	ldr	r3, [pc, #448]	; (da00 <_usb_d_dev_ep_enable+0x1f4>)
    d83e:	4798      	blx	r3
    d840:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    d842:	7efb      	ldrb	r3, [r7, #27]
    d844:	4619      	mov	r1, r3
    d846:	69f8      	ldr	r0, [r7, #28]
    d848:	4b6e      	ldr	r3, [pc, #440]	; (da04 <_usb_d_dev_ep_enable+0x1f8>)
    d84a:	4798      	blx	r3
    d84c:	4603      	mov	r3, r0
    d84e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    d850:	7efb      	ldrb	r3, [r7, #27]
    d852:	2b04      	cmp	r3, #4
    d854:	d803      	bhi.n	d85e <_usb_d_dev_ep_enable+0x52>
    d856:	697b      	ldr	r3, [r7, #20]
    d858:	7c9b      	ldrb	r3, [r3, #18]
    d85a:	2bff      	cmp	r3, #255	; 0xff
    d85c:	d102      	bne.n	d864 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    d85e:	f06f 0311 	mvn.w	r3, #17
    d862:	e0c8      	b.n	d9f6 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    d864:	7efb      	ldrb	r3, [r7, #27]
    d866:	015b      	lsls	r3, r3, #5
    d868:	4a67      	ldr	r2, [pc, #412]	; (da08 <_usb_d_dev_ep_enable+0x1fc>)
    d86a:	4413      	add	r3, r2
    d86c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    d86e:	697b      	ldr	r3, [r7, #20]
    d870:	7cdb      	ldrb	r3, [r3, #19]
    d872:	f003 0307 	and.w	r3, r3, #7
    d876:	b2db      	uxtb	r3, r3
    d878:	2b01      	cmp	r3, #1
    d87a:	d14b      	bne.n	d914 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    d87c:	7cfb      	ldrb	r3, [r7, #19]
    d87e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    d882:	2b00      	cmp	r3, #0
    d884:	d002      	beq.n	d88c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    d886:	f06f 0313 	mvn.w	r3, #19
    d88a:	e0b4      	b.n	d9f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    d88c:	7efb      	ldrb	r3, [r7, #27]
    d88e:	2211      	movs	r2, #17
    d890:	4619      	mov	r1, r3
    d892:	69f8      	ldr	r0, [r7, #28]
    d894:	4b5d      	ldr	r3, [pc, #372]	; (da0c <_usb_d_dev_ep_enable+0x200>)
    d896:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d898:	697b      	ldr	r3, [r7, #20]
    d89a:	8a1b      	ldrh	r3, [r3, #16]
    d89c:	039b      	lsls	r3, r3, #14
    d89e:	4c5c      	ldr	r4, [pc, #368]	; (da10 <_usb_d_dev_ep_enable+0x204>)
    d8a0:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d8a2:	697b      	ldr	r3, [r7, #20]
    d8a4:	8a1b      	ldrh	r3, [r3, #16]
    d8a6:	4618      	mov	r0, r3
    d8a8:	4b5a      	ldr	r3, [pc, #360]	; (da14 <_usb_d_dev_ep_enable+0x208>)
    d8aa:	4798      	blx	r3
    d8ac:	4603      	mov	r3, r0
    d8ae:	071b      	lsls	r3, r3, #28
    d8b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d8b4:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d8b8:	68fb      	ldr	r3, [r7, #12]
    d8ba:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    d8bc:	68fb      	ldr	r3, [r7, #12]
    d8be:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d8c2:	697b      	ldr	r3, [r7, #20]
    d8c4:	8a1b      	ldrh	r3, [r3, #16]
    d8c6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d8ca:	697b      	ldr	r3, [r7, #20]
    d8cc:	8a1b      	ldrh	r3, [r3, #16]
    d8ce:	4618      	mov	r0, r3
    d8d0:	4b50      	ldr	r3, [pc, #320]	; (da14 <_usb_d_dev_ep_enable+0x208>)
    d8d2:	4798      	blx	r3
    d8d4:	4603      	mov	r3, r0
    d8d6:	071b      	lsls	r3, r3, #28
    d8d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d8dc:	432b      	orrs	r3, r5
    d8de:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d8e0:	7efb      	ldrb	r3, [r7, #27]
    d8e2:	2200      	movs	r2, #0
    d8e4:	2100      	movs	r1, #0
    d8e6:	4618      	mov	r0, r3
    d8e8:	4b4b      	ldr	r3, [pc, #300]	; (da18 <_usb_d_dev_ep_enable+0x20c>)
    d8ea:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    d8ec:	7efb      	ldrb	r3, [r7, #27]
    d8ee:	2200      	movs	r2, #0
    d8f0:	2101      	movs	r1, #1
    d8f2:	4618      	mov	r0, r3
    d8f4:	4b49      	ldr	r3, [pc, #292]	; (da1c <_usb_d_dev_ep_enable+0x210>)
    d8f6:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    d8f8:	7efb      	ldrb	r3, [r7, #27]
    d8fa:	2100      	movs	r1, #0
    d8fc:	4618      	mov	r0, r3
    d8fe:	4b48      	ldr	r3, [pc, #288]	; (da20 <_usb_d_dev_ep_enable+0x214>)
    d900:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d902:	7efb      	ldrb	r3, [r7, #27]
    d904:	2101      	movs	r1, #1
    d906:	4618      	mov	r0, r3
    d908:	4b45      	ldr	r3, [pc, #276]	; (da20 <_usb_d_dev_ep_enable+0x214>)
    d90a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    d90c:	6978      	ldr	r0, [r7, #20]
    d90e:	4b45      	ldr	r3, [pc, #276]	; (da24 <_usb_d_dev_ep_enable+0x218>)
    d910:	4798      	blx	r3
    d912:	e06f      	b.n	d9f4 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    d914:	7ebb      	ldrb	r3, [r7, #26]
    d916:	2b00      	cmp	r3, #0
    d918:	d038      	beq.n	d98c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    d91a:	7cfb      	ldrb	r3, [r7, #19]
    d91c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d920:	2b00      	cmp	r3, #0
    d922:	d002      	beq.n	d92a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    d924:	f06f 0313 	mvn.w	r3, #19
    d928:	e065      	b.n	d9f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    d92a:	697b      	ldr	r3, [r7, #20]
    d92c:	7cdb      	ldrb	r3, [r3, #19]
    d92e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d932:	b2db      	uxtb	r3, r3
    d934:	011b      	lsls	r3, r3, #4
    d936:	b2db      	uxtb	r3, r3
    d938:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d93c:	b2da      	uxtb	r2, r3
    d93e:	7cfb      	ldrb	r3, [r7, #19]
    d940:	4313      	orrs	r3, r2
    d942:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d944:	7cfa      	ldrb	r2, [r7, #19]
    d946:	7efb      	ldrb	r3, [r7, #27]
    d948:	4619      	mov	r1, r3
    d94a:	69f8      	ldr	r0, [r7, #28]
    d94c:	4b2f      	ldr	r3, [pc, #188]	; (da0c <_usb_d_dev_ep_enable+0x200>)
    d94e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    d950:	68fb      	ldr	r3, [r7, #12]
    d952:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d956:	697b      	ldr	r3, [r7, #20]
    d958:	8a1b      	ldrh	r3, [r3, #16]
    d95a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    d95e:	697b      	ldr	r3, [r7, #20]
    d960:	8a1b      	ldrh	r3, [r3, #16]
    d962:	4618      	mov	r0, r3
    d964:	4b2b      	ldr	r3, [pc, #172]	; (da14 <_usb_d_dev_ep_enable+0x208>)
    d966:	4798      	blx	r3
    d968:	4603      	mov	r3, r0
    d96a:	071b      	lsls	r3, r3, #28
    d96c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d970:	432b      	orrs	r3, r5
    d972:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    d974:	7efb      	ldrb	r3, [r7, #27]
    d976:	2200      	movs	r2, #0
    d978:	2101      	movs	r1, #1
    d97a:	4618      	mov	r0, r3
    d97c:	4b27      	ldr	r3, [pc, #156]	; (da1c <_usb_d_dev_ep_enable+0x210>)
    d97e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    d980:	7efb      	ldrb	r3, [r7, #27]
    d982:	2101      	movs	r1, #1
    d984:	4618      	mov	r0, r3
    d986:	4b26      	ldr	r3, [pc, #152]	; (da20 <_usb_d_dev_ep_enable+0x214>)
    d988:	4798      	blx	r3
    d98a:	e033      	b.n	d9f4 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    d98c:	7cfb      	ldrb	r3, [r7, #19]
    d98e:	f003 0307 	and.w	r3, r3, #7
    d992:	2b00      	cmp	r3, #0
    d994:	d002      	beq.n	d99c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    d996:	f06f 0313 	mvn.w	r3, #19
    d99a:	e02c      	b.n	d9f6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    d99c:	697b      	ldr	r3, [r7, #20]
    d99e:	7cdb      	ldrb	r3, [r3, #19]
    d9a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d9a4:	b2db      	uxtb	r3, r3
    d9a6:	461a      	mov	r2, r3
    d9a8:	7cfb      	ldrb	r3, [r7, #19]
    d9aa:	4313      	orrs	r3, r2
    d9ac:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    d9ae:	7cfa      	ldrb	r2, [r7, #19]
    d9b0:	7efb      	ldrb	r3, [r7, #27]
    d9b2:	4619      	mov	r1, r3
    d9b4:	69f8      	ldr	r0, [r7, #28]
    d9b6:	4b15      	ldr	r3, [pc, #84]	; (da0c <_usb_d_dev_ep_enable+0x200>)
    d9b8:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d9ba:	697b      	ldr	r3, [r7, #20]
    d9bc:	8a1b      	ldrh	r3, [r3, #16]
    d9be:	039b      	lsls	r3, r3, #14
    d9c0:	4c13      	ldr	r4, [pc, #76]	; (da10 <_usb_d_dev_ep_enable+0x204>)
    d9c2:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    d9c4:	697b      	ldr	r3, [r7, #20]
    d9c6:	8a1b      	ldrh	r3, [r3, #16]
    d9c8:	4618      	mov	r0, r3
    d9ca:	4b12      	ldr	r3, [pc, #72]	; (da14 <_usb_d_dev_ep_enable+0x208>)
    d9cc:	4798      	blx	r3
    d9ce:	4603      	mov	r3, r0
    d9d0:	071b      	lsls	r3, r3, #28
    d9d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    d9d6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    d9da:	68fb      	ldr	r3, [r7, #12]
    d9dc:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    d9de:	7efb      	ldrb	r3, [r7, #27]
    d9e0:	2200      	movs	r2, #0
    d9e2:	2100      	movs	r1, #0
    d9e4:	4618      	mov	r0, r3
    d9e6:	4b0c      	ldr	r3, [pc, #48]	; (da18 <_usb_d_dev_ep_enable+0x20c>)
    d9e8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    d9ea:	7efb      	ldrb	r3, [r7, #27]
    d9ec:	2100      	movs	r1, #0
    d9ee:	4618      	mov	r0, r3
    d9f0:	4b0b      	ldr	r3, [pc, #44]	; (da20 <_usb_d_dev_ep_enable+0x214>)
    d9f2:	4798      	blx	r3
	}

	return USB_OK;
    d9f4:	2300      	movs	r3, #0
}
    d9f6:	4618      	mov	r0, r3
    d9f8:	3720      	adds	r7, #32
    d9fa:	46bd      	mov	sp, r7
    d9fc:	bdb0      	pop	{r4, r5, r7, pc}
    d9fe:	bf00      	nop
    da00:	0000c625 	.word	0x0000c625
    da04:	0000bcab 	.word	0x0000bcab
    da08:	20001d78 	.word	0x20001d78
    da0c:	0000bc81 	.word	0x0000bc81
    da10:	0fffc000 	.word	0x0fffc000
    da14:	0000c5c1 	.word	0x0000c5c1
    da18:	0000c569 	.word	0x0000c569
    da1c:	0000c511 	.word	0x0000c511
    da20:	0000c4d9 	.word	0x0000c4d9
    da24:	0000d57d 	.word	0x0000d57d

0000da28 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    da28:	b580      	push	{r7, lr}
    da2a:	b084      	sub	sp, #16
    da2c:	af00      	add	r7, sp, #0
    da2e:	6078      	str	r0, [r7, #4]
    da30:	460b      	mov	r3, r1
    da32:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    da34:	687b      	ldr	r3, [r7, #4]
    da36:	7c9b      	ldrb	r3, [r3, #18]
    da38:	f003 030f 	and.w	r3, r3, #15
    da3c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    da3e:	78fa      	ldrb	r2, [r7, #3]
    da40:	7bfb      	ldrb	r3, [r7, #15]
    da42:	4611      	mov	r1, r2
    da44:	4618      	mov	r0, r3
    da46:	4b03      	ldr	r3, [pc, #12]	; (da54 <_usb_d_dev_ep_stall_get+0x2c>)
    da48:	4798      	blx	r3
    da4a:	4603      	mov	r3, r0
}
    da4c:	4618      	mov	r0, r3
    da4e:	3710      	adds	r7, #16
    da50:	46bd      	mov	sp, r7
    da52:	bd80      	pop	{r7, pc}
    da54:	0000c119 	.word	0x0000c119

0000da58 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    da58:	b580      	push	{r7, lr}
    da5a:	b084      	sub	sp, #16
    da5c:	af00      	add	r7, sp, #0
    da5e:	6078      	str	r0, [r7, #4]
    da60:	460b      	mov	r3, r1
    da62:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    da64:	687b      	ldr	r3, [r7, #4]
    da66:	7c9b      	ldrb	r3, [r3, #18]
    da68:	f003 030f 	and.w	r3, r3, #15
    da6c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    da6e:	78f9      	ldrb	r1, [r7, #3]
    da70:	7bfb      	ldrb	r3, [r7, #15]
    da72:	2201      	movs	r2, #1
    da74:	4618      	mov	r0, r3
    da76:	4b0a      	ldr	r3, [pc, #40]	; (daa0 <_usb_d_dev_ep_stall_set+0x48>)
    da78:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    da7a:	78fb      	ldrb	r3, [r7, #3]
    da7c:	2220      	movs	r2, #32
    da7e:	409a      	lsls	r2, r3
    da80:	7bfb      	ldrb	r3, [r7, #15]
    da82:	4611      	mov	r1, r2
    da84:	4618      	mov	r0, r3
    da86:	4b07      	ldr	r3, [pc, #28]	; (daa4 <_usb_d_dev_ep_stall_set+0x4c>)
    da88:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    da8a:	687a      	ldr	r2, [r7, #4]
    da8c:	7cd3      	ldrb	r3, [r2, #19]
    da8e:	f043 0308 	orr.w	r3, r3, #8
    da92:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    da94:	2300      	movs	r3, #0
}
    da96:	4618      	mov	r0, r3
    da98:	3710      	adds	r7, #16
    da9a:	46bd      	mov	sp, r7
    da9c:	bd80      	pop	{r7, pc}
    da9e:	bf00      	nop
    daa0:	0000c0c1 	.word	0x0000c0c1
    daa4:	0000c041 	.word	0x0000c041

0000daa8 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    daa8:	b580      	push	{r7, lr}
    daaa:	b084      	sub	sp, #16
    daac:	af00      	add	r7, sp, #0
    daae:	6078      	str	r0, [r7, #4]
    dab0:	460b      	mov	r3, r1
    dab2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    dab4:	687b      	ldr	r3, [r7, #4]
    dab6:	7c9b      	ldrb	r3, [r3, #18]
    dab8:	f003 030f 	and.w	r3, r3, #15
    dabc:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    dabe:	78fa      	ldrb	r2, [r7, #3]
    dac0:	7bfb      	ldrb	r3, [r7, #15]
    dac2:	4611      	mov	r1, r2
    dac4:	4618      	mov	r0, r3
    dac6:	4b28      	ldr	r3, [pc, #160]	; (db68 <_usb_d_dev_ep_stall_clr+0xc0>)
    dac8:	4798      	blx	r3
    daca:	4603      	mov	r3, r0
    dacc:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    dace:	7bbb      	ldrb	r3, [r7, #14]
    dad0:	f083 0301 	eor.w	r3, r3, #1
    dad4:	b2db      	uxtb	r3, r3
    dad6:	2b00      	cmp	r3, #0
    dad8:	d001      	beq.n	dade <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    dada:	2300      	movs	r3, #0
    dadc:	e040      	b.n	db60 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    dade:	78f9      	ldrb	r1, [r7, #3]
    dae0:	7bfb      	ldrb	r3, [r7, #15]
    dae2:	2200      	movs	r2, #0
    dae4:	4618      	mov	r0, r3
    dae6:	4b21      	ldr	r3, [pc, #132]	; (db6c <_usb_d_dev_ep_stall_clr+0xc4>)
    dae8:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    daea:	78fb      	ldrb	r3, [r7, #3]
    daec:	2220      	movs	r2, #32
    daee:	409a      	lsls	r2, r3
    daf0:	7bfb      	ldrb	r3, [r7, #15]
    daf2:	4611      	mov	r1, r2
    daf4:	4618      	mov	r0, r3
    daf6:	4b1e      	ldr	r3, [pc, #120]	; (db70 <_usb_d_dev_ep_stall_clr+0xc8>)
    daf8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    dafa:	78fa      	ldrb	r2, [r7, #3]
    dafc:	7bfb      	ldrb	r3, [r7, #15]
    dafe:	4611      	mov	r1, r2
    db00:	4618      	mov	r0, r3
    db02:	4b1c      	ldr	r3, [pc, #112]	; (db74 <_usb_d_dev_ep_stall_clr+0xcc>)
    db04:	4798      	blx	r3
    db06:	4603      	mov	r3, r0
    db08:	2b00      	cmp	r3, #0
    db0a:	d00b      	beq.n	db24 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    db0c:	78fa      	ldrb	r2, [r7, #3]
    db0e:	7bfb      	ldrb	r3, [r7, #15]
    db10:	4611      	mov	r1, r2
    db12:	4618      	mov	r0, r3
    db14:	4b18      	ldr	r3, [pc, #96]	; (db78 <_usb_d_dev_ep_stall_clr+0xd0>)
    db16:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    db18:	78f9      	ldrb	r1, [r7, #3]
    db1a:	7bfb      	ldrb	r3, [r7, #15]
    db1c:	2200      	movs	r2, #0
    db1e:	4618      	mov	r0, r3
    db20:	4b16      	ldr	r3, [pc, #88]	; (db7c <_usb_d_dev_ep_stall_clr+0xd4>)
    db22:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    db24:	687b      	ldr	r3, [r7, #4]
    db26:	7cdb      	ldrb	r3, [r3, #19]
    db28:	f003 0307 	and.w	r3, r3, #7
    db2c:	b2db      	uxtb	r3, r3
    db2e:	2b01      	cmp	r3, #1
    db30:	d110      	bne.n	db54 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    db32:	7bfb      	ldrb	r3, [r7, #15]
    db34:	4619      	mov	r1, r3
    db36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    db3a:	4b11      	ldr	r3, [pc, #68]	; (db80 <_usb_d_dev_ep_stall_clr+0xd8>)
    db3c:	4798      	blx	r3
    db3e:	4603      	mov	r3, r0
    db40:	f003 0330 	and.w	r3, r3, #48	; 0x30
    db44:	2b00      	cmp	r3, #0
    db46:	d10a      	bne.n	db5e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    db48:	687a      	ldr	r2, [r7, #4]
    db4a:	7cd3      	ldrb	r3, [r2, #19]
    db4c:	f36f 03c3 	bfc	r3, #3, #1
    db50:	74d3      	strb	r3, [r2, #19]
    db52:	e004      	b.n	db5e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    db54:	687a      	ldr	r2, [r7, #4]
    db56:	7cd3      	ldrb	r3, [r2, #19]
    db58:	f36f 03c3 	bfc	r3, #3, #1
    db5c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    db5e:	2300      	movs	r3, #0
}
    db60:	4618      	mov	r0, r3
    db62:	3710      	adds	r7, #16
    db64:	46bd      	mov	sp, r7
    db66:	bd80      	pop	{r7, pc}
    db68:	0000c119 	.word	0x0000c119
    db6c:	0000c0c1 	.word	0x0000c0c1
    db70:	0000c069 	.word	0x0000c069
    db74:	0000c15d 	.word	0x0000c15d
    db78:	0000c1a1 	.word	0x0000c1a1
    db7c:	0000c28d 	.word	0x0000c28d
    db80:	0000bb49 	.word	0x0000bb49

0000db84 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    db84:	b580      	push	{r7, lr}
    db86:	b086      	sub	sp, #24
    db88:	af00      	add	r7, sp, #0
    db8a:	4603      	mov	r3, r0
    db8c:	460a      	mov	r2, r1
    db8e:	71fb      	strb	r3, [r7, #7]
    db90:	4613      	mov	r3, r2
    db92:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    db94:	79fb      	ldrb	r3, [r7, #7]
    db96:	f003 030f 	and.w	r3, r3, #15
    db9a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    db9c:	79fb      	ldrb	r3, [r7, #7]
    db9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dba2:	2b00      	cmp	r3, #0
    dba4:	bf14      	ite	ne
    dba6:	2301      	movne	r3, #1
    dba8:	2300      	moveq	r3, #0
    dbaa:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    dbac:	7cba      	ldrb	r2, [r7, #18]
    dbae:	7cfb      	ldrb	r3, [r7, #19]
    dbb0:	4611      	mov	r1, r2
    dbb2:	4618      	mov	r0, r3
    dbb4:	4b13      	ldr	r3, [pc, #76]	; (dc04 <_usb_d_dev_ep_stall+0x80>)
    dbb6:	4798      	blx	r3
    dbb8:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    dbba:	7cfb      	ldrb	r3, [r7, #19]
    dbbc:	2b04      	cmp	r3, #4
    dbbe:	d902      	bls.n	dbc6 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    dbc0:	f06f 0311 	mvn.w	r3, #17
    dbc4:	e01a      	b.n	dbfc <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    dbc6:	79bb      	ldrb	r3, [r7, #6]
    dbc8:	2b01      	cmp	r3, #1
    dbca:	d106      	bne.n	dbda <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    dbcc:	7cbb      	ldrb	r3, [r7, #18]
    dbce:	4619      	mov	r1, r3
    dbd0:	68f8      	ldr	r0, [r7, #12]
    dbd2:	4b0d      	ldr	r3, [pc, #52]	; (dc08 <_usb_d_dev_ep_stall+0x84>)
    dbd4:	4798      	blx	r3
    dbd6:	6178      	str	r0, [r7, #20]
    dbd8:	e00f      	b.n	dbfa <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    dbda:	79bb      	ldrb	r3, [r7, #6]
    dbdc:	2b00      	cmp	r3, #0
    dbde:	d106      	bne.n	dbee <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    dbe0:	7cbb      	ldrb	r3, [r7, #18]
    dbe2:	4619      	mov	r1, r3
    dbe4:	68f8      	ldr	r0, [r7, #12]
    dbe6:	4b09      	ldr	r3, [pc, #36]	; (dc0c <_usb_d_dev_ep_stall+0x88>)
    dbe8:	4798      	blx	r3
    dbea:	6178      	str	r0, [r7, #20]
    dbec:	e005      	b.n	dbfa <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    dbee:	7cbb      	ldrb	r3, [r7, #18]
    dbf0:	4619      	mov	r1, r3
    dbf2:	68f8      	ldr	r0, [r7, #12]
    dbf4:	4b06      	ldr	r3, [pc, #24]	; (dc10 <_usb_d_dev_ep_stall+0x8c>)
    dbf6:	4798      	blx	r3
    dbf8:	6178      	str	r0, [r7, #20]
	}
	return rc;
    dbfa:	697b      	ldr	r3, [r7, #20]
}
    dbfc:	4618      	mov	r0, r3
    dbfe:	3718      	adds	r7, #24
    dc00:	46bd      	mov	sp, r7
    dc02:	bd80      	pop	{r7, pc}
    dc04:	0000c625 	.word	0x0000c625
    dc08:	0000da59 	.word	0x0000da59
    dc0c:	0000daa9 	.word	0x0000daa9
    dc10:	0000da29 	.word	0x0000da29

0000dc14 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    dc14:	b580      	push	{r7, lr}
    dc16:	b082      	sub	sp, #8
    dc18:	af00      	add	r7, sp, #0
    dc1a:	6078      	str	r0, [r7, #4]
    dc1c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    dc1e:	687b      	ldr	r3, [r7, #4]
    dc20:	7c9b      	ldrb	r3, [r3, #18]
    dc22:	2bff      	cmp	r3, #255	; 0xff
    dc24:	d014      	beq.n	dc50 <_usb_d_dev_trans_done+0x3c>
    dc26:	687b      	ldr	r3, [r7, #4]
    dc28:	7cdb      	ldrb	r3, [r3, #19]
    dc2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dc2e:	b2db      	uxtb	r3, r3
    dc30:	2b00      	cmp	r3, #0
    dc32:	d00d      	beq.n	dc50 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    dc34:	687a      	ldr	r2, [r7, #4]
    dc36:	7cd3      	ldrb	r3, [r2, #19]
    dc38:	f36f 1386 	bfc	r3, #6, #1
    dc3c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    dc3e:	4b06      	ldr	r3, [pc, #24]	; (dc58 <_usb_d_dev_trans_done+0x44>)
    dc40:	691b      	ldr	r3, [r3, #16]
    dc42:	687a      	ldr	r2, [r7, #4]
    dc44:	7c90      	ldrb	r0, [r2, #18]
    dc46:	687a      	ldr	r2, [r7, #4]
    dc48:	6892      	ldr	r2, [r2, #8]
    dc4a:	6839      	ldr	r1, [r7, #0]
    dc4c:	4798      	blx	r3
    dc4e:	e000      	b.n	dc52 <_usb_d_dev_trans_done+0x3e>
		return;
    dc50:	bf00      	nop
}
    dc52:	3708      	adds	r7, #8
    dc54:	46bd      	mov	sp, r7
    dc56:	bd80      	pop	{r7, pc}
    dc58:	20001cb0 	.word	0x20001cb0

0000dc5c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    dc5c:	b580      	push	{r7, lr}
    dc5e:	b086      	sub	sp, #24
    dc60:	af00      	add	r7, sp, #0
    dc62:	60f8      	str	r0, [r7, #12]
    dc64:	460b      	mov	r3, r1
    dc66:	607a      	str	r2, [r7, #4]
    dc68:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    dc6a:	68fb      	ldr	r3, [r7, #12]
    dc6c:	7c9b      	ldrb	r3, [r3, #18]
    dc6e:	f003 030f 	and.w	r3, r3, #15
    dc72:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    dc74:	4b1f      	ldr	r3, [pc, #124]	; (dcf4 <_usb_d_dev_trans_stop+0x98>)
    dc76:	881b      	ldrh	r3, [r3, #0]
    dc78:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    dc7a:	68fb      	ldr	r3, [r7, #12]
    dc7c:	7c9b      	ldrb	r3, [r3, #18]
    dc7e:	2bff      	cmp	r3, #255	; 0xff
    dc80:	d033      	beq.n	dcea <_usb_d_dev_trans_stop+0x8e>
    dc82:	68fb      	ldr	r3, [r7, #12]
    dc84:	7cdb      	ldrb	r3, [r3, #19]
    dc86:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dc8a:	b2db      	uxtb	r3, r3
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d02c      	beq.n	dcea <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    dc90:	7afb      	ldrb	r3, [r7, #11]
    dc92:	2b00      	cmp	r3, #0
    dc94:	d006      	beq.n	dca4 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    dc96:	7dfb      	ldrb	r3, [r7, #23]
    dc98:	2200      	movs	r2, #0
    dc9a:	2101      	movs	r1, #1
    dc9c:	4618      	mov	r0, r3
    dc9e:	4b16      	ldr	r3, [pc, #88]	; (dcf8 <_usb_d_dev_trans_stop+0x9c>)
    dca0:	4798      	blx	r3
    dca2:	e005      	b.n	dcb0 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    dca4:	7dfb      	ldrb	r3, [r7, #23]
    dca6:	2200      	movs	r2, #0
    dca8:	2100      	movs	r1, #0
    dcaa:	4618      	mov	r0, r3
    dcac:	4b13      	ldr	r3, [pc, #76]	; (dcfc <_usb_d_dev_trans_stop+0xa0>)
    dcae:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    dcb0:	7afb      	ldrb	r3, [r7, #11]
    dcb2:	f107 0218 	add.w	r2, r7, #24
    dcb6:	4413      	add	r3, r2
    dcb8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    dcbc:	461a      	mov	r2, r3
    dcbe:	7dfb      	ldrb	r3, [r7, #23]
    dcc0:	4611      	mov	r1, r2
    dcc2:	4618      	mov	r0, r3
    dcc4:	4b0e      	ldr	r3, [pc, #56]	; (dd00 <_usb_d_dev_trans_stop+0xa4>)
    dcc6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    dcc8:	7afb      	ldrb	r3, [r7, #11]
    dcca:	f107 0218 	add.w	r2, r7, #24
    dcce:	4413      	add	r3, r2
    dcd0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    dcd4:	461a      	mov	r2, r3
    dcd6:	7dfb      	ldrb	r3, [r7, #23]
    dcd8:	4611      	mov	r1, r2
    dcda:	4618      	mov	r0, r3
    dcdc:	4b09      	ldr	r3, [pc, #36]	; (dd04 <_usb_d_dev_trans_stop+0xa8>)
    dcde:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    dce0:	6879      	ldr	r1, [r7, #4]
    dce2:	68f8      	ldr	r0, [r7, #12]
    dce4:	4b08      	ldr	r3, [pc, #32]	; (dd08 <_usb_d_dev_trans_stop+0xac>)
    dce6:	4798      	blx	r3
    dce8:	e000      	b.n	dcec <_usb_d_dev_trans_stop+0x90>
		return;
    dcea:	bf00      	nop
}
    dcec:	3718      	adds	r7, #24
    dcee:	46bd      	mov	sp, r7
    dcf0:	bd80      	pop	{r7, pc}
    dcf2:	bf00      	nop
    dcf4:	00013de0 	.word	0x00013de0
    dcf8:	0000c511 	.word	0x0000c511
    dcfc:	0000c569 	.word	0x0000c569
    dd00:	0000c019 	.word	0x0000c019
    dd04:	0000c069 	.word	0x0000c069
    dd08:	0000dc15 	.word	0x0000dc15

0000dd0c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    dd0c:	b580      	push	{r7, lr}
    dd0e:	b086      	sub	sp, #24
    dd10:	af00      	add	r7, sp, #0
    dd12:	4603      	mov	r3, r0
    dd14:	6039      	str	r1, [r7, #0]
    dd16:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    dd18:	79fb      	ldrb	r3, [r7, #7]
    dd1a:	f003 030f 	and.w	r3, r3, #15
    dd1e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    dd20:	7dfb      	ldrb	r3, [r7, #23]
    dd22:	015b      	lsls	r3, r3, #5
    dd24:	4a1e      	ldr	r2, [pc, #120]	; (dda0 <_usb_d_dev_ep_read_req+0x94>)
    dd26:	4413      	add	r3, r2
    dd28:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    dd2a:	693b      	ldr	r3, [r7, #16]
    dd2c:	681b      	ldr	r3, [r3, #0]
    dd2e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    dd30:	693b      	ldr	r3, [r7, #16]
    dd32:	685b      	ldr	r3, [r3, #4]
    dd34:	f3c3 030d 	ubfx	r3, r3, #0, #14
    dd38:	b29b      	uxth	r3, r3
    dd3a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    dd3c:	7dfb      	ldrb	r3, [r7, #23]
    dd3e:	2b04      	cmp	r3, #4
    dd40:	d802      	bhi.n	dd48 <_usb_d_dev_ep_read_req+0x3c>
    dd42:	683b      	ldr	r3, [r7, #0]
    dd44:	2b00      	cmp	r3, #0
    dd46:	d102      	bne.n	dd4e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    dd48:	f06f 0311 	mvn.w	r3, #17
    dd4c:	e023      	b.n	dd96 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    dd4e:	7dfb      	ldrb	r3, [r7, #23]
    dd50:	4618      	mov	r0, r3
    dd52:	4b14      	ldr	r3, [pc, #80]	; (dda4 <_usb_d_dev_ep_read_req+0x98>)
    dd54:	4798      	blx	r3
    dd56:	4603      	mov	r3, r0
    dd58:	f083 0301 	eor.w	r3, r3, #1
    dd5c:	b2db      	uxtb	r3, r3
    dd5e:	2b00      	cmp	r3, #0
    dd60:	d002      	beq.n	dd68 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    dd62:	f06f 0312 	mvn.w	r3, #18
    dd66:	e016      	b.n	dd96 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    dd68:	7dfb      	ldrb	r3, [r7, #23]
    dd6a:	4618      	mov	r0, r3
    dd6c:	4b0e      	ldr	r3, [pc, #56]	; (dda8 <_usb_d_dev_ep_read_req+0x9c>)
    dd6e:	4798      	blx	r3
    dd70:	4603      	mov	r3, r0
    dd72:	f083 0301 	eor.w	r3, r3, #1
    dd76:	b2db      	uxtb	r3, r3
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d001      	beq.n	dd80 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    dd7c:	2300      	movs	r3, #0
    dd7e:	e00a      	b.n	dd96 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    dd80:	68fb      	ldr	r3, [r7, #12]
    dd82:	2208      	movs	r2, #8
    dd84:	4619      	mov	r1, r3
    dd86:	6838      	ldr	r0, [r7, #0]
    dd88:	4b08      	ldr	r3, [pc, #32]	; (ddac <_usb_d_dev_ep_read_req+0xa0>)
    dd8a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    dd8c:	7dfb      	ldrb	r3, [r7, #23]
    dd8e:	4618      	mov	r0, r3
    dd90:	4b07      	ldr	r3, [pc, #28]	; (ddb0 <_usb_d_dev_ep_read_req+0xa4>)
    dd92:	4798      	blx	r3

	return bytes;
    dd94:	897b      	ldrh	r3, [r7, #10]
}
    dd96:	4618      	mov	r0, r3
    dd98:	3718      	adds	r7, #24
    dd9a:	46bd      	mov	sp, r7
    dd9c:	bd80      	pop	{r7, pc}
    dd9e:	bf00      	nop
    dda0:	20001d78 	.word	0x20001d78
    dda4:	0000c091 	.word	0x0000c091
    dda8:	0000c23d 	.word	0x0000c23d
    ddac:	000125a5 	.word	0x000125a5
    ddb0:	0000c26d 	.word	0x0000c26d

0000ddb4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ddb4:	b580      	push	{r7, lr}
    ddb6:	b086      	sub	sp, #24
    ddb8:	af00      	add	r7, sp, #0
    ddba:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ddbc:	687b      	ldr	r3, [r7, #4]
    ddbe:	7a1b      	ldrb	r3, [r3, #8]
    ddc0:	f003 030f 	and.w	r3, r3, #15
    ddc4:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ddc6:	687b      	ldr	r3, [r7, #4]
    ddc8:	7a1b      	ldrb	r3, [r3, #8]
    ddca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ddce:	2b00      	cmp	r3, #0
    ddd0:	bf14      	ite	ne
    ddd2:	2301      	movne	r3, #1
    ddd4:	2300      	moveq	r3, #0
    ddd6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ddd8:	7d7a      	ldrb	r2, [r7, #21]
    ddda:	7dbb      	ldrb	r3, [r7, #22]
    dddc:	4611      	mov	r1, r2
    ddde:	4618      	mov	r0, r3
    dde0:	4b5f      	ldr	r3, [pc, #380]	; (df60 <_usb_d_dev_ep_trans+0x1ac>)
    dde2:	4798      	blx	r3
    dde4:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    dde6:	693b      	ldr	r3, [r7, #16]
    dde8:	8a1b      	ldrh	r3, [r3, #16]
    ddea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ddee:	4293      	cmp	r3, r2
    ddf0:	d004      	beq.n	ddfc <_usb_d_dev_ep_trans+0x48>
    ddf2:	693b      	ldr	r3, [r7, #16]
    ddf4:	8a1b      	ldrh	r3, [r3, #16]
    ddf6:	3b01      	subs	r3, #1
    ddf8:	b29b      	uxth	r3, r3
    ddfa:	e001      	b.n	de00 <_usb_d_dev_ep_trans+0x4c>
    ddfc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    de00:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    de02:	687b      	ldr	r3, [r7, #4]
    de04:	685a      	ldr	r2, [r3, #4]
    de06:	89fb      	ldrh	r3, [r7, #14]
    de08:	4013      	ands	r3, r2
    de0a:	2b00      	cmp	r3, #0
    de0c:	bf14      	ite	ne
    de0e:	2301      	movne	r3, #1
    de10:	2300      	moveq	r3, #0
    de12:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    de14:	2300      	movs	r3, #0
    de16:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    de18:	7dbb      	ldrb	r3, [r7, #22]
    de1a:	2b04      	cmp	r3, #4
    de1c:	d902      	bls.n	de24 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    de1e:	f06f 0311 	mvn.w	r3, #17
    de22:	e098      	b.n	df56 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    de24:	687b      	ldr	r3, [r7, #4]
    de26:	681b      	ldr	r3, [r3, #0]
    de28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    de2c:	d31a      	bcc.n	de64 <_usb_d_dev_ep_trans+0xb0>
    de2e:	687b      	ldr	r3, [r7, #4]
    de30:	681b      	ldr	r3, [r3, #0]
    de32:	461a      	mov	r2, r3
    de34:	687b      	ldr	r3, [r7, #4]
    de36:	685b      	ldr	r3, [r3, #4]
    de38:	4413      	add	r3, r2
    de3a:	4a4a      	ldr	r2, [pc, #296]	; (df64 <_usb_d_dev_ep_trans+0x1b0>)
    de3c:	4293      	cmp	r3, r2
    de3e:	d811      	bhi.n	de64 <_usb_d_dev_ep_trans+0xb0>
    de40:	687b      	ldr	r3, [r7, #4]
    de42:	681b      	ldr	r3, [r3, #0]
    de44:	f003 0303 	and.w	r3, r3, #3
    de48:	2b00      	cmp	r3, #0
    de4a:	d10b      	bne.n	de64 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    de4c:	7d7b      	ldrb	r3, [r7, #21]
    de4e:	f083 0301 	eor.w	r3, r3, #1
    de52:	b2db      	uxtb	r3, r3
    de54:	2b00      	cmp	r3, #0
    de56:	d00e      	beq.n	de76 <_usb_d_dev_ep_trans+0xc2>
    de58:	687b      	ldr	r3, [r7, #4]
    de5a:	685b      	ldr	r3, [r3, #4]
    de5c:	693a      	ldr	r2, [r7, #16]
    de5e:	8a12      	ldrh	r2, [r2, #16]
    de60:	4293      	cmp	r3, r2
    de62:	d208      	bcs.n	de76 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    de64:	693b      	ldr	r3, [r7, #16]
    de66:	68db      	ldr	r3, [r3, #12]
    de68:	2b00      	cmp	r3, #0
    de6a:	d102      	bne.n	de72 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    de6c:	f06f 0312 	mvn.w	r3, #18
    de70:	e071      	b.n	df56 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    de72:	2301      	movs	r3, #1
    de74:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    de76:	7d7b      	ldrb	r3, [r7, #21]
    de78:	f083 0301 	eor.w	r3, r3, #1
    de7c:	b2db      	uxtb	r3, r3
    de7e:	2b00      	cmp	r3, #0
    de80:	d009      	beq.n	de96 <_usb_d_dev_ep_trans+0xe2>
    de82:	7b7b      	ldrb	r3, [r7, #13]
    de84:	2b00      	cmp	r3, #0
    de86:	d006      	beq.n	de96 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    de88:	693b      	ldr	r3, [r7, #16]
    de8a:	68db      	ldr	r3, [r3, #12]
    de8c:	2b00      	cmp	r3, #0
    de8e:	d102      	bne.n	de96 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    de90:	f06f 0311 	mvn.w	r3, #17
    de94:	e05f      	b.n	df56 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    de96:	693b      	ldr	r3, [r7, #16]
    de98:	7cdb      	ldrb	r3, [r3, #19]
    de9a:	f003 0308 	and.w	r3, r3, #8
    de9e:	b2db      	uxtb	r3, r3
    dea0:	2b00      	cmp	r3, #0
    dea2:	d001      	beq.n	dea8 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    dea4:	2302      	movs	r3, #2
    dea6:	e056      	b.n	df56 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    dea8:	f107 0308 	add.w	r3, r7, #8
    deac:	4618      	mov	r0, r3
    deae:	4b2e      	ldr	r3, [pc, #184]	; (df68 <_usb_d_dev_ep_trans+0x1b4>)
    deb0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    deb2:	693b      	ldr	r3, [r7, #16]
    deb4:	7cdb      	ldrb	r3, [r3, #19]
    deb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    deba:	b2db      	uxtb	r3, r3
    debc:	2b00      	cmp	r3, #0
    debe:	d006      	beq.n	dece <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    dec0:	f107 0308 	add.w	r3, r7, #8
    dec4:	4618      	mov	r0, r3
    dec6:	4b29      	ldr	r3, [pc, #164]	; (df6c <_usb_d_dev_ep_trans+0x1b8>)
    dec8:	4798      	blx	r3
		return USB_BUSY;
    deca:	2301      	movs	r3, #1
    decc:	e043      	b.n	df56 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    dece:	693a      	ldr	r2, [r7, #16]
    ded0:	7cd3      	ldrb	r3, [r2, #19]
    ded2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ded6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ded8:	f107 0308 	add.w	r3, r7, #8
    dedc:	4618      	mov	r0, r3
    dede:	4b23      	ldr	r3, [pc, #140]	; (df6c <_usb_d_dev_ep_trans+0x1b8>)
    dee0:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    dee2:	687b      	ldr	r3, [r7, #4]
    dee4:	681a      	ldr	r2, [r3, #0]
    dee6:	693b      	ldr	r3, [r7, #16]
    dee8:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    deea:	687b      	ldr	r3, [r7, #4]
    deec:	685a      	ldr	r2, [r3, #4]
    deee:	693b      	ldr	r3, [r7, #16]
    def0:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    def2:	693b      	ldr	r3, [r7, #16]
    def4:	2200      	movs	r2, #0
    def6:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    def8:	693a      	ldr	r2, [r7, #16]
    defa:	7cd3      	ldrb	r3, [r2, #19]
    defc:	7d79      	ldrb	r1, [r7, #21]
    defe:	f361 13c7 	bfi	r3, r1, #7, #1
    df02:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    df04:	693a      	ldr	r2, [r7, #16]
    df06:	7cd3      	ldrb	r3, [r2, #19]
    df08:	7df9      	ldrb	r1, [r7, #23]
    df0a:	f361 1345 	bfi	r3, r1, #5, #1
    df0e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	7a5b      	ldrb	r3, [r3, #9]
    df14:	2b00      	cmp	r3, #0
    df16:	d007      	beq.n	df28 <_usb_d_dev_ep_trans+0x174>
    df18:	7b7b      	ldrb	r3, [r7, #13]
    df1a:	f083 0301 	eor.w	r3, r3, #1
    df1e:	b2db      	uxtb	r3, r3
    df20:	2b00      	cmp	r3, #0
    df22:	d001      	beq.n	df28 <_usb_d_dev_ep_trans+0x174>
    df24:	2301      	movs	r3, #1
    df26:	e000      	b.n	df2a <_usb_d_dev_ep_trans+0x176>
    df28:	2300      	movs	r3, #0
    df2a:	b2db      	uxtb	r3, r3
    df2c:	f003 0301 	and.w	r3, r3, #1
    df30:	b2d9      	uxtb	r1, r3
    df32:	693a      	ldr	r2, [r7, #16]
    df34:	7cd3      	ldrb	r3, [r2, #19]
    df36:	f361 1304 	bfi	r3, r1, #4, #1
    df3a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    df3c:	7d7b      	ldrb	r3, [r7, #21]
    df3e:	2b00      	cmp	r3, #0
    df40:	d004      	beq.n	df4c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    df42:	2100      	movs	r1, #0
    df44:	6938      	ldr	r0, [r7, #16]
    df46:	4b0a      	ldr	r3, [pc, #40]	; (df70 <_usb_d_dev_ep_trans+0x1bc>)
    df48:	4798      	blx	r3
    df4a:	e003      	b.n	df54 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    df4c:	2100      	movs	r1, #0
    df4e:	6938      	ldr	r0, [r7, #16]
    df50:	4b08      	ldr	r3, [pc, #32]	; (df74 <_usb_d_dev_ep_trans+0x1c0>)
    df52:	4798      	blx	r3
	}

	return ERR_NONE;
    df54:	2300      	movs	r3, #0
}
    df56:	4618      	mov	r0, r3
    df58:	3718      	adds	r7, #24
    df5a:	46bd      	mov	sp, r7
    df5c:	bd80      	pop	{r7, pc}
    df5e:	bf00      	nop
    df60:	0000c625 	.word	0x0000c625
    df64:	20041fff 	.word	0x20041fff
    df68:	00004971 	.word	0x00004971
    df6c:	00004997 	.word	0x00004997
    df70:	0000c8ed 	.word	0x0000c8ed
    df74:	0000cb05 	.word	0x0000cb05

0000df78 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    df78:	b580      	push	{r7, lr}
    df7a:	b084      	sub	sp, #16
    df7c:	af00      	add	r7, sp, #0
    df7e:	4603      	mov	r3, r0
    df80:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    df82:	79fb      	ldrb	r3, [r7, #7]
    df84:	f003 030f 	and.w	r3, r3, #15
    df88:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    df8a:	79fb      	ldrb	r3, [r7, #7]
    df8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    df90:	2b00      	cmp	r3, #0
    df92:	bf14      	ite	ne
    df94:	2301      	movne	r3, #1
    df96:	2300      	moveq	r3, #0
    df98:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    df9a:	7bba      	ldrb	r2, [r7, #14]
    df9c:	7bfb      	ldrb	r3, [r7, #15]
    df9e:	4611      	mov	r1, r2
    dfa0:	4618      	mov	r0, r3
    dfa2:	4b08      	ldr	r3, [pc, #32]	; (dfc4 <_usb_d_dev_ep_abort+0x4c>)
    dfa4:	4798      	blx	r3
    dfa6:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    dfa8:	7bfb      	ldrb	r3, [r7, #15]
    dfaa:	2b04      	cmp	r3, #4
    dfac:	d806      	bhi.n	dfbc <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    dfae:	7bbb      	ldrb	r3, [r7, #14]
    dfb0:	2202      	movs	r2, #2
    dfb2:	4619      	mov	r1, r3
    dfb4:	68b8      	ldr	r0, [r7, #8]
    dfb6:	4b04      	ldr	r3, [pc, #16]	; (dfc8 <_usb_d_dev_ep_abort+0x50>)
    dfb8:	4798      	blx	r3
    dfba:	e000      	b.n	dfbe <_usb_d_dev_ep_abort+0x46>
		return;
    dfbc:	bf00      	nop
}
    dfbe:	3710      	adds	r7, #16
    dfc0:	46bd      	mov	sp, r7
    dfc2:	bd80      	pop	{r7, pc}
    dfc4:	0000c625 	.word	0x0000c625
    dfc8:	0000dc5d 	.word	0x0000dc5d

0000dfcc <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    dfcc:	b480      	push	{r7}
    dfce:	b085      	sub	sp, #20
    dfd0:	af00      	add	r7, sp, #0
    dfd2:	4603      	mov	r3, r0
    dfd4:	6039      	str	r1, [r7, #0]
    dfd6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    dfd8:	683b      	ldr	r3, [r7, #0]
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d001      	beq.n	dfe2 <_usb_d_dev_register_callback+0x16>
    dfde:	683b      	ldr	r3, [r7, #0]
    dfe0:	e000      	b.n	dfe4 <_usb_d_dev_register_callback+0x18>
    dfe2:	4b0a      	ldr	r3, [pc, #40]	; (e00c <_usb_d_dev_register_callback+0x40>)
    dfe4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    dfe6:	79fb      	ldrb	r3, [r7, #7]
    dfe8:	2b01      	cmp	r3, #1
    dfea:	d103      	bne.n	dff4 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    dfec:	4a08      	ldr	r2, [pc, #32]	; (e010 <_usb_d_dev_register_callback+0x44>)
    dfee:	68fb      	ldr	r3, [r7, #12]
    dff0:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    dff2:	e005      	b.n	e000 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    dff4:	79fb      	ldrb	r3, [r7, #7]
    dff6:	2b00      	cmp	r3, #0
    dff8:	d102      	bne.n	e000 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    dffa:	4a05      	ldr	r2, [pc, #20]	; (e010 <_usb_d_dev_register_callback+0x44>)
    dffc:	68fb      	ldr	r3, [r7, #12]
    dffe:	6013      	str	r3, [r2, #0]
}
    e000:	bf00      	nop
    e002:	3714      	adds	r7, #20
    e004:	46bd      	mov	sp, r7
    e006:	f85d 7b04 	ldr.w	r7, [sp], #4
    e00a:	4770      	bx	lr
    e00c:	0000bead 	.word	0x0000bead
    e010:	20001cb0 	.word	0x20001cb0

0000e014 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    e014:	b480      	push	{r7}
    e016:	b085      	sub	sp, #20
    e018:	af00      	add	r7, sp, #0
    e01a:	4603      	mov	r3, r0
    e01c:	6039      	str	r1, [r7, #0]
    e01e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    e020:	683b      	ldr	r3, [r7, #0]
    e022:	2b00      	cmp	r3, #0
    e024:	d001      	beq.n	e02a <_usb_d_dev_register_ep_callback+0x16>
    e026:	683b      	ldr	r3, [r7, #0]
    e028:	e000      	b.n	e02c <_usb_d_dev_register_ep_callback+0x18>
    e02a:	4b0e      	ldr	r3, [pc, #56]	; (e064 <_usb_d_dev_register_ep_callback+0x50>)
    e02c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    e02e:	79fb      	ldrb	r3, [r7, #7]
    e030:	2b00      	cmp	r3, #0
    e032:	d103      	bne.n	e03c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    e034:	4a0c      	ldr	r2, [pc, #48]	; (e068 <_usb_d_dev_register_ep_callback+0x54>)
    e036:	68fb      	ldr	r3, [r7, #12]
    e038:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    e03a:	e00c      	b.n	e056 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    e03c:	79fb      	ldrb	r3, [r7, #7]
    e03e:	2b01      	cmp	r3, #1
    e040:	d103      	bne.n	e04a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    e042:	4a09      	ldr	r2, [pc, #36]	; (e068 <_usb_d_dev_register_ep_callback+0x54>)
    e044:	68fb      	ldr	r3, [r7, #12]
    e046:	60d3      	str	r3, [r2, #12]
}
    e048:	e005      	b.n	e056 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    e04a:	79fb      	ldrb	r3, [r7, #7]
    e04c:	2b02      	cmp	r3, #2
    e04e:	d102      	bne.n	e056 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    e050:	4a05      	ldr	r2, [pc, #20]	; (e068 <_usb_d_dev_register_ep_callback+0x54>)
    e052:	68fb      	ldr	r3, [r7, #12]
    e054:	6113      	str	r3, [r2, #16]
}
    e056:	bf00      	nop
    e058:	3714      	adds	r7, #20
    e05a:	46bd      	mov	sp, r7
    e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e060:	4770      	bx	lr
    e062:	bf00      	nop
    e064:	0000bead 	.word	0x0000bead
    e068:	20001cb0 	.word	0x20001cb0

0000e06c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    e06c:	b580      	push	{r7, lr}
    e06e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e070:	4b01      	ldr	r3, [pc, #4]	; (e078 <USB_0_Handler+0xc>)
    e072:	4798      	blx	r3
}
    e074:	bf00      	nop
    e076:	bd80      	pop	{r7, pc}
    e078:	0000d2dd 	.word	0x0000d2dd

0000e07c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    e07c:	b580      	push	{r7, lr}
    e07e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e080:	4b01      	ldr	r3, [pc, #4]	; (e088 <USB_1_Handler+0xc>)
    e082:	4798      	blx	r3
}
    e084:	bf00      	nop
    e086:	bd80      	pop	{r7, pc}
    e088:	0000d2dd 	.word	0x0000d2dd

0000e08c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    e08c:	b580      	push	{r7, lr}
    e08e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e090:	4b01      	ldr	r3, [pc, #4]	; (e098 <USB_2_Handler+0xc>)
    e092:	4798      	blx	r3
}
    e094:	bf00      	nop
    e096:	bd80      	pop	{r7, pc}
    e098:	0000d2dd 	.word	0x0000d2dd

0000e09c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    e09c:	b580      	push	{r7, lr}
    e09e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    e0a0:	4b01      	ldr	r3, [pc, #4]	; (e0a8 <USB_3_Handler+0xc>)
    e0a2:	4798      	blx	r3
}
    e0a4:	bf00      	nop
    e0a6:	bd80      	pop	{r7, pc}
    e0a8:	0000d2dd 	.word	0x0000d2dd

0000e0ac <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    e0ac:	b480      	push	{r7}
    e0ae:	b083      	sub	sp, #12
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	6078      	str	r0, [r7, #4]
    e0b4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    e0b6:	bf00      	nop
    e0b8:	687b      	ldr	r3, [r7, #4]
    e0ba:	689a      	ldr	r2, [r3, #8]
    e0bc:	683b      	ldr	r3, [r7, #0]
    e0be:	4013      	ands	r3, r2
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d1f9      	bne.n	e0b8 <hri_wdt_wait_for_sync+0xc>
	};
}
    e0c4:	bf00      	nop
    e0c6:	370c      	adds	r7, #12
    e0c8:	46bd      	mov	sp, r7
    e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0ce:	4770      	bx	lr

0000e0d0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    e0d0:	b580      	push	{r7, lr}
    e0d2:	b084      	sub	sp, #16
    e0d4:	af00      	add	r7, sp, #0
    e0d6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e0d8:	210e      	movs	r1, #14
    e0da:	6878      	ldr	r0, [r7, #4]
    e0dc:	4b0a      	ldr	r3, [pc, #40]	; (e108 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    e0de:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    e0e0:	687b      	ldr	r3, [r7, #4]
    e0e2:	781b      	ldrb	r3, [r3, #0]
    e0e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    e0e6:	7bfb      	ldrb	r3, [r7, #15]
    e0e8:	085b      	lsrs	r3, r3, #1
    e0ea:	b2db      	uxtb	r3, r3
    e0ec:	f003 0301 	and.w	r3, r3, #1
    e0f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    e0f2:	7bfb      	ldrb	r3, [r7, #15]
    e0f4:	2b00      	cmp	r3, #0
    e0f6:	bf14      	ite	ne
    e0f8:	2301      	movne	r3, #1
    e0fa:	2300      	moveq	r3, #0
    e0fc:	b2db      	uxtb	r3, r3
}
    e0fe:	4618      	mov	r0, r3
    e100:	3710      	adds	r7, #16
    e102:	46bd      	mov	sp, r7
    e104:	bd80      	pop	{r7, pc}
    e106:	bf00      	nop
    e108:	0000e0ad 	.word	0x0000e0ad

0000e10c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    e10c:	b580      	push	{r7, lr}
    e10e:	b082      	sub	sp, #8
    e110:	af00      	add	r7, sp, #0
    e112:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    e114:	687b      	ldr	r3, [r7, #4]
    e116:	781b      	ldrb	r3, [r3, #0]
    e118:	b2db      	uxtb	r3, r3
    e11a:	f023 0304 	bic.w	r3, r3, #4
    e11e:	b2da      	uxtb	r2, r3
    e120:	687b      	ldr	r3, [r7, #4]
    e122:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e124:	210e      	movs	r1, #14
    e126:	6878      	ldr	r0, [r7, #4]
    e128:	4b02      	ldr	r3, [pc, #8]	; (e134 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    e12a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    e12c:	bf00      	nop
    e12e:	3708      	adds	r7, #8
    e130:	46bd      	mov	sp, r7
    e132:	bd80      	pop	{r7, pc}
    e134:	0000e0ad 	.word	0x0000e0ad

0000e138 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    e138:	b580      	push	{r7, lr}
    e13a:	b084      	sub	sp, #16
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    e140:	210e      	movs	r1, #14
    e142:	6878      	ldr	r0, [r7, #4]
    e144:	4b08      	ldr	r3, [pc, #32]	; (e168 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    e146:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    e148:	687b      	ldr	r3, [r7, #4]
    e14a:	781b      	ldrb	r3, [r3, #0]
    e14c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    e14e:	7bfb      	ldrb	r3, [r7, #15]
    e150:	09db      	lsrs	r3, r3, #7
    e152:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    e154:	7bfb      	ldrb	r3, [r7, #15]
    e156:	2b00      	cmp	r3, #0
    e158:	bf14      	ite	ne
    e15a:	2301      	movne	r3, #1
    e15c:	2300      	moveq	r3, #0
    e15e:	b2db      	uxtb	r3, r3
}
    e160:	4618      	mov	r0, r3
    e162:	3710      	adds	r7, #16
    e164:	46bd      	mov	sp, r7
    e166:	bd80      	pop	{r7, pc}
    e168:	0000e0ad 	.word	0x0000e0ad

0000e16c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    e16c:	b480      	push	{r7}
    e16e:	b085      	sub	sp, #20
    e170:	af00      	add	r7, sp, #0
    e172:	6078      	str	r0, [r7, #4]
    e174:	460b      	mov	r3, r1
    e176:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    e178:	687b      	ldr	r3, [r7, #4]
    e17a:	785b      	ldrb	r3, [r3, #1]
    e17c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    e17e:	7bfb      	ldrb	r3, [r7, #15]
    e180:	f023 030f 	bic.w	r3, r3, #15
    e184:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    e186:	78fb      	ldrb	r3, [r7, #3]
    e188:	f003 030f 	and.w	r3, r3, #15
    e18c:	b2da      	uxtb	r2, r3
    e18e:	7bfb      	ldrb	r3, [r7, #15]
    e190:	4313      	orrs	r3, r2
    e192:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    e194:	687b      	ldr	r3, [r7, #4]
    e196:	7bfa      	ldrb	r2, [r7, #15]
    e198:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    e19a:	bf00      	nop
    e19c:	3714      	adds	r7, #20
    e19e:	46bd      	mov	sp, r7
    e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1a4:	4770      	bx	lr
	...

0000e1a8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    e1a8:	b580      	push	{r7, lr}
    e1aa:	b082      	sub	sp, #8
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    e1b0:	687b      	ldr	r3, [r7, #4]
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	d005      	beq.n	e1c2 <_wdt_init+0x1a>
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	681b      	ldr	r3, [r3, #0]
    e1ba:	2b00      	cmp	r3, #0
    e1bc:	d001      	beq.n	e1c2 <_wdt_init+0x1a>
    e1be:	2301      	movs	r3, #1
    e1c0:	e000      	b.n	e1c4 <_wdt_init+0x1c>
    e1c2:	2300      	movs	r3, #0
    e1c4:	f003 0301 	and.w	r3, r3, #1
    e1c8:	b2db      	uxtb	r3, r3
    e1ca:	2250      	movs	r2, #80	; 0x50
    e1cc:	4913      	ldr	r1, [pc, #76]	; (e21c <_wdt_init+0x74>)
    e1ce:	4618      	mov	r0, r3
    e1d0:	4b13      	ldr	r3, [pc, #76]	; (e220 <_wdt_init+0x78>)
    e1d2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    e1d4:	687b      	ldr	r3, [r7, #4]
    e1d6:	681b      	ldr	r3, [r3, #0]
    e1d8:	4618      	mov	r0, r3
    e1da:	4b12      	ldr	r3, [pc, #72]	; (e224 <_wdt_init+0x7c>)
    e1dc:	4798      	blx	r3
    e1de:	4603      	mov	r3, r0
    e1e0:	2b00      	cmp	r3, #0
    e1e2:	d107      	bne.n	e1f4 <_wdt_init+0x4c>
    e1e4:	687b      	ldr	r3, [r7, #4]
    e1e6:	681b      	ldr	r3, [r3, #0]
    e1e8:	4618      	mov	r0, r3
    e1ea:	4b0f      	ldr	r3, [pc, #60]	; (e228 <_wdt_init+0x80>)
    e1ec:	4798      	blx	r3
    e1ee:	4603      	mov	r3, r0
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d002      	beq.n	e1fa <_wdt_init+0x52>
		return ERR_DENIED;
    e1f4:	f06f 0310 	mvn.w	r3, #16
    e1f8:	e00b      	b.n	e212 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    e1fa:	687b      	ldr	r3, [r7, #4]
    e1fc:	681b      	ldr	r3, [r3, #0]
    e1fe:	4618      	mov	r0, r3
    e200:	4b0a      	ldr	r3, [pc, #40]	; (e22c <_wdt_init+0x84>)
    e202:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    e204:	687b      	ldr	r3, [r7, #4]
    e206:	681b      	ldr	r3, [r3, #0]
    e208:	210b      	movs	r1, #11
    e20a:	4618      	mov	r0, r3
    e20c:	4b08      	ldr	r3, [pc, #32]	; (e230 <_wdt_init+0x88>)
    e20e:	4798      	blx	r3
	}

	return ERR_NONE;
    e210:	2300      	movs	r3, #0
}
    e212:	4618      	mov	r0, r3
    e214:	3708      	adds	r7, #8
    e216:	46bd      	mov	sp, r7
    e218:	bd80      	pop	{r7, pc}
    e21a:	bf00      	nop
    e21c:	00013de4 	.word	0x00013de4
    e220:	00006a41 	.word	0x00006a41
    e224:	0000e139 	.word	0x0000e139
    e228:	0000e0d1 	.word	0x0000e0d1
    e22c:	0000e10d 	.word	0x0000e10d
    e230:	0000e16d 	.word	0x0000e16d

0000e234 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    e234:	b580      	push	{r7, lr}
    e236:	b08c      	sub	sp, #48	; 0x30
    e238:	af00      	add	r7, sp, #0
    e23a:	6078      	str	r0, [r7, #4]
    e23c:	460b      	mov	r3, r1
    e23e:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e240:	687b      	ldr	r3, [r7, #4]
    e242:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e244:	687b      	ldr	r3, [r7, #4]
    e246:	681b      	ldr	r3, [r3, #0]
    e248:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    e24a:	f107 030c 	add.w	r3, r7, #12
    e24e:	2200      	movs	r2, #0
    e250:	601a      	str	r2, [r3, #0]
    e252:	605a      	str	r2, [r3, #4]
    e254:	609a      	str	r2, [r3, #8]
    e256:	60da      	str	r2, [r3, #12]
    e258:	611a      	str	r2, [r3, #16]
    e25a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e25e:	7b1b      	ldrb	r3, [r3, #12]
    e260:	2b00      	cmp	r3, #0
    e262:	d001      	beq.n	e268 <n25q256a_xip_confirm+0x34>
    e264:	2206      	movs	r2, #6
    e266:	e000      	b.n	e26a <n25q256a_xip_confirm+0x36>
    e268:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e26a:	7b3b      	ldrb	r3, [r7, #12]
    e26c:	f362 0302 	bfi	r3, r2, #0, #3
    e270:	733b      	strb	r3, [r7, #12]
    e272:	7b3b      	ldrb	r3, [r7, #12]
    e274:	f043 0310 	orr.w	r3, r3, #16
    e278:	733b      	strb	r3, [r7, #12]
    e27a:	7b3b      	ldrb	r3, [r7, #12]
    e27c:	f043 0320 	orr.w	r3, r3, #32
    e280:	733b      	strb	r3, [r7, #12]
    e282:	7b3b      	ldrb	r3, [r7, #12]
    e284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e288:	733b      	strb	r3, [r7, #12]
    e28a:	7b3b      	ldrb	r3, [r7, #12]
    e28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e290:	733b      	strb	r3, [r7, #12]
    e292:	7b7b      	ldrb	r3, [r7, #13]
    e294:	f043 0303 	orr.w	r3, r3, #3
    e298:	737b      	strb	r3, [r7, #13]
    e29a:	7b7b      	ldrb	r3, [r7, #13]
    e29c:	2201      	movs	r2, #1
    e29e:	f362 1305 	bfi	r3, r2, #4, #2
    e2a2:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e2a6:	7b1b      	ldrb	r3, [r3, #12]
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	d001      	beq.n	e2b0 <n25q256a_xip_confirm+0x7c>
    e2ac:	2208      	movs	r2, #8
    e2ae:	e000      	b.n	e2b2 <n25q256a_xip_confirm+0x7e>
    e2b0:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    e2b2:	7bbb      	ldrb	r3, [r7, #14]
    e2b4:	f362 0304 	bfi	r3, r2, #0, #5
    e2b8:	73bb      	strb	r3, [r7, #14]
    e2ba:	230b      	movs	r3, #11
    e2bc:	743b      	strb	r3, [r7, #16]
    e2be:	78fb      	ldrb	r3, [r7, #3]
    e2c0:	2b00      	cmp	r3, #0
    e2c2:	d001      	beq.n	e2c8 <n25q256a_xip_confirm+0x94>
    e2c4:	2300      	movs	r3, #0
    e2c6:	e000      	b.n	e2ca <n25q256a_xip_confirm+0x96>
    e2c8:	23ff      	movs	r3, #255	; 0xff
    e2ca:	747b      	strb	r3, [r7, #17]
    e2cc:	2301      	movs	r3, #1
    e2ce:	61bb      	str	r3, [r7, #24]
    e2d0:	f107 0327 	add.w	r3, r7, #39	; 0x27
    e2d4:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    e2d6:	f107 030c 	add.w	r3, r7, #12
    e2da:	4619      	mov	r1, r3
    e2dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e2de:	4b07      	ldr	r3, [pc, #28]	; (e2fc <n25q256a_xip_confirm+0xc8>)
    e2e0:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    e2e2:	78fb      	ldrb	r3, [r7, #3]
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d001      	beq.n	e2ec <n25q256a_xip_confirm+0xb8>
    e2e8:	2202      	movs	r2, #2
    e2ea:	e000      	b.n	e2ee <n25q256a_xip_confirm+0xba>
    e2ec:	2201      	movs	r2, #1
    e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e2f0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    e2f2:	2300      	movs	r3, #0
}
    e2f4:	4618      	mov	r0, r3
    e2f6:	3730      	adds	r7, #48	; 0x30
    e2f8:	46bd      	mov	sp, r7
    e2fa:	bd80      	pop	{r7, pc}
    e2fc:	000055a5 	.word	0x000055a5

0000e300 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    e300:	b580      	push	{r7, lr}
    e302:	b08c      	sub	sp, #48	; 0x30
    e304:	af00      	add	r7, sp, #0
    e306:	6078      	str	r0, [r7, #4]
    e308:	460b      	mov	r3, r1
    e30a:	70fb      	strb	r3, [r7, #3]
    e30c:	4613      	mov	r3, r2
    e30e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    e310:	2300      	movs	r3, #0
    e312:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    e314:	687b      	ldr	r3, [r7, #4]
    e316:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    e318:	687b      	ldr	r3, [r7, #4]
    e31a:	681b      	ldr	r3, [r3, #0]
    e31c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    e31e:	f107 030c 	add.w	r3, r7, #12
    e322:	2200      	movs	r2, #0
    e324:	601a      	str	r2, [r3, #0]
    e326:	605a      	str	r2, [r3, #4]
    e328:	609a      	str	r2, [r3, #8]
    e32a:	60da      	str	r2, [r3, #12]
    e32c:	611a      	str	r2, [r3, #16]
    e32e:	615a      	str	r2, [r3, #20]
    e330:	78fb      	ldrb	r3, [r7, #3]
    e332:	f003 0307 	and.w	r3, r3, #7
    e336:	b2da      	uxtb	r2, r3
    e338:	7b3b      	ldrb	r3, [r7, #12]
    e33a:	f362 0302 	bfi	r3, r2, #0, #3
    e33e:	733b      	strb	r3, [r7, #12]
    e340:	7b3b      	ldrb	r3, [r7, #12]
    e342:	f043 0310 	orr.w	r3, r3, #16
    e346:	733b      	strb	r3, [r7, #12]
    e348:	7b3b      	ldrb	r3, [r7, #12]
    e34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e34e:	733b      	strb	r3, [r7, #12]
    e350:	78bb      	ldrb	r3, [r7, #2]
    e352:	743b      	strb	r3, [r7, #16]
    e354:	2301      	movs	r3, #1
    e356:	61bb      	str	r3, [r7, #24]
    e358:	f107 0324 	add.w	r3, r7, #36	; 0x24
    e35c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    e35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e360:	7b5b      	ldrb	r3, [r3, #13]
    e362:	2b00      	cmp	r3, #0
    e364:	d003      	beq.n	e36e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    e366:	2100      	movs	r1, #0
    e368:	6878      	ldr	r0, [r7, #4]
    e36a:	4b0a      	ldr	r3, [pc, #40]	; (e394 <n25q256a_read_reg+0x94>)
    e36c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e36e:	f107 030c 	add.w	r3, r7, #12
    e372:	4619      	mov	r1, r3
    e374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e376:	4b08      	ldr	r3, [pc, #32]	; (e398 <n25q256a_read_reg+0x98>)
    e378:	4798      	blx	r3
	if (n25q->xip_mode) {
    e37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e37c:	7b5b      	ldrb	r3, [r3, #13]
    e37e:	2b00      	cmp	r3, #0
    e380:	d003      	beq.n	e38a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    e382:	2101      	movs	r1, #1
    e384:	6878      	ldr	r0, [r7, #4]
    e386:	4b03      	ldr	r3, [pc, #12]	; (e394 <n25q256a_read_reg+0x94>)
    e388:	4798      	blx	r3
	}
	return status;
    e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    e38c:	4618      	mov	r0, r3
    e38e:	3730      	adds	r7, #48	; 0x30
    e390:	46bd      	mov	sp, r7
    e392:	bd80      	pop	{r7, pc}
    e394:	0000e235 	.word	0x0000e235
    e398:	000055a5 	.word	0x000055a5

0000e39c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    e39c:	b580      	push	{r7, lr}
    e39e:	b08c      	sub	sp, #48	; 0x30
    e3a0:	af00      	add	r7, sp, #0
    e3a2:	60f8      	str	r0, [r7, #12]
    e3a4:	607b      	str	r3, [r7, #4]
    e3a6:	460b      	mov	r3, r1
    e3a8:	72fb      	strb	r3, [r7, #11]
    e3aa:	4613      	mov	r3, r2
    e3ac:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e3ae:	68fb      	ldr	r3, [r7, #12]
    e3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e3b2:	68fb      	ldr	r3, [r7, #12]
    e3b4:	681b      	ldr	r3, [r3, #0]
    e3b6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    e3b8:	f107 0310 	add.w	r3, r7, #16
    e3bc:	2200      	movs	r2, #0
    e3be:	601a      	str	r2, [r3, #0]
    e3c0:	605a      	str	r2, [r3, #4]
    e3c2:	609a      	str	r2, [r3, #8]
    e3c4:	60da      	str	r2, [r3, #12]
    e3c6:	611a      	str	r2, [r3, #16]
    e3c8:	615a      	str	r2, [r3, #20]
    e3ca:	7afb      	ldrb	r3, [r7, #11]
    e3cc:	f003 0307 	and.w	r3, r3, #7
    e3d0:	b2da      	uxtb	r2, r3
    e3d2:	7c3b      	ldrb	r3, [r7, #16]
    e3d4:	f362 0302 	bfi	r3, r2, #0, #3
    e3d8:	743b      	strb	r3, [r7, #16]
    e3da:	7c3b      	ldrb	r3, [r7, #16]
    e3dc:	f043 0310 	orr.w	r3, r3, #16
    e3e0:	743b      	strb	r3, [r7, #16]
    e3e2:	7c3b      	ldrb	r3, [r7, #16]
    e3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e3e8:	743b      	strb	r3, [r7, #16]
    e3ea:	7c7b      	ldrb	r3, [r7, #17]
    e3ec:	2202      	movs	r2, #2
    e3ee:	f362 1305 	bfi	r3, r2, #4, #2
    e3f2:	747b      	strb	r3, [r7, #17]
    e3f4:	7abb      	ldrb	r3, [r7, #10]
    e3f6:	753b      	strb	r3, [r7, #20]
    e3f8:	2301      	movs	r3, #1
    e3fa:	61fb      	str	r3, [r7, #28]
    e3fc:	1d3b      	adds	r3, r7, #4
    e3fe:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e402:	7b5b      	ldrb	r3, [r3, #13]
    e404:	2b00      	cmp	r3, #0
    e406:	d003      	beq.n	e410 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    e408:	2100      	movs	r1, #0
    e40a:	68f8      	ldr	r0, [r7, #12]
    e40c:	4b09      	ldr	r3, [pc, #36]	; (e434 <n25q256a_write_reg+0x98>)
    e40e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    e410:	f107 0310 	add.w	r3, r7, #16
    e414:	4619      	mov	r1, r3
    e416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e418:	4b07      	ldr	r3, [pc, #28]	; (e438 <n25q256a_write_reg+0x9c>)
    e41a:	4798      	blx	r3
	if (n25q->xip_mode) {
    e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e41e:	7b5b      	ldrb	r3, [r3, #13]
    e420:	2b00      	cmp	r3, #0
    e422:	d003      	beq.n	e42c <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    e424:	2101      	movs	r1, #1
    e426:	68f8      	ldr	r0, [r7, #12]
    e428:	4b02      	ldr	r3, [pc, #8]	; (e434 <n25q256a_write_reg+0x98>)
    e42a:	4798      	blx	r3
	}
}
    e42c:	bf00      	nop
    e42e:	3730      	adds	r7, #48	; 0x30
    e430:	46bd      	mov	sp, r7
    e432:	bd80      	pop	{r7, pc}
    e434:	0000e235 	.word	0x0000e235
    e438:	000055a5 	.word	0x000055a5

0000e43c <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    e43c:	b580      	push	{r7, lr}
    e43e:	b090      	sub	sp, #64	; 0x40
    e440:	af00      	add	r7, sp, #0
    e442:	6078      	str	r0, [r7, #4]
    e444:	460b      	mov	r3, r1
    e446:	70fb      	strb	r3, [r7, #3]
    e448:	4613      	mov	r3, r2
    e44a:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e44c:	687b      	ldr	r3, [r7, #4]
    e44e:	681b      	ldr	r3, [r3, #0]
    e450:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    e452:	78bb      	ldrb	r3, [r7, #2]
    e454:	2b00      	cmp	r3, #0
    e456:	d001      	beq.n	e45c <n25q256a_write_enable+0x20>
    e458:	2306      	movs	r3, #6
    e45a:	e000      	b.n	e45e <n25q256a_write_enable+0x22>
    e45c:	2304      	movs	r3, #4
    e45e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    e462:	f107 0320 	add.w	r3, r7, #32
    e466:	2200      	movs	r2, #0
    e468:	601a      	str	r2, [r3, #0]
    e46a:	605a      	str	r2, [r3, #4]
    e46c:	609a      	str	r2, [r3, #8]
    e46e:	60da      	str	r2, [r3, #12]
    e470:	611a      	str	r2, [r3, #16]
    e472:	615a      	str	r2, [r3, #20]
    e474:	78fb      	ldrb	r3, [r7, #3]
    e476:	f003 0307 	and.w	r3, r3, #7
    e47a:	b2da      	uxtb	r2, r3
    e47c:	f897 3020 	ldrb.w	r3, [r7, #32]
    e480:	f362 0302 	bfi	r3, r2, #0, #3
    e484:	f887 3020 	strb.w	r3, [r7, #32]
    e488:	f897 3020 	ldrb.w	r3, [r7, #32]
    e48c:	f043 0310 	orr.w	r3, r3, #16
    e490:	f887 3020 	strb.w	r3, [r7, #32]
    e494:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    e498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    e49c:	f107 0308 	add.w	r3, r7, #8
    e4a0:	2200      	movs	r2, #0
    e4a2:	601a      	str	r2, [r3, #0]
    e4a4:	605a      	str	r2, [r3, #4]
    e4a6:	609a      	str	r2, [r3, #8]
    e4a8:	60da      	str	r2, [r3, #12]
    e4aa:	611a      	str	r2, [r3, #16]
    e4ac:	615a      	str	r2, [r3, #20]
    e4ae:	78fb      	ldrb	r3, [r7, #3]
    e4b0:	f003 0307 	and.w	r3, r3, #7
    e4b4:	b2da      	uxtb	r2, r3
    e4b6:	7a3b      	ldrb	r3, [r7, #8]
    e4b8:	f362 0302 	bfi	r3, r2, #0, #3
    e4bc:	723b      	strb	r3, [r7, #8]
    e4be:	7a3b      	ldrb	r3, [r7, #8]
    e4c0:	f043 0310 	orr.w	r3, r3, #16
    e4c4:	723b      	strb	r3, [r7, #8]
    e4c6:	7a3b      	ldrb	r3, [r7, #8]
    e4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e4cc:	723b      	strb	r3, [r7, #8]
    e4ce:	2305      	movs	r3, #5
    e4d0:	733b      	strb	r3, [r7, #12]
    e4d2:	2301      	movs	r3, #1
    e4d4:	617b      	str	r3, [r7, #20]
    e4d6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    e4da:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    e4dc:	f107 0320 	add.w	r3, r7, #32
    e4e0:	4619      	mov	r1, r3
    e4e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e4e4:	4b08      	ldr	r3, [pc, #32]	; (e508 <n25q256a_write_enable+0xcc>)
    e4e6:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    e4e8:	f107 0308 	add.w	r3, r7, #8
    e4ec:	4619      	mov	r1, r3
    e4ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    e4f0:	4b05      	ldr	r3, [pc, #20]	; (e508 <n25q256a_write_enable+0xcc>)
    e4f2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    e4f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    e4f8:	f003 0302 	and.w	r3, r3, #2
    e4fc:	2b00      	cmp	r3, #0
    e4fe:	d0ed      	beq.n	e4dc <n25q256a_write_enable+0xa0>
}
    e500:	bf00      	nop
    e502:	3740      	adds	r7, #64	; 0x40
    e504:	46bd      	mov	sp, r7
    e506:	bd80      	pop	{r7, pc}
    e508:	000055a5 	.word	0x000055a5

0000e50c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    e50c:	b590      	push	{r4, r7, lr}
    e50e:	b087      	sub	sp, #28
    e510:	af00      	add	r7, sp, #0
    e512:	6078      	str	r0, [r7, #4]
    e514:	460b      	mov	r3, r1
    e516:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    e518:	687b      	ldr	r3, [r7, #4]
    e51a:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e51c:	68fb      	ldr	r3, [r7, #12]
    e51e:	7b1b      	ldrb	r3, [r3, #12]
    e520:	2b00      	cmp	r3, #0
    e522:	d001      	beq.n	e528 <n25q256a_switch_mode+0x1c>
    e524:	2306      	movs	r3, #6
    e526:	e000      	b.n	e52a <n25q256a_switch_mode+0x1e>
    e528:	2300      	movs	r3, #0
    e52a:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e52c:	7afb      	ldrb	r3, [r7, #11]
    e52e:	2265      	movs	r2, #101	; 0x65
    e530:	4619      	mov	r1, r3
    e532:	6878      	ldr	r0, [r7, #4]
    e534:	4b25      	ldr	r3, [pc, #148]	; (e5cc <n25q256a_switch_mode+0xc0>)
    e536:	4798      	blx	r3
    e538:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    e53a:	2300      	movs	r3, #0
    e53c:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    e53e:	68fb      	ldr	r3, [r7, #12]
    e540:	7b1b      	ldrb	r3, [r3, #12]
    e542:	78fa      	ldrb	r2, [r7, #3]
    e544:	429a      	cmp	r2, r3
    e546:	d03d      	beq.n	e5c4 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    e548:	78fb      	ldrb	r3, [r7, #3]
    e54a:	2b00      	cmp	r3, #0
    e54c:	d00b      	beq.n	e566 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    e54e:	697b      	ldr	r3, [r7, #20]
    e550:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e554:	2b00      	cmp	r3, #0
    e556:	d011      	beq.n	e57c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    e558:	697b      	ldr	r3, [r7, #20]
    e55a:	f003 031f 	and.w	r3, r3, #31
    e55e:	617b      	str	r3, [r7, #20]
			modify = 1;
    e560:	2301      	movs	r3, #1
    e562:	74fb      	strb	r3, [r7, #19]
    e564:	e00a      	b.n	e57c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    e566:	697b      	ldr	r3, [r7, #20]
    e568:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e56c:	2b00      	cmp	r3, #0
    e56e:	d105      	bne.n	e57c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    e570:	697b      	ldr	r3, [r7, #20]
    e572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    e576:	617b      	str	r3, [r7, #20]
			modify = 1;
    e578:	2301      	movs	r3, #1
    e57a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    e57c:	7cfb      	ldrb	r3, [r7, #19]
    e57e:	2b00      	cmp	r3, #0
    e580:	d021      	beq.n	e5c6 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    e582:	68fb      	ldr	r3, [r7, #12]
    e584:	78fa      	ldrb	r2, [r7, #3]
    e586:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    e588:	7afb      	ldrb	r3, [r7, #11]
    e58a:	2201      	movs	r2, #1
    e58c:	4619      	mov	r1, r3
    e58e:	6878      	ldr	r0, [r7, #4]
    e590:	4b0f      	ldr	r3, [pc, #60]	; (e5d0 <n25q256a_switch_mode+0xc4>)
    e592:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    e594:	7af9      	ldrb	r1, [r7, #11]
    e596:	697b      	ldr	r3, [r7, #20]
    e598:	2261      	movs	r2, #97	; 0x61
    e59a:	6878      	ldr	r0, [r7, #4]
    e59c:	4c0d      	ldr	r4, [pc, #52]	; (e5d4 <n25q256a_switch_mode+0xc8>)
    e59e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e5a0:	78fb      	ldrb	r3, [r7, #3]
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d001      	beq.n	e5aa <n25q256a_switch_mode+0x9e>
    e5a6:	2306      	movs	r3, #6
    e5a8:	e000      	b.n	e5ac <n25q256a_switch_mode+0xa0>
    e5aa:	2300      	movs	r3, #0
    e5ac:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    e5ae:	7afb      	ldrb	r3, [r7, #11]
    e5b0:	2265      	movs	r2, #101	; 0x65
    e5b2:	4619      	mov	r1, r3
    e5b4:	6878      	ldr	r0, [r7, #4]
    e5b6:	4b05      	ldr	r3, [pc, #20]	; (e5cc <n25q256a_switch_mode+0xc0>)
    e5b8:	4798      	blx	r3
    e5ba:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    e5bc:	68fb      	ldr	r3, [r7, #12]
    e5be:	78fa      	ldrb	r2, [r7, #3]
    e5c0:	731a      	strb	r2, [r3, #12]
    e5c2:	e000      	b.n	e5c6 <n25q256a_switch_mode+0xba>
		return;
    e5c4:	bf00      	nop
	}
}
    e5c6:	371c      	adds	r7, #28
    e5c8:	46bd      	mov	sp, r7
    e5ca:	bd90      	pop	{r4, r7, pc}
    e5cc:	0000e301 	.word	0x0000e301
    e5d0:	0000e43d 	.word	0x0000e43d
    e5d4:	0000e39d 	.word	0x0000e39d

0000e5d8 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    e5d8:	b580      	push	{r7, lr}
    e5da:	b086      	sub	sp, #24
    e5dc:	af00      	add	r7, sp, #0
    e5de:	60f8      	str	r0, [r7, #12]
    e5e0:	60b9      	str	r1, [r7, #8]
    e5e2:	607a      	str	r2, [r7, #4]
    e5e4:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    e5e6:	68fb      	ldr	r3, [r7, #12]
    e5e8:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    e5ea:	4a0c      	ldr	r2, [pc, #48]	; (e61c <n25q256a_construct+0x44>)
    e5ec:	68b9      	ldr	r1, [r7, #8]
    e5ee:	68f8      	ldr	r0, [r7, #12]
    e5f0:	4b0b      	ldr	r3, [pc, #44]	; (e620 <n25q256a_construct+0x48>)
    e5f2:	4798      	blx	r3
	n25q->quad_mode    = 0;
    e5f4:	697b      	ldr	r3, [r7, #20]
    e5f6:	2200      	movs	r2, #0
    e5f8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    e5fa:	697b      	ldr	r3, [r7, #20]
    e5fc:	2200      	movs	r2, #0
    e5fe:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    e600:	697b      	ldr	r3, [r7, #20]
    e602:	687a      	ldr	r2, [r7, #4]
    e604:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    e606:	78fb      	ldrb	r3, [r7, #3]
    e608:	4619      	mov	r1, r3
    e60a:	68f8      	ldr	r0, [r7, #12]
    e60c:	4b05      	ldr	r3, [pc, #20]	; (e624 <n25q256a_construct+0x4c>)
    e60e:	4798      	blx	r3
	return me;
    e610:	68fb      	ldr	r3, [r7, #12]
}
    e612:	4618      	mov	r0, r3
    e614:	3718      	adds	r7, #24
    e616:	46bd      	mov	sp, r7
    e618:	bd80      	pop	{r7, pc}
    e61a:	bf00      	nop
    e61c:	00013dfc 	.word	0x00013dfc
    e620:	0000eab5 	.word	0x0000eab5
    e624:	0000e50d 	.word	0x0000e50d

0000e628 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    e628:	b580      	push	{r7, lr}
    e62a:	b08c      	sub	sp, #48	; 0x30
    e62c:	af00      	add	r7, sp, #0
    e62e:	60f8      	str	r0, [r7, #12]
    e630:	60b9      	str	r1, [r7, #8]
    e632:	607a      	str	r2, [r7, #4]
    e634:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e636:	68fb      	ldr	r3, [r7, #12]
    e638:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e63a:	68fb      	ldr	r3, [r7, #12]
    e63c:	681b      	ldr	r3, [r3, #0]
    e63e:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    e640:	f107 0310 	add.w	r3, r7, #16
    e644:	2200      	movs	r2, #0
    e646:	601a      	str	r2, [r3, #0]
    e648:	605a      	str	r2, [r3, #4]
    e64a:	609a      	str	r2, [r3, #8]
    e64c:	60da      	str	r2, [r3, #12]
    e64e:	611a      	str	r2, [r3, #16]
    e650:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e654:	7b1b      	ldrb	r3, [r3, #12]
    e656:	2b00      	cmp	r3, #0
    e658:	d001      	beq.n	e65e <n25q256a_read+0x36>
    e65a:	2206      	movs	r2, #6
    e65c:	e000      	b.n	e660 <n25q256a_read+0x38>
    e65e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    e660:	7c3b      	ldrb	r3, [r7, #16]
    e662:	f362 0302 	bfi	r3, r2, #0, #3
    e666:	743b      	strb	r3, [r7, #16]
    e668:	7c3b      	ldrb	r3, [r7, #16]
    e66a:	f043 0310 	orr.w	r3, r3, #16
    e66e:	743b      	strb	r3, [r7, #16]
    e670:	7c3b      	ldrb	r3, [r7, #16]
    e672:	f043 0320 	orr.w	r3, r3, #32
    e676:	743b      	strb	r3, [r7, #16]
    e678:	7c3b      	ldrb	r3, [r7, #16]
    e67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e67e:	743b      	strb	r3, [r7, #16]
    e680:	7c7b      	ldrb	r3, [r7, #17]
    e682:	2201      	movs	r2, #1
    e684:	f362 1305 	bfi	r3, r2, #4, #2
    e688:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e68c:	7b1b      	ldrb	r3, [r3, #12]
    e68e:	2b00      	cmp	r3, #0
    e690:	d001      	beq.n	e696 <n25q256a_read+0x6e>
    e692:	220a      	movs	r2, #10
    e694:	e000      	b.n	e698 <n25q256a_read+0x70>
    e696:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    e698:	7cbb      	ldrb	r3, [r7, #18]
    e69a:	f362 0304 	bfi	r3, r2, #0, #5
    e69e:	74bb      	strb	r3, [r7, #18]
    e6a0:	230b      	movs	r3, #11
    e6a2:	753b      	strb	r3, [r7, #20]
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	61bb      	str	r3, [r7, #24]
    e6a8:	683b      	ldr	r3, [r7, #0]
    e6aa:	61fb      	str	r3, [r7, #28]
    e6ac:	68bb      	ldr	r3, [r7, #8]
    e6ae:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    e6b0:	f107 0310 	add.w	r3, r7, #16
    e6b4:	4619      	mov	r1, r3
    e6b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e6b8:	4b03      	ldr	r3, [pc, #12]	; (e6c8 <n25q256a_read+0xa0>)
    e6ba:	4798      	blx	r3
	return ERR_NONE;
    e6bc:	2300      	movs	r3, #0
}
    e6be:	4618      	mov	r0, r3
    e6c0:	3730      	adds	r7, #48	; 0x30
    e6c2:	46bd      	mov	sp, r7
    e6c4:	bd80      	pop	{r7, pc}
    e6c6:	bf00      	nop
    e6c8:	000055a5 	.word	0x000055a5

0000e6cc <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    e6cc:	b580      	push	{r7, lr}
    e6ce:	b08c      	sub	sp, #48	; 0x30
    e6d0:	af00      	add	r7, sp, #0
    e6d2:	60f8      	str	r0, [r7, #12]
    e6d4:	60b9      	str	r1, [r7, #8]
    e6d6:	607a      	str	r2, [r7, #4]
    e6d8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e6da:	68fb      	ldr	r3, [r7, #12]
    e6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e6de:	68fb      	ldr	r3, [r7, #12]
    e6e0:	681b      	ldr	r3, [r3, #0]
    e6e2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    e6e4:	f107 0310 	add.w	r3, r7, #16
    e6e8:	2200      	movs	r2, #0
    e6ea:	601a      	str	r2, [r3, #0]
    e6ec:	605a      	str	r2, [r3, #4]
    e6ee:	609a      	str	r2, [r3, #8]
    e6f0:	60da      	str	r2, [r3, #12]
    e6f2:	611a      	str	r2, [r3, #16]
    e6f4:	615a      	str	r2, [r3, #20]
    e6f6:	7c3b      	ldrb	r3, [r7, #16]
    e6f8:	f043 0310 	orr.w	r3, r3, #16
    e6fc:	743b      	strb	r3, [r7, #16]
    e6fe:	7c3b      	ldrb	r3, [r7, #16]
    e700:	f043 0320 	orr.w	r3, r3, #32
    e704:	743b      	strb	r3, [r7, #16]
    e706:	7c3b      	ldrb	r3, [r7, #16]
    e708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e70c:	743b      	strb	r3, [r7, #16]
    e70e:	7c7b      	ldrb	r3, [r7, #17]
    e710:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    e714:	747b      	strb	r3, [r7, #17]
    e716:	2302      	movs	r3, #2
    e718:	753b      	strb	r3, [r7, #20]
    e71a:	687b      	ldr	r3, [r7, #4]
    e71c:	61bb      	str	r3, [r7, #24]
    e71e:	683b      	ldr	r3, [r7, #0]
    e720:	61fb      	str	r3, [r7, #28]
    e722:	68bb      	ldr	r3, [r7, #8]
    e724:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e728:	7b1b      	ldrb	r3, [r3, #12]
    e72a:	2b00      	cmp	r3, #0
    e72c:	d001      	beq.n	e732 <n25q256a_write+0x66>
    e72e:	2206      	movs	r2, #6
    e730:	e000      	b.n	e734 <n25q256a_write+0x68>
    e732:	2200      	movs	r2, #0
    e734:	7c3b      	ldrb	r3, [r7, #16]
    e736:	f362 0302 	bfi	r3, r2, #0, #3
    e73a:	743b      	strb	r3, [r7, #16]
	while (length) {
    e73c:	e035      	b.n	e7aa <n25q256a_write+0xde>
		cmd.address = address;
    e73e:	687b      	ldr	r3, [r7, #4]
    e740:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    e742:	683b      	ldr	r3, [r7, #0]
    e744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e748:	d802      	bhi.n	e750 <n25q256a_write+0x84>
			cmd.buf_len = length;
    e74a:	683b      	ldr	r3, [r7, #0]
    e74c:	61fb      	str	r3, [r7, #28]
    e74e:	e002      	b.n	e756 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    e750:	f44f 7380 	mov.w	r3, #256	; 0x100
    e754:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    e756:	7c3b      	ldrb	r3, [r7, #16]
    e758:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e75c:	b2db      	uxtb	r3, r3
    e75e:	2201      	movs	r2, #1
    e760:	4619      	mov	r1, r3
    e762:	68f8      	ldr	r0, [r7, #12]
    e764:	4b19      	ldr	r3, [pc, #100]	; (e7cc <n25q256a_write+0x100>)
    e766:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    e768:	f107 0310 	add.w	r3, r7, #16
    e76c:	4619      	mov	r1, r3
    e76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e770:	4b17      	ldr	r3, [pc, #92]	; (e7d0 <n25q256a_write+0x104>)
    e772:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    e774:	bf00      	nop
    e776:	7c3b      	ldrb	r3, [r7, #16]
    e778:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e77c:	b2db      	uxtb	r3, r3
    e77e:	2270      	movs	r2, #112	; 0x70
    e780:	4619      	mov	r1, r3
    e782:	68f8      	ldr	r0, [r7, #12]
    e784:	4b13      	ldr	r3, [pc, #76]	; (e7d4 <n25q256a_write+0x108>)
    e786:	4798      	blx	r3
    e788:	4603      	mov	r3, r0
    e78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e78e:	2b00      	cmp	r3, #0
    e790:	d0f1      	beq.n	e776 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    e792:	6a3a      	ldr	r2, [r7, #32]
    e794:	69fb      	ldr	r3, [r7, #28]
    e796:	4413      	add	r3, r2
    e798:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    e79a:	69fb      	ldr	r3, [r7, #28]
    e79c:	683a      	ldr	r2, [r7, #0]
    e79e:	1ad3      	subs	r3, r2, r3
    e7a0:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    e7a2:	69fb      	ldr	r3, [r7, #28]
    e7a4:	687a      	ldr	r2, [r7, #4]
    e7a6:	4413      	add	r3, r2
    e7a8:	607b      	str	r3, [r7, #4]
	while (length) {
    e7aa:	683b      	ldr	r3, [r7, #0]
    e7ac:	2b00      	cmp	r3, #0
    e7ae:	d1c6      	bne.n	e73e <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e7b2:	7b5b      	ldrb	r3, [r3, #13]
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d003      	beq.n	e7c0 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    e7b8:	2101      	movs	r1, #1
    e7ba:	68f8      	ldr	r0, [r7, #12]
    e7bc:	4b06      	ldr	r3, [pc, #24]	; (e7d8 <n25q256a_write+0x10c>)
    e7be:	4798      	blx	r3
	}
	return ERR_NONE;
    e7c0:	2300      	movs	r3, #0
}
    e7c2:	4618      	mov	r0, r3
    e7c4:	3730      	adds	r7, #48	; 0x30
    e7c6:	46bd      	mov	sp, r7
    e7c8:	bd80      	pop	{r7, pc}
    e7ca:	bf00      	nop
    e7cc:	0000e43d 	.word	0x0000e43d
    e7d0:	000055a5 	.word	0x000055a5
    e7d4:	0000e301 	.word	0x0000e301
    e7d8:	0000e235 	.word	0x0000e235

0000e7dc <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    e7dc:	b580      	push	{r7, lr}
    e7de:	b090      	sub	sp, #64	; 0x40
    e7e0:	af00      	add	r7, sp, #0
    e7e2:	60f8      	str	r0, [r7, #12]
    e7e4:	60b9      	str	r1, [r7, #8]
    e7e6:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    e7e8:	68fb      	ldr	r3, [r7, #12]
    e7ea:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    e7ec:	68fb      	ldr	r3, [r7, #12]
    e7ee:	681b      	ldr	r3, [r3, #0]
    e7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    e7f2:	f107 0314 	add.w	r3, r7, #20
    e7f6:	2200      	movs	r2, #0
    e7f8:	601a      	str	r2, [r3, #0]
    e7fa:	605a      	str	r2, [r3, #4]
    e7fc:	609a      	str	r2, [r3, #8]
    e7fe:	60da      	str	r2, [r3, #12]
    e800:	611a      	str	r2, [r3, #16]
    e802:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    e804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e806:	7b1b      	ldrb	r3, [r3, #12]
    e808:	2b00      	cmp	r3, #0
    e80a:	d001      	beq.n	e810 <n25q256a_erase+0x34>
    e80c:	2206      	movs	r2, #6
    e80e:	e000      	b.n	e812 <n25q256a_erase+0x36>
    e810:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    e812:	7d3b      	ldrb	r3, [r7, #20]
    e814:	f362 0302 	bfi	r3, r2, #0, #3
    e818:	753b      	strb	r3, [r7, #20]
    e81a:	7d3b      	ldrb	r3, [r7, #20]
    e81c:	f043 0310 	orr.w	r3, r3, #16
    e820:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    e822:	687b      	ldr	r3, [r7, #4]
    e824:	4a56      	ldr	r2, [pc, #344]	; (e980 <n25q256a_erase+0x1a4>)
    e826:	4293      	cmp	r3, r2
    e828:	bf94      	ite	ls
    e82a:	2301      	movls	r3, #1
    e82c:	2300      	movhi	r3, #0
    e82e:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    e830:	7d3b      	ldrb	r3, [r7, #20]
    e832:	f362 1345 	bfi	r3, r2, #5, #1
    e836:	753b      	strb	r3, [r7, #20]
    e838:	7d7b      	ldrb	r3, [r7, #21]
    e83a:	2202      	movs	r2, #2
    e83c:	f362 1305 	bfi	r3, r2, #4, #2
    e840:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    e842:	68bb      	ldr	r3, [r7, #8]
    e844:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    e846:	687b      	ldr	r3, [r7, #4]
    e848:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    e84a:	2300      	movs	r3, #0
    e84c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    e84e:	687b      	ldr	r3, [r7, #4]
    e850:	f3c3 030b 	ubfx	r3, r3, #0, #12
    e854:	2b00      	cmp	r3, #0
    e856:	d104      	bne.n	e862 <n25q256a_erase+0x86>
    e858:	68bb      	ldr	r3, [r7, #8]
    e85a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    e85e:	2b00      	cmp	r3, #0
    e860:	d002      	beq.n	e868 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    e862:	f06f 030c 	mvn.w	r3, #12
    e866:	e087      	b.n	e978 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    e868:	687b      	ldr	r3, [r7, #4]
    e86a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    e86e:	d368      	bcc.n	e942 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    e870:	23c7      	movs	r3, #199	; 0xc7
    e872:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    e874:	7d3b      	ldrb	r3, [r7, #20]
    e876:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e87a:	b2db      	uxtb	r3, r3
    e87c:	2201      	movs	r2, #1
    e87e:	4619      	mov	r1, r3
    e880:	68f8      	ldr	r0, [r7, #12]
    e882:	4b40      	ldr	r3, [pc, #256]	; (e984 <n25q256a_erase+0x1a8>)
    e884:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    e886:	f107 0314 	add.w	r3, r7, #20
    e88a:	4619      	mov	r1, r3
    e88c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e88e:	4b3e      	ldr	r3, [pc, #248]	; (e988 <n25q256a_erase+0x1ac>)
    e890:	4798      	blx	r3
    e892:	e059      	b.n	e948 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    e894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e896:	b29b      	uxth	r3, r3
    e898:	2b00      	cmp	r3, #0
    e89a:	d11f      	bne.n	e8dc <n25q256a_erase+0x100>
    e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e89e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e8a2:	d31b      	bcc.n	e8dc <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    e8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e8a6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    e8a8:	23d8      	movs	r3, #216	; 0xd8
    e8aa:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    e8ac:	7d3b      	ldrb	r3, [r7, #20]
    e8ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e8b2:	b2db      	uxtb	r3, r3
    e8b4:	2201      	movs	r2, #1
    e8b6:	4619      	mov	r1, r3
    e8b8:	68f8      	ldr	r0, [r7, #12]
    e8ba:	4b32      	ldr	r3, [pc, #200]	; (e984 <n25q256a_erase+0x1a8>)
    e8bc:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    e8be:	f107 0314 	add.w	r3, r7, #20
    e8c2:	4619      	mov	r1, r3
    e8c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e8c6:	4b30      	ldr	r3, [pc, #192]	; (e988 <n25q256a_erase+0x1ac>)
    e8c8:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    e8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e8cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e8d4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    e8d8:	63bb      	str	r3, [r7, #56]	; 0x38
    e8da:	e023      	b.n	e924 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    e8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e8e2:	d31b      	bcc.n	e91c <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e8e6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    e8e8:	2320      	movs	r3, #32
    e8ea:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    e8ec:	7d3b      	ldrb	r3, [r7, #20]
    e8ee:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e8f2:	b2db      	uxtb	r3, r3
    e8f4:	2201      	movs	r2, #1
    e8f6:	4619      	mov	r1, r3
    e8f8:	68f8      	ldr	r0, [r7, #12]
    e8fa:	4b22      	ldr	r3, [pc, #136]	; (e984 <n25q256a_erase+0x1a8>)
    e8fc:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    e8fe:	f107 0314 	add.w	r3, r7, #20
    e902:	4619      	mov	r1, r3
    e904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e906:	4b20      	ldr	r3, [pc, #128]	; (e988 <n25q256a_erase+0x1ac>)
    e908:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    e90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e90c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e910:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e914:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e918:	63bb      	str	r3, [r7, #56]	; 0x38
    e91a:	e003      	b.n	e924 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    e91c:	f06f 030c 	mvn.w	r3, #12
    e920:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    e922:	e011      	b.n	e948 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    e924:	bf00      	nop
    e926:	7d3b      	ldrb	r3, [r7, #20]
    e928:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e92c:	b2db      	uxtb	r3, r3
    e92e:	2270      	movs	r2, #112	; 0x70
    e930:	4619      	mov	r1, r3
    e932:	68f8      	ldr	r0, [r7, #12]
    e934:	4b15      	ldr	r3, [pc, #84]	; (e98c <n25q256a_erase+0x1b0>)
    e936:	4798      	blx	r3
    e938:	4603      	mov	r3, r0
    e93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e93e:	2b00      	cmp	r3, #0
    e940:	d0f1      	beq.n	e926 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    e942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e944:	2b00      	cmp	r3, #0
    e946:	d1a5      	bne.n	e894 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    e948:	bf00      	nop
    e94a:	7d3b      	ldrb	r3, [r7, #20]
    e94c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e950:	b2db      	uxtb	r3, r3
    e952:	2270      	movs	r2, #112	; 0x70
    e954:	4619      	mov	r1, r3
    e956:	68f8      	ldr	r0, [r7, #12]
    e958:	4b0c      	ldr	r3, [pc, #48]	; (e98c <n25q256a_erase+0x1b0>)
    e95a:	4798      	blx	r3
    e95c:	4603      	mov	r3, r0
    e95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e962:	2b00      	cmp	r3, #0
    e964:	d0f1      	beq.n	e94a <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e968:	7b5b      	ldrb	r3, [r3, #13]
    e96a:	2b00      	cmp	r3, #0
    e96c:	d003      	beq.n	e976 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    e96e:	2101      	movs	r1, #1
    e970:	68f8      	ldr	r0, [r7, #12]
    e972:	4b07      	ldr	r3, [pc, #28]	; (e990 <n25q256a_erase+0x1b4>)
    e974:	4798      	blx	r3
	}
	return rc;
    e976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    e978:	4618      	mov	r0, r3
    e97a:	3740      	adds	r7, #64	; 0x40
    e97c:	46bd      	mov	sp, r7
    e97e:	bd80      	pop	{r7, pc}
    e980:	001fffff 	.word	0x001fffff
    e984:	0000e43d 	.word	0x0000e43d
    e988:	000055a5 	.word	0x000055a5
    e98c:	0000e301 	.word	0x0000e301
    e990:	0000e235 	.word	0x0000e235

0000e994 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    e994:	b590      	push	{r4, r7, lr}
    e996:	b085      	sub	sp, #20
    e998:	af00      	add	r7, sp, #0
    e99a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    e99c:	687b      	ldr	r3, [r7, #4]
    e99e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    e9a0:	68fb      	ldr	r3, [r7, #12]
    e9a2:	7b1b      	ldrb	r3, [r3, #12]
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	d001      	beq.n	e9ac <n25q256a_enable_xip+0x18>
    e9a8:	2306      	movs	r3, #6
    e9aa:	e000      	b.n	e9ae <n25q256a_enable_xip+0x1a>
    e9ac:	2300      	movs	r3, #0
    e9ae:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    e9b0:	68fb      	ldr	r3, [r7, #12]
    e9b2:	7b5b      	ldrb	r3, [r3, #13]
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d129      	bne.n	ea0c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    e9b8:	7afb      	ldrb	r3, [r7, #11]
    e9ba:	2285      	movs	r2, #133	; 0x85
    e9bc:	4619      	mov	r1, r3
    e9be:	6878      	ldr	r0, [r7, #4]
    e9c0:	4b15      	ldr	r3, [pc, #84]	; (ea18 <n25q256a_enable_xip+0x84>)
    e9c2:	4798      	blx	r3
    e9c4:	4603      	mov	r3, r0
    e9c6:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    e9c8:	7abb      	ldrb	r3, [r7, #10]
    e9ca:	f003 0308 	and.w	r3, r3, #8
    e9ce:	2b00      	cmp	r3, #0
    e9d0:	d015      	beq.n	e9fe <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    e9d2:	7abb      	ldrb	r3, [r7, #10]
    e9d4:	f023 0308 	bic.w	r3, r3, #8
    e9d8:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    e9da:	7abb      	ldrb	r3, [r7, #10]
    e9dc:	7af9      	ldrb	r1, [r7, #11]
    e9de:	2281      	movs	r2, #129	; 0x81
    e9e0:	6878      	ldr	r0, [r7, #4]
    e9e2:	4c0e      	ldr	r4, [pc, #56]	; (ea1c <n25q256a_enable_xip+0x88>)
    e9e4:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    e9e6:	bf00      	nop
    e9e8:	7afb      	ldrb	r3, [r7, #11]
    e9ea:	2270      	movs	r2, #112	; 0x70
    e9ec:	4619      	mov	r1, r3
    e9ee:	6878      	ldr	r0, [r7, #4]
    e9f0:	4b09      	ldr	r3, [pc, #36]	; (ea18 <n25q256a_enable_xip+0x84>)
    e9f2:	4798      	blx	r3
    e9f4:	4603      	mov	r3, r0
    e9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d0f4      	beq.n	e9e8 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    e9fe:	68fb      	ldr	r3, [r7, #12]
    ea00:	2201      	movs	r2, #1
    ea02:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    ea04:	2101      	movs	r1, #1
    ea06:	6878      	ldr	r0, [r7, #4]
    ea08:	4b05      	ldr	r3, [pc, #20]	; (ea20 <n25q256a_enable_xip+0x8c>)
    ea0a:	4798      	blx	r3
	}
	return ERR_NONE;
    ea0c:	2300      	movs	r3, #0
}
    ea0e:	4618      	mov	r0, r3
    ea10:	3714      	adds	r7, #20
    ea12:	46bd      	mov	sp, r7
    ea14:	bd90      	pop	{r4, r7, pc}
    ea16:	bf00      	nop
    ea18:	0000e301 	.word	0x0000e301
    ea1c:	0000e39d 	.word	0x0000e39d
    ea20:	0000e235 	.word	0x0000e235

0000ea24 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    ea24:	b580      	push	{r7, lr}
    ea26:	b086      	sub	sp, #24
    ea28:	af00      	add	r7, sp, #0
    ea2a:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ea2c:	687b      	ldr	r3, [r7, #4]
    ea2e:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ea30:	687b      	ldr	r3, [r7, #4]
    ea32:	681b      	ldr	r3, [r3, #0]
    ea34:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ea36:	697b      	ldr	r3, [r7, #20]
    ea38:	7b1b      	ldrb	r3, [r3, #12]
    ea3a:	2b00      	cmp	r3, #0
    ea3c:	d001      	beq.n	ea42 <n25q256a_disable_xip+0x1e>
    ea3e:	2306      	movs	r3, #6
    ea40:	e000      	b.n	ea44 <n25q256a_disable_xip+0x20>
    ea42:	2300      	movs	r3, #0
    ea44:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    ea46:	2100      	movs	r1, #0
    ea48:	6878      	ldr	r0, [r7, #4]
    ea4a:	4b15      	ldr	r3, [pc, #84]	; (eaa0 <n25q256a_disable_xip+0x7c>)
    ea4c:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ea4e:	7bfb      	ldrb	r3, [r7, #15]
    ea50:	2285      	movs	r2, #133	; 0x85
    ea52:	4619      	mov	r1, r3
    ea54:	6878      	ldr	r0, [r7, #4]
    ea56:	4b13      	ldr	r3, [pc, #76]	; (eaa4 <n25q256a_disable_xip+0x80>)
    ea58:	4798      	blx	r3
    ea5a:	4603      	mov	r3, r0
    ea5c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    ea5e:	7bbb      	ldrb	r3, [r7, #14]
    ea60:	f003 0308 	and.w	r3, r3, #8
    ea64:	2b00      	cmp	r3, #0
    ea66:	d113      	bne.n	ea90 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    ea68:	697b      	ldr	r3, [r7, #20]
    ea6a:	689b      	ldr	r3, [r3, #8]
    ea6c:	2b00      	cmp	r3, #0
    ea6e:	d00f      	beq.n	ea90 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    ea70:	693b      	ldr	r3, [r7, #16]
    ea72:	681b      	ldr	r3, [r3, #0]
    ea74:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    ea76:	6938      	ldr	r0, [r7, #16]
    ea78:	4b0b      	ldr	r3, [pc, #44]	; (eaa8 <n25q256a_disable_xip+0x84>)
    ea7a:	4798      	blx	r3
			n25q->pin_exit_xip();
    ea7c:	697b      	ldr	r3, [r7, #20]
    ea7e:	689b      	ldr	r3, [r3, #8]
    ea80:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    ea82:	68b9      	ldr	r1, [r7, #8]
    ea84:	6938      	ldr	r0, [r7, #16]
    ea86:	4b09      	ldr	r3, [pc, #36]	; (eaac <n25q256a_disable_xip+0x88>)
    ea88:	4798      	blx	r3
			qspi_sync_enable(descr);
    ea8a:	6938      	ldr	r0, [r7, #16]
    ea8c:	4b08      	ldr	r3, [pc, #32]	; (eab0 <n25q256a_disable_xip+0x8c>)
    ea8e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    ea90:	697b      	ldr	r3, [r7, #20]
    ea92:	2200      	movs	r2, #0
    ea94:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ea96:	2300      	movs	r3, #0
}
    ea98:	4618      	mov	r0, r3
    ea9a:	3718      	adds	r7, #24
    ea9c:	46bd      	mov	sp, r7
    ea9e:	bd80      	pop	{r7, pc}
    eaa0:	0000e235 	.word	0x0000e235
    eaa4:	0000e301 	.word	0x0000e301
    eaa8:	00005569 	.word	0x00005569
    eaac:	000054e1 	.word	0x000054e1
    eab0:	0000552d 	.word	0x0000552d

0000eab4 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    eab4:	b480      	push	{r7}
    eab6:	b085      	sub	sp, #20
    eab8:	af00      	add	r7, sp, #0
    eaba:	60f8      	str	r0, [r7, #12]
    eabc:	60b9      	str	r1, [r7, #8]
    eabe:	607a      	str	r2, [r7, #4]
	me->io        = io;
    eac0:	68fb      	ldr	r3, [r7, #12]
    eac2:	68ba      	ldr	r2, [r7, #8]
    eac4:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    eac6:	68fb      	ldr	r3, [r7, #12]
    eac8:	687a      	ldr	r2, [r7, #4]
    eaca:	605a      	str	r2, [r3, #4]

	return me;
    eacc:	68fb      	ldr	r3, [r7, #12]
}
    eace:	4618      	mov	r0, r3
    ead0:	3714      	adds	r7, #20
    ead2:	46bd      	mov	sp, r7
    ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ead8:	4770      	bx	lr

0000eada <hri_port_set_DIR_reg>:
{
    eada:	b480      	push	{r7}
    eadc:	b085      	sub	sp, #20
    eade:	af00      	add	r7, sp, #0
    eae0:	60f8      	str	r0, [r7, #12]
    eae2:	460b      	mov	r3, r1
    eae4:	607a      	str	r2, [r7, #4]
    eae6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    eae8:	7afb      	ldrb	r3, [r7, #11]
    eaea:	68fa      	ldr	r2, [r7, #12]
    eaec:	01db      	lsls	r3, r3, #7
    eaee:	4413      	add	r3, r2
    eaf0:	3308      	adds	r3, #8
    eaf2:	687a      	ldr	r2, [r7, #4]
    eaf4:	601a      	str	r2, [r3, #0]
}
    eaf6:	bf00      	nop
    eaf8:	3714      	adds	r7, #20
    eafa:	46bd      	mov	sp, r7
    eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb00:	4770      	bx	lr

0000eb02 <hri_port_clear_DIR_reg>:
{
    eb02:	b480      	push	{r7}
    eb04:	b085      	sub	sp, #20
    eb06:	af00      	add	r7, sp, #0
    eb08:	60f8      	str	r0, [r7, #12]
    eb0a:	460b      	mov	r3, r1
    eb0c:	607a      	str	r2, [r7, #4]
    eb0e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    eb10:	7afb      	ldrb	r3, [r7, #11]
    eb12:	68fa      	ldr	r2, [r7, #12]
    eb14:	01db      	lsls	r3, r3, #7
    eb16:	4413      	add	r3, r2
    eb18:	3304      	adds	r3, #4
    eb1a:	687a      	ldr	r2, [r7, #4]
    eb1c:	601a      	str	r2, [r3, #0]
}
    eb1e:	bf00      	nop
    eb20:	3714      	adds	r7, #20
    eb22:	46bd      	mov	sp, r7
    eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb28:	4770      	bx	lr

0000eb2a <hri_port_set_OUT_reg>:
{
    eb2a:	b480      	push	{r7}
    eb2c:	b085      	sub	sp, #20
    eb2e:	af00      	add	r7, sp, #0
    eb30:	60f8      	str	r0, [r7, #12]
    eb32:	460b      	mov	r3, r1
    eb34:	607a      	str	r2, [r7, #4]
    eb36:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    eb38:	7afb      	ldrb	r3, [r7, #11]
    eb3a:	68fa      	ldr	r2, [r7, #12]
    eb3c:	01db      	lsls	r3, r3, #7
    eb3e:	4413      	add	r3, r2
    eb40:	3318      	adds	r3, #24
    eb42:	687a      	ldr	r2, [r7, #4]
    eb44:	601a      	str	r2, [r3, #0]
}
    eb46:	bf00      	nop
    eb48:	3714      	adds	r7, #20
    eb4a:	46bd      	mov	sp, r7
    eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb50:	4770      	bx	lr

0000eb52 <hri_port_clear_OUT_reg>:
{
    eb52:	b480      	push	{r7}
    eb54:	b085      	sub	sp, #20
    eb56:	af00      	add	r7, sp, #0
    eb58:	60f8      	str	r0, [r7, #12]
    eb5a:	460b      	mov	r3, r1
    eb5c:	607a      	str	r2, [r7, #4]
    eb5e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    eb60:	7afb      	ldrb	r3, [r7, #11]
    eb62:	68fa      	ldr	r2, [r7, #12]
    eb64:	01db      	lsls	r3, r3, #7
    eb66:	4413      	add	r3, r2
    eb68:	3314      	adds	r3, #20
    eb6a:	687a      	ldr	r2, [r7, #4]
    eb6c:	601a      	str	r2, [r3, #0]
}
    eb6e:	bf00      	nop
    eb70:	3714      	adds	r7, #20
    eb72:	46bd      	mov	sp, r7
    eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb78:	4770      	bx	lr

0000eb7a <hri_port_write_PMUX_PMUXE_bf>:
{
    eb7a:	b480      	push	{r7}
    eb7c:	b085      	sub	sp, #20
    eb7e:	af00      	add	r7, sp, #0
    eb80:	6078      	str	r0, [r7, #4]
    eb82:	4608      	mov	r0, r1
    eb84:	4611      	mov	r1, r2
    eb86:	461a      	mov	r2, r3
    eb88:	4603      	mov	r3, r0
    eb8a:	70fb      	strb	r3, [r7, #3]
    eb8c:	460b      	mov	r3, r1
    eb8e:	70bb      	strb	r3, [r7, #2]
    eb90:	4613      	mov	r3, r2
    eb92:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    eb94:	78fa      	ldrb	r2, [r7, #3]
    eb96:	78bb      	ldrb	r3, [r7, #2]
    eb98:	6879      	ldr	r1, [r7, #4]
    eb9a:	01d2      	lsls	r2, r2, #7
    eb9c:	440a      	add	r2, r1
    eb9e:	4413      	add	r3, r2
    eba0:	3330      	adds	r3, #48	; 0x30
    eba2:	781b      	ldrb	r3, [r3, #0]
    eba4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    eba6:	7bfb      	ldrb	r3, [r7, #15]
    eba8:	f023 030f 	bic.w	r3, r3, #15
    ebac:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ebae:	787b      	ldrb	r3, [r7, #1]
    ebb0:	f003 030f 	and.w	r3, r3, #15
    ebb4:	b2da      	uxtb	r2, r3
    ebb6:	7bfb      	ldrb	r3, [r7, #15]
    ebb8:	4313      	orrs	r3, r2
    ebba:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ebbc:	78fa      	ldrb	r2, [r7, #3]
    ebbe:	78bb      	ldrb	r3, [r7, #2]
    ebc0:	6879      	ldr	r1, [r7, #4]
    ebc2:	01d2      	lsls	r2, r2, #7
    ebc4:	440a      	add	r2, r1
    ebc6:	4413      	add	r3, r2
    ebc8:	3330      	adds	r3, #48	; 0x30
    ebca:	7bfa      	ldrb	r2, [r7, #15]
    ebcc:	701a      	strb	r2, [r3, #0]
}
    ebce:	bf00      	nop
    ebd0:	3714      	adds	r7, #20
    ebd2:	46bd      	mov	sp, r7
    ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ebd8:	4770      	bx	lr

0000ebda <hri_port_write_PMUX_PMUXO_bf>:
{
    ebda:	b480      	push	{r7}
    ebdc:	b085      	sub	sp, #20
    ebde:	af00      	add	r7, sp, #0
    ebe0:	6078      	str	r0, [r7, #4]
    ebe2:	4608      	mov	r0, r1
    ebe4:	4611      	mov	r1, r2
    ebe6:	461a      	mov	r2, r3
    ebe8:	4603      	mov	r3, r0
    ebea:	70fb      	strb	r3, [r7, #3]
    ebec:	460b      	mov	r3, r1
    ebee:	70bb      	strb	r3, [r7, #2]
    ebf0:	4613      	mov	r3, r2
    ebf2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ebf4:	78fa      	ldrb	r2, [r7, #3]
    ebf6:	78bb      	ldrb	r3, [r7, #2]
    ebf8:	6879      	ldr	r1, [r7, #4]
    ebfa:	01d2      	lsls	r2, r2, #7
    ebfc:	440a      	add	r2, r1
    ebfe:	4413      	add	r3, r2
    ec00:	3330      	adds	r3, #48	; 0x30
    ec02:	781b      	ldrb	r3, [r3, #0]
    ec04:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ec06:	7bfb      	ldrb	r3, [r7, #15]
    ec08:	f003 030f 	and.w	r3, r3, #15
    ec0c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    ec0e:	787b      	ldrb	r3, [r7, #1]
    ec10:	011b      	lsls	r3, r3, #4
    ec12:	b2da      	uxtb	r2, r3
    ec14:	7bfb      	ldrb	r3, [r7, #15]
    ec16:	4313      	orrs	r3, r2
    ec18:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ec1a:	78fa      	ldrb	r2, [r7, #3]
    ec1c:	78bb      	ldrb	r3, [r7, #2]
    ec1e:	6879      	ldr	r1, [r7, #4]
    ec20:	01d2      	lsls	r2, r2, #7
    ec22:	440a      	add	r2, r1
    ec24:	4413      	add	r3, r2
    ec26:	3330      	adds	r3, #48	; 0x30
    ec28:	7bfa      	ldrb	r2, [r7, #15]
    ec2a:	701a      	strb	r2, [r3, #0]
}
    ec2c:	bf00      	nop
    ec2e:	3714      	adds	r7, #20
    ec30:	46bd      	mov	sp, r7
    ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec36:	4770      	bx	lr

0000ec38 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ec38:	b480      	push	{r7}
    ec3a:	b085      	sub	sp, #20
    ec3c:	af00      	add	r7, sp, #0
    ec3e:	6078      	str	r0, [r7, #4]
    ec40:	4608      	mov	r0, r1
    ec42:	4611      	mov	r1, r2
    ec44:	461a      	mov	r2, r3
    ec46:	4603      	mov	r3, r0
    ec48:	70fb      	strb	r3, [r7, #3]
    ec4a:	460b      	mov	r3, r1
    ec4c:	70bb      	strb	r3, [r7, #2]
    ec4e:	4613      	mov	r3, r2
    ec50:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ec52:	78fa      	ldrb	r2, [r7, #3]
    ec54:	78bb      	ldrb	r3, [r7, #2]
    ec56:	6879      	ldr	r1, [r7, #4]
    ec58:	01d2      	lsls	r2, r2, #7
    ec5a:	440a      	add	r2, r1
    ec5c:	4413      	add	r3, r2
    ec5e:	3340      	adds	r3, #64	; 0x40
    ec60:	781b      	ldrb	r3, [r3, #0]
    ec62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ec64:	7bfb      	ldrb	r3, [r7, #15]
    ec66:	f023 0301 	bic.w	r3, r3, #1
    ec6a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ec6c:	787a      	ldrb	r2, [r7, #1]
    ec6e:	7bfb      	ldrb	r3, [r7, #15]
    ec70:	4313      	orrs	r3, r2
    ec72:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ec74:	78fa      	ldrb	r2, [r7, #3]
    ec76:	78bb      	ldrb	r3, [r7, #2]
    ec78:	6879      	ldr	r1, [r7, #4]
    ec7a:	01d2      	lsls	r2, r2, #7
    ec7c:	440a      	add	r2, r1
    ec7e:	4413      	add	r3, r2
    ec80:	3340      	adds	r3, #64	; 0x40
    ec82:	7bfa      	ldrb	r2, [r7, #15]
    ec84:	701a      	strb	r2, [r3, #0]
}
    ec86:	bf00      	nop
    ec88:	3714      	adds	r7, #20
    ec8a:	46bd      	mov	sp, r7
    ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec90:	4770      	bx	lr

0000ec92 <hri_port_write_WRCONFIG_reg>:
{
    ec92:	b480      	push	{r7}
    ec94:	b085      	sub	sp, #20
    ec96:	af00      	add	r7, sp, #0
    ec98:	60f8      	str	r0, [r7, #12]
    ec9a:	460b      	mov	r3, r1
    ec9c:	607a      	str	r2, [r7, #4]
    ec9e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    eca0:	7afb      	ldrb	r3, [r7, #11]
    eca2:	68fa      	ldr	r2, [r7, #12]
    eca4:	01db      	lsls	r3, r3, #7
    eca6:	4413      	add	r3, r2
    eca8:	3328      	adds	r3, #40	; 0x28
    ecaa:	687a      	ldr	r2, [r7, #4]
    ecac:	601a      	str	r2, [r3, #0]
}
    ecae:	bf00      	nop
    ecb0:	3714      	adds	r7, #20
    ecb2:	46bd      	mov	sp, r7
    ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ecb8:	4770      	bx	lr
	...

0000ecbc <_gpio_set_direction>:
{
    ecbc:	b580      	push	{r7, lr}
    ecbe:	b082      	sub	sp, #8
    ecc0:	af00      	add	r7, sp, #0
    ecc2:	4603      	mov	r3, r0
    ecc4:	6039      	str	r1, [r7, #0]
    ecc6:	71fb      	strb	r3, [r7, #7]
    ecc8:	4613      	mov	r3, r2
    ecca:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    eccc:	79bb      	ldrb	r3, [r7, #6]
    ecce:	2b01      	cmp	r3, #1
    ecd0:	d01c      	beq.n	ed0c <_gpio_set_direction+0x50>
    ecd2:	2b02      	cmp	r3, #2
    ecd4:	d037      	beq.n	ed46 <_gpio_set_direction+0x8a>
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	d14e      	bne.n	ed78 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ecda:	79fb      	ldrb	r3, [r7, #7]
    ecdc:	683a      	ldr	r2, [r7, #0]
    ecde:	4619      	mov	r1, r3
    ece0:	482a      	ldr	r0, [pc, #168]	; (ed8c <_gpio_set_direction+0xd0>)
    ece2:	4b2b      	ldr	r3, [pc, #172]	; (ed90 <_gpio_set_direction+0xd4>)
    ece4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ece6:	683b      	ldr	r3, [r7, #0]
    ece8:	b29b      	uxth	r3, r3
    ecea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ecee:	79fb      	ldrb	r3, [r7, #7]
    ecf0:	4619      	mov	r1, r3
    ecf2:	4826      	ldr	r0, [pc, #152]	; (ed8c <_gpio_set_direction+0xd0>)
    ecf4:	4b27      	ldr	r3, [pc, #156]	; (ed94 <_gpio_set_direction+0xd8>)
    ecf6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ecf8:	683b      	ldr	r3, [r7, #0]
    ecfa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ecfc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ed00:	79fb      	ldrb	r3, [r7, #7]
    ed02:	4619      	mov	r1, r3
    ed04:	4821      	ldr	r0, [pc, #132]	; (ed8c <_gpio_set_direction+0xd0>)
    ed06:	4b23      	ldr	r3, [pc, #140]	; (ed94 <_gpio_set_direction+0xd8>)
    ed08:	4798      	blx	r3
		break;
    ed0a:	e03a      	b.n	ed82 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ed0c:	79fb      	ldrb	r3, [r7, #7]
    ed0e:	683a      	ldr	r2, [r7, #0]
    ed10:	4619      	mov	r1, r3
    ed12:	481e      	ldr	r0, [pc, #120]	; (ed8c <_gpio_set_direction+0xd0>)
    ed14:	4b1e      	ldr	r3, [pc, #120]	; (ed90 <_gpio_set_direction+0xd4>)
    ed16:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ed18:	683b      	ldr	r3, [r7, #0]
    ed1a:	b29b      	uxth	r3, r3
    ed1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ed20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ed24:	79f9      	ldrb	r1, [r7, #7]
    ed26:	461a      	mov	r2, r3
    ed28:	4818      	ldr	r0, [pc, #96]	; (ed8c <_gpio_set_direction+0xd0>)
    ed2a:	4b1a      	ldr	r3, [pc, #104]	; (ed94 <_gpio_set_direction+0xd8>)
    ed2c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ed2e:	683b      	ldr	r3, [r7, #0]
    ed30:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ed32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ed36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ed3a:	79f9      	ldrb	r1, [r7, #7]
    ed3c:	461a      	mov	r2, r3
    ed3e:	4813      	ldr	r0, [pc, #76]	; (ed8c <_gpio_set_direction+0xd0>)
    ed40:	4b14      	ldr	r3, [pc, #80]	; (ed94 <_gpio_set_direction+0xd8>)
    ed42:	4798      	blx	r3
		break;
    ed44:	e01d      	b.n	ed82 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ed46:	79fb      	ldrb	r3, [r7, #7]
    ed48:	683a      	ldr	r2, [r7, #0]
    ed4a:	4619      	mov	r1, r3
    ed4c:	480f      	ldr	r0, [pc, #60]	; (ed8c <_gpio_set_direction+0xd0>)
    ed4e:	4b12      	ldr	r3, [pc, #72]	; (ed98 <_gpio_set_direction+0xdc>)
    ed50:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ed52:	683b      	ldr	r3, [r7, #0]
    ed54:	b29b      	uxth	r3, r3
    ed56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ed5a:	79fb      	ldrb	r3, [r7, #7]
    ed5c:	4619      	mov	r1, r3
    ed5e:	480b      	ldr	r0, [pc, #44]	; (ed8c <_gpio_set_direction+0xd0>)
    ed60:	4b0c      	ldr	r3, [pc, #48]	; (ed94 <_gpio_set_direction+0xd8>)
    ed62:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ed64:	683b      	ldr	r3, [r7, #0]
    ed66:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ed68:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ed6c:	79fb      	ldrb	r3, [r7, #7]
    ed6e:	4619      	mov	r1, r3
    ed70:	4806      	ldr	r0, [pc, #24]	; (ed8c <_gpio_set_direction+0xd0>)
    ed72:	4b08      	ldr	r3, [pc, #32]	; (ed94 <_gpio_set_direction+0xd8>)
    ed74:	4798      	blx	r3
		break;
    ed76:	e004      	b.n	ed82 <_gpio_set_direction+0xc6>
		ASSERT(false);
    ed78:	2246      	movs	r2, #70	; 0x46
    ed7a:	4908      	ldr	r1, [pc, #32]	; (ed9c <_gpio_set_direction+0xe0>)
    ed7c:	2000      	movs	r0, #0
    ed7e:	4b08      	ldr	r3, [pc, #32]	; (eda0 <_gpio_set_direction+0xe4>)
    ed80:	4798      	blx	r3
}
    ed82:	bf00      	nop
    ed84:	3708      	adds	r7, #8
    ed86:	46bd      	mov	sp, r7
    ed88:	bd80      	pop	{r7, pc}
    ed8a:	bf00      	nop
    ed8c:	41008000 	.word	0x41008000
    ed90:	0000eb03 	.word	0x0000eb03
    ed94:	0000ec93 	.word	0x0000ec93
    ed98:	0000eadb 	.word	0x0000eadb
    ed9c:	00013e10 	.word	0x00013e10
    eda0:	00006a41 	.word	0x00006a41

0000eda4 <_gpio_set_level>:
{
    eda4:	b580      	push	{r7, lr}
    eda6:	b082      	sub	sp, #8
    eda8:	af00      	add	r7, sp, #0
    edaa:	4603      	mov	r3, r0
    edac:	6039      	str	r1, [r7, #0]
    edae:	71fb      	strb	r3, [r7, #7]
    edb0:	4613      	mov	r3, r2
    edb2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    edb4:	79bb      	ldrb	r3, [r7, #6]
    edb6:	2b00      	cmp	r3, #0
    edb8:	d006      	beq.n	edc8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    edba:	79fb      	ldrb	r3, [r7, #7]
    edbc:	683a      	ldr	r2, [r7, #0]
    edbe:	4619      	mov	r1, r3
    edc0:	4806      	ldr	r0, [pc, #24]	; (eddc <_gpio_set_level+0x38>)
    edc2:	4b07      	ldr	r3, [pc, #28]	; (ede0 <_gpio_set_level+0x3c>)
    edc4:	4798      	blx	r3
}
    edc6:	e005      	b.n	edd4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    edc8:	79fb      	ldrb	r3, [r7, #7]
    edca:	683a      	ldr	r2, [r7, #0]
    edcc:	4619      	mov	r1, r3
    edce:	4803      	ldr	r0, [pc, #12]	; (eddc <_gpio_set_level+0x38>)
    edd0:	4b04      	ldr	r3, [pc, #16]	; (ede4 <_gpio_set_level+0x40>)
    edd2:	4798      	blx	r3
}
    edd4:	bf00      	nop
    edd6:	3708      	adds	r7, #8
    edd8:	46bd      	mov	sp, r7
    edda:	bd80      	pop	{r7, pc}
    eddc:	41008000 	.word	0x41008000
    ede0:	0000eb2b 	.word	0x0000eb2b
    ede4:	0000eb53 	.word	0x0000eb53

0000ede8 <_gpio_set_pin_function>:
{
    ede8:	b590      	push	{r4, r7, lr}
    edea:	b085      	sub	sp, #20
    edec:	af00      	add	r7, sp, #0
    edee:	6078      	str	r0, [r7, #4]
    edf0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    edf2:	687b      	ldr	r3, [r7, #4]
    edf4:	095b      	lsrs	r3, r3, #5
    edf6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    edf8:	687b      	ldr	r3, [r7, #4]
    edfa:	b2db      	uxtb	r3, r3
    edfc:	f003 031f 	and.w	r3, r3, #31
    ee00:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ee02:	683b      	ldr	r3, [r7, #0]
    ee04:	f1b3 3fff 	cmp.w	r3, #4294967295
    ee08:	d106      	bne.n	ee18 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ee0a:	7bba      	ldrb	r2, [r7, #14]
    ee0c:	7bf9      	ldrb	r1, [r7, #15]
    ee0e:	2300      	movs	r3, #0
    ee10:	4812      	ldr	r0, [pc, #72]	; (ee5c <_gpio_set_pin_function+0x74>)
    ee12:	4c13      	ldr	r4, [pc, #76]	; (ee60 <_gpio_set_pin_function+0x78>)
    ee14:	47a0      	blx	r4
}
    ee16:	e01d      	b.n	ee54 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ee18:	7bba      	ldrb	r2, [r7, #14]
    ee1a:	7bf9      	ldrb	r1, [r7, #15]
    ee1c:	2301      	movs	r3, #1
    ee1e:	480f      	ldr	r0, [pc, #60]	; (ee5c <_gpio_set_pin_function+0x74>)
    ee20:	4c0f      	ldr	r4, [pc, #60]	; (ee60 <_gpio_set_pin_function+0x78>)
    ee22:	47a0      	blx	r4
		if (pin & 1) {
    ee24:	7bbb      	ldrb	r3, [r7, #14]
    ee26:	f003 0301 	and.w	r3, r3, #1
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d009      	beq.n	ee42 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ee2e:	7bbb      	ldrb	r3, [r7, #14]
    ee30:	085b      	lsrs	r3, r3, #1
    ee32:	b2da      	uxtb	r2, r3
    ee34:	683b      	ldr	r3, [r7, #0]
    ee36:	b2db      	uxtb	r3, r3
    ee38:	7bf9      	ldrb	r1, [r7, #15]
    ee3a:	4808      	ldr	r0, [pc, #32]	; (ee5c <_gpio_set_pin_function+0x74>)
    ee3c:	4c09      	ldr	r4, [pc, #36]	; (ee64 <_gpio_set_pin_function+0x7c>)
    ee3e:	47a0      	blx	r4
}
    ee40:	e008      	b.n	ee54 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ee42:	7bbb      	ldrb	r3, [r7, #14]
    ee44:	085b      	lsrs	r3, r3, #1
    ee46:	b2da      	uxtb	r2, r3
    ee48:	683b      	ldr	r3, [r7, #0]
    ee4a:	b2db      	uxtb	r3, r3
    ee4c:	7bf9      	ldrb	r1, [r7, #15]
    ee4e:	4803      	ldr	r0, [pc, #12]	; (ee5c <_gpio_set_pin_function+0x74>)
    ee50:	4c05      	ldr	r4, [pc, #20]	; (ee68 <_gpio_set_pin_function+0x80>)
    ee52:	47a0      	blx	r4
}
    ee54:	bf00      	nop
    ee56:	3714      	adds	r7, #20
    ee58:	46bd      	mov	sp, r7
    ee5a:	bd90      	pop	{r4, r7, pc}
    ee5c:	41008000 	.word	0x41008000
    ee60:	0000ec39 	.word	0x0000ec39
    ee64:	0000ebdb 	.word	0x0000ebdb
    ee68:	0000eb7b 	.word	0x0000eb7b

0000ee6c <gpio_set_pin_function>:
{
    ee6c:	b580      	push	{r7, lr}
    ee6e:	b082      	sub	sp, #8
    ee70:	af00      	add	r7, sp, #0
    ee72:	6078      	str	r0, [r7, #4]
    ee74:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    ee76:	6839      	ldr	r1, [r7, #0]
    ee78:	6878      	ldr	r0, [r7, #4]
    ee7a:	4b03      	ldr	r3, [pc, #12]	; (ee88 <gpio_set_pin_function+0x1c>)
    ee7c:	4798      	blx	r3
}
    ee7e:	bf00      	nop
    ee80:	3708      	adds	r7, #8
    ee82:	46bd      	mov	sp, r7
    ee84:	bd80      	pop	{r7, pc}
    ee86:	bf00      	nop
    ee88:	0000ede9 	.word	0x0000ede9

0000ee8c <gpio_set_pin_direction>:
{
    ee8c:	b580      	push	{r7, lr}
    ee8e:	b082      	sub	sp, #8
    ee90:	af00      	add	r7, sp, #0
    ee92:	4603      	mov	r3, r0
    ee94:	460a      	mov	r2, r1
    ee96:	71fb      	strb	r3, [r7, #7]
    ee98:	4613      	mov	r3, r2
    ee9a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ee9c:	79fb      	ldrb	r3, [r7, #7]
    ee9e:	095b      	lsrs	r3, r3, #5
    eea0:	b2d8      	uxtb	r0, r3
    eea2:	79fb      	ldrb	r3, [r7, #7]
    eea4:	f003 031f 	and.w	r3, r3, #31
    eea8:	2201      	movs	r2, #1
    eeaa:	fa02 f303 	lsl.w	r3, r2, r3
    eeae:	79ba      	ldrb	r2, [r7, #6]
    eeb0:	4619      	mov	r1, r3
    eeb2:	4b03      	ldr	r3, [pc, #12]	; (eec0 <gpio_set_pin_direction+0x34>)
    eeb4:	4798      	blx	r3
}
    eeb6:	bf00      	nop
    eeb8:	3708      	adds	r7, #8
    eeba:	46bd      	mov	sp, r7
    eebc:	bd80      	pop	{r7, pc}
    eebe:	bf00      	nop
    eec0:	0000ecbd 	.word	0x0000ecbd

0000eec4 <gpio_set_pin_level>:
{
    eec4:	b580      	push	{r7, lr}
    eec6:	b082      	sub	sp, #8
    eec8:	af00      	add	r7, sp, #0
    eeca:	4603      	mov	r3, r0
    eecc:	460a      	mov	r2, r1
    eece:	71fb      	strb	r3, [r7, #7]
    eed0:	4613      	mov	r3, r2
    eed2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    eed4:	79fb      	ldrb	r3, [r7, #7]
    eed6:	095b      	lsrs	r3, r3, #5
    eed8:	b2d8      	uxtb	r0, r3
    eeda:	79fb      	ldrb	r3, [r7, #7]
    eedc:	f003 031f 	and.w	r3, r3, #31
    eee0:	2201      	movs	r2, #1
    eee2:	fa02 f303 	lsl.w	r3, r2, r3
    eee6:	79ba      	ldrb	r2, [r7, #6]
    eee8:	4619      	mov	r1, r3
    eeea:	4b03      	ldr	r3, [pc, #12]	; (eef8 <gpio_set_pin_level+0x34>)
    eeec:	4798      	blx	r3
}
    eeee:	bf00      	nop
    eef0:	3708      	adds	r7, #8
    eef2:	46bd      	mov	sp, r7
    eef4:	bd80      	pop	{r7, pc}
    eef6:	bf00      	nop
    eef8:	0000eda5 	.word	0x0000eda5

0000eefc <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    eefc:	b580      	push	{r7, lr}
    eefe:	b082      	sub	sp, #8
    ef00:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    ef02:	2100      	movs	r1, #0
    ef04:	2008      	movs	r0, #8
    ef06:	4b24      	ldr	r3, [pc, #144]	; (ef98 <QSPI_N25Q256_exit_xip+0x9c>)
    ef08:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    ef0a:	2100      	movs	r1, #0
    ef0c:	202b      	movs	r0, #43	; 0x2b
    ef0e:	4b22      	ldr	r3, [pc, #136]	; (ef98 <QSPI_N25Q256_exit_xip+0x9c>)
    ef10:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    ef12:	2100      	movs	r1, #0
    ef14:	202a      	movs	r0, #42	; 0x2a
    ef16:	4b20      	ldr	r3, [pc, #128]	; (ef98 <QSPI_N25Q256_exit_xip+0x9c>)
    ef18:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ef1a:	2102      	movs	r1, #2
    ef1c:	2008      	movs	r0, #8
    ef1e:	4b1f      	ldr	r3, [pc, #124]	; (ef9c <QSPI_N25Q256_exit_xip+0xa0>)
    ef20:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ef22:	2102      	movs	r1, #2
    ef24:	202b      	movs	r0, #43	; 0x2b
    ef26:	4b1d      	ldr	r3, [pc, #116]	; (ef9c <QSPI_N25Q256_exit_xip+0xa0>)
    ef28:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    ef2a:	2102      	movs	r1, #2
    ef2c:	202a      	movs	r0, #42	; 0x2a
    ef2e:	4b1b      	ldr	r3, [pc, #108]	; (ef9c <QSPI_N25Q256_exit_xip+0xa0>)
    ef30:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    ef32:	2101      	movs	r1, #1
    ef34:	2008      	movs	r0, #8
    ef36:	4b1a      	ldr	r3, [pc, #104]	; (efa0 <QSPI_N25Q256_exit_xip+0xa4>)
    ef38:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    ef3a:	2100      	movs	r1, #0
    ef3c:	202b      	movs	r0, #43	; 0x2b
    ef3e:	4b18      	ldr	r3, [pc, #96]	; (efa0 <QSPI_N25Q256_exit_xip+0xa4>)
    ef40:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    ef42:	2100      	movs	r1, #0
    ef44:	202a      	movs	r0, #42	; 0x2a
    ef46:	4b16      	ldr	r3, [pc, #88]	; (efa0 <QSPI_N25Q256_exit_xip+0xa4>)
    ef48:	4798      	blx	r3

	delay_us(1);
    ef4a:	2001      	movs	r0, #1
    ef4c:	4b15      	ldr	r3, [pc, #84]	; (efa4 <QSPI_N25Q256_exit_xip+0xa8>)
    ef4e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    ef50:	2300      	movs	r3, #0
    ef52:	607b      	str	r3, [r7, #4]
    ef54:	e010      	b.n	ef78 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    ef56:	2101      	movs	r1, #1
    ef58:	202a      	movs	r0, #42	; 0x2a
    ef5a:	4b11      	ldr	r3, [pc, #68]	; (efa0 <QSPI_N25Q256_exit_xip+0xa4>)
    ef5c:	4798      	blx	r3
		delay_us(1);
    ef5e:	2001      	movs	r0, #1
    ef60:	4b10      	ldr	r3, [pc, #64]	; (efa4 <QSPI_N25Q256_exit_xip+0xa8>)
    ef62:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    ef64:	2100      	movs	r1, #0
    ef66:	202a      	movs	r0, #42	; 0x2a
    ef68:	4b0d      	ldr	r3, [pc, #52]	; (efa0 <QSPI_N25Q256_exit_xip+0xa4>)
    ef6a:	4798      	blx	r3
		delay_us(1);
    ef6c:	2001      	movs	r0, #1
    ef6e:	4b0d      	ldr	r3, [pc, #52]	; (efa4 <QSPI_N25Q256_exit_xip+0xa8>)
    ef70:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    ef72:	687b      	ldr	r3, [r7, #4]
    ef74:	3301      	adds	r3, #1
    ef76:	607b      	str	r3, [r7, #4]
    ef78:	687b      	ldr	r3, [r7, #4]
    ef7a:	2b06      	cmp	r3, #6
    ef7c:	ddeb      	ble.n	ef56 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    ef7e:	2101      	movs	r1, #1
    ef80:	202b      	movs	r0, #43	; 0x2b
    ef82:	4b07      	ldr	r3, [pc, #28]	; (efa0 <QSPI_N25Q256_exit_xip+0xa4>)
    ef84:	4798      	blx	r3
	delay_us(1);
    ef86:	2001      	movs	r0, #1
    ef88:	4b06      	ldr	r3, [pc, #24]	; (efa4 <QSPI_N25Q256_exit_xip+0xa8>)
    ef8a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    ef8c:	4b06      	ldr	r3, [pc, #24]	; (efa8 <QSPI_N25Q256_exit_xip+0xac>)
    ef8e:	4798      	blx	r3
}
    ef90:	bf00      	nop
    ef92:	3708      	adds	r7, #8
    ef94:	46bd      	mov	sp, r7
    ef96:	bd80      	pop	{r7, pc}
    ef98:	0000ee6d 	.word	0x0000ee6d
    ef9c:	0000ee8d 	.word	0x0000ee8d
    efa0:	0000eec5 	.word	0x0000eec5
    efa4:	00004dcd 	.word	0x00004dcd
    efa8:	00003ea5 	.word	0x00003ea5

0000efac <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    efac:	b598      	push	{r3, r4, r7, lr}
    efae:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    efb0:	4806      	ldr	r0, [pc, #24]	; (efcc <spi_nor_flash_init+0x20>)
    efb2:	4b07      	ldr	r3, [pc, #28]	; (efd0 <spi_nor_flash_init+0x24>)
    efb4:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    efb6:	2300      	movs	r3, #0
    efb8:	4a06      	ldr	r2, [pc, #24]	; (efd4 <spi_nor_flash_init+0x28>)
    efba:	4904      	ldr	r1, [pc, #16]	; (efcc <spi_nor_flash_init+0x20>)
    efbc:	4806      	ldr	r0, [pc, #24]	; (efd8 <spi_nor_flash_init+0x2c>)
    efbe:	4c07      	ldr	r4, [pc, #28]	; (efdc <spi_nor_flash_init+0x30>)
    efc0:	47a0      	blx	r4
    efc2:	4602      	mov	r2, r0
    efc4:	4b06      	ldr	r3, [pc, #24]	; (efe0 <spi_nor_flash_init+0x34>)
    efc6:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    efc8:	bf00      	nop
    efca:	bd98      	pop	{r3, r4, r7, pc}
    efcc:	20001f80 	.word	0x20001f80
    efd0:	0000552d 	.word	0x0000552d
    efd4:	0000eefd 	.word	0x0000eefd
    efd8:	20001e18 	.word	0x20001e18
    efdc:	0000e5d9 	.word	0x0000e5d9
    efe0:	200021ac 	.word	0x200021ac

0000efe4 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    efe4:	b480      	push	{r7}
    efe6:	b083      	sub	sp, #12
    efe8:	af00      	add	r7, sp, #0
    efea:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    efec:	687b      	ldr	r3, [r7, #4]
    efee:	781b      	ldrb	r3, [r3, #0]
    eff0:	b29a      	uxth	r2, r3
    eff2:	687b      	ldr	r3, [r7, #4]
    eff4:	3301      	adds	r3, #1
    eff6:	781b      	ldrb	r3, [r3, #0]
    eff8:	b29b      	uxth	r3, r3
    effa:	021b      	lsls	r3, r3, #8
    effc:	b29b      	uxth	r3, r3
    effe:	4413      	add	r3, r2
    f000:	b29b      	uxth	r3, r3
}
    f002:	4618      	mov	r0, r3
    f004:	370c      	adds	r7, #12
    f006:	46bd      	mov	sp, r7
    f008:	f85d 7b04 	ldr.w	r7, [sp], #4
    f00c:	4770      	bx	lr

0000f00e <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    f00e:	b480      	push	{r7}
    f010:	b083      	sub	sp, #12
    f012:	af00      	add	r7, sp, #0
    f014:	6078      	str	r0, [r7, #4]
	return desc[0];
    f016:	687b      	ldr	r3, [r7, #4]
    f018:	781b      	ldrb	r3, [r3, #0]
}
    f01a:	4618      	mov	r0, r3
    f01c:	370c      	adds	r7, #12
    f01e:	46bd      	mov	sp, r7
    f020:	f85d 7b04 	ldr.w	r7, [sp], #4
    f024:	4770      	bx	lr
	...

0000f028 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    f028:	b580      	push	{r7, lr}
    f02a:	b082      	sub	sp, #8
    f02c:	af00      	add	r7, sp, #0
    f02e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f030:	6878      	ldr	r0, [r7, #4]
    f032:	4b05      	ldr	r3, [pc, #20]	; (f048 <usb_desc_next+0x20>)
    f034:	4798      	blx	r3
    f036:	4603      	mov	r3, r0
    f038:	461a      	mov	r2, r3
    f03a:	687b      	ldr	r3, [r7, #4]
    f03c:	4413      	add	r3, r2
}
    f03e:	4618      	mov	r0, r3
    f040:	3708      	adds	r7, #8
    f042:	46bd      	mov	sp, r7
    f044:	bd80      	pop	{r7, pc}
    f046:	bf00      	nop
    f048:	0000f00f 	.word	0x0000f00f

0000f04c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    f04c:	b580      	push	{r7, lr}
    f04e:	b08c      	sub	sp, #48	; 0x30
    f050:	af00      	add	r7, sp, #0
    f052:	6078      	str	r0, [r7, #4]
    f054:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    f056:	687b      	ldr	r3, [r7, #4]
    f058:	689b      	ldr	r3, [r3, #8]
    f05a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    f05c:	683b      	ldr	r3, [r7, #0]
    f05e:	681b      	ldr	r3, [r3, #0]
    f060:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    f062:	2300      	movs	r3, #0
    f064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f068:	e08f      	b.n	f18a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f06c:	2b00      	cmp	r3, #0
    f06e:	d102      	bne.n	f076 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    f070:	f06f 0309 	mvn.w	r3, #9
    f074:	e092      	b.n	f19c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    f076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f078:	789b      	ldrb	r3, [r3, #2]
    f07a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f07e:	795b      	ldrb	r3, [r3, #5]
    f080:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    f082:	7c7b      	ldrb	r3, [r7, #17]
    f084:	2b02      	cmp	r3, #2
    f086:	d002      	beq.n	f08e <cdcdf_acm_enable+0x42>
    f088:	7c7b      	ldrb	r3, [r7, #17]
    f08a:	2b0a      	cmp	r3, #10
    f08c:	d121      	bne.n	f0d2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    f08e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f092:	6a3a      	ldr	r2, [r7, #32]
    f094:	5cd2      	ldrb	r2, [r2, r3]
    f096:	7bbb      	ldrb	r3, [r7, #14]
    f098:	429a      	cmp	r2, r3
    f09a:	d102      	bne.n	f0a2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    f09c:	f06f 0311 	mvn.w	r3, #17
    f0a0:	e07c      	b.n	f19c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    f0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f0a6:	6a3a      	ldr	r2, [r7, #32]
    f0a8:	5cd3      	ldrb	r3, [r2, r3]
    f0aa:	2bff      	cmp	r3, #255	; 0xff
    f0ac:	d002      	beq.n	f0b4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    f0ae:	f06f 031b 	mvn.w	r3, #27
    f0b2:	e073      	b.n	f19c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    f0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f0b8:	7bb9      	ldrb	r1, [r7, #14]
    f0ba:	6a3a      	ldr	r2, [r7, #32]
    f0bc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    f0be:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    f0c0:	683b      	ldr	r3, [r7, #0]
    f0c2:	685b      	ldr	r3, [r3, #4]
    f0c4:	2205      	movs	r2, #5
    f0c6:	4619      	mov	r1, r3
    f0c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f0ca:	4b36      	ldr	r3, [pc, #216]	; (f1a4 <cdcdf_acm_enable+0x158>)
    f0cc:	4798      	blx	r3
    f0ce:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    f0d0:	e047      	b.n	f162 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    f0d2:	f06f 0309 	mvn.w	r3, #9
    f0d6:	e061      	b.n	f19c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    f0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f0da:	789b      	ldrb	r3, [r3, #2]
    f0dc:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f0e0:	78db      	ldrb	r3, [r3, #3]
    f0e2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f0e6:	3304      	adds	r3, #4
    f0e8:	4618      	mov	r0, r3
    f0ea:	4b2f      	ldr	r3, [pc, #188]	; (f1a8 <cdcdf_acm_enable+0x15c>)
    f0ec:	4798      	blx	r3
    f0ee:	4603      	mov	r3, r0
    f0f0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    f0f2:	7ebb      	ldrb	r3, [r7, #26]
    f0f4:	7ef9      	ldrb	r1, [r7, #27]
    f0f6:	8bba      	ldrh	r2, [r7, #28]
    f0f8:	4618      	mov	r0, r3
    f0fa:	4b2c      	ldr	r3, [pc, #176]	; (f1ac <cdcdf_acm_enable+0x160>)
    f0fc:	4798      	blx	r3
    f0fe:	4603      	mov	r3, r0
    f100:	2b00      	cmp	r3, #0
    f102:	d002      	beq.n	f10a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    f104:	f06f 0313 	mvn.w	r3, #19
    f108:	e048      	b.n	f19c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    f10a:	7ebb      	ldrb	r3, [r7, #26]
    f10c:	b25b      	sxtb	r3, r3
    f10e:	2b00      	cmp	r3, #0
    f110:	da0f      	bge.n	f132 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    f112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f116:	7eb9      	ldrb	r1, [r7, #26]
    f118:	6a3a      	ldr	r2, [r7, #32]
    f11a:	4413      	add	r3, r2
    f11c:	460a      	mov	r2, r1
    f11e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    f120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f124:	6a3a      	ldr	r2, [r7, #32]
    f126:	4413      	add	r3, r2
    f128:	789b      	ldrb	r3, [r3, #2]
    f12a:	4618      	mov	r0, r3
    f12c:	4b20      	ldr	r3, [pc, #128]	; (f1b0 <cdcdf_acm_enable+0x164>)
    f12e:	4798      	blx	r3
    f130:	e007      	b.n	f142 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    f132:	7eba      	ldrb	r2, [r7, #26]
    f134:	6a3b      	ldr	r3, [r7, #32]
    f136:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    f138:	6a3b      	ldr	r3, [r7, #32]
    f13a:	791b      	ldrb	r3, [r3, #4]
    f13c:	4618      	mov	r0, r3
    f13e:	4b1c      	ldr	r3, [pc, #112]	; (f1b0 <cdcdf_acm_enable+0x164>)
    f140:	4798      	blx	r3
			}
			desc->sod = ep;
    f142:	683b      	ldr	r3, [r7, #0]
    f144:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f146:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    f148:	683b      	ldr	r3, [r7, #0]
    f14a:	681b      	ldr	r3, [r3, #0]
    f14c:	4618      	mov	r0, r3
    f14e:	4b19      	ldr	r3, [pc, #100]	; (f1b4 <cdcdf_acm_enable+0x168>)
    f150:	4798      	blx	r3
    f152:	4602      	mov	r2, r0
    f154:	683b      	ldr	r3, [r7, #0]
    f156:	685b      	ldr	r3, [r3, #4]
    f158:	4619      	mov	r1, r3
    f15a:	4610      	mov	r0, r2
    f15c:	4b16      	ldr	r3, [pc, #88]	; (f1b8 <cdcdf_acm_enable+0x16c>)
    f15e:	4798      	blx	r3
    f160:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    f162:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f164:	2b00      	cmp	r3, #0
    f166:	d1b7      	bne.n	f0d8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    f168:	683b      	ldr	r3, [r7, #0]
    f16a:	681b      	ldr	r3, [r3, #0]
    f16c:	4618      	mov	r0, r3
    f16e:	4b11      	ldr	r3, [pc, #68]	; (f1b4 <cdcdf_acm_enable+0x168>)
    f170:	4798      	blx	r3
    f172:	683b      	ldr	r3, [r7, #0]
    f174:	685b      	ldr	r3, [r3, #4]
    f176:	2204      	movs	r2, #4
    f178:	4619      	mov	r1, r3
    f17a:	4b0a      	ldr	r3, [pc, #40]	; (f1a4 <cdcdf_acm_enable+0x158>)
    f17c:	4798      	blx	r3
    f17e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    f180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f184:	3301      	adds	r3, #1
    f186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    f18e:	2b01      	cmp	r3, #1
    f190:	f67f af6b 	bls.w	f06a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    f194:	4b09      	ldr	r3, [pc, #36]	; (f1bc <cdcdf_acm_enable+0x170>)
    f196:	2201      	movs	r2, #1
    f198:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f19a:	2300      	movs	r3, #0
}
    f19c:	4618      	mov	r0, r3
    f19e:	3730      	adds	r7, #48	; 0x30
    f1a0:	46bd      	mov	sp, r7
    f1a2:	bd80      	pop	{r7, pc}
    f1a4:	0001040d 	.word	0x0001040d
    f1a8:	0000efe5 	.word	0x0000efe5
    f1ac:	000065d5 	.word	0x000065d5
    f1b0:	000066c1 	.word	0x000066c1
    f1b4:	0000f029 	.word	0x0000f029
    f1b8:	00010469 	.word	0x00010469
    f1bc:	20001e34 	.word	0x20001e34

0000f1c0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b088      	sub	sp, #32
    f1c4:	af00      	add	r7, sp, #0
    f1c6:	6078      	str	r0, [r7, #4]
    f1c8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    f1ca:	687b      	ldr	r3, [r7, #4]
    f1cc:	689b      	ldr	r3, [r3, #8]
    f1ce:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    f1d0:	683b      	ldr	r3, [r7, #0]
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d00c      	beq.n	f1f0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    f1d6:	683b      	ldr	r3, [r7, #0]
    f1d8:	681b      	ldr	r3, [r3, #0]
    f1da:	795b      	ldrb	r3, [r3, #5]
    f1dc:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    f1de:	7c7b      	ldrb	r3, [r7, #17]
    f1e0:	2b02      	cmp	r3, #2
    f1e2:	d005      	beq.n	f1f0 <cdcdf_acm_disable+0x30>
    f1e4:	7c7b      	ldrb	r3, [r7, #17]
    f1e6:	2b0a      	cmp	r3, #10
    f1e8:	d002      	beq.n	f1f0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    f1ea:	f06f 0309 	mvn.w	r3, #9
    f1ee:	e035      	b.n	f25c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    f1f0:	2300      	movs	r3, #0
    f1f2:	77fb      	strb	r3, [r7, #31]
    f1f4:	e01f      	b.n	f236 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    f1f6:	7ffb      	ldrb	r3, [r7, #31]
    f1f8:	69ba      	ldr	r2, [r7, #24]
    f1fa:	5cd3      	ldrb	r3, [r2, r3]
    f1fc:	2bff      	cmp	r3, #255	; 0xff
    f1fe:	d016      	beq.n	f22e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    f200:	7ffb      	ldrb	r3, [r7, #31]
    f202:	69ba      	ldr	r2, [r7, #24]
    f204:	21ff      	movs	r1, #255	; 0xff
    f206:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    f208:	7ffb      	ldrb	r3, [r7, #31]
    f20a:	69ba      	ldr	r2, [r7, #24]
    f20c:	4413      	add	r3, r2
    f20e:	789b      	ldrb	r3, [r3, #2]
    f210:	2bff      	cmp	r3, #255	; 0xff
    f212:	d00d      	beq.n	f230 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    f214:	7ffb      	ldrb	r3, [r7, #31]
    f216:	69ba      	ldr	r2, [r7, #24]
    f218:	4413      	add	r3, r2
    f21a:	789b      	ldrb	r3, [r3, #2]
    f21c:	4618      	mov	r0, r3
    f21e:	4b11      	ldr	r3, [pc, #68]	; (f264 <cdcdf_acm_disable+0xa4>)
    f220:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    f222:	7ffb      	ldrb	r3, [r7, #31]
    f224:	69ba      	ldr	r2, [r7, #24]
    f226:	4413      	add	r3, r2
    f228:	22ff      	movs	r2, #255	; 0xff
    f22a:	709a      	strb	r2, [r3, #2]
    f22c:	e000      	b.n	f230 <cdcdf_acm_disable+0x70>
			continue;
    f22e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    f230:	7ffb      	ldrb	r3, [r7, #31]
    f232:	3301      	adds	r3, #1
    f234:	77fb      	strb	r3, [r7, #31]
    f236:	7ffb      	ldrb	r3, [r7, #31]
    f238:	2b01      	cmp	r3, #1
    f23a:	d9dc      	bls.n	f1f6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    f23c:	69bb      	ldr	r3, [r7, #24]
    f23e:	791b      	ldrb	r3, [r3, #4]
    f240:	2bff      	cmp	r3, #255	; 0xff
    f242:	d007      	beq.n	f254 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    f244:	69bb      	ldr	r3, [r7, #24]
    f246:	791b      	ldrb	r3, [r3, #4]
    f248:	4618      	mov	r0, r3
    f24a:	4b06      	ldr	r3, [pc, #24]	; (f264 <cdcdf_acm_disable+0xa4>)
    f24c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    f24e:	69bb      	ldr	r3, [r7, #24]
    f250:	22ff      	movs	r2, #255	; 0xff
    f252:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    f254:	4b04      	ldr	r3, [pc, #16]	; (f268 <cdcdf_acm_disable+0xa8>)
    f256:	2200      	movs	r2, #0
    f258:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    f25a:	2300      	movs	r3, #0
}
    f25c:	4618      	mov	r0, r3
    f25e:	3720      	adds	r7, #32
    f260:	46bd      	mov	sp, r7
    f262:	bd80      	pop	{r7, pc}
    f264:	00006671 	.word	0x00006671
    f268:	20001e34 	.word	0x20001e34

0000f26c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    f26c:	b580      	push	{r7, lr}
    f26e:	b084      	sub	sp, #16
    f270:	af00      	add	r7, sp, #0
    f272:	60f8      	str	r0, [r7, #12]
    f274:	460b      	mov	r3, r1
    f276:	607a      	str	r2, [r7, #4]
    f278:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    f27a:	7afb      	ldrb	r3, [r7, #11]
    f27c:	2b01      	cmp	r3, #1
    f27e:	d009      	beq.n	f294 <cdcdf_acm_ctrl+0x28>
    f280:	2b02      	cmp	r3, #2
    f282:	d00d      	beq.n	f2a0 <cdcdf_acm_ctrl+0x34>
    f284:	2b00      	cmp	r3, #0
    f286:	d10e      	bne.n	f2a6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    f288:	6879      	ldr	r1, [r7, #4]
    f28a:	68f8      	ldr	r0, [r7, #12]
    f28c:	4b09      	ldr	r3, [pc, #36]	; (f2b4 <cdcdf_acm_ctrl+0x48>)
    f28e:	4798      	blx	r3
    f290:	4603      	mov	r3, r0
    f292:	e00a      	b.n	f2aa <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    f294:	6879      	ldr	r1, [r7, #4]
    f296:	68f8      	ldr	r0, [r7, #12]
    f298:	4b07      	ldr	r3, [pc, #28]	; (f2b8 <cdcdf_acm_ctrl+0x4c>)
    f29a:	4798      	blx	r3
    f29c:	4603      	mov	r3, r0
    f29e:	e004      	b.n	f2aa <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    f2a0:	f06f 031a 	mvn.w	r3, #26
    f2a4:	e001      	b.n	f2aa <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    f2a6:	f06f 030c 	mvn.w	r3, #12
	}
}
    f2aa:	4618      	mov	r0, r3
    f2ac:	3710      	adds	r7, #16
    f2ae:	46bd      	mov	sp, r7
    f2b0:	bd80      	pop	{r7, pc}
    f2b2:	bf00      	nop
    f2b4:	0000f04d 	.word	0x0000f04d
    f2b8:	0000f1c1 	.word	0x0000f1c1

0000f2bc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f2bc:	b590      	push	{r4, r7, lr}
    f2be:	b087      	sub	sp, #28
    f2c0:	af00      	add	r7, sp, #0
    f2c2:	4603      	mov	r3, r0
    f2c4:	6039      	str	r1, [r7, #0]
    f2c6:	71fb      	strb	r3, [r7, #7]
    f2c8:	4613      	mov	r3, r2
    f2ca:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    f2cc:	683b      	ldr	r3, [r7, #0]
    f2ce:	799a      	ldrb	r2, [r3, #6]
    f2d0:	79db      	ldrb	r3, [r3, #7]
    f2d2:	021b      	lsls	r3, r3, #8
    f2d4:	4313      	orrs	r3, r2
    f2d6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    f2d8:	4b2b      	ldr	r3, [pc, #172]	; (f388 <cdcdf_acm_set_req+0xcc>)
    f2da:	4798      	blx	r3
    f2dc:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    f2de:	683b      	ldr	r3, [r7, #0]
    f2e0:	785b      	ldrb	r3, [r3, #1]
    f2e2:	2b20      	cmp	r3, #32
    f2e4:	d002      	beq.n	f2ec <cdcdf_acm_set_req+0x30>
    f2e6:	2b22      	cmp	r3, #34	; 0x22
    f2e8:	d034      	beq.n	f354 <cdcdf_acm_set_req+0x98>
    f2ea:	e046      	b.n	f37a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f2ec:	8afb      	ldrh	r3, [r7, #22]
    f2ee:	2b07      	cmp	r3, #7
    f2f0:	d002      	beq.n	f2f8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    f2f2:	f04f 33ff 	mov.w	r3, #4294967295
    f2f6:	e042      	b.n	f37e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    f2f8:	79bb      	ldrb	r3, [r7, #6]
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d107      	bne.n	f30e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    f2fe:	8afa      	ldrh	r2, [r7, #22]
    f300:	79f8      	ldrb	r0, [r7, #7]
    f302:	2300      	movs	r3, #0
    f304:	6939      	ldr	r1, [r7, #16]
    f306:	4c21      	ldr	r4, [pc, #132]	; (f38c <cdcdf_acm_set_req+0xd0>)
    f308:	47a0      	blx	r4
    f30a:	4603      	mov	r3, r0
    f30c:	e037      	b.n	f37e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    f30e:	693a      	ldr	r2, [r7, #16]
    f310:	f107 0308 	add.w	r3, r7, #8
    f314:	6810      	ldr	r0, [r2, #0]
    f316:	6018      	str	r0, [r3, #0]
    f318:	8891      	ldrh	r1, [r2, #4]
    f31a:	7992      	ldrb	r2, [r2, #6]
    f31c:	8099      	strh	r1, [r3, #4]
    f31e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    f320:	4b1b      	ldr	r3, [pc, #108]	; (f390 <cdcdf_acm_set_req+0xd4>)
    f322:	681b      	ldr	r3, [r3, #0]
    f324:	2b00      	cmp	r3, #0
    f326:	d008      	beq.n	f33a <cdcdf_acm_set_req+0x7e>
    f328:	4b19      	ldr	r3, [pc, #100]	; (f390 <cdcdf_acm_set_req+0xd4>)
    f32a:	681b      	ldr	r3, [r3, #0]
    f32c:	f107 0208 	add.w	r2, r7, #8
    f330:	4610      	mov	r0, r2
    f332:	4798      	blx	r3
    f334:	4603      	mov	r3, r0
    f336:	2b00      	cmp	r3, #0
    f338:	d00a      	beq.n	f350 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    f33a:	4b16      	ldr	r3, [pc, #88]	; (f394 <cdcdf_acm_set_req+0xd8>)
    f33c:	f107 0208 	add.w	r2, r7, #8
    f340:	e892 0003 	ldmia.w	r2, {r0, r1}
    f344:	6018      	str	r0, [r3, #0]
    f346:	3304      	adds	r3, #4
    f348:	8019      	strh	r1, [r3, #0]
    f34a:	3302      	adds	r3, #2
    f34c:	0c0a      	lsrs	r2, r1, #16
    f34e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    f350:	2300      	movs	r3, #0
    f352:	e014      	b.n	f37e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    f354:	2300      	movs	r3, #0
    f356:	2200      	movs	r2, #0
    f358:	2100      	movs	r1, #0
    f35a:	2000      	movs	r0, #0
    f35c:	4c0b      	ldr	r4, [pc, #44]	; (f38c <cdcdf_acm_set_req+0xd0>)
    f35e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    f360:	4b0d      	ldr	r3, [pc, #52]	; (f398 <cdcdf_acm_set_req+0xdc>)
    f362:	681b      	ldr	r3, [r3, #0]
    f364:	2b00      	cmp	r3, #0
    f366:	d006      	beq.n	f376 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    f368:	4b0b      	ldr	r3, [pc, #44]	; (f398 <cdcdf_acm_set_req+0xdc>)
    f36a:	681b      	ldr	r3, [r3, #0]
    f36c:	683a      	ldr	r2, [r7, #0]
    f36e:	8852      	ldrh	r2, [r2, #2]
    f370:	b292      	uxth	r2, r2
    f372:	4610      	mov	r0, r2
    f374:	4798      	blx	r3
		}
		return ERR_NONE;
    f376:	2300      	movs	r3, #0
    f378:	e001      	b.n	f37e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    f37a:	f06f 030c 	mvn.w	r3, #12
	}
}
    f37e:	4618      	mov	r0, r3
    f380:	371c      	adds	r7, #28
    f382:	46bd      	mov	sp, r7
    f384:	bd90      	pop	{r4, r7, pc}
    f386:	bf00      	nop
    f388:	00010309 	.word	0x00010309
    f38c:	0001017d 	.word	0x0001017d
    f390:	20001e48 	.word	0x20001e48
    f394:	20001e3c 	.word	0x20001e3c
    f398:	20001e44 	.word	0x20001e44

0000f39c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f39c:	b590      	push	{r4, r7, lr}
    f39e:	b085      	sub	sp, #20
    f3a0:	af00      	add	r7, sp, #0
    f3a2:	4603      	mov	r3, r0
    f3a4:	6039      	str	r1, [r7, #0]
    f3a6:	71fb      	strb	r3, [r7, #7]
    f3a8:	4613      	mov	r3, r2
    f3aa:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    f3ac:	683b      	ldr	r3, [r7, #0]
    f3ae:	799a      	ldrb	r2, [r3, #6]
    f3b0:	79db      	ldrb	r3, [r3, #7]
    f3b2:	021b      	lsls	r3, r3, #8
    f3b4:	4313      	orrs	r3, r2
    f3b6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    f3b8:	79bb      	ldrb	r3, [r7, #6]
    f3ba:	2b01      	cmp	r3, #1
    f3bc:	d101      	bne.n	f3c2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    f3be:	2300      	movs	r3, #0
    f3c0:	e013      	b.n	f3ea <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    f3c2:	683b      	ldr	r3, [r7, #0]
    f3c4:	785b      	ldrb	r3, [r3, #1]
    f3c6:	2b21      	cmp	r3, #33	; 0x21
    f3c8:	d10d      	bne.n	f3e6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    f3ca:	89fb      	ldrh	r3, [r7, #14]
    f3cc:	2b07      	cmp	r3, #7
    f3ce:	d002      	beq.n	f3d6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    f3d0:	f04f 33ff 	mov.w	r3, #4294967295
    f3d4:	e009      	b.n	f3ea <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    f3d6:	89fa      	ldrh	r2, [r7, #14]
    f3d8:	79f8      	ldrb	r0, [r7, #7]
    f3da:	2300      	movs	r3, #0
    f3dc:	4905      	ldr	r1, [pc, #20]	; (f3f4 <cdcdf_acm_get_req+0x58>)
    f3de:	4c06      	ldr	r4, [pc, #24]	; (f3f8 <cdcdf_acm_get_req+0x5c>)
    f3e0:	47a0      	blx	r4
    f3e2:	4603      	mov	r3, r0
    f3e4:	e001      	b.n	f3ea <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    f3e6:	f06f 030c 	mvn.w	r3, #12
	}
}
    f3ea:	4618      	mov	r0, r3
    f3ec:	3714      	adds	r7, #20
    f3ee:	46bd      	mov	sp, r7
    f3f0:	bd90      	pop	{r4, r7, pc}
    f3f2:	bf00      	nop
    f3f4:	20001e3c 	.word	0x20001e3c
    f3f8:	0001017d 	.word	0x0001017d

0000f3fc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f3fc:	b580      	push	{r7, lr}
    f3fe:	b082      	sub	sp, #8
    f400:	af00      	add	r7, sp, #0
    f402:	4603      	mov	r3, r0
    f404:	6039      	str	r1, [r7, #0]
    f406:	71fb      	strb	r3, [r7, #7]
    f408:	4613      	mov	r3, r2
    f40a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    f40c:	683b      	ldr	r3, [r7, #0]
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	095b      	lsrs	r3, r3, #5
    f412:	b2db      	uxtb	r3, r3
    f414:	f003 0303 	and.w	r3, r3, #3
    f418:	2b01      	cmp	r3, #1
    f41a:	d002      	beq.n	f422 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    f41c:	f06f 0309 	mvn.w	r3, #9
    f420:	e026      	b.n	f470 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    f422:	683b      	ldr	r3, [r7, #0]
    f424:	889b      	ldrh	r3, [r3, #4]
    f426:	b29a      	uxth	r2, r3
    f428:	4b13      	ldr	r3, [pc, #76]	; (f478 <cdcdf_acm_req+0x7c>)
    f42a:	781b      	ldrb	r3, [r3, #0]
    f42c:	b29b      	uxth	r3, r3
    f42e:	429a      	cmp	r2, r3
    f430:	d007      	beq.n	f442 <cdcdf_acm_req+0x46>
    f432:	683b      	ldr	r3, [r7, #0]
    f434:	889b      	ldrh	r3, [r3, #4]
    f436:	b29a      	uxth	r2, r3
    f438:	4b0f      	ldr	r3, [pc, #60]	; (f478 <cdcdf_acm_req+0x7c>)
    f43a:	785b      	ldrb	r3, [r3, #1]
    f43c:	b29b      	uxth	r3, r3
    f43e:	429a      	cmp	r2, r3
    f440:	d114      	bne.n	f46c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    f442:	683b      	ldr	r3, [r7, #0]
    f444:	781b      	ldrb	r3, [r3, #0]
    f446:	b25b      	sxtb	r3, r3
    f448:	2b00      	cmp	r3, #0
    f44a:	da07      	bge.n	f45c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    f44c:	79ba      	ldrb	r2, [r7, #6]
    f44e:	79fb      	ldrb	r3, [r7, #7]
    f450:	6839      	ldr	r1, [r7, #0]
    f452:	4618      	mov	r0, r3
    f454:	4b09      	ldr	r3, [pc, #36]	; (f47c <cdcdf_acm_req+0x80>)
    f456:	4798      	blx	r3
    f458:	4603      	mov	r3, r0
    f45a:	e009      	b.n	f470 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    f45c:	79ba      	ldrb	r2, [r7, #6]
    f45e:	79fb      	ldrb	r3, [r7, #7]
    f460:	6839      	ldr	r1, [r7, #0]
    f462:	4618      	mov	r0, r3
    f464:	4b06      	ldr	r3, [pc, #24]	; (f480 <cdcdf_acm_req+0x84>)
    f466:	4798      	blx	r3
    f468:	4603      	mov	r3, r0
    f46a:	e001      	b.n	f470 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    f46c:	f06f 0309 	mvn.w	r3, #9
	}
}
    f470:	4618      	mov	r0, r3
    f472:	3708      	adds	r7, #8
    f474:	46bd      	mov	sp, r7
    f476:	bd80      	pop	{r7, pc}
    f478:	20001e34 	.word	0x20001e34
    f47c:	0000f39d 	.word	0x0000f39d
    f480:	0000f2bd 	.word	0x0000f2bd

0000f484 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    f484:	b580      	push	{r7, lr}
    f486:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    f488:	4b0b      	ldr	r3, [pc, #44]	; (f4b8 <cdcdf_acm_init+0x34>)
    f48a:	4798      	blx	r3
    f48c:	4603      	mov	r3, r0
    f48e:	2b01      	cmp	r3, #1
    f490:	d902      	bls.n	f498 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    f492:	f06f 0310 	mvn.w	r3, #16
    f496:	e00d      	b.n	f4b4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    f498:	4b08      	ldr	r3, [pc, #32]	; (f4bc <cdcdf_acm_init+0x38>)
    f49a:	4a09      	ldr	r2, [pc, #36]	; (f4c0 <cdcdf_acm_init+0x3c>)
    f49c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    f49e:	4b07      	ldr	r3, [pc, #28]	; (f4bc <cdcdf_acm_init+0x38>)
    f4a0:	4a08      	ldr	r2, [pc, #32]	; (f4c4 <cdcdf_acm_init+0x40>)
    f4a2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    f4a4:	4805      	ldr	r0, [pc, #20]	; (f4bc <cdcdf_acm_init+0x38>)
    f4a6:	4b08      	ldr	r3, [pc, #32]	; (f4c8 <cdcdf_acm_init+0x44>)
    f4a8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    f4aa:	4908      	ldr	r1, [pc, #32]	; (f4cc <cdcdf_acm_init+0x48>)
    f4ac:	2001      	movs	r0, #1
    f4ae:	4b08      	ldr	r3, [pc, #32]	; (f4d0 <cdcdf_acm_init+0x4c>)
    f4b0:	4798      	blx	r3
	return ERR_NONE;
    f4b2:	2300      	movs	r3, #0
}
    f4b4:	4618      	mov	r0, r3
    f4b6:	bd80      	pop	{r7, pc}
    f4b8:	00010321 	.word	0x00010321
    f4bc:	20001e28 	.word	0x20001e28
    f4c0:	0000f26d 	.word	0x0000f26d
    f4c4:	20001e34 	.word	0x20001e34
    f4c8:	00010289 	.word	0x00010289
    f4cc:	200000ec 	.word	0x200000ec
    f4d0:	000101b9 	.word	0x000101b9

0000f4d4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    f4d4:	b590      	push	{r4, r7, lr}
    f4d6:	b083      	sub	sp, #12
    f4d8:	af00      	add	r7, sp, #0
    f4da:	6078      	str	r0, [r7, #4]
    f4dc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f4de:	4b0b      	ldr	r3, [pc, #44]	; (f50c <cdcdf_acm_read+0x38>)
    f4e0:	4798      	blx	r3
    f4e2:	4603      	mov	r3, r0
    f4e4:	f083 0301 	eor.w	r3, r3, #1
    f4e8:	b2db      	uxtb	r3, r3
    f4ea:	2b00      	cmp	r3, #0
    f4ec:	d002      	beq.n	f4f4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    f4ee:	f06f 0310 	mvn.w	r3, #16
    f4f2:	e007      	b.n	f504 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    f4f4:	4b06      	ldr	r3, [pc, #24]	; (f510 <cdcdf_acm_read+0x3c>)
    f4f6:	7918      	ldrb	r0, [r3, #4]
    f4f8:	2300      	movs	r3, #0
    f4fa:	683a      	ldr	r2, [r7, #0]
    f4fc:	6879      	ldr	r1, [r7, #4]
    f4fe:	4c05      	ldr	r4, [pc, #20]	; (f514 <cdcdf_acm_read+0x40>)
    f500:	47a0      	blx	r4
    f502:	4603      	mov	r3, r0
}
    f504:	4618      	mov	r0, r3
    f506:	370c      	adds	r7, #12
    f508:	46bd      	mov	sp, r7
    f50a:	bd90      	pop	{r4, r7, pc}
    f50c:	0000f5f9 	.word	0x0000f5f9
    f510:	20001e34 	.word	0x20001e34
    f514:	0001017d 	.word	0x0001017d

0000f518 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    f518:	b590      	push	{r4, r7, lr}
    f51a:	b083      	sub	sp, #12
    f51c:	af00      	add	r7, sp, #0
    f51e:	6078      	str	r0, [r7, #4]
    f520:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    f522:	4b0b      	ldr	r3, [pc, #44]	; (f550 <cdcdf_acm_write+0x38>)
    f524:	4798      	blx	r3
    f526:	4603      	mov	r3, r0
    f528:	f083 0301 	eor.w	r3, r3, #1
    f52c:	b2db      	uxtb	r3, r3
    f52e:	2b00      	cmp	r3, #0
    f530:	d002      	beq.n	f538 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    f532:	f06f 0310 	mvn.w	r3, #16
    f536:	e007      	b.n	f548 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    f538:	4b06      	ldr	r3, [pc, #24]	; (f554 <cdcdf_acm_write+0x3c>)
    f53a:	78d8      	ldrb	r0, [r3, #3]
    f53c:	2301      	movs	r3, #1
    f53e:	683a      	ldr	r2, [r7, #0]
    f540:	6879      	ldr	r1, [r7, #4]
    f542:	4c05      	ldr	r4, [pc, #20]	; (f558 <cdcdf_acm_write+0x40>)
    f544:	47a0      	blx	r4
    f546:	4603      	mov	r3, r0
}
    f548:	4618      	mov	r0, r3
    f54a:	370c      	adds	r7, #12
    f54c:	46bd      	mov	sp, r7
    f54e:	bd90      	pop	{r4, r7, pc}
    f550:	0000f5f9 	.word	0x0000f5f9
    f554:	20001e34 	.word	0x20001e34
    f558:	0001017d 	.word	0x0001017d

0000f55c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    f55c:	b580      	push	{r7, lr}
    f55e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    f560:	4b05      	ldr	r3, [pc, #20]	; (f578 <cdcdf_acm_stop_xfer+0x1c>)
    f562:	78db      	ldrb	r3, [r3, #3]
    f564:	4618      	mov	r0, r3
    f566:	4b05      	ldr	r3, [pc, #20]	; (f57c <cdcdf_acm_stop_xfer+0x20>)
    f568:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    f56a:	4b03      	ldr	r3, [pc, #12]	; (f578 <cdcdf_acm_stop_xfer+0x1c>)
    f56c:	791b      	ldrb	r3, [r3, #4]
    f56e:	4618      	mov	r0, r3
    f570:	4b02      	ldr	r3, [pc, #8]	; (f57c <cdcdf_acm_stop_xfer+0x20>)
    f572:	4798      	blx	r3
}
    f574:	bf00      	nop
    f576:	bd80      	pop	{r7, pc}
    f578:	20001e34 	.word	0x20001e34
    f57c:	00006899 	.word	0x00006899

0000f580 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    f580:	b580      	push	{r7, lr}
    f582:	b082      	sub	sp, #8
    f584:	af00      	add	r7, sp, #0
    f586:	4603      	mov	r3, r0
    f588:	6039      	str	r1, [r7, #0]
    f58a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    f58c:	79fb      	ldrb	r3, [r7, #7]
    f58e:	2b03      	cmp	r3, #3
    f590:	d822      	bhi.n	f5d8 <cdcdf_acm_register_callback+0x58>
    f592:	a201      	add	r2, pc, #4	; (adr r2, f598 <cdcdf_acm_register_callback+0x18>)
    f594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f598:	0000f5a9 	.word	0x0000f5a9
    f59c:	0000f5b9 	.word	0x0000f5b9
    f5a0:	0000f5c9 	.word	0x0000f5c9
    f5a4:	0000f5d1 	.word	0x0000f5d1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    f5a8:	4b0f      	ldr	r3, [pc, #60]	; (f5e8 <cdcdf_acm_register_callback+0x68>)
    f5aa:	791b      	ldrb	r3, [r3, #4]
    f5ac:	683a      	ldr	r2, [r7, #0]
    f5ae:	2102      	movs	r1, #2
    f5b0:	4618      	mov	r0, r3
    f5b2:	4b0e      	ldr	r3, [pc, #56]	; (f5ec <cdcdf_acm_register_callback+0x6c>)
    f5b4:	4798      	blx	r3
		break;
    f5b6:	e012      	b.n	f5de <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    f5b8:	4b0b      	ldr	r3, [pc, #44]	; (f5e8 <cdcdf_acm_register_callback+0x68>)
    f5ba:	78db      	ldrb	r3, [r3, #3]
    f5bc:	683a      	ldr	r2, [r7, #0]
    f5be:	2102      	movs	r1, #2
    f5c0:	4618      	mov	r0, r3
    f5c2:	4b0a      	ldr	r3, [pc, #40]	; (f5ec <cdcdf_acm_register_callback+0x6c>)
    f5c4:	4798      	blx	r3
		break;
    f5c6:	e00a      	b.n	f5de <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    f5c8:	4a09      	ldr	r2, [pc, #36]	; (f5f0 <cdcdf_acm_register_callback+0x70>)
    f5ca:	683b      	ldr	r3, [r7, #0]
    f5cc:	6013      	str	r3, [r2, #0]
		break;
    f5ce:	e006      	b.n	f5de <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    f5d0:	4a08      	ldr	r2, [pc, #32]	; (f5f4 <cdcdf_acm_register_callback+0x74>)
    f5d2:	683b      	ldr	r3, [r7, #0]
    f5d4:	6013      	str	r3, [r2, #0]
		break;
    f5d6:	e002      	b.n	f5de <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    f5d8:	f06f 030c 	mvn.w	r3, #12
    f5dc:	e000      	b.n	f5e0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    f5de:	2300      	movs	r3, #0
}
    f5e0:	4618      	mov	r0, r3
    f5e2:	3708      	adds	r7, #8
    f5e4:	46bd      	mov	sp, r7
    f5e6:	bd80      	pop	{r7, pc}
    f5e8:	20001e34 	.word	0x20001e34
    f5ec:	000069c5 	.word	0x000069c5
    f5f0:	20001e48 	.word	0x20001e48
    f5f4:	20001e44 	.word	0x20001e44

0000f5f8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    f5f8:	b480      	push	{r7}
    f5fa:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    f5fc:	4b03      	ldr	r3, [pc, #12]	; (f60c <cdcdf_acm_is_enabled+0x14>)
    f5fe:	795b      	ldrb	r3, [r3, #5]
}
    f600:	4618      	mov	r0, r3
    f602:	46bd      	mov	sp, r7
    f604:	f85d 7b04 	ldr.w	r7, [sp], #4
    f608:	4770      	bx	lr
    f60a:	bf00      	nop
    f60c:	20001e34 	.word	0x20001e34

0000f610 <usb_get_u16>:
{
    f610:	b480      	push	{r7}
    f612:	b083      	sub	sp, #12
    f614:	af00      	add	r7, sp, #0
    f616:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f618:	687b      	ldr	r3, [r7, #4]
    f61a:	781b      	ldrb	r3, [r3, #0]
    f61c:	b29a      	uxth	r2, r3
    f61e:	687b      	ldr	r3, [r7, #4]
    f620:	3301      	adds	r3, #1
    f622:	781b      	ldrb	r3, [r3, #0]
    f624:	b29b      	uxth	r3, r3
    f626:	021b      	lsls	r3, r3, #8
    f628:	b29b      	uxth	r3, r3
    f62a:	4413      	add	r3, r2
    f62c:	b29b      	uxth	r3, r3
}
    f62e:	4618      	mov	r0, r3
    f630:	370c      	adds	r7, #12
    f632:	46bd      	mov	sp, r7
    f634:	f85d 7b04 	ldr.w	r7, [sp], #4
    f638:	4770      	bx	lr

0000f63a <usb_desc_len>:
{
    f63a:	b480      	push	{r7}
    f63c:	b083      	sub	sp, #12
    f63e:	af00      	add	r7, sp, #0
    f640:	6078      	str	r0, [r7, #4]
	return desc[0];
    f642:	687b      	ldr	r3, [r7, #4]
    f644:	781b      	ldrb	r3, [r3, #0]
}
    f646:	4618      	mov	r0, r3
    f648:	370c      	adds	r7, #12
    f64a:	46bd      	mov	sp, r7
    f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f650:	4770      	bx	lr
	...

0000f654 <usb_desc_next>:
{
    f654:	b580      	push	{r7, lr}
    f656:	b082      	sub	sp, #8
    f658:	af00      	add	r7, sp, #0
    f65a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f65c:	6878      	ldr	r0, [r7, #4]
    f65e:	4b05      	ldr	r3, [pc, #20]	; (f674 <usb_desc_next+0x20>)
    f660:	4798      	blx	r3
    f662:	4603      	mov	r3, r0
    f664:	461a      	mov	r2, r3
    f666:	687b      	ldr	r3, [r7, #4]
    f668:	4413      	add	r3, r2
}
    f66a:	4618      	mov	r0, r3
    f66c:	3708      	adds	r7, #8
    f66e:	46bd      	mov	sp, r7
    f670:	bd80      	pop	{r7, pc}
    f672:	bf00      	nop
    f674:	0000f63b 	.word	0x0000f63b

0000f678 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    f678:	b580      	push	{r7, lr}
    f67a:	b082      	sub	sp, #8
    f67c:	af00      	add	r7, sp, #0
    f67e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f680:	687b      	ldr	r3, [r7, #4]
    f682:	3302      	adds	r3, #2
    f684:	4618      	mov	r0, r3
    f686:	4b03      	ldr	r3, [pc, #12]	; (f694 <usb_cfg_desc_total_len+0x1c>)
    f688:	4798      	blx	r3
    f68a:	4603      	mov	r3, r0
}
    f68c:	4618      	mov	r0, r3
    f68e:	3708      	adds	r7, #8
    f690:	46bd      	mov	sp, r7
    f692:	bd80      	pop	{r7, pc}
    f694:	0000f611 	.word	0x0000f611

0000f698 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    f698:	b590      	push	{r4, r7, lr}
    f69a:	b085      	sub	sp, #20
    f69c:	af00      	add	r7, sp, #0
    f69e:	4603      	mov	r3, r0
    f6a0:	6039      	str	r1, [r7, #0]
    f6a2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    f6a4:	2300      	movs	r3, #0
    f6a6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    f6a8:	683b      	ldr	r3, [r7, #0]
    f6aa:	799a      	ldrb	r2, [r3, #6]
    f6ac:	79db      	ldrb	r3, [r3, #7]
    f6ae:	021b      	lsls	r3, r3, #8
    f6b0:	4313      	orrs	r3, r2
    f6b2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    f6b4:	897b      	ldrh	r3, [r7, #10]
    f6b6:	2b12      	cmp	r3, #18
    f6b8:	d901      	bls.n	f6be <usbdc_get_dev_desc+0x26>
		length = 0x12;
    f6ba:	2312      	movs	r3, #18
    f6bc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    f6be:	68fb      	ldr	r3, [r7, #12]
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	d10a      	bne.n	f6da <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    f6c4:	4b0f      	ldr	r3, [pc, #60]	; (f704 <usbdc_get_dev_desc+0x6c>)
    f6c6:	681b      	ldr	r3, [r3, #0]
    f6c8:	6818      	ldr	r0, [r3, #0]
    f6ca:	4b0e      	ldr	r3, [pc, #56]	; (f704 <usbdc_get_dev_desc+0x6c>)
    f6cc:	681b      	ldr	r3, [r3, #0]
    f6ce:	685b      	ldr	r3, [r3, #4]
    f6d0:	2201      	movs	r2, #1
    f6d2:	4619      	mov	r1, r3
    f6d4:	4b0c      	ldr	r3, [pc, #48]	; (f708 <usbdc_get_dev_desc+0x70>)
    f6d6:	4798      	blx	r3
    f6d8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    f6da:	68fb      	ldr	r3, [r7, #12]
    f6dc:	2b00      	cmp	r3, #0
    f6de:	d101      	bne.n	f6e4 <usbdc_get_dev_desc+0x4c>
		return false;
    f6e0:	2300      	movs	r3, #0
    f6e2:	e00b      	b.n	f6fc <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    f6e4:	897a      	ldrh	r2, [r7, #10]
    f6e6:	79f8      	ldrb	r0, [r7, #7]
    f6e8:	2300      	movs	r3, #0
    f6ea:	68f9      	ldr	r1, [r7, #12]
    f6ec:	4c07      	ldr	r4, [pc, #28]	; (f70c <usbdc_get_dev_desc+0x74>)
    f6ee:	47a0      	blx	r4
    f6f0:	4603      	mov	r3, r0
    f6f2:	2b00      	cmp	r3, #0
    f6f4:	d001      	beq.n	f6fa <usbdc_get_dev_desc+0x62>
		return false;
    f6f6:	2300      	movs	r3, #0
    f6f8:	e000      	b.n	f6fc <usbdc_get_dev_desc+0x64>
	}
	return true;
    f6fa:	2301      	movs	r3, #1
}
    f6fc:	4618      	mov	r0, r3
    f6fe:	3714      	adds	r7, #20
    f700:	46bd      	mov	sp, r7
    f702:	bd90      	pop	{r4, r7, pc}
    f704:	20001e4c 	.word	0x20001e4c
    f708:	0001040d 	.word	0x0001040d
    f70c:	0001017d 	.word	0x0001017d

0000f710 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    f710:	b590      	push	{r4, r7, lr}
    f712:	b087      	sub	sp, #28
    f714:	af00      	add	r7, sp, #0
    f716:	4603      	mov	r3, r0
    f718:	6039      	str	r1, [r7, #0]
    f71a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    f71c:	2300      	movs	r3, #0
    f71e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    f720:	683b      	ldr	r3, [r7, #0]
    f722:	799a      	ldrb	r2, [r3, #6]
    f724:	79db      	ldrb	r3, [r3, #7]
    f726:	021b      	lsls	r3, r3, #8
    f728:	4313      	orrs	r3, r2
    f72a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    f72c:	683b      	ldr	r3, [r7, #0]
    f72e:	885b      	ldrh	r3, [r3, #2]
    f730:	b29b      	uxth	r3, r3
    f732:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f734:	8a7a      	ldrh	r2, [r7, #18]
    f736:	4b1e      	ldr	r3, [pc, #120]	; (f7b0 <usbdc_get_cfg_desc+0xa0>)
    f738:	7f1b      	ldrb	r3, [r3, #28]
    f73a:	3b01      	subs	r3, #1
    f73c:	4013      	ands	r3, r2
    f73e:	2b00      	cmp	r3, #0
    f740:	bf0c      	ite	eq
    f742:	2301      	moveq	r3, #1
    f744:	2300      	movne	r3, #0
    f746:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    f748:	697b      	ldr	r3, [r7, #20]
    f74a:	2b00      	cmp	r3, #0
    f74c:	d10c      	bne.n	f768 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    f74e:	4b18      	ldr	r3, [pc, #96]	; (f7b0 <usbdc_get_cfg_desc+0xa0>)
    f750:	681b      	ldr	r3, [r3, #0]
    f752:	6818      	ldr	r0, [r3, #0]
    f754:	4b16      	ldr	r3, [pc, #88]	; (f7b0 <usbdc_get_cfg_desc+0xa0>)
    f756:	681b      	ldr	r3, [r3, #0]
    f758:	6859      	ldr	r1, [r3, #4]
    f75a:	7c3b      	ldrb	r3, [r7, #16]
    f75c:	3301      	adds	r3, #1
    f75e:	b2db      	uxtb	r3, r3
    f760:	461a      	mov	r2, r3
    f762:	4b14      	ldr	r3, [pc, #80]	; (f7b4 <usbdc_get_cfg_desc+0xa4>)
    f764:	4798      	blx	r3
    f766:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    f768:	697b      	ldr	r3, [r7, #20]
    f76a:	2b00      	cmp	r3, #0
    f76c:	d101      	bne.n	f772 <usbdc_get_cfg_desc+0x62>
		return false;
    f76e:	2300      	movs	r3, #0
    f770:	e019      	b.n	f7a6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    f772:	6978      	ldr	r0, [r7, #20]
    f774:	4b10      	ldr	r3, [pc, #64]	; (f7b8 <usbdc_get_cfg_desc+0xa8>)
    f776:	4798      	blx	r3
    f778:	4603      	mov	r3, r0
    f77a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    f77c:	8a7a      	ldrh	r2, [r7, #18]
    f77e:	89fb      	ldrh	r3, [r7, #14]
    f780:	429a      	cmp	r2, r3
    f782:	d802      	bhi.n	f78a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    f784:	2300      	movs	r3, #0
    f786:	747b      	strb	r3, [r7, #17]
    f788:	e001      	b.n	f78e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    f78a:	89fb      	ldrh	r3, [r7, #14]
    f78c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    f78e:	8a7a      	ldrh	r2, [r7, #18]
    f790:	7c7b      	ldrb	r3, [r7, #17]
    f792:	79f8      	ldrb	r0, [r7, #7]
    f794:	6979      	ldr	r1, [r7, #20]
    f796:	4c09      	ldr	r4, [pc, #36]	; (f7bc <usbdc_get_cfg_desc+0xac>)
    f798:	47a0      	blx	r4
    f79a:	4603      	mov	r3, r0
    f79c:	2b00      	cmp	r3, #0
    f79e:	d001      	beq.n	f7a4 <usbdc_get_cfg_desc+0x94>
		return false;
    f7a0:	2300      	movs	r3, #0
    f7a2:	e000      	b.n	f7a6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    f7a4:	2301      	movs	r3, #1
}
    f7a6:	4618      	mov	r0, r3
    f7a8:	371c      	adds	r7, #28
    f7aa:	46bd      	mov	sp, r7
    f7ac:	bd90      	pop	{r4, r7, pc}
    f7ae:	bf00      	nop
    f7b0:	20001e4c 	.word	0x20001e4c
    f7b4:	000104cd 	.word	0x000104cd
    f7b8:	0000f679 	.word	0x0000f679
    f7bc:	0001017d 	.word	0x0001017d

0000f7c0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    f7c0:	b590      	push	{r4, r7, lr}
    f7c2:	b085      	sub	sp, #20
    f7c4:	af00      	add	r7, sp, #0
    f7c6:	4603      	mov	r3, r0
    f7c8:	6039      	str	r1, [r7, #0]
    f7ca:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    f7cc:	683b      	ldr	r3, [r7, #0]
    f7ce:	799a      	ldrb	r2, [r3, #6]
    f7d0:	79db      	ldrb	r3, [r3, #7]
    f7d2:	021b      	lsls	r3, r3, #8
    f7d4:	4313      	orrs	r3, r2
    f7d6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    f7d8:	683b      	ldr	r3, [r7, #0]
    f7da:	885b      	ldrh	r3, [r3, #2]
    f7dc:	b29b      	uxth	r3, r3
    f7de:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f7e0:	89fa      	ldrh	r2, [r7, #14]
    f7e2:	4b1a      	ldr	r3, [pc, #104]	; (f84c <usbdc_get_str_desc+0x8c>)
    f7e4:	7f1b      	ldrb	r3, [r3, #28]
    f7e6:	3b01      	subs	r3, #1
    f7e8:	4013      	ands	r3, r2
    f7ea:	2b00      	cmp	r3, #0
    f7ec:	bf0c      	ite	eq
    f7ee:	2301      	moveq	r3, #1
    f7f0:	2300      	movne	r3, #0
    f7f2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    f7f4:	4b15      	ldr	r3, [pc, #84]	; (f84c <usbdc_get_str_desc+0x8c>)
    f7f6:	681b      	ldr	r3, [r3, #0]
    f7f8:	6818      	ldr	r0, [r3, #0]
    f7fa:	4b14      	ldr	r3, [pc, #80]	; (f84c <usbdc_get_str_desc+0x8c>)
    f7fc:	681b      	ldr	r3, [r3, #0]
    f7fe:	685b      	ldr	r3, [r3, #4]
    f800:	7b3a      	ldrb	r2, [r7, #12]
    f802:	4619      	mov	r1, r3
    f804:	4b12      	ldr	r3, [pc, #72]	; (f850 <usbdc_get_str_desc+0x90>)
    f806:	4798      	blx	r3
    f808:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    f80a:	68bb      	ldr	r3, [r7, #8]
    f80c:	2b00      	cmp	r3, #0
    f80e:	d101      	bne.n	f814 <usbdc_get_str_desc+0x54>
		return false;
    f810:	2300      	movs	r3, #0
    f812:	e017      	b.n	f844 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    f814:	68bb      	ldr	r3, [r7, #8]
    f816:	781b      	ldrb	r3, [r3, #0]
    f818:	b29b      	uxth	r3, r3
    f81a:	89fa      	ldrh	r2, [r7, #14]
    f81c:	429a      	cmp	r2, r3
    f81e:	d802      	bhi.n	f826 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    f820:	2300      	movs	r3, #0
    f822:	737b      	strb	r3, [r7, #13]
    f824:	e002      	b.n	f82c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    f826:	68bb      	ldr	r3, [r7, #8]
    f828:	781b      	ldrb	r3, [r3, #0]
    f82a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    f82c:	89fa      	ldrh	r2, [r7, #14]
    f82e:	7b7b      	ldrb	r3, [r7, #13]
    f830:	79f8      	ldrb	r0, [r7, #7]
    f832:	68b9      	ldr	r1, [r7, #8]
    f834:	4c07      	ldr	r4, [pc, #28]	; (f854 <usbdc_get_str_desc+0x94>)
    f836:	47a0      	blx	r4
    f838:	4603      	mov	r3, r0
    f83a:	2b00      	cmp	r3, #0
    f83c:	d001      	beq.n	f842 <usbdc_get_str_desc+0x82>
		return false;
    f83e:	2300      	movs	r3, #0
    f840:	e000      	b.n	f844 <usbdc_get_str_desc+0x84>
	}
	return true;
    f842:	2301      	movs	r3, #1
}
    f844:	4618      	mov	r0, r3
    f846:	3714      	adds	r7, #20
    f848:	46bd      	mov	sp, r7
    f84a:	bd90      	pop	{r4, r7, pc}
    f84c:	20001e4c 	.word	0x20001e4c
    f850:	00010545 	.word	0x00010545
    f854:	0001017d 	.word	0x0001017d

0000f858 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    f858:	b580      	push	{r7, lr}
    f85a:	b084      	sub	sp, #16
    f85c:	af00      	add	r7, sp, #0
    f85e:	4603      	mov	r3, r0
    f860:	6039      	str	r1, [r7, #0]
    f862:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    f864:	683b      	ldr	r3, [r7, #0]
    f866:	885b      	ldrh	r3, [r3, #2]
    f868:	b29b      	uxth	r3, r3
    f86a:	0a1b      	lsrs	r3, r3, #8
    f86c:	b29b      	uxth	r3, r3
    f86e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    f870:	7bfb      	ldrb	r3, [r7, #15]
    f872:	2b02      	cmp	r3, #2
    f874:	d00d      	beq.n	f892 <usbdc_get_desc_req+0x3a>
    f876:	2b03      	cmp	r3, #3
    f878:	d012      	beq.n	f8a0 <usbdc_get_desc_req+0x48>
    f87a:	2b01      	cmp	r3, #1
    f87c:	d002      	beq.n	f884 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    f87e:	bf00      	nop
	}
	return false;
    f880:	2300      	movs	r3, #0
    f882:	e013      	b.n	f8ac <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    f884:	79fb      	ldrb	r3, [r7, #7]
    f886:	6839      	ldr	r1, [r7, #0]
    f888:	4618      	mov	r0, r3
    f88a:	4b0a      	ldr	r3, [pc, #40]	; (f8b4 <usbdc_get_desc_req+0x5c>)
    f88c:	4798      	blx	r3
    f88e:	4603      	mov	r3, r0
    f890:	e00c      	b.n	f8ac <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    f892:	79fb      	ldrb	r3, [r7, #7]
    f894:	6839      	ldr	r1, [r7, #0]
    f896:	4618      	mov	r0, r3
    f898:	4b07      	ldr	r3, [pc, #28]	; (f8b8 <usbdc_get_desc_req+0x60>)
    f89a:	4798      	blx	r3
    f89c:	4603      	mov	r3, r0
    f89e:	e005      	b.n	f8ac <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    f8a0:	79fb      	ldrb	r3, [r7, #7]
    f8a2:	6839      	ldr	r1, [r7, #0]
    f8a4:	4618      	mov	r0, r3
    f8a6:	4b05      	ldr	r3, [pc, #20]	; (f8bc <usbdc_get_desc_req+0x64>)
    f8a8:	4798      	blx	r3
    f8aa:	4603      	mov	r3, r0
}
    f8ac:	4618      	mov	r0, r3
    f8ae:	3710      	adds	r7, #16
    f8b0:	46bd      	mov	sp, r7
    f8b2:	bd80      	pop	{r7, pc}
    f8b4:	0000f699 	.word	0x0000f699
    f8b8:	0000f711 	.word	0x0000f711
    f8bc:	0000f7c1 	.word	0x0000f7c1

0000f8c0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    f8c0:	b590      	push	{r4, r7, lr}
    f8c2:	b085      	sub	sp, #20
    f8c4:	af00      	add	r7, sp, #0
    f8c6:	4603      	mov	r3, r0
    f8c8:	6039      	str	r1, [r7, #0]
    f8ca:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f8cc:	683b      	ldr	r3, [r7, #0]
    f8ce:	781b      	ldrb	r3, [r3, #0]
    f8d0:	f003 031f 	and.w	r3, r3, #31
    f8d4:	2b00      	cmp	r3, #0
    f8d6:	db1b      	blt.n	f910 <usbdc_get_status_req+0x50>
    f8d8:	2b01      	cmp	r3, #1
    f8da:	dd02      	ble.n	f8e2 <usbdc_get_status_req+0x22>
    f8dc:	2b02      	cmp	r3, #2
    f8de:	d003      	beq.n	f8e8 <usbdc_get_status_req+0x28>
    f8e0:	e016      	b.n	f910 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    f8e2:	2300      	movs	r3, #0
    f8e4:	60fb      	str	r3, [r7, #12]
		break;
    f8e6:	e015      	b.n	f914 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    f8e8:	683b      	ldr	r3, [r7, #0]
    f8ea:	889b      	ldrh	r3, [r3, #4]
    f8ec:	b29b      	uxth	r3, r3
    f8ee:	b2db      	uxtb	r3, r3
    f8f0:	2102      	movs	r1, #2
    f8f2:	4618      	mov	r0, r3
    f8f4:	4b0f      	ldr	r3, [pc, #60]	; (f934 <usbdc_get_status_req+0x74>)
    f8f6:	4798      	blx	r3
    f8f8:	4603      	mov	r3, r0
    f8fa:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    f8fc:	68fb      	ldr	r3, [r7, #12]
    f8fe:	2b00      	cmp	r3, #0
    f900:	da01      	bge.n	f906 <usbdc_get_status_req+0x46>
			return false;
    f902:	2300      	movs	r3, #0
    f904:	e012      	b.n	f92c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    f906:	68fb      	ldr	r3, [r7, #12]
    f908:	f003 0301 	and.w	r3, r3, #1
    f90c:	60fb      	str	r3, [r7, #12]
		break;
    f90e:	e001      	b.n	f914 <usbdc_get_status_req+0x54>
	default:
		return false;
    f910:	2300      	movs	r3, #0
    f912:	e00b      	b.n	f92c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    f914:	4b08      	ldr	r3, [pc, #32]	; (f938 <usbdc_get_status_req+0x78>)
    f916:	695b      	ldr	r3, [r3, #20]
    f918:	89ba      	ldrh	r2, [r7, #12]
    f91a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    f91c:	4b06      	ldr	r3, [pc, #24]	; (f938 <usbdc_get_status_req+0x78>)
    f91e:	6959      	ldr	r1, [r3, #20]
    f920:	79f8      	ldrb	r0, [r7, #7]
    f922:	2300      	movs	r3, #0
    f924:	2202      	movs	r2, #2
    f926:	4c05      	ldr	r4, [pc, #20]	; (f93c <usbdc_get_status_req+0x7c>)
    f928:	47a0      	blx	r4
	return true;
    f92a:	2301      	movs	r3, #1
}
    f92c:	4618      	mov	r0, r3
    f92e:	3714      	adds	r7, #20
    f930:	46bd      	mov	sp, r7
    f932:	bd90      	pop	{r4, r7, pc}
    f934:	00006971 	.word	0x00006971
    f938:	20001e4c 	.word	0x20001e4c
    f93c:	0001017d 	.word	0x0001017d

0000f940 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    f940:	b590      	push	{r4, r7, lr}
    f942:	b085      	sub	sp, #20
    f944:	af00      	add	r7, sp, #0
    f946:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f948:	4b1f      	ldr	r3, [pc, #124]	; (f9c8 <usbdc_get_interface+0x88>)
    f94a:	691b      	ldr	r3, [r3, #16]
    f94c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    f94e:	4b1e      	ldr	r3, [pc, #120]	; (f9c8 <usbdc_get_interface+0x88>)
    f950:	7f5b      	ldrb	r3, [r3, #29]
    f952:	461a      	mov	r2, r3
    f954:	687b      	ldr	r3, [r7, #4]
    f956:	889b      	ldrh	r3, [r3, #4]
    f958:	b29b      	uxth	r3, r3
    f95a:	fa42 f303 	asr.w	r3, r2, r3
    f95e:	f003 0301 	and.w	r3, r3, #1
    f962:	2b00      	cmp	r3, #0
    f964:	d128      	bne.n	f9b8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    f966:	4b18      	ldr	r3, [pc, #96]	; (f9c8 <usbdc_get_interface+0x88>)
    f968:	695b      	ldr	r3, [r3, #20]
    f96a:	2200      	movs	r2, #0
    f96c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f96e:	4b16      	ldr	r3, [pc, #88]	; (f9c8 <usbdc_get_interface+0x88>)
    f970:	6959      	ldr	r1, [r3, #20]
    f972:	2300      	movs	r3, #0
    f974:	2201      	movs	r2, #1
    f976:	2000      	movs	r0, #0
    f978:	4c14      	ldr	r4, [pc, #80]	; (f9cc <usbdc_get_interface+0x8c>)
    f97a:	47a0      	blx	r4
		return true;
    f97c:	2301      	movs	r3, #1
    f97e:	e01f      	b.n	f9c0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    f980:	68fb      	ldr	r3, [r7, #12]
    f982:	685b      	ldr	r3, [r3, #4]
    f984:	687a      	ldr	r2, [r7, #4]
    f986:	2102      	movs	r1, #2
    f988:	68f8      	ldr	r0, [r7, #12]
    f98a:	4798      	blx	r3
    f98c:	60b8      	str	r0, [r7, #8]
    f98e:	68bb      	ldr	r3, [r7, #8]
    f990:	2b00      	cmp	r3, #0
    f992:	da03      	bge.n	f99c <usbdc_get_interface+0x5c>
			func = func->next;
    f994:	68fb      	ldr	r3, [r7, #12]
    f996:	681b      	ldr	r3, [r3, #0]
    f998:	60fb      	str	r3, [r7, #12]
    f99a:	e00d      	b.n	f9b8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    f99c:	4b0a      	ldr	r3, [pc, #40]	; (f9c8 <usbdc_get_interface+0x88>)
    f99e:	695b      	ldr	r3, [r3, #20]
    f9a0:	68ba      	ldr	r2, [r7, #8]
    f9a2:	b2d2      	uxtb	r2, r2
    f9a4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f9a6:	4b08      	ldr	r3, [pc, #32]	; (f9c8 <usbdc_get_interface+0x88>)
    f9a8:	6959      	ldr	r1, [r3, #20]
    f9aa:	2300      	movs	r3, #0
    f9ac:	2201      	movs	r2, #1
    f9ae:	2000      	movs	r0, #0
    f9b0:	4c06      	ldr	r4, [pc, #24]	; (f9cc <usbdc_get_interface+0x8c>)
    f9b2:	47a0      	blx	r4
			return true;
    f9b4:	2301      	movs	r3, #1
    f9b6:	e003      	b.n	f9c0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    f9b8:	68fb      	ldr	r3, [r7, #12]
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	d1e0      	bne.n	f980 <usbdc_get_interface+0x40>
		}
	}
	return false;
    f9be:	2300      	movs	r3, #0
}
    f9c0:	4618      	mov	r0, r3
    f9c2:	3714      	adds	r7, #20
    f9c4:	46bd      	mov	sp, r7
    f9c6:	bd90      	pop	{r4, r7, pc}
    f9c8:	20001e4c 	.word	0x20001e4c
    f9cc:	0001017d 	.word	0x0001017d

0000f9d0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    f9d0:	b590      	push	{r4, r7, lr}
    f9d2:	b083      	sub	sp, #12
    f9d4:	af00      	add	r7, sp, #0
    f9d6:	4603      	mov	r3, r0
    f9d8:	6039      	str	r1, [r7, #0]
    f9da:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    f9dc:	683b      	ldr	r3, [r7, #0]
    f9de:	785b      	ldrb	r3, [r3, #1]
    f9e0:	2b0a      	cmp	r3, #10
    f9e2:	d83a      	bhi.n	fa5a <usbdc_get_req+0x8a>
    f9e4:	a201      	add	r2, pc, #4	; (adr r2, f9ec <usbdc_get_req+0x1c>)
    f9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f9ea:	bf00      	nop
    f9ec:	0000fa43 	.word	0x0000fa43
    f9f0:	0000fa5b 	.word	0x0000fa5b
    f9f4:	0000fa5b 	.word	0x0000fa5b
    f9f8:	0000fa5b 	.word	0x0000fa5b
    f9fc:	0000fa5b 	.word	0x0000fa5b
    fa00:	0000fa5b 	.word	0x0000fa5b
    fa04:	0000fa19 	.word	0x0000fa19
    fa08:	0000fa5b 	.word	0x0000fa5b
    fa0c:	0000fa27 	.word	0x0000fa27
    fa10:	0000fa5b 	.word	0x0000fa5b
    fa14:	0000fa51 	.word	0x0000fa51
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    fa18:	79fb      	ldrb	r3, [r7, #7]
    fa1a:	6839      	ldr	r1, [r7, #0]
    fa1c:	4618      	mov	r0, r3
    fa1e:	4b11      	ldr	r3, [pc, #68]	; (fa64 <usbdc_get_req+0x94>)
    fa20:	4798      	blx	r3
    fa22:	4603      	mov	r3, r0
    fa24:	e01a      	b.n	fa5c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    fa26:	4b10      	ldr	r3, [pc, #64]	; (fa68 <usbdc_get_req+0x98>)
    fa28:	695b      	ldr	r3, [r3, #20]
    fa2a:	4a0f      	ldr	r2, [pc, #60]	; (fa68 <usbdc_get_req+0x98>)
    fa2c:	7ed2      	ldrb	r2, [r2, #27]
    fa2e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    fa30:	4b0d      	ldr	r3, [pc, #52]	; (fa68 <usbdc_get_req+0x98>)
    fa32:	6959      	ldr	r1, [r3, #20]
    fa34:	79f8      	ldrb	r0, [r7, #7]
    fa36:	2300      	movs	r3, #0
    fa38:	2201      	movs	r2, #1
    fa3a:	4c0c      	ldr	r4, [pc, #48]	; (fa6c <usbdc_get_req+0x9c>)
    fa3c:	47a0      	blx	r4
		return true;
    fa3e:	2301      	movs	r3, #1
    fa40:	e00c      	b.n	fa5c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    fa42:	79fb      	ldrb	r3, [r7, #7]
    fa44:	6839      	ldr	r1, [r7, #0]
    fa46:	4618      	mov	r0, r3
    fa48:	4b09      	ldr	r3, [pc, #36]	; (fa70 <usbdc_get_req+0xa0>)
    fa4a:	4798      	blx	r3
    fa4c:	4603      	mov	r3, r0
    fa4e:	e005      	b.n	fa5c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    fa50:	6838      	ldr	r0, [r7, #0]
    fa52:	4b08      	ldr	r3, [pc, #32]	; (fa74 <usbdc_get_req+0xa4>)
    fa54:	4798      	blx	r3
    fa56:	4603      	mov	r3, r0
    fa58:	e000      	b.n	fa5c <usbdc_get_req+0x8c>
	default:
		return false;
    fa5a:	2300      	movs	r3, #0
	}
}
    fa5c:	4618      	mov	r0, r3
    fa5e:	370c      	adds	r7, #12
    fa60:	46bd      	mov	sp, r7
    fa62:	bd90      	pop	{r4, r7, pc}
    fa64:	0000f859 	.word	0x0000f859
    fa68:	20001e4c 	.word	0x20001e4c
    fa6c:	0001017d 	.word	0x0001017d
    fa70:	0000f8c1 	.word	0x0000f8c1
    fa74:	0000f941 	.word	0x0000f941

0000fa78 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    fa78:	b590      	push	{r4, r7, lr}
    fa7a:	b083      	sub	sp, #12
    fa7c:	af00      	add	r7, sp, #0
    fa7e:	4603      	mov	r3, r0
    fa80:	6039      	str	r1, [r7, #0]
    fa82:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    fa84:	683b      	ldr	r3, [r7, #0]
    fa86:	781b      	ldrb	r3, [r3, #0]
    fa88:	f003 031f 	and.w	r3, r3, #31
    fa8c:	2b02      	cmp	r3, #2
    fa8e:	d116      	bne.n	fabe <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    fa90:	683b      	ldr	r3, [r7, #0]
    fa92:	88db      	ldrh	r3, [r3, #6]
    fa94:	b29b      	uxth	r3, r3
    fa96:	2b00      	cmp	r3, #0
    fa98:	d001      	beq.n	fa9e <usbdc_clear_ftr_req+0x26>
			return false;
    fa9a:	2300      	movs	r3, #0
    fa9c:	e010      	b.n	fac0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    fa9e:	683b      	ldr	r3, [r7, #0]
    faa0:	889b      	ldrh	r3, [r3, #4]
    faa2:	b29b      	uxth	r3, r3
    faa4:	b2db      	uxtb	r3, r3
    faa6:	2100      	movs	r1, #0
    faa8:	4618      	mov	r0, r3
    faaa:	4b07      	ldr	r3, [pc, #28]	; (fac8 <usbdc_clear_ftr_req+0x50>)
    faac:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    faae:	79f8      	ldrb	r0, [r7, #7]
    fab0:	2301      	movs	r3, #1
    fab2:	2200      	movs	r2, #0
    fab4:	2100      	movs	r1, #0
    fab6:	4c05      	ldr	r4, [pc, #20]	; (facc <usbdc_clear_ftr_req+0x54>)
    fab8:	47a0      	blx	r4
		return true;
    faba:	2301      	movs	r3, #1
    fabc:	e000      	b.n	fac0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    fabe:	2300      	movs	r3, #0
	}
}
    fac0:	4618      	mov	r0, r3
    fac2:	370c      	adds	r7, #12
    fac4:	46bd      	mov	sp, r7
    fac6:	bd90      	pop	{r4, r7, pc}
    fac8:	00006971 	.word	0x00006971
    facc:	0001017d 	.word	0x0001017d

0000fad0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    fad0:	b590      	push	{r4, r7, lr}
    fad2:	b083      	sub	sp, #12
    fad4:	af00      	add	r7, sp, #0
    fad6:	4603      	mov	r3, r0
    fad8:	6039      	str	r1, [r7, #0]
    fada:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    fadc:	683b      	ldr	r3, [r7, #0]
    fade:	781b      	ldrb	r3, [r3, #0]
    fae0:	f003 031f 	and.w	r3, r3, #31
    fae4:	2b02      	cmp	r3, #2
    fae6:	d116      	bne.n	fb16 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    fae8:	683b      	ldr	r3, [r7, #0]
    faea:	88db      	ldrh	r3, [r3, #6]
    faec:	b29b      	uxth	r3, r3
    faee:	2b00      	cmp	r3, #0
    faf0:	d001      	beq.n	faf6 <usbdc_set_ftr_req+0x26>
			return false;
    faf2:	2300      	movs	r3, #0
    faf4:	e010      	b.n	fb18 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    faf6:	683b      	ldr	r3, [r7, #0]
    faf8:	889b      	ldrh	r3, [r3, #4]
    fafa:	b29b      	uxth	r3, r3
    fafc:	b2db      	uxtb	r3, r3
    fafe:	2101      	movs	r1, #1
    fb00:	4618      	mov	r0, r3
    fb02:	4b07      	ldr	r3, [pc, #28]	; (fb20 <usbdc_set_ftr_req+0x50>)
    fb04:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    fb06:	79f8      	ldrb	r0, [r7, #7]
    fb08:	2301      	movs	r3, #1
    fb0a:	2200      	movs	r2, #0
    fb0c:	2100      	movs	r1, #0
    fb0e:	4c05      	ldr	r4, [pc, #20]	; (fb24 <usbdc_set_ftr_req+0x54>)
    fb10:	47a0      	blx	r4
		return true;
    fb12:	2301      	movs	r3, #1
    fb14:	e000      	b.n	fb18 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    fb16:	2300      	movs	r3, #0
	}
}
    fb18:	4618      	mov	r0, r3
    fb1a:	370c      	adds	r7, #12
    fb1c:	46bd      	mov	sp, r7
    fb1e:	bd90      	pop	{r4, r7, pc}
    fb20:	00006971 	.word	0x00006971
    fb24:	0001017d 	.word	0x0001017d

0000fb28 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    fb28:	b580      	push	{r7, lr}
    fb2a:	b082      	sub	sp, #8
    fb2c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    fb2e:	4b0a      	ldr	r3, [pc, #40]	; (fb58 <usbdc_unconfig+0x30>)
    fb30:	691b      	ldr	r3, [r3, #16]
    fb32:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    fb34:	e008      	b.n	fb48 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    fb36:	687b      	ldr	r3, [r7, #4]
    fb38:	685b      	ldr	r3, [r3, #4]
    fb3a:	2200      	movs	r2, #0
    fb3c:	2101      	movs	r1, #1
    fb3e:	6878      	ldr	r0, [r7, #4]
    fb40:	4798      	blx	r3
		func = func->next;
    fb42:	687b      	ldr	r3, [r7, #4]
    fb44:	681b      	ldr	r3, [r3, #0]
    fb46:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    fb48:	687b      	ldr	r3, [r7, #4]
    fb4a:	2b00      	cmp	r3, #0
    fb4c:	d1f3      	bne.n	fb36 <usbdc_unconfig+0xe>
	}
}
    fb4e:	bf00      	nop
    fb50:	3708      	adds	r7, #8
    fb52:	46bd      	mov	sp, r7
    fb54:	bd80      	pop	{r7, pc}
    fb56:	bf00      	nop
    fb58:	20001e4c 	.word	0x20001e4c

0000fb5c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    fb5c:	b580      	push	{r7, lr}
    fb5e:	b088      	sub	sp, #32
    fb60:	af00      	add	r7, sp, #0
    fb62:	4603      	mov	r3, r0
    fb64:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    fb66:	2300      	movs	r3, #0
    fb68:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    fb6a:	23ff      	movs	r3, #255	; 0xff
    fb6c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    fb6e:	79fb      	ldrb	r3, [r7, #7]
    fb70:	2b00      	cmp	r3, #0
    fb72:	d103      	bne.n	fb7c <usbdc_set_config+0x20>
		usbdc_unconfig();
    fb74:	4b2e      	ldr	r3, [pc, #184]	; (fc30 <usbdc_set_config+0xd4>)
    fb76:	4798      	blx	r3
		return true;
    fb78:	2301      	movs	r3, #1
    fb7a:	e055      	b.n	fc28 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    fb7c:	69bb      	ldr	r3, [r7, #24]
    fb7e:	2b00      	cmp	r3, #0
    fb80:	d10a      	bne.n	fb98 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    fb82:	4b2c      	ldr	r3, [pc, #176]	; (fc34 <usbdc_set_config+0xd8>)
    fb84:	681b      	ldr	r3, [r3, #0]
    fb86:	6818      	ldr	r0, [r3, #0]
    fb88:	4b2a      	ldr	r3, [pc, #168]	; (fc34 <usbdc_set_config+0xd8>)
    fb8a:	681b      	ldr	r3, [r3, #0]
    fb8c:	685b      	ldr	r3, [r3, #4]
    fb8e:	79fa      	ldrb	r2, [r7, #7]
    fb90:	4619      	mov	r1, r3
    fb92:	4b29      	ldr	r3, [pc, #164]	; (fc38 <usbdc_set_config+0xdc>)
    fb94:	4798      	blx	r3
    fb96:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    fb98:	69bb      	ldr	r3, [r7, #24]
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d101      	bne.n	fba2 <usbdc_set_config+0x46>
		return false;
    fb9e:	2300      	movs	r3, #0
    fba0:	e042      	b.n	fc28 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    fba2:	69b8      	ldr	r0, [r7, #24]
    fba4:	4b25      	ldr	r3, [pc, #148]	; (fc3c <usbdc_set_config+0xe0>)
    fba6:	4798      	blx	r3
    fba8:	4603      	mov	r3, r0
    fbaa:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    fbac:	8abb      	ldrh	r3, [r7, #20]
    fbae:	69ba      	ldr	r2, [r7, #24]
    fbb0:	4413      	add	r3, r2
    fbb2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    fbb4:	693b      	ldr	r3, [r7, #16]
    fbb6:	2204      	movs	r2, #4
    fbb8:	4619      	mov	r1, r3
    fbba:	69b8      	ldr	r0, [r7, #24]
    fbbc:	4b20      	ldr	r3, [pc, #128]	; (fc40 <usbdc_set_config+0xe4>)
    fbbe:	4798      	blx	r3
    fbc0:	4603      	mov	r3, r0
    fbc2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    fbc4:	e02c      	b.n	fc20 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    fbc6:	68fb      	ldr	r3, [r7, #12]
    fbc8:	3302      	adds	r3, #2
    fbca:	781b      	ldrb	r3, [r3, #0]
    fbcc:	7dfa      	ldrb	r2, [r7, #23]
    fbce:	429a      	cmp	r2, r3
    fbd0:	d018      	beq.n	fc04 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    fbd2:	68fb      	ldr	r3, [r7, #12]
    fbd4:	789b      	ldrb	r3, [r3, #2]
    fbd6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    fbd8:	4b16      	ldr	r3, [pc, #88]	; (fc34 <usbdc_set_config+0xd8>)
    fbda:	691b      	ldr	r3, [r3, #16]
    fbdc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fbde:	e00c      	b.n	fbfa <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    fbe0:	69fb      	ldr	r3, [r7, #28]
    fbe2:	685b      	ldr	r3, [r3, #4]
    fbe4:	f107 020c 	add.w	r2, r7, #12
    fbe8:	2100      	movs	r1, #0
    fbea:	69f8      	ldr	r0, [r7, #28]
    fbec:	4798      	blx	r3
    fbee:	4603      	mov	r3, r0
    fbf0:	2b00      	cmp	r3, #0
    fbf2:	d006      	beq.n	fc02 <usbdc_set_config+0xa6>
					func = func->next;
    fbf4:	69fb      	ldr	r3, [r7, #28]
    fbf6:	681b      	ldr	r3, [r3, #0]
    fbf8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    fbfa:	69fb      	ldr	r3, [r7, #28]
    fbfc:	2b00      	cmp	r3, #0
    fbfe:	d1ef      	bne.n	fbe0 <usbdc_set_config+0x84>
    fc00:	e000      	b.n	fc04 <usbdc_set_config+0xa8>
				} else {
					break;
    fc02:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    fc04:	68fb      	ldr	r3, [r7, #12]
    fc06:	4618      	mov	r0, r3
    fc08:	4b0e      	ldr	r3, [pc, #56]	; (fc44 <usbdc_set_config+0xe8>)
    fc0a:	4798      	blx	r3
    fc0c:	4603      	mov	r3, r0
    fc0e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fc10:	68fb      	ldr	r3, [r7, #12]
    fc12:	6939      	ldr	r1, [r7, #16]
    fc14:	2204      	movs	r2, #4
    fc16:	4618      	mov	r0, r3
    fc18:	4b09      	ldr	r3, [pc, #36]	; (fc40 <usbdc_set_config+0xe4>)
    fc1a:	4798      	blx	r3
    fc1c:	4603      	mov	r3, r0
    fc1e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    fc20:	68fb      	ldr	r3, [r7, #12]
    fc22:	2b00      	cmp	r3, #0
    fc24:	d1cf      	bne.n	fbc6 <usbdc_set_config+0x6a>
	}
	return true;
    fc26:	2301      	movs	r3, #1
}
    fc28:	4618      	mov	r0, r3
    fc2a:	3720      	adds	r7, #32
    fc2c:	46bd      	mov	sp, r7
    fc2e:	bd80      	pop	{r7, pc}
    fc30:	0000fb29 	.word	0x0000fb29
    fc34:	20001e4c 	.word	0x20001e4c
    fc38:	000104cd 	.word	0x000104cd
    fc3c:	0000f679 	.word	0x0000f679
    fc40:	0001040d 	.word	0x0001040d
    fc44:	0000f655 	.word	0x0000f655

0000fc48 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    fc48:	b580      	push	{r7, lr}
    fc4a:	b082      	sub	sp, #8
    fc4c:	af00      	add	r7, sp, #0
    fc4e:	4603      	mov	r3, r0
    fc50:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    fc52:	79fb      	ldrb	r3, [r7, #7]
    fc54:	4618      	mov	r0, r3
    fc56:	4b03      	ldr	r3, [pc, #12]	; (fc64 <usbdc_set_address+0x1c>)
    fc58:	4798      	blx	r3
}
    fc5a:	bf00      	nop
    fc5c:	3708      	adds	r7, #8
    fc5e:	46bd      	mov	sp, r7
    fc60:	bd80      	pop	{r7, pc}
    fc62:	bf00      	nop
    fc64:	0000658d 	.word	0x0000658d

0000fc68 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    fc68:	b590      	push	{r4, r7, lr}
    fc6a:	b087      	sub	sp, #28
    fc6c:	af00      	add	r7, sp, #0
    fc6e:	4603      	mov	r3, r0
    fc70:	460a      	mov	r2, r1
    fc72:	80fb      	strh	r3, [r7, #6]
    fc74:	4613      	mov	r3, r2
    fc76:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    fc78:	2300      	movs	r3, #0
    fc7a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    fc7c:	693b      	ldr	r3, [r7, #16]
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d10b      	bne.n	fc9a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    fc82:	4b43      	ldr	r3, [pc, #268]	; (fd90 <usbdc_set_interface+0x128>)
    fc84:	681b      	ldr	r3, [r3, #0]
    fc86:	6818      	ldr	r0, [r3, #0]
    fc88:	4b41      	ldr	r3, [pc, #260]	; (fd90 <usbdc_set_interface+0x128>)
    fc8a:	681b      	ldr	r3, [r3, #0]
    fc8c:	6859      	ldr	r1, [r3, #4]
    fc8e:	4b40      	ldr	r3, [pc, #256]	; (fd90 <usbdc_set_interface+0x128>)
    fc90:	7edb      	ldrb	r3, [r3, #27]
    fc92:	461a      	mov	r2, r3
    fc94:	4b3f      	ldr	r3, [pc, #252]	; (fd94 <usbdc_set_interface+0x12c>)
    fc96:	4798      	blx	r3
    fc98:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    fc9a:	693b      	ldr	r3, [r7, #16]
    fc9c:	2b00      	cmp	r3, #0
    fc9e:	d101      	bne.n	fca4 <usbdc_set_interface+0x3c>
		return false;
    fca0:	2300      	movs	r3, #0
    fca2:	e071      	b.n	fd88 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    fca4:	693b      	ldr	r3, [r7, #16]
    fca6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    fca8:	6938      	ldr	r0, [r7, #16]
    fcaa:	4b3b      	ldr	r3, [pc, #236]	; (fd98 <usbdc_set_interface+0x130>)
    fcac:	4798      	blx	r3
    fcae:	4603      	mov	r3, r0
    fcb0:	461a      	mov	r2, r3
    fcb2:	693b      	ldr	r3, [r7, #16]
    fcb4:	4413      	add	r3, r2
    fcb6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    fcb8:	68bb      	ldr	r3, [r7, #8]
    fcba:	68f9      	ldr	r1, [r7, #12]
    fcbc:	2204      	movs	r2, #4
    fcbe:	4618      	mov	r0, r3
    fcc0:	4b36      	ldr	r3, [pc, #216]	; (fd9c <usbdc_set_interface+0x134>)
    fcc2:	4798      	blx	r3
    fcc4:	6138      	str	r0, [r7, #16]
    fcc6:	693b      	ldr	r3, [r7, #16]
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d113      	bne.n	fcf4 <usbdc_set_interface+0x8c>
		return false;
    fccc:	2300      	movs	r3, #0
    fcce:	e05b      	b.n	fd88 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    fcd0:	68bb      	ldr	r3, [r7, #8]
    fcd2:	4618      	mov	r0, r3
    fcd4:	4b32      	ldr	r3, [pc, #200]	; (fda0 <usbdc_set_interface+0x138>)
    fcd6:	4798      	blx	r3
    fcd8:	4603      	mov	r3, r0
    fcda:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    fcdc:	68bb      	ldr	r3, [r7, #8]
    fcde:	68f9      	ldr	r1, [r7, #12]
    fce0:	2204      	movs	r2, #4
    fce2:	4618      	mov	r0, r3
    fce4:	4b2d      	ldr	r3, [pc, #180]	; (fd9c <usbdc_set_interface+0x134>)
    fce6:	4798      	blx	r3
    fce8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    fcea:	693b      	ldr	r3, [r7, #16]
    fcec:	2b00      	cmp	r3, #0
    fcee:	d101      	bne.n	fcf4 <usbdc_set_interface+0x8c>
			return false;
    fcf0:	2300      	movs	r3, #0
    fcf2:	e049      	b.n	fd88 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    fcf4:	693b      	ldr	r3, [r7, #16]
    fcf6:	3302      	adds	r3, #2
    fcf8:	781b      	ldrb	r3, [r3, #0]
    fcfa:	b29b      	uxth	r3, r3
    fcfc:	88ba      	ldrh	r2, [r7, #4]
    fcfe:	429a      	cmp	r2, r3
    fd00:	d1e6      	bne.n	fcd0 <usbdc_set_interface+0x68>
    fd02:	693b      	ldr	r3, [r7, #16]
    fd04:	3303      	adds	r3, #3
    fd06:	781b      	ldrb	r3, [r3, #0]
    fd08:	b29b      	uxth	r3, r3
    fd0a:	88fa      	ldrh	r2, [r7, #6]
    fd0c:	429a      	cmp	r2, r3
    fd0e:	d1df      	bne.n	fcd0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    fd10:	693b      	ldr	r3, [r7, #16]
    fd12:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    fd14:	4b1e      	ldr	r3, [pc, #120]	; (fd90 <usbdc_set_interface+0x128>)
    fd16:	691b      	ldr	r3, [r3, #16]
    fd18:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    fd1a:	e031      	b.n	fd80 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    fd1c:	697b      	ldr	r3, [r7, #20]
    fd1e:	685b      	ldr	r3, [r3, #4]
    fd20:	f107 0208 	add.w	r2, r7, #8
    fd24:	2101      	movs	r1, #1
    fd26:	6978      	ldr	r0, [r7, #20]
    fd28:	4798      	blx	r3
    fd2a:	4603      	mov	r3, r0
    fd2c:	2b00      	cmp	r3, #0
    fd2e:	d003      	beq.n	fd38 <usbdc_set_interface+0xd0>
			func = func->next;
    fd30:	697b      	ldr	r3, [r7, #20]
    fd32:	681b      	ldr	r3, [r3, #0]
    fd34:	617b      	str	r3, [r7, #20]
    fd36:	e023      	b.n	fd80 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    fd38:	697b      	ldr	r3, [r7, #20]
    fd3a:	685b      	ldr	r3, [r3, #4]
    fd3c:	f107 0208 	add.w	r2, r7, #8
    fd40:	2100      	movs	r1, #0
    fd42:	6978      	ldr	r0, [r7, #20]
    fd44:	4798      	blx	r3
    fd46:	4603      	mov	r3, r0
    fd48:	2b00      	cmp	r3, #0
    fd4a:	d117      	bne.n	fd7c <usbdc_set_interface+0x114>
			if (alt_set) {
    fd4c:	88fb      	ldrh	r3, [r7, #6]
    fd4e:	2b00      	cmp	r3, #0
    fd50:	d00c      	beq.n	fd6c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    fd52:	4b0f      	ldr	r3, [pc, #60]	; (fd90 <usbdc_set_interface+0x128>)
    fd54:	7f5b      	ldrb	r3, [r3, #29]
    fd56:	b25a      	sxtb	r2, r3
    fd58:	88bb      	ldrh	r3, [r7, #4]
    fd5a:	2101      	movs	r1, #1
    fd5c:	fa01 f303 	lsl.w	r3, r1, r3
    fd60:	b25b      	sxtb	r3, r3
    fd62:	4313      	orrs	r3, r2
    fd64:	b25b      	sxtb	r3, r3
    fd66:	b2da      	uxtb	r2, r3
    fd68:	4b09      	ldr	r3, [pc, #36]	; (fd90 <usbdc_set_interface+0x128>)
    fd6a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    fd6c:	2300      	movs	r3, #0
    fd6e:	2200      	movs	r2, #0
    fd70:	2100      	movs	r1, #0
    fd72:	2000      	movs	r0, #0
    fd74:	4c0b      	ldr	r4, [pc, #44]	; (fda4 <usbdc_set_interface+0x13c>)
    fd76:	47a0      	blx	r4
			return true;
    fd78:	2301      	movs	r3, #1
    fd7a:	e005      	b.n	fd88 <usbdc_set_interface+0x120>
		} else {
			return false;
    fd7c:	2300      	movs	r3, #0
    fd7e:	e003      	b.n	fd88 <usbdc_set_interface+0x120>
	while (NULL != func) {
    fd80:	697b      	ldr	r3, [r7, #20]
    fd82:	2b00      	cmp	r3, #0
    fd84:	d1ca      	bne.n	fd1c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    fd86:	2300      	movs	r3, #0
}
    fd88:	4618      	mov	r0, r3
    fd8a:	371c      	adds	r7, #28
    fd8c:	46bd      	mov	sp, r7
    fd8e:	bd90      	pop	{r4, r7, pc}
    fd90:	20001e4c 	.word	0x20001e4c
    fd94:	000104cd 	.word	0x000104cd
    fd98:	0000f679 	.word	0x0000f679
    fd9c:	0001040d 	.word	0x0001040d
    fda0:	0000f655 	.word	0x0000f655
    fda4:	0001017d 	.word	0x0001017d

0000fda8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    fda8:	b590      	push	{r4, r7, lr}
    fdaa:	b083      	sub	sp, #12
    fdac:	af00      	add	r7, sp, #0
    fdae:	4603      	mov	r3, r0
    fdb0:	6039      	str	r1, [r7, #0]
    fdb2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    fdb4:	683b      	ldr	r3, [r7, #0]
    fdb6:	785b      	ldrb	r3, [r3, #1]
    fdb8:	3b01      	subs	r3, #1
    fdba:	2b0a      	cmp	r3, #10
    fdbc:	d85b      	bhi.n	fe76 <usbdc_set_req+0xce>
    fdbe:	a201      	add	r2, pc, #4	; (adr r2, fdc4 <usbdc_set_req+0x1c>)
    fdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fdc4:	0000fe43 	.word	0x0000fe43
    fdc8:	0000fe77 	.word	0x0000fe77
    fdcc:	0000fe51 	.word	0x0000fe51
    fdd0:	0000fe77 	.word	0x0000fe77
    fdd4:	0000fdf1 	.word	0x0000fdf1
    fdd8:	0000fe77 	.word	0x0000fe77
    fddc:	0000fe77 	.word	0x0000fe77
    fde0:	0000fe77 	.word	0x0000fe77
    fde4:	0000fe0b 	.word	0x0000fe0b
    fde8:	0000fe77 	.word	0x0000fe77
    fdec:	0000fe5f 	.word	0x0000fe5f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fdf0:	79f8      	ldrb	r0, [r7, #7]
    fdf2:	2301      	movs	r3, #1
    fdf4:	2200      	movs	r2, #0
    fdf6:	2100      	movs	r1, #0
    fdf8:	4c21      	ldr	r4, [pc, #132]	; (fe80 <usbdc_set_req+0xd8>)
    fdfa:	47a0      	blx	r4
    fdfc:	4603      	mov	r3, r0
    fdfe:	2b00      	cmp	r3, #0
    fe00:	bf0c      	ite	eq
    fe02:	2301      	moveq	r3, #1
    fe04:	2300      	movne	r3, #0
    fe06:	b2db      	uxtb	r3, r3
    fe08:	e036      	b.n	fe78 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    fe0a:	683b      	ldr	r3, [r7, #0]
    fe0c:	885b      	ldrh	r3, [r3, #2]
    fe0e:	b29b      	uxth	r3, r3
    fe10:	b2db      	uxtb	r3, r3
    fe12:	4618      	mov	r0, r3
    fe14:	4b1b      	ldr	r3, [pc, #108]	; (fe84 <usbdc_set_req+0xdc>)
    fe16:	4798      	blx	r3
    fe18:	4603      	mov	r3, r0
    fe1a:	f083 0301 	eor.w	r3, r3, #1
    fe1e:	b2db      	uxtb	r3, r3
    fe20:	2b00      	cmp	r3, #0
    fe22:	d001      	beq.n	fe28 <usbdc_set_req+0x80>
			return false;
    fe24:	2300      	movs	r3, #0
    fe26:	e027      	b.n	fe78 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    fe28:	79f8      	ldrb	r0, [r7, #7]
    fe2a:	2301      	movs	r3, #1
    fe2c:	2200      	movs	r2, #0
    fe2e:	2100      	movs	r1, #0
    fe30:	4c13      	ldr	r4, [pc, #76]	; (fe80 <usbdc_set_req+0xd8>)
    fe32:	47a0      	blx	r4
    fe34:	4603      	mov	r3, r0
    fe36:	2b00      	cmp	r3, #0
    fe38:	bf0c      	ite	eq
    fe3a:	2301      	moveq	r3, #1
    fe3c:	2300      	movne	r3, #0
    fe3e:	b2db      	uxtb	r3, r3
    fe40:	e01a      	b.n	fe78 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    fe42:	79fb      	ldrb	r3, [r7, #7]
    fe44:	6839      	ldr	r1, [r7, #0]
    fe46:	4618      	mov	r0, r3
    fe48:	4b0f      	ldr	r3, [pc, #60]	; (fe88 <usbdc_set_req+0xe0>)
    fe4a:	4798      	blx	r3
    fe4c:	4603      	mov	r3, r0
    fe4e:	e013      	b.n	fe78 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    fe50:	79fb      	ldrb	r3, [r7, #7]
    fe52:	6839      	ldr	r1, [r7, #0]
    fe54:	4618      	mov	r0, r3
    fe56:	4b0d      	ldr	r3, [pc, #52]	; (fe8c <usbdc_set_req+0xe4>)
    fe58:	4798      	blx	r3
    fe5a:	4603      	mov	r3, r0
    fe5c:	e00c      	b.n	fe78 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    fe5e:	683b      	ldr	r3, [r7, #0]
    fe60:	885b      	ldrh	r3, [r3, #2]
    fe62:	b29a      	uxth	r2, r3
    fe64:	683b      	ldr	r3, [r7, #0]
    fe66:	889b      	ldrh	r3, [r3, #4]
    fe68:	b29b      	uxth	r3, r3
    fe6a:	4619      	mov	r1, r3
    fe6c:	4610      	mov	r0, r2
    fe6e:	4b08      	ldr	r3, [pc, #32]	; (fe90 <usbdc_set_req+0xe8>)
    fe70:	4798      	blx	r3
    fe72:	4603      	mov	r3, r0
    fe74:	e000      	b.n	fe78 <usbdc_set_req+0xd0>
	default:
		return false;
    fe76:	2300      	movs	r3, #0
	}
}
    fe78:	4618      	mov	r0, r3
    fe7a:	370c      	adds	r7, #12
    fe7c:	46bd      	mov	sp, r7
    fe7e:	bd90      	pop	{r4, r7, pc}
    fe80:	0001017d 	.word	0x0001017d
    fe84:	0000fb5d 	.word	0x0000fb5d
    fe88:	0000fa79 	.word	0x0000fa79
    fe8c:	0000fad1 	.word	0x0000fad1
    fe90:	0000fc69 	.word	0x0000fc69

0000fe94 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    fe94:	b580      	push	{r7, lr}
    fe96:	b082      	sub	sp, #8
    fe98:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    fe9a:	4b0a      	ldr	r3, [pc, #40]	; (fec4 <usbdc_sof_notify+0x30>)
    fe9c:	685b      	ldr	r3, [r3, #4]
    fe9e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    fea0:	e009      	b.n	feb6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    fea2:	687b      	ldr	r3, [r7, #4]
    fea4:	685b      	ldr	r3, [r3, #4]
    fea6:	2b00      	cmp	r3, #0
    fea8:	d002      	beq.n	feb0 <usbdc_sof_notify+0x1c>
			sof->cb();
    feaa:	687b      	ldr	r3, [r7, #4]
    feac:	685b      	ldr	r3, [r3, #4]
    feae:	4798      	blx	r3
		}
		sof = sof->next;
    feb0:	687b      	ldr	r3, [r7, #4]
    feb2:	681b      	ldr	r3, [r3, #0]
    feb4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    feb6:	687b      	ldr	r3, [r7, #4]
    feb8:	2b00      	cmp	r3, #0
    feba:	d1f2      	bne.n	fea2 <usbdc_sof_notify+0xe>
	}
}
    febc:	bf00      	nop
    febe:	3708      	adds	r7, #8
    fec0:	46bd      	mov	sp, r7
    fec2:	bd80      	pop	{r7, pc}
    fec4:	20001e4c 	.word	0x20001e4c

0000fec8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    fec8:	b580      	push	{r7, lr}
    feca:	b084      	sub	sp, #16
    fecc:	af00      	add	r7, sp, #0
    fece:	4603      	mov	r3, r0
    fed0:	6039      	str	r1, [r7, #0]
    fed2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    fed4:	4b0b      	ldr	r3, [pc, #44]	; (ff04 <usbdc_change_notify+0x3c>)
    fed6:	68db      	ldr	r3, [r3, #12]
    fed8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    feda:	e00c      	b.n	fef6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    fedc:	68fb      	ldr	r3, [r7, #12]
    fede:	685b      	ldr	r3, [r3, #4]
    fee0:	2b00      	cmp	r3, #0
    fee2:	d005      	beq.n	fef0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    fee4:	68fb      	ldr	r3, [r7, #12]
    fee6:	685b      	ldr	r3, [r3, #4]
    fee8:	79fa      	ldrb	r2, [r7, #7]
    feea:	6839      	ldr	r1, [r7, #0]
    feec:	4610      	mov	r0, r2
    feee:	4798      	blx	r3
		}
		cg = cg->next;
    fef0:	68fb      	ldr	r3, [r7, #12]
    fef2:	681b      	ldr	r3, [r3, #0]
    fef4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    fef6:	68fb      	ldr	r3, [r7, #12]
    fef8:	2b00      	cmp	r3, #0
    fefa:	d1ef      	bne.n	fedc <usbdc_change_notify+0x14>
	}
}
    fefc:	bf00      	nop
    fefe:	3710      	adds	r7, #16
    ff00:	46bd      	mov	sp, r7
    ff02:	bd80      	pop	{r7, pc}
    ff04:	20001e4c 	.word	0x20001e4c

0000ff08 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ff08:	b580      	push	{r7, lr}
    ff0a:	b084      	sub	sp, #16
    ff0c:	af00      	add	r7, sp, #0
    ff0e:	4603      	mov	r3, r0
    ff10:	6039      	str	r1, [r7, #0]
    ff12:	71fb      	strb	r3, [r7, #7]
    ff14:	4613      	mov	r3, r2
    ff16:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ff18:	4b12      	ldr	r3, [pc, #72]	; (ff64 <usbdc_request_handler+0x5c>)
    ff1a:	689b      	ldr	r3, [r3, #8]
    ff1c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    ff1e:	e019      	b.n	ff54 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    ff20:	68fb      	ldr	r3, [r7, #12]
    ff22:	685b      	ldr	r3, [r3, #4]
    ff24:	2b00      	cmp	r3, #0
    ff26:	d012      	beq.n	ff4e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    ff28:	68fb      	ldr	r3, [r7, #12]
    ff2a:	685b      	ldr	r3, [r3, #4]
    ff2c:	79ba      	ldrb	r2, [r7, #6]
    ff2e:	79f8      	ldrb	r0, [r7, #7]
    ff30:	6839      	ldr	r1, [r7, #0]
    ff32:	4798      	blx	r3
    ff34:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    ff36:	68bb      	ldr	r3, [r7, #8]
    ff38:	2b00      	cmp	r3, #0
    ff3a:	d101      	bne.n	ff40 <usbdc_request_handler+0x38>
				return true;
    ff3c:	2301      	movs	r3, #1
    ff3e:	e00d      	b.n	ff5c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    ff40:	68bb      	ldr	r3, [r7, #8]
    ff42:	f113 0f0a 	cmn.w	r3, #10
    ff46:	d002      	beq.n	ff4e <usbdc_request_handler+0x46>
				return -1;
    ff48:	f04f 33ff 	mov.w	r3, #4294967295
    ff4c:	e006      	b.n	ff5c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    ff4e:	68fb      	ldr	r3, [r7, #12]
    ff50:	681b      	ldr	r3, [r3, #0]
    ff52:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ff54:	68fb      	ldr	r3, [r7, #12]
    ff56:	2b00      	cmp	r3, #0
    ff58:	d1e2      	bne.n	ff20 <usbdc_request_handler+0x18>
	}
	return false;
    ff5a:	2300      	movs	r3, #0
}
    ff5c:	4618      	mov	r0, r3
    ff5e:	3710      	adds	r7, #16
    ff60:	46bd      	mov	sp, r7
    ff62:	bd80      	pop	{r7, pc}
    ff64:	20001e4c 	.word	0x20001e4c

0000ff68 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ff68:	b580      	push	{r7, lr}
    ff6a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    ff6c:	4b01      	ldr	r3, [pc, #4]	; (ff74 <usbd_sof_cb+0xc>)
    ff6e:	4798      	blx	r3
}
    ff70:	bf00      	nop
    ff72:	bd80      	pop	{r7, pc}
    ff74:	0000fe95 	.word	0x0000fe95

0000ff78 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ff78:	b580      	push	{r7, lr}
    ff7a:	b082      	sub	sp, #8
    ff7c:	af00      	add	r7, sp, #0
    ff7e:	4603      	mov	r3, r0
    ff80:	6039      	str	r1, [r7, #0]
    ff82:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    ff84:	79fb      	ldrb	r3, [r7, #7]
    ff86:	2200      	movs	r2, #0
    ff88:	6839      	ldr	r1, [r7, #0]
    ff8a:	4618      	mov	r0, r3
    ff8c:	4b14      	ldr	r3, [pc, #80]	; (ffe0 <usbdc_cb_ctl_req+0x68>)
    ff8e:	4798      	blx	r3
    ff90:	4603      	mov	r3, r0
    ff92:	f1b3 3fff 	cmp.w	r3, #4294967295
    ff96:	d00b      	beq.n	ffb0 <usbdc_cb_ctl_req+0x38>
    ff98:	2b01      	cmp	r3, #1
    ff9a:	d007      	beq.n	ffac <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    ff9c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ff9e:	683b      	ldr	r3, [r7, #0]
    ffa0:	781b      	ldrb	r3, [r3, #0]
    ffa2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	d007      	beq.n	ffba <usbdc_cb_ctl_req+0x42>
    ffaa:	e003      	b.n	ffb4 <usbdc_cb_ctl_req+0x3c>
		return true;
    ffac:	2301      	movs	r3, #1
    ffae:	e013      	b.n	ffd8 <usbdc_cb_ctl_req+0x60>
		return false;
    ffb0:	2300      	movs	r3, #0
    ffb2:	e011      	b.n	ffd8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ffb4:	2b80      	cmp	r3, #128	; 0x80
    ffb6:	d007      	beq.n	ffc8 <usbdc_cb_ctl_req+0x50>
    ffb8:	e00d      	b.n	ffd6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ffba:	79fb      	ldrb	r3, [r7, #7]
    ffbc:	6839      	ldr	r1, [r7, #0]
    ffbe:	4618      	mov	r0, r3
    ffc0:	4b08      	ldr	r3, [pc, #32]	; (ffe4 <usbdc_cb_ctl_req+0x6c>)
    ffc2:	4798      	blx	r3
    ffc4:	4603      	mov	r3, r0
    ffc6:	e007      	b.n	ffd8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    ffc8:	79fb      	ldrb	r3, [r7, #7]
    ffca:	6839      	ldr	r1, [r7, #0]
    ffcc:	4618      	mov	r0, r3
    ffce:	4b06      	ldr	r3, [pc, #24]	; (ffe8 <usbdc_cb_ctl_req+0x70>)
    ffd0:	4798      	blx	r3
    ffd2:	4603      	mov	r3, r0
    ffd4:	e000      	b.n	ffd8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ffd6:	2300      	movs	r3, #0
	}
}
    ffd8:	4618      	mov	r0, r3
    ffda:	3708      	adds	r7, #8
    ffdc:	46bd      	mov	sp, r7
    ffde:	bd80      	pop	{r7, pc}
    ffe0:	0000ff09 	.word	0x0000ff09
    ffe4:	0000fda9 	.word	0x0000fda9
    ffe8:	0000f9d1 	.word	0x0000f9d1

0000ffec <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    ffec:	b580      	push	{r7, lr}
    ffee:	b082      	sub	sp, #8
    fff0:	af00      	add	r7, sp, #0
    fff2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    fff4:	687b      	ldr	r3, [r7, #4]
    fff6:	781b      	ldrb	r3, [r3, #0]
    fff8:	2b00      	cmp	r3, #0
    fffa:	d135      	bne.n	10068 <STACK_SIZE+0x68>
		return;
	}
	switch (req->bRequest) {
    fffc:	687b      	ldr	r3, [r7, #4]
    fffe:	785b      	ldrb	r3, [r3, #1]
   10000:	2b05      	cmp	r3, #5
   10002:	d019      	beq.n	10038 <STACK_SIZE+0x38>
   10004:	2b09      	cmp	r3, #9
   10006:	d000      	beq.n	1000a <STACK_SIZE+0xa>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   10008:	e02f      	b.n	1006a <STACK_SIZE+0x6a>
		usbdc.cfg_value = req->wValue;
   1000a:	687b      	ldr	r3, [r7, #4]
   1000c:	885b      	ldrh	r3, [r3, #2]
   1000e:	b29b      	uxth	r3, r3
   10010:	b2da      	uxtb	r2, r3
   10012:	4b17      	ldr	r3, [pc, #92]	; (10070 <STACK_SIZE+0x70>)
   10014:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   10016:	687b      	ldr	r3, [r7, #4]
   10018:	885b      	ldrh	r3, [r3, #2]
   1001a:	b29b      	uxth	r3, r3
   1001c:	2b00      	cmp	r3, #0
   1001e:	d001      	beq.n	10024 <STACK_SIZE+0x24>
   10020:	2204      	movs	r2, #4
   10022:	e000      	b.n	10026 <STACK_SIZE+0x26>
   10024:	2203      	movs	r2, #3
   10026:	4b12      	ldr	r3, [pc, #72]	; (10070 <STACK_SIZE+0x70>)
   10028:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   1002a:	4b11      	ldr	r3, [pc, #68]	; (10070 <STACK_SIZE+0x70>)
   1002c:	7e9b      	ldrb	r3, [r3, #26]
   1002e:	4619      	mov	r1, r3
   10030:	2001      	movs	r0, #1
   10032:	4b10      	ldr	r3, [pc, #64]	; (10074 <STACK_SIZE+0x74>)
   10034:	4798      	blx	r3
		break;
   10036:	e018      	b.n	1006a <STACK_SIZE+0x6a>
		usbdc_set_address(req->wValue);
   10038:	687b      	ldr	r3, [r7, #4]
   1003a:	885b      	ldrh	r3, [r3, #2]
   1003c:	b29b      	uxth	r3, r3
   1003e:	b2db      	uxtb	r3, r3
   10040:	4618      	mov	r0, r3
   10042:	4b0d      	ldr	r3, [pc, #52]	; (10078 <STACK_SIZE+0x78>)
   10044:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   10046:	687b      	ldr	r3, [r7, #4]
   10048:	885b      	ldrh	r3, [r3, #2]
   1004a:	b29b      	uxth	r3, r3
   1004c:	2b00      	cmp	r3, #0
   1004e:	d001      	beq.n	10054 <STACK_SIZE+0x54>
   10050:	2203      	movs	r2, #3
   10052:	e000      	b.n	10056 <STACK_SIZE+0x56>
   10054:	2202      	movs	r2, #2
   10056:	4b06      	ldr	r3, [pc, #24]	; (10070 <STACK_SIZE+0x70>)
   10058:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   1005a:	4b05      	ldr	r3, [pc, #20]	; (10070 <STACK_SIZE+0x70>)
   1005c:	7e9b      	ldrb	r3, [r3, #26]
   1005e:	4619      	mov	r1, r3
   10060:	2001      	movs	r0, #1
   10062:	4b04      	ldr	r3, [pc, #16]	; (10074 <STACK_SIZE+0x74>)
   10064:	4798      	blx	r3
		break;
   10066:	e000      	b.n	1006a <STACK_SIZE+0x6a>
		return;
   10068:	bf00      	nop
	}
}
   1006a:	3708      	adds	r7, #8
   1006c:	46bd      	mov	sp, r7
   1006e:	bd80      	pop	{r7, pc}
   10070:	20001e4c 	.word	0x20001e4c
   10074:	0000fec9 	.word	0x0000fec9
   10078:	0000fc49 	.word	0x0000fc49

0001007c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   1007c:	b580      	push	{r7, lr}
   1007e:	b082      	sub	sp, #8
   10080:	af00      	add	r7, sp, #0
   10082:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   10084:	2201      	movs	r2, #1
   10086:	6879      	ldr	r1, [r7, #4]
   10088:	2000      	movs	r0, #0
   1008a:	4b03      	ldr	r3, [pc, #12]	; (10098 <usbdc_ctrl_data_end+0x1c>)
   1008c:	4798      	blx	r3
	return false;
   1008e:	2300      	movs	r3, #0
}
   10090:	4618      	mov	r0, r3
   10092:	3708      	adds	r7, #8
   10094:	46bd      	mov	sp, r7
   10096:	bd80      	pop	{r7, pc}
   10098:	0000ff09 	.word	0x0000ff09

0001009c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   1009c:	b580      	push	{r7, lr}
   1009e:	b082      	sub	sp, #8
   100a0:	af00      	add	r7, sp, #0
   100a2:	4603      	mov	r3, r0
   100a4:	603a      	str	r2, [r7, #0]
   100a6:	71fb      	strb	r3, [r7, #7]
   100a8:	460b      	mov	r3, r1
   100aa:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   100ac:	79bb      	ldrb	r3, [r7, #6]
   100ae:	2b00      	cmp	r3, #0
   100b0:	d002      	beq.n	100b8 <usbdc_cb_ctl_done+0x1c>
   100b2:	2b01      	cmp	r3, #1
   100b4:	d004      	beq.n	100c0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   100b6:	e008      	b.n	100ca <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   100b8:	6838      	ldr	r0, [r7, #0]
   100ba:	4b06      	ldr	r3, [pc, #24]	; (100d4 <usbdc_cb_ctl_done+0x38>)
   100bc:	4798      	blx	r3
		break;
   100be:	e004      	b.n	100ca <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   100c0:	6838      	ldr	r0, [r7, #0]
   100c2:	4b05      	ldr	r3, [pc, #20]	; (100d8 <usbdc_cb_ctl_done+0x3c>)
   100c4:	4798      	blx	r3
   100c6:	4603      	mov	r3, r0
   100c8:	e000      	b.n	100cc <usbdc_cb_ctl_done+0x30>
	}
	return false;
   100ca:	2300      	movs	r3, #0
}
   100cc:	4618      	mov	r0, r3
   100ce:	3708      	adds	r7, #8
   100d0:	46bd      	mov	sp, r7
   100d2:	bd80      	pop	{r7, pc}
   100d4:	0000ffed 	.word	0x0000ffed
   100d8:	0001007d 	.word	0x0001007d

000100dc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   100dc:	b580      	push	{r7, lr}
   100de:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   100e0:	4b10      	ldr	r3, [pc, #64]	; (10124 <usbdc_reset+0x48>)
   100e2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   100e4:	4b10      	ldr	r3, [pc, #64]	; (10128 <usbdc_reset+0x4c>)
   100e6:	2202      	movs	r2, #2
   100e8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   100ea:	4b0f      	ldr	r3, [pc, #60]	; (10128 <usbdc_reset+0x4c>)
   100ec:	2200      	movs	r2, #0
   100ee:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   100f0:	4b0d      	ldr	r3, [pc, #52]	; (10128 <usbdc_reset+0x4c>)
   100f2:	2200      	movs	r2, #0
   100f4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   100f6:	2000      	movs	r0, #0
   100f8:	4b0c      	ldr	r3, [pc, #48]	; (1012c <usbdc_reset+0x50>)
   100fa:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   100fc:	4b0a      	ldr	r3, [pc, #40]	; (10128 <usbdc_reset+0x4c>)
   100fe:	7f1b      	ldrb	r3, [r3, #28]
   10100:	4618      	mov	r0, r3
   10102:	4b0b      	ldr	r3, [pc, #44]	; (10130 <usbdc_reset+0x54>)
   10104:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   10106:	4a0b      	ldr	r2, [pc, #44]	; (10134 <usbdc_reset+0x58>)
   10108:	2100      	movs	r1, #0
   1010a:	2000      	movs	r0, #0
   1010c:	4b0a      	ldr	r3, [pc, #40]	; (10138 <usbdc_reset+0x5c>)
   1010e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   10110:	4a0a      	ldr	r2, [pc, #40]	; (1013c <usbdc_reset+0x60>)
   10112:	2102      	movs	r1, #2
   10114:	2000      	movs	r0, #0
   10116:	4b08      	ldr	r3, [pc, #32]	; (10138 <usbdc_reset+0x5c>)
   10118:	4798      	blx	r3
	usb_d_ep_enable(0);
   1011a:	2000      	movs	r0, #0
   1011c:	4b08      	ldr	r3, [pc, #32]	; (10140 <usbdc_reset+0x64>)
   1011e:	4798      	blx	r3
}
   10120:	bf00      	nop
   10122:	bd80      	pop	{r7, pc}
   10124:	0000fb29 	.word	0x0000fb29
   10128:	20001e4c 	.word	0x20001e4c
   1012c:	00006671 	.word	0x00006671
   10130:	000065ad 	.word	0x000065ad
   10134:	0000ff79 	.word	0x0000ff79
   10138:	000069c5 	.word	0x000069c5
   1013c:	0001009d 	.word	0x0001009d
   10140:	000066c1 	.word	0x000066c1

00010144 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   10144:	b580      	push	{r7, lr}
   10146:	b082      	sub	sp, #8
   10148:	af00      	add	r7, sp, #0
   1014a:	4603      	mov	r3, r0
   1014c:	6039      	str	r1, [r7, #0]
   1014e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   10150:	79fb      	ldrb	r3, [r7, #7]
   10152:	2b00      	cmp	r3, #0
   10154:	d002      	beq.n	1015c <usbd_event_cb+0x18>
   10156:	2b01      	cmp	r3, #1
   10158:	d005      	beq.n	10166 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   1015a:	e007      	b.n	1016c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   1015c:	6839      	ldr	r1, [r7, #0]
   1015e:	2000      	movs	r0, #0
   10160:	4b04      	ldr	r3, [pc, #16]	; (10174 <usbd_event_cb+0x30>)
   10162:	4798      	blx	r3
		break;
   10164:	e002      	b.n	1016c <usbd_event_cb+0x28>
		usbdc_reset();
   10166:	4b04      	ldr	r3, [pc, #16]	; (10178 <usbd_event_cb+0x34>)
   10168:	4798      	blx	r3
		break;
   1016a:	bf00      	nop
	}
}
   1016c:	bf00      	nop
   1016e:	3708      	adds	r7, #8
   10170:	46bd      	mov	sp, r7
   10172:	bd80      	pop	{r7, pc}
   10174:	0000fec9 	.word	0x0000fec9
   10178:	000100dd 	.word	0x000100dd

0001017c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   1017c:	b580      	push	{r7, lr}
   1017e:	b088      	sub	sp, #32
   10180:	af00      	add	r7, sp, #0
   10182:	60b9      	str	r1, [r7, #8]
   10184:	607a      	str	r2, [r7, #4]
   10186:	461a      	mov	r2, r3
   10188:	4603      	mov	r3, r0
   1018a:	73fb      	strb	r3, [r7, #15]
   1018c:	4613      	mov	r3, r2
   1018e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   10190:	68bb      	ldr	r3, [r7, #8]
   10192:	617b      	str	r3, [r7, #20]
   10194:	687b      	ldr	r3, [r7, #4]
   10196:	61bb      	str	r3, [r7, #24]
   10198:	7bfb      	ldrb	r3, [r7, #15]
   1019a:	773b      	strb	r3, [r7, #28]
   1019c:	7bbb      	ldrb	r3, [r7, #14]
   1019e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   101a0:	f107 0314 	add.w	r3, r7, #20
   101a4:	4618      	mov	r0, r3
   101a6:	4b03      	ldr	r3, [pc, #12]	; (101b4 <usbdc_xfer+0x38>)
   101a8:	4798      	blx	r3
   101aa:	4603      	mov	r3, r0
}
   101ac:	4618      	mov	r0, r3
   101ae:	3720      	adds	r7, #32
   101b0:	46bd      	mov	sp, r7
   101b2:	bd80      	pop	{r7, pc}
   101b4:	00006731 	.word	0x00006731

000101b8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   101b8:	b580      	push	{r7, lr}
   101ba:	b082      	sub	sp, #8
   101bc:	af00      	add	r7, sp, #0
   101be:	4603      	mov	r3, r0
   101c0:	6039      	str	r1, [r7, #0]
   101c2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   101c4:	79fb      	ldrb	r3, [r7, #7]
   101c6:	2b01      	cmp	r3, #1
   101c8:	d009      	beq.n	101de <usbdc_register_handler+0x26>
   101ca:	2b02      	cmp	r3, #2
   101cc:	d00c      	beq.n	101e8 <usbdc_register_handler+0x30>
   101ce:	2b00      	cmp	r3, #0
   101d0:	d000      	beq.n	101d4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   101d2:	e00e      	b.n	101f2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   101d4:	6839      	ldr	r1, [r7, #0]
   101d6:	4809      	ldr	r0, [pc, #36]	; (101fc <usbdc_register_handler+0x44>)
   101d8:	4b09      	ldr	r3, [pc, #36]	; (10200 <usbdc_register_handler+0x48>)
   101da:	4798      	blx	r3
		break;
   101dc:	e009      	b.n	101f2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   101de:	6839      	ldr	r1, [r7, #0]
   101e0:	4808      	ldr	r0, [pc, #32]	; (10204 <usbdc_register_handler+0x4c>)
   101e2:	4b07      	ldr	r3, [pc, #28]	; (10200 <usbdc_register_handler+0x48>)
   101e4:	4798      	blx	r3
		break;
   101e6:	e004      	b.n	101f2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   101e8:	6839      	ldr	r1, [r7, #0]
   101ea:	4807      	ldr	r0, [pc, #28]	; (10208 <usbdc_register_handler+0x50>)
   101ec:	4b04      	ldr	r3, [pc, #16]	; (10200 <usbdc_register_handler+0x48>)
   101ee:	4798      	blx	r3
		break;
   101f0:	bf00      	nop
	}
}
   101f2:	bf00      	nop
   101f4:	3708      	adds	r7, #8
   101f6:	46bd      	mov	sp, r7
   101f8:	bd80      	pop	{r7, pc}
   101fa:	bf00      	nop
   101fc:	20001e50 	.word	0x20001e50
   10200:	00006b1d 	.word	0x00006b1d
   10204:	20001e54 	.word	0x20001e54
   10208:	20001e58 	.word	0x20001e58

0001020c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   1020c:	b580      	push	{r7, lr}
   1020e:	b084      	sub	sp, #16
   10210:	af00      	add	r7, sp, #0
   10212:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   10214:	687b      	ldr	r3, [r7, #4]
   10216:	2b00      	cmp	r3, #0
   10218:	bf14      	ite	ne
   1021a:	2301      	movne	r3, #1
   1021c:	2300      	moveq	r3, #0
   1021e:	b2db      	uxtb	r3, r3
   10220:	f240 3255 	movw	r2, #853	; 0x355
   10224:	4910      	ldr	r1, [pc, #64]	; (10268 <usbdc_init+0x5c>)
   10226:	4618      	mov	r0, r3
   10228:	4b10      	ldr	r3, [pc, #64]	; (1026c <usbdc_init+0x60>)
   1022a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   1022c:	4b10      	ldr	r3, [pc, #64]	; (10270 <usbdc_init+0x64>)
   1022e:	4798      	blx	r3
   10230:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   10232:	68fb      	ldr	r3, [r7, #12]
   10234:	2b00      	cmp	r3, #0
   10236:	da01      	bge.n	1023c <usbdc_init+0x30>
		return rc;
   10238:	68fb      	ldr	r3, [r7, #12]
   1023a:	e010      	b.n	1025e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   1023c:	2220      	movs	r2, #32
   1023e:	2100      	movs	r1, #0
   10240:	480c      	ldr	r0, [pc, #48]	; (10274 <usbdc_init+0x68>)
   10242:	4b0d      	ldr	r3, [pc, #52]	; (10278 <usbdc_init+0x6c>)
   10244:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   10246:	4a0b      	ldr	r2, [pc, #44]	; (10274 <usbdc_init+0x68>)
   10248:	687b      	ldr	r3, [r7, #4]
   1024a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   1024c:	490b      	ldr	r1, [pc, #44]	; (1027c <usbdc_init+0x70>)
   1024e:	2000      	movs	r0, #0
   10250:	4b0b      	ldr	r3, [pc, #44]	; (10280 <usbdc_init+0x74>)
   10252:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   10254:	490b      	ldr	r1, [pc, #44]	; (10284 <usbdc_init+0x78>)
   10256:	2001      	movs	r0, #1
   10258:	4b09      	ldr	r3, [pc, #36]	; (10280 <usbdc_init+0x74>)
   1025a:	4798      	blx	r3

	return 0;
   1025c:	2300      	movs	r3, #0
}
   1025e:	4618      	mov	r0, r3
   10260:	3710      	adds	r7, #16
   10262:	46bd      	mov	sp, r7
   10264:	bd80      	pop	{r7, pc}
   10266:	bf00      	nop
   10268:	00013e2c 	.word	0x00013e2c
   1026c:	00006a41 	.word	0x00006a41
   10270:	00006499 	.word	0x00006499
   10274:	20001e4c 	.word	0x20001e4c
   10278:	000126d9 	.word	0x000126d9
   1027c:	0000ff69 	.word	0x0000ff69
   10280:	00006545 	.word	0x00006545
   10284:	00010145 	.word	0x00010145

00010288 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   10288:	b580      	push	{r7, lr}
   1028a:	b082      	sub	sp, #8
   1028c:	af00      	add	r7, sp, #0
   1028e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   10290:	6879      	ldr	r1, [r7, #4]
   10292:	4803      	ldr	r0, [pc, #12]	; (102a0 <usbdc_register_function+0x18>)
   10294:	4b03      	ldr	r3, [pc, #12]	; (102a4 <usbdc_register_function+0x1c>)
   10296:	4798      	blx	r3
}
   10298:	bf00      	nop
   1029a:	3708      	adds	r7, #8
   1029c:	46bd      	mov	sp, r7
   1029e:	bd80      	pop	{r7, pc}
   102a0:	20001e5c 	.word	0x20001e5c
   102a4:	00006b1d 	.word	0x00006b1d

000102a8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   102a8:	b580      	push	{r7, lr}
   102aa:	b082      	sub	sp, #8
   102ac:	af00      	add	r7, sp, #0
   102ae:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   102b0:	4b0f      	ldr	r3, [pc, #60]	; (102f0 <usbdc_start+0x48>)
   102b2:	7e9b      	ldrb	r3, [r3, #26]
   102b4:	2b00      	cmp	r3, #0
   102b6:	d002      	beq.n	102be <usbdc_start+0x16>
		return ERR_BUSY;
   102b8:	f06f 0303 	mvn.w	r3, #3
   102bc:	e013      	b.n	102e6 <usbdc_start+0x3e>
	}

	if (desces) {
   102be:	687b      	ldr	r3, [r7, #4]
   102c0:	2b00      	cmp	r3, #0
   102c2:	d00e      	beq.n	102e2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   102c4:	4a0a      	ldr	r2, [pc, #40]	; (102f0 <usbdc_start+0x48>)
   102c6:	687b      	ldr	r3, [r7, #4]
   102c8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   102ca:	687b      	ldr	r3, [r7, #4]
   102cc:	681b      	ldr	r3, [r3, #0]
   102ce:	79da      	ldrb	r2, [r3, #7]
   102d0:	4b07      	ldr	r3, [pc, #28]	; (102f0 <usbdc_start+0x48>)
   102d2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   102d4:	4b06      	ldr	r3, [pc, #24]	; (102f0 <usbdc_start+0x48>)
   102d6:	2201      	movs	r2, #1
   102d8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   102da:	4b06      	ldr	r3, [pc, #24]	; (102f4 <usbdc_start+0x4c>)
   102dc:	4798      	blx	r3
	return ERR_NONE;
   102de:	2300      	movs	r3, #0
   102e0:	e001      	b.n	102e6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   102e2:	f06f 0308 	mvn.w	r3, #8
}
   102e6:	4618      	mov	r0, r3
   102e8:	3708      	adds	r7, #8
   102ea:	46bd      	mov	sp, r7
   102ec:	bd80      	pop	{r7, pc}
   102ee:	bf00      	nop
   102f0:	20001e4c 	.word	0x20001e4c
   102f4:	00006569 	.word	0x00006569

000102f8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   102f8:	b580      	push	{r7, lr}
   102fa:	af00      	add	r7, sp, #0
	usb_d_attach();
   102fc:	4b01      	ldr	r3, [pc, #4]	; (10304 <usbdc_attach+0xc>)
   102fe:	4798      	blx	r3
}
   10300:	bf00      	nop
   10302:	bd80      	pop	{r7, pc}
   10304:	0000657d 	.word	0x0000657d

00010308 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   10308:	b480      	push	{r7}
   1030a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   1030c:	4b03      	ldr	r3, [pc, #12]	; (1031c <usbdc_get_ctrl_buffer+0x14>)
   1030e:	695b      	ldr	r3, [r3, #20]
}
   10310:	4618      	mov	r0, r3
   10312:	46bd      	mov	sp, r7
   10314:	f85d 7b04 	ldr.w	r7, [sp], #4
   10318:	4770      	bx	lr
   1031a:	bf00      	nop
   1031c:	20001e4c 	.word	0x20001e4c

00010320 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   10320:	b480      	push	{r7}
   10322:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   10324:	4b07      	ldr	r3, [pc, #28]	; (10344 <usbdc_get_state+0x24>)
   10326:	7e9b      	ldrb	r3, [r3, #26]
   10328:	f003 0310 	and.w	r3, r3, #16
   1032c:	2b00      	cmp	r3, #0
   1032e:	d001      	beq.n	10334 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   10330:	2310      	movs	r3, #16
   10332:	e001      	b.n	10338 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   10334:	4b03      	ldr	r3, [pc, #12]	; (10344 <usbdc_get_state+0x24>)
   10336:	7e9b      	ldrb	r3, [r3, #26]
}
   10338:	4618      	mov	r0, r3
   1033a:	46bd      	mov	sp, r7
   1033c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10340:	4770      	bx	lr
   10342:	bf00      	nop
   10344:	20001e4c 	.word	0x20001e4c

00010348 <usb_get_u16>:
{
   10348:	b480      	push	{r7}
   1034a:	b083      	sub	sp, #12
   1034c:	af00      	add	r7, sp, #0
   1034e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10350:	687b      	ldr	r3, [r7, #4]
   10352:	781b      	ldrb	r3, [r3, #0]
   10354:	b29a      	uxth	r2, r3
   10356:	687b      	ldr	r3, [r7, #4]
   10358:	3301      	adds	r3, #1
   1035a:	781b      	ldrb	r3, [r3, #0]
   1035c:	b29b      	uxth	r3, r3
   1035e:	021b      	lsls	r3, r3, #8
   10360:	b29b      	uxth	r3, r3
   10362:	4413      	add	r3, r2
   10364:	b29b      	uxth	r3, r3
}
   10366:	4618      	mov	r0, r3
   10368:	370c      	adds	r7, #12
   1036a:	46bd      	mov	sp, r7
   1036c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10370:	4770      	bx	lr

00010372 <usb_desc_len>:
{
   10372:	b480      	push	{r7}
   10374:	b083      	sub	sp, #12
   10376:	af00      	add	r7, sp, #0
   10378:	6078      	str	r0, [r7, #4]
	return desc[0];
   1037a:	687b      	ldr	r3, [r7, #4]
   1037c:	781b      	ldrb	r3, [r3, #0]
}
   1037e:	4618      	mov	r0, r3
   10380:	370c      	adds	r7, #12
   10382:	46bd      	mov	sp, r7
   10384:	f85d 7b04 	ldr.w	r7, [sp], #4
   10388:	4770      	bx	lr

0001038a <usb_desc_type>:
{
   1038a:	b480      	push	{r7}
   1038c:	b083      	sub	sp, #12
   1038e:	af00      	add	r7, sp, #0
   10390:	6078      	str	r0, [r7, #4]
	return desc[1];
   10392:	687b      	ldr	r3, [r7, #4]
   10394:	3301      	adds	r3, #1
   10396:	781b      	ldrb	r3, [r3, #0]
}
   10398:	4618      	mov	r0, r3
   1039a:	370c      	adds	r7, #12
   1039c:	46bd      	mov	sp, r7
   1039e:	f85d 7b04 	ldr.w	r7, [sp], #4
   103a2:	4770      	bx	lr

000103a4 <usb_desc_next>:
{
   103a4:	b580      	push	{r7, lr}
   103a6:	b082      	sub	sp, #8
   103a8:	af00      	add	r7, sp, #0
   103aa:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   103ac:	6878      	ldr	r0, [r7, #4]
   103ae:	4b05      	ldr	r3, [pc, #20]	; (103c4 <usb_desc_next+0x20>)
   103b0:	4798      	blx	r3
   103b2:	4603      	mov	r3, r0
   103b4:	461a      	mov	r2, r3
   103b6:	687b      	ldr	r3, [r7, #4]
   103b8:	4413      	add	r3, r2
}
   103ba:	4618      	mov	r0, r3
   103bc:	3708      	adds	r7, #8
   103be:	46bd      	mov	sp, r7
   103c0:	bd80      	pop	{r7, pc}
   103c2:	bf00      	nop
   103c4:	00010373 	.word	0x00010373

000103c8 <usb_cfg_desc_total_len>:
{
   103c8:	b580      	push	{r7, lr}
   103ca:	b082      	sub	sp, #8
   103cc:	af00      	add	r7, sp, #0
   103ce:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   103d0:	687b      	ldr	r3, [r7, #4]
   103d2:	3302      	adds	r3, #2
   103d4:	4618      	mov	r0, r3
   103d6:	4b03      	ldr	r3, [pc, #12]	; (103e4 <usb_cfg_desc_total_len+0x1c>)
   103d8:	4798      	blx	r3
   103da:	4603      	mov	r3, r0
}
   103dc:	4618      	mov	r0, r3
   103de:	3708      	adds	r7, #8
   103e0:	46bd      	mov	sp, r7
   103e2:	bd80      	pop	{r7, pc}
   103e4:	00010349 	.word	0x00010349

000103e8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   103e8:	b580      	push	{r7, lr}
   103ea:	b082      	sub	sp, #8
   103ec:	af00      	add	r7, sp, #0
   103ee:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   103f0:	6878      	ldr	r0, [r7, #4]
   103f2:	4b05      	ldr	r3, [pc, #20]	; (10408 <usb_cfg_desc_next+0x20>)
   103f4:	4798      	blx	r3
   103f6:	4603      	mov	r3, r0
   103f8:	461a      	mov	r2, r3
   103fa:	687b      	ldr	r3, [r7, #4]
   103fc:	4413      	add	r3, r2
}
   103fe:	4618      	mov	r0, r3
   10400:	3708      	adds	r7, #8
   10402:	46bd      	mov	sp, r7
   10404:	bd80      	pop	{r7, pc}
   10406:	bf00      	nop
   10408:	000103c9 	.word	0x000103c9

0001040c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   1040c:	b580      	push	{r7, lr}
   1040e:	b084      	sub	sp, #16
   10410:	af00      	add	r7, sp, #0
   10412:	60f8      	str	r0, [r7, #12]
   10414:	60b9      	str	r1, [r7, #8]
   10416:	4613      	mov	r3, r2
   10418:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   1041a:	e015      	b.n	10448 <usb_find_desc+0x3c>
		_desc_len_check();
   1041c:	68f8      	ldr	r0, [r7, #12]
   1041e:	4b0f      	ldr	r3, [pc, #60]	; (1045c <usb_find_desc+0x50>)
   10420:	4798      	blx	r3
   10422:	4603      	mov	r3, r0
   10424:	2b01      	cmp	r3, #1
   10426:	d801      	bhi.n	1042c <usb_find_desc+0x20>
   10428:	2300      	movs	r3, #0
   1042a:	e012      	b.n	10452 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   1042c:	68f8      	ldr	r0, [r7, #12]
   1042e:	4b0c      	ldr	r3, [pc, #48]	; (10460 <usb_find_desc+0x54>)
   10430:	4798      	blx	r3
   10432:	4603      	mov	r3, r0
   10434:	461a      	mov	r2, r3
   10436:	79fb      	ldrb	r3, [r7, #7]
   10438:	4293      	cmp	r3, r2
   1043a:	d101      	bne.n	10440 <usb_find_desc+0x34>
			return desc;
   1043c:	68fb      	ldr	r3, [r7, #12]
   1043e:	e008      	b.n	10452 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   10440:	68f8      	ldr	r0, [r7, #12]
   10442:	4b08      	ldr	r3, [pc, #32]	; (10464 <usb_find_desc+0x58>)
   10444:	4798      	blx	r3
   10446:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10448:	68fa      	ldr	r2, [r7, #12]
   1044a:	68bb      	ldr	r3, [r7, #8]
   1044c:	429a      	cmp	r2, r3
   1044e:	d3e5      	bcc.n	1041c <usb_find_desc+0x10>
	}
	return NULL;
   10450:	2300      	movs	r3, #0
}
   10452:	4618      	mov	r0, r3
   10454:	3710      	adds	r7, #16
   10456:	46bd      	mov	sp, r7
   10458:	bd80      	pop	{r7, pc}
   1045a:	bf00      	nop
   1045c:	00010373 	.word	0x00010373
   10460:	0001038b 	.word	0x0001038b
   10464:	000103a5 	.word	0x000103a5

00010468 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   10468:	b580      	push	{r7, lr}
   1046a:	b082      	sub	sp, #8
   1046c:	af00      	add	r7, sp, #0
   1046e:	6078      	str	r0, [r7, #4]
   10470:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10472:	e019      	b.n	104a8 <usb_find_ep_desc+0x40>
		_desc_len_check();
   10474:	6878      	ldr	r0, [r7, #4]
   10476:	4b12      	ldr	r3, [pc, #72]	; (104c0 <usb_find_ep_desc+0x58>)
   10478:	4798      	blx	r3
   1047a:	4603      	mov	r3, r0
   1047c:	2b01      	cmp	r3, #1
   1047e:	d801      	bhi.n	10484 <usb_find_ep_desc+0x1c>
   10480:	2300      	movs	r3, #0
   10482:	e018      	b.n	104b6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   10484:	6878      	ldr	r0, [r7, #4]
   10486:	4b0f      	ldr	r3, [pc, #60]	; (104c4 <usb_find_ep_desc+0x5c>)
   10488:	4798      	blx	r3
   1048a:	4603      	mov	r3, r0
   1048c:	2b04      	cmp	r3, #4
   1048e:	d010      	beq.n	104b2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   10490:	6878      	ldr	r0, [r7, #4]
   10492:	4b0c      	ldr	r3, [pc, #48]	; (104c4 <usb_find_ep_desc+0x5c>)
   10494:	4798      	blx	r3
   10496:	4603      	mov	r3, r0
   10498:	2b05      	cmp	r3, #5
   1049a:	d101      	bne.n	104a0 <usb_find_ep_desc+0x38>
			return desc;
   1049c:	687b      	ldr	r3, [r7, #4]
   1049e:	e00a      	b.n	104b6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   104a0:	6878      	ldr	r0, [r7, #4]
   104a2:	4b09      	ldr	r3, [pc, #36]	; (104c8 <usb_find_ep_desc+0x60>)
   104a4:	4798      	blx	r3
   104a6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   104a8:	687a      	ldr	r2, [r7, #4]
   104aa:	683b      	ldr	r3, [r7, #0]
   104ac:	429a      	cmp	r2, r3
   104ae:	d3e1      	bcc.n	10474 <usb_find_ep_desc+0xc>
   104b0:	e000      	b.n	104b4 <usb_find_ep_desc+0x4c>
			break;
   104b2:	bf00      	nop
	}
	return NULL;
   104b4:	2300      	movs	r3, #0
}
   104b6:	4618      	mov	r0, r3
   104b8:	3708      	adds	r7, #8
   104ba:	46bd      	mov	sp, r7
   104bc:	bd80      	pop	{r7, pc}
   104be:	bf00      	nop
   104c0:	00010373 	.word	0x00010373
   104c4:	0001038b 	.word	0x0001038b
   104c8:	000103a5 	.word	0x000103a5

000104cc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   104cc:	b580      	push	{r7, lr}
   104ce:	b084      	sub	sp, #16
   104d0:	af00      	add	r7, sp, #0
   104d2:	60f8      	str	r0, [r7, #12]
   104d4:	60b9      	str	r1, [r7, #8]
   104d6:	4613      	mov	r3, r2
   104d8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   104da:	2202      	movs	r2, #2
   104dc:	68b9      	ldr	r1, [r7, #8]
   104de:	68f8      	ldr	r0, [r7, #12]
   104e0:	4b15      	ldr	r3, [pc, #84]	; (10538 <usb_find_cfg_desc+0x6c>)
   104e2:	4798      	blx	r3
   104e4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   104e6:	68fb      	ldr	r3, [r7, #12]
   104e8:	2b00      	cmp	r3, #0
   104ea:	d11a      	bne.n	10522 <usb_find_cfg_desc+0x56>
		return NULL;
   104ec:	2300      	movs	r3, #0
   104ee:	e01f      	b.n	10530 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   104f0:	68f8      	ldr	r0, [r7, #12]
   104f2:	4b12      	ldr	r3, [pc, #72]	; (1053c <usb_find_cfg_desc+0x70>)
   104f4:	4798      	blx	r3
   104f6:	4603      	mov	r3, r0
   104f8:	2b01      	cmp	r3, #1
   104fa:	d801      	bhi.n	10500 <usb_find_cfg_desc+0x34>
   104fc:	2300      	movs	r3, #0
   104fe:	e017      	b.n	10530 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   10500:	68fb      	ldr	r3, [r7, #12]
   10502:	3301      	adds	r3, #1
   10504:	781b      	ldrb	r3, [r3, #0]
   10506:	2b02      	cmp	r3, #2
   10508:	d110      	bne.n	1052c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   1050a:	68fb      	ldr	r3, [r7, #12]
   1050c:	3305      	adds	r3, #5
   1050e:	781b      	ldrb	r3, [r3, #0]
   10510:	79fa      	ldrb	r2, [r7, #7]
   10512:	429a      	cmp	r2, r3
   10514:	d101      	bne.n	1051a <usb_find_cfg_desc+0x4e>
			return desc;
   10516:	68fb      	ldr	r3, [r7, #12]
   10518:	e00a      	b.n	10530 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   1051a:	68f8      	ldr	r0, [r7, #12]
   1051c:	4b08      	ldr	r3, [pc, #32]	; (10540 <usb_find_cfg_desc+0x74>)
   1051e:	4798      	blx	r3
   10520:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10522:	68fa      	ldr	r2, [r7, #12]
   10524:	68bb      	ldr	r3, [r7, #8]
   10526:	429a      	cmp	r2, r3
   10528:	d3e2      	bcc.n	104f0 <usb_find_cfg_desc+0x24>
   1052a:	e000      	b.n	1052e <usb_find_cfg_desc+0x62>
			break;
   1052c:	bf00      	nop
	}
	return NULL;
   1052e:	2300      	movs	r3, #0
}
   10530:	4618      	mov	r0, r3
   10532:	3710      	adds	r7, #16
   10534:	46bd      	mov	sp, r7
   10536:	bd80      	pop	{r7, pc}
   10538:	0001040d 	.word	0x0001040d
   1053c:	00010373 	.word	0x00010373
   10540:	000103e9 	.word	0x000103e9

00010544 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   10544:	b580      	push	{r7, lr}
   10546:	b086      	sub	sp, #24
   10548:	af00      	add	r7, sp, #0
   1054a:	60f8      	str	r0, [r7, #12]
   1054c:	60b9      	str	r1, [r7, #8]
   1054e:	4613      	mov	r3, r2
   10550:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   10552:	2300      	movs	r3, #0
   10554:	75fb      	strb	r3, [r7, #23]
   10556:	e020      	b.n	1059a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   10558:	2203      	movs	r2, #3
   1055a:	68b9      	ldr	r1, [r7, #8]
   1055c:	68f8      	ldr	r0, [r7, #12]
   1055e:	4b13      	ldr	r3, [pc, #76]	; (105ac <usb_find_str_desc+0x68>)
   10560:	4798      	blx	r3
   10562:	60f8      	str	r0, [r7, #12]
		if (desc) {
   10564:	68fb      	ldr	r3, [r7, #12]
   10566:	2b00      	cmp	r3, #0
   10568:	d015      	beq.n	10596 <usb_find_str_desc+0x52>
			_desc_len_check();
   1056a:	68f8      	ldr	r0, [r7, #12]
   1056c:	4b10      	ldr	r3, [pc, #64]	; (105b0 <usb_find_str_desc+0x6c>)
   1056e:	4798      	blx	r3
   10570:	4603      	mov	r3, r0
   10572:	2b01      	cmp	r3, #1
   10574:	d801      	bhi.n	1057a <usb_find_str_desc+0x36>
   10576:	2300      	movs	r3, #0
   10578:	e014      	b.n	105a4 <usb_find_str_desc+0x60>
			if (i == str_index) {
   1057a:	7dfa      	ldrb	r2, [r7, #23]
   1057c:	79fb      	ldrb	r3, [r7, #7]
   1057e:	429a      	cmp	r2, r3
   10580:	d101      	bne.n	10586 <usb_find_str_desc+0x42>
				return desc;
   10582:	68fb      	ldr	r3, [r7, #12]
   10584:	e00e      	b.n	105a4 <usb_find_str_desc+0x60>
			}
			i++;
   10586:	7dfb      	ldrb	r3, [r7, #23]
   10588:	3301      	adds	r3, #1
   1058a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   1058c:	68f8      	ldr	r0, [r7, #12]
   1058e:	4b09      	ldr	r3, [pc, #36]	; (105b4 <usb_find_str_desc+0x70>)
   10590:	4798      	blx	r3
   10592:	60f8      	str	r0, [r7, #12]
   10594:	e001      	b.n	1059a <usb_find_str_desc+0x56>
		} else {
			return NULL;
   10596:	2300      	movs	r3, #0
   10598:	e004      	b.n	105a4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   1059a:	68fa      	ldr	r2, [r7, #12]
   1059c:	68bb      	ldr	r3, [r7, #8]
   1059e:	429a      	cmp	r2, r3
   105a0:	d3da      	bcc.n	10558 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   105a2:	2300      	movs	r3, #0
}
   105a4:	4618      	mov	r0, r3
   105a6:	3718      	adds	r7, #24
   105a8:	46bd      	mov	sp, r7
   105aa:	bd80      	pop	{r7, pc}
   105ac:	0001040d 	.word	0x0001040d
   105b0:	00010373 	.word	0x00010373
   105b4:	000103a5 	.word	0x000103a5

000105b8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   105b8:	b580      	push	{r7, lr}
   105ba:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   105bc:	4805      	ldr	r0, [pc, #20]	; (105d4 <cdc_device_acm_init+0x1c>)
   105be:	4b06      	ldr	r3, [pc, #24]	; (105d8 <cdc_device_acm_init+0x20>)
   105c0:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   105c2:	4b06      	ldr	r3, [pc, #24]	; (105dc <cdc_device_acm_init+0x24>)
   105c4:	4798      	blx	r3

	usbdc_start(single_desc);
   105c6:	4806      	ldr	r0, [pc, #24]	; (105e0 <cdc_device_acm_init+0x28>)
   105c8:	4b06      	ldr	r3, [pc, #24]	; (105e4 <cdc_device_acm_init+0x2c>)
   105ca:	4798      	blx	r3
	usbdc_attach();
   105cc:	4b06      	ldr	r3, [pc, #24]	; (105e8 <cdc_device_acm_init+0x30>)
   105ce:	4798      	blx	r3
}
   105d0:	bf00      	nop
   105d2:	bd80      	pop	{r7, pc}
   105d4:	20001eac 	.word	0x20001eac
   105d8:	0001020d 	.word	0x0001020d
   105dc:	0000f485 	.word	0x0000f485
   105e0:	2000014c 	.word	0x2000014c
   105e4:	000102a9 	.word	0x000102a9
   105e8:	000102f9 	.word	0x000102f9

000105ec <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   105ec:	b580      	push	{r7, lr}
   105ee:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   105f0:	4b01      	ldr	r3, [pc, #4]	; (105f8 <usb_init+0xc>)
   105f2:	4798      	blx	r3
}
   105f4:	bf00      	nop
   105f6:	bd80      	pop	{r7, pc}
   105f8:	000105b9 	.word	0x000105b9

000105fc <__aeabi_atexit>:
   105fc:	460b      	mov	r3, r1
   105fe:	4601      	mov	r1, r0
   10600:	4618      	mov	r0, r3
   10602:	f001 bf8d 	b.w	12520 <__cxa_atexit>
   10606:	bf00      	nop

00010608 <_ZdlPvj>:
   10608:	f7f0 b936 	b.w	878 <_ZdlPv>

0001060c <pow>:
   1060c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10610:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 10904 <pow+0x2f8>
   10614:	b08d      	sub	sp, #52	; 0x34
   10616:	4606      	mov	r6, r0
   10618:	460f      	mov	r7, r1
   1061a:	4614      	mov	r4, r2
   1061c:	461d      	mov	r5, r3
   1061e:	f000 f973 	bl	10908 <__ieee754_pow>
   10622:	f999 8000 	ldrsb.w	r8, [r9]
   10626:	f1b8 3fff 	cmp.w	r8, #4294967295
   1062a:	e9cd 0100 	strd	r0, r1, [sp]
   1062e:	d036      	beq.n	1069e <pow+0x92>
   10630:	4622      	mov	r2, r4
   10632:	462b      	mov	r3, r5
   10634:	4620      	mov	r0, r4
   10636:	4629      	mov	r1, r5
   10638:	f001 fcde 	bl	11ff8 <__aeabi_dcmpun>
   1063c:	4683      	mov	fp, r0
   1063e:	bb70      	cbnz	r0, 1069e <pow+0x92>
   10640:	4632      	mov	r2, r6
   10642:	463b      	mov	r3, r7
   10644:	4630      	mov	r0, r6
   10646:	4639      	mov	r1, r7
   10648:	f001 fcd6 	bl	11ff8 <__aeabi_dcmpun>
   1064c:	2200      	movs	r2, #0
   1064e:	4682      	mov	sl, r0
   10650:	2300      	movs	r3, #0
   10652:	2800      	cmp	r0, #0
   10654:	f040 80a0 	bne.w	10798 <pow+0x18c>
   10658:	4630      	mov	r0, r6
   1065a:	4639      	mov	r1, r7
   1065c:	f001 fc9a 	bl	11f94 <__aeabi_dcmpeq>
   10660:	b310      	cbz	r0, 106a8 <pow+0x9c>
   10662:	2200      	movs	r2, #0
   10664:	2300      	movs	r3, #0
   10666:	4620      	mov	r0, r4
   10668:	4629      	mov	r1, r5
   1066a:	f001 fc93 	bl	11f94 <__aeabi_dcmpeq>
   1066e:	4683      	mov	fp, r0
   10670:	2800      	cmp	r0, #0
   10672:	d06a      	beq.n	1074a <pow+0x13e>
   10674:	2201      	movs	r2, #1
   10676:	4b9c      	ldr	r3, [pc, #624]	; (108e8 <pow+0x2dc>)
   10678:	9202      	str	r2, [sp, #8]
   1067a:	2100      	movs	r1, #0
   1067c:	2200      	movs	r2, #0
   1067e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   10682:	e9cd 6704 	strd	r6, r7, [sp, #16]
   10686:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1068a:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1068e:	9303      	str	r3, [sp, #12]
   10690:	f1b8 0f00 	cmp.w	r8, #0
   10694:	d045      	beq.n	10722 <pow+0x116>
   10696:	4c95      	ldr	r4, [pc, #596]	; (108ec <pow+0x2e0>)
   10698:	2300      	movs	r3, #0
   1069a:	e9cd 3400 	strd	r3, r4, [sp]
   1069e:	e9dd 0100 	ldrd	r0, r1, [sp]
   106a2:	b00d      	add	sp, #52	; 0x34
   106a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   106ac:	f000 ff32 	bl	11514 <finite>
   106b0:	4680      	mov	r8, r0
   106b2:	2800      	cmp	r0, #0
   106b4:	f000 808b 	beq.w	107ce <pow+0x1c2>
   106b8:	f04f 0a00 	mov.w	sl, #0
   106bc:	f04f 0b00 	mov.w	fp, #0
   106c0:	4652      	mov	r2, sl
   106c2:	465b      	mov	r3, fp
   106c4:	e9dd 0100 	ldrd	r0, r1, [sp]
   106c8:	f001 fc64 	bl	11f94 <__aeabi_dcmpeq>
   106cc:	2800      	cmp	r0, #0
   106ce:	d0e6      	beq.n	1069e <pow+0x92>
   106d0:	4630      	mov	r0, r6
   106d2:	4639      	mov	r1, r7
   106d4:	f000 ff1e 	bl	11514 <finite>
   106d8:	2800      	cmp	r0, #0
   106da:	d0e0      	beq.n	1069e <pow+0x92>
   106dc:	4620      	mov	r0, r4
   106de:	4629      	mov	r1, r5
   106e0:	f000 ff18 	bl	11514 <finite>
   106e4:	2800      	cmp	r0, #0
   106e6:	d0da      	beq.n	1069e <pow+0x92>
   106e8:	f999 3000 	ldrsb.w	r3, [r9]
   106ec:	4a7e      	ldr	r2, [pc, #504]	; (108e8 <pow+0x2dc>)
   106ee:	9203      	str	r2, [sp, #12]
   106f0:	2104      	movs	r1, #4
   106f2:	2200      	movs	r2, #0
   106f4:	2b02      	cmp	r3, #2
   106f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   106fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
   106fe:	e9cd ab08 	strd	sl, fp, [sp, #32]
   10702:	9102      	str	r1, [sp, #8]
   10704:	920a      	str	r2, [sp, #40]	; 0x28
   10706:	d003      	beq.n	10710 <pow+0x104>
   10708:	a802      	add	r0, sp, #8
   1070a:	f000 ff09 	bl	11520 <matherr>
   1070e:	b968      	cbnz	r0, 1072c <pow+0x120>
   10710:	f001 ff0c 	bl	1252c <__errno>
   10714:	2322      	movs	r3, #34	; 0x22
   10716:	6003      	str	r3, [r0, #0]
   10718:	e008      	b.n	1072c <pow+0x120>
   1071a:	2300      	movs	r3, #0
   1071c:	2400      	movs	r4, #0
   1071e:	e9cd 3408 	strd	r3, r4, [sp, #32]
   10722:	a802      	add	r0, sp, #8
   10724:	f000 fefc 	bl	11520 <matherr>
   10728:	2800      	cmp	r0, #0
   1072a:	d030      	beq.n	1078e <pow+0x182>
   1072c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1072e:	b11b      	cbz	r3, 10738 <pow+0x12c>
   10730:	f001 fefc 	bl	1252c <__errno>
   10734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10736:	6003      	str	r3, [r0, #0]
   10738:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   1073c:	e9cd 3400 	strd	r3, r4, [sp]
   10740:	e9dd 0100 	ldrd	r0, r1, [sp]
   10744:	b00d      	add	sp, #52	; 0x34
   10746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1074a:	4620      	mov	r0, r4
   1074c:	4629      	mov	r1, r5
   1074e:	f000 fee1 	bl	11514 <finite>
   10752:	2800      	cmp	r0, #0
   10754:	d0a3      	beq.n	1069e <pow+0x92>
   10756:	2200      	movs	r2, #0
   10758:	2300      	movs	r3, #0
   1075a:	4620      	mov	r0, r4
   1075c:	4629      	mov	r1, r5
   1075e:	f001 fc23 	bl	11fa8 <__aeabi_dcmplt>
   10762:	2800      	cmp	r0, #0
   10764:	d09b      	beq.n	1069e <pow+0x92>
   10766:	f999 3000 	ldrsb.w	r3, [r9]
   1076a:	4a5f      	ldr	r2, [pc, #380]	; (108e8 <pow+0x2dc>)
   1076c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   10770:	2101      	movs	r1, #1
   10772:	e9cd 6704 	strd	r6, r7, [sp, #16]
   10776:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1077a:	9102      	str	r1, [sp, #8]
   1077c:	9203      	str	r2, [sp, #12]
   1077e:	2b00      	cmp	r3, #0
   10780:	d0cb      	beq.n	1071a <pow+0x10e>
   10782:	495b      	ldr	r1, [pc, #364]	; (108f0 <pow+0x2e4>)
   10784:	2000      	movs	r0, #0
   10786:	2b02      	cmp	r3, #2
   10788:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1078c:	d1c9      	bne.n	10722 <pow+0x116>
   1078e:	f001 fecd 	bl	1252c <__errno>
   10792:	2321      	movs	r3, #33	; 0x21
   10794:	6003      	str	r3, [r0, #0]
   10796:	e7c9      	b.n	1072c <pow+0x120>
   10798:	4620      	mov	r0, r4
   1079a:	4629      	mov	r1, r5
   1079c:	f001 fbfa 	bl	11f94 <__aeabi_dcmpeq>
   107a0:	2800      	cmp	r0, #0
   107a2:	f43f af7c 	beq.w	1069e <pow+0x92>
   107a6:	4b51      	ldr	r3, [pc, #324]	; (108ec <pow+0x2e0>)
   107a8:	494f      	ldr	r1, [pc, #316]	; (108e8 <pow+0x2dc>)
   107aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   107ae:	2001      	movs	r0, #1
   107b0:	2200      	movs	r2, #0
   107b2:	f1b8 0f02 	cmp.w	r8, #2
   107b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   107ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
   107be:	9002      	str	r0, [sp, #8]
   107c0:	9103      	str	r1, [sp, #12]
   107c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   107c6:	d1ac      	bne.n	10722 <pow+0x116>
   107c8:	e9cd 2300 	strd	r2, r3, [sp]
   107cc:	e767      	b.n	1069e <pow+0x92>
   107ce:	4630      	mov	r0, r6
   107d0:	4639      	mov	r1, r7
   107d2:	f000 fe9f 	bl	11514 <finite>
   107d6:	2800      	cmp	r0, #0
   107d8:	f43f af6e 	beq.w	106b8 <pow+0xac>
   107dc:	4620      	mov	r0, r4
   107de:	4629      	mov	r1, r5
   107e0:	f000 fe98 	bl	11514 <finite>
   107e4:	2800      	cmp	r0, #0
   107e6:	f43f af67 	beq.w	106b8 <pow+0xac>
   107ea:	e9dd 2300 	ldrd	r2, r3, [sp]
   107ee:	4610      	mov	r0, r2
   107f0:	4619      	mov	r1, r3
   107f2:	f001 fc01 	bl	11ff8 <__aeabi_dcmpun>
   107f6:	2800      	cmp	r0, #0
   107f8:	d158      	bne.n	108ac <pow+0x2a0>
   107fa:	2303      	movs	r3, #3
   107fc:	f999 8000 	ldrsb.w	r8, [r9]
   10800:	9302      	str	r3, [sp, #8]
   10802:	4b39      	ldr	r3, [pc, #228]	; (108e8 <pow+0x2dc>)
   10804:	900a      	str	r0, [sp, #40]	; 0x28
   10806:	9303      	str	r3, [sp, #12]
   10808:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1080c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   10810:	2200      	movs	r2, #0
   10812:	2300      	movs	r3, #0
   10814:	4630      	mov	r0, r6
   10816:	4639      	mov	r1, r7
   10818:	f1b8 0f00 	cmp.w	r8, #0
   1081c:	d126      	bne.n	1086c <pow+0x260>
   1081e:	4f35      	ldr	r7, [pc, #212]	; (108f4 <pow+0x2e8>)
   10820:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   10824:	e9cd 6708 	strd	r6, r7, [sp, #32]
   10828:	f001 fbbe 	bl	11fa8 <__aeabi_dcmplt>
   1082c:	2800      	cmp	r0, #0
   1082e:	f43f af6b 	beq.w	10708 <pow+0xfc>
   10832:	2200      	movs	r2, #0
   10834:	4b30      	ldr	r3, [pc, #192]	; (108f8 <pow+0x2ec>)
   10836:	4620      	mov	r0, r4
   10838:	4629      	mov	r1, r5
   1083a:	f001 f943 	bl	11ac4 <__aeabi_dmul>
   1083e:	4604      	mov	r4, r0
   10840:	460d      	mov	r5, r1
   10842:	f000 fe75 	bl	11530 <rint>
   10846:	4602      	mov	r2, r0
   10848:	460b      	mov	r3, r1
   1084a:	4620      	mov	r0, r4
   1084c:	4629      	mov	r1, r5
   1084e:	f001 fba1 	bl	11f94 <__aeabi_dcmpeq>
   10852:	bb40      	cbnz	r0, 108a6 <pow+0x29a>
   10854:	4b29      	ldr	r3, [pc, #164]	; (108fc <pow+0x2f0>)
   10856:	f999 8000 	ldrsb.w	r8, [r9]
   1085a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1085e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   10862:	f1b8 0f02 	cmp.w	r8, #2
   10866:	f47f af4f 	bne.w	10708 <pow+0xfc>
   1086a:	e751      	b.n	10710 <pow+0x104>
   1086c:	4f24      	ldr	r7, [pc, #144]	; (10900 <pow+0x2f4>)
   1086e:	2600      	movs	r6, #0
   10870:	e9cd 6708 	strd	r6, r7, [sp, #32]
   10874:	f001 fb98 	bl	11fa8 <__aeabi_dcmplt>
   10878:	2800      	cmp	r0, #0
   1087a:	d0f2      	beq.n	10862 <pow+0x256>
   1087c:	2200      	movs	r2, #0
   1087e:	4b1e      	ldr	r3, [pc, #120]	; (108f8 <pow+0x2ec>)
   10880:	4620      	mov	r0, r4
   10882:	4629      	mov	r1, r5
   10884:	f001 f91e 	bl	11ac4 <__aeabi_dmul>
   10888:	4604      	mov	r4, r0
   1088a:	460d      	mov	r5, r1
   1088c:	f000 fe50 	bl	11530 <rint>
   10890:	4602      	mov	r2, r0
   10892:	460b      	mov	r3, r1
   10894:	4620      	mov	r0, r4
   10896:	4629      	mov	r1, r5
   10898:	f001 fb7c 	bl	11f94 <__aeabi_dcmpeq>
   1089c:	b918      	cbnz	r0, 108a6 <pow+0x29a>
   1089e:	4b14      	ldr	r3, [pc, #80]	; (108f0 <pow+0x2e4>)
   108a0:	2200      	movs	r2, #0
   108a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   108a6:	f999 8000 	ldrsb.w	r8, [r9]
   108aa:	e7da      	b.n	10862 <pow+0x256>
   108ac:	f999 9000 	ldrsb.w	r9, [r9]
   108b0:	4b0d      	ldr	r3, [pc, #52]	; (108e8 <pow+0x2dc>)
   108b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   108b6:	2201      	movs	r2, #1
   108b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   108bc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   108c0:	9202      	str	r2, [sp, #8]
   108c2:	9303      	str	r3, [sp, #12]
   108c4:	f1b9 0f00 	cmp.w	r9, #0
   108c8:	f43f af27 	beq.w	1071a <pow+0x10e>
   108cc:	2200      	movs	r2, #0
   108ce:	2300      	movs	r3, #0
   108d0:	4610      	mov	r0, r2
   108d2:	4619      	mov	r1, r3
   108d4:	f001 fa20 	bl	11d18 <__aeabi_ddiv>
   108d8:	f1b9 0f02 	cmp.w	r9, #2
   108dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   108e0:	f43f af55 	beq.w	1078e <pow+0x182>
   108e4:	e71d      	b.n	10722 <pow+0x116>
   108e6:	bf00      	nop
   108e8:	00013e44 	.word	0x00013e44
   108ec:	3ff00000 	.word	0x3ff00000
   108f0:	fff00000 	.word	0xfff00000
   108f4:	47efffff 	.word	0x47efffff
   108f8:	3fe00000 	.word	0x3fe00000
   108fc:	c7efffff 	.word	0xc7efffff
   10900:	7ff00000 	.word	0x7ff00000
   10904:	20000154 	.word	0x20000154

00010908 <__ieee754_pow>:
   10908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1090c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   10910:	ea57 0402 	orrs.w	r4, r7, r2
   10914:	b093      	sub	sp, #76	; 0x4c
   10916:	d037      	beq.n	10988 <__ieee754_pow+0x80>
   10918:	4c67      	ldr	r4, [pc, #412]	; (10ab8 <__ieee754_pow+0x1b0>)
   1091a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1091e:	42a6      	cmp	r6, r4
   10920:	4683      	mov	fp, r0
   10922:	460d      	mov	r5, r1
   10924:	dc29      	bgt.n	1097a <__ieee754_pow+0x72>
   10926:	469a      	mov	sl, r3
   10928:	4696      	mov	lr, r2
   1092a:	d025      	beq.n	10978 <__ieee754_pow+0x70>
   1092c:	42a7      	cmp	r7, r4
   1092e:	dc24      	bgt.n	1097a <__ieee754_pow+0x72>
   10930:	4c61      	ldr	r4, [pc, #388]	; (10ab8 <__ieee754_pow+0x1b0>)
   10932:	42a7      	cmp	r7, r4
   10934:	d079      	beq.n	10a2a <__ieee754_pow+0x122>
   10936:	2d00      	cmp	r5, #0
   10938:	4689      	mov	r9, r1
   1093a:	4680      	mov	r8, r0
   1093c:	e9cd 2300 	strd	r2, r3, [sp]
   10940:	db77      	blt.n	10a32 <__ieee754_pow+0x12a>
   10942:	2400      	movs	r4, #0
   10944:	f1be 0f00 	cmp.w	lr, #0
   10948:	d12c      	bne.n	109a4 <__ieee754_pow+0x9c>
   1094a:	4b5b      	ldr	r3, [pc, #364]	; (10ab8 <__ieee754_pow+0x1b0>)
   1094c:	429f      	cmp	r7, r3
   1094e:	f000 808b 	beq.w	10a68 <__ieee754_pow+0x160>
   10952:	4b5a      	ldr	r3, [pc, #360]	; (10abc <__ieee754_pow+0x1b4>)
   10954:	429f      	cmp	r7, r3
   10956:	d061      	beq.n	10a1c <__ieee754_pow+0x114>
   10958:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   1095c:	f000 83ba 	beq.w	110d4 <__ieee754_pow+0x7cc>
   10960:	4b57      	ldr	r3, [pc, #348]	; (10ac0 <__ieee754_pow+0x1b8>)
   10962:	459a      	cmp	sl, r3
   10964:	d11e      	bne.n	109a4 <__ieee754_pow+0x9c>
   10966:	2d00      	cmp	r5, #0
   10968:	db1c      	blt.n	109a4 <__ieee754_pow+0x9c>
   1096a:	4640      	mov	r0, r8
   1096c:	4649      	mov	r1, r9
   1096e:	b013      	add	sp, #76	; 0x4c
   10970:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10974:	f000 bd0e 	b.w	11394 <__ieee754_sqrt>
   10978:	b158      	cbz	r0, 10992 <__ieee754_pow+0x8a>
   1097a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1097e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   10982:	ea56 030b 	orrs.w	r3, r6, fp
   10986:	d106      	bne.n	10996 <__ieee754_pow+0x8e>
   10988:	494c      	ldr	r1, [pc, #304]	; (10abc <__ieee754_pow+0x1b4>)
   1098a:	2000      	movs	r0, #0
   1098c:	b013      	add	sp, #76	; 0x4c
   1098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10992:	42b7      	cmp	r7, r6
   10994:	ddcc      	ble.n	10930 <__ieee754_pow+0x28>
   10996:	484b      	ldr	r0, [pc, #300]	; (10ac4 <__ieee754_pow+0x1bc>)
   10998:	b013      	add	sp, #76	; 0x4c
   1099a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1099e:	f000 bdc1 	b.w	11524 <nan>
   109a2:	2400      	movs	r4, #0
   109a4:	4640      	mov	r0, r8
   109a6:	4649      	mov	r1, r9
   109a8:	f000 fdb0 	bl	1150c <fabs>
   109ac:	f1bb 0f00 	cmp.w	fp, #0
   109b0:	d119      	bne.n	109e6 <__ieee754_pow+0xde>
   109b2:	b126      	cbz	r6, 109be <__ieee754_pow+0xb6>
   109b4:	4b41      	ldr	r3, [pc, #260]	; (10abc <__ieee754_pow+0x1b4>)
   109b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   109ba:	429a      	cmp	r2, r3
   109bc:	d113      	bne.n	109e6 <__ieee754_pow+0xde>
   109be:	f1ba 0f00 	cmp.w	sl, #0
   109c2:	f2c0 83bc 	blt.w	1113e <__ieee754_pow+0x836>
   109c6:	2d00      	cmp	r5, #0
   109c8:	dae0      	bge.n	1098c <__ieee754_pow+0x84>
   109ca:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   109ce:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   109d2:	ea56 0304 	orrs.w	r3, r6, r4
   109d6:	f000 848f 	beq.w	112f8 <__ieee754_pow+0x9f0>
   109da:	2c01      	cmp	r4, #1
   109dc:	d1d6      	bne.n	1098c <__ieee754_pow+0x84>
   109de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   109e2:	4619      	mov	r1, r3
   109e4:	e7d2      	b.n	1098c <__ieee754_pow+0x84>
   109e6:	0fed      	lsrs	r5, r5, #31
   109e8:	3d01      	subs	r5, #1
   109ea:	ea54 0305 	orrs.w	r3, r4, r5
   109ee:	d04e      	beq.n	10a8e <__ieee754_pow+0x186>
   109f0:	4b35      	ldr	r3, [pc, #212]	; (10ac8 <__ieee754_pow+0x1c0>)
   109f2:	429f      	cmp	r7, r3
   109f4:	dd6e      	ble.n	10ad4 <__ieee754_pow+0x1cc>
   109f6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   109fa:	429f      	cmp	r7, r3
   109fc:	f340 83e8 	ble.w	111d0 <__ieee754_pow+0x8c8>
   10a00:	4b32      	ldr	r3, [pc, #200]	; (10acc <__ieee754_pow+0x1c4>)
   10a02:	429e      	cmp	r6, r3
   10a04:	dd4e      	ble.n	10aa4 <__ieee754_pow+0x19c>
   10a06:	f1ba 0f00 	cmp.w	sl, #0
   10a0a:	dd4e      	ble.n	10aaa <__ieee754_pow+0x1a2>
   10a0c:	a328      	add	r3, pc, #160	; (adr r3, 10ab0 <__ieee754_pow+0x1a8>)
   10a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a12:	4610      	mov	r0, r2
   10a14:	4619      	mov	r1, r3
   10a16:	f001 f855 	bl	11ac4 <__aeabi_dmul>
   10a1a:	e7b7      	b.n	1098c <__ieee754_pow+0x84>
   10a1c:	f1ba 0f00 	cmp.w	sl, #0
   10a20:	f2c0 843c 	blt.w	1129c <__ieee754_pow+0x994>
   10a24:	4640      	mov	r0, r8
   10a26:	4649      	mov	r1, r9
   10a28:	e7b0      	b.n	1098c <__ieee754_pow+0x84>
   10a2a:	f1be 0f00 	cmp.w	lr, #0
   10a2e:	d082      	beq.n	10936 <__ieee754_pow+0x2e>
   10a30:	e7a3      	b.n	1097a <__ieee754_pow+0x72>
   10a32:	4b27      	ldr	r3, [pc, #156]	; (10ad0 <__ieee754_pow+0x1c8>)
   10a34:	429f      	cmp	r7, r3
   10a36:	dc28      	bgt.n	10a8a <__ieee754_pow+0x182>
   10a38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   10a3c:	429f      	cmp	r7, r3
   10a3e:	dd80      	ble.n	10942 <__ieee754_pow+0x3a>
   10a40:	153b      	asrs	r3, r7, #20
   10a42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   10a46:	2b14      	cmp	r3, #20
   10a48:	f340 843e 	ble.w	112c8 <__ieee754_pow+0x9c0>
   10a4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   10a50:	fa2e f203 	lsr.w	r2, lr, r3
   10a54:	fa02 f303 	lsl.w	r3, r2, r3
   10a58:	459e      	cmp	lr, r3
   10a5a:	f47f af72 	bne.w	10942 <__ieee754_pow+0x3a>
   10a5e:	f002 0201 	and.w	r2, r2, #1
   10a62:	f1c2 0402 	rsb	r4, r2, #2
   10a66:	e76d      	b.n	10944 <__ieee754_pow+0x3c>
   10a68:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   10a6c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   10a70:	ea53 030b 	orrs.w	r3, r3, fp
   10a74:	d088      	beq.n	10988 <__ieee754_pow+0x80>
   10a76:	4b15      	ldr	r3, [pc, #84]	; (10acc <__ieee754_pow+0x1c4>)
   10a78:	429e      	cmp	r6, r3
   10a7a:	f340 8332 	ble.w	110e2 <__ieee754_pow+0x7da>
   10a7e:	f1ba 0f00 	cmp.w	sl, #0
   10a82:	db12      	blt.n	10aaa <__ieee754_pow+0x1a2>
   10a84:	e9dd 0100 	ldrd	r0, r1, [sp]
   10a88:	e780      	b.n	1098c <__ieee754_pow+0x84>
   10a8a:	2402      	movs	r4, #2
   10a8c:	e75a      	b.n	10944 <__ieee754_pow+0x3c>
   10a8e:	4642      	mov	r2, r8
   10a90:	464b      	mov	r3, r9
   10a92:	4640      	mov	r0, r8
   10a94:	4649      	mov	r1, r9
   10a96:	f000 fe61 	bl	1175c <__aeabi_dsub>
   10a9a:	4602      	mov	r2, r0
   10a9c:	460b      	mov	r3, r1
   10a9e:	f001 f93b 	bl	11d18 <__aeabi_ddiv>
   10aa2:	e773      	b.n	1098c <__ieee754_pow+0x84>
   10aa4:	f1ba 0f00 	cmp.w	sl, #0
   10aa8:	dbb0      	blt.n	10a0c <__ieee754_pow+0x104>
   10aaa:	2000      	movs	r0, #0
   10aac:	2100      	movs	r1, #0
   10aae:	e76d      	b.n	1098c <__ieee754_pow+0x84>
   10ab0:	8800759c 	.word	0x8800759c
   10ab4:	7e37e43c 	.word	0x7e37e43c
   10ab8:	7ff00000 	.word	0x7ff00000
   10abc:	3ff00000 	.word	0x3ff00000
   10ac0:	3fe00000 	.word	0x3fe00000
   10ac4:	00013e48 	.word	0x00013e48
   10ac8:	41e00000 	.word	0x41e00000
   10acc:	3fefffff 	.word	0x3fefffff
   10ad0:	433fffff 	.word	0x433fffff
   10ad4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   10ad8:	f04f 0200 	mov.w	r2, #0
   10adc:	da05      	bge.n	10aea <__ieee754_pow+0x1e2>
   10ade:	4bd4      	ldr	r3, [pc, #848]	; (10e30 <__ieee754_pow+0x528>)
   10ae0:	f000 fff0 	bl	11ac4 <__aeabi_dmul>
   10ae4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   10ae8:	460e      	mov	r6, r1
   10aea:	1533      	asrs	r3, r6, #20
   10aec:	4fd1      	ldr	r7, [pc, #836]	; (10e34 <__ieee754_pow+0x52c>)
   10aee:	f3c6 0613 	ubfx	r6, r6, #0, #20
   10af2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   10af6:	4413      	add	r3, r2
   10af8:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   10afc:	42be      	cmp	r6, r7
   10afe:	461a      	mov	r2, r3
   10b00:	930d      	str	r3, [sp, #52]	; 0x34
   10b02:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   10b06:	f340 8321 	ble.w	1114c <__ieee754_pow+0x844>
   10b0a:	4bcb      	ldr	r3, [pc, #812]	; (10e38 <__ieee754_pow+0x530>)
   10b0c:	429e      	cmp	r6, r3
   10b0e:	f340 83fd 	ble.w	1130c <__ieee754_pow+0xa04>
   10b12:	4613      	mov	r3, r2
   10b14:	3301      	adds	r3, #1
   10b16:	930d      	str	r3, [sp, #52]	; 0x34
   10b18:	4bc8      	ldr	r3, [pc, #800]	; (10e3c <__ieee754_pow+0x534>)
   10b1a:	2200      	movs	r2, #0
   10b1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10b20:	2700      	movs	r7, #0
   10b22:	2600      	movs	r6, #0
   10b24:	e9cd 6708 	strd	r6, r7, [sp, #32]
   10b28:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   10b2c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   10b30:	2700      	movs	r7, #0
   10b32:	4602      	mov	r2, r0
   10b34:	4653      	mov	r3, sl
   10b36:	4651      	mov	r1, sl
   10b38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   10b3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10b40:	f000 fe0c 	bl	1175c <__aeabi_dsub>
   10b44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10b48:	4680      	mov	r8, r0
   10b4a:	4689      	mov	r9, r1
   10b4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10b50:	f000 fe06 	bl	11760 <__adddf3>
   10b54:	4602      	mov	r2, r0
   10b56:	460b      	mov	r3, r1
   10b58:	2000      	movs	r0, #0
   10b5a:	49b8      	ldr	r1, [pc, #736]	; (10e3c <__ieee754_pow+0x534>)
   10b5c:	f001 f8dc 	bl	11d18 <__aeabi_ddiv>
   10b60:	460a      	mov	r2, r1
   10b62:	4601      	mov	r1, r0
   10b64:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   10b68:	4613      	mov	r3, r2
   10b6a:	4649      	mov	r1, r9
   10b6c:	4602      	mov	r2, r0
   10b6e:	4640      	mov	r0, r8
   10b70:	f000 ffa8 	bl	11ac4 <__aeabi_dmul>
   10b74:	ea4f 036a 	mov.w	r3, sl, asr #1
   10b78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   10b7c:	468c      	mov	ip, r1
   10b7e:	4683      	mov	fp, r0
   10b80:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   10b84:	e9cd bc04 	strd	fp, ip, [sp, #16]
   10b88:	46da      	mov	sl, fp
   10b8a:	468b      	mov	fp, r1
   10b8c:	19d9      	adds	r1, r3, r7
   10b8e:	2300      	movs	r3, #0
   10b90:	e9cd ab02 	strd	sl, fp, [sp, #8]
   10b94:	9302      	str	r3, [sp, #8]
   10b96:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   10b9a:	2000      	movs	r0, #0
   10b9c:	4606      	mov	r6, r0
   10b9e:	460f      	mov	r7, r1
   10ba0:	4602      	mov	r2, r0
   10ba2:	460b      	mov	r3, r1
   10ba4:	4650      	mov	r0, sl
   10ba6:	4659      	mov	r1, fp
   10ba8:	f000 ff8c 	bl	11ac4 <__aeabi_dmul>
   10bac:	4602      	mov	r2, r0
   10bae:	460b      	mov	r3, r1
   10bb0:	4640      	mov	r0, r8
   10bb2:	4649      	mov	r1, r9
   10bb4:	f000 fdd2 	bl	1175c <__aeabi_dsub>
   10bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10bbc:	4680      	mov	r8, r0
   10bbe:	4689      	mov	r9, r1
   10bc0:	4630      	mov	r0, r6
   10bc2:	4639      	mov	r1, r7
   10bc4:	f000 fdca 	bl	1175c <__aeabi_dsub>
   10bc8:	4602      	mov	r2, r0
   10bca:	460b      	mov	r3, r1
   10bcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10bd0:	f000 fdc4 	bl	1175c <__aeabi_dsub>
   10bd4:	4652      	mov	r2, sl
   10bd6:	465b      	mov	r3, fp
   10bd8:	f000 ff74 	bl	11ac4 <__aeabi_dmul>
   10bdc:	4602      	mov	r2, r0
   10bde:	460b      	mov	r3, r1
   10be0:	4640      	mov	r0, r8
   10be2:	4649      	mov	r1, r9
   10be4:	f000 fdba 	bl	1175c <__aeabi_dsub>
   10be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10bec:	f000 ff6a 	bl	11ac4 <__aeabi_dmul>
   10bf0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   10bf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   10bf8:	4632      	mov	r2, r6
   10bfa:	463b      	mov	r3, r7
   10bfc:	4630      	mov	r0, r6
   10bfe:	4639      	mov	r1, r7
   10c00:	f000 ff60 	bl	11ac4 <__aeabi_dmul>
   10c04:	a378      	add	r3, pc, #480	; (adr r3, 10de8 <__ieee754_pow+0x4e0>)
   10c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c0a:	4606      	mov	r6, r0
   10c0c:	460f      	mov	r7, r1
   10c0e:	f000 ff59 	bl	11ac4 <__aeabi_dmul>
   10c12:	a377      	add	r3, pc, #476	; (adr r3, 10df0 <__ieee754_pow+0x4e8>)
   10c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c18:	f000 fda2 	bl	11760 <__adddf3>
   10c1c:	4632      	mov	r2, r6
   10c1e:	463b      	mov	r3, r7
   10c20:	f000 ff50 	bl	11ac4 <__aeabi_dmul>
   10c24:	a374      	add	r3, pc, #464	; (adr r3, 10df8 <__ieee754_pow+0x4f0>)
   10c26:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c2a:	f000 fd99 	bl	11760 <__adddf3>
   10c2e:	4632      	mov	r2, r6
   10c30:	463b      	mov	r3, r7
   10c32:	f000 ff47 	bl	11ac4 <__aeabi_dmul>
   10c36:	a372      	add	r3, pc, #456	; (adr r3, 10e00 <__ieee754_pow+0x4f8>)
   10c38:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c3c:	f000 fd90 	bl	11760 <__adddf3>
   10c40:	4632      	mov	r2, r6
   10c42:	463b      	mov	r3, r7
   10c44:	f000 ff3e 	bl	11ac4 <__aeabi_dmul>
   10c48:	a36f      	add	r3, pc, #444	; (adr r3, 10e08 <__ieee754_pow+0x500>)
   10c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c4e:	f000 fd87 	bl	11760 <__adddf3>
   10c52:	4632      	mov	r2, r6
   10c54:	463b      	mov	r3, r7
   10c56:	f000 ff35 	bl	11ac4 <__aeabi_dmul>
   10c5a:	a36d      	add	r3, pc, #436	; (adr r3, 10e10 <__ieee754_pow+0x508>)
   10c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c60:	f000 fd7e 	bl	11760 <__adddf3>
   10c64:	4632      	mov	r2, r6
   10c66:	4680      	mov	r8, r0
   10c68:	4689      	mov	r9, r1
   10c6a:	463b      	mov	r3, r7
   10c6c:	4630      	mov	r0, r6
   10c6e:	4639      	mov	r1, r7
   10c70:	f000 ff28 	bl	11ac4 <__aeabi_dmul>
   10c74:	4602      	mov	r2, r0
   10c76:	460b      	mov	r3, r1
   10c78:	4640      	mov	r0, r8
   10c7a:	4649      	mov	r1, r9
   10c7c:	f000 ff22 	bl	11ac4 <__aeabi_dmul>
   10c80:	4652      	mov	r2, sl
   10c82:	4606      	mov	r6, r0
   10c84:	460f      	mov	r7, r1
   10c86:	465b      	mov	r3, fp
   10c88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10c8c:	f000 fd68 	bl	11760 <__adddf3>
   10c90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10c94:	f000 ff16 	bl	11ac4 <__aeabi_dmul>
   10c98:	4632      	mov	r2, r6
   10c9a:	463b      	mov	r3, r7
   10c9c:	f000 fd60 	bl	11760 <__adddf3>
   10ca0:	4652      	mov	r2, sl
   10ca2:	4680      	mov	r8, r0
   10ca4:	4689      	mov	r9, r1
   10ca6:	465b      	mov	r3, fp
   10ca8:	4650      	mov	r0, sl
   10caa:	4659      	mov	r1, fp
   10cac:	f000 ff0a 	bl	11ac4 <__aeabi_dmul>
   10cb0:	2200      	movs	r2, #0
   10cb2:	4b63      	ldr	r3, [pc, #396]	; (10e40 <__ieee754_pow+0x538>)
   10cb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10cb8:	f000 fd52 	bl	11760 <__adddf3>
   10cbc:	4642      	mov	r2, r8
   10cbe:	464b      	mov	r3, r9
   10cc0:	f000 fd4e 	bl	11760 <__adddf3>
   10cc4:	9802      	ldr	r0, [sp, #8]
   10cc6:	460f      	mov	r7, r1
   10cc8:	4606      	mov	r6, r0
   10cca:	4632      	mov	r2, r6
   10ccc:	463b      	mov	r3, r7
   10cce:	4650      	mov	r0, sl
   10cd0:	4659      	mov	r1, fp
   10cd2:	f000 fef7 	bl	11ac4 <__aeabi_dmul>
   10cd6:	2200      	movs	r2, #0
   10cd8:	4682      	mov	sl, r0
   10cda:	468b      	mov	fp, r1
   10cdc:	4b58      	ldr	r3, [pc, #352]	; (10e40 <__ieee754_pow+0x538>)
   10cde:	4630      	mov	r0, r6
   10ce0:	4639      	mov	r1, r7
   10ce2:	f000 fd3b 	bl	1175c <__aeabi_dsub>
   10ce6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10cea:	f000 fd37 	bl	1175c <__aeabi_dsub>
   10cee:	4602      	mov	r2, r0
   10cf0:	460b      	mov	r3, r1
   10cf2:	4640      	mov	r0, r8
   10cf4:	4649      	mov	r1, r9
   10cf6:	f000 fd31 	bl	1175c <__aeabi_dsub>
   10cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10cfe:	f000 fee1 	bl	11ac4 <__aeabi_dmul>
   10d02:	4632      	mov	r2, r6
   10d04:	4680      	mov	r8, r0
   10d06:	4689      	mov	r9, r1
   10d08:	463b      	mov	r3, r7
   10d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10d0e:	f000 fed9 	bl	11ac4 <__aeabi_dmul>
   10d12:	4602      	mov	r2, r0
   10d14:	460b      	mov	r3, r1
   10d16:	4640      	mov	r0, r8
   10d18:	4649      	mov	r1, r9
   10d1a:	f000 fd21 	bl	11760 <__adddf3>
   10d1e:	4680      	mov	r8, r0
   10d20:	4689      	mov	r9, r1
   10d22:	4602      	mov	r2, r0
   10d24:	460b      	mov	r3, r1
   10d26:	4650      	mov	r0, sl
   10d28:	4659      	mov	r1, fp
   10d2a:	e9cd ab04 	strd	sl, fp, [sp, #16]
   10d2e:	f000 fd17 	bl	11760 <__adddf3>
   10d32:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   10d36:	a338      	add	r3, pc, #224	; (adr r3, 10e18 <__ieee754_pow+0x510>)
   10d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d3c:	4650      	mov	r0, sl
   10d3e:	460f      	mov	r7, r1
   10d40:	f000 fec0 	bl	11ac4 <__aeabi_dmul>
   10d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10d4c:	4639      	mov	r1, r7
   10d4e:	4650      	mov	r0, sl
   10d50:	f000 fd04 	bl	1175c <__aeabi_dsub>
   10d54:	4602      	mov	r2, r0
   10d56:	460b      	mov	r3, r1
   10d58:	4640      	mov	r0, r8
   10d5a:	4649      	mov	r1, r9
   10d5c:	f000 fcfe 	bl	1175c <__aeabi_dsub>
   10d60:	a32f      	add	r3, pc, #188	; (adr r3, 10e20 <__ieee754_pow+0x518>)
   10d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d66:	f000 fead 	bl	11ac4 <__aeabi_dmul>
   10d6a:	a32f      	add	r3, pc, #188	; (adr r3, 10e28 <__ieee754_pow+0x520>)
   10d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d70:	4680      	mov	r8, r0
   10d72:	4689      	mov	r9, r1
   10d74:	4650      	mov	r0, sl
   10d76:	4639      	mov	r1, r7
   10d78:	f000 fea4 	bl	11ac4 <__aeabi_dmul>
   10d7c:	4602      	mov	r2, r0
   10d7e:	460b      	mov	r3, r1
   10d80:	4640      	mov	r0, r8
   10d82:	4649      	mov	r1, r9
   10d84:	f000 fcec 	bl	11760 <__adddf3>
   10d88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   10d8c:	f000 fce8 	bl	11760 <__adddf3>
   10d90:	4680      	mov	r8, r0
   10d92:	980d      	ldr	r0, [sp, #52]	; 0x34
   10d94:	4689      	mov	r9, r1
   10d96:	f000 fe2f 	bl	119f8 <__aeabi_i2d>
   10d9a:	4642      	mov	r2, r8
   10d9c:	4606      	mov	r6, r0
   10d9e:	460f      	mov	r7, r1
   10da0:	464b      	mov	r3, r9
   10da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10da6:	f000 fcdb 	bl	11760 <__adddf3>
   10daa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10dae:	f000 fcd7 	bl	11760 <__adddf3>
   10db2:	4632      	mov	r2, r6
   10db4:	463b      	mov	r3, r7
   10db6:	f000 fcd3 	bl	11760 <__adddf3>
   10dba:	4632      	mov	r2, r6
   10dbc:	463b      	mov	r3, r7
   10dbe:	4650      	mov	r0, sl
   10dc0:	468b      	mov	fp, r1
   10dc2:	f000 fccb 	bl	1175c <__aeabi_dsub>
   10dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10dca:	f000 fcc7 	bl	1175c <__aeabi_dsub>
   10dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10dd2:	f000 fcc3 	bl	1175c <__aeabi_dsub>
   10dd6:	4602      	mov	r2, r0
   10dd8:	460b      	mov	r3, r1
   10dda:	4640      	mov	r0, r8
   10ddc:	4649      	mov	r1, r9
   10dde:	f000 fcbd 	bl	1175c <__aeabi_dsub>
   10de2:	4680      	mov	r8, r0
   10de4:	e02e      	b.n	10e44 <__ieee754_pow+0x53c>
   10de6:	bf00      	nop
   10de8:	4a454eef 	.word	0x4a454eef
   10dec:	3fca7e28 	.word	0x3fca7e28
   10df0:	93c9db65 	.word	0x93c9db65
   10df4:	3fcd864a 	.word	0x3fcd864a
   10df8:	a91d4101 	.word	0xa91d4101
   10dfc:	3fd17460 	.word	0x3fd17460
   10e00:	518f264d 	.word	0x518f264d
   10e04:	3fd55555 	.word	0x3fd55555
   10e08:	db6fabff 	.word	0xdb6fabff
   10e0c:	3fdb6db6 	.word	0x3fdb6db6
   10e10:	33333303 	.word	0x33333303
   10e14:	3fe33333 	.word	0x3fe33333
   10e18:	e0000000 	.word	0xe0000000
   10e1c:	3feec709 	.word	0x3feec709
   10e20:	dc3a03fd 	.word	0xdc3a03fd
   10e24:	3feec709 	.word	0x3feec709
   10e28:	145b01f5 	.word	0x145b01f5
   10e2c:	be3e2fe0 	.word	0xbe3e2fe0
   10e30:	43400000 	.word	0x43400000
   10e34:	0003988e 	.word	0x0003988e
   10e38:	000bb679 	.word	0x000bb679
   10e3c:	3ff00000 	.word	0x3ff00000
   10e40:	40080000 	.word	0x40080000
   10e44:	4689      	mov	r9, r1
   10e46:	3c01      	subs	r4, #1
   10e48:	ea54 0305 	orrs.w	r3, r4, r5
   10e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
   10e50:	bf14      	ite	ne
   10e52:	4cd9      	ldrne	r4, [pc, #868]	; (111b8 <__ieee754_pow+0x8b0>)
   10e54:	4cd9      	ldreq	r4, [pc, #868]	; (111bc <__ieee754_pow+0x8b4>)
   10e56:	2300      	movs	r3, #0
   10e58:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10e5c:	4603      	mov	r3, r0
   10e5e:	460c      	mov	r4, r1
   10e60:	e9cd 3402 	strd	r3, r4, [sp, #8]
   10e64:	2300      	movs	r3, #0
   10e66:	9302      	str	r3, [sp, #8]
   10e68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   10e6c:	4622      	mov	r2, r4
   10e6e:	462b      	mov	r3, r5
   10e70:	f000 fc74 	bl	1175c <__aeabi_dsub>
   10e74:	4652      	mov	r2, sl
   10e76:	465b      	mov	r3, fp
   10e78:	f000 fe24 	bl	11ac4 <__aeabi_dmul>
   10e7c:	e9dd 2300 	ldrd	r2, r3, [sp]
   10e80:	4606      	mov	r6, r0
   10e82:	460f      	mov	r7, r1
   10e84:	4640      	mov	r0, r8
   10e86:	4649      	mov	r1, r9
   10e88:	f000 fe1c 	bl	11ac4 <__aeabi_dmul>
   10e8c:	4602      	mov	r2, r0
   10e8e:	460b      	mov	r3, r1
   10e90:	4630      	mov	r0, r6
   10e92:	4639      	mov	r1, r7
   10e94:	f000 fc64 	bl	11760 <__adddf3>
   10e98:	4622      	mov	r2, r4
   10e9a:	4680      	mov	r8, r0
   10e9c:	4689      	mov	r9, r1
   10e9e:	462b      	mov	r3, r5
   10ea0:	4650      	mov	r0, sl
   10ea2:	4659      	mov	r1, fp
   10ea4:	e9cd 8900 	strd	r8, r9, [sp]
   10ea8:	f000 fe0c 	bl	11ac4 <__aeabi_dmul>
   10eac:	460b      	mov	r3, r1
   10eae:	4602      	mov	r2, r0
   10eb0:	4606      	mov	r6, r0
   10eb2:	460f      	mov	r7, r1
   10eb4:	4640      	mov	r0, r8
   10eb6:	4649      	mov	r1, r9
   10eb8:	f000 fc52 	bl	11760 <__adddf3>
   10ebc:	4bc0      	ldr	r3, [pc, #768]	; (111c0 <__ieee754_pow+0x8b8>)
   10ebe:	4299      	cmp	r1, r3
   10ec0:	4604      	mov	r4, r0
   10ec2:	460d      	mov	r5, r1
   10ec4:	468a      	mov	sl, r1
   10ec6:	f340 8116 	ble.w	110f6 <__ieee754_pow+0x7ee>
   10eca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   10ece:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   10ed2:	4303      	orrs	r3, r0
   10ed4:	f040 81ea 	bne.w	112ac <__ieee754_pow+0x9a4>
   10ed8:	a3a3      	add	r3, pc, #652	; (adr r3, 11168 <__ieee754_pow+0x860>)
   10eda:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ede:	e9dd 0100 	ldrd	r0, r1, [sp]
   10ee2:	f000 fc3d 	bl	11760 <__adddf3>
   10ee6:	4632      	mov	r2, r6
   10ee8:	4680      	mov	r8, r0
   10eea:	4689      	mov	r9, r1
   10eec:	463b      	mov	r3, r7
   10eee:	4620      	mov	r0, r4
   10ef0:	4629      	mov	r1, r5
   10ef2:	f000 fc33 	bl	1175c <__aeabi_dsub>
   10ef6:	4602      	mov	r2, r0
   10ef8:	460b      	mov	r3, r1
   10efa:	4640      	mov	r0, r8
   10efc:	4649      	mov	r1, r9
   10efe:	f001 f871 	bl	11fe4 <__aeabi_dcmpgt>
   10f02:	2800      	cmp	r0, #0
   10f04:	f040 81d2 	bne.w	112ac <__ieee754_pow+0x9a4>
   10f08:	46a8      	mov	r8, r5
   10f0a:	ea4f 5328 	mov.w	r3, r8, asr #20
   10f0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   10f12:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10f16:	fa42 f303 	asr.w	r3, r2, r3
   10f1a:	4453      	add	r3, sl
   10f1c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   10f20:	4da8      	ldr	r5, [pc, #672]	; (111c4 <__ieee754_pow+0x8bc>)
   10f22:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   10f26:	4115      	asrs	r5, r2
   10f28:	f3c3 0413 	ubfx	r4, r3, #0, #20
   10f2c:	ea23 0105 	bic.w	r1, r3, r5
   10f30:	2000      	movs	r0, #0
   10f32:	f1c2 0b14 	rsb	fp, r2, #20
   10f36:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   10f3a:	f1ba 0f00 	cmp.w	sl, #0
   10f3e:	4602      	mov	r2, r0
   10f40:	460b      	mov	r3, r1
   10f42:	fa44 fb0b 	asr.w	fp, r4, fp
   10f46:	4630      	mov	r0, r6
   10f48:	4639      	mov	r1, r7
   10f4a:	bfb8      	it	lt
   10f4c:	f1cb 0b00 	rsblt	fp, fp, #0
   10f50:	f000 fc04 	bl	1175c <__aeabi_dsub>
   10f54:	4602      	mov	r2, r0
   10f56:	460b      	mov	r3, r1
   10f58:	4606      	mov	r6, r0
   10f5a:	460f      	mov	r7, r1
   10f5c:	e9dd 0100 	ldrd	r0, r1, [sp]
   10f60:	f000 fbfe 	bl	11760 <__adddf3>
   10f64:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   10f68:	460d      	mov	r5, r1
   10f6a:	2400      	movs	r4, #0
   10f6c:	a380      	add	r3, pc, #512	; (adr r3, 11170 <__ieee754_pow+0x868>)
   10f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f72:	4620      	mov	r0, r4
   10f74:	4629      	mov	r1, r5
   10f76:	f000 fda5 	bl	11ac4 <__aeabi_dmul>
   10f7a:	4632      	mov	r2, r6
   10f7c:	4680      	mov	r8, r0
   10f7e:	4689      	mov	r9, r1
   10f80:	463b      	mov	r3, r7
   10f82:	4620      	mov	r0, r4
   10f84:	4629      	mov	r1, r5
   10f86:	f000 fbe9 	bl	1175c <__aeabi_dsub>
   10f8a:	4602      	mov	r2, r0
   10f8c:	460b      	mov	r3, r1
   10f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   10f92:	f000 fbe3 	bl	1175c <__aeabi_dsub>
   10f96:	a378      	add	r3, pc, #480	; (adr r3, 11178 <__ieee754_pow+0x870>)
   10f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f9c:	f000 fd92 	bl	11ac4 <__aeabi_dmul>
   10fa0:	a377      	add	r3, pc, #476	; (adr r3, 11180 <__ieee754_pow+0x878>)
   10fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10fa6:	4606      	mov	r6, r0
   10fa8:	460f      	mov	r7, r1
   10faa:	4620      	mov	r0, r4
   10fac:	4629      	mov	r1, r5
   10fae:	f000 fd89 	bl	11ac4 <__aeabi_dmul>
   10fb2:	4602      	mov	r2, r0
   10fb4:	460b      	mov	r3, r1
   10fb6:	4630      	mov	r0, r6
   10fb8:	4639      	mov	r1, r7
   10fba:	f000 fbd1 	bl	11760 <__adddf3>
   10fbe:	4606      	mov	r6, r0
   10fc0:	460f      	mov	r7, r1
   10fc2:	4602      	mov	r2, r0
   10fc4:	460b      	mov	r3, r1
   10fc6:	4640      	mov	r0, r8
   10fc8:	4649      	mov	r1, r9
   10fca:	f000 fbc9 	bl	11760 <__adddf3>
   10fce:	4642      	mov	r2, r8
   10fd0:	464b      	mov	r3, r9
   10fd2:	4604      	mov	r4, r0
   10fd4:	460d      	mov	r5, r1
   10fd6:	f000 fbc1 	bl	1175c <__aeabi_dsub>
   10fda:	4602      	mov	r2, r0
   10fdc:	460b      	mov	r3, r1
   10fde:	4630      	mov	r0, r6
   10fe0:	4639      	mov	r1, r7
   10fe2:	f000 fbbb 	bl	1175c <__aeabi_dsub>
   10fe6:	4622      	mov	r2, r4
   10fe8:	4680      	mov	r8, r0
   10fea:	4689      	mov	r9, r1
   10fec:	462b      	mov	r3, r5
   10fee:	4620      	mov	r0, r4
   10ff0:	4629      	mov	r1, r5
   10ff2:	f000 fd67 	bl	11ac4 <__aeabi_dmul>
   10ff6:	a364      	add	r3, pc, #400	; (adr r3, 11188 <__ieee754_pow+0x880>)
   10ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ffc:	4606      	mov	r6, r0
   10ffe:	460f      	mov	r7, r1
   11000:	f000 fd60 	bl	11ac4 <__aeabi_dmul>
   11004:	a362      	add	r3, pc, #392	; (adr r3, 11190 <__ieee754_pow+0x888>)
   11006:	e9d3 2300 	ldrd	r2, r3, [r3]
   1100a:	f000 fba7 	bl	1175c <__aeabi_dsub>
   1100e:	4632      	mov	r2, r6
   11010:	463b      	mov	r3, r7
   11012:	f000 fd57 	bl	11ac4 <__aeabi_dmul>
   11016:	a360      	add	r3, pc, #384	; (adr r3, 11198 <__ieee754_pow+0x890>)
   11018:	e9d3 2300 	ldrd	r2, r3, [r3]
   1101c:	f000 fba0 	bl	11760 <__adddf3>
   11020:	4632      	mov	r2, r6
   11022:	463b      	mov	r3, r7
   11024:	f000 fd4e 	bl	11ac4 <__aeabi_dmul>
   11028:	a35d      	add	r3, pc, #372	; (adr r3, 111a0 <__ieee754_pow+0x898>)
   1102a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1102e:	f000 fb95 	bl	1175c <__aeabi_dsub>
   11032:	4632      	mov	r2, r6
   11034:	463b      	mov	r3, r7
   11036:	f000 fd45 	bl	11ac4 <__aeabi_dmul>
   1103a:	a35b      	add	r3, pc, #364	; (adr r3, 111a8 <__ieee754_pow+0x8a0>)
   1103c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11040:	f000 fb8e 	bl	11760 <__adddf3>
   11044:	4632      	mov	r2, r6
   11046:	463b      	mov	r3, r7
   11048:	f000 fd3c 	bl	11ac4 <__aeabi_dmul>
   1104c:	4602      	mov	r2, r0
   1104e:	460b      	mov	r3, r1
   11050:	4620      	mov	r0, r4
   11052:	4629      	mov	r1, r5
   11054:	f000 fb82 	bl	1175c <__aeabi_dsub>
   11058:	4606      	mov	r6, r0
   1105a:	460f      	mov	r7, r1
   1105c:	4602      	mov	r2, r0
   1105e:	460b      	mov	r3, r1
   11060:	4620      	mov	r0, r4
   11062:	4629      	mov	r1, r5
   11064:	f000 fd2e 	bl	11ac4 <__aeabi_dmul>
   11068:	2200      	movs	r2, #0
   1106a:	e9cd 0100 	strd	r0, r1, [sp]
   1106e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11072:	4630      	mov	r0, r6
   11074:	4639      	mov	r1, r7
   11076:	f000 fb71 	bl	1175c <__aeabi_dsub>
   1107a:	4602      	mov	r2, r0
   1107c:	460b      	mov	r3, r1
   1107e:	e9dd 0100 	ldrd	r0, r1, [sp]
   11082:	f000 fe49 	bl	11d18 <__aeabi_ddiv>
   11086:	4642      	mov	r2, r8
   11088:	4606      	mov	r6, r0
   1108a:	460f      	mov	r7, r1
   1108c:	464b      	mov	r3, r9
   1108e:	4620      	mov	r0, r4
   11090:	4629      	mov	r1, r5
   11092:	f000 fd17 	bl	11ac4 <__aeabi_dmul>
   11096:	4642      	mov	r2, r8
   11098:	464b      	mov	r3, r9
   1109a:	f000 fb61 	bl	11760 <__adddf3>
   1109e:	4602      	mov	r2, r0
   110a0:	460b      	mov	r3, r1
   110a2:	4630      	mov	r0, r6
   110a4:	4639      	mov	r1, r7
   110a6:	f000 fb59 	bl	1175c <__aeabi_dsub>
   110aa:	4622      	mov	r2, r4
   110ac:	462b      	mov	r3, r5
   110ae:	f000 fb55 	bl	1175c <__aeabi_dsub>
   110b2:	4602      	mov	r2, r0
   110b4:	460b      	mov	r3, r1
   110b6:	2000      	movs	r0, #0
   110b8:	493f      	ldr	r1, [pc, #252]	; (111b8 <__ieee754_pow+0x8b0>)
   110ba:	f000 fb4f 	bl	1175c <__aeabi_dsub>
   110be:	448a      	add	sl, r1
   110c0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   110c4:	f2c0 8133 	blt.w	1132e <__ieee754_pow+0xa26>
   110c8:	4651      	mov	r1, sl
   110ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   110ce:	f000 fcf9 	bl	11ac4 <__aeabi_dmul>
   110d2:	e45b      	b.n	1098c <__ieee754_pow+0x84>
   110d4:	4642      	mov	r2, r8
   110d6:	4640      	mov	r0, r8
   110d8:	464b      	mov	r3, r9
   110da:	4649      	mov	r1, r9
   110dc:	f000 fcf2 	bl	11ac4 <__aeabi_dmul>
   110e0:	e454      	b.n	1098c <__ieee754_pow+0x84>
   110e2:	f1ba 0f00 	cmp.w	sl, #0
   110e6:	f6bf ace0 	bge.w	10aaa <__ieee754_pow+0x1a2>
   110ea:	e9dd 3400 	ldrd	r3, r4, [sp]
   110ee:	4618      	mov	r0, r3
   110f0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   110f4:	e44a      	b.n	1098c <__ieee754_pow+0x84>
   110f6:	4b34      	ldr	r3, [pc, #208]	; (111c8 <__ieee754_pow+0x8c0>)
   110f8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   110fc:	4598      	cmp	r8, r3
   110fe:	f340 80f2 	ble.w	112e6 <__ieee754_pow+0x9de>
   11102:	4b32      	ldr	r3, [pc, #200]	; (111cc <__ieee754_pow+0x8c4>)
   11104:	440b      	add	r3, r1
   11106:	4303      	orrs	r3, r0
   11108:	d10c      	bne.n	11124 <__ieee754_pow+0x81c>
   1110a:	4632      	mov	r2, r6
   1110c:	463b      	mov	r3, r7
   1110e:	f000 fb25 	bl	1175c <__aeabi_dsub>
   11112:	4602      	mov	r2, r0
   11114:	460b      	mov	r3, r1
   11116:	e9dd 0100 	ldrd	r0, r1, [sp]
   1111a:	f000 ff4f 	bl	11fbc <__aeabi_dcmple>
   1111e:	2800      	cmp	r0, #0
   11120:	f43f aef3 	beq.w	10f0a <__ieee754_pow+0x602>
   11124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11128:	a321      	add	r3, pc, #132	; (adr r3, 111b0 <__ieee754_pow+0x8a8>)
   1112a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1112e:	f000 fcc9 	bl	11ac4 <__aeabi_dmul>
   11132:	a31f      	add	r3, pc, #124	; (adr r3, 111b0 <__ieee754_pow+0x8a8>)
   11134:	e9d3 2300 	ldrd	r2, r3, [r3]
   11138:	f000 fcc4 	bl	11ac4 <__aeabi_dmul>
   1113c:	e426      	b.n	1098c <__ieee754_pow+0x84>
   1113e:	4602      	mov	r2, r0
   11140:	460b      	mov	r3, r1
   11142:	2000      	movs	r0, #0
   11144:	491c      	ldr	r1, [pc, #112]	; (111b8 <__ieee754_pow+0x8b0>)
   11146:	f000 fde7 	bl	11d18 <__aeabi_ddiv>
   1114a:	e43c      	b.n	109c6 <__ieee754_pow+0xbe>
   1114c:	2200      	movs	r2, #0
   1114e:	2300      	movs	r3, #0
   11150:	e9cd 2308 	strd	r2, r3, [sp, #32]
   11154:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11158:	4b17      	ldr	r3, [pc, #92]	; (111b8 <__ieee754_pow+0x8b0>)
   1115a:	2200      	movs	r2, #0
   1115c:	2700      	movs	r7, #0
   1115e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11162:	e4e6      	b.n	10b32 <__ieee754_pow+0x22a>
   11164:	f3af 8000 	nop.w
   11168:	652b82fe 	.word	0x652b82fe
   1116c:	3c971547 	.word	0x3c971547
   11170:	00000000 	.word	0x00000000
   11174:	3fe62e43 	.word	0x3fe62e43
   11178:	fefa39ef 	.word	0xfefa39ef
   1117c:	3fe62e42 	.word	0x3fe62e42
   11180:	0ca86c39 	.word	0x0ca86c39
   11184:	be205c61 	.word	0xbe205c61
   11188:	72bea4d0 	.word	0x72bea4d0
   1118c:	3e663769 	.word	0x3e663769
   11190:	c5d26bf1 	.word	0xc5d26bf1
   11194:	3ebbbd41 	.word	0x3ebbbd41
   11198:	af25de2c 	.word	0xaf25de2c
   1119c:	3f11566a 	.word	0x3f11566a
   111a0:	16bebd93 	.word	0x16bebd93
   111a4:	3f66c16c 	.word	0x3f66c16c
   111a8:	5555553e 	.word	0x5555553e
   111ac:	3fc55555 	.word	0x3fc55555
   111b0:	c2f8f359 	.word	0xc2f8f359
   111b4:	01a56e1f 	.word	0x01a56e1f
   111b8:	3ff00000 	.word	0x3ff00000
   111bc:	bff00000 	.word	0xbff00000
   111c0:	408fffff 	.word	0x408fffff
   111c4:	000fffff 	.word	0x000fffff
   111c8:	4090cbff 	.word	0x4090cbff
   111cc:	3f6f3400 	.word	0x3f6f3400
   111d0:	4b6b      	ldr	r3, [pc, #428]	; (11380 <__ieee754_pow+0xa78>)
   111d2:	429e      	cmp	r6, r3
   111d4:	f77f ac66 	ble.w	10aa4 <__ieee754_pow+0x19c>
   111d8:	4b6a      	ldr	r3, [pc, #424]	; (11384 <__ieee754_pow+0xa7c>)
   111da:	429e      	cmp	r6, r3
   111dc:	f73f ac13 	bgt.w	10a06 <__ieee754_pow+0xfe>
   111e0:	2200      	movs	r2, #0
   111e2:	4b68      	ldr	r3, [pc, #416]	; (11384 <__ieee754_pow+0xa7c>)
   111e4:	f000 faba 	bl	1175c <__aeabi_dsub>
   111e8:	a357      	add	r3, pc, #348	; (adr r3, 11348 <__ieee754_pow+0xa40>)
   111ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   111ee:	4606      	mov	r6, r0
   111f0:	460f      	mov	r7, r1
   111f2:	f000 fc67 	bl	11ac4 <__aeabi_dmul>
   111f6:	a356      	add	r3, pc, #344	; (adr r3, 11350 <__ieee754_pow+0xa48>)
   111f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   111fc:	4680      	mov	r8, r0
   111fe:	4689      	mov	r9, r1
   11200:	4630      	mov	r0, r6
   11202:	4639      	mov	r1, r7
   11204:	f000 fc5e 	bl	11ac4 <__aeabi_dmul>
   11208:	2200      	movs	r2, #0
   1120a:	4682      	mov	sl, r0
   1120c:	468b      	mov	fp, r1
   1120e:	4b5e      	ldr	r3, [pc, #376]	; (11388 <__ieee754_pow+0xa80>)
   11210:	4630      	mov	r0, r6
   11212:	4639      	mov	r1, r7
   11214:	f000 fc56 	bl	11ac4 <__aeabi_dmul>
   11218:	4602      	mov	r2, r0
   1121a:	460b      	mov	r3, r1
   1121c:	a14e      	add	r1, pc, #312	; (adr r1, 11358 <__ieee754_pow+0xa50>)
   1121e:	e9d1 0100 	ldrd	r0, r1, [r1]
   11222:	f000 fa9b 	bl	1175c <__aeabi_dsub>
   11226:	4632      	mov	r2, r6
   11228:	463b      	mov	r3, r7
   1122a:	f000 fc4b 	bl	11ac4 <__aeabi_dmul>
   1122e:	4602      	mov	r2, r0
   11230:	460b      	mov	r3, r1
   11232:	2000      	movs	r0, #0
   11234:	4955      	ldr	r1, [pc, #340]	; (1138c <__ieee754_pow+0xa84>)
   11236:	f000 fa91 	bl	1175c <__aeabi_dsub>
   1123a:	4632      	mov	r2, r6
   1123c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11240:	463b      	mov	r3, r7
   11242:	4630      	mov	r0, r6
   11244:	4639      	mov	r1, r7
   11246:	f000 fc3d 	bl	11ac4 <__aeabi_dmul>
   1124a:	4602      	mov	r2, r0
   1124c:	460b      	mov	r3, r1
   1124e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11252:	f000 fc37 	bl	11ac4 <__aeabi_dmul>
   11256:	a342      	add	r3, pc, #264	; (adr r3, 11360 <__ieee754_pow+0xa58>)
   11258:	e9d3 2300 	ldrd	r2, r3, [r3]
   1125c:	f000 fc32 	bl	11ac4 <__aeabi_dmul>
   11260:	4602      	mov	r2, r0
   11262:	460b      	mov	r3, r1
   11264:	4650      	mov	r0, sl
   11266:	4659      	mov	r1, fp
   11268:	f000 fa78 	bl	1175c <__aeabi_dsub>
   1126c:	4602      	mov	r2, r0
   1126e:	460b      	mov	r3, r1
   11270:	4606      	mov	r6, r0
   11272:	460f      	mov	r7, r1
   11274:	4640      	mov	r0, r8
   11276:	4649      	mov	r1, r9
   11278:	f000 fa72 	bl	11760 <__adddf3>
   1127c:	4642      	mov	r2, r8
   1127e:	464b      	mov	r3, r9
   11280:	2000      	movs	r0, #0
   11282:	4682      	mov	sl, r0
   11284:	468b      	mov	fp, r1
   11286:	f000 fa69 	bl	1175c <__aeabi_dsub>
   1128a:	4602      	mov	r2, r0
   1128c:	460b      	mov	r3, r1
   1128e:	4630      	mov	r0, r6
   11290:	4639      	mov	r1, r7
   11292:	f000 fa63 	bl	1175c <__aeabi_dsub>
   11296:	4680      	mov	r8, r0
   11298:	4689      	mov	r9, r1
   1129a:	e5d4      	b.n	10e46 <__ieee754_pow+0x53e>
   1129c:	4642      	mov	r2, r8
   1129e:	464b      	mov	r3, r9
   112a0:	2000      	movs	r0, #0
   112a2:	4938      	ldr	r1, [pc, #224]	; (11384 <__ieee754_pow+0xa7c>)
   112a4:	f000 fd38 	bl	11d18 <__aeabi_ddiv>
   112a8:	f7ff bb70 	b.w	1098c <__ieee754_pow+0x84>
   112ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   112b0:	a32d      	add	r3, pc, #180	; (adr r3, 11368 <__ieee754_pow+0xa60>)
   112b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   112b6:	f000 fc05 	bl	11ac4 <__aeabi_dmul>
   112ba:	a32b      	add	r3, pc, #172	; (adr r3, 11368 <__ieee754_pow+0xa60>)
   112bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   112c0:	f000 fc00 	bl	11ac4 <__aeabi_dmul>
   112c4:	f7ff bb62 	b.w	1098c <__ieee754_pow+0x84>
   112c8:	f1be 0f00 	cmp.w	lr, #0
   112cc:	f47f ab69 	bne.w	109a2 <__ieee754_pow+0x9a>
   112d0:	f1c3 0314 	rsb	r3, r3, #20
   112d4:	fa47 f203 	asr.w	r2, r7, r3
   112d8:	fa02 f303 	lsl.w	r3, r2, r3
   112dc:	429f      	cmp	r7, r3
   112de:	d02a      	beq.n	11336 <__ieee754_pow+0xa2e>
   112e0:	4674      	mov	r4, lr
   112e2:	f7ff bb36 	b.w	10952 <__ieee754_pow+0x4a>
   112e6:	4b29      	ldr	r3, [pc, #164]	; (1138c <__ieee754_pow+0xa84>)
   112e8:	4598      	cmp	r8, r3
   112ea:	f73f ae0e 	bgt.w	10f0a <__ieee754_pow+0x602>
   112ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   112f2:	4692      	mov	sl, r2
   112f4:	4693      	mov	fp, r2
   112f6:	e638      	b.n	10f6a <__ieee754_pow+0x662>
   112f8:	4602      	mov	r2, r0
   112fa:	460b      	mov	r3, r1
   112fc:	f000 fa2e 	bl	1175c <__aeabi_dsub>
   11300:	4602      	mov	r2, r0
   11302:	460b      	mov	r3, r1
   11304:	f000 fd08 	bl	11d18 <__aeabi_ddiv>
   11308:	f7ff bb40 	b.w	1098c <__ieee754_pow+0x84>
   1130c:	a318      	add	r3, pc, #96	; (adr r3, 11370 <__ieee754_pow+0xa68>)
   1130e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11312:	e9cd 2308 	strd	r2, r3, [sp, #32]
   11316:	a318      	add	r3, pc, #96	; (adr r3, 11378 <__ieee754_pow+0xa70>)
   11318:	e9d3 2300 	ldrd	r2, r3, [r3]
   1131c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11320:	4b1b      	ldr	r3, [pc, #108]	; (11390 <__ieee754_pow+0xa88>)
   11322:	2200      	movs	r2, #0
   11324:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   11328:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1132c:	e401      	b.n	10b32 <__ieee754_pow+0x22a>
   1132e:	465a      	mov	r2, fp
   11330:	f000 f98a 	bl	11648 <scalbn>
   11334:	e6c9      	b.n	110ca <__ieee754_pow+0x7c2>
   11336:	f002 0201 	and.w	r2, r2, #1
   1133a:	f1c2 0402 	rsb	r4, r2, #2
   1133e:	f7ff bb08 	b.w	10952 <__ieee754_pow+0x4a>
   11342:	bf00      	nop
   11344:	f3af 8000 	nop.w
   11348:	60000000 	.word	0x60000000
   1134c:	3ff71547 	.word	0x3ff71547
   11350:	f85ddf44 	.word	0xf85ddf44
   11354:	3e54ae0b 	.word	0x3e54ae0b
   11358:	55555555 	.word	0x55555555
   1135c:	3fd55555 	.word	0x3fd55555
   11360:	652b82fe 	.word	0x652b82fe
   11364:	3ff71547 	.word	0x3ff71547
   11368:	8800759c 	.word	0x8800759c
   1136c:	7e37e43c 	.word	0x7e37e43c
   11370:	40000000 	.word	0x40000000
   11374:	3fe2b803 	.word	0x3fe2b803
   11378:	43cfd006 	.word	0x43cfd006
   1137c:	3e4cfdeb 	.word	0x3e4cfdeb
   11380:	3feffffe 	.word	0x3feffffe
   11384:	3ff00000 	.word	0x3ff00000
   11388:	3fd00000 	.word	0x3fd00000
   1138c:	3fe00000 	.word	0x3fe00000
   11390:	3ff80000 	.word	0x3ff80000

00011394 <__ieee754_sqrt>:
   11394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11398:	4f5b      	ldr	r7, [pc, #364]	; (11508 <__ieee754_sqrt+0x174>)
   1139a:	438f      	bics	r7, r1
   1139c:	4605      	mov	r5, r0
   1139e:	460c      	mov	r4, r1
   113a0:	f000 8092 	beq.w	114c8 <__ieee754_sqrt+0x134>
   113a4:	2900      	cmp	r1, #0
   113a6:	460b      	mov	r3, r1
   113a8:	4602      	mov	r2, r0
   113aa:	dd6f      	ble.n	1148c <__ieee754_sqrt+0xf8>
   113ac:	150f      	asrs	r7, r1, #20
   113ae:	d07b      	beq.n	114a8 <__ieee754_sqrt+0x114>
   113b0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   113b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
   113b8:	07f8      	lsls	r0, r7, #31
   113ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   113be:	d45c      	bmi.n	1147a <__ieee754_sqrt+0xe6>
   113c0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   113c4:	2600      	movs	r6, #0
   113c6:	440b      	add	r3, r1
   113c8:	107f      	asrs	r7, r7, #1
   113ca:	0052      	lsls	r2, r2, #1
   113cc:	46b6      	mov	lr, r6
   113ce:	2016      	movs	r0, #22
   113d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   113d4:	eb0e 0401 	add.w	r4, lr, r1
   113d8:	429c      	cmp	r4, r3
   113da:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   113de:	ea4f 0242 	mov.w	r2, r2, lsl #1
   113e2:	dc03      	bgt.n	113ec <__ieee754_sqrt+0x58>
   113e4:	1b1b      	subs	r3, r3, r4
   113e6:	eb04 0e01 	add.w	lr, r4, r1
   113ea:	440e      	add	r6, r1
   113ec:	3801      	subs	r0, #1
   113ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   113f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   113f6:	d1ed      	bne.n	113d4 <__ieee754_sqrt+0x40>
   113f8:	4684      	mov	ip, r0
   113fa:	2420      	movs	r4, #32
   113fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   11400:	e009      	b.n	11416 <__ieee754_sqrt+0x82>
   11402:	d020      	beq.n	11446 <__ieee754_sqrt+0xb2>
   11404:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   11408:	3c01      	subs	r4, #1
   1140a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1140e:	442b      	add	r3, r5
   11410:	ea4f 0242 	mov.w	r2, r2, lsl #1
   11414:	d020      	beq.n	11458 <__ieee754_sqrt+0xc4>
   11416:	4573      	cmp	r3, lr
   11418:	eb01 050c 	add.w	r5, r1, ip
   1141c:	ddf1      	ble.n	11402 <__ieee754_sqrt+0x6e>
   1141e:	2d00      	cmp	r5, #0
   11420:	eb05 0c01 	add.w	ip, r5, r1
   11424:	db09      	blt.n	1143a <__ieee754_sqrt+0xa6>
   11426:	46f0      	mov	r8, lr
   11428:	4295      	cmp	r5, r2
   1142a:	eba3 030e 	sub.w	r3, r3, lr
   1142e:	d900      	bls.n	11432 <__ieee754_sqrt+0x9e>
   11430:	3b01      	subs	r3, #1
   11432:	1b52      	subs	r2, r2, r5
   11434:	4408      	add	r0, r1
   11436:	46c6      	mov	lr, r8
   11438:	e7e4      	b.n	11404 <__ieee754_sqrt+0x70>
   1143a:	f1bc 0f00 	cmp.w	ip, #0
   1143e:	dbf2      	blt.n	11426 <__ieee754_sqrt+0x92>
   11440:	f10e 0801 	add.w	r8, lr, #1
   11444:	e7f0      	b.n	11428 <__ieee754_sqrt+0x94>
   11446:	4295      	cmp	r5, r2
   11448:	d8dc      	bhi.n	11404 <__ieee754_sqrt+0x70>
   1144a:	2d00      	cmp	r5, #0
   1144c:	eb05 0c01 	add.w	ip, r5, r1
   11450:	db44      	blt.n	114dc <__ieee754_sqrt+0x148>
   11452:	4698      	mov	r8, r3
   11454:	2300      	movs	r3, #0
   11456:	e7ec      	b.n	11432 <__ieee754_sqrt+0x9e>
   11458:	4313      	orrs	r3, r2
   1145a:	d113      	bne.n	11484 <__ieee754_sqrt+0xf0>
   1145c:	0840      	lsrs	r0, r0, #1
   1145e:	1073      	asrs	r3, r6, #1
   11460:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   11464:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   11468:	07f2      	lsls	r2, r6, #31
   1146a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1146e:	bf48      	it	mi
   11470:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   11474:	4649      	mov	r1, r9
   11476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1147a:	005b      	lsls	r3, r3, #1
   1147c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   11480:	0052      	lsls	r2, r2, #1
   11482:	e79d      	b.n	113c0 <__ieee754_sqrt+0x2c>
   11484:	1c41      	adds	r1, r0, #1
   11486:	d02d      	beq.n	114e4 <__ieee754_sqrt+0x150>
   11488:	3001      	adds	r0, #1
   1148a:	e7e7      	b.n	1145c <__ieee754_sqrt+0xc8>
   1148c:	4606      	mov	r6, r0
   1148e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   11492:	433e      	orrs	r6, r7
   11494:	d0ef      	beq.n	11476 <__ieee754_sqrt+0xe2>
   11496:	bb69      	cbnz	r1, 114f4 <__ieee754_sqrt+0x160>
   11498:	460f      	mov	r7, r1
   1149a:	0ad3      	lsrs	r3, r2, #11
   1149c:	3f15      	subs	r7, #21
   1149e:	0552      	lsls	r2, r2, #21
   114a0:	2b00      	cmp	r3, #0
   114a2:	d0fa      	beq.n	1149a <__ieee754_sqrt+0x106>
   114a4:	02de      	lsls	r6, r3, #11
   114a6:	d420      	bmi.n	114ea <__ieee754_sqrt+0x156>
   114a8:	2400      	movs	r4, #0
   114aa:	e000      	b.n	114ae <__ieee754_sqrt+0x11a>
   114ac:	4604      	mov	r4, r0
   114ae:	005b      	lsls	r3, r3, #1
   114b0:	02dd      	lsls	r5, r3, #11
   114b2:	f104 0001 	add.w	r0, r4, #1
   114b6:	d5f9      	bpl.n	114ac <__ieee754_sqrt+0x118>
   114b8:	f1c0 0120 	rsb	r1, r0, #32
   114bc:	fa22 f101 	lsr.w	r1, r2, r1
   114c0:	430b      	orrs	r3, r1
   114c2:	1b3f      	subs	r7, r7, r4
   114c4:	4082      	lsls	r2, r0
   114c6:	e773      	b.n	113b0 <__ieee754_sqrt+0x1c>
   114c8:	4602      	mov	r2, r0
   114ca:	460b      	mov	r3, r1
   114cc:	f000 fafa 	bl	11ac4 <__aeabi_dmul>
   114d0:	462a      	mov	r2, r5
   114d2:	4623      	mov	r3, r4
   114d4:	f000 f944 	bl	11760 <__adddf3>
   114d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   114dc:	f1bc 0f00 	cmp.w	ip, #0
   114e0:	daae      	bge.n	11440 <__ieee754_sqrt+0xac>
   114e2:	e7b6      	b.n	11452 <__ieee754_sqrt+0xbe>
   114e4:	3601      	adds	r6, #1
   114e6:	4620      	mov	r0, r4
   114e8:	e7b9      	b.n	1145e <__ieee754_sqrt+0xca>
   114ea:	2000      	movs	r0, #0
   114ec:	2120      	movs	r1, #32
   114ee:	f04f 34ff 	mov.w	r4, #4294967295
   114f2:	e7e3      	b.n	114bc <__ieee754_sqrt+0x128>
   114f4:	4602      	mov	r2, r0
   114f6:	460b      	mov	r3, r1
   114f8:	f000 f930 	bl	1175c <__aeabi_dsub>
   114fc:	4602      	mov	r2, r0
   114fe:	460b      	mov	r3, r1
   11500:	f000 fc0a 	bl	11d18 <__aeabi_ddiv>
   11504:	e7b7      	b.n	11476 <__ieee754_sqrt+0xe2>
   11506:	bf00      	nop
   11508:	7ff00000 	.word	0x7ff00000

0001150c <fabs>:
   1150c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11510:	4770      	bx	lr
   11512:	bf00      	nop

00011514 <finite>:
   11514:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   11518:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1151c:	0fc0      	lsrs	r0, r0, #31
   1151e:	4770      	bx	lr

00011520 <matherr>:
   11520:	2000      	movs	r0, #0
   11522:	4770      	bx	lr

00011524 <nan>:
   11524:	2000      	movs	r0, #0
   11526:	4901      	ldr	r1, [pc, #4]	; (1152c <nan+0x8>)
   11528:	4770      	bx	lr
   1152a:	bf00      	nop
   1152c:	7ff80000 	.word	0x7ff80000

00011530 <rint>:
   11530:	b5f0      	push	{r4, r5, r6, r7, lr}
   11532:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   11536:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1153a:	2e13      	cmp	r6, #19
   1153c:	b083      	sub	sp, #12
   1153e:	4602      	mov	r2, r0
   11540:	460b      	mov	r3, r1
   11542:	460c      	mov	r4, r1
   11544:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   11548:	4607      	mov	r7, r0
   1154a:	dc2e      	bgt.n	115aa <rint+0x7a>
   1154c:	2e00      	cmp	r6, #0
   1154e:	db49      	blt.n	115e4 <rint+0xb4>
   11550:	493a      	ldr	r1, [pc, #232]	; (1163c <rint+0x10c>)
   11552:	4131      	asrs	r1, r6
   11554:	ea03 0001 	and.w	r0, r3, r1
   11558:	4310      	orrs	r0, r2
   1155a:	d02b      	beq.n	115b4 <rint+0x84>
   1155c:	0849      	lsrs	r1, r1, #1
   1155e:	400b      	ands	r3, r1
   11560:	ea53 0702 	orrs.w	r7, r3, r2
   11564:	d00c      	beq.n	11580 <rint+0x50>
   11566:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1156a:	2e13      	cmp	r6, #19
   1156c:	ea24 0101 	bic.w	r1, r4, r1
   11570:	fa43 f406 	asr.w	r4, r3, r6
   11574:	ea44 0401 	orr.w	r4, r4, r1
   11578:	bf0c      	ite	eq
   1157a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1157e:	2700      	movne	r7, #0
   11580:	4b2f      	ldr	r3, [pc, #188]	; (11640 <rint+0x110>)
   11582:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11586:	4621      	mov	r1, r4
   11588:	e9d5 4500 	ldrd	r4, r5, [r5]
   1158c:	4638      	mov	r0, r7
   1158e:	4622      	mov	r2, r4
   11590:	462b      	mov	r3, r5
   11592:	f000 f8e5 	bl	11760 <__adddf3>
   11596:	e9cd 0100 	strd	r0, r1, [sp]
   1159a:	4622      	mov	r2, r4
   1159c:	462b      	mov	r3, r5
   1159e:	e9dd 0100 	ldrd	r0, r1, [sp]
   115a2:	f000 f8db 	bl	1175c <__aeabi_dsub>
   115a6:	b003      	add	sp, #12
   115a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115aa:	2e33      	cmp	r6, #51	; 0x33
   115ac:	dd06      	ble.n	115bc <rint+0x8c>
   115ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   115b2:	d040      	beq.n	11636 <rint+0x106>
   115b4:	4610      	mov	r0, r2
   115b6:	4619      	mov	r1, r3
   115b8:	b003      	add	sp, #12
   115ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115bc:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   115c0:	f04f 31ff 	mov.w	r1, #4294967295
   115c4:	fa21 f10e 	lsr.w	r1, r1, lr
   115c8:	4208      	tst	r0, r1
   115ca:	d0f3      	beq.n	115b4 <rint+0x84>
   115cc:	0849      	lsrs	r1, r1, #1
   115ce:	4208      	tst	r0, r1
   115d0:	d0d6      	beq.n	11580 <rint+0x50>
   115d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   115d6:	ea20 0101 	bic.w	r1, r0, r1
   115da:	fa43 fe0e 	asr.w	lr, r3, lr
   115de:	ea4e 0701 	orr.w	r7, lr, r1
   115e2:	e7cd      	b.n	11580 <rint+0x50>
   115e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   115e8:	4301      	orrs	r1, r0
   115ea:	d0e3      	beq.n	115b4 <rint+0x84>
   115ec:	f3c3 0113 	ubfx	r1, r3, #0, #20
   115f0:	4e13      	ldr	r6, [pc, #76]	; (11640 <rint+0x110>)
   115f2:	4301      	orrs	r1, r0
   115f4:	f1c1 0c00 	rsb	ip, r1, #0
   115f8:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   115fc:	e9d6 6700 	ldrd	r6, r7, [r6]
   11600:	ea4c 0c01 	orr.w	ip, ip, r1
   11604:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   11608:	0c5c      	lsrs	r4, r3, #17
   1160a:	0464      	lsls	r4, r4, #17
   1160c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   11610:	ea43 0104 	orr.w	r1, r3, r4
   11614:	4632      	mov	r2, r6
   11616:	463b      	mov	r3, r7
   11618:	f000 f8a2 	bl	11760 <__adddf3>
   1161c:	e9cd 0100 	strd	r0, r1, [sp]
   11620:	4632      	mov	r2, r6
   11622:	463b      	mov	r3, r7
   11624:	e9dd 0100 	ldrd	r0, r1, [sp]
   11628:	f000 f898 	bl	1175c <__aeabi_dsub>
   1162c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   11630:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   11634:	e7c0      	b.n	115b8 <rint+0x88>
   11636:	f000 f893 	bl	11760 <__adddf3>
   1163a:	e7bd      	b.n	115b8 <rint+0x88>
   1163c:	000fffff 	.word	0x000fffff
   11640:	00013e50 	.word	0x00013e50
   11644:	00000000 	.word	0x00000000

00011648 <scalbn>:
   11648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1164a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1164e:	4604      	mov	r4, r0
   11650:	460d      	mov	r5, r1
   11652:	460b      	mov	r3, r1
   11654:	4617      	mov	r7, r2
   11656:	bb0e      	cbnz	r6, 1169c <scalbn+0x54>
   11658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1165c:	4303      	orrs	r3, r0
   1165e:	4686      	mov	lr, r0
   11660:	d025      	beq.n	116ae <scalbn+0x66>
   11662:	2200      	movs	r2, #0
   11664:	4b34      	ldr	r3, [pc, #208]	; (11738 <scalbn+0xf0>)
   11666:	f000 fa2d 	bl	11ac4 <__aeabi_dmul>
   1166a:	4a34      	ldr	r2, [pc, #208]	; (1173c <scalbn+0xf4>)
   1166c:	4297      	cmp	r7, r2
   1166e:	4604      	mov	r4, r0
   11670:	460d      	mov	r5, r1
   11672:	460b      	mov	r3, r1
   11674:	db2a      	blt.n	116cc <scalbn+0x84>
   11676:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1167a:	3e36      	subs	r6, #54	; 0x36
   1167c:	443e      	add	r6, r7
   1167e:	f240 72fe 	movw	r2, #2046	; 0x7fe
   11682:	4296      	cmp	r6, r2
   11684:	dc28      	bgt.n	116d8 <scalbn+0x90>
   11686:	2e00      	cmp	r6, #0
   11688:	dd12      	ble.n	116b0 <scalbn+0x68>
   1168a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1168e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   11692:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   11696:	4620      	mov	r0, r4
   11698:	4629      	mov	r1, r5
   1169a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1169c:	f240 72ff 	movw	r2, #2047	; 0x7ff
   116a0:	4296      	cmp	r6, r2
   116a2:	d1eb      	bne.n	1167c <scalbn+0x34>
   116a4:	4602      	mov	r2, r0
   116a6:	460b      	mov	r3, r1
   116a8:	f000 f85a 	bl	11760 <__adddf3>
   116ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116b0:	f116 0f35 	cmn.w	r6, #53	; 0x35
   116b4:	da1d      	bge.n	116f2 <scalbn+0xaa>
   116b6:	f24c 3350 	movw	r3, #50000	; 0xc350
   116ba:	429f      	cmp	r7, r3
   116bc:	4622      	mov	r2, r4
   116be:	462b      	mov	r3, r5
   116c0:	dc25      	bgt.n	1170e <scalbn+0xc6>
   116c2:	a119      	add	r1, pc, #100	; (adr r1, 11728 <scalbn+0xe0>)
   116c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   116c8:	f000 f83c 	bl	11744 <copysign>
   116cc:	a316      	add	r3, pc, #88	; (adr r3, 11728 <scalbn+0xe0>)
   116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   116d2:	f000 f9f7 	bl	11ac4 <__aeabi_dmul>
   116d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116d8:	4622      	mov	r2, r4
   116da:	462b      	mov	r3, r5
   116dc:	a114      	add	r1, pc, #80	; (adr r1, 11730 <scalbn+0xe8>)
   116de:	e9d1 0100 	ldrd	r0, r1, [r1]
   116e2:	f000 f82f 	bl	11744 <copysign>
   116e6:	a312      	add	r3, pc, #72	; (adr r3, 11730 <scalbn+0xe8>)
   116e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   116ec:	f000 f9ea 	bl	11ac4 <__aeabi_dmul>
   116f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   116f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   116fa:	3636      	adds	r6, #54	; 0x36
   116fc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   11700:	4620      	mov	r0, r4
   11702:	4629      	mov	r1, r5
   11704:	2200      	movs	r2, #0
   11706:	4b0e      	ldr	r3, [pc, #56]	; (11740 <scalbn+0xf8>)
   11708:	f000 f9dc 	bl	11ac4 <__aeabi_dmul>
   1170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1170e:	a108      	add	r1, pc, #32	; (adr r1, 11730 <scalbn+0xe8>)
   11710:	e9d1 0100 	ldrd	r0, r1, [r1]
   11714:	f000 f816 	bl	11744 <copysign>
   11718:	a305      	add	r3, pc, #20	; (adr r3, 11730 <scalbn+0xe8>)
   1171a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1171e:	f000 f9d1 	bl	11ac4 <__aeabi_dmul>
   11722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11724:	f3af 8000 	nop.w
   11728:	c2f8f359 	.word	0xc2f8f359
   1172c:	01a56e1f 	.word	0x01a56e1f
   11730:	8800759c 	.word	0x8800759c
   11734:	7e37e43c 	.word	0x7e37e43c
   11738:	43500000 	.word	0x43500000
   1173c:	ffff3cb0 	.word	0xffff3cb0
   11740:	3c900000 	.word	0x3c900000

00011744 <copysign>:
   11744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   11748:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1174c:	ea42 0103 	orr.w	r1, r2, r3
   11750:	4770      	bx	lr
   11752:	bf00      	nop

00011754 <__aeabi_drsub>:
   11754:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   11758:	e002      	b.n	11760 <__adddf3>
   1175a:	bf00      	nop

0001175c <__aeabi_dsub>:
   1175c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00011760 <__adddf3>:
   11760:	b530      	push	{r4, r5, lr}
   11762:	ea4f 0441 	mov.w	r4, r1, lsl #1
   11766:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1176a:	ea94 0f05 	teq	r4, r5
   1176e:	bf08      	it	eq
   11770:	ea90 0f02 	teqeq	r0, r2
   11774:	bf1f      	itttt	ne
   11776:	ea54 0c00 	orrsne.w	ip, r4, r0
   1177a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1177e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   11782:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   11786:	f000 80e2 	beq.w	1194e <__adddf3+0x1ee>
   1178a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1178e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   11792:	bfb8      	it	lt
   11794:	426d      	neglt	r5, r5
   11796:	dd0c      	ble.n	117b2 <__adddf3+0x52>
   11798:	442c      	add	r4, r5
   1179a:	ea80 0202 	eor.w	r2, r0, r2
   1179e:	ea81 0303 	eor.w	r3, r1, r3
   117a2:	ea82 0000 	eor.w	r0, r2, r0
   117a6:	ea83 0101 	eor.w	r1, r3, r1
   117aa:	ea80 0202 	eor.w	r2, r0, r2
   117ae:	ea81 0303 	eor.w	r3, r1, r3
   117b2:	2d36      	cmp	r5, #54	; 0x36
   117b4:	bf88      	it	hi
   117b6:	bd30      	pophi	{r4, r5, pc}
   117b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   117bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   117c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   117c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   117c8:	d002      	beq.n	117d0 <__adddf3+0x70>
   117ca:	4240      	negs	r0, r0
   117cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   117d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   117d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   117d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   117dc:	d002      	beq.n	117e4 <__adddf3+0x84>
   117de:	4252      	negs	r2, r2
   117e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   117e4:	ea94 0f05 	teq	r4, r5
   117e8:	f000 80a7 	beq.w	1193a <__adddf3+0x1da>
   117ec:	f1a4 0401 	sub.w	r4, r4, #1
   117f0:	f1d5 0e20 	rsbs	lr, r5, #32
   117f4:	db0d      	blt.n	11812 <__adddf3+0xb2>
   117f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   117fa:	fa22 f205 	lsr.w	r2, r2, r5
   117fe:	1880      	adds	r0, r0, r2
   11800:	f141 0100 	adc.w	r1, r1, #0
   11804:	fa03 f20e 	lsl.w	r2, r3, lr
   11808:	1880      	adds	r0, r0, r2
   1180a:	fa43 f305 	asr.w	r3, r3, r5
   1180e:	4159      	adcs	r1, r3
   11810:	e00e      	b.n	11830 <__adddf3+0xd0>
   11812:	f1a5 0520 	sub.w	r5, r5, #32
   11816:	f10e 0e20 	add.w	lr, lr, #32
   1181a:	2a01      	cmp	r2, #1
   1181c:	fa03 fc0e 	lsl.w	ip, r3, lr
   11820:	bf28      	it	cs
   11822:	f04c 0c02 	orrcs.w	ip, ip, #2
   11826:	fa43 f305 	asr.w	r3, r3, r5
   1182a:	18c0      	adds	r0, r0, r3
   1182c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   11830:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11834:	d507      	bpl.n	11846 <__adddf3+0xe6>
   11836:	f04f 0e00 	mov.w	lr, #0
   1183a:	f1dc 0c00 	rsbs	ip, ip, #0
   1183e:	eb7e 0000 	sbcs.w	r0, lr, r0
   11842:	eb6e 0101 	sbc.w	r1, lr, r1
   11846:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1184a:	d31b      	bcc.n	11884 <__adddf3+0x124>
   1184c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   11850:	d30c      	bcc.n	1186c <__adddf3+0x10c>
   11852:	0849      	lsrs	r1, r1, #1
   11854:	ea5f 0030 	movs.w	r0, r0, rrx
   11858:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1185c:	f104 0401 	add.w	r4, r4, #1
   11860:	ea4f 5244 	mov.w	r2, r4, lsl #21
   11864:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   11868:	f080 809a 	bcs.w	119a0 <__adddf3+0x240>
   1186c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   11870:	bf08      	it	eq
   11872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   11876:	f150 0000 	adcs.w	r0, r0, #0
   1187a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1187e:	ea41 0105 	orr.w	r1, r1, r5
   11882:	bd30      	pop	{r4, r5, pc}
   11884:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   11888:	4140      	adcs	r0, r0
   1188a:	eb41 0101 	adc.w	r1, r1, r1
   1188e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11892:	f1a4 0401 	sub.w	r4, r4, #1
   11896:	d1e9      	bne.n	1186c <__adddf3+0x10c>
   11898:	f091 0f00 	teq	r1, #0
   1189c:	bf04      	itt	eq
   1189e:	4601      	moveq	r1, r0
   118a0:	2000      	moveq	r0, #0
   118a2:	fab1 f381 	clz	r3, r1
   118a6:	bf08      	it	eq
   118a8:	3320      	addeq	r3, #32
   118aa:	f1a3 030b 	sub.w	r3, r3, #11
   118ae:	f1b3 0220 	subs.w	r2, r3, #32
   118b2:	da0c      	bge.n	118ce <__adddf3+0x16e>
   118b4:	320c      	adds	r2, #12
   118b6:	dd08      	ble.n	118ca <__adddf3+0x16a>
   118b8:	f102 0c14 	add.w	ip, r2, #20
   118bc:	f1c2 020c 	rsb	r2, r2, #12
   118c0:	fa01 f00c 	lsl.w	r0, r1, ip
   118c4:	fa21 f102 	lsr.w	r1, r1, r2
   118c8:	e00c      	b.n	118e4 <__adddf3+0x184>
   118ca:	f102 0214 	add.w	r2, r2, #20
   118ce:	bfd8      	it	le
   118d0:	f1c2 0c20 	rsble	ip, r2, #32
   118d4:	fa01 f102 	lsl.w	r1, r1, r2
   118d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   118dc:	bfdc      	itt	le
   118de:	ea41 010c 	orrle.w	r1, r1, ip
   118e2:	4090      	lslle	r0, r2
   118e4:	1ae4      	subs	r4, r4, r3
   118e6:	bfa2      	ittt	ge
   118e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   118ec:	4329      	orrge	r1, r5
   118ee:	bd30      	popge	{r4, r5, pc}
   118f0:	ea6f 0404 	mvn.w	r4, r4
   118f4:	3c1f      	subs	r4, #31
   118f6:	da1c      	bge.n	11932 <__adddf3+0x1d2>
   118f8:	340c      	adds	r4, #12
   118fa:	dc0e      	bgt.n	1191a <__adddf3+0x1ba>
   118fc:	f104 0414 	add.w	r4, r4, #20
   11900:	f1c4 0220 	rsb	r2, r4, #32
   11904:	fa20 f004 	lsr.w	r0, r0, r4
   11908:	fa01 f302 	lsl.w	r3, r1, r2
   1190c:	ea40 0003 	orr.w	r0, r0, r3
   11910:	fa21 f304 	lsr.w	r3, r1, r4
   11914:	ea45 0103 	orr.w	r1, r5, r3
   11918:	bd30      	pop	{r4, r5, pc}
   1191a:	f1c4 040c 	rsb	r4, r4, #12
   1191e:	f1c4 0220 	rsb	r2, r4, #32
   11922:	fa20 f002 	lsr.w	r0, r0, r2
   11926:	fa01 f304 	lsl.w	r3, r1, r4
   1192a:	ea40 0003 	orr.w	r0, r0, r3
   1192e:	4629      	mov	r1, r5
   11930:	bd30      	pop	{r4, r5, pc}
   11932:	fa21 f004 	lsr.w	r0, r1, r4
   11936:	4629      	mov	r1, r5
   11938:	bd30      	pop	{r4, r5, pc}
   1193a:	f094 0f00 	teq	r4, #0
   1193e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   11942:	bf06      	itte	eq
   11944:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   11948:	3401      	addeq	r4, #1
   1194a:	3d01      	subne	r5, #1
   1194c:	e74e      	b.n	117ec <__adddf3+0x8c>
   1194e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   11952:	bf18      	it	ne
   11954:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   11958:	d029      	beq.n	119ae <__adddf3+0x24e>
   1195a:	ea94 0f05 	teq	r4, r5
   1195e:	bf08      	it	eq
   11960:	ea90 0f02 	teqeq	r0, r2
   11964:	d005      	beq.n	11972 <__adddf3+0x212>
   11966:	ea54 0c00 	orrs.w	ip, r4, r0
   1196a:	bf04      	itt	eq
   1196c:	4619      	moveq	r1, r3
   1196e:	4610      	moveq	r0, r2
   11970:	bd30      	pop	{r4, r5, pc}
   11972:	ea91 0f03 	teq	r1, r3
   11976:	bf1e      	ittt	ne
   11978:	2100      	movne	r1, #0
   1197a:	2000      	movne	r0, #0
   1197c:	bd30      	popne	{r4, r5, pc}
   1197e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   11982:	d105      	bne.n	11990 <__adddf3+0x230>
   11984:	0040      	lsls	r0, r0, #1
   11986:	4149      	adcs	r1, r1
   11988:	bf28      	it	cs
   1198a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1198e:	bd30      	pop	{r4, r5, pc}
   11990:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   11994:	bf3c      	itt	cc
   11996:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1199a:	bd30      	popcc	{r4, r5, pc}
   1199c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   119a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   119a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   119a8:	f04f 0000 	mov.w	r0, #0
   119ac:	bd30      	pop	{r4, r5, pc}
   119ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   119b2:	bf1a      	itte	ne
   119b4:	4619      	movne	r1, r3
   119b6:	4610      	movne	r0, r2
   119b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   119bc:	bf1c      	itt	ne
   119be:	460b      	movne	r3, r1
   119c0:	4602      	movne	r2, r0
   119c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   119c6:	bf06      	itte	eq
   119c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   119cc:	ea91 0f03 	teqeq	r1, r3
   119d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   119d4:	bd30      	pop	{r4, r5, pc}
   119d6:	bf00      	nop

000119d8 <__aeabi_ui2d>:
   119d8:	f090 0f00 	teq	r0, #0
   119dc:	bf04      	itt	eq
   119de:	2100      	moveq	r1, #0
   119e0:	4770      	bxeq	lr
   119e2:	b530      	push	{r4, r5, lr}
   119e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   119e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   119ec:	f04f 0500 	mov.w	r5, #0
   119f0:	f04f 0100 	mov.w	r1, #0
   119f4:	e750      	b.n	11898 <__adddf3+0x138>
   119f6:	bf00      	nop

000119f8 <__aeabi_i2d>:
   119f8:	f090 0f00 	teq	r0, #0
   119fc:	bf04      	itt	eq
   119fe:	2100      	moveq	r1, #0
   11a00:	4770      	bxeq	lr
   11a02:	b530      	push	{r4, r5, lr}
   11a04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11a08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11a0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   11a10:	bf48      	it	mi
   11a12:	4240      	negmi	r0, r0
   11a14:	f04f 0100 	mov.w	r1, #0
   11a18:	e73e      	b.n	11898 <__adddf3+0x138>
   11a1a:	bf00      	nop

00011a1c <__aeabi_f2d>:
   11a1c:	0042      	lsls	r2, r0, #1
   11a1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   11a22:	ea4f 0131 	mov.w	r1, r1, rrx
   11a26:	ea4f 7002 	mov.w	r0, r2, lsl #28
   11a2a:	bf1f      	itttt	ne
   11a2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   11a30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   11a34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   11a38:	4770      	bxne	lr
   11a3a:	f092 0f00 	teq	r2, #0
   11a3e:	bf14      	ite	ne
   11a40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   11a44:	4770      	bxeq	lr
   11a46:	b530      	push	{r4, r5, lr}
   11a48:	f44f 7460 	mov.w	r4, #896	; 0x380
   11a4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11a50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11a54:	e720      	b.n	11898 <__adddf3+0x138>
   11a56:	bf00      	nop

00011a58 <__aeabi_ul2d>:
   11a58:	ea50 0201 	orrs.w	r2, r0, r1
   11a5c:	bf08      	it	eq
   11a5e:	4770      	bxeq	lr
   11a60:	b530      	push	{r4, r5, lr}
   11a62:	f04f 0500 	mov.w	r5, #0
   11a66:	e00a      	b.n	11a7e <__aeabi_l2d+0x16>

00011a68 <__aeabi_l2d>:
   11a68:	ea50 0201 	orrs.w	r2, r0, r1
   11a6c:	bf08      	it	eq
   11a6e:	4770      	bxeq	lr
   11a70:	b530      	push	{r4, r5, lr}
   11a72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   11a76:	d502      	bpl.n	11a7e <__aeabi_l2d+0x16>
   11a78:	4240      	negs	r0, r0
   11a7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11a7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11a82:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11a86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   11a8a:	f43f aedc 	beq.w	11846 <__adddf3+0xe6>
   11a8e:	f04f 0203 	mov.w	r2, #3
   11a92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   11a96:	bf18      	it	ne
   11a98:	3203      	addne	r2, #3
   11a9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   11a9e:	bf18      	it	ne
   11aa0:	3203      	addne	r2, #3
   11aa2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   11aa6:	f1c2 0320 	rsb	r3, r2, #32
   11aaa:	fa00 fc03 	lsl.w	ip, r0, r3
   11aae:	fa20 f002 	lsr.w	r0, r0, r2
   11ab2:	fa01 fe03 	lsl.w	lr, r1, r3
   11ab6:	ea40 000e 	orr.w	r0, r0, lr
   11aba:	fa21 f102 	lsr.w	r1, r1, r2
   11abe:	4414      	add	r4, r2
   11ac0:	e6c1      	b.n	11846 <__adddf3+0xe6>
   11ac2:	bf00      	nop

00011ac4 <__aeabi_dmul>:
   11ac4:	b570      	push	{r4, r5, r6, lr}
   11ac6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11aca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   11ace:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   11ad2:	bf1d      	ittte	ne
   11ad4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   11ad8:	ea94 0f0c 	teqne	r4, ip
   11adc:	ea95 0f0c 	teqne	r5, ip
   11ae0:	f000 f8de 	bleq	11ca0 <__aeabi_dmul+0x1dc>
   11ae4:	442c      	add	r4, r5
   11ae6:	ea81 0603 	eor.w	r6, r1, r3
   11aea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   11aee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   11af2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   11af6:	bf18      	it	ne
   11af8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   11afc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11b04:	d038      	beq.n	11b78 <__aeabi_dmul+0xb4>
   11b06:	fba0 ce02 	umull	ip, lr, r0, r2
   11b0a:	f04f 0500 	mov.w	r5, #0
   11b0e:	fbe1 e502 	umlal	lr, r5, r1, r2
   11b12:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   11b16:	fbe0 e503 	umlal	lr, r5, r0, r3
   11b1a:	f04f 0600 	mov.w	r6, #0
   11b1e:	fbe1 5603 	umlal	r5, r6, r1, r3
   11b22:	f09c 0f00 	teq	ip, #0
   11b26:	bf18      	it	ne
   11b28:	f04e 0e01 	orrne.w	lr, lr, #1
   11b2c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   11b30:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   11b34:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   11b38:	d204      	bcs.n	11b44 <__aeabi_dmul+0x80>
   11b3a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   11b3e:	416d      	adcs	r5, r5
   11b40:	eb46 0606 	adc.w	r6, r6, r6
   11b44:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   11b48:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   11b4c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   11b50:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   11b54:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   11b58:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11b5c:	bf88      	it	hi
   11b5e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11b62:	d81e      	bhi.n	11ba2 <__aeabi_dmul+0xde>
   11b64:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   11b68:	bf08      	it	eq
   11b6a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   11b6e:	f150 0000 	adcs.w	r0, r0, #0
   11b72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11b76:	bd70      	pop	{r4, r5, r6, pc}
   11b78:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   11b7c:	ea46 0101 	orr.w	r1, r6, r1
   11b80:	ea40 0002 	orr.w	r0, r0, r2
   11b84:	ea81 0103 	eor.w	r1, r1, r3
   11b88:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   11b8c:	bfc2      	ittt	gt
   11b8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   11b92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   11b96:	bd70      	popgt	{r4, r5, r6, pc}
   11b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11b9c:	f04f 0e00 	mov.w	lr, #0
   11ba0:	3c01      	subs	r4, #1
   11ba2:	f300 80ab 	bgt.w	11cfc <__aeabi_dmul+0x238>
   11ba6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   11baa:	bfde      	ittt	le
   11bac:	2000      	movle	r0, #0
   11bae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   11bb2:	bd70      	pople	{r4, r5, r6, pc}
   11bb4:	f1c4 0400 	rsb	r4, r4, #0
   11bb8:	3c20      	subs	r4, #32
   11bba:	da35      	bge.n	11c28 <__aeabi_dmul+0x164>
   11bbc:	340c      	adds	r4, #12
   11bbe:	dc1b      	bgt.n	11bf8 <__aeabi_dmul+0x134>
   11bc0:	f104 0414 	add.w	r4, r4, #20
   11bc4:	f1c4 0520 	rsb	r5, r4, #32
   11bc8:	fa00 f305 	lsl.w	r3, r0, r5
   11bcc:	fa20 f004 	lsr.w	r0, r0, r4
   11bd0:	fa01 f205 	lsl.w	r2, r1, r5
   11bd4:	ea40 0002 	orr.w	r0, r0, r2
   11bd8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   11bdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   11be4:	fa21 f604 	lsr.w	r6, r1, r4
   11be8:	eb42 0106 	adc.w	r1, r2, r6
   11bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11bf0:	bf08      	it	eq
   11bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   11bf6:	bd70      	pop	{r4, r5, r6, pc}
   11bf8:	f1c4 040c 	rsb	r4, r4, #12
   11bfc:	f1c4 0520 	rsb	r5, r4, #32
   11c00:	fa00 f304 	lsl.w	r3, r0, r4
   11c04:	fa20 f005 	lsr.w	r0, r0, r5
   11c08:	fa01 f204 	lsl.w	r2, r1, r4
   11c0c:	ea40 0002 	orr.w	r0, r0, r2
   11c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11c14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   11c18:	f141 0100 	adc.w	r1, r1, #0
   11c1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11c20:	bf08      	it	eq
   11c22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   11c26:	bd70      	pop	{r4, r5, r6, pc}
   11c28:	f1c4 0520 	rsb	r5, r4, #32
   11c2c:	fa00 f205 	lsl.w	r2, r0, r5
   11c30:	ea4e 0e02 	orr.w	lr, lr, r2
   11c34:	fa20 f304 	lsr.w	r3, r0, r4
   11c38:	fa01 f205 	lsl.w	r2, r1, r5
   11c3c:	ea43 0302 	orr.w	r3, r3, r2
   11c40:	fa21 f004 	lsr.w	r0, r1, r4
   11c44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11c48:	fa21 f204 	lsr.w	r2, r1, r4
   11c4c:	ea20 0002 	bic.w	r0, r0, r2
   11c50:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   11c54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   11c58:	bf08      	it	eq
   11c5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   11c5e:	bd70      	pop	{r4, r5, r6, pc}
   11c60:	f094 0f00 	teq	r4, #0
   11c64:	d10f      	bne.n	11c86 <__aeabi_dmul+0x1c2>
   11c66:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   11c6a:	0040      	lsls	r0, r0, #1
   11c6c:	eb41 0101 	adc.w	r1, r1, r1
   11c70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11c74:	bf08      	it	eq
   11c76:	3c01      	subeq	r4, #1
   11c78:	d0f7      	beq.n	11c6a <__aeabi_dmul+0x1a6>
   11c7a:	ea41 0106 	orr.w	r1, r1, r6
   11c7e:	f095 0f00 	teq	r5, #0
   11c82:	bf18      	it	ne
   11c84:	4770      	bxne	lr
   11c86:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   11c8a:	0052      	lsls	r2, r2, #1
   11c8c:	eb43 0303 	adc.w	r3, r3, r3
   11c90:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   11c94:	bf08      	it	eq
   11c96:	3d01      	subeq	r5, #1
   11c98:	d0f7      	beq.n	11c8a <__aeabi_dmul+0x1c6>
   11c9a:	ea43 0306 	orr.w	r3, r3, r6
   11c9e:	4770      	bx	lr
   11ca0:	ea94 0f0c 	teq	r4, ip
   11ca4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   11ca8:	bf18      	it	ne
   11caa:	ea95 0f0c 	teqne	r5, ip
   11cae:	d00c      	beq.n	11cca <__aeabi_dmul+0x206>
   11cb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11cb4:	bf18      	it	ne
   11cb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11cba:	d1d1      	bne.n	11c60 <__aeabi_dmul+0x19c>
   11cbc:	ea81 0103 	eor.w	r1, r1, r3
   11cc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11cc4:	f04f 0000 	mov.w	r0, #0
   11cc8:	bd70      	pop	{r4, r5, r6, pc}
   11cca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11cce:	bf06      	itte	eq
   11cd0:	4610      	moveq	r0, r2
   11cd2:	4619      	moveq	r1, r3
   11cd4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11cd8:	d019      	beq.n	11d0e <__aeabi_dmul+0x24a>
   11cda:	ea94 0f0c 	teq	r4, ip
   11cde:	d102      	bne.n	11ce6 <__aeabi_dmul+0x222>
   11ce0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   11ce4:	d113      	bne.n	11d0e <__aeabi_dmul+0x24a>
   11ce6:	ea95 0f0c 	teq	r5, ip
   11cea:	d105      	bne.n	11cf8 <__aeabi_dmul+0x234>
   11cec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   11cf0:	bf1c      	itt	ne
   11cf2:	4610      	movne	r0, r2
   11cf4:	4619      	movne	r1, r3
   11cf6:	d10a      	bne.n	11d0e <__aeabi_dmul+0x24a>
   11cf8:	ea81 0103 	eor.w	r1, r1, r3
   11cfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11d00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   11d04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   11d08:	f04f 0000 	mov.w	r0, #0
   11d0c:	bd70      	pop	{r4, r5, r6, pc}
   11d0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   11d12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   11d16:	bd70      	pop	{r4, r5, r6, pc}

00011d18 <__aeabi_ddiv>:
   11d18:	b570      	push	{r4, r5, r6, lr}
   11d1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11d1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   11d22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   11d26:	bf1d      	ittte	ne
   11d28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   11d2c:	ea94 0f0c 	teqne	r4, ip
   11d30:	ea95 0f0c 	teqne	r5, ip
   11d34:	f000 f8a7 	bleq	11e86 <__aeabi_ddiv+0x16e>
   11d38:	eba4 0405 	sub.w	r4, r4, r5
   11d3c:	ea81 0e03 	eor.w	lr, r1, r3
   11d40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   11d44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   11d48:	f000 8088 	beq.w	11e5c <__aeabi_ddiv+0x144>
   11d4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   11d50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   11d54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   11d58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   11d5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   11d60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   11d64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   11d68:	ea4f 2600 	mov.w	r6, r0, lsl #8
   11d6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   11d70:	429d      	cmp	r5, r3
   11d72:	bf08      	it	eq
   11d74:	4296      	cmpeq	r6, r2
   11d76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   11d7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   11d7e:	d202      	bcs.n	11d86 <__aeabi_ddiv+0x6e>
   11d80:	085b      	lsrs	r3, r3, #1
   11d82:	ea4f 0232 	mov.w	r2, r2, rrx
   11d86:	1ab6      	subs	r6, r6, r2
   11d88:	eb65 0503 	sbc.w	r5, r5, r3
   11d8c:	085b      	lsrs	r3, r3, #1
   11d8e:	ea4f 0232 	mov.w	r2, r2, rrx
   11d92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   11d96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   11d9a:	ebb6 0e02 	subs.w	lr, r6, r2
   11d9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   11da2:	bf22      	ittt	cs
   11da4:	1ab6      	subcs	r6, r6, r2
   11da6:	4675      	movcs	r5, lr
   11da8:	ea40 000c 	orrcs.w	r0, r0, ip
   11dac:	085b      	lsrs	r3, r3, #1
   11dae:	ea4f 0232 	mov.w	r2, r2, rrx
   11db2:	ebb6 0e02 	subs.w	lr, r6, r2
   11db6:	eb75 0e03 	sbcs.w	lr, r5, r3
   11dba:	bf22      	ittt	cs
   11dbc:	1ab6      	subcs	r6, r6, r2
   11dbe:	4675      	movcs	r5, lr
   11dc0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   11dc4:	085b      	lsrs	r3, r3, #1
   11dc6:	ea4f 0232 	mov.w	r2, r2, rrx
   11dca:	ebb6 0e02 	subs.w	lr, r6, r2
   11dce:	eb75 0e03 	sbcs.w	lr, r5, r3
   11dd2:	bf22      	ittt	cs
   11dd4:	1ab6      	subcs	r6, r6, r2
   11dd6:	4675      	movcs	r5, lr
   11dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   11ddc:	085b      	lsrs	r3, r3, #1
   11dde:	ea4f 0232 	mov.w	r2, r2, rrx
   11de2:	ebb6 0e02 	subs.w	lr, r6, r2
   11de6:	eb75 0e03 	sbcs.w	lr, r5, r3
   11dea:	bf22      	ittt	cs
   11dec:	1ab6      	subcs	r6, r6, r2
   11dee:	4675      	movcs	r5, lr
   11df0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   11df4:	ea55 0e06 	orrs.w	lr, r5, r6
   11df8:	d018      	beq.n	11e2c <__aeabi_ddiv+0x114>
   11dfa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   11dfe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   11e02:	ea4f 1606 	mov.w	r6, r6, lsl #4
   11e06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11e0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   11e0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   11e12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   11e16:	d1c0      	bne.n	11d9a <__aeabi_ddiv+0x82>
   11e18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11e1c:	d10b      	bne.n	11e36 <__aeabi_ddiv+0x11e>
   11e1e:	ea41 0100 	orr.w	r1, r1, r0
   11e22:	f04f 0000 	mov.w	r0, #0
   11e26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   11e2a:	e7b6      	b.n	11d9a <__aeabi_ddiv+0x82>
   11e2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11e30:	bf04      	itt	eq
   11e32:	4301      	orreq	r1, r0
   11e34:	2000      	moveq	r0, #0
   11e36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11e3a:	bf88      	it	hi
   11e3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11e40:	f63f aeaf 	bhi.w	11ba2 <__aeabi_dmul+0xde>
   11e44:	ebb5 0c03 	subs.w	ip, r5, r3
   11e48:	bf04      	itt	eq
   11e4a:	ebb6 0c02 	subseq.w	ip, r6, r2
   11e4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   11e52:	f150 0000 	adcs.w	r0, r0, #0
   11e56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11e5a:	bd70      	pop	{r4, r5, r6, pc}
   11e5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   11e60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   11e64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   11e68:	bfc2      	ittt	gt
   11e6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   11e6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   11e72:	bd70      	popgt	{r4, r5, r6, pc}
   11e74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11e78:	f04f 0e00 	mov.w	lr, #0
   11e7c:	3c01      	subs	r4, #1
   11e7e:	e690      	b.n	11ba2 <__aeabi_dmul+0xde>
   11e80:	ea45 0e06 	orr.w	lr, r5, r6
   11e84:	e68d      	b.n	11ba2 <__aeabi_dmul+0xde>
   11e86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   11e8a:	ea94 0f0c 	teq	r4, ip
   11e8e:	bf08      	it	eq
   11e90:	ea95 0f0c 	teqeq	r5, ip
   11e94:	f43f af3b 	beq.w	11d0e <__aeabi_dmul+0x24a>
   11e98:	ea94 0f0c 	teq	r4, ip
   11e9c:	d10a      	bne.n	11eb4 <__aeabi_ddiv+0x19c>
   11e9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   11ea2:	f47f af34 	bne.w	11d0e <__aeabi_dmul+0x24a>
   11ea6:	ea95 0f0c 	teq	r5, ip
   11eaa:	f47f af25 	bne.w	11cf8 <__aeabi_dmul+0x234>
   11eae:	4610      	mov	r0, r2
   11eb0:	4619      	mov	r1, r3
   11eb2:	e72c      	b.n	11d0e <__aeabi_dmul+0x24a>
   11eb4:	ea95 0f0c 	teq	r5, ip
   11eb8:	d106      	bne.n	11ec8 <__aeabi_ddiv+0x1b0>
   11eba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   11ebe:	f43f aefd 	beq.w	11cbc <__aeabi_dmul+0x1f8>
   11ec2:	4610      	mov	r0, r2
   11ec4:	4619      	mov	r1, r3
   11ec6:	e722      	b.n	11d0e <__aeabi_dmul+0x24a>
   11ec8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11ecc:	bf18      	it	ne
   11ece:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11ed2:	f47f aec5 	bne.w	11c60 <__aeabi_dmul+0x19c>
   11ed6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   11eda:	f47f af0d 	bne.w	11cf8 <__aeabi_dmul+0x234>
   11ede:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   11ee2:	f47f aeeb 	bne.w	11cbc <__aeabi_dmul+0x1f8>
   11ee6:	e712      	b.n	11d0e <__aeabi_dmul+0x24a>

00011ee8 <__gedf2>:
   11ee8:	f04f 3cff 	mov.w	ip, #4294967295
   11eec:	e006      	b.n	11efc <__cmpdf2+0x4>
   11eee:	bf00      	nop

00011ef0 <__ledf2>:
   11ef0:	f04f 0c01 	mov.w	ip, #1
   11ef4:	e002      	b.n	11efc <__cmpdf2+0x4>
   11ef6:	bf00      	nop

00011ef8 <__cmpdf2>:
   11ef8:	f04f 0c01 	mov.w	ip, #1
   11efc:	f84d cd04 	str.w	ip, [sp, #-4]!
   11f00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11f04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11f08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11f0c:	bf18      	it	ne
   11f0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   11f12:	d01b      	beq.n	11f4c <__cmpdf2+0x54>
   11f14:	b001      	add	sp, #4
   11f16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   11f1a:	bf0c      	ite	eq
   11f1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   11f20:	ea91 0f03 	teqne	r1, r3
   11f24:	bf02      	ittt	eq
   11f26:	ea90 0f02 	teqeq	r0, r2
   11f2a:	2000      	moveq	r0, #0
   11f2c:	4770      	bxeq	lr
   11f2e:	f110 0f00 	cmn.w	r0, #0
   11f32:	ea91 0f03 	teq	r1, r3
   11f36:	bf58      	it	pl
   11f38:	4299      	cmppl	r1, r3
   11f3a:	bf08      	it	eq
   11f3c:	4290      	cmpeq	r0, r2
   11f3e:	bf2c      	ite	cs
   11f40:	17d8      	asrcs	r0, r3, #31
   11f42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   11f46:	f040 0001 	orr.w	r0, r0, #1
   11f4a:	4770      	bx	lr
   11f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11f54:	d102      	bne.n	11f5c <__cmpdf2+0x64>
   11f56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   11f5a:	d107      	bne.n	11f6c <__cmpdf2+0x74>
   11f5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11f60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11f64:	d1d6      	bne.n	11f14 <__cmpdf2+0x1c>
   11f66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   11f6a:	d0d3      	beq.n	11f14 <__cmpdf2+0x1c>
   11f6c:	f85d 0b04 	ldr.w	r0, [sp], #4
   11f70:	4770      	bx	lr
   11f72:	bf00      	nop

00011f74 <__aeabi_cdrcmple>:
   11f74:	4684      	mov	ip, r0
   11f76:	4610      	mov	r0, r2
   11f78:	4662      	mov	r2, ip
   11f7a:	468c      	mov	ip, r1
   11f7c:	4619      	mov	r1, r3
   11f7e:	4663      	mov	r3, ip
   11f80:	e000      	b.n	11f84 <__aeabi_cdcmpeq>
   11f82:	bf00      	nop

00011f84 <__aeabi_cdcmpeq>:
   11f84:	b501      	push	{r0, lr}
   11f86:	f7ff ffb7 	bl	11ef8 <__cmpdf2>
   11f8a:	2800      	cmp	r0, #0
   11f8c:	bf48      	it	mi
   11f8e:	f110 0f00 	cmnmi.w	r0, #0
   11f92:	bd01      	pop	{r0, pc}

00011f94 <__aeabi_dcmpeq>:
   11f94:	f84d ed08 	str.w	lr, [sp, #-8]!
   11f98:	f7ff fff4 	bl	11f84 <__aeabi_cdcmpeq>
   11f9c:	bf0c      	ite	eq
   11f9e:	2001      	moveq	r0, #1
   11fa0:	2000      	movne	r0, #0
   11fa2:	f85d fb08 	ldr.w	pc, [sp], #8
   11fa6:	bf00      	nop

00011fa8 <__aeabi_dcmplt>:
   11fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   11fac:	f7ff ffea 	bl	11f84 <__aeabi_cdcmpeq>
   11fb0:	bf34      	ite	cc
   11fb2:	2001      	movcc	r0, #1
   11fb4:	2000      	movcs	r0, #0
   11fb6:	f85d fb08 	ldr.w	pc, [sp], #8
   11fba:	bf00      	nop

00011fbc <__aeabi_dcmple>:
   11fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   11fc0:	f7ff ffe0 	bl	11f84 <__aeabi_cdcmpeq>
   11fc4:	bf94      	ite	ls
   11fc6:	2001      	movls	r0, #1
   11fc8:	2000      	movhi	r0, #0
   11fca:	f85d fb08 	ldr.w	pc, [sp], #8
   11fce:	bf00      	nop

00011fd0 <__aeabi_dcmpge>:
   11fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   11fd4:	f7ff ffce 	bl	11f74 <__aeabi_cdrcmple>
   11fd8:	bf94      	ite	ls
   11fda:	2001      	movls	r0, #1
   11fdc:	2000      	movhi	r0, #0
   11fde:	f85d fb08 	ldr.w	pc, [sp], #8
   11fe2:	bf00      	nop

00011fe4 <__aeabi_dcmpgt>:
   11fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
   11fe8:	f7ff ffc4 	bl	11f74 <__aeabi_cdrcmple>
   11fec:	bf34      	ite	cc
   11fee:	2001      	movcc	r0, #1
   11ff0:	2000      	movcs	r0, #0
   11ff2:	f85d fb08 	ldr.w	pc, [sp], #8
   11ff6:	bf00      	nop

00011ff8 <__aeabi_dcmpun>:
   11ff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12000:	d102      	bne.n	12008 <__aeabi_dcmpun+0x10>
   12002:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   12006:	d10a      	bne.n	1201e <__aeabi_dcmpun+0x26>
   12008:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1200c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   12010:	d102      	bne.n	12018 <__aeabi_dcmpun+0x20>
   12012:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   12016:	d102      	bne.n	1201e <__aeabi_dcmpun+0x26>
   12018:	f04f 0000 	mov.w	r0, #0
   1201c:	4770      	bx	lr
   1201e:	f04f 0001 	mov.w	r0, #1
   12022:	4770      	bx	lr

00012024 <__aeabi_d2uiz>:
   12024:	004a      	lsls	r2, r1, #1
   12026:	d211      	bcs.n	1204c <__aeabi_d2uiz+0x28>
   12028:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1202c:	d211      	bcs.n	12052 <__aeabi_d2uiz+0x2e>
   1202e:	d50d      	bpl.n	1204c <__aeabi_d2uiz+0x28>
   12030:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12034:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12038:	d40e      	bmi.n	12058 <__aeabi_d2uiz+0x34>
   1203a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1203e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12042:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12046:	fa23 f002 	lsr.w	r0, r3, r2
   1204a:	4770      	bx	lr
   1204c:	f04f 0000 	mov.w	r0, #0
   12050:	4770      	bx	lr
   12052:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12056:	d102      	bne.n	1205e <__aeabi_d2uiz+0x3a>
   12058:	f04f 30ff 	mov.w	r0, #4294967295
   1205c:	4770      	bx	lr
   1205e:	f04f 0000 	mov.w	r0, #0
   12062:	4770      	bx	lr

00012064 <__aeabi_frsub>:
   12064:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   12068:	e002      	b.n	12070 <__addsf3>
   1206a:	bf00      	nop

0001206c <__aeabi_fsub>:
   1206c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00012070 <__addsf3>:
   12070:	0042      	lsls	r2, r0, #1
   12072:	bf1f      	itttt	ne
   12074:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   12078:	ea92 0f03 	teqne	r2, r3
   1207c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   12080:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   12084:	d06a      	beq.n	1215c <__addsf3+0xec>
   12086:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1208a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1208e:	bfc1      	itttt	gt
   12090:	18d2      	addgt	r2, r2, r3
   12092:	4041      	eorgt	r1, r0
   12094:	4048      	eorgt	r0, r1
   12096:	4041      	eorgt	r1, r0
   12098:	bfb8      	it	lt
   1209a:	425b      	neglt	r3, r3
   1209c:	2b19      	cmp	r3, #25
   1209e:	bf88      	it	hi
   120a0:	4770      	bxhi	lr
   120a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   120a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   120aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   120ae:	bf18      	it	ne
   120b0:	4240      	negne	r0, r0
   120b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   120b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   120ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   120be:	bf18      	it	ne
   120c0:	4249      	negne	r1, r1
   120c2:	ea92 0f03 	teq	r2, r3
   120c6:	d03f      	beq.n	12148 <__addsf3+0xd8>
   120c8:	f1a2 0201 	sub.w	r2, r2, #1
   120cc:	fa41 fc03 	asr.w	ip, r1, r3
   120d0:	eb10 000c 	adds.w	r0, r0, ip
   120d4:	f1c3 0320 	rsb	r3, r3, #32
   120d8:	fa01 f103 	lsl.w	r1, r1, r3
   120dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   120e0:	d502      	bpl.n	120e8 <__addsf3+0x78>
   120e2:	4249      	negs	r1, r1
   120e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   120e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   120ec:	d313      	bcc.n	12116 <__addsf3+0xa6>
   120ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   120f2:	d306      	bcc.n	12102 <__addsf3+0x92>
   120f4:	0840      	lsrs	r0, r0, #1
   120f6:	ea4f 0131 	mov.w	r1, r1, rrx
   120fa:	f102 0201 	add.w	r2, r2, #1
   120fe:	2afe      	cmp	r2, #254	; 0xfe
   12100:	d251      	bcs.n	121a6 <__addsf3+0x136>
   12102:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   12106:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1210a:	bf08      	it	eq
   1210c:	f020 0001 	biceq.w	r0, r0, #1
   12110:	ea40 0003 	orr.w	r0, r0, r3
   12114:	4770      	bx	lr
   12116:	0049      	lsls	r1, r1, #1
   12118:	eb40 0000 	adc.w	r0, r0, r0
   1211c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   12120:	f1a2 0201 	sub.w	r2, r2, #1
   12124:	d1ed      	bne.n	12102 <__addsf3+0x92>
   12126:	fab0 fc80 	clz	ip, r0
   1212a:	f1ac 0c08 	sub.w	ip, ip, #8
   1212e:	ebb2 020c 	subs.w	r2, r2, ip
   12132:	fa00 f00c 	lsl.w	r0, r0, ip
   12136:	bfaa      	itet	ge
   12138:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1213c:	4252      	neglt	r2, r2
   1213e:	4318      	orrge	r0, r3
   12140:	bfbc      	itt	lt
   12142:	40d0      	lsrlt	r0, r2
   12144:	4318      	orrlt	r0, r3
   12146:	4770      	bx	lr
   12148:	f092 0f00 	teq	r2, #0
   1214c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   12150:	bf06      	itte	eq
   12152:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   12156:	3201      	addeq	r2, #1
   12158:	3b01      	subne	r3, #1
   1215a:	e7b5      	b.n	120c8 <__addsf3+0x58>
   1215c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   12160:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   12164:	bf18      	it	ne
   12166:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1216a:	d021      	beq.n	121b0 <__addsf3+0x140>
   1216c:	ea92 0f03 	teq	r2, r3
   12170:	d004      	beq.n	1217c <__addsf3+0x10c>
   12172:	f092 0f00 	teq	r2, #0
   12176:	bf08      	it	eq
   12178:	4608      	moveq	r0, r1
   1217a:	4770      	bx	lr
   1217c:	ea90 0f01 	teq	r0, r1
   12180:	bf1c      	itt	ne
   12182:	2000      	movne	r0, #0
   12184:	4770      	bxne	lr
   12186:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1218a:	d104      	bne.n	12196 <__addsf3+0x126>
   1218c:	0040      	lsls	r0, r0, #1
   1218e:	bf28      	it	cs
   12190:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   12194:	4770      	bx	lr
   12196:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1219a:	bf3c      	itt	cc
   1219c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   121a0:	4770      	bxcc	lr
   121a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   121a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   121aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   121ae:	4770      	bx	lr
   121b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   121b4:	bf16      	itet	ne
   121b6:	4608      	movne	r0, r1
   121b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   121bc:	4601      	movne	r1, r0
   121be:	0242      	lsls	r2, r0, #9
   121c0:	bf06      	itte	eq
   121c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   121c6:	ea90 0f01 	teqeq	r0, r1
   121ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   121ce:	4770      	bx	lr

000121d0 <__aeabi_ui2f>:
   121d0:	f04f 0300 	mov.w	r3, #0
   121d4:	e004      	b.n	121e0 <__aeabi_i2f+0x8>
   121d6:	bf00      	nop

000121d8 <__aeabi_i2f>:
   121d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   121dc:	bf48      	it	mi
   121de:	4240      	negmi	r0, r0
   121e0:	ea5f 0c00 	movs.w	ip, r0
   121e4:	bf08      	it	eq
   121e6:	4770      	bxeq	lr
   121e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   121ec:	4601      	mov	r1, r0
   121ee:	f04f 0000 	mov.w	r0, #0
   121f2:	e01c      	b.n	1222e <__aeabi_l2f+0x2a>

000121f4 <__aeabi_ul2f>:
   121f4:	ea50 0201 	orrs.w	r2, r0, r1
   121f8:	bf08      	it	eq
   121fa:	4770      	bxeq	lr
   121fc:	f04f 0300 	mov.w	r3, #0
   12200:	e00a      	b.n	12218 <__aeabi_l2f+0x14>
   12202:	bf00      	nop

00012204 <__aeabi_l2f>:
   12204:	ea50 0201 	orrs.w	r2, r0, r1
   12208:	bf08      	it	eq
   1220a:	4770      	bxeq	lr
   1220c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   12210:	d502      	bpl.n	12218 <__aeabi_l2f+0x14>
   12212:	4240      	negs	r0, r0
   12214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12218:	ea5f 0c01 	movs.w	ip, r1
   1221c:	bf02      	ittt	eq
   1221e:	4684      	moveq	ip, r0
   12220:	4601      	moveq	r1, r0
   12222:	2000      	moveq	r0, #0
   12224:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   12228:	bf08      	it	eq
   1222a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1222e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   12232:	fabc f28c 	clz	r2, ip
   12236:	3a08      	subs	r2, #8
   12238:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1223c:	db10      	blt.n	12260 <__aeabi_l2f+0x5c>
   1223e:	fa01 fc02 	lsl.w	ip, r1, r2
   12242:	4463      	add	r3, ip
   12244:	fa00 fc02 	lsl.w	ip, r0, r2
   12248:	f1c2 0220 	rsb	r2, r2, #32
   1224c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12250:	fa20 f202 	lsr.w	r2, r0, r2
   12254:	eb43 0002 	adc.w	r0, r3, r2
   12258:	bf08      	it	eq
   1225a:	f020 0001 	biceq.w	r0, r0, #1
   1225e:	4770      	bx	lr
   12260:	f102 0220 	add.w	r2, r2, #32
   12264:	fa01 fc02 	lsl.w	ip, r1, r2
   12268:	f1c2 0220 	rsb	r2, r2, #32
   1226c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   12270:	fa21 f202 	lsr.w	r2, r1, r2
   12274:	eb43 0002 	adc.w	r0, r3, r2
   12278:	bf08      	it	eq
   1227a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1227e:	4770      	bx	lr

00012280 <__aeabi_fmul>:
   12280:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12284:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   12288:	bf1e      	ittt	ne
   1228a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1228e:	ea92 0f0c 	teqne	r2, ip
   12292:	ea93 0f0c 	teqne	r3, ip
   12296:	d06f      	beq.n	12378 <__aeabi_fmul+0xf8>
   12298:	441a      	add	r2, r3
   1229a:	ea80 0c01 	eor.w	ip, r0, r1
   1229e:	0240      	lsls	r0, r0, #9
   122a0:	bf18      	it	ne
   122a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   122a6:	d01e      	beq.n	122e6 <__aeabi_fmul+0x66>
   122a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   122ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   122b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   122b4:	fba0 3101 	umull	r3, r1, r0, r1
   122b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   122bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   122c0:	bf3e      	ittt	cc
   122c2:	0049      	lslcc	r1, r1, #1
   122c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   122c8:	005b      	lslcc	r3, r3, #1
   122ca:	ea40 0001 	orr.w	r0, r0, r1
   122ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   122d2:	2afd      	cmp	r2, #253	; 0xfd
   122d4:	d81d      	bhi.n	12312 <__aeabi_fmul+0x92>
   122d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   122da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   122de:	bf08      	it	eq
   122e0:	f020 0001 	biceq.w	r0, r0, #1
   122e4:	4770      	bx	lr
   122e6:	f090 0f00 	teq	r0, #0
   122ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   122ee:	bf08      	it	eq
   122f0:	0249      	lsleq	r1, r1, #9
   122f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   122f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   122fa:	3a7f      	subs	r2, #127	; 0x7f
   122fc:	bfc2      	ittt	gt
   122fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12302:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12306:	4770      	bxgt	lr
   12308:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1230c:	f04f 0300 	mov.w	r3, #0
   12310:	3a01      	subs	r2, #1
   12312:	dc5d      	bgt.n	123d0 <__aeabi_fmul+0x150>
   12314:	f112 0f19 	cmn.w	r2, #25
   12318:	bfdc      	itt	le
   1231a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1231e:	4770      	bxle	lr
   12320:	f1c2 0200 	rsb	r2, r2, #0
   12324:	0041      	lsls	r1, r0, #1
   12326:	fa21 f102 	lsr.w	r1, r1, r2
   1232a:	f1c2 0220 	rsb	r2, r2, #32
   1232e:	fa00 fc02 	lsl.w	ip, r0, r2
   12332:	ea5f 0031 	movs.w	r0, r1, rrx
   12336:	f140 0000 	adc.w	r0, r0, #0
   1233a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1233e:	bf08      	it	eq
   12340:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   12344:	4770      	bx	lr
   12346:	f092 0f00 	teq	r2, #0
   1234a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1234e:	bf02      	ittt	eq
   12350:	0040      	lsleq	r0, r0, #1
   12352:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12356:	3a01      	subeq	r2, #1
   12358:	d0f9      	beq.n	1234e <__aeabi_fmul+0xce>
   1235a:	ea40 000c 	orr.w	r0, r0, ip
   1235e:	f093 0f00 	teq	r3, #0
   12362:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12366:	bf02      	ittt	eq
   12368:	0049      	lsleq	r1, r1, #1
   1236a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1236e:	3b01      	subeq	r3, #1
   12370:	d0f9      	beq.n	12366 <__aeabi_fmul+0xe6>
   12372:	ea41 010c 	orr.w	r1, r1, ip
   12376:	e78f      	b.n	12298 <__aeabi_fmul+0x18>
   12378:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1237c:	ea92 0f0c 	teq	r2, ip
   12380:	bf18      	it	ne
   12382:	ea93 0f0c 	teqne	r3, ip
   12386:	d00a      	beq.n	1239e <__aeabi_fmul+0x11e>
   12388:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1238c:	bf18      	it	ne
   1238e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12392:	d1d8      	bne.n	12346 <__aeabi_fmul+0xc6>
   12394:	ea80 0001 	eor.w	r0, r0, r1
   12398:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1239c:	4770      	bx	lr
   1239e:	f090 0f00 	teq	r0, #0
   123a2:	bf17      	itett	ne
   123a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   123a8:	4608      	moveq	r0, r1
   123aa:	f091 0f00 	teqne	r1, #0
   123ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   123b2:	d014      	beq.n	123de <__aeabi_fmul+0x15e>
   123b4:	ea92 0f0c 	teq	r2, ip
   123b8:	d101      	bne.n	123be <__aeabi_fmul+0x13e>
   123ba:	0242      	lsls	r2, r0, #9
   123bc:	d10f      	bne.n	123de <__aeabi_fmul+0x15e>
   123be:	ea93 0f0c 	teq	r3, ip
   123c2:	d103      	bne.n	123cc <__aeabi_fmul+0x14c>
   123c4:	024b      	lsls	r3, r1, #9
   123c6:	bf18      	it	ne
   123c8:	4608      	movne	r0, r1
   123ca:	d108      	bne.n	123de <__aeabi_fmul+0x15e>
   123cc:	ea80 0001 	eor.w	r0, r0, r1
   123d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   123d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   123d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   123dc:	4770      	bx	lr
   123de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   123e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   123e6:	4770      	bx	lr

000123e8 <__aeabi_fdiv>:
   123e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   123ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   123f0:	bf1e      	ittt	ne
   123f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   123f6:	ea92 0f0c 	teqne	r2, ip
   123fa:	ea93 0f0c 	teqne	r3, ip
   123fe:	d069      	beq.n	124d4 <__aeabi_fdiv+0xec>
   12400:	eba2 0203 	sub.w	r2, r2, r3
   12404:	ea80 0c01 	eor.w	ip, r0, r1
   12408:	0249      	lsls	r1, r1, #9
   1240a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1240e:	d037      	beq.n	12480 <__aeabi_fdiv+0x98>
   12410:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12414:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   12418:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1241c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12420:	428b      	cmp	r3, r1
   12422:	bf38      	it	cc
   12424:	005b      	lslcc	r3, r3, #1
   12426:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1242a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1242e:	428b      	cmp	r3, r1
   12430:	bf24      	itt	cs
   12432:	1a5b      	subcs	r3, r3, r1
   12434:	ea40 000c 	orrcs.w	r0, r0, ip
   12438:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1243c:	bf24      	itt	cs
   1243e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   12442:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12446:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1244a:	bf24      	itt	cs
   1244c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   12450:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12454:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   12458:	bf24      	itt	cs
   1245a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1245e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12462:	011b      	lsls	r3, r3, #4
   12464:	bf18      	it	ne
   12466:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1246a:	d1e0      	bne.n	1242e <__aeabi_fdiv+0x46>
   1246c:	2afd      	cmp	r2, #253	; 0xfd
   1246e:	f63f af50 	bhi.w	12312 <__aeabi_fmul+0x92>
   12472:	428b      	cmp	r3, r1
   12474:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12478:	bf08      	it	eq
   1247a:	f020 0001 	biceq.w	r0, r0, #1
   1247e:	4770      	bx	lr
   12480:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12484:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   12488:	327f      	adds	r2, #127	; 0x7f
   1248a:	bfc2      	ittt	gt
   1248c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12490:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12494:	4770      	bxgt	lr
   12496:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1249a:	f04f 0300 	mov.w	r3, #0
   1249e:	3a01      	subs	r2, #1
   124a0:	e737      	b.n	12312 <__aeabi_fmul+0x92>
   124a2:	f092 0f00 	teq	r2, #0
   124a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   124aa:	bf02      	ittt	eq
   124ac:	0040      	lsleq	r0, r0, #1
   124ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   124b2:	3a01      	subeq	r2, #1
   124b4:	d0f9      	beq.n	124aa <__aeabi_fdiv+0xc2>
   124b6:	ea40 000c 	orr.w	r0, r0, ip
   124ba:	f093 0f00 	teq	r3, #0
   124be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   124c2:	bf02      	ittt	eq
   124c4:	0049      	lsleq	r1, r1, #1
   124c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   124ca:	3b01      	subeq	r3, #1
   124cc:	d0f9      	beq.n	124c2 <__aeabi_fdiv+0xda>
   124ce:	ea41 010c 	orr.w	r1, r1, ip
   124d2:	e795      	b.n	12400 <__aeabi_fdiv+0x18>
   124d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   124d8:	ea92 0f0c 	teq	r2, ip
   124dc:	d108      	bne.n	124f0 <__aeabi_fdiv+0x108>
   124de:	0242      	lsls	r2, r0, #9
   124e0:	f47f af7d 	bne.w	123de <__aeabi_fmul+0x15e>
   124e4:	ea93 0f0c 	teq	r3, ip
   124e8:	f47f af70 	bne.w	123cc <__aeabi_fmul+0x14c>
   124ec:	4608      	mov	r0, r1
   124ee:	e776      	b.n	123de <__aeabi_fmul+0x15e>
   124f0:	ea93 0f0c 	teq	r3, ip
   124f4:	d104      	bne.n	12500 <__aeabi_fdiv+0x118>
   124f6:	024b      	lsls	r3, r1, #9
   124f8:	f43f af4c 	beq.w	12394 <__aeabi_fmul+0x114>
   124fc:	4608      	mov	r0, r1
   124fe:	e76e      	b.n	123de <__aeabi_fmul+0x15e>
   12500:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   12504:	bf18      	it	ne
   12506:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1250a:	d1ca      	bne.n	124a2 <__aeabi_fdiv+0xba>
   1250c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   12510:	f47f af5c 	bne.w	123cc <__aeabi_fmul+0x14c>
   12514:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   12518:	f47f af3c 	bne.w	12394 <__aeabi_fmul+0x114>
   1251c:	e75f      	b.n	123de <__aeabi_fmul+0x15e>
   1251e:	bf00      	nop

00012520 <__cxa_atexit>:
   12520:	4613      	mov	r3, r2
   12522:	460a      	mov	r2, r1
   12524:	4601      	mov	r1, r0
   12526:	2002      	movs	r0, #2
   12528:	f000 b998 	b.w	1285c <__register_exitproc>

0001252c <__errno>:
   1252c:	4b01      	ldr	r3, [pc, #4]	; (12534 <__errno+0x8>)
   1252e:	6818      	ldr	r0, [r3, #0]
   12530:	4770      	bx	lr
   12532:	bf00      	nop
   12534:	20000158 	.word	0x20000158

00012538 <ffs>:
   12538:	b140      	cbz	r0, 1254c <ffs+0x14>
   1253a:	2300      	movs	r3, #0
   1253c:	fa40 f103 	asr.w	r1, r0, r3
   12540:	1c5a      	adds	r2, r3, #1
   12542:	07c9      	lsls	r1, r1, #31
   12544:	4613      	mov	r3, r2
   12546:	d5f9      	bpl.n	1253c <ffs+0x4>
   12548:	4610      	mov	r0, r2
   1254a:	4770      	bx	lr
   1254c:	4602      	mov	r2, r0
   1254e:	4610      	mov	r0, r2
   12550:	4770      	bx	lr
   12552:	bf00      	nop

00012554 <__libc_init_array>:
   12554:	b570      	push	{r4, r5, r6, lr}
   12556:	4e0f      	ldr	r6, [pc, #60]	; (12594 <__libc_init_array+0x40>)
   12558:	4d0f      	ldr	r5, [pc, #60]	; (12598 <__libc_init_array+0x44>)
   1255a:	1b76      	subs	r6, r6, r5
   1255c:	10b6      	asrs	r6, r6, #2
   1255e:	bf18      	it	ne
   12560:	2400      	movne	r4, #0
   12562:	d005      	beq.n	12570 <__libc_init_array+0x1c>
   12564:	3401      	adds	r4, #1
   12566:	f855 3b04 	ldr.w	r3, [r5], #4
   1256a:	4798      	blx	r3
   1256c:	42a6      	cmp	r6, r4
   1256e:	d1f9      	bne.n	12564 <__libc_init_array+0x10>
   12570:	4e0a      	ldr	r6, [pc, #40]	; (1259c <__libc_init_array+0x48>)
   12572:	4d0b      	ldr	r5, [pc, #44]	; (125a0 <__libc_init_array+0x4c>)
   12574:	1b76      	subs	r6, r6, r5
   12576:	f001 fc75 	bl	13e64 <_init>
   1257a:	10b6      	asrs	r6, r6, #2
   1257c:	bf18      	it	ne
   1257e:	2400      	movne	r4, #0
   12580:	d006      	beq.n	12590 <__libc_init_array+0x3c>
   12582:	3401      	adds	r4, #1
   12584:	f855 3b04 	ldr.w	r3, [r5], #4
   12588:	4798      	blx	r3
   1258a:	42a6      	cmp	r6, r4
   1258c:	d1f9      	bne.n	12582 <__libc_init_array+0x2e>
   1258e:	bd70      	pop	{r4, r5, r6, pc}
   12590:	bd70      	pop	{r4, r5, r6, pc}
   12592:	bf00      	nop
   12594:	00013e70 	.word	0x00013e70
   12598:	00013e70 	.word	0x00013e70
   1259c:	00013eb4 	.word	0x00013eb4
   125a0:	00013e70 	.word	0x00013e70

000125a4 <memcpy>:
   125a4:	4684      	mov	ip, r0
   125a6:	ea41 0300 	orr.w	r3, r1, r0
   125aa:	f013 0303 	ands.w	r3, r3, #3
   125ae:	d16d      	bne.n	1268c <memcpy+0xe8>
   125b0:	3a40      	subs	r2, #64	; 0x40
   125b2:	d341      	bcc.n	12638 <memcpy+0x94>
   125b4:	f851 3b04 	ldr.w	r3, [r1], #4
   125b8:	f840 3b04 	str.w	r3, [r0], #4
   125bc:	f851 3b04 	ldr.w	r3, [r1], #4
   125c0:	f840 3b04 	str.w	r3, [r0], #4
   125c4:	f851 3b04 	ldr.w	r3, [r1], #4
   125c8:	f840 3b04 	str.w	r3, [r0], #4
   125cc:	f851 3b04 	ldr.w	r3, [r1], #4
   125d0:	f840 3b04 	str.w	r3, [r0], #4
   125d4:	f851 3b04 	ldr.w	r3, [r1], #4
   125d8:	f840 3b04 	str.w	r3, [r0], #4
   125dc:	f851 3b04 	ldr.w	r3, [r1], #4
   125e0:	f840 3b04 	str.w	r3, [r0], #4
   125e4:	f851 3b04 	ldr.w	r3, [r1], #4
   125e8:	f840 3b04 	str.w	r3, [r0], #4
   125ec:	f851 3b04 	ldr.w	r3, [r1], #4
   125f0:	f840 3b04 	str.w	r3, [r0], #4
   125f4:	f851 3b04 	ldr.w	r3, [r1], #4
   125f8:	f840 3b04 	str.w	r3, [r0], #4
   125fc:	f851 3b04 	ldr.w	r3, [r1], #4
   12600:	f840 3b04 	str.w	r3, [r0], #4
   12604:	f851 3b04 	ldr.w	r3, [r1], #4
   12608:	f840 3b04 	str.w	r3, [r0], #4
   1260c:	f851 3b04 	ldr.w	r3, [r1], #4
   12610:	f840 3b04 	str.w	r3, [r0], #4
   12614:	f851 3b04 	ldr.w	r3, [r1], #4
   12618:	f840 3b04 	str.w	r3, [r0], #4
   1261c:	f851 3b04 	ldr.w	r3, [r1], #4
   12620:	f840 3b04 	str.w	r3, [r0], #4
   12624:	f851 3b04 	ldr.w	r3, [r1], #4
   12628:	f840 3b04 	str.w	r3, [r0], #4
   1262c:	f851 3b04 	ldr.w	r3, [r1], #4
   12630:	f840 3b04 	str.w	r3, [r0], #4
   12634:	3a40      	subs	r2, #64	; 0x40
   12636:	d2bd      	bcs.n	125b4 <memcpy+0x10>
   12638:	3230      	adds	r2, #48	; 0x30
   1263a:	d311      	bcc.n	12660 <memcpy+0xbc>
   1263c:	f851 3b04 	ldr.w	r3, [r1], #4
   12640:	f840 3b04 	str.w	r3, [r0], #4
   12644:	f851 3b04 	ldr.w	r3, [r1], #4
   12648:	f840 3b04 	str.w	r3, [r0], #4
   1264c:	f851 3b04 	ldr.w	r3, [r1], #4
   12650:	f840 3b04 	str.w	r3, [r0], #4
   12654:	f851 3b04 	ldr.w	r3, [r1], #4
   12658:	f840 3b04 	str.w	r3, [r0], #4
   1265c:	3a10      	subs	r2, #16
   1265e:	d2ed      	bcs.n	1263c <memcpy+0x98>
   12660:	320c      	adds	r2, #12
   12662:	d305      	bcc.n	12670 <memcpy+0xcc>
   12664:	f851 3b04 	ldr.w	r3, [r1], #4
   12668:	f840 3b04 	str.w	r3, [r0], #4
   1266c:	3a04      	subs	r2, #4
   1266e:	d2f9      	bcs.n	12664 <memcpy+0xc0>
   12670:	3204      	adds	r2, #4
   12672:	d008      	beq.n	12686 <memcpy+0xe2>
   12674:	07d2      	lsls	r2, r2, #31
   12676:	bf1c      	itt	ne
   12678:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1267c:	f800 3b01 	strbne.w	r3, [r0], #1
   12680:	d301      	bcc.n	12686 <memcpy+0xe2>
   12682:	880b      	ldrh	r3, [r1, #0]
   12684:	8003      	strh	r3, [r0, #0]
   12686:	4660      	mov	r0, ip
   12688:	4770      	bx	lr
   1268a:	bf00      	nop
   1268c:	2a08      	cmp	r2, #8
   1268e:	d313      	bcc.n	126b8 <memcpy+0x114>
   12690:	078b      	lsls	r3, r1, #30
   12692:	d08d      	beq.n	125b0 <memcpy+0xc>
   12694:	f010 0303 	ands.w	r3, r0, #3
   12698:	d08a      	beq.n	125b0 <memcpy+0xc>
   1269a:	f1c3 0304 	rsb	r3, r3, #4
   1269e:	1ad2      	subs	r2, r2, r3
   126a0:	07db      	lsls	r3, r3, #31
   126a2:	bf1c      	itt	ne
   126a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   126a8:	f800 3b01 	strbne.w	r3, [r0], #1
   126ac:	d380      	bcc.n	125b0 <memcpy+0xc>
   126ae:	f831 3b02 	ldrh.w	r3, [r1], #2
   126b2:	f820 3b02 	strh.w	r3, [r0], #2
   126b6:	e77b      	b.n	125b0 <memcpy+0xc>
   126b8:	3a04      	subs	r2, #4
   126ba:	d3d9      	bcc.n	12670 <memcpy+0xcc>
   126bc:	3a01      	subs	r2, #1
   126be:	f811 3b01 	ldrb.w	r3, [r1], #1
   126c2:	f800 3b01 	strb.w	r3, [r0], #1
   126c6:	d2f9      	bcs.n	126bc <memcpy+0x118>
   126c8:	780b      	ldrb	r3, [r1, #0]
   126ca:	7003      	strb	r3, [r0, #0]
   126cc:	784b      	ldrb	r3, [r1, #1]
   126ce:	7043      	strb	r3, [r0, #1]
   126d0:	788b      	ldrb	r3, [r1, #2]
   126d2:	7083      	strb	r3, [r0, #2]
   126d4:	4660      	mov	r0, ip
   126d6:	4770      	bx	lr

000126d8 <memset>:
   126d8:	b470      	push	{r4, r5, r6}
   126da:	0786      	lsls	r6, r0, #30
   126dc:	d046      	beq.n	1276c <memset+0x94>
   126de:	1e54      	subs	r4, r2, #1
   126e0:	2a00      	cmp	r2, #0
   126e2:	d041      	beq.n	12768 <memset+0x90>
   126e4:	b2ca      	uxtb	r2, r1
   126e6:	4603      	mov	r3, r0
   126e8:	e002      	b.n	126f0 <memset+0x18>
   126ea:	f114 34ff 	adds.w	r4, r4, #4294967295
   126ee:	d33b      	bcc.n	12768 <memset+0x90>
   126f0:	f803 2b01 	strb.w	r2, [r3], #1
   126f4:	079d      	lsls	r5, r3, #30
   126f6:	d1f8      	bne.n	126ea <memset+0x12>
   126f8:	2c03      	cmp	r4, #3
   126fa:	d92e      	bls.n	1275a <memset+0x82>
   126fc:	b2cd      	uxtb	r5, r1
   126fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12702:	2c0f      	cmp	r4, #15
   12704:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12708:	d919      	bls.n	1273e <memset+0x66>
   1270a:	f103 0210 	add.w	r2, r3, #16
   1270e:	4626      	mov	r6, r4
   12710:	3e10      	subs	r6, #16
   12712:	2e0f      	cmp	r6, #15
   12714:	f842 5c10 	str.w	r5, [r2, #-16]
   12718:	f842 5c0c 	str.w	r5, [r2, #-12]
   1271c:	f842 5c08 	str.w	r5, [r2, #-8]
   12720:	f842 5c04 	str.w	r5, [r2, #-4]
   12724:	f102 0210 	add.w	r2, r2, #16
   12728:	d8f2      	bhi.n	12710 <memset+0x38>
   1272a:	f1a4 0210 	sub.w	r2, r4, #16
   1272e:	f022 020f 	bic.w	r2, r2, #15
   12732:	f004 040f 	and.w	r4, r4, #15
   12736:	3210      	adds	r2, #16
   12738:	2c03      	cmp	r4, #3
   1273a:	4413      	add	r3, r2
   1273c:	d90d      	bls.n	1275a <memset+0x82>
   1273e:	461e      	mov	r6, r3
   12740:	4622      	mov	r2, r4
   12742:	3a04      	subs	r2, #4
   12744:	2a03      	cmp	r2, #3
   12746:	f846 5b04 	str.w	r5, [r6], #4
   1274a:	d8fa      	bhi.n	12742 <memset+0x6a>
   1274c:	1f22      	subs	r2, r4, #4
   1274e:	f022 0203 	bic.w	r2, r2, #3
   12752:	3204      	adds	r2, #4
   12754:	4413      	add	r3, r2
   12756:	f004 0403 	and.w	r4, r4, #3
   1275a:	b12c      	cbz	r4, 12768 <memset+0x90>
   1275c:	b2c9      	uxtb	r1, r1
   1275e:	441c      	add	r4, r3
   12760:	f803 1b01 	strb.w	r1, [r3], #1
   12764:	429c      	cmp	r4, r3
   12766:	d1fb      	bne.n	12760 <memset+0x88>
   12768:	bc70      	pop	{r4, r5, r6}
   1276a:	4770      	bx	lr
   1276c:	4614      	mov	r4, r2
   1276e:	4603      	mov	r3, r0
   12770:	e7c2      	b.n	126f8 <memset+0x20>
   12772:	bf00      	nop
	...

00012780 <strlen>:
   12780:	f890 f000 	pld	[r0]
   12784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12788:	f020 0107 	bic.w	r1, r0, #7
   1278c:	f06f 0c00 	mvn.w	ip, #0
   12790:	f010 0407 	ands.w	r4, r0, #7
   12794:	f891 f020 	pld	[r1, #32]
   12798:	f040 8049 	bne.w	1282e <strlen+0xae>
   1279c:	f04f 0400 	mov.w	r4, #0
   127a0:	f06f 0007 	mvn.w	r0, #7
   127a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   127a8:	f891 f040 	pld	[r1, #64]	; 0x40
   127ac:	f100 0008 	add.w	r0, r0, #8
   127b0:	fa82 f24c 	uadd8	r2, r2, ip
   127b4:	faa4 f28c 	sel	r2, r4, ip
   127b8:	fa83 f34c 	uadd8	r3, r3, ip
   127bc:	faa2 f38c 	sel	r3, r2, ip
   127c0:	bb4b      	cbnz	r3, 12816 <strlen+0x96>
   127c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   127c6:	fa82 f24c 	uadd8	r2, r2, ip
   127ca:	f100 0008 	add.w	r0, r0, #8
   127ce:	faa4 f28c 	sel	r2, r4, ip
   127d2:	fa83 f34c 	uadd8	r3, r3, ip
   127d6:	faa2 f38c 	sel	r3, r2, ip
   127da:	b9e3      	cbnz	r3, 12816 <strlen+0x96>
   127dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   127e0:	fa82 f24c 	uadd8	r2, r2, ip
   127e4:	f100 0008 	add.w	r0, r0, #8
   127e8:	faa4 f28c 	sel	r2, r4, ip
   127ec:	fa83 f34c 	uadd8	r3, r3, ip
   127f0:	faa2 f38c 	sel	r3, r2, ip
   127f4:	b97b      	cbnz	r3, 12816 <strlen+0x96>
   127f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   127fa:	f101 0120 	add.w	r1, r1, #32
   127fe:	fa82 f24c 	uadd8	r2, r2, ip
   12802:	f100 0008 	add.w	r0, r0, #8
   12806:	faa4 f28c 	sel	r2, r4, ip
   1280a:	fa83 f34c 	uadd8	r3, r3, ip
   1280e:	faa2 f38c 	sel	r3, r2, ip
   12812:	2b00      	cmp	r3, #0
   12814:	d0c6      	beq.n	127a4 <strlen+0x24>
   12816:	2a00      	cmp	r2, #0
   12818:	bf04      	itt	eq
   1281a:	3004      	addeq	r0, #4
   1281c:	461a      	moveq	r2, r3
   1281e:	ba12      	rev	r2, r2
   12820:	fab2 f282 	clz	r2, r2
   12824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1282c:	4770      	bx	lr
   1282e:	e9d1 2300 	ldrd	r2, r3, [r1]
   12832:	f004 0503 	and.w	r5, r4, #3
   12836:	f1c4 0000 	rsb	r0, r4, #0
   1283a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1283e:	f014 0f04 	tst.w	r4, #4
   12842:	f891 f040 	pld	[r1, #64]	; 0x40
   12846:	fa0c f505 	lsl.w	r5, ip, r5
   1284a:	ea62 0205 	orn	r2, r2, r5
   1284e:	bf1c      	itt	ne
   12850:	ea63 0305 	ornne	r3, r3, r5
   12854:	4662      	movne	r2, ip
   12856:	f04f 0400 	mov.w	r4, #0
   1285a:	e7a9      	b.n	127b0 <strlen+0x30>

0001285c <__register_exitproc>:
   1285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12860:	4d2c      	ldr	r5, [pc, #176]	; (12914 <__register_exitproc+0xb8>)
   12862:	4606      	mov	r6, r0
   12864:	6828      	ldr	r0, [r5, #0]
   12866:	4698      	mov	r8, r3
   12868:	460f      	mov	r7, r1
   1286a:	4691      	mov	r9, r2
   1286c:	f000 f882 	bl	12974 <__retarget_lock_acquire_recursive>
   12870:	4b29      	ldr	r3, [pc, #164]	; (12918 <__register_exitproc+0xbc>)
   12872:	681c      	ldr	r4, [r3, #0]
   12874:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12878:	2b00      	cmp	r3, #0
   1287a:	d03e      	beq.n	128fa <__register_exitproc+0x9e>
   1287c:	685a      	ldr	r2, [r3, #4]
   1287e:	2a1f      	cmp	r2, #31
   12880:	dc1c      	bgt.n	128bc <__register_exitproc+0x60>
   12882:	f102 0e01 	add.w	lr, r2, #1
   12886:	b176      	cbz	r6, 128a6 <__register_exitproc+0x4a>
   12888:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1288c:	2401      	movs	r4, #1
   1288e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12892:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   12896:	4094      	lsls	r4, r2
   12898:	4320      	orrs	r0, r4
   1289a:	2e02      	cmp	r6, #2
   1289c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   128a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   128a4:	d023      	beq.n	128ee <__register_exitproc+0x92>
   128a6:	3202      	adds	r2, #2
   128a8:	f8c3 e004 	str.w	lr, [r3, #4]
   128ac:	6828      	ldr	r0, [r5, #0]
   128ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   128b2:	f000 f861 	bl	12978 <__retarget_lock_release_recursive>
   128b6:	2000      	movs	r0, #0
   128b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   128bc:	4b17      	ldr	r3, [pc, #92]	; (1291c <__register_exitproc+0xc0>)
   128be:	b30b      	cbz	r3, 12904 <__register_exitproc+0xa8>
   128c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   128c4:	f7ed ffbf 	bl	846 <malloc>
   128c8:	4603      	mov	r3, r0
   128ca:	b1d8      	cbz	r0, 12904 <__register_exitproc+0xa8>
   128cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   128d0:	6002      	str	r2, [r0, #0]
   128d2:	2100      	movs	r1, #0
   128d4:	6041      	str	r1, [r0, #4]
   128d6:	460a      	mov	r2, r1
   128d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   128dc:	f04f 0e01 	mov.w	lr, #1
   128e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   128e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   128e8:	2e00      	cmp	r6, #0
   128ea:	d0dc      	beq.n	128a6 <__register_exitproc+0x4a>
   128ec:	e7cc      	b.n	12888 <__register_exitproc+0x2c>
   128ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   128f2:	430c      	orrs	r4, r1
   128f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   128f8:	e7d5      	b.n	128a6 <__register_exitproc+0x4a>
   128fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   128fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   12902:	e7bb      	b.n	1287c <__register_exitproc+0x20>
   12904:	6828      	ldr	r0, [r5, #0]
   12906:	f000 f837 	bl	12978 <__retarget_lock_release_recursive>
   1290a:	f04f 30ff 	mov.w	r0, #4294967295
   1290e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12912:	bf00      	nop
   12914:	20000588 	.word	0x20000588
   12918:	00013e60 	.word	0x00013e60
   1291c:	00000847 	.word	0x00000847

00012920 <register_fini>:
   12920:	4b02      	ldr	r3, [pc, #8]	; (1292c <register_fini+0xc>)
   12922:	b113      	cbz	r3, 1292a <register_fini+0xa>
   12924:	4802      	ldr	r0, [pc, #8]	; (12930 <register_fini+0x10>)
   12926:	f000 b805 	b.w	12934 <atexit>
   1292a:	4770      	bx	lr
   1292c:	00000000 	.word	0x00000000
   12930:	00012941 	.word	0x00012941

00012934 <atexit>:
   12934:	2300      	movs	r3, #0
   12936:	4601      	mov	r1, r0
   12938:	461a      	mov	r2, r3
   1293a:	4618      	mov	r0, r3
   1293c:	f7ff bf8e 	b.w	1285c <__register_exitproc>

00012940 <__libc_fini_array>:
   12940:	b538      	push	{r3, r4, r5, lr}
   12942:	4c0a      	ldr	r4, [pc, #40]	; (1296c <__libc_fini_array+0x2c>)
   12944:	4d0a      	ldr	r5, [pc, #40]	; (12970 <__libc_fini_array+0x30>)
   12946:	1b64      	subs	r4, r4, r5
   12948:	10a4      	asrs	r4, r4, #2
   1294a:	d00a      	beq.n	12962 <__libc_fini_array+0x22>
   1294c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   12950:	3b01      	subs	r3, #1
   12952:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12956:	3c01      	subs	r4, #1
   12958:	f855 3904 	ldr.w	r3, [r5], #-4
   1295c:	4798      	blx	r3
   1295e:	2c00      	cmp	r4, #0
   12960:	d1f9      	bne.n	12956 <__libc_fini_array+0x16>
   12962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12966:	f001 baa5 	b.w	13eb4 <_fini>
   1296a:	bf00      	nop
   1296c:	00013ec4 	.word	0x00013ec4
   12970:	00013ec0 	.word	0x00013ec0

00012974 <__retarget_lock_acquire_recursive>:
   12974:	4770      	bx	lr
   12976:	bf00      	nop

00012978 <__retarget_lock_release_recursive>:
   12978:	4770      	bx	lr
   1297a:	bf00      	nop

0001297c <_ZTV17ARINC_Conversions>:
	...
   12984:	0515 0000 03e5 0000                         ........

0001298c <_ZL5Mesg1>:
   1298c:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

0001299c <_ZL5Mesg2>:
   1299c:	6144 6174 203a 0000                         Data: ..

000129a4 <_ZL10HexToAscii>:
   129a4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

000129b4 <_ZL11HistoryMesg>:
   129b4:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
   129c4:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   129d4:	7420 206f 6e49 7469 6c69 7a69 0a65 000d      to Initilize...
   129e4:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
   129f4:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
   12a04:	0d0a 0000 0a72 2d2d 212d 6f67 2074 656d     ....r.---!got me
   12a14:	7373 6761 2165 2d2d 2d2d 0000 7420 6172     ssage!----.. tra
   12a24:	736e 696d 7474 6e69 2e67 2e2e 0000 0000     nsmitting.......
   12a34:	5420 6172 736e 696d 7474 6465 0021 0000      Transmitted!...
   12a44:	003e 0000 0d0a 7254 6e61 6d73 7469 2620     >.....Transmit &
   12a54:	5220 6365 6965 6576 5720 7469 2068 614c      Receive With La
   12a64:	6562 736c 4d20 646f 0a65 000d 0d0a 4553     bels Mode.....SE
   12a74:	464c 542d 5345 2c54 4920 746e 7265 616e     LF-TEST, Interna
   12a84:	206c 6944 6967 6174 206c 6f4c 706f 622d     l Digital Loop-b
   12a94:	6361 2c6b 4e20 206f 6164 6174 6920 2073     ack, No data is 
   12aa4:	7274 6e61 6d73 7469 6574 2064 7865 6574     transmitted exte
   12ab4:	6e72 6c61 796c 0d0a 0000 0000 0d0a 6f20     rnally........ o
   12ac4:	206e 6154 6c62 2065 616c 6562 736c 6120     n Table labels a
   12ad4:	6572 4520 616e 6c62 6465 0000 0d0a 500a     re Enabled.....P
   12ae4:	6572 7373 5320 2d57 2031 6f74 7320 6174     ress SW-1 to sta
   12af4:	7472 6920 696e 6974 6c61 796c 0d0a 000a     rt initially....
   12b04:	2d2d 202d 7542 7474 6e6f 4320 6d6f 616d     --- Button Comma
   12b14:	646e 2073 2d2d 0a2d 000d 0000 2020 7053     nds ---.....  Sp
   12b24:	6361 2065 6142 2072 6f74 4420 7369 6c70     ace Bar to Displ
   12b34:	7961 5320 6174 7574 2073 6e61 2064 6f43     ay Status and Co
   12b44:	746e 6f72 206c 6552 6967 7473 7265 0a73     ntrol Registers.
   12b54:	000d 0000 2020 2070 6f74 5020 7561 6573     ....  p to Pause
   12b64:	0d0a 0000 2020 206d 6f74 4420 7369 6c70     ....  m to Displ
   12b74:	7961 4c20 6261 6c65 4d20 6d65 726f 0079     ay Label Memory.
   12b84:	0d0a 003e 0d0a 7254 6e61 6d73 7469 6974     ..>...Transmitti
   12b94:	676e 0d0a 003e 0000 0d0a 4948 332d 3935     ng..>.....HI-359
   12ba4:	2033 7453 7461 7375 202c 6f43 746e 6f72     3 Status, Contro
   12bb4:	206c 6552 6967 7473 7265 0d73 000a 0000     l Registers.....
   12bc4:	0d0a 2009 2a20 2a2a 2a2a 5020 6572 7373     ...  ***** Press
   12bd4:	2020 7073 6361 6265 7261 7420 206f 6f63       spacebar to co
   12be4:	746e 6e69 6575 2a20 2a2a 2a2a 002a 0000     ntinue ******...
   12bf4:	0a0a 540d 6172 736e 696d 2074 6150 7375     ...Transmit Paus
   12c04:	6465 0d0a 0000 0000 0d0a 7250 7365 2073     ed........Press 
   12c14:	4c4f 4445 425f 5455 4f54 2d4e 2032 6f74     OLED_BUTTON-2 to
   12c24:	7420 6172 736e 696d 2074 6e6f 2065 7266      transmit one fr
   12c34:	6d61 2065 6e61 2064 6170 7375 0a65 000d     ame and pause...
   12c44:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
   12c54:	4f54 2d4e 2033 6f74 5220 7365 6d75 0a65     TON-3 to Resume.
   12c64:	000d 0000 0d0a 7254 6e61 6d73 7469 6574     ......Transmitte
   12c74:	2072 6552 7573 656d 2e64 2e2e 0d0a 0000     r Resumed.......
   12c84:	0d0a 6552 6563 7669 7265 3120 4c20 6261     ..Receiver 1 Lab
   12c94:	6c65 0a73 000d 0000 0d0a 6552 6563 7669     els.......Receiv
   12ca4:	7265 3220 4c20 6261 6c65 0a73 000d 0000     er 2 Labels.....
   12cb4:	0d0a 7254 6e61 6d73 7469 2620 5220 6365     ..Transmit & Rec
   12cc4:	6965 6576 4520 6863 206f 6f4d 6564 0d0a     eive Echo Mode..
   12cd4:	0000 0000 0d0a 6c53 776f 5320 6570 6465     ......Slow Speed
   12ce4:	0000 0000 0d0a 6146 7473 5320 6570 6465     ......Fast Speed
   12cf4:	0000 0000 0d0a 7254 6e61 6d73 7469 6574     ......Transmitte
   12d04:	2072 6150 6972 7974 4520 616e 6c62 6465     r Parity Enabled
   12d14:	0000 0000 0d0a 4948 332d 3935 2033 6166     ......HI-3593 fa
   12d24:	6c69 6465 7420 206f 6e69 7469 6c69 7a69     iled to initiliz
   12d34:	0a65 000d 0d0a 6154 6c62 2065 616c 6562     e.....Table labe
   12d44:	736c 6120 6572 4520 616e 6c62 6465 0000     ls are Enabled..
   12d54:	0d0a 2d0a 2d2d 4320 6e6f 6f73 656c 4320     ...--- Console C
   12d64:	6d6f 616d 646e 2073 6548 706c 2d20 2d2d     ommands Help ---
   12d74:	0000 0000 2020 2050 203d 6150 6972 7974     ....  P = Parity
   12d84:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   12d94:	2020 2054 203d 4654 494c 2050 5420 676f       T = TFLIP  Tog
   12da4:	6c67 2065 6e6f 6f2f 6666 0000 2020 2052     gle on/off..  R 
   12db4:	203d 4652 494c 2050 5420 676f 6c67 2065     = RFLIP  Toggle 
   12dc4:	6e6f 6f2f 6666 0000 2020 2053 203d 4453     on/off..  S = SD
   12dd4:	4e4f 202c 4453 2c39 5320 3144 2030 6f54     ON, SD9, SD10 To
   12de4:	6767 656c 6f20 2f6e 666f 0066 2020 2048     ggle on/off.  H 
   12df4:	203d 6854 7369 4820 6c65 2070 6150 6567     = This Help Page
   12e04:	0000 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   12e14:	203d 6944 7073 616c 2079 7453 7461 7375     = Display Status
   12e24:	6120 646e 4320 6e6f 7274 6c6f 7220 6765      and Control reg
   12e34:	0073 0000 2020 2049 203d 6e49 7263 6d65     s...  I = Increm
   12e44:	6e65 2074 654d 7373 6761 2065 6e61 2064     ent Message and 
   12e54:	7254 6e61 6d73 7469 202e 7845 6c70 726f     Transmit. Explor
   12e64:	7265 4d20 646f 2065 2d20 4f20 4c4e 2159     er Mode  - ONLY!
   12e74:	0000 0000 2020 204d 203d 6e45 6574 2072     ....  M = Enter 
   12e84:	7543 7473 6d6f 4d20 7365 6173 6567 202e     Custom Message. 
   12e94:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   12ea4:	4f20 4c4e 2159 0000 2020 4e45 4554 3d52      ONLY!..  ENTER=
   12eb4:	5420 6172 736e 696d 2074 656e 7478 6d20      Transmit next m
   12ec4:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   12ed4:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   12ee4:	7830 0020 7826 3030 2030 0000 5854 5020     0x .&x000 ..TX P
   12ef4:	7261 7469 2079 4e4f 0d0a 003e 5854 5020     arity ON..>.TX P
   12f04:	7261 7469 2079 464f 0a46 3e0d 0000 0000     arity OFF..>....
   12f14:	4654 494c 2050 6553 0a74 3e0d 0000 0000     TFLIP Set..>....
   12f24:	4654 494c 2050 6c43 6165 6572 0a64 3e0d     TFLIP Cleared..>
   12f34:	0000 0000 4552 2d43 2031 4652 494c 2050     ....REC-1 RFLIP 
   12f44:	6553 0a74 3e0d 0000 4552 2d43 2031 4652     Set..>..REC-1 RF
   12f54:	494c 2050 6c43 6165 6572 0a64 3e0d 0000     LIP Cleared..>..
   12f64:	4552 2d43 2032 4652 494c 2050 6553 0a74     REC-2 RFLIP Set.
   12f74:	3e0d 0000 4552 2d43 2032 4652 494c 2050     .>..REC-2 RFLIP 
   12f84:	6c43 6165 6572 0a64 3e0d 0000 4552 2d43     Cleared..>..REC-
   12f94:	2031 4453 4e4f 532c 3944 6120 646e 5320     1 SDON,SD9 and S
   12fa4:	3144 2030 6553 0a74 3e0d 0000 4552 2d43     D10 Set..>..REC-
   12fb4:	2031 4453 4e4f 532c 3944 6120 646e 5320     1 SDON,SD9 and S
   12fc4:	3144 2030 6c43 6165 6572 0a64 3e0d 0000     D10 Cleared..>..
   12fd4:	4552 2d43 2032 4453 4e4f 532c 3944 6120     REC-2 SDON,SD9 a
   12fe4:	646e 5320 3144 2030 6553 0a74 3e0d 0000     nd SD10 Set..>..
   12ff4:	4552 2d43 2032 4453 4e4f 532c 3944 6120     REC-2 SDON,SD9 a
   13004:	646e 5320 3144 2030 6c43 6165 6572 0a64     nd SD10 Cleared.
   13014:	3e0d 0000 0d0a 500a 6572 7373 5320 6170     .>.....Press Spa
   13024:	6563 4220 7261 6f20 2072 5753 342d 7420     ce Bar or SW-4 t
   13034:	206f 6572 7573 656d 0000 0000 614c 6562     o resume....Labe
   13044:	736c 2020 2030 202d 3336 203a 0020 0000     ls  0 - 63:  ...
   13054:	0020 0000 0d0a 614c 6562 736c 2020 3436      .....Labels  64
   13064:	312d 3732 203a 0020 0d0a 614c 6562 736c     -127:  ...Labels
   13074:	3120 3832 312d 3139 203a 0020 0d0a 614c      128-191:  ...La
   13084:	6562 736c 3120 3239 322d 3535 203a 0020     bels 192-255:  .
   13094:	0d0a 614c 6562 736c 2020 2030 202d 3336     ..Labels  0 - 63
   130a4:	203a 0020 0d0a 543e 2058 2020 4420 7461     :  ...>TX    Dat
   130b4:	3a61 0000 614c 6562 3a6c 0000 6552 2d63     a:..Label:..Rec-
   130c4:	2031 6144 6174 003a 4c50 2d31 2031 6144     1 Data:.PL1-1 Da
   130d4:	6174 003a 614d 6374 3a68 0000 4c50 2d31     ta:.Match:..PL1-
   130e4:	2032 6144 6174 003a 4c50 2d31 2033 6144     2 Data:.PL1-3 Da
   130f4:	6174 003a 6552 2d63 2032 6144 6174 003a     ta:.Rec-2 Data:.
   13104:	4c50 2d32 2031 6144 6174 003a 4c50 2d32     PL2-1 Data:.PL2-
   13114:	2032 6144 6174 003a 4c50 2d32 2033 6144     2 Data:.PL2-3 Da
   13124:	6174 003a 0d0a 0000 0d0a 7845 6c70 726f     ta:.......Explor
   13134:	7265 4d20 646f 0a65 000d 0000 0d0a 6c20     er Mode....... l
   13144:	6261 6c65 2073 6154 6c62 2065 7369 4520     abels Table is E
   13154:	616e 6c62 6465 0000 0d0a 2d0a 2d2d 4220     nabled.....--- B
   13164:	7475 6f74 206e 6f43 6d6d 6e61 7364 2d20     utton Commands -
   13174:	2d2d 0000 0d0a 2020 7073 6361 6265 7261     --....  spacebar
   13184:	7420 206f 6944 7073 616c 2079 7453 7461      to Display Stat
   13194:	7375 6120 646e 4320 6e6f 7274 6c6f 5220     us and Control R
   131a4:	6765 7369 6574 7372 0000 0000 0d0a 2020     egisters......  
   131b4:	4c4f 4445 422d 5455 4f54 324e 7420 6172     OLED-BUTTON2 tra
   131c4:	736e 696d 2074 6e6f 2065 656d 7373 6761     nsmit one messag
   131d4:	2065 7266 6d6f 7420 6172 736e 696d 2074     e from transmit 
   131e4:	7562 6666 7265 0000 0d0a 2020 204c 6f74     buffer....  L to
   131f4:	5020 6972 746e 4c20 6261 6c65 4d20 6d65      Print Label Mem
   13204:	726f 0a79 000d 0000 0d0a 7250 7365 2073     ory.......Press 
   13214:	4e45 4554 2052 6f74 5420 6172 736e 696d     ENTER to Transmi
   13224:	2074 726f 7520 6573 7420 6568 2820 294d     t or use the (M)
   13234:	6320 6d6f 616d 646e 7420 206f 6e65 6574      command to ente
   13244:	2072 2061 7563 7473 6d6f 6d20 7365 6173     r a custom messa
   13254:	6567 0000 7250 7365 2073 5753 2034 726f     ge..Press SW4 or
   13264:	7320 6170 6563 6162 2072 6f74 6320 6e6f      spacebar to con
   13274:	6974 756e 0065 0000 7250 7365 2073 7073     tinue...Press sp
   13284:	6361 6265 7261 7420 206f 6f63 746e 6e69     acebar to contin
   13294:	6575 0000 0d0a 433e 6d6f 616d 646e 4d20     ue....>Command M
   132a4:	0000 0000 0d0a 6e45 6574 2072 2033 7962     ......Enter 3 by
   132b4:	6574 2073 202b 414c 4542 204c 6f74 5420     tes + LABEL to T
   132c4:	6172 736e 696d 2074 6f66 6c6c 776f 6465     ransmit followed
   132d4:	6220 2079 4e45 4554 0a52 000d 0d0a 6f54      by ENTER.....To
   132e4:	5420 6172 736e 696d 2c74 6520 746e 7265      Transmit, enter
   132f4:	3320 6220 7479 7365 6620 6c6f 6f6c 6577      3 bytes followe
   13304:	2064 7962 6120 4c20 6261 6c65 6220 7479     d by a Label byt
   13314:	2065 6f66 6c6c 776f 6465 6220 2079 4e45     e followed by EN
   13324:	4554 0a52 000d 0000 6f46 6d72 7461 203a     TER.....Format: 
   13334:	6942 7374 3233 322d 2c35 4220 7469 3273     Bits32-25, Bits2
   13344:	2d34 3731 202c 6942 7374 3631 392d 202c     4-17, Bits16-9, 
   13354:	414c 4542 0a4c 3a0d 0000 0000 7845 6d61     LABEL..:....Exam
   13364:	6c70 3a65 3020 2031 3332 3420 2035 3736     ple: 01 23 45 67
   13374:	4520 544e 5245 0d0a 003a 0000 5020 6572      ENTER..:... Pre
   13384:	7373 5220 5445 5255 004e 0000 5420 6172     ss RETURN... Tra
   13394:	736e 696d 6974 676e 2e2e 002e 5420 6172     nsmiting.... Tra
   133a4:	736e 696d 6574 2164 0000 0000 6f43 6d6d     nsmited!....Comm
   133b4:	6e61 2064 3a49 4920 636e 6572 656d 746e     and I: Increment
   133c4:	6420 7461 0a61 3e0d 0000 0000                data..>....

000133d0 <_ZTV15ARINC_Interface>:
   133d0:	0300 0000 0000 0000 0000 0000 05fd 0000     ................
   133e0:	065d 0000 0689 0000 0000 0000 0000 0000     ]...............
   133f0:	fd00 ffff 0000 0000 0515 0000 03e5 0000     ................

00013400 <_ZTT15ARINC_Interface>:
   13400:	33dc 0001 341c 0001 3438 0001 33f8 0001     .3...4..84...3..

00013410 <_ZTC15ARINC_Interface0_14Protocol_Class>:
   13410:	0300 0000 0000 0000 0000 0000 0000 0000     ................
   13420:	0000 0000 086d 0000 0000 0000 0000 0000     ....m...........
   13430:	fd00 ffff 0000 0000 0515 0000 03e5 0000     ................
   13440:	2a0a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     .***************
   13450:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   13460:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   13470:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   13480:	2a2a 0a2a 000d 0000 4c20 4354 3932 3338     ***..... LTC2983
   13490:	4420 6d65 6e6f 7473 6172 6974 6e6f 5020      Demonstration P
   134a0:	6f72 7267 6d61 2020 2020 2020 2020 2020     rogram          
   134b0:	2020 2020 2020 2020 2020 2020 0d0a 0000                 ....
   134c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   134d0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   134e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   134f0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   13500:	0d0a 0000 5420 6968 2073 7270 676f 6172     .... This progra
   13510:	206d 6564 6f6d 736e 7274 7461 7365 6820     m demonstrates h
   13520:	776f 7420 206f 6572 6461 7420 6568 6d20     ow to read the m
   13530:	6c75 6974 732d 6e65 6f73 2072 2020 2020     ulti-sensor     
   13540:	2020 2020 0d0a 0000 7420 6d65 6570 6172         .... tempera
   13550:	7574 6572 6d20 6165 7573 6572 656d 746e     ture measurement
   13560:	7320 7379 6574 2e6d 2020 2020 2020 2020      system.        
   13570:	2020 2020 2020 2020 2020 2020 2020 2020                     
   13580:	2020 2020 2020 2020 0d0a 0000 5320 7465             .... Set
   13590:	7420 6568 6220 7561 2064 6172 6574 7420      the baud rate t
   135a0:	206f 3131 3235 3030 6120 646e 7320 6c65     o 115200 and sel
   135b0:	6365 2074 6874 2065 656e 6c77 6e69 2065     ect the newline 
   135c0:	6574 6d72 6e69 7461 726f 202e 0d0a 0000     terminator. ....
   135d0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   135e0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   135f0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   13600:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   13610:	2a2a 0d0a 0000 0000 430a 6168 6e6e 6c65     **.......Channel
   13620:	4320 6e6f 6966 2067 0000 0000 6572 6967      Config ....regi
   13630:	7473 7265 7620 6c61 6575 203a 0000 0000     ster value: ....
   13640:	430a 6168 6e6e 6c65 0020 0000 2020 6554     .Channel ...  Te
   13650:	706d 7265 7461 7275 2065 203d 0000 0000     mperature = ....
   13660:	2020 6944 6572 7463 4120 4344 7220 6165       Direct ADC rea
   13670:	6964 676e 6920 206e 2056 203d 0000 0000     ding in V = ....
   13680:	2020 6f56 746c 6761 2065 726f 7220 7365       Voltage or res
   13690:	7369 6174 636e 2065 203d 0000 2020 4146     istance = ..  FA
   136a0:	4c55 2054 4144 4154 3d20 0020 2020 202d     ULT DATA = .  - 
   136b0:	4553 534e 524f 4820 5241 2044 4146 554c     SENSOR HARD FALU
   136c0:	4552 0000 2020 202d 4441 5f43 4148 4452     RE..  - ADC_HARD
   136d0:	465f 4941 554c 4552 0000 0000 2020 202d     _FAILURE....  - 
   136e0:	4a43 485f 5241 5f44 4146 4c49 5255 0045     CJ_HARD_FAILURE.
   136f0:	2020 202d 4a43 535f 464f 5f54 4146 4c49       - CJ_SOFT_FAIL
   13700:	5255 0045 2020 202d 4553 534e 524f 415f     URE.  - SENSOR_A
   13710:	4f42 4556 0000 0000 2020 202d 4553 534e     BOVE....  - SENS
   13720:	524f 425f 4c45 574f 0000 0000 2020 202d     OR_BELOW....  - 
   13730:	4441 5f43 4152 474e 5f45 5245 4f52 0052     ADC_RANGE_ERROR.
   13740:	4e49 4156 494c 2044 4552 4441 4e49 2047     INVALID READING 
   13750:	2121 2121 2121 0000 4f43 464e 4749 5255     !!!!!!..CONFIGUR
   13760:	5441 4f49 204e 5245 4f52 2052 2121 2121     ATION ERROR !!!!
   13770:	2121 0000 2a2a 2a2a 4c20 6669 2065 7550     !!..**** Life Pu
   13780:	736c 2065 6341 6974 6176 6574 2a64 2a2a     lse Activated***
   13790:	002a 0000 0a0d 0000 7469 7320 6f68 6c75     *.......it shoul
   137a0:	2064 6f77 6b72 0000 7469 6420 656f 2073     d work..it does 
   137b0:	6f77 6b72 0000 0000 2020 7546 636e 6974     work....  Functi
   137c0:	6e6f 6620 726f 7420 7365 6974 676e 6120     on for testing a
   137d0:	206e 3269 2063 4545 5250 4d4f 0000 0000     n i2c EEPROM....
   137e0:	4545 5250 4d4f 7620 7265 6669 6369 7461     EEPROM verificat
   137f0:	6f69 206e 6166 6c69 6465 202e 6441 7264     ion failed. Addr
   13800:	7365 3a73 0020 0000 6220 7469 3a20 0000     ess: ... bit :..
   13810:	7257 7469 2065 202d 6552 6461 6920 2073     Write - Read is 
   13820:	7573 6363 7365 6673 6c75 6920 206e 4545     successful in EE
   13830:	5250 4d4f 6d20 6d65 726f 2079 0020 0000     PROM memory  ...
   13840:	5351 4950 5020 6f72 7267 6d61 5320 6174     QSPI Program Sta
   13850:	7472 6465 0d0a 0000 6c46 7361 2068 6164     rted....Flash da
   13860:	6174 7620 7265 6669 6369 7461 6f69 206e     ta verification 
   13870:	6166 6c69 6465 202e 6441 7264 7365 3a73     failed. Address:
   13880:	0020 0000 7257 7469 2065 202d 6552 6461      ...Write - Read
   13890:	6920 2073 7573 6363 7365 6673 6c75 6920      is successful i
   138a0:	206e 5351 4950 4620 616c 6873 6d20 6d65     n QSPI Flash mem
   138b0:	726f 2079 0020 0000 2a2a 2a2a 2020 6143     ory  ...****  Ca
   138c0:	656c 646e 7261 5520 6470 7461 2065 6554     lendar Update Te
   138d0:	7473 2a2a 002a 0000 6854 2075 634f 2074     st***...Thu Oct 
   138e0:	3830 3120 3a35 3430 323a 2036 3032 3032     08 15:04:26 2020
   138f0:	0000 0000 2a2a 2a2a 616c 7473 6420 7461     ....****last dat
   13900:	2061 6974 656d 003a 7909 6165 2072 003a     a time:..year :.
   13910:	6d09 6e6f 6874 3a20 0000 0000 6409 7961     .month :.....day
   13920:	203a 0000 6809 756f 2072 003a 6d09 6e69     : ...hour :..min
   13930:	3a20 0000 7309 6365 203a 0000 2a2a 7563      :...sec: ..**cu
   13940:	7272 6e65 2074 6164 6174 7420 6d69 3a65     rrent data time:
   13950:	0000 0000                                   ....

00013954 <defaultParameters>:
   13954:	0082 0000                                   ....

00013958 <defaultPreferences>:
   13958:	00fa 0000 0032 0000                         ....2...

00013960 <_ZTV14Calendar_Class>:
	...
   13968:	1df5 0000 1e45 0000                         ....E...

00013970 <_ZTV17DateTimeLog_Class>:
	...
   13978:	086d 0000 086d 0000                         m...m...

00013980 <_ZTV9CDC_Class>:
	...
   13988:	2669 0000 2739 0000 22f5 0000 2631 0000     i&..9'..."..1&..
   13998:	27d1 0000 25f5 0000 2509 0000 2559 0000     .'...%...%..Y%..
   139a8:	2651 0000 26a1 0000                         Q&...&..

000139b0 <_ZTV6Stream>:
	...
   139b8:	086d 0000 293d 0000 22f5 0000 2309 0000     m...=)..."...#..
   139c8:	086d 0000 086d 0000 086d 0000 7830 2e25     m...m...m...0x%.
   139d8:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   139e8:	766f 0066                                   ovf.

000139ec <_ZTV5Print>:
	...
   139f4:	086d 0000 293d 0000 22f5 0000 2309 0000     m...=)..."...#..
   13a04:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   13a14:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   13a24:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   13a34:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   13a44:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   13a54:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   13a64:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   13a74:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   13a84:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   13a94:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   13aa4:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
   13ab4:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   13ac4:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
   13ad4:	6372 682f 6c61 695f 2e6f 0063 2e2e 682f     rc/hal_io.c.../h
   13ae4:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
   13af4:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   13b04:	6c61 715f 7073 5f69 7973 636e 632e 0000     al_qspi_sync.c..
   13b14:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
   13b24:	6970 6d5f 615f 7973 636e 632e 0000 0000     pi_m_async.c....
   13b34:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
   13b44:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
   13b54:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
   13b64:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
   13b74:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
   13b84:	0063 0000                                   c...

00013b88 <_map>:
   13b88:	0000 0000 0040 0000 0004 0000 0004 0000     ....@...........
   13b98:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   13ba8:	0007 0000 0057 0000 2e2e 682f 6c70 652f     ....W...../hpl/e
   13bb8:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00013bc8 <user_mux_confs>:
   13bc8:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00013c0c <channel_confs>:
   13c0c:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00013c4c <interrupt_cfg>:
	...
   13ccc:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   13cdc:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   13cec:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   13cfc:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   13d0c:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   13d1c:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   13d2c:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00013d38 <sercomspi_regs>:
   13d38:	008c 0020 0000 0002 0000 0000 0063 01ff     .. .........c...
   13d48:	0c01 2000 0000 0200 0000 0000 ef00 ff00     ... ............
   13d58:	0401 000c 0030 0000 0002 0000 0000 00ef     ....0...........
   13d68:	01ff 0006 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   13d78:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   13d88:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   13d98:	1400 4300 1800 4300                         ...C...C

00013da0 <_usb_ep_cfgs>:
   13da0:	1a70 2000 0000 0000 0040 0000 1ab0 2000     p.. ....@...... 
   13db0:	1af0 2000 0040 0040 1b30 2000 1b70 2000     ... @.@.0.. p.. 
   13dc0:	0040 0040 1bb0 2000 1bf0 2000 0040 0040     @.@.... ... @.@.
   13dd0:	1c30 2000 1c70 2000 0040 0040 0804 0000     0.. p.. @.@.....
   13de0:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   13df0:	6c70 775f 7464 632e 0000 0000               pl_wdt.c....

00013dfc <n25q256a_interface>:
   13dfc:	e629 0000 e6cd 0000 e7dd 0000 e995 0000     )...............
   13e0c:	ea25 0000 2e2e 682f 6c70 702f 726f 2f74     %...../hpl/port/
   13e1c:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   13e2c:	2e2e 752f 6273 642f 7665 6369 2f65 7375     ../usb/device/us
   13e3c:	6462 2e63 0063 0000 6f70 0077 0000 0000     bdc.c...pow.....
   13e4c:	0000 0000                                   ....

00013e50 <TWO52>:
   13e50:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

00013e60 <_global_impure_ptr>:
   13e60:	0160 2000                                   `.. 

00013e64 <_init>:
   13e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e66:	bf00      	nop
   13e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13e6a:	bc08      	pop	{r3}
   13e6c:	469e      	mov	lr, r3
   13e6e:	4770      	bx	lr

00013e70 <__init_array_start>:
   13e70:	00012921 	.word	0x00012921

00013e74 <__frame_dummy_init_array_entry>:
   13e74:	00000289 00000355 00000735 00000905     ....U...5.......
   13e84:	00000a2d 00000b6d 000014bd 0000176d     -...m.......m...
   13e94:	00001b61 00001c21 00001ce1 00001d7d     a...!.......}...
   13ea4:	00002091 000022bd 00002851 00003425     . ..."..Q(..%4..

00013eb4 <_fini>:
   13eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13eb6:	bf00      	nop
   13eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13eba:	bc08      	pop	{r3}
   13ebc:	469e      	mov	lr, r3
   13ebe:	4770      	bx	lr

00013ec0 <__fini_array_start>:
   13ec0:	00000265 	.word	0x00000265
