
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d2c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000054c  20000000  00005d2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002054c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002054c  2**0
                  CONTENTS
  4 .bss          00000538  2000054c  00006278  0002054c  2**2
                  ALLOC
  5 .stack        00010004  20000a84  000067b0  0002054c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002054c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002057a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004a9a7  00000000  00000000  000205d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000061d3  00000000  00000000  0006af7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017ea5  00000000  00000000  0007114d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011e0  00000000  00000000  00088ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001a38  00000000  00000000  0008a1d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f4c6  00000000  00000000  0008bc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e640  00000000  00000000  000cb0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00132baa  00000000  00000000  000e9710  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000032f4  00000000  00000000  0021c2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 0a 01 20 c9 07 00 00 c5 07 00 00 c5 07 00 00     ... ............
      10:	c5 07 00 00 c5 07 00 00 c5 07 00 00 00 00 00 00     ................
	...
      2c:	c5 07 00 00 c5 07 00 00 00 00 00 00 c5 07 00 00     ................
      3c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      4c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      5c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      6c:	21 1f 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     !...............
      7c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      8c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      9c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      ac:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      bc:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      cc:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      dc:	c5 07 00 00 c5 07 00 00 c5 07 00 00 00 00 00 00     ................
	...
      f4:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     104:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     114:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     124:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     134:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     144:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     154:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     164:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     174:	c5 07 00 00 c5 07 00 00 0d 1a 00 00 a9 3e 00 00     .............>..
     184:	b5 3e 00 00 c1 3e 00 00 cd 3e 00 00 c5 07 00 00     .>...>...>......
     194:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     1a4:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     1b4:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     1c4:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     1d4:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     1e4:	c5 07 00 00 c5 07 00 00 f1 2b 00 00 c5 07 00 00     .........+......
     1f4:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     204:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     214:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     224:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     234:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     244:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     254:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000054c 	.word	0x2000054c
     280:	00000000 	.word	0x00000000
     284:	00005d2c 	.word	0x00005d2c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005d2c 	.word	0x00005d2c
     2c4:	20000550 	.word	0x20000550
     2c8:	00005d2c 	.word	0x00005d2c
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     2d0:	2000      	movs	r0, #0
     2d2:	4770      	bx	lr

000002d4 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{

	
	ptrCDCClass->rxReady=true;
     2d4:	4b02      	ldr	r3, [pc, #8]	; (2e0 <_ZL12cb_bulk_readh13usb_xfer_codem+0xc>)
     2d6:	681b      	ldr	r3, [r3, #0]
     2d8:	2201      	movs	r2, #1
     2da:	745a      	strb	r2, [r3, #17]

	return false;
}
     2dc:	2000      	movs	r0, #0
     2de:	4770      	bx	lr
     2e0:	20000568 	.word	0x20000568

000002e4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */

	
	ptrCDCClass->txReady=true;
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0xc>)
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	2201      	movs	r2, #1
     2ea:	741a      	strb	r2, [r3, #16]

	

	/* No error. */
	return false;
}
     2ec:	2000      	movs	r0, #0
     2ee:	4770      	bx	lr
     2f0:	20000568 	.word	0x20000568

000002f4 <_ZN9CDC_Class4peekEv>:
	
}

int CDC_Class::peek(void)
{
	if (_serialPeek != -1)
     2f4:	6943      	ldr	r3, [r0, #20]
     2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
     2fa:	d001      	beq.n	300 <_ZN9CDC_Class4peekEv+0xc>
	return _serialPeek;
     2fc:	6940      	ldr	r0, [r0, #20]
     2fe:	4770      	bx	lr
{
     300:	b510      	push	{r4, lr}
     302:	4604      	mov	r4, r0
	_serialPeek = read();
     304:	6803      	ldr	r3, [r0, #0]
     306:	695b      	ldr	r3, [r3, #20]
     308:	4798      	blx	r3
     30a:	6160      	str	r0, [r4, #20]
	return _serialPeek;
     30c:	6960      	ldr	r0, [r4, #20]
}
     30e:	bd10      	pop	{r4, pc}

00000310 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
     310:	b510      	push	{r4, lr}
     312:	b082      	sub	sp, #8
     314:	ab02      	add	r3, sp, #8
     316:	f803 1d01 	strb.w	r1, [r3, #-1]!
	return write(&c, 1);
     31a:	6802      	ldr	r2, [r0, #0]
     31c:	6854      	ldr	r4, [r2, #4]
     31e:	2201      	movs	r2, #1
     320:	4619      	mov	r1, r3
     322:	47a0      	blx	r4
}
     324:	b002      	add	sp, #8
     326:	bd10      	pop	{r4, pc}

00000328 <_ZN9CDC_Class9availableEv>:
		return r;

}

int	CDC_Class::available(void){
	if (rxReady && txReady)
     328:	7c42      	ldrb	r2, [r0, #17]
     32a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     32e:	b10a      	cbz	r2, 334 <_ZN9CDC_Class9availableEv+0xc>
     330:	7c03      	ldrb	r3, [r0, #16]
     332:	b2db      	uxtb	r3, r3
	{
		
	return 0;
	}
	
}
     334:	4618      	mov	r0, r3
     336:	4770      	bx	lr

00000338 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
     338:	b510      	push	{r4, lr}
     33a:	b082      	sub	sp, #8
     33c:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
     340:	f010 0f01 	tst.w	r0, #1
     344:	d102      	bne.n	34c <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
     346:	2000      	movs	r0, #0
     348:	b002      	add	sp, #8
     34a:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     34c:	4905      	ldr	r1, [pc, #20]	; (364 <_ZL10cb_state_c22usb_cdc_control_signal+0x2c>)
     34e:	2000      	movs	r0, #0
     350:	4c05      	ldr	r4, [pc, #20]	; (368 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
     352:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     354:	4905      	ldr	r1, [pc, #20]	; (36c <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
     356:	2001      	movs	r0, #1
     358:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
     35a:	4b05      	ldr	r3, [pc, #20]	; (370 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	2201      	movs	r2, #1
     360:	741a      	strb	r2, [r3, #16]
     362:	e7f0      	b.n	346 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
     364:	000002d5 	.word	0x000002d5
     368:	000041e5 	.word	0x000041e5
     36c:	000002e5 	.word	0x000002e5
     370:	20000568 	.word	0x20000568

00000374 <_ZN9CDC_Class4readEv>:
{
     374:	b510      	push	{r4, lr}
     376:	b082      	sub	sp, #8
     378:	4604      	mov	r4, r0
	rxReady=false;
     37a:	2300      	movs	r3, #0
     37c:	7443      	strb	r3, [r0, #17]
	cdcdf_acm_read(&r, 1);
     37e:	2101      	movs	r1, #1
     380:	f10d 0007 	add.w	r0, sp, #7
     384:	4b04      	ldr	r3, [pc, #16]	; (398 <_ZN9CDC_Class4readEv+0x24>)
     386:	4798      	blx	r3
	while(!rxReady);
     388:	7c63      	ldrb	r3, [r4, #17]
     38a:	2b00      	cmp	r3, #0
     38c:	d0fc      	beq.n	388 <_ZN9CDC_Class4readEv+0x14>
}
     38e:	f89d 0007 	ldrb.w	r0, [sp, #7]
     392:	b002      	add	sp, #8
     394:	bd10      	pop	{r4, pc}
     396:	bf00      	nop
     398:	0000417d 	.word	0x0000417d

0000039c <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
     39c:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     39e:	2140      	movs	r1, #64	; 0x40
     3a0:	4801      	ldr	r0, [pc, #4]	; (3a8 <_ZN9CDC_Class5flushEv+0xc>)
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <_ZN9CDC_Class5flushEv+0x10>)
     3a4:	4798      	blx	r3
     3a6:	bd08      	pop	{r3, pc}
     3a8:	2000056c 	.word	0x2000056c
     3ac:	000041a5 	.word	0x000041a5

000003b0 <_ZN9CDC_Class5writeEPKhj>:
{
     3b0:	b508      	push	{r3, lr}
     3b2:	4608      	mov	r0, r1
	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     3b4:	4611      	mov	r1, r2
     3b6:	4b01      	ldr	r3, [pc, #4]	; (3bc <_ZN9CDC_Class5writeEPKhj+0xc>)
     3b8:	4798      	blx	r3
}
     3ba:	bd08      	pop	{r3, pc}
     3bc:	000041a5 	.word	0x000041a5

000003c0 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
     3c0:	b508      	push	{r3, lr}
	cdcdf_acm_stop_xfer();
     3c2:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_ZN9CDC_Class5clearEv+0x8>)
     3c4:	4798      	blx	r3
     3c6:	bd08      	pop	{r3, pc}
     3c8:	000041cd 	.word	0x000041cd

000003cc <_ZN9CDC_ClassC1Ev>:
    Print() : write_error(0) {}
     3cc:	2200      	movs	r2, #0
     3ce:	6042      	str	r2, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
     3d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     3d4:	6082      	str	r2, [r0, #8]
CDC_Class::CDC_Class()
     3d6:	4a03      	ldr	r2, [pc, #12]	; (3e4 <_ZN9CDC_ClassC1Ev+0x18>)
     3d8:	6002      	str	r2, [r0, #0]
	_serialPeek=-1;
     3da:	f04f 32ff 	mov.w	r2, #4294967295
     3de:	6142      	str	r2, [r0, #20]
} //CDC_Class
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop
     3e4:	00005a04 	.word	0x00005a04

000003e8 <_ZN9CDC_Class4initEv>:
void CDC_Class::init(void){
     3e8:	b538      	push	{r3, r4, r5, lr}
     3ea:	4605      	mov	r5, r0
	usbdc_init(cdc_ctrl_buffer);
     3ec:	480d      	ldr	r0, [pc, #52]	; (424 <_ZN9CDC_Class4initEv+0x3c>)
     3ee:	4b0e      	ldr	r3, [pc, #56]	; (428 <_ZN9CDC_Class4initEv+0x40>)
     3f0:	4798      	blx	r3
	cdcdf_acm_init();
     3f2:	4b0e      	ldr	r3, [pc, #56]	; (42c <_ZN9CDC_Class4initEv+0x44>)
     3f4:	4798      	blx	r3
	usbdc_start(cdc_desc);
     3f6:	480e      	ldr	r0, [pc, #56]	; (430 <_ZN9CDC_Class4initEv+0x48>)
     3f8:	4b0e      	ldr	r3, [pc, #56]	; (434 <_ZN9CDC_Class4initEv+0x4c>)
     3fa:	4798      	blx	r3
	usbdc_attach();
     3fc:	4b0e      	ldr	r3, [pc, #56]	; (438 <_ZN9CDC_Class4initEv+0x50>)
     3fe:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     400:	490e      	ldr	r1, [pc, #56]	; (43c <_ZN9CDC_Class4initEv+0x54>)
     402:	2003      	movs	r0, #3
     404:	4c0e      	ldr	r4, [pc, #56]	; (440 <_ZN9CDC_Class4initEv+0x58>)
     406:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     408:	490e      	ldr	r1, [pc, #56]	; (444 <_ZN9CDC_Class4initEv+0x5c>)
     40a:	2000      	movs	r0, #0
     40c:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     40e:	490e      	ldr	r1, [pc, #56]	; (448 <_ZN9CDC_Class4initEv+0x60>)
     410:	2001      	movs	r0, #1
     412:	47a0      	blx	r4
	txReady=true;
     414:	2301      	movs	r3, #1
     416:	742b      	strb	r3, [r5, #16]
	rxReady=true;
     418:	746b      	strb	r3, [r5, #17]
	return cdcdf_acm_is_enabled();
     41a:	4c0c      	ldr	r4, [pc, #48]	; (44c <_ZN9CDC_Class4initEv+0x64>)
     41c:	47a0      	blx	r4
	while (!is_enabled());
     41e:	2800      	cmp	r0, #0
     420:	d0fc      	beq.n	41c <_ZN9CDC_Class4initEv+0x34>
}
     422:	bd38      	pop	{r3, r4, r5, pc}
     424:	200005ac 	.word	0x200005ac
     428:	00004849 	.word	0x00004849
     42c:	00004139 	.word	0x00004139
     430:	20000000 	.word	0x20000000
     434:	000048b9 	.word	0x000048b9
     438:	000048ed 	.word	0x000048ed
     43c:	00000339 	.word	0x00000339
     440:	000041e5 	.word	0x000041e5
     444:	000002d5 	.word	0x000002d5
     448:	000002e5 	.word	0x000002e5
     44c:	00004231 	.word	0x00004231

00000450 <_ZN9CDC_Class10is_enabledEv>:
bool CDC_Class::is_enabled(void){
     450:	b508      	push	{r3, lr}
	return cdcdf_acm_is_enabled();
     452:	4b01      	ldr	r3, [pc, #4]	; (458 <_ZN9CDC_Class10is_enabledEv+0x8>)
     454:	4798      	blx	r3
}
     456:	bd08      	pop	{r3, pc}
     458:	00004231 	.word	0x00004231

0000045c <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
     45c:	2000      	movs	r0, #0
     45e:	4770      	bx	lr

00000460 <_ZN5Print5printEPKc>:
      if (str == NULL) return 0;
     460:	b161      	cbz	r1, 47c <_ZN5Print5printEPKc+0x1c>
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     462:	b538      	push	{r3, r4, r5, lr}
     464:	460d      	mov	r5, r1
     466:	4604      	mov	r4, r0
      return write((const uint8_t *)str, strlen(str));
     468:	4608      	mov	r0, r1
     46a:	4b05      	ldr	r3, [pc, #20]	; (480 <_ZN5Print5printEPKc+0x20>)
     46c:	4798      	blx	r3
     46e:	6823      	ldr	r3, [r4, #0]
     470:	685b      	ldr	r3, [r3, #4]
     472:	4602      	mov	r2, r0
     474:	4629      	mov	r1, r5
     476:	4620      	mov	r0, r4
     478:	4798      	blx	r3
     47a:	bd38      	pop	{r3, r4, r5, pc}
      if (str == NULL) return 0;
     47c:	2000      	movs	r0, #0
  return write(str);
     47e:	4770      	bx	lr
     480:	00005801 	.word	0x00005801

00000484 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
     484:	b508      	push	{r3, lr}
  return write(c);
     486:	6803      	ldr	r3, [r0, #0]
     488:	681b      	ldr	r3, [r3, #0]
     48a:	4798      	blx	r3
}
     48c:	bd08      	pop	{r3, pc}
	...

00000490 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     490:	b508      	push	{r3, lr}
      return write((const uint8_t *)str, strlen(str));
     492:	6803      	ldr	r3, [r0, #0]
     494:	685b      	ldr	r3, [r3, #4]
     496:	2202      	movs	r2, #2
     498:	4901      	ldr	r1, [pc, #4]	; (4a0 <_ZN5Print7printlnEv+0x10>)
     49a:	4798      	blx	r3
  return write("\r\n");
}
     49c:	bd08      	pop	{r3, pc}
     49e:	bf00      	nop
     4a0:	00005a24 	.word	0x00005a24

000004a4 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     4a4:	b538      	push	{r3, r4, r5, lr}
     4a6:	4605      	mov	r5, r0
  size_t n = print(c);
     4a8:	4b03      	ldr	r3, [pc, #12]	; (4b8 <_ZN5Print7printlnEPKc+0x14>)
     4aa:	4798      	blx	r3
     4ac:	4604      	mov	r4, r0
  n += println();
     4ae:	4628      	mov	r0, r5
     4b0:	4b02      	ldr	r3, [pc, #8]	; (4bc <_ZN5Print7printlnEPKc+0x18>)
     4b2:	4798      	blx	r3
  return n;
}
     4b4:	4420      	add	r0, r4
     4b6:	bd38      	pop	{r3, r4, r5, pc}
     4b8:	00000461 	.word	0x00000461
     4bc:	00000491 	.word	0x00000491

000004c0 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
     4c0:	b538      	push	{r3, r4, r5, lr}
     4c2:	4605      	mov	r5, r0
  size_t n = print(c);
     4c4:	4b03      	ldr	r3, [pc, #12]	; (4d4 <_ZN5Print7printlnEc+0x14>)
     4c6:	4798      	blx	r3
     4c8:	4604      	mov	r4, r0
  n += println();
     4ca:	4628      	mov	r0, r5
     4cc:	4b02      	ldr	r3, [pc, #8]	; (4d8 <_ZN5Print7printlnEc+0x18>)
     4ce:	4798      	blx	r3
  return n;
}
     4d0:	4420      	add	r0, r4
     4d2:	bd38      	pop	{r3, r4, r5, pc}
     4d4:	00000485 	.word	0x00000485
     4d8:	00000491 	.word	0x00000491

000004dc <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     4dc:	b570      	push	{r4, r5, r6, lr}
     4de:	b08a      	sub	sp, #40	; 0x28
     4e0:	4604      	mov	r4, r0
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     4e2:	2300      	movs	r3, #0
     4e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     4e8:	2a01      	cmp	r2, #1
     4ea:	bfd8      	it	le
     4ec:	220a      	movle	r2, #10
     4ee:	f10d 0623 	add.w	r6, sp, #35	; 0x23

  do {
    char c = n % base;
     4f2:	fbb1 f0f2 	udiv	r0, r1, r2
     4f6:	fb02 1110 	mls	r1, r2, r0, r1
     4fa:	b2cb      	uxtb	r3, r1
    n /= base;
     4fc:	4601      	mov	r1, r0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     4fe:	4635      	mov	r5, r6
     500:	2b09      	cmp	r3, #9
     502:	bfd4      	ite	le
     504:	3330      	addle	r3, #48	; 0x30
     506:	3337      	addgt	r3, #55	; 0x37
     508:	b2db      	uxtb	r3, r3
     50a:	7033      	strb	r3, [r6, #0]
     50c:	3e01      	subs	r6, #1
  } while(n);
     50e:	2800      	cmp	r0, #0
     510:	d1ef      	bne.n	4f2 <_ZN5Print11printNumberEmh+0x16>
      if (str == NULL) return 0;
     512:	b155      	cbz	r5, 52a <_ZN5Print11printNumberEmh+0x4e>
      return write((const uint8_t *)str, strlen(str));
     514:	4628      	mov	r0, r5
     516:	4b06      	ldr	r3, [pc, #24]	; (530 <_ZN5Print11printNumberEmh+0x54>)
     518:	4798      	blx	r3
     51a:	6823      	ldr	r3, [r4, #0]
     51c:	685b      	ldr	r3, [r3, #4]
     51e:	4602      	mov	r2, r0
     520:	4629      	mov	r1, r5
     522:	4620      	mov	r0, r4
     524:	4798      	blx	r3

  return write(str);
}
     526:	b00a      	add	sp, #40	; 0x28
     528:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
     52a:	2000      	movs	r0, #0
  return write(str);
     52c:	e7fb      	b.n	526 <_ZN5Print11printNumberEmh+0x4a>
     52e:	bf00      	nop
     530:	00005801 	.word	0x00005801

00000534 <_ZN5Print5printEli>:
{
     534:	b570      	push	{r4, r5, r6, lr}
     536:	4605      	mov	r5, r0
     538:	460c      	mov	r4, r1
  if (base == 0) {
     53a:	b12a      	cbz	r2, 548 <_ZN5Print5printEli+0x14>
  } else if (base == 10) {
     53c:	2a0a      	cmp	r2, #10
     53e:	d008      	beq.n	552 <_ZN5Print5printEli+0x1e>
    return printNumber(n, base);
     540:	b2d2      	uxtb	r2, r2
     542:	4b0c      	ldr	r3, [pc, #48]	; (574 <_ZN5Print5printEli+0x40>)
     544:	4798      	blx	r3
}
     546:	bd70      	pop	{r4, r5, r6, pc}
    return write(n);
     548:	6803      	ldr	r3, [r0, #0]
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	b2c9      	uxtb	r1, r1
     54e:	4798      	blx	r3
     550:	bd70      	pop	{r4, r5, r6, pc}
    if (n < 0) {
     552:	2900      	cmp	r1, #0
     554:	db03      	blt.n	55e <_ZN5Print5printEli+0x2a>
    return printNumber(n, 10);
     556:	220a      	movs	r2, #10
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <_ZN5Print5printEli+0x40>)
     55a:	4798      	blx	r3
     55c:	bd70      	pop	{r4, r5, r6, pc}
      int t = print('-');
     55e:	212d      	movs	r1, #45	; 0x2d
     560:	4b05      	ldr	r3, [pc, #20]	; (578 <_ZN5Print5printEli+0x44>)
     562:	4798      	blx	r3
     564:	4606      	mov	r6, r0
      return printNumber(n, 10) + t;
     566:	220a      	movs	r2, #10
     568:	4261      	negs	r1, r4
     56a:	4628      	mov	r0, r5
     56c:	4b01      	ldr	r3, [pc, #4]	; (574 <_ZN5Print5printEli+0x40>)
     56e:	4798      	blx	r3
     570:	4430      	add	r0, r6
     572:	bd70      	pop	{r4, r5, r6, pc}
     574:	000004dd 	.word	0x000004dd
     578:	00000485 	.word	0x00000485

0000057c <_ZN5Print7printlnEii>:
{
     57c:	b538      	push	{r3, r4, r5, lr}
     57e:	4605      	mov	r5, r0
  return print((long) n, base);
     580:	4b03      	ldr	r3, [pc, #12]	; (590 <_ZN5Print7printlnEii+0x14>)
     582:	4798      	blx	r3
     584:	4604      	mov	r4, r0
  n += println();
     586:	4628      	mov	r0, r5
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <_ZN5Print7printlnEii+0x18>)
     58a:	4798      	blx	r3
}
     58c:	4420      	add	r0, r4
     58e:	bd38      	pop	{r3, r4, r5, pc}
     590:	00000535 	.word	0x00000535
     594:	00000491 	.word	0x00000491

00000598 <_ZN5Print5printEmi>:
{
     598:	b508      	push	{r3, lr}
  if (base == 0) return write(n);
     59a:	b11a      	cbz	r2, 5a4 <_ZN5Print5printEmi+0xc>
  else return printNumber(n, base);
     59c:	b2d2      	uxtb	r2, r2
     59e:	4b04      	ldr	r3, [pc, #16]	; (5b0 <_ZN5Print5printEmi+0x18>)
     5a0:	4798      	blx	r3
}
     5a2:	bd08      	pop	{r3, pc}
  if (base == 0) return write(n);
     5a4:	6803      	ldr	r3, [r0, #0]
     5a6:	681b      	ldr	r3, [r3, #0]
     5a8:	b2c9      	uxtb	r1, r1
     5aa:	4798      	blx	r3
     5ac:	bd08      	pop	{r3, pc}
     5ae:	bf00      	nop
     5b0:	000004dd 	.word	0x000004dd

000005b4 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
     5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b8:	b083      	sub	sp, #12
     5ba:	9001      	str	r0, [sp, #4]
     5bc:	4692      	mov	sl, r2
     5be:	4698      	mov	r8, r3
     5c0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
  size_t n = 0;

  if (isnan(number)) return print("nan");
     5c4:	4652      	mov	r2, sl
     5c6:	4643      	mov	r3, r8
     5c8:	4650      	mov	r0, sl
     5ca:	4641      	mov	r1, r8
     5cc:	4d5e      	ldr	r5, [pc, #376]	; (748 <_ZN5Print10printFloatEdh+0x194>)
     5ce:	47a8      	blx	r5
     5d0:	2800      	cmp	r0, #0
     5d2:	f040 8089 	bne.w	6e8 <_ZN5Print10printFloatEdh+0x134>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
     5d6:	f028 4500 	bic.w	r5, r8, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
     5da:	f04f 32ff 	mov.w	r2, #4294967295
     5de:	4b5b      	ldr	r3, [pc, #364]	; (74c <_ZN5Print10printFloatEdh+0x198>)
     5e0:	4650      	mov	r0, sl
     5e2:	4629      	mov	r1, r5
     5e4:	4e58      	ldr	r6, [pc, #352]	; (748 <_ZN5Print10printFloatEdh+0x194>)
     5e6:	47b0      	blx	r6
     5e8:	b940      	cbnz	r0, 5fc <_ZN5Print10printFloatEdh+0x48>
     5ea:	f04f 32ff 	mov.w	r2, #4294967295
     5ee:	4b57      	ldr	r3, [pc, #348]	; (74c <_ZN5Print10printFloatEdh+0x198>)
     5f0:	4650      	mov	r0, sl
     5f2:	4629      	mov	r1, r5
     5f4:	4d56      	ldr	r5, [pc, #344]	; (750 <_ZN5Print10printFloatEdh+0x19c>)
     5f6:	47a8      	blx	r5
     5f8:	2800      	cmp	r0, #0
     5fa:	d07b      	beq.n	6f4 <_ZN5Print10printFloatEdh+0x140>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     5fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
     600:	4b54      	ldr	r3, [pc, #336]	; (754 <_ZN5Print10printFloatEdh+0x1a0>)
     602:	4650      	mov	r0, sl
     604:	4641      	mov	r1, r8
     606:	4d54      	ldr	r5, [pc, #336]	; (758 <_ZN5Print10printFloatEdh+0x1a4>)
     608:	47a8      	blx	r5
     60a:	2800      	cmp	r0, #0
     60c:	d178      	bne.n	700 <_ZN5Print10printFloatEdh+0x14c>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     60e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
     612:	4b52      	ldr	r3, [pc, #328]	; (75c <_ZN5Print10printFloatEdh+0x1a8>)
     614:	4650      	mov	r0, sl
     616:	4641      	mov	r1, r8
     618:	4d51      	ldr	r5, [pc, #324]	; (760 <_ZN5Print10printFloatEdh+0x1ac>)
     61a:	47a8      	blx	r5
     61c:	2800      	cmp	r0, #0
     61e:	d175      	bne.n	70c <_ZN5Print10printFloatEdh+0x158>

  // Handle negative numbers
  if (number < 0.0)
     620:	2200      	movs	r2, #0
     622:	2300      	movs	r3, #0
     624:	4650      	mov	r0, sl
     626:	4641      	mov	r1, r8
     628:	4d4d      	ldr	r5, [pc, #308]	; (760 <_ZN5Print10printFloatEdh+0x1ac>)
     62a:	47a8      	blx	r5
     62c:	2800      	cmp	r0, #0
     62e:	d173      	bne.n	718 <_ZN5Print10printFloatEdh+0x164>
  size_t n = 0;
     630:	2500      	movs	r5, #0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     632:	46a1      	mov	r9, r4
     634:	2c00      	cmp	r4, #0
     636:	d077      	beq.n	728 <_ZN5Print10printFloatEdh+0x174>
     638:	2600      	movs	r6, #0
     63a:	2000      	movs	r0, #0
     63c:	4949      	ldr	r1, [pc, #292]	; (764 <_ZN5Print10printFloatEdh+0x1b0>)
    rounding /= 10.0;
     63e:	4f4a      	ldr	r7, [pc, #296]	; (768 <_ZN5Print10printFloatEdh+0x1b4>)
     640:	2200      	movs	r2, #0
     642:	4b4a      	ldr	r3, [pc, #296]	; (76c <_ZN5Print10printFloatEdh+0x1b8>)
     644:	47b8      	blx	r7
  for (uint8_t i=0; i<digits; ++i)
     646:	3601      	adds	r6, #1
     648:	b2f6      	uxtb	r6, r6
     64a:	454e      	cmp	r6, r9
     64c:	dbf8      	blt.n	640 <_ZN5Print10printFloatEdh+0x8c>

  number += rounding;
     64e:	4602      	mov	r2, r0
     650:	460b      	mov	r3, r1
     652:	4650      	mov	r0, sl
     654:	4641      	mov	r1, r8
     656:	4e46      	ldr	r6, [pc, #280]	; (770 <_ZN5Print10printFloatEdh+0x1bc>)
     658:	47b0      	blx	r6
     65a:	4606      	mov	r6, r0
     65c:	460f      	mov	r7, r1

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     65e:	4b45      	ldr	r3, [pc, #276]	; (774 <_ZN5Print10printFloatEdh+0x1c0>)
     660:	4798      	blx	r3
     662:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
     664:	4b44      	ldr	r3, [pc, #272]	; (778 <_ZN5Print10printFloatEdh+0x1c4>)
     666:	4798      	blx	r3
     668:	4602      	mov	r2, r0
     66a:	460b      	mov	r3, r1
     66c:	4630      	mov	r0, r6
     66e:	4639      	mov	r1, r7
     670:	4e42      	ldr	r6, [pc, #264]	; (77c <_ZN5Print10printFloatEdh+0x1c8>)
     672:	47b0      	blx	r6
     674:	4606      	mov	r6, r0
     676:	460f      	mov	r7, r1
  n += print(int_part);
     678:	220a      	movs	r2, #10
     67a:	4641      	mov	r1, r8
     67c:	f8dd 9004 	ldr.w	r9, [sp, #4]
     680:	4648      	mov	r0, r9
     682:	4b3f      	ldr	r3, [pc, #252]	; (780 <_ZN5Print10printFloatEdh+0x1cc>)
     684:	4798      	blx	r3
     686:	4680      	mov	r8, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.');
     688:	212e      	movs	r1, #46	; 0x2e
     68a:	4648      	mov	r0, r9
     68c:	4b3d      	ldr	r3, [pc, #244]	; (784 <_ZN5Print10printFloatEdh+0x1d0>)
     68e:	4798      	blx	r3
     690:	4440      	add	r0, r8
     692:	4405      	add	r5, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     694:	3c01      	subs	r4, #1
     696:	b2e4      	uxtb	r4, r4
  {
    remainder *= 10.0;
     698:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 798 <_ZN5Print10printFloatEdh+0x1e4>
    unsigned int toPrint = (unsigned int)(remainder);
     69c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 774 <_ZN5Print10printFloatEdh+0x1c0>
    remainder *= 10.0;
     6a0:	2200      	movs	r2, #0
     6a2:	4b32      	ldr	r3, [pc, #200]	; (76c <_ZN5Print10printFloatEdh+0x1b8>)
     6a4:	4630      	mov	r0, r6
     6a6:	4639      	mov	r1, r7
     6a8:	47c8      	blx	r9
     6aa:	4606      	mov	r6, r0
     6ac:	460f      	mov	r7, r1
    unsigned int toPrint = (unsigned int)(remainder);
     6ae:	47d0      	blx	sl
     6b0:	4683      	mov	fp, r0
  return print((unsigned long) n, base);
     6b2:	220a      	movs	r2, #10
     6b4:	4601      	mov	r1, r0
     6b6:	9801      	ldr	r0, [sp, #4]
     6b8:	4b31      	ldr	r3, [pc, #196]	; (780 <_ZN5Print10printFloatEdh+0x1cc>)
     6ba:	4798      	blx	r3
    n += print(toPrint);
     6bc:	4405      	add	r5, r0
  while (digits-- > 0)
     6be:	1e63      	subs	r3, r4, #1
     6c0:	46a0      	mov	r8, r4
     6c2:	b2dc      	uxtb	r4, r3
    remainder -= toPrint;
     6c4:	4658      	mov	r0, fp
     6c6:	4b2c      	ldr	r3, [pc, #176]	; (778 <_ZN5Print10printFloatEdh+0x1c4>)
     6c8:	4798      	blx	r3
     6ca:	4602      	mov	r2, r0
     6cc:	460b      	mov	r3, r1
     6ce:	4630      	mov	r0, r6
     6d0:	4639      	mov	r1, r7
     6d2:	4e2a      	ldr	r6, [pc, #168]	; (77c <_ZN5Print10printFloatEdh+0x1c8>)
     6d4:	47b0      	blx	r6
     6d6:	4606      	mov	r6, r0
     6d8:	460f      	mov	r7, r1
  while (digits-- > 0)
     6da:	f1b8 0f00 	cmp.w	r8, #0
     6de:	d1df      	bne.n	6a0 <_ZN5Print10printFloatEdh+0xec>
  }

  return n;
}
     6e0:	4628      	mov	r0, r5
     6e2:	b003      	add	sp, #12
     6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isnan(number)) return print("nan");
     6e8:	4927      	ldr	r1, [pc, #156]	; (788 <_ZN5Print10printFloatEdh+0x1d4>)
     6ea:	9801      	ldr	r0, [sp, #4]
     6ec:	4b27      	ldr	r3, [pc, #156]	; (78c <_ZN5Print10printFloatEdh+0x1d8>)
     6ee:	4798      	blx	r3
     6f0:	4605      	mov	r5, r0
     6f2:	e7f5      	b.n	6e0 <_ZN5Print10printFloatEdh+0x12c>
  if (isinf(number)) return print("inf");
     6f4:	4926      	ldr	r1, [pc, #152]	; (790 <_ZN5Print10printFloatEdh+0x1dc>)
     6f6:	9801      	ldr	r0, [sp, #4]
     6f8:	4b24      	ldr	r3, [pc, #144]	; (78c <_ZN5Print10printFloatEdh+0x1d8>)
     6fa:	4798      	blx	r3
     6fc:	4605      	mov	r5, r0
     6fe:	e7ef      	b.n	6e0 <_ZN5Print10printFloatEdh+0x12c>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     700:	4924      	ldr	r1, [pc, #144]	; (794 <_ZN5Print10printFloatEdh+0x1e0>)
     702:	9801      	ldr	r0, [sp, #4]
     704:	4b21      	ldr	r3, [pc, #132]	; (78c <_ZN5Print10printFloatEdh+0x1d8>)
     706:	4798      	blx	r3
     708:	4605      	mov	r5, r0
     70a:	e7e9      	b.n	6e0 <_ZN5Print10printFloatEdh+0x12c>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     70c:	4921      	ldr	r1, [pc, #132]	; (794 <_ZN5Print10printFloatEdh+0x1e0>)
     70e:	9801      	ldr	r0, [sp, #4]
     710:	4b1e      	ldr	r3, [pc, #120]	; (78c <_ZN5Print10printFloatEdh+0x1d8>)
     712:	4798      	blx	r3
     714:	4605      	mov	r5, r0
     716:	e7e3      	b.n	6e0 <_ZN5Print10printFloatEdh+0x12c>
     n += print('-');
     718:	212d      	movs	r1, #45	; 0x2d
     71a:	9801      	ldr	r0, [sp, #4]
     71c:	4b19      	ldr	r3, [pc, #100]	; (784 <_ZN5Print10printFloatEdh+0x1d0>)
     71e:	4798      	blx	r3
     720:	4605      	mov	r5, r0
     number = -number;
     722:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
     726:	e784      	b.n	632 <_ZN5Print10printFloatEdh+0x7e>
  number += rounding;
     728:	2200      	movs	r2, #0
     72a:	4b0e      	ldr	r3, [pc, #56]	; (764 <_ZN5Print10printFloatEdh+0x1b0>)
     72c:	4650      	mov	r0, sl
     72e:	4641      	mov	r1, r8
     730:	4c0f      	ldr	r4, [pc, #60]	; (770 <_ZN5Print10printFloatEdh+0x1bc>)
     732:	47a0      	blx	r4
  unsigned long int_part = (unsigned long)number;
     734:	4b0f      	ldr	r3, [pc, #60]	; (774 <_ZN5Print10printFloatEdh+0x1c0>)
     736:	4798      	blx	r3
  n += print(int_part);
     738:	220a      	movs	r2, #10
     73a:	4601      	mov	r1, r0
     73c:	9801      	ldr	r0, [sp, #4]
     73e:	4b10      	ldr	r3, [pc, #64]	; (780 <_ZN5Print10printFloatEdh+0x1cc>)
     740:	4798      	blx	r3
     742:	4405      	add	r5, r0
     744:	e7cc      	b.n	6e0 <_ZN5Print10printFloatEdh+0x12c>
     746:	bf00      	nop
     748:	00005345 	.word	0x00005345
     74c:	7fefffff 	.word	0x7fefffff
     750:	00005309 	.word	0x00005309
     754:	41efffff 	.word	0x41efffff
     758:	00005331 	.word	0x00005331
     75c:	c1efffff 	.word	0xc1efffff
     760:	000052f5 	.word	0x000052f5
     764:	3fe00000 	.word	0x3fe00000
     768:	00005065 	.word	0x00005065
     76c:	40240000 	.word	0x40240000
     770:	00004aad 	.word	0x00004aad
     774:	00005371 	.word	0x00005371
     778:	00004d25 	.word	0x00004d25
     77c:	00004aa9 	.word	0x00004aa9
     780:	00000599 	.word	0x00000599
     784:	00000485 	.word	0x00000485
     788:	00005a28 	.word	0x00005a28
     78c:	00000461 	.word	0x00000461
     790:	00005a2c 	.word	0x00005a2c
     794:	00005a30 	.word	0x00005a30
     798:	00004e11 	.word	0x00004e11

0000079c <_ZN5Print7printlnEdi>:
{
     79c:	b530      	push	{r4, r5, lr}
     79e:	b083      	sub	sp, #12
     7a0:	4605      	mov	r5, r0
  return printFloat(n, digits);
     7a2:	f89d 1018 	ldrb.w	r1, [sp, #24]
     7a6:	9100      	str	r1, [sp, #0]
     7a8:	4904      	ldr	r1, [pc, #16]	; (7bc <_ZN5Print7printlnEdi+0x20>)
     7aa:	4788      	blx	r1
     7ac:	4604      	mov	r4, r0
  n += println();
     7ae:	4628      	mov	r0, r5
     7b0:	4b03      	ldr	r3, [pc, #12]	; (7c0 <_ZN5Print7printlnEdi+0x24>)
     7b2:	4798      	blx	r3
}
     7b4:	4420      	add	r0, r4
     7b6:	b003      	add	sp, #12
     7b8:	bd30      	pop	{r4, r5, pc}
     7ba:	bf00      	nop
     7bc:	000005b5 	.word	0x000005b5
     7c0:	00000491 	.word	0x00000491

000007c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     7c4:	e7fe      	b.n	7c4 <Dummy_Handler>
	...

000007c8 <Reset_Handler>:
{
     7c8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     7ca:	4b17      	ldr	r3, [pc, #92]	; (828 <Reset_Handler+0x60>)
     7cc:	4a17      	ldr	r2, [pc, #92]	; (82c <Reset_Handler+0x64>)
     7ce:	429a      	cmp	r2, r3
     7d0:	d010      	beq.n	7f4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     7d2:	4b17      	ldr	r3, [pc, #92]	; (830 <Reset_Handler+0x68>)
     7d4:	4a14      	ldr	r2, [pc, #80]	; (828 <Reset_Handler+0x60>)
     7d6:	429a      	cmp	r2, r3
     7d8:	d20c      	bcs.n	7f4 <Reset_Handler+0x2c>
     7da:	3b01      	subs	r3, #1
     7dc:	1a9b      	subs	r3, r3, r2
     7de:	f023 0303 	bic.w	r3, r3, #3
     7e2:	3304      	adds	r3, #4
     7e4:	4413      	add	r3, r2
     7e6:	4911      	ldr	r1, [pc, #68]	; (82c <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     7e8:	f851 0b04 	ldr.w	r0, [r1], #4
     7ec:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     7f0:	429a      	cmp	r2, r3
     7f2:	d1f9      	bne.n	7e8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     7f4:	4b0f      	ldr	r3, [pc, #60]	; (834 <Reset_Handler+0x6c>)
     7f6:	4a10      	ldr	r2, [pc, #64]	; (838 <Reset_Handler+0x70>)
     7f8:	429a      	cmp	r2, r3
     7fa:	d20a      	bcs.n	812 <Reset_Handler+0x4a>
     7fc:	3b01      	subs	r3, #1
     7fe:	1a9b      	subs	r3, r3, r2
     800:	f023 0303 	bic.w	r3, r3, #3
     804:	3304      	adds	r3, #4
     806:	4413      	add	r3, r2
                *pDest++ = 0;
     808:	2100      	movs	r1, #0
     80a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     80e:	4293      	cmp	r3, r2
     810:	d1fb      	bne.n	80a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     812:	4a0a      	ldr	r2, [pc, #40]	; (83c <Reset_Handler+0x74>)
     814:	4b0a      	ldr	r3, [pc, #40]	; (840 <Reset_Handler+0x78>)
     816:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     81a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     81c:	4b09      	ldr	r3, [pc, #36]	; (844 <Reset_Handler+0x7c>)
     81e:	4798      	blx	r3
        main();
     820:	4b09      	ldr	r3, [pc, #36]	; (848 <Reset_Handler+0x80>)
     822:	4798      	blx	r3
     824:	e7fe      	b.n	824 <Reset_Handler+0x5c>
     826:	bf00      	nop
     828:	20000000 	.word	0x20000000
     82c:	00005d2c 	.word	0x00005d2c
     830:	2000054c 	.word	0x2000054c
     834:	20000a84 	.word	0x20000a84
     838:	2000054c 	.word	0x2000054c
     83c:	e000ed00 	.word	0xe000ed00
     840:	00000000 	.word	0x00000000
     844:	000055cd 	.word	0x000055cd
     848:	0000084d 	.word	0x0000084d

0000084c <main>:

#include <atmel_start.h>
#include "CDC_Class.h"

int main(void)
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	b08b      	sub	sp, #44	; 0x2c
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     850:	4b1b      	ldr	r3, [pc, #108]	; (8c0 <main+0x74>)
     852:	4798      	blx	r3
	CDC_Class	usb;
     854:	a803      	add	r0, sp, #12
     856:	4b1b      	ldr	r3, [pc, #108]	; (8c4 <main+0x78>)
     858:	4798      	blx	r3
	usb.init();
     85a:	a803      	add	r0, sp, #12
     85c:	4b1a      	ldr	r3, [pc, #104]	; (8c8 <main+0x7c>)
     85e:	4798      	blx	r3
	

	/* Replace with your application code */
	while (1) {
		if (usb.is_enabled())
     860:	4d1a      	ldr	r5, [pc, #104]	; (8cc <main+0x80>)
		{
			int inByte=usb.read();
     862:	4e1b      	ldr	r6, [pc, #108]	; (8d0 <main+0x84>)
			if (inByte>33)
			{
				usb.println(inByte);
     864:	4f1b      	ldr	r7, [pc, #108]	; (8d4 <main+0x88>)
     866:	e002      	b.n	86e <main+0x22>
				usb.println((float)(inByte/2));
				usb.println("it works");
				usb<<"it does work";
			}
		}
		delay_ms(100);
     868:	2064      	movs	r0, #100	; 0x64
     86a:	4b1b      	ldr	r3, [pc, #108]	; (8d8 <main+0x8c>)
     86c:	4798      	blx	r3
		if (usb.is_enabled())
     86e:	a803      	add	r0, sp, #12
     870:	47a8      	blx	r5
     872:	2800      	cmp	r0, #0
     874:	d0f8      	beq.n	868 <main+0x1c>
			int inByte=usb.read();
     876:	a803      	add	r0, sp, #12
     878:	47b0      	blx	r6
     87a:	4604      	mov	r4, r0
			if (inByte>33)
     87c:	2821      	cmp	r0, #33	; 0x21
     87e:	ddf3      	ble.n	868 <main+0x1c>
				usb.println(inByte);
     880:	220a      	movs	r2, #10
     882:	4601      	mov	r1, r0
     884:	a803      	add	r0, sp, #12
     886:	47b8      	blx	r7
				usb.println((char)inByte);
     888:	b2e1      	uxtb	r1, r4
     88a:	a803      	add	r0, sp, #12
     88c:	4b13      	ldr	r3, [pc, #76]	; (8dc <main+0x90>)
     88e:	4798      	blx	r3
				usb.println((float)(inByte/2));
     890:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
     894:	1060      	asrs	r0, r4, #1
     896:	4b12      	ldr	r3, [pc, #72]	; (8e0 <main+0x94>)
     898:	4798      	blx	r3
     89a:	4b12      	ldr	r3, [pc, #72]	; (8e4 <main+0x98>)
     89c:	4798      	blx	r3
     89e:	2302      	movs	r3, #2
     8a0:	9300      	str	r3, [sp, #0]
     8a2:	4602      	mov	r2, r0
     8a4:	460b      	mov	r3, r1
     8a6:	a803      	add	r0, sp, #12
     8a8:	490f      	ldr	r1, [pc, #60]	; (8e8 <main+0x9c>)
     8aa:	4788      	blx	r1
				usb.println("it works");
     8ac:	490f      	ldr	r1, [pc, #60]	; (8ec <main+0xa0>)
     8ae:	a803      	add	r0, sp, #12
     8b0:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <main+0xa4>)
     8b2:	4798      	blx	r3
  int findMulti(struct MultiTarget *targets, int tCount);
};

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     8b4:	490f      	ldr	r1, [pc, #60]	; (8f4 <main+0xa8>)
     8b6:	a803      	add	r0, sp, #12
     8b8:	4b0f      	ldr	r3, [pc, #60]	; (8f8 <main+0xac>)
     8ba:	4798      	blx	r3
     8bc:	e7d4      	b.n	868 <main+0x1c>
     8be:	bf00      	nop
     8c0:	000008fd 	.word	0x000008fd
     8c4:	000003cd 	.word	0x000003cd
     8c8:	000003e9 	.word	0x000003e9
     8cc:	00000451 	.word	0x00000451
     8d0:	00000375 	.word	0x00000375
     8d4:	0000057d 	.word	0x0000057d
     8d8:	00000f99 	.word	0x00000f99
     8dc:	000004c1 	.word	0x000004c1
     8e0:	00005525 	.word	0x00005525
     8e4:	00004d69 	.word	0x00004d69
     8e8:	0000079d 	.word	0x0000079d
     8ec:	00005a34 	.word	0x00005a34
     8f0:	000004a5 	.word	0x000004a5
     8f4:	00005a40 	.word	0x00005a40
     8f8:	00000461 	.word	0x00000461

000008fc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     8fc:	b508      	push	{r3, lr}
	system_init();
     8fe:	4b02      	ldr	r3, [pc, #8]	; (908 <atmel_start_init+0xc>)
     900:	4798      	blx	r3
	usb_init();
     902:	4b02      	ldr	r3, [pc, #8]	; (90c <atmel_start_init+0x10>)
     904:	4798      	blx	r3
     906:	bd08      	pop	{r3, pc}
     908:	00000e35 	.word	0x00000e35
     90c:	00004a79 	.word	0x00004a79

00000910 <EVENT_SYSTEM_0_init>:
struct can_async_descriptor  CAN_Compressor;

struct i2c_m_sync_desc I2C_EEPROM;

void EVENT_SYSTEM_0_init(void)
{
     910:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     912:	2240      	movs	r2, #64	; 0x40
     914:	4b05      	ldr	r3, [pc, #20]	; (92c <EVENT_SYSTEM_0_init+0x1c>)
     916:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     91a:	4a05      	ldr	r2, [pc, #20]	; (930 <EVENT_SYSTEM_0_init+0x20>)
     91c:	6993      	ldr	r3, [r2, #24]
     91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     922:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     924:	4b03      	ldr	r3, [pc, #12]	; (934 <EVENT_SYSTEM_0_init+0x24>)
     926:	4798      	blx	r3
     928:	bd08      	pop	{r3, pc}
     92a:	bf00      	nop
     92c:	40001c00 	.word	0x40001c00
     930:	40000800 	.word	0x40000800
     934:	00000fb9 	.word	0x00000fb9

00000938 <SPI_HOLT_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     938:	4b28      	ldr	r3, [pc, #160]	; (9dc <SPI_HOLT_PORT_init+0xa4>)
     93a:	2210      	movs	r2, #16
     93c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     93e:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     940:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     944:	629a      	str	r2, [r3, #40]	; 0x28
     946:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     94a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     94c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     954:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     95c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     960:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     964:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     968:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     96c:	2220      	movs	r2, #32
     96e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     970:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     972:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     97a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     97e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     982:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     98a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     98e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     992:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     996:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     99a:	2240      	movs	r2, #64	; 0x40
     99c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     99e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9a2:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     9a6:	629a      	str	r2, [r3, #40]	; 0x28
     9a8:	4a0d      	ldr	r2, [pc, #52]	; (9e0 <SPI_HOLT_PORT_init+0xa8>)
     9aa:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9ac:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     9b0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     9bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9c0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9d0:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	41008000 	.word	0x41008000
     9e0:	c0020000 	.word	0xc0020000

000009e4 <SPI_HOLT_CLOCK_init>:
     9e4:	4b06      	ldr	r3, [pc, #24]	; (a00 <SPI_HOLT_CLOCK_init+0x1c>)
     9e6:	2240      	movs	r2, #64	; 0x40
     9e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     9ec:	2243      	movs	r2, #67	; 0x43
     9ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     9f2:	4a04      	ldr	r2, [pc, #16]	; (a04 <SPI_HOLT_CLOCK_init+0x20>)
     9f4:	6953      	ldr	r3, [r2, #20]
     9f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     9fa:	6153      	str	r3, [r2, #20]
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop
     a00:	40001c00 	.word	0x40001c00
     a04:	40000800 	.word	0x40000800

00000a08 <SPI_HOLT_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_HOLT_init(void)
{
     a08:	b508      	push	{r3, lr}
	SPI_HOLT_CLOCK_init();
     a0a:	4b04      	ldr	r3, [pc, #16]	; (a1c <SPI_HOLT_init+0x14>)
     a0c:	4798      	blx	r3
	spi_m_sync_init(&SPI_HOLT, SERCOM0);
     a0e:	4904      	ldr	r1, [pc, #16]	; (a20 <SPI_HOLT_init+0x18>)
     a10:	4804      	ldr	r0, [pc, #16]	; (a24 <SPI_HOLT_init+0x1c>)
     a12:	4b05      	ldr	r3, [pc, #20]	; (a28 <SPI_HOLT_init+0x20>)
     a14:	4798      	blx	r3
	SPI_HOLT_PORT_init();
     a16:	4b05      	ldr	r3, [pc, #20]	; (a2c <SPI_HOLT_init+0x24>)
     a18:	4798      	blx	r3
     a1a:	bd08      	pop	{r3, pc}
     a1c:	000009e5 	.word	0x000009e5
     a20:	40003000 	.word	0x40003000
     a24:	20000968 	.word	0x20000968
     a28:	00001065 	.word	0x00001065
     a2c:	00000939 	.word	0x00000939

00000a30 <SPI_TEMP_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a30:	4b28      	ldr	r3, [pc, #160]	; (ad4 <SPI_TEMP_PORT_init+0xa4>)
     a32:	2201      	movs	r2, #1
     a34:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a36:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a38:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a3c:	629a      	str	r2, [r3, #40]	; 0x28
     a3e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     a42:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a4c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a54:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a58:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a5c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a64:	2202      	movs	r2, #2
     a66:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a68:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a6a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a6e:	629a      	str	r2, [r3, #40]	; 0x28
     a70:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a72:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
	tmp &= ~PORT_PINCFG_PMUXEN;
     a76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a82:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a8a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     a96:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a98:	4a0f      	ldr	r2, [pc, #60]	; (ad8 <SPI_TEMP_PORT_init+0xa8>)
     a9a:	629a      	str	r2, [r3, #40]	; 0x28
     a9c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     aa0:	3204      	adds	r2, #4
     aa2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aa4:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
     aa8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ab0:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     ab4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ab8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     abc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ac0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ac4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ac8:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     ad0:	4770      	bx	lr
     ad2:	bf00      	nop
     ad4:	41008000 	.word	0x41008000
     ad8:	40020000 	.word	0x40020000

00000adc <SPI_TEMP_CLOCK_init>:
     adc:	4b06      	ldr	r3, [pc, #24]	; (af8 <SPI_TEMP_CLOCK_init+0x1c>)
     ade:	2240      	movs	r2, #64	; 0x40
     ae0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     ae4:	2243      	movs	r2, #67	; 0x43
     ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     aea:	4a04      	ldr	r2, [pc, #16]	; (afc <SPI_TEMP_CLOCK_init+0x20>)
     aec:	6953      	ldr	r3, [r2, #20]
     aee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     af2:	6153      	str	r3, [r2, #20]
     af4:	4770      	bx	lr
     af6:	bf00      	nop
     af8:	40001c00 	.word	0x40001c00
     afc:	40000800 	.word	0x40000800

00000b00 <SPI_TEMP_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void SPI_TEMP_init(void)
{
     b00:	b508      	push	{r3, lr}
	SPI_TEMP_CLOCK_init();
     b02:	4b04      	ldr	r3, [pc, #16]	; (b14 <SPI_TEMP_init+0x14>)
     b04:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM1);
     b06:	4904      	ldr	r1, [pc, #16]	; (b18 <SPI_TEMP_init+0x18>)
     b08:	4804      	ldr	r0, [pc, #16]	; (b1c <SPI_TEMP_init+0x1c>)
     b0a:	4b05      	ldr	r3, [pc, #20]	; (b20 <SPI_TEMP_init+0x20>)
     b0c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
     b0e:	4b05      	ldr	r3, [pc, #20]	; (b24 <SPI_TEMP_init+0x24>)
     b10:	4798      	blx	r3
     b12:	bd08      	pop	{r3, pc}
     b14:	00000add 	.word	0x00000add
     b18:	40003400 	.word	0x40003400
     b1c:	20000980 	.word	0x20000980
     b20:	00001065 	.word	0x00001065
     b24:	00000a31 	.word	0x00000a31

00000b28 <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b28:	4b16      	ldr	r3, [pc, #88]	; (b84 <I2C_EEPROM_PORT_init+0x5c>)
     b2a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     b2e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b32:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b36:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     b3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b3e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b42:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b46:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b4a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b4e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b52:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b56:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     b5a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b5e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b62:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     b66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b6a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b6e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b72:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b76:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b7a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b7e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b82:	4770      	bx	lr
     b84:	41008000 	.word	0x41008000

00000b88 <I2C_EEPROM_CLOCK_init>:
     b88:	4b06      	ldr	r3, [pc, #24]	; (ba4 <I2C_EEPROM_CLOCK_init+0x1c>)
     b8a:	2240      	movs	r2, #64	; 0x40
     b8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     b90:	2243      	movs	r2, #67	; 0x43
     b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     b96:	4a04      	ldr	r2, [pc, #16]	; (ba8 <I2C_EEPROM_CLOCK_init+0x20>)
     b98:	6993      	ldr	r3, [r2, #24]
     b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     b9e:	6193      	str	r3, [r2, #24]
     ba0:	4770      	bx	lr
     ba2:	bf00      	nop
     ba4:	40001c00 	.word	0x40001c00
     ba8:	40000800 	.word	0x40000800

00000bac <I2C_EEPROM_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
     bac:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
     bae:	4b04      	ldr	r3, [pc, #16]	; (bc0 <I2C_EEPROM_init+0x14>)
     bb0:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EEPROM, SERCOM3);
     bb2:	4904      	ldr	r1, [pc, #16]	; (bc4 <I2C_EEPROM_init+0x18>)
     bb4:	4804      	ldr	r0, [pc, #16]	; (bc8 <I2C_EEPROM_init+0x1c>)
     bb6:	4b05      	ldr	r3, [pc, #20]	; (bcc <I2C_EEPROM_init+0x20>)
     bb8:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <I2C_EEPROM_init+0x24>)
     bbc:	4798      	blx	r3
     bbe:	bd08      	pop	{r3, pc}
     bc0:	00000b89 	.word	0x00000b89
     bc4:	41014000 	.word	0x41014000
     bc8:	20000a00 	.word	0x20000a00
     bcc:	00001025 	.word	0x00001025
     bd0:	00000b29 	.word	0x00000b29

00000bd4 <SPI_MEMORIES_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bd4:	4b2f      	ldr	r3, [pc, #188]	; (c94 <SPI_MEMORIES_PORT_init+0xc0>)
     bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
     bda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     be2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     be6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     bea:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     bee:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bf2:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     bf6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bfa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bfe:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c02:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c06:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c0a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c0e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c12:	f44f 7200 	mov.w	r2, #512	; 0x200
     c16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c26:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c2a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     c2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c32:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c36:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c3a:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c3e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c42:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c46:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c52:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     c56:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c5a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c5e:	4a0e      	ldr	r2, [pc, #56]	; (c98 <SPI_MEMORIES_PORT_init+0xc4>)
     c60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c64:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     c68:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c6c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c70:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     c74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c78:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c7c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c80:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c88:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c8c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	41008000 	.word	0x41008000
     c98:	c0020000 	.word	0xc0020000

00000c9c <SPI_MEMORIES_CLOCK_init>:
     c9c:	4b06      	ldr	r3, [pc, #24]	; (cb8 <SPI_MEMORIES_CLOCK_init+0x1c>)
     c9e:	2240      	movs	r2, #64	; 0x40
     ca0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     ca4:	2243      	movs	r2, #67	; 0x43
     ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     caa:	4a04      	ldr	r2, [pc, #16]	; (cbc <SPI_MEMORIES_CLOCK_init+0x20>)
     cac:	6a13      	ldr	r3, [r2, #32]
     cae:	f043 0301 	orr.w	r3, r3, #1
     cb2:	6213      	str	r3, [r2, #32]
     cb4:	4770      	bx	lr
     cb6:	bf00      	nop
     cb8:	40001c00 	.word	0x40001c00
     cbc:	40000800 	.word	0x40000800

00000cc0 <SPI_MEMORIES_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_MEMORIES_init(void)
{
     cc0:	b508      	push	{r3, lr}
	SPI_MEMORIES_CLOCK_init();
     cc2:	4b05      	ldr	r3, [pc, #20]	; (cd8 <SPI_MEMORIES_init+0x18>)
     cc4:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM4);
     cc6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     cca:	4804      	ldr	r0, [pc, #16]	; (cdc <SPI_MEMORIES_init+0x1c>)
     ccc:	4b04      	ldr	r3, [pc, #16]	; (ce0 <SPI_MEMORIES_init+0x20>)
     cce:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
     cd0:	4b04      	ldr	r3, [pc, #16]	; (ce4 <SPI_MEMORIES_init+0x24>)
     cd2:	4798      	blx	r3
     cd4:	bd08      	pop	{r3, pc}
     cd6:	bf00      	nop
     cd8:	00000c9d 	.word	0x00000c9d
     cdc:	20000950 	.word	0x20000950
     ce0:	00001065 	.word	0x00001065
     ce4:	00000bd5 	.word	0x00000bd5

00000ce8 <CDCUSB_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ce8:	4b1e      	ldr	r3, [pc, #120]	; (d64 <CDCUSB_PORT_init+0x7c>)
     cea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     cee:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cf0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     cf4:	6299      	str	r1, [r3, #40]	; 0x28
     cf6:	481c      	ldr	r0, [pc, #112]	; (d68 <CDCUSB_PORT_init+0x80>)
     cf8:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cfa:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cfc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d00:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d08:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d10:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d18:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d1c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d20:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d2c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d2e:	6299      	str	r1, [r3, #40]	; 0x28
     d30:	490e      	ldr	r1, [pc, #56]	; (d6c <CDCUSB_PORT_init+0x84>)
     d32:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d34:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d36:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d3a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d42:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d4a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d52:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d56:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d5a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d62:	4770      	bx	lr
     d64:	41008000 	.word	0x41008000
     d68:	c0000100 	.word	0xc0000100
     d6c:	c0000200 	.word	0xc0000200

00000d70 <CDCUSB_CLOCK_init>:
     d70:	2242      	movs	r2, #66	; 0x42
     d72:	4b07      	ldr	r3, [pc, #28]	; (d90 <CDCUSB_CLOCK_init+0x20>)
     d74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     d78:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     d7c:	691a      	ldr	r2, [r3, #16]
     d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     d82:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     d84:	699a      	ldr	r2, [r3, #24]
     d86:	f042 0201 	orr.w	r2, r2, #1
     d8a:	619a      	str	r2, [r3, #24]
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop
     d90:	40001c00 	.word	0x40001c00

00000d94 <CDCUSB_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void CDCUSB_init(void)
{
     d94:	b508      	push	{r3, lr}
	CDCUSB_CLOCK_init();
     d96:	4b03      	ldr	r3, [pc, #12]	; (da4 <CDCUSB_init+0x10>)
     d98:	4798      	blx	r3
	usb_d_init();
     d9a:	4b03      	ldr	r3, [pc, #12]	; (da8 <CDCUSB_init+0x14>)
     d9c:	4798      	blx	r3
	CDCUSB_PORT_init();
     d9e:	4b03      	ldr	r3, [pc, #12]	; (dac <CDCUSB_init+0x18>)
     da0:	4798      	blx	r3
     da2:	bd08      	pop	{r3, pc}
     da4:	00000d71 	.word	0x00000d71
     da8:	000014dd 	.word	0x000014dd
     dac:	00000ce9 	.word	0x00000ce9

00000db0 <CAN_Compressor_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     db0:	4b10      	ldr	r3, [pc, #64]	; (df4 <CAN_Compressor_PORT_init+0x44>)
     db2:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     db6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dbe:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dc2:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dc6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     dca:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dce:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dd2:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     dd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dda:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dde:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     de2:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     de6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     dea:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dee:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     df2:	4770      	bx	lr
     df4:	41008000 	.word	0x41008000

00000df8 <CAN_Compressor_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_Compressor_init(void)
{
     df8:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     dfa:	4a08      	ldr	r2, [pc, #32]	; (e1c <CAN_Compressor_init+0x24>)
     dfc:	6913      	ldr	r3, [r2, #16]
     dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     e02:	6113      	str	r3, [r2, #16]
     e04:	2241      	movs	r2, #65	; 0x41
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <CAN_Compressor_init+0x28>)
     e08:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_Compressor, CAN1);
     e0c:	4905      	ldr	r1, [pc, #20]	; (e24 <CAN_Compressor_init+0x2c>)
     e0e:	4806      	ldr	r0, [pc, #24]	; (e28 <CAN_Compressor_init+0x30>)
     e10:	4b06      	ldr	r3, [pc, #24]	; (e2c <CAN_Compressor_init+0x34>)
     e12:	4798      	blx	r3
	CAN_Compressor_PORT_init();
     e14:	4b06      	ldr	r3, [pc, #24]	; (e30 <CAN_Compressor_init+0x38>)
     e16:	4798      	blx	r3
     e18:	bd08      	pop	{r3, pc}
     e1a:	bf00      	nop
     e1c:	40000800 	.word	0x40000800
     e20:	40001c00 	.word	0x40001c00
     e24:	42000400 	.word	0x42000400
     e28:	20000998 	.word	0x20000998
     e2c:	00000f49 	.word	0x00000f49
     e30:	00000db1 	.word	0x00000db1

00000e34 <system_init>:
}

void system_init(void)
{
     e34:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e36:	4b28      	ldr	r3, [pc, #160]	; (ed8 <system_init+0xa4>)
     e38:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e3a:	4b28      	ldr	r3, [pc, #160]	; (edc <system_init+0xa8>)
     e3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     e40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     e4c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e50:	4a23      	ldr	r2, [pc, #140]	; (ee0 <system_init+0xac>)
     e52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e56:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e5e:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e66:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e6e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     e72:	4a1c      	ldr	r2, [pc, #112]	; (ee4 <system_init+0xb0>)
     e74:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e78:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e80:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
     e84:	4b18      	ldr	r3, [pc, #96]	; (ee8 <system_init+0xb4>)
     e86:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     e88:	4c18      	ldr	r4, [pc, #96]	; (eec <system_init+0xb8>)
     e8a:	6963      	ldr	r3, [r4, #20]
     e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     e90:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_RTC, RTC, _rtc_get_timer());
     e92:	4b17      	ldr	r3, [pc, #92]	; (ef0 <system_init+0xbc>)
     e94:	4798      	blx	r3
     e96:	4602      	mov	r2, r0
     e98:	4916      	ldr	r1, [pc, #88]	; (ef4 <system_init+0xc0>)
     e9a:	4817      	ldr	r0, [pc, #92]	; (ef8 <system_init+0xc4>)
     e9c:	4d17      	ldr	r5, [pc, #92]	; (efc <system_init+0xc8>)
     e9e:	47a8      	blx	r5

	TIMER_RTC_init();

	SPI_HOLT_init();
     ea0:	4b17      	ldr	r3, [pc, #92]	; (f00 <system_init+0xcc>)
     ea2:	4798      	blx	r3

	SPI_TEMP_init();
     ea4:	4b17      	ldr	r3, [pc, #92]	; (f04 <system_init+0xd0>)
     ea6:	4798      	blx	r3

	I2C_EEPROM_init();
     ea8:	4b17      	ldr	r3, [pc, #92]	; (f08 <system_init+0xd4>)
     eaa:	4798      	blx	r3

	SPI_MEMORIES_init();
     eac:	4b17      	ldr	r3, [pc, #92]	; (f0c <system_init+0xd8>)
     eae:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     eb0:	6963      	ldr	r3, [r4, #20]
     eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     eb6:	6163      	str	r3, [r4, #20]
     eb8:	224a      	movs	r2, #74	; 0x4a
     eba:	4b15      	ldr	r3, [pc, #84]	; (f10 <system_init+0xdc>)
     ebc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMEOUT, TC0, _tc_get_timer());
     ec0:	4b14      	ldr	r3, [pc, #80]	; (f14 <system_init+0xe0>)
     ec2:	4798      	blx	r3
     ec4:	4602      	mov	r2, r0
     ec6:	4914      	ldr	r1, [pc, #80]	; (f18 <system_init+0xe4>)
     ec8:	4814      	ldr	r0, [pc, #80]	; (f1c <system_init+0xe8>)
     eca:	47a8      	blx	r5

	TIMEOUT_init();
	CDCUSB_init();
     ecc:	4b14      	ldr	r3, [pc, #80]	; (f20 <system_init+0xec>)
     ece:	4798      	blx	r3
	CAN_Compressor_init();
     ed0:	4b14      	ldr	r3, [pc, #80]	; (f24 <system_init+0xf0>)
     ed2:	4798      	blx	r3
     ed4:	bd38      	pop	{r3, r4, r5, pc}
     ed6:	bf00      	nop
     ed8:	00001ac9 	.word	0x00001ac9
     edc:	41008000 	.word	0x41008000
     ee0:	c0008000 	.word	0xc0008000
     ee4:	c0000004 	.word	0xc0000004
     ee8:	00000911 	.word	0x00000911
     eec:	40000800 	.word	0x40000800
     ef0:	00001f19 	.word	0x00001f19
     ef4:	40002400 	.word	0x40002400
     ef8:	200009c0 	.word	0x200009c0
     efc:	00001245 	.word	0x00001245
     f00:	00000a09 	.word	0x00000a09
     f04:	00000b01 	.word	0x00000b01
     f08:	00000bad 	.word	0x00000bad
     f0c:	00000cc1 	.word	0x00000cc1
     f10:	40001c00 	.word	0x40001c00
     f14:	00002be9 	.word	0x00002be9
     f18:	40003800 	.word	0x40003800
     f1c:	200009e0 	.word	0x200009e0
     f20:	00000d95 	.word	0x00000d95
     f24:	00000df9 	.word	0x00000df9

00000f28 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     f28:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     f2a:	69c3      	ldr	r3, [r0, #28]
     f2c:	b103      	cbz	r3, f30 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
     f2e:	4798      	blx	r3
     f30:	bd08      	pop	{r3, pc}

00000f32 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     f32:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     f34:	6a03      	ldr	r3, [r0, #32]
     f36:	b103      	cbz	r3, f3a <can_rx_done+0x8>
		descr->cb.rx_done(descr);
     f38:	4798      	blx	r3
     f3a:	bd08      	pop	{r3, pc}

00000f3c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     f3c:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     f3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f40:	b103      	cbz	r3, f44 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
     f42:	4798      	blx	r3
     f44:	bd08      	pop	{r3, pc}
	...

00000f48 <can_async_init>:
{
     f48:	b538      	push	{r3, r4, r5, lr}
     f4a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     f4c:	4604      	mov	r4, r0
     f4e:	b1a0      	cbz	r0, f7a <can_async_init+0x32>
     f50:	1c08      	adds	r0, r1, #0
     f52:	bf18      	it	ne
     f54:	2001      	movne	r0, #1
     f56:	2241      	movs	r2, #65	; 0x41
     f58:	4909      	ldr	r1, [pc, #36]	; (f80 <can_async_init+0x38>)
     f5a:	4b0a      	ldr	r3, [pc, #40]	; (f84 <can_async_init+0x3c>)
     f5c:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     f5e:	4629      	mov	r1, r5
     f60:	4620      	mov	r0, r4
     f62:	4b09      	ldr	r3, [pc, #36]	; (f88 <can_async_init+0x40>)
     f64:	4798      	blx	r3
	if (rc) {
     f66:	4603      	mov	r3, r0
     f68:	b928      	cbnz	r0, f76 <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
     f6a:	4a08      	ldr	r2, [pc, #32]	; (f8c <can_async_init+0x44>)
     f6c:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     f6e:	4a08      	ldr	r2, [pc, #32]	; (f90 <can_async_init+0x48>)
     f70:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     f72:	4a08      	ldr	r2, [pc, #32]	; (f94 <can_async_init+0x4c>)
     f74:	60e2      	str	r2, [r4, #12]
}
     f76:	4618      	mov	r0, r3
     f78:	bd38      	pop	{r3, r4, r5, pc}
     f7a:	2000      	movs	r0, #0
     f7c:	e7eb      	b.n	f56 <can_async_init+0xe>
     f7e:	bf00      	nop
     f80:	00005a50 	.word	0x00005a50
     f84:	00001859 	.word	0x00001859
     f88:	00001901 	.word	0x00001901
     f8c:	00000f29 	.word	0x00000f29
     f90:	00000f33 	.word	0x00000f33
     f94:	00000f3d 	.word	0x00000f3d

00000f98 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     f98:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     f9a:	4b04      	ldr	r3, [pc, #16]	; (fac <delay_ms+0x14>)
     f9c:	681c      	ldr	r4, [r3, #0]
     f9e:	4b04      	ldr	r3, [pc, #16]	; (fb0 <delay_ms+0x18>)
     fa0:	4798      	blx	r3
     fa2:	4601      	mov	r1, r0
     fa4:	4620      	mov	r0, r4
     fa6:	4b03      	ldr	r3, [pc, #12]	; (fb4 <delay_ms+0x1c>)
     fa8:	4798      	blx	r3
     faa:	bd10      	pop	{r4, pc}
     fac:	200005ec 	.word	0x200005ec
     fb0:	00001aa5 	.word	0x00001aa5
     fb4:	00001ac1 	.word	0x00001ac1

00000fb8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     fb8:	b508      	push	{r3, lr}
	return _event_system_init();
     fba:	4b01      	ldr	r3, [pc, #4]	; (fc0 <event_system_init+0x8>)
     fbc:	4798      	blx	r3
}
     fbe:	bd08      	pop	{r3, pc}
     fc0:	00001b31 	.word	0x00001b31

00000fc4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     fc4:	b510      	push	{r4, lr}
     fc6:	b084      	sub	sp, #16
     fc8:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     fca:	8903      	ldrh	r3, [r0, #8]
     fcc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     fd0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     fd6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     fda:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     fdc:	a901      	add	r1, sp, #4
     fde:	3814      	subs	r0, #20
     fe0:	4b03      	ldr	r3, [pc, #12]	; (ff0 <i2c_m_sync_write+0x2c>)
     fe2:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
     fe4:	2800      	cmp	r0, #0
     fe6:	bf08      	it	eq
     fe8:	4620      	moveq	r0, r4
     fea:	b004      	add	sp, #16
     fec:	bd10      	pop	{r4, pc}
     fee:	bf00      	nop
     ff0:	000020c5 	.word	0x000020c5

00000ff4 <i2c_m_sync_read>:
{
     ff4:	b510      	push	{r4, lr}
     ff6:	b084      	sub	sp, #16
     ff8:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
     ffa:	8903      	ldrh	r3, [r0, #8]
     ffc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1000:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1002:	f248 0301 	movw	r3, #32769	; 0x8001
    1006:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    100a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    100c:	a901      	add	r1, sp, #4
    100e:	3814      	subs	r0, #20
    1010:	4b03      	ldr	r3, [pc, #12]	; (1020 <i2c_m_sync_read+0x2c>)
    1012:	4798      	blx	r3
}
    1014:	2800      	cmp	r0, #0
    1016:	bf08      	it	eq
    1018:	4620      	moveq	r0, r4
    101a:	b004      	add	sp, #16
    101c:	bd10      	pop	{r4, pc}
    101e:	bf00      	nop
    1020:	000020c5 	.word	0x000020c5

00001024 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1024:	b538      	push	{r3, r4, r5, lr}
    1026:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1028:	4604      	mov	r4, r0
    102a:	225e      	movs	r2, #94	; 0x5e
    102c:	4908      	ldr	r1, [pc, #32]	; (1050 <i2c_m_sync_init+0x2c>)
    102e:	3000      	adds	r0, #0
    1030:	bf18      	it	ne
    1032:	2001      	movne	r0, #1
    1034:	4b07      	ldr	r3, [pc, #28]	; (1054 <i2c_m_sync_init+0x30>)
    1036:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1038:	4629      	mov	r1, r5
    103a:	4620      	mov	r0, r4
    103c:	4b06      	ldr	r3, [pc, #24]	; (1058 <i2c_m_sync_init+0x34>)
    103e:	4798      	blx	r3
	if (init_status) {
    1040:	4603      	mov	r3, r0
    1042:	b918      	cbnz	r0, 104c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1044:	4a05      	ldr	r2, [pc, #20]	; (105c <i2c_m_sync_init+0x38>)
    1046:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    1048:	4a05      	ldr	r2, [pc, #20]	; (1060 <i2c_m_sync_init+0x3c>)
    104a:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    104c:	4618      	mov	r0, r3
    104e:	bd38      	pop	{r3, r4, r5, pc}
    1050:	00005a6c 	.word	0x00005a6c
    1054:	00001859 	.word	0x00001859
    1058:	00002095 	.word	0x00002095
    105c:	00000ff5 	.word	0x00000ff5
    1060:	00000fc5 	.word	0x00000fc5

00001064 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1064:	b538      	push	{r3, r4, r5, lr}
    1066:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    1068:	4604      	mov	r4, r0
    106a:	b1b8      	cbz	r0, 109c <spi_m_sync_init+0x38>
    106c:	1c08      	adds	r0, r1, #0
    106e:	bf18      	it	ne
    1070:	2001      	movne	r0, #1
    1072:	2240      	movs	r2, #64	; 0x40
    1074:	490a      	ldr	r1, [pc, #40]	; (10a0 <spi_m_sync_init+0x3c>)
    1076:	4b0b      	ldr	r3, [pc, #44]	; (10a4 <spi_m_sync_init+0x40>)
    1078:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    107a:	4620      	mov	r0, r4
    107c:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1080:	4629      	mov	r1, r5
    1082:	4b09      	ldr	r3, [pc, #36]	; (10a8 <spi_m_sync_init+0x44>)
    1084:	4798      	blx	r3

	if (rc < 0) {
    1086:	2800      	cmp	r0, #0
    1088:	db07      	blt.n	109a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    108a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    108e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1090:	4b06      	ldr	r3, [pc, #24]	; (10ac <spi_m_sync_init+0x48>)
    1092:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1094:	4b06      	ldr	r3, [pc, #24]	; (10b0 <spi_m_sync_init+0x4c>)
    1096:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1098:	2000      	movs	r0, #0
}
    109a:	bd38      	pop	{r3, r4, r5, pc}
    109c:	2000      	movs	r0, #0
    109e:	e7e8      	b.n	1072 <spi_m_sync_init+0xe>
    10a0:	00005a88 	.word	0x00005a88
    10a4:	00001859 	.word	0x00001859
    10a8:	000025e1 	.word	0x000025e1
    10ac:	00001131 	.word	0x00001131
    10b0:	000010f5 	.word	0x000010f5

000010b4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    10b4:	b530      	push	{r4, r5, lr}
    10b6:	b085      	sub	sp, #20
    10b8:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    10ba:	4605      	mov	r5, r0
    10bc:	b190      	cbz	r0, 10e4 <spi_m_sync_transfer+0x30>
    10be:	1c08      	adds	r0, r1, #0
    10c0:	bf18      	it	ne
    10c2:	2001      	movne	r0, #1
    10c4:	22b3      	movs	r2, #179	; 0xb3
    10c6:	4908      	ldr	r1, [pc, #32]	; (10e8 <spi_m_sync_transfer+0x34>)
    10c8:	4b08      	ldr	r3, [pc, #32]	; (10ec <spi_m_sync_transfer+0x38>)
    10ca:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    10cc:	6823      	ldr	r3, [r4, #0]
    10ce:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    10d0:	6863      	ldr	r3, [r4, #4]
    10d2:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    10d4:	68a3      	ldr	r3, [r4, #8]
    10d6:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    10d8:	a901      	add	r1, sp, #4
    10da:	1d28      	adds	r0, r5, #4
    10dc:	4b04      	ldr	r3, [pc, #16]	; (10f0 <spi_m_sync_transfer+0x3c>)
    10de:	4798      	blx	r3
}
    10e0:	b005      	add	sp, #20
    10e2:	bd30      	pop	{r4, r5, pc}
    10e4:	2000      	movs	r0, #0
    10e6:	e7ed      	b.n	10c4 <spi_m_sync_transfer+0x10>
    10e8:	00005a88 	.word	0x00005a88
    10ec:	00001859 	.word	0x00001859
    10f0:	00002779 	.word	0x00002779

000010f4 <_spi_m_sync_io_write>:
{
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	b084      	sub	sp, #16
    10f8:	460e      	mov	r6, r1
    10fa:	4615      	mov	r5, r2
	ASSERT(io);
    10fc:	4604      	mov	r4, r0
    10fe:	22a3      	movs	r2, #163	; 0xa3
    1100:	4908      	ldr	r1, [pc, #32]	; (1124 <_spi_m_sync_io_write+0x30>)
    1102:	3000      	adds	r0, #0
    1104:	bf18      	it	ne
    1106:	2001      	movne	r0, #1
    1108:	4b07      	ldr	r3, [pc, #28]	; (1128 <_spi_m_sync_io_write+0x34>)
    110a:	4798      	blx	r3
	xfer.rxbuf = 0;
    110c:	2300      	movs	r3, #0
    110e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1110:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1112:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1114:	a901      	add	r1, sp, #4
    1116:	f1a4 000c 	sub.w	r0, r4, #12
    111a:	4b04      	ldr	r3, [pc, #16]	; (112c <_spi_m_sync_io_write+0x38>)
    111c:	4798      	blx	r3
}
    111e:	b004      	add	sp, #16
    1120:	bd70      	pop	{r4, r5, r6, pc}
    1122:	bf00      	nop
    1124:	00005a88 	.word	0x00005a88
    1128:	00001859 	.word	0x00001859
    112c:	000010b5 	.word	0x000010b5

00001130 <_spi_m_sync_io_read>:
{
    1130:	b570      	push	{r4, r5, r6, lr}
    1132:	b084      	sub	sp, #16
    1134:	460e      	mov	r6, r1
    1136:	4615      	mov	r5, r2
	ASSERT(io);
    1138:	4604      	mov	r4, r0
    113a:	2287      	movs	r2, #135	; 0x87
    113c:	4908      	ldr	r1, [pc, #32]	; (1160 <_spi_m_sync_io_read+0x30>)
    113e:	3000      	adds	r0, #0
    1140:	bf18      	it	ne
    1142:	2001      	movne	r0, #1
    1144:	4b07      	ldr	r3, [pc, #28]	; (1164 <_spi_m_sync_io_read+0x34>)
    1146:	4798      	blx	r3
	xfer.rxbuf = buf;
    1148:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    114a:	2300      	movs	r3, #0
    114c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    114e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1150:	a901      	add	r1, sp, #4
    1152:	f1a4 000c 	sub.w	r0, r4, #12
    1156:	4b04      	ldr	r3, [pc, #16]	; (1168 <_spi_m_sync_io_read+0x38>)
    1158:	4798      	blx	r3
}
    115a:	b004      	add	sp, #16
    115c:	bd70      	pop	{r4, r5, r6, pc}
    115e:	bf00      	nop
    1160:	00005a88 	.word	0x00005a88
    1164:	00001859 	.word	0x00001859
    1168:	000010b5 	.word	0x000010b5

0000116c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    116e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1170:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1172:	b12f      	cbz	r7, 1180 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1174:	688d      	ldr	r5, [r1, #8]
    1176:	463c      	mov	r4, r7
    1178:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    117a:	f1c2 0e01 	rsb	lr, r2, #1
    117e:	e00b      	b.n	1198 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1180:	4b0e      	ldr	r3, [pc, #56]	; (11bc <timer_add_timer_task+0x50>)
    1182:	4798      	blx	r3
		return;
    1184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1186:	4473      	add	r3, lr
    1188:	68a0      	ldr	r0, [r4, #8]
    118a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    118c:	42ab      	cmp	r3, r5
    118e:	d20a      	bcs.n	11a6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1190:	6823      	ldr	r3, [r4, #0]
    1192:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1194:	b153      	cbz	r3, 11ac <timer_add_timer_task+0x40>
    1196:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1198:	6863      	ldr	r3, [r4, #4]
    119a:	4293      	cmp	r3, r2
    119c:	d8f3      	bhi.n	1186 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    119e:	68a0      	ldr	r0, [r4, #8]
    11a0:	4403      	add	r3, r0
    11a2:	1a9b      	subs	r3, r3, r2
    11a4:	e7f2      	b.n	118c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    11a6:	42a7      	cmp	r7, r4
    11a8:	d004      	beq.n	11b4 <timer_add_timer_task+0x48>
    11aa:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    11ac:	4620      	mov	r0, r4
    11ae:	4b04      	ldr	r3, [pc, #16]	; (11c0 <timer_add_timer_task+0x54>)
    11b0:	4798      	blx	r3
    11b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    11b4:	4660      	mov	r0, ip
    11b6:	4b01      	ldr	r3, [pc, #4]	; (11bc <timer_add_timer_task+0x50>)
    11b8:	4798      	blx	r3
    11ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11bc:	00001881 	.word	0x00001881
    11c0:	000018ad 	.word	0x000018ad

000011c4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    11c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    11c8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    11ca:	6907      	ldr	r7, [r0, #16]
    11cc:	3701      	adds	r7, #1
    11ce:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    11d0:	7e03      	ldrb	r3, [r0, #24]
    11d2:	f013 0f01 	tst.w	r3, #1
    11d6:	d113      	bne.n	1200 <timer_process_counted+0x3c>
    11d8:	7e03      	ldrb	r3, [r0, #24]
    11da:	f013 0f02 	tst.w	r3, #2
    11de:	d10f      	bne.n	1200 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    11e0:	b354      	cbz	r4, 1238 <timer_process_counted+0x74>
    11e2:	6863      	ldr	r3, [r4, #4]
    11e4:	1afb      	subs	r3, r7, r3
    11e6:	68a2      	ldr	r2, [r4, #8]
    11e8:	4293      	cmp	r3, r2
    11ea:	d307      	bcc.n	11fc <timer_process_counted+0x38>
    11ec:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    11ee:	f100 0814 	add.w	r8, r0, #20
    11f2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 123c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    11f6:	f8df a048 	ldr.w	sl, [pc, #72]	; 1240 <timer_process_counted+0x7c>
    11fa:	e012      	b.n	1222 <timer_process_counted+0x5e>
    11fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1200:	7e03      	ldrb	r3, [r0, #24]
    1202:	f043 0302 	orr.w	r3, r3, #2
    1206:	7603      	strb	r3, [r0, #24]
		return;
    1208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    120c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    120e:	68e3      	ldr	r3, [r4, #12]
    1210:	4620      	mov	r0, r4
    1212:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1214:	b185      	cbz	r5, 1238 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1216:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1218:	686b      	ldr	r3, [r5, #4]
    121a:	1afb      	subs	r3, r7, r3
    121c:	68aa      	ldr	r2, [r5, #8]
    121e:	4293      	cmp	r3, r2
    1220:	d30a      	bcc.n	1238 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1222:	4640      	mov	r0, r8
    1224:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1226:	7c23      	ldrb	r3, [r4, #16]
    1228:	2b01      	cmp	r3, #1
    122a:	d1ef      	bne.n	120c <timer_process_counted+0x48>
			tmp->time_label = time;
    122c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    122e:	463a      	mov	r2, r7
    1230:	4621      	mov	r1, r4
    1232:	4640      	mov	r0, r8
    1234:	47d0      	blx	sl
    1236:	e7e9      	b.n	120c <timer_process_counted+0x48>
    1238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    123c:	000018f5 	.word	0x000018f5
    1240:	0000116d 	.word	0x0000116d

00001244 <timer_init>:
{
    1244:	b570      	push	{r4, r5, r6, lr}
    1246:	460e      	mov	r6, r1
    1248:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    124a:	4604      	mov	r4, r0
    124c:	b190      	cbz	r0, 1274 <timer_init+0x30>
    124e:	b199      	cbz	r1, 1278 <timer_init+0x34>
    1250:	1c10      	adds	r0, r2, #0
    1252:	bf18      	it	ne
    1254:	2001      	movne	r0, #1
    1256:	223b      	movs	r2, #59	; 0x3b
    1258:	4908      	ldr	r1, [pc, #32]	; (127c <timer_init+0x38>)
    125a:	4b09      	ldr	r3, [pc, #36]	; (1280 <timer_init+0x3c>)
    125c:	4798      	blx	r3
	descr->func = func;
    125e:	4620      	mov	r0, r4
    1260:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1264:	682b      	ldr	r3, [r5, #0]
    1266:	4631      	mov	r1, r6
    1268:	4798      	blx	r3
	descr->time                           = 0;
    126a:	2000      	movs	r0, #0
    126c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    126e:	4b05      	ldr	r3, [pc, #20]	; (1284 <timer_init+0x40>)
    1270:	6063      	str	r3, [r4, #4]
}
    1272:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1274:	2000      	movs	r0, #0
    1276:	e7ee      	b.n	1256 <timer_init+0x12>
    1278:	2000      	movs	r0, #0
    127a:	e7ec      	b.n	1256 <timer_init+0x12>
    127c:	00005aa4 	.word	0x00005aa4
    1280:	00001859 	.word	0x00001859
    1284:	000011c5 	.word	0x000011c5

00001288 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1288:	4b0f      	ldr	r3, [pc, #60]	; (12c8 <_usb_d_find_ep+0x40>)
    128a:	7859      	ldrb	r1, [r3, #1]
    128c:	4288      	cmp	r0, r1
    128e:	d018      	beq.n	12c2 <_usb_d_find_ep+0x3a>
{
    1290:	b430      	push	{r4, r5}
    1292:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1294:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1296:	f000 050f 	and.w	r5, r0, #15
    129a:	e007      	b.n	12ac <_usb_d_find_ep+0x24>
    129c:	3301      	adds	r3, #1
    129e:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    12a0:	2b04      	cmp	r3, #4
    12a2:	d009      	beq.n	12b8 <_usb_d_find_ep+0x30>
    12a4:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    12a6:	7851      	ldrb	r1, [r2, #1]
    12a8:	4281      	cmp	r1, r0
    12aa:	d007      	beq.n	12bc <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    12ac:	7814      	ldrb	r4, [r2, #0]
    12ae:	2c00      	cmp	r4, #0
    12b0:	d1f4      	bne.n	129c <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    12b2:	428d      	cmp	r5, r1
    12b4:	d1f2      	bne.n	129c <_usb_d_find_ep+0x14>
    12b6:	e001      	b.n	12bc <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    12b8:	f04f 33ff 	mov.w	r3, #4294967295
}
    12bc:	4618      	mov	r0, r3
    12be:	bc30      	pop	{r4, r5}
    12c0:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    12c2:	2300      	movs	r3, #0
}
    12c4:	4618      	mov	r0, r3
    12c6:	4770      	bx	lr
    12c8:	200005f0 	.word	0x200005f0

000012cc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    12cc:	2000      	movs	r0, #0
    12ce:	4770      	bx	lr

000012d0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    12d0:	b538      	push	{r3, r4, r5, lr}
    12d2:	4604      	mov	r4, r0
    12d4:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    12d6:	4b09      	ldr	r3, [pc, #36]	; (12fc <usb_d_cb_trans_more+0x2c>)
    12d8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    12da:	4b09      	ldr	r3, [pc, #36]	; (1300 <usb_d_cb_trans_more+0x30>)
    12dc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    12e0:	789b      	ldrb	r3, [r3, #2]
    12e2:	2b03      	cmp	r3, #3
    12e4:	d001      	beq.n	12ea <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    12e6:	2000      	movs	r0, #0
}
    12e8:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    12ea:	4b05      	ldr	r3, [pc, #20]	; (1300 <usb_d_cb_trans_more+0x30>)
    12ec:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    12f0:	6983      	ldr	r3, [r0, #24]
    12f2:	4629      	mov	r1, r5
    12f4:	4620      	mov	r0, r4
    12f6:	4798      	blx	r3
    12f8:	bd38      	pop	{r3, r4, r5, pc}
    12fa:	bf00      	nop
    12fc:	00001289 	.word	0x00001289
    1300:	200005f0 	.word	0x200005f0

00001304 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1304:	b5f0      	push	{r4, r5, r6, r7, lr}
    1306:	b085      	sub	sp, #20
    1308:	4606      	mov	r6, r0
    130a:	460d      	mov	r5, r1
    130c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    130e:	4b4d      	ldr	r3, [pc, #308]	; (1444 <_usb_d_cb_trans_done+0x140>)
    1310:	4798      	blx	r3
    1312:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1314:	2d00      	cmp	r5, #0
    1316:	d15b      	bne.n	13d0 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1318:	4a4b      	ldr	r2, [pc, #300]	; (1448 <_usb_d_cb_trans_done+0x144>)
    131a:	0143      	lsls	r3, r0, #5
    131c:	18d1      	adds	r1, r2, r3
    131e:	2000      	movs	r0, #0
    1320:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1322:	5cd3      	ldrb	r3, [r2, r3]
    1324:	b173      	cbz	r3, 1344 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1326:	4b48      	ldr	r3, [pc, #288]	; (1448 <_usb_d_cb_trans_done+0x144>)
    1328:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    132c:	2201      	movs	r2, #1
    132e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1330:	4845      	ldr	r0, [pc, #276]	; (1448 <_usb_d_cb_trans_done+0x144>)
    1332:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1336:	69c3      	ldr	r3, [r0, #28]
    1338:	463a      	mov	r2, r7
    133a:	78c1      	ldrb	r1, [r0, #3]
    133c:	4630      	mov	r0, r6
    133e:	4798      	blx	r3
}
    1340:	b005      	add	sp, #20
    1342:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1344:	788b      	ldrb	r3, [r1, #2]
    1346:	2b03      	cmp	r3, #3
    1348:	d00b      	beq.n	1362 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    134a:	483f      	ldr	r0, [pc, #252]	; (1448 <_usb_d_cb_trans_done+0x144>)
    134c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1350:	4614      	mov	r4, r2
    1352:	69d3      	ldr	r3, [r2, #28]
    1354:	320c      	adds	r2, #12
    1356:	2100      	movs	r1, #0
    1358:	7860      	ldrb	r0, [r4, #1]
    135a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    135c:	2302      	movs	r3, #2
    135e:	70a3      	strb	r3, [r4, #2]
    1360:	e7ee      	b.n	1340 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1362:	460b      	mov	r3, r1
    1364:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1368:	460a      	mov	r2, r1
    136a:	69ce      	ldr	r6, [r1, #28]
    136c:	320c      	adds	r2, #12
    136e:	2101      	movs	r1, #1
    1370:	7858      	ldrb	r0, [r3, #1]
    1372:	47b0      	blx	r6
		if (err) {
    1374:	b1a0      	cbz	r0, 13a0 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1376:	4b34      	ldr	r3, [pc, #208]	; (1448 <_usb_d_cb_trans_done+0x144>)
    1378:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    137c:	2205      	movs	r2, #5
    137e:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1380:	2202      	movs	r2, #2
    1382:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1384:	2d00      	cmp	r5, #0
    1386:	db09      	blt.n	139c <_usb_d_cb_trans_done+0x98>
    1388:	482f      	ldr	r0, [pc, #188]	; (1448 <_usb_d_cb_trans_done+0x144>)
    138a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    138e:	7840      	ldrb	r0, [r0, #1]
    1390:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1394:	2101      	movs	r1, #1
    1396:	4b2d      	ldr	r3, [pc, #180]	; (144c <_usb_d_cb_trans_done+0x148>)
    1398:	4798      	blx	r3
    139a:	e7d1      	b.n	1340 <_usb_d_cb_trans_done+0x3c>
    139c:	7858      	ldrb	r0, [r3, #1]
    139e:	e7f9      	b.n	1394 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    13a0:	4829      	ldr	r0, [pc, #164]	; (1448 <_usb_d_cb_trans_done+0x144>)
    13a2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    13a6:	2304      	movs	r3, #4
    13a8:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    13aa:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    13ac:	2200      	movs	r2, #0
    13ae:	9201      	str	r2, [sp, #4]
    13b0:	9202      	str	r2, [sp, #8]
    13b2:	4295      	cmp	r5, r2
    13b4:	bfac      	ite	ge
    13b6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    13ba:	f003 030f 	andlt.w	r3, r3, #15
    13be:	f88d 300c 	strb.w	r3, [sp, #12]
    13c2:	2301      	movs	r3, #1
    13c4:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    13c8:	a801      	add	r0, sp, #4
    13ca:	4b21      	ldr	r3, [pc, #132]	; (1450 <_usb_d_cb_trans_done+0x14c>)
    13cc:	4798      	blx	r3
    13ce:	e7b7      	b.n	1340 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    13d0:	2d01      	cmp	r5, #1
    13d2:	d00a      	beq.n	13ea <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    13d4:	2d02      	cmp	r5, #2
    13d6:	d01c      	beq.n	1412 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    13d8:	2d03      	cmp	r5, #3
    13da:	d02a      	beq.n	1432 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    13dc:	4b1a      	ldr	r3, [pc, #104]	; (1448 <_usb_d_cb_trans_done+0x144>)
    13de:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    13e2:	2206      	movs	r2, #6
    13e4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    13e6:	70da      	strb	r2, [r3, #3]
    13e8:	e7a2      	b.n	1330 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    13ea:	4a17      	ldr	r2, [pc, #92]	; (1448 <_usb_d_cb_trans_done+0x144>)
    13ec:	0143      	lsls	r3, r0, #5
    13ee:	18d1      	adds	r1, r2, r3
    13f0:	2002      	movs	r0, #2
    13f2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    13f4:	5cd3      	ldrb	r3, [r2, r3]
    13f6:	b12b      	cbz	r3, 1404 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    13f8:	4b13      	ldr	r3, [pc, #76]	; (1448 <_usb_d_cb_trans_done+0x144>)
    13fa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    13fe:	2205      	movs	r2, #5
    1400:	709a      	strb	r2, [r3, #2]
    1402:	e795      	b.n	1330 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1404:	460b      	mov	r3, r1
    1406:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1408:	2100      	movs	r1, #0
    140a:	4630      	mov	r0, r6
    140c:	4b0f      	ldr	r3, [pc, #60]	; (144c <_usb_d_cb_trans_done+0x148>)
    140e:	4798      	blx	r3
    1410:	e78e      	b.n	1330 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1412:	4a0d      	ldr	r2, [pc, #52]	; (1448 <_usb_d_cb_trans_done+0x144>)
    1414:	0143      	lsls	r3, r0, #5
    1416:	18d1      	adds	r1, r2, r3
    1418:	2004      	movs	r0, #4
    141a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    141c:	5cd3      	ldrb	r3, [r2, r3]
    141e:	b12b      	cbz	r3, 142c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1420:	4b09      	ldr	r3, [pc, #36]	; (1448 <_usb_d_cb_trans_done+0x144>)
    1422:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1426:	2201      	movs	r2, #1
    1428:	709a      	strb	r2, [r3, #2]
    142a:	e781      	b.n	1330 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    142c:	2302      	movs	r3, #2
    142e:	708b      	strb	r3, [r1, #2]
			return;
    1430:	e786      	b.n	1340 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1432:	4b05      	ldr	r3, [pc, #20]	; (1448 <_usb_d_cb_trans_done+0x144>)
    1434:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1438:	2200      	movs	r2, #0
    143a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    143c:	2205      	movs	r2, #5
    143e:	70da      	strb	r2, [r3, #3]
    1440:	e776      	b.n	1330 <_usb_d_cb_trans_done+0x2c>
    1442:	bf00      	nop
    1444:	00001289 	.word	0x00001289
    1448:	200005f0 	.word	0x200005f0
    144c:	00003a91 	.word	0x00003a91
    1450:	00003c39 	.word	0x00003c39

00001454 <usb_d_cb_trans_setup>:
{
    1454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1458:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    145a:	4b1c      	ldr	r3, [pc, #112]	; (14cc <usb_d_cb_trans_setup+0x78>)
    145c:	4798      	blx	r3
    145e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1460:	4c1b      	ldr	r4, [pc, #108]	; (14d0 <usb_d_cb_trans_setup+0x7c>)
    1462:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    1466:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1468:	4621      	mov	r1, r4
    146a:	4628      	mov	r0, r5
    146c:	4b19      	ldr	r3, [pc, #100]	; (14d4 <usb_d_cb_trans_setup+0x80>)
    146e:	4798      	blx	r3
	if (n != 8) {
    1470:	b2c0      	uxtb	r0, r0
    1472:	2808      	cmp	r0, #8
    1474:	d009      	beq.n	148a <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1476:	2101      	movs	r1, #1
    1478:	4628      	mov	r0, r5
    147a:	4c17      	ldr	r4, [pc, #92]	; (14d8 <usb_d_cb_trans_setup+0x84>)
    147c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    147e:	2101      	movs	r1, #1
    1480:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    1484:	47a0      	blx	r4
		return;
    1486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    148a:	2100      	movs	r1, #0
    148c:	4628      	mov	r0, r5
    148e:	4f12      	ldr	r7, [pc, #72]	; (14d8 <usb_d_cb_trans_setup+0x84>)
    1490:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1492:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    1496:	2100      	movs	r1, #0
    1498:	4640      	mov	r0, r8
    149a:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    149c:	4b0c      	ldr	r3, [pc, #48]	; (14d0 <usb_d_cb_trans_setup+0x7c>)
    149e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    14a2:	2201      	movs	r2, #1
    14a4:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    14a6:	695b      	ldr	r3, [r3, #20]
    14a8:	4621      	mov	r1, r4
    14aa:	4628      	mov	r0, r5
    14ac:	4798      	blx	r3
    14ae:	b108      	cbz	r0, 14b4 <usb_d_cb_trans_setup+0x60>
    14b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    14b4:	4b06      	ldr	r3, [pc, #24]	; (14d0 <usb_d_cb_trans_setup+0x7c>)
    14b6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    14ba:	2305      	movs	r3, #5
    14bc:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    14be:	2101      	movs	r1, #1
    14c0:	4628      	mov	r0, r5
    14c2:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    14c4:	2101      	movs	r1, #1
    14c6:	4640      	mov	r0, r8
    14c8:	47b8      	blx	r7
    14ca:	e7f1      	b.n	14b0 <usb_d_cb_trans_setup+0x5c>
    14cc:	00001289 	.word	0x00001289
    14d0:	200005f0 	.word	0x200005f0
    14d4:	00003bd9 	.word	0x00003bd9
    14d8:	00003a91 	.word	0x00003a91

000014dc <usb_d_init>:

int32_t usb_d_init(void)
{
    14dc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    14de:	4b11      	ldr	r3, [pc, #68]	; (1524 <usb_d_init+0x48>)
    14e0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    14e2:	2800      	cmp	r0, #0
    14e4:	db1c      	blt.n	1520 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    14e6:	4c10      	ldr	r4, [pc, #64]	; (1528 <usb_d_init+0x4c>)
    14e8:	2280      	movs	r2, #128	; 0x80
    14ea:	2100      	movs	r1, #0
    14ec:	4620      	mov	r0, r4
    14ee:	4b0f      	ldr	r3, [pc, #60]	; (152c <usb_d_init+0x50>)
    14f0:	4798      	blx	r3
    14f2:	4623      	mov	r3, r4
    14f4:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    14f8:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    14fa:	4a0d      	ldr	r2, [pc, #52]	; (1530 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    14fc:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    14fe:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1500:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1502:	61da      	str	r2, [r3, #28]
    1504:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1506:	4283      	cmp	r3, r0
    1508:	d1f8      	bne.n	14fc <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    150a:	490a      	ldr	r1, [pc, #40]	; (1534 <usb_d_init+0x58>)
    150c:	2000      	movs	r0, #0
    150e:	4c0a      	ldr	r4, [pc, #40]	; (1538 <usb_d_init+0x5c>)
    1510:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1512:	490a      	ldr	r1, [pc, #40]	; (153c <usb_d_init+0x60>)
    1514:	2001      	movs	r0, #1
    1516:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1518:	4909      	ldr	r1, [pc, #36]	; (1540 <usb_d_init+0x64>)
    151a:	2002      	movs	r0, #2
    151c:	47a0      	blx	r4
	return ERR_NONE;
    151e:	2000      	movs	r0, #0
}
    1520:	bd10      	pop	{r4, pc}
    1522:	bf00      	nop
    1524:	00003485 	.word	0x00003485
    1528:	200005f0 	.word	0x200005f0
    152c:	00005751 	.word	0x00005751
    1530:	000012cd 	.word	0x000012cd
    1534:	00001455 	.word	0x00001455
    1538:	00003e79 	.word	0x00003e79
    153c:	000012d1 	.word	0x000012d1
    1540:	00001305 	.word	0x00001305

00001544 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1544:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1546:	4b01      	ldr	r3, [pc, #4]	; (154c <usb_d_register_callback+0x8>)
    1548:	4798      	blx	r3
    154a:	bd08      	pop	{r3, pc}
    154c:	00003e55 	.word	0x00003e55

00001550 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1550:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    1552:	4b01      	ldr	r3, [pc, #4]	; (1558 <usb_d_enable+0x8>)
    1554:	4798      	blx	r3
}
    1556:	bd08      	pop	{r3, pc}
    1558:	00003581 	.word	0x00003581

0000155c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    155c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    155e:	4b01      	ldr	r3, [pc, #4]	; (1564 <usb_d_attach+0x8>)
    1560:	4798      	blx	r3
    1562:	bd08      	pop	{r3, pc}
    1564:	000035ed 	.word	0x000035ed

00001568 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1568:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    156a:	4b01      	ldr	r3, [pc, #4]	; (1570 <usb_d_set_address+0x8>)
    156c:	4798      	blx	r3
    156e:	bd08      	pop	{r3, pc}
    1570:	000035ff 	.word	0x000035ff

00001574 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1576:	4606      	mov	r6, r0
    1578:	460c      	mov	r4, r1
    157a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    157c:	4b0f      	ldr	r3, [pc, #60]	; (15bc <usb_d_ep_init+0x48>)
    157e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1580:	2800      	cmp	r0, #0
    1582:	da14      	bge.n	15ae <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1584:	20ff      	movs	r0, #255	; 0xff
    1586:	4b0d      	ldr	r3, [pc, #52]	; (15bc <usb_d_ep_init+0x48>)
    1588:	4798      	blx	r3
		if (ep_index < 0) {
    158a:	1e05      	subs	r5, r0, #0
    158c:	db12      	blt.n	15b4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    158e:	463a      	mov	r2, r7
    1590:	4621      	mov	r1, r4
    1592:	4630      	mov	r0, r6
    1594:	4b0a      	ldr	r3, [pc, #40]	; (15c0 <usb_d_ep_init+0x4c>)
    1596:	4798      	blx	r3
	if (rc < 0) {
    1598:	2800      	cmp	r0, #0
    159a:	db0d      	blt.n	15b8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    159c:	4b09      	ldr	r3, [pc, #36]	; (15c4 <usb_d_ep_init+0x50>)
    159e:	0168      	lsls	r0, r5, #5
    15a0:	181a      	adds	r2, r3, r0
    15a2:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    15a4:	f004 0403 	and.w	r4, r4, #3
    15a8:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    15aa:	2000      	movs	r0, #0
    15ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    15ae:	f06f 0013 	mvn.w	r0, #19
    15b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    15b4:	f06f 0014 	mvn.w	r0, #20
}
    15b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15ba:	bf00      	nop
    15bc:	00001289 	.word	0x00001289
    15c0:	0000360d 	.word	0x0000360d
    15c4:	200005f0 	.word	0x200005f0

000015c8 <usb_d_ep0_init>:
{
    15c8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    15ca:	4602      	mov	r2, r0
    15cc:	2100      	movs	r1, #0
    15ce:	4608      	mov	r0, r1
    15d0:	4b01      	ldr	r3, [pc, #4]	; (15d8 <usb_d_ep0_init+0x10>)
    15d2:	4798      	blx	r3
}
    15d4:	bd08      	pop	{r3, pc}
    15d6:	bf00      	nop
    15d8:	00001575 	.word	0x00001575

000015dc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    15dc:	b538      	push	{r3, r4, r5, lr}
    15de:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    15e0:	4b06      	ldr	r3, [pc, #24]	; (15fc <usb_d_ep_deinit+0x20>)
    15e2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    15e4:	1e04      	subs	r4, r0, #0
    15e6:	db07      	blt.n	15f8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    15e8:	4628      	mov	r0, r5
    15ea:	4b05      	ldr	r3, [pc, #20]	; (1600 <usb_d_ep_deinit+0x24>)
    15ec:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    15ee:	4805      	ldr	r0, [pc, #20]	; (1604 <usb_d_ep_deinit+0x28>)
    15f0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    15f4:	23ff      	movs	r3, #255	; 0xff
    15f6:	7043      	strb	r3, [r0, #1]
    15f8:	bd38      	pop	{r3, r4, r5, pc}
    15fa:	bf00      	nop
    15fc:	00001289 	.word	0x00001289
    1600:	00003725 	.word	0x00003725
    1604:	200005f0 	.word	0x200005f0

00001608 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1608:	b538      	push	{r3, r4, r5, lr}
    160a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    160c:	4b0e      	ldr	r3, [pc, #56]	; (1648 <usb_d_ep_enable+0x40>)
    160e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1610:	1e04      	subs	r4, r0, #0
    1612:	db16      	blt.n	1642 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1614:	0163      	lsls	r3, r4, #5
    1616:	4a0d      	ldr	r2, [pc, #52]	; (164c <usb_d_ep_enable+0x44>)
    1618:	5cd3      	ldrb	r3, [r2, r3]
    161a:	2b00      	cmp	r3, #0
    161c:	bf0c      	ite	eq
    161e:	2202      	moveq	r2, #2
    1620:	2201      	movne	r2, #1
    1622:	4b0a      	ldr	r3, [pc, #40]	; (164c <usb_d_ep_enable+0x44>)
    1624:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1628:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    162a:	4628      	mov	r0, r5
    162c:	4b08      	ldr	r3, [pc, #32]	; (1650 <usb_d_ep_enable+0x48>)
    162e:	4798      	blx	r3
	if (rc < 0) {
    1630:	2800      	cmp	r0, #0
    1632:	db00      	blt.n	1636 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1634:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <usb_d_ep_enable+0x44>)
    1638:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    163c:	2300      	movs	r3, #0
    163e:	70a3      	strb	r3, [r4, #2]
    1640:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1642:	f06f 0011 	mvn.w	r0, #17
    1646:	e7f5      	b.n	1634 <usb_d_ep_enable+0x2c>
    1648:	00001289 	.word	0x00001289
    164c:	200005f0 	.word	0x200005f0
    1650:	000037e9 	.word	0x000037e9

00001654 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1658:	b086      	sub	sp, #24
    165a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    165c:	7a07      	ldrb	r7, [r0, #8]
    165e:	4638      	mov	r0, r7
    1660:	4b3f      	ldr	r3, [pc, #252]	; (1760 <usb_d_ep_transfer+0x10c>)
    1662:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1664:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    1666:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    166a:	1e06      	subs	r6, r0, #0
    166c:	db72      	blt.n	1754 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    166e:	a804      	add	r0, sp, #16
    1670:	4b3c      	ldr	r3, [pc, #240]	; (1764 <usb_d_ep_transfer+0x110>)
    1672:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1674:	4b3c      	ldr	r3, [pc, #240]	; (1768 <usb_d_ep_transfer+0x114>)
    1676:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    167a:	789b      	ldrb	r3, [r3, #2]
    167c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    1680:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1684:	b2db      	uxtb	r3, r3
    1686:	2b01      	cmp	r3, #1
    1688:	d011      	beq.n	16ae <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    168a:	a804      	add	r0, sp, #16
    168c:	4b37      	ldr	r3, [pc, #220]	; (176c <usb_d_ep_transfer+0x118>)
    168e:	4798      	blx	r3
		switch (state) {
    1690:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1694:	b2db      	uxtb	r3, r3
    1696:	2b05      	cmp	r3, #5
    1698:	d05f      	beq.n	175a <usb_d_ep_transfer+0x106>
    169a:	2b06      	cmp	r3, #6
    169c:	d023      	beq.n	16e6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    169e:	2b00      	cmp	r3, #0
    16a0:	bf0c      	ite	eq
    16a2:	f06f 0012 	mvneq.w	r0, #18
    16a6:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    16a8:	b006      	add	sp, #24
    16aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    16ae:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1768 <usb_d_ep_transfer+0x114>
    16b2:	ea4f 1946 	mov.w	r9, r6, lsl #5
    16b6:	eb0a 0309 	add.w	r3, sl, r9
    16ba:	2203      	movs	r2, #3
    16bc:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    16be:	a804      	add	r0, sp, #16
    16c0:	4b2a      	ldr	r3, [pc, #168]	; (176c <usb_d_ep_transfer+0x118>)
    16c2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    16c4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    16c8:	b183      	cbz	r3, 16ec <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    16ca:	7a22      	ldrb	r2, [r4, #8]
    16cc:	3500      	adds	r5, #0
    16ce:	bf18      	it	ne
    16d0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    16d2:	6823      	ldr	r3, [r4, #0]
    16d4:	9301      	str	r3, [sp, #4]
    16d6:	f8cd 8008 	str.w	r8, [sp, #8]
    16da:	f017 0f80 	tst.w	r7, #128	; 0x80
    16de:	d119      	bne.n	1714 <usb_d_ep_transfer+0xc0>
    16e0:	f002 030f 	and.w	r3, r2, #15
    16e4:	e018      	b.n	1718 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    16e6:	f06f 000f 	mvn.w	r0, #15
    16ea:	e7dd      	b.n	16a8 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    16ec:	4b1e      	ldr	r3, [pc, #120]	; (1768 <usb_d_ep_transfer+0x114>)
    16ee:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    16f2:	7cda      	ldrb	r2, [r3, #19]
    16f4:	7c9d      	ldrb	r5, [r3, #18]
    16f6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    16fa:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    16fc:	b9a5      	cbnz	r5, 1728 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    16fe:	4b1a      	ldr	r3, [pc, #104]	; (1768 <usb_d_ep_transfer+0x114>)
    1700:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1704:	2304      	movs	r3, #4
    1706:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1708:	2300      	movs	r3, #0
			zlp                 = true;
    170a:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    170c:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    170e:	6821      	ldr	r1, [r4, #0]
    1710:	9101      	str	r1, [sp, #4]
    1712:	9302      	str	r3, [sp, #8]
    1714:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1718:	f88d 300c 	strb.w	r3, [sp, #12]
    171c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1720:	a801      	add	r0, sp, #4
    1722:	4b13      	ldr	r3, [pc, #76]	; (1770 <usb_d_ep_transfer+0x11c>)
    1724:	4798      	blx	r3
	return rc;
    1726:	e7bf      	b.n	16a8 <usb_d_ep_transfer+0x54>
    1728:	4643      	mov	r3, r8
    172a:	45a8      	cmp	r8, r5
    172c:	bf28      	it	cs
    172e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1730:	4a0d      	ldr	r2, [pc, #52]	; (1768 <usb_d_ep_transfer+0x114>)
    1732:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1736:	f996 200c 	ldrsb.w	r2, [r6, #12]
    173a:	2a00      	cmp	r2, #0
    173c:	db05      	blt.n	174a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    173e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1740:	6821      	ldr	r1, [r4, #0]
    1742:	9101      	str	r1, [sp, #4]
    1744:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1746:	2500      	movs	r5, #0
    1748:	e7ca      	b.n	16e0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    174a:	429d      	cmp	r5, r3
    174c:	bf94      	ite	ls
    174e:	2500      	movls	r5, #0
    1750:	2501      	movhi	r5, #1
    1752:	e7db      	b.n	170c <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1754:	f06f 0011 	mvn.w	r0, #17
    1758:	e7a6      	b.n	16a8 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    175a:	2002      	movs	r0, #2
    175c:	e7a4      	b.n	16a8 <usb_d_ep_transfer+0x54>
    175e:	bf00      	nop
    1760:	00001289 	.word	0x00001289
    1764:	00004a85 	.word	0x00004a85
    1768:	200005f0 	.word	0x200005f0
    176c:	00004a93 	.word	0x00004a93
    1770:	00003c39 	.word	0x00003c39

00001774 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    1774:	b538      	push	{r3, r4, r5, lr}
    1776:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1778:	4b07      	ldr	r3, [pc, #28]	; (1798 <usb_d_ep_abort+0x24>)
    177a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    177c:	1e04      	subs	r4, r0, #0
    177e:	db09      	blt.n	1794 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    1780:	4628      	mov	r0, r5
    1782:	4b06      	ldr	r3, [pc, #24]	; (179c <usb_d_ep_abort+0x28>)
    1784:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1786:	4806      	ldr	r0, [pc, #24]	; (17a0 <usb_d_ep_abort+0x2c>)
    1788:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    178c:	2301      	movs	r3, #1
    178e:	7083      	strb	r3, [r0, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    1790:	2304      	movs	r3, #4
    1792:	70c3      	strb	r3, [r0, #3]
    1794:	bd38      	pop	{r3, r4, r5, pc}
    1796:	bf00      	nop
    1798:	00001289 	.word	0x00001289
    179c:	00003e19 	.word	0x00003e19
    17a0:	200005f0 	.word	0x200005f0

000017a4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    17a4:	b538      	push	{r3, r4, r5, lr}
    17a6:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    17a8:	b141      	cbz	r1, 17bc <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    17aa:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    17ac:	bf0c      	ite	eq
    17ae:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    17b0:	2102      	movne	r1, #2
    17b2:	4b13      	ldr	r3, [pc, #76]	; (1800 <usb_d_ep_halt+0x5c>)
    17b4:	4798      	blx	r3
    17b6:	4603      	mov	r3, r0
	}
}
    17b8:	4618      	mov	r0, r3
    17ba:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    17bc:	4b11      	ldr	r3, [pc, #68]	; (1804 <usb_d_ep_halt+0x60>)
    17be:	4798      	blx	r3
	if (ep_index < 0) {
    17c0:	1e05      	subs	r5, r0, #0
    17c2:	db19      	blt.n	17f8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    17c4:	2102      	movs	r1, #2
    17c6:	4620      	mov	r0, r4
    17c8:	4b0d      	ldr	r3, [pc, #52]	; (1800 <usb_d_ep_halt+0x5c>)
    17ca:	4798      	blx	r3
    17cc:	4603      	mov	r3, r0
    17ce:	2800      	cmp	r0, #0
    17d0:	d0f2      	beq.n	17b8 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    17d2:	2100      	movs	r1, #0
    17d4:	4620      	mov	r0, r4
    17d6:	4b0a      	ldr	r3, [pc, #40]	; (1800 <usb_d_ep_halt+0x5c>)
    17d8:	4798      	blx	r3
		if (rc < 0) {
    17da:	1e03      	subs	r3, r0, #0
    17dc:	dbec      	blt.n	17b8 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    17de:	4b0a      	ldr	r3, [pc, #40]	; (1808 <usb_d_ep_halt+0x64>)
    17e0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    17e4:	2201      	movs	r2, #1
    17e6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    17e8:	2103      	movs	r1, #3
    17ea:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    17ec:	69db      	ldr	r3, [r3, #28]
    17ee:	2200      	movs	r2, #0
    17f0:	4620      	mov	r0, r4
    17f2:	4798      	blx	r3
	return ERR_NONE;
    17f4:	2300      	movs	r3, #0
    17f6:	e7df      	b.n	17b8 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    17f8:	f06f 0311 	mvn.w	r3, #17
    17fc:	e7dc      	b.n	17b8 <usb_d_ep_halt+0x14>
    17fe:	bf00      	nop
    1800:	00003a91 	.word	0x00003a91
    1804:	00001289 	.word	0x00001289
    1808:	200005f0 	.word	0x200005f0

0000180c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    180c:	b538      	push	{r3, r4, r5, lr}
    180e:	460d      	mov	r5, r1
    1810:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1812:	4b0e      	ldr	r3, [pc, #56]	; (184c <usb_d_ep_register_callback+0x40>)
    1814:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1816:	4b0e      	ldr	r3, [pc, #56]	; (1850 <usb_d_ep_register_callback+0x44>)
    1818:	2c00      	cmp	r4, #0
    181a:	bf08      	it	eq
    181c:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    181e:	2800      	cmp	r0, #0
    1820:	db13      	blt.n	184a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1822:	2d01      	cmp	r5, #1
    1824:	d008      	beq.n	1838 <usb_d_ep_register_callback+0x2c>
    1826:	b115      	cbz	r5, 182e <usb_d_ep_register_callback+0x22>
    1828:	2d02      	cmp	r5, #2
    182a:	d00a      	beq.n	1842 <usb_d_ep_register_callback+0x36>
    182c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    182e:	4b09      	ldr	r3, [pc, #36]	; (1854 <usb_d_ep_register_callback+0x48>)
    1830:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1834:	6144      	str	r4, [r0, #20]
		break;
    1836:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1838:	4b06      	ldr	r3, [pc, #24]	; (1854 <usb_d_ep_register_callback+0x48>)
    183a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    183e:	6184      	str	r4, [r0, #24]
		break;
    1840:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1842:	4b04      	ldr	r3, [pc, #16]	; (1854 <usb_d_ep_register_callback+0x48>)
    1844:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1848:	61c4      	str	r4, [r0, #28]
    184a:	bd38      	pop	{r3, r4, r5, pc}
    184c:	00001289 	.word	0x00001289
    1850:	000012cd 	.word	0x000012cd
    1854:	200005f0 	.word	0x200005f0

00001858 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1858:	b900      	cbnz	r0, 185c <assert+0x4>
		__asm("BKPT #0");
    185a:	be00      	bkpt	0x0000
    185c:	4770      	bx	lr

0000185e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    185e:	6803      	ldr	r3, [r0, #0]
    1860:	b14b      	cbz	r3, 1876 <is_list_element+0x18>
		if (it == element) {
    1862:	428b      	cmp	r3, r1
    1864:	d009      	beq.n	187a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	b11b      	cbz	r3, 1872 <is_list_element+0x14>
		if (it == element) {
    186a:	4299      	cmp	r1, r3
    186c:	d1fb      	bne.n	1866 <is_list_element+0x8>
			return true;
    186e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1870:	4770      	bx	lr
	return false;
    1872:	2000      	movs	r0, #0
    1874:	4770      	bx	lr
    1876:	2000      	movs	r0, #0
    1878:	4770      	bx	lr
			return true;
    187a:	2001      	movs	r0, #1
    187c:	4770      	bx	lr
	...

00001880 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1880:	b538      	push	{r3, r4, r5, lr}
    1882:	4604      	mov	r4, r0
    1884:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1886:	4b06      	ldr	r3, [pc, #24]	; (18a0 <list_insert_as_head+0x20>)
    1888:	4798      	blx	r3
    188a:	f080 0001 	eor.w	r0, r0, #1
    188e:	2239      	movs	r2, #57	; 0x39
    1890:	4904      	ldr	r1, [pc, #16]	; (18a4 <list_insert_as_head+0x24>)
    1892:	b2c0      	uxtb	r0, r0
    1894:	4b04      	ldr	r3, [pc, #16]	; (18a8 <list_insert_as_head+0x28>)
    1896:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1898:	6823      	ldr	r3, [r4, #0]
    189a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    189c:	6025      	str	r5, [r4, #0]
    189e:	bd38      	pop	{r3, r4, r5, pc}
    18a0:	0000185f 	.word	0x0000185f
    18a4:	00005abc 	.word	0x00005abc
    18a8:	00001859 	.word	0x00001859

000018ac <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    18ac:	6803      	ldr	r3, [r0, #0]
    18ae:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    18b0:	6001      	str	r1, [r0, #0]
    18b2:	4770      	bx	lr

000018b4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	4605      	mov	r5, r0
    18b8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    18ba:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    18bc:	4b0a      	ldr	r3, [pc, #40]	; (18e8 <list_insert_at_end+0x34>)
    18be:	4798      	blx	r3
    18c0:	f080 0001 	eor.w	r0, r0, #1
    18c4:	224f      	movs	r2, #79	; 0x4f
    18c6:	4909      	ldr	r1, [pc, #36]	; (18ec <list_insert_at_end+0x38>)
    18c8:	b2c0      	uxtb	r0, r0
    18ca:	4b09      	ldr	r3, [pc, #36]	; (18f0 <list_insert_at_end+0x3c>)
    18cc:	4798      	blx	r3

	if (!list->head) {
    18ce:	682b      	ldr	r3, [r5, #0]
    18d0:	b91b      	cbnz	r3, 18da <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    18d2:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    18d4:	6033      	str	r3, [r6, #0]
		return;
    18d6:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    18d8:	461c      	mov	r4, r3
	while (it->next) {
    18da:	6823      	ldr	r3, [r4, #0]
    18dc:	2b00      	cmp	r3, #0
    18de:	d1fb      	bne.n	18d8 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    18e0:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    18e2:	6033      	str	r3, [r6, #0]
    18e4:	bd70      	pop	{r4, r5, r6, pc}
    18e6:	bf00      	nop
    18e8:	0000185f 	.word	0x0000185f
    18ec:	00005abc 	.word	0x00005abc
    18f0:	00001859 	.word	0x00001859

000018f4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    18f4:	6803      	ldr	r3, [r0, #0]
    18f6:	b10b      	cbz	r3, 18fc <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    18f8:	681a      	ldr	r2, [r3, #0]
    18fa:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    18fc:	4618      	mov	r0, r3
    18fe:	4770      	bx	lr

00001900 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1900:	b430      	push	{r4, r5}
	dev->hw = hw;
    1902:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1904:	698b      	ldr	r3, [r1, #24]
    1906:	f043 0301 	orr.w	r3, r3, #1
    190a:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    190c:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    190e:	6993      	ldr	r3, [r2, #24]
    1910:	f013 0f01 	tst.w	r3, #1
    1914:	d0fb      	beq.n	190e <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1916:	6993      	ldr	r3, [r2, #24]
    1918:	f043 0302 	orr.w	r3, r3, #2
    191c:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    191e:	4b34      	ldr	r3, [pc, #208]	; (19f0 <_can_async_init+0xf0>)
    1920:	4299      	cmp	r1, r3
    1922:	d011      	beq.n	1948 <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1924:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    1926:	6993      	ldr	r3, [r2, #24]
    1928:	f023 0302 	bic.w	r3, r3, #2
    192c:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    192e:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1930:	6993      	ldr	r3, [r2, #24]
    1932:	f023 0301 	bic.w	r3, r3, #1
    1936:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1938:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    193a:	6993      	ldr	r3, [r2, #24]
    193c:	f013 0f01 	tst.w	r3, #1
    1940:	d1fb      	bne.n	193a <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1942:	2000      	movs	r0, #0
    1944:	bc30      	pop	{r4, r5}
    1946:	4770      	bx	lr
		_can1_dev    = dev;
    1948:	4b2a      	ldr	r3, [pc, #168]	; (19f4 <_can_async_init+0xf4>)
    194a:	461a      	mov	r2, r3
    194c:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    1950:	4929      	ldr	r1, [pc, #164]	; (19f8 <_can_async_init+0xf8>)
    1952:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    1954:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    1956:	698c      	ldr	r4, [r1, #24]
    1958:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    195a:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    195c:	2400      	movs	r4, #0
    195e:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    1960:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1962:	4d26      	ldr	r5, [pc, #152]	; (19fc <_can_async_init+0xfc>)
    1964:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    1966:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    1968:	f640 2533 	movw	r5, #2611	; 0xa33
    196c:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    196e:	6805      	ldr	r5, [r0, #0]
    1970:	4923      	ldr	r1, [pc, #140]	; (1a00 <_can_async_init+0x100>)
    1972:	b289      	uxth	r1, r1
    1974:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    1978:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    197c:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    197e:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    1982:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1984:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    1988:	6805      	ldr	r5, [r0, #0]
    198a:	491e      	ldr	r1, [pc, #120]	; (1a04 <_can_async_init+0x104>)
    198c:	b289      	uxth	r1, r1
    198e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    1992:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    1996:	6801      	ldr	r1, [r0, #0]
    1998:	b292      	uxth	r2, r2
    199a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    199e:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    19a2:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    19a4:	2128      	movs	r1, #40	; 0x28
    19a6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    19aa:	6801      	ldr	r1, [r0, #0]
    19ac:	f103 0214 	add.w	r2, r3, #20
    19b0:	b292      	uxth	r2, r2
    19b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    19b6:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    19ba:	6802      	ldr	r2, [r0, #0]
    19bc:	331c      	adds	r3, #28
    19be:	b29b      	uxth	r3, r3
    19c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    19c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    19c8:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    19ca:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19ce:	4b0e      	ldr	r3, [pc, #56]	; (1a08 <_can_async_init+0x108>)
    19d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    19d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    19d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19dc:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19e0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19e4:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    19e6:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    19e8:	2201      	movs	r2, #1
    19ea:	65da      	str	r2, [r3, #92]	; 0x5c
    19ec:	e79a      	b.n	1924 <_can_async_init+0x24>
    19ee:	bf00      	nop
    19f0:	42000400 	.word	0x42000400
    19f4:	20000670 	.word	0x20000670
    19f8:	20000060 	.word	0x20000060
    19fc:	06020a07 	.word	0x06020a07
    1a00:	20000a40 	.word	0x20000a40
    1a04:	20000a20 	.word	0x20000a20
    1a08:	e000e100 	.word	0xe000e100

00001a0c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1a0c:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1a0e:	4b1d      	ldr	r3, [pc, #116]	; (1a84 <CAN1_Handler+0x78>)
    1a10:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1a12:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1a14:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    1a16:	f014 0f01 	tst.w	r4, #1
    1a1a:	d11c      	bne.n	1a56 <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1a1c:	f414 7f00 	tst.w	r4, #512	; 0x200
    1a20:	d11d      	bne.n	1a5e <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1a22:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    1a26:	d11e      	bne.n	1a66 <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    1a28:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1a2c:	d120      	bne.n	1a70 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1a2e:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    1a32:	d00a      	beq.n	1a4a <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1a34:	68ea      	ldr	r2, [r5, #12]
    1a36:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1a3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1a3e:	2b00      	cmp	r3, #0
    1a40:	bf14      	ite	ne
    1a42:	2102      	movne	r1, #2
    1a44:	2101      	moveq	r1, #1
    1a46:	4628      	mov	r0, r5
    1a48:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    1a4a:	f014 0f08 	tst.w	r4, #8
    1a4e:	d114      	bne.n	1a7a <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1a50:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1a52:	651c      	str	r4, [r3, #80]	; 0x50
    1a54:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    1a56:	68ab      	ldr	r3, [r5, #8]
    1a58:	4628      	mov	r0, r5
    1a5a:	4798      	blx	r3
    1a5c:	e7de      	b.n	1a1c <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    1a5e:	686b      	ldr	r3, [r5, #4]
    1a60:	4628      	mov	r0, r5
    1a62:	4798      	blx	r3
    1a64:	e7dd      	b.n	1a22 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    1a66:	68eb      	ldr	r3, [r5, #12]
    1a68:	2103      	movs	r1, #3
    1a6a:	4628      	mov	r0, r5
    1a6c:	4798      	blx	r3
    1a6e:	e7db      	b.n	1a28 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1a70:	68eb      	ldr	r3, [r5, #12]
    1a72:	2100      	movs	r1, #0
    1a74:	4628      	mov	r0, r5
    1a76:	4798      	blx	r3
    1a78:	e7d9      	b.n	1a2e <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    1a7a:	68eb      	ldr	r3, [r5, #12]
    1a7c:	2104      	movs	r1, #4
    1a7e:	4628      	mov	r0, r5
    1a80:	4798      	blx	r3
    1a82:	e7e5      	b.n	1a50 <CAN1_Handler+0x44>
    1a84:	20000670 	.word	0x20000670

00001a88 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a88:	0943      	lsrs	r3, r0, #5
    1a8a:	f000 001f 	and.w	r0, r0, #31
    1a8e:	2201      	movs	r2, #1
    1a90:	fa02 f000 	lsl.w	r0, r2, r0
    1a94:	3340      	adds	r3, #64	; 0x40
    1a96:	4a02      	ldr	r2, [pc, #8]	; (1aa0 <_irq_set+0x18>)
    1a98:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1a9c:	4770      	bx	lr
    1a9e:	bf00      	nop
    1aa0:	e000e100 	.word	0xe000e100

00001aa4 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    1aa4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    1aa8:	00c3      	lsls	r3, r0, #3
    1aaa:	3302      	adds	r3, #2
    1aac:	4803      	ldr	r0, [pc, #12]	; (1abc <_get_cycles_for_ms+0x18>)
    1aae:	fba0 2303 	umull	r2, r3, r0, r3
    1ab2:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1ab4:	2064      	movs	r0, #100	; 0x64
    1ab6:	fb00 f003 	mul.w	r0, r0, r3
    1aba:	4770      	bx	lr
    1abc:	aaaaaaab 	.word	0xaaaaaaab

00001ac0 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    1ac0:	3901      	subs	r1, #1
    1ac2:	d8fd      	bhi.n	1ac0 <_delay_cycles>
    1ac4:	4770      	bx	lr
    1ac6:	bf00      	nop

00001ac8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1ac8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1aca:	4a12      	ldr	r2, [pc, #72]	; (1b14 <_init_chip+0x4c>)
    1acc:	8813      	ldrh	r3, [r2, #0]
    1ace:	b29b      	uxth	r3, r3
    1ad0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1ad2:	4b11      	ldr	r3, [pc, #68]	; (1b18 <_init_chip+0x50>)
    1ad4:	4798      	blx	r3
	_oscctrl_init_sources();
    1ad6:	4b11      	ldr	r3, [pc, #68]	; (1b1c <_init_chip+0x54>)
    1ad8:	4798      	blx	r3
	_mclk_init();
    1ada:	4b11      	ldr	r3, [pc, #68]	; (1b20 <_init_chip+0x58>)
    1adc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1ade:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1ae2:	4c10      	ldr	r4, [pc, #64]	; (1b24 <_init_chip+0x5c>)
    1ae4:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1ae6:	4b10      	ldr	r3, [pc, #64]	; (1b28 <_init_chip+0x60>)
    1ae8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1aea:	f640 30ff 	movw	r0, #3071	; 0xbff
    1aee:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1af0:	4b0e      	ldr	r3, [pc, #56]	; (1b2c <_init_chip+0x64>)
    1af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1af4:	62da      	str	r2, [r3, #44]	; 0x2c
    1af6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1afa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1afe:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1b02:	f042 028f 	orr.w	r2, r2, #143	; 0x8f
    1b06:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1b0a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1b0e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1b12:	bd10      	pop	{r4, pc}
    1b14:	41004000 	.word	0x41004000
    1b18:	00001c2d 	.word	0x00001c2d
    1b1c:	00001c4d 	.word	0x00001c4d
    1b20:	00001c21 	.word	0x00001c21
    1b24:	00001b8d 	.word	0x00001b8d
    1b28:	00001c69 	.word	0x00001c69
    1b2c:	41008000 	.word	0x41008000

00001b30 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1b30:	b430      	push	{r4, r5}
    1b32:	4814      	ldr	r0, [pc, #80]	; (1b84 <_event_system_init+0x54>)
    1b34:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1b38:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1b3a:	4c13      	ldr	r4, [pc, #76]	; (1b88 <_event_system_init+0x58>)
    1b3c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1b3e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1b42:	3248      	adds	r2, #72	; 0x48
    1b44:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1b48:	42ab      	cmp	r3, r5
    1b4a:	d1f7      	bne.n	1b3c <_event_system_init+0xc>
    1b4c:	480d      	ldr	r0, [pc, #52]	; (1b84 <_event_system_init+0x54>)
    1b4e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1b52:	3080      	adds	r0, #128	; 0x80
    1b54:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1b56:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1b5a:	00ca      	lsls	r2, r1, #3
    1b5c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b60:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1b64:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1b66:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1b6a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1b6c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1b70:	43db      	mvns	r3, r3
    1b72:	b2db      	uxtb	r3, r3
    1b74:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1b78:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1b7a:	2920      	cmp	r1, #32
    1b7c:	d1eb      	bne.n	1b56 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1b7e:	2000      	movs	r0, #0
    1b80:	bc30      	pop	{r4, r5}
    1b82:	4770      	bx	lr
    1b84:	00005adc 	.word	0x00005adc
    1b88:	4100e000 	.word	0x4100e000

00001b8c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1b8c:	f010 0f01 	tst.w	r0, #1
    1b90:	d008      	beq.n	1ba4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b92:	4a1d      	ldr	r2, [pc, #116]	; (1c08 <_gclk_init_generators_by_fref+0x7c>)
    1b94:	4b1d      	ldr	r3, [pc, #116]	; (1c0c <_gclk_init_generators_by_fref+0x80>)
    1b96:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b98:	4619      	mov	r1, r3
    1b9a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1b9e:	684b      	ldr	r3, [r1, #4]
    1ba0:	4213      	tst	r3, r2
    1ba2:	d1fc      	bne.n	1b9e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1ba4:	f010 0f02 	tst.w	r0, #2
    1ba8:	d008      	beq.n	1bbc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1baa:	4a19      	ldr	r2, [pc, #100]	; (1c10 <_gclk_init_generators_by_fref+0x84>)
    1bac:	4b17      	ldr	r3, [pc, #92]	; (1c0c <_gclk_init_generators_by_fref+0x80>)
    1bae:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bb0:	4619      	mov	r1, r3
    1bb2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bb6:	684b      	ldr	r3, [r1, #4]
    1bb8:	4213      	tst	r3, r2
    1bba:	d1fc      	bne.n	1bb6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1bbc:	f010 0f04 	tst.w	r0, #4
    1bc0:	d008      	beq.n	1bd4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bc2:	4a14      	ldr	r2, [pc, #80]	; (1c14 <_gclk_init_generators_by_fref+0x88>)
    1bc4:	4b11      	ldr	r3, [pc, #68]	; (1c0c <_gclk_init_generators_by_fref+0x80>)
    1bc6:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bc8:	4619      	mov	r1, r3
    1bca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bce:	684b      	ldr	r3, [r1, #4]
    1bd0:	4213      	tst	r3, r2
    1bd2:	d1fc      	bne.n	1bce <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    1bd4:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1bd8:	d008      	beq.n	1bec <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bda:	4a0f      	ldr	r2, [pc, #60]	; (1c18 <_gclk_init_generators_by_fref+0x8c>)
    1bdc:	4b0b      	ldr	r3, [pc, #44]	; (1c0c <_gclk_init_generators_by_fref+0x80>)
    1bde:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1be0:	4619      	mov	r1, r3
    1be2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1be6:	684b      	ldr	r3, [r1, #4]
    1be8:	4213      	tst	r3, r2
    1bea:	d1fc      	bne.n	1be6 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1bec:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1bf0:	d008      	beq.n	1c04 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bf2:	4a0a      	ldr	r2, [pc, #40]	; (1c1c <_gclk_init_generators_by_fref+0x90>)
    1bf4:	4b05      	ldr	r3, [pc, #20]	; (1c0c <_gclk_init_generators_by_fref+0x80>)
    1bf6:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bf8:	4619      	mov	r1, r3
    1bfa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1bfe:	684b      	ldr	r3, [r1, #4]
    1c00:	4213      	tst	r3, r2
    1c02:	d1fc      	bne.n	1bfe <_gclk_init_generators_by_fref+0x72>
    1c04:	4770      	bx	lr
    1c06:	bf00      	nop
    1c08:	00010101 	.word	0x00010101
    1c0c:	40001c00 	.word	0x40001c00
    1c10:	00040908 	.word	0x00040908
    1c14:	00010906 	.word	0x00010906
    1c18:	00010905 	.word	0x00010905
    1c1c:	00010904 	.word	0x00010904

00001c20 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c20:	2201      	movs	r2, #1
    1c22:	4b01      	ldr	r3, [pc, #4]	; (1c28 <_mclk_init+0x8>)
    1c24:	715a      	strb	r2, [r3, #5]
    1c26:	4770      	bx	lr
    1c28:	40000800 	.word	0x40000800

00001c2c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1c2c:	4b06      	ldr	r3, [pc, #24]	; (1c48 <_osc32kctrl_init_sources+0x1c>)
    1c2e:	f242 0286 	movw	r2, #8326	; 0x2086
    1c32:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1c34:	2200      	movs	r2, #0
    1c36:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1c38:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c3a:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1c3c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1c40:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1c42:	741a      	strb	r2, [r3, #16]
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop
    1c48:	40001400 	.word	0x40001400

00001c4c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1c4c:	4a04      	ldr	r2, [pc, #16]	; (1c60 <_oscctrl_init_sources+0x14>)
    1c4e:	4b05      	ldr	r3, [pc, #20]	; (1c64 <_oscctrl_init_sources+0x18>)
    1c50:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1c52:	461a      	mov	r2, r3
    1c54:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1c56:	f013 0f02 	tst.w	r3, #2
    1c5a:	d0fb      	beq.n	1c54 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1c5c:	4770      	bx	lr
    1c5e:	bf00      	nop
    1c60:	03002606 	.word	0x03002606
    1c64:	40001000 	.word	0x40001000

00001c68 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c68:	4a44      	ldr	r2, [pc, #272]	; (1d7c <_oscctrl_init_referenced_generators+0x114>)
    1c6a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c6c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c70:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c74:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c76:	4611      	mov	r1, r2
    1c78:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c7c:	684b      	ldr	r3, [r1, #4]
    1c7e:	4213      	tst	r3, r2
    1c80:	d1fc      	bne.n	1c7c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1c82:	4a3e      	ldr	r2, [pc, #248]	; (1d7c <_oscctrl_init_referenced_generators+0x114>)
    1c84:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1c86:	f013 0f04 	tst.w	r3, #4
    1c8a:	d1fb      	bne.n	1c84 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c8c:	4b3c      	ldr	r3, [pc, #240]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1c8e:	2200      	movs	r2, #0
    1c90:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1c92:	4a3c      	ldr	r2, [pc, #240]	; (1d84 <_oscctrl_init_referenced_generators+0x11c>)
    1c94:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c96:	461a      	mov	r2, r3
    1c98:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1c9c:	f013 0f10 	tst.w	r3, #16
    1ca0:	d1fa      	bne.n	1c98 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1ca2:	2200      	movs	r2, #0
    1ca4:	4b36      	ldr	r3, [pc, #216]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1ca6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1caa:	461a      	mov	r2, r3
    1cac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cb0:	f013 0f04 	tst.w	r3, #4
    1cb4:	d1fa      	bne.n	1cac <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1cb6:	2202      	movs	r2, #2
    1cb8:	4b31      	ldr	r3, [pc, #196]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1cba:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cbc:	461a      	mov	r2, r3
    1cbe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1cc2:	f013 0f02 	tst.w	r3, #2
    1cc6:	d1fa      	bne.n	1cbe <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1cc8:	4b2d      	ldr	r3, [pc, #180]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1ccc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cce:	461a      	mov	r2, r3
    1cd0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1cd4:	f013 0f08 	tst.w	r3, #8
    1cd8:	d1fa      	bne.n	1cd0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cda:	2219      	movs	r2, #25
    1cdc:	4b28      	ldr	r3, [pc, #160]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1cde:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ce2:	461a      	mov	r2, r3
    1ce4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1ce8:	f013 0f04 	tst.w	r3, #4
    1cec:	d1fa      	bne.n	1ce4 <_oscctrl_init_referenced_generators+0x7c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1cee:	4a26      	ldr	r2, [pc, #152]	; (1d88 <_oscctrl_init_referenced_generators+0x120>)
    1cf0:	4b23      	ldr	r3, [pc, #140]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1cf2:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cf4:	461a      	mov	r2, r3
    1cf6:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1cf8:	f013 0f06 	tst.w	r3, #6
    1cfc:	d1fb      	bne.n	1cf6 <_oscctrl_init_referenced_generators+0x8e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1cfe:	4b20      	ldr	r3, [pc, #128]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1d00:	2220      	movs	r2, #32
    1d02:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1d04:	2202      	movs	r2, #2
    1d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1d0a:	461a      	mov	r2, r3
    1d0c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1d0e:	f013 0f02 	tst.w	r3, #2
    1d12:	d1fb      	bne.n	1d0c <_oscctrl_init_referenced_generators+0xa4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1d14:	4b1a      	ldr	r3, [pc, #104]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1d16:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1d1a:	f013 0f01 	tst.w	r3, #1
    1d1e:	d026      	beq.n	1d6e <_oscctrl_init_referenced_generators+0x106>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d20:	4a17      	ldr	r2, [pc, #92]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1d22:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d24:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1d28:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d2c:	d1f9      	bne.n	1d22 <_oscctrl_init_referenced_generators+0xba>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1d2e:	4b14      	ldr	r3, [pc, #80]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1d32:	f012 0f01 	tst.w	r2, #1
    1d36:	d103      	bne.n	1d40 <_oscctrl_init_referenced_generators+0xd8>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1d3a:	f012 0f02 	tst.w	r2, #2
    1d3e:	d0f7      	beq.n	1d30 <_oscctrl_init_referenced_generators+0xc8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1d40:	4a0e      	ldr	r2, [pc, #56]	; (1d7c <_oscctrl_init_referenced_generators+0x114>)
    1d42:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1d44:	2b00      	cmp	r3, #0
    1d46:	d1fc      	bne.n	1d42 <_oscctrl_init_referenced_generators+0xda>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1d48:	4a0c      	ldr	r2, [pc, #48]	; (1d7c <_oscctrl_init_referenced_generators+0x114>)
    1d4a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1d4c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1d50:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1d54:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d56:	4611      	mov	r1, r2
    1d58:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1d5c:	684b      	ldr	r3, [r1, #4]
    1d5e:	4213      	tst	r3, r2
    1d60:	d1fc      	bne.n	1d5c <_oscctrl_init_referenced_generators+0xf4>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1d62:	4a06      	ldr	r2, [pc, #24]	; (1d7c <_oscctrl_init_referenced_generators+0x114>)
    1d64:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1d66:	f013 0f04 	tst.w	r3, #4
    1d6a:	d1fb      	bne.n	1d64 <_oscctrl_init_referenced_generators+0xfc>
		;
#endif
	(void)hw;
}
    1d6c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1d6e:	4a04      	ldr	r2, [pc, #16]	; (1d80 <_oscctrl_init_referenced_generators+0x118>)
    1d70:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1d72:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d76:	d0fb      	beq.n	1d70 <_oscctrl_init_referenced_generators+0x108>
    1d78:	e7d9      	b.n	1d2e <_oscctrl_init_referenced_generators+0xc6>
    1d7a:	bf00      	nop
    1d7c:	40001c00 	.word	0x40001c00
    1d80:	40001000 	.word	0x40001000
    1d84:	0401bb80 	.word	0x0401bb80
    1d88:	000407a0 	.word	0x000407a0

00001d8c <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    1d8c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1d8e:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1d90:	6913      	ldr	r3, [r2, #16]
    1d92:	f013 0f60 	tst.w	r3, #96	; 0x60
    1d96:	d1fb      	bne.n	1d90 <_rtc_timer_set_period+0x4>
}
    1d98:	4770      	bx	lr

00001d9a <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    1d9a:	68c2      	ldr	r2, [r0, #12]
    1d9c:	6913      	ldr	r3, [r2, #16]
    1d9e:	f013 0f60 	tst.w	r3, #96	; 0x60
    1da2:	d1fb      	bne.n	1d9c <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    1da4:	6a10      	ldr	r0, [r2, #32]
}
    1da6:	4770      	bx	lr

00001da8 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    1da8:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1daa:	f248 0103 	movw	r1, #32771	; 0x8003
    1dae:	6913      	ldr	r3, [r2, #16]
    1db0:	420b      	tst	r3, r1
    1db2:	d1fc      	bne.n	1dae <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    1db4:	8810      	ldrh	r0, [r2, #0]
}
    1db6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1dba:	4770      	bx	lr

00001dbc <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    1dbc:	4770      	bx	lr
	...

00001dc0 <_rtc_timer_init>:
{
    1dc0:	b538      	push	{r3, r4, r5, lr}
    1dc2:	460c      	mov	r4, r1
	ASSERT(dev);
    1dc4:	4605      	mov	r5, r0
    1dc6:	2230      	movs	r2, #48	; 0x30
    1dc8:	4917      	ldr	r1, [pc, #92]	; (1e28 <_rtc_timer_init+0x68>)
    1dca:	3000      	adds	r0, #0
    1dcc:	bf18      	it	ne
    1dce:	2001      	movne	r0, #1
    1dd0:	4b16      	ldr	r3, [pc, #88]	; (1e2c <_rtc_timer_init+0x6c>)
    1dd2:	4798      	blx	r3
	dev->hw = hw;
    1dd4:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1dd6:	2301      	movs	r3, #1
    1dd8:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dda:	f248 0203 	movw	r2, #32771	; 0x8003
    1dde:	6923      	ldr	r3, [r4, #16]
    1de0:	4213      	tst	r3, r2
    1de2:	d1fc      	bne.n	1dde <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1de4:	68ea      	ldr	r2, [r5, #12]
    1de6:	6913      	ldr	r3, [r2, #16]
    1de8:	f013 0f01 	tst.w	r3, #1
    1dec:	d1fb      	bne.n	1de6 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1dee:	f44f 7380 	mov.w	r3, #256	; 0x100
    1df2:	6053      	str	r3, [r2, #4]
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    1df4:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1df6:	f248 0380 	movw	r3, #32896	; 0x8080
    1dfa:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1dfc:	f248 0103 	movw	r1, #32771	; 0x8003
    1e00:	6913      	ldr	r3, [r2, #16]
    1e02:	420b      	tst	r3, r1
    1e04:	d1fc      	bne.n	1e00 <_rtc_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1e06:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1e0c:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1e0e:	6913      	ldr	r3, [r2, #16]
    1e10:	f013 0f60 	tst.w	r3, #96	; 0x60
    1e14:	d1fb      	bne.n	1e0e <_rtc_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1e16:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1e18:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e1c:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    1e1e:	4b04      	ldr	r3, [pc, #16]	; (1e30 <_rtc_timer_init+0x70>)
    1e20:	601d      	str	r5, [r3, #0]
}
    1e22:	2000      	movs	r0, #0
    1e24:	bd38      	pop	{r3, r4, r5, pc}
    1e26:	bf00      	nop
    1e28:	00005be0 	.word	0x00005be0
    1e2c:	00001859 	.word	0x00001859
    1e30:	2000069c 	.word	0x2000069c

00001e34 <_rtc_timer_deinit>:
{
    1e34:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    1e36:	4604      	mov	r4, r0
    1e38:	b1c8      	cbz	r0, 1e6e <_rtc_timer_deinit+0x3a>
    1e3a:	68c0      	ldr	r0, [r0, #12]
    1e3c:	3000      	adds	r0, #0
    1e3e:	bf18      	it	ne
    1e40:	2001      	movne	r0, #1
    1e42:	2252      	movs	r2, #82	; 0x52
    1e44:	490b      	ldr	r1, [pc, #44]	; (1e74 <_rtc_timer_deinit+0x40>)
    1e46:	4b0c      	ldr	r3, [pc, #48]	; (1e78 <_rtc_timer_deinit+0x44>)
    1e48:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1e4e:	4b0b      	ldr	r3, [pc, #44]	; (1e7c <_rtc_timer_deinit+0x48>)
    1e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1e54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e58:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    1e5c:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1e5e:	2301      	movs	r3, #1
    1e60:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1e62:	f248 0103 	movw	r1, #32771	; 0x8003
    1e66:	6913      	ldr	r3, [r2, #16]
    1e68:	420b      	tst	r3, r1
    1e6a:	d1fc      	bne.n	1e66 <_rtc_timer_deinit+0x32>
}
    1e6c:	bd10      	pop	{r4, pc}
    1e6e:	2000      	movs	r0, #0
    1e70:	e7e7      	b.n	1e42 <_rtc_timer_deinit+0xe>
    1e72:	bf00      	nop
    1e74:	00005be0 	.word	0x00005be0
    1e78:	00001859 	.word	0x00001859
    1e7c:	e000e100 	.word	0xe000e100

00001e80 <_rtc_timer_start>:
{
    1e80:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    1e82:	4604      	mov	r4, r0
    1e84:	b310      	cbz	r0, 1ecc <_rtc_timer_start+0x4c>
    1e86:	68c0      	ldr	r0, [r0, #12]
    1e88:	3000      	adds	r0, #0
    1e8a:	bf18      	it	ne
    1e8c:	2001      	movne	r0, #1
    1e8e:	225e      	movs	r2, #94	; 0x5e
    1e90:	490f      	ldr	r1, [pc, #60]	; (1ed0 <_rtc_timer_start+0x50>)
    1e92:	4b10      	ldr	r3, [pc, #64]	; (1ed4 <_rtc_timer_start+0x54>)
    1e94:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1e9a:	4b0f      	ldr	r3, [pc, #60]	; (1ed8 <_rtc_timer_start+0x58>)
    1e9c:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    1e9e:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    1ea0:	2300      	movs	r3, #0
    1ea2:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1ea4:	6913      	ldr	r3, [r2, #16]
    1ea6:	f013 0f08 	tst.w	r3, #8
    1eaa:	d1fb      	bne.n	1ea4 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    1eac:	68e3      	ldr	r3, [r4, #12]
    1eae:	691a      	ldr	r2, [r3, #16]
    1eb0:	f012 0f08 	tst.w	r2, #8
    1eb4:	d1fb      	bne.n	1eae <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1eb6:	881a      	ldrh	r2, [r3, #0]
    1eb8:	b292      	uxth	r2, r2
    1eba:	f042 0202 	orr.w	r2, r2, #2
    1ebe:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1ec0:	f248 0103 	movw	r1, #32771	; 0x8003
    1ec4:	691a      	ldr	r2, [r3, #16]
    1ec6:	420a      	tst	r2, r1
    1ec8:	d1fc      	bne.n	1ec4 <_rtc_timer_start+0x44>
}
    1eca:	bd10      	pop	{r4, pc}
    1ecc:	2000      	movs	r0, #0
    1ece:	e7de      	b.n	1e8e <_rtc_timer_start+0xe>
    1ed0:	00005be0 	.word	0x00005be0
    1ed4:	00001859 	.word	0x00001859
    1ed8:	e000e100 	.word	0xe000e100

00001edc <_rtc_timer_stop>:
{
    1edc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    1ede:	4604      	mov	r4, r0
    1ee0:	b1a0      	cbz	r0, 1f0c <_rtc_timer_stop+0x30>
    1ee2:	68c0      	ldr	r0, [r0, #12]
    1ee4:	3000      	adds	r0, #0
    1ee6:	bf18      	it	ne
    1ee8:	2001      	movne	r0, #1
    1eea:	226b      	movs	r2, #107	; 0x6b
    1eec:	4908      	ldr	r1, [pc, #32]	; (1f10 <_rtc_timer_stop+0x34>)
    1eee:	4b09      	ldr	r3, [pc, #36]	; (1f14 <_rtc_timer_stop+0x38>)
    1ef0:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    1ef2:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1ef4:	8813      	ldrh	r3, [r2, #0]
    1ef6:	f023 0302 	bic.w	r3, r3, #2
    1efa:	041b      	lsls	r3, r3, #16
    1efc:	0c1b      	lsrs	r3, r3, #16
    1efe:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1f00:	f248 0103 	movw	r1, #32771	; 0x8003
    1f04:	6913      	ldr	r3, [r2, #16]
    1f06:	420b      	tst	r3, r1
    1f08:	d1fc      	bne.n	1f04 <_rtc_timer_stop+0x28>
}
    1f0a:	bd10      	pop	{r4, pc}
    1f0c:	2000      	movs	r0, #0
    1f0e:	e7ec      	b.n	1eea <_rtc_timer_stop+0xe>
    1f10:	00005be0 	.word	0x00005be0
    1f14:	00001859 	.word	0x00001859

00001f18 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    1f18:	4800      	ldr	r0, [pc, #0]	; (1f1c <_rtc_get_timer+0x4>)
    1f1a:	4770      	bx	lr
    1f1c:	20000074 	.word	0x20000074

00001f20 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1f20:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1f22:	4b08      	ldr	r3, [pc, #32]	; (1f44 <RTC_Handler+0x24>)
    1f24:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1f26:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1f28:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1f2a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1f2e:	d007      	beq.n	1f40 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1f30:	6823      	ldr	r3, [r4, #0]
    1f32:	b10b      	cbz	r3, 1f38 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1f34:	4620      	mov	r0, r4
    1f36:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1f38:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
    1f3e:	819a      	strh	r2, [r3, #12]
    1f40:	bd10      	pop	{r4, pc}
    1f42:	bf00      	nop
    1f44:	2000069c 	.word	0x2000069c

00001f48 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1f48:	b470      	push	{r4, r5, r6}
    1f4a:	b089      	sub	sp, #36	; 0x24
    1f4c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1f4e:	466c      	mov	r4, sp
    1f50:	4d0d      	ldr	r5, [pc, #52]	; (1f88 <_sercom_get_hardware_index+0x40>)
    1f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1f5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1f5e:	9b00      	ldr	r3, [sp, #0]
    1f60:	42b3      	cmp	r3, r6
    1f62:	d00d      	beq.n	1f80 <_sercom_get_hardware_index+0x38>
    1f64:	4631      	mov	r1, r6
    1f66:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f68:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1f6a:	f853 2b04 	ldr.w	r2, [r3], #4
    1f6e:	428a      	cmp	r2, r1
    1f70:	d007      	beq.n	1f82 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f72:	3001      	adds	r0, #1
    1f74:	2808      	cmp	r0, #8
    1f76:	d1f8      	bne.n	1f6a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1f78:	2000      	movs	r0, #0
}
    1f7a:	b009      	add	sp, #36	; 0x24
    1f7c:	bc70      	pop	{r4, r5, r6}
    1f7e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f80:	2000      	movs	r0, #0
			return i;
    1f82:	b2c0      	uxtb	r0, r0
    1f84:	e7f9      	b.n	1f7a <_sercom_get_hardware_index+0x32>
    1f86:	bf00      	nop
    1f88:	00005bf8 	.word	0x00005bf8

00001f8c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    1f8c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1f8e:	4b07      	ldr	r3, [pc, #28]	; (1fac <_get_i2cm_index+0x20>)
    1f90:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
    1f92:	2803      	cmp	r0, #3
    1f94:	d008      	beq.n	1fa8 <_get_i2cm_index+0x1c>
			return i;
		}
	}

	ASSERT(false);
    1f96:	f240 32a6 	movw	r2, #934	; 0x3a6
    1f9a:	4905      	ldr	r1, [pc, #20]	; (1fb0 <_get_i2cm_index+0x24>)
    1f9c:	2000      	movs	r0, #0
    1f9e:	4b05      	ldr	r3, [pc, #20]	; (1fb4 <_get_i2cm_index+0x28>)
    1fa0:	4798      	blx	r3
	return -1;
    1fa2:	f04f 30ff 	mov.w	r0, #4294967295
}
    1fa6:	bd08      	pop	{r3, pc}
			return i;
    1fa8:	2000      	movs	r0, #0
    1faa:	bd08      	pop	{r3, pc}
    1fac:	00001f49 	.word	0x00001f49
    1fb0:	00005c64 	.word	0x00005c64
    1fb4:	00001859 	.word	0x00001859

00001fb8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1fb8:	b538      	push	{r3, r4, r5, lr}
    1fba:	4605      	mov	r5, r0
    1fbc:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1fbe:	4608      	mov	r0, r1
    1fc0:	4b32      	ldr	r3, [pc, #200]	; (208c <_i2c_m_sync_init_impl+0xd4>)
    1fc2:	4798      	blx	r3
    1fc4:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1fc6:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1fc8:	f013 0f01 	tst.w	r3, #1
    1fcc:	d122      	bne.n	2014 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1fce:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1fd2:	4a2f      	ldr	r2, [pc, #188]	; (2090 <_i2c_m_sync_init_impl+0xd8>)
    1fd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1fda:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fde:	69e3      	ldr	r3, [r4, #28]
    1fe0:	f013 0f03 	tst.w	r3, #3
    1fe4:	d1fb      	bne.n	1fde <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1fe6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1fe8:	f013 0f02 	tst.w	r3, #2
    1fec:	d00b      	beq.n	2006 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1fee:	6823      	ldr	r3, [r4, #0]
    1ff0:	f023 0302 	bic.w	r3, r3, #2
    1ff4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ff6:	69e3      	ldr	r3, [r4, #28]
    1ff8:	f013 0f03 	tst.w	r3, #3
    1ffc:	d1fb      	bne.n	1ff6 <_i2c_m_sync_init_impl+0x3e>
    1ffe:	69e3      	ldr	r3, [r4, #28]
    2000:	f013 0f02 	tst.w	r3, #2
    2004:	d1fb      	bne.n	1ffe <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    2006:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    200a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    200c:	69e3      	ldr	r3, [r4, #28]
    200e:	f013 0f03 	tst.w	r3, #3
    2012:	d1fb      	bne.n	200c <_i2c_m_sync_init_impl+0x54>
    2014:	69e3      	ldr	r3, [r4, #28]
    2016:	f013 0f01 	tst.w	r3, #1
    201a:	d1fb      	bne.n	2014 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    201c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2020:	4a1b      	ldr	r2, [pc, #108]	; (2090 <_i2c_m_sync_init_impl+0xd8>)
    2022:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2028:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    202a:	69e3      	ldr	r3, [r4, #28]
    202c:	f013 0f03 	tst.w	r3, #3
    2030:	d1fb      	bne.n	202a <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2032:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2036:	4916      	ldr	r1, [pc, #88]	; (2090 <_i2c_m_sync_init_impl+0xd8>)
    2038:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    203e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2040:	69e3      	ldr	r3, [r4, #28]
    2042:	f013 0f04 	tst.w	r3, #4
    2046:	d1fb      	bne.n	2040 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2048:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    204c:	4910      	ldr	r1, [pc, #64]	; (2090 <_i2c_m_sync_init_impl+0xd8>)
    204e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2054:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    2056:	f3c2 6301 	ubfx	r3, r2, #24, #2
    205a:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    205c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    205e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    2062:	2b01      	cmp	r3, #1
    2064:	bf94      	ite	ls
    2066:	2300      	movls	r3, #0
    2068:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    206a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    206e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2070:	69e3      	ldr	r3, [r4, #28]
    2072:	f013 0f04 	tst.w	r3, #4
    2076:	d1fb      	bne.n	2070 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    2078:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    207c:	4b04      	ldr	r3, [pc, #16]	; (2090 <_i2c_m_sync_init_impl+0xd8>)
    207e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2082:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    2084:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    2086:	2000      	movs	r0, #0
    2088:	bd38      	pop	{r3, r4, r5, pc}
    208a:	bf00      	nop
    208c:	00001f8d 	.word	0x00001f8d
    2090:	00005bf8 	.word	0x00005bf8

00002094 <_i2c_m_sync_init>:
{
    2094:	b538      	push	{r3, r4, r5, lr}
    2096:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    2098:	4604      	mov	r4, r0
    209a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    209e:	4906      	ldr	r1, [pc, #24]	; (20b8 <_i2c_m_sync_init+0x24>)
    20a0:	3000      	adds	r0, #0
    20a2:	bf18      	it	ne
    20a4:	2001      	movne	r0, #1
    20a6:	4b05      	ldr	r3, [pc, #20]	; (20bc <_i2c_m_sync_init+0x28>)
    20a8:	4798      	blx	r3
	i2c_dev->hw = hw;
    20aa:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    20ac:	4629      	mov	r1, r5
    20ae:	4620      	mov	r0, r4
    20b0:	4b03      	ldr	r3, [pc, #12]	; (20c0 <_i2c_m_sync_init+0x2c>)
    20b2:	4798      	blx	r3
}
    20b4:	bd38      	pop	{r3, r4, r5, pc}
    20b6:	bf00      	nop
    20b8:	00005c64 	.word	0x00005c64
    20bc:	00001859 	.word	0x00001859
    20c0:	00001fb9 	.word	0x00001fb9

000020c4 <_i2c_m_sync_transfer>:
{
    20c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    20c8:	4605      	mov	r5, r0
    20ca:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    20cc:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    20ce:	f110 0800 	adds.w	r8, r0, #0
    20d2:	bf18      	it	ne
    20d4:	f04f 0801 	movne.w	r8, #1
    20d8:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 23a0 <_i2c_m_sync_transfer+0x2dc>
    20dc:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    20e0:	4649      	mov	r1, r9
    20e2:	4640      	mov	r0, r8
    20e4:	4fad      	ldr	r7, [pc, #692]	; (239c <_i2c_m_sync_transfer+0x2d8>)
    20e6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    20e8:	6928      	ldr	r0, [r5, #16]
    20ea:	f240 52d1 	movw	r2, #1489	; 0x5d1
    20ee:	4649      	mov	r1, r9
    20f0:	3000      	adds	r0, #0
    20f2:	bf18      	it	ne
    20f4:	2001      	movne	r0, #1
    20f6:	47b8      	blx	r7
	ASSERT(msg);
    20f8:	f240 52d2 	movw	r2, #1490	; 0x5d2
    20fc:	4649      	mov	r1, r9
    20fe:	1c30      	adds	r0, r6, #0
    2100:	bf18      	it	ne
    2102:	2001      	movne	r0, #1
    2104:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2106:	886b      	ldrh	r3, [r5, #2]
    2108:	f413 7f80 	tst.w	r3, #256	; 0x100
    210c:	f040 8218 	bne.w	2540 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    2110:	8873      	ldrh	r3, [r6, #2]
    2112:	b29b      	uxth	r3, r3
    2114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2118:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    211a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    211e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2122:	6863      	ldr	r3, [r4, #4]
    2124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2128:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    212a:	69e3      	ldr	r3, [r4, #28]
    212c:	f013 0f04 	tst.w	r3, #4
    2130:	d1fb      	bne.n	212a <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    2132:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2134:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    2138:	f240 52a5 	movw	r2, #1445	; 0x5a5
    213c:	4998      	ldr	r1, [pc, #608]	; (23a0 <_i2c_m_sync_transfer+0x2dc>)
    213e:	4640      	mov	r0, r8
    2140:	4b96      	ldr	r3, [pc, #600]	; (239c <_i2c_m_sync_transfer+0x2d8>)
    2142:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2144:	686b      	ldr	r3, [r5, #4]
    2146:	2b01      	cmp	r3, #1
    2148:	d05e      	beq.n	2208 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2150:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2152:	69fb      	ldr	r3, [r7, #28]
    2154:	f013 0f04 	tst.w	r3, #4
    2158:	d1fb      	bne.n	2152 <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    215a:	882b      	ldrh	r3, [r5, #0]
    215c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2160:	d05e      	beq.n	2220 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    2162:	886a      	ldrh	r2, [r5, #2]
    2164:	f012 0f01 	tst.w	r2, #1
    2168:	d004      	beq.n	2174 <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    216a:	886a      	ldrh	r2, [r5, #2]
    216c:	b292      	uxth	r2, r2
    216e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2172:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2174:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2178:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    217c:	69fb      	ldr	r3, [r7, #28]
    217e:	f013 0f04 	tst.w	r3, #4
    2182:	d1fb      	bne.n	217c <_i2c_m_sync_transfer+0xb8>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    218e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2190:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2192:	69fb      	ldr	r3, [r7, #28]
    2194:	f013 0f04 	tst.w	r3, #4
    2198:	d1fb      	bne.n	2192 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    219a:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    219c:	7e0b      	ldrb	r3, [r1, #24]
    219e:	b2db      	uxtb	r3, r3
    21a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    21a4:	f013 0f03 	tst.w	r3, #3
    21a8:	d103      	bne.n	21b2 <_i2c_m_sync_transfer+0xee>
    21aa:	7e0b      	ldrb	r3, [r1, #24]
    21ac:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    21ae:	3a01      	subs	r2, #1
    21b0:	d1f8      	bne.n	21a4 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    21b2:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21b4:	69fa      	ldr	r2, [r7, #28]
    21b6:	f012 0f04 	tst.w	r2, #4
    21ba:	d1fb      	bne.n	21b4 <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    21bc:	8b7a      	ldrh	r2, [r7, #26]
    21be:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    21c0:	f013 0f01 	tst.w	r3, #1
    21c4:	f000 80a3 	beq.w	230e <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    21c8:	f012 0f02 	tst.w	r2, #2
    21cc:	d03c      	beq.n	2248 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    21ce:	2301      	movs	r3, #1
    21d0:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    21d2:	886b      	ldrh	r3, [r5, #2]
    21d4:	b29b      	uxth	r3, r3
    21d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    21da:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    21dc:	886b      	ldrh	r3, [r5, #2]
    21de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21e2:	041b      	lsls	r3, r3, #16
    21e4:	0c1b      	lsrs	r3, r3, #16
    21e6:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    21e8:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    21ec:	2a00      	cmp	r2, #0
    21ee:	bf14      	ite	ne
    21f0:	f06f 0004 	mvnne.w	r0, #4
    21f4:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    21f8:	886b      	ldrh	r3, [r5, #2]
    21fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21fe:	041b      	lsls	r3, r3, #16
    2200:	0c1b      	lsrs	r3, r3, #16
    2202:	806b      	strh	r3, [r5, #2]
		return ret;
    2204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    2208:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    220c:	d09d      	beq.n	214a <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2214:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2216:	69fb      	ldr	r3, [r7, #28]
    2218:	f013 0f04 	tst.w	r3, #4
    221c:	d1fb      	bne.n	2216 <_i2c_m_sync_transfer+0x152>
    221e:	e79c      	b.n	215a <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2220:	8869      	ldrh	r1, [r5, #2]
    2222:	005a      	lsls	r2, r3, #1
    2224:	b2d2      	uxtb	r2, r2
    2226:	f001 0301 	and.w	r3, r1, #1
    222a:	431a      	orrs	r2, r3
    222c:	69fb      	ldr	r3, [r7, #28]
    222e:	f013 0f04 	tst.w	r3, #4
    2232:	d1fb      	bne.n	222c <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    223a:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    223c:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    223e:	69fb      	ldr	r3, [r7, #28]
    2240:	f013 0f04 	tst.w	r3, #4
    2244:	d1fb      	bne.n	223e <_i2c_m_sync_transfer+0x17a>
    2246:	e7a8      	b.n	219a <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2248:	f012 0f04 	tst.w	r2, #4
    224c:	d11d      	bne.n	228a <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    224e:	886b      	ldrh	r3, [r5, #2]
    2250:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2254:	d037      	beq.n	22c6 <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2256:	882b      	ldrh	r3, [r5, #0]
    2258:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    225a:	f003 0206 	and.w	r2, r3, #6
    225e:	69fb      	ldr	r3, [r7, #28]
    2260:	f013 0f04 	tst.w	r3, #4
    2264:	d1fb      	bne.n	225e <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    226c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2270:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2272:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2274:	69fb      	ldr	r3, [r7, #28]
    2276:	f013 0f04 	tst.w	r3, #4
    227a:	d1fb      	bne.n	2274 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    227c:	886b      	ldrh	r3, [r5, #2]
    227e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2282:	041b      	lsls	r3, r3, #16
    2284:	0c1b      	lsrs	r3, r3, #16
    2286:	806b      	strh	r3, [r5, #2]
    2288:	e069      	b.n	235e <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    228a:	686b      	ldr	r3, [r5, #4]
    228c:	2b00      	cmp	r3, #0
    228e:	dd04      	ble.n	229a <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    2290:	886b      	ldrh	r3, [r5, #2]
    2292:	b29b      	uxth	r3, r3
    2294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2298:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    229a:	886b      	ldrh	r3, [r5, #2]
    229c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    22a0:	d108      	bne.n	22b4 <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    22a2:	886b      	ldrh	r3, [r5, #2]
    22a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    22a8:	041b      	lsls	r3, r3, #16
    22aa:	0c1b      	lsrs	r3, r3, #16
    22ac:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    22ae:	f06f 0001 	mvn.w	r0, #1
    22b2:	e7a1      	b.n	21f8 <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22ba:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22bc:	69fb      	ldr	r3, [r7, #28]
    22be:	f013 0f04 	tst.w	r3, #4
    22c2:	d1fb      	bne.n	22bc <_i2c_m_sync_transfer+0x1f8>
    22c4:	e7ed      	b.n	22a2 <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    22c6:	686b      	ldr	r3, [r5, #4]
    22c8:	b99b      	cbnz	r3, 22f2 <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    22ca:	886b      	ldrh	r3, [r5, #2]
    22cc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    22d0:	d106      	bne.n	22e0 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    22d2:	886b      	ldrh	r3, [r5, #2]
    22d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    22d8:	041b      	lsls	r3, r3, #16
    22da:	0c1b      	lsrs	r3, r3, #16
    22dc:	806b      	strh	r3, [r5, #2]
    22de:	e03e      	b.n	235e <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22e6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22e8:	69fb      	ldr	r3, [r7, #28]
    22ea:	f013 0f04 	tst.w	r3, #4
    22ee:	d1fb      	bne.n	22e8 <_i2c_m_sync_transfer+0x224>
    22f0:	e7ef      	b.n	22d2 <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    22f2:	68ab      	ldr	r3, [r5, #8]
    22f4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    22f6:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22f8:	69fb      	ldr	r3, [r7, #28]
    22fa:	f013 0f04 	tst.w	r3, #4
    22fe:	d1fb      	bne.n	22f8 <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    2300:	68ab      	ldr	r3, [r5, #8]
    2302:	3301      	adds	r3, #1
    2304:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2306:	686b      	ldr	r3, [r5, #4]
    2308:	3b01      	subs	r3, #1
    230a:	606b      	str	r3, [r5, #4]
    230c:	e027      	b.n	235e <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    230e:	f013 0f02 	tst.w	r3, #2
    2312:	d024      	beq.n	235e <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2314:	686b      	ldr	r3, [r5, #4]
    2316:	2b00      	cmp	r3, #0
    2318:	d03a      	beq.n	2390 <_i2c_m_sync_transfer+0x2cc>
    231a:	f012 0f04 	tst.w	r2, #4
    231e:	d137      	bne.n	2390 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2320:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2324:	3b01      	subs	r3, #1
    2326:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2328:	2b00      	cmp	r3, #0
    232a:	f040 810d 	bne.w	2548 <_i2c_m_sync_transfer+0x484>
    232e:	2900      	cmp	r1, #0
    2330:	f000 8110 	beq.w	2554 <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    2334:	886b      	ldrh	r3, [r5, #2]
    2336:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    233a:	d118      	bne.n	236e <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    233c:	886b      	ldrh	r3, [r5, #2]
    233e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2342:	041b      	lsls	r3, r3, #16
    2344:	0c1b      	lsrs	r3, r3, #16
    2346:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2348:	68aa      	ldr	r2, [r5, #8]
    234a:	1c53      	adds	r3, r2, #1
    234c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    234e:	69fb      	ldr	r3, [r7, #28]
    2350:	f013 0f04 	tst.w	r3, #4
    2354:	d1fb      	bne.n	234e <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2356:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2358:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    235a:	2302      	movs	r3, #2
    235c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    235e:	2200      	movs	r2, #0
	return I2C_OK;
    2360:	4610      	mov	r0, r2
    2362:	2702      	movs	r7, #2
			return I2C_NACK;
    2364:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2368:	f04f 0e01 	mov.w	lr, #1
    236c:	e0b0      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2374:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2376:	69fb      	ldr	r3, [r7, #28]
    2378:	f013 0f04 	tst.w	r3, #4
    237c:	d1fb      	bne.n	2376 <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    237e:	687b      	ldr	r3, [r7, #4]
    2380:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2384:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2386:	69fb      	ldr	r3, [r7, #28]
    2388:	f013 0f04 	tst.w	r3, #4
    238c:	d1fb      	bne.n	2386 <_i2c_m_sync_transfer+0x2c2>
    238e:	e7d5      	b.n	233c <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2390:	2302      	movs	r3, #2
    2392:	763b      	strb	r3, [r7, #24]
    2394:	f06f 0001 	mvn.w	r0, #1
    2398:	e72e      	b.n	21f8 <_i2c_m_sync_transfer+0x134>
    239a:	bf00      	nop
    239c:	00001859 	.word	0x00001859
    23a0:	00005c64 	.word	0x00005c64
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23a4:	6863      	ldr	r3, [r4, #4]
    23a6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    23aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23ac:	69e3      	ldr	r3, [r4, #28]
    23ae:	f013 0f04 	tst.w	r3, #4
    23b2:	d1fb      	bne.n	23ac <_i2c_m_sync_transfer+0x2e8>
    23b4:	e0a1      	b.n	24fa <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    23b6:	f012 0f04 	tst.w	r2, #4
    23ba:	d11e      	bne.n	23fa <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    23bc:	886b      	ldrh	r3, [r5, #2]
    23be:	f413 6f80 	tst.w	r3, #1024	; 0x400
    23c2:	d037      	beq.n	2434 <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    23c4:	882b      	ldrh	r3, [r5, #0]
    23c6:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    23c8:	f003 0206 	and.w	r2, r3, #6
    23cc:	69e3      	ldr	r3, [r4, #28]
    23ce:	f013 0f04 	tst.w	r3, #4
    23d2:	d1fb      	bne.n	23cc <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    23d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    23da:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    23de:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    23e0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23e2:	69e3      	ldr	r3, [r4, #28]
    23e4:	f013 0f04 	tst.w	r3, #4
    23e8:	d1fb      	bne.n	23e2 <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    23ea:	886b      	ldrh	r3, [r5, #2]
    23ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    23f0:	041b      	lsls	r3, r3, #16
    23f2:	0c1b      	lsrs	r3, r3, #16
    23f4:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    23f6:	4602      	mov	r2, r0
    23f8:	e06a      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    23fa:	686b      	ldr	r3, [r5, #4]
    23fc:	2b00      	cmp	r3, #0
    23fe:	dd04      	ble.n	240a <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    2400:	886b      	ldrh	r3, [r5, #2]
    2402:	b29b      	uxth	r3, r3
    2404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2408:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    240a:	886b      	ldrh	r3, [r5, #2]
    240c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2410:	d107      	bne.n	2422 <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    2412:	886b      	ldrh	r3, [r5, #2]
    2414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2418:	041b      	lsls	r3, r3, #16
    241a:	0c1b      	lsrs	r3, r3, #16
    241c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    241e:	4662      	mov	r2, ip
    2420:	e056      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2422:	6863      	ldr	r3, [r4, #4]
    2424:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2428:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    242a:	69e3      	ldr	r3, [r4, #28]
    242c:	f013 0f04 	tst.w	r3, #4
    2430:	d1fb      	bne.n	242a <_i2c_m_sync_transfer+0x366>
    2432:	e7ee      	b.n	2412 <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    2434:	686b      	ldr	r3, [r5, #4]
    2436:	b9a3      	cbnz	r3, 2462 <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    2438:	886b      	ldrh	r3, [r5, #2]
    243a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    243e:	d107      	bne.n	2450 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    2440:	886b      	ldrh	r3, [r5, #2]
    2442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2446:	041b      	lsls	r3, r3, #16
    2448:	0c1b      	lsrs	r3, r3, #16
    244a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    244c:	4602      	mov	r2, r0
    244e:	e03f      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2450:	6863      	ldr	r3, [r4, #4]
    2452:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2456:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2458:	69e3      	ldr	r3, [r4, #28]
    245a:	f013 0f04 	tst.w	r3, #4
    245e:	d1fb      	bne.n	2458 <_i2c_m_sync_transfer+0x394>
    2460:	e7ee      	b.n	2440 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2462:	68ab      	ldr	r3, [r5, #8]
    2464:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2466:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2468:	69e3      	ldr	r3, [r4, #28]
    246a:	f013 0f04 	tst.w	r3, #4
    246e:	d1fb      	bne.n	2468 <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    2470:	68ab      	ldr	r3, [r5, #8]
    2472:	3301      	adds	r3, #1
    2474:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2476:	686b      	ldr	r3, [r5, #4]
    2478:	3b01      	subs	r3, #1
    247a:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    247c:	4602      	mov	r2, r0
    247e:	e027      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    2480:	f013 0f02 	tst.w	r3, #2
    2484:	d057      	beq.n	2536 <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2486:	686b      	ldr	r3, [r5, #4]
    2488:	2b00      	cmp	r3, #0
    248a:	d051      	beq.n	2530 <_i2c_m_sync_transfer+0x46c>
    248c:	f012 0f04 	tst.w	r2, #4
    2490:	d14e      	bne.n	2530 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2492:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2496:	3b01      	subs	r3, #1
    2498:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    249a:	2b00      	cmp	r3, #0
    249c:	f040 808c 	bne.w	25b8 <_i2c_m_sync_transfer+0x4f4>
    24a0:	2900      	cmp	r1, #0
    24a2:	f000 808f 	beq.w	25c4 <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    24a6:	886b      	ldrh	r3, [r5, #2]
    24a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    24ac:	d12f      	bne.n	250e <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    24ae:	886b      	ldrh	r3, [r5, #2]
    24b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24b4:	041b      	lsls	r3, r3, #16
    24b6:	0c1b      	lsrs	r3, r3, #16
    24b8:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    24ba:	68aa      	ldr	r2, [r5, #8]
    24bc:	1c53      	adds	r3, r2, #1
    24be:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24c0:	69e3      	ldr	r3, [r4, #28]
    24c2:	f013 0f04 	tst.w	r3, #4
    24c6:	d1fb      	bne.n	24c0 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    24c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ca:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    24cc:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    24ce:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    24d0:	886b      	ldrh	r3, [r5, #2]
    24d2:	f413 7f80 	tst.w	r3, #256	; 0x100
    24d6:	d030      	beq.n	253a <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    24d8:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    24da:	7e0b      	ldrb	r3, [r1, #24]
    24dc:	b2db      	uxtb	r3, r3
    24de:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    24e2:	f013 0f03 	tst.w	r3, #3
    24e6:	d142      	bne.n	256e <_i2c_m_sync_transfer+0x4aa>
    24e8:	7e0b      	ldrb	r3, [r1, #24]
    24ea:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    24ec:	3a01      	subs	r2, #1
    24ee:	d1f8      	bne.n	24e2 <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    24f0:	8873      	ldrh	r3, [r6, #2]
    24f2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    24f6:	f47f af55 	bne.w	23a4 <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    24fa:	886b      	ldrh	r3, [r5, #2]
    24fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2500:	041b      	lsls	r3, r3, #16
    2502:	0c1b      	lsrs	r3, r3, #16
    2504:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    2506:	f06f 0004 	mvn.w	r0, #4
			return ret;
    250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    250e:	6863      	ldr	r3, [r4, #4]
    2510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2514:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2516:	69e3      	ldr	r3, [r4, #28]
    2518:	f013 0f04 	tst.w	r3, #4
    251c:	d1fb      	bne.n	2516 <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    251e:	6863      	ldr	r3, [r4, #4]
    2520:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2524:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2526:	69e3      	ldr	r3, [r4, #28]
    2528:	f013 0f04 	tst.w	r3, #4
    252c:	d1fb      	bne.n	2526 <_i2c_m_sync_transfer+0x462>
    252e:	e7be      	b.n	24ae <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2530:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    2532:	4662      	mov	r2, ip
    2534:	e7cc      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    2536:	4602      	mov	r2, r0
    2538:	e7ca      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
    253a:	4610      	mov	r0, r2
    253c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    2540:	f06f 0005 	mvn.w	r0, #5
    2544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2548:	2b01      	cmp	r3, #1
    254a:	f47f aefd 	bne.w	2348 <_i2c_m_sync_transfer+0x284>
    254e:	2900      	cmp	r1, #0
    2550:	f43f aefa 	beq.w	2348 <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    255a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    255c:	69fb      	ldr	r3, [r7, #28]
    255e:	f013 0f04 	tst.w	r3, #4
    2562:	d1fb      	bne.n	255c <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    2564:	686b      	ldr	r3, [r5, #4]
    2566:	2b00      	cmp	r3, #0
    2568:	f43f aee4 	beq.w	2334 <_i2c_m_sync_transfer+0x270>
    256c:	e6ec      	b.n	2348 <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    256e:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2570:	69e2      	ldr	r2, [r4, #28]
    2572:	f012 0f04 	tst.w	r2, #4
    2576:	d1fb      	bne.n	2570 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2578:	8b62      	ldrh	r2, [r4, #26]
    257a:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    257c:	f013 0f01 	tst.w	r3, #1
    2580:	f43f af7e 	beq.w	2480 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2584:	f012 0f02 	tst.w	r2, #2
    2588:	f43f af15 	beq.w	23b6 <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    258c:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2590:	886b      	ldrh	r3, [r5, #2]
    2592:	b29b      	uxth	r3, r3
    2594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2598:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    259a:	886b      	ldrh	r3, [r5, #2]
    259c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    25a0:	041b      	lsls	r3, r3, #16
    25a2:	0c1b      	lsrs	r3, r3, #16
    25a4:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    25a6:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    25aa:	2a00      	cmp	r2, #0
    25ac:	bf14      	ite	ne
    25ae:	f06f 0204 	mvnne.w	r2, #4
    25b2:	f06f 0203 	mvneq.w	r2, #3
    25b6:	e78b      	b.n	24d0 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    25b8:	2b01      	cmp	r3, #1
    25ba:	f47f af7e 	bne.w	24ba <_i2c_m_sync_transfer+0x3f6>
    25be:	2900      	cmp	r1, #0
    25c0:	f43f af7b 	beq.w	24ba <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    25c4:	6863      	ldr	r3, [r4, #4]
    25c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    25ca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25cc:	69e3      	ldr	r3, [r4, #28]
    25ce:	f013 0f04 	tst.w	r3, #4
    25d2:	d1fb      	bne.n	25cc <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    25d4:	686b      	ldr	r3, [r5, #4]
    25d6:	2b00      	cmp	r3, #0
    25d8:	f43f af65 	beq.w	24a6 <_i2c_m_sync_transfer+0x3e2>
    25dc:	e76d      	b.n	24ba <_i2c_m_sync_transfer+0x3f6>
    25de:	bf00      	nop

000025e0 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    25e0:	b570      	push	{r4, r5, r6, lr}
    25e2:	4606      	mov	r6, r0
    25e4:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    25e6:	4608      	mov	r0, r1
    25e8:	4b5f      	ldr	r3, [pc, #380]	; (2768 <_spi_m_sync_init+0x188>)
    25ea:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    25ec:	2800      	cmp	r0, #0
    25ee:	d072      	beq.n	26d6 <_spi_m_sync_init+0xf6>
    25f0:	2801      	cmp	r0, #1
    25f2:	d06e      	beq.n	26d2 <_spi_m_sync_init+0xf2>
    25f4:	2804      	cmp	r0, #4
    25f6:	bf08      	it	eq
    25f8:	2502      	moveq	r5, #2
    25fa:	d06d      	beq.n	26d8 <_spi_m_sync_init+0xf8>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    25fc:	2e00      	cmp	r6, #0
    25fe:	f000 80a1 	beq.w	2744 <_spi_m_sync_init+0x164>
    2602:	2c00      	cmp	r4, #0
    2604:	f040 80a7 	bne.w	2756 <_spi_m_sync_init+0x176>
	return NULL;
    2608:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    260a:	2000      	movs	r0, #0
    260c:	f640 123c 	movw	r2, #2364	; 0x93c
    2610:	4956      	ldr	r1, [pc, #344]	; (276c <_spi_m_sync_init+0x18c>)
    2612:	4b57      	ldr	r3, [pc, #348]	; (2770 <_spi_m_sync_init+0x190>)
    2614:	4798      	blx	r3

	if (regs == NULL) {
    2616:	2d00      	cmp	r5, #0
    2618:	f000 8091 	beq.w	273e <_spi_m_sync_init+0x15e>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    261c:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    261e:	f013 0f01 	tst.w	r3, #1
    2622:	d11d      	bne.n	2660 <_spi_m_sync_init+0x80>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    2624:	682b      	ldr	r3, [r5, #0]
    2626:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    262a:	69e3      	ldr	r3, [r4, #28]
    262c:	f013 0f03 	tst.w	r3, #3
    2630:	d1fb      	bne.n	262a <_spi_m_sync_init+0x4a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2632:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2634:	f013 0f02 	tst.w	r3, #2
    2638:	d00b      	beq.n	2652 <_spi_m_sync_init+0x72>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    263a:	6823      	ldr	r3, [r4, #0]
    263c:	f023 0302 	bic.w	r3, r3, #2
    2640:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2642:	69e3      	ldr	r3, [r4, #28]
    2644:	f013 0f03 	tst.w	r3, #3
    2648:	d1fb      	bne.n	2642 <_spi_m_sync_init+0x62>
    264a:	69e3      	ldr	r3, [r4, #28]
    264c:	f013 0f02 	tst.w	r3, #2
    2650:	d1fb      	bne.n	264a <_spi_m_sync_init+0x6a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2652:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2656:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2658:	69e3      	ldr	r3, [r4, #28]
    265a:	f013 0f03 	tst.w	r3, #3
    265e:	d1fb      	bne.n	2658 <_spi_m_sync_init+0x78>
    2660:	69e3      	ldr	r3, [r4, #28]
    2662:	f013 0f01 	tst.w	r3, #1
    2666:	d1fb      	bne.n	2660 <_spi_m_sync_init+0x80>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2668:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    266a:	682b      	ldr	r3, [r5, #0]
    266c:	f003 031c 	and.w	r3, r3, #28
    2670:	2b08      	cmp	r3, #8
    2672:	d03b      	beq.n	26ec <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    2674:	f640 1206 	movw	r2, #2310	; 0x906
    2678:	493c      	ldr	r1, [pc, #240]	; (276c <_spi_m_sync_init+0x18c>)
    267a:	1c20      	adds	r0, r4, #0
    267c:	bf18      	it	ne
    267e:	2001      	movne	r0, #1
    2680:	4b3b      	ldr	r3, [pc, #236]	; (2770 <_spi_m_sync_init+0x190>)
    2682:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2684:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2686:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    268a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    268e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2690:	69e3      	ldr	r3, [r4, #28]
    2692:	f013 0f03 	tst.w	r3, #3
    2696:	d1fb      	bne.n	2690 <_spi_m_sync_init+0xb0>
	    (regs->ctrlb
    2698:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    269a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    269e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    26a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    26a6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26a8:	69e3      	ldr	r3, [r4, #28]
    26aa:	f013 0f17 	tst.w	r3, #23
    26ae:	d1fb      	bne.n	26a8 <_spi_m_sync_init+0xc8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    26b0:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    26b2:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    26b4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    26b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    26ba:	686b      	ldr	r3, [r5, #4]
    26bc:	f003 0307 	and.w	r3, r3, #7
    26c0:	2b00      	cmp	r3, #0
    26c2:	bf0c      	ite	eq
    26c4:	2301      	moveq	r3, #1
    26c6:	2302      	movne	r3, #2
    26c8:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    26ca:	89eb      	ldrh	r3, [r5, #14]
    26cc:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    26ce:	2000      	movs	r0, #0
    26d0:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    26d2:	2501      	movs	r5, #1
    26d4:	e000      	b.n	26d8 <_spi_m_sync_init+0xf8>
    26d6:	2500      	movs	r5, #0
			return &sercomspi_regs[i];
    26d8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    26dc:	4b25      	ldr	r3, [pc, #148]	; (2774 <_spi_m_sync_init+0x194>)
    26de:	441d      	add	r5, r3
	ASSERT(dev && hw);
    26e0:	2e00      	cmp	r6, #0
    26e2:	d092      	beq.n	260a <_spi_m_sync_init+0x2a>
    26e4:	2001      	movs	r0, #1
    26e6:	2c00      	cmp	r4, #0
    26e8:	d190      	bne.n	260c <_spi_m_sync_init+0x2c>
    26ea:	e78e      	b.n	260a <_spi_m_sync_init+0x2a>
	ASSERT(hw && regs);
    26ec:	f640 121a 	movw	r2, #2330	; 0x91a
    26f0:	491e      	ldr	r1, [pc, #120]	; (276c <_spi_m_sync_init+0x18c>)
    26f2:	1c20      	adds	r0, r4, #0
    26f4:	bf18      	it	ne
    26f6:	2001      	movne	r0, #1
    26f8:	4b1d      	ldr	r3, [pc, #116]	; (2770 <_spi_m_sync_init+0x190>)
    26fa:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    26fc:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    26fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2702:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2706:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2708:	69e3      	ldr	r3, [r4, #28]
    270a:	f013 0f03 	tst.w	r3, #3
    270e:	d1fb      	bne.n	2708 <_spi_m_sync_init+0x128>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2710:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2712:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    2716:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    271a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    271e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2722:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2724:	69e3      	ldr	r3, [r4, #28]
    2726:	f013 0f17 	tst.w	r3, #23
    272a:	d1fb      	bne.n	2724 <_spi_m_sync_init+0x144>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    272c:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    272e:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2730:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2732:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2736:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2738:	2b00      	cmp	r3, #0
    273a:	d1fc      	bne.n	2736 <_spi_m_sync_init+0x156>
    273c:	e7bd      	b.n	26ba <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    273e:	f06f 000c 	mvn.w	r0, #12
    2742:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2744:	f640 123c 	movw	r2, #2364	; 0x93c
    2748:	4908      	ldr	r1, [pc, #32]	; (276c <_spi_m_sync_init+0x18c>)
    274a:	2000      	movs	r0, #0
    274c:	4b08      	ldr	r3, [pc, #32]	; (2770 <_spi_m_sync_init+0x190>)
    274e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2750:	f06f 000c 	mvn.w	r0, #12
    2754:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2756:	f640 123c 	movw	r2, #2364	; 0x93c
    275a:	4904      	ldr	r1, [pc, #16]	; (276c <_spi_m_sync_init+0x18c>)
    275c:	2001      	movs	r0, #1
    275e:	4b04      	ldr	r3, [pc, #16]	; (2770 <_spi_m_sync_init+0x190>)
    2760:	4798      	blx	r3
		return ERR_INVALID_ARG;
    2762:	f06f 000c 	mvn.w	r0, #12
    2766:	bd70      	pop	{r4, r5, r6, pc}
    2768:	00001f49 	.word	0x00001f49
    276c:	00005c64 	.word	0x00005c64
    2770:	00001859 	.word	0x00001859
    2774:	00005c30 	.word	0x00005c30

00002778 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    277c:	4681      	mov	r9, r0
    277e:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    2780:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2782:	f8d1 8000 	ldr.w	r8, [r1]
    2786:	684d      	ldr	r5, [r1, #4]
    2788:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    278a:	b1a8      	cbz	r0, 27b8 <_spi_m_sync_trans+0x40>
    278c:	1c20      	adds	r0, r4, #0
    278e:	bf18      	it	ne
    2790:	2001      	movne	r0, #1
    2792:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    2796:	492e      	ldr	r1, [pc, #184]	; (2850 <_spi_m_sync_trans+0xd8>)
    2798:	4b2e      	ldr	r3, [pc, #184]	; (2854 <_spi_m_sync_trans+0xdc>)
    279a:	4798      	blx	r3
    279c:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    279e:	f013 0f07 	tst.w	r3, #7
    27a2:	d134      	bne.n	280e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27a4:	69e0      	ldr	r0, [r4, #28]
    27a6:	f010 0003 	ands.w	r0, r0, #3
    27aa:	d1fb      	bne.n	27a4 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    27ac:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    27ae:	f013 0f02 	tst.w	r3, #2
    27b2:	d030      	beq.n	2816 <_spi_m_sync_trans+0x9e>
    27b4:	4602      	mov	r2, r0
    27b6:	e008      	b.n	27ca <_spi_m_sync_trans+0x52>
    27b8:	2000      	movs	r0, #0
    27ba:	e7ea      	b.n	2792 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    27bc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    27be:	f013 0f80 	tst.w	r3, #128	; 0x80
    27c2:	d112      	bne.n	27ea <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    27c4:	68b3      	ldr	r3, [r6, #8]
    27c6:	4283      	cmp	r3, r0
    27c8:	d91e      	bls.n	2808 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    27ca:	7e23      	ldrb	r3, [r4, #24]
    27cc:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    27ce:	f013 0f04 	tst.w	r3, #4
    27d2:	d024      	beq.n	281e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    27d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    27d6:	2d00      	cmp	r5, #0
    27d8:	d0f0      	beq.n	27bc <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    27da:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    27dc:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    27de:	bf91      	iteee	ls
    27e0:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    27e2:	0a09      	lsrhi	r1, r1, #8
    27e4:	7069      	strbhi	r1, [r5, #1]
    27e6:	3502      	addhi	r5, #2
    27e8:	e7e8      	b.n	27bc <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    27ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    27ee:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    27f0:	2380      	movs	r3, #128	; 0x80
    27f2:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    27f4:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    27f8:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    27fa:	f013 0f03 	tst.w	r3, #3
    27fe:	d0fb      	beq.n	27f8 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2800:	2303      	movs	r3, #3
    2802:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    2804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2808:	4293      	cmp	r3, r2
    280a:	d8de      	bhi.n	27ca <_spi_m_sync_trans+0x52>
    280c:	e7f4      	b.n	27f8 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    280e:	f06f 0003 	mvn.w	r0, #3
    2812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    2816:	f06f 0013 	mvn.w	r0, #19
    281a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    281e:	4290      	cmp	r0, r2
    2820:	d8cd      	bhi.n	27be <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2822:	f013 0f01 	tst.w	r3, #1
    2826:	d0ca      	beq.n	27be <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2828:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    282c:	f1b8 0f00 	cmp.w	r8, #0
    2830:	d00b      	beq.n	284a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    2832:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    2836:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    2838:	bf91      	iteee	ls
    283a:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    283e:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    2842:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    2846:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    284a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    284c:	62a1      	str	r1, [r4, #40]	; 0x28
    284e:	e7b6      	b.n	27be <_spi_m_sync_trans+0x46>
    2850:	00005c64 	.word	0x00005c64
    2854:	00001859 	.word	0x00001859

00002858 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2858:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    285a:	6813      	ldr	r3, [r2, #0]
    285c:	f043 0302 	orr.w	r3, r3, #2
    2860:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2862:	6913      	ldr	r3, [r2, #16]
    2864:	f013 0f03 	tst.w	r3, #3
    2868:	d1fb      	bne.n	2862 <_tc_timer_start+0xa>
}
    286a:	4770      	bx	lr

0000286c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    286c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    286e:	6813      	ldr	r3, [r2, #0]
    2870:	f023 0302 	bic.w	r3, r3, #2
    2874:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2876:	6913      	ldr	r3, [r2, #16]
    2878:	f013 0f03 	tst.w	r3, #3
    287c:	d1fb      	bne.n	2876 <_tc_timer_stop+0xa>
}
    287e:	4770      	bx	lr

00002880 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2880:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2882:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2884:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2888:	2a02      	cmp	r2, #2
    288a:	d00a      	beq.n	28a2 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    288c:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    288e:	f012 0f0c 	tst.w	r2, #12
    2892:	d10c      	bne.n	28ae <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2894:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2896:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2898:	691a      	ldr	r2, [r3, #16]
    289a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    289e:	d1fb      	bne.n	2898 <_tc_timer_set_period+0x18>
    28a0:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    28a2:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28a4:	691a      	ldr	r2, [r3, #16]
    28a6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    28aa:	d1fb      	bne.n	28a4 <_tc_timer_set_period+0x24>
    28ac:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28ae:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    28b0:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    28b4:	2a01      	cmp	r2, #1
    28b6:	d000      	beq.n	28ba <_tc_timer_set_period+0x3a>
    28b8:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    28ba:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    28bc:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28be:	691a      	ldr	r2, [r3, #16]
    28c0:	f012 0f20 	tst.w	r2, #32
    28c4:	d1fb      	bne.n	28be <_tc_timer_set_period+0x3e>
    28c6:	e7f7      	b.n	28b8 <_tc_timer_set_period+0x38>

000028c8 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    28c8:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28ca:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    28cc:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    28d0:	2a02      	cmp	r2, #2
    28d2:	d00a      	beq.n	28ea <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28d4:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    28d6:	f012 0f0c 	tst.w	r2, #12
    28da:	d10c      	bne.n	28f6 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28dc:	691a      	ldr	r2, [r3, #16]
    28de:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    28e2:	d1fb      	bne.n	28dc <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    28e4:	8b98      	ldrh	r0, [r3, #28]
    28e6:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    28e8:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28ea:	691a      	ldr	r2, [r3, #16]
    28ec:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    28f0:	d1fb      	bne.n	28ea <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    28f2:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    28f4:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28f6:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    28f8:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    28fc:	2a01      	cmp	r2, #1
    28fe:	d001      	beq.n	2904 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    2900:	2000      	movs	r0, #0
}
    2902:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2904:	691a      	ldr	r2, [r3, #16]
    2906:	f012 0f20 	tst.w	r2, #32
    290a:	d1fb      	bne.n	2904 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    290c:	7ed8      	ldrb	r0, [r3, #27]
    290e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    2910:	4770      	bx	lr

00002912 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2912:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2914:	6913      	ldr	r3, [r2, #16]
    2916:	f013 0f03 	tst.w	r3, #3
    291a:	d1fb      	bne.n	2914 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    291c:	6810      	ldr	r0, [r2, #0]
}
    291e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2922:	4770      	bx	lr

00002924 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    2924:	b570      	push	{r4, r5, r6, lr}
    2926:	b088      	sub	sp, #32
    2928:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    292a:	466c      	mov	r4, sp
    292c:	4d12      	ldr	r5, [pc, #72]	; (2978 <get_tc_index+0x54>)
    292e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2932:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    293a:	9b00      	ldr	r3, [sp, #0]
    293c:	42b3      	cmp	r3, r6
    293e:	d00b      	beq.n	2958 <get_tc_index+0x34>
    2940:	4630      	mov	r0, r6
    2942:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2944:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2946:	f852 1b04 	ldr.w	r1, [r2], #4
    294a:	4281      	cmp	r1, r0
    294c:	d005      	beq.n	295a <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    294e:	3301      	adds	r3, #1
    2950:	2b08      	cmp	r3, #8
    2952:	d1f8      	bne.n	2946 <get_tc_index+0x22>
			return i;
    2954:	2000      	movs	r0, #0
    2956:	e00b      	b.n	2970 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2958:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    295a:	f013 0fff 	tst.w	r3, #255	; 0xff
    295e:	d009      	beq.n	2974 <get_tc_index+0x50>
	ASSERT(false);
    2960:	f240 1249 	movw	r2, #329	; 0x149
    2964:	4905      	ldr	r1, [pc, #20]	; (297c <get_tc_index+0x58>)
    2966:	2000      	movs	r0, #0
    2968:	4b05      	ldr	r3, [pc, #20]	; (2980 <get_tc_index+0x5c>)
    296a:	4798      	blx	r3
	return -1;
    296c:	f04f 30ff 	mov.w	r0, #4294967295
}
    2970:	b008      	add	sp, #32
    2972:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    2974:	2000      	movs	r0, #0
    2976:	e7fb      	b.n	2970 <get_tc_index+0x4c>
    2978:	00005c80 	.word	0x00005c80
    297c:	00005cb4 	.word	0x00005cb4
    2980:	00001859 	.word	0x00001859

00002984 <_tc_timer_init>:
{
    2984:	b570      	push	{r4, r5, r6, lr}
    2986:	4606      	mov	r6, r0
    2988:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    298a:	4608      	mov	r0, r1
    298c:	4b60      	ldr	r3, [pc, #384]	; (2b10 <_tc_timer_init+0x18c>)
    298e:	4798      	blx	r3
    2990:	4605      	mov	r5, r0
	device->hw = hw;
    2992:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2994:	229a      	movs	r2, #154	; 0x9a
    2996:	495f      	ldr	r1, [pc, #380]	; (2b14 <_tc_timer_init+0x190>)
    2998:	2001      	movs	r0, #1
    299a:	4b5f      	ldr	r3, [pc, #380]	; (2b18 <_tc_timer_init+0x194>)
    299c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    299e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    29a0:	f013 0f01 	tst.w	r3, #1
    29a4:	d119      	bne.n	29da <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29a6:	6923      	ldr	r3, [r4, #16]
    29a8:	f013 0f03 	tst.w	r3, #3
    29ac:	d1fb      	bne.n	29a6 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    29ae:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    29b0:	f013 0f02 	tst.w	r3, #2
    29b4:	d00b      	beq.n	29ce <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    29b6:	6823      	ldr	r3, [r4, #0]
    29b8:	f023 0302 	bic.w	r3, r3, #2
    29bc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29be:	6923      	ldr	r3, [r4, #16]
    29c0:	f013 0f03 	tst.w	r3, #3
    29c4:	d1fb      	bne.n	29be <_tc_timer_init+0x3a>
    29c6:	6923      	ldr	r3, [r4, #16]
    29c8:	f013 0f02 	tst.w	r3, #2
    29cc:	d1fb      	bne.n	29c6 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    29ce:	2301      	movs	r3, #1
    29d0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29d2:	6923      	ldr	r3, [r4, #16]
    29d4:	f013 0f03 	tst.w	r3, #3
    29d8:	d1fb      	bne.n	29d2 <_tc_timer_init+0x4e>
    29da:	6923      	ldr	r3, [r4, #16]
    29dc:	f013 0f01 	tst.w	r3, #1
    29e0:	d1fb      	bne.n	29da <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    29e2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    29e6:	4a4d      	ldr	r2, [pc, #308]	; (2b1c <_tc_timer_init+0x198>)
    29e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    29ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    29ee:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29f0:	6923      	ldr	r3, [r4, #16]
    29f2:	f013 0f03 	tst.w	r3, #3
    29f6:	d1fb      	bne.n	29f0 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    29f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    29fc:	4947      	ldr	r1, [pc, #284]	; (2b1c <_tc_timer_init+0x198>)
    29fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2a02:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2a06:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2a0a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2a0c:	2301      	movs	r3, #1
    2a0e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2a10:	f002 020c 	and.w	r2, r2, #12
    2a14:	2a08      	cmp	r2, #8
    2a16:	d048      	beq.n	2aaa <_tc_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2a18:	2a00      	cmp	r2, #0
    2a1a:	d158      	bne.n	2ace <_tc_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2a1c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a20:	4a3e      	ldr	r2, [pc, #248]	; (2b1c <_tc_timer_init+0x198>)
    2a22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2a28:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a2a:	6923      	ldr	r3, [r4, #16]
    2a2c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2a30:	d1fb      	bne.n	2a2a <_tc_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2a32:	2300      	movs	r3, #0
    2a34:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a36:	6923      	ldr	r3, [r4, #16]
    2a38:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2a3c:	d1fb      	bne.n	2a36 <_tc_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2a3e:	2301      	movs	r3, #1
    2a40:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    2a42:	4b37      	ldr	r3, [pc, #220]	; (2b20 <_tc_timer_init+0x19c>)
    2a44:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    2a46:	bf04      	itt	eq
    2a48:	4b36      	ldreq	r3, [pc, #216]	; (2b24 <_tc_timer_init+0x1a0>)
    2a4a:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    2a4c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a50:	4a32      	ldr	r2, [pc, #200]	; (2b1c <_tc_timer_init+0x198>)
    2a52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a56:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	db23      	blt.n	2aa6 <_tc_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a5e:	095a      	lsrs	r2, r3, #5
    2a60:	f003 031f 	and.w	r3, r3, #31
    2a64:	2101      	movs	r1, #1
    2a66:	fa01 f303 	lsl.w	r3, r1, r3
    2a6a:	3220      	adds	r2, #32
    2a6c:	492e      	ldr	r1, [pc, #184]	; (2b28 <_tc_timer_init+0x1a4>)
    2a6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a76:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2a7a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2a7e:	4b27      	ldr	r3, [pc, #156]	; (2b1c <_tc_timer_init+0x198>)
    2a80:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2a84:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2a88:	2b00      	cmp	r3, #0
    2a8a:	db0c      	blt.n	2aa6 <_tc_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a8c:	0959      	lsrs	r1, r3, #5
    2a8e:	f003 031f 	and.w	r3, r3, #31
    2a92:	2201      	movs	r2, #1
    2a94:	fa02 f303 	lsl.w	r3, r2, r3
    2a98:	4a23      	ldr	r2, [pc, #140]	; (2b28 <_tc_timer_init+0x1a4>)
    2a9a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2a9e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2aa6:	2000      	movs	r0, #0
    2aa8:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2aaa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2aae:	4a1b      	ldr	r2, [pc, #108]	; (2b1c <_tc_timer_init+0x198>)
    2ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2ab6:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ab8:	6923      	ldr	r3, [r4, #16]
    2aba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2abe:	d1fb      	bne.n	2ab8 <_tc_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2ac0:	2300      	movs	r3, #0
    2ac2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ac4:	6923      	ldr	r3, [r4, #16]
    2ac6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2aca:	d1fb      	bne.n	2ac4 <_tc_timer_init+0x140>
    2acc:	e7b7      	b.n	2a3e <_tc_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2ace:	2a04      	cmp	r2, #4
    2ad0:	d1b5      	bne.n	2a3e <_tc_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2ad2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ad6:	4a11      	ldr	r2, [pc, #68]	; (2b1c <_tc_timer_init+0x198>)
    2ad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2adc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2ae0:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ae2:	6923      	ldr	r3, [r4, #16]
    2ae4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2ae8:	d1fb      	bne.n	2ae2 <_tc_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2aea:	2300      	movs	r3, #0
    2aec:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2aee:	6923      	ldr	r3, [r4, #16]
    2af0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2af4:	d1fb      	bne.n	2aee <_tc_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2af6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2afa:	4a08      	ldr	r2, [pc, #32]	; (2b1c <_tc_timer_init+0x198>)
    2afc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b00:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    2b04:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b06:	6923      	ldr	r3, [r4, #16]
    2b08:	f013 0f20 	tst.w	r3, #32
    2b0c:	d1fb      	bne.n	2b06 <_tc_timer_init+0x182>
    2b0e:	e796      	b.n	2a3e <_tc_timer_init+0xba>
    2b10:	00002925 	.word	0x00002925
    2b14:	00005cb4 	.word	0x00005cb4
    2b18:	00001859 	.word	0x00001859
    2b1c:	00005c80 	.word	0x00005c80
    2b20:	40003800 	.word	0x40003800
    2b24:	200006a0 	.word	0x200006a0
    2b28:	e000e100 	.word	0xe000e100

00002b2c <_tc_timer_deinit>:
{
    2b2c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2b2e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2b30:	4620      	mov	r0, r4
    2b32:	4b18      	ldr	r3, [pc, #96]	; (2b94 <_tc_timer_deinit+0x68>)
    2b34:	4798      	blx	r3
    2b36:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2b38:	22c7      	movs	r2, #199	; 0xc7
    2b3a:	4917      	ldr	r1, [pc, #92]	; (2b98 <_tc_timer_deinit+0x6c>)
    2b3c:	2001      	movs	r0, #1
    2b3e:	4b17      	ldr	r3, [pc, #92]	; (2b9c <_tc_timer_deinit+0x70>)
    2b40:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2b42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2b46:	4b16      	ldr	r3, [pc, #88]	; (2ba0 <_tc_timer_deinit+0x74>)
    2b48:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2b4c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2b50:	2b00      	cmp	r3, #0
    2b52:	db0d      	blt.n	2b70 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b54:	095a      	lsrs	r2, r3, #5
    2b56:	f003 031f 	and.w	r3, r3, #31
    2b5a:	2101      	movs	r1, #1
    2b5c:	fa01 f303 	lsl.w	r3, r1, r3
    2b60:	3220      	adds	r2, #32
    2b62:	4910      	ldr	r1, [pc, #64]	; (2ba4 <_tc_timer_deinit+0x78>)
    2b64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2b68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b6c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2b70:	6823      	ldr	r3, [r4, #0]
    2b72:	f023 0302 	bic.w	r3, r3, #2
    2b76:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b78:	6923      	ldr	r3, [r4, #16]
    2b7a:	f013 0f03 	tst.w	r3, #3
    2b7e:	d1fb      	bne.n	2b78 <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    2b80:	6823      	ldr	r3, [r4, #0]
    2b82:	f043 0301 	orr.w	r3, r3, #1
    2b86:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b88:	6923      	ldr	r3, [r4, #16]
    2b8a:	f013 0f01 	tst.w	r3, #1
    2b8e:	d1fb      	bne.n	2b88 <_tc_timer_deinit+0x5c>
}
    2b90:	bd38      	pop	{r3, r4, r5, pc}
    2b92:	bf00      	nop
    2b94:	00002925 	.word	0x00002925
    2b98:	00005cb4 	.word	0x00005cb4
    2b9c:	00001859 	.word	0x00001859
    2ba0:	00005c80 	.word	0x00005c80
    2ba4:	e000e100 	.word	0xe000e100

00002ba8 <_tc_timer_set_irq>:
{
    2ba8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2baa:	68c0      	ldr	r0, [r0, #12]
    2bac:	4b09      	ldr	r3, [pc, #36]	; (2bd4 <_tc_timer_set_irq+0x2c>)
    2bae:	4798      	blx	r3
    2bb0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2bb2:	f44f 728e 	mov.w	r2, #284	; 0x11c
    2bb6:	4908      	ldr	r1, [pc, #32]	; (2bd8 <_tc_timer_set_irq+0x30>)
    2bb8:	2001      	movs	r0, #1
    2bba:	4b08      	ldr	r3, [pc, #32]	; (2bdc <_tc_timer_set_irq+0x34>)
    2bbc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2bbe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2bc2:	4b07      	ldr	r3, [pc, #28]	; (2be0 <_tc_timer_set_irq+0x38>)
    2bc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2bc8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    2bcc:	4b05      	ldr	r3, [pc, #20]	; (2be4 <_tc_timer_set_irq+0x3c>)
    2bce:	4798      	blx	r3
    2bd0:	bd10      	pop	{r4, pc}
    2bd2:	bf00      	nop
    2bd4:	00002925 	.word	0x00002925
    2bd8:	00005cb4 	.word	0x00005cb4
    2bdc:	00001859 	.word	0x00001859
    2be0:	00005c80 	.word	0x00005c80
    2be4:	00001a89 	.word	0x00001a89

00002be8 <_tc_get_timer>:
}
    2be8:	4800      	ldr	r0, [pc, #0]	; (2bec <_tc_get_timer+0x4>)
    2bea:	4770      	bx	lr
    2bec:	20000094 	.word	0x20000094

00002bf0 <TC0_Handler>:
{
    2bf0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    2bf2:	4b06      	ldr	r3, [pc, #24]	; (2c0c <TC0_Handler+0x1c>)
    2bf4:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2bf6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2bf8:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2bfa:	f012 0f01 	tst.w	r2, #1
    2bfe:	d100      	bne.n	2c02 <TC0_Handler+0x12>
    2c00:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2c02:	2201      	movs	r2, #1
    2c04:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    2c06:	6803      	ldr	r3, [r0, #0]
    2c08:	4798      	blx	r3
}
    2c0a:	e7f9      	b.n	2c00 <TC0_Handler+0x10>
    2c0c:	200006a0 	.word	0x200006a0

00002c10 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2c10:	2000      	movs	r0, #0
    2c12:	4770      	bx	lr

00002c14 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2c14:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2c16:	7c83      	ldrb	r3, [r0, #18]
    2c18:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2c1c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2c1e:	f002 0107 	and.w	r1, r2, #7
    2c22:	2901      	cmp	r1, #1
    2c24:	d00b      	beq.n	2c3e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c26:	015a      	lsls	r2, r3, #5
    2c28:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c2c:	2110      	movs	r1, #16
    2c2e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2c32:	015b      	lsls	r3, r3, #5
    2c34:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c38:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2c3c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2c3e:	f012 0f40 	tst.w	r2, #64	; 0x40
    2c42:	d00c      	beq.n	2c5e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    2c44:	7cc2      	ldrb	r2, [r0, #19]
    2c46:	f36f 1286 	bfc	r2, #6, #1
    2c4a:	74c2      	strb	r2, [r0, #19]
    2c4c:	015a      	lsls	r2, r3, #5
    2c4e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2c52:	2180      	movs	r1, #128	; 0x80
    2c54:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2c58:	2140      	movs	r1, #64	; 0x40
    2c5a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    2c5e:	7cc2      	ldrb	r2, [r0, #19]
    2c60:	f36f 02c3 	bfc	r2, #3, #1
    2c64:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2c66:	4909      	ldr	r1, [pc, #36]	; (2c8c <_usb_d_dev_handle_setup+0x78>)
    2c68:	015a      	lsls	r2, r3, #5
    2c6a:	188c      	adds	r4, r1, r2
    2c6c:	2500      	movs	r5, #0
    2c6e:	72a5      	strb	r5, [r4, #10]
    2c70:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c72:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    2c76:	246f      	movs	r4, #111	; 0x6f
    2c78:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2c7c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c80:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    2c84:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    2c86:	7c80      	ldrb	r0, [r0, #18]
    2c88:	4798      	blx	r3
    2c8a:	bd38      	pop	{r3, r4, r5, pc}
    2c8c:	200006a4 	.word	0x200006a4

00002c90 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2c90:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2c92:	2320      	movs	r3, #32
    2c94:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2c98:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2c9a:	7c83      	ldrb	r3, [r0, #18]
    2c9c:	f003 030f 	and.w	r3, r3, #15
    2ca0:	015b      	lsls	r3, r3, #5
    2ca2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ca6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2caa:	4b03      	ldr	r3, [pc, #12]	; (2cb8 <_usb_d_dev_handle_stall+0x28>)
    2cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2cae:	6882      	ldr	r2, [r0, #8]
    2cb0:	2101      	movs	r1, #1
    2cb2:	7c80      	ldrb	r0, [r0, #18]
    2cb4:	4798      	blx	r3
    2cb6:	bd08      	pop	{r3, pc}
    2cb8:	200006a4 	.word	0x200006a4

00002cbc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2cbc:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2cbe:	7c84      	ldrb	r4, [r0, #18]
    2cc0:	2cff      	cmp	r4, #255	; 0xff
    2cc2:	d003      	beq.n	2ccc <_usb_d_dev_trans_done+0x10>
    2cc4:	7cc3      	ldrb	r3, [r0, #19]
    2cc6:	f013 0f40 	tst.w	r3, #64	; 0x40
    2cca:	d100      	bne.n	2cce <_usb_d_dev_trans_done+0x12>
    2ccc:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    2cce:	7cc2      	ldrb	r2, [r0, #19]
    2cd0:	f36f 1286 	bfc	r2, #6, #1
    2cd4:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2cd6:	4a03      	ldr	r2, [pc, #12]	; (2ce4 <_usb_d_dev_trans_done+0x28>)
    2cd8:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2cda:	6882      	ldr	r2, [r0, #8]
    2cdc:	4620      	mov	r0, r4
    2cde:	47a8      	blx	r5
    2ce0:	e7f4      	b.n	2ccc <_usb_d_dev_trans_done+0x10>
    2ce2:	bf00      	nop
    2ce4:	200006a4 	.word	0x200006a4

00002ce8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2ce8:	b530      	push	{r4, r5, lr}
    2cea:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2cec:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2cee:	2425      	movs	r4, #37	; 0x25
    2cf0:	f88d 4004 	strb.w	r4, [sp, #4]
    2cf4:	244a      	movs	r4, #74	; 0x4a
    2cf6:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2cfa:	2bff      	cmp	r3, #255	; 0xff
    2cfc:	d01e      	beq.n	2d3c <_usb_d_dev_trans_stop+0x54>
    2cfe:	7cc4      	ldrb	r4, [r0, #19]
    2d00:	f014 0f40 	tst.w	r4, #64	; 0x40
    2d04:	d01a      	beq.n	2d3c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2d06:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2d0a:	b1c9      	cbz	r1, 2d40 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2d0c:	0163      	lsls	r3, r4, #5
    2d0e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d12:	2580      	movs	r5, #128	; 0x80
    2d14:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2d18:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2d1a:	a902      	add	r1, sp, #8
    2d1c:	440b      	add	r3, r1
    2d1e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d22:	0163      	lsls	r3, r4, #5
    2d24:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d28:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2d2c:	0163      	lsls	r3, r4, #5
    2d2e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d32:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2d36:	4611      	mov	r1, r2
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <_usb_d_dev_trans_stop+0x68>)
    2d3a:	4798      	blx	r3
}
    2d3c:	b003      	add	sp, #12
    2d3e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2d40:	0163      	lsls	r3, r4, #5
    2d42:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d46:	2540      	movs	r5, #64	; 0x40
    2d48:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    2d4c:	e7e4      	b.n	2d18 <_usb_d_dev_trans_stop+0x30>
    2d4e:	bf00      	nop
    2d50:	00002cbd 	.word	0x00002cbd

00002d54 <_usb_d_dev_handle_trfail>:
{
    2d54:	b530      	push	{r4, r5, lr}
    2d56:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2d58:	7c83      	ldrb	r3, [r0, #18]
    2d5a:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2d5e:	2204      	movs	r2, #4
    2d60:	f88d 2004 	strb.w	r2, [sp, #4]
    2d64:	2208      	movs	r2, #8
    2d66:	f88d 2005 	strb.w	r2, [sp, #5]
    2d6a:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    2d6c:	460c      	mov	r4, r1
    2d6e:	b391      	cbz	r1, 2dd6 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2d70:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    2d74:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2d78:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    2d7c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2d80:	4a32      	ldr	r2, [pc, #200]	; (2e4c <_usb_d_dev_handle_trfail+0xf8>)
    2d82:	440a      	add	r2, r1
    2d84:	7a91      	ldrb	r1, [r2, #10]
    2d86:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2d88:	2d02      	cmp	r5, #2
    2d8a:	d02c      	beq.n	2de6 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    2d8c:	f011 0f02 	tst.w	r1, #2
    2d90:	d045      	beq.n	2e1e <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2d92:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2d94:	7a91      	ldrb	r1, [r2, #10]
    2d96:	f36f 0141 	bfc	r1, #1, #1
    2d9a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2d9c:	aa02      	add	r2, sp, #8
    2d9e:	4422      	add	r2, r4
    2da0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2da4:	015a      	lsls	r2, r3, #5
    2da6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2daa:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2dae:	015b      	lsls	r3, r3, #5
    2db0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2db4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2db8:	f005 0307 	and.w	r3, r5, #7
    2dbc:	2b01      	cmp	r3, #1
    2dbe:	d143      	bne.n	2e48 <_usb_d_dev_handle_trfail+0xf4>
    2dc0:	7cc3      	ldrb	r3, [r0, #19]
    2dc2:	f013 0f40 	tst.w	r3, #64	; 0x40
    2dc6:	d03f      	beq.n	2e48 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2dc8:	09d9      	lsrs	r1, r3, #7
    2dca:	428c      	cmp	r4, r1
    2dcc:	d03c      	beq.n	2e48 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2dce:	2200      	movs	r2, #0
    2dd0:	4b1f      	ldr	r3, [pc, #124]	; (2e50 <_usb_d_dev_handle_trfail+0xfc>)
    2dd2:	4798      	blx	r3
    2dd4:	e038      	b.n	2e48 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2dd6:	0159      	lsls	r1, r3, #5
    2dd8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2ddc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2de0:	f005 0507 	and.w	r5, r5, #7
    2de4:	e7ca      	b.n	2d7c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2de6:	f011 0f01 	tst.w	r1, #1
    2dea:	d0cf      	beq.n	2d8c <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2dec:	7a91      	ldrb	r1, [r2, #10]
    2dee:	f36f 0100 	bfc	r1, #0, #1
    2df2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2df4:	aa02      	add	r2, sp, #8
    2df6:	4422      	add	r2, r4
    2df8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2dfc:	015a      	lsls	r2, r3, #5
    2dfe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2e02:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2e06:	015b      	lsls	r3, r3, #5
    2e08:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e0c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2e10:	2204      	movs	r2, #4
    2e12:	1c21      	adds	r1, r4, #0
    2e14:	bf18      	it	ne
    2e16:	2101      	movne	r1, #1
    2e18:	4b0d      	ldr	r3, [pc, #52]	; (2e50 <_usb_d_dev_handle_trfail+0xfc>)
    2e1a:	4798      	blx	r3
    2e1c:	e014      	b.n	2e48 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2e1e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    2e22:	4a0a      	ldr	r2, [pc, #40]	; (2e4c <_usb_d_dev_handle_trfail+0xf8>)
    2e24:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2e28:	2100      	movs	r1, #0
    2e2a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2e2c:	aa02      	add	r2, sp, #8
    2e2e:	4414      	add	r4, r2
    2e30:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2e34:	015a      	lsls	r2, r3, #5
    2e36:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2e3a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2e3e:	015b      	lsls	r3, r3, #5
    2e40:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e44:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2e48:	b003      	add	sp, #12
    2e4a:	bd30      	pop	{r4, r5, pc}
    2e4c:	200006a4 	.word	0x200006a4
    2e50:	00002ce9 	.word	0x00002ce9

00002e54 <_usb_d_dev_reset_epts>:
{
    2e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e58:	4d0c      	ldr	r5, [pc, #48]	; (2e8c <_usb_d_dev_reset_epts+0x38>)
    2e5a:	f105 0474 	add.w	r4, r5, #116	; 0x74
    2e5e:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2e62:	f04f 0803 	mov.w	r8, #3
    2e66:	4f0a      	ldr	r7, [pc, #40]	; (2e90 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2e68:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2e6a:	4641      	mov	r1, r8
    2e6c:	4620      	mov	r0, r4
    2e6e:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    2e70:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2e72:	2300      	movs	r3, #0
    2e74:	74e3      	strb	r3, [r4, #19]
    2e76:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2e78:	42ac      	cmp	r4, r5
    2e7a:	d1f6      	bne.n	2e6a <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2e7c:	2260      	movs	r2, #96	; 0x60
    2e7e:	4619      	mov	r1, r3
    2e80:	4802      	ldr	r0, [pc, #8]	; (2e8c <_usb_d_dev_reset_epts+0x38>)
    2e82:	4b04      	ldr	r3, [pc, #16]	; (2e94 <_usb_d_dev_reset_epts+0x40>)
    2e84:	4798      	blx	r3
    2e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e8a:	bf00      	nop
    2e8c:	200006a4 	.word	0x200006a4
    2e90:	00002cbd 	.word	0x00002cbd
    2e94:	00005751 	.word	0x00005751

00002e98 <_usb_d_dev_in_next>:
{
    2e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e9c:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2e9e:	7c84      	ldrb	r4, [r0, #18]
    2ea0:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2ea4:	4688      	mov	r8, r1
    2ea6:	2900      	cmp	r1, #0
    2ea8:	f000 809f 	beq.w	2fea <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2eac:	4b58      	ldr	r3, [pc, #352]	; (3010 <_usb_d_dev_in_next+0x178>)
    2eae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2eb2:	6958      	ldr	r0, [r3, #20]
    2eb4:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2eb8:	8a2b      	ldrh	r3, [r5, #16]
    2eba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2ebe:	4293      	cmp	r3, r2
    2ec0:	f000 808d 	beq.w	2fde <_usb_d_dev_in_next+0x146>
    2ec4:	3b01      	subs	r3, #1
    2ec6:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2ec8:	7cef      	ldrb	r7, [r5, #19]
    2eca:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2ece:	f1b8 0f00 	cmp.w	r8, #0
    2ed2:	d005      	beq.n	2ee0 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2ed4:	0162      	lsls	r2, r4, #5
    2ed6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2eda:	2302      	movs	r3, #2
    2edc:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2ee0:	68a9      	ldr	r1, [r5, #8]
    2ee2:	eb0e 0301 	add.w	r3, lr, r1
    2ee6:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2ee8:	686e      	ldr	r6, [r5, #4]
    2eea:	42b3      	cmp	r3, r6
    2eec:	d23f      	bcs.n	2f6e <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2eee:	1af6      	subs	r6, r6, r3
    2ef0:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    2ef2:	7cea      	ldrb	r2, [r5, #19]
    2ef4:	f012 0f20 	tst.w	r2, #32
    2ef8:	d02d      	beq.n	2f56 <_usb_d_dev_in_next+0xbe>
    2efa:	8a2a      	ldrh	r2, [r5, #16]
    2efc:	4296      	cmp	r6, r2
    2efe:	bf28      	it	cs
    2f00:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2f02:	6829      	ldr	r1, [r5, #0]
    2f04:	4632      	mov	r2, r6
    2f06:	4419      	add	r1, r3
    2f08:	68e8      	ldr	r0, [r5, #12]
    2f0a:	4b42      	ldr	r3, [pc, #264]	; (3014 <_usb_d_dev_in_next+0x17c>)
    2f0c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2f0e:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2f10:	4b3f      	ldr	r3, [pc, #252]	; (3010 <_usb_d_dev_in_next+0x178>)
    2f12:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2f16:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2f18:	4b3d      	ldr	r3, [pc, #244]	; (3010 <_usb_d_dev_in_next+0x178>)
    2f1a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2f1e:	695a      	ldr	r2, [r3, #20]
    2f20:	f366 020d 	bfi	r2, r6, #0, #14
    2f24:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2f26:	695a      	ldr	r2, [r3, #20]
    2f28:	f36f 329b 	bfc	r2, #14, #14
    2f2c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2f2e:	f1b8 0f00 	cmp.w	r8, #0
    2f32:	d108      	bne.n	2f46 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    2f34:	2f01      	cmp	r7, #1
    2f36:	bf0c      	ite	eq
    2f38:	224e      	moveq	r2, #78	; 0x4e
    2f3a:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2f3c:	0163      	lsls	r3, r4, #5
    2f3e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2f42:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2f46:	0164      	lsls	r4, r4, #5
    2f48:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2f4c:	2380      	movs	r3, #128	; 0x80
    2f4e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    2f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f56:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    2f5a:	bf28      	it	cs
    2f5c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2f60:	6829      	ldr	r1, [r5, #0]
    2f62:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    2f64:	4a2a      	ldr	r2, [pc, #168]	; (3010 <_usb_d_dev_in_next+0x178>)
    2f66:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    2f6a:	6113      	str	r3, [r2, #16]
    2f6c:	e7d4      	b.n	2f18 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    2f6e:	7ceb      	ldrb	r3, [r5, #19]
    2f70:	f013 0f10 	tst.w	r3, #16
    2f74:	d00f      	beq.n	2f96 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    2f76:	7ceb      	ldrb	r3, [r5, #19]
    2f78:	f36f 1304 	bfc	r3, #4, #1
    2f7c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2f7e:	4b24      	ldr	r3, [pc, #144]	; (3010 <_usb_d_dev_in_next+0x178>)
    2f80:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2f84:	695a      	ldr	r2, [r3, #20]
    2f86:	f36f 020d 	bfc	r2, #0, #14
    2f8a:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2f8c:	695a      	ldr	r2, [r3, #20]
    2f8e:	f36f 329b 	bfc	r2, #14, #14
    2f92:	615a      	str	r2, [r3, #20]
    2f94:	e7cb      	b.n	2f2e <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2f96:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2f98:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2f9c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2fa0:	bf0c      	ite	eq
    2fa2:	234b      	moveq	r3, #75	; 0x4b
    2fa4:	234a      	movne	r3, #74	; 0x4a
    2fa6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2faa:	8a2a      	ldrh	r2, [r5, #16]
    2fac:	ea00 030e 	and.w	r3, r0, lr
    2fb0:	429a      	cmp	r2, r3
    2fb2:	d005      	beq.n	2fc0 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2fb4:	2100      	movs	r1, #0
    2fb6:	4628      	mov	r0, r5
    2fb8:	4b17      	ldr	r3, [pc, #92]	; (3018 <_usb_d_dev_in_next+0x180>)
    2fba:	4798      	blx	r3
	return;
    2fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2fc0:	7ceb      	ldrb	r3, [r5, #19]
    2fc2:	f36f 1386 	bfc	r3, #6, #1
    2fc6:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2fc8:	4b11      	ldr	r3, [pc, #68]	; (3010 <_usb_d_dev_in_next+0x178>)
    2fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2fcc:	68a9      	ldr	r1, [r5, #8]
    2fce:	7ca8      	ldrb	r0, [r5, #18]
    2fd0:	4798      	blx	r3
    2fd2:	b9d0      	cbnz	r0, 300a <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2fd4:	7ceb      	ldrb	r3, [r5, #19]
    2fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2fda:	74eb      	strb	r3, [r5, #19]
    2fdc:	e7ea      	b.n	2fb4 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2fde:	7cef      	ldrb	r7, [r5, #19]
    2fe0:	f007 0707 	and.w	r7, r7, #7
    2fe4:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2fe8:	e774      	b.n	2ed4 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2fea:	8a03      	ldrh	r3, [r0, #16]
    2fec:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2ff0:	4293      	cmp	r3, r2
    2ff2:	d107      	bne.n	3004 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2ff4:	7cef      	ldrb	r7, [r5, #19]
    2ff6:	f007 0707 	and.w	r7, r7, #7
    2ffa:	f04f 0e00 	mov.w	lr, #0
    2ffe:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3002:	e76d      	b.n	2ee0 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3004:	f04f 0e00 	mov.w	lr, #0
    3008:	e75c      	b.n	2ec4 <_usb_d_dev_in_next+0x2c>
    300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    300e:	bf00      	nop
    3010:	200006a4 	.word	0x200006a4
    3014:	0000561d 	.word	0x0000561d
    3018:	00002cbd 	.word	0x00002cbd

0000301c <_usb_d_dev_out_next>:
{
    301c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3020:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3022:	7c85      	ldrb	r5, [r0, #18]
    3024:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3028:	4689      	mov	r9, r1
    302a:	2900      	cmp	r1, #0
    302c:	d056      	beq.n	30dc <_usb_d_dev_out_next+0xc0>
    302e:	4b74      	ldr	r3, [pc, #464]	; (3200 <_usb_d_dev_out_next+0x1e4>)
    3030:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3034:	685a      	ldr	r2, [r3, #4]
    3036:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    303a:	685f      	ldr	r7, [r3, #4]
    303c:	f3c7 070d 	ubfx	r7, r7, #0, #14
    3040:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3042:	8a06      	ldrh	r6, [r0, #16]
    3044:	f240 33ff 	movw	r3, #1023	; 0x3ff
    3048:	429e      	cmp	r6, r3
    304a:	f000 80ba 	beq.w	31c2 <_usb_d_dev_out_next+0x1a6>
    304e:	3e01      	subs	r6, #1
    3050:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    3052:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3056:	f894 8013 	ldrb.w	r8, [r4, #19]
    305a:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    305e:	f1b9 0f00 	cmp.w	r9, #0
    3062:	d005      	beq.n	3070 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3064:	016b      	lsls	r3, r5, #5
    3066:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    306a:	2201      	movs	r2, #1
    306c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3070:	7ce3      	ldrb	r3, [r4, #19]
    3072:	f013 0f20 	tst.w	r3, #32
    3076:	d00d      	beq.n	3094 <_usb_d_dev_out_next+0x78>
    3078:	6862      	ldr	r2, [r4, #4]
    307a:	2a00      	cmp	r2, #0
    307c:	d037      	beq.n	30ee <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    307e:	68a0      	ldr	r0, [r4, #8]
    3080:	1a12      	subs	r2, r2, r0
    3082:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3084:	6823      	ldr	r3, [r4, #0]
    3086:	42ba      	cmp	r2, r7
    3088:	bf28      	it	cs
    308a:	463a      	movcs	r2, r7
    308c:	68e1      	ldr	r1, [r4, #12]
    308e:	4418      	add	r0, r3
    3090:	4b5c      	ldr	r3, [pc, #368]	; (3204 <_usb_d_dev_out_next+0x1e8>)
    3092:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3094:	6863      	ldr	r3, [r4, #4]
    3096:	b353      	cbz	r3, 30ee <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    3098:	f1b9 0f00 	cmp.w	r9, #0
    309c:	d040      	beq.n	3120 <_usb_d_dev_out_next+0x104>
    309e:	8a22      	ldrh	r2, [r4, #16]
    30a0:	42ba      	cmp	r2, r7
    30a2:	d93d      	bls.n	3120 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    30a4:	7ce3      	ldrb	r3, [r4, #19]
    30a6:	f36f 1304 	bfc	r3, #4, #1
    30aa:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    30ac:	68a3      	ldr	r3, [r4, #8]
    30ae:	445b      	add	r3, fp
    30b0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    30b2:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    30b6:	ea4f 1345 	mov.w	r3, r5, lsl #5
    30ba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    30be:	bf0c      	ite	eq
    30c0:	222d      	moveq	r2, #45	; 0x2d
    30c2:	2225      	movne	r2, #37	; 0x25
    30c4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    30c8:	b915      	cbnz	r5, 30d0 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    30ca:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    30cc:	4b4c      	ldr	r3, [pc, #304]	; (3200 <_usb_d_dev_out_next+0x1e4>)
    30ce:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    30d0:	2100      	movs	r1, #0
    30d2:	4620      	mov	r0, r4
    30d4:	4b4c      	ldr	r3, [pc, #304]	; (3208 <_usb_d_dev_out_next+0x1ec>)
    30d6:	4798      	blx	r3
	return;
    30d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    30dc:	8a06      	ldrh	r6, [r0, #16]
    30de:	f240 33ff 	movw	r3, #1023	; 0x3ff
    30e2:	429e      	cmp	r6, r3
    30e4:	d07b      	beq.n	31de <_usb_d_dev_out_next+0x1c2>
    30e6:	f04f 0b00 	mov.w	fp, #0
    30ea:	46da      	mov	sl, fp
    30ec:	e7af      	b.n	304e <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    30ee:	7ce3      	ldrb	r3, [r4, #19]
    30f0:	f013 0f10 	tst.w	r3, #16
    30f4:	d06c      	beq.n	31d0 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    30f6:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    30f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    30fc:	f043 0320 	orr.w	r3, r3, #32
    3100:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3102:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3104:	493e      	ldr	r1, [pc, #248]	; (3200 <_usb_d_dev_out_next+0x1e4>)
    3106:	016a      	lsls	r2, r5, #5
    3108:	188b      	adds	r3, r1, r2
    310a:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    310c:	8a21      	ldrh	r1, [r4, #16]
    310e:	685a      	ldr	r2, [r3, #4]
    3110:	f361 329b 	bfi	r2, r1, #14, #14
    3114:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3116:	685a      	ldr	r2, [r3, #4]
    3118:	f36f 020d 	bfc	r2, #0, #14
    311c:	605a      	str	r2, [r3, #4]
    311e:	e01d      	b.n	315c <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    3120:	68a2      	ldr	r2, [r4, #8]
    3122:	4452      	add	r2, sl
    3124:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3126:	4293      	cmp	r3, r2
    3128:	d9c3      	bls.n	30b2 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    312a:	1a9b      	subs	r3, r3, r2
    312c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    312e:	7ce1      	ldrb	r1, [r4, #19]
    3130:	f011 0f20 	tst.w	r1, #32
    3134:	d026      	beq.n	3184 <_usb_d_dev_out_next+0x168>
    3136:	8a22      	ldrh	r2, [r4, #16]
    3138:	4293      	cmp	r3, r2
    313a:	bf28      	it	cs
    313c:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    313e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3140:	016a      	lsls	r2, r5, #5
    3142:	492f      	ldr	r1, [pc, #188]	; (3200 <_usb_d_dev_out_next+0x1e4>)
    3144:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3146:	4a2e      	ldr	r2, [pc, #184]	; (3200 <_usb_d_dev_out_next+0x1e4>)
    3148:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    314c:	6851      	ldr	r1, [r2, #4]
    314e:	f363 319b 	bfi	r1, r3, #14, #14
    3152:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3154:	6853      	ldr	r3, [r2, #4]
    3156:	f36f 030d 	bfc	r3, #0, #14
    315a:	6053      	str	r3, [r2, #4]
	if (!isr) {
    315c:	f1b9 0f00 	cmp.w	r9, #0
    3160:	d108      	bne.n	3174 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    3162:	f1b8 0f01 	cmp.w	r8, #1
    3166:	d025      	beq.n	31b4 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    3168:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    316a:	016b      	lsls	r3, r5, #5
    316c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3170:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3174:	016d      	lsls	r5, r5, #5
    3176:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    317a:	2340      	movs	r3, #64	; 0x40
    317c:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    3180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    3184:	8a21      	ldrh	r1, [r4, #16]
    3186:	428b      	cmp	r3, r1
    3188:	d90a      	bls.n	31a0 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    318e:	d80e      	bhi.n	31ae <_usb_d_dev_out_next+0x192>
    3190:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3194:	6821      	ldr	r1, [r4, #0]
    3196:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    3198:	0169      	lsls	r1, r5, #5
    319a:	4819      	ldr	r0, [pc, #100]	; (3200 <_usb_d_dev_out_next+0x1e4>)
    319c:	5042      	str	r2, [r0, r1]
    319e:	e7d2      	b.n	3146 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    31a0:	428b      	cmp	r3, r1
    31a2:	d2f7      	bcs.n	3194 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    31a4:	7ce1      	ldrb	r1, [r4, #19]
    31a6:	f041 0120 	orr.w	r1, r1, #32
    31aa:	74e1      	strb	r1, [r4, #19]
    31ac:	e7f2      	b.n	3194 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    31ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    31b2:	e7ef      	b.n	3194 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    31b4:	4b12      	ldr	r3, [pc, #72]	; (3200 <_usb_d_dev_out_next+0x1e4>)
    31b6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    31ba:	2200      	movs	r2, #0
    31bc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    31be:	222d      	movs	r2, #45	; 0x2d
    31c0:	e7d3      	b.n	316a <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    31c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    31c6:	f890 8013 	ldrb.w	r8, [r0, #19]
    31ca:	f008 0807 	and.w	r8, r8, #7
    31ce:	e749      	b.n	3064 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    31d0:	f1b9 0f00 	cmp.w	r9, #0
    31d4:	d10b      	bne.n	31ee <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    31d6:	68a3      	ldr	r3, [r4, #8]
    31d8:	4453      	add	r3, sl
    31da:	60a3      	str	r3, [r4, #8]
    31dc:	e769      	b.n	30b2 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    31de:	f890 8013 	ldrb.w	r8, [r0, #19]
    31e2:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    31e6:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    31e8:	46bb      	mov	fp, r7
    31ea:	46ba      	mov	sl, r7
    31ec:	e740      	b.n	3070 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    31ee:	8a23      	ldrh	r3, [r4, #16]
    31f0:	42bb      	cmp	r3, r7
    31f2:	f63f af57 	bhi.w	30a4 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    31f6:	68a3      	ldr	r3, [r4, #8]
    31f8:	4453      	add	r3, sl
    31fa:	60a3      	str	r3, [r4, #8]
    31fc:	e759      	b.n	30b2 <_usb_d_dev_out_next+0x96>
    31fe:	bf00      	nop
    3200:	200006a4 	.word	0x200006a4
    3204:	0000561d 	.word	0x0000561d
    3208:	00002cbd 	.word	0x00002cbd

0000320c <_usb_d_dev_handler>:
{
    320c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3210:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3214:	8c1e      	ldrh	r6, [r3, #32]
    3216:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3218:	b146      	cbz	r6, 322c <_usb_d_dev_handler+0x20>
    321a:	4d91      	ldr	r5, [pc, #580]	; (3460 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    321c:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    321e:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    3222:	f8df 9258 	ldr.w	r9, [pc, #600]	; 347c <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    3226:	f8df 8258 	ldr.w	r8, [pc, #600]	; 3480 <_usb_d_dev_handler+0x274>
    322a:	e0d3      	b.n	33d4 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    322c:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    322e:	8b1b      	ldrh	r3, [r3, #24]
    3230:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3232:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3234:	f013 0f04 	tst.w	r3, #4
    3238:	d11d      	bne.n	3276 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    323a:	f413 7f00 	tst.w	r3, #512	; 0x200
    323e:	d123      	bne.n	3288 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3240:	f013 0f80 	tst.w	r3, #128	; 0x80
    3244:	d147      	bne.n	32d6 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3246:	f013 0f70 	tst.w	r3, #112	; 0x70
    324a:	d14f      	bne.n	32ec <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    324c:	f013 0f08 	tst.w	r3, #8
    3250:	d16e      	bne.n	3330 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3252:	f013 0f01 	tst.w	r3, #1
    3256:	d0e0      	beq.n	321a <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3258:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    325c:	f240 2201 	movw	r2, #513	; 0x201
    3260:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3262:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3264:	2270      	movs	r2, #112	; 0x70
    3266:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3268:	4b7e      	ldr	r3, [pc, #504]	; (3464 <_usb_d_dev_handler+0x258>)
    326a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    326c:	2100      	movs	r1, #0
    326e:	2004      	movs	r0, #4
    3270:	4798      	blx	r3
    3272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3276:	2204      	movs	r2, #4
    3278:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    327c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    327e:	4b79      	ldr	r3, [pc, #484]	; (3464 <_usb_d_dev_handler+0x258>)
    3280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3282:	4798      	blx	r3
    3284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3288:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    328c:	f240 2201 	movw	r2, #513	; 0x201
    3290:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3292:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3294:	2270      	movs	r2, #112	; 0x70
    3296:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3298:	4b72      	ldr	r3, [pc, #456]	; (3464 <_usb_d_dev_handler+0x258>)
    329a:	891b      	ldrh	r3, [r3, #8]
    329c:	f003 030f 	and.w	r3, r3, #15
    32a0:	2b03      	cmp	r3, #3
    32a2:	d00e      	beq.n	32c2 <_usb_d_dev_handler+0xb6>
    32a4:	4b6f      	ldr	r3, [pc, #444]	; (3464 <_usb_d_dev_handler+0x258>)
    32a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    32a8:	f003 030f 	and.w	r3, r3, #15
    32ac:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    32ae:	bf08      	it	eq
    32b0:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    32b2:	d007      	beq.n	32c4 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    32b4:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    32b6:	4b6b      	ldr	r3, [pc, #428]	; (3464 <_usb_d_dev_handler+0x258>)
    32b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    32ba:	2003      	movs	r0, #3
    32bc:	4798      	blx	r3
    32be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    32c2:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    32c4:	4b67      	ldr	r3, [pc, #412]	; (3464 <_usb_d_dev_handler+0x258>)
    32c6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    32ca:	8919      	ldrh	r1, [r3, #8]
    32cc:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    32d0:	2200      	movs	r2, #0
    32d2:	811a      	strh	r2, [r3, #8]
    32d4:	e7ef      	b.n	32b6 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    32d6:	2280      	movs	r2, #128	; 0x80
    32d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32dc:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    32de:	4b61      	ldr	r3, [pc, #388]	; (3464 <_usb_d_dev_handler+0x258>)
    32e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    32e2:	2100      	movs	r1, #0
    32e4:	2005      	movs	r0, #5
    32e6:	4798      	blx	r3
    32e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    32ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32f0:	2270      	movs	r2, #112	; 0x70
    32f2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    32f4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    32f6:	f240 2201 	movw	r2, #513	; 0x201
    32fa:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    32fc:	4b5a      	ldr	r3, [pc, #360]	; (3468 <_usb_d_dev_handler+0x25c>)
    32fe:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    3302:	f013 0f01 	tst.w	r3, #1
    3306:	d00d      	beq.n	3324 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3308:	4a57      	ldr	r2, [pc, #348]	; (3468 <_usb_d_dev_handler+0x25c>)
    330a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    330c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    3310:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3314:	d1f9      	bne.n	330a <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3316:	4b53      	ldr	r3, [pc, #332]	; (3464 <_usb_d_dev_handler+0x258>)
    3318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    331a:	2100      	movs	r1, #0
    331c:	2002      	movs	r0, #2
    331e:	4798      	blx	r3
    3320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3324:	4a50      	ldr	r2, [pc, #320]	; (3468 <_usb_d_dev_handler+0x25c>)
    3326:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    3328:	f413 7f80 	tst.w	r3, #256	; 0x100
    332c:	d0fb      	beq.n	3326 <_usb_d_dev_handler+0x11a>
    332e:	e7f2      	b.n	3316 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3330:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3334:	2400      	movs	r4, #0
    3336:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    333a:	2208      	movs	r2, #8
    333c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    333e:	2270      	movs	r2, #112	; 0x70
    3340:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3342:	f240 2201 	movw	r2, #513	; 0x201
    3346:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3348:	4b48      	ldr	r3, [pc, #288]	; (346c <_usb_d_dev_handler+0x260>)
    334a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    334c:	4b45      	ldr	r3, [pc, #276]	; (3464 <_usb_d_dev_handler+0x258>)
    334e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3350:	4621      	mov	r1, r4
    3352:	2001      	movs	r0, #1
    3354:	4798      	blx	r3
    3356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    335a:	f011 0f10 	tst.w	r1, #16
    335e:	d109      	bne.n	3374 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3360:	f011 0f40 	tst.w	r1, #64	; 0x40
    3364:	d108      	bne.n	3378 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3366:	f011 0f20 	tst.w	r1, #32
    336a:	d02f      	beq.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    336c:	2100      	movs	r1, #0
    336e:	4b40      	ldr	r3, [pc, #256]	; (3470 <_usb_d_dev_handler+0x264>)
    3370:	4798      	blx	r3
    3372:	e02b      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    3374:	47c8      	blx	r9
    3376:	e029      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    3378:	2101      	movs	r1, #1
    337a:	4b3d      	ldr	r3, [pc, #244]	; (3470 <_usb_d_dev_handler+0x264>)
    337c:	4798      	blx	r3
    337e:	e025      	b.n	33cc <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3380:	f011 0f40 	tst.w	r1, #64	; 0x40
    3384:	d111      	bne.n	33aa <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3386:	f011 0f08 	tst.w	r1, #8
    338a:	d112      	bne.n	33b2 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    338c:	f011 0f02 	tst.w	r1, #2
    3390:	d112      	bne.n	33b8 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3392:	f003 0307 	and.w	r3, r3, #7
    3396:	2b01      	cmp	r3, #1
    3398:	d118      	bne.n	33cc <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    339a:	f011 0f04 	tst.w	r1, #4
    339e:	d10f      	bne.n	33c0 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    33a0:	f011 0f10 	tst.w	r1, #16
    33a4:	d012      	beq.n	33cc <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    33a6:	47c8      	blx	r9
    33a8:	e010      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    33aa:	2101      	movs	r1, #1
    33ac:	4b30      	ldr	r3, [pc, #192]	; (3470 <_usb_d_dev_handler+0x264>)
    33ae:	4798      	blx	r3
    33b0:	e00c      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    33b2:	2101      	movs	r1, #1
    33b4:	47c0      	blx	r8
    33b6:	e009      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    33b8:	2101      	movs	r1, #1
    33ba:	4b2e      	ldr	r3, [pc, #184]	; (3474 <_usb_d_dev_handler+0x268>)
    33bc:	4798      	blx	r3
    33be:	e005      	b.n	33cc <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    33c0:	2100      	movs	r1, #0
    33c2:	47c0      	blx	r8
    33c4:	e002      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    33c6:	2100      	movs	r1, #0
    33c8:	4b29      	ldr	r3, [pc, #164]	; (3470 <_usb_d_dev_handler+0x264>)
    33ca:	4798      	blx	r3
    33cc:	3401      	adds	r4, #1
    33ce:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    33d0:	2c09      	cmp	r4, #9
    33d2:	d042      	beq.n	345a <_usb_d_dev_handler+0x24e>
    33d4:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    33d6:	7cab      	ldrb	r3, [r5, #18]
    33d8:	2bff      	cmp	r3, #255	; 0xff
    33da:	d0f7      	beq.n	33cc <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    33dc:	f003 030f 	and.w	r3, r3, #15
    33e0:	2101      	movs	r1, #1
    33e2:	4099      	lsls	r1, r3
    33e4:	4231      	tst	r1, r6
    33e6:	d0f1      	beq.n	33cc <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    33e8:	0159      	lsls	r1, r3, #5
    33ea:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    33ee:	f501 7180 	add.w	r1, r1, #256	; 0x100
    33f2:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    33f4:	015b      	lsls	r3, r3, #5
    33f6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    33fa:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    33fe:	4019      	ands	r1, r3
    3400:	d0e4      	beq.n	33cc <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3402:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    3406:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    340a:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    340e:	f003 0247 	and.w	r2, r3, #71	; 0x47
    3412:	2a01      	cmp	r2, #1
    3414:	d0a1      	beq.n	335a <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3416:	f013 0f80 	tst.w	r3, #128	; 0x80
    341a:	d1b1      	bne.n	3380 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    341c:	f011 0f20 	tst.w	r1, #32
    3420:	d1d1      	bne.n	33c6 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3422:	f011 0f04 	tst.w	r1, #4
    3426:	d10e      	bne.n	3446 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3428:	f011 0f01 	tst.w	r1, #1
    342c:	d10e      	bne.n	344c <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    342e:	f003 0307 	and.w	r3, r3, #7
    3432:	2b01      	cmp	r3, #1
    3434:	d1ca      	bne.n	33cc <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3436:	f011 0f08 	tst.w	r1, #8
    343a:	d10b      	bne.n	3454 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    343c:	f011 0f10 	tst.w	r1, #16
    3440:	d0c4      	beq.n	33cc <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    3442:	47c8      	blx	r9
    3444:	e7c2      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    3446:	2100      	movs	r1, #0
    3448:	47c0      	blx	r8
    344a:	e7bf      	b.n	33cc <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    344c:	2101      	movs	r1, #1
    344e:	4b0a      	ldr	r3, [pc, #40]	; (3478 <_usb_d_dev_handler+0x26c>)
    3450:	4798      	blx	r3
    3452:	e7bb      	b.n	33cc <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    3454:	2101      	movs	r1, #1
    3456:	47c0      	blx	r8
    3458:	e7b8      	b.n	33cc <_usb_d_dev_handler+0x1c0>
    345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    345e:	bf00      	nop
    3460:	20000718 	.word	0x20000718
    3464:	200006a4 	.word	0x200006a4
    3468:	40001000 	.word	0x40001000
    346c:	00002e55 	.word	0x00002e55
    3470:	00002c91 	.word	0x00002c91
    3474:	00002e99 	.word	0x00002e99
    3478:	0000301d 	.word	0x0000301d
    347c:	00002c15 	.word	0x00002c15
    3480:	00002d55 	.word	0x00002d55

00003484 <_usb_d_dev_init>:
{
    3484:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    3486:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    348a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    348c:	f013 0f01 	tst.w	r3, #1
    3490:	d124      	bne.n	34dc <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3492:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3496:	7893      	ldrb	r3, [r2, #2]
    3498:	f013 0f03 	tst.w	r3, #3
    349c:	d1fb      	bne.n	3496 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    349e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    34a2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    34a4:	f013 0f02 	tst.w	r3, #2
    34a8:	d00f      	beq.n	34ca <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    34aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    34ae:	7813      	ldrb	r3, [r2, #0]
    34b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    34b4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    34b6:	7893      	ldrb	r3, [r2, #2]
    34b8:	f013 0f03 	tst.w	r3, #3
    34bc:	d1fb      	bne.n	34b6 <_usb_d_dev_init+0x32>
    34be:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    34c2:	7893      	ldrb	r3, [r2, #2]
    34c4:	f013 0f02 	tst.w	r3, #2
    34c8:	d1fb      	bne.n	34c2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    34ca:	2201      	movs	r2, #1
    34cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    34d0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    34d2:	461a      	mov	r2, r3
    34d4:	7893      	ldrb	r3, [r2, #2]
    34d6:	f013 0f03 	tst.w	r3, #3
    34da:	d1fb      	bne.n	34d4 <_usb_d_dev_init+0x50>
    34dc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    34e0:	7893      	ldrb	r3, [r2, #2]
    34e2:	f013 0f01 	tst.w	r3, #1
    34e6:	d1fb      	bne.n	34e0 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    34e8:	4b21      	ldr	r3, [pc, #132]	; (3570 <_usb_d_dev_init+0xec>)
    34ea:	4a22      	ldr	r2, [pc, #136]	; (3574 <_usb_d_dev_init+0xf0>)
    34ec:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    34ee:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    34f0:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    34f2:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    34f4:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    34f6:	4b20      	ldr	r3, [pc, #128]	; (3578 <_usb_d_dev_init+0xf4>)
    34f8:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    34fa:	4b20      	ldr	r3, [pc, #128]	; (357c <_usb_d_dev_init+0xf8>)
    34fc:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    34fe:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3502:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3506:	f011 011f 	ands.w	r1, r1, #31
    350a:	d02b      	beq.n	3564 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    350c:	291f      	cmp	r1, #31
    350e:	bf08      	it	eq
    3510:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3512:	b34b      	cbz	r3, 3568 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    3514:	2b1f      	cmp	r3, #31
    3516:	bf08      	it	eq
    3518:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    351a:	b33a      	cbz	r2, 356c <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    351c:	2a07      	cmp	r2, #7
    351e:	bf08      	it	eq
    3520:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3522:	f003 031f 	and.w	r3, r3, #31
    3526:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    352a:	0312      	lsls	r2, r2, #12
    352c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3530:	4313      	orrs	r3, r2
    3532:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3536:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3538:	78d3      	ldrb	r3, [r2, #3]
    353a:	f043 0303 	orr.w	r3, r3, #3
    353e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3540:	78d3      	ldrb	r3, [r2, #3]
    3542:	f043 030c 	orr.w	r3, r3, #12
    3546:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3548:	2304      	movs	r3, #4
    354a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    354c:	7893      	ldrb	r3, [r2, #2]
    354e:	f013 0f03 	tst.w	r3, #3
    3552:	d1fb      	bne.n	354c <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3554:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3558:	4a05      	ldr	r2, [pc, #20]	; (3570 <_usb_d_dev_init+0xec>)
    355a:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    355c:	2201      	movs	r2, #1
    355e:	811a      	strh	r2, [r3, #8]
}
    3560:	2000      	movs	r0, #0
    3562:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3564:	2109      	movs	r1, #9
    3566:	e7d4      	b.n	3512 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    3568:	2319      	movs	r3, #25
    356a:	e7d6      	b.n	351a <_usb_d_dev_init+0x96>
		pad_trim = 6;
    356c:	2206      	movs	r2, #6
    356e:	e7d8      	b.n	3522 <_usb_d_dev_init+0x9e>
    3570:	200006a4 	.word	0x200006a4
    3574:	00002c11 	.word	0x00002c11
    3578:	00002e55 	.word	0x00002e55
    357c:	00800084 	.word	0x00800084

00003580 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3580:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3584:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3586:	f013 0f03 	tst.w	r3, #3
    358a:	d129      	bne.n	35e0 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    358c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3590:	7893      	ldrb	r3, [r2, #2]
    3592:	f013 0f03 	tst.w	r3, #3
    3596:	d1fb      	bne.n	3590 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    3598:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    359c:	781b      	ldrb	r3, [r3, #0]
    359e:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    35a0:	f013 0f02 	tst.w	r3, #2
    35a4:	d108      	bne.n	35b8 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    35a6:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    35aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    35ae:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    35b0:	7893      	ldrb	r3, [r2, #2]
    35b2:	f013 0f03 	tst.w	r3, #3
    35b6:	d1fb      	bne.n	35b0 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35b8:	4b0b      	ldr	r3, [pc, #44]	; (35e8 <_usb_d_dev_enable+0x68>)
    35ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    35be:	609a      	str	r2, [r3, #8]
    35c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    35c4:	609a      	str	r2, [r3, #8]
    35c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    35ca:	609a      	str	r2, [r3, #8]
    35cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    35d0:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    35d2:	f240 228d 	movw	r2, #653	; 0x28d
    35d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    35da:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    35dc:	2000      	movs	r0, #0
    35de:	4770      	bx	lr
		return -USB_ERR_DENIED;
    35e0:	f06f 0010 	mvn.w	r0, #16
}
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	e000e100 	.word	0xe000e100

000035ec <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    35ec:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    35f0:	8913      	ldrh	r3, [r2, #8]
    35f2:	f023 0301 	bic.w	r3, r3, #1
    35f6:	041b      	lsls	r3, r3, #16
    35f8:	0c1b      	lsrs	r3, r3, #16
    35fa:	8113      	strh	r3, [r2, #8]
    35fc:	4770      	bx	lr

000035fe <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    35fe:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3602:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3606:	7298      	strb	r0, [r3, #10]
    3608:	4770      	bx	lr
	...

0000360c <_usb_d_dev_ep_init>:
{
    360c:	b5f0      	push	{r4, r5, r6, r7, lr}
    360e:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3612:	f010 050f 	ands.w	r5, r0, #15
    3616:	d04d      	beq.n	36b4 <_usb_d_dev_ep_init+0xa8>
    3618:	f1be 0f00 	cmp.w	lr, #0
    361c:	bfb4      	ite	lt
    361e:	1cac      	addlt	r4, r5, #2
    3620:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3622:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3626:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    3628:	2d02      	cmp	r5, #2
    362a:	d947      	bls.n	36bc <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    362c:	f06f 0011 	mvn.w	r0, #17
    3630:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3632:	f1be 0f00 	cmp.w	lr, #0
    3636:	db1b      	blt.n	3670 <_usb_d_dev_ep_init+0x64>
    3638:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    363c:	4e37      	ldr	r6, [pc, #220]	; (371c <_usb_d_dev_ep_init+0x110>)
    363e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3642:	2d00      	cmp	r5, #0
    3644:	d15e      	bne.n	3704 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3646:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    364a:	4d34      	ldr	r5, [pc, #208]	; (371c <_usb_d_dev_ep_init+0x110>)
    364c:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    3650:	4d33      	ldr	r5, [pc, #204]	; (3720 <_usb_d_dev_ep_init+0x114>)
    3652:	00a6      	lsls	r6, r4, #2
    3654:	1933      	adds	r3, r6, r4
    3656:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    365a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    365e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    3662:	3101      	adds	r1, #1
    3664:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    3668:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    366c:	2000      	movs	r0, #0
    366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3670:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3674:	4e29      	ldr	r6, [pc, #164]	; (371c <_usb_d_dev_ep_init+0x110>)
    3676:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    367a:	686d      	ldr	r5, [r5, #4]
    367c:	b935      	cbnz	r5, 368c <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    367e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3682:	4d26      	ldr	r5, [pc, #152]	; (371c <_usb_d_dev_ep_init+0x110>)
    3684:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3688:	685f      	ldr	r7, [r3, #4]
    368a:	e7e1      	b.n	3650 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    368c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3690:	4e22      	ldr	r6, [pc, #136]	; (371c <_usb_d_dev_ep_init+0x110>)
    3692:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3696:	896d      	ldrh	r5, [r5, #10]
    3698:	4295      	cmp	r5, r2
    369a:	daf0      	bge.n	367e <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    369c:	f06f 0012 	mvn.w	r0, #18
    36a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    36a2:	f06f 0013 	mvn.w	r0, #19
    36a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    36a8:	f06f 0013 	mvn.w	r0, #19
    36ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    36ae:	f06f 0012 	mvn.w	r0, #18
    36b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    36b4:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    36b8:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    36ba:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    36bc:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    36c0:	4f17      	ldr	r7, [pc, #92]	; (3720 <_usb_d_dev_ep_init+0x114>)
    36c2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    36c6:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    36ca:	2eff      	cmp	r6, #255	; 0xff
    36cc:	d1e9      	bne.n	36a2 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    36ce:	2900      	cmp	r1, #0
    36d0:	d1af      	bne.n	3632 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    36d2:	b125      	cbz	r5, 36de <_usb_d_dev_ep_init+0xd2>
    36d4:	f1be 0f00 	cmp.w	lr, #0
    36d8:	bfa4      	itt	ge
    36da:	3502      	addge	r5, #2
    36dc:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    36de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    36e2:	4e0f      	ldr	r6, [pc, #60]	; (3720 <_usb_d_dev_ep_init+0x114>)
    36e4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    36e8:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    36ec:	2dff      	cmp	r5, #255	; 0xff
    36ee:	d1db      	bne.n	36a8 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    36f0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    36f4:	4e09      	ldr	r6, [pc, #36]	; (371c <_usb_d_dev_ep_init+0x110>)
    36f6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    36fa:	2d00      	cmp	r5, #0
    36fc:	d0d7      	beq.n	36ae <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    36fe:	f1be 0f00 	cmp.w	lr, #0
    3702:	dbb5      	blt.n	3670 <_usb_d_dev_ep_init+0x64>
    3704:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3708:	4e04      	ldr	r6, [pc, #16]	; (371c <_usb_d_dev_ep_init+0x110>)
    370a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    370e:	892d      	ldrh	r5, [r5, #8]
    3710:	4295      	cmp	r5, r2
    3712:	da98      	bge.n	3646 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    3714:	f06f 0012 	mvn.w	r0, #18
    3718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    371a:	bf00      	nop
    371c:	00005cc8 	.word	0x00005cc8
    3720:	200006a4 	.word	0x200006a4

00003724 <_usb_d_dev_ep_deinit>:
{
    3724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3726:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3728:	f010 060f 	ands.w	r6, r0, #15
    372c:	d00e      	beq.n	374c <_usb_d_dev_ep_deinit+0x28>
    372e:	2f00      	cmp	r7, #0
    3730:	bfb4      	ite	lt
    3732:	1cb3      	addlt	r3, r6, #2
    3734:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3736:	2e02      	cmp	r6, #2
    3738:	d900      	bls.n	373c <_usb_d_dev_ep_deinit+0x18>
    373a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    373c:	461d      	mov	r5, r3
    373e:	3301      	adds	r3, #1
    3740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3744:	4a24      	ldr	r2, [pc, #144]	; (37d8 <_usb_d_dev_ep_deinit+0xb4>)
    3746:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    374a:	e002      	b.n	3752 <_usb_d_dev_ep_deinit+0x2e>
    374c:	f8df e094 	ldr.w	lr, [pc, #148]	; 37e4 <_usb_d_dev_ep_deinit+0xc0>
    3750:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3752:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3756:	4a21      	ldr	r2, [pc, #132]	; (37dc <_usb_d_dev_ep_deinit+0xb8>)
    3758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    375c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    3760:	2aff      	cmp	r2, #255	; 0xff
    3762:	d0ea      	beq.n	373a <_usb_d_dev_ep_deinit+0x16>
    3764:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3766:	2203      	movs	r2, #3
    3768:	0ff9      	lsrs	r1, r7, #31
    376a:	4670      	mov	r0, lr
    376c:	4b1c      	ldr	r3, [pc, #112]	; (37e0 <_usb_d_dev_ep_deinit+0xbc>)
    376e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3770:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3774:	4a19      	ldr	r2, [pc, #100]	; (37dc <_usb_d_dev_ep_deinit+0xb8>)
    3776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    377a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    377e:	f003 0307 	and.w	r3, r3, #7
    3782:	2b01      	cmp	r3, #1
    3784:	d016      	beq.n	37b4 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    3786:	2f00      	cmp	r7, #0
    3788:	db1b      	blt.n	37c2 <_usb_d_dev_ep_deinit+0x9e>
    378a:	0160      	lsls	r0, r4, #5
    378c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3790:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    3794:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3798:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    379c:	4b0f      	ldr	r3, [pc, #60]	; (37dc <_usb_d_dev_ep_deinit+0xb8>)
    379e:	00aa      	lsls	r2, r5, #2
    37a0:	1951      	adds	r1, r2, r5
    37a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    37a6:	2000      	movs	r0, #0
    37a8:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    37ac:	22ff      	movs	r2, #255	; 0xff
    37ae:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    37b2:	e7c2      	b.n	373a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    37b4:	0160      	lsls	r0, r4, #5
    37b6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    37ba:	2300      	movs	r3, #0
    37bc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    37c0:	e7ec      	b.n	379c <_usb_d_dev_ep_deinit+0x78>
    37c2:	0176      	lsls	r6, r6, #5
    37c4:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    37c8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    37cc:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    37d0:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    37d4:	e7e2      	b.n	379c <_usb_d_dev_ep_deinit+0x78>
    37d6:	bf00      	nop
    37d8:	20000704 	.word	0x20000704
    37dc:	200006a4 	.word	0x200006a4
    37e0:	00002ce9 	.word	0x00002ce9
    37e4:	20000718 	.word	0x20000718

000037e8 <_usb_d_dev_ep_enable>:
{
    37e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ea:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    37ec:	f010 000f 	ands.w	r0, r0, #15
    37f0:	f000 80a6 	beq.w	3940 <_usb_d_dev_ep_enable+0x158>
    37f4:	2f00      	cmp	r7, #0
    37f6:	bfb4      	ite	lt
    37f8:	1c83      	addlt	r3, r0, #2
    37fa:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    37fc:	4606      	mov	r6, r0
    37fe:	0142      	lsls	r2, r0, #5
    3800:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3804:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3808:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    380a:	2802      	cmp	r0, #2
    380c:	f240 809f 	bls.w	394e <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    3810:	f06f 0011 	mvn.w	r0, #17
    3814:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3816:	f014 0f77 	tst.w	r4, #119	; 0x77
    381a:	f040 8088 	bne.w	392e <_usb_d_dev_ep_enable+0x146>
    381e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3822:	2111      	movs	r1, #17
    3824:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3828:	4c97      	ldr	r4, [pc, #604]	; (3a88 <_usb_d_dev_ep_enable+0x2a0>)
    382a:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    382e:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    3832:	4996      	ldr	r1, [pc, #600]	; (3a8c <_usb_d_dev_ep_enable+0x2a4>)
    3834:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3838:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    383c:	f200 80cc 	bhi.w	39d8 <_usb_d_dev_ep_enable+0x1f0>
    3840:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    3844:	f200 810a 	bhi.w	3a5c <_usb_d_dev_ep_enable+0x274>
    3848:	2c80      	cmp	r4, #128	; 0x80
    384a:	f200 80f9 	bhi.w	3a40 <_usb_d_dev_ep_enable+0x258>
    384e:	2c40      	cmp	r4, #64	; 0x40
    3850:	f200 810b 	bhi.w	3a6a <_usb_d_dev_ep_enable+0x282>
    3854:	2c20      	cmp	r4, #32
    3856:	f200 80fa 	bhi.w	3a4e <_usb_d_dev_ep_enable+0x266>
    385a:	2c10      	cmp	r4, #16
    385c:	f200 810c 	bhi.w	3a78 <_usb_d_dev_ep_enable+0x290>
    3860:	2c08      	cmp	r4, #8
    3862:	bf94      	ite	ls
    3864:	2700      	movls	r7, #0
    3866:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3868:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    386c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    386e:	f3c4 010d 	ubfx	r1, r4, #0, #14
    3872:	e0b7      	b.n	39e4 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3874:	f014 0f70 	tst.w	r4, #112	; 0x70
    3878:	d15c      	bne.n	3934 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    387a:	4d83      	ldr	r5, [pc, #524]	; (3a88 <_usb_d_dev_ep_enable+0x2a0>)
    387c:	009f      	lsls	r7, r3, #2
    387e:	18f9      	adds	r1, r7, r3
    3880:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    3884:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3888:	0109      	lsls	r1, r1, #4
    388a:	f001 0170 	and.w	r1, r1, #112	; 0x70
    388e:	430c      	orrs	r4, r1
    3890:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3894:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3898:	443b      	add	r3, r7
    389a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    389e:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    38a2:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    38a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    38aa:	d80f      	bhi.n	38cc <_usb_d_dev_ep_enable+0xe4>
    38ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    38b0:	d819      	bhi.n	38e6 <_usb_d_dev_ep_enable+0xfe>
    38b2:	2b80      	cmp	r3, #128	; 0x80
    38b4:	d819      	bhi.n	38ea <_usb_d_dev_ep_enable+0x102>
    38b6:	2b40      	cmp	r3, #64	; 0x40
    38b8:	d819      	bhi.n	38ee <_usb_d_dev_ep_enable+0x106>
    38ba:	2b20      	cmp	r3, #32
    38bc:	d819      	bhi.n	38f2 <_usb_d_dev_ep_enable+0x10a>
    38be:	2b10      	cmp	r3, #16
    38c0:	d819      	bhi.n	38f6 <_usb_d_dev_ep_enable+0x10e>
    38c2:	2b08      	cmp	r3, #8
    38c4:	bf94      	ite	ls
    38c6:	2300      	movls	r3, #0
    38c8:	2301      	movhi	r3, #1
    38ca:	e000      	b.n	38ce <_usb_d_dev_ep_enable+0xe6>
    38cc:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38ce:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    38d2:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    38d4:	2380      	movs	r3, #128	; 0x80
    38d6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    38da:	4b6b      	ldr	r3, [pc, #428]	; (3a88 <_usb_d_dev_ep_enable+0x2a0>)
    38dc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    38e0:	2000      	movs	r0, #0
    38e2:	76b0      	strb	r0, [r6, #26]
    38e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    38e6:	2306      	movs	r3, #6
    38e8:	e7f1      	b.n	38ce <_usb_d_dev_ep_enable+0xe6>
    38ea:	2305      	movs	r3, #5
    38ec:	e7ef      	b.n	38ce <_usb_d_dev_ep_enable+0xe6>
    38ee:	2304      	movs	r3, #4
    38f0:	e7ed      	b.n	38ce <_usb_d_dev_ep_enable+0xe6>
    38f2:	2303      	movs	r3, #3
    38f4:	e7eb      	b.n	38ce <_usb_d_dev_ep_enable+0xe6>
    38f6:	2302      	movs	r3, #2
    38f8:	e7e9      	b.n	38ce <_usb_d_dev_ep_enable+0xe6>
    38fa:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38fc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3900:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3902:	2340      	movs	r3, #64	; 0x40
    3904:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3908:	4b5f      	ldr	r3, [pc, #380]	; (3a88 <_usb_d_dev_ep_enable+0x2a0>)
    390a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    390e:	2000      	movs	r0, #0
    3910:	72b0      	strb	r0, [r6, #10]
    3912:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3914:	2106      	movs	r1, #6
    3916:	e7f1      	b.n	38fc <_usb_d_dev_ep_enable+0x114>
    3918:	2105      	movs	r1, #5
    391a:	e7ef      	b.n	38fc <_usb_d_dev_ep_enable+0x114>
    391c:	2104      	movs	r1, #4
    391e:	e7ed      	b.n	38fc <_usb_d_dev_ep_enable+0x114>
    3920:	2103      	movs	r1, #3
    3922:	e7eb      	b.n	38fc <_usb_d_dev_ep_enable+0x114>
    3924:	2102      	movs	r1, #2
    3926:	e7e9      	b.n	38fc <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3928:	f06f 0011 	mvn.w	r0, #17
    392c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    392e:	f06f 0013 	mvn.w	r0, #19
    3932:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3934:	f06f 0013 	mvn.w	r0, #19
    3938:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    393a:	f06f 0013 	mvn.w	r0, #19
    393e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3940:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3944:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3948:	b2e4      	uxtb	r4, r4
    394a:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    394c:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    394e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3952:	494d      	ldr	r1, [pc, #308]	; (3a88 <_usb_d_dev_ep_enable+0x2a0>)
    3954:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3958:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    395c:	2dff      	cmp	r5, #255	; 0xff
    395e:	d0e3      	beq.n	3928 <_usb_d_dev_ep_enable+0x140>
    3960:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3962:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3964:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3968:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    396c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3970:	f001 0107 	and.w	r1, r1, #7
    3974:	2901      	cmp	r1, #1
    3976:	f43f af4e 	beq.w	3816 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    397a:	2f00      	cmp	r7, #0
    397c:	f6ff af7a 	blt.w	3874 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3980:	f014 0f07 	tst.w	r4, #7
    3984:	d1d9      	bne.n	393a <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3986:	4d40      	ldr	r5, [pc, #256]	; (3a88 <_usb_d_dev_ep_enable+0x2a0>)
    3988:	009f      	lsls	r7, r3, #2
    398a:	18f9      	adds	r1, r7, r3
    398c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    3990:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3994:	f001 0107 	and.w	r1, r1, #7
    3998:	430c      	orrs	r4, r1
    399a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    399e:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    39a2:	443b      	add	r3, r7
    39a4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    39a8:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    39ac:	4b37      	ldr	r3, [pc, #220]	; (3a8c <_usb_d_dev_ep_enable+0x2a4>)
    39ae:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    39b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    39b6:	d8a0      	bhi.n	38fa <_usb_d_dev_ep_enable+0x112>
    39b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    39bc:	d8aa      	bhi.n	3914 <_usb_d_dev_ep_enable+0x12c>
    39be:	2980      	cmp	r1, #128	; 0x80
    39c0:	d8aa      	bhi.n	3918 <_usb_d_dev_ep_enable+0x130>
    39c2:	2940      	cmp	r1, #64	; 0x40
    39c4:	d8aa      	bhi.n	391c <_usb_d_dev_ep_enable+0x134>
    39c6:	2920      	cmp	r1, #32
    39c8:	d8aa      	bhi.n	3920 <_usb_d_dev_ep_enable+0x138>
    39ca:	2910      	cmp	r1, #16
    39cc:	d8aa      	bhi.n	3924 <_usb_d_dev_ep_enable+0x13c>
    39ce:	2908      	cmp	r1, #8
    39d0:	bf94      	ite	ls
    39d2:	2100      	movls	r1, #0
    39d4:	2101      	movhi	r1, #1
    39d6:	e791      	b.n	38fc <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    39d8:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    39dc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    39de:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    39e2:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    39e4:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    39e8:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    39ea:	2140      	movs	r1, #64	; 0x40
    39ec:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    39f0:	2080      	movs	r0, #128	; 0x80
    39f2:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    39f6:	4a24      	ldr	r2, [pc, #144]	; (3a88 <_usb_d_dev_ep_enable+0x2a0>)
    39f8:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    39fc:	2000      	movs	r0, #0
    39fe:	72b0      	strb	r0, [r6, #10]
    3a00:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3a02:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3a06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3a0e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    3a12:	016d      	lsls	r5, r5, #5
    3a14:	1953      	adds	r3, r2, r5
    3a16:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3a18:	685a      	ldr	r2, [r3, #4]
    3a1a:	f364 329b 	bfi	r2, r4, #14, #14
    3a1e:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3a20:	685a      	ldr	r2, [r3, #4]
    3a22:	f360 020d 	bfi	r2, r0, #0, #14
    3a26:	605a      	str	r2, [r3, #4]
    3a28:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    3a2c:	22b0      	movs	r2, #176	; 0xb0
    3a2e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3a32:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3a36:	461d      	mov	r5, r3
    3a38:	2310      	movs	r3, #16
    3a3a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    3a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a40:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a44:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a46:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a4a:	2705      	movs	r7, #5
    3a4c:	e7ca      	b.n	39e4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a4e:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a52:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a54:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a58:	2703      	movs	r7, #3
    3a5a:	e7c3      	b.n	39e4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a5c:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a60:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a62:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a66:	2706      	movs	r7, #6
    3a68:	e7bc      	b.n	39e4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a6a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a6e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a70:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a74:	2704      	movs	r7, #4
    3a76:	e7b5      	b.n	39e4 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a78:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3a7c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3a7e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3a82:	2702      	movs	r7, #2
    3a84:	e7ae      	b.n	39e4 <_usb_d_dev_ep_enable+0x1fc>
    3a86:	bf00      	nop
    3a88:	200006a4 	.word	0x200006a4
    3a8c:	0fffc000 	.word	0x0fffc000

00003a90 <_usb_d_dev_ep_stall>:
{
    3a90:	b470      	push	{r4, r5, r6}
    3a92:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3a94:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a96:	f010 000f 	ands.w	r0, r0, #15
    3a9a:	d008      	beq.n	3aae <_usb_d_dev_ep_stall+0x1e>
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	bfb4      	ite	lt
    3aa0:	1c83      	addlt	r3, r0, #2
    3aa2:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    3aa4:	2802      	cmp	r0, #2
    3aa6:	d903      	bls.n	3ab0 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    3aa8:	f06f 0011 	mvn.w	r0, #17
    3aac:	e018      	b.n	3ae0 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    3aae:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    3ab0:	2901      	cmp	r1, #1
    3ab2:	d017      	beq.n	3ae4 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3ab4:	2900      	cmp	r1, #0
    3ab6:	d03a      	beq.n	3b2e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3abc:	4a45      	ldr	r2, [pc, #276]	; (3bd4 <_usb_d_dev_ep_stall+0x144>)
    3abe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ac2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3ac6:	f003 030f 	and.w	r3, r3, #15
    3aca:	015b      	lsls	r3, r3, #5
    3acc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3ad0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3ad4:	2310      	movs	r3, #16
    3ad6:	40a3      	lsls	r3, r4
    3ad8:	421a      	tst	r2, r3
    3ada:	bf14      	ite	ne
    3adc:	2001      	movne	r0, #1
    3ade:	2000      	moveq	r0, #0
}
    3ae0:	bc70      	pop	{r4, r5, r6}
    3ae2:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3ae4:	2510      	movs	r5, #16
    3ae6:	40a5      	lsls	r5, r4
    3ae8:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3aea:	493a      	ldr	r1, [pc, #232]	; (3bd4 <_usb_d_dev_ep_stall+0x144>)
    3aec:	009e      	lsls	r6, r3, #2
    3aee:	18f2      	adds	r2, r6, r3
    3af0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3af4:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3af8:	f002 020f 	and.w	r2, r2, #15
    3afc:	0150      	lsls	r0, r2, #5
    3afe:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3b02:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3b06:	2020      	movs	r0, #32
    3b08:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3b0c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3b0e:	0152      	lsls	r2, r2, #5
    3b10:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3b14:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3b18:	4433      	add	r3, r6
    3b1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3b1e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3b22:	f042 0208 	orr.w	r2, r2, #8
    3b26:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3b2a:	2000      	movs	r0, #0
    3b2c:	e7d8      	b.n	3ae0 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3b2e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3b32:	4928      	ldr	r1, [pc, #160]	; (3bd4 <_usb_d_dev_ep_stall+0x144>)
    3b34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3b38:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    3b3c:	f002 020f 	and.w	r2, r2, #15
    3b40:	0151      	lsls	r1, r2, #5
    3b42:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3b46:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3b4a:	2010      	movs	r0, #16
    3b4c:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    3b4e:	4205      	tst	r5, r0
    3b50:	d03c      	beq.n	3bcc <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3b52:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3b54:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3b58:	2020      	movs	r0, #32
    3b5a:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3b5c:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3b5e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3b62:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3b66:	4202      	tst	r2, r0
    3b68:	d007      	beq.n	3b7a <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3b6a:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3b6e:	2201      	movs	r2, #1
    3b70:	fa02 f404 	lsl.w	r4, r2, r4
    3b74:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3b76:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3b7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3b7e:	4815      	ldr	r0, [pc, #84]	; (3bd4 <_usb_d_dev_ep_stall+0x144>)
    3b80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3b84:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    3b88:	f002 0207 	and.w	r2, r2, #7
    3b8c:	2a01      	cmp	r2, #1
    3b8e:	d00c      	beq.n	3baa <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    3b90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b94:	4a0f      	ldr	r2, [pc, #60]	; (3bd4 <_usb_d_dev_ep_stall+0x144>)
    3b96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b9a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3b9e:	f36f 02c3 	bfc	r2, #3, #1
    3ba2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3ba6:	2000      	movs	r0, #0
    3ba8:	e79a      	b.n	3ae0 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3baa:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3bae:	f012 0f30 	tst.w	r2, #48	; 0x30
    3bb2:	d10d      	bne.n	3bd0 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    3bb4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3bb8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3bbc:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3bc0:	f36f 02c3 	bfc	r2, #3, #1
    3bc4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3bc8:	2000      	movs	r0, #0
    3bca:	e789      	b.n	3ae0 <_usb_d_dev_ep_stall+0x50>
    3bcc:	2000      	movs	r0, #0
    3bce:	e787      	b.n	3ae0 <_usb_d_dev_ep_stall+0x50>
    3bd0:	2000      	movs	r0, #0
    3bd2:	e785      	b.n	3ae0 <_usb_d_dev_ep_stall+0x50>
    3bd4:	200006a4 	.word	0x200006a4

00003bd8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3bd8:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3bda:	f000 040f 	and.w	r4, r0, #15
    3bde:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3be0:	4a14      	ldr	r2, [pc, #80]	; (3c34 <_usb_d_dev_ep_read_req+0x5c>)
    3be2:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    3be4:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3be6:	6840      	ldr	r0, [r0, #4]
    3be8:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3bec:	2c02      	cmp	r4, #2
    3bee:	d817      	bhi.n	3c20 <_usb_d_dev_ep_read_req+0x48>
    3bf0:	b1c9      	cbz	r1, 3c26 <_usb_d_dev_ep_read_req+0x4e>
    3bf2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3bf6:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    3bfa:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3bfc:	2a11      	cmp	r2, #17
    3bfe:	d115      	bne.n	3c2c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3c00:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3c04:	f012 0f10 	tst.w	r2, #16
    3c08:	d102      	bne.n	3c10 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    3c0a:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3c0c:	bc30      	pop	{r4, r5}
    3c0e:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3c10:	682c      	ldr	r4, [r5, #0]
    3c12:	686a      	ldr	r2, [r5, #4]
    3c14:	600c      	str	r4, [r1, #0]
    3c16:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3c18:	2210      	movs	r2, #16
    3c1a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3c1e:	e7f5      	b.n	3c0c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3c20:	f06f 0011 	mvn.w	r0, #17
    3c24:	e7f2      	b.n	3c0c <_usb_d_dev_ep_read_req+0x34>
    3c26:	f06f 0011 	mvn.w	r0, #17
    3c2a:	e7ef      	b.n	3c0c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3c2c:	f06f 0012 	mvn.w	r0, #18
    3c30:	e7ec      	b.n	3c0c <_usb_d_dev_ep_read_req+0x34>
    3c32:	bf00      	nop
    3c34:	200006a4 	.word	0x200006a4

00003c38 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c3c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3c3e:	7a03      	ldrb	r3, [r0, #8]
    3c40:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c42:	f013 030f 	ands.w	r3, r3, #15
    3c46:	f000 80c2 	beq.w	3dce <_usb_d_dev_ep_trans+0x196>
    3c4a:	2e00      	cmp	r6, #0
    3c4c:	bfb4      	ite	lt
    3c4e:	1c9a      	addlt	r2, r3, #2
    3c50:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    3c52:	4614      	mov	r4, r2
    3c54:	4969      	ldr	r1, [pc, #420]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3c56:	f101 0760 	add.w	r7, r1, #96	; 0x60
    3c5a:	1c55      	adds	r5, r2, #1
    3c5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3c60:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3c64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3c68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3c6c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3c70:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3c74:	428a      	cmp	r2, r1
    3c76:	d025      	beq.n	3cc4 <_usb_d_dev_ep_trans+0x8c>
    3c78:	1e55      	subs	r5, r2, #1
    3c7a:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    3c7c:	6841      	ldr	r1, [r0, #4]
    3c7e:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3c80:	2b02      	cmp	r3, #2
    3c82:	f200 8092 	bhi.w	3daa <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3c86:	6803      	ldr	r3, [r0, #0]
    3c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3c8c:	d31c      	bcc.n	3cc8 <_usb_d_dev_ep_trans+0x90>
    3c8e:	eb03 0c01 	add.w	ip, r3, r1
    3c92:	f8df e180 	ldr.w	lr, [pc, #384]	; 3e14 <_usb_d_dev_ep_trans+0x1dc>
    3c96:	45f4      	cmp	ip, lr
    3c98:	d816      	bhi.n	3cc8 <_usb_d_dev_ep_trans+0x90>
    3c9a:	f013 0f03 	tst.w	r3, #3
    3c9e:	d113      	bne.n	3cc8 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    3ca0:	2e00      	cmp	r6, #0
    3ca2:	db2a      	blt.n	3cfa <_usb_d_dev_ep_trans+0xc2>
    3ca4:	428a      	cmp	r2, r1
    3ca6:	f200 809c 	bhi.w	3de2 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3caa:	b34d      	cbz	r5, 3d00 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    3cac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3cb0:	4a52      	ldr	r2, [pc, #328]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3cb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d07b      	beq.n	3db6 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    3cbe:	f04f 0800 	mov.w	r8, #0
    3cc2:	e00c      	b.n	3cde <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3cc4:	4615      	mov	r5, r2
    3cc6:	e7d9      	b.n	3c7c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3cc8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3ccc:	4a4b      	ldr	r2, [pc, #300]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3cce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d06a      	beq.n	3db0 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3cda:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3cde:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3ce2:	4a46      	ldr	r2, [pc, #280]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3ce4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ce8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3cec:	f013 0f08 	tst.w	r3, #8
    3cf0:	d009      	beq.n	3d06 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    3cf2:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3cf4:	b003      	add	sp, #12
    3cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    3cfa:	f04f 0800 	mov.w	r8, #0
    3cfe:	e7ee      	b.n	3cde <_usb_d_dev_ep_trans+0xa6>
    3d00:	f04f 0800 	mov.w	r8, #0
    3d04:	e7eb      	b.n	3cde <_usb_d_dev_ep_trans+0xa6>
    3d06:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3d08:	a801      	add	r0, sp, #4
    3d0a:	4b3d      	ldr	r3, [pc, #244]	; (3e00 <_usb_d_dev_ep_trans+0x1c8>)
    3d0c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3d0e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3d12:	4a3a      	ldr	r2, [pc, #232]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3d14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3d18:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3d1c:	f013 0f40 	tst.w	r3, #64	; 0x40
    3d20:	d13c      	bne.n	3d9c <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    3d22:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    3d26:	4b35      	ldr	r3, [pc, #212]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3d28:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3d2c:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3d34:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3d38:	a801      	add	r0, sp, #4
    3d3a:	4b32      	ldr	r3, [pc, #200]	; (3e04 <_usb_d_dev_ep_trans+0x1cc>)
    3d3c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3d3e:	f8da 3000 	ldr.w	r3, [sl]
    3d42:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    3d46:	f8da 3004 	ldr.w	r3, [sl, #4]
    3d4a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    3d4e:	2300      	movs	r3, #0
    3d50:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3d54:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    3d56:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3d5a:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    3d5e:	f368 1345 	bfi	r3, r8, #5, #1
    3d62:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3d66:	f89a 3009 	ldrb.w	r3, [sl, #9]
    3d6a:	b1e3      	cbz	r3, 3da6 <_usb_d_dev_ep_trans+0x16e>
    3d6c:	fab5 f585 	clz	r5, r5
    3d70:	096d      	lsrs	r5, r5, #5
    3d72:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3d76:	4b21      	ldr	r3, [pc, #132]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3d78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3d7c:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    3d80:	f365 1304 	bfi	r3, r5, #4, #1
    3d84:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    3d88:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    3d8a:	f04f 0100 	mov.w	r1, #0
    3d8e:	4638      	mov	r0, r7
    3d90:	bfb4      	ite	lt
    3d92:	4b1d      	ldrlt	r3, [pc, #116]	; (3e08 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    3d94:	4b1d      	ldrge	r3, [pc, #116]	; (3e0c <_usb_d_dev_ep_trans+0x1d4>)
    3d96:	4798      	blx	r3
	return ERR_NONE;
    3d98:	2000      	movs	r0, #0
    3d9a:	e7ab      	b.n	3cf4 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    3d9c:	a801      	add	r0, sp, #4
    3d9e:	4b19      	ldr	r3, [pc, #100]	; (3e04 <_usb_d_dev_ep_trans+0x1cc>)
    3da0:	4798      	blx	r3
		return USB_BUSY;
    3da2:	2001      	movs	r0, #1
    3da4:	e7a6      	b.n	3cf4 <_usb_d_dev_ep_trans+0xbc>
    3da6:	2500      	movs	r5, #0
    3da8:	e7e3      	b.n	3d72 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    3daa:	f06f 0011 	mvn.w	r0, #17
    3dae:	e7a1      	b.n	3cf4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3db0:	f06f 0012 	mvn.w	r0, #18
    3db4:	e79e      	b.n	3cf4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    3db6:	f06f 0011 	mvn.w	r0, #17
    3dba:	e79b      	b.n	3cf4 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3dbc:	f06f 0012 	mvn.w	r0, #18
    3dc0:	e798      	b.n	3cf4 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    3dc2:	6841      	ldr	r1, [r0, #4]
    3dc4:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3dc8:	4f11      	ldr	r7, [pc, #68]	; (3e10 <_usb_d_dev_ep_trans+0x1d8>)
    3dca:	2400      	movs	r4, #0
    3dcc:	e75b      	b.n	3c86 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3dce:	4a0b      	ldr	r2, [pc, #44]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3dd0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3dd4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3dd8:	428a      	cmp	r2, r1
    3dda:	d0f2      	beq.n	3dc2 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3ddc:	4f0c      	ldr	r7, [pc, #48]	; (3e10 <_usb_d_dev_ep_trans+0x1d8>)
    3dde:	2400      	movs	r4, #0
    3de0:	e74a      	b.n	3c78 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    3de2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3de6:	4a05      	ldr	r2, [pc, #20]	; (3dfc <_usb_d_dev_ep_trans+0x1c4>)
    3de8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3df0:	2b00      	cmp	r3, #0
    3df2:	d0e3      	beq.n	3dbc <_usb_d_dev_ep_trans+0x184>
    3df4:	f04f 0801 	mov.w	r8, #1
    3df8:	e771      	b.n	3cde <_usb_d_dev_ep_trans+0xa6>
    3dfa:	bf00      	nop
    3dfc:	200006a4 	.word	0x200006a4
    3e00:	00004a85 	.word	0x00004a85
    3e04:	00004a93 	.word	0x00004a93
    3e08:	00002e99 	.word	0x00002e99
    3e0c:	0000301d 	.word	0x0000301d
    3e10:	20000718 	.word	0x20000718
    3e14:	20041fff 	.word	0x20041fff

00003e18 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    3e18:	b508      	push	{r3, lr}
    3e1a:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3e1c:	f010 000f 	ands.w	r0, r0, #15
    3e20:	d00c      	beq.n	3e3c <_usb_d_dev_ep_abort+0x24>
    3e22:	2900      	cmp	r1, #0
    3e24:	bfb4      	ite	lt
    3e26:	1c83      	addlt	r3, r0, #2
    3e28:	4603      	movge	r3, r0
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    3e2a:	2802      	cmp	r0, #2
    3e2c:	d900      	bls.n	3e30 <_usb_d_dev_ep_abort+0x18>
    3e2e:	bd08      	pop	{r3, pc}
	return &dev_inst.ep[ep_index];
    3e30:	2014      	movs	r0, #20
    3e32:	fb03 0300 	mla	r3, r3, r0, r0
    3e36:	4804      	ldr	r0, [pc, #16]	; (3e48 <_usb_d_dev_ep_abort+0x30>)
    3e38:	4418      	add	r0, r3
    3e3a:	e000      	b.n	3e3e <_usb_d_dev_ep_abort+0x26>
    3e3c:	4803      	ldr	r0, [pc, #12]	; (3e4c <_usb_d_dev_ep_abort+0x34>)
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    3e3e:	2202      	movs	r2, #2
    3e40:	0fc9      	lsrs	r1, r1, #31
    3e42:	4b03      	ldr	r3, [pc, #12]	; (3e50 <_usb_d_dev_ep_abort+0x38>)
    3e44:	4798      	blx	r3
    3e46:	e7f2      	b.n	3e2e <_usb_d_dev_ep_abort+0x16>
    3e48:	20000704 	.word	0x20000704
    3e4c:	20000718 	.word	0x20000718
    3e50:	00002ce9 	.word	0x00002ce9

00003e54 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3e54:	4b06      	ldr	r3, [pc, #24]	; (3e70 <_usb_d_dev_register_callback+0x1c>)
    3e56:	2900      	cmp	r1, #0
    3e58:	bf08      	it	eq
    3e5a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    3e5c:	2801      	cmp	r0, #1
    3e5e:	d003      	beq.n	3e68 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3e60:	b908      	cbnz	r0, 3e66 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3e62:	4b04      	ldr	r3, [pc, #16]	; (3e74 <_usb_d_dev_register_callback+0x20>)
    3e64:	6619      	str	r1, [r3, #96]	; 0x60
    3e66:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3e68:	4b02      	ldr	r3, [pc, #8]	; (3e74 <_usb_d_dev_register_callback+0x20>)
    3e6a:	6659      	str	r1, [r3, #100]	; 0x64
    3e6c:	4770      	bx	lr
    3e6e:	bf00      	nop
    3e70:	00002c11 	.word	0x00002c11
    3e74:	200006a4 	.word	0x200006a4

00003e78 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3e78:	4b09      	ldr	r3, [pc, #36]	; (3ea0 <_usb_d_dev_register_ep_callback+0x28>)
    3e7a:	2900      	cmp	r1, #0
    3e7c:	bf08      	it	eq
    3e7e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3e80:	4603      	mov	r3, r0
    3e82:	b130      	cbz	r0, 3e92 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3e84:	2801      	cmp	r0, #1
    3e86:	d007      	beq.n	3e98 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3e88:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3e8a:	bf04      	itt	eq
    3e8c:	4b05      	ldreq	r3, [pc, #20]	; (3ea4 <_usb_d_dev_register_ep_callback+0x2c>)
    3e8e:	6719      	streq	r1, [r3, #112]	; 0x70
    3e90:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3e92:	4b04      	ldr	r3, [pc, #16]	; (3ea4 <_usb_d_dev_register_ep_callback+0x2c>)
    3e94:	6699      	str	r1, [r3, #104]	; 0x68
    3e96:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3e98:	4b02      	ldr	r3, [pc, #8]	; (3ea4 <_usb_d_dev_register_ep_callback+0x2c>)
    3e9a:	66d9      	str	r1, [r3, #108]	; 0x6c
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop
    3ea0:	00002c11 	.word	0x00002c11
    3ea4:	200006a4 	.word	0x200006a4

00003ea8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    3ea8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3eaa:	4b01      	ldr	r3, [pc, #4]	; (3eb0 <USB_0_Handler+0x8>)
    3eac:	4798      	blx	r3
    3eae:	bd08      	pop	{r3, pc}
    3eb0:	0000320d 	.word	0x0000320d

00003eb4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3eb4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3eb6:	4b01      	ldr	r3, [pc, #4]	; (3ebc <USB_1_Handler+0x8>)
    3eb8:	4798      	blx	r3
    3eba:	bd08      	pop	{r3, pc}
    3ebc:	0000320d 	.word	0x0000320d

00003ec0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    3ec0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3ec2:	4b01      	ldr	r3, [pc, #4]	; (3ec8 <USB_2_Handler+0x8>)
    3ec4:	4798      	blx	r3
    3ec6:	bd08      	pop	{r3, pc}
    3ec8:	0000320d 	.word	0x0000320d

00003ecc <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3ecc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3ece:	4b01      	ldr	r3, [pc, #4]	; (3ed4 <USB_3_Handler+0x8>)
    3ed0:	4798      	blx	r3
    3ed2:	bd08      	pop	{r3, pc}
    3ed4:	0000320d 	.word	0x0000320d

00003ed8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eda:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3edc:	780b      	ldrb	r3, [r1, #0]
    3ede:	f3c3 1441 	ubfx	r4, r3, #5, #2
    3ee2:	2c01      	cmp	r4, #1
    3ee4:	d15e      	bne.n	3fa4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3ee6:	888c      	ldrh	r4, [r1, #4]
    3ee8:	4d35      	ldr	r5, [pc, #212]	; (3fc0 <cdcdf_acm_req+0xe8>)
    3eea:	782d      	ldrb	r5, [r5, #0]
    3eec:	42a5      	cmp	r5, r4
    3eee:	d003      	beq.n	3ef8 <cdcdf_acm_req+0x20>
    3ef0:	4d33      	ldr	r5, [pc, #204]	; (3fc0 <cdcdf_acm_req+0xe8>)
    3ef2:	786d      	ldrb	r5, [r5, #1]
    3ef4:	42a5      	cmp	r5, r4
    3ef6:	d158      	bne.n	3faa <cdcdf_acm_req+0xd2>
    3ef8:	4616      	mov	r6, r2
    3efa:	460c      	mov	r4, r1
    3efc:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3efe:	f013 0f80 	tst.w	r3, #128	; 0x80
    3f02:	d10c      	bne.n	3f1e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    3f04:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3f06:	4b2f      	ldr	r3, [pc, #188]	; (3fc4 <cdcdf_acm_req+0xec>)
    3f08:	4798      	blx	r3
    3f0a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    3f0c:	7863      	ldrb	r3, [r4, #1]
    3f0e:	2b20      	cmp	r3, #32
    3f10:	d013      	beq.n	3f3a <cdcdf_acm_req+0x62>
    3f12:	2b22      	cmp	r3, #34	; 0x22
    3f14:	d032      	beq.n	3f7c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    3f16:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3f1a:	b003      	add	sp, #12
    3f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3f1e:	2a01      	cmp	r2, #1
    3f20:	d046      	beq.n	3fb0 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    3f22:	784b      	ldrb	r3, [r1, #1]
    3f24:	2b21      	cmp	r3, #33	; 0x21
    3f26:	d145      	bne.n	3fb4 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3f28:	88cb      	ldrh	r3, [r1, #6]
    3f2a:	2b07      	cmp	r3, #7
    3f2c:	d145      	bne.n	3fba <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3f2e:	2300      	movs	r3, #0
    3f30:	2207      	movs	r2, #7
    3f32:	4925      	ldr	r1, [pc, #148]	; (3fc8 <cdcdf_acm_req+0xf0>)
    3f34:	4c25      	ldr	r4, [pc, #148]	; (3fcc <cdcdf_acm_req+0xf4>)
    3f36:	47a0      	blx	r4
    3f38:	e7ef      	b.n	3f1a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3f3a:	2f07      	cmp	r7, #7
    3f3c:	d12b      	bne.n	3f96 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    3f3e:	b1be      	cbz	r6, 3f70 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3f40:	6800      	ldr	r0, [r0, #0]
    3f42:	9000      	str	r0, [sp, #0]
    3f44:	888a      	ldrh	r2, [r1, #4]
    3f46:	798b      	ldrb	r3, [r1, #6]
    3f48:	f8ad 2004 	strh.w	r2, [sp, #4]
    3f4c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3f50:	4b1b      	ldr	r3, [pc, #108]	; (3fc0 <cdcdf_acm_req+0xe8>)
    3f52:	691b      	ldr	r3, [r3, #16]
    3f54:	b113      	cbz	r3, 3f5c <cdcdf_acm_req+0x84>
    3f56:	4668      	mov	r0, sp
    3f58:	4798      	blx	r3
    3f5a:	b1f8      	cbz	r0, 3f9c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    3f5c:	4b18      	ldr	r3, [pc, #96]	; (3fc0 <cdcdf_acm_req+0xe8>)
    3f5e:	aa02      	add	r2, sp, #8
    3f60:	e912 0003 	ldmdb	r2, {r0, r1}
    3f64:	6098      	str	r0, [r3, #8]
    3f66:	8199      	strh	r1, [r3, #12]
    3f68:	0c09      	lsrs	r1, r1, #16
    3f6a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    3f6c:	2000      	movs	r0, #0
    3f6e:	e7d4      	b.n	3f1a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3f70:	2300      	movs	r3, #0
    3f72:	2207      	movs	r2, #7
    3f74:	4628      	mov	r0, r5
    3f76:	4c15      	ldr	r4, [pc, #84]	; (3fcc <cdcdf_acm_req+0xf4>)
    3f78:	47a0      	blx	r4
    3f7a:	e7ce      	b.n	3f1a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3f7c:	2300      	movs	r3, #0
    3f7e:	461a      	mov	r2, r3
    3f80:	4619      	mov	r1, r3
    3f82:	4618      	mov	r0, r3
    3f84:	4d11      	ldr	r5, [pc, #68]	; (3fcc <cdcdf_acm_req+0xf4>)
    3f86:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3f88:	4b0d      	ldr	r3, [pc, #52]	; (3fc0 <cdcdf_acm_req+0xe8>)
    3f8a:	695b      	ldr	r3, [r3, #20]
    3f8c:	b143      	cbz	r3, 3fa0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    3f8e:	8860      	ldrh	r0, [r4, #2]
    3f90:	4798      	blx	r3
		return ERR_NONE;
    3f92:	2000      	movs	r0, #0
    3f94:	e7c1      	b.n	3f1a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3f96:	f04f 30ff 	mov.w	r0, #4294967295
    3f9a:	e7be      	b.n	3f1a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3f9c:	2000      	movs	r0, #0
    3f9e:	e7bc      	b.n	3f1a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3fa0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3fa2:	e7ba      	b.n	3f1a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3fa4:	f06f 0009 	mvn.w	r0, #9
    3fa8:	e7b7      	b.n	3f1a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3faa:	f06f 0009 	mvn.w	r0, #9
    3fae:	e7b4      	b.n	3f1a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3fb0:	2000      	movs	r0, #0
    3fb2:	e7b2      	b.n	3f1a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3fb4:	f06f 000c 	mvn.w	r0, #12
    3fb8:	e7af      	b.n	3f1a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3fba:	f04f 30ff 	mov.w	r0, #4294967295
    3fbe:	e7ac      	b.n	3f1a <cdcdf_acm_req+0x42>
    3fc0:	2000088c 	.word	0x2000088c
    3fc4:	000048f9 	.word	0x000048f9
    3fc8:	20000894 	.word	0x20000894
    3fcc:	000043d5 	.word	0x000043d5

00003fd0 <cdcdf_acm_ctrl>:
{
    3fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fd4:	b083      	sub	sp, #12
    3fd6:	4616      	mov	r6, r2
	switch (ctrl) {
    3fd8:	2901      	cmp	r1, #1
    3fda:	d066      	beq.n	40aa <cdcdf_acm_ctrl+0xda>
    3fdc:	b141      	cbz	r1, 3ff0 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3fde:	2902      	cmp	r1, #2
    3fe0:	bf0c      	ite	eq
    3fe2:	f06f 001a 	mvneq.w	r0, #26
    3fe6:	f06f 000c 	mvnne.w	r0, #12
}
    3fea:	b003      	add	sp, #12
    3fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3ff0:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3ff4:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3ff6:	2800      	cmp	r0, #0
    3ff8:	f000 8085 	beq.w	4106 <cdcdf_acm_ctrl+0x136>
    3ffc:	f10a 3bff 	add.w	fp, sl, #4294967295
    4000:	f10a 0301 	add.w	r3, sl, #1
    4004:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4006:	4f46      	ldr	r7, [pc, #280]	; (4120 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    4008:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4130 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    400c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4134 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    4010:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    4012:	7943      	ldrb	r3, [r0, #5]
    4014:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    4018:	2b02      	cmp	r3, #2
    401a:	d002      	beq.n	4022 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    401c:	f06f 0009 	mvn.w	r0, #9
    4020:	e7e3      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
    4022:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    4026:	f89b 3000 	ldrb.w	r3, [fp]
    402a:	429a      	cmp	r2, r3
    402c:	d06e      	beq.n	410c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    402e:	2bff      	cmp	r3, #255	; 0xff
    4030:	d16f      	bne.n	4112 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    4032:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    4036:	2205      	movs	r2, #5
    4038:	6871      	ldr	r1, [r6, #4]
    403a:	4b3a      	ldr	r3, [pc, #232]	; (4124 <cdcdf_acm_ctrl+0x154>)
    403c:	4798      	blx	r3
		while (NULL != ep) {
    403e:	4604      	mov	r4, r0
    4040:	b1f8      	cbz	r0, 4082 <cdcdf_acm_ctrl+0xb2>
    4042:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    4046:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    4048:	7963      	ldrb	r3, [r4, #5]
    404a:	7922      	ldrb	r2, [r4, #4]
    404c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4050:	b292      	uxth	r2, r2
    4052:	78e1      	ldrb	r1, [r4, #3]
    4054:	4628      	mov	r0, r5
    4056:	47b8      	blx	r7
    4058:	2800      	cmp	r0, #0
    405a:	d15d      	bne.n	4118 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    405c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    4060:	bf14      	ite	ne
    4062:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    4066:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    406a:	4628      	mov	r0, r5
    406c:	47c8      	blx	r9
			desc->sod = ep;
    406e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    4070:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4072:	6871      	ldr	r1, [r6, #4]
    4074:	4420      	add	r0, r4
    4076:	47c0      	blx	r8
		while (NULL != ep) {
    4078:	4604      	mov	r4, r0
    407a:	2800      	cmp	r0, #0
    407c:	d1e3      	bne.n	4046 <cdcdf_acm_ctrl+0x76>
    407e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    4082:	6833      	ldr	r3, [r6, #0]
    4084:	7818      	ldrb	r0, [r3, #0]
    4086:	2204      	movs	r2, #4
    4088:	6871      	ldr	r1, [r6, #4]
    408a:	4418      	add	r0, r3
    408c:	4b25      	ldr	r3, [pc, #148]	; (4124 <cdcdf_acm_ctrl+0x154>)
    408e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    4090:	9b00      	ldr	r3, [sp, #0]
    4092:	459b      	cmp	fp, r3
    4094:	d004      	beq.n	40a0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    4096:	2800      	cmp	r0, #0
    4098:	d1ba      	bne.n	4010 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    409a:	f06f 0009 	mvn.w	r0, #9
    409e:	e7a4      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    40a0:	2201      	movs	r2, #1
    40a2:	4b21      	ldr	r3, [pc, #132]	; (4128 <cdcdf_acm_ctrl+0x158>)
    40a4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    40a6:	2000      	movs	r0, #0
    40a8:	e79f      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    40aa:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    40ac:	b142      	cbz	r2, 40c0 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    40ae:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    40b0:	795b      	ldrb	r3, [r3, #5]
    40b2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    40b6:	2b02      	cmp	r3, #2
    40b8:	d002      	beq.n	40c0 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    40ba:	f06f 0009 	mvn.w	r0, #9
    40be:	e794      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    40c0:	7823      	ldrb	r3, [r4, #0]
    40c2:	2bff      	cmp	r3, #255	; 0xff
    40c4:	d008      	beq.n	40d8 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    40c6:	23ff      	movs	r3, #255	; 0xff
    40c8:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    40ca:	78a0      	ldrb	r0, [r4, #2]
    40cc:	4298      	cmp	r0, r3
    40ce:	d003      	beq.n	40d8 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    40d0:	4b16      	ldr	r3, [pc, #88]	; (412c <cdcdf_acm_ctrl+0x15c>)
    40d2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    40d4:	23ff      	movs	r3, #255	; 0xff
    40d6:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    40d8:	7863      	ldrb	r3, [r4, #1]
    40da:	2bff      	cmp	r3, #255	; 0xff
    40dc:	d008      	beq.n	40f0 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    40de:	23ff      	movs	r3, #255	; 0xff
    40e0:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    40e2:	78e0      	ldrb	r0, [r4, #3]
    40e4:	4298      	cmp	r0, r3
    40e6:	d003      	beq.n	40f0 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    40e8:	4b10      	ldr	r3, [pc, #64]	; (412c <cdcdf_acm_ctrl+0x15c>)
    40ea:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    40ec:	23ff      	movs	r3, #255	; 0xff
    40ee:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    40f0:	7920      	ldrb	r0, [r4, #4]
    40f2:	28ff      	cmp	r0, #255	; 0xff
    40f4:	d003      	beq.n	40fe <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    40f6:	4b0d      	ldr	r3, [pc, #52]	; (412c <cdcdf_acm_ctrl+0x15c>)
    40f8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    40fa:	23ff      	movs	r3, #255	; 0xff
    40fc:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    40fe:	2000      	movs	r0, #0
    4100:	4b09      	ldr	r3, [pc, #36]	; (4128 <cdcdf_acm_ctrl+0x158>)
    4102:	7158      	strb	r0, [r3, #5]
    4104:	e771      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    4106:	f06f 0009 	mvn.w	r0, #9
    410a:	e76e      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    410c:	f06f 0011 	mvn.w	r0, #17
    4110:	e76b      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    4112:	f06f 001b 	mvn.w	r0, #27
    4116:	e768      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    4118:	f06f 0013 	mvn.w	r0, #19
    411c:	e765      	b.n	3fea <cdcdf_acm_ctrl+0x1a>
    411e:	bf00      	nop
    4120:	00001575 	.word	0x00001575
    4124:	00004919 	.word	0x00004919
    4128:	2000088c 	.word	0x2000088c
    412c:	000015dd 	.word	0x000015dd
    4130:	00001609 	.word	0x00001609
    4134:	00004953 	.word	0x00004953

00004138 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    4138:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    413a:	4b0a      	ldr	r3, [pc, #40]	; (4164 <cdcdf_acm_init+0x2c>)
    413c:	4798      	blx	r3
    413e:	2801      	cmp	r0, #1
    4140:	d80c      	bhi.n	415c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    4142:	4809      	ldr	r0, [pc, #36]	; (4168 <cdcdf_acm_init+0x30>)
    4144:	4b09      	ldr	r3, [pc, #36]	; (416c <cdcdf_acm_init+0x34>)
    4146:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    4148:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    414a:	3018      	adds	r0, #24
    414c:	4b08      	ldr	r3, [pc, #32]	; (4170 <cdcdf_acm_init+0x38>)
    414e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    4150:	4908      	ldr	r1, [pc, #32]	; (4174 <cdcdf_acm_init+0x3c>)
    4152:	2001      	movs	r0, #1
    4154:	4b08      	ldr	r3, [pc, #32]	; (4178 <cdcdf_acm_init+0x40>)
    4156:	4798      	blx	r3
	return ERR_NONE;
    4158:	2000      	movs	r0, #0
    415a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    415c:	f06f 0010 	mvn.w	r0, #16
}
    4160:	bd08      	pop	{r3, pc}
    4162:	bf00      	nop
    4164:	00004905 	.word	0x00004905
    4168:	2000088c 	.word	0x2000088c
    416c:	00003fd1 	.word	0x00003fd1
    4170:	000048a5 	.word	0x000048a5
    4174:	200000b4 	.word	0x200000b4
    4178:	00004811 	.word	0x00004811

0000417c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    417c:	4b07      	ldr	r3, [pc, #28]	; (419c <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    417e:	795b      	ldrb	r3, [r3, #5]
    4180:	b143      	cbz	r3, 4194 <cdcdf_acm_read+0x18>
{
    4182:	b510      	push	{r4, lr}
    4184:	460a      	mov	r2, r1
    4186:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    4188:	2300      	movs	r3, #0
    418a:	4804      	ldr	r0, [pc, #16]	; (419c <cdcdf_acm_read+0x20>)
    418c:	7900      	ldrb	r0, [r0, #4]
    418e:	4c04      	ldr	r4, [pc, #16]	; (41a0 <cdcdf_acm_read+0x24>)
    4190:	47a0      	blx	r4
    4192:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    4194:	f06f 0010 	mvn.w	r0, #16
    4198:	4770      	bx	lr
    419a:	bf00      	nop
    419c:	2000088c 	.word	0x2000088c
    41a0:	000043d5 	.word	0x000043d5

000041a4 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    41a4:	4b07      	ldr	r3, [pc, #28]	; (41c4 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    41a6:	795b      	ldrb	r3, [r3, #5]
    41a8:	b143      	cbz	r3, 41bc <cdcdf_acm_write+0x18>
{
    41aa:	b510      	push	{r4, lr}
    41ac:	460a      	mov	r2, r1
    41ae:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    41b0:	2301      	movs	r3, #1
    41b2:	4804      	ldr	r0, [pc, #16]	; (41c4 <cdcdf_acm_write+0x20>)
    41b4:	78c0      	ldrb	r0, [r0, #3]
    41b6:	4c04      	ldr	r4, [pc, #16]	; (41c8 <cdcdf_acm_write+0x24>)
    41b8:	47a0      	blx	r4
    41ba:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    41bc:	f06f 0010 	mvn.w	r0, #16
    41c0:	4770      	bx	lr
    41c2:	bf00      	nop
    41c4:	2000088c 	.word	0x2000088c
    41c8:	000043d5 	.word	0x000043d5

000041cc <cdcdf_acm_stop_xfer>:
{
    41cc:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    41ce:	4d03      	ldr	r5, [pc, #12]	; (41dc <cdcdf_acm_stop_xfer+0x10>)
    41d0:	78e8      	ldrb	r0, [r5, #3]
    41d2:	4c03      	ldr	r4, [pc, #12]	; (41e0 <cdcdf_acm_stop_xfer+0x14>)
    41d4:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    41d6:	7928      	ldrb	r0, [r5, #4]
    41d8:	47a0      	blx	r4
    41da:	bd38      	pop	{r3, r4, r5, pc}
    41dc:	2000088c 	.word	0x2000088c
    41e0:	00001775 	.word	0x00001775

000041e4 <cdcdf_acm_register_callback>:
{
    41e4:	b508      	push	{r3, lr}
	switch (cb_type) {
    41e6:	2803      	cmp	r0, #3
    41e8:	d81b      	bhi.n	4222 <cdcdf_acm_register_callback+0x3e>
    41ea:	e8df f000 	tbb	[pc, r0]
    41ee:	0a02      	.short	0x0a02
    41f0:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    41f2:	460a      	mov	r2, r1
    41f4:	2102      	movs	r1, #2
    41f6:	4b0c      	ldr	r3, [pc, #48]	; (4228 <cdcdf_acm_register_callback+0x44>)
    41f8:	7918      	ldrb	r0, [r3, #4]
    41fa:	4b0c      	ldr	r3, [pc, #48]	; (422c <cdcdf_acm_register_callback+0x48>)
    41fc:	4798      	blx	r3
	return ERR_NONE;
    41fe:	2000      	movs	r0, #0
		break;
    4200:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    4202:	460a      	mov	r2, r1
    4204:	2102      	movs	r1, #2
    4206:	4b08      	ldr	r3, [pc, #32]	; (4228 <cdcdf_acm_register_callback+0x44>)
    4208:	78d8      	ldrb	r0, [r3, #3]
    420a:	4b08      	ldr	r3, [pc, #32]	; (422c <cdcdf_acm_register_callback+0x48>)
    420c:	4798      	blx	r3
	return ERR_NONE;
    420e:	2000      	movs	r0, #0
		break;
    4210:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    4212:	4b05      	ldr	r3, [pc, #20]	; (4228 <cdcdf_acm_register_callback+0x44>)
    4214:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    4216:	2000      	movs	r0, #0
		break;
    4218:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    421a:	4b03      	ldr	r3, [pc, #12]	; (4228 <cdcdf_acm_register_callback+0x44>)
    421c:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    421e:	2000      	movs	r0, #0
		break;
    4220:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    4222:	f06f 000c 	mvn.w	r0, #12
}
    4226:	bd08      	pop	{r3, pc}
    4228:	2000088c 	.word	0x2000088c
    422c:	0000180d 	.word	0x0000180d

00004230 <cdcdf_acm_is_enabled>:
}
    4230:	4b01      	ldr	r3, [pc, #4]	; (4238 <cdcdf_acm_is_enabled+0x8>)
    4232:	7958      	ldrb	r0, [r3, #5]
    4234:	4770      	bx	lr
    4236:	bf00      	nop
    4238:	2000088c 	.word	0x2000088c

0000423c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    423c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    423e:	4b07      	ldr	r3, [pc, #28]	; (425c <usbdc_unconfig+0x20>)
    4240:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    4242:	b14c      	cbz	r4, 4258 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    4244:	2600      	movs	r6, #0
    4246:	2501      	movs	r5, #1
    4248:	6863      	ldr	r3, [r4, #4]
    424a:	4632      	mov	r2, r6
    424c:	4629      	mov	r1, r5
    424e:	4620      	mov	r0, r4
    4250:	4798      	blx	r3
		func = func->next;
    4252:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4254:	2c00      	cmp	r4, #0
    4256:	d1f7      	bne.n	4248 <usbdc_unconfig+0xc>
    4258:	bd70      	pop	{r4, r5, r6, pc}
    425a:	bf00      	nop
    425c:	200008b0 	.word	0x200008b0

00004260 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4260:	b570      	push	{r4, r5, r6, lr}
    4262:	4606      	mov	r6, r0
    4264:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    4266:	4b07      	ldr	r3, [pc, #28]	; (4284 <usbdc_change_notify+0x24>)
    4268:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    426a:	b91c      	cbnz	r4, 4274 <usbdc_change_notify+0x14>
    426c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    426e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4270:	2c00      	cmp	r4, #0
    4272:	d0fb      	beq.n	426c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    4274:	6863      	ldr	r3, [r4, #4]
    4276:	2b00      	cmp	r3, #0
    4278:	d0f9      	beq.n	426e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    427a:	4629      	mov	r1, r5
    427c:	4630      	mov	r0, r6
    427e:	4798      	blx	r3
    4280:	e7f5      	b.n	426e <usbdc_change_notify+0xe>
    4282:	bf00      	nop
    4284:	200008b0 	.word	0x200008b0

00004288 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    428a:	4607      	mov	r7, r0
    428c:	460e      	mov	r6, r1
    428e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    4290:	4b0c      	ldr	r3, [pc, #48]	; (42c4 <usbdc_request_handler+0x3c>)
    4292:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    4294:	b91c      	cbnz	r4, 429e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    4296:	2000      	movs	r0, #0
    4298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    429a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    429c:	b16c      	cbz	r4, 42ba <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    429e:	6863      	ldr	r3, [r4, #4]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d0fa      	beq.n	429a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    42a4:	462a      	mov	r2, r5
    42a6:	4631      	mov	r1, r6
    42a8:	4638      	mov	r0, r7
    42aa:	4798      	blx	r3
			if (0 == rc) {
    42ac:	b138      	cbz	r0, 42be <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    42ae:	f110 0f0a 	cmn.w	r0, #10
    42b2:	d0f2      	beq.n	429a <usbdc_request_handler+0x12>
				return -1;
    42b4:	f04f 30ff 	mov.w	r0, #4294967295
}
    42b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    42ba:	2000      	movs	r0, #0
    42bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    42be:	2001      	movs	r0, #1
    42c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42c2:	bf00      	nop
    42c4:	200008b0 	.word	0x200008b0

000042c8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    42c8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    42ca:	4b06      	ldr	r3, [pc, #24]	; (42e4 <usbd_sof_cb+0x1c>)
    42cc:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    42ce:	b91c      	cbnz	r4, 42d8 <usbd_sof_cb+0x10>
    42d0:	bd10      	pop	{r4, pc}
		sof = sof->next;
    42d2:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    42d4:	2c00      	cmp	r4, #0
    42d6:	d0fb      	beq.n	42d0 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    42d8:	6863      	ldr	r3, [r4, #4]
    42da:	2b00      	cmp	r3, #0
    42dc:	d0f9      	beq.n	42d2 <usbd_sof_cb+0xa>
			sof->cb();
    42de:	4798      	blx	r3
    42e0:	e7f7      	b.n	42d2 <usbd_sof_cb+0xa>
    42e2:	bf00      	nop
    42e4:	200008b0 	.word	0x200008b0

000042e8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    42e8:	b510      	push	{r4, lr}
    42ea:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    42ec:	b119      	cbz	r1, 42f6 <usbdc_cb_ctl_done+0xe>
    42ee:	2901      	cmp	r1, #1
    42f0:	d026      	beq.n	4340 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    42f2:	2000      	movs	r0, #0
    42f4:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    42f6:	7813      	ldrb	r3, [r2, #0]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d1fa      	bne.n	42f2 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    42fc:	7853      	ldrb	r3, [r2, #1]
    42fe:	2b05      	cmp	r3, #5
    4300:	d00f      	beq.n	4322 <usbdc_cb_ctl_done+0x3a>
    4302:	2b09      	cmp	r3, #9
    4304:	d1f5      	bne.n	42f2 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    4306:	8852      	ldrh	r2, [r2, #2]
    4308:	4b10      	ldr	r3, [pc, #64]	; (434c <usbdc_cb_ctl_done+0x64>)
    430a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    430c:	8863      	ldrh	r3, [r4, #2]
    430e:	2b00      	cmp	r3, #0
    4310:	bf14      	ite	ne
    4312:	2104      	movne	r1, #4
    4314:	2103      	moveq	r1, #3
    4316:	4b0d      	ldr	r3, [pc, #52]	; (434c <usbdc_cb_ctl_done+0x64>)
    4318:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    431a:	2001      	movs	r0, #1
    431c:	4b0c      	ldr	r3, [pc, #48]	; (4350 <usbdc_cb_ctl_done+0x68>)
    431e:	4798      	blx	r3
    4320:	e7e7      	b.n	42f2 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    4322:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    4324:	b2c0      	uxtb	r0, r0
    4326:	4b0b      	ldr	r3, [pc, #44]	; (4354 <usbdc_cb_ctl_done+0x6c>)
    4328:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    432a:	8863      	ldrh	r3, [r4, #2]
    432c:	2b00      	cmp	r3, #0
    432e:	bf14      	ite	ne
    4330:	2103      	movne	r1, #3
    4332:	2102      	moveq	r1, #2
    4334:	4b05      	ldr	r3, [pc, #20]	; (434c <usbdc_cb_ctl_done+0x64>)
    4336:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4338:	2001      	movs	r0, #1
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <usbdc_cb_ctl_done+0x68>)
    433c:	4798      	blx	r3
    433e:	e7d8      	b.n	42f2 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    4340:	2201      	movs	r2, #1
    4342:	4621      	mov	r1, r4
    4344:	2000      	movs	r0, #0
    4346:	4b04      	ldr	r3, [pc, #16]	; (4358 <usbdc_cb_ctl_done+0x70>)
    4348:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    434a:	e7d2      	b.n	42f2 <usbdc_cb_ctl_done+0xa>
    434c:	200008b0 	.word	0x200008b0
    4350:	00004261 	.word	0x00004261
    4354:	00001569 	.word	0x00001569
    4358:	00004289 	.word	0x00004289

0000435c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    435c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    435e:	4b0d      	ldr	r3, [pc, #52]	; (4394 <usbdc_reset+0x38>)
    4360:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    4362:	4d0d      	ldr	r5, [pc, #52]	; (4398 <usbdc_reset+0x3c>)
    4364:	2602      	movs	r6, #2
    4366:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    4368:	2400      	movs	r4, #0
    436a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    436c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    436e:	4620      	mov	r0, r4
    4370:	4b0a      	ldr	r3, [pc, #40]	; (439c <usbdc_reset+0x40>)
    4372:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    4374:	7f28      	ldrb	r0, [r5, #28]
    4376:	4b0a      	ldr	r3, [pc, #40]	; (43a0 <usbdc_reset+0x44>)
    4378:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    437a:	4a0a      	ldr	r2, [pc, #40]	; (43a4 <usbdc_reset+0x48>)
    437c:	4621      	mov	r1, r4
    437e:	4620      	mov	r0, r4
    4380:	4d09      	ldr	r5, [pc, #36]	; (43a8 <usbdc_reset+0x4c>)
    4382:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    4384:	4a09      	ldr	r2, [pc, #36]	; (43ac <usbdc_reset+0x50>)
    4386:	4631      	mov	r1, r6
    4388:	4620      	mov	r0, r4
    438a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    438c:	4620      	mov	r0, r4
    438e:	4b08      	ldr	r3, [pc, #32]	; (43b0 <usbdc_reset+0x54>)
    4390:	4798      	blx	r3
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	0000423d 	.word	0x0000423d
    4398:	200008b0 	.word	0x200008b0
    439c:	000015dd 	.word	0x000015dd
    43a0:	000015c9 	.word	0x000015c9
    43a4:	000043f5 	.word	0x000043f5
    43a8:	0000180d 	.word	0x0000180d
    43ac:	000042e9 	.word	0x000042e9
    43b0:	00001609 	.word	0x00001609

000043b4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    43b4:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    43b6:	b110      	cbz	r0, 43be <usbd_event_cb+0xa>
    43b8:	2801      	cmp	r0, #1
    43ba:	d004      	beq.n	43c6 <usbd_event_cb+0x12>
    43bc:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    43be:	2000      	movs	r0, #0
    43c0:	4b02      	ldr	r3, [pc, #8]	; (43cc <usbd_event_cb+0x18>)
    43c2:	4798      	blx	r3
		break;
    43c4:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    43c6:	4b02      	ldr	r3, [pc, #8]	; (43d0 <usbd_event_cb+0x1c>)
    43c8:	4798      	blx	r3
    43ca:	bd08      	pop	{r3, pc}
    43cc:	00004261 	.word	0x00004261
    43d0:	0000435d 	.word	0x0000435d

000043d4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    43d4:	b500      	push	{lr}
    43d6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    43d8:	9101      	str	r1, [sp, #4]
    43da:	9202      	str	r2, [sp, #8]
    43dc:	f88d 000c 	strb.w	r0, [sp, #12]
    43e0:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    43e4:	a801      	add	r0, sp, #4
    43e6:	4b02      	ldr	r3, [pc, #8]	; (43f0 <usbdc_xfer+0x1c>)
    43e8:	4798      	blx	r3
}
    43ea:	b005      	add	sp, #20
    43ec:	f85d fb04 	ldr.w	pc, [sp], #4
    43f0:	00001655 	.word	0x00001655

000043f4 <usbdc_cb_ctl_req>:
{
    43f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    43f8:	b083      	sub	sp, #12
    43fa:	4605      	mov	r5, r0
    43fc:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    43fe:	2200      	movs	r2, #0
    4400:	4b9b      	ldr	r3, [pc, #620]	; (4670 <usbdc_cb_ctl_req+0x27c>)
    4402:	4798      	blx	r3
    4404:	f1b0 3fff 	cmp.w	r0, #4294967295
    4408:	d00b      	beq.n	4422 <usbdc_cb_ctl_req+0x2e>
    440a:	2801      	cmp	r0, #1
    440c:	f000 81e3 	beq.w	47d6 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    4410:	7823      	ldrb	r3, [r4, #0]
    4412:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    4416:	d008      	beq.n	442a <usbdc_cb_ctl_req+0x36>
    4418:	2a80      	cmp	r2, #128	; 0x80
    441a:	f000 80f4 	beq.w	4606 <usbdc_cb_ctl_req+0x212>
		return false;
    441e:	2000      	movs	r0, #0
    4420:	e000      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    4422:	2000      	movs	r0, #0
}
    4424:	b003      	add	sp, #12
    4426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    442a:	7862      	ldrb	r2, [r4, #1]
    442c:	3a01      	subs	r2, #1
    442e:	2a0a      	cmp	r2, #10
    4430:	f200 81d3 	bhi.w	47da <usbdc_cb_ctl_req+0x3e6>
    4434:	e8df f012 	tbh	[pc, r2, lsl #1]
    4438:	01d10060 	.word	0x01d10060
    443c:	01d10076 	.word	0x01d10076
    4440:	01d1000b 	.word	0x01d1000b
    4444:	01d101d1 	.word	0x01d101d1
    4448:	01d10015 	.word	0x01d10015
    444c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    444e:	2301      	movs	r3, #1
    4450:	2200      	movs	r2, #0
    4452:	4611      	mov	r1, r2
    4454:	4628      	mov	r0, r5
    4456:	4c87      	ldr	r4, [pc, #540]	; (4674 <usbdc_cb_ctl_req+0x280>)
    4458:	47a0      	blx	r4
    445a:	fab0 f080 	clz	r0, r0
    445e:	0940      	lsrs	r0, r0, #5
    4460:	e7e0      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    4462:	8862      	ldrh	r2, [r4, #2]
    4464:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    4466:	b1ca      	cbz	r2, 449c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    4468:	4b83      	ldr	r3, [pc, #524]	; (4678 <usbdc_cb_ctl_req+0x284>)
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	6859      	ldr	r1, [r3, #4]
    446e:	6818      	ldr	r0, [r3, #0]
    4470:	4b82      	ldr	r3, [pc, #520]	; (467c <usbdc_cb_ctl_req+0x288>)
    4472:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4474:	2800      	cmp	r0, #0
    4476:	f000 81be 	beq.w	47f6 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    447a:	78c2      	ldrb	r2, [r0, #3]
    447c:	7881      	ldrb	r1, [r0, #2]
    447e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    4482:	fa10 f181 	uxtah	r1, r0, r1
    4486:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    4488:	2204      	movs	r2, #4
    448a:	4b7d      	ldr	r3, [pc, #500]	; (4680 <usbdc_cb_ctl_req+0x28c>)
    448c:	4798      	blx	r3
    448e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    4490:	b130      	cbz	r0, 44a0 <usbdc_cb_ctl_req+0xac>
    4492:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    4494:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 4678 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4498:	4f79      	ldr	r7, [pc, #484]	; (4680 <usbdc_cb_ctl_req+0x28c>)
    449a:	e018      	b.n	44ce <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    449c:	4b79      	ldr	r3, [pc, #484]	; (4684 <usbdc_cb_ctl_req+0x290>)
    449e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    44a0:	2301      	movs	r3, #1
    44a2:	2200      	movs	r2, #0
    44a4:	4611      	mov	r1, r2
    44a6:	4628      	mov	r0, r5
    44a8:	4c72      	ldr	r4, [pc, #456]	; (4674 <usbdc_cb_ctl_req+0x280>)
    44aa:	47a0      	blx	r4
    44ac:	fab0 f080 	clz	r0, r0
    44b0:	0940      	lsrs	r0, r0, #5
    44b2:	e7b7      	b.n	4424 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    44b4:	464c      	mov	r4, r9
    44b6:	e000      	b.n	44ba <usbdc_cb_ctl_req+0xc6>
    44b8:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    44ba:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    44bc:	7803      	ldrb	r3, [r0, #0]
    44be:	4418      	add	r0, r3
    44c0:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    44c2:	2204      	movs	r2, #4
    44c4:	9901      	ldr	r1, [sp, #4]
    44c6:	47b8      	blx	r7
    44c8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    44ca:	2800      	cmp	r0, #0
    44cc:	d0e8      	beq.n	44a0 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    44ce:	f890 9002 	ldrb.w	r9, [r0, #2]
    44d2:	45a1      	cmp	r9, r4
    44d4:	d0f1      	beq.n	44ba <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    44d6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    44da:	2c00      	cmp	r4, #0
    44dc:	d0ea      	beq.n	44b4 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    44de:	2600      	movs	r6, #0
    44e0:	6863      	ldr	r3, [r4, #4]
    44e2:	466a      	mov	r2, sp
    44e4:	4631      	mov	r1, r6
    44e6:	4620      	mov	r0, r4
    44e8:	4798      	blx	r3
    44ea:	2800      	cmp	r0, #0
    44ec:	d0e4      	beq.n	44b8 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    44ee:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    44f0:	2c00      	cmp	r4, #0
    44f2:	d1f5      	bne.n	44e0 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    44f4:	464c      	mov	r4, r9
    44f6:	e7e0      	b.n	44ba <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    44f8:	f003 031f 	and.w	r3, r3, #31
    44fc:	2b02      	cmp	r3, #2
    44fe:	f040 816e 	bne.w	47de <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    4502:	88e3      	ldrh	r3, [r4, #6]
    4504:	b10b      	cbz	r3, 450a <usbdc_cb_ctl_req+0x116>
			return false;
    4506:	2000      	movs	r0, #0
    4508:	e78c      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    450a:	88a0      	ldrh	r0, [r4, #4]
    450c:	2100      	movs	r1, #0
    450e:	b2c0      	uxtb	r0, r0
    4510:	4b5d      	ldr	r3, [pc, #372]	; (4688 <usbdc_cb_ctl_req+0x294>)
    4512:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4514:	2301      	movs	r3, #1
    4516:	2200      	movs	r2, #0
    4518:	4611      	mov	r1, r2
    451a:	4628      	mov	r0, r5
    451c:	4c55      	ldr	r4, [pc, #340]	; (4674 <usbdc_cb_ctl_req+0x280>)
    451e:	47a0      	blx	r4
		return true;
    4520:	2001      	movs	r0, #1
    4522:	e77f      	b.n	4424 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4524:	f003 031f 	and.w	r3, r3, #31
    4528:	2b02      	cmp	r3, #2
    452a:	f040 815a 	bne.w	47e2 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    452e:	88e3      	ldrh	r3, [r4, #6]
    4530:	b10b      	cbz	r3, 4536 <usbdc_cb_ctl_req+0x142>
			return false;
    4532:	2000      	movs	r0, #0
    4534:	e776      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    4536:	88a0      	ldrh	r0, [r4, #4]
    4538:	2101      	movs	r1, #1
    453a:	b2c0      	uxtb	r0, r0
    453c:	4b52      	ldr	r3, [pc, #328]	; (4688 <usbdc_cb_ctl_req+0x294>)
    453e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4540:	2301      	movs	r3, #1
    4542:	2200      	movs	r2, #0
    4544:	4611      	mov	r1, r2
    4546:	4628      	mov	r0, r5
    4548:	4c4a      	ldr	r4, [pc, #296]	; (4674 <usbdc_cb_ctl_req+0x280>)
    454a:	47a0      	blx	r4
		return true;
    454c:	2001      	movs	r0, #1
    454e:	e769      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4550:	8866      	ldrh	r6, [r4, #2]
    4552:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    4554:	4a48      	ldr	r2, [pc, #288]	; (4678 <usbdc_cb_ctl_req+0x284>)
    4556:	6813      	ldr	r3, [r2, #0]
    4558:	7ed2      	ldrb	r2, [r2, #27]
    455a:	6859      	ldr	r1, [r3, #4]
    455c:	6818      	ldr	r0, [r3, #0]
    455e:	4b47      	ldr	r3, [pc, #284]	; (467c <usbdc_cb_ctl_req+0x288>)
    4560:	4798      	blx	r3
	if (NULL == ifc) {
    4562:	2800      	cmp	r0, #0
    4564:	d045      	beq.n	45f2 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    4566:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    4568:	78c2      	ldrb	r2, [r0, #3]
    456a:	7881      	ldrb	r1, [r0, #2]
    456c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4570:	fa10 f181 	uxtah	r1, r0, r1
    4574:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    4576:	2204      	movs	r2, #4
    4578:	4b41      	ldr	r3, [pc, #260]	; (4680 <usbdc_cb_ctl_req+0x28c>)
    457a:	4798      	blx	r3
    457c:	4603      	mov	r3, r0
    457e:	2800      	cmp	r0, #0
    4580:	d039      	beq.n	45f6 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4582:	2704      	movs	r7, #4
    4584:	4d3e      	ldr	r5, [pc, #248]	; (4680 <usbdc_cb_ctl_req+0x28c>)
    4586:	e008      	b.n	459a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    4588:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    458a:	7803      	ldrb	r3, [r0, #0]
    458c:	4418      	add	r0, r3
    458e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4590:	463a      	mov	r2, r7
    4592:	9901      	ldr	r1, [sp, #4]
    4594:	47a8      	blx	r5
		if (NULL == ifc) {
    4596:	4603      	mov	r3, r0
    4598:	b378      	cbz	r0, 45fa <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    459a:	789a      	ldrb	r2, [r3, #2]
    459c:	42a2      	cmp	r2, r4
    459e:	d1f3      	bne.n	4588 <usbdc_cb_ctl_req+0x194>
    45a0:	78da      	ldrb	r2, [r3, #3]
    45a2:	42b2      	cmp	r2, r6
    45a4:	d1f0      	bne.n	4588 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    45a6:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    45a8:	4b33      	ldr	r3, [pc, #204]	; (4678 <usbdc_cb_ctl_req+0x284>)
    45aa:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    45ac:	b33d      	cbz	r5, 45fe <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    45ae:	2701      	movs	r7, #1
    45b0:	686b      	ldr	r3, [r5, #4]
    45b2:	466a      	mov	r2, sp
    45b4:	4639      	mov	r1, r7
    45b6:	4628      	mov	r0, r5
    45b8:	4798      	blx	r3
    45ba:	b120      	cbz	r0, 45c6 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    45bc:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    45be:	2d00      	cmp	r5, #0
    45c0:	d1f6      	bne.n	45b0 <usbdc_cb_ctl_req+0x1bc>
	return false;
    45c2:	2000      	movs	r0, #0
    45c4:	e72e      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    45c6:	686b      	ldr	r3, [r5, #4]
    45c8:	466a      	mov	r2, sp
    45ca:	2100      	movs	r1, #0
    45cc:	4628      	mov	r0, r5
    45ce:	4798      	blx	r3
    45d0:	b9b8      	cbnz	r0, 4602 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    45d2:	b136      	cbz	r6, 45e2 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    45d4:	4a28      	ldr	r2, [pc, #160]	; (4678 <usbdc_cb_ctl_req+0x284>)
    45d6:	2301      	movs	r3, #1
    45d8:	fa03 f404 	lsl.w	r4, r3, r4
    45dc:	7f53      	ldrb	r3, [r2, #29]
    45de:	4323      	orrs	r3, r4
    45e0:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    45e2:	2300      	movs	r3, #0
    45e4:	461a      	mov	r2, r3
    45e6:	4619      	mov	r1, r3
    45e8:	4618      	mov	r0, r3
    45ea:	4c22      	ldr	r4, [pc, #136]	; (4674 <usbdc_cb_ctl_req+0x280>)
    45ec:	47a0      	blx	r4
			return true;
    45ee:	2001      	movs	r0, #1
    45f0:	e718      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    45f2:	2000      	movs	r0, #0
    45f4:	e716      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    45f6:	2000      	movs	r0, #0
    45f8:	e714      	b.n	4424 <usbdc_cb_ctl_req+0x30>
			return false;
    45fa:	2000      	movs	r0, #0
    45fc:	e712      	b.n	4424 <usbdc_cb_ctl_req+0x30>
	return false;
    45fe:	2000      	movs	r0, #0
    4600:	e710      	b.n	4424 <usbdc_cb_ctl_req+0x30>
			return false;
    4602:	2000      	movs	r0, #0
    4604:	e70e      	b.n	4424 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    4606:	7862      	ldrb	r2, [r4, #1]
    4608:	2a0a      	cmp	r2, #10
    460a:	f200 80ec 	bhi.w	47e6 <usbdc_cb_ctl_req+0x3f2>
    460e:	e8df f012 	tbh	[pc, r2, lsl #1]
    4612:	008e      	.short	0x008e
    4614:	00ea00ea 	.word	0x00ea00ea
    4618:	00ea00ea 	.word	0x00ea00ea
    461c:	000b00ea 	.word	0x000b00ea
    4620:	008200ea 	.word	0x008200ea
    4624:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    4628:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    462a:	0a13      	lsrs	r3, r2, #8
    462c:	2b02      	cmp	r3, #2
    462e:	d02d      	beq.n	468c <usbdc_cb_ctl_req+0x298>
    4630:	2b03      	cmp	r3, #3
    4632:	d050      	beq.n	46d6 <usbdc_cb_ctl_req+0x2e2>
    4634:	2b01      	cmp	r3, #1
    4636:	d001      	beq.n	463c <usbdc_cb_ctl_req+0x248>
	return false;
    4638:	2000      	movs	r0, #0
    463a:	e6f3      	b.n	4424 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    463c:	88e2      	ldrh	r2, [r4, #6]
    463e:	2a12      	cmp	r2, #18
    4640:	bf28      	it	cs
    4642:	2212      	movcs	r2, #18
    4644:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    4646:	4b0c      	ldr	r3, [pc, #48]	; (4678 <usbdc_cb_ctl_req+0x284>)
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	2201      	movs	r2, #1
    464c:	6859      	ldr	r1, [r3, #4]
    464e:	6818      	ldr	r0, [r3, #0]
    4650:	4b0b      	ldr	r3, [pc, #44]	; (4680 <usbdc_cb_ctl_req+0x28c>)
    4652:	4798      	blx	r3
	if (!dev_desc) {
    4654:	4601      	mov	r1, r0
    4656:	2800      	cmp	r0, #0
    4658:	f000 80c7 	beq.w	47ea <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    465c:	2300      	movs	r3, #0
    465e:	4622      	mov	r2, r4
    4660:	4628      	mov	r0, r5
    4662:	4c04      	ldr	r4, [pc, #16]	; (4674 <usbdc_cb_ctl_req+0x280>)
    4664:	47a0      	blx	r4
    4666:	fab0 f080 	clz	r0, r0
    466a:	0940      	lsrs	r0, r0, #5
    466c:	e6da      	b.n	4424 <usbdc_cb_ctl_req+0x30>
    466e:	bf00      	nop
    4670:	00004289 	.word	0x00004289
    4674:	000043d5 	.word	0x000043d5
    4678:	200008b0 	.word	0x200008b0
    467c:	00004999 	.word	0x00004999
    4680:	00004919 	.word	0x00004919
    4684:	0000423d 	.word	0x0000423d
    4688:	000017a5 	.word	0x000017a5
	uint16_t length   = req->wLength;
    468c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    468e:	4b5b      	ldr	r3, [pc, #364]	; (47fc <usbdc_cb_ctl_req+0x408>)
    4690:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4692:	681b      	ldr	r3, [r3, #0]
    4694:	3201      	adds	r2, #1
    4696:	b2d2      	uxtb	r2, r2
    4698:	6859      	ldr	r1, [r3, #4]
    469a:	6818      	ldr	r0, [r3, #0]
    469c:	4b58      	ldr	r3, [pc, #352]	; (4800 <usbdc_cb_ctl_req+0x40c>)
    469e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    46a0:	4601      	mov	r1, r0
    46a2:	2800      	cmp	r0, #0
    46a4:	f000 80a3 	beq.w	47ee <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    46a8:	78c3      	ldrb	r3, [r0, #3]
    46aa:	7882      	ldrb	r2, [r0, #2]
    46ac:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    46b0:	b292      	uxth	r2, r2
	if (length <= total_len) {
    46b2:	4294      	cmp	r4, r2
    46b4:	d90d      	bls.n	46d2 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    46b6:	3e01      	subs	r6, #1
    46b8:	4226      	tst	r6, r4
    46ba:	bf0c      	ite	eq
    46bc:	2301      	moveq	r3, #1
    46be:	2300      	movne	r3, #0
		length = total_len;
    46c0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    46c2:	4622      	mov	r2, r4
    46c4:	4628      	mov	r0, r5
    46c6:	4c4f      	ldr	r4, [pc, #316]	; (4804 <usbdc_cb_ctl_req+0x410>)
    46c8:	47a0      	blx	r4
    46ca:	fab0 f080 	clz	r0, r0
    46ce:	0940      	lsrs	r0, r0, #5
    46d0:	e6a8      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    46d2:	2300      	movs	r3, #0
    46d4:	e7f5      	b.n	46c2 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    46d6:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    46d8:	4b48      	ldr	r3, [pc, #288]	; (47fc <usbdc_cb_ctl_req+0x408>)
    46da:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    46dc:	681b      	ldr	r3, [r3, #0]
    46de:	b2d2      	uxtb	r2, r2
    46e0:	6859      	ldr	r1, [r3, #4]
    46e2:	6818      	ldr	r0, [r3, #0]
    46e4:	4b48      	ldr	r3, [pc, #288]	; (4808 <usbdc_cb_ctl_req+0x414>)
    46e6:	4798      	blx	r3
	if (NULL == str_desc) {
    46e8:	4601      	mov	r1, r0
    46ea:	2800      	cmp	r0, #0
    46ec:	f000 8081 	beq.w	47f2 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    46f0:	7802      	ldrb	r2, [r0, #0]
    46f2:	4294      	cmp	r4, r2
    46f4:	d90d      	bls.n	4712 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    46f6:	3e01      	subs	r6, #1
    46f8:	4226      	tst	r6, r4
    46fa:	bf0c      	ite	eq
    46fc:	2301      	moveq	r3, #1
    46fe:	2300      	movne	r3, #0
		length = str_desc[0];
    4700:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4702:	4622      	mov	r2, r4
    4704:	4628      	mov	r0, r5
    4706:	4c3f      	ldr	r4, [pc, #252]	; (4804 <usbdc_cb_ctl_req+0x410>)
    4708:	47a0      	blx	r4
    470a:	fab0 f080 	clz	r0, r0
    470e:	0940      	lsrs	r0, r0, #5
    4710:	e688      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    4712:	2300      	movs	r3, #0
    4714:	e7f5      	b.n	4702 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    4716:	4939      	ldr	r1, [pc, #228]	; (47fc <usbdc_cb_ctl_req+0x408>)
    4718:	694b      	ldr	r3, [r1, #20]
    471a:	7eca      	ldrb	r2, [r1, #27]
    471c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    471e:	2300      	movs	r3, #0
    4720:	2201      	movs	r2, #1
    4722:	6949      	ldr	r1, [r1, #20]
    4724:	4628      	mov	r0, r5
    4726:	4c37      	ldr	r4, [pc, #220]	; (4804 <usbdc_cb_ctl_req+0x410>)
    4728:	47a0      	blx	r4
		return true;
    472a:	2001      	movs	r0, #1
    472c:	e67a      	b.n	4424 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    472e:	f003 031f 	and.w	r3, r3, #31
    4732:	2b01      	cmp	r3, #1
    4734:	d903      	bls.n	473e <usbdc_cb_ctl_req+0x34a>
    4736:	2b02      	cmp	r3, #2
    4738:	d010      	beq.n	475c <usbdc_cb_ctl_req+0x368>
		return false;
    473a:	2000      	movs	r0, #0
    473c:	e672      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		st = 0;
    473e:	2300      	movs	r3, #0
    4740:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4742:	492e      	ldr	r1, [pc, #184]	; (47fc <usbdc_cb_ctl_req+0x408>)
    4744:	694b      	ldr	r3, [r1, #20]
    4746:	f8bd 2000 	ldrh.w	r2, [sp]
    474a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    474c:	2300      	movs	r3, #0
    474e:	2202      	movs	r2, #2
    4750:	6949      	ldr	r1, [r1, #20]
    4752:	4628      	mov	r0, r5
    4754:	4c2b      	ldr	r4, [pc, #172]	; (4804 <usbdc_cb_ctl_req+0x410>)
    4756:	47a0      	blx	r4
	return true;
    4758:	2001      	movs	r0, #1
    475a:	e663      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    475c:	88a0      	ldrh	r0, [r4, #4]
    475e:	2102      	movs	r1, #2
    4760:	b2c0      	uxtb	r0, r0
    4762:	4b2a      	ldr	r3, [pc, #168]	; (480c <usbdc_cb_ctl_req+0x418>)
    4764:	4798      	blx	r3
		if (st < 0) {
    4766:	2800      	cmp	r0, #0
    4768:	db03      	blt.n	4772 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    476a:	f000 0001 	and.w	r0, r0, #1
    476e:	9000      	str	r0, [sp, #0]
    4770:	e7e7      	b.n	4742 <usbdc_cb_ctl_req+0x34e>
			return false;
    4772:	2000      	movs	r0, #0
    4774:	e656      	b.n	4424 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    4776:	4b21      	ldr	r3, [pc, #132]	; (47fc <usbdc_cb_ctl_req+0x408>)
    4778:	7f5b      	ldrb	r3, [r3, #29]
    477a:	88a2      	ldrh	r2, [r4, #4]
    477c:	4113      	asrs	r3, r2
    477e:	f013 0f01 	tst.w	r3, #1
    4782:	d012      	beq.n	47aa <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4784:	4b1d      	ldr	r3, [pc, #116]	; (47fc <usbdc_cb_ctl_req+0x408>)
    4786:	691d      	ldr	r5, [r3, #16]
	return false;
    4788:	2000      	movs	r0, #0
	while (NULL != func) {
    478a:	2d00      	cmp	r5, #0
    478c:	f43f ae4a 	beq.w	4424 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4790:	2602      	movs	r6, #2
    4792:	686b      	ldr	r3, [r5, #4]
    4794:	4622      	mov	r2, r4
    4796:	4631      	mov	r1, r6
    4798:	4628      	mov	r0, r5
    479a:	4798      	blx	r3
    479c:	2800      	cmp	r0, #0
    479e:	da0f      	bge.n	47c0 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    47a0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    47a2:	2d00      	cmp	r5, #0
    47a4:	d1f5      	bne.n	4792 <usbdc_cb_ctl_req+0x39e>
	return false;
    47a6:	2000      	movs	r0, #0
    47a8:	e63c      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    47aa:	4914      	ldr	r1, [pc, #80]	; (47fc <usbdc_cb_ctl_req+0x408>)
    47ac:	694b      	ldr	r3, [r1, #20]
    47ae:	2000      	movs	r0, #0
    47b0:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    47b2:	4603      	mov	r3, r0
    47b4:	2201      	movs	r2, #1
    47b6:	6949      	ldr	r1, [r1, #20]
    47b8:	4c12      	ldr	r4, [pc, #72]	; (4804 <usbdc_cb_ctl_req+0x410>)
    47ba:	47a0      	blx	r4
		return true;
    47bc:	2001      	movs	r0, #1
    47be:	e631      	b.n	4424 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    47c0:	490e      	ldr	r1, [pc, #56]	; (47fc <usbdc_cb_ctl_req+0x408>)
    47c2:	694b      	ldr	r3, [r1, #20]
    47c4:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    47c6:	2300      	movs	r3, #0
    47c8:	2201      	movs	r2, #1
    47ca:	6949      	ldr	r1, [r1, #20]
    47cc:	4618      	mov	r0, r3
    47ce:	4c0d      	ldr	r4, [pc, #52]	; (4804 <usbdc_cb_ctl_req+0x410>)
    47d0:	47a0      	blx	r4
			return true;
    47d2:	2001      	movs	r0, #1
    47d4:	e626      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return true;
    47d6:	2001      	movs	r0, #1
    47d8:	e624      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    47da:	2000      	movs	r0, #0
    47dc:	e622      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    47de:	2000      	movs	r0, #0
    47e0:	e620      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    47e2:	2000      	movs	r0, #0
    47e4:	e61e      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    47e6:	2000      	movs	r0, #0
    47e8:	e61c      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    47ea:	2000      	movs	r0, #0
    47ec:	e61a      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    47ee:	2000      	movs	r0, #0
    47f0:	e618      	b.n	4424 <usbdc_cb_ctl_req+0x30>
		return false;
    47f2:	2000      	movs	r0, #0
    47f4:	e616      	b.n	4424 <usbdc_cb_ctl_req+0x30>
			return false;
    47f6:	2000      	movs	r0, #0
    47f8:	e614      	b.n	4424 <usbdc_cb_ctl_req+0x30>
    47fa:	bf00      	nop
    47fc:	200008b0 	.word	0x200008b0
    4800:	00004999 	.word	0x00004999
    4804:	000043d5 	.word	0x000043d5
    4808:	00004a01 	.word	0x00004a01
    480c:	000017a5 	.word	0x000017a5

00004810 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4810:	b508      	push	{r3, lr}
	switch (type) {
    4812:	2801      	cmp	r0, #1
    4814:	d007      	beq.n	4826 <usbdc_register_handler+0x16>
    4816:	b110      	cbz	r0, 481e <usbdc_register_handler+0xe>
    4818:	2802      	cmp	r0, #2
    481a:	d008      	beq.n	482e <usbdc_register_handler+0x1e>
    481c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    481e:	4806      	ldr	r0, [pc, #24]	; (4838 <usbdc_register_handler+0x28>)
    4820:	4b06      	ldr	r3, [pc, #24]	; (483c <usbdc_register_handler+0x2c>)
    4822:	4798      	blx	r3
		break;
    4824:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    4826:	4806      	ldr	r0, [pc, #24]	; (4840 <usbdc_register_handler+0x30>)
    4828:	4b04      	ldr	r3, [pc, #16]	; (483c <usbdc_register_handler+0x2c>)
    482a:	4798      	blx	r3
		break;
    482c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    482e:	4805      	ldr	r0, [pc, #20]	; (4844 <usbdc_register_handler+0x34>)
    4830:	4b02      	ldr	r3, [pc, #8]	; (483c <usbdc_register_handler+0x2c>)
    4832:	4798      	blx	r3
    4834:	bd08      	pop	{r3, pc}
    4836:	bf00      	nop
    4838:	200008b4 	.word	0x200008b4
    483c:	000018b5 	.word	0x000018b5
    4840:	200008b8 	.word	0x200008b8
    4844:	200008bc 	.word	0x200008bc

00004848 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4848:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    484a:	4605      	mov	r5, r0
    484c:	f240 3255 	movw	r2, #853	; 0x355
    4850:	490c      	ldr	r1, [pc, #48]	; (4884 <usbdc_init+0x3c>)
    4852:	3000      	adds	r0, #0
    4854:	bf18      	it	ne
    4856:	2001      	movne	r0, #1
    4858:	4b0b      	ldr	r3, [pc, #44]	; (4888 <usbdc_init+0x40>)
    485a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    485c:	4b0b      	ldr	r3, [pc, #44]	; (488c <usbdc_init+0x44>)
    485e:	4798      	blx	r3
	if (rc < 0) {
    4860:	2800      	cmp	r0, #0
    4862:	db0e      	blt.n	4882 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4864:	4c0a      	ldr	r4, [pc, #40]	; (4890 <usbdc_init+0x48>)
    4866:	2220      	movs	r2, #32
    4868:	2100      	movs	r1, #0
    486a:	4620      	mov	r0, r4
    486c:	4b09      	ldr	r3, [pc, #36]	; (4894 <usbdc_init+0x4c>)
    486e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4870:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4872:	4909      	ldr	r1, [pc, #36]	; (4898 <usbdc_init+0x50>)
    4874:	2000      	movs	r0, #0
    4876:	4c09      	ldr	r4, [pc, #36]	; (489c <usbdc_init+0x54>)
    4878:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    487a:	4909      	ldr	r1, [pc, #36]	; (48a0 <usbdc_init+0x58>)
    487c:	2001      	movs	r0, #1
    487e:	47a0      	blx	r4

	return 0;
    4880:	2000      	movs	r0, #0
}
    4882:	bd38      	pop	{r3, r4, r5, pc}
    4884:	00005cec 	.word	0x00005cec
    4888:	00001859 	.word	0x00001859
    488c:	000014dd 	.word	0x000014dd
    4890:	200008b0 	.word	0x200008b0
    4894:	00005751 	.word	0x00005751
    4898:	000042c9 	.word	0x000042c9
    489c:	00001545 	.word	0x00001545
    48a0:	000043b5 	.word	0x000043b5

000048a4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    48a4:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    48a6:	4601      	mov	r1, r0
    48a8:	4801      	ldr	r0, [pc, #4]	; (48b0 <usbdc_register_function+0xc>)
    48aa:	4b02      	ldr	r3, [pc, #8]	; (48b4 <usbdc_register_function+0x10>)
    48ac:	4798      	blx	r3
    48ae:	bd08      	pop	{r3, pc}
    48b0:	200008c0 	.word	0x200008c0
    48b4:	000018b5 	.word	0x000018b5

000048b8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    48b8:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    48ba:	4b0a      	ldr	r3, [pc, #40]	; (48e4 <usbdc_start+0x2c>)
    48bc:	7e9b      	ldrb	r3, [r3, #26]
    48be:	b95b      	cbnz	r3, 48d8 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    48c0:	b168      	cbz	r0, 48de <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    48c2:	4b08      	ldr	r3, [pc, #32]	; (48e4 <usbdc_start+0x2c>)
    48c4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    48c6:	6802      	ldr	r2, [r0, #0]
    48c8:	79d2      	ldrb	r2, [r2, #7]
    48ca:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    48cc:	2201      	movs	r2, #1
    48ce:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    48d0:	4b05      	ldr	r3, [pc, #20]	; (48e8 <usbdc_start+0x30>)
    48d2:	4798      	blx	r3
	return ERR_NONE;
    48d4:	2000      	movs	r0, #0
    48d6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    48d8:	f06f 0003 	mvn.w	r0, #3
    48dc:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    48de:	f06f 0008 	mvn.w	r0, #8
}
    48e2:	bd08      	pop	{r3, pc}
    48e4:	200008b0 	.word	0x200008b0
    48e8:	00001551 	.word	0x00001551

000048ec <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    48ec:	b508      	push	{r3, lr}
	usb_d_attach();
    48ee:	4b01      	ldr	r3, [pc, #4]	; (48f4 <usbdc_attach+0x8>)
    48f0:	4798      	blx	r3
    48f2:	bd08      	pop	{r3, pc}
    48f4:	0000155d 	.word	0x0000155d

000048f8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    48f8:	4b01      	ldr	r3, [pc, #4]	; (4900 <usbdc_get_ctrl_buffer+0x8>)
    48fa:	6958      	ldr	r0, [r3, #20]
    48fc:	4770      	bx	lr
    48fe:	bf00      	nop
    4900:	200008b0 	.word	0x200008b0

00004904 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4904:	4b03      	ldr	r3, [pc, #12]	; (4914 <usbdc_get_state+0x10>)
    4906:	7e98      	ldrb	r0, [r3, #26]
    4908:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    490c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    490e:	bf18      	it	ne
    4910:	2010      	movne	r0, #16
    4912:	4770      	bx	lr
    4914:	200008b0 	.word	0x200008b0

00004918 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4918:	4288      	cmp	r0, r1
    491a:	d214      	bcs.n	4946 <usb_find_desc+0x2e>
	return desc[0];
    491c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    491e:	2b01      	cmp	r3, #1
    4920:	d913      	bls.n	494a <usb_find_desc+0x32>
{
    4922:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    4924:	7844      	ldrb	r4, [r0, #1]
    4926:	4294      	cmp	r4, r2
    4928:	d00a      	beq.n	4940 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    492a:	4418      	add	r0, r3
	while (desc < eof) {
    492c:	4281      	cmp	r1, r0
    492e:	d906      	bls.n	493e <usb_find_desc+0x26>
	return desc[0];
    4930:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4932:	2b01      	cmp	r3, #1
    4934:	d90b      	bls.n	494e <usb_find_desc+0x36>
	return desc[1];
    4936:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4938:	4294      	cmp	r4, r2
    493a:	d1f6      	bne.n	492a <usb_find_desc+0x12>
    493c:	e000      	b.n	4940 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    493e:	2000      	movs	r0, #0
}
    4940:	f85d 4b04 	ldr.w	r4, [sp], #4
    4944:	4770      	bx	lr
	return NULL;
    4946:	2000      	movs	r0, #0
    4948:	4770      	bx	lr
		_desc_len_check();
    494a:	2000      	movs	r0, #0
    494c:	4770      	bx	lr
    494e:	2000      	movs	r0, #0
    4950:	e7f6      	b.n	4940 <usb_find_desc+0x28>

00004952 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4952:	4288      	cmp	r0, r1
    4954:	d216      	bcs.n	4984 <usb_find_ep_desc+0x32>
	return desc[0];
    4956:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4958:	2b01      	cmp	r3, #1
    495a:	d915      	bls.n	4988 <usb_find_ep_desc+0x36>
	return desc[1];
    495c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    495e:	2a04      	cmp	r2, #4
    4960:	d014      	beq.n	498c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4962:	2a05      	cmp	r2, #5
    4964:	d00b      	beq.n	497e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    4966:	4418      	add	r0, r3
	while (desc < eof) {
    4968:	4281      	cmp	r1, r0
    496a:	d909      	bls.n	4980 <usb_find_ep_desc+0x2e>
	return desc[0];
    496c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    496e:	2b01      	cmp	r3, #1
    4970:	d90e      	bls.n	4990 <usb_find_ep_desc+0x3e>
	return desc[1];
    4972:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4974:	2a04      	cmp	r2, #4
    4976:	d00d      	beq.n	4994 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4978:	2a05      	cmp	r2, #5
    497a:	d1f4      	bne.n	4966 <usb_find_ep_desc+0x14>
    497c:	e00b      	b.n	4996 <usb_find_ep_desc+0x44>
    497e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4980:	2000      	movs	r0, #0
    4982:	4770      	bx	lr
    4984:	2000      	movs	r0, #0
    4986:	4770      	bx	lr
		_desc_len_check();
    4988:	2000      	movs	r0, #0
    498a:	4770      	bx	lr
	return NULL;
    498c:	2000      	movs	r0, #0
    498e:	4770      	bx	lr
		_desc_len_check();
    4990:	2000      	movs	r0, #0
    4992:	4770      	bx	lr
	return NULL;
    4994:	2000      	movs	r0, #0
}
    4996:	4770      	bx	lr

00004998 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4998:	b538      	push	{r3, r4, r5, lr}
    499a:	460c      	mov	r4, r1
    499c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    499e:	2202      	movs	r2, #2
    49a0:	4b16      	ldr	r3, [pc, #88]	; (49fc <usb_find_cfg_desc+0x64>)
    49a2:	4798      	blx	r3
	if (!desc) {
    49a4:	4603      	mov	r3, r0
    49a6:	b1e8      	cbz	r0, 49e4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    49a8:	4284      	cmp	r4, r0
    49aa:	d91d      	bls.n	49e8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    49ac:	7802      	ldrb	r2, [r0, #0]
    49ae:	2a01      	cmp	r2, #1
    49b0:	d91c      	bls.n	49ec <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    49b2:	7842      	ldrb	r2, [r0, #1]
    49b4:	2a02      	cmp	r2, #2
    49b6:	d11b      	bne.n	49f0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    49b8:	7942      	ldrb	r2, [r0, #5]
    49ba:	42aa      	cmp	r2, r5
    49bc:	d012      	beq.n	49e4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    49be:	78d9      	ldrb	r1, [r3, #3]
    49c0:	789a      	ldrb	r2, [r3, #2]
    49c2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    49c6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    49ca:	429c      	cmp	r4, r3
    49cc:	d909      	bls.n	49e2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    49ce:	781a      	ldrb	r2, [r3, #0]
    49d0:	2a01      	cmp	r2, #1
    49d2:	d90f      	bls.n	49f4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    49d4:	785a      	ldrb	r2, [r3, #1]
    49d6:	2a02      	cmp	r2, #2
    49d8:	d10e      	bne.n	49f8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    49da:	795a      	ldrb	r2, [r3, #5]
    49dc:	42aa      	cmp	r2, r5
    49de:	d1ee      	bne.n	49be <usb_find_cfg_desc+0x26>
    49e0:	e000      	b.n	49e4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    49e2:	2300      	movs	r3, #0
}
    49e4:	4618      	mov	r0, r3
    49e6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    49e8:	2300      	movs	r3, #0
    49ea:	e7fb      	b.n	49e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    49ec:	2300      	movs	r3, #0
    49ee:	e7f9      	b.n	49e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    49f0:	2300      	movs	r3, #0
    49f2:	e7f7      	b.n	49e4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    49f4:	2300      	movs	r3, #0
    49f6:	e7f5      	b.n	49e4 <usb_find_cfg_desc+0x4c>
	return NULL;
    49f8:	2300      	movs	r3, #0
    49fa:	e7f3      	b.n	49e4 <usb_find_cfg_desc+0x4c>
    49fc:	00004919 	.word	0x00004919

00004a00 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4a00:	4288      	cmp	r0, r1
    4a02:	d217      	bcs.n	4a34 <usb_find_str_desc+0x34>
{
    4a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a08:	460d      	mov	r5, r1
    4a0a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    4a0c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4a0e:	f04f 0803 	mov.w	r8, #3
    4a12:	4f0c      	ldr	r7, [pc, #48]	; (4a44 <usb_find_str_desc+0x44>)
    4a14:	4642      	mov	r2, r8
    4a16:	4629      	mov	r1, r5
    4a18:	47b8      	blx	r7
		if (desc) {
    4a1a:	4603      	mov	r3, r0
    4a1c:	b170      	cbz	r0, 4a3c <usb_find_str_desc+0x3c>
	return desc[0];
    4a1e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    4a20:	2801      	cmp	r0, #1
    4a22:	d90a      	bls.n	4a3a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    4a24:	42a6      	cmp	r6, r4
    4a26:	d009      	beq.n	4a3c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    4a28:	4418      	add	r0, r3
    4a2a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4a2c:	4285      	cmp	r5, r0
    4a2e:	d8f1      	bhi.n	4a14 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4a30:	2300      	movs	r3, #0
    4a32:	e003      	b.n	4a3c <usb_find_str_desc+0x3c>
    4a34:	2300      	movs	r3, #0
}
    4a36:	4618      	mov	r0, r3
    4a38:	4770      	bx	lr
			_desc_len_check();
    4a3a:	2300      	movs	r3, #0
}
    4a3c:	4618      	mov	r0, r3
    4a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a42:	bf00      	nop
    4a44:	00004919 	.word	0x00004919

00004a48 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    4a48:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    4a4a:	4805      	ldr	r0, [pc, #20]	; (4a60 <cdc_device_acm_init+0x18>)
    4a4c:	4b05      	ldr	r3, [pc, #20]	; (4a64 <cdc_device_acm_init+0x1c>)
    4a4e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4a50:	4b05      	ldr	r3, [pc, #20]	; (4a68 <cdc_device_acm_init+0x20>)
    4a52:	4798      	blx	r3

	usbdc_start(single_desc);
    4a54:	4805      	ldr	r0, [pc, #20]	; (4a6c <cdc_device_acm_init+0x24>)
    4a56:	4b06      	ldr	r3, [pc, #24]	; (4a70 <cdc_device_acm_init+0x28>)
    4a58:	4798      	blx	r3
	usbdc_attach();
    4a5a:	4b06      	ldr	r3, [pc, #24]	; (4a74 <cdc_device_acm_init+0x2c>)
    4a5c:	4798      	blx	r3
    4a5e:	bd08      	pop	{r3, pc}
    4a60:	20000910 	.word	0x20000910
    4a64:	00004849 	.word	0x00004849
    4a68:	00004139 	.word	0x00004139
    4a6c:	200000bc 	.word	0x200000bc
    4a70:	000048b9 	.word	0x000048b9
    4a74:	000048ed 	.word	0x000048ed

00004a78 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    4a78:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    4a7a:	4b01      	ldr	r3, [pc, #4]	; (4a80 <usb_init+0x8>)
    4a7c:	4798      	blx	r3
    4a7e:	bd08      	pop	{r3, pc}
    4a80:	00004a49 	.word	0x00004a49

00004a84 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4a84:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4a88:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4a8a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4a8c:	f3bf 8f5f 	dmb	sy
    4a90:	4770      	bx	lr

00004a92 <atomic_leave_critical>:
    4a92:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4a96:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4a98:	f383 8810 	msr	PRIMASK, r3
    4a9c:	4770      	bx	lr
	...

00004aa0 <__aeabi_drsub>:
    4aa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    4aa4:	e002      	b.n	4aac <__adddf3>
    4aa6:	bf00      	nop

00004aa8 <__aeabi_dsub>:
    4aa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004aac <__adddf3>:
    4aac:	b530      	push	{r4, r5, lr}
    4aae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    4ab2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    4ab6:	ea94 0f05 	teq	r4, r5
    4aba:	bf08      	it	eq
    4abc:	ea90 0f02 	teqeq	r0, r2
    4ac0:	bf1f      	itttt	ne
    4ac2:	ea54 0c00 	orrsne.w	ip, r4, r0
    4ac6:	ea55 0c02 	orrsne.w	ip, r5, r2
    4aca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4ace:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4ad2:	f000 80e2 	beq.w	4c9a <__adddf3+0x1ee>
    4ad6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4ada:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4ade:	bfb8      	it	lt
    4ae0:	426d      	neglt	r5, r5
    4ae2:	dd0c      	ble.n	4afe <__adddf3+0x52>
    4ae4:	442c      	add	r4, r5
    4ae6:	ea80 0202 	eor.w	r2, r0, r2
    4aea:	ea81 0303 	eor.w	r3, r1, r3
    4aee:	ea82 0000 	eor.w	r0, r2, r0
    4af2:	ea83 0101 	eor.w	r1, r3, r1
    4af6:	ea80 0202 	eor.w	r2, r0, r2
    4afa:	ea81 0303 	eor.w	r3, r1, r3
    4afe:	2d36      	cmp	r5, #54	; 0x36
    4b00:	bf88      	it	hi
    4b02:	bd30      	pophi	{r4, r5, pc}
    4b04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4b0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4b10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4b14:	d002      	beq.n	4b1c <__adddf3+0x70>
    4b16:	4240      	negs	r0, r0
    4b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4b1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4b24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4b28:	d002      	beq.n	4b30 <__adddf3+0x84>
    4b2a:	4252      	negs	r2, r2
    4b2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4b30:	ea94 0f05 	teq	r4, r5
    4b34:	f000 80a7 	beq.w	4c86 <__adddf3+0x1da>
    4b38:	f1a4 0401 	sub.w	r4, r4, #1
    4b3c:	f1d5 0e20 	rsbs	lr, r5, #32
    4b40:	db0d      	blt.n	4b5e <__adddf3+0xb2>
    4b42:	fa02 fc0e 	lsl.w	ip, r2, lr
    4b46:	fa22 f205 	lsr.w	r2, r2, r5
    4b4a:	1880      	adds	r0, r0, r2
    4b4c:	f141 0100 	adc.w	r1, r1, #0
    4b50:	fa03 f20e 	lsl.w	r2, r3, lr
    4b54:	1880      	adds	r0, r0, r2
    4b56:	fa43 f305 	asr.w	r3, r3, r5
    4b5a:	4159      	adcs	r1, r3
    4b5c:	e00e      	b.n	4b7c <__adddf3+0xd0>
    4b5e:	f1a5 0520 	sub.w	r5, r5, #32
    4b62:	f10e 0e20 	add.w	lr, lr, #32
    4b66:	2a01      	cmp	r2, #1
    4b68:	fa03 fc0e 	lsl.w	ip, r3, lr
    4b6c:	bf28      	it	cs
    4b6e:	f04c 0c02 	orrcs.w	ip, ip, #2
    4b72:	fa43 f305 	asr.w	r3, r3, r5
    4b76:	18c0      	adds	r0, r0, r3
    4b78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4b80:	d507      	bpl.n	4b92 <__adddf3+0xe6>
    4b82:	f04f 0e00 	mov.w	lr, #0
    4b86:	f1dc 0c00 	rsbs	ip, ip, #0
    4b8a:	eb7e 0000 	sbcs.w	r0, lr, r0
    4b8e:	eb6e 0101 	sbc.w	r1, lr, r1
    4b92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    4b96:	d31b      	bcc.n	4bd0 <__adddf3+0x124>
    4b98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4b9c:	d30c      	bcc.n	4bb8 <__adddf3+0x10c>
    4b9e:	0849      	lsrs	r1, r1, #1
    4ba0:	ea5f 0030 	movs.w	r0, r0, rrx
    4ba4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4ba8:	f104 0401 	add.w	r4, r4, #1
    4bac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4bb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4bb4:	f080 809a 	bcs.w	4cec <__adddf3+0x240>
    4bb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4bbc:	bf08      	it	eq
    4bbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4bc2:	f150 0000 	adcs.w	r0, r0, #0
    4bc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4bca:	ea41 0105 	orr.w	r1, r1, r5
    4bce:	bd30      	pop	{r4, r5, pc}
    4bd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4bd4:	4140      	adcs	r0, r0
    4bd6:	eb41 0101 	adc.w	r1, r1, r1
    4bda:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4bde:	f1a4 0401 	sub.w	r4, r4, #1
    4be2:	d1e9      	bne.n	4bb8 <__adddf3+0x10c>
    4be4:	f091 0f00 	teq	r1, #0
    4be8:	bf04      	itt	eq
    4bea:	4601      	moveq	r1, r0
    4bec:	2000      	moveq	r0, #0
    4bee:	fab1 f381 	clz	r3, r1
    4bf2:	bf08      	it	eq
    4bf4:	3320      	addeq	r3, #32
    4bf6:	f1a3 030b 	sub.w	r3, r3, #11
    4bfa:	f1b3 0220 	subs.w	r2, r3, #32
    4bfe:	da0c      	bge.n	4c1a <__adddf3+0x16e>
    4c00:	320c      	adds	r2, #12
    4c02:	dd08      	ble.n	4c16 <__adddf3+0x16a>
    4c04:	f102 0c14 	add.w	ip, r2, #20
    4c08:	f1c2 020c 	rsb	r2, r2, #12
    4c0c:	fa01 f00c 	lsl.w	r0, r1, ip
    4c10:	fa21 f102 	lsr.w	r1, r1, r2
    4c14:	e00c      	b.n	4c30 <__adddf3+0x184>
    4c16:	f102 0214 	add.w	r2, r2, #20
    4c1a:	bfd8      	it	le
    4c1c:	f1c2 0c20 	rsble	ip, r2, #32
    4c20:	fa01 f102 	lsl.w	r1, r1, r2
    4c24:	fa20 fc0c 	lsr.w	ip, r0, ip
    4c28:	bfdc      	itt	le
    4c2a:	ea41 010c 	orrle.w	r1, r1, ip
    4c2e:	4090      	lslle	r0, r2
    4c30:	1ae4      	subs	r4, r4, r3
    4c32:	bfa2      	ittt	ge
    4c34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    4c38:	4329      	orrge	r1, r5
    4c3a:	bd30      	popge	{r4, r5, pc}
    4c3c:	ea6f 0404 	mvn.w	r4, r4
    4c40:	3c1f      	subs	r4, #31
    4c42:	da1c      	bge.n	4c7e <__adddf3+0x1d2>
    4c44:	340c      	adds	r4, #12
    4c46:	dc0e      	bgt.n	4c66 <__adddf3+0x1ba>
    4c48:	f104 0414 	add.w	r4, r4, #20
    4c4c:	f1c4 0220 	rsb	r2, r4, #32
    4c50:	fa20 f004 	lsr.w	r0, r0, r4
    4c54:	fa01 f302 	lsl.w	r3, r1, r2
    4c58:	ea40 0003 	orr.w	r0, r0, r3
    4c5c:	fa21 f304 	lsr.w	r3, r1, r4
    4c60:	ea45 0103 	orr.w	r1, r5, r3
    4c64:	bd30      	pop	{r4, r5, pc}
    4c66:	f1c4 040c 	rsb	r4, r4, #12
    4c6a:	f1c4 0220 	rsb	r2, r4, #32
    4c6e:	fa20 f002 	lsr.w	r0, r0, r2
    4c72:	fa01 f304 	lsl.w	r3, r1, r4
    4c76:	ea40 0003 	orr.w	r0, r0, r3
    4c7a:	4629      	mov	r1, r5
    4c7c:	bd30      	pop	{r4, r5, pc}
    4c7e:	fa21 f004 	lsr.w	r0, r1, r4
    4c82:	4629      	mov	r1, r5
    4c84:	bd30      	pop	{r4, r5, pc}
    4c86:	f094 0f00 	teq	r4, #0
    4c8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4c8e:	bf06      	itte	eq
    4c90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    4c94:	3401      	addeq	r4, #1
    4c96:	3d01      	subne	r5, #1
    4c98:	e74e      	b.n	4b38 <__adddf3+0x8c>
    4c9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4c9e:	bf18      	it	ne
    4ca0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4ca4:	d029      	beq.n	4cfa <__adddf3+0x24e>
    4ca6:	ea94 0f05 	teq	r4, r5
    4caa:	bf08      	it	eq
    4cac:	ea90 0f02 	teqeq	r0, r2
    4cb0:	d005      	beq.n	4cbe <__adddf3+0x212>
    4cb2:	ea54 0c00 	orrs.w	ip, r4, r0
    4cb6:	bf04      	itt	eq
    4cb8:	4619      	moveq	r1, r3
    4cba:	4610      	moveq	r0, r2
    4cbc:	bd30      	pop	{r4, r5, pc}
    4cbe:	ea91 0f03 	teq	r1, r3
    4cc2:	bf1e      	ittt	ne
    4cc4:	2100      	movne	r1, #0
    4cc6:	2000      	movne	r0, #0
    4cc8:	bd30      	popne	{r4, r5, pc}
    4cca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4cce:	d105      	bne.n	4cdc <__adddf3+0x230>
    4cd0:	0040      	lsls	r0, r0, #1
    4cd2:	4149      	adcs	r1, r1
    4cd4:	bf28      	it	cs
    4cd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4cda:	bd30      	pop	{r4, r5, pc}
    4cdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4ce0:	bf3c      	itt	cc
    4ce2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4ce6:	bd30      	popcc	{r4, r5, pc}
    4ce8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4cec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4cf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4cf4:	f04f 0000 	mov.w	r0, #0
    4cf8:	bd30      	pop	{r4, r5, pc}
    4cfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4cfe:	bf1a      	itte	ne
    4d00:	4619      	movne	r1, r3
    4d02:	4610      	movne	r0, r2
    4d04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4d08:	bf1c      	itt	ne
    4d0a:	460b      	movne	r3, r1
    4d0c:	4602      	movne	r2, r0
    4d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4d12:	bf06      	itte	eq
    4d14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4d18:	ea91 0f03 	teqeq	r1, r3
    4d1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4d20:	bd30      	pop	{r4, r5, pc}
    4d22:	bf00      	nop

00004d24 <__aeabi_ui2d>:
    4d24:	f090 0f00 	teq	r0, #0
    4d28:	bf04      	itt	eq
    4d2a:	2100      	moveq	r1, #0
    4d2c:	4770      	bxeq	lr
    4d2e:	b530      	push	{r4, r5, lr}
    4d30:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4d34:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4d38:	f04f 0500 	mov.w	r5, #0
    4d3c:	f04f 0100 	mov.w	r1, #0
    4d40:	e750      	b.n	4be4 <__adddf3+0x138>
    4d42:	bf00      	nop

00004d44 <__aeabi_i2d>:
    4d44:	f090 0f00 	teq	r0, #0
    4d48:	bf04      	itt	eq
    4d4a:	2100      	moveq	r1, #0
    4d4c:	4770      	bxeq	lr
    4d4e:	b530      	push	{r4, r5, lr}
    4d50:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4d54:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4d58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4d5c:	bf48      	it	mi
    4d5e:	4240      	negmi	r0, r0
    4d60:	f04f 0100 	mov.w	r1, #0
    4d64:	e73e      	b.n	4be4 <__adddf3+0x138>
    4d66:	bf00      	nop

00004d68 <__aeabi_f2d>:
    4d68:	0042      	lsls	r2, r0, #1
    4d6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4d6e:	ea4f 0131 	mov.w	r1, r1, rrx
    4d72:	ea4f 7002 	mov.w	r0, r2, lsl #28
    4d76:	bf1f      	itttt	ne
    4d78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4d7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    4d84:	4770      	bxne	lr
    4d86:	f092 0f00 	teq	r2, #0
    4d8a:	bf14      	ite	ne
    4d8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d90:	4770      	bxeq	lr
    4d92:	b530      	push	{r4, r5, lr}
    4d94:	f44f 7460 	mov.w	r4, #896	; 0x380
    4d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4d9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4da0:	e720      	b.n	4be4 <__adddf3+0x138>
    4da2:	bf00      	nop

00004da4 <__aeabi_ul2d>:
    4da4:	ea50 0201 	orrs.w	r2, r0, r1
    4da8:	bf08      	it	eq
    4daa:	4770      	bxeq	lr
    4dac:	b530      	push	{r4, r5, lr}
    4dae:	f04f 0500 	mov.w	r5, #0
    4db2:	e00a      	b.n	4dca <__aeabi_l2d+0x16>

00004db4 <__aeabi_l2d>:
    4db4:	ea50 0201 	orrs.w	r2, r0, r1
    4db8:	bf08      	it	eq
    4dba:	4770      	bxeq	lr
    4dbc:	b530      	push	{r4, r5, lr}
    4dbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4dc2:	d502      	bpl.n	4dca <__aeabi_l2d+0x16>
    4dc4:	4240      	negs	r0, r0
    4dc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4dca:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4dce:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4dd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4dd6:	f43f aedc 	beq.w	4b92 <__adddf3+0xe6>
    4dda:	f04f 0203 	mov.w	r2, #3
    4dde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4de2:	bf18      	it	ne
    4de4:	3203      	addne	r2, #3
    4de6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4dea:	bf18      	it	ne
    4dec:	3203      	addne	r2, #3
    4dee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4df2:	f1c2 0320 	rsb	r3, r2, #32
    4df6:	fa00 fc03 	lsl.w	ip, r0, r3
    4dfa:	fa20 f002 	lsr.w	r0, r0, r2
    4dfe:	fa01 fe03 	lsl.w	lr, r1, r3
    4e02:	ea40 000e 	orr.w	r0, r0, lr
    4e06:	fa21 f102 	lsr.w	r1, r1, r2
    4e0a:	4414      	add	r4, r2
    4e0c:	e6c1      	b.n	4b92 <__adddf3+0xe6>
    4e0e:	bf00      	nop

00004e10 <__aeabi_dmul>:
    4e10:	b570      	push	{r4, r5, r6, lr}
    4e12:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4e16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4e1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4e1e:	bf1d      	ittte	ne
    4e20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4e24:	ea94 0f0c 	teqne	r4, ip
    4e28:	ea95 0f0c 	teqne	r5, ip
    4e2c:	f000 f8de 	bleq	4fec <__aeabi_dmul+0x1dc>
    4e30:	442c      	add	r4, r5
    4e32:	ea81 0603 	eor.w	r6, r1, r3
    4e36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    4e3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    4e3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    4e42:	bf18      	it	ne
    4e44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4e50:	d038      	beq.n	4ec4 <__aeabi_dmul+0xb4>
    4e52:	fba0 ce02 	umull	ip, lr, r0, r2
    4e56:	f04f 0500 	mov.w	r5, #0
    4e5a:	fbe1 e502 	umlal	lr, r5, r1, r2
    4e5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4e62:	fbe0 e503 	umlal	lr, r5, r0, r3
    4e66:	f04f 0600 	mov.w	r6, #0
    4e6a:	fbe1 5603 	umlal	r5, r6, r1, r3
    4e6e:	f09c 0f00 	teq	ip, #0
    4e72:	bf18      	it	ne
    4e74:	f04e 0e01 	orrne.w	lr, lr, #1
    4e78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4e7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4e80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4e84:	d204      	bcs.n	4e90 <__aeabi_dmul+0x80>
    4e86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4e8a:	416d      	adcs	r5, r5
    4e8c:	eb46 0606 	adc.w	r6, r6, r6
    4e90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4e94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4e98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4e9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4ea0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4ea4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4ea8:	bf88      	it	hi
    4eaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4eae:	d81e      	bhi.n	4eee <__aeabi_dmul+0xde>
    4eb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4eb4:	bf08      	it	eq
    4eb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4eba:	f150 0000 	adcs.w	r0, r0, #0
    4ebe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4ec2:	bd70      	pop	{r4, r5, r6, pc}
    4ec4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4ec8:	ea46 0101 	orr.w	r1, r6, r1
    4ecc:	ea40 0002 	orr.w	r0, r0, r2
    4ed0:	ea81 0103 	eor.w	r1, r1, r3
    4ed4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4ed8:	bfc2      	ittt	gt
    4eda:	ebd4 050c 	rsbsgt	r5, r4, ip
    4ede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4ee2:	bd70      	popgt	{r4, r5, r6, pc}
    4ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4ee8:	f04f 0e00 	mov.w	lr, #0
    4eec:	3c01      	subs	r4, #1
    4eee:	f300 80ab 	bgt.w	5048 <__aeabi_dmul+0x238>
    4ef2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4ef6:	bfde      	ittt	le
    4ef8:	2000      	movle	r0, #0
    4efa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4efe:	bd70      	pople	{r4, r5, r6, pc}
    4f00:	f1c4 0400 	rsb	r4, r4, #0
    4f04:	3c20      	subs	r4, #32
    4f06:	da35      	bge.n	4f74 <__aeabi_dmul+0x164>
    4f08:	340c      	adds	r4, #12
    4f0a:	dc1b      	bgt.n	4f44 <__aeabi_dmul+0x134>
    4f0c:	f104 0414 	add.w	r4, r4, #20
    4f10:	f1c4 0520 	rsb	r5, r4, #32
    4f14:	fa00 f305 	lsl.w	r3, r0, r5
    4f18:	fa20 f004 	lsr.w	r0, r0, r4
    4f1c:	fa01 f205 	lsl.w	r2, r1, r5
    4f20:	ea40 0002 	orr.w	r0, r0, r2
    4f24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4f28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4f2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4f30:	fa21 f604 	lsr.w	r6, r1, r4
    4f34:	eb42 0106 	adc.w	r1, r2, r6
    4f38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f3c:	bf08      	it	eq
    4f3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f42:	bd70      	pop	{r4, r5, r6, pc}
    4f44:	f1c4 040c 	rsb	r4, r4, #12
    4f48:	f1c4 0520 	rsb	r5, r4, #32
    4f4c:	fa00 f304 	lsl.w	r3, r0, r4
    4f50:	fa20 f005 	lsr.w	r0, r0, r5
    4f54:	fa01 f204 	lsl.w	r2, r1, r4
    4f58:	ea40 0002 	orr.w	r0, r0, r2
    4f5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4f60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4f64:	f141 0100 	adc.w	r1, r1, #0
    4f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f6c:	bf08      	it	eq
    4f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f72:	bd70      	pop	{r4, r5, r6, pc}
    4f74:	f1c4 0520 	rsb	r5, r4, #32
    4f78:	fa00 f205 	lsl.w	r2, r0, r5
    4f7c:	ea4e 0e02 	orr.w	lr, lr, r2
    4f80:	fa20 f304 	lsr.w	r3, r0, r4
    4f84:	fa01 f205 	lsl.w	r2, r1, r5
    4f88:	ea43 0302 	orr.w	r3, r3, r2
    4f8c:	fa21 f004 	lsr.w	r0, r1, r4
    4f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4f94:	fa21 f204 	lsr.w	r2, r1, r4
    4f98:	ea20 0002 	bic.w	r0, r0, r2
    4f9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4fa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4fa4:	bf08      	it	eq
    4fa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4faa:	bd70      	pop	{r4, r5, r6, pc}
    4fac:	f094 0f00 	teq	r4, #0
    4fb0:	d10f      	bne.n	4fd2 <__aeabi_dmul+0x1c2>
    4fb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4fb6:	0040      	lsls	r0, r0, #1
    4fb8:	eb41 0101 	adc.w	r1, r1, r1
    4fbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4fc0:	bf08      	it	eq
    4fc2:	3c01      	subeq	r4, #1
    4fc4:	d0f7      	beq.n	4fb6 <__aeabi_dmul+0x1a6>
    4fc6:	ea41 0106 	orr.w	r1, r1, r6
    4fca:	f095 0f00 	teq	r5, #0
    4fce:	bf18      	it	ne
    4fd0:	4770      	bxne	lr
    4fd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4fd6:	0052      	lsls	r2, r2, #1
    4fd8:	eb43 0303 	adc.w	r3, r3, r3
    4fdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4fe0:	bf08      	it	eq
    4fe2:	3d01      	subeq	r5, #1
    4fe4:	d0f7      	beq.n	4fd6 <__aeabi_dmul+0x1c6>
    4fe6:	ea43 0306 	orr.w	r3, r3, r6
    4fea:	4770      	bx	lr
    4fec:	ea94 0f0c 	teq	r4, ip
    4ff0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4ff4:	bf18      	it	ne
    4ff6:	ea95 0f0c 	teqne	r5, ip
    4ffa:	d00c      	beq.n	5016 <__aeabi_dmul+0x206>
    4ffc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5000:	bf18      	it	ne
    5002:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5006:	d1d1      	bne.n	4fac <__aeabi_dmul+0x19c>
    5008:	ea81 0103 	eor.w	r1, r1, r3
    500c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5010:	f04f 0000 	mov.w	r0, #0
    5014:	bd70      	pop	{r4, r5, r6, pc}
    5016:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    501a:	bf06      	itte	eq
    501c:	4610      	moveq	r0, r2
    501e:	4619      	moveq	r1, r3
    5020:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    5024:	d019      	beq.n	505a <__aeabi_dmul+0x24a>
    5026:	ea94 0f0c 	teq	r4, ip
    502a:	d102      	bne.n	5032 <__aeabi_dmul+0x222>
    502c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    5030:	d113      	bne.n	505a <__aeabi_dmul+0x24a>
    5032:	ea95 0f0c 	teq	r5, ip
    5036:	d105      	bne.n	5044 <__aeabi_dmul+0x234>
    5038:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    503c:	bf1c      	itt	ne
    503e:	4610      	movne	r0, r2
    5040:	4619      	movne	r1, r3
    5042:	d10a      	bne.n	505a <__aeabi_dmul+0x24a>
    5044:	ea81 0103 	eor.w	r1, r1, r3
    5048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    504c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5054:	f04f 0000 	mov.w	r0, #0
    5058:	bd70      	pop	{r4, r5, r6, pc}
    505a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    505e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    5062:	bd70      	pop	{r4, r5, r6, pc}

00005064 <__aeabi_ddiv>:
    5064:	b570      	push	{r4, r5, r6, lr}
    5066:	f04f 0cff 	mov.w	ip, #255	; 0xff
    506a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    506e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    5072:	bf1d      	ittte	ne
    5074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5078:	ea94 0f0c 	teqne	r4, ip
    507c:	ea95 0f0c 	teqne	r5, ip
    5080:	f000 f8a7 	bleq	51d2 <__aeabi_ddiv+0x16e>
    5084:	eba4 0405 	sub.w	r4, r4, r5
    5088:	ea81 0e03 	eor.w	lr, r1, r3
    508c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5090:	ea4f 3101 	mov.w	r1, r1, lsl #12
    5094:	f000 8088 	beq.w	51a8 <__aeabi_ddiv+0x144>
    5098:	ea4f 3303 	mov.w	r3, r3, lsl #12
    509c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    50a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    50a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    50a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    50ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    50b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    50b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    50b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    50bc:	429d      	cmp	r5, r3
    50be:	bf08      	it	eq
    50c0:	4296      	cmpeq	r6, r2
    50c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    50c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    50ca:	d202      	bcs.n	50d2 <__aeabi_ddiv+0x6e>
    50cc:	085b      	lsrs	r3, r3, #1
    50ce:	ea4f 0232 	mov.w	r2, r2, rrx
    50d2:	1ab6      	subs	r6, r6, r2
    50d4:	eb65 0503 	sbc.w	r5, r5, r3
    50d8:	085b      	lsrs	r3, r3, #1
    50da:	ea4f 0232 	mov.w	r2, r2, rrx
    50de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    50e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    50e6:	ebb6 0e02 	subs.w	lr, r6, r2
    50ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    50ee:	bf22      	ittt	cs
    50f0:	1ab6      	subcs	r6, r6, r2
    50f2:	4675      	movcs	r5, lr
    50f4:	ea40 000c 	orrcs.w	r0, r0, ip
    50f8:	085b      	lsrs	r3, r3, #1
    50fa:	ea4f 0232 	mov.w	r2, r2, rrx
    50fe:	ebb6 0e02 	subs.w	lr, r6, r2
    5102:	eb75 0e03 	sbcs.w	lr, r5, r3
    5106:	bf22      	ittt	cs
    5108:	1ab6      	subcs	r6, r6, r2
    510a:	4675      	movcs	r5, lr
    510c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    5110:	085b      	lsrs	r3, r3, #1
    5112:	ea4f 0232 	mov.w	r2, r2, rrx
    5116:	ebb6 0e02 	subs.w	lr, r6, r2
    511a:	eb75 0e03 	sbcs.w	lr, r5, r3
    511e:	bf22      	ittt	cs
    5120:	1ab6      	subcs	r6, r6, r2
    5122:	4675      	movcs	r5, lr
    5124:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    5128:	085b      	lsrs	r3, r3, #1
    512a:	ea4f 0232 	mov.w	r2, r2, rrx
    512e:	ebb6 0e02 	subs.w	lr, r6, r2
    5132:	eb75 0e03 	sbcs.w	lr, r5, r3
    5136:	bf22      	ittt	cs
    5138:	1ab6      	subcs	r6, r6, r2
    513a:	4675      	movcs	r5, lr
    513c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    5140:	ea55 0e06 	orrs.w	lr, r5, r6
    5144:	d018      	beq.n	5178 <__aeabi_ddiv+0x114>
    5146:	ea4f 1505 	mov.w	r5, r5, lsl #4
    514a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    514e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    5152:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5156:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    515a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    515e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    5162:	d1c0      	bne.n	50e6 <__aeabi_ddiv+0x82>
    5164:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5168:	d10b      	bne.n	5182 <__aeabi_ddiv+0x11e>
    516a:	ea41 0100 	orr.w	r1, r1, r0
    516e:	f04f 0000 	mov.w	r0, #0
    5172:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    5176:	e7b6      	b.n	50e6 <__aeabi_ddiv+0x82>
    5178:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    517c:	bf04      	itt	eq
    517e:	4301      	orreq	r1, r0
    5180:	2000      	moveq	r0, #0
    5182:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5186:	bf88      	it	hi
    5188:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    518c:	f63f aeaf 	bhi.w	4eee <__aeabi_dmul+0xde>
    5190:	ebb5 0c03 	subs.w	ip, r5, r3
    5194:	bf04      	itt	eq
    5196:	ebb6 0c02 	subseq.w	ip, r6, r2
    519a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    519e:	f150 0000 	adcs.w	r0, r0, #0
    51a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    51a6:	bd70      	pop	{r4, r5, r6, pc}
    51a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    51ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    51b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    51b4:	bfc2      	ittt	gt
    51b6:	ebd4 050c 	rsbsgt	r5, r4, ip
    51ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    51be:	bd70      	popgt	{r4, r5, r6, pc}
    51c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    51c4:	f04f 0e00 	mov.w	lr, #0
    51c8:	3c01      	subs	r4, #1
    51ca:	e690      	b.n	4eee <__aeabi_dmul+0xde>
    51cc:	ea45 0e06 	orr.w	lr, r5, r6
    51d0:	e68d      	b.n	4eee <__aeabi_dmul+0xde>
    51d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    51d6:	ea94 0f0c 	teq	r4, ip
    51da:	bf08      	it	eq
    51dc:	ea95 0f0c 	teqeq	r5, ip
    51e0:	f43f af3b 	beq.w	505a <__aeabi_dmul+0x24a>
    51e4:	ea94 0f0c 	teq	r4, ip
    51e8:	d10a      	bne.n	5200 <__aeabi_ddiv+0x19c>
    51ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    51ee:	f47f af34 	bne.w	505a <__aeabi_dmul+0x24a>
    51f2:	ea95 0f0c 	teq	r5, ip
    51f6:	f47f af25 	bne.w	5044 <__aeabi_dmul+0x234>
    51fa:	4610      	mov	r0, r2
    51fc:	4619      	mov	r1, r3
    51fe:	e72c      	b.n	505a <__aeabi_dmul+0x24a>
    5200:	ea95 0f0c 	teq	r5, ip
    5204:	d106      	bne.n	5214 <__aeabi_ddiv+0x1b0>
    5206:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    520a:	f43f aefd 	beq.w	5008 <__aeabi_dmul+0x1f8>
    520e:	4610      	mov	r0, r2
    5210:	4619      	mov	r1, r3
    5212:	e722      	b.n	505a <__aeabi_dmul+0x24a>
    5214:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    5218:	bf18      	it	ne
    521a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    521e:	f47f aec5 	bne.w	4fac <__aeabi_dmul+0x19c>
    5222:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    5226:	f47f af0d 	bne.w	5044 <__aeabi_dmul+0x234>
    522a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    522e:	f47f aeeb 	bne.w	5008 <__aeabi_dmul+0x1f8>
    5232:	e712      	b.n	505a <__aeabi_dmul+0x24a>

00005234 <__gedf2>:
    5234:	f04f 3cff 	mov.w	ip, #4294967295
    5238:	e006      	b.n	5248 <__cmpdf2+0x4>
    523a:	bf00      	nop

0000523c <__ledf2>:
    523c:	f04f 0c01 	mov.w	ip, #1
    5240:	e002      	b.n	5248 <__cmpdf2+0x4>
    5242:	bf00      	nop

00005244 <__cmpdf2>:
    5244:	f04f 0c01 	mov.w	ip, #1
    5248:	f84d cd04 	str.w	ip, [sp, #-4]!
    524c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5258:	bf18      	it	ne
    525a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    525e:	d01b      	beq.n	5298 <__cmpdf2+0x54>
    5260:	b001      	add	sp, #4
    5262:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    5266:	bf0c      	ite	eq
    5268:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    526c:	ea91 0f03 	teqne	r1, r3
    5270:	bf02      	ittt	eq
    5272:	ea90 0f02 	teqeq	r0, r2
    5276:	2000      	moveq	r0, #0
    5278:	4770      	bxeq	lr
    527a:	f110 0f00 	cmn.w	r0, #0
    527e:	ea91 0f03 	teq	r1, r3
    5282:	bf58      	it	pl
    5284:	4299      	cmppl	r1, r3
    5286:	bf08      	it	eq
    5288:	4290      	cmpeq	r0, r2
    528a:	bf2c      	ite	cs
    528c:	17d8      	asrcs	r0, r3, #31
    528e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    5292:	f040 0001 	orr.w	r0, r0, #1
    5296:	4770      	bx	lr
    5298:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    529c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    52a0:	d102      	bne.n	52a8 <__cmpdf2+0x64>
    52a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    52a6:	d107      	bne.n	52b8 <__cmpdf2+0x74>
    52a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    52ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    52b0:	d1d6      	bne.n	5260 <__cmpdf2+0x1c>
    52b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    52b6:	d0d3      	beq.n	5260 <__cmpdf2+0x1c>
    52b8:	f85d 0b04 	ldr.w	r0, [sp], #4
    52bc:	4770      	bx	lr
    52be:	bf00      	nop

000052c0 <__aeabi_cdrcmple>:
    52c0:	4684      	mov	ip, r0
    52c2:	4610      	mov	r0, r2
    52c4:	4662      	mov	r2, ip
    52c6:	468c      	mov	ip, r1
    52c8:	4619      	mov	r1, r3
    52ca:	4663      	mov	r3, ip
    52cc:	e000      	b.n	52d0 <__aeabi_cdcmpeq>
    52ce:	bf00      	nop

000052d0 <__aeabi_cdcmpeq>:
    52d0:	b501      	push	{r0, lr}
    52d2:	f7ff ffb7 	bl	5244 <__cmpdf2>
    52d6:	2800      	cmp	r0, #0
    52d8:	bf48      	it	mi
    52da:	f110 0f00 	cmnmi.w	r0, #0
    52de:	bd01      	pop	{r0, pc}

000052e0 <__aeabi_dcmpeq>:
    52e0:	f84d ed08 	str.w	lr, [sp, #-8]!
    52e4:	f7ff fff4 	bl	52d0 <__aeabi_cdcmpeq>
    52e8:	bf0c      	ite	eq
    52ea:	2001      	moveq	r0, #1
    52ec:	2000      	movne	r0, #0
    52ee:	f85d fb08 	ldr.w	pc, [sp], #8
    52f2:	bf00      	nop

000052f4 <__aeabi_dcmplt>:
    52f4:	f84d ed08 	str.w	lr, [sp, #-8]!
    52f8:	f7ff ffea 	bl	52d0 <__aeabi_cdcmpeq>
    52fc:	bf34      	ite	cc
    52fe:	2001      	movcc	r0, #1
    5300:	2000      	movcs	r0, #0
    5302:	f85d fb08 	ldr.w	pc, [sp], #8
    5306:	bf00      	nop

00005308 <__aeabi_dcmple>:
    5308:	f84d ed08 	str.w	lr, [sp, #-8]!
    530c:	f7ff ffe0 	bl	52d0 <__aeabi_cdcmpeq>
    5310:	bf94      	ite	ls
    5312:	2001      	movls	r0, #1
    5314:	2000      	movhi	r0, #0
    5316:	f85d fb08 	ldr.w	pc, [sp], #8
    531a:	bf00      	nop

0000531c <__aeabi_dcmpge>:
    531c:	f84d ed08 	str.w	lr, [sp, #-8]!
    5320:	f7ff ffce 	bl	52c0 <__aeabi_cdrcmple>
    5324:	bf94      	ite	ls
    5326:	2001      	movls	r0, #1
    5328:	2000      	movhi	r0, #0
    532a:	f85d fb08 	ldr.w	pc, [sp], #8
    532e:	bf00      	nop

00005330 <__aeabi_dcmpgt>:
    5330:	f84d ed08 	str.w	lr, [sp, #-8]!
    5334:	f7ff ffc4 	bl	52c0 <__aeabi_cdrcmple>
    5338:	bf34      	ite	cc
    533a:	2001      	movcc	r0, #1
    533c:	2000      	movcs	r0, #0
    533e:	f85d fb08 	ldr.w	pc, [sp], #8
    5342:	bf00      	nop

00005344 <__aeabi_dcmpun>:
    5344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    534c:	d102      	bne.n	5354 <__aeabi_dcmpun+0x10>
    534e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    5352:	d10a      	bne.n	536a <__aeabi_dcmpun+0x26>
    5354:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    535c:	d102      	bne.n	5364 <__aeabi_dcmpun+0x20>
    535e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    5362:	d102      	bne.n	536a <__aeabi_dcmpun+0x26>
    5364:	f04f 0000 	mov.w	r0, #0
    5368:	4770      	bx	lr
    536a:	f04f 0001 	mov.w	r0, #1
    536e:	4770      	bx	lr

00005370 <__aeabi_d2uiz>:
    5370:	004a      	lsls	r2, r1, #1
    5372:	d211      	bcs.n	5398 <__aeabi_d2uiz+0x28>
    5374:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    5378:	d211      	bcs.n	539e <__aeabi_d2uiz+0x2e>
    537a:	d50d      	bpl.n	5398 <__aeabi_d2uiz+0x28>
    537c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    5380:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    5384:	d40e      	bmi.n	53a4 <__aeabi_d2uiz+0x34>
    5386:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    538a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    538e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    5392:	fa23 f002 	lsr.w	r0, r3, r2
    5396:	4770      	bx	lr
    5398:	f04f 0000 	mov.w	r0, #0
    539c:	4770      	bx	lr
    539e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    53a2:	d102      	bne.n	53aa <__aeabi_d2uiz+0x3a>
    53a4:	f04f 30ff 	mov.w	r0, #4294967295
    53a8:	4770      	bx	lr
    53aa:	f04f 0000 	mov.w	r0, #0
    53ae:	4770      	bx	lr

000053b0 <__aeabi_frsub>:
    53b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    53b4:	e002      	b.n	53bc <__addsf3>
    53b6:	bf00      	nop

000053b8 <__aeabi_fsub>:
    53b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000053bc <__addsf3>:
    53bc:	0042      	lsls	r2, r0, #1
    53be:	bf1f      	itttt	ne
    53c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    53c4:	ea92 0f03 	teqne	r2, r3
    53c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    53cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    53d0:	d06a      	beq.n	54a8 <__addsf3+0xec>
    53d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    53d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    53da:	bfc1      	itttt	gt
    53dc:	18d2      	addgt	r2, r2, r3
    53de:	4041      	eorgt	r1, r0
    53e0:	4048      	eorgt	r0, r1
    53e2:	4041      	eorgt	r1, r0
    53e4:	bfb8      	it	lt
    53e6:	425b      	neglt	r3, r3
    53e8:	2b19      	cmp	r3, #25
    53ea:	bf88      	it	hi
    53ec:	4770      	bxhi	lr
    53ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    53f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    53f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    53fa:	bf18      	it	ne
    53fc:	4240      	negne	r0, r0
    53fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    5402:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    5406:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    540a:	bf18      	it	ne
    540c:	4249      	negne	r1, r1
    540e:	ea92 0f03 	teq	r2, r3
    5412:	d03f      	beq.n	5494 <__addsf3+0xd8>
    5414:	f1a2 0201 	sub.w	r2, r2, #1
    5418:	fa41 fc03 	asr.w	ip, r1, r3
    541c:	eb10 000c 	adds.w	r0, r0, ip
    5420:	f1c3 0320 	rsb	r3, r3, #32
    5424:	fa01 f103 	lsl.w	r1, r1, r3
    5428:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    542c:	d502      	bpl.n	5434 <__addsf3+0x78>
    542e:	4249      	negs	r1, r1
    5430:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    5434:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5438:	d313      	bcc.n	5462 <__addsf3+0xa6>
    543a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    543e:	d306      	bcc.n	544e <__addsf3+0x92>
    5440:	0840      	lsrs	r0, r0, #1
    5442:	ea4f 0131 	mov.w	r1, r1, rrx
    5446:	f102 0201 	add.w	r2, r2, #1
    544a:	2afe      	cmp	r2, #254	; 0xfe
    544c:	d251      	bcs.n	54f2 <__addsf3+0x136>
    544e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    5452:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    5456:	bf08      	it	eq
    5458:	f020 0001 	biceq.w	r0, r0, #1
    545c:	ea40 0003 	orr.w	r0, r0, r3
    5460:	4770      	bx	lr
    5462:	0049      	lsls	r1, r1, #1
    5464:	eb40 0000 	adc.w	r0, r0, r0
    5468:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    546c:	f1a2 0201 	sub.w	r2, r2, #1
    5470:	d1ed      	bne.n	544e <__addsf3+0x92>
    5472:	fab0 fc80 	clz	ip, r0
    5476:	f1ac 0c08 	sub.w	ip, ip, #8
    547a:	ebb2 020c 	subs.w	r2, r2, ip
    547e:	fa00 f00c 	lsl.w	r0, r0, ip
    5482:	bfaa      	itet	ge
    5484:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    5488:	4252      	neglt	r2, r2
    548a:	4318      	orrge	r0, r3
    548c:	bfbc      	itt	lt
    548e:	40d0      	lsrlt	r0, r2
    5490:	4318      	orrlt	r0, r3
    5492:	4770      	bx	lr
    5494:	f092 0f00 	teq	r2, #0
    5498:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    549c:	bf06      	itte	eq
    549e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    54a2:	3201      	addeq	r2, #1
    54a4:	3b01      	subne	r3, #1
    54a6:	e7b5      	b.n	5414 <__addsf3+0x58>
    54a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    54ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    54b0:	bf18      	it	ne
    54b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    54b6:	d021      	beq.n	54fc <__addsf3+0x140>
    54b8:	ea92 0f03 	teq	r2, r3
    54bc:	d004      	beq.n	54c8 <__addsf3+0x10c>
    54be:	f092 0f00 	teq	r2, #0
    54c2:	bf08      	it	eq
    54c4:	4608      	moveq	r0, r1
    54c6:	4770      	bx	lr
    54c8:	ea90 0f01 	teq	r0, r1
    54cc:	bf1c      	itt	ne
    54ce:	2000      	movne	r0, #0
    54d0:	4770      	bxne	lr
    54d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    54d6:	d104      	bne.n	54e2 <__addsf3+0x126>
    54d8:	0040      	lsls	r0, r0, #1
    54da:	bf28      	it	cs
    54dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    54e0:	4770      	bx	lr
    54e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    54e6:	bf3c      	itt	cc
    54e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    54ec:	4770      	bxcc	lr
    54ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    54f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    54f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    54fa:	4770      	bx	lr
    54fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
    5500:	bf16      	itet	ne
    5502:	4608      	movne	r0, r1
    5504:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    5508:	4601      	movne	r1, r0
    550a:	0242      	lsls	r2, r0, #9
    550c:	bf06      	itte	eq
    550e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    5512:	ea90 0f01 	teqeq	r0, r1
    5516:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    551a:	4770      	bx	lr

0000551c <__aeabi_ui2f>:
    551c:	f04f 0300 	mov.w	r3, #0
    5520:	e004      	b.n	552c <__aeabi_i2f+0x8>
    5522:	bf00      	nop

00005524 <__aeabi_i2f>:
    5524:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    5528:	bf48      	it	mi
    552a:	4240      	negmi	r0, r0
    552c:	ea5f 0c00 	movs.w	ip, r0
    5530:	bf08      	it	eq
    5532:	4770      	bxeq	lr
    5534:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    5538:	4601      	mov	r1, r0
    553a:	f04f 0000 	mov.w	r0, #0
    553e:	e01c      	b.n	557a <__aeabi_l2f+0x2a>

00005540 <__aeabi_ul2f>:
    5540:	ea50 0201 	orrs.w	r2, r0, r1
    5544:	bf08      	it	eq
    5546:	4770      	bxeq	lr
    5548:	f04f 0300 	mov.w	r3, #0
    554c:	e00a      	b.n	5564 <__aeabi_l2f+0x14>
    554e:	bf00      	nop

00005550 <__aeabi_l2f>:
    5550:	ea50 0201 	orrs.w	r2, r0, r1
    5554:	bf08      	it	eq
    5556:	4770      	bxeq	lr
    5558:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    555c:	d502      	bpl.n	5564 <__aeabi_l2f+0x14>
    555e:	4240      	negs	r0, r0
    5560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5564:	ea5f 0c01 	movs.w	ip, r1
    5568:	bf02      	ittt	eq
    556a:	4684      	moveq	ip, r0
    556c:	4601      	moveq	r1, r0
    556e:	2000      	moveq	r0, #0
    5570:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    5574:	bf08      	it	eq
    5576:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    557a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    557e:	fabc f28c 	clz	r2, ip
    5582:	3a08      	subs	r2, #8
    5584:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    5588:	db10      	blt.n	55ac <__aeabi_l2f+0x5c>
    558a:	fa01 fc02 	lsl.w	ip, r1, r2
    558e:	4463      	add	r3, ip
    5590:	fa00 fc02 	lsl.w	ip, r0, r2
    5594:	f1c2 0220 	rsb	r2, r2, #32
    5598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    559c:	fa20 f202 	lsr.w	r2, r0, r2
    55a0:	eb43 0002 	adc.w	r0, r3, r2
    55a4:	bf08      	it	eq
    55a6:	f020 0001 	biceq.w	r0, r0, #1
    55aa:	4770      	bx	lr
    55ac:	f102 0220 	add.w	r2, r2, #32
    55b0:	fa01 fc02 	lsl.w	ip, r1, r2
    55b4:	f1c2 0220 	rsb	r2, r2, #32
    55b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    55bc:	fa21 f202 	lsr.w	r2, r1, r2
    55c0:	eb43 0002 	adc.w	r0, r3, r2
    55c4:	bf08      	it	eq
    55c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    55ca:	4770      	bx	lr

000055cc <__libc_init_array>:
    55cc:	b570      	push	{r4, r5, r6, lr}
    55ce:	4e0f      	ldr	r6, [pc, #60]	; (560c <__libc_init_array+0x40>)
    55d0:	4d0f      	ldr	r5, [pc, #60]	; (5610 <__libc_init_array+0x44>)
    55d2:	1b76      	subs	r6, r6, r5
    55d4:	10b6      	asrs	r6, r6, #2
    55d6:	bf18      	it	ne
    55d8:	2400      	movne	r4, #0
    55da:	d005      	beq.n	55e8 <__libc_init_array+0x1c>
    55dc:	3401      	adds	r4, #1
    55de:	f855 3b04 	ldr.w	r3, [r5], #4
    55e2:	4798      	blx	r3
    55e4:	42a6      	cmp	r6, r4
    55e6:	d1f9      	bne.n	55dc <__libc_init_array+0x10>
    55e8:	4e0a      	ldr	r6, [pc, #40]	; (5614 <__libc_init_array+0x48>)
    55ea:	4d0b      	ldr	r5, [pc, #44]	; (5618 <__libc_init_array+0x4c>)
    55ec:	1b76      	subs	r6, r6, r5
    55ee:	f000 fb8b 	bl	5d08 <_init>
    55f2:	10b6      	asrs	r6, r6, #2
    55f4:	bf18      	it	ne
    55f6:	2400      	movne	r4, #0
    55f8:	d006      	beq.n	5608 <__libc_init_array+0x3c>
    55fa:	3401      	adds	r4, #1
    55fc:	f855 3b04 	ldr.w	r3, [r5], #4
    5600:	4798      	blx	r3
    5602:	42a6      	cmp	r6, r4
    5604:	d1f9      	bne.n	55fa <__libc_init_array+0x2e>
    5606:	bd70      	pop	{r4, r5, r6, pc}
    5608:	bd70      	pop	{r4, r5, r6, pc}
    560a:	bf00      	nop
    560c:	00005d14 	.word	0x00005d14
    5610:	00005d14 	.word	0x00005d14
    5614:	00005d1c 	.word	0x00005d1c
    5618:	00005d14 	.word	0x00005d14

0000561c <memcpy>:
    561c:	4684      	mov	ip, r0
    561e:	ea41 0300 	orr.w	r3, r1, r0
    5622:	f013 0303 	ands.w	r3, r3, #3
    5626:	d16d      	bne.n	5704 <memcpy+0xe8>
    5628:	3a40      	subs	r2, #64	; 0x40
    562a:	d341      	bcc.n	56b0 <memcpy+0x94>
    562c:	f851 3b04 	ldr.w	r3, [r1], #4
    5630:	f840 3b04 	str.w	r3, [r0], #4
    5634:	f851 3b04 	ldr.w	r3, [r1], #4
    5638:	f840 3b04 	str.w	r3, [r0], #4
    563c:	f851 3b04 	ldr.w	r3, [r1], #4
    5640:	f840 3b04 	str.w	r3, [r0], #4
    5644:	f851 3b04 	ldr.w	r3, [r1], #4
    5648:	f840 3b04 	str.w	r3, [r0], #4
    564c:	f851 3b04 	ldr.w	r3, [r1], #4
    5650:	f840 3b04 	str.w	r3, [r0], #4
    5654:	f851 3b04 	ldr.w	r3, [r1], #4
    5658:	f840 3b04 	str.w	r3, [r0], #4
    565c:	f851 3b04 	ldr.w	r3, [r1], #4
    5660:	f840 3b04 	str.w	r3, [r0], #4
    5664:	f851 3b04 	ldr.w	r3, [r1], #4
    5668:	f840 3b04 	str.w	r3, [r0], #4
    566c:	f851 3b04 	ldr.w	r3, [r1], #4
    5670:	f840 3b04 	str.w	r3, [r0], #4
    5674:	f851 3b04 	ldr.w	r3, [r1], #4
    5678:	f840 3b04 	str.w	r3, [r0], #4
    567c:	f851 3b04 	ldr.w	r3, [r1], #4
    5680:	f840 3b04 	str.w	r3, [r0], #4
    5684:	f851 3b04 	ldr.w	r3, [r1], #4
    5688:	f840 3b04 	str.w	r3, [r0], #4
    568c:	f851 3b04 	ldr.w	r3, [r1], #4
    5690:	f840 3b04 	str.w	r3, [r0], #4
    5694:	f851 3b04 	ldr.w	r3, [r1], #4
    5698:	f840 3b04 	str.w	r3, [r0], #4
    569c:	f851 3b04 	ldr.w	r3, [r1], #4
    56a0:	f840 3b04 	str.w	r3, [r0], #4
    56a4:	f851 3b04 	ldr.w	r3, [r1], #4
    56a8:	f840 3b04 	str.w	r3, [r0], #4
    56ac:	3a40      	subs	r2, #64	; 0x40
    56ae:	d2bd      	bcs.n	562c <memcpy+0x10>
    56b0:	3230      	adds	r2, #48	; 0x30
    56b2:	d311      	bcc.n	56d8 <memcpy+0xbc>
    56b4:	f851 3b04 	ldr.w	r3, [r1], #4
    56b8:	f840 3b04 	str.w	r3, [r0], #4
    56bc:	f851 3b04 	ldr.w	r3, [r1], #4
    56c0:	f840 3b04 	str.w	r3, [r0], #4
    56c4:	f851 3b04 	ldr.w	r3, [r1], #4
    56c8:	f840 3b04 	str.w	r3, [r0], #4
    56cc:	f851 3b04 	ldr.w	r3, [r1], #4
    56d0:	f840 3b04 	str.w	r3, [r0], #4
    56d4:	3a10      	subs	r2, #16
    56d6:	d2ed      	bcs.n	56b4 <memcpy+0x98>
    56d8:	320c      	adds	r2, #12
    56da:	d305      	bcc.n	56e8 <memcpy+0xcc>
    56dc:	f851 3b04 	ldr.w	r3, [r1], #4
    56e0:	f840 3b04 	str.w	r3, [r0], #4
    56e4:	3a04      	subs	r2, #4
    56e6:	d2f9      	bcs.n	56dc <memcpy+0xc0>
    56e8:	3204      	adds	r2, #4
    56ea:	d008      	beq.n	56fe <memcpy+0xe2>
    56ec:	07d2      	lsls	r2, r2, #31
    56ee:	bf1c      	itt	ne
    56f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    56f4:	f800 3b01 	strbne.w	r3, [r0], #1
    56f8:	d301      	bcc.n	56fe <memcpy+0xe2>
    56fa:	880b      	ldrh	r3, [r1, #0]
    56fc:	8003      	strh	r3, [r0, #0]
    56fe:	4660      	mov	r0, ip
    5700:	4770      	bx	lr
    5702:	bf00      	nop
    5704:	2a08      	cmp	r2, #8
    5706:	d313      	bcc.n	5730 <memcpy+0x114>
    5708:	078b      	lsls	r3, r1, #30
    570a:	d08d      	beq.n	5628 <memcpy+0xc>
    570c:	f010 0303 	ands.w	r3, r0, #3
    5710:	d08a      	beq.n	5628 <memcpy+0xc>
    5712:	f1c3 0304 	rsb	r3, r3, #4
    5716:	1ad2      	subs	r2, r2, r3
    5718:	07db      	lsls	r3, r3, #31
    571a:	bf1c      	itt	ne
    571c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    5720:	f800 3b01 	strbne.w	r3, [r0], #1
    5724:	d380      	bcc.n	5628 <memcpy+0xc>
    5726:	f831 3b02 	ldrh.w	r3, [r1], #2
    572a:	f820 3b02 	strh.w	r3, [r0], #2
    572e:	e77b      	b.n	5628 <memcpy+0xc>
    5730:	3a04      	subs	r2, #4
    5732:	d3d9      	bcc.n	56e8 <memcpy+0xcc>
    5734:	3a01      	subs	r2, #1
    5736:	f811 3b01 	ldrb.w	r3, [r1], #1
    573a:	f800 3b01 	strb.w	r3, [r0], #1
    573e:	d2f9      	bcs.n	5734 <memcpy+0x118>
    5740:	780b      	ldrb	r3, [r1, #0]
    5742:	7003      	strb	r3, [r0, #0]
    5744:	784b      	ldrb	r3, [r1, #1]
    5746:	7043      	strb	r3, [r0, #1]
    5748:	788b      	ldrb	r3, [r1, #2]
    574a:	7083      	strb	r3, [r0, #2]
    574c:	4660      	mov	r0, ip
    574e:	4770      	bx	lr

00005750 <memset>:
    5750:	b470      	push	{r4, r5, r6}
    5752:	0786      	lsls	r6, r0, #30
    5754:	d046      	beq.n	57e4 <memset+0x94>
    5756:	1e54      	subs	r4, r2, #1
    5758:	2a00      	cmp	r2, #0
    575a:	d041      	beq.n	57e0 <memset+0x90>
    575c:	b2ca      	uxtb	r2, r1
    575e:	4603      	mov	r3, r0
    5760:	e002      	b.n	5768 <memset+0x18>
    5762:	f114 34ff 	adds.w	r4, r4, #4294967295
    5766:	d33b      	bcc.n	57e0 <memset+0x90>
    5768:	f803 2b01 	strb.w	r2, [r3], #1
    576c:	079d      	lsls	r5, r3, #30
    576e:	d1f8      	bne.n	5762 <memset+0x12>
    5770:	2c03      	cmp	r4, #3
    5772:	d92e      	bls.n	57d2 <memset+0x82>
    5774:	b2cd      	uxtb	r5, r1
    5776:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    577a:	2c0f      	cmp	r4, #15
    577c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5780:	d919      	bls.n	57b6 <memset+0x66>
    5782:	f103 0210 	add.w	r2, r3, #16
    5786:	4626      	mov	r6, r4
    5788:	3e10      	subs	r6, #16
    578a:	2e0f      	cmp	r6, #15
    578c:	f842 5c10 	str.w	r5, [r2, #-16]
    5790:	f842 5c0c 	str.w	r5, [r2, #-12]
    5794:	f842 5c08 	str.w	r5, [r2, #-8]
    5798:	f842 5c04 	str.w	r5, [r2, #-4]
    579c:	f102 0210 	add.w	r2, r2, #16
    57a0:	d8f2      	bhi.n	5788 <memset+0x38>
    57a2:	f1a4 0210 	sub.w	r2, r4, #16
    57a6:	f022 020f 	bic.w	r2, r2, #15
    57aa:	f004 040f 	and.w	r4, r4, #15
    57ae:	3210      	adds	r2, #16
    57b0:	2c03      	cmp	r4, #3
    57b2:	4413      	add	r3, r2
    57b4:	d90d      	bls.n	57d2 <memset+0x82>
    57b6:	461e      	mov	r6, r3
    57b8:	4622      	mov	r2, r4
    57ba:	3a04      	subs	r2, #4
    57bc:	2a03      	cmp	r2, #3
    57be:	f846 5b04 	str.w	r5, [r6], #4
    57c2:	d8fa      	bhi.n	57ba <memset+0x6a>
    57c4:	1f22      	subs	r2, r4, #4
    57c6:	f022 0203 	bic.w	r2, r2, #3
    57ca:	3204      	adds	r2, #4
    57cc:	4413      	add	r3, r2
    57ce:	f004 0403 	and.w	r4, r4, #3
    57d2:	b12c      	cbz	r4, 57e0 <memset+0x90>
    57d4:	b2c9      	uxtb	r1, r1
    57d6:	441c      	add	r4, r3
    57d8:	f803 1b01 	strb.w	r1, [r3], #1
    57dc:	429c      	cmp	r4, r3
    57de:	d1fb      	bne.n	57d8 <memset+0x88>
    57e0:	bc70      	pop	{r4, r5, r6}
    57e2:	4770      	bx	lr
    57e4:	4614      	mov	r4, r2
    57e6:	4603      	mov	r3, r0
    57e8:	e7c2      	b.n	5770 <memset+0x20>
    57ea:	bf00      	nop
	...

00005800 <strlen>:
    5800:	f890 f000 	pld	[r0]
    5804:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5808:	f020 0107 	bic.w	r1, r0, #7
    580c:	f06f 0c00 	mvn.w	ip, #0
    5810:	f010 0407 	ands.w	r4, r0, #7
    5814:	f891 f020 	pld	[r1, #32]
    5818:	f040 8049 	bne.w	58ae <strlen+0xae>
    581c:	f04f 0400 	mov.w	r4, #0
    5820:	f06f 0007 	mvn.w	r0, #7
    5824:	e9d1 2300 	ldrd	r2, r3, [r1]
    5828:	f891 f040 	pld	[r1, #64]	; 0x40
    582c:	f100 0008 	add.w	r0, r0, #8
    5830:	fa82 f24c 	uadd8	r2, r2, ip
    5834:	faa4 f28c 	sel	r2, r4, ip
    5838:	fa83 f34c 	uadd8	r3, r3, ip
    583c:	faa2 f38c 	sel	r3, r2, ip
    5840:	bb4b      	cbnz	r3, 5896 <strlen+0x96>
    5842:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5846:	fa82 f24c 	uadd8	r2, r2, ip
    584a:	f100 0008 	add.w	r0, r0, #8
    584e:	faa4 f28c 	sel	r2, r4, ip
    5852:	fa83 f34c 	uadd8	r3, r3, ip
    5856:	faa2 f38c 	sel	r3, r2, ip
    585a:	b9e3      	cbnz	r3, 5896 <strlen+0x96>
    585c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5860:	fa82 f24c 	uadd8	r2, r2, ip
    5864:	f100 0008 	add.w	r0, r0, #8
    5868:	faa4 f28c 	sel	r2, r4, ip
    586c:	fa83 f34c 	uadd8	r3, r3, ip
    5870:	faa2 f38c 	sel	r3, r2, ip
    5874:	b97b      	cbnz	r3, 5896 <strlen+0x96>
    5876:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    587a:	f101 0120 	add.w	r1, r1, #32
    587e:	fa82 f24c 	uadd8	r2, r2, ip
    5882:	f100 0008 	add.w	r0, r0, #8
    5886:	faa4 f28c 	sel	r2, r4, ip
    588a:	fa83 f34c 	uadd8	r3, r3, ip
    588e:	faa2 f38c 	sel	r3, r2, ip
    5892:	2b00      	cmp	r3, #0
    5894:	d0c6      	beq.n	5824 <strlen+0x24>
    5896:	2a00      	cmp	r2, #0
    5898:	bf04      	itt	eq
    589a:	3004      	addeq	r0, #4
    589c:	461a      	moveq	r2, r3
    589e:	ba12      	rev	r2, r2
    58a0:	fab2 f282 	clz	r2, r2
    58a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    58a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    58ac:	4770      	bx	lr
    58ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    58b2:	f004 0503 	and.w	r5, r4, #3
    58b6:	f1c4 0000 	rsb	r0, r4, #0
    58ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    58be:	f014 0f04 	tst.w	r4, #4
    58c2:	f891 f040 	pld	[r1, #64]	; 0x40
    58c6:	fa0c f505 	lsl.w	r5, ip, r5
    58ca:	ea62 0205 	orn	r2, r2, r5
    58ce:	bf1c      	itt	ne
    58d0:	ea63 0305 	ornne	r3, r3, r5
    58d4:	4662      	movne	r2, ip
    58d6:	f04f 0400 	mov.w	r4, #0
    58da:	e7a9      	b.n	5830 <strlen+0x30>

000058dc <register_fini>:
    58dc:	4b02      	ldr	r3, [pc, #8]	; (58e8 <register_fini+0xc>)
    58de:	b113      	cbz	r3, 58e6 <register_fini+0xa>
    58e0:	4802      	ldr	r0, [pc, #8]	; (58ec <register_fini+0x10>)
    58e2:	f000 b805 	b.w	58f0 <atexit>
    58e6:	4770      	bx	lr
    58e8:	00000000 	.word	0x00000000
    58ec:	000058fd 	.word	0x000058fd

000058f0 <atexit>:
    58f0:	2300      	movs	r3, #0
    58f2:	4601      	mov	r1, r0
    58f4:	461a      	mov	r2, r3
    58f6:	4618      	mov	r0, r3
    58f8:	f000 b81e 	b.w	5938 <__register_exitproc>

000058fc <__libc_fini_array>:
    58fc:	b538      	push	{r3, r4, r5, lr}
    58fe:	4c0a      	ldr	r4, [pc, #40]	; (5928 <__libc_fini_array+0x2c>)
    5900:	4d0a      	ldr	r5, [pc, #40]	; (592c <__libc_fini_array+0x30>)
    5902:	1b64      	subs	r4, r4, r5
    5904:	10a4      	asrs	r4, r4, #2
    5906:	d00a      	beq.n	591e <__libc_fini_array+0x22>
    5908:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    590c:	3b01      	subs	r3, #1
    590e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5912:	3c01      	subs	r4, #1
    5914:	f855 3904 	ldr.w	r3, [r5], #-4
    5918:	4798      	blx	r3
    591a:	2c00      	cmp	r4, #0
    591c:	d1f9      	bne.n	5912 <__libc_fini_array+0x16>
    591e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5922:	f000 b9fb 	b.w	5d1c <_fini>
    5926:	bf00      	nop
    5928:	00005d2c 	.word	0x00005d2c
    592c:	00005d28 	.word	0x00005d28

00005930 <__retarget_lock_acquire_recursive>:
    5930:	4770      	bx	lr
    5932:	bf00      	nop

00005934 <__retarget_lock_release_recursive>:
    5934:	4770      	bx	lr
    5936:	bf00      	nop

00005938 <__register_exitproc>:
    5938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    593c:	4d2c      	ldr	r5, [pc, #176]	; (59f0 <__register_exitproc+0xb8>)
    593e:	4606      	mov	r6, r0
    5940:	6828      	ldr	r0, [r5, #0]
    5942:	4698      	mov	r8, r3
    5944:	460f      	mov	r7, r1
    5946:	4691      	mov	r9, r2
    5948:	f7ff fff2 	bl	5930 <__retarget_lock_acquire_recursive>
    594c:	4b29      	ldr	r3, [pc, #164]	; (59f4 <__register_exitproc+0xbc>)
    594e:	681c      	ldr	r4, [r3, #0]
    5950:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    5954:	2b00      	cmp	r3, #0
    5956:	d03e      	beq.n	59d6 <__register_exitproc+0x9e>
    5958:	685a      	ldr	r2, [r3, #4]
    595a:	2a1f      	cmp	r2, #31
    595c:	dc1c      	bgt.n	5998 <__register_exitproc+0x60>
    595e:	f102 0e01 	add.w	lr, r2, #1
    5962:	b176      	cbz	r6, 5982 <__register_exitproc+0x4a>
    5964:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5968:	2401      	movs	r4, #1
    596a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    596e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    5972:	4094      	lsls	r4, r2
    5974:	4320      	orrs	r0, r4
    5976:	2e02      	cmp	r6, #2
    5978:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    597c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    5980:	d023      	beq.n	59ca <__register_exitproc+0x92>
    5982:	3202      	adds	r2, #2
    5984:	f8c3 e004 	str.w	lr, [r3, #4]
    5988:	6828      	ldr	r0, [r5, #0]
    598a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    598e:	f7ff ffd1 	bl	5934 <__retarget_lock_release_recursive>
    5992:	2000      	movs	r0, #0
    5994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5998:	4b17      	ldr	r3, [pc, #92]	; (59f8 <__register_exitproc+0xc0>)
    599a:	b30b      	cbz	r3, 59e0 <__register_exitproc+0xa8>
    599c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    59a0:	f7fa fd5c 	bl	45c <malloc>
    59a4:	4603      	mov	r3, r0
    59a6:	b1d8      	cbz	r0, 59e0 <__register_exitproc+0xa8>
    59a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    59ac:	6002      	str	r2, [r0, #0]
    59ae:	2100      	movs	r1, #0
    59b0:	6041      	str	r1, [r0, #4]
    59b2:	460a      	mov	r2, r1
    59b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    59b8:	f04f 0e01 	mov.w	lr, #1
    59bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    59c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    59c4:	2e00      	cmp	r6, #0
    59c6:	d0dc      	beq.n	5982 <__register_exitproc+0x4a>
    59c8:	e7cc      	b.n	5964 <__register_exitproc+0x2c>
    59ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    59ce:	430c      	orrs	r4, r1
    59d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    59d4:	e7d5      	b.n	5982 <__register_exitproc+0x4a>
    59d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    59da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    59de:	e7bb      	b.n	5958 <__register_exitproc+0x20>
    59e0:	6828      	ldr	r0, [r5, #0]
    59e2:	f7ff ffa7 	bl	5934 <__retarget_lock_release_recursive>
    59e6:	f04f 30ff 	mov.w	r0, #4294967295
    59ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    59ee:	bf00      	nop
    59f0:	20000548 	.word	0x20000548
    59f4:	00005d04 	.word	0x00005d04
    59f8:	0000045d 	.word	0x0000045d

000059fc <_ZTV9CDC_Class>:
	...
    5a04:	00000311 000003b1 000002d1 0000039d     ................
    5a14:	00000329 00000375 000002f5 000003c1     )...u...........
    5a24:	00000a0d 006e616e 00666e69 0066766f     ....nan.inf.ovf.
    5a34:	77207469 736b726f 00000000 64207469     it works....it d
    5a44:	2073656f 6b726f77 00000000 682f2e2e     oes work....../h
    5a54:	732f6c61 682f6372 635f6c61 615f6e61     al/src/hal_can_a
    5a64:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
    5a74:	682f6372 695f6c61 6d5f6332 6e79735f     rc/hal_i2c_m_syn
    5a84:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
    5a94:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
    5aa4:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
    5ab4:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
    5ac4:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
    5ad4:	2e747369 00000063                       ist.c...

00005adc <user_mux_confs>:
    5adc:	00000100 00000000 00000000 00000000     ................
	...

00005b20 <channel_confs>:
    5b20:	0000060c 00000000 00000000 00000000     ................
	...

00005b60 <interrupt_cfg>:
	...
    5be0:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    5bf0:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    5c00:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    5c10:	43000800 43000c00                       ...C...C

00005c18 <_i2cms>:
    5c18:	00000003 00200014 00000100 00003635     ...... .....56..
    5c28:	00d70000 00b71b00                       ........

00005c30 <sercomspi_regs>:
    5c30:	0020000c 00020000 00000000 01ff0077     .. .........w...
    5c40:	20000c00 02000000 00000000 ff007700     ... .........w..
    5c50:	000c0101 00000020 00000002 00770000     .... .........w.
    5c60:	000401ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    5c70:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    5c80:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    5c90:	42001400 42001800 43001400 43001800     ...B...B...C...C

00005ca0 <_tcs>:
    5ca0:	006b0000 00000308 00000000 00000004     ..k.............
    5cb0:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    5cc0:	63745f6c 0000632e                       l_tc.c..

00005cc8 <_usb_ep_cfgs>:
    5cc8:	2000084c 00000000 00000040 2000080c     L.. ....@...... 
    5cd8:	00000000 00000040 200007cc 00000000     ....@...... ....
    5ce8:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    5cf8:	73752f65 2e636462 00000063              e/usbdc.c...

00005d04 <_global_impure_ptr>:
    5d04:	20000120                                 .. 

00005d08 <_init>:
    5d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d0a:	bf00      	nop
    5d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d0e:	bc08      	pop	{r3}
    5d10:	469e      	mov	lr, r3
    5d12:	4770      	bx	lr

00005d14 <__init_array_start>:
    5d14:	000058dd 	.word	0x000058dd

00005d18 <__frame_dummy_init_array_entry>:
    5d18:	00000289                                ....

00005d1c <_fini>:
    5d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d1e:	bf00      	nop
    5d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d22:	bc08      	pop	{r3}
    5d24:	469e      	mov	lr, r3
    5d26:	4770      	bx	lr

00005d28 <__fini_array_start>:
    5d28:	00000265 	.word	0x00000265
