
ECS_Box_Objects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012a34  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012a34  00012a34  00022a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000574  20000000  00012a3c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030574  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030574  2**0
                  CONTENTS
  5 .bss          00002350  20000578  00012fb8  00030578  2**3
                  ALLOC
  6 .stack        00010000  200028c8  00015308  00030578  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000305a2  2**0
                  CONTENTS, READONLY
  9 .debug_info   00089716  00000000  00000000  000305fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cd22  00000000  00000000  000b9d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021c7b  00000000  00000000  000c6a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003c50  00000000  00000000  000e86ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003818  00000000  00000000  000ec2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000547db  00000000  00000000  000efb16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00048569  00000000  00000000  001442f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001436f8  00000000  00000000  0018c85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00010220  00000000  00000000  002cff54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 28 01 20 b9 07 00 00 3d 08 00 00 3d 08 00 00     .(. ....=...=...
      10:	3d 08 00 00 3d 08 00 00 3d 08 00 00 00 00 00 00     =...=...=.......
	...
      2c:	3d 08 00 00 3d 08 00 00 00 00 00 00 3d 08 00 00     =...=.......=...
      3c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      4c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      5c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      6c:	4d 84 00 00 3d 72 00 00 3d 08 00 00 3d 08 00 00     M...=r..=...=...
      7c:	3d 08 00 00 4d 72 00 00 5d 72 00 00 6d 72 00 00     =...Mr..]r..mr..
      8c:	7d 72 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     }r..=...=...=...
      9c:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      ac:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      bc:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      cc:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
      dc:	3d 08 00 00 3d 08 00 00 3d 08 00 00 00 00 00 00     =...=...=.......
	...
      f4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     104:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     114:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     124:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     134:	3d 08 00 00 89 98 00 00 a5 98 00 00 c1 98 00 00     =...............
     144:	dd 98 00 00 f9 98 00 00 15 99 00 00 31 99 00 00     ............1...
     154:	4d 99 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     M...=...=...=...
     164:	3d 08 00 00 69 99 00 00 85 99 00 00 a1 99 00 00     =...i...........
     174:	bd 99 00 00 3d 08 00 00 d1 66 00 00 85 d3 00 00     ....=....f......
     184:	95 d3 00 00 a5 d3 00 00 b5 d3 00 00 3d 08 00 00     ............=...
     194:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1a4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1b4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1c4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1d4:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     1e4:	3d 08 00 00 3d 08 00 00 51 aa 00 00 6d aa 00 00     =...=...Q...m...
     1f4:	89 aa 00 00 a5 aa 00 00 c1 aa 00 00 dd aa 00 00     ................
     204:	3d 08 00 00 f9 aa 00 00 3d 08 00 00 3d 08 00 00     =.......=...=...
     214:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     224:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     234:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     244:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...
     254:	3d 08 00 00 3d 08 00 00 3d 08 00 00 3d 08 00 00     =...=...=...=...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000578 	.word	0x20000578
     280:	00000000 	.word	0x00000000
     284:	00012a3c 	.word	0x00012a3c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00012a3c 	.word	0x00012a3c
     2c4:	2000057c 	.word	0x2000057c
     2c8:	00012a3c 	.word	0x00012a3c
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
{
} //AMMC_Class
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	4618      	mov	r0, r3
     2dc:	370c      	adds	r7, #12
     2de:	46bd      	mov	sp, r7
     2e0:	bc80      	pop	{r7}
     2e2:	4770      	bx	lr

000002e4 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
{
} //~AMMC_Class
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	4618      	mov	r0, r3
     2f0:	370c      	adds	r7, #12
     2f2:	46bd      	mov	sp, r7
     2f4:	bc80      	pop	{r7}
     2f6:	4770      	bx	lr

000002f8 <_Z41__static_initialization_and_destruction_0ii>:
	
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	6039      	str	r1, [r7, #0]
     302:	687b      	ldr	r3, [r7, #4]
     304:	2b01      	cmp	r3, #1
     306:	d114      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     30e:	4293      	cmp	r3, r2
     310:	d10f      	bne.n	332 <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     312:	480a      	ldr	r0, [pc, #40]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     314:	4b0a      	ldr	r3, [pc, #40]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     316:	4798      	blx	r3
     318:	4a0a      	ldr	r2, [pc, #40]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     31a:	490b      	ldr	r1, [pc, #44]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     31c:	4807      	ldr	r0, [pc, #28]	; (33c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     320:	4798      	blx	r3
AMMC_Class	ammc2;
     322:	480b      	ldr	r0, [pc, #44]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     326:	4798      	blx	r3
     328:	4a06      	ldr	r2, [pc, #24]	; (344 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     32a:	4907      	ldr	r1, [pc, #28]	; (348 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     32c:	4808      	ldr	r0, [pc, #32]	; (350 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     32e:	4b07      	ldr	r3, [pc, #28]	; (34c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     330:	4798      	blx	r3
     332:	bf00      	nop
     334:	3708      	adds	r7, #8
     336:	46bd      	mov	sp, r7
     338:	bd80      	pop	{r7, pc}
     33a:	bf00      	nop
     33c:	20000594 	.word	0x20000594
     340:	000002d1 	.word	0x000002d1
     344:	20000000 	.word	0x20000000
     348:	000002e5 	.word	0x000002e5
     34c:	0000f915 	.word	0x0000f915
     350:	20000598 	.word	0x20000598

00000354 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     354:	b580      	push	{r7, lr}
     356:	af00      	add	r7, sp, #0
     358:	f64f 71ff 	movw	r1, #65535	; 0xffff
     35c:	2001      	movs	r0, #1
     35e:	4b01      	ldr	r3, [pc, #4]	; (364 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     360:	4798      	blx	r3
     362:	bd80      	pop	{r7, pc}
     364:	000002f9 	.word	0x000002f9

00000368 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
     372:	687b      	ldr	r3, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
     376:	687b      	ldr	r3, [r7, #4]
     378:	4618      	mov	r0, r3
     37a:	370c      	adds	r7, #12
     37c:	46bd      	mov	sp, r7
     37e:	bc80      	pop	{r7}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	00011844 	.word	0x00011844

00000388 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
     390:	4a04      	ldr	r2, [pc, #16]	; (3a4 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
     392:	687b      	ldr	r3, [r7, #4]
     394:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
     396:	687b      	ldr	r3, [r7, #4]
     398:	4618      	mov	r0, r3
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	00011844 	.word	0x00011844

000003a8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
     3a8:	b5b0      	push	{r4, r5, r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     3b2:	4b0a      	ldr	r3, [pc, #40]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	4798      	blx	r3
     3b8:	4604      	mov	r4, r0
     3ba:	460d      	mov	r5, r1
     3bc:	4b07      	ldr	r3, [pc, #28]	; (3dc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
     3be:	6838      	ldr	r0, [r7, #0]
     3c0:	4798      	blx	r3
     3c2:	4602      	mov	r2, r0
     3c4:	460b      	mov	r3, r1
     3c6:	4620      	mov	r0, r4
     3c8:	4629      	mov	r1, r5
     3ca:	4c05      	ldr	r4, [pc, #20]	; (3e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
     3cc:	47a0      	blx	r4
     3ce:	4603      	mov	r3, r0
     3d0:	460c      	mov	r4, r1
    }
     3d2:	4618      	mov	r0, r3
     3d4:	4621      	mov	r1, r4
     3d6:	3708      	adds	r7, #8
     3d8:	46bd      	mov	sp, r7
     3da:	bdb0      	pop	{r4, r5, r7, pc}
     3dc:	00010d11 	.word	0x00010d11
     3e0:	0000f925 	.word	0x0000f925

000003e4 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
     3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3e8:	b085      	sub	sp, #20
     3ea:	af00      	add	r7, sp, #0
     3ec:	6078      	str	r0, [r7, #4]
     3ee:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
     3f0:	2300      	movs	r3, #0
     3f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     3f4:	2300      	movs	r3, #0
     3f6:	73bb      	strb	r3, [r7, #14]
     3f8:	7bbb      	ldrb	r3, [r7, #14]
     3fa:	2b02      	cmp	r3, #2
     3fc:	d86d      	bhi.n	4da <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
     3fe:	7bbb      	ldrb	r3, [r7, #14]
     400:	f1c3 0402 	rsb	r4, r3, #2
     404:	4b3c      	ldr	r3, [pc, #240]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     406:	6838      	ldr	r0, [r7, #0]
     408:	4798      	blx	r3
     40a:	4680      	mov	r8, r0
     40c:	4689      	mov	r9, r1
     40e:	7bbb      	ldrb	r3, [r7, #14]
     410:	f1c3 0302 	rsb	r3, r3, #2
     414:	4619      	mov	r1, r3
     416:	200a      	movs	r0, #10
     418:	4b38      	ldr	r3, [pc, #224]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     41a:	4798      	blx	r3
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4d37      	ldr	r5, [pc, #220]	; (500 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
     422:	4640      	mov	r0, r8
     424:	4649      	mov	r1, r9
     426:	47a8      	blx	r5
     428:	4602      	mov	r2, r0
     42a:	460b      	mov	r3, r1
     42c:	4611      	mov	r1, r2
     42e:	461a      	mov	r2, r3
     430:	4b34      	ldr	r3, [pc, #208]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     432:	4608      	mov	r0, r1
     434:	4611      	mov	r1, r2
     436:	4798      	blx	r3
     438:	4603      	mov	r3, r0
     43a:	b2da      	uxtb	r2, r3
     43c:	f107 0310 	add.w	r3, r7, #16
     440:	4423      	add	r3, r4
     442:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
     446:	7bbb      	ldrb	r3, [r7, #14]
     448:	f1c3 0302 	rsb	r3, r3, #2
     44c:	f107 0210 	add.w	r2, r7, #16
     450:	4413      	add	r3, r2
     452:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     456:	461a      	mov	r2, r3
     458:	4b2b      	ldr	r3, [pc, #172]	; (508 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
     45a:	4610      	mov	r0, r2
     45c:	4798      	blx	r3
     45e:	4605      	mov	r5, r0
     460:	460e      	mov	r6, r1
     462:	7bbb      	ldrb	r3, [r7, #14]
     464:	f1c3 0302 	rsb	r3, r3, #2
     468:	4619      	mov	r1, r3
     46a:	200a      	movs	r0, #10
     46c:	4b23      	ldr	r3, [pc, #140]	; (4fc <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
     46e:	4798      	blx	r3
     470:	4602      	mov	r2, r0
     472:	460b      	mov	r3, r1
     474:	4c25      	ldr	r4, [pc, #148]	; (50c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
     476:	4628      	mov	r0, r5
     478:	4631      	mov	r1, r6
     47a:	47a0      	blx	r4
     47c:	4603      	mov	r3, r0
     47e:	460c      	mov	r4, r1
     480:	461d      	mov	r5, r3
     482:	4626      	mov	r6, r4
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
     486:	6838      	ldr	r0, [r7, #0]
     488:	4798      	blx	r3
     48a:	4c21      	ldr	r4, [pc, #132]	; (510 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
     48c:	462a      	mov	r2, r5
     48e:	4633      	mov	r3, r6
     490:	47a0      	blx	r4
     492:	4603      	mov	r3, r0
     494:	460c      	mov	r4, r1
     496:	4619      	mov	r1, r3
     498:	4622      	mov	r2, r4
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
     49c:	4608      	mov	r0, r1
     49e:	4611      	mov	r1, r2
     4a0:	4798      	blx	r3
     4a2:	4603      	mov	r3, r0
     4a4:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
     4a6:	7bbb      	ldrb	r3, [r7, #14]
     4a8:	f1c3 0302 	rsb	r3, r3, #2
     4ac:	f107 0210 	add.w	r2, r7, #16
     4b0:	4413      	add	r3, r2
     4b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
     4b6:	461a      	mov	r2, r3
     4b8:	7bbb      	ldrb	r3, [r7, #14]
     4ba:	4619      	mov	r1, r3
     4bc:	009b      	lsls	r3, r3, #2
     4be:	1acb      	subs	r3, r1, r3
     4c0:	3306      	adds	r3, #6
     4c2:	fa02 f303 	lsl.w	r3, r2, r3
     4c6:	b25a      	sxtb	r2, r3
     4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
     4cc:	4313      	orrs	r3, r2
     4ce:	b25b      	sxtb	r3, r3
     4d0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
     4d2:	7bbb      	ldrb	r3, [r7, #14]
     4d4:	3301      	adds	r3, #1
     4d6:	73bb      	strb	r3, [r7, #14]
     4d8:	e78e      	b.n	3f8 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
     4da:	687b      	ldr	r3, [r7, #4]
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	7bfa      	ldrb	r2, [r7, #15]
     4e2:	4611      	mov	r1, r2
     4e4:	6878      	ldr	r0, [r7, #4]
     4e6:	4798      	blx	r3
     4e8:	4603      	mov	r3, r0
     4ea:	73fb      	strb	r3, [r7, #15]
	return result;
     4ec:	7bfb      	ldrb	r3, [r7, #15]
	
}
     4ee:	4618      	mov	r0, r3
     4f0:	3714      	adds	r7, #20
     4f2:	46bd      	mov	sp, r7
     4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4f8:	00010cf1 	.word	0x00010cf1
     4fc:	000003a9 	.word	0x000003a9
     500:	00011031 	.word	0x00011031
     504:	0001133d 	.word	0x0001133d
     508:	00010d11 	.word	0x00010d11
     50c:	00010ddd 	.word	0x00010ddd
     510:	00010a75 	.word	0x00010a75

00000514 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
     514:	b480      	push	{r7}
     516:	b085      	sub	sp, #20
     518:	af00      	add	r7, sp, #0
     51a:	6078      	str	r0, [r7, #4]
     51c:	460b      	mov	r3, r1
     51e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
     520:	2300      	movs	r3, #0
     522:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     524:	2300      	movs	r3, #0
     526:	60bb      	str	r3, [r7, #8]
     528:	68bb      	ldr	r3, [r7, #8]
     52a:	2b07      	cmp	r3, #7
     52c:	dc13      	bgt.n	556 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
     52e:	7bfb      	ldrb	r3, [r7, #15]
     530:	005b      	lsls	r3, r3, #1
     532:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
     534:	78fa      	ldrb	r2, [r7, #3]
     536:	68bb      	ldr	r3, [r7, #8]
     538:	fa42 f303 	asr.w	r3, r2, r3
     53c:	b25b      	sxtb	r3, r3
     53e:	f003 0301 	and.w	r3, r3, #1
     542:	b25a      	sxtb	r2, r3
     544:	f997 300f 	ldrsb.w	r3, [r7, #15]
     548:	4313      	orrs	r3, r2
     54a:	b25b      	sxtb	r3, r3
     54c:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
     54e:	68bb      	ldr	r3, [r7, #8]
     550:	3301      	adds	r3, #1
     552:	60bb      	str	r3, [r7, #8]
     554:	e7e8      	b.n	528 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
     556:	7bfb      	ldrb	r3, [r7, #15]
}
     558:	4618      	mov	r0, r3
     55a:	3714      	adds	r7, #20
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr

00000562 <_ZN14Protocol_ClassC2Ev>:
		{
				ch=0xff;
			usb.println("Command I: Increment data\n\r>");
			BigCounter.Word32++;
			TXBuffer[0] = BigCounter.PayLoad[1];
			TXBuffer[1] = BigCounter.PayLoad[2];
     562:	b480      	push	{r7}
     564:	b083      	sub	sp, #12
			TXBuffer[2] = BigCounter.PayLoad[3];
     566:	af00      	add	r7, sp, #0
     568:	6078      	str	r0, [r7, #4]
     56a:	6039      	str	r1, [r7, #0]
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	681a      	ldr	r2, [r3, #0]
			TXBuffer[3] = BigCounter.PayLoad[3];               // copy the LSB to the label for testing purposes
     570:	687b      	ldr	r3, [r7, #4]
     572:	601a      	str	r2, [r3, #0]
     574:	687b      	ldr	r3, [r7, #4]
     576:	681b      	ldr	r3, [r3, #0]
     578:	3b0c      	subs	r3, #12
			
			cpu_irq_disable();
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	461a      	mov	r2, r3
     57e:	687b      	ldr	r3, [r7, #4]
			HI3593.TransmitCommandAndData(TXFIFO,TXBuffer);
     580:	4413      	add	r3, r2
     582:	683a      	ldr	r2, [r7, #0]
     584:	6852      	ldr	r2, [r2, #4]
     586:	601a      	str	r2, [r3, #0]
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4618      	mov	r0, r3
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	bc80      	pop	{r7}
			cpu_irq_enable();
     592:	4770      	bx	lr

00000594 <_ZN15ARINC_InterfaceC1Ev>:
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
			printARINCTXData(TXBuffer);                        // print the TX data written to the TXFIFO
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
     5a2:	4618      	mov	r0, r3
			//PORTT= ~TXBuffer[3];                               // show the transmitted upper nibble of the LSB
		}
		
		
		FetchAllMessagesAndDisplay(RXBuffer,RXBufferPL);   // Fetch all Normal and Priority Messages into                                            // the arrays via buffer pointers
     5a4:	4b0e      	ldr	r3, [pc, #56]	; (5e0 <_ZN15ARINC_InterfaceC1Ev+0x4c>)
     5a6:	4798      	blx	r3
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	4a0e      	ldr	r2, [pc, #56]	; (5e4 <_ZN15ARINC_InterfaceC1Ev+0x50>)
     5ac:	4611      	mov	r1, r2
     5ae:	4618      	mov	r0, r3
     5b0:	4b0d      	ldr	r3, [pc, #52]	; (5e8 <_ZN15ARINC_InterfaceC1Ev+0x54>)
     5b2:	4798      	blx	r3
     5b4:	4a0d      	ldr	r2, [pc, #52]	; (5ec <_ZN15ARINC_InterfaceC1Ev+0x58>)
     5b6:	687b      	ldr	r3, [r7, #4]
		
		if (newMessageR1)
     5b8:	601a      	str	r2, [r3, #0]
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
     5c0:	4a0b      	ldr	r2, [pc, #44]	; (5f0 <_ZN15ARINC_InterfaceC1Ev+0x5c>)
     5c2:	601a      	str	r2, [r3, #0]
		{
			reading=ReadArincBuffer();
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
     5ca:	4618      	mov	r0, r3
			newMessageR1=false;
     5cc:	4b09      	ldr	r3, [pc, #36]	; (5f4 <_ZN15ARINC_InterfaceC1Ev+0x60>)
     5ce:	4798      	blx	r3
     5d0:	4a09      	ldr	r2, [pc, #36]	; (5f8 <_ZN15ARINC_InterfaceC1Ev+0x64>)
		}
	}
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	6013      	str	r3, [r2, #0]
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	4618      	mov	r0, r3
     5da:	3708      	adds	r7, #8
     5dc:	46bd      	mov	sp, r7
     5de:	bd80      	pop	{r7, pc}
     5e0:	00000369 	.word	0x00000369
     5e4:	000122c4 	.word	0x000122c4
     5e8:	00000563 	.word	0x00000563
     5ec:	0001229c 	.word	0x0001229c
     5f0:	000122b8 	.word	0x000122b8
     5f4:	00000745 	.word	0x00000745
     5f8:	200005a0 	.word	0x200005a0

000005fc <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
     5fc:	b580      	push	{r7, lr}
     5fe:	b082      	sub	sp, #8
     600:	af00      	add	r7, sp, #0
     602:	6078      	str	r0, [r7, #4]
     604:	4a0f      	ldr	r2, [pc, #60]	; (644 <_ZN15ARINC_InterfaceD1Ev+0x48>)
     606:	687b      	ldr	r3, [r7, #4]
     608:	601a      	str	r2, [r3, #0]
     60a:	687b      	ldr	r3, [r7, #4]
     60c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
     610:	4a0d      	ldr	r2, [pc, #52]	; (648 <_ZN15ARINC_InterfaceD1Ev+0x4c>)
     612:	601a      	str	r2, [r3, #0]
     614:	687b      	ldr	r3, [r7, #4]
     616:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
     61a:	4618      	mov	r0, r3
     61c:	4b0b      	ldr	r3, [pc, #44]	; (64c <_ZN15ARINC_InterfaceD1Ev+0x50>)
     61e:	4798      	blx	r3
     620:	687b      	ldr	r3, [r7, #4]
     622:	4a0b      	ldr	r2, [pc, #44]	; (650 <_ZN15ARINC_InterfaceD1Ev+0x54>)
     624:	4611      	mov	r1, r2
     626:	4618      	mov	r0, r3
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <_ZN15ARINC_InterfaceD1Ev+0x58>)
     62a:	4798      	blx	r3
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
     632:	4618      	mov	r0, r3
     634:	4b08      	ldr	r3, [pc, #32]	; (658 <_ZN15ARINC_InterfaceD1Ev+0x5c>)
     636:	4798      	blx	r3
} //~ARINC_Interface
     638:	687b      	ldr	r3, [r7, #4]
     63a:	4618      	mov	r0, r3
     63c:	3708      	adds	r7, #8
     63e:	46bd      	mov	sp, r7
     640:	bd80      	pop	{r7, pc}
     642:	bf00      	nop
     644:	0001229c 	.word	0x0001229c
     648:	000122b8 	.word	0x000122b8
     64c:	00000765 	.word	0x00000765
     650:	000122c4 	.word	0x000122c4
     654:	00000785 	.word	0x00000785
     658:	00000389 	.word	0x00000389

0000065c <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
     65c:	b580      	push	{r7, lr}
     65e:	b082      	sub	sp, #8
     660:	af00      	add	r7, sp, #0
     662:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
     664:	6878      	ldr	r0, [r7, #4]
     666:	4b06      	ldr	r3, [pc, #24]	; (680 <_ZN15ARINC_InterfaceD0Ev+0x24>)
     668:	4798      	blx	r3
     66a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
     66e:	6878      	ldr	r0, [r7, #4]
     670:	4b04      	ldr	r3, [pc, #16]	; (684 <_ZN15ARINC_InterfaceD0Ev+0x28>)
     672:	4798      	blx	r3
     674:	687b      	ldr	r3, [r7, #4]
     676:	4618      	mov	r0, r3
     678:	3708      	adds	r7, #8
     67a:	46bd      	mov	sp, r7
     67c:	bd80      	pop	{r7, pc}
     67e:	bf00      	nop
     680:	000005fd 	.word	0x000005fd
     684:	0000f921 	.word	0x0000f921

00000688 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
     688:	b480      	push	{r7}
     68a:	b085      	sub	sp, #20
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
     690:	460b      	mov	r3, r1
     692:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     694:	2300      	movs	r3, #0
     696:	73fb      	strb	r3, [r7, #15]
     698:	7bfb      	ldrb	r3, [r7, #15]
     69a:	2b3f      	cmp	r3, #63	; 0x3f
     69c:	dc1e      	bgt.n	6dc <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
     6a4:	7bfb      	ldrb	r3, [r7, #15]
     6a6:	4413      	add	r3, r2
     6a8:	b2db      	uxtb	r3, r3
     6aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6ae:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
     6b0:	7bbb      	ldrb	r3, [r7, #14]
     6b2:	687a      	ldr	r2, [r7, #4]
     6b4:	009b      	lsls	r3, r3, #2
     6b6:	4413      	add	r3, r2
     6b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
     6bc:	78fa      	ldrb	r2, [r7, #3]
     6be:	429a      	cmp	r2, r3
     6c0:	d108      	bne.n	6d4 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
			data=(uint32_t*)receiverBuffer[j];
     6c2:	7bbb      	ldrb	r3, [r7, #14]
     6c4:	3310      	adds	r3, #16
     6c6:	009b      	lsls	r3, r3, #2
     6c8:	687a      	ldr	r2, [r7, #4]
     6ca:	4413      	add	r3, r2
     6cc:	60bb      	str	r3, [r7, #8]
			return *data;
     6ce:	68bb      	ldr	r3, [r7, #8]
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	e004      	b.n	6de <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
     6d4:	7bfb      	ldrb	r3, [r7, #15]
     6d6:	3301      	adds	r3, #1
     6d8:	73fb      	strb	r3, [r7, #15]
     6da:	e7dd      	b.n	698 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
	return 0;
     6dc:	2300      	movs	r3, #0
}
     6de:	4618      	mov	r0, r3
     6e0:	3714      	adds	r7, #20
     6e2:	46bd      	mov	sp, r7
     6e4:	bc80      	pop	{r7}
     6e6:	4770      	bx	lr

000006e8 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

     6e8:	b580      	push	{r7, lr}
     6ea:	b082      	sub	sp, #8
     6ec:	af00      	add	r7, sp, #0
     6ee:	6078      	str	r0, [r7, #4]
     6f0:	6039      	str	r1, [r7, #0]
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	2b01      	cmp	r3, #1
     6f6:	d10c      	bne.n	712 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     6f8:	683b      	ldr	r3, [r7, #0]
     6fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
     6fe:	4293      	cmp	r3, r2
     700:	d107      	bne.n	712 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     702:	4806      	ldr	r0, [pc, #24]	; (71c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     704:	4b06      	ldr	r3, [pc, #24]	; (720 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     706:	4798      	blx	r3
     708:	4a06      	ldr	r2, [pc, #24]	; (724 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     70a:	4907      	ldr	r1, [pc, #28]	; (728 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     70c:	4803      	ldr	r0, [pc, #12]	; (71c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     70e:	4b07      	ldr	r3, [pc, #28]	; (72c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     710:	4798      	blx	r3
     712:	bf00      	nop
     714:	3708      	adds	r7, #8
     716:	46bd      	mov	sp, r7
     718:	bd80      	pop	{r7, pc}
     71a:	bf00      	nop
     71c:	200005a4 	.word	0x200005a4
     720:	00000595 	.word	0x00000595
     724:	20000000 	.word	0x20000000
     728:	000005fd 	.word	0x000005fd
     72c:	0000f915 	.word	0x0000f915

00000730 <_GLOBAL__sub_I_HexSymbols>:
     730:	b580      	push	{r7, lr}
     732:	af00      	add	r7, sp, #0
     734:	f64f 71ff 	movw	r1, #65535	; 0xffff
     738:	2001      	movs	r0, #1
     73a:	4b01      	ldr	r3, [pc, #4]	; (740 <_GLOBAL__sub_I_HexSymbols+0x10>)
     73c:	4798      	blx	r3
     73e:	bd80      	pop	{r7, pc}
     740:	000006e9 	.word	0x000006e9

00000744 <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
     744:	b580      	push	{r7, lr}
     746:	b082      	sub	sp, #8
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	4618      	mov	r0, r3
     750:	4b03      	ldr	r3, [pc, #12]	; (760 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
     752:	4798      	blx	r3
{
} //Holt_3593_Class
     754:	687b      	ldr	r3, [r7, #4]
     756:	4618      	mov	r0, r3
     758:	3708      	adds	r7, #8
     75a:	46bd      	mov	sp, r7
     75c:	bd80      	pop	{r7, pc}
     75e:	bf00      	nop
     760:	000011a1 	.word	0x000011a1

00000764 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
     764:	b580      	push	{r7, lr}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	4618      	mov	r0, r3
     770:	4b03      	ldr	r3, [pc, #12]	; (780 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
     772:	4798      	blx	r3
{
} //~Holt_3593_Class
     774:	687b      	ldr	r3, [r7, #4]
     776:	4618      	mov	r0, r3
     778:	3708      	adds	r7, #8
     77a:	46bd      	mov	sp, r7
     77c:	bd80      	pop	{r7, pc}
     77e:	bf00      	nop
     780:	000011c1 	.word	0x000011c1

00000784 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
     784:	b480      	push	{r7}
     786:	b083      	sub	sp, #12
     788:	af00      	add	r7, sp, #0
     78a:	6078      	str	r0, [r7, #4]
     78c:	6039      	str	r1, [r7, #0]
     78e:	683b      	ldr	r3, [r7, #0]
     790:	681a      	ldr	r2, [r3, #0]
     792:	687b      	ldr	r3, [r7, #4]
     794:	601a      	str	r2, [r3, #0]
     796:	687b      	ldr	r3, [r7, #4]
     798:	681b      	ldr	r3, [r3, #0]
     79a:	3b0c      	subs	r3, #12
     79c:	681b      	ldr	r3, [r3, #0]
     79e:	461a      	mov	r2, r3
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	4413      	add	r3, r2
     7a4:	683a      	ldr	r2, [r7, #0]
     7a6:	6852      	ldr	r2, [r2, #4]
     7a8:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	4618      	mov	r0, r3
     7ae:	370c      	adds	r7, #12
     7b0:	46bd      	mov	sp, r7
     7b2:	bc80      	pop	{r7}
     7b4:	4770      	bx	lr
	...

000007b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     7b8:	b580      	push	{r7, lr}
     7ba:	b082      	sub	sp, #8
     7bc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     7be:	4b16      	ldr	r3, [pc, #88]	; (818 <Reset_Handler+0x60>)
     7c0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     7c2:	4b16      	ldr	r3, [pc, #88]	; (81c <Reset_Handler+0x64>)
     7c4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     7c6:	687a      	ldr	r2, [r7, #4]
     7c8:	683b      	ldr	r3, [r7, #0]
     7ca:	429a      	cmp	r2, r3
     7cc:	d00c      	beq.n	7e8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     7ce:	e007      	b.n	7e0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	1d1a      	adds	r2, r3, #4
     7d4:	603a      	str	r2, [r7, #0]
     7d6:	687a      	ldr	r2, [r7, #4]
     7d8:	1d11      	adds	r1, r2, #4
     7da:	6079      	str	r1, [r7, #4]
     7dc:	6812      	ldr	r2, [r2, #0]
     7de:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     7e0:	683b      	ldr	r3, [r7, #0]
     7e2:	4a0f      	ldr	r2, [pc, #60]	; (820 <Reset_Handler+0x68>)
     7e4:	4293      	cmp	r3, r2
     7e6:	d3f3      	bcc.n	7d0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7e8:	4b0e      	ldr	r3, [pc, #56]	; (824 <Reset_Handler+0x6c>)
     7ea:	603b      	str	r3, [r7, #0]
     7ec:	e004      	b.n	7f8 <Reset_Handler+0x40>
                *pDest++ = 0;
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	1d1a      	adds	r2, r3, #4
     7f2:	603a      	str	r2, [r7, #0]
     7f4:	2200      	movs	r2, #0
     7f6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     7f8:	683b      	ldr	r3, [r7, #0]
     7fa:	4a0b      	ldr	r2, [pc, #44]	; (828 <Reset_Handler+0x70>)
     7fc:	4293      	cmp	r3, r2
     7fe:	d3f6      	bcc.n	7ee <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <Reset_Handler+0x74>)
     802:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     804:	4a0a      	ldr	r2, [pc, #40]	; (830 <Reset_Handler+0x78>)
     806:	687b      	ldr	r3, [r7, #4]
     808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     80c:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     80e:	4b09      	ldr	r3, [pc, #36]	; (834 <Reset_Handler+0x7c>)
     810:	4798      	blx	r3

        /* Branch to main function */
        main();
     812:	4b09      	ldr	r3, [pc, #36]	; (838 <Reset_Handler+0x80>)
     814:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     816:	e7fe      	b.n	816 <Reset_Handler+0x5e>
     818:	00012a3c 	.word	0x00012a3c
     81c:	20000000 	.word	0x20000000
     820:	20000574 	.word	0x20000574
     824:	20000578 	.word	0x20000578
     828:	200028c8 	.word	0x200028c8
     82c:	00000000 	.word	0x00000000
     830:	e000ed00 	.word	0xe000ed00
     834:	000113b1 	.word	0x000113b1
     838:	00000e61 	.word	0x00000e61

0000083c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     83c:	b480      	push	{r7}
     83e:	af00      	add	r7, sp, #0
        while (1) {
     840:	e7fe      	b.n	840 <Dummy_Handler+0x4>

00000842 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
     842:	b480      	push	{r7}
     844:	b083      	sub	sp, #12
     846:	af00      	add	r7, sp, #0
     848:	6078      	str	r0, [r7, #4]
    return (void *)0;
     84a:	2300      	movs	r3, #0
	}
     84c:	4618      	mov	r0, r3
     84e:	370c      	adds	r7, #12
     850:	46bd      	mov	sp, r7
     852:	bc80      	pop	{r7}
     854:	4770      	bx	lr

00000856 <free>:
//............................................................................
extern "C" void free(void *)
	{
     856:	b480      	push	{r7}
     858:	b083      	sub	sp, #12
     85a:	af00      	add	r7, sp, #0
     85c:	6078      	str	r0, [r7, #4]
	}
     85e:	bf00      	nop
     860:	370c      	adds	r7, #12
     862:	46bd      	mov	sp, r7
     864:	bc80      	pop	{r7}
     866:	4770      	bx	lr

00000868 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
     868:	b480      	push	{r7}
     86a:	af00      	add	r7, sp, #0
		}
     86c:	bf00      	nop
     86e:	46bd      	mov	sp, r7
     870:	bc80      	pop	{r7}
     872:	4770      	bx	lr

00000874 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
	free(p);
     87c:	6878      	ldr	r0, [r7, #4]
     87e:	4b03      	ldr	r3, [pc, #12]	; (88c <_ZdlPv+0x18>)
     880:	4798      	blx	r3
	}
     882:	bf00      	nop
     884:	3708      	adds	r7, #8
     886:	46bd      	mov	sp, r7
     888:	bd80      	pop	{r7, pc}
     88a:	bf00      	nop
     88c:	00000857 	.word	0x00000857

00000890 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
     890:	b480      	push	{r7}
     892:	b083      	sub	sp, #12
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
     898:	687b      	ldr	r3, [r7, #4]
     89a:	4618      	mov	r0, r3
     89c:	370c      	adds	r7, #12
     89e:	46bd      	mov	sp, r7
     8a0:	bc80      	pop	{r7}
     8a2:	4770      	bx	lr

000008a4 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
     8a4:	b480      	push	{r7}
     8a6:	b083      	sub	sp, #12
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	4618      	mov	r0, r3
     8b0:	370c      	adds	r7, #12
     8b2:	46bd      	mov	sp, r7
     8b4:	bc80      	pop	{r7}
     8b6:	4770      	bx	lr

000008b8 <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
     8b8:	b580      	push	{r7, lr}
     8ba:	b082      	sub	sp, #8
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	2b01      	cmp	r3, #1
     8c6:	d10c      	bne.n	8e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8c8:	683b      	ldr	r3, [r7, #0]
     8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
     8ce:	4293      	cmp	r3, r2
     8d0:	d107      	bne.n	8e2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8d2:	4806      	ldr	r0, [pc, #24]	; (8ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8d4:	4b06      	ldr	r3, [pc, #24]	; (8f0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     8d6:	4798      	blx	r3
     8d8:	4a06      	ldr	r2, [pc, #24]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     8da:	4907      	ldr	r1, [pc, #28]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     8dc:	4803      	ldr	r0, [pc, #12]	; (8ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8de:	4b07      	ldr	r3, [pc, #28]	; (8fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
     8e0:	4798      	blx	r3
     8e2:	bf00      	nop
     8e4:	3708      	adds	r7, #8
     8e6:	46bd      	mov	sp, r7
     8e8:	bd80      	pop	{r7, pc}
     8ea:	bf00      	nop
     8ec:	20000890 	.word	0x20000890
     8f0:	00000891 	.word	0x00000891
     8f4:	20000000 	.word	0x20000000
     8f8:	000008a5 	.word	0x000008a5
     8fc:	0000f915 	.word	0x0000f915

00000900 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
     900:	b580      	push	{r7, lr}
     902:	af00      	add	r7, sp, #0
     904:	f64f 71ff 	movw	r1, #65535	; 0xffff
     908:	2001      	movs	r0, #1
     90a:	4b01      	ldr	r3, [pc, #4]	; (910 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
     90c:	4798      	blx	r3
     90e:	bd80      	pop	{r7, pc}
     910:	000008b9 	.word	0x000008b9

00000914 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     914:	b480      	push	{r7}
     916:	b083      	sub	sp, #12
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
     91c:	6039      	str	r1, [r7, #0]
	{
	data = v;
     91e:	687b      	ldr	r3, [r7, #4]
     920:	683a      	ldr	r2, [r7, #0]
     922:	601a      	str	r2, [r3, #0]
	}
     924:	687b      	ldr	r3, [r7, #4]
     926:	4618      	mov	r0, r3
     928:	370c      	adds	r7, #12
     92a:	46bd      	mov	sp, r7
     92c:	bc80      	pop	{r7}
     92e:	4770      	bx	lr

00000930 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
     930:	b580      	push	{r7, lr}
     932:	b082      	sub	sp, #8
     934:	af00      	add	r7, sp, #0
     936:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     938:	687b      	ldr	r3, [r7, #4]
     93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     93e:	801a      	strh	r2, [r3, #0]
     940:	687b      	ldr	r3, [r7, #4]
     942:	f64f 72ff 	movw	r2, #65535	; 0xffff
     946:	805a      	strh	r2, [r3, #2]
     948:	687b      	ldr	r3, [r7, #4]
     94a:	2200      	movs	r2, #0
     94c:	605a      	str	r2, [r3, #4]
     94e:	687b      	ldr	r3, [r7, #4]
     950:	3308      	adds	r3, #8
     952:	2100      	movs	r1, #0
     954:	4618      	mov	r0, r3
     956:	4b05      	ldr	r3, [pc, #20]	; (96c <_ZN5eventC1Ev+0x3c>)
     958:	4798      	blx	r3
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	2200      	movs	r2, #0
     95e:	60da      	str	r2, [r3, #12]
	{
	}
     960:	687b      	ldr	r3, [r7, #4]
     962:	4618      	mov	r0, r3
     964:	3708      	adds	r7, #8
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop
     96c:	00000915 	.word	0x00000915

00000970 <_ZN18EventHandler_ClassC1Ev>:
	ptrEventHandlerClass->eventTimeout=true;
}


// default constructor
EventHandler_Class::EventHandler_Class()
     970:	b480      	push	{r7}
     972:	b083      	sub	sp, #12
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     978:	4a04      	ldr	r2, [pc, #16]	; (98c <_ZN18EventHandler_ClassC1Ev+0x1c>)
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
     97e:	687b      	ldr	r3, [r7, #4]
     980:	4618      	mov	r0, r3
     982:	370c      	adds	r7, #12
     984:	46bd      	mov	sp, r7
     986:	bc80      	pop	{r7}
     988:	4770      	bx	lr
     98a:	bf00      	nop
     98c:	2000189c 	.word	0x2000189c

00000990 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
     990:	b480      	push	{r7}
     992:	b083      	sub	sp, #12
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
     998:	4a04      	ldr	r2, [pc, #16]	; (9ac <_ZN18EventHandler_ClassD1Ev+0x1c>)
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4618      	mov	r0, r3
     9a2:	370c      	adds	r7, #12
     9a4:	46bd      	mov	sp, r7
     9a6:	bc80      	pop	{r7}
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	2000189c 	.word	0x2000189c

000009b0 <_Z41__static_initialization_and_destruction_0ii>:
	return	(uint32_t)eventsInUse;
	
}


     9b0:	b5b0      	push	{r4, r5, r7, lr}
     9b2:	b082      	sub	sp, #8
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
     9b8:	6039      	str	r1, [r7, #0]
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	2b01      	cmp	r3, #1
     9be:	d117      	bne.n	9f0 <_Z41__static_initialization_and_destruction_0ii+0x40>
     9c0:	683b      	ldr	r3, [r7, #0]
     9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     9c6:	4293      	cmp	r3, r2
     9c8:	d112      	bne.n	9f0 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
     9ca:	4b0b      	ldr	r3, [pc, #44]	; (9f8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     9cc:	24ff      	movs	r4, #255	; 0xff
     9ce:	461d      	mov	r5, r3
     9d0:	2c00      	cmp	r4, #0
     9d2:	db05      	blt.n	9e0 <_Z41__static_initialization_and_destruction_0ii+0x30>
     9d4:	4628      	mov	r0, r5
     9d6:	4b09      	ldr	r3, [pc, #36]	; (9fc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     9d8:	4798      	blx	r3
     9da:	3510      	adds	r5, #16
     9dc:	3c01      	subs	r4, #1
     9de:	e7f7      	b.n	9d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
     9e0:	4807      	ldr	r0, [pc, #28]	; (a00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9e2:	4b08      	ldr	r3, [pc, #32]	; (a04 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     9e4:	4798      	blx	r3
     9e6:	4a08      	ldr	r2, [pc, #32]	; (a08 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     9e8:	4908      	ldr	r1, [pc, #32]	; (a0c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     9ea:	4805      	ldr	r0, [pc, #20]	; (a00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     9ec:	4b08      	ldr	r3, [pc, #32]	; (a10 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     9ee:	4798      	blx	r3
     9f0:	bf00      	nop
     9f2:	3708      	adds	r7, #8
     9f4:	46bd      	mov	sp, r7
     9f6:	bdb0      	pop	{r4, r5, r7, pc}
     9f8:	20000894 	.word	0x20000894
     9fc:	00000931 	.word	0x00000931
     a00:	200018ac 	.word	0x200018ac
     a04:	00000971 	.word	0x00000971
     a08:	20000000 	.word	0x20000000
     a0c:	00000991 	.word	0x00000991
     a10:	0000f915 	.word	0x0000f915

00000a14 <_GLOBAL__sub_I_maxEventCount>:
     a14:	b580      	push	{r7, lr}
     a16:	af00      	add	r7, sp, #0
     a18:	f64f 71ff 	movw	r1, #65535	; 0xffff
     a1c:	2001      	movs	r0, #1
     a1e:	4b01      	ldr	r3, [pc, #4]	; (a24 <_GLOBAL__sub_I_maxEventCount+0x10>)
     a20:	4798      	blx	r3
     a22:	bd80      	pop	{r7, pc}
     a24:	000009b1 	.word	0x000009b1

00000a28 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
     a28:	b480      	push	{r7}
     a2a:	b083      	sub	sp, #12
     a2c:	af00      	add	r7, sp, #0
     a2e:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
     a30:	4b04      	ldr	r3, [pc, #16]	; (a44 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	2201      	movs	r2, #1
     a36:	701a      	strb	r2, [r3, #0]

}
     a38:	bf00      	nop
     a3a:	370c      	adds	r7, #12
     a3c:	46bd      	mov	sp, r7
     a3e:	bc80      	pop	{r7}
     a40:	4770      	bx	lr
     a42:	bf00      	nop
     a44:	200018c8 	.word	0x200018c8

00000a48 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
     a48:	b480      	push	{r7}
     a4a:	b083      	sub	sp, #12
     a4c:	af00      	add	r7, sp, #0
     a4e:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
     a50:	4b04      	ldr	r3, [pc, #16]	; (a64 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	2201      	movs	r2, #1
     a56:	705a      	strb	r2, [r3, #1]
}
     a58:	bf00      	nop
     a5a:	370c      	adds	r7, #12
     a5c:	46bd      	mov	sp, r7
     a5e:	bc80      	pop	{r7}
     a60:	4770      	bx	lr
     a62:	bf00      	nop
     a64:	200018c8 	.word	0x200018c8

00000a68 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
     a68:	b580      	push	{r7, lr}
     a6a:	b082      	sub	sp, #8
     a6c:	af00      	add	r7, sp, #0
     a6e:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
     a70:	4b08      	ldr	r3, [pc, #32]	; (a94 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a72:	681b      	ldr	r3, [r3, #0]
     a74:	4618      	mov	r0, r3
     a76:	4b08      	ldr	r3, [pc, #32]	; (a98 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
     a78:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
     a7a:	4b06      	ldr	r3, [pc, #24]	; (a94 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	2201      	movs	r2, #1
     a80:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
     a82:	4b04      	ldr	r3, [pc, #16]	; (a94 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	2201      	movs	r2, #1
     a88:	705a      	strb	r2, [r3, #1]
 }
     a8a:	bf00      	nop
     a8c:	3708      	adds	r7, #8
     a8e:	46bd      	mov	sp, r7
     a90:	bd80      	pop	{r7, pc}
     a92:	bf00      	nop
     a94:	200018c8 	.word	0x200018c8
     a98:	00000c4d 	.word	0x00000c4d

00000a9c <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
     a9c:	b480      	push	{r7}
     a9e:	b083      	sub	sp, #12
     aa0:	af00      	add	r7, sp, #0
     aa2:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	4a05      	ldr	r2, [pc, #20]	; (abc <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
     aa8:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
     aaa:	4a05      	ldr	r2, [pc, #20]	; (ac0 <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	4618      	mov	r0, r3
     ab4:	370c      	adds	r7, #12
     ab6:	46bd      	mov	sp, r7
     ab8:	bc80      	pop	{r7}
     aba:	4770      	bx	lr
     abc:	2000274c 	.word	0x2000274c
     ac0:	200018c8 	.word	0x200018c8

00000ac4 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
     ac4:	b480      	push	{r7}
     ac6:	b083      	sub	sp, #12
     ac8:	af00      	add	r7, sp, #0
     aca:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	4618      	mov	r0, r3
     ad0:	370c      	adds	r7, #12
     ad2:	46bd      	mov	sp, r7
     ad4:	bc80      	pop	{r7}
     ad6:	4770      	bx	lr

00000ad8 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
     ad8:	b480      	push	{r7}
     ada:	b083      	sub	sp, #12
     adc:	af00      	add	r7, sp, #0
     ade:	6078      	str	r0, [r7, #4]
     ae0:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	683a      	ldr	r2, [r7, #0]
     ae6:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
     ae8:	4a03      	ldr	r2, [pc, #12]	; (af8 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	6013      	str	r3, [r2, #0]
}
     aee:	bf00      	nop
     af0:	370c      	adds	r7, #12
     af2:	46bd      	mov	sp, r7
     af4:	bc80      	pop	{r7}
     af6:	4770      	bx	lr
     af8:	200018c8 	.word	0x200018c8

00000afc <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
     afc:	b580      	push	{r7, lr}
     afe:	b084      	sub	sp, #16
     b00:	af00      	add	r7, sp, #0
     b02:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	689a      	ldr	r2, [r3, #8]
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	3304      	adds	r3, #4
     b0c:	4619      	mov	r1, r3
     b0e:	4610      	mov	r0, r2
     b10:	4b14      	ldr	r3, [pc, #80]	; (b64 <_ZN14I2C_Asyn_Class4InitEv+0x68>)
     b12:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	689b      	ldr	r3, [r3, #8]
     b18:	4618      	mov	r0, r3
     b1a:	4b13      	ldr	r3, [pc, #76]	; (b68 <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
     b1c:	4798      	blx	r3
     b1e:	4603      	mov	r3, r0
     b20:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	689b      	ldr	r3, [r3, #8]
     b26:	4a11      	ldr	r2, [pc, #68]	; (b6c <_ZN14I2C_Asyn_Class4InitEv+0x70>)
     b28:	2101      	movs	r1, #1
     b2a:	4618      	mov	r0, r3
     b2c:	4b10      	ldr	r3, [pc, #64]	; (b70 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     b2e:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	689b      	ldr	r3, [r3, #8]
     b34:	4a0f      	ldr	r2, [pc, #60]	; (b74 <_ZN14I2C_Asyn_Class4InitEv+0x78>)
     b36:	2102      	movs	r1, #2
     b38:	4618      	mov	r0, r3
     b3a:	4b0d      	ldr	r3, [pc, #52]	; (b70 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     b3c:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	689b      	ldr	r3, [r3, #8]
     b42:	4a0d      	ldr	r2, [pc, #52]	; (b78 <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
     b44:	2100      	movs	r1, #0
     b46:	4618      	mov	r0, r3
     b48:	4b09      	ldr	r3, [pc, #36]	; (b70 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
     b4a:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	2201      	movs	r2, #1
     b50:	701a      	strb	r2, [r3, #0]
	rxReady=true;
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	2201      	movs	r2, #1
     b56:	705a      	strb	r2, [r3, #1]
	return ena;
     b58:	7bfb      	ldrb	r3, [r7, #15]
	
}
     b5a:	4618      	mov	r0, r3
     b5c:	3710      	adds	r7, #16
     b5e:	46bd      	mov	sp, r7
     b60:	bd80      	pop	{r7, pc}
     b62:	bf00      	nop
     b64:	00004963 	.word	0x00004963
     b68:	00004875 	.word	0x00004875
     b6c:	00000a29 	.word	0x00000a29
     b70:	0000491b 	.word	0x0000491b
     b74:	00000a49 	.word	0x00000a49
     b78:	00000a69 	.word	0x00000a69

00000b7c <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
     b7c:	b580      	push	{r7, lr}
     b7e:	b084      	sub	sp, #16
     b80:	af00      	add	r7, sp, #0
     b82:	6078      	str	r0, [r7, #4]
     b84:	460b      	mov	r3, r1
     b86:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
     b88:	6878      	ldr	r0, [r7, #4]
     b8a:	4b0c      	ldr	r3, [pc, #48]	; (bbc <_ZN14I2C_Asyn_Class4InitEh+0x40>)
     b8c:	4798      	blx	r3
     b8e:	4603      	mov	r3, r0
     b90:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	689b      	ldr	r3, [r3, #8]
     b96:	78fa      	ldrb	r2, [r7, #3]
     b98:	b211      	sxth	r1, r2
     b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
     b9e:	4618      	mov	r0, r3
     ba0:	4b07      	ldr	r3, [pc, #28]	; (bc0 <_ZN14I2C_Asyn_Class4InitEh+0x44>)
     ba2:	4798      	blx	r3
	txReady=true;
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	2201      	movs	r2, #1
     ba8:	701a      	strb	r2, [r3, #0]
	rxReady=true;
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	2201      	movs	r2, #1
     bae:	705a      	strb	r2, [r3, #1]
	return ena;
     bb0:	7bfb      	ldrb	r3, [r7, #15]
}
     bb2:	4618      	mov	r0, r3
     bb4:	3710      	adds	r7, #16
     bb6:	46bd      	mov	sp, r7
     bb8:	bd80      	pop	{r7, pc}
     bba:	bf00      	nop
     bbc:	00000afd 	.word	0x00000afd
     bc0:	000048e1 	.word	0x000048e1

00000bc4 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
     bc4:	b580      	push	{r7, lr}
     bc6:	b084      	sub	sp, #16
     bc8:	af00      	add	r7, sp, #0
     bca:	60f8      	str	r0, [r7, #12]
     bcc:	60b9      	str	r1, [r7, #8]
     bce:	4613      	mov	r3, r2
     bd0:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
     bd2:	68fb      	ldr	r3, [r7, #12]
     bd4:	781b      	ldrb	r3, [r3, #0]
     bd6:	b2db      	uxtb	r3, r3
     bd8:	f083 0301 	eor.w	r3, r3, #1
     bdc:	b2db      	uxtb	r3, r3
     bde:	2b00      	cmp	r3, #0
     be0:	d000      	beq.n	be4 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
     be2:	e7f6      	b.n	bd2 <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	2200      	movs	r2, #0
     be8:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
     bea:	68fb      	ldr	r3, [r7, #12]
     bec:	685b      	ldr	r3, [r3, #4]
     bee:	88fa      	ldrh	r2, [r7, #6]
     bf0:	68b9      	ldr	r1, [r7, #8]
     bf2:	4618      	mov	r0, r3
     bf4:	4b03      	ldr	r3, [pc, #12]	; (c04 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
     bf6:	4798      	blx	r3
     bf8:	4603      	mov	r3, r0
}
     bfa:	4618      	mov	r0, r3
     bfc:	3710      	adds	r7, #16
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	bf00      	nop
     c04:	00004985 	.word	0x00004985

00000c08 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
     c08:	b580      	push	{r7, lr}
     c0a:	b084      	sub	sp, #16
     c0c:	af00      	add	r7, sp, #0
     c0e:	60f8      	str	r0, [r7, #12]
     c10:	60b9      	str	r1, [r7, #8]
     c12:	4613      	mov	r3, r2
     c14:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
     c16:	68fb      	ldr	r3, [r7, #12]
     c18:	785b      	ldrb	r3, [r3, #1]
     c1a:	b2db      	uxtb	r3, r3
     c1c:	f083 0301 	eor.w	r3, r3, #1
     c20:	b2db      	uxtb	r3, r3
     c22:	2b00      	cmp	r3, #0
     c24:	d000      	beq.n	c28 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
     c26:	e7f6      	b.n	c16 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	2200      	movs	r2, #0
     c2c:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	685b      	ldr	r3, [r3, #4]
     c32:	88fa      	ldrh	r2, [r7, #6]
     c34:	68b9      	ldr	r1, [r7, #8]
     c36:	4618      	mov	r0, r3
     c38:	4b03      	ldr	r3, [pc, #12]	; (c48 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
     c3a:	4798      	blx	r3
     c3c:	4603      	mov	r3, r0
}
     c3e:	4618      	mov	r0, r3
     c40:	3710      	adds	r7, #16
     c42:	46bd      	mov	sp, r7
     c44:	bd80      	pop	{r7, pc}
     c46:	bf00      	nop
     c48:	000049d5 	.word	0x000049d5

00000c4c <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
     c4c:	b480      	push	{r7}
     c4e:	b083      	sub	sp, #12
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
	 ack=false;
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	2200      	movs	r2, #0
     c58:	709a      	strb	r2, [r3, #2]
	 return ack;
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	789b      	ldrb	r3, [r3, #2]
     c5e:	b2db      	uxtb	r3, r3
     c60:	4618      	mov	r0, r3
     c62:	370c      	adds	r7, #12
     c64:	46bd      	mov	sp, r7
     c66:	bc80      	pop	{r7}
     c68:	4770      	bx	lr
	...

00000c6c <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
     c6c:	b580      	push	{r7, lr}
     c6e:	b082      	sub	sp, #8
     c70:	af00      	add	r7, sp, #0
     c72:	6078      	str	r0, [r7, #4]
     c74:	6039      	str	r1, [r7, #0]
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	3308      	adds	r3, #8
     c7a:	4618      	mov	r0, r3
     c7c:	4b06      	ldr	r3, [pc, #24]	; (c98 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
     c7e:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	683a      	ldr	r2, [r7, #0]
     c84:	605a      	str	r2, [r3, #4]
	ptrMCP23017Class=this;
     c86:	4a05      	ldr	r2, [pc, #20]	; (c9c <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	4618      	mov	r0, r3
     c90:	3708      	adds	r7, #8
     c92:	46bd      	mov	sp, r7
     c94:	bd80      	pop	{r7, pc}
     c96:	bf00      	nop
     c98:	00000a9d 	.word	0x00000a9d
     c9c:	200018cc 	.word	0x200018cc

00000ca0 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
     ca0:	b580      	push	{r7, lr}
     ca2:	b082      	sub	sp, #8
     ca4:	af00      	add	r7, sp, #0
     ca6:	6078      	str	r0, [r7, #4]
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	3308      	adds	r3, #8
     cac:	4618      	mov	r0, r3
     cae:	4b03      	ldr	r3, [pc, #12]	; (cbc <_ZN14MCP23017_ClassD1Ev+0x1c>)
     cb0:	4798      	blx	r3
{
} //~AT24MAC_Class
     cb2:	687b      	ldr	r3, [r7, #4]
     cb4:	4618      	mov	r0, r3
     cb6:	3708      	adds	r7, #8
     cb8:	46bd      	mov	sp, r7
     cba:	bd80      	pop	{r7, pc}
     cbc:	00000ac5 	.word	0x00000ac5

00000cc0 <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
     cc0:	b580      	push	{r7, lr}
     cc2:	b082      	sub	sp, #8
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
     cc8:	6039      	str	r1, [r7, #0]
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	2b01      	cmp	r3, #1
     cce:	d10d      	bne.n	cec <_Z41__static_initialization_and_destruction_0ii+0x2c>
     cd0:	683b      	ldr	r3, [r7, #0]
     cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     cd6:	4293      	cmp	r3, r2
     cd8:	d108      	bne.n	cec <_Z41__static_initialization_and_destruction_0ii+0x2c>
     cda:	4906      	ldr	r1, [pc, #24]	; (cf4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     cdc:	4806      	ldr	r0, [pc, #24]	; (cf8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     cde:	4b07      	ldr	r3, [pc, #28]	; (cfc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     ce0:	4798      	blx	r3
     ce2:	4a07      	ldr	r2, [pc, #28]	; (d00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     ce4:	4907      	ldr	r1, [pc, #28]	; (d04 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     ce6:	4804      	ldr	r0, [pc, #16]	; (cf8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     ce8:	4b07      	ldr	r3, [pc, #28]	; (d08 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     cea:	4798      	blx	r3
     cec:	bf00      	nop
     cee:	3708      	adds	r7, #8
     cf0:	46bd      	mov	sp, r7
     cf2:	bd80      	pop	{r7, pc}
     cf4:	2000274c 	.word	0x2000274c
     cf8:	200018d0 	.word	0x200018d0
     cfc:	00000c6d 	.word	0x00000c6d
     d00:	20000000 	.word	0x20000000
     d04:	00000ca1 	.word	0x00000ca1
     d08:	0000f915 	.word	0x0000f915

00000d0c <_GLOBAL__sub_I_ptrMCP23017Class>:
     d0c:	b580      	push	{r7, lr}
     d0e:	af00      	add	r7, sp, #0
     d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d14:	2001      	movs	r0, #1
     d16:	4b01      	ldr	r3, [pc, #4]	; (d1c <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
     d18:	4798      	blx	r3
     d1a:	bd80      	pop	{r7, pc}
     d1c:	00000cc1 	.word	0x00000cc1

00000d20 <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
     d20:	b580      	push	{r7, lr}
     d22:	b082      	sub	sp, #8
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	4618      	mov	r0, r3
     d2c:	4b03      	ldr	r3, [pc, #12]	; (d3c <_ZN13LTC2983_ClassD1Ev+0x1c>)
     d2e:	4798      	blx	r3
{
} //~LTC2983_Class
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	4618      	mov	r0, r3
     d34:	3708      	adds	r7, #8
     d36:	46bd      	mov	sp, r7
     d38:	bd80      	pop	{r7, pc}
     d3a:	bf00      	nop
     d3c:	00000df1 	.word	0x00000df1

00000d40 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_async_descriptor *SPI_LTC){
     d40:	b580      	push	{r7, lr}
     d42:	b082      	sub	sp, #8
     d44:	af00      	add	r7, sp, #0
     d46:	6078      	str	r0, [r7, #4]
     d48:	6039      	str	r1, [r7, #0]
     d4a:	687b      	ldr	r3, [r7, #4]
     d4c:	4618      	mov	r0, r3
     d4e:	4b06      	ldr	r3, [pc, #24]	; (d68 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x28>)
     d50:	4798      	blx	r3
	ptrLTCClass=this;
     d52:	4a06      	ldr	r2, [pc, #24]	; (d6c <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x2c>)
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	683a      	ldr	r2, [r7, #0]
     d5c:	615a      	str	r2, [r3, #20]
	};
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	4618      	mov	r0, r3
     d62:	3708      	adds	r7, #8
     d64:	46bd      	mov	sp, r7
     d66:	bd80      	pop	{r7, pc}
     d68:	00000dd1 	.word	0x00000dd1
     d6c:	200018f4 	.word	0x200018f4

00000d70 <_Z41__static_initialization_and_destruction_0ii>:
	}
	isOK=process_finished==1?true:false;
	return	isOK;
	}

LTC2983_Class	temperatures(&SPI_TEMP);
     d70:	b580      	push	{r7, lr}
     d72:	b082      	sub	sp, #8
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	6039      	str	r1, [r7, #0]
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	2b01      	cmp	r3, #1
     d7e:	d10d      	bne.n	d9c <_Z41__static_initialization_and_destruction_0ii+0x2c>
     d80:	683b      	ldr	r3, [r7, #0]
     d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d86:	4293      	cmp	r3, r2
     d88:	d108      	bne.n	d9c <_Z41__static_initialization_and_destruction_0ii+0x2c>
     d8a:	4906      	ldr	r1, [pc, #24]	; (da4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     d8c:	4806      	ldr	r0, [pc, #24]	; (da8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     d8e:	4b07      	ldr	r3, [pc, #28]	; (dac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     d90:	4798      	blx	r3
     d92:	4a07      	ldr	r2, [pc, #28]	; (db0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     d94:	4907      	ldr	r1, [pc, #28]	; (db4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     d96:	4804      	ldr	r0, [pc, #16]	; (da8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     d98:	4b07      	ldr	r3, [pc, #28]	; (db8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     d9a:	4798      	blx	r3
     d9c:	bf00      	nop
     d9e:	3708      	adds	r7, #8
     da0:	46bd      	mov	sp, r7
     da2:	bd80      	pop	{r7, pc}
     da4:	20002630 	.word	0x20002630
     da8:	200018f8 	.word	0x200018f8
     dac:	00000d41 	.word	0x00000d41
     db0:	20000000 	.word	0x20000000
     db4:	00000d21 	.word	0x00000d21
     db8:	0000f915 	.word	0x0000f915

00000dbc <_GLOBAL__sub_I_ptrLTCClass>:
     dbc:	b580      	push	{r7, lr}
     dbe:	af00      	add	r7, sp, #0
     dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     dc4:	2001      	movs	r0, #1
     dc6:	4b01      	ldr	r3, [pc, #4]	; (dcc <_GLOBAL__sub_I_ptrLTCClass+0x10>)
     dc8:	4798      	blx	r3
     dca:	bd80      	pop	{r7, pc}
     dcc:	00000d71 	.word	0x00000d71

00000dd0 <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
     dd0:	b480      	push	{r7}
     dd2:	b083      	sub	sp, #12
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
     dd8:	4a04      	ldr	r2, [pc, #16]	; (dec <_ZN6LT_SPIC1Ev+0x1c>)
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	6013      	str	r3, [r2, #0]
} //LT_SPI
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	4618      	mov	r0, r3
     de2:	370c      	adds	r7, #12
     de4:	46bd      	mov	sp, r7
     de6:	bc80      	pop	{r7}
     de8:	4770      	bx	lr
     dea:	bf00      	nop
     dec:	20001930 	.word	0x20001930

00000df0 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
     df0:	b480      	push	{r7}
     df2:	b083      	sub	sp, #12
     df4:	af00      	add	r7, sp, #0
     df6:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	4618      	mov	r0, r3
     dfc:	370c      	adds	r7, #12
     dfe:	46bd      	mov	sp, r7
     e00:	bc80      	pop	{r7}
     e02:	4770      	bx	lr

00000e04 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
     e04:	b580      	push	{r7, lr}
     e06:	b082      	sub	sp, #8
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	6039      	str	r1, [r7, #0]
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	2b01      	cmp	r3, #1
     e12:	d10c      	bne.n	e2e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     e14:	683b      	ldr	r3, [r7, #0]
     e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
     e1a:	4293      	cmp	r3, r2
     e1c:	d107      	bne.n	e2e <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
     e1e:	4806      	ldr	r0, [pc, #24]	; (e38 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e20:	4b06      	ldr	r3, [pc, #24]	; (e3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     e22:	4798      	blx	r3
     e24:	4a06      	ldr	r2, [pc, #24]	; (e40 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     e26:	4907      	ldr	r1, [pc, #28]	; (e44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     e28:	4803      	ldr	r0, [pc, #12]	; (e38 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e2a:	4b07      	ldr	r3, [pc, #28]	; (e48 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     e2c:	4798      	blx	r3
}
     e2e:	bf00      	nop
     e30:	3708      	adds	r7, #8
     e32:	46bd      	mov	sp, r7
     e34:	bd80      	pop	{r7, pc}
     e36:	bf00      	nop
     e38:	20001934 	.word	0x20001934
     e3c:	0000116d 	.word	0x0000116d
     e40:	20000000 	.word	0x20000000
     e44:	0000118d 	.word	0x0000118d
     e48:	0000f915 	.word	0x0000f915

00000e4c <_GLOBAL__sub_I_ptrLTSPIClass>:
     e4c:	b580      	push	{r7, lr}
     e4e:	af00      	add	r7, sp, #0
     e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
     e54:	2001      	movs	r0, #1
     e56:	4b01      	ldr	r3, [pc, #4]	; (e5c <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
     e58:	4798      	blx	r3
     e5a:	bd80      	pop	{r7, pc}
     e5c:	00000e05 	.word	0x00000e05

00000e60 <main>:
 */ 

#include "main.h"

int main(void)
{
     e60:	b580      	push	{r7, lr}
     e62:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     e64:	4b06      	ldr	r3, [pc, #24]	; (e80 <main+0x20>)
     e66:	4798      	blx	r3
	
	usb.Init();
     e68:	4806      	ldr	r0, [pc, #24]	; (e84 <main+0x24>)
     e6a:	4b07      	ldr	r3, [pc, #28]	; (e88 <main+0x28>)
     e6c:	4798      	blx	r3
	delay_ms(100);
     e6e:	2064      	movs	r0, #100	; 0x64
     e70:	4b06      	ldr	r3, [pc, #24]	; (e8c <main+0x2c>)
     e72:	4798      	blx	r3
	StartLivePulse();
     e74:	4b06      	ldr	r3, [pc, #24]	; (e90 <main+0x30>)
     e76:	4798      	blx	r3
	//QSPIDriverTest();
	//DateTimeTest();
	EEPROM_Test();
     e78:	4b06      	ldr	r3, [pc, #24]	; (e94 <main+0x34>)
     e7a:	4798      	blx	r3
	//IO_ExpanderTest();
		/* Replace with your application code */
	while (1) {
     e7c:	e7fe      	b.n	e7c <main+0x1c>
     e7e:	bf00      	nop
     e80:	00002b39 	.word	0x00002b39
     e84:	20001e94 	.word	0x20001e94
     e88:	00001f21 	.word	0x00001f21
     e8c:	00004435 	.word	0x00004435
     e90:	00000e99 	.word	0x00000e99
     e94:	00000ee5 	.word	0x00000ee5

00000e98 <_Z14StartLivePulsev>:
		
		
	}
}

uint8_t	StartLivePulse(void){
     e98:	b580      	push	{r7, lr}
     e9a:	b082      	sub	sp, #8
     e9c:	af00      	add	r7, sp, #0
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     e9e:	490a      	ldr	r1, [pc, #40]	; (ec8 <_Z14StartLivePulsev+0x30>)
     ea0:	480a      	ldr	r0, [pc, #40]	; (ecc <_Z14StartLivePulsev+0x34>)
     ea2:	4b0b      	ldr	r3, [pc, #44]	; (ed0 <_Z14StartLivePulsev+0x38>)
     ea4:	4798      	blx	r3
     ea6:	4603      	mov	r3, r0
     ea8:	490a      	ldr	r1, [pc, #40]	; (ed4 <_Z14StartLivePulsev+0x3c>)
     eaa:	4618      	mov	r0, r3
     eac:	4b0a      	ldr	r3, [pc, #40]	; (ed8 <_Z14StartLivePulsev+0x40>)
     eae:	4798      	blx	r3
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     eb0:	480a      	ldr	r0, [pc, #40]	; (edc <_Z14StartLivePulsev+0x44>)
     eb2:	4b0b      	ldr	r3, [pc, #44]	; (ee0 <_Z14StartLivePulsev+0x48>)
     eb4:	4798      	blx	r3
     eb6:	4603      	mov	r3, r0
     eb8:	607b      	str	r3, [r7, #4]
	return p;
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	b2db      	uxtb	r3, r3
}
     ebe:	4618      	mov	r0, r3
     ec0:	3708      	adds	r7, #8
     ec2:	46bd      	mov	sp, r7
     ec4:	bd80      	pop	{r7, pc}
     ec6:	bf00      	nop
     ec8:	00012300 	.word	0x00012300
     ecc:	20001e94 	.word	0x20001e94
     ed0:	000010c5 	.word	0x000010c5
     ed4:	00012320 	.word	0x00012320
     ed8:	000010e5 	.word	0x000010e5
     edc:	200026d0 	.word	0x200026d0
     ee0:	00004a89 	.word	0x00004a89

00000ee4 <_Z11EEPROM_Testv>:
			
			usb<<"it does work"<<NEWLINE;
		}
	}
}
uint8_t EEPROM_Test(void){
     ee4:	b590      	push	{r4, r7, lr}
     ee6:	b08d      	sub	sp, #52	; 0x34
     ee8:	af00      	add	r7, sp, #0
	bool	is_corrupted;
	eeprom.Init();
     eea:	4861      	ldr	r0, [pc, #388]	; (1070 <_Z11EEPROM_Testv+0x18c>)
     eec:	4b61      	ldr	r3, [pc, #388]	; (1074 <_Z11EEPROM_Testv+0x190>)
     eee:	4798      	blx	r3
	uint8_t addr=AT24MAC_BUFFER_SIZE/2;
     ef0:	2308      	movs	r3, #8
     ef2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	value;
	usb<<"  Function for testing an i2c EEPROM"<<NEWLINE;
     ef6:	4960      	ldr	r1, [pc, #384]	; (1078 <_Z11EEPROM_Testv+0x194>)
     ef8:	4860      	ldr	r0, [pc, #384]	; (107c <_Z11EEPROM_Testv+0x198>)
     efa:	4b61      	ldr	r3, [pc, #388]	; (1080 <_Z11EEPROM_Testv+0x19c>)
     efc:	4798      	blx	r3
     efe:	4603      	mov	r3, r0
     f00:	4960      	ldr	r1, [pc, #384]	; (1084 <_Z11EEPROM_Testv+0x1a0>)
     f02:	4618      	mov	r0, r3
     f04:	4b60      	ldr	r3, [pc, #384]	; (1088 <_Z11EEPROM_Testv+0x1a4>)
     f06:	4798      	blx	r3
	/* Replace with your application code */
		uint8_t tx_buffer[ AT24MAC_BUFFER_SIZE] ;
		uint8_t rx_buffer[ AT24MAC_BUFFER_SIZE] ;
	while (1) {
		for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
     f08:	2300      	movs	r3, #0
     f0a:	62bb      	str	r3, [r7, #40]	; 0x28
     f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f0e:	2b0f      	cmp	r3, #15
     f10:	dc17      	bgt.n	f42 <_Z11EEPROM_Testv+0x5e>
			tx_buffer[i] = (uint8_t)rand();
     f12:	4b5e      	ldr	r3, [pc, #376]	; (108c <_Z11EEPROM_Testv+0x1a8>)
     f14:	4798      	blx	r3
     f16:	4603      	mov	r3, r0
     f18:	b2d9      	uxtb	r1, r3
     f1a:	f107 0214 	add.w	r2, r7, #20
     f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f20:	4413      	add	r3, r2
     f22:	460a      	mov	r2, r1
     f24:	701a      	strb	r2, [r3, #0]
			rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
     f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f28:	b2db      	uxtb	r3, r3
     f2a:	f1c3 0310 	rsb	r3, r3, #16
     f2e:	b2d9      	uxtb	r1, r3
     f30:	1d3a      	adds	r2, r7, #4
     f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f34:	4413      	add	r3, r2
     f36:	460a      	mov	r2, r1
     f38:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
     f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f3c:	3301      	adds	r3, #1
     f3e:	62bb      	str	r3, [r7, #40]	; 0x28
     f40:	e7e4      	b.n	f0c <_Z11EEPROM_Testv+0x28>
		}

		while(!eeprom.IsReady());
     f42:	484b      	ldr	r0, [pc, #300]	; (1070 <_Z11EEPROM_Testv+0x18c>)
     f44:	4b52      	ldr	r3, [pc, #328]	; (1090 <_Z11EEPROM_Testv+0x1ac>)
     f46:	4798      	blx	r3
     f48:	4603      	mov	r3, r0
     f4a:	f083 0301 	eor.w	r3, r3, #1
     f4e:	b2db      	uxtb	r3, r3
     f50:	2b00      	cmp	r3, #0
     f52:	d000      	beq.n	f56 <_Z11EEPROM_Testv+0x72>
     f54:	e7f5      	b.n	f42 <_Z11EEPROM_Testv+0x5e>
// 		eeprom.WriteAddress(tx_buffer,addr,AT24MAC_BUFFER_SIZE);
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++)
     f56:	2300      	movs	r3, #0
     f58:	627b      	str	r3, [r7, #36]	; 0x24
     f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f5c:	2b0f      	cmp	r3, #15
     f5e:	dc29      	bgt.n	fb4 <_Z11EEPROM_Testv+0xd0>
		{
			while(!eeprom.IsReady());			
     f60:	4843      	ldr	r0, [pc, #268]	; (1070 <_Z11EEPROM_Testv+0x18c>)
     f62:	4b4b      	ldr	r3, [pc, #300]	; (1090 <_Z11EEPROM_Testv+0x1ac>)
     f64:	4798      	blx	r3
     f66:	4603      	mov	r3, r0
     f68:	f083 0301 	eor.w	r3, r3, #1
     f6c:	b2db      	uxtb	r3, r3
     f6e:	2b00      	cmp	r3, #0
     f70:	d000      	beq.n	f74 <_Z11EEPROM_Testv+0x90>
     f72:	e7f5      	b.n	f60 <_Z11EEPROM_Testv+0x7c>
			eeprom.Write_byte(addr+i,tx_buffer[i]);
     f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f76:	b2da      	uxtb	r2, r3
     f78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
     f7c:	4413      	add	r3, r2
     f7e:	b2d9      	uxtb	r1, r3
     f80:	f107 0214 	add.w	r2, r7, #20
     f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f86:	4413      	add	r3, r2
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	461a      	mov	r2, r3
     f8c:	4838      	ldr	r0, [pc, #224]	; (1070 <_Z11EEPROM_Testv+0x18c>)
     f8e:	4b41      	ldr	r3, [pc, #260]	; (1094 <_Z11EEPROM_Testv+0x1b0>)
     f90:	4798      	blx	r3
			delay_ms(2);
     f92:	2002      	movs	r0, #2
     f94:	4b40      	ldr	r3, [pc, #256]	; (1098 <_Z11EEPROM_Testv+0x1b4>)
     f96:	4798      	blx	r3
			while(!eeprom.AcknolledgePolling());
     f98:	4835      	ldr	r0, [pc, #212]	; (1070 <_Z11EEPROM_Testv+0x18c>)
     f9a:	4b40      	ldr	r3, [pc, #256]	; (109c <_Z11EEPROM_Testv+0x1b8>)
     f9c:	4798      	blx	r3
     f9e:	4603      	mov	r3, r0
     fa0:	f083 0301 	eor.w	r3, r3, #1
     fa4:	b2db      	uxtb	r3, r3
     fa6:	2b00      	cmp	r3, #0
     fa8:	d000      	beq.n	fac <_Z11EEPROM_Testv+0xc8>
     faa:	e7f5      	b.n	f98 <_Z11EEPROM_Testv+0xb4>
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++)
     fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fae:	3301      	adds	r3, #1
     fb0:	627b      	str	r3, [r7, #36]	; 0x24
     fb2:	e7d2      	b.n	f5a <_Z11EEPROM_Testv+0x76>
		}
 		
		eeprom.ReadAddress(rx_buffer,addr,AT24MAC_BUFFER_SIZE);	
     fb4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
     fb8:	1d39      	adds	r1, r7, #4
     fba:	2310      	movs	r3, #16
     fbc:	482c      	ldr	r0, [pc, #176]	; (1070 <_Z11EEPROM_Testv+0x18c>)
     fbe:	4c38      	ldr	r4, [pc, #224]	; (10a0 <_Z11EEPROM_Testv+0x1bc>)
     fc0:	47a0      	blx	r4
// 			while(!eeprom.IsReady());
// 			rx_buffer[i]=eeprom.Read_byte(addr+i);
// 		}

	
		is_corrupted = false;
     fc2:	2300      	movs	r3, #0
     fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
     fc8:	2300      	movs	r3, #0
     fca:	603b      	str	r3, [r7, #0]
     fcc:	683b      	ldr	r3, [r7, #0]
     fce:	2b0f      	cmp	r3, #15
     fd0:	dc2f      	bgt.n	1032 <_Z11EEPROM_Testv+0x14e>
			if (tx_buffer[i] != rx_buffer[i]) {
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
     fd8:	4413      	add	r3, r2
     fda:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
     fde:	683b      	ldr	r3, [r7, #0]
     fe0:	f107 0130 	add.w	r1, r7, #48	; 0x30
     fe4:	440b      	add	r3, r1
     fe6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
     fea:	429a      	cmp	r2, r3
     fec:	d01d      	beq.n	102a <_Z11EEPROM_Testv+0x146>
				is_corrupted = true;
     fee:	2301      	movs	r3, #1
     ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				usb.print("EEPROM verification failed. Address: ");
     ff4:	492b      	ldr	r1, [pc, #172]	; (10a4 <_Z11EEPROM_Testv+0x1c0>)
     ff6:	4821      	ldr	r0, [pc, #132]	; (107c <_Z11EEPROM_Testv+0x198>)
     ff8:	4b2b      	ldr	r3, [pc, #172]	; (10a8 <_Z11EEPROM_Testv+0x1c4>)
     ffa:	4798      	blx	r3
				usb.print(addr,HEX);
     ffc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    1000:	2210      	movs	r2, #16
    1002:	4619      	mov	r1, r3
    1004:	481d      	ldr	r0, [pc, #116]	; (107c <_Z11EEPROM_Testv+0x198>)
    1006:	4b29      	ldr	r3, [pc, #164]	; (10ac <_Z11EEPROM_Testv+0x1c8>)
    1008:	4798      	blx	r3
				usb<<" bit :"<<i<<NEWLINE;
    100a:	4929      	ldr	r1, [pc, #164]	; (10b0 <_Z11EEPROM_Testv+0x1cc>)
    100c:	481b      	ldr	r0, [pc, #108]	; (107c <_Z11EEPROM_Testv+0x198>)
    100e:	4b29      	ldr	r3, [pc, #164]	; (10b4 <_Z11EEPROM_Testv+0x1d0>)
    1010:	4798      	blx	r3
    1012:	4602      	mov	r2, r0
    1014:	463b      	mov	r3, r7
    1016:	4619      	mov	r1, r3
    1018:	4610      	mov	r0, r2
    101a:	4b27      	ldr	r3, [pc, #156]	; (10b8 <_Z11EEPROM_Testv+0x1d4>)
    101c:	4798      	blx	r3
    101e:	4603      	mov	r3, r0
    1020:	4918      	ldr	r1, [pc, #96]	; (1084 <_Z11EEPROM_Testv+0x1a0>)
    1022:	4618      	mov	r0, r3
    1024:	4b18      	ldr	r3, [pc, #96]	; (1088 <_Z11EEPROM_Testv+0x1a4>)
    1026:	4798      	blx	r3
		    	//flashAddress=0;
			
				break;
    1028:	e003      	b.n	1032 <_Z11EEPROM_Testv+0x14e>
		for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
    102a:	683b      	ldr	r3, [r7, #0]
    102c:	3301      	adds	r3, #1
    102e:	603b      	str	r3, [r7, #0]
    1030:	e7cc      	b.n	fcc <_Z11EEPROM_Testv+0xe8>
			}
		
		}

		if (!is_corrupted) {
    1032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1036:	f083 0301 	eor.w	r3, r3, #1
    103a:	b2db      	uxtb	r3, r3
    103c:	2b00      	cmp	r3, #0
    103e:	f43f af63 	beq.w	f08 <_Z11EEPROM_Testv+0x24>
			usb.print("Write - Read is successful in EEPROM memory  " );
    1042:	491e      	ldr	r1, [pc, #120]	; (10bc <_Z11EEPROM_Testv+0x1d8>)
    1044:	480d      	ldr	r0, [pc, #52]	; (107c <_Z11EEPROM_Testv+0x198>)
    1046:	4b18      	ldr	r3, [pc, #96]	; (10a8 <_Z11EEPROM_Testv+0x1c4>)
    1048:	4798      	blx	r3
			usb.println(addr,HEX);
    104a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    104e:	2210      	movs	r2, #16
    1050:	4619      	mov	r1, r3
    1052:	480a      	ldr	r0, [pc, #40]	; (107c <_Z11EEPROM_Testv+0x198>)
    1054:	4b1a      	ldr	r3, [pc, #104]	; (10c0 <_Z11EEPROM_Testv+0x1dc>)
    1056:	4798      	blx	r3
			addr=(addr+AT24MAC_BUFFER_SIZE)%AT24MAC_MEMORY_SIZE;
    1058:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    105c:	3310      	adds	r3, #16
    105e:	425a      	negs	r2, r3
    1060:	b2db      	uxtb	r3, r3
    1062:	b2d2      	uxtb	r2, r2
    1064:	bf58      	it	pl
    1066:	4253      	negpl	r3, r2
    1068:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
	}
    106c:	e74c      	b.n	f08 <_Z11EEPROM_Testv+0x24>
    106e:	bf00      	nop
    1070:	20001964 	.word	0x20001964
    1074:	00001229 	.word	0x00001229
    1078:	00012344 	.word	0x00012344
    107c:	20001e94 	.word	0x20001e94
    1080:	00001105 	.word	0x00001105
    1084:	00012320 	.word	0x00012320
    1088:	000010e5 	.word	0x000010e5
    108c:	000115d1 	.word	0x000115d1
    1090:	00001629 	.word	0x00001629
    1094:	000012a5 	.word	0x000012a5
    1098:	00004435 	.word	0x00004435
    109c:	000014f9 	.word	0x000014f9
    10a0:	000013ed 	.word	0x000013ed
    10a4:	0001236c 	.word	0x0001236c
    10a8:	0000236d 	.word	0x0000236d
    10ac:	000023b1 	.word	0x000023b1
    10b0:	00012394 	.word	0x00012394
    10b4:	00001125 	.word	0x00001125
    10b8:	00001145 	.word	0x00001145
    10bc:	0001239c 	.word	0x0001239c
    10c0:	000024ed 	.word	0x000024ed

000010c4 <_ZlsIA30_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
    10c4:	b580      	push	{r7, lr}
    10c6:	b082      	sub	sp, #8
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
    10cc:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    10ce:	6839      	ldr	r1, [r7, #0]
    10d0:	6878      	ldr	r0, [r7, #4]
    10d2:	4b03      	ldr	r3, [pc, #12]	; (10e0 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
    10d4:	4798      	blx	r3
    10d6:	687b      	ldr	r3, [r7, #4]
    10d8:	4618      	mov	r0, r3
    10da:	3708      	adds	r7, #8
    10dc:	46bd      	mov	sp, r7
    10de:	bd80      	pop	{r7, pc}
    10e0:	0000236d 	.word	0x0000236d

000010e4 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    10e4:	b580      	push	{r7, lr}
    10e6:	b082      	sub	sp, #8
    10e8:	af00      	add	r7, sp, #0
    10ea:	6078      	str	r0, [r7, #4]
    10ec:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    10ee:	6839      	ldr	r1, [r7, #0]
    10f0:	6878      	ldr	r0, [r7, #4]
    10f2:	4b03      	ldr	r3, [pc, #12]	; (1100 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
    10f4:	4798      	blx	r3
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	4618      	mov	r0, r3
    10fa:	3708      	adds	r7, #8
    10fc:	46bd      	mov	sp, r7
    10fe:	bd80      	pop	{r7, pc}
    1100:	0000236d 	.word	0x0000236d

00001104 <_ZlsIA37_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1104:	b580      	push	{r7, lr}
    1106:	b082      	sub	sp, #8
    1108:	af00      	add	r7, sp, #0
    110a:	6078      	str	r0, [r7, #4]
    110c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    110e:	6839      	ldr	r1, [r7, #0]
    1110:	6878      	ldr	r0, [r7, #4]
    1112:	4b03      	ldr	r3, [pc, #12]	; (1120 <_ZlsIA37_cER5PrintS2_RKT_+0x1c>)
    1114:	4798      	blx	r3
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	4618      	mov	r0, r3
    111a:	3708      	adds	r7, #8
    111c:	46bd      	mov	sp, r7
    111e:	bd80      	pop	{r7, pc}
    1120:	0000236d 	.word	0x0000236d

00001124 <_ZlsIA7_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1124:	b580      	push	{r7, lr}
    1126:	b082      	sub	sp, #8
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
    112c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    112e:	6839      	ldr	r1, [r7, #0]
    1130:	6878      	ldr	r0, [r7, #4]
    1132:	4b03      	ldr	r3, [pc, #12]	; (1140 <_ZlsIA7_cER5PrintS2_RKT_+0x1c>)
    1134:	4798      	blx	r3
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	4618      	mov	r0, r3
    113a:	3708      	adds	r7, #8
    113c:	46bd      	mov	sp, r7
    113e:	bd80      	pop	{r7, pc}
    1140:	0000236d 	.word	0x0000236d

00001144 <_ZlsIiER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1144:	b580      	push	{r7, lr}
    1146:	b082      	sub	sp, #8
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
    114c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    114e:	683b      	ldr	r3, [r7, #0]
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	220a      	movs	r2, #10
    1154:	4619      	mov	r1, r3
    1156:	6878      	ldr	r0, [r7, #4]
    1158:	4b03      	ldr	r3, [pc, #12]	; (1168 <_ZlsIiER5PrintS1_RKT_+0x24>)
    115a:	4798      	blx	r3
    115c:	687b      	ldr	r3, [r7, #4]
    115e:	4618      	mov	r0, r3
    1160:	3708      	adds	r7, #8
    1162:	46bd      	mov	sp, r7
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop
    1168:	000023d9 	.word	0x000023d9

0000116c <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
    116c:	b480      	push	{r7}
    116e:	b083      	sub	sp, #12
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
    1174:	4a04      	ldr	r2, [pc, #16]	; (1188 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
    117a:	687b      	ldr	r3, [r7, #4]
    117c:	4618      	mov	r0, r3
    117e:	370c      	adds	r7, #12
    1180:	46bd      	mov	sp, r7
    1182:	bc80      	pop	{r7}
    1184:	4770      	bx	lr
    1186:	bf00      	nop
    1188:	20001954 	.word	0x20001954

0000118c <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
    118c:	b480      	push	{r7}
    118e:	b083      	sub	sp, #12
    1190:	af00      	add	r7, sp, #0
    1192:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	4618      	mov	r0, r3
    1198:	370c      	adds	r7, #12
    119a:	46bd      	mov	sp, r7
    119c:	bc80      	pop	{r7}
    119e:	4770      	bx	lr

000011a0 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    11a0:	b480      	push	{r7}
    11a2:	b083      	sub	sp, #12
    11a4:	af00      	add	r7, sp, #0
    11a6:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    11a8:	4a04      	ldr	r2, [pc, #16]	; (11bc <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	4618      	mov	r0, r3
    11b2:	370c      	adds	r7, #12
    11b4:	46bd      	mov	sp, r7
    11b6:	bc80      	pop	{r7}
    11b8:	4770      	bx	lr
    11ba:	bf00      	nop
    11bc:	20001958 	.word	0x20001958

000011c0 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    11c0:	b480      	push	{r7}
    11c2:	b083      	sub	sp, #12
    11c4:	af00      	add	r7, sp, #0
    11c6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    11c8:	687b      	ldr	r3, [r7, #4]
    11ca:	4618      	mov	r0, r3
    11cc:	370c      	adds	r7, #12
    11ce:	46bd      	mov	sp, r7
    11d0:	bc80      	pop	{r7}
    11d2:	4770      	bx	lr

000011d4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
    11d4:	b580      	push	{r7, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
    11dc:	6039      	str	r1, [r7, #0]
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	3308      	adds	r3, #8
    11e2:	4618      	mov	r0, r3
    11e4:	4b06      	ldr	r3, [pc, #24]	; (1200 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
    11e6:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    11e8:	687b      	ldr	r3, [r7, #4]
    11ea:	683a      	ldr	r2, [r7, #0]
    11ec:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
    11ee:	4a05      	ldr	r2, [pc, #20]	; (1204 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    11f4:	687b      	ldr	r3, [r7, #4]
    11f6:	4618      	mov	r0, r3
    11f8:	3708      	adds	r7, #8
    11fa:	46bd      	mov	sp, r7
    11fc:	bd80      	pop	{r7, pc}
    11fe:	bf00      	nop
    1200:	00000a9d 	.word	0x00000a9d
    1204:	2000195c 	.word	0x2000195c

00001208 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
    1208:	b580      	push	{r7, lr}
    120a:	b082      	sub	sp, #8
    120c:	af00      	add	r7, sp, #0
    120e:	6078      	str	r0, [r7, #4]
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	3308      	adds	r3, #8
    1214:	4618      	mov	r0, r3
    1216:	4b03      	ldr	r3, [pc, #12]	; (1224 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
    1218:	4798      	blx	r3
{
} //~AT24MAC_Class
    121a:	687b      	ldr	r3, [r7, #4]
    121c:	4618      	mov	r0, r3
    121e:	3708      	adds	r7, #8
    1220:	46bd      	mov	sp, r7
    1222:	bd80      	pop	{r7, pc}
    1224:	00000ac5 	.word	0x00000ac5

00001228 <_ZN13AT24MAC_Class4InitEv>:


bool AT24MAC_Class::Init(void){
    1228:	b580      	push	{r7, lr}
    122a:	b082      	sub	sp, #8
    122c:	af00      	add	r7, sp, #0
    122e:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
    1230:	2156      	movs	r1, #86	; 0x56
    1232:	6878      	ldr	r0, [r7, #4]
    1234:	4b04      	ldr	r3, [pc, #16]	; (1248 <_ZN13AT24MAC_Class4InitEv+0x20>)
    1236:	4798      	blx	r3
	return SelfTest();
    1238:	6878      	ldr	r0, [r7, #4]
    123a:	4b04      	ldr	r3, [pc, #16]	; (124c <_ZN13AT24MAC_Class4InitEv+0x24>)
    123c:	4798      	blx	r3
    123e:	4603      	mov	r3, r0
}
    1240:	4618      	mov	r0, r3
    1242:	3708      	adds	r7, #8
    1244:	46bd      	mov	sp, r7
    1246:	bd80      	pop	{r7, pc}
    1248:	00001251 	.word	0x00001251
    124c:	00001531 	.word	0x00001531

00001250 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
    1258:	460b      	mov	r3, r1
    125a:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
    125c:	687b      	ldr	r3, [r7, #4]
    125e:	78fa      	ldrb	r2, [r7, #3]
    1260:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
    1262:	687b      	ldr	r3, [r7, #4]
    1264:	f103 0208 	add.w	r2, r3, #8
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	685b      	ldr	r3, [r3, #4]
    126c:	4619      	mov	r1, r3
    126e:	4610      	mov	r0, r2
    1270:	4b0a      	ldr	r3, [pc, #40]	; (129c <_ZN13AT24MAC_Class4InitEh+0x4c>)
    1272:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
    1274:	687b      	ldr	r3, [r7, #4]
    1276:	3308      	adds	r3, #8
    1278:	78fa      	ldrb	r2, [r7, #3]
    127a:	4611      	mov	r1, r2
    127c:	4618      	mov	r0, r3
    127e:	4b08      	ldr	r3, [pc, #32]	; (12a0 <_ZN13AT24MAC_Class4InitEh+0x50>)
    1280:	4798      	blx	r3
    1282:	4603      	mov	r3, r0
    1284:	2b00      	cmp	r3, #0
    1286:	bf0c      	ite	eq
    1288:	2301      	moveq	r3, #1
    128a:	2300      	movne	r3, #0
    128c:	b2da      	uxtb	r2, r3
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	701a      	strb	r2, [r3, #0]
}
    1292:	bf00      	nop
    1294:	3708      	adds	r7, #8
    1296:	46bd      	mov	sp, r7
    1298:	bd80      	pop	{r7, pc}
    129a:	bf00      	nop
    129c:	00000ad9 	.word	0x00000ad9
    12a0:	00000b7d 	.word	0x00000b7d

000012a4 <_ZN13AT24MAC_Class10Write_byteEhh>:


int32_t AT24MAC_Class::Write_byte(uint8_t addr, uint8_t value){
    12a4:	b580      	push	{r7, lr}
    12a6:	b084      	sub	sp, #16
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]
    12ac:	460b      	mov	r3, r1
    12ae:	70fb      	strb	r3, [r7, #3]
    12b0:	4613      	mov	r3, r2
    12b2:	70bb      	strb	r3, [r7, #2]
	
	isReady=false;
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	2200      	movs	r2, #0
    12b8:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
    12ba:	78fb      	ldrb	r3, [r7, #3]
    12bc:	723b      	strb	r3, [r7, #8]
	array[1]=value;
    12be:	78bb      	ldrb	r3, [r7, #2]
    12c0:	727b      	strb	r3, [r7, #9]
	uint32_t w= i2ca.Write(array,2);
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	3308      	adds	r3, #8
    12c6:	f107 0108 	add.w	r1, r7, #8
    12ca:	2202      	movs	r2, #2
    12cc:	4618      	mov	r0, r3
    12ce:	4b09      	ldr	r3, [pc, #36]	; (12f4 <_ZN13AT24MAC_Class10Write_byteEhh+0x50>)
    12d0:	4798      	blx	r3
    12d2:	4603      	mov	r3, r0
    12d4:	60fb      	str	r3, [r7, #12]
	while(!i2ca.txReady);
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	7a1b      	ldrb	r3, [r3, #8]
    12da:	b2db      	uxtb	r3, r3
    12dc:	f083 0301 	eor.w	r3, r3, #1
    12e0:	b2db      	uxtb	r3, r3
    12e2:	2b00      	cmp	r3, #0
    12e4:	d000      	beq.n	12e8 <_ZN13AT24MAC_Class10Write_byteEhh+0x44>
    12e6:	e7f6      	b.n	12d6 <_ZN13AT24MAC_Class10Write_byteEhh+0x32>
	return	w;
    12e8:	68fb      	ldr	r3, [r7, #12]
}
    12ea:	4618      	mov	r0, r3
    12ec:	3710      	adds	r7, #16
    12ee:	46bd      	mov	sp, r7
    12f0:	bd80      	pop	{r7, pc}
    12f2:	bf00      	nop
    12f4:	00000bc5 	.word	0x00000bc5

000012f8 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
    12f8:	b580      	push	{r7, lr}
    12fa:	b086      	sub	sp, #24
    12fc:	af00      	add	r7, sp, #0
    12fe:	60f8      	str	r0, [r7, #12]
    1300:	60b9      	str	r1, [r7, #8]
    1302:	4611      	mov	r1, r2
    1304:	461a      	mov	r2, r3
    1306:	460b      	mov	r3, r1
    1308:	71fb      	strb	r3, [r7, #7]
    130a:	4613      	mov	r3, r2
    130c:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	for (int i = 0; i < size; i++)
    130e:	2300      	movs	r3, #0
    1310:	613b      	str	r3, [r7, #16]
    1312:	79ba      	ldrb	r2, [r7, #6]
    1314:	693b      	ldr	r3, [r7, #16]
    1316:	429a      	cmp	r2, r3
    1318:	dd2a      	ble.n	1370 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x78>
	{
		while(!IsReady());
    131a:	68f8      	ldr	r0, [r7, #12]
    131c:	4b17      	ldr	r3, [pc, #92]	; (137c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>)
    131e:	4798      	blx	r3
    1320:	4603      	mov	r3, r0
    1322:	f083 0301 	eor.w	r3, r3, #1
    1326:	b2db      	uxtb	r3, r3
    1328:	2b00      	cmp	r3, #0
    132a:	d000      	beq.n	132e <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x36>
    132c:	e7f5      	b.n	131a <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x22>
		w=Write_byte(addr+i,*p);
    132e:	693b      	ldr	r3, [r7, #16]
    1330:	b2da      	uxtb	r2, r3
    1332:	79fb      	ldrb	r3, [r7, #7]
    1334:	4413      	add	r3, r2
    1336:	b2d9      	uxtb	r1, r3
    1338:	68bb      	ldr	r3, [r7, #8]
    133a:	781b      	ldrb	r3, [r3, #0]
    133c:	461a      	mov	r2, r3
    133e:	68f8      	ldr	r0, [r7, #12]
    1340:	4b0f      	ldr	r3, [pc, #60]	; (1380 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x88>)
    1342:	4798      	blx	r3
    1344:	4603      	mov	r3, r0
    1346:	617b      	str	r3, [r7, #20]
		p++;
    1348:	68bb      	ldr	r3, [r7, #8]
    134a:	3301      	adds	r3, #1
    134c:	60bb      	str	r3, [r7, #8]
		delay_ms(2);
    134e:	2002      	movs	r0, #2
    1350:	4b0c      	ldr	r3, [pc, #48]	; (1384 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x8c>)
    1352:	4798      	blx	r3
		while(!AcknolledgePolling());
    1354:	68f8      	ldr	r0, [r7, #12]
    1356:	4b0c      	ldr	r3, [pc, #48]	; (1388 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x90>)
    1358:	4798      	blx	r3
    135a:	4603      	mov	r3, r0
    135c:	f083 0301 	eor.w	r3, r3, #1
    1360:	b2db      	uxtb	r3, r3
    1362:	2b00      	cmp	r3, #0
    1364:	d000      	beq.n	1368 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
    1366:	e7f5      	b.n	1354 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x5c>
	for (int i = 0; i < size; i++)
    1368:	693b      	ldr	r3, [r7, #16]
    136a:	3301      	adds	r3, #1
    136c:	613b      	str	r3, [r7, #16]
    136e:	e7d0      	b.n	1312 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x1a>
// 		array[i]=value;
// 		p++;
// 	}
// 	w= i2ca.Write(array,1+size);
// 	while(!i2ca.txReady);
	return	w;
    1370:	697b      	ldr	r3, [r7, #20]
}
    1372:	4618      	mov	r0, r3
    1374:	3718      	adds	r7, #24
    1376:	46bd      	mov	sp, r7
    1378:	bd80      	pop	{r7, pc}
    137a:	bf00      	nop
    137c:	00001629 	.word	0x00001629
    1380:	000012a5 	.word	0x000012a5
    1384:	00004435 	.word	0x00004435
    1388:	000014f9 	.word	0x000014f9

0000138c <_ZN13AT24MAC_Class9Read_byteEh>:
	}
	//uint8_t cmd=(uint8_t)AT24MAC_WRITE_CMD;
	return i2ca.Write(frame,17);
}

uint8_t AT24MAC_Class::Read_byte(uint8_t addr){
    138c:	b580      	push	{r7, lr}
    138e:	b084      	sub	sp, #16
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
    1394:	460b      	mov	r3, r1
    1396:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	3308      	adds	r3, #8
    139c:	1cf9      	adds	r1, r7, #3
    139e:	2201      	movs	r2, #1
    13a0:	4618      	mov	r0, r3
    13a2:	4b10      	ldr	r3, [pc, #64]	; (13e4 <_ZN13AT24MAC_Class9Read_byteEh+0x58>)
    13a4:	4798      	blx	r3
	while(!i2ca.txReady);
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	7a1b      	ldrb	r3, [r3, #8]
    13aa:	b2db      	uxtb	r3, r3
    13ac:	f083 0301 	eor.w	r3, r3, #1
    13b0:	b2db      	uxtb	r3, r3
    13b2:	2b00      	cmp	r3, #0
    13b4:	d000      	beq.n	13b8 <_ZN13AT24MAC_Class9Read_byteEh+0x2c>
    13b6:	e7f6      	b.n	13a6 <_ZN13AT24MAC_Class9Read_byteEh+0x1a>
	i2ca.Read(&value,1);
    13b8:	687b      	ldr	r3, [r7, #4]
    13ba:	3308      	adds	r3, #8
    13bc:	f107 010f 	add.w	r1, r7, #15
    13c0:	2201      	movs	r2, #1
    13c2:	4618      	mov	r0, r3
    13c4:	4b08      	ldr	r3, [pc, #32]	; (13e8 <_ZN13AT24MAC_Class9Read_byteEh+0x5c>)
    13c6:	4798      	blx	r3
	while(!i2ca.rxReady);
    13c8:	687b      	ldr	r3, [r7, #4]
    13ca:	7a5b      	ldrb	r3, [r3, #9]
    13cc:	b2db      	uxtb	r3, r3
    13ce:	f083 0301 	eor.w	r3, r3, #1
    13d2:	b2db      	uxtb	r3, r3
    13d4:	2b00      	cmp	r3, #0
    13d6:	d000      	beq.n	13da <_ZN13AT24MAC_Class9Read_byteEh+0x4e>
    13d8:	e7f6      	b.n	13c8 <_ZN13AT24MAC_Class9Read_byteEh+0x3c>
	return value;
    13da:	7bfb      	ldrb	r3, [r7, #15]
}
    13dc:	4618      	mov	r0, r3
    13de:	3710      	adds	r7, #16
    13e0:	46bd      	mov	sp, r7
    13e2:	bd80      	pop	{r7, pc}
    13e4:	00000bc5 	.word	0x00000bc5
    13e8:	00000c09 	.word	0x00000c09

000013ec <_ZN13AT24MAC_Class11ReadAddressEPhhh>:

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
    13ec:	b580      	push	{r7, lr}
    13ee:	b086      	sub	sp, #24
    13f0:	af00      	add	r7, sp, #0
    13f2:	60f8      	str	r0, [r7, #12]
    13f4:	60b9      	str	r1, [r7, #8]
    13f6:	4611      	mov	r1, r2
    13f8:	461a      	mov	r2, r3
    13fa:	460b      	mov	r3, r1
    13fc:	71fb      	strb	r3, [r7, #7]
    13fe:	4613      	mov	r3, r2
    1400:	71bb      	strb	r3, [r7, #6]
	//i2ca.read_cmd(addr,&value);
	uint32_t r;
	if (size<AT24MAC_BUFFER_SIZE+1)
    1402:	79bb      	ldrb	r3, [r7, #6]
    1404:	2b10      	cmp	r3, #16
    1406:	dc22      	bgt.n	144e <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x62>
	{
			i2ca.Write(&addr,1);
    1408:	68fb      	ldr	r3, [r7, #12]
    140a:	3308      	adds	r3, #8
    140c:	1df9      	adds	r1, r7, #7
    140e:	2201      	movs	r2, #1
    1410:	4618      	mov	r0, r3
    1412:	4b2a      	ldr	r3, [pc, #168]	; (14bc <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xd0>)
    1414:	4798      	blx	r3
			while(!i2ca.txReady);
    1416:	68fb      	ldr	r3, [r7, #12]
    1418:	7a1b      	ldrb	r3, [r3, #8]
    141a:	b2db      	uxtb	r3, r3
    141c:	f083 0301 	eor.w	r3, r3, #1
    1420:	b2db      	uxtb	r3, r3
    1422:	2b00      	cmp	r3, #0
    1424:	d000      	beq.n	1428 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x3c>
    1426:	e7f6      	b.n	1416 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x2a>
			r= i2ca.Read(p,size);
    1428:	68fb      	ldr	r3, [r7, #12]
    142a:	3308      	adds	r3, #8
    142c:	79ba      	ldrb	r2, [r7, #6]
    142e:	b292      	uxth	r2, r2
    1430:	68b9      	ldr	r1, [r7, #8]
    1432:	4618      	mov	r0, r3
    1434:	4b22      	ldr	r3, [pc, #136]	; (14c0 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xd4>)
    1436:	4798      	blx	r3
    1438:	4603      	mov	r3, r0
    143a:	617b      	str	r3, [r7, #20]
			while(!i2ca.rxReady);
    143c:	68fb      	ldr	r3, [r7, #12]
    143e:	7a5b      	ldrb	r3, [r3, #9]
    1440:	b2db      	uxtb	r3, r3
    1442:	f083 0301 	eor.w	r3, r3, #1
    1446:	b2db      	uxtb	r3, r3
    1448:	2b00      	cmp	r3, #0
    144a:	d032      	beq.n	14b2 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xc6>
    144c:	e7f6      	b.n	143c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x50>
	} 
	else
	{
		uint8_t localAddress=addr;
    144e:	79fb      	ldrb	r3, [r7, #7]
    1450:	74fb      	strb	r3, [r7, #19]
		while (localAddress<addr+size)
    1452:	7cfb      	ldrb	r3, [r7, #19]
    1454:	461a      	mov	r2, r3
    1456:	79fb      	ldrb	r3, [r7, #7]
    1458:	4619      	mov	r1, r3
    145a:	79bb      	ldrb	r3, [r7, #6]
    145c:	440b      	add	r3, r1
    145e:	429a      	cmp	r2, r3
    1460:	da27      	bge.n	14b2 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xc6>
		{
			i2ca.Write(&localAddress,1);
    1462:	68fb      	ldr	r3, [r7, #12]
    1464:	3308      	adds	r3, #8
    1466:	f107 0113 	add.w	r1, r7, #19
    146a:	2201      	movs	r2, #1
    146c:	4618      	mov	r0, r3
    146e:	4b13      	ldr	r3, [pc, #76]	; (14bc <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xd0>)
    1470:	4798      	blx	r3
			while(!i2ca.txReady);
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	7a1b      	ldrb	r3, [r3, #8]
    1476:	b2db      	uxtb	r3, r3
    1478:	f083 0301 	eor.w	r3, r3, #1
    147c:	b2db      	uxtb	r3, r3
    147e:	2b00      	cmp	r3, #0
    1480:	d000      	beq.n	1484 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x98>
    1482:	e7f6      	b.n	1472 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x86>
			r= i2ca.Read(p,AT24MAC_BUFFER_SIZE);
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	3308      	adds	r3, #8
    1488:	2210      	movs	r2, #16
    148a:	68b9      	ldr	r1, [r7, #8]
    148c:	4618      	mov	r0, r3
    148e:	4b0c      	ldr	r3, [pc, #48]	; (14c0 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xd4>)
    1490:	4798      	blx	r3
    1492:	4603      	mov	r3, r0
    1494:	617b      	str	r3, [r7, #20]
			while(!i2ca.rxReady);
    1496:	68fb      	ldr	r3, [r7, #12]
    1498:	7a5b      	ldrb	r3, [r3, #9]
    149a:	b2db      	uxtb	r3, r3
    149c:	f083 0301 	eor.w	r3, r3, #1
    14a0:	b2db      	uxtb	r3, r3
    14a2:	2b00      	cmp	r3, #0
    14a4:	d000      	beq.n	14a8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xbc>
    14a6:	e7f6      	b.n	1496 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0xaa>
			localAddress+=AT24MAC_BUFFER_SIZE;
    14a8:	7cfb      	ldrb	r3, [r7, #19]
    14aa:	3310      	adds	r3, #16
    14ac:	b2db      	uxtb	r3, r3
    14ae:	74fb      	strb	r3, [r7, #19]
		while (localAddress<addr+size)
    14b0:	e7cf      	b.n	1452 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x66>
		}
	}
	
	return r;
    14b2:	697b      	ldr	r3, [r7, #20]
}
    14b4:	4618      	mov	r0, r3
    14b6:	3718      	adds	r7, #24
    14b8:	46bd      	mov	sp, r7
    14ba:	bd80      	pop	{r7, pc}
    14bc:	00000bc5 	.word	0x00000bc5
    14c0:	00000c09 	.word	0x00000c09

000014c4 <_ZN13AT24MAC_Class14GetAcknowledgeEv>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
	uint8_t add=(uint8_t)(0xff&addr);
	
	return ReadAddress(p,add,size);
}
bool	AT24MAC_Class::GetAcknowledge(void){
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
	byte=Read_byte(0);
    14cc:	2100      	movs	r1, #0
    14ce:	6878      	ldr	r0, [r7, #4]
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <_ZN13AT24MAC_Class14GetAcknowledgeEv+0x30>)
    14d2:	4798      	blx	r3
    14d4:	4603      	mov	r3, r0
    14d6:	461a      	mov	r2, r3
    14d8:	687b      	ldr	r3, [r7, #4]
    14da:	765a      	strb	r2, [r3, #25]
	return	byte>0;
    14dc:	687b      	ldr	r3, [r7, #4]
    14de:	7e5b      	ldrb	r3, [r3, #25]
    14e0:	2b00      	cmp	r3, #0
    14e2:	bfcc      	ite	gt
    14e4:	2301      	movgt	r3, #1
    14e6:	2300      	movle	r3, #0
    14e8:	b2db      	uxtb	r3, r3
}
    14ea:	4618      	mov	r0, r3
    14ec:	3708      	adds	r7, #8
    14ee:	46bd      	mov	sp, r7
    14f0:	bd80      	pop	{r7, pc}
    14f2:	bf00      	nop
    14f4:	0000138d 	.word	0x0000138d

000014f8 <_ZN13AT24MAC_Class18AcknolledgePollingEv>:
bool AT24MAC_Class::AcknolledgePolling(void){
    14f8:	b580      	push	{r7, lr}
    14fa:	b082      	sub	sp, #8
    14fc:	af00      	add	r7, sp, #0
    14fe:	6078      	str	r0, [r7, #4]
	do 
	{
		GetAcknowledge();
    1500:	6878      	ldr	r0, [r7, #4]
    1502:	4b09      	ldr	r3, [pc, #36]	; (1528 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x30>)
    1504:	4798      	blx	r3
	} while (!IsReady());
    1506:	6878      	ldr	r0, [r7, #4]
    1508:	4b08      	ldr	r3, [pc, #32]	; (152c <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x34>)
    150a:	4798      	blx	r3
    150c:	4603      	mov	r3, r0
	do 
    150e:	f083 0301 	eor.w	r3, r3, #1
    1512:	b2db      	uxtb	r3, r3
    1514:	2b00      	cmp	r3, #0
    1516:	d000      	beq.n	151a <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x22>
    1518:	e7f2      	b.n	1500 <_ZN13AT24MAC_Class18AcknolledgePollingEv+0x8>
	return isReady;
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	b2db      	uxtb	r3, r3
}
    1520:	4618      	mov	r0, r3
    1522:	3708      	adds	r7, #8
    1524:	46bd      	mov	sp, r7
    1526:	bd80      	pop	{r7, pc}
    1528:	000014c5 	.word	0x000014c5
    152c:	00001629 	.word	0x00001629

00001530 <_ZN13AT24MAC_Class8SelfTestEv>:

bool	AT24MAC_Class::SelfTest(void){
    1530:	b590      	push	{r4, r7, lr}
    1532:	b085      	sub	sp, #20
    1534:	af00      	add	r7, sp, #0
    1536:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE;
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	22f0      	movs	r2, #240	; 0xf0
    153c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
    1540:	2300      	movs	r3, #0
    1542:	60fb      	str	r3, [r7, #12]
    1544:	68fb      	ldr	r3, [r7, #12]
    1546:	2b0f      	cmp	r3, #15
    1548:	dc18      	bgt.n	157c <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
    154a:	4b33      	ldr	r3, [pc, #204]	; (1618 <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
    154c:	4798      	blx	r3
    154e:	4603      	mov	r3, r0
    1550:	b2d9      	uxtb	r1, r3
    1552:	687a      	ldr	r2, [r7, #4]
    1554:	68fb      	ldr	r3, [r7, #12]
    1556:	4413      	add	r3, r2
    1558:	331a      	adds	r3, #26
    155a:	460a      	mov	r2, r1
    155c:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	b2db      	uxtb	r3, r3
    1562:	f1c3 0310 	rsb	r3, r3, #16
    1566:	b2d9      	uxtb	r1, r3
    1568:	687a      	ldr	r2, [r7, #4]
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	4413      	add	r3, r2
    156e:	332a      	adds	r3, #42	; 0x2a
    1570:	460a      	mov	r2, r1
    1572:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
    1574:	68fb      	ldr	r3, [r7, #12]
    1576:	3301      	adds	r3, #1
    1578:	60fb      	str	r3, [r7, #12]
    157a:	e7e3      	b.n	1544 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
    157c:	6878      	ldr	r0, [r7, #4]
    157e:	4b27      	ldr	r3, [pc, #156]	; (161c <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
    1580:	4798      	blx	r3
    1582:	4603      	mov	r3, r0
    1584:	f083 0301 	eor.w	r3, r3, #1
    1588:	b2db      	uxtb	r3, r3
    158a:	2b00      	cmp	r3, #0
    158c:	d000      	beq.n	1590 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
    158e:	e7f5      	b.n	157c <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	f103 011a 	add.w	r1, r3, #26
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    159c:	2310      	movs	r3, #16
    159e:	6878      	ldr	r0, [r7, #4]
    15a0:	4c1f      	ldr	r4, [pc, #124]	; (1620 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
    15a2:	47a0      	blx	r4
	while(!IsReady());
    15a4:	6878      	ldr	r0, [r7, #4]
    15a6:	4b1d      	ldr	r3, [pc, #116]	; (161c <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
    15a8:	4798      	blx	r3
    15aa:	4603      	mov	r3, r0
    15ac:	f083 0301 	eor.w	r3, r3, #1
    15b0:	b2db      	uxtb	r3, r3
    15b2:	2b00      	cmp	r3, #0
    15b4:	d000      	beq.n	15b8 <_ZN13AT24MAC_Class8SelfTestEv+0x88>
    15b6:	e7f5      	b.n	15a4 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    15c4:	2310      	movs	r3, #16
    15c6:	6878      	ldr	r0, [r7, #4]
    15c8:	4c16      	ldr	r4, [pc, #88]	; (1624 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
    15ca:	47a0      	blx	r4
	isOK = true;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	2201      	movs	r2, #1
    15d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
    15d4:	2300      	movs	r3, #0
    15d6:	60bb      	str	r3, [r7, #8]
    15d8:	68bb      	ldr	r3, [r7, #8]
    15da:	2b0f      	cmp	r3, #15
    15dc:	dc14      	bgt.n	1608 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
    15de:	687a      	ldr	r2, [r7, #4]
    15e0:	68bb      	ldr	r3, [r7, #8]
    15e2:	4413      	add	r3, r2
    15e4:	331a      	adds	r3, #26
    15e6:	781a      	ldrb	r2, [r3, #0]
    15e8:	6879      	ldr	r1, [r7, #4]
    15ea:	68bb      	ldr	r3, [r7, #8]
    15ec:	440b      	add	r3, r1
    15ee:	332a      	adds	r3, #42	; 0x2a
    15f0:	781b      	ldrb	r3, [r3, #0]
    15f2:	429a      	cmp	r2, r3
    15f4:	d004      	beq.n	1600 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	2200      	movs	r2, #0
    15fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
    15fe:	e003      	b.n	1608 <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
    1600:	68bb      	ldr	r3, [r7, #8]
    1602:	3301      	adds	r3, #1
    1604:	60bb      	str	r3, [r7, #8]
    1606:	e7e7      	b.n	15d8 <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
    160e:	4618      	mov	r0, r3
    1610:	3714      	adds	r7, #20
    1612:	46bd      	mov	sp, r7
    1614:	bd90      	pop	{r4, r7, pc}
    1616:	bf00      	nop
    1618:	000115d1 	.word	0x000115d1
    161c:	00001629 	.word	0x00001629
    1620:	000012f9 	.word	0x000012f9
    1624:	000013ed 	.word	0x000013ed

00001628 <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
    1628:	b480      	push	{r7}
    162a:	b083      	sub	sp, #12
    162c:	af00      	add	r7, sp, #0
    162e:	6078      	str	r0, [r7, #4]

	if (i2ca.txReady && i2ca.rxReady)
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	7a1b      	ldrb	r3, [r3, #8]
    1634:	b2db      	uxtb	r3, r3
    1636:	2b00      	cmp	r3, #0
    1638:	d006      	beq.n	1648 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	7a5b      	ldrb	r3, [r3, #9]
    163e:	b2db      	uxtb	r3, r3
    1640:	2b00      	cmp	r3, #0
    1642:	d001      	beq.n	1648 <_ZN13AT24MAC_Class7IsReadyEv+0x20>
    1644:	2301      	movs	r3, #1
    1646:	e000      	b.n	164a <_ZN13AT24MAC_Class7IsReadyEv+0x22>
    1648:	2300      	movs	r3, #0
    164a:	2b00      	cmp	r3, #0
    164c:	d003      	beq.n	1656 <_ZN13AT24MAC_Class7IsReadyEv+0x2e>
	{
		isReady=true;
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	2201      	movs	r2, #1
    1652:	701a      	strb	r2, [r3, #0]
    1654:	e002      	b.n	165c <_ZN13AT24MAC_Class7IsReadyEv+0x34>
	}
	else
	{
		isReady=false;
    1656:	687b      	ldr	r3, [r7, #4]
    1658:	2200      	movs	r2, #0
    165a:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
    165c:	687b      	ldr	r3, [r7, #4]
    165e:	781b      	ldrb	r3, [r3, #0]
    1660:	b2db      	uxtb	r3, r3
}
    1662:	4618      	mov	r0, r3
    1664:	370c      	adds	r7, #12
    1666:	46bd      	mov	sp, r7
    1668:	bc80      	pop	{r7}
    166a:	4770      	bx	lr

0000166c <_Z41__static_initialization_and_destruction_0ii>:

    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	2b01      	cmp	r3, #1
    167a:	d10d      	bne.n	1698 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    167c:	683b      	ldr	r3, [r7, #0]
    167e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1682:	4293      	cmp	r3, r2
    1684:	d108      	bne.n	1698 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1686:	4906      	ldr	r1, [pc, #24]	; (16a0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1688:	4806      	ldr	r0, [pc, #24]	; (16a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    168a:	4b07      	ldr	r3, [pc, #28]	; (16a8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    168c:	4798      	blx	r3
    168e:	4a07      	ldr	r2, [pc, #28]	; (16ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1690:	4907      	ldr	r1, [pc, #28]	; (16b0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1692:	4804      	ldr	r0, [pc, #16]	; (16a4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1694:	4b07      	ldr	r3, [pc, #28]	; (16b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1696:	4798      	blx	r3
    1698:	bf00      	nop
    169a:	3708      	adds	r7, #8
    169c:	46bd      	mov	sp, r7
    169e:	bd80      	pop	{r7, pc}
    16a0:	200027a8 	.word	0x200027a8
    16a4:	20001964 	.word	0x20001964
    16a8:	000011d5 	.word	0x000011d5
    16ac:	20000000 	.word	0x20000000
    16b0:	00001209 	.word	0x00001209
    16b4:	0000f915 	.word	0x0000f915

000016b8 <_GLOBAL__sub_I_ptrAT24MACClass>:
    16b8:	b580      	push	{r7, lr}
    16ba:	af00      	add	r7, sp, #0
    16bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    16c0:	2001      	movs	r0, #1
    16c2:	4b01      	ldr	r3, [pc, #4]	; (16c8 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    16c4:	4798      	blx	r3
    16c6:	bd80      	pop	{r7, pc}
    16c8:	0000166d 	.word	0x0000166d

000016cc <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    16cc:	b580      	push	{r7, lr}
    16ce:	b082      	sub	sp, #8
    16d0:	af00      	add	r7, sp, #0
    16d2:	6078      	str	r0, [r7, #4]
    16d4:	6039      	str	r1, [r7, #0]
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	3318      	adds	r3, #24
    16da:	4618      	mov	r0, r3
    16dc:	4b08      	ldr	r3, [pc, #32]	; (1700 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    16de:	4798      	blx	r3
{
	appParameters=defaultParameters;
    16e0:	687b      	ldr	r3, [r7, #4]
    16e2:	4a08      	ldr	r2, [pc, #32]	; (1704 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    16e4:	7812      	ldrb	r2, [r2, #0]
    16e6:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	683a      	ldr	r2, [r7, #0]
    16ec:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    16ee:	4b06      	ldr	r3, [pc, #24]	; (1708 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    16f0:	681a      	ldr	r2, [r3, #0]
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	4618      	mov	r0, r3
    16fa:	3708      	adds	r7, #8
    16fc:	46bd      	mov	sp, r7
    16fe:	bd80      	pop	{r7, pc}
    1700:	000011a1 	.word	0x000011a1
    1704:	000124e0 	.word	0x000124e0
    1708:	200019a4 	.word	0x200019a4

0000170c <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    170c:	b580      	push	{r7, lr}
    170e:	b082      	sub	sp, #8
    1710:	af00      	add	r7, sp, #0
    1712:	6078      	str	r0, [r7, #4]
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	3318      	adds	r3, #24
    1718:	4618      	mov	r0, r3
    171a:	4b03      	ldr	r3, [pc, #12]	; (1728 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    171c:	4798      	blx	r3
{
} //~FlashMemoryClass
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	4618      	mov	r0, r3
    1722:	3708      	adds	r7, #8
    1724:	46bd      	mov	sp, r7
    1726:	bd80      	pop	{r7, pc}
    1728:	000011c1 	.word	0x000011c1

0000172c <_Z41__static_initialization_and_destruction_0ii>:
	flashClose();
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    172c:	b580      	push	{r7, lr}
    172e:	b082      	sub	sp, #8
    1730:	af00      	add	r7, sp, #0
    1732:	6078      	str	r0, [r7, #4]
    1734:	6039      	str	r1, [r7, #0]
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	2b01      	cmp	r3, #1
    173a:	d10d      	bne.n	1758 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    173c:	683b      	ldr	r3, [r7, #0]
    173e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1742:	4293      	cmp	r3, r2
    1744:	d108      	bne.n	1758 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1746:	4906      	ldr	r1, [pc, #24]	; (1760 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1748:	4806      	ldr	r0, [pc, #24]	; (1764 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    174a:	4b07      	ldr	r3, [pc, #28]	; (1768 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    174c:	4798      	blx	r3
    174e:	4a07      	ldr	r2, [pc, #28]	; (176c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1750:	4907      	ldr	r1, [pc, #28]	; (1770 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1752:	4804      	ldr	r0, [pc, #16]	; (1764 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1754:	4b07      	ldr	r3, [pc, #28]	; (1774 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1756:	4798      	blx	r3
    1758:	bf00      	nop
    175a:	3708      	adds	r7, #8
    175c:	46bd      	mov	sp, r7
    175e:	bd80      	pop	{r7, pc}
    1760:	20002600 	.word	0x20002600
    1764:	200019a8 	.word	0x200019a8
    1768:	000016cd 	.word	0x000016cd
    176c:	20000000 	.word	0x20000000
    1770:	0000170d 	.word	0x0000170d
    1774:	0000f915 	.word	0x0000f915

00001778 <_GLOBAL__sub_I_flashLayout>:
    1778:	b580      	push	{r7, lr}
    177a:	af00      	add	r7, sp, #0
    177c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1780:	2001      	movs	r0, #1
    1782:	4b01      	ldr	r3, [pc, #4]	; (1788 <_GLOBAL__sub_I_flashLayout+0x10>)
    1784:	4798      	blx	r3
    1786:	bd80      	pop	{r7, pc}
    1788:	0000172d 	.word	0x0000172d

0000178c <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	3318      	adds	r3, #24
    1798:	4618      	mov	r0, r3
    179a:	4b03      	ldr	r3, [pc, #12]	; (17a8 <_ZN17FRAM_Memory_ClassD1Ev+0x1c>)
    179c:	4798      	blx	r3
{
} //~FRAM_Memory_Class
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	4618      	mov	r0, r3
    17a2:	3708      	adds	r7, #8
    17a4:	46bd      	mov	sp, r7
    17a6:	bd80      	pop	{r7, pc}
    17a8:	000011c1 	.word	0x000011c1

000017ac <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
    17ac:	b580      	push	{r7, lr}
    17ae:	b082      	sub	sp, #8
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
    17b4:	6039      	str	r1, [r7, #0]
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	3318      	adds	r3, #24
    17ba:	4618      	mov	r0, r3
    17bc:	4b08      	ldr	r3, [pc, #32]	; (17e0 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x34>)
    17be:	4798      	blx	r3
{
	appParameters=defaultParameters;
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	4a08      	ldr	r2, [pc, #32]	; (17e4 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x38>)
    17c4:	7812      	ldrb	r2, [r2, #0]
    17c6:	741a      	strb	r2, [r3, #16]
	spi_descriptor=spi_des;
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	683a      	ldr	r2, [r7, #0]
    17cc:	615a      	str	r2, [r3, #20]
	memoryAddress=framMemory;
    17ce:	4b06      	ldr	r3, [pc, #24]	; (17e8 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x3c>)
    17d0:	681a      	ldr	r2, [r3, #0]
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	60da      	str	r2, [r3, #12]
} //FlashMemoryClass
    17d6:	687b      	ldr	r3, [r7, #4]
    17d8:	4618      	mov	r0, r3
    17da:	3708      	adds	r7, #8
    17dc:	46bd      	mov	sp, r7
    17de:	bd80      	pop	{r7, pc}
    17e0:	000011a1 	.word	0x000011a1
    17e4:	000124e0 	.word	0x000124e0
    17e8:	200019f0 	.word	0x200019f0

000017ec <_Z41__static_initialization_and_destruction_0ii>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

    17ec:	b580      	push	{r7, lr}
    17ee:	b082      	sub	sp, #8
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
    17f4:	6039      	str	r1, [r7, #0]
    17f6:	687b      	ldr	r3, [r7, #4]
    17f8:	2b01      	cmp	r3, #1
    17fa:	d10d      	bne.n	1818 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    17fc:	683b      	ldr	r3, [r7, #0]
    17fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1802:	4293      	cmp	r3, r2
    1804:	d108      	bne.n	1818 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1806:	4906      	ldr	r1, [pc, #24]	; (1820 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1808:	4806      	ldr	r0, [pc, #24]	; (1824 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    180a:	4b07      	ldr	r3, [pc, #28]	; (1828 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    180c:	4798      	blx	r3
    180e:	4a07      	ldr	r2, [pc, #28]	; (182c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1810:	4907      	ldr	r1, [pc, #28]	; (1830 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1812:	4804      	ldr	r0, [pc, #16]	; (1824 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1814:	4b07      	ldr	r3, [pc, #28]	; (1834 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1816:	4798      	blx	r3
    1818:	bf00      	nop
    181a:	3708      	adds	r7, #8
    181c:	46bd      	mov	sp, r7
    181e:	bd80      	pop	{r7, pc}
    1820:	20002600 	.word	0x20002600
    1824:	200019f4 	.word	0x200019f4
    1828:	000017ad 	.word	0x000017ad
    182c:	20000000 	.word	0x20000000
    1830:	0000178d 	.word	0x0000178d
    1834:	0000f915 	.word	0x0000f915

00001838 <_GLOBAL__sub_I_framMemory>:
    1838:	b580      	push	{r7, lr}
    183a:	af00      	add	r7, sp, #0
    183c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1840:	2001      	movs	r0, #1
    1842:	4b01      	ldr	r3, [pc, #4]	; (1848 <_GLOBAL__sub_I_framMemory+0x10>)
    1844:	4798      	blx	r3
    1846:	bd80      	pop	{r7, pc}
    1848:	000017ed 	.word	0x000017ed

0000184c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    184c:	b480      	push	{r7}
    184e:	b083      	sub	sp, #12
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
    1854:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	683a      	ldr	r2, [r7, #0]
    185a:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	4a04      	ldr	r2, [pc, #16]	; (1870 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    1860:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	4618      	mov	r0, r3
    1868:	370c      	adds	r7, #12
    186a:	46bd      	mov	sp, r7
    186c:	bc80      	pop	{r7}
    186e:	4770      	bx	lr
    1870:	001fff00 	.word	0x001fff00

00001874 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    1874:	b480      	push	{r7}
    1876:	b083      	sub	sp, #12
    1878:	af00      	add	r7, sp, #0
    187a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	4618      	mov	r0, r3
    1880:	370c      	adds	r7, #12
    1882:	46bd      	mov	sp, r7
    1884:	bc80      	pop	{r7}
    1886:	4770      	bx	lr

00001888 <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
    1888:	b580      	push	{r7, lr}
    188a:	b082      	sub	sp, #8
    188c:	af00      	add	r7, sp, #0
    188e:	6078      	str	r0, [r7, #4]
    1890:	6039      	str	r1, [r7, #0]
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	2b01      	cmp	r3, #1
    1896:	d10d      	bne.n	18b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1898:	683b      	ldr	r3, [r7, #0]
    189a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    189e:	4293      	cmp	r3, r2
    18a0:	d108      	bne.n	18b4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    18a2:	4906      	ldr	r1, [pc, #24]	; (18bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    18a4:	4806      	ldr	r0, [pc, #24]	; (18c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    18a6:	4b07      	ldr	r3, [pc, #28]	; (18c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    18a8:	4798      	blx	r3
    18aa:	4a07      	ldr	r2, [pc, #28]	; (18c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    18ac:	4907      	ldr	r1, [pc, #28]	; (18cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    18ae:	4804      	ldr	r0, [pc, #16]	; (18c0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    18b0:	4b07      	ldr	r3, [pc, #28]	; (18d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    18b2:	4798      	blx	r3
    18b4:	bf00      	nop
    18b6:	3708      	adds	r7, #8
    18b8:	46bd      	mov	sp, r7
    18ba:	bd80      	pop	{r7, pc}
    18bc:	20002694 	.word	0x20002694
    18c0:	20001a78 	.word	0x20001a78
    18c4:	0000184d 	.word	0x0000184d
    18c8:	20000000 	.word	0x20000000
    18cc:	00001875 	.word	0x00001875
    18d0:	0000f915 	.word	0x0000f915

000018d4 <_GLOBAL__sub_I_ptrN25Q256Class>:
    18d4:	b580      	push	{r7, lr}
    18d6:	af00      	add	r7, sp, #0
    18d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    18dc:	2001      	movs	r0, #1
    18de:	4b01      	ldr	r3, [pc, #4]	; (18e4 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    18e0:	4798      	blx	r3
    18e2:	bd80      	pop	{r7, pc}
    18e4:	00001889 	.word	0x00001889

000018e8 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:
	ptrCalendarClass=this;
	//ptrMemory=&memory;
} //Calendar_Class

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    18e8:	b580      	push	{r7, lr}
    18ea:	b082      	sub	sp, #8
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]
    18f0:	6039      	str	r1, [r7, #0]
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	4618      	mov	r0, r3
    18f6:	4b08      	ldr	r3, [pc, #32]	; (1918 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    18f8:	4798      	blx	r3
    18fa:	4a08      	ldr	r2, [pc, #32]	; (191c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    18fc:	687b      	ldr	r3, [r7, #4]
    18fe:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	683a      	ldr	r2, [r7, #0]
    1904:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    1908:	4a05      	ldr	r2, [pc, #20]	; (1920 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	4618      	mov	r0, r3
    1912:	3708      	adds	r7, #8
    1914:	46bd      	mov	sp, r7
    1916:	bd80      	pop	{r7, pc}
    1918:	00001bfd 	.word	0x00001bfd
    191c:	000124f4 	.word	0x000124f4
    1920:	20001ca8 	.word	0x20001ca8

00001924 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    1924:	b580      	push	{r7, lr}
    1926:	b082      	sub	sp, #8
    1928:	af00      	add	r7, sp, #0
    192a:	6078      	str	r0, [r7, #4]
    192c:	4a05      	ldr	r2, [pc, #20]	; (1944 <_ZN14Calendar_ClassD1Ev+0x20>)
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	601a      	str	r2, [r3, #0]
    1932:	687b      	ldr	r3, [r7, #4]
    1934:	4618      	mov	r0, r3
    1936:	4b04      	ldr	r3, [pc, #16]	; (1948 <_ZN14Calendar_ClassD1Ev+0x24>)
    1938:	4798      	blx	r3
{
} //~Calendar_Class
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	4618      	mov	r0, r3
    193e:	3708      	adds	r7, #8
    1940:	46bd      	mov	sp, r7
    1942:	bd80      	pop	{r7, pc}
    1944:	000124f4 	.word	0x000124f4
    1948:	00001c1d 	.word	0x00001c1d

0000194c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    194c:	b580      	push	{r7, lr}
    194e:	b082      	sub	sp, #8
    1950:	af00      	add	r7, sp, #0
    1952:	6078      	str	r0, [r7, #4]
    1954:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    195c:	6839      	ldr	r1, [r7, #0]
    195e:	4618      	mov	r0, r3
    1960:	4b03      	ldr	r3, [pc, #12]	; (1970 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    1962:	4798      	blx	r3
    1964:	4603      	mov	r3, r0
}
    1966:	4618      	mov	r0, r3
    1968:	3708      	adds	r7, #8
    196a:	46bd      	mov	sp, r7
    196c:	bd80      	pop	{r7, pc}
    196e:	bf00      	nop
    1970:	00004279 	.word	0x00004279

00001974 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    1980:	887b      	ldrh	r3, [r7, #2]
    1982:	f003 0303 	and.w	r3, r3, #3
    1986:	2b00      	cmp	r3, #0
    1988:	d001      	beq.n	198e <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    198a:	2300      	movs	r3, #0
    198c:	e000      	b.n	1990 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    198e:	2301      	movs	r3, #1
	}
}
    1990:	4618      	mov	r0, r3
    1992:	370c      	adds	r7, #12
    1994:	46bd      	mov	sp, r7
    1996:	bc80      	pop	{r7}
    1998:	4770      	bx	lr
	...

0000199c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    199c:	b580      	push	{r7, lr}
    199e:	b086      	sub	sp, #24
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
    19a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    19a6:	2300      	movs	r3, #0
    19a8:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    19aa:	2300      	movs	r3, #0
    19ac:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    19ae:	683b      	ldr	r3, [r7, #0]
    19b0:	88db      	ldrh	r3, [r3, #6]
    19b2:	b2da      	uxtb	r2, r3
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    19ba:	699b      	ldr	r3, [r3, #24]
    19bc:	b2db      	uxtb	r3, r3
    19be:	1ad3      	subs	r3, r2, r3
    19c0:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    19c2:	683b      	ldr	r3, [r7, #0]
    19c4:	795b      	ldrb	r3, [r3, #5]
    19c6:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    19c8:	683b      	ldr	r3, [r7, #0]
    19ca:	791b      	ldrb	r3, [r3, #4]
    19cc:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    19ce:	683b      	ldr	r3, [r7, #0]
    19d0:	789b      	ldrb	r3, [r3, #2]
    19d2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    19d4:	683b      	ldr	r3, [r7, #0]
    19d6:	785b      	ldrb	r3, [r3, #1]
    19d8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    19da:	683b      	ldr	r3, [r7, #0]
    19dc:	781b      	ldrb	r3, [r3, #0]
    19de:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    19e0:	2300      	movs	r3, #0
    19e2:	613b      	str	r3, [r7, #16]
    19e4:	7bfa      	ldrb	r2, [r7, #15]
    19e6:	693b      	ldr	r3, [r7, #16]
    19e8:	429a      	cmp	r2, r3
    19ea:	d91e      	bls.n	1a2a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    19f2:	699b      	ldr	r3, [r3, #24]
    19f4:	b29a      	uxth	r2, r3
    19f6:	693b      	ldr	r3, [r7, #16]
    19f8:	b29b      	uxth	r3, r3
    19fa:	4413      	add	r3, r2
    19fc:	b29b      	uxth	r3, r3
    19fe:	4619      	mov	r1, r3
    1a00:	6878      	ldr	r0, [r7, #4]
    1a02:	4b27      	ldr	r3, [pc, #156]	; (1aa0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    1a04:	4798      	blx	r3
    1a06:	4603      	mov	r3, r0
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d006      	beq.n	1a1a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    1a0c:	697b      	ldr	r3, [r7, #20]
    1a0e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    1a12:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    1a16:	617b      	str	r3, [r7, #20]
    1a18:	e003      	b.n	1a22 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    1a1a:	697a      	ldr	r2, [r7, #20]
    1a1c:	4b21      	ldr	r3, [pc, #132]	; (1aa4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    1a1e:	4413      	add	r3, r2
    1a20:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    1a22:	693b      	ldr	r3, [r7, #16]
    1a24:	3301      	adds	r3, #1
    1a26:	613b      	str	r3, [r7, #16]
    1a28:	e7dc      	b.n	19e4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    1a2a:	2301      	movs	r3, #1
    1a2c:	613b      	str	r3, [r7, #16]
    1a2e:	7bba      	ldrb	r2, [r7, #14]
    1a30:	693b      	ldr	r3, [r7, #16]
    1a32:	429a      	cmp	r2, r3
    1a34:	d910      	bls.n	1a58 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    1a36:	683b      	ldr	r3, [r7, #0]
    1a38:	88db      	ldrh	r3, [r3, #6]
    1a3a:	4619      	mov	r1, r3
    1a3c:	693b      	ldr	r3, [r7, #16]
    1a3e:	b2db      	uxtb	r3, r3
    1a40:	461a      	mov	r2, r3
    1a42:	6878      	ldr	r0, [r7, #4]
    1a44:	4b18      	ldr	r3, [pc, #96]	; (1aa8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    1a46:	4798      	blx	r3
    1a48:	4602      	mov	r2, r0
    1a4a:	697b      	ldr	r3, [r7, #20]
    1a4c:	4413      	add	r3, r2
    1a4e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    1a50:	693b      	ldr	r3, [r7, #16]
    1a52:	3301      	adds	r3, #1
    1a54:	613b      	str	r3, [r7, #16]
    1a56:	e7ea      	b.n	1a2e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    1a58:	7b7b      	ldrb	r3, [r7, #13]
    1a5a:	3b01      	subs	r3, #1
    1a5c:	4a13      	ldr	r2, [pc, #76]	; (1aac <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    1a5e:	fb02 f303 	mul.w	r3, r2, r3
    1a62:	461a      	mov	r2, r3
    1a64:	697b      	ldr	r3, [r7, #20]
    1a66:	4413      	add	r3, r2
    1a68:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    1a6a:	7b3b      	ldrb	r3, [r7, #12]
    1a6c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1a70:	fb02 f303 	mul.w	r3, r2, r3
    1a74:	461a      	mov	r2, r3
    1a76:	697b      	ldr	r3, [r7, #20]
    1a78:	4413      	add	r3, r2
    1a7a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1a7c:	7afa      	ldrb	r2, [r7, #11]
    1a7e:	4613      	mov	r3, r2
    1a80:	011b      	lsls	r3, r3, #4
    1a82:	1a9b      	subs	r3, r3, r2
    1a84:	009b      	lsls	r3, r3, #2
    1a86:	461a      	mov	r2, r3
    1a88:	697b      	ldr	r3, [r7, #20]
    1a8a:	4413      	add	r3, r2
    1a8c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    1a8e:	7abb      	ldrb	r3, [r7, #10]
    1a90:	697a      	ldr	r2, [r7, #20]
    1a92:	4413      	add	r3, r2
    1a94:	617b      	str	r3, [r7, #20]

	return tmp;
    1a96:	697b      	ldr	r3, [r7, #20]
}
    1a98:	4618      	mov	r0, r3
    1a9a:	3718      	adds	r7, #24
    1a9c:	46bd      	mov	sp, r7
    1a9e:	bd80      	pop	{r7, pc}
    1aa0:	00001975 	.word	0x00001975
    1aa4:	01e13380 	.word	0x01e13380
    1aa8:	00001ab1 	.word	0x00001ab1
    1aac:	00015180 	.word	0x00015180

00001ab0 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b086      	sub	sp, #24
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	60f8      	str	r0, [r7, #12]
    1ab8:	60b9      	str	r1, [r7, #8]
    1aba:	4613      	mov	r3, r2
    1abc:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    1abe:	2300      	movs	r3, #0
    1ac0:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    1ac2:	68bb      	ldr	r3, [r7, #8]
    1ac4:	b29b      	uxth	r3, r3
    1ac6:	4619      	mov	r1, r3
    1ac8:	68f8      	ldr	r0, [r7, #12]
    1aca:	4b2f      	ldr	r3, [pc, #188]	; (1b88 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    1acc:	4798      	blx	r3
    1ace:	4603      	mov	r3, r0
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d028      	beq.n	1b26 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    1ad4:	79fb      	ldrb	r3, [r7, #7]
    1ad6:	3b01      	subs	r3, #1
    1ad8:	2b0b      	cmp	r3, #11
    1ada:	d84c      	bhi.n	1b76 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    1adc:	a201      	add	r2, pc, #4	; (adr r2, 1ae4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    1ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ae2:	bf00      	nop
    1ae4:	00001b15 	.word	0x00001b15
    1ae8:	00001b1b 	.word	0x00001b1b
    1aec:	00001b15 	.word	0x00001b15
    1af0:	00001b21 	.word	0x00001b21
    1af4:	00001b15 	.word	0x00001b15
    1af8:	00001b21 	.word	0x00001b21
    1afc:	00001b15 	.word	0x00001b15
    1b00:	00001b15 	.word	0x00001b15
    1b04:	00001b21 	.word	0x00001b21
    1b08:	00001b15 	.word	0x00001b15
    1b0c:	00001b21 	.word	0x00001b21
    1b10:	00001b15 	.word	0x00001b15
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1b14:	4b1d      	ldr	r3, [pc, #116]	; (1b8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1b16:	617b      	str	r3, [r7, #20]
			break;
    1b18:	e030      	b.n	1b7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    1b1a:	4b1d      	ldr	r3, [pc, #116]	; (1b90 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    1b1c:	617b      	str	r3, [r7, #20]
			break;
    1b1e:	e02d      	b.n	1b7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1b20:	4b1c      	ldr	r3, [pc, #112]	; (1b94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    1b22:	617b      	str	r3, [r7, #20]
			break;
    1b24:	e02a      	b.n	1b7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    1b26:	79fb      	ldrb	r3, [r7, #7]
    1b28:	3b01      	subs	r3, #1
    1b2a:	2b0b      	cmp	r3, #11
    1b2c:	d825      	bhi.n	1b7a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    1b2e:	a201      	add	r2, pc, #4	; (adr r2, 1b34 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    1b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1b34:	00001b65 	.word	0x00001b65
    1b38:	00001b6b 	.word	0x00001b6b
    1b3c:	00001b65 	.word	0x00001b65
    1b40:	00001b71 	.word	0x00001b71
    1b44:	00001b65 	.word	0x00001b65
    1b48:	00001b71 	.word	0x00001b71
    1b4c:	00001b65 	.word	0x00001b65
    1b50:	00001b65 	.word	0x00001b65
    1b54:	00001b71 	.word	0x00001b71
    1b58:	00001b65 	.word	0x00001b65
    1b5c:	00001b71 	.word	0x00001b71
    1b60:	00001b65 	.word	0x00001b65
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    1b64:	4b09      	ldr	r3, [pc, #36]	; (1b8c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    1b66:	617b      	str	r3, [r7, #20]
			break;
    1b68:	e008      	b.n	1b7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    1b6a:	4b0b      	ldr	r3, [pc, #44]	; (1b98 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    1b6c:	617b      	str	r3, [r7, #20]
			break;
    1b6e:	e005      	b.n	1b7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    1b70:	4b08      	ldr	r3, [pc, #32]	; (1b94 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    1b72:	617b      	str	r3, [r7, #20]
			break;
    1b74:	e002      	b.n	1b7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    1b76:	bf00      	nop
    1b78:	e000      	b.n	1b7c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    1b7a:	bf00      	nop
		}
	}

	return sec_in_month;
    1b7c:	697b      	ldr	r3, [r7, #20]
}
    1b7e:	4618      	mov	r0, r3
    1b80:	3718      	adds	r7, #24
    1b82:	46bd      	mov	sp, r7
    1b84:	bd80      	pop	{r7, pc}
    1b86:	bf00      	nop
    1b88:	00001975 	.word	0x00001975
    1b8c:	0028de80 	.word	0x0028de80
    1b90:	00263b80 	.word	0x00263b80
    1b94:	00278d00 	.word	0x00278d00
    1b98:	0024ea00 	.word	0x0024ea00

00001b9c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b082      	sub	sp, #8
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	6078      	str	r0, [r7, #4]
    1ba4:	6039      	str	r1, [r7, #0]
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	2b01      	cmp	r3, #1
    1baa:	d10d      	bne.n	1bc8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1bac:	683b      	ldr	r3, [r7, #0]
    1bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1bb2:	4293      	cmp	r3, r2
    1bb4:	d108      	bne.n	1bc8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    1bb6:	4906      	ldr	r1, [pc, #24]	; (1bd0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1bb8:	4806      	ldr	r0, [pc, #24]	; (1bd4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1bba:	4b07      	ldr	r3, [pc, #28]	; (1bd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    1bbc:	4798      	blx	r3
    1bbe:	4a07      	ldr	r2, [pc, #28]	; (1bdc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1bc0:	4907      	ldr	r1, [pc, #28]	; (1be0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1bc2:	4804      	ldr	r0, [pc, #16]	; (1bd4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1bc4:	4b07      	ldr	r3, [pc, #28]	; (1be4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1bc6:	4798      	blx	r3
    1bc8:	bf00      	nop
    1bca:	3708      	adds	r7, #8
    1bcc:	46bd      	mov	sp, r7
    1bce:	bd80      	pop	{r7, pc}
    1bd0:	200027e8 	.word	0x200027e8
    1bd4:	20001cb0 	.word	0x20001cb0
    1bd8:	000018e9 	.word	0x000018e9
    1bdc:	20000000 	.word	0x20000000
    1be0:	00001925 	.word	0x00001925
    1be4:	0000f915 	.word	0x0000f915

00001be8 <_GLOBAL__sub_I_ptrCalendarClass>:
    1be8:	b580      	push	{r7, lr}
    1bea:	af00      	add	r7, sp, #0
    1bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1bf0:	2001      	movs	r0, #1
    1bf2:	4b01      	ldr	r3, [pc, #4]	; (1bf8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    1bf4:	4798      	blx	r3
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	00001b9d 	.word	0x00001b9d

00001bfc <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    1bfc:	b480      	push	{r7}
    1bfe:	b083      	sub	sp, #12
    1c00:	af00      	add	r7, sp, #0
    1c02:	6078      	str	r0, [r7, #4]
    1c04:	4a04      	ldr	r2, [pc, #16]	; (1c18 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	601a      	str	r2, [r3, #0]
{
} //~D
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	4618      	mov	r0, r3
    1c0e:	370c      	adds	r7, #12
    1c10:	46bd      	mov	sp, r7
    1c12:	bc80      	pop	{r7}
    1c14:	4770      	bx	lr
    1c16:	bf00      	nop
    1c18:	00012504 	.word	0x00012504

00001c1c <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	4a04      	ldr	r2, [pc, #16]	; (1c38 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	4618      	mov	r0, r3
    1c2e:	370c      	adds	r7, #12
    1c30:	46bd      	mov	sp, r7
    1c32:	bc80      	pop	{r7}
    1c34:	4770      	bx	lr
    1c36:	bf00      	nop
    1c38:	00012504 	.word	0x00012504

00001c3c <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    1c3c:	b480      	push	{r7}
    1c3e:	b083      	sub	sp, #12
    1c40:	af00      	add	r7, sp, #0
    1c42:	6078      	str	r0, [r7, #4]
    1c44:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	683a      	ldr	r2, [r7, #0]
    1c4a:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    1c4c:	4a07      	ldr	r2, [pc, #28]	; (1c6c <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1c58:	615a      	str	r2, [r3, #20]
	task=&countTicks;
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	4a04      	ldr	r2, [pc, #16]	; (1c70 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    1c5e:	619a      	str	r2, [r3, #24]
	//task->cb=task_cb;
} //Timer_Class
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	4618      	mov	r0, r3
    1c64:	370c      	adds	r7, #12
    1c66:	46bd      	mov	sp, r7
    1c68:	bc80      	pop	{r7}
    1c6a:	4770      	bx	lr
    1c6c:	20001d58 	.word	0x20001d58
    1c70:	20001dfc 	.word	0x20001dfc

00001c74 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    1c74:	b480      	push	{r7}
    1c76:	b083      	sub	sp, #12
    1c78:	af00      	add	r7, sp, #0
    1c7a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	2200      	movs	r2, #0
    1c80:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	4618      	mov	r0, r3
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	bc80      	pop	{r7}
    1c8c:	4770      	bx	lr
	...

00001c90 <_Z41__static_initialization_and_destruction_0ii>:
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
    1c90:	b580      	push	{r7, lr}
    1c92:	b082      	sub	sp, #8
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	6039      	str	r1, [r7, #0]
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	2b01      	cmp	r3, #1
    1c9e:	d128      	bne.n	1cf2 <_Z41__static_initialization_and_destruction_0ii+0x62>
    1ca0:	683b      	ldr	r3, [r7, #0]
    1ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1ca6:	4293      	cmp	r3, r2
    1ca8:	d123      	bne.n	1cf2 <_Z41__static_initialization_and_destruction_0ii+0x62>
Timer_Class eventTimer(&TIMER_EVENT);
    1caa:	4914      	ldr	r1, [pc, #80]	; (1cfc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    1cac:	4814      	ldr	r0, [pc, #80]	; (1d00 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1cae:	4b15      	ldr	r3, [pc, #84]	; (1d04 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1cb0:	4798      	blx	r3
    1cb2:	4a15      	ldr	r2, [pc, #84]	; (1d08 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1cb4:	4915      	ldr	r1, [pc, #84]	; (1d0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1cb6:	4812      	ldr	r0, [pc, #72]	; (1d00 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    1cb8:	4b15      	ldr	r3, [pc, #84]	; (1d10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1cba:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    1cbc:	4915      	ldr	r1, [pc, #84]	; (1d14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    1cbe:	4816      	ldr	r0, [pc, #88]	; (1d18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    1cc0:	4b10      	ldr	r3, [pc, #64]	; (1d04 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1cc2:	4798      	blx	r3
    1cc4:	4a10      	ldr	r2, [pc, #64]	; (1d08 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1cc6:	4911      	ldr	r1, [pc, #68]	; (1d0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1cc8:	4813      	ldr	r0, [pc, #76]	; (1d18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    1cca:	4b11      	ldr	r3, [pc, #68]	; (1d10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1ccc:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    1cce:	4913      	ldr	r1, [pc, #76]	; (1d1c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    1cd0:	4813      	ldr	r0, [pc, #76]	; (1d20 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    1cd2:	4b0c      	ldr	r3, [pc, #48]	; (1d04 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1cd4:	4798      	blx	r3
    1cd6:	4a0c      	ldr	r2, [pc, #48]	; (1d08 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1cd8:	490c      	ldr	r1, [pc, #48]	; (1d0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1cda:	4811      	ldr	r0, [pc, #68]	; (1d20 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    1cdc:	4b0c      	ldr	r3, [pc, #48]	; (1d10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1cde:	4798      	blx	r3
    1ce0:	4910      	ldr	r1, [pc, #64]	; (1d24 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    1ce2:	4811      	ldr	r0, [pc, #68]	; (1d28 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    1ce4:	4b07      	ldr	r3, [pc, #28]	; (1d04 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    1ce6:	4798      	blx	r3
    1ce8:	4a07      	ldr	r2, [pc, #28]	; (1d08 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    1cea:	4908      	ldr	r1, [pc, #32]	; (1d0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    1cec:	480e      	ldr	r0, [pc, #56]	; (1d28 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    1cee:	4b08      	ldr	r3, [pc, #32]	; (1d10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    1cf0:	4798      	blx	r3
    1cf2:	bf00      	nop
    1cf4:	3708      	adds	r7, #8
    1cf6:	46bd      	mov	sp, r7
    1cf8:	bd80      	pop	{r7, pc}
    1cfa:	bf00      	nop
    1cfc:	20002698 	.word	0x20002698
    1d00:	20001e10 	.word	0x20001e10
    1d04:	00001c3d 	.word	0x00001c3d
    1d08:	20000000 	.word	0x20000000
    1d0c:	00001c75 	.word	0x00001c75
    1d10:	0000f915 	.word	0x0000f915
    1d14:	2000278c 	.word	0x2000278c
    1d18:	20001e30 	.word	0x20001e30
    1d1c:	200026b4 	.word	0x200026b4
    1d20:	20001e50 	.word	0x20001e50
    1d24:	20002714 	.word	0x20002714
    1d28:	20001e70 	.word	0x20001e70

00001d2c <_GLOBAL__sub_I_ptrTimerClass>:
    1d2c:	b580      	push	{r7, lr}
    1d2e:	af00      	add	r7, sp, #0
    1d30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1d34:	2001      	movs	r0, #1
    1d36:	4b01      	ldr	r3, [pc, #4]	; (1d3c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    1d38:	4798      	blx	r3
    1d3a:	bd80      	pop	{r7, pc}
    1d3c:	00001c91 	.word	0x00001c91

00001d40 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d40:	b480      	push	{r7}
    1d42:	b083      	sub	sp, #12
    1d44:	af00      	add	r7, sp, #0
    1d46:	6078      	str	r0, [r7, #4]
    1d48:	4a05      	ldr	r2, [pc, #20]	; (1d60 <_ZN5PrintC1Ev+0x20>)
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	601a      	str	r2, [r3, #0]
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	2200      	movs	r2, #0
    1d52:	605a      	str	r2, [r3, #4]
    1d54:	687b      	ldr	r3, [r7, #4]
    1d56:	4618      	mov	r0, r3
    1d58:	370c      	adds	r7, #12
    1d5a:	46bd      	mov	sp, r7
    1d5c:	bc80      	pop	{r7}
    1d5e:	4770      	bx	lr
    1d60:	00012580 	.word	0x00012580

00001d64 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1d64:	b480      	push	{r7}
    1d66:	b083      	sub	sp, #12
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
    1d6c:	2300      	movs	r3, #0
    1d6e:	4618      	mov	r0, r3
    1d70:	370c      	adds	r7, #12
    1d72:	46bd      	mov	sp, r7
    1d74:	bc80      	pop	{r7}
    1d76:	4770      	bx	lr

00001d78 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1d78:	b480      	push	{r7}
    1d7a:	b083      	sub	sp, #12
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    1d80:	bf00      	nop
    1d82:	370c      	adds	r7, #12
    1d84:	46bd      	mov	sp, r7
    1d86:	bc80      	pop	{r7}
    1d88:	4770      	bx	lr
	...

00001d8c <_ZN6StreamC1Ev>:
    Stream() {_timeout=1000;}
    1d8c:	b580      	push	{r7, lr}
    1d8e:	b082      	sub	sp, #8
    1d90:	af00      	add	r7, sp, #0
    1d92:	6078      	str	r0, [r7, #4]
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	4618      	mov	r0, r3
    1d98:	4b06      	ldr	r3, [pc, #24]	; (1db4 <_ZN6StreamC1Ev+0x28>)
    1d9a:	4798      	blx	r3
    1d9c:	4a06      	ldr	r2, [pc, #24]	; (1db8 <_ZN6StreamC1Ev+0x2c>)
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	601a      	str	r2, [r3, #0]
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1da8:	609a      	str	r2, [r3, #8]
    1daa:	687b      	ldr	r3, [r7, #4]
    1dac:	4618      	mov	r0, r3
    1dae:	3708      	adds	r7, #8
    1db0:	46bd      	mov	sp, r7
    1db2:	bd80      	pop	{r7, pc}
    1db4:	00001d41 	.word	0x00001d41
    1db8:	00012544 	.word	0x00012544

00001dbc <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    1dbc:	b480      	push	{r7}
    1dbe:	b083      	sub	sp, #12
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    1dc4:	4b06      	ldr	r3, [pc, #24]	; (1de0 <_ZL10USBTimeoutPK10timer_task+0x24>)
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	2201      	movs	r2, #1
    1dca:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    1dcc:	4b04      	ldr	r3, [pc, #16]	; (1de0 <_ZL10USBTimeoutPK10timer_task+0x24>)
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	2200      	movs	r2, #0
    1dd2:	741a      	strb	r2, [r3, #16]
	
}
    1dd4:	bf00      	nop
    1dd6:	370c      	adds	r7, #12
    1dd8:	46bd      	mov	sp, r7
    1dda:	bc80      	pop	{r7}
    1ddc:	4770      	bx	lr
    1dde:	bf00      	nop
    1de0:	20001e90 	.word	0x20001e90

00001de4 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1de4:	b480      	push	{r7}
    1de6:	b083      	sub	sp, #12
    1de8:	af00      	add	r7, sp, #0
    1dea:	4603      	mov	r3, r0
    1dec:	603a      	str	r2, [r7, #0]
    1dee:	71fb      	strb	r3, [r7, #7]
    1df0:	460b      	mov	r3, r1
    1df2:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    1df4:	4b08      	ldr	r3, [pc, #32]	; (1e18 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	2201      	movs	r2, #1
    1dfa:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    1dfc:	4b06      	ldr	r3, [pc, #24]	; (1e18 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1dfe:	681b      	ldr	r3, [r3, #0]
    1e00:	2201      	movs	r2, #1
    1e02:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    1e04:	4b04      	ldr	r3, [pc, #16]	; (1e18 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    1e06:	681b      	ldr	r3, [r3, #0]
    1e08:	2201      	movs	r2, #1
    1e0a:	741a      	strb	r2, [r3, #16]


	return false;
    1e0c:	2300      	movs	r3, #0
}
    1e0e:	4618      	mov	r0, r3
    1e10:	370c      	adds	r7, #12
    1e12:	46bd      	mov	sp, r7
    1e14:	bc80      	pop	{r7}
    1e16:	4770      	bx	lr
    1e18:	20001e90 	.word	0x20001e90

00001e1c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    1e1c:	b480      	push	{r7}
    1e1e:	b083      	sub	sp, #12
    1e20:	af00      	add	r7, sp, #0
    1e22:	4603      	mov	r3, r0
    1e24:	603a      	str	r2, [r7, #0]
    1e26:	71fb      	strb	r3, [r7, #7]
    1e28:	460b      	mov	r3, r1
    1e2a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    1e2c:	4b08      	ldr	r3, [pc, #32]	; (1e50 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1e2e:	681b      	ldr	r3, [r3, #0]
    1e30:	2201      	movs	r2, #1
    1e32:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    1e34:	4b06      	ldr	r3, [pc, #24]	; (1e50 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	2201      	movs	r2, #1
    1e3a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    1e3c:	4b04      	ldr	r3, [pc, #16]	; (1e50 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    1e3e:	681b      	ldr	r3, [r3, #0]
    1e40:	2201      	movs	r2, #1
    1e42:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    1e44:	2300      	movs	r3, #0
}
    1e46:	4618      	mov	r0, r3
    1e48:	370c      	adds	r7, #12
    1e4a:	46bd      	mov	sp, r7
    1e4c:	bc80      	pop	{r7}
    1e4e:	4770      	bx	lr
    1e50:	20001e90 	.word	0x20001e90

00001e54 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    1e54:	b580      	push	{r7, lr}
    1e56:	b082      	sub	sp, #8
    1e58:	af00      	add	r7, sp, #0
    1e5a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    1e5c:	793b      	ldrb	r3, [r7, #4]
    1e5e:	f003 0301 	and.w	r3, r3, #1
    1e62:	b2db      	uxtb	r3, r3
    1e64:	2b00      	cmp	r3, #0
    1e66:	d013      	beq.n	1e90 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    1e68:	490c      	ldr	r1, [pc, #48]	; (1e9c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    1e6a:	2000      	movs	r0, #0
    1e6c:	4b0c      	ldr	r3, [pc, #48]	; (1ea0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    1e6e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    1e70:	490c      	ldr	r1, [pc, #48]	; (1ea4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    1e72:	2001      	movs	r0, #1
    1e74:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    1e76:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    1e78:	4b0b      	ldr	r3, [pc, #44]	; (1ea8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1e7a:	681b      	ldr	r3, [r3, #0]
    1e7c:	2201      	movs	r2, #1
    1e7e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    1e80:	4b09      	ldr	r3, [pc, #36]	; (1ea8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1e82:	681b      	ldr	r3, [r3, #0]
    1e84:	2201      	movs	r2, #1
    1e86:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    1e88:	4b07      	ldr	r3, [pc, #28]	; (1ea8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	2201      	movs	r2, #1
    1e8e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    1e90:	2300      	movs	r3, #0
}
    1e92:	4618      	mov	r0, r3
    1e94:	3708      	adds	r7, #8
    1e96:	46bd      	mov	sp, r7
    1e98:	bd80      	pop	{r7, pc}
    1e9a:	bf00      	nop
    1e9c:	00001de5 	.word	0x00001de5
    1ea0:	0000e899 	.word	0x0000e899
    1ea4:	00001e1d 	.word	0x00001e1d
    1ea8:	20001e90 	.word	0x20001e90

00001eac <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    1eac:	b580      	push	{r7, lr}
    1eae:	b082      	sub	sp, #8
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	4618      	mov	r0, r3
    1eb8:	4b0a      	ldr	r3, [pc, #40]	; (1ee4 <_ZN9CDC_ClassC1Ev+0x38>)
    1eba:	4798      	blx	r3
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	3310      	adds	r3, #16
    1ec0:	4618      	mov	r0, r3
    1ec2:	4b09      	ldr	r3, [pc, #36]	; (1ee8 <_ZN9CDC_ClassC1Ev+0x3c>)
    1ec4:	4798      	blx	r3
    1ec6:	4a09      	ldr	r2, [pc, #36]	; (1eec <_ZN9CDC_ClassC1Ev+0x40>)
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	f04f 32ff 	mov.w	r2, #4294967295
    1ed2:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    1ed4:	4a06      	ldr	r2, [pc, #24]	; (1ef0 <_ZN9CDC_ClassC1Ev+0x44>)
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	4618      	mov	r0, r3
    1ede:	3708      	adds	r7, #8
    1ee0:	46bd      	mov	sp, r7
    1ee2:	bd80      	pop	{r7, pc}
    1ee4:	00001d8d 	.word	0x00001d8d
    1ee8:	00002725 	.word	0x00002725
    1eec:	00012514 	.word	0x00012514
    1ef0:	20001e90 	.word	0x20001e90

00001ef4 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    1ef4:	b580      	push	{r7, lr}
    1ef6:	b082      	sub	sp, #8
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
    1efc:	4a06      	ldr	r2, [pc, #24]	; (1f18 <_ZN9CDC_ClassD1Ev+0x24>)
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	601a      	str	r2, [r3, #0]
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	3310      	adds	r3, #16
    1f06:	4618      	mov	r0, r3
    1f08:	4b04      	ldr	r3, [pc, #16]	; (1f1c <_ZN9CDC_ClassD1Ev+0x28>)
    1f0a:	4798      	blx	r3
{
} //~CDC_Class
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	4618      	mov	r0, r3
    1f10:	3708      	adds	r7, #8
    1f12:	46bd      	mov	sp, r7
    1f14:	bd80      	pop	{r7, pc}
    1f16:	bf00      	nop
    1f18:	00012514 	.word	0x00012514
    1f1c:	00002745 	.word	0x00002745

00001f20 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    1f20:	b580      	push	{r7, lr}
    1f22:	b082      	sub	sp, #8
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
	
	OnInit();
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	3310      	adds	r3, #16
    1f2c:	4618      	mov	r0, r3
    1f2e:	4b07      	ldr	r3, [pc, #28]	; (1f4c <_ZN9CDC_Class4InitEv+0x2c>)
    1f30:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    1f32:	4907      	ldr	r1, [pc, #28]	; (1f50 <_ZN9CDC_Class4InitEv+0x30>)
    1f34:	2003      	movs	r0, #3
    1f36:	4b07      	ldr	r3, [pc, #28]	; (1f54 <_ZN9CDC_Class4InitEv+0x34>)
    1f38:	4798      	blx	r3
	
		
	if (connected)
    1f3a:	687b      	ldr	r3, [r7, #4]
    1f3c:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
    1f3e:	20c8      	movs	r0, #200	; 0xc8
    1f40:	4b05      	ldr	r3, [pc, #20]	; (1f58 <_ZN9CDC_Class4InitEv+0x38>)
    1f42:	4798      	blx	r3

}
    1f44:	bf00      	nop
    1f46:	3708      	adds	r7, #8
    1f48:	46bd      	mov	sp, r7
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00002759 	.word	0x00002759
    1f50:	00001e55 	.word	0x00001e55
    1f54:	0000e899 	.word	0x0000e899
    1f58:	00004435 	.word	0x00004435

00001f5c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b082      	sub	sp, #8
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    1f64:	4b03      	ldr	r3, [pc, #12]	; (1f74 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    1f66:	4798      	blx	r3
    1f68:	4603      	mov	r3, r0
	
}
    1f6a:	4618      	mov	r0, r3
    1f6c:	3708      	adds	r7, #8
    1f6e:	46bd      	mov	sp, r7
    1f70:	bd80      	pop	{r7, pc}
    1f72:	bf00      	nop
    1f74:	0000e911 	.word	0x0000e911

00001f78 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b084      	sub	sp, #16
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	699b      	ldr	r3, [r3, #24]
    1f84:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f88:	bf14      	ite	ne
    1f8a:	2301      	movne	r3, #1
    1f8c:	2300      	moveq	r3, #0
    1f8e:	b2db      	uxtb	r3, r3
    1f90:	2b00      	cmp	r3, #0
    1f92:	d002      	beq.n	1f9a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	699b      	ldr	r3, [r3, #24]
    1f98:	e011      	b.n	1fbe <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	681b      	ldr	r3, [r3, #0]
    1f9e:	331c      	adds	r3, #28
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	f107 010f 	add.w	r1, r7, #15
    1fa6:	2201      	movs	r2, #1
    1fa8:	6878      	ldr	r0, [r7, #4]
    1faa:	4798      	blx	r3
    1fac:	4602      	mov	r2, r0
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    1fb2:	7bfb      	ldrb	r3, [r7, #15]
    1fb4:	461a      	mov	r2, r3
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	699b      	ldr	r3, [r3, #24]
}
    1fbe:	4618      	mov	r0, r3
    1fc0:	3710      	adds	r7, #16
    1fc2:	46bd      	mov	sp, r7
    1fc4:	bd80      	pop	{r7, pc}
	...

00001fc8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b086      	sub	sp, #24
    1fcc:	af00      	add	r7, sp, #0
    1fce:	60f8      	str	r0, [r7, #12]
    1fd0:	60b9      	str	r1, [r7, #8]
    1fd2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    1fd4:	68fb      	ldr	r3, [r7, #12]
    1fd6:	7c1b      	ldrb	r3, [r3, #16]
    1fd8:	b2db      	uxtb	r3, r3
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d02e      	beq.n	203c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    1fde:	687a      	ldr	r2, [r7, #4]
    1fe0:	4613      	mov	r3, r2
    1fe2:	009b      	lsls	r3, r3, #2
    1fe4:	4413      	add	r3, r2
    1fe6:	005b      	lsls	r3, r3, #1
    1fe8:	461a      	mov	r2, r3
    1fea:	4918      	ldr	r1, [pc, #96]	; (204c <_ZN9CDC_Class8readDataEPvl+0x84>)
    1fec:	4818      	ldr	r0, [pc, #96]	; (2050 <_ZN9CDC_Class8readDataEPvl+0x88>)
    1fee:	4b19      	ldr	r3, [pc, #100]	; (2054 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    1ff0:	4798      	blx	r3
		rxReady=false;
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	2200      	movs	r2, #0
    1ff6:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	4619      	mov	r1, r3
    1ffc:	68b8      	ldr	r0, [r7, #8]
    1ffe:	4b16      	ldr	r3, [pc, #88]	; (2058 <_ZN9CDC_Class8readDataEPvl+0x90>)
    2000:	4798      	blx	r3
    2002:	4603      	mov	r3, r0
    2004:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	7d5b      	ldrb	r3, [r3, #21]
    200a:	b2db      	uxtb	r3, r3
    200c:	f083 0301 	eor.w	r3, r3, #1
    2010:	b2db      	uxtb	r3, r3
    2012:	2b00      	cmp	r3, #0
    2014:	d006      	beq.n	2024 <_ZN9CDC_Class8readDataEPvl+0x5c>
    2016:	68fb      	ldr	r3, [r7, #12]
    2018:	7c1b      	ldrb	r3, [r3, #16]
    201a:	b2db      	uxtb	r3, r3
    201c:	2b00      	cmp	r3, #0
    201e:	d001      	beq.n	2024 <_ZN9CDC_Class8readDataEPvl+0x5c>
    2020:	2301      	movs	r3, #1
    2022:	e000      	b.n	2026 <_ZN9CDC_Class8readDataEPvl+0x5e>
    2024:	2300      	movs	r3, #0
    2026:	2b00      	cmp	r3, #0
    2028:	d000      	beq.n	202c <_ZN9CDC_Class8readDataEPvl+0x64>
    202a:	e7ec      	b.n	2006 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    202c:	4808      	ldr	r0, [pc, #32]	; (2050 <_ZN9CDC_Class8readDataEPvl+0x88>)
    202e:	4b0b      	ldr	r3, [pc, #44]	; (205c <_ZN9CDC_Class8readDataEPvl+0x94>)
    2030:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    2032:	4906      	ldr	r1, [pc, #24]	; (204c <_ZN9CDC_Class8readDataEPvl+0x84>)
    2034:	4806      	ldr	r0, [pc, #24]	; (2050 <_ZN9CDC_Class8readDataEPvl+0x88>)
    2036:	4b0a      	ldr	r3, [pc, #40]	; (2060 <_ZN9CDC_Class8readDataEPvl+0x98>)
    2038:	4798      	blx	r3
    203a:	e001      	b.n	2040 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    203c:	2300      	movs	r3, #0
    203e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    2040:	7dfb      	ldrb	r3, [r7, #23]
}
    2042:	4618      	mov	r0, r3
    2044:	3718      	adds	r7, #24
    2046:	46bd      	mov	sp, r7
    2048:	bd80      	pop	{r7, pc}
    204a:	bf00      	nop
    204c:	00001dbd 	.word	0x00001dbd
    2050:	20001f9c 	.word	0x20001f9c
    2054:	0000295d 	.word	0x0000295d
    2058:	0000e7ed 	.word	0x0000e7ed
    205c:	000028a5 	.word	0x000028a5
    2060:	00002995 	.word	0x00002995

00002064 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    2064:	b580      	push	{r7, lr}
    2066:	b084      	sub	sp, #16
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	2200      	movs	r2, #0
    2070:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    2072:	f107 030f 	add.w	r3, r7, #15
    2076:	2101      	movs	r1, #1
    2078:	4618      	mov	r0, r3
    207a:	4b08      	ldr	r3, [pc, #32]	; (209c <_ZN9CDC_Class4readEv+0x38>)
    207c:	4798      	blx	r3
	while(!rxReady);
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	7d5b      	ldrb	r3, [r3, #21]
    2082:	b2db      	uxtb	r3, r3
    2084:	f083 0301 	eor.w	r3, r3, #1
    2088:	b2db      	uxtb	r3, r3
    208a:	2b00      	cmp	r3, #0
    208c:	d000      	beq.n	2090 <_ZN9CDC_Class4readEv+0x2c>
    208e:	e7f6      	b.n	207e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    2090:	7bfb      	ldrb	r3, [r7, #15]
}
    2092:	4618      	mov	r0, r3
    2094:	3710      	adds	r7, #16
    2096:	46bd      	mov	sp, r7
    2098:	bd80      	pop	{r7, pc}
    209a:	bf00      	nop
    209c:	0000e7ed 	.word	0x0000e7ed

000020a0 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    20a0:	b580      	push	{r7, lr}
    20a2:	b082      	sub	sp, #8
    20a4:	af00      	add	r7, sp, #0
    20a6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	331c      	adds	r3, #28
    20ac:	2140      	movs	r1, #64	; 0x40
    20ae:	4618      	mov	r0, r3
    20b0:	4b02      	ldr	r3, [pc, #8]	; (20bc <_ZN9CDC_Class5flushEv+0x1c>)
    20b2:	4798      	blx	r3
}
    20b4:	bf00      	nop
    20b6:	3708      	adds	r7, #8
    20b8:	46bd      	mov	sp, r7
    20ba:	bd80      	pop	{r7, pc}
    20bc:	0000e831 	.word	0x0000e831

000020c0 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    20c0:	b580      	push	{r7, lr}
    20c2:	b082      	sub	sp, #8
    20c4:	af00      	add	r7, sp, #0
    20c6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    20c8:	4b02      	ldr	r3, [pc, #8]	; (20d4 <_ZN9CDC_Class5clearEv+0x14>)
    20ca:	4798      	blx	r3
}
    20cc:	bf00      	nop
    20ce:	3708      	adds	r7, #8
    20d0:	46bd      	mov	sp, r7
    20d2:	bd80      	pop	{r7, pc}
    20d4:	0000e875 	.word	0x0000e875

000020d8 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    20d8:	b580      	push	{r7, lr}
    20da:	b082      	sub	sp, #8
    20dc:	af00      	add	r7, sp, #0
    20de:	6078      	str	r0, [r7, #4]
    20e0:	460b      	mov	r3, r1
    20e2:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	7d1b      	ldrb	r3, [r3, #20]
    20e8:	b2db      	uxtb	r3, r3
    20ea:	f083 0301 	eor.w	r3, r3, #1
    20ee:	b2db      	uxtb	r3, r3
    20f0:	2b00      	cmp	r3, #0
    20f2:	d000      	beq.n	20f6 <_ZN9CDC_Class5writeEh+0x1e>
    20f4:	e7f6      	b.n	20e4 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	3324      	adds	r3, #36	; 0x24
    20fc:	681b      	ldr	r3, [r3, #0]
    20fe:	1cf9      	adds	r1, r7, #3
    2100:	2201      	movs	r2, #1
    2102:	6878      	ldr	r0, [r7, #4]
    2104:	4798      	blx	r3
    2106:	4603      	mov	r3, r0
}
    2108:	4618      	mov	r0, r3
    210a:	3708      	adds	r7, #8
    210c:	46bd      	mov	sp, r7
    210e:	bd80      	pop	{r7, pc}

00002110 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    2110:	b580      	push	{r7, lr}
    2112:	b086      	sub	sp, #24
    2114:	af00      	add	r7, sp, #0
    2116:	60f8      	str	r0, [r7, #12]
    2118:	60b9      	str	r1, [r7, #8]
    211a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    211c:	68fb      	ldr	r3, [r7, #12]
    211e:	7c1b      	ldrb	r3, [r3, #16]
    2120:	b2db      	uxtb	r3, r3
    2122:	2b00      	cmp	r3, #0
    2124:	d02f      	beq.n	2186 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    2126:	687a      	ldr	r2, [r7, #4]
    2128:	4613      	mov	r3, r2
    212a:	009b      	lsls	r3, r3, #2
    212c:	4413      	add	r3, r2
    212e:	005b      	lsls	r3, r3, #1
    2130:	461a      	mov	r2, r3
    2132:	4917      	ldr	r1, [pc, #92]	; (2190 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    2134:	4817      	ldr	r0, [pc, #92]	; (2194 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    2136:	4b18      	ldr	r3, [pc, #96]	; (2198 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    2138:	4798      	blx	r3
		txReady=false;
    213a:	68fb      	ldr	r3, [r7, #12]
    213c:	2200      	movs	r2, #0
    213e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	4619      	mov	r1, r3
    2144:	68b8      	ldr	r0, [r7, #8]
    2146:	4b15      	ldr	r3, [pc, #84]	; (219c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    2148:	4798      	blx	r3
    214a:	4603      	mov	r3, r0
    214c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	7d1b      	ldrb	r3, [r3, #20]
    2152:	b2db      	uxtb	r3, r3
    2154:	f083 0301 	eor.w	r3, r3, #1
    2158:	b2db      	uxtb	r3, r3
    215a:	2b00      	cmp	r3, #0
    215c:	d006      	beq.n	216c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    215e:	68fb      	ldr	r3, [r7, #12]
    2160:	7c1b      	ldrb	r3, [r3, #16]
    2162:	b2db      	uxtb	r3, r3
    2164:	2b00      	cmp	r3, #0
    2166:	d001      	beq.n	216c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    2168:	2301      	movs	r3, #1
    216a:	e000      	b.n	216e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    216c:	2300      	movs	r3, #0
    216e:	2b00      	cmp	r3, #0
    2170:	d000      	beq.n	2174 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    2172:	e7ec      	b.n	214e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    2174:	4807      	ldr	r0, [pc, #28]	; (2194 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    2176:	4b0a      	ldr	r3, [pc, #40]	; (21a0 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    2178:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    217a:	4905      	ldr	r1, [pc, #20]	; (2190 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    217c:	4805      	ldr	r0, [pc, #20]	; (2194 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    217e:	4b09      	ldr	r3, [pc, #36]	; (21a4 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    2180:	4798      	blx	r3
		return r;
    2182:	697b      	ldr	r3, [r7, #20]
    2184:	e000      	b.n	2188 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    2186:	2300      	movs	r3, #0
	}
	

}
    2188:	4618      	mov	r0, r3
    218a:	3718      	adds	r7, #24
    218c:	46bd      	mov	sp, r7
    218e:	bd80      	pop	{r7, pc}
    2190:	00001dbd 	.word	0x00001dbd
    2194:	20001f9c 	.word	0x20001f9c
    2198:	0000295d 	.word	0x0000295d
    219c:	0000e831 	.word	0x0000e831
    21a0:	000028a5 	.word	0x000028a5
    21a4:	00002995 	.word	0x00002995

000021a8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    21a8:	b580      	push	{r7, lr}
    21aa:	b086      	sub	sp, #24
    21ac:	af00      	add	r7, sp, #0
    21ae:	60f8      	str	r0, [r7, #12]
    21b0:	60b9      	str	r1, [r7, #8]
    21b2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    21b4:	68fb      	ldr	r3, [r7, #12]
    21b6:	2200      	movs	r2, #0
    21b8:	751a      	strb	r2, [r3, #20]

 	if (connected){
    21ba:	68fb      	ldr	r3, [r7, #12]
    21bc:	7c1b      	ldrb	r3, [r3, #16]
    21be:	b2db      	uxtb	r3, r3
    21c0:	2b00      	cmp	r3, #0
    21c2:	d02a      	beq.n	221a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    21c4:	687a      	ldr	r2, [r7, #4]
    21c6:	4613      	mov	r3, r2
    21c8:	009b      	lsls	r3, r3, #2
    21ca:	4413      	add	r3, r2
    21cc:	005b      	lsls	r3, r3, #1
    21ce:	461a      	mov	r2, r3
    21d0:	4915      	ldr	r1, [pc, #84]	; (2228 <_ZN9CDC_Class5writeEPKhj+0x80>)
    21d2:	4816      	ldr	r0, [pc, #88]	; (222c <_ZN9CDC_Class5writeEPKhj+0x84>)
    21d4:	4b16      	ldr	r3, [pc, #88]	; (2230 <_ZN9CDC_Class5writeEPKhj+0x88>)
    21d6:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    21d8:	6879      	ldr	r1, [r7, #4]
    21da:	68b8      	ldr	r0, [r7, #8]
    21dc:	4b15      	ldr	r3, [pc, #84]	; (2234 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    21de:	4798      	blx	r3
    21e0:	4603      	mov	r3, r0
    21e2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    21e4:	68fb      	ldr	r3, [r7, #12]
    21e6:	7d1b      	ldrb	r3, [r3, #20]
    21e8:	b2db      	uxtb	r3, r3
    21ea:	f083 0301 	eor.w	r3, r3, #1
    21ee:	b2db      	uxtb	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d006      	beq.n	2202 <_ZN9CDC_Class5writeEPKhj+0x5a>
    21f4:	68fb      	ldr	r3, [r7, #12]
    21f6:	7c1b      	ldrb	r3, [r3, #16]
    21f8:	b2db      	uxtb	r3, r3
    21fa:	2b00      	cmp	r3, #0
    21fc:	d001      	beq.n	2202 <_ZN9CDC_Class5writeEPKhj+0x5a>
    21fe:	2301      	movs	r3, #1
    2200:	e000      	b.n	2204 <_ZN9CDC_Class5writeEPKhj+0x5c>
    2202:	2300      	movs	r3, #0
    2204:	2b00      	cmp	r3, #0
    2206:	d000      	beq.n	220a <_ZN9CDC_Class5writeEPKhj+0x62>
    2208:	e7ec      	b.n	21e4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    220a:	4808      	ldr	r0, [pc, #32]	; (222c <_ZN9CDC_Class5writeEPKhj+0x84>)
    220c:	4b0a      	ldr	r3, [pc, #40]	; (2238 <_ZN9CDC_Class5writeEPKhj+0x90>)
    220e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    2210:	4905      	ldr	r1, [pc, #20]	; (2228 <_ZN9CDC_Class5writeEPKhj+0x80>)
    2212:	4806      	ldr	r0, [pc, #24]	; (222c <_ZN9CDC_Class5writeEPKhj+0x84>)
    2214:	4b09      	ldr	r3, [pc, #36]	; (223c <_ZN9CDC_Class5writeEPKhj+0x94>)
    2216:	4798      	blx	r3
    2218:	e001      	b.n	221e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    221a:	2300      	movs	r3, #0
    221c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    221e:	697b      	ldr	r3, [r7, #20]
}
    2220:	4618      	mov	r0, r3
    2222:	3718      	adds	r7, #24
    2224:	46bd      	mov	sp, r7
    2226:	bd80      	pop	{r7, pc}
    2228:	00001dbd 	.word	0x00001dbd
    222c:	20001f9c 	.word	0x20001f9c
    2230:	0000295d 	.word	0x0000295d
    2234:	0000e831 	.word	0x0000e831
    2238:	000028a5 	.word	0x000028a5
    223c:	00002995 	.word	0x00002995

00002240 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    2240:	b480      	push	{r7}
    2242:	b083      	sub	sp, #12
    2244:	af00      	add	r7, sp, #0
    2246:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	7d5b      	ldrb	r3, [r3, #21]
    224c:	b2db      	uxtb	r3, r3
    224e:	2b00      	cmp	r3, #0
    2250:	d006      	beq.n	2260 <_ZN9CDC_Class9availableEv+0x20>
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	7d1b      	ldrb	r3, [r3, #20]
    2256:	b2db      	uxtb	r3, r3
    2258:	2b00      	cmp	r3, #0
    225a:	d001      	beq.n	2260 <_ZN9CDC_Class9availableEv+0x20>
    225c:	2301      	movs	r3, #1
    225e:	e000      	b.n	2262 <_ZN9CDC_Class9availableEv+0x22>
    2260:	2300      	movs	r3, #0
    2262:	2b00      	cmp	r3, #0
    2264:	d001      	beq.n	226a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    2266:	2301      	movs	r3, #1
    2268:	e000      	b.n	226c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    226a:	2300      	movs	r3, #0
	}
	
}
    226c:	4618      	mov	r0, r3
    226e:	370c      	adds	r7, #12
    2270:	46bd      	mov	sp, r7
    2272:	bc80      	pop	{r7}
    2274:	4770      	bx	lr
	...

00002278 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    2278:	b580      	push	{r7, lr}
    227a:	b082      	sub	sp, #8
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
    2280:	6039      	str	r1, [r7, #0]
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	2b01      	cmp	r3, #1
    2286:	d10c      	bne.n	22a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2288:	683b      	ldr	r3, [r7, #0]
    228a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    228e:	4293      	cmp	r3, r2
    2290:	d107      	bne.n	22a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2292:	4806      	ldr	r0, [pc, #24]	; (22ac <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2294:	4b06      	ldr	r3, [pc, #24]	; (22b0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2296:	4798      	blx	r3
    2298:	4a06      	ldr	r2, [pc, #24]	; (22b4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    229a:	4907      	ldr	r1, [pc, #28]	; (22b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    229c:	4803      	ldr	r0, [pc, #12]	; (22ac <_Z41__static_initialization_and_destruction_0ii+0x34>)
    229e:	4b07      	ldr	r3, [pc, #28]	; (22bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    22a0:	4798      	blx	r3
    22a2:	bf00      	nop
    22a4:	3708      	adds	r7, #8
    22a6:	46bd      	mov	sp, r7
    22a8:	bd80      	pop	{r7, pc}
    22aa:	bf00      	nop
    22ac:	20001e94 	.word	0x20001e94
    22b0:	00001ead 	.word	0x00001ead
    22b4:	20000000 	.word	0x20000000
    22b8:	00001ef5 	.word	0x00001ef5
    22bc:	0000f915 	.word	0x0000f915

000022c0 <_GLOBAL__sub_I_ptrCDCClass>:
    22c0:	b580      	push	{r7, lr}
    22c2:	af00      	add	r7, sp, #0
    22c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    22c8:	2001      	movs	r0, #1
    22ca:	4b01      	ldr	r3, [pc, #4]	; (22d0 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    22cc:	4798      	blx	r3
    22ce:	bd80      	pop	{r7, pc}
    22d0:	00002279 	.word	0x00002279

000022d4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    22d4:	b590      	push	{r4, r7, lr}
    22d6:	b083      	sub	sp, #12
    22d8:	af00      	add	r7, sp, #0
    22da:	6078      	str	r0, [r7, #4]
    22dc:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    22de:	683b      	ldr	r3, [r7, #0]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d101      	bne.n	22e8 <_ZN5Print5writeEPKc+0x14>
    22e4:	2300      	movs	r3, #0
    22e6:	e00c      	b.n	2302 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	681b      	ldr	r3, [r3, #0]
    22ec:	3304      	adds	r3, #4
    22ee:	681c      	ldr	r4, [r3, #0]
    22f0:	6838      	ldr	r0, [r7, #0]
    22f2:	4b06      	ldr	r3, [pc, #24]	; (230c <_ZN5Print5writeEPKc+0x38>)
    22f4:	4798      	blx	r3
    22f6:	4603      	mov	r3, r0
    22f8:	461a      	mov	r2, r3
    22fa:	6839      	ldr	r1, [r7, #0]
    22fc:	6878      	ldr	r0, [r7, #4]
    22fe:	47a0      	blx	r4
    2300:	4603      	mov	r3, r0
    }
    2302:	4618      	mov	r0, r3
    2304:	370c      	adds	r7, #12
    2306:	46bd      	mov	sp, r7
    2308:	bd90      	pop	{r4, r7, pc}
    230a:	bf00      	nop
    230c:	00011641 	.word	0x00011641

00002310 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2310:	b580      	push	{r7, lr}
    2312:	b086      	sub	sp, #24
    2314:	af00      	add	r7, sp, #0
    2316:	60f8      	str	r0, [r7, #12]
    2318:	60b9      	str	r1, [r7, #8]
    231a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    231c:	2300      	movs	r3, #0
    231e:	617b      	str	r3, [r7, #20]
  while (size--) {
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	1e5a      	subs	r2, r3, #1
    2324:	607a      	str	r2, [r7, #4]
    2326:	2b00      	cmp	r3, #0
    2328:	bf14      	ite	ne
    232a:	2301      	movne	r3, #1
    232c:	2300      	moveq	r3, #0
    232e:	b2db      	uxtb	r3, r3
    2330:	2b00      	cmp	r3, #0
    2332:	d016      	beq.n	2362 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    2334:	68fb      	ldr	r3, [r7, #12]
    2336:	681b      	ldr	r3, [r3, #0]
    2338:	681a      	ldr	r2, [r3, #0]
    233a:	68bb      	ldr	r3, [r7, #8]
    233c:	1c59      	adds	r1, r3, #1
    233e:	60b9      	str	r1, [r7, #8]
    2340:	781b      	ldrb	r3, [r3, #0]
    2342:	4619      	mov	r1, r3
    2344:	68f8      	ldr	r0, [r7, #12]
    2346:	4790      	blx	r2
    2348:	4603      	mov	r3, r0
    234a:	2b00      	cmp	r3, #0
    234c:	bf14      	ite	ne
    234e:	2301      	movne	r3, #1
    2350:	2300      	moveq	r3, #0
    2352:	b2db      	uxtb	r3, r3
    2354:	2b00      	cmp	r3, #0
    2356:	d003      	beq.n	2360 <_ZN5Print5writeEPKhj+0x50>
    2358:	697b      	ldr	r3, [r7, #20]
    235a:	3301      	adds	r3, #1
    235c:	617b      	str	r3, [r7, #20]
  while (size--) {
    235e:	e7df      	b.n	2320 <_ZN5Print5writeEPKhj+0x10>
    else break;
    2360:	bf00      	nop
  }
  return n;
    2362:	697b      	ldr	r3, [r7, #20]
}
    2364:	4618      	mov	r0, r3
    2366:	3718      	adds	r7, #24
    2368:	46bd      	mov	sp, r7
    236a:	bd80      	pop	{r7, pc}

0000236c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    236c:	b580      	push	{r7, lr}
    236e:	b082      	sub	sp, #8
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
    2374:	6039      	str	r1, [r7, #0]
  return write(str);
    2376:	6839      	ldr	r1, [r7, #0]
    2378:	6878      	ldr	r0, [r7, #4]
    237a:	4b03      	ldr	r3, [pc, #12]	; (2388 <_ZN5Print5printEPKc+0x1c>)
    237c:	4798      	blx	r3
    237e:	4603      	mov	r3, r0
}
    2380:	4618      	mov	r0, r3
    2382:	3708      	adds	r7, #8
    2384:	46bd      	mov	sp, r7
    2386:	bd80      	pop	{r7, pc}
    2388:	000022d5 	.word	0x000022d5

0000238c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    238c:	b580      	push	{r7, lr}
    238e:	b082      	sub	sp, #8
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
    2394:	460b      	mov	r3, r1
    2396:	70fb      	strb	r3, [r7, #3]
  return write(c);
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	681b      	ldr	r3, [r3, #0]
    239c:	681b      	ldr	r3, [r3, #0]
    239e:	78fa      	ldrb	r2, [r7, #3]
    23a0:	4611      	mov	r1, r2
    23a2:	6878      	ldr	r0, [r7, #4]
    23a4:	4798      	blx	r3
    23a6:	4603      	mov	r3, r0
}
    23a8:	4618      	mov	r0, r3
    23aa:	3708      	adds	r7, #8
    23ac:	46bd      	mov	sp, r7
    23ae:	bd80      	pop	{r7, pc}

000023b0 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	b084      	sub	sp, #16
    23b4:	af00      	add	r7, sp, #0
    23b6:	60f8      	str	r0, [r7, #12]
    23b8:	460b      	mov	r3, r1
    23ba:	607a      	str	r2, [r7, #4]
    23bc:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    23be:	7afb      	ldrb	r3, [r7, #11]
    23c0:	687a      	ldr	r2, [r7, #4]
    23c2:	4619      	mov	r1, r3
    23c4:	68f8      	ldr	r0, [r7, #12]
    23c6:	4b03      	ldr	r3, [pc, #12]	; (23d4 <_ZN5Print5printEhi+0x24>)
    23c8:	4798      	blx	r3
    23ca:	4603      	mov	r3, r0
}
    23cc:	4618      	mov	r0, r3
    23ce:	3710      	adds	r7, #16
    23d0:	46bd      	mov	sp, r7
    23d2:	bd80      	pop	{r7, pc}
    23d4:	00002485 	.word	0x00002485

000023d8 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    23d8:	b580      	push	{r7, lr}
    23da:	b084      	sub	sp, #16
    23dc:	af00      	add	r7, sp, #0
    23de:	60f8      	str	r0, [r7, #12]
    23e0:	60b9      	str	r1, [r7, #8]
    23e2:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    23e4:	687a      	ldr	r2, [r7, #4]
    23e6:	68b9      	ldr	r1, [r7, #8]
    23e8:	68f8      	ldr	r0, [r7, #12]
    23ea:	4b03      	ldr	r3, [pc, #12]	; (23f8 <_ZN5Print5printEii+0x20>)
    23ec:	4798      	blx	r3
    23ee:	4603      	mov	r3, r0
}
    23f0:	4618      	mov	r0, r3
    23f2:	3710      	adds	r7, #16
    23f4:	46bd      	mov	sp, r7
    23f6:	bd80      	pop	{r7, pc}
    23f8:	000023fd 	.word	0x000023fd

000023fc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b086      	sub	sp, #24
    2400:	af00      	add	r7, sp, #0
    2402:	60f8      	str	r0, [r7, #12]
    2404:	60b9      	str	r1, [r7, #8]
    2406:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	2b00      	cmp	r3, #0
    240c:	d109      	bne.n	2422 <_ZN5Print5printEli+0x26>
    return write(n);
    240e:	68fb      	ldr	r3, [r7, #12]
    2410:	681b      	ldr	r3, [r3, #0]
    2412:	681b      	ldr	r3, [r3, #0]
    2414:	68ba      	ldr	r2, [r7, #8]
    2416:	b2d2      	uxtb	r2, r2
    2418:	4611      	mov	r1, r2
    241a:	68f8      	ldr	r0, [r7, #12]
    241c:	4798      	blx	r3
    241e:	4603      	mov	r3, r0
    2420:	e028      	b.n	2474 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    2422:	687b      	ldr	r3, [r7, #4]
    2424:	2b0a      	cmp	r3, #10
    2426:	d11d      	bne.n	2464 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    2428:	68bb      	ldr	r3, [r7, #8]
    242a:	2b00      	cmp	r3, #0
    242c:	da12      	bge.n	2454 <_ZN5Print5printEli+0x58>
      int t = print('-');
    242e:	212d      	movs	r1, #45	; 0x2d
    2430:	68f8      	ldr	r0, [r7, #12]
    2432:	4b12      	ldr	r3, [pc, #72]	; (247c <_ZN5Print5printEli+0x80>)
    2434:	4798      	blx	r3
    2436:	4603      	mov	r3, r0
    2438:	617b      	str	r3, [r7, #20]
      n = -n;
    243a:	68bb      	ldr	r3, [r7, #8]
    243c:	425b      	negs	r3, r3
    243e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    2440:	68bb      	ldr	r3, [r7, #8]
    2442:	220a      	movs	r2, #10
    2444:	4619      	mov	r1, r3
    2446:	68f8      	ldr	r0, [r7, #12]
    2448:	4b0d      	ldr	r3, [pc, #52]	; (2480 <_ZN5Print5printEli+0x84>)
    244a:	4798      	blx	r3
    244c:	4602      	mov	r2, r0
    244e:	697b      	ldr	r3, [r7, #20]
    2450:	4413      	add	r3, r2
    2452:	e00f      	b.n	2474 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    2454:	68bb      	ldr	r3, [r7, #8]
    2456:	220a      	movs	r2, #10
    2458:	4619      	mov	r1, r3
    245a:	68f8      	ldr	r0, [r7, #12]
    245c:	4b08      	ldr	r3, [pc, #32]	; (2480 <_ZN5Print5printEli+0x84>)
    245e:	4798      	blx	r3
    2460:	4603      	mov	r3, r0
    2462:	e007      	b.n	2474 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    2464:	68bb      	ldr	r3, [r7, #8]
    2466:	687a      	ldr	r2, [r7, #4]
    2468:	b2d2      	uxtb	r2, r2
    246a:	4619      	mov	r1, r3
    246c:	68f8      	ldr	r0, [r7, #12]
    246e:	4b04      	ldr	r3, [pc, #16]	; (2480 <_ZN5Print5printEli+0x84>)
    2470:	4798      	blx	r3
    2472:	4603      	mov	r3, r0
  }
}
    2474:	4618      	mov	r0, r3
    2476:	3718      	adds	r7, #24
    2478:	46bd      	mov	sp, r7
    247a:	bd80      	pop	{r7, pc}
    247c:	0000238d 	.word	0x0000238d
    2480:	00002529 	.word	0x00002529

00002484 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    2484:	b580      	push	{r7, lr}
    2486:	b084      	sub	sp, #16
    2488:	af00      	add	r7, sp, #0
    248a:	60f8      	str	r0, [r7, #12]
    248c:	60b9      	str	r1, [r7, #8]
    248e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	2b00      	cmp	r3, #0
    2494:	d109      	bne.n	24aa <_ZN5Print5printEmi+0x26>
    2496:	68fb      	ldr	r3, [r7, #12]
    2498:	681b      	ldr	r3, [r3, #0]
    249a:	681b      	ldr	r3, [r3, #0]
    249c:	68ba      	ldr	r2, [r7, #8]
    249e:	b2d2      	uxtb	r2, r2
    24a0:	4611      	mov	r1, r2
    24a2:	68f8      	ldr	r0, [r7, #12]
    24a4:	4798      	blx	r3
    24a6:	4603      	mov	r3, r0
    24a8:	e007      	b.n	24ba <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	b2db      	uxtb	r3, r3
    24ae:	461a      	mov	r2, r3
    24b0:	68b9      	ldr	r1, [r7, #8]
    24b2:	68f8      	ldr	r0, [r7, #12]
    24b4:	4b03      	ldr	r3, [pc, #12]	; (24c4 <_ZN5Print5printEmi+0x40>)
    24b6:	4798      	blx	r3
    24b8:	4603      	mov	r3, r0
}
    24ba:	4618      	mov	r0, r3
    24bc:	3710      	adds	r7, #16
    24be:	46bd      	mov	sp, r7
    24c0:	bd80      	pop	{r7, pc}
    24c2:	bf00      	nop
    24c4:	00002529 	.word	0x00002529

000024c8 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b082      	sub	sp, #8
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    24d0:	4904      	ldr	r1, [pc, #16]	; (24e4 <_ZN5Print7printlnEv+0x1c>)
    24d2:	6878      	ldr	r0, [r7, #4]
    24d4:	4b04      	ldr	r3, [pc, #16]	; (24e8 <_ZN5Print7printlnEv+0x20>)
    24d6:	4798      	blx	r3
    24d8:	4603      	mov	r3, r0
}
    24da:	4618      	mov	r0, r3
    24dc:	3708      	adds	r7, #8
    24de:	46bd      	mov	sp, r7
    24e0:	bd80      	pop	{r7, pc}
    24e2:	bf00      	nop
    24e4:	00012568 	.word	0x00012568
    24e8:	000022d5 	.word	0x000022d5

000024ec <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    24ec:	b580      	push	{r7, lr}
    24ee:	b086      	sub	sp, #24
    24f0:	af00      	add	r7, sp, #0
    24f2:	60f8      	str	r0, [r7, #12]
    24f4:	460b      	mov	r3, r1
    24f6:	607a      	str	r2, [r7, #4]
    24f8:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
    24fa:	7afb      	ldrb	r3, [r7, #11]
    24fc:	687a      	ldr	r2, [r7, #4]
    24fe:	4619      	mov	r1, r3
    2500:	68f8      	ldr	r0, [r7, #12]
    2502:	4b07      	ldr	r3, [pc, #28]	; (2520 <_ZN5Print7printlnEhi+0x34>)
    2504:	4798      	blx	r3
    2506:	6178      	str	r0, [r7, #20]
  n += println();
    2508:	68f8      	ldr	r0, [r7, #12]
    250a:	4b06      	ldr	r3, [pc, #24]	; (2524 <_ZN5Print7printlnEhi+0x38>)
    250c:	4798      	blx	r3
    250e:	4602      	mov	r2, r0
    2510:	697b      	ldr	r3, [r7, #20]
    2512:	4413      	add	r3, r2
    2514:	617b      	str	r3, [r7, #20]
  return n;
    2516:	697b      	ldr	r3, [r7, #20]
}
    2518:	4618      	mov	r0, r3
    251a:	3718      	adds	r7, #24
    251c:	46bd      	mov	sp, r7
    251e:	bd80      	pop	{r7, pc}
    2520:	000023b1 	.word	0x000023b1
    2524:	000024c9 	.word	0x000024c9

00002528 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    2528:	b580      	push	{r7, lr}
    252a:	b08e      	sub	sp, #56	; 0x38
    252c:	af00      	add	r7, sp, #0
    252e:	60f8      	str	r0, [r7, #12]
    2530:	60b9      	str	r1, [r7, #8]
    2532:	4613      	mov	r3, r2
    2534:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    2536:	f107 0310 	add.w	r3, r7, #16
    253a:	3320      	adds	r3, #32
    253c:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2540:	2200      	movs	r2, #0
    2542:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2544:	79fb      	ldrb	r3, [r7, #7]
    2546:	2b01      	cmp	r3, #1
    2548:	dc01      	bgt.n	254e <_ZN5Print11printNumberEmh+0x26>
    254a:	230a      	movs	r3, #10
    254c:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    254e:	79fa      	ldrb	r2, [r7, #7]
    2550:	68bb      	ldr	r3, [r7, #8]
    2552:	fbb3 f1f2 	udiv	r1, r3, r2
    2556:	fb02 f201 	mul.w	r2, r2, r1
    255a:	1a9b      	subs	r3, r3, r2
    255c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    2560:	79fb      	ldrb	r3, [r7, #7]
    2562:	68ba      	ldr	r2, [r7, #8]
    2564:	fbb2 f3f3 	udiv	r3, r2, r3
    2568:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    256c:	3b01      	subs	r3, #1
    256e:	637b      	str	r3, [r7, #52]	; 0x34
    2570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2574:	2b09      	cmp	r3, #9
    2576:	dc04      	bgt.n	2582 <_ZN5Print11printNumberEmh+0x5a>
    2578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    257c:	3330      	adds	r3, #48	; 0x30
    257e:	b2db      	uxtb	r3, r3
    2580:	e003      	b.n	258a <_ZN5Print11printNumberEmh+0x62>
    2582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2586:	3337      	adds	r3, #55	; 0x37
    2588:	b2db      	uxtb	r3, r3
    258a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    258c:	7013      	strb	r3, [r2, #0]
  } while(n);
    258e:	68bb      	ldr	r3, [r7, #8]
    2590:	2b00      	cmp	r3, #0
    2592:	d000      	beq.n	2596 <_ZN5Print11printNumberEmh+0x6e>
  do {
    2594:	e7db      	b.n	254e <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    2596:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2598:	68f8      	ldr	r0, [r7, #12]
    259a:	4b03      	ldr	r3, [pc, #12]	; (25a8 <_ZN5Print11printNumberEmh+0x80>)
    259c:	4798      	blx	r3
    259e:	4603      	mov	r3, r0
}
    25a0:	4618      	mov	r0, r3
    25a2:	3738      	adds	r7, #56	; 0x38
    25a4:	46bd      	mov	sp, r7
    25a6:	bd80      	pop	{r7, pc}
    25a8:	000022d5 	.word	0x000022d5

000025ac <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    25ac:	b480      	push	{r7}
    25ae:	b083      	sub	sp, #12
    25b0:	af00      	add	r7, sp, #0
    25b2:	6078      	str	r0, [r7, #4]
    25b4:	460b      	mov	r3, r1
    25b6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25b8:	78fb      	ldrb	r3, [r7, #3]
    25ba:	687a      	ldr	r2, [r7, #4]
    25bc:	01db      	lsls	r3, r3, #7
    25be:	4413      	add	r3, r2
    25c0:	681b      	ldr	r3, [r3, #0]
}
    25c2:	4618      	mov	r0, r3
    25c4:	370c      	adds	r7, #12
    25c6:	46bd      	mov	sp, r7
    25c8:	bc80      	pop	{r7}
    25ca:	4770      	bx	lr

000025cc <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    25cc:	b480      	push	{r7}
    25ce:	b083      	sub	sp, #12
    25d0:	af00      	add	r7, sp, #0
    25d2:	6078      	str	r0, [r7, #4]
    25d4:	460b      	mov	r3, r1
    25d6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25d8:	78fb      	ldrb	r3, [r7, #3]
    25da:	687a      	ldr	r2, [r7, #4]
    25dc:	01db      	lsls	r3, r3, #7
    25de:	4413      	add	r3, r2
    25e0:	3310      	adds	r3, #16
    25e2:	681b      	ldr	r3, [r3, #0]
}
    25e4:	4618      	mov	r0, r3
    25e6:	370c      	adds	r7, #12
    25e8:	46bd      	mov	sp, r7
    25ea:	bc80      	pop	{r7}
    25ec:	4770      	bx	lr

000025ee <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    25ee:	b480      	push	{r7}
    25f0:	b083      	sub	sp, #12
    25f2:	af00      	add	r7, sp, #0
    25f4:	6078      	str	r0, [r7, #4]
    25f6:	460b      	mov	r3, r1
    25f8:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25fa:	78fb      	ldrb	r3, [r7, #3]
    25fc:	687a      	ldr	r2, [r7, #4]
    25fe:	01db      	lsls	r3, r3, #7
    2600:	4413      	add	r3, r2
    2602:	3320      	adds	r3, #32
    2604:	681b      	ldr	r3, [r3, #0]
}
    2606:	4618      	mov	r0, r3
    2608:	370c      	adds	r7, #12
    260a:	46bd      	mov	sp, r7
    260c:	bc80      	pop	{r7}
    260e:	4770      	bx	lr

00002610 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    2610:	b580      	push	{r7, lr}
    2612:	b086      	sub	sp, #24
    2614:	af00      	add	r7, sp, #0
    2616:	4603      	mov	r3, r0
    2618:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    261a:	f107 030c 	add.w	r3, r7, #12
    261e:	4618      	mov	r0, r3
    2620:	4b13      	ldr	r3, [pc, #76]	; (2670 <_gpio_get_level+0x60>)
    2622:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    2624:	79fb      	ldrb	r3, [r7, #7]
    2626:	4619      	mov	r1, r3
    2628:	4812      	ldr	r0, [pc, #72]	; (2674 <_gpio_get_level+0x64>)
    262a:	4b13      	ldr	r3, [pc, #76]	; (2678 <_gpio_get_level+0x68>)
    262c:	4798      	blx	r3
    262e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    2630:	79fb      	ldrb	r3, [r7, #7]
    2632:	4619      	mov	r1, r3
    2634:	480f      	ldr	r0, [pc, #60]	; (2674 <_gpio_get_level+0x64>)
    2636:	4b11      	ldr	r3, [pc, #68]	; (267c <_gpio_get_level+0x6c>)
    2638:	4798      	blx	r3
    263a:	4602      	mov	r2, r0
    263c:	697b      	ldr	r3, [r7, #20]
    263e:	43db      	mvns	r3, r3
    2640:	4013      	ands	r3, r2
    2642:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2644:	79fb      	ldrb	r3, [r7, #7]
    2646:	4619      	mov	r1, r3
    2648:	480a      	ldr	r0, [pc, #40]	; (2674 <_gpio_get_level+0x64>)
    264a:	4b0d      	ldr	r3, [pc, #52]	; (2680 <_gpio_get_level+0x70>)
    264c:	4798      	blx	r3
    264e:	4602      	mov	r2, r0
    2650:	697b      	ldr	r3, [r7, #20]
    2652:	4013      	ands	r3, r2
    2654:	693a      	ldr	r2, [r7, #16]
    2656:	4313      	orrs	r3, r2
    2658:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    265a:	f107 030c 	add.w	r3, r7, #12
    265e:	4618      	mov	r0, r3
    2660:	4b08      	ldr	r3, [pc, #32]	; (2684 <_gpio_get_level+0x74>)
    2662:	4798      	blx	r3

	return tmp;
    2664:	693b      	ldr	r3, [r7, #16]
}
    2666:	4618      	mov	r0, r3
    2668:	3718      	adds	r7, #24
    266a:	46bd      	mov	sp, r7
    266c:	bd80      	pop	{r7, pc}
    266e:	bf00      	nop
    2670:	00003fa5 	.word	0x00003fa5
    2674:	41008000 	.word	0x41008000
    2678:	000025ad 	.word	0x000025ad
    267c:	000025ef 	.word	0x000025ef
    2680:	000025cd 	.word	0x000025cd
    2684:	00003fcb 	.word	0x00003fcb

00002688 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    2688:	b580      	push	{r7, lr}
    268a:	b082      	sub	sp, #8
    268c:	af00      	add	r7, sp, #0
    268e:	4603      	mov	r3, r0
    2690:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2692:	79fb      	ldrb	r3, [r7, #7]
    2694:	115b      	asrs	r3, r3, #5
    2696:	b2db      	uxtb	r3, r3
    2698:	4618      	mov	r0, r3
    269a:	4b09      	ldr	r3, [pc, #36]	; (26c0 <gpio_get_pin_level+0x38>)
    269c:	4798      	blx	r3
    269e:	4601      	mov	r1, r0
    26a0:	79fb      	ldrb	r3, [r7, #7]
    26a2:	f003 031f 	and.w	r3, r3, #31
    26a6:	2201      	movs	r2, #1
    26a8:	fa02 f303 	lsl.w	r3, r2, r3
    26ac:	400b      	ands	r3, r1
    26ae:	2b00      	cmp	r3, #0
    26b0:	bf14      	ite	ne
    26b2:	2301      	movne	r3, #1
    26b4:	2300      	moveq	r3, #0
    26b6:	b2db      	uxtb	r3, r3
}
    26b8:	4618      	mov	r0, r3
    26ba:	3708      	adds	r7, #8
    26bc:	46bd      	mov	sp, r7
    26be:	bd80      	pop	{r7, pc}
    26c0:	00002611 	.word	0x00002611

000026c4 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    26c4:	b480      	push	{r7}
    26c6:	b083      	sub	sp, #12
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    26cc:	4b06      	ldr	r3, [pc, #24]	; (26e8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    26ce:	681b      	ldr	r3, [r3, #0]
    26d0:	2201      	movs	r2, #1
    26d2:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    26d4:	4b04      	ldr	r3, [pc, #16]	; (26e8 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	2200      	movs	r2, #0
    26da:	705a      	strb	r2, [r3, #1]
}
    26dc:	bf00      	nop
    26de:	370c      	adds	r7, #12
    26e0:	46bd      	mov	sp, r7
    26e2:	bc80      	pop	{r7}
    26e4:	4770      	bx	lr
    26e6:	bf00      	nop
    26e8:	20001ef4 	.word	0x20001ef4

000026ec <_ZL10USBPluggedv>:

static void USBPlugged(void){
    26ec:	b580      	push	{r7, lr}
    26ee:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    26f0:	2040      	movs	r0, #64	; 0x40
    26f2:	4b0a      	ldr	r3, [pc, #40]	; (271c <_ZL10USBPluggedv+0x30>)
    26f4:	4798      	blx	r3
    26f6:	4603      	mov	r3, r0
    26f8:	2b00      	cmp	r3, #0
    26fa:	d004      	beq.n	2706 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    26fc:	4b08      	ldr	r3, [pc, #32]	; (2720 <_ZL10USBPluggedv+0x34>)
    26fe:	681b      	ldr	r3, [r3, #0]
    2700:	2201      	movs	r2, #1
    2702:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    2704:	e007      	b.n	2716 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    2706:	4b06      	ldr	r3, [pc, #24]	; (2720 <_ZL10USBPluggedv+0x34>)
    2708:	681b      	ldr	r3, [r3, #0]
    270a:	2200      	movs	r2, #0
    270c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    270e:	4b04      	ldr	r3, [pc, #16]	; (2720 <_ZL10USBPluggedv+0x34>)
    2710:	681b      	ldr	r3, [r3, #0]
    2712:	2200      	movs	r2, #0
    2714:	701a      	strb	r2, [r3, #0]
}
    2716:	bf00      	nop
    2718:	bd80      	pop	{r7, pc}
    271a:	bf00      	nop
    271c:	00002689 	.word	0x00002689
    2720:	20001ef4 	.word	0x20001ef4

00002724 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    2724:	b480      	push	{r7}
    2726:	b083      	sub	sp, #12
    2728:	af00      	add	r7, sp, #0
    272a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    272c:	4a04      	ldr	r2, [pc, #16]	; (2740 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	4618      	mov	r0, r3
    2736:	370c      	adds	r7, #12
    2738:	46bd      	mov	sp, r7
    273a:	bc80      	pop	{r7}
    273c:	4770      	bx	lr
    273e:	bf00      	nop
    2740:	20001ef4 	.word	0x20001ef4

00002744 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    2744:	b480      	push	{r7}
    2746:	b083      	sub	sp, #12
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	4618      	mov	r0, r3
    2750:	370c      	adds	r7, #12
    2752:	46bd      	mov	sp, r7
    2754:	bc80      	pop	{r7}
    2756:	4770      	bx	lr

00002758 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    2758:	b580      	push	{r7, lr}
    275a:	b082      	sub	sp, #8
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    2760:	491e      	ldr	r1, [pc, #120]	; (27dc <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    2762:	2040      	movs	r0, #64	; 0x40
    2764:	4b1e      	ldr	r3, [pc, #120]	; (27e0 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    2766:	4798      	blx	r3
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    2768:	2040      	movs	r0, #64	; 0x40
    276a:	4b1e      	ldr	r3, [pc, #120]	; (27e4 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    276c:	4798      	blx	r3
    276e:	4603      	mov	r3, r0
    2770:	461a      	mov	r2, r3
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	78db      	ldrb	r3, [r3, #3]
    277a:	2b00      	cmp	r3, #0
    277c:	d024      	beq.n	27c8 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	2200      	movs	r2, #0
    2782:	709a      	strb	r2, [r3, #2]
			plugged=true;
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	2201      	movs	r2, #1
    2788:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    278a:	f44f 7216 	mov.w	r2, #600	; 0x258
    278e:	4916      	ldr	r1, [pc, #88]	; (27e8 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    2790:	4816      	ldr	r0, [pc, #88]	; (27ec <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    2792:	4b17      	ldr	r3, [pc, #92]	; (27f0 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    2794:	4798      	blx	r3
			usbTerminalTimer.Start();
    2796:	4815      	ldr	r0, [pc, #84]	; (27ec <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    2798:	4b16      	ldr	r3, [pc, #88]	; (27f4 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    279a:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    279c:	4816      	ldr	r0, [pc, #88]	; (27f8 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    279e:	4b17      	ldr	r3, [pc, #92]	; (27fc <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    27a0:	4798      	blx	r3
    27a2:	4603      	mov	r3, r0
    27a4:	f083 0301 	eor.w	r3, r3, #1
    27a8:	b2db      	uxtb	r3, r3
    27aa:	2b00      	cmp	r3, #0
    27ac:	d008      	beq.n	27c0 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	789b      	ldrb	r3, [r3, #2]
    27b2:	b2db      	uxtb	r3, r3
    27b4:	2b00      	cmp	r3, #0
    27b6:	d0f1      	beq.n	279c <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	2200      	movs	r2, #0
    27bc:	701a      	strb	r2, [r3, #0]
					return;
    27be:	e009      	b.n	27d4 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    27c0:	480a      	ldr	r0, [pc, #40]	; (27ec <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    27c2:	4b0f      	ldr	r3, [pc, #60]	; (2800 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    27c4:	4798      	blx	r3
    27c6:	e005      	b.n	27d4 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	2200      	movs	r2, #0
    27cc:	701a      	strb	r2, [r3, #0]
			plugged=false;
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2200      	movs	r2, #0
    27d2:	705a      	strb	r2, [r3, #1]
		}
		
}
    27d4:	3708      	adds	r7, #8
    27d6:	46bd      	mov	sp, r7
    27d8:	bd80      	pop	{r7, pc}
    27da:	bf00      	nop
    27dc:	000026ed 	.word	0x000026ed
    27e0:	000044c9 	.word	0x000044c9
    27e4:	00002689 	.word	0x00002689
    27e8:	000026c5 	.word	0x000026c5
    27ec:	20001f9c 	.word	0x20001f9c
    27f0:	00002935 	.word	0x00002935
    27f4:	00002881 	.word	0x00002881
    27f8:	20001e94 	.word	0x20001e94
    27fc:	00001f5d 	.word	0x00001f5d
    2800:	000028a5 	.word	0x000028a5

00002804 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    2804:	b580      	push	{r7, lr}
    2806:	b082      	sub	sp, #8
    2808:	af00      	add	r7, sp, #0
    280a:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    280c:	4b04      	ldr	r3, [pc, #16]	; (2820 <_ZL7task_cbPK10timer_task+0x1c>)
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	4618      	mov	r0, r3
    2812:	4b04      	ldr	r3, [pc, #16]	; (2824 <_ZL7task_cbPK10timer_task+0x20>)
    2814:	4798      	blx	r3
}
    2816:	bf00      	nop
    2818:	3708      	adds	r7, #8
    281a:	46bd      	mov	sp, r7
    281c:	bd80      	pop	{r7, pc}
    281e:	bf00      	nop
    2820:	20001ef8 	.word	0x20001ef8
    2824:	000028cd 	.word	0x000028cd

00002828 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    2828:	b480      	push	{r7}
    282a:	b083      	sub	sp, #12
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
    2830:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	683a      	ldr	r2, [r7, #0]
    2836:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
    2838:	4a08      	ldr	r2, [pc, #32]	; (285c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    283a:	687b      	ldr	r3, [r7, #4]
    283c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2844:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	689b      	ldr	r3, [r3, #8]
    284a:	4a05      	ldr	r2, [pc, #20]	; (2860 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    284c:	60da      	str	r2, [r3, #12]
} //Timer_Class
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	4618      	mov	r0, r3
    2852:	370c      	adds	r7, #12
    2854:	46bd      	mov	sp, r7
    2856:	bc80      	pop	{r7}
    2858:	4770      	bx	lr
    285a:	bf00      	nop
    285c:	20001ef8 	.word	0x20001ef8
    2860:	00002805 	.word	0x00002805

00002864 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    2864:	b480      	push	{r7}
    2866:	b083      	sub	sp, #12
    2868:	af00      	add	r7, sp, #0
    286a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	2200      	movs	r2, #0
    2870:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	4618      	mov	r0, r3
    2876:	370c      	adds	r7, #12
    2878:	46bd      	mov	sp, r7
    287a:	bc80      	pop	{r7}
    287c:	4770      	bx	lr
	...

00002880 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    2880:	b580      	push	{r7, lr}
    2882:	b084      	sub	sp, #16
    2884:	af00      	add	r7, sp, #0
    2886:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    2888:	687b      	ldr	r3, [r7, #4]
    288a:	68db      	ldr	r3, [r3, #12]
    288c:	4618      	mov	r0, r3
    288e:	4b04      	ldr	r3, [pc, #16]	; (28a0 <_ZN17TimerSerial_Class5StartEv+0x20>)
    2890:	4798      	blx	r3
    2892:	60f8      	str	r0, [r7, #12]
	return status;
    2894:	68fb      	ldr	r3, [r7, #12]
	
}
    2896:	4618      	mov	r0, r3
    2898:	3710      	adds	r7, #16
    289a:	46bd      	mov	sp, r7
    289c:	bd80      	pop	{r7, pc}
    289e:	bf00      	nop
    28a0:	00005231 	.word	0x00005231

000028a4 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    28a4:	b580      	push	{r7, lr}
    28a6:	b084      	sub	sp, #16
    28a8:	af00      	add	r7, sp, #0
    28aa:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	68db      	ldr	r3, [r3, #12]
    28b0:	4618      	mov	r0, r3
    28b2:	4b05      	ldr	r3, [pc, #20]	; (28c8 <_ZN17TimerSerial_Class4StopEv+0x24>)
    28b4:	4798      	blx	r3
    28b6:	60f8      	str	r0, [r7, #12]
	timeout=0;
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	2200      	movs	r2, #0
    28bc:	705a      	strb	r2, [r3, #1]
	return status;
    28be:	68fb      	ldr	r3, [r7, #12]
}
    28c0:	4618      	mov	r0, r3
    28c2:	3710      	adds	r7, #16
    28c4:	46bd      	mov	sp, r7
    28c6:	bd80      	pop	{r7, pc}
    28c8:	00005285 	.word	0x00005285

000028cc <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    28cc:	b480      	push	{r7}
    28ce:	b083      	sub	sp, #12
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
	timeout=1;
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	2201      	movs	r2, #1
    28d8:	705a      	strb	r2, [r3, #1]
}
    28da:	bf00      	nop
    28dc:	370c      	adds	r7, #12
    28de:	46bd      	mov	sp, r7
    28e0:	bc80      	pop	{r7}
    28e2:	4770      	bx	lr

000028e4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    28e4:	b580      	push	{r7, lr}
    28e6:	b086      	sub	sp, #24
    28e8:	af00      	add	r7, sp, #0
    28ea:	60f8      	str	r0, [r7, #12]
    28ec:	60b9      	str	r1, [r7, #8]
    28ee:	607a      	str	r2, [r7, #4]
    28f0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    28f2:	68f8      	ldr	r0, [r7, #12]
    28f4:	4b0d      	ldr	r3, [pc, #52]	; (292c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    28f6:	4798      	blx	r3
	task->interval = interval;
    28f8:	68fb      	ldr	r3, [r7, #12]
    28fa:	689b      	ldr	r3, [r3, #8]
    28fc:	687a      	ldr	r2, [r7, #4]
    28fe:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    2900:	68fb      	ldr	r3, [r7, #12]
    2902:	689b      	ldr	r3, [r3, #8]
    2904:	68ba      	ldr	r2, [r7, #8]
    2906:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    2908:	68fb      	ldr	r3, [r7, #12]
    290a:	689b      	ldr	r3, [r3, #8]
    290c:	78fa      	ldrb	r2, [r7, #3]
    290e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    2910:	68fb      	ldr	r3, [r7, #12]
    2912:	68da      	ldr	r2, [r3, #12]
    2914:	68fb      	ldr	r3, [r7, #12]
    2916:	689b      	ldr	r3, [r3, #8]
    2918:	4619      	mov	r1, r3
    291a:	4610      	mov	r0, r2
    291c:	4b04      	ldr	r3, [pc, #16]	; (2930 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    291e:	4798      	blx	r3
    2920:	6178      	str	r0, [r7, #20]
	
	return status;
    2922:	697b      	ldr	r3, [r7, #20]
}
    2924:	4618      	mov	r0, r3
    2926:	3718      	adds	r7, #24
    2928:	46bd      	mov	sp, r7
    292a:	bd80      	pop	{r7, pc}
    292c:	000029ed 	.word	0x000029ed
    2930:	000052e1 	.word	0x000052e1

00002934 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    2934:	b590      	push	{r4, r7, lr}
    2936:	b087      	sub	sp, #28
    2938:	af00      	add	r7, sp, #0
    293a:	60f8      	str	r0, [r7, #12]
    293c:	60b9      	str	r1, [r7, #8]
    293e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    2940:	2300      	movs	r3, #0
    2942:	687a      	ldr	r2, [r7, #4]
    2944:	68b9      	ldr	r1, [r7, #8]
    2946:	68f8      	ldr	r0, [r7, #12]
    2948:	4c03      	ldr	r4, [pc, #12]	; (2958 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    294a:	47a0      	blx	r4
    294c:	6178      	str	r0, [r7, #20]
	return status;
    294e:	697b      	ldr	r3, [r7, #20]
}
    2950:	4618      	mov	r0, r3
    2952:	371c      	adds	r7, #28
    2954:	46bd      	mov	sp, r7
    2956:	bd90      	pop	{r4, r7, pc}
    2958:	000028e5 	.word	0x000028e5

0000295c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    295c:	b590      	push	{r4, r7, lr}
    295e:	b087      	sub	sp, #28
    2960:	af00      	add	r7, sp, #0
    2962:	60f8      	str	r0, [r7, #12]
    2964:	60b9      	str	r1, [r7, #8]
    2966:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    2968:	2300      	movs	r3, #0
    296a:	687a      	ldr	r2, [r7, #4]
    296c:	68b9      	ldr	r1, [r7, #8]
    296e:	68f8      	ldr	r0, [r7, #12]
    2970:	4c06      	ldr	r4, [pc, #24]	; (298c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    2972:	47a0      	blx	r4
    2974:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    2976:	68fb      	ldr	r3, [r7, #12]
    2978:	68db      	ldr	r3, [r3, #12]
    297a:	4618      	mov	r0, r3
    297c:	4b04      	ldr	r3, [pc, #16]	; (2990 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    297e:	4798      	blx	r3
    2980:	6178      	str	r0, [r7, #20]
	return status;
    2982:	697b      	ldr	r3, [r7, #20]
}
    2984:	4618      	mov	r0, r3
    2986:	371c      	adds	r7, #28
    2988:	46bd      	mov	sp, r7
    298a:	bd90      	pop	{r4, r7, pc}
    298c:	000028e5 	.word	0x000028e5
    2990:	00005231 	.word	0x00005231

00002994 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    2994:	b580      	push	{r7, lr}
    2996:	b082      	sub	sp, #8
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    299c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    299e:	6839      	ldr	r1, [r7, #0]
    29a0:	6878      	ldr	r0, [r7, #4]
    29a2:	4b0f      	ldr	r3, [pc, #60]	; (29e0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    29a4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	68db      	ldr	r3, [r3, #12]
    29aa:	f103 0214 	add.w	r2, r3, #20
    29ae:	687b      	ldr	r3, [r7, #4]
    29b0:	689b      	ldr	r3, [r3, #8]
    29b2:	4619      	mov	r1, r3
    29b4:	4610      	mov	r0, r2
    29b6:	4b0b      	ldr	r3, [pc, #44]	; (29e4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    29b8:	4798      	blx	r3
    29ba:	4603      	mov	r3, r0
    29bc:	2b00      	cmp	r3, #0
    29be:	d007      	beq.n	29d0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	68da      	ldr	r2, [r3, #12]
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	689b      	ldr	r3, [r3, #8]
    29c8:	4619      	mov	r1, r3
    29ca:	4610      	mov	r0, r2
    29cc:	4b06      	ldr	r3, [pc, #24]	; (29e8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    29ce:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    29d0:	687b      	ldr	r3, [r7, #4]
    29d2:	689b      	ldr	r3, [r3, #8]
    29d4:	2200      	movs	r2, #0
    29d6:	60da      	str	r2, [r3, #12]
}
    29d8:	bf00      	nop
    29da:	3708      	adds	r7, #8
    29dc:	46bd      	mov	sp, r7
    29de:	bd80      	pop	{r7, pc}
    29e0:	00002a55 	.word	0x00002a55
    29e4:	00005fb1 	.word	0x00005fb1
    29e8:	000053d9 	.word	0x000053d9

000029ec <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    29ec:	b480      	push	{r7}
    29ee:	b083      	sub	sp, #12
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	2200      	movs	r2, #0
    29f8:	771a      	strb	r2, [r3, #28]
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	7f1b      	ldrb	r3, [r3, #28]
    29fe:	2b07      	cmp	r3, #7
    2a00:	dc1f      	bgt.n	2a42 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	7f1b      	ldrb	r3, [r3, #28]
    2a06:	4619      	mov	r1, r3
    2a08:	4a11      	ldr	r2, [pc, #68]	; (2a50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    2a0a:	460b      	mov	r3, r1
    2a0c:	009b      	lsls	r3, r3, #2
    2a0e:	440b      	add	r3, r1
    2a10:	009b      	lsls	r3, r3, #2
    2a12:	4413      	add	r3, r2
    2a14:	330c      	adds	r3, #12
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d10b      	bne.n	2a34 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	7f1b      	ldrb	r3, [r3, #28]
    2a20:	461a      	mov	r2, r3
    2a22:	4613      	mov	r3, r2
    2a24:	009b      	lsls	r3, r3, #2
    2a26:	4413      	add	r3, r2
    2a28:	009b      	lsls	r3, r3, #2
    2a2a:	4a09      	ldr	r2, [pc, #36]	; (2a50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    2a2c:	441a      	add	r2, r3
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	609a      	str	r2, [r3, #8]
			return;
    2a32:	e009      	b.n	2a48 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	7f1b      	ldrb	r3, [r3, #28]
    2a38:	3301      	adds	r3, #1
    2a3a:	b2da      	uxtb	r2, r3
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	771a      	strb	r2, [r3, #28]
    2a40:	e7db      	b.n	29fa <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	4a02      	ldr	r2, [pc, #8]	; (2a50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    2a46:	609a      	str	r2, [r3, #8]

}
    2a48:	370c      	adds	r7, #12
    2a4a:	46bd      	mov	sp, r7
    2a4c:	bc80      	pop	{r7}
    2a4e:	4770      	bx	lr
    2a50:	20001efc 	.word	0x20001efc

00002a54 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    2a54:	b480      	push	{r7}
    2a56:	b083      	sub	sp, #12
    2a58:	af00      	add	r7, sp, #0
    2a5a:	6078      	str	r0, [r7, #4]
    2a5c:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	2200      	movs	r2, #0
    2a62:	771a      	strb	r2, [r3, #28]
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	7f1b      	ldrb	r3, [r3, #28]
    2a68:	2b07      	cmp	r3, #7
    2a6a:	dc20      	bgt.n	2aae <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	7f1b      	ldrb	r3, [r3, #28]
    2a70:	4619      	mov	r1, r3
    2a72:	4a11      	ldr	r2, [pc, #68]	; (2ab8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    2a74:	460b      	mov	r3, r1
    2a76:	009b      	lsls	r3, r3, #2
    2a78:	440b      	add	r3, r1
    2a7a:	009b      	lsls	r3, r3, #2
    2a7c:	4413      	add	r3, r2
    2a7e:	330c      	adds	r3, #12
    2a80:	681a      	ldr	r2, [r3, #0]
    2a82:	683b      	ldr	r3, [r7, #0]
    2a84:	429a      	cmp	r2, r3
    2a86:	d10b      	bne.n	2aa0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	7f1b      	ldrb	r3, [r3, #28]
    2a8c:	461a      	mov	r2, r3
    2a8e:	4613      	mov	r3, r2
    2a90:	009b      	lsls	r3, r3, #2
    2a92:	4413      	add	r3, r2
    2a94:	009b      	lsls	r3, r3, #2
    2a96:	4a08      	ldr	r2, [pc, #32]	; (2ab8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    2a98:	441a      	add	r2, r3
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	609a      	str	r2, [r3, #8]
			return;
    2a9e:	e006      	b.n	2aae <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	7f1b      	ldrb	r3, [r3, #28]
    2aa4:	3301      	adds	r3, #1
    2aa6:	b2da      	uxtb	r2, r3
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	771a      	strb	r2, [r3, #28]
    2aac:	e7da      	b.n	2a64 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bc80      	pop	{r7}
    2ab4:	4770      	bx	lr
    2ab6:	bf00      	nop
    2ab8:	20001efc 	.word	0x20001efc

00002abc <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    2abc:	b580      	push	{r7, lr}
    2abe:	b082      	sub	sp, #8
    2ac0:	af00      	add	r7, sp, #0
    2ac2:	6078      	str	r0, [r7, #4]
    2ac4:	6039      	str	r1, [r7, #0]
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	2b01      	cmp	r3, #1
    2aca:	d116      	bne.n	2afa <_Z41__static_initialization_and_destruction_0ii+0x3e>
    2acc:	683b      	ldr	r3, [r7, #0]
    2ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2ad2:	4293      	cmp	r3, r2
    2ad4:	d111      	bne.n	2afa <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    2ad6:	490b      	ldr	r1, [pc, #44]	; (2b04 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    2ad8:	480b      	ldr	r0, [pc, #44]	; (2b08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    2ada:	4b0c      	ldr	r3, [pc, #48]	; (2b0c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    2adc:	4798      	blx	r3
    2ade:	4a0c      	ldr	r2, [pc, #48]	; (2b10 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2ae0:	490c      	ldr	r1, [pc, #48]	; (2b14 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    2ae2:	4809      	ldr	r0, [pc, #36]	; (2b08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    2ae4:	4b0c      	ldr	r3, [pc, #48]	; (2b18 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    2ae6:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    2ae8:	490c      	ldr	r1, [pc, #48]	; (2b1c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    2aea:	480d      	ldr	r0, [pc, #52]	; (2b20 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2aec:	4b07      	ldr	r3, [pc, #28]	; (2b0c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    2aee:	4798      	blx	r3
    2af0:	4a07      	ldr	r2, [pc, #28]	; (2b10 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2af2:	4908      	ldr	r1, [pc, #32]	; (2b14 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    2af4:	480a      	ldr	r0, [pc, #40]	; (2b20 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2af6:	4b08      	ldr	r3, [pc, #32]	; (2b18 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    2af8:	4798      	blx	r3
    2afa:	bf00      	nop
    2afc:	3708      	adds	r7, #8
    2afe:	46bd      	mov	sp, r7
    2b00:	bd80      	pop	{r7, pc}
    2b02:	bf00      	nop
    2b04:	20002730 	.word	0x20002730
    2b08:	20001f9c 	.word	0x20001f9c
    2b0c:	00002829 	.word	0x00002829
    2b10:	20000000 	.word	0x20000000
    2b14:	00002865 	.word	0x00002865
    2b18:	0000f915 	.word	0x0000f915
    2b1c:	20002678 	.word	0x20002678
    2b20:	20001fbc 	.word	0x20001fbc

00002b24 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
    2b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2b2c:	2001      	movs	r0, #1
    2b2e:	4b01      	ldr	r3, [pc, #4]	; (2b34 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    2b30:	4798      	blx	r3
    2b32:	bd80      	pop	{r7, pc}
    2b34:	00002abd 	.word	0x00002abd

00002b38 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2b38:	b580      	push	{r7, lr}
    2b3a:	af00      	add	r7, sp, #0
	system_init();
    2b3c:	4b03      	ldr	r3, [pc, #12]	; (2b4c <atmel_start_init+0x14>)
    2b3e:	4798      	blx	r3
	usb_init();
    2b40:	4b03      	ldr	r3, [pc, #12]	; (2b50 <atmel_start_init+0x18>)
    2b42:	4798      	blx	r3
	spi_nor_flash_init();
    2b44:	4b03      	ldr	r3, [pc, #12]	; (2b54 <atmel_start_init+0x1c>)
    2b46:	4798      	blx	r3
}
    2b48:	bf00      	nop
    2b4a:	bd80      	pop	{r7, pc}
    2b4c:	00003df9 	.word	0x00003df9
    2b50:	0000f905 	.word	0x0000f905
    2b54:	0000e2c5 	.word	0x0000e2c5

00002b58 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    2b58:	b480      	push	{r7}
    2b5a:	b085      	sub	sp, #20
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	60f8      	str	r0, [r7, #12]
    2b60:	460b      	mov	r3, r1
    2b62:	607a      	str	r2, [r7, #4]
    2b64:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2b66:	7afa      	ldrb	r2, [r7, #11]
    2b68:	68fb      	ldr	r3, [r7, #12]
    2b6a:	3220      	adds	r2, #32
    2b6c:	6879      	ldr	r1, [r7, #4]
    2b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2b72:	bf00      	nop
    2b74:	3714      	adds	r7, #20
    2b76:	46bd      	mov	sp, r7
    2b78:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b7c:	4770      	bx	lr

00002b7e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    2b7e:	b480      	push	{r7}
    2b80:	b083      	sub	sp, #12
    2b82:	af00      	add	r7, sp, #0
    2b84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	691b      	ldr	r3, [r3, #16]
    2b8a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2b92:	bf00      	nop
    2b94:	370c      	adds	r7, #12
    2b96:	46bd      	mov	sp, r7
    2b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b9c:	4770      	bx	lr

00002b9e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    2b9e:	b480      	push	{r7}
    2ba0:	b083      	sub	sp, #12
    2ba2:	af00      	add	r7, sp, #0
    2ba4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	691b      	ldr	r3, [r3, #16]
    2baa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bb2:	bf00      	nop
    2bb4:	370c      	adds	r7, #12
    2bb6:	46bd      	mov	sp, r7
    2bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bbc:	4770      	bx	lr

00002bbe <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    2bbe:	b480      	push	{r7}
    2bc0:	b083      	sub	sp, #12
    2bc2:	af00      	add	r7, sp, #0
    2bc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    2bc6:	687b      	ldr	r3, [r7, #4]
    2bc8:	691b      	ldr	r3, [r3, #16]
    2bca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bd2:	bf00      	nop
    2bd4:	370c      	adds	r7, #12
    2bd6:	46bd      	mov	sp, r7
    2bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bdc:	4770      	bx	lr

00002bde <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    2bde:	b480      	push	{r7}
    2be0:	b083      	sub	sp, #12
    2be2:	af00      	add	r7, sp, #0
    2be4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	691b      	ldr	r3, [r3, #16]
    2bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2bf2:	bf00      	nop
    2bf4:	370c      	adds	r7, #12
    2bf6:	46bd      	mov	sp, r7
    2bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bfc:	4770      	bx	lr

00002bfe <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    2bfe:	b480      	push	{r7}
    2c00:	b083      	sub	sp, #12
    2c02:	af00      	add	r7, sp, #0
    2c04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	695b      	ldr	r3, [r3, #20]
    2c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2c0e:	687b      	ldr	r3, [r7, #4]
    2c10:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c12:	bf00      	nop
    2c14:	370c      	adds	r7, #12
    2c16:	46bd      	mov	sp, r7
    2c18:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c1c:	4770      	bx	lr

00002c1e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    2c1e:	b480      	push	{r7}
    2c20:	b083      	sub	sp, #12
    2c22:	af00      	add	r7, sp, #0
    2c24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	695b      	ldr	r3, [r3, #20]
    2c2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    2c2e:	687b      	ldr	r3, [r7, #4]
    2c30:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c32:	bf00      	nop
    2c34:	370c      	adds	r7, #12
    2c36:	46bd      	mov	sp, r7
    2c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3c:	4770      	bx	lr

00002c3e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    2c3e:	b480      	push	{r7}
    2c40:	b083      	sub	sp, #12
    2c42:	af00      	add	r7, sp, #0
    2c44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	695b      	ldr	r3, [r3, #20]
    2c4a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c52:	bf00      	nop
    2c54:	370c      	adds	r7, #12
    2c56:	46bd      	mov	sp, r7
    2c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c5c:	4770      	bx	lr

00002c5e <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
    2c5e:	b480      	push	{r7}
    2c60:	b083      	sub	sp, #12
    2c62:	af00      	add	r7, sp, #0
    2c64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	695b      	ldr	r3, [r3, #20]
    2c6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c72:	bf00      	nop
    2c74:	370c      	adds	r7, #12
    2c76:	46bd      	mov	sp, r7
    2c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c7c:	4770      	bx	lr

00002c7e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    2c7e:	b480      	push	{r7}
    2c80:	b083      	sub	sp, #12
    2c82:	af00      	add	r7, sp, #0
    2c84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	695b      	ldr	r3, [r3, #20]
    2c8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2c92:	bf00      	nop
    2c94:	370c      	adds	r7, #12
    2c96:	46bd      	mov	sp, r7
    2c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c9c:	4770      	bx	lr

00002c9e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    2c9e:	b480      	push	{r7}
    2ca0:	b083      	sub	sp, #12
    2ca2:	af00      	add	r7, sp, #0
    2ca4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2ca6:	687b      	ldr	r3, [r7, #4]
    2ca8:	695b      	ldr	r3, [r3, #20]
    2caa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cb2:	bf00      	nop
    2cb4:	370c      	adds	r7, #12
    2cb6:	46bd      	mov	sp, r7
    2cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cbc:	4770      	bx	lr

00002cbe <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    2cbe:	b480      	push	{r7}
    2cc0:	b083      	sub	sp, #12
    2cc2:	af00      	add	r7, sp, #0
    2cc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    2cc6:	687b      	ldr	r3, [r7, #4]
    2cc8:	695b      	ldr	r3, [r3, #20]
    2cca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cd2:	bf00      	nop
    2cd4:	370c      	adds	r7, #12
    2cd6:	46bd      	mov	sp, r7
    2cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cdc:	4770      	bx	lr

00002cde <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    2cde:	b480      	push	{r7}
    2ce0:	b083      	sub	sp, #12
    2ce2:	af00      	add	r7, sp, #0
    2ce4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	699b      	ldr	r3, [r3, #24]
    2cea:	f043 0201 	orr.w	r2, r3, #1
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2cf2:	bf00      	nop
    2cf4:	370c      	adds	r7, #12
    2cf6:	46bd      	mov	sp, r7
    2cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cfc:	4770      	bx	lr

00002cfe <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    2cfe:	b480      	push	{r7}
    2d00:	b083      	sub	sp, #12
    2d02:	af00      	add	r7, sp, #0
    2d04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	699b      	ldr	r3, [r3, #24]
    2d0a:	f043 0202 	orr.w	r2, r3, #2
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d12:	bf00      	nop
    2d14:	370c      	adds	r7, #12
    2d16:	46bd      	mov	sp, r7
    2d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d1c:	4770      	bx	lr

00002d1e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    2d1e:	b480      	push	{r7}
    2d20:	b083      	sub	sp, #12
    2d22:	af00      	add	r7, sp, #0
    2d24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	699b      	ldr	r3, [r3, #24]
    2d2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d32:	bf00      	nop
    2d34:	370c      	adds	r7, #12
    2d36:	46bd      	mov	sp, r7
    2d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d3c:	4770      	bx	lr

00002d3e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    2d3e:	b480      	push	{r7}
    2d40:	b083      	sub	sp, #12
    2d42:	af00      	add	r7, sp, #0
    2d44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2d46:	687b      	ldr	r3, [r7, #4]
    2d48:	699b      	ldr	r3, [r3, #24]
    2d4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d52:	bf00      	nop
    2d54:	370c      	adds	r7, #12
    2d56:	46bd      	mov	sp, r7
    2d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d5c:	4770      	bx	lr

00002d5e <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
    2d5e:	b480      	push	{r7}
    2d60:	b083      	sub	sp, #12
    2d62:	af00      	add	r7, sp, #0
    2d64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	699b      	ldr	r3, [r3, #24]
    2d6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d72:	bf00      	nop
    2d74:	370c      	adds	r7, #12
    2d76:	46bd      	mov	sp, r7
    2d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d7c:	4770      	bx	lr

00002d7e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    2d7e:	b480      	push	{r7}
    2d80:	b083      	sub	sp, #12
    2d82:	af00      	add	r7, sp, #0
    2d84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    2d86:	687b      	ldr	r3, [r7, #4]
    2d88:	69db      	ldr	r3, [r3, #28]
    2d8a:	f043 0220 	orr.w	r2, r3, #32
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2d92:	bf00      	nop
    2d94:	370c      	adds	r7, #12
    2d96:	46bd      	mov	sp, r7
    2d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d9c:	4770      	bx	lr

00002d9e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    2d9e:	b480      	push	{r7}
    2da0:	b083      	sub	sp, #12
    2da2:	af00      	add	r7, sp, #0
    2da4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	69db      	ldr	r3, [r3, #28]
    2daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2db2:	bf00      	nop
    2db4:	370c      	adds	r7, #12
    2db6:	46bd      	mov	sp, r7
    2db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dbc:	4770      	bx	lr

00002dbe <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    2dbe:	b480      	push	{r7}
    2dc0:	b083      	sub	sp, #12
    2dc2:	af00      	add	r7, sp, #0
    2dc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	69db      	ldr	r3, [r3, #28]
    2dca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2dd2:	bf00      	nop
    2dd4:	370c      	adds	r7, #12
    2dd6:	46bd      	mov	sp, r7
    2dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ddc:	4770      	bx	lr

00002dde <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    2dde:	b480      	push	{r7}
    2de0:	b083      	sub	sp, #12
    2de2:	af00      	add	r7, sp, #0
    2de4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	6a1b      	ldr	r3, [r3, #32]
    2dea:	f043 0201 	orr.w	r2, r3, #1
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2df2:	bf00      	nop
    2df4:	370c      	adds	r7, #12
    2df6:	46bd      	mov	sp, r7
    2df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dfc:	4770      	bx	lr

00002dfe <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    2dfe:	b480      	push	{r7}
    2e00:	b083      	sub	sp, #12
    2e02:	af00      	add	r7, sp, #0
    2e04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2e06:	687b      	ldr	r3, [r7, #4]
    2e08:	6a1b      	ldr	r3, [r3, #32]
    2e0a:	f043 0202 	orr.w	r2, r3, #2
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e12:	bf00      	nop
    2e14:	370c      	adds	r7, #12
    2e16:	46bd      	mov	sp, r7
    2e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e1c:	4770      	bx	lr

00002e1e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    2e1e:	b480      	push	{r7}
    2e20:	b083      	sub	sp, #12
    2e22:	af00      	add	r7, sp, #0
    2e24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    2e26:	687b      	ldr	r3, [r7, #4]
    2e28:	6a1b      	ldr	r3, [r3, #32]
    2e2a:	f043 0208 	orr.w	r2, r3, #8
    2e2e:	687b      	ldr	r3, [r7, #4]
    2e30:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e32:	bf00      	nop
    2e34:	370c      	adds	r7, #12
    2e36:	46bd      	mov	sp, r7
    2e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e3c:	4770      	bx	lr

00002e3e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    2e3e:	b480      	push	{r7}
    2e40:	b083      	sub	sp, #12
    2e42:	af00      	add	r7, sp, #0
    2e44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	6a1b      	ldr	r3, [r3, #32]
    2e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    2e52:	bf00      	nop
    2e54:	370c      	adds	r7, #12
    2e56:	46bd      	mov	sp, r7
    2e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e5c:	4770      	bx	lr

00002e5e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2e5e:	b480      	push	{r7}
    2e60:	b085      	sub	sp, #20
    2e62:	af00      	add	r7, sp, #0
    2e64:	60f8      	str	r0, [r7, #12]
    2e66:	460b      	mov	r3, r1
    2e68:	607a      	str	r2, [r7, #4]
    2e6a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e6c:	7afb      	ldrb	r3, [r7, #11]
    2e6e:	68fa      	ldr	r2, [r7, #12]
    2e70:	01db      	lsls	r3, r3, #7
    2e72:	4413      	add	r3, r2
    2e74:	3308      	adds	r3, #8
    2e76:	687a      	ldr	r2, [r7, #4]
    2e78:	601a      	str	r2, [r3, #0]
}
    2e7a:	bf00      	nop
    2e7c:	3714      	adds	r7, #20
    2e7e:	46bd      	mov	sp, r7
    2e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e84:	4770      	bx	lr

00002e86 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    2e86:	b480      	push	{r7}
    2e88:	b085      	sub	sp, #20
    2e8a:	af00      	add	r7, sp, #0
    2e8c:	60f8      	str	r0, [r7, #12]
    2e8e:	460b      	mov	r3, r1
    2e90:	607a      	str	r2, [r7, #4]
    2e92:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2e94:	7afb      	ldrb	r3, [r7, #11]
    2e96:	68fa      	ldr	r2, [r7, #12]
    2e98:	01db      	lsls	r3, r3, #7
    2e9a:	4413      	add	r3, r2
    2e9c:	3304      	adds	r3, #4
    2e9e:	687a      	ldr	r2, [r7, #4]
    2ea0:	601a      	str	r2, [r3, #0]
}
    2ea2:	bf00      	nop
    2ea4:	3714      	adds	r7, #20
    2ea6:	46bd      	mov	sp, r7
    2ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eac:	4770      	bx	lr

00002eae <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2eae:	b480      	push	{r7}
    2eb0:	b085      	sub	sp, #20
    2eb2:	af00      	add	r7, sp, #0
    2eb4:	60f8      	str	r0, [r7, #12]
    2eb6:	460b      	mov	r3, r1
    2eb8:	607a      	str	r2, [r7, #4]
    2eba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ebc:	7afb      	ldrb	r3, [r7, #11]
    2ebe:	68fa      	ldr	r2, [r7, #12]
    2ec0:	01db      	lsls	r3, r3, #7
    2ec2:	4413      	add	r3, r2
    2ec4:	3318      	adds	r3, #24
    2ec6:	687a      	ldr	r2, [r7, #4]
    2ec8:	601a      	str	r2, [r3, #0]
}
    2eca:	bf00      	nop
    2ecc:	3714      	adds	r7, #20
    2ece:	46bd      	mov	sp, r7
    2ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ed4:	4770      	bx	lr

00002ed6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    2ed6:	b480      	push	{r7}
    2ed8:	b085      	sub	sp, #20
    2eda:	af00      	add	r7, sp, #0
    2edc:	60f8      	str	r0, [r7, #12]
    2ede:	460b      	mov	r3, r1
    2ee0:	607a      	str	r2, [r7, #4]
    2ee2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ee4:	7afb      	ldrb	r3, [r7, #11]
    2ee6:	68fa      	ldr	r2, [r7, #12]
    2ee8:	01db      	lsls	r3, r3, #7
    2eea:	4413      	add	r3, r2
    2eec:	3314      	adds	r3, #20
    2eee:	687a      	ldr	r2, [r7, #4]
    2ef0:	601a      	str	r2, [r3, #0]
}
    2ef2:	bf00      	nop
    2ef4:	3714      	adds	r7, #20
    2ef6:	46bd      	mov	sp, r7
    2ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2efc:	4770      	bx	lr

00002efe <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2efe:	b480      	push	{r7}
    2f00:	b085      	sub	sp, #20
    2f02:	af00      	add	r7, sp, #0
    2f04:	6078      	str	r0, [r7, #4]
    2f06:	4608      	mov	r0, r1
    2f08:	4611      	mov	r1, r2
    2f0a:	461a      	mov	r2, r3
    2f0c:	4603      	mov	r3, r0
    2f0e:	70fb      	strb	r3, [r7, #3]
    2f10:	460b      	mov	r3, r1
    2f12:	70bb      	strb	r3, [r7, #2]
    2f14:	4613      	mov	r3, r2
    2f16:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f18:	78fa      	ldrb	r2, [r7, #3]
    2f1a:	78bb      	ldrb	r3, [r7, #2]
    2f1c:	6879      	ldr	r1, [r7, #4]
    2f1e:	01d2      	lsls	r2, r2, #7
    2f20:	440a      	add	r2, r1
    2f22:	4413      	add	r3, r2
    2f24:	3330      	adds	r3, #48	; 0x30
    2f26:	781b      	ldrb	r3, [r3, #0]
    2f28:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f2a:	7bfb      	ldrb	r3, [r7, #15]
    2f2c:	f023 030f 	bic.w	r3, r3, #15
    2f30:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    2f32:	787b      	ldrb	r3, [r7, #1]
    2f34:	f003 030f 	and.w	r3, r3, #15
    2f38:	b2da      	uxtb	r2, r3
    2f3a:	7bfb      	ldrb	r3, [r7, #15]
    2f3c:	4313      	orrs	r3, r2
    2f3e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f40:	78fa      	ldrb	r2, [r7, #3]
    2f42:	78bb      	ldrb	r3, [r7, #2]
    2f44:	6879      	ldr	r1, [r7, #4]
    2f46:	01d2      	lsls	r2, r2, #7
    2f48:	440a      	add	r2, r1
    2f4a:	4413      	add	r3, r2
    2f4c:	3330      	adds	r3, #48	; 0x30
    2f4e:	7bfa      	ldrb	r2, [r7, #15]
    2f50:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2f52:	bf00      	nop
    2f54:	3714      	adds	r7, #20
    2f56:	46bd      	mov	sp, r7
    2f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f5c:	4770      	bx	lr

00002f5e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    2f5e:	b480      	push	{r7}
    2f60:	b085      	sub	sp, #20
    2f62:	af00      	add	r7, sp, #0
    2f64:	6078      	str	r0, [r7, #4]
    2f66:	4608      	mov	r0, r1
    2f68:	4611      	mov	r1, r2
    2f6a:	461a      	mov	r2, r3
    2f6c:	4603      	mov	r3, r0
    2f6e:	70fb      	strb	r3, [r7, #3]
    2f70:	460b      	mov	r3, r1
    2f72:	70bb      	strb	r3, [r7, #2]
    2f74:	4613      	mov	r3, r2
    2f76:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f78:	78fa      	ldrb	r2, [r7, #3]
    2f7a:	78bb      	ldrb	r3, [r7, #2]
    2f7c:	6879      	ldr	r1, [r7, #4]
    2f7e:	01d2      	lsls	r2, r2, #7
    2f80:	440a      	add	r2, r1
    2f82:	4413      	add	r3, r2
    2f84:	3330      	adds	r3, #48	; 0x30
    2f86:	781b      	ldrb	r3, [r3, #0]
    2f88:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2f8a:	7bfb      	ldrb	r3, [r7, #15]
    2f8c:	f003 030f 	and.w	r3, r3, #15
    2f90:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    2f92:	787b      	ldrb	r3, [r7, #1]
    2f94:	011b      	lsls	r3, r3, #4
    2f96:	b2da      	uxtb	r2, r3
    2f98:	7bfb      	ldrb	r3, [r7, #15]
    2f9a:	4313      	orrs	r3, r2
    2f9c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f9e:	78fa      	ldrb	r2, [r7, #3]
    2fa0:	78bb      	ldrb	r3, [r7, #2]
    2fa2:	6879      	ldr	r1, [r7, #4]
    2fa4:	01d2      	lsls	r2, r2, #7
    2fa6:	440a      	add	r2, r1
    2fa8:	4413      	add	r3, r2
    2faa:	3330      	adds	r3, #48	; 0x30
    2fac:	7bfa      	ldrb	r2, [r7, #15]
    2fae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    2fb0:	bf00      	nop
    2fb2:	3714      	adds	r7, #20
    2fb4:	46bd      	mov	sp, r7
    2fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fba:	4770      	bx	lr

00002fbc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    2fbc:	b480      	push	{r7}
    2fbe:	b085      	sub	sp, #20
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	6078      	str	r0, [r7, #4]
    2fc4:	4608      	mov	r0, r1
    2fc6:	4611      	mov	r1, r2
    2fc8:	461a      	mov	r2, r3
    2fca:	4603      	mov	r3, r0
    2fcc:	70fb      	strb	r3, [r7, #3]
    2fce:	460b      	mov	r3, r1
    2fd0:	70bb      	strb	r3, [r7, #2]
    2fd2:	4613      	mov	r3, r2
    2fd4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2fd6:	78fa      	ldrb	r2, [r7, #3]
    2fd8:	78bb      	ldrb	r3, [r7, #2]
    2fda:	6879      	ldr	r1, [r7, #4]
    2fdc:	01d2      	lsls	r2, r2, #7
    2fde:	440a      	add	r2, r1
    2fe0:	4413      	add	r3, r2
    2fe2:	3340      	adds	r3, #64	; 0x40
    2fe4:	781b      	ldrb	r3, [r3, #0]
    2fe6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2fe8:	7bfb      	ldrb	r3, [r7, #15]
    2fea:	f023 0301 	bic.w	r3, r3, #1
    2fee:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2ff0:	787a      	ldrb	r2, [r7, #1]
    2ff2:	7bfb      	ldrb	r3, [r7, #15]
    2ff4:	4313      	orrs	r3, r2
    2ff6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ff8:	78fa      	ldrb	r2, [r7, #3]
    2ffa:	78bb      	ldrb	r3, [r7, #2]
    2ffc:	6879      	ldr	r1, [r7, #4]
    2ffe:	01d2      	lsls	r2, r2, #7
    3000:	440a      	add	r2, r1
    3002:	4413      	add	r3, r2
    3004:	3340      	adds	r3, #64	; 0x40
    3006:	7bfa      	ldrb	r2, [r7, #15]
    3008:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    300a:	bf00      	nop
    300c:	3714      	adds	r7, #20
    300e:	46bd      	mov	sp, r7
    3010:	f85d 7b04 	ldr.w	r7, [sp], #4
    3014:	4770      	bx	lr

00003016 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    3016:	b490      	push	{r4, r7}
    3018:	b082      	sub	sp, #8
    301a:	af00      	add	r7, sp, #0
    301c:	6078      	str	r0, [r7, #4]
    301e:	460b      	mov	r3, r1
    3020:	70fb      	strb	r3, [r7, #3]
    3022:	4613      	mov	r3, r2
    3024:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    3026:	78fa      	ldrb	r2, [r7, #3]
    3028:	78bb      	ldrb	r3, [r7, #2]
    302a:	78f8      	ldrb	r0, [r7, #3]
    302c:	78b9      	ldrb	r1, [r7, #2]
    302e:	687c      	ldr	r4, [r7, #4]
    3030:	01c0      	lsls	r0, r0, #7
    3032:	4420      	add	r0, r4
    3034:	4401      	add	r1, r0
    3036:	3140      	adds	r1, #64	; 0x40
    3038:	7809      	ldrb	r1, [r1, #0]
    303a:	b2c9      	uxtb	r1, r1
    303c:	f041 0104 	orr.w	r1, r1, #4
    3040:	b2c8      	uxtb	r0, r1
    3042:	6879      	ldr	r1, [r7, #4]
    3044:	01d2      	lsls	r2, r2, #7
    3046:	440a      	add	r2, r1
    3048:	4413      	add	r3, r2
    304a:	3340      	adds	r3, #64	; 0x40
    304c:	4602      	mov	r2, r0
    304e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3050:	bf00      	nop
    3052:	3708      	adds	r7, #8
    3054:	46bd      	mov	sp, r7
    3056:	bc90      	pop	{r4, r7}
    3058:	4770      	bx	lr

0000305a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    305a:	b490      	push	{r4, r7}
    305c:	b082      	sub	sp, #8
    305e:	af00      	add	r7, sp, #0
    3060:	6078      	str	r0, [r7, #4]
    3062:	460b      	mov	r3, r1
    3064:	70fb      	strb	r3, [r7, #3]
    3066:	4613      	mov	r3, r2
    3068:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    306a:	78fa      	ldrb	r2, [r7, #3]
    306c:	78bb      	ldrb	r3, [r7, #2]
    306e:	78f8      	ldrb	r0, [r7, #3]
    3070:	78b9      	ldrb	r1, [r7, #2]
    3072:	687c      	ldr	r4, [r7, #4]
    3074:	01c0      	lsls	r0, r0, #7
    3076:	4420      	add	r0, r4
    3078:	4401      	add	r1, r0
    307a:	3140      	adds	r1, #64	; 0x40
    307c:	7809      	ldrb	r1, [r1, #0]
    307e:	b2c9      	uxtb	r1, r1
    3080:	f021 0104 	bic.w	r1, r1, #4
    3084:	b2c8      	uxtb	r0, r1
    3086:	6879      	ldr	r1, [r7, #4]
    3088:	01d2      	lsls	r2, r2, #7
    308a:	440a      	add	r2, r1
    308c:	4413      	add	r3, r2
    308e:	3340      	adds	r3, #64	; 0x40
    3090:	4602      	mov	r2, r0
    3092:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    3094:	bf00      	nop
    3096:	3708      	adds	r7, #8
    3098:	46bd      	mov	sp, r7
    309a:	bc90      	pop	{r4, r7}
    309c:	4770      	bx	lr

0000309e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    309e:	b480      	push	{r7}
    30a0:	b085      	sub	sp, #20
    30a2:	af00      	add	r7, sp, #0
    30a4:	60f8      	str	r0, [r7, #12]
    30a6:	460b      	mov	r3, r1
    30a8:	607a      	str	r2, [r7, #4]
    30aa:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    30ac:	7afb      	ldrb	r3, [r7, #11]
    30ae:	68fa      	ldr	r2, [r7, #12]
    30b0:	01db      	lsls	r3, r3, #7
    30b2:	4413      	add	r3, r2
    30b4:	3328      	adds	r3, #40	; 0x28
    30b6:	687a      	ldr	r2, [r7, #4]
    30b8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    30ba:	bf00      	nop
    30bc:	3714      	adds	r7, #20
    30be:	46bd      	mov	sp, r7
    30c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c4:	4770      	bx	lr
	...

000030c8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	b082      	sub	sp, #8
    30cc:	af00      	add	r7, sp, #0
    30ce:	4603      	mov	r3, r0
    30d0:	6039      	str	r1, [r7, #0]
    30d2:	71fb      	strb	r3, [r7, #7]
    30d4:	4613      	mov	r3, r2
    30d6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    30d8:	79bb      	ldrb	r3, [r7, #6]
    30da:	2b01      	cmp	r3, #1
    30dc:	d01c      	beq.n	3118 <_gpio_set_direction+0x50>
    30de:	2b02      	cmp	r3, #2
    30e0:	d037      	beq.n	3152 <_gpio_set_direction+0x8a>
    30e2:	2b00      	cmp	r3, #0
    30e4:	d14e      	bne.n	3184 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    30e6:	79fb      	ldrb	r3, [r7, #7]
    30e8:	683a      	ldr	r2, [r7, #0]
    30ea:	4619      	mov	r1, r3
    30ec:	482a      	ldr	r0, [pc, #168]	; (3198 <_gpio_set_direction+0xd0>)
    30ee:	4b2b      	ldr	r3, [pc, #172]	; (319c <_gpio_set_direction+0xd4>)
    30f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    30f2:	683b      	ldr	r3, [r7, #0]
    30f4:	b29b      	uxth	r3, r3
    30f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    30fa:	79fb      	ldrb	r3, [r7, #7]
    30fc:	4619      	mov	r1, r3
    30fe:	4826      	ldr	r0, [pc, #152]	; (3198 <_gpio_set_direction+0xd0>)
    3100:	4b27      	ldr	r3, [pc, #156]	; (31a0 <_gpio_set_direction+0xd8>)
    3102:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3104:	683b      	ldr	r3, [r7, #0]
    3106:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3108:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    310c:	79fb      	ldrb	r3, [r7, #7]
    310e:	4619      	mov	r1, r3
    3110:	4821      	ldr	r0, [pc, #132]	; (3198 <_gpio_set_direction+0xd0>)
    3112:	4b23      	ldr	r3, [pc, #140]	; (31a0 <_gpio_set_direction+0xd8>)
    3114:	4798      	blx	r3
		break;
    3116:	e03a      	b.n	318e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    3118:	79fb      	ldrb	r3, [r7, #7]
    311a:	683a      	ldr	r2, [r7, #0]
    311c:	4619      	mov	r1, r3
    311e:	481e      	ldr	r0, [pc, #120]	; (3198 <_gpio_set_direction+0xd0>)
    3120:	4b1e      	ldr	r3, [pc, #120]	; (319c <_gpio_set_direction+0xd4>)
    3122:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    3124:	683b      	ldr	r3, [r7, #0]
    3126:	b29b      	uxth	r3, r3
    3128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3130:	79f9      	ldrb	r1, [r7, #7]
    3132:	461a      	mov	r2, r3
    3134:	4818      	ldr	r0, [pc, #96]	; (3198 <_gpio_set_direction+0xd0>)
    3136:	4b1a      	ldr	r3, [pc, #104]	; (31a0 <_gpio_set_direction+0xd8>)
    3138:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    313a:	683b      	ldr	r3, [r7, #0]
    313c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    313e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    3142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3146:	79f9      	ldrb	r1, [r7, #7]
    3148:	461a      	mov	r2, r3
    314a:	4813      	ldr	r0, [pc, #76]	; (3198 <_gpio_set_direction+0xd0>)
    314c:	4b14      	ldr	r3, [pc, #80]	; (31a0 <_gpio_set_direction+0xd8>)
    314e:	4798      	blx	r3
		break;
    3150:	e01d      	b.n	318e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    3152:	79fb      	ldrb	r3, [r7, #7]
    3154:	683a      	ldr	r2, [r7, #0]
    3156:	4619      	mov	r1, r3
    3158:	480f      	ldr	r0, [pc, #60]	; (3198 <_gpio_set_direction+0xd0>)
    315a:	4b12      	ldr	r3, [pc, #72]	; (31a4 <_gpio_set_direction+0xdc>)
    315c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    315e:	683b      	ldr	r3, [r7, #0]
    3160:	b29b      	uxth	r3, r3
    3162:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    3166:	79fb      	ldrb	r3, [r7, #7]
    3168:	4619      	mov	r1, r3
    316a:	480b      	ldr	r0, [pc, #44]	; (3198 <_gpio_set_direction+0xd0>)
    316c:	4b0c      	ldr	r3, [pc, #48]	; (31a0 <_gpio_set_direction+0xd8>)
    316e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    3170:	683b      	ldr	r3, [r7, #0]
    3172:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    3174:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    3178:	79fb      	ldrb	r3, [r7, #7]
    317a:	4619      	mov	r1, r3
    317c:	4806      	ldr	r0, [pc, #24]	; (3198 <_gpio_set_direction+0xd0>)
    317e:	4b08      	ldr	r3, [pc, #32]	; (31a0 <_gpio_set_direction+0xd8>)
    3180:	4798      	blx	r3
		break;
    3182:	e004      	b.n	318e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    3184:	2246      	movs	r2, #70	; 0x46
    3186:	4908      	ldr	r1, [pc, #32]	; (31a8 <_gpio_set_direction+0xe0>)
    3188:	2000      	movs	r0, #0
    318a:	4b08      	ldr	r3, [pc, #32]	; (31ac <_gpio_set_direction+0xe4>)
    318c:	4798      	blx	r3
	}
}
    318e:	bf00      	nop
    3190:	3708      	adds	r7, #8
    3192:	46bd      	mov	sp, r7
    3194:	bd80      	pop	{r7, pc}
    3196:	bf00      	nop
    3198:	41008000 	.word	0x41008000
    319c:	00002e87 	.word	0x00002e87
    31a0:	0000309f 	.word	0x0000309f
    31a4:	00002e5f 	.word	0x00002e5f
    31a8:	00012590 	.word	0x00012590
    31ac:	00005f89 	.word	0x00005f89

000031b0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b082      	sub	sp, #8
    31b4:	af00      	add	r7, sp, #0
    31b6:	4603      	mov	r3, r0
    31b8:	6039      	str	r1, [r7, #0]
    31ba:	71fb      	strb	r3, [r7, #7]
    31bc:	4613      	mov	r3, r2
    31be:	71bb      	strb	r3, [r7, #6]
	if (level) {
    31c0:	79bb      	ldrb	r3, [r7, #6]
    31c2:	2b00      	cmp	r3, #0
    31c4:	d006      	beq.n	31d4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    31c6:	79fb      	ldrb	r3, [r7, #7]
    31c8:	683a      	ldr	r2, [r7, #0]
    31ca:	4619      	mov	r1, r3
    31cc:	4806      	ldr	r0, [pc, #24]	; (31e8 <_gpio_set_level+0x38>)
    31ce:	4b07      	ldr	r3, [pc, #28]	; (31ec <_gpio_set_level+0x3c>)
    31d0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    31d2:	e005      	b.n	31e0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    31d4:	79fb      	ldrb	r3, [r7, #7]
    31d6:	683a      	ldr	r2, [r7, #0]
    31d8:	4619      	mov	r1, r3
    31da:	4803      	ldr	r0, [pc, #12]	; (31e8 <_gpio_set_level+0x38>)
    31dc:	4b04      	ldr	r3, [pc, #16]	; (31f0 <_gpio_set_level+0x40>)
    31de:	4798      	blx	r3
}
    31e0:	bf00      	nop
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}
    31e8:	41008000 	.word	0x41008000
    31ec:	00002eaf 	.word	0x00002eaf
    31f0:	00002ed7 	.word	0x00002ed7

000031f4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    31f4:	b580      	push	{r7, lr}
    31f6:	b082      	sub	sp, #8
    31f8:	af00      	add	r7, sp, #0
    31fa:	4603      	mov	r3, r0
    31fc:	71fb      	strb	r3, [r7, #7]
    31fe:	460b      	mov	r3, r1
    3200:	71bb      	strb	r3, [r7, #6]
    3202:	4613      	mov	r3, r2
    3204:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    3206:	797b      	ldrb	r3, [r7, #5]
    3208:	2b01      	cmp	r3, #1
    320a:	d00a      	beq.n	3222 <_gpio_set_pin_pull_mode+0x2e>
    320c:	2b02      	cmp	r3, #2
    320e:	d01f      	beq.n	3250 <_gpio_set_pin_pull_mode+0x5c>
    3210:	2b00      	cmp	r3, #0
    3212:	d134      	bne.n	327e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    3214:	79ba      	ldrb	r2, [r7, #6]
    3216:	79fb      	ldrb	r3, [r7, #7]
    3218:	4619      	mov	r1, r3
    321a:	481e      	ldr	r0, [pc, #120]	; (3294 <_gpio_set_pin_pull_mode+0xa0>)
    321c:	4b1e      	ldr	r3, [pc, #120]	; (3298 <_gpio_set_pin_pull_mode+0xa4>)
    321e:	4798      	blx	r3
		break;
    3220:	e033      	b.n	328a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    3222:	79bb      	ldrb	r3, [r7, #6]
    3224:	2201      	movs	r2, #1
    3226:	409a      	lsls	r2, r3
    3228:	79fb      	ldrb	r3, [r7, #7]
    322a:	4619      	mov	r1, r3
    322c:	4819      	ldr	r0, [pc, #100]	; (3294 <_gpio_set_pin_pull_mode+0xa0>)
    322e:	4b1b      	ldr	r3, [pc, #108]	; (329c <_gpio_set_pin_pull_mode+0xa8>)
    3230:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3232:	79ba      	ldrb	r2, [r7, #6]
    3234:	79fb      	ldrb	r3, [r7, #7]
    3236:	4619      	mov	r1, r3
    3238:	4816      	ldr	r0, [pc, #88]	; (3294 <_gpio_set_pin_pull_mode+0xa0>)
    323a:	4b19      	ldr	r3, [pc, #100]	; (32a0 <_gpio_set_pin_pull_mode+0xac>)
    323c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    323e:	79bb      	ldrb	r3, [r7, #6]
    3240:	2201      	movs	r2, #1
    3242:	409a      	lsls	r2, r3
    3244:	79fb      	ldrb	r3, [r7, #7]
    3246:	4619      	mov	r1, r3
    3248:	4812      	ldr	r0, [pc, #72]	; (3294 <_gpio_set_pin_pull_mode+0xa0>)
    324a:	4b16      	ldr	r3, [pc, #88]	; (32a4 <_gpio_set_pin_pull_mode+0xb0>)
    324c:	4798      	blx	r3
		break;
    324e:	e01c      	b.n	328a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    3250:	79bb      	ldrb	r3, [r7, #6]
    3252:	2201      	movs	r2, #1
    3254:	409a      	lsls	r2, r3
    3256:	79fb      	ldrb	r3, [r7, #7]
    3258:	4619      	mov	r1, r3
    325a:	480e      	ldr	r0, [pc, #56]	; (3294 <_gpio_set_pin_pull_mode+0xa0>)
    325c:	4b0f      	ldr	r3, [pc, #60]	; (329c <_gpio_set_pin_pull_mode+0xa8>)
    325e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    3260:	79ba      	ldrb	r2, [r7, #6]
    3262:	79fb      	ldrb	r3, [r7, #7]
    3264:	4619      	mov	r1, r3
    3266:	480b      	ldr	r0, [pc, #44]	; (3294 <_gpio_set_pin_pull_mode+0xa0>)
    3268:	4b0d      	ldr	r3, [pc, #52]	; (32a0 <_gpio_set_pin_pull_mode+0xac>)
    326a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    326c:	79bb      	ldrb	r3, [r7, #6]
    326e:	2201      	movs	r2, #1
    3270:	409a      	lsls	r2, r3
    3272:	79fb      	ldrb	r3, [r7, #7]
    3274:	4619      	mov	r1, r3
    3276:	4807      	ldr	r0, [pc, #28]	; (3294 <_gpio_set_pin_pull_mode+0xa0>)
    3278:	4b0b      	ldr	r3, [pc, #44]	; (32a8 <_gpio_set_pin_pull_mode+0xb4>)
    327a:	4798      	blx	r3
		break;
    327c:	e005      	b.n	328a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    327e:	2289      	movs	r2, #137	; 0x89
    3280:	490a      	ldr	r1, [pc, #40]	; (32ac <_gpio_set_pin_pull_mode+0xb8>)
    3282:	2000      	movs	r0, #0
    3284:	4b0a      	ldr	r3, [pc, #40]	; (32b0 <_gpio_set_pin_pull_mode+0xbc>)
    3286:	4798      	blx	r3
		break;
    3288:	bf00      	nop
	}
}
    328a:	bf00      	nop
    328c:	3708      	adds	r7, #8
    328e:	46bd      	mov	sp, r7
    3290:	bd80      	pop	{r7, pc}
    3292:	bf00      	nop
    3294:	41008000 	.word	0x41008000
    3298:	0000305b 	.word	0x0000305b
    329c:	00002e87 	.word	0x00002e87
    32a0:	00003017 	.word	0x00003017
    32a4:	00002eaf 	.word	0x00002eaf
    32a8:	00002ed7 	.word	0x00002ed7
    32ac:	00012590 	.word	0x00012590
    32b0:	00005f89 	.word	0x00005f89

000032b4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    32b4:	b590      	push	{r4, r7, lr}
    32b6:	b085      	sub	sp, #20
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
    32bc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	095b      	lsrs	r3, r3, #5
    32c2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	b2db      	uxtb	r3, r3
    32c8:	f003 031f 	and.w	r3, r3, #31
    32cc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    32ce:	683b      	ldr	r3, [r7, #0]
    32d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    32d4:	d106      	bne.n	32e4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    32d6:	7bba      	ldrb	r2, [r7, #14]
    32d8:	7bf9      	ldrb	r1, [r7, #15]
    32da:	2300      	movs	r3, #0
    32dc:	4812      	ldr	r0, [pc, #72]	; (3328 <_gpio_set_pin_function+0x74>)
    32de:	4c13      	ldr	r4, [pc, #76]	; (332c <_gpio_set_pin_function+0x78>)
    32e0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    32e2:	e01d      	b.n	3320 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    32e4:	7bba      	ldrb	r2, [r7, #14]
    32e6:	7bf9      	ldrb	r1, [r7, #15]
    32e8:	2301      	movs	r3, #1
    32ea:	480f      	ldr	r0, [pc, #60]	; (3328 <_gpio_set_pin_function+0x74>)
    32ec:	4c0f      	ldr	r4, [pc, #60]	; (332c <_gpio_set_pin_function+0x78>)
    32ee:	47a0      	blx	r4
		if (pin & 1) {
    32f0:	7bbb      	ldrb	r3, [r7, #14]
    32f2:	f003 0301 	and.w	r3, r3, #1
    32f6:	2b00      	cmp	r3, #0
    32f8:	d009      	beq.n	330e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    32fa:	7bbb      	ldrb	r3, [r7, #14]
    32fc:	085b      	lsrs	r3, r3, #1
    32fe:	b2da      	uxtb	r2, r3
    3300:	683b      	ldr	r3, [r7, #0]
    3302:	b2db      	uxtb	r3, r3
    3304:	7bf9      	ldrb	r1, [r7, #15]
    3306:	4808      	ldr	r0, [pc, #32]	; (3328 <_gpio_set_pin_function+0x74>)
    3308:	4c09      	ldr	r4, [pc, #36]	; (3330 <_gpio_set_pin_function+0x7c>)
    330a:	47a0      	blx	r4
}
    330c:	e008      	b.n	3320 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    330e:	7bbb      	ldrb	r3, [r7, #14]
    3310:	085b      	lsrs	r3, r3, #1
    3312:	b2da      	uxtb	r2, r3
    3314:	683b      	ldr	r3, [r7, #0]
    3316:	b2db      	uxtb	r3, r3
    3318:	7bf9      	ldrb	r1, [r7, #15]
    331a:	4803      	ldr	r0, [pc, #12]	; (3328 <_gpio_set_pin_function+0x74>)
    331c:	4c05      	ldr	r4, [pc, #20]	; (3334 <_gpio_set_pin_function+0x80>)
    331e:	47a0      	blx	r4
}
    3320:	bf00      	nop
    3322:	3714      	adds	r7, #20
    3324:	46bd      	mov	sp, r7
    3326:	bd90      	pop	{r4, r7, pc}
    3328:	41008000 	.word	0x41008000
    332c:	00002fbd 	.word	0x00002fbd
    3330:	00002f5f 	.word	0x00002f5f
    3334:	00002eff 	.word	0x00002eff

00003338 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    3338:	b580      	push	{r7, lr}
    333a:	b082      	sub	sp, #8
    333c:	af00      	add	r7, sp, #0
    333e:	4603      	mov	r3, r0
    3340:	460a      	mov	r2, r1
    3342:	71fb      	strb	r3, [r7, #7]
    3344:	4613      	mov	r3, r2
    3346:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    3348:	79fb      	ldrb	r3, [r7, #7]
    334a:	095b      	lsrs	r3, r3, #5
    334c:	b2d8      	uxtb	r0, r3
    334e:	79fb      	ldrb	r3, [r7, #7]
    3350:	f003 031f 	and.w	r3, r3, #31
    3354:	b2db      	uxtb	r3, r3
    3356:	79ba      	ldrb	r2, [r7, #6]
    3358:	4619      	mov	r1, r3
    335a:	4b03      	ldr	r3, [pc, #12]	; (3368 <gpio_set_pin_pull_mode+0x30>)
    335c:	4798      	blx	r3
}
    335e:	bf00      	nop
    3360:	3708      	adds	r7, #8
    3362:	46bd      	mov	sp, r7
    3364:	bd80      	pop	{r7, pc}
    3366:	bf00      	nop
    3368:	000031f5 	.word	0x000031f5

0000336c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    336c:	b580      	push	{r7, lr}
    336e:	b082      	sub	sp, #8
    3370:	af00      	add	r7, sp, #0
    3372:	6078      	str	r0, [r7, #4]
    3374:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    3376:	6839      	ldr	r1, [r7, #0]
    3378:	6878      	ldr	r0, [r7, #4]
    337a:	4b03      	ldr	r3, [pc, #12]	; (3388 <gpio_set_pin_function+0x1c>)
    337c:	4798      	blx	r3
}
    337e:	bf00      	nop
    3380:	3708      	adds	r7, #8
    3382:	46bd      	mov	sp, r7
    3384:	bd80      	pop	{r7, pc}
    3386:	bf00      	nop
    3388:	000032b5 	.word	0x000032b5

0000338c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    338c:	b580      	push	{r7, lr}
    338e:	b082      	sub	sp, #8
    3390:	af00      	add	r7, sp, #0
    3392:	4603      	mov	r3, r0
    3394:	460a      	mov	r2, r1
    3396:	71fb      	strb	r3, [r7, #7]
    3398:	4613      	mov	r3, r2
    339a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    339c:	79fb      	ldrb	r3, [r7, #7]
    339e:	095b      	lsrs	r3, r3, #5
    33a0:	b2d8      	uxtb	r0, r3
    33a2:	79fb      	ldrb	r3, [r7, #7]
    33a4:	f003 031f 	and.w	r3, r3, #31
    33a8:	2201      	movs	r2, #1
    33aa:	fa02 f303 	lsl.w	r3, r2, r3
    33ae:	79ba      	ldrb	r2, [r7, #6]
    33b0:	4619      	mov	r1, r3
    33b2:	4b03      	ldr	r3, [pc, #12]	; (33c0 <gpio_set_pin_direction+0x34>)
    33b4:	4798      	blx	r3
}
    33b6:	bf00      	nop
    33b8:	3708      	adds	r7, #8
    33ba:	46bd      	mov	sp, r7
    33bc:	bd80      	pop	{r7, pc}
    33be:	bf00      	nop
    33c0:	000030c9 	.word	0x000030c9

000033c4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
    33ca:	4603      	mov	r3, r0
    33cc:	460a      	mov	r2, r1
    33ce:	71fb      	strb	r3, [r7, #7]
    33d0:	4613      	mov	r3, r2
    33d2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    33d4:	79fb      	ldrb	r3, [r7, #7]
    33d6:	095b      	lsrs	r3, r3, #5
    33d8:	b2d8      	uxtb	r0, r3
    33da:	79fb      	ldrb	r3, [r7, #7]
    33dc:	f003 031f 	and.w	r3, r3, #31
    33e0:	2201      	movs	r2, #1
    33e2:	fa02 f303 	lsl.w	r3, r2, r3
    33e6:	79ba      	ldrb	r2, [r7, #6]
    33e8:	4619      	mov	r1, r3
    33ea:	4b03      	ldr	r3, [pc, #12]	; (33f8 <gpio_set_pin_level+0x34>)
    33ec:	4798      	blx	r3
}
    33ee:	bf00      	nop
    33f0:	3708      	adds	r7, #8
    33f2:	46bd      	mov	sp, r7
    33f4:	bd80      	pop	{r7, pc}
    33f6:	bf00      	nop
    33f8:	000031b1 	.word	0x000031b1

000033fc <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    33fc:	b580      	push	{r7, lr}
    33fe:	af00      	add	r7, sp, #0
	_init_chip();
    3400:	4b01      	ldr	r3, [pc, #4]	; (3408 <init_mcu+0xc>)
    3402:	4798      	blx	r3
}
    3404:	bf00      	nop
    3406:	bd80      	pop	{r7, pc}
    3408:	00006b91 	.word	0x00006b91

0000340c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    340c:	b580      	push	{r7, lr}
    340e:	b082      	sub	sp, #8
    3410:	af00      	add	r7, sp, #0
    3412:	6078      	str	r0, [r7, #4]
    3414:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	2b00      	cmp	r3, #0
    341a:	d004      	beq.n	3426 <wdt_init+0x1a>
    341c:	683b      	ldr	r3, [r7, #0]
    341e:	2b00      	cmp	r3, #0
    3420:	d001      	beq.n	3426 <wdt_init+0x1a>
    3422:	2301      	movs	r3, #1
    3424:	e000      	b.n	3428 <wdt_init+0x1c>
    3426:	2300      	movs	r3, #0
    3428:	f003 0301 	and.w	r3, r3, #1
    342c:	b2db      	uxtb	r3, r3
    342e:	2248      	movs	r2, #72	; 0x48
    3430:	4907      	ldr	r1, [pc, #28]	; (3450 <wdt_init+0x44>)
    3432:	4618      	mov	r0, r3
    3434:	4b07      	ldr	r3, [pc, #28]	; (3454 <wdt_init+0x48>)
    3436:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    3438:	687b      	ldr	r3, [r7, #4]
    343a:	683a      	ldr	r2, [r7, #0]
    343c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	4618      	mov	r0, r3
    3442:	4b05      	ldr	r3, [pc, #20]	; (3458 <wdt_init+0x4c>)
    3444:	4798      	blx	r3
    3446:	4603      	mov	r3, r0
}
    3448:	4618      	mov	r0, r3
    344a:	3708      	adds	r7, #8
    344c:	46bd      	mov	sp, r7
    344e:	bd80      	pop	{r7, pc}
    3450:	000125ac 	.word	0x000125ac
    3454:	00005f89 	.word	0x00005f89
    3458:	0000d4c1 	.word	0x0000d4c1

0000345c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    345c:	b580      	push	{r7, lr}
    345e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    3460:	4804      	ldr	r0, [pc, #16]	; (3474 <CRC_CALC_init+0x18>)
    3462:	4b05      	ldr	r3, [pc, #20]	; (3478 <CRC_CALC_init+0x1c>)
    3464:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    3466:	4905      	ldr	r1, [pc, #20]	; (347c <CRC_CALC_init+0x20>)
    3468:	4805      	ldr	r0, [pc, #20]	; (3480 <CRC_CALC_init+0x24>)
    346a:	4b06      	ldr	r3, [pc, #24]	; (3484 <CRC_CALC_init+0x28>)
    346c:	4798      	blx	r3
}
    346e:	bf00      	nop
    3470:	bd80      	pop	{r7, pc}
    3472:	bf00      	nop
    3474:	40000800 	.word	0x40000800
    3478:	00002cff 	.word	0x00002cff
    347c:	41002000 	.word	0x41002000
    3480:	2000280c 	.word	0x2000280c
    3484:	000043b5 	.word	0x000043b5

00003488 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    3488:	b580      	push	{r7, lr}
    348a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    348c:	2244      	movs	r2, #68	; 0x44
    348e:	2104      	movs	r1, #4
    3490:	4825      	ldr	r0, [pc, #148]	; (3528 <EXTERNAL_IRQ_0_init+0xa0>)
    3492:	4b26      	ldr	r3, [pc, #152]	; (352c <EXTERNAL_IRQ_0_init+0xa4>)
    3494:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    3496:	4826      	ldr	r0, [pc, #152]	; (3530 <EXTERNAL_IRQ_0_init+0xa8>)
    3498:	4b26      	ldr	r3, [pc, #152]	; (3534 <EXTERNAL_IRQ_0_init+0xac>)
    349a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    349c:	2101      	movs	r1, #1
    349e:	2040      	movs	r0, #64	; 0x40
    34a0:	4b25      	ldr	r3, [pc, #148]	; (3538 <EXTERNAL_IRQ_0_init+0xb0>)
    34a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    34a4:	2100      	movs	r1, #0
    34a6:	2040      	movs	r0, #64	; 0x40
    34a8:	4b24      	ldr	r3, [pc, #144]	; (353c <EXTERNAL_IRQ_0_init+0xb4>)
    34aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    34ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    34b0:	2040      	movs	r0, #64	; 0x40
    34b2:	4b23      	ldr	r3, [pc, #140]	; (3540 <EXTERNAL_IRQ_0_init+0xb8>)
    34b4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    34b6:	2101      	movs	r1, #1
    34b8:	2004      	movs	r0, #4
    34ba:	4b1f      	ldr	r3, [pc, #124]	; (3538 <EXTERNAL_IRQ_0_init+0xb0>)
    34bc:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    34be:	2102      	movs	r1, #2
    34c0:	2004      	movs	r0, #4
    34c2:	4b1e      	ldr	r3, [pc, #120]	; (353c <EXTERNAL_IRQ_0_init+0xb4>)
    34c4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    34c6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    34ca:	2004      	movs	r0, #4
    34cc:	4b1c      	ldr	r3, [pc, #112]	; (3540 <EXTERNAL_IRQ_0_init+0xb8>)
    34ce:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    34d0:	2101      	movs	r1, #1
    34d2:	2005      	movs	r0, #5
    34d4:	4b18      	ldr	r3, [pc, #96]	; (3538 <EXTERNAL_IRQ_0_init+0xb0>)
    34d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    34d8:	2102      	movs	r1, #2
    34da:	2005      	movs	r0, #5
    34dc:	4b17      	ldr	r3, [pc, #92]	; (353c <EXTERNAL_IRQ_0_init+0xb4>)
    34de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    34e0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    34e4:	2005      	movs	r0, #5
    34e6:	4b16      	ldr	r3, [pc, #88]	; (3540 <EXTERNAL_IRQ_0_init+0xb8>)
    34e8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    34ea:	2101      	movs	r1, #1
    34ec:	2056      	movs	r0, #86	; 0x56
    34ee:	4b12      	ldr	r3, [pc, #72]	; (3538 <EXTERNAL_IRQ_0_init+0xb0>)
    34f0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    34f2:	2102      	movs	r1, #2
    34f4:	2056      	movs	r0, #86	; 0x56
    34f6:	4b11      	ldr	r3, [pc, #68]	; (353c <EXTERNAL_IRQ_0_init+0xb4>)
    34f8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    34fa:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    34fe:	2056      	movs	r0, #86	; 0x56
    3500:	4b0f      	ldr	r3, [pc, #60]	; (3540 <EXTERNAL_IRQ_0_init+0xb8>)
    3502:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    3504:	2101      	movs	r1, #1
    3506:	2057      	movs	r0, #87	; 0x57
    3508:	4b0b      	ldr	r3, [pc, #44]	; (3538 <EXTERNAL_IRQ_0_init+0xb0>)
    350a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    350c:	2102      	movs	r1, #2
    350e:	2057      	movs	r0, #87	; 0x57
    3510:	4b0a      	ldr	r3, [pc, #40]	; (353c <EXTERNAL_IRQ_0_init+0xb4>)
    3512:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    3514:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    3518:	2057      	movs	r0, #87	; 0x57
    351a:	4b09      	ldr	r3, [pc, #36]	; (3540 <EXTERNAL_IRQ_0_init+0xb8>)
    351c:	4798      	blx	r3

	ext_irq_init();
    351e:	4b09      	ldr	r3, [pc, #36]	; (3544 <EXTERNAL_IRQ_0_init+0xbc>)
    3520:	4798      	blx	r3
}
    3522:	bf00      	nop
    3524:	bd80      	pop	{r7, pc}
    3526:	bf00      	nop
    3528:	40001c00 	.word	0x40001c00
    352c:	00002b59 	.word	0x00002b59
    3530:	40000800 	.word	0x40000800
    3534:	00002c3f 	.word	0x00002c3f
    3538:	0000338d 	.word	0x0000338d
    353c:	00003339 	.word	0x00003339
    3540:	0000336d 	.word	0x0000336d
    3544:	0000447d 	.word	0x0000447d

00003548 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    3548:	b580      	push	{r7, lr}
    354a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    354c:	2244      	movs	r2, #68	; 0x44
    354e:	210b      	movs	r1, #11
    3550:	4804      	ldr	r0, [pc, #16]	; (3564 <EVENT_SYSTEM_0_init+0x1c>)
    3552:	4b05      	ldr	r3, [pc, #20]	; (3568 <EVENT_SYSTEM_0_init+0x20>)
    3554:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    3556:	4805      	ldr	r0, [pc, #20]	; (356c <EVENT_SYSTEM_0_init+0x24>)
    3558:	4b05      	ldr	r3, [pc, #20]	; (3570 <EVENT_SYSTEM_0_init+0x28>)
    355a:	4798      	blx	r3

	event_system_init();
    355c:	4b05      	ldr	r3, [pc, #20]	; (3574 <EVENT_SYSTEM_0_init+0x2c>)
    355e:	4798      	blx	r3
}
    3560:	bf00      	nop
    3562:	bd80      	pop	{r7, pc}
    3564:	40001c00 	.word	0x40001c00
    3568:	00002b59 	.word	0x00002b59
    356c:	40000800 	.word	0x40000800
    3570:	00002d1f 	.word	0x00002d1f
    3574:	00004469 	.word	0x00004469

00003578 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    3578:	b580      	push	{r7, lr}
    357a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    357c:	2101      	movs	r1, #1
    357e:	202b      	movs	r0, #43	; 0x2b
    3580:	4b2b      	ldr	r3, [pc, #172]	; (3630 <QSPI_N25Q256_PORT_init+0xb8>)
    3582:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    3584:	2100      	movs	r1, #0
    3586:	202b      	movs	r0, #43	; 0x2b
    3588:	4b2a      	ldr	r3, [pc, #168]	; (3634 <QSPI_N25Q256_PORT_init+0xbc>)
    358a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    358c:	492a      	ldr	r1, [pc, #168]	; (3638 <QSPI_N25Q256_PORT_init+0xc0>)
    358e:	202b      	movs	r0, #43	; 0x2b
    3590:	4b2a      	ldr	r3, [pc, #168]	; (363c <QSPI_N25Q256_PORT_init+0xc4>)
    3592:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    3594:	2102      	movs	r1, #2
    3596:	2008      	movs	r0, #8
    3598:	4b25      	ldr	r3, [pc, #148]	; (3630 <QSPI_N25Q256_PORT_init+0xb8>)
    359a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    359c:	2100      	movs	r1, #0
    359e:	2008      	movs	r0, #8
    35a0:	4b27      	ldr	r3, [pc, #156]	; (3640 <QSPI_N25Q256_PORT_init+0xc8>)
    35a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    35a4:	2100      	movs	r1, #0
    35a6:	2008      	movs	r0, #8
    35a8:	4b22      	ldr	r3, [pc, #136]	; (3634 <QSPI_N25Q256_PORT_init+0xbc>)
    35aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    35ac:	4925      	ldr	r1, [pc, #148]	; (3644 <QSPI_N25Q256_PORT_init+0xcc>)
    35ae:	2008      	movs	r0, #8
    35b0:	4b22      	ldr	r3, [pc, #136]	; (363c <QSPI_N25Q256_PORT_init+0xc4>)
    35b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    35b4:	2102      	movs	r1, #2
    35b6:	2009      	movs	r0, #9
    35b8:	4b1d      	ldr	r3, [pc, #116]	; (3630 <QSPI_N25Q256_PORT_init+0xb8>)
    35ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    35bc:	2100      	movs	r1, #0
    35be:	2009      	movs	r0, #9
    35c0:	4b1f      	ldr	r3, [pc, #124]	; (3640 <QSPI_N25Q256_PORT_init+0xc8>)
    35c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    35c4:	2100      	movs	r1, #0
    35c6:	2009      	movs	r0, #9
    35c8:	4b1a      	ldr	r3, [pc, #104]	; (3634 <QSPI_N25Q256_PORT_init+0xbc>)
    35ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    35cc:	491e      	ldr	r1, [pc, #120]	; (3648 <QSPI_N25Q256_PORT_init+0xd0>)
    35ce:	2009      	movs	r0, #9
    35d0:	4b1a      	ldr	r3, [pc, #104]	; (363c <QSPI_N25Q256_PORT_init+0xc4>)
    35d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    35d4:	2102      	movs	r1, #2
    35d6:	200a      	movs	r0, #10
    35d8:	4b15      	ldr	r3, [pc, #84]	; (3630 <QSPI_N25Q256_PORT_init+0xb8>)
    35da:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    35dc:	2100      	movs	r1, #0
    35de:	200a      	movs	r0, #10
    35e0:	4b17      	ldr	r3, [pc, #92]	; (3640 <QSPI_N25Q256_PORT_init+0xc8>)
    35e2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    35e4:	2100      	movs	r1, #0
    35e6:	200a      	movs	r0, #10
    35e8:	4b12      	ldr	r3, [pc, #72]	; (3634 <QSPI_N25Q256_PORT_init+0xbc>)
    35ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    35ec:	4917      	ldr	r1, [pc, #92]	; (364c <QSPI_N25Q256_PORT_init+0xd4>)
    35ee:	200a      	movs	r0, #10
    35f0:	4b12      	ldr	r3, [pc, #72]	; (363c <QSPI_N25Q256_PORT_init+0xc4>)
    35f2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    35f4:	2102      	movs	r1, #2
    35f6:	200b      	movs	r0, #11
    35f8:	4b0d      	ldr	r3, [pc, #52]	; (3630 <QSPI_N25Q256_PORT_init+0xb8>)
    35fa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    35fc:	2100      	movs	r1, #0
    35fe:	200b      	movs	r0, #11
    3600:	4b0f      	ldr	r3, [pc, #60]	; (3640 <QSPI_N25Q256_PORT_init+0xc8>)
    3602:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    3604:	2100      	movs	r1, #0
    3606:	200b      	movs	r0, #11
    3608:	4b0a      	ldr	r3, [pc, #40]	; (3634 <QSPI_N25Q256_PORT_init+0xbc>)
    360a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    360c:	4910      	ldr	r1, [pc, #64]	; (3650 <QSPI_N25Q256_PORT_init+0xd8>)
    360e:	200b      	movs	r0, #11
    3610:	4b0a      	ldr	r3, [pc, #40]	; (363c <QSPI_N25Q256_PORT_init+0xc4>)
    3612:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    3614:	2101      	movs	r1, #1
    3616:	202a      	movs	r0, #42	; 0x2a
    3618:	4b05      	ldr	r3, [pc, #20]	; (3630 <QSPI_N25Q256_PORT_init+0xb8>)
    361a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    361c:	2100      	movs	r1, #0
    361e:	202a      	movs	r0, #42	; 0x2a
    3620:	4b04      	ldr	r3, [pc, #16]	; (3634 <QSPI_N25Q256_PORT_init+0xbc>)
    3622:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    3624:	490b      	ldr	r1, [pc, #44]	; (3654 <QSPI_N25Q256_PORT_init+0xdc>)
    3626:	202a      	movs	r0, #42	; 0x2a
    3628:	4b04      	ldr	r3, [pc, #16]	; (363c <QSPI_N25Q256_PORT_init+0xc4>)
    362a:	4798      	blx	r3
}
    362c:	bf00      	nop
    362e:	bd80      	pop	{r7, pc}
    3630:	0000338d 	.word	0x0000338d
    3634:	00003339 	.word	0x00003339
    3638:	002b0007 	.word	0x002b0007
    363c:	0000336d 	.word	0x0000336d
    3640:	000033c5 	.word	0x000033c5
    3644:	00080007 	.word	0x00080007
    3648:	00090007 	.word	0x00090007
    364c:	000a0007 	.word	0x000a0007
    3650:	000b0007 	.word	0x000b0007
    3654:	002a0007 	.word	0x002a0007

00003658 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    3658:	b580      	push	{r7, lr}
    365a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    365c:	4805      	ldr	r0, [pc, #20]	; (3674 <QSPI_N25Q256_CLOCK_init+0x1c>)
    365e:	4b06      	ldr	r3, [pc, #24]	; (3678 <QSPI_N25Q256_CLOCK_init+0x20>)
    3660:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    3662:	4804      	ldr	r0, [pc, #16]	; (3674 <QSPI_N25Q256_CLOCK_init+0x1c>)
    3664:	4b05      	ldr	r3, [pc, #20]	; (367c <QSPI_N25Q256_CLOCK_init+0x24>)
    3666:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    3668:	4802      	ldr	r0, [pc, #8]	; (3674 <QSPI_N25Q256_CLOCK_init+0x1c>)
    366a:	4b05      	ldr	r3, [pc, #20]	; (3680 <QSPI_N25Q256_CLOCK_init+0x28>)
    366c:	4798      	blx	r3
}
    366e:	bf00      	nop
    3670:	bd80      	pop	{r7, pc}
    3672:	bf00      	nop
    3674:	40000800 	.word	0x40000800
    3678:	00002b9f 	.word	0x00002b9f
    367c:	00002bdf 	.word	0x00002bdf
    3680:	00002dbf 	.word	0x00002dbf

00003684 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    3684:	b580      	push	{r7, lr}
    3686:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    3688:	4b04      	ldr	r3, [pc, #16]	; (369c <QSPI_N25Q256_init+0x18>)
    368a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    368c:	4904      	ldr	r1, [pc, #16]	; (36a0 <QSPI_N25Q256_init+0x1c>)
    368e:	4805      	ldr	r0, [pc, #20]	; (36a4 <QSPI_N25Q256_init+0x20>)
    3690:	4b05      	ldr	r3, [pc, #20]	; (36a8 <QSPI_N25Q256_init+0x24>)
    3692:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    3694:	4b05      	ldr	r3, [pc, #20]	; (36ac <QSPI_N25Q256_init+0x28>)
    3696:	4798      	blx	r3
}
    3698:	bf00      	nop
    369a:	bd80      	pop	{r7, pc}
    369c:	00003659 	.word	0x00003659
    36a0:	42003400 	.word	0x42003400
    36a4:	20002694 	.word	0x20002694
    36a8:	00004b25 	.word	0x00004b25
    36ac:	00003579 	.word	0x00003579

000036b0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    36b4:	4802      	ldr	r0, [pc, #8]	; (36c0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    36b6:	4b03      	ldr	r3, [pc, #12]	; (36c4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    36b8:	4798      	blx	r3
}
    36ba:	bf00      	nop
    36bc:	bd80      	pop	{r7, pc}
    36be:	bf00      	nop
    36c0:	40000800 	.word	0x40000800
    36c4:	00002c1f 	.word	0x00002c1f

000036c8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    36c8:	b580      	push	{r7, lr}
    36ca:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    36cc:	4b03      	ldr	r3, [pc, #12]	; (36dc <DATETIME_CLOCK_init+0x14>)
    36ce:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    36d0:	4903      	ldr	r1, [pc, #12]	; (36e0 <DATETIME_CLOCK_init+0x18>)
    36d2:	4804      	ldr	r0, [pc, #16]	; (36e4 <DATETIME_CLOCK_init+0x1c>)
    36d4:	4b04      	ldr	r3, [pc, #16]	; (36e8 <DATETIME_CLOCK_init+0x20>)
    36d6:	4798      	blx	r3
}
    36d8:	bf00      	nop
    36da:	bd80      	pop	{r7, pc}
    36dc:	000036b1 	.word	0x000036b1
    36e0:	40002400 	.word	0x40002400
    36e4:	200027e8 	.word	0x200027e8
    36e8:	00004209 	.word	0x00004209

000036ec <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
    36f0:	2100      	movs	r1, #0
    36f2:	2051      	movs	r0, #81	; 0x51
    36f4:	4b11      	ldr	r3, [pc, #68]	; (373c <SPI_HI3593_PORT_init+0x50>)
    36f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
    36f8:	2102      	movs	r1, #2
    36fa:	2051      	movs	r0, #81	; 0x51
    36fc:	4b10      	ldr	r3, [pc, #64]	; (3740 <SPI_HI3593_PORT_init+0x54>)
    36fe:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
    3700:	4910      	ldr	r1, [pc, #64]	; (3744 <SPI_HI3593_PORT_init+0x58>)
    3702:	2051      	movs	r0, #81	; 0x51
    3704:	4b10      	ldr	r3, [pc, #64]	; (3748 <SPI_HI3593_PORT_init+0x5c>)
    3706:	4798      	blx	r3

	gpio_set_pin_level(PC16,
    3708:	2100      	movs	r1, #0
    370a:	2050      	movs	r0, #80	; 0x50
    370c:	4b0b      	ldr	r3, [pc, #44]	; (373c <SPI_HI3593_PORT_init+0x50>)
    370e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
    3710:	2102      	movs	r1, #2
    3712:	2050      	movs	r0, #80	; 0x50
    3714:	4b0a      	ldr	r3, [pc, #40]	; (3740 <SPI_HI3593_PORT_init+0x54>)
    3716:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
    3718:	490c      	ldr	r1, [pc, #48]	; (374c <SPI_HI3593_PORT_init+0x60>)
    371a:	2050      	movs	r0, #80	; 0x50
    371c:	4b0a      	ldr	r3, [pc, #40]	; (3748 <SPI_HI3593_PORT_init+0x5c>)
    371e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    3720:	2101      	movs	r1, #1
    3722:	2006      	movs	r0, #6
    3724:	4b06      	ldr	r3, [pc, #24]	; (3740 <SPI_HI3593_PORT_init+0x54>)
    3726:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    3728:	2100      	movs	r1, #0
    372a:	2006      	movs	r0, #6
    372c:	4b08      	ldr	r3, [pc, #32]	; (3750 <SPI_HI3593_PORT_init+0x64>)
    372e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    3730:	4908      	ldr	r1, [pc, #32]	; (3754 <SPI_HI3593_PORT_init+0x68>)
    3732:	2006      	movs	r0, #6
    3734:	4b04      	ldr	r3, [pc, #16]	; (3748 <SPI_HI3593_PORT_init+0x5c>)
    3736:	4798      	blx	r3
}
    3738:	bf00      	nop
    373a:	bd80      	pop	{r7, pc}
    373c:	000033c5 	.word	0x000033c5
    3740:	0000338d 	.word	0x0000338d
    3744:	00510003 	.word	0x00510003
    3748:	0000336d 	.word	0x0000336d
    374c:	00500003 	.word	0x00500003
    3750:	00003339 	.word	0x00003339
    3754:	00060003 	.word	0x00060003

00003758 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    3758:	b580      	push	{r7, lr}
    375a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    375c:	2240      	movs	r2, #64	; 0x40
    375e:	2107      	movs	r1, #7
    3760:	4806      	ldr	r0, [pc, #24]	; (377c <SPI_HI3593_CLOCK_init+0x24>)
    3762:	4b07      	ldr	r3, [pc, #28]	; (3780 <SPI_HI3593_CLOCK_init+0x28>)
    3764:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3766:	2243      	movs	r2, #67	; 0x43
    3768:	2103      	movs	r1, #3
    376a:	4804      	ldr	r0, [pc, #16]	; (377c <SPI_HI3593_CLOCK_init+0x24>)
    376c:	4b04      	ldr	r3, [pc, #16]	; (3780 <SPI_HI3593_CLOCK_init+0x28>)
    376e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
    3770:	4804      	ldr	r0, [pc, #16]	; (3784 <SPI_HI3593_CLOCK_init+0x2c>)
    3772:	4b05      	ldr	r3, [pc, #20]	; (3788 <SPI_HI3593_CLOCK_init+0x30>)
    3774:	4798      	blx	r3
}
    3776:	bf00      	nop
    3778:	bd80      	pop	{r7, pc}
    377a:	bf00      	nop
    377c:	40001c00 	.word	0x40001c00
    3780:	00002b59 	.word	0x00002b59
    3784:	40000800 	.word	0x40000800
    3788:	00002c5f 	.word	0x00002c5f

0000378c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    378c:	b580      	push	{r7, lr}
    378e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    3790:	4b04      	ldr	r3, [pc, #16]	; (37a4 <SPI_HI3593_init+0x18>)
    3792:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
    3794:	4904      	ldr	r1, [pc, #16]	; (37a8 <SPI_HI3593_init+0x1c>)
    3796:	4805      	ldr	r0, [pc, #20]	; (37ac <SPI_HI3593_init+0x20>)
    3798:	4b05      	ldr	r3, [pc, #20]	; (37b0 <SPI_HI3593_init+0x24>)
    379a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    379c:	4b05      	ldr	r3, [pc, #20]	; (37b4 <SPI_HI3593_init+0x28>)
    379e:	4798      	blx	r3
}
    37a0:	bf00      	nop
    37a2:	bd80      	pop	{r7, pc}
    37a4:	00003759 	.word	0x00003759
    37a8:	40003000 	.word	0x40003000
    37ac:	20002618 	.word	0x20002618
    37b0:	00005001 	.word	0x00005001
    37b4:	000036ed 	.word	0x000036ed

000037b8 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    37b8:	b580      	push	{r7, lr}
    37ba:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    37bc:	2100      	movs	r1, #0
    37be:	2010      	movs	r0, #16
    37c0:	4b11      	ldr	r3, [pc, #68]	; (3808 <SPI_MEMORIES_PORT_init+0x50>)
    37c2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    37c4:	2102      	movs	r1, #2
    37c6:	2010      	movs	r0, #16
    37c8:	4b10      	ldr	r3, [pc, #64]	; (380c <SPI_MEMORIES_PORT_init+0x54>)
    37ca:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    37cc:	4910      	ldr	r1, [pc, #64]	; (3810 <SPI_MEMORIES_PORT_init+0x58>)
    37ce:	2010      	movs	r0, #16
    37d0:	4b10      	ldr	r3, [pc, #64]	; (3814 <SPI_MEMORIES_PORT_init+0x5c>)
    37d2:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    37d4:	2100      	movs	r1, #0
    37d6:	2011      	movs	r0, #17
    37d8:	4b0b      	ldr	r3, [pc, #44]	; (3808 <SPI_MEMORIES_PORT_init+0x50>)
    37da:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    37dc:	2102      	movs	r1, #2
    37de:	2011      	movs	r0, #17
    37e0:	4b0a      	ldr	r3, [pc, #40]	; (380c <SPI_MEMORIES_PORT_init+0x54>)
    37e2:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    37e4:	490c      	ldr	r1, [pc, #48]	; (3818 <SPI_MEMORIES_PORT_init+0x60>)
    37e6:	2011      	movs	r0, #17
    37e8:	4b0a      	ldr	r3, [pc, #40]	; (3814 <SPI_MEMORIES_PORT_init+0x5c>)
    37ea:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    37ec:	2101      	movs	r1, #1
    37ee:	2012      	movs	r0, #18
    37f0:	4b06      	ldr	r3, [pc, #24]	; (380c <SPI_MEMORIES_PORT_init+0x54>)
    37f2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    37f4:	2100      	movs	r1, #0
    37f6:	2012      	movs	r0, #18
    37f8:	4b08      	ldr	r3, [pc, #32]	; (381c <SPI_MEMORIES_PORT_init+0x64>)
    37fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    37fc:	4908      	ldr	r1, [pc, #32]	; (3820 <SPI_MEMORIES_PORT_init+0x68>)
    37fe:	2012      	movs	r0, #18
    3800:	4b04      	ldr	r3, [pc, #16]	; (3814 <SPI_MEMORIES_PORT_init+0x5c>)
    3802:	4798      	blx	r3
}
    3804:	bf00      	nop
    3806:	bd80      	pop	{r7, pc}
    3808:	000033c5 	.word	0x000033c5
    380c:	0000338d 	.word	0x0000338d
    3810:	00100002 	.word	0x00100002
    3814:	0000336d 	.word	0x0000336d
    3818:	00110002 	.word	0x00110002
    381c:	00003339 	.word	0x00003339
    3820:	00120002 	.word	0x00120002

00003824 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    3824:	b580      	push	{r7, lr}
    3826:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3828:	2245      	movs	r2, #69	; 0x45
    382a:	2108      	movs	r1, #8
    382c:	4806      	ldr	r0, [pc, #24]	; (3848 <SPI_MEMORIES_CLOCK_init+0x24>)
    382e:	4b07      	ldr	r3, [pc, #28]	; (384c <SPI_MEMORIES_CLOCK_init+0x28>)
    3830:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3832:	224a      	movs	r2, #74	; 0x4a
    3834:	2103      	movs	r1, #3
    3836:	4804      	ldr	r0, [pc, #16]	; (3848 <SPI_MEMORIES_CLOCK_init+0x24>)
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <SPI_MEMORIES_CLOCK_init+0x28>)
    383a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    383c:	4804      	ldr	r0, [pc, #16]	; (3850 <SPI_MEMORIES_CLOCK_init+0x2c>)
    383e:	4b05      	ldr	r3, [pc, #20]	; (3854 <SPI_MEMORIES_CLOCK_init+0x30>)
    3840:	4798      	blx	r3
}
    3842:	bf00      	nop
    3844:	bd80      	pop	{r7, pc}
    3846:	bf00      	nop
    3848:	40001c00 	.word	0x40001c00
    384c:	00002b59 	.word	0x00002b59
    3850:	40000800 	.word	0x40000800
    3854:	00002c7f 	.word	0x00002c7f

00003858 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    3858:	b580      	push	{r7, lr}
    385a:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    385c:	4b04      	ldr	r3, [pc, #16]	; (3870 <SPI_MEMORIES_init+0x18>)
    385e:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    3860:	4904      	ldr	r1, [pc, #16]	; (3874 <SPI_MEMORIES_init+0x1c>)
    3862:	4805      	ldr	r0, [pc, #20]	; (3878 <SPI_MEMORIES_init+0x20>)
    3864:	4b05      	ldr	r3, [pc, #20]	; (387c <SPI_MEMORIES_init+0x24>)
    3866:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    3868:	4b05      	ldr	r3, [pc, #20]	; (3880 <SPI_MEMORIES_init+0x28>)
    386a:	4798      	blx	r3
}
    386c:	bf00      	nop
    386e:	bd80      	pop	{r7, pc}
    3870:	00003825 	.word	0x00003825
    3874:	40003400 	.word	0x40003400
    3878:	20002600 	.word	0x20002600
    387c:	00005001 	.word	0x00005001
    3880:	000037b9 	.word	0x000037b9

00003884 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    3884:	b580      	push	{r7, lr}
    3886:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    3888:	2100      	movs	r1, #0
    388a:	203b      	movs	r0, #59	; 0x3b
    388c:	4b11      	ldr	r3, [pc, #68]	; (38d4 <SPI_TEMP_PORT_init+0x50>)
    388e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    3890:	2102      	movs	r1, #2
    3892:	203b      	movs	r0, #59	; 0x3b
    3894:	4b10      	ldr	r3, [pc, #64]	; (38d8 <SPI_TEMP_PORT_init+0x54>)
    3896:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    3898:	4910      	ldr	r1, [pc, #64]	; (38dc <SPI_TEMP_PORT_init+0x58>)
    389a:	203b      	movs	r0, #59	; 0x3b
    389c:	4b10      	ldr	r3, [pc, #64]	; (38e0 <SPI_TEMP_PORT_init+0x5c>)
    389e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    38a0:	2100      	movs	r1, #0
    38a2:	203a      	movs	r0, #58	; 0x3a
    38a4:	4b0b      	ldr	r3, [pc, #44]	; (38d4 <SPI_TEMP_PORT_init+0x50>)
    38a6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    38a8:	2102      	movs	r1, #2
    38aa:	203a      	movs	r0, #58	; 0x3a
    38ac:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <SPI_TEMP_PORT_init+0x54>)
    38ae:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    38b0:	490c      	ldr	r1, [pc, #48]	; (38e4 <SPI_TEMP_PORT_init+0x60>)
    38b2:	203a      	movs	r0, #58	; 0x3a
    38b4:	4b0a      	ldr	r3, [pc, #40]	; (38e0 <SPI_TEMP_PORT_init+0x5c>)
    38b6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    38b8:	2101      	movs	r1, #1
    38ba:	203c      	movs	r0, #60	; 0x3c
    38bc:	4b06      	ldr	r3, [pc, #24]	; (38d8 <SPI_TEMP_PORT_init+0x54>)
    38be:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    38c0:	2100      	movs	r1, #0
    38c2:	203c      	movs	r0, #60	; 0x3c
    38c4:	4b08      	ldr	r3, [pc, #32]	; (38e8 <SPI_TEMP_PORT_init+0x64>)
    38c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    38c8:	4908      	ldr	r1, [pc, #32]	; (38ec <SPI_TEMP_PORT_init+0x68>)
    38ca:	203c      	movs	r0, #60	; 0x3c
    38cc:	4b04      	ldr	r3, [pc, #16]	; (38e0 <SPI_TEMP_PORT_init+0x5c>)
    38ce:	4798      	blx	r3
}
    38d0:	bf00      	nop
    38d2:	bd80      	pop	{r7, pc}
    38d4:	000033c5 	.word	0x000033c5
    38d8:	0000338d 	.word	0x0000338d
    38dc:	003b0003 	.word	0x003b0003
    38e0:	0000336d 	.word	0x0000336d
    38e4:	003a0003 	.word	0x003a0003
    38e8:	00003339 	.word	0x00003339
    38ec:	003c0003 	.word	0x003c0003

000038f0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38f4:	2240      	movs	r2, #64	; 0x40
    38f6:	2122      	movs	r1, #34	; 0x22
    38f8:	4806      	ldr	r0, [pc, #24]	; (3914 <SPI_TEMP_CLOCK_init+0x24>)
    38fa:	4b07      	ldr	r3, [pc, #28]	; (3918 <SPI_TEMP_CLOCK_init+0x28>)
    38fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    38fe:	2243      	movs	r2, #67	; 0x43
    3900:	2103      	movs	r1, #3
    3902:	4804      	ldr	r0, [pc, #16]	; (3914 <SPI_TEMP_CLOCK_init+0x24>)
    3904:	4b04      	ldr	r3, [pc, #16]	; (3918 <SPI_TEMP_CLOCK_init+0x28>)
    3906:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    3908:	4804      	ldr	r0, [pc, #16]	; (391c <SPI_TEMP_CLOCK_init+0x2c>)
    390a:	4b05      	ldr	r3, [pc, #20]	; (3920 <SPI_TEMP_CLOCK_init+0x30>)
    390c:	4798      	blx	r3
}
    390e:	bf00      	nop
    3910:	bd80      	pop	{r7, pc}
    3912:	bf00      	nop
    3914:	40001c00 	.word	0x40001c00
    3918:	00002b59 	.word	0x00002b59
    391c:	40000800 	.word	0x40000800
    3920:	00002ddf 	.word	0x00002ddf

00003924 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    3924:	b580      	push	{r7, lr}
    3926:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    3928:	4b05      	ldr	r3, [pc, #20]	; (3940 <SPI_TEMP_init+0x1c>)
    392a:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    392c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    3930:	4804      	ldr	r0, [pc, #16]	; (3944 <SPI_TEMP_init+0x20>)
    3932:	4b05      	ldr	r3, [pc, #20]	; (3948 <SPI_TEMP_init+0x24>)
    3934:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    3936:	4b05      	ldr	r3, [pc, #20]	; (394c <SPI_TEMP_init+0x28>)
    3938:	4798      	blx	r3
}
    393a:	bf00      	nop
    393c:	bd80      	pop	{r7, pc}
    393e:	bf00      	nop
    3940:	000038f1 	.word	0x000038f1
    3944:	20002630 	.word	0x20002630
    3948:	00004e4d 	.word	0x00004e4d
    394c:	00003885 	.word	0x00003885

00003950 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    3950:	b580      	push	{r7, lr}
    3952:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    3954:	2100      	movs	r1, #0
    3956:	2017      	movs	r0, #23
    3958:	4b07      	ldr	r3, [pc, #28]	; (3978 <I2C_EXPANDER_PORT_init+0x28>)
    395a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    395c:	4907      	ldr	r1, [pc, #28]	; (397c <I2C_EXPANDER_PORT_init+0x2c>)
    395e:	2017      	movs	r0, #23
    3960:	4b07      	ldr	r3, [pc, #28]	; (3980 <I2C_EXPANDER_PORT_init+0x30>)
    3962:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    3964:	2100      	movs	r1, #0
    3966:	2016      	movs	r0, #22
    3968:	4b03      	ldr	r3, [pc, #12]	; (3978 <I2C_EXPANDER_PORT_init+0x28>)
    396a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    396c:	4905      	ldr	r1, [pc, #20]	; (3984 <I2C_EXPANDER_PORT_init+0x34>)
    396e:	2016      	movs	r0, #22
    3970:	4b03      	ldr	r3, [pc, #12]	; (3980 <I2C_EXPANDER_PORT_init+0x30>)
    3972:	4798      	blx	r3
}
    3974:	bf00      	nop
    3976:	bd80      	pop	{r7, pc}
    3978:	00003339 	.word	0x00003339
    397c:	00170003 	.word	0x00170003
    3980:	0000336d 	.word	0x0000336d
    3984:	00160003 	.word	0x00160003

00003988 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    3988:	b580      	push	{r7, lr}
    398a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    398c:	2242      	movs	r2, #66	; 0x42
    398e:	2123      	movs	r1, #35	; 0x23
    3990:	4806      	ldr	r0, [pc, #24]	; (39ac <I2C_EXPANDER_CLOCK_init+0x24>)
    3992:	4b07      	ldr	r3, [pc, #28]	; (39b0 <I2C_EXPANDER_CLOCK_init+0x28>)
    3994:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3996:	2246      	movs	r2, #70	; 0x46
    3998:	2103      	movs	r1, #3
    399a:	4804      	ldr	r0, [pc, #16]	; (39ac <I2C_EXPANDER_CLOCK_init+0x24>)
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <I2C_EXPANDER_CLOCK_init+0x28>)
    399e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    39a0:	4804      	ldr	r0, [pc, #16]	; (39b4 <I2C_EXPANDER_CLOCK_init+0x2c>)
    39a2:	4b05      	ldr	r3, [pc, #20]	; (39b8 <I2C_EXPANDER_CLOCK_init+0x30>)
    39a4:	4798      	blx	r3
}
    39a6:	bf00      	nop
    39a8:	bd80      	pop	{r7, pc}
    39aa:	bf00      	nop
    39ac:	40001c00 	.word	0x40001c00
    39b0:	00002b59 	.word	0x00002b59
    39b4:	40000800 	.word	0x40000800
    39b8:	00002dff 	.word	0x00002dff

000039bc <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    39bc:	b580      	push	{r7, lr}
    39be:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    39c0:	4b04      	ldr	r3, [pc, #16]	; (39d4 <I2C_EXPANDER_init+0x18>)
    39c2:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    39c4:	4904      	ldr	r1, [pc, #16]	; (39d8 <I2C_EXPANDER_init+0x1c>)
    39c6:	4805      	ldr	r0, [pc, #20]	; (39dc <I2C_EXPANDER_init+0x20>)
    39c8:	4b05      	ldr	r3, [pc, #20]	; (39e0 <I2C_EXPANDER_init+0x24>)
    39ca:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    39cc:	4b05      	ldr	r3, [pc, #20]	; (39e4 <I2C_EXPANDER_init+0x28>)
    39ce:	4798      	blx	r3
}
    39d0:	bf00      	nop
    39d2:	bd80      	pop	{r7, pc}
    39d4:	00003989 	.word	0x00003989
    39d8:	43000400 	.word	0x43000400
    39dc:	2000274c 	.word	0x2000274c
    39e0:	000047e1 	.word	0x000047e1
    39e4:	00003951 	.word	0x00003951

000039e8 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    39e8:	b580      	push	{r7, lr}
    39ea:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    39ec:	2100      	movs	r1, #0
    39ee:	2068      	movs	r0, #104	; 0x68
    39f0:	4b07      	ldr	r3, [pc, #28]	; (3a10 <I2C_EEPROM_PORT_init+0x28>)
    39f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    39f4:	4907      	ldr	r1, [pc, #28]	; (3a14 <I2C_EEPROM_PORT_init+0x2c>)
    39f6:	2068      	movs	r0, #104	; 0x68
    39f8:	4b07      	ldr	r3, [pc, #28]	; (3a18 <I2C_EEPROM_PORT_init+0x30>)
    39fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    39fc:	2100      	movs	r1, #0
    39fe:	2069      	movs	r0, #105	; 0x69
    3a00:	4b03      	ldr	r3, [pc, #12]	; (3a10 <I2C_EEPROM_PORT_init+0x28>)
    3a02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    3a04:	4905      	ldr	r1, [pc, #20]	; (3a1c <I2C_EEPROM_PORT_init+0x34>)
    3a06:	2069      	movs	r0, #105	; 0x69
    3a08:	4b03      	ldr	r3, [pc, #12]	; (3a18 <I2C_EEPROM_PORT_init+0x30>)
    3a0a:	4798      	blx	r3
}
    3a0c:	bf00      	nop
    3a0e:	bd80      	pop	{r7, pc}
    3a10:	00003339 	.word	0x00003339
    3a14:	00680002 	.word	0x00680002
    3a18:	0000336d 	.word	0x0000336d
    3a1c:	00690002 	.word	0x00690002

00003a20 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    3a20:	b580      	push	{r7, lr}
    3a22:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a24:	2242      	movs	r2, #66	; 0x42
    3a26:	2125      	movs	r1, #37	; 0x25
    3a28:	4806      	ldr	r0, [pc, #24]	; (3a44 <I2C_EEPROM_CLOCK_init+0x24>)
    3a2a:	4b07      	ldr	r3, [pc, #28]	; (3a48 <I2C_EEPROM_CLOCK_init+0x28>)
    3a2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a2e:	2243      	movs	r2, #67	; 0x43
    3a30:	2103      	movs	r1, #3
    3a32:	4804      	ldr	r0, [pc, #16]	; (3a44 <I2C_EEPROM_CLOCK_init+0x24>)
    3a34:	4b04      	ldr	r3, [pc, #16]	; (3a48 <I2C_EEPROM_CLOCK_init+0x28>)
    3a36:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    3a38:	4804      	ldr	r0, [pc, #16]	; (3a4c <I2C_EEPROM_CLOCK_init+0x2c>)
    3a3a:	4b05      	ldr	r3, [pc, #20]	; (3a50 <I2C_EEPROM_CLOCK_init+0x30>)
    3a3c:	4798      	blx	r3
}
    3a3e:	bf00      	nop
    3a40:	bd80      	pop	{r7, pc}
    3a42:	bf00      	nop
    3a44:	40001c00 	.word	0x40001c00
    3a48:	00002b59 	.word	0x00002b59
    3a4c:	40000800 	.word	0x40000800
    3a50:	00002e1f 	.word	0x00002e1f

00003a54 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    3a54:	b580      	push	{r7, lr}
    3a56:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    3a58:	4b04      	ldr	r3, [pc, #16]	; (3a6c <I2C_EEPROM_init+0x18>)
    3a5a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    3a5c:	4904      	ldr	r1, [pc, #16]	; (3a70 <I2C_EEPROM_init+0x1c>)
    3a5e:	4805      	ldr	r0, [pc, #20]	; (3a74 <I2C_EEPROM_init+0x20>)
    3a60:	4b05      	ldr	r3, [pc, #20]	; (3a78 <I2C_EEPROM_init+0x24>)
    3a62:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    3a64:	4b05      	ldr	r3, [pc, #20]	; (3a7c <I2C_EEPROM_init+0x28>)
    3a66:	4798      	blx	r3
}
    3a68:	bf00      	nop
    3a6a:	bd80      	pop	{r7, pc}
    3a6c:	00003a21 	.word	0x00003a21
    3a70:	43000c00 	.word	0x43000c00
    3a74:	200027a8 	.word	0x200027a8
    3a78:	000047e1 	.word	0x000047e1
    3a7c:	000039e9 	.word	0x000039e9

00003a80 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    3a84:	4808      	ldr	r0, [pc, #32]	; (3aa8 <TIMER_USB_init+0x28>)
    3a86:	4b09      	ldr	r3, [pc, #36]	; (3aac <TIMER_USB_init+0x2c>)
    3a88:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3a8a:	2243      	movs	r2, #67	; 0x43
    3a8c:	2109      	movs	r1, #9
    3a8e:	4808      	ldr	r0, [pc, #32]	; (3ab0 <TIMER_USB_init+0x30>)
    3a90:	4b08      	ldr	r3, [pc, #32]	; (3ab4 <TIMER_USB_init+0x34>)
    3a92:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    3a94:	4b08      	ldr	r3, [pc, #32]	; (3ab8 <TIMER_USB_init+0x38>)
    3a96:	4798      	blx	r3
    3a98:	4603      	mov	r3, r0
    3a9a:	461a      	mov	r2, r3
    3a9c:	4907      	ldr	r1, [pc, #28]	; (3abc <TIMER_USB_init+0x3c>)
    3a9e:	4808      	ldr	r0, [pc, #32]	; (3ac0 <TIMER_USB_init+0x40>)
    3aa0:	4b08      	ldr	r3, [pc, #32]	; (3ac4 <TIMER_USB_init+0x44>)
    3aa2:	4798      	blx	r3
}
    3aa4:	bf00      	nop
    3aa6:	bd80      	pop	{r7, pc}
    3aa8:	40000800 	.word	0x40000800
    3aac:	00002c9f 	.word	0x00002c9f
    3ab0:	40001c00 	.word	0x40001c00
    3ab4:	00002b59 	.word	0x00002b59
    3ab8:	0000a92d 	.word	0x0000a92d
    3abc:	40003800 	.word	0x40003800
    3ac0:	20002730 	.word	0x20002730
    3ac4:	000051d1 	.word	0x000051d1

00003ac8 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    3acc:	4808      	ldr	r0, [pc, #32]	; (3af0 <TIMER_EVENT_init+0x28>)
    3ace:	4b09      	ldr	r3, [pc, #36]	; (3af4 <TIMER_EVENT_init+0x2c>)
    3ad0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3ad2:	2245      	movs	r2, #69	; 0x45
    3ad4:	2109      	movs	r1, #9
    3ad6:	4808      	ldr	r0, [pc, #32]	; (3af8 <TIMER_EVENT_init+0x30>)
    3ad8:	4b08      	ldr	r3, [pc, #32]	; (3afc <TIMER_EVENT_init+0x34>)
    3ada:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    3adc:	4b08      	ldr	r3, [pc, #32]	; (3b00 <TIMER_EVENT_init+0x38>)
    3ade:	4798      	blx	r3
    3ae0:	4603      	mov	r3, r0
    3ae2:	461a      	mov	r2, r3
    3ae4:	4907      	ldr	r1, [pc, #28]	; (3b04 <TIMER_EVENT_init+0x3c>)
    3ae6:	4808      	ldr	r0, [pc, #32]	; (3b08 <TIMER_EVENT_init+0x40>)
    3ae8:	4b08      	ldr	r3, [pc, #32]	; (3b0c <TIMER_EVENT_init+0x44>)
    3aea:	4798      	blx	r3
}
    3aec:	bf00      	nop
    3aee:	bd80      	pop	{r7, pc}
    3af0:	40000800 	.word	0x40000800
    3af4:	00002cbf 	.word	0x00002cbf
    3af8:	40001c00 	.word	0x40001c00
    3afc:	00002b59 	.word	0x00002b59
    3b00:	0000a92d 	.word	0x0000a92d
    3b04:	40003c00 	.word	0x40003c00
    3b08:	20002698 	.word	0x20002698
    3b0c:	000051d1 	.word	0x000051d1

00003b10 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    3b10:	b580      	push	{r7, lr}
    3b12:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    3b14:	4808      	ldr	r0, [pc, #32]	; (3b38 <TIMER_ARINC_init+0x28>)
    3b16:	4b09      	ldr	r3, [pc, #36]	; (3b3c <TIMER_ARINC_init+0x2c>)
    3b18:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b1a:	2244      	movs	r2, #68	; 0x44
    3b1c:	211a      	movs	r1, #26
    3b1e:	4808      	ldr	r0, [pc, #32]	; (3b40 <TIMER_ARINC_init+0x30>)
    3b20:	4b08      	ldr	r3, [pc, #32]	; (3b44 <TIMER_ARINC_init+0x34>)
    3b22:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    3b24:	4b08      	ldr	r3, [pc, #32]	; (3b48 <TIMER_ARINC_init+0x38>)
    3b26:	4798      	blx	r3
    3b28:	4603      	mov	r3, r0
    3b2a:	461a      	mov	r2, r3
    3b2c:	4907      	ldr	r1, [pc, #28]	; (3b4c <TIMER_ARINC_init+0x3c>)
    3b2e:	4808      	ldr	r0, [pc, #32]	; (3b50 <TIMER_ARINC_init+0x40>)
    3b30:	4b08      	ldr	r3, [pc, #32]	; (3b54 <TIMER_ARINC_init+0x44>)
    3b32:	4798      	blx	r3
}
    3b34:	bf00      	nop
    3b36:	bd80      	pop	{r7, pc}
    3b38:	40000800 	.word	0x40000800
    3b3c:	00002d3f 	.word	0x00002d3f
    3b40:	40001c00 	.word	0x40001c00
    3b44:	00002b59 	.word	0x00002b59
    3b48:	0000a92d 	.word	0x0000a92d
    3b4c:	4101a000 	.word	0x4101a000
    3b50:	20002714 	.word	0x20002714
    3b54:	000051d1 	.word	0x000051d1

00003b58 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    3b58:	b580      	push	{r7, lr}
    3b5a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    3b5c:	4808      	ldr	r0, [pc, #32]	; (3b80 <TIMER_HVAC_init+0x28>)
    3b5e:	4b09      	ldr	r3, [pc, #36]	; (3b84 <TIMER_HVAC_init+0x2c>)
    3b60:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3b62:	2245      	movs	r2, #69	; 0x45
    3b64:	211a      	movs	r1, #26
    3b66:	4808      	ldr	r0, [pc, #32]	; (3b88 <TIMER_HVAC_init+0x30>)
    3b68:	4b08      	ldr	r3, [pc, #32]	; (3b8c <TIMER_HVAC_init+0x34>)
    3b6a:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    3b6c:	4b08      	ldr	r3, [pc, #32]	; (3b90 <TIMER_HVAC_init+0x38>)
    3b6e:	4798      	blx	r3
    3b70:	4603      	mov	r3, r0
    3b72:	461a      	mov	r2, r3
    3b74:	4907      	ldr	r1, [pc, #28]	; (3b94 <TIMER_HVAC_init+0x3c>)
    3b76:	4808      	ldr	r0, [pc, #32]	; (3b98 <TIMER_HVAC_init+0x40>)
    3b78:	4b08      	ldr	r3, [pc, #32]	; (3b9c <TIMER_HVAC_init+0x44>)
    3b7a:	4798      	blx	r3
}
    3b7c:	bf00      	nop
    3b7e:	bd80      	pop	{r7, pc}
    3b80:	40000800 	.word	0x40000800
    3b84:	00002d5f 	.word	0x00002d5f
    3b88:	40001c00 	.word	0x40001c00
    3b8c:	00002b59 	.word	0x00002b59
    3b90:	0000a92d 	.word	0x0000a92d
    3b94:	4101c000 	.word	0x4101c000
    3b98:	2000278c 	.word	0x2000278c
    3b9c:	000051d1 	.word	0x000051d1

00003ba0 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    3ba0:	b580      	push	{r7, lr}
    3ba2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    3ba4:	4808      	ldr	r0, [pc, #32]	; (3bc8 <TIMER_MAINTENANCE_init+0x28>)
    3ba6:	4b09      	ldr	r3, [pc, #36]	; (3bcc <TIMER_MAINTENANCE_init+0x2c>)
    3ba8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3baa:	2246      	movs	r2, #70	; 0x46
    3bac:	211e      	movs	r1, #30
    3bae:	4808      	ldr	r0, [pc, #32]	; (3bd0 <TIMER_MAINTENANCE_init+0x30>)
    3bb0:	4b08      	ldr	r3, [pc, #32]	; (3bd4 <TIMER_MAINTENANCE_init+0x34>)
    3bb2:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    3bb4:	4b08      	ldr	r3, [pc, #32]	; (3bd8 <TIMER_MAINTENANCE_init+0x38>)
    3bb6:	4798      	blx	r3
    3bb8:	4603      	mov	r3, r0
    3bba:	461a      	mov	r2, r3
    3bbc:	4907      	ldr	r1, [pc, #28]	; (3bdc <TIMER_MAINTENANCE_init+0x3c>)
    3bbe:	4808      	ldr	r0, [pc, #32]	; (3be0 <TIMER_MAINTENANCE_init+0x40>)
    3bc0:	4b08      	ldr	r3, [pc, #32]	; (3be4 <TIMER_MAINTENANCE_init+0x44>)
    3bc2:	4798      	blx	r3
}
    3bc4:	bf00      	nop
    3bc6:	bd80      	pop	{r7, pc}
    3bc8:	40000800 	.word	0x40000800
    3bcc:	00002d7f 	.word	0x00002d7f
    3bd0:	40001c00 	.word	0x40001c00
    3bd4:	00002b59 	.word	0x00002b59
    3bd8:	0000a92d 	.word	0x0000a92d
    3bdc:	42001400 	.word	0x42001400
    3be0:	20002678 	.word	0x20002678
    3be4:	000051d1 	.word	0x000051d1

00003be8 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    3be8:	b580      	push	{r7, lr}
    3bea:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    3bec:	4808      	ldr	r0, [pc, #32]	; (3c10 <TIMER_INTERFACE_init+0x28>)
    3bee:	4b09      	ldr	r3, [pc, #36]	; (3c14 <TIMER_INTERFACE_init+0x2c>)
    3bf0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3bf2:	2246      	movs	r2, #70	; 0x46
    3bf4:	211e      	movs	r1, #30
    3bf6:	4808      	ldr	r0, [pc, #32]	; (3c18 <TIMER_INTERFACE_init+0x30>)
    3bf8:	4b08      	ldr	r3, [pc, #32]	; (3c1c <TIMER_INTERFACE_init+0x34>)
    3bfa:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    3bfc:	4b08      	ldr	r3, [pc, #32]	; (3c20 <TIMER_INTERFACE_init+0x38>)
    3bfe:	4798      	blx	r3
    3c00:	4603      	mov	r3, r0
    3c02:	461a      	mov	r2, r3
    3c04:	4907      	ldr	r1, [pc, #28]	; (3c24 <TIMER_INTERFACE_init+0x3c>)
    3c06:	4808      	ldr	r0, [pc, #32]	; (3c28 <TIMER_INTERFACE_init+0x40>)
    3c08:	4b08      	ldr	r3, [pc, #32]	; (3c2c <TIMER_INTERFACE_init+0x44>)
    3c0a:	4798      	blx	r3
}
    3c0c:	bf00      	nop
    3c0e:	bd80      	pop	{r7, pc}
    3c10:	40000800 	.word	0x40000800
    3c14:	00002d9f 	.word	0x00002d9f
    3c18:	40001c00 	.word	0x40001c00
    3c1c:	00002b59 	.word	0x00002b59
    3c20:	0000a92d 	.word	0x0000a92d
    3c24:	42001800 	.word	0x42001800
    3c28:	200026b4 	.word	0x200026b4
    3c2c:	000051d1 	.word	0x000051d1

00003c30 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    3c30:	b480      	push	{r7}
    3c32:	af00      	add	r7, sp, #0
}
    3c34:	bf00      	nop
    3c36:	46bd      	mov	sp, r7
    3c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c3c:	4770      	bx	lr
	...

00003c40 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    3c40:	b580      	push	{r7, lr}
    3c42:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    3c44:	4804      	ldr	r0, [pc, #16]	; (3c58 <LIVE_PULSE_CLOCK_init+0x18>)
    3c46:	4b05      	ldr	r3, [pc, #20]	; (3c5c <LIVE_PULSE_CLOCK_init+0x1c>)
    3c48:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3c4a:	224b      	movs	r2, #75	; 0x4b
    3c4c:	2127      	movs	r1, #39	; 0x27
    3c4e:	4804      	ldr	r0, [pc, #16]	; (3c60 <LIVE_PULSE_CLOCK_init+0x20>)
    3c50:	4b04      	ldr	r3, [pc, #16]	; (3c64 <LIVE_PULSE_CLOCK_init+0x24>)
    3c52:	4798      	blx	r3
}
    3c54:	bf00      	nop
    3c56:	bd80      	pop	{r7, pc}
    3c58:	40000800 	.word	0x40000800
    3c5c:	00002e3f 	.word	0x00002e3f
    3c60:	40001c00 	.word	0x40001c00
    3c64:	00002b59 	.word	0x00002b59

00003c68 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    3c6c:	4b06      	ldr	r3, [pc, #24]	; (3c88 <LIVE_PULSE_init+0x20>)
    3c6e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    3c70:	4b06      	ldr	r3, [pc, #24]	; (3c8c <LIVE_PULSE_init+0x24>)
    3c72:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    3c74:	4b06      	ldr	r3, [pc, #24]	; (3c90 <LIVE_PULSE_init+0x28>)
    3c76:	4798      	blx	r3
    3c78:	4603      	mov	r3, r0
    3c7a:	461a      	mov	r2, r3
    3c7c:	4905      	ldr	r1, [pc, #20]	; (3c94 <LIVE_PULSE_init+0x2c>)
    3c7e:	4806      	ldr	r0, [pc, #24]	; (3c98 <LIVE_PULSE_init+0x30>)
    3c80:	4b06      	ldr	r3, [pc, #24]	; (3c9c <LIVE_PULSE_init+0x34>)
    3c82:	4798      	blx	r3
}
    3c84:	bf00      	nop
    3c86:	bd80      	pop	{r7, pc}
    3c88:	00003c41 	.word	0x00003c41
    3c8c:	00003c31 	.word	0x00003c31
    3c90:	0000a93d 	.word	0x0000a93d
    3c94:	43001800 	.word	0x43001800
    3c98:	200026d0 	.word	0x200026d0
    3c9c:	00004a25 	.word	0x00004a25

00003ca0 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    3ca4:	2102      	movs	r1, #2
    3ca6:	2018      	movs	r0, #24
    3ca8:	4b0f      	ldr	r3, [pc, #60]	; (3ce8 <CDCUSB_PORT_init+0x48>)
    3caa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    3cac:	2100      	movs	r1, #0
    3cae:	2018      	movs	r0, #24
    3cb0:	4b0e      	ldr	r3, [pc, #56]	; (3cec <CDCUSB_PORT_init+0x4c>)
    3cb2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    3cb4:	2100      	movs	r1, #0
    3cb6:	2018      	movs	r0, #24
    3cb8:	4b0d      	ldr	r3, [pc, #52]	; (3cf0 <CDCUSB_PORT_init+0x50>)
    3cba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    3cbc:	490d      	ldr	r1, [pc, #52]	; (3cf4 <CDCUSB_PORT_init+0x54>)
    3cbe:	2018      	movs	r0, #24
    3cc0:	4b0d      	ldr	r3, [pc, #52]	; (3cf8 <CDCUSB_PORT_init+0x58>)
    3cc2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    3cc4:	2102      	movs	r1, #2
    3cc6:	2019      	movs	r0, #25
    3cc8:	4b07      	ldr	r3, [pc, #28]	; (3ce8 <CDCUSB_PORT_init+0x48>)
    3cca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    3ccc:	2100      	movs	r1, #0
    3cce:	2019      	movs	r0, #25
    3cd0:	4b06      	ldr	r3, [pc, #24]	; (3cec <CDCUSB_PORT_init+0x4c>)
    3cd2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    3cd4:	2100      	movs	r1, #0
    3cd6:	2019      	movs	r0, #25
    3cd8:	4b05      	ldr	r3, [pc, #20]	; (3cf0 <CDCUSB_PORT_init+0x50>)
    3cda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    3cdc:	4907      	ldr	r1, [pc, #28]	; (3cfc <CDCUSB_PORT_init+0x5c>)
    3cde:	2019      	movs	r0, #25
    3ce0:	4b05      	ldr	r3, [pc, #20]	; (3cf8 <CDCUSB_PORT_init+0x58>)
    3ce2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    3ce4:	bf00      	nop
    3ce6:	bd80      	pop	{r7, pc}
    3ce8:	0000338d 	.word	0x0000338d
    3cec:	000033c5 	.word	0x000033c5
    3cf0:	00003339 	.word	0x00003339
    3cf4:	00180007 	.word	0x00180007
    3cf8:	0000336d 	.word	0x0000336d
    3cfc:	00190007 	.word	0x00190007

00003d00 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    3d00:	b580      	push	{r7, lr}
    3d02:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    3d04:	2242      	movs	r2, #66	; 0x42
    3d06:	210a      	movs	r1, #10
    3d08:	4805      	ldr	r0, [pc, #20]	; (3d20 <CDCUSB_CLOCK_init+0x20>)
    3d0a:	4b06      	ldr	r3, [pc, #24]	; (3d24 <CDCUSB_CLOCK_init+0x24>)
    3d0c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    3d0e:	4806      	ldr	r0, [pc, #24]	; (3d28 <CDCUSB_CLOCK_init+0x28>)
    3d10:	4b06      	ldr	r3, [pc, #24]	; (3d2c <CDCUSB_CLOCK_init+0x2c>)
    3d12:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    3d14:	4804      	ldr	r0, [pc, #16]	; (3d28 <CDCUSB_CLOCK_init+0x28>)
    3d16:	4b06      	ldr	r3, [pc, #24]	; (3d30 <CDCUSB_CLOCK_init+0x30>)
    3d18:	4798      	blx	r3
}
    3d1a:	bf00      	nop
    3d1c:	bd80      	pop	{r7, pc}
    3d1e:	bf00      	nop
    3d20:	40001c00 	.word	0x40001c00
    3d24:	00002b59 	.word	0x00002b59
    3d28:	40000800 	.word	0x40000800
    3d2c:	00002b7f 	.word	0x00002b7f
    3d30:	00002cdf 	.word	0x00002cdf

00003d34 <CDCUSB_init>:

void CDCUSB_init(void)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    3d38:	4b03      	ldr	r3, [pc, #12]	; (3d48 <CDCUSB_init+0x14>)
    3d3a:	4798      	blx	r3
	usb_d_init();
    3d3c:	4b03      	ldr	r3, [pc, #12]	; (3d4c <CDCUSB_init+0x18>)
    3d3e:	4798      	blx	r3
	CDCUSB_PORT_init();
    3d40:	4b03      	ldr	r3, [pc, #12]	; (3d50 <CDCUSB_init+0x1c>)
    3d42:	4798      	blx	r3
}
    3d44:	bf00      	nop
    3d46:	bd80      	pop	{r7, pc}
    3d48:	00003d01 	.word	0x00003d01
    3d4c:	000059e1 	.word	0x000059e1
    3d50:	00003ca1 	.word	0x00003ca1

00003d54 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    3d54:	b580      	push	{r7, lr}
    3d56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    3d58:	4802      	ldr	r0, [pc, #8]	; (3d64 <WATCHDOG_CLOCK_init+0x10>)
    3d5a:	4b03      	ldr	r3, [pc, #12]	; (3d68 <WATCHDOG_CLOCK_init+0x14>)
    3d5c:	4798      	blx	r3
}
    3d5e:	bf00      	nop
    3d60:	bd80      	pop	{r7, pc}
    3d62:	bf00      	nop
    3d64:	40000800 	.word	0x40000800
    3d68:	00002bff 	.word	0x00002bff

00003d6c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    3d6c:	b580      	push	{r7, lr}
    3d6e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    3d70:	4b03      	ldr	r3, [pc, #12]	; (3d80 <WATCHDOG_init+0x14>)
    3d72:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    3d74:	4903      	ldr	r1, [pc, #12]	; (3d84 <WATCHDOG_init+0x18>)
    3d76:	4804      	ldr	r0, [pc, #16]	; (3d88 <WATCHDOG_init+0x1c>)
    3d78:	4b04      	ldr	r3, [pc, #16]	; (3d8c <WATCHDOG_init+0x20>)
    3d7a:	4798      	blx	r3
}
    3d7c:	bf00      	nop
    3d7e:	bd80      	pop	{r7, pc}
    3d80:	00003d55 	.word	0x00003d55
    3d84:	40002000 	.word	0x40002000
    3d88:	20002808 	.word	0x20002808
    3d8c:	0000340d 	.word	0x0000340d

00003d90 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    3d90:	b580      	push	{r7, lr}
    3d92:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    3d94:	4904      	ldr	r1, [pc, #16]	; (3da8 <CAN_CCU_PORT_init+0x18>)
    3d96:	202d      	movs	r0, #45	; 0x2d
    3d98:	4b04      	ldr	r3, [pc, #16]	; (3dac <CAN_CCU_PORT_init+0x1c>)
    3d9a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    3d9c:	4904      	ldr	r1, [pc, #16]	; (3db0 <CAN_CCU_PORT_init+0x20>)
    3d9e:	202c      	movs	r0, #44	; 0x2c
    3da0:	4b02      	ldr	r3, [pc, #8]	; (3dac <CAN_CCU_PORT_init+0x1c>)
    3da2:	4798      	blx	r3
}
    3da4:	bf00      	nop
    3da6:	bd80      	pop	{r7, pc}
    3da8:	002d0007 	.word	0x002d0007
    3dac:	0000336d 	.word	0x0000336d
    3db0:	002c0007 	.word	0x002c0007

00003db4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    3db4:	b580      	push	{r7, lr}
    3db6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    3db8:	4807      	ldr	r0, [pc, #28]	; (3dd8 <CAN_CCU_init+0x24>)
    3dba:	4b08      	ldr	r3, [pc, #32]	; (3ddc <CAN_CCU_init+0x28>)
    3dbc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    3dbe:	2243      	movs	r2, #67	; 0x43
    3dc0:	211c      	movs	r1, #28
    3dc2:	4807      	ldr	r0, [pc, #28]	; (3de0 <CAN_CCU_init+0x2c>)
    3dc4:	4b07      	ldr	r3, [pc, #28]	; (3de4 <CAN_CCU_init+0x30>)
    3dc6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    3dc8:	4907      	ldr	r1, [pc, #28]	; (3de8 <CAN_CCU_init+0x34>)
    3dca:	4808      	ldr	r0, [pc, #32]	; (3dec <CAN_CCU_init+0x38>)
    3dcc:	4b08      	ldr	r3, [pc, #32]	; (3df0 <CAN_CCU_init+0x3c>)
    3dce:	4798      	blx	r3
	CAN_CCU_PORT_init();
    3dd0:	4b08      	ldr	r3, [pc, #32]	; (3df4 <CAN_CCU_init+0x40>)
    3dd2:	4798      	blx	r3
}
    3dd4:	bf00      	nop
    3dd6:	bd80      	pop	{r7, pc}
    3dd8:	40000800 	.word	0x40000800
    3ddc:	00002bbf 	.word	0x00002bbf
    3de0:	40001c00 	.word	0x40001c00
    3de4:	00002b59 	.word	0x00002b59
    3de8:	42000400 	.word	0x42000400
    3dec:	200026ec 	.word	0x200026ec
    3df0:	000042c9 	.word	0x000042c9
    3df4:	00003d91 	.word	0x00003d91

00003df8 <system_init>:

void system_init(void)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	af00      	add	r7, sp, #0
	init_mcu();
    3dfc:	4b50      	ldr	r3, [pc, #320]	; (3f40 <system_init+0x148>)
    3dfe:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    3e00:	2101      	movs	r1, #1
    3e02:	200f      	movs	r0, #15
    3e04:	4b4f      	ldr	r3, [pc, #316]	; (3f44 <system_init+0x14c>)
    3e06:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    3e08:	2102      	movs	r1, #2
    3e0a:	200f      	movs	r0, #15
    3e0c:	4b4e      	ldr	r3, [pc, #312]	; (3f48 <system_init+0x150>)
    3e0e:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    3e10:	f04f 31ff 	mov.w	r1, #4294967295
    3e14:	200f      	movs	r0, #15
    3e16:	4b4d      	ldr	r3, [pc, #308]	; (3f4c <system_init+0x154>)
    3e18:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    3e1a:	2101      	movs	r1, #1
    3e1c:	2013      	movs	r0, #19
    3e1e:	4b49      	ldr	r3, [pc, #292]	; (3f44 <system_init+0x14c>)
    3e20:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    3e22:	2102      	movs	r1, #2
    3e24:	2013      	movs	r0, #19
    3e26:	4b48      	ldr	r3, [pc, #288]	; (3f48 <system_init+0x150>)
    3e28:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    3e2a:	f04f 31ff 	mov.w	r1, #4294967295
    3e2e:	2013      	movs	r0, #19
    3e30:	4b46      	ldr	r3, [pc, #280]	; (3f4c <system_init+0x154>)
    3e32:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    3e34:	2101      	movs	r1, #1
    3e36:	2027      	movs	r0, #39	; 0x27
    3e38:	4b43      	ldr	r3, [pc, #268]	; (3f48 <system_init+0x150>)
    3e3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    3e3c:	2102      	movs	r1, #2
    3e3e:	2027      	movs	r0, #39	; 0x27
    3e40:	4b43      	ldr	r3, [pc, #268]	; (3f50 <system_init+0x158>)
    3e42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    3e44:	f04f 31ff 	mov.w	r1, #4294967295
    3e48:	2027      	movs	r0, #39	; 0x27
    3e4a:	4b40      	ldr	r3, [pc, #256]	; (3f4c <system_init+0x154>)
    3e4c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    3e4e:	2101      	movs	r1, #1
    3e50:	203d      	movs	r0, #61	; 0x3d
    3e52:	4b3c      	ldr	r3, [pc, #240]	; (3f44 <system_init+0x14c>)
    3e54:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    3e56:	2102      	movs	r1, #2
    3e58:	203d      	movs	r0, #61	; 0x3d
    3e5a:	4b3b      	ldr	r3, [pc, #236]	; (3f48 <system_init+0x150>)
    3e5c:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    3e5e:	f04f 31ff 	mov.w	r1, #4294967295
    3e62:	203d      	movs	r0, #61	; 0x3d
    3e64:	4b39      	ldr	r3, [pc, #228]	; (3f4c <system_init+0x154>)
    3e66:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    3e68:	2101      	movs	r1, #1
    3e6a:	203f      	movs	r0, #63	; 0x3f
    3e6c:	4b36      	ldr	r3, [pc, #216]	; (3f48 <system_init+0x150>)
    3e6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    3e70:	2101      	movs	r1, #1
    3e72:	203f      	movs	r0, #63	; 0x3f
    3e74:	4b36      	ldr	r3, [pc, #216]	; (3f50 <system_init+0x158>)
    3e76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    3e78:	f04f 31ff 	mov.w	r1, #4294967295
    3e7c:	203f      	movs	r0, #63	; 0x3f
    3e7e:	4b33      	ldr	r3, [pc, #204]	; (3f4c <system_init+0x154>)
    3e80:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    3e82:	2100      	movs	r1, #0
    3e84:	204d      	movs	r0, #77	; 0x4d
    3e86:	4b2f      	ldr	r3, [pc, #188]	; (3f44 <system_init+0x14c>)
    3e88:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    3e8a:	2102      	movs	r1, #2
    3e8c:	204d      	movs	r0, #77	; 0x4d
    3e8e:	4b2e      	ldr	r3, [pc, #184]	; (3f48 <system_init+0x150>)
    3e90:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    3e92:	f04f 31ff 	mov.w	r1, #4294967295
    3e96:	204d      	movs	r0, #77	; 0x4d
    3e98:	4b2c      	ldr	r3, [pc, #176]	; (3f4c <system_init+0x154>)
    3e9a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    3e9c:	2101      	movs	r1, #1
    3e9e:	204e      	movs	r0, #78	; 0x4e
    3ea0:	4b28      	ldr	r3, [pc, #160]	; (3f44 <system_init+0x14c>)
    3ea2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    3ea4:	2102      	movs	r1, #2
    3ea6:	204e      	movs	r0, #78	; 0x4e
    3ea8:	4b27      	ldr	r3, [pc, #156]	; (3f48 <system_init+0x150>)
    3eaa:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    3eac:	f04f 31ff 	mov.w	r1, #4294967295
    3eb0:	204e      	movs	r0, #78	; 0x4e
    3eb2:	4b26      	ldr	r3, [pc, #152]	; (3f4c <system_init+0x154>)
    3eb4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    3eb6:	2100      	movs	r1, #0
    3eb8:	204f      	movs	r0, #79	; 0x4f
    3eba:	4b22      	ldr	r3, [pc, #136]	; (3f44 <system_init+0x14c>)
    3ebc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    3ebe:	2102      	movs	r1, #2
    3ec0:	204f      	movs	r0, #79	; 0x4f
    3ec2:	4b21      	ldr	r3, [pc, #132]	; (3f48 <system_init+0x150>)
    3ec4:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    3ec6:	f04f 31ff 	mov.w	r1, #4294967295
    3eca:	204f      	movs	r0, #79	; 0x4f
    3ecc:	4b1f      	ldr	r3, [pc, #124]	; (3f4c <system_init+0x154>)
    3ece:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    3ed0:	2100      	movs	r1, #0
    3ed2:	2052      	movs	r0, #82	; 0x52
    3ed4:	4b1b      	ldr	r3, [pc, #108]	; (3f44 <system_init+0x14c>)
    3ed6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    3ed8:	2102      	movs	r1, #2
    3eda:	2052      	movs	r0, #82	; 0x52
    3edc:	4b1a      	ldr	r3, [pc, #104]	; (3f48 <system_init+0x150>)
    3ede:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    3ee0:	f04f 31ff 	mov.w	r1, #4294967295
    3ee4:	2052      	movs	r0, #82	; 0x52
    3ee6:	4b19      	ldr	r3, [pc, #100]	; (3f4c <system_init+0x154>)
    3ee8:	4798      	blx	r3

	CRC_CALC_init();
    3eea:	4b1a      	ldr	r3, [pc, #104]	; (3f54 <system_init+0x15c>)
    3eec:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    3eee:	4b1a      	ldr	r3, [pc, #104]	; (3f58 <system_init+0x160>)
    3ef0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    3ef2:	4b1a      	ldr	r3, [pc, #104]	; (3f5c <system_init+0x164>)
    3ef4:	4798      	blx	r3

	QSPI_N25Q256_init();
    3ef6:	4b1a      	ldr	r3, [pc, #104]	; (3f60 <system_init+0x168>)
    3ef8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    3efa:	4b1a      	ldr	r3, [pc, #104]	; (3f64 <system_init+0x16c>)
    3efc:	4798      	blx	r3

	SPI_HI3593_init();
    3efe:	4b1a      	ldr	r3, [pc, #104]	; (3f68 <system_init+0x170>)
    3f00:	4798      	blx	r3

	SPI_MEMORIES_init();
    3f02:	4b1a      	ldr	r3, [pc, #104]	; (3f6c <system_init+0x174>)
    3f04:	4798      	blx	r3

	SPI_TEMP_init();
    3f06:	4b1a      	ldr	r3, [pc, #104]	; (3f70 <system_init+0x178>)
    3f08:	4798      	blx	r3

	I2C_EXPANDER_init();
    3f0a:	4b1a      	ldr	r3, [pc, #104]	; (3f74 <system_init+0x17c>)
    3f0c:	4798      	blx	r3

	I2C_EEPROM_init();
    3f0e:	4b1a      	ldr	r3, [pc, #104]	; (3f78 <system_init+0x180>)
    3f10:	4798      	blx	r3

	TIMER_USB_init();
    3f12:	4b1a      	ldr	r3, [pc, #104]	; (3f7c <system_init+0x184>)
    3f14:	4798      	blx	r3
	TIMER_EVENT_init();
    3f16:	4b1a      	ldr	r3, [pc, #104]	; (3f80 <system_init+0x188>)
    3f18:	4798      	blx	r3
	TIMER_ARINC_init();
    3f1a:	4b1a      	ldr	r3, [pc, #104]	; (3f84 <system_init+0x18c>)
    3f1c:	4798      	blx	r3
	TIMER_HVAC_init();
    3f1e:	4b1a      	ldr	r3, [pc, #104]	; (3f88 <system_init+0x190>)
    3f20:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    3f22:	4b1a      	ldr	r3, [pc, #104]	; (3f8c <system_init+0x194>)
    3f24:	4798      	blx	r3
	TIMER_INTERFACE_init();
    3f26:	4b1a      	ldr	r3, [pc, #104]	; (3f90 <system_init+0x198>)
    3f28:	4798      	blx	r3
	LIVE_PULSE_init();
    3f2a:	4b1a      	ldr	r3, [pc, #104]	; (3f94 <system_init+0x19c>)
    3f2c:	4798      	blx	r3

	CDCUSB_init();
    3f2e:	4b1a      	ldr	r3, [pc, #104]	; (3f98 <system_init+0x1a0>)
    3f30:	4798      	blx	r3

	WATCHDOG_init();
    3f32:	4b1a      	ldr	r3, [pc, #104]	; (3f9c <system_init+0x1a4>)
    3f34:	4798      	blx	r3
	CAN_CCU_init();
    3f36:	4b1a      	ldr	r3, [pc, #104]	; (3fa0 <system_init+0x1a8>)
    3f38:	4798      	blx	r3
}
    3f3a:	bf00      	nop
    3f3c:	bd80      	pop	{r7, pc}
    3f3e:	bf00      	nop
    3f40:	000033fd 	.word	0x000033fd
    3f44:	000033c5 	.word	0x000033c5
    3f48:	0000338d 	.word	0x0000338d
    3f4c:	0000336d 	.word	0x0000336d
    3f50:	00003339 	.word	0x00003339
    3f54:	0000345d 	.word	0x0000345d
    3f58:	00003489 	.word	0x00003489
    3f5c:	00003549 	.word	0x00003549
    3f60:	00003685 	.word	0x00003685
    3f64:	000036c9 	.word	0x000036c9
    3f68:	0000378d 	.word	0x0000378d
    3f6c:	00003859 	.word	0x00003859
    3f70:	00003925 	.word	0x00003925
    3f74:	000039bd 	.word	0x000039bd
    3f78:	00003a55 	.word	0x00003a55
    3f7c:	00003a81 	.word	0x00003a81
    3f80:	00003ac9 	.word	0x00003ac9
    3f84:	00003b11 	.word	0x00003b11
    3f88:	00003b59 	.word	0x00003b59
    3f8c:	00003ba1 	.word	0x00003ba1
    3f90:	00003be9 	.word	0x00003be9
    3f94:	00003c69 	.word	0x00003c69
    3f98:	00003d35 	.word	0x00003d35
    3f9c:	00003d6d 	.word	0x00003d6d
    3fa0:	00003db5 	.word	0x00003db5

00003fa4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    3fa4:	b480      	push	{r7}
    3fa6:	b085      	sub	sp, #20
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3fac:	f3ef 8310 	mrs	r3, PRIMASK
    3fb0:	60fb      	str	r3, [r7, #12]
  return(result);
    3fb2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3fb8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3fba:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    3fbe:	bf00      	nop
    3fc0:	3714      	adds	r7, #20
    3fc2:	46bd      	mov	sp, r7
    3fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc8:	4770      	bx	lr

00003fca <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    3fca:	b480      	push	{r7}
    3fcc:	b085      	sub	sp, #20
    3fce:	af00      	add	r7, sp, #0
    3fd0:	6078      	str	r0, [r7, #4]
    3fd2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	681b      	ldr	r3, [r3, #0]
    3fda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3fdc:	68fb      	ldr	r3, [r7, #12]
    3fde:	f383 8810 	msr	PRIMASK, r3
}
    3fe2:	bf00      	nop
    3fe4:	3714      	adds	r7, #20
    3fe6:	46bd      	mov	sp, r7
    3fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fec:	4770      	bx	lr

00003fee <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    3fee:	b480      	push	{r7}
    3ff0:	b083      	sub	sp, #12
    3ff2:	af00      	add	r7, sp, #0
    3ff4:	4603      	mov	r3, r0
    3ff6:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    3ff8:	88fb      	ldrh	r3, [r7, #6]
    3ffa:	f003 0303 	and.w	r3, r3, #3
    3ffe:	2b00      	cmp	r3, #0
    4000:	d001      	beq.n	4006 <leap_year+0x18>
		return false;
    4002:	2300      	movs	r3, #0
    4004:	e000      	b.n	4008 <leap_year+0x1a>
	} else {
		return true;
    4006:	2301      	movs	r3, #1
	}
}
    4008:	4618      	mov	r0, r3
    400a:	370c      	adds	r7, #12
    400c:	46bd      	mov	sp, r7
    400e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4012:	4770      	bx	lr

00004014 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    4014:	b580      	push	{r7, lr}
    4016:	b084      	sub	sp, #16
    4018:	af00      	add	r7, sp, #0
    401a:	6078      	str	r0, [r7, #4]
    401c:	460b      	mov	r3, r1
    401e:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    4020:	2300      	movs	r3, #0
    4022:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    4024:	687b      	ldr	r3, [r7, #4]
    4026:	b29b      	uxth	r3, r3
    4028:	4618      	mov	r0, r3
    402a:	4b2f      	ldr	r3, [pc, #188]	; (40e8 <get_secs_in_month+0xd4>)
    402c:	4798      	blx	r3
    402e:	4603      	mov	r3, r0
    4030:	2b00      	cmp	r3, #0
    4032:	d028      	beq.n	4086 <get_secs_in_month+0x72>
		switch (month) {
    4034:	78fb      	ldrb	r3, [r7, #3]
    4036:	3b01      	subs	r3, #1
    4038:	2b0b      	cmp	r3, #11
    403a:	d84c      	bhi.n	40d6 <get_secs_in_month+0xc2>
    403c:	a201      	add	r2, pc, #4	; (adr r2, 4044 <get_secs_in_month+0x30>)
    403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4042:	bf00      	nop
    4044:	00004075 	.word	0x00004075
    4048:	0000407b 	.word	0x0000407b
    404c:	00004075 	.word	0x00004075
    4050:	00004081 	.word	0x00004081
    4054:	00004075 	.word	0x00004075
    4058:	00004081 	.word	0x00004081
    405c:	00004075 	.word	0x00004075
    4060:	00004075 	.word	0x00004075
    4064:	00004081 	.word	0x00004081
    4068:	00004075 	.word	0x00004075
    406c:	00004081 	.word	0x00004081
    4070:	00004075 	.word	0x00004075
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    4074:	4b1d      	ldr	r3, [pc, #116]	; (40ec <get_secs_in_month+0xd8>)
    4076:	60fb      	str	r3, [r7, #12]
			break;
    4078:	e030      	b.n	40dc <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    407a:	4b1d      	ldr	r3, [pc, #116]	; (40f0 <get_secs_in_month+0xdc>)
    407c:	60fb      	str	r3, [r7, #12]
			break;
    407e:	e02d      	b.n	40dc <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    4080:	4b1c      	ldr	r3, [pc, #112]	; (40f4 <get_secs_in_month+0xe0>)
    4082:	60fb      	str	r3, [r7, #12]
			break;
    4084:	e02a      	b.n	40dc <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    4086:	78fb      	ldrb	r3, [r7, #3]
    4088:	3b01      	subs	r3, #1
    408a:	2b0b      	cmp	r3, #11
    408c:	d825      	bhi.n	40da <get_secs_in_month+0xc6>
    408e:	a201      	add	r2, pc, #4	; (adr r2, 4094 <get_secs_in_month+0x80>)
    4090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4094:	000040c5 	.word	0x000040c5
    4098:	000040cb 	.word	0x000040cb
    409c:	000040c5 	.word	0x000040c5
    40a0:	000040d1 	.word	0x000040d1
    40a4:	000040c5 	.word	0x000040c5
    40a8:	000040d1 	.word	0x000040d1
    40ac:	000040c5 	.word	0x000040c5
    40b0:	000040c5 	.word	0x000040c5
    40b4:	000040d1 	.word	0x000040d1
    40b8:	000040c5 	.word	0x000040c5
    40bc:	000040d1 	.word	0x000040d1
    40c0:	000040c5 	.word	0x000040c5
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    40c4:	4b09      	ldr	r3, [pc, #36]	; (40ec <get_secs_in_month+0xd8>)
    40c6:	60fb      	str	r3, [r7, #12]
			break;
    40c8:	e008      	b.n	40dc <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    40ca:	4b0b      	ldr	r3, [pc, #44]	; (40f8 <get_secs_in_month+0xe4>)
    40cc:	60fb      	str	r3, [r7, #12]
			break;
    40ce:	e005      	b.n	40dc <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    40d0:	4b08      	ldr	r3, [pc, #32]	; (40f4 <get_secs_in_month+0xe0>)
    40d2:	60fb      	str	r3, [r7, #12]
			break;
    40d4:	e002      	b.n	40dc <get_secs_in_month+0xc8>
			break;
    40d6:	bf00      	nop
    40d8:	e000      	b.n	40dc <get_secs_in_month+0xc8>
		default:
			break;
    40da:	bf00      	nop
		}
	}

	return sec_in_month;
    40dc:	68fb      	ldr	r3, [r7, #12]
}
    40de:	4618      	mov	r0, r3
    40e0:	3710      	adds	r7, #16
    40e2:	46bd      	mov	sp, r7
    40e4:	bd80      	pop	{r7, pc}
    40e6:	bf00      	nop
    40e8:	00003fef 	.word	0x00003fef
    40ec:	0028de80 	.word	0x0028de80
    40f0:	00263b80 	.word	0x00263b80
    40f4:	00278d00 	.word	0x00278d00
    40f8:	0024ea00 	.word	0x0024ea00

000040fc <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    40fc:	b580      	push	{r7, lr}
    40fe:	b08a      	sub	sp, #40	; 0x28
    4100:	af00      	add	r7, sp, #0
    4102:	60f8      	str	r0, [r7, #12]
    4104:	60b9      	str	r1, [r7, #8]
    4106:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    4108:	68fb      	ldr	r3, [r7, #12]
    410a:	699b      	ldr	r3, [r3, #24]
    410c:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    410e:	2301      	movs	r3, #1
    4110:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    4112:	2301      	movs	r3, #1
    4114:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    4116:	2300      	movs	r3, #0
    4118:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    411a:	2300      	movs	r3, #0
    411c:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    411e:	68bb      	ldr	r3, [r7, #8]
    4120:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    4122:	6a3b      	ldr	r3, [r7, #32]
    4124:	b29b      	uxth	r3, r3
    4126:	4618      	mov	r0, r3
    4128:	4b32      	ldr	r3, [pc, #200]	; (41f4 <convert_timestamp_to_datetime+0xf8>)
    412a:	4798      	blx	r3
    412c:	4603      	mov	r3, r0
    412e:	2b00      	cmp	r3, #0
    4130:	d001      	beq.n	4136 <convert_timestamp_to_datetime+0x3a>
    4132:	4b31      	ldr	r3, [pc, #196]	; (41f8 <convert_timestamp_to_datetime+0xfc>)
    4134:	e000      	b.n	4138 <convert_timestamp_to_datetime+0x3c>
    4136:	4b31      	ldr	r3, [pc, #196]	; (41fc <convert_timestamp_to_datetime+0x100>)
    4138:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    413c:	69bb      	ldr	r3, [r7, #24]
    413e:	429a      	cmp	r2, r3
    4140:	d307      	bcc.n	4152 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    4142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4144:	69bb      	ldr	r3, [r7, #24]
    4146:	1ad3      	subs	r3, r2, r3
    4148:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    414a:	6a3b      	ldr	r3, [r7, #32]
    414c:	3301      	adds	r3, #1
    414e:	623b      	str	r3, [r7, #32]
    4150:	e7e7      	b.n	4122 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    4152:	7ffb      	ldrb	r3, [r7, #31]
    4154:	4619      	mov	r1, r3
    4156:	6a38      	ldr	r0, [r7, #32]
    4158:	4b29      	ldr	r3, [pc, #164]	; (4200 <convert_timestamp_to_datetime+0x104>)
    415a:	4798      	blx	r3
    415c:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4160:	697b      	ldr	r3, [r7, #20]
    4162:	429a      	cmp	r2, r3
    4164:	d307      	bcc.n	4176 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    4166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4168:	697b      	ldr	r3, [r7, #20]
    416a:	1ad3      	subs	r3, r2, r3
    416c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    416e:	7ffb      	ldrb	r3, [r7, #31]
    4170:	3301      	adds	r3, #1
    4172:	77fb      	strb	r3, [r7, #31]
    4174:	e7ed      	b.n	4152 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    4176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4178:	4a22      	ldr	r2, [pc, #136]	; (4204 <convert_timestamp_to_datetime+0x108>)
    417a:	4293      	cmp	r3, r2
    417c:	d909      	bls.n	4192 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4180:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    4184:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    4188:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    418a:	7fbb      	ldrb	r3, [r7, #30]
    418c:	3301      	adds	r3, #1
    418e:	77bb      	strb	r3, [r7, #30]
    4190:	e7f1      	b.n	4176 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    4192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4194:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    4198:	d307      	bcc.n	41aa <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    419c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    41a0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    41a2:	7f7b      	ldrb	r3, [r7, #29]
    41a4:	3301      	adds	r3, #1
    41a6:	777b      	strb	r3, [r7, #29]
    41a8:	e7f3      	b.n	4192 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    41aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41ac:	2b3b      	cmp	r3, #59	; 0x3b
    41ae:	d906      	bls.n	41be <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    41b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41b2:	3b3c      	subs	r3, #60	; 0x3c
    41b4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    41b6:	7f3b      	ldrb	r3, [r7, #28]
    41b8:	3301      	adds	r3, #1
    41ba:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    41bc:	e7f5      	b.n	41aa <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    41be:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    41c0:	6a3b      	ldr	r3, [r7, #32]
    41c2:	b29a      	uxth	r2, r3
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	7ffa      	ldrb	r2, [r7, #31]
    41cc:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	7fba      	ldrb	r2, [r7, #30]
    41d2:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	7f7a      	ldrb	r2, [r7, #29]
    41d8:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	7f3a      	ldrb	r2, [r7, #28]
    41de:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    41e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41e2:	b2da      	uxtb	r2, r3
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    41e8:	2300      	movs	r3, #0
}
    41ea:	4618      	mov	r0, r3
    41ec:	3728      	adds	r7, #40	; 0x28
    41ee:	46bd      	mov	sp, r7
    41f0:	bd80      	pop	{r7, pc}
    41f2:	bf00      	nop
    41f4:	00003fef 	.word	0x00003fef
    41f8:	01e28500 	.word	0x01e28500
    41fc:	01e13380 	.word	0x01e13380
    4200:	00004015 	.word	0x00004015
    4204:	0001517f 	.word	0x0001517f

00004208 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    4208:	b580      	push	{r7, lr}
    420a:	b084      	sub	sp, #16
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
    4210:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    4212:	2300      	movs	r3, #0
    4214:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	2b00      	cmp	r3, #0
    421a:	bf14      	ite	ne
    421c:	2301      	movne	r3, #1
    421e:	2300      	moveq	r3, #0
    4220:	b2db      	uxtb	r3, r3
    4222:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    4226:	4911      	ldr	r1, [pc, #68]	; (426c <calendar_init+0x64>)
    4228:	4618      	mov	r0, r3
    422a:	4b11      	ldr	r3, [pc, #68]	; (4270 <calendar_init+0x68>)
    422c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    422e:	687b      	ldr	r3, [r7, #4]
    4230:	681a      	ldr	r2, [r3, #0]
    4232:	683b      	ldr	r3, [r7, #0]
    4234:	429a      	cmp	r2, r3
    4236:	d101      	bne.n	423c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    4238:	2300      	movs	r3, #0
    423a:	e013      	b.n	4264 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	681b      	ldr	r3, [r3, #0]
    4240:	2b00      	cmp	r3, #0
    4242:	d002      	beq.n	424a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    4244:	f06f 0311 	mvn.w	r3, #17
    4248:	e00c      	b.n	4264 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	683a      	ldr	r2, [r7, #0]
    424e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	4618      	mov	r0, r3
    4254:	4b07      	ldr	r3, [pc, #28]	; (4274 <calendar_init+0x6c>)
    4256:	4798      	blx	r3
    4258:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    4260:	619a      	str	r2, [r3, #24]

	return ret;
    4262:	68fb      	ldr	r3, [r7, #12]
}
    4264:	4618      	mov	r0, r3
    4266:	3710      	adds	r7, #16
    4268:	46bd      	mov	sp, r7
    426a:	bd80      	pop	{r7, pc}
    426c:	000125c8 	.word	0x000125c8
    4270:	00005f89 	.word	0x00005f89
    4274:	000082c5 	.word	0x000082c5

00004278 <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    4278:	b580      	push	{r7, lr}
    427a:	b084      	sub	sp, #16
    427c:	af00      	add	r7, sp, #0
    427e:	6078      	str	r0, [r7, #4]
    4280:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	2b00      	cmp	r3, #0
    4286:	bf14      	ite	ne
    4288:	2301      	movne	r3, #1
    428a:	2300      	moveq	r3, #0
    428c:	b2db      	uxtb	r3, r3
    428e:	f240 223b 	movw	r2, #571	; 0x23b
    4292:	4909      	ldr	r1, [pc, #36]	; (42b8 <calendar_get_date_time+0x40>)
    4294:	4618      	mov	r0, r3
    4296:	4b09      	ldr	r3, [pc, #36]	; (42bc <calendar_get_date_time+0x44>)
    4298:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	4618      	mov	r0, r3
    429e:	4b08      	ldr	r3, [pc, #32]	; (42c0 <calendar_get_date_time+0x48>)
    42a0:	4798      	blx	r3
    42a2:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    42a4:	683a      	ldr	r2, [r7, #0]
    42a6:	68f9      	ldr	r1, [r7, #12]
    42a8:	6878      	ldr	r0, [r7, #4]
    42aa:	4b06      	ldr	r3, [pc, #24]	; (42c4 <calendar_get_date_time+0x4c>)
    42ac:	4798      	blx	r3

	return ERR_NONE;
    42ae:	2300      	movs	r3, #0
}
    42b0:	4618      	mov	r0, r3
    42b2:	3710      	adds	r7, #16
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}
    42b8:	000125c8 	.word	0x000125c8
    42bc:	00005f89 	.word	0x00005f89
    42c0:	0000837d 	.word	0x0000837d
    42c4:	000040fd 	.word	0x000040fd

000042c8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    42c8:	b580      	push	{r7, lr}
    42ca:	b084      	sub	sp, #16
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
    42d0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	2b00      	cmp	r3, #0
    42d6:	d004      	beq.n	42e2 <can_async_init+0x1a>
    42d8:	683b      	ldr	r3, [r7, #0]
    42da:	2b00      	cmp	r3, #0
    42dc:	d001      	beq.n	42e2 <can_async_init+0x1a>
    42de:	2301      	movs	r3, #1
    42e0:	e000      	b.n	42e4 <can_async_init+0x1c>
    42e2:	2300      	movs	r3, #0
    42e4:	f003 0301 	and.w	r3, r3, #1
    42e8:	b2db      	uxtb	r3, r3
    42ea:	2241      	movs	r2, #65	; 0x41
    42ec:	490e      	ldr	r1, [pc, #56]	; (4328 <can_async_init+0x60>)
    42ee:	4618      	mov	r0, r3
    42f0:	4b0e      	ldr	r3, [pc, #56]	; (432c <can_async_init+0x64>)
    42f2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	6839      	ldr	r1, [r7, #0]
    42f8:	4618      	mov	r0, r3
    42fa:	4b0d      	ldr	r3, [pc, #52]	; (4330 <can_async_init+0x68>)
    42fc:	4798      	blx	r3
    42fe:	60f8      	str	r0, [r7, #12]
	if (rc) {
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	2b00      	cmp	r3, #0
    4304:	d001      	beq.n	430a <can_async_init+0x42>
		return rc;
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	e009      	b.n	431e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	4a09      	ldr	r2, [pc, #36]	; (4334 <can_async_init+0x6c>)
    430e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	4a09      	ldr	r2, [pc, #36]	; (4338 <can_async_init+0x70>)
    4314:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	4a08      	ldr	r2, [pc, #32]	; (433c <can_async_init+0x74>)
    431a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    431c:	2300      	movs	r3, #0
}
    431e:	4618      	mov	r0, r3
    4320:	3710      	adds	r7, #16
    4322:	46bd      	mov	sp, r7
    4324:	bd80      	pop	{r7, pc}
    4326:	bf00      	nop
    4328:	000125e4 	.word	0x000125e4
    432c:	00005f89 	.word	0x00005f89
    4330:	000064e5 	.word	0x000064e5
    4334:	00004341 	.word	0x00004341
    4338:	00004365 	.word	0x00004365
    433c:	00004389 	.word	0x00004389

00004340 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    4340:	b580      	push	{r7, lr}
    4342:	b084      	sub	sp, #16
    4344:	af00      	add	r7, sp, #0
    4346:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	69db      	ldr	r3, [r3, #28]
    4350:	2b00      	cmp	r3, #0
    4352:	d003      	beq.n	435c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	69db      	ldr	r3, [r3, #28]
    4358:	68f8      	ldr	r0, [r7, #12]
    435a:	4798      	blx	r3
	}
}
    435c:	bf00      	nop
    435e:	3710      	adds	r7, #16
    4360:	46bd      	mov	sp, r7
    4362:	bd80      	pop	{r7, pc}

00004364 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    4364:	b580      	push	{r7, lr}
    4366:	b084      	sub	sp, #16
    4368:	af00      	add	r7, sp, #0
    436a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	6a1b      	ldr	r3, [r3, #32]
    4374:	2b00      	cmp	r3, #0
    4376:	d003      	beq.n	4380 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    4378:	68fb      	ldr	r3, [r7, #12]
    437a:	6a1b      	ldr	r3, [r3, #32]
    437c:	68f8      	ldr	r0, [r7, #12]
    437e:	4798      	blx	r3
	}
}
    4380:	bf00      	nop
    4382:	3710      	adds	r7, #16
    4384:	46bd      	mov	sp, r7
    4386:	bd80      	pop	{r7, pc}

00004388 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    4388:	b580      	push	{r7, lr}
    438a:	b084      	sub	sp, #16
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
    4390:	460b      	mov	r3, r1
    4392:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    4398:	68fb      	ldr	r3, [r7, #12]
    439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    439c:	2b00      	cmp	r3, #0
    439e:	d005      	beq.n	43ac <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    43a0:	68fb      	ldr	r3, [r7, #12]
    43a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43a4:	78fa      	ldrb	r2, [r7, #3]
    43a6:	4611      	mov	r1, r2
    43a8:	68f8      	ldr	r0, [r7, #12]
    43aa:	4798      	blx	r3
	}
}
    43ac:	bf00      	nop
    43ae:	3710      	adds	r7, #16
    43b0:	46bd      	mov	sp, r7
    43b2:	bd80      	pop	{r7, pc}

000043b4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    43b4:	b580      	push	{r7, lr}
    43b6:	b082      	sub	sp, #8
    43b8:	af00      	add	r7, sp, #0
    43ba:	6078      	str	r0, [r7, #4]
    43bc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	2b00      	cmp	r3, #0
    43c2:	d004      	beq.n	43ce <crc_sync_init+0x1a>
    43c4:	683b      	ldr	r3, [r7, #0]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d001      	beq.n	43ce <crc_sync_init+0x1a>
    43ca:	2301      	movs	r3, #1
    43cc:	e000      	b.n	43d0 <crc_sync_init+0x1c>
    43ce:	2300      	movs	r3, #0
    43d0:	f003 0301 	and.w	r3, r3, #1
    43d4:	b2db      	uxtb	r3, r3
    43d6:	222b      	movs	r2, #43	; 0x2b
    43d8:	4906      	ldr	r1, [pc, #24]	; (43f4 <crc_sync_init+0x40>)
    43da:	4618      	mov	r0, r3
    43dc:	4b06      	ldr	r3, [pc, #24]	; (43f8 <crc_sync_init+0x44>)
    43de:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	6839      	ldr	r1, [r7, #0]
    43e4:	4618      	mov	r0, r3
    43e6:	4b05      	ldr	r3, [pc, #20]	; (43fc <crc_sync_init+0x48>)
    43e8:	4798      	blx	r3
    43ea:	4603      	mov	r3, r0
}
    43ec:	4618      	mov	r0, r3
    43ee:	3708      	adds	r7, #8
    43f0:	46bd      	mov	sp, r7
    43f2:	bd80      	pop	{r7, pc}
    43f4:	00012600 	.word	0x00012600
    43f8:	00005f89 	.word	0x00005f89
    43fc:	00006be5 	.word	0x00006be5

00004400 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    4400:	b590      	push	{r4, r7, lr}
    4402:	b083      	sub	sp, #12
    4404:	af00      	add	r7, sp, #0
    4406:	4603      	mov	r3, r0
    4408:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    440a:	4b07      	ldr	r3, [pc, #28]	; (4428 <delay_us+0x28>)
    440c:	681c      	ldr	r4, [r3, #0]
    440e:	88fb      	ldrh	r3, [r7, #6]
    4410:	4618      	mov	r0, r3
    4412:	4b06      	ldr	r3, [pc, #24]	; (442c <delay_us+0x2c>)
    4414:	4798      	blx	r3
    4416:	4603      	mov	r3, r0
    4418:	4619      	mov	r1, r3
    441a:	4620      	mov	r0, r4
    441c:	4b04      	ldr	r3, [pc, #16]	; (4430 <delay_us+0x30>)
    441e:	4798      	blx	r3
}
    4420:	bf00      	nop
    4422:	370c      	adds	r7, #12
    4424:	46bd      	mov	sp, r7
    4426:	bd90      	pop	{r4, r7, pc}
    4428:	20001fdc 	.word	0x20001fdc
    442c:	0000693d 	.word	0x0000693d
    4430:	00006ad1 	.word	0x00006ad1

00004434 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    4434:	b590      	push	{r4, r7, lr}
    4436:	b083      	sub	sp, #12
    4438:	af00      	add	r7, sp, #0
    443a:	4603      	mov	r3, r0
    443c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    443e:	4b07      	ldr	r3, [pc, #28]	; (445c <delay_ms+0x28>)
    4440:	681c      	ldr	r4, [r3, #0]
    4442:	88fb      	ldrh	r3, [r7, #6]
    4444:	4618      	mov	r0, r3
    4446:	4b06      	ldr	r3, [pc, #24]	; (4460 <delay_ms+0x2c>)
    4448:	4798      	blx	r3
    444a:	4603      	mov	r3, r0
    444c:	4619      	mov	r1, r3
    444e:	4620      	mov	r0, r4
    4450:	4b04      	ldr	r3, [pc, #16]	; (4464 <delay_ms+0x30>)
    4452:	4798      	blx	r3
}
    4454:	bf00      	nop
    4456:	370c      	adds	r7, #12
    4458:	46bd      	mov	sp, r7
    445a:	bd90      	pop	{r4, r7, pc}
    445c:	20001fdc 	.word	0x20001fdc
    4460:	00006aa9 	.word	0x00006aa9
    4464:	00006ad1 	.word	0x00006ad1

00004468 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    4468:	b580      	push	{r7, lr}
    446a:	af00      	add	r7, sp, #0
	return _event_system_init();
    446c:	4b02      	ldr	r3, [pc, #8]	; (4478 <event_system_init+0x10>)
    446e:	4798      	blx	r3
    4470:	4603      	mov	r3, r0
}
    4472:	4618      	mov	r0, r3
    4474:	bd80      	pop	{r7, pc}
    4476:	bf00      	nop
    4478:	00007319 	.word	0x00007319

0000447c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    447c:	b580      	push	{r7, lr}
    447e:	b082      	sub	sp, #8
    4480:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    4482:	2300      	movs	r3, #0
    4484:	80fb      	strh	r3, [r7, #6]
    4486:	e00e      	b.n	44a6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    4488:	88fb      	ldrh	r3, [r7, #6]
    448a:	4a0c      	ldr	r2, [pc, #48]	; (44bc <ext_irq_init+0x40>)
    448c:	00db      	lsls	r3, r3, #3
    448e:	4413      	add	r3, r2
    4490:	f04f 32ff 	mov.w	r2, #4294967295
    4494:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    4496:	88fb      	ldrh	r3, [r7, #6]
    4498:	4a08      	ldr	r2, [pc, #32]	; (44bc <ext_irq_init+0x40>)
    449a:	2100      	movs	r1, #0
    449c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    44a0:	88fb      	ldrh	r3, [r7, #6]
    44a2:	3301      	adds	r3, #1
    44a4:	80fb      	strh	r3, [r7, #6]
    44a6:	88fb      	ldrh	r3, [r7, #6]
    44a8:	2b04      	cmp	r3, #4
    44aa:	d9ed      	bls.n	4488 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    44ac:	4804      	ldr	r0, [pc, #16]	; (44c0 <ext_irq_init+0x44>)
    44ae:	4b05      	ldr	r3, [pc, #20]	; (44c4 <ext_irq_init+0x48>)
    44b0:	4798      	blx	r3
    44b2:	4603      	mov	r3, r0
}
    44b4:	4618      	mov	r0, r3
    44b6:	3708      	adds	r7, #8
    44b8:	46bd      	mov	sp, r7
    44ba:	bd80      	pop	{r7, pc}
    44bc:	20001fe0 	.word	0x20001fe0
    44c0:	00004621 	.word	0x00004621
    44c4:	00006f25 	.word	0x00006f25

000044c8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b086      	sub	sp, #24
    44cc:	af00      	add	r7, sp, #0
    44ce:	6078      	str	r0, [r7, #4]
    44d0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    44d2:	2300      	movs	r3, #0
    44d4:	75fb      	strb	r3, [r7, #23]
    44d6:	2300      	movs	r3, #0
    44d8:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    44da:	2300      	movs	r3, #0
    44dc:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    44de:	e012      	b.n	4506 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    44e0:	7dfb      	ldrb	r3, [r7, #23]
    44e2:	4a4d      	ldr	r2, [pc, #308]	; (4618 <ext_irq_register+0x150>)
    44e4:	00db      	lsls	r3, r3, #3
    44e6:	4413      	add	r3, r2
    44e8:	685a      	ldr	r2, [r3, #4]
    44ea:	687b      	ldr	r3, [r7, #4]
    44ec:	429a      	cmp	r2, r3
    44ee:	d107      	bne.n	4500 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    44f0:	7dfb      	ldrb	r3, [r7, #23]
    44f2:	4949      	ldr	r1, [pc, #292]	; (4618 <ext_irq_register+0x150>)
    44f4:	683a      	ldr	r2, [r7, #0]
    44f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    44fa:	2301      	movs	r3, #1
    44fc:	757b      	strb	r3, [r7, #21]
			break;
    44fe:	e005      	b.n	450c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    4500:	7dfb      	ldrb	r3, [r7, #23]
    4502:	3301      	adds	r3, #1
    4504:	75fb      	strb	r3, [r7, #23]
    4506:	7dfb      	ldrb	r3, [r7, #23]
    4508:	2b04      	cmp	r3, #4
    450a:	d9e9      	bls.n	44e0 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    450c:	683b      	ldr	r3, [r7, #0]
    450e:	2b00      	cmp	r3, #0
    4510:	d10e      	bne.n	4530 <ext_irq_register+0x68>
		if (!found) {
    4512:	7d7b      	ldrb	r3, [r7, #21]
    4514:	f083 0301 	eor.w	r3, r3, #1
    4518:	b2db      	uxtb	r3, r3
    451a:	2b00      	cmp	r3, #0
    451c:	d002      	beq.n	4524 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    451e:	f06f 030c 	mvn.w	r3, #12
    4522:	e074      	b.n	460e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    4524:	2100      	movs	r1, #0
    4526:	6878      	ldr	r0, [r7, #4]
    4528:	4b3c      	ldr	r3, [pc, #240]	; (461c <ext_irq_register+0x154>)
    452a:	4798      	blx	r3
    452c:	4603      	mov	r3, r0
    452e:	e06e      	b.n	460e <ext_irq_register+0x146>
	}

	if (!found) {
    4530:	7d7b      	ldrb	r3, [r7, #21]
    4532:	f083 0301 	eor.w	r3, r3, #1
    4536:	b2db      	uxtb	r3, r3
    4538:	2b00      	cmp	r3, #0
    453a:	d05a      	beq.n	45f2 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    453c:	2300      	movs	r3, #0
    453e:	75fb      	strb	r3, [r7, #23]
    4540:	e016      	b.n	4570 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    4542:	7dfb      	ldrb	r3, [r7, #23]
    4544:	4a34      	ldr	r2, [pc, #208]	; (4618 <ext_irq_register+0x150>)
    4546:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    454a:	2b00      	cmp	r3, #0
    454c:	d10d      	bne.n	456a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    454e:	7dfb      	ldrb	r3, [r7, #23]
    4550:	4931      	ldr	r1, [pc, #196]	; (4618 <ext_irq_register+0x150>)
    4552:	683a      	ldr	r2, [r7, #0]
    4554:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    4558:	7dfb      	ldrb	r3, [r7, #23]
    455a:	4a2f      	ldr	r2, [pc, #188]	; (4618 <ext_irq_register+0x150>)
    455c:	00db      	lsls	r3, r3, #3
    455e:	4413      	add	r3, r2
    4560:	687a      	ldr	r2, [r7, #4]
    4562:	605a      	str	r2, [r3, #4]
				found           = true;
    4564:	2301      	movs	r3, #1
    4566:	757b      	strb	r3, [r7, #21]
				break;
    4568:	e005      	b.n	4576 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    456a:	7dfb      	ldrb	r3, [r7, #23]
    456c:	3301      	adds	r3, #1
    456e:	75fb      	strb	r3, [r7, #23]
    4570:	7dfb      	ldrb	r3, [r7, #23]
    4572:	2b04      	cmp	r3, #4
    4574:	d9e5      	bls.n	4542 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    4576:	e036      	b.n	45e6 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    4578:	7dfb      	ldrb	r3, [r7, #23]
    457a:	4a27      	ldr	r2, [pc, #156]	; (4618 <ext_irq_register+0x150>)
    457c:	00db      	lsls	r3, r3, #3
    457e:	4413      	add	r3, r2
    4580:	685a      	ldr	r2, [r3, #4]
    4582:	7dbb      	ldrb	r3, [r7, #22]
    4584:	4924      	ldr	r1, [pc, #144]	; (4618 <ext_irq_register+0x150>)
    4586:	00db      	lsls	r3, r3, #3
    4588:	440b      	add	r3, r1
    458a:	685b      	ldr	r3, [r3, #4]
    458c:	429a      	cmp	r2, r3
    458e:	d227      	bcs.n	45e0 <ext_irq_register+0x118>
    4590:	7dbb      	ldrb	r3, [r7, #22]
    4592:	4a21      	ldr	r2, [pc, #132]	; (4618 <ext_irq_register+0x150>)
    4594:	00db      	lsls	r3, r3, #3
    4596:	4413      	add	r3, r2
    4598:	685b      	ldr	r3, [r3, #4]
    459a:	f1b3 3fff 	cmp.w	r3, #4294967295
    459e:	d01f      	beq.n	45e0 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    45a0:	7dbb      	ldrb	r3, [r7, #22]
    45a2:	491d      	ldr	r1, [pc, #116]	; (4618 <ext_irq_register+0x150>)
    45a4:	f107 020c 	add.w	r2, r7, #12
    45a8:	00db      	lsls	r3, r3, #3
    45aa:	440b      	add	r3, r1
    45ac:	e893 0003 	ldmia.w	r3, {r0, r1}
    45b0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    45b4:	7dbb      	ldrb	r3, [r7, #22]
    45b6:	7dfa      	ldrb	r2, [r7, #23]
    45b8:	4817      	ldr	r0, [pc, #92]	; (4618 <ext_irq_register+0x150>)
    45ba:	4917      	ldr	r1, [pc, #92]	; (4618 <ext_irq_register+0x150>)
    45bc:	00db      	lsls	r3, r3, #3
    45be:	4403      	add	r3, r0
    45c0:	00d2      	lsls	r2, r2, #3
    45c2:	440a      	add	r2, r1
    45c4:	e892 0003 	ldmia.w	r2, {r0, r1}
    45c8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    45cc:	7dfb      	ldrb	r3, [r7, #23]
    45ce:	4a12      	ldr	r2, [pc, #72]	; (4618 <ext_irq_register+0x150>)
    45d0:	00db      	lsls	r3, r3, #3
    45d2:	4413      	add	r3, r2
    45d4:	f107 020c 	add.w	r2, r7, #12
    45d8:	e892 0003 	ldmia.w	r2, {r0, r1}
    45dc:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    45e0:	7dbb      	ldrb	r3, [r7, #22]
    45e2:	3301      	adds	r3, #1
    45e4:	75bb      	strb	r3, [r7, #22]
    45e6:	7dbb      	ldrb	r3, [r7, #22]
    45e8:	2b04      	cmp	r3, #4
    45ea:	d802      	bhi.n	45f2 <ext_irq_register+0x12a>
    45ec:	7dfb      	ldrb	r3, [r7, #23]
    45ee:	2b04      	cmp	r3, #4
    45f0:	d9c2      	bls.n	4578 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    45f2:	7d7b      	ldrb	r3, [r7, #21]
    45f4:	f083 0301 	eor.w	r3, r3, #1
    45f8:	b2db      	uxtb	r3, r3
    45fa:	2b00      	cmp	r3, #0
    45fc:	d002      	beq.n	4604 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    45fe:	f06f 030c 	mvn.w	r3, #12
    4602:	e004      	b.n	460e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    4604:	2101      	movs	r1, #1
    4606:	6878      	ldr	r0, [r7, #4]
    4608:	4b04      	ldr	r3, [pc, #16]	; (461c <ext_irq_register+0x154>)
    460a:	4798      	blx	r3
    460c:	4603      	mov	r3, r0
}
    460e:	4618      	mov	r0, r3
    4610:	3718      	adds	r7, #24
    4612:	46bd      	mov	sp, r7
    4614:	bd80      	pop	{r7, pc}
    4616:	bf00      	nop
    4618:	20001fe0 	.word	0x20001fe0
    461c:	00007071 	.word	0x00007071

00004620 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    4620:	b580      	push	{r7, lr}
    4622:	b084      	sub	sp, #16
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4628:	2300      	movs	r3, #0
    462a:	73fb      	strb	r3, [r7, #15]
    462c:	2305      	movs	r3, #5
    462e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    4630:	e02a      	b.n	4688 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    4632:	7bba      	ldrb	r2, [r7, #14]
    4634:	7bfb      	ldrb	r3, [r7, #15]
    4636:	4413      	add	r3, r2
    4638:	105b      	asrs	r3, r3, #1
    463a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    463c:	7b7b      	ldrb	r3, [r7, #13]
    463e:	2b04      	cmp	r3, #4
    4640:	d827      	bhi.n	4692 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    4642:	7b7b      	ldrb	r3, [r7, #13]
    4644:	4a16      	ldr	r2, [pc, #88]	; (46a0 <process_ext_irq+0x80>)
    4646:	00db      	lsls	r3, r3, #3
    4648:	4413      	add	r3, r2
    464a:	685a      	ldr	r2, [r3, #4]
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	429a      	cmp	r2, r3
    4650:	d10b      	bne.n	466a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    4652:	7b7b      	ldrb	r3, [r7, #13]
    4654:	4a12      	ldr	r2, [pc, #72]	; (46a0 <process_ext_irq+0x80>)
    4656:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    465a:	2b00      	cmp	r3, #0
    465c:	d01b      	beq.n	4696 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    465e:	7b7b      	ldrb	r3, [r7, #13]
    4660:	4a0f      	ldr	r2, [pc, #60]	; (46a0 <process_ext_irq+0x80>)
    4662:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    4666:	4798      	blx	r3
			}
			return;
    4668:	e015      	b.n	4696 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    466a:	7b7b      	ldrb	r3, [r7, #13]
    466c:	4a0c      	ldr	r2, [pc, #48]	; (46a0 <process_ext_irq+0x80>)
    466e:	00db      	lsls	r3, r3, #3
    4670:	4413      	add	r3, r2
    4672:	685a      	ldr	r2, [r3, #4]
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	429a      	cmp	r2, r3
    4678:	d203      	bcs.n	4682 <process_ext_irq+0x62>
			lower = middle + 1;
    467a:	7b7b      	ldrb	r3, [r7, #13]
    467c:	3301      	adds	r3, #1
    467e:	73fb      	strb	r3, [r7, #15]
    4680:	e002      	b.n	4688 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    4682:	7b7b      	ldrb	r3, [r7, #13]
    4684:	3b01      	subs	r3, #1
    4686:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    4688:	7bba      	ldrb	r2, [r7, #14]
    468a:	7bfb      	ldrb	r3, [r7, #15]
    468c:	429a      	cmp	r2, r3
    468e:	d2d0      	bcs.n	4632 <process_ext_irq+0x12>
    4690:	e002      	b.n	4698 <process_ext_irq+0x78>
			return;
    4692:	bf00      	nop
    4694:	e000      	b.n	4698 <process_ext_irq+0x78>
			return;
    4696:	bf00      	nop
		}
	}
}
    4698:	3710      	adds	r7, #16
    469a:	46bd      	mov	sp, r7
    469c:	bd80      	pop	{r7, pc}
    469e:	bf00      	nop
    46a0:	20001fe0 	.word	0x20001fe0

000046a4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    46a4:	b580      	push	{r7, lr}
    46a6:	b084      	sub	sp, #16
    46a8:	af00      	add	r7, sp, #0
    46aa:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    46ac:	687b      	ldr	r3, [r7, #4]
    46ae:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	885b      	ldrh	r3, [r3, #2]
    46b4:	b29b      	uxth	r3, r3
    46b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    46ba:	2b00      	cmp	r3, #0
    46bc:	d107      	bne.n	46ce <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    46be:	68fb      	ldr	r3, [r7, #12]
    46c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    46c2:	2b00      	cmp	r3, #0
    46c4:	d003      	beq.n	46ce <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    46c6:	68fb      	ldr	r3, [r7, #12]
    46c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    46ca:	68f8      	ldr	r0, [r7, #12]
    46cc:	4798      	blx	r3
		}
	}
}
    46ce:	bf00      	nop
    46d0:	3710      	adds	r7, #16
    46d2:	46bd      	mov	sp, r7
    46d4:	bd80      	pop	{r7, pc}

000046d6 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    46d6:	b580      	push	{r7, lr}
    46d8:	b084      	sub	sp, #16
    46da:	af00      	add	r7, sp, #0
    46dc:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	885b      	ldrh	r3, [r3, #2]
    46e6:	b29b      	uxth	r3, r3
    46e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    46ec:	2b00      	cmp	r3, #0
    46ee:	d107      	bne.n	4700 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46f4:	2b00      	cmp	r3, #0
    46f6:	d003      	beq.n	4700 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    46f8:	68fb      	ldr	r3, [r7, #12]
    46fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46fc:	68f8      	ldr	r0, [r7, #12]
    46fe:	4798      	blx	r3
		}
	}
}
    4700:	bf00      	nop
    4702:	3710      	adds	r7, #16
    4704:	46bd      	mov	sp, r7
    4706:	bd80      	pop	{r7, pc}

00004708 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    4708:	b580      	push	{r7, lr}
    470a:	b084      	sub	sp, #16
    470c:	af00      	add	r7, sp, #0
    470e:	6078      	str	r0, [r7, #4]
    4710:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    4712:	687b      	ldr	r3, [r7, #4]
    4714:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	885b      	ldrh	r3, [r3, #2]
    471a:	b29b      	uxth	r3, r3
    471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4720:	2b00      	cmp	r3, #0
    4722:	d108      	bne.n	4736 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    4724:	68fb      	ldr	r3, [r7, #12]
    4726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4728:	2b00      	cmp	r3, #0
    472a:	d004      	beq.n	4736 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4730:	6839      	ldr	r1, [r7, #0]
    4732:	68f8      	ldr	r0, [r7, #12]
    4734:	4798      	blx	r3
		}
	}
}
    4736:	bf00      	nop
    4738:	3710      	adds	r7, #16
    473a:	46bd      	mov	sp, r7
    473c:	bd80      	pop	{r7, pc}
	...

00004740 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    4740:	b580      	push	{r7, lr}
    4742:	b08a      	sub	sp, #40	; 0x28
    4744:	af00      	add	r7, sp, #0
    4746:	60f8      	str	r0, [r7, #12]
    4748:	60b9      	str	r1, [r7, #8]
    474a:	4613      	mov	r3, r2
    474c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    474e:	68fb      	ldr	r3, [r7, #12]
    4750:	3b28      	subs	r3, #40	; 0x28
    4752:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    4754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4756:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4758:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    475a:	88fb      	ldrh	r3, [r7, #6]
    475c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    475e:	f248 0301 	movw	r3, #32769	; 0x8001
    4762:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    4764:	68bb      	ldr	r3, [r7, #8]
    4766:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    4768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    476a:	f107 0214 	add.w	r2, r7, #20
    476e:	4611      	mov	r1, r2
    4770:	4618      	mov	r0, r3
    4772:	4b06      	ldr	r3, [pc, #24]	; (478c <i2c_m_async_read+0x4c>)
    4774:	4798      	blx	r3
    4776:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    4778:	6a3b      	ldr	r3, [r7, #32]
    477a:	2b00      	cmp	r3, #0
    477c:	d001      	beq.n	4782 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    477e:	6a3b      	ldr	r3, [r7, #32]
    4780:	e000      	b.n	4784 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    4782:	88fb      	ldrh	r3, [r7, #6]
}
    4784:	4618      	mov	r0, r3
    4786:	3728      	adds	r7, #40	; 0x28
    4788:	46bd      	mov	sp, r7
    478a:	bd80      	pop	{r7, pc}
    478c:	000092fd 	.word	0x000092fd

00004790 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    4790:	b580      	push	{r7, lr}
    4792:	b08a      	sub	sp, #40	; 0x28
    4794:	af00      	add	r7, sp, #0
    4796:	60f8      	str	r0, [r7, #12]
    4798:	60b9      	str	r1, [r7, #8]
    479a:	4613      	mov	r3, r2
    479c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    479e:	68fb      	ldr	r3, [r7, #12]
    47a0:	3b28      	subs	r3, #40	; 0x28
    47a2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    47a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    47a8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    47aa:	88fb      	ldrh	r3, [r7, #6]
    47ac:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    47ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    47b2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    47b4:	68bb      	ldr	r3, [r7, #8]
    47b6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    47b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47ba:	f107 0214 	add.w	r2, r7, #20
    47be:	4611      	mov	r1, r2
    47c0:	4618      	mov	r0, r3
    47c2:	4b06      	ldr	r3, [pc, #24]	; (47dc <i2c_m_async_write+0x4c>)
    47c4:	4798      	blx	r3
    47c6:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    47c8:	6a3b      	ldr	r3, [r7, #32]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d001      	beq.n	47d2 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    47ce:	6a3b      	ldr	r3, [r7, #32]
    47d0:	e000      	b.n	47d4 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    47d2:	88fb      	ldrh	r3, [r7, #6]
}
    47d4:	4618      	mov	r0, r3
    47d6:	3728      	adds	r7, #40	; 0x28
    47d8:	46bd      	mov	sp, r7
    47da:	bd80      	pop	{r7, pc}
    47dc:	000092fd 	.word	0x000092fd

000047e0 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    47e0:	b580      	push	{r7, lr}
    47e2:	b084      	sub	sp, #16
    47e4:	af00      	add	r7, sp, #0
    47e6:	6078      	str	r0, [r7, #4]
    47e8:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	2b00      	cmp	r3, #0
    47ee:	bf14      	ite	ne
    47f0:	2301      	movne	r3, #1
    47f2:	2300      	moveq	r3, #0
    47f4:	b2db      	uxtb	r3, r3
    47f6:	2289      	movs	r2, #137	; 0x89
    47f8:	4915      	ldr	r1, [pc, #84]	; (4850 <i2c_m_async_init+0x70>)
    47fa:	4618      	mov	r0, r3
    47fc:	4b15      	ldr	r3, [pc, #84]	; (4854 <i2c_m_async_init+0x74>)
    47fe:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	6839      	ldr	r1, [r7, #0]
    4804:	4618      	mov	r0, r3
    4806:	4b14      	ldr	r3, [pc, #80]	; (4858 <i2c_m_async_init+0x78>)
    4808:	4798      	blx	r3
    480a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	2b00      	cmp	r3, #0
    4810:	d001      	beq.n	4816 <i2c_m_async_init+0x36>
		return init_status;
    4812:	68fb      	ldr	r3, [r7, #12]
    4814:	e018      	b.n	4848 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	4a10      	ldr	r2, [pc, #64]	; (485c <i2c_m_async_init+0x7c>)
    481a:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	4a10      	ldr	r2, [pc, #64]	; (4860 <i2c_m_async_init+0x80>)
    4820:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	4a0f      	ldr	r2, [pc, #60]	; (4864 <i2c_m_async_init+0x84>)
    4826:	2101      	movs	r1, #1
    4828:	4618      	mov	r0, r3
    482a:	4b0f      	ldr	r3, [pc, #60]	; (4868 <i2c_m_async_init+0x88>)
    482c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	4a0e      	ldr	r2, [pc, #56]	; (486c <i2c_m_async_init+0x8c>)
    4832:	2102      	movs	r1, #2
    4834:	4618      	mov	r0, r3
    4836:	4b0c      	ldr	r3, [pc, #48]	; (4868 <i2c_m_async_init+0x88>)
    4838:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	4a0c      	ldr	r2, [pc, #48]	; (4870 <i2c_m_async_init+0x90>)
    483e:	2100      	movs	r1, #0
    4840:	4618      	mov	r0, r3
    4842:	4b09      	ldr	r3, [pc, #36]	; (4868 <i2c_m_async_init+0x88>)
    4844:	4798      	blx	r3

	return ERR_NONE;
    4846:	2300      	movs	r3, #0
}
    4848:	4618      	mov	r0, r3
    484a:	3710      	adds	r7, #16
    484c:	46bd      	mov	sp, r7
    484e:	bd80      	pop	{r7, pc}
    4850:	0001261c 	.word	0x0001261c
    4854:	00005f89 	.word	0x00005f89
    4858:	0000914d 	.word	0x0000914d
    485c:	00004741 	.word	0x00004741
    4860:	00004791 	.word	0x00004791
    4864:	000046a5 	.word	0x000046a5
    4868:	000093d1 	.word	0x000093d1
    486c:	000046d7 	.word	0x000046d7
    4870:	00004709 	.word	0x00004709

00004874 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    4874:	b580      	push	{r7, lr}
    4876:	b084      	sub	sp, #16
    4878:	af00      	add	r7, sp, #0
    487a:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	2b00      	cmp	r3, #0
    4880:	bf14      	ite	ne
    4882:	2301      	movne	r3, #1
    4884:	2300      	moveq	r3, #0
    4886:	b2db      	uxtb	r3, r3
    4888:	22b9      	movs	r2, #185	; 0xb9
    488a:	4911      	ldr	r1, [pc, #68]	; (48d0 <i2c_m_async_enable+0x5c>)
    488c:	4618      	mov	r0, r3
    488e:	4b11      	ldr	r3, [pc, #68]	; (48d4 <i2c_m_async_enable+0x60>)
    4890:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	4618      	mov	r0, r3
    4896:	4b10      	ldr	r3, [pc, #64]	; (48d8 <i2c_m_async_enable+0x64>)
    4898:	4798      	blx	r3
    489a:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    489c:	68fb      	ldr	r3, [r7, #12]
    489e:	2b00      	cmp	r3, #0
    48a0:	d111      	bne.n	48c6 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	2201      	movs	r2, #1
    48a6:	2101      	movs	r1, #1
    48a8:	4618      	mov	r0, r3
    48aa:	4b0c      	ldr	r3, [pc, #48]	; (48dc <i2c_m_async_enable+0x68>)
    48ac:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	2201      	movs	r2, #1
    48b2:	2102      	movs	r1, #2
    48b4:	4618      	mov	r0, r3
    48b6:	4b09      	ldr	r3, [pc, #36]	; (48dc <i2c_m_async_enable+0x68>)
    48b8:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	2201      	movs	r2, #1
    48be:	2100      	movs	r1, #0
    48c0:	4618      	mov	r0, r3
    48c2:	4b06      	ldr	r3, [pc, #24]	; (48dc <i2c_m_async_enable+0x68>)
    48c4:	4798      	blx	r3
	}
	return rc;
    48c6:	68fb      	ldr	r3, [r7, #12]
}
    48c8:	4618      	mov	r0, r3
    48ca:	3710      	adds	r7, #16
    48cc:	46bd      	mov	sp, r7
    48ce:	bd80      	pop	{r7, pc}
    48d0:	0001261c 	.word	0x0001261c
    48d4:	00005f89 	.word	0x00005f89
    48d8:	000090e9 	.word	0x000090e9
    48dc:	00009415 	.word	0x00009415

000048e0 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    48e0:	b480      	push	{r7}
    48e2:	b085      	sub	sp, #20
    48e4:	af00      	add	r7, sp, #0
    48e6:	60f8      	str	r0, [r7, #12]
    48e8:	460b      	mov	r3, r1
    48ea:	607a      	str	r2, [r7, #4]
    48ec:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    48ee:	897b      	ldrh	r3, [r7, #10]
    48f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    48f4:	b21a      	sxth	r2, r3
    48f6:	687b      	ldr	r3, [r7, #4]
    48f8:	b21b      	sxth	r3, r3
    48fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    48fe:	b21b      	sxth	r3, r3
    4900:	4313      	orrs	r3, r2
    4902:	b21b      	sxth	r3, r3
    4904:	b29a      	uxth	r2, r3
    4906:	68fb      	ldr	r3, [r7, #12]
    4908:	879a      	strh	r2, [r3, #60]	; 0x3c
    490a:	68fb      	ldr	r3, [r7, #12]
    490c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    490e:	4618      	mov	r0, r3
    4910:	3714      	adds	r7, #20
    4912:	46bd      	mov	sp, r7
    4914:	f85d 7b04 	ldr.w	r7, [sp], #4
    4918:	4770      	bx	lr

0000491a <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    491a:	b480      	push	{r7}
    491c:	b085      	sub	sp, #20
    491e:	af00      	add	r7, sp, #0
    4920:	60f8      	str	r0, [r7, #12]
    4922:	460b      	mov	r3, r1
    4924:	607a      	str	r2, [r7, #4]
    4926:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    4928:	7afb      	ldrb	r3, [r7, #11]
    492a:	2b01      	cmp	r3, #1
    492c:	d007      	beq.n	493e <i2c_m_async_register_callback+0x24>
    492e:	2b02      	cmp	r3, #2
    4930:	d009      	beq.n	4946 <i2c_m_async_register_callback+0x2c>
    4932:	2b00      	cmp	r3, #0
    4934:	d10b      	bne.n	494e <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    4936:	68fb      	ldr	r3, [r7, #12]
    4938:	687a      	ldr	r2, [r7, #4]
    493a:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    493c:	e00a      	b.n	4954 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    493e:	68fb      	ldr	r3, [r7, #12]
    4940:	687a      	ldr	r2, [r7, #4]
    4942:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    4944:	e006      	b.n	4954 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    4946:	68fb      	ldr	r3, [r7, #12]
    4948:	687a      	ldr	r2, [r7, #4]
    494a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    494c:	e002      	b.n	4954 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    494e:	f06f 030c 	mvn.w	r3, #12
    4952:	e000      	b.n	4956 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    4954:	2300      	movs	r3, #0
}
    4956:	4618      	mov	r0, r3
    4958:	3714      	adds	r7, #20
    495a:	46bd      	mov	sp, r7
    495c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4960:	4770      	bx	lr

00004962 <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    4962:	b480      	push	{r7}
    4964:	b083      	sub	sp, #12
    4966:	af00      	add	r7, sp, #0
    4968:	6078      	str	r0, [r7, #4]
    496a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    4972:	683b      	ldr	r3, [r7, #0]
    4974:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    4976:	2300      	movs	r3, #0
}
    4978:	4618      	mov	r0, r3
    497a:	370c      	adds	r7, #12
    497c:	46bd      	mov	sp, r7
    497e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4982:	4770      	bx	lr

00004984 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    4984:	b580      	push	{r7, lr}
    4986:	b084      	sub	sp, #16
    4988:	af00      	add	r7, sp, #0
    498a:	60f8      	str	r0, [r7, #12]
    498c:	60b9      	str	r1, [r7, #8]
    498e:	4613      	mov	r3, r2
    4990:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    4992:	68fb      	ldr	r3, [r7, #12]
    4994:	2b00      	cmp	r3, #0
    4996:	d004      	beq.n	49a2 <io_write+0x1e>
    4998:	68bb      	ldr	r3, [r7, #8]
    499a:	2b00      	cmp	r3, #0
    499c:	d001      	beq.n	49a2 <io_write+0x1e>
    499e:	2301      	movs	r3, #1
    49a0:	e000      	b.n	49a4 <io_write+0x20>
    49a2:	2300      	movs	r3, #0
    49a4:	f003 0301 	and.w	r3, r3, #1
    49a8:	b2db      	uxtb	r3, r3
    49aa:	2234      	movs	r2, #52	; 0x34
    49ac:	4907      	ldr	r1, [pc, #28]	; (49cc <io_write+0x48>)
    49ae:	4618      	mov	r0, r3
    49b0:	4b07      	ldr	r3, [pc, #28]	; (49d0 <io_write+0x4c>)
    49b2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    49b4:	68fb      	ldr	r3, [r7, #12]
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	88fa      	ldrh	r2, [r7, #6]
    49ba:	68b9      	ldr	r1, [r7, #8]
    49bc:	68f8      	ldr	r0, [r7, #12]
    49be:	4798      	blx	r3
    49c0:	4603      	mov	r3, r0
}
    49c2:	4618      	mov	r0, r3
    49c4:	3710      	adds	r7, #16
    49c6:	46bd      	mov	sp, r7
    49c8:	bd80      	pop	{r7, pc}
    49ca:	bf00      	nop
    49cc:	0001263c 	.word	0x0001263c
    49d0:	00005f89 	.word	0x00005f89

000049d4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b084      	sub	sp, #16
    49d8:	af00      	add	r7, sp, #0
    49da:	60f8      	str	r0, [r7, #12]
    49dc:	60b9      	str	r1, [r7, #8]
    49de:	4613      	mov	r3, r2
    49e0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    49e2:	68fb      	ldr	r3, [r7, #12]
    49e4:	2b00      	cmp	r3, #0
    49e6:	d004      	beq.n	49f2 <io_read+0x1e>
    49e8:	68bb      	ldr	r3, [r7, #8]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d001      	beq.n	49f2 <io_read+0x1e>
    49ee:	2301      	movs	r3, #1
    49f0:	e000      	b.n	49f4 <io_read+0x20>
    49f2:	2300      	movs	r3, #0
    49f4:	f003 0301 	and.w	r3, r3, #1
    49f8:	b2db      	uxtb	r3, r3
    49fa:	223d      	movs	r2, #61	; 0x3d
    49fc:	4907      	ldr	r1, [pc, #28]	; (4a1c <io_read+0x48>)
    49fe:	4618      	mov	r0, r3
    4a00:	4b07      	ldr	r3, [pc, #28]	; (4a20 <io_read+0x4c>)
    4a02:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    4a04:	68fb      	ldr	r3, [r7, #12]
    4a06:	685b      	ldr	r3, [r3, #4]
    4a08:	88fa      	ldrh	r2, [r7, #6]
    4a0a:	68b9      	ldr	r1, [r7, #8]
    4a0c:	68f8      	ldr	r0, [r7, #12]
    4a0e:	4798      	blx	r3
    4a10:	4603      	mov	r3, r0
}
    4a12:	4618      	mov	r0, r3
    4a14:	3710      	adds	r7, #16
    4a16:	46bd      	mov	sp, r7
    4a18:	bd80      	pop	{r7, pc}
    4a1a:	bf00      	nop
    4a1c:	0001263c 	.word	0x0001263c
    4a20:	00005f89 	.word	0x00005f89

00004a24 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    4a24:	b580      	push	{r7, lr}
    4a26:	b084      	sub	sp, #16
    4a28:	af00      	add	r7, sp, #0
    4a2a:	60f8      	str	r0, [r7, #12]
    4a2c:	60b9      	str	r1, [r7, #8]
    4a2e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    4a30:	68fb      	ldr	r3, [r7, #12]
    4a32:	2b00      	cmp	r3, #0
    4a34:	d004      	beq.n	4a40 <pwm_init+0x1c>
    4a36:	68bb      	ldr	r3, [r7, #8]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d001      	beq.n	4a40 <pwm_init+0x1c>
    4a3c:	2301      	movs	r3, #1
    4a3e:	e000      	b.n	4a42 <pwm_init+0x1e>
    4a40:	2300      	movs	r3, #0
    4a42:	f003 0301 	and.w	r3, r3, #1
    4a46:	b2db      	uxtb	r3, r3
    4a48:	2233      	movs	r2, #51	; 0x33
    4a4a:	490a      	ldr	r1, [pc, #40]	; (4a74 <pwm_init+0x50>)
    4a4c:	4618      	mov	r0, r3
    4a4e:	4b0a      	ldr	r3, [pc, #40]	; (4a78 <pwm_init+0x54>)
    4a50:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    4a52:	68fb      	ldr	r3, [r7, #12]
    4a54:	68b9      	ldr	r1, [r7, #8]
    4a56:	4618      	mov	r0, r3
    4a58:	4b08      	ldr	r3, [pc, #32]	; (4a7c <pwm_init+0x58>)
    4a5a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    4a5c:	68fb      	ldr	r3, [r7, #12]
    4a5e:	4a08      	ldr	r2, [pc, #32]	; (4a80 <pwm_init+0x5c>)
    4a60:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    4a62:	68fb      	ldr	r3, [r7, #12]
    4a64:	4a07      	ldr	r2, [pc, #28]	; (4a84 <pwm_init+0x60>)
    4a66:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    4a68:	2300      	movs	r3, #0
}
    4a6a:	4618      	mov	r0, r3
    4a6c:	3710      	adds	r7, #16
    4a6e:	46bd      	mov	sp, r7
    4a70:	bd80      	pop	{r7, pc}
    4a72:	bf00      	nop
    4a74:	00012650 	.word	0x00012650
    4a78:	00005f89 	.word	0x00005f89
    4a7c:	0000a671 	.word	0x0000a671
    4a80:	00004add 	.word	0x00004add
    4a84:	00004b01 	.word	0x00004b01

00004a88 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b082      	sub	sp, #8
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	2b00      	cmp	r3, #0
    4a94:	bf14      	ite	ne
    4a96:	2301      	movne	r3, #1
    4a98:	2300      	moveq	r3, #0
    4a9a:	b2db      	uxtb	r3, r3
    4a9c:	224a      	movs	r2, #74	; 0x4a
    4a9e:	490b      	ldr	r1, [pc, #44]	; (4acc <pwm_enable+0x44>)
    4aa0:	4618      	mov	r0, r3
    4aa2:	4b0b      	ldr	r3, [pc, #44]	; (4ad0 <pwm_enable+0x48>)
    4aa4:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	4618      	mov	r0, r3
    4aaa:	4b0a      	ldr	r3, [pc, #40]	; (4ad4 <pwm_enable+0x4c>)
    4aac:	4798      	blx	r3
    4aae:	4603      	mov	r3, r0
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d002      	beq.n	4aba <pwm_enable+0x32>
		return ERR_DENIED;
    4ab4:	f06f 0310 	mvn.w	r3, #16
    4ab8:	e004      	b.n	4ac4 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	4618      	mov	r0, r3
    4abe:	4b06      	ldr	r3, [pc, #24]	; (4ad8 <pwm_enable+0x50>)
    4ac0:	4798      	blx	r3

	return ERR_NONE;
    4ac2:	2300      	movs	r3, #0
}
    4ac4:	4618      	mov	r0, r3
    4ac6:	3708      	adds	r7, #8
    4ac8:	46bd      	mov	sp, r7
    4aca:	bd80      	pop	{r7, pc}
    4acc:	00012650 	.word	0x00012650
    4ad0:	00005f89 	.word	0x00005f89
    4ad4:	0000a90d 	.word	0x0000a90d
    4ad8:	0000a8ad 	.word	0x0000a8ad

00004adc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    4adc:	b580      	push	{r7, lr}
    4ade:	b084      	sub	sp, #16
    4ae0:	af00      	add	r7, sp, #0
    4ae2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    4ae8:	68fb      	ldr	r3, [r7, #12]
    4aea:	695b      	ldr	r3, [r3, #20]
    4aec:	2b00      	cmp	r3, #0
    4aee:	d003      	beq.n	4af8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    4af0:	68fb      	ldr	r3, [r7, #12]
    4af2:	695b      	ldr	r3, [r3, #20]
    4af4:	68f8      	ldr	r0, [r7, #12]
    4af6:	4798      	blx	r3
	}
}
    4af8:	bf00      	nop
    4afa:	3710      	adds	r7, #16
    4afc:	46bd      	mov	sp, r7
    4afe:	bd80      	pop	{r7, pc}

00004b00 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b084      	sub	sp, #16
    4b04:	af00      	add	r7, sp, #0
    4b06:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    4b0c:	68fb      	ldr	r3, [r7, #12]
    4b0e:	699b      	ldr	r3, [r3, #24]
    4b10:	2b00      	cmp	r3, #0
    4b12:	d003      	beq.n	4b1c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    4b14:	68fb      	ldr	r3, [r7, #12]
    4b16:	699b      	ldr	r3, [r3, #24]
    4b18:	68f8      	ldr	r0, [r7, #12]
    4b1a:	4798      	blx	r3
	}
}
    4b1c:	bf00      	nop
    4b1e:	3710      	adds	r7, #16
    4b20:	46bd      	mov	sp, r7
    4b22:	bd80      	pop	{r7, pc}

00004b24 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    4b24:	b580      	push	{r7, lr}
    4b26:	b082      	sub	sp, #8
    4b28:	af00      	add	r7, sp, #0
    4b2a:	6078      	str	r0, [r7, #4]
    4b2c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    4b2e:	687b      	ldr	r3, [r7, #4]
    4b30:	2b00      	cmp	r3, #0
    4b32:	d004      	beq.n	4b3e <qspi_sync_init+0x1a>
    4b34:	683b      	ldr	r3, [r7, #0]
    4b36:	2b00      	cmp	r3, #0
    4b38:	d001      	beq.n	4b3e <qspi_sync_init+0x1a>
    4b3a:	2301      	movs	r3, #1
    4b3c:	e000      	b.n	4b40 <qspi_sync_init+0x1c>
    4b3e:	2300      	movs	r3, #0
    4b40:	f003 0301 	and.w	r3, r3, #1
    4b44:	b2db      	uxtb	r3, r3
    4b46:	2231      	movs	r2, #49	; 0x31
    4b48:	4906      	ldr	r1, [pc, #24]	; (4b64 <qspi_sync_init+0x40>)
    4b4a:	4618      	mov	r0, r3
    4b4c:	4b06      	ldr	r3, [pc, #24]	; (4b68 <qspi_sync_init+0x44>)
    4b4e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	6839      	ldr	r1, [r7, #0]
    4b54:	4618      	mov	r0, r3
    4b56:	4b05      	ldr	r3, [pc, #20]	; (4b6c <qspi_sync_init+0x48>)
    4b58:	4798      	blx	r3
    4b5a:	4603      	mov	r3, r0
}
    4b5c:	4618      	mov	r0, r3
    4b5e:	3708      	adds	r7, #8
    4b60:	46bd      	mov	sp, r7
    4b62:	bd80      	pop	{r7, pc}
    4b64:	00012668 	.word	0x00012668
    4b68:	00005f89 	.word	0x00005f89
    4b6c:	00007ee1 	.word	0x00007ee1

00004b70 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    4b70:	b580      	push	{r7, lr}
    4b72:	b082      	sub	sp, #8
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	bf14      	ite	ne
    4b7e:	2301      	movne	r3, #1
    4b80:	2300      	moveq	r3, #0
    4b82:	b2db      	uxtb	r3, r3
    4b84:	223f      	movs	r2, #63	; 0x3f
    4b86:	4906      	ldr	r1, [pc, #24]	; (4ba0 <qspi_sync_enable+0x30>)
    4b88:	4618      	mov	r0, r3
    4b8a:	4b06      	ldr	r3, [pc, #24]	; (4ba4 <qspi_sync_enable+0x34>)
    4b8c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    4b8e:	687b      	ldr	r3, [r7, #4]
    4b90:	4618      	mov	r0, r3
    4b92:	4b05      	ldr	r3, [pc, #20]	; (4ba8 <qspi_sync_enable+0x38>)
    4b94:	4798      	blx	r3
    4b96:	4603      	mov	r3, r0
}
    4b98:	4618      	mov	r0, r3
    4b9a:	3708      	adds	r7, #8
    4b9c:	46bd      	mov	sp, r7
    4b9e:	bd80      	pop	{r7, pc}
    4ba0:	00012668 	.word	0x00012668
    4ba4:	00005f89 	.word	0x00005f89
    4ba8:	00007f55 	.word	0x00007f55

00004bac <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    4bac:	b580      	push	{r7, lr}
    4bae:	b082      	sub	sp, #8
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	bf14      	ite	ne
    4bba:	2301      	movne	r3, #1
    4bbc:	2300      	moveq	r3, #0
    4bbe:	b2db      	uxtb	r3, r3
    4bc0:	2246      	movs	r2, #70	; 0x46
    4bc2:	4906      	ldr	r1, [pc, #24]	; (4bdc <qspi_sync_disable+0x30>)
    4bc4:	4618      	mov	r0, r3
    4bc6:	4b06      	ldr	r3, [pc, #24]	; (4be0 <qspi_sync_disable+0x34>)
    4bc8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	4618      	mov	r0, r3
    4bce:	4b05      	ldr	r3, [pc, #20]	; (4be4 <qspi_sync_disable+0x38>)
    4bd0:	4798      	blx	r3
    4bd2:	4603      	mov	r3, r0
}
    4bd4:	4618      	mov	r0, r3
    4bd6:	3708      	adds	r7, #8
    4bd8:	46bd      	mov	sp, r7
    4bda:	bd80      	pop	{r7, pc}
    4bdc:	00012668 	.word	0x00012668
    4be0:	00005f89 	.word	0x00005f89
    4be4:	00007f79 	.word	0x00007f79

00004be8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    4be8:	b580      	push	{r7, lr}
    4bea:	b082      	sub	sp, #8
    4bec:	af00      	add	r7, sp, #0
    4bee:	6078      	str	r0, [r7, #4]
    4bf0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d004      	beq.n	4c02 <qspi_sync_serial_run_command+0x1a>
    4bf8:	683b      	ldr	r3, [r7, #0]
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d001      	beq.n	4c02 <qspi_sync_serial_run_command+0x1a>
    4bfe:	2301      	movs	r3, #1
    4c00:	e000      	b.n	4c04 <qspi_sync_serial_run_command+0x1c>
    4c02:	2300      	movs	r3, #0
    4c04:	f003 0301 	and.w	r3, r3, #1
    4c08:	b2db      	uxtb	r3, r3
    4c0a:	224d      	movs	r2, #77	; 0x4d
    4c0c:	4906      	ldr	r1, [pc, #24]	; (4c28 <qspi_sync_serial_run_command+0x40>)
    4c0e:	4618      	mov	r0, r3
    4c10:	4b06      	ldr	r3, [pc, #24]	; (4c2c <qspi_sync_serial_run_command+0x44>)
    4c12:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    4c14:	687b      	ldr	r3, [r7, #4]
    4c16:	6839      	ldr	r1, [r7, #0]
    4c18:	4618      	mov	r0, r3
    4c1a:	4b05      	ldr	r3, [pc, #20]	; (4c30 <qspi_sync_serial_run_command+0x48>)
    4c1c:	4798      	blx	r3
    4c1e:	4603      	mov	r3, r0
}
    4c20:	4618      	mov	r0, r3
    4c22:	3708      	adds	r7, #8
    4c24:	46bd      	mov	sp, r7
    4c26:	bd80      	pop	{r7, pc}
    4c28:	00012668 	.word	0x00012668
    4c2c:	00005f89 	.word	0x00005f89
    4c30:	000080c5 	.word	0x000080c5

00004c34 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    4c34:	b580      	push	{r7, lr}
    4c36:	b084      	sub	sp, #16
    4c38:	af00      	add	r7, sp, #0
    4c3a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	3b04      	subs	r3, #4
    4c40:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	791b      	ldrb	r3, [r3, #4]
    4c46:	2b01      	cmp	r3, #1
    4c48:	d80e      	bhi.n	4c68 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    4c4a:	68fb      	ldr	r3, [r7, #12]
    4c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4c52:	1c58      	adds	r0, r3, #1
    4c54:	68f9      	ldr	r1, [r7, #12]
    4c56:	6448      	str	r0, [r1, #68]	; 0x44
    4c58:	4413      	add	r3, r2
    4c5a:	781b      	ldrb	r3, [r3, #0]
    4c5c:	b29b      	uxth	r3, r3
    4c5e:	4619      	mov	r1, r3
    4c60:	6878      	ldr	r0, [r7, #4]
    4c62:	4b11      	ldr	r3, [pc, #68]	; (4ca8 <_spi_dev_tx+0x74>)
    4c64:	4798      	blx	r3
    4c66:	e00d      	b.n	4c84 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4c6c:	68fb      	ldr	r3, [r7, #12]
    4c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4c70:	1c58      	adds	r0, r3, #1
    4c72:	68f9      	ldr	r1, [r7, #12]
    4c74:	6448      	str	r0, [r1, #68]	; 0x44
    4c76:	005b      	lsls	r3, r3, #1
    4c78:	4413      	add	r3, r2
    4c7a:	881b      	ldrh	r3, [r3, #0]
    4c7c:	4619      	mov	r1, r3
    4c7e:	6878      	ldr	r0, [r7, #4]
    4c80:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <_spi_dev_tx+0x74>)
    4c82:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    4c84:	68fb      	ldr	r3, [r7, #12]
    4c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4c88:	68fb      	ldr	r3, [r7, #12]
    4c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c8c:	429a      	cmp	r2, r3
    4c8e:	d107      	bne.n	4ca0 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    4c90:	2100      	movs	r1, #0
    4c92:	6878      	ldr	r0, [r7, #4]
    4c94:	4b05      	ldr	r3, [pc, #20]	; (4cac <_spi_dev_tx+0x78>)
    4c96:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    4c98:	2101      	movs	r1, #1
    4c9a:	6878      	ldr	r0, [r7, #4]
    4c9c:	4b04      	ldr	r3, [pc, #16]	; (4cb0 <_spi_dev_tx+0x7c>)
    4c9e:	4798      	blx	r3
	}
}
    4ca0:	bf00      	nop
    4ca2:	3710      	adds	r7, #16
    4ca4:	46bd      	mov	sp, r7
    4ca6:	bd80      	pop	{r7, pc}
    4ca8:	00009f21 	.word	0x00009f21
    4cac:	00009de5 	.word	0x00009de5
    4cb0:	00009eb9 	.word	0x00009eb9

00004cb4 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    4cb4:	b590      	push	{r4, r7, lr}
    4cb6:	b085      	sub	sp, #20
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	3b04      	subs	r3, #4
    4cc0:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    4cc2:	68fb      	ldr	r3, [r7, #12]
    4cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d021      	beq.n	4d0e <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	791b      	ldrb	r3, [r3, #4]
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d80e      	bhi.n	4cf0 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    4cd2:	68fb      	ldr	r3, [r7, #12]
    4cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4cd6:	68fb      	ldr	r3, [r7, #12]
    4cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4cda:	1c58      	adds	r0, r3, #1
    4cdc:	68f9      	ldr	r1, [r7, #12]
    4cde:	6448      	str	r0, [r1, #68]	; 0x44
    4ce0:	18d4      	adds	r4, r2, r3
    4ce2:	6878      	ldr	r0, [r7, #4]
    4ce4:	4b2e      	ldr	r3, [pc, #184]	; (4da0 <_spi_dev_rx+0xec>)
    4ce6:	4798      	blx	r3
    4ce8:	4603      	mov	r3, r0
    4cea:	b2db      	uxtb	r3, r3
    4cec:	7023      	strb	r3, [r4, #0]
    4cee:	e016      	b.n	4d1e <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    4cf4:	68fb      	ldr	r3, [r7, #12]
    4cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4cf8:	1c58      	adds	r0, r3, #1
    4cfa:	68f9      	ldr	r1, [r7, #12]
    4cfc:	6448      	str	r0, [r1, #68]	; 0x44
    4cfe:	005b      	lsls	r3, r3, #1
    4d00:	18d4      	adds	r4, r2, r3
    4d02:	6878      	ldr	r0, [r7, #4]
    4d04:	4b26      	ldr	r3, [pc, #152]	; (4da0 <_spi_dev_rx+0xec>)
    4d06:	4798      	blx	r3
    4d08:	4603      	mov	r3, r0
    4d0a:	8023      	strh	r3, [r4, #0]
    4d0c:	e007      	b.n	4d1e <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    4d0e:	6878      	ldr	r0, [r7, #4]
    4d10:	4b23      	ldr	r3, [pc, #140]	; (4da0 <_spi_dev_rx+0xec>)
    4d12:	4798      	blx	r3
		spi->xfercnt++;
    4d14:	68fb      	ldr	r3, [r7, #12]
    4d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4d18:	1c5a      	adds	r2, r3, #1
    4d1a:	68fb      	ldr	r3, [r7, #12]
    4d1c:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    4d1e:	68fb      	ldr	r3, [r7, #12]
    4d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4d22:	68fb      	ldr	r3, [r7, #12]
    4d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d26:	429a      	cmp	r2, r3
    4d28:	d226      	bcs.n	4d78 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    4d2a:	68fb      	ldr	r3, [r7, #12]
    4d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d01b      	beq.n	4d6a <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	791b      	ldrb	r3, [r3, #4]
    4d36:	2b01      	cmp	r3, #1
    4d38:	d80b      	bhi.n	4d52 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4d42:	4413      	add	r3, r2
    4d44:	781b      	ldrb	r3, [r3, #0]
    4d46:	b29b      	uxth	r3, r3
    4d48:	4619      	mov	r1, r3
    4d4a:	6878      	ldr	r0, [r7, #4]
    4d4c:	4b15      	ldr	r3, [pc, #84]	; (4da4 <_spi_dev_rx+0xf0>)
    4d4e:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    4d50:	e022      	b.n	4d98 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    4d52:	68fb      	ldr	r3, [r7, #12]
    4d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4d56:	68fb      	ldr	r3, [r7, #12]
    4d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4d5a:	005b      	lsls	r3, r3, #1
    4d5c:	4413      	add	r3, r2
    4d5e:	881b      	ldrh	r3, [r3, #0]
    4d60:	4619      	mov	r1, r3
    4d62:	6878      	ldr	r0, [r7, #4]
    4d64:	4b0f      	ldr	r3, [pc, #60]	; (4da4 <_spi_dev_rx+0xf0>)
    4d66:	4798      	blx	r3
}
    4d68:	e016      	b.n	4d98 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	88db      	ldrh	r3, [r3, #6]
    4d6e:	4619      	mov	r1, r3
    4d70:	6878      	ldr	r0, [r7, #4]
    4d72:	4b0c      	ldr	r3, [pc, #48]	; (4da4 <_spi_dev_rx+0xf0>)
    4d74:	4798      	blx	r3
}
    4d76:	e00f      	b.n	4d98 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    4d78:	2100      	movs	r1, #0
    4d7a:	6878      	ldr	r0, [r7, #4]
    4d7c:	4b0a      	ldr	r3, [pc, #40]	; (4da8 <_spi_dev_rx+0xf4>)
    4d7e:	4798      	blx	r3
		spi->stat = 0;
    4d80:	68fb      	ldr	r3, [r7, #12]
    4d82:	2200      	movs	r2, #0
    4d84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    4d88:	68fb      	ldr	r3, [r7, #12]
    4d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d003      	beq.n	4d98 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    4d90:	68fb      	ldr	r3, [r7, #12]
    4d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d94:	68f8      	ldr	r0, [r7, #12]
    4d96:	4798      	blx	r3
}
    4d98:	bf00      	nop
    4d9a:	3714      	adds	r7, #20
    4d9c:	46bd      	mov	sp, r7
    4d9e:	bd90      	pop	{r4, r7, pc}
    4da0:	00009f79 	.word	0x00009f79
    4da4:	00009f21 	.word	0x00009f21
    4da8:	00009e49 	.word	0x00009e49

00004dac <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    4dac:	b580      	push	{r7, lr}
    4dae:	b084      	sub	sp, #16
    4db0:	af00      	add	r7, sp, #0
    4db2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	3b04      	subs	r3, #4
    4db8:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    4dba:	68fb      	ldr	r3, [r7, #12]
    4dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4dbe:	68fb      	ldr	r3, [r7, #12]
    4dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4dc2:	429a      	cmp	r2, r3
    4dc4:	d30f      	bcc.n	4de6 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    4dc6:	2100      	movs	r1, #0
    4dc8:	6878      	ldr	r0, [r7, #4]
    4dca:	4b09      	ldr	r3, [pc, #36]	; (4df0 <_spi_dev_complete+0x44>)
    4dcc:	4798      	blx	r3
		spi->stat = 0;
    4dce:	68fb      	ldr	r3, [r7, #12]
    4dd0:	2200      	movs	r2, #0
    4dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    4dd6:	68fb      	ldr	r3, [r7, #12]
    4dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d003      	beq.n	4de6 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    4dde:	68fb      	ldr	r3, [r7, #12]
    4de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4de2:	68f8      	ldr	r0, [r7, #12]
    4de4:	4798      	blx	r3
		}
	}
}
    4de6:	bf00      	nop
    4de8:	3710      	adds	r7, #16
    4dea:	46bd      	mov	sp, r7
    4dec:	bd80      	pop	{r7, pc}
    4dee:	bf00      	nop
    4df0:	00009eb9 	.word	0x00009eb9

00004df4 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    4df4:	b580      	push	{r7, lr}
    4df6:	b084      	sub	sp, #16
    4df8:	af00      	add	r7, sp, #0
    4dfa:	6078      	str	r0, [r7, #4]
    4dfc:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	3b04      	subs	r3, #4
    4e02:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    4e04:	2100      	movs	r1, #0
    4e06:	6878      	ldr	r0, [r7, #4]
    4e08:	4b0d      	ldr	r3, [pc, #52]	; (4e40 <_spi_dev_error+0x4c>)
    4e0a:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    4e0c:	2100      	movs	r1, #0
    4e0e:	6878      	ldr	r0, [r7, #4]
    4e10:	4b0c      	ldr	r3, [pc, #48]	; (4e44 <_spi_dev_error+0x50>)
    4e12:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    4e14:	2100      	movs	r1, #0
    4e16:	6878      	ldr	r0, [r7, #4]
    4e18:	4b0b      	ldr	r3, [pc, #44]	; (4e48 <_spi_dev_error+0x54>)
    4e1a:	4798      	blx	r3
	spi->stat = 0;
    4e1c:	68fb      	ldr	r3, [r7, #12]
    4e1e:	2200      	movs	r2, #0
    4e20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    4e24:	68fb      	ldr	r3, [r7, #12]
    4e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d004      	beq.n	4e36 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    4e2c:	68fb      	ldr	r3, [r7, #12]
    4e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e30:	6839      	ldr	r1, [r7, #0]
    4e32:	68f8      	ldr	r0, [r7, #12]
    4e34:	4798      	blx	r3
	}
}
    4e36:	bf00      	nop
    4e38:	3710      	adds	r7, #16
    4e3a:	46bd      	mov	sp, r7
    4e3c:	bd80      	pop	{r7, pc}
    4e3e:	bf00      	nop
    4e40:	00009de5 	.word	0x00009de5
    4e44:	00009e49 	.word	0x00009e49
    4e48:	00009eb9 	.word	0x00009eb9

00004e4c <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    4e4c:	b580      	push	{r7, lr}
    4e4e:	b084      	sub	sp, #16
    4e50:	af00      	add	r7, sp, #0
    4e52:	6078      	str	r0, [r7, #4]
    4e54:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    4e56:	2300      	movs	r3, #0
    4e58:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d004      	beq.n	4e6a <spi_m_async_init+0x1e>
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d001      	beq.n	4e6a <spi_m_async_init+0x1e>
    4e66:	2301      	movs	r3, #1
    4e68:	e000      	b.n	4e6c <spi_m_async_init+0x20>
    4e6a:	2300      	movs	r3, #0
    4e6c:	f003 0301 	and.w	r3, r3, #1
    4e70:	b2db      	uxtb	r3, r3
    4e72:	22a5      	movs	r2, #165	; 0xa5
    4e74:	491c      	ldr	r1, [pc, #112]	; (4ee8 <spi_m_async_init+0x9c>)
    4e76:	4618      	mov	r0, r3
    4e78:	4b1c      	ldr	r3, [pc, #112]	; (4eec <spi_m_async_init+0xa0>)
    4e7a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	683a      	ldr	r2, [r7, #0]
    4e80:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    4e82:	687b      	ldr	r3, [r7, #4]
    4e84:	3304      	adds	r3, #4
    4e86:	6839      	ldr	r1, [r7, #0]
    4e88:	4618      	mov	r0, r3
    4e8a:	4b19      	ldr	r3, [pc, #100]	; (4ef0 <spi_m_async_init+0xa4>)
    4e8c:	4798      	blx	r3
    4e8e:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    4e90:	68fb      	ldr	r3, [r7, #12]
    4e92:	2b00      	cmp	r3, #0
    4e94:	db23      	blt.n	4ede <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    4e96:	687b      	ldr	r3, [r7, #4]
    4e98:	3304      	adds	r3, #4
    4e9a:	4a16      	ldr	r2, [pc, #88]	; (4ef4 <spi_m_async_init+0xa8>)
    4e9c:	2100      	movs	r1, #0
    4e9e:	4618      	mov	r0, r3
    4ea0:	4b15      	ldr	r3, [pc, #84]	; (4ef8 <spi_m_async_init+0xac>)
    4ea2:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	3304      	adds	r3, #4
    4ea8:	4a14      	ldr	r2, [pc, #80]	; (4efc <spi_m_async_init+0xb0>)
    4eaa:	2101      	movs	r1, #1
    4eac:	4618      	mov	r0, r3
    4eae:	4b12      	ldr	r3, [pc, #72]	; (4ef8 <spi_m_async_init+0xac>)
    4eb0:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	3304      	adds	r3, #4
    4eb6:	4a12      	ldr	r2, [pc, #72]	; (4f00 <spi_m_async_init+0xb4>)
    4eb8:	2102      	movs	r1, #2
    4eba:	4618      	mov	r0, r3
    4ebc:	4b0e      	ldr	r3, [pc, #56]	; (4ef8 <spi_m_async_init+0xac>)
    4ebe:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	3304      	adds	r3, #4
    4ec4:	4a0f      	ldr	r2, [pc, #60]	; (4f04 <spi_m_async_init+0xb8>)
    4ec6:	2103      	movs	r1, #3
    4ec8:	4618      	mov	r0, r3
    4eca:	4b0b      	ldr	r3, [pc, #44]	; (4ef8 <spi_m_async_init+0xac>)
    4ecc:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	4a0d      	ldr	r2, [pc, #52]	; (4f08 <spi_m_async_init+0xbc>)
    4ed2:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	4a0d      	ldr	r2, [pc, #52]	; (4f0c <spi_m_async_init+0xc0>)
    4ed8:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    4eda:	2300      	movs	r3, #0
    4edc:	e000      	b.n	4ee0 <spi_m_async_init+0x94>
		return rc;
    4ede:	68fb      	ldr	r3, [r7, #12]
}
    4ee0:	4618      	mov	r0, r3
    4ee2:	3710      	adds	r7, #16
    4ee4:	46bd      	mov	sp, r7
    4ee6:	bd80      	pop	{r7, pc}
    4ee8:	00012684 	.word	0x00012684
    4eec:	00005f89 	.word	0x00005f89
    4ef0:	00009ae5 	.word	0x00009ae5
    4ef4:	00004c35 	.word	0x00004c35
    4ef8:	00009fc9 	.word	0x00009fc9
    4efc:	00004cb5 	.word	0x00004cb5
    4f00:	00004dad 	.word	0x00004dad
    4f04:	00004df5 	.word	0x00004df5
    4f08:	00004f11 	.word	0x00004f11
    4f0c:	00004f91 	.word	0x00004f91

00004f10 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    4f10:	b580      	push	{r7, lr}
    4f12:	b086      	sub	sp, #24
    4f14:	af00      	add	r7, sp, #0
    4f16:	60f8      	str	r0, [r7, #12]
    4f18:	60b9      	str	r1, [r7, #8]
    4f1a:	4613      	mov	r3, r2
    4f1c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4f1e:	68fb      	ldr	r3, [r7, #12]
    4f20:	2b00      	cmp	r3, #0
    4f22:	bf14      	ite	ne
    4f24:	2301      	movne	r3, #1
    4f26:	2300      	moveq	r3, #0
    4f28:	b2db      	uxtb	r3, r3
    4f2a:	f240 1205 	movw	r2, #261	; 0x105
    4f2e:	4914      	ldr	r1, [pc, #80]	; (4f80 <_spi_m_async_io_read+0x70>)
    4f30:	4618      	mov	r0, r3
    4f32:	4b14      	ldr	r3, [pc, #80]	; (4f84 <_spi_m_async_io_read+0x74>)
    4f34:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    4f36:	68fb      	ldr	r3, [r7, #12]
    4f38:	3b24      	subs	r3, #36	; 0x24
    4f3a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    4f3c:	697b      	ldr	r3, [r7, #20]
    4f3e:	68ba      	ldr	r2, [r7, #8]
    4f40:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    4f42:	697b      	ldr	r3, [r7, #20]
    4f44:	2200      	movs	r2, #0
    4f46:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4f48:	88fa      	ldrh	r2, [r7, #6]
    4f4a:	697b      	ldr	r3, [r7, #20]
    4f4c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    4f4e:	697b      	ldr	r3, [r7, #20]
    4f50:	2200      	movs	r2, #0
    4f52:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4f54:	697b      	ldr	r3, [r7, #20]
    4f56:	2210      	movs	r2, #16
    4f58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    4f5c:	697b      	ldr	r3, [r7, #20]
    4f5e:	3304      	adds	r3, #4
    4f60:	2101      	movs	r1, #1
    4f62:	4618      	mov	r0, r3
    4f64:	4b08      	ldr	r3, [pc, #32]	; (4f88 <_spi_m_async_io_read+0x78>)
    4f66:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    4f68:	697b      	ldr	r3, [r7, #20]
    4f6a:	3304      	adds	r3, #4
    4f6c:	f240 11ff 	movw	r1, #511	; 0x1ff
    4f70:	4618      	mov	r0, r3
    4f72:	4b06      	ldr	r3, [pc, #24]	; (4f8c <_spi_m_async_io_read+0x7c>)
    4f74:	4798      	blx	r3

	return ERR_NONE;
    4f76:	2300      	movs	r3, #0
}
    4f78:	4618      	mov	r0, r3
    4f7a:	3718      	adds	r7, #24
    4f7c:	46bd      	mov	sp, r7
    4f7e:	bd80      	pop	{r7, pc}
    4f80:	00012684 	.word	0x00012684
    4f84:	00005f89 	.word	0x00005f89
    4f88:	00009e49 	.word	0x00009e49
    4f8c:	00009f21 	.word	0x00009f21

00004f90 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b086      	sub	sp, #24
    4f94:	af00      	add	r7, sp, #0
    4f96:	60f8      	str	r0, [r7, #12]
    4f98:	60b9      	str	r1, [r7, #8]
    4f9a:	4613      	mov	r3, r2
    4f9c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    4f9e:	68fb      	ldr	r3, [r7, #12]
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	bf14      	ite	ne
    4fa4:	2301      	movne	r3, #1
    4fa6:	2300      	moveq	r3, #0
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	f240 1227 	movw	r2, #295	; 0x127
    4fae:	4911      	ldr	r1, [pc, #68]	; (4ff4 <_spi_m_async_io_write+0x64>)
    4fb0:	4618      	mov	r0, r3
    4fb2:	4b11      	ldr	r3, [pc, #68]	; (4ff8 <_spi_m_async_io_write+0x68>)
    4fb4:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    4fb6:	68fb      	ldr	r3, [r7, #12]
    4fb8:	3b24      	subs	r3, #36	; 0x24
    4fba:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    4fbc:	697b      	ldr	r3, [r7, #20]
    4fbe:	2200      	movs	r2, #0
    4fc0:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    4fc2:	697b      	ldr	r3, [r7, #20]
    4fc4:	68ba      	ldr	r2, [r7, #8]
    4fc6:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    4fc8:	88fa      	ldrh	r2, [r7, #6]
    4fca:	697b      	ldr	r3, [r7, #20]
    4fcc:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    4fce:	697b      	ldr	r3, [r7, #20]
    4fd0:	2200      	movs	r2, #0
    4fd2:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    4fd4:	697b      	ldr	r3, [r7, #20]
    4fd6:	2210      	movs	r2, #16
    4fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    4fdc:	697b      	ldr	r3, [r7, #20]
    4fde:	3304      	adds	r3, #4
    4fe0:	2101      	movs	r1, #1
    4fe2:	4618      	mov	r0, r3
    4fe4:	4b05      	ldr	r3, [pc, #20]	; (4ffc <_spi_m_async_io_write+0x6c>)
    4fe6:	4798      	blx	r3

	return ERR_NONE;
    4fe8:	2300      	movs	r3, #0
}
    4fea:	4618      	mov	r0, r3
    4fec:	3718      	adds	r7, #24
    4fee:	46bd      	mov	sp, r7
    4ff0:	bd80      	pop	{r7, pc}
    4ff2:	bf00      	nop
    4ff4:	00012684 	.word	0x00012684
    4ff8:	00005f89 	.word	0x00005f89
    4ffc:	00009de5 	.word	0x00009de5

00005000 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    5000:	b580      	push	{r7, lr}
    5002:	b084      	sub	sp, #16
    5004:	af00      	add	r7, sp, #0
    5006:	6078      	str	r0, [r7, #4]
    5008:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    500a:	2300      	movs	r3, #0
    500c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    500e:	687b      	ldr	r3, [r7, #4]
    5010:	2b00      	cmp	r3, #0
    5012:	d004      	beq.n	501e <spi_m_sync_init+0x1e>
    5014:	683b      	ldr	r3, [r7, #0]
    5016:	2b00      	cmp	r3, #0
    5018:	d001      	beq.n	501e <spi_m_sync_init+0x1e>
    501a:	2301      	movs	r3, #1
    501c:	e000      	b.n	5020 <spi_m_sync_init+0x20>
    501e:	2300      	movs	r3, #0
    5020:	f003 0301 	and.w	r3, r3, #1
    5024:	b2db      	uxtb	r3, r3
    5026:	2240      	movs	r2, #64	; 0x40
    5028:	4910      	ldr	r1, [pc, #64]	; (506c <spi_m_sync_init+0x6c>)
    502a:	4618      	mov	r0, r3
    502c:	4b10      	ldr	r3, [pc, #64]	; (5070 <spi_m_sync_init+0x70>)
    502e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    5030:	687b      	ldr	r3, [r7, #4]
    5032:	683a      	ldr	r2, [r7, #0]
    5034:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	3304      	adds	r3, #4
    503a:	6839      	ldr	r1, [r7, #0]
    503c:	4618      	mov	r0, r3
    503e:	4b0d      	ldr	r3, [pc, #52]	; (5074 <spi_m_sync_init+0x74>)
    5040:	4798      	blx	r3
    5042:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    5044:	68fb      	ldr	r3, [r7, #12]
    5046:	2b00      	cmp	r3, #0
    5048:	da01      	bge.n	504e <spi_m_sync_init+0x4e>
		return rc;
    504a:	68fb      	ldr	r3, [r7, #12]
    504c:	e00a      	b.n	5064 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5054:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	4a07      	ldr	r2, [pc, #28]	; (5078 <spi_m_sync_init+0x78>)
    505a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	4a07      	ldr	r2, [pc, #28]	; (507c <spi_m_sync_init+0x7c>)
    5060:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    5062:	2300      	movs	r3, #0
}
    5064:	4618      	mov	r0, r3
    5066:	3710      	adds	r7, #16
    5068:	46bd      	mov	sp, r7
    506a:	bd80      	pop	{r7, pc}
    506c:	000126a4 	.word	0x000126a4
    5070:	00005f89 	.word	0x00005f89
    5074:	000099d9 	.word	0x000099d9
    5078:	00005081 	.word	0x00005081
    507c:	000050d9 	.word	0x000050d9

00005080 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    5080:	b580      	push	{r7, lr}
    5082:	b088      	sub	sp, #32
    5084:	af00      	add	r7, sp, #0
    5086:	60f8      	str	r0, [r7, #12]
    5088:	60b9      	str	r1, [r7, #8]
    508a:	4613      	mov	r3, r2
    508c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    508e:	68fb      	ldr	r3, [r7, #12]
    5090:	2b00      	cmp	r3, #0
    5092:	bf14      	ite	ne
    5094:	2301      	movne	r3, #1
    5096:	2300      	moveq	r3, #0
    5098:	b2db      	uxtb	r3, r3
    509a:	2287      	movs	r2, #135	; 0x87
    509c:	490b      	ldr	r1, [pc, #44]	; (50cc <_spi_m_sync_io_read+0x4c>)
    509e:	4618      	mov	r0, r3
    50a0:	4b0b      	ldr	r3, [pc, #44]	; (50d0 <_spi_m_sync_io_read+0x50>)
    50a2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    50a4:	68fb      	ldr	r3, [r7, #12]
    50a6:	3b0c      	subs	r3, #12
    50a8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    50aa:	68bb      	ldr	r3, [r7, #8]
    50ac:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    50ae:	2300      	movs	r3, #0
    50b0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    50b2:	88fb      	ldrh	r3, [r7, #6]
    50b4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    50b6:	f107 0310 	add.w	r3, r7, #16
    50ba:	4619      	mov	r1, r3
    50bc:	69f8      	ldr	r0, [r7, #28]
    50be:	4b05      	ldr	r3, [pc, #20]	; (50d4 <_spi_m_sync_io_read+0x54>)
    50c0:	4798      	blx	r3
    50c2:	4603      	mov	r3, r0
}
    50c4:	4618      	mov	r0, r3
    50c6:	3720      	adds	r7, #32
    50c8:	46bd      	mov	sp, r7
    50ca:	bd80      	pop	{r7, pc}
    50cc:	000126a4 	.word	0x000126a4
    50d0:	00005f89 	.word	0x00005f89
    50d4:	00005131 	.word	0x00005131

000050d8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    50d8:	b580      	push	{r7, lr}
    50da:	b088      	sub	sp, #32
    50dc:	af00      	add	r7, sp, #0
    50de:	60f8      	str	r0, [r7, #12]
    50e0:	60b9      	str	r1, [r7, #8]
    50e2:	4613      	mov	r3, r2
    50e4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    50e6:	68fb      	ldr	r3, [r7, #12]
    50e8:	2b00      	cmp	r3, #0
    50ea:	bf14      	ite	ne
    50ec:	2301      	movne	r3, #1
    50ee:	2300      	moveq	r3, #0
    50f0:	b2db      	uxtb	r3, r3
    50f2:	22a3      	movs	r2, #163	; 0xa3
    50f4:	490b      	ldr	r1, [pc, #44]	; (5124 <_spi_m_sync_io_write+0x4c>)
    50f6:	4618      	mov	r0, r3
    50f8:	4b0b      	ldr	r3, [pc, #44]	; (5128 <_spi_m_sync_io_write+0x50>)
    50fa:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    50fc:	68fb      	ldr	r3, [r7, #12]
    50fe:	3b0c      	subs	r3, #12
    5100:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    5102:	2300      	movs	r3, #0
    5104:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    5106:	68bb      	ldr	r3, [r7, #8]
    5108:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    510a:	88fb      	ldrh	r3, [r7, #6]
    510c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    510e:	f107 0310 	add.w	r3, r7, #16
    5112:	4619      	mov	r1, r3
    5114:	69f8      	ldr	r0, [r7, #28]
    5116:	4b05      	ldr	r3, [pc, #20]	; (512c <_spi_m_sync_io_write+0x54>)
    5118:	4798      	blx	r3
    511a:	4603      	mov	r3, r0
}
    511c:	4618      	mov	r0, r3
    511e:	3720      	adds	r7, #32
    5120:	46bd      	mov	sp, r7
    5122:	bd80      	pop	{r7, pc}
    5124:	000126a4 	.word	0x000126a4
    5128:	00005f89 	.word	0x00005f89
    512c:	00005131 	.word	0x00005131

00005130 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    5130:	b580      	push	{r7, lr}
    5132:	b086      	sub	sp, #24
    5134:	af00      	add	r7, sp, #0
    5136:	6078      	str	r0, [r7, #4]
    5138:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    513a:	687b      	ldr	r3, [r7, #4]
    513c:	2b00      	cmp	r3, #0
    513e:	d004      	beq.n	514a <spi_m_sync_transfer+0x1a>
    5140:	683b      	ldr	r3, [r7, #0]
    5142:	2b00      	cmp	r3, #0
    5144:	d001      	beq.n	514a <spi_m_sync_transfer+0x1a>
    5146:	2301      	movs	r3, #1
    5148:	e000      	b.n	514c <spi_m_sync_transfer+0x1c>
    514a:	2300      	movs	r3, #0
    514c:	f003 0301 	and.w	r3, r3, #1
    5150:	b2db      	uxtb	r3, r3
    5152:	22b3      	movs	r2, #179	; 0xb3
    5154:	490c      	ldr	r1, [pc, #48]	; (5188 <spi_m_sync_transfer+0x58>)
    5156:	4618      	mov	r0, r3
    5158:	4b0c      	ldr	r3, [pc, #48]	; (518c <spi_m_sync_transfer+0x5c>)
    515a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    515c:	683b      	ldr	r3, [r7, #0]
    515e:	681b      	ldr	r3, [r3, #0]
    5160:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    5162:	683b      	ldr	r3, [r7, #0]
    5164:	685b      	ldr	r3, [r3, #4]
    5166:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    5168:	683b      	ldr	r3, [r7, #0]
    516a:	689b      	ldr	r3, [r3, #8]
    516c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	3304      	adds	r3, #4
    5172:	f107 020c 	add.w	r2, r7, #12
    5176:	4611      	mov	r1, r2
    5178:	4618      	mov	r0, r3
    517a:	4b05      	ldr	r3, [pc, #20]	; (5190 <spi_m_sync_transfer+0x60>)
    517c:	4798      	blx	r3
    517e:	4603      	mov	r3, r0
}
    5180:	4618      	mov	r0, r3
    5182:	3718      	adds	r7, #24
    5184:	46bd      	mov	sp, r7
    5186:	bd80      	pop	{r7, pc}
    5188:	000126a4 	.word	0x000126a4
    518c:	00005f89 	.word	0x00005f89
    5190:	00009cc9 	.word	0x00009cc9

00005194 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    5194:	b480      	push	{r7}
    5196:	b083      	sub	sp, #12
    5198:	af00      	add	r7, sp, #0
    519a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	681b      	ldr	r3, [r3, #0]
}
    51a0:	4618      	mov	r0, r3
    51a2:	370c      	adds	r7, #12
    51a4:	46bd      	mov	sp, r7
    51a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51aa:	4770      	bx	lr

000051ac <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    51ac:	b480      	push	{r7}
    51ae:	b083      	sub	sp, #12
    51b0:	af00      	add	r7, sp, #0
    51b2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	2b00      	cmp	r3, #0
    51b8:	d002      	beq.n	51c0 <list_get_next_element+0x14>
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	681b      	ldr	r3, [r3, #0]
    51be:	e000      	b.n	51c2 <list_get_next_element+0x16>
    51c0:	2300      	movs	r3, #0
}
    51c2:	4618      	mov	r0, r3
    51c4:	370c      	adds	r7, #12
    51c6:	46bd      	mov	sp, r7
    51c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51cc:	4770      	bx	lr
	...

000051d0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b084      	sub	sp, #16
    51d4:	af00      	add	r7, sp, #0
    51d6:	60f8      	str	r0, [r7, #12]
    51d8:	60b9      	str	r1, [r7, #8]
    51da:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    51dc:	68fb      	ldr	r3, [r7, #12]
    51de:	2b00      	cmp	r3, #0
    51e0:	d004      	beq.n	51ec <timer_init+0x1c>
    51e2:	68bb      	ldr	r3, [r7, #8]
    51e4:	2b00      	cmp	r3, #0
    51e6:	d001      	beq.n	51ec <timer_init+0x1c>
    51e8:	2301      	movs	r3, #1
    51ea:	e000      	b.n	51ee <timer_init+0x1e>
    51ec:	2300      	movs	r3, #0
    51ee:	f003 0301 	and.w	r3, r3, #1
    51f2:	b2db      	uxtb	r3, r3
    51f4:	223b      	movs	r2, #59	; 0x3b
    51f6:	490a      	ldr	r1, [pc, #40]	; (5220 <timer_init+0x50>)
    51f8:	4618      	mov	r0, r3
    51fa:	4b0a      	ldr	r3, [pc, #40]	; (5224 <timer_init+0x54>)
    51fc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    51fe:	68fb      	ldr	r3, [r7, #12]
    5200:	68b9      	ldr	r1, [r7, #8]
    5202:	4618      	mov	r0, r3
    5204:	4b08      	ldr	r3, [pc, #32]	; (5228 <timer_init+0x58>)
    5206:	4798      	blx	r3
	descr->time                           = 0;
    5208:	68fb      	ldr	r3, [r7, #12]
    520a:	2200      	movs	r2, #0
    520c:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    520e:	68fb      	ldr	r3, [r7, #12]
    5210:	4a06      	ldr	r2, [pc, #24]	; (522c <timer_init+0x5c>)
    5212:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5214:	2300      	movs	r3, #0
}
    5216:	4618      	mov	r0, r3
    5218:	3710      	adds	r7, #16
    521a:	46bd      	mov	sp, r7
    521c:	bd80      	pop	{r7, pc}
    521e:	bf00      	nop
    5220:	000126c0 	.word	0x000126c0
    5224:	00005f89 	.word	0x00005f89
    5228:	0000a3c1 	.word	0x0000a3c1
    522c:	00005579 	.word	0x00005579

00005230 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    5230:	b580      	push	{r7, lr}
    5232:	b082      	sub	sp, #8
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	2b00      	cmp	r3, #0
    523c:	bf14      	ite	ne
    523e:	2301      	movne	r3, #1
    5240:	2300      	moveq	r3, #0
    5242:	b2db      	uxtb	r3, r3
    5244:	2253      	movs	r2, #83	; 0x53
    5246:	490b      	ldr	r1, [pc, #44]	; (5274 <timer_start+0x44>)
    5248:	4618      	mov	r0, r3
    524a:	4b0b      	ldr	r3, [pc, #44]	; (5278 <timer_start+0x48>)
    524c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	4618      	mov	r0, r3
    5252:	4b0a      	ldr	r3, [pc, #40]	; (527c <timer_start+0x4c>)
    5254:	4798      	blx	r3
    5256:	4603      	mov	r3, r0
    5258:	2b00      	cmp	r3, #0
    525a:	d002      	beq.n	5262 <timer_start+0x32>
		return ERR_DENIED;
    525c:	f06f 0310 	mvn.w	r3, #16
    5260:	e004      	b.n	526c <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	4618      	mov	r0, r3
    5266:	4b06      	ldr	r3, [pc, #24]	; (5280 <timer_start+0x50>)
    5268:	4798      	blx	r3

	return ERR_NONE;
    526a:	2300      	movs	r3, #0
}
    526c:	4618      	mov	r0, r3
    526e:	3708      	adds	r7, #8
    5270:	46bd      	mov	sp, r7
    5272:	bd80      	pop	{r7, pc}
    5274:	000126c0 	.word	0x000126c0
    5278:	00005f89 	.word	0x00005f89
    527c:	0000a8ed 	.word	0x0000a8ed
    5280:	0000a88d 	.word	0x0000a88d

00005284 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    5284:	b580      	push	{r7, lr}
    5286:	b082      	sub	sp, #8
    5288:	af00      	add	r7, sp, #0
    528a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    528c:	687b      	ldr	r3, [r7, #4]
    528e:	2b00      	cmp	r3, #0
    5290:	bf14      	ite	ne
    5292:	2301      	movne	r3, #1
    5294:	2300      	moveq	r3, #0
    5296:	b2db      	uxtb	r3, r3
    5298:	2261      	movs	r2, #97	; 0x61
    529a:	490d      	ldr	r1, [pc, #52]	; (52d0 <timer_stop+0x4c>)
    529c:	4618      	mov	r0, r3
    529e:	4b0d      	ldr	r3, [pc, #52]	; (52d4 <timer_stop+0x50>)
    52a0:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	4618      	mov	r0, r3
    52a6:	4b0c      	ldr	r3, [pc, #48]	; (52d8 <timer_stop+0x54>)
    52a8:	4798      	blx	r3
    52aa:	4603      	mov	r3, r0
    52ac:	f083 0301 	eor.w	r3, r3, #1
    52b0:	b2db      	uxtb	r3, r3
    52b2:	2b00      	cmp	r3, #0
    52b4:	d002      	beq.n	52bc <timer_stop+0x38>
		return ERR_DENIED;
    52b6:	f06f 0310 	mvn.w	r3, #16
    52ba:	e004      	b.n	52c6 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	4618      	mov	r0, r3
    52c0:	4b06      	ldr	r3, [pc, #24]	; (52dc <timer_stop+0x58>)
    52c2:	4798      	blx	r3

	return ERR_NONE;
    52c4:	2300      	movs	r3, #0
}
    52c6:	4618      	mov	r0, r3
    52c8:	3708      	adds	r7, #8
    52ca:	46bd      	mov	sp, r7
    52cc:	bd80      	pop	{r7, pc}
    52ce:	bf00      	nop
    52d0:	000126c0 	.word	0x000126c0
    52d4:	00005f89 	.word	0x00005f89
    52d8:	0000a8ed 	.word	0x0000a8ed
    52dc:	0000a8cd 	.word	0x0000a8cd

000052e0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    52e0:	b580      	push	{r7, lr}
    52e2:	b084      	sub	sp, #16
    52e4:	af00      	add	r7, sp, #0
    52e6:	6078      	str	r0, [r7, #4]
    52e8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    52ea:	687b      	ldr	r3, [r7, #4]
    52ec:	2b00      	cmp	r3, #0
    52ee:	d004      	beq.n	52fa <timer_add_task+0x1a>
    52f0:	683b      	ldr	r3, [r7, #0]
    52f2:	2b00      	cmp	r3, #0
    52f4:	d001      	beq.n	52fa <timer_add_task+0x1a>
    52f6:	2301      	movs	r3, #1
    52f8:	e000      	b.n	52fc <timer_add_task+0x1c>
    52fa:	2300      	movs	r3, #0
    52fc:	f003 0301 	and.w	r3, r3, #1
    5300:	b2db      	uxtb	r3, r3
    5302:	227a      	movs	r2, #122	; 0x7a
    5304:	492d      	ldr	r1, [pc, #180]	; (53bc <timer_add_task+0xdc>)
    5306:	4618      	mov	r0, r3
    5308:	4b2d      	ldr	r3, [pc, #180]	; (53c0 <timer_add_task+0xe0>)
    530a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	7e1b      	ldrb	r3, [r3, #24]
    5310:	b2db      	uxtb	r3, r3
    5312:	f043 0301 	orr.w	r3, r3, #1
    5316:	b2da      	uxtb	r2, r3
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	3314      	adds	r3, #20
    5320:	6839      	ldr	r1, [r7, #0]
    5322:	4618      	mov	r0, r3
    5324:	4b27      	ldr	r3, [pc, #156]	; (53c4 <timer_add_task+0xe4>)
    5326:	4798      	blx	r3
    5328:	4603      	mov	r3, r0
    532a:	2b00      	cmp	r3, #0
    532c:	d00f      	beq.n	534e <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	7e1b      	ldrb	r3, [r3, #24]
    5332:	b2db      	uxtb	r3, r3
    5334:	f023 0301 	bic.w	r3, r3, #1
    5338:	b2da      	uxtb	r2, r3
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    533e:	227f      	movs	r2, #127	; 0x7f
    5340:	491e      	ldr	r1, [pc, #120]	; (53bc <timer_add_task+0xdc>)
    5342:	2000      	movs	r0, #0
    5344:	4b1e      	ldr	r3, [pc, #120]	; (53c0 <timer_add_task+0xe0>)
    5346:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    5348:	f06f 0311 	mvn.w	r3, #17
    534c:	e032      	b.n	53b4 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    534e:	687b      	ldr	r3, [r7, #4]
    5350:	691a      	ldr	r2, [r3, #16]
    5352:	683b      	ldr	r3, [r7, #0]
    5354:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    5356:	687b      	ldr	r3, [r7, #4]
    5358:	f103 0014 	add.w	r0, r3, #20
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	691b      	ldr	r3, [r3, #16]
    5360:	461a      	mov	r2, r3
    5362:	6839      	ldr	r1, [r7, #0]
    5364:	4b18      	ldr	r3, [pc, #96]	; (53c8 <timer_add_task+0xe8>)
    5366:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	7e1b      	ldrb	r3, [r3, #24]
    536c:	b2db      	uxtb	r3, r3
    536e:	f023 0301 	bic.w	r3, r3, #1
    5372:	b2da      	uxtb	r2, r3
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5378:	687b      	ldr	r3, [r7, #4]
    537a:	7e1b      	ldrb	r3, [r3, #24]
    537c:	b2db      	uxtb	r3, r3
    537e:	f003 0302 	and.w	r3, r3, #2
    5382:	2b00      	cmp	r3, #0
    5384:	d015      	beq.n	53b2 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    5386:	f107 030c 	add.w	r3, r7, #12
    538a:	4618      	mov	r0, r3
    538c:	4b0f      	ldr	r3, [pc, #60]	; (53cc <timer_add_task+0xec>)
    538e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5390:	687b      	ldr	r3, [r7, #4]
    5392:	7e1b      	ldrb	r3, [r3, #24]
    5394:	b2db      	uxtb	r3, r3
    5396:	f023 0302 	bic.w	r3, r3, #2
    539a:	b2da      	uxtb	r2, r3
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	4618      	mov	r0, r3
    53a4:	4b0a      	ldr	r3, [pc, #40]	; (53d0 <timer_add_task+0xf0>)
    53a6:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    53a8:	f107 030c 	add.w	r3, r7, #12
    53ac:	4618      	mov	r0, r3
    53ae:	4b09      	ldr	r3, [pc, #36]	; (53d4 <timer_add_task+0xf4>)
    53b0:	4798      	blx	r3
	}

	return ERR_NONE;
    53b2:	2300      	movs	r3, #0
}
    53b4:	4618      	mov	r0, r3
    53b6:	3710      	adds	r7, #16
    53b8:	46bd      	mov	sp, r7
    53ba:	bd80      	pop	{r7, pc}
    53bc:	000126c0 	.word	0x000126c0
    53c0:	00005f89 	.word	0x00005f89
    53c4:	00005fb1 	.word	0x00005fb1
    53c8:	000054c9 	.word	0x000054c9
    53cc:	00003fa5 	.word	0x00003fa5
    53d0:	0000a94d 	.word	0x0000a94d
    53d4:	00003fcb 	.word	0x00003fcb

000053d8 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    53d8:	b580      	push	{r7, lr}
    53da:	b084      	sub	sp, #16
    53dc:	af00      	add	r7, sp, #0
    53de:	6078      	str	r0, [r7, #4]
    53e0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    53e2:	687b      	ldr	r3, [r7, #4]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d004      	beq.n	53f2 <timer_remove_task+0x1a>
    53e8:	683b      	ldr	r3, [r7, #0]
    53ea:	2b00      	cmp	r3, #0
    53ec:	d001      	beq.n	53f2 <timer_remove_task+0x1a>
    53ee:	2301      	movs	r3, #1
    53f0:	e000      	b.n	53f4 <timer_remove_task+0x1c>
    53f2:	2300      	movs	r3, #0
    53f4:	f003 0301 	and.w	r3, r3, #1
    53f8:	b2db      	uxtb	r3, r3
    53fa:	2295      	movs	r2, #149	; 0x95
    53fc:	492b      	ldr	r1, [pc, #172]	; (54ac <timer_remove_task+0xd4>)
    53fe:	4618      	mov	r0, r3
    5400:	4b2b      	ldr	r3, [pc, #172]	; (54b0 <timer_remove_task+0xd8>)
    5402:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    5404:	687b      	ldr	r3, [r7, #4]
    5406:	7e1b      	ldrb	r3, [r3, #24]
    5408:	b2db      	uxtb	r3, r3
    540a:	f043 0301 	orr.w	r3, r3, #1
    540e:	b2da      	uxtb	r2, r3
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	3314      	adds	r3, #20
    5418:	6839      	ldr	r1, [r7, #0]
    541a:	4618      	mov	r0, r3
    541c:	4b25      	ldr	r3, [pc, #148]	; (54b4 <timer_remove_task+0xdc>)
    541e:	4798      	blx	r3
    5420:	4603      	mov	r3, r0
    5422:	f083 0301 	eor.w	r3, r3, #1
    5426:	b2db      	uxtb	r3, r3
    5428:	2b00      	cmp	r3, #0
    542a:	d00f      	beq.n	544c <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	7e1b      	ldrb	r3, [r3, #24]
    5430:	b2db      	uxtb	r3, r3
    5432:	f023 0301 	bic.w	r3, r3, #1
    5436:	b2da      	uxtb	r2, r3
    5438:	687b      	ldr	r3, [r7, #4]
    543a:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    543c:	229a      	movs	r2, #154	; 0x9a
    543e:	491b      	ldr	r1, [pc, #108]	; (54ac <timer_remove_task+0xd4>)
    5440:	2000      	movs	r0, #0
    5442:	4b1b      	ldr	r3, [pc, #108]	; (54b0 <timer_remove_task+0xd8>)
    5444:	4798      	blx	r3
		return ERR_NOT_FOUND;
    5446:	f06f 0309 	mvn.w	r3, #9
    544a:	e02b      	b.n	54a4 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    544c:	687b      	ldr	r3, [r7, #4]
    544e:	3314      	adds	r3, #20
    5450:	6839      	ldr	r1, [r7, #0]
    5452:	4618      	mov	r0, r3
    5454:	4b18      	ldr	r3, [pc, #96]	; (54b8 <timer_remove_task+0xe0>)
    5456:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	7e1b      	ldrb	r3, [r3, #24]
    545c:	b2db      	uxtb	r3, r3
    545e:	f023 0301 	bic.w	r3, r3, #1
    5462:	b2da      	uxtb	r2, r3
    5464:	687b      	ldr	r3, [r7, #4]
    5466:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    5468:	687b      	ldr	r3, [r7, #4]
    546a:	7e1b      	ldrb	r3, [r3, #24]
    546c:	b2db      	uxtb	r3, r3
    546e:	f003 0302 	and.w	r3, r3, #2
    5472:	2b00      	cmp	r3, #0
    5474:	d015      	beq.n	54a2 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    5476:	f107 030c 	add.w	r3, r7, #12
    547a:	4618      	mov	r0, r3
    547c:	4b0f      	ldr	r3, [pc, #60]	; (54bc <timer_remove_task+0xe4>)
    547e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	7e1b      	ldrb	r3, [r3, #24]
    5484:	b2db      	uxtb	r3, r3
    5486:	f023 0302 	bic.w	r3, r3, #2
    548a:	b2da      	uxtb	r2, r3
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	4618      	mov	r0, r3
    5494:	4b0a      	ldr	r3, [pc, #40]	; (54c0 <timer_remove_task+0xe8>)
    5496:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    5498:	f107 030c 	add.w	r3, r7, #12
    549c:	4618      	mov	r0, r3
    549e:	4b09      	ldr	r3, [pc, #36]	; (54c4 <timer_remove_task+0xec>)
    54a0:	4798      	blx	r3
	}

	return ERR_NONE;
    54a2:	2300      	movs	r3, #0
}
    54a4:	4618      	mov	r0, r3
    54a6:	3710      	adds	r7, #16
    54a8:	46bd      	mov	sp, r7
    54aa:	bd80      	pop	{r7, pc}
    54ac:	000126c0 	.word	0x000126c0
    54b0:	00005f89 	.word	0x00005f89
    54b4:	00005fb1 	.word	0x00005fb1
    54b8:	00006113 	.word	0x00006113
    54bc:	00003fa5 	.word	0x00003fa5
    54c0:	0000a94d 	.word	0x0000a94d
    54c4:	00003fcb 	.word	0x00003fcb

000054c8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    54c8:	b580      	push	{r7, lr}
    54ca:	b088      	sub	sp, #32
    54cc:	af00      	add	r7, sp, #0
    54ce:	60f8      	str	r0, [r7, #12]
    54d0:	60b9      	str	r1, [r7, #8]
    54d2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    54d4:	2300      	movs	r3, #0
    54d6:	61bb      	str	r3, [r7, #24]
    54d8:	68f8      	ldr	r0, [r7, #12]
    54da:	4b23      	ldr	r3, [pc, #140]	; (5568 <timer_add_timer_task+0xa0>)
    54dc:	4798      	blx	r3
    54de:	6138      	str	r0, [r7, #16]

	if (!head) {
    54e0:	693b      	ldr	r3, [r7, #16]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d104      	bne.n	54f0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    54e6:	68b9      	ldr	r1, [r7, #8]
    54e8:	68f8      	ldr	r0, [r7, #12]
    54ea:	4b20      	ldr	r3, [pc, #128]	; (556c <timer_add_timer_task+0xa4>)
    54ec:	4798      	blx	r3
		return;
    54ee:	e037      	b.n	5560 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    54f0:	693b      	ldr	r3, [r7, #16]
    54f2:	61fb      	str	r3, [r7, #28]
    54f4:	e022      	b.n	553c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    54f6:	69fb      	ldr	r3, [r7, #28]
    54f8:	685a      	ldr	r2, [r3, #4]
    54fa:	687b      	ldr	r3, [r7, #4]
    54fc:	429a      	cmp	r2, r3
    54fe:	d808      	bhi.n	5512 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    5500:	69fb      	ldr	r3, [r7, #28]
    5502:	689a      	ldr	r2, [r3, #8]
    5504:	69fb      	ldr	r3, [r7, #28]
    5506:	6859      	ldr	r1, [r3, #4]
    5508:	687b      	ldr	r3, [r7, #4]
    550a:	1acb      	subs	r3, r1, r3
    550c:	4413      	add	r3, r2
    550e:	617b      	str	r3, [r7, #20]
    5510:	e009      	b.n	5526 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    5512:	69fb      	ldr	r3, [r7, #28]
    5514:	689a      	ldr	r2, [r3, #8]
    5516:	69fb      	ldr	r3, [r7, #28]
    5518:	685b      	ldr	r3, [r3, #4]
    551a:	441a      	add	r2, r3
    551c:	687b      	ldr	r3, [r7, #4]
    551e:	425b      	negs	r3, r3
    5520:	4413      	add	r3, r2
    5522:	3301      	adds	r3, #1
    5524:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	689a      	ldr	r2, [r3, #8]
    552a:	697b      	ldr	r3, [r7, #20]
    552c:	429a      	cmp	r2, r3
    552e:	d909      	bls.n	5544 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    5530:	69fb      	ldr	r3, [r7, #28]
    5532:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    5534:	69f8      	ldr	r0, [r7, #28]
    5536:	4b0e      	ldr	r3, [pc, #56]	; (5570 <timer_add_timer_task+0xa8>)
    5538:	4798      	blx	r3
    553a:	61f8      	str	r0, [r7, #28]
    553c:	69fb      	ldr	r3, [r7, #28]
    553e:	2b00      	cmp	r3, #0
    5540:	d1d9      	bne.n	54f6 <timer_add_timer_task+0x2e>
    5542:	e000      	b.n	5546 <timer_add_timer_task+0x7e>
			break;
    5544:	bf00      	nop
	}

	if (it == head) {
    5546:	69fa      	ldr	r2, [r7, #28]
    5548:	693b      	ldr	r3, [r7, #16]
    554a:	429a      	cmp	r2, r3
    554c:	d104      	bne.n	5558 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    554e:	68b9      	ldr	r1, [r7, #8]
    5550:	68f8      	ldr	r0, [r7, #12]
    5552:	4b06      	ldr	r3, [pc, #24]	; (556c <timer_add_timer_task+0xa4>)
    5554:	4798      	blx	r3
    5556:	e003      	b.n	5560 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    5558:	68b9      	ldr	r1, [r7, #8]
    555a:	69b8      	ldr	r0, [r7, #24]
    555c:	4b05      	ldr	r3, [pc, #20]	; (5574 <timer_add_timer_task+0xac>)
    555e:	4798      	blx	r3
	}
}
    5560:	3720      	adds	r7, #32
    5562:	46bd      	mov	sp, r7
    5564:	bd80      	pop	{r7, pc}
    5566:	bf00      	nop
    5568:	00005195 	.word	0x00005195
    556c:	00005fe9 	.word	0x00005fe9
    5570:	000051ad 	.word	0x000051ad
    5574:	00006041 	.word	0x00006041

00005578 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    5578:	b580      	push	{r7, lr}
    557a:	b086      	sub	sp, #24
    557c:	af00      	add	r7, sp, #0
    557e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    5584:	693b      	ldr	r3, [r7, #16]
    5586:	3314      	adds	r3, #20
    5588:	4618      	mov	r0, r3
    558a:	4b27      	ldr	r3, [pc, #156]	; (5628 <timer_process_counted+0xb0>)
    558c:	4798      	blx	r3
    558e:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    5590:	693b      	ldr	r3, [r7, #16]
    5592:	691b      	ldr	r3, [r3, #16]
    5594:	1c5a      	adds	r2, r3, #1
    5596:	693b      	ldr	r3, [r7, #16]
    5598:	611a      	str	r2, [r3, #16]
    559a:	693b      	ldr	r3, [r7, #16]
    559c:	691b      	ldr	r3, [r3, #16]
    559e:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    55a0:	693b      	ldr	r3, [r7, #16]
    55a2:	7e1b      	ldrb	r3, [r3, #24]
    55a4:	b2db      	uxtb	r3, r3
    55a6:	f003 0301 	and.w	r3, r3, #1
    55aa:	2b00      	cmp	r3, #0
    55ac:	d106      	bne.n	55bc <timer_process_counted+0x44>
    55ae:	693b      	ldr	r3, [r7, #16]
    55b0:	7e1b      	ldrb	r3, [r3, #24]
    55b2:	b2db      	uxtb	r3, r3
    55b4:	f003 0302 	and.w	r3, r3, #2
    55b8:	2b00      	cmp	r3, #0
    55ba:	d027      	beq.n	560c <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    55bc:	693b      	ldr	r3, [r7, #16]
    55be:	7e1b      	ldrb	r3, [r3, #24]
    55c0:	b2db      	uxtb	r3, r3
    55c2:	f043 0302 	orr.w	r3, r3, #2
    55c6:	b2da      	uxtb	r2, r3
    55c8:	693b      	ldr	r3, [r7, #16]
    55ca:	761a      	strb	r2, [r3, #24]
		return;
    55cc:	e029      	b.n	5622 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    55ce:	697b      	ldr	r3, [r7, #20]
    55d0:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    55d2:	693b      	ldr	r3, [r7, #16]
    55d4:	3314      	adds	r3, #20
    55d6:	4618      	mov	r0, r3
    55d8:	4b14      	ldr	r3, [pc, #80]	; (562c <timer_process_counted+0xb4>)
    55da:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    55dc:	68bb      	ldr	r3, [r7, #8]
    55de:	7c1b      	ldrb	r3, [r3, #16]
    55e0:	2b01      	cmp	r3, #1
    55e2:	d109      	bne.n	55f8 <timer_process_counted+0x80>
			tmp->time_label = time;
    55e4:	68bb      	ldr	r3, [r7, #8]
    55e6:	68fa      	ldr	r2, [r7, #12]
    55e8:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    55ea:	693b      	ldr	r3, [r7, #16]
    55ec:	3314      	adds	r3, #20
    55ee:	68fa      	ldr	r2, [r7, #12]
    55f0:	68b9      	ldr	r1, [r7, #8]
    55f2:	4618      	mov	r0, r3
    55f4:	4b0e      	ldr	r3, [pc, #56]	; (5630 <timer_process_counted+0xb8>)
    55f6:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    55f8:	693b      	ldr	r3, [r7, #16]
    55fa:	3314      	adds	r3, #20
    55fc:	4618      	mov	r0, r3
    55fe:	4b0a      	ldr	r3, [pc, #40]	; (5628 <timer_process_counted+0xb0>)
    5600:	4798      	blx	r3
    5602:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    5604:	68bb      	ldr	r3, [r7, #8]
    5606:	68db      	ldr	r3, [r3, #12]
    5608:	68b8      	ldr	r0, [r7, #8]
    560a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    560c:	697b      	ldr	r3, [r7, #20]
    560e:	2b00      	cmp	r3, #0
    5610:	d007      	beq.n	5622 <timer_process_counted+0xaa>
    5612:	697b      	ldr	r3, [r7, #20]
    5614:	685b      	ldr	r3, [r3, #4]
    5616:	68fa      	ldr	r2, [r7, #12]
    5618:	1ad2      	subs	r2, r2, r3
    561a:	697b      	ldr	r3, [r7, #20]
    561c:	689b      	ldr	r3, [r3, #8]
    561e:	429a      	cmp	r2, r3
    5620:	d2d5      	bcs.n	55ce <timer_process_counted+0x56>
	}
}
    5622:	3718      	adds	r7, #24
    5624:	46bd      	mov	sp, r7
    5626:	bd80      	pop	{r7, pc}
    5628:	00005195 	.word	0x00005195
    562c:	000060e1 	.word	0x000060e1
    5630:	000054c9 	.word	0x000054c9

00005634 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    5634:	b480      	push	{r7}
    5636:	b085      	sub	sp, #20
    5638:	af00      	add	r7, sp, #0
    563a:	4603      	mov	r3, r0
    563c:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    563e:	2300      	movs	r3, #0
    5640:	73fb      	strb	r3, [r7, #15]
    5642:	e029      	b.n	5698 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    5644:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5648:	4a19      	ldr	r2, [pc, #100]	; (56b0 <_usb_d_find_ep+0x7c>)
    564a:	015b      	lsls	r3, r3, #5
    564c:	4413      	add	r3, r2
    564e:	3301      	adds	r3, #1
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	79fa      	ldrb	r2, [r7, #7]
    5654:	429a      	cmp	r2, r3
    5656:	d102      	bne.n	565e <_usb_d_find_ep+0x2a>
			return i;
    5658:	f997 300f 	ldrsb.w	r3, [r7, #15]
    565c:	e022      	b.n	56a4 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    565e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5662:	4a13      	ldr	r2, [pc, #76]	; (56b0 <_usb_d_find_ep+0x7c>)
    5664:	015b      	lsls	r3, r3, #5
    5666:	4413      	add	r3, r2
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	2b00      	cmp	r3, #0
    566c:	d10e      	bne.n	568c <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    566e:	79fb      	ldrb	r3, [r7, #7]
    5670:	f003 030f 	and.w	r3, r3, #15
    5674:	f997 200f 	ldrsb.w	r2, [r7, #15]
    5678:	490d      	ldr	r1, [pc, #52]	; (56b0 <_usb_d_find_ep+0x7c>)
    567a:	0152      	lsls	r2, r2, #5
    567c:	440a      	add	r2, r1
    567e:	3201      	adds	r2, #1
    5680:	7812      	ldrb	r2, [r2, #0]
    5682:	4293      	cmp	r3, r2
    5684:	d102      	bne.n	568c <_usb_d_find_ep+0x58>
			return i;
    5686:	f997 300f 	ldrsb.w	r3, [r7, #15]
    568a:	e00b      	b.n	56a4 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    568c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5690:	b2db      	uxtb	r3, r3
    5692:	3301      	adds	r3, #1
    5694:	b2db      	uxtb	r3, r3
    5696:	73fb      	strb	r3, [r7, #15]
    5698:	f997 300f 	ldrsb.w	r3, [r7, #15]
    569c:	2b03      	cmp	r3, #3
    569e:	ddd1      	ble.n	5644 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    56a0:	f04f 33ff 	mov.w	r3, #4294967295
}
    56a4:	4618      	mov	r0, r3
    56a6:	3714      	adds	r7, #20
    56a8:	46bd      	mov	sp, r7
    56aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ae:	4770      	bx	lr
    56b0:	20002008 	.word	0x20002008

000056b4 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    56b4:	b580      	push	{r7, lr}
    56b6:	b088      	sub	sp, #32
    56b8:	af00      	add	r7, sp, #0
    56ba:	60ba      	str	r2, [r7, #8]
    56bc:	607b      	str	r3, [r7, #4]
    56be:	4603      	mov	r3, r0
    56c0:	73fb      	strb	r3, [r7, #15]
    56c2:	460b      	mov	r3, r1
    56c4:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    56c6:	68bb      	ldr	r3, [r7, #8]
    56c8:	617b      	str	r3, [r7, #20]
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	61bb      	str	r3, [r7, #24]
    56ce:	7bbb      	ldrb	r3, [r7, #14]
    56d0:	2b00      	cmp	r3, #0
    56d2:	d004      	beq.n	56de <_usb_d_trans+0x2a>
    56d4:	7bfb      	ldrb	r3, [r7, #15]
    56d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    56da:	b2db      	uxtb	r3, r3
    56dc:	e003      	b.n	56e6 <_usb_d_trans+0x32>
    56de:	7bfb      	ldrb	r3, [r7, #15]
    56e0:	f003 030f 	and.w	r3, r3, #15
    56e4:	b2db      	uxtb	r3, r3
    56e6:	773b      	strb	r3, [r7, #28]
    56e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    56ec:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    56ee:	f107 0314 	add.w	r3, r7, #20
    56f2:	4618      	mov	r0, r3
    56f4:	4b03      	ldr	r3, [pc, #12]	; (5704 <_usb_d_trans+0x50>)
    56f6:	4798      	blx	r3
    56f8:	4603      	mov	r3, r0
}
    56fa:	4618      	mov	r0, r3
    56fc:	3720      	adds	r7, #32
    56fe:	46bd      	mov	sp, r7
    5700:	bd80      	pop	{r7, pc}
    5702:	bf00      	nop
    5704:	0000d0cd 	.word	0x0000d0cd

00005708 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    5708:	b480      	push	{r7}
    570a:	b085      	sub	sp, #20
    570c:	af00      	add	r7, sp, #0
    570e:	60f8      	str	r0, [r7, #12]
    5710:	60b9      	str	r1, [r7, #8]
    5712:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    5714:	2300      	movs	r3, #0
}
    5716:	4618      	mov	r0, r3
    5718:	3714      	adds	r7, #20
    571a:	46bd      	mov	sp, r7
    571c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5720:	4770      	bx	lr
	...

00005724 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    5724:	b580      	push	{r7, lr}
    5726:	b086      	sub	sp, #24
    5728:	af00      	add	r7, sp, #0
    572a:	4603      	mov	r3, r0
    572c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    572e:	79fb      	ldrb	r3, [r7, #7]
    5730:	4618      	mov	r0, r3
    5732:	4b2a      	ldr	r3, [pc, #168]	; (57dc <usb_d_cb_trans_setup+0xb8>)
    5734:	4798      	blx	r3
    5736:	4603      	mov	r3, r0
    5738:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    573a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    573e:	015b      	lsls	r3, r3, #5
    5740:	4a27      	ldr	r2, [pc, #156]	; (57e0 <usb_d_cb_trans_setup+0xbc>)
    5742:	4413      	add	r3, r2
    5744:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    5746:	693b      	ldr	r3, [r7, #16]
    5748:	330c      	adds	r3, #12
    574a:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    574c:	79fb      	ldrb	r3, [r7, #7]
    574e:	68f9      	ldr	r1, [r7, #12]
    5750:	4618      	mov	r0, r3
    5752:	4b24      	ldr	r3, [pc, #144]	; (57e4 <usb_d_cb_trans_setup+0xc0>)
    5754:	4798      	blx	r3
    5756:	4603      	mov	r3, r0
    5758:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    575a:	7afb      	ldrb	r3, [r7, #11]
    575c:	2b08      	cmp	r3, #8
    575e:	d00d      	beq.n	577c <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5760:	79fb      	ldrb	r3, [r7, #7]
    5762:	2101      	movs	r1, #1
    5764:	4618      	mov	r0, r3
    5766:	4b20      	ldr	r3, [pc, #128]	; (57e8 <usb_d_cb_trans_setup+0xc4>)
    5768:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    576a:	79fb      	ldrb	r3, [r7, #7]
    576c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5770:	b2db      	uxtb	r3, r3
    5772:	2101      	movs	r1, #1
    5774:	4618      	mov	r0, r3
    5776:	4b1c      	ldr	r3, [pc, #112]	; (57e8 <usb_d_cb_trans_setup+0xc4>)
    5778:	4798      	blx	r3
		return;
    577a:	e02b      	b.n	57d4 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    577c:	79fb      	ldrb	r3, [r7, #7]
    577e:	2100      	movs	r1, #0
    5780:	4618      	mov	r0, r3
    5782:	4b19      	ldr	r3, [pc, #100]	; (57e8 <usb_d_cb_trans_setup+0xc4>)
    5784:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    5786:	79fb      	ldrb	r3, [r7, #7]
    5788:	f063 037f 	orn	r3, r3, #127	; 0x7f
    578c:	b2db      	uxtb	r3, r3
    578e:	2100      	movs	r1, #0
    5790:	4618      	mov	r0, r3
    5792:	4b15      	ldr	r3, [pc, #84]	; (57e8 <usb_d_cb_trans_setup+0xc4>)
    5794:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    5796:	693b      	ldr	r3, [r7, #16]
    5798:	2201      	movs	r2, #1
    579a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    579c:	693b      	ldr	r3, [r7, #16]
    579e:	695b      	ldr	r3, [r3, #20]
    57a0:	79fa      	ldrb	r2, [r7, #7]
    57a2:	68f9      	ldr	r1, [r7, #12]
    57a4:	4610      	mov	r0, r2
    57a6:	4798      	blx	r3
    57a8:	4603      	mov	r3, r0
    57aa:	f083 0301 	eor.w	r3, r3, #1
    57ae:	b2db      	uxtb	r3, r3
    57b0:	2b00      	cmp	r3, #0
    57b2:	d00f      	beq.n	57d4 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    57b4:	693b      	ldr	r3, [r7, #16]
    57b6:	2205      	movs	r2, #5
    57b8:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    57ba:	79fb      	ldrb	r3, [r7, #7]
    57bc:	2101      	movs	r1, #1
    57be:	4618      	mov	r0, r3
    57c0:	4b09      	ldr	r3, [pc, #36]	; (57e8 <usb_d_cb_trans_setup+0xc4>)
    57c2:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    57c4:	79fb      	ldrb	r3, [r7, #7]
    57c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    57ca:	b2db      	uxtb	r3, r3
    57cc:	2101      	movs	r1, #1
    57ce:	4618      	mov	r0, r3
    57d0:	4b05      	ldr	r3, [pc, #20]	; (57e8 <usb_d_cb_trans_setup+0xc4>)
    57d2:	4798      	blx	r3
	}
}
    57d4:	3718      	adds	r7, #24
    57d6:	46bd      	mov	sp, r7
    57d8:	bd80      	pop	{r7, pc}
    57da:	bf00      	nop
    57dc:	00005635 	.word	0x00005635
    57e0:	20002008 	.word	0x20002008
    57e4:	0000d025 	.word	0x0000d025
    57e8:	0000ce9d 	.word	0x0000ce9d

000057ec <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    57ec:	b580      	push	{r7, lr}
    57ee:	b084      	sub	sp, #16
    57f0:	af00      	add	r7, sp, #0
    57f2:	4603      	mov	r3, r0
    57f4:	6039      	str	r1, [r7, #0]
    57f6:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    57f8:	79fb      	ldrb	r3, [r7, #7]
    57fa:	4618      	mov	r0, r3
    57fc:	4b0d      	ldr	r3, [pc, #52]	; (5834 <usb_d_cb_trans_more+0x48>)
    57fe:	4798      	blx	r3
    5800:	4603      	mov	r3, r0
    5802:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5804:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5808:	015b      	lsls	r3, r3, #5
    580a:	4a0b      	ldr	r2, [pc, #44]	; (5838 <usb_d_cb_trans_more+0x4c>)
    580c:	4413      	add	r3, r2
    580e:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    5810:	68bb      	ldr	r3, [r7, #8]
    5812:	789b      	ldrb	r3, [r3, #2]
    5814:	2b03      	cmp	r3, #3
    5816:	d107      	bne.n	5828 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    5818:	68bb      	ldr	r3, [r7, #8]
    581a:	699b      	ldr	r3, [r3, #24]
    581c:	79fa      	ldrb	r2, [r7, #7]
    581e:	6839      	ldr	r1, [r7, #0]
    5820:	4610      	mov	r0, r2
    5822:	4798      	blx	r3
    5824:	4603      	mov	r3, r0
    5826:	e000      	b.n	582a <usb_d_cb_trans_more+0x3e>
	}
	return false;
    5828:	2300      	movs	r3, #0
}
    582a:	4618      	mov	r0, r3
    582c:	3710      	adds	r7, #16
    582e:	46bd      	mov	sp, r7
    5830:	bd80      	pop	{r7, pc}
    5832:	bf00      	nop
    5834:	00005635 	.word	0x00005635
    5838:	20002008 	.word	0x20002008

0000583c <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    583c:	b590      	push	{r4, r7, lr}
    583e:	b087      	sub	sp, #28
    5840:	af02      	add	r7, sp, #8
    5842:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	789b      	ldrb	r3, [r3, #2]
    5848:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	7b1b      	ldrb	r3, [r3, #12]
    584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5852:	2b00      	cmp	r3, #0
    5854:	bf14      	ite	ne
    5856:	2301      	movne	r3, #1
    5858:	2300      	moveq	r3, #0
    585a:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    585c:	7bfb      	ldrb	r3, [r7, #15]
    585e:	2b03      	cmp	r3, #3
    5860:	d13a      	bne.n	58d8 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    5862:	687b      	ldr	r3, [r7, #4]
    5864:	69db      	ldr	r3, [r3, #28]
    5866:	687a      	ldr	r2, [r7, #4]
    5868:	7850      	ldrb	r0, [r2, #1]
    586a:	687a      	ldr	r2, [r7, #4]
    586c:	320c      	adds	r2, #12
    586e:	2101      	movs	r1, #1
    5870:	4798      	blx	r3
    5872:	4603      	mov	r3, r0
    5874:	737b      	strb	r3, [r7, #13]
		if (err) {
    5876:	7b7b      	ldrb	r3, [r7, #13]
    5878:	2b00      	cmp	r3, #0
    587a:	d015      	beq.n	58a8 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    587c:	687b      	ldr	r3, [r7, #4]
    587e:	2205      	movs	r2, #5
    5880:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    5882:	687b      	ldr	r3, [r7, #4]
    5884:	2202      	movs	r2, #2
    5886:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    5888:	7bbb      	ldrb	r3, [r7, #14]
    588a:	2b00      	cmp	r3, #0
    588c:	d002      	beq.n	5894 <usb_d_ctrl_trans_done+0x58>
    588e:	687b      	ldr	r3, [r7, #4]
    5890:	785b      	ldrb	r3, [r3, #1]
    5892:	e004      	b.n	589e <usb_d_ctrl_trans_done+0x62>
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	785b      	ldrb	r3, [r3, #1]
    5898:	f063 037f 	orn	r3, r3, #127	; 0x7f
    589c:	b2db      	uxtb	r3, r3
    589e:	2101      	movs	r1, #1
    58a0:	4618      	mov	r0, r3
    58a2:	4b15      	ldr	r3, [pc, #84]	; (58f8 <usb_d_ctrl_trans_done+0xbc>)
    58a4:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    58a6:	e022      	b.n	58ee <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	2204      	movs	r2, #4
    58ac:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    58ae:	687b      	ldr	r3, [r7, #4]
    58b0:	7858      	ldrb	r0, [r3, #1]
    58b2:	7bbb      	ldrb	r3, [r7, #14]
    58b4:	2b00      	cmp	r3, #0
    58b6:	bf14      	ite	ne
    58b8:	2301      	movne	r3, #1
    58ba:	2300      	moveq	r3, #0
    58bc:	b2db      	uxtb	r3, r3
    58be:	f083 0301 	eor.w	r3, r3, #1
    58c2:	b2db      	uxtb	r3, r3
    58c4:	f003 0301 	and.w	r3, r3, #1
    58c8:	b2d9      	uxtb	r1, r3
    58ca:	2301      	movs	r3, #1
    58cc:	9300      	str	r3, [sp, #0]
    58ce:	2300      	movs	r3, #0
    58d0:	2200      	movs	r2, #0
    58d2:	4c0a      	ldr	r4, [pc, #40]	; (58fc <usb_d_ctrl_trans_done+0xc0>)
    58d4:	47a0      	blx	r4
}
    58d6:	e00a      	b.n	58ee <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    58d8:	687b      	ldr	r3, [r7, #4]
    58da:	69db      	ldr	r3, [r3, #28]
    58dc:	687a      	ldr	r2, [r7, #4]
    58de:	7850      	ldrb	r0, [r2, #1]
    58e0:	687a      	ldr	r2, [r7, #4]
    58e2:	320c      	adds	r2, #12
    58e4:	2100      	movs	r1, #0
    58e6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	2202      	movs	r2, #2
    58ec:	709a      	strb	r2, [r3, #2]
}
    58ee:	bf00      	nop
    58f0:	3714      	adds	r7, #20
    58f2:	46bd      	mov	sp, r7
    58f4:	bd90      	pop	{r4, r7, pc}
    58f6:	bf00      	nop
    58f8:	0000ce9d 	.word	0x0000ce9d
    58fc:	000056b5 	.word	0x000056b5

00005900 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    5900:	b580      	push	{r7, lr}
    5902:	b086      	sub	sp, #24
    5904:	af00      	add	r7, sp, #0
    5906:	4603      	mov	r3, r0
    5908:	60b9      	str	r1, [r7, #8]
    590a:	607a      	str	r2, [r7, #4]
    590c:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    590e:	7bfb      	ldrb	r3, [r7, #15]
    5910:	4618      	mov	r0, r3
    5912:	4b2f      	ldr	r3, [pc, #188]	; (59d0 <_usb_d_cb_trans_done+0xd0>)
    5914:	4798      	blx	r3
    5916:	4603      	mov	r3, r0
    5918:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    591a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    591e:	015b      	lsls	r3, r3, #5
    5920:	4a2c      	ldr	r2, [pc, #176]	; (59d4 <_usb_d_cb_trans_done+0xd4>)
    5922:	4413      	add	r3, r2
    5924:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    5926:	68bb      	ldr	r3, [r7, #8]
    5928:	2b00      	cmp	r3, #0
    592a:	d10e      	bne.n	594a <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    592c:	693b      	ldr	r3, [r7, #16]
    592e:	2200      	movs	r2, #0
    5930:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5932:	693b      	ldr	r3, [r7, #16]
    5934:	781b      	ldrb	r3, [r3, #0]
    5936:	2b00      	cmp	r3, #0
    5938:	d103      	bne.n	5942 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    593a:	6938      	ldr	r0, [r7, #16]
    593c:	4b26      	ldr	r3, [pc, #152]	; (59d8 <_usb_d_cb_trans_done+0xd8>)
    593e:	4798      	blx	r3
			return;
    5940:	e043      	b.n	59ca <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5942:	693b      	ldr	r3, [r7, #16]
    5944:	2201      	movs	r2, #1
    5946:	709a      	strb	r2, [r3, #2]
    5948:	e038      	b.n	59bc <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    594a:	68bb      	ldr	r3, [r7, #8]
    594c:	2b01      	cmp	r3, #1
    594e:	d113      	bne.n	5978 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    5950:	693b      	ldr	r3, [r7, #16]
    5952:	2202      	movs	r2, #2
    5954:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5956:	693b      	ldr	r3, [r7, #16]
    5958:	781b      	ldrb	r3, [r3, #0]
    595a:	2b00      	cmp	r3, #0
    595c:	d108      	bne.n	5970 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    595e:	693b      	ldr	r3, [r7, #16]
    5960:	2202      	movs	r2, #2
    5962:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5964:	7bfb      	ldrb	r3, [r7, #15]
    5966:	2100      	movs	r1, #0
    5968:	4618      	mov	r0, r3
    596a:	4b1c      	ldr	r3, [pc, #112]	; (59dc <_usb_d_cb_trans_done+0xdc>)
    596c:	4798      	blx	r3
    596e:	e025      	b.n	59bc <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    5970:	693b      	ldr	r3, [r7, #16]
    5972:	2205      	movs	r2, #5
    5974:	709a      	strb	r2, [r3, #2]
    5976:	e021      	b.n	59bc <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    5978:	68bb      	ldr	r3, [r7, #8]
    597a:	2b02      	cmp	r3, #2
    597c:	d10e      	bne.n	599c <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    597e:	693b      	ldr	r3, [r7, #16]
    5980:	2204      	movs	r2, #4
    5982:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5984:	693b      	ldr	r3, [r7, #16]
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	2b00      	cmp	r3, #0
    598a:	d103      	bne.n	5994 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    598c:	693b      	ldr	r3, [r7, #16]
    598e:	2202      	movs	r2, #2
    5990:	709a      	strb	r2, [r3, #2]
			return;
    5992:	e01a      	b.n	59ca <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    5994:	693b      	ldr	r3, [r7, #16]
    5996:	2201      	movs	r2, #1
    5998:	709a      	strb	r2, [r3, #2]
    599a:	e00f      	b.n	59bc <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    599c:	68bb      	ldr	r3, [r7, #8]
    599e:	2b03      	cmp	r3, #3
    59a0:	d106      	bne.n	59b0 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    59a2:	693b      	ldr	r3, [r7, #16]
    59a4:	2200      	movs	r2, #0
    59a6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    59a8:	693b      	ldr	r3, [r7, #16]
    59aa:	2205      	movs	r2, #5
    59ac:	70da      	strb	r2, [r3, #3]
    59ae:	e005      	b.n	59bc <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    59b0:	693b      	ldr	r3, [r7, #16]
    59b2:	2206      	movs	r2, #6
    59b4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    59b6:	693b      	ldr	r3, [r7, #16]
    59b8:	2206      	movs	r2, #6
    59ba:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    59bc:	693b      	ldr	r3, [r7, #16]
    59be:	69db      	ldr	r3, [r3, #28]
    59c0:	693a      	ldr	r2, [r7, #16]
    59c2:	78d1      	ldrb	r1, [r2, #3]
    59c4:	687a      	ldr	r2, [r7, #4]
    59c6:	7bf8      	ldrb	r0, [r7, #15]
    59c8:	4798      	blx	r3
}
    59ca:	3718      	adds	r7, #24
    59cc:	46bd      	mov	sp, r7
    59ce:	bd80      	pop	{r7, pc}
    59d0:	00005635 	.word	0x00005635
    59d4:	20002008 	.word	0x20002008
    59d8:	0000583d 	.word	0x0000583d
    59dc:	0000ce9d 	.word	0x0000ce9d

000059e0 <usb_d_init>:

int32_t usb_d_init(void)
{
    59e0:	b580      	push	{r7, lr}
    59e2:	b082      	sub	sp, #8
    59e4:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    59e6:	4b21      	ldr	r3, [pc, #132]	; (5a6c <usb_d_init+0x8c>)
    59e8:	4798      	blx	r3
    59ea:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    59ec:	683b      	ldr	r3, [r7, #0]
    59ee:	2b00      	cmp	r3, #0
    59f0:	da01      	bge.n	59f6 <usb_d_init+0x16>
		return rc;
    59f2:	683b      	ldr	r3, [r7, #0]
    59f4:	e036      	b.n	5a64 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    59f6:	2280      	movs	r2, #128	; 0x80
    59f8:	2100      	movs	r1, #0
    59fa:	481d      	ldr	r0, [pc, #116]	; (5a70 <usb_d_init+0x90>)
    59fc:	4b1d      	ldr	r3, [pc, #116]	; (5a74 <usb_d_init+0x94>)
    59fe:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5a00:	2300      	movs	r3, #0
    5a02:	71fb      	strb	r3, [r7, #7]
    5a04:	e01e      	b.n	5a44 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    5a06:	79fb      	ldrb	r3, [r7, #7]
    5a08:	4a19      	ldr	r2, [pc, #100]	; (5a70 <usb_d_init+0x90>)
    5a0a:	015b      	lsls	r3, r3, #5
    5a0c:	4413      	add	r3, r2
    5a0e:	3301      	adds	r3, #1
    5a10:	22ff      	movs	r2, #255	; 0xff
    5a12:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    5a14:	79fb      	ldrb	r3, [r7, #7]
    5a16:	4a16      	ldr	r2, [pc, #88]	; (5a70 <usb_d_init+0x90>)
    5a18:	015b      	lsls	r3, r3, #5
    5a1a:	4413      	add	r3, r2
    5a1c:	3314      	adds	r3, #20
    5a1e:	4a16      	ldr	r2, [pc, #88]	; (5a78 <usb_d_init+0x98>)
    5a20:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    5a22:	79fb      	ldrb	r3, [r7, #7]
    5a24:	4a12      	ldr	r2, [pc, #72]	; (5a70 <usb_d_init+0x90>)
    5a26:	015b      	lsls	r3, r3, #5
    5a28:	4413      	add	r3, r2
    5a2a:	3318      	adds	r3, #24
    5a2c:	4a12      	ldr	r2, [pc, #72]	; (5a78 <usb_d_init+0x98>)
    5a2e:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    5a30:	79fb      	ldrb	r3, [r7, #7]
    5a32:	4a0f      	ldr	r2, [pc, #60]	; (5a70 <usb_d_init+0x90>)
    5a34:	015b      	lsls	r3, r3, #5
    5a36:	4413      	add	r3, r2
    5a38:	331c      	adds	r3, #28
    5a3a:	4a0f      	ldr	r2, [pc, #60]	; (5a78 <usb_d_init+0x98>)
    5a3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    5a3e:	79fb      	ldrb	r3, [r7, #7]
    5a40:	3301      	adds	r3, #1
    5a42:	71fb      	strb	r3, [r7, #7]
    5a44:	79fb      	ldrb	r3, [r7, #7]
    5a46:	2b03      	cmp	r3, #3
    5a48:	d9dd      	bls.n	5a06 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    5a4a:	490c      	ldr	r1, [pc, #48]	; (5a7c <usb_d_init+0x9c>)
    5a4c:	2000      	movs	r0, #0
    5a4e:	4b0c      	ldr	r3, [pc, #48]	; (5a80 <usb_d_init+0xa0>)
    5a50:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    5a52:	490c      	ldr	r1, [pc, #48]	; (5a84 <usb_d_init+0xa4>)
    5a54:	2001      	movs	r0, #1
    5a56:	4b0a      	ldr	r3, [pc, #40]	; (5a80 <usb_d_init+0xa0>)
    5a58:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    5a5a:	490b      	ldr	r1, [pc, #44]	; (5a88 <usb_d_init+0xa8>)
    5a5c:	2002      	movs	r0, #2
    5a5e:	4b08      	ldr	r3, [pc, #32]	; (5a80 <usb_d_init+0xa0>)
    5a60:	4798      	blx	r3
	return ERR_NONE;
    5a62:	2300      	movs	r3, #0
}
    5a64:	4618      	mov	r0, r3
    5a66:	3708      	adds	r7, #8
    5a68:	46bd      	mov	sp, r7
    5a6a:	bd80      	pop	{r7, pc}
    5a6c:	0000c6e5 	.word	0x0000c6e5
    5a70:	20002008 	.word	0x20002008
    5a74:	00011535 	.word	0x00011535
    5a78:	00005709 	.word	0x00005709
    5a7c:	00005725 	.word	0x00005725
    5a80:	0000d32d 	.word	0x0000d32d
    5a84:	000057ed 	.word	0x000057ed
    5a88:	00005901 	.word	0x00005901

00005a8c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b082      	sub	sp, #8
    5a90:	af00      	add	r7, sp, #0
    5a92:	4603      	mov	r3, r0
    5a94:	6039      	str	r1, [r7, #0]
    5a96:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    5a98:	79fb      	ldrb	r3, [r7, #7]
    5a9a:	6839      	ldr	r1, [r7, #0]
    5a9c:	4618      	mov	r0, r3
    5a9e:	4b03      	ldr	r3, [pc, #12]	; (5aac <usb_d_register_callback+0x20>)
    5aa0:	4798      	blx	r3
}
    5aa2:	bf00      	nop
    5aa4:	3708      	adds	r7, #8
    5aa6:	46bd      	mov	sp, r7
    5aa8:	bd80      	pop	{r7, pc}
    5aaa:	bf00      	nop
    5aac:	0000d2e5 	.word	0x0000d2e5

00005ab0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    5ab0:	b580      	push	{r7, lr}
    5ab2:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    5ab4:	4b02      	ldr	r3, [pc, #8]	; (5ac0 <usb_d_enable+0x10>)
    5ab6:	4798      	blx	r3
    5ab8:	4603      	mov	r3, r0
}
    5aba:	4618      	mov	r0, r3
    5abc:	bd80      	pop	{r7, pc}
    5abe:	bf00      	nop
    5ac0:	0000c7d5 	.word	0x0000c7d5

00005ac4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    5ac8:	4b01      	ldr	r3, [pc, #4]	; (5ad0 <usb_d_attach+0xc>)
    5aca:	4798      	blx	r3
}
    5acc:	bf00      	nop
    5ace:	bd80      	pop	{r7, pc}
    5ad0:	0000c859 	.word	0x0000c859

00005ad4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    5ad4:	b580      	push	{r7, lr}
    5ad6:	b082      	sub	sp, #8
    5ad8:	af00      	add	r7, sp, #0
    5ada:	4603      	mov	r3, r0
    5adc:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    5ade:	79fb      	ldrb	r3, [r7, #7]
    5ae0:	4618      	mov	r0, r3
    5ae2:	4b03      	ldr	r3, [pc, #12]	; (5af0 <usb_d_set_address+0x1c>)
    5ae4:	4798      	blx	r3
}
    5ae6:	bf00      	nop
    5ae8:	3708      	adds	r7, #8
    5aea:	46bd      	mov	sp, r7
    5aec:	bd80      	pop	{r7, pc}
    5aee:	bf00      	nop
    5af0:	0000c86d 	.word	0x0000c86d

00005af4 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    5af4:	b580      	push	{r7, lr}
    5af6:	b082      	sub	sp, #8
    5af8:	af00      	add	r7, sp, #0
    5afa:	4603      	mov	r3, r0
    5afc:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    5afe:	79fb      	ldrb	r3, [r7, #7]
    5b00:	b29b      	uxth	r3, r3
    5b02:	461a      	mov	r2, r3
    5b04:	2100      	movs	r1, #0
    5b06:	2000      	movs	r0, #0
    5b08:	4b03      	ldr	r3, [pc, #12]	; (5b18 <usb_d_ep0_init+0x24>)
    5b0a:	4798      	blx	r3
    5b0c:	4603      	mov	r3, r0
}
    5b0e:	4618      	mov	r0, r3
    5b10:	3708      	adds	r7, #8
    5b12:	46bd      	mov	sp, r7
    5b14:	bd80      	pop	{r7, pc}
    5b16:	bf00      	nop
    5b18:	00005b1d 	.word	0x00005b1d

00005b1c <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b086      	sub	sp, #24
    5b20:	af00      	add	r7, sp, #0
    5b22:	4603      	mov	r3, r0
    5b24:	71fb      	strb	r3, [r7, #7]
    5b26:	460b      	mov	r3, r1
    5b28:	71bb      	strb	r3, [r7, #6]
    5b2a:	4613      	mov	r3, r2
    5b2c:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    5b2e:	79fb      	ldrb	r3, [r7, #7]
    5b30:	4618      	mov	r0, r3
    5b32:	4b1e      	ldr	r3, [pc, #120]	; (5bac <usb_d_ep_init+0x90>)
    5b34:	4798      	blx	r3
    5b36:	4603      	mov	r3, r0
    5b38:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5b3e:	015b      	lsls	r3, r3, #5
    5b40:	4a1b      	ldr	r2, [pc, #108]	; (5bb0 <usb_d_ep_init+0x94>)
    5b42:	4413      	add	r3, r2
    5b44:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    5b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	db02      	blt.n	5b54 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    5b4e:	f06f 0313 	mvn.w	r3, #19
    5b52:	e027      	b.n	5ba4 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    5b54:	20ff      	movs	r0, #255	; 0xff
    5b56:	4b15      	ldr	r3, [pc, #84]	; (5bac <usb_d_ep_init+0x90>)
    5b58:	4798      	blx	r3
    5b5a:	4603      	mov	r3, r0
    5b5c:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    5b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5b62:	2b00      	cmp	r3, #0
    5b64:	da02      	bge.n	5b6c <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    5b66:	f06f 0314 	mvn.w	r3, #20
    5b6a:	e01b      	b.n	5ba4 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    5b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5b70:	015b      	lsls	r3, r3, #5
    5b72:	4a0f      	ldr	r2, [pc, #60]	; (5bb0 <usb_d_ep_init+0x94>)
    5b74:	4413      	add	r3, r2
    5b76:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    5b78:	88ba      	ldrh	r2, [r7, #4]
    5b7a:	79b9      	ldrb	r1, [r7, #6]
    5b7c:	79fb      	ldrb	r3, [r7, #7]
    5b7e:	4618      	mov	r0, r3
    5b80:	4b0c      	ldr	r3, [pc, #48]	; (5bb4 <usb_d_ep_init+0x98>)
    5b82:	4798      	blx	r3
    5b84:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5b86:	68fb      	ldr	r3, [r7, #12]
    5b88:	2b00      	cmp	r3, #0
    5b8a:	da01      	bge.n	5b90 <usb_d_ep_init+0x74>
		return rc;
    5b8c:	68fb      	ldr	r3, [r7, #12]
    5b8e:	e009      	b.n	5ba4 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    5b90:	693b      	ldr	r3, [r7, #16]
    5b92:	79fa      	ldrb	r2, [r7, #7]
    5b94:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    5b96:	79bb      	ldrb	r3, [r7, #6]
    5b98:	f003 0303 	and.w	r3, r3, #3
    5b9c:	b2da      	uxtb	r2, r3
    5b9e:	693b      	ldr	r3, [r7, #16]
    5ba0:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    5ba2:	2300      	movs	r3, #0
}
    5ba4:	4618      	mov	r0, r3
    5ba6:	3718      	adds	r7, #24
    5ba8:	46bd      	mov	sp, r7
    5baa:	bd80      	pop	{r7, pc}
    5bac:	00005635 	.word	0x00005635
    5bb0:	20002008 	.word	0x20002008
    5bb4:	0000c90d 	.word	0x0000c90d

00005bb8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    5bb8:	b580      	push	{r7, lr}
    5bba:	b084      	sub	sp, #16
    5bbc:	af00      	add	r7, sp, #0
    5bbe:	4603      	mov	r3, r0
    5bc0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5bc2:	79fb      	ldrb	r3, [r7, #7]
    5bc4:	4618      	mov	r0, r3
    5bc6:	4b0d      	ldr	r3, [pc, #52]	; (5bfc <usb_d_ep_deinit+0x44>)
    5bc8:	4798      	blx	r3
    5bca:	4603      	mov	r3, r0
    5bcc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5bd2:	015b      	lsls	r3, r3, #5
    5bd4:	4a0a      	ldr	r2, [pc, #40]	; (5c00 <usb_d_ep_deinit+0x48>)
    5bd6:	4413      	add	r3, r2
    5bd8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5bde:	2b00      	cmp	r3, #0
    5be0:	db07      	blt.n	5bf2 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    5be2:	79fb      	ldrb	r3, [r7, #7]
    5be4:	4618      	mov	r0, r3
    5be6:	4b07      	ldr	r3, [pc, #28]	; (5c04 <usb_d_ep_deinit+0x4c>)
    5be8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    5bea:	68bb      	ldr	r3, [r7, #8]
    5bec:	22ff      	movs	r2, #255	; 0xff
    5bee:	705a      	strb	r2, [r3, #1]
    5bf0:	e000      	b.n	5bf4 <usb_d_ep_deinit+0x3c>
		return;
    5bf2:	bf00      	nop
}
    5bf4:	3710      	adds	r7, #16
    5bf6:	46bd      	mov	sp, r7
    5bf8:	bd80      	pop	{r7, pc}
    5bfa:	bf00      	nop
    5bfc:	00005635 	.word	0x00005635
    5c00:	20002008 	.word	0x20002008
    5c04:	0000ca41 	.word	0x0000ca41

00005c08 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	b086      	sub	sp, #24
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	4603      	mov	r3, r0
    5c10:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5c12:	79fb      	ldrb	r3, [r7, #7]
    5c14:	4618      	mov	r0, r3
    5c16:	4b15      	ldr	r3, [pc, #84]	; (5c6c <usb_d_ep_enable+0x64>)
    5c18:	4798      	blx	r3
    5c1a:	4603      	mov	r3, r0
    5c1c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5c22:	015b      	lsls	r3, r3, #5
    5c24:	4a12      	ldr	r2, [pc, #72]	; (5c70 <usb_d_ep_enable+0x68>)
    5c26:	4413      	add	r3, r2
    5c28:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5c2e:	2b00      	cmp	r3, #0
    5c30:	da02      	bge.n	5c38 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    5c32:	f06f 0311 	mvn.w	r3, #17
    5c36:	e014      	b.n	5c62 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    5c38:	693b      	ldr	r3, [r7, #16]
    5c3a:	781b      	ldrb	r3, [r3, #0]
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d101      	bne.n	5c44 <usb_d_ep_enable+0x3c>
    5c40:	2202      	movs	r2, #2
    5c42:	e000      	b.n	5c46 <usb_d_ep_enable+0x3e>
    5c44:	2201      	movs	r2, #1
    5c46:	693b      	ldr	r3, [r7, #16]
    5c48:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    5c4a:	79fb      	ldrb	r3, [r7, #7]
    5c4c:	4618      	mov	r0, r3
    5c4e:	4b09      	ldr	r3, [pc, #36]	; (5c74 <usb_d_ep_enable+0x6c>)
    5c50:	4798      	blx	r3
    5c52:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    5c54:	68fb      	ldr	r3, [r7, #12]
    5c56:	2b00      	cmp	r3, #0
    5c58:	da02      	bge.n	5c60 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    5c5a:	693b      	ldr	r3, [r7, #16]
    5c5c:	2200      	movs	r2, #0
    5c5e:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    5c60:	68fb      	ldr	r3, [r7, #12]
}
    5c62:	4618      	mov	r0, r3
    5c64:	3718      	adds	r7, #24
    5c66:	46bd      	mov	sp, r7
    5c68:	bd80      	pop	{r7, pc}
    5c6a:	bf00      	nop
    5c6c:	00005635 	.word	0x00005635
    5c70:	20002008 	.word	0x20002008
    5c74:	0000cb25 	.word	0x0000cb25

00005c78 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    5c78:	b590      	push	{r4, r7, lr}
    5c7a:	b08d      	sub	sp, #52	; 0x34
    5c7c:	af02      	add	r7, sp, #8
    5c7e:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	7a1b      	ldrb	r3, [r3, #8]
    5c84:	4618      	mov	r0, r3
    5c86:	4b51      	ldr	r3, [pc, #324]	; (5dcc <usb_d_ep_transfer+0x154>)
    5c88:	4798      	blx	r3
    5c8a:	4603      	mov	r3, r0
    5c8c:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    5c8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5c92:	015b      	lsls	r3, r3, #5
    5c94:	4a4e      	ldr	r2, [pc, #312]	; (5dd0 <usb_d_ep_transfer+0x158>)
    5c96:	4413      	add	r3, r2
    5c98:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    5c9a:	687b      	ldr	r3, [r7, #4]
    5c9c:	7a1b      	ldrb	r3, [r3, #8]
    5c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	bf14      	ite	ne
    5ca6:	2301      	movne	r3, #1
    5ca8:	2300      	moveq	r3, #0
    5caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	7a5b      	ldrb	r3, [r3, #9]
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	bf14      	ite	ne
    5cb6:	2301      	movne	r3, #1
    5cb8:	2300      	moveq	r3, #0
    5cba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    5cbe:	687b      	ldr	r3, [r7, #4]
    5cc0:	685b      	ldr	r3, [r3, #4]
    5cc2:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    5cc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	da02      	bge.n	5cd2 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    5ccc:	f06f 0311 	mvn.w	r3, #17
    5cd0:	e077      	b.n	5dc2 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    5cd2:	f107 0308 	add.w	r3, r7, #8
    5cd6:	4618      	mov	r0, r3
    5cd8:	4b3e      	ldr	r3, [pc, #248]	; (5dd4 <usb_d_ep_transfer+0x15c>)
    5cda:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    5cdc:	69bb      	ldr	r3, [r7, #24]
    5cde:	789b      	ldrb	r3, [r3, #2]
    5ce0:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    5ce2:	7bfb      	ldrb	r3, [r7, #15]
    5ce4:	b2db      	uxtb	r3, r3
    5ce6:	2b01      	cmp	r3, #1
    5ce8:	d10c      	bne.n	5d04 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    5cea:	69bb      	ldr	r3, [r7, #24]
    5cec:	2203      	movs	r2, #3
    5cee:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    5cf0:	f107 0308 	add.w	r3, r7, #8
    5cf4:	4618      	mov	r0, r3
    5cf6:	4b38      	ldr	r3, [pc, #224]	; (5dd8 <usb_d_ep_transfer+0x160>)
    5cf8:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    5cfa:	69bb      	ldr	r3, [r7, #24]
    5cfc:	781b      	ldrb	r3, [r3, #0]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d151      	bne.n	5da6 <usb_d_ep_transfer+0x12e>
    5d02:	e017      	b.n	5d34 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    5d04:	f107 0308 	add.w	r3, r7, #8
    5d08:	4618      	mov	r0, r3
    5d0a:	4b33      	ldr	r3, [pc, #204]	; (5dd8 <usb_d_ep_transfer+0x160>)
    5d0c:	4798      	blx	r3
		switch (state) {
    5d0e:	7bfb      	ldrb	r3, [r7, #15]
    5d10:	b2db      	uxtb	r3, r3
    5d12:	2b05      	cmp	r3, #5
    5d14:	d004      	beq.n	5d20 <usb_d_ep_transfer+0xa8>
    5d16:	2b06      	cmp	r3, #6
    5d18:	d004      	beq.n	5d24 <usb_d_ep_transfer+0xac>
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d005      	beq.n	5d2a <usb_d_ep_transfer+0xb2>
    5d1e:	e007      	b.n	5d30 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    5d20:	2302      	movs	r3, #2
    5d22:	e04e      	b.n	5dc2 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    5d24:	f06f 030f 	mvn.w	r3, #15
    5d28:	e04b      	b.n	5dc2 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    5d2a:	f06f 0312 	mvn.w	r3, #18
    5d2e:	e048      	b.n	5dc2 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    5d30:	2301      	movs	r3, #1
    5d32:	e046      	b.n	5dc2 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    5d34:	69bb      	ldr	r3, [r7, #24]
    5d36:	7c9b      	ldrb	r3, [r3, #18]
    5d38:	b29a      	uxth	r2, r3
    5d3a:	69bb      	ldr	r3, [r7, #24]
    5d3c:	7cdb      	ldrb	r3, [r3, #19]
    5d3e:	b29b      	uxth	r3, r3
    5d40:	021b      	lsls	r3, r3, #8
    5d42:	b29b      	uxth	r3, r3
    5d44:	4413      	add	r3, r2
    5d46:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    5d48:	8afb      	ldrh	r3, [r7, #22]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d10b      	bne.n	5d66 <usb_d_ep_transfer+0xee>
			dir                 = true;
    5d4e:	2301      	movs	r3, #1
    5d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    5d54:	2300      	movs	r3, #0
    5d56:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    5d58:	2301      	movs	r3, #1
    5d5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    5d5e:	69bb      	ldr	r3, [r7, #24]
    5d60:	2204      	movs	r2, #4
    5d62:	709a      	strb	r2, [r3, #2]
    5d64:	e01f      	b.n	5da6 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    5d66:	69bb      	ldr	r3, [r7, #24]
    5d68:	7b1b      	ldrb	r3, [r3, #12]
    5d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5d6e:	2b00      	cmp	r3, #0
    5d70:	bf14      	ite	ne
    5d72:	2301      	movne	r3, #1
    5d74:	2300      	moveq	r3, #0
    5d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    5d7a:	8afa      	ldrh	r2, [r7, #22]
    5d7c:	6a3b      	ldr	r3, [r7, #32]
    5d7e:	429a      	cmp	r2, r3
    5d80:	d201      	bcs.n	5d86 <usb_d_ep_transfer+0x10e>
				len = req_len;
    5d82:	8afb      	ldrh	r3, [r7, #22]
    5d84:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    5d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d008      	beq.n	5da0 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    5d8e:	8afa      	ldrh	r2, [r7, #22]
    5d90:	6a3b      	ldr	r3, [r7, #32]
    5d92:	429a      	cmp	r2, r3
    5d94:	bf8c      	ite	hi
    5d96:	2301      	movhi	r3, #1
    5d98:	2300      	movls	r3, #0
    5d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    5d9e:	e002      	b.n	5da6 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    5da0:	2300      	movs	r3, #0
    5da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	7a18      	ldrb	r0, [r3, #8]
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	681a      	ldr	r2, [r3, #0]
    5dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    5db2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    5db6:	9300      	str	r3, [sp, #0]
    5db8:	6a3b      	ldr	r3, [r7, #32]
    5dba:	4c08      	ldr	r4, [pc, #32]	; (5ddc <usb_d_ep_transfer+0x164>)
    5dbc:	47a0      	blx	r4
    5dbe:	6138      	str	r0, [r7, #16]
	return rc;
    5dc0:	693b      	ldr	r3, [r7, #16]
}
    5dc2:	4618      	mov	r0, r3
    5dc4:	372c      	adds	r7, #44	; 0x2c
    5dc6:	46bd      	mov	sp, r7
    5dc8:	bd90      	pop	{r4, r7, pc}
    5dca:	bf00      	nop
    5dcc:	00005635 	.word	0x00005635
    5dd0:	20002008 	.word	0x20002008
    5dd4:	00003fa5 	.word	0x00003fa5
    5dd8:	00003fcb 	.word	0x00003fcb
    5ddc:	000056b5 	.word	0x000056b5

00005de0 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
    5de6:	4603      	mov	r3, r0
    5de8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5dea:	79fb      	ldrb	r3, [r7, #7]
    5dec:	4618      	mov	r0, r3
    5dee:	4b0e      	ldr	r3, [pc, #56]	; (5e28 <usb_d_ep_abort+0x48>)
    5df0:	4798      	blx	r3
    5df2:	4603      	mov	r3, r0
    5df4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5dfa:	015b      	lsls	r3, r3, #5
    5dfc:	4a0b      	ldr	r2, [pc, #44]	; (5e2c <usb_d_ep_abort+0x4c>)
    5dfe:	4413      	add	r3, r2
    5e00:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    5e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5e06:	2b00      	cmp	r3, #0
    5e08:	db0a      	blt.n	5e20 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    5e0a:	79fb      	ldrb	r3, [r7, #7]
    5e0c:	4618      	mov	r0, r3
    5e0e:	4b08      	ldr	r3, [pc, #32]	; (5e30 <usb_d_ep_abort+0x50>)
    5e10:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5e12:	68bb      	ldr	r3, [r7, #8]
    5e14:	2201      	movs	r2, #1
    5e16:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    5e18:	68bb      	ldr	r3, [r7, #8]
    5e1a:	2204      	movs	r2, #4
    5e1c:	70da      	strb	r2, [r3, #3]
    5e1e:	e000      	b.n	5e22 <usb_d_ep_abort+0x42>
		return;
    5e20:	bf00      	nop
}
    5e22:	3710      	adds	r7, #16
    5e24:	46bd      	mov	sp, r7
    5e26:	bd80      	pop	{r7, pc}
    5e28:	00005635 	.word	0x00005635
    5e2c:	20002008 	.word	0x20002008
    5e30:	0000d291 	.word	0x0000d291

00005e34 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    5e34:	b580      	push	{r7, lr}
    5e36:	b086      	sub	sp, #24
    5e38:	af00      	add	r7, sp, #0
    5e3a:	4603      	mov	r3, r0
    5e3c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5e3e:	79fb      	ldrb	r3, [r7, #7]
    5e40:	4618      	mov	r0, r3
    5e42:	4b1a      	ldr	r3, [pc, #104]	; (5eac <_usb_d_ep_halt_clr+0x78>)
    5e44:	4798      	blx	r3
    5e46:	4603      	mov	r3, r0
    5e48:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e4e:	015b      	lsls	r3, r3, #5
    5e50:	4a17      	ldr	r2, [pc, #92]	; (5eb0 <_usb_d_ep_halt_clr+0x7c>)
    5e52:	4413      	add	r3, r2
    5e54:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    5e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	da02      	bge.n	5e64 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    5e5e:	f06f 0311 	mvn.w	r3, #17
    5e62:	e01f      	b.n	5ea4 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    5e64:	79fb      	ldrb	r3, [r7, #7]
    5e66:	2102      	movs	r1, #2
    5e68:	4618      	mov	r0, r3
    5e6a:	4b12      	ldr	r3, [pc, #72]	; (5eb4 <_usb_d_ep_halt_clr+0x80>)
    5e6c:	4798      	blx	r3
    5e6e:	4603      	mov	r3, r0
    5e70:	2b00      	cmp	r3, #0
    5e72:	d016      	beq.n	5ea2 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    5e74:	79fb      	ldrb	r3, [r7, #7]
    5e76:	2100      	movs	r1, #0
    5e78:	4618      	mov	r0, r3
    5e7a:	4b0e      	ldr	r3, [pc, #56]	; (5eb4 <_usb_d_ep_halt_clr+0x80>)
    5e7c:	4798      	blx	r3
    5e7e:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    5e80:	68fb      	ldr	r3, [r7, #12]
    5e82:	2b00      	cmp	r3, #0
    5e84:	da01      	bge.n	5e8a <_usb_d_ep_halt_clr+0x56>
			return rc;
    5e86:	68fb      	ldr	r3, [r7, #12]
    5e88:	e00c      	b.n	5ea4 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    5e8a:	693b      	ldr	r3, [r7, #16]
    5e8c:	2201      	movs	r2, #1
    5e8e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    5e90:	693b      	ldr	r3, [r7, #16]
    5e92:	2203      	movs	r2, #3
    5e94:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    5e96:	693b      	ldr	r3, [r7, #16]
    5e98:	69db      	ldr	r3, [r3, #28]
    5e9a:	79f8      	ldrb	r0, [r7, #7]
    5e9c:	2200      	movs	r2, #0
    5e9e:	2103      	movs	r1, #3
    5ea0:	4798      	blx	r3
	}
	return ERR_NONE;
    5ea2:	2300      	movs	r3, #0
}
    5ea4:	4618      	mov	r0, r3
    5ea6:	3718      	adds	r7, #24
    5ea8:	46bd      	mov	sp, r7
    5eaa:	bd80      	pop	{r7, pc}
    5eac:	00005635 	.word	0x00005635
    5eb0:	20002008 	.word	0x20002008
    5eb4:	0000ce9d 	.word	0x0000ce9d

00005eb8 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    5eb8:	b580      	push	{r7, lr}
    5eba:	b082      	sub	sp, #8
    5ebc:	af00      	add	r7, sp, #0
    5ebe:	4603      	mov	r3, r0
    5ec0:	460a      	mov	r2, r1
    5ec2:	71fb      	strb	r3, [r7, #7]
    5ec4:	4613      	mov	r3, r2
    5ec6:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    5ec8:	79bb      	ldrb	r3, [r7, #6]
    5eca:	2b00      	cmp	r3, #0
    5ecc:	d105      	bne.n	5eda <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    5ece:	79fb      	ldrb	r3, [r7, #7]
    5ed0:	4618      	mov	r0, r3
    5ed2:	4b0c      	ldr	r3, [pc, #48]	; (5f04 <usb_d_ep_halt+0x4c>)
    5ed4:	4798      	blx	r3
    5ed6:	4603      	mov	r3, r0
    5ed8:	e00f      	b.n	5efa <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    5eda:	79bb      	ldrb	r3, [r7, #6]
    5edc:	2b01      	cmp	r3, #1
    5ede:	d106      	bne.n	5eee <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    5ee0:	79fb      	ldrb	r3, [r7, #7]
    5ee2:	2101      	movs	r1, #1
    5ee4:	4618      	mov	r0, r3
    5ee6:	4b08      	ldr	r3, [pc, #32]	; (5f08 <usb_d_ep_halt+0x50>)
    5ee8:	4798      	blx	r3
    5eea:	4603      	mov	r3, r0
    5eec:	e005      	b.n	5efa <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    5eee:	79fb      	ldrb	r3, [r7, #7]
    5ef0:	2102      	movs	r1, #2
    5ef2:	4618      	mov	r0, r3
    5ef4:	4b04      	ldr	r3, [pc, #16]	; (5f08 <usb_d_ep_halt+0x50>)
    5ef6:	4798      	blx	r3
    5ef8:	4603      	mov	r3, r0
	}
}
    5efa:	4618      	mov	r0, r3
    5efc:	3708      	adds	r7, #8
    5efe:	46bd      	mov	sp, r7
    5f00:	bd80      	pop	{r7, pc}
    5f02:	bf00      	nop
    5f04:	00005e35 	.word	0x00005e35
    5f08:	0000ce9d 	.word	0x0000ce9d

00005f0c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    5f0c:	b580      	push	{r7, lr}
    5f0e:	b086      	sub	sp, #24
    5f10:	af00      	add	r7, sp, #0
    5f12:	4603      	mov	r3, r0
    5f14:	603a      	str	r2, [r7, #0]
    5f16:	71fb      	strb	r3, [r7, #7]
    5f18:	460b      	mov	r3, r1
    5f1a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    5f1c:	79fb      	ldrb	r3, [r7, #7]
    5f1e:	4618      	mov	r0, r3
    5f20:	4b16      	ldr	r3, [pc, #88]	; (5f7c <usb_d_ep_register_callback+0x70>)
    5f22:	4798      	blx	r3
    5f24:	4603      	mov	r3, r0
    5f26:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    5f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5f2c:	015b      	lsls	r3, r3, #5
    5f2e:	4a14      	ldr	r2, [pc, #80]	; (5f80 <usb_d_ep_register_callback+0x74>)
    5f30:	4413      	add	r3, r2
    5f32:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    5f34:	683b      	ldr	r3, [r7, #0]
    5f36:	2b00      	cmp	r3, #0
    5f38:	d001      	beq.n	5f3e <usb_d_ep_register_callback+0x32>
    5f3a:	683b      	ldr	r3, [r7, #0]
    5f3c:	e000      	b.n	5f40 <usb_d_ep_register_callback+0x34>
    5f3e:	4b11      	ldr	r3, [pc, #68]	; (5f84 <usb_d_ep_register_callback+0x78>)
    5f40:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    5f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
    5f46:	2b00      	cmp	r3, #0
    5f48:	db13      	blt.n	5f72 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    5f4a:	79bb      	ldrb	r3, [r7, #6]
    5f4c:	2b01      	cmp	r3, #1
    5f4e:	d008      	beq.n	5f62 <usb_d_ep_register_callback+0x56>
    5f50:	2b02      	cmp	r3, #2
    5f52:	d00a      	beq.n	5f6a <usb_d_ep_register_callback+0x5e>
    5f54:	2b00      	cmp	r3, #0
    5f56:	d000      	beq.n	5f5a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    5f58:	e00c      	b.n	5f74 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    5f5a:	693b      	ldr	r3, [r7, #16]
    5f5c:	68fa      	ldr	r2, [r7, #12]
    5f5e:	615a      	str	r2, [r3, #20]
		break;
    5f60:	e008      	b.n	5f74 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    5f62:	693b      	ldr	r3, [r7, #16]
    5f64:	68fa      	ldr	r2, [r7, #12]
    5f66:	619a      	str	r2, [r3, #24]
		break;
    5f68:	e004      	b.n	5f74 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    5f6a:	693b      	ldr	r3, [r7, #16]
    5f6c:	68fa      	ldr	r2, [r7, #12]
    5f6e:	61da      	str	r2, [r3, #28]
		break;
    5f70:	e000      	b.n	5f74 <usb_d_ep_register_callback+0x68>
		return;
    5f72:	bf00      	nop
	}
}
    5f74:	3718      	adds	r7, #24
    5f76:	46bd      	mov	sp, r7
    5f78:	bd80      	pop	{r7, pc}
    5f7a:	bf00      	nop
    5f7c:	00005635 	.word	0x00005635
    5f80:	20002008 	.word	0x20002008
    5f84:	00005709 	.word	0x00005709

00005f88 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    5f88:	b480      	push	{r7}
    5f8a:	b085      	sub	sp, #20
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	4603      	mov	r3, r0
    5f90:	60b9      	str	r1, [r7, #8]
    5f92:	607a      	str	r2, [r7, #4]
    5f94:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    5f96:	7bfb      	ldrb	r3, [r7, #15]
    5f98:	f083 0301 	eor.w	r3, r3, #1
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d000      	beq.n	5fa4 <assert+0x1c>
		__asm("BKPT #0");
    5fa2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    5fa4:	bf00      	nop
    5fa6:	3714      	adds	r7, #20
    5fa8:	46bd      	mov	sp, r7
    5faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fae:	4770      	bx	lr

00005fb0 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    5fb0:	b480      	push	{r7}
    5fb2:	b085      	sub	sp, #20
    5fb4:	af00      	add	r7, sp, #0
    5fb6:	6078      	str	r0, [r7, #4]
    5fb8:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	60fb      	str	r3, [r7, #12]
    5fc0:	e008      	b.n	5fd4 <is_list_element+0x24>
		if (it == element) {
    5fc2:	68fa      	ldr	r2, [r7, #12]
    5fc4:	683b      	ldr	r3, [r7, #0]
    5fc6:	429a      	cmp	r2, r3
    5fc8:	d101      	bne.n	5fce <is_list_element+0x1e>
			return true;
    5fca:	2301      	movs	r3, #1
    5fcc:	e006      	b.n	5fdc <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    5fce:	68fb      	ldr	r3, [r7, #12]
    5fd0:	681b      	ldr	r3, [r3, #0]
    5fd2:	60fb      	str	r3, [r7, #12]
    5fd4:	68fb      	ldr	r3, [r7, #12]
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d1f3      	bne.n	5fc2 <is_list_element+0x12>
		}
	}

	return false;
    5fda:	2300      	movs	r3, #0
}
    5fdc:	4618      	mov	r0, r3
    5fde:	3714      	adds	r7, #20
    5fe0:	46bd      	mov	sp, r7
    5fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fe6:	4770      	bx	lr

00005fe8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    5fe8:	b580      	push	{r7, lr}
    5fea:	b082      	sub	sp, #8
    5fec:	af00      	add	r7, sp, #0
    5fee:	6078      	str	r0, [r7, #4]
    5ff0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    5ff2:	6839      	ldr	r1, [r7, #0]
    5ff4:	6878      	ldr	r0, [r7, #4]
    5ff6:	4b0f      	ldr	r3, [pc, #60]	; (6034 <list_insert_as_head+0x4c>)
    5ff8:	4798      	blx	r3
    5ffa:	4603      	mov	r3, r0
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	bf14      	ite	ne
    6000:	2301      	movne	r3, #1
    6002:	2300      	moveq	r3, #0
    6004:	b2db      	uxtb	r3, r3
    6006:	f083 0301 	eor.w	r3, r3, #1
    600a:	b2db      	uxtb	r3, r3
    600c:	f003 0301 	and.w	r3, r3, #1
    6010:	b2db      	uxtb	r3, r3
    6012:	2239      	movs	r2, #57	; 0x39
    6014:	4908      	ldr	r1, [pc, #32]	; (6038 <list_insert_as_head+0x50>)
    6016:	4618      	mov	r0, r3
    6018:	4b08      	ldr	r3, [pc, #32]	; (603c <list_insert_as_head+0x54>)
    601a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	681a      	ldr	r2, [r3, #0]
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    6024:	687b      	ldr	r3, [r7, #4]
    6026:	683a      	ldr	r2, [r7, #0]
    6028:	601a      	str	r2, [r3, #0]
}
    602a:	bf00      	nop
    602c:	3708      	adds	r7, #8
    602e:	46bd      	mov	sp, r7
    6030:	bd80      	pop	{r7, pc}
    6032:	bf00      	nop
    6034:	00005fb1 	.word	0x00005fb1
    6038:	000126d8 	.word	0x000126d8
    603c:	00005f89 	.word	0x00005f89

00006040 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    6040:	b480      	push	{r7}
    6042:	b083      	sub	sp, #12
    6044:	af00      	add	r7, sp, #0
    6046:	6078      	str	r0, [r7, #4]
    6048:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	681a      	ldr	r2, [r3, #0]
    604e:	683b      	ldr	r3, [r7, #0]
    6050:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	683a      	ldr	r2, [r7, #0]
    6056:	601a      	str	r2, [r3, #0]
}
    6058:	bf00      	nop
    605a:	370c      	adds	r7, #12
    605c:	46bd      	mov	sp, r7
    605e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6062:	4770      	bx	lr

00006064 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    6064:	b580      	push	{r7, lr}
    6066:	b084      	sub	sp, #16
    6068:	af00      	add	r7, sp, #0
    606a:	6078      	str	r0, [r7, #4]
    606c:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	681b      	ldr	r3, [r3, #0]
    6072:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    6074:	6839      	ldr	r1, [r7, #0]
    6076:	6878      	ldr	r0, [r7, #4]
    6078:	4b16      	ldr	r3, [pc, #88]	; (60d4 <list_insert_at_end+0x70>)
    607a:	4798      	blx	r3
    607c:	4603      	mov	r3, r0
    607e:	2b00      	cmp	r3, #0
    6080:	bf14      	ite	ne
    6082:	2301      	movne	r3, #1
    6084:	2300      	moveq	r3, #0
    6086:	b2db      	uxtb	r3, r3
    6088:	f083 0301 	eor.w	r3, r3, #1
    608c:	b2db      	uxtb	r3, r3
    608e:	f003 0301 	and.w	r3, r3, #1
    6092:	b2db      	uxtb	r3, r3
    6094:	224f      	movs	r2, #79	; 0x4f
    6096:	4910      	ldr	r1, [pc, #64]	; (60d8 <list_insert_at_end+0x74>)
    6098:	4618      	mov	r0, r3
    609a:	4b10      	ldr	r3, [pc, #64]	; (60dc <list_insert_at_end+0x78>)
    609c:	4798      	blx	r3

	if (!list->head) {
    609e:	687b      	ldr	r3, [r7, #4]
    60a0:	681b      	ldr	r3, [r3, #0]
    60a2:	2b00      	cmp	r3, #0
    60a4:	d109      	bne.n	60ba <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    60a6:	687b      	ldr	r3, [r7, #4]
    60a8:	683a      	ldr	r2, [r7, #0]
    60aa:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    60ac:	683b      	ldr	r3, [r7, #0]
    60ae:	2200      	movs	r2, #0
    60b0:	601a      	str	r2, [r3, #0]
		return;
    60b2:	e00c      	b.n	60ce <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    60b4:	68fb      	ldr	r3, [r7, #12]
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    60ba:	68fb      	ldr	r3, [r7, #12]
    60bc:	681b      	ldr	r3, [r3, #0]
    60be:	2b00      	cmp	r3, #0
    60c0:	d1f8      	bne.n	60b4 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    60c2:	68fb      	ldr	r3, [r7, #12]
    60c4:	683a      	ldr	r2, [r7, #0]
    60c6:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    60c8:	683b      	ldr	r3, [r7, #0]
    60ca:	2200      	movs	r2, #0
    60cc:	601a      	str	r2, [r3, #0]
}
    60ce:	3710      	adds	r7, #16
    60d0:	46bd      	mov	sp, r7
    60d2:	bd80      	pop	{r7, pc}
    60d4:	00005fb1 	.word	0x00005fb1
    60d8:	000126d8 	.word	0x000126d8
    60dc:	00005f89 	.word	0x00005f89

000060e0 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    60e0:	b480      	push	{r7}
    60e2:	b085      	sub	sp, #20
    60e4:	af00      	add	r7, sp, #0
    60e6:	6078      	str	r0, [r7, #4]
	if (list->head) {
    60e8:	687b      	ldr	r3, [r7, #4]
    60ea:	681b      	ldr	r3, [r3, #0]
    60ec:	2b00      	cmp	r3, #0
    60ee:	d009      	beq.n	6104 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    60f0:	687b      	ldr	r3, [r7, #4]
    60f2:	681b      	ldr	r3, [r3, #0]
    60f4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	681b      	ldr	r3, [r3, #0]
    60fa:	681a      	ldr	r2, [r3, #0]
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    6100:	68fb      	ldr	r3, [r7, #12]
    6102:	e000      	b.n	6106 <list_remove_head+0x26>
	}

	return NULL;
    6104:	2300      	movs	r3, #0
}
    6106:	4618      	mov	r0, r3
    6108:	3714      	adds	r7, #20
    610a:	46bd      	mov	sp, r7
    610c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6110:	4770      	bx	lr

00006112 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    6112:	b480      	push	{r7}
    6114:	b085      	sub	sp, #20
    6116:	af00      	add	r7, sp, #0
    6118:	6078      	str	r0, [r7, #4]
    611a:	6039      	str	r1, [r7, #0]
	if (!element) {
    611c:	683b      	ldr	r3, [r7, #0]
    611e:	2b00      	cmp	r3, #0
    6120:	d101      	bne.n	6126 <list_delete_element+0x14>
		return false;
    6122:	2300      	movs	r3, #0
    6124:	e024      	b.n	6170 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    6126:	687b      	ldr	r3, [r7, #4]
    6128:	681a      	ldr	r2, [r3, #0]
    612a:	683b      	ldr	r3, [r7, #0]
    612c:	429a      	cmp	r2, r3
    612e:	d106      	bne.n	613e <list_delete_element+0x2c>
		list->head = list->head->next;
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	681b      	ldr	r3, [r3, #0]
    6134:	681a      	ldr	r2, [r3, #0]
    6136:	687b      	ldr	r3, [r7, #4]
    6138:	601a      	str	r2, [r3, #0]
		return true;
    613a:	2301      	movs	r3, #1
    613c:	e018      	b.n	6170 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    613e:	687b      	ldr	r3, [r7, #4]
    6140:	681b      	ldr	r3, [r3, #0]
    6142:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    6144:	e002      	b.n	614c <list_delete_element+0x3a>
			it = it->next;
    6146:	68fb      	ldr	r3, [r7, #12]
    6148:	681b      	ldr	r3, [r3, #0]
    614a:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    614c:	68fb      	ldr	r3, [r7, #12]
    614e:	2b00      	cmp	r3, #0
    6150:	d004      	beq.n	615c <list_delete_element+0x4a>
    6152:	68fb      	ldr	r3, [r7, #12]
    6154:	681a      	ldr	r2, [r3, #0]
    6156:	683b      	ldr	r3, [r7, #0]
    6158:	429a      	cmp	r2, r3
    615a:	d1f4      	bne.n	6146 <list_delete_element+0x34>
		}
		if (it) {
    615c:	68fb      	ldr	r3, [r7, #12]
    615e:	2b00      	cmp	r3, #0
    6160:	d005      	beq.n	616e <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    6162:	683b      	ldr	r3, [r7, #0]
    6164:	681a      	ldr	r2, [r3, #0]
    6166:	68fb      	ldr	r3, [r7, #12]
    6168:	601a      	str	r2, [r3, #0]
			return true;
    616a:	2301      	movs	r3, #1
    616c:	e000      	b.n	6170 <list_delete_element+0x5e>
		}
	}

	return false;
    616e:	2300      	movs	r3, #0
}
    6170:	4618      	mov	r0, r3
    6172:	3714      	adds	r7, #20
    6174:	46bd      	mov	sp, r7
    6176:	f85d 7b04 	ldr.w	r7, [sp], #4
    617a:	4770      	bx	lr

0000617c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    617c:	b480      	push	{r7}
    617e:	b083      	sub	sp, #12
    6180:	af00      	add	r7, sp, #0
    6182:	4603      	mov	r3, r0
    6184:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    618a:	2b00      	cmp	r3, #0
    618c:	db0b      	blt.n	61a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    618e:	4909      	ldr	r1, [pc, #36]	; (61b4 <__NVIC_EnableIRQ+0x38>)
    6190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6194:	095b      	lsrs	r3, r3, #5
    6196:	88fa      	ldrh	r2, [r7, #6]
    6198:	f002 021f 	and.w	r2, r2, #31
    619c:	2001      	movs	r0, #1
    619e:	fa00 f202 	lsl.w	r2, r0, r2
    61a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    61a6:	bf00      	nop
    61a8:	370c      	adds	r7, #12
    61aa:	46bd      	mov	sp, r7
    61ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    61b0:	4770      	bx	lr
    61b2:	bf00      	nop
    61b4:	e000e100 	.word	0xe000e100

000061b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    61b8:	b480      	push	{r7}
    61ba:	b083      	sub	sp, #12
    61bc:	af00      	add	r7, sp, #0
    61be:	4603      	mov	r3, r0
    61c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    61c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61c6:	2b00      	cmp	r3, #0
    61c8:	db10      	blt.n	61ec <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    61ca:	490b      	ldr	r1, [pc, #44]	; (61f8 <__NVIC_DisableIRQ+0x40>)
    61cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61d0:	095b      	lsrs	r3, r3, #5
    61d2:	88fa      	ldrh	r2, [r7, #6]
    61d4:	f002 021f 	and.w	r2, r2, #31
    61d8:	2001      	movs	r0, #1
    61da:	fa00 f202 	lsl.w	r2, r0, r2
    61de:	3320      	adds	r3, #32
    61e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    61e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    61e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    61ec:	bf00      	nop
    61ee:	370c      	adds	r7, #12
    61f0:	46bd      	mov	sp, r7
    61f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    61f6:	4770      	bx	lr
    61f8:	e000e100 	.word	0xe000e100

000061fc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    61fc:	b480      	push	{r7}
    61fe:	b083      	sub	sp, #12
    6200:	af00      	add	r7, sp, #0
    6202:	4603      	mov	r3, r0
    6204:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    620a:	2b00      	cmp	r3, #0
    620c:	db0c      	blt.n	6228 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    620e:	4909      	ldr	r1, [pc, #36]	; (6234 <__NVIC_ClearPendingIRQ+0x38>)
    6210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6214:	095b      	lsrs	r3, r3, #5
    6216:	88fa      	ldrh	r2, [r7, #6]
    6218:	f002 021f 	and.w	r2, r2, #31
    621c:	2001      	movs	r0, #1
    621e:	fa00 f202 	lsl.w	r2, r0, r2
    6222:	3360      	adds	r3, #96	; 0x60
    6224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    6228:	bf00      	nop
    622a:	370c      	adds	r7, #12
    622c:	46bd      	mov	sp, r7
    622e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6232:	4770      	bx	lr
    6234:	e000e100 	.word	0xe000e100

00006238 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    6238:	b480      	push	{r7}
    623a:	b083      	sub	sp, #12
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6244:	095b      	lsrs	r3, r3, #5
    6246:	f003 0301 	and.w	r3, r3, #1
    624a:	2b00      	cmp	r3, #0
    624c:	bf14      	ite	ne
    624e:	2301      	movne	r3, #1
    6250:	2300      	moveq	r3, #0
    6252:	b2db      	uxtb	r3, r3
}
    6254:	4618      	mov	r0, r3
    6256:	370c      	adds	r7, #12
    6258:	46bd      	mov	sp, r7
    625a:	f85d 7b04 	ldr.w	r7, [sp], #4
    625e:	4770      	bx	lr

00006260 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    6260:	b480      	push	{r7}
    6262:	b083      	sub	sp, #12
    6264:	af00      	add	r7, sp, #0
    6266:	6078      	str	r0, [r7, #4]
    6268:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	683a      	ldr	r2, [r7, #0]
    626e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6270:	bf00      	nop
    6272:	370c      	adds	r7, #12
    6274:	46bd      	mov	sp, r7
    6276:	f85d 7b04 	ldr.w	r7, [sp], #4
    627a:	4770      	bx	lr

0000627c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    627c:	b480      	push	{r7}
    627e:	b083      	sub	sp, #12
    6280:	af00      	add	r7, sp, #0
    6282:	6078      	str	r0, [r7, #4]
    6284:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	683a      	ldr	r2, [r7, #0]
    628a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    628c:	bf00      	nop
    628e:	370c      	adds	r7, #12
    6290:	46bd      	mov	sp, r7
    6292:	f85d 7b04 	ldr.w	r7, [sp], #4
    6296:	4770      	bx	lr

00006298 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    6298:	b480      	push	{r7}
    629a:	b083      	sub	sp, #12
    629c:	af00      	add	r7, sp, #0
    629e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	699b      	ldr	r3, [r3, #24]
    62a4:	f043 0201 	orr.w	r2, r3, #1
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    62ac:	bf00      	nop
    62ae:	370c      	adds	r7, #12
    62b0:	46bd      	mov	sp, r7
    62b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b6:	4770      	bx	lr

000062b8 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    62b8:	b480      	push	{r7}
    62ba:	b085      	sub	sp, #20
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	699b      	ldr	r3, [r3, #24]
    62c4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    62c6:	68fb      	ldr	r3, [r7, #12]
    62c8:	f003 0301 	and.w	r3, r3, #1
    62cc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    62ce:	68fb      	ldr	r3, [r7, #12]
    62d0:	2b00      	cmp	r3, #0
    62d2:	bf14      	ite	ne
    62d4:	2301      	movne	r3, #1
    62d6:	2300      	moveq	r3, #0
    62d8:	b2db      	uxtb	r3, r3
}
    62da:	4618      	mov	r0, r3
    62dc:	3714      	adds	r7, #20
    62de:	46bd      	mov	sp, r7
    62e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    62e4:	4770      	bx	lr

000062e6 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    62e6:	b480      	push	{r7}
    62e8:	b083      	sub	sp, #12
    62ea:	af00      	add	r7, sp, #0
    62ec:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    62ee:	687b      	ldr	r3, [r7, #4]
    62f0:	699b      	ldr	r3, [r3, #24]
    62f2:	f023 0201 	bic.w	r2, r3, #1
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    62fa:	bf00      	nop
    62fc:	370c      	adds	r7, #12
    62fe:	46bd      	mov	sp, r7
    6300:	f85d 7b04 	ldr.w	r7, [sp], #4
    6304:	4770      	bx	lr

00006306 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    6306:	b480      	push	{r7}
    6308:	b083      	sub	sp, #12
    630a:	af00      	add	r7, sp, #0
    630c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	699b      	ldr	r3, [r3, #24]
    6312:	f043 0202 	orr.w	r2, r3, #2
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    631a:	bf00      	nop
    631c:	370c      	adds	r7, #12
    631e:	46bd      	mov	sp, r7
    6320:	f85d 7b04 	ldr.w	r7, [sp], #4
    6324:	4770      	bx	lr

00006326 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    6326:	b480      	push	{r7}
    6328:	b083      	sub	sp, #12
    632a:	af00      	add	r7, sp, #0
    632c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    632e:	687b      	ldr	r3, [r7, #4]
    6330:	699b      	ldr	r3, [r3, #24]
    6332:	f023 0202 	bic.w	r2, r3, #2
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    633a:	bf00      	nop
    633c:	370c      	adds	r7, #12
    633e:	46bd      	mov	sp, r7
    6340:	f85d 7b04 	ldr.w	r7, [sp], #4
    6344:	4770      	bx	lr

00006346 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    6346:	b480      	push	{r7}
    6348:	b083      	sub	sp, #12
    634a:	af00      	add	r7, sp, #0
    634c:	6078      	str	r0, [r7, #4]
    634e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    6350:	687b      	ldr	r3, [r7, #4]
    6352:	699a      	ldr	r2, [r3, #24]
    6354:	683b      	ldr	r3, [r7, #0]
    6356:	431a      	orrs	r2, r3
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    635c:	bf00      	nop
    635e:	370c      	adds	r7, #12
    6360:	46bd      	mov	sp, r7
    6362:	f85d 7b04 	ldr.w	r7, [sp], #4
    6366:	4770      	bx	lr

00006368 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    6368:	b480      	push	{r7}
    636a:	b083      	sub	sp, #12
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
    6370:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    6372:	687b      	ldr	r3, [r7, #4]
    6374:	683a      	ldr	r2, [r7, #0]
    6376:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    6378:	bf00      	nop
    637a:	370c      	adds	r7, #12
    637c:	46bd      	mov	sp, r7
    637e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6382:	4770      	bx	lr

00006384 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    6384:	b480      	push	{r7}
    6386:	b083      	sub	sp, #12
    6388:	af00      	add	r7, sp, #0
    638a:	6078      	str	r0, [r7, #4]
    638c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	683a      	ldr	r2, [r7, #0]
    6392:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    6394:	bf00      	nop
    6396:	370c      	adds	r7, #12
    6398:	46bd      	mov	sp, r7
    639a:	f85d 7b04 	ldr.w	r7, [sp], #4
    639e:	4770      	bx	lr

000063a0 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    63a0:	b480      	push	{r7}
    63a2:	b083      	sub	sp, #12
    63a4:	af00      	add	r7, sp, #0
    63a6:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    63ac:	4618      	mov	r0, r3
    63ae:	370c      	adds	r7, #12
    63b0:	46bd      	mov	sp, r7
    63b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b6:	4770      	bx	lr

000063b8 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    63b8:	b480      	push	{r7}
    63ba:	b083      	sub	sp, #12
    63bc:	af00      	add	r7, sp, #0
    63be:	6078      	str	r0, [r7, #4]
    63c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	683a      	ldr	r2, [r7, #0]
    63c6:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    63c8:	bf00      	nop
    63ca:	370c      	adds	r7, #12
    63cc:	46bd      	mov	sp, r7
    63ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d2:	4770      	bx	lr

000063d4 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    63d4:	b480      	push	{r7}
    63d6:	b083      	sub	sp, #12
    63d8:	af00      	add	r7, sp, #0
    63da:	6078      	str	r0, [r7, #4]
    63dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    63de:	687b      	ldr	r3, [r7, #4]
    63e0:	683a      	ldr	r2, [r7, #0]
    63e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    63e6:	bf00      	nop
    63e8:	370c      	adds	r7, #12
    63ea:	46bd      	mov	sp, r7
    63ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    63f0:	4770      	bx	lr

000063f2 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    63f2:	b480      	push	{r7}
    63f4:	b083      	sub	sp, #12
    63f6:	af00      	add	r7, sp, #0
    63f8:	6078      	str	r0, [r7, #4]
    63fa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    63fc:	687b      	ldr	r3, [r7, #4]
    63fe:	683a      	ldr	r2, [r7, #0]
    6400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    6404:	bf00      	nop
    6406:	370c      	adds	r7, #12
    6408:	46bd      	mov	sp, r7
    640a:	f85d 7b04 	ldr.w	r7, [sp], #4
    640e:	4770      	bx	lr

00006410 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    6410:	b480      	push	{r7}
    6412:	b083      	sub	sp, #12
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
    6418:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	683a      	ldr	r2, [r7, #0]
    641e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    6422:	bf00      	nop
    6424:	370c      	adds	r7, #12
    6426:	46bd      	mov	sp, r7
    6428:	f85d 7b04 	ldr.w	r7, [sp], #4
    642c:	4770      	bx	lr

0000642e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    642e:	b480      	push	{r7}
    6430:	b083      	sub	sp, #12
    6432:	af00      	add	r7, sp, #0
    6434:	6078      	str	r0, [r7, #4]
    6436:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	683a      	ldr	r2, [r7, #0]
    643c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    6440:	bf00      	nop
    6442:	370c      	adds	r7, #12
    6444:	46bd      	mov	sp, r7
    6446:	f85d 7b04 	ldr.w	r7, [sp], #4
    644a:	4770      	bx	lr

0000644c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    644c:	b480      	push	{r7}
    644e:	b083      	sub	sp, #12
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
    6454:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    6456:	687b      	ldr	r3, [r7, #4]
    6458:	683a      	ldr	r2, [r7, #0]
    645a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    645e:	bf00      	nop
    6460:	370c      	adds	r7, #12
    6462:	46bd      	mov	sp, r7
    6464:	f85d 7b04 	ldr.w	r7, [sp], #4
    6468:	4770      	bx	lr

0000646a <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    646a:	b480      	push	{r7}
    646c:	b083      	sub	sp, #12
    646e:	af00      	add	r7, sp, #0
    6470:	6078      	str	r0, [r7, #4]
    6472:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	683a      	ldr	r2, [r7, #0]
    6478:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    647c:	bf00      	nop
    647e:	370c      	adds	r7, #12
    6480:	46bd      	mov	sp, r7
    6482:	f85d 7b04 	ldr.w	r7, [sp], #4
    6486:	4770      	bx	lr

00006488 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    6488:	b480      	push	{r7}
    648a:	b083      	sub	sp, #12
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
    6490:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    6492:	687b      	ldr	r3, [r7, #4]
    6494:	683a      	ldr	r2, [r7, #0]
    6496:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    649a:	bf00      	nop
    649c:	370c      	adds	r7, #12
    649e:	46bd      	mov	sp, r7
    64a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    64a4:	4770      	bx	lr

000064a6 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    64a6:	b480      	push	{r7}
    64a8:	b083      	sub	sp, #12
    64aa:	af00      	add	r7, sp, #0
    64ac:	6078      	str	r0, [r7, #4]
    64ae:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    64b0:	687b      	ldr	r3, [r7, #4]
    64b2:	683a      	ldr	r2, [r7, #0]
    64b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    64b8:	bf00      	nop
    64ba:	370c      	adds	r7, #12
    64bc:	46bd      	mov	sp, r7
    64be:	f85d 7b04 	ldr.w	r7, [sp], #4
    64c2:	4770      	bx	lr

000064c4 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    64c4:	b480      	push	{r7}
    64c6:	b083      	sub	sp, #12
    64c8:	af00      	add	r7, sp, #0
    64ca:	6078      	str	r0, [r7, #4]
    64cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    64ce:	687b      	ldr	r3, [r7, #4]
    64d0:	683a      	ldr	r2, [r7, #0]
    64d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    64d6:	bf00      	nop
    64d8:	370c      	adds	r7, #12
    64da:	46bd      	mov	sp, r7
    64dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    64e0:	4770      	bx	lr
	...

000064e4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    64e4:	b580      	push	{r7, lr}
    64e6:	b082      	sub	sp, #8
    64e8:	af00      	add	r7, sp, #0
    64ea:	6078      	str	r0, [r7, #4]
    64ec:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	683a      	ldr	r2, [r7, #0]
    64f2:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	681b      	ldr	r3, [r3, #0]
    64f8:	4618      	mov	r0, r3
    64fa:	4b55      	ldr	r3, [pc, #340]	; (6650 <_can_async_init+0x16c>)
    64fc:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    64fe:	bf00      	nop
    6500:	687b      	ldr	r3, [r7, #4]
    6502:	681b      	ldr	r3, [r3, #0]
    6504:	4618      	mov	r0, r3
    6506:	4b53      	ldr	r3, [pc, #332]	; (6654 <_can_async_init+0x170>)
    6508:	4798      	blx	r3
    650a:	4603      	mov	r3, r0
    650c:	f083 0301 	eor.w	r3, r3, #1
    6510:	b2db      	uxtb	r3, r3
    6512:	2b00      	cmp	r3, #0
    6514:	d1f4      	bne.n	6500 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	681b      	ldr	r3, [r3, #0]
    651a:	4618      	mov	r0, r3
    651c:	4b4e      	ldr	r3, [pc, #312]	; (6658 <_can_async_init+0x174>)
    651e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    6520:	683b      	ldr	r3, [r7, #0]
    6522:	4a4e      	ldr	r2, [pc, #312]	; (665c <_can_async_init+0x178>)
    6524:	4293      	cmp	r3, r2
    6526:	d17a      	bne.n	661e <_can_async_init+0x13a>
		_can1_dev    = dev;
    6528:	4a4d      	ldr	r2, [pc, #308]	; (6660 <_can_async_init+0x17c>)
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	4a4c      	ldr	r2, [pc, #304]	; (6664 <_can_async_init+0x180>)
    6532:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    6534:	687b      	ldr	r3, [r7, #4]
    6536:	681b      	ldr	r3, [r3, #0]
    6538:	f44f 7140 	mov.w	r1, #768	; 0x300
    653c:	4618      	mov	r0, r3
    653e:	4b4a      	ldr	r3, [pc, #296]	; (6668 <_can_async_init+0x184>)
    6540:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    6542:	687b      	ldr	r3, [r7, #4]
    6544:	681b      	ldr	r3, [r3, #0]
    6546:	2102      	movs	r1, #2
    6548:	4618      	mov	r0, r3
    654a:	4b48      	ldr	r3, [pc, #288]	; (666c <_can_async_init+0x188>)
    654c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	681b      	ldr	r3, [r3, #0]
    6552:	4947      	ldr	r1, [pc, #284]	; (6670 <_can_async_init+0x18c>)
    6554:	4618      	mov	r0, r3
    6556:	4b47      	ldr	r3, [pc, #284]	; (6674 <_can_async_init+0x190>)
    6558:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    655a:	687b      	ldr	r3, [r7, #4]
    655c:	681b      	ldr	r3, [r3, #0]
    655e:	4946      	ldr	r1, [pc, #280]	; (6678 <_can_async_init+0x194>)
    6560:	4618      	mov	r0, r3
    6562:	4b46      	ldr	r3, [pc, #280]	; (667c <_can_async_init+0x198>)
    6564:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    6566:	687b      	ldr	r3, [r7, #4]
    6568:	681a      	ldr	r2, [r3, #0]
    656a:	4b45      	ldr	r3, [pc, #276]	; (6680 <_can_async_init+0x19c>)
    656c:	b29b      	uxth	r3, r3
    656e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6576:	4619      	mov	r1, r3
    6578:	4610      	mov	r0, r2
    657a:	4b42      	ldr	r3, [pc, #264]	; (6684 <_can_async_init+0x1a0>)
    657c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    657e:	687b      	ldr	r3, [r7, #4]
    6580:	681b      	ldr	r3, [r3, #0]
    6582:	2107      	movs	r1, #7
    6584:	4618      	mov	r0, r3
    6586:	4b40      	ldr	r3, [pc, #256]	; (6688 <_can_async_init+0x1a4>)
    6588:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	681b      	ldr	r3, [r3, #0]
    658e:	2107      	movs	r1, #7
    6590:	4618      	mov	r0, r3
    6592:	4b3e      	ldr	r3, [pc, #248]	; (668c <_can_async_init+0x1a8>)
    6594:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    6596:	687b      	ldr	r3, [r7, #4]
    6598:	681a      	ldr	r2, [r3, #0]
    659a:	4b3d      	ldr	r3, [pc, #244]	; (6690 <_can_async_init+0x1ac>)
    659c:	b29b      	uxth	r3, r3
    659e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    65a2:	4619      	mov	r1, r3
    65a4:	4610      	mov	r0, r2
    65a6:	4b3b      	ldr	r3, [pc, #236]	; (6694 <_can_async_init+0x1b0>)
    65a8:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    65aa:	687b      	ldr	r3, [r7, #4]
    65ac:	681a      	ldr	r2, [r3, #0]
    65ae:	4b3a      	ldr	r3, [pc, #232]	; (6698 <_can_async_init+0x1b4>)
    65b0:	b29b      	uxth	r3, r3
    65b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    65b6:	4619      	mov	r1, r3
    65b8:	4610      	mov	r0, r2
    65ba:	4b38      	ldr	r3, [pc, #224]	; (669c <_can_async_init+0x1b8>)
    65bc:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	681b      	ldr	r3, [r3, #0]
    65c2:	2108      	movs	r1, #8
    65c4:	4618      	mov	r0, r3
    65c6:	4b36      	ldr	r3, [pc, #216]	; (66a0 <_can_async_init+0x1bc>)
    65c8:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	681a      	ldr	r2, [r3, #0]
    65ce:	4b35      	ldr	r3, [pc, #212]	; (66a4 <_can_async_init+0x1c0>)
    65d0:	b29b      	uxth	r3, r3
    65d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    65d6:	4619      	mov	r1, r3
    65d8:	4610      	mov	r0, r2
    65da:	4b33      	ldr	r3, [pc, #204]	; (66a8 <_can_async_init+0x1c4>)
    65dc:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	681a      	ldr	r2, [r3, #0]
    65e2:	4b32      	ldr	r3, [pc, #200]	; (66ac <_can_async_init+0x1c8>)
    65e4:	b29b      	uxth	r3, r3
    65e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    65ea:	4619      	mov	r1, r3
    65ec:	4610      	mov	r0, r2
    65ee:	4b30      	ldr	r3, [pc, #192]	; (66b0 <_can_async_init+0x1cc>)
    65f0:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    65f2:	687b      	ldr	r3, [r7, #4]
    65f4:	681b      	ldr	r3, [r3, #0]
    65f6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    65fa:	4618      	mov	r0, r3
    65fc:	4b2d      	ldr	r3, [pc, #180]	; (66b4 <_can_async_init+0x1d0>)
    65fe:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    6600:	204f      	movs	r0, #79	; 0x4f
    6602:	4b2d      	ldr	r3, [pc, #180]	; (66b8 <_can_async_init+0x1d4>)
    6604:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    6606:	204f      	movs	r0, #79	; 0x4f
    6608:	4b2c      	ldr	r3, [pc, #176]	; (66bc <_can_async_init+0x1d8>)
    660a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    660c:	204f      	movs	r0, #79	; 0x4f
    660e:	4b2c      	ldr	r3, [pc, #176]	; (66c0 <_can_async_init+0x1dc>)
    6610:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	681b      	ldr	r3, [r3, #0]
    6616:	2101      	movs	r1, #1
    6618:	4618      	mov	r0, r3
    661a:	4b2a      	ldr	r3, [pc, #168]	; (66c4 <_can_async_init+0x1e0>)
    661c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    661e:	687b      	ldr	r3, [r7, #4]
    6620:	681b      	ldr	r3, [r3, #0]
    6622:	4618      	mov	r0, r3
    6624:	4b28      	ldr	r3, [pc, #160]	; (66c8 <_can_async_init+0x1e4>)
    6626:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	681b      	ldr	r3, [r3, #0]
    662c:	4618      	mov	r0, r3
    662e:	4b27      	ldr	r3, [pc, #156]	; (66cc <_can_async_init+0x1e8>)
    6630:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    6632:	bf00      	nop
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	681b      	ldr	r3, [r3, #0]
    6638:	4618      	mov	r0, r3
    663a:	4b06      	ldr	r3, [pc, #24]	; (6654 <_can_async_init+0x170>)
    663c:	4798      	blx	r3
    663e:	4603      	mov	r3, r0
    6640:	2b00      	cmp	r3, #0
    6642:	d1f7      	bne.n	6634 <_can_async_init+0x150>
	};

	return ERR_NONE;
    6644:	2300      	movs	r3, #0
}
    6646:	4618      	mov	r0, r3
    6648:	3708      	adds	r7, #8
    664a:	46bd      	mov	sp, r7
    664c:	bd80      	pop	{r7, pc}
    664e:	bf00      	nop
    6650:	00006299 	.word	0x00006299
    6654:	000062b9 	.word	0x000062b9
    6658:	00006307 	.word	0x00006307
    665c:	42000400 	.word	0x42000400
    6660:	20002128 	.word	0x20002128
    6664:	20000004 	.word	0x20000004
    6668:	00006347 	.word	0x00006347
    666c:	00006261 	.word	0x00006261
    6670:	00010c01 	.word	0x00010c01
    6674:	00006369 	.word	0x00006369
    6678:	00010c10 	.word	0x00010c10
    667c:	0000627d 	.word	0x0000627d
    6680:	20002858 	.word	0x20002858
    6684:	0000644d 	.word	0x0000644d
    6688:	0000646b 	.word	0x0000646b
    668c:	000064a7 	.word	0x000064a7
    6690:	20002810 	.word	0x20002810
    6694:	00006489 	.word	0x00006489
    6698:	20002088 	.word	0x20002088
    669c:	000064c5 	.word	0x000064c5
    66a0:	000063d5 	.word	0x000063d5
    66a4:	20002098 	.word	0x20002098
    66a8:	000063f3 	.word	0x000063f3
    66ac:	20002118 	.word	0x20002118
    66b0:	00006411 	.word	0x00006411
    66b4:	0000642f 	.word	0x0000642f
    66b8:	000061b9 	.word	0x000061b9
    66bc:	000061fd 	.word	0x000061fd
    66c0:	0000617d 	.word	0x0000617d
    66c4:	000063b9 	.word	0x000063b9
    66c8:	00006327 	.word	0x00006327
    66cc:	000062e7 	.word	0x000062e7

000066d0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    66d0:	b590      	push	{r4, r7, lr}
    66d2:	b083      	sub	sp, #12
    66d4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    66d6:	4b2c      	ldr	r3, [pc, #176]	; (6788 <CAN1_Handler+0xb8>)
    66d8:	681b      	ldr	r3, [r3, #0]
    66da:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	681b      	ldr	r3, [r3, #0]
    66e0:	4618      	mov	r0, r3
    66e2:	4b2a      	ldr	r3, [pc, #168]	; (678c <CAN1_Handler+0xbc>)
    66e4:	4798      	blx	r3
    66e6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    66e8:	683b      	ldr	r3, [r7, #0]
    66ea:	f003 0301 	and.w	r3, r3, #1
    66ee:	2b00      	cmp	r3, #0
    66f0:	d003      	beq.n	66fa <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	689b      	ldr	r3, [r3, #8]
    66f6:	6878      	ldr	r0, [r7, #4]
    66f8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    66fa:	683b      	ldr	r3, [r7, #0]
    66fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    6700:	2b00      	cmp	r3, #0
    6702:	d003      	beq.n	670c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    6704:	687b      	ldr	r3, [r7, #4]
    6706:	685b      	ldr	r3, [r3, #4]
    6708:	6878      	ldr	r0, [r7, #4]
    670a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    670c:	683b      	ldr	r3, [r7, #0]
    670e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    6712:	2b00      	cmp	r3, #0
    6714:	d004      	beq.n	6720 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    6716:	687b      	ldr	r3, [r7, #4]
    6718:	68db      	ldr	r3, [r3, #12]
    671a:	2103      	movs	r1, #3
    671c:	6878      	ldr	r0, [r7, #4]
    671e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    6720:	683b      	ldr	r3, [r7, #0]
    6722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6726:	2b00      	cmp	r3, #0
    6728:	d004      	beq.n	6734 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	68db      	ldr	r3, [r3, #12]
    672e:	2100      	movs	r1, #0
    6730:	6878      	ldr	r0, [r7, #4]
    6732:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    6734:	683b      	ldr	r3, [r7, #0]
    6736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    673a:	2b00      	cmp	r3, #0
    673c:	d00f      	beq.n	675e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    673e:	687b      	ldr	r3, [r7, #4]
    6740:	68dc      	ldr	r4, [r3, #12]
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	681b      	ldr	r3, [r3, #0]
    6746:	4618      	mov	r0, r3
    6748:	4b11      	ldr	r3, [pc, #68]	; (6790 <CAN1_Handler+0xc0>)
    674a:	4798      	blx	r3
    674c:	4603      	mov	r3, r0
    674e:	2b00      	cmp	r3, #0
    6750:	d001      	beq.n	6756 <CAN1_Handler+0x86>
    6752:	2302      	movs	r3, #2
    6754:	e000      	b.n	6758 <CAN1_Handler+0x88>
    6756:	2301      	movs	r3, #1
    6758:	4619      	mov	r1, r3
    675a:	6878      	ldr	r0, [r7, #4]
    675c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    675e:	683b      	ldr	r3, [r7, #0]
    6760:	f003 0308 	and.w	r3, r3, #8
    6764:	2b00      	cmp	r3, #0
    6766:	d004      	beq.n	6772 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    6768:	687b      	ldr	r3, [r7, #4]
    676a:	68db      	ldr	r3, [r3, #12]
    676c:	2104      	movs	r1, #4
    676e:	6878      	ldr	r0, [r7, #4]
    6770:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	681b      	ldr	r3, [r3, #0]
    6776:	6839      	ldr	r1, [r7, #0]
    6778:	4618      	mov	r0, r3
    677a:	4b06      	ldr	r3, [pc, #24]	; (6794 <CAN1_Handler+0xc4>)
    677c:	4798      	blx	r3
}
    677e:	bf00      	nop
    6780:	370c      	adds	r7, #12
    6782:	46bd      	mov	sp, r7
    6784:	bd90      	pop	{r4, r7, pc}
    6786:	bf00      	nop
    6788:	20002128 	.word	0x20002128
    678c:	000063a1 	.word	0x000063a1
    6790:	00006239 	.word	0x00006239
    6794:	00006385 	.word	0x00006385

00006798 <__NVIC_SetPendingIRQ>:
{
    6798:	b480      	push	{r7}
    679a:	b083      	sub	sp, #12
    679c:	af00      	add	r7, sp, #0
    679e:	4603      	mov	r3, r0
    67a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    67a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    67a6:	2b00      	cmp	r3, #0
    67a8:	db0c      	blt.n	67c4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67aa:	4909      	ldr	r1, [pc, #36]	; (67d0 <__NVIC_SetPendingIRQ+0x38>)
    67ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    67b0:	095b      	lsrs	r3, r3, #5
    67b2:	88fa      	ldrh	r2, [r7, #6]
    67b4:	f002 021f 	and.w	r2, r2, #31
    67b8:	2001      	movs	r0, #1
    67ba:	fa00 f202 	lsl.w	r2, r0, r2
    67be:	3340      	adds	r3, #64	; 0x40
    67c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    67c4:	bf00      	nop
    67c6:	370c      	adds	r7, #12
    67c8:	46bd      	mov	sp, r7
    67ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    67ce:	4770      	bx	lr
    67d0:	e000e100 	.word	0xe000e100

000067d4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    67d4:	b580      	push	{r7, lr}
    67d6:	b082      	sub	sp, #8
    67d8:	af00      	add	r7, sp, #0
    67da:	4603      	mov	r3, r0
    67dc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    67de:	79fb      	ldrb	r3, [r7, #7]
    67e0:	b21b      	sxth	r3, r3
    67e2:	4618      	mov	r0, r3
    67e4:	4b02      	ldr	r3, [pc, #8]	; (67f0 <_irq_set+0x1c>)
    67e6:	4798      	blx	r3
}
    67e8:	bf00      	nop
    67ea:	3708      	adds	r7, #8
    67ec:	46bd      	mov	sp, r7
    67ee:	bd80      	pop	{r7, pc}
    67f0:	00006799 	.word	0x00006799

000067f4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    67f4:	b480      	push	{r7}
    67f6:	b083      	sub	sp, #12
    67f8:	af00      	add	r7, sp, #0
    67fa:	4603      	mov	r3, r0
    67fc:	6039      	str	r1, [r7, #0]
    67fe:	80fb      	strh	r3, [r7, #6]
    6800:	4613      	mov	r3, r2
    6802:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6804:	797b      	ldrb	r3, [r7, #5]
    6806:	3b04      	subs	r3, #4
    6808:	2b05      	cmp	r3, #5
    680a:	d86b      	bhi.n	68e4 <_get_cycles_for_us_internal+0xf0>
    680c:	a201      	add	r2, pc, #4	; (adr r2, 6814 <_get_cycles_for_us_internal+0x20>)
    680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6812:	bf00      	nop
    6814:	000068c3 	.word	0x000068c3
    6818:	000068a3 	.word	0x000068a3
    681c:	00006885 	.word	0x00006885
    6820:	00006867 	.word	0x00006867
    6824:	00006849 	.word	0x00006849
    6828:	0000682d 	.word	0x0000682d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    682c:	88fb      	ldrh	r3, [r7, #6]
    682e:	683a      	ldr	r2, [r7, #0]
    6830:	4935      	ldr	r1, [pc, #212]	; (6908 <_get_cycles_for_us_internal+0x114>)
    6832:	fba1 1202 	umull	r1, r2, r1, r2
    6836:	0c92      	lsrs	r2, r2, #18
    6838:	fb02 f303 	mul.w	r3, r2, r3
    683c:	3302      	adds	r3, #2
    683e:	4a33      	ldr	r2, [pc, #204]	; (690c <_get_cycles_for_us_internal+0x118>)
    6840:	fba2 2303 	umull	r2, r3, r2, r3
    6844:	085b      	lsrs	r3, r3, #1
    6846:	e059      	b.n	68fc <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    6848:	88fb      	ldrh	r3, [r7, #6]
    684a:	683a      	ldr	r2, [r7, #0]
    684c:	0952      	lsrs	r2, r2, #5
    684e:	4930      	ldr	r1, [pc, #192]	; (6910 <_get_cycles_for_us_internal+0x11c>)
    6850:	fba1 1202 	umull	r1, r2, r1, r2
    6854:	09d2      	lsrs	r2, r2, #7
    6856:	fb02 f303 	mul.w	r3, r2, r3
    685a:	331d      	adds	r3, #29
    685c:	4a2d      	ldr	r2, [pc, #180]	; (6914 <_get_cycles_for_us_internal+0x120>)
    685e:	fba2 2303 	umull	r2, r3, r2, r3
    6862:	091b      	lsrs	r3, r3, #4
    6864:	e04a      	b.n	68fc <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    6866:	88fb      	ldrh	r3, [r7, #6]
    6868:	683a      	ldr	r2, [r7, #0]
    686a:	492b      	ldr	r1, [pc, #172]	; (6918 <_get_cycles_for_us_internal+0x124>)
    686c:	fba1 1202 	umull	r1, r2, r1, r2
    6870:	0b52      	lsrs	r2, r2, #13
    6872:	fb02 f303 	mul.w	r3, r2, r3
    6876:	f203 132b 	addw	r3, r3, #299	; 0x12b
    687a:	4a28      	ldr	r2, [pc, #160]	; (691c <_get_cycles_for_us_internal+0x128>)
    687c:	fba2 2303 	umull	r2, r3, r2, r3
    6880:	095b      	lsrs	r3, r3, #5
    6882:	e03b      	b.n	68fc <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    6884:	88fb      	ldrh	r3, [r7, #6]
    6886:	683a      	ldr	r2, [r7, #0]
    6888:	4925      	ldr	r1, [pc, #148]	; (6920 <_get_cycles_for_us_internal+0x12c>)
    688a:	fba1 1202 	umull	r1, r2, r1, r2
    688e:	0992      	lsrs	r2, r2, #6
    6890:	fb02 f303 	mul.w	r3, r2, r3
    6894:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6898:	4a22      	ldr	r2, [pc, #136]	; (6924 <_get_cycles_for_us_internal+0x130>)
    689a:	fba2 2303 	umull	r2, r3, r2, r3
    689e:	099b      	lsrs	r3, r3, #6
    68a0:	e02c      	b.n	68fc <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    68a2:	88fb      	ldrh	r3, [r7, #6]
    68a4:	683a      	ldr	r2, [r7, #0]
    68a6:	4920      	ldr	r1, [pc, #128]	; (6928 <_get_cycles_for_us_internal+0x134>)
    68a8:	fba1 1202 	umull	r1, r2, r1, r2
    68ac:	0952      	lsrs	r2, r2, #5
    68ae:	fb02 f303 	mul.w	r3, r2, r3
    68b2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    68b6:	332f      	adds	r3, #47	; 0x2f
    68b8:	4a1c      	ldr	r2, [pc, #112]	; (692c <_get_cycles_for_us_internal+0x138>)
    68ba:	fba2 2303 	umull	r2, r3, r2, r3
    68be:	0b5b      	lsrs	r3, r3, #13
    68c0:	e01c      	b.n	68fc <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    68c2:	88fb      	ldrh	r3, [r7, #6]
    68c4:	683a      	ldr	r2, [r7, #0]
    68c6:	491a      	ldr	r1, [pc, #104]	; (6930 <_get_cycles_for_us_internal+0x13c>)
    68c8:	fba1 1202 	umull	r1, r2, r1, r2
    68cc:	08d2      	lsrs	r2, r2, #3
    68ce:	fb02 f303 	mul.w	r3, r2, r3
    68d2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    68d6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    68da:	4a16      	ldr	r2, [pc, #88]	; (6934 <_get_cycles_for_us_internal+0x140>)
    68dc:	fba2 2303 	umull	r2, r3, r2, r3
    68e0:	0c5b      	lsrs	r3, r3, #17
    68e2:	e00b      	b.n	68fc <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    68e4:	88fb      	ldrh	r3, [r7, #6]
    68e6:	683a      	ldr	r2, [r7, #0]
    68e8:	fb02 f303 	mul.w	r3, r2, r3
    68ec:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    68f0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    68f4:	4a10      	ldr	r2, [pc, #64]	; (6938 <_get_cycles_for_us_internal+0x144>)
    68f6:	fba2 2303 	umull	r2, r3, r2, r3
    68fa:	0c9b      	lsrs	r3, r3, #18
	}
}
    68fc:	4618      	mov	r0, r3
    68fe:	370c      	adds	r7, #12
    6900:	46bd      	mov	sp, r7
    6902:	f85d 7b04 	ldr.w	r7, [sp], #4
    6906:	4770      	bx	lr
    6908:	431bde83 	.word	0x431bde83
    690c:	aaaaaaab 	.word	0xaaaaaaab
    6910:	0a7c5ac5 	.word	0x0a7c5ac5
    6914:	88888889 	.word	0x88888889
    6918:	d1b71759 	.word	0xd1b71759
    691c:	1b4e81b5 	.word	0x1b4e81b5
    6920:	10624dd3 	.word	0x10624dd3
    6924:	057619f1 	.word	0x057619f1
    6928:	51eb851f 	.word	0x51eb851f
    692c:	45e7b273 	.word	0x45e7b273
    6930:	cccccccd 	.word	0xcccccccd
    6934:	6fd91d85 	.word	0x6fd91d85
    6938:	165e9f81 	.word	0x165e9f81

0000693c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    693c:	b580      	push	{r7, lr}
    693e:	b082      	sub	sp, #8
    6940:	af00      	add	r7, sp, #0
    6942:	4603      	mov	r3, r0
    6944:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6946:	88fb      	ldrh	r3, [r7, #6]
    6948:	2209      	movs	r2, #9
    694a:	4904      	ldr	r1, [pc, #16]	; (695c <_get_cycles_for_us+0x20>)
    694c:	4618      	mov	r0, r3
    694e:	4b04      	ldr	r3, [pc, #16]	; (6960 <_get_cycles_for_us+0x24>)
    6950:	4798      	blx	r3
    6952:	4603      	mov	r3, r0
}
    6954:	4618      	mov	r0, r3
    6956:	3708      	adds	r7, #8
    6958:	46bd      	mov	sp, r7
    695a:	bd80      	pop	{r7, pc}
    695c:	07270e00 	.word	0x07270e00
    6960:	000067f5 	.word	0x000067f5

00006964 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    6964:	b480      	push	{r7}
    6966:	b083      	sub	sp, #12
    6968:	af00      	add	r7, sp, #0
    696a:	4603      	mov	r3, r0
    696c:	6039      	str	r1, [r7, #0]
    696e:	80fb      	strh	r3, [r7, #6]
    6970:	4613      	mov	r3, r2
    6972:	717b      	strb	r3, [r7, #5]
	switch (power) {
    6974:	797b      	ldrb	r3, [r7, #5]
    6976:	3b04      	subs	r3, #4
    6978:	2b05      	cmp	r3, #5
    697a:	d870      	bhi.n	6a5e <_get_cycles_for_ms_internal+0xfa>
    697c:	a201      	add	r2, pc, #4	; (adr r2, 6984 <_get_cycles_for_ms_internal+0x20>)
    697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6982:	bf00      	nop
    6984:	00006a41 	.word	0x00006a41
    6988:	00006a25 	.word	0x00006a25
    698c:	00006a09 	.word	0x00006a09
    6990:	000069e5 	.word	0x000069e5
    6994:	000069c1 	.word	0x000069c1
    6998:	0000699d 	.word	0x0000699d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    699c:	88fb      	ldrh	r3, [r7, #6]
    699e:	683a      	ldr	r2, [r7, #0]
    69a0:	4937      	ldr	r1, [pc, #220]	; (6a80 <_get_cycles_for_ms_internal+0x11c>)
    69a2:	fba1 1202 	umull	r1, r2, r1, r2
    69a6:	0c92      	lsrs	r2, r2, #18
    69a8:	fb02 f303 	mul.w	r3, r2, r3
    69ac:	3302      	adds	r3, #2
    69ae:	4a35      	ldr	r2, [pc, #212]	; (6a84 <_get_cycles_for_ms_internal+0x120>)
    69b0:	fba2 2303 	umull	r2, r3, r2, r3
    69b4:	085b      	lsrs	r3, r3, #1
    69b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    69ba:	fb02 f303 	mul.w	r3, r2, r3
    69be:	e058      	b.n	6a72 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    69c0:	88fb      	ldrh	r3, [r7, #6]
    69c2:	683a      	ldr	r2, [r7, #0]
    69c4:	0952      	lsrs	r2, r2, #5
    69c6:	4930      	ldr	r1, [pc, #192]	; (6a88 <_get_cycles_for_ms_internal+0x124>)
    69c8:	fba1 1202 	umull	r1, r2, r1, r2
    69cc:	09d2      	lsrs	r2, r2, #7
    69ce:	fb02 f303 	mul.w	r3, r2, r3
    69d2:	3302      	adds	r3, #2
    69d4:	4a2b      	ldr	r2, [pc, #172]	; (6a84 <_get_cycles_for_ms_internal+0x120>)
    69d6:	fba2 2303 	umull	r2, r3, r2, r3
    69da:	085b      	lsrs	r3, r3, #1
    69dc:	2264      	movs	r2, #100	; 0x64
    69de:	fb02 f303 	mul.w	r3, r2, r3
    69e2:	e046      	b.n	6a72 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    69e4:	88fb      	ldrh	r3, [r7, #6]
    69e6:	683a      	ldr	r2, [r7, #0]
    69e8:	4928      	ldr	r1, [pc, #160]	; (6a8c <_get_cycles_for_ms_internal+0x128>)
    69ea:	fba1 1202 	umull	r1, r2, r1, r2
    69ee:	0b52      	lsrs	r2, r2, #13
    69f0:	fb02 f303 	mul.w	r3, r2, r3
    69f4:	3302      	adds	r3, #2
    69f6:	4a23      	ldr	r2, [pc, #140]	; (6a84 <_get_cycles_for_ms_internal+0x120>)
    69f8:	fba2 2303 	umull	r2, r3, r2, r3
    69fc:	085a      	lsrs	r2, r3, #1
    69fe:	4613      	mov	r3, r2
    6a00:	009b      	lsls	r3, r3, #2
    6a02:	4413      	add	r3, r2
    6a04:	005b      	lsls	r3, r3, #1
    6a06:	e034      	b.n	6a72 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    6a08:	88fb      	ldrh	r3, [r7, #6]
    6a0a:	683a      	ldr	r2, [r7, #0]
    6a0c:	4920      	ldr	r1, [pc, #128]	; (6a90 <_get_cycles_for_ms_internal+0x12c>)
    6a0e:	fba1 1202 	umull	r1, r2, r1, r2
    6a12:	0992      	lsrs	r2, r2, #6
    6a14:	fb02 f303 	mul.w	r3, r2, r3
    6a18:	3302      	adds	r3, #2
    6a1a:	4a1a      	ldr	r2, [pc, #104]	; (6a84 <_get_cycles_for_ms_internal+0x120>)
    6a1c:	fba2 2303 	umull	r2, r3, r2, r3
    6a20:	085b      	lsrs	r3, r3, #1
    6a22:	e026      	b.n	6a72 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    6a24:	88fb      	ldrh	r3, [r7, #6]
    6a26:	683a      	ldr	r2, [r7, #0]
    6a28:	491a      	ldr	r1, [pc, #104]	; (6a94 <_get_cycles_for_ms_internal+0x130>)
    6a2a:	fba1 1202 	umull	r1, r2, r1, r2
    6a2e:	0952      	lsrs	r2, r2, #5
    6a30:	fb02 f303 	mul.w	r3, r2, r3
    6a34:	331d      	adds	r3, #29
    6a36:	4a18      	ldr	r2, [pc, #96]	; (6a98 <_get_cycles_for_ms_internal+0x134>)
    6a38:	fba2 2303 	umull	r2, r3, r2, r3
    6a3c:	091b      	lsrs	r3, r3, #4
    6a3e:	e018      	b.n	6a72 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    6a40:	88fb      	ldrh	r3, [r7, #6]
    6a42:	683a      	ldr	r2, [r7, #0]
    6a44:	4915      	ldr	r1, [pc, #84]	; (6a9c <_get_cycles_for_ms_internal+0x138>)
    6a46:	fba1 1202 	umull	r1, r2, r1, r2
    6a4a:	08d2      	lsrs	r2, r2, #3
    6a4c:	fb02 f303 	mul.w	r3, r2, r3
    6a50:	f203 132b 	addw	r3, r3, #299	; 0x12b
    6a54:	4a12      	ldr	r2, [pc, #72]	; (6aa0 <_get_cycles_for_ms_internal+0x13c>)
    6a56:	fba2 2303 	umull	r2, r3, r2, r3
    6a5a:	095b      	lsrs	r3, r3, #5
    6a5c:	e009      	b.n	6a72 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    6a5e:	88fb      	ldrh	r3, [r7, #6]
    6a60:	683a      	ldr	r2, [r7, #0]
    6a62:	fb02 f303 	mul.w	r3, r2, r3
    6a66:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    6a6a:	4a0e      	ldr	r2, [pc, #56]	; (6aa4 <_get_cycles_for_ms_internal+0x140>)
    6a6c:	fba2 2303 	umull	r2, r3, r2, r3
    6a70:	099b      	lsrs	r3, r3, #6
	}
}
    6a72:	4618      	mov	r0, r3
    6a74:	370c      	adds	r7, #12
    6a76:	46bd      	mov	sp, r7
    6a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a7c:	4770      	bx	lr
    6a7e:	bf00      	nop
    6a80:	431bde83 	.word	0x431bde83
    6a84:	aaaaaaab 	.word	0xaaaaaaab
    6a88:	0a7c5ac5 	.word	0x0a7c5ac5
    6a8c:	d1b71759 	.word	0xd1b71759
    6a90:	10624dd3 	.word	0x10624dd3
    6a94:	51eb851f 	.word	0x51eb851f
    6a98:	88888889 	.word	0x88888889
    6a9c:	cccccccd 	.word	0xcccccccd
    6aa0:	1b4e81b5 	.word	0x1b4e81b5
    6aa4:	057619f1 	.word	0x057619f1

00006aa8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	b082      	sub	sp, #8
    6aac:	af00      	add	r7, sp, #0
    6aae:	4603      	mov	r3, r0
    6ab0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    6ab2:	88fb      	ldrh	r3, [r7, #6]
    6ab4:	2209      	movs	r2, #9
    6ab6:	4904      	ldr	r1, [pc, #16]	; (6ac8 <_get_cycles_for_ms+0x20>)
    6ab8:	4618      	mov	r0, r3
    6aba:	4b04      	ldr	r3, [pc, #16]	; (6acc <_get_cycles_for_ms+0x24>)
    6abc:	4798      	blx	r3
    6abe:	4603      	mov	r3, r0
}
    6ac0:	4618      	mov	r0, r3
    6ac2:	3708      	adds	r7, #8
    6ac4:	46bd      	mov	sp, r7
    6ac6:	bd80      	pop	{r7, pc}
    6ac8:	07270e00 	.word	0x07270e00
    6acc:	00006965 	.word	0x00006965

00006ad0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    6ad0:	b480      	push	{r7}
    6ad2:	b083      	sub	sp, #12
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	6078      	str	r0, [r7, #4]
    6ad8:	6039      	str	r1, [r7, #0]
    6ada:	bf00      	nop
    6adc:	f3af 8000 	nop.w

00006ae0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    6ae0:	3901      	subs	r1, #1
    6ae2:	d8fd      	bhi.n	6ae0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    6ae4:	bf00      	nop
    6ae6:	370c      	adds	r7, #12
    6ae8:	46bd      	mov	sp, r7
    6aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aee:	4770      	bx	lr

00006af0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    6af0:	b480      	push	{r7}
    6af2:	b083      	sub	sp, #12
    6af4:	af00      	add	r7, sp, #0
    6af6:	6078      	str	r0, [r7, #4]
    6af8:	460b      	mov	r3, r1
    6afa:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	881b      	ldrh	r3, [r3, #0]
    6b00:	b29a      	uxth	r2, r3
    6b02:	887b      	ldrh	r3, [r7, #2]
    6b04:	021b      	lsls	r3, r3, #8
    6b06:	b29b      	uxth	r3, r3
    6b08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6b0c:	b29b      	uxth	r3, r3
    6b0e:	4313      	orrs	r3, r2
    6b10:	b29a      	uxth	r2, r3
    6b12:	687b      	ldr	r3, [r7, #4]
    6b14:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    6b16:	bf00      	nop
    6b18:	370c      	adds	r7, #12
    6b1a:	46bd      	mov	sp, r7
    6b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b20:	4770      	bx	lr

00006b22 <hri_port_set_EVCTRL_reg>:
{
    6b22:	b480      	push	{r7}
    6b24:	b085      	sub	sp, #20
    6b26:	af00      	add	r7, sp, #0
    6b28:	60f8      	str	r0, [r7, #12]
    6b2a:	460b      	mov	r3, r1
    6b2c:	607a      	str	r2, [r7, #4]
    6b2e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    6b30:	7afb      	ldrb	r3, [r7, #11]
    6b32:	7afa      	ldrb	r2, [r7, #11]
    6b34:	68f9      	ldr	r1, [r7, #12]
    6b36:	01d2      	lsls	r2, r2, #7
    6b38:	440a      	add	r2, r1
    6b3a:	322c      	adds	r2, #44	; 0x2c
    6b3c:	6811      	ldr	r1, [r2, #0]
    6b3e:	687a      	ldr	r2, [r7, #4]
    6b40:	430a      	orrs	r2, r1
    6b42:	68f9      	ldr	r1, [r7, #12]
    6b44:	01db      	lsls	r3, r3, #7
    6b46:	440b      	add	r3, r1
    6b48:	332c      	adds	r3, #44	; 0x2c
    6b4a:	601a      	str	r2, [r3, #0]
}
    6b4c:	bf00      	nop
    6b4e:	3714      	adds	r7, #20
    6b50:	46bd      	mov	sp, r7
    6b52:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b56:	4770      	bx	lr

00006b58 <_port_event_init>:

static inline void _port_event_init()
{
    6b58:	b580      	push	{r7, lr}
    6b5a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    6b5c:	2200      	movs	r2, #0
    6b5e:	2100      	movs	r1, #0
    6b60:	4809      	ldr	r0, [pc, #36]	; (6b88 <_port_event_init+0x30>)
    6b62:	4b0a      	ldr	r3, [pc, #40]	; (6b8c <_port_event_init+0x34>)
    6b64:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    6b66:	2200      	movs	r2, #0
    6b68:	2101      	movs	r1, #1
    6b6a:	4807      	ldr	r0, [pc, #28]	; (6b88 <_port_event_init+0x30>)
    6b6c:	4b07      	ldr	r3, [pc, #28]	; (6b8c <_port_event_init+0x34>)
    6b6e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    6b70:	22ef      	movs	r2, #239	; 0xef
    6b72:	2102      	movs	r1, #2
    6b74:	4804      	ldr	r0, [pc, #16]	; (6b88 <_port_event_init+0x30>)
    6b76:	4b05      	ldr	r3, [pc, #20]	; (6b8c <_port_event_init+0x34>)
    6b78:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    6b7a:	2200      	movs	r2, #0
    6b7c:	2103      	movs	r1, #3
    6b7e:	4802      	ldr	r0, [pc, #8]	; (6b88 <_port_event_init+0x30>)
    6b80:	4b02      	ldr	r3, [pc, #8]	; (6b8c <_port_event_init+0x34>)
    6b82:	4798      	blx	r3
}
    6b84:	bf00      	nop
    6b86:	bd80      	pop	{r7, pc}
    6b88:	41008000 	.word	0x41008000
    6b8c:	00006b23 	.word	0x00006b23

00006b90 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    6b90:	b580      	push	{r7, lr}
    6b92:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    6b94:	2104      	movs	r1, #4
    6b96:	480b      	ldr	r0, [pc, #44]	; (6bc4 <_init_chip+0x34>)
    6b98:	4b0b      	ldr	r3, [pc, #44]	; (6bc8 <_init_chip+0x38>)
    6b9a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    6b9c:	4b0b      	ldr	r3, [pc, #44]	; (6bcc <_init_chip+0x3c>)
    6b9e:	4798      	blx	r3
	_oscctrl_init_sources();
    6ba0:	4b0b      	ldr	r3, [pc, #44]	; (6bd0 <_init_chip+0x40>)
    6ba2:	4798      	blx	r3
	_mclk_init();
    6ba4:	4b0b      	ldr	r3, [pc, #44]	; (6bd4 <_init_chip+0x44>)
    6ba6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    6ba8:	f44f 6084 	mov.w	r0, #1056	; 0x420
    6bac:	4b0a      	ldr	r3, [pc, #40]	; (6bd8 <_init_chip+0x48>)
    6bae:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    6bb0:	4b0a      	ldr	r3, [pc, #40]	; (6bdc <_init_chip+0x4c>)
    6bb2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    6bb4:	f640 30df 	movw	r0, #3039	; 0xbdf
    6bb8:	4b07      	ldr	r3, [pc, #28]	; (6bd8 <_init_chip+0x48>)
    6bba:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    6bbc:	4b08      	ldr	r3, [pc, #32]	; (6be0 <_init_chip+0x50>)
    6bbe:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    6bc0:	bf00      	nop
    6bc2:	bd80      	pop	{r7, pc}
    6bc4:	41004000 	.word	0x41004000
    6bc8:	00006af1 	.word	0x00006af1
    6bcc:	00007619 	.word	0x00007619
    6bd0:	00007ae1 	.word	0x00007ae1
    6bd4:	00007539 	.word	0x00007539
    6bd8:	000073f9 	.word	0x000073f9
    6bdc:	00007b21 	.word	0x00007b21
    6be0:	00006b59 	.word	0x00006b59

00006be4 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    6be4:	b480      	push	{r7}
    6be6:	b083      	sub	sp, #12
    6be8:	af00      	add	r7, sp, #0
    6bea:	6078      	str	r0, [r7, #4]
    6bec:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	683a      	ldr	r2, [r7, #0]
    6bf2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6bf4:	2300      	movs	r3, #0
}
    6bf6:	4618      	mov	r0, r3
    6bf8:	370c      	adds	r7, #12
    6bfa:	46bd      	mov	sp, r7
    6bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c00:	4770      	bx	lr
	...

00006c04 <__NVIC_EnableIRQ>:
{
    6c04:	b480      	push	{r7}
    6c06:	b083      	sub	sp, #12
    6c08:	af00      	add	r7, sp, #0
    6c0a:	4603      	mov	r3, r0
    6c0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c12:	2b00      	cmp	r3, #0
    6c14:	db0b      	blt.n	6c2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c16:	4909      	ldr	r1, [pc, #36]	; (6c3c <__NVIC_EnableIRQ+0x38>)
    6c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c1c:	095b      	lsrs	r3, r3, #5
    6c1e:	88fa      	ldrh	r2, [r7, #6]
    6c20:	f002 021f 	and.w	r2, r2, #31
    6c24:	2001      	movs	r0, #1
    6c26:	fa00 f202 	lsl.w	r2, r0, r2
    6c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c2e:	bf00      	nop
    6c30:	370c      	adds	r7, #12
    6c32:	46bd      	mov	sp, r7
    6c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c38:	4770      	bx	lr
    6c3a:	bf00      	nop
    6c3c:	e000e100 	.word	0xe000e100

00006c40 <__NVIC_DisableIRQ>:
{
    6c40:	b480      	push	{r7}
    6c42:	b083      	sub	sp, #12
    6c44:	af00      	add	r7, sp, #0
    6c46:	4603      	mov	r3, r0
    6c48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	db10      	blt.n	6c74 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c52:	490b      	ldr	r1, [pc, #44]	; (6c80 <__NVIC_DisableIRQ+0x40>)
    6c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c58:	095b      	lsrs	r3, r3, #5
    6c5a:	88fa      	ldrh	r2, [r7, #6]
    6c5c:	f002 021f 	and.w	r2, r2, #31
    6c60:	2001      	movs	r0, #1
    6c62:	fa00 f202 	lsl.w	r2, r0, r2
    6c66:	3320      	adds	r3, #32
    6c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6c6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c70:	f3bf 8f6f 	isb	sy
}
    6c74:	bf00      	nop
    6c76:	370c      	adds	r7, #12
    6c78:	46bd      	mov	sp, r7
    6c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c7e:	4770      	bx	lr
    6c80:	e000e100 	.word	0xe000e100

00006c84 <__NVIC_ClearPendingIRQ>:
{
    6c84:	b480      	push	{r7}
    6c86:	b083      	sub	sp, #12
    6c88:	af00      	add	r7, sp, #0
    6c8a:	4603      	mov	r3, r0
    6c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c92:	2b00      	cmp	r3, #0
    6c94:	db0c      	blt.n	6cb0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c96:	4909      	ldr	r1, [pc, #36]	; (6cbc <__NVIC_ClearPendingIRQ+0x38>)
    6c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6c9c:	095b      	lsrs	r3, r3, #5
    6c9e:	88fa      	ldrh	r2, [r7, #6]
    6ca0:	f002 021f 	and.w	r2, r2, #31
    6ca4:	2001      	movs	r0, #1
    6ca6:	fa00 f202 	lsl.w	r2, r0, r2
    6caa:	3360      	adds	r3, #96	; 0x60
    6cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6cb0:	bf00      	nop
    6cb2:	370c      	adds	r7, #12
    6cb4:	46bd      	mov	sp, r7
    6cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cba:	4770      	bx	lr
    6cbc:	e000e100 	.word	0xe000e100

00006cc0 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6cc0:	b480      	push	{r7}
    6cc2:	b083      	sub	sp, #12
    6cc4:	af00      	add	r7, sp, #0
    6cc6:	6078      	str	r0, [r7, #4]
    6cc8:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    6cca:	bf00      	nop
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	685a      	ldr	r2, [r3, #4]
    6cd0:	683b      	ldr	r3, [r7, #0]
    6cd2:	4013      	ands	r3, r2
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d1f9      	bne.n	6ccc <hri_eic_wait_for_sync+0xc>
	};
}
    6cd8:	bf00      	nop
    6cda:	370c      	adds	r7, #12
    6cdc:	46bd      	mov	sp, r7
    6cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ce2:	4770      	bx	lr

00006ce4 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6ce4:	b480      	push	{r7}
    6ce6:	b083      	sub	sp, #12
    6ce8:	af00      	add	r7, sp, #0
    6cea:	6078      	str	r0, [r7, #4]
    6cec:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	685a      	ldr	r2, [r3, #4]
    6cf2:	683b      	ldr	r3, [r7, #0]
    6cf4:	4013      	ands	r3, r2
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	bf14      	ite	ne
    6cfa:	2301      	movne	r3, #1
    6cfc:	2300      	moveq	r3, #0
    6cfe:	b2db      	uxtb	r3, r3
}
    6d00:	4618      	mov	r0, r3
    6d02:	370c      	adds	r7, #12
    6d04:	46bd      	mov	sp, r7
    6d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d0a:	4770      	bx	lr

00006d0c <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    6d0c:	b480      	push	{r7}
    6d0e:	b083      	sub	sp, #12
    6d10:	af00      	add	r7, sp, #0
    6d12:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	695b      	ldr	r3, [r3, #20]
}
    6d18:	4618      	mov	r0, r3
    6d1a:	370c      	adds	r7, #12
    6d1c:	46bd      	mov	sp, r7
    6d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d22:	4770      	bx	lr

00006d24 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    6d24:	b480      	push	{r7}
    6d26:	b083      	sub	sp, #12
    6d28:	af00      	add	r7, sp, #0
    6d2a:	6078      	str	r0, [r7, #4]
    6d2c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    6d2e:	687b      	ldr	r3, [r7, #4]
    6d30:	683a      	ldr	r2, [r7, #0]
    6d32:	615a      	str	r2, [r3, #20]
}
    6d34:	bf00      	nop
    6d36:	370c      	adds	r7, #12
    6d38:	46bd      	mov	sp, r7
    6d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d3e:	4770      	bx	lr

00006d40 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    6d40:	b480      	push	{r7}
    6d42:	b083      	sub	sp, #12
    6d44:	af00      	add	r7, sp, #0
    6d46:	6078      	str	r0, [r7, #4]
    6d48:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	683a      	ldr	r2, [r7, #0]
    6d4e:	611a      	str	r2, [r3, #16]
}
    6d50:	bf00      	nop
    6d52:	370c      	adds	r7, #12
    6d54:	46bd      	mov	sp, r7
    6d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d5a:	4770      	bx	lr

00006d5c <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    6d5c:	b480      	push	{r7}
    6d5e:	b083      	sub	sp, #12
    6d60:	af00      	add	r7, sp, #0
    6d62:	6078      	str	r0, [r7, #4]
    6d64:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    6d66:	687b      	ldr	r3, [r7, #4]
    6d68:	683a      	ldr	r2, [r7, #0]
    6d6a:	60da      	str	r2, [r3, #12]
}
    6d6c:	bf00      	nop
    6d6e:	370c      	adds	r7, #12
    6d70:	46bd      	mov	sp, r7
    6d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d76:	4770      	bx	lr

00006d78 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b082      	sub	sp, #8
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	781b      	ldrb	r3, [r3, #0]
    6d84:	b2db      	uxtb	r3, r3
    6d86:	f043 0302 	orr.w	r3, r3, #2
    6d8a:	b2da      	uxtb	r2, r3
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6d90:	2103      	movs	r1, #3
    6d92:	6878      	ldr	r0, [r7, #4]
    6d94:	4b02      	ldr	r3, [pc, #8]	; (6da0 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    6d96:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6d98:	bf00      	nop
    6d9a:	3708      	adds	r7, #8
    6d9c:	46bd      	mov	sp, r7
    6d9e:	bd80      	pop	{r7, pc}
    6da0:	00006cc1 	.word	0x00006cc1

00006da4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6da4:	b580      	push	{r7, lr}
    6da6:	b082      	sub	sp, #8
    6da8:	af00      	add	r7, sp, #0
    6daa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	b2db      	uxtb	r3, r3
    6db2:	f023 0302 	bic.w	r3, r3, #2
    6db6:	b2da      	uxtb	r2, r3
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6dbc:	2103      	movs	r1, #3
    6dbe:	6878      	ldr	r0, [r7, #4]
    6dc0:	4b02      	ldr	r3, [pc, #8]	; (6dcc <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    6dc2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6dc4:	bf00      	nop
    6dc6:	3708      	adds	r7, #8
    6dc8:	46bd      	mov	sp, r7
    6dca:	bd80      	pop	{r7, pc}
    6dcc:	00006cc1 	.word	0x00006cc1

00006dd0 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    6dd0:	b580      	push	{r7, lr}
    6dd2:	b084      	sub	sp, #16
    6dd4:	af00      	add	r7, sp, #0
    6dd6:	6078      	str	r0, [r7, #4]
    6dd8:	460b      	mov	r3, r1
    6dda:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    6de2:	7bfb      	ldrb	r3, [r7, #15]
    6de4:	f023 0310 	bic.w	r3, r3, #16
    6de8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    6dea:	78fb      	ldrb	r3, [r7, #3]
    6dec:	011b      	lsls	r3, r3, #4
    6dee:	b25a      	sxtb	r2, r3
    6df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6df4:	4313      	orrs	r3, r2
    6df6:	b25b      	sxtb	r3, r3
    6df8:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	7bfa      	ldrb	r2, [r7, #15]
    6dfe:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6e00:	2103      	movs	r1, #3
    6e02:	6878      	ldr	r0, [r7, #4]
    6e04:	4b02      	ldr	r3, [pc, #8]	; (6e10 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    6e06:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e08:	bf00      	nop
    6e0a:	3710      	adds	r7, #16
    6e0c:	46bd      	mov	sp, r7
    6e0e:	bd80      	pop	{r7, pc}
    6e10:	00006cc1 	.word	0x00006cc1

00006e14 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6e14:	b580      	push	{r7, lr}
    6e16:	b084      	sub	sp, #16
    6e18:	af00      	add	r7, sp, #0
    6e1a:	6078      	str	r0, [r7, #4]
    6e1c:	460b      	mov	r3, r1
    6e1e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6e20:	2103      	movs	r1, #3
    6e22:	6878      	ldr	r0, [r7, #4]
    6e24:	4b06      	ldr	r3, [pc, #24]	; (6e40 <hri_eic_get_CTRLA_reg+0x2c>)
    6e26:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    6e28:	687b      	ldr	r3, [r7, #4]
    6e2a:	781b      	ldrb	r3, [r3, #0]
    6e2c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6e2e:	7bfa      	ldrb	r2, [r7, #15]
    6e30:	78fb      	ldrb	r3, [r7, #3]
    6e32:	4013      	ands	r3, r2
    6e34:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6e36:	7bfb      	ldrb	r3, [r7, #15]
}
    6e38:	4618      	mov	r0, r3
    6e3a:	3710      	adds	r7, #16
    6e3c:	46bd      	mov	sp, r7
    6e3e:	bd80      	pop	{r7, pc}
    6e40:	00006cc1 	.word	0x00006cc1

00006e44 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    6e44:	b580      	push	{r7, lr}
    6e46:	b082      	sub	sp, #8
    6e48:	af00      	add	r7, sp, #0
    6e4a:	6078      	str	r0, [r7, #4]
    6e4c:	460b      	mov	r3, r1
    6e4e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    6e50:	687b      	ldr	r3, [r7, #4]
    6e52:	78fa      	ldrb	r2, [r7, #3]
    6e54:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    6e56:	2103      	movs	r1, #3
    6e58:	6878      	ldr	r0, [r7, #4]
    6e5a:	4b03      	ldr	r3, [pc, #12]	; (6e68 <hri_eic_write_CTRLA_reg+0x24>)
    6e5c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e5e:	bf00      	nop
    6e60:	3708      	adds	r7, #8
    6e62:	46bd      	mov	sp, r7
    6e64:	bd80      	pop	{r7, pc}
    6e66:	bf00      	nop
    6e68:	00006cc1 	.word	0x00006cc1

00006e6c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    6e6c:	b480      	push	{r7}
    6e6e:	b083      	sub	sp, #12
    6e70:	af00      	add	r7, sp, #0
    6e72:	6078      	str	r0, [r7, #4]
    6e74:	460b      	mov	r3, r1
    6e76:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    6e78:	687b      	ldr	r3, [r7, #4]
    6e7a:	78fa      	ldrb	r2, [r7, #3]
    6e7c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e7e:	bf00      	nop
    6e80:	370c      	adds	r7, #12
    6e82:	46bd      	mov	sp, r7
    6e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e88:	4770      	bx	lr

00006e8a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    6e8a:	b480      	push	{r7}
    6e8c:	b083      	sub	sp, #12
    6e8e:	af00      	add	r7, sp, #0
    6e90:	6078      	str	r0, [r7, #4]
    6e92:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	683a      	ldr	r2, [r7, #0]
    6e98:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6e9a:	bf00      	nop
    6e9c:	370c      	adds	r7, #12
    6e9e:	46bd      	mov	sp, r7
    6ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea4:	4770      	bx	lr

00006ea6 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    6ea6:	b480      	push	{r7}
    6ea8:	b083      	sub	sp, #12
    6eaa:	af00      	add	r7, sp, #0
    6eac:	6078      	str	r0, [r7, #4]
    6eae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    6eb0:	687b      	ldr	r3, [r7, #4]
    6eb2:	683a      	ldr	r2, [r7, #0]
    6eb4:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6eb6:	bf00      	nop
    6eb8:	370c      	adds	r7, #12
    6eba:	46bd      	mov	sp, r7
    6ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec0:	4770      	bx	lr

00006ec2 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    6ec2:	b480      	push	{r7}
    6ec4:	b085      	sub	sp, #20
    6ec6:	af00      	add	r7, sp, #0
    6ec8:	60f8      	str	r0, [r7, #12]
    6eca:	460b      	mov	r3, r1
    6ecc:	607a      	str	r2, [r7, #4]
    6ece:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    6ed0:	7afb      	ldrb	r3, [r7, #11]
    6ed2:	68fa      	ldr	r2, [r7, #12]
    6ed4:	3306      	adds	r3, #6
    6ed6:	009b      	lsls	r3, r3, #2
    6ed8:	4413      	add	r3, r2
    6eda:	687a      	ldr	r2, [r7, #4]
    6edc:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6ede:	bf00      	nop
    6ee0:	3714      	adds	r7, #20
    6ee2:	46bd      	mov	sp, r7
    6ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ee8:	4770      	bx	lr

00006eea <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    6eea:	b480      	push	{r7}
    6eec:	b083      	sub	sp, #12
    6eee:	af00      	add	r7, sp, #0
    6ef0:	6078      	str	r0, [r7, #4]
    6ef2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	683a      	ldr	r2, [r7, #0]
    6ef8:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    6efa:	bf00      	nop
    6efc:	370c      	adds	r7, #12
    6efe:	46bd      	mov	sp, r7
    6f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f04:	4770      	bx	lr

00006f06 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    6f06:	b480      	push	{r7}
    6f08:	b083      	sub	sp, #12
    6f0a:	af00      	add	r7, sp, #0
    6f0c:	6078      	str	r0, [r7, #4]
    6f0e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	683a      	ldr	r2, [r7, #0]
    6f14:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    6f16:	bf00      	nop
    6f18:	370c      	adds	r7, #12
    6f1a:	46bd      	mov	sp, r7
    6f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f20:	4770      	bx	lr
	...

00006f24 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b082      	sub	sp, #8
    6f28:	af00      	add	r7, sp, #0
    6f2a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    6f2c:	2101      	movs	r1, #1
    6f2e:	483d      	ldr	r0, [pc, #244]	; (7024 <_ext_irq_init+0x100>)
    6f30:	4b3d      	ldr	r3, [pc, #244]	; (7028 <_ext_irq_init+0x104>)
    6f32:	4798      	blx	r3
    6f34:	4603      	mov	r3, r0
    6f36:	f083 0301 	eor.w	r3, r3, #1
    6f3a:	b2db      	uxtb	r3, r3
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d011      	beq.n	6f64 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    6f40:	2102      	movs	r1, #2
    6f42:	4838      	ldr	r0, [pc, #224]	; (7024 <_ext_irq_init+0x100>)
    6f44:	4b39      	ldr	r3, [pc, #228]	; (702c <_ext_irq_init+0x108>)
    6f46:	4798      	blx	r3
    6f48:	4603      	mov	r3, r0
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d006      	beq.n	6f5c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    6f4e:	4835      	ldr	r0, [pc, #212]	; (7024 <_ext_irq_init+0x100>)
    6f50:	4b37      	ldr	r3, [pc, #220]	; (7030 <_ext_irq_init+0x10c>)
    6f52:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    6f54:	2102      	movs	r1, #2
    6f56:	4833      	ldr	r0, [pc, #204]	; (7024 <_ext_irq_init+0x100>)
    6f58:	4b36      	ldr	r3, [pc, #216]	; (7034 <_ext_irq_init+0x110>)
    6f5a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    6f5c:	2101      	movs	r1, #1
    6f5e:	4831      	ldr	r0, [pc, #196]	; (7024 <_ext_irq_init+0x100>)
    6f60:	4b35      	ldr	r3, [pc, #212]	; (7038 <_ext_irq_init+0x114>)
    6f62:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    6f64:	2101      	movs	r1, #1
    6f66:	482f      	ldr	r0, [pc, #188]	; (7024 <_ext_irq_init+0x100>)
    6f68:	4b32      	ldr	r3, [pc, #200]	; (7034 <_ext_irq_init+0x110>)
    6f6a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    6f6c:	2100      	movs	r1, #0
    6f6e:	482d      	ldr	r0, [pc, #180]	; (7024 <_ext_irq_init+0x100>)
    6f70:	4b32      	ldr	r3, [pc, #200]	; (703c <_ext_irq_init+0x118>)
    6f72:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    6f74:	2100      	movs	r1, #0
    6f76:	482b      	ldr	r0, [pc, #172]	; (7024 <_ext_irq_init+0x100>)
    6f78:	4b31      	ldr	r3, [pc, #196]	; (7040 <_ext_irq_init+0x11c>)
    6f7a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    6f7c:	2100      	movs	r1, #0
    6f7e:	4829      	ldr	r0, [pc, #164]	; (7024 <_ext_irq_init+0x100>)
    6f80:	4b30      	ldr	r3, [pc, #192]	; (7044 <_ext_irq_init+0x120>)
    6f82:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6f84:	f240 3131 	movw	r1, #817	; 0x331
    6f88:	4826      	ldr	r0, [pc, #152]	; (7024 <_ext_irq_init+0x100>)
    6f8a:	4b2f      	ldr	r3, [pc, #188]	; (7048 <_ext_irq_init+0x124>)
    6f8c:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    6f8e:	f240 3131 	movw	r1, #817	; 0x331
    6f92:	4824      	ldr	r0, [pc, #144]	; (7024 <_ext_irq_init+0x100>)
    6f94:	4b2d      	ldr	r3, [pc, #180]	; (704c <_ext_irq_init+0x128>)
    6f96:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    6f98:	2100      	movs	r1, #0
    6f9a:	4822      	ldr	r0, [pc, #136]	; (7024 <_ext_irq_init+0x100>)
    6f9c:	4b2c      	ldr	r3, [pc, #176]	; (7050 <_ext_irq_init+0x12c>)
    6f9e:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6fa0:	4a2c      	ldr	r2, [pc, #176]	; (7054 <_ext_irq_init+0x130>)
    6fa2:	2100      	movs	r1, #0
    6fa4:	481f      	ldr	r0, [pc, #124]	; (7024 <_ext_irq_init+0x100>)
    6fa6:	4b2c      	ldr	r3, [pc, #176]	; (7058 <_ext_irq_init+0x134>)
    6fa8:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6faa:	2211      	movs	r2, #17
    6fac:	2101      	movs	r1, #1
    6fae:	481d      	ldr	r0, [pc, #116]	; (7024 <_ext_irq_init+0x100>)
    6fb0:	4b29      	ldr	r3, [pc, #164]	; (7058 <_ext_irq_init+0x134>)
    6fb2:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6fb4:	481b      	ldr	r0, [pc, #108]	; (7024 <_ext_irq_init+0x100>)
    6fb6:	4b29      	ldr	r3, [pc, #164]	; (705c <_ext_irq_init+0x138>)
    6fb8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    6fba:	200c      	movs	r0, #12
    6fbc:	4b28      	ldr	r3, [pc, #160]	; (7060 <_ext_irq_init+0x13c>)
    6fbe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    6fc0:	200c      	movs	r0, #12
    6fc2:	4b28      	ldr	r3, [pc, #160]	; (7064 <_ext_irq_init+0x140>)
    6fc4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    6fc6:	200c      	movs	r0, #12
    6fc8:	4b27      	ldr	r3, [pc, #156]	; (7068 <_ext_irq_init+0x144>)
    6fca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    6fcc:	2010      	movs	r0, #16
    6fce:	4b24      	ldr	r3, [pc, #144]	; (7060 <_ext_irq_init+0x13c>)
    6fd0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    6fd2:	2010      	movs	r0, #16
    6fd4:	4b23      	ldr	r3, [pc, #140]	; (7064 <_ext_irq_init+0x140>)
    6fd6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6fd8:	2010      	movs	r0, #16
    6fda:	4b23      	ldr	r3, [pc, #140]	; (7068 <_ext_irq_init+0x144>)
    6fdc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    6fde:	2011      	movs	r0, #17
    6fe0:	4b1f      	ldr	r3, [pc, #124]	; (7060 <_ext_irq_init+0x13c>)
    6fe2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    6fe4:	2011      	movs	r0, #17
    6fe6:	4b1f      	ldr	r3, [pc, #124]	; (7064 <_ext_irq_init+0x140>)
    6fe8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    6fea:	2011      	movs	r0, #17
    6fec:	4b1e      	ldr	r3, [pc, #120]	; (7068 <_ext_irq_init+0x144>)
    6fee:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6ff0:	2012      	movs	r0, #18
    6ff2:	4b1b      	ldr	r3, [pc, #108]	; (7060 <_ext_irq_init+0x13c>)
    6ff4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    6ff6:	2012      	movs	r0, #18
    6ff8:	4b1a      	ldr	r3, [pc, #104]	; (7064 <_ext_irq_init+0x140>)
    6ffa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    6ffc:	2012      	movs	r0, #18
    6ffe:	4b1a      	ldr	r3, [pc, #104]	; (7068 <_ext_irq_init+0x144>)
    7000:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    7002:	2013      	movs	r0, #19
    7004:	4b16      	ldr	r3, [pc, #88]	; (7060 <_ext_irq_init+0x13c>)
    7006:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    7008:	2013      	movs	r0, #19
    700a:	4b16      	ldr	r3, [pc, #88]	; (7064 <_ext_irq_init+0x140>)
    700c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    700e:	2013      	movs	r0, #19
    7010:	4b15      	ldr	r3, [pc, #84]	; (7068 <_ext_irq_init+0x144>)
    7012:	4798      	blx	r3

	callback = cb;
    7014:	4a15      	ldr	r2, [pc, #84]	; (706c <_ext_irq_init+0x148>)
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    701a:	2300      	movs	r3, #0
}
    701c:	4618      	mov	r0, r3
    701e:	3708      	adds	r7, #8
    7020:	46bd      	mov	sp, r7
    7022:	bd80      	pop	{r7, pc}
    7024:	40002800 	.word	0x40002800
    7028:	00006ce5 	.word	0x00006ce5
    702c:	00006e15 	.word	0x00006e15
    7030:	00006da5 	.word	0x00006da5
    7034:	00006cc1 	.word	0x00006cc1
    7038:	00006e45 	.word	0x00006e45
    703c:	00006dd1 	.word	0x00006dd1
    7040:	00006e6d 	.word	0x00006e6d
    7044:	00006e8b 	.word	0x00006e8b
    7048:	00006ea7 	.word	0x00006ea7
    704c:	00006eeb 	.word	0x00006eeb
    7050:	00006f07 	.word	0x00006f07
    7054:	00990003 	.word	0x00990003
    7058:	00006ec3 	.word	0x00006ec3
    705c:	00006d79 	.word	0x00006d79
    7060:	00006c41 	.word	0x00006c41
    7064:	00006c85 	.word	0x00006c85
    7068:	00006c05 	.word	0x00006c05
    706c:	2000212c 	.word	0x2000212c

00007070 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    7070:	b580      	push	{r7, lr}
    7072:	b084      	sub	sp, #16
    7074:	af00      	add	r7, sp, #0
    7076:	6078      	str	r0, [r7, #4]
    7078:	460b      	mov	r3, r1
    707a:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    707c:	23ff      	movs	r3, #255	; 0xff
    707e:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    7080:	2300      	movs	r3, #0
    7082:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    7084:	e010      	b.n	70a8 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    7086:	7bbb      	ldrb	r3, [r7, #14]
    7088:	4a1c      	ldr	r2, [pc, #112]	; (70fc <_ext_irq_enable+0x8c>)
    708a:	00db      	lsls	r3, r3, #3
    708c:	4413      	add	r3, r2
    708e:	685a      	ldr	r2, [r3, #4]
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	429a      	cmp	r2, r3
    7094:	d105      	bne.n	70a2 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    7096:	7bbb      	ldrb	r3, [r7, #14]
    7098:	4a18      	ldr	r2, [pc, #96]	; (70fc <_ext_irq_enable+0x8c>)
    709a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    709e:	73fb      	strb	r3, [r7, #15]
			break;
    70a0:	e005      	b.n	70ae <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    70a2:	7bbb      	ldrb	r3, [r7, #14]
    70a4:	3301      	adds	r3, #1
    70a6:	73bb      	strb	r3, [r7, #14]
    70a8:	7bbb      	ldrb	r3, [r7, #14]
    70aa:	2b04      	cmp	r3, #4
    70ac:	d9eb      	bls.n	7086 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    70ae:	7bfb      	ldrb	r3, [r7, #15]
    70b0:	2bff      	cmp	r3, #255	; 0xff
    70b2:	d102      	bne.n	70ba <_ext_irq_enable+0x4a>
		return -1;
    70b4:	f04f 33ff 	mov.w	r3, #4294967295
    70b8:	e01c      	b.n	70f4 <_ext_irq_enable+0x84>
	}

	if (enable) {
    70ba:	78fb      	ldrb	r3, [r7, #3]
    70bc:	2b00      	cmp	r3, #0
    70be:	d008      	beq.n	70d2 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    70c0:	7bfb      	ldrb	r3, [r7, #15]
    70c2:	2201      	movs	r2, #1
    70c4:	fa02 f303 	lsl.w	r3, r2, r3
    70c8:	4619      	mov	r1, r3
    70ca:	480d      	ldr	r0, [pc, #52]	; (7100 <_ext_irq_enable+0x90>)
    70cc:	4b0d      	ldr	r3, [pc, #52]	; (7104 <_ext_irq_enable+0x94>)
    70ce:	4798      	blx	r3
    70d0:	e00f      	b.n	70f2 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    70d2:	7bfb      	ldrb	r3, [r7, #15]
    70d4:	2201      	movs	r2, #1
    70d6:	fa02 f303 	lsl.w	r3, r2, r3
    70da:	4619      	mov	r1, r3
    70dc:	4808      	ldr	r0, [pc, #32]	; (7100 <_ext_irq_enable+0x90>)
    70de:	4b0a      	ldr	r3, [pc, #40]	; (7108 <_ext_irq_enable+0x98>)
    70e0:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    70e2:	7bfb      	ldrb	r3, [r7, #15]
    70e4:	2201      	movs	r2, #1
    70e6:	fa02 f303 	lsl.w	r3, r2, r3
    70ea:	4619      	mov	r1, r3
    70ec:	4804      	ldr	r0, [pc, #16]	; (7100 <_ext_irq_enable+0x90>)
    70ee:	4b07      	ldr	r3, [pc, #28]	; (710c <_ext_irq_enable+0x9c>)
    70f0:	4798      	blx	r3
	}

	return ERR_NONE;
    70f2:	2300      	movs	r3, #0
}
    70f4:	4618      	mov	r0, r3
    70f6:	3710      	adds	r7, #16
    70f8:	46bd      	mov	sp, r7
    70fa:	bd80      	pop	{r7, pc}
    70fc:	000126f8 	.word	0x000126f8
    7100:	40002800 	.word	0x40002800
    7104:	00006d41 	.word	0x00006d41
    7108:	00006d5d 	.word	0x00006d5d
    710c:	00006d25 	.word	0x00006d25

00007110 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    7110:	b580      	push	{r7, lr}
    7112:	b084      	sub	sp, #16
    7114:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    7116:	4841      	ldr	r0, [pc, #260]	; (721c <_ext_irq_handler+0x10c>)
    7118:	4b41      	ldr	r3, [pc, #260]	; (7220 <_ext_irq_handler+0x110>)
    711a:	4798      	blx	r3
    711c:	4603      	mov	r3, r0
    711e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    7120:	f04f 33ff 	mov.w	r3, #4294967295
    7124:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    7126:	683b      	ldr	r3, [r7, #0]
    7128:	4619      	mov	r1, r3
    712a:	483c      	ldr	r0, [pc, #240]	; (721c <_ext_irq_handler+0x10c>)
    712c:	4b3d      	ldr	r3, [pc, #244]	; (7224 <_ext_irq_handler+0x114>)
    712e:	4798      	blx	r3

	ASSERT(callback);
    7130:	4b3d      	ldr	r3, [pc, #244]	; (7228 <_ext_irq_handler+0x118>)
    7132:	681b      	ldr	r3, [r3, #0]
    7134:	2b00      	cmp	r3, #0
    7136:	bf14      	ite	ne
    7138:	2301      	movne	r3, #1
    713a:	2300      	moveq	r3, #0
    713c:	b2db      	uxtb	r3, r3
    713e:	22f8      	movs	r2, #248	; 0xf8
    7140:	493a      	ldr	r1, [pc, #232]	; (722c <_ext_irq_handler+0x11c>)
    7142:	4618      	mov	r0, r3
    7144:	4b3a      	ldr	r3, [pc, #232]	; (7230 <_ext_irq_handler+0x120>)
    7146:	4798      	blx	r3

	while (flags) {
    7148:	e060      	b.n	720c <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    714a:	683b      	ldr	r3, [r7, #0]
    714c:	4618      	mov	r0, r3
    714e:	4b39      	ldr	r3, [pc, #228]	; (7234 <_ext_irq_handler+0x124>)
    7150:	4798      	blx	r3
    7152:	4603      	mov	r3, r0
    7154:	b2db      	uxtb	r3, r3
    7156:	3b01      	subs	r3, #1
    7158:	b2db      	uxtb	r3, r3
    715a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    715c:	e047      	b.n	71ee <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    715e:	2300      	movs	r3, #0
    7160:	71fb      	strb	r3, [r7, #7]
    7162:	2305      	movs	r3, #5
    7164:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    7166:	e024      	b.n	71b2 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    7168:	79ba      	ldrb	r2, [r7, #6]
    716a:	79fb      	ldrb	r3, [r7, #7]
    716c:	4413      	add	r3, r2
    716e:	105b      	asrs	r3, r3, #1
    7170:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    7172:	797b      	ldrb	r3, [r7, #5]
    7174:	4a30      	ldr	r2, [pc, #192]	; (7238 <_ext_irq_handler+0x128>)
    7176:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    717a:	461a      	mov	r2, r3
    717c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7180:	429a      	cmp	r2, r3
    7182:	d106      	bne.n	7192 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    7184:	797b      	ldrb	r3, [r7, #5]
    7186:	4a2c      	ldr	r2, [pc, #176]	; (7238 <_ext_irq_handler+0x128>)
    7188:	00db      	lsls	r3, r3, #3
    718a:	4413      	add	r3, r2
    718c:	685b      	ldr	r3, [r3, #4]
    718e:	60bb      	str	r3, [r7, #8]
					break;
    7190:	e013      	b.n	71ba <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    7192:	797b      	ldrb	r3, [r7, #5]
    7194:	4a28      	ldr	r2, [pc, #160]	; (7238 <_ext_irq_handler+0x128>)
    7196:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    719a:	461a      	mov	r2, r3
    719c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    71a0:	429a      	cmp	r2, r3
    71a2:	da03      	bge.n	71ac <_ext_irq_handler+0x9c>
					lower = middle + 1;
    71a4:	797b      	ldrb	r3, [r7, #5]
    71a6:	3301      	adds	r3, #1
    71a8:	71fb      	strb	r3, [r7, #7]
    71aa:	e002      	b.n	71b2 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    71ac:	797b      	ldrb	r3, [r7, #5]
    71ae:	3b01      	subs	r3, #1
    71b0:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    71b2:	79ba      	ldrb	r2, [r7, #6]
    71b4:	79fb      	ldrb	r3, [r7, #7]
    71b6:	429a      	cmp	r2, r3
    71b8:	d2d6      	bcs.n	7168 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    71ba:	68bb      	ldr	r3, [r7, #8]
    71bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    71c0:	d003      	beq.n	71ca <_ext_irq_handler+0xba>
				callback(pin);
    71c2:	4b19      	ldr	r3, [pc, #100]	; (7228 <_ext_irq_handler+0x118>)
    71c4:	681b      	ldr	r3, [r3, #0]
    71c6:	68b8      	ldr	r0, [r7, #8]
    71c8:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    71ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    71ce:	2201      	movs	r2, #1
    71d0:	fa02 f303 	lsl.w	r3, r2, r3
    71d4:	43da      	mvns	r2, r3
    71d6:	683b      	ldr	r3, [r7, #0]
    71d8:	4013      	ands	r3, r2
    71da:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    71dc:	683b      	ldr	r3, [r7, #0]
    71de:	4618      	mov	r0, r3
    71e0:	4b14      	ldr	r3, [pc, #80]	; (7234 <_ext_irq_handler+0x124>)
    71e2:	4798      	blx	r3
    71e4:	4603      	mov	r3, r0
    71e6:	b2db      	uxtb	r3, r3
    71e8:	3b01      	subs	r3, #1
    71ea:	b2db      	uxtb	r3, r3
    71ec:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    71ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    71f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    71f6:	d1b2      	bne.n	715e <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    71f8:	4808      	ldr	r0, [pc, #32]	; (721c <_ext_irq_handler+0x10c>)
    71fa:	4b09      	ldr	r3, [pc, #36]	; (7220 <_ext_irq_handler+0x110>)
    71fc:	4798      	blx	r3
    71fe:	4603      	mov	r3, r0
    7200:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    7202:	683b      	ldr	r3, [r7, #0]
    7204:	4619      	mov	r1, r3
    7206:	4805      	ldr	r0, [pc, #20]	; (721c <_ext_irq_handler+0x10c>)
    7208:	4b06      	ldr	r3, [pc, #24]	; (7224 <_ext_irq_handler+0x114>)
    720a:	4798      	blx	r3
	while (flags) {
    720c:	683b      	ldr	r3, [r7, #0]
    720e:	2b00      	cmp	r3, #0
    7210:	d19b      	bne.n	714a <_ext_irq_handler+0x3a>
	}
}
    7212:	bf00      	nop
    7214:	3710      	adds	r7, #16
    7216:	46bd      	mov	sp, r7
    7218:	bd80      	pop	{r7, pc}
    721a:	bf00      	nop
    721c:	40002800 	.word	0x40002800
    7220:	00006d0d 	.word	0x00006d0d
    7224:	00006d25 	.word	0x00006d25
    7228:	2000212c 	.word	0x2000212c
    722c:	00012720 	.word	0x00012720
    7230:	00005f89 	.word	0x00005f89
    7234:	00011395 	.word	0x00011395
    7238:	000126f8 	.word	0x000126f8

0000723c <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    723c:	b580      	push	{r7, lr}
    723e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7240:	4b01      	ldr	r3, [pc, #4]	; (7248 <EIC_0_Handler+0xc>)
    7242:	4798      	blx	r3
} /**
    7244:	bf00      	nop
    7246:	bd80      	pop	{r7, pc}
    7248:	00007111 	.word	0x00007111

0000724c <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    724c:	b580      	push	{r7, lr}
    724e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7250:	4b01      	ldr	r3, [pc, #4]	; (7258 <EIC_4_Handler+0xc>)
    7252:	4798      	blx	r3
} /**
    7254:	bf00      	nop
    7256:	bd80      	pop	{r7, pc}
    7258:	00007111 	.word	0x00007111

0000725c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    725c:	b580      	push	{r7, lr}
    725e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7260:	4b01      	ldr	r3, [pc, #4]	; (7268 <EIC_5_Handler+0xc>)
    7262:	4798      	blx	r3
} /**
    7264:	bf00      	nop
    7266:	bd80      	pop	{r7, pc}
    7268:	00007111 	.word	0x00007111

0000726c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    726c:	b580      	push	{r7, lr}
    726e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7270:	4b01      	ldr	r3, [pc, #4]	; (7278 <EIC_6_Handler+0xc>)
    7272:	4798      	blx	r3
} /**
    7274:	bf00      	nop
    7276:	bd80      	pop	{r7, pc}
    7278:	00007111 	.word	0x00007111

0000727c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    727c:	b580      	push	{r7, lr}
    727e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    7280:	4b01      	ldr	r3, [pc, #4]	; (7288 <EIC_7_Handler+0xc>)
    7282:	4798      	blx	r3
}
    7284:	bf00      	nop
    7286:	bd80      	pop	{r7, pc}
    7288:	00007111 	.word	0x00007111

0000728c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    728c:	b480      	push	{r7}
    728e:	b085      	sub	sp, #20
    7290:	af00      	add	r7, sp, #0
    7292:	60f8      	str	r0, [r7, #12]
    7294:	460b      	mov	r3, r1
    7296:	607a      	str	r2, [r7, #4]
    7298:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    729a:	7afa      	ldrb	r2, [r7, #11]
    729c:	68fb      	ldr	r3, [r7, #12]
    729e:	3248      	adds	r2, #72	; 0x48
    72a0:	6879      	ldr	r1, [r7, #4]
    72a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    72a6:	bf00      	nop
    72a8:	3714      	adds	r7, #20
    72aa:	46bd      	mov	sp, r7
    72ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b0:	4770      	bx	lr

000072b2 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    72b2:	b480      	push	{r7}
    72b4:	b083      	sub	sp, #12
    72b6:	af00      	add	r7, sp, #0
    72b8:	6078      	str	r0, [r7, #4]
    72ba:	460b      	mov	r3, r1
    72bc:	70fb      	strb	r3, [r7, #3]
    72be:	4613      	mov	r3, r2
    72c0:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    72c2:	78fb      	ldrb	r3, [r7, #3]
    72c4:	687a      	ldr	r2, [r7, #4]
    72c6:	3304      	adds	r3, #4
    72c8:	00db      	lsls	r3, r3, #3
    72ca:	4413      	add	r3, r2
    72cc:	78ba      	ldrb	r2, [r7, #2]
    72ce:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    72d0:	78fb      	ldrb	r3, [r7, #3]
    72d2:	78ba      	ldrb	r2, [r7, #2]
    72d4:	43d2      	mvns	r2, r2
    72d6:	b2d1      	uxtb	r1, r2
    72d8:	687a      	ldr	r2, [r7, #4]
    72da:	3304      	adds	r3, #4
    72dc:	00db      	lsls	r3, r3, #3
    72de:	4413      	add	r3, r2
    72e0:	460a      	mov	r2, r1
    72e2:	711a      	strb	r2, [r3, #4]
}
    72e4:	bf00      	nop
    72e6:	370c      	adds	r7, #12
    72e8:	46bd      	mov	sp, r7
    72ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ee:	4770      	bx	lr

000072f0 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    72f0:	b480      	push	{r7}
    72f2:	b085      	sub	sp, #20
    72f4:	af00      	add	r7, sp, #0
    72f6:	60f8      	str	r0, [r7, #12]
    72f8:	460b      	mov	r3, r1
    72fa:	607a      	str	r2, [r7, #4]
    72fc:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    72fe:	7afa      	ldrb	r2, [r7, #11]
    7300:	68fb      	ldr	r3, [r7, #12]
    7302:	3204      	adds	r2, #4
    7304:	6879      	ldr	r1, [r7, #4]
    7306:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    730a:	bf00      	nop
    730c:	3714      	adds	r7, #20
    730e:	46bd      	mov	sp, r7
    7310:	f85d 7b04 	ldr.w	r7, [sp], #4
    7314:	4770      	bx	lr
	...

00007318 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    7318:	b580      	push	{r7, lr}
    731a:	b082      	sub	sp, #8
    731c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    731e:	2300      	movs	r3, #0
    7320:	71fb      	strb	r3, [r7, #7]
    7322:	e00b      	b.n	733c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    7324:	79fb      	ldrb	r3, [r7, #7]
    7326:	4a18      	ldr	r2, [pc, #96]	; (7388 <_event_system_init+0x70>)
    7328:	5cd3      	ldrb	r3, [r2, r3]
    732a:	461a      	mov	r2, r3
    732c:	79fb      	ldrb	r3, [r7, #7]
    732e:	4619      	mov	r1, r3
    7330:	4816      	ldr	r0, [pc, #88]	; (738c <_event_system_init+0x74>)
    7332:	4b17      	ldr	r3, [pc, #92]	; (7390 <_event_system_init+0x78>)
    7334:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    7336:	79fb      	ldrb	r3, [r7, #7]
    7338:	3301      	adds	r3, #1
    733a:	71fb      	strb	r3, [r7, #7]
    733c:	79fb      	ldrb	r3, [r7, #7]
    733e:	2b42      	cmp	r3, #66	; 0x42
    7340:	d9f0      	bls.n	7324 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7342:	2300      	movs	r3, #0
    7344:	71fb      	strb	r3, [r7, #7]
    7346:	e016      	b.n	7376 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    7348:	79fb      	ldrb	r3, [r7, #7]
    734a:	4a12      	ldr	r2, [pc, #72]	; (7394 <_event_system_init+0x7c>)
    734c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7350:	461a      	mov	r2, r3
    7352:	79fb      	ldrb	r3, [r7, #7]
    7354:	4619      	mov	r1, r3
    7356:	480d      	ldr	r0, [pc, #52]	; (738c <_event_system_init+0x74>)
    7358:	4b0f      	ldr	r3, [pc, #60]	; (7398 <_event_system_init+0x80>)
    735a:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    735c:	79fb      	ldrb	r3, [r7, #7]
    735e:	4a0f      	ldr	r2, [pc, #60]	; (739c <_event_system_init+0x84>)
    7360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7364:	b2da      	uxtb	r2, r3
    7366:	79fb      	ldrb	r3, [r7, #7]
    7368:	4619      	mov	r1, r3
    736a:	4808      	ldr	r0, [pc, #32]	; (738c <_event_system_init+0x74>)
    736c:	4b0c      	ldr	r3, [pc, #48]	; (73a0 <_event_system_init+0x88>)
    736e:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    7370:	79fb      	ldrb	r3, [r7, #7]
    7372:	3301      	adds	r3, #1
    7374:	71fb      	strb	r3, [r7, #7]
    7376:	79fb      	ldrb	r3, [r7, #7]
    7378:	2b1f      	cmp	r3, #31
    737a:	d9e5      	bls.n	7348 <_event_system_init+0x30>
	}

	return ERR_NONE;
    737c:	2300      	movs	r3, #0
}
    737e:	4618      	mov	r0, r3
    7380:	3708      	adds	r7, #8
    7382:	46bd      	mov	sp, r7
    7384:	bd80      	pop	{r7, pc}
    7386:	bf00      	nop
    7388:	00012738 	.word	0x00012738
    738c:	4100e000 	.word	0x4100e000
    7390:	0000728d 	.word	0x0000728d
    7394:	0001277c 	.word	0x0001277c
    7398:	000072f1 	.word	0x000072f1
    739c:	000127bc 	.word	0x000127bc
    73a0:	000072b3 	.word	0x000072b3

000073a4 <hri_gclk_wait_for_sync>:
{
    73a4:	b480      	push	{r7}
    73a6:	b083      	sub	sp, #12
    73a8:	af00      	add	r7, sp, #0
    73aa:	6078      	str	r0, [r7, #4]
    73ac:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    73ae:	bf00      	nop
    73b0:	687b      	ldr	r3, [r7, #4]
    73b2:	685a      	ldr	r2, [r3, #4]
    73b4:	683b      	ldr	r3, [r7, #0]
    73b6:	4013      	ands	r3, r2
    73b8:	2b00      	cmp	r3, #0
    73ba:	d1f9      	bne.n	73b0 <hri_gclk_wait_for_sync+0xc>
}
    73bc:	bf00      	nop
    73be:	370c      	adds	r7, #12
    73c0:	46bd      	mov	sp, r7
    73c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    73c6:	4770      	bx	lr

000073c8 <hri_gclk_write_GENCTRL_reg>:
{
    73c8:	b580      	push	{r7, lr}
    73ca:	b084      	sub	sp, #16
    73cc:	af00      	add	r7, sp, #0
    73ce:	60f8      	str	r0, [r7, #12]
    73d0:	460b      	mov	r3, r1
    73d2:	607a      	str	r2, [r7, #4]
    73d4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    73d6:	7afa      	ldrb	r2, [r7, #11]
    73d8:	68fb      	ldr	r3, [r7, #12]
    73da:	3208      	adds	r2, #8
    73dc:	6879      	ldr	r1, [r7, #4]
    73de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    73e2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    73e6:	68f8      	ldr	r0, [r7, #12]
    73e8:	4b02      	ldr	r3, [pc, #8]	; (73f4 <hri_gclk_write_GENCTRL_reg+0x2c>)
    73ea:	4798      	blx	r3
}
    73ec:	bf00      	nop
    73ee:	3710      	adds	r7, #16
    73f0:	46bd      	mov	sp, r7
    73f2:	bd80      	pop	{r7, pc}
    73f4:	000073a5 	.word	0x000073a5

000073f8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    73f8:	b580      	push	{r7, lr}
    73fa:	b082      	sub	sp, #8
    73fc:	af00      	add	r7, sp, #0
    73fe:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	f003 0301 	and.w	r3, r3, #1
    7406:	2b00      	cmp	r3, #0
    7408:	d004      	beq.n	7414 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    740a:	4a36      	ldr	r2, [pc, #216]	; (74e4 <_gclk_init_generators_by_fref+0xec>)
    740c:	2100      	movs	r1, #0
    740e:	4836      	ldr	r0, [pc, #216]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    7410:	4b36      	ldr	r3, [pc, #216]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    7412:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	f003 0302 	and.w	r3, r3, #2
    741a:	2b00      	cmp	r3, #0
    741c:	d004      	beq.n	7428 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    741e:	4a34      	ldr	r2, [pc, #208]	; (74f0 <_gclk_init_generators_by_fref+0xf8>)
    7420:	2101      	movs	r1, #1
    7422:	4831      	ldr	r0, [pc, #196]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    7424:	4b31      	ldr	r3, [pc, #196]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    7426:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    7428:	687b      	ldr	r3, [r7, #4]
    742a:	f003 0304 	and.w	r3, r3, #4
    742e:	2b00      	cmp	r3, #0
    7430:	d004      	beq.n	743c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    7432:	4a30      	ldr	r2, [pc, #192]	; (74f4 <_gclk_init_generators_by_fref+0xfc>)
    7434:	2102      	movs	r1, #2
    7436:	482c      	ldr	r0, [pc, #176]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    7438:	4b2c      	ldr	r3, [pc, #176]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    743a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    743c:	687b      	ldr	r3, [r7, #4]
    743e:	f003 0308 	and.w	r3, r3, #8
    7442:	2b00      	cmp	r3, #0
    7444:	d004      	beq.n	7450 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    7446:	4a2c      	ldr	r2, [pc, #176]	; (74f8 <_gclk_init_generators_by_fref+0x100>)
    7448:	2103      	movs	r1, #3
    744a:	4827      	ldr	r0, [pc, #156]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    744c:	4b27      	ldr	r3, [pc, #156]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    744e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    7450:	687b      	ldr	r3, [r7, #4]
    7452:	f003 0310 	and.w	r3, r3, #16
    7456:	2b00      	cmp	r3, #0
    7458:	d004      	beq.n	7464 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    745a:	4a28      	ldr	r2, [pc, #160]	; (74fc <_gclk_init_generators_by_fref+0x104>)
    745c:	2104      	movs	r1, #4
    745e:	4822      	ldr	r0, [pc, #136]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    7460:	4b22      	ldr	r3, [pc, #136]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    7462:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    7464:	687b      	ldr	r3, [r7, #4]
    7466:	f003 0320 	and.w	r3, r3, #32
    746a:	2b00      	cmp	r3, #0
    746c:	d004      	beq.n	7478 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    746e:	4a24      	ldr	r2, [pc, #144]	; (7500 <_gclk_init_generators_by_fref+0x108>)
    7470:	2105      	movs	r1, #5
    7472:	481d      	ldr	r0, [pc, #116]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    7474:	4b1d      	ldr	r3, [pc, #116]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    7476:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    7478:	687b      	ldr	r3, [r7, #4]
    747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    747e:	2b00      	cmp	r3, #0
    7480:	d004      	beq.n	748c <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    7482:	4a20      	ldr	r2, [pc, #128]	; (7504 <_gclk_init_generators_by_fref+0x10c>)
    7484:	2106      	movs	r1, #6
    7486:	4818      	ldr	r0, [pc, #96]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    7488:	4b18      	ldr	r3, [pc, #96]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    748a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    748c:	687b      	ldr	r3, [r7, #4]
    748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7492:	2b00      	cmp	r3, #0
    7494:	d004      	beq.n	74a0 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    7496:	4a1c      	ldr	r2, [pc, #112]	; (7508 <_gclk_init_generators_by_fref+0x110>)
    7498:	2107      	movs	r1, #7
    749a:	4813      	ldr	r0, [pc, #76]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    749c:	4b13      	ldr	r3, [pc, #76]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    749e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    74a0:	687b      	ldr	r3, [r7, #4]
    74a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    74a6:	2b00      	cmp	r3, #0
    74a8:	d004      	beq.n	74b4 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    74aa:	4a18      	ldr	r2, [pc, #96]	; (750c <_gclk_init_generators_by_fref+0x114>)
    74ac:	2108      	movs	r1, #8
    74ae:	480e      	ldr	r0, [pc, #56]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    74b0:	4b0e      	ldr	r3, [pc, #56]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    74b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    74ba:	2b00      	cmp	r3, #0
    74bc:	d004      	beq.n	74c8 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    74be:	4a14      	ldr	r2, [pc, #80]	; (7510 <_gclk_init_generators_by_fref+0x118>)
    74c0:	210a      	movs	r1, #10
    74c2:	4809      	ldr	r0, [pc, #36]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    74c4:	4b09      	ldr	r3, [pc, #36]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    74c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    74c8:	687b      	ldr	r3, [r7, #4]
    74ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    74ce:	2b00      	cmp	r3, #0
    74d0:	d004      	beq.n	74dc <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    74d2:	4a10      	ldr	r2, [pc, #64]	; (7514 <_gclk_init_generators_by_fref+0x11c>)
    74d4:	210b      	movs	r1, #11
    74d6:	4804      	ldr	r0, [pc, #16]	; (74e8 <_gclk_init_generators_by_fref+0xf0>)
    74d8:	4b04      	ldr	r3, [pc, #16]	; (74ec <_gclk_init_generators_by_fref+0xf4>)
    74da:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    74dc:	bf00      	nop
    74de:	3708      	adds	r7, #8
    74e0:	46bd      	mov	sp, r7
    74e2:	bd80      	pop	{r7, pc}
    74e4:	00010107 	.word	0x00010107
    74e8:	40001c00 	.word	0x40001c00
    74ec:	000073c9 	.word	0x000073c9
    74f0:	00010907 	.word	0x00010907
    74f4:	00010906 	.word	0x00010906
    74f8:	00020908 	.word	0x00020908
    74fc:	00010901 	.word	0x00010901
    7500:	00062901 	.word	0x00062901
    7504:	000c2901 	.word	0x000c2901
    7508:	00082908 	.word	0x00082908
    750c:	00032901 	.word	0x00032901
    7510:	00010905 	.word	0x00010905
    7514:	00041905 	.word	0x00041905

00007518 <hri_mclk_write_CPUDIV_reg>:
{
    7518:	b480      	push	{r7}
    751a:	b083      	sub	sp, #12
    751c:	af00      	add	r7, sp, #0
    751e:	6078      	str	r0, [r7, #4]
    7520:	460b      	mov	r3, r1
    7522:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    7524:	687b      	ldr	r3, [r7, #4]
    7526:	78fa      	ldrb	r2, [r7, #3]
    7528:	715a      	strb	r2, [r3, #5]
}
    752a:	bf00      	nop
    752c:	370c      	adds	r7, #12
    752e:	46bd      	mov	sp, r7
    7530:	f85d 7b04 	ldr.w	r7, [sp], #4
    7534:	4770      	bx	lr
	...

00007538 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    7538:	b580      	push	{r7, lr}
    753a:	b082      	sub	sp, #8
    753c:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    753e:	4b05      	ldr	r3, [pc, #20]	; (7554 <_mclk_init+0x1c>)
    7540:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    7542:	2101      	movs	r1, #1
    7544:	6878      	ldr	r0, [r7, #4]
    7546:	4b04      	ldr	r3, [pc, #16]	; (7558 <_mclk_init+0x20>)
    7548:	4798      	blx	r3
}
    754a:	bf00      	nop
    754c:	3708      	adds	r7, #8
    754e:	46bd      	mov	sp, r7
    7550:	bd80      	pop	{r7, pc}
    7552:	bf00      	nop
    7554:	40000800 	.word	0x40000800
    7558:	00007519 	.word	0x00007519

0000755c <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    755c:	b480      	push	{r7}
    755e:	b083      	sub	sp, #12
    7560:	af00      	add	r7, sp, #0
    7562:	6078      	str	r0, [r7, #4]
    7564:	460b      	mov	r3, r1
    7566:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    7568:	687b      	ldr	r3, [r7, #4]
    756a:	78fa      	ldrb	r2, [r7, #3]
    756c:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    756e:	bf00      	nop
    7570:	370c      	adds	r7, #12
    7572:	46bd      	mov	sp, r7
    7574:	f85d 7b04 	ldr.w	r7, [sp], #4
    7578:	4770      	bx	lr

0000757a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    757a:	b480      	push	{r7}
    757c:	b083      	sub	sp, #12
    757e:	af00      	add	r7, sp, #0
    7580:	6078      	str	r0, [r7, #4]
    7582:	460b      	mov	r3, r1
    7584:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    7586:	687b      	ldr	r3, [r7, #4]
    7588:	887a      	ldrh	r2, [r7, #2]
    758a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    758c:	bf00      	nop
    758e:	370c      	adds	r7, #12
    7590:	46bd      	mov	sp, r7
    7592:	f85d 7b04 	ldr.w	r7, [sp], #4
    7596:	4770      	bx	lr

00007598 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    7598:	b480      	push	{r7}
    759a:	b083      	sub	sp, #12
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
    75a0:	460b      	mov	r3, r1
    75a2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	78fa      	ldrb	r2, [r7, #3]
    75a8:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    75aa:	bf00      	nop
    75ac:	370c      	adds	r7, #12
    75ae:	46bd      	mov	sp, r7
    75b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    75b4:	4770      	bx	lr

000075b6 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    75b6:	b480      	push	{r7}
    75b8:	b083      	sub	sp, #12
    75ba:	af00      	add	r7, sp, #0
    75bc:	6078      	str	r0, [r7, #4]
    75be:	460b      	mov	r3, r1
    75c0:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    75c2:	687b      	ldr	r3, [r7, #4]
    75c4:	78fa      	ldrb	r2, [r7, #3]
    75c6:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    75c8:	bf00      	nop
    75ca:	370c      	adds	r7, #12
    75cc:	46bd      	mov	sp, r7
    75ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    75d2:	4770      	bx	lr

000075d4 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    75d4:	b480      	push	{r7}
    75d6:	b085      	sub	sp, #20
    75d8:	af00      	add	r7, sp, #0
    75da:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    75dc:	687b      	ldr	r3, [r7, #4]
    75de:	69db      	ldr	r3, [r3, #28]
    75e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    75e2:	68fb      	ldr	r3, [r7, #12]
    75e4:	0a1b      	lsrs	r3, r3, #8
    75e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    75ea:	60fb      	str	r3, [r7, #12]
	return tmp;
    75ec:	68fb      	ldr	r3, [r7, #12]
}
    75ee:	4618      	mov	r0, r3
    75f0:	3714      	adds	r7, #20
    75f2:	46bd      	mov	sp, r7
    75f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    75f8:	4770      	bx	lr

000075fa <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    75fa:	b480      	push	{r7}
    75fc:	b083      	sub	sp, #12
    75fe:	af00      	add	r7, sp, #0
    7600:	6078      	str	r0, [r7, #4]
    7602:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	683a      	ldr	r2, [r7, #0]
    7608:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    760a:	bf00      	nop
    760c:	370c      	adds	r7, #12
    760e:	46bd      	mov	sp, r7
    7610:	f85d 7b04 	ldr.w	r7, [sp], #4
    7614:	4770      	bx	lr
	...

00007618 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    7618:	b580      	push	{r7, lr}
    761a:	b082      	sub	sp, #8
    761c:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    761e:	4b13      	ldr	r3, [pc, #76]	; (766c <_osc32kctrl_init_sources+0x54>)
    7620:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    7622:	2300      	movs	r3, #0
    7624:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    7626:	f242 018e 	movw	r1, #8334	; 0x208e
    762a:	6878      	ldr	r0, [r7, #4]
    762c:	4b10      	ldr	r3, [pc, #64]	; (7670 <_osc32kctrl_init_sources+0x58>)
    762e:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    7630:	2100      	movs	r1, #0
    7632:	6878      	ldr	r0, [r7, #4]
    7634:	4b0f      	ldr	r3, [pc, #60]	; (7674 <_osc32kctrl_init_sources+0x5c>)
    7636:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    7638:	2100      	movs	r1, #0
    763a:	6878      	ldr	r0, [r7, #4]
    763c:	4b0e      	ldr	r3, [pc, #56]	; (7678 <_osc32kctrl_init_sources+0x60>)
    763e:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    7640:	6878      	ldr	r0, [r7, #4]
    7642:	4b0e      	ldr	r3, [pc, #56]	; (767c <_osc32kctrl_init_sources+0x64>)
    7644:	4798      	blx	r3
    7646:	4603      	mov	r3, r0
    7648:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    764a:	887b      	ldrh	r3, [r7, #2]
    764c:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    764e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    7652:	4619      	mov	r1, r3
    7654:	6878      	ldr	r0, [r7, #4]
    7656:	4b0a      	ldr	r3, [pc, #40]	; (7680 <_osc32kctrl_init_sources+0x68>)
    7658:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    765a:	2100      	movs	r1, #0
    765c:	6878      	ldr	r0, [r7, #4]
    765e:	4b09      	ldr	r3, [pc, #36]	; (7684 <_osc32kctrl_init_sources+0x6c>)
    7660:	4798      	blx	r3
	(void)calib;
}
    7662:	bf00      	nop
    7664:	3708      	adds	r7, #8
    7666:	46bd      	mov	sp, r7
    7668:	bd80      	pop	{r7, pc}
    766a:	bf00      	nop
    766c:	40001400 	.word	0x40001400
    7670:	0000757b 	.word	0x0000757b
    7674:	00007599 	.word	0x00007599
    7678:	000075b7 	.word	0x000075b7
    767c:	000075d5 	.word	0x000075d5
    7680:	000075fb 	.word	0x000075fb
    7684:	0000755d 	.word	0x0000755d

00007688 <hri_gclk_wait_for_sync>:
{
    7688:	b480      	push	{r7}
    768a:	b083      	sub	sp, #12
    768c:	af00      	add	r7, sp, #0
    768e:	6078      	str	r0, [r7, #4]
    7690:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    7692:	bf00      	nop
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	685a      	ldr	r2, [r3, #4]
    7698:	683b      	ldr	r3, [r7, #0]
    769a:	4013      	ands	r3, r2
    769c:	2b00      	cmp	r3, #0
    769e:	d1f9      	bne.n	7694 <hri_gclk_wait_for_sync+0xc>
}
    76a0:	bf00      	nop
    76a2:	370c      	adds	r7, #12
    76a4:	46bd      	mov	sp, r7
    76a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76aa:	4770      	bx	lr

000076ac <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    76ac:	b480      	push	{r7}
    76ae:	b083      	sub	sp, #12
    76b0:	af00      	add	r7, sp, #0
    76b2:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    76b4:	687b      	ldr	r3, [r7, #4]
    76b6:	685b      	ldr	r3, [r3, #4]
    76b8:	089b      	lsrs	r3, r3, #2
    76ba:	f003 0301 	and.w	r3, r3, #1
    76be:	2b00      	cmp	r3, #0
    76c0:	bf14      	ite	ne
    76c2:	2301      	movne	r3, #1
    76c4:	2300      	moveq	r3, #0
    76c6:	b2db      	uxtb	r3, r3
}
    76c8:	4618      	mov	r0, r3
    76ca:	370c      	adds	r7, #12
    76cc:	46bd      	mov	sp, r7
    76ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    76d2:	4770      	bx	lr

000076d4 <hri_gclk_read_SYNCBUSY_reg>:
{
    76d4:	b480      	push	{r7}
    76d6:	b083      	sub	sp, #12
    76d8:	af00      	add	r7, sp, #0
    76da:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	685b      	ldr	r3, [r3, #4]
}
    76e0:	4618      	mov	r0, r3
    76e2:	370c      	adds	r7, #12
    76e4:	46bd      	mov	sp, r7
    76e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ea:	4770      	bx	lr

000076ec <hri_gclk_write_GENCTRL_SRC_bf>:
{
    76ec:	b580      	push	{r7, lr}
    76ee:	b086      	sub	sp, #24
    76f0:	af00      	add	r7, sp, #0
    76f2:	60f8      	str	r0, [r7, #12]
    76f4:	460b      	mov	r3, r1
    76f6:	607a      	str	r2, [r7, #4]
    76f8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    76fa:	7afa      	ldrb	r2, [r7, #11]
    76fc:	68fb      	ldr	r3, [r7, #12]
    76fe:	3208      	adds	r2, #8
    7700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7704:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    7706:	697b      	ldr	r3, [r7, #20]
    7708:	f023 030f 	bic.w	r3, r3, #15
    770c:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    770e:	687b      	ldr	r3, [r7, #4]
    7710:	f003 030f 	and.w	r3, r3, #15
    7714:	697a      	ldr	r2, [r7, #20]
    7716:	4313      	orrs	r3, r2
    7718:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    771a:	7afa      	ldrb	r2, [r7, #11]
    771c:	68fb      	ldr	r3, [r7, #12]
    771e:	3208      	adds	r2, #8
    7720:	6979      	ldr	r1, [r7, #20]
    7722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    7726:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    772a:	68f8      	ldr	r0, [r7, #12]
    772c:	4b02      	ldr	r3, [pc, #8]	; (7738 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    772e:	4798      	blx	r3
}
    7730:	bf00      	nop
    7732:	3718      	adds	r7, #24
    7734:	46bd      	mov	sp, r7
    7736:	bd80      	pop	{r7, pc}
    7738:	00007689 	.word	0x00007689

0000773c <hri_gclk_write_PCHCTRL_reg>:
{
    773c:	b480      	push	{r7}
    773e:	b085      	sub	sp, #20
    7740:	af00      	add	r7, sp, #0
    7742:	60f8      	str	r0, [r7, #12]
    7744:	460b      	mov	r3, r1
    7746:	607a      	str	r2, [r7, #4]
    7748:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    774a:	7afa      	ldrb	r2, [r7, #11]
    774c:	68fb      	ldr	r3, [r7, #12]
    774e:	3220      	adds	r2, #32
    7750:	6879      	ldr	r1, [r7, #4]
    7752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7756:	bf00      	nop
    7758:	3714      	adds	r7, #20
    775a:	46bd      	mov	sp, r7
    775c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7760:	4770      	bx	lr

00007762 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    7762:	b480      	push	{r7}
    7764:	b085      	sub	sp, #20
    7766:	af00      	add	r7, sp, #0
    7768:	60f8      	str	r0, [r7, #12]
    776a:	460b      	mov	r3, r1
    776c:	607a      	str	r2, [r7, #4]
    776e:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    7770:	bf00      	nop
    7772:	7afa      	ldrb	r2, [r7, #11]
    7774:	68f9      	ldr	r1, [r7, #12]
    7776:	4613      	mov	r3, r2
    7778:	009b      	lsls	r3, r3, #2
    777a:	4413      	add	r3, r2
    777c:	009b      	lsls	r3, r3, #2
    777e:	440b      	add	r3, r1
    7780:	333c      	adds	r3, #60	; 0x3c
    7782:	681a      	ldr	r2, [r3, #0]
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	4013      	ands	r3, r2
    7788:	2b00      	cmp	r3, #0
    778a:	d1f2      	bne.n	7772 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    778c:	bf00      	nop
    778e:	3714      	adds	r7, #20
    7790:	46bd      	mov	sp, r7
    7792:	f85d 7b04 	ldr.w	r7, [sp], #4
    7796:	4770      	bx	lr

00007798 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    7798:	b480      	push	{r7}
    779a:	b083      	sub	sp, #12
    779c:	af00      	add	r7, sp, #0
    779e:	6078      	str	r0, [r7, #4]
    77a0:	460b      	mov	r3, r1
    77a2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    77a4:	78fa      	ldrb	r2, [r7, #3]
    77a6:	6879      	ldr	r1, [r7, #4]
    77a8:	4613      	mov	r3, r2
    77aa:	009b      	lsls	r3, r3, #2
    77ac:	4413      	add	r3, r2
    77ae:	009b      	lsls	r3, r3, #2
    77b0:	440b      	add	r3, r1
    77b2:	3340      	adds	r3, #64	; 0x40
    77b4:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    77b6:	f003 0301 	and.w	r3, r3, #1
    77ba:	2b00      	cmp	r3, #0
    77bc:	bf14      	ite	ne
    77be:	2301      	movne	r3, #1
    77c0:	2300      	moveq	r3, #0
    77c2:	b2db      	uxtb	r3, r3
}
    77c4:	4618      	mov	r0, r3
    77c6:	370c      	adds	r7, #12
    77c8:	46bd      	mov	sp, r7
    77ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ce:	4770      	bx	lr

000077d0 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    77d0:	b480      	push	{r7}
    77d2:	b083      	sub	sp, #12
    77d4:	af00      	add	r7, sp, #0
    77d6:	6078      	str	r0, [r7, #4]
    77d8:	460b      	mov	r3, r1
    77da:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    77dc:	78fa      	ldrb	r2, [r7, #3]
    77de:	6879      	ldr	r1, [r7, #4]
    77e0:	4613      	mov	r3, r2
    77e2:	009b      	lsls	r3, r3, #2
    77e4:	4413      	add	r3, r2
    77e6:	009b      	lsls	r3, r3, #2
    77e8:	440b      	add	r3, r1
    77ea:	3340      	adds	r3, #64	; 0x40
    77ec:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    77ee:	085b      	lsrs	r3, r3, #1
    77f0:	f003 0301 	and.w	r3, r3, #1
    77f4:	2b00      	cmp	r3, #0
    77f6:	bf14      	ite	ne
    77f8:	2301      	movne	r3, #1
    77fa:	2300      	moveq	r3, #0
    77fc:	b2db      	uxtb	r3, r3
}
    77fe:	4618      	mov	r0, r3
    7800:	370c      	adds	r7, #12
    7802:	46bd      	mov	sp, r7
    7804:	f85d 7b04 	ldr.w	r7, [sp], #4
    7808:	4770      	bx	lr
	...

0000780c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    780c:	b580      	push	{r7, lr}
    780e:	b082      	sub	sp, #8
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
    7814:	460b      	mov	r3, r1
    7816:	70fb      	strb	r3, [r7, #3]
    7818:	4613      	mov	r3, r2
    781a:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    781c:	78fa      	ldrb	r2, [r7, #3]
    781e:	6879      	ldr	r1, [r7, #4]
    7820:	4613      	mov	r3, r2
    7822:	009b      	lsls	r3, r3, #2
    7824:	4413      	add	r3, r2
    7826:	009b      	lsls	r3, r3, #2
    7828:	440b      	add	r3, r1
    782a:	3330      	adds	r3, #48	; 0x30
    782c:	78ba      	ldrb	r2, [r7, #2]
    782e:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    7830:	78fb      	ldrb	r3, [r7, #3]
    7832:	2202      	movs	r2, #2
    7834:	4619      	mov	r1, r3
    7836:	6878      	ldr	r0, [r7, #4]
    7838:	4b02      	ldr	r3, [pc, #8]	; (7844 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    783a:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    783c:	bf00      	nop
    783e:	3708      	adds	r7, #8
    7840:	46bd      	mov	sp, r7
    7842:	bd80      	pop	{r7, pc}
    7844:	00007763 	.word	0x00007763

00007848 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    7848:	b580      	push	{r7, lr}
    784a:	b084      	sub	sp, #16
    784c:	af00      	add	r7, sp, #0
    784e:	60f8      	str	r0, [r7, #12]
    7850:	460b      	mov	r3, r1
    7852:	607a      	str	r2, [r7, #4]
    7854:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    7856:	7afa      	ldrb	r2, [r7, #11]
    7858:	68f9      	ldr	r1, [r7, #12]
    785a:	4613      	mov	r3, r2
    785c:	009b      	lsls	r3, r3, #2
    785e:	4413      	add	r3, r2
    7860:	009b      	lsls	r3, r3, #2
    7862:	440b      	add	r3, r1
    7864:	3334      	adds	r3, #52	; 0x34
    7866:	687a      	ldr	r2, [r7, #4]
    7868:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    786a:	7afb      	ldrb	r3, [r7, #11]
    786c:	2206      	movs	r2, #6
    786e:	4619      	mov	r1, r3
    7870:	68f8      	ldr	r0, [r7, #12]
    7872:	4b03      	ldr	r3, [pc, #12]	; (7880 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    7874:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7876:	bf00      	nop
    7878:	3710      	adds	r7, #16
    787a:	46bd      	mov	sp, r7
    787c:	bd80      	pop	{r7, pc}
    787e:	bf00      	nop
    7880:	00007763 	.word	0x00007763

00007884 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    7884:	b480      	push	{r7}
    7886:	b085      	sub	sp, #20
    7888:	af00      	add	r7, sp, #0
    788a:	60f8      	str	r0, [r7, #12]
    788c:	460b      	mov	r3, r1
    788e:	607a      	str	r2, [r7, #4]
    7890:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    7892:	7afa      	ldrb	r2, [r7, #11]
    7894:	68f9      	ldr	r1, [r7, #12]
    7896:	4613      	mov	r3, r2
    7898:	009b      	lsls	r3, r3, #2
    789a:	4413      	add	r3, r2
    789c:	009b      	lsls	r3, r3, #2
    789e:	440b      	add	r3, r1
    78a0:	3338      	adds	r3, #56	; 0x38
    78a2:	687a      	ldr	r2, [r7, #4]
    78a4:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    78a6:	bf00      	nop
    78a8:	3714      	adds	r7, #20
    78aa:	46bd      	mov	sp, r7
    78ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    78b0:	4770      	bx	lr

000078b2 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    78b2:	b480      	push	{r7}
    78b4:	b083      	sub	sp, #12
    78b6:	af00      	add	r7, sp, #0
    78b8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	691b      	ldr	r3, [r3, #16]
    78be:	085b      	lsrs	r3, r3, #1
    78c0:	f003 0301 	and.w	r3, r3, #1
    78c4:	2b00      	cmp	r3, #0
    78c6:	bf14      	ite	ne
    78c8:	2301      	movne	r3, #1
    78ca:	2300      	moveq	r3, #0
    78cc:	b2db      	uxtb	r3, r3
}
    78ce:	4618      	mov	r0, r3
    78d0:	370c      	adds	r7, #12
    78d2:	46bd      	mov	sp, r7
    78d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    78d8:	4770      	bx	lr

000078da <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    78da:	b480      	push	{r7}
    78dc:	b083      	sub	sp, #12
    78de:	af00      	add	r7, sp, #0
    78e0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    78e2:	687b      	ldr	r3, [r7, #4]
    78e4:	691b      	ldr	r3, [r3, #16]
    78e6:	0a1b      	lsrs	r3, r3, #8
    78e8:	f003 0301 	and.w	r3, r3, #1
    78ec:	2b00      	cmp	r3, #0
    78ee:	bf14      	ite	ne
    78f0:	2301      	movne	r3, #1
    78f2:	2300      	moveq	r3, #0
    78f4:	b2db      	uxtb	r3, r3
}
    78f6:	4618      	mov	r0, r3
    78f8:	370c      	adds	r7, #12
    78fa:	46bd      	mov	sp, r7
    78fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7900:	4770      	bx	lr

00007902 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    7902:	b480      	push	{r7}
    7904:	b085      	sub	sp, #20
    7906:	af00      	add	r7, sp, #0
    7908:	6078      	str	r0, [r7, #4]
    790a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	691b      	ldr	r3, [r3, #16]
    7910:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7912:	68fa      	ldr	r2, [r7, #12]
    7914:	683b      	ldr	r3, [r7, #0]
    7916:	4013      	ands	r3, r2
    7918:	60fb      	str	r3, [r7, #12]
	return tmp;
    791a:	68fb      	ldr	r3, [r7, #12]
}
    791c:	4618      	mov	r0, r3
    791e:	3714      	adds	r7, #20
    7920:	46bd      	mov	sp, r7
    7922:	f85d 7b04 	ldr.w	r7, [sp], #4
    7926:	4770      	bx	lr

00007928 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    7928:	b480      	push	{r7}
    792a:	b085      	sub	sp, #20
    792c:	af00      	add	r7, sp, #0
    792e:	60f8      	str	r0, [r7, #12]
    7930:	460b      	mov	r3, r1
    7932:	607a      	str	r2, [r7, #4]
    7934:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    7936:	7afb      	ldrb	r3, [r7, #11]
    7938:	68fa      	ldr	r2, [r7, #12]
    793a:	3304      	adds	r3, #4
    793c:	009b      	lsls	r3, r3, #2
    793e:	4413      	add	r3, r2
    7940:	687a      	ldr	r2, [r7, #4]
    7942:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7944:	bf00      	nop
    7946:	3714      	adds	r7, #20
    7948:	46bd      	mov	sp, r7
    794a:	f85d 7b04 	ldr.w	r7, [sp], #4
    794e:	4770      	bx	lr

00007950 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    7950:	b480      	push	{r7}
    7952:	b083      	sub	sp, #12
    7954:	af00      	add	r7, sp, #0
    7956:	6078      	str	r0, [r7, #4]
    7958:	460b      	mov	r3, r1
    795a:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	78fa      	ldrb	r2, [r7, #3]
    7960:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7962:	bf00      	nop
    7964:	370c      	adds	r7, #12
    7966:	46bd      	mov	sp, r7
    7968:	f85d 7b04 	ldr.w	r7, [sp], #4
    796c:	4770      	bx	lr

0000796e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    796e:	b480      	push	{r7}
    7970:	b085      	sub	sp, #20
    7972:	af00      	add	r7, sp, #0
    7974:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7976:	687b      	ldr	r3, [r7, #4]
    7978:	f893 3020 	ldrb.w	r3, [r3, #32]
    797c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    797e:	7bfb      	ldrb	r3, [r7, #15]
    7980:	f003 0301 	and.w	r3, r3, #1
    7984:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7986:	7bfb      	ldrb	r3, [r7, #15]
    7988:	2b00      	cmp	r3, #0
    798a:	bf14      	ite	ne
    798c:	2301      	movne	r3, #1
    798e:	2300      	moveq	r3, #0
    7990:	b2db      	uxtb	r3, r3
}
    7992:	4618      	mov	r0, r3
    7994:	3714      	adds	r7, #20
    7996:	46bd      	mov	sp, r7
    7998:	f85d 7b04 	ldr.w	r7, [sp], #4
    799c:	4770      	bx	lr

0000799e <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    799e:	b480      	push	{r7}
    79a0:	b083      	sub	sp, #12
    79a2:	af00      	add	r7, sp, #0
    79a4:	6078      	str	r0, [r7, #4]
    79a6:	460b      	mov	r3, r1
    79a8:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	78fa      	ldrb	r2, [r7, #3]
    79ae:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    79b2:	bf00      	nop
    79b4:	370c      	adds	r7, #12
    79b6:	46bd      	mov	sp, r7
    79b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79bc:	4770      	bx	lr

000079be <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    79be:	b480      	push	{r7}
    79c0:	b083      	sub	sp, #12
    79c2:	af00      	add	r7, sp, #0
    79c4:	6078      	str	r0, [r7, #4]
    79c6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	683a      	ldr	r2, [r7, #0]
    79cc:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    79ce:	bf00      	nop
    79d0:	370c      	adds	r7, #12
    79d2:	46bd      	mov	sp, r7
    79d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d8:	4770      	bx	lr

000079da <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    79da:	b480      	push	{r7}
    79dc:	b083      	sub	sp, #12
    79de:	af00      	add	r7, sp, #0
    79e0:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    79e2:	687b      	ldr	r3, [r7, #4]
    79e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    79e6:	4618      	mov	r0, r3
    79e8:	370c      	adds	r7, #12
    79ea:	46bd      	mov	sp, r7
    79ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    79f0:	4770      	bx	lr

000079f2 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    79f2:	b480      	push	{r7}
    79f4:	b083      	sub	sp, #12
    79f6:	af00      	add	r7, sp, #0
    79f8:	6078      	str	r0, [r7, #4]
    79fa:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    79fc:	687b      	ldr	r3, [r7, #4]
    79fe:	683a      	ldr	r2, [r7, #0]
    7a00:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    7a02:	bf00      	nop
    7a04:	370c      	adds	r7, #12
    7a06:	46bd      	mov	sp, r7
    7a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a0c:	4770      	bx	lr

00007a0e <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    7a0e:	b480      	push	{r7}
    7a10:	b085      	sub	sp, #20
    7a12:	af00      	add	r7, sp, #0
    7a14:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7a1c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    7a1e:	7bfb      	ldrb	r3, [r7, #15]
    7a20:	085b      	lsrs	r3, r3, #1
    7a22:	b2db      	uxtb	r3, r3
    7a24:	f003 0301 	and.w	r3, r3, #1
    7a28:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7a2a:	7bfb      	ldrb	r3, [r7, #15]
    7a2c:	2b00      	cmp	r3, #0
    7a2e:	bf14      	ite	ne
    7a30:	2301      	movne	r3, #1
    7a32:	2300      	moveq	r3, #0
    7a34:	b2db      	uxtb	r3, r3
}
    7a36:	4618      	mov	r0, r3
    7a38:	3714      	adds	r7, #20
    7a3a:	46bd      	mov	sp, r7
    7a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a40:	4770      	bx	lr

00007a42 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    7a42:	b480      	push	{r7}
    7a44:	b085      	sub	sp, #20
    7a46:	af00      	add	r7, sp, #0
    7a48:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7a4a:	687b      	ldr	r3, [r7, #4]
    7a4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7a50:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    7a52:	7bfb      	ldrb	r3, [r7, #15]
    7a54:	089b      	lsrs	r3, r3, #2
    7a56:	b2db      	uxtb	r3, r3
    7a58:	f003 0301 	and.w	r3, r3, #1
    7a5c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7a5e:	7bfb      	ldrb	r3, [r7, #15]
    7a60:	2b00      	cmp	r3, #0
    7a62:	bf14      	ite	ne
    7a64:	2301      	movne	r3, #1
    7a66:	2300      	moveq	r3, #0
    7a68:	b2db      	uxtb	r3, r3
}
    7a6a:	4618      	mov	r0, r3
    7a6c:	3714      	adds	r7, #20
    7a6e:	46bd      	mov	sp, r7
    7a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a74:	4770      	bx	lr

00007a76 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    7a76:	b480      	push	{r7}
    7a78:	b085      	sub	sp, #20
    7a7a:	af00      	add	r7, sp, #0
    7a7c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7a84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    7a86:	7bfb      	ldrb	r3, [r7, #15]
    7a88:	08db      	lsrs	r3, r3, #3
    7a8a:	b2db      	uxtb	r3, r3
    7a8c:	f003 0301 	and.w	r3, r3, #1
    7a90:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7a92:	7bfb      	ldrb	r3, [r7, #15]
    7a94:	2b00      	cmp	r3, #0
    7a96:	bf14      	ite	ne
    7a98:	2301      	movne	r3, #1
    7a9a:	2300      	moveq	r3, #0
    7a9c:	b2db      	uxtb	r3, r3
}
    7a9e:	4618      	mov	r0, r3
    7aa0:	3714      	adds	r7, #20
    7aa2:	46bd      	mov	sp, r7
    7aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aa8:	4770      	bx	lr

00007aaa <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    7aaa:	b480      	push	{r7}
    7aac:	b085      	sub	sp, #20
    7aae:	af00      	add	r7, sp, #0
    7ab0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    7ab8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    7aba:	7bfb      	ldrb	r3, [r7, #15]
    7abc:	091b      	lsrs	r3, r3, #4
    7abe:	b2db      	uxtb	r3, r3
    7ac0:	f003 0301 	and.w	r3, r3, #1
    7ac4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7ac6:	7bfb      	ldrb	r3, [r7, #15]
    7ac8:	2b00      	cmp	r3, #0
    7aca:	bf14      	ite	ne
    7acc:	2301      	movne	r3, #1
    7ace:	2300      	moveq	r3, #0
    7ad0:	b2db      	uxtb	r3, r3
}
    7ad2:	4618      	mov	r0, r3
    7ad4:	3714      	adds	r7, #20
    7ad6:	46bd      	mov	sp, r7
    7ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7adc:	4770      	bx	lr
	...

00007ae0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    7ae0:	b580      	push	{r7, lr}
    7ae2:	b082      	sub	sp, #8
    7ae4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7ae6:	4b0a      	ldr	r3, [pc, #40]	; (7b10 <_oscctrl_init_sources+0x30>)
    7ae8:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    7aea:	4a0a      	ldr	r2, [pc, #40]	; (7b14 <_oscctrl_init_sources+0x34>)
    7aec:	2101      	movs	r1, #1
    7aee:	6878      	ldr	r0, [r7, #4]
    7af0:	4b09      	ldr	r3, [pc, #36]	; (7b18 <_oscctrl_init_sources+0x38>)
    7af2:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    7af4:	bf00      	nop
    7af6:	6878      	ldr	r0, [r7, #4]
    7af8:	4b08      	ldr	r3, [pc, #32]	; (7b1c <_oscctrl_init_sources+0x3c>)
    7afa:	4798      	blx	r3
    7afc:	4603      	mov	r3, r0
    7afe:	f083 0301 	eor.w	r3, r3, #1
    7b02:	b2db      	uxtb	r3, r3
    7b04:	2b00      	cmp	r3, #0
    7b06:	d1f6      	bne.n	7af6 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    7b08:	bf00      	nop
    7b0a:	3708      	adds	r7, #8
    7b0c:	46bd      	mov	sp, r7
    7b0e:	bd80      	pop	{r7, pc}
    7b10:	40001000 	.word	0x40001000
    7b14:	03002646 	.word	0x03002646
    7b18:	00007929 	.word	0x00007929
    7b1c:	000078b3 	.word	0x000078b3

00007b20 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    7b20:	b580      	push	{r7, lr}
    7b22:	b084      	sub	sp, #16
    7b24:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    7b26:	4b6b      	ldr	r3, [pc, #428]	; (7cd4 <_oscctrl_init_referenced_generators+0x1b4>)
    7b28:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    7b2a:	2204      	movs	r2, #4
    7b2c:	2100      	movs	r1, #0
    7b2e:	486a      	ldr	r0, [pc, #424]	; (7cd8 <_oscctrl_init_referenced_generators+0x1b8>)
    7b30:	4b6a      	ldr	r3, [pc, #424]	; (7cdc <_oscctrl_init_referenced_generators+0x1bc>)
    7b32:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7b34:	bf00      	nop
    7b36:	4868      	ldr	r0, [pc, #416]	; (7cd8 <_oscctrl_init_referenced_generators+0x1b8>)
    7b38:	4b69      	ldr	r3, [pc, #420]	; (7ce0 <_oscctrl_init_referenced_generators+0x1c0>)
    7b3a:	4798      	blx	r3
    7b3c:	4603      	mov	r3, r0
    7b3e:	2b00      	cmp	r3, #0
    7b40:	d1f9      	bne.n	7b36 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    7b42:	2100      	movs	r1, #0
    7b44:	68f8      	ldr	r0, [r7, #12]
    7b46:	4b67      	ldr	r3, [pc, #412]	; (7ce4 <_oscctrl_init_referenced_generators+0x1c4>)
    7b48:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    7b4a:	4967      	ldr	r1, [pc, #412]	; (7ce8 <_oscctrl_init_referenced_generators+0x1c8>)
    7b4c:	68f8      	ldr	r0, [r7, #12]
    7b4e:	4b67      	ldr	r3, [pc, #412]	; (7cec <_oscctrl_init_referenced_generators+0x1cc>)
    7b50:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    7b52:	bf00      	nop
    7b54:	68f8      	ldr	r0, [r7, #12]
    7b56:	4b66      	ldr	r3, [pc, #408]	; (7cf0 <_oscctrl_init_referenced_generators+0x1d0>)
    7b58:	4798      	blx	r3
    7b5a:	4603      	mov	r3, r0
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	d1f9      	bne.n	7b54 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    7b60:	2100      	movs	r1, #0
    7b62:	68f8      	ldr	r0, [r7, #12]
    7b64:	4b63      	ldr	r3, [pc, #396]	; (7cf4 <_oscctrl_init_referenced_generators+0x1d4>)
    7b66:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7b68:	bf00      	nop
    7b6a:	68f8      	ldr	r0, [r7, #12]
    7b6c:	4b62      	ldr	r3, [pc, #392]	; (7cf8 <_oscctrl_init_referenced_generators+0x1d8>)
    7b6e:	4798      	blx	r3
    7b70:	4603      	mov	r3, r0
    7b72:	2b00      	cmp	r3, #0
    7b74:	d1f9      	bne.n	7b6a <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    7b76:	2302      	movs	r3, #2
    7b78:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    7b7a:	7afb      	ldrb	r3, [r7, #11]
    7b7c:	4619      	mov	r1, r3
    7b7e:	68f8      	ldr	r0, [r7, #12]
    7b80:	4b58      	ldr	r3, [pc, #352]	; (7ce4 <_oscctrl_init_referenced_generators+0x1c4>)
    7b82:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    7b84:	bf00      	nop
    7b86:	68f8      	ldr	r0, [r7, #12]
    7b88:	4b5c      	ldr	r3, [pc, #368]	; (7cfc <_oscctrl_init_referenced_generators+0x1dc>)
    7b8a:	4798      	blx	r3
    7b8c:	4603      	mov	r3, r0
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d1f9      	bne.n	7b86 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    7b92:	68f8      	ldr	r0, [r7, #12]
    7b94:	4b5a      	ldr	r3, [pc, #360]	; (7d00 <_oscctrl_init_referenced_generators+0x1e0>)
    7b96:	4798      	blx	r3
    7b98:	4603      	mov	r3, r0
    7b9a:	4619      	mov	r1, r3
    7b9c:	68f8      	ldr	r0, [r7, #12]
    7b9e:	4b59      	ldr	r3, [pc, #356]	; (7d04 <_oscctrl_init_referenced_generators+0x1e4>)
    7ba0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    7ba2:	bf00      	nop
    7ba4:	68f8      	ldr	r0, [r7, #12]
    7ba6:	4b58      	ldr	r3, [pc, #352]	; (7d08 <_oscctrl_init_referenced_generators+0x1e8>)
    7ba8:	4798      	blx	r3
    7baa:	4603      	mov	r3, r0
    7bac:	2b00      	cmp	r3, #0
    7bae:	d1f9      	bne.n	7ba4 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    7bb0:	2319      	movs	r3, #25
    7bb2:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    7bb4:	7afb      	ldrb	r3, [r7, #11]
    7bb6:	4619      	mov	r1, r3
    7bb8:	68f8      	ldr	r0, [r7, #12]
    7bba:	4b4e      	ldr	r3, [pc, #312]	; (7cf4 <_oscctrl_init_referenced_generators+0x1d4>)
    7bbc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7bbe:	bf00      	nop
    7bc0:	68f8      	ldr	r0, [r7, #12]
    7bc2:	4b4d      	ldr	r3, [pc, #308]	; (7cf8 <_oscctrl_init_referenced_generators+0x1d8>)
    7bc4:	4798      	blx	r3
    7bc6:	4603      	mov	r3, r0
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d1f9      	bne.n	7bc0 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    7bcc:	2245      	movs	r2, #69	; 0x45
    7bce:	2101      	movs	r1, #1
    7bd0:	4841      	ldr	r0, [pc, #260]	; (7cd8 <_oscctrl_init_referenced_generators+0x1b8>)
    7bd2:	4b4e      	ldr	r3, [pc, #312]	; (7d0c <_oscctrl_init_referenced_generators+0x1ec>)
    7bd4:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    7bd6:	223b      	movs	r2, #59	; 0x3b
    7bd8:	2100      	movs	r1, #0
    7bda:	68f8      	ldr	r0, [r7, #12]
    7bdc:	4b4c      	ldr	r3, [pc, #304]	; (7d10 <_oscctrl_init_referenced_generators+0x1f0>)
    7bde:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7be0:	f44f 6201 	mov.w	r2, #2064	; 0x810
    7be4:	2100      	movs	r1, #0
    7be6:	68f8      	ldr	r0, [r7, #12]
    7be8:	4b4a      	ldr	r3, [pc, #296]	; (7d14 <_oscctrl_init_referenced_generators+0x1f4>)
    7bea:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7bec:	2242      	movs	r2, #66	; 0x42
    7bee:	2100      	movs	r1, #0
    7bf0:	68f8      	ldr	r0, [r7, #12]
    7bf2:	4b49      	ldr	r3, [pc, #292]	; (7d18 <_oscctrl_init_referenced_generators+0x1f8>)
    7bf4:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    7bf6:	4a49      	ldr	r2, [pc, #292]	; (7d1c <_oscctrl_init_referenced_generators+0x1fc>)
    7bf8:	2101      	movs	r1, #1
    7bfa:	68f8      	ldr	r0, [r7, #12]
    7bfc:	4b44      	ldr	r3, [pc, #272]	; (7d10 <_oscctrl_init_referenced_generators+0x1f0>)
    7bfe:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7c00:	f44f 6203 	mov.w	r2, #2096	; 0x830
    7c04:	2101      	movs	r1, #1
    7c06:	68f8      	ldr	r0, [r7, #12]
    7c08:	4b42      	ldr	r3, [pc, #264]	; (7d14 <_oscctrl_init_referenced_generators+0x1f4>)
    7c0a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7c0c:	2202      	movs	r2, #2
    7c0e:	2101      	movs	r1, #1
    7c10:	68f8      	ldr	r0, [r7, #12]
    7c12:	4b41      	ldr	r3, [pc, #260]	; (7d18 <_oscctrl_init_referenced_generators+0x1f8>)
    7c14:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    7c16:	68f8      	ldr	r0, [r7, #12]
    7c18:	4b41      	ldr	r3, [pc, #260]	; (7d20 <_oscctrl_init_referenced_generators+0x200>)
    7c1a:	4798      	blx	r3
    7c1c:	4603      	mov	r3, r0
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d00c      	beq.n	7c3c <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    7c22:	f44f 6310 	mov.w	r3, #2304	; 0x900
    7c26:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7c28:	bf00      	nop
    7c2a:	6879      	ldr	r1, [r7, #4]
    7c2c:	68f8      	ldr	r0, [r7, #12]
    7c2e:	4b3d      	ldr	r3, [pc, #244]	; (7d24 <_oscctrl_init_referenced_generators+0x204>)
    7c30:	4798      	blx	r3
    7c32:	4602      	mov	r2, r0
    7c34:	687b      	ldr	r3, [r7, #4]
    7c36:	429a      	cmp	r2, r3
    7c38:	d1f7      	bne.n	7c2a <_oscctrl_init_referenced_generators+0x10a>
    7c3a:	e009      	b.n	7c50 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    7c3c:	bf00      	nop
    7c3e:	68f8      	ldr	r0, [r7, #12]
    7c40:	4b39      	ldr	r3, [pc, #228]	; (7d28 <_oscctrl_init_referenced_generators+0x208>)
    7c42:	4798      	blx	r3
    7c44:	4603      	mov	r3, r0
    7c46:	f083 0301 	eor.w	r3, r3, #1
    7c4a:	b2db      	uxtb	r3, r3
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	d1f6      	bne.n	7c3e <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    7c50:	bf00      	nop
    7c52:	2100      	movs	r1, #0
    7c54:	68f8      	ldr	r0, [r7, #12]
    7c56:	4b35      	ldr	r3, [pc, #212]	; (7d2c <_oscctrl_init_referenced_generators+0x20c>)
    7c58:	4798      	blx	r3
    7c5a:	4603      	mov	r3, r0
    7c5c:	f083 0301 	eor.w	r3, r3, #1
    7c60:	b2db      	uxtb	r3, r3
    7c62:	2b00      	cmp	r3, #0
    7c64:	d009      	beq.n	7c7a <_oscctrl_init_referenced_generators+0x15a>
    7c66:	2100      	movs	r1, #0
    7c68:	68f8      	ldr	r0, [r7, #12]
    7c6a:	4b31      	ldr	r3, [pc, #196]	; (7d30 <_oscctrl_init_referenced_generators+0x210>)
    7c6c:	4798      	blx	r3
    7c6e:	4603      	mov	r3, r0
    7c70:	f083 0301 	eor.w	r3, r3, #1
    7c74:	b2db      	uxtb	r3, r3
    7c76:	2b00      	cmp	r3, #0
    7c78:	d1eb      	bne.n	7c52 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    7c7a:	bf00      	nop
    7c7c:	2101      	movs	r1, #1
    7c7e:	68f8      	ldr	r0, [r7, #12]
    7c80:	4b2a      	ldr	r3, [pc, #168]	; (7d2c <_oscctrl_init_referenced_generators+0x20c>)
    7c82:	4798      	blx	r3
    7c84:	4603      	mov	r3, r0
    7c86:	f083 0301 	eor.w	r3, r3, #1
    7c8a:	b2db      	uxtb	r3, r3
    7c8c:	2b00      	cmp	r3, #0
    7c8e:	d009      	beq.n	7ca4 <_oscctrl_init_referenced_generators+0x184>
    7c90:	2101      	movs	r1, #1
    7c92:	68f8      	ldr	r0, [r7, #12]
    7c94:	4b26      	ldr	r3, [pc, #152]	; (7d30 <_oscctrl_init_referenced_generators+0x210>)
    7c96:	4798      	blx	r3
    7c98:	4603      	mov	r3, r0
    7c9a:	f083 0301 	eor.w	r3, r3, #1
    7c9e:	b2db      	uxtb	r3, r3
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d1eb      	bne.n	7c7c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    7ca4:	bf00      	nop
    7ca6:	480c      	ldr	r0, [pc, #48]	; (7cd8 <_oscctrl_init_referenced_generators+0x1b8>)
    7ca8:	4b22      	ldr	r3, [pc, #136]	; (7d34 <_oscctrl_init_referenced_generators+0x214>)
    7caa:	4798      	blx	r3
    7cac:	4603      	mov	r3, r0
    7cae:	2b00      	cmp	r3, #0
    7cb0:	d1f9      	bne.n	7ca6 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    7cb2:	2207      	movs	r2, #7
    7cb4:	2100      	movs	r1, #0
    7cb6:	4808      	ldr	r0, [pc, #32]	; (7cd8 <_oscctrl_init_referenced_generators+0x1b8>)
    7cb8:	4b08      	ldr	r3, [pc, #32]	; (7cdc <_oscctrl_init_referenced_generators+0x1bc>)
    7cba:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7cbc:	bf00      	nop
    7cbe:	4806      	ldr	r0, [pc, #24]	; (7cd8 <_oscctrl_init_referenced_generators+0x1b8>)
    7cc0:	4b07      	ldr	r3, [pc, #28]	; (7ce0 <_oscctrl_init_referenced_generators+0x1c0>)
    7cc2:	4798      	blx	r3
    7cc4:	4603      	mov	r3, r0
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d1f9      	bne.n	7cbe <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    7cca:	bf00      	nop
    7ccc:	3710      	adds	r7, #16
    7cce:	46bd      	mov	sp, r7
    7cd0:	bd80      	pop	{r7, pc}
    7cd2:	bf00      	nop
    7cd4:	40001000 	.word	0x40001000
    7cd8:	40001c00 	.word	0x40001c00
    7cdc:	000076ed 	.word	0x000076ed
    7ce0:	000076ad 	.word	0x000076ad
    7ce4:	00007951 	.word	0x00007951
    7ce8:	0401bb80 	.word	0x0401bb80
    7cec:	000079f3 	.word	0x000079f3
    7cf0:	00007aab 	.word	0x00007aab
    7cf4:	0000799f 	.word	0x0000799f
    7cf8:	00007a43 	.word	0x00007a43
    7cfc:	00007a0f 	.word	0x00007a0f
    7d00:	000079db 	.word	0x000079db
    7d04:	000079bf 	.word	0x000079bf
    7d08:	00007a77 	.word	0x00007a77
    7d0c:	0000773d 	.word	0x0000773d
    7d10:	00007849 	.word	0x00007849
    7d14:	00007885 	.word	0x00007885
    7d18:	0000780d 	.word	0x0000780d
    7d1c:	000407a0 	.word	0x000407a0
    7d20:	0000796f 	.word	0x0000796f
    7d24:	00007903 	.word	0x00007903
    7d28:	000078db 	.word	0x000078db
    7d2c:	00007799 	.word	0x00007799
    7d30:	000077d1 	.word	0x000077d1
    7d34:	000076d5 	.word	0x000076d5

00007d38 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    7d38:	b480      	push	{r7}
    7d3a:	b083      	sub	sp, #12
    7d3c:	af00      	add	r7, sp, #0
    7d3e:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	69db      	ldr	r3, [r3, #28]
    7d44:	0a9b      	lsrs	r3, r3, #10
    7d46:	f003 0301 	and.w	r3, r3, #1
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	bf14      	ite	ne
    7d4e:	2301      	movne	r3, #1
    7d50:	2300      	moveq	r3, #0
    7d52:	b2db      	uxtb	r3, r3
}
    7d54:	4618      	mov	r0, r3
    7d56:	370c      	adds	r7, #12
    7d58:	46bd      	mov	sp, r7
    7d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d5e:	4770      	bx	lr

00007d60 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    7d60:	b480      	push	{r7}
    7d62:	b083      	sub	sp, #12
    7d64:	af00      	add	r7, sp, #0
    7d66:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    7d68:	687b      	ldr	r3, [r7, #4]
    7d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7d6e:	61da      	str	r2, [r3, #28]
}
    7d70:	bf00      	nop
    7d72:	370c      	adds	r7, #12
    7d74:	46bd      	mov	sp, r7
    7d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d7a:	4770      	bx	lr

00007d7c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    7d7c:	b480      	push	{r7}
    7d7e:	b083      	sub	sp, #12
    7d80:	af00      	add	r7, sp, #0
    7d82:	6078      	str	r0, [r7, #4]
    7d84:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7d86:	687b      	ldr	r3, [r7, #4]
    7d88:	683a      	ldr	r2, [r7, #0]
    7d8a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7d8c:	bf00      	nop
    7d8e:	370c      	adds	r7, #12
    7d90:	46bd      	mov	sp, r7
    7d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d96:	4770      	bx	lr

00007d98 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7d98:	b480      	push	{r7}
    7d9a:	b083      	sub	sp, #12
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
    7da0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	683a      	ldr	r2, [r7, #0]
    7da6:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7da8:	bf00      	nop
    7daa:	370c      	adds	r7, #12
    7dac:	46bd      	mov	sp, r7
    7dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db2:	4770      	bx	lr

00007db4 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    7db4:	b480      	push	{r7}
    7db6:	b083      	sub	sp, #12
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
    7dbc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	683a      	ldr	r2, [r7, #0]
    7dc2:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7dc4:	bf00      	nop
    7dc6:	370c      	adds	r7, #12
    7dc8:	46bd      	mov	sp, r7
    7dca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dce:	4770      	bx	lr

00007dd0 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    7dd0:	b480      	push	{r7}
    7dd2:	b083      	sub	sp, #12
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	6078      	str	r0, [r7, #4]
    7dd8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	683a      	ldr	r2, [r7, #0]
    7dde:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7de0:	bf00      	nop
    7de2:	370c      	adds	r7, #12
    7de4:	46bd      	mov	sp, r7
    7de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dea:	4770      	bx	lr

00007dec <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7dec:	b480      	push	{r7}
    7dee:	b085      	sub	sp, #20
    7df0:	af00      	add	r7, sp, #0
    7df2:	6078      	str	r0, [r7, #4]
    7df4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7df6:	687b      	ldr	r3, [r7, #4]
    7df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7dfa:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    7dfc:	68fb      	ldr	r3, [r7, #12]
    7dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7e02:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    7e04:	683b      	ldr	r3, [r7, #0]
    7e06:	b2db      	uxtb	r3, r3
    7e08:	68fa      	ldr	r2, [r7, #12]
    7e0a:	4313      	orrs	r3, r2
    7e0c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	68fa      	ldr	r2, [r7, #12]
    7e12:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7e14:	bf00      	nop
    7e16:	3714      	adds	r7, #20
    7e18:	46bd      	mov	sp, r7
    7e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e1e:	4770      	bx	lr

00007e20 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7e20:	b480      	push	{r7}
    7e22:	b085      	sub	sp, #20
    7e24:	af00      	add	r7, sp, #0
    7e26:	6078      	str	r0, [r7, #4]
    7e28:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7e2a:	687b      	ldr	r3, [r7, #4]
    7e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7e2e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    7e30:	68fb      	ldr	r3, [r7, #12]
    7e32:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    7e36:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    7e38:	683b      	ldr	r3, [r7, #0]
    7e3a:	041b      	lsls	r3, r3, #16
    7e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    7e40:	68fa      	ldr	r2, [r7, #12]
    7e42:	4313      	orrs	r3, r2
    7e44:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7e46:	687b      	ldr	r3, [r7, #4]
    7e48:	68fa      	ldr	r2, [r7, #12]
    7e4a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7e4c:	bf00      	nop
    7e4e:	3714      	adds	r7, #20
    7e50:	46bd      	mov	sp, r7
    7e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e56:	4770      	bx	lr

00007e58 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    7e58:	b480      	push	{r7}
    7e5a:	b083      	sub	sp, #12
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
    7e60:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	683a      	ldr	r2, [r7, #0]
    7e66:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7e68:	bf00      	nop
    7e6a:	370c      	adds	r7, #12
    7e6c:	46bd      	mov	sp, r7
    7e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e72:	4770      	bx	lr

00007e74 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7e74:	b480      	push	{r7}
    7e76:	b083      	sub	sp, #12
    7e78:	af00      	add	r7, sp, #0
    7e7a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    7e7c:	687b      	ldr	r3, [r7, #4]
    7e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    7e80:	4618      	mov	r0, r3
    7e82:	370c      	adds	r7, #12
    7e84:	46bd      	mov	sp, r7
    7e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e8a:	4770      	bx	lr

00007e8c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    7e8c:	b480      	push	{r7}
    7e8e:	b085      	sub	sp, #20
    7e90:	af00      	add	r7, sp, #0
    7e92:	60f8      	str	r0, [r7, #12]
    7e94:	60b9      	str	r1, [r7, #8]
    7e96:	607a      	str	r2, [r7, #4]
	while (count--) {
    7e98:	e007      	b.n	7eaa <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7e9a:	68fb      	ldr	r3, [r7, #12]
    7e9c:	1c5a      	adds	r2, r3, #1
    7e9e:	60fa      	str	r2, [r7, #12]
    7ea0:	68ba      	ldr	r2, [r7, #8]
    7ea2:	1c51      	adds	r1, r2, #1
    7ea4:	60b9      	str	r1, [r7, #8]
    7ea6:	7812      	ldrb	r2, [r2, #0]
    7ea8:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7eaa:	687b      	ldr	r3, [r7, #4]
    7eac:	1e5a      	subs	r2, r3, #1
    7eae:	607a      	str	r2, [r7, #4]
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d1f2      	bne.n	7e9a <_qspi_memcpy+0xe>
	}
}
    7eb4:	bf00      	nop
    7eb6:	3714      	adds	r7, #20
    7eb8:	46bd      	mov	sp, r7
    7eba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ebe:	4770      	bx	lr

00007ec0 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7ec0:	b580      	push	{r7, lr}
    7ec2:	b082      	sub	sp, #8
    7ec4:	af00      	add	r7, sp, #0
    7ec6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7ec8:	4903      	ldr	r1, [pc, #12]	; (7ed8 <_qspi_end_transfer+0x18>)
    7eca:	6878      	ldr	r0, [r7, #4]
    7ecc:	4b03      	ldr	r3, [pc, #12]	; (7edc <_qspi_end_transfer+0x1c>)
    7ece:	4798      	blx	r3
}
    7ed0:	bf00      	nop
    7ed2:	3708      	adds	r7, #8
    7ed4:	46bd      	mov	sp, r7
    7ed6:	bd80      	pop	{r7, pc}
    7ed8:	01000002 	.word	0x01000002
    7edc:	00007d7d 	.word	0x00007d7d

00007ee0 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7ee0:	b580      	push	{r7, lr}
    7ee2:	b082      	sub	sp, #8
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	6078      	str	r0, [r7, #4]
    7ee8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    7eea:	687b      	ldr	r3, [r7, #4]
    7eec:	2b00      	cmp	r3, #0
    7eee:	d004      	beq.n	7efa <_qspi_sync_init+0x1a>
    7ef0:	683b      	ldr	r3, [r7, #0]
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d001      	beq.n	7efa <_qspi_sync_init+0x1a>
    7ef6:	2301      	movs	r3, #1
    7ef8:	e000      	b.n	7efc <_qspi_sync_init+0x1c>
    7efa:	2300      	movs	r3, #0
    7efc:	f003 0301 	and.w	r3, r3, #1
    7f00:	b2db      	uxtb	r3, r3
    7f02:	2240      	movs	r2, #64	; 0x40
    7f04:	490c      	ldr	r1, [pc, #48]	; (7f38 <_qspi_sync_init+0x58>)
    7f06:	4618      	mov	r0, r3
    7f08:	4b0c      	ldr	r3, [pc, #48]	; (7f3c <_qspi_sync_init+0x5c>)
    7f0a:	4798      	blx	r3
	dev->prvt = hw;
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	683a      	ldr	r2, [r7, #0]
    7f10:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	681b      	ldr	r3, [r3, #0]
    7f16:	2101      	movs	r1, #1
    7f18:	4618      	mov	r0, r3
    7f1a:	4b09      	ldr	r3, [pc, #36]	; (7f40 <_qspi_sync_init+0x60>)
    7f1c:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    7f1e:	4909      	ldr	r1, [pc, #36]	; (7f44 <_qspi_sync_init+0x64>)
    7f20:	6838      	ldr	r0, [r7, #0]
    7f22:	4b09      	ldr	r3, [pc, #36]	; (7f48 <_qspi_sync_init+0x68>)
    7f24:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    7f26:	4909      	ldr	r1, [pc, #36]	; (7f4c <_qspi_sync_init+0x6c>)
    7f28:	6838      	ldr	r0, [r7, #0]
    7f2a:	4b09      	ldr	r3, [pc, #36]	; (7f50 <_qspi_sync_init+0x70>)
    7f2c:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    7f2e:	2300      	movs	r3, #0
}
    7f30:	4618      	mov	r0, r3
    7f32:	3708      	adds	r7, #8
    7f34:	46bd      	mov	sp, r7
    7f36:	bd80      	pop	{r7, pc}
    7f38:	0001283c 	.word	0x0001283c
    7f3c:	00005f89 	.word	0x00005f89
    7f40:	00007d7d 	.word	0x00007d7d
    7f44:	06000011 	.word	0x06000011
    7f48:	00007d99 	.word	0x00007d99
    7f4c:	00241300 	.word	0x00241300
    7f50:	00007db5 	.word	0x00007db5

00007f54 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7f54:	b580      	push	{r7, lr}
    7f56:	b082      	sub	sp, #8
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	681b      	ldr	r3, [r3, #0]
    7f60:	2102      	movs	r1, #2
    7f62:	4618      	mov	r0, r3
    7f64:	4b03      	ldr	r3, [pc, #12]	; (7f74 <_qspi_sync_enable+0x20>)
    7f66:	4798      	blx	r3
	return ERR_NONE;
    7f68:	2300      	movs	r3, #0
}
    7f6a:	4618      	mov	r0, r3
    7f6c:	3708      	adds	r7, #8
    7f6e:	46bd      	mov	sp, r7
    7f70:	bd80      	pop	{r7, pc}
    7f72:	bf00      	nop
    7f74:	00007d7d 	.word	0x00007d7d

00007f78 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    7f78:	b580      	push	{r7, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	681b      	ldr	r3, [r3, #0]
    7f84:	2100      	movs	r1, #0
    7f86:	4618      	mov	r0, r3
    7f88:	4b03      	ldr	r3, [pc, #12]	; (7f98 <_qspi_sync_disable+0x20>)
    7f8a:	4798      	blx	r3
	return ERR_NONE;
    7f8c:	2300      	movs	r3, #0
}
    7f8e:	4618      	mov	r0, r3
    7f90:	3708      	adds	r7, #8
    7f92:	46bd      	mov	sp, r7
    7f94:	bd80      	pop	{r7, pc}
    7f96:	bf00      	nop
    7f98:	00007d7d 	.word	0x00007d7d

00007f9c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7f9c:	b580      	push	{r7, lr}
    7f9e:	b084      	sub	sp, #16
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	6078      	str	r0, [r7, #4]
    7fa4:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7fa6:	687b      	ldr	r3, [r7, #4]
    7fa8:	681b      	ldr	r3, [r3, #0]
    7faa:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7fac:	683b      	ldr	r3, [r7, #0]
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	f003 0320 	and.w	r3, r3, #32
    7fb4:	b2db      	uxtb	r3, r3
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	d005      	beq.n	7fc6 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    7fba:	683b      	ldr	r3, [r7, #0]
    7fbc:	689b      	ldr	r3, [r3, #8]
    7fbe:	4619      	mov	r1, r3
    7fc0:	68f8      	ldr	r0, [r7, #12]
    7fc2:	4b13      	ldr	r3, [pc, #76]	; (8010 <_qspi_sync_command_set_ifr+0x74>)
    7fc4:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    7fc6:	683b      	ldr	r3, [r7, #0]
    7fc8:	781b      	ldrb	r3, [r3, #0]
    7fca:	f003 0310 	and.w	r3, r3, #16
    7fce:	b2db      	uxtb	r3, r3
    7fd0:	2b00      	cmp	r3, #0
    7fd2:	d005      	beq.n	7fe0 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    7fd4:	683b      	ldr	r3, [r7, #0]
    7fd6:	791b      	ldrb	r3, [r3, #4]
    7fd8:	4619      	mov	r1, r3
    7fda:	68f8      	ldr	r0, [r7, #12]
    7fdc:	4b0d      	ldr	r3, [pc, #52]	; (8014 <_qspi_sync_command_set_ifr+0x78>)
    7fde:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7fe0:	683b      	ldr	r3, [r7, #0]
    7fe2:	781b      	ldrb	r3, [r3, #0]
    7fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7fe8:	b2db      	uxtb	r3, r3
    7fea:	2b00      	cmp	r3, #0
    7fec:	d005      	beq.n	7ffa <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    7fee:	683b      	ldr	r3, [r7, #0]
    7ff0:	795b      	ldrb	r3, [r3, #5]
    7ff2:	4619      	mov	r1, r3
    7ff4:	68f8      	ldr	r0, [r7, #12]
    7ff6:	4b08      	ldr	r3, [pc, #32]	; (8018 <_qspi_sync_command_set_ifr+0x7c>)
    7ff8:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    7ffa:	683b      	ldr	r3, [r7, #0]
    7ffc:	681b      	ldr	r3, [r3, #0]
    7ffe:	4619      	mov	r1, r3
    8000:	68f8      	ldr	r0, [r7, #12]
    8002:	4b06      	ldr	r3, [pc, #24]	; (801c <_qspi_sync_command_set_ifr+0x80>)
    8004:	4798      	blx	r3
}
    8006:	bf00      	nop
    8008:	3710      	adds	r7, #16
    800a:	46bd      	mov	sp, r7
    800c:	bd80      	pop	{r7, pc}
    800e:	bf00      	nop
    8010:	00007dd1 	.word	0x00007dd1
    8014:	00007ded 	.word	0x00007ded
    8018:	00007e21 	.word	0x00007e21
    801c:	00007e59 	.word	0x00007e59

00008020 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    8020:	b580      	push	{r7, lr}
    8022:	b084      	sub	sp, #16
    8024:	af00      	add	r7, sp, #0
    8026:	6078      	str	r0, [r7, #4]
    8028:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    802a:	687b      	ldr	r3, [r7, #4]
    802c:	681b      	ldr	r3, [r3, #0]
    802e:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    8030:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8034:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    8036:	683b      	ldr	r3, [r7, #0]
    8038:	781b      	ldrb	r3, [r3, #0]
    803a:	f003 0320 	and.w	r3, r3, #32
    803e:	b2db      	uxtb	r3, r3
    8040:	2b00      	cmp	r3, #0
    8042:	d004      	beq.n	804e <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	689b      	ldr	r3, [r3, #8]
    8048:	68fa      	ldr	r2, [r7, #12]
    804a:	4413      	add	r3, r2
    804c:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    804e:	68b8      	ldr	r0, [r7, #8]
    8050:	4b18      	ldr	r3, [pc, #96]	; (80b4 <_qspi_sync_run_transfer+0x94>)
    8052:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    8054:	683b      	ldr	r3, [r7, #0]
    8056:	691b      	ldr	r3, [r3, #16]
    8058:	2b00      	cmp	r3, #0
    805a:	d103      	bne.n	8064 <_qspi_sync_run_transfer+0x44>
    805c:	683b      	ldr	r3, [r7, #0]
    805e:	695b      	ldr	r3, [r3, #20]
    8060:	2b00      	cmp	r3, #0
    8062:	d001      	beq.n	8068 <_qspi_sync_run_transfer+0x48>
    8064:	2301      	movs	r3, #1
    8066:	e000      	b.n	806a <_qspi_sync_run_transfer+0x4a>
    8068:	2300      	movs	r3, #0
    806a:	f003 0301 	and.w	r3, r3, #1
    806e:	b2db      	uxtb	r3, r3
    8070:	2282      	movs	r2, #130	; 0x82
    8072:	4911      	ldr	r1, [pc, #68]	; (80b8 <_qspi_sync_run_transfer+0x98>)
    8074:	4618      	mov	r0, r3
    8076:	4b11      	ldr	r3, [pc, #68]	; (80bc <_qspi_sync_run_transfer+0x9c>)
    8078:	4798      	blx	r3

	if (cmd->tx_buf) {
    807a:	683b      	ldr	r3, [r7, #0]
    807c:	691b      	ldr	r3, [r3, #16]
    807e:	2b00      	cmp	r3, #0
    8080:	d008      	beq.n	8094 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    8082:	683b      	ldr	r3, [r7, #0]
    8084:	6919      	ldr	r1, [r3, #16]
    8086:	683b      	ldr	r3, [r7, #0]
    8088:	68db      	ldr	r3, [r3, #12]
    808a:	461a      	mov	r2, r3
    808c:	68f8      	ldr	r0, [r7, #12]
    808e:	4b0c      	ldr	r3, [pc, #48]	; (80c0 <_qspi_sync_run_transfer+0xa0>)
    8090:	4798      	blx	r3
    8092:	e007      	b.n	80a4 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    8094:	683b      	ldr	r3, [r7, #0]
    8096:	6958      	ldr	r0, [r3, #20]
    8098:	683b      	ldr	r3, [r7, #0]
    809a:	68db      	ldr	r3, [r3, #12]
    809c:	461a      	mov	r2, r3
    809e:	68f9      	ldr	r1, [r7, #12]
    80a0:	4b07      	ldr	r3, [pc, #28]	; (80c0 <_qspi_sync_run_transfer+0xa0>)
    80a2:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    80a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    80a8:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    80ac:	bf00      	nop
    80ae:	3710      	adds	r7, #16
    80b0:	46bd      	mov	sp, r7
    80b2:	bd80      	pop	{r7, pc}
    80b4:	00007e75 	.word	0x00007e75
    80b8:	0001283c 	.word	0x0001283c
    80bc:	00005f89 	.word	0x00005f89
    80c0:	00007e8d 	.word	0x00007e8d

000080c4 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    80c4:	b580      	push	{r7, lr}
    80c6:	b082      	sub	sp, #8
    80c8:	af00      	add	r7, sp, #0
    80ca:	6078      	str	r0, [r7, #4]
    80cc:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    80ce:	6839      	ldr	r1, [r7, #0]
    80d0:	6878      	ldr	r0, [r7, #4]
    80d2:	4b14      	ldr	r3, [pc, #80]	; (8124 <_qspi_sync_serial_run_command+0x60>)
    80d4:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    80d6:	683b      	ldr	r3, [r7, #0]
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    80de:	b2db      	uxtb	r3, r3
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    80e4:	6839      	ldr	r1, [r7, #0]
    80e6:	6878      	ldr	r0, [r7, #4]
    80e8:	4b0f      	ldr	r3, [pc, #60]	; (8128 <_qspi_sync_serial_run_command+0x64>)
    80ea:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	681b      	ldr	r3, [r3, #0]
    80f0:	4618      	mov	r0, r3
    80f2:	4b0e      	ldr	r3, [pc, #56]	; (812c <_qspi_sync_serial_run_command+0x68>)
    80f4:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    80f6:	bf00      	nop
    80f8:	687b      	ldr	r3, [r7, #4]
    80fa:	681b      	ldr	r3, [r3, #0]
    80fc:	4618      	mov	r0, r3
    80fe:	4b0c      	ldr	r3, [pc, #48]	; (8130 <_qspi_sync_serial_run_command+0x6c>)
    8100:	4798      	blx	r3
    8102:	4603      	mov	r3, r0
    8104:	f083 0301 	eor.w	r3, r3, #1
    8108:	b2db      	uxtb	r3, r3
    810a:	2b00      	cmp	r3, #0
    810c:	d1f4      	bne.n	80f8 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	681b      	ldr	r3, [r3, #0]
    8112:	4618      	mov	r0, r3
    8114:	4b07      	ldr	r3, [pc, #28]	; (8134 <_qspi_sync_serial_run_command+0x70>)
    8116:	4798      	blx	r3
	return ERR_NONE;
    8118:	2300      	movs	r3, #0
}
    811a:	4618      	mov	r0, r3
    811c:	3708      	adds	r7, #8
    811e:	46bd      	mov	sp, r7
    8120:	bd80      	pop	{r7, pc}
    8122:	bf00      	nop
    8124:	00007f9d 	.word	0x00007f9d
    8128:	00008021 	.word	0x00008021
    812c:	00007ec1 	.word	0x00007ec1
    8130:	00007d39 	.word	0x00007d39
    8134:	00007d61 	.word	0x00007d61

00008138 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    8138:	b480      	push	{r7}
    813a:	b083      	sub	sp, #12
    813c:	af00      	add	r7, sp, #0
    813e:	6078      	str	r0, [r7, #4]
    8140:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    8142:	bf00      	nop
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	691a      	ldr	r2, [r3, #16]
    8148:	683b      	ldr	r3, [r7, #0]
    814a:	4013      	ands	r3, r2
    814c:	2b00      	cmp	r3, #0
    814e:	d1f9      	bne.n	8144 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    8150:	bf00      	nop
    8152:	370c      	adds	r7, #12
    8154:	46bd      	mov	sp, r7
    8156:	f85d 7b04 	ldr.w	r7, [sp], #4
    815a:	4770      	bx	lr

0000815c <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    815c:	b480      	push	{r7}
    815e:	b083      	sub	sp, #12
    8160:	af00      	add	r7, sp, #0
    8162:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	f44f 7280 	mov.w	r2, #256	; 0x100
    816a:	819a      	strh	r2, [r3, #12]
}
    816c:	bf00      	nop
    816e:	370c      	adds	r7, #12
    8170:	46bd      	mov	sp, r7
    8172:	f85d 7b04 	ldr.w	r7, [sp], #4
    8176:	4770      	bx	lr

00008178 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    8178:	b480      	push	{r7}
    817a:	b083      	sub	sp, #12
    817c:	af00      	add	r7, sp, #0
    817e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    8180:	687b      	ldr	r3, [r7, #4]
    8182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8186:	819a      	strh	r2, [r3, #12]
}
    8188:	bf00      	nop
    818a:	370c      	adds	r7, #12
    818c:	46bd      	mov	sp, r7
    818e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8192:	4770      	bx	lr

00008194 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    8194:	b480      	push	{r7}
    8196:	b083      	sub	sp, #12
    8198:	af00      	add	r7, sp, #0
    819a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    819c:	687b      	ldr	r3, [r7, #4]
    819e:	899b      	ldrh	r3, [r3, #12]
    81a0:	b29b      	uxth	r3, r3
}
    81a2:	4618      	mov	r0, r3
    81a4:	370c      	adds	r7, #12
    81a6:	46bd      	mov	sp, r7
    81a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ac:	4770      	bx	lr

000081ae <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    81ae:	b480      	push	{r7}
    81b0:	b083      	sub	sp, #12
    81b2:	af00      	add	r7, sp, #0
    81b4:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    81b6:	687b      	ldr	r3, [r7, #4]
    81b8:	895b      	ldrh	r3, [r3, #10]
    81ba:	b29b      	uxth	r3, r3
}
    81bc:	4618      	mov	r0, r3
    81be:	370c      	adds	r7, #12
    81c0:	46bd      	mov	sp, r7
    81c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81c6:	4770      	bx	lr

000081c8 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    81c8:	b580      	push	{r7, lr}
    81ca:	b082      	sub	sp, #8
    81cc:	af00      	add	r7, sp, #0
    81ce:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    81d0:	687b      	ldr	r3, [r7, #4]
    81d2:	881b      	ldrh	r3, [r3, #0]
    81d4:	b29b      	uxth	r3, r3
    81d6:	f043 0301 	orr.w	r3, r3, #1
    81da:	b29a      	uxth	r2, r3
    81dc:	687b      	ldr	r3, [r7, #4]
    81de:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    81e0:	2101      	movs	r1, #1
    81e2:	6878      	ldr	r0, [r7, #4]
    81e4:	4b02      	ldr	r3, [pc, #8]	; (81f0 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    81e6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    81e8:	bf00      	nop
    81ea:	3708      	adds	r7, #8
    81ec:	46bd      	mov	sp, r7
    81ee:	bd80      	pop	{r7, pc}
    81f0:	00008139 	.word	0x00008139

000081f4 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    81f4:	b580      	push	{r7, lr}
    81f6:	b084      	sub	sp, #16
    81f8:	af00      	add	r7, sp, #0
    81fa:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    81fc:	f248 0103 	movw	r1, #32771	; 0x8003
    8200:	6878      	ldr	r0, [r7, #4]
    8202:	4b0a      	ldr	r3, [pc, #40]	; (822c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    8204:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    8206:	687b      	ldr	r3, [r7, #4]
    8208:	881b      	ldrh	r3, [r3, #0]
    820a:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    820c:	89fb      	ldrh	r3, [r7, #14]
    820e:	085b      	lsrs	r3, r3, #1
    8210:	b29b      	uxth	r3, r3
    8212:	f003 0301 	and.w	r3, r3, #1
    8216:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    8218:	89fb      	ldrh	r3, [r7, #14]
    821a:	2b00      	cmp	r3, #0
    821c:	bf14      	ite	ne
    821e:	2301      	movne	r3, #1
    8220:	2300      	moveq	r3, #0
    8222:	b2db      	uxtb	r3, r3
}
    8224:	4618      	mov	r0, r3
    8226:	3710      	adds	r7, #16
    8228:	46bd      	mov	sp, r7
    822a:	bd80      	pop	{r7, pc}
    822c:	00008139 	.word	0x00008139

00008230 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8230:	b580      	push	{r7, lr}
    8232:	b082      	sub	sp, #8
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	881b      	ldrh	r3, [r3, #0]
    823c:	b29b      	uxth	r3, r3
    823e:	f023 0302 	bic.w	r3, r3, #2
    8242:	b29a      	uxth	r2, r3
    8244:	687b      	ldr	r3, [r7, #4]
    8246:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8248:	f248 0103 	movw	r1, #32771	; 0x8003
    824c:	6878      	ldr	r0, [r7, #4]
    824e:	4b03      	ldr	r3, [pc, #12]	; (825c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    8250:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    8252:	bf00      	nop
    8254:	3708      	adds	r7, #8
    8256:	46bd      	mov	sp, r7
    8258:	bd80      	pop	{r7, pc}
    825a:	bf00      	nop
    825c:	00008139 	.word	0x00008139

00008260 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    8260:	b580      	push	{r7, lr}
    8262:	b082      	sub	sp, #8
    8264:	af00      	add	r7, sp, #0
    8266:	6078      	str	r0, [r7, #4]
    8268:	460b      	mov	r3, r1
    826a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    826c:	687b      	ldr	r3, [r7, #4]
    826e:	887a      	ldrh	r2, [r7, #2]
    8270:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    8272:	f248 0103 	movw	r1, #32771	; 0x8003
    8276:	6878      	ldr	r0, [r7, #4]
    8278:	4b02      	ldr	r3, [pc, #8]	; (8284 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    827a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    827c:	bf00      	nop
    827e:	3708      	adds	r7, #8
    8280:	46bd      	mov	sp, r7
    8282:	bd80      	pop	{r7, pc}
    8284:	00008139 	.word	0x00008139

00008288 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    8288:	b580      	push	{r7, lr}
    828a:	b082      	sub	sp, #8
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    8290:	2108      	movs	r1, #8
    8292:	6878      	ldr	r0, [r7, #4]
    8294:	4b03      	ldr	r3, [pc, #12]	; (82a4 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    8296:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	699b      	ldr	r3, [r3, #24]
}
    829c:	4618      	mov	r0, r3
    829e:	3708      	adds	r7, #8
    82a0:	46bd      	mov	sp, r7
    82a2:	bd80      	pop	{r7, pc}
    82a4:	00008139 	.word	0x00008139

000082a8 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    82a8:	b480      	push	{r7}
    82aa:	b083      	sub	sp, #12
    82ac:	af00      	add	r7, sp, #0
    82ae:	6078      	str	r0, [r7, #4]
    82b0:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	683a      	ldr	r2, [r7, #0]
    82b6:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    82b8:	bf00      	nop
    82ba:	370c      	adds	r7, #12
    82bc:	46bd      	mov	sp, r7
    82be:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c2:	4770      	bx	lr

000082c4 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    82c4:	b580      	push	{r7, lr}
    82c6:	b082      	sub	sp, #8
    82c8:	af00      	add	r7, sp, #0
    82ca:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    82cc:	687b      	ldr	r3, [r7, #4]
    82ce:	2b00      	cmp	r3, #0
    82d0:	d005      	beq.n	82de <_calendar_init+0x1a>
    82d2:	687b      	ldr	r3, [r7, #4]
    82d4:	681b      	ldr	r3, [r3, #0]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d001      	beq.n	82de <_calendar_init+0x1a>
    82da:	2301      	movs	r3, #1
    82dc:	e000      	b.n	82e0 <_calendar_init+0x1c>
    82de:	2300      	movs	r3, #0
    82e0:	f003 0301 	and.w	r3, r3, #1
    82e4:	b2db      	uxtb	r3, r3
    82e6:	222f      	movs	r2, #47	; 0x2f
    82e8:	491b      	ldr	r1, [pc, #108]	; (8358 <_calendar_init+0x94>)
    82ea:	4618      	mov	r0, r3
    82ec:	4b1b      	ldr	r3, [pc, #108]	; (835c <_calendar_init+0x98>)
    82ee:	4798      	blx	r3

	_rtc_dev = dev;
    82f0:	4a1b      	ldr	r2, [pc, #108]	; (8360 <_calendar_init+0x9c>)
    82f2:	687b      	ldr	r3, [r7, #4]
    82f4:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    82f6:	687b      	ldr	r3, [r7, #4]
    82f8:	681b      	ldr	r3, [r3, #0]
    82fa:	4618      	mov	r0, r3
    82fc:	4b19      	ldr	r3, [pc, #100]	; (8364 <_calendar_init+0xa0>)
    82fe:	4798      	blx	r3
    8300:	4603      	mov	r3, r0
    8302:	2b00      	cmp	r3, #0
    8304:	d00a      	beq.n	831c <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    8306:	687b      	ldr	r3, [r7, #4]
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	4618      	mov	r0, r3
    830c:	4b16      	ldr	r3, [pc, #88]	; (8368 <_calendar_init+0xa4>)
    830e:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    8310:	687b      	ldr	r3, [r7, #4]
    8312:	681b      	ldr	r3, [r3, #0]
    8314:	2102      	movs	r1, #2
    8316:	4618      	mov	r0, r3
    8318:	4b14      	ldr	r3, [pc, #80]	; (836c <_calendar_init+0xa8>)
    831a:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	681b      	ldr	r3, [r3, #0]
    8320:	4618      	mov	r0, r3
    8322:	4b13      	ldr	r3, [pc, #76]	; (8370 <_calendar_init+0xac>)
    8324:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    8326:	687b      	ldr	r3, [r7, #4]
    8328:	681b      	ldr	r3, [r3, #0]
    832a:	2101      	movs	r1, #1
    832c:	4618      	mov	r0, r3
    832e:	4b0f      	ldr	r3, [pc, #60]	; (836c <_calendar_init+0xa8>)
    8330:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    8332:	687b      	ldr	r3, [r7, #4]
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    833a:	4618      	mov	r0, r3
    833c:	4b0d      	ldr	r3, [pc, #52]	; (8374 <_calendar_init+0xb0>)
    833e:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    8340:	687b      	ldr	r3, [r7, #4]
    8342:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    8344:	2100      	movs	r1, #0
    8346:	4618      	mov	r0, r3
    8348:	4b0b      	ldr	r3, [pc, #44]	; (8378 <_calendar_init+0xb4>)
    834a:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    834c:	2300      	movs	r3, #0
}
    834e:	4618      	mov	r0, r3
    8350:	3708      	adds	r7, #8
    8352:	46bd      	mov	sp, r7
    8354:	bd80      	pop	{r7, pc}
    8356:	bf00      	nop
    8358:	00012854 	.word	0x00012854
    835c:	00005f89 	.word	0x00005f89
    8360:	20002130 	.word	0x20002130
    8364:	000081f5 	.word	0x000081f5
    8368:	00008231 	.word	0x00008231
    836c:	00008139 	.word	0x00008139
    8370:	000081c9 	.word	0x000081c9
    8374:	00008261 	.word	0x00008261
    8378:	000082a9 	.word	0x000082a9

0000837c <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    837c:	b580      	push	{r7, lr}
    837e:	b082      	sub	sp, #8
    8380:	af00      	add	r7, sp, #0
    8382:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    8384:	687b      	ldr	r3, [r7, #4]
    8386:	2b00      	cmp	r3, #0
    8388:	d005      	beq.n	8396 <_calendar_get_counter+0x1a>
    838a:	687b      	ldr	r3, [r7, #4]
    838c:	681b      	ldr	r3, [r3, #0]
    838e:	2b00      	cmp	r3, #0
    8390:	d001      	beq.n	8396 <_calendar_get_counter+0x1a>
    8392:	2301      	movs	r3, #1
    8394:	e000      	b.n	8398 <_calendar_get_counter+0x1c>
    8396:	2300      	movs	r3, #0
    8398:	f003 0301 	and.w	r3, r3, #1
    839c:	b2db      	uxtb	r3, r3
    839e:	2299      	movs	r2, #153	; 0x99
    83a0:	4906      	ldr	r1, [pc, #24]	; (83bc <_calendar_get_counter+0x40>)
    83a2:	4618      	mov	r0, r3
    83a4:	4b06      	ldr	r3, [pc, #24]	; (83c0 <_calendar_get_counter+0x44>)
    83a6:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    83a8:	687b      	ldr	r3, [r7, #4]
    83aa:	681b      	ldr	r3, [r3, #0]
    83ac:	4618      	mov	r0, r3
    83ae:	4b05      	ldr	r3, [pc, #20]	; (83c4 <_calendar_get_counter+0x48>)
    83b0:	4798      	blx	r3
    83b2:	4603      	mov	r3, r0
}
    83b4:	4618      	mov	r0, r3
    83b6:	3708      	adds	r7, #8
    83b8:	46bd      	mov	sp, r7
    83ba:	bd80      	pop	{r7, pc}
    83bc:	00012854 	.word	0x00012854
    83c0:	00005f89 	.word	0x00005f89
    83c4:	00008289 	.word	0x00008289

000083c8 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    83c8:	b580      	push	{r7, lr}
    83ca:	b084      	sub	sp, #16
    83cc:	af00      	add	r7, sp, #0
    83ce:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    83d0:	687b      	ldr	r3, [r7, #4]
    83d2:	681b      	ldr	r3, [r3, #0]
    83d4:	4618      	mov	r0, r3
    83d6:	4b19      	ldr	r3, [pc, #100]	; (843c <_rtc_interrupt_handler+0x74>)
    83d8:	4798      	blx	r3
    83da:	4603      	mov	r3, r0
    83dc:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	681b      	ldr	r3, [r3, #0]
    83e2:	4618      	mov	r0, r3
    83e4:	4b16      	ldr	r3, [pc, #88]	; (8440 <_rtc_interrupt_handler+0x78>)
    83e6:	4798      	blx	r3
    83e8:	4603      	mov	r3, r0
    83ea:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    83ec:	89fa      	ldrh	r2, [r7, #14]
    83ee:	89bb      	ldrh	r3, [r7, #12]
    83f0:	4013      	ands	r3, r2
    83f2:	b29b      	uxth	r3, r3
    83f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    83f8:	2b00      	cmp	r3, #0
    83fa:	d009      	beq.n	8410 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	685b      	ldr	r3, [r3, #4]
    8400:	6878      	ldr	r0, [r7, #4]
    8402:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	681b      	ldr	r3, [r3, #0]
    8408:	4618      	mov	r0, r3
    840a:	4b0e      	ldr	r3, [pc, #56]	; (8444 <_rtc_interrupt_handler+0x7c>)
    840c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    840e:	e010      	b.n	8432 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    8410:	89fa      	ldrh	r2, [r7, #14]
    8412:	89bb      	ldrh	r3, [r7, #12]
    8414:	4013      	ands	r3, r2
    8416:	b29b      	uxth	r3, r3
    8418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    841c:	2b00      	cmp	r3, #0
    841e:	d008      	beq.n	8432 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	689b      	ldr	r3, [r3, #8]
    8424:	6878      	ldr	r0, [r7, #4]
    8426:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    8428:	687b      	ldr	r3, [r7, #4]
    842a:	681b      	ldr	r3, [r3, #0]
    842c:	4618      	mov	r0, r3
    842e:	4b06      	ldr	r3, [pc, #24]	; (8448 <_rtc_interrupt_handler+0x80>)
    8430:	4798      	blx	r3
}
    8432:	bf00      	nop
    8434:	3710      	adds	r7, #16
    8436:	46bd      	mov	sp, r7
    8438:	bd80      	pop	{r7, pc}
    843a:	bf00      	nop
    843c:	00008195 	.word	0x00008195
    8440:	000081af 	.word	0x000081af
    8444:	0000815d 	.word	0x0000815d
    8448:	00008179 	.word	0x00008179

0000844c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    844c:	b580      	push	{r7, lr}
    844e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    8450:	4b03      	ldr	r3, [pc, #12]	; (8460 <RTC_Handler+0x14>)
    8452:	681b      	ldr	r3, [r3, #0]
    8454:	4618      	mov	r0, r3
    8456:	4b03      	ldr	r3, [pc, #12]	; (8464 <RTC_Handler+0x18>)
    8458:	4798      	blx	r3
}
    845a:	bf00      	nop
    845c:	bd80      	pop	{r7, pc}
    845e:	bf00      	nop
    8460:	20002130 	.word	0x20002130
    8464:	000083c9 	.word	0x000083c9

00008468 <__NVIC_EnableIRQ>:
{
    8468:	b480      	push	{r7}
    846a:	b083      	sub	sp, #12
    846c:	af00      	add	r7, sp, #0
    846e:	4603      	mov	r3, r0
    8470:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8476:	2b00      	cmp	r3, #0
    8478:	db0b      	blt.n	8492 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    847a:	4909      	ldr	r1, [pc, #36]	; (84a0 <__NVIC_EnableIRQ+0x38>)
    847c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8480:	095b      	lsrs	r3, r3, #5
    8482:	88fa      	ldrh	r2, [r7, #6]
    8484:	f002 021f 	and.w	r2, r2, #31
    8488:	2001      	movs	r0, #1
    848a:	fa00 f202 	lsl.w	r2, r0, r2
    848e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8492:	bf00      	nop
    8494:	370c      	adds	r7, #12
    8496:	46bd      	mov	sp, r7
    8498:	f85d 7b04 	ldr.w	r7, [sp], #4
    849c:	4770      	bx	lr
    849e:	bf00      	nop
    84a0:	e000e100 	.word	0xe000e100

000084a4 <__NVIC_DisableIRQ>:
{
    84a4:	b480      	push	{r7}
    84a6:	b083      	sub	sp, #12
    84a8:	af00      	add	r7, sp, #0
    84aa:	4603      	mov	r3, r0
    84ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    84ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    84b2:	2b00      	cmp	r3, #0
    84b4:	db10      	blt.n	84d8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    84b6:	490b      	ldr	r1, [pc, #44]	; (84e4 <__NVIC_DisableIRQ+0x40>)
    84b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    84bc:	095b      	lsrs	r3, r3, #5
    84be:	88fa      	ldrh	r2, [r7, #6]
    84c0:	f002 021f 	and.w	r2, r2, #31
    84c4:	2001      	movs	r0, #1
    84c6:	fa00 f202 	lsl.w	r2, r0, r2
    84ca:	3320      	adds	r3, #32
    84cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    84d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    84d4:	f3bf 8f6f 	isb	sy
}
    84d8:	bf00      	nop
    84da:	370c      	adds	r7, #12
    84dc:	46bd      	mov	sp, r7
    84de:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e2:	4770      	bx	lr
    84e4:	e000e100 	.word	0xe000e100

000084e8 <__NVIC_ClearPendingIRQ>:
{
    84e8:	b480      	push	{r7}
    84ea:	b083      	sub	sp, #12
    84ec:	af00      	add	r7, sp, #0
    84ee:	4603      	mov	r3, r0
    84f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    84f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    84f6:	2b00      	cmp	r3, #0
    84f8:	db0c      	blt.n	8514 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    84fa:	4909      	ldr	r1, [pc, #36]	; (8520 <__NVIC_ClearPendingIRQ+0x38>)
    84fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8500:	095b      	lsrs	r3, r3, #5
    8502:	88fa      	ldrh	r2, [r7, #6]
    8504:	f002 021f 	and.w	r2, r2, #31
    8508:	2001      	movs	r0, #1
    850a:	fa00 f202 	lsl.w	r2, r0, r2
    850e:	3360      	adds	r3, #96	; 0x60
    8510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8514:	bf00      	nop
    8516:	370c      	adds	r7, #12
    8518:	46bd      	mov	sp, r7
    851a:	f85d 7b04 	ldr.w	r7, [sp], #4
    851e:	4770      	bx	lr
    8520:	e000e100 	.word	0xe000e100

00008524 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8524:	b480      	push	{r7}
    8526:	b083      	sub	sp, #12
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
    852c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    852e:	bf00      	nop
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	69da      	ldr	r2, [r3, #28]
    8534:	683b      	ldr	r3, [r7, #0]
    8536:	4013      	ands	r3, r2
    8538:	2b00      	cmp	r3, #0
    853a:	d1f9      	bne.n	8530 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    853c:	bf00      	nop
    853e:	370c      	adds	r7, #12
    8540:	46bd      	mov	sp, r7
    8542:	f85d 7b04 	ldr.w	r7, [sp], #4
    8546:	4770      	bx	lr

00008548 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    8548:	b480      	push	{r7}
    854a:	b083      	sub	sp, #12
    854c:	af00      	add	r7, sp, #0
    854e:	6078      	str	r0, [r7, #4]
    8550:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	69da      	ldr	r2, [r3, #28]
    8556:	683b      	ldr	r3, [r7, #0]
    8558:	4013      	ands	r3, r2
    855a:	2b00      	cmp	r3, #0
    855c:	bf14      	ite	ne
    855e:	2301      	movne	r3, #1
    8560:	2300      	moveq	r3, #0
    8562:	b2db      	uxtb	r3, r3
}
    8564:	4618      	mov	r0, r3
    8566:	370c      	adds	r7, #12
    8568:	46bd      	mov	sp, r7
    856a:	f85d 7b04 	ldr.w	r7, [sp], #4
    856e:	4770      	bx	lr

00008570 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8570:	b480      	push	{r7}
    8572:	b083      	sub	sp, #12
    8574:	af00      	add	r7, sp, #0
    8576:	6078      	str	r0, [r7, #4]
    8578:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    857a:	bf00      	nop
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	69da      	ldr	r2, [r3, #28]
    8580:	683b      	ldr	r3, [r7, #0]
    8582:	4013      	ands	r3, r2
    8584:	2b00      	cmp	r3, #0
    8586:	d1f9      	bne.n	857c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    8588:	bf00      	nop
    858a:	370c      	adds	r7, #12
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr

00008594 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    8594:	b480      	push	{r7}
    8596:	b083      	sub	sp, #12
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	69da      	ldr	r2, [r3, #28]
    85a2:	683b      	ldr	r3, [r7, #0]
    85a4:	4013      	ands	r3, r2
    85a6:	2b00      	cmp	r3, #0
    85a8:	bf14      	ite	ne
    85aa:	2301      	movne	r3, #1
    85ac:	2300      	moveq	r3, #0
    85ae:	b2db      	uxtb	r3, r3
}
    85b0:	4618      	mov	r0, r3
    85b2:	370c      	adds	r7, #12
    85b4:	46bd      	mov	sp, r7
    85b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ba:	4770      	bx	lr

000085bc <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    85bc:	b480      	push	{r7}
    85be:	b083      	sub	sp, #12
    85c0:	af00      	add	r7, sp, #0
    85c2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	2201      	movs	r2, #1
    85c8:	761a      	strb	r2, [r3, #24]
}
    85ca:	bf00      	nop
    85cc:	370c      	adds	r7, #12
    85ce:	46bd      	mov	sp, r7
    85d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d4:	4770      	bx	lr

000085d6 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    85d6:	b480      	push	{r7}
    85d8:	b083      	sub	sp, #12
    85da:	af00      	add	r7, sp, #0
    85dc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    85de:	687b      	ldr	r3, [r7, #4]
    85e0:	2202      	movs	r2, #2
    85e2:	761a      	strb	r2, [r3, #24]
}
    85e4:	bf00      	nop
    85e6:	370c      	adds	r7, #12
    85e8:	46bd      	mov	sp, r7
    85ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ee:	4770      	bx	lr

000085f0 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    85f0:	b480      	push	{r7}
    85f2:	b083      	sub	sp, #12
    85f4:	af00      	add	r7, sp, #0
    85f6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	7e1b      	ldrb	r3, [r3, #24]
    85fc:	b2db      	uxtb	r3, r3
}
    85fe:	4618      	mov	r0, r3
    8600:	370c      	adds	r7, #12
    8602:	46bd      	mov	sp, r7
    8604:	f85d 7b04 	ldr.w	r7, [sp], #4
    8608:	4770      	bx	lr

0000860a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    860a:	b480      	push	{r7}
    860c:	b083      	sub	sp, #12
    860e:	af00      	add	r7, sp, #0
    8610:	6078      	str	r0, [r7, #4]
    8612:	460b      	mov	r3, r1
    8614:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	78fa      	ldrb	r2, [r7, #3]
    861a:	761a      	strb	r2, [r3, #24]
}
    861c:	bf00      	nop
    861e:	370c      	adds	r7, #12
    8620:	46bd      	mov	sp, r7
    8622:	f85d 7b04 	ldr.w	r7, [sp], #4
    8626:	4770      	bx	lr

00008628 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    8628:	b480      	push	{r7}
    862a:	b085      	sub	sp, #20
    862c:	af00      	add	r7, sp, #0
    862e:	6078      	str	r0, [r7, #4]
    8630:	460b      	mov	r3, r1
    8632:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    8634:	687b      	ldr	r3, [r7, #4]
    8636:	7e1b      	ldrb	r3, [r3, #24]
    8638:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    863a:	7bfa      	ldrb	r2, [r7, #15]
    863c:	78fb      	ldrb	r3, [r7, #3]
    863e:	4013      	ands	r3, r2
    8640:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8642:	7bfb      	ldrb	r3, [r7, #15]
}
    8644:	4618      	mov	r0, r3
    8646:	3714      	adds	r7, #20
    8648:	46bd      	mov	sp, r7
    864a:	f85d 7b04 	ldr.w	r7, [sp], #4
    864e:	4770      	bx	lr

00008650 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    8650:	b480      	push	{r7}
    8652:	b083      	sub	sp, #12
    8654:	af00      	add	r7, sp, #0
    8656:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    8658:	687b      	ldr	r3, [r7, #4]
    865a:	7e1b      	ldrb	r3, [r3, #24]
    865c:	b2db      	uxtb	r3, r3
}
    865e:	4618      	mov	r0, r3
    8660:	370c      	adds	r7, #12
    8662:	46bd      	mov	sp, r7
    8664:	f85d 7b04 	ldr.w	r7, [sp], #4
    8668:	4770      	bx	lr

0000866a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    866a:	b480      	push	{r7}
    866c:	b083      	sub	sp, #12
    866e:	af00      	add	r7, sp, #0
    8670:	6078      	str	r0, [r7, #4]
    8672:	460b      	mov	r3, r1
    8674:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	78fa      	ldrb	r2, [r7, #3]
    867a:	761a      	strb	r2, [r3, #24]
}
    867c:	bf00      	nop
    867e:	370c      	adds	r7, #12
    8680:	46bd      	mov	sp, r7
    8682:	f85d 7b04 	ldr.w	r7, [sp], #4
    8686:	4770      	bx	lr

00008688 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    8688:	b480      	push	{r7}
    868a:	b083      	sub	sp, #12
    868c:	af00      	add	r7, sp, #0
    868e:	6078      	str	r0, [r7, #4]
    8690:	460b      	mov	r3, r1
    8692:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    8694:	78fb      	ldrb	r3, [r7, #3]
    8696:	f083 0301 	eor.w	r3, r3, #1
    869a:	b2db      	uxtb	r3, r3
    869c:	2b00      	cmp	r3, #0
    869e:	d003      	beq.n	86a8 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	2201      	movs	r2, #1
    86a4:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    86a6:	e002      	b.n	86ae <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    86a8:	687b      	ldr	r3, [r7, #4]
    86aa:	2201      	movs	r2, #1
    86ac:	759a      	strb	r2, [r3, #22]
}
    86ae:	bf00      	nop
    86b0:	370c      	adds	r7, #12
    86b2:	46bd      	mov	sp, r7
    86b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    86b8:	4770      	bx	lr

000086ba <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    86ba:	b480      	push	{r7}
    86bc:	b083      	sub	sp, #12
    86be:	af00      	add	r7, sp, #0
    86c0:	6078      	str	r0, [r7, #4]
    86c2:	460b      	mov	r3, r1
    86c4:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    86c6:	78fb      	ldrb	r3, [r7, #3]
    86c8:	f083 0301 	eor.w	r3, r3, #1
    86cc:	b2db      	uxtb	r3, r3
    86ce:	2b00      	cmp	r3, #0
    86d0:	d003      	beq.n	86da <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	2202      	movs	r2, #2
    86d6:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    86d8:	e002      	b.n	86e0 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    86da:	687b      	ldr	r3, [r7, #4]
    86dc:	2202      	movs	r2, #2
    86de:	759a      	strb	r2, [r3, #22]
}
    86e0:	bf00      	nop
    86e2:	370c      	adds	r7, #12
    86e4:	46bd      	mov	sp, r7
    86e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ea:	4770      	bx	lr

000086ec <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    86ec:	b480      	push	{r7}
    86ee:	b083      	sub	sp, #12
    86f0:	af00      	add	r7, sp, #0
    86f2:	6078      	str	r0, [r7, #4]
    86f4:	460b      	mov	r3, r1
    86f6:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    86f8:	78fb      	ldrb	r3, [r7, #3]
    86fa:	f083 0301 	eor.w	r3, r3, #1
    86fe:	b2db      	uxtb	r3, r3
    8700:	2b00      	cmp	r3, #0
    8702:	d003      	beq.n	870c <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    8704:	687b      	ldr	r3, [r7, #4]
    8706:	2280      	movs	r2, #128	; 0x80
    8708:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    870a:	e002      	b.n	8712 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    870c:	687b      	ldr	r3, [r7, #4]
    870e:	2280      	movs	r2, #128	; 0x80
    8710:	759a      	strb	r2, [r3, #22]
}
    8712:	bf00      	nop
    8714:	370c      	adds	r7, #12
    8716:	46bd      	mov	sp, r7
    8718:	f85d 7b04 	ldr.w	r7, [sp], #4
    871c:	4770      	bx	lr

0000871e <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    871e:	b480      	push	{r7}
    8720:	b083      	sub	sp, #12
    8722:	af00      	add	r7, sp, #0
    8724:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    8726:	687b      	ldr	r3, [r7, #4]
    8728:	2201      	movs	r2, #1
    872a:	759a      	strb	r2, [r3, #22]
}
    872c:	bf00      	nop
    872e:	370c      	adds	r7, #12
    8730:	46bd      	mov	sp, r7
    8732:	f85d 7b04 	ldr.w	r7, [sp], #4
    8736:	4770      	bx	lr

00008738 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    8738:	b480      	push	{r7}
    873a:	b083      	sub	sp, #12
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    8740:	687b      	ldr	r3, [r7, #4]
    8742:	2201      	movs	r2, #1
    8744:	751a      	strb	r2, [r3, #20]
}
    8746:	bf00      	nop
    8748:	370c      	adds	r7, #12
    874a:	46bd      	mov	sp, r7
    874c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8750:	4770      	bx	lr

00008752 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    8752:	b480      	push	{r7}
    8754:	b083      	sub	sp, #12
    8756:	af00      	add	r7, sp, #0
    8758:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    875a:	687b      	ldr	r3, [r7, #4]
    875c:	2202      	movs	r2, #2
    875e:	759a      	strb	r2, [r3, #22]
}
    8760:	bf00      	nop
    8762:	370c      	adds	r7, #12
    8764:	46bd      	mov	sp, r7
    8766:	f85d 7b04 	ldr.w	r7, [sp], #4
    876a:	4770      	bx	lr

0000876c <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    876c:	b480      	push	{r7}
    876e:	b083      	sub	sp, #12
    8770:	af00      	add	r7, sp, #0
    8772:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	2202      	movs	r2, #2
    8778:	751a      	strb	r2, [r3, #20]
}
    877a:	bf00      	nop
    877c:	370c      	adds	r7, #12
    877e:	46bd      	mov	sp, r7
    8780:	f85d 7b04 	ldr.w	r7, [sp], #4
    8784:	4770      	bx	lr

00008786 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    8786:	b480      	push	{r7}
    8788:	b083      	sub	sp, #12
    878a:	af00      	add	r7, sp, #0
    878c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    878e:	687b      	ldr	r3, [r7, #4]
    8790:	2204      	movs	r2, #4
    8792:	759a      	strb	r2, [r3, #22]
}
    8794:	bf00      	nop
    8796:	370c      	adds	r7, #12
    8798:	46bd      	mov	sp, r7
    879a:	f85d 7b04 	ldr.w	r7, [sp], #4
    879e:	4770      	bx	lr

000087a0 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    87a0:	b480      	push	{r7}
    87a2:	b083      	sub	sp, #12
    87a4:	af00      	add	r7, sp, #0
    87a6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    87a8:	687b      	ldr	r3, [r7, #4]
    87aa:	2204      	movs	r2, #4
    87ac:	751a      	strb	r2, [r3, #20]
}
    87ae:	bf00      	nop
    87b0:	370c      	adds	r7, #12
    87b2:	46bd      	mov	sp, r7
    87b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    87b8:	4770      	bx	lr

000087ba <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    87ba:	b480      	push	{r7}
    87bc:	b083      	sub	sp, #12
    87be:	af00      	add	r7, sp, #0
    87c0:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	7d9b      	ldrb	r3, [r3, #22]
    87c6:	b2db      	uxtb	r3, r3
}
    87c8:	4618      	mov	r0, r3
    87ca:	370c      	adds	r7, #12
    87cc:	46bd      	mov	sp, r7
    87ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d2:	4770      	bx	lr

000087d4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    87dc:	687b      	ldr	r3, [r7, #4]
    87de:	681b      	ldr	r3, [r3, #0]
    87e0:	f043 0202 	orr.w	r2, r3, #2
    87e4:	687b      	ldr	r3, [r7, #4]
    87e6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    87e8:	2103      	movs	r1, #3
    87ea:	6878      	ldr	r0, [r7, #4]
    87ec:	4b02      	ldr	r3, [pc, #8]	; (87f8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    87ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    87f0:	bf00      	nop
    87f2:	3708      	adds	r7, #8
    87f4:	46bd      	mov	sp, r7
    87f6:	bd80      	pop	{r7, pc}
    87f8:	00008525 	.word	0x00008525

000087fc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b082      	sub	sp, #8
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    8804:	687b      	ldr	r3, [r7, #4]
    8806:	681b      	ldr	r3, [r3, #0]
    8808:	f023 0202 	bic.w	r2, r3, #2
    880c:	687b      	ldr	r3, [r7, #4]
    880e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    8810:	2103      	movs	r1, #3
    8812:	6878      	ldr	r0, [r7, #4]
    8814:	4b02      	ldr	r3, [pc, #8]	; (8820 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    8816:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8818:	bf00      	nop
    881a:	3708      	adds	r7, #8
    881c:	46bd      	mov	sp, r7
    881e:	bd80      	pop	{r7, pc}
    8820:	00008525 	.word	0x00008525

00008824 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    8824:	b480      	push	{r7}
    8826:	b085      	sub	sp, #20
    8828:	af00      	add	r7, sp, #0
    882a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	681b      	ldr	r3, [r3, #0]
    8830:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    8832:	68fb      	ldr	r3, [r7, #12]
    8834:	0edb      	lsrs	r3, r3, #27
    8836:	f003 0301 	and.w	r3, r3, #1
    883a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    883c:	68fb      	ldr	r3, [r7, #12]
    883e:	2b00      	cmp	r3, #0
    8840:	bf14      	ite	ne
    8842:	2301      	movne	r3, #1
    8844:	2300      	moveq	r3, #0
    8846:	b2db      	uxtb	r3, r3
}
    8848:	4618      	mov	r0, r3
    884a:	3714      	adds	r7, #20
    884c:	46bd      	mov	sp, r7
    884e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8852:	4770      	bx	lr

00008854 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    8854:	b580      	push	{r7, lr}
    8856:	b084      	sub	sp, #16
    8858:	af00      	add	r7, sp, #0
    885a:	6078      	str	r0, [r7, #4]
    885c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    885e:	2103      	movs	r1, #3
    8860:	6878      	ldr	r0, [r7, #4]
    8862:	4b07      	ldr	r3, [pc, #28]	; (8880 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    8864:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    8866:	687b      	ldr	r3, [r7, #4]
    8868:	681b      	ldr	r3, [r3, #0]
    886a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    886c:	68fa      	ldr	r2, [r7, #12]
    886e:	683b      	ldr	r3, [r7, #0]
    8870:	4013      	ands	r3, r2
    8872:	60fb      	str	r3, [r7, #12]
	return tmp;
    8874:	68fb      	ldr	r3, [r7, #12]
}
    8876:	4618      	mov	r0, r3
    8878:	3710      	adds	r7, #16
    887a:	46bd      	mov	sp, r7
    887c:	bd80      	pop	{r7, pc}
    887e:	bf00      	nop
    8880:	00008525 	.word	0x00008525

00008884 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    8884:	b580      	push	{r7, lr}
    8886:	b082      	sub	sp, #8
    8888:	af00      	add	r7, sp, #0
    888a:	6078      	str	r0, [r7, #4]
    888c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	683a      	ldr	r2, [r7, #0]
    8892:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    8894:	2103      	movs	r1, #3
    8896:	6878      	ldr	r0, [r7, #4]
    8898:	4b02      	ldr	r3, [pc, #8]	; (88a4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    889a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    889c:	bf00      	nop
    889e:	3708      	adds	r7, #8
    88a0:	46bd      	mov	sp, r7
    88a2:	bd80      	pop	{r7, pc}
    88a4:	00008525 	.word	0x00008525

000088a8 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    88a8:	b580      	push	{r7, lr}
    88aa:	b084      	sub	sp, #16
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    88b0:	2103      	movs	r1, #3
    88b2:	6878      	ldr	r0, [r7, #4]
    88b4:	4b09      	ldr	r3, [pc, #36]	; (88dc <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    88b6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    88b8:	687b      	ldr	r3, [r7, #4]
    88ba:	681b      	ldr	r3, [r3, #0]
    88bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    88be:	68fb      	ldr	r3, [r7, #12]
    88c0:	085b      	lsrs	r3, r3, #1
    88c2:	f003 0301 	and.w	r3, r3, #1
    88c6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    88c8:	68fb      	ldr	r3, [r7, #12]
    88ca:	2b00      	cmp	r3, #0
    88cc:	bf14      	ite	ne
    88ce:	2301      	movne	r3, #1
    88d0:	2300      	moveq	r3, #0
    88d2:	b2db      	uxtb	r3, r3
}
    88d4:	4618      	mov	r0, r3
    88d6:	3710      	adds	r7, #16
    88d8:	46bd      	mov	sp, r7
    88da:	bd80      	pop	{r7, pc}
    88dc:	00008571 	.word	0x00008571

000088e0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    88e0:	b580      	push	{r7, lr}
    88e2:	b082      	sub	sp, #8
    88e4:	af00      	add	r7, sp, #0
    88e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	681b      	ldr	r3, [r3, #0]
    88ec:	f023 0202 	bic.w	r2, r3, #2
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    88f4:	2103      	movs	r1, #3
    88f6:	6878      	ldr	r0, [r7, #4]
    88f8:	4b02      	ldr	r3, [pc, #8]	; (8904 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    88fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    88fc:	bf00      	nop
    88fe:	3708      	adds	r7, #8
    8900:	46bd      	mov	sp, r7
    8902:	bd80      	pop	{r7, pc}
    8904:	00008571 	.word	0x00008571

00008908 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    8908:	b580      	push	{r7, lr}
    890a:	b084      	sub	sp, #16
    890c:	af00      	add	r7, sp, #0
    890e:	6078      	str	r0, [r7, #4]
    8910:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8912:	2103      	movs	r1, #3
    8914:	6878      	ldr	r0, [r7, #4]
    8916:	4b07      	ldr	r3, [pc, #28]	; (8934 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    8918:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    891a:	687b      	ldr	r3, [r7, #4]
    891c:	681b      	ldr	r3, [r3, #0]
    891e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8920:	68fa      	ldr	r2, [r7, #12]
    8922:	683b      	ldr	r3, [r7, #0]
    8924:	4013      	ands	r3, r2
    8926:	60fb      	str	r3, [r7, #12]
	return tmp;
    8928:	68fb      	ldr	r3, [r7, #12]
}
    892a:	4618      	mov	r0, r3
    892c:	3710      	adds	r7, #16
    892e:	46bd      	mov	sp, r7
    8930:	bd80      	pop	{r7, pc}
    8932:	bf00      	nop
    8934:	00008571 	.word	0x00008571

00008938 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    8938:	b580      	push	{r7, lr}
    893a:	b082      	sub	sp, #8
    893c:	af00      	add	r7, sp, #0
    893e:	6078      	str	r0, [r7, #4]
    8940:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    8942:	687b      	ldr	r3, [r7, #4]
    8944:	683a      	ldr	r2, [r7, #0]
    8946:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    8948:	2103      	movs	r1, #3
    894a:	6878      	ldr	r0, [r7, #4]
    894c:	4b02      	ldr	r3, [pc, #8]	; (8958 <hri_sercomspi_write_CTRLA_reg+0x20>)
    894e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8950:	bf00      	nop
    8952:	3708      	adds	r7, #8
    8954:	46bd      	mov	sp, r7
    8956:	bd80      	pop	{r7, pc}
    8958:	00008571 	.word	0x00008571

0000895c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    895c:	b580      	push	{r7, lr}
    895e:	b082      	sub	sp, #8
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	685b      	ldr	r3, [r3, #4]
    8968:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    896c:	687b      	ldr	r3, [r7, #4]
    896e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8970:	2104      	movs	r1, #4
    8972:	6878      	ldr	r0, [r7, #4]
    8974:	4b02      	ldr	r3, [pc, #8]	; (8980 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    8976:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8978:	bf00      	nop
    897a:	3708      	adds	r7, #8
    897c:	46bd      	mov	sp, r7
    897e:	bd80      	pop	{r7, pc}
    8980:	00008525 	.word	0x00008525

00008984 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    8984:	b580      	push	{r7, lr}
    8986:	b082      	sub	sp, #8
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	685b      	ldr	r3, [r3, #4]
    8990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8998:	2104      	movs	r1, #4
    899a:	6878      	ldr	r0, [r7, #4]
    899c:	4b02      	ldr	r3, [pc, #8]	; (89a8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    899e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    89a0:	bf00      	nop
    89a2:	3708      	adds	r7, #8
    89a4:	46bd      	mov	sp, r7
    89a6:	bd80      	pop	{r7, pc}
    89a8:	00008525 	.word	0x00008525

000089ac <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    89ac:	b580      	push	{r7, lr}
    89ae:	b082      	sub	sp, #8
    89b0:	af00      	add	r7, sp, #0
    89b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	685b      	ldr	r3, [r3, #4]
    89b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    89c0:	2104      	movs	r1, #4
    89c2:	6878      	ldr	r0, [r7, #4]
    89c4:	4b02      	ldr	r3, [pc, #8]	; (89d0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    89c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    89c8:	bf00      	nop
    89ca:	3708      	adds	r7, #8
    89cc:	46bd      	mov	sp, r7
    89ce:	bd80      	pop	{r7, pc}
    89d0:	00008525 	.word	0x00008525

000089d4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    89d4:	b580      	push	{r7, lr}
    89d6:	b082      	sub	sp, #8
    89d8:	af00      	add	r7, sp, #0
    89da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    89dc:	687b      	ldr	r3, [r7, #4]
    89de:	685b      	ldr	r3, [r3, #4]
    89e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    89e4:	687b      	ldr	r3, [r7, #4]
    89e6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    89e8:	2104      	movs	r1, #4
    89ea:	6878      	ldr	r0, [r7, #4]
    89ec:	4b02      	ldr	r3, [pc, #8]	; (89f8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    89ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    89f0:	bf00      	nop
    89f2:	3708      	adds	r7, #8
    89f4:	46bd      	mov	sp, r7
    89f6:	bd80      	pop	{r7, pc}
    89f8:	00008525 	.word	0x00008525

000089fc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b082      	sub	sp, #8
    8a00:	af00      	add	r7, sp, #0
    8a02:	6078      	str	r0, [r7, #4]
    8a04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	685a      	ldr	r2, [r3, #4]
    8a0a:	683b      	ldr	r3, [r7, #0]
    8a0c:	041b      	lsls	r3, r3, #16
    8a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    8a12:	431a      	orrs	r2, r3
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8a18:	2104      	movs	r1, #4
    8a1a:	6878      	ldr	r0, [r7, #4]
    8a1c:	4b02      	ldr	r3, [pc, #8]	; (8a28 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    8a1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8a20:	bf00      	nop
    8a22:	3708      	adds	r7, #8
    8a24:	46bd      	mov	sp, r7
    8a26:	bd80      	pop	{r7, pc}
    8a28:	00008525 	.word	0x00008525

00008a2c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	b082      	sub	sp, #8
    8a30:	af00      	add	r7, sp, #0
    8a32:	6078      	str	r0, [r7, #4]
    8a34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    8a36:	687b      	ldr	r3, [r7, #4]
    8a38:	683a      	ldr	r2, [r7, #0]
    8a3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8a3c:	2104      	movs	r1, #4
    8a3e:	6878      	ldr	r0, [r7, #4]
    8a40:	4b02      	ldr	r3, [pc, #8]	; (8a4c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    8a42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8a44:	bf00      	nop
    8a46:	3708      	adds	r7, #8
    8a48:	46bd      	mov	sp, r7
    8a4a:	bd80      	pop	{r7, pc}
    8a4c:	00008525 	.word	0x00008525

00008a50 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    8a50:	b580      	push	{r7, lr}
    8a52:	b082      	sub	sp, #8
    8a54:	af00      	add	r7, sp, #0
    8a56:	6078      	str	r0, [r7, #4]
    8a58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    8a5a:	687b      	ldr	r3, [r7, #4]
    8a5c:	683a      	ldr	r2, [r7, #0]
    8a5e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    8a60:	2117      	movs	r1, #23
    8a62:	6878      	ldr	r0, [r7, #4]
    8a64:	4b02      	ldr	r3, [pc, #8]	; (8a70 <hri_sercomspi_write_CTRLB_reg+0x20>)
    8a66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8a68:	bf00      	nop
    8a6a:	3708      	adds	r7, #8
    8a6c:	46bd      	mov	sp, r7
    8a6e:	bd80      	pop	{r7, pc}
    8a70:	00008571 	.word	0x00008571

00008a74 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    8a74:	b480      	push	{r7}
    8a76:	b083      	sub	sp, #12
    8a78:	af00      	add	r7, sp, #0
    8a7a:	6078      	str	r0, [r7, #4]
    8a7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    8a7e:	687b      	ldr	r3, [r7, #4]
    8a80:	683a      	ldr	r2, [r7, #0]
    8a82:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8a84:	bf00      	nop
    8a86:	370c      	adds	r7, #12
    8a88:	46bd      	mov	sp, r7
    8a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8e:	4770      	bx	lr

00008a90 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    8a90:	b480      	push	{r7}
    8a92:	b083      	sub	sp, #12
    8a94:	af00      	add	r7, sp, #0
    8a96:	6078      	str	r0, [r7, #4]
    8a98:	460b      	mov	r3, r1
    8a9a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    8a9c:	687b      	ldr	r3, [r7, #4]
    8a9e:	78fa      	ldrb	r2, [r7, #3]
    8aa0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8aa2:	bf00      	nop
    8aa4:	370c      	adds	r7, #12
    8aa6:	46bd      	mov	sp, r7
    8aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aac:	4770      	bx	lr
	...

00008ab0 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    8ab0:	b580      	push	{r7, lr}
    8ab2:	b084      	sub	sp, #16
    8ab4:	af00      	add	r7, sp, #0
    8ab6:	6078      	str	r0, [r7, #4]
    8ab8:	460b      	mov	r3, r1
    8aba:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    8abc:	687b      	ldr	r3, [r7, #4]
    8abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ac0:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    8ac2:	68fb      	ldr	r3, [r7, #12]
    8ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    8ac8:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    8aca:	78fb      	ldrb	r3, [r7, #3]
    8acc:	039b      	lsls	r3, r3, #14
    8ace:	461a      	mov	r2, r3
    8ad0:	68fb      	ldr	r3, [r7, #12]
    8ad2:	4313      	orrs	r3, r2
    8ad4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    8ad6:	687b      	ldr	r3, [r7, #4]
    8ad8:	68fa      	ldr	r2, [r7, #12]
    8ada:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8adc:	2104      	movs	r1, #4
    8ade:	6878      	ldr	r0, [r7, #4]
    8ae0:	4b02      	ldr	r3, [pc, #8]	; (8aec <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    8ae2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8ae4:	bf00      	nop
    8ae6:	3710      	adds	r7, #16
    8ae8:	46bd      	mov	sp, r7
    8aea:	bd80      	pop	{r7, pc}
    8aec:	00008525 	.word	0x00008525

00008af0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    8af0:	b580      	push	{r7, lr}
    8af2:	b082      	sub	sp, #8
    8af4:	af00      	add	r7, sp, #0
    8af6:	6078      	str	r0, [r7, #4]
    8af8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    8afa:	687b      	ldr	r3, [r7, #4]
    8afc:	683a      	ldr	r2, [r7, #0]
    8afe:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8b00:	2104      	movs	r1, #4
    8b02:	6878      	ldr	r0, [r7, #4]
    8b04:	4b02      	ldr	r3, [pc, #8]	; (8b10 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    8b06:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8b08:	bf00      	nop
    8b0a:	3708      	adds	r7, #8
    8b0c:	46bd      	mov	sp, r7
    8b0e:	bd80      	pop	{r7, pc}
    8b10:	00008525 	.word	0x00008525

00008b14 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    8b14:	b580      	push	{r7, lr}
    8b16:	b082      	sub	sp, #8
    8b18:	af00      	add	r7, sp, #0
    8b1a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8b1c:	2104      	movs	r1, #4
    8b1e:	6878      	ldr	r0, [r7, #4]
    8b20:	4b03      	ldr	r3, [pc, #12]	; (8b30 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    8b22:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    8b24:	687b      	ldr	r3, [r7, #4]
    8b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    8b28:	4618      	mov	r0, r3
    8b2a:	3708      	adds	r7, #8
    8b2c:	46bd      	mov	sp, r7
    8b2e:	bd80      	pop	{r7, pc}
    8b30:	00008525 	.word	0x00008525

00008b34 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    8b34:	b480      	push	{r7}
    8b36:	b083      	sub	sp, #12
    8b38:	af00      	add	r7, sp, #0
    8b3a:	6078      	str	r0, [r7, #4]
    8b3c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    8b3e:	687b      	ldr	r3, [r7, #4]
    8b40:	683a      	ldr	r2, [r7, #0]
    8b42:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8b44:	bf00      	nop
    8b46:	370c      	adds	r7, #12
    8b48:	46bd      	mov	sp, r7
    8b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b4e:	4770      	bx	lr

00008b50 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    8b50:	b580      	push	{r7, lr}
    8b52:	b082      	sub	sp, #8
    8b54:	af00      	add	r7, sp, #0
    8b56:	6078      	str	r0, [r7, #4]
    8b58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    8b5a:	687b      	ldr	r3, [r7, #4]
    8b5c:	683a      	ldr	r2, [r7, #0]
    8b5e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8b60:	2104      	movs	r1, #4
    8b62:	6878      	ldr	r0, [r7, #4]
    8b64:	4b02      	ldr	r3, [pc, #8]	; (8b70 <hri_sercomi2cm_write_DATA_reg+0x20>)
    8b66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8b68:	bf00      	nop
    8b6a:	3708      	adds	r7, #8
    8b6c:	46bd      	mov	sp, r7
    8b6e:	bd80      	pop	{r7, pc}
    8b70:	00008525 	.word	0x00008525

00008b74 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    8b74:	b580      	push	{r7, lr}
    8b76:	b082      	sub	sp, #8
    8b78:	af00      	add	r7, sp, #0
    8b7a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8b7c:	2104      	movs	r1, #4
    8b7e:	6878      	ldr	r0, [r7, #4]
    8b80:	4b03      	ldr	r3, [pc, #12]	; (8b90 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    8b82:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8b88:	4618      	mov	r0, r3
    8b8a:	3708      	adds	r7, #8
    8b8c:	46bd      	mov	sp, r7
    8b8e:	bd80      	pop	{r7, pc}
    8b90:	00008525 	.word	0x00008525

00008b94 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    8b94:	b480      	push	{r7}
    8b96:	b083      	sub	sp, #12
    8b98:	af00      	add	r7, sp, #0
    8b9a:	6078      	str	r0, [r7, #4]
    8b9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    8b9e:	687b      	ldr	r3, [r7, #4]
    8ba0:	683a      	ldr	r2, [r7, #0]
    8ba2:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8ba4:	bf00      	nop
    8ba6:	370c      	adds	r7, #12
    8ba8:	46bd      	mov	sp, r7
    8baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bae:	4770      	bx	lr

00008bb0 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    8bb0:	b480      	push	{r7}
    8bb2:	b083      	sub	sp, #12
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    8bb8:	687b      	ldr	r3, [r7, #4]
    8bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    8bbc:	4618      	mov	r0, r3
    8bbe:	370c      	adds	r7, #12
    8bc0:	46bd      	mov	sp, r7
    8bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bc6:	4770      	bx	lr

00008bc8 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    8bc8:	b480      	push	{r7}
    8bca:	b083      	sub	sp, #12
    8bcc:	af00      	add	r7, sp, #0
    8bce:	6078      	str	r0, [r7, #4]
    8bd0:	460b      	mov	r3, r1
    8bd2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	78fa      	ldrb	r2, [r7, #3]
    8bd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8bdc:	bf00      	nop
    8bde:	370c      	adds	r7, #12
    8be0:	46bd      	mov	sp, r7
    8be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8be6:	4770      	bx	lr

00008be8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    8be8:	b480      	push	{r7}
    8bea:	b083      	sub	sp, #12
    8bec:	af00      	add	r7, sp, #0
    8bee:	6078      	str	r0, [r7, #4]
    8bf0:	460b      	mov	r3, r1
    8bf2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	887a      	ldrh	r2, [r7, #2]
    8bf8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8bfa:	bf00      	nop
    8bfc:	370c      	adds	r7, #12
    8bfe:	46bd      	mov	sp, r7
    8c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c04:	4770      	bx	lr
	...

00008c08 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    8c08:	b580      	push	{r7, lr}
    8c0a:	b082      	sub	sp, #8
    8c0c:	af00      	add	r7, sp, #0
    8c0e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8c10:	2104      	movs	r1, #4
    8c12:	6878      	ldr	r0, [r7, #4]
    8c14:	4b06      	ldr	r3, [pc, #24]	; (8c30 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    8c16:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	8b5b      	ldrh	r3, [r3, #26]
    8c1c:	b29b      	uxth	r3, r3
    8c1e:	091b      	lsrs	r3, r3, #4
    8c20:	b29b      	uxth	r3, r3
    8c22:	f003 0303 	and.w	r3, r3, #3
    8c26:	b29b      	uxth	r3, r3
}
    8c28:	4618      	mov	r0, r3
    8c2a:	3708      	adds	r7, #8
    8c2c:	46bd      	mov	sp, r7
    8c2e:	bd80      	pop	{r7, pc}
    8c30:	00008525 	.word	0x00008525

00008c34 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    8c34:	b580      	push	{r7, lr}
    8c36:	b082      	sub	sp, #8
    8c38:	af00      	add	r7, sp, #0
    8c3a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8c3c:	2104      	movs	r1, #4
    8c3e:	6878      	ldr	r0, [r7, #4]
    8c40:	4b04      	ldr	r3, [pc, #16]	; (8c54 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    8c42:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    8c44:	687b      	ldr	r3, [r7, #4]
    8c46:	8b5b      	ldrh	r3, [r3, #26]
    8c48:	b29b      	uxth	r3, r3
}
    8c4a:	4618      	mov	r0, r3
    8c4c:	3708      	adds	r7, #8
    8c4e:	46bd      	mov	sp, r7
    8c50:	bd80      	pop	{r7, pc}
    8c52:	bf00      	nop
    8c54:	00008525 	.word	0x00008525

00008c58 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    8c58:	b580      	push	{r7, lr}
    8c5a:	b082      	sub	sp, #8
    8c5c:	af00      	add	r7, sp, #0
    8c5e:	6078      	str	r0, [r7, #4]
    8c60:	460b      	mov	r3, r1
    8c62:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    8c64:	687b      	ldr	r3, [r7, #4]
    8c66:	887a      	ldrh	r2, [r7, #2]
    8c68:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    8c6a:	2104      	movs	r1, #4
    8c6c:	6878      	ldr	r0, [r7, #4]
    8c6e:	4b03      	ldr	r3, [pc, #12]	; (8c7c <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    8c70:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    8c72:	bf00      	nop
    8c74:	3708      	adds	r7, #8
    8c76:	46bd      	mov	sp, r7
    8c78:	bd80      	pop	{r7, pc}
    8c7a:	bf00      	nop
    8c7c:	00008525 	.word	0x00008525

00008c80 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    8c80:	b4b0      	push	{r4, r5, r7}
    8c82:	b08d      	sub	sp, #52	; 0x34
    8c84:	af00      	add	r7, sp, #0
    8c86:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    8c88:	4b13      	ldr	r3, [pc, #76]	; (8cd8 <_sercom_get_hardware_index+0x58>)
    8c8a:	f107 040c 	add.w	r4, r7, #12
    8c8e:	461d      	mov	r5, r3
    8c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8c94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8c9c:	2300      	movs	r3, #0
    8c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ca0:	e010      	b.n	8cc4 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    8ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ca4:	009b      	lsls	r3, r3, #2
    8ca6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8caa:	4413      	add	r3, r2
    8cac:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8cb0:	461a      	mov	r2, r3
    8cb2:	687b      	ldr	r3, [r7, #4]
    8cb4:	429a      	cmp	r2, r3
    8cb6:	d102      	bne.n	8cbe <_sercom_get_hardware_index+0x3e>
			return i;
    8cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8cba:	b2db      	uxtb	r3, r3
    8cbc:	e006      	b.n	8ccc <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8cc0:	3301      	adds	r3, #1
    8cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    8cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8cc6:	2b07      	cmp	r3, #7
    8cc8:	d9eb      	bls.n	8ca2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    8cca:	2300      	movs	r3, #0
}
    8ccc:	4618      	mov	r0, r3
    8cce:	3734      	adds	r7, #52	; 0x34
    8cd0:	46bd      	mov	sp, r7
    8cd2:	bcb0      	pop	{r4, r5, r7}
    8cd4:	4770      	bx	lr
    8cd6:	bf00      	nop
    8cd8:	00012888 	.word	0x00012888

00008cdc <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    8cdc:	b480      	push	{r7}
    8cde:	b083      	sub	sp, #12
    8ce0:	af00      	add	r7, sp, #0
    8ce2:	6078      	str	r0, [r7, #4]
    8ce4:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    8cec:	d102      	bne.n	8cf4 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    8cee:	4a0b      	ldr	r2, [pc, #44]	; (8d1c <_sercom_init_irq_param+0x40>)
    8cf0:	683b      	ldr	r3, [r7, #0]
    8cf2:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	4a0a      	ldr	r2, [pc, #40]	; (8d20 <_sercom_init_irq_param+0x44>)
    8cf8:	4293      	cmp	r3, r2
    8cfa:	d102      	bne.n	8d02 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    8cfc:	4a09      	ldr	r2, [pc, #36]	; (8d24 <_sercom_init_irq_param+0x48>)
    8cfe:	683b      	ldr	r3, [r7, #0]
    8d00:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    8d02:	687b      	ldr	r3, [r7, #4]
    8d04:	4a08      	ldr	r2, [pc, #32]	; (8d28 <_sercom_init_irq_param+0x4c>)
    8d06:	4293      	cmp	r3, r2
    8d08:	d102      	bne.n	8d10 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    8d0a:	4a08      	ldr	r2, [pc, #32]	; (8d2c <_sercom_init_irq_param+0x50>)
    8d0c:	683b      	ldr	r3, [r7, #0]
    8d0e:	6013      	str	r3, [r2, #0]
	}
}
    8d10:	bf00      	nop
    8d12:	370c      	adds	r7, #12
    8d14:	46bd      	mov	sp, r7
    8d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d1a:	4770      	bx	lr
    8d1c:	2000214c 	.word	0x2000214c
    8d20:	43000400 	.word	0x43000400
    8d24:	20002150 	.word	0x20002150
    8d28:	43000c00 	.word	0x43000c00
    8d2c:	20002154 	.word	0x20002154

00008d30 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	b084      	sub	sp, #16
    8d34:	af00      	add	r7, sp, #0
    8d36:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    8d38:	6878      	ldr	r0, [r7, #4]
    8d3a:	4b13      	ldr	r3, [pc, #76]	; (8d88 <_get_i2cm_index+0x58>)
    8d3c:	4798      	blx	r3
    8d3e:	4603      	mov	r3, r0
    8d40:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8d42:	2300      	movs	r3, #0
    8d44:	73fb      	strb	r3, [r7, #15]
    8d46:	e010      	b.n	8d6a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    8d48:	7bfa      	ldrb	r2, [r7, #15]
    8d4a:	4910      	ldr	r1, [pc, #64]	; (8d8c <_get_i2cm_index+0x5c>)
    8d4c:	4613      	mov	r3, r2
    8d4e:	005b      	lsls	r3, r3, #1
    8d50:	4413      	add	r3, r2
    8d52:	00db      	lsls	r3, r3, #3
    8d54:	440b      	add	r3, r1
    8d56:	781b      	ldrb	r3, [r3, #0]
    8d58:	7bba      	ldrb	r2, [r7, #14]
    8d5a:	429a      	cmp	r2, r3
    8d5c:	d102      	bne.n	8d64 <_get_i2cm_index+0x34>
			return i;
    8d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8d62:	e00d      	b.n	8d80 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    8d64:	7bfb      	ldrb	r3, [r7, #15]
    8d66:	3301      	adds	r3, #1
    8d68:	73fb      	strb	r3, [r7, #15]
    8d6a:	7bfb      	ldrb	r3, [r7, #15]
    8d6c:	2b01      	cmp	r3, #1
    8d6e:	d9eb      	bls.n	8d48 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    8d70:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    8d74:	4906      	ldr	r1, [pc, #24]	; (8d90 <_get_i2cm_index+0x60>)
    8d76:	2000      	movs	r0, #0
    8d78:	4b06      	ldr	r3, [pc, #24]	; (8d94 <_get_i2cm_index+0x64>)
    8d7a:	4798      	blx	r3
	return -1;
    8d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
    8d80:	4618      	mov	r0, r3
    8d82:	3710      	adds	r7, #16
    8d84:	46bd      	mov	sp, r7
    8d86:	bd80      	pop	{r7, pc}
    8d88:	00008c81 	.word	0x00008c81
    8d8c:	20000018 	.word	0x20000018
    8d90:	0001286c 	.word	0x0001286c
    8d94:	00005f89 	.word	0x00005f89

00008d98 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    8d98:	b580      	push	{r7, lr}
    8d9a:	b082      	sub	sp, #8
    8d9c:	af00      	add	r7, sp, #0
    8d9e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    8da0:	2103      	movs	r1, #3
    8da2:	6878      	ldr	r0, [r7, #4]
    8da4:	4b02      	ldr	r3, [pc, #8]	; (8db0 <_sercom_i2c_send_stop+0x18>)
    8da6:	4798      	blx	r3
}
    8da8:	bf00      	nop
    8daa:	3708      	adds	r7, #8
    8dac:	46bd      	mov	sp, r7
    8dae:	bd80      	pop	{r7, pc}
    8db0:	000089fd 	.word	0x000089fd

00008db4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    8db4:	b590      	push	{r4, r7, lr}
    8db6:	b087      	sub	sp, #28
    8db8:	af00      	add	r7, sp, #0
    8dba:	60f8      	str	r0, [r7, #12]
    8dbc:	60b9      	str	r1, [r7, #8]
    8dbe:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    8dc0:	68f8      	ldr	r0, [r7, #12]
    8dc2:	4b7d      	ldr	r3, [pc, #500]	; (8fb8 <_sercom_i2c_sync_analyse_flags+0x204>)
    8dc4:	4798      	blx	r3
    8dc6:	4603      	mov	r3, r0
    8dc8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    8dca:	68f8      	ldr	r0, [r7, #12]
    8dcc:	4b7b      	ldr	r3, [pc, #492]	; (8fbc <_sercom_i2c_sync_analyse_flags+0x208>)
    8dce:	4798      	blx	r3
    8dd0:	4603      	mov	r3, r0
    8dd2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8dd4:	68bb      	ldr	r3, [r7, #8]
    8dd6:	f003 0301 	and.w	r3, r3, #1
    8dda:	2b00      	cmp	r3, #0
    8ddc:	f000 8095 	beq.w	8f0a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    8de0:	8a7b      	ldrh	r3, [r7, #18]
    8de2:	f003 0302 	and.w	r3, r3, #2
    8de6:	2b00      	cmp	r3, #0
    8de8:	d01d      	beq.n	8e26 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    8dea:	68f8      	ldr	r0, [r7, #12]
    8dec:	4b74      	ldr	r3, [pc, #464]	; (8fc0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    8dee:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	885b      	ldrh	r3, [r3, #2]
    8df4:	b29b      	uxth	r3, r3
    8df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8dfa:	b29a      	uxth	r2, r3
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	885b      	ldrh	r3, [r3, #2]
    8e04:	b29b      	uxth	r3, r3
    8e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8e0a:	b29a      	uxth	r2, r3
    8e0c:	687b      	ldr	r3, [r7, #4]
    8e0e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8e10:	8a7b      	ldrh	r3, [r7, #18]
    8e12:	f003 0301 	and.w	r3, r3, #1
    8e16:	2b00      	cmp	r3, #0
    8e18:	d002      	beq.n	8e20 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    8e1a:	f06f 0304 	mvn.w	r3, #4
    8e1e:	e0c6      	b.n	8fae <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    8e20:	f06f 0303 	mvn.w	r3, #3
    8e24:	e0c3      	b.n	8fae <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    8e26:	8a7b      	ldrh	r3, [r7, #18]
    8e28:	f003 0304 	and.w	r3, r3, #4
    8e2c:	2b00      	cmp	r3, #0
    8e2e:	d01f      	beq.n	8e70 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    8e30:	687b      	ldr	r3, [r7, #4]
    8e32:	685b      	ldr	r3, [r3, #4]
    8e34:	2b00      	cmp	r3, #0
    8e36:	dd07      	ble.n	8e48 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    8e38:	687b      	ldr	r3, [r7, #4]
    8e3a:	885b      	ldrh	r3, [r3, #2]
    8e3c:	b29b      	uxth	r3, r3
    8e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8e42:	b29a      	uxth	r2, r3
    8e44:	687b      	ldr	r3, [r7, #4]
    8e46:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    8e48:	687b      	ldr	r3, [r7, #4]
    8e4a:	885b      	ldrh	r3, [r3, #2]
    8e4c:	b29b      	uxth	r3, r3
    8e4e:	b21b      	sxth	r3, r3
    8e50:	2b00      	cmp	r3, #0
    8e52:	da02      	bge.n	8e5a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    8e54:	68f8      	ldr	r0, [r7, #12]
    8e56:	4b5b      	ldr	r3, [pc, #364]	; (8fc4 <_sercom_i2c_sync_analyse_flags+0x210>)
    8e58:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	885b      	ldrh	r3, [r3, #2]
    8e5e:	b29b      	uxth	r3, r3
    8e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8e64:	b29a      	uxth	r2, r3
    8e66:	687b      	ldr	r3, [r7, #4]
    8e68:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    8e6a:	f06f 0301 	mvn.w	r3, #1
    8e6e:	e09e      	b.n	8fae <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    8e70:	687b      	ldr	r3, [r7, #4]
    8e72:	885b      	ldrh	r3, [r3, #2]
    8e74:	b29b      	uxth	r3, r3
    8e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d01c      	beq.n	8eb8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	881b      	ldrh	r3, [r3, #0]
    8e82:	121b      	asrs	r3, r3, #8
    8e84:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8e86:	f003 0406 	and.w	r4, r3, #6
    8e8a:	68f8      	ldr	r0, [r7, #12]
    8e8c:	4b4e      	ldr	r3, [pc, #312]	; (8fc8 <_sercom_i2c_sync_analyse_flags+0x214>)
    8e8e:	4798      	blx	r3
    8e90:	4603      	mov	r3, r0
    8e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8e96:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    8e98:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    8e9c:	4619      	mov	r1, r3
    8e9e:	68f8      	ldr	r0, [r7, #12]
    8ea0:	4b4a      	ldr	r3, [pc, #296]	; (8fcc <_sercom_i2c_sync_analyse_flags+0x218>)
    8ea2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	885b      	ldrh	r3, [r3, #2]
    8ea8:	b29b      	uxth	r3, r3
    8eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    8eae:	b29a      	uxth	r2, r3
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8eb4:	2300      	movs	r3, #0
    8eb6:	e07a      	b.n	8fae <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	685b      	ldr	r3, [r3, #4]
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	d111      	bne.n	8ee4 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    8ec0:	687b      	ldr	r3, [r7, #4]
    8ec2:	885b      	ldrh	r3, [r3, #2]
    8ec4:	b29b      	uxth	r3, r3
    8ec6:	b21b      	sxth	r3, r3
    8ec8:	2b00      	cmp	r3, #0
    8eca:	da02      	bge.n	8ed2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    8ecc:	68f8      	ldr	r0, [r7, #12]
    8ece:	4b3d      	ldr	r3, [pc, #244]	; (8fc4 <_sercom_i2c_sync_analyse_flags+0x210>)
    8ed0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	885b      	ldrh	r3, [r3, #2]
    8ed6:	b29b      	uxth	r3, r3
    8ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8edc:	b29a      	uxth	r2, r3
    8ede:	687b      	ldr	r3, [r7, #4]
    8ee0:	805a      	strh	r2, [r3, #2]
    8ee2:	e010      	b.n	8f06 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	689b      	ldr	r3, [r3, #8]
    8ee8:	781b      	ldrb	r3, [r3, #0]
    8eea:	4619      	mov	r1, r3
    8eec:	68f8      	ldr	r0, [r7, #12]
    8eee:	4b38      	ldr	r3, [pc, #224]	; (8fd0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    8ef0:	4798      	blx	r3
				msg->buffer++;
    8ef2:	687b      	ldr	r3, [r7, #4]
    8ef4:	689b      	ldr	r3, [r3, #8]
    8ef6:	1c5a      	adds	r2, r3, #1
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	609a      	str	r2, [r3, #8]
				msg->len--;
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	685b      	ldr	r3, [r3, #4]
    8f00:	1e5a      	subs	r2, r3, #1
    8f02:	687b      	ldr	r3, [r7, #4]
    8f04:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    8f06:	2300      	movs	r3, #0
    8f08:	e051      	b.n	8fae <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    8f0a:	68bb      	ldr	r3, [r7, #8]
    8f0c:	f003 0302 	and.w	r3, r3, #2
    8f10:	2b00      	cmp	r3, #0
    8f12:	d04b      	beq.n	8fac <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    8f14:	687b      	ldr	r3, [r7, #4]
    8f16:	685b      	ldr	r3, [r3, #4]
    8f18:	2b00      	cmp	r3, #0
    8f1a:	d041      	beq.n	8fa0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    8f1c:	8a7b      	ldrh	r3, [r7, #18]
    8f1e:	f003 0304 	and.w	r3, r3, #4
    8f22:	2b00      	cmp	r3, #0
    8f24:	d13c      	bne.n	8fa0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    8f26:	687b      	ldr	r3, [r7, #4]
    8f28:	685b      	ldr	r3, [r3, #4]
    8f2a:	1e5a      	subs	r2, r3, #1
    8f2c:	687b      	ldr	r3, [r7, #4]
    8f2e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    8f30:	687b      	ldr	r3, [r7, #4]
    8f32:	685b      	ldr	r3, [r3, #4]
    8f34:	2b00      	cmp	r3, #0
    8f36:	d102      	bne.n	8f3e <_sercom_i2c_sync_analyse_flags+0x18a>
    8f38:	697b      	ldr	r3, [r7, #20]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d006      	beq.n	8f4c <_sercom_i2c_sync_analyse_flags+0x198>
    8f3e:	687b      	ldr	r3, [r7, #4]
    8f40:	685b      	ldr	r3, [r3, #4]
    8f42:	2b01      	cmp	r3, #1
    8f44:	d105      	bne.n	8f52 <_sercom_i2c_sync_analyse_flags+0x19e>
    8f46:	697b      	ldr	r3, [r7, #20]
    8f48:	2b00      	cmp	r3, #0
    8f4a:	d002      	beq.n	8f52 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    8f4c:	68f8      	ldr	r0, [r7, #12]
    8f4e:	4b21      	ldr	r3, [pc, #132]	; (8fd4 <_sercom_i2c_sync_analyse_flags+0x220>)
    8f50:	4798      	blx	r3
			}

			if (msg->len == 0) {
    8f52:	687b      	ldr	r3, [r7, #4]
    8f54:	685b      	ldr	r3, [r3, #4]
    8f56:	2b00      	cmp	r3, #0
    8f58:	d113      	bne.n	8f82 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    8f5a:	687b      	ldr	r3, [r7, #4]
    8f5c:	885b      	ldrh	r3, [r3, #2]
    8f5e:	b29b      	uxth	r3, r3
    8f60:	b21b      	sxth	r3, r3
    8f62:	2b00      	cmp	r3, #0
    8f64:	da05      	bge.n	8f72 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    8f66:	68f8      	ldr	r0, [r7, #12]
    8f68:	4b1b      	ldr	r3, [pc, #108]	; (8fd8 <_sercom_i2c_sync_analyse_flags+0x224>)
    8f6a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    8f6c:	68f8      	ldr	r0, [r7, #12]
    8f6e:	4b15      	ldr	r3, [pc, #84]	; (8fc4 <_sercom_i2c_sync_analyse_flags+0x210>)
    8f70:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8f72:	687b      	ldr	r3, [r7, #4]
    8f74:	885b      	ldrh	r3, [r3, #2]
    8f76:	b29b      	uxth	r3, r3
    8f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8f7c:	b29a      	uxth	r2, r3
    8f7e:	687b      	ldr	r3, [r7, #4]
    8f80:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	689c      	ldr	r4, [r3, #8]
    8f86:	1c62      	adds	r2, r4, #1
    8f88:	687b      	ldr	r3, [r7, #4]
    8f8a:	609a      	str	r2, [r3, #8]
    8f8c:	68f8      	ldr	r0, [r7, #12]
    8f8e:	4b13      	ldr	r3, [pc, #76]	; (8fdc <_sercom_i2c_sync_analyse_flags+0x228>)
    8f90:	4798      	blx	r3
    8f92:	4603      	mov	r3, r0
    8f94:	b2db      	uxtb	r3, r3
    8f96:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8f98:	68f8      	ldr	r0, [r7, #12]
    8f9a:	4b11      	ldr	r3, [pc, #68]	; (8fe0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8f9c:	4798      	blx	r3
    8f9e:	e005      	b.n	8fac <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8fa0:	68f8      	ldr	r0, [r7, #12]
    8fa2:	4b0f      	ldr	r3, [pc, #60]	; (8fe0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    8fa4:	4798      	blx	r3
			return I2C_NACK;
    8fa6:	f06f 0301 	mvn.w	r3, #1
    8faa:	e000      	b.n	8fae <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    8fac:	2300      	movs	r3, #0
}
    8fae:	4618      	mov	r0, r3
    8fb0:	371c      	adds	r7, #28
    8fb2:	46bd      	mov	sp, r7
    8fb4:	bd90      	pop	{r4, r7, pc}
    8fb6:	bf00      	nop
    8fb8:	00008825 	.word	0x00008825
    8fbc:	00008c35 	.word	0x00008c35
    8fc0:	000085bd 	.word	0x000085bd
    8fc4:	00008d99 	.word	0x00008d99
    8fc8:	00008b15 	.word	0x00008b15
    8fcc:	00008af1 	.word	0x00008af1
    8fd0:	00008b51 	.word	0x00008b51
    8fd4:	000089ad 	.word	0x000089ad
    8fd8:	00008985 	.word	0x00008985
    8fdc:	00008b75 	.word	0x00008b75
    8fe0:	000085d7 	.word	0x000085d7

00008fe4 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    8fe4:	b580      	push	{r7, lr}
    8fe6:	b086      	sub	sp, #24
    8fe8:	af00      	add	r7, sp, #0
    8fea:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	691b      	ldr	r3, [r3, #16]
    8ff0:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    8ff2:	6938      	ldr	r0, [r7, #16]
    8ff4:	4b37      	ldr	r3, [pc, #220]	; (90d4 <_sercom_i2c_m_irq_handler+0xf0>)
    8ff6:	4798      	blx	r3
    8ff8:	4603      	mov	r3, r0
    8ffa:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    8ffc:	2300      	movs	r3, #0
    8ffe:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	2b00      	cmp	r3, #0
    9004:	bf14      	ite	ne
    9006:	2301      	movne	r3, #1
    9008:	2300      	moveq	r3, #0
    900a:	b2db      	uxtb	r3, r3
    900c:	f240 422a 	movw	r2, #1066	; 0x42a
    9010:	4931      	ldr	r1, [pc, #196]	; (90d8 <_sercom_i2c_m_irq_handler+0xf4>)
    9012:	4618      	mov	r0, r3
    9014:	4b31      	ldr	r3, [pc, #196]	; (90dc <_sercom_i2c_m_irq_handler+0xf8>)
    9016:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    9018:	687b      	ldr	r3, [r7, #4]
    901a:	691b      	ldr	r3, [r3, #16]
    901c:	2b00      	cmp	r3, #0
    901e:	bf14      	ite	ne
    9020:	2301      	movne	r3, #1
    9022:	2300      	moveq	r3, #0
    9024:	b2db      	uxtb	r3, r3
    9026:	f240 422b 	movw	r2, #1067	; 0x42b
    902a:	492b      	ldr	r1, [pc, #172]	; (90d8 <_sercom_i2c_m_irq_handler+0xf4>)
    902c:	4618      	mov	r0, r3
    902e:	4b2b      	ldr	r3, [pc, #172]	; (90dc <_sercom_i2c_m_irq_handler+0xf8>)
    9030:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    9032:	bf00      	nop
    9034:	68fb      	ldr	r3, [r7, #12]
    9036:	f003 0380 	and.w	r3, r3, #128	; 0x80
    903a:	2b00      	cmp	r3, #0
    903c:	d126      	bne.n	908c <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    903e:	687b      	ldr	r3, [r7, #4]
    9040:	461a      	mov	r2, r3
    9042:	68f9      	ldr	r1, [r7, #12]
    9044:	6938      	ldr	r0, [r7, #16]
    9046:	4b26      	ldr	r3, [pc, #152]	; (90e0 <_sercom_i2c_m_irq_handler+0xfc>)
    9048:	4798      	blx	r3
    904a:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    904c:	697b      	ldr	r3, [r7, #20]
    904e:	2b00      	cmp	r3, #0
    9050:	d11b      	bne.n	908a <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    9052:	68fb      	ldr	r3, [r7, #12]
    9054:	f003 0301 	and.w	r3, r3, #1
    9058:	2b00      	cmp	r3, #0
    905a:	d008      	beq.n	906e <_sercom_i2c_m_irq_handler+0x8a>
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	699b      	ldr	r3, [r3, #24]
    9060:	2b00      	cmp	r3, #0
    9062:	d004      	beq.n	906e <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	699b      	ldr	r3, [r3, #24]
    9068:	6878      	ldr	r0, [r7, #4]
    906a:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    906c:	e02e      	b.n	90cc <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    906e:	68fb      	ldr	r3, [r7, #12]
    9070:	f003 0302 	and.w	r3, r3, #2
    9074:	2b00      	cmp	r3, #0
    9076:	d029      	beq.n	90cc <_sercom_i2c_m_irq_handler+0xe8>
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	69db      	ldr	r3, [r3, #28]
    907c:	2b00      	cmp	r3, #0
    907e:	d025      	beq.n	90cc <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	69db      	ldr	r3, [r3, #28]
    9084:	6878      	ldr	r0, [r7, #4]
    9086:	4798      	blx	r3
		return;
    9088:	e020      	b.n	90cc <_sercom_i2c_m_irq_handler+0xe8>
			break;
    908a:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	885b      	ldrh	r3, [r3, #2]
    9090:	b29b      	uxth	r3, r3
    9092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9096:	b29a      	uxth	r2, r3
    9098:	687b      	ldr	r3, [r7, #4]
    909a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    909c:	687b      	ldr	r3, [r7, #4]
    909e:	695b      	ldr	r3, [r3, #20]
    90a0:	2b00      	cmp	r3, #0
    90a2:	d014      	beq.n	90ce <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    90a4:	697b      	ldr	r3, [r7, #20]
    90a6:	2b00      	cmp	r3, #0
    90a8:	d005      	beq.n	90b6 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	695b      	ldr	r3, [r3, #20]
    90ae:	6979      	ldr	r1, [r7, #20]
    90b0:	6878      	ldr	r0, [r7, #4]
    90b2:	4798      	blx	r3
    90b4:	e005      	b.n	90c2 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    90b6:	687b      	ldr	r3, [r7, #4]
    90b8:	695b      	ldr	r3, [r3, #20]
    90ba:	f06f 0104 	mvn.w	r1, #4
    90be:	6878      	ldr	r0, [r7, #4]
    90c0:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    90c2:	2180      	movs	r1, #128	; 0x80
    90c4:	6938      	ldr	r0, [r7, #16]
    90c6:	4b07      	ldr	r3, [pc, #28]	; (90e4 <_sercom_i2c_m_irq_handler+0x100>)
    90c8:	4798      	blx	r3
    90ca:	e000      	b.n	90ce <_sercom_i2c_m_irq_handler+0xea>
		return;
    90cc:	bf00      	nop
	}
}
    90ce:	3718      	adds	r7, #24
    90d0:	46bd      	mov	sp, r7
    90d2:	bd80      	pop	{r7, pc}
    90d4:	000085f1 	.word	0x000085f1
    90d8:	0001286c 	.word	0x0001286c
    90dc:	00005f89 	.word	0x00005f89
    90e0:	00008db5 	.word	0x00008db5
    90e4:	0000860b 	.word	0x0000860b

000090e8 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    90e8:	b580      	push	{r7, lr}
    90ea:	b082      	sub	sp, #8
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	2b00      	cmp	r3, #0
    90f4:	bf14      	ite	ne
    90f6:	2301      	movne	r3, #1
    90f8:	2300      	moveq	r3, #0
    90fa:	b2db      	uxtb	r3, r3
    90fc:	f44f 628a 	mov.w	r2, #1104	; 0x450
    9100:	4906      	ldr	r1, [pc, #24]	; (911c <_i2c_m_async_enable+0x34>)
    9102:	4618      	mov	r0, r3
    9104:	4b06      	ldr	r3, [pc, #24]	; (9120 <_i2c_m_async_enable+0x38>)
    9106:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    9108:	687b      	ldr	r3, [r7, #4]
    910a:	691b      	ldr	r3, [r3, #16]
    910c:	4618      	mov	r0, r3
    910e:	4b05      	ldr	r3, [pc, #20]	; (9124 <_i2c_m_async_enable+0x3c>)
    9110:	4798      	blx	r3
    9112:	4603      	mov	r3, r0
}
    9114:	4618      	mov	r0, r3
    9116:	3708      	adds	r7, #8
    9118:	46bd      	mov	sp, r7
    911a:	bd80      	pop	{r7, pc}
    911c:	0001286c 	.word	0x0001286c
    9120:	00005f89 	.word	0x00005f89
    9124:	00009479 	.word	0x00009479

00009128 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    9128:	b580      	push	{r7, lr}
    912a:	b082      	sub	sp, #8
    912c:	af00      	add	r7, sp, #0
    912e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    9130:	6878      	ldr	r0, [r7, #4]
    9132:	4b05      	ldr	r3, [pc, #20]	; (9148 <_sercom_get_irq_num+0x20>)
    9134:	4798      	blx	r3
    9136:	4603      	mov	r3, r0
    9138:	009b      	lsls	r3, r3, #2
    913a:	b2db      	uxtb	r3, r3
    913c:	332e      	adds	r3, #46	; 0x2e
    913e:	b2db      	uxtb	r3, r3
}
    9140:	4618      	mov	r0, r3
    9142:	3708      	adds	r7, #8
    9144:	46bd      	mov	sp, r7
    9146:	bd80      	pop	{r7, pc}
    9148:	00008c81 	.word	0x00008c81

0000914c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    914c:	b580      	push	{r7, lr}
    914e:	b086      	sub	sp, #24
    9150:	af00      	add	r7, sp, #0
    9152:	6078      	str	r0, [r7, #4]
    9154:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    9156:	687b      	ldr	r3, [r7, #4]
    9158:	2b00      	cmp	r3, #0
    915a:	bf14      	ite	ne
    915c:	2301      	movne	r3, #1
    915e:	2300      	moveq	r3, #0
    9160:	b2db      	uxtb	r3, r3
    9162:	f240 429e 	movw	r2, #1182	; 0x49e
    9166:	491d      	ldr	r1, [pc, #116]	; (91dc <_i2c_m_async_init+0x90>)
    9168:	4618      	mov	r0, r3
    916a:	4b1d      	ldr	r3, [pc, #116]	; (91e0 <_i2c_m_async_init+0x94>)
    916c:	4798      	blx	r3

	i2c_dev->hw = hw;
    916e:	687b      	ldr	r3, [r7, #4]
    9170:	683a      	ldr	r2, [r7, #0]
    9172:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    9174:	687b      	ldr	r3, [r7, #4]
    9176:	6839      	ldr	r1, [r7, #0]
    9178:	4618      	mov	r0, r3
    917a:	4b1a      	ldr	r3, [pc, #104]	; (91e4 <_i2c_m_async_init+0x98>)
    917c:	4798      	blx	r3
    917e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    9180:	68fb      	ldr	r3, [r7, #12]
    9182:	2b00      	cmp	r3, #0
    9184:	d001      	beq.n	918a <_i2c_m_async_init+0x3e>
		return init_status;
    9186:	68fb      	ldr	r3, [r7, #12]
    9188:	e024      	b.n	91d4 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    918a:	6879      	ldr	r1, [r7, #4]
    918c:	6838      	ldr	r0, [r7, #0]
    918e:	4b16      	ldr	r3, [pc, #88]	; (91e8 <_i2c_m_async_init+0x9c>)
    9190:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    9192:	6838      	ldr	r0, [r7, #0]
    9194:	4b15      	ldr	r3, [pc, #84]	; (91ec <_i2c_m_async_init+0xa0>)
    9196:	4798      	blx	r3
    9198:	4603      	mov	r3, r0
    919a:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    919c:	2300      	movs	r3, #0
    919e:	613b      	str	r3, [r7, #16]
    91a0:	e014      	b.n	91cc <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    91a2:	7dfb      	ldrb	r3, [r7, #23]
    91a4:	b21b      	sxth	r3, r3
    91a6:	4618      	mov	r0, r3
    91a8:	4b11      	ldr	r3, [pc, #68]	; (91f0 <_i2c_m_async_init+0xa4>)
    91aa:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    91ac:	7dfb      	ldrb	r3, [r7, #23]
    91ae:	b21b      	sxth	r3, r3
    91b0:	4618      	mov	r0, r3
    91b2:	4b10      	ldr	r3, [pc, #64]	; (91f4 <_i2c_m_async_init+0xa8>)
    91b4:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    91b6:	7dfb      	ldrb	r3, [r7, #23]
    91b8:	b21b      	sxth	r3, r3
    91ba:	4618      	mov	r0, r3
    91bc:	4b0e      	ldr	r3, [pc, #56]	; (91f8 <_i2c_m_async_init+0xac>)
    91be:	4798      	blx	r3
		irq++;
    91c0:	7dfb      	ldrb	r3, [r7, #23]
    91c2:	3301      	adds	r3, #1
    91c4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    91c6:	693b      	ldr	r3, [r7, #16]
    91c8:	3301      	adds	r3, #1
    91ca:	613b      	str	r3, [r7, #16]
    91cc:	693b      	ldr	r3, [r7, #16]
    91ce:	2b03      	cmp	r3, #3
    91d0:	d9e7      	bls.n	91a2 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    91d2:	2300      	movs	r3, #0
}
    91d4:	4618      	mov	r0, r3
    91d6:	3718      	adds	r7, #24
    91d8:	46bd      	mov	sp, r7
    91da:	bd80      	pop	{r7, pc}
    91dc:	0001286c 	.word	0x0001286c
    91e0:	00005f89 	.word	0x00005f89
    91e4:	00009505 	.word	0x00009505
    91e8:	00008cdd 	.word	0x00008cdd
    91ec:	00009129 	.word	0x00009129
    91f0:	000084a5 	.word	0x000084a5
    91f4:	000084e9 	.word	0x000084e9
    91f8:	00008469 	.word	0x00008469

000091fc <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    91fc:	b590      	push	{r4, r7, lr}
    91fe:	b087      	sub	sp, #28
    9200:	af00      	add	r7, sp, #0
    9202:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    9204:	687b      	ldr	r3, [r7, #4]
    9206:	691b      	ldr	r3, [r3, #16]
    9208:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    920a:	687b      	ldr	r3, [r7, #4]
    920c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    920e:	6978      	ldr	r0, [r7, #20]
    9210:	4b33      	ldr	r3, [pc, #204]	; (92e0 <_sercom_i2c_send_address+0xe4>)
    9212:	4798      	blx	r3
    9214:	4603      	mov	r3, r0
    9216:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    9218:	687b      	ldr	r3, [r7, #4]
    921a:	2b00      	cmp	r3, #0
    921c:	bf14      	ite	ne
    921e:	2301      	movne	r3, #1
    9220:	2300      	moveq	r3, #0
    9222:	b2db      	uxtb	r3, r3
    9224:	f240 42cc 	movw	r2, #1228	; 0x4cc
    9228:	492e      	ldr	r1, [pc, #184]	; (92e4 <_sercom_i2c_send_address+0xe8>)
    922a:	4618      	mov	r0, r3
    922c:	4b2e      	ldr	r3, [pc, #184]	; (92e8 <_sercom_i2c_send_address+0xec>)
    922e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    9230:	693b      	ldr	r3, [r7, #16]
    9232:	685b      	ldr	r3, [r3, #4]
    9234:	2b01      	cmp	r3, #1
    9236:	d106      	bne.n	9246 <_sercom_i2c_send_address+0x4a>
    9238:	68fb      	ldr	r3, [r7, #12]
    923a:	2b00      	cmp	r3, #0
    923c:	d003      	beq.n	9246 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    923e:	6978      	ldr	r0, [r7, #20]
    9240:	4b2a      	ldr	r3, [pc, #168]	; (92ec <_sercom_i2c_send_address+0xf0>)
    9242:	4798      	blx	r3
    9244:	e002      	b.n	924c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    9246:	6978      	ldr	r0, [r7, #20]
    9248:	4b29      	ldr	r3, [pc, #164]	; (92f0 <_sercom_i2c_send_address+0xf4>)
    924a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    924c:	693b      	ldr	r3, [r7, #16]
    924e:	881b      	ldrh	r3, [r3, #0]
    9250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9254:	2b00      	cmp	r3, #0
    9256:	d022      	beq.n	929e <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    9258:	693b      	ldr	r3, [r7, #16]
    925a:	885b      	ldrh	r3, [r3, #2]
    925c:	b29b      	uxth	r3, r3
    925e:	f003 0301 	and.w	r3, r3, #1
    9262:	2b00      	cmp	r3, #0
    9264:	d007      	beq.n	9276 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    9266:	693b      	ldr	r3, [r7, #16]
    9268:	885b      	ldrh	r3, [r3, #2]
    926a:	b29b      	uxth	r3, r3
    926c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    9270:	b29a      	uxth	r2, r3
    9272:	693b      	ldr	r3, [r7, #16]
    9274:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    9276:	693b      	ldr	r3, [r7, #16]
    9278:	881b      	ldrh	r3, [r3, #0]
    927a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    927c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    9280:	401c      	ands	r4, r3
    9282:	6978      	ldr	r0, [r7, #20]
    9284:	4b1b      	ldr	r3, [pc, #108]	; (92f4 <_sercom_i2c_send_address+0xf8>)
    9286:	4798      	blx	r3
    9288:	4603      	mov	r3, r0
    928a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    928e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    9290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9294:	4619      	mov	r1, r3
    9296:	6978      	ldr	r0, [r7, #20]
    9298:	4b17      	ldr	r3, [pc, #92]	; (92f8 <_sercom_i2c_send_address+0xfc>)
    929a:	4798      	blx	r3
    929c:	e01a      	b.n	92d4 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    929e:	693b      	ldr	r3, [r7, #16]
    92a0:	881b      	ldrh	r3, [r3, #0]
    92a2:	005b      	lsls	r3, r3, #1
    92a4:	b2db      	uxtb	r3, r3
    92a6:	693a      	ldr	r2, [r7, #16]
    92a8:	8852      	ldrh	r2, [r2, #2]
    92aa:	b292      	uxth	r2, r2
    92ac:	f002 0201 	and.w	r2, r2, #1
    92b0:	2a00      	cmp	r2, #0
    92b2:	bf14      	ite	ne
    92b4:	2201      	movne	r2, #1
    92b6:	2200      	moveq	r2, #0
    92b8:	b2d2      	uxtb	r2, r2
    92ba:	4313      	orrs	r3, r2
    92bc:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    92be:	6978      	ldr	r0, [r7, #20]
    92c0:	4b0c      	ldr	r3, [pc, #48]	; (92f4 <_sercom_i2c_send_address+0xf8>)
    92c2:	4798      	blx	r3
    92c4:	4603      	mov	r3, r0
    92c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    92ca:	4323      	orrs	r3, r4
    92cc:	4619      	mov	r1, r3
    92ce:	6978      	ldr	r0, [r7, #20]
    92d0:	4b09      	ldr	r3, [pc, #36]	; (92f8 <_sercom_i2c_send_address+0xfc>)
    92d2:	4798      	blx	r3
	}

	return ERR_NONE;
    92d4:	2300      	movs	r3, #0
}
    92d6:	4618      	mov	r0, r3
    92d8:	371c      	adds	r7, #28
    92da:	46bd      	mov	sp, r7
    92dc:	bd90      	pop	{r4, r7, pc}
    92de:	bf00      	nop
    92e0:	00008825 	.word	0x00008825
    92e4:	0001286c 	.word	0x0001286c
    92e8:	00005f89 	.word	0x00005f89
    92ec:	000089ad 	.word	0x000089ad
    92f0:	000089d5 	.word	0x000089d5
    92f4:	00008b15 	.word	0x00008b15
    92f8:	00008af1 	.word	0x00008af1

000092fc <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    92fc:	b580      	push	{r7, lr}
    92fe:	b084      	sub	sp, #16
    9300:	af00      	add	r7, sp, #0
    9302:	6078      	str	r0, [r7, #4]
    9304:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	2b00      	cmp	r3, #0
    930a:	bf14      	ite	ne
    930c:	2301      	movne	r3, #1
    930e:	2300      	moveq	r3, #0
    9310:	b2db      	uxtb	r3, r3
    9312:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9316:	492a      	ldr	r1, [pc, #168]	; (93c0 <_i2c_m_async_transfer+0xc4>)
    9318:	4618      	mov	r0, r3
    931a:	4b2a      	ldr	r3, [pc, #168]	; (93c4 <_i2c_m_async_transfer+0xc8>)
    931c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	691b      	ldr	r3, [r3, #16]
    9322:	2b00      	cmp	r3, #0
    9324:	bf14      	ite	ne
    9326:	2301      	movne	r3, #1
    9328:	2300      	moveq	r3, #0
    932a:	b2db      	uxtb	r3, r3
    932c:	f240 42f5 	movw	r2, #1269	; 0x4f5
    9330:	4923      	ldr	r1, [pc, #140]	; (93c0 <_i2c_m_async_transfer+0xc4>)
    9332:	4618      	mov	r0, r3
    9334:	4b23      	ldr	r3, [pc, #140]	; (93c4 <_i2c_m_async_transfer+0xc8>)
    9336:	4798      	blx	r3
	ASSERT(msg);
    9338:	683b      	ldr	r3, [r7, #0]
    933a:	2b00      	cmp	r3, #0
    933c:	bf14      	ite	ne
    933e:	2301      	movne	r3, #1
    9340:	2300      	moveq	r3, #0
    9342:	b2db      	uxtb	r3, r3
    9344:	f240 42f6 	movw	r2, #1270	; 0x4f6
    9348:	491d      	ldr	r1, [pc, #116]	; (93c0 <_i2c_m_async_transfer+0xc4>)
    934a:	4618      	mov	r0, r3
    934c:	4b1d      	ldr	r3, [pc, #116]	; (93c4 <_i2c_m_async_transfer+0xc8>)
    934e:	4798      	blx	r3

	if (msg->len == 0) {
    9350:	683b      	ldr	r3, [r7, #0]
    9352:	685b      	ldr	r3, [r3, #4]
    9354:	2b00      	cmp	r3, #0
    9356:	d101      	bne.n	935c <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    9358:	2300      	movs	r3, #0
    935a:	e02d      	b.n	93b8 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    935c:	687b      	ldr	r3, [r7, #4]
    935e:	885b      	ldrh	r3, [r3, #2]
    9360:	b29b      	uxth	r3, r3
    9362:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9366:	2b00      	cmp	r3, #0
    9368:	d002      	beq.n	9370 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    936a:	f06f 0303 	mvn.w	r3, #3
    936e:	e023      	b.n	93b8 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    9370:	683b      	ldr	r3, [r7, #0]
    9372:	885b      	ldrh	r3, [r3, #2]
    9374:	b29b      	uxth	r3, r3
    9376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    937a:	b29a      	uxth	r2, r3
    937c:	683b      	ldr	r3, [r7, #0]
    937e:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    9380:	687b      	ldr	r3, [r7, #4]
    9382:	683a      	ldr	r2, [r7, #0]
    9384:	ca07      	ldmia	r2, {r0, r1, r2}
    9386:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	691b      	ldr	r3, [r3, #16]
    938e:	4618      	mov	r0, r3
    9390:	4b0d      	ldr	r3, [pc, #52]	; (93c8 <_i2c_m_async_transfer+0xcc>)
    9392:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    9394:	6878      	ldr	r0, [r7, #4]
    9396:	4b0d      	ldr	r3, [pc, #52]	; (93cc <_i2c_m_async_transfer+0xd0>)
    9398:	4798      	blx	r3
    939a:	60f8      	str	r0, [r7, #12]

	if (ret) {
    939c:	68fb      	ldr	r3, [r7, #12]
    939e:	2b00      	cmp	r3, #0
    93a0:	d009      	beq.n	93b6 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	885b      	ldrh	r3, [r3, #2]
    93a6:	b29b      	uxth	r3, r3
    93a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    93ac:	b29a      	uxth	r2, r3
    93ae:	687b      	ldr	r3, [r7, #4]
    93b0:	805a      	strh	r2, [r3, #2]

		return ret;
    93b2:	68fb      	ldr	r3, [r7, #12]
    93b4:	e000      	b.n	93b8 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    93b6:	2300      	movs	r3, #0
}
    93b8:	4618      	mov	r0, r3
    93ba:	3710      	adds	r7, #16
    93bc:	46bd      	mov	sp, r7
    93be:	bd80      	pop	{r7, pc}
    93c0:	0001286c 	.word	0x0001286c
    93c4:	00005f89 	.word	0x00005f89
    93c8:	0000895d 	.word	0x0000895d
    93cc:	000091fd 	.word	0x000091fd

000093d0 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    93d0:	b480      	push	{r7}
    93d2:	b085      	sub	sp, #20
    93d4:	af00      	add	r7, sp, #0
    93d6:	60f8      	str	r0, [r7, #12]
    93d8:	460b      	mov	r3, r1
    93da:	607a      	str	r2, [r7, #4]
    93dc:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    93de:	7afb      	ldrb	r3, [r7, #11]
    93e0:	2b01      	cmp	r3, #1
    93e2:	d008      	beq.n	93f6 <_i2c_m_async_register_callback+0x26>
    93e4:	2b02      	cmp	r3, #2
    93e6:	d00a      	beq.n	93fe <_i2c_m_async_register_callback+0x2e>
    93e8:	2b00      	cmp	r3, #0
    93ea:	d000      	beq.n	93ee <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    93ec:	e00b      	b.n	9406 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    93ee:	68fb      	ldr	r3, [r7, #12]
    93f0:	687a      	ldr	r2, [r7, #4]
    93f2:	615a      	str	r2, [r3, #20]
		break;
    93f4:	e007      	b.n	9406 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    93f6:	68fb      	ldr	r3, [r7, #12]
    93f8:	687a      	ldr	r2, [r7, #4]
    93fa:	619a      	str	r2, [r3, #24]
		break;
    93fc:	e003      	b.n	9406 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    93fe:	68fb      	ldr	r3, [r7, #12]
    9400:	687a      	ldr	r2, [r7, #4]
    9402:	61da      	str	r2, [r3, #28]
		break;
    9404:	bf00      	nop
	}

	return ERR_NONE;
    9406:	2300      	movs	r3, #0
}
    9408:	4618      	mov	r0, r3
    940a:	3714      	adds	r7, #20
    940c:	46bd      	mov	sp, r7
    940e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9412:	4770      	bx	lr

00009414 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    9414:	b580      	push	{r7, lr}
    9416:	b082      	sub	sp, #8
    9418:	af00      	add	r7, sp, #0
    941a:	6078      	str	r0, [r7, #4]
    941c:	460b      	mov	r3, r1
    941e:	70fb      	strb	r3, [r7, #3]
    9420:	4613      	mov	r3, r2
    9422:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    9424:	78fb      	ldrb	r3, [r7, #3]
    9426:	2b01      	cmp	r3, #1
    9428:	d002      	beq.n	9430 <_i2c_m_async_set_irq_state+0x1c>
    942a:	78fb      	ldrb	r3, [r7, #3]
    942c:	2b02      	cmp	r3, #2
    942e:	d10e      	bne.n	944e <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    9430:	687b      	ldr	r3, [r7, #4]
    9432:	691b      	ldr	r3, [r3, #16]
    9434:	78ba      	ldrb	r2, [r7, #2]
    9436:	4611      	mov	r1, r2
    9438:	4618      	mov	r0, r3
    943a:	4b0c      	ldr	r3, [pc, #48]	; (946c <_i2c_m_async_set_irq_state+0x58>)
    943c:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    943e:	687b      	ldr	r3, [r7, #4]
    9440:	691b      	ldr	r3, [r3, #16]
    9442:	78ba      	ldrb	r2, [r7, #2]
    9444:	4611      	mov	r1, r2
    9446:	4618      	mov	r0, r3
    9448:	4b09      	ldr	r3, [pc, #36]	; (9470 <_i2c_m_async_set_irq_state+0x5c>)
    944a:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    944c:	e009      	b.n	9462 <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    944e:	78fb      	ldrb	r3, [r7, #3]
    9450:	2b00      	cmp	r3, #0
    9452:	d106      	bne.n	9462 <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	691b      	ldr	r3, [r3, #16]
    9458:	78ba      	ldrb	r2, [r7, #2]
    945a:	4611      	mov	r1, r2
    945c:	4618      	mov	r0, r3
    945e:	4b05      	ldr	r3, [pc, #20]	; (9474 <_i2c_m_async_set_irq_state+0x60>)
    9460:	4798      	blx	r3
}
    9462:	bf00      	nop
    9464:	3708      	adds	r7, #8
    9466:	46bd      	mov	sp, r7
    9468:	bd80      	pop	{r7, pc}
    946a:	bf00      	nop
    946c:	000086bb 	.word	0x000086bb
    9470:	00008689 	.word	0x00008689
    9474:	000086ed 	.word	0x000086ed

00009478 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    9478:	b580      	push	{r7, lr}
    947a:	b084      	sub	sp, #16
    947c:	af00      	add	r7, sp, #0
    947e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    9480:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9484:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    9486:	2304      	movs	r3, #4
    9488:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    948a:	687b      	ldr	r3, [r7, #4]
    948c:	2b00      	cmp	r3, #0
    948e:	bf14      	ite	ne
    9490:	2301      	movne	r3, #1
    9492:	2300      	moveq	r3, #0
    9494:	b2db      	uxtb	r3, r3
    9496:	f240 6241 	movw	r2, #1601	; 0x641
    949a:	4915      	ldr	r1, [pc, #84]	; (94f0 <_i2c_m_enable_implementation+0x78>)
    949c:	4618      	mov	r0, r3
    949e:	4b15      	ldr	r3, [pc, #84]	; (94f4 <_i2c_m_enable_implementation+0x7c>)
    94a0:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    94a2:	6878      	ldr	r0, [r7, #4]
    94a4:	4b14      	ldr	r3, [pc, #80]	; (94f8 <_i2c_m_enable_implementation+0x80>)
    94a6:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    94a8:	e016      	b.n	94d8 <_i2c_m_enable_implementation+0x60>
		timeout--;
    94aa:	68fb      	ldr	r3, [r7, #12]
    94ac:	3b01      	subs	r3, #1
    94ae:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    94b0:	68fb      	ldr	r3, [r7, #12]
    94b2:	2b00      	cmp	r3, #0
    94b4:	dc10      	bgt.n	94d8 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    94b6:	68bb      	ldr	r3, [r7, #8]
    94b8:	3b01      	subs	r3, #1
    94ba:	60bb      	str	r3, [r7, #8]
    94bc:	68bb      	ldr	r3, [r7, #8]
    94be:	2b00      	cmp	r3, #0
    94c0:	d007      	beq.n	94d2 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    94c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    94c6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    94c8:	2110      	movs	r1, #16
    94ca:	6878      	ldr	r0, [r7, #4]
    94cc:	4b0b      	ldr	r3, [pc, #44]	; (94fc <_i2c_m_enable_implementation+0x84>)
    94ce:	4798      	blx	r3
    94d0:	e002      	b.n	94d8 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    94d2:	f06f 0305 	mvn.w	r3, #5
    94d6:	e006      	b.n	94e6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    94d8:	6878      	ldr	r0, [r7, #4]
    94da:	4b09      	ldr	r3, [pc, #36]	; (9500 <_i2c_m_enable_implementation+0x88>)
    94dc:	4798      	blx	r3
    94de:	4603      	mov	r3, r0
    94e0:	2b01      	cmp	r3, #1
    94e2:	d1e2      	bne.n	94aa <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    94e4:	2300      	movs	r3, #0
}
    94e6:	4618      	mov	r0, r3
    94e8:	3710      	adds	r7, #16
    94ea:	46bd      	mov	sp, r7
    94ec:	bd80      	pop	{r7, pc}
    94ee:	bf00      	nop
    94f0:	0001286c 	.word	0x0001286c
    94f4:	00005f89 	.word	0x00005f89
    94f8:	000087d5 	.word	0x000087d5
    94fc:	00008c59 	.word	0x00008c59
    9500:	00008c09 	.word	0x00008c09

00009504 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    9504:	b580      	push	{r7, lr}
    9506:	b084      	sub	sp, #16
    9508:	af00      	add	r7, sp, #0
    950a:	6078      	str	r0, [r7, #4]
    950c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    950e:	6838      	ldr	r0, [r7, #0]
    9510:	4b42      	ldr	r3, [pc, #264]	; (961c <_i2c_m_sync_init_impl+0x118>)
    9512:	4798      	blx	r3
    9514:	4603      	mov	r3, r0
    9516:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    9518:	2101      	movs	r1, #1
    951a:	6838      	ldr	r0, [r7, #0]
    951c:	4b40      	ldr	r3, [pc, #256]	; (9620 <_i2c_m_sync_init_impl+0x11c>)
    951e:	4798      	blx	r3
    9520:	4603      	mov	r3, r0
    9522:	f083 0301 	eor.w	r3, r3, #1
    9526:	b2db      	uxtb	r3, r3
    9528:	2b00      	cmp	r3, #0
    952a:	d020      	beq.n	956e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    952c:	7bfa      	ldrb	r2, [r7, #15]
    952e:	493d      	ldr	r1, [pc, #244]	; (9624 <_i2c_m_sync_init_impl+0x120>)
    9530:	4613      	mov	r3, r2
    9532:	005b      	lsls	r3, r3, #1
    9534:	4413      	add	r3, r2
    9536:	00db      	lsls	r3, r3, #3
    9538:	440b      	add	r3, r1
    953a:	3304      	adds	r3, #4
    953c:	681b      	ldr	r3, [r3, #0]
    953e:	f003 031c 	and.w	r3, r3, #28
    9542:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    9544:	2102      	movs	r1, #2
    9546:	6838      	ldr	r0, [r7, #0]
    9548:	4b37      	ldr	r3, [pc, #220]	; (9628 <_i2c_m_sync_init_impl+0x124>)
    954a:	4798      	blx	r3
    954c:	4603      	mov	r3, r0
    954e:	2b00      	cmp	r3, #0
    9550:	d006      	beq.n	9560 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    9552:	6838      	ldr	r0, [r7, #0]
    9554:	4b35      	ldr	r3, [pc, #212]	; (962c <_i2c_m_sync_init_impl+0x128>)
    9556:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    9558:	2102      	movs	r1, #2
    955a:	6838      	ldr	r0, [r7, #0]
    955c:	4b34      	ldr	r3, [pc, #208]	; (9630 <_i2c_m_sync_init_impl+0x12c>)
    955e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    9560:	68bb      	ldr	r3, [r7, #8]
    9562:	f043 0301 	orr.w	r3, r3, #1
    9566:	4619      	mov	r1, r3
    9568:	6838      	ldr	r0, [r7, #0]
    956a:	4b32      	ldr	r3, [pc, #200]	; (9634 <_i2c_m_sync_init_impl+0x130>)
    956c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    956e:	2101      	movs	r1, #1
    9570:	6838      	ldr	r0, [r7, #0]
    9572:	4b2f      	ldr	r3, [pc, #188]	; (9630 <_i2c_m_sync_init_impl+0x12c>)
    9574:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    9576:	7bfa      	ldrb	r2, [r7, #15]
    9578:	492a      	ldr	r1, [pc, #168]	; (9624 <_i2c_m_sync_init_impl+0x120>)
    957a:	4613      	mov	r3, r2
    957c:	005b      	lsls	r3, r3, #1
    957e:	4413      	add	r3, r2
    9580:	00db      	lsls	r3, r3, #3
    9582:	440b      	add	r3, r1
    9584:	3304      	adds	r3, #4
    9586:	681b      	ldr	r3, [r3, #0]
    9588:	4619      	mov	r1, r3
    958a:	6838      	ldr	r0, [r7, #0]
    958c:	4b29      	ldr	r3, [pc, #164]	; (9634 <_i2c_m_sync_init_impl+0x130>)
    958e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    9590:	7bfa      	ldrb	r2, [r7, #15]
    9592:	4924      	ldr	r1, [pc, #144]	; (9624 <_i2c_m_sync_init_impl+0x120>)
    9594:	4613      	mov	r3, r2
    9596:	005b      	lsls	r3, r3, #1
    9598:	4413      	add	r3, r2
    959a:	00db      	lsls	r3, r3, #3
    959c:	440b      	add	r3, r1
    959e:	3308      	adds	r3, #8
    95a0:	681b      	ldr	r3, [r3, #0]
    95a2:	4619      	mov	r1, r3
    95a4:	6838      	ldr	r0, [r7, #0]
    95a6:	4b24      	ldr	r3, [pc, #144]	; (9638 <_i2c_m_sync_init_impl+0x134>)
    95a8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    95aa:	7bfa      	ldrb	r2, [r7, #15]
    95ac:	491d      	ldr	r1, [pc, #116]	; (9624 <_i2c_m_sync_init_impl+0x120>)
    95ae:	4613      	mov	r3, r2
    95b0:	005b      	lsls	r3, r3, #1
    95b2:	4413      	add	r3, r2
    95b4:	00db      	lsls	r3, r3, #3
    95b6:	440b      	add	r3, r1
    95b8:	330c      	adds	r3, #12
    95ba:	681b      	ldr	r3, [r3, #0]
    95bc:	4619      	mov	r1, r3
    95be:	6838      	ldr	r0, [r7, #0]
    95c0:	4b1e      	ldr	r3, [pc, #120]	; (963c <_i2c_m_sync_init_impl+0x138>)
    95c2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    95c4:	7bfa      	ldrb	r2, [r7, #15]
    95c6:	4917      	ldr	r1, [pc, #92]	; (9624 <_i2c_m_sync_init_impl+0x120>)
    95c8:	4613      	mov	r3, r2
    95ca:	005b      	lsls	r3, r3, #1
    95cc:	4413      	add	r3, r2
    95ce:	00db      	lsls	r3, r3, #3
    95d0:	440b      	add	r3, r1
    95d2:	3304      	adds	r3, #4
    95d4:	681b      	ldr	r3, [r3, #0]
    95d6:	0e1b      	lsrs	r3, r3, #24
    95d8:	b29b      	uxth	r3, r3
    95da:	f003 0303 	and.w	r3, r3, #3
    95de:	b29a      	uxth	r2, r3
    95e0:	687b      	ldr	r3, [r7, #4]
    95e2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    95e4:	687b      	ldr	r3, [r7, #4]
    95e6:	899b      	ldrh	r3, [r3, #12]
    95e8:	2b01      	cmp	r3, #1
    95ea:	bf8c      	ite	hi
    95ec:	2301      	movhi	r3, #1
    95ee:	2300      	movls	r3, #0
    95f0:	b2db      	uxtb	r3, r3
    95f2:	4619      	mov	r1, r3
    95f4:	6838      	ldr	r0, [r7, #0]
    95f6:	4b12      	ldr	r3, [pc, #72]	; (9640 <_i2c_m_sync_init_impl+0x13c>)
    95f8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    95fa:	7bfa      	ldrb	r2, [r7, #15]
    95fc:	4909      	ldr	r1, [pc, #36]	; (9624 <_i2c_m_sync_init_impl+0x120>)
    95fe:	4613      	mov	r3, r2
    9600:	005b      	lsls	r3, r3, #1
    9602:	4413      	add	r3, r2
    9604:	00db      	lsls	r3, r3, #3
    9606:	440b      	add	r3, r1
    9608:	3312      	adds	r3, #18
    960a:	881a      	ldrh	r2, [r3, #0]
    960c:	687b      	ldr	r3, [r7, #4]
    960e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    9610:	2300      	movs	r3, #0
}
    9612:	4618      	mov	r0, r3
    9614:	3710      	adds	r7, #16
    9616:	46bd      	mov	sp, r7
    9618:	bd80      	pop	{r7, pc}
    961a:	bf00      	nop
    961c:	00008d31 	.word	0x00008d31
    9620:	00008549 	.word	0x00008549
    9624:	20000018 	.word	0x20000018
    9628:	00008855 	.word	0x00008855
    962c:	000087fd 	.word	0x000087fd
    9630:	00008525 	.word	0x00008525
    9634:	00008885 	.word	0x00008885
    9638:	00008a2d 	.word	0x00008a2d
    963c:	00008a75 	.word	0x00008a75
    9640:	00008ab1 	.word	0x00008ab1

00009644 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    9644:	b580      	push	{r7, lr}
    9646:	b082      	sub	sp, #8
    9648:	af00      	add	r7, sp, #0
    964a:	6078      	str	r0, [r7, #4]
    964c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    964e:	687b      	ldr	r3, [r7, #4]
    9650:	2b00      	cmp	r3, #0
    9652:	d004      	beq.n	965e <_spi_load_regs_master+0x1a>
    9654:	683b      	ldr	r3, [r7, #0]
    9656:	2b00      	cmp	r3, #0
    9658:	d001      	beq.n	965e <_spi_load_regs_master+0x1a>
    965a:	2301      	movs	r3, #1
    965c:	e000      	b.n	9660 <_spi_load_regs_master+0x1c>
    965e:	2300      	movs	r3, #0
    9660:	f003 0301 	and.w	r3, r3, #1
    9664:	b2db      	uxtb	r3, r3
    9666:	f640 1245 	movw	r2, #2373	; 0x945
    966a:	4915      	ldr	r1, [pc, #84]	; (96c0 <_spi_load_regs_master+0x7c>)
    966c:	4618      	mov	r0, r3
    966e:	4b15      	ldr	r3, [pc, #84]	; (96c4 <_spi_load_regs_master+0x80>)
    9670:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9672:	683b      	ldr	r3, [r7, #0]
    9674:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    9676:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    967a:	f023 0301 	bic.w	r3, r3, #1
    967e:	4619      	mov	r1, r3
    9680:	6878      	ldr	r0, [r7, #4]
    9682:	4b11      	ldr	r3, [pc, #68]	; (96c8 <_spi_load_regs_master+0x84>)
    9684:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    9686:	683b      	ldr	r3, [r7, #0]
    9688:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    968a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    968e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    9692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9696:	4619      	mov	r1, r3
    9698:	6878      	ldr	r0, [r7, #4]
    969a:	4b0c      	ldr	r3, [pc, #48]	; (96cc <_spi_load_regs_master+0x88>)
    969c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    969e:	683b      	ldr	r3, [r7, #0]
    96a0:	7b1b      	ldrb	r3, [r3, #12]
    96a2:	4619      	mov	r1, r3
    96a4:	6878      	ldr	r0, [r7, #4]
    96a6:	4b0a      	ldr	r3, [pc, #40]	; (96d0 <_spi_load_regs_master+0x8c>)
    96a8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    96aa:	683b      	ldr	r3, [r7, #0]
    96ac:	7b5b      	ldrb	r3, [r3, #13]
    96ae:	4619      	mov	r1, r3
    96b0:	6878      	ldr	r0, [r7, #4]
    96b2:	4b08      	ldr	r3, [pc, #32]	; (96d4 <_spi_load_regs_master+0x90>)
    96b4:	4798      	blx	r3
}
    96b6:	bf00      	nop
    96b8:	3708      	adds	r7, #8
    96ba:	46bd      	mov	sp, r7
    96bc:	bd80      	pop	{r7, pc}
    96be:	bf00      	nop
    96c0:	0001286c 	.word	0x0001286c
    96c4:	00005f89 	.word	0x00005f89
    96c8:	00008939 	.word	0x00008939
    96cc:	00008a51 	.word	0x00008a51
    96d0:	00008a91 	.word	0x00008a91
    96d4:	00008bc9 	.word	0x00008bc9

000096d8 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    96d8:	b580      	push	{r7, lr}
    96da:	b082      	sub	sp, #8
    96dc:	af00      	add	r7, sp, #0
    96de:	6078      	str	r0, [r7, #4]
    96e0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    96e2:	687b      	ldr	r3, [r7, #4]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d004      	beq.n	96f2 <_spi_load_regs_slave+0x1a>
    96e8:	683b      	ldr	r3, [r7, #0]
    96ea:	2b00      	cmp	r3, #0
    96ec:	d001      	beq.n	96f2 <_spi_load_regs_slave+0x1a>
    96ee:	2301      	movs	r3, #1
    96f0:	e000      	b.n	96f4 <_spi_load_regs_slave+0x1c>
    96f2:	2300      	movs	r3, #0
    96f4:	f003 0301 	and.w	r3, r3, #1
    96f8:	b2db      	uxtb	r3, r3
    96fa:	f640 1259 	movw	r2, #2393	; 0x959
    96fe:	491a      	ldr	r1, [pc, #104]	; (9768 <_spi_load_regs_slave+0x90>)
    9700:	4618      	mov	r0, r3
    9702:	4b1a      	ldr	r3, [pc, #104]	; (976c <_spi_load_regs_slave+0x94>)
    9704:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    9706:	683b      	ldr	r3, [r7, #0]
    9708:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    970a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    970e:	f023 0301 	bic.w	r3, r3, #1
    9712:	4619      	mov	r1, r3
    9714:	6878      	ldr	r0, [r7, #4]
    9716:	4b16      	ldr	r3, [pc, #88]	; (9770 <_spi_load_regs_slave+0x98>)
    9718:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    971a:	683b      	ldr	r3, [r7, #0]
    971c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    971e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    9722:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    9726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    972a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    972e:	4619      	mov	r1, r3
    9730:	6878      	ldr	r0, [r7, #4]
    9732:	4b10      	ldr	r3, [pc, #64]	; (9774 <_spi_load_regs_slave+0x9c>)
    9734:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    9736:	683b      	ldr	r3, [r7, #0]
    9738:	689b      	ldr	r3, [r3, #8]
    973a:	4619      	mov	r1, r3
    973c:	6878      	ldr	r0, [r7, #4]
    973e:	4b0e      	ldr	r3, [pc, #56]	; (9778 <_spi_load_regs_slave+0xa0>)
    9740:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    9742:	683b      	ldr	r3, [r7, #0]
    9744:	7b5b      	ldrb	r3, [r3, #13]
    9746:	4619      	mov	r1, r3
    9748:	6878      	ldr	r0, [r7, #4]
    974a:	4b0c      	ldr	r3, [pc, #48]	; (977c <_spi_load_regs_slave+0xa4>)
    974c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    974e:	bf00      	nop
    9750:	f04f 31ff 	mov.w	r1, #4294967295
    9754:	6878      	ldr	r0, [r7, #4]
    9756:	4b0a      	ldr	r3, [pc, #40]	; (9780 <_spi_load_regs_slave+0xa8>)
    9758:	4798      	blx	r3
    975a:	4603      	mov	r3, r0
    975c:	2b00      	cmp	r3, #0
    975e:	d1f7      	bne.n	9750 <_spi_load_regs_slave+0x78>
		;
}
    9760:	bf00      	nop
    9762:	3708      	adds	r7, #8
    9764:	46bd      	mov	sp, r7
    9766:	bd80      	pop	{r7, pc}
    9768:	0001286c 	.word	0x0001286c
    976c:	00005f89 	.word	0x00005f89
    9770:	00008939 	.word	0x00008939
    9774:	00008a51 	.word	0x00008a51
    9778:	00008b35 	.word	0x00008b35
    977c:	00008bc9 	.word	0x00008bc9
    9780:	00008595 	.word	0x00008595

00009784 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    9784:	b580      	push	{r7, lr}
    9786:	b084      	sub	sp, #16
    9788:	af00      	add	r7, sp, #0
    978a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    978c:	687b      	ldr	r3, [r7, #4]
    978e:	4618      	mov	r0, r3
    9790:	4b11      	ldr	r3, [pc, #68]	; (97d8 <_spi_get_regs+0x54>)
    9792:	4798      	blx	r3
    9794:	4603      	mov	r3, r0
    9796:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    9798:	2300      	movs	r3, #0
    979a:	73fb      	strb	r3, [r7, #15]
    979c:	e014      	b.n	97c8 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    979e:	7bfa      	ldrb	r2, [r7, #15]
    97a0:	490e      	ldr	r1, [pc, #56]	; (97dc <_spi_get_regs+0x58>)
    97a2:	4613      	mov	r3, r2
    97a4:	011b      	lsls	r3, r3, #4
    97a6:	4413      	add	r3, r2
    97a8:	440b      	add	r3, r1
    97aa:	3310      	adds	r3, #16
    97ac:	781b      	ldrb	r3, [r3, #0]
    97ae:	7bba      	ldrb	r2, [r7, #14]
    97b0:	429a      	cmp	r2, r3
    97b2:	d106      	bne.n	97c2 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    97b4:	7bfa      	ldrb	r2, [r7, #15]
    97b6:	4613      	mov	r3, r2
    97b8:	011b      	lsls	r3, r3, #4
    97ba:	4413      	add	r3, r2
    97bc:	4a07      	ldr	r2, [pc, #28]	; (97dc <_spi_get_regs+0x58>)
    97be:	4413      	add	r3, r2
    97c0:	e006      	b.n	97d0 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    97c2:	7bfb      	ldrb	r3, [r7, #15]
    97c4:	3301      	adds	r3, #1
    97c6:	73fb      	strb	r3, [r7, #15]
    97c8:	7bfb      	ldrb	r3, [r7, #15]
    97ca:	2b02      	cmp	r3, #2
    97cc:	d9e7      	bls.n	979e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    97ce:	2300      	movs	r3, #0
}
    97d0:	4618      	mov	r0, r3
    97d2:	3710      	adds	r7, #16
    97d4:	46bd      	mov	sp, r7
    97d6:	bd80      	pop	{r7, pc}
    97d8:	00008c81 	.word	0x00008c81
    97dc:	000128a8 	.word	0x000128a8

000097e0 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    97e0:	b580      	push	{r7, lr}
    97e2:	b084      	sub	sp, #16
    97e4:	af00      	add	r7, sp, #0
    97e6:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    97e8:	687b      	ldr	r3, [r7, #4]
    97ea:	681b      	ldr	r3, [r3, #0]
    97ec:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    97ee:	68f8      	ldr	r0, [r7, #12]
    97f0:	4b21      	ldr	r3, [pc, #132]	; (9878 <_spi_handler+0x98>)
    97f2:	4798      	blx	r3
    97f4:	4603      	mov	r3, r0
    97f6:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    97f8:	68f8      	ldr	r0, [r7, #12]
    97fa:	4b20      	ldr	r3, [pc, #128]	; (987c <_spi_handler+0x9c>)
    97fc:	4798      	blx	r3
    97fe:	4603      	mov	r3, r0
    9800:	461a      	mov	r2, r3
    9802:	7afb      	ldrb	r3, [r7, #11]
    9804:	4013      	ands	r3, r2
    9806:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    9808:	7afb      	ldrb	r3, [r7, #11]
    980a:	f003 0301 	and.w	r3, r3, #1
    980e:	2b00      	cmp	r3, #0
    9810:	d004      	beq.n	981c <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    9812:	687b      	ldr	r3, [r7, #4]
    9814:	689b      	ldr	r3, [r3, #8]
    9816:	6878      	ldr	r0, [r7, #4]
    9818:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    981a:	e029      	b.n	9870 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    981c:	7afb      	ldrb	r3, [r7, #11]
    981e:	f003 0304 	and.w	r3, r3, #4
    9822:	2b00      	cmp	r3, #0
    9824:	d004      	beq.n	9830 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	68db      	ldr	r3, [r3, #12]
    982a:	6878      	ldr	r0, [r7, #4]
    982c:	4798      	blx	r3
}
    982e:	e01f      	b.n	9870 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    9830:	7afb      	ldrb	r3, [r7, #11]
    9832:	f003 0302 	and.w	r3, r3, #2
    9836:	2b00      	cmp	r3, #0
    9838:	d008      	beq.n	984c <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    983a:	2102      	movs	r1, #2
    983c:	68f8      	ldr	r0, [r7, #12]
    983e:	4b10      	ldr	r3, [pc, #64]	; (9880 <_spi_handler+0xa0>)
    9840:	4798      	blx	r3
		dev->callbacks.complete(dev);
    9842:	687b      	ldr	r3, [r7, #4]
    9844:	691b      	ldr	r3, [r3, #16]
    9846:	6878      	ldr	r0, [r7, #4]
    9848:	4798      	blx	r3
}
    984a:	e011      	b.n	9870 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    984c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    9850:	2b00      	cmp	r3, #0
    9852:	da0d      	bge.n	9870 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    9854:	2104      	movs	r1, #4
    9856:	68f8      	ldr	r0, [r7, #12]
    9858:	4b0a      	ldr	r3, [pc, #40]	; (9884 <_spi_handler+0xa4>)
    985a:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    985c:	2180      	movs	r1, #128	; 0x80
    985e:	68f8      	ldr	r0, [r7, #12]
    9860:	4b07      	ldr	r3, [pc, #28]	; (9880 <_spi_handler+0xa0>)
    9862:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    9864:	687b      	ldr	r3, [r7, #4]
    9866:	695b      	ldr	r3, [r3, #20]
    9868:	f06f 0112 	mvn.w	r1, #18
    986c:	6878      	ldr	r0, [r7, #4]
    986e:	4798      	blx	r3
}
    9870:	bf00      	nop
    9872:	3710      	adds	r7, #16
    9874:	46bd      	mov	sp, r7
    9876:	bd80      	pop	{r7, pc}
    9878:	00008651 	.word	0x00008651
    987c:	000087bb 	.word	0x000087bb
    9880:	0000866b 	.word	0x0000866b
    9884:	00008be9 	.word	0x00008be9

00009888 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    9888:	b580      	push	{r7, lr}
    988a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    988c:	4b03      	ldr	r3, [pc, #12]	; (989c <SERCOM4_0_Handler+0x14>)
    988e:	681b      	ldr	r3, [r3, #0]
    9890:	4618      	mov	r0, r3
    9892:	4b03      	ldr	r3, [pc, #12]	; (98a0 <SERCOM4_0_Handler+0x18>)
    9894:	4798      	blx	r3
}
    9896:	bf00      	nop
    9898:	bd80      	pop	{r7, pc}
    989a:	bf00      	nop
    989c:	2000214c 	.word	0x2000214c
    98a0:	000097e1 	.word	0x000097e1

000098a4 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    98a4:	b580      	push	{r7, lr}
    98a6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    98a8:	4b03      	ldr	r3, [pc, #12]	; (98b8 <SERCOM4_1_Handler+0x14>)
    98aa:	681b      	ldr	r3, [r3, #0]
    98ac:	4618      	mov	r0, r3
    98ae:	4b03      	ldr	r3, [pc, #12]	; (98bc <SERCOM4_1_Handler+0x18>)
    98b0:	4798      	blx	r3
}
    98b2:	bf00      	nop
    98b4:	bd80      	pop	{r7, pc}
    98b6:	bf00      	nop
    98b8:	2000214c 	.word	0x2000214c
    98bc:	000097e1 	.word	0x000097e1

000098c0 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    98c0:	b580      	push	{r7, lr}
    98c2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    98c4:	4b03      	ldr	r3, [pc, #12]	; (98d4 <SERCOM4_2_Handler+0x14>)
    98c6:	681b      	ldr	r3, [r3, #0]
    98c8:	4618      	mov	r0, r3
    98ca:	4b03      	ldr	r3, [pc, #12]	; (98d8 <SERCOM4_2_Handler+0x18>)
    98cc:	4798      	blx	r3
}
    98ce:	bf00      	nop
    98d0:	bd80      	pop	{r7, pc}
    98d2:	bf00      	nop
    98d4:	2000214c 	.word	0x2000214c
    98d8:	000097e1 	.word	0x000097e1

000098dc <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    98dc:	b580      	push	{r7, lr}
    98de:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    98e0:	4b03      	ldr	r3, [pc, #12]	; (98f0 <SERCOM4_3_Handler+0x14>)
    98e2:	681b      	ldr	r3, [r3, #0]
    98e4:	4618      	mov	r0, r3
    98e6:	4b03      	ldr	r3, [pc, #12]	; (98f4 <SERCOM4_3_Handler+0x18>)
    98e8:	4798      	blx	r3
}
    98ea:	bf00      	nop
    98ec:	bd80      	pop	{r7, pc}
    98ee:	bf00      	nop
    98f0:	2000214c 	.word	0x2000214c
    98f4:	000097e1 	.word	0x000097e1

000098f8 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    98f8:	b580      	push	{r7, lr}
    98fa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    98fc:	4b03      	ldr	r3, [pc, #12]	; (990c <SERCOM5_0_Handler+0x14>)
    98fe:	681b      	ldr	r3, [r3, #0]
    9900:	4618      	mov	r0, r3
    9902:	4b03      	ldr	r3, [pc, #12]	; (9910 <SERCOM5_0_Handler+0x18>)
    9904:	4798      	blx	r3
}
    9906:	bf00      	nop
    9908:	bd80      	pop	{r7, pc}
    990a:	bf00      	nop
    990c:	20002150 	.word	0x20002150
    9910:	00008fe5 	.word	0x00008fe5

00009914 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    9914:	b580      	push	{r7, lr}
    9916:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    9918:	4b03      	ldr	r3, [pc, #12]	; (9928 <SERCOM5_1_Handler+0x14>)
    991a:	681b      	ldr	r3, [r3, #0]
    991c:	4618      	mov	r0, r3
    991e:	4b03      	ldr	r3, [pc, #12]	; (992c <SERCOM5_1_Handler+0x18>)
    9920:	4798      	blx	r3
}
    9922:	bf00      	nop
    9924:	bd80      	pop	{r7, pc}
    9926:	bf00      	nop
    9928:	20002150 	.word	0x20002150
    992c:	00008fe5 	.word	0x00008fe5

00009930 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    9930:	b580      	push	{r7, lr}
    9932:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    9934:	4b03      	ldr	r3, [pc, #12]	; (9944 <SERCOM5_2_Handler+0x14>)
    9936:	681b      	ldr	r3, [r3, #0]
    9938:	4618      	mov	r0, r3
    993a:	4b03      	ldr	r3, [pc, #12]	; (9948 <SERCOM5_2_Handler+0x18>)
    993c:	4798      	blx	r3
}
    993e:	bf00      	nop
    9940:	bd80      	pop	{r7, pc}
    9942:	bf00      	nop
    9944:	20002150 	.word	0x20002150
    9948:	00008fe5 	.word	0x00008fe5

0000994c <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    994c:	b580      	push	{r7, lr}
    994e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    9950:	4b03      	ldr	r3, [pc, #12]	; (9960 <SERCOM5_3_Handler+0x14>)
    9952:	681b      	ldr	r3, [r3, #0]
    9954:	4618      	mov	r0, r3
    9956:	4b03      	ldr	r3, [pc, #12]	; (9964 <SERCOM5_3_Handler+0x18>)
    9958:	4798      	blx	r3
}
    995a:	bf00      	nop
    995c:	bd80      	pop	{r7, pc}
    995e:	bf00      	nop
    9960:	20002150 	.word	0x20002150
    9964:	00008fe5 	.word	0x00008fe5

00009968 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    9968:	b580      	push	{r7, lr}
    996a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    996c:	4b03      	ldr	r3, [pc, #12]	; (997c <SERCOM7_0_Handler+0x14>)
    996e:	681b      	ldr	r3, [r3, #0]
    9970:	4618      	mov	r0, r3
    9972:	4b03      	ldr	r3, [pc, #12]	; (9980 <SERCOM7_0_Handler+0x18>)
    9974:	4798      	blx	r3
}
    9976:	bf00      	nop
    9978:	bd80      	pop	{r7, pc}
    997a:	bf00      	nop
    997c:	20002154 	.word	0x20002154
    9980:	00008fe5 	.word	0x00008fe5

00009984 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    9984:	b580      	push	{r7, lr}
    9986:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    9988:	4b03      	ldr	r3, [pc, #12]	; (9998 <SERCOM7_1_Handler+0x14>)
    998a:	681b      	ldr	r3, [r3, #0]
    998c:	4618      	mov	r0, r3
    998e:	4b03      	ldr	r3, [pc, #12]	; (999c <SERCOM7_1_Handler+0x18>)
    9990:	4798      	blx	r3
}
    9992:	bf00      	nop
    9994:	bd80      	pop	{r7, pc}
    9996:	bf00      	nop
    9998:	20002154 	.word	0x20002154
    999c:	00008fe5 	.word	0x00008fe5

000099a0 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    99a0:	b580      	push	{r7, lr}
    99a2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    99a4:	4b03      	ldr	r3, [pc, #12]	; (99b4 <SERCOM7_2_Handler+0x14>)
    99a6:	681b      	ldr	r3, [r3, #0]
    99a8:	4618      	mov	r0, r3
    99aa:	4b03      	ldr	r3, [pc, #12]	; (99b8 <SERCOM7_2_Handler+0x18>)
    99ac:	4798      	blx	r3
}
    99ae:	bf00      	nop
    99b0:	bd80      	pop	{r7, pc}
    99b2:	bf00      	nop
    99b4:	20002154 	.word	0x20002154
    99b8:	00008fe5 	.word	0x00008fe5

000099bc <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    99bc:	b580      	push	{r7, lr}
    99be:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    99c0:	4b03      	ldr	r3, [pc, #12]	; (99d0 <SERCOM7_3_Handler+0x14>)
    99c2:	681b      	ldr	r3, [r3, #0]
    99c4:	4618      	mov	r0, r3
    99c6:	4b03      	ldr	r3, [pc, #12]	; (99d4 <SERCOM7_3_Handler+0x18>)
    99c8:	4798      	blx	r3
}
    99ca:	bf00      	nop
    99cc:	bd80      	pop	{r7, pc}
    99ce:	bf00      	nop
    99d0:	20002154 	.word	0x20002154
    99d4:	00008fe5 	.word	0x00008fe5

000099d8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    99d8:	b580      	push	{r7, lr}
    99da:	b084      	sub	sp, #16
    99dc:	af00      	add	r7, sp, #0
    99de:	6078      	str	r0, [r7, #4]
    99e0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    99e2:	683b      	ldr	r3, [r7, #0]
    99e4:	4618      	mov	r0, r3
    99e6:	4b35      	ldr	r3, [pc, #212]	; (9abc <_spi_m_sync_init+0xe4>)
    99e8:	4798      	blx	r3
    99ea:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	2b00      	cmp	r3, #0
    99f0:	d004      	beq.n	99fc <_spi_m_sync_init+0x24>
    99f2:	683b      	ldr	r3, [r7, #0]
    99f4:	2b00      	cmp	r3, #0
    99f6:	d001      	beq.n	99fc <_spi_m_sync_init+0x24>
    99f8:	2301      	movs	r3, #1
    99fa:	e000      	b.n	99fe <_spi_m_sync_init+0x26>
    99fc:	2300      	movs	r3, #0
    99fe:	f003 0301 	and.w	r3, r3, #1
    9a02:	b2db      	uxtb	r3, r3
    9a04:	f640 12ec 	movw	r2, #2540	; 0x9ec
    9a08:	492d      	ldr	r1, [pc, #180]	; (9ac0 <_spi_m_sync_init+0xe8>)
    9a0a:	4618      	mov	r0, r3
    9a0c:	4b2d      	ldr	r3, [pc, #180]	; (9ac4 <_spi_m_sync_init+0xec>)
    9a0e:	4798      	blx	r3

	if (regs == NULL) {
    9a10:	68fb      	ldr	r3, [r7, #12]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d102      	bne.n	9a1c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    9a16:	f06f 030c 	mvn.w	r3, #12
    9a1a:	e04a      	b.n	9ab2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    9a1c:	2101      	movs	r1, #1
    9a1e:	6838      	ldr	r0, [r7, #0]
    9a20:	4b29      	ldr	r3, [pc, #164]	; (9ac8 <_spi_m_sync_init+0xf0>)
    9a22:	4798      	blx	r3
    9a24:	4603      	mov	r3, r0
    9a26:	f083 0301 	eor.w	r3, r3, #1
    9a2a:	b2db      	uxtb	r3, r3
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d019      	beq.n	9a64 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    9a30:	68fb      	ldr	r3, [r7, #12]
    9a32:	681b      	ldr	r3, [r3, #0]
    9a34:	f003 031c 	and.w	r3, r3, #28
    9a38:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    9a3a:	2102      	movs	r1, #2
    9a3c:	6838      	ldr	r0, [r7, #0]
    9a3e:	4b23      	ldr	r3, [pc, #140]	; (9acc <_spi_m_sync_init+0xf4>)
    9a40:	4798      	blx	r3
    9a42:	4603      	mov	r3, r0
    9a44:	2b00      	cmp	r3, #0
    9a46:	d006      	beq.n	9a56 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    9a48:	6838      	ldr	r0, [r7, #0]
    9a4a:	4b21      	ldr	r3, [pc, #132]	; (9ad0 <_spi_m_sync_init+0xf8>)
    9a4c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    9a4e:	2102      	movs	r1, #2
    9a50:	6838      	ldr	r0, [r7, #0]
    9a52:	4b20      	ldr	r3, [pc, #128]	; (9ad4 <_spi_m_sync_init+0xfc>)
    9a54:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    9a56:	68bb      	ldr	r3, [r7, #8]
    9a58:	f043 0301 	orr.w	r3, r3, #1
    9a5c:	4619      	mov	r1, r3
    9a5e:	6838      	ldr	r0, [r7, #0]
    9a60:	4b1d      	ldr	r3, [pc, #116]	; (9ad8 <_spi_m_sync_init+0x100>)
    9a62:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    9a64:	2101      	movs	r1, #1
    9a66:	6838      	ldr	r0, [r7, #0]
    9a68:	4b1a      	ldr	r3, [pc, #104]	; (9ad4 <_spi_m_sync_init+0xfc>)
    9a6a:	4798      	blx	r3

	dev->prvt = hw;
    9a6c:	687b      	ldr	r3, [r7, #4]
    9a6e:	683a      	ldr	r2, [r7, #0]
    9a70:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    9a72:	68fb      	ldr	r3, [r7, #12]
    9a74:	681b      	ldr	r3, [r3, #0]
    9a76:	f003 031c 	and.w	r3, r3, #28
    9a7a:	2b08      	cmp	r3, #8
    9a7c:	d104      	bne.n	9a88 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    9a7e:	68f9      	ldr	r1, [r7, #12]
    9a80:	6838      	ldr	r0, [r7, #0]
    9a82:	4b16      	ldr	r3, [pc, #88]	; (9adc <_spi_m_sync_init+0x104>)
    9a84:	4798      	blx	r3
    9a86:	e003      	b.n	9a90 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    9a88:	68f9      	ldr	r1, [r7, #12]
    9a8a:	6838      	ldr	r0, [r7, #0]
    9a8c:	4b14      	ldr	r3, [pc, #80]	; (9ae0 <_spi_m_sync_init+0x108>)
    9a8e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    9a90:	68fb      	ldr	r3, [r7, #12]
    9a92:	685b      	ldr	r3, [r3, #4]
    9a94:	f003 0307 	and.w	r3, r3, #7
    9a98:	2b00      	cmp	r3, #0
    9a9a:	d101      	bne.n	9aa0 <_spi_m_sync_init+0xc8>
    9a9c:	2201      	movs	r2, #1
    9a9e:	e000      	b.n	9aa2 <_spi_m_sync_init+0xca>
    9aa0:	2202      	movs	r2, #2
    9aa2:	687b      	ldr	r3, [r7, #4]
    9aa4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    9aa6:	68fb      	ldr	r3, [r7, #12]
    9aa8:	89db      	ldrh	r3, [r3, #14]
    9aaa:	b29a      	uxth	r2, r3
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    9ab0:	2300      	movs	r3, #0
}
    9ab2:	4618      	mov	r0, r3
    9ab4:	3710      	adds	r7, #16
    9ab6:	46bd      	mov	sp, r7
    9ab8:	bd80      	pop	{r7, pc}
    9aba:	bf00      	nop
    9abc:	00009785 	.word	0x00009785
    9ac0:	0001286c 	.word	0x0001286c
    9ac4:	00005f89 	.word	0x00005f89
    9ac8:	00008595 	.word	0x00008595
    9acc:	00008909 	.word	0x00008909
    9ad0:	000088e1 	.word	0x000088e1
    9ad4:	00008571 	.word	0x00008571
    9ad8:	00008939 	.word	0x00008939
    9adc:	000096d9 	.word	0x000096d9
    9ae0:	00009645 	.word	0x00009645

00009ae4 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b086      	sub	sp, #24
    9ae8:	af00      	add	r7, sp, #0
    9aea:	6078      	str	r0, [r7, #4]
    9aec:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    9af2:	6839      	ldr	r1, [r7, #0]
    9af4:	6878      	ldr	r0, [r7, #4]
    9af6:	4b1a      	ldr	r3, [pc, #104]	; (9b60 <_spi_m_async_init+0x7c>)
    9af8:	4798      	blx	r3
    9afa:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    9afc:	68bb      	ldr	r3, [r7, #8]
    9afe:	2b00      	cmp	r3, #0
    9b00:	da01      	bge.n	9b06 <_spi_m_async_init+0x22>
		return rc;
    9b02:	68bb      	ldr	r3, [r7, #8]
    9b04:	e028      	b.n	9b58 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    9b06:	6879      	ldr	r1, [r7, #4]
    9b08:	6838      	ldr	r0, [r7, #0]
    9b0a:	4b16      	ldr	r3, [pc, #88]	; (9b64 <_spi_m_async_init+0x80>)
    9b0c:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    9b0e:	68fb      	ldr	r3, [r7, #12]
    9b10:	2200      	movs	r2, #0
    9b12:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    9b14:	68fb      	ldr	r3, [r7, #12]
    9b16:	2200      	movs	r2, #0
    9b18:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    9b1a:	68fb      	ldr	r3, [r7, #12]
    9b1c:	2200      	movs	r2, #0
    9b1e:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    9b20:	6838      	ldr	r0, [r7, #0]
    9b22:	4b11      	ldr	r3, [pc, #68]	; (9b68 <_spi_m_async_init+0x84>)
    9b24:	4798      	blx	r3
    9b26:	4603      	mov	r3, r0
    9b28:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9b2a:	2300      	movs	r3, #0
    9b2c:	613b      	str	r3, [r7, #16]
    9b2e:	e00f      	b.n	9b50 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    9b30:	7dfb      	ldrb	r3, [r7, #23]
    9b32:	b21b      	sxth	r3, r3
    9b34:	4618      	mov	r0, r3
    9b36:	4b0d      	ldr	r3, [pc, #52]	; (9b6c <_spi_m_async_init+0x88>)
    9b38:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    9b3a:	7dfb      	ldrb	r3, [r7, #23]
    9b3c:	b21b      	sxth	r3, r3
    9b3e:	4618      	mov	r0, r3
    9b40:	4b0b      	ldr	r3, [pc, #44]	; (9b70 <_spi_m_async_init+0x8c>)
    9b42:	4798      	blx	r3
		irq++;
    9b44:	7dfb      	ldrb	r3, [r7, #23]
    9b46:	3301      	adds	r3, #1
    9b48:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    9b4a:	693b      	ldr	r3, [r7, #16]
    9b4c:	3301      	adds	r3, #1
    9b4e:	613b      	str	r3, [r7, #16]
    9b50:	693b      	ldr	r3, [r7, #16]
    9b52:	2b03      	cmp	r3, #3
    9b54:	d9ec      	bls.n	9b30 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    9b56:	2300      	movs	r3, #0
}
    9b58:	4618      	mov	r0, r3
    9b5a:	3718      	adds	r7, #24
    9b5c:	46bd      	mov	sp, r7
    9b5e:	bd80      	pop	{r7, pc}
    9b60:	000099d9 	.word	0x000099d9
    9b64:	00008cdd 	.word	0x00008cdd
    9b68:	00009129 	.word	0x00009129
    9b6c:	000084a5 	.word	0x000084a5
    9b70:	000084e9 	.word	0x000084e9

00009b74 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    9b74:	b580      	push	{r7, lr}
    9b76:	b082      	sub	sp, #8
    9b78:	af00      	add	r7, sp, #0
    9b7a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    9b7c:	bf00      	nop
    9b7e:	2103      	movs	r1, #3
    9b80:	6878      	ldr	r0, [r7, #4]
    9b82:	4b06      	ldr	r3, [pc, #24]	; (9b9c <_spi_wait_bus_idle+0x28>)
    9b84:	4798      	blx	r3
    9b86:	4603      	mov	r3, r0
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d0f8      	beq.n	9b7e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    9b8c:	2103      	movs	r1, #3
    9b8e:	6878      	ldr	r0, [r7, #4]
    9b90:	4b03      	ldr	r3, [pc, #12]	; (9ba0 <_spi_wait_bus_idle+0x2c>)
    9b92:	4798      	blx	r3
}
    9b94:	bf00      	nop
    9b96:	3708      	adds	r7, #8
    9b98:	46bd      	mov	sp, r7
    9b9a:	bd80      	pop	{r7, pc}
    9b9c:	00008629 	.word	0x00008629
    9ba0:	0000866b 	.word	0x0000866b

00009ba4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    9ba4:	b580      	push	{r7, lr}
    9ba6:	b086      	sub	sp, #24
    9ba8:	af00      	add	r7, sp, #0
    9baa:	60f8      	str	r0, [r7, #12]
    9bac:	60b9      	str	r1, [r7, #8]
    9bae:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    9bb0:	68bb      	ldr	r3, [r7, #8]
    9bb2:	f003 0304 	and.w	r3, r3, #4
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d101      	bne.n	9bbe <_spi_rx_check_and_receive+0x1a>
		return false;
    9bba:	2300      	movs	r3, #0
    9bbc:	e022      	b.n	9c04 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    9bbe:	68f8      	ldr	r0, [r7, #12]
    9bc0:	4b12      	ldr	r3, [pc, #72]	; (9c0c <_spi_rx_check_and_receive+0x68>)
    9bc2:	4798      	blx	r3
    9bc4:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    9bc6:	687b      	ldr	r3, [r7, #4]
    9bc8:	685b      	ldr	r3, [r3, #4]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d014      	beq.n	9bf8 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	685b      	ldr	r3, [r3, #4]
    9bd2:	1c59      	adds	r1, r3, #1
    9bd4:	687a      	ldr	r2, [r7, #4]
    9bd6:	6051      	str	r1, [r2, #4]
    9bd8:	697a      	ldr	r2, [r7, #20]
    9bda:	b2d2      	uxtb	r2, r2
    9bdc:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    9bde:	687b      	ldr	r3, [r7, #4]
    9be0:	7c1b      	ldrb	r3, [r3, #16]
    9be2:	2b01      	cmp	r3, #1
    9be4:	d908      	bls.n	9bf8 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	685b      	ldr	r3, [r3, #4]
    9bea:	1c59      	adds	r1, r3, #1
    9bec:	687a      	ldr	r2, [r7, #4]
    9bee:	6051      	str	r1, [r2, #4]
    9bf0:	697a      	ldr	r2, [r7, #20]
    9bf2:	0a12      	lsrs	r2, r2, #8
    9bf4:	b2d2      	uxtb	r2, r2
    9bf6:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    9bf8:	687b      	ldr	r3, [r7, #4]
    9bfa:	68db      	ldr	r3, [r3, #12]
    9bfc:	1c5a      	adds	r2, r3, #1
    9bfe:	687b      	ldr	r3, [r7, #4]
    9c00:	60da      	str	r2, [r3, #12]

	return true;
    9c02:	2301      	movs	r3, #1
}
    9c04:	4618      	mov	r0, r3
    9c06:	3718      	adds	r7, #24
    9c08:	46bd      	mov	sp, r7
    9c0a:	bd80      	pop	{r7, pc}
    9c0c:	00008bb1 	.word	0x00008bb1

00009c10 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    9c10:	b580      	push	{r7, lr}
    9c12:	b086      	sub	sp, #24
    9c14:	af00      	add	r7, sp, #0
    9c16:	60f8      	str	r0, [r7, #12]
    9c18:	60b9      	str	r1, [r7, #8]
    9c1a:	607a      	str	r2, [r7, #4]
    9c1c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    9c1e:	68bb      	ldr	r3, [r7, #8]
    9c20:	f003 0301 	and.w	r3, r3, #1
    9c24:	2b00      	cmp	r3, #0
    9c26:	d028      	beq.n	9c7a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	681b      	ldr	r3, [r3, #0]
    9c2c:	2b00      	cmp	r3, #0
    9c2e:	d018      	beq.n	9c62 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    9c30:	687b      	ldr	r3, [r7, #4]
    9c32:	681b      	ldr	r3, [r3, #0]
    9c34:	1c59      	adds	r1, r3, #1
    9c36:	687a      	ldr	r2, [r7, #4]
    9c38:	6011      	str	r1, [r2, #0]
    9c3a:	781b      	ldrb	r3, [r3, #0]
    9c3c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    9c3e:	687b      	ldr	r3, [r7, #4]
    9c40:	7c1b      	ldrb	r3, [r3, #16]
    9c42:	2b01      	cmp	r3, #1
    9c44:	d90f      	bls.n	9c66 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    9c46:	687b      	ldr	r3, [r7, #4]
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	781b      	ldrb	r3, [r3, #0]
    9c4c:	021b      	lsls	r3, r3, #8
    9c4e:	461a      	mov	r2, r3
    9c50:	697b      	ldr	r3, [r7, #20]
    9c52:	4313      	orrs	r3, r2
    9c54:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    9c56:	687b      	ldr	r3, [r7, #4]
    9c58:	681b      	ldr	r3, [r3, #0]
    9c5a:	1c5a      	adds	r2, r3, #1
    9c5c:	687b      	ldr	r3, [r7, #4]
    9c5e:	601a      	str	r2, [r3, #0]
    9c60:	e001      	b.n	9c66 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    9c62:	887b      	ldrh	r3, [r7, #2]
    9c64:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	689b      	ldr	r3, [r3, #8]
    9c6a:	1c5a      	adds	r2, r3, #1
    9c6c:	687b      	ldr	r3, [r7, #4]
    9c6e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    9c70:	6979      	ldr	r1, [r7, #20]
    9c72:	68f8      	ldr	r0, [r7, #12]
    9c74:	4b03      	ldr	r3, [pc, #12]	; (9c84 <_spi_tx_check_and_send+0x74>)
    9c76:	4798      	blx	r3
    9c78:	e000      	b.n	9c7c <_spi_tx_check_and_send+0x6c>
		return;
    9c7a:	bf00      	nop
}
    9c7c:	3718      	adds	r7, #24
    9c7e:	46bd      	mov	sp, r7
    9c80:	bd80      	pop	{r7, pc}
    9c82:	bf00      	nop
    9c84:	00008b95 	.word	0x00008b95

00009c88 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    9c88:	b580      	push	{r7, lr}
    9c8a:	b082      	sub	sp, #8
    9c8c:	af00      	add	r7, sp, #0
    9c8e:	6078      	str	r0, [r7, #4]
    9c90:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    9c92:	687b      	ldr	r3, [r7, #4]
    9c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9c98:	2b00      	cmp	r3, #0
    9c9a:	d00b      	beq.n	9cb4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    9c9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9ca0:	6838      	ldr	r0, [r7, #0]
    9ca2:	4b07      	ldr	r3, [pc, #28]	; (9cc0 <_spi_err_check+0x38>)
    9ca4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    9ca6:	2180      	movs	r1, #128	; 0x80
    9ca8:	6838      	ldr	r0, [r7, #0]
    9caa:	4b06      	ldr	r3, [pc, #24]	; (9cc4 <_spi_err_check+0x3c>)
    9cac:	4798      	blx	r3
		return ERR_OVERFLOW;
    9cae:	f06f 0312 	mvn.w	r3, #18
    9cb2:	e000      	b.n	9cb6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    9cb4:	2300      	movs	r3, #0
}
    9cb6:	4618      	mov	r0, r3
    9cb8:	3708      	adds	r7, #8
    9cba:	46bd      	mov	sp, r7
    9cbc:	bd80      	pop	{r7, pc}
    9cbe:	bf00      	nop
    9cc0:	00008be9 	.word	0x00008be9
    9cc4:	0000866b 	.word	0x0000866b

00009cc8 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    9cc8:	b590      	push	{r4, r7, lr}
    9cca:	b08b      	sub	sp, #44	; 0x2c
    9ccc:	af00      	add	r7, sp, #0
    9cce:	6078      	str	r0, [r7, #4]
    9cd0:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    9cd2:	687b      	ldr	r3, [r7, #4]
    9cd4:	681b      	ldr	r3, [r3, #0]
    9cd6:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    9cd8:	2300      	movs	r3, #0
    9cda:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    9cdc:	683b      	ldr	r3, [r7, #0]
    9cde:	681b      	ldr	r3, [r3, #0]
    9ce0:	60bb      	str	r3, [r7, #8]
    9ce2:	683b      	ldr	r3, [r7, #0]
    9ce4:	685b      	ldr	r3, [r3, #4]
    9ce6:	60fb      	str	r3, [r7, #12]
    9ce8:	2300      	movs	r3, #0
    9cea:	613b      	str	r3, [r7, #16]
    9cec:	2300      	movs	r3, #0
    9cee:	617b      	str	r3, [r7, #20]
    9cf0:	687b      	ldr	r3, [r7, #4]
    9cf2:	791b      	ldrb	r3, [r3, #4]
    9cf4:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d004      	beq.n	9d06 <_spi_m_sync_trans+0x3e>
    9cfc:	6a3b      	ldr	r3, [r7, #32]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d001      	beq.n	9d06 <_spi_m_sync_trans+0x3e>
    9d02:	2301      	movs	r3, #1
    9d04:	e000      	b.n	9d08 <_spi_m_sync_trans+0x40>
    9d06:	2300      	movs	r3, #0
    9d08:	f003 0301 	and.w	r3, r3, #1
    9d0c:	b2db      	uxtb	r3, r3
    9d0e:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    9d12:	492b      	ldr	r1, [pc, #172]	; (9dc0 <_spi_m_sync_trans+0xf8>)
    9d14:	4618      	mov	r0, r3
    9d16:	4b2b      	ldr	r3, [pc, #172]	; (9dc4 <_spi_m_sync_trans+0xfc>)
    9d18:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    9d1a:	2107      	movs	r1, #7
    9d1c:	6a38      	ldr	r0, [r7, #32]
    9d1e:	4b2a      	ldr	r3, [pc, #168]	; (9dc8 <_spi_m_sync_trans+0x100>)
    9d20:	4798      	blx	r3
    9d22:	4603      	mov	r3, r0
    9d24:	2b00      	cmp	r3, #0
    9d26:	d002      	beq.n	9d2e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    9d28:	f06f 0303 	mvn.w	r3, #3
    9d2c:	e043      	b.n	9db6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    9d2e:	6a38      	ldr	r0, [r7, #32]
    9d30:	4b26      	ldr	r3, [pc, #152]	; (9dcc <_spi_m_sync_trans+0x104>)
    9d32:	4798      	blx	r3
    9d34:	4603      	mov	r3, r0
    9d36:	f083 0301 	eor.w	r3, r3, #1
    9d3a:	b2db      	uxtb	r3, r3
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d002      	beq.n	9d46 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    9d40:	f06f 0313 	mvn.w	r3, #19
    9d44:	e037      	b.n	9db6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    9d46:	6a38      	ldr	r0, [r7, #32]
    9d48:	4b21      	ldr	r3, [pc, #132]	; (9dd0 <_spi_m_sync_trans+0x108>)
    9d4a:	4798      	blx	r3
    9d4c:	4603      	mov	r3, r0
    9d4e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    9d50:	f107 0308 	add.w	r3, r7, #8
    9d54:	461a      	mov	r2, r3
    9d56:	69f9      	ldr	r1, [r7, #28]
    9d58:	6a38      	ldr	r0, [r7, #32]
    9d5a:	4b1e      	ldr	r3, [pc, #120]	; (9dd4 <_spi_m_sync_trans+0x10c>)
    9d5c:	4798      	blx	r3
    9d5e:	4603      	mov	r3, r0
    9d60:	f083 0301 	eor.w	r3, r3, #1
    9d64:	b2db      	uxtb	r3, r3
    9d66:	2b00      	cmp	r3, #0
    9d68:	d00b      	beq.n	9d82 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    9d6a:	697a      	ldr	r2, [r7, #20]
    9d6c:	693b      	ldr	r3, [r7, #16]
    9d6e:	429a      	cmp	r2, r3
    9d70:	d307      	bcc.n	9d82 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	88db      	ldrh	r3, [r3, #6]
    9d76:	f107 0208 	add.w	r2, r7, #8
    9d7a:	69f9      	ldr	r1, [r7, #28]
    9d7c:	6a38      	ldr	r0, [r7, #32]
    9d7e:	4c16      	ldr	r4, [pc, #88]	; (9dd8 <_spi_m_sync_trans+0x110>)
    9d80:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    9d82:	6a39      	ldr	r1, [r7, #32]
    9d84:	69f8      	ldr	r0, [r7, #28]
    9d86:	4b15      	ldr	r3, [pc, #84]	; (9ddc <_spi_m_sync_trans+0x114>)
    9d88:	4798      	blx	r3
    9d8a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    9d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9d8e:	2b00      	cmp	r3, #0
    9d90:	db0c      	blt.n	9dac <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    9d92:	693a      	ldr	r2, [r7, #16]
    9d94:	683b      	ldr	r3, [r7, #0]
    9d96:	689b      	ldr	r3, [r3, #8]
    9d98:	429a      	cmp	r2, r3
    9d9a:	d3d4      	bcc.n	9d46 <_spi_m_sync_trans+0x7e>
    9d9c:	697a      	ldr	r2, [r7, #20]
    9d9e:	683b      	ldr	r3, [r7, #0]
    9da0:	689b      	ldr	r3, [r3, #8]
    9da2:	429a      	cmp	r2, r3
    9da4:	d3cf      	bcc.n	9d46 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    9da6:	693b      	ldr	r3, [r7, #16]
    9da8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    9daa:	e000      	b.n	9dae <_spi_m_sync_trans+0xe6>
			break;
    9dac:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    9dae:	6a38      	ldr	r0, [r7, #32]
    9db0:	4b0b      	ldr	r3, [pc, #44]	; (9de0 <_spi_m_sync_trans+0x118>)
    9db2:	4798      	blx	r3

	return rc;
    9db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9db6:	4618      	mov	r0, r3
    9db8:	372c      	adds	r7, #44	; 0x2c
    9dba:	46bd      	mov	sp, r7
    9dbc:	bd90      	pop	{r4, r7, pc}
    9dbe:	bf00      	nop
    9dc0:	0001286c 	.word	0x0001286c
    9dc4:	00005f89 	.word	0x00005f89
    9dc8:	00008595 	.word	0x00008595
    9dcc:	000088a9 	.word	0x000088a9
    9dd0:	00008651 	.word	0x00008651
    9dd4:	00009ba5 	.word	0x00009ba5
    9dd8:	00009c11 	.word	0x00009c11
    9ddc:	00009c89 	.word	0x00009c89
    9de0:	00009b75 	.word	0x00009b75

00009de4 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    9de4:	b580      	push	{r7, lr}
    9de6:	b084      	sub	sp, #16
    9de8:	af00      	add	r7, sp, #0
    9dea:	6078      	str	r0, [r7, #4]
    9dec:	460b      	mov	r3, r1
    9dee:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    9df0:	687b      	ldr	r3, [r7, #4]
    9df2:	681b      	ldr	r3, [r3, #0]
    9df4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    9df6:	687b      	ldr	r3, [r7, #4]
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d004      	beq.n	9e06 <_spi_m_async_enable_tx+0x22>
    9dfc:	68fb      	ldr	r3, [r7, #12]
    9dfe:	2b00      	cmp	r3, #0
    9e00:	d001      	beq.n	9e06 <_spi_m_async_enable_tx+0x22>
    9e02:	2301      	movs	r3, #1
    9e04:	e000      	b.n	9e08 <_spi_m_async_enable_tx+0x24>
    9e06:	2300      	movs	r3, #0
    9e08:	f003 0301 	and.w	r3, r3, #1
    9e0c:	b2db      	uxtb	r3, r3
    9e0e:	f640 327c 	movw	r2, #2940	; 0xb7c
    9e12:	4909      	ldr	r1, [pc, #36]	; (9e38 <_spi_m_async_enable_tx+0x54>)
    9e14:	4618      	mov	r0, r3
    9e16:	4b09      	ldr	r3, [pc, #36]	; (9e3c <_spi_m_async_enable_tx+0x58>)
    9e18:	4798      	blx	r3

	if (state) {
    9e1a:	78fb      	ldrb	r3, [r7, #3]
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	d003      	beq.n	9e28 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    9e20:	68f8      	ldr	r0, [r7, #12]
    9e22:	4b07      	ldr	r3, [pc, #28]	; (9e40 <_spi_m_async_enable_tx+0x5c>)
    9e24:	4798      	blx	r3
    9e26:	e002      	b.n	9e2e <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    9e28:	68f8      	ldr	r0, [r7, #12]
    9e2a:	4b06      	ldr	r3, [pc, #24]	; (9e44 <_spi_m_async_enable_tx+0x60>)
    9e2c:	4798      	blx	r3
	}

	return ERR_NONE;
    9e2e:	2300      	movs	r3, #0
}
    9e30:	4618      	mov	r0, r3
    9e32:	3710      	adds	r7, #16
    9e34:	46bd      	mov	sp, r7
    9e36:	bd80      	pop	{r7, pc}
    9e38:	0001286c 	.word	0x0001286c
    9e3c:	00005f89 	.word	0x00005f89
    9e40:	0000871f 	.word	0x0000871f
    9e44:	00008739 	.word	0x00008739

00009e48 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    9e48:	b580      	push	{r7, lr}
    9e4a:	b084      	sub	sp, #16
    9e4c:	af00      	add	r7, sp, #0
    9e4e:	6078      	str	r0, [r7, #4]
    9e50:	460b      	mov	r3, r1
    9e52:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    9e54:	687b      	ldr	r3, [r7, #4]
    9e56:	681b      	ldr	r3, [r3, #0]
    9e58:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    9e5a:	687b      	ldr	r3, [r7, #4]
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	bf14      	ite	ne
    9e60:	2301      	movne	r3, #1
    9e62:	2300      	moveq	r3, #0
    9e64:	b2db      	uxtb	r3, r3
    9e66:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    9e6a:	490f      	ldr	r1, [pc, #60]	; (9ea8 <_spi_m_async_enable_rx+0x60>)
    9e6c:	4618      	mov	r0, r3
    9e6e:	4b0f      	ldr	r3, [pc, #60]	; (9eac <_spi_m_async_enable_rx+0x64>)
    9e70:	4798      	blx	r3
	ASSERT(hw);
    9e72:	68fb      	ldr	r3, [r7, #12]
    9e74:	2b00      	cmp	r3, #0
    9e76:	bf14      	ite	ne
    9e78:	2301      	movne	r3, #1
    9e7a:	2300      	moveq	r3, #0
    9e7c:	b2db      	uxtb	r3, r3
    9e7e:	f640 3291 	movw	r2, #2961	; 0xb91
    9e82:	4909      	ldr	r1, [pc, #36]	; (9ea8 <_spi_m_async_enable_rx+0x60>)
    9e84:	4618      	mov	r0, r3
    9e86:	4b09      	ldr	r3, [pc, #36]	; (9eac <_spi_m_async_enable_rx+0x64>)
    9e88:	4798      	blx	r3

	if (state) {
    9e8a:	78fb      	ldrb	r3, [r7, #3]
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	d003      	beq.n	9e98 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    9e90:	68f8      	ldr	r0, [r7, #12]
    9e92:	4b07      	ldr	r3, [pc, #28]	; (9eb0 <_spi_m_async_enable_rx+0x68>)
    9e94:	4798      	blx	r3
    9e96:	e002      	b.n	9e9e <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    9e98:	68f8      	ldr	r0, [r7, #12]
    9e9a:	4b06      	ldr	r3, [pc, #24]	; (9eb4 <_spi_m_async_enable_rx+0x6c>)
    9e9c:	4798      	blx	r3
	}

	return ERR_NONE;
    9e9e:	2300      	movs	r3, #0
}
    9ea0:	4618      	mov	r0, r3
    9ea2:	3710      	adds	r7, #16
    9ea4:	46bd      	mov	sp, r7
    9ea6:	bd80      	pop	{r7, pc}
    9ea8:	0001286c 	.word	0x0001286c
    9eac:	00005f89 	.word	0x00005f89
    9eb0:	00008787 	.word	0x00008787
    9eb4:	000087a1 	.word	0x000087a1

00009eb8 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	b082      	sub	sp, #8
    9ebc:	af00      	add	r7, sp, #0
    9ebe:	6078      	str	r0, [r7, #4]
    9ec0:	460b      	mov	r3, r1
    9ec2:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	2b00      	cmp	r3, #0
    9ec8:	d005      	beq.n	9ed6 <_spi_m_async_enable_tx_complete+0x1e>
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	681b      	ldr	r3, [r3, #0]
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d001      	beq.n	9ed6 <_spi_m_async_enable_tx_complete+0x1e>
    9ed2:	2301      	movs	r3, #1
    9ed4:	e000      	b.n	9ed8 <_spi_m_async_enable_tx_complete+0x20>
    9ed6:	2300      	movs	r3, #0
    9ed8:	f003 0301 	and.w	r3, r3, #1
    9edc:	b2db      	uxtb	r3, r3
    9ede:	f640 32a3 	movw	r2, #2979	; 0xba3
    9ee2:	490b      	ldr	r1, [pc, #44]	; (9f10 <_spi_m_async_enable_tx_complete+0x58>)
    9ee4:	4618      	mov	r0, r3
    9ee6:	4b0b      	ldr	r3, [pc, #44]	; (9f14 <_spi_m_async_enable_tx_complete+0x5c>)
    9ee8:	4798      	blx	r3

	if (state) {
    9eea:	78fb      	ldrb	r3, [r7, #3]
    9eec:	2b00      	cmp	r3, #0
    9eee:	d005      	beq.n	9efc <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    9ef0:	687b      	ldr	r3, [r7, #4]
    9ef2:	681b      	ldr	r3, [r3, #0]
    9ef4:	4618      	mov	r0, r3
    9ef6:	4b08      	ldr	r3, [pc, #32]	; (9f18 <_spi_m_async_enable_tx_complete+0x60>)
    9ef8:	4798      	blx	r3
    9efa:	e004      	b.n	9f06 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    9efc:	687b      	ldr	r3, [r7, #4]
    9efe:	681b      	ldr	r3, [r3, #0]
    9f00:	4618      	mov	r0, r3
    9f02:	4b06      	ldr	r3, [pc, #24]	; (9f1c <_spi_m_async_enable_tx_complete+0x64>)
    9f04:	4798      	blx	r3
	}

	return ERR_NONE;
    9f06:	2300      	movs	r3, #0
}
    9f08:	4618      	mov	r0, r3
    9f0a:	3708      	adds	r7, #8
    9f0c:	46bd      	mov	sp, r7
    9f0e:	bd80      	pop	{r7, pc}
    9f10:	0001286c 	.word	0x0001286c
    9f14:	00005f89 	.word	0x00005f89
    9f18:	00008753 	.word	0x00008753
    9f1c:	0000876d 	.word	0x0000876d

00009f20 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    9f20:	b580      	push	{r7, lr}
    9f22:	b082      	sub	sp, #8
    9f24:	af00      	add	r7, sp, #0
    9f26:	6078      	str	r0, [r7, #4]
    9f28:	460b      	mov	r3, r1
    9f2a:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d005      	beq.n	9f3e <_spi_m_async_write_one+0x1e>
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	681b      	ldr	r3, [r3, #0]
    9f36:	2b00      	cmp	r3, #0
    9f38:	d001      	beq.n	9f3e <_spi_m_async_write_one+0x1e>
    9f3a:	2301      	movs	r3, #1
    9f3c:	e000      	b.n	9f40 <_spi_m_async_write_one+0x20>
    9f3e:	2300      	movs	r3, #0
    9f40:	f003 0301 	and.w	r3, r3, #1
    9f44:	b2db      	uxtb	r3, r3
    9f46:	f640 32b5 	movw	r2, #2997	; 0xbb5
    9f4a:	4908      	ldr	r1, [pc, #32]	; (9f6c <_spi_m_async_write_one+0x4c>)
    9f4c:	4618      	mov	r0, r3
    9f4e:	4b08      	ldr	r3, [pc, #32]	; (9f70 <_spi_m_async_write_one+0x50>)
    9f50:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    9f52:	687b      	ldr	r3, [r7, #4]
    9f54:	681b      	ldr	r3, [r3, #0]
    9f56:	887a      	ldrh	r2, [r7, #2]
    9f58:	4611      	mov	r1, r2
    9f5a:	4618      	mov	r0, r3
    9f5c:	4b05      	ldr	r3, [pc, #20]	; (9f74 <_spi_m_async_write_one+0x54>)
    9f5e:	4798      	blx	r3

	return ERR_NONE;
    9f60:	2300      	movs	r3, #0
}
    9f62:	4618      	mov	r0, r3
    9f64:	3708      	adds	r7, #8
    9f66:	46bd      	mov	sp, r7
    9f68:	bd80      	pop	{r7, pc}
    9f6a:	bf00      	nop
    9f6c:	0001286c 	.word	0x0001286c
    9f70:	00005f89 	.word	0x00005f89
    9f74:	00008b95 	.word	0x00008b95

00009f78 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    9f78:	b580      	push	{r7, lr}
    9f7a:	b082      	sub	sp, #8
    9f7c:	af00      	add	r7, sp, #0
    9f7e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    9f80:	687b      	ldr	r3, [r7, #4]
    9f82:	2b00      	cmp	r3, #0
    9f84:	d005      	beq.n	9f92 <_spi_m_async_read_one+0x1a>
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	681b      	ldr	r3, [r3, #0]
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	d001      	beq.n	9f92 <_spi_m_async_read_one+0x1a>
    9f8e:	2301      	movs	r3, #1
    9f90:	e000      	b.n	9f94 <_spi_m_async_read_one+0x1c>
    9f92:	2300      	movs	r3, #0
    9f94:	f003 0301 	and.w	r3, r3, #1
    9f98:	b2db      	uxtb	r3, r3
    9f9a:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    9f9e:	4907      	ldr	r1, [pc, #28]	; (9fbc <_spi_m_async_read_one+0x44>)
    9fa0:	4618      	mov	r0, r3
    9fa2:	4b07      	ldr	r3, [pc, #28]	; (9fc0 <_spi_m_async_read_one+0x48>)
    9fa4:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    9fa6:	687b      	ldr	r3, [r7, #4]
    9fa8:	681b      	ldr	r3, [r3, #0]
    9faa:	4618      	mov	r0, r3
    9fac:	4b05      	ldr	r3, [pc, #20]	; (9fc4 <_spi_m_async_read_one+0x4c>)
    9fae:	4798      	blx	r3
    9fb0:	4603      	mov	r3, r0
    9fb2:	b29b      	uxth	r3, r3
}
    9fb4:	4618      	mov	r0, r3
    9fb6:	3708      	adds	r7, #8
    9fb8:	46bd      	mov	sp, r7
    9fba:	bd80      	pop	{r7, pc}
    9fbc:	0001286c 	.word	0x0001286c
    9fc0:	00005f89 	.word	0x00005f89
    9fc4:	00008bb1 	.word	0x00008bb1

00009fc8 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    9fc8:	b580      	push	{r7, lr}
    9fca:	b086      	sub	sp, #24
    9fcc:	af00      	add	r7, sp, #0
    9fce:	60f8      	str	r0, [r7, #12]
    9fd0:	460b      	mov	r3, r1
    9fd2:	607a      	str	r2, [r7, #4]
    9fd4:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    9fd6:	68fb      	ldr	r3, [r7, #12]
    9fd8:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    9fda:	68fb      	ldr	r3, [r7, #12]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d004      	beq.n	9fea <_spi_m_async_register_callback+0x22>
    9fe0:	7afb      	ldrb	r3, [r7, #11]
    9fe2:	2b03      	cmp	r3, #3
    9fe4:	d801      	bhi.n	9fea <_spi_m_async_register_callback+0x22>
    9fe6:	2301      	movs	r3, #1
    9fe8:	e000      	b.n	9fec <_spi_m_async_register_callback+0x24>
    9fea:	2300      	movs	r3, #0
    9fec:	f003 0301 	and.w	r3, r3, #1
    9ff0:	b2db      	uxtb	r3, r3
    9ff2:	f640 32e9 	movw	r2, #3049	; 0xbe9
    9ff6:	4909      	ldr	r1, [pc, #36]	; (a01c <_spi_m_async_register_callback+0x54>)
    9ff8:	4618      	mov	r0, r3
    9ffa:	4b09      	ldr	r3, [pc, #36]	; (a020 <_spi_m_async_register_callback+0x58>)
    9ffc:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    9ffe:	697b      	ldr	r3, [r7, #20]
    a000:	3308      	adds	r3, #8
    a002:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    a004:	7afb      	ldrb	r3, [r7, #11]
    a006:	009b      	lsls	r3, r3, #2
    a008:	693a      	ldr	r2, [r7, #16]
    a00a:	4413      	add	r3, r2
    a00c:	687a      	ldr	r2, [r7, #4]
    a00e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    a010:	2300      	movs	r3, #0
}
    a012:	4618      	mov	r0, r3
    a014:	3718      	adds	r7, #24
    a016:	46bd      	mov	sp, r7
    a018:	bd80      	pop	{r7, pc}
    a01a:	bf00      	nop
    a01c:	0001286c 	.word	0x0001286c
    a020:	00005f89 	.word	0x00005f89

0000a024 <__NVIC_EnableIRQ>:
{
    a024:	b480      	push	{r7}
    a026:	b083      	sub	sp, #12
    a028:	af00      	add	r7, sp, #0
    a02a:	4603      	mov	r3, r0
    a02c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a02e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a032:	2b00      	cmp	r3, #0
    a034:	db0b      	blt.n	a04e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a036:	4909      	ldr	r1, [pc, #36]	; (a05c <__NVIC_EnableIRQ+0x38>)
    a038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a03c:	095b      	lsrs	r3, r3, #5
    a03e:	88fa      	ldrh	r2, [r7, #6]
    a040:	f002 021f 	and.w	r2, r2, #31
    a044:	2001      	movs	r0, #1
    a046:	fa00 f202 	lsl.w	r2, r0, r2
    a04a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a04e:	bf00      	nop
    a050:	370c      	adds	r7, #12
    a052:	46bd      	mov	sp, r7
    a054:	f85d 7b04 	ldr.w	r7, [sp], #4
    a058:	4770      	bx	lr
    a05a:	bf00      	nop
    a05c:	e000e100 	.word	0xe000e100

0000a060 <__NVIC_DisableIRQ>:
{
    a060:	b480      	push	{r7}
    a062:	b083      	sub	sp, #12
    a064:	af00      	add	r7, sp, #0
    a066:	4603      	mov	r3, r0
    a068:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a06a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a06e:	2b00      	cmp	r3, #0
    a070:	db10      	blt.n	a094 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a072:	490b      	ldr	r1, [pc, #44]	; (a0a0 <__NVIC_DisableIRQ+0x40>)
    a074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a078:	095b      	lsrs	r3, r3, #5
    a07a:	88fa      	ldrh	r2, [r7, #6]
    a07c:	f002 021f 	and.w	r2, r2, #31
    a080:	2001      	movs	r0, #1
    a082:	fa00 f202 	lsl.w	r2, r0, r2
    a086:	3320      	adds	r3, #32
    a088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a08c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a090:	f3bf 8f6f 	isb	sy
}
    a094:	bf00      	nop
    a096:	370c      	adds	r7, #12
    a098:	46bd      	mov	sp, r7
    a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a09e:	4770      	bx	lr
    a0a0:	e000e100 	.word	0xe000e100

0000a0a4 <__NVIC_ClearPendingIRQ>:
{
    a0a4:	b480      	push	{r7}
    a0a6:	b083      	sub	sp, #12
    a0a8:	af00      	add	r7, sp, #0
    a0aa:	4603      	mov	r3, r0
    a0ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a0ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	db0c      	blt.n	a0d0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a0b6:	4909      	ldr	r1, [pc, #36]	; (a0dc <__NVIC_ClearPendingIRQ+0x38>)
    a0b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a0bc:	095b      	lsrs	r3, r3, #5
    a0be:	88fa      	ldrh	r2, [r7, #6]
    a0c0:	f002 021f 	and.w	r2, r2, #31
    a0c4:	2001      	movs	r0, #1
    a0c6:	fa00 f202 	lsl.w	r2, r0, r2
    a0ca:	3360      	adds	r3, #96	; 0x60
    a0cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0d0:	bf00      	nop
    a0d2:	370c      	adds	r7, #12
    a0d4:	46bd      	mov	sp, r7
    a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0da:	4770      	bx	lr
    a0dc:	e000e100 	.word	0xe000e100

0000a0e0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    a0e0:	b480      	push	{r7}
    a0e2:	b083      	sub	sp, #12
    a0e4:	af00      	add	r7, sp, #0
    a0e6:	6078      	str	r0, [r7, #4]
    a0e8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a0ea:	bf00      	nop
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	691a      	ldr	r2, [r3, #16]
    a0f0:	683b      	ldr	r3, [r7, #0]
    a0f2:	4013      	ands	r3, r2
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d1f9      	bne.n	a0ec <hri_tc_wait_for_sync+0xc>
	};
}
    a0f8:	bf00      	nop
    a0fa:	370c      	adds	r7, #12
    a0fc:	46bd      	mov	sp, r7
    a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a102:	4770      	bx	lr

0000a104 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    a104:	b480      	push	{r7}
    a106:	b083      	sub	sp, #12
    a108:	af00      	add	r7, sp, #0
    a10a:	6078      	str	r0, [r7, #4]
    a10c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    a10e:	687b      	ldr	r3, [r7, #4]
    a110:	691a      	ldr	r2, [r3, #16]
    a112:	683b      	ldr	r3, [r7, #0]
    a114:	4013      	ands	r3, r2
    a116:	2b00      	cmp	r3, #0
    a118:	bf14      	ite	ne
    a11a:	2301      	movne	r3, #1
    a11c:	2300      	moveq	r3, #0
    a11e:	b2db      	uxtb	r3, r3
}
    a120:	4618      	mov	r0, r3
    a122:	370c      	adds	r7, #12
    a124:	46bd      	mov	sp, r7
    a126:	f85d 7b04 	ldr.w	r7, [sp], #4
    a12a:	4770      	bx	lr

0000a12c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    a12c:	b480      	push	{r7}
    a12e:	b083      	sub	sp, #12
    a130:	af00      	add	r7, sp, #0
    a132:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    a134:	687b      	ldr	r3, [r7, #4]
    a136:	7a9b      	ldrb	r3, [r3, #10]
    a138:	b2db      	uxtb	r3, r3
    a13a:	f003 0301 	and.w	r3, r3, #1
    a13e:	2b00      	cmp	r3, #0
    a140:	bf14      	ite	ne
    a142:	2301      	movne	r3, #1
    a144:	2300      	moveq	r3, #0
    a146:	b2db      	uxtb	r3, r3
}
    a148:	4618      	mov	r0, r3
    a14a:	370c      	adds	r7, #12
    a14c:	46bd      	mov	sp, r7
    a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a152:	4770      	bx	lr

0000a154 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    a154:	b480      	push	{r7}
    a156:	b083      	sub	sp, #12
    a158:	af00      	add	r7, sp, #0
    a15a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    a15c:	687b      	ldr	r3, [r7, #4]
    a15e:	2201      	movs	r2, #1
    a160:	729a      	strb	r2, [r3, #10]
}
    a162:	bf00      	nop
    a164:	370c      	adds	r7, #12
    a166:	46bd      	mov	sp, r7
    a168:	f85d 7b04 	ldr.w	r7, [sp], #4
    a16c:	4770      	bx	lr

0000a16e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    a16e:	b480      	push	{r7}
    a170:	b083      	sub	sp, #12
    a172:	af00      	add	r7, sp, #0
    a174:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	2202      	movs	r2, #2
    a17a:	729a      	strb	r2, [r3, #10]
}
    a17c:	bf00      	nop
    a17e:	370c      	adds	r7, #12
    a180:	46bd      	mov	sp, r7
    a182:	f85d 7b04 	ldr.w	r7, [sp], #4
    a186:	4770      	bx	lr

0000a188 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    a188:	b480      	push	{r7}
    a18a:	b083      	sub	sp, #12
    a18c:	af00      	add	r7, sp, #0
    a18e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    a190:	687b      	ldr	r3, [r7, #4]
    a192:	2201      	movs	r2, #1
    a194:	725a      	strb	r2, [r3, #9]
}
    a196:	bf00      	nop
    a198:	370c      	adds	r7, #12
    a19a:	46bd      	mov	sp, r7
    a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1a0:	4770      	bx	lr

0000a1a2 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    a1a2:	b480      	push	{r7}
    a1a4:	b083      	sub	sp, #12
    a1a6:	af00      	add	r7, sp, #0
    a1a8:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    a1aa:	687b      	ldr	r3, [r7, #4]
    a1ac:	7a5b      	ldrb	r3, [r3, #9]
    a1ae:	b2db      	uxtb	r3, r3
    a1b0:	085b      	lsrs	r3, r3, #1
    a1b2:	f003 0301 	and.w	r3, r3, #1
    a1b6:	2b00      	cmp	r3, #0
    a1b8:	bf14      	ite	ne
    a1ba:	2301      	movne	r3, #1
    a1bc:	2300      	moveq	r3, #0
    a1be:	b2db      	uxtb	r3, r3
}
    a1c0:	4618      	mov	r0, r3
    a1c2:	370c      	adds	r7, #12
    a1c4:	46bd      	mov	sp, r7
    a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1ca:	4770      	bx	lr

0000a1cc <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a1cc:	b580      	push	{r7, lr}
    a1ce:	b082      	sub	sp, #8
    a1d0:	af00      	add	r7, sp, #0
    a1d2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    a1d4:	687b      	ldr	r3, [r7, #4]
    a1d6:	681b      	ldr	r3, [r3, #0]
    a1d8:	f043 0202 	orr.w	r2, r3, #2
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a1e0:	2103      	movs	r1, #3
    a1e2:	6878      	ldr	r0, [r7, #4]
    a1e4:	4b02      	ldr	r3, [pc, #8]	; (a1f0 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    a1e6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a1e8:	bf00      	nop
    a1ea:	3708      	adds	r7, #8
    a1ec:	46bd      	mov	sp, r7
    a1ee:	bd80      	pop	{r7, pc}
    a1f0:	0000a0e1 	.word	0x0000a0e1

0000a1f4 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a1f4:	b580      	push	{r7, lr}
    a1f6:	b084      	sub	sp, #16
    a1f8:	af00      	add	r7, sp, #0
    a1fa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a1fc:	2103      	movs	r1, #3
    a1fe:	6878      	ldr	r0, [r7, #4]
    a200:	4b09      	ldr	r3, [pc, #36]	; (a228 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    a202:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    a204:	687b      	ldr	r3, [r7, #4]
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    a20a:	68fb      	ldr	r3, [r7, #12]
    a20c:	085b      	lsrs	r3, r3, #1
    a20e:	f003 0301 	and.w	r3, r3, #1
    a212:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    a214:	68fb      	ldr	r3, [r7, #12]
    a216:	2b00      	cmp	r3, #0
    a218:	bf14      	ite	ne
    a21a:	2301      	movne	r3, #1
    a21c:	2300      	moveq	r3, #0
    a21e:	b2db      	uxtb	r3, r3
}
    a220:	4618      	mov	r0, r3
    a222:	3710      	adds	r7, #16
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}
    a228:	0000a0e1 	.word	0x0000a0e1

0000a22c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a22c:	b580      	push	{r7, lr}
    a22e:	b082      	sub	sp, #8
    a230:	af00      	add	r7, sp, #0
    a232:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    a234:	687b      	ldr	r3, [r7, #4]
    a236:	681b      	ldr	r3, [r3, #0]
    a238:	f023 0202 	bic.w	r2, r3, #2
    a23c:	687b      	ldr	r3, [r7, #4]
    a23e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a240:	2103      	movs	r1, #3
    a242:	6878      	ldr	r0, [r7, #4]
    a244:	4b02      	ldr	r3, [pc, #8]	; (a250 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    a246:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a248:	bf00      	nop
    a24a:	3708      	adds	r7, #8
    a24c:	46bd      	mov	sp, r7
    a24e:	bd80      	pop	{r7, pc}
    a250:	0000a0e1 	.word	0x0000a0e1

0000a254 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    a254:	b580      	push	{r7, lr}
    a256:	b084      	sub	sp, #16
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
    a25c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a25e:	2103      	movs	r1, #3
    a260:	6878      	ldr	r0, [r7, #4]
    a262:	4b07      	ldr	r3, [pc, #28]	; (a280 <hri_tc_get_CTRLA_reg+0x2c>)
    a264:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	681b      	ldr	r3, [r3, #0]
    a26a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a26c:	68fa      	ldr	r2, [r7, #12]
    a26e:	683b      	ldr	r3, [r7, #0]
    a270:	4013      	ands	r3, r2
    a272:	60fb      	str	r3, [r7, #12]
	return tmp;
    a274:	68fb      	ldr	r3, [r7, #12]
}
    a276:	4618      	mov	r0, r3
    a278:	3710      	adds	r7, #16
    a27a:	46bd      	mov	sp, r7
    a27c:	bd80      	pop	{r7, pc}
    a27e:	bf00      	nop
    a280:	0000a0e1 	.word	0x0000a0e1

0000a284 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    a284:	b580      	push	{r7, lr}
    a286:	b082      	sub	sp, #8
    a288:	af00      	add	r7, sp, #0
    a28a:	6078      	str	r0, [r7, #4]
    a28c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    a28e:	687b      	ldr	r3, [r7, #4]
    a290:	683a      	ldr	r2, [r7, #0]
    a292:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    a294:	2103      	movs	r1, #3
    a296:	6878      	ldr	r0, [r7, #4]
    a298:	4b02      	ldr	r3, [pc, #8]	; (a2a4 <hri_tc_write_CTRLA_reg+0x20>)
    a29a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a29c:	bf00      	nop
    a29e:	3708      	adds	r7, #8
    a2a0:	46bd      	mov	sp, r7
    a2a2:	bd80      	pop	{r7, pc}
    a2a4:	0000a0e1 	.word	0x0000a0e1

0000a2a8 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    a2a8:	b480      	push	{r7}
    a2aa:	b083      	sub	sp, #12
    a2ac:	af00      	add	r7, sp, #0
    a2ae:	6078      	str	r0, [r7, #4]
    a2b0:	460b      	mov	r3, r1
    a2b2:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    a2b4:	687b      	ldr	r3, [r7, #4]
    a2b6:	887a      	ldrh	r2, [r7, #2]
    a2b8:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    a2ba:	bf00      	nop
    a2bc:	370c      	adds	r7, #12
    a2be:	46bd      	mov	sp, r7
    a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2c4:	4770      	bx	lr

0000a2c6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    a2c6:	b480      	push	{r7}
    a2c8:	b083      	sub	sp, #12
    a2ca:	af00      	add	r7, sp, #0
    a2cc:	6078      	str	r0, [r7, #4]
    a2ce:	460b      	mov	r3, r1
    a2d0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    a2d2:	687b      	ldr	r3, [r7, #4]
    a2d4:	78fa      	ldrb	r2, [r7, #3]
    a2d6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    a2d8:	bf00      	nop
    a2da:	370c      	adds	r7, #12
    a2dc:	46bd      	mov	sp, r7
    a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2e2:	4770      	bx	lr

0000a2e4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    a2e4:	b480      	push	{r7}
    a2e6:	b083      	sub	sp, #12
    a2e8:	af00      	add	r7, sp, #0
    a2ea:	6078      	str	r0, [r7, #4]
    a2ec:	460b      	mov	r3, r1
    a2ee:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    a2f0:	687b      	ldr	r3, [r7, #4]
    a2f2:	78fa      	ldrb	r2, [r7, #3]
    a2f4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    a2f6:	bf00      	nop
    a2f8:	370c      	adds	r7, #12
    a2fa:	46bd      	mov	sp, r7
    a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a300:	4770      	bx	lr
	...

0000a304 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    a304:	b580      	push	{r7, lr}
    a306:	b082      	sub	sp, #8
    a308:	af00      	add	r7, sp, #0
    a30a:	6078      	str	r0, [r7, #4]
    a30c:	460b      	mov	r3, r1
    a30e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    a310:	687b      	ldr	r3, [r7, #4]
    a312:	78fa      	ldrb	r2, [r7, #3]
    a314:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    a316:	2120      	movs	r1, #32
    a318:	6878      	ldr	r0, [r7, #4]
    a31a:	4b03      	ldr	r3, [pc, #12]	; (a328 <hri_tccount8_write_PER_reg+0x24>)
    a31c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a31e:	bf00      	nop
    a320:	3708      	adds	r7, #8
    a322:	46bd      	mov	sp, r7
    a324:	bd80      	pop	{r7, pc}
    a326:	bf00      	nop
    a328:	0000a0e1 	.word	0x0000a0e1

0000a32c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b082      	sub	sp, #8
    a330:	af00      	add	r7, sp, #0
    a332:	6078      	str	r0, [r7, #4]
    a334:	460b      	mov	r3, r1
    a336:	70fb      	strb	r3, [r7, #3]
    a338:	4613      	mov	r3, r2
    a33a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    a33c:	78fb      	ldrb	r3, [r7, #3]
    a33e:	687a      	ldr	r2, [r7, #4]
    a340:	4413      	add	r3, r2
    a342:	78ba      	ldrb	r2, [r7, #2]
    a344:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    a346:	21c0      	movs	r1, #192	; 0xc0
    a348:	6878      	ldr	r0, [r7, #4]
    a34a:	4b03      	ldr	r3, [pc, #12]	; (a358 <hri_tccount8_write_CC_reg+0x2c>)
    a34c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a34e:	bf00      	nop
    a350:	3708      	adds	r7, #8
    a352:	46bd      	mov	sp, r7
    a354:	bd80      	pop	{r7, pc}
    a356:	bf00      	nop
    a358:	0000a0e1 	.word	0x0000a0e1

0000a35c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    a35c:	b580      	push	{r7, lr}
    a35e:	b082      	sub	sp, #8
    a360:	af00      	add	r7, sp, #0
    a362:	6078      	str	r0, [r7, #4]
    a364:	460b      	mov	r3, r1
    a366:	70fb      	strb	r3, [r7, #3]
    a368:	4613      	mov	r3, r2
    a36a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    a36c:	78fb      	ldrb	r3, [r7, #3]
    a36e:	687a      	ldr	r2, [r7, #4]
    a370:	330c      	adds	r3, #12
    a372:	005b      	lsls	r3, r3, #1
    a374:	4413      	add	r3, r2
    a376:	883a      	ldrh	r2, [r7, #0]
    a378:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    a37a:	21c0      	movs	r1, #192	; 0xc0
    a37c:	6878      	ldr	r0, [r7, #4]
    a37e:	4b03      	ldr	r3, [pc, #12]	; (a38c <hri_tccount16_write_CC_reg+0x30>)
    a380:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a382:	bf00      	nop
    a384:	3708      	adds	r7, #8
    a386:	46bd      	mov	sp, r7
    a388:	bd80      	pop	{r7, pc}
    a38a:	bf00      	nop
    a38c:	0000a0e1 	.word	0x0000a0e1

0000a390 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    a390:	b580      	push	{r7, lr}
    a392:	b084      	sub	sp, #16
    a394:	af00      	add	r7, sp, #0
    a396:	60f8      	str	r0, [r7, #12]
    a398:	460b      	mov	r3, r1
    a39a:	607a      	str	r2, [r7, #4]
    a39c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    a39e:	7afb      	ldrb	r3, [r7, #11]
    a3a0:	68fa      	ldr	r2, [r7, #12]
    a3a2:	3306      	adds	r3, #6
    a3a4:	009b      	lsls	r3, r3, #2
    a3a6:	4413      	add	r3, r2
    a3a8:	687a      	ldr	r2, [r7, #4]
    a3aa:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    a3ac:	21c0      	movs	r1, #192	; 0xc0
    a3ae:	68f8      	ldr	r0, [r7, #12]
    a3b0:	4b02      	ldr	r3, [pc, #8]	; (a3bc <hri_tccount32_write_CC_reg+0x2c>)
    a3b2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    a3b4:	bf00      	nop
    a3b6:	3710      	adds	r7, #16
    a3b8:	46bd      	mov	sp, r7
    a3ba:	bd80      	pop	{r7, pc}
    a3bc:	0000a0e1 	.word	0x0000a0e1

0000a3c0 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    a3c0:	b580      	push	{r7, lr}
    a3c2:	b084      	sub	sp, #16
    a3c4:	af00      	add	r7, sp, #0
    a3c6:	6078      	str	r0, [r7, #4]
    a3c8:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    a3ca:	6838      	ldr	r0, [r7, #0]
    a3cc:	4b93      	ldr	r3, [pc, #588]	; (a61c <_timer_init+0x25c>)
    a3ce:	4798      	blx	r3
    a3d0:	4603      	mov	r3, r0
    a3d2:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	683a      	ldr	r2, [r7, #0]
    a3d8:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    a3da:	2299      	movs	r2, #153	; 0x99
    a3dc:	4990      	ldr	r1, [pc, #576]	; (a620 <_timer_init+0x260>)
    a3de:	2001      	movs	r0, #1
    a3e0:	4b90      	ldr	r3, [pc, #576]	; (a624 <_timer_init+0x264>)
    a3e2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    a3e4:	2101      	movs	r1, #1
    a3e6:	6838      	ldr	r0, [r7, #0]
    a3e8:	4b8f      	ldr	r3, [pc, #572]	; (a628 <_timer_init+0x268>)
    a3ea:	4798      	blx	r3
    a3ec:	4603      	mov	r3, r0
    a3ee:	f083 0301 	eor.w	r3, r3, #1
    a3f2:	b2db      	uxtb	r3, r3
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d011      	beq.n	a41c <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    a3f8:	2102      	movs	r1, #2
    a3fa:	6838      	ldr	r0, [r7, #0]
    a3fc:	4b8b      	ldr	r3, [pc, #556]	; (a62c <_timer_init+0x26c>)
    a3fe:	4798      	blx	r3
    a400:	4603      	mov	r3, r0
    a402:	2b00      	cmp	r3, #0
    a404:	d006      	beq.n	a414 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a406:	6838      	ldr	r0, [r7, #0]
    a408:	4b89      	ldr	r3, [pc, #548]	; (a630 <_timer_init+0x270>)
    a40a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    a40c:	2102      	movs	r1, #2
    a40e:	6838      	ldr	r0, [r7, #0]
    a410:	4b88      	ldr	r3, [pc, #544]	; (a634 <_timer_init+0x274>)
    a412:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    a414:	2101      	movs	r1, #1
    a416:	6838      	ldr	r0, [r7, #0]
    a418:	4b87      	ldr	r3, [pc, #540]	; (a638 <_timer_init+0x278>)
    a41a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    a41c:	2101      	movs	r1, #1
    a41e:	6838      	ldr	r0, [r7, #0]
    a420:	4b84      	ldr	r3, [pc, #528]	; (a634 <_timer_init+0x274>)
    a422:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    a424:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a428:	4984      	ldr	r1, [pc, #528]	; (a63c <_timer_init+0x27c>)
    a42a:	4613      	mov	r3, r2
    a42c:	009b      	lsls	r3, r3, #2
    a42e:	4413      	add	r3, r2
    a430:	009b      	lsls	r3, r3, #2
    a432:	440b      	add	r3, r1
    a434:	3304      	adds	r3, #4
    a436:	681b      	ldr	r3, [r3, #0]
    a438:	4619      	mov	r1, r3
    a43a:	6838      	ldr	r0, [r7, #0]
    a43c:	4b7e      	ldr	r3, [pc, #504]	; (a638 <_timer_init+0x278>)
    a43e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    a440:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a444:	497d      	ldr	r1, [pc, #500]	; (a63c <_timer_init+0x27c>)
    a446:	4613      	mov	r3, r2
    a448:	009b      	lsls	r3, r3, #2
    a44a:	4413      	add	r3, r2
    a44c:	009b      	lsls	r3, r3, #2
    a44e:	440b      	add	r3, r1
    a450:	330a      	adds	r3, #10
    a452:	781b      	ldrb	r3, [r3, #0]
    a454:	4619      	mov	r1, r3
    a456:	6838      	ldr	r0, [r7, #0]
    a458:	4b79      	ldr	r3, [pc, #484]	; (a640 <_timer_init+0x280>)
    a45a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    a45c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a460:	4976      	ldr	r1, [pc, #472]	; (a63c <_timer_init+0x27c>)
    a462:	4613      	mov	r3, r2
    a464:	009b      	lsls	r3, r3, #2
    a466:	4413      	add	r3, r2
    a468:	009b      	lsls	r3, r3, #2
    a46a:	440b      	add	r3, r1
    a46c:	3308      	adds	r3, #8
    a46e:	881b      	ldrh	r3, [r3, #0]
    a470:	4619      	mov	r1, r3
    a472:	6838      	ldr	r0, [r7, #0]
    a474:	4b73      	ldr	r3, [pc, #460]	; (a644 <_timer_init+0x284>)
    a476:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    a478:	2101      	movs	r1, #1
    a47a:	6838      	ldr	r0, [r7, #0]
    a47c:	4b72      	ldr	r3, [pc, #456]	; (a648 <_timer_init+0x288>)
    a47e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a480:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a484:	496d      	ldr	r1, [pc, #436]	; (a63c <_timer_init+0x27c>)
    a486:	4613      	mov	r3, r2
    a488:	009b      	lsls	r3, r3, #2
    a48a:	4413      	add	r3, r2
    a48c:	009b      	lsls	r3, r3, #2
    a48e:	440b      	add	r3, r1
    a490:	3304      	adds	r3, #4
    a492:	681b      	ldr	r3, [r3, #0]
    a494:	f003 030c 	and.w	r3, r3, #12
    a498:	2b08      	cmp	r3, #8
    a49a:	d11e      	bne.n	a4da <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    a49c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a4a0:	4966      	ldr	r1, [pc, #408]	; (a63c <_timer_init+0x27c>)
    a4a2:	4613      	mov	r3, r2
    a4a4:	009b      	lsls	r3, r3, #2
    a4a6:	4413      	add	r3, r2
    a4a8:	009b      	lsls	r3, r3, #2
    a4aa:	440b      	add	r3, r1
    a4ac:	330c      	adds	r3, #12
    a4ae:	681b      	ldr	r3, [r3, #0]
    a4b0:	461a      	mov	r2, r3
    a4b2:	2100      	movs	r1, #0
    a4b4:	6838      	ldr	r0, [r7, #0]
    a4b6:	4b65      	ldr	r3, [pc, #404]	; (a64c <_timer_init+0x28c>)
    a4b8:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    a4ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a4be:	495f      	ldr	r1, [pc, #380]	; (a63c <_timer_init+0x27c>)
    a4c0:	4613      	mov	r3, r2
    a4c2:	009b      	lsls	r3, r3, #2
    a4c4:	4413      	add	r3, r2
    a4c6:	009b      	lsls	r3, r3, #2
    a4c8:	440b      	add	r3, r1
    a4ca:	3310      	adds	r3, #16
    a4cc:	681b      	ldr	r3, [r3, #0]
    a4ce:	461a      	mov	r2, r3
    a4d0:	2101      	movs	r1, #1
    a4d2:	6838      	ldr	r0, [r7, #0]
    a4d4:	4b5d      	ldr	r3, [pc, #372]	; (a64c <_timer_init+0x28c>)
    a4d6:	4798      	blx	r3
    a4d8:	e06a      	b.n	a5b0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a4da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a4de:	4957      	ldr	r1, [pc, #348]	; (a63c <_timer_init+0x27c>)
    a4e0:	4613      	mov	r3, r2
    a4e2:	009b      	lsls	r3, r3, #2
    a4e4:	4413      	add	r3, r2
    a4e6:	009b      	lsls	r3, r3, #2
    a4e8:	440b      	add	r3, r1
    a4ea:	3304      	adds	r3, #4
    a4ec:	681b      	ldr	r3, [r3, #0]
    a4ee:	f003 030c 	and.w	r3, r3, #12
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d120      	bne.n	a538 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a4f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a4fa:	4950      	ldr	r1, [pc, #320]	; (a63c <_timer_init+0x27c>)
    a4fc:	4613      	mov	r3, r2
    a4fe:	009b      	lsls	r3, r3, #2
    a500:	4413      	add	r3, r2
    a502:	009b      	lsls	r3, r3, #2
    a504:	440b      	add	r3, r1
    a506:	330c      	adds	r3, #12
    a508:	681b      	ldr	r3, [r3, #0]
    a50a:	b29b      	uxth	r3, r3
    a50c:	461a      	mov	r2, r3
    a50e:	2100      	movs	r1, #0
    a510:	6838      	ldr	r0, [r7, #0]
    a512:	4b4f      	ldr	r3, [pc, #316]	; (a650 <_timer_init+0x290>)
    a514:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    a516:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a51a:	4948      	ldr	r1, [pc, #288]	; (a63c <_timer_init+0x27c>)
    a51c:	4613      	mov	r3, r2
    a51e:	009b      	lsls	r3, r3, #2
    a520:	4413      	add	r3, r2
    a522:	009b      	lsls	r3, r3, #2
    a524:	440b      	add	r3, r1
    a526:	3310      	adds	r3, #16
    a528:	681b      	ldr	r3, [r3, #0]
    a52a:	b29b      	uxth	r3, r3
    a52c:	461a      	mov	r2, r3
    a52e:	2101      	movs	r1, #1
    a530:	6838      	ldr	r0, [r7, #0]
    a532:	4b47      	ldr	r3, [pc, #284]	; (a650 <_timer_init+0x290>)
    a534:	4798      	blx	r3
    a536:	e03b      	b.n	a5b0 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    a538:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a53c:	493f      	ldr	r1, [pc, #252]	; (a63c <_timer_init+0x27c>)
    a53e:	4613      	mov	r3, r2
    a540:	009b      	lsls	r3, r3, #2
    a542:	4413      	add	r3, r2
    a544:	009b      	lsls	r3, r3, #2
    a546:	440b      	add	r3, r1
    a548:	3304      	adds	r3, #4
    a54a:	681b      	ldr	r3, [r3, #0]
    a54c:	f003 030c 	and.w	r3, r3, #12
    a550:	2b04      	cmp	r3, #4
    a552:	d12d      	bne.n	a5b0 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    a554:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a558:	4938      	ldr	r1, [pc, #224]	; (a63c <_timer_init+0x27c>)
    a55a:	4613      	mov	r3, r2
    a55c:	009b      	lsls	r3, r3, #2
    a55e:	4413      	add	r3, r2
    a560:	009b      	lsls	r3, r3, #2
    a562:	440b      	add	r3, r1
    a564:	330c      	adds	r3, #12
    a566:	681b      	ldr	r3, [r3, #0]
    a568:	b2db      	uxtb	r3, r3
    a56a:	461a      	mov	r2, r3
    a56c:	2100      	movs	r1, #0
    a56e:	6838      	ldr	r0, [r7, #0]
    a570:	4b38      	ldr	r3, [pc, #224]	; (a654 <_timer_init+0x294>)
    a572:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    a574:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a578:	4930      	ldr	r1, [pc, #192]	; (a63c <_timer_init+0x27c>)
    a57a:	4613      	mov	r3, r2
    a57c:	009b      	lsls	r3, r3, #2
    a57e:	4413      	add	r3, r2
    a580:	009b      	lsls	r3, r3, #2
    a582:	440b      	add	r3, r1
    a584:	3310      	adds	r3, #16
    a586:	681b      	ldr	r3, [r3, #0]
    a588:	b2db      	uxtb	r3, r3
    a58a:	461a      	mov	r2, r3
    a58c:	2101      	movs	r1, #1
    a58e:	6838      	ldr	r0, [r7, #0]
    a590:	4b30      	ldr	r3, [pc, #192]	; (a654 <_timer_init+0x294>)
    a592:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    a594:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a598:	4928      	ldr	r1, [pc, #160]	; (a63c <_timer_init+0x27c>)
    a59a:	4613      	mov	r3, r2
    a59c:	009b      	lsls	r3, r3, #2
    a59e:	4413      	add	r3, r2
    a5a0:	009b      	lsls	r3, r3, #2
    a5a2:	440b      	add	r3, r1
    a5a4:	330b      	adds	r3, #11
    a5a6:	781b      	ldrb	r3, [r3, #0]
    a5a8:	4619      	mov	r1, r3
    a5aa:	6838      	ldr	r0, [r7, #0]
    a5ac:	4b2a      	ldr	r3, [pc, #168]	; (a658 <_timer_init+0x298>)
    a5ae:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    a5b0:	6838      	ldr	r0, [r7, #0]
    a5b2:	4b2a      	ldr	r3, [pc, #168]	; (a65c <_timer_init+0x29c>)
    a5b4:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    a5b6:	6879      	ldr	r1, [r7, #4]
    a5b8:	6838      	ldr	r0, [r7, #0]
    a5ba:	4b29      	ldr	r3, [pc, #164]	; (a660 <_timer_init+0x2a0>)
    a5bc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    a5be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a5c2:	491e      	ldr	r1, [pc, #120]	; (a63c <_timer_init+0x27c>)
    a5c4:	4613      	mov	r3, r2
    a5c6:	009b      	lsls	r3, r3, #2
    a5c8:	4413      	add	r3, r2
    a5ca:	009b      	lsls	r3, r3, #2
    a5cc:	440b      	add	r3, r1
    a5ce:	3302      	adds	r3, #2
    a5d0:	f9b3 3000 	ldrsh.w	r3, [r3]
    a5d4:	4618      	mov	r0, r3
    a5d6:	4b23      	ldr	r3, [pc, #140]	; (a664 <_timer_init+0x2a4>)
    a5d8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    a5da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a5de:	4917      	ldr	r1, [pc, #92]	; (a63c <_timer_init+0x27c>)
    a5e0:	4613      	mov	r3, r2
    a5e2:	009b      	lsls	r3, r3, #2
    a5e4:	4413      	add	r3, r2
    a5e6:	009b      	lsls	r3, r3, #2
    a5e8:	440b      	add	r3, r1
    a5ea:	3302      	adds	r3, #2
    a5ec:	f9b3 3000 	ldrsh.w	r3, [r3]
    a5f0:	4618      	mov	r0, r3
    a5f2:	4b1d      	ldr	r3, [pc, #116]	; (a668 <_timer_init+0x2a8>)
    a5f4:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    a5f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a5fa:	4910      	ldr	r1, [pc, #64]	; (a63c <_timer_init+0x27c>)
    a5fc:	4613      	mov	r3, r2
    a5fe:	009b      	lsls	r3, r3, #2
    a600:	4413      	add	r3, r2
    a602:	009b      	lsls	r3, r3, #2
    a604:	440b      	add	r3, r1
    a606:	3302      	adds	r3, #2
    a608:	f9b3 3000 	ldrsh.w	r3, [r3]
    a60c:	4618      	mov	r0, r3
    a60e:	4b17      	ldr	r3, [pc, #92]	; (a66c <_timer_init+0x2ac>)
    a610:	4798      	blx	r3

	return ERR_NONE;
    a612:	2300      	movs	r3, #0
}
    a614:	4618      	mov	r0, r3
    a616:	3710      	adds	r7, #16
    a618:	46bd      	mov	sp, r7
    a61a:	bd80      	pop	{r7, pc}
    a61c:	0000ab15 	.word	0x0000ab15
    a620:	000128dc 	.word	0x000128dc
    a624:	00005f89 	.word	0x00005f89
    a628:	0000a105 	.word	0x0000a105
    a62c:	0000a255 	.word	0x0000a255
    a630:	0000a22d 	.word	0x0000a22d
    a634:	0000a0e1 	.word	0x0000a0e1
    a638:	0000a285 	.word	0x0000a285
    a63c:	20000048 	.word	0x20000048
    a640:	0000a2e5 	.word	0x0000a2e5
    a644:	0000a2a9 	.word	0x0000a2a9
    a648:	0000a2c7 	.word	0x0000a2c7
    a64c:	0000a391 	.word	0x0000a391
    a650:	0000a35d 	.word	0x0000a35d
    a654:	0000a32d 	.word	0x0000a32d
    a658:	0000a305 	.word	0x0000a305
    a65c:	0000a189 	.word	0x0000a189
    a660:	0000ab7d 	.word	0x0000ab7d
    a664:	0000a061 	.word	0x0000a061
    a668:	0000a0a5 	.word	0x0000a0a5
    a66c:	0000a025 	.word	0x0000a025

0000a670 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    a670:	b580      	push	{r7, lr}
    a672:	b084      	sub	sp, #16
    a674:	af00      	add	r7, sp, #0
    a676:	6078      	str	r0, [r7, #4]
    a678:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    a67a:	6838      	ldr	r0, [r7, #0]
    a67c:	4b73      	ldr	r3, [pc, #460]	; (a84c <_pwm_init+0x1dc>)
    a67e:	4798      	blx	r3
    a680:	4603      	mov	r3, r0
    a682:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    a684:	687b      	ldr	r3, [r7, #4]
    a686:	683a      	ldr	r2, [r7, #0]
    a688:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    a68a:	2101      	movs	r1, #1
    a68c:	6838      	ldr	r0, [r7, #0]
    a68e:	4b70      	ldr	r3, [pc, #448]	; (a850 <_pwm_init+0x1e0>)
    a690:	4798      	blx	r3
    a692:	4603      	mov	r3, r0
    a694:	f083 0301 	eor.w	r3, r3, #1
    a698:	b2db      	uxtb	r3, r3
    a69a:	2b00      	cmp	r3, #0
    a69c:	d011      	beq.n	a6c2 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    a69e:	2102      	movs	r1, #2
    a6a0:	6838      	ldr	r0, [r7, #0]
    a6a2:	4b6c      	ldr	r3, [pc, #432]	; (a854 <_pwm_init+0x1e4>)
    a6a4:	4798      	blx	r3
    a6a6:	4603      	mov	r3, r0
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d006      	beq.n	a6ba <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    a6ac:	6838      	ldr	r0, [r7, #0]
    a6ae:	4b6a      	ldr	r3, [pc, #424]	; (a858 <_pwm_init+0x1e8>)
    a6b0:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    a6b2:	2102      	movs	r1, #2
    a6b4:	6838      	ldr	r0, [r7, #0]
    a6b6:	4b69      	ldr	r3, [pc, #420]	; (a85c <_pwm_init+0x1ec>)
    a6b8:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    a6ba:	2101      	movs	r1, #1
    a6bc:	6838      	ldr	r0, [r7, #0]
    a6be:	4b68      	ldr	r3, [pc, #416]	; (a860 <_pwm_init+0x1f0>)
    a6c0:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    a6c2:	2101      	movs	r1, #1
    a6c4:	6838      	ldr	r0, [r7, #0]
    a6c6:	4b65      	ldr	r3, [pc, #404]	; (a85c <_pwm_init+0x1ec>)
    a6c8:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    a6ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a6ce:	4965      	ldr	r1, [pc, #404]	; (a864 <_pwm_init+0x1f4>)
    a6d0:	4613      	mov	r3, r2
    a6d2:	009b      	lsls	r3, r3, #2
    a6d4:	4413      	add	r3, r2
    a6d6:	009b      	lsls	r3, r3, #2
    a6d8:	440b      	add	r3, r1
    a6da:	3304      	adds	r3, #4
    a6dc:	681b      	ldr	r3, [r3, #0]
    a6de:	4619      	mov	r1, r3
    a6e0:	6838      	ldr	r0, [r7, #0]
    a6e2:	4b5f      	ldr	r3, [pc, #380]	; (a860 <_pwm_init+0x1f0>)
    a6e4:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    a6e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a6ea:	495e      	ldr	r1, [pc, #376]	; (a864 <_pwm_init+0x1f4>)
    a6ec:	4613      	mov	r3, r2
    a6ee:	009b      	lsls	r3, r3, #2
    a6f0:	4413      	add	r3, r2
    a6f2:	009b      	lsls	r3, r3, #2
    a6f4:	440b      	add	r3, r1
    a6f6:	330a      	adds	r3, #10
    a6f8:	781b      	ldrb	r3, [r3, #0]
    a6fa:	4619      	mov	r1, r3
    a6fc:	6838      	ldr	r0, [r7, #0]
    a6fe:	4b5a      	ldr	r3, [pc, #360]	; (a868 <_pwm_init+0x1f8>)
    a700:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    a702:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a706:	4957      	ldr	r1, [pc, #348]	; (a864 <_pwm_init+0x1f4>)
    a708:	4613      	mov	r3, r2
    a70a:	009b      	lsls	r3, r3, #2
    a70c:	4413      	add	r3, r2
    a70e:	009b      	lsls	r3, r3, #2
    a710:	440b      	add	r3, r1
    a712:	3308      	adds	r3, #8
    a714:	881b      	ldrh	r3, [r3, #0]
    a716:	4619      	mov	r1, r3
    a718:	6838      	ldr	r0, [r7, #0]
    a71a:	4b54      	ldr	r3, [pc, #336]	; (a86c <_pwm_init+0x1fc>)
    a71c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    a71e:	2103      	movs	r1, #3
    a720:	6838      	ldr	r0, [r7, #0]
    a722:	4b53      	ldr	r3, [pc, #332]	; (a870 <_pwm_init+0x200>)
    a724:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a726:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a72a:	494e      	ldr	r1, [pc, #312]	; (a864 <_pwm_init+0x1f4>)
    a72c:	4613      	mov	r3, r2
    a72e:	009b      	lsls	r3, r3, #2
    a730:	4413      	add	r3, r2
    a732:	009b      	lsls	r3, r3, #2
    a734:	440b      	add	r3, r1
    a736:	3304      	adds	r3, #4
    a738:	681b      	ldr	r3, [r3, #0]
    a73a:	f003 030c 	and.w	r3, r3, #12
    a73e:	2b08      	cmp	r3, #8
    a740:	d11e      	bne.n	a780 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    a742:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a746:	4947      	ldr	r1, [pc, #284]	; (a864 <_pwm_init+0x1f4>)
    a748:	4613      	mov	r3, r2
    a74a:	009b      	lsls	r3, r3, #2
    a74c:	4413      	add	r3, r2
    a74e:	009b      	lsls	r3, r3, #2
    a750:	440b      	add	r3, r1
    a752:	330c      	adds	r3, #12
    a754:	681b      	ldr	r3, [r3, #0]
    a756:	461a      	mov	r2, r3
    a758:	2100      	movs	r1, #0
    a75a:	6838      	ldr	r0, [r7, #0]
    a75c:	4b45      	ldr	r3, [pc, #276]	; (a874 <_pwm_init+0x204>)
    a75e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    a760:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a764:	493f      	ldr	r1, [pc, #252]	; (a864 <_pwm_init+0x1f4>)
    a766:	4613      	mov	r3, r2
    a768:	009b      	lsls	r3, r3, #2
    a76a:	4413      	add	r3, r2
    a76c:	009b      	lsls	r3, r3, #2
    a76e:	440b      	add	r3, r1
    a770:	3310      	adds	r3, #16
    a772:	681b      	ldr	r3, [r3, #0]
    a774:	461a      	mov	r2, r3
    a776:	2101      	movs	r1, #1
    a778:	6838      	ldr	r0, [r7, #0]
    a77a:	4b3e      	ldr	r3, [pc, #248]	; (a874 <_pwm_init+0x204>)
    a77c:	4798      	blx	r3
    a77e:	e031      	b.n	a7e4 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a780:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a784:	4937      	ldr	r1, [pc, #220]	; (a864 <_pwm_init+0x1f4>)
    a786:	4613      	mov	r3, r2
    a788:	009b      	lsls	r3, r3, #2
    a78a:	4413      	add	r3, r2
    a78c:	009b      	lsls	r3, r3, #2
    a78e:	440b      	add	r3, r1
    a790:	3304      	adds	r3, #4
    a792:	681b      	ldr	r3, [r3, #0]
    a794:	f003 030c 	and.w	r3, r3, #12
    a798:	2b00      	cmp	r3, #0
    a79a:	d120      	bne.n	a7de <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a79c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a7a0:	4930      	ldr	r1, [pc, #192]	; (a864 <_pwm_init+0x1f4>)
    a7a2:	4613      	mov	r3, r2
    a7a4:	009b      	lsls	r3, r3, #2
    a7a6:	4413      	add	r3, r2
    a7a8:	009b      	lsls	r3, r3, #2
    a7aa:	440b      	add	r3, r1
    a7ac:	330c      	adds	r3, #12
    a7ae:	681b      	ldr	r3, [r3, #0]
    a7b0:	b29b      	uxth	r3, r3
    a7b2:	461a      	mov	r2, r3
    a7b4:	2100      	movs	r1, #0
    a7b6:	6838      	ldr	r0, [r7, #0]
    a7b8:	4b2f      	ldr	r3, [pc, #188]	; (a878 <_pwm_init+0x208>)
    a7ba:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    a7bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a7c0:	4928      	ldr	r1, [pc, #160]	; (a864 <_pwm_init+0x1f4>)
    a7c2:	4613      	mov	r3, r2
    a7c4:	009b      	lsls	r3, r3, #2
    a7c6:	4413      	add	r3, r2
    a7c8:	009b      	lsls	r3, r3, #2
    a7ca:	440b      	add	r3, r1
    a7cc:	3310      	adds	r3, #16
    a7ce:	681b      	ldr	r3, [r3, #0]
    a7d0:	b29b      	uxth	r3, r3
    a7d2:	461a      	mov	r2, r3
    a7d4:	2101      	movs	r1, #1
    a7d6:	6838      	ldr	r0, [r7, #0]
    a7d8:	4b27      	ldr	r3, [pc, #156]	; (a878 <_pwm_init+0x208>)
    a7da:	4798      	blx	r3
    a7dc:	e002      	b.n	a7e4 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    a7de:	f04f 33ff 	mov.w	r3, #4294967295
    a7e2:	e02e      	b.n	a842 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    a7e4:	6879      	ldr	r1, [r7, #4]
    a7e6:	6838      	ldr	r0, [r7, #0]
    a7e8:	4b24      	ldr	r3, [pc, #144]	; (a87c <_pwm_init+0x20c>)
    a7ea:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    a7ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a7f0:	491c      	ldr	r1, [pc, #112]	; (a864 <_pwm_init+0x1f4>)
    a7f2:	4613      	mov	r3, r2
    a7f4:	009b      	lsls	r3, r3, #2
    a7f6:	4413      	add	r3, r2
    a7f8:	009b      	lsls	r3, r3, #2
    a7fa:	440b      	add	r3, r1
    a7fc:	3302      	adds	r3, #2
    a7fe:	f9b3 3000 	ldrsh.w	r3, [r3]
    a802:	4618      	mov	r0, r3
    a804:	4b1e      	ldr	r3, [pc, #120]	; (a880 <_pwm_init+0x210>)
    a806:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    a808:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a80c:	4915      	ldr	r1, [pc, #84]	; (a864 <_pwm_init+0x1f4>)
    a80e:	4613      	mov	r3, r2
    a810:	009b      	lsls	r3, r3, #2
    a812:	4413      	add	r3, r2
    a814:	009b      	lsls	r3, r3, #2
    a816:	440b      	add	r3, r1
    a818:	3302      	adds	r3, #2
    a81a:	f9b3 3000 	ldrsh.w	r3, [r3]
    a81e:	4618      	mov	r0, r3
    a820:	4b18      	ldr	r3, [pc, #96]	; (a884 <_pwm_init+0x214>)
    a822:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    a824:	f997 200f 	ldrsb.w	r2, [r7, #15]
    a828:	490e      	ldr	r1, [pc, #56]	; (a864 <_pwm_init+0x1f4>)
    a82a:	4613      	mov	r3, r2
    a82c:	009b      	lsls	r3, r3, #2
    a82e:	4413      	add	r3, r2
    a830:	009b      	lsls	r3, r3, #2
    a832:	440b      	add	r3, r1
    a834:	3302      	adds	r3, #2
    a836:	f9b3 3000 	ldrsh.w	r3, [r3]
    a83a:	4618      	mov	r0, r3
    a83c:	4b12      	ldr	r3, [pc, #72]	; (a888 <_pwm_init+0x218>)
    a83e:	4798      	blx	r3

	return 0;
    a840:	2300      	movs	r3, #0
}
    a842:	4618      	mov	r0, r3
    a844:	3710      	adds	r7, #16
    a846:	46bd      	mov	sp, r7
    a848:	bd80      	pop	{r7, pc}
    a84a:	bf00      	nop
    a84c:	0000ab15 	.word	0x0000ab15
    a850:	0000a105 	.word	0x0000a105
    a854:	0000a255 	.word	0x0000a255
    a858:	0000a22d 	.word	0x0000a22d
    a85c:	0000a0e1 	.word	0x0000a0e1
    a860:	0000a285 	.word	0x0000a285
    a864:	20000048 	.word	0x20000048
    a868:	0000a2e5 	.word	0x0000a2e5
    a86c:	0000a2a9 	.word	0x0000a2a9
    a870:	0000a2c7 	.word	0x0000a2c7
    a874:	0000a391 	.word	0x0000a391
    a878:	0000a35d 	.word	0x0000a35d
    a87c:	0000ab7d 	.word	0x0000ab7d
    a880:	0000a061 	.word	0x0000a061
    a884:	0000a0a5 	.word	0x0000a0a5
    a888:	0000a025 	.word	0x0000a025

0000a88c <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    a88c:	b580      	push	{r7, lr}
    a88e:	b082      	sub	sp, #8
    a890:	af00      	add	r7, sp, #0
    a892:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	68db      	ldr	r3, [r3, #12]
    a898:	4618      	mov	r0, r3
    a89a:	4b03      	ldr	r3, [pc, #12]	; (a8a8 <_timer_start+0x1c>)
    a89c:	4798      	blx	r3
}
    a89e:	bf00      	nop
    a8a0:	3708      	adds	r7, #8
    a8a2:	46bd      	mov	sp, r7
    a8a4:	bd80      	pop	{r7, pc}
    a8a6:	bf00      	nop
    a8a8:	0000a1cd 	.word	0x0000a1cd

0000a8ac <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    a8ac:	b580      	push	{r7, lr}
    a8ae:	b082      	sub	sp, #8
    a8b0:	af00      	add	r7, sp, #0
    a8b2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	691b      	ldr	r3, [r3, #16]
    a8b8:	4618      	mov	r0, r3
    a8ba:	4b03      	ldr	r3, [pc, #12]	; (a8c8 <_pwm_enable+0x1c>)
    a8bc:	4798      	blx	r3
}
    a8be:	bf00      	nop
    a8c0:	3708      	adds	r7, #8
    a8c2:	46bd      	mov	sp, r7
    a8c4:	bd80      	pop	{r7, pc}
    a8c6:	bf00      	nop
    a8c8:	0000a1cd 	.word	0x0000a1cd

0000a8cc <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    a8cc:	b580      	push	{r7, lr}
    a8ce:	b082      	sub	sp, #8
    a8d0:	af00      	add	r7, sp, #0
    a8d2:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    a8d4:	687b      	ldr	r3, [r7, #4]
    a8d6:	68db      	ldr	r3, [r3, #12]
    a8d8:	4618      	mov	r0, r3
    a8da:	4b03      	ldr	r3, [pc, #12]	; (a8e8 <_timer_stop+0x1c>)
    a8dc:	4798      	blx	r3
}
    a8de:	bf00      	nop
    a8e0:	3708      	adds	r7, #8
    a8e2:	46bd      	mov	sp, r7
    a8e4:	bd80      	pop	{r7, pc}
    a8e6:	bf00      	nop
    a8e8:	0000a22d 	.word	0x0000a22d

0000a8ec <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    a8ec:	b580      	push	{r7, lr}
    a8ee:	b082      	sub	sp, #8
    a8f0:	af00      	add	r7, sp, #0
    a8f2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	68db      	ldr	r3, [r3, #12]
    a8f8:	4618      	mov	r0, r3
    a8fa:	4b03      	ldr	r3, [pc, #12]	; (a908 <_timer_is_started+0x1c>)
    a8fc:	4798      	blx	r3
    a8fe:	4603      	mov	r3, r0
}
    a900:	4618      	mov	r0, r3
    a902:	3708      	adds	r7, #8
    a904:	46bd      	mov	sp, r7
    a906:	bd80      	pop	{r7, pc}
    a908:	0000a1f5 	.word	0x0000a1f5

0000a90c <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	b082      	sub	sp, #8
    a910:	af00      	add	r7, sp, #0
    a912:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    a914:	687b      	ldr	r3, [r7, #4]
    a916:	691b      	ldr	r3, [r3, #16]
    a918:	4618      	mov	r0, r3
    a91a:	4b03      	ldr	r3, [pc, #12]	; (a928 <_pwm_is_enabled+0x1c>)
    a91c:	4798      	blx	r3
    a91e:	4603      	mov	r3, r0
}
    a920:	4618      	mov	r0, r3
    a922:	3708      	adds	r7, #8
    a924:	46bd      	mov	sp, r7
    a926:	bd80      	pop	{r7, pc}
    a928:	0000a1f5 	.word	0x0000a1f5

0000a92c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    a92c:	b480      	push	{r7}
    a92e:	af00      	add	r7, sp, #0
	return NULL;
    a930:	2300      	movs	r3, #0
}
    a932:	4618      	mov	r0, r3
    a934:	46bd      	mov	sp, r7
    a936:	f85d 7b04 	ldr.w	r7, [sp], #4
    a93a:	4770      	bx	lr

0000a93c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    a93c:	b480      	push	{r7}
    a93e:	af00      	add	r7, sp, #0
	return NULL;
    a940:	2300      	movs	r3, #0
}
    a942:	4618      	mov	r0, r3
    a944:	46bd      	mov	sp, r7
    a946:	f85d 7b04 	ldr.w	r7, [sp], #4
    a94a:	4770      	bx	lr

0000a94c <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    a94c:	b580      	push	{r7, lr}
    a94e:	b084      	sub	sp, #16
    a950:	af00      	add	r7, sp, #0
    a952:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a954:	687b      	ldr	r3, [r7, #4]
    a956:	68db      	ldr	r3, [r3, #12]
    a958:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    a95a:	68f8      	ldr	r0, [r7, #12]
    a95c:	4b0e      	ldr	r3, [pc, #56]	; (a998 <_timer_set_irq+0x4c>)
    a95e:	4798      	blx	r3
    a960:	4603      	mov	r3, r0
    a962:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    a964:	f240 12a7 	movw	r2, #423	; 0x1a7
    a968:	490c      	ldr	r1, [pc, #48]	; (a99c <_timer_set_irq+0x50>)
    a96a:	2001      	movs	r0, #1
    a96c:	4b0c      	ldr	r3, [pc, #48]	; (a9a0 <_timer_set_irq+0x54>)
    a96e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    a970:	f997 200b 	ldrsb.w	r2, [r7, #11]
    a974:	490b      	ldr	r1, [pc, #44]	; (a9a4 <_timer_set_irq+0x58>)
    a976:	4613      	mov	r3, r2
    a978:	009b      	lsls	r3, r3, #2
    a97a:	4413      	add	r3, r2
    a97c:	009b      	lsls	r3, r3, #2
    a97e:	440b      	add	r3, r1
    a980:	3302      	adds	r3, #2
    a982:	f9b3 3000 	ldrsh.w	r3, [r3]
    a986:	b2db      	uxtb	r3, r3
    a988:	4618      	mov	r0, r3
    a98a:	4b07      	ldr	r3, [pc, #28]	; (a9a8 <_timer_set_irq+0x5c>)
    a98c:	4798      	blx	r3
}
    a98e:	bf00      	nop
    a990:	3710      	adds	r7, #16
    a992:	46bd      	mov	sp, r7
    a994:	bd80      	pop	{r7, pc}
    a996:	bf00      	nop
    a998:	0000ab15 	.word	0x0000ab15
    a99c:	000128dc 	.word	0x000128dc
    a9a0:	00005f89 	.word	0x00005f89
    a9a4:	20000048 	.word	0x20000048
    a9a8:	000067d5 	.word	0x000067d5

0000a9ac <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    a9ac:	b580      	push	{r7, lr}
    a9ae:	b084      	sub	sp, #16
    a9b0:	af00      	add	r7, sp, #0
    a9b2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a9b4:	687b      	ldr	r3, [r7, #4]
    a9b6:	68db      	ldr	r3, [r3, #12]
    a9b8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a9ba:	68f8      	ldr	r0, [r7, #12]
    a9bc:	4b07      	ldr	r3, [pc, #28]	; (a9dc <tc_interrupt_handler+0x30>)
    a9be:	4798      	blx	r3
    a9c0:	4603      	mov	r3, r0
    a9c2:	2b00      	cmp	r3, #0
    a9c4:	d006      	beq.n	a9d4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a9c6:	68f8      	ldr	r0, [r7, #12]
    a9c8:	4b05      	ldr	r3, [pc, #20]	; (a9e0 <tc_interrupt_handler+0x34>)
    a9ca:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    a9cc:	687b      	ldr	r3, [r7, #4]
    a9ce:	681b      	ldr	r3, [r3, #0]
    a9d0:	6878      	ldr	r0, [r7, #4]
    a9d2:	4798      	blx	r3
	}
}
    a9d4:	bf00      	nop
    a9d6:	3710      	adds	r7, #16
    a9d8:	46bd      	mov	sp, r7
    a9da:	bd80      	pop	{r7, pc}
    a9dc:	0000a12d 	.word	0x0000a12d
    a9e0:	0000a155 	.word	0x0000a155

0000a9e4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b084      	sub	sp, #16
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a9ec:	687b      	ldr	r3, [r7, #4]
    a9ee:	691b      	ldr	r3, [r3, #16]
    a9f0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a9f2:	68f8      	ldr	r0, [r7, #12]
    a9f4:	4b12      	ldr	r3, [pc, #72]	; (aa40 <tc_pwm_interrupt_handler+0x5c>)
    a9f6:	4798      	blx	r3
    a9f8:	4603      	mov	r3, r0
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d00a      	beq.n	aa14 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a9fe:	68f8      	ldr	r0, [r7, #12]
    aa00:	4b10      	ldr	r3, [pc, #64]	; (aa44 <tc_pwm_interrupt_handler+0x60>)
    aa02:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    aa04:	687b      	ldr	r3, [r7, #4]
    aa06:	681b      	ldr	r3, [r3, #0]
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d003      	beq.n	aa14 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    aa0c:	687b      	ldr	r3, [r7, #4]
    aa0e:	681b      	ldr	r3, [r3, #0]
    aa10:	6878      	ldr	r0, [r7, #4]
    aa12:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    aa14:	68f8      	ldr	r0, [r7, #12]
    aa16:	4b0c      	ldr	r3, [pc, #48]	; (aa48 <tc_pwm_interrupt_handler+0x64>)
    aa18:	4798      	blx	r3
    aa1a:	4603      	mov	r3, r0
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	d00a      	beq.n	aa36 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    aa20:	68f8      	ldr	r0, [r7, #12]
    aa22:	4b0a      	ldr	r3, [pc, #40]	; (aa4c <tc_pwm_interrupt_handler+0x68>)
    aa24:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    aa26:	687b      	ldr	r3, [r7, #4]
    aa28:	685b      	ldr	r3, [r3, #4]
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d003      	beq.n	aa36 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    aa2e:	687b      	ldr	r3, [r7, #4]
    aa30:	685b      	ldr	r3, [r3, #4]
    aa32:	6878      	ldr	r0, [r7, #4]
    aa34:	4798      	blx	r3
		}
	}
}
    aa36:	bf00      	nop
    aa38:	3710      	adds	r7, #16
    aa3a:	46bd      	mov	sp, r7
    aa3c:	bd80      	pop	{r7, pc}
    aa3e:	bf00      	nop
    aa40:	0000a12d 	.word	0x0000a12d
    aa44:	0000a155 	.word	0x0000a155
    aa48:	0000a1a3 	.word	0x0000a1a3
    aa4c:	0000a16f 	.word	0x0000a16f

0000aa50 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    aa50:	b580      	push	{r7, lr}
    aa52:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    aa54:	4b03      	ldr	r3, [pc, #12]	; (aa64 <TC0_Handler+0x14>)
    aa56:	681b      	ldr	r3, [r3, #0]
    aa58:	4618      	mov	r0, r3
    aa5a:	4b03      	ldr	r3, [pc, #12]	; (aa68 <TC0_Handler+0x18>)
    aa5c:	4798      	blx	r3
}
    aa5e:	bf00      	nop
    aa60:	bd80      	pop	{r7, pc}
    aa62:	bf00      	nop
    aa64:	20002168 	.word	0x20002168
    aa68:	0000a9ad 	.word	0x0000a9ad

0000aa6c <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    aa70:	4b03      	ldr	r3, [pc, #12]	; (aa80 <TC1_Handler+0x14>)
    aa72:	681b      	ldr	r3, [r3, #0]
    aa74:	4618      	mov	r0, r3
    aa76:	4b03      	ldr	r3, [pc, #12]	; (aa84 <TC1_Handler+0x18>)
    aa78:	4798      	blx	r3
}
    aa7a:	bf00      	nop
    aa7c:	bd80      	pop	{r7, pc}
    aa7e:	bf00      	nop
    aa80:	2000216c 	.word	0x2000216c
    aa84:	0000a9ad 	.word	0x0000a9ad

0000aa88 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    aa88:	b580      	push	{r7, lr}
    aa8a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    aa8c:	4b03      	ldr	r3, [pc, #12]	; (aa9c <TC2_Handler+0x14>)
    aa8e:	681b      	ldr	r3, [r3, #0]
    aa90:	4618      	mov	r0, r3
    aa92:	4b03      	ldr	r3, [pc, #12]	; (aaa0 <TC2_Handler+0x18>)
    aa94:	4798      	blx	r3
}
    aa96:	bf00      	nop
    aa98:	bd80      	pop	{r7, pc}
    aa9a:	bf00      	nop
    aa9c:	20002170 	.word	0x20002170
    aaa0:	0000a9ad 	.word	0x0000a9ad

0000aaa4 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    aaa4:	b580      	push	{r7, lr}
    aaa6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    aaa8:	4b03      	ldr	r3, [pc, #12]	; (aab8 <TC3_Handler+0x14>)
    aaaa:	681b      	ldr	r3, [r3, #0]
    aaac:	4618      	mov	r0, r3
    aaae:	4b03      	ldr	r3, [pc, #12]	; (aabc <TC3_Handler+0x18>)
    aab0:	4798      	blx	r3
}
    aab2:	bf00      	nop
    aab4:	bd80      	pop	{r7, pc}
    aab6:	bf00      	nop
    aab8:	20002174 	.word	0x20002174
    aabc:	0000a9ad 	.word	0x0000a9ad

0000aac0 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    aac0:	b580      	push	{r7, lr}
    aac2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    aac4:	4b03      	ldr	r3, [pc, #12]	; (aad4 <TC4_Handler+0x14>)
    aac6:	681b      	ldr	r3, [r3, #0]
    aac8:	4618      	mov	r0, r3
    aaca:	4b03      	ldr	r3, [pc, #12]	; (aad8 <TC4_Handler+0x18>)
    aacc:	4798      	blx	r3
}
    aace:	bf00      	nop
    aad0:	bd80      	pop	{r7, pc}
    aad2:	bf00      	nop
    aad4:	20002178 	.word	0x20002178
    aad8:	0000a9ad 	.word	0x0000a9ad

0000aadc <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    aadc:	b580      	push	{r7, lr}
    aade:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    aae0:	4b03      	ldr	r3, [pc, #12]	; (aaf0 <TC5_Handler+0x14>)
    aae2:	681b      	ldr	r3, [r3, #0]
    aae4:	4618      	mov	r0, r3
    aae6:	4b03      	ldr	r3, [pc, #12]	; (aaf4 <TC5_Handler+0x18>)
    aae8:	4798      	blx	r3
}
    aaea:	bf00      	nop
    aaec:	bd80      	pop	{r7, pc}
    aaee:	bf00      	nop
    aaf0:	2000217c 	.word	0x2000217c
    aaf4:	0000a9ad 	.word	0x0000a9ad

0000aaf8 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    aaf8:	b580      	push	{r7, lr}
    aafa:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    aafc:	4b03      	ldr	r3, [pc, #12]	; (ab0c <TC7_Handler+0x14>)
    aafe:	681b      	ldr	r3, [r3, #0]
    ab00:	4618      	mov	r0, r3
    ab02:	4b03      	ldr	r3, [pc, #12]	; (ab10 <TC7_Handler+0x18>)
    ab04:	4798      	blx	r3
}
    ab06:	bf00      	nop
    ab08:	bd80      	pop	{r7, pc}
    ab0a:	bf00      	nop
    ab0c:	20002180 	.word	0x20002180
    ab10:	0000a9e5 	.word	0x0000a9e5

0000ab14 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    ab14:	b580      	push	{r7, lr}
    ab16:	b084      	sub	sp, #16
    ab18:	af00      	add	r7, sp, #0
    ab1a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    ab1c:	6878      	ldr	r0, [r7, #4]
    ab1e:	4b13      	ldr	r3, [pc, #76]	; (ab6c <get_tc_index+0x58>)
    ab20:	4798      	blx	r3
    ab22:	4603      	mov	r3, r0
    ab24:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    ab26:	2300      	movs	r3, #0
    ab28:	73fb      	strb	r3, [r7, #15]
    ab2a:	e010      	b.n	ab4e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    ab2c:	7bfa      	ldrb	r2, [r7, #15]
    ab2e:	4910      	ldr	r1, [pc, #64]	; (ab70 <get_tc_index+0x5c>)
    ab30:	4613      	mov	r3, r2
    ab32:	009b      	lsls	r3, r3, #2
    ab34:	4413      	add	r3, r2
    ab36:	009b      	lsls	r3, r3, #2
    ab38:	440b      	add	r3, r1
    ab3a:	781b      	ldrb	r3, [r3, #0]
    ab3c:	7bba      	ldrb	r2, [r7, #14]
    ab3e:	429a      	cmp	r2, r3
    ab40:	d102      	bne.n	ab48 <get_tc_index+0x34>
			return i;
    ab42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ab46:	e00d      	b.n	ab64 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    ab48:	7bfb      	ldrb	r3, [r7, #15]
    ab4a:	3301      	adds	r3, #1
    ab4c:	73fb      	strb	r3, [r7, #15]
    ab4e:	7bfb      	ldrb	r3, [r7, #15]
    ab50:	2b06      	cmp	r3, #6
    ab52:	d9eb      	bls.n	ab2c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    ab54:	f240 221a 	movw	r2, #538	; 0x21a
    ab58:	4906      	ldr	r1, [pc, #24]	; (ab74 <get_tc_index+0x60>)
    ab5a:	2000      	movs	r0, #0
    ab5c:	4b06      	ldr	r3, [pc, #24]	; (ab78 <get_tc_index+0x64>)
    ab5e:	4798      	blx	r3
	return -1;
    ab60:	f04f 33ff 	mov.w	r3, #4294967295
}
    ab64:	4618      	mov	r0, r3
    ab66:	3710      	adds	r7, #16
    ab68:	46bd      	mov	sp, r7
    ab6a:	bd80      	pop	{r7, pc}
    ab6c:	0000ac2d 	.word	0x0000ac2d
    ab70:	20000048 	.word	0x20000048
    ab74:	000128dc 	.word	0x000128dc
    ab78:	00005f89 	.word	0x00005f89

0000ab7c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    ab7c:	b480      	push	{r7}
    ab7e:	b083      	sub	sp, #12
    ab80:	af00      	add	r7, sp, #0
    ab82:	6078      	str	r0, [r7, #4]
    ab84:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    ab86:	687b      	ldr	r3, [r7, #4]
    ab88:	4a1a      	ldr	r2, [pc, #104]	; (abf4 <_tc_init_irq_param+0x78>)
    ab8a:	4293      	cmp	r3, r2
    ab8c:	d102      	bne.n	ab94 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    ab8e:	4a1a      	ldr	r2, [pc, #104]	; (abf8 <_tc_init_irq_param+0x7c>)
    ab90:	683b      	ldr	r3, [r7, #0]
    ab92:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	4a19      	ldr	r2, [pc, #100]	; (abfc <_tc_init_irq_param+0x80>)
    ab98:	4293      	cmp	r3, r2
    ab9a:	d102      	bne.n	aba2 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    ab9c:	4a18      	ldr	r2, [pc, #96]	; (ac00 <_tc_init_irq_param+0x84>)
    ab9e:	683b      	ldr	r3, [r7, #0]
    aba0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    aba2:	687b      	ldr	r3, [r7, #4]
    aba4:	4a17      	ldr	r2, [pc, #92]	; (ac04 <_tc_init_irq_param+0x88>)
    aba6:	4293      	cmp	r3, r2
    aba8:	d102      	bne.n	abb0 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    abaa:	4a17      	ldr	r2, [pc, #92]	; (ac08 <_tc_init_irq_param+0x8c>)
    abac:	683b      	ldr	r3, [r7, #0]
    abae:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    abb0:	687b      	ldr	r3, [r7, #4]
    abb2:	4a16      	ldr	r2, [pc, #88]	; (ac0c <_tc_init_irq_param+0x90>)
    abb4:	4293      	cmp	r3, r2
    abb6:	d102      	bne.n	abbe <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    abb8:	4a15      	ldr	r2, [pc, #84]	; (ac10 <_tc_init_irq_param+0x94>)
    abba:	683b      	ldr	r3, [r7, #0]
    abbc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    abbe:	687b      	ldr	r3, [r7, #4]
    abc0:	4a14      	ldr	r2, [pc, #80]	; (ac14 <_tc_init_irq_param+0x98>)
    abc2:	4293      	cmp	r3, r2
    abc4:	d102      	bne.n	abcc <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    abc6:	4a14      	ldr	r2, [pc, #80]	; (ac18 <_tc_init_irq_param+0x9c>)
    abc8:	683b      	ldr	r3, [r7, #0]
    abca:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	4a13      	ldr	r2, [pc, #76]	; (ac1c <_tc_init_irq_param+0xa0>)
    abd0:	4293      	cmp	r3, r2
    abd2:	d102      	bne.n	abda <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    abd4:	4a12      	ldr	r2, [pc, #72]	; (ac20 <_tc_init_irq_param+0xa4>)
    abd6:	683b      	ldr	r3, [r7, #0]
    abd8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    abda:	687b      	ldr	r3, [r7, #4]
    abdc:	4a11      	ldr	r2, [pc, #68]	; (ac24 <_tc_init_irq_param+0xa8>)
    abde:	4293      	cmp	r3, r2
    abe0:	d102      	bne.n	abe8 <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    abe2:	4a11      	ldr	r2, [pc, #68]	; (ac28 <_tc_init_irq_param+0xac>)
    abe4:	683b      	ldr	r3, [r7, #0]
    abe6:	6013      	str	r3, [r2, #0]
	}
}
    abe8:	bf00      	nop
    abea:	370c      	adds	r7, #12
    abec:	46bd      	mov	sp, r7
    abee:	f85d 7b04 	ldr.w	r7, [sp], #4
    abf2:	4770      	bx	lr
    abf4:	40003800 	.word	0x40003800
    abf8:	20002168 	.word	0x20002168
    abfc:	40003c00 	.word	0x40003c00
    ac00:	2000216c 	.word	0x2000216c
    ac04:	4101a000 	.word	0x4101a000
    ac08:	20002170 	.word	0x20002170
    ac0c:	4101c000 	.word	0x4101c000
    ac10:	20002174 	.word	0x20002174
    ac14:	42001400 	.word	0x42001400
    ac18:	20002178 	.word	0x20002178
    ac1c:	42001800 	.word	0x42001800
    ac20:	2000217c 	.word	0x2000217c
    ac24:	43001800 	.word	0x43001800
    ac28:	20002180 	.word	0x20002180

0000ac2c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    ac2c:	b4b0      	push	{r4, r5, r7}
    ac2e:	b08d      	sub	sp, #52	; 0x34
    ac30:	af00      	add	r7, sp, #0
    ac32:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    ac34:	4b13      	ldr	r3, [pc, #76]	; (ac84 <_get_hardware_offset+0x58>)
    ac36:	f107 040c 	add.w	r4, r7, #12
    ac3a:	461d      	mov	r5, r3
    ac3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ac3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ac40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ac44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ac48:	2300      	movs	r3, #0
    ac4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ac4c:	e010      	b.n	ac70 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac50:	009b      	lsls	r3, r3, #2
    ac52:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ac56:	4413      	add	r3, r2
    ac58:	f853 3c24 	ldr.w	r3, [r3, #-36]
    ac5c:	461a      	mov	r2, r3
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	429a      	cmp	r2, r3
    ac62:	d102      	bne.n	ac6a <_get_hardware_offset+0x3e>
			return i;
    ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac66:	b2db      	uxtb	r3, r3
    ac68:	e006      	b.n	ac78 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac6c:	3301      	adds	r3, #1
    ac6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac72:	2b07      	cmp	r3, #7
    ac74:	d9eb      	bls.n	ac4e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    ac76:	2300      	movs	r3, #0
}
    ac78:	4618      	mov	r0, r3
    ac7a:	3734      	adds	r7, #52	; 0x34
    ac7c:	46bd      	mov	sp, r7
    ac7e:	bcb0      	pop	{r4, r5, r7}
    ac80:	4770      	bx	lr
    ac82:	bf00      	nop
    ac84:	000128f0 	.word	0x000128f0

0000ac88 <__NVIC_EnableIRQ>:
{
    ac88:	b480      	push	{r7}
    ac8a:	b083      	sub	sp, #12
    ac8c:	af00      	add	r7, sp, #0
    ac8e:	4603      	mov	r3, r0
    ac90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ac92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ac96:	2b00      	cmp	r3, #0
    ac98:	db0b      	blt.n	acb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ac9a:	4909      	ldr	r1, [pc, #36]	; (acc0 <__NVIC_EnableIRQ+0x38>)
    ac9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    aca0:	095b      	lsrs	r3, r3, #5
    aca2:	88fa      	ldrh	r2, [r7, #6]
    aca4:	f002 021f 	and.w	r2, r2, #31
    aca8:	2001      	movs	r0, #1
    acaa:	fa00 f202 	lsl.w	r2, r0, r2
    acae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    acb2:	bf00      	nop
    acb4:	370c      	adds	r7, #12
    acb6:	46bd      	mov	sp, r7
    acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    acbc:	4770      	bx	lr
    acbe:	bf00      	nop
    acc0:	e000e100 	.word	0xe000e100

0000acc4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    acc4:	b480      	push	{r7}
    acc6:	b087      	sub	sp, #28
    acc8:	af00      	add	r7, sp, #0
    acca:	60f8      	str	r0, [r7, #12]
    accc:	460b      	mov	r3, r1
    acce:	607a      	str	r2, [r7, #4]
    acd0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    acd2:	7afa      	ldrb	r2, [r7, #11]
    acd4:	68f9      	ldr	r1, [r7, #12]
    acd6:	4613      	mov	r3, r2
    acd8:	009b      	lsls	r3, r3, #2
    acda:	4413      	add	r3, r2
    acdc:	009b      	lsls	r3, r3, #2
    acde:	440b      	add	r3, r1
    ace0:	3340      	adds	r3, #64	; 0x40
    ace2:	681b      	ldr	r3, [r3, #0]
    ace4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    ace6:	697a      	ldr	r2, [r7, #20]
    ace8:	687b      	ldr	r3, [r7, #4]
    acea:	4013      	ands	r3, r2
    acec:	617b      	str	r3, [r7, #20]
	return tmp;
    acee:	697b      	ldr	r3, [r7, #20]
}
    acf0:	4618      	mov	r0, r3
    acf2:	371c      	adds	r7, #28
    acf4:	46bd      	mov	sp, r7
    acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    acfa:	4770      	bx	lr

0000acfc <hri_oscctrl_get_STATUS_reg>:
{
    acfc:	b480      	push	{r7}
    acfe:	b085      	sub	sp, #20
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
    ad04:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    ad06:	687b      	ldr	r3, [r7, #4]
    ad08:	691b      	ldr	r3, [r3, #16]
    ad0a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ad0c:	68fa      	ldr	r2, [r7, #12]
    ad0e:	683b      	ldr	r3, [r7, #0]
    ad10:	4013      	ands	r3, r2
    ad12:	60fb      	str	r3, [r7, #12]
	return tmp;
    ad14:	68fb      	ldr	r3, [r7, #12]
}
    ad16:	4618      	mov	r0, r3
    ad18:	3714      	adds	r7, #20
    ad1a:	46bd      	mov	sp, r7
    ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad20:	4770      	bx	lr

0000ad22 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    ad22:	b480      	push	{r7}
    ad24:	b085      	sub	sp, #20
    ad26:	af00      	add	r7, sp, #0
    ad28:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    ad2a:	687b      	ldr	r3, [r7, #4]
    ad2c:	f893 3020 	ldrb.w	r3, [r3, #32]
    ad30:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    ad32:	7bfb      	ldrb	r3, [r7, #15]
    ad34:	f003 0301 	and.w	r3, r3, #1
    ad38:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ad3a:	7bfb      	ldrb	r3, [r7, #15]
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	bf14      	ite	ne
    ad40:	2301      	movne	r3, #1
    ad42:	2300      	moveq	r3, #0
    ad44:	b2db      	uxtb	r3, r3
}
    ad46:	4618      	mov	r0, r3
    ad48:	3714      	adds	r7, #20
    ad4a:	46bd      	mov	sp, r7
    ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad50:	4770      	bx	lr

0000ad52 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    ad52:	b480      	push	{r7}
    ad54:	b083      	sub	sp, #12
    ad56:	af00      	add	r7, sp, #0
    ad58:	6078      	str	r0, [r7, #4]
    ad5a:	460b      	mov	r3, r1
    ad5c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    ad5e:	bf00      	nop
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	789b      	ldrb	r3, [r3, #2]
    ad64:	b2da      	uxtb	r2, r3
    ad66:	78fb      	ldrb	r3, [r7, #3]
    ad68:	4013      	ands	r3, r2
    ad6a:	b2db      	uxtb	r3, r3
    ad6c:	2b00      	cmp	r3, #0
    ad6e:	d1f7      	bne.n	ad60 <hri_usb_wait_for_sync+0xe>
	};
}
    ad70:	bf00      	nop
    ad72:	370c      	adds	r7, #12
    ad74:	46bd      	mov	sp, r7
    ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad7a:	4770      	bx	lr

0000ad7c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    ad7c:	b480      	push	{r7}
    ad7e:	b083      	sub	sp, #12
    ad80:	af00      	add	r7, sp, #0
    ad82:	6078      	str	r0, [r7, #4]
    ad84:	460b      	mov	r3, r1
    ad86:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	789b      	ldrb	r3, [r3, #2]
    ad8c:	b2da      	uxtb	r2, r3
    ad8e:	78fb      	ldrb	r3, [r7, #3]
    ad90:	4013      	ands	r3, r2
    ad92:	b2db      	uxtb	r3, r3
    ad94:	2b00      	cmp	r3, #0
    ad96:	bf14      	ite	ne
    ad98:	2301      	movne	r3, #1
    ad9a:	2300      	moveq	r3, #0
    ad9c:	b2db      	uxtb	r3, r3
}
    ad9e:	4618      	mov	r0, r3
    ada0:	370c      	adds	r7, #12
    ada2:	46bd      	mov	sp, r7
    ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ada8:	4770      	bx	lr

0000adaa <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    adaa:	b480      	push	{r7}
    adac:	b085      	sub	sp, #20
    adae:	af00      	add	r7, sp, #0
    adb0:	6078      	str	r0, [r7, #4]
    adb2:	460b      	mov	r3, r1
    adb4:	70fb      	strb	r3, [r7, #3]
    adb6:	4613      	mov	r3, r2
    adb8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    adba:	78fb      	ldrb	r3, [r7, #3]
    adbc:	687a      	ldr	r2, [r7, #4]
    adbe:	3308      	adds	r3, #8
    adc0:	015b      	lsls	r3, r3, #5
    adc2:	4413      	add	r3, r2
    adc4:	3307      	adds	r3, #7
    adc6:	781b      	ldrb	r3, [r3, #0]
    adc8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    adca:	7bfa      	ldrb	r2, [r7, #15]
    adcc:	78bb      	ldrb	r3, [r7, #2]
    adce:	4013      	ands	r3, r2
    add0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    add2:	7bfb      	ldrb	r3, [r7, #15]
}
    add4:	4618      	mov	r0, r3
    add6:	3714      	adds	r7, #20
    add8:	46bd      	mov	sp, r7
    adda:	f85d 7b04 	ldr.w	r7, [sp], #4
    adde:	4770      	bx	lr

0000ade0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    ade0:	b480      	push	{r7}
    ade2:	b083      	sub	sp, #12
    ade4:	af00      	add	r7, sp, #0
    ade6:	6078      	str	r0, [r7, #4]
    ade8:	460b      	mov	r3, r1
    adea:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    adec:	78fb      	ldrb	r3, [r7, #3]
    adee:	687a      	ldr	r2, [r7, #4]
    adf0:	3308      	adds	r3, #8
    adf2:	015b      	lsls	r3, r3, #5
    adf4:	4413      	add	r3, r2
    adf6:	3307      	adds	r3, #7
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	b2db      	uxtb	r3, r3
}
    adfc:	4618      	mov	r0, r3
    adfe:	370c      	adds	r7, #12
    ae00:	46bd      	mov	sp, r7
    ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae06:	4770      	bx	lr

0000ae08 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    ae08:	b480      	push	{r7}
    ae0a:	b083      	sub	sp, #12
    ae0c:	af00      	add	r7, sp, #0
    ae0e:	6078      	str	r0, [r7, #4]
    ae10:	460b      	mov	r3, r1
    ae12:	70fb      	strb	r3, [r7, #3]
    ae14:	4613      	mov	r3, r2
    ae16:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ae18:	78fb      	ldrb	r3, [r7, #3]
    ae1a:	687a      	ldr	r2, [r7, #4]
    ae1c:	3308      	adds	r3, #8
    ae1e:	015b      	lsls	r3, r3, #5
    ae20:	4413      	add	r3, r2
    ae22:	3307      	adds	r3, #7
    ae24:	78ba      	ldrb	r2, [r7, #2]
    ae26:	701a      	strb	r2, [r3, #0]
}
    ae28:	bf00      	nop
    ae2a:	370c      	adds	r7, #12
    ae2c:	46bd      	mov	sp, r7
    ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae32:	4770      	bx	lr

0000ae34 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    ae34:	b480      	push	{r7}
    ae36:	b083      	sub	sp, #12
    ae38:	af00      	add	r7, sp, #0
    ae3a:	6078      	str	r0, [r7, #4]
    ae3c:	460b      	mov	r3, r1
    ae3e:	70fb      	strb	r3, [r7, #3]
    ae40:	4613      	mov	r3, r2
    ae42:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ae44:	78fb      	ldrb	r3, [r7, #3]
    ae46:	687a      	ldr	r2, [r7, #4]
    ae48:	3308      	adds	r3, #8
    ae4a:	015b      	lsls	r3, r3, #5
    ae4c:	4413      	add	r3, r2
    ae4e:	3305      	adds	r3, #5
    ae50:	78ba      	ldrb	r2, [r7, #2]
    ae52:	701a      	strb	r2, [r3, #0]
}
    ae54:	bf00      	nop
    ae56:	370c      	adds	r7, #12
    ae58:	46bd      	mov	sp, r7
    ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae5e:	4770      	bx	lr

0000ae60 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    ae60:	b480      	push	{r7}
    ae62:	b083      	sub	sp, #12
    ae64:	af00      	add	r7, sp, #0
    ae66:	6078      	str	r0, [r7, #4]
    ae68:	460b      	mov	r3, r1
    ae6a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ae6c:	78fb      	ldrb	r3, [r7, #3]
    ae6e:	687a      	ldr	r2, [r7, #4]
    ae70:	3308      	adds	r3, #8
    ae72:	015b      	lsls	r3, r3, #5
    ae74:	4413      	add	r3, r2
    ae76:	3306      	adds	r3, #6
    ae78:	781b      	ldrb	r3, [r3, #0]
    ae7a:	b2db      	uxtb	r3, r3
}
    ae7c:	4618      	mov	r0, r3
    ae7e:	370c      	adds	r7, #12
    ae80:	46bd      	mov	sp, r7
    ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae86:	4770      	bx	lr

0000ae88 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    ae88:	b480      	push	{r7}
    ae8a:	b083      	sub	sp, #12
    ae8c:	af00      	add	r7, sp, #0
    ae8e:	6078      	str	r0, [r7, #4]
    ae90:	460b      	mov	r3, r1
    ae92:	70fb      	strb	r3, [r7, #3]
    ae94:	4613      	mov	r3, r2
    ae96:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ae98:	78fb      	ldrb	r3, [r7, #3]
    ae9a:	687a      	ldr	r2, [r7, #4]
    ae9c:	3308      	adds	r3, #8
    ae9e:	015b      	lsls	r3, r3, #5
    aea0:	4413      	add	r3, r2
    aea2:	3304      	adds	r3, #4
    aea4:	78ba      	ldrb	r2, [r7, #2]
    aea6:	701a      	strb	r2, [r3, #0]
}
    aea8:	bf00      	nop
    aeaa:	370c      	adds	r7, #12
    aeac:	46bd      	mov	sp, r7
    aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeb2:	4770      	bx	lr

0000aeb4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    aeb4:	b480      	push	{r7}
    aeb6:	b083      	sub	sp, #12
    aeb8:	af00      	add	r7, sp, #0
    aeba:	6078      	str	r0, [r7, #4]
    aebc:	460b      	mov	r3, r1
    aebe:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    aec0:	78fb      	ldrb	r3, [r7, #3]
    aec2:	687a      	ldr	r2, [r7, #4]
    aec4:	015b      	lsls	r3, r3, #5
    aec6:	4413      	add	r3, r2
    aec8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    aecc:	2210      	movs	r2, #16
    aece:	701a      	strb	r2, [r3, #0]
}
    aed0:	bf00      	nop
    aed2:	370c      	adds	r7, #12
    aed4:	46bd      	mov	sp, r7
    aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeda:	4770      	bx	lr

0000aedc <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    aedc:	b480      	push	{r7}
    aede:	b083      	sub	sp, #12
    aee0:	af00      	add	r7, sp, #0
    aee2:	6078      	str	r0, [r7, #4]
    aee4:	460b      	mov	r3, r1
    aee6:	70fb      	strb	r3, [r7, #3]
    aee8:	4613      	mov	r3, r2
    aeea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    aeec:	78fb      	ldrb	r3, [r7, #3]
    aeee:	687a      	ldr	r2, [r7, #4]
    aef0:	015b      	lsls	r3, r3, #5
    aef2:	4413      	add	r3, r2
    aef4:	f203 1309 	addw	r3, r3, #265	; 0x109
    aef8:	78ba      	ldrb	r2, [r7, #2]
    aefa:	701a      	strb	r2, [r3, #0]
}
    aefc:	bf00      	nop
    aefe:	370c      	adds	r7, #12
    af00:	46bd      	mov	sp, r7
    af02:	f85d 7b04 	ldr.w	r7, [sp], #4
    af06:	4770      	bx	lr

0000af08 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    af08:	b480      	push	{r7}
    af0a:	b083      	sub	sp, #12
    af0c:	af00      	add	r7, sp, #0
    af0e:	6078      	str	r0, [r7, #4]
    af10:	460b      	mov	r3, r1
    af12:	70fb      	strb	r3, [r7, #3]
    af14:	4613      	mov	r3, r2
    af16:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    af18:	78fb      	ldrb	r3, [r7, #3]
    af1a:	687a      	ldr	r2, [r7, #4]
    af1c:	015b      	lsls	r3, r3, #5
    af1e:	4413      	add	r3, r2
    af20:	f503 7384 	add.w	r3, r3, #264	; 0x108
    af24:	78ba      	ldrb	r2, [r7, #2]
    af26:	701a      	strb	r2, [r3, #0]
}
    af28:	bf00      	nop
    af2a:	370c      	adds	r7, #12
    af2c:	46bd      	mov	sp, r7
    af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    af32:	4770      	bx	lr

0000af34 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    af34:	b480      	push	{r7}
    af36:	b085      	sub	sp, #20
    af38:	af00      	add	r7, sp, #0
    af3a:	6078      	str	r0, [r7, #4]
    af3c:	460b      	mov	r3, r1
    af3e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    af40:	78fb      	ldrb	r3, [r7, #3]
    af42:	687a      	ldr	r2, [r7, #4]
    af44:	3308      	adds	r3, #8
    af46:	015b      	lsls	r3, r3, #5
    af48:	4413      	add	r3, r2
    af4a:	781b      	ldrb	r3, [r3, #0]
    af4c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    af4e:	7bfb      	ldrb	r3, [r7, #15]
    af50:	f003 0307 	and.w	r3, r3, #7
    af54:	73fb      	strb	r3, [r7, #15]
	return tmp;
    af56:	7bfb      	ldrb	r3, [r7, #15]
}
    af58:	4618      	mov	r0, r3
    af5a:	3714      	adds	r7, #20
    af5c:	46bd      	mov	sp, r7
    af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    af62:	4770      	bx	lr

0000af64 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    af64:	b480      	push	{r7}
    af66:	b085      	sub	sp, #20
    af68:	af00      	add	r7, sp, #0
    af6a:	6078      	str	r0, [r7, #4]
    af6c:	460b      	mov	r3, r1
    af6e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    af70:	78fb      	ldrb	r3, [r7, #3]
    af72:	687a      	ldr	r2, [r7, #4]
    af74:	3308      	adds	r3, #8
    af76:	015b      	lsls	r3, r3, #5
    af78:	4413      	add	r3, r2
    af7a:	781b      	ldrb	r3, [r3, #0]
    af7c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    af7e:	7bfb      	ldrb	r3, [r7, #15]
    af80:	091b      	lsrs	r3, r3, #4
    af82:	b2db      	uxtb	r3, r3
    af84:	f003 0307 	and.w	r3, r3, #7
    af88:	73fb      	strb	r3, [r7, #15]
	return tmp;
    af8a:	7bfb      	ldrb	r3, [r7, #15]
}
    af8c:	4618      	mov	r0, r3
    af8e:	3714      	adds	r7, #20
    af90:	46bd      	mov	sp, r7
    af92:	f85d 7b04 	ldr.w	r7, [sp], #4
    af96:	4770      	bx	lr

0000af98 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    af98:	b480      	push	{r7}
    af9a:	b083      	sub	sp, #12
    af9c:	af00      	add	r7, sp, #0
    af9e:	6078      	str	r0, [r7, #4]
    afa0:	460b      	mov	r3, r1
    afa2:	70fb      	strb	r3, [r7, #3]
    afa4:	4613      	mov	r3, r2
    afa6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    afa8:	78fb      	ldrb	r3, [r7, #3]
    afaa:	687a      	ldr	r2, [r7, #4]
    afac:	3308      	adds	r3, #8
    afae:	015b      	lsls	r3, r3, #5
    afb0:	4413      	add	r3, r2
    afb2:	78ba      	ldrb	r2, [r7, #2]
    afb4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    afb6:	bf00      	nop
    afb8:	370c      	adds	r7, #12
    afba:	46bd      	mov	sp, r7
    afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    afc0:	4770      	bx	lr

0000afc2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    afc2:	b480      	push	{r7}
    afc4:	b083      	sub	sp, #12
    afc6:	af00      	add	r7, sp, #0
    afc8:	6078      	str	r0, [r7, #4]
    afca:	460b      	mov	r3, r1
    afcc:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    afce:	78fb      	ldrb	r3, [r7, #3]
    afd0:	687a      	ldr	r2, [r7, #4]
    afd2:	3308      	adds	r3, #8
    afd4:	015b      	lsls	r3, r3, #5
    afd6:	4413      	add	r3, r2
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	b2db      	uxtb	r3, r3
}
    afdc:	4618      	mov	r0, r3
    afde:	370c      	adds	r7, #12
    afe0:	46bd      	mov	sp, r7
    afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    afe6:	4770      	bx	lr

0000afe8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    afe8:	b480      	push	{r7}
    afea:	b083      	sub	sp, #12
    afec:	af00      	add	r7, sp, #0
    afee:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    aff0:	687b      	ldr	r3, [r7, #4]
    aff2:	8b9b      	ldrh	r3, [r3, #28]
    aff4:	b29b      	uxth	r3, r3
}
    aff6:	4618      	mov	r0, r3
    aff8:	370c      	adds	r7, #12
    affa:	46bd      	mov	sp, r7
    affc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b000:	4770      	bx	lr

0000b002 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    b002:	b480      	push	{r7}
    b004:	b083      	sub	sp, #12
    b006:	af00      	add	r7, sp, #0
    b008:	6078      	str	r0, [r7, #4]
    b00a:	460b      	mov	r3, r1
    b00c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    b00e:	687b      	ldr	r3, [r7, #4]
    b010:	887a      	ldrh	r2, [r7, #2]
    b012:	839a      	strh	r2, [r3, #28]
}
    b014:	bf00      	nop
    b016:	370c      	adds	r7, #12
    b018:	46bd      	mov	sp, r7
    b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b01e:	4770      	bx	lr

0000b020 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    b020:	b480      	push	{r7}
    b022:	b083      	sub	sp, #12
    b024:	af00      	add	r7, sp, #0
    b026:	6078      	str	r0, [r7, #4]
    b028:	460b      	mov	r3, r1
    b02a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    b02c:	687b      	ldr	r3, [r7, #4]
    b02e:	887a      	ldrh	r2, [r7, #2]
    b030:	831a      	strh	r2, [r3, #24]
}
    b032:	bf00      	nop
    b034:	370c      	adds	r7, #12
    b036:	46bd      	mov	sp, r7
    b038:	f85d 7b04 	ldr.w	r7, [sp], #4
    b03c:	4770      	bx	lr

0000b03e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    b03e:	b480      	push	{r7}
    b040:	b083      	sub	sp, #12
    b042:	af00      	add	r7, sp, #0
    b044:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    b046:	687b      	ldr	r3, [r7, #4]
    b048:	8b1b      	ldrh	r3, [r3, #24]
    b04a:	b29b      	uxth	r3, r3
}
    b04c:	4618      	mov	r0, r3
    b04e:	370c      	adds	r7, #12
    b050:	46bd      	mov	sp, r7
    b052:	f85d 7b04 	ldr.w	r7, [sp], #4
    b056:	4770      	bx	lr

0000b058 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    b058:	b480      	push	{r7}
    b05a:	b083      	sub	sp, #12
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
    b060:	460b      	mov	r3, r1
    b062:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    b064:	687b      	ldr	r3, [r7, #4]
    b066:	887a      	ldrh	r2, [r7, #2]
    b068:	829a      	strh	r2, [r3, #20]
}
    b06a:	bf00      	nop
    b06c:	370c      	adds	r7, #12
    b06e:	46bd      	mov	sp, r7
    b070:	f85d 7b04 	ldr.w	r7, [sp], #4
    b074:	4770      	bx	lr

0000b076 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    b076:	b480      	push	{r7}
    b078:	b085      	sub	sp, #20
    b07a:	af00      	add	r7, sp, #0
    b07c:	6078      	str	r0, [r7, #4]
    b07e:	460b      	mov	r3, r1
    b080:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    b082:	687b      	ldr	r3, [r7, #4]
    b084:	789b      	ldrb	r3, [r3, #2]
    b086:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b088:	7bfa      	ldrb	r2, [r7, #15]
    b08a:	78fb      	ldrb	r3, [r7, #3]
    b08c:	4013      	ands	r3, r2
    b08e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b090:	7bfb      	ldrb	r3, [r7, #15]
}
    b092:	4618      	mov	r0, r3
    b094:	3714      	adds	r7, #20
    b096:	46bd      	mov	sp, r7
    b098:	f85d 7b04 	ldr.w	r7, [sp], #4
    b09c:	4770      	bx	lr
	...

0000b0a0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b0a0:	b580      	push	{r7, lr}
    b0a2:	b082      	sub	sp, #8
    b0a4:	af00      	add	r7, sp, #0
    b0a6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    b0a8:	687b      	ldr	r3, [r7, #4]
    b0aa:	781b      	ldrb	r3, [r3, #0]
    b0ac:	b2db      	uxtb	r3, r3
    b0ae:	f023 0302 	bic.w	r3, r3, #2
    b0b2:	b2da      	uxtb	r2, r3
    b0b4:	687b      	ldr	r3, [r7, #4]
    b0b6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    b0b8:	2103      	movs	r1, #3
    b0ba:	6878      	ldr	r0, [r7, #4]
    b0bc:	4b02      	ldr	r3, [pc, #8]	; (b0c8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    b0be:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    b0c0:	bf00      	nop
    b0c2:	3708      	adds	r7, #8
    b0c4:	46bd      	mov	sp, r7
    b0c6:	bd80      	pop	{r7, pc}
    b0c8:	0000ad53 	.word	0x0000ad53

0000b0cc <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    b0cc:	b580      	push	{r7, lr}
    b0ce:	b084      	sub	sp, #16
    b0d0:	af00      	add	r7, sp, #0
    b0d2:	6078      	str	r0, [r7, #4]
    b0d4:	460b      	mov	r3, r1
    b0d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    b0d8:	2103      	movs	r1, #3
    b0da:	6878      	ldr	r0, [r7, #4]
    b0dc:	4b06      	ldr	r3, [pc, #24]	; (b0f8 <hri_usb_get_CTRLA_reg+0x2c>)
    b0de:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    b0e0:	687b      	ldr	r3, [r7, #4]
    b0e2:	781b      	ldrb	r3, [r3, #0]
    b0e4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    b0e6:	7bfa      	ldrb	r2, [r7, #15]
    b0e8:	78fb      	ldrb	r3, [r7, #3]
    b0ea:	4013      	ands	r3, r2
    b0ec:	73fb      	strb	r3, [r7, #15]
	return tmp;
    b0ee:	7bfb      	ldrb	r3, [r7, #15]
}
    b0f0:	4618      	mov	r0, r3
    b0f2:	3710      	adds	r7, #16
    b0f4:	46bd      	mov	sp, r7
    b0f6:	bd80      	pop	{r7, pc}
    b0f8:	0000ad53 	.word	0x0000ad53

0000b0fc <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    b0fc:	b580      	push	{r7, lr}
    b0fe:	b082      	sub	sp, #8
    b100:	af00      	add	r7, sp, #0
    b102:	6078      	str	r0, [r7, #4]
    b104:	460b      	mov	r3, r1
    b106:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	78fa      	ldrb	r2, [r7, #3]
    b10c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    b10e:	2103      	movs	r1, #3
    b110:	6878      	ldr	r0, [r7, #4]
    b112:	4b03      	ldr	r3, [pc, #12]	; (b120 <hri_usb_write_CTRLA_reg+0x24>)
    b114:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    b116:	bf00      	nop
    b118:	3708      	adds	r7, #8
    b11a:	46bd      	mov	sp, r7
    b11c:	bd80      	pop	{r7, pc}
    b11e:	bf00      	nop
    b120:	0000ad53 	.word	0x0000ad53

0000b124 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    b124:	b580      	push	{r7, lr}
    b126:	b082      	sub	sp, #8
    b128:	af00      	add	r7, sp, #0
    b12a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    b12c:	2103      	movs	r1, #3
    b12e:	6878      	ldr	r0, [r7, #4]
    b130:	4b04      	ldr	r3, [pc, #16]	; (b144 <hri_usb_read_CTRLA_reg+0x20>)
    b132:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    b134:	687b      	ldr	r3, [r7, #4]
    b136:	781b      	ldrb	r3, [r3, #0]
    b138:	b2db      	uxtb	r3, r3
}
    b13a:	4618      	mov	r0, r3
    b13c:	3708      	adds	r7, #8
    b13e:	46bd      	mov	sp, r7
    b140:	bd80      	pop	{r7, pc}
    b142:	bf00      	nop
    b144:	0000ad53 	.word	0x0000ad53

0000b148 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    b148:	b480      	push	{r7}
    b14a:	b083      	sub	sp, #12
    b14c:	af00      	add	r7, sp, #0
    b14e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    b150:	687b      	ldr	r3, [r7, #4]
    b152:	891b      	ldrh	r3, [r3, #8]
    b154:	b29b      	uxth	r3, r3
    b156:	f023 0301 	bic.w	r3, r3, #1
    b15a:	b29a      	uxth	r2, r3
    b15c:	687b      	ldr	r3, [r7, #4]
    b15e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    b160:	bf00      	nop
    b162:	370c      	adds	r7, #12
    b164:	46bd      	mov	sp, r7
    b166:	f85d 7b04 	ldr.w	r7, [sp], #4
    b16a:	4770      	bx	lr

0000b16c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    b16c:	b480      	push	{r7}
    b16e:	b083      	sub	sp, #12
    b170:	af00      	add	r7, sp, #0
    b172:	6078      	str	r0, [r7, #4]
    b174:	460b      	mov	r3, r1
    b176:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    b178:	687b      	ldr	r3, [r7, #4]
    b17a:	887a      	ldrh	r2, [r7, #2]
    b17c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    b17e:	bf00      	nop
    b180:	370c      	adds	r7, #12
    b182:	46bd      	mov	sp, r7
    b184:	f85d 7b04 	ldr.w	r7, [sp], #4
    b188:	4770      	bx	lr

0000b18a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    b18a:	b480      	push	{r7}
    b18c:	b083      	sub	sp, #12
    b18e:	af00      	add	r7, sp, #0
    b190:	6078      	str	r0, [r7, #4]
    b192:	460b      	mov	r3, r1
    b194:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    b196:	687b      	ldr	r3, [r7, #4]
    b198:	78fa      	ldrb	r2, [r7, #3]
    b19a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    b19c:	bf00      	nop
    b19e:	370c      	adds	r7, #12
    b1a0:	46bd      	mov	sp, r7
    b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1a6:	4770      	bx	lr

0000b1a8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    b1a8:	b480      	push	{r7}
    b1aa:	b083      	sub	sp, #12
    b1ac:	af00      	add	r7, sp, #0
    b1ae:	6078      	str	r0, [r7, #4]
    b1b0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    b1b2:	687b      	ldr	r3, [r7, #4]
    b1b4:	683a      	ldr	r2, [r7, #0]
    b1b6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    b1b8:	bf00      	nop
    b1ba:	370c      	adds	r7, #12
    b1bc:	46bd      	mov	sp, r7
    b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1c2:	4770      	bx	lr

0000b1c4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    b1c4:	b480      	push	{r7}
    b1c6:	b083      	sub	sp, #12
    b1c8:	af00      	add	r7, sp, #0
    b1ca:	6078      	str	r0, [r7, #4]
    b1cc:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    b1ce:	2300      	movs	r3, #0
}
    b1d0:	4618      	mov	r0, r3
    b1d2:	370c      	adds	r7, #12
    b1d4:	46bd      	mov	sp, r7
    b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1da:	4770      	bx	lr

0000b1dc <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    b1dc:	b480      	push	{r7}
    b1de:	b085      	sub	sp, #20
    b1e0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    b1e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b1e6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    b1e8:	4b28      	ldr	r3, [pc, #160]	; (b28c <_usb_load_calib+0xb0>)
    b1ea:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    b1ec:	f003 031f 	and.w	r3, r3, #31
    b1f0:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    b1f2:	4b26      	ldr	r3, [pc, #152]	; (b28c <_usb_load_calib+0xb0>)
    b1f4:	681b      	ldr	r3, [r3, #0]
    b1f6:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    b1f8:	f003 031f 	and.w	r3, r3, #31
    b1fc:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    b1fe:	4b23      	ldr	r3, [pc, #140]	; (b28c <_usb_load_calib+0xb0>)
    b200:	681b      	ldr	r3, [r3, #0]
    b202:	0a9b      	lsrs	r3, r3, #10
    b204:	f003 0307 	and.w	r3, r3, #7
    b208:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    b20a:	68fb      	ldr	r3, [r7, #12]
    b20c:	2b00      	cmp	r3, #0
    b20e:	d002      	beq.n	b216 <_usb_load_calib+0x3a>
    b210:	68fb      	ldr	r3, [r7, #12]
    b212:	2b1f      	cmp	r3, #31
    b214:	d101      	bne.n	b21a <_usb_load_calib+0x3e>
		pad_transn = 9;
    b216:	2309      	movs	r3, #9
    b218:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    b21a:	68bb      	ldr	r3, [r7, #8]
    b21c:	2b00      	cmp	r3, #0
    b21e:	d002      	beq.n	b226 <_usb_load_calib+0x4a>
    b220:	68bb      	ldr	r3, [r7, #8]
    b222:	2b1f      	cmp	r3, #31
    b224:	d101      	bne.n	b22a <_usb_load_calib+0x4e>
		pad_transp = 25;
    b226:	2319      	movs	r3, #25
    b228:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    b22a:	687b      	ldr	r3, [r7, #4]
    b22c:	2b00      	cmp	r3, #0
    b22e:	d002      	beq.n	b236 <_usb_load_calib+0x5a>
    b230:	687b      	ldr	r3, [r7, #4]
    b232:	2b07      	cmp	r3, #7
    b234:	d101      	bne.n	b23a <_usb_load_calib+0x5e>
		pad_trim = 6;
    b236:	2306      	movs	r3, #6
    b238:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    b23a:	68fb      	ldr	r3, [r7, #12]
    b23c:	b29b      	uxth	r3, r3
    b23e:	019b      	lsls	r3, r3, #6
    b240:	b29b      	uxth	r3, r3
    b242:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    b246:	b29a      	uxth	r2, r3
    b248:	68bb      	ldr	r3, [r7, #8]
    b24a:	b29b      	uxth	r3, r3
    b24c:	f003 031f 	and.w	r3, r3, #31
    b250:	b29b      	uxth	r3, r3
    b252:	4313      	orrs	r3, r2
    b254:	b29a      	uxth	r2, r3
    b256:	687b      	ldr	r3, [r7, #4]
    b258:	b29b      	uxth	r3, r3
    b25a:	031b      	lsls	r3, r3, #12
    b25c:	b29b      	uxth	r3, r3
    b25e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    b262:	b29b      	uxth	r3, r3
    b264:	4313      	orrs	r3, r2
    b266:	b29a      	uxth	r2, r3
    b268:	683b      	ldr	r3, [r7, #0]
    b26a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    b26c:	683a      	ldr	r2, [r7, #0]
    b26e:	78d3      	ldrb	r3, [r2, #3]
    b270:	f043 0303 	orr.w	r3, r3, #3
    b274:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    b276:	683a      	ldr	r2, [r7, #0]
    b278:	78d3      	ldrb	r3, [r2, #3]
    b27a:	f043 030c 	orr.w	r3, r3, #12
    b27e:	70d3      	strb	r3, [r2, #3]
}
    b280:	bf00      	nop
    b282:	3714      	adds	r7, #20
    b284:	46bd      	mov	sp, r7
    b286:	f85d 7b04 	ldr.w	r7, [sp], #4
    b28a:	4770      	bx	lr
    b28c:	00800084 	.word	0x00800084

0000b290 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    b290:	b580      	push	{r7, lr}
    b292:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    b294:	bf00      	nop
    b296:	2203      	movs	r2, #3
    b298:	2100      	movs	r1, #0
    b29a:	4804      	ldr	r0, [pc, #16]	; (b2ac <_usb_d_dev_wait_dpll_rdy+0x1c>)
    b29c:	4b04      	ldr	r3, [pc, #16]	; (b2b0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    b29e:	4798      	blx	r3
    b2a0:	4603      	mov	r3, r0
    b2a2:	2b03      	cmp	r3, #3
    b2a4:	d1f7      	bne.n	b296 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    b2a6:	bf00      	nop
    b2a8:	bd80      	pop	{r7, pc}
    b2aa:	bf00      	nop
    b2ac:	40001000 	.word	0x40001000
    b2b0:	0000acc5 	.word	0x0000acc5

0000b2b4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    b2b4:	b580      	push	{r7, lr}
    b2b6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    b2b8:	480e      	ldr	r0, [pc, #56]	; (b2f4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    b2ba:	4b0f      	ldr	r3, [pc, #60]	; (b2f8 <_usb_d_dev_wait_dfll_rdy+0x44>)
    b2bc:	4798      	blx	r3
    b2be:	4603      	mov	r3, r0
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d00a      	beq.n	b2da <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    b2c4:	bf00      	nop
    b2c6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    b2ca:	480a      	ldr	r0, [pc, #40]	; (b2f4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    b2cc:	4b0b      	ldr	r3, [pc, #44]	; (b2fc <_usb_d_dev_wait_dfll_rdy+0x48>)
    b2ce:	4798      	blx	r3
    b2d0:	4603      	mov	r3, r0
    b2d2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    b2d6:	d1f6      	bne.n	b2c6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    b2d8:	e009      	b.n	b2ee <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    b2da:	bf00      	nop
    b2dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    b2e0:	4804      	ldr	r0, [pc, #16]	; (b2f4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    b2e2:	4b06      	ldr	r3, [pc, #24]	; (b2fc <_usb_d_dev_wait_dfll_rdy+0x48>)
    b2e4:	4798      	blx	r3
    b2e6:	4603      	mov	r3, r0
    b2e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b2ec:	d1f6      	bne.n	b2dc <_usb_d_dev_wait_dfll_rdy+0x28>
}
    b2ee:	bf00      	nop
    b2f0:	bd80      	pop	{r7, pc}
    b2f2:	bf00      	nop
    b2f4:	40001000 	.word	0x40001000
    b2f8:	0000ad23 	.word	0x0000ad23
    b2fc:	0000acfd 	.word	0x0000acfd

0000b300 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    b300:	b580      	push	{r7, lr}
    b302:	b082      	sub	sp, #8
    b304:	af00      	add	r7, sp, #0
    b306:	4603      	mov	r3, r0
    b308:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    b30a:	79fb      	ldrb	r3, [r7, #7]
    b30c:	2b00      	cmp	r3, #0
    b30e:	d102      	bne.n	b316 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    b310:	4b05      	ldr	r3, [pc, #20]	; (b328 <_usb_d_dev_wait_clk_rdy+0x28>)
    b312:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    b314:	e004      	b.n	b320 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    b316:	79fb      	ldrb	r3, [r7, #7]
    b318:	2b01      	cmp	r3, #1
    b31a:	d101      	bne.n	b320 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    b31c:	4b03      	ldr	r3, [pc, #12]	; (b32c <_usb_d_dev_wait_clk_rdy+0x2c>)
    b31e:	4798      	blx	r3
}
    b320:	bf00      	nop
    b322:	3708      	adds	r7, #8
    b324:	46bd      	mov	sp, r7
    b326:	bd80      	pop	{r7, pc}
    b328:	0000b2b5 	.word	0x0000b2b5
    b32c:	0000b291 	.word	0x0000b291

0000b330 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    b330:	b580      	push	{r7, lr}
    b332:	b082      	sub	sp, #8
    b334:	af00      	add	r7, sp, #0
    b336:	4603      	mov	r3, r0
    b338:	6039      	str	r1, [r7, #0]
    b33a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    b33c:	683b      	ldr	r3, [r7, #0]
    b33e:	b2da      	uxtb	r2, r3
    b340:	79fb      	ldrb	r3, [r7, #7]
    b342:	4619      	mov	r1, r3
    b344:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b348:	4b02      	ldr	r3, [pc, #8]	; (b354 <_usbd_ep_int_ack+0x24>)
    b34a:	4798      	blx	r3
}
    b34c:	bf00      	nop
    b34e:	3708      	adds	r7, #8
    b350:	46bd      	mov	sp, r7
    b352:	bd80      	pop	{r7, pc}
    b354:	0000ae09 	.word	0x0000ae09

0000b358 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    b358:	b580      	push	{r7, lr}
    b35a:	b082      	sub	sp, #8
    b35c:	af00      	add	r7, sp, #0
    b35e:	4603      	mov	r3, r0
    b360:	6039      	str	r1, [r7, #0]
    b362:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    b364:	683b      	ldr	r3, [r7, #0]
    b366:	b2da      	uxtb	r2, r3
    b368:	79fb      	ldrb	r3, [r7, #7]
    b36a:	4619      	mov	r1, r3
    b36c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b370:	4b02      	ldr	r3, [pc, #8]	; (b37c <_usbd_ep_int_en+0x24>)
    b372:	4798      	blx	r3
}
    b374:	bf00      	nop
    b376:	3708      	adds	r7, #8
    b378:	46bd      	mov	sp, r7
    b37a:	bd80      	pop	{r7, pc}
    b37c:	0000aedd 	.word	0x0000aedd

0000b380 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    b380:	b580      	push	{r7, lr}
    b382:	b082      	sub	sp, #8
    b384:	af00      	add	r7, sp, #0
    b386:	4603      	mov	r3, r0
    b388:	6039      	str	r1, [r7, #0]
    b38a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    b38c:	683b      	ldr	r3, [r7, #0]
    b38e:	b2da      	uxtb	r2, r3
    b390:	79fb      	ldrb	r3, [r7, #7]
    b392:	4619      	mov	r1, r3
    b394:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b398:	4b02      	ldr	r3, [pc, #8]	; (b3a4 <_usbd_ep_int_dis+0x24>)
    b39a:	4798      	blx	r3
}
    b39c:	bf00      	nop
    b39e:	3708      	adds	r7, #8
    b3a0:	46bd      	mov	sp, r7
    b3a2:	bd80      	pop	{r7, pc}
    b3a4:	0000af09 	.word	0x0000af09

0000b3a8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    b3a8:	b580      	push	{r7, lr}
    b3aa:	b082      	sub	sp, #8
    b3ac:	af00      	add	r7, sp, #0
    b3ae:	4603      	mov	r3, r0
    b3b0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    b3b2:	79fb      	ldrb	r3, [r7, #7]
    b3b4:	4619      	mov	r1, r3
    b3b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b3ba:	4b06      	ldr	r3, [pc, #24]	; (b3d4 <_usbd_ep_is_ctrl+0x2c>)
    b3bc:	4798      	blx	r3
    b3be:	4603      	mov	r3, r0
    b3c0:	2b11      	cmp	r3, #17
    b3c2:	bf0c      	ite	eq
    b3c4:	2301      	moveq	r3, #1
    b3c6:	2300      	movne	r3, #0
    b3c8:	b2db      	uxtb	r3, r3
}
    b3ca:	4618      	mov	r0, r3
    b3cc:	3708      	adds	r7, #8
    b3ce:	46bd      	mov	sp, r7
    b3d0:	bd80      	pop	{r7, pc}
    b3d2:	bf00      	nop
    b3d4:	0000afc3 	.word	0x0000afc3

0000b3d8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    b3d8:	b580      	push	{r7, lr}
    b3da:	b082      	sub	sp, #8
    b3dc:	af00      	add	r7, sp, #0
    b3de:	4603      	mov	r3, r0
    b3e0:	71fb      	strb	r3, [r7, #7]
    b3e2:	460b      	mov	r3, r1
    b3e4:	71bb      	strb	r3, [r7, #6]
    b3e6:	4613      	mov	r3, r2
    b3e8:	717b      	strb	r3, [r7, #5]
	if (st) {
    b3ea:	797b      	ldrb	r3, [r7, #5]
    b3ec:	2b00      	cmp	r3, #0
    b3ee:	d00b      	beq.n	b408 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b3f0:	79bb      	ldrb	r3, [r7, #6]
    b3f2:	2210      	movs	r2, #16
    b3f4:	fa02 f303 	lsl.w	r3, r2, r3
    b3f8:	b2da      	uxtb	r2, r3
    b3fa:	79fb      	ldrb	r3, [r7, #7]
    b3fc:	4619      	mov	r1, r3
    b3fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b402:	4b09      	ldr	r3, [pc, #36]	; (b428 <_usbd_ep_set_stall+0x50>)
    b404:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    b406:	e00a      	b.n	b41e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b408:	79bb      	ldrb	r3, [r7, #6]
    b40a:	2210      	movs	r2, #16
    b40c:	fa02 f303 	lsl.w	r3, r2, r3
    b410:	b2da      	uxtb	r2, r3
    b412:	79fb      	ldrb	r3, [r7, #7]
    b414:	4619      	mov	r1, r3
    b416:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b41a:	4b04      	ldr	r3, [pc, #16]	; (b42c <_usbd_ep_set_stall+0x54>)
    b41c:	4798      	blx	r3
}
    b41e:	bf00      	nop
    b420:	3708      	adds	r7, #8
    b422:	46bd      	mov	sp, r7
    b424:	bd80      	pop	{r7, pc}
    b426:	bf00      	nop
    b428:	0000ae35 	.word	0x0000ae35
    b42c:	0000ae89 	.word	0x0000ae89

0000b430 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    b430:	b580      	push	{r7, lr}
    b432:	b084      	sub	sp, #16
    b434:	af00      	add	r7, sp, #0
    b436:	4603      	mov	r3, r0
    b438:	460a      	mov	r2, r1
    b43a:	71fb      	strb	r3, [r7, #7]
    b43c:	4613      	mov	r3, r2
    b43e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    b440:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b444:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b446:	79fb      	ldrb	r3, [r7, #7]
    b448:	4619      	mov	r1, r3
    b44a:	68f8      	ldr	r0, [r7, #12]
    b44c:	4b08      	ldr	r3, [pc, #32]	; (b470 <_usbd_ep_is_stalled+0x40>)
    b44e:	4798      	blx	r3
    b450:	4603      	mov	r3, r0
    b452:	4619      	mov	r1, r3
    b454:	79bb      	ldrb	r3, [r7, #6]
    b456:	2210      	movs	r2, #16
    b458:	fa02 f303 	lsl.w	r3, r2, r3
    b45c:	400b      	ands	r3, r1
    b45e:	2b00      	cmp	r3, #0
    b460:	bf14      	ite	ne
    b462:	2301      	movne	r3, #1
    b464:	2300      	moveq	r3, #0
    b466:	b2db      	uxtb	r3, r3
}
    b468:	4618      	mov	r0, r3
    b46a:	3710      	adds	r7, #16
    b46c:	46bd      	mov	sp, r7
    b46e:	bd80      	pop	{r7, pc}
    b470:	0000ae61 	.word	0x0000ae61

0000b474 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    b474:	b580      	push	{r7, lr}
    b476:	b084      	sub	sp, #16
    b478:	af00      	add	r7, sp, #0
    b47a:	4603      	mov	r3, r0
    b47c:	460a      	mov	r2, r1
    b47e:	71fb      	strb	r3, [r7, #7]
    b480:	4613      	mov	r3, r2
    b482:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    b484:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b488:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b48a:	79fb      	ldrb	r3, [r7, #7]
    b48c:	4619      	mov	r1, r3
    b48e:	68f8      	ldr	r0, [r7, #12]
    b490:	4b08      	ldr	r3, [pc, #32]	; (b4b4 <_usbd_ep_is_stall_sent+0x40>)
    b492:	4798      	blx	r3
    b494:	4603      	mov	r3, r0
    b496:	4619      	mov	r1, r3
    b498:	79bb      	ldrb	r3, [r7, #6]
    b49a:	2220      	movs	r2, #32
    b49c:	fa02 f303 	lsl.w	r3, r2, r3
    b4a0:	400b      	ands	r3, r1
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	bf14      	ite	ne
    b4a6:	2301      	movne	r3, #1
    b4a8:	2300      	moveq	r3, #0
    b4aa:	b2db      	uxtb	r3, r3
}
    b4ac:	4618      	mov	r0, r3
    b4ae:	3710      	adds	r7, #16
    b4b0:	46bd      	mov	sp, r7
    b4b2:	bd80      	pop	{r7, pc}
    b4b4:	0000ade1 	.word	0x0000ade1

0000b4b8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    b4b8:	b580      	push	{r7, lr}
    b4ba:	b082      	sub	sp, #8
    b4bc:	af00      	add	r7, sp, #0
    b4be:	4603      	mov	r3, r0
    b4c0:	460a      	mov	r2, r1
    b4c2:	71fb      	strb	r3, [r7, #7]
    b4c4:	4613      	mov	r3, r2
    b4c6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    b4c8:	79bb      	ldrb	r3, [r7, #6]
    b4ca:	2220      	movs	r2, #32
    b4cc:	409a      	lsls	r2, r3
    b4ce:	79fb      	ldrb	r3, [r7, #7]
    b4d0:	4611      	mov	r1, r2
    b4d2:	4618      	mov	r0, r3
    b4d4:	4b02      	ldr	r3, [pc, #8]	; (b4e0 <_usbd_ep_ack_stall+0x28>)
    b4d6:	4798      	blx	r3
}
    b4d8:	bf00      	nop
    b4da:	3708      	adds	r7, #8
    b4dc:	46bd      	mov	sp, r7
    b4de:	bd80      	pop	{r7, pc}
    b4e0:	0000b331 	.word	0x0000b331

0000b4e4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    b4e4:	b580      	push	{r7, lr}
    b4e6:	b082      	sub	sp, #8
    b4e8:	af00      	add	r7, sp, #0
    b4ea:	4603      	mov	r3, r0
    b4ec:	71fb      	strb	r3, [r7, #7]
    b4ee:	460b      	mov	r3, r1
    b4f0:	71bb      	strb	r3, [r7, #6]
    b4f2:	4613      	mov	r3, r2
    b4f4:	717b      	strb	r3, [r7, #5]
	if (en) {
    b4f6:	797b      	ldrb	r3, [r7, #5]
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d008      	beq.n	b50e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b4fc:	79bb      	ldrb	r3, [r7, #6]
    b4fe:	2220      	movs	r2, #32
    b500:	409a      	lsls	r2, r3
    b502:	79fb      	ldrb	r3, [r7, #7]
    b504:	4611      	mov	r1, r2
    b506:	4618      	mov	r0, r3
    b508:	4b07      	ldr	r3, [pc, #28]	; (b528 <_usbd_ep_int_stall_en+0x44>)
    b50a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    b50c:	e007      	b.n	b51e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    b50e:	79bb      	ldrb	r3, [r7, #6]
    b510:	2220      	movs	r2, #32
    b512:	409a      	lsls	r2, r3
    b514:	79fb      	ldrb	r3, [r7, #7]
    b516:	4611      	mov	r1, r2
    b518:	4618      	mov	r0, r3
    b51a:	4b04      	ldr	r3, [pc, #16]	; (b52c <_usbd_ep_int_stall_en+0x48>)
    b51c:	4798      	blx	r3
}
    b51e:	bf00      	nop
    b520:	3708      	adds	r7, #8
    b522:	46bd      	mov	sp, r7
    b524:	bd80      	pop	{r7, pc}
    b526:	bf00      	nop
    b528:	0000b359 	.word	0x0000b359
    b52c:	0000b381 	.word	0x0000b381

0000b530 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    b530:	b580      	push	{r7, lr}
    b532:	b082      	sub	sp, #8
    b534:	af00      	add	r7, sp, #0
    b536:	4603      	mov	r3, r0
    b538:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    b53a:	79fb      	ldrb	r3, [r7, #7]
    b53c:	4619      	mov	r1, r3
    b53e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b542:	4b03      	ldr	r3, [pc, #12]	; (b550 <_usbd_ep_stop_setup+0x20>)
    b544:	4798      	blx	r3
}
    b546:	bf00      	nop
    b548:	3708      	adds	r7, #8
    b54a:	46bd      	mov	sp, r7
    b54c:	bd80      	pop	{r7, pc}
    b54e:	bf00      	nop
    b550:	0000aeb5 	.word	0x0000aeb5

0000b554 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    b554:	b580      	push	{r7, lr}
    b556:	b082      	sub	sp, #8
    b558:	af00      	add	r7, sp, #0
    b55a:	4603      	mov	r3, r0
    b55c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b55e:	79fb      	ldrb	r3, [r7, #7]
    b560:	2210      	movs	r2, #16
    b562:	4619      	mov	r1, r3
    b564:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b568:	4b05      	ldr	r3, [pc, #20]	; (b580 <_usbd_ep_is_setup+0x2c>)
    b56a:	4798      	blx	r3
    b56c:	4603      	mov	r3, r0
    b56e:	2b00      	cmp	r3, #0
    b570:	bf14      	ite	ne
    b572:	2301      	movne	r3, #1
    b574:	2300      	moveq	r3, #0
    b576:	b2db      	uxtb	r3, r3
}
    b578:	4618      	mov	r0, r3
    b57a:	3708      	adds	r7, #8
    b57c:	46bd      	mov	sp, r7
    b57e:	bd80      	pop	{r7, pc}
    b580:	0000adab 	.word	0x0000adab

0000b584 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    b584:	b580      	push	{r7, lr}
    b586:	b082      	sub	sp, #8
    b588:	af00      	add	r7, sp, #0
    b58a:	4603      	mov	r3, r0
    b58c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    b58e:	79fb      	ldrb	r3, [r7, #7]
    b590:	2110      	movs	r1, #16
    b592:	4618      	mov	r0, r3
    b594:	4b02      	ldr	r3, [pc, #8]	; (b5a0 <_usbd_ep_ack_setup+0x1c>)
    b596:	4798      	blx	r3
}
    b598:	bf00      	nop
    b59a:	3708      	adds	r7, #8
    b59c:	46bd      	mov	sp, r7
    b59e:	bd80      	pop	{r7, pc}
    b5a0:	0000b331 	.word	0x0000b331

0000b5a4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    b5a4:	b580      	push	{r7, lr}
    b5a6:	b082      	sub	sp, #8
    b5a8:	af00      	add	r7, sp, #0
    b5aa:	4603      	mov	r3, r0
    b5ac:	71fb      	strb	r3, [r7, #7]
    b5ae:	460b      	mov	r3, r1
    b5b0:	71bb      	strb	r3, [r7, #6]
    b5b2:	4613      	mov	r3, r2
    b5b4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    b5b6:	797b      	ldrb	r3, [r7, #5]
    b5b8:	2b00      	cmp	r3, #0
    b5ba:	d00b      	beq.n	b5d4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b5bc:	79bb      	ldrb	r3, [r7, #6]
    b5be:	2201      	movs	r2, #1
    b5c0:	fa02 f303 	lsl.w	r3, r2, r3
    b5c4:	b2da      	uxtb	r2, r3
    b5c6:	79fb      	ldrb	r3, [r7, #7]
    b5c8:	4619      	mov	r1, r3
    b5ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b5ce:	4b09      	ldr	r3, [pc, #36]	; (b5f4 <_usbd_ep_set_toggle+0x50>)
    b5d0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    b5d2:	e00a      	b.n	b5ea <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b5d4:	79bb      	ldrb	r3, [r7, #6]
    b5d6:	2201      	movs	r2, #1
    b5d8:	fa02 f303 	lsl.w	r3, r2, r3
    b5dc:	b2da      	uxtb	r2, r3
    b5de:	79fb      	ldrb	r3, [r7, #7]
    b5e0:	4619      	mov	r1, r3
    b5e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b5e6:	4b04      	ldr	r3, [pc, #16]	; (b5f8 <_usbd_ep_set_toggle+0x54>)
    b5e8:	4798      	blx	r3
}
    b5ea:	bf00      	nop
    b5ec:	3708      	adds	r7, #8
    b5ee:	46bd      	mov	sp, r7
    b5f0:	bd80      	pop	{r7, pc}
    b5f2:	bf00      	nop
    b5f4:	0000ae35 	.word	0x0000ae35
    b5f8:	0000ae89 	.word	0x0000ae89

0000b5fc <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    b5fc:	b580      	push	{r7, lr}
    b5fe:	b082      	sub	sp, #8
    b600:	af00      	add	r7, sp, #0
    b602:	4603      	mov	r3, r0
    b604:	460a      	mov	r2, r1
    b606:	71fb      	strb	r3, [r7, #7]
    b608:	4613      	mov	r3, r2
    b60a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    b60c:	79bb      	ldrb	r3, [r7, #6]
    b60e:	2201      	movs	r2, #1
    b610:	409a      	lsls	r2, r3
    b612:	79fb      	ldrb	r3, [r7, #7]
    b614:	4611      	mov	r1, r2
    b616:	4618      	mov	r0, r3
    b618:	4b02      	ldr	r3, [pc, #8]	; (b624 <_usbd_ep_ack_io_cpt+0x28>)
    b61a:	4798      	blx	r3
}
    b61c:	bf00      	nop
    b61e:	3708      	adds	r7, #8
    b620:	46bd      	mov	sp, r7
    b622:	bd80      	pop	{r7, pc}
    b624:	0000b331 	.word	0x0000b331

0000b628 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    b628:	b480      	push	{r7}
    b62a:	b085      	sub	sp, #20
    b62c:	af00      	add	r7, sp, #0
    b62e:	4603      	mov	r3, r0
    b630:	603a      	str	r2, [r7, #0]
    b632:	71fb      	strb	r3, [r7, #7]
    b634:	460b      	mov	r3, r1
    b636:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b638:	79fa      	ldrb	r2, [r7, #7]
    b63a:	79bb      	ldrb	r3, [r7, #6]
    b63c:	0052      	lsls	r2, r2, #1
    b63e:	4413      	add	r3, r2
    b640:	011b      	lsls	r3, r3, #4
    b642:	4a06      	ldr	r2, [pc, #24]	; (b65c <_usbd_ep_set_buf+0x34>)
    b644:	4413      	add	r3, r2
    b646:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    b648:	68fb      	ldr	r3, [r7, #12]
    b64a:	683a      	ldr	r2, [r7, #0]
    b64c:	601a      	str	r2, [r3, #0]
}
    b64e:	bf00      	nop
    b650:	3714      	adds	r7, #20
    b652:	46bd      	mov	sp, r7
    b654:	f85d 7b04 	ldr.w	r7, [sp], #4
    b658:	4770      	bx	lr
    b65a:	bf00      	nop
    b65c:	2000248c 	.word	0x2000248c

0000b660 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b660:	b480      	push	{r7}
    b662:	b085      	sub	sp, #20
    b664:	af00      	add	r7, sp, #0
    b666:	4603      	mov	r3, r0
    b668:	71fb      	strb	r3, [r7, #7]
    b66a:	460b      	mov	r3, r1
    b66c:	71bb      	strb	r3, [r7, #6]
    b66e:	4613      	mov	r3, r2
    b670:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b672:	79fa      	ldrb	r2, [r7, #7]
    b674:	79bb      	ldrb	r3, [r7, #6]
    b676:	0052      	lsls	r2, r2, #1
    b678:	4413      	add	r3, r2
    b67a:	011b      	lsls	r3, r3, #4
    b67c:	4a08      	ldr	r2, [pc, #32]	; (b6a0 <_usbd_ep_set_in_count+0x40>)
    b67e:	4413      	add	r3, r2
    b680:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    b682:	88bb      	ldrh	r3, [r7, #4]
    b684:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b688:	b299      	uxth	r1, r3
    b68a:	68fa      	ldr	r2, [r7, #12]
    b68c:	6853      	ldr	r3, [r2, #4]
    b68e:	f361 339b 	bfi	r3, r1, #14, #14
    b692:	6053      	str	r3, [r2, #4]
}
    b694:	bf00      	nop
    b696:	3714      	adds	r7, #20
    b698:	46bd      	mov	sp, r7
    b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b69e:	4770      	bx	lr
    b6a0:	2000248c 	.word	0x2000248c

0000b6a4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b6a4:	b480      	push	{r7}
    b6a6:	b085      	sub	sp, #20
    b6a8:	af00      	add	r7, sp, #0
    b6aa:	4603      	mov	r3, r0
    b6ac:	71fb      	strb	r3, [r7, #7]
    b6ae:	460b      	mov	r3, r1
    b6b0:	71bb      	strb	r3, [r7, #6]
    b6b2:	4613      	mov	r3, r2
    b6b4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b6b6:	79fa      	ldrb	r2, [r7, #7]
    b6b8:	79bb      	ldrb	r3, [r7, #6]
    b6ba:	0052      	lsls	r2, r2, #1
    b6bc:	4413      	add	r3, r2
    b6be:	011b      	lsls	r3, r3, #4
    b6c0:	4a08      	ldr	r2, [pc, #32]	; (b6e4 <_usbd_ep_set_in_size+0x40>)
    b6c2:	4413      	add	r3, r2
    b6c4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    b6c6:	88bb      	ldrh	r3, [r7, #4]
    b6c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b6cc:	b299      	uxth	r1, r3
    b6ce:	68fa      	ldr	r2, [r7, #12]
    b6d0:	6853      	ldr	r3, [r2, #4]
    b6d2:	f361 030d 	bfi	r3, r1, #0, #14
    b6d6:	6053      	str	r3, [r2, #4]
}
    b6d8:	bf00      	nop
    b6da:	3714      	adds	r7, #20
    b6dc:	46bd      	mov	sp, r7
    b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6e2:	4770      	bx	lr
    b6e4:	2000248c 	.word	0x2000248c

0000b6e8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    b6e8:	b480      	push	{r7}
    b6ea:	b085      	sub	sp, #20
    b6ec:	af00      	add	r7, sp, #0
    b6ee:	4603      	mov	r3, r0
    b6f0:	71fb      	strb	r3, [r7, #7]
    b6f2:	460b      	mov	r3, r1
    b6f4:	71bb      	strb	r3, [r7, #6]
    b6f6:	4613      	mov	r3, r2
    b6f8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b6fa:	79fa      	ldrb	r2, [r7, #7]
    b6fc:	79bb      	ldrb	r3, [r7, #6]
    b6fe:	0052      	lsls	r2, r2, #1
    b700:	4413      	add	r3, r2
    b702:	011b      	lsls	r3, r3, #4
    b704:	4a08      	ldr	r2, [pc, #32]	; (b728 <_usbd_ep_set_out_count+0x40>)
    b706:	4413      	add	r3, r2
    b708:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    b70a:	88bb      	ldrh	r3, [r7, #4]
    b70c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b710:	b299      	uxth	r1, r3
    b712:	68fa      	ldr	r2, [r7, #12]
    b714:	6853      	ldr	r3, [r2, #4]
    b716:	f361 030d 	bfi	r3, r1, #0, #14
    b71a:	6053      	str	r3, [r2, #4]
}
    b71c:	bf00      	nop
    b71e:	3714      	adds	r7, #20
    b720:	46bd      	mov	sp, r7
    b722:	f85d 7b04 	ldr.w	r7, [sp], #4
    b726:	4770      	bx	lr
    b728:	2000248c 	.word	0x2000248c

0000b72c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    b72c:	b480      	push	{r7}
    b72e:	b085      	sub	sp, #20
    b730:	af00      	add	r7, sp, #0
    b732:	4603      	mov	r3, r0
    b734:	71fb      	strb	r3, [r7, #7]
    b736:	460b      	mov	r3, r1
    b738:	71bb      	strb	r3, [r7, #6]
    b73a:	4613      	mov	r3, r2
    b73c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b73e:	79fa      	ldrb	r2, [r7, #7]
    b740:	79bb      	ldrb	r3, [r7, #6]
    b742:	0052      	lsls	r2, r2, #1
    b744:	4413      	add	r3, r2
    b746:	011b      	lsls	r3, r3, #4
    b748:	4a08      	ldr	r2, [pc, #32]	; (b76c <_usbd_ep_set_out_size+0x40>)
    b74a:	4413      	add	r3, r2
    b74c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    b74e:	88bb      	ldrh	r3, [r7, #4]
    b750:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b754:	b299      	uxth	r1, r3
    b756:	68fa      	ldr	r2, [r7, #12]
    b758:	6853      	ldr	r3, [r2, #4]
    b75a:	f361 339b 	bfi	r3, r1, #14, #14
    b75e:	6053      	str	r3, [r2, #4]
}
    b760:	bf00      	nop
    b762:	3714      	adds	r7, #20
    b764:	46bd      	mov	sp, r7
    b766:	f85d 7b04 	ldr.w	r7, [sp], #4
    b76a:	4770      	bx	lr
    b76c:	2000248c 	.word	0x2000248c

0000b770 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b770:	b580      	push	{r7, lr}
    b772:	b084      	sub	sp, #16
    b774:	af00      	add	r7, sp, #0
    b776:	60ba      	str	r2, [r7, #8]
    b778:	607b      	str	r3, [r7, #4]
    b77a:	4603      	mov	r3, r0
    b77c:	73fb      	strb	r3, [r7, #15]
    b77e:	460b      	mov	r3, r1
    b780:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    b782:	68bb      	ldr	r3, [r7, #8]
    b784:	b29a      	uxth	r2, r3
    b786:	7bb9      	ldrb	r1, [r7, #14]
    b788:	7bfb      	ldrb	r3, [r7, #15]
    b78a:	4618      	mov	r0, r3
    b78c:	4b06      	ldr	r3, [pc, #24]	; (b7a8 <_usbd_ep_set_in_trans+0x38>)
    b78e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    b790:	687b      	ldr	r3, [r7, #4]
    b792:	b29a      	uxth	r2, r3
    b794:	7bb9      	ldrb	r1, [r7, #14]
    b796:	7bfb      	ldrb	r3, [r7, #15]
    b798:	4618      	mov	r0, r3
    b79a:	4b04      	ldr	r3, [pc, #16]	; (b7ac <_usbd_ep_set_in_trans+0x3c>)
    b79c:	4798      	blx	r3
}
    b79e:	bf00      	nop
    b7a0:	3710      	adds	r7, #16
    b7a2:	46bd      	mov	sp, r7
    b7a4:	bd80      	pop	{r7, pc}
    b7a6:	bf00      	nop
    b7a8:	0000b6a5 	.word	0x0000b6a5
    b7ac:	0000b661 	.word	0x0000b661

0000b7b0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    b7b0:	b580      	push	{r7, lr}
    b7b2:	b084      	sub	sp, #16
    b7b4:	af00      	add	r7, sp, #0
    b7b6:	60ba      	str	r2, [r7, #8]
    b7b8:	607b      	str	r3, [r7, #4]
    b7ba:	4603      	mov	r3, r0
    b7bc:	73fb      	strb	r3, [r7, #15]
    b7be:	460b      	mov	r3, r1
    b7c0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    b7c2:	68bb      	ldr	r3, [r7, #8]
    b7c4:	b29a      	uxth	r2, r3
    b7c6:	7bb9      	ldrb	r1, [r7, #14]
    b7c8:	7bfb      	ldrb	r3, [r7, #15]
    b7ca:	4618      	mov	r0, r3
    b7cc:	4b06      	ldr	r3, [pc, #24]	; (b7e8 <_usbd_ep_set_out_trans+0x38>)
    b7ce:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    b7d0:	687b      	ldr	r3, [r7, #4]
    b7d2:	b29a      	uxth	r2, r3
    b7d4:	7bb9      	ldrb	r1, [r7, #14]
    b7d6:	7bfb      	ldrb	r3, [r7, #15]
    b7d8:	4618      	mov	r0, r3
    b7da:	4b04      	ldr	r3, [pc, #16]	; (b7ec <_usbd_ep_set_out_trans+0x3c>)
    b7dc:	4798      	blx	r3
}
    b7de:	bf00      	nop
    b7e0:	3710      	adds	r7, #16
    b7e2:	46bd      	mov	sp, r7
    b7e4:	bd80      	pop	{r7, pc}
    b7e6:	bf00      	nop
    b7e8:	0000b72d 	.word	0x0000b72d
    b7ec:	0000b6e9 	.word	0x0000b6e9

0000b7f0 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    b7f0:	b480      	push	{r7}
    b7f2:	b085      	sub	sp, #20
    b7f4:	af00      	add	r7, sp, #0
    b7f6:	4603      	mov	r3, r0
    b7f8:	460a      	mov	r2, r1
    b7fa:	71fb      	strb	r3, [r7, #7]
    b7fc:	4613      	mov	r3, r2
    b7fe:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    b800:	79fa      	ldrb	r2, [r7, #7]
    b802:	79bb      	ldrb	r3, [r7, #6]
    b804:	0052      	lsls	r2, r2, #1
    b806:	4413      	add	r3, r2
    b808:	011b      	lsls	r3, r3, #4
    b80a:	4a06      	ldr	r2, [pc, #24]	; (b824 <_usbd_ep_clear_bank_status+0x34>)
    b80c:	4413      	add	r3, r2
    b80e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    b810:	68fb      	ldr	r3, [r7, #12]
    b812:	2200      	movs	r2, #0
    b814:	729a      	strb	r2, [r3, #10]
}
    b816:	bf00      	nop
    b818:	3714      	adds	r7, #20
    b81a:	46bd      	mov	sp, r7
    b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b820:	4770      	bx	lr
    b822:	bf00      	nop
    b824:	2000248c 	.word	0x2000248c

0000b828 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    b828:	b580      	push	{r7, lr}
    b82a:	b082      	sub	sp, #8
    b82c:	af00      	add	r7, sp, #0
    b82e:	4603      	mov	r3, r0
    b830:	71fb      	strb	r3, [r7, #7]
    b832:	460b      	mov	r3, r1
    b834:	71bb      	strb	r3, [r7, #6]
    b836:	4613      	mov	r3, r2
    b838:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    b83a:	797b      	ldrb	r3, [r7, #5]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d00b      	beq.n	b858 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b840:	79bb      	ldrb	r3, [r7, #6]
    b842:	2240      	movs	r2, #64	; 0x40
    b844:	fa02 f303 	lsl.w	r3, r2, r3
    b848:	b2da      	uxtb	r2, r3
    b84a:	79fb      	ldrb	r3, [r7, #7]
    b84c:	4619      	mov	r1, r3
    b84e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b852:	4b09      	ldr	r3, [pc, #36]	; (b878 <_usbd_ep_set_in_rdy+0x50>)
    b854:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    b856:	e00a      	b.n	b86e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b858:	79bb      	ldrb	r3, [r7, #6]
    b85a:	2240      	movs	r2, #64	; 0x40
    b85c:	fa02 f303 	lsl.w	r3, r2, r3
    b860:	b2da      	uxtb	r2, r3
    b862:	79fb      	ldrb	r3, [r7, #7]
    b864:	4619      	mov	r1, r3
    b866:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b86a:	4b04      	ldr	r3, [pc, #16]	; (b87c <_usbd_ep_set_in_rdy+0x54>)
    b86c:	4798      	blx	r3
}
    b86e:	bf00      	nop
    b870:	3708      	adds	r7, #8
    b872:	46bd      	mov	sp, r7
    b874:	bd80      	pop	{r7, pc}
    b876:	bf00      	nop
    b878:	0000ae35 	.word	0x0000ae35
    b87c:	0000ae89 	.word	0x0000ae89

0000b880 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    b880:	b580      	push	{r7, lr}
    b882:	b082      	sub	sp, #8
    b884:	af00      	add	r7, sp, #0
    b886:	4603      	mov	r3, r0
    b888:	71fb      	strb	r3, [r7, #7]
    b88a:	460b      	mov	r3, r1
    b88c:	71bb      	strb	r3, [r7, #6]
    b88e:	4613      	mov	r3, r2
    b890:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    b892:	797b      	ldrb	r3, [r7, #5]
    b894:	2b00      	cmp	r3, #0
    b896:	d00b      	beq.n	b8b0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b898:	79bb      	ldrb	r3, [r7, #6]
    b89a:	2240      	movs	r2, #64	; 0x40
    b89c:	fa02 f303 	lsl.w	r3, r2, r3
    b8a0:	b2da      	uxtb	r2, r3
    b8a2:	79fb      	ldrb	r3, [r7, #7]
    b8a4:	4619      	mov	r1, r3
    b8a6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b8aa:	4b09      	ldr	r3, [pc, #36]	; (b8d0 <_usbd_ep_set_out_rdy+0x50>)
    b8ac:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    b8ae:	e00a      	b.n	b8c6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    b8b0:	79bb      	ldrb	r3, [r7, #6]
    b8b2:	2240      	movs	r2, #64	; 0x40
    b8b4:	fa02 f303 	lsl.w	r3, r2, r3
    b8b8:	b2da      	uxtb	r2, r3
    b8ba:	79fb      	ldrb	r3, [r7, #7]
    b8bc:	4619      	mov	r1, r3
    b8be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b8c2:	4b04      	ldr	r3, [pc, #16]	; (b8d4 <_usbd_ep_set_out_rdy+0x54>)
    b8c4:	4798      	blx	r3
}
    b8c6:	bf00      	nop
    b8c8:	3708      	adds	r7, #8
    b8ca:	46bd      	mov	sp, r7
    b8cc:	bd80      	pop	{r7, pc}
    b8ce:	bf00      	nop
    b8d0:	0000ae89 	.word	0x0000ae89
    b8d4:	0000ae35 	.word	0x0000ae35

0000b8d8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    b8d8:	b480      	push	{r7}
    b8da:	b083      	sub	sp, #12
    b8dc:	af00      	add	r7, sp, #0
    b8de:	4603      	mov	r3, r0
    b8e0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b8e2:	88fb      	ldrh	r3, [r7, #6]
    b8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b8e8:	d820      	bhi.n	b92c <_usbd_ep_pcksize_size+0x54>
    b8ea:	88fb      	ldrh	r3, [r7, #6]
    b8ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b8f0:	d81a      	bhi.n	b928 <_usbd_ep_pcksize_size+0x50>
    b8f2:	88fb      	ldrh	r3, [r7, #6]
    b8f4:	2b80      	cmp	r3, #128	; 0x80
    b8f6:	d815      	bhi.n	b924 <_usbd_ep_pcksize_size+0x4c>
    b8f8:	88fb      	ldrh	r3, [r7, #6]
    b8fa:	2b40      	cmp	r3, #64	; 0x40
    b8fc:	d810      	bhi.n	b920 <_usbd_ep_pcksize_size+0x48>
    b8fe:	88fb      	ldrh	r3, [r7, #6]
    b900:	2b20      	cmp	r3, #32
    b902:	d80b      	bhi.n	b91c <_usbd_ep_pcksize_size+0x44>
    b904:	88fb      	ldrh	r3, [r7, #6]
    b906:	2b10      	cmp	r3, #16
    b908:	d806      	bhi.n	b918 <_usbd_ep_pcksize_size+0x40>
    b90a:	88fb      	ldrh	r3, [r7, #6]
    b90c:	2b08      	cmp	r3, #8
    b90e:	bf8c      	ite	hi
    b910:	2301      	movhi	r3, #1
    b912:	2300      	movls	r3, #0
    b914:	b2db      	uxtb	r3, r3
    b916:	e00a      	b.n	b92e <_usbd_ep_pcksize_size+0x56>
    b918:	2302      	movs	r3, #2
    b91a:	e008      	b.n	b92e <_usbd_ep_pcksize_size+0x56>
    b91c:	2303      	movs	r3, #3
    b91e:	e006      	b.n	b92e <_usbd_ep_pcksize_size+0x56>
    b920:	2304      	movs	r3, #4
    b922:	e004      	b.n	b92e <_usbd_ep_pcksize_size+0x56>
    b924:	2305      	movs	r3, #5
    b926:	e002      	b.n	b92e <_usbd_ep_pcksize_size+0x56>
    b928:	2306      	movs	r3, #6
    b92a:	e000      	b.n	b92e <_usbd_ep_pcksize_size+0x56>
    b92c:	2307      	movs	r3, #7
}
    b92e:	4618      	mov	r0, r3
    b930:	370c      	adds	r7, #12
    b932:	46bd      	mov	sp, r7
    b934:	f85d 7b04 	ldr.w	r7, [sp], #4
    b938:	4770      	bx	lr
	...

0000b93c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    b93c:	b480      	push	{r7}
    b93e:	b085      	sub	sp, #20
    b940:	af00      	add	r7, sp, #0
    b942:	4603      	mov	r3, r0
    b944:	460a      	mov	r2, r1
    b946:	71fb      	strb	r3, [r7, #7]
    b948:	4613      	mov	r3, r2
    b94a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b94c:	79fb      	ldrb	r3, [r7, #7]
    b94e:	2b00      	cmp	r3, #0
    b950:	d008      	beq.n	b964 <_usb_d_dev_ept+0x28>
    b952:	79bb      	ldrb	r3, [r7, #6]
    b954:	2b00      	cmp	r3, #0
    b956:	d003      	beq.n	b960 <_usb_d_dev_ept+0x24>
    b958:	79fb      	ldrb	r3, [r7, #7]
    b95a:	3304      	adds	r3, #4
    b95c:	b2db      	uxtb	r3, r3
    b95e:	e002      	b.n	b966 <_usb_d_dev_ept+0x2a>
    b960:	79fb      	ldrb	r3, [r7, #7]
    b962:	e000      	b.n	b966 <_usb_d_dev_ept+0x2a>
    b964:	2300      	movs	r3, #0
    b966:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    b968:	7bfa      	ldrb	r2, [r7, #15]
    b96a:	4613      	mov	r3, r2
    b96c:	009b      	lsls	r3, r3, #2
    b96e:	4413      	add	r3, r2
    b970:	009b      	lsls	r3, r3, #2
    b972:	3310      	adds	r3, #16
    b974:	4a04      	ldr	r2, [pc, #16]	; (b988 <_usb_d_dev_ept+0x4c>)
    b976:	4413      	add	r3, r2
    b978:	3304      	adds	r3, #4
}
    b97a:	4618      	mov	r0, r3
    b97c:	3714      	adds	r7, #20
    b97e:	46bd      	mov	sp, r7
    b980:	f85d 7b04 	ldr.w	r7, [sp], #4
    b984:	4770      	bx	lr
    b986:	bf00      	nop
    b988:	200023c4 	.word	0x200023c4

0000b98c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    b98c:	b580      	push	{r7, lr}
    b98e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    b990:	2104      	movs	r1, #4
    b992:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b996:	4b03      	ldr	r3, [pc, #12]	; (b9a4 <_usb_d_dev_sof+0x18>)
    b998:	4798      	blx	r3
	dev_inst.callbacks.sof();
    b99a:	4b03      	ldr	r3, [pc, #12]	; (b9a8 <_usb_d_dev_sof+0x1c>)
    b99c:	681b      	ldr	r3, [r3, #0]
    b99e:	4798      	blx	r3
}
    b9a0:	bf00      	nop
    b9a2:	bd80      	pop	{r7, pc}
    b9a4:	0000b003 	.word	0x0000b003
    b9a8:	200023c4 	.word	0x200023c4

0000b9ac <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    b9ac:	b580      	push	{r7, lr}
    b9ae:	b084      	sub	sp, #16
    b9b0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    b9b2:	2300      	movs	r3, #0
    b9b4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b9b6:	f240 2101 	movw	r1, #513	; 0x201
    b9ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b9be:	4b1a      	ldr	r3, [pc, #104]	; (ba28 <_usb_d_dev_lpmsusp+0x7c>)
    b9c0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b9c2:	f240 2101 	movw	r1, #513	; 0x201
    b9c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b9ca:	4b18      	ldr	r3, [pc, #96]	; (ba2c <_usb_d_dev_lpmsusp+0x80>)
    b9cc:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b9ce:	2170      	movs	r1, #112	; 0x70
    b9d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b9d4:	4b16      	ldr	r3, [pc, #88]	; (ba30 <_usb_d_dev_lpmsusp+0x84>)
    b9d6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b9d8:	2300      	movs	r3, #0
    b9da:	73fb      	strb	r3, [r7, #15]
    b9dc:	e018      	b.n	ba10 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    b9de:	7bfb      	ldrb	r3, [r7, #15]
    b9e0:	015b      	lsls	r3, r3, #5
    b9e2:	4a14      	ldr	r2, [pc, #80]	; (ba34 <_usb_d_dev_lpmsusp+0x88>)
    b9e4:	4413      	add	r3, r2
    b9e6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    b9e8:	687b      	ldr	r3, [r7, #4]
    b9ea:	891b      	ldrh	r3, [r3, #8]
    b9ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
    b9f0:	b2db      	uxtb	r3, r3
    b9f2:	2b03      	cmp	r3, #3
    b9f4:	d109      	bne.n	ba0a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    b9f6:	687b      	ldr	r3, [r7, #4]
    b9f8:	891b      	ldrh	r3, [r3, #8]
    b9fa:	f3c3 130a 	ubfx	r3, r3, #4, #11
    b9fe:	b29b      	uxth	r3, r3
    ba00:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ba02:	687b      	ldr	r3, [r7, #4]
    ba04:	2200      	movs	r2, #0
    ba06:	811a      	strh	r2, [r3, #8]
			break;
    ba08:	e005      	b.n	ba16 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ba0a:	7bfb      	ldrb	r3, [r7, #15]
    ba0c:	3301      	adds	r3, #1
    ba0e:	73fb      	strb	r3, [r7, #15]
    ba10:	7bfb      	ldrb	r3, [r7, #15]
    ba12:	2b03      	cmp	r3, #3
    ba14:	d9e3      	bls.n	b9de <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ba16:	4b08      	ldr	r3, [pc, #32]	; (ba38 <_usb_d_dev_lpmsusp+0x8c>)
    ba18:	685b      	ldr	r3, [r3, #4]
    ba1a:	68b9      	ldr	r1, [r7, #8]
    ba1c:	2003      	movs	r0, #3
    ba1e:	4798      	blx	r3
}
    ba20:	bf00      	nop
    ba22:	3710      	adds	r7, #16
    ba24:	46bd      	mov	sp, r7
    ba26:	bd80      	pop	{r7, pc}
    ba28:	0000b003 	.word	0x0000b003
    ba2c:	0000b059 	.word	0x0000b059
    ba30:	0000b021 	.word	0x0000b021
    ba34:	2000248c 	.word	0x2000248c
    ba38:	200023c4 	.word	0x200023c4

0000ba3c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    ba3c:	b580      	push	{r7, lr}
    ba3e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    ba40:	2180      	movs	r1, #128	; 0x80
    ba42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ba46:	4b04      	ldr	r3, [pc, #16]	; (ba58 <_usb_d_dev_ramerr+0x1c>)
    ba48:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    ba4a:	4b04      	ldr	r3, [pc, #16]	; (ba5c <_usb_d_dev_ramerr+0x20>)
    ba4c:	685b      	ldr	r3, [r3, #4]
    ba4e:	2100      	movs	r1, #0
    ba50:	2005      	movs	r0, #5
    ba52:	4798      	blx	r3
}
    ba54:	bf00      	nop
    ba56:	bd80      	pop	{r7, pc}
    ba58:	0000b003 	.word	0x0000b003
    ba5c:	200023c4 	.word	0x200023c4

0000ba60 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    ba60:	b580      	push	{r7, lr}
    ba62:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ba64:	2170      	movs	r1, #112	; 0x70
    ba66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ba6a:	4b0b      	ldr	r3, [pc, #44]	; (ba98 <_usb_d_dev_wakeup+0x38>)
    ba6c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ba6e:	2170      	movs	r1, #112	; 0x70
    ba70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ba74:	4b09      	ldr	r3, [pc, #36]	; (ba9c <_usb_d_dev_wakeup+0x3c>)
    ba76:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ba78:	f240 2101 	movw	r1, #513	; 0x201
    ba7c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ba80:	4b07      	ldr	r3, [pc, #28]	; (baa0 <_usb_d_dev_wakeup+0x40>)
    ba82:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    ba84:	2000      	movs	r0, #0
    ba86:	4b07      	ldr	r3, [pc, #28]	; (baa4 <_usb_d_dev_wakeup+0x44>)
    ba88:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    ba8a:	4b07      	ldr	r3, [pc, #28]	; (baa8 <_usb_d_dev_wakeup+0x48>)
    ba8c:	685b      	ldr	r3, [r3, #4]
    ba8e:	2100      	movs	r1, #0
    ba90:	2002      	movs	r0, #2
    ba92:	4798      	blx	r3
}
    ba94:	bf00      	nop
    ba96:	bd80      	pop	{r7, pc}
    ba98:	0000b003 	.word	0x0000b003
    ba9c:	0000b059 	.word	0x0000b059
    baa0:	0000b021 	.word	0x0000b021
    baa4:	0000b301 	.word	0x0000b301
    baa8:	200023c4 	.word	0x200023c4

0000baac <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    baac:	b580      	push	{r7, lr}
    baae:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    bab0:	2200      	movs	r2, #0
    bab2:	2100      	movs	r1, #0
    bab4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bab8:	4b0d      	ldr	r3, [pc, #52]	; (baf0 <_usb_d_dev_reset+0x44>)
    baba:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    babc:	2108      	movs	r1, #8
    babe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bac2:	4b0c      	ldr	r3, [pc, #48]	; (baf4 <_usb_d_dev_reset+0x48>)
    bac4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    bac6:	2170      	movs	r1, #112	; 0x70
    bac8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bacc:	4b0a      	ldr	r3, [pc, #40]	; (baf8 <_usb_d_dev_reset+0x4c>)
    bace:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bad0:	f240 2101 	movw	r1, #513	; 0x201
    bad4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bad8:	4b08      	ldr	r3, [pc, #32]	; (bafc <_usb_d_dev_reset+0x50>)
    bada:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    badc:	4b08      	ldr	r3, [pc, #32]	; (bb00 <_usb_d_dev_reset+0x54>)
    bade:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    bae0:	4b08      	ldr	r3, [pc, #32]	; (bb04 <_usb_d_dev_reset+0x58>)
    bae2:	685b      	ldr	r3, [r3, #4]
    bae4:	2100      	movs	r1, #0
    bae6:	2001      	movs	r0, #1
    bae8:	4798      	blx	r3
}
    baea:	bf00      	nop
    baec:	bd80      	pop	{r7, pc}
    baee:	bf00      	nop
    baf0:	0000af99 	.word	0x0000af99
    baf4:	0000b003 	.word	0x0000b003
    baf8:	0000b059 	.word	0x0000b059
    bafc:	0000b021 	.word	0x0000b021
    bb00:	0000c669 	.word	0x0000c669
    bb04:	200023c4 	.word	0x200023c4

0000bb08 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    bb08:	b580      	push	{r7, lr}
    bb0a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bb0c:	f240 2101 	movw	r1, #513	; 0x201
    bb10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bb14:	4b09      	ldr	r3, [pc, #36]	; (bb3c <_usb_d_dev_suspend+0x34>)
    bb16:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    bb18:	f240 2101 	movw	r1, #513	; 0x201
    bb1c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bb20:	4b07      	ldr	r3, [pc, #28]	; (bb40 <_usb_d_dev_suspend+0x38>)
    bb22:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    bb24:	2170      	movs	r1, #112	; 0x70
    bb26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bb2a:	4b06      	ldr	r3, [pc, #24]	; (bb44 <_usb_d_dev_suspend+0x3c>)
    bb2c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    bb2e:	4b06      	ldr	r3, [pc, #24]	; (bb48 <_usb_d_dev_suspend+0x40>)
    bb30:	685b      	ldr	r3, [r3, #4]
    bb32:	2100      	movs	r1, #0
    bb34:	2004      	movs	r0, #4
    bb36:	4798      	blx	r3
}
    bb38:	bf00      	nop
    bb3a:	bd80      	pop	{r7, pc}
    bb3c:	0000b003 	.word	0x0000b003
    bb40:	0000b059 	.word	0x0000b059
    bb44:	0000b021 	.word	0x0000b021
    bb48:	200023c4 	.word	0x200023c4

0000bb4c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    bb4c:	b580      	push	{r7, lr}
    bb4e:	b082      	sub	sp, #8
    bb50:	af00      	add	r7, sp, #0
	bool     rc    = true;
    bb52:	2301      	movs	r3, #1
    bb54:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    bb56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bb5a:	4b22      	ldr	r3, [pc, #136]	; (bbe4 <_usb_d_dev_handle_nep+0x98>)
    bb5c:	4798      	blx	r3
    bb5e:	4603      	mov	r3, r0
    bb60:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    bb62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bb66:	4b20      	ldr	r3, [pc, #128]	; (bbe8 <_usb_d_dev_handle_nep+0x9c>)
    bb68:	4798      	blx	r3
    bb6a:	4603      	mov	r3, r0
    bb6c:	461a      	mov	r2, r3
    bb6e:	88bb      	ldrh	r3, [r7, #4]
    bb70:	4013      	ands	r3, r2
    bb72:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    bb74:	88bb      	ldrh	r3, [r7, #4]
    bb76:	f003 0304 	and.w	r3, r3, #4
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d003      	beq.n	bb86 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    bb7e:	4b1b      	ldr	r3, [pc, #108]	; (bbec <_usb_d_dev_handle_nep+0xa0>)
    bb80:	4798      	blx	r3
		return true;
    bb82:	2301      	movs	r3, #1
    bb84:	e02a      	b.n	bbdc <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    bb86:	88bb      	ldrh	r3, [r7, #4]
    bb88:	f403 7300 	and.w	r3, r3, #512	; 0x200
    bb8c:	2b00      	cmp	r3, #0
    bb8e:	d002      	beq.n	bb96 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    bb90:	4b17      	ldr	r3, [pc, #92]	; (bbf0 <_usb_d_dev_handle_nep+0xa4>)
    bb92:	4798      	blx	r3
    bb94:	e021      	b.n	bbda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    bb96:	88bb      	ldrh	r3, [r7, #4]
    bb98:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb9c:	2b00      	cmp	r3, #0
    bb9e:	d002      	beq.n	bba6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    bba0:	4b14      	ldr	r3, [pc, #80]	; (bbf4 <_usb_d_dev_handle_nep+0xa8>)
    bba2:	4798      	blx	r3
    bba4:	e019      	b.n	bbda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    bba6:	88bb      	ldrh	r3, [r7, #4]
    bba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    bbac:	2b00      	cmp	r3, #0
    bbae:	d002      	beq.n	bbb6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    bbb0:	4b11      	ldr	r3, [pc, #68]	; (bbf8 <_usb_d_dev_handle_nep+0xac>)
    bbb2:	4798      	blx	r3
    bbb4:	e011      	b.n	bbda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    bbb6:	88bb      	ldrh	r3, [r7, #4]
    bbb8:	f003 0308 	and.w	r3, r3, #8
    bbbc:	2b00      	cmp	r3, #0
    bbbe:	d002      	beq.n	bbc6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    bbc0:	4b0e      	ldr	r3, [pc, #56]	; (bbfc <_usb_d_dev_handle_nep+0xb0>)
    bbc2:	4798      	blx	r3
    bbc4:	e009      	b.n	bbda <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    bbc6:	88bb      	ldrh	r3, [r7, #4]
    bbc8:	f003 0301 	and.w	r3, r3, #1
    bbcc:	2b00      	cmp	r3, #0
    bbce:	d002      	beq.n	bbd6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    bbd0:	4b0b      	ldr	r3, [pc, #44]	; (bc00 <_usb_d_dev_handle_nep+0xb4>)
    bbd2:	4798      	blx	r3
    bbd4:	e001      	b.n	bbda <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    bbd6:	2300      	movs	r3, #0
    bbd8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    bbda:	79fb      	ldrb	r3, [r7, #7]
}
    bbdc:	4618      	mov	r0, r3
    bbde:	3708      	adds	r7, #8
    bbe0:	46bd      	mov	sp, r7
    bbe2:	bd80      	pop	{r7, pc}
    bbe4:	0000afe9 	.word	0x0000afe9
    bbe8:	0000b03f 	.word	0x0000b03f
    bbec:	0000b98d 	.word	0x0000b98d
    bbf0:	0000b9ad 	.word	0x0000b9ad
    bbf4:	0000ba3d 	.word	0x0000ba3d
    bbf8:	0000ba61 	.word	0x0000ba61
    bbfc:	0000baad 	.word	0x0000baad
    bc00:	0000bb09 	.word	0x0000bb09

0000bc04 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    bc04:	b590      	push	{r4, r7, lr}
    bc06:	b089      	sub	sp, #36	; 0x24
    bc08:	af00      	add	r7, sp, #0
    bc0a:	6078      	str	r0, [r7, #4]
    bc0c:	460b      	mov	r3, r1
    bc0e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    bc10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc14:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    bc16:	687b      	ldr	r3, [r7, #4]
    bc18:	7c9b      	ldrb	r3, [r3, #18]
    bc1a:	f003 030f 	and.w	r3, r3, #15
    bc1e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    bc20:	7dfb      	ldrb	r3, [r7, #23]
    bc22:	015b      	lsls	r3, r3, #5
    bc24:	4a73      	ldr	r2, [pc, #460]	; (bdf4 <_usb_d_dev_in_next+0x1f0>)
    bc26:	4413      	add	r3, r2
    bc28:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    bc2a:	78fb      	ldrb	r3, [r7, #3]
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	d006      	beq.n	bc3e <_usb_d_dev_in_next+0x3a>
    bc30:	693b      	ldr	r3, [r7, #16]
    bc32:	3310      	adds	r3, #16
    bc34:	685b      	ldr	r3, [r3, #4]
    bc36:	f3c3 030d 	ubfx	r3, r3, #0, #14
    bc3a:	b29b      	uxth	r3, r3
    bc3c:	e000      	b.n	bc40 <_usb_d_dev_in_next+0x3c>
    bc3e:	2300      	movs	r3, #0
    bc40:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    bc42:	687b      	ldr	r3, [r7, #4]
    bc44:	8a1b      	ldrh	r3, [r3, #16]
    bc46:	f240 32ff 	movw	r2, #1023	; 0x3ff
    bc4a:	4293      	cmp	r3, r2
    bc4c:	d103      	bne.n	bc56 <_usb_d_dev_in_next+0x52>
    bc4e:	687b      	ldr	r3, [r7, #4]
    bc50:	8a1b      	ldrh	r3, [r3, #16]
    bc52:	b21b      	sxth	r3, r3
    bc54:	e004      	b.n	bc60 <_usb_d_dev_in_next+0x5c>
    bc56:	687b      	ldr	r3, [r7, #4]
    bc58:	8a1b      	ldrh	r3, [r3, #16]
    bc5a:	3b01      	subs	r3, #1
    bc5c:	b29b      	uxth	r3, r3
    bc5e:	b21b      	sxth	r3, r3
    bc60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    bc64:	4013      	ands	r3, r2
    bc66:	b21b      	sxth	r3, r3
    bc68:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    bc6a:	2300      	movs	r3, #0
    bc6c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    bc6e:	687b      	ldr	r3, [r7, #4]
    bc70:	7cdb      	ldrb	r3, [r3, #19]
    bc72:	f003 0307 	and.w	r3, r3, #7
    bc76:	b2db      	uxtb	r3, r3
    bc78:	2b01      	cmp	r3, #1
    bc7a:	bf0c      	ite	eq
    bc7c:	2301      	moveq	r3, #1
    bc7e:	2300      	movne	r3, #0
    bc80:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    bc82:	78fb      	ldrb	r3, [r7, #3]
    bc84:	2b00      	cmp	r3, #0
    bc86:	d004      	beq.n	bc92 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    bc88:	7dfb      	ldrb	r3, [r7, #23]
    bc8a:	2101      	movs	r1, #1
    bc8c:	4618      	mov	r0, r3
    bc8e:	4b5a      	ldr	r3, [pc, #360]	; (bdf8 <_usb_d_dev_in_next+0x1f4>)
    bc90:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    bc92:	687b      	ldr	r3, [r7, #4]
    bc94:	689a      	ldr	r2, [r3, #8]
    bc96:	89fb      	ldrh	r3, [r7, #14]
    bc98:	441a      	add	r2, r3
    bc9a:	687b      	ldr	r3, [r7, #4]
    bc9c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	689a      	ldr	r2, [r3, #8]
    bca2:	687b      	ldr	r3, [r7, #4]
    bca4:	685b      	ldr	r3, [r3, #4]
    bca6:	429a      	cmp	r2, r3
    bca8:	d243      	bcs.n	bd32 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    bcaa:	687b      	ldr	r3, [r7, #4]
    bcac:	685b      	ldr	r3, [r3, #4]
    bcae:	b29a      	uxth	r2, r3
    bcb0:	687b      	ldr	r3, [r7, #4]
    bcb2:	689b      	ldr	r3, [r3, #8]
    bcb4:	b29b      	uxth	r3, r3
    bcb6:	1ad3      	subs	r3, r2, r3
    bcb8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    bcba:	687b      	ldr	r3, [r7, #4]
    bcbc:	7cdb      	ldrb	r3, [r3, #19]
    bcbe:	f003 0320 	and.w	r3, r3, #32
    bcc2:	b2db      	uxtb	r3, r3
    bcc4:	2b00      	cmp	r3, #0
    bcc6:	d01b      	beq.n	bd00 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    bcc8:	687b      	ldr	r3, [r7, #4]
    bcca:	8a1b      	ldrh	r3, [r3, #16]
    bccc:	8bfa      	ldrh	r2, [r7, #30]
    bcce:	429a      	cmp	r2, r3
    bcd0:	d902      	bls.n	bcd8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    bcd2:	687b      	ldr	r3, [r7, #4]
    bcd4:	8a1b      	ldrh	r3, [r3, #16]
    bcd6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    bcd8:	687b      	ldr	r3, [r7, #4]
    bcda:	68d8      	ldr	r0, [r3, #12]
    bcdc:	687b      	ldr	r3, [r7, #4]
    bcde:	681a      	ldr	r2, [r3, #0]
    bce0:	687b      	ldr	r3, [r7, #4]
    bce2:	689b      	ldr	r3, [r3, #8]
    bce4:	4413      	add	r3, r2
    bce6:	8bfa      	ldrh	r2, [r7, #30]
    bce8:	4619      	mov	r1, r3
    bcea:	4b44      	ldr	r3, [pc, #272]	; (bdfc <_usb_d_dev_in_next+0x1f8>)
    bcec:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    bcee:	687b      	ldr	r3, [r7, #4]
    bcf0:	68db      	ldr	r3, [r3, #12]
    bcf2:	461a      	mov	r2, r3
    bcf4:	7dfb      	ldrb	r3, [r7, #23]
    bcf6:	2101      	movs	r1, #1
    bcf8:	4618      	mov	r0, r3
    bcfa:	4b41      	ldr	r3, [pc, #260]	; (be00 <_usb_d_dev_in_next+0x1fc>)
    bcfc:	4798      	blx	r3
    bcfe:	e011      	b.n	bd24 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    bd00:	8bfb      	ldrh	r3, [r7, #30]
    bd02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    bd06:	d902      	bls.n	bd0e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    bd08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bd0c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    bd0e:	687b      	ldr	r3, [r7, #4]
    bd10:	681a      	ldr	r2, [r3, #0]
    bd12:	687b      	ldr	r3, [r7, #4]
    bd14:	689b      	ldr	r3, [r3, #8]
    bd16:	4413      	add	r3, r2
    bd18:	461a      	mov	r2, r3
    bd1a:	7dfb      	ldrb	r3, [r7, #23]
    bd1c:	2101      	movs	r1, #1
    bd1e:	4618      	mov	r0, r3
    bd20:	4b37      	ldr	r3, [pc, #220]	; (be00 <_usb_d_dev_in_next+0x1fc>)
    bd22:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    bd24:	8bfa      	ldrh	r2, [r7, #30]
    bd26:	7df8      	ldrb	r0, [r7, #23]
    bd28:	2300      	movs	r3, #0
    bd2a:	2101      	movs	r1, #1
    bd2c:	4c35      	ldr	r4, [pc, #212]	; (be04 <_usb_d_dev_in_next+0x200>)
    bd2e:	47a0      	blx	r4
		goto _in_tx_exec;
    bd30:	e041      	b.n	bdb6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    bd32:	687b      	ldr	r3, [r7, #4]
    bd34:	7cdb      	ldrb	r3, [r3, #19]
    bd36:	f003 0310 	and.w	r3, r3, #16
    bd3a:	b2db      	uxtb	r3, r3
    bd3c:	2b00      	cmp	r3, #0
    bd3e:	d00b      	beq.n	bd58 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    bd40:	687a      	ldr	r2, [r7, #4]
    bd42:	7cd3      	ldrb	r3, [r2, #19]
    bd44:	f36f 1304 	bfc	r3, #4, #1
    bd48:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    bd4a:	7df8      	ldrb	r0, [r7, #23]
    bd4c:	2300      	movs	r3, #0
    bd4e:	2200      	movs	r2, #0
    bd50:	2101      	movs	r1, #1
    bd52:	4c2c      	ldr	r4, [pc, #176]	; (be04 <_usb_d_dev_in_next+0x200>)
    bd54:	47a0      	blx	r4
		goto _in_tx_exec;
    bd56:	e02e      	b.n	bdb6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    bd58:	7afb      	ldrb	r3, [r7, #11]
    bd5a:	2b00      	cmp	r3, #0
    bd5c:	d006      	beq.n	bd6c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    bd5e:	7dfb      	ldrb	r3, [r7, #23]
    bd60:	224b      	movs	r2, #75	; 0x4b
    bd62:	4619      	mov	r1, r3
    bd64:	69b8      	ldr	r0, [r7, #24]
    bd66:	4b28      	ldr	r3, [pc, #160]	; (be08 <_usb_d_dev_in_next+0x204>)
    bd68:	4798      	blx	r3
    bd6a:	e005      	b.n	bd78 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    bd6c:	7dfb      	ldrb	r3, [r7, #23]
    bd6e:	224a      	movs	r2, #74	; 0x4a
    bd70:	4619      	mov	r1, r3
    bd72:	69b8      	ldr	r0, [r7, #24]
    bd74:	4b24      	ldr	r3, [pc, #144]	; (be08 <_usb_d_dev_in_next+0x204>)
    bd76:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    bd78:	687b      	ldr	r3, [r7, #4]
    bd7a:	8a1b      	ldrh	r3, [r3, #16]
    bd7c:	89ba      	ldrh	r2, [r7, #12]
    bd7e:	429a      	cmp	r2, r3
    bd80:	d114      	bne.n	bdac <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    bd82:	687a      	ldr	r2, [r7, #4]
    bd84:	7cd3      	ldrb	r3, [r2, #19]
    bd86:	f36f 1386 	bfc	r3, #6, #1
    bd8a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    bd8c:	4b1f      	ldr	r3, [pc, #124]	; (be0c <_usb_d_dev_in_next+0x208>)
    bd8e:	68db      	ldr	r3, [r3, #12]
    bd90:	687a      	ldr	r2, [r7, #4]
    bd92:	7c90      	ldrb	r0, [r2, #18]
    bd94:	687a      	ldr	r2, [r7, #4]
    bd96:	6892      	ldr	r2, [r2, #8]
    bd98:	4611      	mov	r1, r2
    bd9a:	4798      	blx	r3
    bd9c:	4603      	mov	r3, r0
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d124      	bne.n	bdec <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    bda2:	687a      	ldr	r2, [r7, #4]
    bda4:	7cd3      	ldrb	r3, [r2, #19]
    bda6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bdaa:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    bdac:	2100      	movs	r1, #0
    bdae:	6878      	ldr	r0, [r7, #4]
    bdb0:	4b17      	ldr	r3, [pc, #92]	; (be10 <_usb_d_dev_in_next+0x20c>)
    bdb2:	4798      	blx	r3
	return;
    bdb4:	e01b      	b.n	bdee <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    bdb6:	78fb      	ldrb	r3, [r7, #3]
    bdb8:	f083 0301 	eor.w	r3, r3, #1
    bdbc:	b2db      	uxtb	r3, r3
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	d00d      	beq.n	bdde <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    bdc2:	7afb      	ldrb	r3, [r7, #11]
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d002      	beq.n	bdce <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    bdc8:	234e      	movs	r3, #78	; 0x4e
    bdca:	777b      	strb	r3, [r7, #29]
    bdcc:	e001      	b.n	bdd2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    bdce:	234a      	movs	r3, #74	; 0x4a
    bdd0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    bdd2:	7f7a      	ldrb	r2, [r7, #29]
    bdd4:	7dfb      	ldrb	r3, [r7, #23]
    bdd6:	4619      	mov	r1, r3
    bdd8:	69b8      	ldr	r0, [r7, #24]
    bdda:	4b0e      	ldr	r3, [pc, #56]	; (be14 <_usb_d_dev_in_next+0x210>)
    bddc:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    bdde:	7dfb      	ldrb	r3, [r7, #23]
    bde0:	2201      	movs	r2, #1
    bde2:	2101      	movs	r1, #1
    bde4:	4618      	mov	r0, r3
    bde6:	4b0c      	ldr	r3, [pc, #48]	; (be18 <_usb_d_dev_in_next+0x214>)
    bde8:	4798      	blx	r3
    bdea:	e000      	b.n	bdee <_usb_d_dev_in_next+0x1ea>
			return;
    bdec:	bf00      	nop
}
    bdee:	3724      	adds	r7, #36	; 0x24
    bdf0:	46bd      	mov	sp, r7
    bdf2:	bd90      	pop	{r4, r7, pc}
    bdf4:	2000248c 	.word	0x2000248c
    bdf8:	0000b5fd 	.word	0x0000b5fd
    bdfc:	00011401 	.word	0x00011401
    be00:	0000b629 	.word	0x0000b629
    be04:	0000b771 	.word	0x0000b771
    be08:	0000af09 	.word	0x0000af09
    be0c:	200023c4 	.word	0x200023c4
    be10:	0000cf2d 	.word	0x0000cf2d
    be14:	0000aedd 	.word	0x0000aedd
    be18:	0000b829 	.word	0x0000b829

0000be1c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    be1c:	b590      	push	{r4, r7, lr}
    be1e:	b08b      	sub	sp, #44	; 0x2c
    be20:	af00      	add	r7, sp, #0
    be22:	6078      	str	r0, [r7, #4]
    be24:	460b      	mov	r3, r1
    be26:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    be28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    be2c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    be2e:	687b      	ldr	r3, [r7, #4]
    be30:	7c9b      	ldrb	r3, [r3, #18]
    be32:	f003 030f 	and.w	r3, r3, #15
    be36:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    be38:	7ffb      	ldrb	r3, [r7, #31]
    be3a:	015b      	lsls	r3, r3, #5
    be3c:	4a94      	ldr	r2, [pc, #592]	; (c090 <_usb_d_dev_out_next+0x274>)
    be3e:	4413      	add	r3, r2
    be40:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    be42:	78fb      	ldrb	r3, [r7, #3]
    be44:	2b00      	cmp	r3, #0
    be46:	d005      	beq.n	be54 <_usb_d_dev_out_next+0x38>
    be48:	69bb      	ldr	r3, [r7, #24]
    be4a:	685b      	ldr	r3, [r3, #4]
    be4c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    be50:	b29b      	uxth	r3, r3
    be52:	e000      	b.n	be56 <_usb_d_dev_out_next+0x3a>
    be54:	2300      	movs	r3, #0
    be56:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    be58:	78fb      	ldrb	r3, [r7, #3]
    be5a:	2b00      	cmp	r3, #0
    be5c:	d005      	beq.n	be6a <_usb_d_dev_out_next+0x4e>
    be5e:	69bb      	ldr	r3, [r7, #24]
    be60:	685b      	ldr	r3, [r3, #4]
    be62:	f3c3 030d 	ubfx	r3, r3, #0, #14
    be66:	b29b      	uxth	r3, r3
    be68:	e000      	b.n	be6c <_usb_d_dev_out_next+0x50>
    be6a:	2300      	movs	r3, #0
    be6c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    be6e:	687b      	ldr	r3, [r7, #4]
    be70:	8a1b      	ldrh	r3, [r3, #16]
    be72:	f240 32ff 	movw	r2, #1023	; 0x3ff
    be76:	4293      	cmp	r3, r2
    be78:	d004      	beq.n	be84 <_usb_d_dev_out_next+0x68>
    be7a:	687b      	ldr	r3, [r7, #4]
    be7c:	8a1b      	ldrh	r3, [r3, #16]
    be7e:	3b01      	subs	r3, #1
    be80:	b29b      	uxth	r3, r3
    be82:	e001      	b.n	be88 <_usb_d_dev_out_next+0x6c>
    be84:	f240 33ff 	movw	r3, #1023	; 0x3ff
    be88:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    be8a:	8aba      	ldrh	r2, [r7, #20]
    be8c:	8a7b      	ldrh	r3, [r7, #18]
    be8e:	4013      	ands	r3, r2
    be90:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    be92:	687b      	ldr	r3, [r7, #4]
    be94:	7cdb      	ldrb	r3, [r3, #19]
    be96:	f003 0307 	and.w	r3, r3, #7
    be9a:	b2db      	uxtb	r3, r3
    be9c:	2b01      	cmp	r3, #1
    be9e:	bf0c      	ite	eq
    bea0:	2301      	moveq	r3, #1
    bea2:	2300      	movne	r3, #0
    bea4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    bea6:	78fb      	ldrb	r3, [r7, #3]
    bea8:	2b00      	cmp	r3, #0
    beaa:	d004      	beq.n	beb6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    beac:	7ffb      	ldrb	r3, [r7, #31]
    beae:	2100      	movs	r1, #0
    beb0:	4618      	mov	r0, r3
    beb2:	4b78      	ldr	r3, [pc, #480]	; (c094 <_usb_d_dev_out_next+0x278>)
    beb4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    beb6:	687b      	ldr	r3, [r7, #4]
    beb8:	7cdb      	ldrb	r3, [r3, #19]
    beba:	f003 0320 	and.w	r3, r3, #32
    bebe:	b2db      	uxtb	r3, r3
    bec0:	2b00      	cmp	r3, #0
    bec2:	d01c      	beq.n	befe <_usb_d_dev_out_next+0xe2>
    bec4:	687b      	ldr	r3, [r7, #4]
    bec6:	685b      	ldr	r3, [r3, #4]
    bec8:	2b00      	cmp	r3, #0
    beca:	d018      	beq.n	befe <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    becc:	687b      	ldr	r3, [r7, #4]
    bece:	685b      	ldr	r3, [r3, #4]
    bed0:	b29a      	uxth	r2, r3
    bed2:	687b      	ldr	r3, [r7, #4]
    bed4:	689b      	ldr	r3, [r3, #8]
    bed6:	b29b      	uxth	r3, r3
    bed8:	1ad3      	subs	r3, r2, r3
    beda:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    bedc:	687b      	ldr	r3, [r7, #4]
    bede:	681a      	ldr	r2, [r3, #0]
    bee0:	687b      	ldr	r3, [r7, #4]
    bee2:	689b      	ldr	r3, [r3, #8]
    bee4:	18d0      	adds	r0, r2, r3
    bee6:	687b      	ldr	r3, [r7, #4]
    bee8:	68d9      	ldr	r1, [r3, #12]
    beea:	89ba      	ldrh	r2, [r7, #12]
    beec:	8a3b      	ldrh	r3, [r7, #16]
    beee:	429a      	cmp	r2, r3
    bef0:	d901      	bls.n	bef6 <_usb_d_dev_out_next+0xda>
    bef2:	8a3b      	ldrh	r3, [r7, #16]
    bef4:	e000      	b.n	bef8 <_usb_d_dev_out_next+0xdc>
    bef6:	89bb      	ldrh	r3, [r7, #12]
    bef8:	461a      	mov	r2, r3
    befa:	4b67      	ldr	r3, [pc, #412]	; (c098 <_usb_d_dev_out_next+0x27c>)
    befc:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    befe:	687b      	ldr	r3, [r7, #4]
    bf00:	685b      	ldr	r3, [r3, #4]
    bf02:	2b00      	cmp	r3, #0
    bf04:	d121      	bne.n	bf4a <_usb_d_dev_out_next+0x12e>
    bf06:	687b      	ldr	r3, [r7, #4]
    bf08:	7cdb      	ldrb	r3, [r3, #19]
    bf0a:	f003 0310 	and.w	r3, r3, #16
    bf0e:	b2db      	uxtb	r3, r3
    bf10:	2b00      	cmp	r3, #0
    bf12:	d01a      	beq.n	bf4a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    bf14:	687a      	ldr	r2, [r7, #4]
    bf16:	7cd3      	ldrb	r3, [r2, #19]
    bf18:	f36f 1304 	bfc	r3, #4, #1
    bf1c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    bf1e:	687a      	ldr	r2, [r7, #4]
    bf20:	7cd3      	ldrb	r3, [r2, #19]
    bf22:	f043 0320 	orr.w	r3, r3, #32
    bf26:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bf28:	687b      	ldr	r3, [r7, #4]
    bf2a:	68db      	ldr	r3, [r3, #12]
    bf2c:	461a      	mov	r2, r3
    bf2e:	7ffb      	ldrb	r3, [r7, #31]
    bf30:	2100      	movs	r1, #0
    bf32:	4618      	mov	r0, r3
    bf34:	4b59      	ldr	r3, [pc, #356]	; (c09c <_usb_d_dev_out_next+0x280>)
    bf36:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bf38:	687b      	ldr	r3, [r7, #4]
    bf3a:	8a1b      	ldrh	r3, [r3, #16]
    bf3c:	461a      	mov	r2, r3
    bf3e:	7ff8      	ldrb	r0, [r7, #31]
    bf40:	2300      	movs	r3, #0
    bf42:	2100      	movs	r1, #0
    bf44:	4c56      	ldr	r4, [pc, #344]	; (c0a0 <_usb_d_dev_out_next+0x284>)
    bf46:	47a0      	blx	r4
		goto _out_rx_exec;
    bf48:	e090      	b.n	c06c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    bf4a:	78fb      	ldrb	r3, [r7, #3]
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d010      	beq.n	bf72 <_usb_d_dev_out_next+0x156>
    bf50:	687b      	ldr	r3, [r7, #4]
    bf52:	8a1b      	ldrh	r3, [r3, #16]
    bf54:	8a3a      	ldrh	r2, [r7, #16]
    bf56:	429a      	cmp	r2, r3
    bf58:	d20b      	bcs.n	bf72 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    bf5a:	687a      	ldr	r2, [r7, #4]
    bf5c:	7cd3      	ldrb	r3, [r2, #19]
    bf5e:	f36f 1304 	bfc	r3, #4, #1
    bf62:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    bf64:	687b      	ldr	r3, [r7, #4]
    bf66:	689a      	ldr	r2, [r3, #8]
    bf68:	8abb      	ldrh	r3, [r7, #20]
    bf6a:	441a      	add	r2, r3
    bf6c:	687b      	ldr	r3, [r7, #4]
    bf6e:	609a      	str	r2, [r3, #8]
    bf70:	e05c      	b.n	c02c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    bf72:	687b      	ldr	r3, [r7, #4]
    bf74:	689a      	ldr	r2, [r3, #8]
    bf76:	8afb      	ldrh	r3, [r7, #22]
    bf78:	441a      	add	r2, r3
    bf7a:	687b      	ldr	r3, [r7, #4]
    bf7c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    bf7e:	687b      	ldr	r3, [r7, #4]
    bf80:	689a      	ldr	r2, [r3, #8]
    bf82:	687b      	ldr	r3, [r7, #4]
    bf84:	685b      	ldr	r3, [r3, #4]
    bf86:	429a      	cmp	r2, r3
    bf88:	d250      	bcs.n	c02c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    bf8a:	687b      	ldr	r3, [r7, #4]
    bf8c:	685b      	ldr	r3, [r3, #4]
    bf8e:	b29a      	uxth	r2, r3
    bf90:	687b      	ldr	r3, [r7, #4]
    bf92:	689b      	ldr	r3, [r3, #8]
    bf94:	b29b      	uxth	r3, r3
    bf96:	1ad3      	subs	r3, r2, r3
    bf98:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    bf9a:	687b      	ldr	r3, [r7, #4]
    bf9c:	7cdb      	ldrb	r3, [r3, #19]
    bf9e:	f003 0320 	and.w	r3, r3, #32
    bfa2:	b2db      	uxtb	r3, r3
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d010      	beq.n	bfca <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    bfa8:	687b      	ldr	r3, [r7, #4]
    bfaa:	8a1b      	ldrh	r3, [r3, #16]
    bfac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bfae:	429a      	cmp	r2, r3
    bfb0:	d902      	bls.n	bfb8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    bfb2:	687b      	ldr	r3, [r7, #4]
    bfb4:	8a1b      	ldrh	r3, [r3, #16]
    bfb6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	68db      	ldr	r3, [r3, #12]
    bfbc:	461a      	mov	r2, r3
    bfbe:	7ffb      	ldrb	r3, [r7, #31]
    bfc0:	2100      	movs	r1, #0
    bfc2:	4618      	mov	r0, r3
    bfc4:	4b35      	ldr	r3, [pc, #212]	; (c09c <_usb_d_dev_out_next+0x280>)
    bfc6:	4798      	blx	r3
    bfc8:	e029      	b.n	c01e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    bfca:	687b      	ldr	r3, [r7, #4]
    bfcc:	8a1b      	ldrh	r3, [r3, #16]
    bfce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bfd0:	429a      	cmp	r2, r3
    bfd2:	d90f      	bls.n	bff4 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    bfd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    bfd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    bfda:	d903      	bls.n	bfe4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    bfdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bfe0:	84fb      	strh	r3, [r7, #38]	; 0x26
    bfe2:	e011      	b.n	c008 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    bfe4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bfe6:	8a7b      	ldrh	r3, [r7, #18]
    bfe8:	4013      	ands	r3, r2
    bfea:	b29b      	uxth	r3, r3
    bfec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bfee:	1ad3      	subs	r3, r2, r3
    bff0:	84fb      	strh	r3, [r7, #38]	; 0x26
    bff2:	e009      	b.n	c008 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    bff4:	687b      	ldr	r3, [r7, #4]
    bff6:	8a1b      	ldrh	r3, [r3, #16]
    bff8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    bffa:	429a      	cmp	r2, r3
    bffc:	d204      	bcs.n	c008 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    bffe:	687a      	ldr	r2, [r7, #4]
    c000:	7cd3      	ldrb	r3, [r2, #19]
    c002:	f043 0320 	orr.w	r3, r3, #32
    c006:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c008:	687b      	ldr	r3, [r7, #4]
    c00a:	681a      	ldr	r2, [r3, #0]
    c00c:	687b      	ldr	r3, [r7, #4]
    c00e:	689b      	ldr	r3, [r3, #8]
    c010:	4413      	add	r3, r2
    c012:	461a      	mov	r2, r3
    c014:	7ffb      	ldrb	r3, [r7, #31]
    c016:	2100      	movs	r1, #0
    c018:	4618      	mov	r0, r3
    c01a:	4b20      	ldr	r3, [pc, #128]	; (c09c <_usb_d_dev_out_next+0x280>)
    c01c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    c01e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    c020:	7ff8      	ldrb	r0, [r7, #31]
    c022:	2300      	movs	r3, #0
    c024:	2100      	movs	r1, #0
    c026:	4c1e      	ldr	r4, [pc, #120]	; (c0a0 <_usb_d_dev_out_next+0x284>)
    c028:	47a0      	blx	r4
			goto _out_rx_exec;
    c02a:	e01f      	b.n	c06c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    c02c:	7bfb      	ldrb	r3, [r7, #15]
    c02e:	2b00      	cmp	r3, #0
    c030:	d006      	beq.n	c040 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    c032:	7ffb      	ldrb	r3, [r7, #31]
    c034:	222d      	movs	r2, #45	; 0x2d
    c036:	4619      	mov	r1, r3
    c038:	6a38      	ldr	r0, [r7, #32]
    c03a:	4b1a      	ldr	r3, [pc, #104]	; (c0a4 <_usb_d_dev_out_next+0x288>)
    c03c:	4798      	blx	r3
    c03e:	e005      	b.n	c04c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    c040:	7ffb      	ldrb	r3, [r7, #31]
    c042:	2225      	movs	r2, #37	; 0x25
    c044:	4619      	mov	r1, r3
    c046:	6a38      	ldr	r0, [r7, #32]
    c048:	4b16      	ldr	r3, [pc, #88]	; (c0a4 <_usb_d_dev_out_next+0x288>)
    c04a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    c04c:	7ffb      	ldrb	r3, [r7, #31]
    c04e:	2b00      	cmp	r3, #0
    c050:	d107      	bne.n	c062 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c052:	687b      	ldr	r3, [r7, #4]
    c054:	68db      	ldr	r3, [r3, #12]
    c056:	461a      	mov	r2, r3
    c058:	7ffb      	ldrb	r3, [r7, #31]
    c05a:	2100      	movs	r1, #0
    c05c:	4618      	mov	r0, r3
    c05e:	4b0f      	ldr	r3, [pc, #60]	; (c09c <_usb_d_dev_out_next+0x280>)
    c060:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c062:	2100      	movs	r1, #0
    c064:	6878      	ldr	r0, [r7, #4]
    c066:	4b10      	ldr	r3, [pc, #64]	; (c0a8 <_usb_d_dev_out_next+0x28c>)
    c068:	4798      	blx	r3
	return;
    c06a:	e031      	b.n	c0d0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    c06c:	78fb      	ldrb	r3, [r7, #3]
    c06e:	f083 0301 	eor.w	r3, r3, #1
    c072:	b2db      	uxtb	r3, r3
    c074:	2b00      	cmp	r3, #0
    c076:	d025      	beq.n	c0c4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    c078:	7bfb      	ldrb	r3, [r7, #15]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d018      	beq.n	c0b0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    c07e:	7ffb      	ldrb	r3, [r7, #31]
    c080:	2101      	movs	r1, #1
    c082:	4618      	mov	r0, r3
    c084:	4b09      	ldr	r3, [pc, #36]	; (c0ac <_usb_d_dev_out_next+0x290>)
    c086:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    c088:	232d      	movs	r3, #45	; 0x2d
    c08a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    c08e:	e012      	b.n	c0b6 <_usb_d_dev_out_next+0x29a>
    c090:	2000248c 	.word	0x2000248c
    c094:	0000b5fd 	.word	0x0000b5fd
    c098:	00011401 	.word	0x00011401
    c09c:	0000b629 	.word	0x0000b629
    c0a0:	0000b7b1 	.word	0x0000b7b1
    c0a4:	0000af09 	.word	0x0000af09
    c0a8:	0000cf2d 	.word	0x0000cf2d
    c0ac:	0000b7f1 	.word	0x0000b7f1
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    c0b0:	2325      	movs	r3, #37	; 0x25
    c0b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    c0b6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    c0ba:	7ffb      	ldrb	r3, [r7, #31]
    c0bc:	4619      	mov	r1, r3
    c0be:	6a38      	ldr	r0, [r7, #32]
    c0c0:	4b05      	ldr	r3, [pc, #20]	; (c0d8 <_usb_d_dev_out_next+0x2bc>)
    c0c2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    c0c4:	7ffb      	ldrb	r3, [r7, #31]
    c0c6:	2201      	movs	r2, #1
    c0c8:	2100      	movs	r1, #0
    c0ca:	4618      	mov	r0, r3
    c0cc:	4b03      	ldr	r3, [pc, #12]	; (c0dc <_usb_d_dev_out_next+0x2c0>)
    c0ce:	4798      	blx	r3
}
    c0d0:	372c      	adds	r7, #44	; 0x2c
    c0d2:	46bd      	mov	sp, r7
    c0d4:	bd90      	pop	{r4, r7, pc}
    c0d6:	bf00      	nop
    c0d8:	0000aedd 	.word	0x0000aedd
    c0dc:	0000b881 	.word	0x0000b881

0000c0e0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    c0e0:	b580      	push	{r7, lr}
    c0e2:	b084      	sub	sp, #16
    c0e4:	af00      	add	r7, sp, #0
    c0e6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    c0e8:	687b      	ldr	r3, [r7, #4]
    c0ea:	7c9b      	ldrb	r3, [r3, #18]
    c0ec:	f003 030f 	and.w	r3, r3, #15
    c0f0:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c0f2:	687b      	ldr	r3, [r7, #4]
    c0f4:	7cdb      	ldrb	r3, [r3, #19]
    c0f6:	f003 0307 	and.w	r3, r3, #7
    c0fa:	b2db      	uxtb	r3, r3
    c0fc:	2b01      	cmp	r3, #1
    c0fe:	bf0c      	ite	eq
    c100:	2301      	moveq	r3, #1
    c102:	2300      	movne	r3, #0
    c104:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    c106:	7bbb      	ldrb	r3, [r7, #14]
    c108:	f083 0301 	eor.w	r3, r3, #1
    c10c:	b2db      	uxtb	r3, r3
    c10e:	2b00      	cmp	r3, #0
    c110:	d008      	beq.n	c124 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    c112:	7bfb      	ldrb	r3, [r7, #15]
    c114:	4618      	mov	r0, r3
    c116:	4b20      	ldr	r3, [pc, #128]	; (c198 <_usb_d_dev_handle_setup+0xb8>)
    c118:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    c11a:	7bfb      	ldrb	r3, [r7, #15]
    c11c:	4618      	mov	r0, r3
    c11e:	4b1f      	ldr	r3, [pc, #124]	; (c19c <_usb_d_dev_handle_setup+0xbc>)
    c120:	4798      	blx	r3
		return;
    c122:	e036      	b.n	c192 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    c124:	687b      	ldr	r3, [r7, #4]
    c126:	7cdb      	ldrb	r3, [r3, #19]
    c128:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c12c:	b2db      	uxtb	r3, r3
    c12e:	2b00      	cmp	r3, #0
    c130:	d010      	beq.n	c154 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    c132:	687a      	ldr	r2, [r7, #4]
    c134:	7cd3      	ldrb	r3, [r2, #19]
    c136:	f36f 1386 	bfc	r3, #6, #1
    c13a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c13c:	7bfb      	ldrb	r3, [r7, #15]
    c13e:	2200      	movs	r2, #0
    c140:	2101      	movs	r1, #1
    c142:	4618      	mov	r0, r3
    c144:	4b16      	ldr	r3, [pc, #88]	; (c1a0 <_usb_d_dev_handle_setup+0xc0>)
    c146:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    c148:	7bfb      	ldrb	r3, [r7, #15]
    c14a:	2200      	movs	r2, #0
    c14c:	2100      	movs	r1, #0
    c14e:	4618      	mov	r0, r3
    c150:	4b14      	ldr	r3, [pc, #80]	; (c1a4 <_usb_d_dev_handle_setup+0xc4>)
    c152:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    c154:	687a      	ldr	r2, [r7, #4]
    c156:	7cd3      	ldrb	r3, [r2, #19]
    c158:	f36f 03c3 	bfc	r3, #3, #1
    c15c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    c15e:	7bfb      	ldrb	r3, [r7, #15]
    c160:	2100      	movs	r1, #0
    c162:	4618      	mov	r0, r3
    c164:	4b10      	ldr	r3, [pc, #64]	; (c1a8 <_usb_d_dev_handle_setup+0xc8>)
    c166:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    c168:	7bfb      	ldrb	r3, [r7, #15]
    c16a:	2101      	movs	r1, #1
    c16c:	4618      	mov	r0, r3
    c16e:	4b0e      	ldr	r3, [pc, #56]	; (c1a8 <_usb_d_dev_handle_setup+0xc8>)
    c170:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    c172:	7bfb      	ldrb	r3, [r7, #15]
    c174:	216f      	movs	r1, #111	; 0x6f
    c176:	4618      	mov	r0, r3
    c178:	4b0c      	ldr	r3, [pc, #48]	; (c1ac <_usb_d_dev_handle_setup+0xcc>)
    c17a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    c17c:	7bfb      	ldrb	r3, [r7, #15]
    c17e:	216f      	movs	r1, #111	; 0x6f
    c180:	4618      	mov	r0, r3
    c182:	4b0b      	ldr	r3, [pc, #44]	; (c1b0 <_usb_d_dev_handle_setup+0xd0>)
    c184:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    c186:	4b0b      	ldr	r3, [pc, #44]	; (c1b4 <_usb_d_dev_handle_setup+0xd4>)
    c188:	689b      	ldr	r3, [r3, #8]
    c18a:	687a      	ldr	r2, [r7, #4]
    c18c:	7c92      	ldrb	r2, [r2, #18]
    c18e:	4610      	mov	r0, r2
    c190:	4798      	blx	r3
}
    c192:	3710      	adds	r7, #16
    c194:	46bd      	mov	sp, r7
    c196:	bd80      	pop	{r7, pc}
    c198:	0000b585 	.word	0x0000b585
    c19c:	0000b531 	.word	0x0000b531
    c1a0:	0000b829 	.word	0x0000b829
    c1a4:	0000b881 	.word	0x0000b881
    c1a8:	0000b7f1 	.word	0x0000b7f1
    c1ac:	0000b331 	.word	0x0000b331
    c1b0:	0000b381 	.word	0x0000b381
    c1b4:	200023c4 	.word	0x200023c4

0000c1b8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    c1b8:	b580      	push	{r7, lr}
    c1ba:	b084      	sub	sp, #16
    c1bc:	af00      	add	r7, sp, #0
    c1be:	6078      	str	r0, [r7, #4]
    c1c0:	460b      	mov	r3, r1
    c1c2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c1c4:	687b      	ldr	r3, [r7, #4]
    c1c6:	7c9b      	ldrb	r3, [r3, #18]
    c1c8:	f003 030f 	and.w	r3, r3, #15
    c1cc:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    c1ce:	78f9      	ldrb	r1, [r7, #3]
    c1d0:	7bfb      	ldrb	r3, [r7, #15]
    c1d2:	2200      	movs	r2, #0
    c1d4:	4618      	mov	r0, r3
    c1d6:	4b07      	ldr	r3, [pc, #28]	; (c1f4 <_usb_d_dev_handle_stall+0x3c>)
    c1d8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c1da:	4b07      	ldr	r3, [pc, #28]	; (c1f8 <_usb_d_dev_handle_stall+0x40>)
    c1dc:	691b      	ldr	r3, [r3, #16]
    c1de:	687a      	ldr	r2, [r7, #4]
    c1e0:	7c90      	ldrb	r0, [r2, #18]
    c1e2:	687a      	ldr	r2, [r7, #4]
    c1e4:	6892      	ldr	r2, [r2, #8]
    c1e6:	2101      	movs	r1, #1
    c1e8:	4798      	blx	r3
}
    c1ea:	bf00      	nop
    c1ec:	3710      	adds	r7, #16
    c1ee:	46bd      	mov	sp, r7
    c1f0:	bd80      	pop	{r7, pc}
    c1f2:	bf00      	nop
    c1f4:	0000b4e5 	.word	0x0000b4e5
    c1f8:	200023c4 	.word	0x200023c4

0000c1fc <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b088      	sub	sp, #32
    c200:	af00      	add	r7, sp, #0
    c202:	6078      	str	r0, [r7, #4]
    c204:	460b      	mov	r3, r1
    c206:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    c208:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c20c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    c20e:	687b      	ldr	r3, [r7, #4]
    c210:	7c9b      	ldrb	r3, [r3, #18]
    c212:	f003 030f 	and.w	r3, r3, #15
    c216:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    c218:	4b61      	ldr	r3, [pc, #388]	; (c3a0 <_usb_d_dev_handle_trfail+0x1a4>)
    c21a:	881b      	ldrh	r3, [r3, #0]
    c21c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    c21e:	7efb      	ldrb	r3, [r7, #27]
    c220:	015b      	lsls	r3, r3, #5
    c222:	4a60      	ldr	r2, [pc, #384]	; (c3a4 <_usb_d_dev_handle_trfail+0x1a8>)
    c224:	4413      	add	r3, r2
    c226:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    c228:	78fb      	ldrb	r3, [r7, #3]
    c22a:	2b00      	cmp	r3, #0
    c22c:	d006      	beq.n	c23c <_usb_d_dev_handle_trfail+0x40>
    c22e:	7efb      	ldrb	r3, [r7, #27]
    c230:	4619      	mov	r1, r3
    c232:	69f8      	ldr	r0, [r7, #28]
    c234:	4b5c      	ldr	r3, [pc, #368]	; (c3a8 <_usb_d_dev_handle_trfail+0x1ac>)
    c236:	4798      	blx	r3
    c238:	4603      	mov	r3, r0
    c23a:	e005      	b.n	c248 <_usb_d_dev_handle_trfail+0x4c>
    c23c:	7efb      	ldrb	r3, [r7, #27]
    c23e:	4619      	mov	r1, r3
    c240:	69f8      	ldr	r0, [r7, #28]
    c242:	4b5a      	ldr	r3, [pc, #360]	; (c3ac <_usb_d_dev_handle_trfail+0x1b0>)
    c244:	4798      	blx	r3
    c246:	4603      	mov	r3, r0
    c248:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c24a:	687b      	ldr	r3, [r7, #4]
    c24c:	7cdb      	ldrb	r3, [r3, #19]
    c24e:	f003 0307 	and.w	r3, r3, #7
    c252:	b2db      	uxtb	r3, r3
    c254:	2b01      	cmp	r3, #1
    c256:	bf0c      	ite	eq
    c258:	2301      	moveq	r3, #1
    c25a:	2300      	movne	r3, #0
    c25c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    c25e:	78fb      	ldrb	r3, [r7, #3]
    c260:	011b      	lsls	r3, r3, #4
    c262:	697a      	ldr	r2, [r7, #20]
    c264:	4413      	add	r3, r2
    c266:	7a9b      	ldrb	r3, [r3, #10]
    c268:	b2db      	uxtb	r3, r3
    c26a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c26c:	7cfb      	ldrb	r3, [r7, #19]
    c26e:	2b02      	cmp	r3, #2
    c270:	d12f      	bne.n	c2d2 <_usb_d_dev_handle_trfail+0xd6>
    c272:	7b3b      	ldrb	r3, [r7, #12]
    c274:	f003 0301 	and.w	r3, r3, #1
    c278:	b2db      	uxtb	r3, r3
    c27a:	2b00      	cmp	r3, #0
    c27c:	d029      	beq.n	c2d2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    c27e:	78fb      	ldrb	r3, [r7, #3]
    c280:	011b      	lsls	r3, r3, #4
    c282:	697a      	ldr	r2, [r7, #20]
    c284:	441a      	add	r2, r3
    c286:	7a93      	ldrb	r3, [r2, #10]
    c288:	f36f 0300 	bfc	r3, #0, #1
    c28c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c28e:	78fb      	ldrb	r3, [r7, #3]
    c290:	f107 0220 	add.w	r2, r7, #32
    c294:	4413      	add	r3, r2
    c296:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c29a:	7efb      	ldrb	r3, [r7, #27]
    c29c:	4619      	mov	r1, r3
    c29e:	69f8      	ldr	r0, [r7, #28]
    c2a0:	4b43      	ldr	r3, [pc, #268]	; (c3b0 <_usb_d_dev_handle_trfail+0x1b4>)
    c2a2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    c2a4:	78fb      	ldrb	r3, [r7, #3]
    c2a6:	f107 0220 	add.w	r2, r7, #32
    c2aa:	4413      	add	r3, r2
    c2ac:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c2b0:	7efb      	ldrb	r3, [r7, #27]
    c2b2:	4619      	mov	r1, r3
    c2b4:	69f8      	ldr	r0, [r7, #28]
    c2b6:	4b3f      	ldr	r3, [pc, #252]	; (c3b4 <_usb_d_dev_handle_trfail+0x1b8>)
    c2b8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    c2ba:	78fb      	ldrb	r3, [r7, #3]
    c2bc:	2b00      	cmp	r3, #0
    c2be:	bf14      	ite	ne
    c2c0:	2301      	movne	r3, #1
    c2c2:	2300      	moveq	r3, #0
    c2c4:	b2db      	uxtb	r3, r3
    c2c6:	2204      	movs	r2, #4
    c2c8:	4619      	mov	r1, r3
    c2ca:	6878      	ldr	r0, [r7, #4]
    c2cc:	4b3a      	ldr	r3, [pc, #232]	; (c3b8 <_usb_d_dev_handle_trfail+0x1bc>)
    c2ce:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    c2d0:	e062      	b.n	c398 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    c2d2:	7b3b      	ldrb	r3, [r7, #12]
    c2d4:	f003 0302 	and.w	r3, r3, #2
    c2d8:	b2db      	uxtb	r3, r3
    c2da:	2b00      	cmp	r3, #0
    c2dc:	d040      	beq.n	c360 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    c2de:	78fb      	ldrb	r3, [r7, #3]
    c2e0:	011b      	lsls	r3, r3, #4
    c2e2:	697a      	ldr	r2, [r7, #20]
    c2e4:	441a      	add	r2, r3
    c2e6:	7a93      	ldrb	r3, [r2, #10]
    c2e8:	f36f 0341 	bfc	r3, #1, #1
    c2ec:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c2ee:	78fb      	ldrb	r3, [r7, #3]
    c2f0:	f107 0220 	add.w	r2, r7, #32
    c2f4:	4413      	add	r3, r2
    c2f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c2fa:	7efb      	ldrb	r3, [r7, #27]
    c2fc:	4619      	mov	r1, r3
    c2fe:	69f8      	ldr	r0, [r7, #28]
    c300:	4b2b      	ldr	r3, [pc, #172]	; (c3b0 <_usb_d_dev_handle_trfail+0x1b4>)
    c302:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    c304:	78fb      	ldrb	r3, [r7, #3]
    c306:	f107 0220 	add.w	r2, r7, #32
    c30a:	4413      	add	r3, r2
    c30c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c310:	7efb      	ldrb	r3, [r7, #27]
    c312:	4619      	mov	r1, r3
    c314:	69f8      	ldr	r0, [r7, #28]
    c316:	4b27      	ldr	r3, [pc, #156]	; (c3b4 <_usb_d_dev_handle_trfail+0x1b8>)
    c318:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    c31a:	7cbb      	ldrb	r3, [r7, #18]
    c31c:	2b00      	cmp	r3, #0
    c31e:	d03b      	beq.n	c398 <_usb_d_dev_handle_trfail+0x19c>
    c320:	687b      	ldr	r3, [r7, #4]
    c322:	7cdb      	ldrb	r3, [r3, #19]
    c324:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c328:	b2db      	uxtb	r3, r3
    c32a:	2b00      	cmp	r3, #0
    c32c:	d034      	beq.n	c398 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    c32e:	687b      	ldr	r3, [r7, #4]
    c330:	7cdb      	ldrb	r3, [r3, #19]
    c332:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c336:	b2db      	uxtb	r3, r3
    c338:	461a      	mov	r2, r3
    c33a:	78fb      	ldrb	r3, [r7, #3]
    c33c:	4293      	cmp	r3, r2
    c33e:	d02b      	beq.n	c398 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c340:	687b      	ldr	r3, [r7, #4]
    c342:	7cdb      	ldrb	r3, [r3, #19]
    c344:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c348:	b2db      	uxtb	r3, r3
    c34a:	2b00      	cmp	r3, #0
    c34c:	bf14      	ite	ne
    c34e:	2301      	movne	r3, #1
    c350:	2300      	moveq	r3, #0
    c352:	b2db      	uxtb	r3, r3
    c354:	2200      	movs	r2, #0
    c356:	4619      	mov	r1, r3
    c358:	6878      	ldr	r0, [r7, #4]
    c35a:	4b17      	ldr	r3, [pc, #92]	; (c3b8 <_usb_d_dev_handle_trfail+0x1bc>)
    c35c:	4798      	blx	r3
}
    c35e:	e01b      	b.n	c398 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    c360:	78fa      	ldrb	r2, [r7, #3]
    c362:	7efb      	ldrb	r3, [r7, #27]
    c364:	4611      	mov	r1, r2
    c366:	4618      	mov	r0, r3
    c368:	4b14      	ldr	r3, [pc, #80]	; (c3bc <_usb_d_dev_handle_trfail+0x1c0>)
    c36a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c36c:	78fb      	ldrb	r3, [r7, #3]
    c36e:	f107 0220 	add.w	r2, r7, #32
    c372:	4413      	add	r3, r2
    c374:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c378:	7efb      	ldrb	r3, [r7, #27]
    c37a:	4619      	mov	r1, r3
    c37c:	69f8      	ldr	r0, [r7, #28]
    c37e:	4b0c      	ldr	r3, [pc, #48]	; (c3b0 <_usb_d_dev_handle_trfail+0x1b4>)
    c380:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    c382:	78fb      	ldrb	r3, [r7, #3]
    c384:	f107 0220 	add.w	r2, r7, #32
    c388:	4413      	add	r3, r2
    c38a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    c38e:	7efb      	ldrb	r3, [r7, #27]
    c390:	4619      	mov	r1, r3
    c392:	69f8      	ldr	r0, [r7, #28]
    c394:	4b07      	ldr	r3, [pc, #28]	; (c3b4 <_usb_d_dev_handle_trfail+0x1b8>)
    c396:	4798      	blx	r3
}
    c398:	bf00      	nop
    c39a:	3720      	adds	r7, #32
    c39c:	46bd      	mov	sp, r7
    c39e:	bd80      	pop	{r7, pc}
    c3a0:	0001294c 	.word	0x0001294c
    c3a4:	2000248c 	.word	0x2000248c
    c3a8:	0000af65 	.word	0x0000af65
    c3ac:	0000af35 	.word	0x0000af35
    c3b0:	0000ae09 	.word	0x0000ae09
    c3b4:	0000af09 	.word	0x0000af09
    c3b8:	0000cf75 	.word	0x0000cf75
    c3bc:	0000b7f1 	.word	0x0000b7f1

0000c3c0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c3c0:	b580      	push	{r7, lr}
    c3c2:	b082      	sub	sp, #8
    c3c4:	af00      	add	r7, sp, #0
    c3c6:	6078      	str	r0, [r7, #4]
    c3c8:	460b      	mov	r3, r1
    c3ca:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c3cc:	78fb      	ldrb	r3, [r7, #3]
    c3ce:	f003 0310 	and.w	r3, r3, #16
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d003      	beq.n	c3de <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    c3d6:	6878      	ldr	r0, [r7, #4]
    c3d8:	4b0c      	ldr	r3, [pc, #48]	; (c40c <_usb_d_dev_trans_setup_isr+0x4c>)
    c3da:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    c3dc:	e012      	b.n	c404 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c3de:	78fb      	ldrb	r3, [r7, #3]
    c3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	d004      	beq.n	c3f2 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    c3e8:	2101      	movs	r1, #1
    c3ea:	6878      	ldr	r0, [r7, #4]
    c3ec:	4b08      	ldr	r3, [pc, #32]	; (c410 <_usb_d_dev_trans_setup_isr+0x50>)
    c3ee:	4798      	blx	r3
}
    c3f0:	e008      	b.n	c404 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c3f2:	78fb      	ldrb	r3, [r7, #3]
    c3f4:	f003 0320 	and.w	r3, r3, #32
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	d003      	beq.n	c404 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    c3fc:	2100      	movs	r1, #0
    c3fe:	6878      	ldr	r0, [r7, #4]
    c400:	4b03      	ldr	r3, [pc, #12]	; (c410 <_usb_d_dev_trans_setup_isr+0x50>)
    c402:	4798      	blx	r3
}
    c404:	bf00      	nop
    c406:	3708      	adds	r7, #8
    c408:	46bd      	mov	sp, r7
    c40a:	bd80      	pop	{r7, pc}
    c40c:	0000c0e1 	.word	0x0000c0e1
    c410:	0000c1b9 	.word	0x0000c1b9

0000c414 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c414:	b580      	push	{r7, lr}
    c416:	b082      	sub	sp, #8
    c418:	af00      	add	r7, sp, #0
    c41a:	6078      	str	r0, [r7, #4]
    c41c:	460b      	mov	r3, r1
    c41e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c420:	78fb      	ldrb	r3, [r7, #3]
    c422:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c426:	2b00      	cmp	r3, #0
    c428:	d004      	beq.n	c434 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    c42a:	2101      	movs	r1, #1
    c42c:	6878      	ldr	r0, [r7, #4]
    c42e:	4b1a      	ldr	r3, [pc, #104]	; (c498 <_usb_d_dev_trans_in_isr+0x84>)
    c430:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    c432:	e02c      	b.n	c48e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c434:	78fb      	ldrb	r3, [r7, #3]
    c436:	f003 0308 	and.w	r3, r3, #8
    c43a:	2b00      	cmp	r3, #0
    c43c:	d004      	beq.n	c448 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    c43e:	2101      	movs	r1, #1
    c440:	6878      	ldr	r0, [r7, #4]
    c442:	4b16      	ldr	r3, [pc, #88]	; (c49c <_usb_d_dev_trans_in_isr+0x88>)
    c444:	4798      	blx	r3
}
    c446:	e022      	b.n	c48e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    c448:	78fb      	ldrb	r3, [r7, #3]
    c44a:	f003 0302 	and.w	r3, r3, #2
    c44e:	2b00      	cmp	r3, #0
    c450:	d004      	beq.n	c45c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    c452:	2101      	movs	r1, #1
    c454:	6878      	ldr	r0, [r7, #4]
    c456:	4b12      	ldr	r3, [pc, #72]	; (c4a0 <_usb_d_dev_trans_in_isr+0x8c>)
    c458:	4798      	blx	r3
}
    c45a:	e018      	b.n	c48e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c45c:	687b      	ldr	r3, [r7, #4]
    c45e:	7cdb      	ldrb	r3, [r3, #19]
    c460:	f003 0307 	and.w	r3, r3, #7
    c464:	b2db      	uxtb	r3, r3
    c466:	2b01      	cmp	r3, #1
    c468:	d111      	bne.n	c48e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c46a:	78fb      	ldrb	r3, [r7, #3]
    c46c:	f003 0304 	and.w	r3, r3, #4
    c470:	2b00      	cmp	r3, #0
    c472:	d004      	beq.n	c47e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    c474:	2100      	movs	r1, #0
    c476:	6878      	ldr	r0, [r7, #4]
    c478:	4b08      	ldr	r3, [pc, #32]	; (c49c <_usb_d_dev_trans_in_isr+0x88>)
    c47a:	4798      	blx	r3
}
    c47c:	e007      	b.n	c48e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c47e:	78fb      	ldrb	r3, [r7, #3]
    c480:	f003 0310 	and.w	r3, r3, #16
    c484:	2b00      	cmp	r3, #0
    c486:	d002      	beq.n	c48e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c488:	6878      	ldr	r0, [r7, #4]
    c48a:	4b06      	ldr	r3, [pc, #24]	; (c4a4 <_usb_d_dev_trans_in_isr+0x90>)
    c48c:	4798      	blx	r3
}
    c48e:	bf00      	nop
    c490:	3708      	adds	r7, #8
    c492:	46bd      	mov	sp, r7
    c494:	bd80      	pop	{r7, pc}
    c496:	bf00      	nop
    c498:	0000c1b9 	.word	0x0000c1b9
    c49c:	0000c1fd 	.word	0x0000c1fd
    c4a0:	0000bc05 	.word	0x0000bc05
    c4a4:	0000c0e1 	.word	0x0000c0e1

0000c4a8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    c4a8:	b580      	push	{r7, lr}
    c4aa:	b082      	sub	sp, #8
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	6078      	str	r0, [r7, #4]
    c4b0:	460b      	mov	r3, r1
    c4b2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c4b4:	78fb      	ldrb	r3, [r7, #3]
    c4b6:	f003 0320 	and.w	r3, r3, #32
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d004      	beq.n	c4c8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    c4be:	2100      	movs	r1, #0
    c4c0:	6878      	ldr	r0, [r7, #4]
    c4c2:	4b1a      	ldr	r3, [pc, #104]	; (c52c <_usb_d_dev_trans_out_isr+0x84>)
    c4c4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    c4c6:	e02c      	b.n	c522 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c4c8:	78fb      	ldrb	r3, [r7, #3]
    c4ca:	f003 0304 	and.w	r3, r3, #4
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	d004      	beq.n	c4dc <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    c4d2:	2100      	movs	r1, #0
    c4d4:	6878      	ldr	r0, [r7, #4]
    c4d6:	4b16      	ldr	r3, [pc, #88]	; (c530 <_usb_d_dev_trans_out_isr+0x88>)
    c4d8:	4798      	blx	r3
}
    c4da:	e022      	b.n	c522 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c4dc:	78fb      	ldrb	r3, [r7, #3]
    c4de:	f003 0301 	and.w	r3, r3, #1
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d004      	beq.n	c4f0 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    c4e6:	2101      	movs	r1, #1
    c4e8:	6878      	ldr	r0, [r7, #4]
    c4ea:	4b12      	ldr	r3, [pc, #72]	; (c534 <_usb_d_dev_trans_out_isr+0x8c>)
    c4ec:	4798      	blx	r3
}
    c4ee:	e018      	b.n	c522 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c4f0:	687b      	ldr	r3, [r7, #4]
    c4f2:	7cdb      	ldrb	r3, [r3, #19]
    c4f4:	f003 0307 	and.w	r3, r3, #7
    c4f8:	b2db      	uxtb	r3, r3
    c4fa:	2b01      	cmp	r3, #1
    c4fc:	d111      	bne.n	c522 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c4fe:	78fb      	ldrb	r3, [r7, #3]
    c500:	f003 0308 	and.w	r3, r3, #8
    c504:	2b00      	cmp	r3, #0
    c506:	d004      	beq.n	c512 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    c508:	2101      	movs	r1, #1
    c50a:	6878      	ldr	r0, [r7, #4]
    c50c:	4b08      	ldr	r3, [pc, #32]	; (c530 <_usb_d_dev_trans_out_isr+0x88>)
    c50e:	4798      	blx	r3
}
    c510:	e007      	b.n	c522 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c512:	78fb      	ldrb	r3, [r7, #3]
    c514:	f003 0310 	and.w	r3, r3, #16
    c518:	2b00      	cmp	r3, #0
    c51a:	d002      	beq.n	c522 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    c51c:	6878      	ldr	r0, [r7, #4]
    c51e:	4b06      	ldr	r3, [pc, #24]	; (c538 <_usb_d_dev_trans_out_isr+0x90>)
    c520:	4798      	blx	r3
}
    c522:	bf00      	nop
    c524:	3708      	adds	r7, #8
    c526:	46bd      	mov	sp, r7
    c528:	bd80      	pop	{r7, pc}
    c52a:	bf00      	nop
    c52c:	0000c1b9 	.word	0x0000c1b9
    c530:	0000c1fd 	.word	0x0000c1fd
    c534:	0000be1d 	.word	0x0000be1d
    c538:	0000c0e1 	.word	0x0000c0e1

0000c53c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    c53c:	b580      	push	{r7, lr}
    c53e:	b084      	sub	sp, #16
    c540:	af00      	add	r7, sp, #0
    c542:	6078      	str	r0, [r7, #4]
    c544:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    c546:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c54a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c54c:	683b      	ldr	r3, [r7, #0]
    c54e:	7c9b      	ldrb	r3, [r3, #18]
    c550:	f003 030f 	and.w	r3, r3, #15
    c554:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    c556:	7afb      	ldrb	r3, [r7, #11]
    c558:	2201      	movs	r2, #1
    c55a:	409a      	lsls	r2, r3
    c55c:	687b      	ldr	r3, [r7, #4]
    c55e:	4013      	ands	r3, r2
    c560:	2b00      	cmp	r3, #0
    c562:	d03d      	beq.n	c5e0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c564:	7afb      	ldrb	r3, [r7, #11]
    c566:	68fa      	ldr	r2, [r7, #12]
    c568:	3308      	adds	r3, #8
    c56a:	015b      	lsls	r3, r3, #5
    c56c:	4413      	add	r3, r2
    c56e:	3307      	adds	r3, #7
    c570:	781b      	ldrb	r3, [r3, #0]
    c572:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c574:	7afb      	ldrb	r3, [r7, #11]
    c576:	68fa      	ldr	r2, [r7, #12]
    c578:	015b      	lsls	r3, r3, #5
    c57a:	4413      	add	r3, r2
    c57c:	f203 1309 	addw	r3, r3, #265	; 0x109
    c580:	781b      	ldrb	r3, [r3, #0]
    c582:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    c584:	7aba      	ldrb	r2, [r7, #10]
    c586:	7a7b      	ldrb	r3, [r7, #9]
    c588:	4013      	ands	r3, r2
    c58a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    c58c:	7abb      	ldrb	r3, [r7, #10]
    c58e:	2b00      	cmp	r3, #0
    c590:	d027      	beq.n	c5e2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c592:	683b      	ldr	r3, [r7, #0]
    c594:	7cdb      	ldrb	r3, [r3, #19]
    c596:	f003 0307 	and.w	r3, r3, #7
    c59a:	b2db      	uxtb	r3, r3
    c59c:	2b01      	cmp	r3, #1
    c59e:	d10c      	bne.n	c5ba <_usb_d_dev_handle_eps+0x7e>
    c5a0:	683b      	ldr	r3, [r7, #0]
    c5a2:	7cdb      	ldrb	r3, [r3, #19]
    c5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c5a8:	b2db      	uxtb	r3, r3
    c5aa:	2b00      	cmp	r3, #0
    c5ac:	d105      	bne.n	c5ba <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    c5ae:	7abb      	ldrb	r3, [r7, #10]
    c5b0:	4619      	mov	r1, r3
    c5b2:	6838      	ldr	r0, [r7, #0]
    c5b4:	4b0c      	ldr	r3, [pc, #48]	; (c5e8 <_usb_d_dev_handle_eps+0xac>)
    c5b6:	4798      	blx	r3
    c5b8:	e013      	b.n	c5e2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c5ba:	683b      	ldr	r3, [r7, #0]
    c5bc:	7cdb      	ldrb	r3, [r3, #19]
    c5be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c5c2:	b2db      	uxtb	r3, r3
    c5c4:	2b00      	cmp	r3, #0
    c5c6:	d005      	beq.n	c5d4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    c5c8:	7abb      	ldrb	r3, [r7, #10]
    c5ca:	4619      	mov	r1, r3
    c5cc:	6838      	ldr	r0, [r7, #0]
    c5ce:	4b07      	ldr	r3, [pc, #28]	; (c5ec <_usb_d_dev_handle_eps+0xb0>)
    c5d0:	4798      	blx	r3
    c5d2:	e006      	b.n	c5e2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    c5d4:	7abb      	ldrb	r3, [r7, #10]
    c5d6:	4619      	mov	r1, r3
    c5d8:	6838      	ldr	r0, [r7, #0]
    c5da:	4b05      	ldr	r3, [pc, #20]	; (c5f0 <_usb_d_dev_handle_eps+0xb4>)
    c5dc:	4798      	blx	r3
    c5de:	e000      	b.n	c5e2 <_usb_d_dev_handle_eps+0xa6>
		return;
    c5e0:	bf00      	nop
		}
	}
}
    c5e2:	3710      	adds	r7, #16
    c5e4:	46bd      	mov	sp, r7
    c5e6:	bd80      	pop	{r7, pc}
    c5e8:	0000c3c1 	.word	0x0000c3c1
    c5ec:	0000c415 	.word	0x0000c415
    c5f0:	0000c4a9 	.word	0x0000c4a9

0000c5f4 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    c5f4:	b580      	push	{r7, lr}
    c5f6:	b084      	sub	sp, #16
    c5f8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    c5fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c5fe:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c600:	68bb      	ldr	r3, [r7, #8]
    c602:	8c1b      	ldrh	r3, [r3, #32]
    c604:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    c606:	88fb      	ldrh	r3, [r7, #6]
    c608:	2b00      	cmp	r3, #0
    c60a:	d104      	bne.n	c616 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    c60c:	4b13      	ldr	r3, [pc, #76]	; (c65c <_usb_d_dev_handler+0x68>)
    c60e:	4798      	blx	r3
    c610:	4603      	mov	r3, r0
    c612:	2b00      	cmp	r3, #0
    c614:	d11e      	bne.n	c654 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    c616:	2300      	movs	r3, #0
    c618:	73fb      	strb	r3, [r7, #15]
    c61a:	e017      	b.n	c64c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    c61c:	7bfa      	ldrb	r2, [r7, #15]
    c61e:	4613      	mov	r3, r2
    c620:	009b      	lsls	r3, r3, #2
    c622:	4413      	add	r3, r2
    c624:	009b      	lsls	r3, r3, #2
    c626:	3310      	adds	r3, #16
    c628:	4a0d      	ldr	r2, [pc, #52]	; (c660 <_usb_d_dev_handler+0x6c>)
    c62a:	4413      	add	r3, r2
    c62c:	3304      	adds	r3, #4
    c62e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    c630:	683b      	ldr	r3, [r7, #0]
    c632:	7c9b      	ldrb	r3, [r3, #18]
    c634:	2bff      	cmp	r3, #255	; 0xff
    c636:	d005      	beq.n	c644 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    c638:	88fb      	ldrh	r3, [r7, #6]
    c63a:	6839      	ldr	r1, [r7, #0]
    c63c:	4618      	mov	r0, r3
    c63e:	4b09      	ldr	r3, [pc, #36]	; (c664 <_usb_d_dev_handler+0x70>)
    c640:	4798      	blx	r3
    c642:	e000      	b.n	c646 <_usb_d_dev_handler+0x52>
			continue;
    c644:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    c646:	7bfb      	ldrb	r3, [r7, #15]
    c648:	3301      	adds	r3, #1
    c64a:	73fb      	strb	r3, [r7, #15]
    c64c:	7bfb      	ldrb	r3, [r7, #15]
    c64e:	2b08      	cmp	r3, #8
    c650:	d9e4      	bls.n	c61c <_usb_d_dev_handler+0x28>
    c652:	e000      	b.n	c656 <_usb_d_dev_handler+0x62>
			return;
    c654:	bf00      	nop
	}
}
    c656:	3710      	adds	r7, #16
    c658:	46bd      	mov	sp, r7
    c65a:	bd80      	pop	{r7, pc}
    c65c:	0000bb4d 	.word	0x0000bb4d
    c660:	200023c4 	.word	0x200023c4
    c664:	0000c53d 	.word	0x0000c53d

0000c668 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    c668:	b580      	push	{r7, lr}
    c66a:	b082      	sub	sp, #8
    c66c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    c66e:	2300      	movs	r3, #0
    c670:	71fb      	strb	r3, [r7, #7]
    c672:	e023      	b.n	c6bc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c674:	79fa      	ldrb	r2, [r7, #7]
    c676:	4613      	mov	r3, r2
    c678:	009b      	lsls	r3, r3, #2
    c67a:	4413      	add	r3, r2
    c67c:	009b      	lsls	r3, r3, #2
    c67e:	3310      	adds	r3, #16
    c680:	4a14      	ldr	r2, [pc, #80]	; (c6d4 <_usb_d_dev_reset_epts+0x6c>)
    c682:	4413      	add	r3, r2
    c684:	3304      	adds	r3, #4
    c686:	2103      	movs	r1, #3
    c688:	4618      	mov	r0, r3
    c68a:	4b13      	ldr	r3, [pc, #76]	; (c6d8 <_usb_d_dev_reset_epts+0x70>)
    c68c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    c68e:	79fa      	ldrb	r2, [r7, #7]
    c690:	4910      	ldr	r1, [pc, #64]	; (c6d4 <_usb_d_dev_reset_epts+0x6c>)
    c692:	4613      	mov	r3, r2
    c694:	009b      	lsls	r3, r3, #2
    c696:	4413      	add	r3, r2
    c698:	009b      	lsls	r3, r3, #2
    c69a:	440b      	add	r3, r1
    c69c:	3326      	adds	r3, #38	; 0x26
    c69e:	22ff      	movs	r2, #255	; 0xff
    c6a0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    c6a2:	79fa      	ldrb	r2, [r7, #7]
    c6a4:	490b      	ldr	r1, [pc, #44]	; (c6d4 <_usb_d_dev_reset_epts+0x6c>)
    c6a6:	4613      	mov	r3, r2
    c6a8:	009b      	lsls	r3, r3, #2
    c6aa:	4413      	add	r3, r2
    c6ac:	009b      	lsls	r3, r3, #2
    c6ae:	440b      	add	r3, r1
    c6b0:	3327      	adds	r3, #39	; 0x27
    c6b2:	2200      	movs	r2, #0
    c6b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    c6b6:	79fb      	ldrb	r3, [r7, #7]
    c6b8:	3301      	adds	r3, #1
    c6ba:	71fb      	strb	r3, [r7, #7]
    c6bc:	79fb      	ldrb	r3, [r7, #7]
    c6be:	2b08      	cmp	r3, #8
    c6c0:	d9d8      	bls.n	c674 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    c6c2:	22a0      	movs	r2, #160	; 0xa0
    c6c4:	2100      	movs	r1, #0
    c6c6:	4805      	ldr	r0, [pc, #20]	; (c6dc <_usb_d_dev_reset_epts+0x74>)
    c6c8:	4b05      	ldr	r3, [pc, #20]	; (c6e0 <_usb_d_dev_reset_epts+0x78>)
    c6ca:	4798      	blx	r3
}
    c6cc:	bf00      	nop
    c6ce:	3708      	adds	r7, #8
    c6d0:	46bd      	mov	sp, r7
    c6d2:	bd80      	pop	{r7, pc}
    c6d4:	200023c4 	.word	0x200023c4
    c6d8:	0000cf2d 	.word	0x0000cf2d
    c6dc:	2000248c 	.word	0x2000248c
    c6e0:	00011535 	.word	0x00011535

0000c6e4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    c6e4:	b580      	push	{r7, lr}
    c6e6:	b084      	sub	sp, #16
    c6e8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    c6ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c6ee:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    c6f0:	2301      	movs	r3, #1
    c6f2:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    c6f4:	2304      	movs	r3, #4
    c6f6:	713b      	strb	r3, [r7, #4]
    c6f8:	2300      	movs	r3, #0
    c6fa:	717b      	strb	r3, [r7, #5]
    c6fc:	2300      	movs	r3, #0
    c6fe:	71bb      	strb	r3, [r7, #6]
    c700:	2300      	movs	r3, #0
    c702:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    c704:	2101      	movs	r1, #1
    c706:	68f8      	ldr	r0, [r7, #12]
    c708:	4b26      	ldr	r3, [pc, #152]	; (c7a4 <_usb_d_dev_init+0xc0>)
    c70a:	4798      	blx	r3
    c70c:	4603      	mov	r3, r0
    c70e:	f083 0301 	eor.w	r3, r3, #1
    c712:	b2db      	uxtb	r3, r3
    c714:	2b00      	cmp	r3, #0
    c716:	d011      	beq.n	c73c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    c718:	2102      	movs	r1, #2
    c71a:	68f8      	ldr	r0, [r7, #12]
    c71c:	4b22      	ldr	r3, [pc, #136]	; (c7a8 <_usb_d_dev_init+0xc4>)
    c71e:	4798      	blx	r3
    c720:	4603      	mov	r3, r0
    c722:	2b00      	cmp	r3, #0
    c724:	d006      	beq.n	c734 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    c726:	68f8      	ldr	r0, [r7, #12]
    c728:	4b20      	ldr	r3, [pc, #128]	; (c7ac <_usb_d_dev_init+0xc8>)
    c72a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    c72c:	2102      	movs	r1, #2
    c72e:	68f8      	ldr	r0, [r7, #12]
    c730:	4b1f      	ldr	r3, [pc, #124]	; (c7b0 <_usb_d_dev_init+0xcc>)
    c732:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    c734:	2101      	movs	r1, #1
    c736:	68f8      	ldr	r0, [r7, #12]
    c738:	4b1e      	ldr	r3, [pc, #120]	; (c7b4 <_usb_d_dev_init+0xd0>)
    c73a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    c73c:	2101      	movs	r1, #1
    c73e:	68f8      	ldr	r0, [r7, #12]
    c740:	4b1b      	ldr	r3, [pc, #108]	; (c7b0 <_usb_d_dev_init+0xcc>)
    c742:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    c744:	4b1c      	ldr	r3, [pc, #112]	; (c7b8 <_usb_d_dev_init+0xd4>)
    c746:	4a1d      	ldr	r2, [pc, #116]	; (c7bc <_usb_d_dev_init+0xd8>)
    c748:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    c74a:	4b1b      	ldr	r3, [pc, #108]	; (c7b8 <_usb_d_dev_init+0xd4>)
    c74c:	4a1b      	ldr	r2, [pc, #108]	; (c7bc <_usb_d_dev_init+0xd8>)
    c74e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    c750:	4b19      	ldr	r3, [pc, #100]	; (c7b8 <_usb_d_dev_init+0xd4>)
    c752:	4a1a      	ldr	r2, [pc, #104]	; (c7bc <_usb_d_dev_init+0xd8>)
    c754:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    c756:	4b18      	ldr	r3, [pc, #96]	; (c7b8 <_usb_d_dev_init+0xd4>)
    c758:	4a18      	ldr	r2, [pc, #96]	; (c7bc <_usb_d_dev_init+0xd8>)
    c75a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    c75c:	4b16      	ldr	r3, [pc, #88]	; (c7b8 <_usb_d_dev_init+0xd4>)
    c75e:	4a17      	ldr	r2, [pc, #92]	; (c7bc <_usb_d_dev_init+0xd8>)
    c760:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    c762:	4b17      	ldr	r3, [pc, #92]	; (c7c0 <_usb_d_dev_init+0xdc>)
    c764:	4798      	blx	r3

	_usb_load_calib();
    c766:	4b17      	ldr	r3, [pc, #92]	; (c7c4 <_usb_d_dev_init+0xe0>)
    c768:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    c76a:	2104      	movs	r1, #4
    c76c:	68f8      	ldr	r0, [r7, #12]
    c76e:	4b11      	ldr	r3, [pc, #68]	; (c7b4 <_usb_d_dev_init+0xd0>)
    c770:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    c772:	4b15      	ldr	r3, [pc, #84]	; (c7c8 <_usb_d_dev_init+0xe4>)
    c774:	4619      	mov	r1, r3
    c776:	68f8      	ldr	r0, [r7, #12]
    c778:	4b14      	ldr	r3, [pc, #80]	; (c7cc <_usb_d_dev_init+0xe8>)
    c77a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    c77c:	7afb      	ldrb	r3, [r7, #11]
    c77e:	f107 0210 	add.w	r2, r7, #16
    c782:	4413      	add	r3, r2
    c784:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    c788:	f043 0301 	orr.w	r3, r3, #1
    c78c:	b2db      	uxtb	r3, r3
    c78e:	b29b      	uxth	r3, r3
    c790:	4619      	mov	r1, r3
    c792:	68f8      	ldr	r0, [r7, #12]
    c794:	4b0e      	ldr	r3, [pc, #56]	; (c7d0 <_usb_d_dev_init+0xec>)
    c796:	4798      	blx	r3

	return ERR_NONE;
    c798:	2300      	movs	r3, #0
}
    c79a:	4618      	mov	r0, r3
    c79c:	3710      	adds	r7, #16
    c79e:	46bd      	mov	sp, r7
    c7a0:	bd80      	pop	{r7, pc}
    c7a2:	bf00      	nop
    c7a4:	0000ad7d 	.word	0x0000ad7d
    c7a8:	0000b0cd 	.word	0x0000b0cd
    c7ac:	0000b0a1 	.word	0x0000b0a1
    c7b0:	0000ad53 	.word	0x0000ad53
    c7b4:	0000b0fd 	.word	0x0000b0fd
    c7b8:	200023c4 	.word	0x200023c4
    c7bc:	0000b1c5 	.word	0x0000b1c5
    c7c0:	0000c669 	.word	0x0000c669
    c7c4:	0000b1dd 	.word	0x0000b1dd
    c7c8:	2000248c 	.word	0x2000248c
    c7cc:	0000b1a9 	.word	0x0000b1a9
    c7d0:	0000b16d 	.word	0x0000b16d

0000c7d4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    c7d4:	b580      	push	{r7, lr}
    c7d6:	b082      	sub	sp, #8
    c7d8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    c7da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c7de:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    c7e0:	2103      	movs	r1, #3
    c7e2:	6878      	ldr	r0, [r7, #4]
    c7e4:	4b17      	ldr	r3, [pc, #92]	; (c844 <_usb_d_dev_enable+0x70>)
    c7e6:	4798      	blx	r3
    c7e8:	4603      	mov	r3, r0
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d002      	beq.n	c7f4 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    c7ee:	f06f 0310 	mvn.w	r3, #16
    c7f2:	e023      	b.n	c83c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    c7f4:	6878      	ldr	r0, [r7, #4]
    c7f6:	4b14      	ldr	r3, [pc, #80]	; (c848 <_usb_d_dev_enable+0x74>)
    c7f8:	4798      	blx	r3
    c7fa:	4603      	mov	r3, r0
    c7fc:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    c7fe:	78fb      	ldrb	r3, [r7, #3]
    c800:	f003 0302 	and.w	r3, r3, #2
    c804:	2b00      	cmp	r3, #0
    c806:	d107      	bne.n	c818 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    c808:	78fb      	ldrb	r3, [r7, #3]
    c80a:	f043 0302 	orr.w	r3, r3, #2
    c80e:	b2db      	uxtb	r3, r3
    c810:	4619      	mov	r1, r3
    c812:	6878      	ldr	r0, [r7, #4]
    c814:	4b0d      	ldr	r3, [pc, #52]	; (c84c <_usb_d_dev_enable+0x78>)
    c816:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    c818:	2050      	movs	r0, #80	; 0x50
    c81a:	4b0d      	ldr	r3, [pc, #52]	; (c850 <_usb_d_dev_enable+0x7c>)
    c81c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    c81e:	2051      	movs	r0, #81	; 0x51
    c820:	4b0b      	ldr	r3, [pc, #44]	; (c850 <_usb_d_dev_enable+0x7c>)
    c822:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    c824:	2052      	movs	r0, #82	; 0x52
    c826:	4b0a      	ldr	r3, [pc, #40]	; (c850 <_usb_d_dev_enable+0x7c>)
    c828:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    c82a:	2053      	movs	r0, #83	; 0x53
    c82c:	4b08      	ldr	r3, [pc, #32]	; (c850 <_usb_d_dev_enable+0x7c>)
    c82e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    c830:	f240 218d 	movw	r1, #653	; 0x28d
    c834:	6878      	ldr	r0, [r7, #4]
    c836:	4b07      	ldr	r3, [pc, #28]	; (c854 <_usb_d_dev_enable+0x80>)
    c838:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    c83a:	2300      	movs	r3, #0
}
    c83c:	4618      	mov	r0, r3
    c83e:	3708      	adds	r7, #8
    c840:	46bd      	mov	sp, r7
    c842:	bd80      	pop	{r7, pc}
    c844:	0000b077 	.word	0x0000b077
    c848:	0000b125 	.word	0x0000b125
    c84c:	0000b0fd 	.word	0x0000b0fd
    c850:	0000ac89 	.word	0x0000ac89
    c854:	0000b021 	.word	0x0000b021

0000c858 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    c858:	b580      	push	{r7, lr}
    c85a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    c85c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c860:	4b01      	ldr	r3, [pc, #4]	; (c868 <_usb_d_dev_attach+0x10>)
    c862:	4798      	blx	r3
}
    c864:	bf00      	nop
    c866:	bd80      	pop	{r7, pc}
    c868:	0000b149 	.word	0x0000b149

0000c86c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    c86c:	b580      	push	{r7, lr}
    c86e:	b082      	sub	sp, #8
    c870:	af00      	add	r7, sp, #0
    c872:	4603      	mov	r3, r0
    c874:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    c876:	79fb      	ldrb	r3, [r7, #7]
    c878:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c87c:	b2db      	uxtb	r3, r3
    c87e:	4619      	mov	r1, r3
    c880:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c884:	4b02      	ldr	r3, [pc, #8]	; (c890 <_usb_d_dev_set_address+0x24>)
    c886:	4798      	blx	r3
}
    c888:	bf00      	nop
    c88a:	3708      	adds	r7, #8
    c88c:	46bd      	mov	sp, r7
    c88e:	bd80      	pop	{r7, pc}
    c890:	0000b18b 	.word	0x0000b18b

0000c894 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    c894:	b590      	push	{r4, r7, lr}
    c896:	b085      	sub	sp, #20
    c898:	af00      	add	r7, sp, #0
    c89a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    c89c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c8a0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c8a2:	687b      	ldr	r3, [r7, #4]
    c8a4:	7c9b      	ldrb	r3, [r3, #18]
    c8a6:	f003 030f 	and.w	r3, r3, #15
    c8aa:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c8ac:	687b      	ldr	r3, [r7, #4]
    c8ae:	68db      	ldr	r3, [r3, #12]
    c8b0:	461a      	mov	r2, r3
    c8b2:	7afb      	ldrb	r3, [r7, #11]
    c8b4:	2100      	movs	r1, #0
    c8b6:	4618      	mov	r0, r3
    c8b8:	4b0f      	ldr	r3, [pc, #60]	; (c8f8 <_usb_d_dev_trans_setup+0x64>)
    c8ba:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	8a1b      	ldrh	r3, [r3, #16]
    c8c0:	461a      	mov	r2, r3
    c8c2:	7af8      	ldrb	r0, [r7, #11]
    c8c4:	2300      	movs	r3, #0
    c8c6:	2100      	movs	r1, #0
    c8c8:	4c0c      	ldr	r4, [pc, #48]	; (c8fc <_usb_d_dev_trans_setup+0x68>)
    c8ca:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    c8cc:	7afb      	ldrb	r3, [r7, #11]
    c8ce:	22b0      	movs	r2, #176	; 0xb0
    c8d0:	4619      	mov	r1, r3
    c8d2:	68f8      	ldr	r0, [r7, #12]
    c8d4:	4b0a      	ldr	r3, [pc, #40]	; (c900 <_usb_d_dev_trans_setup+0x6c>)
    c8d6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    c8d8:	7afb      	ldrb	r3, [r7, #11]
    c8da:	2200      	movs	r2, #0
    c8dc:	2100      	movs	r1, #0
    c8de:	4618      	mov	r0, r3
    c8e0:	4b08      	ldr	r3, [pc, #32]	; (c904 <_usb_d_dev_trans_setup+0x70>)
    c8e2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    c8e4:	7afb      	ldrb	r3, [r7, #11]
    c8e6:	2210      	movs	r2, #16
    c8e8:	4619      	mov	r1, r3
    c8ea:	68f8      	ldr	r0, [r7, #12]
    c8ec:	4b06      	ldr	r3, [pc, #24]	; (c908 <_usb_d_dev_trans_setup+0x74>)
    c8ee:	4798      	blx	r3
}
    c8f0:	bf00      	nop
    c8f2:	3714      	adds	r7, #20
    c8f4:	46bd      	mov	sp, r7
    c8f6:	bd90      	pop	{r4, r7, pc}
    c8f8:	0000b629 	.word	0x0000b629
    c8fc:	0000b7b1 	.word	0x0000b7b1
    c900:	0000ae89 	.word	0x0000ae89
    c904:	0000b881 	.word	0x0000b881
    c908:	0000aedd 	.word	0x0000aedd

0000c90c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b088      	sub	sp, #32
    c910:	af00      	add	r7, sp, #0
    c912:	4603      	mov	r3, r0
    c914:	71fb      	strb	r3, [r7, #7]
    c916:	460b      	mov	r3, r1
    c918:	71bb      	strb	r3, [r7, #6]
    c91a:	4613      	mov	r3, r2
    c91c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    c91e:	79fb      	ldrb	r3, [r7, #7]
    c920:	f003 030f 	and.w	r3, r3, #15
    c924:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    c926:	79fb      	ldrb	r3, [r7, #7]
    c928:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c92c:	2b00      	cmp	r3, #0
    c92e:	bf14      	ite	ne
    c930:	2301      	movne	r3, #1
    c932:	2300      	moveq	r3, #0
    c934:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c936:	7fba      	ldrb	r2, [r7, #30]
    c938:	7ffb      	ldrb	r3, [r7, #31]
    c93a:	4611      	mov	r1, r2
    c93c:	4618      	mov	r0, r3
    c93e:	4b3e      	ldr	r3, [pc, #248]	; (ca38 <_usb_d_dev_ep_init+0x12c>)
    c940:	4798      	blx	r3
    c942:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    c944:	79bb      	ldrb	r3, [r7, #6]
    c946:	f003 0303 	and.w	r3, r3, #3
    c94a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    c94c:	7ffa      	ldrb	r2, [r7, #31]
    c94e:	4613      	mov	r3, r2
    c950:	005b      	lsls	r3, r3, #1
    c952:	4413      	add	r3, r2
    c954:	009b      	lsls	r3, r3, #2
    c956:	4a39      	ldr	r2, [pc, #228]	; (ca3c <_usb_d_dev_ep_init+0x130>)
    c958:	4413      	add	r3, r2
    c95a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    c95c:	7ffb      	ldrb	r3, [r7, #31]
    c95e:	2b04      	cmp	r3, #4
    c960:	d902      	bls.n	c968 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    c962:	f06f 0311 	mvn.w	r3, #17
    c966:	e063      	b.n	ca30 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    c968:	69bb      	ldr	r3, [r7, #24]
    c96a:	7c9b      	ldrb	r3, [r3, #18]
    c96c:	2bff      	cmp	r3, #255	; 0xff
    c96e:	d002      	beq.n	c976 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    c970:	f06f 0313 	mvn.w	r3, #19
    c974:	e05c      	b.n	ca30 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    c976:	7dfb      	ldrb	r3, [r7, #23]
    c978:	2b00      	cmp	r3, #0
    c97a:	d11f      	bne.n	c9bc <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    c97c:	7fbb      	ldrb	r3, [r7, #30]
    c97e:	2b00      	cmp	r3, #0
    c980:	bf14      	ite	ne
    c982:	2301      	movne	r3, #1
    c984:	2300      	moveq	r3, #0
    c986:	b2db      	uxtb	r3, r3
    c988:	f083 0301 	eor.w	r3, r3, #1
    c98c:	b2db      	uxtb	r3, r3
    c98e:	f003 0301 	and.w	r3, r3, #1
    c992:	b2da      	uxtb	r2, r3
    c994:	7ffb      	ldrb	r3, [r7, #31]
    c996:	4611      	mov	r1, r2
    c998:	4618      	mov	r0, r3
    c99a:	4b27      	ldr	r3, [pc, #156]	; (ca38 <_usb_d_dev_ep_init+0x12c>)
    c99c:	4798      	blx	r3
    c99e:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    c9a0:	68fb      	ldr	r3, [r7, #12]
    c9a2:	7c9b      	ldrb	r3, [r3, #18]
    c9a4:	2bff      	cmp	r3, #255	; 0xff
    c9a6:	d002      	beq.n	c9ae <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    c9a8:	f06f 0313 	mvn.w	r3, #19
    c9ac:	e040      	b.n	ca30 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    c9ae:	693b      	ldr	r3, [r7, #16]
    c9b0:	681b      	ldr	r3, [r3, #0]
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	d102      	bne.n	c9bc <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    c9b6:	f06f 0312 	mvn.w	r3, #18
    c9ba:	e039      	b.n	ca30 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c9bc:	7fbb      	ldrb	r3, [r7, #30]
    c9be:	2b00      	cmp	r3, #0
    c9c0:	d007      	beq.n	c9d2 <_usb_d_dev_ep_init+0xc6>
    c9c2:	693b      	ldr	r3, [r7, #16]
    c9c4:	685b      	ldr	r3, [r3, #4]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	bf14      	ite	ne
    c9ca:	2301      	movne	r3, #1
    c9cc:	2300      	moveq	r3, #0
    c9ce:	b2db      	uxtb	r3, r3
    c9d0:	e006      	b.n	c9e0 <_usb_d_dev_ep_init+0xd4>
    c9d2:	693b      	ldr	r3, [r7, #16]
    c9d4:	681b      	ldr	r3, [r3, #0]
    c9d6:	2b00      	cmp	r3, #0
    c9d8:	bf14      	ite	ne
    c9da:	2301      	movne	r3, #1
    c9dc:	2300      	moveq	r3, #0
    c9de:	b2db      	uxtb	r3, r3
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d00f      	beq.n	ca04 <_usb_d_dev_ep_init+0xf8>
    c9e4:	7fbb      	ldrb	r3, [r7, #30]
    c9e6:	2b00      	cmp	r3, #0
    c9e8:	d003      	beq.n	c9f2 <_usb_d_dev_ep_init+0xe6>
    c9ea:	693b      	ldr	r3, [r7, #16]
    c9ec:	895b      	ldrh	r3, [r3, #10]
    c9ee:	461a      	mov	r2, r3
    c9f0:	e002      	b.n	c9f8 <_usb_d_dev_ep_init+0xec>
    c9f2:	693b      	ldr	r3, [r7, #16]
    c9f4:	891b      	ldrh	r3, [r3, #8]
    c9f6:	461a      	mov	r2, r3
    c9f8:	88bb      	ldrh	r3, [r7, #4]
    c9fa:	429a      	cmp	r2, r3
    c9fc:	da02      	bge.n	ca04 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    c9fe:	f06f 0312 	mvn.w	r3, #18
    ca02:	e015      	b.n	ca30 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ca04:	7fbb      	ldrb	r3, [r7, #30]
    ca06:	2b00      	cmp	r3, #0
    ca08:	d002      	beq.n	ca10 <_usb_d_dev_ep_init+0x104>
    ca0a:	693b      	ldr	r3, [r7, #16]
    ca0c:	685b      	ldr	r3, [r3, #4]
    ca0e:	e001      	b.n	ca14 <_usb_d_dev_ep_init+0x108>
    ca10:	693b      	ldr	r3, [r7, #16]
    ca12:	681b      	ldr	r3, [r3, #0]
    ca14:	69ba      	ldr	r2, [r7, #24]
    ca16:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ca18:	69bb      	ldr	r3, [r7, #24]
    ca1a:	88ba      	ldrh	r2, [r7, #4]
    ca1c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ca1e:	7dfb      	ldrb	r3, [r7, #23]
    ca20:	3301      	adds	r3, #1
    ca22:	b2da      	uxtb	r2, r3
    ca24:	69bb      	ldr	r3, [r7, #24]
    ca26:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ca28:	69bb      	ldr	r3, [r7, #24]
    ca2a:	79fa      	ldrb	r2, [r7, #7]
    ca2c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ca2e:	2300      	movs	r3, #0
}
    ca30:	4618      	mov	r0, r3
    ca32:	3720      	adds	r7, #32
    ca34:	46bd      	mov	sp, r7
    ca36:	bd80      	pop	{r7, pc}
    ca38:	0000b93d 	.word	0x0000b93d
    ca3c:	00012910 	.word	0x00012910

0000ca40 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ca40:	b580      	push	{r7, lr}
    ca42:	b086      	sub	sp, #24
    ca44:	af00      	add	r7, sp, #0
    ca46:	4603      	mov	r3, r0
    ca48:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ca4a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca4e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ca50:	79fb      	ldrb	r3, [r7, #7]
    ca52:	f003 030f 	and.w	r3, r3, #15
    ca56:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ca58:	79fb      	ldrb	r3, [r7, #7]
    ca5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ca5e:	2b00      	cmp	r3, #0
    ca60:	bf14      	ite	ne
    ca62:	2301      	movne	r3, #1
    ca64:	2300      	moveq	r3, #0
    ca66:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ca68:	7cba      	ldrb	r2, [r7, #18]
    ca6a:	7cfb      	ldrb	r3, [r7, #19]
    ca6c:	4611      	mov	r1, r2
    ca6e:	4618      	mov	r0, r3
    ca70:	4b2a      	ldr	r3, [pc, #168]	; (cb1c <_usb_d_dev_ep_deinit+0xdc>)
    ca72:	4798      	blx	r3
    ca74:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ca76:	7cfb      	ldrb	r3, [r7, #19]
    ca78:	2b04      	cmp	r3, #4
    ca7a:	d84a      	bhi.n	cb12 <_usb_d_dev_ep_deinit+0xd2>
    ca7c:	68fb      	ldr	r3, [r7, #12]
    ca7e:	7c9b      	ldrb	r3, [r3, #18]
    ca80:	2bff      	cmp	r3, #255	; 0xff
    ca82:	d046      	beq.n	cb12 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ca84:	7cbb      	ldrb	r3, [r7, #18]
    ca86:	2203      	movs	r2, #3
    ca88:	4619      	mov	r1, r3
    ca8a:	68f8      	ldr	r0, [r7, #12]
    ca8c:	4b24      	ldr	r3, [pc, #144]	; (cb20 <_usb_d_dev_ep_deinit+0xe0>)
    ca8e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ca90:	68fb      	ldr	r3, [r7, #12]
    ca92:	7cdb      	ldrb	r3, [r3, #19]
    ca94:	f003 0307 	and.w	r3, r3, #7
    ca98:	b2db      	uxtb	r3, r3
    ca9a:	2b01      	cmp	r3, #1
    ca9c:	d107      	bne.n	caae <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ca9e:	79fb      	ldrb	r3, [r7, #7]
    caa0:	697a      	ldr	r2, [r7, #20]
    caa2:	3308      	adds	r3, #8
    caa4:	015b      	lsls	r3, r3, #5
    caa6:	4413      	add	r3, r2
    caa8:	2200      	movs	r2, #0
    caaa:	701a      	strb	r2, [r3, #0]
    caac:	e02a      	b.n	cb04 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    caae:	f997 3007 	ldrsb.w	r3, [r7, #7]
    cab2:	2b00      	cmp	r3, #0
    cab4:	da15      	bge.n	cae2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    cab6:	79fb      	ldrb	r3, [r7, #7]
    cab8:	f003 030f 	and.w	r3, r3, #15
    cabc:	79fa      	ldrb	r2, [r7, #7]
    cabe:	f002 020f 	and.w	r2, r2, #15
    cac2:	6979      	ldr	r1, [r7, #20]
    cac4:	3208      	adds	r2, #8
    cac6:	0152      	lsls	r2, r2, #5
    cac8:	440a      	add	r2, r1
    caca:	7812      	ldrb	r2, [r2, #0]
    cacc:	b2d2      	uxtb	r2, r2
    cace:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    cad2:	b2d1      	uxtb	r1, r2
    cad4:	697a      	ldr	r2, [r7, #20]
    cad6:	3308      	adds	r3, #8
    cad8:	015b      	lsls	r3, r3, #5
    cada:	4413      	add	r3, r2
    cadc:	460a      	mov	r2, r1
    cade:	701a      	strb	r2, [r3, #0]
    cae0:	e010      	b.n	cb04 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    cae2:	79fb      	ldrb	r3, [r7, #7]
    cae4:	79fa      	ldrb	r2, [r7, #7]
    cae6:	6979      	ldr	r1, [r7, #20]
    cae8:	3208      	adds	r2, #8
    caea:	0152      	lsls	r2, r2, #5
    caec:	440a      	add	r2, r1
    caee:	7812      	ldrb	r2, [r2, #0]
    caf0:	b2d2      	uxtb	r2, r2
    caf2:	f022 0207 	bic.w	r2, r2, #7
    caf6:	b2d1      	uxtb	r1, r2
    caf8:	697a      	ldr	r2, [r7, #20]
    cafa:	3308      	adds	r3, #8
    cafc:	015b      	lsls	r3, r3, #5
    cafe:	4413      	add	r3, r2
    cb00:	460a      	mov	r2, r1
    cb02:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    cb04:	68fb      	ldr	r3, [r7, #12]
    cb06:	2200      	movs	r2, #0
    cb08:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    cb0a:	68fb      	ldr	r3, [r7, #12]
    cb0c:	22ff      	movs	r2, #255	; 0xff
    cb0e:	749a      	strb	r2, [r3, #18]
    cb10:	e000      	b.n	cb14 <_usb_d_dev_ep_deinit+0xd4>
		return;
    cb12:	bf00      	nop
}
    cb14:	3718      	adds	r7, #24
    cb16:	46bd      	mov	sp, r7
    cb18:	bd80      	pop	{r7, pc}
    cb1a:	bf00      	nop
    cb1c:	0000b93d 	.word	0x0000b93d
    cb20:	0000cf75 	.word	0x0000cf75

0000cb24 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    cb24:	b5b0      	push	{r4, r5, r7, lr}
    cb26:	b088      	sub	sp, #32
    cb28:	af00      	add	r7, sp, #0
    cb2a:	4603      	mov	r3, r0
    cb2c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    cb2e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb32:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    cb34:	79fb      	ldrb	r3, [r7, #7]
    cb36:	f003 030f 	and.w	r3, r3, #15
    cb3a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    cb3c:	79fb      	ldrb	r3, [r7, #7]
    cb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    cb42:	2b00      	cmp	r3, #0
    cb44:	bf14      	ite	ne
    cb46:	2301      	movne	r3, #1
    cb48:	2300      	moveq	r3, #0
    cb4a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    cb4c:	7eba      	ldrb	r2, [r7, #26]
    cb4e:	7efb      	ldrb	r3, [r7, #27]
    cb50:	4611      	mov	r1, r2
    cb52:	4618      	mov	r0, r3
    cb54:	4b70      	ldr	r3, [pc, #448]	; (cd18 <_usb_d_dev_ep_enable+0x1f4>)
    cb56:	4798      	blx	r3
    cb58:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    cb5a:	7efb      	ldrb	r3, [r7, #27]
    cb5c:	4619      	mov	r1, r3
    cb5e:	69f8      	ldr	r0, [r7, #28]
    cb60:	4b6e      	ldr	r3, [pc, #440]	; (cd1c <_usb_d_dev_ep_enable+0x1f8>)
    cb62:	4798      	blx	r3
    cb64:	4603      	mov	r3, r0
    cb66:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cb68:	7efb      	ldrb	r3, [r7, #27]
    cb6a:	2b04      	cmp	r3, #4
    cb6c:	d803      	bhi.n	cb76 <_usb_d_dev_ep_enable+0x52>
    cb6e:	697b      	ldr	r3, [r7, #20]
    cb70:	7c9b      	ldrb	r3, [r3, #18]
    cb72:	2bff      	cmp	r3, #255	; 0xff
    cb74:	d102      	bne.n	cb7c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    cb76:	f06f 0311 	mvn.w	r3, #17
    cb7a:	e0c8      	b.n	cd0e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    cb7c:	7efb      	ldrb	r3, [r7, #27]
    cb7e:	015b      	lsls	r3, r3, #5
    cb80:	4a67      	ldr	r2, [pc, #412]	; (cd20 <_usb_d_dev_ep_enable+0x1fc>)
    cb82:	4413      	add	r3, r2
    cb84:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    cb86:	697b      	ldr	r3, [r7, #20]
    cb88:	7cdb      	ldrb	r3, [r3, #19]
    cb8a:	f003 0307 	and.w	r3, r3, #7
    cb8e:	b2db      	uxtb	r3, r3
    cb90:	2b01      	cmp	r3, #1
    cb92:	d14b      	bne.n	cc2c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    cb94:	7cfb      	ldrb	r3, [r7, #19]
    cb96:	f003 0377 	and.w	r3, r3, #119	; 0x77
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d002      	beq.n	cba4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    cb9e:	f06f 0313 	mvn.w	r3, #19
    cba2:	e0b4      	b.n	cd0e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    cba4:	7efb      	ldrb	r3, [r7, #27]
    cba6:	2211      	movs	r2, #17
    cba8:	4619      	mov	r1, r3
    cbaa:	69f8      	ldr	r0, [r7, #28]
    cbac:	4b5d      	ldr	r3, [pc, #372]	; (cd24 <_usb_d_dev_ep_enable+0x200>)
    cbae:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cbb0:	697b      	ldr	r3, [r7, #20]
    cbb2:	8a1b      	ldrh	r3, [r3, #16]
    cbb4:	039b      	lsls	r3, r3, #14
    cbb6:	4c5c      	ldr	r4, [pc, #368]	; (cd28 <_usb_d_dev_ep_enable+0x204>)
    cbb8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cbba:	697b      	ldr	r3, [r7, #20]
    cbbc:	8a1b      	ldrh	r3, [r3, #16]
    cbbe:	4618      	mov	r0, r3
    cbc0:	4b5a      	ldr	r3, [pc, #360]	; (cd2c <_usb_d_dev_ep_enable+0x208>)
    cbc2:	4798      	blx	r3
    cbc4:	4603      	mov	r3, r0
    cbc6:	071b      	lsls	r3, r3, #28
    cbc8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cbcc:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cbd0:	68fb      	ldr	r3, [r7, #12]
    cbd2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    cbd4:	68fb      	ldr	r3, [r7, #12]
    cbd6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cbda:	697b      	ldr	r3, [r7, #20]
    cbdc:	8a1b      	ldrh	r3, [r3, #16]
    cbde:	f3c3 050d 	ubfx	r5, r3, #0, #14
    cbe2:	697b      	ldr	r3, [r7, #20]
    cbe4:	8a1b      	ldrh	r3, [r3, #16]
    cbe6:	4618      	mov	r0, r3
    cbe8:	4b50      	ldr	r3, [pc, #320]	; (cd2c <_usb_d_dev_ep_enable+0x208>)
    cbea:	4798      	blx	r3
    cbec:	4603      	mov	r3, r0
    cbee:	071b      	lsls	r3, r3, #28
    cbf0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cbf4:	432b      	orrs	r3, r5
    cbf6:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    cbf8:	7efb      	ldrb	r3, [r7, #27]
    cbfa:	2200      	movs	r2, #0
    cbfc:	2100      	movs	r1, #0
    cbfe:	4618      	mov	r0, r3
    cc00:	4b4b      	ldr	r3, [pc, #300]	; (cd30 <_usb_d_dev_ep_enable+0x20c>)
    cc02:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    cc04:	7efb      	ldrb	r3, [r7, #27]
    cc06:	2200      	movs	r2, #0
    cc08:	2101      	movs	r1, #1
    cc0a:	4618      	mov	r0, r3
    cc0c:	4b49      	ldr	r3, [pc, #292]	; (cd34 <_usb_d_dev_ep_enable+0x210>)
    cc0e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    cc10:	7efb      	ldrb	r3, [r7, #27]
    cc12:	2100      	movs	r1, #0
    cc14:	4618      	mov	r0, r3
    cc16:	4b48      	ldr	r3, [pc, #288]	; (cd38 <_usb_d_dev_ep_enable+0x214>)
    cc18:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    cc1a:	7efb      	ldrb	r3, [r7, #27]
    cc1c:	2101      	movs	r1, #1
    cc1e:	4618      	mov	r0, r3
    cc20:	4b45      	ldr	r3, [pc, #276]	; (cd38 <_usb_d_dev_ep_enable+0x214>)
    cc22:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    cc24:	6978      	ldr	r0, [r7, #20]
    cc26:	4b45      	ldr	r3, [pc, #276]	; (cd3c <_usb_d_dev_ep_enable+0x218>)
    cc28:	4798      	blx	r3
    cc2a:	e06f      	b.n	cd0c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    cc2c:	7ebb      	ldrb	r3, [r7, #26]
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d038      	beq.n	cca4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    cc32:	7cfb      	ldrb	r3, [r7, #19]
    cc34:	f003 0370 	and.w	r3, r3, #112	; 0x70
    cc38:	2b00      	cmp	r3, #0
    cc3a:	d002      	beq.n	cc42 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    cc3c:	f06f 0313 	mvn.w	r3, #19
    cc40:	e065      	b.n	cd0e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    cc42:	697b      	ldr	r3, [r7, #20]
    cc44:	7cdb      	ldrb	r3, [r3, #19]
    cc46:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cc4a:	b2db      	uxtb	r3, r3
    cc4c:	011b      	lsls	r3, r3, #4
    cc4e:	b2db      	uxtb	r3, r3
    cc50:	f003 0370 	and.w	r3, r3, #112	; 0x70
    cc54:	b2da      	uxtb	r2, r3
    cc56:	7cfb      	ldrb	r3, [r7, #19]
    cc58:	4313      	orrs	r3, r2
    cc5a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    cc5c:	7cfa      	ldrb	r2, [r7, #19]
    cc5e:	7efb      	ldrb	r3, [r7, #27]
    cc60:	4619      	mov	r1, r3
    cc62:	69f8      	ldr	r0, [r7, #28]
    cc64:	4b2f      	ldr	r3, [pc, #188]	; (cd24 <_usb_d_dev_ep_enable+0x200>)
    cc66:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    cc68:	68fb      	ldr	r3, [r7, #12]
    cc6a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cc6e:	697b      	ldr	r3, [r7, #20]
    cc70:	8a1b      	ldrh	r3, [r3, #16]
    cc72:	f3c3 050d 	ubfx	r5, r3, #0, #14
    cc76:	697b      	ldr	r3, [r7, #20]
    cc78:	8a1b      	ldrh	r3, [r3, #16]
    cc7a:	4618      	mov	r0, r3
    cc7c:	4b2b      	ldr	r3, [pc, #172]	; (cd2c <_usb_d_dev_ep_enable+0x208>)
    cc7e:	4798      	blx	r3
    cc80:	4603      	mov	r3, r0
    cc82:	071b      	lsls	r3, r3, #28
    cc84:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cc88:	432b      	orrs	r3, r5
    cc8a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cc8c:	7efb      	ldrb	r3, [r7, #27]
    cc8e:	2200      	movs	r2, #0
    cc90:	2101      	movs	r1, #1
    cc92:	4618      	mov	r0, r3
    cc94:	4b27      	ldr	r3, [pc, #156]	; (cd34 <_usb_d_dev_ep_enable+0x210>)
    cc96:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    cc98:	7efb      	ldrb	r3, [r7, #27]
    cc9a:	2101      	movs	r1, #1
    cc9c:	4618      	mov	r0, r3
    cc9e:	4b26      	ldr	r3, [pc, #152]	; (cd38 <_usb_d_dev_ep_enable+0x214>)
    cca0:	4798      	blx	r3
    cca2:	e033      	b.n	cd0c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    cca4:	7cfb      	ldrb	r3, [r7, #19]
    cca6:	f003 0307 	and.w	r3, r3, #7
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d002      	beq.n	ccb4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    ccae:	f06f 0313 	mvn.w	r3, #19
    ccb2:	e02c      	b.n	cd0e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    ccb4:	697b      	ldr	r3, [r7, #20]
    ccb6:	7cdb      	ldrb	r3, [r3, #19]
    ccb8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ccbc:	b2db      	uxtb	r3, r3
    ccbe:	461a      	mov	r2, r3
    ccc0:	7cfb      	ldrb	r3, [r7, #19]
    ccc2:	4313      	orrs	r3, r2
    ccc4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ccc6:	7cfa      	ldrb	r2, [r7, #19]
    ccc8:	7efb      	ldrb	r3, [r7, #27]
    ccca:	4619      	mov	r1, r3
    cccc:	69f8      	ldr	r0, [r7, #28]
    ccce:	4b15      	ldr	r3, [pc, #84]	; (cd24 <_usb_d_dev_ep_enable+0x200>)
    ccd0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ccd2:	697b      	ldr	r3, [r7, #20]
    ccd4:	8a1b      	ldrh	r3, [r3, #16]
    ccd6:	039b      	lsls	r3, r3, #14
    ccd8:	4c13      	ldr	r4, [pc, #76]	; (cd28 <_usb_d_dev_ep_enable+0x204>)
    ccda:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ccdc:	697b      	ldr	r3, [r7, #20]
    ccde:	8a1b      	ldrh	r3, [r3, #16]
    cce0:	4618      	mov	r0, r3
    cce2:	4b12      	ldr	r3, [pc, #72]	; (cd2c <_usb_d_dev_ep_enable+0x208>)
    cce4:	4798      	blx	r3
    cce6:	4603      	mov	r3, r0
    cce8:	071b      	lsls	r3, r3, #28
    ccea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ccee:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ccf2:	68fb      	ldr	r3, [r7, #12]
    ccf4:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ccf6:	7efb      	ldrb	r3, [r7, #27]
    ccf8:	2200      	movs	r2, #0
    ccfa:	2100      	movs	r1, #0
    ccfc:	4618      	mov	r0, r3
    ccfe:	4b0c      	ldr	r3, [pc, #48]	; (cd30 <_usb_d_dev_ep_enable+0x20c>)
    cd00:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    cd02:	7efb      	ldrb	r3, [r7, #27]
    cd04:	2100      	movs	r1, #0
    cd06:	4618      	mov	r0, r3
    cd08:	4b0b      	ldr	r3, [pc, #44]	; (cd38 <_usb_d_dev_ep_enable+0x214>)
    cd0a:	4798      	blx	r3
	}

	return USB_OK;
    cd0c:	2300      	movs	r3, #0
}
    cd0e:	4618      	mov	r0, r3
    cd10:	3720      	adds	r7, #32
    cd12:	46bd      	mov	sp, r7
    cd14:	bdb0      	pop	{r4, r5, r7, pc}
    cd16:	bf00      	nop
    cd18:	0000b93d 	.word	0x0000b93d
    cd1c:	0000afc3 	.word	0x0000afc3
    cd20:	2000248c 	.word	0x2000248c
    cd24:	0000af99 	.word	0x0000af99
    cd28:	0fffc000 	.word	0x0fffc000
    cd2c:	0000b8d9 	.word	0x0000b8d9
    cd30:	0000b881 	.word	0x0000b881
    cd34:	0000b829 	.word	0x0000b829
    cd38:	0000b7f1 	.word	0x0000b7f1
    cd3c:	0000c895 	.word	0x0000c895

0000cd40 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    cd40:	b580      	push	{r7, lr}
    cd42:	b084      	sub	sp, #16
    cd44:	af00      	add	r7, sp, #0
    cd46:	6078      	str	r0, [r7, #4]
    cd48:	460b      	mov	r3, r1
    cd4a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cd4c:	687b      	ldr	r3, [r7, #4]
    cd4e:	7c9b      	ldrb	r3, [r3, #18]
    cd50:	f003 030f 	and.w	r3, r3, #15
    cd54:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    cd56:	78fa      	ldrb	r2, [r7, #3]
    cd58:	7bfb      	ldrb	r3, [r7, #15]
    cd5a:	4611      	mov	r1, r2
    cd5c:	4618      	mov	r0, r3
    cd5e:	4b03      	ldr	r3, [pc, #12]	; (cd6c <_usb_d_dev_ep_stall_get+0x2c>)
    cd60:	4798      	blx	r3
    cd62:	4603      	mov	r3, r0
}
    cd64:	4618      	mov	r0, r3
    cd66:	3710      	adds	r7, #16
    cd68:	46bd      	mov	sp, r7
    cd6a:	bd80      	pop	{r7, pc}
    cd6c:	0000b431 	.word	0x0000b431

0000cd70 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b084      	sub	sp, #16
    cd74:	af00      	add	r7, sp, #0
    cd76:	6078      	str	r0, [r7, #4]
    cd78:	460b      	mov	r3, r1
    cd7a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cd7c:	687b      	ldr	r3, [r7, #4]
    cd7e:	7c9b      	ldrb	r3, [r3, #18]
    cd80:	f003 030f 	and.w	r3, r3, #15
    cd84:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    cd86:	78f9      	ldrb	r1, [r7, #3]
    cd88:	7bfb      	ldrb	r3, [r7, #15]
    cd8a:	2201      	movs	r2, #1
    cd8c:	4618      	mov	r0, r3
    cd8e:	4b0a      	ldr	r3, [pc, #40]	; (cdb8 <_usb_d_dev_ep_stall_set+0x48>)
    cd90:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    cd92:	78fb      	ldrb	r3, [r7, #3]
    cd94:	2220      	movs	r2, #32
    cd96:	409a      	lsls	r2, r3
    cd98:	7bfb      	ldrb	r3, [r7, #15]
    cd9a:	4611      	mov	r1, r2
    cd9c:	4618      	mov	r0, r3
    cd9e:	4b07      	ldr	r3, [pc, #28]	; (cdbc <_usb_d_dev_ep_stall_set+0x4c>)
    cda0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    cda2:	687a      	ldr	r2, [r7, #4]
    cda4:	7cd3      	ldrb	r3, [r2, #19]
    cda6:	f043 0308 	orr.w	r3, r3, #8
    cdaa:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    cdac:	2300      	movs	r3, #0
}
    cdae:	4618      	mov	r0, r3
    cdb0:	3710      	adds	r7, #16
    cdb2:	46bd      	mov	sp, r7
    cdb4:	bd80      	pop	{r7, pc}
    cdb6:	bf00      	nop
    cdb8:	0000b3d9 	.word	0x0000b3d9
    cdbc:	0000b359 	.word	0x0000b359

0000cdc0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    cdc0:	b580      	push	{r7, lr}
    cdc2:	b084      	sub	sp, #16
    cdc4:	af00      	add	r7, sp, #0
    cdc6:	6078      	str	r0, [r7, #4]
    cdc8:	460b      	mov	r3, r1
    cdca:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    cdcc:	687b      	ldr	r3, [r7, #4]
    cdce:	7c9b      	ldrb	r3, [r3, #18]
    cdd0:	f003 030f 	and.w	r3, r3, #15
    cdd4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    cdd6:	78fa      	ldrb	r2, [r7, #3]
    cdd8:	7bfb      	ldrb	r3, [r7, #15]
    cdda:	4611      	mov	r1, r2
    cddc:	4618      	mov	r0, r3
    cdde:	4b28      	ldr	r3, [pc, #160]	; (ce80 <_usb_d_dev_ep_stall_clr+0xc0>)
    cde0:	4798      	blx	r3
    cde2:	4603      	mov	r3, r0
    cde4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    cde6:	7bbb      	ldrb	r3, [r7, #14]
    cde8:	f083 0301 	eor.w	r3, r3, #1
    cdec:	b2db      	uxtb	r3, r3
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d001      	beq.n	cdf6 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    cdf2:	2300      	movs	r3, #0
    cdf4:	e040      	b.n	ce78 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    cdf6:	78f9      	ldrb	r1, [r7, #3]
    cdf8:	7bfb      	ldrb	r3, [r7, #15]
    cdfa:	2200      	movs	r2, #0
    cdfc:	4618      	mov	r0, r3
    cdfe:	4b21      	ldr	r3, [pc, #132]	; (ce84 <_usb_d_dev_ep_stall_clr+0xc4>)
    ce00:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ce02:	78fb      	ldrb	r3, [r7, #3]
    ce04:	2220      	movs	r2, #32
    ce06:	409a      	lsls	r2, r3
    ce08:	7bfb      	ldrb	r3, [r7, #15]
    ce0a:	4611      	mov	r1, r2
    ce0c:	4618      	mov	r0, r3
    ce0e:	4b1e      	ldr	r3, [pc, #120]	; (ce88 <_usb_d_dev_ep_stall_clr+0xc8>)
    ce10:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ce12:	78fa      	ldrb	r2, [r7, #3]
    ce14:	7bfb      	ldrb	r3, [r7, #15]
    ce16:	4611      	mov	r1, r2
    ce18:	4618      	mov	r0, r3
    ce1a:	4b1c      	ldr	r3, [pc, #112]	; (ce8c <_usb_d_dev_ep_stall_clr+0xcc>)
    ce1c:	4798      	blx	r3
    ce1e:	4603      	mov	r3, r0
    ce20:	2b00      	cmp	r3, #0
    ce22:	d00b      	beq.n	ce3c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    ce24:	78fa      	ldrb	r2, [r7, #3]
    ce26:	7bfb      	ldrb	r3, [r7, #15]
    ce28:	4611      	mov	r1, r2
    ce2a:	4618      	mov	r0, r3
    ce2c:	4b18      	ldr	r3, [pc, #96]	; (ce90 <_usb_d_dev_ep_stall_clr+0xd0>)
    ce2e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    ce30:	78f9      	ldrb	r1, [r7, #3]
    ce32:	7bfb      	ldrb	r3, [r7, #15]
    ce34:	2200      	movs	r2, #0
    ce36:	4618      	mov	r0, r3
    ce38:	4b16      	ldr	r3, [pc, #88]	; (ce94 <_usb_d_dev_ep_stall_clr+0xd4>)
    ce3a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ce3c:	687b      	ldr	r3, [r7, #4]
    ce3e:	7cdb      	ldrb	r3, [r3, #19]
    ce40:	f003 0307 	and.w	r3, r3, #7
    ce44:	b2db      	uxtb	r3, r3
    ce46:	2b01      	cmp	r3, #1
    ce48:	d110      	bne.n	ce6c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    ce4a:	7bfb      	ldrb	r3, [r7, #15]
    ce4c:	4619      	mov	r1, r3
    ce4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ce52:	4b11      	ldr	r3, [pc, #68]	; (ce98 <_usb_d_dev_ep_stall_clr+0xd8>)
    ce54:	4798      	blx	r3
    ce56:	4603      	mov	r3, r0
    ce58:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d10a      	bne.n	ce76 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    ce60:	687a      	ldr	r2, [r7, #4]
    ce62:	7cd3      	ldrb	r3, [r2, #19]
    ce64:	f36f 03c3 	bfc	r3, #3, #1
    ce68:	74d3      	strb	r3, [r2, #19]
    ce6a:	e004      	b.n	ce76 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    ce6c:	687a      	ldr	r2, [r7, #4]
    ce6e:	7cd3      	ldrb	r3, [r2, #19]
    ce70:	f36f 03c3 	bfc	r3, #3, #1
    ce74:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    ce76:	2300      	movs	r3, #0
}
    ce78:	4618      	mov	r0, r3
    ce7a:	3710      	adds	r7, #16
    ce7c:	46bd      	mov	sp, r7
    ce7e:	bd80      	pop	{r7, pc}
    ce80:	0000b431 	.word	0x0000b431
    ce84:	0000b3d9 	.word	0x0000b3d9
    ce88:	0000b381 	.word	0x0000b381
    ce8c:	0000b475 	.word	0x0000b475
    ce90:	0000b4b9 	.word	0x0000b4b9
    ce94:	0000b5a5 	.word	0x0000b5a5
    ce98:	0000ae61 	.word	0x0000ae61

0000ce9c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    ce9c:	b580      	push	{r7, lr}
    ce9e:	b086      	sub	sp, #24
    cea0:	af00      	add	r7, sp, #0
    cea2:	4603      	mov	r3, r0
    cea4:	460a      	mov	r2, r1
    cea6:	71fb      	strb	r3, [r7, #7]
    cea8:	4613      	mov	r3, r2
    ceaa:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    ceac:	79fb      	ldrb	r3, [r7, #7]
    ceae:	f003 030f 	and.w	r3, r3, #15
    ceb2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ceb4:	79fb      	ldrb	r3, [r7, #7]
    ceb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ceba:	2b00      	cmp	r3, #0
    cebc:	bf14      	ite	ne
    cebe:	2301      	movne	r3, #1
    cec0:	2300      	moveq	r3, #0
    cec2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cec4:	7cba      	ldrb	r2, [r7, #18]
    cec6:	7cfb      	ldrb	r3, [r7, #19]
    cec8:	4611      	mov	r1, r2
    ceca:	4618      	mov	r0, r3
    cecc:	4b13      	ldr	r3, [pc, #76]	; (cf1c <_usb_d_dev_ep_stall+0x80>)
    cece:	4798      	blx	r3
    ced0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ced2:	7cfb      	ldrb	r3, [r7, #19]
    ced4:	2b04      	cmp	r3, #4
    ced6:	d902      	bls.n	cede <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    ced8:	f06f 0311 	mvn.w	r3, #17
    cedc:	e01a      	b.n	cf14 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    cede:	79bb      	ldrb	r3, [r7, #6]
    cee0:	2b01      	cmp	r3, #1
    cee2:	d106      	bne.n	cef2 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    cee4:	7cbb      	ldrb	r3, [r7, #18]
    cee6:	4619      	mov	r1, r3
    cee8:	68f8      	ldr	r0, [r7, #12]
    ceea:	4b0d      	ldr	r3, [pc, #52]	; (cf20 <_usb_d_dev_ep_stall+0x84>)
    ceec:	4798      	blx	r3
    ceee:	6178      	str	r0, [r7, #20]
    cef0:	e00f      	b.n	cf12 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    cef2:	79bb      	ldrb	r3, [r7, #6]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d106      	bne.n	cf06 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    cef8:	7cbb      	ldrb	r3, [r7, #18]
    cefa:	4619      	mov	r1, r3
    cefc:	68f8      	ldr	r0, [r7, #12]
    cefe:	4b09      	ldr	r3, [pc, #36]	; (cf24 <_usb_d_dev_ep_stall+0x88>)
    cf00:	4798      	blx	r3
    cf02:	6178      	str	r0, [r7, #20]
    cf04:	e005      	b.n	cf12 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    cf06:	7cbb      	ldrb	r3, [r7, #18]
    cf08:	4619      	mov	r1, r3
    cf0a:	68f8      	ldr	r0, [r7, #12]
    cf0c:	4b06      	ldr	r3, [pc, #24]	; (cf28 <_usb_d_dev_ep_stall+0x8c>)
    cf0e:	4798      	blx	r3
    cf10:	6178      	str	r0, [r7, #20]
	}
	return rc;
    cf12:	697b      	ldr	r3, [r7, #20]
}
    cf14:	4618      	mov	r0, r3
    cf16:	3718      	adds	r7, #24
    cf18:	46bd      	mov	sp, r7
    cf1a:	bd80      	pop	{r7, pc}
    cf1c:	0000b93d 	.word	0x0000b93d
    cf20:	0000cd71 	.word	0x0000cd71
    cf24:	0000cdc1 	.word	0x0000cdc1
    cf28:	0000cd41 	.word	0x0000cd41

0000cf2c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    cf2c:	b580      	push	{r7, lr}
    cf2e:	b082      	sub	sp, #8
    cf30:	af00      	add	r7, sp, #0
    cf32:	6078      	str	r0, [r7, #4]
    cf34:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    cf36:	687b      	ldr	r3, [r7, #4]
    cf38:	7c9b      	ldrb	r3, [r3, #18]
    cf3a:	2bff      	cmp	r3, #255	; 0xff
    cf3c:	d014      	beq.n	cf68 <_usb_d_dev_trans_done+0x3c>
    cf3e:	687b      	ldr	r3, [r7, #4]
    cf40:	7cdb      	ldrb	r3, [r3, #19]
    cf42:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cf46:	b2db      	uxtb	r3, r3
    cf48:	2b00      	cmp	r3, #0
    cf4a:	d00d      	beq.n	cf68 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    cf4c:	687a      	ldr	r2, [r7, #4]
    cf4e:	7cd3      	ldrb	r3, [r2, #19]
    cf50:	f36f 1386 	bfc	r3, #6, #1
    cf54:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    cf56:	4b06      	ldr	r3, [pc, #24]	; (cf70 <_usb_d_dev_trans_done+0x44>)
    cf58:	691b      	ldr	r3, [r3, #16]
    cf5a:	687a      	ldr	r2, [r7, #4]
    cf5c:	7c90      	ldrb	r0, [r2, #18]
    cf5e:	687a      	ldr	r2, [r7, #4]
    cf60:	6892      	ldr	r2, [r2, #8]
    cf62:	6839      	ldr	r1, [r7, #0]
    cf64:	4798      	blx	r3
    cf66:	e000      	b.n	cf6a <_usb_d_dev_trans_done+0x3e>
		return;
    cf68:	bf00      	nop
}
    cf6a:	3708      	adds	r7, #8
    cf6c:	46bd      	mov	sp, r7
    cf6e:	bd80      	pop	{r7, pc}
    cf70:	200023c4 	.word	0x200023c4

0000cf74 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    cf74:	b580      	push	{r7, lr}
    cf76:	b086      	sub	sp, #24
    cf78:	af00      	add	r7, sp, #0
    cf7a:	60f8      	str	r0, [r7, #12]
    cf7c:	460b      	mov	r3, r1
    cf7e:	607a      	str	r2, [r7, #4]
    cf80:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cf82:	68fb      	ldr	r3, [r7, #12]
    cf84:	7c9b      	ldrb	r3, [r3, #18]
    cf86:	f003 030f 	and.w	r3, r3, #15
    cf8a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    cf8c:	4b1f      	ldr	r3, [pc, #124]	; (d00c <_usb_d_dev_trans_stop+0x98>)
    cf8e:	881b      	ldrh	r3, [r3, #0]
    cf90:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    cf92:	68fb      	ldr	r3, [r7, #12]
    cf94:	7c9b      	ldrb	r3, [r3, #18]
    cf96:	2bff      	cmp	r3, #255	; 0xff
    cf98:	d033      	beq.n	d002 <_usb_d_dev_trans_stop+0x8e>
    cf9a:	68fb      	ldr	r3, [r7, #12]
    cf9c:	7cdb      	ldrb	r3, [r3, #19]
    cf9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cfa2:	b2db      	uxtb	r3, r3
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d02c      	beq.n	d002 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    cfa8:	7afb      	ldrb	r3, [r7, #11]
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d006      	beq.n	cfbc <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    cfae:	7dfb      	ldrb	r3, [r7, #23]
    cfb0:	2200      	movs	r2, #0
    cfb2:	2101      	movs	r1, #1
    cfb4:	4618      	mov	r0, r3
    cfb6:	4b16      	ldr	r3, [pc, #88]	; (d010 <_usb_d_dev_trans_stop+0x9c>)
    cfb8:	4798      	blx	r3
    cfba:	e005      	b.n	cfc8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    cfbc:	7dfb      	ldrb	r3, [r7, #23]
    cfbe:	2200      	movs	r2, #0
    cfc0:	2100      	movs	r1, #0
    cfc2:	4618      	mov	r0, r3
    cfc4:	4b13      	ldr	r3, [pc, #76]	; (d014 <_usb_d_dev_trans_stop+0xa0>)
    cfc6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    cfc8:	7afb      	ldrb	r3, [r7, #11]
    cfca:	f107 0218 	add.w	r2, r7, #24
    cfce:	4413      	add	r3, r2
    cfd0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    cfd4:	461a      	mov	r2, r3
    cfd6:	7dfb      	ldrb	r3, [r7, #23]
    cfd8:	4611      	mov	r1, r2
    cfda:	4618      	mov	r0, r3
    cfdc:	4b0e      	ldr	r3, [pc, #56]	; (d018 <_usb_d_dev_trans_stop+0xa4>)
    cfde:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    cfe0:	7afb      	ldrb	r3, [r7, #11]
    cfe2:	f107 0218 	add.w	r2, r7, #24
    cfe6:	4413      	add	r3, r2
    cfe8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    cfec:	461a      	mov	r2, r3
    cfee:	7dfb      	ldrb	r3, [r7, #23]
    cff0:	4611      	mov	r1, r2
    cff2:	4618      	mov	r0, r3
    cff4:	4b09      	ldr	r3, [pc, #36]	; (d01c <_usb_d_dev_trans_stop+0xa8>)
    cff6:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    cff8:	6879      	ldr	r1, [r7, #4]
    cffa:	68f8      	ldr	r0, [r7, #12]
    cffc:	4b08      	ldr	r3, [pc, #32]	; (d020 <_usb_d_dev_trans_stop+0xac>)
    cffe:	4798      	blx	r3
    d000:	e000      	b.n	d004 <_usb_d_dev_trans_stop+0x90>
		return;
    d002:	bf00      	nop
}
    d004:	3718      	adds	r7, #24
    d006:	46bd      	mov	sp, r7
    d008:	bd80      	pop	{r7, pc}
    d00a:	bf00      	nop
    d00c:	00012950 	.word	0x00012950
    d010:	0000b829 	.word	0x0000b829
    d014:	0000b881 	.word	0x0000b881
    d018:	0000b331 	.word	0x0000b331
    d01c:	0000b381 	.word	0x0000b381
    d020:	0000cf2d 	.word	0x0000cf2d

0000d024 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    d024:	b580      	push	{r7, lr}
    d026:	b086      	sub	sp, #24
    d028:	af00      	add	r7, sp, #0
    d02a:	4603      	mov	r3, r0
    d02c:	6039      	str	r1, [r7, #0]
    d02e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    d030:	79fb      	ldrb	r3, [r7, #7]
    d032:	f003 030f 	and.w	r3, r3, #15
    d036:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    d038:	7dfb      	ldrb	r3, [r7, #23]
    d03a:	015b      	lsls	r3, r3, #5
    d03c:	4a1e      	ldr	r2, [pc, #120]	; (d0b8 <_usb_d_dev_ep_read_req+0x94>)
    d03e:	4413      	add	r3, r2
    d040:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    d042:	693b      	ldr	r3, [r7, #16]
    d044:	681b      	ldr	r3, [r3, #0]
    d046:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    d048:	693b      	ldr	r3, [r7, #16]
    d04a:	685b      	ldr	r3, [r3, #4]
    d04c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d050:	b29b      	uxth	r3, r3
    d052:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    d054:	7dfb      	ldrb	r3, [r7, #23]
    d056:	2b04      	cmp	r3, #4
    d058:	d802      	bhi.n	d060 <_usb_d_dev_ep_read_req+0x3c>
    d05a:	683b      	ldr	r3, [r7, #0]
    d05c:	2b00      	cmp	r3, #0
    d05e:	d102      	bne.n	d066 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    d060:	f06f 0311 	mvn.w	r3, #17
    d064:	e023      	b.n	d0ae <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    d066:	7dfb      	ldrb	r3, [r7, #23]
    d068:	4618      	mov	r0, r3
    d06a:	4b14      	ldr	r3, [pc, #80]	; (d0bc <_usb_d_dev_ep_read_req+0x98>)
    d06c:	4798      	blx	r3
    d06e:	4603      	mov	r3, r0
    d070:	f083 0301 	eor.w	r3, r3, #1
    d074:	b2db      	uxtb	r3, r3
    d076:	2b00      	cmp	r3, #0
    d078:	d002      	beq.n	d080 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    d07a:	f06f 0312 	mvn.w	r3, #18
    d07e:	e016      	b.n	d0ae <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    d080:	7dfb      	ldrb	r3, [r7, #23]
    d082:	4618      	mov	r0, r3
    d084:	4b0e      	ldr	r3, [pc, #56]	; (d0c0 <_usb_d_dev_ep_read_req+0x9c>)
    d086:	4798      	blx	r3
    d088:	4603      	mov	r3, r0
    d08a:	f083 0301 	eor.w	r3, r3, #1
    d08e:	b2db      	uxtb	r3, r3
    d090:	2b00      	cmp	r3, #0
    d092:	d001      	beq.n	d098 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    d094:	2300      	movs	r3, #0
    d096:	e00a      	b.n	d0ae <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    d098:	68fb      	ldr	r3, [r7, #12]
    d09a:	2208      	movs	r2, #8
    d09c:	4619      	mov	r1, r3
    d09e:	6838      	ldr	r0, [r7, #0]
    d0a0:	4b08      	ldr	r3, [pc, #32]	; (d0c4 <_usb_d_dev_ep_read_req+0xa0>)
    d0a2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    d0a4:	7dfb      	ldrb	r3, [r7, #23]
    d0a6:	4618      	mov	r0, r3
    d0a8:	4b07      	ldr	r3, [pc, #28]	; (d0c8 <_usb_d_dev_ep_read_req+0xa4>)
    d0aa:	4798      	blx	r3

	return bytes;
    d0ac:	897b      	ldrh	r3, [r7, #10]
}
    d0ae:	4618      	mov	r0, r3
    d0b0:	3718      	adds	r7, #24
    d0b2:	46bd      	mov	sp, r7
    d0b4:	bd80      	pop	{r7, pc}
    d0b6:	bf00      	nop
    d0b8:	2000248c 	.word	0x2000248c
    d0bc:	0000b3a9 	.word	0x0000b3a9
    d0c0:	0000b555 	.word	0x0000b555
    d0c4:	00011401 	.word	0x00011401
    d0c8:	0000b585 	.word	0x0000b585

0000d0cc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    d0cc:	b580      	push	{r7, lr}
    d0ce:	b086      	sub	sp, #24
    d0d0:	af00      	add	r7, sp, #0
    d0d2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    d0d4:	687b      	ldr	r3, [r7, #4]
    d0d6:	7a1b      	ldrb	r3, [r3, #8]
    d0d8:	f003 030f 	and.w	r3, r3, #15
    d0dc:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    d0de:	687b      	ldr	r3, [r7, #4]
    d0e0:	7a1b      	ldrb	r3, [r3, #8]
    d0e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	bf14      	ite	ne
    d0ea:	2301      	movne	r3, #1
    d0ec:	2300      	moveq	r3, #0
    d0ee:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d0f0:	7d7a      	ldrb	r2, [r7, #21]
    d0f2:	7dbb      	ldrb	r3, [r7, #22]
    d0f4:	4611      	mov	r1, r2
    d0f6:	4618      	mov	r0, r3
    d0f8:	4b5f      	ldr	r3, [pc, #380]	; (d278 <_usb_d_dev_ep_trans+0x1ac>)
    d0fa:	4798      	blx	r3
    d0fc:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d0fe:	693b      	ldr	r3, [r7, #16]
    d100:	8a1b      	ldrh	r3, [r3, #16]
    d102:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d106:	4293      	cmp	r3, r2
    d108:	d004      	beq.n	d114 <_usb_d_dev_ep_trans+0x48>
    d10a:	693b      	ldr	r3, [r7, #16]
    d10c:	8a1b      	ldrh	r3, [r3, #16]
    d10e:	3b01      	subs	r3, #1
    d110:	b29b      	uxth	r3, r3
    d112:	e001      	b.n	d118 <_usb_d_dev_ep_trans+0x4c>
    d114:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d118:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    d11a:	687b      	ldr	r3, [r7, #4]
    d11c:	685a      	ldr	r2, [r3, #4]
    d11e:	89fb      	ldrh	r3, [r7, #14]
    d120:	4013      	ands	r3, r2
    d122:	2b00      	cmp	r3, #0
    d124:	bf14      	ite	ne
    d126:	2301      	movne	r3, #1
    d128:	2300      	moveq	r3, #0
    d12a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    d12c:	2300      	movs	r3, #0
    d12e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d130:	7dbb      	ldrb	r3, [r7, #22]
    d132:	2b04      	cmp	r3, #4
    d134:	d902      	bls.n	d13c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    d136:	f06f 0311 	mvn.w	r3, #17
    d13a:	e098      	b.n	d26e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    d13c:	687b      	ldr	r3, [r7, #4]
    d13e:	681b      	ldr	r3, [r3, #0]
    d140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    d144:	d31a      	bcc.n	d17c <_usb_d_dev_ep_trans+0xb0>
    d146:	687b      	ldr	r3, [r7, #4]
    d148:	681b      	ldr	r3, [r3, #0]
    d14a:	461a      	mov	r2, r3
    d14c:	687b      	ldr	r3, [r7, #4]
    d14e:	685b      	ldr	r3, [r3, #4]
    d150:	4413      	add	r3, r2
    d152:	4a4a      	ldr	r2, [pc, #296]	; (d27c <_usb_d_dev_ep_trans+0x1b0>)
    d154:	4293      	cmp	r3, r2
    d156:	d811      	bhi.n	d17c <_usb_d_dev_ep_trans+0xb0>
    d158:	687b      	ldr	r3, [r7, #4]
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	f003 0303 	and.w	r3, r3, #3
    d160:	2b00      	cmp	r3, #0
    d162:	d10b      	bne.n	d17c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    d164:	7d7b      	ldrb	r3, [r7, #21]
    d166:	f083 0301 	eor.w	r3, r3, #1
    d16a:	b2db      	uxtb	r3, r3
    d16c:	2b00      	cmp	r3, #0
    d16e:	d00e      	beq.n	d18e <_usb_d_dev_ep_trans+0xc2>
    d170:	687b      	ldr	r3, [r7, #4]
    d172:	685b      	ldr	r3, [r3, #4]
    d174:	693a      	ldr	r2, [r7, #16]
    d176:	8a12      	ldrh	r2, [r2, #16]
    d178:	4293      	cmp	r3, r2
    d17a:	d208      	bcs.n	d18e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    d17c:	693b      	ldr	r3, [r7, #16]
    d17e:	68db      	ldr	r3, [r3, #12]
    d180:	2b00      	cmp	r3, #0
    d182:	d102      	bne.n	d18a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    d184:	f06f 0312 	mvn.w	r3, #18
    d188:	e071      	b.n	d26e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    d18a:	2301      	movs	r3, #1
    d18c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    d18e:	7d7b      	ldrb	r3, [r7, #21]
    d190:	f083 0301 	eor.w	r3, r3, #1
    d194:	b2db      	uxtb	r3, r3
    d196:	2b00      	cmp	r3, #0
    d198:	d009      	beq.n	d1ae <_usb_d_dev_ep_trans+0xe2>
    d19a:	7b7b      	ldrb	r3, [r7, #13]
    d19c:	2b00      	cmp	r3, #0
    d19e:	d006      	beq.n	d1ae <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    d1a0:	693b      	ldr	r3, [r7, #16]
    d1a2:	68db      	ldr	r3, [r3, #12]
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d102      	bne.n	d1ae <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    d1a8:	f06f 0311 	mvn.w	r3, #17
    d1ac:	e05f      	b.n	d26e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    d1ae:	693b      	ldr	r3, [r7, #16]
    d1b0:	7cdb      	ldrb	r3, [r3, #19]
    d1b2:	f003 0308 	and.w	r3, r3, #8
    d1b6:	b2db      	uxtb	r3, r3
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d001      	beq.n	d1c0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    d1bc:	2302      	movs	r3, #2
    d1be:	e056      	b.n	d26e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    d1c0:	f107 0308 	add.w	r3, r7, #8
    d1c4:	4618      	mov	r0, r3
    d1c6:	4b2e      	ldr	r3, [pc, #184]	; (d280 <_usb_d_dev_ep_trans+0x1b4>)
    d1c8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    d1ca:	693b      	ldr	r3, [r7, #16]
    d1cc:	7cdb      	ldrb	r3, [r3, #19]
    d1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d1d2:	b2db      	uxtb	r3, r3
    d1d4:	2b00      	cmp	r3, #0
    d1d6:	d006      	beq.n	d1e6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    d1d8:	f107 0308 	add.w	r3, r7, #8
    d1dc:	4618      	mov	r0, r3
    d1de:	4b29      	ldr	r3, [pc, #164]	; (d284 <_usb_d_dev_ep_trans+0x1b8>)
    d1e0:	4798      	blx	r3
		return USB_BUSY;
    d1e2:	2301      	movs	r3, #1
    d1e4:	e043      	b.n	d26e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    d1e6:	693a      	ldr	r2, [r7, #16]
    d1e8:	7cd3      	ldrb	r3, [r2, #19]
    d1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d1ee:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    d1f0:	f107 0308 	add.w	r3, r7, #8
    d1f4:	4618      	mov	r0, r3
    d1f6:	4b23      	ldr	r3, [pc, #140]	; (d284 <_usb_d_dev_ep_trans+0x1b8>)
    d1f8:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    d1fa:	687b      	ldr	r3, [r7, #4]
    d1fc:	681a      	ldr	r2, [r3, #0]
    d1fe:	693b      	ldr	r3, [r7, #16]
    d200:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    d202:	687b      	ldr	r3, [r7, #4]
    d204:	685a      	ldr	r2, [r3, #4]
    d206:	693b      	ldr	r3, [r7, #16]
    d208:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    d20a:	693b      	ldr	r3, [r7, #16]
    d20c:	2200      	movs	r2, #0
    d20e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    d210:	693a      	ldr	r2, [r7, #16]
    d212:	7cd3      	ldrb	r3, [r2, #19]
    d214:	7d79      	ldrb	r1, [r7, #21]
    d216:	f361 13c7 	bfi	r3, r1, #7, #1
    d21a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    d21c:	693a      	ldr	r2, [r7, #16]
    d21e:	7cd3      	ldrb	r3, [r2, #19]
    d220:	7df9      	ldrb	r1, [r7, #23]
    d222:	f361 1345 	bfi	r3, r1, #5, #1
    d226:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    d228:	687b      	ldr	r3, [r7, #4]
    d22a:	7a5b      	ldrb	r3, [r3, #9]
    d22c:	2b00      	cmp	r3, #0
    d22e:	d007      	beq.n	d240 <_usb_d_dev_ep_trans+0x174>
    d230:	7b7b      	ldrb	r3, [r7, #13]
    d232:	f083 0301 	eor.w	r3, r3, #1
    d236:	b2db      	uxtb	r3, r3
    d238:	2b00      	cmp	r3, #0
    d23a:	d001      	beq.n	d240 <_usb_d_dev_ep_trans+0x174>
    d23c:	2301      	movs	r3, #1
    d23e:	e000      	b.n	d242 <_usb_d_dev_ep_trans+0x176>
    d240:	2300      	movs	r3, #0
    d242:	b2db      	uxtb	r3, r3
    d244:	f003 0301 	and.w	r3, r3, #1
    d248:	b2d9      	uxtb	r1, r3
    d24a:	693a      	ldr	r2, [r7, #16]
    d24c:	7cd3      	ldrb	r3, [r2, #19]
    d24e:	f361 1304 	bfi	r3, r1, #4, #1
    d252:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    d254:	7d7b      	ldrb	r3, [r7, #21]
    d256:	2b00      	cmp	r3, #0
    d258:	d004      	beq.n	d264 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    d25a:	2100      	movs	r1, #0
    d25c:	6938      	ldr	r0, [r7, #16]
    d25e:	4b0a      	ldr	r3, [pc, #40]	; (d288 <_usb_d_dev_ep_trans+0x1bc>)
    d260:	4798      	blx	r3
    d262:	e003      	b.n	d26c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    d264:	2100      	movs	r1, #0
    d266:	6938      	ldr	r0, [r7, #16]
    d268:	4b08      	ldr	r3, [pc, #32]	; (d28c <_usb_d_dev_ep_trans+0x1c0>)
    d26a:	4798      	blx	r3
	}

	return ERR_NONE;
    d26c:	2300      	movs	r3, #0
}
    d26e:	4618      	mov	r0, r3
    d270:	3718      	adds	r7, #24
    d272:	46bd      	mov	sp, r7
    d274:	bd80      	pop	{r7, pc}
    d276:	bf00      	nop
    d278:	0000b93d 	.word	0x0000b93d
    d27c:	20041fff 	.word	0x20041fff
    d280:	00003fa5 	.word	0x00003fa5
    d284:	00003fcb 	.word	0x00003fcb
    d288:	0000bc05 	.word	0x0000bc05
    d28c:	0000be1d 	.word	0x0000be1d

0000d290 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    d290:	b580      	push	{r7, lr}
    d292:	b084      	sub	sp, #16
    d294:	af00      	add	r7, sp, #0
    d296:	4603      	mov	r3, r0
    d298:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    d29a:	79fb      	ldrb	r3, [r7, #7]
    d29c:	f003 030f 	and.w	r3, r3, #15
    d2a0:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    d2a2:	79fb      	ldrb	r3, [r7, #7]
    d2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	bf14      	ite	ne
    d2ac:	2301      	movne	r3, #1
    d2ae:	2300      	moveq	r3, #0
    d2b0:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d2b2:	7bba      	ldrb	r2, [r7, #14]
    d2b4:	7bfb      	ldrb	r3, [r7, #15]
    d2b6:	4611      	mov	r1, r2
    d2b8:	4618      	mov	r0, r3
    d2ba:	4b08      	ldr	r3, [pc, #32]	; (d2dc <_usb_d_dev_ep_abort+0x4c>)
    d2bc:	4798      	blx	r3
    d2be:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    d2c0:	7bfb      	ldrb	r3, [r7, #15]
    d2c2:	2b04      	cmp	r3, #4
    d2c4:	d806      	bhi.n	d2d4 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    d2c6:	7bbb      	ldrb	r3, [r7, #14]
    d2c8:	2202      	movs	r2, #2
    d2ca:	4619      	mov	r1, r3
    d2cc:	68b8      	ldr	r0, [r7, #8]
    d2ce:	4b04      	ldr	r3, [pc, #16]	; (d2e0 <_usb_d_dev_ep_abort+0x50>)
    d2d0:	4798      	blx	r3
    d2d2:	e000      	b.n	d2d6 <_usb_d_dev_ep_abort+0x46>
		return;
    d2d4:	bf00      	nop
}
    d2d6:	3710      	adds	r7, #16
    d2d8:	46bd      	mov	sp, r7
    d2da:	bd80      	pop	{r7, pc}
    d2dc:	0000b93d 	.word	0x0000b93d
    d2e0:	0000cf75 	.word	0x0000cf75

0000d2e4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    d2e4:	b480      	push	{r7}
    d2e6:	b085      	sub	sp, #20
    d2e8:	af00      	add	r7, sp, #0
    d2ea:	4603      	mov	r3, r0
    d2ec:	6039      	str	r1, [r7, #0]
    d2ee:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d2f0:	683b      	ldr	r3, [r7, #0]
    d2f2:	2b00      	cmp	r3, #0
    d2f4:	d001      	beq.n	d2fa <_usb_d_dev_register_callback+0x16>
    d2f6:	683b      	ldr	r3, [r7, #0]
    d2f8:	e000      	b.n	d2fc <_usb_d_dev_register_callback+0x18>
    d2fa:	4b0a      	ldr	r3, [pc, #40]	; (d324 <_usb_d_dev_register_callback+0x40>)
    d2fc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    d2fe:	79fb      	ldrb	r3, [r7, #7]
    d300:	2b01      	cmp	r3, #1
    d302:	d103      	bne.n	d30c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    d304:	4a08      	ldr	r2, [pc, #32]	; (d328 <_usb_d_dev_register_callback+0x44>)
    d306:	68fb      	ldr	r3, [r7, #12]
    d308:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    d30a:	e005      	b.n	d318 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    d30c:	79fb      	ldrb	r3, [r7, #7]
    d30e:	2b00      	cmp	r3, #0
    d310:	d102      	bne.n	d318 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    d312:	4a05      	ldr	r2, [pc, #20]	; (d328 <_usb_d_dev_register_callback+0x44>)
    d314:	68fb      	ldr	r3, [r7, #12]
    d316:	6013      	str	r3, [r2, #0]
}
    d318:	bf00      	nop
    d31a:	3714      	adds	r7, #20
    d31c:	46bd      	mov	sp, r7
    d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d322:	4770      	bx	lr
    d324:	0000b1c5 	.word	0x0000b1c5
    d328:	200023c4 	.word	0x200023c4

0000d32c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    d32c:	b480      	push	{r7}
    d32e:	b085      	sub	sp, #20
    d330:	af00      	add	r7, sp, #0
    d332:	4603      	mov	r3, r0
    d334:	6039      	str	r1, [r7, #0]
    d336:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d338:	683b      	ldr	r3, [r7, #0]
    d33a:	2b00      	cmp	r3, #0
    d33c:	d001      	beq.n	d342 <_usb_d_dev_register_ep_callback+0x16>
    d33e:	683b      	ldr	r3, [r7, #0]
    d340:	e000      	b.n	d344 <_usb_d_dev_register_ep_callback+0x18>
    d342:	4b0e      	ldr	r3, [pc, #56]	; (d37c <_usb_d_dev_register_ep_callback+0x50>)
    d344:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    d346:	79fb      	ldrb	r3, [r7, #7]
    d348:	2b00      	cmp	r3, #0
    d34a:	d103      	bne.n	d354 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    d34c:	4a0c      	ldr	r2, [pc, #48]	; (d380 <_usb_d_dev_register_ep_callback+0x54>)
    d34e:	68fb      	ldr	r3, [r7, #12]
    d350:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    d352:	e00c      	b.n	d36e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    d354:	79fb      	ldrb	r3, [r7, #7]
    d356:	2b01      	cmp	r3, #1
    d358:	d103      	bne.n	d362 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    d35a:	4a09      	ldr	r2, [pc, #36]	; (d380 <_usb_d_dev_register_ep_callback+0x54>)
    d35c:	68fb      	ldr	r3, [r7, #12]
    d35e:	60d3      	str	r3, [r2, #12]
}
    d360:	e005      	b.n	d36e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    d362:	79fb      	ldrb	r3, [r7, #7]
    d364:	2b02      	cmp	r3, #2
    d366:	d102      	bne.n	d36e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    d368:	4a05      	ldr	r2, [pc, #20]	; (d380 <_usb_d_dev_register_ep_callback+0x54>)
    d36a:	68fb      	ldr	r3, [r7, #12]
    d36c:	6113      	str	r3, [r2, #16]
}
    d36e:	bf00      	nop
    d370:	3714      	adds	r7, #20
    d372:	46bd      	mov	sp, r7
    d374:	f85d 7b04 	ldr.w	r7, [sp], #4
    d378:	4770      	bx	lr
    d37a:	bf00      	nop
    d37c:	0000b1c5 	.word	0x0000b1c5
    d380:	200023c4 	.word	0x200023c4

0000d384 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    d384:	b580      	push	{r7, lr}
    d386:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d388:	4b01      	ldr	r3, [pc, #4]	; (d390 <USB_0_Handler+0xc>)
    d38a:	4798      	blx	r3
}
    d38c:	bf00      	nop
    d38e:	bd80      	pop	{r7, pc}
    d390:	0000c5f5 	.word	0x0000c5f5

0000d394 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    d394:	b580      	push	{r7, lr}
    d396:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d398:	4b01      	ldr	r3, [pc, #4]	; (d3a0 <USB_1_Handler+0xc>)
    d39a:	4798      	blx	r3
}
    d39c:	bf00      	nop
    d39e:	bd80      	pop	{r7, pc}
    d3a0:	0000c5f5 	.word	0x0000c5f5

0000d3a4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    d3a4:	b580      	push	{r7, lr}
    d3a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d3a8:	4b01      	ldr	r3, [pc, #4]	; (d3b0 <USB_2_Handler+0xc>)
    d3aa:	4798      	blx	r3
}
    d3ac:	bf00      	nop
    d3ae:	bd80      	pop	{r7, pc}
    d3b0:	0000c5f5 	.word	0x0000c5f5

0000d3b4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    d3b4:	b580      	push	{r7, lr}
    d3b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    d3b8:	4b01      	ldr	r3, [pc, #4]	; (d3c0 <USB_3_Handler+0xc>)
    d3ba:	4798      	blx	r3
}
    d3bc:	bf00      	nop
    d3be:	bd80      	pop	{r7, pc}
    d3c0:	0000c5f5 	.word	0x0000c5f5

0000d3c4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    d3c4:	b480      	push	{r7}
    d3c6:	b083      	sub	sp, #12
    d3c8:	af00      	add	r7, sp, #0
    d3ca:	6078      	str	r0, [r7, #4]
    d3cc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    d3ce:	bf00      	nop
    d3d0:	687b      	ldr	r3, [r7, #4]
    d3d2:	689a      	ldr	r2, [r3, #8]
    d3d4:	683b      	ldr	r3, [r7, #0]
    d3d6:	4013      	ands	r3, r2
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d1f9      	bne.n	d3d0 <hri_wdt_wait_for_sync+0xc>
	};
}
    d3dc:	bf00      	nop
    d3de:	370c      	adds	r7, #12
    d3e0:	46bd      	mov	sp, r7
    d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3e6:	4770      	bx	lr

0000d3e8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    d3e8:	b580      	push	{r7, lr}
    d3ea:	b084      	sub	sp, #16
    d3ec:	af00      	add	r7, sp, #0
    d3ee:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d3f0:	210e      	movs	r1, #14
    d3f2:	6878      	ldr	r0, [r7, #4]
    d3f4:	4b0a      	ldr	r3, [pc, #40]	; (d420 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    d3f6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d3f8:	687b      	ldr	r3, [r7, #4]
    d3fa:	781b      	ldrb	r3, [r3, #0]
    d3fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    d3fe:	7bfb      	ldrb	r3, [r7, #15]
    d400:	085b      	lsrs	r3, r3, #1
    d402:	b2db      	uxtb	r3, r3
    d404:	f003 0301 	and.w	r3, r3, #1
    d408:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d40a:	7bfb      	ldrb	r3, [r7, #15]
    d40c:	2b00      	cmp	r3, #0
    d40e:	bf14      	ite	ne
    d410:	2301      	movne	r3, #1
    d412:	2300      	moveq	r3, #0
    d414:	b2db      	uxtb	r3, r3
}
    d416:	4618      	mov	r0, r3
    d418:	3710      	adds	r7, #16
    d41a:	46bd      	mov	sp, r7
    d41c:	bd80      	pop	{r7, pc}
    d41e:	bf00      	nop
    d420:	0000d3c5 	.word	0x0000d3c5

0000d424 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    d424:	b580      	push	{r7, lr}
    d426:	b082      	sub	sp, #8
    d428:	af00      	add	r7, sp, #0
    d42a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	781b      	ldrb	r3, [r3, #0]
    d430:	b2db      	uxtb	r3, r3
    d432:	f023 0304 	bic.w	r3, r3, #4
    d436:	b2da      	uxtb	r2, r3
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d43c:	210e      	movs	r1, #14
    d43e:	6878      	ldr	r0, [r7, #4]
    d440:	4b02      	ldr	r3, [pc, #8]	; (d44c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    d442:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    d444:	bf00      	nop
    d446:	3708      	adds	r7, #8
    d448:	46bd      	mov	sp, r7
    d44a:	bd80      	pop	{r7, pc}
    d44c:	0000d3c5 	.word	0x0000d3c5

0000d450 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    d450:	b580      	push	{r7, lr}
    d452:	b084      	sub	sp, #16
    d454:	af00      	add	r7, sp, #0
    d456:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    d458:	210e      	movs	r1, #14
    d45a:	6878      	ldr	r0, [r7, #4]
    d45c:	4b08      	ldr	r3, [pc, #32]	; (d480 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    d45e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d460:	687b      	ldr	r3, [r7, #4]
    d462:	781b      	ldrb	r3, [r3, #0]
    d464:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    d466:	7bfb      	ldrb	r3, [r7, #15]
    d468:	09db      	lsrs	r3, r3, #7
    d46a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d46c:	7bfb      	ldrb	r3, [r7, #15]
    d46e:	2b00      	cmp	r3, #0
    d470:	bf14      	ite	ne
    d472:	2301      	movne	r3, #1
    d474:	2300      	moveq	r3, #0
    d476:	b2db      	uxtb	r3, r3
}
    d478:	4618      	mov	r0, r3
    d47a:	3710      	adds	r7, #16
    d47c:	46bd      	mov	sp, r7
    d47e:	bd80      	pop	{r7, pc}
    d480:	0000d3c5 	.word	0x0000d3c5

0000d484 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    d484:	b480      	push	{r7}
    d486:	b085      	sub	sp, #20
    d488:	af00      	add	r7, sp, #0
    d48a:	6078      	str	r0, [r7, #4]
    d48c:	460b      	mov	r3, r1
    d48e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    d490:	687b      	ldr	r3, [r7, #4]
    d492:	785b      	ldrb	r3, [r3, #1]
    d494:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    d496:	7bfb      	ldrb	r3, [r7, #15]
    d498:	f023 030f 	bic.w	r3, r3, #15
    d49c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    d49e:	78fb      	ldrb	r3, [r7, #3]
    d4a0:	f003 030f 	and.w	r3, r3, #15
    d4a4:	b2da      	uxtb	r2, r3
    d4a6:	7bfb      	ldrb	r3, [r7, #15]
    d4a8:	4313      	orrs	r3, r2
    d4aa:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	7bfa      	ldrb	r2, [r7, #15]
    d4b0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    d4b2:	bf00      	nop
    d4b4:	3714      	adds	r7, #20
    d4b6:	46bd      	mov	sp, r7
    d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4bc:	4770      	bx	lr
	...

0000d4c0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    d4c0:	b580      	push	{r7, lr}
    d4c2:	b082      	sub	sp, #8
    d4c4:	af00      	add	r7, sp, #0
    d4c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d005      	beq.n	d4da <_wdt_init+0x1a>
    d4ce:	687b      	ldr	r3, [r7, #4]
    d4d0:	681b      	ldr	r3, [r3, #0]
    d4d2:	2b00      	cmp	r3, #0
    d4d4:	d001      	beq.n	d4da <_wdt_init+0x1a>
    d4d6:	2301      	movs	r3, #1
    d4d8:	e000      	b.n	d4dc <_wdt_init+0x1c>
    d4da:	2300      	movs	r3, #0
    d4dc:	f003 0301 	and.w	r3, r3, #1
    d4e0:	b2db      	uxtb	r3, r3
    d4e2:	2250      	movs	r2, #80	; 0x50
    d4e4:	4913      	ldr	r1, [pc, #76]	; (d534 <_wdt_init+0x74>)
    d4e6:	4618      	mov	r0, r3
    d4e8:	4b13      	ldr	r3, [pc, #76]	; (d538 <_wdt_init+0x78>)
    d4ea:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	681b      	ldr	r3, [r3, #0]
    d4f0:	4618      	mov	r0, r3
    d4f2:	4b12      	ldr	r3, [pc, #72]	; (d53c <_wdt_init+0x7c>)
    d4f4:	4798      	blx	r3
    d4f6:	4603      	mov	r3, r0
    d4f8:	2b00      	cmp	r3, #0
    d4fa:	d107      	bne.n	d50c <_wdt_init+0x4c>
    d4fc:	687b      	ldr	r3, [r7, #4]
    d4fe:	681b      	ldr	r3, [r3, #0]
    d500:	4618      	mov	r0, r3
    d502:	4b0f      	ldr	r3, [pc, #60]	; (d540 <_wdt_init+0x80>)
    d504:	4798      	blx	r3
    d506:	4603      	mov	r3, r0
    d508:	2b00      	cmp	r3, #0
    d50a:	d002      	beq.n	d512 <_wdt_init+0x52>
		return ERR_DENIED;
    d50c:	f06f 0310 	mvn.w	r3, #16
    d510:	e00b      	b.n	d52a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    d512:	687b      	ldr	r3, [r7, #4]
    d514:	681b      	ldr	r3, [r3, #0]
    d516:	4618      	mov	r0, r3
    d518:	4b0a      	ldr	r3, [pc, #40]	; (d544 <_wdt_init+0x84>)
    d51a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	681b      	ldr	r3, [r3, #0]
    d520:	210b      	movs	r1, #11
    d522:	4618      	mov	r0, r3
    d524:	4b08      	ldr	r3, [pc, #32]	; (d548 <_wdt_init+0x88>)
    d526:	4798      	blx	r3
	}

	return ERR_NONE;
    d528:	2300      	movs	r3, #0
}
    d52a:	4618      	mov	r0, r3
    d52c:	3708      	adds	r7, #8
    d52e:	46bd      	mov	sp, r7
    d530:	bd80      	pop	{r7, pc}
    d532:	bf00      	nop
    d534:	00012954 	.word	0x00012954
    d538:	00005f89 	.word	0x00005f89
    d53c:	0000d451 	.word	0x0000d451
    d540:	0000d3e9 	.word	0x0000d3e9
    d544:	0000d425 	.word	0x0000d425
    d548:	0000d485 	.word	0x0000d485

0000d54c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    d54c:	b580      	push	{r7, lr}
    d54e:	b08c      	sub	sp, #48	; 0x30
    d550:	af00      	add	r7, sp, #0
    d552:	6078      	str	r0, [r7, #4]
    d554:	460b      	mov	r3, r1
    d556:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d558:	687b      	ldr	r3, [r7, #4]
    d55a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d55c:	687b      	ldr	r3, [r7, #4]
    d55e:	681b      	ldr	r3, [r3, #0]
    d560:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    d562:	f107 030c 	add.w	r3, r7, #12
    d566:	2200      	movs	r2, #0
    d568:	601a      	str	r2, [r3, #0]
    d56a:	605a      	str	r2, [r3, #4]
    d56c:	609a      	str	r2, [r3, #8]
    d56e:	60da      	str	r2, [r3, #12]
    d570:	611a      	str	r2, [r3, #16]
    d572:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d576:	7b1b      	ldrb	r3, [r3, #12]
    d578:	2b00      	cmp	r3, #0
    d57a:	d001      	beq.n	d580 <n25q256a_xip_confirm+0x34>
    d57c:	2206      	movs	r2, #6
    d57e:	e000      	b.n	d582 <n25q256a_xip_confirm+0x36>
    d580:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d582:	7b3b      	ldrb	r3, [r7, #12]
    d584:	f362 0302 	bfi	r3, r2, #0, #3
    d588:	733b      	strb	r3, [r7, #12]
    d58a:	7b3b      	ldrb	r3, [r7, #12]
    d58c:	f043 0310 	orr.w	r3, r3, #16
    d590:	733b      	strb	r3, [r7, #12]
    d592:	7b3b      	ldrb	r3, [r7, #12]
    d594:	f043 0320 	orr.w	r3, r3, #32
    d598:	733b      	strb	r3, [r7, #12]
    d59a:	7b3b      	ldrb	r3, [r7, #12]
    d59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d5a0:	733b      	strb	r3, [r7, #12]
    d5a2:	7b3b      	ldrb	r3, [r7, #12]
    d5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5a8:	733b      	strb	r3, [r7, #12]
    d5aa:	7b7b      	ldrb	r3, [r7, #13]
    d5ac:	f043 0303 	orr.w	r3, r3, #3
    d5b0:	737b      	strb	r3, [r7, #13]
    d5b2:	7b7b      	ldrb	r3, [r7, #13]
    d5b4:	2201      	movs	r2, #1
    d5b6:	f362 1305 	bfi	r3, r2, #4, #2
    d5ba:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    d5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5be:	7b1b      	ldrb	r3, [r3, #12]
    d5c0:	2b00      	cmp	r3, #0
    d5c2:	d001      	beq.n	d5c8 <n25q256a_xip_confirm+0x7c>
    d5c4:	2208      	movs	r2, #8
    d5c6:	e000      	b.n	d5ca <n25q256a_xip_confirm+0x7e>
    d5c8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d5ca:	7bbb      	ldrb	r3, [r7, #14]
    d5cc:	f362 0304 	bfi	r3, r2, #0, #5
    d5d0:	73bb      	strb	r3, [r7, #14]
    d5d2:	230b      	movs	r3, #11
    d5d4:	743b      	strb	r3, [r7, #16]
    d5d6:	78fb      	ldrb	r3, [r7, #3]
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d001      	beq.n	d5e0 <n25q256a_xip_confirm+0x94>
    d5dc:	2300      	movs	r3, #0
    d5de:	e000      	b.n	d5e2 <n25q256a_xip_confirm+0x96>
    d5e0:	23ff      	movs	r3, #255	; 0xff
    d5e2:	747b      	strb	r3, [r7, #17]
    d5e4:	2301      	movs	r3, #1
    d5e6:	61bb      	str	r3, [r7, #24]
    d5e8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    d5ec:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    d5ee:	f107 030c 	add.w	r3, r7, #12
    d5f2:	4619      	mov	r1, r3
    d5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d5f6:	4b07      	ldr	r3, [pc, #28]	; (d614 <n25q256a_xip_confirm+0xc8>)
    d5f8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    d5fa:	78fb      	ldrb	r3, [r7, #3]
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d001      	beq.n	d604 <n25q256a_xip_confirm+0xb8>
    d600:	2202      	movs	r2, #2
    d602:	e000      	b.n	d606 <n25q256a_xip_confirm+0xba>
    d604:	2201      	movs	r2, #1
    d606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d608:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d60a:	2300      	movs	r3, #0
}
    d60c:	4618      	mov	r0, r3
    d60e:	3730      	adds	r7, #48	; 0x30
    d610:	46bd      	mov	sp, r7
    d612:	bd80      	pop	{r7, pc}
    d614:	00004be9 	.word	0x00004be9

0000d618 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    d618:	b580      	push	{r7, lr}
    d61a:	b08c      	sub	sp, #48	; 0x30
    d61c:	af00      	add	r7, sp, #0
    d61e:	6078      	str	r0, [r7, #4]
    d620:	460b      	mov	r3, r1
    d622:	70fb      	strb	r3, [r7, #3]
    d624:	4613      	mov	r3, r2
    d626:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    d628:	2300      	movs	r3, #0
    d62a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    d62c:	687b      	ldr	r3, [r7, #4]
    d62e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    d630:	687b      	ldr	r3, [r7, #4]
    d632:	681b      	ldr	r3, [r3, #0]
    d634:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    d636:	f107 030c 	add.w	r3, r7, #12
    d63a:	2200      	movs	r2, #0
    d63c:	601a      	str	r2, [r3, #0]
    d63e:	605a      	str	r2, [r3, #4]
    d640:	609a      	str	r2, [r3, #8]
    d642:	60da      	str	r2, [r3, #12]
    d644:	611a      	str	r2, [r3, #16]
    d646:	615a      	str	r2, [r3, #20]
    d648:	78fb      	ldrb	r3, [r7, #3]
    d64a:	f003 0307 	and.w	r3, r3, #7
    d64e:	b2da      	uxtb	r2, r3
    d650:	7b3b      	ldrb	r3, [r7, #12]
    d652:	f362 0302 	bfi	r3, r2, #0, #3
    d656:	733b      	strb	r3, [r7, #12]
    d658:	7b3b      	ldrb	r3, [r7, #12]
    d65a:	f043 0310 	orr.w	r3, r3, #16
    d65e:	733b      	strb	r3, [r7, #12]
    d660:	7b3b      	ldrb	r3, [r7, #12]
    d662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d666:	733b      	strb	r3, [r7, #12]
    d668:	78bb      	ldrb	r3, [r7, #2]
    d66a:	743b      	strb	r3, [r7, #16]
    d66c:	2301      	movs	r3, #1
    d66e:	61bb      	str	r3, [r7, #24]
    d670:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d674:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d678:	7b5b      	ldrb	r3, [r3, #13]
    d67a:	2b00      	cmp	r3, #0
    d67c:	d003      	beq.n	d686 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    d67e:	2100      	movs	r1, #0
    d680:	6878      	ldr	r0, [r7, #4]
    d682:	4b0a      	ldr	r3, [pc, #40]	; (d6ac <n25q256a_read_reg+0x94>)
    d684:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d686:	f107 030c 	add.w	r3, r7, #12
    d68a:	4619      	mov	r1, r3
    d68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d68e:	4b08      	ldr	r3, [pc, #32]	; (d6b0 <n25q256a_read_reg+0x98>)
    d690:	4798      	blx	r3
	if (n25q->xip_mode) {
    d692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d694:	7b5b      	ldrb	r3, [r3, #13]
    d696:	2b00      	cmp	r3, #0
    d698:	d003      	beq.n	d6a2 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    d69a:	2101      	movs	r1, #1
    d69c:	6878      	ldr	r0, [r7, #4]
    d69e:	4b03      	ldr	r3, [pc, #12]	; (d6ac <n25q256a_read_reg+0x94>)
    d6a0:	4798      	blx	r3
	}
	return status;
    d6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d6a4:	4618      	mov	r0, r3
    d6a6:	3730      	adds	r7, #48	; 0x30
    d6a8:	46bd      	mov	sp, r7
    d6aa:	bd80      	pop	{r7, pc}
    d6ac:	0000d54d 	.word	0x0000d54d
    d6b0:	00004be9 	.word	0x00004be9

0000d6b4 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    d6b4:	b580      	push	{r7, lr}
    d6b6:	b08c      	sub	sp, #48	; 0x30
    d6b8:	af00      	add	r7, sp, #0
    d6ba:	60f8      	str	r0, [r7, #12]
    d6bc:	607b      	str	r3, [r7, #4]
    d6be:	460b      	mov	r3, r1
    d6c0:	72fb      	strb	r3, [r7, #11]
    d6c2:	4613      	mov	r3, r2
    d6c4:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d6c6:	68fb      	ldr	r3, [r7, #12]
    d6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d6ca:	68fb      	ldr	r3, [r7, #12]
    d6cc:	681b      	ldr	r3, [r3, #0]
    d6ce:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    d6d0:	f107 0310 	add.w	r3, r7, #16
    d6d4:	2200      	movs	r2, #0
    d6d6:	601a      	str	r2, [r3, #0]
    d6d8:	605a      	str	r2, [r3, #4]
    d6da:	609a      	str	r2, [r3, #8]
    d6dc:	60da      	str	r2, [r3, #12]
    d6de:	611a      	str	r2, [r3, #16]
    d6e0:	615a      	str	r2, [r3, #20]
    d6e2:	7afb      	ldrb	r3, [r7, #11]
    d6e4:	f003 0307 	and.w	r3, r3, #7
    d6e8:	b2da      	uxtb	r2, r3
    d6ea:	7c3b      	ldrb	r3, [r7, #16]
    d6ec:	f362 0302 	bfi	r3, r2, #0, #3
    d6f0:	743b      	strb	r3, [r7, #16]
    d6f2:	7c3b      	ldrb	r3, [r7, #16]
    d6f4:	f043 0310 	orr.w	r3, r3, #16
    d6f8:	743b      	strb	r3, [r7, #16]
    d6fa:	7c3b      	ldrb	r3, [r7, #16]
    d6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d700:	743b      	strb	r3, [r7, #16]
    d702:	7c7b      	ldrb	r3, [r7, #17]
    d704:	2202      	movs	r2, #2
    d706:	f362 1305 	bfi	r3, r2, #4, #2
    d70a:	747b      	strb	r3, [r7, #17]
    d70c:	7abb      	ldrb	r3, [r7, #10]
    d70e:	753b      	strb	r3, [r7, #20]
    d710:	2301      	movs	r3, #1
    d712:	61fb      	str	r3, [r7, #28]
    d714:	1d3b      	adds	r3, r7, #4
    d716:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d71a:	7b5b      	ldrb	r3, [r3, #13]
    d71c:	2b00      	cmp	r3, #0
    d71e:	d003      	beq.n	d728 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    d720:	2100      	movs	r1, #0
    d722:	68f8      	ldr	r0, [r7, #12]
    d724:	4b09      	ldr	r3, [pc, #36]	; (d74c <n25q256a_write_reg+0x98>)
    d726:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d728:	f107 0310 	add.w	r3, r7, #16
    d72c:	4619      	mov	r1, r3
    d72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d730:	4b07      	ldr	r3, [pc, #28]	; (d750 <n25q256a_write_reg+0x9c>)
    d732:	4798      	blx	r3
	if (n25q->xip_mode) {
    d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d736:	7b5b      	ldrb	r3, [r3, #13]
    d738:	2b00      	cmp	r3, #0
    d73a:	d003      	beq.n	d744 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    d73c:	2101      	movs	r1, #1
    d73e:	68f8      	ldr	r0, [r7, #12]
    d740:	4b02      	ldr	r3, [pc, #8]	; (d74c <n25q256a_write_reg+0x98>)
    d742:	4798      	blx	r3
	}
}
    d744:	bf00      	nop
    d746:	3730      	adds	r7, #48	; 0x30
    d748:	46bd      	mov	sp, r7
    d74a:	bd80      	pop	{r7, pc}
    d74c:	0000d54d 	.word	0x0000d54d
    d750:	00004be9 	.word	0x00004be9

0000d754 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    d754:	b580      	push	{r7, lr}
    d756:	b090      	sub	sp, #64	; 0x40
    d758:	af00      	add	r7, sp, #0
    d75a:	6078      	str	r0, [r7, #4]
    d75c:	460b      	mov	r3, r1
    d75e:	70fb      	strb	r3, [r7, #3]
    d760:	4613      	mov	r3, r2
    d762:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d764:	687b      	ldr	r3, [r7, #4]
    d766:	681b      	ldr	r3, [r3, #0]
    d768:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    d76a:	78bb      	ldrb	r3, [r7, #2]
    d76c:	2b00      	cmp	r3, #0
    d76e:	d001      	beq.n	d774 <n25q256a_write_enable+0x20>
    d770:	2306      	movs	r3, #6
    d772:	e000      	b.n	d776 <n25q256a_write_enable+0x22>
    d774:	2304      	movs	r3, #4
    d776:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    d77a:	f107 0320 	add.w	r3, r7, #32
    d77e:	2200      	movs	r2, #0
    d780:	601a      	str	r2, [r3, #0]
    d782:	605a      	str	r2, [r3, #4]
    d784:	609a      	str	r2, [r3, #8]
    d786:	60da      	str	r2, [r3, #12]
    d788:	611a      	str	r2, [r3, #16]
    d78a:	615a      	str	r2, [r3, #20]
    d78c:	78fb      	ldrb	r3, [r7, #3]
    d78e:	f003 0307 	and.w	r3, r3, #7
    d792:	b2da      	uxtb	r2, r3
    d794:	f897 3020 	ldrb.w	r3, [r7, #32]
    d798:	f362 0302 	bfi	r3, r2, #0, #3
    d79c:	f887 3020 	strb.w	r3, [r7, #32]
    d7a0:	f897 3020 	ldrb.w	r3, [r7, #32]
    d7a4:	f043 0310 	orr.w	r3, r3, #16
    d7a8:	f887 3020 	strb.w	r3, [r7, #32]
    d7ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d7b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    d7b4:	f107 0308 	add.w	r3, r7, #8
    d7b8:	2200      	movs	r2, #0
    d7ba:	601a      	str	r2, [r3, #0]
    d7bc:	605a      	str	r2, [r3, #4]
    d7be:	609a      	str	r2, [r3, #8]
    d7c0:	60da      	str	r2, [r3, #12]
    d7c2:	611a      	str	r2, [r3, #16]
    d7c4:	615a      	str	r2, [r3, #20]
    d7c6:	78fb      	ldrb	r3, [r7, #3]
    d7c8:	f003 0307 	and.w	r3, r3, #7
    d7cc:	b2da      	uxtb	r2, r3
    d7ce:	7a3b      	ldrb	r3, [r7, #8]
    d7d0:	f362 0302 	bfi	r3, r2, #0, #3
    d7d4:	723b      	strb	r3, [r7, #8]
    d7d6:	7a3b      	ldrb	r3, [r7, #8]
    d7d8:	f043 0310 	orr.w	r3, r3, #16
    d7dc:	723b      	strb	r3, [r7, #8]
    d7de:	7a3b      	ldrb	r3, [r7, #8]
    d7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d7e4:	723b      	strb	r3, [r7, #8]
    d7e6:	2305      	movs	r3, #5
    d7e8:	733b      	strb	r3, [r7, #12]
    d7ea:	2301      	movs	r3, #1
    d7ec:	617b      	str	r3, [r7, #20]
    d7ee:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    d7f2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    d7f4:	f107 0320 	add.w	r3, r7, #32
    d7f8:	4619      	mov	r1, r3
    d7fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d7fc:	4b08      	ldr	r3, [pc, #32]	; (d820 <n25q256a_write_enable+0xcc>)
    d7fe:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    d800:	f107 0308 	add.w	r3, r7, #8
    d804:	4619      	mov	r1, r3
    d806:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d808:	4b05      	ldr	r3, [pc, #20]	; (d820 <n25q256a_write_enable+0xcc>)
    d80a:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    d80c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    d810:	f003 0302 	and.w	r3, r3, #2
    d814:	2b00      	cmp	r3, #0
    d816:	d0ed      	beq.n	d7f4 <n25q256a_write_enable+0xa0>
}
    d818:	bf00      	nop
    d81a:	3740      	adds	r7, #64	; 0x40
    d81c:	46bd      	mov	sp, r7
    d81e:	bd80      	pop	{r7, pc}
    d820:	00004be9 	.word	0x00004be9

0000d824 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    d824:	b590      	push	{r4, r7, lr}
    d826:	b087      	sub	sp, #28
    d828:	af00      	add	r7, sp, #0
    d82a:	6078      	str	r0, [r7, #4]
    d82c:	460b      	mov	r3, r1
    d82e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    d830:	687b      	ldr	r3, [r7, #4]
    d832:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d834:	68fb      	ldr	r3, [r7, #12]
    d836:	7b1b      	ldrb	r3, [r3, #12]
    d838:	2b00      	cmp	r3, #0
    d83a:	d001      	beq.n	d840 <n25q256a_switch_mode+0x1c>
    d83c:	2306      	movs	r3, #6
    d83e:	e000      	b.n	d842 <n25q256a_switch_mode+0x1e>
    d840:	2300      	movs	r3, #0
    d842:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d844:	7afb      	ldrb	r3, [r7, #11]
    d846:	2265      	movs	r2, #101	; 0x65
    d848:	4619      	mov	r1, r3
    d84a:	6878      	ldr	r0, [r7, #4]
    d84c:	4b25      	ldr	r3, [pc, #148]	; (d8e4 <n25q256a_switch_mode+0xc0>)
    d84e:	4798      	blx	r3
    d850:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    d852:	2300      	movs	r3, #0
    d854:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    d856:	68fb      	ldr	r3, [r7, #12]
    d858:	7b1b      	ldrb	r3, [r3, #12]
    d85a:	78fa      	ldrb	r2, [r7, #3]
    d85c:	429a      	cmp	r2, r3
    d85e:	d03d      	beq.n	d8dc <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    d860:	78fb      	ldrb	r3, [r7, #3]
    d862:	2b00      	cmp	r3, #0
    d864:	d00b      	beq.n	d87e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    d866:	697b      	ldr	r3, [r7, #20]
    d868:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d86c:	2b00      	cmp	r3, #0
    d86e:	d011      	beq.n	d894 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    d870:	697b      	ldr	r3, [r7, #20]
    d872:	f003 031f 	and.w	r3, r3, #31
    d876:	617b      	str	r3, [r7, #20]
			modify = 1;
    d878:	2301      	movs	r3, #1
    d87a:	74fb      	strb	r3, [r7, #19]
    d87c:	e00a      	b.n	d894 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    d87e:	697b      	ldr	r3, [r7, #20]
    d880:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d884:	2b00      	cmp	r3, #0
    d886:	d105      	bne.n	d894 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    d888:	697b      	ldr	r3, [r7, #20]
    d88a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d88e:	617b      	str	r3, [r7, #20]
			modify = 1;
    d890:	2301      	movs	r3, #1
    d892:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    d894:	7cfb      	ldrb	r3, [r7, #19]
    d896:	2b00      	cmp	r3, #0
    d898:	d021      	beq.n	d8de <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    d89a:	68fb      	ldr	r3, [r7, #12]
    d89c:	78fa      	ldrb	r2, [r7, #3]
    d89e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    d8a0:	7afb      	ldrb	r3, [r7, #11]
    d8a2:	2201      	movs	r2, #1
    d8a4:	4619      	mov	r1, r3
    d8a6:	6878      	ldr	r0, [r7, #4]
    d8a8:	4b0f      	ldr	r3, [pc, #60]	; (d8e8 <n25q256a_switch_mode+0xc4>)
    d8aa:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    d8ac:	7af9      	ldrb	r1, [r7, #11]
    d8ae:	697b      	ldr	r3, [r7, #20]
    d8b0:	2261      	movs	r2, #97	; 0x61
    d8b2:	6878      	ldr	r0, [r7, #4]
    d8b4:	4c0d      	ldr	r4, [pc, #52]	; (d8ec <n25q256a_switch_mode+0xc8>)
    d8b6:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d8b8:	78fb      	ldrb	r3, [r7, #3]
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	d001      	beq.n	d8c2 <n25q256a_switch_mode+0x9e>
    d8be:	2306      	movs	r3, #6
    d8c0:	e000      	b.n	d8c4 <n25q256a_switch_mode+0xa0>
    d8c2:	2300      	movs	r3, #0
    d8c4:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d8c6:	7afb      	ldrb	r3, [r7, #11]
    d8c8:	2265      	movs	r2, #101	; 0x65
    d8ca:	4619      	mov	r1, r3
    d8cc:	6878      	ldr	r0, [r7, #4]
    d8ce:	4b05      	ldr	r3, [pc, #20]	; (d8e4 <n25q256a_switch_mode+0xc0>)
    d8d0:	4798      	blx	r3
    d8d2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    d8d4:	68fb      	ldr	r3, [r7, #12]
    d8d6:	78fa      	ldrb	r2, [r7, #3]
    d8d8:	731a      	strb	r2, [r3, #12]
    d8da:	e000      	b.n	d8de <n25q256a_switch_mode+0xba>
		return;
    d8dc:	bf00      	nop
	}
}
    d8de:	371c      	adds	r7, #28
    d8e0:	46bd      	mov	sp, r7
    d8e2:	bd90      	pop	{r4, r7, pc}
    d8e4:	0000d619 	.word	0x0000d619
    d8e8:	0000d755 	.word	0x0000d755
    d8ec:	0000d6b5 	.word	0x0000d6b5

0000d8f0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    d8f0:	b580      	push	{r7, lr}
    d8f2:	b086      	sub	sp, #24
    d8f4:	af00      	add	r7, sp, #0
    d8f6:	60f8      	str	r0, [r7, #12]
    d8f8:	60b9      	str	r1, [r7, #8]
    d8fa:	607a      	str	r2, [r7, #4]
    d8fc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    d8fe:	68fb      	ldr	r3, [r7, #12]
    d900:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    d902:	4a0c      	ldr	r2, [pc, #48]	; (d934 <n25q256a_construct+0x44>)
    d904:	68b9      	ldr	r1, [r7, #8]
    d906:	68f8      	ldr	r0, [r7, #12]
    d908:	4b0b      	ldr	r3, [pc, #44]	; (d938 <n25q256a_construct+0x48>)
    d90a:	4798      	blx	r3
	n25q->quad_mode    = 0;
    d90c:	697b      	ldr	r3, [r7, #20]
    d90e:	2200      	movs	r2, #0
    d910:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    d912:	697b      	ldr	r3, [r7, #20]
    d914:	2200      	movs	r2, #0
    d916:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    d918:	697b      	ldr	r3, [r7, #20]
    d91a:	687a      	ldr	r2, [r7, #4]
    d91c:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    d91e:	78fb      	ldrb	r3, [r7, #3]
    d920:	4619      	mov	r1, r3
    d922:	68f8      	ldr	r0, [r7, #12]
    d924:	4b05      	ldr	r3, [pc, #20]	; (d93c <n25q256a_construct+0x4c>)
    d926:	4798      	blx	r3
	return me;
    d928:	68fb      	ldr	r3, [r7, #12]
}
    d92a:	4618      	mov	r0, r3
    d92c:	3718      	adds	r7, #24
    d92e:	46bd      	mov	sp, r7
    d930:	bd80      	pop	{r7, pc}
    d932:	bf00      	nop
    d934:	0001296c 	.word	0x0001296c
    d938:	0000ddcd 	.word	0x0000ddcd
    d93c:	0000d825 	.word	0x0000d825

0000d940 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d940:	b580      	push	{r7, lr}
    d942:	b08c      	sub	sp, #48	; 0x30
    d944:	af00      	add	r7, sp, #0
    d946:	60f8      	str	r0, [r7, #12]
    d948:	60b9      	str	r1, [r7, #8]
    d94a:	607a      	str	r2, [r7, #4]
    d94c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d94e:	68fb      	ldr	r3, [r7, #12]
    d950:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d952:	68fb      	ldr	r3, [r7, #12]
    d954:	681b      	ldr	r3, [r3, #0]
    d956:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    d958:	f107 0310 	add.w	r3, r7, #16
    d95c:	2200      	movs	r2, #0
    d95e:	601a      	str	r2, [r3, #0]
    d960:	605a      	str	r2, [r3, #4]
    d962:	609a      	str	r2, [r3, #8]
    d964:	60da      	str	r2, [r3, #12]
    d966:	611a      	str	r2, [r3, #16]
    d968:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d96c:	7b1b      	ldrb	r3, [r3, #12]
    d96e:	2b00      	cmp	r3, #0
    d970:	d001      	beq.n	d976 <n25q256a_read+0x36>
    d972:	2206      	movs	r2, #6
    d974:	e000      	b.n	d978 <n25q256a_read+0x38>
    d976:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    d978:	7c3b      	ldrb	r3, [r7, #16]
    d97a:	f362 0302 	bfi	r3, r2, #0, #3
    d97e:	743b      	strb	r3, [r7, #16]
    d980:	7c3b      	ldrb	r3, [r7, #16]
    d982:	f043 0310 	orr.w	r3, r3, #16
    d986:	743b      	strb	r3, [r7, #16]
    d988:	7c3b      	ldrb	r3, [r7, #16]
    d98a:	f043 0320 	orr.w	r3, r3, #32
    d98e:	743b      	strb	r3, [r7, #16]
    d990:	7c3b      	ldrb	r3, [r7, #16]
    d992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d996:	743b      	strb	r3, [r7, #16]
    d998:	7c7b      	ldrb	r3, [r7, #17]
    d99a:	2201      	movs	r2, #1
    d99c:	f362 1305 	bfi	r3, r2, #4, #2
    d9a0:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    d9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d9a4:	7b1b      	ldrb	r3, [r3, #12]
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	d001      	beq.n	d9ae <n25q256a_read+0x6e>
    d9aa:	220a      	movs	r2, #10
    d9ac:	e000      	b.n	d9b0 <n25q256a_read+0x70>
    d9ae:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    d9b0:	7cbb      	ldrb	r3, [r7, #18]
    d9b2:	f362 0304 	bfi	r3, r2, #0, #5
    d9b6:	74bb      	strb	r3, [r7, #18]
    d9b8:	230b      	movs	r3, #11
    d9ba:	753b      	strb	r3, [r7, #20]
    d9bc:	687b      	ldr	r3, [r7, #4]
    d9be:	61bb      	str	r3, [r7, #24]
    d9c0:	683b      	ldr	r3, [r7, #0]
    d9c2:	61fb      	str	r3, [r7, #28]
    d9c4:	68bb      	ldr	r3, [r7, #8]
    d9c6:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    d9c8:	f107 0310 	add.w	r3, r7, #16
    d9cc:	4619      	mov	r1, r3
    d9ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d9d0:	4b03      	ldr	r3, [pc, #12]	; (d9e0 <n25q256a_read+0xa0>)
    d9d2:	4798      	blx	r3
	return ERR_NONE;
    d9d4:	2300      	movs	r3, #0
}
    d9d6:	4618      	mov	r0, r3
    d9d8:	3730      	adds	r7, #48	; 0x30
    d9da:	46bd      	mov	sp, r7
    d9dc:	bd80      	pop	{r7, pc}
    d9de:	bf00      	nop
    d9e0:	00004be9 	.word	0x00004be9

0000d9e4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d9e4:	b580      	push	{r7, lr}
    d9e6:	b08c      	sub	sp, #48	; 0x30
    d9e8:	af00      	add	r7, sp, #0
    d9ea:	60f8      	str	r0, [r7, #12]
    d9ec:	60b9      	str	r1, [r7, #8]
    d9ee:	607a      	str	r2, [r7, #4]
    d9f0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d9f2:	68fb      	ldr	r3, [r7, #12]
    d9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d9f6:	68fb      	ldr	r3, [r7, #12]
    d9f8:	681b      	ldr	r3, [r3, #0]
    d9fa:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    d9fc:	f107 0310 	add.w	r3, r7, #16
    da00:	2200      	movs	r2, #0
    da02:	601a      	str	r2, [r3, #0]
    da04:	605a      	str	r2, [r3, #4]
    da06:	609a      	str	r2, [r3, #8]
    da08:	60da      	str	r2, [r3, #12]
    da0a:	611a      	str	r2, [r3, #16]
    da0c:	615a      	str	r2, [r3, #20]
    da0e:	7c3b      	ldrb	r3, [r7, #16]
    da10:	f043 0310 	orr.w	r3, r3, #16
    da14:	743b      	strb	r3, [r7, #16]
    da16:	7c3b      	ldrb	r3, [r7, #16]
    da18:	f043 0320 	orr.w	r3, r3, #32
    da1c:	743b      	strb	r3, [r7, #16]
    da1e:	7c3b      	ldrb	r3, [r7, #16]
    da20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da24:	743b      	strb	r3, [r7, #16]
    da26:	7c7b      	ldrb	r3, [r7, #17]
    da28:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    da2c:	747b      	strb	r3, [r7, #17]
    da2e:	2302      	movs	r3, #2
    da30:	753b      	strb	r3, [r7, #20]
    da32:	687b      	ldr	r3, [r7, #4]
    da34:	61bb      	str	r3, [r7, #24]
    da36:	683b      	ldr	r3, [r7, #0]
    da38:	61fb      	str	r3, [r7, #28]
    da3a:	68bb      	ldr	r3, [r7, #8]
    da3c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    da3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da40:	7b1b      	ldrb	r3, [r3, #12]
    da42:	2b00      	cmp	r3, #0
    da44:	d001      	beq.n	da4a <n25q256a_write+0x66>
    da46:	2206      	movs	r2, #6
    da48:	e000      	b.n	da4c <n25q256a_write+0x68>
    da4a:	2200      	movs	r2, #0
    da4c:	7c3b      	ldrb	r3, [r7, #16]
    da4e:	f362 0302 	bfi	r3, r2, #0, #3
    da52:	743b      	strb	r3, [r7, #16]
	while (length) {
    da54:	e035      	b.n	dac2 <n25q256a_write+0xde>
		cmd.address = address;
    da56:	687b      	ldr	r3, [r7, #4]
    da58:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    da5a:	683b      	ldr	r3, [r7, #0]
    da5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    da60:	d802      	bhi.n	da68 <n25q256a_write+0x84>
			cmd.buf_len = length;
    da62:	683b      	ldr	r3, [r7, #0]
    da64:	61fb      	str	r3, [r7, #28]
    da66:	e002      	b.n	da6e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    da68:	f44f 7380 	mov.w	r3, #256	; 0x100
    da6c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    da6e:	7c3b      	ldrb	r3, [r7, #16]
    da70:	f3c3 0302 	ubfx	r3, r3, #0, #3
    da74:	b2db      	uxtb	r3, r3
    da76:	2201      	movs	r2, #1
    da78:	4619      	mov	r1, r3
    da7a:	68f8      	ldr	r0, [r7, #12]
    da7c:	4b19      	ldr	r3, [pc, #100]	; (dae4 <n25q256a_write+0x100>)
    da7e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    da80:	f107 0310 	add.w	r3, r7, #16
    da84:	4619      	mov	r1, r3
    da86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    da88:	4b17      	ldr	r3, [pc, #92]	; (dae8 <n25q256a_write+0x104>)
    da8a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    da8c:	bf00      	nop
    da8e:	7c3b      	ldrb	r3, [r7, #16]
    da90:	f3c3 0302 	ubfx	r3, r3, #0, #3
    da94:	b2db      	uxtb	r3, r3
    da96:	2270      	movs	r2, #112	; 0x70
    da98:	4619      	mov	r1, r3
    da9a:	68f8      	ldr	r0, [r7, #12]
    da9c:	4b13      	ldr	r3, [pc, #76]	; (daec <n25q256a_write+0x108>)
    da9e:	4798      	blx	r3
    daa0:	4603      	mov	r3, r0
    daa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    daa6:	2b00      	cmp	r3, #0
    daa8:	d0f1      	beq.n	da8e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    daaa:	6a3a      	ldr	r2, [r7, #32]
    daac:	69fb      	ldr	r3, [r7, #28]
    daae:	4413      	add	r3, r2
    dab0:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    dab2:	69fb      	ldr	r3, [r7, #28]
    dab4:	683a      	ldr	r2, [r7, #0]
    dab6:	1ad3      	subs	r3, r2, r3
    dab8:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    daba:	69fb      	ldr	r3, [r7, #28]
    dabc:	687a      	ldr	r2, [r7, #4]
    dabe:	4413      	add	r3, r2
    dac0:	607b      	str	r3, [r7, #4]
	while (length) {
    dac2:	683b      	ldr	r3, [r7, #0]
    dac4:	2b00      	cmp	r3, #0
    dac6:	d1c6      	bne.n	da56 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    daca:	7b5b      	ldrb	r3, [r3, #13]
    dacc:	2b00      	cmp	r3, #0
    dace:	d003      	beq.n	dad8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    dad0:	2101      	movs	r1, #1
    dad2:	68f8      	ldr	r0, [r7, #12]
    dad4:	4b06      	ldr	r3, [pc, #24]	; (daf0 <n25q256a_write+0x10c>)
    dad6:	4798      	blx	r3
	}
	return ERR_NONE;
    dad8:	2300      	movs	r3, #0
}
    dada:	4618      	mov	r0, r3
    dadc:	3730      	adds	r7, #48	; 0x30
    dade:	46bd      	mov	sp, r7
    dae0:	bd80      	pop	{r7, pc}
    dae2:	bf00      	nop
    dae4:	0000d755 	.word	0x0000d755
    dae8:	00004be9 	.word	0x00004be9
    daec:	0000d619 	.word	0x0000d619
    daf0:	0000d54d 	.word	0x0000d54d

0000daf4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    daf4:	b580      	push	{r7, lr}
    daf6:	b090      	sub	sp, #64	; 0x40
    daf8:	af00      	add	r7, sp, #0
    dafa:	60f8      	str	r0, [r7, #12]
    dafc:	60b9      	str	r1, [r7, #8]
    dafe:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    db00:	68fb      	ldr	r3, [r7, #12]
    db02:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    db04:	68fb      	ldr	r3, [r7, #12]
    db06:	681b      	ldr	r3, [r3, #0]
    db08:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    db0a:	f107 0314 	add.w	r3, r7, #20
    db0e:	2200      	movs	r2, #0
    db10:	601a      	str	r2, [r3, #0]
    db12:	605a      	str	r2, [r3, #4]
    db14:	609a      	str	r2, [r3, #8]
    db16:	60da      	str	r2, [r3, #12]
    db18:	611a      	str	r2, [r3, #16]
    db1a:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    db1e:	7b1b      	ldrb	r3, [r3, #12]
    db20:	2b00      	cmp	r3, #0
    db22:	d001      	beq.n	db28 <n25q256a_erase+0x34>
    db24:	2206      	movs	r2, #6
    db26:	e000      	b.n	db2a <n25q256a_erase+0x36>
    db28:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    db2a:	7d3b      	ldrb	r3, [r7, #20]
    db2c:	f362 0302 	bfi	r3, r2, #0, #3
    db30:	753b      	strb	r3, [r7, #20]
    db32:	7d3b      	ldrb	r3, [r7, #20]
    db34:	f043 0310 	orr.w	r3, r3, #16
    db38:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    db3a:	687b      	ldr	r3, [r7, #4]
    db3c:	4a56      	ldr	r2, [pc, #344]	; (dc98 <n25q256a_erase+0x1a4>)
    db3e:	4293      	cmp	r3, r2
    db40:	bf94      	ite	ls
    db42:	2301      	movls	r3, #1
    db44:	2300      	movhi	r3, #0
    db46:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    db48:	7d3b      	ldrb	r3, [r7, #20]
    db4a:	f362 1345 	bfi	r3, r2, #5, #1
    db4e:	753b      	strb	r3, [r7, #20]
    db50:	7d7b      	ldrb	r3, [r7, #21]
    db52:	2202      	movs	r2, #2
    db54:	f362 1305 	bfi	r3, r2, #4, #2
    db58:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    db5a:	68bb      	ldr	r3, [r7, #8]
    db5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    db62:	2300      	movs	r3, #0
    db64:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    db66:	687b      	ldr	r3, [r7, #4]
    db68:	f3c3 030b 	ubfx	r3, r3, #0, #12
    db6c:	2b00      	cmp	r3, #0
    db6e:	d104      	bne.n	db7a <n25q256a_erase+0x86>
    db70:	68bb      	ldr	r3, [r7, #8]
    db72:	f3c3 030b 	ubfx	r3, r3, #0, #12
    db76:	2b00      	cmp	r3, #0
    db78:	d002      	beq.n	db80 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    db7a:	f06f 030c 	mvn.w	r3, #12
    db7e:	e087      	b.n	dc90 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    db80:	687b      	ldr	r3, [r7, #4]
    db82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    db86:	d368      	bcc.n	dc5a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    db88:	23c7      	movs	r3, #199	; 0xc7
    db8a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    db8c:	7d3b      	ldrb	r3, [r7, #20]
    db8e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    db92:	b2db      	uxtb	r3, r3
    db94:	2201      	movs	r2, #1
    db96:	4619      	mov	r1, r3
    db98:	68f8      	ldr	r0, [r7, #12]
    db9a:	4b40      	ldr	r3, [pc, #256]	; (dc9c <n25q256a_erase+0x1a8>)
    db9c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    db9e:	f107 0314 	add.w	r3, r7, #20
    dba2:	4619      	mov	r1, r3
    dba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dba6:	4b3e      	ldr	r3, [pc, #248]	; (dca0 <n25q256a_erase+0x1ac>)
    dba8:	4798      	blx	r3
    dbaa:	e059      	b.n	dc60 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    dbac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbae:	b29b      	uxth	r3, r3
    dbb0:	2b00      	cmp	r3, #0
    dbb2:	d11f      	bne.n	dbf4 <n25q256a_erase+0x100>
    dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dbb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    dbba:	d31b      	bcc.n	dbf4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbbe:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    dbc0:	23d8      	movs	r3, #216	; 0xd8
    dbc2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    dbc4:	7d3b      	ldrb	r3, [r7, #20]
    dbc6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dbca:	b2db      	uxtb	r3, r3
    dbcc:	2201      	movs	r2, #1
    dbce:	4619      	mov	r1, r3
    dbd0:	68f8      	ldr	r0, [r7, #12]
    dbd2:	4b32      	ldr	r3, [pc, #200]	; (dc9c <n25q256a_erase+0x1a8>)
    dbd4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    dbd6:	f107 0314 	add.w	r3, r7, #20
    dbda:	4619      	mov	r1, r3
    dbdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dbde:	4b30      	ldr	r3, [pc, #192]	; (dca0 <n25q256a_erase+0x1ac>)
    dbe0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    dbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbe4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    dbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dbec:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    dbf0:	63bb      	str	r3, [r7, #56]	; 0x38
    dbf2:	e023      	b.n	dc3c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    dbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dbf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    dbfa:	d31b      	bcc.n	dc34 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    dbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dbfe:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    dc00:	2320      	movs	r3, #32
    dc02:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    dc04:	7d3b      	ldrb	r3, [r7, #20]
    dc06:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dc0a:	b2db      	uxtb	r3, r3
    dc0c:	2201      	movs	r2, #1
    dc0e:	4619      	mov	r1, r3
    dc10:	68f8      	ldr	r0, [r7, #12]
    dc12:	4b22      	ldr	r3, [pc, #136]	; (dc9c <n25q256a_erase+0x1a8>)
    dc14:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    dc16:	f107 0314 	add.w	r3, r7, #20
    dc1a:	4619      	mov	r1, r3
    dc1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dc1e:	4b20      	ldr	r3, [pc, #128]	; (dca0 <n25q256a_erase+0x1ac>)
    dc20:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    dc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    dc28:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dc2c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    dc30:	63bb      	str	r3, [r7, #56]	; 0x38
    dc32:	e003      	b.n	dc3c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    dc34:	f06f 030c 	mvn.w	r3, #12
    dc38:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    dc3a:	e011      	b.n	dc60 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    dc3c:	bf00      	nop
    dc3e:	7d3b      	ldrb	r3, [r7, #20]
    dc40:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dc44:	b2db      	uxtb	r3, r3
    dc46:	2270      	movs	r2, #112	; 0x70
    dc48:	4619      	mov	r1, r3
    dc4a:	68f8      	ldr	r0, [r7, #12]
    dc4c:	4b15      	ldr	r3, [pc, #84]	; (dca4 <n25q256a_erase+0x1b0>)
    dc4e:	4798      	blx	r3
    dc50:	4603      	mov	r3, r0
    dc52:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dc56:	2b00      	cmp	r3, #0
    dc58:	d0f1      	beq.n	dc3e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    dc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d1a5      	bne.n	dbac <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    dc60:	bf00      	nop
    dc62:	7d3b      	ldrb	r3, [r7, #20]
    dc64:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dc68:	b2db      	uxtb	r3, r3
    dc6a:	2270      	movs	r2, #112	; 0x70
    dc6c:	4619      	mov	r1, r3
    dc6e:	68f8      	ldr	r0, [r7, #12]
    dc70:	4b0c      	ldr	r3, [pc, #48]	; (dca4 <n25q256a_erase+0x1b0>)
    dc72:	4798      	blx	r3
    dc74:	4603      	mov	r3, r0
    dc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d0f1      	beq.n	dc62 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dc80:	7b5b      	ldrb	r3, [r3, #13]
    dc82:	2b00      	cmp	r3, #0
    dc84:	d003      	beq.n	dc8e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    dc86:	2101      	movs	r1, #1
    dc88:	68f8      	ldr	r0, [r7, #12]
    dc8a:	4b07      	ldr	r3, [pc, #28]	; (dca8 <n25q256a_erase+0x1b4>)
    dc8c:	4798      	blx	r3
	}
	return rc;
    dc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    dc90:	4618      	mov	r0, r3
    dc92:	3740      	adds	r7, #64	; 0x40
    dc94:	46bd      	mov	sp, r7
    dc96:	bd80      	pop	{r7, pc}
    dc98:	001fffff 	.word	0x001fffff
    dc9c:	0000d755 	.word	0x0000d755
    dca0:	00004be9 	.word	0x00004be9
    dca4:	0000d619 	.word	0x0000d619
    dca8:	0000d54d 	.word	0x0000d54d

0000dcac <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    dcac:	b590      	push	{r4, r7, lr}
    dcae:	b085      	sub	sp, #20
    dcb0:	af00      	add	r7, sp, #0
    dcb2:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    dcb4:	687b      	ldr	r3, [r7, #4]
    dcb6:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    dcb8:	68fb      	ldr	r3, [r7, #12]
    dcba:	7b1b      	ldrb	r3, [r3, #12]
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d001      	beq.n	dcc4 <n25q256a_enable_xip+0x18>
    dcc0:	2306      	movs	r3, #6
    dcc2:	e000      	b.n	dcc6 <n25q256a_enable_xip+0x1a>
    dcc4:	2300      	movs	r3, #0
    dcc6:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    dcc8:	68fb      	ldr	r3, [r7, #12]
    dcca:	7b5b      	ldrb	r3, [r3, #13]
    dccc:	2b00      	cmp	r3, #0
    dcce:	d129      	bne.n	dd24 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    dcd0:	7afb      	ldrb	r3, [r7, #11]
    dcd2:	2285      	movs	r2, #133	; 0x85
    dcd4:	4619      	mov	r1, r3
    dcd6:	6878      	ldr	r0, [r7, #4]
    dcd8:	4b15      	ldr	r3, [pc, #84]	; (dd30 <n25q256a_enable_xip+0x84>)
    dcda:	4798      	blx	r3
    dcdc:	4603      	mov	r3, r0
    dcde:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    dce0:	7abb      	ldrb	r3, [r7, #10]
    dce2:	f003 0308 	and.w	r3, r3, #8
    dce6:	2b00      	cmp	r3, #0
    dce8:	d015      	beq.n	dd16 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    dcea:	7abb      	ldrb	r3, [r7, #10]
    dcec:	f023 0308 	bic.w	r3, r3, #8
    dcf0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    dcf2:	7abb      	ldrb	r3, [r7, #10]
    dcf4:	7af9      	ldrb	r1, [r7, #11]
    dcf6:	2281      	movs	r2, #129	; 0x81
    dcf8:	6878      	ldr	r0, [r7, #4]
    dcfa:	4c0e      	ldr	r4, [pc, #56]	; (dd34 <n25q256a_enable_xip+0x88>)
    dcfc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    dcfe:	bf00      	nop
    dd00:	7afb      	ldrb	r3, [r7, #11]
    dd02:	2270      	movs	r2, #112	; 0x70
    dd04:	4619      	mov	r1, r3
    dd06:	6878      	ldr	r0, [r7, #4]
    dd08:	4b09      	ldr	r3, [pc, #36]	; (dd30 <n25q256a_enable_xip+0x84>)
    dd0a:	4798      	blx	r3
    dd0c:	4603      	mov	r3, r0
    dd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    dd12:	2b00      	cmp	r3, #0
    dd14:	d0f4      	beq.n	dd00 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    dd16:	68fb      	ldr	r3, [r7, #12]
    dd18:	2201      	movs	r2, #1
    dd1a:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    dd1c:	2101      	movs	r1, #1
    dd1e:	6878      	ldr	r0, [r7, #4]
    dd20:	4b05      	ldr	r3, [pc, #20]	; (dd38 <n25q256a_enable_xip+0x8c>)
    dd22:	4798      	blx	r3
	}
	return ERR_NONE;
    dd24:	2300      	movs	r3, #0
}
    dd26:	4618      	mov	r0, r3
    dd28:	3714      	adds	r7, #20
    dd2a:	46bd      	mov	sp, r7
    dd2c:	bd90      	pop	{r4, r7, pc}
    dd2e:	bf00      	nop
    dd30:	0000d619 	.word	0x0000d619
    dd34:	0000d6b5 	.word	0x0000d6b5
    dd38:	0000d54d 	.word	0x0000d54d

0000dd3c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    dd3c:	b580      	push	{r7, lr}
    dd3e:	b086      	sub	sp, #24
    dd40:	af00      	add	r7, sp, #0
    dd42:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    dd44:	687b      	ldr	r3, [r7, #4]
    dd46:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    dd48:	687b      	ldr	r3, [r7, #4]
    dd4a:	681b      	ldr	r3, [r3, #0]
    dd4c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    dd4e:	697b      	ldr	r3, [r7, #20]
    dd50:	7b1b      	ldrb	r3, [r3, #12]
    dd52:	2b00      	cmp	r3, #0
    dd54:	d001      	beq.n	dd5a <n25q256a_disable_xip+0x1e>
    dd56:	2306      	movs	r3, #6
    dd58:	e000      	b.n	dd5c <n25q256a_disable_xip+0x20>
    dd5a:	2300      	movs	r3, #0
    dd5c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    dd5e:	2100      	movs	r1, #0
    dd60:	6878      	ldr	r0, [r7, #4]
    dd62:	4b15      	ldr	r3, [pc, #84]	; (ddb8 <n25q256a_disable_xip+0x7c>)
    dd64:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    dd66:	7bfb      	ldrb	r3, [r7, #15]
    dd68:	2285      	movs	r2, #133	; 0x85
    dd6a:	4619      	mov	r1, r3
    dd6c:	6878      	ldr	r0, [r7, #4]
    dd6e:	4b13      	ldr	r3, [pc, #76]	; (ddbc <n25q256a_disable_xip+0x80>)
    dd70:	4798      	blx	r3
    dd72:	4603      	mov	r3, r0
    dd74:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    dd76:	7bbb      	ldrb	r3, [r7, #14]
    dd78:	f003 0308 	and.w	r3, r3, #8
    dd7c:	2b00      	cmp	r3, #0
    dd7e:	d113      	bne.n	dda8 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    dd80:	697b      	ldr	r3, [r7, #20]
    dd82:	689b      	ldr	r3, [r3, #8]
    dd84:	2b00      	cmp	r3, #0
    dd86:	d00f      	beq.n	dda8 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    dd88:	693b      	ldr	r3, [r7, #16]
    dd8a:	681b      	ldr	r3, [r3, #0]
    dd8c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    dd8e:	6938      	ldr	r0, [r7, #16]
    dd90:	4b0b      	ldr	r3, [pc, #44]	; (ddc0 <n25q256a_disable_xip+0x84>)
    dd92:	4798      	blx	r3
			n25q->pin_exit_xip();
    dd94:	697b      	ldr	r3, [r7, #20]
    dd96:	689b      	ldr	r3, [r3, #8]
    dd98:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    dd9a:	68b9      	ldr	r1, [r7, #8]
    dd9c:	6938      	ldr	r0, [r7, #16]
    dd9e:	4b09      	ldr	r3, [pc, #36]	; (ddc4 <n25q256a_disable_xip+0x88>)
    dda0:	4798      	blx	r3
			qspi_sync_enable(descr);
    dda2:	6938      	ldr	r0, [r7, #16]
    dda4:	4b08      	ldr	r3, [pc, #32]	; (ddc8 <n25q256a_disable_xip+0x8c>)
    dda6:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    dda8:	697b      	ldr	r3, [r7, #20]
    ddaa:	2200      	movs	r2, #0
    ddac:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ddae:	2300      	movs	r3, #0
}
    ddb0:	4618      	mov	r0, r3
    ddb2:	3718      	adds	r7, #24
    ddb4:	46bd      	mov	sp, r7
    ddb6:	bd80      	pop	{r7, pc}
    ddb8:	0000d54d 	.word	0x0000d54d
    ddbc:	0000d619 	.word	0x0000d619
    ddc0:	00004bad 	.word	0x00004bad
    ddc4:	00004b25 	.word	0x00004b25
    ddc8:	00004b71 	.word	0x00004b71

0000ddcc <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ddcc:	b480      	push	{r7}
    ddce:	b085      	sub	sp, #20
    ddd0:	af00      	add	r7, sp, #0
    ddd2:	60f8      	str	r0, [r7, #12]
    ddd4:	60b9      	str	r1, [r7, #8]
    ddd6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    ddd8:	68fb      	ldr	r3, [r7, #12]
    ddda:	68ba      	ldr	r2, [r7, #8]
    dddc:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    ddde:	68fb      	ldr	r3, [r7, #12]
    dde0:	687a      	ldr	r2, [r7, #4]
    dde2:	605a      	str	r2, [r3, #4]

	return me;
    dde4:	68fb      	ldr	r3, [r7, #12]
}
    dde6:	4618      	mov	r0, r3
    dde8:	3714      	adds	r7, #20
    ddea:	46bd      	mov	sp, r7
    ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
    ddf0:	4770      	bx	lr

0000ddf2 <hri_port_set_DIR_reg>:
{
    ddf2:	b480      	push	{r7}
    ddf4:	b085      	sub	sp, #20
    ddf6:	af00      	add	r7, sp, #0
    ddf8:	60f8      	str	r0, [r7, #12]
    ddfa:	460b      	mov	r3, r1
    ddfc:	607a      	str	r2, [r7, #4]
    ddfe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    de00:	7afb      	ldrb	r3, [r7, #11]
    de02:	68fa      	ldr	r2, [r7, #12]
    de04:	01db      	lsls	r3, r3, #7
    de06:	4413      	add	r3, r2
    de08:	3308      	adds	r3, #8
    de0a:	687a      	ldr	r2, [r7, #4]
    de0c:	601a      	str	r2, [r3, #0]
}
    de0e:	bf00      	nop
    de10:	3714      	adds	r7, #20
    de12:	46bd      	mov	sp, r7
    de14:	f85d 7b04 	ldr.w	r7, [sp], #4
    de18:	4770      	bx	lr

0000de1a <hri_port_clear_DIR_reg>:
{
    de1a:	b480      	push	{r7}
    de1c:	b085      	sub	sp, #20
    de1e:	af00      	add	r7, sp, #0
    de20:	60f8      	str	r0, [r7, #12]
    de22:	460b      	mov	r3, r1
    de24:	607a      	str	r2, [r7, #4]
    de26:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    de28:	7afb      	ldrb	r3, [r7, #11]
    de2a:	68fa      	ldr	r2, [r7, #12]
    de2c:	01db      	lsls	r3, r3, #7
    de2e:	4413      	add	r3, r2
    de30:	3304      	adds	r3, #4
    de32:	687a      	ldr	r2, [r7, #4]
    de34:	601a      	str	r2, [r3, #0]
}
    de36:	bf00      	nop
    de38:	3714      	adds	r7, #20
    de3a:	46bd      	mov	sp, r7
    de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    de40:	4770      	bx	lr

0000de42 <hri_port_set_OUT_reg>:
{
    de42:	b480      	push	{r7}
    de44:	b085      	sub	sp, #20
    de46:	af00      	add	r7, sp, #0
    de48:	60f8      	str	r0, [r7, #12]
    de4a:	460b      	mov	r3, r1
    de4c:	607a      	str	r2, [r7, #4]
    de4e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    de50:	7afb      	ldrb	r3, [r7, #11]
    de52:	68fa      	ldr	r2, [r7, #12]
    de54:	01db      	lsls	r3, r3, #7
    de56:	4413      	add	r3, r2
    de58:	3318      	adds	r3, #24
    de5a:	687a      	ldr	r2, [r7, #4]
    de5c:	601a      	str	r2, [r3, #0]
}
    de5e:	bf00      	nop
    de60:	3714      	adds	r7, #20
    de62:	46bd      	mov	sp, r7
    de64:	f85d 7b04 	ldr.w	r7, [sp], #4
    de68:	4770      	bx	lr

0000de6a <hri_port_clear_OUT_reg>:
{
    de6a:	b480      	push	{r7}
    de6c:	b085      	sub	sp, #20
    de6e:	af00      	add	r7, sp, #0
    de70:	60f8      	str	r0, [r7, #12]
    de72:	460b      	mov	r3, r1
    de74:	607a      	str	r2, [r7, #4]
    de76:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    de78:	7afb      	ldrb	r3, [r7, #11]
    de7a:	68fa      	ldr	r2, [r7, #12]
    de7c:	01db      	lsls	r3, r3, #7
    de7e:	4413      	add	r3, r2
    de80:	3314      	adds	r3, #20
    de82:	687a      	ldr	r2, [r7, #4]
    de84:	601a      	str	r2, [r3, #0]
}
    de86:	bf00      	nop
    de88:	3714      	adds	r7, #20
    de8a:	46bd      	mov	sp, r7
    de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    de90:	4770      	bx	lr

0000de92 <hri_port_write_PMUX_PMUXE_bf>:
{
    de92:	b480      	push	{r7}
    de94:	b085      	sub	sp, #20
    de96:	af00      	add	r7, sp, #0
    de98:	6078      	str	r0, [r7, #4]
    de9a:	4608      	mov	r0, r1
    de9c:	4611      	mov	r1, r2
    de9e:	461a      	mov	r2, r3
    dea0:	4603      	mov	r3, r0
    dea2:	70fb      	strb	r3, [r7, #3]
    dea4:	460b      	mov	r3, r1
    dea6:	70bb      	strb	r3, [r7, #2]
    dea8:	4613      	mov	r3, r2
    deaa:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    deac:	78fa      	ldrb	r2, [r7, #3]
    deae:	78bb      	ldrb	r3, [r7, #2]
    deb0:	6879      	ldr	r1, [r7, #4]
    deb2:	01d2      	lsls	r2, r2, #7
    deb4:	440a      	add	r2, r1
    deb6:	4413      	add	r3, r2
    deb8:	3330      	adds	r3, #48	; 0x30
    deba:	781b      	ldrb	r3, [r3, #0]
    debc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    debe:	7bfb      	ldrb	r3, [r7, #15]
    dec0:	f023 030f 	bic.w	r3, r3, #15
    dec4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    dec6:	787b      	ldrb	r3, [r7, #1]
    dec8:	f003 030f 	and.w	r3, r3, #15
    decc:	b2da      	uxtb	r2, r3
    dece:	7bfb      	ldrb	r3, [r7, #15]
    ded0:	4313      	orrs	r3, r2
    ded2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ded4:	78fa      	ldrb	r2, [r7, #3]
    ded6:	78bb      	ldrb	r3, [r7, #2]
    ded8:	6879      	ldr	r1, [r7, #4]
    deda:	01d2      	lsls	r2, r2, #7
    dedc:	440a      	add	r2, r1
    dede:	4413      	add	r3, r2
    dee0:	3330      	adds	r3, #48	; 0x30
    dee2:	7bfa      	ldrb	r2, [r7, #15]
    dee4:	701a      	strb	r2, [r3, #0]
}
    dee6:	bf00      	nop
    dee8:	3714      	adds	r7, #20
    deea:	46bd      	mov	sp, r7
    deec:	f85d 7b04 	ldr.w	r7, [sp], #4
    def0:	4770      	bx	lr

0000def2 <hri_port_write_PMUX_PMUXO_bf>:
{
    def2:	b480      	push	{r7}
    def4:	b085      	sub	sp, #20
    def6:	af00      	add	r7, sp, #0
    def8:	6078      	str	r0, [r7, #4]
    defa:	4608      	mov	r0, r1
    defc:	4611      	mov	r1, r2
    defe:	461a      	mov	r2, r3
    df00:	4603      	mov	r3, r0
    df02:	70fb      	strb	r3, [r7, #3]
    df04:	460b      	mov	r3, r1
    df06:	70bb      	strb	r3, [r7, #2]
    df08:	4613      	mov	r3, r2
    df0a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    df0c:	78fa      	ldrb	r2, [r7, #3]
    df0e:	78bb      	ldrb	r3, [r7, #2]
    df10:	6879      	ldr	r1, [r7, #4]
    df12:	01d2      	lsls	r2, r2, #7
    df14:	440a      	add	r2, r1
    df16:	4413      	add	r3, r2
    df18:	3330      	adds	r3, #48	; 0x30
    df1a:	781b      	ldrb	r3, [r3, #0]
    df1c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    df1e:	7bfb      	ldrb	r3, [r7, #15]
    df20:	f003 030f 	and.w	r3, r3, #15
    df24:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    df26:	787b      	ldrb	r3, [r7, #1]
    df28:	011b      	lsls	r3, r3, #4
    df2a:	b2da      	uxtb	r2, r3
    df2c:	7bfb      	ldrb	r3, [r7, #15]
    df2e:	4313      	orrs	r3, r2
    df30:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    df32:	78fa      	ldrb	r2, [r7, #3]
    df34:	78bb      	ldrb	r3, [r7, #2]
    df36:	6879      	ldr	r1, [r7, #4]
    df38:	01d2      	lsls	r2, r2, #7
    df3a:	440a      	add	r2, r1
    df3c:	4413      	add	r3, r2
    df3e:	3330      	adds	r3, #48	; 0x30
    df40:	7bfa      	ldrb	r2, [r7, #15]
    df42:	701a      	strb	r2, [r3, #0]
}
    df44:	bf00      	nop
    df46:	3714      	adds	r7, #20
    df48:	46bd      	mov	sp, r7
    df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    df4e:	4770      	bx	lr

0000df50 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    df50:	b480      	push	{r7}
    df52:	b085      	sub	sp, #20
    df54:	af00      	add	r7, sp, #0
    df56:	6078      	str	r0, [r7, #4]
    df58:	4608      	mov	r0, r1
    df5a:	4611      	mov	r1, r2
    df5c:	461a      	mov	r2, r3
    df5e:	4603      	mov	r3, r0
    df60:	70fb      	strb	r3, [r7, #3]
    df62:	460b      	mov	r3, r1
    df64:	70bb      	strb	r3, [r7, #2]
    df66:	4613      	mov	r3, r2
    df68:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    df6a:	78fa      	ldrb	r2, [r7, #3]
    df6c:	78bb      	ldrb	r3, [r7, #2]
    df6e:	6879      	ldr	r1, [r7, #4]
    df70:	01d2      	lsls	r2, r2, #7
    df72:	440a      	add	r2, r1
    df74:	4413      	add	r3, r2
    df76:	3340      	adds	r3, #64	; 0x40
    df78:	781b      	ldrb	r3, [r3, #0]
    df7a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    df7c:	7bfb      	ldrb	r3, [r7, #15]
    df7e:	f023 0301 	bic.w	r3, r3, #1
    df82:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    df84:	787a      	ldrb	r2, [r7, #1]
    df86:	7bfb      	ldrb	r3, [r7, #15]
    df88:	4313      	orrs	r3, r2
    df8a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    df8c:	78fa      	ldrb	r2, [r7, #3]
    df8e:	78bb      	ldrb	r3, [r7, #2]
    df90:	6879      	ldr	r1, [r7, #4]
    df92:	01d2      	lsls	r2, r2, #7
    df94:	440a      	add	r2, r1
    df96:	4413      	add	r3, r2
    df98:	3340      	adds	r3, #64	; 0x40
    df9a:	7bfa      	ldrb	r2, [r7, #15]
    df9c:	701a      	strb	r2, [r3, #0]
}
    df9e:	bf00      	nop
    dfa0:	3714      	adds	r7, #20
    dfa2:	46bd      	mov	sp, r7
    dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfa8:	4770      	bx	lr

0000dfaa <hri_port_write_WRCONFIG_reg>:
{
    dfaa:	b480      	push	{r7}
    dfac:	b085      	sub	sp, #20
    dfae:	af00      	add	r7, sp, #0
    dfb0:	60f8      	str	r0, [r7, #12]
    dfb2:	460b      	mov	r3, r1
    dfb4:	607a      	str	r2, [r7, #4]
    dfb6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    dfb8:	7afb      	ldrb	r3, [r7, #11]
    dfba:	68fa      	ldr	r2, [r7, #12]
    dfbc:	01db      	lsls	r3, r3, #7
    dfbe:	4413      	add	r3, r2
    dfc0:	3328      	adds	r3, #40	; 0x28
    dfc2:	687a      	ldr	r2, [r7, #4]
    dfc4:	601a      	str	r2, [r3, #0]
}
    dfc6:	bf00      	nop
    dfc8:	3714      	adds	r7, #20
    dfca:	46bd      	mov	sp, r7
    dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfd0:	4770      	bx	lr
	...

0000dfd4 <_gpio_set_direction>:
{
    dfd4:	b580      	push	{r7, lr}
    dfd6:	b082      	sub	sp, #8
    dfd8:	af00      	add	r7, sp, #0
    dfda:	4603      	mov	r3, r0
    dfdc:	6039      	str	r1, [r7, #0]
    dfde:	71fb      	strb	r3, [r7, #7]
    dfe0:	4613      	mov	r3, r2
    dfe2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    dfe4:	79bb      	ldrb	r3, [r7, #6]
    dfe6:	2b01      	cmp	r3, #1
    dfe8:	d01c      	beq.n	e024 <_gpio_set_direction+0x50>
    dfea:	2b02      	cmp	r3, #2
    dfec:	d037      	beq.n	e05e <_gpio_set_direction+0x8a>
    dfee:	2b00      	cmp	r3, #0
    dff0:	d14e      	bne.n	e090 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    dff2:	79fb      	ldrb	r3, [r7, #7]
    dff4:	683a      	ldr	r2, [r7, #0]
    dff6:	4619      	mov	r1, r3
    dff8:	482a      	ldr	r0, [pc, #168]	; (e0a4 <_gpio_set_direction+0xd0>)
    dffa:	4b2b      	ldr	r3, [pc, #172]	; (e0a8 <_gpio_set_direction+0xd4>)
    dffc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    dffe:	683b      	ldr	r3, [r7, #0]
    e000:	b29b      	uxth	r3, r3
    e002:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e006:	79fb      	ldrb	r3, [r7, #7]
    e008:	4619      	mov	r1, r3
    e00a:	4826      	ldr	r0, [pc, #152]	; (e0a4 <_gpio_set_direction+0xd0>)
    e00c:	4b27      	ldr	r3, [pc, #156]	; (e0ac <_gpio_set_direction+0xd8>)
    e00e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e010:	683b      	ldr	r3, [r7, #0]
    e012:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e014:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e018:	79fb      	ldrb	r3, [r7, #7]
    e01a:	4619      	mov	r1, r3
    e01c:	4821      	ldr	r0, [pc, #132]	; (e0a4 <_gpio_set_direction+0xd0>)
    e01e:	4b23      	ldr	r3, [pc, #140]	; (e0ac <_gpio_set_direction+0xd8>)
    e020:	4798      	blx	r3
		break;
    e022:	e03a      	b.n	e09a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    e024:	79fb      	ldrb	r3, [r7, #7]
    e026:	683a      	ldr	r2, [r7, #0]
    e028:	4619      	mov	r1, r3
    e02a:	481e      	ldr	r0, [pc, #120]	; (e0a4 <_gpio_set_direction+0xd0>)
    e02c:	4b1e      	ldr	r3, [pc, #120]	; (e0a8 <_gpio_set_direction+0xd4>)
    e02e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    e030:	683b      	ldr	r3, [r7, #0]
    e032:	b29b      	uxth	r3, r3
    e034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    e038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e03c:	79f9      	ldrb	r1, [r7, #7]
    e03e:	461a      	mov	r2, r3
    e040:	4818      	ldr	r0, [pc, #96]	; (e0a4 <_gpio_set_direction+0xd0>)
    e042:	4b1a      	ldr	r3, [pc, #104]	; (e0ac <_gpio_set_direction+0xd8>)
    e044:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    e046:	683b      	ldr	r3, [r7, #0]
    e048:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    e04a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    e04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    e052:	79f9      	ldrb	r1, [r7, #7]
    e054:	461a      	mov	r2, r3
    e056:	4813      	ldr	r0, [pc, #76]	; (e0a4 <_gpio_set_direction+0xd0>)
    e058:	4b14      	ldr	r3, [pc, #80]	; (e0ac <_gpio_set_direction+0xd8>)
    e05a:	4798      	blx	r3
		break;
    e05c:	e01d      	b.n	e09a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    e05e:	79fb      	ldrb	r3, [r7, #7]
    e060:	683a      	ldr	r2, [r7, #0]
    e062:	4619      	mov	r1, r3
    e064:	480f      	ldr	r0, [pc, #60]	; (e0a4 <_gpio_set_direction+0xd0>)
    e066:	4b12      	ldr	r3, [pc, #72]	; (e0b0 <_gpio_set_direction+0xdc>)
    e068:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    e06a:	683b      	ldr	r3, [r7, #0]
    e06c:	b29b      	uxth	r3, r3
    e06e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e072:	79fb      	ldrb	r3, [r7, #7]
    e074:	4619      	mov	r1, r3
    e076:	480b      	ldr	r0, [pc, #44]	; (e0a4 <_gpio_set_direction+0xd0>)
    e078:	4b0c      	ldr	r3, [pc, #48]	; (e0ac <_gpio_set_direction+0xd8>)
    e07a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    e07c:	683b      	ldr	r3, [r7, #0]
    e07e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    e080:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    e084:	79fb      	ldrb	r3, [r7, #7]
    e086:	4619      	mov	r1, r3
    e088:	4806      	ldr	r0, [pc, #24]	; (e0a4 <_gpio_set_direction+0xd0>)
    e08a:	4b08      	ldr	r3, [pc, #32]	; (e0ac <_gpio_set_direction+0xd8>)
    e08c:	4798      	blx	r3
		break;
    e08e:	e004      	b.n	e09a <_gpio_set_direction+0xc6>
		ASSERT(false);
    e090:	2246      	movs	r2, #70	; 0x46
    e092:	4908      	ldr	r1, [pc, #32]	; (e0b4 <_gpio_set_direction+0xe0>)
    e094:	2000      	movs	r0, #0
    e096:	4b08      	ldr	r3, [pc, #32]	; (e0b8 <_gpio_set_direction+0xe4>)
    e098:	4798      	blx	r3
}
    e09a:	bf00      	nop
    e09c:	3708      	adds	r7, #8
    e09e:	46bd      	mov	sp, r7
    e0a0:	bd80      	pop	{r7, pc}
    e0a2:	bf00      	nop
    e0a4:	41008000 	.word	0x41008000
    e0a8:	0000de1b 	.word	0x0000de1b
    e0ac:	0000dfab 	.word	0x0000dfab
    e0b0:	0000ddf3 	.word	0x0000ddf3
    e0b4:	00012980 	.word	0x00012980
    e0b8:	00005f89 	.word	0x00005f89

0000e0bc <_gpio_set_level>:
{
    e0bc:	b580      	push	{r7, lr}
    e0be:	b082      	sub	sp, #8
    e0c0:	af00      	add	r7, sp, #0
    e0c2:	4603      	mov	r3, r0
    e0c4:	6039      	str	r1, [r7, #0]
    e0c6:	71fb      	strb	r3, [r7, #7]
    e0c8:	4613      	mov	r3, r2
    e0ca:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e0cc:	79bb      	ldrb	r3, [r7, #6]
    e0ce:	2b00      	cmp	r3, #0
    e0d0:	d006      	beq.n	e0e0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e0d2:	79fb      	ldrb	r3, [r7, #7]
    e0d4:	683a      	ldr	r2, [r7, #0]
    e0d6:	4619      	mov	r1, r3
    e0d8:	4806      	ldr	r0, [pc, #24]	; (e0f4 <_gpio_set_level+0x38>)
    e0da:	4b07      	ldr	r3, [pc, #28]	; (e0f8 <_gpio_set_level+0x3c>)
    e0dc:	4798      	blx	r3
}
    e0de:	e005      	b.n	e0ec <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e0e0:	79fb      	ldrb	r3, [r7, #7]
    e0e2:	683a      	ldr	r2, [r7, #0]
    e0e4:	4619      	mov	r1, r3
    e0e6:	4803      	ldr	r0, [pc, #12]	; (e0f4 <_gpio_set_level+0x38>)
    e0e8:	4b04      	ldr	r3, [pc, #16]	; (e0fc <_gpio_set_level+0x40>)
    e0ea:	4798      	blx	r3
}
    e0ec:	bf00      	nop
    e0ee:	3708      	adds	r7, #8
    e0f0:	46bd      	mov	sp, r7
    e0f2:	bd80      	pop	{r7, pc}
    e0f4:	41008000 	.word	0x41008000
    e0f8:	0000de43 	.word	0x0000de43
    e0fc:	0000de6b 	.word	0x0000de6b

0000e100 <_gpio_set_pin_function>:
{
    e100:	b590      	push	{r4, r7, lr}
    e102:	b085      	sub	sp, #20
    e104:	af00      	add	r7, sp, #0
    e106:	6078      	str	r0, [r7, #4]
    e108:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	095b      	lsrs	r3, r3, #5
    e10e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    e110:	687b      	ldr	r3, [r7, #4]
    e112:	b2db      	uxtb	r3, r3
    e114:	f003 031f 	and.w	r3, r3, #31
    e118:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    e11a:	683b      	ldr	r3, [r7, #0]
    e11c:	f1b3 3fff 	cmp.w	r3, #4294967295
    e120:	d106      	bne.n	e130 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    e122:	7bba      	ldrb	r2, [r7, #14]
    e124:	7bf9      	ldrb	r1, [r7, #15]
    e126:	2300      	movs	r3, #0
    e128:	4812      	ldr	r0, [pc, #72]	; (e174 <_gpio_set_pin_function+0x74>)
    e12a:	4c13      	ldr	r4, [pc, #76]	; (e178 <_gpio_set_pin_function+0x78>)
    e12c:	47a0      	blx	r4
}
    e12e:	e01d      	b.n	e16c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    e130:	7bba      	ldrb	r2, [r7, #14]
    e132:	7bf9      	ldrb	r1, [r7, #15]
    e134:	2301      	movs	r3, #1
    e136:	480f      	ldr	r0, [pc, #60]	; (e174 <_gpio_set_pin_function+0x74>)
    e138:	4c0f      	ldr	r4, [pc, #60]	; (e178 <_gpio_set_pin_function+0x78>)
    e13a:	47a0      	blx	r4
		if (pin & 1) {
    e13c:	7bbb      	ldrb	r3, [r7, #14]
    e13e:	f003 0301 	and.w	r3, r3, #1
    e142:	2b00      	cmp	r3, #0
    e144:	d009      	beq.n	e15a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    e146:	7bbb      	ldrb	r3, [r7, #14]
    e148:	085b      	lsrs	r3, r3, #1
    e14a:	b2da      	uxtb	r2, r3
    e14c:	683b      	ldr	r3, [r7, #0]
    e14e:	b2db      	uxtb	r3, r3
    e150:	7bf9      	ldrb	r1, [r7, #15]
    e152:	4808      	ldr	r0, [pc, #32]	; (e174 <_gpio_set_pin_function+0x74>)
    e154:	4c09      	ldr	r4, [pc, #36]	; (e17c <_gpio_set_pin_function+0x7c>)
    e156:	47a0      	blx	r4
}
    e158:	e008      	b.n	e16c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    e15a:	7bbb      	ldrb	r3, [r7, #14]
    e15c:	085b      	lsrs	r3, r3, #1
    e15e:	b2da      	uxtb	r2, r3
    e160:	683b      	ldr	r3, [r7, #0]
    e162:	b2db      	uxtb	r3, r3
    e164:	7bf9      	ldrb	r1, [r7, #15]
    e166:	4803      	ldr	r0, [pc, #12]	; (e174 <_gpio_set_pin_function+0x74>)
    e168:	4c05      	ldr	r4, [pc, #20]	; (e180 <_gpio_set_pin_function+0x80>)
    e16a:	47a0      	blx	r4
}
    e16c:	bf00      	nop
    e16e:	3714      	adds	r7, #20
    e170:	46bd      	mov	sp, r7
    e172:	bd90      	pop	{r4, r7, pc}
    e174:	41008000 	.word	0x41008000
    e178:	0000df51 	.word	0x0000df51
    e17c:	0000def3 	.word	0x0000def3
    e180:	0000de93 	.word	0x0000de93

0000e184 <gpio_set_pin_function>:
{
    e184:	b580      	push	{r7, lr}
    e186:	b082      	sub	sp, #8
    e188:	af00      	add	r7, sp, #0
    e18a:	6078      	str	r0, [r7, #4]
    e18c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    e18e:	6839      	ldr	r1, [r7, #0]
    e190:	6878      	ldr	r0, [r7, #4]
    e192:	4b03      	ldr	r3, [pc, #12]	; (e1a0 <gpio_set_pin_function+0x1c>)
    e194:	4798      	blx	r3
}
    e196:	bf00      	nop
    e198:	3708      	adds	r7, #8
    e19a:	46bd      	mov	sp, r7
    e19c:	bd80      	pop	{r7, pc}
    e19e:	bf00      	nop
    e1a0:	0000e101 	.word	0x0000e101

0000e1a4 <gpio_set_pin_direction>:
{
    e1a4:	b580      	push	{r7, lr}
    e1a6:	b082      	sub	sp, #8
    e1a8:	af00      	add	r7, sp, #0
    e1aa:	4603      	mov	r3, r0
    e1ac:	460a      	mov	r2, r1
    e1ae:	71fb      	strb	r3, [r7, #7]
    e1b0:	4613      	mov	r3, r2
    e1b2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    e1b4:	79fb      	ldrb	r3, [r7, #7]
    e1b6:	095b      	lsrs	r3, r3, #5
    e1b8:	b2d8      	uxtb	r0, r3
    e1ba:	79fb      	ldrb	r3, [r7, #7]
    e1bc:	f003 031f 	and.w	r3, r3, #31
    e1c0:	2201      	movs	r2, #1
    e1c2:	fa02 f303 	lsl.w	r3, r2, r3
    e1c6:	79ba      	ldrb	r2, [r7, #6]
    e1c8:	4619      	mov	r1, r3
    e1ca:	4b03      	ldr	r3, [pc, #12]	; (e1d8 <gpio_set_pin_direction+0x34>)
    e1cc:	4798      	blx	r3
}
    e1ce:	bf00      	nop
    e1d0:	3708      	adds	r7, #8
    e1d2:	46bd      	mov	sp, r7
    e1d4:	bd80      	pop	{r7, pc}
    e1d6:	bf00      	nop
    e1d8:	0000dfd5 	.word	0x0000dfd5

0000e1dc <gpio_set_pin_level>:
{
    e1dc:	b580      	push	{r7, lr}
    e1de:	b082      	sub	sp, #8
    e1e0:	af00      	add	r7, sp, #0
    e1e2:	4603      	mov	r3, r0
    e1e4:	460a      	mov	r2, r1
    e1e6:	71fb      	strb	r3, [r7, #7]
    e1e8:	4613      	mov	r3, r2
    e1ea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e1ec:	79fb      	ldrb	r3, [r7, #7]
    e1ee:	095b      	lsrs	r3, r3, #5
    e1f0:	b2d8      	uxtb	r0, r3
    e1f2:	79fb      	ldrb	r3, [r7, #7]
    e1f4:	f003 031f 	and.w	r3, r3, #31
    e1f8:	2201      	movs	r2, #1
    e1fa:	fa02 f303 	lsl.w	r3, r2, r3
    e1fe:	79ba      	ldrb	r2, [r7, #6]
    e200:	4619      	mov	r1, r3
    e202:	4b03      	ldr	r3, [pc, #12]	; (e210 <gpio_set_pin_level+0x34>)
    e204:	4798      	blx	r3
}
    e206:	bf00      	nop
    e208:	3708      	adds	r7, #8
    e20a:	46bd      	mov	sp, r7
    e20c:	bd80      	pop	{r7, pc}
    e20e:	bf00      	nop
    e210:	0000e0bd 	.word	0x0000e0bd

0000e214 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    e214:	b580      	push	{r7, lr}
    e216:	b082      	sub	sp, #8
    e218:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    e21a:	2100      	movs	r1, #0
    e21c:	2008      	movs	r0, #8
    e21e:	4b24      	ldr	r3, [pc, #144]	; (e2b0 <QSPI_N25Q256_exit_xip+0x9c>)
    e220:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    e222:	2100      	movs	r1, #0
    e224:	202b      	movs	r0, #43	; 0x2b
    e226:	4b22      	ldr	r3, [pc, #136]	; (e2b0 <QSPI_N25Q256_exit_xip+0x9c>)
    e228:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    e22a:	2100      	movs	r1, #0
    e22c:	202a      	movs	r0, #42	; 0x2a
    e22e:	4b20      	ldr	r3, [pc, #128]	; (e2b0 <QSPI_N25Q256_exit_xip+0x9c>)
    e230:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    e232:	2102      	movs	r1, #2
    e234:	2008      	movs	r0, #8
    e236:	4b1f      	ldr	r3, [pc, #124]	; (e2b4 <QSPI_N25Q256_exit_xip+0xa0>)
    e238:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    e23a:	2102      	movs	r1, #2
    e23c:	202b      	movs	r0, #43	; 0x2b
    e23e:	4b1d      	ldr	r3, [pc, #116]	; (e2b4 <QSPI_N25Q256_exit_xip+0xa0>)
    e240:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    e242:	2102      	movs	r1, #2
    e244:	202a      	movs	r0, #42	; 0x2a
    e246:	4b1b      	ldr	r3, [pc, #108]	; (e2b4 <QSPI_N25Q256_exit_xip+0xa0>)
    e248:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    e24a:	2101      	movs	r1, #1
    e24c:	2008      	movs	r0, #8
    e24e:	4b1a      	ldr	r3, [pc, #104]	; (e2b8 <QSPI_N25Q256_exit_xip+0xa4>)
    e250:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    e252:	2100      	movs	r1, #0
    e254:	202b      	movs	r0, #43	; 0x2b
    e256:	4b18      	ldr	r3, [pc, #96]	; (e2b8 <QSPI_N25Q256_exit_xip+0xa4>)
    e258:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    e25a:	2100      	movs	r1, #0
    e25c:	202a      	movs	r0, #42	; 0x2a
    e25e:	4b16      	ldr	r3, [pc, #88]	; (e2b8 <QSPI_N25Q256_exit_xip+0xa4>)
    e260:	4798      	blx	r3

	delay_us(1);
    e262:	2001      	movs	r0, #1
    e264:	4b15      	ldr	r3, [pc, #84]	; (e2bc <QSPI_N25Q256_exit_xip+0xa8>)
    e266:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    e268:	2300      	movs	r3, #0
    e26a:	607b      	str	r3, [r7, #4]
    e26c:	e010      	b.n	e290 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    e26e:	2101      	movs	r1, #1
    e270:	202a      	movs	r0, #42	; 0x2a
    e272:	4b11      	ldr	r3, [pc, #68]	; (e2b8 <QSPI_N25Q256_exit_xip+0xa4>)
    e274:	4798      	blx	r3
		delay_us(1);
    e276:	2001      	movs	r0, #1
    e278:	4b10      	ldr	r3, [pc, #64]	; (e2bc <QSPI_N25Q256_exit_xip+0xa8>)
    e27a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    e27c:	2100      	movs	r1, #0
    e27e:	202a      	movs	r0, #42	; 0x2a
    e280:	4b0d      	ldr	r3, [pc, #52]	; (e2b8 <QSPI_N25Q256_exit_xip+0xa4>)
    e282:	4798      	blx	r3
		delay_us(1);
    e284:	2001      	movs	r0, #1
    e286:	4b0d      	ldr	r3, [pc, #52]	; (e2bc <QSPI_N25Q256_exit_xip+0xa8>)
    e288:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    e28a:	687b      	ldr	r3, [r7, #4]
    e28c:	3301      	adds	r3, #1
    e28e:	607b      	str	r3, [r7, #4]
    e290:	687b      	ldr	r3, [r7, #4]
    e292:	2b06      	cmp	r3, #6
    e294:	ddeb      	ble.n	e26e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    e296:	2101      	movs	r1, #1
    e298:	202b      	movs	r0, #43	; 0x2b
    e29a:	4b07      	ldr	r3, [pc, #28]	; (e2b8 <QSPI_N25Q256_exit_xip+0xa4>)
    e29c:	4798      	blx	r3
	delay_us(1);
    e29e:	2001      	movs	r0, #1
    e2a0:	4b06      	ldr	r3, [pc, #24]	; (e2bc <QSPI_N25Q256_exit_xip+0xa8>)
    e2a2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    e2a4:	4b06      	ldr	r3, [pc, #24]	; (e2c0 <QSPI_N25Q256_exit_xip+0xac>)
    e2a6:	4798      	blx	r3
}
    e2a8:	bf00      	nop
    e2aa:	3708      	adds	r7, #8
    e2ac:	46bd      	mov	sp, r7
    e2ae:	bd80      	pop	{r7, pc}
    e2b0:	0000e185 	.word	0x0000e185
    e2b4:	0000e1a5 	.word	0x0000e1a5
    e2b8:	0000e1dd 	.word	0x0000e1dd
    e2bc:	00004401 	.word	0x00004401
    e2c0:	00003579 	.word	0x00003579

0000e2c4 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    e2c4:	b598      	push	{r3, r4, r7, lr}
    e2c6:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    e2c8:	4806      	ldr	r0, [pc, #24]	; (e2e4 <spi_nor_flash_init+0x20>)
    e2ca:	4b07      	ldr	r3, [pc, #28]	; (e2e8 <spi_nor_flash_init+0x24>)
    e2cc:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    e2ce:	2300      	movs	r3, #0
    e2d0:	4a06      	ldr	r2, [pc, #24]	; (e2ec <spi_nor_flash_init+0x28>)
    e2d2:	4904      	ldr	r1, [pc, #16]	; (e2e4 <spi_nor_flash_init+0x20>)
    e2d4:	4806      	ldr	r0, [pc, #24]	; (e2f0 <spi_nor_flash_init+0x2c>)
    e2d6:	4c07      	ldr	r4, [pc, #28]	; (e2f4 <spi_nor_flash_init+0x30>)
    e2d8:	47a0      	blx	r4
    e2da:	4602      	mov	r2, r0
    e2dc:	4b06      	ldr	r3, [pc, #24]	; (e2f8 <spi_nor_flash_init+0x34>)
    e2de:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    e2e0:	bf00      	nop
    e2e2:	bd98      	pop	{r3, r4, r7, pc}
    e2e4:	20002694 	.word	0x20002694
    e2e8:	00004b71 	.word	0x00004b71
    e2ec:	0000e215 	.word	0x0000e215
    e2f0:	2000252c 	.word	0x2000252c
    e2f4:	0000d8f1 	.word	0x0000d8f1
    e2f8:	200028a0 	.word	0x200028a0

0000e2fc <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    e2fc:	b480      	push	{r7}
    e2fe:	b083      	sub	sp, #12
    e300:	af00      	add	r7, sp, #0
    e302:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e304:	687b      	ldr	r3, [r7, #4]
    e306:	781b      	ldrb	r3, [r3, #0]
    e308:	b29a      	uxth	r2, r3
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	3301      	adds	r3, #1
    e30e:	781b      	ldrb	r3, [r3, #0]
    e310:	b29b      	uxth	r3, r3
    e312:	021b      	lsls	r3, r3, #8
    e314:	b29b      	uxth	r3, r3
    e316:	4413      	add	r3, r2
    e318:	b29b      	uxth	r3, r3
}
    e31a:	4618      	mov	r0, r3
    e31c:	370c      	adds	r7, #12
    e31e:	46bd      	mov	sp, r7
    e320:	f85d 7b04 	ldr.w	r7, [sp], #4
    e324:	4770      	bx	lr

0000e326 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    e326:	b480      	push	{r7}
    e328:	b083      	sub	sp, #12
    e32a:	af00      	add	r7, sp, #0
    e32c:	6078      	str	r0, [r7, #4]
	return desc[0];
    e32e:	687b      	ldr	r3, [r7, #4]
    e330:	781b      	ldrb	r3, [r3, #0]
}
    e332:	4618      	mov	r0, r3
    e334:	370c      	adds	r7, #12
    e336:	46bd      	mov	sp, r7
    e338:	f85d 7b04 	ldr.w	r7, [sp], #4
    e33c:	4770      	bx	lr
	...

0000e340 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    e340:	b580      	push	{r7, lr}
    e342:	b082      	sub	sp, #8
    e344:	af00      	add	r7, sp, #0
    e346:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e348:	6878      	ldr	r0, [r7, #4]
    e34a:	4b05      	ldr	r3, [pc, #20]	; (e360 <usb_desc_next+0x20>)
    e34c:	4798      	blx	r3
    e34e:	4603      	mov	r3, r0
    e350:	461a      	mov	r2, r3
    e352:	687b      	ldr	r3, [r7, #4]
    e354:	4413      	add	r3, r2
}
    e356:	4618      	mov	r0, r3
    e358:	3708      	adds	r7, #8
    e35a:	46bd      	mov	sp, r7
    e35c:	bd80      	pop	{r7, pc}
    e35e:	bf00      	nop
    e360:	0000e327 	.word	0x0000e327

0000e364 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    e364:	b580      	push	{r7, lr}
    e366:	b08c      	sub	sp, #48	; 0x30
    e368:	af00      	add	r7, sp, #0
    e36a:	6078      	str	r0, [r7, #4]
    e36c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e36e:	687b      	ldr	r3, [r7, #4]
    e370:	689b      	ldr	r3, [r3, #8]
    e372:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    e374:	683b      	ldr	r3, [r7, #0]
    e376:	681b      	ldr	r3, [r3, #0]
    e378:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    e37a:	2300      	movs	r3, #0
    e37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    e380:	e08f      	b.n	e4a2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e384:	2b00      	cmp	r3, #0
    e386:	d102      	bne.n	e38e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    e388:	f06f 0309 	mvn.w	r3, #9
    e38c:	e092      	b.n	e4b4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    e38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e390:	789b      	ldrb	r3, [r3, #2]
    e392:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e396:	795b      	ldrb	r3, [r3, #5]
    e398:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    e39a:	7c7b      	ldrb	r3, [r7, #17]
    e39c:	2b02      	cmp	r3, #2
    e39e:	d002      	beq.n	e3a6 <cdcdf_acm_enable+0x42>
    e3a0:	7c7b      	ldrb	r3, [r7, #17]
    e3a2:	2b0a      	cmp	r3, #10
    e3a4:	d121      	bne.n	e3ea <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    e3a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e3aa:	6a3a      	ldr	r2, [r7, #32]
    e3ac:	5cd2      	ldrb	r2, [r2, r3]
    e3ae:	7bbb      	ldrb	r3, [r7, #14]
    e3b0:	429a      	cmp	r2, r3
    e3b2:	d102      	bne.n	e3ba <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    e3b4:	f06f 0311 	mvn.w	r3, #17
    e3b8:	e07c      	b.n	e4b4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    e3ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e3be:	6a3a      	ldr	r2, [r7, #32]
    e3c0:	5cd3      	ldrb	r3, [r2, r3]
    e3c2:	2bff      	cmp	r3, #255	; 0xff
    e3c4:	d002      	beq.n	e3cc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    e3c6:	f06f 031b 	mvn.w	r3, #27
    e3ca:	e073      	b.n	e4b4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    e3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e3d0:	7bb9      	ldrb	r1, [r7, #14]
    e3d2:	6a3a      	ldr	r2, [r7, #32]
    e3d4:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    e3d6:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    e3d8:	683b      	ldr	r3, [r7, #0]
    e3da:	685b      	ldr	r3, [r3, #4]
    e3dc:	2205      	movs	r2, #5
    e3de:	4619      	mov	r1, r3
    e3e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e3e2:	4b36      	ldr	r3, [pc, #216]	; (e4bc <cdcdf_acm_enable+0x158>)
    e3e4:	4798      	blx	r3
    e3e6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    e3e8:	e047      	b.n	e47a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    e3ea:	f06f 0309 	mvn.w	r3, #9
    e3ee:	e061      	b.n	e4b4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3f2:	789b      	ldrb	r3, [r3, #2]
    e3f4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3f8:	78db      	ldrb	r3, [r3, #3]
    e3fa:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3fe:	3304      	adds	r3, #4
    e400:	4618      	mov	r0, r3
    e402:	4b2f      	ldr	r3, [pc, #188]	; (e4c0 <cdcdf_acm_enable+0x15c>)
    e404:	4798      	blx	r3
    e406:	4603      	mov	r3, r0
    e408:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e40a:	7ebb      	ldrb	r3, [r7, #26]
    e40c:	7ef9      	ldrb	r1, [r7, #27]
    e40e:	8bba      	ldrh	r2, [r7, #28]
    e410:	4618      	mov	r0, r3
    e412:	4b2c      	ldr	r3, [pc, #176]	; (e4c4 <cdcdf_acm_enable+0x160>)
    e414:	4798      	blx	r3
    e416:	4603      	mov	r3, r0
    e418:	2b00      	cmp	r3, #0
    e41a:	d002      	beq.n	e422 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    e41c:	f06f 0313 	mvn.w	r3, #19
    e420:	e048      	b.n	e4b4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    e422:	7ebb      	ldrb	r3, [r7, #26]
    e424:	b25b      	sxtb	r3, r3
    e426:	2b00      	cmp	r3, #0
    e428:	da0f      	bge.n	e44a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    e42a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e42e:	7eb9      	ldrb	r1, [r7, #26]
    e430:	6a3a      	ldr	r2, [r7, #32]
    e432:	4413      	add	r3, r2
    e434:	460a      	mov	r2, r1
    e436:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    e438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e43c:	6a3a      	ldr	r2, [r7, #32]
    e43e:	4413      	add	r3, r2
    e440:	789b      	ldrb	r3, [r3, #2]
    e442:	4618      	mov	r0, r3
    e444:	4b20      	ldr	r3, [pc, #128]	; (e4c8 <cdcdf_acm_enable+0x164>)
    e446:	4798      	blx	r3
    e448:	e007      	b.n	e45a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    e44a:	7eba      	ldrb	r2, [r7, #26]
    e44c:	6a3b      	ldr	r3, [r7, #32]
    e44e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    e450:	6a3b      	ldr	r3, [r7, #32]
    e452:	791b      	ldrb	r3, [r3, #4]
    e454:	4618      	mov	r0, r3
    e456:	4b1c      	ldr	r3, [pc, #112]	; (e4c8 <cdcdf_acm_enable+0x164>)
    e458:	4798      	blx	r3
			}
			desc->sod = ep;
    e45a:	683b      	ldr	r3, [r7, #0]
    e45c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e45e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e460:	683b      	ldr	r3, [r7, #0]
    e462:	681b      	ldr	r3, [r3, #0]
    e464:	4618      	mov	r0, r3
    e466:	4b19      	ldr	r3, [pc, #100]	; (e4cc <cdcdf_acm_enable+0x168>)
    e468:	4798      	blx	r3
    e46a:	4602      	mov	r2, r0
    e46c:	683b      	ldr	r3, [r7, #0]
    e46e:	685b      	ldr	r3, [r3, #4]
    e470:	4619      	mov	r1, r3
    e472:	4610      	mov	r0, r2
    e474:	4b16      	ldr	r3, [pc, #88]	; (e4d0 <cdcdf_acm_enable+0x16c>)
    e476:	4798      	blx	r3
    e478:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    e47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e47c:	2b00      	cmp	r3, #0
    e47e:	d1b7      	bne.n	e3f0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    e480:	683b      	ldr	r3, [r7, #0]
    e482:	681b      	ldr	r3, [r3, #0]
    e484:	4618      	mov	r0, r3
    e486:	4b11      	ldr	r3, [pc, #68]	; (e4cc <cdcdf_acm_enable+0x168>)
    e488:	4798      	blx	r3
    e48a:	683b      	ldr	r3, [r7, #0]
    e48c:	685b      	ldr	r3, [r3, #4]
    e48e:	2204      	movs	r2, #4
    e490:	4619      	mov	r1, r3
    e492:	4b0a      	ldr	r3, [pc, #40]	; (e4bc <cdcdf_acm_enable+0x158>)
    e494:	4798      	blx	r3
    e496:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    e498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e49c:	3301      	adds	r3, #1
    e49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    e4a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    e4a6:	2b01      	cmp	r3, #1
    e4a8:	f67f af6b 	bls.w	e382 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    e4ac:	4b09      	ldr	r3, [pc, #36]	; (e4d4 <cdcdf_acm_enable+0x170>)
    e4ae:	2201      	movs	r2, #1
    e4b0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e4b2:	2300      	movs	r3, #0
}
    e4b4:	4618      	mov	r0, r3
    e4b6:	3730      	adds	r7, #48	; 0x30
    e4b8:	46bd      	mov	sp, r7
    e4ba:	bd80      	pop	{r7, pc}
    e4bc:	0000f725 	.word	0x0000f725
    e4c0:	0000e2fd 	.word	0x0000e2fd
    e4c4:	00005b1d 	.word	0x00005b1d
    e4c8:	00005c09 	.word	0x00005c09
    e4cc:	0000e341 	.word	0x0000e341
    e4d0:	0000f781 	.word	0x0000f781
    e4d4:	20002548 	.word	0x20002548

0000e4d8 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    e4d8:	b580      	push	{r7, lr}
    e4da:	b088      	sub	sp, #32
    e4dc:	af00      	add	r7, sp, #0
    e4de:	6078      	str	r0, [r7, #4]
    e4e0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e4e2:	687b      	ldr	r3, [r7, #4]
    e4e4:	689b      	ldr	r3, [r3, #8]
    e4e6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    e4e8:	683b      	ldr	r3, [r7, #0]
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	d00c      	beq.n	e508 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    e4ee:	683b      	ldr	r3, [r7, #0]
    e4f0:	681b      	ldr	r3, [r3, #0]
    e4f2:	795b      	ldrb	r3, [r3, #5]
    e4f4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    e4f6:	7c7b      	ldrb	r3, [r7, #17]
    e4f8:	2b02      	cmp	r3, #2
    e4fa:	d005      	beq.n	e508 <cdcdf_acm_disable+0x30>
    e4fc:	7c7b      	ldrb	r3, [r7, #17]
    e4fe:	2b0a      	cmp	r3, #10
    e500:	d002      	beq.n	e508 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    e502:	f06f 0309 	mvn.w	r3, #9
    e506:	e035      	b.n	e574 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    e508:	2300      	movs	r3, #0
    e50a:	77fb      	strb	r3, [r7, #31]
    e50c:	e01f      	b.n	e54e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    e50e:	7ffb      	ldrb	r3, [r7, #31]
    e510:	69ba      	ldr	r2, [r7, #24]
    e512:	5cd3      	ldrb	r3, [r2, r3]
    e514:	2bff      	cmp	r3, #255	; 0xff
    e516:	d016      	beq.n	e546 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    e518:	7ffb      	ldrb	r3, [r7, #31]
    e51a:	69ba      	ldr	r2, [r7, #24]
    e51c:	21ff      	movs	r1, #255	; 0xff
    e51e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    e520:	7ffb      	ldrb	r3, [r7, #31]
    e522:	69ba      	ldr	r2, [r7, #24]
    e524:	4413      	add	r3, r2
    e526:	789b      	ldrb	r3, [r3, #2]
    e528:	2bff      	cmp	r3, #255	; 0xff
    e52a:	d00d      	beq.n	e548 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    e52c:	7ffb      	ldrb	r3, [r7, #31]
    e52e:	69ba      	ldr	r2, [r7, #24]
    e530:	4413      	add	r3, r2
    e532:	789b      	ldrb	r3, [r3, #2]
    e534:	4618      	mov	r0, r3
    e536:	4b11      	ldr	r3, [pc, #68]	; (e57c <cdcdf_acm_disable+0xa4>)
    e538:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    e53a:	7ffb      	ldrb	r3, [r7, #31]
    e53c:	69ba      	ldr	r2, [r7, #24]
    e53e:	4413      	add	r3, r2
    e540:	22ff      	movs	r2, #255	; 0xff
    e542:	709a      	strb	r2, [r3, #2]
    e544:	e000      	b.n	e548 <cdcdf_acm_disable+0x70>
			continue;
    e546:	bf00      	nop
	for (i = 0; i < 2; i++) {
    e548:	7ffb      	ldrb	r3, [r7, #31]
    e54a:	3301      	adds	r3, #1
    e54c:	77fb      	strb	r3, [r7, #31]
    e54e:	7ffb      	ldrb	r3, [r7, #31]
    e550:	2b01      	cmp	r3, #1
    e552:	d9dc      	bls.n	e50e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    e554:	69bb      	ldr	r3, [r7, #24]
    e556:	791b      	ldrb	r3, [r3, #4]
    e558:	2bff      	cmp	r3, #255	; 0xff
    e55a:	d007      	beq.n	e56c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    e55c:	69bb      	ldr	r3, [r7, #24]
    e55e:	791b      	ldrb	r3, [r3, #4]
    e560:	4618      	mov	r0, r3
    e562:	4b06      	ldr	r3, [pc, #24]	; (e57c <cdcdf_acm_disable+0xa4>)
    e564:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    e566:	69bb      	ldr	r3, [r7, #24]
    e568:	22ff      	movs	r2, #255	; 0xff
    e56a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    e56c:	4b04      	ldr	r3, [pc, #16]	; (e580 <cdcdf_acm_disable+0xa8>)
    e56e:	2200      	movs	r2, #0
    e570:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e572:	2300      	movs	r3, #0
}
    e574:	4618      	mov	r0, r3
    e576:	3720      	adds	r7, #32
    e578:	46bd      	mov	sp, r7
    e57a:	bd80      	pop	{r7, pc}
    e57c:	00005bb9 	.word	0x00005bb9
    e580:	20002548 	.word	0x20002548

0000e584 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    e584:	b580      	push	{r7, lr}
    e586:	b084      	sub	sp, #16
    e588:	af00      	add	r7, sp, #0
    e58a:	60f8      	str	r0, [r7, #12]
    e58c:	460b      	mov	r3, r1
    e58e:	607a      	str	r2, [r7, #4]
    e590:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    e592:	7afb      	ldrb	r3, [r7, #11]
    e594:	2b01      	cmp	r3, #1
    e596:	d009      	beq.n	e5ac <cdcdf_acm_ctrl+0x28>
    e598:	2b02      	cmp	r3, #2
    e59a:	d00d      	beq.n	e5b8 <cdcdf_acm_ctrl+0x34>
    e59c:	2b00      	cmp	r3, #0
    e59e:	d10e      	bne.n	e5be <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    e5a0:	6879      	ldr	r1, [r7, #4]
    e5a2:	68f8      	ldr	r0, [r7, #12]
    e5a4:	4b09      	ldr	r3, [pc, #36]	; (e5cc <cdcdf_acm_ctrl+0x48>)
    e5a6:	4798      	blx	r3
    e5a8:	4603      	mov	r3, r0
    e5aa:	e00a      	b.n	e5c2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    e5ac:	6879      	ldr	r1, [r7, #4]
    e5ae:	68f8      	ldr	r0, [r7, #12]
    e5b0:	4b07      	ldr	r3, [pc, #28]	; (e5d0 <cdcdf_acm_ctrl+0x4c>)
    e5b2:	4798      	blx	r3
    e5b4:	4603      	mov	r3, r0
    e5b6:	e004      	b.n	e5c2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    e5b8:	f06f 031a 	mvn.w	r3, #26
    e5bc:	e001      	b.n	e5c2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    e5be:	f06f 030c 	mvn.w	r3, #12
	}
}
    e5c2:	4618      	mov	r0, r3
    e5c4:	3710      	adds	r7, #16
    e5c6:	46bd      	mov	sp, r7
    e5c8:	bd80      	pop	{r7, pc}
    e5ca:	bf00      	nop
    e5cc:	0000e365 	.word	0x0000e365
    e5d0:	0000e4d9 	.word	0x0000e4d9

0000e5d4 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e5d4:	b590      	push	{r4, r7, lr}
    e5d6:	b087      	sub	sp, #28
    e5d8:	af00      	add	r7, sp, #0
    e5da:	4603      	mov	r3, r0
    e5dc:	6039      	str	r1, [r7, #0]
    e5de:	71fb      	strb	r3, [r7, #7]
    e5e0:	4613      	mov	r3, r2
    e5e2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    e5e4:	683b      	ldr	r3, [r7, #0]
    e5e6:	799a      	ldrb	r2, [r3, #6]
    e5e8:	79db      	ldrb	r3, [r3, #7]
    e5ea:	021b      	lsls	r3, r3, #8
    e5ec:	4313      	orrs	r3, r2
    e5ee:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    e5f0:	4b2b      	ldr	r3, [pc, #172]	; (e6a0 <cdcdf_acm_set_req+0xcc>)
    e5f2:	4798      	blx	r3
    e5f4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    e5f6:	683b      	ldr	r3, [r7, #0]
    e5f8:	785b      	ldrb	r3, [r3, #1]
    e5fa:	2b20      	cmp	r3, #32
    e5fc:	d002      	beq.n	e604 <cdcdf_acm_set_req+0x30>
    e5fe:	2b22      	cmp	r3, #34	; 0x22
    e600:	d034      	beq.n	e66c <cdcdf_acm_set_req+0x98>
    e602:	e046      	b.n	e692 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e604:	8afb      	ldrh	r3, [r7, #22]
    e606:	2b07      	cmp	r3, #7
    e608:	d002      	beq.n	e610 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    e60a:	f04f 33ff 	mov.w	r3, #4294967295
    e60e:	e042      	b.n	e696 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    e610:	79bb      	ldrb	r3, [r7, #6]
    e612:	2b00      	cmp	r3, #0
    e614:	d107      	bne.n	e626 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    e616:	8afa      	ldrh	r2, [r7, #22]
    e618:	79f8      	ldrb	r0, [r7, #7]
    e61a:	2300      	movs	r3, #0
    e61c:	6939      	ldr	r1, [r7, #16]
    e61e:	4c21      	ldr	r4, [pc, #132]	; (e6a4 <cdcdf_acm_set_req+0xd0>)
    e620:	47a0      	blx	r4
    e622:	4603      	mov	r3, r0
    e624:	e037      	b.n	e696 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    e626:	693a      	ldr	r2, [r7, #16]
    e628:	f107 0308 	add.w	r3, r7, #8
    e62c:	6810      	ldr	r0, [r2, #0]
    e62e:	6018      	str	r0, [r3, #0]
    e630:	8891      	ldrh	r1, [r2, #4]
    e632:	7992      	ldrb	r2, [r2, #6]
    e634:	8099      	strh	r1, [r3, #4]
    e636:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    e638:	4b1b      	ldr	r3, [pc, #108]	; (e6a8 <cdcdf_acm_set_req+0xd4>)
    e63a:	681b      	ldr	r3, [r3, #0]
    e63c:	2b00      	cmp	r3, #0
    e63e:	d008      	beq.n	e652 <cdcdf_acm_set_req+0x7e>
    e640:	4b19      	ldr	r3, [pc, #100]	; (e6a8 <cdcdf_acm_set_req+0xd4>)
    e642:	681b      	ldr	r3, [r3, #0]
    e644:	f107 0208 	add.w	r2, r7, #8
    e648:	4610      	mov	r0, r2
    e64a:	4798      	blx	r3
    e64c:	4603      	mov	r3, r0
    e64e:	2b00      	cmp	r3, #0
    e650:	d00a      	beq.n	e668 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    e652:	4b16      	ldr	r3, [pc, #88]	; (e6ac <cdcdf_acm_set_req+0xd8>)
    e654:	f107 0208 	add.w	r2, r7, #8
    e658:	e892 0003 	ldmia.w	r2, {r0, r1}
    e65c:	6018      	str	r0, [r3, #0]
    e65e:	3304      	adds	r3, #4
    e660:	8019      	strh	r1, [r3, #0]
    e662:	3302      	adds	r3, #2
    e664:	0c0a      	lsrs	r2, r1, #16
    e666:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    e668:	2300      	movs	r3, #0
    e66a:	e014      	b.n	e696 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    e66c:	2300      	movs	r3, #0
    e66e:	2200      	movs	r2, #0
    e670:	2100      	movs	r1, #0
    e672:	2000      	movs	r0, #0
    e674:	4c0b      	ldr	r4, [pc, #44]	; (e6a4 <cdcdf_acm_set_req+0xd0>)
    e676:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    e678:	4b0d      	ldr	r3, [pc, #52]	; (e6b0 <cdcdf_acm_set_req+0xdc>)
    e67a:	681b      	ldr	r3, [r3, #0]
    e67c:	2b00      	cmp	r3, #0
    e67e:	d006      	beq.n	e68e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    e680:	4b0b      	ldr	r3, [pc, #44]	; (e6b0 <cdcdf_acm_set_req+0xdc>)
    e682:	681b      	ldr	r3, [r3, #0]
    e684:	683a      	ldr	r2, [r7, #0]
    e686:	8852      	ldrh	r2, [r2, #2]
    e688:	b292      	uxth	r2, r2
    e68a:	4610      	mov	r0, r2
    e68c:	4798      	blx	r3
		}
		return ERR_NONE;
    e68e:	2300      	movs	r3, #0
    e690:	e001      	b.n	e696 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    e692:	f06f 030c 	mvn.w	r3, #12
	}
}
    e696:	4618      	mov	r0, r3
    e698:	371c      	adds	r7, #28
    e69a:	46bd      	mov	sp, r7
    e69c:	bd90      	pop	{r4, r7, pc}
    e69e:	bf00      	nop
    e6a0:	0000f621 	.word	0x0000f621
    e6a4:	0000f495 	.word	0x0000f495
    e6a8:	2000255c 	.word	0x2000255c
    e6ac:	20002550 	.word	0x20002550
    e6b0:	20002558 	.word	0x20002558

0000e6b4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e6b4:	b590      	push	{r4, r7, lr}
    e6b6:	b085      	sub	sp, #20
    e6b8:	af00      	add	r7, sp, #0
    e6ba:	4603      	mov	r3, r0
    e6bc:	6039      	str	r1, [r7, #0]
    e6be:	71fb      	strb	r3, [r7, #7]
    e6c0:	4613      	mov	r3, r2
    e6c2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    e6c4:	683b      	ldr	r3, [r7, #0]
    e6c6:	799a      	ldrb	r2, [r3, #6]
    e6c8:	79db      	ldrb	r3, [r3, #7]
    e6ca:	021b      	lsls	r3, r3, #8
    e6cc:	4313      	orrs	r3, r2
    e6ce:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    e6d0:	79bb      	ldrb	r3, [r7, #6]
    e6d2:	2b01      	cmp	r3, #1
    e6d4:	d101      	bne.n	e6da <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    e6d6:	2300      	movs	r3, #0
    e6d8:	e013      	b.n	e702 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    e6da:	683b      	ldr	r3, [r7, #0]
    e6dc:	785b      	ldrb	r3, [r3, #1]
    e6de:	2b21      	cmp	r3, #33	; 0x21
    e6e0:	d10d      	bne.n	e6fe <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e6e2:	89fb      	ldrh	r3, [r7, #14]
    e6e4:	2b07      	cmp	r3, #7
    e6e6:	d002      	beq.n	e6ee <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    e6e8:	f04f 33ff 	mov.w	r3, #4294967295
    e6ec:	e009      	b.n	e702 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    e6ee:	89fa      	ldrh	r2, [r7, #14]
    e6f0:	79f8      	ldrb	r0, [r7, #7]
    e6f2:	2300      	movs	r3, #0
    e6f4:	4905      	ldr	r1, [pc, #20]	; (e70c <cdcdf_acm_get_req+0x58>)
    e6f6:	4c06      	ldr	r4, [pc, #24]	; (e710 <cdcdf_acm_get_req+0x5c>)
    e6f8:	47a0      	blx	r4
    e6fa:	4603      	mov	r3, r0
    e6fc:	e001      	b.n	e702 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    e6fe:	f06f 030c 	mvn.w	r3, #12
	}
}
    e702:	4618      	mov	r0, r3
    e704:	3714      	adds	r7, #20
    e706:	46bd      	mov	sp, r7
    e708:	bd90      	pop	{r4, r7, pc}
    e70a:	bf00      	nop
    e70c:	20002550 	.word	0x20002550
    e710:	0000f495 	.word	0x0000f495

0000e714 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e714:	b580      	push	{r7, lr}
    e716:	b082      	sub	sp, #8
    e718:	af00      	add	r7, sp, #0
    e71a:	4603      	mov	r3, r0
    e71c:	6039      	str	r1, [r7, #0]
    e71e:	71fb      	strb	r3, [r7, #7]
    e720:	4613      	mov	r3, r2
    e722:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    e724:	683b      	ldr	r3, [r7, #0]
    e726:	781b      	ldrb	r3, [r3, #0]
    e728:	095b      	lsrs	r3, r3, #5
    e72a:	b2db      	uxtb	r3, r3
    e72c:	f003 0303 	and.w	r3, r3, #3
    e730:	2b01      	cmp	r3, #1
    e732:	d002      	beq.n	e73a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    e734:	f06f 0309 	mvn.w	r3, #9
    e738:	e026      	b.n	e788 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    e73a:	683b      	ldr	r3, [r7, #0]
    e73c:	889b      	ldrh	r3, [r3, #4]
    e73e:	b29a      	uxth	r2, r3
    e740:	4b13      	ldr	r3, [pc, #76]	; (e790 <cdcdf_acm_req+0x7c>)
    e742:	781b      	ldrb	r3, [r3, #0]
    e744:	b29b      	uxth	r3, r3
    e746:	429a      	cmp	r2, r3
    e748:	d007      	beq.n	e75a <cdcdf_acm_req+0x46>
    e74a:	683b      	ldr	r3, [r7, #0]
    e74c:	889b      	ldrh	r3, [r3, #4]
    e74e:	b29a      	uxth	r2, r3
    e750:	4b0f      	ldr	r3, [pc, #60]	; (e790 <cdcdf_acm_req+0x7c>)
    e752:	785b      	ldrb	r3, [r3, #1]
    e754:	b29b      	uxth	r3, r3
    e756:	429a      	cmp	r2, r3
    e758:	d114      	bne.n	e784 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    e75a:	683b      	ldr	r3, [r7, #0]
    e75c:	781b      	ldrb	r3, [r3, #0]
    e75e:	b25b      	sxtb	r3, r3
    e760:	2b00      	cmp	r3, #0
    e762:	da07      	bge.n	e774 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    e764:	79ba      	ldrb	r2, [r7, #6]
    e766:	79fb      	ldrb	r3, [r7, #7]
    e768:	6839      	ldr	r1, [r7, #0]
    e76a:	4618      	mov	r0, r3
    e76c:	4b09      	ldr	r3, [pc, #36]	; (e794 <cdcdf_acm_req+0x80>)
    e76e:	4798      	blx	r3
    e770:	4603      	mov	r3, r0
    e772:	e009      	b.n	e788 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    e774:	79ba      	ldrb	r2, [r7, #6]
    e776:	79fb      	ldrb	r3, [r7, #7]
    e778:	6839      	ldr	r1, [r7, #0]
    e77a:	4618      	mov	r0, r3
    e77c:	4b06      	ldr	r3, [pc, #24]	; (e798 <cdcdf_acm_req+0x84>)
    e77e:	4798      	blx	r3
    e780:	4603      	mov	r3, r0
    e782:	e001      	b.n	e788 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    e784:	f06f 0309 	mvn.w	r3, #9
	}
}
    e788:	4618      	mov	r0, r3
    e78a:	3708      	adds	r7, #8
    e78c:	46bd      	mov	sp, r7
    e78e:	bd80      	pop	{r7, pc}
    e790:	20002548 	.word	0x20002548
    e794:	0000e6b5 	.word	0x0000e6b5
    e798:	0000e5d5 	.word	0x0000e5d5

0000e79c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    e79c:	b580      	push	{r7, lr}
    e79e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    e7a0:	4b0b      	ldr	r3, [pc, #44]	; (e7d0 <cdcdf_acm_init+0x34>)
    e7a2:	4798      	blx	r3
    e7a4:	4603      	mov	r3, r0
    e7a6:	2b01      	cmp	r3, #1
    e7a8:	d902      	bls.n	e7b0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    e7aa:	f06f 0310 	mvn.w	r3, #16
    e7ae:	e00d      	b.n	e7cc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    e7b0:	4b08      	ldr	r3, [pc, #32]	; (e7d4 <cdcdf_acm_init+0x38>)
    e7b2:	4a09      	ldr	r2, [pc, #36]	; (e7d8 <cdcdf_acm_init+0x3c>)
    e7b4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    e7b6:	4b07      	ldr	r3, [pc, #28]	; (e7d4 <cdcdf_acm_init+0x38>)
    e7b8:	4a08      	ldr	r2, [pc, #32]	; (e7dc <cdcdf_acm_init+0x40>)
    e7ba:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    e7bc:	4805      	ldr	r0, [pc, #20]	; (e7d4 <cdcdf_acm_init+0x38>)
    e7be:	4b08      	ldr	r3, [pc, #32]	; (e7e0 <cdcdf_acm_init+0x44>)
    e7c0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    e7c2:	4908      	ldr	r1, [pc, #32]	; (e7e4 <cdcdf_acm_init+0x48>)
    e7c4:	2001      	movs	r0, #1
    e7c6:	4b08      	ldr	r3, [pc, #32]	; (e7e8 <cdcdf_acm_init+0x4c>)
    e7c8:	4798      	blx	r3
	return ERR_NONE;
    e7ca:	2300      	movs	r3, #0
}
    e7cc:	4618      	mov	r0, r3
    e7ce:	bd80      	pop	{r7, pc}
    e7d0:	0000f639 	.word	0x0000f639
    e7d4:	2000253c 	.word	0x2000253c
    e7d8:	0000e585 	.word	0x0000e585
    e7dc:	20002548 	.word	0x20002548
    e7e0:	0000f5a1 	.word	0x0000f5a1
    e7e4:	200000d4 	.word	0x200000d4
    e7e8:	0000f4d1 	.word	0x0000f4d1

0000e7ec <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    e7ec:	b590      	push	{r4, r7, lr}
    e7ee:	b083      	sub	sp, #12
    e7f0:	af00      	add	r7, sp, #0
    e7f2:	6078      	str	r0, [r7, #4]
    e7f4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    e7f6:	4b0b      	ldr	r3, [pc, #44]	; (e824 <cdcdf_acm_read+0x38>)
    e7f8:	4798      	blx	r3
    e7fa:	4603      	mov	r3, r0
    e7fc:	f083 0301 	eor.w	r3, r3, #1
    e800:	b2db      	uxtb	r3, r3
    e802:	2b00      	cmp	r3, #0
    e804:	d002      	beq.n	e80c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    e806:	f06f 0310 	mvn.w	r3, #16
    e80a:	e007      	b.n	e81c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    e80c:	4b06      	ldr	r3, [pc, #24]	; (e828 <cdcdf_acm_read+0x3c>)
    e80e:	7918      	ldrb	r0, [r3, #4]
    e810:	2300      	movs	r3, #0
    e812:	683a      	ldr	r2, [r7, #0]
    e814:	6879      	ldr	r1, [r7, #4]
    e816:	4c05      	ldr	r4, [pc, #20]	; (e82c <cdcdf_acm_read+0x40>)
    e818:	47a0      	blx	r4
    e81a:	4603      	mov	r3, r0
}
    e81c:	4618      	mov	r0, r3
    e81e:	370c      	adds	r7, #12
    e820:	46bd      	mov	sp, r7
    e822:	bd90      	pop	{r4, r7, pc}
    e824:	0000e911 	.word	0x0000e911
    e828:	20002548 	.word	0x20002548
    e82c:	0000f495 	.word	0x0000f495

0000e830 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    e830:	b590      	push	{r4, r7, lr}
    e832:	b083      	sub	sp, #12
    e834:	af00      	add	r7, sp, #0
    e836:	6078      	str	r0, [r7, #4]
    e838:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    e83a:	4b0b      	ldr	r3, [pc, #44]	; (e868 <cdcdf_acm_write+0x38>)
    e83c:	4798      	blx	r3
    e83e:	4603      	mov	r3, r0
    e840:	f083 0301 	eor.w	r3, r3, #1
    e844:	b2db      	uxtb	r3, r3
    e846:	2b00      	cmp	r3, #0
    e848:	d002      	beq.n	e850 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    e84a:	f06f 0310 	mvn.w	r3, #16
    e84e:	e007      	b.n	e860 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    e850:	4b06      	ldr	r3, [pc, #24]	; (e86c <cdcdf_acm_write+0x3c>)
    e852:	78d8      	ldrb	r0, [r3, #3]
    e854:	2301      	movs	r3, #1
    e856:	683a      	ldr	r2, [r7, #0]
    e858:	6879      	ldr	r1, [r7, #4]
    e85a:	4c05      	ldr	r4, [pc, #20]	; (e870 <cdcdf_acm_write+0x40>)
    e85c:	47a0      	blx	r4
    e85e:	4603      	mov	r3, r0
}
    e860:	4618      	mov	r0, r3
    e862:	370c      	adds	r7, #12
    e864:	46bd      	mov	sp, r7
    e866:	bd90      	pop	{r4, r7, pc}
    e868:	0000e911 	.word	0x0000e911
    e86c:	20002548 	.word	0x20002548
    e870:	0000f495 	.word	0x0000f495

0000e874 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    e874:	b580      	push	{r7, lr}
    e876:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    e878:	4b05      	ldr	r3, [pc, #20]	; (e890 <cdcdf_acm_stop_xfer+0x1c>)
    e87a:	78db      	ldrb	r3, [r3, #3]
    e87c:	4618      	mov	r0, r3
    e87e:	4b05      	ldr	r3, [pc, #20]	; (e894 <cdcdf_acm_stop_xfer+0x20>)
    e880:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    e882:	4b03      	ldr	r3, [pc, #12]	; (e890 <cdcdf_acm_stop_xfer+0x1c>)
    e884:	791b      	ldrb	r3, [r3, #4]
    e886:	4618      	mov	r0, r3
    e888:	4b02      	ldr	r3, [pc, #8]	; (e894 <cdcdf_acm_stop_xfer+0x20>)
    e88a:	4798      	blx	r3
}
    e88c:	bf00      	nop
    e88e:	bd80      	pop	{r7, pc}
    e890:	20002548 	.word	0x20002548
    e894:	00005de1 	.word	0x00005de1

0000e898 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    e898:	b580      	push	{r7, lr}
    e89a:	b082      	sub	sp, #8
    e89c:	af00      	add	r7, sp, #0
    e89e:	4603      	mov	r3, r0
    e8a0:	6039      	str	r1, [r7, #0]
    e8a2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    e8a4:	79fb      	ldrb	r3, [r7, #7]
    e8a6:	2b03      	cmp	r3, #3
    e8a8:	d822      	bhi.n	e8f0 <cdcdf_acm_register_callback+0x58>
    e8aa:	a201      	add	r2, pc, #4	; (adr r2, e8b0 <cdcdf_acm_register_callback+0x18>)
    e8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e8b0:	0000e8c1 	.word	0x0000e8c1
    e8b4:	0000e8d1 	.word	0x0000e8d1
    e8b8:	0000e8e1 	.word	0x0000e8e1
    e8bc:	0000e8e9 	.word	0x0000e8e9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    e8c0:	4b0f      	ldr	r3, [pc, #60]	; (e900 <cdcdf_acm_register_callback+0x68>)
    e8c2:	791b      	ldrb	r3, [r3, #4]
    e8c4:	683a      	ldr	r2, [r7, #0]
    e8c6:	2102      	movs	r1, #2
    e8c8:	4618      	mov	r0, r3
    e8ca:	4b0e      	ldr	r3, [pc, #56]	; (e904 <cdcdf_acm_register_callback+0x6c>)
    e8cc:	4798      	blx	r3
		break;
    e8ce:	e012      	b.n	e8f6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    e8d0:	4b0b      	ldr	r3, [pc, #44]	; (e900 <cdcdf_acm_register_callback+0x68>)
    e8d2:	78db      	ldrb	r3, [r3, #3]
    e8d4:	683a      	ldr	r2, [r7, #0]
    e8d6:	2102      	movs	r1, #2
    e8d8:	4618      	mov	r0, r3
    e8da:	4b0a      	ldr	r3, [pc, #40]	; (e904 <cdcdf_acm_register_callback+0x6c>)
    e8dc:	4798      	blx	r3
		break;
    e8de:	e00a      	b.n	e8f6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    e8e0:	4a09      	ldr	r2, [pc, #36]	; (e908 <cdcdf_acm_register_callback+0x70>)
    e8e2:	683b      	ldr	r3, [r7, #0]
    e8e4:	6013      	str	r3, [r2, #0]
		break;
    e8e6:	e006      	b.n	e8f6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    e8e8:	4a08      	ldr	r2, [pc, #32]	; (e90c <cdcdf_acm_register_callback+0x74>)
    e8ea:	683b      	ldr	r3, [r7, #0]
    e8ec:	6013      	str	r3, [r2, #0]
		break;
    e8ee:	e002      	b.n	e8f6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    e8f0:	f06f 030c 	mvn.w	r3, #12
    e8f4:	e000      	b.n	e8f8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    e8f6:	2300      	movs	r3, #0
}
    e8f8:	4618      	mov	r0, r3
    e8fa:	3708      	adds	r7, #8
    e8fc:	46bd      	mov	sp, r7
    e8fe:	bd80      	pop	{r7, pc}
    e900:	20002548 	.word	0x20002548
    e904:	00005f0d 	.word	0x00005f0d
    e908:	2000255c 	.word	0x2000255c
    e90c:	20002558 	.word	0x20002558

0000e910 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    e910:	b480      	push	{r7}
    e912:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    e914:	4b03      	ldr	r3, [pc, #12]	; (e924 <cdcdf_acm_is_enabled+0x14>)
    e916:	795b      	ldrb	r3, [r3, #5]
}
    e918:	4618      	mov	r0, r3
    e91a:	46bd      	mov	sp, r7
    e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e920:	4770      	bx	lr
    e922:	bf00      	nop
    e924:	20002548 	.word	0x20002548

0000e928 <usb_get_u16>:
{
    e928:	b480      	push	{r7}
    e92a:	b083      	sub	sp, #12
    e92c:	af00      	add	r7, sp, #0
    e92e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e930:	687b      	ldr	r3, [r7, #4]
    e932:	781b      	ldrb	r3, [r3, #0]
    e934:	b29a      	uxth	r2, r3
    e936:	687b      	ldr	r3, [r7, #4]
    e938:	3301      	adds	r3, #1
    e93a:	781b      	ldrb	r3, [r3, #0]
    e93c:	b29b      	uxth	r3, r3
    e93e:	021b      	lsls	r3, r3, #8
    e940:	b29b      	uxth	r3, r3
    e942:	4413      	add	r3, r2
    e944:	b29b      	uxth	r3, r3
}
    e946:	4618      	mov	r0, r3
    e948:	370c      	adds	r7, #12
    e94a:	46bd      	mov	sp, r7
    e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e950:	4770      	bx	lr

0000e952 <usb_desc_len>:
{
    e952:	b480      	push	{r7}
    e954:	b083      	sub	sp, #12
    e956:	af00      	add	r7, sp, #0
    e958:	6078      	str	r0, [r7, #4]
	return desc[0];
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	781b      	ldrb	r3, [r3, #0]
}
    e95e:	4618      	mov	r0, r3
    e960:	370c      	adds	r7, #12
    e962:	46bd      	mov	sp, r7
    e964:	f85d 7b04 	ldr.w	r7, [sp], #4
    e968:	4770      	bx	lr
	...

0000e96c <usb_desc_next>:
{
    e96c:	b580      	push	{r7, lr}
    e96e:	b082      	sub	sp, #8
    e970:	af00      	add	r7, sp, #0
    e972:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e974:	6878      	ldr	r0, [r7, #4]
    e976:	4b05      	ldr	r3, [pc, #20]	; (e98c <usb_desc_next+0x20>)
    e978:	4798      	blx	r3
    e97a:	4603      	mov	r3, r0
    e97c:	461a      	mov	r2, r3
    e97e:	687b      	ldr	r3, [r7, #4]
    e980:	4413      	add	r3, r2
}
    e982:	4618      	mov	r0, r3
    e984:	3708      	adds	r7, #8
    e986:	46bd      	mov	sp, r7
    e988:	bd80      	pop	{r7, pc}
    e98a:	bf00      	nop
    e98c:	0000e953 	.word	0x0000e953

0000e990 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    e990:	b580      	push	{r7, lr}
    e992:	b082      	sub	sp, #8
    e994:	af00      	add	r7, sp, #0
    e996:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e998:	687b      	ldr	r3, [r7, #4]
    e99a:	3302      	adds	r3, #2
    e99c:	4618      	mov	r0, r3
    e99e:	4b03      	ldr	r3, [pc, #12]	; (e9ac <usb_cfg_desc_total_len+0x1c>)
    e9a0:	4798      	blx	r3
    e9a2:	4603      	mov	r3, r0
}
    e9a4:	4618      	mov	r0, r3
    e9a6:	3708      	adds	r7, #8
    e9a8:	46bd      	mov	sp, r7
    e9aa:	bd80      	pop	{r7, pc}
    e9ac:	0000e929 	.word	0x0000e929

0000e9b0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    e9b0:	b590      	push	{r4, r7, lr}
    e9b2:	b085      	sub	sp, #20
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	4603      	mov	r3, r0
    e9b8:	6039      	str	r1, [r7, #0]
    e9ba:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    e9bc:	2300      	movs	r3, #0
    e9be:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    e9c0:	683b      	ldr	r3, [r7, #0]
    e9c2:	799a      	ldrb	r2, [r3, #6]
    e9c4:	79db      	ldrb	r3, [r3, #7]
    e9c6:	021b      	lsls	r3, r3, #8
    e9c8:	4313      	orrs	r3, r2
    e9ca:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    e9cc:	897b      	ldrh	r3, [r7, #10]
    e9ce:	2b12      	cmp	r3, #18
    e9d0:	d901      	bls.n	e9d6 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    e9d2:	2312      	movs	r3, #18
    e9d4:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    e9d6:	68fb      	ldr	r3, [r7, #12]
    e9d8:	2b00      	cmp	r3, #0
    e9da:	d10a      	bne.n	e9f2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    e9dc:	4b0f      	ldr	r3, [pc, #60]	; (ea1c <usbdc_get_dev_desc+0x6c>)
    e9de:	681b      	ldr	r3, [r3, #0]
    e9e0:	6818      	ldr	r0, [r3, #0]
    e9e2:	4b0e      	ldr	r3, [pc, #56]	; (ea1c <usbdc_get_dev_desc+0x6c>)
    e9e4:	681b      	ldr	r3, [r3, #0]
    e9e6:	685b      	ldr	r3, [r3, #4]
    e9e8:	2201      	movs	r2, #1
    e9ea:	4619      	mov	r1, r3
    e9ec:	4b0c      	ldr	r3, [pc, #48]	; (ea20 <usbdc_get_dev_desc+0x70>)
    e9ee:	4798      	blx	r3
    e9f0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    e9f2:	68fb      	ldr	r3, [r7, #12]
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d101      	bne.n	e9fc <usbdc_get_dev_desc+0x4c>
		return false;
    e9f8:	2300      	movs	r3, #0
    e9fa:	e00b      	b.n	ea14 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    e9fc:	897a      	ldrh	r2, [r7, #10]
    e9fe:	79f8      	ldrb	r0, [r7, #7]
    ea00:	2300      	movs	r3, #0
    ea02:	68f9      	ldr	r1, [r7, #12]
    ea04:	4c07      	ldr	r4, [pc, #28]	; (ea24 <usbdc_get_dev_desc+0x74>)
    ea06:	47a0      	blx	r4
    ea08:	4603      	mov	r3, r0
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	d001      	beq.n	ea12 <usbdc_get_dev_desc+0x62>
		return false;
    ea0e:	2300      	movs	r3, #0
    ea10:	e000      	b.n	ea14 <usbdc_get_dev_desc+0x64>
	}
	return true;
    ea12:	2301      	movs	r3, #1
}
    ea14:	4618      	mov	r0, r3
    ea16:	3714      	adds	r7, #20
    ea18:	46bd      	mov	sp, r7
    ea1a:	bd90      	pop	{r4, r7, pc}
    ea1c:	20002560 	.word	0x20002560
    ea20:	0000f725 	.word	0x0000f725
    ea24:	0000f495 	.word	0x0000f495

0000ea28 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    ea28:	b590      	push	{r4, r7, lr}
    ea2a:	b087      	sub	sp, #28
    ea2c:	af00      	add	r7, sp, #0
    ea2e:	4603      	mov	r3, r0
    ea30:	6039      	str	r1, [r7, #0]
    ea32:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    ea34:	2300      	movs	r3, #0
    ea36:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    ea38:	683b      	ldr	r3, [r7, #0]
    ea3a:	799a      	ldrb	r2, [r3, #6]
    ea3c:	79db      	ldrb	r3, [r3, #7]
    ea3e:	021b      	lsls	r3, r3, #8
    ea40:	4313      	orrs	r3, r2
    ea42:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ea44:	683b      	ldr	r3, [r7, #0]
    ea46:	885b      	ldrh	r3, [r3, #2]
    ea48:	b29b      	uxth	r3, r3
    ea4a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ea4c:	8a7a      	ldrh	r2, [r7, #18]
    ea4e:	4b1e      	ldr	r3, [pc, #120]	; (eac8 <usbdc_get_cfg_desc+0xa0>)
    ea50:	7f1b      	ldrb	r3, [r3, #28]
    ea52:	3b01      	subs	r3, #1
    ea54:	4013      	ands	r3, r2
    ea56:	2b00      	cmp	r3, #0
    ea58:	bf0c      	ite	eq
    ea5a:	2301      	moveq	r3, #1
    ea5c:	2300      	movne	r3, #0
    ea5e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ea60:	697b      	ldr	r3, [r7, #20]
    ea62:	2b00      	cmp	r3, #0
    ea64:	d10c      	bne.n	ea80 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ea66:	4b18      	ldr	r3, [pc, #96]	; (eac8 <usbdc_get_cfg_desc+0xa0>)
    ea68:	681b      	ldr	r3, [r3, #0]
    ea6a:	6818      	ldr	r0, [r3, #0]
    ea6c:	4b16      	ldr	r3, [pc, #88]	; (eac8 <usbdc_get_cfg_desc+0xa0>)
    ea6e:	681b      	ldr	r3, [r3, #0]
    ea70:	6859      	ldr	r1, [r3, #4]
    ea72:	7c3b      	ldrb	r3, [r7, #16]
    ea74:	3301      	adds	r3, #1
    ea76:	b2db      	uxtb	r3, r3
    ea78:	461a      	mov	r2, r3
    ea7a:	4b14      	ldr	r3, [pc, #80]	; (eacc <usbdc_get_cfg_desc+0xa4>)
    ea7c:	4798      	blx	r3
    ea7e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    ea80:	697b      	ldr	r3, [r7, #20]
    ea82:	2b00      	cmp	r3, #0
    ea84:	d101      	bne.n	ea8a <usbdc_get_cfg_desc+0x62>
		return false;
    ea86:	2300      	movs	r3, #0
    ea88:	e019      	b.n	eabe <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    ea8a:	6978      	ldr	r0, [r7, #20]
    ea8c:	4b10      	ldr	r3, [pc, #64]	; (ead0 <usbdc_get_cfg_desc+0xa8>)
    ea8e:	4798      	blx	r3
    ea90:	4603      	mov	r3, r0
    ea92:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    ea94:	8a7a      	ldrh	r2, [r7, #18]
    ea96:	89fb      	ldrh	r3, [r7, #14]
    ea98:	429a      	cmp	r2, r3
    ea9a:	d802      	bhi.n	eaa2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    ea9c:	2300      	movs	r3, #0
    ea9e:	747b      	strb	r3, [r7, #17]
    eaa0:	e001      	b.n	eaa6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    eaa2:	89fb      	ldrh	r3, [r7, #14]
    eaa4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    eaa6:	8a7a      	ldrh	r2, [r7, #18]
    eaa8:	7c7b      	ldrb	r3, [r7, #17]
    eaaa:	79f8      	ldrb	r0, [r7, #7]
    eaac:	6979      	ldr	r1, [r7, #20]
    eaae:	4c09      	ldr	r4, [pc, #36]	; (ead4 <usbdc_get_cfg_desc+0xac>)
    eab0:	47a0      	blx	r4
    eab2:	4603      	mov	r3, r0
    eab4:	2b00      	cmp	r3, #0
    eab6:	d001      	beq.n	eabc <usbdc_get_cfg_desc+0x94>
		return false;
    eab8:	2300      	movs	r3, #0
    eaba:	e000      	b.n	eabe <usbdc_get_cfg_desc+0x96>
	}
	return true;
    eabc:	2301      	movs	r3, #1
}
    eabe:	4618      	mov	r0, r3
    eac0:	371c      	adds	r7, #28
    eac2:	46bd      	mov	sp, r7
    eac4:	bd90      	pop	{r4, r7, pc}
    eac6:	bf00      	nop
    eac8:	20002560 	.word	0x20002560
    eacc:	0000f7e5 	.word	0x0000f7e5
    ead0:	0000e991 	.word	0x0000e991
    ead4:	0000f495 	.word	0x0000f495

0000ead8 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    ead8:	b590      	push	{r4, r7, lr}
    eada:	b085      	sub	sp, #20
    eadc:	af00      	add	r7, sp, #0
    eade:	4603      	mov	r3, r0
    eae0:	6039      	str	r1, [r7, #0]
    eae2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    eae4:	683b      	ldr	r3, [r7, #0]
    eae6:	799a      	ldrb	r2, [r3, #6]
    eae8:	79db      	ldrb	r3, [r3, #7]
    eaea:	021b      	lsls	r3, r3, #8
    eaec:	4313      	orrs	r3, r2
    eaee:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    eaf0:	683b      	ldr	r3, [r7, #0]
    eaf2:	885b      	ldrh	r3, [r3, #2]
    eaf4:	b29b      	uxth	r3, r3
    eaf6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    eaf8:	89fa      	ldrh	r2, [r7, #14]
    eafa:	4b1a      	ldr	r3, [pc, #104]	; (eb64 <usbdc_get_str_desc+0x8c>)
    eafc:	7f1b      	ldrb	r3, [r3, #28]
    eafe:	3b01      	subs	r3, #1
    eb00:	4013      	ands	r3, r2
    eb02:	2b00      	cmp	r3, #0
    eb04:	bf0c      	ite	eq
    eb06:	2301      	moveq	r3, #1
    eb08:	2300      	movne	r3, #0
    eb0a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    eb0c:	4b15      	ldr	r3, [pc, #84]	; (eb64 <usbdc_get_str_desc+0x8c>)
    eb0e:	681b      	ldr	r3, [r3, #0]
    eb10:	6818      	ldr	r0, [r3, #0]
    eb12:	4b14      	ldr	r3, [pc, #80]	; (eb64 <usbdc_get_str_desc+0x8c>)
    eb14:	681b      	ldr	r3, [r3, #0]
    eb16:	685b      	ldr	r3, [r3, #4]
    eb18:	7b3a      	ldrb	r2, [r7, #12]
    eb1a:	4619      	mov	r1, r3
    eb1c:	4b12      	ldr	r3, [pc, #72]	; (eb68 <usbdc_get_str_desc+0x90>)
    eb1e:	4798      	blx	r3
    eb20:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    eb22:	68bb      	ldr	r3, [r7, #8]
    eb24:	2b00      	cmp	r3, #0
    eb26:	d101      	bne.n	eb2c <usbdc_get_str_desc+0x54>
		return false;
    eb28:	2300      	movs	r3, #0
    eb2a:	e017      	b.n	eb5c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    eb2c:	68bb      	ldr	r3, [r7, #8]
    eb2e:	781b      	ldrb	r3, [r3, #0]
    eb30:	b29b      	uxth	r3, r3
    eb32:	89fa      	ldrh	r2, [r7, #14]
    eb34:	429a      	cmp	r2, r3
    eb36:	d802      	bhi.n	eb3e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    eb38:	2300      	movs	r3, #0
    eb3a:	737b      	strb	r3, [r7, #13]
    eb3c:	e002      	b.n	eb44 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    eb3e:	68bb      	ldr	r3, [r7, #8]
    eb40:	781b      	ldrb	r3, [r3, #0]
    eb42:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    eb44:	89fa      	ldrh	r2, [r7, #14]
    eb46:	7b7b      	ldrb	r3, [r7, #13]
    eb48:	79f8      	ldrb	r0, [r7, #7]
    eb4a:	68b9      	ldr	r1, [r7, #8]
    eb4c:	4c07      	ldr	r4, [pc, #28]	; (eb6c <usbdc_get_str_desc+0x94>)
    eb4e:	47a0      	blx	r4
    eb50:	4603      	mov	r3, r0
    eb52:	2b00      	cmp	r3, #0
    eb54:	d001      	beq.n	eb5a <usbdc_get_str_desc+0x82>
		return false;
    eb56:	2300      	movs	r3, #0
    eb58:	e000      	b.n	eb5c <usbdc_get_str_desc+0x84>
	}
	return true;
    eb5a:	2301      	movs	r3, #1
}
    eb5c:	4618      	mov	r0, r3
    eb5e:	3714      	adds	r7, #20
    eb60:	46bd      	mov	sp, r7
    eb62:	bd90      	pop	{r4, r7, pc}
    eb64:	20002560 	.word	0x20002560
    eb68:	0000f85d 	.word	0x0000f85d
    eb6c:	0000f495 	.word	0x0000f495

0000eb70 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    eb70:	b580      	push	{r7, lr}
    eb72:	b084      	sub	sp, #16
    eb74:	af00      	add	r7, sp, #0
    eb76:	4603      	mov	r3, r0
    eb78:	6039      	str	r1, [r7, #0]
    eb7a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    eb7c:	683b      	ldr	r3, [r7, #0]
    eb7e:	885b      	ldrh	r3, [r3, #2]
    eb80:	b29b      	uxth	r3, r3
    eb82:	0a1b      	lsrs	r3, r3, #8
    eb84:	b29b      	uxth	r3, r3
    eb86:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    eb88:	7bfb      	ldrb	r3, [r7, #15]
    eb8a:	2b02      	cmp	r3, #2
    eb8c:	d00d      	beq.n	ebaa <usbdc_get_desc_req+0x3a>
    eb8e:	2b03      	cmp	r3, #3
    eb90:	d012      	beq.n	ebb8 <usbdc_get_desc_req+0x48>
    eb92:	2b01      	cmp	r3, #1
    eb94:	d002      	beq.n	eb9c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    eb96:	bf00      	nop
	}
	return false;
    eb98:	2300      	movs	r3, #0
    eb9a:	e013      	b.n	ebc4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    eb9c:	79fb      	ldrb	r3, [r7, #7]
    eb9e:	6839      	ldr	r1, [r7, #0]
    eba0:	4618      	mov	r0, r3
    eba2:	4b0a      	ldr	r3, [pc, #40]	; (ebcc <usbdc_get_desc_req+0x5c>)
    eba4:	4798      	blx	r3
    eba6:	4603      	mov	r3, r0
    eba8:	e00c      	b.n	ebc4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    ebaa:	79fb      	ldrb	r3, [r7, #7]
    ebac:	6839      	ldr	r1, [r7, #0]
    ebae:	4618      	mov	r0, r3
    ebb0:	4b07      	ldr	r3, [pc, #28]	; (ebd0 <usbdc_get_desc_req+0x60>)
    ebb2:	4798      	blx	r3
    ebb4:	4603      	mov	r3, r0
    ebb6:	e005      	b.n	ebc4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    ebb8:	79fb      	ldrb	r3, [r7, #7]
    ebba:	6839      	ldr	r1, [r7, #0]
    ebbc:	4618      	mov	r0, r3
    ebbe:	4b05      	ldr	r3, [pc, #20]	; (ebd4 <usbdc_get_desc_req+0x64>)
    ebc0:	4798      	blx	r3
    ebc2:	4603      	mov	r3, r0
}
    ebc4:	4618      	mov	r0, r3
    ebc6:	3710      	adds	r7, #16
    ebc8:	46bd      	mov	sp, r7
    ebca:	bd80      	pop	{r7, pc}
    ebcc:	0000e9b1 	.word	0x0000e9b1
    ebd0:	0000ea29 	.word	0x0000ea29
    ebd4:	0000ead9 	.word	0x0000ead9

0000ebd8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ebd8:	b590      	push	{r4, r7, lr}
    ebda:	b085      	sub	sp, #20
    ebdc:	af00      	add	r7, sp, #0
    ebde:	4603      	mov	r3, r0
    ebe0:	6039      	str	r1, [r7, #0]
    ebe2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ebe4:	683b      	ldr	r3, [r7, #0]
    ebe6:	781b      	ldrb	r3, [r3, #0]
    ebe8:	f003 031f 	and.w	r3, r3, #31
    ebec:	2b00      	cmp	r3, #0
    ebee:	db1b      	blt.n	ec28 <usbdc_get_status_req+0x50>
    ebf0:	2b01      	cmp	r3, #1
    ebf2:	dd02      	ble.n	ebfa <usbdc_get_status_req+0x22>
    ebf4:	2b02      	cmp	r3, #2
    ebf6:	d003      	beq.n	ec00 <usbdc_get_status_req+0x28>
    ebf8:	e016      	b.n	ec28 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ebfa:	2300      	movs	r3, #0
    ebfc:	60fb      	str	r3, [r7, #12]
		break;
    ebfe:	e015      	b.n	ec2c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ec00:	683b      	ldr	r3, [r7, #0]
    ec02:	889b      	ldrh	r3, [r3, #4]
    ec04:	b29b      	uxth	r3, r3
    ec06:	b2db      	uxtb	r3, r3
    ec08:	2102      	movs	r1, #2
    ec0a:	4618      	mov	r0, r3
    ec0c:	4b0f      	ldr	r3, [pc, #60]	; (ec4c <usbdc_get_status_req+0x74>)
    ec0e:	4798      	blx	r3
    ec10:	4603      	mov	r3, r0
    ec12:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ec14:	68fb      	ldr	r3, [r7, #12]
    ec16:	2b00      	cmp	r3, #0
    ec18:	da01      	bge.n	ec1e <usbdc_get_status_req+0x46>
			return false;
    ec1a:	2300      	movs	r3, #0
    ec1c:	e012      	b.n	ec44 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ec1e:	68fb      	ldr	r3, [r7, #12]
    ec20:	f003 0301 	and.w	r3, r3, #1
    ec24:	60fb      	str	r3, [r7, #12]
		break;
    ec26:	e001      	b.n	ec2c <usbdc_get_status_req+0x54>
	default:
		return false;
    ec28:	2300      	movs	r3, #0
    ec2a:	e00b      	b.n	ec44 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ec2c:	4b08      	ldr	r3, [pc, #32]	; (ec50 <usbdc_get_status_req+0x78>)
    ec2e:	695b      	ldr	r3, [r3, #20]
    ec30:	89ba      	ldrh	r2, [r7, #12]
    ec32:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ec34:	4b06      	ldr	r3, [pc, #24]	; (ec50 <usbdc_get_status_req+0x78>)
    ec36:	6959      	ldr	r1, [r3, #20]
    ec38:	79f8      	ldrb	r0, [r7, #7]
    ec3a:	2300      	movs	r3, #0
    ec3c:	2202      	movs	r2, #2
    ec3e:	4c05      	ldr	r4, [pc, #20]	; (ec54 <usbdc_get_status_req+0x7c>)
    ec40:	47a0      	blx	r4
	return true;
    ec42:	2301      	movs	r3, #1
}
    ec44:	4618      	mov	r0, r3
    ec46:	3714      	adds	r7, #20
    ec48:	46bd      	mov	sp, r7
    ec4a:	bd90      	pop	{r4, r7, pc}
    ec4c:	00005eb9 	.word	0x00005eb9
    ec50:	20002560 	.word	0x20002560
    ec54:	0000f495 	.word	0x0000f495

0000ec58 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    ec58:	b590      	push	{r4, r7, lr}
    ec5a:	b085      	sub	sp, #20
    ec5c:	af00      	add	r7, sp, #0
    ec5e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ec60:	4b1f      	ldr	r3, [pc, #124]	; (ece0 <usbdc_get_interface+0x88>)
    ec62:	691b      	ldr	r3, [r3, #16]
    ec64:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ec66:	4b1e      	ldr	r3, [pc, #120]	; (ece0 <usbdc_get_interface+0x88>)
    ec68:	7f5b      	ldrb	r3, [r3, #29]
    ec6a:	461a      	mov	r2, r3
    ec6c:	687b      	ldr	r3, [r7, #4]
    ec6e:	889b      	ldrh	r3, [r3, #4]
    ec70:	b29b      	uxth	r3, r3
    ec72:	fa42 f303 	asr.w	r3, r2, r3
    ec76:	f003 0301 	and.w	r3, r3, #1
    ec7a:	2b00      	cmp	r3, #0
    ec7c:	d128      	bne.n	ecd0 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    ec7e:	4b18      	ldr	r3, [pc, #96]	; (ece0 <usbdc_get_interface+0x88>)
    ec80:	695b      	ldr	r3, [r3, #20]
    ec82:	2200      	movs	r2, #0
    ec84:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ec86:	4b16      	ldr	r3, [pc, #88]	; (ece0 <usbdc_get_interface+0x88>)
    ec88:	6959      	ldr	r1, [r3, #20]
    ec8a:	2300      	movs	r3, #0
    ec8c:	2201      	movs	r2, #1
    ec8e:	2000      	movs	r0, #0
    ec90:	4c14      	ldr	r4, [pc, #80]	; (ece4 <usbdc_get_interface+0x8c>)
    ec92:	47a0      	blx	r4
		return true;
    ec94:	2301      	movs	r3, #1
    ec96:	e01f      	b.n	ecd8 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ec98:	68fb      	ldr	r3, [r7, #12]
    ec9a:	685b      	ldr	r3, [r3, #4]
    ec9c:	687a      	ldr	r2, [r7, #4]
    ec9e:	2102      	movs	r1, #2
    eca0:	68f8      	ldr	r0, [r7, #12]
    eca2:	4798      	blx	r3
    eca4:	60b8      	str	r0, [r7, #8]
    eca6:	68bb      	ldr	r3, [r7, #8]
    eca8:	2b00      	cmp	r3, #0
    ecaa:	da03      	bge.n	ecb4 <usbdc_get_interface+0x5c>
			func = func->next;
    ecac:	68fb      	ldr	r3, [r7, #12]
    ecae:	681b      	ldr	r3, [r3, #0]
    ecb0:	60fb      	str	r3, [r7, #12]
    ecb2:	e00d      	b.n	ecd0 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ecb4:	4b0a      	ldr	r3, [pc, #40]	; (ece0 <usbdc_get_interface+0x88>)
    ecb6:	695b      	ldr	r3, [r3, #20]
    ecb8:	68ba      	ldr	r2, [r7, #8]
    ecba:	b2d2      	uxtb	r2, r2
    ecbc:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ecbe:	4b08      	ldr	r3, [pc, #32]	; (ece0 <usbdc_get_interface+0x88>)
    ecc0:	6959      	ldr	r1, [r3, #20]
    ecc2:	2300      	movs	r3, #0
    ecc4:	2201      	movs	r2, #1
    ecc6:	2000      	movs	r0, #0
    ecc8:	4c06      	ldr	r4, [pc, #24]	; (ece4 <usbdc_get_interface+0x8c>)
    ecca:	47a0      	blx	r4
			return true;
    eccc:	2301      	movs	r3, #1
    ecce:	e003      	b.n	ecd8 <usbdc_get_interface+0x80>
	while (NULL != func) {
    ecd0:	68fb      	ldr	r3, [r7, #12]
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d1e0      	bne.n	ec98 <usbdc_get_interface+0x40>
		}
	}
	return false;
    ecd6:	2300      	movs	r3, #0
}
    ecd8:	4618      	mov	r0, r3
    ecda:	3714      	adds	r7, #20
    ecdc:	46bd      	mov	sp, r7
    ecde:	bd90      	pop	{r4, r7, pc}
    ece0:	20002560 	.word	0x20002560
    ece4:	0000f495 	.word	0x0000f495

0000ece8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ece8:	b590      	push	{r4, r7, lr}
    ecea:	b083      	sub	sp, #12
    ecec:	af00      	add	r7, sp, #0
    ecee:	4603      	mov	r3, r0
    ecf0:	6039      	str	r1, [r7, #0]
    ecf2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ecf4:	683b      	ldr	r3, [r7, #0]
    ecf6:	785b      	ldrb	r3, [r3, #1]
    ecf8:	2b0a      	cmp	r3, #10
    ecfa:	d83a      	bhi.n	ed72 <usbdc_get_req+0x8a>
    ecfc:	a201      	add	r2, pc, #4	; (adr r2, ed04 <usbdc_get_req+0x1c>)
    ecfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ed02:	bf00      	nop
    ed04:	0000ed5b 	.word	0x0000ed5b
    ed08:	0000ed73 	.word	0x0000ed73
    ed0c:	0000ed73 	.word	0x0000ed73
    ed10:	0000ed73 	.word	0x0000ed73
    ed14:	0000ed73 	.word	0x0000ed73
    ed18:	0000ed73 	.word	0x0000ed73
    ed1c:	0000ed31 	.word	0x0000ed31
    ed20:	0000ed73 	.word	0x0000ed73
    ed24:	0000ed3f 	.word	0x0000ed3f
    ed28:	0000ed73 	.word	0x0000ed73
    ed2c:	0000ed69 	.word	0x0000ed69
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    ed30:	79fb      	ldrb	r3, [r7, #7]
    ed32:	6839      	ldr	r1, [r7, #0]
    ed34:	4618      	mov	r0, r3
    ed36:	4b11      	ldr	r3, [pc, #68]	; (ed7c <usbdc_get_req+0x94>)
    ed38:	4798      	blx	r3
    ed3a:	4603      	mov	r3, r0
    ed3c:	e01a      	b.n	ed74 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ed3e:	4b10      	ldr	r3, [pc, #64]	; (ed80 <usbdc_get_req+0x98>)
    ed40:	695b      	ldr	r3, [r3, #20]
    ed42:	4a0f      	ldr	r2, [pc, #60]	; (ed80 <usbdc_get_req+0x98>)
    ed44:	7ed2      	ldrb	r2, [r2, #27]
    ed46:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ed48:	4b0d      	ldr	r3, [pc, #52]	; (ed80 <usbdc_get_req+0x98>)
    ed4a:	6959      	ldr	r1, [r3, #20]
    ed4c:	79f8      	ldrb	r0, [r7, #7]
    ed4e:	2300      	movs	r3, #0
    ed50:	2201      	movs	r2, #1
    ed52:	4c0c      	ldr	r4, [pc, #48]	; (ed84 <usbdc_get_req+0x9c>)
    ed54:	47a0      	blx	r4
		return true;
    ed56:	2301      	movs	r3, #1
    ed58:	e00c      	b.n	ed74 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    ed5a:	79fb      	ldrb	r3, [r7, #7]
    ed5c:	6839      	ldr	r1, [r7, #0]
    ed5e:	4618      	mov	r0, r3
    ed60:	4b09      	ldr	r3, [pc, #36]	; (ed88 <usbdc_get_req+0xa0>)
    ed62:	4798      	blx	r3
    ed64:	4603      	mov	r3, r0
    ed66:	e005      	b.n	ed74 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    ed68:	6838      	ldr	r0, [r7, #0]
    ed6a:	4b08      	ldr	r3, [pc, #32]	; (ed8c <usbdc_get_req+0xa4>)
    ed6c:	4798      	blx	r3
    ed6e:	4603      	mov	r3, r0
    ed70:	e000      	b.n	ed74 <usbdc_get_req+0x8c>
	default:
		return false;
    ed72:	2300      	movs	r3, #0
	}
}
    ed74:	4618      	mov	r0, r3
    ed76:	370c      	adds	r7, #12
    ed78:	46bd      	mov	sp, r7
    ed7a:	bd90      	pop	{r4, r7, pc}
    ed7c:	0000eb71 	.word	0x0000eb71
    ed80:	20002560 	.word	0x20002560
    ed84:	0000f495 	.word	0x0000f495
    ed88:	0000ebd9 	.word	0x0000ebd9
    ed8c:	0000ec59 	.word	0x0000ec59

0000ed90 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ed90:	b590      	push	{r4, r7, lr}
    ed92:	b083      	sub	sp, #12
    ed94:	af00      	add	r7, sp, #0
    ed96:	4603      	mov	r3, r0
    ed98:	6039      	str	r1, [r7, #0]
    ed9a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ed9c:	683b      	ldr	r3, [r7, #0]
    ed9e:	781b      	ldrb	r3, [r3, #0]
    eda0:	f003 031f 	and.w	r3, r3, #31
    eda4:	2b02      	cmp	r3, #2
    eda6:	d116      	bne.n	edd6 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    eda8:	683b      	ldr	r3, [r7, #0]
    edaa:	88db      	ldrh	r3, [r3, #6]
    edac:	b29b      	uxth	r3, r3
    edae:	2b00      	cmp	r3, #0
    edb0:	d001      	beq.n	edb6 <usbdc_clear_ftr_req+0x26>
			return false;
    edb2:	2300      	movs	r3, #0
    edb4:	e010      	b.n	edd8 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    edb6:	683b      	ldr	r3, [r7, #0]
    edb8:	889b      	ldrh	r3, [r3, #4]
    edba:	b29b      	uxth	r3, r3
    edbc:	b2db      	uxtb	r3, r3
    edbe:	2100      	movs	r1, #0
    edc0:	4618      	mov	r0, r3
    edc2:	4b07      	ldr	r3, [pc, #28]	; (ede0 <usbdc_clear_ftr_req+0x50>)
    edc4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    edc6:	79f8      	ldrb	r0, [r7, #7]
    edc8:	2301      	movs	r3, #1
    edca:	2200      	movs	r2, #0
    edcc:	2100      	movs	r1, #0
    edce:	4c05      	ldr	r4, [pc, #20]	; (ede4 <usbdc_clear_ftr_req+0x54>)
    edd0:	47a0      	blx	r4
		return true;
    edd2:	2301      	movs	r3, #1
    edd4:	e000      	b.n	edd8 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    edd6:	2300      	movs	r3, #0
	}
}
    edd8:	4618      	mov	r0, r3
    edda:	370c      	adds	r7, #12
    eddc:	46bd      	mov	sp, r7
    edde:	bd90      	pop	{r4, r7, pc}
    ede0:	00005eb9 	.word	0x00005eb9
    ede4:	0000f495 	.word	0x0000f495

0000ede8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ede8:	b590      	push	{r4, r7, lr}
    edea:	b083      	sub	sp, #12
    edec:	af00      	add	r7, sp, #0
    edee:	4603      	mov	r3, r0
    edf0:	6039      	str	r1, [r7, #0]
    edf2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    edf4:	683b      	ldr	r3, [r7, #0]
    edf6:	781b      	ldrb	r3, [r3, #0]
    edf8:	f003 031f 	and.w	r3, r3, #31
    edfc:	2b02      	cmp	r3, #2
    edfe:	d116      	bne.n	ee2e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ee00:	683b      	ldr	r3, [r7, #0]
    ee02:	88db      	ldrh	r3, [r3, #6]
    ee04:	b29b      	uxth	r3, r3
    ee06:	2b00      	cmp	r3, #0
    ee08:	d001      	beq.n	ee0e <usbdc_set_ftr_req+0x26>
			return false;
    ee0a:	2300      	movs	r3, #0
    ee0c:	e010      	b.n	ee30 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ee0e:	683b      	ldr	r3, [r7, #0]
    ee10:	889b      	ldrh	r3, [r3, #4]
    ee12:	b29b      	uxth	r3, r3
    ee14:	b2db      	uxtb	r3, r3
    ee16:	2101      	movs	r1, #1
    ee18:	4618      	mov	r0, r3
    ee1a:	4b07      	ldr	r3, [pc, #28]	; (ee38 <usbdc_set_ftr_req+0x50>)
    ee1c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ee1e:	79f8      	ldrb	r0, [r7, #7]
    ee20:	2301      	movs	r3, #1
    ee22:	2200      	movs	r2, #0
    ee24:	2100      	movs	r1, #0
    ee26:	4c05      	ldr	r4, [pc, #20]	; (ee3c <usbdc_set_ftr_req+0x54>)
    ee28:	47a0      	blx	r4
		return true;
    ee2a:	2301      	movs	r3, #1
    ee2c:	e000      	b.n	ee30 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    ee2e:	2300      	movs	r3, #0
	}
}
    ee30:	4618      	mov	r0, r3
    ee32:	370c      	adds	r7, #12
    ee34:	46bd      	mov	sp, r7
    ee36:	bd90      	pop	{r4, r7, pc}
    ee38:	00005eb9 	.word	0x00005eb9
    ee3c:	0000f495 	.word	0x0000f495

0000ee40 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ee40:	b580      	push	{r7, lr}
    ee42:	b082      	sub	sp, #8
    ee44:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ee46:	4b0a      	ldr	r3, [pc, #40]	; (ee70 <usbdc_unconfig+0x30>)
    ee48:	691b      	ldr	r3, [r3, #16]
    ee4a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ee4c:	e008      	b.n	ee60 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	685b      	ldr	r3, [r3, #4]
    ee52:	2200      	movs	r2, #0
    ee54:	2101      	movs	r1, #1
    ee56:	6878      	ldr	r0, [r7, #4]
    ee58:	4798      	blx	r3
		func = func->next;
    ee5a:	687b      	ldr	r3, [r7, #4]
    ee5c:	681b      	ldr	r3, [r3, #0]
    ee5e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ee60:	687b      	ldr	r3, [r7, #4]
    ee62:	2b00      	cmp	r3, #0
    ee64:	d1f3      	bne.n	ee4e <usbdc_unconfig+0xe>
	}
}
    ee66:	bf00      	nop
    ee68:	3708      	adds	r7, #8
    ee6a:	46bd      	mov	sp, r7
    ee6c:	bd80      	pop	{r7, pc}
    ee6e:	bf00      	nop
    ee70:	20002560 	.word	0x20002560

0000ee74 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    ee74:	b580      	push	{r7, lr}
    ee76:	b088      	sub	sp, #32
    ee78:	af00      	add	r7, sp, #0
    ee7a:	4603      	mov	r3, r0
    ee7c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    ee7e:	2300      	movs	r3, #0
    ee80:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    ee82:	23ff      	movs	r3, #255	; 0xff
    ee84:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    ee86:	79fb      	ldrb	r3, [r7, #7]
    ee88:	2b00      	cmp	r3, #0
    ee8a:	d103      	bne.n	ee94 <usbdc_set_config+0x20>
		usbdc_unconfig();
    ee8c:	4b2e      	ldr	r3, [pc, #184]	; (ef48 <usbdc_set_config+0xd4>)
    ee8e:	4798      	blx	r3
		return true;
    ee90:	2301      	movs	r3, #1
    ee92:	e055      	b.n	ef40 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ee94:	69bb      	ldr	r3, [r7, #24]
    ee96:	2b00      	cmp	r3, #0
    ee98:	d10a      	bne.n	eeb0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ee9a:	4b2c      	ldr	r3, [pc, #176]	; (ef4c <usbdc_set_config+0xd8>)
    ee9c:	681b      	ldr	r3, [r3, #0]
    ee9e:	6818      	ldr	r0, [r3, #0]
    eea0:	4b2a      	ldr	r3, [pc, #168]	; (ef4c <usbdc_set_config+0xd8>)
    eea2:	681b      	ldr	r3, [r3, #0]
    eea4:	685b      	ldr	r3, [r3, #4]
    eea6:	79fa      	ldrb	r2, [r7, #7]
    eea8:	4619      	mov	r1, r3
    eeaa:	4b29      	ldr	r3, [pc, #164]	; (ef50 <usbdc_set_config+0xdc>)
    eeac:	4798      	blx	r3
    eeae:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    eeb0:	69bb      	ldr	r3, [r7, #24]
    eeb2:	2b00      	cmp	r3, #0
    eeb4:	d101      	bne.n	eeba <usbdc_set_config+0x46>
		return false;
    eeb6:	2300      	movs	r3, #0
    eeb8:	e042      	b.n	ef40 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    eeba:	69b8      	ldr	r0, [r7, #24]
    eebc:	4b25      	ldr	r3, [pc, #148]	; (ef54 <usbdc_set_config+0xe0>)
    eebe:	4798      	blx	r3
    eec0:	4603      	mov	r3, r0
    eec2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    eec4:	8abb      	ldrh	r3, [r7, #20]
    eec6:	69ba      	ldr	r2, [r7, #24]
    eec8:	4413      	add	r3, r2
    eeca:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    eecc:	693b      	ldr	r3, [r7, #16]
    eece:	2204      	movs	r2, #4
    eed0:	4619      	mov	r1, r3
    eed2:	69b8      	ldr	r0, [r7, #24]
    eed4:	4b20      	ldr	r3, [pc, #128]	; (ef58 <usbdc_set_config+0xe4>)
    eed6:	4798      	blx	r3
    eed8:	4603      	mov	r3, r0
    eeda:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    eedc:	e02c      	b.n	ef38 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    eede:	68fb      	ldr	r3, [r7, #12]
    eee0:	3302      	adds	r3, #2
    eee2:	781b      	ldrb	r3, [r3, #0]
    eee4:	7dfa      	ldrb	r2, [r7, #23]
    eee6:	429a      	cmp	r2, r3
    eee8:	d018      	beq.n	ef1c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    eeea:	68fb      	ldr	r3, [r7, #12]
    eeec:	789b      	ldrb	r3, [r3, #2]
    eeee:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    eef0:	4b16      	ldr	r3, [pc, #88]	; (ef4c <usbdc_set_config+0xd8>)
    eef2:	691b      	ldr	r3, [r3, #16]
    eef4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    eef6:	e00c      	b.n	ef12 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    eef8:	69fb      	ldr	r3, [r7, #28]
    eefa:	685b      	ldr	r3, [r3, #4]
    eefc:	f107 020c 	add.w	r2, r7, #12
    ef00:	2100      	movs	r1, #0
    ef02:	69f8      	ldr	r0, [r7, #28]
    ef04:	4798      	blx	r3
    ef06:	4603      	mov	r3, r0
    ef08:	2b00      	cmp	r3, #0
    ef0a:	d006      	beq.n	ef1a <usbdc_set_config+0xa6>
					func = func->next;
    ef0c:	69fb      	ldr	r3, [r7, #28]
    ef0e:	681b      	ldr	r3, [r3, #0]
    ef10:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ef12:	69fb      	ldr	r3, [r7, #28]
    ef14:	2b00      	cmp	r3, #0
    ef16:	d1ef      	bne.n	eef8 <usbdc_set_config+0x84>
    ef18:	e000      	b.n	ef1c <usbdc_set_config+0xa8>
				} else {
					break;
    ef1a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    ef1c:	68fb      	ldr	r3, [r7, #12]
    ef1e:	4618      	mov	r0, r3
    ef20:	4b0e      	ldr	r3, [pc, #56]	; (ef5c <usbdc_set_config+0xe8>)
    ef22:	4798      	blx	r3
    ef24:	4603      	mov	r3, r0
    ef26:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ef28:	68fb      	ldr	r3, [r7, #12]
    ef2a:	6939      	ldr	r1, [r7, #16]
    ef2c:	2204      	movs	r2, #4
    ef2e:	4618      	mov	r0, r3
    ef30:	4b09      	ldr	r3, [pc, #36]	; (ef58 <usbdc_set_config+0xe4>)
    ef32:	4798      	blx	r3
    ef34:	4603      	mov	r3, r0
    ef36:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    ef38:	68fb      	ldr	r3, [r7, #12]
    ef3a:	2b00      	cmp	r3, #0
    ef3c:	d1cf      	bne.n	eede <usbdc_set_config+0x6a>
	}
	return true;
    ef3e:	2301      	movs	r3, #1
}
    ef40:	4618      	mov	r0, r3
    ef42:	3720      	adds	r7, #32
    ef44:	46bd      	mov	sp, r7
    ef46:	bd80      	pop	{r7, pc}
    ef48:	0000ee41 	.word	0x0000ee41
    ef4c:	20002560 	.word	0x20002560
    ef50:	0000f7e5 	.word	0x0000f7e5
    ef54:	0000e991 	.word	0x0000e991
    ef58:	0000f725 	.word	0x0000f725
    ef5c:	0000e96d 	.word	0x0000e96d

0000ef60 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ef60:	b580      	push	{r7, lr}
    ef62:	b082      	sub	sp, #8
    ef64:	af00      	add	r7, sp, #0
    ef66:	4603      	mov	r3, r0
    ef68:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    ef6a:	79fb      	ldrb	r3, [r7, #7]
    ef6c:	4618      	mov	r0, r3
    ef6e:	4b03      	ldr	r3, [pc, #12]	; (ef7c <usbdc_set_address+0x1c>)
    ef70:	4798      	blx	r3
}
    ef72:	bf00      	nop
    ef74:	3708      	adds	r7, #8
    ef76:	46bd      	mov	sp, r7
    ef78:	bd80      	pop	{r7, pc}
    ef7a:	bf00      	nop
    ef7c:	00005ad5 	.word	0x00005ad5

0000ef80 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ef80:	b590      	push	{r4, r7, lr}
    ef82:	b087      	sub	sp, #28
    ef84:	af00      	add	r7, sp, #0
    ef86:	4603      	mov	r3, r0
    ef88:	460a      	mov	r2, r1
    ef8a:	80fb      	strh	r3, [r7, #6]
    ef8c:	4613      	mov	r3, r2
    ef8e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ef90:	2300      	movs	r3, #0
    ef92:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ef94:	693b      	ldr	r3, [r7, #16]
    ef96:	2b00      	cmp	r3, #0
    ef98:	d10b      	bne.n	efb2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ef9a:	4b43      	ldr	r3, [pc, #268]	; (f0a8 <usbdc_set_interface+0x128>)
    ef9c:	681b      	ldr	r3, [r3, #0]
    ef9e:	6818      	ldr	r0, [r3, #0]
    efa0:	4b41      	ldr	r3, [pc, #260]	; (f0a8 <usbdc_set_interface+0x128>)
    efa2:	681b      	ldr	r3, [r3, #0]
    efa4:	6859      	ldr	r1, [r3, #4]
    efa6:	4b40      	ldr	r3, [pc, #256]	; (f0a8 <usbdc_set_interface+0x128>)
    efa8:	7edb      	ldrb	r3, [r3, #27]
    efaa:	461a      	mov	r2, r3
    efac:	4b3f      	ldr	r3, [pc, #252]	; (f0ac <usbdc_set_interface+0x12c>)
    efae:	4798      	blx	r3
    efb0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    efb2:	693b      	ldr	r3, [r7, #16]
    efb4:	2b00      	cmp	r3, #0
    efb6:	d101      	bne.n	efbc <usbdc_set_interface+0x3c>
		return false;
    efb8:	2300      	movs	r3, #0
    efba:	e071      	b.n	f0a0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    efbc:	693b      	ldr	r3, [r7, #16]
    efbe:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    efc0:	6938      	ldr	r0, [r7, #16]
    efc2:	4b3b      	ldr	r3, [pc, #236]	; (f0b0 <usbdc_set_interface+0x130>)
    efc4:	4798      	blx	r3
    efc6:	4603      	mov	r3, r0
    efc8:	461a      	mov	r2, r3
    efca:	693b      	ldr	r3, [r7, #16]
    efcc:	4413      	add	r3, r2
    efce:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    efd0:	68bb      	ldr	r3, [r7, #8]
    efd2:	68f9      	ldr	r1, [r7, #12]
    efd4:	2204      	movs	r2, #4
    efd6:	4618      	mov	r0, r3
    efd8:	4b36      	ldr	r3, [pc, #216]	; (f0b4 <usbdc_set_interface+0x134>)
    efda:	4798      	blx	r3
    efdc:	6138      	str	r0, [r7, #16]
    efde:	693b      	ldr	r3, [r7, #16]
    efe0:	2b00      	cmp	r3, #0
    efe2:	d113      	bne.n	f00c <usbdc_set_interface+0x8c>
		return false;
    efe4:	2300      	movs	r3, #0
    efe6:	e05b      	b.n	f0a0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    efe8:	68bb      	ldr	r3, [r7, #8]
    efea:	4618      	mov	r0, r3
    efec:	4b32      	ldr	r3, [pc, #200]	; (f0b8 <usbdc_set_interface+0x138>)
    efee:	4798      	blx	r3
    eff0:	4603      	mov	r3, r0
    eff2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    eff4:	68bb      	ldr	r3, [r7, #8]
    eff6:	68f9      	ldr	r1, [r7, #12]
    eff8:	2204      	movs	r2, #4
    effa:	4618      	mov	r0, r3
    effc:	4b2d      	ldr	r3, [pc, #180]	; (f0b4 <usbdc_set_interface+0x134>)
    effe:	4798      	blx	r3
    f000:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    f002:	693b      	ldr	r3, [r7, #16]
    f004:	2b00      	cmp	r3, #0
    f006:	d101      	bne.n	f00c <usbdc_set_interface+0x8c>
			return false;
    f008:	2300      	movs	r3, #0
    f00a:	e049      	b.n	f0a0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    f00c:	693b      	ldr	r3, [r7, #16]
    f00e:	3302      	adds	r3, #2
    f010:	781b      	ldrb	r3, [r3, #0]
    f012:	b29b      	uxth	r3, r3
    f014:	88ba      	ldrh	r2, [r7, #4]
    f016:	429a      	cmp	r2, r3
    f018:	d1e6      	bne.n	efe8 <usbdc_set_interface+0x68>
    f01a:	693b      	ldr	r3, [r7, #16]
    f01c:	3303      	adds	r3, #3
    f01e:	781b      	ldrb	r3, [r3, #0]
    f020:	b29b      	uxth	r3, r3
    f022:	88fa      	ldrh	r2, [r7, #6]
    f024:	429a      	cmp	r2, r3
    f026:	d1df      	bne.n	efe8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    f028:	693b      	ldr	r3, [r7, #16]
    f02a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    f02c:	4b1e      	ldr	r3, [pc, #120]	; (f0a8 <usbdc_set_interface+0x128>)
    f02e:	691b      	ldr	r3, [r3, #16]
    f030:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    f032:	e031      	b.n	f098 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    f034:	697b      	ldr	r3, [r7, #20]
    f036:	685b      	ldr	r3, [r3, #4]
    f038:	f107 0208 	add.w	r2, r7, #8
    f03c:	2101      	movs	r1, #1
    f03e:	6978      	ldr	r0, [r7, #20]
    f040:	4798      	blx	r3
    f042:	4603      	mov	r3, r0
    f044:	2b00      	cmp	r3, #0
    f046:	d003      	beq.n	f050 <usbdc_set_interface+0xd0>
			func = func->next;
    f048:	697b      	ldr	r3, [r7, #20]
    f04a:	681b      	ldr	r3, [r3, #0]
    f04c:	617b      	str	r3, [r7, #20]
    f04e:	e023      	b.n	f098 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    f050:	697b      	ldr	r3, [r7, #20]
    f052:	685b      	ldr	r3, [r3, #4]
    f054:	f107 0208 	add.w	r2, r7, #8
    f058:	2100      	movs	r1, #0
    f05a:	6978      	ldr	r0, [r7, #20]
    f05c:	4798      	blx	r3
    f05e:	4603      	mov	r3, r0
    f060:	2b00      	cmp	r3, #0
    f062:	d117      	bne.n	f094 <usbdc_set_interface+0x114>
			if (alt_set) {
    f064:	88fb      	ldrh	r3, [r7, #6]
    f066:	2b00      	cmp	r3, #0
    f068:	d00c      	beq.n	f084 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    f06a:	4b0f      	ldr	r3, [pc, #60]	; (f0a8 <usbdc_set_interface+0x128>)
    f06c:	7f5b      	ldrb	r3, [r3, #29]
    f06e:	b25a      	sxtb	r2, r3
    f070:	88bb      	ldrh	r3, [r7, #4]
    f072:	2101      	movs	r1, #1
    f074:	fa01 f303 	lsl.w	r3, r1, r3
    f078:	b25b      	sxtb	r3, r3
    f07a:	4313      	orrs	r3, r2
    f07c:	b25b      	sxtb	r3, r3
    f07e:	b2da      	uxtb	r2, r3
    f080:	4b09      	ldr	r3, [pc, #36]	; (f0a8 <usbdc_set_interface+0x128>)
    f082:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    f084:	2300      	movs	r3, #0
    f086:	2200      	movs	r2, #0
    f088:	2100      	movs	r1, #0
    f08a:	2000      	movs	r0, #0
    f08c:	4c0b      	ldr	r4, [pc, #44]	; (f0bc <usbdc_set_interface+0x13c>)
    f08e:	47a0      	blx	r4
			return true;
    f090:	2301      	movs	r3, #1
    f092:	e005      	b.n	f0a0 <usbdc_set_interface+0x120>
		} else {
			return false;
    f094:	2300      	movs	r3, #0
    f096:	e003      	b.n	f0a0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    f098:	697b      	ldr	r3, [r7, #20]
    f09a:	2b00      	cmp	r3, #0
    f09c:	d1ca      	bne.n	f034 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    f09e:	2300      	movs	r3, #0
}
    f0a0:	4618      	mov	r0, r3
    f0a2:	371c      	adds	r7, #28
    f0a4:	46bd      	mov	sp, r7
    f0a6:	bd90      	pop	{r4, r7, pc}
    f0a8:	20002560 	.word	0x20002560
    f0ac:	0000f7e5 	.word	0x0000f7e5
    f0b0:	0000e991 	.word	0x0000e991
    f0b4:	0000f725 	.word	0x0000f725
    f0b8:	0000e96d 	.word	0x0000e96d
    f0bc:	0000f495 	.word	0x0000f495

0000f0c0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    f0c0:	b590      	push	{r4, r7, lr}
    f0c2:	b083      	sub	sp, #12
    f0c4:	af00      	add	r7, sp, #0
    f0c6:	4603      	mov	r3, r0
    f0c8:	6039      	str	r1, [r7, #0]
    f0ca:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    f0cc:	683b      	ldr	r3, [r7, #0]
    f0ce:	785b      	ldrb	r3, [r3, #1]
    f0d0:	3b01      	subs	r3, #1
    f0d2:	2b0a      	cmp	r3, #10
    f0d4:	d85b      	bhi.n	f18e <usbdc_set_req+0xce>
    f0d6:	a201      	add	r2, pc, #4	; (adr r2, f0dc <usbdc_set_req+0x1c>)
    f0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f0dc:	0000f15b 	.word	0x0000f15b
    f0e0:	0000f18f 	.word	0x0000f18f
    f0e4:	0000f169 	.word	0x0000f169
    f0e8:	0000f18f 	.word	0x0000f18f
    f0ec:	0000f109 	.word	0x0000f109
    f0f0:	0000f18f 	.word	0x0000f18f
    f0f4:	0000f18f 	.word	0x0000f18f
    f0f8:	0000f18f 	.word	0x0000f18f
    f0fc:	0000f123 	.word	0x0000f123
    f100:	0000f18f 	.word	0x0000f18f
    f104:	0000f177 	.word	0x0000f177
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    f108:	79f8      	ldrb	r0, [r7, #7]
    f10a:	2301      	movs	r3, #1
    f10c:	2200      	movs	r2, #0
    f10e:	2100      	movs	r1, #0
    f110:	4c21      	ldr	r4, [pc, #132]	; (f198 <usbdc_set_req+0xd8>)
    f112:	47a0      	blx	r4
    f114:	4603      	mov	r3, r0
    f116:	2b00      	cmp	r3, #0
    f118:	bf0c      	ite	eq
    f11a:	2301      	moveq	r3, #1
    f11c:	2300      	movne	r3, #0
    f11e:	b2db      	uxtb	r3, r3
    f120:	e036      	b.n	f190 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    f122:	683b      	ldr	r3, [r7, #0]
    f124:	885b      	ldrh	r3, [r3, #2]
    f126:	b29b      	uxth	r3, r3
    f128:	b2db      	uxtb	r3, r3
    f12a:	4618      	mov	r0, r3
    f12c:	4b1b      	ldr	r3, [pc, #108]	; (f19c <usbdc_set_req+0xdc>)
    f12e:	4798      	blx	r3
    f130:	4603      	mov	r3, r0
    f132:	f083 0301 	eor.w	r3, r3, #1
    f136:	b2db      	uxtb	r3, r3
    f138:	2b00      	cmp	r3, #0
    f13a:	d001      	beq.n	f140 <usbdc_set_req+0x80>
			return false;
    f13c:	2300      	movs	r3, #0
    f13e:	e027      	b.n	f190 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    f140:	79f8      	ldrb	r0, [r7, #7]
    f142:	2301      	movs	r3, #1
    f144:	2200      	movs	r2, #0
    f146:	2100      	movs	r1, #0
    f148:	4c13      	ldr	r4, [pc, #76]	; (f198 <usbdc_set_req+0xd8>)
    f14a:	47a0      	blx	r4
    f14c:	4603      	mov	r3, r0
    f14e:	2b00      	cmp	r3, #0
    f150:	bf0c      	ite	eq
    f152:	2301      	moveq	r3, #1
    f154:	2300      	movne	r3, #0
    f156:	b2db      	uxtb	r3, r3
    f158:	e01a      	b.n	f190 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    f15a:	79fb      	ldrb	r3, [r7, #7]
    f15c:	6839      	ldr	r1, [r7, #0]
    f15e:	4618      	mov	r0, r3
    f160:	4b0f      	ldr	r3, [pc, #60]	; (f1a0 <usbdc_set_req+0xe0>)
    f162:	4798      	blx	r3
    f164:	4603      	mov	r3, r0
    f166:	e013      	b.n	f190 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    f168:	79fb      	ldrb	r3, [r7, #7]
    f16a:	6839      	ldr	r1, [r7, #0]
    f16c:	4618      	mov	r0, r3
    f16e:	4b0d      	ldr	r3, [pc, #52]	; (f1a4 <usbdc_set_req+0xe4>)
    f170:	4798      	blx	r3
    f172:	4603      	mov	r3, r0
    f174:	e00c      	b.n	f190 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    f176:	683b      	ldr	r3, [r7, #0]
    f178:	885b      	ldrh	r3, [r3, #2]
    f17a:	b29a      	uxth	r2, r3
    f17c:	683b      	ldr	r3, [r7, #0]
    f17e:	889b      	ldrh	r3, [r3, #4]
    f180:	b29b      	uxth	r3, r3
    f182:	4619      	mov	r1, r3
    f184:	4610      	mov	r0, r2
    f186:	4b08      	ldr	r3, [pc, #32]	; (f1a8 <usbdc_set_req+0xe8>)
    f188:	4798      	blx	r3
    f18a:	4603      	mov	r3, r0
    f18c:	e000      	b.n	f190 <usbdc_set_req+0xd0>
	default:
		return false;
    f18e:	2300      	movs	r3, #0
	}
}
    f190:	4618      	mov	r0, r3
    f192:	370c      	adds	r7, #12
    f194:	46bd      	mov	sp, r7
    f196:	bd90      	pop	{r4, r7, pc}
    f198:	0000f495 	.word	0x0000f495
    f19c:	0000ee75 	.word	0x0000ee75
    f1a0:	0000ed91 	.word	0x0000ed91
    f1a4:	0000ede9 	.word	0x0000ede9
    f1a8:	0000ef81 	.word	0x0000ef81

0000f1ac <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    f1ac:	b580      	push	{r7, lr}
    f1ae:	b082      	sub	sp, #8
    f1b0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    f1b2:	4b0a      	ldr	r3, [pc, #40]	; (f1dc <usbdc_sof_notify+0x30>)
    f1b4:	685b      	ldr	r3, [r3, #4]
    f1b6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    f1b8:	e009      	b.n	f1ce <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    f1ba:	687b      	ldr	r3, [r7, #4]
    f1bc:	685b      	ldr	r3, [r3, #4]
    f1be:	2b00      	cmp	r3, #0
    f1c0:	d002      	beq.n	f1c8 <usbdc_sof_notify+0x1c>
			sof->cb();
    f1c2:	687b      	ldr	r3, [r7, #4]
    f1c4:	685b      	ldr	r3, [r3, #4]
    f1c6:	4798      	blx	r3
		}
		sof = sof->next;
    f1c8:	687b      	ldr	r3, [r7, #4]
    f1ca:	681b      	ldr	r3, [r3, #0]
    f1cc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    f1ce:	687b      	ldr	r3, [r7, #4]
    f1d0:	2b00      	cmp	r3, #0
    f1d2:	d1f2      	bne.n	f1ba <usbdc_sof_notify+0xe>
	}
}
    f1d4:	bf00      	nop
    f1d6:	3708      	adds	r7, #8
    f1d8:	46bd      	mov	sp, r7
    f1da:	bd80      	pop	{r7, pc}
    f1dc:	20002560 	.word	0x20002560

0000f1e0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    f1e0:	b580      	push	{r7, lr}
    f1e2:	b084      	sub	sp, #16
    f1e4:	af00      	add	r7, sp, #0
    f1e6:	4603      	mov	r3, r0
    f1e8:	6039      	str	r1, [r7, #0]
    f1ea:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    f1ec:	4b0b      	ldr	r3, [pc, #44]	; (f21c <usbdc_change_notify+0x3c>)
    f1ee:	68db      	ldr	r3, [r3, #12]
    f1f0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    f1f2:	e00c      	b.n	f20e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    f1f4:	68fb      	ldr	r3, [r7, #12]
    f1f6:	685b      	ldr	r3, [r3, #4]
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	d005      	beq.n	f208 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    f1fc:	68fb      	ldr	r3, [r7, #12]
    f1fe:	685b      	ldr	r3, [r3, #4]
    f200:	79fa      	ldrb	r2, [r7, #7]
    f202:	6839      	ldr	r1, [r7, #0]
    f204:	4610      	mov	r0, r2
    f206:	4798      	blx	r3
		}
		cg = cg->next;
    f208:	68fb      	ldr	r3, [r7, #12]
    f20a:	681b      	ldr	r3, [r3, #0]
    f20c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    f20e:	68fb      	ldr	r3, [r7, #12]
    f210:	2b00      	cmp	r3, #0
    f212:	d1ef      	bne.n	f1f4 <usbdc_change_notify+0x14>
	}
}
    f214:	bf00      	nop
    f216:	3710      	adds	r7, #16
    f218:	46bd      	mov	sp, r7
    f21a:	bd80      	pop	{r7, pc}
    f21c:	20002560 	.word	0x20002560

0000f220 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    f220:	b580      	push	{r7, lr}
    f222:	b084      	sub	sp, #16
    f224:	af00      	add	r7, sp, #0
    f226:	4603      	mov	r3, r0
    f228:	6039      	str	r1, [r7, #0]
    f22a:	71fb      	strb	r3, [r7, #7]
    f22c:	4613      	mov	r3, r2
    f22e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    f230:	4b12      	ldr	r3, [pc, #72]	; (f27c <usbdc_request_handler+0x5c>)
    f232:	689b      	ldr	r3, [r3, #8]
    f234:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    f236:	e019      	b.n	f26c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    f238:	68fb      	ldr	r3, [r7, #12]
    f23a:	685b      	ldr	r3, [r3, #4]
    f23c:	2b00      	cmp	r3, #0
    f23e:	d012      	beq.n	f266 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    f240:	68fb      	ldr	r3, [r7, #12]
    f242:	685b      	ldr	r3, [r3, #4]
    f244:	79ba      	ldrb	r2, [r7, #6]
    f246:	79f8      	ldrb	r0, [r7, #7]
    f248:	6839      	ldr	r1, [r7, #0]
    f24a:	4798      	blx	r3
    f24c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    f24e:	68bb      	ldr	r3, [r7, #8]
    f250:	2b00      	cmp	r3, #0
    f252:	d101      	bne.n	f258 <usbdc_request_handler+0x38>
				return true;
    f254:	2301      	movs	r3, #1
    f256:	e00d      	b.n	f274 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    f258:	68bb      	ldr	r3, [r7, #8]
    f25a:	f113 0f0a 	cmn.w	r3, #10
    f25e:	d002      	beq.n	f266 <usbdc_request_handler+0x46>
				return -1;
    f260:	f04f 33ff 	mov.w	r3, #4294967295
    f264:	e006      	b.n	f274 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    f266:	68fb      	ldr	r3, [r7, #12]
    f268:	681b      	ldr	r3, [r3, #0]
    f26a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    f26c:	68fb      	ldr	r3, [r7, #12]
    f26e:	2b00      	cmp	r3, #0
    f270:	d1e2      	bne.n	f238 <usbdc_request_handler+0x18>
	}
	return false;
    f272:	2300      	movs	r3, #0
}
    f274:	4618      	mov	r0, r3
    f276:	3710      	adds	r7, #16
    f278:	46bd      	mov	sp, r7
    f27a:	bd80      	pop	{r7, pc}
    f27c:	20002560 	.word	0x20002560

0000f280 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    f280:	b580      	push	{r7, lr}
    f282:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    f284:	4b01      	ldr	r3, [pc, #4]	; (f28c <usbd_sof_cb+0xc>)
    f286:	4798      	blx	r3
}
    f288:	bf00      	nop
    f28a:	bd80      	pop	{r7, pc}
    f28c:	0000f1ad 	.word	0x0000f1ad

0000f290 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    f290:	b580      	push	{r7, lr}
    f292:	b082      	sub	sp, #8
    f294:	af00      	add	r7, sp, #0
    f296:	4603      	mov	r3, r0
    f298:	6039      	str	r1, [r7, #0]
    f29a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    f29c:	79fb      	ldrb	r3, [r7, #7]
    f29e:	2200      	movs	r2, #0
    f2a0:	6839      	ldr	r1, [r7, #0]
    f2a2:	4618      	mov	r0, r3
    f2a4:	4b14      	ldr	r3, [pc, #80]	; (f2f8 <usbdc_cb_ctl_req+0x68>)
    f2a6:	4798      	blx	r3
    f2a8:	4603      	mov	r3, r0
    f2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    f2ae:	d00b      	beq.n	f2c8 <usbdc_cb_ctl_req+0x38>
    f2b0:	2b01      	cmp	r3, #1
    f2b2:	d007      	beq.n	f2c4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    f2b4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    f2b6:	683b      	ldr	r3, [r7, #0]
    f2b8:	781b      	ldrb	r3, [r3, #0]
    f2ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f2be:	2b00      	cmp	r3, #0
    f2c0:	d007      	beq.n	f2d2 <usbdc_cb_ctl_req+0x42>
    f2c2:	e003      	b.n	f2cc <usbdc_cb_ctl_req+0x3c>
		return true;
    f2c4:	2301      	movs	r3, #1
    f2c6:	e013      	b.n	f2f0 <usbdc_cb_ctl_req+0x60>
		return false;
    f2c8:	2300      	movs	r3, #0
    f2ca:	e011      	b.n	f2f0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    f2cc:	2b80      	cmp	r3, #128	; 0x80
    f2ce:	d007      	beq.n	f2e0 <usbdc_cb_ctl_req+0x50>
    f2d0:	e00d      	b.n	f2ee <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    f2d2:	79fb      	ldrb	r3, [r7, #7]
    f2d4:	6839      	ldr	r1, [r7, #0]
    f2d6:	4618      	mov	r0, r3
    f2d8:	4b08      	ldr	r3, [pc, #32]	; (f2fc <usbdc_cb_ctl_req+0x6c>)
    f2da:	4798      	blx	r3
    f2dc:	4603      	mov	r3, r0
    f2de:	e007      	b.n	f2f0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    f2e0:	79fb      	ldrb	r3, [r7, #7]
    f2e2:	6839      	ldr	r1, [r7, #0]
    f2e4:	4618      	mov	r0, r3
    f2e6:	4b06      	ldr	r3, [pc, #24]	; (f300 <usbdc_cb_ctl_req+0x70>)
    f2e8:	4798      	blx	r3
    f2ea:	4603      	mov	r3, r0
    f2ec:	e000      	b.n	f2f0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    f2ee:	2300      	movs	r3, #0
	}
}
    f2f0:	4618      	mov	r0, r3
    f2f2:	3708      	adds	r7, #8
    f2f4:	46bd      	mov	sp, r7
    f2f6:	bd80      	pop	{r7, pc}
    f2f8:	0000f221 	.word	0x0000f221
    f2fc:	0000f0c1 	.word	0x0000f0c1
    f300:	0000ece9 	.word	0x0000ece9

0000f304 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    f304:	b580      	push	{r7, lr}
    f306:	b082      	sub	sp, #8
    f308:	af00      	add	r7, sp, #0
    f30a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    f30c:	687b      	ldr	r3, [r7, #4]
    f30e:	781b      	ldrb	r3, [r3, #0]
    f310:	2b00      	cmp	r3, #0
    f312:	d135      	bne.n	f380 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    f314:	687b      	ldr	r3, [r7, #4]
    f316:	785b      	ldrb	r3, [r3, #1]
    f318:	2b05      	cmp	r3, #5
    f31a:	d019      	beq.n	f350 <usbdc_ctrl_status_end+0x4c>
    f31c:	2b09      	cmp	r3, #9
    f31e:	d000      	beq.n	f322 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    f320:	e02f      	b.n	f382 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	885b      	ldrh	r3, [r3, #2]
    f326:	b29b      	uxth	r3, r3
    f328:	b2da      	uxtb	r2, r3
    f32a:	4b17      	ldr	r3, [pc, #92]	; (f388 <usbdc_ctrl_status_end+0x84>)
    f32c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    f32e:	687b      	ldr	r3, [r7, #4]
    f330:	885b      	ldrh	r3, [r3, #2]
    f332:	b29b      	uxth	r3, r3
    f334:	2b00      	cmp	r3, #0
    f336:	d001      	beq.n	f33c <usbdc_ctrl_status_end+0x38>
    f338:	2204      	movs	r2, #4
    f33a:	e000      	b.n	f33e <usbdc_ctrl_status_end+0x3a>
    f33c:	2203      	movs	r2, #3
    f33e:	4b12      	ldr	r3, [pc, #72]	; (f388 <usbdc_ctrl_status_end+0x84>)
    f340:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    f342:	4b11      	ldr	r3, [pc, #68]	; (f388 <usbdc_ctrl_status_end+0x84>)
    f344:	7e9b      	ldrb	r3, [r3, #26]
    f346:	4619      	mov	r1, r3
    f348:	2001      	movs	r0, #1
    f34a:	4b10      	ldr	r3, [pc, #64]	; (f38c <usbdc_ctrl_status_end+0x88>)
    f34c:	4798      	blx	r3
		break;
    f34e:	e018      	b.n	f382 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    f350:	687b      	ldr	r3, [r7, #4]
    f352:	885b      	ldrh	r3, [r3, #2]
    f354:	b29b      	uxth	r3, r3
    f356:	b2db      	uxtb	r3, r3
    f358:	4618      	mov	r0, r3
    f35a:	4b0d      	ldr	r3, [pc, #52]	; (f390 <usbdc_ctrl_status_end+0x8c>)
    f35c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    f35e:	687b      	ldr	r3, [r7, #4]
    f360:	885b      	ldrh	r3, [r3, #2]
    f362:	b29b      	uxth	r3, r3
    f364:	2b00      	cmp	r3, #0
    f366:	d001      	beq.n	f36c <usbdc_ctrl_status_end+0x68>
    f368:	2203      	movs	r2, #3
    f36a:	e000      	b.n	f36e <usbdc_ctrl_status_end+0x6a>
    f36c:	2202      	movs	r2, #2
    f36e:	4b06      	ldr	r3, [pc, #24]	; (f388 <usbdc_ctrl_status_end+0x84>)
    f370:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    f372:	4b05      	ldr	r3, [pc, #20]	; (f388 <usbdc_ctrl_status_end+0x84>)
    f374:	7e9b      	ldrb	r3, [r3, #26]
    f376:	4619      	mov	r1, r3
    f378:	2001      	movs	r0, #1
    f37a:	4b04      	ldr	r3, [pc, #16]	; (f38c <usbdc_ctrl_status_end+0x88>)
    f37c:	4798      	blx	r3
		break;
    f37e:	e000      	b.n	f382 <usbdc_ctrl_status_end+0x7e>
		return;
    f380:	bf00      	nop
	}
}
    f382:	3708      	adds	r7, #8
    f384:	46bd      	mov	sp, r7
    f386:	bd80      	pop	{r7, pc}
    f388:	20002560 	.word	0x20002560
    f38c:	0000f1e1 	.word	0x0000f1e1
    f390:	0000ef61 	.word	0x0000ef61

0000f394 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    f394:	b580      	push	{r7, lr}
    f396:	b082      	sub	sp, #8
    f398:	af00      	add	r7, sp, #0
    f39a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    f39c:	2201      	movs	r2, #1
    f39e:	6879      	ldr	r1, [r7, #4]
    f3a0:	2000      	movs	r0, #0
    f3a2:	4b03      	ldr	r3, [pc, #12]	; (f3b0 <usbdc_ctrl_data_end+0x1c>)
    f3a4:	4798      	blx	r3
	return false;
    f3a6:	2300      	movs	r3, #0
}
    f3a8:	4618      	mov	r0, r3
    f3aa:	3708      	adds	r7, #8
    f3ac:	46bd      	mov	sp, r7
    f3ae:	bd80      	pop	{r7, pc}
    f3b0:	0000f221 	.word	0x0000f221

0000f3b4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    f3b4:	b580      	push	{r7, lr}
    f3b6:	b082      	sub	sp, #8
    f3b8:	af00      	add	r7, sp, #0
    f3ba:	4603      	mov	r3, r0
    f3bc:	603a      	str	r2, [r7, #0]
    f3be:	71fb      	strb	r3, [r7, #7]
    f3c0:	460b      	mov	r3, r1
    f3c2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    f3c4:	79bb      	ldrb	r3, [r7, #6]
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	d002      	beq.n	f3d0 <usbdc_cb_ctl_done+0x1c>
    f3ca:	2b01      	cmp	r3, #1
    f3cc:	d004      	beq.n	f3d8 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    f3ce:	e008      	b.n	f3e2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    f3d0:	6838      	ldr	r0, [r7, #0]
    f3d2:	4b06      	ldr	r3, [pc, #24]	; (f3ec <usbdc_cb_ctl_done+0x38>)
    f3d4:	4798      	blx	r3
		break;
    f3d6:	e004      	b.n	f3e2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    f3d8:	6838      	ldr	r0, [r7, #0]
    f3da:	4b05      	ldr	r3, [pc, #20]	; (f3f0 <usbdc_cb_ctl_done+0x3c>)
    f3dc:	4798      	blx	r3
    f3de:	4603      	mov	r3, r0
    f3e0:	e000      	b.n	f3e4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    f3e2:	2300      	movs	r3, #0
}
    f3e4:	4618      	mov	r0, r3
    f3e6:	3708      	adds	r7, #8
    f3e8:	46bd      	mov	sp, r7
    f3ea:	bd80      	pop	{r7, pc}
    f3ec:	0000f305 	.word	0x0000f305
    f3f0:	0000f395 	.word	0x0000f395

0000f3f4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    f3f4:	b580      	push	{r7, lr}
    f3f6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    f3f8:	4b10      	ldr	r3, [pc, #64]	; (f43c <usbdc_reset+0x48>)
    f3fa:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    f3fc:	4b10      	ldr	r3, [pc, #64]	; (f440 <usbdc_reset+0x4c>)
    f3fe:	2202      	movs	r2, #2
    f400:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    f402:	4b0f      	ldr	r3, [pc, #60]	; (f440 <usbdc_reset+0x4c>)
    f404:	2200      	movs	r2, #0
    f406:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    f408:	4b0d      	ldr	r3, [pc, #52]	; (f440 <usbdc_reset+0x4c>)
    f40a:	2200      	movs	r2, #0
    f40c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    f40e:	2000      	movs	r0, #0
    f410:	4b0c      	ldr	r3, [pc, #48]	; (f444 <usbdc_reset+0x50>)
    f412:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    f414:	4b0a      	ldr	r3, [pc, #40]	; (f440 <usbdc_reset+0x4c>)
    f416:	7f1b      	ldrb	r3, [r3, #28]
    f418:	4618      	mov	r0, r3
    f41a:	4b0b      	ldr	r3, [pc, #44]	; (f448 <usbdc_reset+0x54>)
    f41c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    f41e:	4a0b      	ldr	r2, [pc, #44]	; (f44c <usbdc_reset+0x58>)
    f420:	2100      	movs	r1, #0
    f422:	2000      	movs	r0, #0
    f424:	4b0a      	ldr	r3, [pc, #40]	; (f450 <usbdc_reset+0x5c>)
    f426:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    f428:	4a0a      	ldr	r2, [pc, #40]	; (f454 <usbdc_reset+0x60>)
    f42a:	2102      	movs	r1, #2
    f42c:	2000      	movs	r0, #0
    f42e:	4b08      	ldr	r3, [pc, #32]	; (f450 <usbdc_reset+0x5c>)
    f430:	4798      	blx	r3
	usb_d_ep_enable(0);
    f432:	2000      	movs	r0, #0
    f434:	4b08      	ldr	r3, [pc, #32]	; (f458 <usbdc_reset+0x64>)
    f436:	4798      	blx	r3
}
    f438:	bf00      	nop
    f43a:	bd80      	pop	{r7, pc}
    f43c:	0000ee41 	.word	0x0000ee41
    f440:	20002560 	.word	0x20002560
    f444:	00005bb9 	.word	0x00005bb9
    f448:	00005af5 	.word	0x00005af5
    f44c:	0000f291 	.word	0x0000f291
    f450:	00005f0d 	.word	0x00005f0d
    f454:	0000f3b5 	.word	0x0000f3b5
    f458:	00005c09 	.word	0x00005c09

0000f45c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    f45c:	b580      	push	{r7, lr}
    f45e:	b082      	sub	sp, #8
    f460:	af00      	add	r7, sp, #0
    f462:	4603      	mov	r3, r0
    f464:	6039      	str	r1, [r7, #0]
    f466:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    f468:	79fb      	ldrb	r3, [r7, #7]
    f46a:	2b00      	cmp	r3, #0
    f46c:	d002      	beq.n	f474 <usbd_event_cb+0x18>
    f46e:	2b01      	cmp	r3, #1
    f470:	d005      	beq.n	f47e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    f472:	e007      	b.n	f484 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    f474:	6839      	ldr	r1, [r7, #0]
    f476:	2000      	movs	r0, #0
    f478:	4b04      	ldr	r3, [pc, #16]	; (f48c <usbd_event_cb+0x30>)
    f47a:	4798      	blx	r3
		break;
    f47c:	e002      	b.n	f484 <usbd_event_cb+0x28>
		usbdc_reset();
    f47e:	4b04      	ldr	r3, [pc, #16]	; (f490 <usbd_event_cb+0x34>)
    f480:	4798      	blx	r3
		break;
    f482:	bf00      	nop
	}
}
    f484:	bf00      	nop
    f486:	3708      	adds	r7, #8
    f488:	46bd      	mov	sp, r7
    f48a:	bd80      	pop	{r7, pc}
    f48c:	0000f1e1 	.word	0x0000f1e1
    f490:	0000f3f5 	.word	0x0000f3f5

0000f494 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    f494:	b580      	push	{r7, lr}
    f496:	b088      	sub	sp, #32
    f498:	af00      	add	r7, sp, #0
    f49a:	60b9      	str	r1, [r7, #8]
    f49c:	607a      	str	r2, [r7, #4]
    f49e:	461a      	mov	r2, r3
    f4a0:	4603      	mov	r3, r0
    f4a2:	73fb      	strb	r3, [r7, #15]
    f4a4:	4613      	mov	r3, r2
    f4a6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    f4a8:	68bb      	ldr	r3, [r7, #8]
    f4aa:	617b      	str	r3, [r7, #20]
    f4ac:	687b      	ldr	r3, [r7, #4]
    f4ae:	61bb      	str	r3, [r7, #24]
    f4b0:	7bfb      	ldrb	r3, [r7, #15]
    f4b2:	773b      	strb	r3, [r7, #28]
    f4b4:	7bbb      	ldrb	r3, [r7, #14]
    f4b6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    f4b8:	f107 0314 	add.w	r3, r7, #20
    f4bc:	4618      	mov	r0, r3
    f4be:	4b03      	ldr	r3, [pc, #12]	; (f4cc <usbdc_xfer+0x38>)
    f4c0:	4798      	blx	r3
    f4c2:	4603      	mov	r3, r0
}
    f4c4:	4618      	mov	r0, r3
    f4c6:	3720      	adds	r7, #32
    f4c8:	46bd      	mov	sp, r7
    f4ca:	bd80      	pop	{r7, pc}
    f4cc:	00005c79 	.word	0x00005c79

0000f4d0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    f4d0:	b580      	push	{r7, lr}
    f4d2:	b082      	sub	sp, #8
    f4d4:	af00      	add	r7, sp, #0
    f4d6:	4603      	mov	r3, r0
    f4d8:	6039      	str	r1, [r7, #0]
    f4da:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    f4dc:	79fb      	ldrb	r3, [r7, #7]
    f4de:	2b01      	cmp	r3, #1
    f4e0:	d009      	beq.n	f4f6 <usbdc_register_handler+0x26>
    f4e2:	2b02      	cmp	r3, #2
    f4e4:	d00c      	beq.n	f500 <usbdc_register_handler+0x30>
    f4e6:	2b00      	cmp	r3, #0
    f4e8:	d000      	beq.n	f4ec <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    f4ea:	e00e      	b.n	f50a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    f4ec:	6839      	ldr	r1, [r7, #0]
    f4ee:	4809      	ldr	r0, [pc, #36]	; (f514 <usbdc_register_handler+0x44>)
    f4f0:	4b09      	ldr	r3, [pc, #36]	; (f518 <usbdc_register_handler+0x48>)
    f4f2:	4798      	blx	r3
		break;
    f4f4:	e009      	b.n	f50a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    f4f6:	6839      	ldr	r1, [r7, #0]
    f4f8:	4808      	ldr	r0, [pc, #32]	; (f51c <usbdc_register_handler+0x4c>)
    f4fa:	4b07      	ldr	r3, [pc, #28]	; (f518 <usbdc_register_handler+0x48>)
    f4fc:	4798      	blx	r3
		break;
    f4fe:	e004      	b.n	f50a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    f500:	6839      	ldr	r1, [r7, #0]
    f502:	4807      	ldr	r0, [pc, #28]	; (f520 <usbdc_register_handler+0x50>)
    f504:	4b04      	ldr	r3, [pc, #16]	; (f518 <usbdc_register_handler+0x48>)
    f506:	4798      	blx	r3
		break;
    f508:	bf00      	nop
	}
}
    f50a:	bf00      	nop
    f50c:	3708      	adds	r7, #8
    f50e:	46bd      	mov	sp, r7
    f510:	bd80      	pop	{r7, pc}
    f512:	bf00      	nop
    f514:	20002564 	.word	0x20002564
    f518:	00006065 	.word	0x00006065
    f51c:	20002568 	.word	0x20002568
    f520:	2000256c 	.word	0x2000256c

0000f524 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    f524:	b580      	push	{r7, lr}
    f526:	b084      	sub	sp, #16
    f528:	af00      	add	r7, sp, #0
    f52a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    f52c:	687b      	ldr	r3, [r7, #4]
    f52e:	2b00      	cmp	r3, #0
    f530:	bf14      	ite	ne
    f532:	2301      	movne	r3, #1
    f534:	2300      	moveq	r3, #0
    f536:	b2db      	uxtb	r3, r3
    f538:	f240 3255 	movw	r2, #853	; 0x355
    f53c:	4910      	ldr	r1, [pc, #64]	; (f580 <usbdc_init+0x5c>)
    f53e:	4618      	mov	r0, r3
    f540:	4b10      	ldr	r3, [pc, #64]	; (f584 <usbdc_init+0x60>)
    f542:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    f544:	4b10      	ldr	r3, [pc, #64]	; (f588 <usbdc_init+0x64>)
    f546:	4798      	blx	r3
    f548:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    f54a:	68fb      	ldr	r3, [r7, #12]
    f54c:	2b00      	cmp	r3, #0
    f54e:	da01      	bge.n	f554 <usbdc_init+0x30>
		return rc;
    f550:	68fb      	ldr	r3, [r7, #12]
    f552:	e010      	b.n	f576 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    f554:	2220      	movs	r2, #32
    f556:	2100      	movs	r1, #0
    f558:	480c      	ldr	r0, [pc, #48]	; (f58c <usbdc_init+0x68>)
    f55a:	4b0d      	ldr	r3, [pc, #52]	; (f590 <usbdc_init+0x6c>)
    f55c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    f55e:	4a0b      	ldr	r2, [pc, #44]	; (f58c <usbdc_init+0x68>)
    f560:	687b      	ldr	r3, [r7, #4]
    f562:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    f564:	490b      	ldr	r1, [pc, #44]	; (f594 <usbdc_init+0x70>)
    f566:	2000      	movs	r0, #0
    f568:	4b0b      	ldr	r3, [pc, #44]	; (f598 <usbdc_init+0x74>)
    f56a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    f56c:	490b      	ldr	r1, [pc, #44]	; (f59c <usbdc_init+0x78>)
    f56e:	2001      	movs	r0, #1
    f570:	4b09      	ldr	r3, [pc, #36]	; (f598 <usbdc_init+0x74>)
    f572:	4798      	blx	r3

	return 0;
    f574:	2300      	movs	r3, #0
}
    f576:	4618      	mov	r0, r3
    f578:	3710      	adds	r7, #16
    f57a:	46bd      	mov	sp, r7
    f57c:	bd80      	pop	{r7, pc}
    f57e:	bf00      	nop
    f580:	0001299c 	.word	0x0001299c
    f584:	00005f89 	.word	0x00005f89
    f588:	000059e1 	.word	0x000059e1
    f58c:	20002560 	.word	0x20002560
    f590:	00011535 	.word	0x00011535
    f594:	0000f281 	.word	0x0000f281
    f598:	00005a8d 	.word	0x00005a8d
    f59c:	0000f45d 	.word	0x0000f45d

0000f5a0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    f5a0:	b580      	push	{r7, lr}
    f5a2:	b082      	sub	sp, #8
    f5a4:	af00      	add	r7, sp, #0
    f5a6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    f5a8:	6879      	ldr	r1, [r7, #4]
    f5aa:	4803      	ldr	r0, [pc, #12]	; (f5b8 <usbdc_register_function+0x18>)
    f5ac:	4b03      	ldr	r3, [pc, #12]	; (f5bc <usbdc_register_function+0x1c>)
    f5ae:	4798      	blx	r3
}
    f5b0:	bf00      	nop
    f5b2:	3708      	adds	r7, #8
    f5b4:	46bd      	mov	sp, r7
    f5b6:	bd80      	pop	{r7, pc}
    f5b8:	20002570 	.word	0x20002570
    f5bc:	00006065 	.word	0x00006065

0000f5c0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    f5c0:	b580      	push	{r7, lr}
    f5c2:	b082      	sub	sp, #8
    f5c4:	af00      	add	r7, sp, #0
    f5c6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    f5c8:	4b0f      	ldr	r3, [pc, #60]	; (f608 <usbdc_start+0x48>)
    f5ca:	7e9b      	ldrb	r3, [r3, #26]
    f5cc:	2b00      	cmp	r3, #0
    f5ce:	d002      	beq.n	f5d6 <usbdc_start+0x16>
		return ERR_BUSY;
    f5d0:	f06f 0303 	mvn.w	r3, #3
    f5d4:	e013      	b.n	f5fe <usbdc_start+0x3e>
	}

	if (desces) {
    f5d6:	687b      	ldr	r3, [r7, #4]
    f5d8:	2b00      	cmp	r3, #0
    f5da:	d00e      	beq.n	f5fa <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    f5dc:	4a0a      	ldr	r2, [pc, #40]	; (f608 <usbdc_start+0x48>)
    f5de:	687b      	ldr	r3, [r7, #4]
    f5e0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    f5e2:	687b      	ldr	r3, [r7, #4]
    f5e4:	681b      	ldr	r3, [r3, #0]
    f5e6:	79da      	ldrb	r2, [r3, #7]
    f5e8:	4b07      	ldr	r3, [pc, #28]	; (f608 <usbdc_start+0x48>)
    f5ea:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    f5ec:	4b06      	ldr	r3, [pc, #24]	; (f608 <usbdc_start+0x48>)
    f5ee:	2201      	movs	r2, #1
    f5f0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    f5f2:	4b06      	ldr	r3, [pc, #24]	; (f60c <usbdc_start+0x4c>)
    f5f4:	4798      	blx	r3
	return ERR_NONE;
    f5f6:	2300      	movs	r3, #0
    f5f8:	e001      	b.n	f5fe <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    f5fa:	f06f 0308 	mvn.w	r3, #8
}
    f5fe:	4618      	mov	r0, r3
    f600:	3708      	adds	r7, #8
    f602:	46bd      	mov	sp, r7
    f604:	bd80      	pop	{r7, pc}
    f606:	bf00      	nop
    f608:	20002560 	.word	0x20002560
    f60c:	00005ab1 	.word	0x00005ab1

0000f610 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    f610:	b580      	push	{r7, lr}
    f612:	af00      	add	r7, sp, #0
	usb_d_attach();
    f614:	4b01      	ldr	r3, [pc, #4]	; (f61c <usbdc_attach+0xc>)
    f616:	4798      	blx	r3
}
    f618:	bf00      	nop
    f61a:	bd80      	pop	{r7, pc}
    f61c:	00005ac5 	.word	0x00005ac5

0000f620 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    f620:	b480      	push	{r7}
    f622:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    f624:	4b03      	ldr	r3, [pc, #12]	; (f634 <usbdc_get_ctrl_buffer+0x14>)
    f626:	695b      	ldr	r3, [r3, #20]
}
    f628:	4618      	mov	r0, r3
    f62a:	46bd      	mov	sp, r7
    f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f630:	4770      	bx	lr
    f632:	bf00      	nop
    f634:	20002560 	.word	0x20002560

0000f638 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    f638:	b480      	push	{r7}
    f63a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    f63c:	4b07      	ldr	r3, [pc, #28]	; (f65c <usbdc_get_state+0x24>)
    f63e:	7e9b      	ldrb	r3, [r3, #26]
    f640:	f003 0310 	and.w	r3, r3, #16
    f644:	2b00      	cmp	r3, #0
    f646:	d001      	beq.n	f64c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    f648:	2310      	movs	r3, #16
    f64a:	e001      	b.n	f650 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    f64c:	4b03      	ldr	r3, [pc, #12]	; (f65c <usbdc_get_state+0x24>)
    f64e:	7e9b      	ldrb	r3, [r3, #26]
}
    f650:	4618      	mov	r0, r3
    f652:	46bd      	mov	sp, r7
    f654:	f85d 7b04 	ldr.w	r7, [sp], #4
    f658:	4770      	bx	lr
    f65a:	bf00      	nop
    f65c:	20002560 	.word	0x20002560

0000f660 <usb_get_u16>:
{
    f660:	b480      	push	{r7}
    f662:	b083      	sub	sp, #12
    f664:	af00      	add	r7, sp, #0
    f666:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    f668:	687b      	ldr	r3, [r7, #4]
    f66a:	781b      	ldrb	r3, [r3, #0]
    f66c:	b29a      	uxth	r2, r3
    f66e:	687b      	ldr	r3, [r7, #4]
    f670:	3301      	adds	r3, #1
    f672:	781b      	ldrb	r3, [r3, #0]
    f674:	b29b      	uxth	r3, r3
    f676:	021b      	lsls	r3, r3, #8
    f678:	b29b      	uxth	r3, r3
    f67a:	4413      	add	r3, r2
    f67c:	b29b      	uxth	r3, r3
}
    f67e:	4618      	mov	r0, r3
    f680:	370c      	adds	r7, #12
    f682:	46bd      	mov	sp, r7
    f684:	f85d 7b04 	ldr.w	r7, [sp], #4
    f688:	4770      	bx	lr

0000f68a <usb_desc_len>:
{
    f68a:	b480      	push	{r7}
    f68c:	b083      	sub	sp, #12
    f68e:	af00      	add	r7, sp, #0
    f690:	6078      	str	r0, [r7, #4]
	return desc[0];
    f692:	687b      	ldr	r3, [r7, #4]
    f694:	781b      	ldrb	r3, [r3, #0]
}
    f696:	4618      	mov	r0, r3
    f698:	370c      	adds	r7, #12
    f69a:	46bd      	mov	sp, r7
    f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f6a0:	4770      	bx	lr

0000f6a2 <usb_desc_type>:
{
    f6a2:	b480      	push	{r7}
    f6a4:	b083      	sub	sp, #12
    f6a6:	af00      	add	r7, sp, #0
    f6a8:	6078      	str	r0, [r7, #4]
	return desc[1];
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	3301      	adds	r3, #1
    f6ae:	781b      	ldrb	r3, [r3, #0]
}
    f6b0:	4618      	mov	r0, r3
    f6b2:	370c      	adds	r7, #12
    f6b4:	46bd      	mov	sp, r7
    f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    f6ba:	4770      	bx	lr

0000f6bc <usb_desc_next>:
{
    f6bc:	b580      	push	{r7, lr}
    f6be:	b082      	sub	sp, #8
    f6c0:	af00      	add	r7, sp, #0
    f6c2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    f6c4:	6878      	ldr	r0, [r7, #4]
    f6c6:	4b05      	ldr	r3, [pc, #20]	; (f6dc <usb_desc_next+0x20>)
    f6c8:	4798      	blx	r3
    f6ca:	4603      	mov	r3, r0
    f6cc:	461a      	mov	r2, r3
    f6ce:	687b      	ldr	r3, [r7, #4]
    f6d0:	4413      	add	r3, r2
}
    f6d2:	4618      	mov	r0, r3
    f6d4:	3708      	adds	r7, #8
    f6d6:	46bd      	mov	sp, r7
    f6d8:	bd80      	pop	{r7, pc}
    f6da:	bf00      	nop
    f6dc:	0000f68b 	.word	0x0000f68b

0000f6e0 <usb_cfg_desc_total_len>:
{
    f6e0:	b580      	push	{r7, lr}
    f6e2:	b082      	sub	sp, #8
    f6e4:	af00      	add	r7, sp, #0
    f6e6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    f6e8:	687b      	ldr	r3, [r7, #4]
    f6ea:	3302      	adds	r3, #2
    f6ec:	4618      	mov	r0, r3
    f6ee:	4b03      	ldr	r3, [pc, #12]	; (f6fc <usb_cfg_desc_total_len+0x1c>)
    f6f0:	4798      	blx	r3
    f6f2:	4603      	mov	r3, r0
}
    f6f4:	4618      	mov	r0, r3
    f6f6:	3708      	adds	r7, #8
    f6f8:	46bd      	mov	sp, r7
    f6fa:	bd80      	pop	{r7, pc}
    f6fc:	0000f661 	.word	0x0000f661

0000f700 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    f700:	b580      	push	{r7, lr}
    f702:	b082      	sub	sp, #8
    f704:	af00      	add	r7, sp, #0
    f706:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    f708:	6878      	ldr	r0, [r7, #4]
    f70a:	4b05      	ldr	r3, [pc, #20]	; (f720 <usb_cfg_desc_next+0x20>)
    f70c:	4798      	blx	r3
    f70e:	4603      	mov	r3, r0
    f710:	461a      	mov	r2, r3
    f712:	687b      	ldr	r3, [r7, #4]
    f714:	4413      	add	r3, r2
}
    f716:	4618      	mov	r0, r3
    f718:	3708      	adds	r7, #8
    f71a:	46bd      	mov	sp, r7
    f71c:	bd80      	pop	{r7, pc}
    f71e:	bf00      	nop
    f720:	0000f6e1 	.word	0x0000f6e1

0000f724 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    f724:	b580      	push	{r7, lr}
    f726:	b084      	sub	sp, #16
    f728:	af00      	add	r7, sp, #0
    f72a:	60f8      	str	r0, [r7, #12]
    f72c:	60b9      	str	r1, [r7, #8]
    f72e:	4613      	mov	r3, r2
    f730:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f732:	e015      	b.n	f760 <usb_find_desc+0x3c>
		_desc_len_check();
    f734:	68f8      	ldr	r0, [r7, #12]
    f736:	4b0f      	ldr	r3, [pc, #60]	; (f774 <usb_find_desc+0x50>)
    f738:	4798      	blx	r3
    f73a:	4603      	mov	r3, r0
    f73c:	2b01      	cmp	r3, #1
    f73e:	d801      	bhi.n	f744 <usb_find_desc+0x20>
    f740:	2300      	movs	r3, #0
    f742:	e012      	b.n	f76a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    f744:	68f8      	ldr	r0, [r7, #12]
    f746:	4b0c      	ldr	r3, [pc, #48]	; (f778 <usb_find_desc+0x54>)
    f748:	4798      	blx	r3
    f74a:	4603      	mov	r3, r0
    f74c:	461a      	mov	r2, r3
    f74e:	79fb      	ldrb	r3, [r7, #7]
    f750:	4293      	cmp	r3, r2
    f752:	d101      	bne.n	f758 <usb_find_desc+0x34>
			return desc;
    f754:	68fb      	ldr	r3, [r7, #12]
    f756:	e008      	b.n	f76a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    f758:	68f8      	ldr	r0, [r7, #12]
    f75a:	4b08      	ldr	r3, [pc, #32]	; (f77c <usb_find_desc+0x58>)
    f75c:	4798      	blx	r3
    f75e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    f760:	68fa      	ldr	r2, [r7, #12]
    f762:	68bb      	ldr	r3, [r7, #8]
    f764:	429a      	cmp	r2, r3
    f766:	d3e5      	bcc.n	f734 <usb_find_desc+0x10>
	}
	return NULL;
    f768:	2300      	movs	r3, #0
}
    f76a:	4618      	mov	r0, r3
    f76c:	3710      	adds	r7, #16
    f76e:	46bd      	mov	sp, r7
    f770:	bd80      	pop	{r7, pc}
    f772:	bf00      	nop
    f774:	0000f68b 	.word	0x0000f68b
    f778:	0000f6a3 	.word	0x0000f6a3
    f77c:	0000f6bd 	.word	0x0000f6bd

0000f780 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    f780:	b580      	push	{r7, lr}
    f782:	b082      	sub	sp, #8
    f784:	af00      	add	r7, sp, #0
    f786:	6078      	str	r0, [r7, #4]
    f788:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f78a:	e019      	b.n	f7c0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    f78c:	6878      	ldr	r0, [r7, #4]
    f78e:	4b12      	ldr	r3, [pc, #72]	; (f7d8 <usb_find_ep_desc+0x58>)
    f790:	4798      	blx	r3
    f792:	4603      	mov	r3, r0
    f794:	2b01      	cmp	r3, #1
    f796:	d801      	bhi.n	f79c <usb_find_ep_desc+0x1c>
    f798:	2300      	movs	r3, #0
    f79a:	e018      	b.n	f7ce <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    f79c:	6878      	ldr	r0, [r7, #4]
    f79e:	4b0f      	ldr	r3, [pc, #60]	; (f7dc <usb_find_ep_desc+0x5c>)
    f7a0:	4798      	blx	r3
    f7a2:	4603      	mov	r3, r0
    f7a4:	2b04      	cmp	r3, #4
    f7a6:	d010      	beq.n	f7ca <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    f7a8:	6878      	ldr	r0, [r7, #4]
    f7aa:	4b0c      	ldr	r3, [pc, #48]	; (f7dc <usb_find_ep_desc+0x5c>)
    f7ac:	4798      	blx	r3
    f7ae:	4603      	mov	r3, r0
    f7b0:	2b05      	cmp	r3, #5
    f7b2:	d101      	bne.n	f7b8 <usb_find_ep_desc+0x38>
			return desc;
    f7b4:	687b      	ldr	r3, [r7, #4]
    f7b6:	e00a      	b.n	f7ce <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    f7b8:	6878      	ldr	r0, [r7, #4]
    f7ba:	4b09      	ldr	r3, [pc, #36]	; (f7e0 <usb_find_ep_desc+0x60>)
    f7bc:	4798      	blx	r3
    f7be:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    f7c0:	687a      	ldr	r2, [r7, #4]
    f7c2:	683b      	ldr	r3, [r7, #0]
    f7c4:	429a      	cmp	r2, r3
    f7c6:	d3e1      	bcc.n	f78c <usb_find_ep_desc+0xc>
    f7c8:	e000      	b.n	f7cc <usb_find_ep_desc+0x4c>
			break;
    f7ca:	bf00      	nop
	}
	return NULL;
    f7cc:	2300      	movs	r3, #0
}
    f7ce:	4618      	mov	r0, r3
    f7d0:	3708      	adds	r7, #8
    f7d2:	46bd      	mov	sp, r7
    f7d4:	bd80      	pop	{r7, pc}
    f7d6:	bf00      	nop
    f7d8:	0000f68b 	.word	0x0000f68b
    f7dc:	0000f6a3 	.word	0x0000f6a3
    f7e0:	0000f6bd 	.word	0x0000f6bd

0000f7e4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    f7e4:	b580      	push	{r7, lr}
    f7e6:	b084      	sub	sp, #16
    f7e8:	af00      	add	r7, sp, #0
    f7ea:	60f8      	str	r0, [r7, #12]
    f7ec:	60b9      	str	r1, [r7, #8]
    f7ee:	4613      	mov	r3, r2
    f7f0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    f7f2:	2202      	movs	r2, #2
    f7f4:	68b9      	ldr	r1, [r7, #8]
    f7f6:	68f8      	ldr	r0, [r7, #12]
    f7f8:	4b15      	ldr	r3, [pc, #84]	; (f850 <usb_find_cfg_desc+0x6c>)
    f7fa:	4798      	blx	r3
    f7fc:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    f7fe:	68fb      	ldr	r3, [r7, #12]
    f800:	2b00      	cmp	r3, #0
    f802:	d11a      	bne.n	f83a <usb_find_cfg_desc+0x56>
		return NULL;
    f804:	2300      	movs	r3, #0
    f806:	e01f      	b.n	f848 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    f808:	68f8      	ldr	r0, [r7, #12]
    f80a:	4b12      	ldr	r3, [pc, #72]	; (f854 <usb_find_cfg_desc+0x70>)
    f80c:	4798      	blx	r3
    f80e:	4603      	mov	r3, r0
    f810:	2b01      	cmp	r3, #1
    f812:	d801      	bhi.n	f818 <usb_find_cfg_desc+0x34>
    f814:	2300      	movs	r3, #0
    f816:	e017      	b.n	f848 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    f818:	68fb      	ldr	r3, [r7, #12]
    f81a:	3301      	adds	r3, #1
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	2b02      	cmp	r3, #2
    f820:	d110      	bne.n	f844 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    f822:	68fb      	ldr	r3, [r7, #12]
    f824:	3305      	adds	r3, #5
    f826:	781b      	ldrb	r3, [r3, #0]
    f828:	79fa      	ldrb	r2, [r7, #7]
    f82a:	429a      	cmp	r2, r3
    f82c:	d101      	bne.n	f832 <usb_find_cfg_desc+0x4e>
			return desc;
    f82e:	68fb      	ldr	r3, [r7, #12]
    f830:	e00a      	b.n	f848 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    f832:	68f8      	ldr	r0, [r7, #12]
    f834:	4b08      	ldr	r3, [pc, #32]	; (f858 <usb_find_cfg_desc+0x74>)
    f836:	4798      	blx	r3
    f838:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    f83a:	68fa      	ldr	r2, [r7, #12]
    f83c:	68bb      	ldr	r3, [r7, #8]
    f83e:	429a      	cmp	r2, r3
    f840:	d3e2      	bcc.n	f808 <usb_find_cfg_desc+0x24>
    f842:	e000      	b.n	f846 <usb_find_cfg_desc+0x62>
			break;
    f844:	bf00      	nop
	}
	return NULL;
    f846:	2300      	movs	r3, #0
}
    f848:	4618      	mov	r0, r3
    f84a:	3710      	adds	r7, #16
    f84c:	46bd      	mov	sp, r7
    f84e:	bd80      	pop	{r7, pc}
    f850:	0000f725 	.word	0x0000f725
    f854:	0000f68b 	.word	0x0000f68b
    f858:	0000f701 	.word	0x0000f701

0000f85c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    f85c:	b580      	push	{r7, lr}
    f85e:	b086      	sub	sp, #24
    f860:	af00      	add	r7, sp, #0
    f862:	60f8      	str	r0, [r7, #12]
    f864:	60b9      	str	r1, [r7, #8]
    f866:	4613      	mov	r3, r2
    f868:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    f86a:	2300      	movs	r3, #0
    f86c:	75fb      	strb	r3, [r7, #23]
    f86e:	e020      	b.n	f8b2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    f870:	2203      	movs	r2, #3
    f872:	68b9      	ldr	r1, [r7, #8]
    f874:	68f8      	ldr	r0, [r7, #12]
    f876:	4b13      	ldr	r3, [pc, #76]	; (f8c4 <usb_find_str_desc+0x68>)
    f878:	4798      	blx	r3
    f87a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    f87c:	68fb      	ldr	r3, [r7, #12]
    f87e:	2b00      	cmp	r3, #0
    f880:	d015      	beq.n	f8ae <usb_find_str_desc+0x52>
			_desc_len_check();
    f882:	68f8      	ldr	r0, [r7, #12]
    f884:	4b10      	ldr	r3, [pc, #64]	; (f8c8 <usb_find_str_desc+0x6c>)
    f886:	4798      	blx	r3
    f888:	4603      	mov	r3, r0
    f88a:	2b01      	cmp	r3, #1
    f88c:	d801      	bhi.n	f892 <usb_find_str_desc+0x36>
    f88e:	2300      	movs	r3, #0
    f890:	e014      	b.n	f8bc <usb_find_str_desc+0x60>
			if (i == str_index) {
    f892:	7dfa      	ldrb	r2, [r7, #23]
    f894:	79fb      	ldrb	r3, [r7, #7]
    f896:	429a      	cmp	r2, r3
    f898:	d101      	bne.n	f89e <usb_find_str_desc+0x42>
				return desc;
    f89a:	68fb      	ldr	r3, [r7, #12]
    f89c:	e00e      	b.n	f8bc <usb_find_str_desc+0x60>
			}
			i++;
    f89e:	7dfb      	ldrb	r3, [r7, #23]
    f8a0:	3301      	adds	r3, #1
    f8a2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    f8a4:	68f8      	ldr	r0, [r7, #12]
    f8a6:	4b09      	ldr	r3, [pc, #36]	; (f8cc <usb_find_str_desc+0x70>)
    f8a8:	4798      	blx	r3
    f8aa:	60f8      	str	r0, [r7, #12]
    f8ac:	e001      	b.n	f8b2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    f8ae:	2300      	movs	r3, #0
    f8b0:	e004      	b.n	f8bc <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    f8b2:	68fa      	ldr	r2, [r7, #12]
    f8b4:	68bb      	ldr	r3, [r7, #8]
    f8b6:	429a      	cmp	r2, r3
    f8b8:	d3da      	bcc.n	f870 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    f8ba:	2300      	movs	r3, #0
}
    f8bc:	4618      	mov	r0, r3
    f8be:	3718      	adds	r7, #24
    f8c0:	46bd      	mov	sp, r7
    f8c2:	bd80      	pop	{r7, pc}
    f8c4:	0000f725 	.word	0x0000f725
    f8c8:	0000f68b 	.word	0x0000f68b
    f8cc:	0000f6bd 	.word	0x0000f6bd

0000f8d0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    f8d0:	b580      	push	{r7, lr}
    f8d2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    f8d4:	4805      	ldr	r0, [pc, #20]	; (f8ec <cdc_device_acm_init+0x1c>)
    f8d6:	4b06      	ldr	r3, [pc, #24]	; (f8f0 <cdc_device_acm_init+0x20>)
    f8d8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    f8da:	4b06      	ldr	r3, [pc, #24]	; (f8f4 <cdc_device_acm_init+0x24>)
    f8dc:	4798      	blx	r3

	usbdc_start(single_desc);
    f8de:	4806      	ldr	r0, [pc, #24]	; (f8f8 <cdc_device_acm_init+0x28>)
    f8e0:	4b06      	ldr	r3, [pc, #24]	; (f8fc <cdc_device_acm_init+0x2c>)
    f8e2:	4798      	blx	r3
	usbdc_attach();
    f8e4:	4b06      	ldr	r3, [pc, #24]	; (f900 <cdc_device_acm_init+0x30>)
    f8e6:	4798      	blx	r3
}
    f8e8:	bf00      	nop
    f8ea:	bd80      	pop	{r7, pc}
    f8ec:	200025c0 	.word	0x200025c0
    f8f0:	0000f525 	.word	0x0000f525
    f8f4:	0000e79d 	.word	0x0000e79d
    f8f8:	20000134 	.word	0x20000134
    f8fc:	0000f5c1 	.word	0x0000f5c1
    f900:	0000f611 	.word	0x0000f611

0000f904 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    f904:	b580      	push	{r7, lr}
    f906:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    f908:	4b01      	ldr	r3, [pc, #4]	; (f910 <usb_init+0xc>)
    f90a:	4798      	blx	r3
}
    f90c:	bf00      	nop
    f90e:	bd80      	pop	{r7, pc}
    f910:	0000f8d1 	.word	0x0000f8d1

0000f914 <__aeabi_atexit>:
    f914:	460b      	mov	r3, r1
    f916:	4601      	mov	r1, r0
    f918:	4618      	mov	r0, r3
    f91a:	f001 bd2f 	b.w	1137c <__cxa_atexit>
    f91e:	bf00      	nop

0000f920 <_ZdlPvj>:
    f920:	f7f0 bfa8 	b.w	874 <_ZdlPv>

0000f924 <pow>:
    f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f928:	f8df 92f0 	ldr.w	r9, [pc, #752]	; fc1c <pow+0x2f8>
    f92c:	b08d      	sub	sp, #52	; 0x34
    f92e:	4606      	mov	r6, r0
    f930:	460f      	mov	r7, r1
    f932:	4614      	mov	r4, r2
    f934:	461d      	mov	r5, r3
    f936:	f000 f973 	bl	fc20 <__ieee754_pow>
    f93a:	f999 8000 	ldrsb.w	r8, [r9]
    f93e:	f1b8 3fff 	cmp.w	r8, #4294967295
    f942:	e9cd 0100 	strd	r0, r1, [sp]
    f946:	d036      	beq.n	f9b6 <pow+0x92>
    f948:	4622      	mov	r2, r4
    f94a:	462b      	mov	r3, r5
    f94c:	4620      	mov	r0, r4
    f94e:	4629      	mov	r1, r5
    f950:	f001 fcde 	bl	11310 <__aeabi_dcmpun>
    f954:	4683      	mov	fp, r0
    f956:	bb70      	cbnz	r0, f9b6 <pow+0x92>
    f958:	4632      	mov	r2, r6
    f95a:	463b      	mov	r3, r7
    f95c:	4630      	mov	r0, r6
    f95e:	4639      	mov	r1, r7
    f960:	f001 fcd6 	bl	11310 <__aeabi_dcmpun>
    f964:	2200      	movs	r2, #0
    f966:	4682      	mov	sl, r0
    f968:	2300      	movs	r3, #0
    f96a:	2800      	cmp	r0, #0
    f96c:	f040 80a0 	bne.w	fab0 <pow+0x18c>
    f970:	4630      	mov	r0, r6
    f972:	4639      	mov	r1, r7
    f974:	f001 fc9a 	bl	112ac <__aeabi_dcmpeq>
    f978:	b310      	cbz	r0, f9c0 <pow+0x9c>
    f97a:	2200      	movs	r2, #0
    f97c:	2300      	movs	r3, #0
    f97e:	4620      	mov	r0, r4
    f980:	4629      	mov	r1, r5
    f982:	f001 fc93 	bl	112ac <__aeabi_dcmpeq>
    f986:	4683      	mov	fp, r0
    f988:	2800      	cmp	r0, #0
    f98a:	d06a      	beq.n	fa62 <pow+0x13e>
    f98c:	2201      	movs	r2, #1
    f98e:	4b9c      	ldr	r3, [pc, #624]	; (fc00 <pow+0x2dc>)
    f990:	9202      	str	r2, [sp, #8]
    f992:	2100      	movs	r1, #0
    f994:	2200      	movs	r2, #0
    f996:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    f99a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    f99e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f9a2:	e9cd 1208 	strd	r1, r2, [sp, #32]
    f9a6:	9303      	str	r3, [sp, #12]
    f9a8:	f1b8 0f00 	cmp.w	r8, #0
    f9ac:	d045      	beq.n	fa3a <pow+0x116>
    f9ae:	4c95      	ldr	r4, [pc, #596]	; (fc04 <pow+0x2e0>)
    f9b0:	2300      	movs	r3, #0
    f9b2:	e9cd 3400 	strd	r3, r4, [sp]
    f9b6:	e9dd 0100 	ldrd	r0, r1, [sp]
    f9ba:	b00d      	add	sp, #52	; 0x34
    f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
    f9c4:	f000 ff32 	bl	1082c <finite>
    f9c8:	4680      	mov	r8, r0
    f9ca:	2800      	cmp	r0, #0
    f9cc:	f000 808b 	beq.w	fae6 <pow+0x1c2>
    f9d0:	f04f 0a00 	mov.w	sl, #0
    f9d4:	f04f 0b00 	mov.w	fp, #0
    f9d8:	4652      	mov	r2, sl
    f9da:	465b      	mov	r3, fp
    f9dc:	e9dd 0100 	ldrd	r0, r1, [sp]
    f9e0:	f001 fc64 	bl	112ac <__aeabi_dcmpeq>
    f9e4:	2800      	cmp	r0, #0
    f9e6:	d0e6      	beq.n	f9b6 <pow+0x92>
    f9e8:	4630      	mov	r0, r6
    f9ea:	4639      	mov	r1, r7
    f9ec:	f000 ff1e 	bl	1082c <finite>
    f9f0:	2800      	cmp	r0, #0
    f9f2:	d0e0      	beq.n	f9b6 <pow+0x92>
    f9f4:	4620      	mov	r0, r4
    f9f6:	4629      	mov	r1, r5
    f9f8:	f000 ff18 	bl	1082c <finite>
    f9fc:	2800      	cmp	r0, #0
    f9fe:	d0da      	beq.n	f9b6 <pow+0x92>
    fa00:	f999 3000 	ldrsb.w	r3, [r9]
    fa04:	4a7e      	ldr	r2, [pc, #504]	; (fc00 <pow+0x2dc>)
    fa06:	9203      	str	r2, [sp, #12]
    fa08:	2104      	movs	r1, #4
    fa0a:	2200      	movs	r2, #0
    fa0c:	2b02      	cmp	r3, #2
    fa0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fa12:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fa16:	e9cd ab08 	strd	sl, fp, [sp, #32]
    fa1a:	9102      	str	r1, [sp, #8]
    fa1c:	920a      	str	r2, [sp, #40]	; 0x28
    fa1e:	d003      	beq.n	fa28 <pow+0x104>
    fa20:	a802      	add	r0, sp, #8
    fa22:	f000 ff09 	bl	10838 <matherr>
    fa26:	b968      	cbnz	r0, fa44 <pow+0x120>
    fa28:	f001 fcae 	bl	11388 <__errno>
    fa2c:	2322      	movs	r3, #34	; 0x22
    fa2e:	6003      	str	r3, [r0, #0]
    fa30:	e008      	b.n	fa44 <pow+0x120>
    fa32:	2300      	movs	r3, #0
    fa34:	2400      	movs	r4, #0
    fa36:	e9cd 3408 	strd	r3, r4, [sp, #32]
    fa3a:	a802      	add	r0, sp, #8
    fa3c:	f000 fefc 	bl	10838 <matherr>
    fa40:	2800      	cmp	r0, #0
    fa42:	d030      	beq.n	faa6 <pow+0x182>
    fa44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa46:	b11b      	cbz	r3, fa50 <pow+0x12c>
    fa48:	f001 fc9e 	bl	11388 <__errno>
    fa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa4e:	6003      	str	r3, [r0, #0]
    fa50:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    fa54:	e9cd 3400 	strd	r3, r4, [sp]
    fa58:	e9dd 0100 	ldrd	r0, r1, [sp]
    fa5c:	b00d      	add	sp, #52	; 0x34
    fa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa62:	4620      	mov	r0, r4
    fa64:	4629      	mov	r1, r5
    fa66:	f000 fee1 	bl	1082c <finite>
    fa6a:	2800      	cmp	r0, #0
    fa6c:	d0a3      	beq.n	f9b6 <pow+0x92>
    fa6e:	2200      	movs	r2, #0
    fa70:	2300      	movs	r3, #0
    fa72:	4620      	mov	r0, r4
    fa74:	4629      	mov	r1, r5
    fa76:	f001 fc23 	bl	112c0 <__aeabi_dcmplt>
    fa7a:	2800      	cmp	r0, #0
    fa7c:	d09b      	beq.n	f9b6 <pow+0x92>
    fa7e:	f999 3000 	ldrsb.w	r3, [r9]
    fa82:	4a5f      	ldr	r2, [pc, #380]	; (fc00 <pow+0x2dc>)
    fa84:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fa88:	2101      	movs	r1, #1
    fa8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fa8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fa92:	9102      	str	r1, [sp, #8]
    fa94:	9203      	str	r2, [sp, #12]
    fa96:	2b00      	cmp	r3, #0
    fa98:	d0cb      	beq.n	fa32 <pow+0x10e>
    fa9a:	495b      	ldr	r1, [pc, #364]	; (fc08 <pow+0x2e4>)
    fa9c:	2000      	movs	r0, #0
    fa9e:	2b02      	cmp	r3, #2
    faa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    faa4:	d1c9      	bne.n	fa3a <pow+0x116>
    faa6:	f001 fc6f 	bl	11388 <__errno>
    faaa:	2321      	movs	r3, #33	; 0x21
    faac:	6003      	str	r3, [r0, #0]
    faae:	e7c9      	b.n	fa44 <pow+0x120>
    fab0:	4620      	mov	r0, r4
    fab2:	4629      	mov	r1, r5
    fab4:	f001 fbfa 	bl	112ac <__aeabi_dcmpeq>
    fab8:	2800      	cmp	r0, #0
    faba:	f43f af7c 	beq.w	f9b6 <pow+0x92>
    fabe:	4b51      	ldr	r3, [pc, #324]	; (fc04 <pow+0x2e0>)
    fac0:	494f      	ldr	r1, [pc, #316]	; (fc00 <pow+0x2dc>)
    fac2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fac6:	2001      	movs	r0, #1
    fac8:	2200      	movs	r2, #0
    faca:	f1b8 0f02 	cmp.w	r8, #2
    face:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fad2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fad6:	9002      	str	r0, [sp, #8]
    fad8:	9103      	str	r1, [sp, #12]
    fada:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fade:	d1ac      	bne.n	fa3a <pow+0x116>
    fae0:	e9cd 2300 	strd	r2, r3, [sp]
    fae4:	e767      	b.n	f9b6 <pow+0x92>
    fae6:	4630      	mov	r0, r6
    fae8:	4639      	mov	r1, r7
    faea:	f000 fe9f 	bl	1082c <finite>
    faee:	2800      	cmp	r0, #0
    faf0:	f43f af6e 	beq.w	f9d0 <pow+0xac>
    faf4:	4620      	mov	r0, r4
    faf6:	4629      	mov	r1, r5
    faf8:	f000 fe98 	bl	1082c <finite>
    fafc:	2800      	cmp	r0, #0
    fafe:	f43f af67 	beq.w	f9d0 <pow+0xac>
    fb02:	e9dd 2300 	ldrd	r2, r3, [sp]
    fb06:	4610      	mov	r0, r2
    fb08:	4619      	mov	r1, r3
    fb0a:	f001 fc01 	bl	11310 <__aeabi_dcmpun>
    fb0e:	2800      	cmp	r0, #0
    fb10:	d158      	bne.n	fbc4 <pow+0x2a0>
    fb12:	2303      	movs	r3, #3
    fb14:	f999 8000 	ldrsb.w	r8, [r9]
    fb18:	9302      	str	r3, [sp, #8]
    fb1a:	4b39      	ldr	r3, [pc, #228]	; (fc00 <pow+0x2dc>)
    fb1c:	900a      	str	r0, [sp, #40]	; 0x28
    fb1e:	9303      	str	r3, [sp, #12]
    fb20:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fb24:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fb28:	2200      	movs	r2, #0
    fb2a:	2300      	movs	r3, #0
    fb2c:	4630      	mov	r0, r6
    fb2e:	4639      	mov	r1, r7
    fb30:	f1b8 0f00 	cmp.w	r8, #0
    fb34:	d126      	bne.n	fb84 <pow+0x260>
    fb36:	4f35      	ldr	r7, [pc, #212]	; (fc0c <pow+0x2e8>)
    fb38:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    fb3c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    fb40:	f001 fbbe 	bl	112c0 <__aeabi_dcmplt>
    fb44:	2800      	cmp	r0, #0
    fb46:	f43f af6b 	beq.w	fa20 <pow+0xfc>
    fb4a:	2200      	movs	r2, #0
    fb4c:	4b30      	ldr	r3, [pc, #192]	; (fc10 <pow+0x2ec>)
    fb4e:	4620      	mov	r0, r4
    fb50:	4629      	mov	r1, r5
    fb52:	f001 f943 	bl	10ddc <__aeabi_dmul>
    fb56:	4604      	mov	r4, r0
    fb58:	460d      	mov	r5, r1
    fb5a:	f000 fe75 	bl	10848 <rint>
    fb5e:	4602      	mov	r2, r0
    fb60:	460b      	mov	r3, r1
    fb62:	4620      	mov	r0, r4
    fb64:	4629      	mov	r1, r5
    fb66:	f001 fba1 	bl	112ac <__aeabi_dcmpeq>
    fb6a:	bb40      	cbnz	r0, fbbe <pow+0x29a>
    fb6c:	4b29      	ldr	r3, [pc, #164]	; (fc14 <pow+0x2f0>)
    fb6e:	f999 8000 	ldrsb.w	r8, [r9]
    fb72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    fb76:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fb7a:	f1b8 0f02 	cmp.w	r8, #2
    fb7e:	f47f af4f 	bne.w	fa20 <pow+0xfc>
    fb82:	e751      	b.n	fa28 <pow+0x104>
    fb84:	4f24      	ldr	r7, [pc, #144]	; (fc18 <pow+0x2f4>)
    fb86:	2600      	movs	r6, #0
    fb88:	e9cd 6708 	strd	r6, r7, [sp, #32]
    fb8c:	f001 fb98 	bl	112c0 <__aeabi_dcmplt>
    fb90:	2800      	cmp	r0, #0
    fb92:	d0f2      	beq.n	fb7a <pow+0x256>
    fb94:	2200      	movs	r2, #0
    fb96:	4b1e      	ldr	r3, [pc, #120]	; (fc10 <pow+0x2ec>)
    fb98:	4620      	mov	r0, r4
    fb9a:	4629      	mov	r1, r5
    fb9c:	f001 f91e 	bl	10ddc <__aeabi_dmul>
    fba0:	4604      	mov	r4, r0
    fba2:	460d      	mov	r5, r1
    fba4:	f000 fe50 	bl	10848 <rint>
    fba8:	4602      	mov	r2, r0
    fbaa:	460b      	mov	r3, r1
    fbac:	4620      	mov	r0, r4
    fbae:	4629      	mov	r1, r5
    fbb0:	f001 fb7c 	bl	112ac <__aeabi_dcmpeq>
    fbb4:	b918      	cbnz	r0, fbbe <pow+0x29a>
    fbb6:	4b14      	ldr	r3, [pc, #80]	; (fc08 <pow+0x2e4>)
    fbb8:	2200      	movs	r2, #0
    fbba:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fbbe:	f999 8000 	ldrsb.w	r8, [r9]
    fbc2:	e7da      	b.n	fb7a <pow+0x256>
    fbc4:	f999 9000 	ldrsb.w	r9, [r9]
    fbc8:	4b0d      	ldr	r3, [pc, #52]	; (fc00 <pow+0x2dc>)
    fbca:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    fbce:	2201      	movs	r2, #1
    fbd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    fbd4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    fbd8:	9202      	str	r2, [sp, #8]
    fbda:	9303      	str	r3, [sp, #12]
    fbdc:	f1b9 0f00 	cmp.w	r9, #0
    fbe0:	f43f af27 	beq.w	fa32 <pow+0x10e>
    fbe4:	2200      	movs	r2, #0
    fbe6:	2300      	movs	r3, #0
    fbe8:	4610      	mov	r0, r2
    fbea:	4619      	mov	r1, r3
    fbec:	f001 fa20 	bl	11030 <__aeabi_ddiv>
    fbf0:	f1b9 0f02 	cmp.w	r9, #2
    fbf4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    fbf8:	f43f af55 	beq.w	faa6 <pow+0x182>
    fbfc:	e71d      	b.n	fa3a <pow+0x116>
    fbfe:	bf00      	nop
    fc00:	000129b4 	.word	0x000129b4
    fc04:	3ff00000 	.word	0x3ff00000
    fc08:	fff00000 	.word	0xfff00000
    fc0c:	47efffff 	.word	0x47efffff
    fc10:	3fe00000 	.word	0x3fe00000
    fc14:	c7efffff 	.word	0xc7efffff
    fc18:	7ff00000 	.word	0x7ff00000
    fc1c:	2000013c 	.word	0x2000013c

0000fc20 <__ieee754_pow>:
    fc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc24:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    fc28:	ea57 0402 	orrs.w	r4, r7, r2
    fc2c:	b093      	sub	sp, #76	; 0x4c
    fc2e:	d037      	beq.n	fca0 <__ieee754_pow+0x80>
    fc30:	4c67      	ldr	r4, [pc, #412]	; (fdd0 <__ieee754_pow+0x1b0>)
    fc32:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    fc36:	42a6      	cmp	r6, r4
    fc38:	4683      	mov	fp, r0
    fc3a:	460d      	mov	r5, r1
    fc3c:	dc29      	bgt.n	fc92 <__ieee754_pow+0x72>
    fc3e:	469a      	mov	sl, r3
    fc40:	4696      	mov	lr, r2
    fc42:	d025      	beq.n	fc90 <__ieee754_pow+0x70>
    fc44:	42a7      	cmp	r7, r4
    fc46:	dc24      	bgt.n	fc92 <__ieee754_pow+0x72>
    fc48:	4c61      	ldr	r4, [pc, #388]	; (fdd0 <__ieee754_pow+0x1b0>)
    fc4a:	42a7      	cmp	r7, r4
    fc4c:	d079      	beq.n	fd42 <__ieee754_pow+0x122>
    fc4e:	2d00      	cmp	r5, #0
    fc50:	4689      	mov	r9, r1
    fc52:	4680      	mov	r8, r0
    fc54:	e9cd 2300 	strd	r2, r3, [sp]
    fc58:	db77      	blt.n	fd4a <__ieee754_pow+0x12a>
    fc5a:	2400      	movs	r4, #0
    fc5c:	f1be 0f00 	cmp.w	lr, #0
    fc60:	d12c      	bne.n	fcbc <__ieee754_pow+0x9c>
    fc62:	4b5b      	ldr	r3, [pc, #364]	; (fdd0 <__ieee754_pow+0x1b0>)
    fc64:	429f      	cmp	r7, r3
    fc66:	f000 808b 	beq.w	fd80 <__ieee754_pow+0x160>
    fc6a:	4b5a      	ldr	r3, [pc, #360]	; (fdd4 <__ieee754_pow+0x1b4>)
    fc6c:	429f      	cmp	r7, r3
    fc6e:	d061      	beq.n	fd34 <__ieee754_pow+0x114>
    fc70:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    fc74:	f000 83ba 	beq.w	103ec <STACK_SIZE+0x3ec>
    fc78:	4b57      	ldr	r3, [pc, #348]	; (fdd8 <__ieee754_pow+0x1b8>)
    fc7a:	459a      	cmp	sl, r3
    fc7c:	d11e      	bne.n	fcbc <__ieee754_pow+0x9c>
    fc7e:	2d00      	cmp	r5, #0
    fc80:	db1c      	blt.n	fcbc <__ieee754_pow+0x9c>
    fc82:	4640      	mov	r0, r8
    fc84:	4649      	mov	r1, r9
    fc86:	b013      	add	sp, #76	; 0x4c
    fc88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc8c:	f000 bd0e 	b.w	106ac <__ieee754_sqrt>
    fc90:	b158      	cbz	r0, fcaa <__ieee754_pow+0x8a>
    fc92:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    fc96:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    fc9a:	ea56 030b 	orrs.w	r3, r6, fp
    fc9e:	d106      	bne.n	fcae <__ieee754_pow+0x8e>
    fca0:	494c      	ldr	r1, [pc, #304]	; (fdd4 <__ieee754_pow+0x1b4>)
    fca2:	2000      	movs	r0, #0
    fca4:	b013      	add	sp, #76	; 0x4c
    fca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcaa:	42b7      	cmp	r7, r6
    fcac:	ddcc      	ble.n	fc48 <__ieee754_pow+0x28>
    fcae:	484b      	ldr	r0, [pc, #300]	; (fddc <__ieee754_pow+0x1bc>)
    fcb0:	b013      	add	sp, #76	; 0x4c
    fcb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcb6:	f000 bdc1 	b.w	1083c <nan>
    fcba:	2400      	movs	r4, #0
    fcbc:	4640      	mov	r0, r8
    fcbe:	4649      	mov	r1, r9
    fcc0:	f000 fdb0 	bl	10824 <fabs>
    fcc4:	f1bb 0f00 	cmp.w	fp, #0
    fcc8:	d119      	bne.n	fcfe <__ieee754_pow+0xde>
    fcca:	b126      	cbz	r6, fcd6 <__ieee754_pow+0xb6>
    fccc:	4b41      	ldr	r3, [pc, #260]	; (fdd4 <__ieee754_pow+0x1b4>)
    fcce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    fcd2:	429a      	cmp	r2, r3
    fcd4:	d113      	bne.n	fcfe <__ieee754_pow+0xde>
    fcd6:	f1ba 0f00 	cmp.w	sl, #0
    fcda:	f2c0 83bc 	blt.w	10456 <STACK_SIZE+0x456>
    fcde:	2d00      	cmp	r5, #0
    fce0:	dae0      	bge.n	fca4 <__ieee754_pow+0x84>
    fce2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    fce6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    fcea:	ea56 0304 	orrs.w	r3, r6, r4
    fcee:	f000 848f 	beq.w	10610 <STACK_SIZE+0x610>
    fcf2:	2c01      	cmp	r4, #1
    fcf4:	d1d6      	bne.n	fca4 <__ieee754_pow+0x84>
    fcf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    fcfa:	4619      	mov	r1, r3
    fcfc:	e7d2      	b.n	fca4 <__ieee754_pow+0x84>
    fcfe:	0fed      	lsrs	r5, r5, #31
    fd00:	3d01      	subs	r5, #1
    fd02:	ea54 0305 	orrs.w	r3, r4, r5
    fd06:	d04e      	beq.n	fda6 <__ieee754_pow+0x186>
    fd08:	4b35      	ldr	r3, [pc, #212]	; (fde0 <__ieee754_pow+0x1c0>)
    fd0a:	429f      	cmp	r7, r3
    fd0c:	dd6e      	ble.n	fdec <__ieee754_pow+0x1cc>
    fd0e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    fd12:	429f      	cmp	r7, r3
    fd14:	f340 83e8 	ble.w	104e8 <STACK_SIZE+0x4e8>
    fd18:	4b32      	ldr	r3, [pc, #200]	; (fde4 <__ieee754_pow+0x1c4>)
    fd1a:	429e      	cmp	r6, r3
    fd1c:	dd4e      	ble.n	fdbc <__ieee754_pow+0x19c>
    fd1e:	f1ba 0f00 	cmp.w	sl, #0
    fd22:	dd4e      	ble.n	fdc2 <__ieee754_pow+0x1a2>
    fd24:	a328      	add	r3, pc, #160	; (adr r3, fdc8 <__ieee754_pow+0x1a8>)
    fd26:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd2a:	4610      	mov	r0, r2
    fd2c:	4619      	mov	r1, r3
    fd2e:	f001 f855 	bl	10ddc <__aeabi_dmul>
    fd32:	e7b7      	b.n	fca4 <__ieee754_pow+0x84>
    fd34:	f1ba 0f00 	cmp.w	sl, #0
    fd38:	f2c0 843c 	blt.w	105b4 <STACK_SIZE+0x5b4>
    fd3c:	4640      	mov	r0, r8
    fd3e:	4649      	mov	r1, r9
    fd40:	e7b0      	b.n	fca4 <__ieee754_pow+0x84>
    fd42:	f1be 0f00 	cmp.w	lr, #0
    fd46:	d082      	beq.n	fc4e <__ieee754_pow+0x2e>
    fd48:	e7a3      	b.n	fc92 <__ieee754_pow+0x72>
    fd4a:	4b27      	ldr	r3, [pc, #156]	; (fde8 <__ieee754_pow+0x1c8>)
    fd4c:	429f      	cmp	r7, r3
    fd4e:	dc28      	bgt.n	fda2 <__ieee754_pow+0x182>
    fd50:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    fd54:	429f      	cmp	r7, r3
    fd56:	dd80      	ble.n	fc5a <__ieee754_pow+0x3a>
    fd58:	153b      	asrs	r3, r7, #20
    fd5a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    fd5e:	2b14      	cmp	r3, #20
    fd60:	f340 843e 	ble.w	105e0 <STACK_SIZE+0x5e0>
    fd64:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    fd68:	fa2e f203 	lsr.w	r2, lr, r3
    fd6c:	fa02 f303 	lsl.w	r3, r2, r3
    fd70:	459e      	cmp	lr, r3
    fd72:	f47f af72 	bne.w	fc5a <__ieee754_pow+0x3a>
    fd76:	f002 0201 	and.w	r2, r2, #1
    fd7a:	f1c2 0402 	rsb	r4, r2, #2
    fd7e:	e76d      	b.n	fc5c <__ieee754_pow+0x3c>
    fd80:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    fd84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    fd88:	ea53 030b 	orrs.w	r3, r3, fp
    fd8c:	d088      	beq.n	fca0 <__ieee754_pow+0x80>
    fd8e:	4b15      	ldr	r3, [pc, #84]	; (fde4 <__ieee754_pow+0x1c4>)
    fd90:	429e      	cmp	r6, r3
    fd92:	f340 8332 	ble.w	103fa <STACK_SIZE+0x3fa>
    fd96:	f1ba 0f00 	cmp.w	sl, #0
    fd9a:	db12      	blt.n	fdc2 <__ieee754_pow+0x1a2>
    fd9c:	e9dd 0100 	ldrd	r0, r1, [sp]
    fda0:	e780      	b.n	fca4 <__ieee754_pow+0x84>
    fda2:	2402      	movs	r4, #2
    fda4:	e75a      	b.n	fc5c <__ieee754_pow+0x3c>
    fda6:	4642      	mov	r2, r8
    fda8:	464b      	mov	r3, r9
    fdaa:	4640      	mov	r0, r8
    fdac:	4649      	mov	r1, r9
    fdae:	f000 fe61 	bl	10a74 <__aeabi_dsub>
    fdb2:	4602      	mov	r2, r0
    fdb4:	460b      	mov	r3, r1
    fdb6:	f001 f93b 	bl	11030 <__aeabi_ddiv>
    fdba:	e773      	b.n	fca4 <__ieee754_pow+0x84>
    fdbc:	f1ba 0f00 	cmp.w	sl, #0
    fdc0:	dbb0      	blt.n	fd24 <__ieee754_pow+0x104>
    fdc2:	2000      	movs	r0, #0
    fdc4:	2100      	movs	r1, #0
    fdc6:	e76d      	b.n	fca4 <__ieee754_pow+0x84>
    fdc8:	8800759c 	.word	0x8800759c
    fdcc:	7e37e43c 	.word	0x7e37e43c
    fdd0:	7ff00000 	.word	0x7ff00000
    fdd4:	3ff00000 	.word	0x3ff00000
    fdd8:	3fe00000 	.word	0x3fe00000
    fddc:	000129b8 	.word	0x000129b8
    fde0:	41e00000 	.word	0x41e00000
    fde4:	3fefffff 	.word	0x3fefffff
    fde8:	433fffff 	.word	0x433fffff
    fdec:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    fdf0:	f04f 0200 	mov.w	r2, #0
    fdf4:	da05      	bge.n	fe02 <__ieee754_pow+0x1e2>
    fdf6:	4bd4      	ldr	r3, [pc, #848]	; (10148 <STACK_SIZE+0x148>)
    fdf8:	f000 fff0 	bl	10ddc <__aeabi_dmul>
    fdfc:	f06f 0234 	mvn.w	r2, #52	; 0x34
    fe00:	460e      	mov	r6, r1
    fe02:	1533      	asrs	r3, r6, #20
    fe04:	4fd1      	ldr	r7, [pc, #836]	; (1014c <STACK_SIZE+0x14c>)
    fe06:	f3c6 0613 	ubfx	r6, r6, #0, #20
    fe0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    fe0e:	4413      	add	r3, r2
    fe10:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    fe14:	42be      	cmp	r6, r7
    fe16:	461a      	mov	r2, r3
    fe18:	930d      	str	r3, [sp, #52]	; 0x34
    fe1a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    fe1e:	f340 8321 	ble.w	10464 <STACK_SIZE+0x464>
    fe22:	4bcb      	ldr	r3, [pc, #812]	; (10150 <STACK_SIZE+0x150>)
    fe24:	429e      	cmp	r6, r3
    fe26:	f340 83fd 	ble.w	10624 <STACK_SIZE+0x624>
    fe2a:	4613      	mov	r3, r2
    fe2c:	3301      	adds	r3, #1
    fe2e:	930d      	str	r3, [sp, #52]	; 0x34
    fe30:	4bc8      	ldr	r3, [pc, #800]	; (10154 <STACK_SIZE+0x154>)
    fe32:	2200      	movs	r2, #0
    fe34:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fe38:	2700      	movs	r7, #0
    fe3a:	2600      	movs	r6, #0
    fe3c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    fe40:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    fe44:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    fe48:	2700      	movs	r7, #0
    fe4a:	4602      	mov	r2, r0
    fe4c:	4653      	mov	r3, sl
    fe4e:	4651      	mov	r1, sl
    fe50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    fe54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    fe58:	f000 fe0c 	bl	10a74 <__aeabi_dsub>
    fe5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    fe60:	4680      	mov	r8, r0
    fe62:	4689      	mov	r9, r1
    fe64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    fe68:	f000 fe06 	bl	10a78 <__adddf3>
    fe6c:	4602      	mov	r2, r0
    fe6e:	460b      	mov	r3, r1
    fe70:	2000      	movs	r0, #0
    fe72:	49b8      	ldr	r1, [pc, #736]	; (10154 <STACK_SIZE+0x154>)
    fe74:	f001 f8dc 	bl	11030 <__aeabi_ddiv>
    fe78:	460a      	mov	r2, r1
    fe7a:	4601      	mov	r1, r0
    fe7c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    fe80:	4613      	mov	r3, r2
    fe82:	4649      	mov	r1, r9
    fe84:	4602      	mov	r2, r0
    fe86:	4640      	mov	r0, r8
    fe88:	f000 ffa8 	bl	10ddc <__aeabi_dmul>
    fe8c:	ea4f 036a 	mov.w	r3, sl, asr #1
    fe90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    fe94:	468c      	mov	ip, r1
    fe96:	4683      	mov	fp, r0
    fe98:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    fe9c:	e9cd bc04 	strd	fp, ip, [sp, #16]
    fea0:	46da      	mov	sl, fp
    fea2:	468b      	mov	fp, r1
    fea4:	19d9      	adds	r1, r3, r7
    fea6:	2300      	movs	r3, #0
    fea8:	e9cd ab02 	strd	sl, fp, [sp, #8]
    feac:	9302      	str	r3, [sp, #8]
    feae:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    feb2:	2000      	movs	r0, #0
    feb4:	4606      	mov	r6, r0
    feb6:	460f      	mov	r7, r1
    feb8:	4602      	mov	r2, r0
    feba:	460b      	mov	r3, r1
    febc:	4650      	mov	r0, sl
    febe:	4659      	mov	r1, fp
    fec0:	f000 ff8c 	bl	10ddc <__aeabi_dmul>
    fec4:	4602      	mov	r2, r0
    fec6:	460b      	mov	r3, r1
    fec8:	4640      	mov	r0, r8
    feca:	4649      	mov	r1, r9
    fecc:	f000 fdd2 	bl	10a74 <__aeabi_dsub>
    fed0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    fed4:	4680      	mov	r8, r0
    fed6:	4689      	mov	r9, r1
    fed8:	4630      	mov	r0, r6
    feda:	4639      	mov	r1, r7
    fedc:	f000 fdca 	bl	10a74 <__aeabi_dsub>
    fee0:	4602      	mov	r2, r0
    fee2:	460b      	mov	r3, r1
    fee4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    fee8:	f000 fdc4 	bl	10a74 <__aeabi_dsub>
    feec:	4652      	mov	r2, sl
    feee:	465b      	mov	r3, fp
    fef0:	f000 ff74 	bl	10ddc <__aeabi_dmul>
    fef4:	4602      	mov	r2, r0
    fef6:	460b      	mov	r3, r1
    fef8:	4640      	mov	r0, r8
    fefa:	4649      	mov	r1, r9
    fefc:	f000 fdba 	bl	10a74 <__aeabi_dsub>
    ff00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ff04:	f000 ff6a 	bl	10ddc <__aeabi_dmul>
    ff08:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    ff0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    ff10:	4632      	mov	r2, r6
    ff12:	463b      	mov	r3, r7
    ff14:	4630      	mov	r0, r6
    ff16:	4639      	mov	r1, r7
    ff18:	f000 ff60 	bl	10ddc <__aeabi_dmul>
    ff1c:	a378      	add	r3, pc, #480	; (adr r3, 10100 <STACK_SIZE+0x100>)
    ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff22:	4606      	mov	r6, r0
    ff24:	460f      	mov	r7, r1
    ff26:	f000 ff59 	bl	10ddc <__aeabi_dmul>
    ff2a:	a377      	add	r3, pc, #476	; (adr r3, 10108 <STACK_SIZE+0x108>)
    ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff30:	f000 fda2 	bl	10a78 <__adddf3>
    ff34:	4632      	mov	r2, r6
    ff36:	463b      	mov	r3, r7
    ff38:	f000 ff50 	bl	10ddc <__aeabi_dmul>
    ff3c:	a374      	add	r3, pc, #464	; (adr r3, 10110 <STACK_SIZE+0x110>)
    ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff42:	f000 fd99 	bl	10a78 <__adddf3>
    ff46:	4632      	mov	r2, r6
    ff48:	463b      	mov	r3, r7
    ff4a:	f000 ff47 	bl	10ddc <__aeabi_dmul>
    ff4e:	a372      	add	r3, pc, #456	; (adr r3, 10118 <STACK_SIZE+0x118>)
    ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff54:	f000 fd90 	bl	10a78 <__adddf3>
    ff58:	4632      	mov	r2, r6
    ff5a:	463b      	mov	r3, r7
    ff5c:	f000 ff3e 	bl	10ddc <__aeabi_dmul>
    ff60:	a36f      	add	r3, pc, #444	; (adr r3, 10120 <STACK_SIZE+0x120>)
    ff62:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff66:	f000 fd87 	bl	10a78 <__adddf3>
    ff6a:	4632      	mov	r2, r6
    ff6c:	463b      	mov	r3, r7
    ff6e:	f000 ff35 	bl	10ddc <__aeabi_dmul>
    ff72:	a36d      	add	r3, pc, #436	; (adr r3, 10128 <STACK_SIZE+0x128>)
    ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff78:	f000 fd7e 	bl	10a78 <__adddf3>
    ff7c:	4632      	mov	r2, r6
    ff7e:	4680      	mov	r8, r0
    ff80:	4689      	mov	r9, r1
    ff82:	463b      	mov	r3, r7
    ff84:	4630      	mov	r0, r6
    ff86:	4639      	mov	r1, r7
    ff88:	f000 ff28 	bl	10ddc <__aeabi_dmul>
    ff8c:	4602      	mov	r2, r0
    ff8e:	460b      	mov	r3, r1
    ff90:	4640      	mov	r0, r8
    ff92:	4649      	mov	r1, r9
    ff94:	f000 ff22 	bl	10ddc <__aeabi_dmul>
    ff98:	4652      	mov	r2, sl
    ff9a:	4606      	mov	r6, r0
    ff9c:	460f      	mov	r7, r1
    ff9e:	465b      	mov	r3, fp
    ffa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ffa4:	f000 fd68 	bl	10a78 <__adddf3>
    ffa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ffac:	f000 ff16 	bl	10ddc <__aeabi_dmul>
    ffb0:	4632      	mov	r2, r6
    ffb2:	463b      	mov	r3, r7
    ffb4:	f000 fd60 	bl	10a78 <__adddf3>
    ffb8:	4652      	mov	r2, sl
    ffba:	4680      	mov	r8, r0
    ffbc:	4689      	mov	r9, r1
    ffbe:	465b      	mov	r3, fp
    ffc0:	4650      	mov	r0, sl
    ffc2:	4659      	mov	r1, fp
    ffc4:	f000 ff0a 	bl	10ddc <__aeabi_dmul>
    ffc8:	2200      	movs	r2, #0
    ffca:	4b63      	ldr	r3, [pc, #396]	; (10158 <STACK_SIZE+0x158>)
    ffcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    ffd0:	f000 fd52 	bl	10a78 <__adddf3>
    ffd4:	4642      	mov	r2, r8
    ffd6:	464b      	mov	r3, r9
    ffd8:	f000 fd4e 	bl	10a78 <__adddf3>
    ffdc:	9802      	ldr	r0, [sp, #8]
    ffde:	460f      	mov	r7, r1
    ffe0:	4606      	mov	r6, r0
    ffe2:	4632      	mov	r2, r6
    ffe4:	463b      	mov	r3, r7
    ffe6:	4650      	mov	r0, sl
    ffe8:	4659      	mov	r1, fp
    ffea:	f000 fef7 	bl	10ddc <__aeabi_dmul>
    ffee:	2200      	movs	r2, #0
    fff0:	4682      	mov	sl, r0
    fff2:	468b      	mov	fp, r1
    fff4:	4b58      	ldr	r3, [pc, #352]	; (10158 <STACK_SIZE+0x158>)
    fff6:	4630      	mov	r0, r6
    fff8:	4639      	mov	r1, r7
    fffa:	f000 fd3b 	bl	10a74 <__aeabi_dsub>
    fffe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10002:	f000 fd37 	bl	10a74 <__aeabi_dsub>
   10006:	4602      	mov	r2, r0
   10008:	460b      	mov	r3, r1
   1000a:	4640      	mov	r0, r8
   1000c:	4649      	mov	r1, r9
   1000e:	f000 fd31 	bl	10a74 <__aeabi_dsub>
   10012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10016:	f000 fee1 	bl	10ddc <__aeabi_dmul>
   1001a:	4632      	mov	r2, r6
   1001c:	4680      	mov	r8, r0
   1001e:	4689      	mov	r9, r1
   10020:	463b      	mov	r3, r7
   10022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10026:	f000 fed9 	bl	10ddc <__aeabi_dmul>
   1002a:	4602      	mov	r2, r0
   1002c:	460b      	mov	r3, r1
   1002e:	4640      	mov	r0, r8
   10030:	4649      	mov	r1, r9
   10032:	f000 fd21 	bl	10a78 <__adddf3>
   10036:	4680      	mov	r8, r0
   10038:	4689      	mov	r9, r1
   1003a:	4602      	mov	r2, r0
   1003c:	460b      	mov	r3, r1
   1003e:	4650      	mov	r0, sl
   10040:	4659      	mov	r1, fp
   10042:	e9cd ab04 	strd	sl, fp, [sp, #16]
   10046:	f000 fd17 	bl	10a78 <__adddf3>
   1004a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1004e:	a338      	add	r3, pc, #224	; (adr r3, 10130 <STACK_SIZE+0x130>)
   10050:	e9d3 2300 	ldrd	r2, r3, [r3]
   10054:	4650      	mov	r0, sl
   10056:	460f      	mov	r7, r1
   10058:	f000 fec0 	bl	10ddc <__aeabi_dmul>
   1005c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10060:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10064:	4639      	mov	r1, r7
   10066:	4650      	mov	r0, sl
   10068:	f000 fd04 	bl	10a74 <__aeabi_dsub>
   1006c:	4602      	mov	r2, r0
   1006e:	460b      	mov	r3, r1
   10070:	4640      	mov	r0, r8
   10072:	4649      	mov	r1, r9
   10074:	f000 fcfe 	bl	10a74 <__aeabi_dsub>
   10078:	a32f      	add	r3, pc, #188	; (adr r3, 10138 <STACK_SIZE+0x138>)
   1007a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1007e:	f000 fead 	bl	10ddc <__aeabi_dmul>
   10082:	a32f      	add	r3, pc, #188	; (adr r3, 10140 <STACK_SIZE+0x140>)
   10084:	e9d3 2300 	ldrd	r2, r3, [r3]
   10088:	4680      	mov	r8, r0
   1008a:	4689      	mov	r9, r1
   1008c:	4650      	mov	r0, sl
   1008e:	4639      	mov	r1, r7
   10090:	f000 fea4 	bl	10ddc <__aeabi_dmul>
   10094:	4602      	mov	r2, r0
   10096:	460b      	mov	r3, r1
   10098:	4640      	mov	r0, r8
   1009a:	4649      	mov	r1, r9
   1009c:	f000 fcec 	bl	10a78 <__adddf3>
   100a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   100a4:	f000 fce8 	bl	10a78 <__adddf3>
   100a8:	4680      	mov	r8, r0
   100aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   100ac:	4689      	mov	r9, r1
   100ae:	f000 fe2f 	bl	10d10 <__aeabi_i2d>
   100b2:	4642      	mov	r2, r8
   100b4:	4606      	mov	r6, r0
   100b6:	460f      	mov	r7, r1
   100b8:	464b      	mov	r3, r9
   100ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   100be:	f000 fcdb 	bl	10a78 <__adddf3>
   100c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   100c6:	f000 fcd7 	bl	10a78 <__adddf3>
   100ca:	4632      	mov	r2, r6
   100cc:	463b      	mov	r3, r7
   100ce:	f000 fcd3 	bl	10a78 <__adddf3>
   100d2:	4632      	mov	r2, r6
   100d4:	463b      	mov	r3, r7
   100d6:	4650      	mov	r0, sl
   100d8:	468b      	mov	fp, r1
   100da:	f000 fccb 	bl	10a74 <__aeabi_dsub>
   100de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   100e2:	f000 fcc7 	bl	10a74 <__aeabi_dsub>
   100e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   100ea:	f000 fcc3 	bl	10a74 <__aeabi_dsub>
   100ee:	4602      	mov	r2, r0
   100f0:	460b      	mov	r3, r1
   100f2:	4640      	mov	r0, r8
   100f4:	4649      	mov	r1, r9
   100f6:	f000 fcbd 	bl	10a74 <__aeabi_dsub>
   100fa:	4680      	mov	r8, r0
   100fc:	e02e      	b.n	1015c <STACK_SIZE+0x15c>
   100fe:	bf00      	nop
   10100:	4a454eef 	.word	0x4a454eef
   10104:	3fca7e28 	.word	0x3fca7e28
   10108:	93c9db65 	.word	0x93c9db65
   1010c:	3fcd864a 	.word	0x3fcd864a
   10110:	a91d4101 	.word	0xa91d4101
   10114:	3fd17460 	.word	0x3fd17460
   10118:	518f264d 	.word	0x518f264d
   1011c:	3fd55555 	.word	0x3fd55555
   10120:	db6fabff 	.word	0xdb6fabff
   10124:	3fdb6db6 	.word	0x3fdb6db6
   10128:	33333303 	.word	0x33333303
   1012c:	3fe33333 	.word	0x3fe33333
   10130:	e0000000 	.word	0xe0000000
   10134:	3feec709 	.word	0x3feec709
   10138:	dc3a03fd 	.word	0xdc3a03fd
   1013c:	3feec709 	.word	0x3feec709
   10140:	145b01f5 	.word	0x145b01f5
   10144:	be3e2fe0 	.word	0xbe3e2fe0
   10148:	43400000 	.word	0x43400000
   1014c:	0003988e 	.word	0x0003988e
   10150:	000bb679 	.word	0x000bb679
   10154:	3ff00000 	.word	0x3ff00000
   10158:	40080000 	.word	0x40080000
   1015c:	4689      	mov	r9, r1
   1015e:	3c01      	subs	r4, #1
   10160:	ea54 0305 	orrs.w	r3, r4, r5
   10164:	e9dd 0100 	ldrd	r0, r1, [sp]
   10168:	bf14      	ite	ne
   1016a:	4cd9      	ldrne	r4, [pc, #868]	; (104d0 <STACK_SIZE+0x4d0>)
   1016c:	4cd9      	ldreq	r4, [pc, #868]	; (104d4 <STACK_SIZE+0x4d4>)
   1016e:	2300      	movs	r3, #0
   10170:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10174:	4603      	mov	r3, r0
   10176:	460c      	mov	r4, r1
   10178:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1017c:	2300      	movs	r3, #0
   1017e:	9302      	str	r3, [sp, #8]
   10180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   10184:	4622      	mov	r2, r4
   10186:	462b      	mov	r3, r5
   10188:	f000 fc74 	bl	10a74 <__aeabi_dsub>
   1018c:	4652      	mov	r2, sl
   1018e:	465b      	mov	r3, fp
   10190:	f000 fe24 	bl	10ddc <__aeabi_dmul>
   10194:	e9dd 2300 	ldrd	r2, r3, [sp]
   10198:	4606      	mov	r6, r0
   1019a:	460f      	mov	r7, r1
   1019c:	4640      	mov	r0, r8
   1019e:	4649      	mov	r1, r9
   101a0:	f000 fe1c 	bl	10ddc <__aeabi_dmul>
   101a4:	4602      	mov	r2, r0
   101a6:	460b      	mov	r3, r1
   101a8:	4630      	mov	r0, r6
   101aa:	4639      	mov	r1, r7
   101ac:	f000 fc64 	bl	10a78 <__adddf3>
   101b0:	4622      	mov	r2, r4
   101b2:	4680      	mov	r8, r0
   101b4:	4689      	mov	r9, r1
   101b6:	462b      	mov	r3, r5
   101b8:	4650      	mov	r0, sl
   101ba:	4659      	mov	r1, fp
   101bc:	e9cd 8900 	strd	r8, r9, [sp]
   101c0:	f000 fe0c 	bl	10ddc <__aeabi_dmul>
   101c4:	460b      	mov	r3, r1
   101c6:	4602      	mov	r2, r0
   101c8:	4606      	mov	r6, r0
   101ca:	460f      	mov	r7, r1
   101cc:	4640      	mov	r0, r8
   101ce:	4649      	mov	r1, r9
   101d0:	f000 fc52 	bl	10a78 <__adddf3>
   101d4:	4bc0      	ldr	r3, [pc, #768]	; (104d8 <STACK_SIZE+0x4d8>)
   101d6:	4299      	cmp	r1, r3
   101d8:	4604      	mov	r4, r0
   101da:	460d      	mov	r5, r1
   101dc:	468a      	mov	sl, r1
   101de:	f340 8116 	ble.w	1040e <STACK_SIZE+0x40e>
   101e2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   101e6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   101ea:	4303      	orrs	r3, r0
   101ec:	f040 81ea 	bne.w	105c4 <STACK_SIZE+0x5c4>
   101f0:	a3a3      	add	r3, pc, #652	; (adr r3, 10480 <STACK_SIZE+0x480>)
   101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   101f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   101fa:	f000 fc3d 	bl	10a78 <__adddf3>
   101fe:	4632      	mov	r2, r6
   10200:	4680      	mov	r8, r0
   10202:	4689      	mov	r9, r1
   10204:	463b      	mov	r3, r7
   10206:	4620      	mov	r0, r4
   10208:	4629      	mov	r1, r5
   1020a:	f000 fc33 	bl	10a74 <__aeabi_dsub>
   1020e:	4602      	mov	r2, r0
   10210:	460b      	mov	r3, r1
   10212:	4640      	mov	r0, r8
   10214:	4649      	mov	r1, r9
   10216:	f001 f871 	bl	112fc <__aeabi_dcmpgt>
   1021a:	2800      	cmp	r0, #0
   1021c:	f040 81d2 	bne.w	105c4 <STACK_SIZE+0x5c4>
   10220:	46a8      	mov	r8, r5
   10222:	ea4f 5328 	mov.w	r3, r8, asr #20
   10226:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1022a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1022e:	fa42 f303 	asr.w	r3, r2, r3
   10232:	4453      	add	r3, sl
   10234:	f3c3 520a 	ubfx	r2, r3, #20, #11
   10238:	4da8      	ldr	r5, [pc, #672]	; (104dc <STACK_SIZE+0x4dc>)
   1023a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1023e:	4115      	asrs	r5, r2
   10240:	f3c3 0413 	ubfx	r4, r3, #0, #20
   10244:	ea23 0105 	bic.w	r1, r3, r5
   10248:	2000      	movs	r0, #0
   1024a:	f1c2 0b14 	rsb	fp, r2, #20
   1024e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   10252:	f1ba 0f00 	cmp.w	sl, #0
   10256:	4602      	mov	r2, r0
   10258:	460b      	mov	r3, r1
   1025a:	fa44 fb0b 	asr.w	fp, r4, fp
   1025e:	4630      	mov	r0, r6
   10260:	4639      	mov	r1, r7
   10262:	bfb8      	it	lt
   10264:	f1cb 0b00 	rsblt	fp, fp, #0
   10268:	f000 fc04 	bl	10a74 <__aeabi_dsub>
   1026c:	4602      	mov	r2, r0
   1026e:	460b      	mov	r3, r1
   10270:	4606      	mov	r6, r0
   10272:	460f      	mov	r7, r1
   10274:	e9dd 0100 	ldrd	r0, r1, [sp]
   10278:	f000 fbfe 	bl	10a78 <__adddf3>
   1027c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   10280:	460d      	mov	r5, r1
   10282:	2400      	movs	r4, #0
   10284:	a380      	add	r3, pc, #512	; (adr r3, 10488 <STACK_SIZE+0x488>)
   10286:	e9d3 2300 	ldrd	r2, r3, [r3]
   1028a:	4620      	mov	r0, r4
   1028c:	4629      	mov	r1, r5
   1028e:	f000 fda5 	bl	10ddc <__aeabi_dmul>
   10292:	4632      	mov	r2, r6
   10294:	4680      	mov	r8, r0
   10296:	4689      	mov	r9, r1
   10298:	463b      	mov	r3, r7
   1029a:	4620      	mov	r0, r4
   1029c:	4629      	mov	r1, r5
   1029e:	f000 fbe9 	bl	10a74 <__aeabi_dsub>
   102a2:	4602      	mov	r2, r0
   102a4:	460b      	mov	r3, r1
   102a6:	e9dd 0100 	ldrd	r0, r1, [sp]
   102aa:	f000 fbe3 	bl	10a74 <__aeabi_dsub>
   102ae:	a378      	add	r3, pc, #480	; (adr r3, 10490 <STACK_SIZE+0x490>)
   102b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   102b4:	f000 fd92 	bl	10ddc <__aeabi_dmul>
   102b8:	a377      	add	r3, pc, #476	; (adr r3, 10498 <STACK_SIZE+0x498>)
   102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   102be:	4606      	mov	r6, r0
   102c0:	460f      	mov	r7, r1
   102c2:	4620      	mov	r0, r4
   102c4:	4629      	mov	r1, r5
   102c6:	f000 fd89 	bl	10ddc <__aeabi_dmul>
   102ca:	4602      	mov	r2, r0
   102cc:	460b      	mov	r3, r1
   102ce:	4630      	mov	r0, r6
   102d0:	4639      	mov	r1, r7
   102d2:	f000 fbd1 	bl	10a78 <__adddf3>
   102d6:	4606      	mov	r6, r0
   102d8:	460f      	mov	r7, r1
   102da:	4602      	mov	r2, r0
   102dc:	460b      	mov	r3, r1
   102de:	4640      	mov	r0, r8
   102e0:	4649      	mov	r1, r9
   102e2:	f000 fbc9 	bl	10a78 <__adddf3>
   102e6:	4642      	mov	r2, r8
   102e8:	464b      	mov	r3, r9
   102ea:	4604      	mov	r4, r0
   102ec:	460d      	mov	r5, r1
   102ee:	f000 fbc1 	bl	10a74 <__aeabi_dsub>
   102f2:	4602      	mov	r2, r0
   102f4:	460b      	mov	r3, r1
   102f6:	4630      	mov	r0, r6
   102f8:	4639      	mov	r1, r7
   102fa:	f000 fbbb 	bl	10a74 <__aeabi_dsub>
   102fe:	4622      	mov	r2, r4
   10300:	4680      	mov	r8, r0
   10302:	4689      	mov	r9, r1
   10304:	462b      	mov	r3, r5
   10306:	4620      	mov	r0, r4
   10308:	4629      	mov	r1, r5
   1030a:	f000 fd67 	bl	10ddc <__aeabi_dmul>
   1030e:	a364      	add	r3, pc, #400	; (adr r3, 104a0 <STACK_SIZE+0x4a0>)
   10310:	e9d3 2300 	ldrd	r2, r3, [r3]
   10314:	4606      	mov	r6, r0
   10316:	460f      	mov	r7, r1
   10318:	f000 fd60 	bl	10ddc <__aeabi_dmul>
   1031c:	a362      	add	r3, pc, #392	; (adr r3, 104a8 <STACK_SIZE+0x4a8>)
   1031e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10322:	f000 fba7 	bl	10a74 <__aeabi_dsub>
   10326:	4632      	mov	r2, r6
   10328:	463b      	mov	r3, r7
   1032a:	f000 fd57 	bl	10ddc <__aeabi_dmul>
   1032e:	a360      	add	r3, pc, #384	; (adr r3, 104b0 <STACK_SIZE+0x4b0>)
   10330:	e9d3 2300 	ldrd	r2, r3, [r3]
   10334:	f000 fba0 	bl	10a78 <__adddf3>
   10338:	4632      	mov	r2, r6
   1033a:	463b      	mov	r3, r7
   1033c:	f000 fd4e 	bl	10ddc <__aeabi_dmul>
   10340:	a35d      	add	r3, pc, #372	; (adr r3, 104b8 <STACK_SIZE+0x4b8>)
   10342:	e9d3 2300 	ldrd	r2, r3, [r3]
   10346:	f000 fb95 	bl	10a74 <__aeabi_dsub>
   1034a:	4632      	mov	r2, r6
   1034c:	463b      	mov	r3, r7
   1034e:	f000 fd45 	bl	10ddc <__aeabi_dmul>
   10352:	a35b      	add	r3, pc, #364	; (adr r3, 104c0 <STACK_SIZE+0x4c0>)
   10354:	e9d3 2300 	ldrd	r2, r3, [r3]
   10358:	f000 fb8e 	bl	10a78 <__adddf3>
   1035c:	4632      	mov	r2, r6
   1035e:	463b      	mov	r3, r7
   10360:	f000 fd3c 	bl	10ddc <__aeabi_dmul>
   10364:	4602      	mov	r2, r0
   10366:	460b      	mov	r3, r1
   10368:	4620      	mov	r0, r4
   1036a:	4629      	mov	r1, r5
   1036c:	f000 fb82 	bl	10a74 <__aeabi_dsub>
   10370:	4606      	mov	r6, r0
   10372:	460f      	mov	r7, r1
   10374:	4602      	mov	r2, r0
   10376:	460b      	mov	r3, r1
   10378:	4620      	mov	r0, r4
   1037a:	4629      	mov	r1, r5
   1037c:	f000 fd2e 	bl	10ddc <__aeabi_dmul>
   10380:	2200      	movs	r2, #0
   10382:	e9cd 0100 	strd	r0, r1, [sp]
   10386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1038a:	4630      	mov	r0, r6
   1038c:	4639      	mov	r1, r7
   1038e:	f000 fb71 	bl	10a74 <__aeabi_dsub>
   10392:	4602      	mov	r2, r0
   10394:	460b      	mov	r3, r1
   10396:	e9dd 0100 	ldrd	r0, r1, [sp]
   1039a:	f000 fe49 	bl	11030 <__aeabi_ddiv>
   1039e:	4642      	mov	r2, r8
   103a0:	4606      	mov	r6, r0
   103a2:	460f      	mov	r7, r1
   103a4:	464b      	mov	r3, r9
   103a6:	4620      	mov	r0, r4
   103a8:	4629      	mov	r1, r5
   103aa:	f000 fd17 	bl	10ddc <__aeabi_dmul>
   103ae:	4642      	mov	r2, r8
   103b0:	464b      	mov	r3, r9
   103b2:	f000 fb61 	bl	10a78 <__adddf3>
   103b6:	4602      	mov	r2, r0
   103b8:	460b      	mov	r3, r1
   103ba:	4630      	mov	r0, r6
   103bc:	4639      	mov	r1, r7
   103be:	f000 fb59 	bl	10a74 <__aeabi_dsub>
   103c2:	4622      	mov	r2, r4
   103c4:	462b      	mov	r3, r5
   103c6:	f000 fb55 	bl	10a74 <__aeabi_dsub>
   103ca:	4602      	mov	r2, r0
   103cc:	460b      	mov	r3, r1
   103ce:	2000      	movs	r0, #0
   103d0:	493f      	ldr	r1, [pc, #252]	; (104d0 <STACK_SIZE+0x4d0>)
   103d2:	f000 fb4f 	bl	10a74 <__aeabi_dsub>
   103d6:	448a      	add	sl, r1
   103d8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   103dc:	f2c0 8133 	blt.w	10646 <STACK_SIZE+0x646>
   103e0:	4651      	mov	r1, sl
   103e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   103e6:	f000 fcf9 	bl	10ddc <__aeabi_dmul>
   103ea:	e45b      	b.n	fca4 <__ieee754_pow+0x84>
   103ec:	4642      	mov	r2, r8
   103ee:	4640      	mov	r0, r8
   103f0:	464b      	mov	r3, r9
   103f2:	4649      	mov	r1, r9
   103f4:	f000 fcf2 	bl	10ddc <__aeabi_dmul>
   103f8:	e454      	b.n	fca4 <__ieee754_pow+0x84>
   103fa:	f1ba 0f00 	cmp.w	sl, #0
   103fe:	f6bf ace0 	bge.w	fdc2 <__ieee754_pow+0x1a2>
   10402:	e9dd 3400 	ldrd	r3, r4, [sp]
   10406:	4618      	mov	r0, r3
   10408:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1040c:	e44a      	b.n	fca4 <__ieee754_pow+0x84>
   1040e:	4b34      	ldr	r3, [pc, #208]	; (104e0 <STACK_SIZE+0x4e0>)
   10410:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   10414:	4598      	cmp	r8, r3
   10416:	f340 80f2 	ble.w	105fe <STACK_SIZE+0x5fe>
   1041a:	4b32      	ldr	r3, [pc, #200]	; (104e4 <STACK_SIZE+0x4e4>)
   1041c:	440b      	add	r3, r1
   1041e:	4303      	orrs	r3, r0
   10420:	d10c      	bne.n	1043c <STACK_SIZE+0x43c>
   10422:	4632      	mov	r2, r6
   10424:	463b      	mov	r3, r7
   10426:	f000 fb25 	bl	10a74 <__aeabi_dsub>
   1042a:	4602      	mov	r2, r0
   1042c:	460b      	mov	r3, r1
   1042e:	e9dd 0100 	ldrd	r0, r1, [sp]
   10432:	f000 ff4f 	bl	112d4 <__aeabi_dcmple>
   10436:	2800      	cmp	r0, #0
   10438:	f43f aef3 	beq.w	10222 <STACK_SIZE+0x222>
   1043c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10440:	a321      	add	r3, pc, #132	; (adr r3, 104c8 <STACK_SIZE+0x4c8>)
   10442:	e9d3 2300 	ldrd	r2, r3, [r3]
   10446:	f000 fcc9 	bl	10ddc <__aeabi_dmul>
   1044a:	a31f      	add	r3, pc, #124	; (adr r3, 104c8 <STACK_SIZE+0x4c8>)
   1044c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10450:	f000 fcc4 	bl	10ddc <__aeabi_dmul>
   10454:	e426      	b.n	fca4 <__ieee754_pow+0x84>
   10456:	4602      	mov	r2, r0
   10458:	460b      	mov	r3, r1
   1045a:	2000      	movs	r0, #0
   1045c:	491c      	ldr	r1, [pc, #112]	; (104d0 <STACK_SIZE+0x4d0>)
   1045e:	f000 fde7 	bl	11030 <__aeabi_ddiv>
   10462:	e43c      	b.n	fcde <__ieee754_pow+0xbe>
   10464:	2200      	movs	r2, #0
   10466:	2300      	movs	r3, #0
   10468:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1046c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   10470:	4b17      	ldr	r3, [pc, #92]	; (104d0 <STACK_SIZE+0x4d0>)
   10472:	2200      	movs	r2, #0
   10474:	2700      	movs	r7, #0
   10476:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1047a:	e4e6      	b.n	fe4a <__ieee754_pow+0x22a>
   1047c:	f3af 8000 	nop.w
   10480:	652b82fe 	.word	0x652b82fe
   10484:	3c971547 	.word	0x3c971547
   10488:	00000000 	.word	0x00000000
   1048c:	3fe62e43 	.word	0x3fe62e43
   10490:	fefa39ef 	.word	0xfefa39ef
   10494:	3fe62e42 	.word	0x3fe62e42
   10498:	0ca86c39 	.word	0x0ca86c39
   1049c:	be205c61 	.word	0xbe205c61
   104a0:	72bea4d0 	.word	0x72bea4d0
   104a4:	3e663769 	.word	0x3e663769
   104a8:	c5d26bf1 	.word	0xc5d26bf1
   104ac:	3ebbbd41 	.word	0x3ebbbd41
   104b0:	af25de2c 	.word	0xaf25de2c
   104b4:	3f11566a 	.word	0x3f11566a
   104b8:	16bebd93 	.word	0x16bebd93
   104bc:	3f66c16c 	.word	0x3f66c16c
   104c0:	5555553e 	.word	0x5555553e
   104c4:	3fc55555 	.word	0x3fc55555
   104c8:	c2f8f359 	.word	0xc2f8f359
   104cc:	01a56e1f 	.word	0x01a56e1f
   104d0:	3ff00000 	.word	0x3ff00000
   104d4:	bff00000 	.word	0xbff00000
   104d8:	408fffff 	.word	0x408fffff
   104dc:	000fffff 	.word	0x000fffff
   104e0:	4090cbff 	.word	0x4090cbff
   104e4:	3f6f3400 	.word	0x3f6f3400
   104e8:	4b6b      	ldr	r3, [pc, #428]	; (10698 <STACK_SIZE+0x698>)
   104ea:	429e      	cmp	r6, r3
   104ec:	f77f ac66 	ble.w	fdbc <__ieee754_pow+0x19c>
   104f0:	4b6a      	ldr	r3, [pc, #424]	; (1069c <STACK_SIZE+0x69c>)
   104f2:	429e      	cmp	r6, r3
   104f4:	f73f ac13 	bgt.w	fd1e <__ieee754_pow+0xfe>
   104f8:	2200      	movs	r2, #0
   104fa:	4b68      	ldr	r3, [pc, #416]	; (1069c <STACK_SIZE+0x69c>)
   104fc:	f000 faba 	bl	10a74 <__aeabi_dsub>
   10500:	a357      	add	r3, pc, #348	; (adr r3, 10660 <STACK_SIZE+0x660>)
   10502:	e9d3 2300 	ldrd	r2, r3, [r3]
   10506:	4606      	mov	r6, r0
   10508:	460f      	mov	r7, r1
   1050a:	f000 fc67 	bl	10ddc <__aeabi_dmul>
   1050e:	a356      	add	r3, pc, #344	; (adr r3, 10668 <STACK_SIZE+0x668>)
   10510:	e9d3 2300 	ldrd	r2, r3, [r3]
   10514:	4680      	mov	r8, r0
   10516:	4689      	mov	r9, r1
   10518:	4630      	mov	r0, r6
   1051a:	4639      	mov	r1, r7
   1051c:	f000 fc5e 	bl	10ddc <__aeabi_dmul>
   10520:	2200      	movs	r2, #0
   10522:	4682      	mov	sl, r0
   10524:	468b      	mov	fp, r1
   10526:	4b5e      	ldr	r3, [pc, #376]	; (106a0 <STACK_SIZE+0x6a0>)
   10528:	4630      	mov	r0, r6
   1052a:	4639      	mov	r1, r7
   1052c:	f000 fc56 	bl	10ddc <__aeabi_dmul>
   10530:	4602      	mov	r2, r0
   10532:	460b      	mov	r3, r1
   10534:	a14e      	add	r1, pc, #312	; (adr r1, 10670 <STACK_SIZE+0x670>)
   10536:	e9d1 0100 	ldrd	r0, r1, [r1]
   1053a:	f000 fa9b 	bl	10a74 <__aeabi_dsub>
   1053e:	4632      	mov	r2, r6
   10540:	463b      	mov	r3, r7
   10542:	f000 fc4b 	bl	10ddc <__aeabi_dmul>
   10546:	4602      	mov	r2, r0
   10548:	460b      	mov	r3, r1
   1054a:	2000      	movs	r0, #0
   1054c:	4955      	ldr	r1, [pc, #340]	; (106a4 <STACK_SIZE+0x6a4>)
   1054e:	f000 fa91 	bl	10a74 <__aeabi_dsub>
   10552:	4632      	mov	r2, r6
   10554:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10558:	463b      	mov	r3, r7
   1055a:	4630      	mov	r0, r6
   1055c:	4639      	mov	r1, r7
   1055e:	f000 fc3d 	bl	10ddc <__aeabi_dmul>
   10562:	4602      	mov	r2, r0
   10564:	460b      	mov	r3, r1
   10566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1056a:	f000 fc37 	bl	10ddc <__aeabi_dmul>
   1056e:	a342      	add	r3, pc, #264	; (adr r3, 10678 <STACK_SIZE+0x678>)
   10570:	e9d3 2300 	ldrd	r2, r3, [r3]
   10574:	f000 fc32 	bl	10ddc <__aeabi_dmul>
   10578:	4602      	mov	r2, r0
   1057a:	460b      	mov	r3, r1
   1057c:	4650      	mov	r0, sl
   1057e:	4659      	mov	r1, fp
   10580:	f000 fa78 	bl	10a74 <__aeabi_dsub>
   10584:	4602      	mov	r2, r0
   10586:	460b      	mov	r3, r1
   10588:	4606      	mov	r6, r0
   1058a:	460f      	mov	r7, r1
   1058c:	4640      	mov	r0, r8
   1058e:	4649      	mov	r1, r9
   10590:	f000 fa72 	bl	10a78 <__adddf3>
   10594:	4642      	mov	r2, r8
   10596:	464b      	mov	r3, r9
   10598:	2000      	movs	r0, #0
   1059a:	4682      	mov	sl, r0
   1059c:	468b      	mov	fp, r1
   1059e:	f000 fa69 	bl	10a74 <__aeabi_dsub>
   105a2:	4602      	mov	r2, r0
   105a4:	460b      	mov	r3, r1
   105a6:	4630      	mov	r0, r6
   105a8:	4639      	mov	r1, r7
   105aa:	f000 fa63 	bl	10a74 <__aeabi_dsub>
   105ae:	4680      	mov	r8, r0
   105b0:	4689      	mov	r9, r1
   105b2:	e5d4      	b.n	1015e <STACK_SIZE+0x15e>
   105b4:	4642      	mov	r2, r8
   105b6:	464b      	mov	r3, r9
   105b8:	2000      	movs	r0, #0
   105ba:	4938      	ldr	r1, [pc, #224]	; (1069c <STACK_SIZE+0x69c>)
   105bc:	f000 fd38 	bl	11030 <__aeabi_ddiv>
   105c0:	f7ff bb70 	b.w	fca4 <__ieee754_pow+0x84>
   105c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   105c8:	a32d      	add	r3, pc, #180	; (adr r3, 10680 <STACK_SIZE+0x680>)
   105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   105ce:	f000 fc05 	bl	10ddc <__aeabi_dmul>
   105d2:	a32b      	add	r3, pc, #172	; (adr r3, 10680 <STACK_SIZE+0x680>)
   105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   105d8:	f000 fc00 	bl	10ddc <__aeabi_dmul>
   105dc:	f7ff bb62 	b.w	fca4 <__ieee754_pow+0x84>
   105e0:	f1be 0f00 	cmp.w	lr, #0
   105e4:	f47f ab69 	bne.w	fcba <__ieee754_pow+0x9a>
   105e8:	f1c3 0314 	rsb	r3, r3, #20
   105ec:	fa47 f203 	asr.w	r2, r7, r3
   105f0:	fa02 f303 	lsl.w	r3, r2, r3
   105f4:	429f      	cmp	r7, r3
   105f6:	d02a      	beq.n	1064e <STACK_SIZE+0x64e>
   105f8:	4674      	mov	r4, lr
   105fa:	f7ff bb36 	b.w	fc6a <__ieee754_pow+0x4a>
   105fe:	4b29      	ldr	r3, [pc, #164]	; (106a4 <STACK_SIZE+0x6a4>)
   10600:	4598      	cmp	r8, r3
   10602:	f73f ae0e 	bgt.w	10222 <STACK_SIZE+0x222>
   10606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1060a:	4692      	mov	sl, r2
   1060c:	4693      	mov	fp, r2
   1060e:	e638      	b.n	10282 <STACK_SIZE+0x282>
   10610:	4602      	mov	r2, r0
   10612:	460b      	mov	r3, r1
   10614:	f000 fa2e 	bl	10a74 <__aeabi_dsub>
   10618:	4602      	mov	r2, r0
   1061a:	460b      	mov	r3, r1
   1061c:	f000 fd08 	bl	11030 <__aeabi_ddiv>
   10620:	f7ff bb40 	b.w	fca4 <__ieee754_pow+0x84>
   10624:	a318      	add	r3, pc, #96	; (adr r3, 10688 <STACK_SIZE+0x688>)
   10626:	e9d3 2300 	ldrd	r2, r3, [r3]
   1062a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1062e:	a318      	add	r3, pc, #96	; (adr r3, 10690 <STACK_SIZE+0x690>)
   10630:	e9d3 2300 	ldrd	r2, r3, [r3]
   10634:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   10638:	4b1b      	ldr	r3, [pc, #108]	; (106a8 <STACK_SIZE+0x6a8>)
   1063a:	2200      	movs	r2, #0
   1063c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   10640:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10644:	e401      	b.n	fe4a <__ieee754_pow+0x22a>
   10646:	465a      	mov	r2, fp
   10648:	f000 f98a 	bl	10960 <scalbn>
   1064c:	e6c9      	b.n	103e2 <STACK_SIZE+0x3e2>
   1064e:	f002 0201 	and.w	r2, r2, #1
   10652:	f1c2 0402 	rsb	r4, r2, #2
   10656:	f7ff bb08 	b.w	fc6a <__ieee754_pow+0x4a>
   1065a:	bf00      	nop
   1065c:	f3af 8000 	nop.w
   10660:	60000000 	.word	0x60000000
   10664:	3ff71547 	.word	0x3ff71547
   10668:	f85ddf44 	.word	0xf85ddf44
   1066c:	3e54ae0b 	.word	0x3e54ae0b
   10670:	55555555 	.word	0x55555555
   10674:	3fd55555 	.word	0x3fd55555
   10678:	652b82fe 	.word	0x652b82fe
   1067c:	3ff71547 	.word	0x3ff71547
   10680:	8800759c 	.word	0x8800759c
   10684:	7e37e43c 	.word	0x7e37e43c
   10688:	40000000 	.word	0x40000000
   1068c:	3fe2b803 	.word	0x3fe2b803
   10690:	43cfd006 	.word	0x43cfd006
   10694:	3e4cfdeb 	.word	0x3e4cfdeb
   10698:	3feffffe 	.word	0x3feffffe
   1069c:	3ff00000 	.word	0x3ff00000
   106a0:	3fd00000 	.word	0x3fd00000
   106a4:	3fe00000 	.word	0x3fe00000
   106a8:	3ff80000 	.word	0x3ff80000

000106ac <__ieee754_sqrt>:
   106ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   106b0:	4f5b      	ldr	r7, [pc, #364]	; (10820 <__ieee754_sqrt+0x174>)
   106b2:	438f      	bics	r7, r1
   106b4:	4605      	mov	r5, r0
   106b6:	460c      	mov	r4, r1
   106b8:	f000 8092 	beq.w	107e0 <__ieee754_sqrt+0x134>
   106bc:	2900      	cmp	r1, #0
   106be:	460b      	mov	r3, r1
   106c0:	4602      	mov	r2, r0
   106c2:	dd6f      	ble.n	107a4 <__ieee754_sqrt+0xf8>
   106c4:	150f      	asrs	r7, r1, #20
   106c6:	d07b      	beq.n	107c0 <__ieee754_sqrt+0x114>
   106c8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   106cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
   106d0:	07f8      	lsls	r0, r7, #31
   106d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   106d6:	d45c      	bmi.n	10792 <__ieee754_sqrt+0xe6>
   106d8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   106dc:	2600      	movs	r6, #0
   106de:	440b      	add	r3, r1
   106e0:	107f      	asrs	r7, r7, #1
   106e2:	0052      	lsls	r2, r2, #1
   106e4:	46b6      	mov	lr, r6
   106e6:	2016      	movs	r0, #22
   106e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   106ec:	eb0e 0401 	add.w	r4, lr, r1
   106f0:	429c      	cmp	r4, r3
   106f2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   106f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   106fa:	dc03      	bgt.n	10704 <__ieee754_sqrt+0x58>
   106fc:	1b1b      	subs	r3, r3, r4
   106fe:	eb04 0e01 	add.w	lr, r4, r1
   10702:	440e      	add	r6, r1
   10704:	3801      	subs	r0, #1
   10706:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1070a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1070e:	d1ed      	bne.n	106ec <__ieee754_sqrt+0x40>
   10710:	4684      	mov	ip, r0
   10712:	2420      	movs	r4, #32
   10714:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   10718:	e009      	b.n	1072e <__ieee754_sqrt+0x82>
   1071a:	d020      	beq.n	1075e <__ieee754_sqrt+0xb2>
   1071c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   10720:	3c01      	subs	r4, #1
   10722:	ea4f 0151 	mov.w	r1, r1, lsr #1
   10726:	442b      	add	r3, r5
   10728:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1072c:	d020      	beq.n	10770 <__ieee754_sqrt+0xc4>
   1072e:	4573      	cmp	r3, lr
   10730:	eb01 050c 	add.w	r5, r1, ip
   10734:	ddf1      	ble.n	1071a <__ieee754_sqrt+0x6e>
   10736:	2d00      	cmp	r5, #0
   10738:	eb05 0c01 	add.w	ip, r5, r1
   1073c:	db09      	blt.n	10752 <__ieee754_sqrt+0xa6>
   1073e:	46f0      	mov	r8, lr
   10740:	4295      	cmp	r5, r2
   10742:	eba3 030e 	sub.w	r3, r3, lr
   10746:	d900      	bls.n	1074a <__ieee754_sqrt+0x9e>
   10748:	3b01      	subs	r3, #1
   1074a:	1b52      	subs	r2, r2, r5
   1074c:	4408      	add	r0, r1
   1074e:	46c6      	mov	lr, r8
   10750:	e7e4      	b.n	1071c <__ieee754_sqrt+0x70>
   10752:	f1bc 0f00 	cmp.w	ip, #0
   10756:	dbf2      	blt.n	1073e <__ieee754_sqrt+0x92>
   10758:	f10e 0801 	add.w	r8, lr, #1
   1075c:	e7f0      	b.n	10740 <__ieee754_sqrt+0x94>
   1075e:	4295      	cmp	r5, r2
   10760:	d8dc      	bhi.n	1071c <__ieee754_sqrt+0x70>
   10762:	2d00      	cmp	r5, #0
   10764:	eb05 0c01 	add.w	ip, r5, r1
   10768:	db44      	blt.n	107f4 <__ieee754_sqrt+0x148>
   1076a:	4698      	mov	r8, r3
   1076c:	2300      	movs	r3, #0
   1076e:	e7ec      	b.n	1074a <__ieee754_sqrt+0x9e>
   10770:	4313      	orrs	r3, r2
   10772:	d113      	bne.n	1079c <__ieee754_sqrt+0xf0>
   10774:	0840      	lsrs	r0, r0, #1
   10776:	1073      	asrs	r3, r6, #1
   10778:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1077c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   10780:	07f2      	lsls	r2, r6, #31
   10782:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   10786:	bf48      	it	mi
   10788:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1078c:	4649      	mov	r1, r9
   1078e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10792:	005b      	lsls	r3, r3, #1
   10794:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   10798:	0052      	lsls	r2, r2, #1
   1079a:	e79d      	b.n	106d8 <__ieee754_sqrt+0x2c>
   1079c:	1c41      	adds	r1, r0, #1
   1079e:	d02d      	beq.n	107fc <__ieee754_sqrt+0x150>
   107a0:	3001      	adds	r0, #1
   107a2:	e7e7      	b.n	10774 <__ieee754_sqrt+0xc8>
   107a4:	4606      	mov	r6, r0
   107a6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   107aa:	433e      	orrs	r6, r7
   107ac:	d0ef      	beq.n	1078e <__ieee754_sqrt+0xe2>
   107ae:	bb69      	cbnz	r1, 1080c <__ieee754_sqrt+0x160>
   107b0:	460f      	mov	r7, r1
   107b2:	0ad3      	lsrs	r3, r2, #11
   107b4:	3f15      	subs	r7, #21
   107b6:	0552      	lsls	r2, r2, #21
   107b8:	2b00      	cmp	r3, #0
   107ba:	d0fa      	beq.n	107b2 <__ieee754_sqrt+0x106>
   107bc:	02de      	lsls	r6, r3, #11
   107be:	d420      	bmi.n	10802 <__ieee754_sqrt+0x156>
   107c0:	2400      	movs	r4, #0
   107c2:	e000      	b.n	107c6 <__ieee754_sqrt+0x11a>
   107c4:	4604      	mov	r4, r0
   107c6:	005b      	lsls	r3, r3, #1
   107c8:	02dd      	lsls	r5, r3, #11
   107ca:	f104 0001 	add.w	r0, r4, #1
   107ce:	d5f9      	bpl.n	107c4 <__ieee754_sqrt+0x118>
   107d0:	f1c0 0120 	rsb	r1, r0, #32
   107d4:	fa22 f101 	lsr.w	r1, r2, r1
   107d8:	430b      	orrs	r3, r1
   107da:	1b3f      	subs	r7, r7, r4
   107dc:	4082      	lsls	r2, r0
   107de:	e773      	b.n	106c8 <__ieee754_sqrt+0x1c>
   107e0:	4602      	mov	r2, r0
   107e2:	460b      	mov	r3, r1
   107e4:	f000 fafa 	bl	10ddc <__aeabi_dmul>
   107e8:	462a      	mov	r2, r5
   107ea:	4623      	mov	r3, r4
   107ec:	f000 f944 	bl	10a78 <__adddf3>
   107f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   107f4:	f1bc 0f00 	cmp.w	ip, #0
   107f8:	daae      	bge.n	10758 <__ieee754_sqrt+0xac>
   107fa:	e7b6      	b.n	1076a <__ieee754_sqrt+0xbe>
   107fc:	3601      	adds	r6, #1
   107fe:	4620      	mov	r0, r4
   10800:	e7b9      	b.n	10776 <__ieee754_sqrt+0xca>
   10802:	2000      	movs	r0, #0
   10804:	2120      	movs	r1, #32
   10806:	f04f 34ff 	mov.w	r4, #4294967295
   1080a:	e7e3      	b.n	107d4 <__ieee754_sqrt+0x128>
   1080c:	4602      	mov	r2, r0
   1080e:	460b      	mov	r3, r1
   10810:	f000 f930 	bl	10a74 <__aeabi_dsub>
   10814:	4602      	mov	r2, r0
   10816:	460b      	mov	r3, r1
   10818:	f000 fc0a 	bl	11030 <__aeabi_ddiv>
   1081c:	e7b7      	b.n	1078e <__ieee754_sqrt+0xe2>
   1081e:	bf00      	nop
   10820:	7ff00000 	.word	0x7ff00000

00010824 <fabs>:
   10824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10828:	4770      	bx	lr
   1082a:	bf00      	nop

0001082c <finite>:
   1082c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   10830:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   10834:	0fc0      	lsrs	r0, r0, #31
   10836:	4770      	bx	lr

00010838 <matherr>:
   10838:	2000      	movs	r0, #0
   1083a:	4770      	bx	lr

0001083c <nan>:
   1083c:	2000      	movs	r0, #0
   1083e:	4901      	ldr	r1, [pc, #4]	; (10844 <nan+0x8>)
   10840:	4770      	bx	lr
   10842:	bf00      	nop
   10844:	7ff80000 	.word	0x7ff80000

00010848 <rint>:
   10848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1084a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1084e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   10852:	2e13      	cmp	r6, #19
   10854:	b083      	sub	sp, #12
   10856:	4602      	mov	r2, r0
   10858:	460b      	mov	r3, r1
   1085a:	460c      	mov	r4, r1
   1085c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   10860:	4607      	mov	r7, r0
   10862:	dc2e      	bgt.n	108c2 <rint+0x7a>
   10864:	2e00      	cmp	r6, #0
   10866:	db49      	blt.n	108fc <rint+0xb4>
   10868:	493a      	ldr	r1, [pc, #232]	; (10954 <rint+0x10c>)
   1086a:	4131      	asrs	r1, r6
   1086c:	ea03 0001 	and.w	r0, r3, r1
   10870:	4310      	orrs	r0, r2
   10872:	d02b      	beq.n	108cc <rint+0x84>
   10874:	0849      	lsrs	r1, r1, #1
   10876:	400b      	ands	r3, r1
   10878:	ea53 0702 	orrs.w	r7, r3, r2
   1087c:	d00c      	beq.n	10898 <rint+0x50>
   1087e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   10882:	2e13      	cmp	r6, #19
   10884:	ea24 0101 	bic.w	r1, r4, r1
   10888:	fa43 f406 	asr.w	r4, r3, r6
   1088c:	ea44 0401 	orr.w	r4, r4, r1
   10890:	bf0c      	ite	eq
   10892:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   10896:	2700      	movne	r7, #0
   10898:	4b2f      	ldr	r3, [pc, #188]	; (10958 <rint+0x110>)
   1089a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1089e:	4621      	mov	r1, r4
   108a0:	e9d5 4500 	ldrd	r4, r5, [r5]
   108a4:	4638      	mov	r0, r7
   108a6:	4622      	mov	r2, r4
   108a8:	462b      	mov	r3, r5
   108aa:	f000 f8e5 	bl	10a78 <__adddf3>
   108ae:	e9cd 0100 	strd	r0, r1, [sp]
   108b2:	4622      	mov	r2, r4
   108b4:	462b      	mov	r3, r5
   108b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   108ba:	f000 f8db 	bl	10a74 <__aeabi_dsub>
   108be:	b003      	add	sp, #12
   108c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108c2:	2e33      	cmp	r6, #51	; 0x33
   108c4:	dd06      	ble.n	108d4 <rint+0x8c>
   108c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   108ca:	d040      	beq.n	1094e <rint+0x106>
   108cc:	4610      	mov	r0, r2
   108ce:	4619      	mov	r1, r3
   108d0:	b003      	add	sp, #12
   108d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108d4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   108d8:	f04f 31ff 	mov.w	r1, #4294967295
   108dc:	fa21 f10e 	lsr.w	r1, r1, lr
   108e0:	4208      	tst	r0, r1
   108e2:	d0f3      	beq.n	108cc <rint+0x84>
   108e4:	0849      	lsrs	r1, r1, #1
   108e6:	4208      	tst	r0, r1
   108e8:	d0d6      	beq.n	10898 <rint+0x50>
   108ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   108ee:	ea20 0101 	bic.w	r1, r0, r1
   108f2:	fa43 fe0e 	asr.w	lr, r3, lr
   108f6:	ea4e 0701 	orr.w	r7, lr, r1
   108fa:	e7cd      	b.n	10898 <rint+0x50>
   108fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10900:	4301      	orrs	r1, r0
   10902:	d0e3      	beq.n	108cc <rint+0x84>
   10904:	f3c3 0113 	ubfx	r1, r3, #0, #20
   10908:	4e13      	ldr	r6, [pc, #76]	; (10958 <rint+0x110>)
   1090a:	4301      	orrs	r1, r0
   1090c:	f1c1 0c00 	rsb	ip, r1, #0
   10910:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   10914:	e9d6 6700 	ldrd	r6, r7, [r6]
   10918:	ea4c 0c01 	orr.w	ip, ip, r1
   1091c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   10920:	0c5c      	lsrs	r4, r3, #17
   10922:	0464      	lsls	r4, r4, #17
   10924:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   10928:	ea43 0104 	orr.w	r1, r3, r4
   1092c:	4632      	mov	r2, r6
   1092e:	463b      	mov	r3, r7
   10930:	f000 f8a2 	bl	10a78 <__adddf3>
   10934:	e9cd 0100 	strd	r0, r1, [sp]
   10938:	4632      	mov	r2, r6
   1093a:	463b      	mov	r3, r7
   1093c:	e9dd 0100 	ldrd	r0, r1, [sp]
   10940:	f000 f898 	bl	10a74 <__aeabi_dsub>
   10944:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   10948:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1094c:	e7c0      	b.n	108d0 <rint+0x88>
   1094e:	f000 f893 	bl	10a78 <__adddf3>
   10952:	e7bd      	b.n	108d0 <rint+0x88>
   10954:	000fffff 	.word	0x000fffff
   10958:	000129c0 	.word	0x000129c0
   1095c:	00000000 	.word	0x00000000

00010960 <scalbn>:
   10960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10962:	f3c1 560a 	ubfx	r6, r1, #20, #11
   10966:	4604      	mov	r4, r0
   10968:	460d      	mov	r5, r1
   1096a:	460b      	mov	r3, r1
   1096c:	4617      	mov	r7, r2
   1096e:	bb0e      	cbnz	r6, 109b4 <scalbn+0x54>
   10970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10974:	4303      	orrs	r3, r0
   10976:	4686      	mov	lr, r0
   10978:	d025      	beq.n	109c6 <scalbn+0x66>
   1097a:	2200      	movs	r2, #0
   1097c:	4b34      	ldr	r3, [pc, #208]	; (10a50 <scalbn+0xf0>)
   1097e:	f000 fa2d 	bl	10ddc <__aeabi_dmul>
   10982:	4a34      	ldr	r2, [pc, #208]	; (10a54 <scalbn+0xf4>)
   10984:	4297      	cmp	r7, r2
   10986:	4604      	mov	r4, r0
   10988:	460d      	mov	r5, r1
   1098a:	460b      	mov	r3, r1
   1098c:	db2a      	blt.n	109e4 <scalbn+0x84>
   1098e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   10992:	3e36      	subs	r6, #54	; 0x36
   10994:	443e      	add	r6, r7
   10996:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1099a:	4296      	cmp	r6, r2
   1099c:	dc28      	bgt.n	109f0 <scalbn+0x90>
   1099e:	2e00      	cmp	r6, #0
   109a0:	dd12      	ble.n	109c8 <scalbn+0x68>
   109a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   109a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   109aa:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   109ae:	4620      	mov	r0, r4
   109b0:	4629      	mov	r1, r5
   109b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109b4:	f240 72ff 	movw	r2, #2047	; 0x7ff
   109b8:	4296      	cmp	r6, r2
   109ba:	d1eb      	bne.n	10994 <scalbn+0x34>
   109bc:	4602      	mov	r2, r0
   109be:	460b      	mov	r3, r1
   109c0:	f000 f85a 	bl	10a78 <__adddf3>
   109c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109c8:	f116 0f35 	cmn.w	r6, #53	; 0x35
   109cc:	da1d      	bge.n	10a0a <scalbn+0xaa>
   109ce:	f24c 3350 	movw	r3, #50000	; 0xc350
   109d2:	429f      	cmp	r7, r3
   109d4:	4622      	mov	r2, r4
   109d6:	462b      	mov	r3, r5
   109d8:	dc25      	bgt.n	10a26 <scalbn+0xc6>
   109da:	a119      	add	r1, pc, #100	; (adr r1, 10a40 <scalbn+0xe0>)
   109dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   109e0:	f000 f83c 	bl	10a5c <copysign>
   109e4:	a316      	add	r3, pc, #88	; (adr r3, 10a40 <scalbn+0xe0>)
   109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   109ea:	f000 f9f7 	bl	10ddc <__aeabi_dmul>
   109ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109f0:	4622      	mov	r2, r4
   109f2:	462b      	mov	r3, r5
   109f4:	a114      	add	r1, pc, #80	; (adr r1, 10a48 <scalbn+0xe8>)
   109f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   109fa:	f000 f82f 	bl	10a5c <copysign>
   109fe:	a312      	add	r3, pc, #72	; (adr r3, 10a48 <scalbn+0xe8>)
   10a00:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a04:	f000 f9ea 	bl	10ddc <__aeabi_dmul>
   10a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   10a0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   10a12:	3636      	adds	r6, #54	; 0x36
   10a14:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   10a18:	4620      	mov	r0, r4
   10a1a:	4629      	mov	r1, r5
   10a1c:	2200      	movs	r2, #0
   10a1e:	4b0e      	ldr	r3, [pc, #56]	; (10a58 <scalbn+0xf8>)
   10a20:	f000 f9dc 	bl	10ddc <__aeabi_dmul>
   10a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a26:	a108      	add	r1, pc, #32	; (adr r1, 10a48 <scalbn+0xe8>)
   10a28:	e9d1 0100 	ldrd	r0, r1, [r1]
   10a2c:	f000 f816 	bl	10a5c <copysign>
   10a30:	a305      	add	r3, pc, #20	; (adr r3, 10a48 <scalbn+0xe8>)
   10a32:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a36:	f000 f9d1 	bl	10ddc <__aeabi_dmul>
   10a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a3c:	f3af 8000 	nop.w
   10a40:	c2f8f359 	.word	0xc2f8f359
   10a44:	01a56e1f 	.word	0x01a56e1f
   10a48:	8800759c 	.word	0x8800759c
   10a4c:	7e37e43c 	.word	0x7e37e43c
   10a50:	43500000 	.word	0x43500000
   10a54:	ffff3cb0 	.word	0xffff3cb0
   10a58:	3c900000 	.word	0x3c900000

00010a5c <copysign>:
   10a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   10a60:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   10a64:	ea42 0103 	orr.w	r1, r2, r3
   10a68:	4770      	bx	lr
   10a6a:	bf00      	nop

00010a6c <__aeabi_drsub>:
   10a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10a70:	e002      	b.n	10a78 <__adddf3>
   10a72:	bf00      	nop

00010a74 <__aeabi_dsub>:
   10a74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00010a78 <__adddf3>:
   10a78:	b530      	push	{r4, r5, lr}
   10a7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10a7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10a82:	ea94 0f05 	teq	r4, r5
   10a86:	bf08      	it	eq
   10a88:	ea90 0f02 	teqeq	r0, r2
   10a8c:	bf1f      	itttt	ne
   10a8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   10a92:	ea55 0c02 	orrsne.w	ip, r5, r2
   10a96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   10a9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10a9e:	f000 80e2 	beq.w	10c66 <__adddf3+0x1ee>
   10aa2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   10aa6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   10aaa:	bfb8      	it	lt
   10aac:	426d      	neglt	r5, r5
   10aae:	dd0c      	ble.n	10aca <__adddf3+0x52>
   10ab0:	442c      	add	r4, r5
   10ab2:	ea80 0202 	eor.w	r2, r0, r2
   10ab6:	ea81 0303 	eor.w	r3, r1, r3
   10aba:	ea82 0000 	eor.w	r0, r2, r0
   10abe:	ea83 0101 	eor.w	r1, r3, r1
   10ac2:	ea80 0202 	eor.w	r2, r0, r2
   10ac6:	ea81 0303 	eor.w	r3, r1, r3
   10aca:	2d36      	cmp	r5, #54	; 0x36
   10acc:	bf88      	it	hi
   10ace:	bd30      	pophi	{r4, r5, pc}
   10ad0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10ad4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10ad8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10adc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   10ae0:	d002      	beq.n	10ae8 <__adddf3+0x70>
   10ae2:	4240      	negs	r0, r0
   10ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10ae8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10aec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10af0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10af4:	d002      	beq.n	10afc <__adddf3+0x84>
   10af6:	4252      	negs	r2, r2
   10af8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10afc:	ea94 0f05 	teq	r4, r5
   10b00:	f000 80a7 	beq.w	10c52 <__adddf3+0x1da>
   10b04:	f1a4 0401 	sub.w	r4, r4, #1
   10b08:	f1d5 0e20 	rsbs	lr, r5, #32
   10b0c:	db0d      	blt.n	10b2a <__adddf3+0xb2>
   10b0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   10b12:	fa22 f205 	lsr.w	r2, r2, r5
   10b16:	1880      	adds	r0, r0, r2
   10b18:	f141 0100 	adc.w	r1, r1, #0
   10b1c:	fa03 f20e 	lsl.w	r2, r3, lr
   10b20:	1880      	adds	r0, r0, r2
   10b22:	fa43 f305 	asr.w	r3, r3, r5
   10b26:	4159      	adcs	r1, r3
   10b28:	e00e      	b.n	10b48 <__adddf3+0xd0>
   10b2a:	f1a5 0520 	sub.w	r5, r5, #32
   10b2e:	f10e 0e20 	add.w	lr, lr, #32
   10b32:	2a01      	cmp	r2, #1
   10b34:	fa03 fc0e 	lsl.w	ip, r3, lr
   10b38:	bf28      	it	cs
   10b3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   10b3e:	fa43 f305 	asr.w	r3, r3, r5
   10b42:	18c0      	adds	r0, r0, r3
   10b44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10b48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10b4c:	d507      	bpl.n	10b5e <__adddf3+0xe6>
   10b4e:	f04f 0e00 	mov.w	lr, #0
   10b52:	f1dc 0c00 	rsbs	ip, ip, #0
   10b56:	eb7e 0000 	sbcs.w	r0, lr, r0
   10b5a:	eb6e 0101 	sbc.w	r1, lr, r1
   10b5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10b62:	d31b      	bcc.n	10b9c <__adddf3+0x124>
   10b64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   10b68:	d30c      	bcc.n	10b84 <__adddf3+0x10c>
   10b6a:	0849      	lsrs	r1, r1, #1
   10b6c:	ea5f 0030 	movs.w	r0, r0, rrx
   10b70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10b74:	f104 0401 	add.w	r4, r4, #1
   10b78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10b7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10b80:	f080 809a 	bcs.w	10cb8 <__adddf3+0x240>
   10b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10b88:	bf08      	it	eq
   10b8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10b8e:	f150 0000 	adcs.w	r0, r0, #0
   10b92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10b96:	ea41 0105 	orr.w	r1, r1, r5
   10b9a:	bd30      	pop	{r4, r5, pc}
   10b9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10ba0:	4140      	adcs	r0, r0
   10ba2:	eb41 0101 	adc.w	r1, r1, r1
   10ba6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10baa:	f1a4 0401 	sub.w	r4, r4, #1
   10bae:	d1e9      	bne.n	10b84 <__adddf3+0x10c>
   10bb0:	f091 0f00 	teq	r1, #0
   10bb4:	bf04      	itt	eq
   10bb6:	4601      	moveq	r1, r0
   10bb8:	2000      	moveq	r0, #0
   10bba:	fab1 f381 	clz	r3, r1
   10bbe:	bf08      	it	eq
   10bc0:	3320      	addeq	r3, #32
   10bc2:	f1a3 030b 	sub.w	r3, r3, #11
   10bc6:	f1b3 0220 	subs.w	r2, r3, #32
   10bca:	da0c      	bge.n	10be6 <__adddf3+0x16e>
   10bcc:	320c      	adds	r2, #12
   10bce:	dd08      	ble.n	10be2 <__adddf3+0x16a>
   10bd0:	f102 0c14 	add.w	ip, r2, #20
   10bd4:	f1c2 020c 	rsb	r2, r2, #12
   10bd8:	fa01 f00c 	lsl.w	r0, r1, ip
   10bdc:	fa21 f102 	lsr.w	r1, r1, r2
   10be0:	e00c      	b.n	10bfc <__adddf3+0x184>
   10be2:	f102 0214 	add.w	r2, r2, #20
   10be6:	bfd8      	it	le
   10be8:	f1c2 0c20 	rsble	ip, r2, #32
   10bec:	fa01 f102 	lsl.w	r1, r1, r2
   10bf0:	fa20 fc0c 	lsr.w	ip, r0, ip
   10bf4:	bfdc      	itt	le
   10bf6:	ea41 010c 	orrle.w	r1, r1, ip
   10bfa:	4090      	lslle	r0, r2
   10bfc:	1ae4      	subs	r4, r4, r3
   10bfe:	bfa2      	ittt	ge
   10c00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10c04:	4329      	orrge	r1, r5
   10c06:	bd30      	popge	{r4, r5, pc}
   10c08:	ea6f 0404 	mvn.w	r4, r4
   10c0c:	3c1f      	subs	r4, #31
   10c0e:	da1c      	bge.n	10c4a <__adddf3+0x1d2>
   10c10:	340c      	adds	r4, #12
   10c12:	dc0e      	bgt.n	10c32 <__adddf3+0x1ba>
   10c14:	f104 0414 	add.w	r4, r4, #20
   10c18:	f1c4 0220 	rsb	r2, r4, #32
   10c1c:	fa20 f004 	lsr.w	r0, r0, r4
   10c20:	fa01 f302 	lsl.w	r3, r1, r2
   10c24:	ea40 0003 	orr.w	r0, r0, r3
   10c28:	fa21 f304 	lsr.w	r3, r1, r4
   10c2c:	ea45 0103 	orr.w	r1, r5, r3
   10c30:	bd30      	pop	{r4, r5, pc}
   10c32:	f1c4 040c 	rsb	r4, r4, #12
   10c36:	f1c4 0220 	rsb	r2, r4, #32
   10c3a:	fa20 f002 	lsr.w	r0, r0, r2
   10c3e:	fa01 f304 	lsl.w	r3, r1, r4
   10c42:	ea40 0003 	orr.w	r0, r0, r3
   10c46:	4629      	mov	r1, r5
   10c48:	bd30      	pop	{r4, r5, pc}
   10c4a:	fa21 f004 	lsr.w	r0, r1, r4
   10c4e:	4629      	mov	r1, r5
   10c50:	bd30      	pop	{r4, r5, pc}
   10c52:	f094 0f00 	teq	r4, #0
   10c56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   10c5a:	bf06      	itte	eq
   10c5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10c60:	3401      	addeq	r4, #1
   10c62:	3d01      	subne	r5, #1
   10c64:	e74e      	b.n	10b04 <__adddf3+0x8c>
   10c66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10c6a:	bf18      	it	ne
   10c6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10c70:	d029      	beq.n	10cc6 <__adddf3+0x24e>
   10c72:	ea94 0f05 	teq	r4, r5
   10c76:	bf08      	it	eq
   10c78:	ea90 0f02 	teqeq	r0, r2
   10c7c:	d005      	beq.n	10c8a <__adddf3+0x212>
   10c7e:	ea54 0c00 	orrs.w	ip, r4, r0
   10c82:	bf04      	itt	eq
   10c84:	4619      	moveq	r1, r3
   10c86:	4610      	moveq	r0, r2
   10c88:	bd30      	pop	{r4, r5, pc}
   10c8a:	ea91 0f03 	teq	r1, r3
   10c8e:	bf1e      	ittt	ne
   10c90:	2100      	movne	r1, #0
   10c92:	2000      	movne	r0, #0
   10c94:	bd30      	popne	{r4, r5, pc}
   10c96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   10c9a:	d105      	bne.n	10ca8 <__adddf3+0x230>
   10c9c:	0040      	lsls	r0, r0, #1
   10c9e:	4149      	adcs	r1, r1
   10ca0:	bf28      	it	cs
   10ca2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   10ca6:	bd30      	pop	{r4, r5, pc}
   10ca8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10cac:	bf3c      	itt	cc
   10cae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10cb2:	bd30      	popcc	{r4, r5, pc}
   10cb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10cb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10cbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10cc0:	f04f 0000 	mov.w	r0, #0
   10cc4:	bd30      	pop	{r4, r5, pc}
   10cc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10cca:	bf1a      	itte	ne
   10ccc:	4619      	movne	r1, r3
   10cce:	4610      	movne	r0, r2
   10cd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   10cd4:	bf1c      	itt	ne
   10cd6:	460b      	movne	r3, r1
   10cd8:	4602      	movne	r2, r0
   10cda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10cde:	bf06      	itte	eq
   10ce0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   10ce4:	ea91 0f03 	teqeq	r1, r3
   10ce8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   10cec:	bd30      	pop	{r4, r5, pc}
   10cee:	bf00      	nop

00010cf0 <__aeabi_ui2d>:
   10cf0:	f090 0f00 	teq	r0, #0
   10cf4:	bf04      	itt	eq
   10cf6:	2100      	moveq	r1, #0
   10cf8:	4770      	bxeq	lr
   10cfa:	b530      	push	{r4, r5, lr}
   10cfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10d00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10d04:	f04f 0500 	mov.w	r5, #0
   10d08:	f04f 0100 	mov.w	r1, #0
   10d0c:	e750      	b.n	10bb0 <__adddf3+0x138>
   10d0e:	bf00      	nop

00010d10 <__aeabi_i2d>:
   10d10:	f090 0f00 	teq	r0, #0
   10d14:	bf04      	itt	eq
   10d16:	2100      	moveq	r1, #0
   10d18:	4770      	bxeq	lr
   10d1a:	b530      	push	{r4, r5, lr}
   10d1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10d20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10d24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   10d28:	bf48      	it	mi
   10d2a:	4240      	negmi	r0, r0
   10d2c:	f04f 0100 	mov.w	r1, #0
   10d30:	e73e      	b.n	10bb0 <__adddf3+0x138>
   10d32:	bf00      	nop

00010d34 <__aeabi_f2d>:
   10d34:	0042      	lsls	r2, r0, #1
   10d36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   10d3a:	ea4f 0131 	mov.w	r1, r1, rrx
   10d3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10d42:	bf1f      	itttt	ne
   10d44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10d48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10d4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10d50:	4770      	bxne	lr
   10d52:	f092 0f00 	teq	r2, #0
   10d56:	bf14      	ite	ne
   10d58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10d5c:	4770      	bxeq	lr
   10d5e:	b530      	push	{r4, r5, lr}
   10d60:	f44f 7460 	mov.w	r4, #896	; 0x380
   10d64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10d68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10d6c:	e720      	b.n	10bb0 <__adddf3+0x138>
   10d6e:	bf00      	nop

00010d70 <__aeabi_ul2d>:
   10d70:	ea50 0201 	orrs.w	r2, r0, r1
   10d74:	bf08      	it	eq
   10d76:	4770      	bxeq	lr
   10d78:	b530      	push	{r4, r5, lr}
   10d7a:	f04f 0500 	mov.w	r5, #0
   10d7e:	e00a      	b.n	10d96 <__aeabi_l2d+0x16>

00010d80 <__aeabi_l2d>:
   10d80:	ea50 0201 	orrs.w	r2, r0, r1
   10d84:	bf08      	it	eq
   10d86:	4770      	bxeq	lr
   10d88:	b530      	push	{r4, r5, lr}
   10d8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   10d8e:	d502      	bpl.n	10d96 <__aeabi_l2d+0x16>
   10d90:	4240      	negs	r0, r0
   10d92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10d96:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10d9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10d9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   10da2:	f43f aedc 	beq.w	10b5e <__adddf3+0xe6>
   10da6:	f04f 0203 	mov.w	r2, #3
   10daa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10dae:	bf18      	it	ne
   10db0:	3203      	addne	r2, #3
   10db2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10db6:	bf18      	it	ne
   10db8:	3203      	addne	r2, #3
   10dba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   10dbe:	f1c2 0320 	rsb	r3, r2, #32
   10dc2:	fa00 fc03 	lsl.w	ip, r0, r3
   10dc6:	fa20 f002 	lsr.w	r0, r0, r2
   10dca:	fa01 fe03 	lsl.w	lr, r1, r3
   10dce:	ea40 000e 	orr.w	r0, r0, lr
   10dd2:	fa21 f102 	lsr.w	r1, r1, r2
   10dd6:	4414      	add	r4, r2
   10dd8:	e6c1      	b.n	10b5e <__adddf3+0xe6>
   10dda:	bf00      	nop

00010ddc <__aeabi_dmul>:
   10ddc:	b570      	push	{r4, r5, r6, lr}
   10dde:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10de2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10de6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10dea:	bf1d      	ittte	ne
   10dec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10df0:	ea94 0f0c 	teqne	r4, ip
   10df4:	ea95 0f0c 	teqne	r5, ip
   10df8:	f000 f8de 	bleq	10fb8 <__aeabi_dmul+0x1dc>
   10dfc:	442c      	add	r4, r5
   10dfe:	ea81 0603 	eor.w	r6, r1, r3
   10e02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   10e06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   10e0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   10e0e:	bf18      	it	ne
   10e10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   10e14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10e1c:	d038      	beq.n	10e90 <__aeabi_dmul+0xb4>
   10e1e:	fba0 ce02 	umull	ip, lr, r0, r2
   10e22:	f04f 0500 	mov.w	r5, #0
   10e26:	fbe1 e502 	umlal	lr, r5, r1, r2
   10e2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   10e2e:	fbe0 e503 	umlal	lr, r5, r0, r3
   10e32:	f04f 0600 	mov.w	r6, #0
   10e36:	fbe1 5603 	umlal	r5, r6, r1, r3
   10e3a:	f09c 0f00 	teq	ip, #0
   10e3e:	bf18      	it	ne
   10e40:	f04e 0e01 	orrne.w	lr, lr, #1
   10e44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10e48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10e4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10e50:	d204      	bcs.n	10e5c <__aeabi_dmul+0x80>
   10e52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10e56:	416d      	adcs	r5, r5
   10e58:	eb46 0606 	adc.w	r6, r6, r6
   10e5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   10e60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10e64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10e68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10e6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   10e70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10e74:	bf88      	it	hi
   10e76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10e7a:	d81e      	bhi.n	10eba <__aeabi_dmul+0xde>
   10e7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   10e80:	bf08      	it	eq
   10e82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10e86:	f150 0000 	adcs.w	r0, r0, #0
   10e8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10e8e:	bd70      	pop	{r4, r5, r6, pc}
   10e90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10e94:	ea46 0101 	orr.w	r1, r6, r1
   10e98:	ea40 0002 	orr.w	r0, r0, r2
   10e9c:	ea81 0103 	eor.w	r1, r1, r3
   10ea0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10ea4:	bfc2      	ittt	gt
   10ea6:	ebd4 050c 	rsbsgt	r5, r4, ip
   10eaa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10eae:	bd70      	popgt	{r4, r5, r6, pc}
   10eb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10eb4:	f04f 0e00 	mov.w	lr, #0
   10eb8:	3c01      	subs	r4, #1
   10eba:	f300 80ab 	bgt.w	11014 <__aeabi_dmul+0x238>
   10ebe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   10ec2:	bfde      	ittt	le
   10ec4:	2000      	movle	r0, #0
   10ec6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   10eca:	bd70      	pople	{r4, r5, r6, pc}
   10ecc:	f1c4 0400 	rsb	r4, r4, #0
   10ed0:	3c20      	subs	r4, #32
   10ed2:	da35      	bge.n	10f40 <__aeabi_dmul+0x164>
   10ed4:	340c      	adds	r4, #12
   10ed6:	dc1b      	bgt.n	10f10 <__aeabi_dmul+0x134>
   10ed8:	f104 0414 	add.w	r4, r4, #20
   10edc:	f1c4 0520 	rsb	r5, r4, #32
   10ee0:	fa00 f305 	lsl.w	r3, r0, r5
   10ee4:	fa20 f004 	lsr.w	r0, r0, r4
   10ee8:	fa01 f205 	lsl.w	r2, r1, r5
   10eec:	ea40 0002 	orr.w	r0, r0, r2
   10ef0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   10ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10ef8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10efc:	fa21 f604 	lsr.w	r6, r1, r4
   10f00:	eb42 0106 	adc.w	r1, r2, r6
   10f04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10f08:	bf08      	it	eq
   10f0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10f0e:	bd70      	pop	{r4, r5, r6, pc}
   10f10:	f1c4 040c 	rsb	r4, r4, #12
   10f14:	f1c4 0520 	rsb	r5, r4, #32
   10f18:	fa00 f304 	lsl.w	r3, r0, r4
   10f1c:	fa20 f005 	lsr.w	r0, r0, r5
   10f20:	fa01 f204 	lsl.w	r2, r1, r4
   10f24:	ea40 0002 	orr.w	r0, r0, r2
   10f28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10f2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10f30:	f141 0100 	adc.w	r1, r1, #0
   10f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10f38:	bf08      	it	eq
   10f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10f3e:	bd70      	pop	{r4, r5, r6, pc}
   10f40:	f1c4 0520 	rsb	r5, r4, #32
   10f44:	fa00 f205 	lsl.w	r2, r0, r5
   10f48:	ea4e 0e02 	orr.w	lr, lr, r2
   10f4c:	fa20 f304 	lsr.w	r3, r0, r4
   10f50:	fa01 f205 	lsl.w	r2, r1, r5
   10f54:	ea43 0302 	orr.w	r3, r3, r2
   10f58:	fa21 f004 	lsr.w	r0, r1, r4
   10f5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10f60:	fa21 f204 	lsr.w	r2, r1, r4
   10f64:	ea20 0002 	bic.w	r0, r0, r2
   10f68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10f6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10f70:	bf08      	it	eq
   10f72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10f76:	bd70      	pop	{r4, r5, r6, pc}
   10f78:	f094 0f00 	teq	r4, #0
   10f7c:	d10f      	bne.n	10f9e <__aeabi_dmul+0x1c2>
   10f7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   10f82:	0040      	lsls	r0, r0, #1
   10f84:	eb41 0101 	adc.w	r1, r1, r1
   10f88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10f8c:	bf08      	it	eq
   10f8e:	3c01      	subeq	r4, #1
   10f90:	d0f7      	beq.n	10f82 <__aeabi_dmul+0x1a6>
   10f92:	ea41 0106 	orr.w	r1, r1, r6
   10f96:	f095 0f00 	teq	r5, #0
   10f9a:	bf18      	it	ne
   10f9c:	4770      	bxne	lr
   10f9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   10fa2:	0052      	lsls	r2, r2, #1
   10fa4:	eb43 0303 	adc.w	r3, r3, r3
   10fa8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10fac:	bf08      	it	eq
   10fae:	3d01      	subeq	r5, #1
   10fb0:	d0f7      	beq.n	10fa2 <__aeabi_dmul+0x1c6>
   10fb2:	ea43 0306 	orr.w	r3, r3, r6
   10fb6:	4770      	bx	lr
   10fb8:	ea94 0f0c 	teq	r4, ip
   10fbc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10fc0:	bf18      	it	ne
   10fc2:	ea95 0f0c 	teqne	r5, ip
   10fc6:	d00c      	beq.n	10fe2 <__aeabi_dmul+0x206>
   10fc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10fcc:	bf18      	it	ne
   10fce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10fd2:	d1d1      	bne.n	10f78 <__aeabi_dmul+0x19c>
   10fd4:	ea81 0103 	eor.w	r1, r1, r3
   10fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10fdc:	f04f 0000 	mov.w	r0, #0
   10fe0:	bd70      	pop	{r4, r5, r6, pc}
   10fe2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10fe6:	bf06      	itte	eq
   10fe8:	4610      	moveq	r0, r2
   10fea:	4619      	moveq	r1, r3
   10fec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10ff0:	d019      	beq.n	11026 <__aeabi_dmul+0x24a>
   10ff2:	ea94 0f0c 	teq	r4, ip
   10ff6:	d102      	bne.n	10ffe <__aeabi_dmul+0x222>
   10ff8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   10ffc:	d113      	bne.n	11026 <__aeabi_dmul+0x24a>
   10ffe:	ea95 0f0c 	teq	r5, ip
   11002:	d105      	bne.n	11010 <__aeabi_dmul+0x234>
   11004:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   11008:	bf1c      	itt	ne
   1100a:	4610      	movne	r0, r2
   1100c:	4619      	movne	r1, r3
   1100e:	d10a      	bne.n	11026 <__aeabi_dmul+0x24a>
   11010:	ea81 0103 	eor.w	r1, r1, r3
   11014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11018:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1101c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   11020:	f04f 0000 	mov.w	r0, #0
   11024:	bd70      	pop	{r4, r5, r6, pc}
   11026:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1102a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1102e:	bd70      	pop	{r4, r5, r6, pc}

00011030 <__aeabi_ddiv>:
   11030:	b570      	push	{r4, r5, r6, lr}
   11032:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11036:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1103a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1103e:	bf1d      	ittte	ne
   11040:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   11044:	ea94 0f0c 	teqne	r4, ip
   11048:	ea95 0f0c 	teqne	r5, ip
   1104c:	f000 f8a7 	bleq	1119e <__aeabi_ddiv+0x16e>
   11050:	eba4 0405 	sub.w	r4, r4, r5
   11054:	ea81 0e03 	eor.w	lr, r1, r3
   11058:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1105c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   11060:	f000 8088 	beq.w	11174 <__aeabi_ddiv+0x144>
   11064:	ea4f 3303 	mov.w	r3, r3, lsl #12
   11068:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1106c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   11070:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   11074:	ea4f 2202 	mov.w	r2, r2, lsl #8
   11078:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1107c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   11080:	ea4f 2600 	mov.w	r6, r0, lsl #8
   11084:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   11088:	429d      	cmp	r5, r3
   1108a:	bf08      	it	eq
   1108c:	4296      	cmpeq	r6, r2
   1108e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   11092:	f504 7440 	add.w	r4, r4, #768	; 0x300
   11096:	d202      	bcs.n	1109e <__aeabi_ddiv+0x6e>
   11098:	085b      	lsrs	r3, r3, #1
   1109a:	ea4f 0232 	mov.w	r2, r2, rrx
   1109e:	1ab6      	subs	r6, r6, r2
   110a0:	eb65 0503 	sbc.w	r5, r5, r3
   110a4:	085b      	lsrs	r3, r3, #1
   110a6:	ea4f 0232 	mov.w	r2, r2, rrx
   110aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   110ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   110b2:	ebb6 0e02 	subs.w	lr, r6, r2
   110b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   110ba:	bf22      	ittt	cs
   110bc:	1ab6      	subcs	r6, r6, r2
   110be:	4675      	movcs	r5, lr
   110c0:	ea40 000c 	orrcs.w	r0, r0, ip
   110c4:	085b      	lsrs	r3, r3, #1
   110c6:	ea4f 0232 	mov.w	r2, r2, rrx
   110ca:	ebb6 0e02 	subs.w	lr, r6, r2
   110ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   110d2:	bf22      	ittt	cs
   110d4:	1ab6      	subcs	r6, r6, r2
   110d6:	4675      	movcs	r5, lr
   110d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   110dc:	085b      	lsrs	r3, r3, #1
   110de:	ea4f 0232 	mov.w	r2, r2, rrx
   110e2:	ebb6 0e02 	subs.w	lr, r6, r2
   110e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   110ea:	bf22      	ittt	cs
   110ec:	1ab6      	subcs	r6, r6, r2
   110ee:	4675      	movcs	r5, lr
   110f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   110f4:	085b      	lsrs	r3, r3, #1
   110f6:	ea4f 0232 	mov.w	r2, r2, rrx
   110fa:	ebb6 0e02 	subs.w	lr, r6, r2
   110fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   11102:	bf22      	ittt	cs
   11104:	1ab6      	subcs	r6, r6, r2
   11106:	4675      	movcs	r5, lr
   11108:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1110c:	ea55 0e06 	orrs.w	lr, r5, r6
   11110:	d018      	beq.n	11144 <__aeabi_ddiv+0x114>
   11112:	ea4f 1505 	mov.w	r5, r5, lsl #4
   11116:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1111a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1111e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   11122:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   11126:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1112a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1112e:	d1c0      	bne.n	110b2 <__aeabi_ddiv+0x82>
   11130:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11134:	d10b      	bne.n	1114e <__aeabi_ddiv+0x11e>
   11136:	ea41 0100 	orr.w	r1, r1, r0
   1113a:	f04f 0000 	mov.w	r0, #0
   1113e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   11142:	e7b6      	b.n	110b2 <__aeabi_ddiv+0x82>
   11144:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11148:	bf04      	itt	eq
   1114a:	4301      	orreq	r1, r0
   1114c:	2000      	moveq	r0, #0
   1114e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11152:	bf88      	it	hi
   11154:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11158:	f63f aeaf 	bhi.w	10eba <__aeabi_dmul+0xde>
   1115c:	ebb5 0c03 	subs.w	ip, r5, r3
   11160:	bf04      	itt	eq
   11162:	ebb6 0c02 	subseq.w	ip, r6, r2
   11166:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1116a:	f150 0000 	adcs.w	r0, r0, #0
   1116e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11172:	bd70      	pop	{r4, r5, r6, pc}
   11174:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   11178:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1117c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   11180:	bfc2      	ittt	gt
   11182:	ebd4 050c 	rsbsgt	r5, r4, ip
   11186:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1118a:	bd70      	popgt	{r4, r5, r6, pc}
   1118c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11190:	f04f 0e00 	mov.w	lr, #0
   11194:	3c01      	subs	r4, #1
   11196:	e690      	b.n	10eba <__aeabi_dmul+0xde>
   11198:	ea45 0e06 	orr.w	lr, r5, r6
   1119c:	e68d      	b.n	10eba <__aeabi_dmul+0xde>
   1119e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   111a2:	ea94 0f0c 	teq	r4, ip
   111a6:	bf08      	it	eq
   111a8:	ea95 0f0c 	teqeq	r5, ip
   111ac:	f43f af3b 	beq.w	11026 <__aeabi_dmul+0x24a>
   111b0:	ea94 0f0c 	teq	r4, ip
   111b4:	d10a      	bne.n	111cc <__aeabi_ddiv+0x19c>
   111b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   111ba:	f47f af34 	bne.w	11026 <__aeabi_dmul+0x24a>
   111be:	ea95 0f0c 	teq	r5, ip
   111c2:	f47f af25 	bne.w	11010 <__aeabi_dmul+0x234>
   111c6:	4610      	mov	r0, r2
   111c8:	4619      	mov	r1, r3
   111ca:	e72c      	b.n	11026 <__aeabi_dmul+0x24a>
   111cc:	ea95 0f0c 	teq	r5, ip
   111d0:	d106      	bne.n	111e0 <__aeabi_ddiv+0x1b0>
   111d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   111d6:	f43f aefd 	beq.w	10fd4 <__aeabi_dmul+0x1f8>
   111da:	4610      	mov	r0, r2
   111dc:	4619      	mov	r1, r3
   111de:	e722      	b.n	11026 <__aeabi_dmul+0x24a>
   111e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   111e4:	bf18      	it	ne
   111e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   111ea:	f47f aec5 	bne.w	10f78 <__aeabi_dmul+0x19c>
   111ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   111f2:	f47f af0d 	bne.w	11010 <__aeabi_dmul+0x234>
   111f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   111fa:	f47f aeeb 	bne.w	10fd4 <__aeabi_dmul+0x1f8>
   111fe:	e712      	b.n	11026 <__aeabi_dmul+0x24a>

00011200 <__gedf2>:
   11200:	f04f 3cff 	mov.w	ip, #4294967295
   11204:	e006      	b.n	11214 <__cmpdf2+0x4>
   11206:	bf00      	nop

00011208 <__ledf2>:
   11208:	f04f 0c01 	mov.w	ip, #1
   1120c:	e002      	b.n	11214 <__cmpdf2+0x4>
   1120e:	bf00      	nop

00011210 <__cmpdf2>:
   11210:	f04f 0c01 	mov.w	ip, #1
   11214:	f84d cd04 	str.w	ip, [sp, #-4]!
   11218:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1121c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11220:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11224:	bf18      	it	ne
   11226:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1122a:	d01b      	beq.n	11264 <__cmpdf2+0x54>
   1122c:	b001      	add	sp, #4
   1122e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   11232:	bf0c      	ite	eq
   11234:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   11238:	ea91 0f03 	teqne	r1, r3
   1123c:	bf02      	ittt	eq
   1123e:	ea90 0f02 	teqeq	r0, r2
   11242:	2000      	moveq	r0, #0
   11244:	4770      	bxeq	lr
   11246:	f110 0f00 	cmn.w	r0, #0
   1124a:	ea91 0f03 	teq	r1, r3
   1124e:	bf58      	it	pl
   11250:	4299      	cmppl	r1, r3
   11252:	bf08      	it	eq
   11254:	4290      	cmpeq	r0, r2
   11256:	bf2c      	ite	cs
   11258:	17d8      	asrcs	r0, r3, #31
   1125a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1125e:	f040 0001 	orr.w	r0, r0, #1
   11262:	4770      	bx	lr
   11264:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11268:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1126c:	d102      	bne.n	11274 <__cmpdf2+0x64>
   1126e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   11272:	d107      	bne.n	11284 <__cmpdf2+0x74>
   11274:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11278:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1127c:	d1d6      	bne.n	1122c <__cmpdf2+0x1c>
   1127e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   11282:	d0d3      	beq.n	1122c <__cmpdf2+0x1c>
   11284:	f85d 0b04 	ldr.w	r0, [sp], #4
   11288:	4770      	bx	lr
   1128a:	bf00      	nop

0001128c <__aeabi_cdrcmple>:
   1128c:	4684      	mov	ip, r0
   1128e:	4610      	mov	r0, r2
   11290:	4662      	mov	r2, ip
   11292:	468c      	mov	ip, r1
   11294:	4619      	mov	r1, r3
   11296:	4663      	mov	r3, ip
   11298:	e000      	b.n	1129c <__aeabi_cdcmpeq>
   1129a:	bf00      	nop

0001129c <__aeabi_cdcmpeq>:
   1129c:	b501      	push	{r0, lr}
   1129e:	f7ff ffb7 	bl	11210 <__cmpdf2>
   112a2:	2800      	cmp	r0, #0
   112a4:	bf48      	it	mi
   112a6:	f110 0f00 	cmnmi.w	r0, #0
   112aa:	bd01      	pop	{r0, pc}

000112ac <__aeabi_dcmpeq>:
   112ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   112b0:	f7ff fff4 	bl	1129c <__aeabi_cdcmpeq>
   112b4:	bf0c      	ite	eq
   112b6:	2001      	moveq	r0, #1
   112b8:	2000      	movne	r0, #0
   112ba:	f85d fb08 	ldr.w	pc, [sp], #8
   112be:	bf00      	nop

000112c0 <__aeabi_dcmplt>:
   112c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   112c4:	f7ff ffea 	bl	1129c <__aeabi_cdcmpeq>
   112c8:	bf34      	ite	cc
   112ca:	2001      	movcc	r0, #1
   112cc:	2000      	movcs	r0, #0
   112ce:	f85d fb08 	ldr.w	pc, [sp], #8
   112d2:	bf00      	nop

000112d4 <__aeabi_dcmple>:
   112d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   112d8:	f7ff ffe0 	bl	1129c <__aeabi_cdcmpeq>
   112dc:	bf94      	ite	ls
   112de:	2001      	movls	r0, #1
   112e0:	2000      	movhi	r0, #0
   112e2:	f85d fb08 	ldr.w	pc, [sp], #8
   112e6:	bf00      	nop

000112e8 <__aeabi_dcmpge>:
   112e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   112ec:	f7ff ffce 	bl	1128c <__aeabi_cdrcmple>
   112f0:	bf94      	ite	ls
   112f2:	2001      	movls	r0, #1
   112f4:	2000      	movhi	r0, #0
   112f6:	f85d fb08 	ldr.w	pc, [sp], #8
   112fa:	bf00      	nop

000112fc <__aeabi_dcmpgt>:
   112fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   11300:	f7ff ffc4 	bl	1128c <__aeabi_cdrcmple>
   11304:	bf34      	ite	cc
   11306:	2001      	movcc	r0, #1
   11308:	2000      	movcs	r0, #0
   1130a:	f85d fb08 	ldr.w	pc, [sp], #8
   1130e:	bf00      	nop

00011310 <__aeabi_dcmpun>:
   11310:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11314:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11318:	d102      	bne.n	11320 <__aeabi_dcmpun+0x10>
   1131a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1131e:	d10a      	bne.n	11336 <__aeabi_dcmpun+0x26>
   11320:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11324:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11328:	d102      	bne.n	11330 <__aeabi_dcmpun+0x20>
   1132a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1132e:	d102      	bne.n	11336 <__aeabi_dcmpun+0x26>
   11330:	f04f 0000 	mov.w	r0, #0
   11334:	4770      	bx	lr
   11336:	f04f 0001 	mov.w	r0, #1
   1133a:	4770      	bx	lr

0001133c <__aeabi_d2uiz>:
   1133c:	004a      	lsls	r2, r1, #1
   1133e:	d211      	bcs.n	11364 <__aeabi_d2uiz+0x28>
   11340:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11344:	d211      	bcs.n	1136a <__aeabi_d2uiz+0x2e>
   11346:	d50d      	bpl.n	11364 <__aeabi_d2uiz+0x28>
   11348:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1134c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11350:	d40e      	bmi.n	11370 <__aeabi_d2uiz+0x34>
   11352:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1135a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1135e:	fa23 f002 	lsr.w	r0, r3, r2
   11362:	4770      	bx	lr
   11364:	f04f 0000 	mov.w	r0, #0
   11368:	4770      	bx	lr
   1136a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1136e:	d102      	bne.n	11376 <__aeabi_d2uiz+0x3a>
   11370:	f04f 30ff 	mov.w	r0, #4294967295
   11374:	4770      	bx	lr
   11376:	f04f 0000 	mov.w	r0, #0
   1137a:	4770      	bx	lr

0001137c <__cxa_atexit>:
   1137c:	4613      	mov	r3, r2
   1137e:	460a      	mov	r2, r1
   11380:	4601      	mov	r1, r0
   11382:	2002      	movs	r0, #2
   11384:	f000 b9ca 	b.w	1171c <__register_exitproc>

00011388 <__errno>:
   11388:	4b01      	ldr	r3, [pc, #4]	; (11390 <__errno+0x8>)
   1138a:	6818      	ldr	r0, [r3, #0]
   1138c:	4770      	bx	lr
   1138e:	bf00      	nop
   11390:	20000140 	.word	0x20000140

00011394 <ffs>:
   11394:	b140      	cbz	r0, 113a8 <ffs+0x14>
   11396:	2300      	movs	r3, #0
   11398:	fa40 f103 	asr.w	r1, r0, r3
   1139c:	1c5a      	adds	r2, r3, #1
   1139e:	07c9      	lsls	r1, r1, #31
   113a0:	4613      	mov	r3, r2
   113a2:	d5f9      	bpl.n	11398 <ffs+0x4>
   113a4:	4610      	mov	r0, r2
   113a6:	4770      	bx	lr
   113a8:	4602      	mov	r2, r0
   113aa:	4610      	mov	r0, r2
   113ac:	4770      	bx	lr
   113ae:	bf00      	nop

000113b0 <__libc_init_array>:
   113b0:	b570      	push	{r4, r5, r6, lr}
   113b2:	4e0f      	ldr	r6, [pc, #60]	; (113f0 <__libc_init_array+0x40>)
   113b4:	4d0f      	ldr	r5, [pc, #60]	; (113f4 <__libc_init_array+0x44>)
   113b6:	1b76      	subs	r6, r6, r5
   113b8:	10b6      	asrs	r6, r6, #2
   113ba:	bf18      	it	ne
   113bc:	2400      	movne	r4, #0
   113be:	d005      	beq.n	113cc <__libc_init_array+0x1c>
   113c0:	3401      	adds	r4, #1
   113c2:	f855 3b04 	ldr.w	r3, [r5], #4
   113c6:	4798      	blx	r3
   113c8:	42a6      	cmp	r6, r4
   113ca:	d1f9      	bne.n	113c0 <__libc_init_array+0x10>
   113cc:	4e0a      	ldr	r6, [pc, #40]	; (113f8 <__libc_init_array+0x48>)
   113ce:	4d0b      	ldr	r5, [pc, #44]	; (113fc <__libc_init_array+0x4c>)
   113d0:	1b76      	subs	r6, r6, r5
   113d2:	f001 faff 	bl	129d4 <_init>
   113d6:	10b6      	asrs	r6, r6, #2
   113d8:	bf18      	it	ne
   113da:	2400      	movne	r4, #0
   113dc:	d006      	beq.n	113ec <__libc_init_array+0x3c>
   113de:	3401      	adds	r4, #1
   113e0:	f855 3b04 	ldr.w	r3, [r5], #4
   113e4:	4798      	blx	r3
   113e6:	42a6      	cmp	r6, r4
   113e8:	d1f9      	bne.n	113de <__libc_init_array+0x2e>
   113ea:	bd70      	pop	{r4, r5, r6, pc}
   113ec:	bd70      	pop	{r4, r5, r6, pc}
   113ee:	bf00      	nop
   113f0:	000129e0 	.word	0x000129e0
   113f4:	000129e0 	.word	0x000129e0
   113f8:	00012a24 	.word	0x00012a24
   113fc:	000129e0 	.word	0x000129e0

00011400 <memcpy>:
   11400:	4684      	mov	ip, r0
   11402:	ea41 0300 	orr.w	r3, r1, r0
   11406:	f013 0303 	ands.w	r3, r3, #3
   1140a:	d16d      	bne.n	114e8 <memcpy+0xe8>
   1140c:	3a40      	subs	r2, #64	; 0x40
   1140e:	d341      	bcc.n	11494 <memcpy+0x94>
   11410:	f851 3b04 	ldr.w	r3, [r1], #4
   11414:	f840 3b04 	str.w	r3, [r0], #4
   11418:	f851 3b04 	ldr.w	r3, [r1], #4
   1141c:	f840 3b04 	str.w	r3, [r0], #4
   11420:	f851 3b04 	ldr.w	r3, [r1], #4
   11424:	f840 3b04 	str.w	r3, [r0], #4
   11428:	f851 3b04 	ldr.w	r3, [r1], #4
   1142c:	f840 3b04 	str.w	r3, [r0], #4
   11430:	f851 3b04 	ldr.w	r3, [r1], #4
   11434:	f840 3b04 	str.w	r3, [r0], #4
   11438:	f851 3b04 	ldr.w	r3, [r1], #4
   1143c:	f840 3b04 	str.w	r3, [r0], #4
   11440:	f851 3b04 	ldr.w	r3, [r1], #4
   11444:	f840 3b04 	str.w	r3, [r0], #4
   11448:	f851 3b04 	ldr.w	r3, [r1], #4
   1144c:	f840 3b04 	str.w	r3, [r0], #4
   11450:	f851 3b04 	ldr.w	r3, [r1], #4
   11454:	f840 3b04 	str.w	r3, [r0], #4
   11458:	f851 3b04 	ldr.w	r3, [r1], #4
   1145c:	f840 3b04 	str.w	r3, [r0], #4
   11460:	f851 3b04 	ldr.w	r3, [r1], #4
   11464:	f840 3b04 	str.w	r3, [r0], #4
   11468:	f851 3b04 	ldr.w	r3, [r1], #4
   1146c:	f840 3b04 	str.w	r3, [r0], #4
   11470:	f851 3b04 	ldr.w	r3, [r1], #4
   11474:	f840 3b04 	str.w	r3, [r0], #4
   11478:	f851 3b04 	ldr.w	r3, [r1], #4
   1147c:	f840 3b04 	str.w	r3, [r0], #4
   11480:	f851 3b04 	ldr.w	r3, [r1], #4
   11484:	f840 3b04 	str.w	r3, [r0], #4
   11488:	f851 3b04 	ldr.w	r3, [r1], #4
   1148c:	f840 3b04 	str.w	r3, [r0], #4
   11490:	3a40      	subs	r2, #64	; 0x40
   11492:	d2bd      	bcs.n	11410 <memcpy+0x10>
   11494:	3230      	adds	r2, #48	; 0x30
   11496:	d311      	bcc.n	114bc <memcpy+0xbc>
   11498:	f851 3b04 	ldr.w	r3, [r1], #4
   1149c:	f840 3b04 	str.w	r3, [r0], #4
   114a0:	f851 3b04 	ldr.w	r3, [r1], #4
   114a4:	f840 3b04 	str.w	r3, [r0], #4
   114a8:	f851 3b04 	ldr.w	r3, [r1], #4
   114ac:	f840 3b04 	str.w	r3, [r0], #4
   114b0:	f851 3b04 	ldr.w	r3, [r1], #4
   114b4:	f840 3b04 	str.w	r3, [r0], #4
   114b8:	3a10      	subs	r2, #16
   114ba:	d2ed      	bcs.n	11498 <memcpy+0x98>
   114bc:	320c      	adds	r2, #12
   114be:	d305      	bcc.n	114cc <memcpy+0xcc>
   114c0:	f851 3b04 	ldr.w	r3, [r1], #4
   114c4:	f840 3b04 	str.w	r3, [r0], #4
   114c8:	3a04      	subs	r2, #4
   114ca:	d2f9      	bcs.n	114c0 <memcpy+0xc0>
   114cc:	3204      	adds	r2, #4
   114ce:	d008      	beq.n	114e2 <memcpy+0xe2>
   114d0:	07d2      	lsls	r2, r2, #31
   114d2:	bf1c      	itt	ne
   114d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   114d8:	f800 3b01 	strbne.w	r3, [r0], #1
   114dc:	d301      	bcc.n	114e2 <memcpy+0xe2>
   114de:	880b      	ldrh	r3, [r1, #0]
   114e0:	8003      	strh	r3, [r0, #0]
   114e2:	4660      	mov	r0, ip
   114e4:	4770      	bx	lr
   114e6:	bf00      	nop
   114e8:	2a08      	cmp	r2, #8
   114ea:	d313      	bcc.n	11514 <memcpy+0x114>
   114ec:	078b      	lsls	r3, r1, #30
   114ee:	d08d      	beq.n	1140c <memcpy+0xc>
   114f0:	f010 0303 	ands.w	r3, r0, #3
   114f4:	d08a      	beq.n	1140c <memcpy+0xc>
   114f6:	f1c3 0304 	rsb	r3, r3, #4
   114fa:	1ad2      	subs	r2, r2, r3
   114fc:	07db      	lsls	r3, r3, #31
   114fe:	bf1c      	itt	ne
   11500:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11504:	f800 3b01 	strbne.w	r3, [r0], #1
   11508:	d380      	bcc.n	1140c <memcpy+0xc>
   1150a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1150e:	f820 3b02 	strh.w	r3, [r0], #2
   11512:	e77b      	b.n	1140c <memcpy+0xc>
   11514:	3a04      	subs	r2, #4
   11516:	d3d9      	bcc.n	114cc <memcpy+0xcc>
   11518:	3a01      	subs	r2, #1
   1151a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1151e:	f800 3b01 	strb.w	r3, [r0], #1
   11522:	d2f9      	bcs.n	11518 <memcpy+0x118>
   11524:	780b      	ldrb	r3, [r1, #0]
   11526:	7003      	strb	r3, [r0, #0]
   11528:	784b      	ldrb	r3, [r1, #1]
   1152a:	7043      	strb	r3, [r0, #1]
   1152c:	788b      	ldrb	r3, [r1, #2]
   1152e:	7083      	strb	r3, [r0, #2]
   11530:	4660      	mov	r0, ip
   11532:	4770      	bx	lr

00011534 <memset>:
   11534:	b470      	push	{r4, r5, r6}
   11536:	0786      	lsls	r6, r0, #30
   11538:	d046      	beq.n	115c8 <memset+0x94>
   1153a:	1e54      	subs	r4, r2, #1
   1153c:	2a00      	cmp	r2, #0
   1153e:	d041      	beq.n	115c4 <memset+0x90>
   11540:	b2ca      	uxtb	r2, r1
   11542:	4603      	mov	r3, r0
   11544:	e002      	b.n	1154c <memset+0x18>
   11546:	f114 34ff 	adds.w	r4, r4, #4294967295
   1154a:	d33b      	bcc.n	115c4 <memset+0x90>
   1154c:	f803 2b01 	strb.w	r2, [r3], #1
   11550:	079d      	lsls	r5, r3, #30
   11552:	d1f8      	bne.n	11546 <memset+0x12>
   11554:	2c03      	cmp	r4, #3
   11556:	d92e      	bls.n	115b6 <memset+0x82>
   11558:	b2cd      	uxtb	r5, r1
   1155a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1155e:	2c0f      	cmp	r4, #15
   11560:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11564:	d919      	bls.n	1159a <memset+0x66>
   11566:	f103 0210 	add.w	r2, r3, #16
   1156a:	4626      	mov	r6, r4
   1156c:	3e10      	subs	r6, #16
   1156e:	2e0f      	cmp	r6, #15
   11570:	f842 5c10 	str.w	r5, [r2, #-16]
   11574:	f842 5c0c 	str.w	r5, [r2, #-12]
   11578:	f842 5c08 	str.w	r5, [r2, #-8]
   1157c:	f842 5c04 	str.w	r5, [r2, #-4]
   11580:	f102 0210 	add.w	r2, r2, #16
   11584:	d8f2      	bhi.n	1156c <memset+0x38>
   11586:	f1a4 0210 	sub.w	r2, r4, #16
   1158a:	f022 020f 	bic.w	r2, r2, #15
   1158e:	f004 040f 	and.w	r4, r4, #15
   11592:	3210      	adds	r2, #16
   11594:	2c03      	cmp	r4, #3
   11596:	4413      	add	r3, r2
   11598:	d90d      	bls.n	115b6 <memset+0x82>
   1159a:	461e      	mov	r6, r3
   1159c:	4622      	mov	r2, r4
   1159e:	3a04      	subs	r2, #4
   115a0:	2a03      	cmp	r2, #3
   115a2:	f846 5b04 	str.w	r5, [r6], #4
   115a6:	d8fa      	bhi.n	1159e <memset+0x6a>
   115a8:	1f22      	subs	r2, r4, #4
   115aa:	f022 0203 	bic.w	r2, r2, #3
   115ae:	3204      	adds	r2, #4
   115b0:	4413      	add	r3, r2
   115b2:	f004 0403 	and.w	r4, r4, #3
   115b6:	b12c      	cbz	r4, 115c4 <memset+0x90>
   115b8:	b2c9      	uxtb	r1, r1
   115ba:	441c      	add	r4, r3
   115bc:	f803 1b01 	strb.w	r1, [r3], #1
   115c0:	429c      	cmp	r4, r3
   115c2:	d1fb      	bne.n	115bc <memset+0x88>
   115c4:	bc70      	pop	{r4, r5, r6}
   115c6:	4770      	bx	lr
   115c8:	4614      	mov	r4, r2
   115ca:	4603      	mov	r3, r0
   115cc:	e7c2      	b.n	11554 <memset+0x20>
   115ce:	bf00      	nop

000115d0 <rand>:
   115d0:	b410      	push	{r4}
   115d2:	4b0c      	ldr	r3, [pc, #48]	; (11604 <rand+0x34>)
   115d4:	480c      	ldr	r0, [pc, #48]	; (11608 <rand+0x38>)
   115d6:	6819      	ldr	r1, [r3, #0]
   115d8:	4c0c      	ldr	r4, [pc, #48]	; (1160c <rand+0x3c>)
   115da:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   115de:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   115e2:	fb00 f002 	mul.w	r0, r0, r2
   115e6:	fb04 0003 	mla	r0, r4, r3, r0
   115ea:	fba2 2304 	umull	r2, r3, r2, r4
   115ee:	4403      	add	r3, r0
   115f0:	3201      	adds	r2, #1
   115f2:	f143 0300 	adc.w	r3, r3, #0
   115f6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   115fa:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   115fe:	bc10      	pop	{r4}
   11600:	4770      	bx	lr
   11602:	bf00      	nop
   11604:	20000140 	.word	0x20000140
   11608:	5851f42d 	.word	0x5851f42d
   1160c:	4c957f2d 	.word	0x4c957f2d
	...

00011640 <strlen>:
   11640:	f890 f000 	pld	[r0]
   11644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   11648:	f020 0107 	bic.w	r1, r0, #7
   1164c:	f06f 0c00 	mvn.w	ip, #0
   11650:	f010 0407 	ands.w	r4, r0, #7
   11654:	f891 f020 	pld	[r1, #32]
   11658:	f040 8049 	bne.w	116ee <strlen+0xae>
   1165c:	f04f 0400 	mov.w	r4, #0
   11660:	f06f 0007 	mvn.w	r0, #7
   11664:	e9d1 2300 	ldrd	r2, r3, [r1]
   11668:	f891 f040 	pld	[r1, #64]	; 0x40
   1166c:	f100 0008 	add.w	r0, r0, #8
   11670:	fa82 f24c 	uadd8	r2, r2, ip
   11674:	faa4 f28c 	sel	r2, r4, ip
   11678:	fa83 f34c 	uadd8	r3, r3, ip
   1167c:	faa2 f38c 	sel	r3, r2, ip
   11680:	bb4b      	cbnz	r3, 116d6 <strlen+0x96>
   11682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11686:	fa82 f24c 	uadd8	r2, r2, ip
   1168a:	f100 0008 	add.w	r0, r0, #8
   1168e:	faa4 f28c 	sel	r2, r4, ip
   11692:	fa83 f34c 	uadd8	r3, r3, ip
   11696:	faa2 f38c 	sel	r3, r2, ip
   1169a:	b9e3      	cbnz	r3, 116d6 <strlen+0x96>
   1169c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   116a0:	fa82 f24c 	uadd8	r2, r2, ip
   116a4:	f100 0008 	add.w	r0, r0, #8
   116a8:	faa4 f28c 	sel	r2, r4, ip
   116ac:	fa83 f34c 	uadd8	r3, r3, ip
   116b0:	faa2 f38c 	sel	r3, r2, ip
   116b4:	b97b      	cbnz	r3, 116d6 <strlen+0x96>
   116b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   116ba:	f101 0120 	add.w	r1, r1, #32
   116be:	fa82 f24c 	uadd8	r2, r2, ip
   116c2:	f100 0008 	add.w	r0, r0, #8
   116c6:	faa4 f28c 	sel	r2, r4, ip
   116ca:	fa83 f34c 	uadd8	r3, r3, ip
   116ce:	faa2 f38c 	sel	r3, r2, ip
   116d2:	2b00      	cmp	r3, #0
   116d4:	d0c6      	beq.n	11664 <strlen+0x24>
   116d6:	2a00      	cmp	r2, #0
   116d8:	bf04      	itt	eq
   116da:	3004      	addeq	r0, #4
   116dc:	461a      	moveq	r2, r3
   116de:	ba12      	rev	r2, r2
   116e0:	fab2 f282 	clz	r2, r2
   116e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   116e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   116ec:	4770      	bx	lr
   116ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   116f2:	f004 0503 	and.w	r5, r4, #3
   116f6:	f1c4 0000 	rsb	r0, r4, #0
   116fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   116fe:	f014 0f04 	tst.w	r4, #4
   11702:	f891 f040 	pld	[r1, #64]	; 0x40
   11706:	fa0c f505 	lsl.w	r5, ip, r5
   1170a:	ea62 0205 	orn	r2, r2, r5
   1170e:	bf1c      	itt	ne
   11710:	ea63 0305 	ornne	r3, r3, r5
   11714:	4662      	movne	r2, ip
   11716:	f04f 0400 	mov.w	r4, #0
   1171a:	e7a9      	b.n	11670 <strlen+0x30>

0001171c <__register_exitproc>:
   1171c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11720:	4d2c      	ldr	r5, [pc, #176]	; (117d4 <__register_exitproc+0xb8>)
   11722:	4606      	mov	r6, r0
   11724:	6828      	ldr	r0, [r5, #0]
   11726:	4698      	mov	r8, r3
   11728:	460f      	mov	r7, r1
   1172a:	4691      	mov	r9, r2
   1172c:	f000 f882 	bl	11834 <__retarget_lock_acquire_recursive>
   11730:	4b29      	ldr	r3, [pc, #164]	; (117d8 <__register_exitproc+0xbc>)
   11732:	681c      	ldr	r4, [r3, #0]
   11734:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   11738:	2b00      	cmp	r3, #0
   1173a:	d03e      	beq.n	117ba <__register_exitproc+0x9e>
   1173c:	685a      	ldr	r2, [r3, #4]
   1173e:	2a1f      	cmp	r2, #31
   11740:	dc1c      	bgt.n	1177c <__register_exitproc+0x60>
   11742:	f102 0e01 	add.w	lr, r2, #1
   11746:	b176      	cbz	r6, 11766 <__register_exitproc+0x4a>
   11748:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1174c:	2401      	movs	r4, #1
   1174e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11752:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   11756:	4094      	lsls	r4, r2
   11758:	4320      	orrs	r0, r4
   1175a:	2e02      	cmp	r6, #2
   1175c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   11760:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11764:	d023      	beq.n	117ae <__register_exitproc+0x92>
   11766:	3202      	adds	r2, #2
   11768:	f8c3 e004 	str.w	lr, [r3, #4]
   1176c:	6828      	ldr	r0, [r5, #0]
   1176e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11772:	f000 f861 	bl	11838 <__retarget_lock_release_recursive>
   11776:	2000      	movs	r0, #0
   11778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1177c:	4b17      	ldr	r3, [pc, #92]	; (117dc <__register_exitproc+0xc0>)
   1177e:	b30b      	cbz	r3, 117c4 <__register_exitproc+0xa8>
   11780:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11784:	f7ef f85d 	bl	842 <malloc>
   11788:	4603      	mov	r3, r0
   1178a:	b1d8      	cbz	r0, 117c4 <__register_exitproc+0xa8>
   1178c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11790:	6002      	str	r2, [r0, #0]
   11792:	2100      	movs	r1, #0
   11794:	6041      	str	r1, [r0, #4]
   11796:	460a      	mov	r2, r1
   11798:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1179c:	f04f 0e01 	mov.w	lr, #1
   117a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   117a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   117a8:	2e00      	cmp	r6, #0
   117aa:	d0dc      	beq.n	11766 <__register_exitproc+0x4a>
   117ac:	e7cc      	b.n	11748 <__register_exitproc+0x2c>
   117ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   117b2:	430c      	orrs	r4, r1
   117b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   117b8:	e7d5      	b.n	11766 <__register_exitproc+0x4a>
   117ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   117be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   117c2:	e7bb      	b.n	1173c <__register_exitproc+0x20>
   117c4:	6828      	ldr	r0, [r5, #0]
   117c6:	f000 f837 	bl	11838 <__retarget_lock_release_recursive>
   117ca:	f04f 30ff 	mov.w	r0, #4294967295
   117ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   117d2:	bf00      	nop
   117d4:	20000570 	.word	0x20000570
   117d8:	000129d0 	.word	0x000129d0
   117dc:	00000843 	.word	0x00000843

000117e0 <register_fini>:
   117e0:	4b02      	ldr	r3, [pc, #8]	; (117ec <register_fini+0xc>)
   117e2:	b113      	cbz	r3, 117ea <register_fini+0xa>
   117e4:	4802      	ldr	r0, [pc, #8]	; (117f0 <register_fini+0x10>)
   117e6:	f000 b805 	b.w	117f4 <atexit>
   117ea:	4770      	bx	lr
   117ec:	00000000 	.word	0x00000000
   117f0:	00011801 	.word	0x00011801

000117f4 <atexit>:
   117f4:	2300      	movs	r3, #0
   117f6:	4601      	mov	r1, r0
   117f8:	461a      	mov	r2, r3
   117fa:	4618      	mov	r0, r3
   117fc:	f7ff bf8e 	b.w	1171c <__register_exitproc>

00011800 <__libc_fini_array>:
   11800:	b538      	push	{r3, r4, r5, lr}
   11802:	4c0a      	ldr	r4, [pc, #40]	; (1182c <__libc_fini_array+0x2c>)
   11804:	4d0a      	ldr	r5, [pc, #40]	; (11830 <__libc_fini_array+0x30>)
   11806:	1b64      	subs	r4, r4, r5
   11808:	10a4      	asrs	r4, r4, #2
   1180a:	d00a      	beq.n	11822 <__libc_fini_array+0x22>
   1180c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11810:	3b01      	subs	r3, #1
   11812:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11816:	3c01      	subs	r4, #1
   11818:	f855 3904 	ldr.w	r3, [r5], #-4
   1181c:	4798      	blx	r3
   1181e:	2c00      	cmp	r4, #0
   11820:	d1f9      	bne.n	11816 <__libc_fini_array+0x16>
   11822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11826:	f001 b8fd 	b.w	12a24 <_fini>
   1182a:	bf00      	nop
   1182c:	00012a34 	.word	0x00012a34
   11830:	00012a30 	.word	0x00012a30

00011834 <__retarget_lock_acquire_recursive>:
   11834:	4770      	bx	lr
   11836:	bf00      	nop

00011838 <__retarget_lock_release_recursive>:
   11838:	4770      	bx	lr
   1183a:	bf00      	nop

0001183c <_ZTV17ARINC_Conversions>:
	...
   11844:	0515 0000 03e5 0000                         ........

0001184c <_ZL5Mesg1>:
   1184c:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

0001185c <_ZL5Mesg2>:
   1185c:	6144 6174 203a 0000                         Data: ..

00011864 <_ZL10HexToAscii>:
   11864:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

00011874 <_ZL11HistoryMesg>:
   11874:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
   11884:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   11894:	7420 206f 6e49 7469 6c69 7a69 0a65 000d      to Initilize...
   118a4:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
   118b4:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
   118c4:	0d0a 0000 0a72 2d2d 212d 6f67 2074 656d     ....r.---!got me
   118d4:	7373 6761 2165 2d2d 2d2d 0000 7420 6172     ssage!----.. tra
   118e4:	736e 696d 7474 6e69 2e67 2e2e 0000 0000     nsmitting.......
   118f4:	5420 6172 736e 696d 7474 6465 0021 0000      Transmitted!...
   11904:	003e 0000 0d0a 7254 6e61 6d73 7469 2620     >.....Transmit &
   11914:	5220 6365 6965 6576 5720 7469 2068 614c      Receive With La
   11924:	6562 736c 4d20 646f 0a65 000d 0d0a 4553     bels Mode.....SE
   11934:	464c 542d 5345 2c54 4920 746e 7265 616e     LF-TEST, Interna
   11944:	206c 6944 6967 6174 206c 6f4c 706f 622d     l Digital Loop-b
   11954:	6361 2c6b 4e20 206f 6164 6174 6920 2073     ack, No data is 
   11964:	7274 6e61 6d73 7469 6574 2064 7865 6574     transmitted exte
   11974:	6e72 6c61 796c 0d0a 0000 0000 0d0a 6f20     rnally........ o
   11984:	206e 6154 6c62 2065 616c 6562 736c 6120     n Table labels a
   11994:	6572 4520 616e 6c62 6465 0000 0d0a 500a     re Enabled.....P
   119a4:	6572 7373 5320 2d57 2031 6f74 7320 6174     ress SW-1 to sta
   119b4:	7472 6920 696e 6974 6c61 796c 0d0a 000a     rt initially....
   119c4:	2d2d 202d 7542 7474 6e6f 4320 6d6f 616d     --- Button Comma
   119d4:	646e 2073 2d2d 0a2d 000d 0000 2020 7053     nds ---.....  Sp
   119e4:	6361 2065 6142 2072 6f74 4420 7369 6c70     ace Bar to Displ
   119f4:	7961 5320 6174 7574 2073 6e61 2064 6f43     ay Status and Co
   11a04:	746e 6f72 206c 6552 6967 7473 7265 0a73     ntrol Registers.
   11a14:	000d 0000 2020 2070 6f74 5020 7561 6573     ....  p to Pause
   11a24:	0d0a 0000 2020 206d 6f74 4420 7369 6c70     ....  m to Displ
   11a34:	7961 4c20 6261 6c65 4d20 6d65 726f 0079     ay Label Memory.
   11a44:	0d0a 003e 0d0a 7254 6e61 6d73 7469 6974     ..>...Transmitti
   11a54:	676e 0d0a 003e 0000 0d0a 4948 332d 3935     ng..>.....HI-359
   11a64:	2033 7453 7461 7375 202c 6f43 746e 6f72     3 Status, Contro
   11a74:	206c 6552 6967 7473 7265 0d73 000a 0000     l Registers.....
   11a84:	0d0a 2009 2a20 2a2a 2a2a 5020 6572 7373     ...  ***** Press
   11a94:	2020 7073 6361 6265 7261 7420 206f 6f63       spacebar to co
   11aa4:	746e 6e69 6575 2a20 2a2a 2a2a 002a 0000     ntinue ******...
   11ab4:	0a0a 540d 6172 736e 696d 2074 6150 7375     ...Transmit Paus
   11ac4:	6465 0d0a 0000 0000 0d0a 7250 7365 2073     ed........Press 
   11ad4:	4c4f 4445 425f 5455 4f54 2d4e 2032 6f74     OLED_BUTTON-2 to
   11ae4:	7420 6172 736e 696d 2074 6e6f 2065 7266      transmit one fr
   11af4:	6d61 2065 6e61 2064 6170 7375 0a65 000d     ame and pause...
   11b04:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
   11b14:	4f54 2d4e 2033 6f74 5220 7365 6d75 0a65     TON-3 to Resume.
   11b24:	000d 0000 0d0a 7254 6e61 6d73 7469 6574     ......Transmitte
   11b34:	2072 6552 7573 656d 2e64 2e2e 0d0a 0000     r Resumed.......
   11b44:	0d0a 6552 6563 7669 7265 3120 4c20 6261     ..Receiver 1 Lab
   11b54:	6c65 0a73 000d 0000 0d0a 6552 6563 7669     els.......Receiv
   11b64:	7265 3220 4c20 6261 6c65 0a73 000d 0000     er 2 Labels.....
   11b74:	0d0a 7254 6e61 6d73 7469 2620 5220 6365     ..Transmit & Rec
   11b84:	6965 6576 4520 6863 206f 6f4d 6564 0d0a     eive Echo Mode..
   11b94:	0000 0000 0d0a 6c53 776f 5320 6570 6465     ......Slow Speed
   11ba4:	0000 0000 0d0a 6146 7473 5320 6570 6465     ......Fast Speed
   11bb4:	0000 0000 0d0a 7254 6e61 6d73 7469 6574     ......Transmitte
   11bc4:	2072 6150 6972 7974 4520 616e 6c62 6465     r Parity Enabled
   11bd4:	0000 0000 0d0a 4948 332d 3935 2033 6166     ......HI-3593 fa
   11be4:	6c69 6465 7420 206f 6e69 7469 6c69 7a69     iled to initiliz
   11bf4:	0a65 000d 0d0a 6154 6c62 2065 616c 6562     e.....Table labe
   11c04:	736c 6120 6572 4520 616e 6c62 6465 0000     ls are Enabled..
   11c14:	0d0a 2d0a 2d2d 4320 6e6f 6f73 656c 4320     ...--- Console C
   11c24:	6d6f 616d 646e 2073 6548 706c 2d20 2d2d     ommands Help ---
   11c34:	0000 0000 2020 2050 203d 6150 6972 7974     ....  P = Parity
   11c44:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   11c54:	2020 2054 203d 4654 494c 2050 5420 676f       T = TFLIP  Tog
   11c64:	6c67 2065 6e6f 6f2f 6666 0000 2020 2052     gle on/off..  R 
   11c74:	203d 4652 494c 2050 5420 676f 6c67 2065     = RFLIP  Toggle 
   11c84:	6e6f 6f2f 6666 0000 2020 2053 203d 4453     on/off..  S = SD
   11c94:	4e4f 202c 4453 2c39 5320 3144 2030 6f54     ON, SD9, SD10 To
   11ca4:	6767 656c 6f20 2f6e 666f 0066 2020 2048     ggle on/off.  H 
   11cb4:	203d 6854 7369 4820 6c65 2070 6150 6567     = This Help Page
   11cc4:	0000 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   11cd4:	203d 6944 7073 616c 2079 7453 7461 7375     = Display Status
   11ce4:	6120 646e 4320 6e6f 7274 6c6f 7220 6765      and Control reg
   11cf4:	0073 0000 2020 2049 203d 6e49 7263 6d65     s...  I = Increm
   11d04:	6e65 2074 654d 7373 6761 2065 6e61 2064     ent Message and 
   11d14:	7254 6e61 6d73 7469 202e 7845 6c70 726f     Transmit. Explor
   11d24:	7265 4d20 646f 2065 2d20 4f20 4c4e 2159     er Mode  - ONLY!
   11d34:	0000 0000 2020 204d 203d 6e45 6574 2072     ....  M = Enter 
   11d44:	7543 7473 6d6f 4d20 7365 6173 6567 202e     Custom Message. 
   11d54:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   11d64:	4f20 4c4e 2159 0000 2020 4e45 4554 3d52      ONLY!..  ENTER=
   11d74:	5420 6172 736e 696d 2074 656e 7478 6d20      Transmit next m
   11d84:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   11d94:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   11da4:	7830 0020 7826 3030 2030 0000 5854 5020     0x .&x000 ..TX P
   11db4:	7261 7469 2079 4e4f 0d0a 003e 5854 5020     arity ON..>.TX P
   11dc4:	7261 7469 2079 464f 0a46 3e0d 0000 0000     arity OFF..>....
   11dd4:	4654 494c 2050 6553 0a74 3e0d 0000 0000     TFLIP Set..>....
   11de4:	4654 494c 2050 6c43 6165 6572 0a64 3e0d     TFLIP Cleared..>
   11df4:	0000 0000 4552 2d43 2031 4652 494c 2050     ....REC-1 RFLIP 
   11e04:	6553 0a74 3e0d 0000 4552 2d43 2031 4652     Set..>..REC-1 RF
   11e14:	494c 2050 6c43 6165 6572 0a64 3e0d 0000     LIP Cleared..>..
   11e24:	4552 2d43 2032 4652 494c 2050 6553 0a74     REC-2 RFLIP Set.
   11e34:	3e0d 0000 4552 2d43 2032 4652 494c 2050     .>..REC-2 RFLIP 
   11e44:	6c43 6165 6572 0a64 3e0d 0000 4552 2d43     Cleared..>..REC-
   11e54:	2031 4453 4e4f 532c 3944 6120 646e 5320     1 SDON,SD9 and S
   11e64:	3144 2030 6553 0a74 3e0d 0000 4552 2d43     D10 Set..>..REC-
   11e74:	2031 4453 4e4f 532c 3944 6120 646e 5320     1 SDON,SD9 and S
   11e84:	3144 2030 6c43 6165 6572 0a64 3e0d 0000     D10 Cleared..>..
   11e94:	4552 2d43 2032 4453 4e4f 532c 3944 6120     REC-2 SDON,SD9 a
   11ea4:	646e 5320 3144 2030 6553 0a74 3e0d 0000     nd SD10 Set..>..
   11eb4:	4552 2d43 2032 4453 4e4f 532c 3944 6120     REC-2 SDON,SD9 a
   11ec4:	646e 5320 3144 2030 6c43 6165 6572 0a64     nd SD10 Cleared.
   11ed4:	3e0d 0000 0d0a 500a 6572 7373 5320 6170     .>.....Press Spa
   11ee4:	6563 4220 7261 6f20 2072 5753 342d 7420     ce Bar or SW-4 t
   11ef4:	206f 6572 7573 656d 0000 0000 614c 6562     o resume....Labe
   11f04:	736c 2020 2030 202d 3336 203a 0020 0000     ls  0 - 63:  ...
   11f14:	0020 0000 0d0a 614c 6562 736c 2020 3436      .....Labels  64
   11f24:	312d 3732 203a 0020 0d0a 614c 6562 736c     -127:  ...Labels
   11f34:	3120 3832 312d 3139 203a 0020 0d0a 614c      128-191:  ...La
   11f44:	6562 736c 3120 3239 322d 3535 203a 0020     bels 192-255:  .
   11f54:	0d0a 614c 6562 736c 2020 2030 202d 3336     ..Labels  0 - 63
   11f64:	203a 0020 0d0a 543e 2058 2020 4420 7461     :  ...>TX    Dat
   11f74:	3a61 0000 614c 6562 3a6c 0000 6552 2d63     a:..Label:..Rec-
   11f84:	2031 6144 6174 003a 4c50 2d31 2031 6144     1 Data:.PL1-1 Da
   11f94:	6174 003a 614d 6374 3a68 0000 4c50 2d31     ta:.Match:..PL1-
   11fa4:	2032 6144 6174 003a 4c50 2d31 2033 6144     2 Data:.PL1-3 Da
   11fb4:	6174 003a 6552 2d63 2032 6144 6174 003a     ta:.Rec-2 Data:.
   11fc4:	4c50 2d32 2031 6144 6174 003a 4c50 2d32     PL2-1 Data:.PL2-
   11fd4:	2032 6144 6174 003a 4c50 2d32 2033 6144     2 Data:.PL2-3 Da
   11fe4:	6174 003a 0d0a 0000 0d0a 7845 6c70 726f     ta:.......Explor
   11ff4:	7265 4d20 646f 0a65 000d 0000 0d0a 6c20     er Mode....... l
   12004:	6261 6c65 2073 6154 6c62 2065 7369 4520     abels Table is E
   12014:	616e 6c62 6465 0000 0d0a 2d0a 2d2d 4220     nabled.....--- B
   12024:	7475 6f74 206e 6f43 6d6d 6e61 7364 2d20     utton Commands -
   12034:	2d2d 0000 0d0a 2020 7073 6361 6265 7261     --....  spacebar
   12044:	7420 206f 6944 7073 616c 2079 7453 7461      to Display Stat
   12054:	7375 6120 646e 4320 6e6f 7274 6c6f 5220     us and Control R
   12064:	6765 7369 6574 7372 0000 0000 0d0a 2020     egisters......  
   12074:	4c4f 4445 422d 5455 4f54 324e 7420 6172     OLED-BUTTON2 tra
   12084:	736e 696d 2074 6e6f 2065 656d 7373 6761     nsmit one messag
   12094:	2065 7266 6d6f 7420 6172 736e 696d 2074     e from transmit 
   120a4:	7562 6666 7265 0000 0d0a 2020 204c 6f74     buffer....  L to
   120b4:	5020 6972 746e 4c20 6261 6c65 4d20 6d65      Print Label Mem
   120c4:	726f 0a79 000d 0000 0d0a 7250 7365 2073     ory.......Press 
   120d4:	4e45 4554 2052 6f74 5420 6172 736e 696d     ENTER to Transmi
   120e4:	2074 726f 7520 6573 7420 6568 2820 294d     t or use the (M)
   120f4:	6320 6d6f 616d 646e 7420 206f 6e65 6574      command to ente
   12104:	2072 2061 7563 7473 6d6f 6d20 7365 6173     r a custom messa
   12114:	6567 0000 7250 7365 2073 5753 2034 726f     ge..Press SW4 or
   12124:	7320 6170 6563 6162 2072 6f74 6320 6e6f      spacebar to con
   12134:	6974 756e 0065 0000 7250 7365 2073 7073     tinue...Press sp
   12144:	6361 6265 7261 7420 206f 6f63 746e 6e69     acebar to contin
   12154:	6575 0000 0d0a 433e 6d6f 616d 646e 4d20     ue....>Command M
   12164:	0000 0000 0d0a 6e45 6574 2072 2033 7962     ......Enter 3 by
   12174:	6574 2073 202b 414c 4542 204c 6f74 5420     tes + LABEL to T
   12184:	6172 736e 696d 2074 6f66 6c6c 776f 6465     ransmit followed
   12194:	6220 2079 4e45 4554 0a52 000d 0d0a 6f54      by ENTER.....To
   121a4:	5420 6172 736e 696d 2c74 6520 746e 7265      Transmit, enter
   121b4:	3320 6220 7479 7365 6620 6c6f 6f6c 6577      3 bytes followe
   121c4:	2064 7962 6120 4c20 6261 6c65 6220 7479     d by a Label byt
   121d4:	2065 6f66 6c6c 776f 6465 6220 2079 4e45     e followed by EN
   121e4:	4554 0a52 000d 0000 6f46 6d72 7461 203a     TER.....Format: 
   121f4:	6942 7374 3233 322d 2c35 4220 7469 3273     Bits32-25, Bits2
   12204:	2d34 3731 202c 6942 7374 3631 392d 202c     4-17, Bits16-9, 
   12214:	414c 4542 0a4c 3a0d 0000 0000 7845 6d61     LABEL..:....Exam
   12224:	6c70 3a65 3020 2031 3332 3420 2035 3736     ple: 01 23 45 67
   12234:	4520 544e 5245 0d0a 003a 0000 5020 6572      ENTER..:... Pre
   12244:	7373 5220 5445 5255 004e 0000 5420 6172     ss RETURN... Tra
   12254:	736e 696d 6974 676e 2e2e 002e 5420 6172     nsmiting.... Tra
   12264:	736e 696d 6574 2164 0000 0000 6f43 6d6d     nsmited!....Comm
   12274:	6e61 2064 3a49 4920 636e 6572 656d 746e     and I: Increment
   12284:	6420 7461 0a61 3e0d 0000 0000                data..>....

00012290 <_ZTV15ARINC_Interface>:
   12290:	02e0 0000 0000 0000 0000 0000 05fd 0000     ................
   122a0:	065d 0000 0689 0000 0000 0000 0000 0000     ]...............
   122b0:	fd20 ffff 0000 0000 0515 0000 03e5 0000      ...............

000122c0 <_ZTT15ARINC_Interface>:
   122c0:	229c 0001 22dc 0001 22f8 0001 22b8 0001     ."..."..."..."..

000122d0 <_ZTC15ARINC_Interface0_14Protocol_Class>:
   122d0:	02e0 0000 0000 0000 0000 0000 0000 0000     ................
   122e0:	0000 0000 0869 0000 0000 0000 0000 0000     ....i...........
   122f0:	fd20 ffff 0000 0000 0515 0000 03e5 0000      ...............
   12300:	2a2a 2a2a 4c20 6669 2065 7550 736c 2065     **** Life Pulse 
   12310:	6341 6974 6176 6574 2a64 2a2a 002a 0000     Activated****...
   12320:	0a0d 0000 7469 7320 6f68 6c75 2064 6f77     ....it should wo
   12330:	6b72 0000 7469 6420 656f 2073 6f77 6b72     rk..it does work
   12340:	0000 0000 2020 7546 636e 6974 6e6f 6620     ....  Function f
   12350:	726f 7420 7365 6974 676e 6120 206e 3269     or testing an i2
   12360:	2063 4545 5250 4d4f 0000 0000 4545 5250     c EEPROM....EEPR
   12370:	4d4f 7620 7265 6669 6369 7461 6f69 206e     OM verification 
   12380:	6166 6c69 6465 202e 6441 7264 7365 3a73     failed. Address:
   12390:	0020 0000 6220 7469 3a20 0000 7257 7469      ... bit :..Writ
   123a0:	2065 202d 6552 6461 6920 2073 7573 6363     e - Read is succ
   123b0:	7365 6673 6c75 6920 206e 4545 5250 4d4f     essful in EEPROM
   123c0:	6d20 6d65 726f 2079 0020 0000 5351 4950      memory  ...QSPI
   123d0:	5020 6f72 7267 6d61 5320 6174 7472 6465      Program Started
   123e0:	0d0a 0000 6c46 7361 2068 6164 6174 7620     ....Flash data v
   123f0:	7265 6669 6369 7461 6f69 206e 6166 6c69     erification fail
   12400:	6465 202e 6441 7264 7365 3a73 0020 0000     ed. Address: ...
   12410:	7257 7469 2065 202d 6552 6461 6920 2073     Write - Read is 
   12420:	7573 6363 7365 6673 6c75 6920 206e 5351     successful in QS
   12430:	4950 4620 616c 6873 6d20 6d65 726f 2079     PI Flash memory 
   12440:	0020 0000 2a2a 2a2a 2020 6143 656c 646e      ...****  Calend
   12450:	7261 5520 6470 7461 2065 6554 7473 2a2a     ar Update Test**
   12460:	002a 0000 6557 2064 6553 2070 3033 3120     *...Wed Sep 30 1
   12470:	3a32 3830 303a 2035 3032 3032 0000 0000     2:08:05 2020....
   12480:	2a2a 2a2a 616c 7473 6420 7461 2061 6974     ****last data ti
   12490:	656d 003a 7909 6165 2072 003a 6d09 6e6f     me:..year :..mon
   124a0:	6874 3a20 0000 0000 6409 7961 203a 0000     th :.....day: ..
   124b0:	6809 756f 2072 003a 6d09 6e69 3a20 0000     .hour :..min :..
   124c0:	7309 6365 203a 0000 2a2a 7563 7272 6e65     .sec: ..**curren
   124d0:	2074 6164 6174 7420 6d69 3a65 0000 0000     t data time:....

000124e0 <defaultParameters>:
   124e0:	0082 0000                                   ....

000124e4 <defaultPreferences>:
   124e4:	00fa 0000 0032 0000                         ....2...

000124ec <_ZTV14Calendar_Class>:
	...
   124f4:	194d 0000 199d 0000                         M.......

000124fc <_ZTV17DateTimeLog_Class>:
	...
   12504:	0869 0000 0869 0000                         i...i...

0001250c <_ZTV9CDC_Class>:
	...
   12514:	20d9 0000 21a9 0000 1d65 0000 20a1 0000     . ...!..e.... ..
   12524:	2241 0000 2065 0000 1f79 0000 1fc9 0000     A"..e ..y.......
   12534:	20c1 0000 2111 0000                         . ...!..

0001253c <_ZTV6Stream>:
	...
   12544:	0869 0000 2311 0000 1d65 0000 1d79 0000     i....#..e...y...
   12554:	0869 0000 0869 0000 0869 0000 7830 2e25     i...i...i...0x%.
   12564:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   12574:	766f 0066                                   ovf.

00012578 <_ZTV5Print>:
	...
   12580:	0869 0000 2311 0000 1d65 0000 1d79 0000     i....#..e...y...
   12590:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
   125a0:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
   125b0:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
   125c0:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
   125d0:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
   125e0:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   125f0:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
   12600:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   12610:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
   12620:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
   12630:	615f 7973 636e 632e 0000 0000 2e2e 682f     _async.c....../h
   12640:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.
   12650:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
   12660:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
   12670:	6372 682f 6c61 715f 7073 5f69 7973 636e     rc/hal_qspi_sync
   12680:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   12690:	6c61 735f 6970 6d5f 615f 7973 636e 632e     al_spi_m_async.c
   126a0:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   126b0:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
   126c0:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
   126d0:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
   126e0:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
   126f0:	7369 2e74 0063 0000                         ist.c...

000126f8 <_map>:
   126f8:	0000 0000 0040 0000 0004 0000 0004 0000     ....@...........
   12708:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   12718:	0007 0000 0057 0000 2e2e 682f 6c70 652f     ....W...../hpl/e
   12728:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00012738 <user_mux_confs>:
   12738:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

0001277c <channel_confs>:
   1277c:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

000127bc <interrupt_cfg>:
	...
   1283c:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   1284c:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   1285c:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   1286c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   1287c:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   1288c:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   1289c:	0400 4300 0800 4300 0c00 4300               ...C...C...C

000128a8 <sercomspi_regs>:
   128a8:	000c 0020 0000 0002 0000 0000 00fe 01ff     .. .............
   128b8:	8c00 2000 0000 0200 0000 0000 6300 ff00     ... .........c..
   128c8:	0101 000c 0020 0000 0002 0000 0000 00fe     .... ...........
   128d8:	01ff 0004 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   128e8:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   128f8:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   12908:	1400 4300 1800 4300                         ...C...C

00012910 <_usb_ep_cfgs>:
   12910:	2184 2000 0000 0000 0040 0000 21c4 2000     .!. ....@....!. 
   12920:	2204 2000 0040 0040 2244 2000 2284 2000     .". @.@.D". .". 
   12930:	0040 0040 22c4 2000 2304 2000 0040 0040     @.@..". .#. @.@.
   12940:	2344 2000 2384 2000 0040 0040 0804 0000     D#. .#. @.@.....
   12950:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   12960:	6c70 775f 7464 632e 0000 0000               pl_wdt.c....

0001296c <n25q256a_interface>:
   1296c:	d941 0000 d9e5 0000 daf5 0000 dcad 0000     A...............
   1297c:	dd3d 0000 2e2e 682f 6c70 702f 726f 2f74     =...../hpl/port/
   1298c:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   1299c:	2e2e 752f 6273 642f 7665 6369 2f65 7375     ../usb/device/us
   129ac:	6462 2e63 0063 0000 6f70 0077 0000 0000     bdc.c...pow.....
   129bc:	0000 0000                                   ....

000129c0 <TWO52>:
   129c0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000129d0 <_global_impure_ptr>:
   129d0:	0148 2000                                   H.. 

000129d4 <_init>:
   129d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129d6:	bf00      	nop
   129d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   129da:	bc08      	pop	{r3}
   129dc:	469e      	mov	lr, r3
   129de:	4770      	bx	lr

000129e0 <__init_array_start>:
   129e0:	000117e1 	.word	0x000117e1

000129e4 <__frame_dummy_init_array_entry>:
   129e4:	00000289 00000355 00000731 00000901     ....U...1.......
   129f4:	00000a15 00000d0d 00000dbd 00000e4d     ............M...
   12a04:	000016b9 00001779 00001839 000018d5     ....y...9.......
   12a14:	00001be9 00001d2d 000022c1 00002b25     ....-...."..%+..

00012a24 <_fini>:
   12a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a26:	bf00      	nop
   12a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12a2a:	bc08      	pop	{r3}
   12a2c:	469e      	mov	lr, r3
   12a2e:	4770      	bx	lr

00012a30 <__fini_array_start>:
   12a30:	00000265 	.word	0x00000265
